;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (x27a9@read-annotated x27ab@annotation-stripped x27ad@annotation? x27af@annotation-source x27b1@annotation-expression x27b3@scm->fasl x27b5@fasl-save x27b7@fasl-load x27b9@serialize-library x27bb@load-serialized-library x27bd@make-record-printer x27bf@compile-core x27c1@read-library-source-file x27c3@make-parameter x282b@file-options-spec) (begin (set! x27a9@read-annotated read) (set! x27ab@annotation-stripped (lambda (x282c@x) (x27b1@annotation-expression x282c@x))) (set! x27ad@annotation? (lambda (x282e@x) (source-info x282e@x))) (set! x27af@annotation-source (lambda (x2830@x) (source-info x2830@x))) (set! x27b1@annotation-expression (lambda (x2832@x) (if (pair? x2832@x) (cons (car x2832@x) (cdr x2832@x)) (display '"line:46\n")))) (set! x27b3@scm->fasl (lambda (x2834@filename) (string-append x2834@filename '".mosh-fasl"))) (set! x27b5@fasl-save (lambda (x2836@filename x2837@obj) (call-with-port (open-file-output-port x2836@filename) (lambda (x283a@port) ((symbol-value 'fasl-write!) x2837@obj x283a@port))))) (set! x27b7@fasl-load (lambda (x283c@filename) (call-with-port (open-file-input-port x283c@filename) (symbol-value 'fasl-read!)))) (set! x27b9@serialize-library (lambda (x283e@filename x283f@obj) (begin (format '#t '"serialize-library ~a\n..." x283e@filename) ((lambda (x2842@expanded2core) ((lambda (x2844@compile) ((lambda (x2846@code) ((lambda (x2848@pivot) ((lambda (x284a@visit) ((lambda () (begin (set-car! x2848@pivot x284a@visit) ((lambda (x284c@pivot) ((lambda (x284e@invoke) ((lambda () (set-car! x284c@pivot x284e@invoke)))) (x2844@compile (x2842@expanded2core (car x284c@pivot))))) (cdr x2848@pivot)))))) (x2844@compile (x2842@expanded2core (car x2848@pivot))))) (cddddr (cddddr x2846@code)))) x283f@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (x2850@fasl-file) (begin (if (file-exists? x2850@fasl-file) (delete-file x2850@fasl-file) (void)) ((call/cc (lambda (x2854@x2852) (lambda () (with-exception-handler (lambda (x2856@c) ((call/cc (lambda (x2858@x2853) (x2854@x2852 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " x283e@filename) (if (file-exists? x2850@fasl-file) (delete-file x2850@fasl-file) (void)) '#f) (x2858@x2853 (lambda () (raise-continuable x2856@c)))))))))) (lambda () (begin (x27b5@fasl-save x2850@fasl-file x283f@obj) (display '"OK\n")))))))))) (x27b3@scm->fasl x283e@filename))))) (set! x27bb@load-serialized-library (lambda (x285a@filename x285b@obj) ((lambda (x285e@fasl-file) (if (and (file-exists? x285e@fasl-file) ((symbol-value 'file-newer?) x285e@fasl-file x285a@filename)) ((lambda (x2860@expanded2core) ((lambda (x2862@eval-compiled-core) ((lambda (x2864@code) ((lambda (x2866@pivot) ((lambda (x2868@visit) ((lambda (x286a@visit-proc) ((lambda () (begin (set-car! x2866@pivot x286a@visit-proc) ((lambda (x286c@pivot) ((lambda (x286e@invoke) ((lambda () (begin (set-car! x286c@pivot (lambda () (x2862@eval-compiled-core x286e@invoke))) (apply x285b@obj x2864@code))))) (car x286c@pivot))) (cdr x2866@pivot)) '#t)))) (lambda () (x2862@eval-compiled-core x2868@visit)))) (car x2866@pivot))) (cddddr (cddddr x2864@code)))) (x27b7@fasl-load x285e@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (x27b3@scm->fasl x285a@filename)))) (set! x27bd@make-record-printer (lambda (x2870@name x2871@printer) (lambda x2874@x (begin (display '"record printer") (for-each display x2874@x))))) (set! x27bf@compile-core (lambda x2876@x (apply error 'comile-core '"not implementated" x2876@x))) (set! x27c1@read-library-source-file (lambda (x2878@file-name) (with-input-from-file x2878@file-name x27a9@read-annotated))) (set! x27c3@make-parameter (lambda x2888 ((lambda (x2889) (if (= x2889 '1) (apply (lambda (x287a@x) (x27c3@make-parameter x287a@x (lambda (x287c@x) x287c@x))) x2888) (if (= x2889 '2) (apply (lambda (x287e@x x287f@fender) ((lambda (x2882@x) (lambda x2886 ((lambda (x2887) (if (= x2887 '0) (apply (lambda () x2882@x) x2886) (if (= x2887 '1) (apply (lambda (x2884@v) (set! x2882@x (x287f@fender x2884@v))) x2886) (error 'apply '"invalid arg count")))) (length x2886)))) (x287f@fender x287e@x))) x2888) (error 'apply '"invalid arg count")))) (length x2888)))) (set! x282b@file-options-spec (lambda (x288a@x) x288a@x)) (begin (set! x289a@x282b@file-options-spec x282b@file-options-spec) (set! x2899@x27c3@make-parameter x27c3@make-parameter) (set! x2898@x27c1@read-library-source-file x27c1@read-library-source-file) (set! x2897@x27bf@compile-core x27bf@compile-core) (set! x2896@x27bd@make-record-printer x27bd@make-record-printer) (set! x2895@x27bb@load-serialized-library x27bb@load-serialized-library) (set! x2894@x27b9@serialize-library x27b9@serialize-library) (set! x2893@x27b7@fasl-load x27b7@fasl-load) (set! x2892@x27b5@fasl-save x27b5@fasl-save) (set! x2891@x27b3@scm->fasl x27b3@scm->fasl) (set! x2890@x27b1@annotation-expression x27b1@annotation-expression) (set! x288f@x27af@annotation-source x27af@annotation-source) (set! x288e@x27ad@annotation? x27ad@annotation?) (set! x288d@x27ab@annotation-stripped x27ab@annotation-stripped) (set! x288c@x27a9@read-annotated x27a9@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (x289f@current-primitive-locations x28a1@mutable? x28a3@rewriter x28a5@expanded->core x28a7@compile-core-expr x28a9@pretty-print x28ab@compile-core-expr-to-port) (begin (set! x289f@current-primitive-locations (x2899@x27c3@make-parameter (lambda (x28ac@x) '#f) (lambda (x28ae@p) x28ae@p))) (set! x28a1@mutable? (lambda (x28b0@x) (or (pair? x28b0@x) (vector? x28b0@x) (hashtable? x28b0@x)))) (set! x28a3@rewriter (lambda (x28b2@quote-hack?) ((lambda (x28b5@f) (begin (set! x28b5@f (lambda (x28b6@x) (if (pair? x28b6@x) ((lambda (x28b8@t) (if (memv x28b8@t '(quote)) (if (and x28b2@quote-hack? (x28a1@mutable? (cadr x28b6@x))) ((lambda (x28ba@g) (begin (set-symbol-value! x28ba@g (cadr x28b6@x)) x28ba@g)) (gensym)) x28b6@x) (if (memv x28b8@t '(case-lambda)) (cons 'case-lambda (map (lambda (x28bc@x) (cons (car x28bc@x) (map x28b5@f (cdr x28bc@x)))) (cdr x28b6@x))) (if (memv x28b8@t '(lambda)) (cons* 'lambda (cadr x28b6@x) (map x28b5@f (cddr x28b6@x))) (if (memv x28b8@t '(letrec)) ((lambda (x28be@bindings x28bf@body*) ((lambda (x28c2@lhs* x28c3@rhs*) (cons* 'letrec (map list x28c2@lhs* (map x28b5@f x28c3@rhs*)) (map x28b5@f x28bf@body*))) (map car x28be@bindings) (map cadr x28be@bindings))) (cadr x28b6@x) (cddr x28b6@x)) (if (memv x28b8@t '(letrec*)) ((lambda (x28c6@bindings x28c7@body*) ((lambda (x28ca@lhs* x28cb@rhs*) (cons* 'letrec* (map list x28ca@lhs* (map x28b5@f x28cb@rhs*)) (map x28b5@f x28c7@body*))) (map car x28c6@bindings) (map cadr x28c6@bindings))) (cadr x28b6@x) (cddr x28b6@x)) (if (memv x28b8@t '(library-letrec*)) ((lambda (x28ce@name x28cf@x) ((lambda (x28d2@bindings x28d3@body*) ((lambda (x28d6@lhs* x28d7@lhs** x28d8@rhs*) (cons* 'library-letrec* x28ce@name (map list x28d6@lhs* x28d7@lhs** (map x28b5@f x28d8@rhs*)) (map x28b5@f x28d3@body*))) (map car x28d2@bindings) (map cadr x28d2@bindings) (map caddr x28d2@bindings))) (cadr x28cf@x) (cddr x28cf@x))) (cadr x28b6@x) (cdr x28b6@x)) (if (memv x28b8@t '(begin)) (cons 'begin (map x28b5@f (cdr x28b6@x))) (if (memv x28b8@t '(set!)) (list 'set! (cadr x28b6@x) (x28b5@f (caddr x28b6@x))) (if (memv x28b8@t '(primitive)) ((lambda (x28dc@op) ((lambda (x28de@t) (if x28de@t ((lambda (x28e0@loc) x28e0@loc) x28de@t) x28dc@op)) ((x289f@current-primitive-locations) x28dc@op))) (cadr x28b6@x)) (if (memv x28b8@t '(define)) x28b6@x (if (list? x28b6@x) (map x28b5@f x28b6@x) (error 'rewrite '"invalid form ~s ~s" x28b6@x (list? x28b6@x)))))))))))))) (car x28b6@x)) x28b6@x))) x28b5@f)) '#f))) (set! x28a5@expanded->core (lambda (x28e2@x) ((x28a3@rewriter '#f) x28e2@x))) (set! x28a7@compile-core-expr (lambda (x28e4@x) ((x28a3@rewriter '#f) x28e4@x))) (set! x28a9@pretty-print write) (set! x28ab@compile-core-expr-to-port (lambda (x28e6@x x28e7@p) (x28a9@pretty-print ((x28a3@rewriter '#f) x28e6@x) x28e7@p))) (begin (set! x28f0@x28ab@compile-core-expr-to-port x28ab@compile-core-expr-to-port) (set! x28ef@x28a9@pretty-print x28a9@pretty-print) (set! x28ee@x28a7@compile-core-expr x28a7@compile-core-expr) (set! x28ed@x28a5@expanded->core x28a5@expanded->core) (set! x28ec@x28a3@rewriter x28a3@rewriter) (set! x28eb@x28a1@mutable? x28a1@mutable?) (set! x28ea@x289f@current-primitive-locations x289f@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (x293f@make-collection x2941@current-library-collection x2947@x2942 x2949@x2944 x294b@x2943 x294e@library? x2950@make-library x2952@library-id x2954@library-name x2956@library-version x2958@library-imp* x295a@library-vis* x295c@library-inv* x295e@library-subst x2960@library-env x2962@library-visit-state x2964@library-invoke-state x2966@library-visit-code x2968@library-invoke-code x296a@library-visible? x296c@library-source-file-name x296e@set-library-id! x2970@set-library-name! x2972@set-library-version! x2974@set-library-imp*! x2976@set-library-vis*! x2978@set-library-inv*! x297a@set-library-subst! x297c@set-library-env! x297e@set-library-visit-state! x2980@set-library-invoke-state! x2982@set-library-visit-code! x2984@set-library-invoke-code! x2986@set-library-visible?! x2988@set-library-source-file-name! x298a@rp x298c@find-dependencies x298e@find-library-by x2990@library-path x2992@library-extensions x2994@library-name->file-name x2996@file-locator x2998@serialize-all x299a@current-precompiled-library-loader x299c@try-load-from-file x299e@library-loader x29a0@current-library-expander x29a2@external-pending-libraries x29a4@find-external-library x29a6@find-library-by-name x29a8@library-exists? x29aa@find-library-by-spec/die x29ac@label->binding-table x29ae@install-library-record x29b0@install-library x29b2@imported-label->binding x29b4@invoke-library x29b6@visit-library x29b8@invoke-library-by-spec x29ba@installed-libraries x29bc@library-spec) (begin (set! x293f@make-collection (lambda () ((lambda (x29bd@set) ((lambda (x29c0@set-cons) (begin (set! x29c0@set-cons (lambda (x29c5@x x29c6@ls) (if (memq x29c5@x x29c6@ls) x29c6@ls (cons x29c5@x x29c6@ls)))) (lambda x29c3 ((lambda (x29c4) (if (= x29c4 '0) (apply (lambda () x29bd@set) x29c3) (if (= x29c4 '1) (apply (lambda (x29c1@x) (set! x29bd@set (x29c0@set-cons x29c1@x x29bd@set))) x29c3) (error 'apply '"invalid arg count")))) (length x29c3))))) '#f)) '()))) (set! x2941@current-library-collection (x2899@x27c3@make-parameter (x293f@make-collection) (lambda (x29c9@x) (begin (if (not (procedure? x29c9@x)) (assertion-violation 'current-library-collection '"not a procedure" x29c9@x) (void)) x29c9@x)))) (set! x2947@x2942 (make-record-type-descriptor 'library '#f 'x2945 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! x2949@x2944 '#f) (set! x294b@x2943 (make-record-constructor-descriptor x2947@x2942 '#f x2949@x2944)) (set! x294e@library? (record-predicate x2947@x2942)) (set! x2950@make-library (record-constructor x294b@x2943)) (set! x2952@library-id (record-accessor x2947@x2942 '0)) (set! x2954@library-name (record-accessor x2947@x2942 '1)) (set! x2956@library-version (record-accessor x2947@x2942 '2)) (set! x2958@library-imp* (record-accessor x2947@x2942 '3)) (set! x295a@library-vis* (record-accessor x2947@x2942 '4)) (set! x295c@library-inv* (record-accessor x2947@x2942 '5)) (set! x295e@library-subst (record-accessor x2947@x2942 '6)) (set! x2960@library-env (record-accessor x2947@x2942 '7)) (set! x2962@library-visit-state (record-accessor x2947@x2942 '8)) (set! x2964@library-invoke-state (record-accessor x2947@x2942 '9)) (set! x2966@library-visit-code (record-accessor x2947@x2942 '10)) (set! x2968@library-invoke-code (record-accessor x2947@x2942 '11)) (set! x296a@library-visible? (record-accessor x2947@x2942 '12)) (set! x296c@library-source-file-name (record-accessor x2947@x2942 '13)) (set! x296e@set-library-id! (record-mutator x2947@x2942 '0)) (set! x2970@set-library-name! (record-mutator x2947@x2942 '1)) (set! x2972@set-library-version! (record-mutator x2947@x2942 '2)) (set! x2974@set-library-imp*! (record-mutator x2947@x2942 '3)) (set! x2976@set-library-vis*! (record-mutator x2947@x2942 '4)) (set! x2978@set-library-inv*! (record-mutator x2947@x2942 '5)) (set! x297a@set-library-subst! (record-mutator x2947@x2942 '6)) (set! x297c@set-library-env! (record-mutator x2947@x2942 '7)) (set! x297e@set-library-visit-state! (record-mutator x2947@x2942 '8)) (set! x2980@set-library-invoke-state! (record-mutator x2947@x2942 '9)) (set! x2982@set-library-visit-code! (record-mutator x2947@x2942 '10)) (set! x2984@set-library-invoke-code! (record-mutator x2947@x2942 '11)) (set! x2986@set-library-visible?! (record-mutator x2947@x2942 '12)) (set! x2988@set-library-source-file-name! (record-mutator x2947@x2942 '13)) (set! x298a@rp (x2896@x27bd@make-record-printer 'library (lambda (x29cb@x x29cc@p x29cd@wr) (begin (if (not (x294e@library? x29cb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (x2956@library-version x29cb@x)) (x2954@library-name x29cb@x) (append (x2954@library-name x29cb@x) (list (x2956@library-version x29cb@x))))) x29cc@p))))) (set! x298c@find-dependencies (lambda (x29d1@ls) (if (null? x29d1@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! x298e@find-library-by (lambda (x29d3@pred) ((letrec ((x29d5@f (lambda (x29d7@ls) (if (null? x29d7@ls) '#f (if (x29d3@pred (car x29d7@ls)) (car x29d7@ls) (x29d5@f (cdr x29d7@ls))))))) x29d5@f) ((x2941@current-library-collection))))) (set! x2990@library-path (x2899@x27c3@make-parameter '(".") (lambda (x29d9@x) (if (and (list? x29d9@x) (for-all string? x29d9@x)) (map (lambda (x29db@x) x29db@x) x29d9@x) (assertion-violation 'library-path '"not a list of strings" x29d9@x))))) (set! x2992@library-extensions (x2899@x27c3@make-parameter '(".sls" ".ss" ".scm") (lambda (x29dd@x) (if (and (list? x29dd@x) (for-all string? x29dd@x)) (map (lambda (x29df@x) x29df@x) x29dd@x) (assertion-violation 'library-extensions '"not a list of strings" x29dd@x))))) (set! x2994@library-name->file-name (lambda (x29e1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (x29e7@x29e4 x29e8@x29e6) ((lambda (x29eb@extract x29ec@p) ((lambda (x29f0@display-hex) (begin (set! x29f0@display-hex (lambda (x29f9@n) (if (<= '0 x29f9@n '9) (display x29f9@n x29ec@p) (display (integer->char (+ (char->integer '#\a) (- x29f9@n '10))) x29ec@p)))) (begin ((letrec ((x29f1@f (lambda (x29f3@ls) (if (not (null? x29f3@ls)) (begin (display '"/" x29ec@p) (for-each (lambda (x29f5@c) (if (or (char<=? '#\a x29f5@c '#\z) (char<=? '#\A x29f5@c '#\Z) (char<=? '#\0 x29f5@c '#\9) (memv x29f5@c '(#\- #\. #\_ #\~))) (display x29f5@c x29ec@p) (begin (display '"%" x29ec@p) ((lambda (x29f7@n) (begin (x29f0@display-hex (quotient x29f7@n '16)) (x29f0@display-hex (remainder x29f7@n '16)))) (char->integer x29f5@c))))) (string->list (symbol->string (car x29f3@ls)))) (x29f1@f (cdr x29f3@ls))) (void))))) x29f1@f) x29e1@x) (x29eb@extract)))) '#f)) x29e8@x29e6 x29e7@x29e4))))) (set! x2996@file-locator (x2899@x27c3@make-parameter (lambda (x29fb@x) ((lambda (x29fd@str) ((letrec ((x29ff@f (lambda (x2a01@ls x2a02@exts x2a03@failed-list) (if (null? x2a01@ls) ((lambda () ((lambda (x2a0f@x2a0a x2a11@x2a0c x2a13@x2a0b x2a16@x2a09 x2a18@make-library-resolution-condition x2a1a@x2a07 x2a1c@x2a08 x2a1e@library-resolution-condition? x2a20@condition-library x2a22@condition-files) (begin (set! x2a0f@x2a0a (make-record-type-descriptor '&library-resolution x4cb0@x49f7@&condition-rtd 'x2a0d '#f '#f '#((immutable library) (immutable files)))) (set! x2a11@x2a0c '#f) (set! x2a13@x2a0b (make-record-constructor-descriptor x2a0f@x2a0a x4cb1@x49f9@&condition-rcd x2a11@x2a0c)) (set! x2a16@x2a09 (record-predicate x2a0f@x2a0a)) (set! x2a18@make-library-resolution-condition (record-constructor x2a13@x2a0b)) (set! x2a1a@x2a07 (record-accessor x2a0f@x2a0a '0)) (set! x2a1c@x2a08 (record-accessor x2a0f@x2a0a '1)) (set! x2a1e@library-resolution-condition? (condition-predicate x2a0f@x2a0a)) (set! x2a20@condition-library (condition-accessor x2a0f@x2a0a x2a1a@x2a07)) (set! x2a22@condition-files (condition-accessor x2a0f@x2a0a x2a1c@x2a08)) (raise (condition (x4cd0@x4a91@make-error) (x4cf2@x4aed@make-who-condition 'expander) (x4cb6@x4a4e@make-message-condition '"cannot locate library in library-path") (x2a18@make-library-resolution-condition x29fb@x (reverse x2a03@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? x2a02@exts) (x29ff@f (cdr x2a01@ls) (x2992@library-extensions) x2a03@failed-list) ((lambda (x2a23@name) (if (file-exists? x2a23@name) x2a23@name (x29ff@f x2a01@ls (cdr x2a02@exts) (cons x2a23@name x2a03@failed-list)))) (string-append (car x2a01@ls) x29fd@str (car x2a02@exts)))))))) x29ff@f) (x2990@library-path) (x2992@library-extensions) '())) (x2994@library-name->file-name x29fb@x))) (lambda (x2a25@f) (if (procedure? x2a25@f) x2a25@f (assertion-violation 'file-locator '"not a procedure" x2a25@f))))) (set! x2998@serialize-all (lambda (x2a27@serialize x2a28@compile) ((lambda (x2a2c@library-desc) (begin (set! x2a2c@library-desc (lambda (x2a2f@x) (list (x2952@library-id x2a2f@x) (x2954@library-name x2a2f@x)))) (for-each (lambda (x2a2d@x) (if (x296c@library-source-file-name x2a2d@x) (x2a27@serialize (x296c@library-source-file-name x2a2d@x) (list (x2952@library-id x2a2d@x) (x2954@library-name x2a2d@x) (x2956@library-version x2a2d@x) (map x2a2c@library-desc (x2958@library-imp* x2a2d@x)) (map x2a2c@library-desc (x295a@library-vis* x2a2d@x)) (map x2a2c@library-desc (x295c@library-inv* x2a2d@x)) (x295e@library-subst x2a2d@x) (x2960@library-env x2a2d@x) (x2a28@compile (x2966@library-visit-code x2a2d@x)) (x2a28@compile (x2968@library-invoke-code x2a2d@x)) (x296a@library-visible? x2a2d@x))) (void))) ((x2941@current-library-collection))))) '#f))) (set! x299a@current-precompiled-library-loader (x2899@x27c3@make-parameter (lambda (x2a31@filename x2a32@sk) '#f))) (set! x299c@try-load-from-file (lambda (x2a35@filename) ((x299a@current-precompiled-library-loader) x2a35@filename (lambda x2a5b ((lambda (x2a5c) (if (= x2a5c '11) (apply (lambda (x2a37@id x2a38@name x2a39@ver x2a3a@imp* x2a3b@vis* x2a3c@inv* x2a3d@exp-subst x2a3e@exp-env x2a3f@visit-proc x2a40@invoke-proc x2a41@visible?) ((letrec ((x2a4d@f (lambda (x2a4f@deps) (if (null? x2a4f@deps) (begin (x29b0@install-library x2a37@id x2a38@name x2a39@ver x2a3a@imp* x2a3b@vis* x2a3c@inv* x2a3d@exp-subst x2a3e@exp-env x2a3f@visit-proc x2a40@invoke-proc '#f '#f x2a41@visible? '#f) '#t) ((lambda (x2a51@d) ((lambda (x2a53@label x2a54@dname) ((lambda (x2a57@l) (if (and (x294e@library? x2a57@l) (eq? x2a53@label (x2952@library-id x2a57@l))) (x2a4d@f (cdr x2a4f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" x2a38@name x2a54@dname x2a35@filename x2a57@l x2a53@label (x2952@library-id x2a57@l)) '#f))) (x29a6@find-library-by-name x2a54@dname))) (car x2a51@d) (cadr x2a51@d))) (car x2a4f@deps)))))) x2a4d@f) (append x2a3a@imp* x2a3b@vis* x2a3c@inv*))) x2a5b) (if (>= x2a5c '0) (apply (lambda x2a59@others '#f) x2a5b) (error 'apply '"invalid arg count")))) (length x2a5b)))))) (set! x299e@library-loader (x2899@x27c3@make-parameter (lambda (x2a5d@x) ((lambda (x2a5f@file-name) (if (not x2a5f@file-name) (assertion-violation '#f '"cannot file library" x2a5d@x) (or (x299c@try-load-from-file x2a5f@file-name) ((x29a0@current-library-expander) (x2898@x27c1@read-library-source-file x2a5f@file-name) x2a5f@file-name (lambda (x2a61@name) (if (not (fast-equal? x2a61@name x2a5d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (x2a67@x2a64 x2a68@x2a66) ((lambda (x2a6b@e x2a6c@p) (begin (display '"expected to find library " x2a6c@p) (write x2a5d@x x2a6c@p) (display '" in file " x2a6c@p) (display x2a5f@file-name x2a6c@p) (display '", found " x2a6c@p) (write x2a61@name x2a6c@p) (display '" instead" x2a6c@p) (x2a6b@e))) x2a68@x2a66 x2a67@x2a64)))) (void))))))) ((x2996@file-locator) x2a5d@x))) (lambda (x2a6f@f) (if (procedure? x2a6f@f) x2a6f@f (assertion-violation 'library-locator '"not a procedure" x2a6f@f))))) (set! x29a0@current-library-expander (x2899@x27c3@make-parameter (lambda (x2a71@x) (assertion-violation 'library-expander '"not initialized")) (lambda (x2a73@f) (if (procedure? x2a73@f) x2a73@f (assertion-violation 'library-expander '"not a procedure" x2a73@f))))) (set! x29a2@external-pending-libraries (x2899@x27c3@make-parameter '())) (set! x29a4@find-external-library (lambda (x2a75@name) (begin (if (member x2a75@name (x29a2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" x2a75@name) (void)) ((lambda (x2a7b@x2a78 x2a7c@x2a7a) ((lambda (x2a7f@swap) (dynamic-wind x2a7f@swap (lambda () (begin ((x299e@library-loader) x2a75@name) (or (x298e@find-library-by (lambda (x2a81@x) (fast-equal? (x2954@library-name x2a81@x) x2a75@name))) (assertion-violation '#f '"handling external library did not yield the correct library" x2a75@name)))) x2a7f@swap)) (lambda () ((lambda (x2a83@t) (begin (x2a7b@x2a78 x2a7c@x2a7a) (set! x2a7c@x2a7a x2a83@t))) (x2a7b@x2a78))))) x29a2@external-pending-libraries (cons x2a75@name (x29a2@external-pending-libraries)))))) (set! x29a6@find-library-by-name (lambda (x2a85@name) (or (x298e@find-library-by (lambda (x2a87@x) (fast-equal? (x2954@library-name x2a87@x) x2a85@name))) (x29a4@find-external-library x2a85@name)))) (set! x29a8@library-exists? (lambda (x2a89@name) (and (x298e@find-library-by (lambda (x2a8b@x) (fast-equal? (x2954@library-name x2a8b@x) x2a89@name))) '#t))) (set! x29aa@find-library-by-spec/die (lambda (x2a8d@spec) ((lambda (x2a8f@id) (or (x298e@find-library-by (lambda (x2a91@x) (eq? x2a8f@id (x2952@library-id x2a91@x)))) (assertion-violation '#f '"cannot find library with required spec" x2a8d@spec))) (car x2a8d@spec)))) (set! x29ac@label->binding-table (make-eq-hashtable)) (set! x29ae@install-library-record (lambda (x2a93@lib) (begin ((lambda (x2a95@exp-env) (for-each (lambda (x2a97@x) ((lambda (x2a99@label x2a9a@binding) ((lambda (x2a9d@binding) (begin (if (hashtable-ref x29ac@label->binding-table x2a99@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" x2a99@label (hashtable-ref x29ac@label->binding-table x2a99@label '#f) x2a9d@binding) (exit)) (void)) (hashtable-set! x29ac@label->binding-table x2a99@label x2a9d@binding))) ((lambda (x2a9f@t) (if (memv x2a9f@t '(global)) (cons 'global (cons x2a93@lib (cdr x2a9a@binding))) (if (memv x2a9f@t '(global-macro)) (cons 'global-macro (cons x2a93@lib (cdr x2a9a@binding))) (if (memv x2a9f@t '(global-macro!)) (cons 'global-macro! (cons x2a93@lib (cdr x2a9a@binding))) x2a9a@binding)))) (car x2a9a@binding)))) (car x2a97@x) (cdr x2a97@x))) x2a95@exp-env)) (x2960@library-env x2a93@lib)) ((x2941@current-library-collection) x2a93@lib)))) (set! x29b0@install-library (lambda (x2aa1@id x2aa2@name x2aa3@ver x2aa4@imp* x2aa5@vis* x2aa6@inv* x2aa7@exp-subst x2aa8@exp-env x2aa9@visit-proc x2aaa@invoke-proc x2aab@visit-code x2aac@invoke-code x2aad@visible? x2aae@source-file-name) ((lambda (x2abd@imp-lib* x2abe@vis-lib* x2abf@inv-lib*) (begin (if (not (and (symbol? x2aa1@id) (list? x2aa2@name) (list? x2aa3@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" x2aa1@id x2aa2@name x2aa3@ver) (void)) (if (x29a8@library-exists? x2aa2@name) (assertion-violation 'install-library '"library is already installed" x2aa2@name) (void)) ((lambda (x2ac3@lib) (x29ae@install-library-record x2ac3@lib)) (x2950@make-library x2aa1@id x2aa2@name x2aa3@ver x2abd@imp-lib* x2abe@vis-lib* x2abf@inv-lib* x2aa7@exp-subst x2aa8@exp-env x2aa9@visit-proc x2aaa@invoke-proc x2aab@visit-code x2aac@invoke-code x2aad@visible? x2aae@source-file-name)))) (map x29aa@find-library-by-spec/die x2aa4@imp*) (map x29aa@find-library-by-spec/die x2aa5@vis*) (map x29aa@find-library-by-spec/die x2aa6@inv*)))) (set! x29b2@imported-label->binding (lambda (x2ac5@lab) (hashtable-ref x29ac@label->binding-table x2ac5@lab '#f))) (set! x29b4@invoke-library (lambda (x2ac7@lib) ((lambda (x2ac9@invoke) (if (procedure? x2ac9@invoke) (begin (x2980@set-library-invoke-state! x2ac7@lib (lambda () (assertion-violation 'invoke '"circularity detected" x2ac7@lib))) (for-each x29b4@invoke-library (x295c@library-inv* x2ac7@lib)) (x2980@set-library-invoke-state! x2ac7@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" x2ac7@lib))) (x2ac9@invoke) (x2980@set-library-invoke-state! x2ac7@lib '#t)) (void))) (x2964@library-invoke-state x2ac7@lib)))) (set! x29b6@visit-library (lambda (x2acb@lib) ((lambda (x2acd@visit) (if (procedure? x2acd@visit) (begin (x297e@set-library-visit-state! x2acb@lib (lambda () (assertion-violation 'visit '"circularity detected" x2acb@lib))) (for-each x29b4@invoke-library (x295a@library-vis* x2acb@lib)) (x297e@set-library-visit-state! x2acb@lib (lambda () (assertion-violation 'invoke '"first visit did not return" x2acb@lib))) (x2acd@visit) (x297e@set-library-visit-state! x2acb@lib '#t)) (void))) (x2962@library-visit-state x2acb@lib)))) (set! x29b8@invoke-library-by-spec (lambda (x2acf@spec) (x29b4@invoke-library (x29aa@find-library-by-spec/die x2acf@spec)))) (set! x29ba@installed-libraries (lambda x2ad7 ((lambda (x2ad8) (if (= x2ad8 '1) (apply (lambda (x2ad1@all?) ((letrec ((x2ad3@f (lambda (x2ad5@ls) (if (null? x2ad5@ls) '() (if (or x2ad1@all? (x296a@library-visible? (car x2ad5@ls))) (cons (car x2ad5@ls) (x2ad3@f (cdr x2ad5@ls))) (x2ad3@f (cdr x2ad5@ls))))))) x2ad3@f) ((x2941@current-library-collection)))) x2ad7) (if (= x2ad8 '0) (apply (lambda () (x29ba@installed-libraries '#f)) x2ad7) (error 'apply '"invalid arg count")))) (length x2ad7)))) (set! x29bc@library-spec (lambda (x2ad9@x) (begin (if (not (x294e@library? x2ad9@x)) (assertion-violation 'library-spec '"not a library" x2ad9@x) (void)) (list (x2952@library-id x2ad9@x) (x2954@library-name x2ad9@x) (x2956@library-version x2ad9@x))))) (begin (set! x2b17@x29bc@library-spec x29bc@library-spec) (set! x2b16@x29ba@installed-libraries x29ba@installed-libraries) (set! x2b15@x29b8@invoke-library-by-spec x29b8@invoke-library-by-spec) (set! x2b14@x29b6@visit-library x29b6@visit-library) (set! x2b13@x29b4@invoke-library x29b4@invoke-library) (set! x2b12@x29b2@imported-label->binding x29b2@imported-label->binding) (set! x2b11@x29b0@install-library x29b0@install-library) (set! x2b10@x29ae@install-library-record x29ae@install-library-record) (set! x2b0f@x29ac@label->binding-table x29ac@label->binding-table) (set! x2b0e@x29aa@find-library-by-spec/die x29aa@find-library-by-spec/die) (set! x2b0d@x29a8@library-exists? x29a8@library-exists?) (set! x2b0c@x29a6@find-library-by-name x29a6@find-library-by-name) (set! x2b0b@x29a4@find-external-library x29a4@find-external-library) (set! x2b0a@x29a2@external-pending-libraries x29a2@external-pending-libraries) (set! x2b09@x29a0@current-library-expander x29a0@current-library-expander) (set! x2b08@x299e@library-loader x299e@library-loader) (set! x2b07@x299c@try-load-from-file x299c@try-load-from-file) (set! x2b06@x299a@current-precompiled-library-loader x299a@current-precompiled-library-loader) (set! x2b05@x2998@serialize-all x2998@serialize-all) (set! x2b04@x2996@file-locator x2996@file-locator) (set! x2b03@x2994@library-name->file-name x2994@library-name->file-name) (set! x2b02@x2992@library-extensions x2992@library-extensions) (set! x2b01@x2990@library-path x2990@library-path) (set! x2b00@x298e@find-library-by x298e@find-library-by) (set! x2aff@x298c@find-dependencies x298c@find-dependencies) (set! x2afe@x298a@rp x298a@rp) (set! x2afd@x2988@set-library-source-file-name! x2988@set-library-source-file-name!) (set! x2afc@x2986@set-library-visible?! x2986@set-library-visible?!) (set! x2afb@x2984@set-library-invoke-code! x2984@set-library-invoke-code!) (set! x2afa@x2982@set-library-visit-code! x2982@set-library-visit-code!) (set! x2af9@x2980@set-library-invoke-state! x2980@set-library-invoke-state!) (set! x2af8@x297e@set-library-visit-state! x297e@set-library-visit-state!) (set! x2af7@x297c@set-library-env! x297c@set-library-env!) (set! x2af6@x297a@set-library-subst! x297a@set-library-subst!) (set! x2af5@x2978@set-library-inv*! x2978@set-library-inv*!) (set! x2af4@x2976@set-library-vis*! x2976@set-library-vis*!) (set! x2af3@x2974@set-library-imp*! x2974@set-library-imp*!) (set! x2af2@x2972@set-library-version! x2972@set-library-version!) (set! x2af1@x2970@set-library-name! x2970@set-library-name!) (set! x2af0@x296e@set-library-id! x296e@set-library-id!) (set! x2aef@x296c@library-source-file-name x296c@library-source-file-name) (set! x2aee@x296a@library-visible? x296a@library-visible?) (set! x2aed@x2968@library-invoke-code x2968@library-invoke-code) (set! x2aec@x2966@library-visit-code x2966@library-visit-code) (set! x2aeb@x2964@library-invoke-state x2964@library-invoke-state) (set! x2aea@x2962@library-visit-state x2962@library-visit-state) (set! x2ae9@x2960@library-env x2960@library-env) (set! x2ae8@x295e@library-subst x295e@library-subst) (set! x2ae7@x295c@library-inv* x295c@library-inv*) (set! x2ae6@x295a@library-vis* x295a@library-vis*) (set! x2ae5@x2958@library-imp* x2958@library-imp*) (set! x2ae4@x2956@library-version x2956@library-version) (set! x2ae3@x2954@library-name x2954@library-name) (set! x2ae2@x2952@library-id x2952@library-id) (set! x2ae1@x2950@make-library x2950@make-library) (set! x2ae0@x294e@library? x294e@library?) (set! x2adf@x294b@x2943 x294b@x2943) (set! x2ade@x2949@x2944 x2949@x2944) (set! x2add@x2947@x2942 x2947@x2942) (set! x2adc@x2941@current-library-collection x2941@current-library-collection) (set! x2adb@x293f@make-collection x293f@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (x2b1a@build-global-define x2b8b@build-lambda x2b8d@build-case-lambda x2b8f@build-let x2bbd@build-sequence x2bbf@build-void x2bc1@build-letrec x2bc3@build-letrec* x2bc5@build-library-letrec* x2bc7@build-receive) (begin (set! x2b1a@build-global-define (lambda (x2bc8@x) (x2bbf@build-void))) (set! x2b8b@build-lambda (lambda (x2bca@ae x2bcb@vars x2bcc@exp) (list 'lambda x2bcb@vars x2bcc@exp))) (set! x2b8d@build-case-lambda (lambda (x2bd0@ae x2bd1@vars* x2bd2@exp*) ((lambda (x2bd7@build-error x2bd9@build-pred x2bdb@build-apply x2bdd@expand-case-lambda) (begin (set! x2bd7@build-error (lambda (x2c0e@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! x2bd9@build-pred (lambda (x2bf6@ae x2bf7@n x2bf8@vars) (call-with-values (lambda () ((letrec ((x2c00@f (lambda (x2c02@vars x2c03@count) (if (pair? x2c02@vars) (x2c00@f (cdr x2c02@vars) (+ x2c03@count '1)) (if (null? x2c02@vars) (values x2c03@count '=) (values x2c03@count '>=)))))) x2c00@f) x2bf8@vars '0)) (lambda (x2c06@x2bfd x2c07@x2bff) ((lambda (x2c0a@pred x2c0b@count) (list (list 'primitive x2c0a@pred) x2bf7@n (list 'quote x2c0b@count))) x2c07@x2bff x2c06@x2bfd))))) (set! x2bdb@build-apply (lambda (x2bee@ae x2bef@g x2bf0@vars x2bf1@exp) (list '(primitive apply) (x2b8b@build-lambda x2bee@ae x2bf0@vars x2bf1@exp) x2bef@g))) (set! x2bdd@expand-case-lambda (lambda (x2bde@ae x2bdf@vars x2be0@exp*) ((lambda (x2be4@g x2be5@n) (list 'lambda x2be4@g (x2b8f@build-let x2bde@ae (list x2be5@n) (list (list '(primitive length) x2be4@g)) ((letrec ((x2be8@f (lambda (x2bea@vars* x2beb@exp*) (if (null? x2bea@vars*) (x2bd7@build-error x2bde@ae) (list 'if (x2bd9@build-pred x2bde@ae x2be5@n (car x2bea@vars*)) (x2bdb@build-apply x2bde@ae x2be4@g (car x2bea@vars*) (car x2beb@exp*)) (x2be8@f (cdr x2bea@vars*) (cdr x2beb@exp*))))))) x2be8@f) x2bd1@vars* x2be0@exp*)))) (gensym) (gensym)))) (if (= (length x2bd2@exp*) '1) (x2b8b@build-lambda x2bd0@ae (car x2bd1@vars*) (car x2bd2@exp*)) (x2bdd@expand-case-lambda x2bd0@ae x2bd1@vars* x2bd2@exp*)))) '#f '#f '#f '#f))) (set! x2b8f@build-let (lambda (x2c10@ae x2c11@lhs* x2c12@rhs* x2c13@body) (cons (x2b8b@build-lambda x2c10@ae x2c11@lhs* x2c13@body) x2c12@rhs*))) (set! x2bbd@build-sequence (lambda (x2c18@ae x2c19@exps) ((letrec ((x2c1c@loop (lambda (x2c1e@exps) (if (null? (cdr x2c1e@exps)) (car x2c1e@exps) (if (equal? (car x2c1e@exps) (x2bbf@build-void)) (x2c1c@loop (cdr x2c1e@exps)) (cons 'begin x2c1e@exps)))))) x2c1c@loop) x2c19@exps))) (set! x2bbf@build-void (lambda () '((primitive void)))) (set! x2bc1@build-letrec (lambda (x2c20@ae x2c21@vars x2c22@val-exps x2c23@body-exp) (if (null? x2c21@vars) x2c23@body-exp (list 'letrec (map list x2c21@vars x2c22@val-exps) x2c23@body-exp)))) (set! x2bc3@build-letrec* (lambda (x2c28@ae x2c29@vars x2c2a@val-exps x2c2b@body-exp) (if (null? x2c29@vars) x2c2b@body-exp (x2b8f@build-let x2c28@ae x2c29@vars (map (lambda (x2c30@x) (list 'quote '#f)) x2c29@vars) (x2bbd@build-sequence x2c28@ae (append (map (lambda (x2c32@lhs x2c33@rhs) (list 'set! x2c32@lhs x2c33@rhs)) x2c29@vars x2c2a@val-exps) (list x2c2b@body-exp))))))) (set! x2bc5@build-library-letrec* (lambda (x2c36@ae x2c37@name x2c38@vars x2c39@locs x2c3a@val-exps x2c3b@body-exp) (list 'library-letrec* x2c37@name (map list x2c38@vars x2c39@locs x2c3a@val-exps) x2c3b@body-exp))) (set! x2bc7@build-receive (lambda (x2c42@ae x2c43@vars x2c44@producer x2c45@body*) (begin (display '"************** in ") (cons 'receive (cons x2c43@vars (cons x2c44@producer x2c45@body*)))))) (begin (set! x2c53@x2bc7@build-receive x2bc7@build-receive) (set! x2c52@x2bc5@build-library-letrec* x2bc5@build-library-letrec*) (set! x2c51@x2bc3@build-letrec* x2bc3@build-letrec*) (set! x2c50@x2bc1@build-letrec x2bc1@build-letrec) (set! x2c4f@x2bbf@build-void x2bbf@build-void) (set! x2c4e@x2bbd@build-sequence x2bbd@build-sequence) (set! x2c4d@x2b8f@build-let x2b8f@build-let) (set! x2c4c@x2b8d@build-case-lambda x2b8d@build-case-lambda) (set! x2c4b@x2b8b@build-lambda x2b8b@build-lambda) (set! x2c4a@x2b1a@build-global-define x2b1a@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (x2c62@file-options-macro x2c64@set-cons x2c66@set-union x2c6b@top-mark* x2c6d@top-marked? x2c6f@gen-lexical x2c71@gen-global x2c73@gen-label x2c75@gen-top-level-label x2c77@gen-define-label+loc x2c79@gen-define-label x2c7f@x2c7a x2c81@x2c7c x2c83@x2c7b x2c86@rib? x2c88@make-rib x2c8a@rib-sym* x2c8c@rib-mark** x2c8e@rib-label* x2c90@rib-sealed/freq x2c92@rib-cache x2c94@set-rib-sym*! x2c96@set-rib-mark**! x2c98@set-rib-label*! x2c9a@set-rib-sealed/freq! x2c9c@set-rib-cache! x2c9e@make-empty-rib x2ca0@extend-rib! x2ca2@extend-rib/nc! x2ca4@make-rib-map x2ca6@seal-rib! x2ca8@unseal-rib! x2caa@make-full-rib x2cb0@x2cab x2cb2@x2cad x2cb4@x2cac x2cb7@stx? x2cb9@make-stx x2cbb@stx-expr x2cbd@stx-mark* x2cbf@stx-subst* x2cc1@stx-ae* x2cc3@set-stx-expr! x2cc5@set-stx-mark*! x2cc7@set-stx-subst*! x2cc9@set-stx-ae*! x2ccb@rp x2ccd@datum->stx x2ccf@gen-mark x2cd1@anti-mark x2cd3@anti-mark? x2cd5@join-wraps x2cd7@mkstx x2cd9@add-mark x2cdb@add-subst x2cdd@syntax-kind? x2cdf@syntax-vector->list x2ce1@syntax-pair? x2ce3@syntax-vector? x2ce5@syntax-null? x2ce7@syntax-list? x2ce9@syntax-car x2ceb@syntax-cdr x2ced@syntax->list x2cef@id? x2cf1@id->sym x2cf3@same-marks? x2cf5@bound-id=? x2cf7@free-id=? x2cf9@valid-bound-ids? x2cfb@distinct-bound-ids? x2cfd@bound-id-member? x2cff@self-evaluating? x2d01@strip-annotations x2d03@strip x2d05@stx->datum x2d07@same-marks*? x2d09@id->label x2d0b@id->real-label x2d0d@label->binding x2d0f@make-binding x2d11@binding-type x2d13@binding-value x2d15@raise-unbound-error x2d17@syntax-type x2d25@sanitize-binding x2d27@make-variable-transformer x2d29@variable-transformer? x2d2b@variable-transformer-procedure x2d2d@make-eval-transformer x2e7e@parse-define x2e80@parse-define-syntax x2e82@scheme-stx-hashtable x2e84@scheme-stx x2e86@lexical-var x2e88@lexical-mutable? x2e8a@set-lexical-mutable! x2e8c@add-lexical x2e8e@add-lexicals x2e90@letrec-helper x2e92@letrec-transformer x2e94@letrec*-transformer x2e96@fluid-let-syntax-transformer x2e98@type-descriptor-transformer x2e9a@record-type-descriptor-transformer x2e9c@record-constructor-descriptor-transformer x2e9e@when-macro x2ea0@unless-macro x2ea2@if-transformer x2ea4@and-transformer x2ea6@or-transformer x2ea8@case-macro x2eaa@quote-transformer x2eac@case-lambda-transformer x2eae@lambda-transformer x2eb0@bless x2eb2@with-syntax-macro x2eb4@invalid-fmls-error x2eb6@let-macro x2eb8@let-values-macro x2eba@let*-values-macro x2ebc@trace-lambda-macro x2ebe@trace-define-macro x2ec0@trace-define-syntax-macro x2ec2@trace-let/rec-syntax x2ec4@trace-let-syntax-macro x2ec6@trace-letrec-syntax-macro x2ec8@guard-macro x2eca@define-enumeration-macro x2ecc@time-macro x2ece@delay-macro x2ed0@assert-macro x2ed2@endianness-macro x2ed4@identifier-syntax-macro x2ed6@do-macro x2ed8@let*-macro x2eda@or-macro x2edc@and-macro x2ede@cond-macro x2ee0@do-include x2ee2@include-macro x2ee4@include-into-macro x2ee6@syntax-rules-macro x2ee8@quasiquote-macro x2eea@quasisyntax-macro x2eec@define-struct-macro x2eee@define-record-type-macro x2ef0@define-condition-type-macro x2ef2@incorrect-usage-macro x2ef4@parameterize-macro x2ef6@foreign-call-transformer x2ef8@convert-pattern x2efa@syntax-dispatch x2efc@ellipsis? x2efe@underscore? x2f00@verify-literals x2f02@syntax-case-transformer x2f04@ellipsis-map x2f06@syntax-transformer x2f08@core-macro-transformer x2f0a@symbol-macro x2f0c@macro-transformer x2f0e@local-macro-transformer x2f10@do-macro-call x2f12@chi-macro x2f14@chi-local-macro x2f16@chi-global-macro x2f18@chi-expr* x2f1a@chi-application x2f1c@chi-expr x2f1e@chi-set! x2f20@verify-formals x2f22@chi-lambda-clause x2f24@chi-lambda-clause* x2f26@chi-defun x2f28@chi-rhs x2f2a@expand-interaction-rhs*/init* x2f2c@chi-rhs* x2f2e@find-bound=? x2f30@find-dups x2f32@chi-internal x2f34@parse-module x2f3a@x2f35 x2f3c@x2f37 x2f3e@x2f36 x2f41@module-interface? x2f43@make-module-interface x2f45@module-interface-first-mark x2f47@module-interface-exp-id-vec x2f49@module-interface-exp-lab-vec x2f4b@set-module-interface-first-mark! x2f4d@set-module-interface-exp-id-vec! x2f4f@set-module-interface-exp-lab-vec! x2f51@module-interface-exp-id* x2f53@chi-internal-module x2f55@chi-body* x2f57@expand-transformer x2f59@parse-exports x2f5b@parse-library-name x2f5d@parse-library x2f5f@parse-import-spec* x2f61@make-top-rib x2f63@make-collector x2f65@inv-collector x2f67@vis-collector x2f69@imp-collector x2f6b@chi-library-internal x2f6d@chi-interaction-expr x2f6f@library-body-expander x2f71@core-library-expander x2f73@parse-top-level-program x2f75@top-level-expander x2f7b@x2f76 x2f7d@x2f78 x2f7f@x2f77 x2f82@env? x2f84@make-env x2f86@env-names x2f88@env-labels x2f8a@env-itc x2f8c@set-env-names! x2f8e@set-env-labels! x2f90@set-env-itc! x2f92@rp x2f98@x2f93 x2f9a@x2f95 x2f9c@x2f94 x2f9f@interaction-env? x2fa1@make-interaction-env x2fa3@interaction-env-rib x2fa5@interaction-env-r x2fa7@interaction-env-locs x2fa9@set-interaction-env-rib! x2fab@set-interaction-env-r! x2fad@set-interaction-env-locs! x2faf@rp x2fb1@interaction-environment-symbols x2fb3@environment-bindings x2fb5@parse-binding x2fb7@environment? x2fb9@environment-symbols x2fbb@environment x2fbd@null-environment x2fbf@scheme-report-environment x2fc1@expand x2fc3@eval x2fc5@library-expander x2fc7@boot-library-expand x2fc9@rev-map-append x2fcb@build-exports x2fcd@make-export-subst x2fcf@make-export-env/macros x2fd1@generate-temporaries x2fd3@free-identifier=? x2fd5@bound-identifier=? x2fd7@make-source-condition x2fd9@extract-position-condition x2fdb@expression-position x2fdd@assertion-error x2fdf@syntax-error x2fe1@syntax-violation* x2fe3@syntax-violation x2fe5@identifier? x2fe7@datum->syntax x2fe9@syntax->datum x2feb@compile-r6rs-top-level x2fed@pre-compile-r6rs-top-level x2fef@interaction-environment x2ff1@top-level-context) (begin (set! x2c62@file-options-macro (lambda (x2ff2@x) ((lambda (x2ff5@valid-option?) (begin (set! x2ff5@valid-option? (lambda (x2ffe@x) (and (x2cef@id? x2ffe@x) (memq (x2cf1@id->sym x2ffe@x) '(no-fail no-create no-truncate))))) ((lambda (x2ff6@t) ((lambda (x2ff8@ls/false) (if (and x2ff8@ls/false (apply (lambda (x2ffa@opt*) (for-all x2ff5@valid-option? x2ffa@opt*)) x2ff8@ls/false)) (apply (lambda (x2ffc@opt*) (x2eb0@bless (list 'make-file-options (list 'quote x2ffc@opt*)))) x2ff8@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x2ff6@t))) (x2efa@syntax-dispatch x2ff6@t '(_ . each-any)))) x2ff2@x))) '#f))) (set! x2c64@set-cons (lambda (x3000@x x3001@ls) (if (memq x3000@x x3001@ls) x3001@ls (cons x3000@x x3001@ls)))) (set! x2c66@set-union (lambda (x3004@ls1 x3005@ls2) (if (null? x3004@ls1) x3005@ls2 (if (memq (car x3004@ls1) x3005@ls2) (x2c66@set-union (cdr x3004@ls1) x3005@ls2) (cons (car x3004@ls1) (x2c66@set-union (cdr x3004@ls1) x3005@ls2)))))) (set! x2c6b@top-mark* '(top)) (set! x2c6d@top-marked? (lambda (x3008@m*) (memq 'top x3008@m*))) (set! x2c6f@gen-lexical (lambda (x300a@sym) (if (symbol? x300a@sym) (gensym x300a@sym) (if (x2cb7@stx? x300a@sym) (x2c6f@gen-lexical (x2cf1@id->sym x300a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" x300a@sym))))) (set! x2c71@gen-global (lambda (x300c@x) (x2c6f@gen-lexical x300c@x))) (set! x2c73@gen-label (lambda (x300e@_) (gensym))) (set! x2c75@gen-top-level-label (lambda (x3010@id x3011@rib) ((lambda (x3015@find) (begin (set! x3015@find (lambda (x3020@sym x3021@mark* x3022@sym* x3023@mark** x3024@label*) (and (pair? x3022@sym*) (if (and (eq? x3020@sym (car x3022@sym*)) (x2cf3@same-marks? x3021@mark* (car x3023@mark**))) (car x3024@label*) (x3015@find x3020@sym x3021@mark* (cdr x3022@sym*) (cdr x3023@mark**) (cdr x3024@label*)))))) ((lambda (x3016@sym x3017@mark*) ((lambda (x301a@sym*) ((lambda (x301c@t) (if x301c@t ((lambda (x301e@label) (if (x2b12@x29b2@imported-label->binding x301e@label) (gensym) x301e@label)) x301c@t) (gensym))) (and (memq x3016@sym (x2c8a@rib-sym* x3011@rib)) (x3015@find x3016@sym x3017@mark* x301a@sym* (x2c8c@rib-mark** x3011@rib) (x2c8e@rib-label* x3011@rib))))) (x2c8a@rib-sym* x3011@rib))) (x2cf1@id->sym x3010@id) (x2cbd@stx-mark* x3010@id)))) '#f))) (set! x2c77@gen-define-label+loc (lambda (x302a@id x302b@rib) ((lambda (x302e@t) (if x302e@t ((lambda (x3030@env) ((lambda (x3032@label x3033@locs) (values x3032@label ((lambda (x3036@t) (if x3036@t (cdr x3036@t) ((lambda (x3038@loc) (begin (x2fad@set-interaction-env-locs! x3030@env (cons (cons x3032@label x3038@loc) x3033@locs)) x3038@loc)) (x2c6f@gen-lexical x302a@id)))) (assq x3032@label x3033@locs)))) (x2c75@gen-top-level-label x302a@id x302b@rib) (x2fa7@interaction-env-locs x3030@env))) x302e@t) (values (gensym) (x2c6f@gen-lexical x302a@id)))) (x2ff1@top-level-context)))) (set! x2c79@gen-define-label (lambda (x303a@id x303b@rib) (if (x2ff1@top-level-context) (x2c75@gen-top-level-label x303a@id x303b@rib) (gensym)))) (set! x2c7f@x2c7a (make-record-type-descriptor 'rib '#f 'x2c7d '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! x2c81@x2c7c '#f) (set! x2c83@x2c7b (make-record-constructor-descriptor x2c7f@x2c7a '#f x2c81@x2c7c)) (set! x2c86@rib? (record-predicate x2c7f@x2c7a)) (set! x2c88@make-rib (record-constructor x2c83@x2c7b)) (set! x2c8a@rib-sym* (record-accessor x2c7f@x2c7a '0)) (set! x2c8c@rib-mark** (record-accessor x2c7f@x2c7a '1)) (set! x2c8e@rib-label* (record-accessor x2c7f@x2c7a '2)) (set! x2c90@rib-sealed/freq (record-accessor x2c7f@x2c7a '3)) (set! x2c92@rib-cache (record-accessor x2c7f@x2c7a '4)) (set! x2c94@set-rib-sym*! (record-mutator x2c7f@x2c7a '0)) (set! x2c96@set-rib-mark**! (record-mutator x2c7f@x2c7a '1)) (set! x2c98@set-rib-label*! (record-mutator x2c7f@x2c7a '2)) (set! x2c9a@set-rib-sealed/freq! (record-mutator x2c7f@x2c7a '3)) (set! x2c9c@set-rib-cache! (record-mutator x2c7f@x2c7a '4)) (set! x2c9e@make-empty-rib (lambda () (x2c88@make-rib '() '() '() '#f '#f))) (set! x2ca0@extend-rib! (lambda (x303e@rib x303f@id x3040@label) ((lambda (x3045@find) (begin (set! x3045@find (lambda (x3052@sym x3053@mark* x3054@sym* x3055@mark** x3056@label*) (and (pair? x3054@sym*) (if (and (eq? x3052@sym (car x3054@sym*)) (x2cf3@same-marks? x3053@mark* (car x3055@mark**))) x3056@label* (x3045@find x3052@sym x3053@mark* (cdr x3054@sym*) (cdr x3055@mark**) (cdr x3056@label*)))))) (begin (if (x2c90@rib-sealed/freq x303e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" x303e@rib) (void)) ((lambda (x3046@sym x3047@mark*) ((lambda (x304a@sym*) ((lambda (x304c@t) (if x304c@t ((lambda (x304e@p) (if (not (eq? x3040@label (car x304e@p))) (if (x2ff1@top-level-context) (set-car! x304e@p x3040@label) (x2fe3@syntax-violation '#f '"multiple definitions of identifier" x303f@id)) (void))) x304c@t) (begin (if (x2c92@rib-cache x303e@rib) (hashtable-update! (x2c92@rib-cache x303e@rib) x3046@sym (lambda (x3050@e) (cons (cons x3047@mark* x3040@label) x3050@e)) '()) (void)) (x2c94@set-rib-sym*! x303e@rib (cons x3046@sym x304a@sym*)) (x2c96@set-rib-mark**! x303e@rib (cons x3047@mark* (x2c8c@rib-mark** x303e@rib))) (x2c98@set-rib-label*! x303e@rib (cons x3040@label (x2c8e@rib-label* x303e@rib)))))) (and (memq x3046@sym (x2c8a@rib-sym* x303e@rib)) (x3045@find x3046@sym x3047@mark* x304a@sym* (x2c8c@rib-mark** x303e@rib) (x2c8e@rib-label* x303e@rib))))) (x2c8a@rib-sym* x303e@rib))) (x2cf1@id->sym x303f@id) (x2cbd@stx-mark* x303f@id))))) '#f))) (set! x2ca2@extend-rib/nc! (lambda (x305c@rib x305d@id x305e@label) ((lambda (x3062@sym x3063@mark*) ((lambda (x3066@sym*) (begin (if (x2c92@rib-cache x305c@rib) (hashtable-update! (x2c92@rib-cache x305c@rib) x3062@sym (lambda (x3068@e) (cons (cons x3063@mark* x305e@label) x3068@e)) '()) (void)) (x2c94@set-rib-sym*! x305c@rib (cons x3062@sym x3066@sym*)) (x2c96@set-rib-mark**! x305c@rib (cons x3063@mark* (x2c8c@rib-mark** x305c@rib))) (x2c98@set-rib-label*! x305c@rib (cons x305e@label (x2c8e@rib-label* x305c@rib))))) (x2c8a@rib-sym* x305c@rib))) (x2cf1@id->sym x305d@id) (x2cbd@stx-mark* x305d@id)))) (set! x2ca4@make-rib-map (lambda (x306a@sym*) ((lambda (x306c@ht) ((letrec ((x306e@f (lambda (x3070@i x3071@sym*) (if (null? x3071@sym*) x306c@ht (begin (hashtable-update! x306c@ht (car x3071@sym*) (lambda (x3074@x) (cons x3070@i x3074@x)) '()) (x306e@f (+ x3070@i '1) (cdr x3071@sym*))))))) x306e@f) '0 x306a@sym*)) (make-eq-hashtable)))) (set! x2ca6@seal-rib! (lambda (x3076@rib) ((lambda (x3078@sym*) (if (not (null? x3078@sym*)) (begin (x2c94@set-rib-sym*! x3076@rib (list->vector x3078@sym*)) (x2c96@set-rib-mark**! x3076@rib (list->vector (x2c8c@rib-mark** x3076@rib))) (x2c98@set-rib-label*! x3076@rib (list->vector (x2c8e@rib-label* x3076@rib))) (x2c9a@set-rib-sealed/freq! x3076@rib (x2ca4@make-rib-map x3078@sym*))) (void))) (x2c8a@rib-sym* x3076@rib)))) (set! x2ca8@unseal-rib! (lambda (x307a@rib) (if (x2c90@rib-sealed/freq x307a@rib) (begin (x2c9a@set-rib-sealed/freq! x307a@rib '#f) (x2c94@set-rib-sym*! x307a@rib (vector->list (x2c8a@rib-sym* x307a@rib))) (x2c96@set-rib-mark**! x307a@rib (vector->list (x2c8c@rib-mark** x307a@rib))) (x2c98@set-rib-label*! x307a@rib (vector->list (x2c8e@rib-label* x307a@rib)))) (void)))) (set! x2caa@make-full-rib (lambda (x307c@id* x307d@label*) ((lambda (x3080@r) (begin (x2ca6@seal-rib! x3080@r) x3080@r)) (x2c88@make-rib (map x2cf1@id->sym x307c@id*) (map x2cbd@stx-mark* x307c@id*) x307d@label* '#f '#f)))) (set! x2cb0@x2cab (make-record-type-descriptor 'stx '#f 'x2cae '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! x2cb2@x2cad '#f) (set! x2cb4@x2cac (make-record-constructor-descriptor x2cb0@x2cab '#f x2cb2@x2cad)) (set! x2cb7@stx? (record-predicate x2cb0@x2cab)) (set! x2cb9@make-stx (record-constructor x2cb4@x2cac)) (set! x2cbb@stx-expr (record-accessor x2cb0@x2cab '0)) (set! x2cbd@stx-mark* (record-accessor x2cb0@x2cab '1)) (set! x2cbf@stx-subst* (record-accessor x2cb0@x2cab '2)) (set! x2cc1@stx-ae* (record-accessor x2cb0@x2cab '3)) (set! x2cc3@set-stx-expr! (record-mutator x2cb0@x2cab '0)) (set! x2cc5@set-stx-mark*! (record-mutator x2cb0@x2cab '1)) (set! x2cc7@set-stx-subst*! (record-mutator x2cb0@x2cab '2)) (set! x2cc9@set-stx-ae*! (record-mutator x2cb0@x2cab '3)) (set! x2ccb@rp (x2896@x27bd@make-record-printer 'stx (lambda (x3082@x x3083@p x3084@wr) (begin (display '"#<syntax " x3083@p) (write (x2d05@stx->datum x3082@x) x3083@p) ((lambda (x3088@expr) (if (x288e@x27ad@annotation? x3088@expr) ((lambda (x308a@src) (if (pair? x308a@src) (begin (display '" [" x3083@p) (display (cdr x308a@src) x3083@p) (display '" of " x3083@p) (display (car x308a@src) x3083@p) (display '"]" x3083@p)) (void))) (x288f@x27af@annotation-source x3088@expr)) (void))) (x2cbb@stx-expr x3082@x)) (display '">" x3083@p))))) (set! x2ccd@datum->stx (lambda (x308c@id x308d@datum) (x2cb9@make-stx x308d@datum (x2cbd@stx-mark* x308c@id) (x2cbf@stx-subst* x308c@id) (x2cc1@stx-ae* x308c@id)))) (set! x2ccf@gen-mark (lambda () (string '#\m))) (set! x2cd1@anti-mark '#f) (set! x2cd3@anti-mark? not) (set! x2cd5@join-wraps (lambda (x3090@m1* x3091@s1* x3092@ae1* x3093@e) ((lambda (x3099@cancel) (begin (set! x3099@cancel (lambda (x30a0@ls1 x30a1@ls2) ((letrec ((x30a4@f (lambda (x30a6@x x30a7@ls1) (if (null? x30a7@ls1) (cdr x30a1@ls2) (cons x30a6@x (x30a4@f (car x30a7@ls1) (cdr x30a7@ls1))))))) x30a4@f) (car x30a0@ls1) (cdr x30a0@ls1)))) ((lambda (x309a@m2* x309b@s2* x309c@ae2*) (if (and (not (null? x3090@m1*)) (not (null? x309a@m2*)) (x2cd3@anti-mark? (car x309a@m2*))) (values (x3099@cancel x3090@m1* x309a@m2*) (x3099@cancel x3091@s1* x309b@s2*) (x3099@cancel x3092@ae1* x309c@ae2*)) (values (append x3090@m1* x309a@m2*) (append x3091@s1* x309b@s2*) (append x3092@ae1* x309c@ae2*)))) (x2cbd@stx-mark* x3093@e) (x2cbf@stx-subst* x3093@e) (x2cc1@stx-ae* x3093@e)))) '#f))) (set! x2cd7@mkstx (lambda (x30aa@e x30ab@m* x30ac@s* x30ad@ae*) (if (and (x2cb7@stx? x30aa@e) (not (x2c6d@top-marked? x30ab@m*))) (call-with-values (lambda () (x2cd5@join-wraps x30ab@m* x30ac@s* x30ad@ae* x30aa@e)) (lambda (x30b8@x30b3 x30b9@x30b5 x30ba@x30b7) ((lambda (x30be@ae* x30bf@s* x30c0@m*) (x2cb9@make-stx (x2cbb@stx-expr x30aa@e) x30c0@m* x30bf@s* x30be@ae*)) x30ba@x30b7 x30b9@x30b5 x30b8@x30b3))) (x2cb9@make-stx x30aa@e x30ab@m* x30ac@s* x30ad@ae*)))) (set! x2cd9@add-mark (lambda (x30c4@m x30c5@e x30c6@ae) (x2cd7@mkstx x30c5@e (list x30c4@m) '(shift) (list x30c6@ae)))) (set! x2cdb@add-subst (lambda (x30ca@subst x30cb@e) (x2cd7@mkstx x30cb@e '() (list x30ca@subst) '()))) (set! x2cdd@syntax-kind? (lambda (x30ce@x x30cf@p?) (if (x2cb7@stx? x30ce@x) (x2cdd@syntax-kind? (x2cbb@stx-expr x30ce@x) x30cf@p?) (if (x288e@x27ad@annotation? x30ce@x) (x2cdd@syntax-kind? (x2890@x27b1@annotation-expression x30ce@x) x30cf@p?) (x30cf@p? x30ce@x))))) (set! x2cdf@syntax-vector->list (lambda (x30d2@x) (if (x2cb7@stx? x30d2@x) ((lambda (x30d4@ls x30d5@m* x30d6@s* x30d7@ae*) (map (lambda (x30dc@x) (x2cd7@mkstx x30dc@x x30d5@m* x30d6@s* x30d7@ae*)) x30d4@ls)) (x2cdf@syntax-vector->list (x2cbb@stx-expr x30d2@x)) (x2cbd@stx-mark* x30d2@x) (x2cbf@stx-subst* x30d2@x) (x2cc1@stx-ae* x30d2@x)) (if (x288e@x27ad@annotation? x30d2@x) (x2cdf@syntax-vector->list (x2890@x27b1@annotation-expression x30d2@x)) (if (vector? x30d2@x) (vector->list x30d2@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" x30d2@x)))))) (set! x2ce1@syntax-pair? (lambda (x30de@x) (x2cdd@syntax-kind? x30de@x pair?))) (set! x2ce3@syntax-vector? (lambda (x30e0@x) (x2cdd@syntax-kind? x30e0@x vector?))) (set! x2ce5@syntax-null? (lambda (x30e2@x) (x2cdd@syntax-kind? x30e2@x null?))) (set! x2ce7@syntax-list? (lambda (x30e4@x) (or (x2ce5@syntax-null? x30e4@x) (and (x2ce1@syntax-pair? x30e4@x) (x2ce7@syntax-list? (x2ceb@syntax-cdr x30e4@x)))))) (set! x2ce9@syntax-car (lambda (x30e6@x) (if (x2cb7@stx? x30e6@x) (x2cd7@mkstx (x2ce9@syntax-car (x2cbb@stx-expr x30e6@x)) (x2cbd@stx-mark* x30e6@x) (x2cbf@stx-subst* x30e6@x) (x2cc1@stx-ae* x30e6@x)) (if (x288e@x27ad@annotation? x30e6@x) (x2ce9@syntax-car (x2890@x27b1@annotation-expression x30e6@x)) (if (pair? x30e6@x) (car x30e6@x) (assertion-violation 'syntax-car '"BUG: not a pair" x30e6@x)))))) (set! x2ceb@syntax-cdr (lambda (x30e8@x) (if (x2cb7@stx? x30e8@x) (x2cd7@mkstx (x2ceb@syntax-cdr (x2cbb@stx-expr x30e8@x)) (x2cbd@stx-mark* x30e8@x) (x2cbf@stx-subst* x30e8@x) (x2cc1@stx-ae* x30e8@x)) (if (x288e@x27ad@annotation? x30e8@x) (x2ceb@syntax-cdr (x2890@x27b1@annotation-expression x30e8@x)) (if (pair? x30e8@x) (cdr x30e8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" x30e8@x)))))) (set! x2ced@syntax->list (lambda (x30ea@x) (if (x2ce1@syntax-pair? x30ea@x) (cons (x2ce9@syntax-car x30ea@x) (x2ced@syntax->list (x2ceb@syntax-cdr x30ea@x))) (if (x2ce5@syntax-null? x30ea@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" x30ea@x))))) (set! x2cef@id? (lambda (x30ec@x) (and (x2cb7@stx? x30ec@x) ((lambda (x30ee@expr) (symbol? (if (x288e@x27ad@annotation? x30ee@expr) (x288d@x27ab@annotation-stripped x30ee@expr) x30ee@expr))) (x2cbb@stx-expr x30ec@x))))) (set! x2cf1@id->sym (lambda (x30f0@x) (begin (if (not (x2cb7@stx? x30f0@x)) (error 'id->sym '"BUG in ikarus: not an id" x30f0@x) (void)) ((lambda (x30f2@expr) ((lambda (x30f4@sym) (if (symbol? x30f4@sym) x30f4@sym (error 'id->sym '"BUG in ikarus: not an id" x30f0@x))) (if (x288e@x27ad@annotation? x30f2@expr) (x288d@x27ab@annotation-stripped x30f2@expr) x30f2@expr))) (x2cbb@stx-expr x30f0@x))))) (set! x2cf3@same-marks? (lambda (x30f6@x x30f7@y) (or (and (null? x30f6@x) (null? x30f7@y)) (and (pair? x30f6@x) (pair? x30f7@y) (eq? (car x30f6@x) (car x30f7@y)) (x2cf3@same-marks? (cdr x30f6@x) (cdr x30f7@y)))))) (set! x2cf5@bound-id=? (lambda (x30fa@x x30fb@y) (and (eq? (x2cf1@id->sym x30fa@x) (x2cf1@id->sym x30fb@y)) (x2cf3@same-marks? (x2cbd@stx-mark* x30fa@x) (x2cbd@stx-mark* x30fb@y))))) (set! x2cf7@free-id=? (lambda (x30fe@i x30ff@j) ((lambda (x3102@t0 x3103@t1) (if (or x3102@t0 x3103@t1) (eq? x3102@t0 x3103@t1) (eq? (x2cf1@id->sym x30fe@i) (x2cf1@id->sym x30ff@j)))) (x2d0b@id->real-label x30fe@i) (x2d0b@id->real-label x30ff@j)))) (set! x2cf9@valid-bound-ids? (lambda (x3106@id*) (and (for-all x2cef@id? x3106@id*) (x2cfb@distinct-bound-ids? x3106@id*)))) (set! x2cfb@distinct-bound-ids? (lambda (x3108@id*) (or (null? x3108@id*) (and (not (x2cfd@bound-id-member? (car x3108@id*) (cdr x3108@id*))) (x2cfb@distinct-bound-ids? (cdr x3108@id*)))))) (set! x2cfd@bound-id-member? (lambda (x310a@id x310b@id*) (and (pair? x310b@id*) (or (x2cf5@bound-id=? x310a@id (car x310b@id*)) (x2cfd@bound-id-member? x310a@id (cdr x310b@id*)))))) (set! x2cff@self-evaluating? (lambda (x310e@x) (or (number? x310e@x) (string? x310e@x) (char? x310e@x) (boolean? x310e@x) (regexp? x310e@x) (bytevector? x310e@x)))) (set! x2d01@strip-annotations (lambda (x3110@x) (if (pair? x3110@x) (cons (x2d01@strip-annotations (car x3110@x)) (x2d01@strip-annotations (cdr x3110@x))) (if (vector? x3110@x) (vector-map x2d01@strip-annotations x3110@x) (if (x288e@x27ad@annotation? x3110@x) (x288d@x27ab@annotation-stripped x3110@x) x3110@x))))) (set! x2d03@strip (lambda (x3112@x x3113@m*) (if (x2c6d@top-marked? x3113@m*) (if (or (x288e@x27ad@annotation? x3112@x) (and (pair? x3112@x) (x288e@x27ad@annotation? (car x3112@x))) (and (vector? x3112@x) (> (vector-length x3112@x) '0) (x288e@x27ad@annotation? (vector-ref x3112@x '0)))) (x2d01@strip-annotations x3112@x) x3112@x) ((letrec ((x3116@f (lambda (x3118@x) (if (x2cb7@stx? x3118@x) (x2d03@strip (x2cbb@stx-expr x3118@x) (x2cbd@stx-mark* x3118@x)) (if (x288e@x27ad@annotation? x3118@x) (x288d@x27ab@annotation-stripped x3118@x) (if (pair? x3118@x) ((lambda (x311a@a x311b@d) (if (and (eq? x311a@a (car x3118@x)) (eq? x311b@d (cdr x3118@x))) x3118@x (cons x311a@a x311b@d))) (x3116@f (car x3118@x)) (x3116@f (cdr x3118@x))) (if (vector? x3118@x) ((lambda (x311e@old) ((lambda (x3120@new) (if (for-all eq? x311e@old x3120@new) x3118@x (list->vector x3120@new))) (map x3116@f x311e@old))) (vector->list x3118@x)) x3118@x))))))) x3116@f) x3112@x)))) (set! x2d05@stx->datum (lambda (x3122@x) (x2d03@strip x3122@x '()))) (set! x2d07@same-marks*? (lambda (x3124@mark* x3125@mark** x3126@si) (if (null? x3126@si) '#f (if (x2cf3@same-marks? x3124@mark* (vector-ref x3125@mark** (car x3126@si))) (car x3126@si) (x2d07@same-marks*? x3124@mark* x3125@mark** (cdr x3126@si)))))) (set! x2d09@id->label (lambda (x312a@id) (or (x2d0b@id->real-label x312a@id) ((lambda (x312c@t) (if x312c@t ((lambda (x312e@env) ((lambda (x3130@rib) (call-with-values (lambda () (x2c77@gen-define-label+loc x312a@id x3130@rib)) (lambda (x3136@x3133 x3137@x3135) ((lambda (x313a@loc_ x313b@lab) (begin (x2ca0@extend-rib! x3130@rib x312a@id x313b@lab) x313b@lab)) x3137@x3135 x3136@x3133)))) (x2fa3@interaction-env-rib x312e@env))) x312c@t) '#f)) (x2ff1@top-level-context))))) (set! x2d0b@id->real-label (lambda (x313e@id) ((lambda (x3140@sym) ((letrec ((x3142@search (lambda (x3144@subst* x3145@mark*) (if (null? x3144@subst*) '#f (if (eq? (car x3144@subst*) 'shift) (x3142@search (cdr x3144@subst*) (cdr x3145@mark*)) ((lambda (x3148@rib) ((lambda (x314a@t) (if x314a@t ((lambda (x314c@ht) ((lambda (x314e@si) ((lambda (x3150@i) (if x3150@i (vector-ref (x2c8e@rib-label* x3148@rib) x3150@i) (x3142@search (cdr x3144@subst*) x3145@mark*))) (and x314e@si (x2d07@same-marks*? x3145@mark* (x2c8c@rib-mark** x3148@rib) (reverse x314e@si))))) (hashtable-ref x314c@ht x3140@sym '#f))) x314a@t) ((letrec ((x3152@f (lambda (x3154@sym* x3155@mark** x3156@label*) (if (null? x3154@sym*) (x3142@search (cdr x3144@subst*) x3145@mark*) (if (and (eq? (car x3154@sym*) x3140@sym) (x2cf3@same-marks? (car x3155@mark**) x3145@mark*)) (car x3156@label*) (x3152@f (cdr x3154@sym*) (cdr x3155@mark**) (cdr x3156@label*))))))) x3152@f) (x2c8a@rib-sym* x3148@rib) (x2c8c@rib-mark** x3148@rib) (x2c8e@rib-label* x3148@rib)))) (x2c90@rib-sealed/freq x3148@rib))) (car x3144@subst*))))))) x3142@search) (x2cbf@stx-subst* x313e@id) (x2cbd@stx-mark* x313e@id))) (x2cf1@id->sym x313e@id)))) (set! x2d0d@label->binding (lambda (x315a@x x315b@r) ((lambda (x315e@t) (if x315e@t ((lambda (x3160@b) (if (and (pair? x3160@b) (eq? (car x3160@b) '$core-rtd)) (cons '$rtd (map x2eb0@bless (cdr x3160@b))) (if (and (pair? x3160@b) (eq? (car x3160@b) 'global-rtd)) ((lambda (x3162@lib x3163@loc) (cons '$rtd (symbol-value x3163@loc))) (cadr x3160@b) (cddr x3160@b)) x3160@b))) x315e@t) ((lambda (x3166@t) (if x3166@t (cdr x3166@t) ((lambda (x3168@t) (if x3168@t ((lambda (x316a@env) ((lambda (x316c@t) (if x316c@t ((lambda (x316e@p) (cons* 'lexical (cdr x316e@p) '#f)) x316c@t) '(displaced-lexical . #f))) (assq x315a@x (x2fa7@interaction-env-locs x316a@env)))) x3168@t) '(displaced-lexical . #f))) (x2ff1@top-level-context)))) (assq x315a@x x315b@r)))) (x2b12@x29b2@imported-label->binding x315a@x)))) (set! x2d0f@make-binding cons) (set! x2d11@binding-type car) (set! x2d13@binding-value cdr) (set! x2d15@raise-unbound-error (lambda (x3170@id) (x2fe1@syntax-violation* '#f '"unbound identifier" x3170@id (x4d20@x4b66@make-undefined-violation)))) (set! x2d17@syntax-type (lambda (x3172@e x3173@r) (if (x2cef@id? x3172@e) ((lambda (x3176@id) ((lambda (x3178@label) ((lambda (x317a@b) ((lambda (x317c@type) ((lambda () (begin (if (not x3178@label) (x2d15@raise-unbound-error x3176@id) (void)) ((lambda (x317e@t) (if (memv x317e@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values x317c@type (x2d13@binding-value x317a@b) x3176@id) (values 'other '#f '#f))) x317c@type))))) (x2d11@binding-type x317a@b))) (x2d0d@label->binding x3178@label x3173@r))) (x2d09@id->label x3176@id))) x3172@e) (if (x2ce1@syntax-pair? x3172@e) ((lambda (x3180@id) (if (x2cef@id? x3180@id) ((lambda (x3182@label) ((lambda (x3184@b) ((lambda (x3186@type) ((lambda () (begin (if (not x3182@label) (x2d15@raise-unbound-error x3180@id) (void)) ((lambda (x3188@t) (if (memv x3188@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values x3186@type (x2d13@binding-value x3184@b) x3180@id) (values 'call '#f '#f))) x3186@type))))) (x2d11@binding-type x3184@b))) (x2d0d@label->binding x3182@label x3173@r))) (x2d09@id->label x3180@id)) (values 'call '#f '#f))) (x2ce9@syntax-car x3172@e)) ((lambda (x318a@d) (if (x2cff@self-evaluating? x318a@d) (values 'constant x318a@d '#f) (values 'other '#f '#f))) (x2d05@stx->datum x3172@e)))))) (set! x2d25@sanitize-binding (lambda (x318c@x x318d@src) (if (procedure? x318c@x) (cons* 'local-macro x318c@x x318d@src) (if (and (pair? x318c@x) (eq? (car x318c@x) 'macro!) (procedure? (cdr x318c@x))) (cons* 'local-macro! (cdr x318c@x) x318d@src) (if (and (pair? x318c@x) (eq? (car x318c@x) '$rtd)) x318c@x (assertion-violation 'expand '"invalid transformer" x318c@x)))))) (set! x2d27@make-variable-transformer (lambda (x3190@x) (if (procedure? x3190@x) (cons 'macro! x3190@x) (assertion-violation 'make-variable-transformer '"not a procedure" x3190@x)))) (set! x2d29@variable-transformer? (lambda (x3192@x) (and (pair? x3192@x) (eq? (car x3192@x) 'macro!) (procedure? (cdr x3192@x))))) (set! x2d2b@variable-transformer-procedure (lambda (x3194@x) (if (x2d29@variable-transformer? x3194@x) (cdr x3194@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" x3194@x)))) (set! x2d2d@make-eval-transformer (lambda (x3196@x) (x2d25@sanitize-binding (eval-core (x28ed@x28a5@expanded->core x3196@x)) x3196@x))) (set! x2e7e@parse-define (lambda (x3198@x) ((lambda (x319a@t) ((lambda (x319c@ls/false) (if (and x319c@ls/false (apply (lambda (x319e@id x319f@fmls x31a0@b x31a1@b*) (x2cef@id? x319e@id)) x319c@ls/false)) (apply (lambda (x31a6@id x31a7@fmls x31a8@b x31a9@b*) (begin (x2f20@verify-formals x31a7@fmls x3198@x) (values x31a6@id (cons 'defun (cons x31a7@fmls (cons x31a8@b x31a9@b*)))))) x319c@ls/false) ((lambda (x31ae@t) ((lambda (x31b0@ls/false) (if (and x31b0@ls/false (apply (lambda (x31b2@id x31b3@val) (x2cef@id? x31b2@id)) x31b0@ls/false)) (apply (lambda (x31b6@id x31b7@val) (values x31b6@id (cons 'expr x31b7@val))) x31b0@ls/false) ((lambda (x31ba@t) ((lambda (x31bc@ls/false) (if (and x31bc@ls/false (apply (lambda (x31be@id) (x2cef@id? x31be@id)) x31bc@ls/false)) (apply (lambda (x31c0@id) (values x31c0@id (cons 'expr (x2eb0@bless '(void))))) x31bc@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x31ba@t))) (x2efa@syntax-dispatch x31ba@t '(_ any)))) x31ae@t))) (x2efa@syntax-dispatch x31ae@t '(_ any any)))) x319a@t))) (x2efa@syntax-dispatch x319a@t '(_ (any . any) any . each-any)))) x3198@x))) (set! x2e80@parse-define-syntax (lambda (x31c2@x) ((lambda (x31c4@t) ((lambda (x31c6@ls/false) (if (and x31c6@ls/false (apply (lambda (x31c8@id x31c9@val) (x2cef@id? x31c8@id)) x31c6@ls/false)) (apply (lambda (x31cc@id x31cd@val) (values x31cc@id x31cd@val)) x31c6@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x31c4@t))) (x2efa@syntax-dispatch x31c4@t '(_ any any)))) x31c2@x))) (set! x2e82@scheme-stx-hashtable (make-eq-hashtable)) (set! x2e84@scheme-stx (lambda (x31d0@sym) (or (hashtable-ref x2e82@scheme-stx-hashtable x31d0@sym '#f) ((lambda (x31d2@subst) ((lambda (x31d4@stx) ((lambda (x31d6@stx) ((lambda () (begin (hashtable-set! x2e82@scheme-stx-hashtable x31d0@sym x31d6@stx) x31d6@stx)))) ((lambda (x31d8@t) (if x31d8@t ((lambda (x31da@x) ((lambda (x31dc@name x31dd@label) (x2cdb@add-subst (x2c88@make-rib (list x31dc@name) (list x2c6b@top-mark*) (list x31dd@label) '#f '#f) x31d4@stx)) (car x31da@x) (cdr x31da@x))) x31d8@t) x31d4@stx)) (assq x31d0@sym x31d2@subst)))) (x2cb9@make-stx x31d0@sym x2c6b@top-mark* '() '()))) (x2ae8@x295e@library-subst (x2b0c@x29a6@find-library-by-name '(psyntax system $all))))))) (set! x2e86@lexical-var car) (set! x2e88@lexical-mutable? cdr) (set! x2e8a@set-lexical-mutable! set-cdr!) (set! x2e8c@add-lexical (lambda (x31e0@lab x31e1@lex x31e2@r) (cons (cons* x31e0@lab 'lexical x31e1@lex '#f) x31e2@r))) (set! x2e8e@add-lexicals (lambda (x31e6@lab* x31e7@lex* x31e8@r) (if (null? x31e6@lab*) x31e8@r (x2e8e@add-lexicals (cdr x31e6@lab*) (cdr x31e7@lex*) (x2e8c@add-lexical (car x31e6@lab*) (car x31e7@lex*) x31e8@r))))) (set! x2e90@letrec-helper (lambda (x31ec@e x31ed@r x31ee@mr x31ef@build) ((lambda (x31f4@t) ((lambda (x31f6@ls/false) (if x31f6@ls/false (apply (lambda (x31f8@lhs* x31f9@rhs* x31fa@b x31fb@b*) (if (not (x2cf9@valid-bound-ids? x31f8@lhs*)) (x2eb4@invalid-fmls-error x31ec@e x31f8@lhs*) ((lambda (x3200@lex* x3201@lab*) ((lambda (x3204@rib x3205@r) ((lambda (x3208@body x3209@rhs*) (x31ef@build '#f x3200@lex* x3209@rhs* x3208@body)) (x2f32@chi-internal (x2cdb@add-subst x3204@rib (cons x31fa@b x31fb@b*)) x3205@r x31ee@mr) (x2f18@chi-expr* (map (lambda (x320c@x) (x2cdb@add-subst x3204@rib x320c@x)) x31f9@rhs*) x3205@r x31ee@mr))) (x2caa@make-full-rib x31f8@lhs* x3201@lab*) (x2e8e@add-lexicals x3201@lab* x3200@lex* x31ed@r))) (map x2c6f@gen-lexical x31f8@lhs*) (map x2c73@gen-label x31f8@lhs*)))) x31f6@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x31f4@t))) (x2efa@syntax-dispatch x31f4@t '(_ #(each (any any)) any . each-any)))) x31ec@e))) (set! x2e92@letrec-transformer (lambda (x320e@e x320f@r x3210@mr) (x2e90@letrec-helper x320e@e x320f@r x3210@mr x2c50@x2bc1@build-letrec))) (set! x2e94@letrec*-transformer (lambda (x3214@e x3215@r x3216@mr) (x2e90@letrec-helper x3214@e x3215@r x3216@mr x2c51@x2bc3@build-letrec*))) (set! x2e96@fluid-let-syntax-transformer (lambda (x321a@e x321b@r x321c@mr) ((lambda (x3221@lookup) (begin (set! x3221@lookup (lambda (x3234@x) (or (x2d09@id->label x3234@x) (x2fe3@syntax-violation '#f '"unbound identifier" x321a@e x3234@x)))) ((lambda (x3222@t) ((lambda (x3224@ls/false) (if x3224@ls/false (apply (lambda (x3226@lhs* x3227@rhs* x3228@b x3229@b*) (if (not (x2cf9@valid-bound-ids? x3226@lhs*)) (x2eb4@invalid-fmls-error x321a@e x3226@lhs*) ((lambda (x322e@lab* x322f@rhs*) (x2f32@chi-internal (cons x3228@b x3229@b*) (append (map cons x322e@lab* x322f@rhs*) x321b@r) (append (map cons x322e@lab* x322f@rhs*) x321c@mr))) (map x3221@lookup x3226@lhs*) (map (lambda (x3232@x) (x2d2d@make-eval-transformer (x2f57@expand-transformer x3232@x x321c@mr))) x3227@rhs*)))) x3224@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3222@t))) (x2efa@syntax-dispatch x3222@t '(_ #(each (any any)) any . each-any)))) x321a@e))) '#f))) (set! x2e98@type-descriptor-transformer (lambda (x3236@e x3237@r x3238@mr) ((lambda (x323c@t) ((lambda (x323e@ls/false) (if (and x323e@ls/false (apply (lambda (x3240@id) (x2cef@id? x3240@id)) x323e@ls/false)) (apply (lambda (x3242@id) ((lambda (x3244@lab) ((lambda (x3246@b) ((lambda (x3248@type) ((lambda () (begin (if (not x3244@lab) (x2d15@raise-unbound-error x3242@id) (void)) (if (not (and (eq? x3248@type '$rtd) (not (list? (x2d13@binding-value x3246@b))))) (x2fe3@syntax-violation '#f '"not a record type" x3236@e) (void)) (list 'quote (x2d13@binding-value x3246@b)))))) (x2d11@binding-type x3246@b))) (x2d0d@label->binding x3244@lab x3237@r))) (x2d09@id->label x3242@id))) x323e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x323c@t))) (x2efa@syntax-dispatch x323c@t '(_ any)))) x3236@e))) (set! x2e9a@record-type-descriptor-transformer (lambda (x324a@e x324b@r x324c@mr) ((lambda (x3250@t) ((lambda (x3252@ls/false) (if (and x3252@ls/false (apply (lambda (x3254@id) (x2cef@id? x3254@id)) x3252@ls/false)) (apply (lambda (x3256@id) ((lambda (x3258@lab) ((lambda (x325a@b) ((lambda (x325c@type) ((lambda () (begin (if (not x3258@lab) (x2d15@raise-unbound-error x3256@id) (void)) (if (not (and (eq? x325c@type '$rtd) (list? (x2d13@binding-value x325a@b)))) (x2fe3@syntax-violation '#f '"not a record type" x324a@e) (void)) (x2f1c@chi-expr (car (x2d13@binding-value x325a@b)) x324b@r x324c@mr))))) (x2d11@binding-type x325a@b))) (x2d0d@label->binding x3258@lab x324b@r))) (x2d09@id->label x3256@id))) x3252@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3250@t))) (x2efa@syntax-dispatch x3250@t '(_ any)))) x324a@e))) (set! x2e9c@record-constructor-descriptor-transformer (lambda (x325e@e x325f@r x3260@mr) ((lambda (x3264@t) ((lambda (x3266@ls/false) (if (and x3266@ls/false (apply (lambda (x3268@id) (x2cef@id? x3268@id)) x3266@ls/false)) (apply (lambda (x326a@id) ((lambda (x326c@lab) ((lambda (x326e@b) ((lambda (x3270@type) ((lambda () (begin (if (not x326c@lab) (x2d15@raise-unbound-error x326a@id) (void)) (if (not (and (eq? x3270@type '$rtd) (list? (x2d13@binding-value x326e@b)))) (x2fe3@syntax-violation '#f '"invalid type" x325e@e) (void)) (x2f1c@chi-expr (cadr (x2d13@binding-value x326e@b)) x325f@r x3260@mr))))) (x2d11@binding-type x326e@b))) (x2d0d@label->binding x326c@lab x325f@r))) (x2d09@id->label x326a@id))) x3266@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3264@t))) (x2efa@syntax-dispatch x3264@t '(_ any)))) x325e@e))) (set! x2e9e@when-macro (lambda (x3272@e) ((lambda (x3274@t) ((lambda (x3276@ls/false) (if x3276@ls/false (apply (lambda (x3278@test x3279@e x327a@e*) (x2eb0@bless (list 'if x3278@test (cons 'begin (cons x3279@e x327a@e*))))) x3276@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3274@t))) (x2efa@syntax-dispatch x3274@t '(_ any any . each-any)))) x3272@e))) (set! x2ea0@unless-macro (lambda (x327e@e) ((lambda (x3280@t) ((lambda (x3282@ls/false) (if x3282@ls/false (apply (lambda (x3284@test x3285@e x3286@e*) (x2eb0@bless (list 'if (list 'not x3284@test) (cons 'begin (cons x3285@e x3286@e*))))) x3282@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3280@t))) (x2efa@syntax-dispatch x3280@t '(_ any any . each-any)))) x327e@e))) (set! x2ea2@if-transformer (lambda (x328a@e x328b@r x328c@mr) ((lambda (x3290@t) ((lambda (x3292@ls/false) (if x3292@ls/false (apply (lambda (x3294@e0 x3295@e1 x3296@e2) (list 'if (x2f1c@chi-expr x3294@e0 x328b@r x328c@mr) (x2f1c@chi-expr x3295@e1 x328b@r x328c@mr) (x2f1c@chi-expr x3296@e2 x328b@r x328c@mr))) x3292@ls/false) ((lambda (x329a@t) ((lambda (x329c@ls/false) (if x329c@ls/false (apply (lambda (x329e@e0 x329f@e1) (list 'if (x2f1c@chi-expr x329e@e0 x328b@r x328c@mr) (x2f1c@chi-expr x329f@e1 x328b@r x328c@mr) (x2c4f@x2bbf@build-void))) x329c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x329a@t))) (x2efa@syntax-dispatch x329a@t '(_ any any)))) x3290@t))) (x2efa@syntax-dispatch x3290@t '(_ any any any)))) x328a@e))) (set! x2ea4@and-transformer (lambda (x32a2@e x32a3@r x32a4@mr) ((lambda (x32a8@t) ((lambda (x32aa@ls/false) (if x32aa@ls/false (apply (lambda (x32ac@e*) (cons 'and (x2f18@chi-expr* x32ac@e* x32a3@r x32a4@mr))) x32aa@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x32a8@t))) (x2efa@syntax-dispatch x32a8@t '(_ . each-any)))) x32a2@e))) (set! x2ea6@or-transformer (lambda (x32ae@e x32af@r x32b0@mr) ((lambda (x32b4@t) ((lambda (x32b6@ls/false) (if x32b6@ls/false (apply (lambda (x32b8@e*) (cons 'or (x2f18@chi-expr* x32b8@e* x32af@r x32b0@mr))) x32b6@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x32b4@t))) (x2efa@syntax-dispatch x32b4@t '(_ . each-any)))) x32ae@e))) (set! x2ea8@case-macro (lambda (x32ba@e) ((lambda (x32bd@build-last x32bf@build-one) (begin (set! x32bd@build-last (lambda (x32e4@cls) ((lambda (x32e6@t) ((lambda (x32e8@ls/false) (if x32e8@ls/false (apply (lambda (x32ea@e x32eb@e*) (cons 'begin (cons x32ea@e x32eb@e*))) x32e8@ls/false) ((lambda (x32ee@t) ((lambda (x32f0@ls/false) (if x32f0@ls/false (apply (lambda () (x32bf@build-one x32e4@cls '(if #f #f))) x32f0@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x32ee@t))) (x2efa@syntax-dispatch x32ee@t '_))) x32e6@t))) (x2efa@syntax-dispatch x32e6@t '(#(scheme-id else) any . each-any)))) x32e4@cls))) (set! x32bf@build-one (lambda (x32d6@cls x32d7@k) ((lambda (x32da@t) ((lambda (x32dc@ls/false) (if x32dc@ls/false (apply (lambda (x32de@d* x32df@e x32e0@e*) (list 'if (list 'memv 't (list 'quote x32de@d*)) (cons 'begin (cons x32df@e x32e0@e*)) x32d7@k)) x32dc@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x32da@t))) (x2efa@syntax-dispatch x32da@t '(each-any any . each-any)))) x32d6@cls))) ((lambda (x32c0@t) ((lambda (x32c2@ls/false) (if x32c2@ls/false (apply (lambda (x32c4@expr) (x2eb0@bless (cons 'let (cons (list (list 't x32c4@expr)) '((if #f #f)))))) x32c2@ls/false) ((lambda (x32c6@t) ((lambda (x32c8@ls/false) (if x32c8@ls/false (apply (lambda (x32ca@expr x32cb@cls x32cc@cls*) (x2eb0@bless (list 'let (list (list 't x32ca@expr)) ((letrec ((x32d0@f (lambda (x32d2@cls x32d3@cls*) (if (null? x32d3@cls*) (x32bd@build-last x32d2@cls) (x32bf@build-one x32d2@cls (x32d0@f (car x32d3@cls*) (cdr x32d3@cls*))))))) x32d0@f) x32cb@cls x32cc@cls*)))) x32c8@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x32c6@t))) (x2efa@syntax-dispatch x32c6@t '(_ any any . each-any)))) x32c0@t))) (x2efa@syntax-dispatch x32c0@t '(_ any)))) x32ba@e))) '#f '#f))) (set! x2eaa@quote-transformer (lambda (x32f2@e x32f3@r x32f4@mr) ((lambda (x32f8@t) ((lambda (x32fa@ls/false) (if x32fa@ls/false (apply (lambda (x32fc@datum) (list 'quote (x2d05@stx->datum x32fc@datum))) x32fa@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x32f8@t))) (x2efa@syntax-dispatch x32f8@t '(_ any)))) x32f2@e))) (set! x2eac@case-lambda-transformer (lambda (x32fe@e x32ff@r x3300@mr) ((lambda (x3304@t) ((lambda (x3306@ls/false) (if x3306@ls/false (apply (lambda (x3308@fmls* x3309@b* x330a@b**) (call-with-values (lambda () (x2f24@chi-lambda-clause* x32fe@e x3308@fmls* (map cons x3309@b* x330a@b**) x32ff@r x3300@mr)) (lambda (x3312@x330f x3313@x3311) ((lambda (x3316@body* x3317@fmls*) (x2c4c@x2b8d@build-case-lambda '#f x3317@fmls* x3316@body*)) x3313@x3311 x3312@x330f)))) x3306@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3304@t))) (x2efa@syntax-dispatch x3304@t '(_ . #(each (any any . each-any)))))) x32fe@e))) (set! x2eae@lambda-transformer (lambda (x331a@e x331b@r x331c@mr) ((lambda (x3320@t) ((lambda (x3322@ls/false) (if x3322@ls/false (apply (lambda (x3324@fmls x3325@b x3326@b*) (call-with-values (lambda () (x2f22@chi-lambda-clause x331a@e x3324@fmls (cons x3325@b x3326@b*) x331b@r x331c@mr)) (lambda (x332e@x332b x332f@x332d) ((lambda (x3332@body x3333@fmls) (x2c4b@x2b8b@build-lambda '#f x3333@fmls x3332@body)) x332f@x332d x332e@x332b)))) x3322@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3320@t))) (x2efa@syntax-dispatch x3320@t '(_ any any . each-any)))) x331a@e))) (set! x2eb0@bless (lambda (x3336@x) (x2cd7@mkstx ((letrec ((x3338@f (lambda (x333a@x) (if (x2cb7@stx? x333a@x) x333a@x (if (pair? x333a@x) (cons (x3338@f (car x333a@x)) (x3338@f (cdr x333a@x))) (if (symbol? x333a@x) (x2e84@scheme-stx x333a@x) (if (vector? x333a@x) (vector-map x3338@f x333a@x) x333a@x))))))) x3338@f) x3336@x) '() '() '()))) (set! x2eb2@with-syntax-macro (lambda (x333c@e) ((lambda (x333e@t) ((lambda (x3340@ls/false) (if x3340@ls/false (apply (lambda (x3342@pat* x3343@expr* x3344@b x3345@b*) ((lambda (x334a@idn*) (begin (x2f20@verify-formals (map car x334a@idn*) x333c@e) ((lambda (x334c@t*) (x2eb0@bless (list 'let (map list x334c@t* x3343@expr*) ((letrec ((x334e@f (lambda (x3350@pat* x3351@t*) (if (null? x3350@pat*) (cons 'begin (cons '#f (cons x3344@b x3345@b*))) (list 'syntax-case (car x3351@t*) '() (list (car x3350@pat*) (x334e@f (cdr x3350@pat*) (cdr x3351@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car x3350@pat*)) (car x3351@t*)))))))) x334e@f) x3342@pat* x334c@t*)))) (x2fd1@generate-temporaries x3343@expr*)))) ((letrec ((x3354@f (lambda (x3356@pat*) (if (null? x3356@pat*) '() (call-with-values (lambda () (x2ef8@convert-pattern (car x3356@pat*) '())) (lambda (x335c@x3359 x335d@x335b) ((lambda (x3360@idn* x3361@pat) (append x3360@idn* (x3354@f (cdr x3356@pat*)))) x335d@x335b x335c@x3359))))))) x3354@f) x3342@pat*))) x3340@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x333e@t))) (x2efa@syntax-dispatch x333e@t '(_ #(each (any any)) any . each-any)))) x333c@e))) (set! x2eb4@invalid-fmls-error (lambda (x3364@stx x3365@fmls) ((lambda (x3368@t) ((lambda (x336a@ls/false) (if x336a@ls/false (apply (lambda (x336c@id* x336d@last) ((letrec ((x3370@f (lambda (x3372@id*) (if (null? x3372@id*) (values) (if (not (x2cef@id? (car x3372@id*))) (x2fe3@syntax-violation '#f '"not an identifier" x3364@stx (car x3372@id*)) (begin (x3370@f (cdr x3372@id*)) (if (x2cfd@bound-id-member? (car x3372@id*) (cdr x3372@id*)) (x2fe3@syntax-violation '#f '"duplicate binding" x3364@stx (car x3372@id*)) (void)))))))) x3370@f) (if (x2cef@id? x336d@last) (cons x336d@last x336c@id*) (if (x2ce5@syntax-null? x336d@last) x336c@id* (x2fe3@syntax-violation '#f '"not an identifier" x3364@stx x336d@last))))) x336a@ls/false) ((lambda (x3374@t) ((lambda (x3376@ls/false) (if x3376@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"malformed binding form" x3364@stx x3365@fmls)) x3376@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3374@t))) (x2efa@syntax-dispatch x3374@t '_))) x3368@t))) (x2efa@syntax-dispatch x3368@t '#(each+ any () any)))) x3365@fmls))) (set! x2eb6@let-macro (lambda (x3378@stx) ((lambda (x337a@t) ((lambda (x337c@ls/false) (if x337c@ls/false (apply (lambda (x337e@lhs* x337f@rhs* x3380@b x3381@b*) (if (x2cf9@valid-bound-ids? x337e@lhs*) (x2eb0@bless (cons (cons 'lambda (cons x337e@lhs* (cons x3380@b x3381@b*))) x337f@rhs*)) (x2eb4@invalid-fmls-error x3378@stx x337e@lhs*))) x337c@ls/false) ((lambda (x3386@t) ((lambda (x3388@ls/false) (if (and x3388@ls/false (apply (lambda (x338a@f x338b@lhs* x338c@rhs* x338d@b x338e@b*) (x2cef@id? x338a@f)) x3388@ls/false)) (apply (lambda (x3394@f x3395@lhs* x3396@rhs* x3397@b x3398@b*) (if (x2cf9@valid-bound-ids? x3395@lhs*) (x2eb0@bless (cons (list 'letrec (list (list x3394@f (cons 'lambda (cons x3395@lhs* (cons x3397@b x3398@b*))))) x3394@f) x3396@rhs*)) (x2eb4@invalid-fmls-error x3378@stx x3395@lhs*))) x3388@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3386@t))) (x2efa@syntax-dispatch x3386@t '(_ any #(each (any any)) any . each-any)))) x337a@t))) (x2efa@syntax-dispatch x337a@t '(_ #(each (any any)) any . each-any)))) x3378@stx))) (set! x2eb8@let-values-macro (lambda (x339e@stx) ((lambda (x33a1@rename x33a3@rename*) (begin (set! x33a1@rename (lambda (x3406@x x3407@old* x3408@new*) (begin (if (not (x2cef@id? x3406@x)) (x2fe3@syntax-violation '#f '"not an indentifier" x339e@stx x3406@x) (void)) (if (x2cfd@bound-id-member? x3406@x x3407@old*) (x2fe3@syntax-violation '#f '"duplicate binding" x339e@stx x3406@x) (void)) ((lambda (x340c@y) (values x340c@y (cons x3406@x x3407@old*) (cons x340c@y x3408@new*))) (gensym (x2fe9@syntax->datum x3406@x)))))) (set! x33a3@rename* (lambda (x33f4@x* x33f5@old* x33f6@new*) (if (null? x33f4@x*) (values '() x33f5@old* x33f6@new*) (call-with-values (lambda () (x33a1@rename (car x33f4@x*) x33f5@old* x33f6@new*)) (lambda (x33fa@x x33fb@old* x33fc@new*) (call-with-values (lambda () (x33a3@rename* (cdr x33f4@x*) x33fb@old* x33fc@new*)) (lambda (x3400@x* x3401@old* x3402@new*) (values (cons x33fa@x x3400@x*) x3401@old* x3402@new*)))))))) ((lambda (x33a4@t) ((lambda (x33a6@ls/false) (if x33a6@ls/false (apply (lambda (x33a8@b x33a9@b*) (cons* (x2eb0@bless 'let) '() x33a8@b x33a9@b*)) x33a6@ls/false) ((lambda (x33ac@t) ((lambda (x33ae@ls/false) (if x33ae@ls/false (apply (lambda (x33b0@lhs* x33b1@rhs* x33b2@b x33b3@b*) (x2eb0@bless ((letrec ((x33b8@f (lambda (x33ba@lhs* x33bb@rhs* x33bc@old* x33bd@new*) (if (null? x33ba@lhs*) (cons 'let (cons (map list x33bc@old* x33bd@new*) (cons x33b2@b x33b3@b*))) ((lambda (x33c2@t) ((lambda (x33c4@ls/false) (if x33c4@ls/false (apply (lambda (x33c6@x*) (call-with-values (lambda () (x33a3@rename* x33c6@x* x33bc@old* x33bd@new*)) (lambda (x33ce@x33c9 x33cf@x33cb x33d0@x33cd) ((lambda (x33d4@new* x33d5@old* x33d6@y*) (list 'call-with-values (list 'lambda '() (car x33bb@rhs*)) (list 'lambda x33d6@y* (x33b8@f (cdr x33ba@lhs*) (cdr x33bb@rhs*) x33d5@old* x33d4@new*)))) x33d0@x33cd x33cf@x33cb x33ce@x33c9)))) x33c4@ls/false) ((lambda (x33da@t) ((lambda (x33dc@ls/false) (if x33dc@ls/false (apply (lambda (x33de@x* x33df@x) (call-with-values (lambda () (x33a1@rename x33df@x x33bc@old* x33bd@new*)) (lambda (x33e2@y x33e3@old* x33e4@new*) (call-with-values (lambda () (x33a3@rename* x33de@x* x33e3@old* x33e4@new*)) (lambda (x33e8@y* x33e9@old* x33ea@new*) (list 'call-with-values (list 'lambda '() (car x33bb@rhs*)) (list 'lambda (append x33e8@y* x33e2@y) (x33b8@f (cdr x33ba@lhs*) (cdr x33bb@rhs*) x33e9@old* x33ea@new*)))))))) x33dc@ls/false) ((lambda (x33ee@t) ((lambda (x33f0@ls/false) (if x33f0@ls/false (apply (lambda (x33f2@others) (x2fe3@syntax-violation '#f '"malformed bindings" x339e@stx x33f2@others)) x33f0@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x33ee@t))) (x2efa@syntax-dispatch x33ee@t 'any))) x33da@t))) (x2efa@syntax-dispatch x33da@t '#(each+ any () any)))) x33c2@t))) (x2efa@syntax-dispatch x33c2@t 'each-any))) (car x33ba@lhs*)))))) x33b8@f) x33b0@lhs* x33b1@rhs* '() '()))) x33ae@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x33ac@t))) (x2efa@syntax-dispatch x33ac@t '(_ #(each (any any)) any . each-any)))) x33a4@t))) (x2efa@syntax-dispatch x33a4@t '(_ () any . each-any)))) x339e@stx))) '#f '#f))) (set! x2eba@let*-values-macro (lambda (x340e@stx) ((lambda (x3411@check) (begin (set! x3411@check (lambda (x3440@x*) (if (not (null? x3440@x*)) ((lambda (x3442@x) (begin (if (not (x2cef@id? x3442@x)) (x2fe3@syntax-violation '#f '"not an identifier" x340e@stx x3442@x) (void)) (x3411@check (cdr x3440@x*)) (if (x2cfd@bound-id-member? x3442@x (cdr x3440@x*)) (x2fe3@syntax-violation '#f '"duplicate identifier" x340e@stx x3442@x) (void)))) (car x3440@x*)) (void)))) ((lambda (x3412@t) ((lambda (x3414@ls/false) (if x3414@ls/false (apply (lambda (x3416@b x3417@b*) (cons* (x2eb0@bless 'let) '() x3416@b x3417@b*)) x3414@ls/false) ((lambda (x341a@t) ((lambda (x341c@ls/false) (if x341c@ls/false (apply (lambda (x341e@lhs* x341f@rhs* x3420@b x3421@b*) (x2eb0@bless ((letrec ((x3426@f (lambda (x3428@lhs* x3429@rhs*) (if (null? x3428@lhs*) (cons 'begin (cons x3420@b x3421@b*)) ((lambda (x342c@t) ((lambda (x342e@ls/false) (if x342e@ls/false (apply (lambda (x3430@x*) (begin (x3411@check x3430@x*) (list 'call-with-values (list 'lambda '() (car x3429@rhs*)) (list 'lambda x3430@x* (x3426@f (cdr x3428@lhs*) (cdr x3429@rhs*)))))) x342e@ls/false) ((lambda (x3432@t) ((lambda (x3434@ls/false) (if x3434@ls/false (apply (lambda (x3436@x* x3437@x) (begin (x3411@check (cons x3437@x x3436@x*)) (list 'call-with-values (list 'lambda '() (car x3429@rhs*)) (list 'lambda (append x3436@x* x3437@x) (x3426@f (cdr x3428@lhs*) (cdr x3429@rhs*)))))) x3434@ls/false) ((lambda (x343a@t) ((lambda (x343c@ls/false) (if x343c@ls/false (apply (lambda (x343e@others) (x2fe3@syntax-violation '#f '"malformed bindings" x340e@stx x343e@others)) x343c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x343a@t))) (x2efa@syntax-dispatch x343a@t 'any))) x3432@t))) (x2efa@syntax-dispatch x3432@t '#(each+ any () any)))) x342c@t))) (x2efa@syntax-dispatch x342c@t 'each-any))) (car x3428@lhs*)))))) x3426@f) x341e@lhs* x341f@rhs*))) x341c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x341a@t))) (x2efa@syntax-dispatch x341a@t '(_ #(each (any any)) any . each-any)))) x3412@t))) (x2efa@syntax-dispatch x3412@t '(_ () any . each-any)))) x340e@stx))) '#f))) (set! x2ebc@trace-lambda-macro (lambda (x3444@stx) ((lambda (x3446@t) ((lambda (x3448@ls/false) (if x3448@ls/false (apply (lambda (x344a@who x344b@fmls x344c@b x344d@b*) (if (x2cf9@valid-bound-ids? x344b@fmls) (x2eb0@bless (list 'make-traced-procedure (list 'quote x344a@who) (cons 'lambda (cons x344b@fmls (cons x344c@b x344d@b*))))) (x2eb4@invalid-fmls-error x3444@stx x344b@fmls))) x3448@ls/false) ((lambda (x3452@t) ((lambda (x3454@ls/false) (if x3454@ls/false (apply (lambda (x3456@who x3457@fmls x3458@last x3459@b x345a@b*) (if (x2cf9@valid-bound-ids? (cons x3458@last x3457@fmls)) (x2eb0@bless (list 'make-traced-procedure (list 'quote x3456@who) (cons 'lambda (cons (append x3457@fmls x3458@last) (cons x3459@b x345a@b*))))) (x2eb4@invalid-fmls-error x3444@stx (append x3457@fmls x3458@last)))) x3454@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3452@t))) (x2efa@syntax-dispatch x3452@t '(_ any #(each+ any () any) any . each-any)))) x3446@t))) (x2efa@syntax-dispatch x3446@t '(_ any each-any any . each-any)))) x3444@stx))) (set! x2ebe@trace-define-macro (lambda (x3460@stx) ((lambda (x3462@t) ((lambda (x3464@ls/false) (if x3464@ls/false (apply (lambda (x3466@who x3467@fmls x3468@b x3469@b*) (if (x2cf9@valid-bound-ids? x3467@fmls) (x2eb0@bless (list 'define x3466@who (list 'make-traced-procedure (list 'quote x3466@who) (cons 'lambda (cons x3467@fmls (cons x3468@b x3469@b*)))))) (x2eb4@invalid-fmls-error x3460@stx x3467@fmls))) x3464@ls/false) ((lambda (x346e@t) ((lambda (x3470@ls/false) (if x3470@ls/false (apply (lambda (x3472@who x3473@fmls x3474@last x3475@b x3476@b*) (if (x2cf9@valid-bound-ids? (cons x3474@last x3473@fmls)) (x2eb0@bless (list 'define x3472@who (list 'make-traced-procedure (list 'quote x3472@who) (cons 'lambda (cons (append x3473@fmls x3474@last) (cons x3475@b x3476@b*)))))) (x2eb4@invalid-fmls-error x3460@stx (append x3473@fmls x3474@last)))) x3470@ls/false) ((lambda (x347c@t) ((lambda (x347e@ls/false) (if x347e@ls/false (apply (lambda (x3480@who x3481@expr) (if (x2cef@id? x3480@who) (x2eb0@bless (list 'define x3480@who (list 'let (list (list 'v x3481@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote x3480@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (x2fe3@syntax-violation '#f '"invalid name" x3460@stx))) x347e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x347c@t))) (x2efa@syntax-dispatch x347c@t '(_ any any)))) x346e@t))) (x2efa@syntax-dispatch x346e@t '(_ (any . #(each+ any () any)) any . each-any)))) x3462@t))) (x2efa@syntax-dispatch x3462@t '(_ (any . each-any) any . each-any)))) x3460@stx))) (set! x2ec0@trace-define-syntax-macro (lambda (x3484@stx) ((lambda (x3486@t) ((lambda (x3488@ls/false) (if x3488@ls/false (apply (lambda (x348a@who x348b@expr) (if (x2cef@id? x348a@who) (x2eb0@bless (list 'define-syntax x348a@who (list 'make-traced-macro (list 'quote x348a@who) x348b@expr))) (x2fe3@syntax-violation '#f '"invalid name" x3484@stx))) x3488@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3486@t))) (x2efa@syntax-dispatch x3486@t '(_ any any)))) x3484@stx))) (set! x2ec2@trace-let/rec-syntax (lambda (x348e@who) (lambda (x3490@stx) ((lambda (x3492@t) ((lambda (x3494@ls/false) (if x3494@ls/false (apply (lambda (x3496@lhs* x3497@rhs* x3498@b x3499@b*) (if (x2cf9@valid-bound-ids? x3496@lhs*) ((lambda (x349e@rhs*) (x2eb0@bless (cons x348e@who (cons (map list x3496@lhs* x349e@rhs*) (cons x3498@b x3499@b*))))) (map (lambda (x34a0@lhs x34a1@rhs) (list 'make-traced-macro (list 'quote x34a0@lhs) x34a1@rhs)) x3496@lhs* x3497@rhs*)) (x2eb4@invalid-fmls-error x3490@stx x3496@lhs*))) x3494@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3492@t))) (x2efa@syntax-dispatch x3492@t '(_ #(each (any any)) any . each-any)))) x3490@stx)))) (set! x2ec4@trace-let-syntax-macro (x2ec2@trace-let/rec-syntax 'let-syntax)) (set! x2ec6@trace-letrec-syntax-macro (x2ec2@trace-let/rec-syntax 'letrec-syntax)) (set! x2ec8@guard-macro (lambda (x34a4@x) ((lambda (x34a7@gen-clauses) (begin (set! x34a7@gen-clauses (lambda (x34be@con x34bf@outerk x34c0@clause*) ((lambda (x34c5@f x34c7@f*) (begin (set! x34c5@f (lambda (x34fe@x x34ff@k) ((lambda (x3502@t) ((lambda (x3504@ls/false) (if x3504@ls/false (apply (lambda (x3506@e x3507@p) ((lambda (x350a@t) (list 'let (list (list x350a@t x3506@e)) (list 'if x350a@t (list x3507@p x350a@t) x34ff@k))) (gensym))) x3504@ls/false) ((lambda (x350c@t) ((lambda (x350e@ls/false) (if x350e@ls/false (apply (lambda (x3510@e) ((lambda (x3512@t) (list 'let (list (list x3512@t x3510@e)) (list 'if x3512@t x3512@t x34ff@k))) (gensym))) x350e@ls/false) ((lambda (x3514@t) ((lambda (x3516@ls/false) (if x3516@ls/false (apply (lambda (x3518@e x3519@v x351a@v*) (list 'if x3518@e (cons 'begin (cons x3519@v x351a@v*)) x34ff@k)) x3516@ls/false) ((lambda (x351e@t) ((lambda (x3520@ls/false) (if x3520@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid guard clause" x34fe@x)) x3520@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x351e@t))) (x2efa@syntax-dispatch x351e@t '_))) x3514@t))) (x2efa@syntax-dispatch x3514@t '(any any . each-any)))) x350c@t))) (x2efa@syntax-dispatch x350c@t '(any)))) x3502@t))) (x2efa@syntax-dispatch x3502@t '(any #(scheme-id =>) any)))) x34fe@x))) (set! x34c7@f* (lambda (x34d4@x*) ((lambda (x34d6@t) ((lambda (x34d8@ls/false) (if x34d8@ls/false (apply (lambda () ((lambda (x34da@g) (values (list x34da@g (list 'lambda '() (list 'raise-continuable x34be@con))) x34da@g)) (gensym))) x34d8@ls/false) ((lambda (x34dc@t) ((lambda (x34de@ls/false) (if x34de@ls/false (apply (lambda (x34e0@e x34e1@e*) (values (cons 'begin (cons x34e0@e x34e1@e*)) '#f)) x34de@ls/false) ((lambda (x34e4@t) ((lambda (x34e6@ls/false) (if x34e6@ls/false (apply (lambda (x34e8@cls x34e9@cls*) (call-with-values (lambda () (x34c7@f* x34e9@cls*)) (lambda (x34f0@x34ed x34f1@x34ef) ((lambda (x34f4@g x34f5@e) (values (x34c5@f x34e8@cls x34f5@e) x34f4@g)) x34f1@x34ef x34f0@x34ed)))) x34e6@ls/false) ((lambda (x34f8@t) ((lambda (x34fa@ls/false) (if x34fa@ls/false (apply (lambda (x34fc@others) (x2fe3@syntax-violation '#f '"invalid guard clause" x34fc@others)) x34fa@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x34f8@t))) (x2efa@syntax-dispatch x34f8@t 'any))) x34e4@t))) (x2efa@syntax-dispatch x34e4@t '(any . any)))) x34dc@t))) (x2efa@syntax-dispatch x34dc@t '((#(scheme-id else) any . each-any))))) x34d6@t))) (x2efa@syntax-dispatch x34d6@t '()))) x34d4@x*))) (call-with-values (lambda () (x34c7@f* x34c0@clause*)) (lambda (x34cc@x34c9 x34cd@x34cb) ((lambda (x34d0@raisek x34d1@code) (if x34d0@raisek (list (list 'call/cc (list 'lambda (list x34d0@raisek) (list x34bf@outerk (list 'lambda '() x34d1@code))))) (list x34bf@outerk (list 'lambda '() x34d1@code)))) x34cd@x34cb x34cc@x34c9))))) '#f '#f))) ((lambda (x34a8@t) ((lambda (x34aa@ls/false) (if (and x34aa@ls/false (apply (lambda (x34ac@con x34ad@clause* x34ae@b x34af@b*) (x2cef@id? x34ac@con)) x34aa@ls/false)) (apply (lambda (x34b4@con x34b5@clause* x34b6@b x34b7@b*) ((lambda (x34bc@outerk) (x2eb0@bless (list (list 'call/cc (list 'lambda (list x34bc@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list x34b4@con) (x34a7@gen-clauses x34b4@con x34bc@outerk x34b5@clause*)) (cons 'lambda (cons '() (cons x34b6@b x34b7@b*)))))))))) (gensym))) x34aa@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x34a8@t))) (x2efa@syntax-dispatch x34a8@t '(_ (any . each-any) any . each-any)))) x34a4@x))) '#f))) (set! x2eca@define-enumeration-macro (lambda (x3522@stx) ((lambda (x3525@set? x3527@remove-dups) (begin (set! x3525@set? (lambda (x353e@x) (or (null? x353e@x) (and (not (memq (car x353e@x) (cdr x353e@x))) (x3525@set? (cdr x353e@x)))))) (set! x3527@remove-dups (lambda (x353c@ls) (if (null? x353c@ls) '() (cons (car x353c@ls) (x3527@remove-dups (remq (car x353c@ls) (cdr x353c@ls))))))) ((lambda (x3528@t) ((lambda (x352a@ls/false) (if (and x352a@ls/false (apply (lambda (x352c@name x352d@id* x352e@maker) (and (x2cef@id? x352c@name) (x2cef@id? x352e@maker) (for-all x2cef@id? x352d@id*))) x352a@ls/false)) (apply (lambda (x3532@name x3533@id* x3534@maker) ((lambda (x3538@name* x3539@mk) (x2eb0@bless (list 'begin (list 'define x3539@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote x3538@name*)))) (list 'define-syntax x3532@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote x3538@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote x3532@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax x3534@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote x3534@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote x3538@name*)) (cons 'syntax-violation (cons (list 'quote x3534@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons x3539@mk '('(n* ...)))))))))))) (x3527@remove-dups (x2fe9@syntax->datum x3533@id*)) (gensym))) x352a@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3528@t))) (x2efa@syntax-dispatch x3528@t '(_ any each-any any)))) x3522@stx))) '#f '#f))) (set! x2ecc@time-macro (lambda (x3540@stx) ((lambda (x3542@t) ((lambda (x3544@ls/false) (if x3544@ls/false (apply (lambda (x3546@expr) (x2eb0@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() x3546@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) x3544@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3542@t))) (x2efa@syntax-dispatch x3542@t '(_ any)))) x3540@stx))) (set! x2ece@delay-macro (lambda (x3548@stx) ((lambda (x354a@t) ((lambda (x354c@ls/false) (if x354c@ls/false (apply (lambda (x354e@expr) (x2eb0@bless (list 'make-promise (list 'lambda '() x354e@expr)))) x354c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x354a@t))) (x2efa@syntax-dispatch x354a@t '(_ any)))) x3548@stx))) (set! x2ed0@assert-macro (lambda (x3550@stx) ((lambda (x3552@t) ((lambda (x3554@ls/false) (if x3554@ls/false (apply (lambda (x3556@expr) ((lambda (x3558@pos) (x2eb0@bless (list 'unless x3556@expr (list 'assertion-error (list 'quote x3556@expr) (list 'quote x3558@pos))))) (or (x2fdb@expression-position x3550@stx) (x2fdb@expression-position x3556@expr)))) x3554@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3552@t))) (x2efa@syntax-dispatch x3552@t '(_ any)))) x3550@stx))) (set! x2ed2@endianness-macro (lambda (x355a@stx) ((lambda (x355c@t) ((lambda (x355e@ls/false) (if x355e@ls/false (apply (lambda (x3560@e) ((lambda (x3562@t) (if (memv x3562@t '(little)) (x2eb0@bless ''little) (if (memv x3562@t '(big)) (x2eb0@bless ''big) (x2fe3@syntax-violation '#f '"endianness must be big or little" x355a@stx)))) (x2fe9@syntax->datum x3560@e))) x355e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x355c@t))) (x2efa@syntax-dispatch x355c@t '(_ any)))) x355a@stx))) (set! x2ed4@identifier-syntax-macro (lambda (x3564@stx) ((lambda (x3566@t) ((lambda (x3568@ls/false) (if x3568@ls/false (apply (lambda (x356a@expr) (x2eb0@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax x356a@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax x356a@expr) '((syntax (e* ...)))))))))) x3568@ls/false) ((lambda (x356c@t) ((lambda (x356e@ls/false) (if (and x356e@ls/false (apply (lambda (x3570@id1 x3571@expr1 x3572@id2 x3573@expr2 x3574@expr3) (and (x2cef@id? x3570@id1) (x2cef@id? x3572@id2) (x2cef@id? x3573@expr2))) x356e@ls/false)) (apply (lambda (x357a@id1 x357b@expr1 x357c@id2 x357d@expr2 x357e@expr3) (x2eb0@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax x357b@expr1)) (list (list 'set! 'id x357d@expr2) (list 'syntax x357e@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons x357b@expr1 '(e* ...))))))))) x356e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x356c@t))) (x2efa@syntax-dispatch x356c@t '(_ (any any) ((#(scheme-id set!) any any) any))))) x3566@t))) (x2efa@syntax-dispatch x3566@t '(_ any)))) x3564@stx))) (set! x2ed6@do-macro (lambda (x3584@stx) ((lambda (x3587@bind) (begin (set! x3587@bind (lambda (x359e@x) ((lambda (x35a0@t) ((lambda (x35a2@ls/false) (if x35a2@ls/false (apply (lambda (x35a4@x x35a5@init) (list x35a4@x x35a5@init x35a4@x)) x35a2@ls/false) ((lambda (x35a8@t) ((lambda (x35aa@ls/false) (if x35aa@ls/false (apply (lambda (x35ac@x x35ad@init x35ae@step) (list x35ac@x x35ad@init x35ae@step)) x35aa@ls/false) ((lambda (x35b2@t) ((lambda (x35b4@ls/false) (if x35b4@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid binding" x3584@stx)) x35b4@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x35b2@t))) (x2efa@syntax-dispatch x35b2@t '_))) x35a8@t))) (x2efa@syntax-dispatch x35a8@t '(any any any)))) x35a0@t))) (x2efa@syntax-dispatch x35a0@t '(any any)))) x359e@x))) ((lambda (x3588@t) ((lambda (x358a@ls/false) (if x358a@ls/false (apply (lambda (x358c@binding* x358d@test x358e@expr* x358f@command*) ((lambda (x3594@t) ((lambda (x3596@ls/false) (if x3596@ls/false (apply (lambda (x3598@x* x3599@init* x359a@step*) (if (x2cf9@valid-bound-ids? x3598@x*) (x2eb0@bless (list 'letrec (list (list 'loop (list 'lambda x3598@x* (list 'if x358d@test (cons 'begin (cons '(if #f #f) x358e@expr*)) (cons 'begin (append x358f@command* (list (cons 'loop x359a@step*)))))))) (cons 'loop x3599@init*))) (x2fe3@syntax-violation '#f '"invalid bindings" x3584@stx))) x3596@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3594@t))) (x2efa@syntax-dispatch x3594@t '#(each (any any any))))) (map x3587@bind x358c@binding*))) x358a@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3588@t))) (x2efa@syntax-dispatch x3588@t '(_ each-any (any . each-any) . each-any)))) x3584@stx))) '#f))) (set! x2ed8@let*-macro (lambda (x35b6@stx) ((lambda (x35b8@t) ((lambda (x35ba@ls/false) (if (and x35ba@ls/false (apply (lambda (x35bc@lhs* x35bd@rhs* x35be@b x35bf@b*) (for-all x2cef@id? x35bc@lhs*)) x35ba@ls/false)) (apply (lambda (x35c4@lhs* x35c5@rhs* x35c6@b x35c7@b*) (x2eb0@bless ((letrec ((x35cc@f (lambda (x35ce@x*) (if (null? x35ce@x*) (cons 'let (cons '() (cons x35c6@b x35c7@b*))) (list 'let (list (car x35ce@x*)) (x35cc@f (cdr x35ce@x*))))))) x35cc@f) (map list x35c4@lhs* x35c5@rhs*)))) x35ba@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x35b8@t))) (x2efa@syntax-dispatch x35b8@t '(_ #(each (any any)) any . each-any)))) x35b6@stx))) (set! x2eda@or-macro (lambda (x35d0@stx) ((lambda (x35d2@t) ((lambda (x35d4@ls/false) (if x35d4@ls/false (apply (lambda () '#f) x35d4@ls/false) ((lambda (x35d6@t) ((lambda (x35d8@ls/false) (if x35d8@ls/false (apply (lambda (x35da@e x35db@e*) (x2eb0@bless ((letrec ((x35de@f (lambda (x35e0@e x35e1@e*) (if (null? x35e1@e*) (list 'begin '#f x35e0@e) (list 'let (list (list 't x35e0@e)) (list 'if 't 't (x35de@f (car x35e1@e*) (cdr x35e1@e*)))))))) x35de@f) x35da@e x35db@e*))) x35d8@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x35d6@t))) (x2efa@syntax-dispatch x35d6@t '(_ any . each-any)))) x35d2@t))) (x2efa@syntax-dispatch x35d2@t '(_)))) x35d0@stx))) (set! x2edc@and-macro (lambda (x35e4@stx) ((lambda (x35e6@t) ((lambda (x35e8@ls/false) (if x35e8@ls/false (apply (lambda () '#t) x35e8@ls/false) ((lambda (x35ea@t) ((lambda (x35ec@ls/false) (if x35ec@ls/false (apply (lambda (x35ee@e x35ef@e*) (x2eb0@bless ((letrec ((x35f2@f (lambda (x35f4@e x35f5@e*) (if (null? x35f5@e*) (list 'begin '#f x35f4@e) (cons 'if (cons x35f4@e (cons (x35f2@f (car x35f5@e*) (cdr x35f5@e*)) '(#f)))))))) x35f2@f) x35ee@e x35ef@e*))) x35ec@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x35ea@t))) (x2efa@syntax-dispatch x35ea@t '(_ any . each-any)))) x35e6@t))) (x2efa@syntax-dispatch x35e6@t '(_)))) x35e4@stx))) (set! x2ede@cond-macro (lambda (x35f8@stx) ((lambda (x35fa@t) ((lambda (x35fc@ls/false) (if x35fc@ls/false (apply (lambda (x35fe@cls x35ff@cls*) (x2eb0@bless ((letrec ((x3602@f (lambda (x3604@cls x3605@cls*) (if (null? x3605@cls*) ((lambda (x3608@t) ((lambda (x360a@ls/false) (if x360a@ls/false (apply (lambda (x360c@e x360d@e*) (cons 'begin (cons x360c@e x360d@e*))) x360a@ls/false) ((lambda (x3610@t) ((lambda (x3612@ls/false) (if x3612@ls/false (apply (lambda (x3614@e x3615@p) (list 'let (list (list 't x3614@e)) (list 'if 't (cons x3615@p '(t))))) x3612@ls/false) ((lambda (x3618@t) ((lambda (x361a@ls/false) (if x361a@ls/false (apply (lambda (x361c@e) (cons 'or (cons x361c@e '((if #f #f))))) x361a@ls/false) ((lambda (x361e@t) ((lambda (x3620@ls/false) (if x3620@ls/false (apply (lambda (x3622@e x3623@e*) (list 'if x3622@e (cons 'begin x3623@e*))) x3620@ls/false) ((lambda (x3626@t) ((lambda (x3628@ls/false) (if x3628@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid last clause" x35f8@stx)) x3628@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3626@t))) (x2efa@syntax-dispatch x3626@t '_))) x361e@t))) (x2efa@syntax-dispatch x361e@t '(any . each-any)))) x3618@t))) (x2efa@syntax-dispatch x3618@t '(any)))) x3610@t))) (x2efa@syntax-dispatch x3610@t '(any #(scheme-id =>) any)))) x3608@t))) (x2efa@syntax-dispatch x3608@t '(#(scheme-id else) any . each-any)))) x3604@cls) ((lambda (x362a@t) ((lambda (x362c@ls/false) (if x362c@ls/false (apply (lambda (x362e@e x362f@e*) (x2fe3@syntax-violation '#f '"incorrect position of keyword else" x35f8@stx)) x362c@ls/false) ((lambda (x3632@t) ((lambda (x3634@ls/false) (if x3634@ls/false (apply (lambda (x3636@e x3637@p) (list 'let (list (list 't x3636@e)) (list 'if 't (cons x3637@p '(t)) (x3602@f (car x3605@cls*) (cdr x3605@cls*))))) x3634@ls/false) ((lambda (x363a@t) ((lambda (x363c@ls/false) (if x363c@ls/false (apply (lambda (x363e@e) (list 'or x363e@e (x3602@f (car x3605@cls*) (cdr x3605@cls*)))) x363c@ls/false) ((lambda (x3640@t) ((lambda (x3642@ls/false) (if x3642@ls/false (apply (lambda (x3644@e x3645@e*) (list 'if x3644@e (cons 'begin x3645@e*) (x3602@f (car x3605@cls*) (cdr x3605@cls*)))) x3642@ls/false) ((lambda (x3648@t) ((lambda (x364a@ls/false) (if x364a@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid last clause" x35f8@stx)) x364a@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3648@t))) (x2efa@syntax-dispatch x3648@t '_))) x3640@t))) (x2efa@syntax-dispatch x3640@t '(any . each-any)))) x363a@t))) (x2efa@syntax-dispatch x363a@t '(any)))) x3632@t))) (x2efa@syntax-dispatch x3632@t '(any #(scheme-id =>) any)))) x362a@t))) (x2efa@syntax-dispatch x362a@t '(#(scheme-id else) any . each-any)))) x3604@cls))))) x3602@f) x35fe@cls x35ff@cls*))) x35fc@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x35fa@t))) (x2efa@syntax-dispatch x35fa@t '(_ any . each-any)))) x35f8@stx))) (set! x2ee0@do-include (lambda (x364c@stx x364d@id x364e@filename) ((lambda (x3652@filename) (begin (if (not (and (string? x3652@filename) (x2cef@id? x364d@id))) (x2fe3@syntax-violation '#f '"invalid syntax" x364c@stx) (void)) (cons (x2eb0@bless 'begin) (with-input-from-file x3652@filename (lambda () ((letrec ((x3654@f (lambda (x3656@ls) ((lambda (x3658@x) (if (eof-object? x3658@x) (reverse x3656@ls) (x3654@f (cons (x2ccd@datum->stx x364d@id x3658@x) x3656@ls)))) (x288c@x27a9@read-annotated))))) x3654@f) '())))))) (x2d05@stx->datum x364e@filename)))) (set! x2ee2@include-macro (lambda (x365a@e) ((lambda (x365c@t) ((lambda (x365e@ls/false) (if x365e@ls/false (apply (lambda (x3660@id x3661@filename) (x2ee0@do-include x365a@e x3660@id x3661@filename)) x365e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x365c@t))) (x2efa@syntax-dispatch x365c@t '(any any)))) x365a@e))) (set! x2ee4@include-into-macro (lambda (x3664@e) ((lambda (x3666@t) ((lambda (x3668@ls/false) (if x3668@ls/false (apply (lambda (x366a@id x366b@filename) (x2ee0@do-include x3664@e x366a@id x366b@filename)) x3668@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3666@t))) (x2efa@syntax-dispatch x3666@t '(_ any any)))) x3664@e))) (set! x2ee6@syntax-rules-macro (lambda (x366e@e) ((lambda (x3670@t) ((lambda (x3672@ls/false) (if x3672@ls/false (apply (lambda (x3674@lits x3675@pat* x3676@tmp*) (begin (x2f00@verify-literals x3674@lits x366e@e) (x2eb0@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons x3674@lits (map (lambda (x367a@pat x367b@tmp) ((lambda (x367e@t) ((lambda (x3680@ls/false) (if x3680@ls/false (apply (lambda (x3682@rest) (list (cons 'g x3682@rest) (list 'syntax x367b@tmp))) x3680@ls/false) ((lambda (x3684@t) ((lambda (x3686@ls/false) (if x3686@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid syntax-rules pattern" x366e@e x367a@pat)) x3686@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3684@t))) (x2efa@syntax-dispatch x3684@t '_))) x367e@t))) (x2efa@syntax-dispatch x367e@t '(_ . any)))) x367a@pat)) x3675@pat* x3676@tmp*)))))))) x3672@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3670@t))) (x2efa@syntax-dispatch x3670@t '(_ each-any . #(each (any any)))))) x366e@e))) (set! x2ee8@quasiquote-macro ((lambda () ((lambda (x3689@datum x36a5@quasicons* x36a7@quasicons x36a9@quasiappend x36ab@quasivector x36ad@vquasi x36af@quasi) (begin (set! x3689@datum (lambda (x378a@x) (list (x2e84@scheme-stx 'quote) (x2cd7@mkstx x378a@x '() '() '())))) (set! x36a5@quasicons* (lambda (x3782@x x3783@y) ((letrec ((x3786@f (lambda (x3788@x) (if (null? x3788@x) x3783@y (x36a7@quasicons (car x3788@x) (x3786@f (cdr x3788@x))))))) x3786@f) x3782@x))) (set! x36a7@quasicons (lambda (x375c@x x375d@y) ((lambda (x3760@t) ((lambda (x3762@ls/false) (if x3762@ls/false (apply (lambda (x3764@dy) ((lambda (x3766@t) ((lambda (x3768@ls/false) (if x3768@ls/false (apply (lambda (x376a@dx) (list (x2e84@scheme-stx 'quote) (cons x376a@dx x3764@dy))) x3768@ls/false) ((lambda (x376c@t) ((lambda (x376e@ls/false) (if x376e@ls/false (apply (lambda () ((lambda (x3770@t) ((lambda (x3772@ls/false) (if x3772@ls/false (apply (lambda () (list (x2e84@scheme-stx 'list) x375c@x)) x3772@ls/false) ((lambda (x3774@t) ((lambda (x3776@ls/false) (if x3776@ls/false (apply (lambda () (list (x2e84@scheme-stx 'cons) x375c@x x375d@y)) x3776@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3774@t))) (x2efa@syntax-dispatch x3774@t '_))) x3770@t))) (x2efa@syntax-dispatch x3770@t '()))) x3764@dy)) x376e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x376c@t))) (x2efa@syntax-dispatch x376c@t '_))) x3766@t))) (x2efa@syntax-dispatch x3766@t '(#(scheme-id quote) any)))) x375c@x)) x3762@ls/false) ((lambda (x3778@t) ((lambda (x377a@ls/false) (if x377a@ls/false (apply (lambda (x377c@stuff) (cons* (x2e84@scheme-stx 'list) x375c@x x377c@stuff)) x377a@ls/false) ((lambda (x377e@t) ((lambda (x3780@ls/false) (if x3780@ls/false (apply (lambda () (list (x2e84@scheme-stx 'cons) x375c@x x375d@y)) x3780@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x377e@t))) (x2efa@syntax-dispatch x377e@t '_))) x3778@t))) (x2efa@syntax-dispatch x3778@t '(#(scheme-id list) . each-any)))) x3760@t))) (x2efa@syntax-dispatch x3760@t '(#(scheme-id quote) any)))) x375d@y))) (set! x36a9@quasiappend (lambda (x3742@x x3743@y) ((lambda (x3746@ls) (if (null? x3746@ls) (list (x2e84@scheme-stx 'quote) '()) (if (null? (cdr x3746@ls)) (car x3746@ls) (cons* (x2e84@scheme-stx 'append) x3746@ls)))) ((letrec ((x3748@f (lambda (x374a@x) (if (null? x374a@x) ((lambda (x374c@t) ((lambda (x374e@ls/false) (if x374e@ls/false (apply (lambda () '()) x374e@ls/false) ((lambda (x3750@t) ((lambda (x3752@ls/false) (if x3752@ls/false (apply (lambda () (list x3743@y)) x3752@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3750@t))) (x2efa@syntax-dispatch x3750@t '_))) x374c@t))) (x2efa@syntax-dispatch x374c@t '(#(scheme-id quote) ())))) x3743@y) ((lambda (x3754@t) ((lambda (x3756@ls/false) (if x3756@ls/false (apply (lambda () (x3748@f (cdr x374a@x))) x3756@ls/false) ((lambda (x3758@t) ((lambda (x375a@ls/false) (if x375a@ls/false (apply (lambda () (cons (car x374a@x) (x3748@f (cdr x374a@x)))) x375a@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3758@t))) (x2efa@syntax-dispatch x3758@t '_))) x3754@t))) (x2efa@syntax-dispatch x3754@t '(#(scheme-id quote) ())))) (car x374a@x)))))) x3748@f) x3742@x)))) (set! x36ab@quasivector (lambda (x3710@x) ((lambda (x3712@pat-x) ((lambda (x3714@t) ((lambda (x3716@ls/false) (if x3716@ls/false (apply (lambda (x3718@x*) (list (x2e84@scheme-stx 'quote) (list->vector x3718@x*))) x3716@ls/false) ((lambda (x371a@t) ((lambda (x371c@ls/false) (if x371c@ls/false (apply (lambda () ((letrec ((x371e@f (lambda (x3720@x x3721@k) ((lambda (x3724@t) ((lambda (x3726@ls/false) (if x3726@ls/false (apply (lambda (x3728@x*) (x3721@k (map (lambda (x372a@x) (list (x2e84@scheme-stx 'quote) x372a@x)) x3728@x*))) x3726@ls/false) ((lambda (x372c@t) ((lambda (x372e@ls/false) (if x372e@ls/false (apply (lambda (x3730@x*) (x3721@k x3730@x*)) x372e@ls/false) ((lambda (x3732@t) ((lambda (x3734@ls/false) (if x3734@ls/false (apply (lambda (x3736@x x3737@y) (x371e@f x3737@y (lambda (x373a@ls) (x3721@k (cons x3736@x x373a@ls))))) x3734@ls/false) ((lambda (x373c@t) ((lambda (x373e@ls/false) (if x373e@ls/false (apply (lambda () (list (x2e84@scheme-stx 'list->vector) x3712@pat-x)) x373e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x373c@t))) (x2efa@syntax-dispatch x373c@t '_))) x3732@t))) (x2efa@syntax-dispatch x3732@t '(#(scheme-id cons) any any)))) x372c@t))) (x2efa@syntax-dispatch x372c@t '(#(scheme-id list) . each-any)))) x3724@t))) (x2efa@syntax-dispatch x3724@t '(#(scheme-id quote) each-any)))) x3720@x)))) x371e@f) x3710@x (lambda (x3740@ls) (cons* (x2e84@scheme-stx 'vector) x3740@ls)))) x371c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x371a@t))) (x2efa@syntax-dispatch x371a@t '_))) x3714@t))) (x2efa@syntax-dispatch x3714@t '(#(scheme-id quote) each-any)))) x3712@pat-x)) x3710@x))) (set! x36ad@vquasi (lambda (x36ee@p x36ef@lev) ((lambda (x36f2@t) ((lambda (x36f4@ls/false) (if x36f4@ls/false (apply (lambda (x36f6@p x36f7@q) ((lambda (x36fa@t) ((lambda (x36fc@ls/false) (if x36fc@ls/false (apply (lambda (x36fe@p) (if (= x36ef@lev '0) (x36a5@quasicons* x36fe@p (x36ad@vquasi x36f7@q x36ef@lev)) (x36a7@quasicons (x36a7@quasicons (x3689@datum 'unquote) (x36af@quasi x36fe@p (- x36ef@lev '1))) (x36ad@vquasi x36f7@q x36ef@lev)))) x36fc@ls/false) ((lambda (x3700@t) ((lambda (x3702@ls/false) (if x3702@ls/false (apply (lambda (x3704@p) (if (= x36ef@lev '0) (x36a9@quasiappend x3704@p (x36ad@vquasi x36f7@q x36ef@lev)) (x36a7@quasicons (x36a7@quasicons (x3689@datum 'unquote-splicing) (x36af@quasi x3704@p (- x36ef@lev '1))) (x36ad@vquasi x36f7@q x36ef@lev)))) x3702@ls/false) ((lambda (x3706@t) ((lambda (x3708@ls/false) (if x3708@ls/false (apply (lambda (x370a@p) (x36a7@quasicons (x36af@quasi x370a@p x36ef@lev) (x36ad@vquasi x36f7@q x36ef@lev))) x3708@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3706@t))) (x2efa@syntax-dispatch x3706@t 'any))) x3700@t))) (x2efa@syntax-dispatch x3700@t '(#(scheme-id unquote-splicing) . each-any)))) x36fa@t))) (x2efa@syntax-dispatch x36fa@t '(#(scheme-id unquote) . each-any)))) x36f6@p)) x36f4@ls/false) ((lambda (x370c@t) ((lambda (x370e@ls/false) (if x370e@ls/false (apply (lambda () (list (x2e84@scheme-stx 'quote) '())) x370e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x370c@t))) (x2efa@syntax-dispatch x370c@t '()))) x36f2@t))) (x2efa@syntax-dispatch x36f2@t '(any . any)))) x36ee@p))) (set! x36af@quasi (lambda (x36b8@p x36b9@lev) ((lambda (x36bc@t) ((lambda (x36be@ls/false) (if x36be@ls/false (apply (lambda (x36c0@p) (if (= x36b9@lev '0) x36c0@p (x36a7@quasicons (x3689@datum 'unquote) (x36af@quasi (list x36c0@p) (- x36b9@lev '1))))) x36be@ls/false) ((lambda (x36c2@t) ((lambda (x36c4@ls/false) (if x36c4@ls/false (apply (lambda (x36c6@p x36c7@q) (if (= x36b9@lev '0) (x36a5@quasicons* x36c6@p (x36af@quasi x36c7@q x36b9@lev)) (x36a7@quasicons (x36a7@quasicons (x3689@datum 'unquote) (x36af@quasi x36c6@p (- x36b9@lev '1))) (x36af@quasi x36c7@q x36b9@lev)))) x36c4@ls/false) ((lambda (x36ca@t) ((lambda (x36cc@ls/false) (if x36cc@ls/false (apply (lambda (x36ce@p x36cf@q) (if (= x36b9@lev '0) (x36a9@quasiappend x36ce@p (x36af@quasi x36cf@q x36b9@lev)) (x36a7@quasicons (x36a7@quasicons (x3689@datum 'unquote-splicing) (x36af@quasi x36ce@p (- x36b9@lev '1))) (x36af@quasi x36cf@q x36b9@lev)))) x36cc@ls/false) ((lambda (x36d2@t) ((lambda (x36d4@ls/false) (if x36d4@ls/false (apply (lambda (x36d6@p) (x36a7@quasicons (x3689@datum 'quasiquote) (x36af@quasi (list x36d6@p) (+ x36b9@lev '1)))) x36d4@ls/false) ((lambda (x36d8@t) ((lambda (x36da@ls/false) (if x36da@ls/false (apply (lambda (x36dc@p x36dd@q) (x36a7@quasicons (x36af@quasi x36dc@p x36b9@lev) (x36af@quasi x36dd@q x36b9@lev))) x36da@ls/false) ((lambda (x36e0@t) ((lambda (x36e2@ls/false) (if (and x36e2@ls/false (apply (lambda (x36e4@x) (not (x2cb7@stx? x36e4@x))) x36e2@ls/false)) (apply (lambda (x36e6@x) (x36ab@quasivector (x36ad@vquasi x36e6@x x36b9@lev))) x36e2@ls/false) ((lambda (x36e8@t) ((lambda (x36ea@ls/false) (if x36ea@ls/false (apply (lambda (x36ec@p) (list (x2e84@scheme-stx 'quote) x36ec@p)) x36ea@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x36e8@t))) (x2efa@syntax-dispatch x36e8@t 'any))) x36e0@t))) (x2efa@syntax-dispatch x36e0@t '#(vector each-any)))) x36d8@t))) (x2efa@syntax-dispatch x36d8@t '(any . any)))) x36d2@t))) (x2efa@syntax-dispatch x36d2@t '(#(scheme-id quasiquote) any)))) x36ca@t))) (x2efa@syntax-dispatch x36ca@t '((#(scheme-id unquote-splicing) . each-any) . any)))) x36c2@t))) (x2efa@syntax-dispatch x36c2@t '((#(scheme-id unquote) . each-any) . any)))) x36bc@t))) (x2efa@syntax-dispatch x36bc@t '(#(scheme-id unquote) any)))) x36b8@p))) (lambda (x36b0@x) ((lambda (x36b2@t) ((lambda (x36b4@ls/false) (if x36b4@ls/false (apply (lambda (x36b6@e) (x36af@quasi x36b6@e '0)) x36b4@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x36b2@t))) (x2efa@syntax-dispatch x36b2@t '(_ any)))) x36b0@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! x2eea@quasisyntax-macro ((lambda () ((lambda (x378d@quasi) (begin (set! x378d@quasi (lambda (x37a8@p x37a9@lev) ((lambda (x37ac@t) ((lambda (x37ae@ls/false) (if x37ae@ls/false (apply (lambda (x37b0@p) (if (= x37a9@lev '0) ((lambda (x37b2@g) (values (list x37b2@g) (list x37b0@p) x37b2@g)) (gensym)) (call-with-values (lambda () (x378d@quasi x37b0@p (- x37a9@lev '1))) (lambda (x37ba@x37b5 x37bb@x37b7 x37bc@x37b9) ((lambda (x37c0@p x37c1@rhs* x37c2@lhs*) (values x37c2@lhs* x37c1@rhs* (list 'unsyntax x37c0@p))) x37bc@x37b9 x37bb@x37b7 x37ba@x37b5))))) x37ae@ls/false) ((lambda (x37c6@t) ((lambda (x37c8@ls/false) (if (and x37c8@ls/false (apply (lambda () (= x37a9@lev '0)) x37c8@ls/false)) (apply (lambda () (x2fe3@syntax-violation '#f '"incorrect use of unsyntax" x37a8@p)) x37c8@ls/false) ((lambda (x37ca@t) ((lambda (x37cc@ls/false) (if x37cc@ls/false (apply (lambda (x37ce@p* x37cf@q) (call-with-values (lambda () (x378d@quasi x37cf@q x37a9@lev)) (lambda (x37d8@x37d3 x37d9@x37d5 x37da@x37d7) ((lambda (x37de@q x37df@rhs* x37e0@lhs*) (if (= x37a9@lev '0) ((lambda (x37e4@g*) (values (append x37e4@g* x37e0@lhs*) (append x37ce@p* x37df@rhs*) (append x37e4@g* x37de@q))) (map (lambda (x37e6@x) (gensym)) x37ce@p*)) (call-with-values (lambda () (x378d@quasi x37ce@p* (- x37a9@lev '1))) (lambda (x37ee@x37e9 x37ef@x37eb x37f0@x37ed) ((lambda (x37f4@p* x37f5@rhs2* x37f6@lhs2*) (values (append x37f6@lhs2* x37e0@lhs*) (append x37f5@rhs2* x37df@rhs*) (cons (cons 'unsyntax x37f4@p*) x37de@q))) x37f0@x37ed x37ef@x37eb x37ee@x37e9))))) x37da@x37d7 x37d9@x37d5 x37d8@x37d3)))) x37cc@ls/false) ((lambda (x37fa@t) ((lambda (x37fc@ls/false) (if x37fc@ls/false (apply (lambda (x37fe@p* x37ff@q) (call-with-values (lambda () (x378d@quasi x37ff@q x37a9@lev)) (lambda (x3808@x3803 x3809@x3805 x380a@x3807) ((lambda (x380e@q x380f@rhs* x3810@lhs*) (if (= x37a9@lev '0) ((lambda (x3814@g*) (values (append (map (lambda (x3816@g) (cons x3816@g '(...))) x3814@g*) x3810@lhs*) (append x37fe@p* x380f@rhs*) (append (apply append (map (lambda (x3818@g) (cons x3818@g '(...))) x3814@g*)) x380e@q))) (map (lambda (x381a@x) (gensym)) x37fe@p*)) (call-with-values (lambda () (x378d@quasi x37fe@p* (- x37a9@lev '1))) (lambda (x3822@x381d x3823@x381f x3824@x3821) ((lambda (x3828@p* x3829@rhs2* x382a@lhs2*) (values (append x382a@lhs2* x3810@lhs*) (append x3829@rhs2* x380f@rhs*) (cons (cons 'unsyntax-splicing x3828@p*) x380e@q))) x3824@x3821 x3823@x381f x3822@x381d))))) x380a@x3807 x3809@x3805 x3808@x3803)))) x37fc@ls/false) ((lambda (x382e@t) ((lambda (x3830@ls/false) (if (and x3830@ls/false (apply (lambda () (= x37a9@lev '0)) x3830@ls/false)) (apply (lambda () (x2fe3@syntax-violation '#f '"incorrect use of unsyntax-splicing" x37a8@p)) x3830@ls/false) ((lambda (x3832@t) ((lambda (x3834@ls/false) (if x3834@ls/false (apply (lambda (x3836@p) (call-with-values (lambda () (x378d@quasi x3836@p (+ x37a9@lev '1))) (lambda (x383e@x3839 x383f@x383b x3840@x383d) ((lambda (x3844@p x3845@rhs* x3846@lhs*) (values x3846@lhs* x3845@rhs* (list 'quasisyntax x3844@p))) x3840@x383d x383f@x383b x383e@x3839)))) x3834@ls/false) ((lambda (x384a@t) ((lambda (x384c@ls/false) (if x384c@ls/false (apply (lambda (x384e@p x384f@q) (call-with-values (lambda () (x378d@quasi x384e@p x37a9@lev)) (lambda (x385e@x3853 x385f@x3855 x3860@x3857) (call-with-values (lambda () (x378d@quasi x384f@q x37a9@lev)) (lambda (x3864@x3859 x3865@x385b x3866@x385d) ((lambda (x386a@q x386b@rhs2* x386c@lhs2* x386d@p x386e@rhs* x386f@lhs*) (values (append x386c@lhs2* x386f@lhs*) (append x386b@rhs2* x386e@rhs*) (cons x386d@p x386a@q))) x3866@x385d x3865@x385b x3864@x3859 x3860@x3857 x385f@x3855 x385e@x3853)))))) x384c@ls/false) ((lambda (x3876@t) ((lambda (x3878@ls/false) (if x3878@ls/false (apply (lambda (x387a@x*) (call-with-values (lambda () (x378d@quasi x387a@x* x37a9@lev)) (lambda (x3882@x387d x3883@x387f x3884@x3881) ((lambda (x3888@x* x3889@rhs* x388a@lhs*) (values x388a@lhs* x3889@rhs* (list->vector x3888@x*))) x3884@x3881 x3883@x387f x3882@x387d)))) x3878@ls/false) ((lambda (x388e@t) ((lambda (x3890@ls/false) (if x3890@ls/false (apply (lambda () (values '() '() x37a8@p)) x3890@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x388e@t))) (x2efa@syntax-dispatch x388e@t '_))) x3876@t))) (x2efa@syntax-dispatch x3876@t '#(vector each-any)))) x384a@t))) (x2efa@syntax-dispatch x384a@t '(any . any)))) x3832@t))) (x2efa@syntax-dispatch x3832@t '(#(scheme-id quasisyntax) any)))) x382e@t))) (x2efa@syntax-dispatch x382e@t '#(scheme-id unsyntax-splicing)))) x37fa@t))) (x2efa@syntax-dispatch x37fa@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) x37ca@t))) (x2efa@syntax-dispatch x37ca@t '((#(scheme-id unsyntax) . each-any) . any)))) x37c6@t))) (x2efa@syntax-dispatch x37c6@t '#(scheme-id unsyntax)))) x37ac@t))) (x2efa@syntax-dispatch x37ac@t '(#(scheme-id unsyntax) any)))) x37a8@p))) (lambda (x378e@x) ((lambda (x3790@t) ((lambda (x3792@ls/false) (if x3792@ls/false (apply (lambda (x3794@e) (call-with-values (lambda () (x378d@quasi x3794@e '0)) (lambda (x379c@x3797 x379d@x3799 x379e@x379b) ((lambda (x37a2@v x37a3@rhs* x37a4@lhs*) (x2eb0@bless (list 'syntax-case (cons 'list x37a3@rhs*) '() (list x37a4@lhs* (list 'syntax x37a2@v))))) x379e@x379b x379d@x3799 x379c@x3797)))) x3792@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3790@t))) (x2efa@syntax-dispatch x3790@t '(_ any)))) x378e@x)))) '#f)))) (set! x2eec@define-struct-macro (lambda (x3892@stx) (x2fe3@syntax-violation '#f '"define-struct not supported" x3892@stx))) (set! x2eee@define-record-type-macro (lambda (x3894@x) ((lambda (x3897@id x3899@get-record-name x389b@get-record-constructor-name x389d@get-record-predicate-name x389f@get-clause x38a1@foo-rtd-code x38a3@parent-rtd-code x38a5@parent-rcd-code x38a7@foo-rcd-code x38a9@get-protocol-code x38ab@get-fields x38ad@get-mutator-indices x38af@get-mutators x38b1@get-accessors x38b3@enumerate x38b5@do-define-record x38b7@verify-clauses) (begin (set! x3897@id (lambda (x3a8a@ctxt . x3a8c@str*) (x2fe7@datum->syntax x3a8a@ctxt (string->symbol (apply string-append (map (lambda (x3a8e@x) (if (symbol? x3a8e@x) (symbol->string x3a8e@x) (if (string? x3a8e@x) x3a8e@x (assertion-violation 'define-record-type '"BUG")))) x3a8c@str*)))))) (set! x3899@get-record-name (lambda (x3a78@spec) ((lambda (x3a7a@t) ((lambda (x3a7c@ls/false) (if x3a7c@ls/false (apply (lambda (x3a7e@foo x3a7f@make-foo x3a80@foo?) x3a7e@foo) x3a7c@ls/false) ((lambda (x3a84@t) ((lambda (x3a86@ls/false) (if x3a86@ls/false (apply (lambda (x3a88@foo) x3a88@foo) x3a86@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a84@t))) (x2efa@syntax-dispatch x3a84@t 'any))) x3a7a@t))) (x2efa@syntax-dispatch x3a7a@t '(any any any)))) x3a78@spec))) (set! x389b@get-record-constructor-name (lambda (x3a64@spec) ((lambda (x3a66@t) ((lambda (x3a68@ls/false) (if x3a68@ls/false (apply (lambda (x3a6a@foo x3a6b@make-foo x3a6c@foo?) x3a6b@make-foo) x3a68@ls/false) ((lambda (x3a70@t) ((lambda (x3a72@ls/false) (if (and x3a72@ls/false (apply (lambda (x3a74@foo) (x2cef@id? x3a74@foo)) x3a72@ls/false)) (apply (lambda (x3a76@foo) (x3897@id x3a76@foo '"make-" (x2d05@stx->datum x3a76@foo))) x3a72@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a70@t))) (x2efa@syntax-dispatch x3a70@t 'any))) x3a66@t))) (x2efa@syntax-dispatch x3a66@t '(any any any)))) x3a64@spec))) (set! x389d@get-record-predicate-name (lambda (x3a50@spec) ((lambda (x3a52@t) ((lambda (x3a54@ls/false) (if x3a54@ls/false (apply (lambda (x3a56@foo x3a57@make-foo x3a58@foo?) x3a58@foo?) x3a54@ls/false) ((lambda (x3a5c@t) ((lambda (x3a5e@ls/false) (if (and x3a5e@ls/false (apply (lambda (x3a60@foo) (x2cef@id? x3a60@foo)) x3a5e@ls/false)) (apply (lambda (x3a62@foo) (x3897@id x3a62@foo (x2d05@stx->datum x3a62@foo) '"?")) x3a5e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a5c@t))) (x2efa@syntax-dispatch x3a5c@t 'any))) x3a52@t))) (x2efa@syntax-dispatch x3a52@t '(any any any)))) x3a50@spec))) (set! x389f@get-clause (lambda (x3a3e@id x3a3f@ls) ((lambda (x3a42@t) ((lambda (x3a44@ls/false) (if x3a44@ls/false (apply (lambda () '#f) x3a44@ls/false) ((lambda (x3a46@t) ((lambda (x3a48@ls/false) (if x3a48@ls/false (apply (lambda (x3a4a@x x3a4b@rest x3a4c@ls) (if (x2cf7@free-id=? (x2eb0@bless x3a3e@id) x3a4a@x) (cons x3a4a@x x3a4b@rest) (x389f@get-clause x3a3e@id x3a4c@ls))) x3a48@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a46@t))) (x2efa@syntax-dispatch x3a46@t '((any . any) . any)))) x3a42@t))) (x2efa@syntax-dispatch x3a42@t '()))) x3a3f@ls))) (set! x38a1@foo-rtd-code (lambda (x39ec@name x39ed@clause* x39ee@parent-rtd-code) ((lambda (x39f3@convert-field-spec*) (begin (set! x39f3@convert-field-spec* (lambda (x3a24@ls) (list->vector (map (lambda (x3a26@x) ((lambda (x3a28@t) ((lambda (x3a2a@ls/false) (if x3a2a@ls/false (apply (lambda (x3a2c@name x3a2d@rest) (list 'mutable x3a2c@name)) x3a2a@ls/false) ((lambda (x3a30@t) ((lambda (x3a32@ls/false) (if x3a32@ls/false (apply (lambda (x3a34@name x3a35@rest) (list 'immutable x3a34@name)) x3a32@ls/false) ((lambda (x3a38@t) ((lambda (x3a3a@ls/false) (if x3a3a@ls/false (apply (lambda (x3a3c@name) (list 'immutable x3a3c@name)) x3a3a@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a38@t))) (x2efa@syntax-dispatch x3a38@t 'any))) x3a30@t))) (x2efa@syntax-dispatch x3a30@t '(#(scheme-id immutable) any . any)))) x3a28@t))) (x2efa@syntax-dispatch x3a28@t '(#(scheme-id mutable) any . any)))) x3a26@x)) x3a24@ls)))) ((lambda (x39f4@uid-code x39f5@sealed? x39f6@opaque? x39f7@fields) (x2eb0@bless (list 'make-record-type-descriptor (list 'quote x39ec@name) x39ee@parent-rtd-code x39f4@uid-code x39f5@sealed? x39f6@opaque? x39f7@fields))) ((lambda (x39fc@t) ((lambda (x39fe@ls/false) (if x39fe@ls/false (apply (lambda () (list 'quote (gensym))) x39fe@ls/false) ((lambda (x3a00@t) ((lambda (x3a02@ls/false) (if x3a02@ls/false (apply (lambda (x3a04@uid) (list 'quote x3a04@uid)) x3a02@ls/false) ((lambda (x3a06@t) ((lambda (x3a08@ls/false) (if x3a08@ls/false (apply (lambda () '#f) x3a08@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a06@t))) (x2efa@syntax-dispatch x3a06@t '_))) x3a00@t))) (x2efa@syntax-dispatch x3a00@t '(_ any)))) x39fc@t))) (x2efa@syntax-dispatch x39fc@t '(_)))) (x389f@get-clause 'nongenerative x39ed@clause*)) ((lambda (x3a0a@t) ((lambda (x3a0c@ls/false) (if x3a0c@ls/false (apply (lambda () '#t) x3a0c@ls/false) ((lambda (x3a0e@t) ((lambda (x3a10@ls/false) (if x3a10@ls/false (apply (lambda () '#f) x3a10@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a0e@t))) (x2efa@syntax-dispatch x3a0e@t '_))) x3a0a@t))) (x2efa@syntax-dispatch x3a0a@t '(_ #(atom #t))))) (x389f@get-clause 'sealed x39ed@clause*)) ((lambda (x3a12@t) ((lambda (x3a14@ls/false) (if x3a14@ls/false (apply (lambda () '#t) x3a14@ls/false) ((lambda (x3a16@t) ((lambda (x3a18@ls/false) (if x3a18@ls/false (apply (lambda () '#f) x3a18@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a16@t))) (x2efa@syntax-dispatch x3a16@t '_))) x3a12@t))) (x2efa@syntax-dispatch x3a12@t '(_ #(atom #t))))) (x389f@get-clause 'opaque x39ed@clause*)) ((lambda (x3a1a@t) ((lambda (x3a1c@ls/false) (if x3a1c@ls/false (apply (lambda (x3a1e@field-spec*) (list 'quote (x39f3@convert-field-spec* x3a1e@field-spec*))) x3a1c@ls/false) ((lambda (x3a20@t) ((lambda (x3a22@ls/false) (if x3a22@ls/false (apply (lambda () ''#()) x3a22@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a20@t))) (x2efa@syntax-dispatch x3a20@t '_))) x3a1a@t))) (x2efa@syntax-dispatch x3a1a@t '(_ . each-any)))) (x389f@get-clause 'fields x39ed@clause*))))) '#f))) (set! x38a3@parent-rtd-code (lambda (x39d4@clause*) ((lambda (x39d6@t) ((lambda (x39d8@ls/false) (if x39d8@ls/false (apply (lambda (x39da@name) (list 'record-type-descriptor x39da@name)) x39d8@ls/false) ((lambda (x39dc@t) ((lambda (x39de@ls/false) (if x39de@ls/false (apply (lambda () ((lambda (x39e0@t) ((lambda (x39e2@ls/false) (if x39e2@ls/false (apply (lambda (x39e4@rtd x39e5@rcd) x39e4@rtd) x39e2@ls/false) ((lambda (x39e8@t) ((lambda (x39ea@ls/false) (if x39ea@ls/false (apply (lambda () '#f) x39ea@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x39e8@t))) (x2efa@syntax-dispatch x39e8@t '#(atom #f)))) x39e0@t))) (x2efa@syntax-dispatch x39e0@t '(_ any any)))) (x389f@get-clause 'parent-rtd x39d4@clause*))) x39de@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x39dc@t))) (x2efa@syntax-dispatch x39dc@t '#(atom #f)))) x39d6@t))) (x2efa@syntax-dispatch x39d6@t '(_ any)))) (x389f@get-clause 'parent x39d4@clause*)))) (set! x38a5@parent-rcd-code (lambda (x39bc@clause*) ((lambda (x39be@t) ((lambda (x39c0@ls/false) (if x39c0@ls/false (apply (lambda (x39c2@name) (list 'record-constructor-descriptor x39c2@name)) x39c0@ls/false) ((lambda (x39c4@t) ((lambda (x39c6@ls/false) (if x39c6@ls/false (apply (lambda () ((lambda (x39c8@t) ((lambda (x39ca@ls/false) (if x39ca@ls/false (apply (lambda (x39cc@rtd x39cd@rcd) x39cd@rcd) x39ca@ls/false) ((lambda (x39d0@t) ((lambda (x39d2@ls/false) (if x39d2@ls/false (apply (lambda () '#f) x39d2@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x39d0@t))) (x2efa@syntax-dispatch x39d0@t '#(atom #f)))) x39c8@t))) (x2efa@syntax-dispatch x39c8@t '(_ any any)))) (x389f@get-clause 'parent-rtd x39bc@clause*))) x39c6@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x39c4@t))) (x2efa@syntax-dispatch x39c4@t '#(atom #f)))) x39be@t))) (x2efa@syntax-dispatch x39be@t '(_ any)))) (x389f@get-clause 'parent x39bc@clause*)))) (set! x38a7@foo-rcd-code (lambda (x39b4@clause* x39b5@foo-rtd x39b6@protocol x39b7@parent-rcd-code) (list 'make-record-constructor-descriptor x39b5@foo-rtd x39b7@parent-rcd-code x39b6@protocol))) (set! x38a9@get-protocol-code (lambda (x39a8@clause*) ((lambda (x39aa@t) ((lambda (x39ac@ls/false) (if x39ac@ls/false (apply (lambda (x39ae@expr) x39ae@expr) x39ac@ls/false) ((lambda (x39b0@t) ((lambda (x39b2@ls/false) (if x39b2@ls/false (apply (lambda () '#f) x39b2@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x39b0@t))) (x2efa@syntax-dispatch x39b0@t '_))) x39aa@t))) (x2efa@syntax-dispatch x39aa@t '(_ any)))) (x389f@get-clause 'protocol x39a8@clause*)))) (set! x38ab@get-fields (lambda (x3996@clause*) ((lambda (x3998@t) ((lambda (x399a@ls/false) (if x399a@ls/false (apply (lambda () '()) x399a@ls/false) ((lambda (x399c@t) ((lambda (x399e@ls/false) (if x399e@ls/false (apply (lambda (x39a0@f*) x39a0@f*) x399e@ls/false) ((lambda (x39a2@t) ((lambda (x39a4@ls/false) (if x39a4@ls/false (apply (lambda (x39a6@rest) (x38ab@get-fields x39a6@rest)) x39a4@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x39a2@t))) (x2efa@syntax-dispatch x39a2@t '(_ . any)))) x399c@t))) (x2efa@syntax-dispatch x399c@t '((#(scheme-id fields) . each-any) . _)))) x3998@t))) (x2efa@syntax-dispatch x3998@t '()))) x3996@clause*))) (set! x38ad@get-mutator-indices (lambda (x397e@fields) ((letrec ((x3980@f (lambda (x3982@fields x3983@i) ((lambda (x3986@t) ((lambda (x3988@ls/false) (if x3988@ls/false (apply (lambda () '()) x3988@ls/false) ((lambda (x398a@t) ((lambda (x398c@ls/false) (if x398c@ls/false (apply (lambda (x398e@rest) (cons x3983@i (x3980@f x398e@rest (+ x3983@i '1)))) x398c@ls/false) ((lambda (x3990@t) ((lambda (x3992@ls/false) (if x3992@ls/false (apply (lambda (x3994@rest) (x3980@f x3994@rest (+ x3983@i '1))) x3992@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3990@t))) (x2efa@syntax-dispatch x3990@t '(_ . any)))) x398a@t))) (x2efa@syntax-dispatch x398a@t '((#(scheme-id mutable) . _) . any)))) x3986@t))) (x2efa@syntax-dispatch x3986@t '()))) x3982@fields)))) x3980@f) x397e@fields '0))) (set! x38af@get-mutators (lambda (x3954@foo x3955@fields) ((lambda (x3959@gen-name) (begin (set! x3959@gen-name (lambda (x397c@x) (x2fe7@datum->syntax x3954@foo (string->symbol (string-append (symbol->string (x2fe9@syntax->datum x3954@foo)) '"-" (symbol->string (x2fe9@syntax->datum x397c@x)) '"-set!"))))) ((letrec ((x395a@f (lambda (x395c@fields) ((lambda (x395e@t) ((lambda (x3960@ls/false) (if x3960@ls/false (apply (lambda () '()) x3960@ls/false) ((lambda (x3962@t) ((lambda (x3964@ls/false) (if x3964@ls/false (apply (lambda (x3966@name x3967@accessor x3968@mutator x3969@rest) (cons x3968@mutator (x395a@f x3969@rest))) x3964@ls/false) ((lambda (x396e@t) ((lambda (x3970@ls/false) (if x3970@ls/false (apply (lambda (x3972@name x3973@rest) (cons (x3959@gen-name x3972@name) (x395a@f x3973@rest))) x3970@ls/false) ((lambda (x3976@t) ((lambda (x3978@ls/false) (if x3978@ls/false (apply (lambda (x397a@rest) (x395a@f x397a@rest)) x3978@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3976@t))) (x2efa@syntax-dispatch x3976@t '(_ . any)))) x396e@t))) (x2efa@syntax-dispatch x396e@t '((#(scheme-id mutable) any) . any)))) x3962@t))) (x2efa@syntax-dispatch x3962@t '((#(scheme-id mutable) any any any) . any)))) x395e@t))) (x2efa@syntax-dispatch x395e@t '()))) x395c@fields)))) x395a@f) x3955@fields))) '#f))) (set! x38b1@get-accessors (lambda (x3910@foo x3911@fields) ((lambda (x3915@gen-name) (begin (set! x3915@gen-name (lambda (x3952@x) (x2fe7@datum->syntax x3910@foo (string->symbol (string-append (symbol->string (x2fe9@syntax->datum x3910@foo)) '"-" (symbol->string (x2fe9@syntax->datum x3952@x))))))) (map (lambda (x3916@field) ((lambda (x3918@t) ((lambda (x391a@ls/false) (if (and x391a@ls/false (apply (lambda (x391c@name x391d@accessor x391e@mutator) (x2cef@id? x391d@accessor)) x391a@ls/false)) (apply (lambda (x3922@name x3923@accessor x3924@mutator) x3923@accessor) x391a@ls/false) ((lambda (x3928@t) ((lambda (x392a@ls/false) (if (and x392a@ls/false (apply (lambda (x392c@name x392d@accessor) (x2cef@id? x392d@accessor)) x392a@ls/false)) (apply (lambda (x3930@name x3931@accessor) x3931@accessor) x392a@ls/false) ((lambda (x3934@t) ((lambda (x3936@ls/false) (if (and x3936@ls/false (apply (lambda (x3938@name) (x2cef@id? x3938@name)) x3936@ls/false)) (apply (lambda (x393a@name) (x3915@gen-name x393a@name)) x3936@ls/false) ((lambda (x393c@t) ((lambda (x393e@ls/false) (if (and x393e@ls/false (apply (lambda (x3940@name) (x2cef@id? x3940@name)) x393e@ls/false)) (apply (lambda (x3942@name) (x3915@gen-name x3942@name)) x393e@ls/false) ((lambda (x3944@t) ((lambda (x3946@ls/false) (if (and x3946@ls/false (apply (lambda (x3948@name) (x2cef@id? x3948@name)) x3946@ls/false)) (apply (lambda (x394a@name) (x3915@gen-name x394a@name)) x3946@ls/false) ((lambda (x394c@t) ((lambda (x394e@ls/false) (if x394e@ls/false (apply (lambda (x3950@others) (x2fe3@syntax-violation '#f '"invalid field spec" x3916@field)) x394e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x394c@t))) (x2efa@syntax-dispatch x394c@t 'any))) x3944@t))) (x2efa@syntax-dispatch x3944@t 'any))) x393c@t))) (x2efa@syntax-dispatch x393c@t '(#(scheme-id immutable) any)))) x3934@t))) (x2efa@syntax-dispatch x3934@t '(#(scheme-id mutable) any)))) x3928@t))) (x2efa@syntax-dispatch x3928@t '(#(scheme-id immutable) any any)))) x3918@t))) (x2efa@syntax-dispatch x3918@t '(#(scheme-id mutable) any any any)))) x3916@field)) x3911@fields))) '#f))) (set! x38b3@enumerate (lambda (x3908@ls) ((letrec ((x390a@f (lambda (x390c@ls x390d@i) (if (null? x390c@ls) '() (cons x390d@i (x390a@f (cdr x390c@ls) (+ x390d@i '1))))))) x390a@f) x3908@ls '0))) (set! x38b5@do-define-record (lambda (x38e0@namespec x38e1@clause*) ((lambda (x38e4@foo) ((lambda (x38e6@foo-rtd) ((lambda (x38e8@foo-rcd) ((lambda (x38ea@protocol) ((lambda (x38ec@make-foo) ((lambda (x38ee@fields) ((lambda (x38f0@idx*) ((lambda (x38f2@foo-x*) ((lambda (x38f4@set-foo-x!*) ((lambda (x38f6@set-foo-idx*) ((lambda (x38f8@foo?) ((lambda (x38fa@foo-rtd-code) ((lambda (x38fc@foo-rcd-code) ((lambda (x38fe@protocol-code) ((lambda () (x2eb0@bless (cons 'begin (cons (list 'define x38e6@foo-rtd x38fa@foo-rtd-code) (cons (list 'define x38ea@protocol x38fe@protocol-code) (cons (list 'define x38e8@foo-rcd x38fc@foo-rcd-code) (cons (list 'define-syntax x38e4@foo (list 'list ''$rtd (list 'syntax x38e6@foo-rtd) (list 'syntax x38e8@foo-rcd))) (cons (list 'define x38f8@foo? (list 'record-predicate x38e6@foo-rtd)) (cons (list 'define x38ec@make-foo (list 'record-constructor x38e8@foo-rcd)) (append (map (lambda (x3900@foo-x x3901@idx) (list 'define x3900@foo-x (list 'record-accessor x38e6@foo-rtd x3901@idx))) x38f2@foo-x* x38f0@idx*) (map (lambda (x3904@set-foo-x! x3905@idx) (list 'define x3904@set-foo-x! (list 'record-mutator x38e6@foo-rtd x3905@idx))) x38f4@set-foo-x!* x38f6@set-foo-idx*))))))))))))) (x38a9@get-protocol-code x38e1@clause*))) (x38a7@foo-rcd-code x38e1@clause* x38e6@foo-rtd x38ea@protocol (x38a5@parent-rcd-code x38e1@clause*)))) (x38a1@foo-rtd-code x38e4@foo x38e1@clause* (x38a3@parent-rtd-code x38e1@clause*)))) (x389d@get-record-predicate-name x38e0@namespec))) (x38ad@get-mutator-indices x38ee@fields))) (x38af@get-mutators x38e4@foo x38ee@fields))) (x38b1@get-accessors x38e4@foo x38ee@fields))) (x38b3@enumerate x38ee@fields))) (x38ab@get-fields x38e1@clause*))) (x389b@get-record-constructor-name x38e0@namespec))) (gensym))) (gensym))) (gensym))) (x3899@get-record-name x38e0@namespec)))) (set! x38b7@verify-clauses (lambda (x38c0@x x38c1@cls*) ((lambda (x38c5@valid-kwds x38c7@free-id-member?) (begin (set! x38c5@valid-kwds (map x2eb0@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! x38c7@free-id-member? (lambda (x38dc@x x38dd@ls) (and (pair? x38dd@ls) (or (x2cf7@free-id=? x38dc@x (car x38dd@ls)) (x38c7@free-id-member? x38dc@x (cdr x38dd@ls)))))) ((letrec ((x38c8@f (lambda (x38ca@cls* x38cb@seen*) (if (not (null? x38ca@cls*)) ((lambda (x38ce@t) ((lambda (x38d0@ls/false) (if x38d0@ls/false (apply (lambda (x38d2@kwd x38d3@rest) (if (or (not (x2cef@id? x38d2@kwd)) (not (x38c7@free-id-member? x38d2@kwd x38c5@valid-kwds))) (x2fe3@syntax-violation '#f '"not a valid define-record-type keyword" x38d2@kwd) (if (x2cfd@bound-id-member? x38d2@kwd x38cb@seen*) (x2fe3@syntax-violation '#f '"duplicate use of keyword " x38c0@x x38d2@kwd) (x38c8@f (cdr x38ca@cls*) (cons x38d2@kwd x38cb@seen*))))) x38d0@ls/false) ((lambda (x38d6@t) ((lambda (x38d8@ls/false) (if x38d8@ls/false (apply (lambda (x38da@cls) (x2fe3@syntax-violation '#f '"malformed define-record-type clause" x38da@cls)) x38d8@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x38d6@t))) (x2efa@syntax-dispatch x38d6@t 'any))) x38ce@t))) (x2efa@syntax-dispatch x38ce@t '(any . any)))) (car x38ca@cls*)) (void))))) x38c8@f) x38c1@cls* '()))) '#f '#f))) ((lambda (x38b8@t) ((lambda (x38ba@ls/false) (if x38ba@ls/false (apply (lambda (x38bc@namespec x38bd@clause*) (begin (x38b7@verify-clauses x3894@x x38bd@clause*) (x38b5@do-define-record x38bc@namespec x38bd@clause*))) x38ba@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x38b8@t))) (x2efa@syntax-dispatch x38b8@t '(_ any . each-any)))) x3894@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! x2ef0@define-condition-type-macro (lambda (x3a90@x) ((lambda (x3a93@mkname) (begin (set! x3a93@mkname (lambda (x3ac0@name x3ac1@suffix) (x2fe7@datum->syntax x3ac0@name (string->symbol (string-append (symbol->string (x2fe9@syntax->datum x3ac0@name)) x3ac1@suffix))))) ((lambda (x3a94@t) ((lambda (x3a96@ls/false) (if (and x3a96@ls/false (apply (lambda (x3a98@ctxt x3a99@name x3a9a@super x3a9b@constructor x3a9c@predicate x3a9d@field* x3a9e@accessor*) (and (x2cef@id? x3a99@name) (x2cef@id? x3a9a@super) (x2cef@id? x3a9b@constructor) (x2cef@id? x3a9c@predicate) (for-all x2cef@id? x3a9d@field*) (for-all x2cef@id? x3a9e@accessor*))) x3a96@ls/false)) (apply (lambda (x3aa6@ctxt x3aa7@name x3aa8@super x3aa9@constructor x3aaa@predicate x3aab@field* x3aac@accessor*) ((lambda (x3ab4@aux-accessor*) (x2eb0@bless (cons 'begin (cons (cons 'define-record-type (cons (list x3aa7@name x3aa9@constructor (gensym)) (cons (list 'parent x3aa8@super) (cons (cons 'fields (map (lambda (x3ab6@field x3ab7@aux) (list 'immutable x3ab6@field x3ab7@aux)) x3aab@field* x3ab4@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define x3aaa@predicate (list 'condition-predicate (list 'record-type-descriptor x3aa7@name))) (map (lambda (x3aba@accessor x3abb@aux) (list 'define x3aba@accessor (list 'condition-accessor (list 'record-type-descriptor x3aa7@name) x3abb@aux))) x3aac@accessor* x3ab4@aux-accessor*)))))) (map (lambda (x3abe@x) (gensym)) x3aac@accessor*))) x3a96@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3a94@t))) (x2efa@syntax-dispatch x3a94@t '(any any any any any . #(each (any any)))))) x3a90@x))) '#f))) (set! x2ef2@incorrect-usage-macro (lambda (x3ac4@e) (x2fe3@syntax-violation '#f '"incorrect usage of auxiliary keyword" x3ac4@e))) (set! x2ef4@parameterize-macro (lambda (x3ac6@e) ((lambda (x3ac8@t) ((lambda (x3aca@ls/false) (if x3aca@ls/false (apply (lambda (x3acc@b x3acd@b*) (x2eb0@bless (cons 'let (cons '() (cons x3acc@b x3acd@b*))))) x3aca@ls/false) ((lambda (x3ad0@t) ((lambda (x3ad2@ls/false) (if x3ad2@ls/false (apply (lambda (x3ad4@olhs* x3ad5@orhs* x3ad6@b x3ad7@b*) ((lambda (x3adc@lhs* x3add@rhs*) (x2eb0@bless (cons (list 'lambda (append x3adc@lhs* x3add@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (x3ae0@lhs x3ae1@rhs) (list 'let (list (list 't (list x3ae0@lhs))) (list x3ae0@lhs x3ae1@rhs) (cons 'set! (cons x3ae1@rhs '(t))))) x3adc@lhs* x3add@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons x3ad6@b x3ad7@b*))) '(swap)))))) (append x3ad4@olhs* x3ad5@orhs*)))) (x2fd1@generate-temporaries x3ad4@olhs*) (x2fd1@generate-temporaries x3ad5@orhs*))) x3ad2@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3ad0@t))) (x2efa@syntax-dispatch x3ad0@t '(_ #(each (any any)) any . each-any)))) x3ac8@t))) (x2efa@syntax-dispatch x3ac8@t '(_ () any . each-any)))) x3ac6@e))) (set! x2ef6@foreign-call-transformer (lambda (x3ae4@e x3ae5@r x3ae6@mr) ((lambda (x3aea@t) ((lambda (x3aec@ls/false) (if x3aec@ls/false (apply (lambda (x3aee@name x3aef@arg*) (cons 'foreign-call (cons (x2f1c@chi-expr x3aee@name x3ae5@r x3ae6@mr) (x2f18@chi-expr* x3aef@arg* x3ae5@r x3ae6@mr)))) x3aec@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3aea@t))) (x2efa@syntax-dispatch x3aea@t '(_ any . each-any)))) x3ae4@e))) (set! x2ef8@convert-pattern (lambda (x3af2@pattern x3af3@keys) ((lambda (x3af7@cvt* x3af9@cvt) (begin (set! x3af7@cvt* (lambda (x3b96@p* x3b97@n x3b98@ids) (if (null? x3b96@p*) (values '() x3b98@ids) (call-with-values (lambda () (x3af7@cvt* (cdr x3b96@p*) x3b97@n x3b98@ids)) (lambda (x3ba0@x3b9d x3ba1@x3b9f) ((lambda (x3ba4@ids x3ba5@y) (call-with-values (lambda () (x3af9@cvt (car x3b96@p*) x3b97@n x3ba4@ids)) (lambda (x3bac@x3ba9 x3bad@x3bab) ((lambda (x3bb0@ids x3bb1@x) (values (cons x3bb1@x x3ba5@y) x3bb0@ids)) x3bad@x3bab x3bac@x3ba9)))) x3ba1@x3b9f x3ba0@x3b9d)))))) (set! x3af9@cvt (lambda (x3afa@p x3afb@n x3afc@ids) ((lambda (x3b00@t) ((lambda (x3b02@ls/false) (if (and x3b02@ls/false (apply (lambda (x3b04@id) (x2cef@id? x3b04@id)) x3b02@ls/false)) (apply (lambda (x3b06@id) (if (x2cfd@bound-id-member? x3afa@p x3af3@keys) (values (vector 'free-id x3afa@p) x3afc@ids) (if (x2cf7@free-id=? x3afa@p (x2e84@scheme-stx '_)) (values '_ x3afc@ids) (values 'any (cons (cons x3afa@p x3afb@n) x3afc@ids))))) x3b02@ls/false) ((lambda (x3b08@t) ((lambda (x3b0a@ls/false) (if (and x3b0a@ls/false (apply (lambda (x3b0c@p x3b0d@dots) (x2efc@ellipsis? x3b0d@dots)) x3b0a@ls/false)) (apply (lambda (x3b10@p x3b11@dots) (call-with-values (lambda () (x3af9@cvt x3b10@p (+ x3afb@n '1) x3afc@ids)) (lambda (x3b18@x3b15 x3b19@x3b17) ((lambda (x3b1c@ids x3b1d@p) (values (if (eq? x3b1d@p 'any) 'each-any (vector 'each x3b1d@p)) x3b1c@ids)) x3b19@x3b17 x3b18@x3b15)))) x3b0a@ls/false) ((lambda (x3b20@t) ((lambda (x3b22@ls/false) (if (and x3b22@ls/false (apply (lambda (x3b24@x x3b25@dots x3b26@ys x3b27@z) (x2efc@ellipsis? x3b25@dots)) x3b22@ls/false)) (apply (lambda (x3b2c@x x3b2d@dots x3b2e@ys x3b2f@z) (call-with-values (lambda () (x3af9@cvt x3b2f@z x3afb@n x3afc@ids)) (lambda (x3b38@x3b35 x3b39@x3b37) ((lambda (x3b3c@ids x3b3d@z) (call-with-values (lambda () (x3af7@cvt* x3b2e@ys x3afb@n x3b3c@ids)) (lambda (x3b44@x3b41 x3b45@x3b43) ((lambda (x3b48@ids x3b49@ys) (call-with-values (lambda () (x3af9@cvt x3b2c@x (+ x3afb@n '1) x3b48@ids)) (lambda (x3b50@x3b4d x3b51@x3b4f) ((lambda (x3b54@ids x3b55@x) (values (vector 'each+ x3b55@x (reverse x3b49@ys) x3b3d@z) x3b54@ids)) x3b51@x3b4f x3b50@x3b4d)))) x3b45@x3b43 x3b44@x3b41)))) x3b39@x3b37 x3b38@x3b35)))) x3b22@ls/false) ((lambda (x3b58@t) ((lambda (x3b5a@ls/false) (if x3b5a@ls/false (apply (lambda (x3b5c@x x3b5d@y) (call-with-values (lambda () (x3af9@cvt x3b5d@y x3afb@n x3afc@ids)) (lambda (x3b64@x3b61 x3b65@x3b63) ((lambda (x3b68@ids x3b69@y) (call-with-values (lambda () (x3af9@cvt x3b5c@x x3afb@n x3b68@ids)) (lambda (x3b70@x3b6d x3b71@x3b6f) ((lambda (x3b74@ids x3b75@x) (values (cons x3b75@x x3b69@y) x3b74@ids)) x3b71@x3b6f x3b70@x3b6d)))) x3b65@x3b63 x3b64@x3b61)))) x3b5a@ls/false) ((lambda (x3b78@t) ((lambda (x3b7a@ls/false) (if x3b7a@ls/false (apply (lambda () (values '() x3afc@ids)) x3b7a@ls/false) ((lambda (x3b7c@t) ((lambda (x3b7e@ls/false) (if (and x3b7e@ls/false (apply (lambda (x3b80@p) (not (x2cb7@stx? x3b80@p))) x3b7e@ls/false)) (apply (lambda (x3b82@p) (call-with-values (lambda () (x3af9@cvt x3b82@p x3afb@n x3afc@ids)) (lambda (x3b88@x3b85 x3b89@x3b87) ((lambda (x3b8c@ids x3b8d@p) (values (vector 'vector x3b8d@p) x3b8c@ids)) x3b89@x3b87 x3b88@x3b85)))) x3b7e@ls/false) ((lambda (x3b90@t) ((lambda (x3b92@ls/false) (if x3b92@ls/false (apply (lambda (x3b94@datum) (values (vector 'atom (x2d05@stx->datum x3b94@datum)) x3afc@ids)) x3b92@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3b90@t))) (x2efa@syntax-dispatch x3b90@t 'any))) x3b7c@t))) (x2efa@syntax-dispatch x3b7c@t '#(vector each-any)))) x3b78@t))) (x2efa@syntax-dispatch x3b78@t '()))) x3b58@t))) (x2efa@syntax-dispatch x3b58@t '(any . any)))) x3b20@t))) (x2efa@syntax-dispatch x3b20@t '(any any . #(each+ any () any))))) x3b08@t))) (x2efa@syntax-dispatch x3b08@t '(any any)))) x3b00@t))) (x2efa@syntax-dispatch x3b00@t 'any))) x3afa@p))) (x3af9@cvt x3af2@pattern '0 '()))) '#f '#f))) (set! x2efa@syntax-dispatch ((lambda () ((lambda (x3bb5@stx^ x3bb7@match-each x3bb9@match-each+ x3bbb@match-each-any x3bbd@match-empty x3bbf@combine x3bc1@match* x3bc3@match) (begin (set! x3bb5@stx^ (lambda (x3c90@e x3c91@m* x3c92@s* x3c93@ae*) (if (and (null? x3c91@m*) (null? x3c92@s*) (null? x3c93@ae*)) x3c90@e (x2cd7@mkstx x3c90@e x3c91@m* x3c92@s* x3c93@ae*)))) (set! x3bb7@match-each (lambda (x3c70@e x3c71@p x3c72@m* x3c73@s* x3c74@ae*) (if (pair? x3c70@e) ((lambda (x3c7a@first) (and x3c7a@first ((lambda (x3c7c@rest) (and x3c7c@rest (cons x3c7a@first x3c7c@rest))) (x3bb7@match-each (cdr x3c70@e) x3c71@p x3c72@m* x3c73@s* x3c74@ae*)))) (x3bc3@match (car x3c70@e) x3c71@p x3c72@m* x3c73@s* x3c74@ae* '())) (if (null? x3c70@e) '() (if (x2cb7@stx? x3c70@e) (and (not (x2c6d@top-marked? x3c72@m*)) (call-with-values (lambda () (x2cd5@join-wraps x3c72@m* x3c73@s* x3c74@ae* x3c70@e)) (lambda (x3c84@x3c7f x3c85@x3c81 x3c86@x3c83) ((lambda (x3c8a@ae* x3c8b@s* x3c8c@m*) (x3bb7@match-each (x2cbb@stx-expr x3c70@e) x3c71@p x3c8c@m* x3c8b@s* x3c8a@ae*)) x3c86@x3c83 x3c85@x3c81 x3c84@x3c7f)))) (if (x288e@x27ad@annotation? x3c70@e) (x3bb7@match-each (x2890@x27b1@annotation-expression x3c70@e) x3c71@p x3c72@m* x3c73@s* x3c74@ae*) '#f)))))) (set! x3bb9@match-each+ (lambda (x3c30@e x3c31@x-pat x3c32@y-pat x3c33@z-pat x3c34@m* x3c35@s* x3c36@ae* x3c37@r) ((letrec ((x3c40@f (lambda (x3c42@e x3c43@m* x3c44@s* x3c45@ae*) (if (pair? x3c42@e) (call-with-values (lambda () (x3c40@f (cdr x3c42@e) x3c43@m* x3c44@s* x3c45@ae*)) (lambda (x3c50@x3c4b x3c51@x3c4d x3c52@x3c4f) ((lambda (x3c56@r x3c57@y-pat x3c58@xr*) (if x3c56@r (if (null? x3c57@y-pat) ((lambda (x3c5c@xr) (if x3c5c@xr (values (cons x3c5c@xr x3c58@xr*) x3c57@y-pat x3c56@r) (values '#f '#f '#f))) (x3bc3@match (car x3c42@e) x3c31@x-pat x3c43@m* x3c44@s* x3c45@ae* '())) (values '() (cdr x3c57@y-pat) (x3bc3@match (car x3c42@e) (car x3c57@y-pat) x3c43@m* x3c44@s* x3c45@ae* x3c56@r))) (values '#f '#f '#f))) x3c52@x3c4f x3c51@x3c4d x3c50@x3c4b))) (if (x2cb7@stx? x3c42@e) (if (x2c6d@top-marked? x3c43@m*) (values '() x3c32@y-pat (x3bc3@match x3c42@e x3c33@z-pat x3c43@m* x3c44@s* x3c45@ae* x3c37@r)) (call-with-values (lambda () (x2cd5@join-wraps x3c43@m* x3c44@s* x3c45@ae* x3c42@e)) (lambda (x3c64@x3c5f x3c65@x3c61 x3c66@x3c63) ((lambda (x3c6a@ae* x3c6b@s* x3c6c@m*) (x3c40@f (x2cbb@stx-expr x3c42@e) x3c6c@m* x3c6b@s* x3c6a@ae*)) x3c66@x3c63 x3c65@x3c61 x3c64@x3c5f)))) (if (x288e@x27ad@annotation? x3c42@e) (x3c40@f (x2890@x27b1@annotation-expression x3c42@e) x3c43@m* x3c44@s* x3c45@ae*) (values '() x3c32@y-pat (x3bc3@match x3c42@e x3c33@z-pat x3c43@m* x3c44@s* x3c45@ae* x3c37@r)))))))) x3c40@f) x3c30@e x3c34@m* x3c35@s* x3c36@ae*))) (set! x3bbb@match-each-any (lambda (x3c14@e x3c15@m* x3c16@s* x3c17@ae*) (if (pair? x3c14@e) ((lambda (x3c1c@l) (and x3c1c@l (cons (x3bb5@stx^ (car x3c14@e) x3c15@m* x3c16@s* x3c17@ae*) x3c1c@l))) (x3bbb@match-each-any (cdr x3c14@e) x3c15@m* x3c16@s* x3c17@ae*)) (if (null? x3c14@e) '() (if (x2cb7@stx? x3c14@e) (and (not (x2c6d@top-marked? x3c15@m*)) (call-with-values (lambda () (x2cd5@join-wraps x3c15@m* x3c16@s* x3c17@ae* x3c14@e)) (lambda (x3c24@x3c1f x3c25@x3c21 x3c26@x3c23) ((lambda (x3c2a@ae* x3c2b@s* x3c2c@m*) (x3bbb@match-each-any (x2cbb@stx-expr x3c14@e) x3c2c@m* x3c2b@s* x3c2a@ae*)) x3c26@x3c23 x3c25@x3c21 x3c24@x3c1f)))) (if (x288e@x27ad@annotation? x3c14@e) (x3bbb@match-each-any (x2890@x27b1@annotation-expression x3c14@e) x3c15@m* x3c16@s* x3c17@ae*) '#f)))))) (set! x3bbd@match-empty (lambda (x3c0e@p x3c0f@r) (if (null? x3c0e@p) x3c0f@r (if (eq? x3c0e@p '_) x3c0f@r (if (eq? x3c0e@p 'any) (cons '() x3c0f@r) (if (pair? x3c0e@p) (x3bbd@match-empty (car x3c0e@p) (x3bbd@match-empty (cdr x3c0e@p) x3c0f@r)) (if (eq? x3c0e@p 'each-any) (cons '() x3c0f@r) ((lambda (x3c12@t) (if (memv x3c12@t '(each)) (x3bbd@match-empty (vector-ref x3c0e@p '1) x3c0f@r) (if (memv x3c12@t '(each+)) (x3bbd@match-empty (vector-ref x3c0e@p '1) (x3bbd@match-empty (reverse (vector-ref x3c0e@p '2)) (x3bbd@match-empty (vector-ref x3c0e@p '3) x3c0f@r))) (if (memv x3c12@t '(free-id atom)) x3c0f@r (if (memv x3c12@t '(scheme-id atom)) x3c0f@r (if (memv x3c12@t '(vector)) (x3bbd@match-empty (vector-ref x3c0e@p '1) x3c0f@r) (assertion-violation 'syntax-dispatch '"invalid pattern" x3c0e@p))))))) (vector-ref x3c0e@p '0))))))))) (set! x3bbf@combine (lambda (x3c0a@r* x3c0b@r) (if (null? (car x3c0a@r*)) x3c0b@r (cons (map car x3c0a@r*) (x3bbf@combine (map cdr x3c0a@r*) x3c0b@r))))) (set! x3bc1@match* (lambda (x3be6@e x3be7@p x3be8@m* x3be9@s* x3bea@ae* x3beb@r) (if (null? x3be7@p) (and (null? x3be6@e) x3beb@r) (if (pair? x3be7@p) (and (pair? x3be6@e) (x3bc3@match (car x3be6@e) (car x3be7@p) x3be8@m* x3be9@s* x3bea@ae* (x3bc3@match (cdr x3be6@e) (cdr x3be7@p) x3be8@m* x3be9@s* x3bea@ae* x3beb@r))) (if (eq? x3be7@p 'each-any) ((lambda (x3bf2@l) (and x3bf2@l (cons x3bf2@l x3beb@r))) (x3bbb@match-each-any x3be6@e x3be8@m* x3be9@s* x3bea@ae*)) ((lambda (x3bf4@t) (if (memv x3bf4@t '(each)) (if (null? x3be6@e) (x3bbd@match-empty (vector-ref x3be7@p '1) x3beb@r) ((lambda (x3bf6@r*) (and x3bf6@r* (x3bbf@combine x3bf6@r* x3beb@r))) (x3bb7@match-each x3be6@e (vector-ref x3be7@p '1) x3be8@m* x3be9@s* x3bea@ae*))) (if (memv x3bf4@t '(free-id)) (and (symbol? x3be6@e) (x2c6d@top-marked? x3be8@m*) (x2cf7@free-id=? (x3bb5@stx^ x3be6@e x3be8@m* x3be9@s* x3bea@ae*) (vector-ref x3be7@p '1)) x3beb@r) (if (memv x3bf4@t '(scheme-id)) (and (symbol? x3be6@e) (x2c6d@top-marked? x3be8@m*) (x2cf7@free-id=? (x3bb5@stx^ x3be6@e x3be8@m* x3be9@s* x3bea@ae*) (x2e84@scheme-stx (vector-ref x3be7@p '1))) x3beb@r) (if (memv x3bf4@t '(each+)) (call-with-values (lambda () (x3bb9@match-each+ x3be6@e (vector-ref x3be7@p '1) (vector-ref x3be7@p '2) (vector-ref x3be7@p '3) x3be8@m* x3be9@s* x3bea@ae* x3beb@r)) (lambda (x3bfe@x3bf9 x3bff@x3bfb x3c00@x3bfd) ((lambda (x3c04@r x3c05@y-pat x3c06@xr*) (and x3c04@r (null? x3c05@y-pat) (if (null? x3c06@xr*) (x3bbd@match-empty (vector-ref x3be7@p '1) x3c04@r) (x3bbf@combine x3c06@xr* x3c04@r)))) x3c00@x3bfd x3bff@x3bfb x3bfe@x3bf9))) (if (memv x3bf4@t '(atom)) (and (fast-equal? (vector-ref x3be7@p '1) (x2d03@strip x3be6@e x3be8@m*)) x3beb@r) (if (memv x3bf4@t '(vector)) (and (vector? x3be6@e) (x3bc3@match (vector->list x3be6@e) (vector-ref x3be7@p '1) x3be8@m* x3be9@s* x3bea@ae* x3beb@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" x3be7@p)))))))) (vector-ref x3be7@p '0))))))) (set! x3bc3@match (lambda (x3bc8@e x3bc9@p x3bca@m* x3bcb@s* x3bcc@ae* x3bcd@r) (if (not x3bcd@r) '#f (if (eq? x3bc9@p '_) x3bcd@r (if (eq? x3bc9@p 'any) (cons (x3bb5@stx^ x3bc8@e x3bca@m* x3bcb@s* x3bcc@ae*) x3bcd@r) (if (x2cb7@stx? x3bc8@e) (and (not (x2c6d@top-marked? x3bca@m*)) (call-with-values (lambda () (x2cd5@join-wraps x3bca@m* x3bcb@s* x3bcc@ae* x3bc8@e)) (lambda (x3bda@x3bd5 x3bdb@x3bd7 x3bdc@x3bd9) ((lambda (x3be0@ae* x3be1@s* x3be2@m*) (x3bc3@match (x2cbb@stx-expr x3bc8@e) x3bc9@p x3be2@m* x3be1@s* x3be0@ae* x3bcd@r)) x3bdc@x3bd9 x3bdb@x3bd7 x3bda@x3bd5)))) (if (x288e@x27ad@annotation? x3bc8@e) (x3bc3@match (x2890@x27b1@annotation-expression x3bc8@e) x3bc9@p x3bca@m* x3bcb@s* x3bcc@ae* x3bcd@r) (x3bc1@match* x3bc8@e x3bc9@p x3bca@m* x3bcb@s* x3bcc@ae* x3bcd@r)))))))) (lambda (x3bc4@e x3bc5@p) (x3bc3@match x3bc4@e x3bc5@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! x2efc@ellipsis? (lambda (x3c98@x) (and (x2cef@id? x3c98@x) (x2cf7@free-id=? x3c98@x (x2e84@scheme-stx '...))))) (set! x2efe@underscore? (lambda (x3c9a@x) (and (x2cef@id? x3c9a@x) (x2cf7@free-id=? x3c9a@x (x2e84@scheme-stx '_))))) (set! x2f00@verify-literals (lambda (x3c9c@lits x3c9d@expr) (for-each (lambda (x3ca0@x) (if (or (not (x2cef@id? x3ca0@x)) (x2efc@ellipsis? x3ca0@x) (x2efe@underscore? x3ca0@x)) (x2fe3@syntax-violation '#f '"invalid literal" x3c9d@expr x3ca0@x) (void))) x3c9c@lits))) (set! x2f02@syntax-case-transformer ((lambda () ((lambda (x3ca3@build-dispatch-call x3ca5@invalid-ids-error x3ca7@gen-clause x3ca9@gen-syntax-case) (begin (set! x3ca3@build-dispatch-call (lambda (x3d14@pvars x3d15@expr x3d16@y x3d17@r x3d18@mr) ((lambda (x3d1e@ids x3d1f@levels) ((lambda (x3d22@labels x3d23@new-vars) ((lambda (x3d26@body) (list '(primitive apply) (x2c4b@x2b8b@build-lambda '#f x3d23@new-vars x3d26@body) x3d16@y)) (x2f1c@chi-expr (x2cdb@add-subst (x2caa@make-full-rib x3d1e@ids x3d22@labels) x3d15@expr) (append (map (lambda (x3d28@label x3d29@var x3d2a@level) (cons x3d28@label (x2d0f@make-binding 'syntax (cons x3d29@var x3d2a@level)))) x3d22@labels x3d23@new-vars (map cdr x3d14@pvars)) x3d17@r) x3d18@mr))) (map x2c73@gen-label x3d1e@ids) (map x2c6f@gen-lexical x3d1e@ids))) (map car x3d14@pvars) (map cdr x3d14@pvars)))) (set! x3ca5@invalid-ids-error (lambda (x3d08@id* x3d09@e x3d0a@class) ((letrec ((x3d0e@find (lambda (x3d10@id* x3d11@ok*) (if (null? x3d10@id*) (x2fe3@syntax-violation '#f '"invalid syntax" x3d09@e) (if (x2cef@id? (car x3d10@id*)) (if (x2cfd@bound-id-member? (car x3d10@id*) x3d11@ok*) (x2fdf@syntax-error (car x3d10@id*) '"duplicate " x3d0a@class) (x3d0e@find (cdr x3d10@id*) (cons (car x3d10@id*) x3d11@ok*))) (x2fdf@syntax-error (car x3d10@id*) '"invalid " x3d0a@class)))))) x3d0e@find) x3d08@id* '()))) (set! x3ca7@gen-clause (lambda (x3ce0@x x3ce1@keys x3ce2@clauses x3ce3@r x3ce4@mr x3ce5@pat x3ce6@fender x3ce7@expr) (call-with-values (lambda () (x2ef8@convert-pattern x3ce5@pat x3ce1@keys)) (lambda (x3cf4@x3cf1 x3cf5@x3cf3) ((lambda (x3cf8@pvars x3cf9@p) (if (not (x2cfb@distinct-bound-ids? (map car x3cf8@pvars))) (x3ca5@invalid-ids-error (map car x3cf8@pvars) x3ce5@pat '"pattern variable") (if (not (for-all (lambda (x3cfc@x) (not (x2efc@ellipsis? (car x3cfc@x)))) x3cf8@pvars)) (x2fe3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" x3ce5@pat) ((lambda (x3cfe@y) ((lambda (x3d00@test) ((lambda (x3d02@conseq) ((lambda (x3d04@altern) (list (x2c4b@x2b8b@build-lambda '#f (list x3cfe@y) (list 'if x3d00@test x3d02@conseq x3d04@altern)) (list '(primitive syntax-dispatch) x3ce0@x (list 'quote x3cf9@p)))) (x3ca9@gen-syntax-case x3ce0@x x3ce1@keys x3ce2@clauses x3ce3@r x3ce4@mr))) (x3ca3@build-dispatch-call x3cf8@pvars x3ce7@expr x3cfe@y x3ce3@r x3ce4@mr))) (if (eq? x3ce6@fender '#t) x3cfe@y ((lambda (x3d06@call) (list 'if x3cfe@y x3d06@call (list 'quote '#f))) (x3ca3@build-dispatch-call x3cf8@pvars x3ce6@fender x3cfe@y x3ce3@r x3ce4@mr))))) (x2c6f@gen-lexical 'tmp))))) x3cf5@x3cf3 x3cf4@x3cf1))))) (set! x3ca9@gen-syntax-case (lambda (x3cbe@x x3cbf@keys x3cc0@clauses x3cc1@r x3cc2@mr) (if (null? x3cc0@clauses) (list '(primitive syntax-error) x3cbe@x) ((lambda (x3cc8@t) ((lambda (x3cca@ls/false) (if x3cca@ls/false (apply (lambda (x3ccc@pat x3ccd@expr) (if (and (x2cef@id? x3ccc@pat) (not (x2cfd@bound-id-member? x3ccc@pat x3cbf@keys)) (not (x2efc@ellipsis? x3ccc@pat))) (if (x2cf7@free-id=? x3ccc@pat (x2e84@scheme-stx '_)) (x2f1c@chi-expr x3ccd@expr x3cc1@r x3cc2@mr) ((lambda (x3cd0@lab x3cd1@lex) ((lambda (x3cd4@body) (list (x2c4b@x2b8b@build-lambda '#f (list x3cd1@lex) x3cd4@body) x3cbe@x)) (x2f1c@chi-expr (x2cdb@add-subst (x2caa@make-full-rib (list x3ccc@pat) (list x3cd0@lab)) x3ccd@expr) (cons (cons x3cd0@lab (x2d0f@make-binding 'syntax (cons x3cd1@lex '0))) x3cc1@r) x3cc2@mr))) (x2c73@gen-label x3ccc@pat) (x2c6f@gen-lexical x3ccc@pat))) (x3ca7@gen-clause x3cbe@x x3cbf@keys (cdr x3cc0@clauses) x3cc1@r x3cc2@mr x3ccc@pat '#t x3ccd@expr))) x3cca@ls/false) ((lambda (x3cd6@t) ((lambda (x3cd8@ls/false) (if x3cd8@ls/false (apply (lambda (x3cda@pat x3cdb@fender x3cdc@expr) (x3ca7@gen-clause x3cbe@x x3cbf@keys (cdr x3cc0@clauses) x3cc1@r x3cc2@mr x3cda@pat x3cdb@fender x3cdc@expr)) x3cd8@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3cd6@t))) (x2efa@syntax-dispatch x3cd6@t '(any any any)))) x3cc8@t))) (x2efa@syntax-dispatch x3cc8@t '(any any)))) (car x3cc0@clauses))))) (lambda (x3caa@e x3cab@r x3cac@mr) ((lambda (x3cb0@t) ((lambda (x3cb2@ls/false) (if x3cb2@ls/false (apply (lambda (x3cb4@expr x3cb5@keys x3cb6@clauses) (begin (x2f00@verify-literals x3cb5@keys x3caa@e) ((lambda (x3cba@x) ((lambda (x3cbc@body) (list (x2c4b@x2b8b@build-lambda '#f (list x3cba@x) x3cbc@body) (x2f1c@chi-expr x3cb4@expr x3cab@r x3cac@mr))) (x3ca9@gen-syntax-case x3cba@x x3cb5@keys x3cb6@clauses x3cab@r x3cac@mr))) (x2c6f@gen-lexical 'tmp)))) x3cb2@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3cb0@t))) (x2efa@syntax-dispatch x3cb0@t '(_ any each-any . each-any)))) x3caa@e)))) '#f '#f '#f '#f)))) (set! x2f04@ellipsis-map (lambda (x3d2e@proc x3d2f@ls . x3d32@ls*) ((lambda (x3d35@who) (begin (set! x3d35@who '...) (begin (if (not (list? x3d2f@ls)) (assertion-violation x3d35@who '"not a list" x3d2f@ls) (void)) (if (not (null? x3d32@ls*)) ((lambda (x3d36@n) (for-each (lambda (x3d38@x) (begin (if (not (list? x3d38@x)) (assertion-violation x3d35@who '"not a list" x3d38@x) (void)) (if (not (= (length x3d38@x) x3d36@n)) (assertion-violation x3d35@who '"length mismatch" x3d2f@ls x3d38@x) (void)))) x3d32@ls*)) (length x3d2f@ls)) (void)) (apply map x3d2e@proc x3d2f@ls x3d32@ls*)))) '#f))) (set! x2f06@syntax-transformer ((lambda () ((lambda (x3d3b@gen-syntax x3d3d@gen-ref x3d3f@gen-append x3d41@gen-mappend x3d43@gen-map x3d45@gen-cons x3d47@gen-vector x3d49@regen) (begin (set! x3d3b@gen-syntax (lambda (x3db2@src x3db3@e x3db4@r x3db5@maps x3db6@ellipsis? x3db7@vec?) ((lambda (x3dbe@t) ((lambda (x3dc0@ls/false) (if (and x3dc0@ls/false (apply (lambda (x3dc2@dots) (x3db6@ellipsis? x3dc2@dots)) x3dc0@ls/false)) (apply (lambda (x3dc4@dots) (x2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" x3db2@src)) x3dc0@ls/false) ((lambda (x3dc6@t) ((lambda (x3dc8@ls/false) (if (and x3dc8@ls/false (apply (lambda (x3dca@id) (x2cef@id? x3dca@id)) x3dc8@ls/false)) (apply (lambda (x3dcc@id) ((lambda (x3dce@label) ((lambda (x3dd0@b) ((lambda () (if (eq? (x2d11@binding-type x3dd0@b) 'syntax) (call-with-values (lambda () ((lambda (x3dd6@var.lev) (x3d3d@gen-ref x3db2@src (car x3dd6@var.lev) (cdr x3dd6@var.lev) x3db5@maps)) (x2d13@binding-value x3dd0@b))) (lambda (x3dd8@x3dd3 x3dd9@x3dd5) ((lambda (x3ddc@maps x3ddd@var) (values (list 'ref x3ddd@var) x3ddc@maps)) x3dd9@x3dd5 x3dd8@x3dd3))) (values (list 'quote x3db3@e) x3db5@maps))))) (x2d0d@label->binding x3dce@label x3db4@r))) (x2d09@id->label x3db3@e))) x3dc8@ls/false) ((lambda (x3de0@t) ((lambda (x3de2@ls/false) (if (and x3de2@ls/false (apply (lambda (x3de4@dots x3de5@e) (x3db6@ellipsis? x3de4@dots)) x3de2@ls/false)) (apply (lambda (x3de8@dots x3de9@e) (if x3db7@vec? (x2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" x3db2@src) (x3d3b@gen-syntax x3db2@src x3de9@e x3db4@r x3db5@maps (lambda (x3dec@x) '#f) '#f))) x3de2@ls/false) ((lambda (x3dee@t) ((lambda (x3df0@ls/false) (if (and x3df0@ls/false (apply (lambda (x3df2@x x3df3@dots x3df4@y) (x3db6@ellipsis? x3df3@dots)) x3df0@ls/false)) (apply (lambda (x3df8@x x3df9@dots x3dfa@y) ((letrec ((x3dfe@f (lambda (x3e00@y x3e01@k) ((lambda (x3e04@t) ((lambda (x3e06@ls/false) (if x3e06@ls/false (apply (lambda () (x3e01@k x3db5@maps)) x3e06@ls/false) ((lambda (x3e08@t) ((lambda (x3e0a@ls/false) (if (and x3e0a@ls/false (apply (lambda (x3e0c@dots x3e0d@y) (x3db6@ellipsis? x3e0c@dots)) x3e0a@ls/false)) (apply (lambda (x3e10@dots x3e11@y) (x3dfe@f x3e11@y (lambda (x3e14@maps) (call-with-values (lambda () (x3e01@k (cons '() x3e14@maps))) (lambda (x3e1a@x3e17 x3e1b@x3e19) ((lambda (x3e1e@maps x3e1f@x) (if (null? (car x3e1e@maps)) (x2fe3@syntax-violation '#f '"extra ellipsis in syntax form" x3db2@src) (values (x3d41@gen-mappend x3e1f@x (car x3e1e@maps)) (cdr x3e1e@maps)))) x3e1b@x3e19 x3e1a@x3e17)))))) x3e0a@ls/false) ((lambda (x3e22@t) ((lambda (x3e24@ls/false) (if x3e24@ls/false (apply (lambda () (call-with-values (lambda () (x3d3b@gen-syntax x3db2@src x3e00@y x3db4@r x3db5@maps x3db6@ellipsis? x3db7@vec?)) (lambda (x3e2a@x3e27 x3e2b@x3e29) ((lambda (x3e2e@maps x3e2f@y) (call-with-values (lambda () (x3e01@k x3e2e@maps)) (lambda (x3e36@x3e33 x3e37@x3e35) ((lambda (x3e3a@maps x3e3b@x) (values (x3d3f@gen-append x3e3b@x x3e2f@y) x3e3a@maps)) x3e37@x3e35 x3e36@x3e33)))) x3e2b@x3e29 x3e2a@x3e27)))) x3e24@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3e22@t))) (x2efa@syntax-dispatch x3e22@t '_))) x3e08@t))) (x2efa@syntax-dispatch x3e08@t '(any . any)))) x3e04@t))) (x2efa@syntax-dispatch x3e04@t '()))) x3e00@y)))) x3dfe@f) x3dfa@y (lambda (x3e3e@maps) (call-with-values (lambda () (x3d3b@gen-syntax x3db2@src x3df8@x x3db4@r (cons '() x3e3e@maps) x3db6@ellipsis? '#f)) (lambda (x3e44@x3e41 x3e45@x3e43) ((lambda (x3e48@maps x3e49@x) (if (null? (car x3e48@maps)) (x2fe3@syntax-violation '#f '"extra ellipsis in syntax form" x3db2@src) (values (x3d43@gen-map x3e49@x (car x3e48@maps)) (cdr x3e48@maps)))) x3e45@x3e43 x3e44@x3e41)))))) x3df0@ls/false) ((lambda (x3e4c@t) ((lambda (x3e4e@ls/false) (if x3e4e@ls/false (apply (lambda (x3e50@x x3e51@y) (call-with-values (lambda () (x3d3b@gen-syntax x3db2@src x3e50@x x3db4@r x3db5@maps x3db6@ellipsis? '#f)) (lambda (x3e58@x3e55 x3e59@x3e57) ((lambda (x3e5c@maps x3e5d@xnew) (call-with-values (lambda () (x3d3b@gen-syntax x3db2@src x3e51@y x3db4@r x3e5c@maps x3db6@ellipsis? x3db7@vec?)) (lambda (x3e64@x3e61 x3e65@x3e63) ((lambda (x3e68@maps x3e69@ynew) (values (x3d45@gen-cons x3db3@e x3e50@x x3e51@y x3e5d@xnew x3e69@ynew) x3e68@maps)) x3e65@x3e63 x3e64@x3e61)))) x3e59@x3e57 x3e58@x3e55)))) x3e4e@ls/false) ((lambda (x3e6c@t) ((lambda (x3e6e@ls/false) (if x3e6e@ls/false (apply (lambda (x3e70@ls) (call-with-values (lambda () (x3d3b@gen-syntax x3db2@src x3e70@ls x3db4@r x3db5@maps x3db6@ellipsis? '#t)) (lambda (x3e76@x3e73 x3e77@x3e75) ((lambda (x3e7a@maps x3e7b@lsnew) (values (x3d47@gen-vector x3db3@e x3e70@ls x3e7b@lsnew) x3e7a@maps)) x3e77@x3e75 x3e76@x3e73)))) x3e6e@ls/false) ((lambda (x3e7e@t) ((lambda (x3e80@ls/false) (if x3e80@ls/false (apply (lambda () (values (list 'quote x3db3@e) x3db5@maps)) x3e80@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3e7e@t))) (x2efa@syntax-dispatch x3e7e@t '_))) x3e6c@t))) (x2efa@syntax-dispatch x3e6c@t '#(vector each-any)))) x3e4c@t))) (x2efa@syntax-dispatch x3e4c@t '(any . any)))) x3dee@t))) (x2efa@syntax-dispatch x3dee@t '(any any . any)))) x3de0@t))) (x2efa@syntax-dispatch x3de0@t '(any any)))) x3dc6@t))) (x2efa@syntax-dispatch x3dc6@t 'any))) x3dbe@t))) (x2efa@syntax-dispatch x3dbe@t 'any))) x3db3@e))) (set! x3d3d@gen-ref (lambda (x3d98@src x3d99@var x3d9a@level x3d9b@maps) (if (= x3d9a@level '0) (values x3d99@var x3d9b@maps) (if (null? x3d9b@maps) (x2fe3@syntax-violation '#f '"missing ellipsis in syntax form" x3d98@src) (call-with-values (lambda () (x3d3d@gen-ref x3d98@src x3d99@var (- x3d9a@level '1) (cdr x3d9b@maps))) (lambda (x3da4@x3da1 x3da5@x3da3) ((lambda (x3da8@outer-maps x3da9@outer-var) ((lambda (x3dac@t) (if x3dac@t ((lambda (x3dae@b) (values (cdr x3dae@b) x3d9b@maps)) x3dac@t) ((lambda (x3db0@inner-var) (values x3db0@inner-var (cons (cons (cons x3da9@outer-var x3db0@inner-var) (car x3d9b@maps)) x3da8@outer-maps))) (x2c6f@gen-lexical 'tmp)))) (assq x3da9@outer-var (car x3d9b@maps)))) x3da5@x3da3 x3da4@x3da1))))))) (set! x3d3f@gen-append (lambda (x3d94@x x3d95@y) (if (fast-equal? x3d95@y ''()) x3d94@x (list 'append x3d94@x x3d95@y)))) (set! x3d41@gen-mappend (lambda (x3d90@e x3d91@map-env) (list 'apply '(primitive append) (x3d43@gen-map x3d90@e x3d91@map-env)))) (set! x3d43@gen-map (lambda (x3d7e@e x3d7f@map-env) ((lambda (x3d82@formals x3d83@actuals) (if (eq? (car x3d7e@e) 'ref) (car x3d83@actuals) (if (for-all (lambda (x3d86@x) (and (eq? (car x3d86@x) 'ref) (memq (cadr x3d86@x) x3d82@formals))) (cdr x3d7e@e)) ((lambda (x3d88@args) (cons 'map (cons (list 'primitive (car x3d7e@e)) x3d88@args))) (map ((lambda (x3d8a@r) (lambda (x3d8c@x) (cdr (assq (cadr x3d8c@x) x3d8a@r)))) (map cons x3d82@formals x3d83@actuals)) (cdr x3d7e@e))) (cons* 'map (list 'lambda x3d82@formals x3d7e@e) x3d83@actuals)))) (map cdr x3d7f@map-env) (map (lambda (x3d8e@x) (list 'ref (car x3d8e@x))) x3d7f@map-env)))) (set! x3d45@gen-cons (lambda (x3d6e@e x3d6f@x x3d70@y x3d71@xnew x3d72@ynew) ((lambda (x3d78@t) (if (memv x3d78@t '(quote)) (if (eq? (car x3d71@xnew) 'quote) ((lambda (x3d7a@xnew x3d7b@ynew) (if (and (eq? x3d7a@xnew x3d6f@x) (eq? x3d7b@ynew x3d70@y)) (list 'quote x3d6e@e) (list 'quote (cons x3d7a@xnew x3d7b@ynew)))) (cadr x3d71@xnew) (cadr x3d72@ynew)) (if (null? (cadr x3d72@ynew)) (list 'list x3d71@xnew) (list 'cons x3d71@xnew x3d72@ynew))) (if (memv x3d78@t '(list)) (cons 'list (cons x3d71@xnew (cdr x3d72@ynew))) (list 'cons x3d71@xnew x3d72@ynew)))) (car x3d72@ynew)))) (set! x3d47@gen-vector (lambda (x3d68@e x3d69@ls x3d6a@lsnew) (if (eq? (car x3d6a@lsnew) 'quote) (if (eq? (cadr x3d6a@lsnew) x3d69@ls) (list 'quote x3d68@e) (list 'quote (list->vector (cadr x3d6a@lsnew)))) (if (eq? (car x3d6a@lsnew) 'list) (cons 'vector (cdr x3d6a@lsnew)) (list 'list->vector x3d6a@lsnew))))) (set! x3d49@regen (lambda (x3d62@x) ((lambda (x3d64@t) (if (memv x3d64@t '(ref)) (cadr x3d62@x) (if (memv x3d64@t '(primitive)) (list 'primitive (cadr x3d62@x)) (if (memv x3d64@t '(quote)) (list 'quote (cadr x3d62@x)) (if (memv x3d64@t '(lambda)) (x2c4b@x2b8b@build-lambda '#f (cadr x3d62@x) (x3d49@regen (caddr x3d62@x))) (if (memv x3d64@t '(map)) ((lambda (x3d66@ls) (cons '(primitive ellipsis-map) x3d66@ls)) (map x3d49@regen (cdr x3d62@x))) (cons (list 'primitive (car x3d62@x)) (map x3d49@regen (cdr x3d62@x))))))))) (car x3d62@x)))) (lambda (x3d4a@e x3d4b@r x3d4c@mr) ((lambda (x3d50@t) ((lambda (x3d52@ls/false) (if x3d52@ls/false (apply (lambda (x3d54@x) (call-with-values (lambda () (x3d3b@gen-syntax x3d4a@e x3d54@x x3d4b@r '() x2efc@ellipsis? '#f)) (lambda (x3d5a@x3d57 x3d5b@x3d59) ((lambda (x3d5e@maps x3d5f@e) (x3d49@regen x3d5f@e)) x3d5b@x3d59 x3d5a@x3d57)))) x3d52@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3d50@t))) (x2efa@syntax-dispatch x3d50@t '(_ any)))) x3d4a@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! x2f08@core-macro-transformer (lambda (x3e82@name) ((lambda (x3e84@t) (if (memv x3e84@t '(quote)) x2eaa@quote-transformer (if (memv x3e84@t '(lambda)) x2eae@lambda-transformer (if (memv x3e84@t '(case-lambda)) x2eac@case-lambda-transformer (if (memv x3e84@t '(letrec)) x2e92@letrec-transformer (if (memv x3e84@t '(letrec*)) x2e94@letrec*-transformer (if (memv x3e84@t '(if)) x2ea2@if-transformer (if (memv x3e84@t '(and)) x2ea4@and-transformer (if (memv x3e84@t '(or)) x2ea6@or-transformer (if (memv x3e84@t '(foreign-call)) x2ef6@foreign-call-transformer (if (memv x3e84@t '(syntax-case)) x2f02@syntax-case-transformer (if (memv x3e84@t '(syntax)) x2f06@syntax-transformer (if (memv x3e84@t '(type-descriptor)) x2e98@type-descriptor-transformer (if (memv x3e84@t '(record-type-descriptor)) x2e9a@record-type-descriptor-transformer (if (memv x3e84@t '(record-constructor-descriptor)) x2e9c@record-constructor-descriptor-transformer (if (memv x3e84@t '(fluid-let-syntax)) x2e96@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" x3e82@name))))))))))))))))) x3e82@name))) (set! x2f0a@symbol-macro (lambda (x3e86@x x3e87@set) ((lambda (x3e8a@t) ((lambda (x3e8c@ls/false) (if (and x3e8c@ls/false (apply (lambda (x3e8e@name) (and (x2cef@id? x3e8e@name) (memq (x2cf1@id->sym x3e8e@name) x3e87@set))) x3e8c@ls/false)) (apply (lambda (x3e90@name) (x2eb0@bless (list 'quote x3e90@name))) x3e8c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3e8a@t))) (x2efa@syntax-dispatch x3e8a@t '(_ any)))) x3e86@x))) (set! x2f0c@macro-transformer (lambda (x3e92@x) (if (procedure? x3e92@x) x3e92@x (if (symbol? x3e92@x) ((lambda (x3e94@t) (if (memv x3e94@t '(define-record-type)) x2eee@define-record-type-macro (if (memv x3e94@t '(define-struct)) x2eec@define-struct-macro (if (memv x3e94@t '(include)) x2ee2@include-macro (if (memv x3e94@t '(cond)) x2ede@cond-macro (if (memv x3e94@t '(let)) x2eb6@let-macro (if (memv x3e94@t '(do)) x2ed6@do-macro (if (memv x3e94@t '(or)) x2eda@or-macro (if (memv x3e94@t '(and)) x2edc@and-macro (if (memv x3e94@t '(let*)) x2ed8@let*-macro (if (memv x3e94@t '(let-values)) x2eb8@let-values-macro (if (memv x3e94@t '(let*-values)) x2eba@let*-values-macro (if (memv x3e94@t '(syntax-rules)) x2ee6@syntax-rules-macro (if (memv x3e94@t '(quasiquote)) x2ee8@quasiquote-macro (if (memv x3e94@t '(quasisyntax)) x2eea@quasisyntax-macro (if (memv x3e94@t '(with-syntax)) x2eb2@with-syntax-macro (if (memv x3e94@t '(when)) x2e9e@when-macro (if (memv x3e94@t '(unless)) x2ea0@unless-macro (if (memv x3e94@t '(case)) x2ea8@case-macro (if (memv x3e94@t '(identifier-syntax)) x2ed4@identifier-syntax-macro (if (memv x3e94@t '(time)) x2ecc@time-macro (if (memv x3e94@t '(delay)) x2ece@delay-macro (if (memv x3e94@t '(assert)) x2ed0@assert-macro (if (memv x3e94@t '(endianness)) x2ed2@endianness-macro (if (memv x3e94@t '(guard)) x2ec8@guard-macro (if (memv x3e94@t '(define-enumeration)) x2eca@define-enumeration-macro (if (memv x3e94@t '(trace-lambda)) x2ebc@trace-lambda-macro (if (memv x3e94@t '(trace-define)) x2ebe@trace-define-macro (if (memv x3e94@t '(trace-define-syntax)) x2ec0@trace-define-syntax-macro (if (memv x3e94@t '(trace-let-syntax)) x2ec4@trace-let-syntax-macro (if (memv x3e94@t '(trace-letrec-syntax)) x2ec6@trace-letrec-syntax-macro (if (memv x3e94@t '(define-condition-type)) x2ef0@define-condition-type-macro (if (memv x3e94@t '(parameterize)) x2ef4@parameterize-macro (if (memv x3e94@t '(include-into)) x2ee4@include-into-macro (if (memv x3e94@t '(eol-style)) (lambda (x3e96@x) (x2f0a@symbol-macro x3e96@x '(none lf cr crlf nel crnel ls))) (if (memv x3e94@t '(error-handling-mode)) (lambda (x3e98@x) (x2f0a@symbol-macro x3e98@x '(ignore raise replace))) (if (memv x3e94@t '(buffer-mode)) (lambda (x3e9a@x) (x2f0a@symbol-macro x3e9a@x '(none line block))) (if (memv x3e94@t '(file-options)) x2c62@file-options-macro (if (memv x3e94@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) x2ef2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" x3e92@x)))))))))))))))))))))))))))))))))))))))) x3e92@x) (error 'core-macro-transformer '"BUG: invalid macro" x3e92@x))))) (set! x2f0e@local-macro-transformer (lambda (x3e9c@x) (car x3e9c@x))) (set! x2f10@do-macro-call (lambda (x3e9e@transformer x3e9f@expr) ((lambda (x3ea2@out) (begin ((letrec ((x3ea4@f (lambda (x3ea6@x) (if (not (x2cb7@stx? x3ea6@x)) (if (pair? x3ea6@x) (begin (x3ea4@f (car x3ea6@x)) (x3ea4@f (cdr x3ea6@x))) (if (vector? x3ea6@x) (vector-for-each x3ea4@f x3ea6@x) (if (symbol? x3ea6@x) (x2fe3@syntax-violation '#f '"raw symbol encountered in output of macro" x3e9f@expr x3ea6@x) (void)))) (void))))) x3ea4@f) x3ea2@out) (x2cd9@add-mark (x2ccf@gen-mark) x3ea2@out x3e9f@expr))) (x3e9e@transformer (x2cd9@add-mark x2cd1@anti-mark x3e9f@expr '#f))))) (set! x2f12@chi-macro (lambda (x3ea8@p x3ea9@e) (x2f10@do-macro-call (x2f0c@macro-transformer x3ea8@p) x3ea9@e))) (set! x2f14@chi-local-macro (lambda (x3eac@p x3ead@e) (x2f10@do-macro-call (x2f0e@local-macro-transformer x3eac@p) x3ead@e))) (set! x2f16@chi-global-macro (lambda (x3eb0@p x3eb1@e) ((lambda (x3eb4@lib x3eb5@loc) (begin (x2b14@x29b6@visit-library x3eb4@lib) ((lambda (x3eb8@x) ((lambda (x3eba@transformer) (x2f10@do-macro-call x3eba@transformer x3eb1@e)) (if (procedure? x3eb8@x) x3eb8@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" x3eb8@x)))) (symbol-value x3eb5@loc)))) (car x3eb0@p) (cdr x3eb0@p)))) (set! x2f18@chi-expr* (lambda (x3ebc@e* x3ebd@r x3ebe@mr) (if (null? x3ebc@e*) '() ((lambda (x3ec2@e) (cons x3ec2@e (x2f18@chi-expr* (cdr x3ebc@e*) x3ebd@r x3ebe@mr))) (x2f1c@chi-expr (car x3ebc@e*) x3ebd@r x3ebe@mr))))) (set! x2f1a@chi-application (lambda (x3ec4@e x3ec5@r x3ec6@mr) ((lambda (x3eca@t) ((lambda (x3ecc@ls/false) (if x3ecc@ls/false (apply (lambda (x3ece@rator x3ecf@rands) ((lambda (x3ed2@rator) (cons x3ed2@rator (x2f18@chi-expr* x3ecf@rands x3ec5@r x3ec6@mr))) (x2f1c@chi-expr x3ece@rator x3ec5@r x3ec6@mr))) x3ecc@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3eca@t))) (x2efa@syntax-dispatch x3eca@t '(any . each-any)))) x3ec4@e))) (set! x2f1c@chi-expr (lambda (x3ed4@e x3ed5@r x3ed6@mr) (call-with-values (lambda () (x2d17@syntax-type x3ed4@e x3ed5@r)) (lambda (x3ee0@x3edb x3ee1@x3edd x3ee2@x3edf) ((lambda (x3ee6@kwd x3ee7@value x3ee8@type) ((lambda (x3eec@t) (if (memv x3eec@t '(core-macro)) ((lambda (x3eee@transformer) (x3eee@transformer x3ed4@e x3ed5@r x3ed6@mr)) (x2f08@core-macro-transformer x3ee7@value)) (if (memv x3eec@t '(global)) ((lambda (x3ef0@lib) ((lambda (x3ef2@loc) ((lambda () (begin ((x2f65@inv-collector) x3ef0@lib) x3ef2@loc)))) (cdr x3ee7@value))) (car x3ee7@value)) (if (memv x3eec@t '(core-prim)) ((lambda (x3ef4@name) (list 'primitive x3ef4@name)) x3ee7@value) (if (memv x3eec@t '(call)) (x2f1a@chi-application x3ed4@e x3ed5@r x3ed6@mr) (if (memv x3eec@t '(lexical)) ((lambda (x3ef6@lex) x3ef6@lex) (x2e86@lexical-var x3ee7@value)) (if (memv x3eec@t '(global-macro global-macro!)) (x2f1c@chi-expr (x2f16@chi-global-macro x3ee7@value x3ed4@e) x3ed5@r x3ed6@mr) (if (memv x3eec@t '(local-macro local-macro!)) (x2f1c@chi-expr (x2f14@chi-local-macro x3ee7@value x3ed4@e) x3ed5@r x3ed6@mr) (if (memv x3eec@t '(macro macro!)) (x2f1c@chi-expr (x2f12@chi-macro x3ee7@value x3ed4@e) x3ed5@r x3ed6@mr) (if (memv x3eec@t '(constant)) ((lambda (x3ef8@datum) (list 'quote x3ef8@datum)) x3ee7@value) (if (memv x3eec@t '(set!)) (x2f1e@chi-set! x3ed4@e x3ed5@r x3ed6@mr) (if (memv x3eec@t '(begin)) ((lambda (x3efa@t) ((lambda (x3efc@ls/false) (if x3efc@ls/false (apply (lambda (x3efe@x x3eff@x*) (x2c4e@x2bbd@build-sequence '#f (x2f18@chi-expr* (cons x3efe@x x3eff@x*) x3ed5@r x3ed6@mr))) x3efc@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3efa@t))) (x2efa@syntax-dispatch x3efa@t '(_ any . each-any)))) x3ed4@e) (if (memv x3eec@t '(let-syntax letrec-syntax)) ((lambda (x3f02@t) ((lambda (x3f04@ls/false) (if (and x3f04@ls/false (apply (lambda (x3f06@xlhs* x3f07@xrhs* x3f08@xbody x3f09@xbody*) (if (not (x2cf9@valid-bound-ids? x3f06@xlhs*)) (x2fe3@syntax-violation '#f '"invalid identifiers" x3ed4@e) (void))) x3f04@ls/false)) (apply (lambda (x3f0e@xlhs* x3f0f@xrhs* x3f10@xbody x3f11@xbody*) ((lambda (x3f16@xlab*) ((lambda (x3f18@xrib) ((lambda (x3f1a@xb*) ((lambda () (x2c4e@x2bbd@build-sequence '#f (x2f18@chi-expr* (map (lambda (x3f1c@x) (x2cdb@add-subst x3f18@xrib x3f1c@x)) (cons x3f10@xbody x3f11@xbody*)) (append (map cons x3f16@xlab* x3f1a@xb*) x3ed5@r) (append (map cons x3f16@xlab* x3f1a@xb*) x3ed6@mr)))))) (map (lambda (x3f1e@x) (x2d2d@make-eval-transformer (x2f57@expand-transformer (if (eq? x3ee8@type 'let-syntax) x3f1e@x (x2cdb@add-subst x3f18@xrib x3f1e@x)) x3ed6@mr))) x3f0f@xrhs*))) (x2caa@make-full-rib x3f0e@xlhs* x3f16@xlab*))) (map x2c73@gen-label x3f0e@xlhs*))) x3f04@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3f02@t))) (x2efa@syntax-dispatch x3f02@t '(_ #(each (any any)) any . each-any)))) x3ed4@e) (if (memv x3eec@t '(displaced-lexical)) (x2fe3@syntax-violation '#f '"identifier out of context" x3ed4@e) (if (memv x3eec@t '(syntax)) (x2fe3@syntax-violation '#f '"reference to pattern variable outside a syntax form" x3ed4@e) (if (memv x3eec@t '(define define-syntax module import library)) (x2fe3@syntax-violation '#f (string-append ((lambda (x3f20@t) (if (memv x3f20@t '(define)) '"a definition" (if (memv x3f20@t '(define-syntax)) '"a define-syntax" (if (memv x3f20@t '(module)) '"a module definition" (if (memv x3f20@t '(library)) '"a library definition" (if (memv x3f20@t '(import)) '"an import declaration" (if (memv x3f20@t '(export)) '"an export declaration" '"a non-expression"))))))) x3ee8@type) '" was found where an expression was expected") x3ed4@e) (if (memv x3eec@t '(mutable)) (x2fe3@syntax-violation '#f '"attempt to reference an unexportable variable" x3ed4@e) (x2fe3@syntax-violation '#f '"invalid expression" x3ed4@e)))))))))))))))))) x3ee8@type)) x3ee2@x3edf x3ee1@x3edd x3ee0@x3edb))))) (set! x2f1e@chi-set! (lambda (x3f22@e x3f23@r x3f24@mr) ((lambda (x3f28@t) ((lambda (x3f2a@ls/false) (if (and x3f2a@ls/false (apply (lambda (x3f2c@x x3f2d@v) (x2cef@id? x3f2c@x)) x3f2a@ls/false)) (apply (lambda (x3f30@x x3f31@v) (call-with-values (lambda () (x2d17@syntax-type x3f30@x x3f23@r)) (lambda (x3f3a@x3f35 x3f3b@x3f37 x3f3c@x3f39) ((lambda (x3f40@kwd x3f41@value x3f42@type) ((lambda (x3f46@t) (if (memv x3f46@t '(lexical)) (begin (x2e8a@set-lexical-mutable! x3f41@value '#t) (list 'set! (x2e86@lexical-var x3f41@value) (x2f1c@chi-expr x3f31@v x3f23@r x3f24@mr))) (if (memv x3f46@t '(core-prim)) (x2fe3@syntax-violation '#f '"cannot modify imported core primitive" x3f22@e) (if (memv x3f46@t '(global)) (x2fe3@syntax-violation '#f '"attempt to modify imported binding" x3f22@e) (if (memv x3f46@t '(global-macro!)) (x2f1c@chi-expr (x2f16@chi-global-macro x3f41@value x3f22@e) x3f23@r x3f24@mr) (if (memv x3f46@t '(local-macro!)) (x2f1c@chi-expr (x2f14@chi-local-macro x3f41@value x3f22@e) x3f23@r x3f24@mr) (if (memv x3f46@t '(mutable)) (x2fe3@syntax-violation '#f '"attempt to assign to an unexportable variable" x3f22@e) (x2fe3@syntax-violation '#f '"invalid syntax" x3f22@e)))))))) x3f42@type)) x3f3c@x3f39 x3f3b@x3f37 x3f3a@x3f35)))) x3f2a@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3f28@t))) (x2efa@syntax-dispatch x3f28@t '(_ any any)))) x3f22@e))) (set! x2f20@verify-formals (lambda (x3f48@fmls x3f49@stx) ((lambda (x3f4c@t) ((lambda (x3f4e@ls/false) (if x3f4e@ls/false (apply (lambda (x3f50@x*) (if (not (x2cf9@valid-bound-ids? x3f50@x*)) (x2eb4@invalid-fmls-error x3f49@stx x3f48@fmls) (void))) x3f4e@ls/false) ((lambda (x3f52@t) ((lambda (x3f54@ls/false) (if x3f54@ls/false (apply (lambda (x3f56@x* x3f57@x) (if (not (x2cf9@valid-bound-ids? (cons x3f57@x x3f56@x*))) (x2eb4@invalid-fmls-error x3f49@stx x3f48@fmls) (void))) x3f54@ls/false) ((lambda (x3f5a@t) ((lambda (x3f5c@ls/false) (if x3f5c@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid syntax" x3f49@stx)) x3f5c@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3f5a@t))) (x2efa@syntax-dispatch x3f5a@t '_))) x3f52@t))) (x2efa@syntax-dispatch x3f52@t '#(each+ any () any)))) x3f4c@t))) (x2efa@syntax-dispatch x3f4c@t 'each-any))) x3f48@fmls))) (set! x2f22@chi-lambda-clause (lambda (x3f5e@stx x3f5f@fmls x3f60@body* x3f61@r x3f62@mr) ((lambda (x3f68@t) ((lambda (x3f6a@ls/false) (if x3f6a@ls/false (apply (lambda (x3f6c@x*) (begin (x2f20@verify-formals x3f5f@fmls x3f5e@stx) ((lambda (x3f6e@lex* x3f6f@lab*) (values x3f6e@lex* (x2f32@chi-internal (x2cdb@add-subst (x2caa@make-full-rib x3f6c@x* x3f6f@lab*) x3f60@body*) (x2e8e@add-lexicals x3f6f@lab* x3f6e@lex* x3f61@r) x3f62@mr))) (map x2c6f@gen-lexical x3f6c@x*) (map x2c73@gen-label x3f6c@x*)))) x3f6a@ls/false) ((lambda (x3f72@t) ((lambda (x3f74@ls/false) (if x3f74@ls/false (apply (lambda (x3f76@x* x3f77@x) (begin (x2f20@verify-formals x3f5f@fmls x3f5e@stx) ((lambda (x3f7a@lex* x3f7b@lab* x3f7c@lex x3f7d@lab) (values (append x3f7a@lex* x3f7c@lex) (x2f32@chi-internal (x2cdb@add-subst (x2caa@make-full-rib (cons x3f77@x x3f76@x*) (cons x3f7d@lab x3f7b@lab*)) x3f60@body*) (x2e8e@add-lexicals (cons x3f7d@lab x3f7b@lab*) (cons x3f7c@lex x3f7a@lex*) x3f61@r) x3f62@mr))) (map x2c6f@gen-lexical x3f76@x*) (map x2c73@gen-label x3f76@x*) (x2c6f@gen-lexical x3f77@x) (x2c73@gen-label x3f77@x)))) x3f74@ls/false) ((lambda (x3f82@t) ((lambda (x3f84@ls/false) (if x3f84@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid syntax" x3f5f@fmls)) x3f84@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x3f82@t))) (x2efa@syntax-dispatch x3f82@t '_))) x3f72@t))) (x2efa@syntax-dispatch x3f72@t '#(each+ any () any)))) x3f68@t))) (x2efa@syntax-dispatch x3f68@t 'each-any))) x3f5f@fmls))) (set! x2f24@chi-lambda-clause* (lambda (x3f86@stx x3f87@fmls* x3f88@body** x3f89@r x3f8a@mr) (if (null? x3f87@fmls*) (values '() '()) (call-with-values (lambda () (x2f22@chi-lambda-clause x3f86@stx (car x3f87@fmls*) (car x3f88@body**) x3f89@r x3f8a@mr)) (lambda (x3f94@x3f91 x3f95@x3f93) ((lambda (x3f98@b x3f99@a) (call-with-values (lambda () (x2f24@chi-lambda-clause* x3f86@stx (cdr x3f87@fmls*) (cdr x3f88@body**) x3f89@r x3f8a@mr)) (lambda (x3fa0@x3f9d x3fa1@x3f9f) ((lambda (x3fa4@b* x3fa5@a*) (values (cons x3f99@a x3fa5@a*) (cons x3f98@b x3fa4@b*))) x3fa1@x3f9f x3fa0@x3f9d)))) x3f95@x3f93 x3f94@x3f91)))))) (set! x2f26@chi-defun (lambda (x3fa8@x x3fa9@r x3faa@mr) ((lambda (x3fae@fmls x3faf@body*) (call-with-values (lambda () (x2f22@chi-lambda-clause x3fae@fmls x3fae@fmls x3faf@body* x3fa9@r x3faa@mr)) (lambda (x3fb6@x3fb3 x3fb7@x3fb5) ((lambda (x3fba@body x3fbb@fmls) (x2c4b@x2b8b@build-lambda '#f x3fbb@fmls x3fba@body)) x3fb7@x3fb5 x3fb6@x3fb3)))) (car x3fa8@x) (cdr x3fa8@x)))) (set! x2f28@chi-rhs (lambda (x3fbe@rhs x3fbf@r x3fc0@mr) ((lambda (x3fc4@t) (if (memv x3fc4@t '(defun)) (x2f26@chi-defun (cdr x3fbe@rhs) x3fbf@r x3fc0@mr) (if (memv x3fc4@t '(expr)) ((lambda (x3fc6@expr) (x2f1c@chi-expr x3fc6@expr x3fbf@r x3fc0@mr)) (cdr x3fbe@rhs)) (if (memv x3fc4@t '(top-expr)) ((lambda (x3fc8@expr) (x2c4e@x2bbd@build-sequence '#f (list (x2f1c@chi-expr x3fc8@expr x3fbf@r x3fc0@mr) (x2c4f@x2bbf@build-void)))) (cdr x3fbe@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" x3fbe@rhs))))) (car x3fbe@rhs)))) (set! x2f2a@expand-interaction-rhs*/init* (lambda (x3fca@lhs* x3fcb@rhs* x3fcc@init* x3fcd@r x3fce@mr) ((letrec ((x3fd4@f (lambda (x3fd6@lhs* x3fd7@rhs*) (if (null? x3fd6@lhs*) (map (lambda (x3fda@x) (x2f1c@chi-expr x3fda@x x3fcd@r x3fce@mr)) x3fcc@init*) ((lambda (x3fdc@lhs x3fdd@rhs) ((lambda (x3fe0@t) (if (memv x3fe0@t '(defun)) ((lambda (x3fe2@rhs) (cons (list 'set! x3fdc@lhs x3fe2@rhs) (x3fd4@f (cdr x3fd6@lhs*) (cdr x3fd7@rhs*)))) (x2f26@chi-defun (cdr x3fdd@rhs) x3fcd@r x3fce@mr)) (if (memv x3fe0@t '(expr)) ((lambda (x3fe4@rhs) (cons (list 'set! x3fdc@lhs x3fe4@rhs) (x3fd4@f (cdr x3fd6@lhs*) (cdr x3fd7@rhs*)))) (x2f1c@chi-expr (cdr x3fdd@rhs) x3fcd@r x3fce@mr)) (if (memv x3fe0@t '(top-expr)) ((lambda (x3fe6@e) (cons x3fe6@e (x3fd4@f (cdr x3fd6@lhs*) (cdr x3fd7@rhs*)))) (x2f1c@chi-expr (cdr x3fdd@rhs) x3fcd@r x3fce@mr)) (error 'expand-interaction '"invallid" x3fdd@rhs))))) (car x3fdd@rhs))) (car x3fd6@lhs*) (car x3fd7@rhs*)))))) x3fd4@f) x3fca@lhs* x3fcb@rhs*))) (set! x2f2c@chi-rhs* (lambda (x3fe8@rhs* x3fe9@r x3fea@mr) ((letrec ((x3fee@f (lambda (x3ff0@ls) (if (null? x3ff0@ls) '() ((lambda (x3ff2@a) (cons x3ff2@a (x3fee@f (cdr x3ff0@ls)))) (x2f28@chi-rhs (car x3ff0@ls) x3fe9@r x3fea@mr)))))) x3fee@f) x3fe8@rhs*))) (set! x2f2e@find-bound=? (lambda (x3ff4@x x3ff5@lhs* x3ff6@rhs*) (if (null? x3ff5@lhs*) '#f (if (x2cf5@bound-id=? x3ff4@x (car x3ff5@lhs*)) (car x3ff6@rhs*) (x2f2e@find-bound=? x3ff4@x (cdr x3ff5@lhs*) (cdr x3ff6@rhs*)))))) (set! x2f30@find-dups (lambda (x3ffa@ls) ((letrec ((x3ffc@f (lambda (x3ffe@ls x3fff@dups) (if (null? x3ffe@ls) x3fff@dups ((lambda (x4002@t) (if x4002@t ((lambda (x4004@x) (x3ffc@f (cdr x3ffe@ls) (cons (list (car x3ffe@ls) x4004@x) x3fff@dups))) x4002@t) (x3ffc@f (cdr x3ffe@ls) x3fff@dups))) (x2f2e@find-bound=? (car x3ffe@ls) (cdr x3ffe@ls) (cdr x3ffe@ls))))))) x3ffc@f) x3ffa@ls '()))) (set! x2f32@chi-internal (lambda (x4006@e* x4007@r x4008@mr) ((lambda (x400c@rib) (call-with-values (lambda () (x2f55@chi-body* (map (lambda (x401e@x) (x2cdb@add-subst x400c@rib x401e@x)) (x2ced@syntax->list x4006@e*)) x4007@r x4008@mr '() '() '() '() '() x400c@rib '#f)) (lambda (x4020@x400f x4021@x4011 x4022@x4013 x4023@x4015 x4024@x4017 x4025@x4019 x4026@x401b x4027@x401d) ((lambda (x4030@_exp* x4031@kwd* x4032@mod** x4033@rhs* x4034@lex* x4035@mr x4036@r x4037@e*) (begin (if (null? x4037@e*) (x2fe3@syntax-violation '#f '"no expression in body" x4037@e*) (void)) ((lambda (x4040@init*) ((lambda (x4042@rhs*) ((lambda () (x2c51@x2bc3@build-letrec* '#f (reverse x4034@lex*) (reverse x4042@rhs*) (x2c4e@x2bbd@build-sequence '#f x4040@init*))))) (x2f2c@chi-rhs* x4033@rhs* x4036@r x4035@mr))) (x2f18@chi-expr* (append (apply append (reverse x4032@mod**)) x4037@e*) x4036@r x4035@mr)))) x4027@x401d x4026@x401b x4025@x4019 x4024@x4017 x4023@x4015 x4022@x4013 x4021@x4011 x4020@x400f)))) (x2c9e@make-empty-rib)))) (set! x2f34@parse-module (lambda (x4044@e) ((lambda (x4046@t) ((lambda (x4048@ls/false) (if x4048@ls/false (apply (lambda (x404a@export* x404b@b*) (begin (if (not (for-all x2cef@id? x404a@export*)) (x2fe3@syntax-violation '#f '"module exports must be identifiers" x4044@e) (void)) (values '#f (list->vector x404a@export*) x404b@b*))) x4048@ls/false) ((lambda (x404e@t) ((lambda (x4050@ls/false) (if x4050@ls/false (apply (lambda (x4052@name x4053@export* x4054@b*) (begin (if (not (x2cef@id? x4052@name)) (x2fe3@syntax-violation '#f '"module name must be an identifier" x4044@e) (void)) (if (not (for-all x2cef@id? x4053@export*)) (x2fe3@syntax-violation '#f '"module exports must be identifiers" x4044@e) (void)) (values x4052@name (list->vector x4053@export*) x4054@b*))) x4050@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x404e@t))) (x2efa@syntax-dispatch x404e@t '(_ any each-any . each-any)))) x4046@t))) (x2efa@syntax-dispatch x4046@t '(_ each-any . each-any)))) x4044@e))) (set! x2f3a@x2f35 (make-record-type-descriptor 'module-interface '#f 'x2f38 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! x2f3c@x2f37 '#f) (set! x2f3e@x2f36 (make-record-constructor-descriptor x2f3a@x2f35 '#f x2f3c@x2f37)) (set! x2f41@module-interface? (record-predicate x2f3a@x2f35)) (set! x2f43@make-module-interface (record-constructor x2f3e@x2f36)) (set! x2f45@module-interface-first-mark (record-accessor x2f3a@x2f35 '0)) (set! x2f47@module-interface-exp-id-vec (record-accessor x2f3a@x2f35 '1)) (set! x2f49@module-interface-exp-lab-vec (record-accessor x2f3a@x2f35 '2)) (set! x2f4b@set-module-interface-first-mark! (record-mutator x2f3a@x2f35 '0)) (set! x2f4d@set-module-interface-exp-id-vec! (record-mutator x2f3a@x2f35 '1)) (set! x2f4f@set-module-interface-exp-lab-vec! (record-mutator x2f3a@x2f35 '2)) (set! x2f51@module-interface-exp-id* (lambda (x4058@iface x4059@id) ((lambda (x405d@diff-marks) (begin (set! x405d@diff-marks (lambda (x4064@ls x4065@x) (begin (if (null? x4064@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (x4068@a) (if (eq? x4068@a x4065@x) '() (cons x4068@a (x405d@diff-marks (cdr x4064@ls) x4065@x)))) (car x4064@ls))))) ((lambda (x405e@diff x405f@id-vec) (if (null? x405e@diff) x405f@id-vec (vector-map (lambda (x4062@x) (x2cb9@make-stx (x2cbb@stx-expr x4062@x) (append x405e@diff (x2cbd@stx-mark* x4062@x)) '() '())) x405f@id-vec))) (x405d@diff-marks (x2cbd@stx-mark* x4059@id) (x2f45@module-interface-first-mark x4058@iface)) (x2f47@module-interface-exp-id-vec x4058@iface)))) '#f))) (set! x2f53@chi-internal-module (lambda (x406a@e x406b@r x406c@mr x406d@lex* x406e@rhs* x406f@mod** x4070@kwd*) (call-with-values (lambda () (x2f34@parse-module x406a@e)) (lambda (x407e@x4079 x407f@x407b x4080@x407d) ((lambda (x4084@e* x4085@exp-id* x4086@name) ((lambda (x408a@rib) ((lambda (x408c@e*) ((lambda () (call-with-values (lambda () (x2f55@chi-body* x408c@e* x406b@r x406c@mr x406d@lex* x406e@rhs* x406f@mod** x4070@kwd* '() x408a@rib '#f)) (lambda (x409e@x408f x409f@x4091 x40a0@x4093 x40a1@x4095 x40a2@x4097 x40a3@x4099 x40a4@x409b x40a5@x409d) ((lambda (x40ae@_exp* x40af@kwd* x40b0@mod** x40b1@rhs* x40b2@lex* x40b3@mr x40b4@r x40b5@e*) ((lambda (x40be@exp-lab* x40bf@mod**) (if (not x4086@name) (values x40b2@lex* x40b1@rhs* x4085@exp-id* x40be@exp-lab* x40b4@r x40b3@mr x40bf@mod** x40af@kwd*) ((lambda (x40c2@lab x40c3@iface) (values x40b2@lex* x40b1@rhs* (vector x4086@name) (vector x40c2@lab) (cons (cons x40c2@lab (cons '$module x40c3@iface)) x40b4@r) (cons (cons x40c2@lab (cons '$module x40c3@iface)) x40b3@mr) x40bf@mod** x40af@kwd*)) (x2c73@gen-label 'module) (x2f43@make-module-interface (car (x2cbd@stx-mark* x4086@name)) (vector-map (lambda (x40c6@x) (x2cb9@make-stx (x2cbb@stx-expr x40c6@x) (x2cbd@stx-mark* x40c6@x) '() '())) x4085@exp-id*) x40be@exp-lab*)))) (vector-map (lambda (x40c8@x) (or (x2d09@id->label (x2cb9@make-stx (x2cf1@id->sym x40c8@x) (x2cbd@stx-mark* x40c8@x) (list x408a@rib) '())) (x2fe3@syntax-violation '#f '"cannot find module export" x40c8@x))) x4085@exp-id*) (cons x40b5@e* x40b0@mod**))) x40a5@x409d x40a4@x409b x40a3@x4099 x40a2@x4097 x40a1@x4095 x40a0@x4093 x409f@x4091 x409e@x408f)))))) (map (lambda (x40ca@x) (x2cdb@add-subst x408a@rib x40ca@x)) (x2ced@syntax->list x4084@e*)))) (x2c9e@make-empty-rib))) x4080@x407d x407f@x407b x407e@x4079))))) (set! x2f55@chi-body* (lambda (x40cc@e* x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40d2@kwd* x40d3@exp* x40d4@rib x40d5@top?) (if (null? x40cc@e*) (values x40cc@e* x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40d2@kwd* x40d3@exp*) ((lambda (x40e0@e) (call-with-values (lambda () (x2d17@syntax-type x40e0@e x40cd@r)) (lambda (x40e8@x40e3 x40e9@x40e5 x40ea@x40e7) ((lambda (x40ee@kwd x40ef@value x40f0@type) ((lambda (x40f4@kwd*) ((lambda (x40f6@t) (if (memv x40f6@t '(define)) (call-with-values (lambda () (x2e7e@parse-define x40e0@e)) (lambda (x40fc@x40f9 x40fd@x40fb) ((lambda (x4100@rhs x4101@id) (begin (if (x2cfd@bound-id-member? x4101@id x40f4@kwd*) (x2fe3@syntax-violation '#f '"cannot redefine keyword" x40e0@e) (void)) (call-with-values (lambda () (x2c77@gen-define-label+loc x4101@id x40d4@rib)) (lambda (x4108@x4105 x4109@x4107) ((lambda (x410c@lex x410d@lab) (begin (x2ca0@extend-rib! x40d4@rib x4101@id x410d@lab) (x2f55@chi-body* (cdr x40cc@e*) (x2e8c@add-lexical x410d@lab x410c@lex x40cd@r) x40ce@mr (cons x410c@lex x40cf@lex*) (cons x4100@rhs x40d0@rhs*) x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?))) x4109@x4107 x4108@x4105))))) x40fd@x40fb x40fc@x40f9))) (if (memv x40f6@t '(define-syntax)) (call-with-values (lambda () (x2e80@parse-define-syntax x40e0@e)) (lambda (x4114@x4111 x4115@x4113) ((lambda (x4118@rhs x4119@id) (begin (if (x2cfd@bound-id-member? x4119@id x40f4@kwd*) (x2fe3@syntax-violation '#f '"cannot redefine keyword" x40e0@e) (void)) ((lambda (x411c@lab x411d@expanded-rhs) (begin (x2ca0@extend-rib! x40d4@rib x4119@id x411c@lab) ((lambda (x4120@b) (x2f55@chi-body* (cdr x40cc@e*) (cons (cons x411c@lab x4120@b) x40cd@r) (cons (cons x411c@lab x4120@b) x40ce@mr) x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?)) (x2d2d@make-eval-transformer x411d@expanded-rhs)))) (x2c79@gen-define-label x4119@id x40d4@rib) (x2f57@expand-transformer x4118@rhs x40ce@mr)))) x4115@x4113 x4114@x4111))) (if (memv x40f6@t '(let-syntax letrec-syntax)) ((lambda (x4122@t) ((lambda (x4124@ls/false) (if (and x4124@ls/false (apply (lambda (x4126@xlhs* x4127@xrhs* x4128@xbody*) (if (not (x2cf9@valid-bound-ids? x4126@xlhs*)) (x2fe3@syntax-violation '#f '"invalid identifiers" x40e0@e) (void))) x4124@ls/false)) (apply (lambda (x412c@xlhs* x412d@xrhs* x412e@xbody*) ((lambda (x4132@xlab*) ((lambda (x4134@xrib) ((lambda (x4136@xb*) ((lambda () (x2f55@chi-body* (append (map (lambda (x4138@x) (x2cdb@add-subst x4134@xrib x4138@x)) x412e@xbody*) (cdr x40cc@e*)) (append (map cons x4132@xlab* x4136@xb*) x40cd@r) (append (map cons x4132@xlab* x4136@xb*) x40ce@mr) x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?)))) (map (lambda (x413a@x) (x2d2d@make-eval-transformer (x2f57@expand-transformer (if (eq? x40f0@type 'let-syntax) x413a@x (x2cdb@add-subst x4134@xrib x413a@x)) x40ce@mr))) x412d@xrhs*))) (x2caa@make-full-rib x412c@xlhs* x4132@xlab*))) (map x2c73@gen-label x412c@xlhs*))) x4124@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4122@t))) (x2efa@syntax-dispatch x4122@t '(_ #(each (any any)) . each-any)))) x40e0@e) (if (memv x40f6@t '(begin)) ((lambda (x413c@t) ((lambda (x413e@ls/false) (if x413e@ls/false (apply (lambda (x4140@x*) (x2f55@chi-body* (append x4140@x* (cdr x40cc@e*)) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?)) x413e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x413c@t))) (x2efa@syntax-dispatch x413c@t '(_ . each-any)))) x40e0@e) (if (memv x40f6@t '(global-macro global-macro!)) (x2f55@chi-body* (cons (x2cdb@add-subst x40d4@rib (x2f16@chi-global-macro x40ef@value x40e0@e)) (cdr x40cc@e*)) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?) (if (memv x40f6@t '(local-macro local-macro!)) (x2f55@chi-body* (cons (x2cdb@add-subst x40d4@rib (x2f14@chi-local-macro x40ef@value x40e0@e)) (cdr x40cc@e*)) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?) (if (memv x40f6@t '(macro macro!)) (x2f55@chi-body* (cons (x2cdb@add-subst x40d4@rib (x2f12@chi-macro x40ef@value x40e0@e)) (cdr x40cc@e*)) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?) (if (memv x40f6@t '(module)) (call-with-values (lambda () (x2f53@chi-internal-module x40e0@e x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd*)) (lambda (x4152@x4143 x4153@x4145 x4154@x4147 x4155@x4149 x4156@x414b x4157@x414d x4158@x414f x4159@x4151) ((lambda (x4162@kwd* x4163@mod** x4164@mr x4165@r x4166@m-exp-lab* x4167@m-exp-id* x4168@rhs* x4169@lex*) (begin (vector-for-each (lambda (x4172@id x4173@lab) (x2ca0@extend-rib! x40d4@rib x4172@id x4173@lab)) x4167@m-exp-id* x4166@m-exp-lab*) (x2f55@chi-body* (cdr x40cc@e*) x4165@r x4164@mr x4169@lex* x4168@rhs* x4163@mod** x4162@kwd* x40d3@exp* x40d4@rib x40d5@top?))) x4159@x4151 x4158@x414f x4157@x414d x4156@x414b x4155@x4149 x4154@x4147 x4153@x4145 x4152@x4143))) (if (memv x40f6@t '(library)) (begin (x2fc5@library-expander (x2d05@stx->datum x40e0@e)) (x2f55@chi-body* (cdr x40cc@e*) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?)) (if (memv x40f6@t '(export)) ((lambda (x4176@t) ((lambda (x4178@ls/false) (if x4178@ls/false (apply (lambda (x417a@exp-decl*) (x2f55@chi-body* (cdr x40cc@e*) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* (append x417a@exp-decl* x40d3@exp*) x40d4@rib x40d5@top?)) x4178@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4176@t))) (x2efa@syntax-dispatch x4176@t '(_ . each-any)))) x40e0@e) (if (memv x40f6@t '(import)) ((lambda () ((lambda (x417d@module-import? x417f@module-import x4181@library-import) (begin (set! x417d@module-import? (lambda (x41d0@e) ((lambda (x41d2@t) ((lambda (x41d4@ls/false) (if (and x41d4@ls/false (apply (lambda (x41d6@id) (x2cef@id? x41d6@id)) x41d4@ls/false)) (apply (lambda (x41d8@id) '#t) x41d4@ls/false) ((lambda (x41da@t) ((lambda (x41dc@ls/false) (if x41dc@ls/false (apply (lambda (x41de@imp*) '#f) x41dc@ls/false) ((lambda (x41e0@t) ((lambda (x41e2@ls/false) (if x41e2@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"malformed import form" x41d0@e)) x41e2@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x41e0@t))) (x2efa@syntax-dispatch x41e0@t '_))) x41da@t))) (x2efa@syntax-dispatch x41da@t '(_ . each-any)))) x41d2@t))) (x2efa@syntax-dispatch x41d2@t '(_ any)))) x41d0@e))) (set! x417f@module-import (lambda (x41ae@e x41af@r) ((lambda (x41b2@t) ((lambda (x41b4@ls/false) (if (and x41b4@ls/false (apply (lambda (x41b6@id) (x2cef@id? x41b6@id)) x41b4@ls/false)) (apply (lambda (x41b8@id) (call-with-values (lambda () (x2d17@syntax-type x41b8@id x41af@r)) (lambda (x41c0@x41bb x41c1@x41bd x41c2@x41bf) ((lambda (x41c6@kwd x41c7@value x41c8@type) ((lambda (x41cc@t) (if (memv x41cc@t '($module)) ((lambda (x41ce@iface) (values (x2f51@module-interface-exp-id* x41ce@iface x41b8@id) (x2f49@module-interface-exp-lab-vec x41ce@iface))) x41c7@value) (x2fe3@syntax-violation '#f '"invalid import" x41ae@e))) x41c8@type)) x41c2@x41bf x41c1@x41bd x41c0@x41bb)))) x41b4@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x41b2@t))) (x2efa@syntax-dispatch x41b2@t '(_ any)))) x41ae@e))) (set! x4181@library-import (lambda (x4192@e) ((lambda (x4194@t) ((lambda (x4196@ls/false) (if x4196@ls/false (apply (lambda (x4198@ctxt x4199@imp*) (call-with-values (lambda () (x2f5f@parse-import-spec* (x2fe9@syntax->datum x4199@imp*))) (lambda (x41a0@x419d x41a1@x419f) ((lambda (x41a4@subst-labels x41a5@subst-names) (values (vector-map (lambda (x41a8@name) (x2ccd@datum->stx x4198@ctxt x41a8@name)) x41a5@subst-names) x41a4@subst-labels)) x41a1@x419f x41a0@x419d)))) x4196@ls/false) ((lambda (x41aa@t) ((lambda (x41ac@ls/false) (if x41ac@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid import form" x4192@e)) x41ac@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x41aa@t))) (x2efa@syntax-dispatch x41aa@t '_))) x4194@t))) (x2efa@syntax-dispatch x4194@t '(any . each-any)))) x4192@e))) (begin (call-with-values (lambda () (if (x417d@module-import? x40e0@e) (x417f@module-import x40e0@e x40cd@r) (x4181@library-import x40e0@e))) (lambda (x4186@x4183 x4187@x4185) ((lambda (x418a@lab* x418b@id*) (vector-for-each (lambda (x418e@id x418f@lab) (x2ca0@extend-rib! x40d4@rib x418e@id x418f@lab)) x418b@id* x418a@lab*)) x4187@x4185 x4186@x4183))) (x2f55@chi-body* (cdr x40cc@e*) x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?)))) '#f '#f '#f))) (if x40d5@top? (x2f55@chi-body* (cdr x40cc@e*) x40cd@r x40ce@mr (cons (x2c6f@gen-lexical 'dummy) x40cf@lex*) (cons (cons 'top-expr x40e0@e) x40d0@rhs*) x40d1@mod** x40f4@kwd* x40d3@exp* x40d4@rib x40d5@top?) (values x40cc@e* x40cd@r x40ce@mr x40cf@lex* x40d0@rhs* x40d1@mod** x40f4@kwd* x40d3@exp*)))))))))))))) x40f0@type)) (if (x2cef@id? x40ee@kwd) (cons x40ee@kwd x40d2@kwd*) x40d2@kwd*))) x40ea@x40e7 x40e9@x40e5 x40e8@x40e3)))) (car x40cc@e*))))) (set! x2f57@expand-transformer (lambda (x41e4@expr x41e5@r) ((lambda (x41e8@rtc) ((lambda (x41ea@expanded-rhs) (begin (for-each ((lambda (x41ec@mark-visit) (lambda (x41ee@x) (begin (x2b13@x29b4@invoke-library x41ee@x) (x41ec@mark-visit x41ee@x)))) (x2f67@vis-collector)) (x41e8@rtc)) x41ea@expanded-rhs)) ((lambda (x41f8@x41f1 x41f9@x41f3 x41fa@x41f5 x41fb@x41f7) ((lambda (x4200@swap) (dynamic-wind x4200@swap (lambda () (x2f1c@chi-expr x41e4@expr x41e5@r x41e5@r)) x4200@swap)) (lambda () (begin ((lambda (x4202@t) (begin (x41f8@x41f1 x41fa@x41f5) (set! x41fa@x41f5 x4202@t))) (x41f8@x41f1)) ((lambda (x4204@t) (begin (x41f9@x41f3 x41fb@x41f7) (set! x41fb@x41f7 x4204@t))) (x41f9@x41f3)))))) x2f65@inv-collector x2f67@vis-collector x41e8@rtc (lambda (x4206@x) (values))))) (x2f63@make-collector)))) (set! x2f59@parse-exports (lambda (x4208@exp*) ((letrec ((x420a@f (lambda (x420c@exp* x420d@int* x420e@ext*) (if (null? x420c@exp*) (begin (if (not (x2cf9@valid-bound-ids? x420e@ext*)) (x2fe3@syntax-violation 'export '"invalid exports" (x2f30@find-dups x420e@ext*)) (void)) (values (map x2fe9@syntax->datum x420e@ext*) x420d@int*)) ((lambda (x4212@t) ((lambda (x4214@ls/false) (if x4214@ls/false (apply (lambda (x4216@rename x4217@i* x4218@e*) (begin (if (not (and (eq? (x2fe9@syntax->datum x4216@rename) 'rename) (for-all x2cef@id? x4217@i*) (for-all x2cef@id? x4218@e*))) (x2fe3@syntax-violation 'export '"invalid export specifier" (car x420c@exp*)) (void)) (x420a@f (cdr x420c@exp*) (append x4217@i* x420d@int*) (append x4218@e* x420e@ext*)))) x4214@ls/false) ((lambda (x421c@t) ((lambda (x421e@ls/false) (if x421e@ls/false (apply (lambda (x4220@ie) (begin (if (not (x2cef@id? x4220@ie)) (x2fe3@syntax-violation 'export '"invalid export" x4220@ie) (void)) (x420a@f (cdr x420c@exp*) (cons x4220@ie x420d@int*) (cons x4220@ie x420e@ext*)))) x421e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x421c@t))) (x2efa@syntax-dispatch x421c@t 'any))) x4212@t))) (x2efa@syntax-dispatch x4212@t '(any . #(each (any any)))))) (car x420c@exp*)))))) x420a@f) x4208@exp* '() '()))) (set! x2f5b@parse-library-name (lambda (x4222@spec) ((lambda (x4225@parse) (begin (set! x4225@parse (lambda (x4232@x) ((lambda (x4234@t) ((lambda (x4236@ls/false) (if (and x4236@ls/false (apply (lambda (x4238@v*) (for-all (lambda (x423a@x) ((lambda (x423c@x) (and (integer? x423c@x) (exact? x423c@x))) (x2fe9@syntax->datum x423a@x))) x4238@v*)) x4236@ls/false)) (apply (lambda (x423e@v*) (values '() (map x2fe9@syntax->datum x423e@v*))) x4236@ls/false) ((lambda (x4240@t) ((lambda (x4242@ls/false) (if (and x4242@ls/false (apply (lambda (x4244@x x4245@rest) (symbol? (x2fe9@syntax->datum x4244@x))) x4242@ls/false)) (apply (lambda (x4248@x x4249@rest) (call-with-values (lambda () (x4225@parse x4249@rest)) (lambda (x4250@x424d x4251@x424f) ((lambda (x4254@v* x4255@x*) (values (cons (x2fe9@syntax->datum x4248@x) x4255@x*) x4254@v*)) x4251@x424f x4250@x424d)))) x4242@ls/false) ((lambda (x4258@t) ((lambda (x425a@ls/false) (if x425a@ls/false (apply (lambda () (values '() '())) x425a@ls/false) ((lambda (x425c@t) ((lambda (x425e@ls/false) (if x425e@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid library name" x4222@spec)) x425e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x425c@t))) (x2efa@syntax-dispatch x425c@t '_))) x4258@t))) (x2efa@syntax-dispatch x4258@t '()))) x4240@t))) (x2efa@syntax-dispatch x4240@t '(any . any)))) x4234@t))) (x2efa@syntax-dispatch x4234@t '(each-any)))) x4232@x))) (call-with-values (lambda () (x4225@parse x4222@spec)) (lambda (x422a@x4227 x422b@x4229) ((lambda (x422e@ver* x422f@name*) (begin (if (null? x422f@name*) (x2fe3@syntax-violation '#f '"empty library name" x4222@spec) (void)) (values x422f@name* x422e@ver*))) x422b@x4229 x422a@x4227))))) '#f))) (set! x2f5d@parse-library (lambda (x4260@e) ((lambda (x4262@t) ((lambda (x4264@ls/false) (if (and x4264@ls/false (apply (lambda (x4266@library x4267@name* x4268@export x4269@exp* x426a@import x426b@imp* x426c@b*) (and (eq? (x2fe9@syntax->datum x4268@export) 'export) (eq? (x2fe9@syntax->datum x426a@import) 'import) (eq? (x2fe9@syntax->datum x4266@library) 'library))) x4264@ls/false)) (apply (lambda (x4274@library x4275@name* x4276@export x4277@exp* x4278@import x4279@imp* x427a@b*) (values x4275@name* x4277@exp* x4279@imp* x427a@b*)) x4264@ls/false) ((lambda (x4282@t) ((lambda (x4284@ls/false) (if x4284@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"malformed library" x4260@e)) x4284@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4282@t))) (x2efa@syntax-dispatch x4282@t '_))) x4262@t))) (x2efa@syntax-dispatch x4262@t '(any each-any (any . each-any) (any . each-any) . each-any)))) x4260@e))) (set! x2f5f@parse-import-spec* ((lambda () ((lambda (x4287@idsyn? x4289@dup-error x428b@merge-substs x428d@exclude* x428f@find* x4291@rem* x4293@remove-dups x4295@parse-library-name x4297@import-library x4299@get-import x429b@add-imports!) (begin (set! x4287@idsyn? (lambda (x4490@x) (symbol? (x2fe9@syntax->datum x4490@x)))) (set! x4289@dup-error (lambda (x448e@name) (x2fe3@syntax-violation 'import '"two imports with different bindings" x448e@name))) (set! x428b@merge-substs (lambda (x447c@s x447d@subst) ((lambda (x4481@insert-to-subst) (begin (set! x4481@insert-to-subst (lambda (x4482@a x4483@subst) ((lambda (x4486@name x4487@label) ((lambda (x448a@t) (if x448a@t ((lambda (x448c@x) (if (eq? (cdr x448c@x) x4487@label) x4483@subst (x4289@dup-error x4486@name))) x448a@t) (cons x4482@a x4483@subst))) (assq x4486@name x4483@subst))) (car x4482@a) (cdr x4482@a)))) (if (null? x447c@s) x447d@subst (x4481@insert-to-subst (car x447c@s) (x428b@merge-substs (cdr x447c@s) x447d@subst))))) '#f))) (set! x428d@exclude* (lambda (x444c@sym* x444d@subst) ((lambda (x4451@exclude) (begin (set! x4451@exclude (lambda (x446a@sym x446b@subst) (if (null? x446b@subst) (x2fe3@syntax-violation 'import '"cannot rename unbound identifier" x446a@sym) (if (eq? x446a@sym (caar x446b@subst)) (values (cdar x446b@subst) (cdr x446b@subst)) ((lambda (x446e@a) (call-with-values (lambda () (x4451@exclude x446a@sym (cdr x446b@subst))) (lambda (x4474@x4471 x4475@x4473) ((lambda (x4478@subst x4479@old) (values x4479@old (cons x446e@a x4478@subst))) x4475@x4473 x4474@x4471)))) (car x446b@subst)))))) (if (null? x444c@sym*) (values '() x444d@subst) (call-with-values (lambda () (x4451@exclude (car x444c@sym*) x444d@subst)) (lambda (x4456@x4453 x4457@x4455) ((lambda (x445a@subst x445b@old) (call-with-values (lambda () (x428d@exclude* (cdr x444c@sym*) x445a@subst)) (lambda (x4462@x445f x4463@x4461) ((lambda (x4466@subst x4467@old*) (values (cons x445b@old x4467@old*) x4466@subst)) x4463@x4461 x4462@x445f)))) x4457@x4455 x4456@x4453)))))) '#f))) (set! x428f@find* (lambda (x4444@sym* x4445@subst) (map (lambda (x4448@x) ((lambda (x444a@t) (if x444a@t (cdr x444a@t) (x2fe3@syntax-violation 'import '"cannot find identifier" x4448@x))) (assq x4448@x x4445@subst))) x4444@sym*))) (set! x4291@rem* (lambda (x443c@sym* x443d@subst) ((letrec ((x4440@f (lambda (x4442@subst) (if (null? x4442@subst) '() (if (memq (caar x4442@subst) x443c@sym*) (x4440@f (cdr x4442@subst)) (cons (car x4442@subst) (x4440@f (cdr x4442@subst)))))))) x4440@f) x443d@subst))) (set! x4293@remove-dups (lambda (x443a@ls) (if (null? x443a@ls) '() (if (memq (car x443a@ls) (cdr x443a@ls)) (x4293@remove-dups (cdr x443a@ls)) (cons (car x443a@ls) (x4293@remove-dups (cdr x443a@ls))))))) (set! x4295@parse-library-name (lambda (x4352@spec) ((lambda (x4355@subversion? x4357@subversion-pred x4359@version-pred) (begin (set! x4355@subversion? (lambda (x4436@x) ((lambda (x4438@x) (and (integer? x4438@x) (exact? x4438@x) (>= x4438@x '0))) (x2fe9@syntax->datum x4436@x)))) (set! x4357@subversion-pred (lambda (x43d6@x*) ((lambda (x43d8@t) ((lambda (x43da@ls/false) (if (and x43da@ls/false (apply (lambda (x43dc@n) (x4355@subversion? x43dc@n)) x43da@ls/false)) (apply (lambda (x43de@n) (lambda (x43e0@x) (= x43e0@x (x2fe9@syntax->datum x43de@n)))) x43da@ls/false) ((lambda (x43e2@t) ((lambda (x43e4@ls/false) (if (and x43e4@ls/false (apply (lambda (x43e6@p? x43e7@sub*) (eq? (x2fe9@syntax->datum x43e6@p?) 'and)) x43e4@ls/false)) (apply (lambda (x43ea@p? x43eb@sub*) ((lambda (x43ee@p*) (lambda (x43f0@x) (for-all (lambda (x43f2@p) (x43f2@p x43f0@x)) x43ee@p*))) (map x4357@subversion-pred x43eb@sub*))) x43e4@ls/false) ((lambda (x43f4@t) ((lambda (x43f6@ls/false) (if (and x43f6@ls/false (apply (lambda (x43f8@p? x43f9@sub*) (eq? (x2fe9@syntax->datum x43f8@p?) 'or)) x43f6@ls/false)) (apply (lambda (x43fc@p? x43fd@sub*) ((lambda (x4400@p*) (lambda (x4402@x) (exists (lambda (x4404@p) (x4404@p x4402@x)) x4400@p*))) (map x4357@subversion-pred x43fd@sub*))) x43f6@ls/false) ((lambda (x4406@t) ((lambda (x4408@ls/false) (if (and x4408@ls/false (apply (lambda (x440a@p? x440b@sub) (eq? (x2fe9@syntax->datum x440a@p?) 'not)) x4408@ls/false)) (apply (lambda (x440e@p? x440f@sub) ((lambda (x4412@p) (lambda (x4414@x) (not (x4412@p x4414@x)))) (x4357@subversion-pred x440f@sub))) x4408@ls/false) ((lambda (x4416@t) ((lambda (x4418@ls/false) (if (and x4418@ls/false (apply (lambda (x441a@p? x441b@n) (and (eq? (x2fe9@syntax->datum x441a@p?) '<=) (x4355@subversion? x441b@n))) x4418@ls/false)) (apply (lambda (x441e@p? x441f@n) (lambda (x4422@x) (<= x4422@x (x2fe9@syntax->datum x441f@n)))) x4418@ls/false) ((lambda (x4424@t) ((lambda (x4426@ls/false) (if (and x4426@ls/false (apply (lambda (x4428@p? x4429@n) (and (eq? (x2fe9@syntax->datum x4428@p?) '>=) (x4355@subversion? x4429@n))) x4426@ls/false)) (apply (lambda (x442c@p? x442d@n) (lambda (x4430@x) (>= x4430@x (x2fe9@syntax->datum x442d@n)))) x4426@ls/false) ((lambda (x4432@t) ((lambda (x4434@ls/false) (if x4434@ls/false (apply (lambda () (x2fe3@syntax-violation 'import '"invalid sub-version spec" x4352@spec x43d6@x*)) x4434@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4432@t))) (x2efa@syntax-dispatch x4432@t '_))) x4424@t))) (x2efa@syntax-dispatch x4424@t '(any any)))) x4416@t))) (x2efa@syntax-dispatch x4416@t '(any any)))) x4406@t))) (x2efa@syntax-dispatch x4406@t '(any any)))) x43f4@t))) (x2efa@syntax-dispatch x43f4@t '(any . each-any)))) x43e2@t))) (x2efa@syntax-dispatch x43e2@t '(any . each-any)))) x43d8@t))) (x2efa@syntax-dispatch x43d8@t 'any))) x43d6@x*))) (set! x4359@version-pred (lambda (x4386@x*) ((lambda (x4388@t) ((lambda (x438a@ls/false) (if x438a@ls/false (apply (lambda () (lambda (x438c@x) '#t)) x438a@ls/false) ((lambda (x438e@t) ((lambda (x4390@ls/false) (if (and x4390@ls/false (apply (lambda (x4392@c x4393@ver*) (eq? (x2fe9@syntax->datum x4392@c) 'and)) x4390@ls/false)) (apply (lambda (x4396@c x4397@ver*) ((lambda (x439a@p*) (lambda (x439c@x) (for-all (lambda (x439e@p) (x439e@p x439c@x)) x439a@p*))) (map x4359@version-pred x4397@ver*))) x4390@ls/false) ((lambda (x43a0@t) ((lambda (x43a2@ls/false) (if (and x43a2@ls/false (apply (lambda (x43a4@c x43a5@ver*) (eq? (x2fe9@syntax->datum x43a4@c) 'or)) x43a2@ls/false)) (apply (lambda (x43a8@c x43a9@ver*) ((lambda (x43ac@p*) (lambda (x43ae@x) (exists (lambda (x43b0@p) (x43b0@p x43ae@x)) x43ac@p*))) (map x4359@version-pred x43a9@ver*))) x43a2@ls/false) ((lambda (x43b2@t) ((lambda (x43b4@ls/false) (if (and x43b4@ls/false (apply (lambda (x43b6@c x43b7@ver) (eq? (x2fe9@syntax->datum x43b6@c) 'not)) x43b4@ls/false)) (apply (lambda (x43ba@c x43bb@ver) ((lambda (x43be@p) (lambda (x43c0@x) (not (x43be@p x43c0@x)))) (x4359@version-pred x43bb@ver))) x43b4@ls/false) ((lambda (x43c2@t) ((lambda (x43c4@ls/false) (if x43c4@ls/false (apply (lambda (x43c6@sub*) ((lambda (x43c8@p*) (lambda (x43ca@x) ((letrec ((x43cc@f (lambda (x43ce@p* x43cf@x) (if (null? x43ce@p*) '#t (if (null? x43cf@x) '#f (and ((car x43ce@p*) (car x43cf@x)) (x43cc@f (cdr x43ce@p*) (cdr x43cf@x)))))))) x43cc@f) x43c8@p* x43ca@x))) (map x4357@subversion-pred x43c6@sub*))) x43c4@ls/false) ((lambda (x43d2@t) ((lambda (x43d4@ls/false) (if x43d4@ls/false (apply (lambda () (x2fe3@syntax-violation 'import '"invalid version spec" x4352@spec x4386@x*)) x43d4@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x43d2@t))) (x2efa@syntax-dispatch x43d2@t '_))) x43c2@t))) (x2efa@syntax-dispatch x43c2@t 'each-any))) x43b2@t))) (x2efa@syntax-dispatch x43b2@t '(any any)))) x43a0@t))) (x2efa@syntax-dispatch x43a0@t '(any . each-any)))) x438e@t))) (x2efa@syntax-dispatch x438e@t '(any . each-any)))) x4388@t))) (x2efa@syntax-dispatch x4388@t '()))) x4386@x*))) ((letrec ((x435a@f (lambda (x435c@x) ((lambda (x435e@t) ((lambda (x4360@ls/false) (if x4360@ls/false (apply (lambda (x4362@version-spec*) (values '() (x4359@version-pred x4362@version-spec*))) x4360@ls/false) ((lambda (x4364@t) ((lambda (x4366@ls/false) (if (and x4366@ls/false (apply (lambda (x4368@x x4369@x*) (x4287@idsyn? x4368@x)) x4366@ls/false)) (apply (lambda (x436c@x x436d@x*) (call-with-values (lambda () (x435a@f x436d@x*)) (lambda (x4374@x4371 x4375@x4373) ((lambda (x4378@pred x4379@name) (values (cons (x2fe9@syntax->datum x436c@x) x4379@name) x4378@pred)) x4375@x4373 x4374@x4371)))) x4366@ls/false) ((lambda (x437c@t) ((lambda (x437e@ls/false) (if x437e@ls/false (apply (lambda () (values '() (lambda (x4380@x) '#t))) x437e@ls/false) ((lambda (x4382@t) ((lambda (x4384@ls/false) (if x4384@ls/false (apply (lambda () (x2fe3@syntax-violation '#f '"invalid import spec" x4352@spec)) x4384@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4382@t))) (x2efa@syntax-dispatch x4382@t '_))) x437c@t))) (x2efa@syntax-dispatch x437c@t '()))) x4364@t))) (x2efa@syntax-dispatch x4364@t '(any . any)))) x435e@t))) (x2efa@syntax-dispatch x435e@t '(each-any)))) x435c@x)))) x435a@f) x4352@spec))) '#f '#f '#f))) (set! x4297@import-library (lambda (x4342@spec*) (call-with-values (lambda () (x4295@parse-library-name x4342@spec*)) (lambda (x4348@x4345 x4349@x4347) ((lambda (x434c@pred x434d@name) (begin (if (null? x434d@name) (x2fe3@syntax-violation 'import '"empty library name" x4342@spec*) (void)) ((lambda (x4350@lib) (begin (if (not x4350@lib) (x2fe3@syntax-violation 'import '"cannot find library with required name" x434d@name) (void)) (if (not (x434c@pred (x2ae4@x2956@library-version x4350@lib))) (x2fe3@syntax-violation 'import '"library does not satisfy version specification" x4342@spec* x4350@lib) (void)) ((x2f69@imp-collector) x4350@lib) (x2ae8@x295e@library-subst x4350@lib))) (x2b0c@x29a6@find-library-by-name x434d@name)))) x4349@x4347 x4348@x4345))))) (set! x4299@get-import (lambda (x42b4@spec) ((lambda (x42b6@t) ((lambda (x42b8@ls/false) (if (and x42b8@ls/false (apply (lambda (x42ba@x x42bb@x*) (not (memq (x2fe9@syntax->datum x42ba@x) '(for rename except only prefix library)))) x42b8@ls/false)) (apply (lambda (x42be@x x42bf@x*) (x4297@import-library (cons x42be@x x42bf@x*))) x42b8@ls/false) ((lambda (x42c2@t) ((lambda (x42c4@ls/false) (if (and x42c4@ls/false (apply (lambda (x42c6@rename x42c7@isp x42c8@old* x42c9@new*) (and (eq? (x2fe9@syntax->datum x42c6@rename) 'rename) (for-all x4287@idsyn? x42c8@old*) (for-all x4287@idsyn? x42c9@new*))) x42c4@ls/false)) (apply (lambda (x42ce@rename x42cf@isp x42d0@old* x42d1@new*) ((lambda (x42d6@subst x42d7@old* x42d8@new*) ((lambda (x42dc@old-label*) ((lambda (x42de@subst) (x428b@merge-substs (map cons x42d8@new* x42dc@old-label*) x42de@subst)) (x4291@rem* x42d7@old* x42d6@subst))) (x428f@find* x42d7@old* x42d6@subst))) (x4299@get-import x42cf@isp) (map x2fe9@syntax->datum x42d0@old*) (map x2fe9@syntax->datum x42d1@new*))) x42c4@ls/false) ((lambda (x42e0@t) ((lambda (x42e2@ls/false) (if (and x42e2@ls/false (apply (lambda (x42e4@except x42e5@isp x42e6@sym*) (and (eq? (x2fe9@syntax->datum x42e4@except) 'except) (for-all x4287@idsyn? x42e6@sym*))) x42e2@ls/false)) (apply (lambda (x42ea@except x42eb@isp x42ec@sym*) ((lambda (x42f0@subst) (x4291@rem* (map x2fe9@syntax->datum x42ec@sym*) x42f0@subst)) (x4299@get-import x42eb@isp))) x42e2@ls/false) ((lambda (x42f2@t) ((lambda (x42f4@ls/false) (if (and x42f4@ls/false (apply (lambda (x42f6@only x42f7@isp x42f8@sym*) (and (eq? (x2fe9@syntax->datum x42f6@only) 'only) (for-all x4287@idsyn? x42f8@sym*))) x42f4@ls/false)) (apply (lambda (x42fc@only x42fd@isp x42fe@sym*) ((lambda (x4302@subst x4303@sym*) ((lambda (x4306@sym*) ((lambda (x4308@lab*) (map cons x4306@sym* x4308@lab*)) (x428f@find* x4306@sym* x4302@subst))) (x4293@remove-dups x4303@sym*))) (x4299@get-import x42fd@isp) (map x2fe9@syntax->datum x42fe@sym*))) x42f4@ls/false) ((lambda (x430a@t) ((lambda (x430c@ls/false) (if (and x430c@ls/false (apply (lambda (x430e@prefix x430f@isp x4310@p) (and (eq? (x2fe9@syntax->datum x430e@prefix) 'prefix) (x4287@idsyn? x4310@p))) x430c@ls/false)) (apply (lambda (x4314@prefix x4315@isp x4316@p) ((lambda (x431a@subst x431b@prefix) (map (lambda (x431e@x) (cons (string->symbol (string-append x431b@prefix (symbol->string (car x431e@x)))) (cdr x431e@x))) x431a@subst)) (x4299@get-import x4315@isp) (symbol->string (x2fe9@syntax->datum x4316@p)))) x430c@ls/false) ((lambda (x4320@t) ((lambda (x4322@ls/false) (if (and x4322@ls/false (apply (lambda (x4324@library x4325@spec*) (eq? (x2fe9@syntax->datum x4324@library) 'library)) x4322@ls/false)) (apply (lambda (x4328@library x4329@spec*) (x4297@import-library x4329@spec*)) x4322@ls/false) ((lambda (x432c@t) ((lambda (x432e@ls/false) (if (and x432e@ls/false (apply (lambda (x4330@for x4331@isp x4332@rest) (eq? (x2fe9@syntax->datum x4330@for) 'for)) x432e@ls/false)) (apply (lambda (x4336@for x4337@isp x4338@rest) (x4299@get-import x4337@isp)) x432e@ls/false) ((lambda (x433c@t) ((lambda (x433e@ls/false) (if x433e@ls/false (apply (lambda (x4340@spec) (x2fe3@syntax-violation 'import '"invalid import spec" x4340@spec)) x433e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x433c@t))) (x2efa@syntax-dispatch x433c@t 'any))) x432c@t))) (x2efa@syntax-dispatch x432c@t '(any any . any)))) x4320@t))) (x2efa@syntax-dispatch x4320@t '(any each-any)))) x430a@t))) (x2efa@syntax-dispatch x430a@t '(any any any)))) x42f2@t))) (x2efa@syntax-dispatch x42f2@t '(any any . each-any)))) x42e0@t))) (x2efa@syntax-dispatch x42e0@t '(any any . each-any)))) x42c2@t))) (x2efa@syntax-dispatch x42c2@t '(any any . #(each (any any)))))) x42b6@t))) (x2efa@syntax-dispatch x42b6@t '(any . each-any)))) x42b4@spec))) (set! x429b@add-imports! (lambda (x42a4@imp x42a5@h) ((lambda (x42a8@subst) (for-each (lambda (x42aa@x) ((lambda (x42ac@name x42ad@label) ((lambda (x42b0@t) (if x42b0@t ((lambda (x42b2@l) (if (not (eq? x42b2@l x42ad@label)) (x4289@dup-error x42ac@name) (void))) x42b0@t) (hashtable-set! x42a5@h x42ac@name x42ad@label))) (hashtable-ref x42a5@h x42ac@name '#f))) (car x42aa@x) (cdr x42aa@x))) x42a8@subst)) (x4299@get-import x42a4@imp)))) (lambda (x429c@imp*) ((letrec ((x429e@f (lambda (x42a0@imp* x42a1@h) (if (null? x42a0@imp*) (hashtable-entries x42a1@h) (begin (x429b@add-imports! (car x42a0@imp*) x42a1@h) (x429e@f (cdr x42a0@imp*) x42a1@h)))))) x429e@f) x429c@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! x2f61@make-top-rib (lambda (x4492@names x4493@labels) ((lambda (x4496@rib) (begin (vector-for-each (lambda (x4498@name x4499@label) (begin (if (not (symbol? x4498@name)) (error 'make-top-rib '"BUG: not a symbol" x4498@name) (void)) (x2ca2@extend-rib/nc! x4496@rib (x2cb9@make-stx x4498@name x2c6b@top-mark* '() '()) x4499@label))) x4492@names x4493@labels) x4496@rib)) (x2c9e@make-empty-rib)))) (set! x2f63@make-collector (lambda () ((lambda (x449c@ls) (lambda x44a0 ((lambda (x44a1) (if (= x44a1 '0) (apply (lambda () x449c@ls) x44a0) (if (= x44a1 '1) (apply (lambda (x449e@x) (set! x449c@ls (x2c64@set-cons x449e@x x449c@ls))) x44a0) (error 'apply '"invalid arg count")))) (length x44a0)))) '()))) (set! x2f65@inv-collector (x2899@x27c3@make-parameter (lambda x44a2@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (x44a4@x) (begin (if (not (procedure? x44a4@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" x44a4@x) (void)) x44a4@x)))) (set! x2f67@vis-collector (x2899@x27c3@make-parameter (lambda x44a6@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (x44a8@x) (begin (if (not (procedure? x44a8@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" x44a8@x) (void)) x44a8@x)))) (set! x2f69@imp-collector (x2899@x27c3@make-parameter (lambda x44aa@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (x44ac@x) (begin (if (not (procedure? x44ac@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" x44ac@x) (void)) x44ac@x)))) (set! x2f6b@chi-library-internal (lambda (x44ae@e* x44af@rib x44b0@top?) (call-with-values (lambda () (x2f55@chi-body* x44ae@e* '() '() '() '() '() '() '() x44af@rib x44b0@top?)) (lambda (x44c4@x44b5 x44c5@x44b7 x44c6@x44b9 x44c7@x44bb x44c8@x44bd x44c9@x44bf x44ca@x44c1 x44cb@x44c3) ((lambda (x44d4@exp* x44d5@_kwd* x44d6@mod** x44d7@rhs* x44d8@lex* x44d9@mr x44da@r x44db@e*) (values (append (apply append (reverse x44d6@mod**)) x44db@e*) x44da@r x44d9@mr (reverse x44d8@lex*) (reverse x44d7@rhs*) x44d4@exp*)) x44cb@x44c3 x44ca@x44c1 x44c9@x44bf x44c8@x44bd x44c7@x44bb x44c6@x44b9 x44c5@x44b7 x44c4@x44b5))))) (set! x2f6d@chi-interaction-expr (lambda (x44e4@e x44e5@rib x44e6@r) (call-with-values (lambda () (x2f55@chi-body* (list x44e4@e) x44e6@r x44e6@r '() '() '() '() '() x44e5@rib '#t)) (lambda (x44fa@x44eb x44fb@x44ed x44fc@x44ef x44fd@x44f1 x44fe@x44f3 x44ff@x44f5 x4500@x44f7 x4501@x44f9) ((lambda (x450a@_exp* x450b@_kwd* x450c@mod** x450d@rhs* x450e@lex* x450f@mr x4510@r x4511@e*) ((lambda (x451a@e*) ((lambda (x451c@e) (values x451c@e x4510@r)) (if (null? x451a@e*) (x2c4f@x2bbf@build-void) (if (null? (cdr x451a@e*)) (car x451a@e*) (x2c4e@x2bbd@build-sequence '#f x451a@e*))))) (x2f2a@expand-interaction-rhs*/init* (reverse x450e@lex*) (reverse x450d@rhs*) (append (apply append (reverse x450c@mod**)) x4511@e*) x4510@r x450f@mr))) x4501@x44f9 x4500@x44f7 x44ff@x44f5 x44fe@x44f3 x44fd@x44f1 x44fc@x44ef x44fb@x44ed x44fa@x44eb))))) (set! x2f6f@library-body-expander (lambda (x451e@name x451f@main-exp* x4520@imp* x4521@b* x4522@top?) ((lambda (x4529@itc) (begin (set! x4529@itc (x2f63@make-collector)) ((lambda (x4532@x452b x4533@x452d x4534@x452f x4535@x4531) ((lambda (x453a@swap) (dynamic-wind x453a@swap (lambda () (call-with-values (lambda () (x2f5f@parse-import-spec* x4520@imp*)) (lambda (x4540@x453d x4541@x453f) ((lambda (x4544@subst-labels x4545@subst-names) ((lambda (x4548@rib) ((lambda (x454b@wrap) (begin (set! x454b@wrap (lambda (x45c6@x) (x2cb9@make-stx x45c6@x x2c6b@top-mark* (list x4548@rib) '()))) ((lambda (x454c@b* x454d@main-exp* x454e@rtc x454f@vtc) ((lambda (x455c@x4555 x455d@x4557 x455e@x4559 x455f@x455b) ((lambda (x4564@swap) (dynamic-wind x4564@swap (lambda () (call-with-values (lambda () (x2f6b@chi-library-internal x454c@b* x4548@rib x4522@top?)) (lambda (x4572@x4567 x4573@x4569 x4574@x456b x4575@x456d x4576@x456f x4577@x4571) ((lambda (x457e@internal-exp* x457f@rhs* x4580@lex* x4581@mr x4582@r x4583@init*) (call-with-values (lambda () (x2f59@parse-exports (append x454d@main-exp* x457e@internal-exp*))) (lambda (x458e@x458b x458f@x458d) ((lambda (x4592@exp-id* x4593@exp-name*) (begin (x2ca6@seal-rib! x4548@rib) ((lambda (x4596@init*) ((lambda (x4598@rhs*) ((lambda () (begin (x2ca8@unseal-rib! x4548@rib) ((lambda (x459a@loc* x459b@export-subst) ((lambda (x459f@errstr) (begin (set! x459f@errstr '"attempt to export mutated variable") (call-with-values (lambda () (x2fcf@make-export-env/macros x4580@lex* x459a@loc* x4582@r)) (lambda (x45a6@x45a1 x45a7@x45a3 x45a8@x45a5) ((lambda (x45ac@macro* x45ad@global* x45ae@export-env) (begin (for-each (lambda (x45b2@s) ((lambda (x45b4@name x45b5@label) ((lambda (x45b8@p) (if x45b8@p ((lambda (x45ba@b) ((lambda (x45bc@type) (if (eq? x45bc@type 'mutable) (x2fe3@syntax-violation 'export x459f@errstr x45b4@name) (void))) (car x45ba@b))) (cdr x45b8@p)) (void))) (assq x45b5@label x45ae@export-env))) (car x45b2@s) (cdr x45b2@s))) x459b@export-subst) ((lambda (x45be@invoke-body x45bf@invoke-definitions) (values (x4529@itc) (x454e@rtc) (x454f@vtc) (x2c4e@x2bbd@build-sequence '#f (append x45bf@invoke-definitions (list x45be@invoke-body))) x45ac@macro* x459b@export-subst x45ae@export-env)) (x2c51@x2bc3@build-letrec* '#f x4580@lex* x4598@rhs* (x2fcb@build-exports x45ad@global* x4596@init*)) (map x2c4a@x2b1a@build-global-define (map cdr x45ad@global*))))) x45a8@x45a5 x45a7@x45a3 x45a6@x45a1))))) '#f)) (map x2c71@gen-global x4580@lex*) (x2fcd@make-export-subst x4593@exp-name* x4592@exp-id*)))))) (x2f2c@chi-rhs* x457f@rhs* x4582@r x4581@mr))) (x2f18@chi-expr* x4583@init* x4582@r x4581@mr)))) x458f@x458d x458e@x458b)))) x4577@x4571 x4576@x456f x4575@x456d x4574@x456b x4573@x4569 x4572@x4567)))) x4564@swap)) (lambda () (begin ((lambda (x45c2@t) (begin (x455c@x4555 x455e@x4559) (set! x455e@x4559 x45c2@t))) (x455c@x4555)) ((lambda (x45c4@t) (begin (x455d@x4557 x455f@x455b) (set! x455f@x455b x45c4@t))) (x455d@x4557)))))) x2f65@inv-collector x2f67@vis-collector x454e@rtc x454f@vtc)) (map x454b@wrap x4521@b*) (map x454b@wrap x451f@main-exp*) (x2f63@make-collector) (x2f63@make-collector)))) '#f)) (x2f61@make-top-rib x4545@subst-names x4544@subst-labels))) x4541@x453f x4540@x453d)))) x453a@swap)) (lambda () (begin ((lambda (x45c8@t) (begin (x4532@x452b x4534@x452f) (set! x4534@x452f x45c8@t))) (x4532@x452b)) ((lambda (x45ca@t) (begin (x4533@x452d x4535@x4531) (set! x4535@x4531 x45ca@t))) (x4533@x452d)))))) x2f69@imp-collector x2ff1@top-level-context x4529@itc '#f))) '#f))) (set! x2f71@core-library-expander (lambda (x45cc@e x45cd@verify-name) (call-with-values (lambda () (x2f5d@parse-library x45cc@e)) (lambda (x45d8@x45d1 x45d9@x45d3 x45da@x45d5 x45db@x45d7) ((lambda (x45e0@b* x45e1@imp* x45e2@exp* x45e3@name*) (call-with-values (lambda () (x2f5b@parse-library-name x45e3@name*)) (lambda (x45ec@x45e9 x45ed@x45eb) ((lambda (x45f0@ver x45f1@name) (begin (x45cd@verify-name x45f1@name) (call-with-values (lambda () (x2f6f@library-body-expander x45f1@name x45e2@exp* x45e1@imp* x45e0@b* '#f)) (lambda (x4602@x45f5 x4603@x45f7 x4604@x45f9 x4605@x45fb x4606@x45fd x4607@x45ff x4608@x4601) ((lambda (x4610@export-env x4611@export-subst x4612@visit-code x4613@invoke-code x4614@visit-req* x4615@invoke-req* x4616@imp*) (values x45f1@name x45f0@ver x4616@imp* x4615@invoke-req* x4614@visit-req* x4613@invoke-code x4612@visit-code x4611@export-subst x4610@export-env)) x4608@x4601 x4607@x45ff x4606@x45fd x4605@x45fb x4604@x45f9 x4603@x45f7 x4602@x45f5))))) x45ed@x45eb x45ec@x45e9)))) x45db@x45d7 x45da@x45d5 x45d9@x45d3 x45d8@x45d1))))) (set! x2f73@parse-top-level-program (lambda (x461e@e*) ((lambda (x4620@t) ((lambda (x4622@ls/false) (if (and x4622@ls/false (apply (lambda (x4624@import x4625@imp* x4626@b*) (eq? (x2fe9@syntax->datum x4624@import) 'import)) x4622@ls/false)) (apply (lambda (x462a@import x462b@imp* x462c@b*) (values x462b@imp* x462c@b*)) x4622@ls/false) ((lambda (x4630@t) ((lambda (x4632@ls/false) (if (and x4632@ls/false (apply (lambda (x4634@import x4635@x x4636@y) (eq? (x2fe9@syntax->datum x4634@import) 'import)) x4632@ls/false)) (apply (lambda (x463a@import x463b@x x463c@y) (x2fe3@syntax-violation 'expander '"invalid syntax of top-level program" (x2ce9@syntax-car x461e@e*))) x4632@ls/false) ((lambda (x4640@t) ((lambda (x4642@ls/false) (if x4642@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) x4642@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4640@t))) (x2efa@syntax-dispatch x4640@t '_))) x4630@t))) (x2efa@syntax-dispatch x4630@t '((any . any) . any)))) x4620@t))) (x2efa@syntax-dispatch x4620@t '((any . each-any) . each-any)))) x461e@e*))) (set! x2f75@top-level-expander (lambda (x4644@e*) (call-with-values (lambda () (x2f73@parse-top-level-program x4644@e*)) (lambda (x464a@x4647 x464b@x4649) ((lambda (x464e@b* x464f@imp*) (call-with-values (lambda () (x2f6f@library-body-expander '() '() x464f@imp* x464e@b* '#t)) (lambda (x4660@x4653 x4661@x4655 x4662@x4657 x4663@x4659 x4664@x465b x4665@x465d x4666@x465f) ((lambda (x466e@export-env x466f@export-subst x4670@visit-code x4671@invoke-code x4672@visit-req* x4673@invoke-req* x4674@imp*) (values x4673@invoke-req* x4671@invoke-code)) x4666@x465f x4665@x465d x4664@x465b x4663@x4659 x4662@x4657 x4661@x4655 x4660@x4653)))) x464b@x4649 x464a@x4647))))) (set! x2f7b@x2f76 (make-record-type-descriptor 'env '#f 'x2f79 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! x2f7d@x2f78 '#f) (set! x2f7f@x2f77 (make-record-constructor-descriptor x2f7b@x2f76 '#f x2f7d@x2f78)) (set! x2f82@env? (record-predicate x2f7b@x2f76)) (set! x2f84@make-env (record-constructor x2f7f@x2f77)) (set! x2f86@env-names (record-accessor x2f7b@x2f76 '0)) (set! x2f88@env-labels (record-accessor x2f7b@x2f76 '1)) (set! x2f8a@env-itc (record-accessor x2f7b@x2f76 '2)) (set! x2f8c@set-env-names! (record-mutator x2f7b@x2f76 '0)) (set! x2f8e@set-env-labels! (record-mutator x2f7b@x2f76 '1)) (set! x2f90@set-env-itc! (record-mutator x2f7b@x2f76 '2)) (set! x2f92@rp (x2896@x27bd@make-record-printer 'env (lambda (x467c@x x467d@p x467e@wr) (display '"#<environment>" x467d@p)))) (set! x2f98@x2f93 (make-record-type-descriptor 'interaction-env '#f 'x2f96 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! x2f9a@x2f95 '#f) (set! x2f9c@x2f94 (make-record-constructor-descriptor x2f98@x2f93 '#f x2f9a@x2f95)) (set! x2f9f@interaction-env? (record-predicate x2f98@x2f93)) (set! x2fa1@make-interaction-env (record-constructor x2f9c@x2f94)) (set! x2fa3@interaction-env-rib (record-accessor x2f98@x2f93 '0)) (set! x2fa5@interaction-env-r (record-accessor x2f98@x2f93 '1)) (set! x2fa7@interaction-env-locs (record-accessor x2f98@x2f93 '2)) (set! x2fa9@set-interaction-env-rib! (record-mutator x2f98@x2f93 '0)) (set! x2fab@set-interaction-env-r! (record-mutator x2f98@x2f93 '1)) (set! x2fad@set-interaction-env-locs! (record-mutator x2f98@x2f93 '2)) (set! x2faf@rp (x2896@x27bd@make-record-printer 'interaction-env (lambda (x4682@x x4683@p x4684@wr) (display '"#<environment>" x4683@p)))) (set! x2fb1@interaction-environment-symbols (lambda () (x2fb9@environment-symbols (x2fef@interaction-environment)))) (set! x2fb3@environment-bindings (lambda (x4688@e) (vector->list (vector-map (lambda (x468a@name x468b@label) (x2fb5@parse-binding (cons x468a@name (x2b12@x29b2@imported-label->binding x468b@label)))) (x2f86@env-names x4688@e) (x2f88@env-labels x4688@e))))) (set! x2fb5@parse-binding (lambda (x468e@b) (cons (car x468e@b) ((lambda (x4690@t) (if (memv x4690@t '(core-prim global)) 'procedure (if (memv x4690@t '(core-macro macro global-macro)) 'syntax (if (memv x4690@t '($core-rtd)) 'record (if (eq? (car x468e@b) (cadr x468e@b)) 'syntax 'unknown))))) (cadr x468e@b))))) (set! x2fb7@environment? (lambda (x4692@x) (or (x2f82@env? x4692@x) (x2f9f@interaction-env? x4692@x)))) (set! x2fb9@environment-symbols (lambda (x4694@x) (if (x2f82@env? x4694@x) (vector->list (x2f86@env-names x4694@x)) (if (x2f9f@interaction-env? x4694@x) (map values (x2c8a@rib-sym* (x2fa3@interaction-env-rib x4694@x))) (assertion-violation 'environment-symbols '"not an environment" x4694@x))))) (set! x2fbb@environment (lambda x4696@imp* ((lambda (x4698@itc) ((lambda (x469e@x469b x469f@x469d) ((lambda (x46a2@swap) (dynamic-wind x46a2@swap (lambda () (call-with-values (lambda () (x2f5f@parse-import-spec* x4696@imp*)) (lambda (x46a8@x46a5 x46a9@x46a7) ((lambda (x46ac@subst-labels x46ad@subst-names) (x2f84@make-env x46ad@subst-names x46ac@subst-labels x4698@itc)) x46a9@x46a7 x46a8@x46a5)))) x46a2@swap)) (lambda () ((lambda (x46b0@t) (begin (x469e@x469b x469f@x469d) (set! x469f@x469d x46b0@t))) (x469e@x469b))))) x2f69@imp-collector x4698@itc)) (x2f63@make-collector)))) (set! x2fbd@null-environment (lambda (x46b2@n) (begin (if (not (eqv? x46b2@n '5)) (assertion-violation 'null-environment '"not 5" x46b2@n) (void)) (x2fbb@environment '(psyntax null-environment-5))))) (set! x2fbf@scheme-report-environment (lambda (x46b4@n) (begin (if (not (eqv? x46b4@n '5)) (assertion-violation 'scheme-report-environment '"not 5" x46b4@n) (void)) (x2fbb@environment '(psyntax scheme-report-environment-5))))) (set! x2fc1@expand (lambda (x46b6@x x46b7@env) (if (x2f82@env? x46b7@env) ((lambda (x46ba@rib) ((lambda (x46bc@x x46bd@itc x46be@rtc x46bf@vtc) ((lambda (x46c4@x) (begin (x2ca6@seal-rib! x46ba@rib) (values x46c4@x (x46be@rtc)))) ((lambda (x46d6@x46c7 x46d7@x46c9 x46d8@x46cb x46d9@x46cd x46da@x46cf x46db@x46d1 x46dc@x46d3 x46dd@x46d5) ((lambda (x46e6@swap) (dynamic-wind x46e6@swap (lambda () (x2f1c@chi-expr x46bc@x '() '())) x46e6@swap)) (lambda () (begin ((lambda (x46e8@t) (begin (x46d6@x46c7 x46da@x46cf) (set! x46da@x46cf x46e8@t))) (x46d6@x46c7)) ((lambda (x46ea@t) (begin (x46d7@x46c9 x46db@x46d1) (set! x46db@x46d1 x46ea@t))) (x46d7@x46c9)) ((lambda (x46ec@t) (begin (x46d8@x46cb x46dc@x46d3) (set! x46dc@x46d3 x46ec@t))) (x46d8@x46cb)) ((lambda (x46ee@t) (begin (x46d9@x46cd x46dd@x46d5) (set! x46dd@x46d5 x46ee@t))) (x46d9@x46cd)))))) x2ff1@top-level-context x2f65@inv-collector x2f67@vis-collector x2f69@imp-collector '#f x46be@rtc x46bf@vtc x46bd@itc))) (x2cb9@make-stx x46b6@x x2c6b@top-mark* (list x46ba@rib) '()) (x2f8a@env-itc x46b7@env) (x2f63@make-collector) (x2f63@make-collector))) (x2f61@make-top-rib (x2f86@env-names x46b7@env) (x2f88@env-labels x46b7@env))) (if (x2f9f@interaction-env? x46b7@env) ((lambda (x46f0@rib x46f1@r x46f2@rtc) ((lambda (x46f6@x) (call-with-values (lambda () ((lambda (x470c@x46fd x470d@x46ff x470e@x4701 x470f@x4703 x4710@x4705 x4711@x4707 x4712@x4709 x4713@x470b) ((lambda (x471c@swap) (dynamic-wind x471c@swap (lambda () (x2f6d@chi-interaction-expr x46f6@x x46f0@rib x46f1@r)) x471c@swap)) (lambda () (begin ((lambda (x471e@t) (begin (x470c@x46fd x4710@x4705) (set! x4710@x4705 x471e@t))) (x470c@x46fd)) ((lambda (x4720@t) (begin (x470d@x46ff x4711@x4707) (set! x4711@x4707 x4720@t))) (x470d@x46ff)) ((lambda (x4722@t) (begin (x470e@x4701 x4712@x4709) (set! x4712@x4709 x4722@t))) (x470e@x4701)) ((lambda (x4724@t) (begin (x470f@x4703 x4713@x470b) (set! x4713@x470b x4724@t))) (x470f@x4703)))))) x2ff1@top-level-context x2f65@inv-collector x2f67@vis-collector x2f69@imp-collector x46b7@env x46f2@rtc (x2f63@make-collector) (x2f63@make-collector))) (lambda (x4726@x46f9 x4727@x46fb) ((lambda (x472a@r^ x472b@e) (begin (x2fab@set-interaction-env-r! x46b7@env x472a@r^) (values x472b@e (x46f2@rtc)))) x4727@x46fb x4726@x46f9)))) (x2cb9@make-stx x46b6@x x2c6b@top-mark* (list x46f0@rib) '()))) (x2fa3@interaction-env-rib x46b7@env) (x2fa5@interaction-env-r x46b7@env) (x2f63@make-collector)) (assertion-violation 'expand '"not an environment" x46b7@env))))) (set! x2fc3@eval (lambda (x472e@x x472f@env) (begin (if (not (x2fb7@environment? x472f@env)) (error 'eval '"not an environment" x472f@env) (void)) (call-with-values (lambda () (x2fc1@expand x472e@x x472f@env)) (lambda (x4736@x4733 x4737@x4735) ((lambda (x473a@invoke-req* x473b@x) (begin (for-each x2b13@x29b4@invoke-library x473a@invoke-req*) (eval-core (x28ed@x28a5@expanded->core x473b@x)))) x4737@x4735 x4736@x4733)))))) (set! x2fc5@library-expander (lambda x47ac ((lambda (x47ad) (if (= x47ad '3) (apply (lambda (x473e@x x473f@filename x4740@verify-name) ((lambda (x4745@build-visit-code x4747@visit!) (begin (set! x4745@build-visit-code (lambda (x479a@macro*) (if (null? x479a@macro*) (x2c4f@x2bbf@build-void) (x2c4e@x2bbd@build-sequence '#f (map (lambda (x479c@x) ((lambda (x479e@loc x479f@src) (list 'set! x479e@loc x479f@src)) (car x479c@x) (cddr x479c@x))) x479a@macro*))))) (set! x4747@visit! (lambda (x4792@macro*) (for-each (lambda (x4794@x) ((lambda (x4796@loc x4797@proc) (set-symbol-value! x4796@loc x4797@proc)) (car x4794@x) (cadr x4794@x))) x4792@macro*))) (call-with-values (lambda () (x2f71@core-library-expander x473e@x x4740@verify-name)) (lambda (x475a@x4749 x475b@x474b x475c@x474d x475d@x474f x475e@x4751 x475f@x4753 x4760@x4755 x4761@x4757 x4762@x4759) ((lambda (x476c@export-env x476d@export-subst x476e@macro* x476f@invoke-code x4770@vis* x4771@inv* x4772@imp* x4773@ver x4774@name) ((lambda (x477e@id x477f@name x4780@ver x4781@imp* x4782@vis* x4783@inv* x4784@visit-proc x4785@invoke-proc x4786@visit-code x4787@invoke-code) (begin (x2b11@x29b0@install-library x477e@id x477f@name x4780@ver x4781@imp* x4782@vis* x4783@inv* x476d@export-subst x476c@export-env x4784@visit-proc x4785@invoke-proc x4786@visit-code x4787@invoke-code '#t x473f@filename) (values x477e@id x477f@name x4780@ver x4781@imp* x4782@vis* x4783@inv* x4787@invoke-code x4786@visit-code x476d@export-subst x476c@export-env))) (gensym) x4774@name x4773@ver (map x2b17@x29bc@library-spec x4772@imp*) (map x2b17@x29bc@library-spec x4770@vis*) (map x2b17@x29bc@library-spec x4771@inv*) (lambda () (x4747@visit! x476e@macro*)) (lambda () (eval-core (x28ed@x28a5@expanded->core x476f@invoke-code))) (x4745@build-visit-code x476e@macro*) x476f@invoke-code)) x4762@x4759 x4761@x4757 x4760@x4755 x475f@x4753 x475e@x4751 x475d@x474f x475c@x474d x475b@x474b x475a@x4749))))) '#f '#f)) x47ac) (if (= x47ad '2) (apply (lambda (x47a2@x x47a3@filename) (x2fc5@library-expander x47a2@x x47a3@filename (lambda (x47a6@x) (values)))) x47ac) (if (= x47ad '1) (apply (lambda (x47a8@x) (x2fc5@library-expander x47a8@x '#f (lambda (x47aa@x) (values)))) x47ac) (error 'apply '"invalid arg count"))))) (length x47ac)))) (set! x2fc7@boot-library-expand (lambda (x47ae@x) (call-with-values (lambda () (x2fc5@library-expander x47ae@x)) (lambda (x47c4@x47b1 x47c5@x47b3 x47c6@x47b5 x47c7@x47b7 x47c8@x47b9 x47c9@x47bb x47ca@x47bd x47cb@x47bf x47cc@x47c1 x47cd@x47c3) ((lambda (x47d8@export-env x47d9@export-subst x47da@visit-code x47db@invoke-code x47dc@inv* x47dd@vis* x47de@imp* x47df@ver x47e0@name x47e1@id) (values x47e0@name x47db@invoke-code x47d9@export-subst x47d8@export-env)) x47cd@x47c3 x47cc@x47c1 x47cb@x47bf x47ca@x47bd x47c9@x47bb x47c8@x47b9 x47c7@x47b7 x47c6@x47b5 x47c5@x47b3 x47c4@x47b1))))) (set! x2fc9@rev-map-append (lambda (x47ec@f x47ed@ls x47ee@ac) (if (null? x47ed@ls) x47ee@ac (x2fc9@rev-map-append x47ec@f (cdr x47ed@ls) (cons (x47ec@f (car x47ed@ls)) x47ee@ac))))) (set! x2fcb@build-exports (lambda (x47f2@lex*+loc* x47f3@init*) (x2c4e@x2bbd@build-sequence '#f (cons (x2c4f@x2bbf@build-void) (x2fc9@rev-map-append (lambda (x47f6@x) (list 'set! (cdr x47f6@x) (car x47f6@x))) x47f2@lex*+loc* x47f3@init*))))) (set! x2fcd@make-export-subst (lambda (x47f8@name* x47f9@id*) (map (lambda (x47fc@name x47fd@id) ((lambda (x4800@label) (begin (if (not x4800@label) (x2fe3@syntax-violation '#f '"cannot export unbound identifier" x47fd@id) (void)) (cons x47fc@name x4800@label))) (x2d09@id->label x47fd@id))) x47f8@name* x47f9@id*))) (set! x2fcf@make-export-env/macros (lambda (x4802@lex* x4803@loc* x4804@r) ((lambda (x4809@lookup) (begin (set! x4809@lookup (lambda (x4826@x) ((letrec ((x4828@f (lambda (x482a@x x482b@lex* x482c@loc*) (if (pair? x482b@lex*) (if (eq? x482a@x (car x482b@lex*)) (car x482c@loc*) (x4828@f x482a@x (cdr x482b@lex*) (cdr x482c@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) x4828@f) x4826@x x4802@lex* x4803@loc*))) ((letrec ((x480a@f (lambda (x480c@r x480d@env x480e@global* x480f@macro*) (if (null? x480c@r) (values x480d@env x480e@global* x480f@macro*) ((lambda (x4814@x) ((lambda (x4816@label x4817@b) ((lambda (x481a@t) (if (memv x481a@t '(lexical)) ((lambda (x481c@v) ((lambda (x481e@loc x481f@type) (x480a@f (cdr x480c@r) (cons (cons* x4816@label x481f@type x481e@loc) x480d@env) (cons (cons (x2e86@lexical-var x481c@v) x481e@loc) x480e@global*) x480f@macro*)) (x4809@lookup (x2e86@lexical-var x481c@v)) (if (x2e88@lexical-mutable? x481c@v) 'mutable 'global))) (x2d13@binding-value x4817@b)) (if (memv x481a@t '(local-macro)) ((lambda (x4822@loc) (x480a@f (cdr x480c@r) (cons (cons* x4816@label 'global-macro x4822@loc) x480d@env) x480e@global* (cons (cons x4822@loc (x2d13@binding-value x4817@b)) x480f@macro*))) (gensym)) (if (memv x481a@t '(local-macro!)) ((lambda (x4824@loc) (x480a@f (cdr x480c@r) (cons (cons* x4816@label 'global-macro! x4824@loc) x480d@env) x480e@global* (cons (cons x4824@loc (x2d13@binding-value x4817@b)) x480f@macro*))) (gensym)) (if (memv x481a@t '($rtd $module)) (x480a@f (cdr x480c@r) (cons x4814@x x480d@env) x480e@global* x480f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (x2d11@binding-type x4817@b) (x2d13@binding-value x4817@b))))))) (x2d11@binding-type x4817@b))) (car x4814@x) (cdr x4814@x))) (car x480c@r)))))) x480a@f) x4804@r '() '() '()))) '#f))) (set! x2fd1@generate-temporaries (lambda (x4830@ls) ((lambda (x4832@t) ((lambda (x4834@ls/false) (if x4834@ls/false (apply (lambda (x4836@ls) (map (lambda (x4838@x) (x2cb9@make-stx ((lambda (x483a@x) (if (or (symbol? x483a@x) (string? x483a@x)) (gensym x483a@x) (gensym 't))) (x2fe9@syntax->datum x4838@x)) x2c6b@top-mark* '() '())) x4836@ls)) x4834@ls/false) ((lambda (x483c@t) ((lambda (x483e@ls/false) (if x483e@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) x483e@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x483c@t))) (x2efa@syntax-dispatch x483c@t '_))) x4832@t))) (x2efa@syntax-dispatch x4832@t 'each-any))) x4830@ls))) (set! x2fd3@free-identifier=? (lambda (x4840@x x4841@y) (if (x2cef@id? x4840@x) (if (x2cef@id? x4841@y) (x2cf7@free-id=? x4840@x x4841@y) (assertion-violation 'free-identifier=? '"not an identifier" x4841@y)) (assertion-violation 'free-identifier=? '"not an identifier" x4840@x)))) (set! x2fd5@bound-identifier=? (lambda (x4844@x x4845@y) (if (x2cef@id? x4844@x) (if (x2cef@id? x4845@y) (x2cf5@bound-id=? x4844@x x4845@y) (assertion-violation 'bound-identifier=? '"not an identifier" x4845@y)) (assertion-violation 'bound-identifier=? '"not an identifier" x4844@x)))) (set! x2fd7@make-source-condition (lambda (x4848@x) ((lambda (x4852@x484d x4854@x484f x4856@x484e x4859@x484c x485b@make-source-condition x485d@x484a x485f@x484b x4861@source-condition? x4863@source-filename x4865@source-character) (begin (set! x4852@x484d (make-record-type-descriptor '&source-information x4cb0@x49f7@&condition-rtd 'x4850 '#f '#f '#((immutable file-name) (immutable character)))) (set! x4854@x484f '#f) (set! x4856@x484e (make-record-constructor-descriptor x4852@x484d x4cb1@x49f9@&condition-rcd x4854@x484f)) (set! x4859@x484c (record-predicate x4852@x484d)) (set! x485b@make-source-condition (record-constructor x4856@x484e)) (set! x485d@x484a (record-accessor x4852@x484d '0)) (set! x485f@x484b (record-accessor x4852@x484d '1)) (set! x4861@source-condition? (condition-predicate x4852@x484d)) (set! x4863@source-filename (condition-accessor x4852@x484d x485d@x484a)) (set! x4865@source-character (condition-accessor x4852@x484d x485f@x484b)) (if (pair? x4848@x) (x485b@make-source-condition (car x4848@x) (cdr x4848@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! x2fd9@extract-position-condition (lambda (x4866@x) (x2fd7@make-source-condition (x2fdb@expression-position x4866@x)))) (set! x2fdb@expression-position (lambda (x4868@x) (and (x2cb7@stx? x4868@x) ((lambda (x486a@x) (and (x288e@x27ad@annotation? x486a@x) (x288f@x27af@annotation-source x486a@x))) (x2cbb@stx-expr x4868@x))))) (set! x2fdd@assertion-error (lambda (x486c@expr x486d@pos) (raise (condition (x4ce0@x4abb@make-assertion-violation) (x4cf2@x4aed@make-who-condition 'assert) (x4cb6@x4a4e@make-message-condition '"assertion failed") (x4ce8@x4ad2@make-irritants-condition (list x486c@expr)) (x2fd7@make-source-condition x486d@pos))))) (set! x2fdf@syntax-error (lambda (x4870@x . x4872@args) (begin (if (not (for-all string? x4872@args)) (assertion-violation 'syntax-error '"invalid argument" x4872@args) (void)) (raise (condition (x4cb6@x4a4e@make-message-condition (if (null? x4872@args) '"invalid syntax" (apply string-append x4872@args))) (x4d14@x4b49@make-syntax-violation (x2fe9@syntax->datum x4870@x) '#f) (x2fd9@extract-position-condition x4870@x)))))) (set! x2fe1@syntax-violation* (lambda (x4874@who x4875@msg x4876@form x4877@condition-object) (begin (if (not (string? x4875@msg)) (assertion-violation 'syntax-violation '"message is not a string" x4875@msg) (void)) ((lambda (x487c@who) (raise (condition (if x487c@who (x4cf2@x4aed@make-who-condition x487c@who) (condition)) (x4cb6@x4a4e@make-message-condition x4875@msg) x4877@condition-object (x2fd9@extract-position-condition x4876@form)))) (if (or (string? x4874@who) (symbol? x4874@who)) x4874@who (if (not x4874@who) ((lambda (x487e@t) ((lambda (x4880@ls/false) (if (and x4880@ls/false (apply (lambda (x4882@id) (x2cef@id? x4882@id)) x4880@ls/false)) (apply (lambda (x4884@id) (x2fe9@syntax->datum x4884@id)) x4880@ls/false) ((lambda (x4886@t) ((lambda (x4888@ls/false) (if (and x4888@ls/false (apply (lambda (x488a@id x488b@rest) (x2cef@id? x488a@id)) x4888@ls/false)) (apply (lambda (x488e@id x488f@rest) (x2fe9@syntax->datum x488e@id)) x4888@ls/false) ((lambda (x4892@t) ((lambda (x4894@ls/false) (if x4894@ls/false (apply (lambda () '#f) x4894@ls/false) (x2fe3@syntax-violation '#f '"invalid syntax" x4892@t))) (x2efa@syntax-dispatch x4892@t '_))) x4886@t))) (x2efa@syntax-dispatch x4886@t '(any . any)))) x487e@t))) (x2efa@syntax-dispatch x487e@t 'any))) x4876@form) (assertion-violation 'syntax-violation '"invalid who argument" x4874@who))))))) (set! x2fe3@syntax-violation (lambda x48a4 ((lambda (x48a5) (if (= x48a5 '3) (apply (lambda (x4896@who x4897@msg x4898@form) (x2fe3@syntax-violation x4896@who x4897@msg x4898@form '#f)) x48a4) (if (= x48a5 '4) (apply (lambda (x489c@who x489d@msg x489e@form x489f@subform) (x2fe1@syntax-violation* x489c@who x489d@msg x489e@form (x4d14@x4b49@make-syntax-violation (x2fe9@syntax->datum x489e@form) (x2fe9@syntax->datum x489f@subform)))) x48a4) (error 'apply '"invalid arg count")))) (length x48a4)))) (set! x2fe5@identifier? (lambda (x48a6@x) (x2cef@id? x48a6@x))) (set! x2fe7@datum->syntax (lambda (x48a8@id x48a9@datum) (if (x2cef@id? x48a8@id) (x2ccd@datum->stx x48a8@id x48a9@datum) (assertion-violation 'datum->syntax '"not an identifier" x48a8@id)))) (set! x2fe9@syntax->datum (lambda (x48ac@x) (x2d05@stx->datum x48ac@x))) (set! x2feb@compile-r6rs-top-level (lambda (x48ae@x*) (call-with-values (lambda () (x2f75@top-level-expander x48ae@x*)) (lambda (x48b4@x48b1 x48b5@x48b3) ((lambda (x48b8@invoke-code x48b9@lib*) (lambda () (begin (for-each x2b13@x29b4@invoke-library x48b9@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (x28ed@x28a5@expanded->core x48b8@invoke-code)) (void)) (eval-core (x28ed@x28a5@expanded->core x48b8@invoke-code))))) x48b5@x48b3 x48b4@x48b1))))) (set! x2fed@pre-compile-r6rs-top-level (lambda (x48bc@x*) (call-with-values (lambda () (x2f75@top-level-expander x48bc@x*)) (lambda (x48c2@x48bf x48c3@x48c1) ((lambda (x48c6@invoke-code x48c7@lib*) (begin (for-each x2b13@x29b4@invoke-library x48c7@lib*) (x2897@x27bf@compile-core (x28ed@x28a5@expanded->core x48c6@invoke-code)))) x48c3@x48c1 x48c2@x48bf))))) (set! x2fef@interaction-environment ((lambda (x48ca@the-env) (lambda () (or x48ca@the-env ((lambda (x48cc@lib x48cd@rib) (begin ((lambda (x48d0@subst) (begin (x2c94@set-rib-sym*! x48cd@rib (map car x48d0@subst)) (x2c96@set-rib-mark**! x48cd@rib (map (lambda (x48d2@x) x2c6b@top-mark*) x48d0@subst)) (x2c98@set-rib-label*! x48cd@rib (map cdr x48d0@subst)))) (x2ae8@x295e@library-subst x48cc@lib)) ((lambda (x48d4@env) (begin (set! x48ca@the-env x48d4@env) x48d4@env)) (x2fa1@make-interaction-env x48cd@rib '() '())))) (x2b0c@x29a6@find-library-by-name '(mosh interaction)) (x2c9e@make-empty-rib))))) '#f)) (set! x2ff1@top-level-context (x2899@x27c3@make-parameter '#f)) (begin (set! x49e2@x2ff1@top-level-context x2ff1@top-level-context) (set! x49e1@x2fef@interaction-environment x2fef@interaction-environment) (set! x49e0@x2fed@pre-compile-r6rs-top-level x2fed@pre-compile-r6rs-top-level) (set! x49df@x2feb@compile-r6rs-top-level x2feb@compile-r6rs-top-level) (set! x49de@x2fe9@syntax->datum x2fe9@syntax->datum) (set! x49dd@x2fe7@datum->syntax x2fe7@datum->syntax) (set! x49dc@x2fe5@identifier? x2fe5@identifier?) (set! x49db@x2fe3@syntax-violation x2fe3@syntax-violation) (set! x49da@x2fe1@syntax-violation* x2fe1@syntax-violation*) (set! x49d9@x2fdf@syntax-error x2fdf@syntax-error) (set! x49d8@x2fdd@assertion-error x2fdd@assertion-error) (set! x49d7@x2fdb@expression-position x2fdb@expression-position) (set! x49d6@x2fd9@extract-position-condition x2fd9@extract-position-condition) (set! x49d5@x2fd7@make-source-condition x2fd7@make-source-condition) (set! x49d4@x2fd5@bound-identifier=? x2fd5@bound-identifier=?) (set! x49d3@x2fd3@free-identifier=? x2fd3@free-identifier=?) (set! x49d2@x2fd1@generate-temporaries x2fd1@generate-temporaries) (set! x49d1@x2fcf@make-export-env/macros x2fcf@make-export-env/macros) (set! x49d0@x2fcd@make-export-subst x2fcd@make-export-subst) (set! x49cf@x2fcb@build-exports x2fcb@build-exports) (set! x49ce@x2fc9@rev-map-append x2fc9@rev-map-append) (set! x49cd@x2fc7@boot-library-expand x2fc7@boot-library-expand) (set! x49cc@x2fc5@library-expander x2fc5@library-expander) (set! x49cb@x2fc3@eval x2fc3@eval) (set! x49ca@x2fc1@expand x2fc1@expand) (set! x49c9@x2fbf@scheme-report-environment x2fbf@scheme-report-environment) (set! x49c8@x2fbd@null-environment x2fbd@null-environment) (set! x49c7@x2fbb@environment x2fbb@environment) (set! x49c6@x2fb9@environment-symbols x2fb9@environment-symbols) (set! x49c5@x2fb7@environment? x2fb7@environment?) (set! x49c4@x2fb5@parse-binding x2fb5@parse-binding) (set! x49c3@x2fb3@environment-bindings x2fb3@environment-bindings) (set! x49c2@x2fb1@interaction-environment-symbols x2fb1@interaction-environment-symbols) (set! x49c1@x2faf@rp x2faf@rp) (set! x49c0@x2fad@set-interaction-env-locs! x2fad@set-interaction-env-locs!) (set! x49bf@x2fab@set-interaction-env-r! x2fab@set-interaction-env-r!) (set! x49be@x2fa9@set-interaction-env-rib! x2fa9@set-interaction-env-rib!) (set! x49bd@x2fa7@interaction-env-locs x2fa7@interaction-env-locs) (set! x49bc@x2fa5@interaction-env-r x2fa5@interaction-env-r) (set! x49bb@x2fa3@interaction-env-rib x2fa3@interaction-env-rib) (set! x49ba@x2fa1@make-interaction-env x2fa1@make-interaction-env) (set! x49b9@x2f9f@interaction-env? x2f9f@interaction-env?) (set! x49b8@x2f9c@x2f94 x2f9c@x2f94) (set! x49b7@x2f9a@x2f95 x2f9a@x2f95) (set! x49b6@x2f98@x2f93 x2f98@x2f93) (set! x49b5@x2f92@rp x2f92@rp) (set! x49b4@x2f90@set-env-itc! x2f90@set-env-itc!) (set! x49b3@x2f8e@set-env-labels! x2f8e@set-env-labels!) (set! x49b2@x2f8c@set-env-names! x2f8c@set-env-names!) (set! x49b1@x2f8a@env-itc x2f8a@env-itc) (set! x49b0@x2f88@env-labels x2f88@env-labels) (set! x49af@x2f86@env-names x2f86@env-names) (set! x49ae@x2f84@make-env x2f84@make-env) (set! x49ad@x2f82@env? x2f82@env?) (set! x49ac@x2f7f@x2f77 x2f7f@x2f77) (set! x49ab@x2f7d@x2f78 x2f7d@x2f78) (set! x49aa@x2f7b@x2f76 x2f7b@x2f76) (set! x49a9@x2f75@top-level-expander x2f75@top-level-expander) (set! x49a8@x2f73@parse-top-level-program x2f73@parse-top-level-program) (set! x49a7@x2f71@core-library-expander x2f71@core-library-expander) (set! x49a6@x2f6f@library-body-expander x2f6f@library-body-expander) (set! x49a5@x2f6d@chi-interaction-expr x2f6d@chi-interaction-expr) (set! x49a4@x2f6b@chi-library-internal x2f6b@chi-library-internal) (set! x49a3@x2f69@imp-collector x2f69@imp-collector) (set! x49a2@x2f67@vis-collector x2f67@vis-collector) (set! x49a1@x2f65@inv-collector x2f65@inv-collector) (set! x49a0@x2f63@make-collector x2f63@make-collector) (set! x499f@x2f61@make-top-rib x2f61@make-top-rib) (set! x499e@x2f5f@parse-import-spec* x2f5f@parse-import-spec*) (set! x499d@x2f5d@parse-library x2f5d@parse-library) (set! x499c@x2f5b@parse-library-name x2f5b@parse-library-name) (set! x499b@x2f59@parse-exports x2f59@parse-exports) (set! x499a@x2f57@expand-transformer x2f57@expand-transformer) (set! x4999@x2f55@chi-body* x2f55@chi-body*) (set! x4998@x2f53@chi-internal-module x2f53@chi-internal-module) (set! x4997@x2f51@module-interface-exp-id* x2f51@module-interface-exp-id*) (set! x4996@x2f4f@set-module-interface-exp-lab-vec! x2f4f@set-module-interface-exp-lab-vec!) (set! x4995@x2f4d@set-module-interface-exp-id-vec! x2f4d@set-module-interface-exp-id-vec!) (set! x4994@x2f4b@set-module-interface-first-mark! x2f4b@set-module-interface-first-mark!) (set! x4993@x2f49@module-interface-exp-lab-vec x2f49@module-interface-exp-lab-vec) (set! x4992@x2f47@module-interface-exp-id-vec x2f47@module-interface-exp-id-vec) (set! x4991@x2f45@module-interface-first-mark x2f45@module-interface-first-mark) (set! x4990@x2f43@make-module-interface x2f43@make-module-interface) (set! x498f@x2f41@module-interface? x2f41@module-interface?) (set! x498e@x2f3e@x2f36 x2f3e@x2f36) (set! x498d@x2f3c@x2f37 x2f3c@x2f37) (set! x498c@x2f3a@x2f35 x2f3a@x2f35) (set! x498b@x2f34@parse-module x2f34@parse-module) (set! x498a@x2f32@chi-internal x2f32@chi-internal) (set! x4989@x2f30@find-dups x2f30@find-dups) (set! x4988@x2f2e@find-bound=? x2f2e@find-bound=?) (set! x4987@x2f2c@chi-rhs* x2f2c@chi-rhs*) (set! x4986@x2f2a@expand-interaction-rhs*/init* x2f2a@expand-interaction-rhs*/init*) (set! x4985@x2f28@chi-rhs x2f28@chi-rhs) (set! x4984@x2f26@chi-defun x2f26@chi-defun) (set! x4983@x2f24@chi-lambda-clause* x2f24@chi-lambda-clause*) (set! x4982@x2f22@chi-lambda-clause x2f22@chi-lambda-clause) (set! x4981@x2f20@verify-formals x2f20@verify-formals) (set! x4980@x2f1e@chi-set! x2f1e@chi-set!) (set! x497f@x2f1c@chi-expr x2f1c@chi-expr) (set! x497e@x2f1a@chi-application x2f1a@chi-application) (set! x497d@x2f18@chi-expr* x2f18@chi-expr*) (set! x497c@x2f16@chi-global-macro x2f16@chi-global-macro) (set! x497b@x2f14@chi-local-macro x2f14@chi-local-macro) (set! x497a@x2f12@chi-macro x2f12@chi-macro) (set! x4979@x2f10@do-macro-call x2f10@do-macro-call) (set! x4978@x2f0e@local-macro-transformer x2f0e@local-macro-transformer) (set! x4977@x2f0c@macro-transformer x2f0c@macro-transformer) (set! x4976@x2f0a@symbol-macro x2f0a@symbol-macro) (set! x4975@x2f08@core-macro-transformer x2f08@core-macro-transformer) (set! x4974@x2f06@syntax-transformer x2f06@syntax-transformer) (set! x4973@x2f04@ellipsis-map x2f04@ellipsis-map) (set! x4972@x2f02@syntax-case-transformer x2f02@syntax-case-transformer) (set! x4971@x2f00@verify-literals x2f00@verify-literals) (set! x4970@x2efe@underscore? x2efe@underscore?) (set! x496f@x2efc@ellipsis? x2efc@ellipsis?) (set! x496e@x2efa@syntax-dispatch x2efa@syntax-dispatch) (set! x496d@x2ef8@convert-pattern x2ef8@convert-pattern) (set! x496c@x2ef6@foreign-call-transformer x2ef6@foreign-call-transformer) (set! x496b@x2ef4@parameterize-macro x2ef4@parameterize-macro) (set! x496a@x2ef2@incorrect-usage-macro x2ef2@incorrect-usage-macro) (set! x4969@x2ef0@define-condition-type-macro x2ef0@define-condition-type-macro) (set! x4968@x2eee@define-record-type-macro x2eee@define-record-type-macro) (set! x4967@x2eec@define-struct-macro x2eec@define-struct-macro) (set! x4966@x2eea@quasisyntax-macro x2eea@quasisyntax-macro) (set! x4965@x2ee8@quasiquote-macro x2ee8@quasiquote-macro) (set! x4964@x2ee6@syntax-rules-macro x2ee6@syntax-rules-macro) (set! x4963@x2ee4@include-into-macro x2ee4@include-into-macro) (set! x4962@x2ee2@include-macro x2ee2@include-macro) (set! x4961@x2ee0@do-include x2ee0@do-include) (set! x4960@x2ede@cond-macro x2ede@cond-macro) (set! x495f@x2edc@and-macro x2edc@and-macro) (set! x495e@x2eda@or-macro x2eda@or-macro) (set! x495d@x2ed8@let*-macro x2ed8@let*-macro) (set! x495c@x2ed6@do-macro x2ed6@do-macro) (set! x495b@x2ed4@identifier-syntax-macro x2ed4@identifier-syntax-macro) (set! x495a@x2ed2@endianness-macro x2ed2@endianness-macro) (set! x4959@x2ed0@assert-macro x2ed0@assert-macro) (set! x4958@x2ece@delay-macro x2ece@delay-macro) (set! x4957@x2ecc@time-macro x2ecc@time-macro) (set! x4956@x2eca@define-enumeration-macro x2eca@define-enumeration-macro) (set! x4955@x2ec8@guard-macro x2ec8@guard-macro) (set! x4954@x2ec6@trace-letrec-syntax-macro x2ec6@trace-letrec-syntax-macro) (set! x4953@x2ec4@trace-let-syntax-macro x2ec4@trace-let-syntax-macro) (set! x4952@x2ec2@trace-let/rec-syntax x2ec2@trace-let/rec-syntax) (set! x4951@x2ec0@trace-define-syntax-macro x2ec0@trace-define-syntax-macro) (set! x4950@x2ebe@trace-define-macro x2ebe@trace-define-macro) (set! x494f@x2ebc@trace-lambda-macro x2ebc@trace-lambda-macro) (set! x494e@x2eba@let*-values-macro x2eba@let*-values-macro) (set! x494d@x2eb8@let-values-macro x2eb8@let-values-macro) (set! x494c@x2eb6@let-macro x2eb6@let-macro) (set! x494b@x2eb4@invalid-fmls-error x2eb4@invalid-fmls-error) (set! x494a@x2eb2@with-syntax-macro x2eb2@with-syntax-macro) (set! x4949@x2eb0@bless x2eb0@bless) (set! x4948@x2eae@lambda-transformer x2eae@lambda-transformer) (set! x4947@x2eac@case-lambda-transformer x2eac@case-lambda-transformer) (set! x4946@x2eaa@quote-transformer x2eaa@quote-transformer) (set! x4945@x2ea8@case-macro x2ea8@case-macro) (set! x4944@x2ea6@or-transformer x2ea6@or-transformer) (set! x4943@x2ea4@and-transformer x2ea4@and-transformer) (set! x4942@x2ea2@if-transformer x2ea2@if-transformer) (set! x4941@x2ea0@unless-macro x2ea0@unless-macro) (set! x4940@x2e9e@when-macro x2e9e@when-macro) (set! x493f@x2e9c@record-constructor-descriptor-transformer x2e9c@record-constructor-descriptor-transformer) (set! x493e@x2e9a@record-type-descriptor-transformer x2e9a@record-type-descriptor-transformer) (set! x493d@x2e98@type-descriptor-transformer x2e98@type-descriptor-transformer) (set! x493c@x2e96@fluid-let-syntax-transformer x2e96@fluid-let-syntax-transformer) (set! x493b@x2e94@letrec*-transformer x2e94@letrec*-transformer) (set! x493a@x2e92@letrec-transformer x2e92@letrec-transformer) (set! x4939@x2e90@letrec-helper x2e90@letrec-helper) (set! x4938@x2e8e@add-lexicals x2e8e@add-lexicals) (set! x4937@x2e8c@add-lexical x2e8c@add-lexical) (set! x4936@x2e8a@set-lexical-mutable! x2e8a@set-lexical-mutable!) (set! x4935@x2e88@lexical-mutable? x2e88@lexical-mutable?) (set! x4934@x2e86@lexical-var x2e86@lexical-var) (set! x4933@x2e84@scheme-stx x2e84@scheme-stx) (set! x4932@x2e82@scheme-stx-hashtable x2e82@scheme-stx-hashtable) (set! x4931@x2e80@parse-define-syntax x2e80@parse-define-syntax) (set! x4930@x2e7e@parse-define x2e7e@parse-define) (set! x492f@x2d2d@make-eval-transformer x2d2d@make-eval-transformer) (set! x492e@x2d2b@variable-transformer-procedure x2d2b@variable-transformer-procedure) (set! x492d@x2d29@variable-transformer? x2d29@variable-transformer?) (set! x492c@x2d27@make-variable-transformer x2d27@make-variable-transformer) (set! x492b@x2d25@sanitize-binding x2d25@sanitize-binding) (set! x492a@x2d17@syntax-type x2d17@syntax-type) (set! x4929@x2d15@raise-unbound-error x2d15@raise-unbound-error) (set! x4928@x2d13@binding-value x2d13@binding-value) (set! x4927@x2d11@binding-type x2d11@binding-type) (set! x4926@x2d0f@make-binding x2d0f@make-binding) (set! x4925@x2d0d@label->binding x2d0d@label->binding) (set! x4924@x2d0b@id->real-label x2d0b@id->real-label) (set! x4923@x2d09@id->label x2d09@id->label) (set! x4922@x2d07@same-marks*? x2d07@same-marks*?) (set! x4921@x2d05@stx->datum x2d05@stx->datum) (set! x4920@x2d03@strip x2d03@strip) (set! x491f@x2d01@strip-annotations x2d01@strip-annotations) (set! x491e@x2cff@self-evaluating? x2cff@self-evaluating?) (set! x491d@x2cfd@bound-id-member? x2cfd@bound-id-member?) (set! x491c@x2cfb@distinct-bound-ids? x2cfb@distinct-bound-ids?) (set! x491b@x2cf9@valid-bound-ids? x2cf9@valid-bound-ids?) (set! x491a@x2cf7@free-id=? x2cf7@free-id=?) (set! x4919@x2cf5@bound-id=? x2cf5@bound-id=?) (set! x4918@x2cf3@same-marks? x2cf3@same-marks?) (set! x4917@x2cf1@id->sym x2cf1@id->sym) (set! x4916@x2cef@id? x2cef@id?) (set! x4915@x2ced@syntax->list x2ced@syntax->list) (set! x4914@x2ceb@syntax-cdr x2ceb@syntax-cdr) (set! x4913@x2ce9@syntax-car x2ce9@syntax-car) (set! x4912@x2ce7@syntax-list? x2ce7@syntax-list?) (set! x4911@x2ce5@syntax-null? x2ce5@syntax-null?) (set! x4910@x2ce3@syntax-vector? x2ce3@syntax-vector?) (set! x490f@x2ce1@syntax-pair? x2ce1@syntax-pair?) (set! x490e@x2cdf@syntax-vector->list x2cdf@syntax-vector->list) (set! x490d@x2cdd@syntax-kind? x2cdd@syntax-kind?) (set! x490c@x2cdb@add-subst x2cdb@add-subst) (set! x490b@x2cd9@add-mark x2cd9@add-mark) (set! x490a@x2cd7@mkstx x2cd7@mkstx) (set! x4909@x2cd5@join-wraps x2cd5@join-wraps) (set! x4908@x2cd3@anti-mark? x2cd3@anti-mark?) (set! x4907@x2cd1@anti-mark x2cd1@anti-mark) (set! x4906@x2ccf@gen-mark x2ccf@gen-mark) (set! x4905@x2ccd@datum->stx x2ccd@datum->stx) (set! x4904@x2ccb@rp x2ccb@rp) (set! x4903@x2cc9@set-stx-ae*! x2cc9@set-stx-ae*!) (set! x4902@x2cc7@set-stx-subst*! x2cc7@set-stx-subst*!) (set! x4901@x2cc5@set-stx-mark*! x2cc5@set-stx-mark*!) (set! x4900@x2cc3@set-stx-expr! x2cc3@set-stx-expr!) (set! x48ff@x2cc1@stx-ae* x2cc1@stx-ae*) (set! x48fe@x2cbf@stx-subst* x2cbf@stx-subst*) (set! x48fd@x2cbd@stx-mark* x2cbd@stx-mark*) (set! x48fc@x2cbb@stx-expr x2cbb@stx-expr) (set! x48fb@x2cb9@make-stx x2cb9@make-stx) (set! x48fa@x2cb7@stx? x2cb7@stx?) (set! x48f9@x2cb4@x2cac x2cb4@x2cac) (set! x48f8@x2cb2@x2cad x2cb2@x2cad) (set! x48f7@x2cb0@x2cab x2cb0@x2cab) (set! x48f6@x2caa@make-full-rib x2caa@make-full-rib) (set! x48f5@x2ca8@unseal-rib! x2ca8@unseal-rib!) (set! x48f4@x2ca6@seal-rib! x2ca6@seal-rib!) (set! x48f3@x2ca4@make-rib-map x2ca4@make-rib-map) (set! x48f2@x2ca2@extend-rib/nc! x2ca2@extend-rib/nc!) (set! x48f1@x2ca0@extend-rib! x2ca0@extend-rib!) (set! x48f0@x2c9e@make-empty-rib x2c9e@make-empty-rib) (set! x48ef@x2c9c@set-rib-cache! x2c9c@set-rib-cache!) (set! x48ee@x2c9a@set-rib-sealed/freq! x2c9a@set-rib-sealed/freq!) (set! x48ed@x2c98@set-rib-label*! x2c98@set-rib-label*!) (set! x48ec@x2c96@set-rib-mark**! x2c96@set-rib-mark**!) (set! x48eb@x2c94@set-rib-sym*! x2c94@set-rib-sym*!) (set! x48ea@x2c92@rib-cache x2c92@rib-cache) (set! x48e9@x2c90@rib-sealed/freq x2c90@rib-sealed/freq) (set! x48e8@x2c8e@rib-label* x2c8e@rib-label*) (set! x48e7@x2c8c@rib-mark** x2c8c@rib-mark**) (set! x48e6@x2c8a@rib-sym* x2c8a@rib-sym*) (set! x48e5@x2c88@make-rib x2c88@make-rib) (set! x48e4@x2c86@rib? x2c86@rib?) (set! x48e3@x2c83@x2c7b x2c83@x2c7b) (set! x48e2@x2c81@x2c7c x2c81@x2c7c) (set! x48e1@x2c7f@x2c7a x2c7f@x2c7a) (set! x48e0@x2c79@gen-define-label x2c79@gen-define-label) (set! x48df@x2c77@gen-define-label+loc x2c77@gen-define-label+loc) (set! x48de@x2c75@gen-top-level-label x2c75@gen-top-level-label) (set! x48dd@x2c73@gen-label x2c73@gen-label) (set! x48dc@x2c71@gen-global x2c71@gen-global) (set! x48db@x2c6f@gen-lexical x2c6f@gen-lexical) (set! x48da@x2c6d@top-marked? x2c6d@top-marked?) (set! x48d9@x2c6b@top-mark* x2c6b@top-mark*) (set! x48d8@x2c66@set-union x2c66@set-union) (set! x48d7@x2c64@set-cons x2c64@set-cons) (set! x48d6@x2c62@file-options-macro x2c62@file-options-macro) (x2b09@x29a0@current-library-expander x2fc5@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (x49ec@x49e7 x49ee@x49e9 x49f0@x49e8 x49f3@&condition? x49f5@make-&condition x49f7@&condition-rtd x49f9@&condition-rcd x4a45@x4a40 x4a47@x4a42 x4a49@x4a41 x4a4c@p? x4a4e@make-message-condition x4a50@x4a3f x4a52@message-condition? x4a54@condition-message x4a56@&message-rtd x4a58@&message-rcd x4a5e@x4a59 x4a60@x4a5b x4a62@x4a5a x4a65@p? x4a67@make-warning x4a69@warning? x4a6b@&warning-rtd x4a6d@&warning-rcd x4a73@x4a6e x4a75@x4a70 x4a77@x4a6f x4a7a@p? x4a7c@make-serious-condition x4a7e@serious-condition? x4a80@&serious-rtd x4a82@&serious-rcd x4a88@x4a83 x4a8a@x4a85 x4a8c@x4a84 x4a8f@p? x4a91@make-error x4a93@error? x4a95@&error-rtd x4a97@&error-rcd x4a9d@x4a98 x4a9f@x4a9a x4aa1@x4a99 x4aa4@p? x4aa6@make-violation x4aa8@violation? x4aaa@&violation-rtd x4aac@&violation-rcd x4ab2@x4aad x4ab4@x4aaf x4ab6@x4aae x4ab9@p? x4abb@make-assertion-violation x4abd@assertion-violation? x4abf@&assertion-rtd x4ac1@&assertion-rcd x4ac9@x4ac4 x4acb@x4ac6 x4acd@x4ac5 x4ad0@p? x4ad2@make-irritants-condition x4ad4@x4ac3 x4ad6@irritants-condition? x4ad8@condition-irritants x4ada@&irritants-rtd x4adc@&irritants-rcd x4ae4@x4adf x4ae6@x4ae1 x4ae8@x4ae0 x4aeb@p? x4aed@make-who-condition x4aef@x4ade x4af1@who-condition? x4af3@condition-who x4af5@&who-rtd x4af7@&who-rcd x4afd@x4af8 x4aff@x4afa x4b01@x4af9 x4b04@p? x4b06@make-non-continuable-violation x4b08@non-continuable-violation? x4b0a@&non-continuable-rtd x4b0c@&non-continuable-rcd x4b12@x4b0d x4b14@x4b0f x4b16@x4b0e x4b19@p? x4b1b@make-implementation-restriction-violation x4b1d@implementation-restriction-violation? x4b1f@&implementation-restriction-rtd x4b21@&implementation-restriction-rcd x4b27@x4b22 x4b29@x4b24 x4b2b@x4b23 x4b2e@p? x4b30@make-lexical-violation x4b32@lexical-violation? x4b34@&lexical-rtd x4b36@&lexical-rcd x4b40@x4b3b x4b42@x4b3d x4b44@x4b3c x4b47@p? x4b49@make-syntax-violation x4b4b@x4b38 x4b4d@x4b3a x4b4f@syntax-violation? x4b51@syntax-violation-form x4b53@syntax-violation-subform x4b55@&syntax-rtd x4b57@&syntax-rcd x4b5d@x4b58 x4b5f@x4b5a x4b61@x4b59 x4b64@p? x4b66@make-undefined-violation x4b68@undefined-violation? x4b6a@&undefined-rtd x4b6c@&undefined-rcd x4b72@x4b6d x4b74@x4b6f x4b76@x4b6e x4b79@p? x4b7b@make-i/o-error x4b7d@i/o-error? x4b7f@&i/o-rtd x4b81@&i/o-rcd x4b87@x4b82 x4b89@x4b84 x4b8b@x4b83 x4b8e@p? x4b90@make-i/o-read-error x4b92@i/o-read-error? x4b94@&i/o-read-rtd x4b96@&i/o-read-rcd x4b9c@x4b97 x4b9e@x4b99 x4ba0@x4b98 x4ba3@p? x4ba5@make-i/o-write-error x4ba7@i/o-write-error? x4ba9@&i/o-write-rtd x4bab@&i/o-write-rcd x4bb3@x4bae x4bb5@x4bb0 x4bb7@x4baf x4bba@p? x4bbc@make-i/o-invalid-position-error x4bbe@x4bad x4bc0@i/o-invalid-position-error? x4bc2@i/o-error-position x4bc4@&i/o-invalid-position-rtd x4bc6@&i/o-invalid-position-rcd x4bce@x4bc9 x4bd0@x4bcb x4bd2@x4bca x4bd5@p? x4bd7@make-i/o-filename-error x4bd9@x4bc8 x4bdb@i/o-filename-error? x4bdd@i/o-error-filename x4bdf@&i/o-filename-rtd x4be1@&i/o-filename-rcd x4be7@x4be2 x4be9@x4be4 x4beb@x4be3 x4bee@p? x4bf0@make-i/o-file-protection-error x4bf2@i/o-file-protection-error? x4bf4@&i/o-file-protection-rtd x4bf6@&i/o-file-protection-rcd x4bfc@x4bf7 x4bfe@x4bf9 x4c00@x4bf8 x4c03@p? x4c05@make-i/o-file-is-read-only-error x4c07@i/o-file-is-read-only-error? x4c09@&i/o-file-is-read-only-rtd x4c0b@&i/o-file-is-read-only-rcd x4c11@x4c0c x4c13@x4c0e x4c15@x4c0d x4c18@p? x4c1a@make-i/o-file-already-exists-error x4c1c@i/o-file-already-exists-error? x4c1e@&i/o-file-already-exists-rtd x4c20@&i/o-file-already-exists-rcd x4c26@x4c21 x4c28@x4c23 x4c2a@x4c22 x4c2d@p? x4c2f@make-i/o-file-does-not-exist-error x4c31@i/o-file-does-not-exist-error? x4c33@&i/o-file-does-not-exist-rtd x4c35@&i/o-file-does-not-exist-rcd x4c3d@x4c38 x4c3f@x4c3a x4c41@x4c39 x4c44@p? x4c46@make-i/o-port-error x4c48@x4c37 x4c4a@i/o-port-error? x4c4c@i/o-error-port x4c4e@&i/o-port-rtd x4c50@&i/o-port-rcd x4c56@x4c51 x4c58@x4c53 x4c5a@x4c52 x4c5d@p? x4c5f@make-i/o-decoding-error x4c61@i/o-decoding-error? x4c63@&i/o-decoding-rtd x4c65@&i/o-decoding-rcd x4c6d@x4c68 x4c6f@x4c6a x4c71@x4c69 x4c74@p? x4c76@make-i/o-encoding-error x4c78@x4c67 x4c7a@i/o-encoding-error? x4c7c@i/o-encoding-error-char x4c7e@&i/o-encoding-rtd x4c80@&i/o-encoding-rcd x4c86@x4c81 x4c88@x4c83 x4c8a@x4c82 x4c8d@p? x4c8f@make-no-infinities-violation x4c91@no-infinities-violation? x4c93@&no-infinities-rtd x4c95@&no-infinities-rcd x4c9b@x4c96 x4c9d@x4c98 x4c9f@x4c97 x4ca2@p? x4ca4@make-no-nans-violation x4ca6@no-nans-violation? x4ca8@&no-nans-rtd x4caa@&no-nans-rcd) (begin (set! x49ec@x49e7 (make-record-type-descriptor '&condition '#f 'x49ea '#f '#f '#())) (set! x49ee@x49e9 '#f) (set! x49f0@x49e8 (make-record-constructor-descriptor x49ec@x49e7 '#f x49ee@x49e9)) (set! x49f3@&condition? (record-predicate x49ec@x49e7)) (set! x49f5@make-&condition (record-constructor x49f0@x49e8)) (set! x49f7@&condition-rtd x49ec@x49e7) (set! x49f9@&condition-rcd x49f0@x49e8) (set! x4a45@x4a40 (make-record-type-descriptor '&message x49ec@x49e7 'x4a43 '#f '#f '#((immutable message)))) (set! x4a47@x4a42 '#f) (set! x4a49@x4a41 (make-record-constructor-descriptor x4a45@x4a40 x49f0@x49e8 x4a47@x4a42)) (set! x4a4c@p? (record-predicate x4a45@x4a40)) (set! x4a4e@make-message-condition (record-constructor x4a49@x4a41)) (set! x4a50@x4a3f (record-accessor x4a45@x4a40 '0)) (set! x4a52@message-condition? (condition-predicate x4a45@x4a40)) (set! x4a54@condition-message (condition-accessor x4a45@x4a40 x4a50@x4a3f)) (set! x4a56@&message-rtd x4a45@x4a40) (set! x4a58@&message-rcd x4a49@x4a41) (set! x4a5e@x4a59 (make-record-type-descriptor '&warning x49ec@x49e7 'x4a5c '#f '#f '#())) (set! x4a60@x4a5b '#f) (set! x4a62@x4a5a (make-record-constructor-descriptor x4a5e@x4a59 x49f0@x49e8 x4a60@x4a5b)) (set! x4a65@p? (record-predicate x4a5e@x4a59)) (set! x4a67@make-warning (record-constructor x4a62@x4a5a)) (set! x4a69@warning? (condition-predicate x4a5e@x4a59)) (set! x4a6b@&warning-rtd x4a5e@x4a59) (set! x4a6d@&warning-rcd x4a62@x4a5a) (set! x4a73@x4a6e (make-record-type-descriptor '&serious x49ec@x49e7 'x4a71 '#f '#f '#())) (set! x4a75@x4a70 '#f) (set! x4a77@x4a6f (make-record-constructor-descriptor x4a73@x4a6e x49f0@x49e8 x4a75@x4a70)) (set! x4a7a@p? (record-predicate x4a73@x4a6e)) (set! x4a7c@make-serious-condition (record-constructor x4a77@x4a6f)) (set! x4a7e@serious-condition? (condition-predicate x4a73@x4a6e)) (set! x4a80@&serious-rtd x4a73@x4a6e) (set! x4a82@&serious-rcd x4a77@x4a6f) (set! x4a88@x4a83 (make-record-type-descriptor '&error x4a73@x4a6e 'x4a86 '#f '#f '#())) (set! x4a8a@x4a85 '#f) (set! x4a8c@x4a84 (make-record-constructor-descriptor x4a88@x4a83 x4a77@x4a6f x4a8a@x4a85)) (set! x4a8f@p? (record-predicate x4a88@x4a83)) (set! x4a91@make-error (record-constructor x4a8c@x4a84)) (set! x4a93@error? (condition-predicate x4a88@x4a83)) (set! x4a95@&error-rtd x4a88@x4a83) (set! x4a97@&error-rcd x4a8c@x4a84) (set! x4a9d@x4a98 (make-record-type-descriptor '&violation x4a73@x4a6e 'x4a9b '#f '#f '#())) (set! x4a9f@x4a9a '#f) (set! x4aa1@x4a99 (make-record-constructor-descriptor x4a9d@x4a98 x4a77@x4a6f x4a9f@x4a9a)) (set! x4aa4@p? (record-predicate x4a9d@x4a98)) (set! x4aa6@make-violation (record-constructor x4aa1@x4a99)) (set! x4aa8@violation? (condition-predicate x4a9d@x4a98)) (set! x4aaa@&violation-rtd x4a9d@x4a98) (set! x4aac@&violation-rcd x4aa1@x4a99) (set! x4ab2@x4aad (make-record-type-descriptor '&assertion x4a9d@x4a98 'x4ab0 '#f '#f '#())) (set! x4ab4@x4aaf '#f) (set! x4ab6@x4aae (make-record-constructor-descriptor x4ab2@x4aad x4aa1@x4a99 x4ab4@x4aaf)) (set! x4ab9@p? (record-predicate x4ab2@x4aad)) (set! x4abb@make-assertion-violation (record-constructor x4ab6@x4aae)) (set! x4abd@assertion-violation? (condition-predicate x4ab2@x4aad)) (set! x4abf@&assertion-rtd x4ab2@x4aad) (set! x4ac1@&assertion-rcd x4ab6@x4aae) (set! x4ac9@x4ac4 (make-record-type-descriptor '&irritants x49ec@x49e7 'x4ac7 '#f '#f '#((immutable irritants)))) (set! x4acb@x4ac6 '#f) (set! x4acd@x4ac5 (make-record-constructor-descriptor x4ac9@x4ac4 x49f0@x49e8 x4acb@x4ac6)) (set! x4ad0@p? (record-predicate x4ac9@x4ac4)) (set! x4ad2@make-irritants-condition (record-constructor x4acd@x4ac5)) (set! x4ad4@x4ac3 (record-accessor x4ac9@x4ac4 '0)) (set! x4ad6@irritants-condition? (condition-predicate x4ac9@x4ac4)) (set! x4ad8@condition-irritants (condition-accessor x4ac9@x4ac4 x4ad4@x4ac3)) (set! x4ada@&irritants-rtd x4ac9@x4ac4) (set! x4adc@&irritants-rcd x4acd@x4ac5) (set! x4ae4@x4adf (make-record-type-descriptor '&who x49ec@x49e7 'x4ae2 '#f '#f '#((immutable who)))) (set! x4ae6@x4ae1 '#f) (set! x4ae8@x4ae0 (make-record-constructor-descriptor x4ae4@x4adf x49f0@x49e8 x4ae6@x4ae1)) (set! x4aeb@p? (record-predicate x4ae4@x4adf)) (set! x4aed@make-who-condition (record-constructor x4ae8@x4ae0)) (set! x4aef@x4ade (record-accessor x4ae4@x4adf '0)) (set! x4af1@who-condition? (condition-predicate x4ae4@x4adf)) (set! x4af3@condition-who (condition-accessor x4ae4@x4adf x4aef@x4ade)) (set! x4af5@&who-rtd x4ae4@x4adf) (set! x4af7@&who-rcd x4ae8@x4ae0) (set! x4afd@x4af8 (make-record-type-descriptor '&non-continuable x4a9d@x4a98 'x4afb '#f '#f '#())) (set! x4aff@x4afa '#f) (set! x4b01@x4af9 (make-record-constructor-descriptor x4afd@x4af8 x4aa1@x4a99 x4aff@x4afa)) (set! x4b04@p? (record-predicate x4afd@x4af8)) (set! x4b06@make-non-continuable-violation (record-constructor x4b01@x4af9)) (set! x4b08@non-continuable-violation? (condition-predicate x4afd@x4af8)) (set! x4b0a@&non-continuable-rtd x4afd@x4af8) (set! x4b0c@&non-continuable-rcd x4b01@x4af9) (set! x4b12@x4b0d (make-record-type-descriptor '&implementation-restriction x4a9d@x4a98 'x4b10 '#f '#f '#())) (set! x4b14@x4b0f '#f) (set! x4b16@x4b0e (make-record-constructor-descriptor x4b12@x4b0d x4aa1@x4a99 x4b14@x4b0f)) (set! x4b19@p? (record-predicate x4b12@x4b0d)) (set! x4b1b@make-implementation-restriction-violation (record-constructor x4b16@x4b0e)) (set! x4b1d@implementation-restriction-violation? (condition-predicate x4b12@x4b0d)) (set! x4b1f@&implementation-restriction-rtd x4b12@x4b0d) (set! x4b21@&implementation-restriction-rcd x4b16@x4b0e) (set! x4b27@x4b22 (make-record-type-descriptor '&lexical x4a9d@x4a98 'x4b25 '#f '#f '#())) (set! x4b29@x4b24 '#f) (set! x4b2b@x4b23 (make-record-constructor-descriptor x4b27@x4b22 x4aa1@x4a99 x4b29@x4b24)) (set! x4b2e@p? (record-predicate x4b27@x4b22)) (set! x4b30@make-lexical-violation (record-constructor x4b2b@x4b23)) (set! x4b32@lexical-violation? (condition-predicate x4b27@x4b22)) (set! x4b34@&lexical-rtd x4b27@x4b22) (set! x4b36@&lexical-rcd x4b2b@x4b23) (set! x4b40@x4b3b (make-record-type-descriptor '&syntax x4a9d@x4a98 'x4b3e '#f '#f '#((immutable form) (immutable subform)))) (set! x4b42@x4b3d '#f) (set! x4b44@x4b3c (make-record-constructor-descriptor x4b40@x4b3b x4aa1@x4a99 x4b42@x4b3d)) (set! x4b47@p? (record-predicate x4b40@x4b3b)) (set! x4b49@make-syntax-violation (record-constructor x4b44@x4b3c)) (set! x4b4b@x4b38 (record-accessor x4b40@x4b3b '0)) (set! x4b4d@x4b3a (record-accessor x4b40@x4b3b '1)) (set! x4b4f@syntax-violation? (condition-predicate x4b40@x4b3b)) (set! x4b51@syntax-violation-form (condition-accessor x4b40@x4b3b x4b4b@x4b38)) (set! x4b53@syntax-violation-subform (condition-accessor x4b40@x4b3b x4b4d@x4b3a)) (set! x4b55@&syntax-rtd x4b40@x4b3b) (set! x4b57@&syntax-rcd x4b44@x4b3c) (set! x4b5d@x4b58 (make-record-type-descriptor '&undefined x4a9d@x4a98 'x4b5b '#f '#f '#())) (set! x4b5f@x4b5a '#f) (set! x4b61@x4b59 (make-record-constructor-descriptor x4b5d@x4b58 x4aa1@x4a99 x4b5f@x4b5a)) (set! x4b64@p? (record-predicate x4b5d@x4b58)) (set! x4b66@make-undefined-violation (record-constructor x4b61@x4b59)) (set! x4b68@undefined-violation? (condition-predicate x4b5d@x4b58)) (set! x4b6a@&undefined-rtd x4b5d@x4b58) (set! x4b6c@&undefined-rcd x4b61@x4b59) (set! x4b72@x4b6d (make-record-type-descriptor '&i/o x4a88@x4a83 'x4b70 '#f '#f '#())) (set! x4b74@x4b6f '#f) (set! x4b76@x4b6e (make-record-constructor-descriptor x4b72@x4b6d x4a8c@x4a84 x4b74@x4b6f)) (set! x4b79@p? (record-predicate x4b72@x4b6d)) (set! x4b7b@make-i/o-error (record-constructor x4b76@x4b6e)) (set! x4b7d@i/o-error? (condition-predicate x4b72@x4b6d)) (set! x4b7f@&i/o-rtd x4b72@x4b6d) (set! x4b81@&i/o-rcd x4b76@x4b6e) (set! x4b87@x4b82 (make-record-type-descriptor '&i/o-read x4b72@x4b6d 'x4b85 '#f '#f '#())) (set! x4b89@x4b84 '#f) (set! x4b8b@x4b83 (make-record-constructor-descriptor x4b87@x4b82 x4b76@x4b6e x4b89@x4b84)) (set! x4b8e@p? (record-predicate x4b87@x4b82)) (set! x4b90@make-i/o-read-error (record-constructor x4b8b@x4b83)) (set! x4b92@i/o-read-error? (condition-predicate x4b87@x4b82)) (set! x4b94@&i/o-read-rtd x4b87@x4b82) (set! x4b96@&i/o-read-rcd x4b8b@x4b83) (set! x4b9c@x4b97 (make-record-type-descriptor '&i/o-write x4b72@x4b6d 'x4b9a '#f '#f '#())) (set! x4b9e@x4b99 '#f) (set! x4ba0@x4b98 (make-record-constructor-descriptor x4b9c@x4b97 x4b76@x4b6e x4b9e@x4b99)) (set! x4ba3@p? (record-predicate x4b9c@x4b97)) (set! x4ba5@make-i/o-write-error (record-constructor x4ba0@x4b98)) (set! x4ba7@i/o-write-error? (condition-predicate x4b9c@x4b97)) (set! x4ba9@&i/o-write-rtd x4b9c@x4b97) (set! x4bab@&i/o-write-rcd x4ba0@x4b98) (set! x4bb3@x4bae (make-record-type-descriptor '&i/o-invalid-position x4b72@x4b6d 'x4bb1 '#f '#f '#((immutable position)))) (set! x4bb5@x4bb0 '#f) (set! x4bb7@x4baf (make-record-constructor-descriptor x4bb3@x4bae x4b76@x4b6e x4bb5@x4bb0)) (set! x4bba@p? (record-predicate x4bb3@x4bae)) (set! x4bbc@make-i/o-invalid-position-error (record-constructor x4bb7@x4baf)) (set! x4bbe@x4bad (record-accessor x4bb3@x4bae '0)) (set! x4bc0@i/o-invalid-position-error? (condition-predicate x4bb3@x4bae)) (set! x4bc2@i/o-error-position (condition-accessor x4bb3@x4bae x4bbe@x4bad)) (set! x4bc4@&i/o-invalid-position-rtd x4bb3@x4bae) (set! x4bc6@&i/o-invalid-position-rcd x4bb7@x4baf) (set! x4bce@x4bc9 (make-record-type-descriptor '&i/o-filename x4b72@x4b6d 'x4bcc '#f '#f '#((immutable filename)))) (set! x4bd0@x4bcb '#f) (set! x4bd2@x4bca (make-record-constructor-descriptor x4bce@x4bc9 x4b76@x4b6e x4bd0@x4bcb)) (set! x4bd5@p? (record-predicate x4bce@x4bc9)) (set! x4bd7@make-i/o-filename-error (record-constructor x4bd2@x4bca)) (set! x4bd9@x4bc8 (record-accessor x4bce@x4bc9 '0)) (set! x4bdb@i/o-filename-error? (condition-predicate x4bce@x4bc9)) (set! x4bdd@i/o-error-filename (condition-accessor x4bce@x4bc9 x4bd9@x4bc8)) (set! x4bdf@&i/o-filename-rtd x4bce@x4bc9) (set! x4be1@&i/o-filename-rcd x4bd2@x4bca) (set! x4be7@x4be2 (make-record-type-descriptor '&i/o-file-protection x4bce@x4bc9 'x4be5 '#f '#f '#())) (set! x4be9@x4be4 '#f) (set! x4beb@x4be3 (make-record-constructor-descriptor x4be7@x4be2 x4bd2@x4bca x4be9@x4be4)) (set! x4bee@p? (record-predicate x4be7@x4be2)) (set! x4bf0@make-i/o-file-protection-error (record-constructor x4beb@x4be3)) (set! x4bf2@i/o-file-protection-error? (condition-predicate x4be7@x4be2)) (set! x4bf4@&i/o-file-protection-rtd x4be7@x4be2) (set! x4bf6@&i/o-file-protection-rcd x4beb@x4be3) (set! x4bfc@x4bf7 (make-record-type-descriptor '&i/o-file-is-read-only x4be7@x4be2 'x4bfa '#f '#f '#())) (set! x4bfe@x4bf9 '#f) (set! x4c00@x4bf8 (make-record-constructor-descriptor x4bfc@x4bf7 x4beb@x4be3 x4bfe@x4bf9)) (set! x4c03@p? (record-predicate x4bfc@x4bf7)) (set! x4c05@make-i/o-file-is-read-only-error (record-constructor x4c00@x4bf8)) (set! x4c07@i/o-file-is-read-only-error? (condition-predicate x4bfc@x4bf7)) (set! x4c09@&i/o-file-is-read-only-rtd x4bfc@x4bf7) (set! x4c0b@&i/o-file-is-read-only-rcd x4c00@x4bf8) (set! x4c11@x4c0c (make-record-type-descriptor '&i/o-file-already-exists x4bce@x4bc9 'x4c0f '#f '#f '#())) (set! x4c13@x4c0e '#f) (set! x4c15@x4c0d (make-record-constructor-descriptor x4c11@x4c0c x4bd2@x4bca x4c13@x4c0e)) (set! x4c18@p? (record-predicate x4c11@x4c0c)) (set! x4c1a@make-i/o-file-already-exists-error (record-constructor x4c15@x4c0d)) (set! x4c1c@i/o-file-already-exists-error? (condition-predicate x4c11@x4c0c)) (set! x4c1e@&i/o-file-already-exists-rtd x4c11@x4c0c) (set! x4c20@&i/o-file-already-exists-rcd x4c15@x4c0d) (set! x4c26@x4c21 (make-record-type-descriptor '&i/o-file-does-not-exist x4bce@x4bc9 'x4c24 '#f '#f '#())) (set! x4c28@x4c23 '#f) (set! x4c2a@x4c22 (make-record-constructor-descriptor x4c26@x4c21 x4bd2@x4bca x4c28@x4c23)) (set! x4c2d@p? (record-predicate x4c26@x4c21)) (set! x4c2f@make-i/o-file-does-not-exist-error (record-constructor x4c2a@x4c22)) (set! x4c31@i/o-file-does-not-exist-error? (condition-predicate x4c26@x4c21)) (set! x4c33@&i/o-file-does-not-exist-rtd x4c26@x4c21) (set! x4c35@&i/o-file-does-not-exist-rcd x4c2a@x4c22) (set! x4c3d@x4c38 (make-record-type-descriptor '&i/o-port x4b72@x4b6d 'x4c3b '#f '#f '#((immutable port)))) (set! x4c3f@x4c3a '#f) (set! x4c41@x4c39 (make-record-constructor-descriptor x4c3d@x4c38 x4b76@x4b6e x4c3f@x4c3a)) (set! x4c44@p? (record-predicate x4c3d@x4c38)) (set! x4c46@make-i/o-port-error (record-constructor x4c41@x4c39)) (set! x4c48@x4c37 (record-accessor x4c3d@x4c38 '0)) (set! x4c4a@i/o-port-error? (condition-predicate x4c3d@x4c38)) (set! x4c4c@i/o-error-port (condition-accessor x4c3d@x4c38 x4c48@x4c37)) (set! x4c4e@&i/o-port-rtd x4c3d@x4c38) (set! x4c50@&i/o-port-rcd x4c41@x4c39) (set! x4c56@x4c51 (make-record-type-descriptor '&i/o-decoding x4c3d@x4c38 'x4c54 '#f '#f '#())) (set! x4c58@x4c53 '#f) (set! x4c5a@x4c52 (make-record-constructor-descriptor x4c56@x4c51 x4c41@x4c39 x4c58@x4c53)) (set! x4c5d@p? (record-predicate x4c56@x4c51)) (set! x4c5f@make-i/o-decoding-error (record-constructor x4c5a@x4c52)) (set! x4c61@i/o-decoding-error? (condition-predicate x4c56@x4c51)) (set! x4c63@&i/o-decoding-rtd x4c56@x4c51) (set! x4c65@&i/o-decoding-rcd x4c5a@x4c52) (set! x4c6d@x4c68 (make-record-type-descriptor '&i/o-encoding x4c3d@x4c38 'x4c6b '#f '#f '#((immutable char)))) (set! x4c6f@x4c6a '#f) (set! x4c71@x4c69 (make-record-constructor-descriptor x4c6d@x4c68 x4c41@x4c39 x4c6f@x4c6a)) (set! x4c74@p? (record-predicate x4c6d@x4c68)) (set! x4c76@make-i/o-encoding-error (record-constructor x4c71@x4c69)) (set! x4c78@x4c67 (record-accessor x4c6d@x4c68 '0)) (set! x4c7a@i/o-encoding-error? (condition-predicate x4c6d@x4c68)) (set! x4c7c@i/o-encoding-error-char (condition-accessor x4c6d@x4c68 x4c78@x4c67)) (set! x4c7e@&i/o-encoding-rtd x4c6d@x4c68) (set! x4c80@&i/o-encoding-rcd x4c71@x4c69) (set! x4c86@x4c81 (make-record-type-descriptor '&no-infinities x4b12@x4b0d 'x4c84 '#f '#f '#())) (set! x4c88@x4c83 '#f) (set! x4c8a@x4c82 (make-record-constructor-descriptor x4c86@x4c81 x4b16@x4b0e x4c88@x4c83)) (set! x4c8d@p? (record-predicate x4c86@x4c81)) (set! x4c8f@make-no-infinities-violation (record-constructor x4c8a@x4c82)) (set! x4c91@no-infinities-violation? (condition-predicate x4c86@x4c81)) (set! x4c93@&no-infinities-rtd x4c86@x4c81) (set! x4c95@&no-infinities-rcd x4c8a@x4c82) (set! x4c9b@x4c96 (make-record-type-descriptor '&no-nans x4b12@x4b0d 'x4c99 '#f '#f '#())) (set! x4c9d@x4c98 '#f) (set! x4c9f@x4c97 (make-record-constructor-descriptor x4c9b@x4c96 x4b16@x4b0e x4c9d@x4c98)) (set! x4ca2@p? (record-predicate x4c9b@x4c96)) (set! x4ca4@make-no-nans-violation (record-constructor x4c9f@x4c97)) (set! x4ca6@no-nans-violation? (condition-predicate x4c9b@x4c96)) (set! x4ca8@&no-nans-rtd x4c9b@x4c96) (set! x4caa@&no-nans-rcd x4c9f@x4c97) (begin (set! x4d9b@x4caa@&no-nans-rcd x4caa@&no-nans-rcd) (set! x4d9a@x4ca8@&no-nans-rtd x4ca8@&no-nans-rtd) (set! x4d99@x4ca6@no-nans-violation? x4ca6@no-nans-violation?) (set! x4d98@x4ca4@make-no-nans-violation x4ca4@make-no-nans-violation) (set! x4d97@x4ca2@p? x4ca2@p?) (set! x4d96@x4c9f@x4c97 x4c9f@x4c97) (set! x4d95@x4c9d@x4c98 x4c9d@x4c98) (set! x4d94@x4c9b@x4c96 x4c9b@x4c96) (set! x4d93@x4c95@&no-infinities-rcd x4c95@&no-infinities-rcd) (set! x4d92@x4c93@&no-infinities-rtd x4c93@&no-infinities-rtd) (set! x4d91@x4c91@no-infinities-violation? x4c91@no-infinities-violation?) (set! x4d90@x4c8f@make-no-infinities-violation x4c8f@make-no-infinities-violation) (set! x4d8f@x4c8d@p? x4c8d@p?) (set! x4d8e@x4c8a@x4c82 x4c8a@x4c82) (set! x4d8d@x4c88@x4c83 x4c88@x4c83) (set! x4d8c@x4c86@x4c81 x4c86@x4c81) (set! x4d8b@x4c80@&i/o-encoding-rcd x4c80@&i/o-encoding-rcd) (set! x4d8a@x4c7e@&i/o-encoding-rtd x4c7e@&i/o-encoding-rtd) (set! x4d89@x4c7c@i/o-encoding-error-char x4c7c@i/o-encoding-error-char) (set! x4d88@x4c7a@i/o-encoding-error? x4c7a@i/o-encoding-error?) (set! x4d87@x4c78@x4c67 x4c78@x4c67) (set! x4d86@x4c76@make-i/o-encoding-error x4c76@make-i/o-encoding-error) (set! x4d85@x4c74@p? x4c74@p?) (set! x4d84@x4c71@x4c69 x4c71@x4c69) (set! x4d83@x4c6f@x4c6a x4c6f@x4c6a) (set! x4d82@x4c6d@x4c68 x4c6d@x4c68) (set! x4d81@x4c65@&i/o-decoding-rcd x4c65@&i/o-decoding-rcd) (set! x4d80@x4c63@&i/o-decoding-rtd x4c63@&i/o-decoding-rtd) (set! x4d7f@x4c61@i/o-decoding-error? x4c61@i/o-decoding-error?) (set! x4d7e@x4c5f@make-i/o-decoding-error x4c5f@make-i/o-decoding-error) (set! x4d7d@x4c5d@p? x4c5d@p?) (set! x4d7c@x4c5a@x4c52 x4c5a@x4c52) (set! x4d7b@x4c58@x4c53 x4c58@x4c53) (set! x4d7a@x4c56@x4c51 x4c56@x4c51) (set! x4d79@x4c50@&i/o-port-rcd x4c50@&i/o-port-rcd) (set! x4d78@x4c4e@&i/o-port-rtd x4c4e@&i/o-port-rtd) (set! x4d77@x4c4c@i/o-error-port x4c4c@i/o-error-port) (set! x4d76@x4c4a@i/o-port-error? x4c4a@i/o-port-error?) (set! x4d75@x4c48@x4c37 x4c48@x4c37) (set! x4d74@x4c46@make-i/o-port-error x4c46@make-i/o-port-error) (set! x4d73@x4c44@p? x4c44@p?) (set! x4d72@x4c41@x4c39 x4c41@x4c39) (set! x4d71@x4c3f@x4c3a x4c3f@x4c3a) (set! x4d70@x4c3d@x4c38 x4c3d@x4c38) (set! x4d6f@x4c35@&i/o-file-does-not-exist-rcd x4c35@&i/o-file-does-not-exist-rcd) (set! x4d6e@x4c33@&i/o-file-does-not-exist-rtd x4c33@&i/o-file-does-not-exist-rtd) (set! x4d6d@x4c31@i/o-file-does-not-exist-error? x4c31@i/o-file-does-not-exist-error?) (set! x4d6c@x4c2f@make-i/o-file-does-not-exist-error x4c2f@make-i/o-file-does-not-exist-error) (set! x4d6b@x4c2d@p? x4c2d@p?) (set! x4d6a@x4c2a@x4c22 x4c2a@x4c22) (set! x4d69@x4c28@x4c23 x4c28@x4c23) (set! x4d68@x4c26@x4c21 x4c26@x4c21) (set! x4d67@x4c20@&i/o-file-already-exists-rcd x4c20@&i/o-file-already-exists-rcd) (set! x4d66@x4c1e@&i/o-file-already-exists-rtd x4c1e@&i/o-file-already-exists-rtd) (set! x4d65@x4c1c@i/o-file-already-exists-error? x4c1c@i/o-file-already-exists-error?) (set! x4d64@x4c1a@make-i/o-file-already-exists-error x4c1a@make-i/o-file-already-exists-error) (set! x4d63@x4c18@p? x4c18@p?) (set! x4d62@x4c15@x4c0d x4c15@x4c0d) (set! x4d61@x4c13@x4c0e x4c13@x4c0e) (set! x4d60@x4c11@x4c0c x4c11@x4c0c) (set! x4d5f@x4c0b@&i/o-file-is-read-only-rcd x4c0b@&i/o-file-is-read-only-rcd) (set! x4d5e@x4c09@&i/o-file-is-read-only-rtd x4c09@&i/o-file-is-read-only-rtd) (set! x4d5d@x4c07@i/o-file-is-read-only-error? x4c07@i/o-file-is-read-only-error?) (set! x4d5c@x4c05@make-i/o-file-is-read-only-error x4c05@make-i/o-file-is-read-only-error) (set! x4d5b@x4c03@p? x4c03@p?) (set! x4d5a@x4c00@x4bf8 x4c00@x4bf8) (set! x4d59@x4bfe@x4bf9 x4bfe@x4bf9) (set! x4d58@x4bfc@x4bf7 x4bfc@x4bf7) (set! x4d57@x4bf6@&i/o-file-protection-rcd x4bf6@&i/o-file-protection-rcd) (set! x4d56@x4bf4@&i/o-file-protection-rtd x4bf4@&i/o-file-protection-rtd) (set! x4d55@x4bf2@i/o-file-protection-error? x4bf2@i/o-file-protection-error?) (set! x4d54@x4bf0@make-i/o-file-protection-error x4bf0@make-i/o-file-protection-error) (set! x4d53@x4bee@p? x4bee@p?) (set! x4d52@x4beb@x4be3 x4beb@x4be3) (set! x4d51@x4be9@x4be4 x4be9@x4be4) (set! x4d50@x4be7@x4be2 x4be7@x4be2) (set! x4d4f@x4be1@&i/o-filename-rcd x4be1@&i/o-filename-rcd) (set! x4d4e@x4bdf@&i/o-filename-rtd x4bdf@&i/o-filename-rtd) (set! x4d4d@x4bdd@i/o-error-filename x4bdd@i/o-error-filename) (set! x4d4c@x4bdb@i/o-filename-error? x4bdb@i/o-filename-error?) (set! x4d4b@x4bd9@x4bc8 x4bd9@x4bc8) (set! x4d4a@x4bd7@make-i/o-filename-error x4bd7@make-i/o-filename-error) (set! x4d49@x4bd5@p? x4bd5@p?) (set! x4d48@x4bd2@x4bca x4bd2@x4bca) (set! x4d47@x4bd0@x4bcb x4bd0@x4bcb) (set! x4d46@x4bce@x4bc9 x4bce@x4bc9) (set! x4d45@x4bc6@&i/o-invalid-position-rcd x4bc6@&i/o-invalid-position-rcd) (set! x4d44@x4bc4@&i/o-invalid-position-rtd x4bc4@&i/o-invalid-position-rtd) (set! x4d43@x4bc2@i/o-error-position x4bc2@i/o-error-position) (set! x4d42@x4bc0@i/o-invalid-position-error? x4bc0@i/o-invalid-position-error?) (set! x4d41@x4bbe@x4bad x4bbe@x4bad) (set! x4d40@x4bbc@make-i/o-invalid-position-error x4bbc@make-i/o-invalid-position-error) (set! x4d3f@x4bba@p? x4bba@p?) (set! x4d3e@x4bb7@x4baf x4bb7@x4baf) (set! x4d3d@x4bb5@x4bb0 x4bb5@x4bb0) (set! x4d3c@x4bb3@x4bae x4bb3@x4bae) (set! x4d3b@x4bab@&i/o-write-rcd x4bab@&i/o-write-rcd) (set! x4d3a@x4ba9@&i/o-write-rtd x4ba9@&i/o-write-rtd) (set! x4d39@x4ba7@i/o-write-error? x4ba7@i/o-write-error?) (set! x4d38@x4ba5@make-i/o-write-error x4ba5@make-i/o-write-error) (set! x4d37@x4ba3@p? x4ba3@p?) (set! x4d36@x4ba0@x4b98 x4ba0@x4b98) (set! x4d35@x4b9e@x4b99 x4b9e@x4b99) (set! x4d34@x4b9c@x4b97 x4b9c@x4b97) (set! x4d33@x4b96@&i/o-read-rcd x4b96@&i/o-read-rcd) (set! x4d32@x4b94@&i/o-read-rtd x4b94@&i/o-read-rtd) (set! x4d31@x4b92@i/o-read-error? x4b92@i/o-read-error?) (set! x4d30@x4b90@make-i/o-read-error x4b90@make-i/o-read-error) (set! x4d2f@x4b8e@p? x4b8e@p?) (set! x4d2e@x4b8b@x4b83 x4b8b@x4b83) (set! x4d2d@x4b89@x4b84 x4b89@x4b84) (set! x4d2c@x4b87@x4b82 x4b87@x4b82) (set! x4d2b@x4b81@&i/o-rcd x4b81@&i/o-rcd) (set! x4d2a@x4b7f@&i/o-rtd x4b7f@&i/o-rtd) (set! x4d29@x4b7d@i/o-error? x4b7d@i/o-error?) (set! x4d28@x4b7b@make-i/o-error x4b7b@make-i/o-error) (set! x4d27@x4b79@p? x4b79@p?) (set! x4d26@x4b76@x4b6e x4b76@x4b6e) (set! x4d25@x4b74@x4b6f x4b74@x4b6f) (set! x4d24@x4b72@x4b6d x4b72@x4b6d) (set! x4d23@x4b6c@&undefined-rcd x4b6c@&undefined-rcd) (set! x4d22@x4b6a@&undefined-rtd x4b6a@&undefined-rtd) (set! x4d21@x4b68@undefined-violation? x4b68@undefined-violation?) (set! x4d20@x4b66@make-undefined-violation x4b66@make-undefined-violation) (set! x4d1f@x4b64@p? x4b64@p?) (set! x4d1e@x4b61@x4b59 x4b61@x4b59) (set! x4d1d@x4b5f@x4b5a x4b5f@x4b5a) (set! x4d1c@x4b5d@x4b58 x4b5d@x4b58) (set! x4d1b@x4b57@&syntax-rcd x4b57@&syntax-rcd) (set! x4d1a@x4b55@&syntax-rtd x4b55@&syntax-rtd) (set! x4d19@x4b53@syntax-violation-subform x4b53@syntax-violation-subform) (set! x4d18@x4b51@syntax-violation-form x4b51@syntax-violation-form) (set! x4d17@x4b4f@syntax-violation? x4b4f@syntax-violation?) (set! x4d16@x4b4d@x4b3a x4b4d@x4b3a) (set! x4d15@x4b4b@x4b38 x4b4b@x4b38) (set! x4d14@x4b49@make-syntax-violation x4b49@make-syntax-violation) (set! x4d13@x4b47@p? x4b47@p?) (set! x4d12@x4b44@x4b3c x4b44@x4b3c) (set! x4d11@x4b42@x4b3d x4b42@x4b3d) (set! x4d10@x4b40@x4b3b x4b40@x4b3b) (set! x4d0f@x4b36@&lexical-rcd x4b36@&lexical-rcd) (set! x4d0e@x4b34@&lexical-rtd x4b34@&lexical-rtd) (set! x4d0d@x4b32@lexical-violation? x4b32@lexical-violation?) (set! x4d0c@x4b30@make-lexical-violation x4b30@make-lexical-violation) (set! x4d0b@x4b2e@p? x4b2e@p?) (set! x4d0a@x4b2b@x4b23 x4b2b@x4b23) (set! x4d09@x4b29@x4b24 x4b29@x4b24) (set! x4d08@x4b27@x4b22 x4b27@x4b22) (set! x4d07@x4b21@&implementation-restriction-rcd x4b21@&implementation-restriction-rcd) (set! x4d06@x4b1f@&implementation-restriction-rtd x4b1f@&implementation-restriction-rtd) (set! x4d05@x4b1d@implementation-restriction-violation? x4b1d@implementation-restriction-violation?) (set! x4d04@x4b1b@make-implementation-restriction-violation x4b1b@make-implementation-restriction-violation) (set! x4d03@x4b19@p? x4b19@p?) (set! x4d02@x4b16@x4b0e x4b16@x4b0e) (set! x4d01@x4b14@x4b0f x4b14@x4b0f) (set! x4d00@x4b12@x4b0d x4b12@x4b0d) (set! x4cff@x4b0c@&non-continuable-rcd x4b0c@&non-continuable-rcd) (set! x4cfe@x4b0a@&non-continuable-rtd x4b0a@&non-continuable-rtd) (set! x4cfd@x4b08@non-continuable-violation? x4b08@non-continuable-violation?) (set! x4cfc@x4b06@make-non-continuable-violation x4b06@make-non-continuable-violation) (set! x4cfb@x4b04@p? x4b04@p?) (set! x4cfa@x4b01@x4af9 x4b01@x4af9) (set! x4cf9@x4aff@x4afa x4aff@x4afa) (set! x4cf8@x4afd@x4af8 x4afd@x4af8) (set! x4cf7@x4af7@&who-rcd x4af7@&who-rcd) (set! x4cf6@x4af5@&who-rtd x4af5@&who-rtd) (set! x4cf5@x4af3@condition-who x4af3@condition-who) (set! x4cf4@x4af1@who-condition? x4af1@who-condition?) (set! x4cf3@x4aef@x4ade x4aef@x4ade) (set! x4cf2@x4aed@make-who-condition x4aed@make-who-condition) (set! x4cf1@x4aeb@p? x4aeb@p?) (set! x4cf0@x4ae8@x4ae0 x4ae8@x4ae0) (set! x4cef@x4ae6@x4ae1 x4ae6@x4ae1) (set! x4cee@x4ae4@x4adf x4ae4@x4adf) (set! x4ced@x4adc@&irritants-rcd x4adc@&irritants-rcd) (set! x4cec@x4ada@&irritants-rtd x4ada@&irritants-rtd) (set! x4ceb@x4ad8@condition-irritants x4ad8@condition-irritants) (set! x4cea@x4ad6@irritants-condition? x4ad6@irritants-condition?) (set! x4ce9@x4ad4@x4ac3 x4ad4@x4ac3) (set! x4ce8@x4ad2@make-irritants-condition x4ad2@make-irritants-condition) (set! x4ce7@x4ad0@p? x4ad0@p?) (set! x4ce6@x4acd@x4ac5 x4acd@x4ac5) (set! x4ce5@x4acb@x4ac6 x4acb@x4ac6) (set! x4ce4@x4ac9@x4ac4 x4ac9@x4ac4) (set! x4ce3@x4ac1@&assertion-rcd x4ac1@&assertion-rcd) (set! x4ce2@x4abf@&assertion-rtd x4abf@&assertion-rtd) (set! x4ce1@x4abd@assertion-violation? x4abd@assertion-violation?) (set! x4ce0@x4abb@make-assertion-violation x4abb@make-assertion-violation) (set! x4cdf@x4ab9@p? x4ab9@p?) (set! x4cde@x4ab6@x4aae x4ab6@x4aae) (set! x4cdd@x4ab4@x4aaf x4ab4@x4aaf) (set! x4cdc@x4ab2@x4aad x4ab2@x4aad) (set! x4cdb@x4aac@&violation-rcd x4aac@&violation-rcd) (set! x4cda@x4aaa@&violation-rtd x4aaa@&violation-rtd) (set! x4cd9@x4aa8@violation? x4aa8@violation?) (set! x4cd8@x4aa6@make-violation x4aa6@make-violation) (set! x4cd7@x4aa4@p? x4aa4@p?) (set! x4cd6@x4aa1@x4a99 x4aa1@x4a99) (set! x4cd5@x4a9f@x4a9a x4a9f@x4a9a) (set! x4cd4@x4a9d@x4a98 x4a9d@x4a98) (set! x4cd3@x4a97@&error-rcd x4a97@&error-rcd) (set! x4cd2@x4a95@&error-rtd x4a95@&error-rtd) (set! x4cd1@x4a93@error? x4a93@error?) (set! x4cd0@x4a91@make-error x4a91@make-error) (set! x4ccf@x4a8f@p? x4a8f@p?) (set! x4cce@x4a8c@x4a84 x4a8c@x4a84) (set! x4ccd@x4a8a@x4a85 x4a8a@x4a85) (set! x4ccc@x4a88@x4a83 x4a88@x4a83) (set! x4ccb@x4a82@&serious-rcd x4a82@&serious-rcd) (set! x4cca@x4a80@&serious-rtd x4a80@&serious-rtd) (set! x4cc9@x4a7e@serious-condition? x4a7e@serious-condition?) (set! x4cc8@x4a7c@make-serious-condition x4a7c@make-serious-condition) (set! x4cc7@x4a7a@p? x4a7a@p?) (set! x4cc6@x4a77@x4a6f x4a77@x4a6f) (set! x4cc5@x4a75@x4a70 x4a75@x4a70) (set! x4cc4@x4a73@x4a6e x4a73@x4a6e) (set! x4cc3@x4a6d@&warning-rcd x4a6d@&warning-rcd) (set! x4cc2@x4a6b@&warning-rtd x4a6b@&warning-rtd) (set! x4cc1@x4a69@warning? x4a69@warning?) (set! x4cc0@x4a67@make-warning x4a67@make-warning) (set! x4cbf@x4a65@p? x4a65@p?) (set! x4cbe@x4a62@x4a5a x4a62@x4a5a) (set! x4cbd@x4a60@x4a5b x4a60@x4a5b) (set! x4cbc@x4a5e@x4a59 x4a5e@x4a59) (set! x4cbb@x4a58@&message-rcd x4a58@&message-rcd) (set! x4cba@x4a56@&message-rtd x4a56@&message-rtd) (set! x4cb9@x4a54@condition-message x4a54@condition-message) (set! x4cb8@x4a52@message-condition? x4a52@message-condition?) (set! x4cb7@x4a50@x4a3f x4a50@x4a3f) (set! x4cb6@x4a4e@make-message-condition x4a4e@make-message-condition) (set! x4cb5@x4a4c@p? x4a4c@p?) (set! x4cb4@x4a49@x4a41 x4a49@x4a41) (set! x4cb3@x4a47@x4a42 x4a47@x4a42) (set! x4cb2@x4a45@x4a40 x4a45@x4a40) (set! x4cb1@x49f9@&condition-rcd x49f9@&condition-rcd) (set! x4cb0@x49f7@&condition-rtd x49f7@&condition-rtd) (set! x4caf@x49f5@make-&condition x49f5@make-&condition) (set! x4cae@x49f3@&condition? x49f3@&condition?) (set! x4cad@x49f0@x49e8 x49f0@x49e8) (set! x4cac@x49ee@x49e9 x49ee@x49e9) (set! x4cab@x49ec@x49e7 x49ec@x49e7)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (x28ea@x289f@current-primitive-locations (lambda (x520c@x) ((lambda (x520e@t) (if x520e@t (cdr x520e@t) '#f)) (assq x520c@x '((&no-nans-rcd . x4d9b@x4caa@&no-nans-rcd) (&no-nans-rtd . x4d9a@x4ca8@&no-nans-rtd) (&no-infinities-rcd . x4d93@x4c95@&no-infinities-rcd) (&no-infinities-rtd . x4d92@x4c93@&no-infinities-rtd) (&i/o-encoding-rcd . x4d8b@x4c80@&i/o-encoding-rcd) (&i/o-encoding-rtd . x4d8a@x4c7e@&i/o-encoding-rtd) (&i/o-decoding-rcd . x4d81@x4c65@&i/o-decoding-rcd) (&i/o-decoding-rtd . x4d80@x4c63@&i/o-decoding-rtd) (&i/o-port-rcd . x4d79@x4c50@&i/o-port-rcd) (&i/o-port-rtd . x4d78@x4c4e@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . x4d6f@x4c35@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . x4d6e@x4c33@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . x4d67@x4c20@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . x4d66@x4c1e@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . x4d5f@x4c0b@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . x4d5e@x4c09@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . x4d57@x4bf6@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . x4d56@x4bf4@&i/o-file-protection-rtd) (&i/o-filename-rcd . x4d4f@x4be1@&i/o-filename-rcd) (&i/o-filename-rtd . x4d4e@x4bdf@&i/o-filename-rtd) (&i/o-invalid-position-rcd . x4d45@x4bc6@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . x4d44@x4bc4@&i/o-invalid-position-rtd) (&i/o-write-rcd . x4d3b@x4bab@&i/o-write-rcd) (&i/o-write-rtd . x4d3a@x4ba9@&i/o-write-rtd) (&i/o-read-rcd . x4d33@x4b96@&i/o-read-rcd) (&i/o-read-rtd . x4d32@x4b94@&i/o-read-rtd) (&i/o-rcd . x4d2b@x4b81@&i/o-rcd) (&i/o-rtd . x4d2a@x4b7f@&i/o-rtd) (&undefined-rcd . x4d23@x4b6c@&undefined-rcd) (&undefined-rtd . x4d22@x4b6a@&undefined-rtd) (&syntax-rcd . x4d1b@x4b57@&syntax-rcd) (&syntax-rtd . x4d1a@x4b55@&syntax-rtd) (&lexical-rcd . x4d0f@x4b36@&lexical-rcd) (&lexical-rtd . x4d0e@x4b34@&lexical-rtd) (&implementation-restriction-rcd . x4d07@x4b21@&implementation-restriction-rcd) (&implementation-restriction-rtd . x4d06@x4b1f@&implementation-restriction-rtd) (&non-continuable-rcd . x4cff@x4b0c@&non-continuable-rcd) (&non-continuable-rtd . x4cfe@x4b0a@&non-continuable-rtd) (&who-rcd . x4cf7@x4af7@&who-rcd) (&who-rtd . x4cf6@x4af5@&who-rtd) (&irritants-rcd . x4ced@x4adc@&irritants-rcd) (&irritants-rtd . x4cec@x4ada@&irritants-rtd) (&assertion-rcd . x4ce3@x4ac1@&assertion-rcd) (&assertion-rtd . x4ce2@x4abf@&assertion-rtd) (&violation-rcd . x4cdb@x4aac@&violation-rcd) (&violation-rtd . x4cda@x4aaa@&violation-rtd) (&error-rcd . x4cd3@x4a97@&error-rcd) (&error-rtd . x4cd2@x4a95@&error-rtd) (&serious-rcd . x4ccb@x4a82@&serious-rcd) (&serious-rtd . x4cca@x4a80@&serious-rtd) (&warning-rcd . x4cc3@x4a6d@&warning-rcd) (&warning-rtd . x4cc2@x4a6b@&warning-rtd) (&message-rcd . x4cbb@x4a58@&message-rcd) (&message-rtd . x4cba@x4a56@&message-rtd) (&condition-rcd . x4cb1@x49f9@&condition-rcd) (&condition-rtd . x4cb0@x49f7@&condition-rtd) (syntax-error . x49d9@x2fdf@syntax-error) (syntax-dispatch . x496e@x2efa@syntax-dispatch) (load . x4ecc@x4db7@load) (interaction-environment . x49e1@x2fef@interaction-environment) (library-path . x2b01@x2990@library-path) (make-parameter . x2899@x27c3@make-parameter) (make-variable-transformer . x492c@x2d27@make-variable-transformer) (identifier? . x49dc@x2fe5@identifier?) (generate-temporaries . x49d2@x2fd1@generate-temporaries) (free-identifier=? . x49d3@x2fd3@free-identifier=?) (syntax->datum . x49de@x2fe9@syntax->datum) (datum->syntax . x49dd@x2fe7@datum->syntax) (bound-identifier=? . x49d4@x2fd5@bound-identifier=?) (make-i/o-write-error . x4d38@x4ba5@make-i/o-write-error) (make-i/o-read-error . x4d30@x4b90@make-i/o-read-error) (make-i/o-port-error . x4d74@x4c46@make-i/o-port-error) (make-i/o-invalid-position-error . x4d40@x4bbc@make-i/o-invalid-position-error) (make-i/o-filename-error . x4d4a@x4bd7@make-i/o-filename-error) (make-i/o-file-protection-error . x4d54@x4bf0@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . x4d5c@x4c05@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . x4d6c@x4c2f@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . x4d64@x4c1a@make-i/o-file-already-exists-error) (make-i/o-error . x4d28@x4b7b@make-i/o-error) (make-i/o-encoding-error . x4d86@x4c76@make-i/o-encoding-error) (make-i/o-decoding-error . x4d7e@x4c5f@make-i/o-decoding-error) (i/o-write-error? . x4d39@x4ba7@i/o-write-error?) (i/o-read-error? . x4d31@x4b92@i/o-read-error?) (i/o-port-error? . x4d76@x4c4a@i/o-port-error?) (i/o-invalid-position-error? . x4d42@x4bc0@i/o-invalid-position-error?) (i/o-filename-error? . x4d4c@x4bdb@i/o-filename-error?) (i/o-file-protection-error? . x4d55@x4bf2@i/o-file-protection-error?) (i/o-file-is-read-only-error? . x4d5d@x4c07@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . x4d6d@x4c31@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . x4d65@x4c1c@i/o-file-already-exists-error?) (i/o-error? . x4d29@x4b7d@i/o-error?) (i/o-error-position . x4d43@x4bc2@i/o-error-position) (i/o-error-port . x4d77@x4c4c@i/o-error-port) (i/o-error-filename . x4d4d@x4bdd@i/o-error-filename) (i/o-encoding-error? . x4d88@x4c7a@i/o-encoding-error?) (i/o-encoding-error-char . x4d89@x4c7c@i/o-encoding-error-char) (i/o-decoding-error? . x4d7f@x4c61@i/o-decoding-error?) (scheme-report-environment . x49c9@x2fbf@scheme-report-environment) (null-environment . x49c8@x2fbd@null-environment) (command-line . x4ec9@x4db1@command-line) (eval . x49cb@x2fc3@eval) (environment . x49c7@x2fbb@environment) (who-condition? . x4cf4@x4af1@who-condition?) (warning? . x4cc1@x4a69@warning?) (violation? . x4cd9@x4aa8@violation?) (undefined-violation? . x4d21@x4b68@undefined-violation?) (syntax-violation? . x4d17@x4b4f@syntax-violation?) (syntax-violation-subform . x4d19@x4b53@syntax-violation-subform) (syntax-violation-form . x4d18@x4b51@syntax-violation-form) (syntax-violation . x49db@x2fe3@syntax-violation) (serious-condition? . x4cc9@x4a7e@serious-condition?) (non-continuable-violation? . x4cfd@x4b08@non-continuable-violation?) (message-condition? . x4cb8@x4a52@message-condition?) (make-who-condition . x4cf2@x4aed@make-who-condition) (make-warning . x4cc0@x4a67@make-warning) (make-violation . x4cd8@x4aa6@make-violation) (make-undefined-violation . x4d20@x4b66@make-undefined-violation) (make-syntax-violation . x4d14@x4b49@make-syntax-violation) (make-serious-condition . x4cc8@x4a7c@make-serious-condition) (make-non-continuable-violation . x4cfc@x4b06@make-non-continuable-violation) (make-message-condition . x4cb6@x4a4e@make-message-condition) (make-lexical-violation . x4d0c@x4b30@make-lexical-violation) (make-irritants-condition . x4ce8@x4ad2@make-irritants-condition) (make-implementation-restriction-violation . x4d04@x4b1b@make-implementation-restriction-violation) (make-error . x4cd0@x4a91@make-error) (make-assertion-violation . x4ce0@x4abb@make-assertion-violation) (lexical-violation? . x4d0d@x4b32@lexical-violation?) (irritants-condition? . x4cea@x4ad6@irritants-condition?) (implementation-restriction-violation? . x4d05@x4b1d@implementation-restriction-violation?) (error? . x4cd1@x4a93@error?) (condition-who . x4cf5@x4af3@condition-who) (condition-message . x4cb9@x4a54@condition-message) (condition-irritants . x4ceb@x4ad8@condition-irritants) (assertion-violation? . x4ce1@x4abd@assertion-violation?) (no-nans-violation? . x4d99@x4ca6@no-nans-violation?) (no-infinities-violation? . x4d91@x4c91@no-infinities-violation?) (make-no-nans-violation . x4d98@x4ca4@make-no-nans-violation) (make-no-infinities-violation . x4d90@x4c8f@make-no-infinities-violation) (assertion-error . x49d8@x2fdd@assertion-error)))))) (x2b11@x29b0@install-library 'x51e9 '(mosh interaction) '() '() '() '() '((regexp? . x51e1) (alist->eq-hash-table . x51de) (format . x51db) (string-split . x51d0) (call-process . x51ca) (set-current-directory! . x51c6) (expand-path . x51c5) (current-directory . x51c4) (%spawn . x51c3) (%waitpid . x51c2) (pointer-ref-c-int64 . x51c1) (pointer-ref-c-int32 . x51c0) (pointer-ref-c-int16 . x51bf) (pointer-ref-c-int8 . x51be) (pointer-ref-c-uint64 . x51bd) (pointer-ref-c-uint32 . x51bc) (pointer-ref-c-uint16 . x51bb) (pointer-ref-c-uint8 . x51ba) (pointer-set-c-int64! . x51b9) (pointer-set-c-int32! . x51b8) (pointer-set-c-int16! . x51b7) (pointer-set-c-int8! . x51b6) (pointer-set-c-pointer! . x51b5) (pointer-set-c-double! . x51b4) (pointer-set-c-float! . x51b3) (pointer-set-c-long-long! . x51b2) (pointer-set-c-long! . x51b1) (pointer-set-c-int! . x51b0) (pointer-set-c-short! . x51af) (pointer-set-c-char! . x51ae) (pointer-ref-c-pointer . x51ad) (pointer-ref-c-double . x51ac) (pointer-ref-c-float . x51ab) (pointer-ref-c-unsigned-long-long . x51aa) (pointer-ref-c-signed-long-long . x51a9) (pointer-ref-c-unsigned-long . x51a8) (pointer-ref-c-signed-long . x51a7) (pointer-ref-c-unsigned-int . x51a6) (pointer-ref-c-signed-int . x51a5) (pointer-ref-c-unsigned-short . x51a4) (pointer-ref-c-signed-short . x51a3) (pointer-ref-c-unsigned-char . x51a2) (pointer-ref-c-signed-char . x51a1) (pointer->integer . x51a0) (integer->pointer . x519f) (pointer? . x519e) (%ffi-supported? . x519d) (%ffi-pointer->string . x519c) (%ffi-call->string-or-zero . x519b) (%ffi-call->double . x519a) (%ffi-call->void* . x5199) (%ffi-call->void . x5198) (%ffi-call->int . x5197) (%ffi-lookup . x5196) (%ffi-open . x5195) (%fork . x5194) (%pipe . x5193) (p . x5192) (whereis . x517c) (register . x517b) (vm-join! . x517a) (vm-set-value! . x5179) (vm? . x5178) (main-vm? . x5177) (vm-eval . x5176) (vm-self . x5175) (vm-start! . x5174) (make-vm . x5173) (mutex-try-lock! . x5172) (mutex-unlock! . x5171) (mutex-lock! . x5170) (mutex? . x516f) (make-mutex . x516e) (condition-variable-notify-all! . x516d) (condition-variable-notify! . x516c) (condition-variable-wait! . x516b) (make-condition-variable . x516a) (string-upcase . x5153) (string-titlecase . x5152) (string-normalize-nfkd . x5151) (string-normalize-nfkc . x5150) (string-normalize-nfd . x514f) (string-normalize-nfc . x514e) (string-foldcase . x514d) (string-downcase . x514c) (string-ci>? . x514b) (string-ci>=? . x514a) (string-ci=? . x5149) (string-ci<? . x5148) (string-ci<=? . x5147) (char-whitespace? . x5146) (char-upper-case? . x5145) (char-title-case? . x5144) (char-numeric? . x5143) (char-lower-case? . x5142) (char-general-category . x5141) (char-upcase . x5140) (char-titlecase . x513f) (char-foldcase . x513e) (char-downcase . x513d) (char-ci>? . x513c) (char-ci>=? . x513b) (char-ci=? . x513a) (char-ci<? . x5139) (char-ci<=? . x5138) (char-alphabetic? . x5137) (make-variable-transformer . x2d26) (identifier? . x2fe4) (generate-temporaries . x2fd0) (free-identifier=? . x2fd2) (syntax->datum . x2fe8) (datum->syntax . x2fe6) (bound-identifier=? . x2fd4) (record-type-descriptor? . x5136) (record-predicate . x5135) (record-mutator . x5134) (record-constructor . x5133) (record-accessor . x5132) (make-record-type-descriptor . x5131) (make-record-constructor-descriptor . x5130) (record? . x512f) (record-type-uid . x512e) (record-type-sealed? . x512d) (record-type-parent . x512c) (record-type-opaque? . x512b) (record-type-name . x512a) (record-type-generative? . x5129) (record-type-field-names . x5128) (record-rtd . x5127) (record-field-mutable? . x5126) (delete-file . x5125) (file-exists? . x5124) (vector-sort! . x5123) (vector-sort . x5122) (list-sort . x5121) (symbol-hash . x5120) (string-ci-hash . x511f) (string-hash . x511e) (equal-hash . x511d) (hashtable-equivalence-function . x511c) (make-hashtable . x511b) (hashtable-hash-function . x511a) (make-eqv-hashtable . x5119) (make-eq-hashtable . x5118) (hashtable? . x5117) (hashtable-update! . x5116) (hashtable-size . x5115) (hashtable-set! . x5114) (hashtable-ref . x5113) (hashtable-mutable? . x5112) (hashtable-keys . x5111) (hashtable-entries . x5110) (hashtable-delete! . x510f) (hashtable-copy . x510e) (hashtable-contains? . x510d) (hashtable-clear! . x510c) (call-with-output-file . x510b) (call-with-input-file . x510a) (write-char . x5109) (write . x5108) (with-output-to-file . x5107) (with-input-from-file . x5106) (read-char . x5105) (read . x5104) (peek-char . x5103) (open-output-file . x5102) (open-input-file . x5101) (newline . x5100) (display . x50ff) (close-output-port . x50fe) (close-input-port . x50fd) (eof-object? . x50fc) (eof-object . x50fb) (current-error-port . x50fa) (current-output-port . x50f9) (current-input-port . x50f8) (output-port? . x50f7) (input-port? . x50f6) (utf-8-codec . x50f5) (utf-16-codec . x50f4) (transcoder-error-handling-mode . x50f3) (transcoder-eol-style . x50f2) (transcoder-codec . x50f1) (transcoded-port . x50f0) (textual-port? . x50ef) (string->bytevector . x50ee) (standard-output-port . x50ed) (standard-input-port . x50ec) (standard-error-port . x50eb) (set-port-position! . x50ea) (put-u8 . x50e9) (put-string . x50e8) (put-datum . x50e7) (put-char . x50e6) (put-bytevector . x50e5) (port? . x50e4) (port-transcoder . x50e3) (port-position . x50e2) (port-has-set-port-position!? . x50e1) (port-has-port-position? . x50e0) (port-eof? . x50df) (output-port-buffer-mode . x50de) (open-string-output-port . x50dd) (open-string-input-port . x50dc) (open-file-output-port . x50db) (open-file-input/output-port . x50da) (open-file-input-port . x50d9) (open-bytevector-output-port . x50d8) (open-bytevector-input-port . x50d7) (native-transcoder . x50d6) (native-eol-style . x50d5) (make-transcoder . x50d4) (latin-1-codec . x50d3) (make-i/o-write-error . x4ba4) (make-i/o-read-error . x4b8f) (make-i/o-port-error . x4c45) (make-i/o-invalid-position-error . x4bbb) (make-i/o-filename-error . x4bd6) (make-i/o-file-protection-error . x4bef) (make-i/o-file-is-read-only-error . x4c04) (make-i/o-file-does-not-exist-error . x4c2e) (make-i/o-file-already-exists-error . x4c19) (make-i/o-error . x4b7a) (make-i/o-encoding-error . x4c75) (make-i/o-decoding-error . x4c5e) (make-custom-textual-output-port . x50d2) (make-custom-textual-input/output-port . x50d1) (make-custom-textual-input-port . x50d0) (make-custom-binary-output-port . x50cf) (make-custom-binary-input/output-port . x50ce) (make-custom-binary-input-port . x50cd) (make-bytevector . x50cc) (lookahead-u8 . x50cb) (lookahead-char . x50ca) (i/o-write-error? . x4ba6) (i/o-read-error? . x4b91) (i/o-port-error? . x4c49) (i/o-invalid-position-error? . x4bbf) (i/o-filename-error? . x4bda) (i/o-file-protection-error? . x4bf1) (i/o-file-is-read-only-error? . x4c06) (i/o-file-does-not-exist-error? . x4c30) (i/o-file-already-exists-error? . x4c1b) (i/o-error? . x4b7c) (i/o-error-position . x4bc1) (i/o-error-port . x4c4b) (i/o-error-filename . x4bdc) (i/o-encoding-error? . x4c79) (i/o-encoding-error-char . x4c7b) (i/o-decoding-error? . x4c60) (get-u8 . x50c9) (get-string-n! . x50c8) (get-string-n . x50c7) (get-string-all . x50c6) (get-line . x50c5) (get-datum . x50c4) (get-char . x50c3) (get-bytevector-some . x50c2) (get-bytevector-n! . x50c1) (get-bytevector-n . x50c0) (get-bytevector-all . x50bf) (flush-output-port . x50be) (close-port . x50bd) (exit . x50b5) (command-line . x4db0) (string-fill! . x50b4) (string-set! . x50b3) (set-cdr! . x50b2) (set-car! . x50b1) (remove . x50b0) (remv . x50af) (remp . x50ae) (remq . x50ad) (partition . x50ac) (memv . x50ab) (memq . x50aa) (memp . x50a9) (member . x50a8) (exists . x50a7) (for-all . x50a6) (fold-right . x50a5) (fold-left . x50a4) (find . x50a3) (filter . x50a2) (cons* . x50a1) (assv . x50a0) (assq . x509f) (assp . x509e) (assoc . x509d) (call-with-string-output-port . x509c) (call-with-port . x509b) (call-with-bytevector-output-port . x509a) (bytevector->string . x5099) (buffer-mode? . x5098) (binary-port? . x5097) (with-exception-handler . x5096) (raise-continuable . x5095) (raise . x5094) (eval . x2fc2) (environment . x2fba) (make-enumeration . x5093) (enum-set=? . x5092) (enum-set-universe . x5091) (enum-set-union . x5090) (enum-set-subset? . x508f) (enum-set-projection . x508e) (enum-set-member? . x508d) (enum-set-intersection . x508c) (enum-set-indexer . x508b) (enum-set-difference . x508a) (enum-set-constructor . x5089) (enum-set-complement . x5088) (enum-set->list . x5087) (who-condition? . x4af0) (warning? . x4a68) (violation? . x4aa7) (undefined-violation? . x4b67) (syntax-violation? . x4b4e) (syntax-violation-subform . x4b52) (syntax-violation-form . x4b50) (syntax-violation . x2fe2) (simple-conditions . x5086) (serious-condition? . x4a7d) (non-continuable-violation? . x4b07) (message-condition? . x4a51) (make-who-condition . x4aec) (make-warning . x4a66) (make-violation . x4aa5) (make-undefined-violation . x4b65) (make-syntax-violation . x4b48) (make-serious-condition . x4a7b) (make-non-continuable-violation . x4b05) (make-message-condition . x4a4d) (make-lexical-violation . x4b2f) (make-irritants-condition . x4ad1) (make-implementation-restriction-violation . x4b1a) (make-error . x4a90) (make-assertion-violation . x4aba) (lexical-violation? . x4b31) (irritants-condition? . x4ad5) (implementation-restriction-violation? . x4b1c) (error? . x4a92) (condition-who . x4af2) (condition-predicate . x5085) (condition-message . x4a53) (condition-irritants . x4ad7) (condition-accessor . x5084) (condition . x5083) (assertion-violation? . x4abc) (condition? . x5082) (utf32->string . x5081) (utf16->string . x5080) (utf8->string . x507f) (uint-list->bytevector . x507e) (u8-list->bytevector . x507d) (string->utf8 . x507c) (string->utf32 . x507b) (string->utf16 . x507a) (sint-list->bytevector . x5079) (native-endianness . x5078) (bytevector? . x5077) (bytevector=? . x5076) (bytevector-uint-set! . x5075) (bytevector-uint-ref . x5074) (bytevector-u8-set! . x5073) (bytevector-u8-ref . x5072) (bytevector-u64-set! . x5071) (bytevector-u64-ref . x5070) (bytevector-u64-native-set! . x506f) (bytevector-u64-native-ref . x506e) (bytevector-u32-set! . x506d) (bytevector-u32-ref . x506c) (bytevector-u32-native-set! . x506b) (bytevector-u32-native-ref . x506a) (bytevector-u16-set! . x5069) (bytevector-u16-ref . x5068) (bytevector-u16-native-set! . x5067) (bytevector-u16-native-ref . x5066) (bytevector-sint-set! . x5065) (bytevector-sint-ref . x5064) (bytevector-s8-set! . x5063) (bytevector-s8-ref . x5062) (bytevector-s64-set! . x5061) (bytevector-s64-ref . x5060) (bytevector-s64-native-set! . x505f) (bytevector-s64-native-ref . x505e) (bytevector-s32-set! . x505d) (bytevector-s32-ref . x505c) (bytevector-s32-native-set! . x505b) (bytevector-s32-native-ref . x505a) (bytevector-s16-set! . x5059) (bytevector-s16-ref . x5058) (bytevector-s16-native-set! . x5057) (bytevector-s16-native-ref . x5056) (bytevector-length . x5055) (bytevector-ieee-single-ref . x5054) (bytevector-ieee-single-set! . x5053) (bytevector-ieee-single-native-set! . x5052) (bytevector-ieee-single-native-ref . x5051) (bytevector-ieee-double-set! . x5050) (bytevector-ieee-double-ref . x504f) (bytevector-ieee-double-native-set! . x504e) (bytevector-ieee-double-native-ref . x504d) (bytevector-fill! . x504c) (bytevector-copy! . x504b) (bytevector-copy . x504a) (bytevector->uint-list . x5049) (bytevector->u8-list . x5048) (bytevector->sint-list . x5047) (no-nans-violation? . x4ca5) (no-infinities-violation? . x4c90) (make-no-nans-violation . x4ca3) (make-no-infinities-violation . x4c8e) (real->flonum . x5046) (flzero? . x5045) (fltruncate . x5044) (fltan . x5043) (flsqrt . x5042) (flsin . x5041) (flround . x5040) (flpositive? . x503f) (flonum? . x503e) (flodd? . x503d) (flnumerator . x503c) (flnegative? . x503b) (flnan? . x503a) (flmod0 . x5039) (flmod . x5038) (flmin . x5037) (flmax . x5036) (fllog . x5035) (flinteger? . x5034) (flinfinite? . x5033) (flfloor . x5032) (flfinite? . x5031) (flexpt . x5030) (flexp . x502f) (fleven? . x502e) (fldiv0-and-mod0 . x502d) (fldiv0 . x502c) (fldiv-and-mod . x502b) (fldiv . x502a) (fldenominator . x5029) (flcos . x5028) (flceiling . x5027) (flatan . x5026) (flasin . x5025) (flacos . x5024) (flabs . x5023) (fl>? . x5022) (fl>=? . x5021) (fl=? . x5020) (fl<? . x501f) (fl<=? . x501e) (fl/ . x501d) (fl- . x501c) (fl+ . x501b) (fl* . x501a) (fixnum->flonum . x5019) (fxzero? . x5018) (fxxor . x5017) (fxrotate-bit-field . x5016) (fxreverse-bit-field . x5015) (fxpositive? . x5014) (fxodd? . x5013) (fxnot . x5012) (fxnegative? . x5011) (fxmod0 . x5010) (fxmod . x500f) (fxmin . x500e) (fxmax . x500d) (fxlength . x500c) (fxior . x500b) (fxif . x500a) (fxfirst-bit-set . x5009) (fxeven? . x5008) (fxdiv0-and-mod0 . x5007) (fxdiv0 . x5006) (fxdiv-and-mod . x5005) (fxdiv . x5004) (fxcopy-bit-field . x5003) (fxcopy-bit . x5002) (fxbit-set? . x5001) (fxbit-field . x5000) (fxbit-count . x4fff) (fxarithmetic-shift-right . x4ffe) (fxarithmetic-shift-left . x4ffd) (fxarithmetic-shift . x4ffc) (fxand . x4ffb) (fx>? . x4ffa) (fx>=? . x4ff9) (fx=? . x4ff8) (fx<? . x4ff7) (fx<=? . x4ff6) (fx-/carry . x4ff5) (fx- . x4ff4) (fx+/carry . x4ff3) (fx+ . x4ff2) (fx*/carry . x4ff1) (fx* . x4ff0) (greatest-fixnum . x4fef) (least-fixnum . x4fee) (fixnum-width . x4fed) (fixnum? . x4fec) (bitwise-rotate-bit-field . x4feb) (bitwise-reverse-bit-field . x4fea) (bitwise-length . x4fe9) (bitwise-if . x4fe8) (bitwise-first-bit-set . x4fe7) (bitwise-copy-bit-field . x4fe6) (bitwise-copy-bit . x4fe5) (bitwise-bit-set? . x4fe4) (bitwise-bit-field . x4fe3) (bitwise-bit-count . x4fe2) (bitwise-xor . x4fe1) (bitwise-ior . x4fe0) (bitwise-and . x4fdf) (bitwise-not . x4fde) (bitwise-arithmetic-shift-right . x4fdd) (bitwise-arithmetic-shift-left . x4fdc) (bitwise-arithmetic-shift . x4fdb) (zero? . x4fda) (vector? . x4fd9) (vector-set! . x4fd8) (vector-ref . x4fd7) (vector-map . x4fd6) (vector-length . x4fd5) (vector-for-each . x4fd4) (vector-fill! . x4fd3) (vector->list . x4fd2) (vector . x4fd1) (values . x4fd0) (truncate . x4fcf) (tan . x4fce) (symbol? . x4fcd) (symbol=? . x4fcc) (symbol->string . x4fcb) (substring . x4fca) (string? . x4fc9) (string>? . x4fc8) (string>=? . x4fc7) (string=? . x4fc6) (string<? . x4fc5) (string<=? . x4fc4) (string-ref . x4fc3) (string-length . x4fc2) (string-for-each . x4fc1) (string-copy . x4fc0) (string-append . x4fbf) (string->symbol . x4fbe) (string->number . x4fbd) (string->list . x4fbc) (string . x4fbb) (sqrt . x4fba) (sin . x4fb9) (round . x4fb8) (reverse . x4fb7) (real? . x4fb6) (real-valued? . x4fb5) (real-part . x4fb4) (rationalize . x4fb3) (rational? . x4fb2) (rational-valued? . x4fb1) (procedure? . x4fb0) (positive? . x4faf) (pair? . x4fae) (odd? . x4fad) (numerator . x4fac) (number? . x4fab) (number->string . x4faa) (null? . x4fa9) (not . x4fa8) (negative? . x4fa7) (nan? . x4fa6) (min . x4fa5) (max . x4fa4) (map . x4fa3) (make-vector . x4fa2) (make-string . x4fa1) (make-rectangular . x4fa0) (make-polar . x4f9f) (magnitude . x4f9e) (log . x4f9d) (list? . x4f9c) (list-tail . x4f9b) (list-ref . x4f9a) (list->vector . x4f99) (list->string . x4f98) (list . x4f97) (length . x4f96) (lcm . x4f95) (integer? . x4f94) (integer-valued? . x4f93) (integer->char . x4f92) (infinite? . x4f91) (inexact? . x4f90) (inexact . x4f8f) (imag-part . x4f8e) (gcd . x4f8d) (for-each . x4f8c) (floor . x4f8b) (finite? . x4f8a) (expt . x4f89) (exp . x4f88) (exact? . x4f87) (exact-integer-sqrt . x4f86) (exact . x4f85) (even? . x4f84) (error . x4f83) (eqv? . x4f82) (equal? . x4f81) (eq? . x4f80) (dynamic-wind . x4f7f) (div0-and-mod0 . x4f7e) (mod0 . x4f7d) (div0 . x4f7c) (div-and-mod . x4f7b) (mod . x4f7a) (div . x4f79) (denominator . x4f78) (cos . x4f77) (cons . x4f76) (complex? . x4f75) (char? . x4f74) (char>? . x4f73) (char>=? . x4f72) (char=? . x4f71) (char<? . x4f70) (char<=? . x4f6f) (char->integer . x4f6e) (ceiling . x4f6d) (call-with-values . x4f6c) (call/cc . x4f6b) (call-with-current-continuation . x4f6a) (cddddr . x4f69) (cdddar . x4f68) (cddadr . x4f67) (cddaar . x4f66) (cdaddr . x4f65) (cdadar . x4f64) (cdaadr . x4f63) (cdaaar . x4f62) (cadddr . x4f61) (caddar . x4f60) (cadadr . x4f5f) (cadaar . x4f5e) (caaddr . x4f5d) (caadar . x4f5c) (caaadr . x4f5b) (caaaar . x4f5a) (cdddr . x4f59) (cddar . x4f58) (cdadr . x4f57) (cdaar . x4f56) (caddr . x4f55) (cadar . x4f54) (caadr . x4f53) (caaar . x4f52) (cddr . x4f51) (cdar . x4f50) (cadr . x4f4f) (caar . x4f4e) (cdr . x4f4d) (car . x4f4c) (boolean? . x4f4b) (boolean=? . x4f4a) (atan . x4f49) (assertion-violation . x4f48) (asin . x4f47) (apply . x4f46) (append . x4f45) (angle . x4f44) (acos . x4f43) (abs . x4f42) (/ . x4f41) (* . x4f40) (- . x4f3f) (+ . x4f3e) (>= . x4f3d) (> . x4f3c) (= . x4f3b) (<= . x4f3a) (< . x4f39) (library . x4f38) (&no-nans . x4f37) (&no-infinities . x4f36) (&i/o-encoding . x4f35) (&i/o-decoding . x4f34) (&i/o-port . x4f33) (&i/o-file-does-not-exist . x4f32) (&i/o-file-already-exists . x4f31) (&i/o-file-is-read-only . x4f30) (&i/o-file-protection . x4f2f) (&i/o-filename . x4f2e) (&i/o-invalid-position . x4f2d) (&i/o-write . x4f2c) (&i/o-read . x4f2b) (&i/o . x4f2a) (&undefined . x4f29) (&syntax . x4f28) (&lexical . x4f27) (&implementation-restriction . x4f26) (&non-continuable . x4f25) (&who . x4f24) (&irritants . x4f23) (&assertion . x4f22) (&violation . x4f21) (&error . x4f20) (&serious . x4f1f) (&warning . x4f1e) (&message . x4f1d) (&condition . x4f1c) (define-condition-type . x4f1b) (define-enumeration . x4f1a) (define-record-type . x4f19) (parent-rtd . x4f18) (nongenerative . x4f17) (opaque . x4f16) (sealed . x4f15) (protocol . x4f14) (parent . x4f13) (immutable . x4f12) (mutable . x4f11) (fields . x4f10) (error-handling-mode . x4f0f) (file-options . x4f0e) (buffer-mode . x4f0d) (eol-style . x4f0c) (guard . x4f0b) (unsyntax-splicing . x4f08) (unsyntax . x4f07) (unquote-splicing . x4f06) (unquote . x4f05) (_ . x4f04) (else . x4f03) (=> . x4f02) (... . x4f01) (assert . x4f00) (endianness . x4eff) (time . x4efd) (do . x4efc) (cond . x4efb) (let* . x4efa) (let . x4ef9) (let*-values . x4ef8) (let-values . x4ef7) (identifier-syntax . x4ef6) (with-syntax . x4ef5) (quasisyntax . x4ef4) (quasiquote . x4ef3) (syntax-rules . x4ef2) (include . x4ef1) (record-constructor-descriptor . x4eef) (record-type-descriptor . x4eee) (case . x4eed) (unless . x4eeb) (when . x4eea) (or . x4ee9) (and . x4ee8) (if . x4ee7) (letrec* . x4ee6) (letrec . x4ee5) (case-lambda . x4ee3) (lambda . x4ee2) (syntax . x4ee1) (syntax-case . x4ee0) (quote . x4edf) (letrec-syntax . x4edd) (let-syntax . x4edc) (set! . x4edb) (import . x4eda) (begin . x4ed9) (define-syntax . x4ed7) (define . x4ed6)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51ea '(psyntax null-environment-5) '() '() '() '() '((make-promise . x50b6) (unquote-splicing . x4f06) (unquote . x4f05) (_ . x4f04) (else . x4f03) (=> . x4f02) (... . x4f01) (delay . x4efe) (do . x4efc) (cond . x4efb) (let* . x4efa) (let . x4ef9) (quasiquote . x4ef3) (syntax-rules . x4ef2) (case . x4eed) (or . x4ee9) (and . x4ee8) (if . x4ee7) (letrec . x4ee5) (lambda . x4ee2) (quote . x4edf) (letrec-syntax . x4edd) (let-syntax . x4edc) (set! . x4edb) (begin . x4ed9) (define-syntax . x4ed7) (define . x4ed6)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51eb '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . x514b) (string-ci>=? . x514a) (string-ci=? . x5149) (string-ci<? . x5148) (string-ci<=? . x5147) (char-whitespace? . x5146) (char-upper-case? . x5145) (char-numeric? . x5143) (char-lower-case? . x5142) (char-upcase . x5140) (char-downcase . x513d) (char-ci>? . x513c) (char-ci>=? . x513b) (char-ci=? . x513a) (char-ci<? . x5139) (char-ci<=? . x5138) (char-alphabetic? . x5137) (call-with-output-file . x510b) (call-with-input-file . x510a) (write-char . x5109) (write . x5108) (with-output-to-file . x5107) (with-input-from-file . x5106) (read-char . x5105) (read . x5104) (peek-char . x5103) (open-output-file . x5102) (open-input-file . x5101) (newline . x5100) (display . x50ff) (close-output-port . x50fe) (close-input-port . x50fd) (eof-object . x50fb) (current-output-port . x50f9) (current-input-port . x50f8) (output-port? . x50f7) (input-port? . x50f6) (scheme-report-environment . x2fbe) (quotient . x50bc) (null-environment . x2fbc) (remainder . x50bb) (modulo . x50ba) (inexact->exact . x50b9) (force . x50b8) (exact->inexact . x50b7) (make-promise . x50b6) (string-fill! . x50b4) (string-set! . x50b3) (set-cdr! . x50b2) (set-car! . x50b1) (memv . x50ab) (memq . x50aa) (member . x50a8) (assv . x50a0) (assq . x509f) (assoc . x509d) (eval . x2fc2) (zero? . x4fda) (vector? . x4fd9) (vector-set! . x4fd8) (vector-ref . x4fd7) (vector-length . x4fd5) (vector-fill! . x4fd3) (vector->list . x4fd2) (vector . x4fd1) (values . x4fd0) (truncate . x4fcf) (tan . x4fce) (symbol? . x4fcd) (symbol->string . x4fcb) (substring . x4fca) (string? . x4fc9) (string>? . x4fc8) (string>=? . x4fc7) (string=? . x4fc6) (string<? . x4fc5) (string<=? . x4fc4) (string-ref . x4fc3) (string-length . x4fc2) (string-copy . x4fc0) (string-append . x4fbf) (string->symbol . x4fbe) (string->number . x4fbd) (string->list . x4fbc) (string . x4fbb) (sqrt . x4fba) (sin . x4fb9) (round . x4fb8) (reverse . x4fb7) (real? . x4fb6) (real-part . x4fb4) (rationalize . x4fb3) (rational? . x4fb2) (procedure? . x4fb0) (positive? . x4faf) (pair? . x4fae) (odd? . x4fad) (numerator . x4fac) (number? . x4fab) (number->string . x4faa) (not . x4fa8) (negative? . x4fa7) (min . x4fa5) (max . x4fa4) (map . x4fa3) (make-vector . x4fa2) (make-string . x4fa1) (make-rectangular . x4fa0) (make-polar . x4f9f) (magnitude . x4f9e) (log . x4f9d) (list? . x4f9c) (list-tail . x4f9b) (list-ref . x4f9a) (list->vector . x4f99) (list->string . x4f98) (list . x4f97) (length . x4f96) (lcm . x4f95) (integer? . x4f94) (integer->char . x4f92) (inexact? . x4f90) (imag-part . x4f8e) (gcd . x4f8d) (for-each . x4f8c) (floor . x4f8b) (expt . x4f89) (exp . x4f88) (exact? . x4f87) (even? . x4f84) (eqv? . x4f82) (equal? . x4f81) (eq? . x4f80) (dynamic-wind . x4f7f) (denominator . x4f78) (cos . x4f77) (cons . x4f76) (complex? . x4f75) (char? . x4f74) (char>? . x4f73) (char>=? . x4f72) (char=? . x4f71) (char<? . x4f70) (char<=? . x4f6f) (char->integer . x4f6e) (ceiling . x4f6d) (call-with-values . x4f6c) (call-with-current-continuation . x4f6a) (cddddr . x4f69) (cdddar . x4f68) (cddadr . x4f67) (cddaar . x4f66) (cdaddr . x4f65) (cdadar . x4f64) (cdaadr . x4f63) (cdaaar . x4f62) (cadddr . x4f61) (caddar . x4f60) (cadadr . x4f5f) (cadaar . x4f5e) (caaddr . x4f5d) (caadar . x4f5c) (caaadr . x4f5b) (caaaar . x4f5a) (cdddr . x4f59) (cddar . x4f58) (cdadr . x4f57) (cdaar . x4f56) (caddr . x4f55) (cadar . x4f54) (caadr . x4f53) (caaar . x4f52) (cddr . x4f51) (cdar . x4f50) (cadr . x4f4f) (caar . x4f4e) (cdr . x4f4d) (car . x4f4c) (boolean? . x4f4b) (atan . x4f49) (asin . x4f47) (apply . x4f46) (append . x4f45) (angle . x4f44) (acos . x4f43) (abs . x4f42) (/ . x4f41) (* . x4f40) (- . x4f3f) (+ . x4f3e) (>= . x4f3d) (> . x4f3c) (= . x4f3b) (<= . x4f3a) (< . x4f39) (unquote-splicing . x4f06) (unquote . x4f05) (else . x4f03) (=> . x4f02) (... . x4f01) (delay . x4efe) (do . x4efc) (cond . x4efb) (let* . x4efa) (let . x4ef9) (quasiquote . x4ef3) (syntax-rules . x4ef2) (case . x4eed) (or . x4ee9) (and . x4ee8) (if . x4ee7) (letrec . x4ee5) (lambda . x4ee2) (quote . x4edf) (letrec-syntax . x4edd) (let-syntax . x4edc) (set! . x4edb) (begin . x4ed9) (define-syntax . x4ed7) (define . x4ed6)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51ec '(psyntax modules) '() '() '() '() '((module . x4ed8)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51ed '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51ee '(rnrs) '(6) '() '() '() '((regexp? . x51e1) (string-upcase . x5153) (string-titlecase . x5152) (string-normalize-nfkd . x5151) (string-normalize-nfkc . x5150) (string-normalize-nfd . x514f) (string-normalize-nfc . x514e) (string-foldcase . x514d) (string-downcase . x514c) (string-ci>? . x514b) (string-ci>=? . x514a) (string-ci=? . x5149) (string-ci<? . x5148) (string-ci<=? . x5147) (char-whitespace? . x5146) (char-upper-case? . x5145) (char-title-case? . x5144) (char-numeric? . x5143) (char-lower-case? . x5142) (char-general-category . x5141) (char-upcase . x5140) (char-titlecase . x513f) (char-foldcase . x513e) (char-downcase . x513d) (char-ci>? . x513c) (char-ci>=? . x513b) (char-ci=? . x513a) (char-ci<? . x5139) (char-ci<=? . x5138) (char-alphabetic? . x5137) (make-variable-transformer . x2d26) (identifier? . x2fe4) (generate-temporaries . x2fd0) (free-identifier=? . x2fd2) (syntax->datum . x2fe8) (datum->syntax . x2fe6) (bound-identifier=? . x2fd4) (record-type-descriptor? . x5136) (record-predicate . x5135) (record-mutator . x5134) (record-constructor . x5133) (record-accessor . x5132) (make-record-type-descriptor . x5131) (make-record-constructor-descriptor . x5130) (record? . x512f) (record-type-uid . x512e) (record-type-sealed? . x512d) (record-type-parent . x512c) (record-type-opaque? . x512b) (record-type-name . x512a) (record-type-generative? . x5129) (record-type-field-names . x5128) (record-rtd . x5127) (record-field-mutable? . x5126) (delete-file . x5125) (file-exists? . x5124) (vector-sort! . x5123) (vector-sort . x5122) (list-sort . x5121) (symbol-hash . x5120) (string-ci-hash . x511f) (string-hash . x511e) (equal-hash . x511d) (hashtable-equivalence-function . x511c) (make-hashtable . x511b) (hashtable-hash-function . x511a) (make-eqv-hashtable . x5119) (make-eq-hashtable . x5118) (hashtable? . x5117) (hashtable-update! . x5116) (hashtable-size . x5115) (hashtable-set! . x5114) (hashtable-ref . x5113) (hashtable-mutable? . x5112) (hashtable-keys . x5111) (hashtable-entries . x5110) (hashtable-delete! . x510f) (hashtable-copy . x510e) (hashtable-contains? . x510d) (hashtable-clear! . x510c) (call-with-output-file . x510b) (call-with-input-file . x510a) (write-char . x5109) (write . x5108) (with-output-to-file . x5107) (with-input-from-file . x5106) (read-char . x5105) (read . x5104) (peek-char . x5103) (open-output-file . x5102) (open-input-file . x5101) (newline . x5100) (display . x50ff) (close-output-port . x50fe) (close-input-port . x50fd) (eof-object? . x50fc) (eof-object . x50fb) (current-error-port . x50fa) (current-output-port . x50f9) (current-input-port . x50f8) (output-port? . x50f7) (input-port? . x50f6) (utf-8-codec . x50f5) (utf-16-codec . x50f4) (transcoder-error-handling-mode . x50f3) (transcoder-eol-style . x50f2) (transcoder-codec . x50f1) (transcoded-port . x50f0) (textual-port? . x50ef) (string->bytevector . x50ee) (standard-output-port . x50ed) (standard-input-port . x50ec) (standard-error-port . x50eb) (set-port-position! . x50ea) (put-u8 . x50e9) (put-string . x50e8) (put-datum . x50e7) (put-char . x50e6) (put-bytevector . x50e5) (port? . x50e4) (port-transcoder . x50e3) (port-position . x50e2) (port-has-set-port-position!? . x50e1) (port-has-port-position? . x50e0) (port-eof? . x50df) (output-port-buffer-mode . x50de) (open-string-output-port . x50dd) (open-string-input-port . x50dc) (open-file-output-port . x50db) (open-file-input/output-port . x50da) (open-file-input-port . x50d9) (open-bytevector-output-port . x50d8) (open-bytevector-input-port . x50d7) (native-transcoder . x50d6) (native-eol-style . x50d5) (make-transcoder . x50d4) (latin-1-codec . x50d3) (make-i/o-write-error . x4ba4) (make-i/o-read-error . x4b8f) (make-i/o-port-error . x4c45) (make-i/o-invalid-position-error . x4bbb) (make-i/o-filename-error . x4bd6) (make-i/o-file-protection-error . x4bef) (make-i/o-file-is-read-only-error . x4c04) (make-i/o-file-does-not-exist-error . x4c2e) (make-i/o-file-already-exists-error . x4c19) (make-i/o-error . x4b7a) (make-i/o-encoding-error . x4c75) (make-i/o-decoding-error . x4c5e) (make-custom-textual-output-port . x50d2) (make-custom-textual-input/output-port . x50d1) (make-custom-textual-input-port . x50d0) (make-custom-binary-output-port . x50cf) (make-custom-binary-input/output-port . x50ce) (make-custom-binary-input-port . x50cd) (make-bytevector . x50cc) (lookahead-u8 . x50cb) (lookahead-char . x50ca) (i/o-write-error? . x4ba6) (i/o-read-error? . x4b91) (i/o-port-error? . x4c49) (i/o-invalid-position-error? . x4bbf) (i/o-filename-error? . x4bda) (i/o-file-protection-error? . x4bf1) (i/o-file-is-read-only-error? . x4c06) (i/o-file-does-not-exist-error? . x4c30) (i/o-file-already-exists-error? . x4c1b) (i/o-error? . x4b7c) (i/o-error-position . x4bc1) (i/o-error-port . x4c4b) (i/o-error-filename . x4bdc) (i/o-encoding-error? . x4c79) (i/o-encoding-error-char . x4c7b) (i/o-decoding-error? . x4c60) (get-u8 . x50c9) (get-string-n! . x50c8) (get-string-n . x50c7) (get-string-all . x50c6) (get-line . x50c5) (get-datum . x50c4) (get-char . x50c3) (get-bytevector-some . x50c2) (get-bytevector-n! . x50c1) (get-bytevector-n . x50c0) (get-bytevector-all . x50bf) (flush-output-port . x50be) (close-port . x50bd) (exit . x50b5) (command-line . x4db0) (remove . x50b0) (remv . x50af) (remp . x50ae) (remq . x50ad) (partition . x50ac) (memv . x50ab) (memq . x50aa) (memp . x50a9) (member . x50a8) (exists . x50a7) (for-all . x50a6) (fold-right . x50a5) (fold-left . x50a4) (find . x50a3) (filter . x50a2) (cons* . x50a1) (assv . x50a0) (assq . x509f) (assp . x509e) (assoc . x509d) (call-with-string-output-port . x509c) (call-with-port . x509b) (call-with-bytevector-output-port . x509a) (bytevector->string . x5099) (buffer-mode? . x5098) (binary-port? . x5097) (with-exception-handler . x5096) (raise-continuable . x5095) (raise . x5094) (make-enumeration . x5093) (enum-set=? . x5092) (enum-set-universe . x5091) (enum-set-union . x5090) (enum-set-subset? . x508f) (enum-set-projection . x508e) (enum-set-member? . x508d) (enum-set-intersection . x508c) (enum-set-indexer . x508b) (enum-set-difference . x508a) (enum-set-constructor . x5089) (enum-set-complement . x5088) (enum-set->list . x5087) (who-condition? . x4af0) (warning? . x4a68) (violation? . x4aa7) (undefined-violation? . x4b67) (syntax-violation? . x4b4e) (syntax-violation-subform . x4b52) (syntax-violation-form . x4b50) (syntax-violation . x2fe2) (simple-conditions . x5086) (serious-condition? . x4a7d) (non-continuable-violation? . x4b07) (message-condition? . x4a51) (make-who-condition . x4aec) (make-warning . x4a66) (make-violation . x4aa5) (make-undefined-violation . x4b65) (make-syntax-violation . x4b48) (make-serious-condition . x4a7b) (make-non-continuable-violation . x4b05) (make-message-condition . x4a4d) (make-lexical-violation . x4b2f) (make-irritants-condition . x4ad1) (make-implementation-restriction-violation . x4b1a) (make-error . x4a90) (make-assertion-violation . x4aba) (lexical-violation? . x4b31) (irritants-condition? . x4ad5) (implementation-restriction-violation? . x4b1c) (error? . x4a92) (condition-who . x4af2) (condition-predicate . x5085) (condition-message . x4a53) (condition-irritants . x4ad7) (condition-accessor . x5084) (condition . x5083) (assertion-violation? . x4abc) (condition? . x5082) (utf32->string . x5081) (utf16->string . x5080) (utf8->string . x507f) (uint-list->bytevector . x507e) (u8-list->bytevector . x507d) (string->utf8 . x507c) (string->utf32 . x507b) (string->utf16 . x507a) (sint-list->bytevector . x5079) (native-endianness . x5078) (bytevector? . x5077) (bytevector=? . x5076) (bytevector-uint-set! . x5075) (bytevector-uint-ref . x5074) (bytevector-u8-set! . x5073) (bytevector-u8-ref . x5072) (bytevector-u64-set! . x5071) (bytevector-u64-ref . x5070) (bytevector-u64-native-set! . x506f) (bytevector-u64-native-ref . x506e) (bytevector-u32-set! . x506d) (bytevector-u32-ref . x506c) (bytevector-u32-native-set! . x506b) (bytevector-u32-native-ref . x506a) (bytevector-u16-set! . x5069) (bytevector-u16-ref . x5068) (bytevector-u16-native-set! . x5067) (bytevector-u16-native-ref . x5066) (bytevector-sint-set! . x5065) (bytevector-sint-ref . x5064) (bytevector-s8-set! . x5063) (bytevector-s8-ref . x5062) (bytevector-s64-set! . x5061) (bytevector-s64-ref . x5060) (bytevector-s64-native-set! . x505f) (bytevector-s64-native-ref . x505e) (bytevector-s32-set! . x505d) (bytevector-s32-ref . x505c) (bytevector-s32-native-set! . x505b) (bytevector-s32-native-ref . x505a) (bytevector-s16-set! . x5059) (bytevector-s16-ref . x5058) (bytevector-s16-native-set! . x5057) (bytevector-s16-native-ref . x5056) (bytevector-length . x5055) (bytevector-ieee-single-ref . x5054) (bytevector-ieee-single-set! . x5053) (bytevector-ieee-single-native-set! . x5052) (bytevector-ieee-single-native-ref . x5051) (bytevector-ieee-double-set! . x5050) (bytevector-ieee-double-ref . x504f) (bytevector-ieee-double-native-set! . x504e) (bytevector-ieee-double-native-ref . x504d) (bytevector-fill! . x504c) (bytevector-copy! . x504b) (bytevector-copy . x504a) (bytevector->uint-list . x5049) (bytevector->u8-list . x5048) (bytevector->sint-list . x5047) (no-nans-violation? . x4ca5) (no-infinities-violation? . x4c90) (make-no-nans-violation . x4ca3) (make-no-infinities-violation . x4c8e) (real->flonum . x5046) (flzero? . x5045) (fltruncate . x5044) (fltan . x5043) (flsqrt . x5042) (flsin . x5041) (flround . x5040) (flpositive? . x503f) (flonum? . x503e) (flodd? . x503d) (flnumerator . x503c) (flnegative? . x503b) (flnan? . x503a) (flmod0 . x5039) (flmod . x5038) (flmin . x5037) (flmax . x5036) (fllog . x5035) (flinteger? . x5034) (flinfinite? . x5033) (flfloor . x5032) (flfinite? . x5031) (flexpt . x5030) (flexp . x502f) (fleven? . x502e) (fldiv0-and-mod0 . x502d) (fldiv0 . x502c) (fldiv-and-mod . x502b) (fldiv . x502a) (fldenominator . x5029) (flcos . x5028) (flceiling . x5027) (flatan . x5026) (flasin . x5025) (flacos . x5024) (flabs . x5023) (fl>? . x5022) (fl>=? . x5021) (fl=? . x5020) (fl<? . x501f) (fl<=? . x501e) (fl/ . x501d) (fl- . x501c) (fl+ . x501b) (fl* . x501a) (fixnum->flonum . x5019) (fxzero? . x5018) (fxxor . x5017) (fxrotate-bit-field . x5016) (fxreverse-bit-field . x5015) (fxpositive? . x5014) (fxodd? . x5013) (fxnot . x5012) (fxnegative? . x5011) (fxmod0 . x5010) (fxmod . x500f) (fxmin . x500e) (fxmax . x500d) (fxlength . x500c) (fxior . x500b) (fxif . x500a) (fxfirst-bit-set . x5009) (fxeven? . x5008) (fxdiv0-and-mod0 . x5007) (fxdiv0 . x5006) (fxdiv-and-mod . x5005) (fxdiv . x5004) (fxcopy-bit-field . x5003) (fxcopy-bit . x5002) (fxbit-set? . x5001) (fxbit-field . x5000) (fxbit-count . x4fff) (fxarithmetic-shift-right . x4ffe) (fxarithmetic-shift-left . x4ffd) (fxarithmetic-shift . x4ffc) (fxand . x4ffb) (fx>? . x4ffa) (fx>=? . x4ff9) (fx=? . x4ff8) (fx<? . x4ff7) (fx<=? . x4ff6) (fx-/carry . x4ff5) (fx- . x4ff4) (fx+/carry . x4ff3) (fx+ . x4ff2) (fx*/carry . x4ff1) (fx* . x4ff0) (greatest-fixnum . x4fef) (least-fixnum . x4fee) (fixnum-width . x4fed) (fixnum? . x4fec) (bitwise-rotate-bit-field . x4feb) (bitwise-reverse-bit-field . x4fea) (bitwise-length . x4fe9) (bitwise-if . x4fe8) (bitwise-first-bit-set . x4fe7) (bitwise-copy-bit-field . x4fe6) (bitwise-copy-bit . x4fe5) (bitwise-bit-set? . x4fe4) (bitwise-bit-field . x4fe3) (bitwise-bit-count . x4fe2) (bitwise-xor . x4fe1) (bitwise-ior . x4fe0) (bitwise-and . x4fdf) (bitwise-not . x4fde) (bitwise-arithmetic-shift-right . x4fdd) (bitwise-arithmetic-shift-left . x4fdc) (bitwise-arithmetic-shift . x4fdb) (zero? . x4fda) (vector? . x4fd9) (vector-set! . x4fd8) (vector-ref . x4fd7) (vector-map . x4fd6) (vector-length . x4fd5) (vector-for-each . x4fd4) (vector-fill! . x4fd3) (vector->list . x4fd2) (vector . x4fd1) (values . x4fd0) (truncate . x4fcf) (tan . x4fce) (symbol? . x4fcd) (symbol=? . x4fcc) (symbol->string . x4fcb) (substring . x4fca) (string? . x4fc9) (string>? . x4fc8) (string>=? . x4fc7) (string=? . x4fc6) (string<? . x4fc5) (string<=? . x4fc4) (string-ref . x4fc3) (string-length . x4fc2) (string-for-each . x4fc1) (string-copy . x4fc0) (string-append . x4fbf) (string->symbol . x4fbe) (string->number . x4fbd) (string->list . x4fbc) (string . x4fbb) (sqrt . x4fba) (sin . x4fb9) (round . x4fb8) (reverse . x4fb7) (real? . x4fb6) (real-valued? . x4fb5) (real-part . x4fb4) (rationalize . x4fb3) (rational? . x4fb2) (rational-valued? . x4fb1) (procedure? . x4fb0) (positive? . x4faf) (pair? . x4fae) (odd? . x4fad) (numerator . x4fac) (number? . x4fab) (number->string . x4faa) (null? . x4fa9) (not . x4fa8) (negative? . x4fa7) (nan? . x4fa6) (min . x4fa5) (max . x4fa4) (map . x4fa3) (make-vector . x4fa2) (make-string . x4fa1) (make-rectangular . x4fa0) (make-polar . x4f9f) (magnitude . x4f9e) (log . x4f9d) (list? . x4f9c) (list-tail . x4f9b) (list-ref . x4f9a) (list->vector . x4f99) (list->string . x4f98) (list . x4f97) (length . x4f96) (lcm . x4f95) (integer? . x4f94) (integer-valued? . x4f93) (integer->char . x4f92) (infinite? . x4f91) (inexact? . x4f90) (inexact . x4f8f) (imag-part . x4f8e) (gcd . x4f8d) (for-each . x4f8c) (floor . x4f8b) (finite? . x4f8a) (expt . x4f89) (exp . x4f88) (exact? . x4f87) (exact-integer-sqrt . x4f86) (exact . x4f85) (even? . x4f84) (error . x4f83) (eqv? . x4f82) (equal? . x4f81) (eq? . x4f80) (dynamic-wind . x4f7f) (div0-and-mod0 . x4f7e) (mod0 . x4f7d) (div0 . x4f7c) (div-and-mod . x4f7b) (mod . x4f7a) (div . x4f79) (denominator . x4f78) (cos . x4f77) (cons . x4f76) (complex? . x4f75) (char? . x4f74) (char>? . x4f73) (char>=? . x4f72) (char=? . x4f71) (char<? . x4f70) (char<=? . x4f6f) (char->integer . x4f6e) (ceiling . x4f6d) (call-with-values . x4f6c) (call/cc . x4f6b) (call-with-current-continuation . x4f6a) (cddddr . x4f69) (cdddar . x4f68) (cddadr . x4f67) (cddaar . x4f66) (cdaddr . x4f65) (cdadar . x4f64) (cdaadr . x4f63) (cdaaar . x4f62) (cadddr . x4f61) (caddar . x4f60) (cadadr . x4f5f) (cadaar . x4f5e) (caaddr . x4f5d) (caadar . x4f5c) (caaadr . x4f5b) (caaaar . x4f5a) (cdddr . x4f59) (cddar . x4f58) (cdadr . x4f57) (cdaar . x4f56) (caddr . x4f55) (cadar . x4f54) (caadr . x4f53) (caaar . x4f52) (cddr . x4f51) (cdar . x4f50) (cadr . x4f4f) (caar . x4f4e) (cdr . x4f4d) (car . x4f4c) (boolean? . x4f4b) (boolean=? . x4f4a) (atan . x4f49) (assertion-violation . x4f48) (asin . x4f47) (apply . x4f46) (append . x4f45) (angle . x4f44) (acos . x4f43) (abs . x4f42) (/ . x4f41) (* . x4f40) (- . x4f3f) (+ . x4f3e) (>= . x4f3d) (> . x4f3c) (= . x4f3b) (<= . x4f3a) (< . x4f39) (&no-nans . x4f37) (&no-infinities . x4f36) (&i/o-encoding . x4f35) (&i/o-decoding . x4f34) (&i/o-port . x4f33) (&i/o-file-does-not-exist . x4f32) (&i/o-file-already-exists . x4f31) (&i/o-file-is-read-only . x4f30) (&i/o-file-protection . x4f2f) (&i/o-filename . x4f2e) (&i/o-invalid-position . x4f2d) (&i/o-write . x4f2c) (&i/o-read . x4f2b) (&i/o . x4f2a) (&undefined . x4f29) (&syntax . x4f28) (&lexical . x4f27) (&implementation-restriction . x4f26) (&non-continuable . x4f25) (&who . x4f24) (&irritants . x4f23) (&assertion . x4f22) (&violation . x4f21) (&error . x4f20) (&serious . x4f1f) (&warning . x4f1e) (&message . x4f1d) (&condition . x4f1c) (define-condition-type . x4f1b) (define-enumeration . x4f1a) (define-record-type . x4f19) (parent-rtd . x4f18) (nongenerative . x4f17) (opaque . x4f16) (sealed . x4f15) (protocol . x4f14) (parent . x4f13) (immutable . x4f12) (mutable . x4f11) (fields . x4f10) (error-handling-mode . x4f0f) (file-options . x4f0e) (buffer-mode . x4f0d) (eol-style . x4f0c) (guard . x4f0b) (unsyntax-splicing . x4f08) (unsyntax . x4f07) (unquote-splicing . x4f06) (unquote . x4f05) (_ . x4f04) (else . x4f03) (=> . x4f02) (... . x4f01) (assert . x4f00) (endianness . x4eff) (do . x4efc) (cond . x4efb) (let* . x4efa) (let . x4ef9) (let*-values . x4ef8) (let-values . x4ef7) (identifier-syntax . x4ef6) (with-syntax . x4ef5) (quasisyntax . x4ef4) (quasiquote . x4ef3) (syntax-rules . x4ef2) (record-constructor-descriptor . x4eef) (record-type-descriptor . x4eee) (case . x4eed) (unless . x4eeb) (when . x4eea) (or . x4ee9) (and . x4ee8) (if . x4ee7) (letrec* . x4ee6) (letrec . x4ee5) (case-lambda . x4ee3) (lambda . x4ee2) (syntax . x4ee1) (syntax-case . x4ee0) (quote . x4edf) (letrec-syntax . x4edd) (let-syntax . x4edc) (set! . x4edb) (begin . x4ed9) (define-syntax . x4ed7) (define . x4ed6)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51ef '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . x2fbe) (quotient . x50bc) (null-environment . x2fbc) (remainder . x50bb) (modulo . x50ba) (inexact->exact . x50b9) (force . x50b8) (exact->inexact . x50b7) (make-promise . x50b6) (delay . x4efe)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f0 '(rnrs control) '(6) '() '() '() '((do . x4efc) (unless . x4eeb) (when . x4eea) (case-lambda . x4ee3)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f1 '(rnrs eval) '(6) '() '() '() '((eval . x2fc2) (environment . x2fba)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f2 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . x50b2) (set-car! . x50b1)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f3 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . x50b4) (string-set! . x50b3)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f4 '(rnrs programs) '(6) '() '() '() '((exit . x50b5) (command-line . x4db0)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f5 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . x2d26) (identifier? . x2fe4) (generate-temporaries . x2fd0) (free-identifier=? . x2fd2) (syntax->datum . x2fe8) (datum->syntax . x2fe6) (bound-identifier=? . x2fd4) (syntax-violation . x2fe2) (unsyntax-splicing . x4f08) (unsyntax . x4f07) (_ . x4f04) (... . x4f01) (with-syntax . x4ef5) (quasisyntax . x4ef4) (syntax . x4ee1) (syntax-case . x4ee0)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f6 '(rnrs files) '(6) '() '() '() '((delete-file . x5125) (file-exists? . x5124) (make-i/o-write-error . x4ba4) (make-i/o-read-error . x4b8f) (make-i/o-port-error . x4c45) (make-i/o-invalid-position-error . x4bbb) (make-i/o-filename-error . x4bd6) (make-i/o-file-protection-error . x4bef) (make-i/o-file-is-read-only-error . x4c04) (make-i/o-file-does-not-exist-error . x4c2e) (make-i/o-file-already-exists-error . x4c19) (make-i/o-error . x4b7a) (i/o-write-error? . x4ba6) (i/o-read-error? . x4b91) (i/o-port-error? . x4c49) (i/o-invalid-position-error? . x4bbf) (i/o-filename-error? . x4bda) (i/o-file-protection-error? . x4bf1) (i/o-file-is-read-only-error? . x4c06) (i/o-file-does-not-exist-error? . x4c30) (i/o-file-already-exists-error? . x4c1b) (i/o-error? . x4b7c) (i/o-error-position . x4bc1) (i/o-error-port . x4c4b) (i/o-error-filename . x4bdc) (&i/o-port . x4f33) (&i/o-file-does-not-exist . x4f32) (&i/o-file-already-exists . x4f31) (&i/o-file-is-read-only . x4f30) (&i/o-file-protection . x4f2f) (&i/o-filename . x4f2e) (&i/o-invalid-position . x4f2d) (&i/o-write . x4f2c) (&i/o-read . x4f2b) (&i/o . x4f2a)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f7 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . x5123) (vector-sort . x5122) (list-sort . x5121)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f8 '(rnrs base) '(6) '() '() '() '((zero? . x4fda) (vector? . x4fd9) (vector-set! . x4fd8) (vector-ref . x4fd7) (vector-map . x4fd6) (vector-length . x4fd5) (vector-for-each . x4fd4) (vector-fill! . x4fd3) (vector->list . x4fd2) (vector . x4fd1) (values . x4fd0) (truncate . x4fcf) (tan . x4fce) (symbol? . x4fcd) (symbol=? . x4fcc) (symbol->string . x4fcb) (substring . x4fca) (string? . x4fc9) (string>? . x4fc8) (string>=? . x4fc7) (string=? . x4fc6) (string<? . x4fc5) (string<=? . x4fc4) (string-ref . x4fc3) (string-length . x4fc2) (string-for-each . x4fc1) (string-copy . x4fc0) (string-append . x4fbf) (string->symbol . x4fbe) (string->number . x4fbd) (string->list . x4fbc) (string . x4fbb) (sqrt . x4fba) (sin . x4fb9) (round . x4fb8) (reverse . x4fb7) (real? . x4fb6) (real-valued? . x4fb5) (real-part . x4fb4) (rationalize . x4fb3) (rational? . x4fb2) (rational-valued? . x4fb1) (procedure? . x4fb0) (positive? . x4faf) (pair? . x4fae) (odd? . x4fad) (numerator . x4fac) (number? . x4fab) (number->string . x4faa) (null? . x4fa9) (not . x4fa8) (negative? . x4fa7) (nan? . x4fa6) (min . x4fa5) (max . x4fa4) (map . x4fa3) (make-vector . x4fa2) (make-string . x4fa1) (make-rectangular . x4fa0) (make-polar . x4f9f) (magnitude . x4f9e) (log . x4f9d) (list? . x4f9c) (list-tail . x4f9b) (list-ref . x4f9a) (list->vector . x4f99) (list->string . x4f98) (list . x4f97) (length . x4f96) (lcm . x4f95) (integer? . x4f94) (integer-valued? . x4f93) (integer->char . x4f92) (infinite? . x4f91) (inexact? . x4f90) (inexact . x4f8f) (imag-part . x4f8e) (gcd . x4f8d) (for-each . x4f8c) (floor . x4f8b) (finite? . x4f8a) (expt . x4f89) (exp . x4f88) (exact? . x4f87) (exact-integer-sqrt . x4f86) (exact . x4f85) (even? . x4f84) (error . x4f83) (eqv? . x4f82) (equal? . x4f81) (eq? . x4f80) (dynamic-wind . x4f7f) (div0-and-mod0 . x4f7e) (mod0 . x4f7d) (div0 . x4f7c) (div-and-mod . x4f7b) (mod . x4f7a) (div . x4f79) (denominator . x4f78) (cos . x4f77) (cons . x4f76) (complex? . x4f75) (char? . x4f74) (char>? . x4f73) (char>=? . x4f72) (char=? . x4f71) (char<? . x4f70) (char<=? . x4f6f) (char->integer . x4f6e) (ceiling . x4f6d) (call-with-values . x4f6c) (call/cc . x4f6b) (call-with-current-continuation . x4f6a) (cddddr . x4f69) (cdddar . x4f68) (cddadr . x4f67) (cddaar . x4f66) (cdaddr . x4f65) (cdadar . x4f64) (cdaadr . x4f63) (cdaaar . x4f62) (cadddr . x4f61) (caddar . x4f60) (cadadr . x4f5f) (cadaar . x4f5e) (caaddr . x4f5d) (caadar . x4f5c) (caaadr . x4f5b) (caaaar . x4f5a) (cdddr . x4f59) (cddar . x4f58) (cdadr . x4f57) (cdaar . x4f56) (caddr . x4f55) (cadar . x4f54) (caadr . x4f53) (caaar . x4f52) (cddr . x4f51) (cdar . x4f50) (cadr . x4f4f) (caar . x4f4e) (cdr . x4f4d) (car . x4f4c) (boolean? . x4f4b) (boolean=? . x4f4a) (atan . x4f49) (assertion-violation . x4f48) (asin . x4f47) (apply . x4f46) (append . x4f45) (angle . x4f44) (acos . x4f43) (abs . x4f42) (/ . x4f41) (* . x4f40) (- . x4f3f) (+ . x4f3e) (>= . x4f3d) (> . x4f3c) (= . x4f3b) (<= . x4f3a) (< . x4f39) (unquote-splicing . x4f06) (unquote . x4f05) (_ . x4f04) (else . x4f03) (=> . x4f02) (... . x4f01) (assert . x4f00) (cond . x4efb) (let* . x4efa) (let . x4ef9) (let*-values . x4ef8) (let-values . x4ef7) (identifier-syntax . x4ef6) (quasiquote . x4ef3) (syntax-rules . x4ef2) (case . x4eed) (or . x4ee9) (and . x4ee8) (if . x4ee7) (letrec* . x4ee6) (letrec . x4ee5) (lambda . x4ee2) (quote . x4edf) (letrec-syntax . x4edd) (let-syntax . x4edc) (set! . x4edb) (begin . x4ed9) (define-syntax . x4ed7) (define . x4ed6)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51f9 '(rnrs lists) '(6) '() '() '() '((remove . x50b0) (remv . x50af) (remp . x50ae) (remq . x50ad) (partition . x50ac) (memv . x50ab) (memq . x50aa) (memp . x50a9) (member . x50a8) (exists . x50a7) (for-all . x50a6) (fold-right . x50a5) (fold-left . x50a4) (find . x50a3) (filter . x50a2) (cons* . x50a1) (assv . x50a0) (assq . x509f) (assp . x509e) (assoc . x509d)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51fa '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . x510b) (call-with-input-file . x510a) (write-char . x5109) (write . x5108) (with-output-to-file . x5107) (with-input-from-file . x5106) (read-char . x5105) (read . x5104) (peek-char . x5103) (open-output-file . x5102) (open-input-file . x5101) (newline . x5100) (display . x50ff) (close-output-port . x50fe) (close-input-port . x50fd) (eof-object? . x50fc) (eof-object . x50fb) (current-error-port . x50fa) (current-output-port . x50f9) (current-input-port . x50f8) (output-port? . x50f7) (input-port? . x50f6) (make-i/o-write-error . x4ba4) (make-i/o-read-error . x4b8f) (make-i/o-port-error . x4c45) (make-i/o-invalid-position-error . x4bbb) (make-i/o-filename-error . x4bd6) (make-i/o-file-protection-error . x4bef) (make-i/o-file-is-read-only-error . x4c04) (make-i/o-file-does-not-exist-error . x4c2e) (make-i/o-file-already-exists-error . x4c19) (make-i/o-error . x4b7a) (i/o-write-error? . x4ba6) (i/o-read-error? . x4b91) (i/o-port-error? . x4c49) (i/o-invalid-position-error? . x4bbf) (i/o-filename-error? . x4bda) (i/o-file-protection-error? . x4bf1) (i/o-file-is-read-only-error? . x4c06) (i/o-file-does-not-exist-error? . x4c30) (i/o-file-already-exists-error? . x4c1b) (i/o-error? . x4b7c) (i/o-error-position . x4bc1) (i/o-error-port . x4c4b) (i/o-error-filename . x4bdc) (&i/o-port . x4f33) (&i/o-file-does-not-exist . x4f32) (&i/o-file-already-exists . x4f31) (&i/o-file-is-read-only . x4f30) (&i/o-file-protection . x4f2f) (&i/o-filename . x4f2e) (&i/o-invalid-position . x4f2d) (&i/o-write . x4f2c) (&i/o-read . x4f2b) (&i/o . x4f2a)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51fb '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . x50cc) (utf32->string . x5081) (utf16->string . x5080) (utf8->string . x507f) (uint-list->bytevector . x507e) (u8-list->bytevector . x507d) (string->utf8 . x507c) (string->utf32 . x507b) (string->utf16 . x507a) (sint-list->bytevector . x5079) (native-endianness . x5078) (bytevector? . x5077) (bytevector=? . x5076) (bytevector-uint-set! . x5075) (bytevector-uint-ref . x5074) (bytevector-u8-set! . x5073) (bytevector-u8-ref . x5072) (bytevector-u64-set! . x5071) (bytevector-u64-ref . x5070) (bytevector-u64-native-set! . x506f) (bytevector-u64-native-ref . x506e) (bytevector-u32-set! . x506d) (bytevector-u32-ref . x506c) (bytevector-u32-native-set! . x506b) (bytevector-u32-native-ref . x506a) (bytevector-u16-set! . x5069) (bytevector-u16-ref . x5068) (bytevector-u16-native-set! . x5067) (bytevector-u16-native-ref . x5066) (bytevector-sint-set! . x5065) (bytevector-sint-ref . x5064) (bytevector-s8-set! . x5063) (bytevector-s8-ref . x5062) (bytevector-s64-set! . x5061) (bytevector-s64-ref . x5060) (bytevector-s64-native-set! . x505f) (bytevector-s64-native-ref . x505e) (bytevector-s32-set! . x505d) (bytevector-s32-ref . x505c) (bytevector-s32-native-set! . x505b) (bytevector-s32-native-ref . x505a) (bytevector-s16-set! . x5059) (bytevector-s16-ref . x5058) (bytevector-s16-native-set! . x5057) (bytevector-s16-native-ref . x5056) (bytevector-length . x5055) (bytevector-ieee-single-ref . x5054) (bytevector-ieee-single-set! . x5053) (bytevector-ieee-single-native-set! . x5052) (bytevector-ieee-single-native-ref . x5051) (bytevector-ieee-double-set! . x5050) (bytevector-ieee-double-ref . x504f) (bytevector-ieee-double-native-set! . x504e) (bytevector-ieee-double-native-ref . x504d) (bytevector-fill! . x504c) (bytevector-copy! . x504b) (bytevector-copy . x504a) (bytevector->uint-list . x5049) (bytevector->u8-list . x5048) (bytevector->sint-list . x5047) (endianness . x4eff)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51fc '(rnrs unicode) '(6) '() '() '() '((string-upcase . x5153) (string-titlecase . x5152) (string-normalize-nfkd . x5151) (string-normalize-nfkc . x5150) (string-normalize-nfd . x514f) (string-normalize-nfc . x514e) (string-foldcase . x514d) (string-downcase . x514c) (string-ci>? . x514b) (string-ci>=? . x514a) (string-ci=? . x5149) (string-ci<? . x5148) (string-ci<=? . x5147) (char-whitespace? . x5146) (char-upper-case? . x5145) (char-title-case? . x5144) (char-numeric? . x5143) (char-lower-case? . x5142) (char-general-category . x5141) (char-upcase . x5140) (char-titlecase . x513f) (char-foldcase . x513e) (char-downcase . x513d) (char-ci>? . x513c) (char-ci>=? . x513b) (char-ci=? . x513a) (char-ci<? . x5139) (char-ci<=? . x5138) (char-alphabetic? . x5137)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51fd '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . x5096) (raise-continuable . x5095) (raise . x5094) (guard . x4f0b) (else . x4f03) (=> . x4f02)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51fe '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . x4feb) (bitwise-reverse-bit-field . x4fea) (bitwise-length . x4fe9) (bitwise-if . x4fe8) (bitwise-first-bit-set . x4fe7) (bitwise-copy-bit-field . x4fe6) (bitwise-copy-bit . x4fe5) (bitwise-bit-set? . x4fe4) (bitwise-bit-field . x4fe3) (bitwise-bit-count . x4fe2) (bitwise-xor . x4fe1) (bitwise-ior . x4fe0) (bitwise-and . x4fdf) (bitwise-not . x4fde) (bitwise-arithmetic-shift-right . x4fdd) (bitwise-arithmetic-shift-left . x4fdc) (bitwise-arithmetic-shift . x4fdb)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x51ff '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . x5018) (fxxor . x5017) (fxrotate-bit-field . x5016) (fxreverse-bit-field . x5015) (fxpositive? . x5014) (fxodd? . x5013) (fxnot . x5012) (fxnegative? . x5011) (fxmod0 . x5010) (fxmod . x500f) (fxmin . x500e) (fxmax . x500d) (fxlength . x500c) (fxior . x500b) (fxif . x500a) (fxfirst-bit-set . x5009) (fxeven? . x5008) (fxdiv0-and-mod0 . x5007) (fxdiv0 . x5006) (fxdiv-and-mod . x5005) (fxdiv . x5004) (fxcopy-bit-field . x5003) (fxcopy-bit . x5002) (fxbit-set? . x5001) (fxbit-field . x5000) (fxbit-count . x4fff) (fxarithmetic-shift-right . x4ffe) (fxarithmetic-shift-left . x4ffd) (fxarithmetic-shift . x4ffc) (fxand . x4ffb) (fx>? . x4ffa) (fx>=? . x4ff9) (fx=? . x4ff8) (fx<? . x4ff7) (fx<=? . x4ff6) (fx-/carry . x4ff5) (fx- . x4ff4) (fx+/carry . x4ff3) (fx+ . x4ff2) (fx*/carry . x4ff1) (fx* . x4ff0) (greatest-fixnum . x4fef) (least-fixnum . x4fee) (fixnum-width . x4fed) (fixnum? . x4fec)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5200 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . x4ca5) (no-infinities-violation? . x4c90) (make-no-nans-violation . x4ca3) (make-no-infinities-violation . x4c8e) (real->flonum . x5046) (flzero? . x5045) (fltruncate . x5044) (fltan . x5043) (flsqrt . x5042) (flsin . x5041) (flround . x5040) (flpositive? . x503f) (flonum? . x503e) (flodd? . x503d) (flnumerator . x503c) (flnegative? . x503b) (flnan? . x503a) (flmod0 . x5039) (flmod . x5038) (flmin . x5037) (flmax . x5036) (fllog . x5035) (flinteger? . x5034) (flinfinite? . x5033) (flfloor . x5032) (flfinite? . x5031) (flexpt . x5030) (flexp . x502f) (fleven? . x502e) (fldiv0-and-mod0 . x502d) (fldiv0 . x502c) (fldiv-and-mod . x502b) (fldiv . x502a) (fldenominator . x5029) (flcos . x5028) (flceiling . x5027) (flatan . x5026) (flasin . x5025) (flacos . x5024) (flabs . x5023) (fl>? . x5022) (fl>=? . x5021) (fl=? . x5020) (fl<? . x501f) (fl<=? . x501e) (fl/ . x501d) (fl- . x501c) (fl+ . x501b) (fl* . x501a) (fixnum->flonum . x5019) (&no-nans . x4f37) (&no-infinities . x4f36)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5201 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . x5120) (string-ci-hash . x511f) (string-hash . x511e) (equal-hash . x511d) (hashtable-equivalence-function . x511c) (make-hashtable . x511b) (hashtable-hash-function . x511a) (make-eqv-hashtable . x5119) (make-eq-hashtable . x5118) (hashtable? . x5117) (hashtable-update! . x5116) (hashtable-size . x5115) (hashtable-set! . x5114) (hashtable-ref . x5113) (hashtable-mutable? . x5112) (hashtable-keys . x5111) (hashtable-entries . x5110) (hashtable-delete! . x510f) (hashtable-copy . x510e) (hashtable-contains? . x510d) (hashtable-clear! . x510c)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5202 '(rnrs io ports) '(6) '() '() '() '((eof-object? . x50fc) (eof-object . x50fb) (current-error-port . x50fa) (current-output-port . x50f9) (current-input-port . x50f8) (output-port? . x50f7) (input-port? . x50f6) (utf-8-codec . x50f5) (utf-16-codec . x50f4) (transcoder-error-handling-mode . x50f3) (transcoder-eol-style . x50f2) (transcoder-codec . x50f1) (transcoded-port . x50f0) (textual-port? . x50ef) (string->bytevector . x50ee) (standard-output-port . x50ed) (standard-input-port . x50ec) (standard-error-port . x50eb) (set-port-position! . x50ea) (put-u8 . x50e9) (put-string . x50e8) (put-datum . x50e7) (put-char . x50e6) (put-bytevector . x50e5) (port? . x50e4) (port-transcoder . x50e3) (port-position . x50e2) (port-has-set-port-position!? . x50e1) (port-has-port-position? . x50e0) (port-eof? . x50df) (output-port-buffer-mode . x50de) (open-string-output-port . x50dd) (open-string-input-port . x50dc) (open-file-output-port . x50db) (open-file-input/output-port . x50da) (open-file-input-port . x50d9) (open-bytevector-output-port . x50d8) (open-bytevector-input-port . x50d7) (native-transcoder . x50d6) (native-eol-style . x50d5) (make-transcoder . x50d4) (latin-1-codec . x50d3) (make-i/o-write-error . x4ba4) (make-i/o-read-error . x4b8f) (make-i/o-port-error . x4c45) (make-i/o-invalid-position-error . x4bbb) (make-i/o-filename-error . x4bd6) (make-i/o-file-protection-error . x4bef) (make-i/o-file-is-read-only-error . x4c04) (make-i/o-file-does-not-exist-error . x4c2e) (make-i/o-file-already-exists-error . x4c19) (make-i/o-error . x4b7a) (make-i/o-encoding-error . x4c75) (make-i/o-decoding-error . x4c5e) (make-custom-textual-output-port . x50d2) (make-custom-textual-input/output-port . x50d1) (make-custom-textual-input-port . x50d0) (make-custom-binary-output-port . x50cf) (make-custom-binary-input/output-port . x50ce) (make-custom-binary-input-port . x50cd) (lookahead-u8 . x50cb) (lookahead-char . x50ca) (i/o-write-error? . x4ba6) (i/o-read-error? . x4b91) (i/o-port-error? . x4c49) (i/o-invalid-position-error? . x4bbf) (i/o-filename-error? . x4bda) (i/o-file-protection-error? . x4bf1) (i/o-file-is-read-only-error? . x4c06) (i/o-file-does-not-exist-error? . x4c30) (i/o-file-already-exists-error? . x4c1b) (i/o-error? . x4b7c) (i/o-error-position . x4bc1) (i/o-error-port . x4c4b) (i/o-error-filename . x4bdc) (i/o-encoding-error? . x4c79) (i/o-encoding-error-char . x4c7b) (i/o-decoding-error? . x4c60) (get-u8 . x50c9) (get-string-n! . x50c8) (get-string-n . x50c7) (get-string-all . x50c6) (get-line . x50c5) (get-datum . x50c4) (get-char . x50c3) (get-bytevector-some . x50c2) (get-bytevector-n! . x50c1) (get-bytevector-n . x50c0) (get-bytevector-all . x50bf) (flush-output-port . x50be) (close-port . x50bd) (call-with-string-output-port . x509c) (call-with-port . x509b) (call-with-bytevector-output-port . x509a) (bytevector->string . x5099) (buffer-mode? . x5098) (binary-port? . x5097) (&i/o-encoding . x4f35) (&i/o-decoding . x4f34) (&i/o-port . x4f33) (&i/o-file-does-not-exist . x4f32) (&i/o-file-already-exists . x4f31) (&i/o-file-is-read-only . x4f30) (&i/o-file-protection . x4f2f) (&i/o-filename . x4f2e) (&i/o-invalid-position . x4f2d) (&i/o-write . x4f2c) (&i/o-read . x4f2b) (&i/o . x4f2a) (error-handling-mode . x4f0f) (file-options . x4f0e) (buffer-mode . x4f0d) (eol-style . x4f0c)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5203 '(rnrs enums) '(6) '() '() '() '((make-enumeration . x5093) (enum-set=? . x5092) (enum-set-universe . x5091) (enum-set-union . x5090) (enum-set-subset? . x508f) (enum-set-projection . x508e) (enum-set-member? . x508d) (enum-set-intersection . x508c) (enum-set-indexer . x508b) (enum-set-difference . x508a) (enum-set-constructor . x5089) (enum-set-complement . x5088) (enum-set->list . x5087) (define-enumeration . x4f1a)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5204 '(rnrs conditions) '(6) '() '() '() '((who-condition? . x4af0) (warning? . x4a68) (violation? . x4aa7) (undefined-violation? . x4b67) (syntax-violation? . x4b4e) (syntax-violation-subform . x4b52) (syntax-violation-form . x4b50) (syntax-violation . x2fe2) (simple-conditions . x5086) (serious-condition? . x4a7d) (non-continuable-violation? . x4b07) (message-condition? . x4a51) (make-who-condition . x4aec) (make-warning . x4a66) (make-violation . x4aa5) (make-undefined-violation . x4b65) (make-syntax-violation . x4b48) (make-serious-condition . x4a7b) (make-non-continuable-violation . x4b05) (make-message-condition . x4a4d) (make-lexical-violation . x4b2f) (make-irritants-condition . x4ad1) (make-implementation-restriction-violation . x4b1a) (make-error . x4a90) (make-assertion-violation . x4aba) (lexical-violation? . x4b31) (irritants-condition? . x4ad5) (implementation-restriction-violation? . x4b1c) (error? . x4a92) (condition-who . x4af2) (condition-predicate . x5085) (condition-message . x4a53) (condition-irritants . x4ad7) (condition-accessor . x5084) (condition . x5083) (assertion-violation? . x4abc) (condition? . x5082) (&undefined . x4f29) (&syntax . x4f28) (&lexical . x4f27) (&implementation-restriction . x4f26) (&non-continuable . x4f25) (&who . x4f24) (&irritants . x4f23) (&assertion . x4f22) (&violation . x4f21) (&error . x4f20) (&serious . x4f1f) (&warning . x4f1e) (&message . x4f1d) (&condition . x4f1c) (define-condition-type . x4f1b)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5205 '(rnrs records inspection) '(6) '() '() '() '((record? . x512f) (record-type-uid . x512e) (record-type-sealed? . x512d) (record-type-parent . x512c) (record-type-opaque? . x512b) (record-type-name . x512a) (record-type-generative? . x5129) (record-type-field-names . x5128) (record-rtd . x5127) (record-field-mutable? . x5126)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5206 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . x5136) (record-predicate . x5135) (record-mutator . x5134) (record-constructor . x5133) (record-accessor . x5132) (make-record-type-descriptor . x5131) (make-record-constructor-descriptor . x5130)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5207 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . x4f19) (parent-rtd . x4f18) (nongenerative . x4f17) (opaque . x4f16) (sealed . x4f15) (protocol . x4f14) (parent . x4f13) (immutable . x4f12) (mutable . x4f11) (fields . x4f10) (record-constructor-descriptor . x4eef) (record-type-descriptor . x4eee)) '() values values '#f '#f '#t '#f) (x2b11@x29b0@install-library 'x5208 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . x4ca9) (&no-nans-rtd . x4ca7) (&no-infinities-rcd . x4c94) (&no-infinities-rtd . x4c92) (&i/o-encoding-rcd . x4c7f) (&i/o-encoding-rtd . x4c7d) (&i/o-decoding-rcd . x4c64) (&i/o-decoding-rtd . x4c62) (&i/o-port-rcd . x4c4f) (&i/o-port-rtd . x4c4d) (&i/o-file-does-not-exist-rcd . x4c34) (&i/o-file-does-not-exist-rtd . x4c32) (&i/o-file-already-exists-rcd . x4c1f) (&i/o-file-already-exists-rtd . x4c1d) (&i/o-file-is-read-only-rcd . x4c0a) (&i/o-file-is-read-only-rtd . x4c08) (&i/o-file-protection-rcd . x4bf5) (&i/o-file-protection-rtd . x4bf3) (&i/o-filename-rcd . x4be0) (&i/o-filename-rtd . x4bde) (&i/o-invalid-position-rcd . x4bc5) (&i/o-invalid-position-rtd . x4bc3) (&i/o-write-rcd . x4baa) (&i/o-write-rtd . x4ba8) (&i/o-read-rcd . x4b95) (&i/o-read-rtd . x4b93) (&i/o-rcd . x4b80) (&i/o-rtd . x4b7e) (&undefined-rcd . x4b6b) (&undefined-rtd . x4b69) (&syntax-rcd . x4b56) (&syntax-rtd . x4b54) (&lexical-rcd . x4b35) (&lexical-rtd . x4b33) (&implementation-restriction-rcd . x4b20) (&implementation-restriction-rtd . x4b1e) (&non-continuable-rcd . x4b0b) (&non-continuable-rtd . x4b09) (&who-rcd . x4af6) (&who-rtd . x4af4) (&irritants-rcd . x4adb) (&irritants-rtd . x4ad9) (&assertion-rcd . x4ac0) (&assertion-rtd . x4abe) (&violation-rcd . x4aab) (&violation-rtd . x4aa9) (&error-rcd . x4a96) (&error-rtd . x4a94) (&serious-rcd . x4a81) (&serious-rtd . x4a7f) (&warning-rcd . x4a6c) (&warning-rtd . x4a6a) (&message-rcd . x4a57) (&message-rtd . x4a55) (&condition-rcd . x49f8) (&condition-rtd . x49f6) (syntax-error . x2fde) (syntax-dispatch . x2ef9) (pretty-print . x51e8) (eval-core . x51e7) (set-symbol-value! . x51e6) (symbol-value . x51e5) (gensym . x51e4) (void . x51e3) (load . x4db6) (interaction-environment . x2fee) (char-ready? . x51e2) (regexp? . x51e1) (read-line . x51e0) (ungensym . x51df) (alist->eq-hash-table . x51de) (assoc-ref . x51dd) (print . x51dc) (format . x51db) (host-os . x51da) (library-path . x298f) (standard-library-path . x51d9) (file-newer? . x51d8) (stat-mtime . x51d7) (write-to-file . x51d6) (file->list . x51d5) (file->string . x51d4) (digit->integer . x51d3) (call-with-string-input-port . x51d2) (call-with-string-io . x51d1) (string-split . x51d0) (bytevector-for-each . x51cf) (string->regexp . x51ce) (rxmatch . x51cd) (regexp-replace-all . x51cc) (hashtable-for-each . x51cb) (call-process . x51ca) (local-tz-offset . x51c9) (microseconds . x51c8) (directory-list . x51c7) (set-current-directory! . x51c6) (expand-path . x51c5) (current-directory . x51c4) (%spawn . x51c3) (%waitpid . x51c2) (pointer-ref-c-int64 . x51c1) (pointer-ref-c-int32 . x51c0) (pointer-ref-c-int16 . x51bf) (pointer-ref-c-int8 . x51be) (pointer-ref-c-uint64 . x51bd) (pointer-ref-c-uint32 . x51bc) (pointer-ref-c-uint16 . x51bb) (pointer-ref-c-uint8 . x51ba) (pointer-set-c-int64! . x51b9) (pointer-set-c-int32! . x51b8) (pointer-set-c-int16! . x51b7) (pointer-set-c-int8! . x51b6) (pointer-set-c-pointer! . x51b5) (pointer-set-c-double! . x51b4) (pointer-set-c-float! . x51b3) (pointer-set-c-long-long! . x51b2) (pointer-set-c-long! . x51b1) (pointer-set-c-int! . x51b0) (pointer-set-c-short! . x51af) (pointer-set-c-char! . x51ae) (pointer-ref-c-pointer . x51ad) (pointer-ref-c-double . x51ac) (pointer-ref-c-float . x51ab) (pointer-ref-c-unsigned-long-long . x51aa) (pointer-ref-c-signed-long-long . x51a9) (pointer-ref-c-unsigned-long . x51a8) (pointer-ref-c-signed-long . x51a7) (pointer-ref-c-unsigned-int . x51a6) (pointer-ref-c-signed-int . x51a5) (pointer-ref-c-unsigned-short . x51a4) (pointer-ref-c-signed-short . x51a3) (pointer-ref-c-unsigned-char . x51a2) (pointer-ref-c-signed-char . x51a1) (pointer->integer . x51a0) (integer->pointer . x519f) (pointer? . x519e) (%ffi-supported? . x519d) (%ffi-pointer->string . x519c) (%ffi-call->string-or-zero . x519b) (%ffi-call->double . x519a) (%ffi-call->void* . x5199) (%ffi-call->void . x5198) (%ffi-call->int . x5197) (%ffi-lookup . x5196) (%ffi-open . x5195) (%fork . x5194) (%pipe . x5193) (p . x5192) (open-output-string . x5191) (get-output-string . x5190) (file-stat-ctime . x518f) (file-stat-atime . x518e) (file-stat-mtime . x518d) (file-size-in-bytes . x518c) (file-writable? . x518b) (file-executable? . x518a) (file-readable? . x5189) (file-regular? . x5188) (file-symbolic-link? . x5187) (file-directory? . x5186) (create-symbolic-link . x5185) (rename-file . x5184) (delete-directory . x5183) (create-directory . x5182) (get-environment-variables . x5181) (get-environment-variable . x5180) (get-timeofday . x517f) (get-command-line . x517e) (sys-display . x517d) (whereis . x517c) (register . x517b) (vm-join! . x517a) (vm-set-value! . x5179) (vm? . x5178) (main-vm? . x5177) (vm-eval . x5176) (vm-self . x5175) (vm-start! . x5174) (make-vm . x5173) (mutex-try-lock! . x5172) (mutex-unlock! . x5171) (mutex-lock! . x5170) (mutex? . x516f) (make-mutex . x516e) (condition-variable-notify-all! . x516d) (condition-variable-notify! . x516c) (condition-variable-wait! . x516b) (make-condition-variable . x516a) (mosh-executable-path . x5169) (make-file-options . x5168) (source-info . x5167) (make-compiler-instruction . x5166) (make-instruction . x5165) (set-source-info! . x5164) (bignum? . x5163) (fast-equal? . x5162) (fasl-read . x5161) (fasl-write . x5160) (time-usage . x515f) (os-constant . x515e) (make-parameter . x27c2) (socket-port . x515d) (socket-shutdown . x515c) (socket-close . x515b) (socket-send . x515a) (socket-recv! . x5159) (socket-recv . x5158) (make-server-socket . x5157) (make-client-socket . x5156) (socket-accept . x5155) (socket? . x5154) (string-upcase . x5153) (string-titlecase . x5152) (string-normalize-nfkd . x5151) (string-normalize-nfkc . x5150) (string-normalize-nfd . x514f) (string-normalize-nfc . x514e) (string-foldcase . x514d) (string-downcase . x514c) (string-ci>? . x514b) (string-ci>=? . x514a) (string-ci=? . x5149) (string-ci<? . x5148) (string-ci<=? . x5147) (char-whitespace? . x5146) (char-upper-case? . x5145) (char-title-case? . x5144) (char-numeric? . x5143) (char-lower-case? . x5142) (char-general-category . x5141) (char-upcase . x5140) (char-titlecase . x513f) (char-foldcase . x513e) (char-downcase . x513d) (char-ci>? . x513c) (char-ci>=? . x513b) (char-ci=? . x513a) (char-ci<? . x5139) (char-ci<=? . x5138) (char-alphabetic? . x5137) (make-variable-transformer . x2d26) (identifier? . x2fe4) (generate-temporaries . x2fd0) (free-identifier=? . x2fd2) (syntax->datum . x2fe8) (datum->syntax . x2fe6) (bound-identifier=? . x2fd4) (record-type-descriptor? . x5136) (record-predicate . x5135) (record-mutator . x5134) (record-constructor . x5133) (record-accessor . x5132) (make-record-type-descriptor . x5131) (make-record-constructor-descriptor . x5130) (record? . x512f) (record-type-uid . x512e) (record-type-sealed? . x512d) (record-type-parent . x512c) (record-type-opaque? . x512b) (record-type-name . x512a) (record-type-generative? . x5129) (record-type-field-names . x5128) (record-rtd . x5127) (record-field-mutable? . x5126) (delete-file . x5125) (file-exists? . x5124) (vector-sort! . x5123) (vector-sort . x5122) (list-sort . x5121) (symbol-hash . x5120) (string-ci-hash . x511f) (string-hash . x511e) (equal-hash . x511d) (hashtable-equivalence-function . x511c) (make-hashtable . x511b) (hashtable-hash-function . x511a) (make-eqv-hashtable . x5119) (make-eq-hashtable . x5118) (hashtable? . x5117) (hashtable-update! . x5116) (hashtable-size . x5115) (hashtable-set! . x5114) (hashtable-ref . x5113) (hashtable-mutable? . x5112) (hashtable-keys . x5111) (hashtable-entries . x5110) (hashtable-delete! . x510f) (hashtable-copy . x510e) (hashtable-contains? . x510d) (hashtable-clear! . x510c) (call-with-output-file . x510b) (call-with-input-file . x510a) (write-char . x5109) (write . x5108) (with-output-to-file . x5107) (with-input-from-file . x5106) (read-char . x5105) (read . x5104) (peek-char . x5103) (open-output-file . x5102) (open-input-file . x5101) (newline . x5100) (display . x50ff) (close-output-port . x50fe) (close-input-port . x50fd) (eof-object? . x50fc) (eof-object . x50fb) (current-error-port . x50fa) (current-output-port . x50f9) (current-input-port . x50f8) (output-port? . x50f7) (input-port? . x50f6) (utf-8-codec . x50f5) (utf-16-codec . x50f4) (transcoder-error-handling-mode . x50f3) (transcoder-eol-style . x50f2) (transcoder-codec . x50f1) (transcoded-port . x50f0) (textual-port? . x50ef) (string->bytevector . x50ee) (standard-output-port . x50ed) (standard-input-port . x50ec) (standard-error-port . x50eb) (set-port-position! . x50ea) (put-u8 . x50e9) (put-string . x50e8) (put-datum . x50e7) (put-char . x50e6) (put-bytevector . x50e5) (port? . x50e4) (port-transcoder . x50e3) (port-position . x50e2) (port-has-set-port-position!? . x50e1) (port-has-port-position? . x50e0) (port-eof? . x50df) (output-port-buffer-mode . x50de) (open-string-output-port . x50dd) (open-string-input-port . x50dc) (open-file-output-port . x50db) (open-file-input/output-port . x50da) (open-file-input-port . x50d9) (open-bytevector-output-port . x50d8) (open-bytevector-input-port . x50d7) (native-transcoder . x50d6) (native-eol-style . x50d5) (make-transcoder . x50d4) (latin-1-codec . x50d3) (make-i/o-write-error . x4ba4) (make-i/o-read-error . x4b8f) (make-i/o-port-error . x4c45) (make-i/o-invalid-position-error . x4bbb) (make-i/o-filename-error . x4bd6) (make-i/o-file-protection-error . x4bef) (make-i/o-file-is-read-only-error . x4c04) (make-i/o-file-does-not-exist-error . x4c2e) (make-i/o-file-already-exists-error . x4c19) (make-i/o-error . x4b7a) (make-i/o-encoding-error . x4c75) (make-i/o-decoding-error . x4c5e) (make-custom-textual-output-port . x50d2) (make-custom-textual-input/output-port . x50d1) (make-custom-textual-input-port . x50d0) (make-custom-binary-output-port . x50cf) (make-custom-binary-input/output-port . x50ce) (make-custom-binary-input-port . x50cd) (make-bytevector . x50cc) (lookahead-u8 . x50cb) (lookahead-char . x50ca) (i/o-write-error? . x4ba6) (i/o-read-error? . x4b91) (i/o-port-error? . x4c49) (i/o-invalid-position-error? . x4bbf) (i/o-filename-error? . x4bda) (i/o-file-protection-error? . x4bf1) (i/o-file-is-read-only-error? . x4c06) (i/o-file-does-not-exist-error? . x4c30) (i/o-file-already-exists-error? . x4c1b) (i/o-error? . x4b7c) (i/o-error-position . x4bc1) (i/o-error-port . x4c4b) (i/o-error-filename . x4bdc) (i/o-encoding-error? . x4c79) (i/o-encoding-error-char . x4c7b) (i/o-decoding-error? . x4c60) (get-u8 . x50c9) (get-string-n! . x50c8) (get-string-n . x50c7) (get-string-all . x50c6) (get-line . x50c5) (get-datum . x50c4) (get-char . x50c3) (get-bytevector-some . x50c2) (get-bytevector-n! . x50c1) (get-bytevector-n . x50c0) (get-bytevector-all . x50bf) (flush-output-port . x50be) (close-port . x50bd) (scheme-report-environment . x2fbe) (quotient . x50bc) (null-environment . x2fbc) (remainder . x50bb) (modulo . x50ba) (inexact->exact . x50b9) (force . x50b8) (exact->inexact . x50b7) (make-promise . x50b6) (exit . x50b5) (command-line . x4db0) (string-fill! . x50b4) (string-set! . x50b3) (set-cdr! . x50b2) (set-car! . x50b1) (remove . x50b0) (remv . x50af) (remp . x50ae) (remq . x50ad) (partition . x50ac) (memv . x50ab) (memq . x50aa) (memp . x50a9) (member . x50a8) (exists . x50a7) (for-all . x50a6) (fold-right . x50a5) (fold-left . x50a4) (find . x50a3) (filter . x50a2) (cons* . x50a1) (assv . x50a0) (assq . x509f) (assp . x509e) (assoc . x509d) (call-with-string-output-port . x509c) (call-with-port . x509b) (call-with-bytevector-output-port . x509a) (bytevector->string . x5099) (buffer-mode? . x5098) (binary-port? . x5097) (with-exception-handler . x5096) (raise-continuable . x5095) (raise . x5094) (eval . x2fc2) (environment . x2fba) (make-enumeration . x5093) (enum-set=? . x5092) (enum-set-universe . x5091) (enum-set-union . x5090) (enum-set-subset? . x508f) (enum-set-projection . x508e) (enum-set-member? . x508d) (enum-set-intersection . x508c) (enum-set-indexer . x508b) (enum-set-difference . x508a) (enum-set-constructor . x5089) (enum-set-complement . x5088) (enum-set->list . x5087) (who-condition? . x4af0) (warning? . x4a68) (violation? . x4aa7) (undefined-violation? . x4b67) (syntax-violation? . x4b4e) (syntax-violation-subform . x4b52) (syntax-violation-form . x4b50) (syntax-violation . x2fe2) (simple-conditions . x5086) (serious-condition? . x4a7d) (non-continuable-violation? . x4b07) (message-condition? . x4a51) (make-who-condition . x4aec) (make-warning . x4a66) (make-violation . x4aa5) (make-undefined-violation . x4b65) (make-syntax-violation . x4b48) (make-serious-condition . x4a7b) (make-non-continuable-violation . x4b05) (make-message-condition . x4a4d) (make-lexical-violation . x4b2f) (make-irritants-condition . x4ad1) (make-implementation-restriction-violation . x4b1a) (make-error . x4a90) (make-assertion-violation . x4aba) (lexical-violation? . x4b31) (irritants-condition? . x4ad5) (implementation-restriction-violation? . x4b1c) (error? . x4a92) (condition-who . x4af2) (condition-predicate . x5085) (condition-message . x4a53) (condition-irritants . x4ad7) (condition-accessor . x5084) (condition . x5083) (assertion-violation? . x4abc) (condition? . x5082) (utf32->string . x5081) (utf16->string . x5080) (utf8->string . x507f) (uint-list->bytevector . x507e) (u8-list->bytevector . x507d) (string->utf8 . x507c) (string->utf32 . x507b) (string->utf16 . x507a) (sint-list->bytevector . x5079) (native-endianness . x5078) (bytevector? . x5077) (bytevector=? . x5076) (bytevector-uint-set! . x5075) (bytevector-uint-ref . x5074) (bytevector-u8-set! . x5073) (bytevector-u8-ref . x5072) (bytevector-u64-set! . x5071) (bytevector-u64-ref . x5070) (bytevector-u64-native-set! . x506f) (bytevector-u64-native-ref . x506e) (bytevector-u32-set! . x506d) (bytevector-u32-ref . x506c) (bytevector-u32-native-set! . x506b) (bytevector-u32-native-ref . x506a) (bytevector-u16-set! . x5069) (bytevector-u16-ref . x5068) (bytevector-u16-native-set! . x5067) (bytevector-u16-native-ref . x5066) (bytevector-sint-set! . x5065) (bytevector-sint-ref . x5064) (bytevector-s8-set! . x5063) (bytevector-s8-ref . x5062) (bytevector-s64-set! . x5061) (bytevector-s64-ref . x5060) (bytevector-s64-native-set! . x505f) (bytevector-s64-native-ref . x505e) (bytevector-s32-set! . x505d) (bytevector-s32-ref . x505c) (bytevector-s32-native-set! . x505b) (bytevector-s32-native-ref . x505a) (bytevector-s16-set! . x5059) (bytevector-s16-ref . x5058) (bytevector-s16-native-set! . x5057) (bytevector-s16-native-ref . x5056) (bytevector-length . x5055) (bytevector-ieee-single-ref . x5054) (bytevector-ieee-single-set! . x5053) (bytevector-ieee-single-native-set! . x5052) (bytevector-ieee-single-native-ref . x5051) (bytevector-ieee-double-set! . x5050) (bytevector-ieee-double-ref . x504f) (bytevector-ieee-double-native-set! . x504e) (bytevector-ieee-double-native-ref . x504d) (bytevector-fill! . x504c) (bytevector-copy! . x504b) (bytevector-copy . x504a) (bytevector->uint-list . x5049) (bytevector->u8-list . x5048) (bytevector->sint-list . x5047) (no-nans-violation? . x4ca5) (no-infinities-violation? . x4c90) (make-no-nans-violation . x4ca3) (make-no-infinities-violation . x4c8e) (real->flonum . x5046) (flzero? . x5045) (fltruncate . x5044) (fltan . x5043) (flsqrt . x5042) (flsin . x5041) (flround . x5040) (flpositive? . x503f) (flonum? . x503e) (flodd? . x503d) (flnumerator . x503c) (flnegative? . x503b) (flnan? . x503a) (flmod0 . x5039) (flmod . x5038) (flmin . x5037) (flmax . x5036) (fllog . x5035) (flinteger? . x5034) (flinfinite? . x5033) (flfloor . x5032) (flfinite? . x5031) (flexpt . x5030) (flexp . x502f) (fleven? . x502e) (fldiv0-and-mod0 . x502d) (fldiv0 . x502c) (fldiv-and-mod . x502b) (fldiv . x502a) (fldenominator . x5029) (flcos . x5028) (flceiling . x5027) (flatan . x5026) (flasin . x5025) (flacos . x5024) (flabs . x5023) (fl>? . x5022) (fl>=? . x5021) (fl=? . x5020) (fl<? . x501f) (fl<=? . x501e) (fl/ . x501d) (fl- . x501c) (fl+ . x501b) (fl* . x501a) (fixnum->flonum . x5019) (fxzero? . x5018) (fxxor . x5017) (fxrotate-bit-field . x5016) (fxreverse-bit-field . x5015) (fxpositive? . x5014) (fxodd? . x5013) (fxnot . x5012) (fxnegative? . x5011) (fxmod0 . x5010) (fxmod . x500f) (fxmin . x500e) (fxmax . x500d) (fxlength . x500c) (fxior . x500b) (fxif . x500a) (fxfirst-bit-set . x5009) (fxeven? . x5008) (fxdiv0-and-mod0 . x5007) (fxdiv0 . x5006) (fxdiv-and-mod . x5005) (fxdiv . x5004) (fxcopy-bit-field . x5003) (fxcopy-bit . x5002) (fxbit-set? . x5001) (fxbit-field . x5000) (fxbit-count . x4fff) (fxarithmetic-shift-right . x4ffe) (fxarithmetic-shift-left . x4ffd) (fxarithmetic-shift . x4ffc) (fxand . x4ffb) (fx>? . x4ffa) (fx>=? . x4ff9) (fx=? . x4ff8) (fx<? . x4ff7) (fx<=? . x4ff6) (fx-/carry . x4ff5) (fx- . x4ff4) (fx+/carry . x4ff3) (fx+ . x4ff2) (fx*/carry . x4ff1) (fx* . x4ff0) (greatest-fixnum . x4fef) (least-fixnum . x4fee) (fixnum-width . x4fed) (fixnum? . x4fec) (bitwise-rotate-bit-field . x4feb) (bitwise-reverse-bit-field . x4fea) (bitwise-length . x4fe9) (bitwise-if . x4fe8) (bitwise-first-bit-set . x4fe7) (bitwise-copy-bit-field . x4fe6) (bitwise-copy-bit . x4fe5) (bitwise-bit-set? . x4fe4) (bitwise-bit-field . x4fe3) (bitwise-bit-count . x4fe2) (bitwise-xor . x4fe1) (bitwise-ior . x4fe0) (bitwise-and . x4fdf) (bitwise-not . x4fde) (bitwise-arithmetic-shift-right . x4fdd) (bitwise-arithmetic-shift-left . x4fdc) (bitwise-arithmetic-shift . x4fdb) (zero? . x4fda) (vector? . x4fd9) (vector-set! . x4fd8) (vector-ref . x4fd7) (vector-map . x4fd6) (vector-length . x4fd5) (vector-for-each . x4fd4) (vector-fill! . x4fd3) (vector->list . x4fd2) (vector . x4fd1) (values . x4fd0) (truncate . x4fcf) (tan . x4fce) (symbol? . x4fcd) (symbol=? . x4fcc) (symbol->string . x4fcb) (substring . x4fca) (string? . x4fc9) (string>? . x4fc8) (string>=? . x4fc7) (string=? . x4fc6) (string<? . x4fc5) (string<=? . x4fc4) (string-ref . x4fc3) (string-length . x4fc2) (string-for-each . x4fc1) (string-copy . x4fc0) (string-append . x4fbf) (string->symbol . x4fbe) (string->number . x4fbd) (string->list . x4fbc) (string . x4fbb) (sqrt . x4fba) (sin . x4fb9) (round . x4fb8) (reverse . x4fb7) (real? . x4fb6) (real-valued? . x4fb5) (real-part . x4fb4) (rationalize . x4fb3) (rational? . x4fb2) (rational-valued? . x4fb1) (procedure? . x4fb0) (positive? . x4faf) (pair? . x4fae) (odd? . x4fad) (numerator . x4fac) (number? . x4fab) (number->string . x4faa) (null? . x4fa9) (not . x4fa8) (negative? . x4fa7) (nan? . x4fa6) (min . x4fa5) (max . x4fa4) (map . x4fa3) (make-vector . x4fa2) (make-string . x4fa1) (make-rectangular . x4fa0) (make-polar . x4f9f) (magnitude . x4f9e) (log . x4f9d) (list? . x4f9c) (list-tail . x4f9b) (list-ref . x4f9a) (list->vector . x4f99) (list->string . x4f98) (list . x4f97) (length . x4f96) (lcm . x4f95) (integer? . x4f94) (integer-valued? . x4f93) (integer->char . x4f92) (infinite? . x4f91) (inexact? . x4f90) (inexact . x4f8f) (imag-part . x4f8e) (gcd . x4f8d) (for-each . x4f8c) (floor . x4f8b) (finite? . x4f8a) (expt . x4f89) (exp . x4f88) (exact? . x4f87) (exact-integer-sqrt . x4f86) (exact . x4f85) (even? . x4f84) (error . x4f83) (eqv? . x4f82) (equal? . x4f81) (eq? . x4f80) (dynamic-wind . x4f7f) (div0-and-mod0 . x4f7e) (mod0 . x4f7d) (div0 . x4f7c) (div-and-mod . x4f7b) (mod . x4f7a) (div . x4f79) (denominator . x4f78) (cos . x4f77) (cons . x4f76) (complex? . x4f75) (char? . x4f74) (char>? . x4f73) (char>=? . x4f72) (char=? . x4f71) (char<? . x4f70) (char<=? . x4f6f) (char->integer . x4f6e) (ceiling . x4f6d) (call-with-values . x4f6c) (call/cc . x4f6b) (call-with-current-continuation . x4f6a) (cddddr . x4f69) (cdddar . x4f68) (cddadr . x4f67) (cddaar . x4f66) (cdaddr . x4f65) (cdadar . x4f64) (cdaadr . x4f63) (cdaaar . x4f62) (cadddr . x4f61) (caddar . x4f60) (cadadr . x4f5f) (cadaar . x4f5e) (caaddr . x4f5d) (caadar . x4f5c) (caaadr . x4f5b) (caaaar . x4f5a) (cdddr . x4f59) (cddar . x4f58) (cdadr . x4f57) (cdaar . x4f56) (caddr . x4f55) (cadar . x4f54) (caadr . x4f53) (caaar . x4f52) (cddr . x4f51) (cdar . x4f50) (cadr . x4f4f) (caar . x4f4e) (cdr . x4f4d) (car . x4f4c) (boolean? . x4f4b) (boolean=? . x4f4a) (atan . x4f49) (assertion-violation . x4f48) (assertion-error . x2fdc) (asin . x4f47) (apply . x4f46) (append . x4f45) (angle . x4f44) (acos . x4f43) (abs . x4f42) (/ . x4f41) (* . x4f40) (- . x4f3f) (+ . x4f3e) (>= . x4f3d) (> . x4f3c) (= . x4f3b) (<= . x4f3a) (< . x4f39) (library . x4f38) (&no-nans . x4f37) (&no-infinities . x4f36) (&i/o-encoding . x4f35) (&i/o-decoding . x4f34) (&i/o-port . x4f33) (&i/o-file-does-not-exist . x4f32) (&i/o-file-already-exists . x4f31) (&i/o-file-is-read-only . x4f30) (&i/o-file-protection . x4f2f) (&i/o-filename . x4f2e) (&i/o-invalid-position . x4f2d) (&i/o-write . x4f2c) (&i/o-read . x4f2b) (&i/o . x4f2a) (&undefined . x4f29) (&syntax . x4f28) (&lexical . x4f27) (&implementation-restriction . x4f26) (&non-continuable . x4f25) (&who . x4f24) (&irritants . x4f23) (&assertion . x4f22) (&violation . x4f21) (&error . x4f20) (&serious . x4f1f) (&warning . x4f1e) (&message . x4f1d) (&condition . x4f1c) (define-condition-type . x4f1b) (define-enumeration . x4f1a) (define-record-type . x4f19) (parent-rtd . x4f18) (nongenerative . x4f17) (opaque . x4f16) (sealed . x4f15) (protocol . x4f14) (parent . x4f13) (immutable . x4f12) (mutable . x4f11) (fields . x4f10) (error-handling-mode . x4f0f) (file-options . x4f0e) (buffer-mode . x4f0d) (eol-style . x4f0c) (guard . x4f0b) (trace-define . x4f0a) (trace-lambda . x4f09) (unsyntax-splicing . x4f08) (unsyntax . x4f07) (unquote-splicing . x4f06) (unquote . x4f05) (_ . x4f04) (else . x4f03) (=> . x4f02) (... . x4f01) (assert . x4f00) (endianness . x4eff) (delay . x4efe) (time . x4efd) (do . x4efc) (cond . x4efb) (let* . x4efa) (let . x4ef9) (let*-values . x4ef8) (let-values . x4ef7) (identifier-syntax . x4ef6) (with-syntax . x4ef5) (quasisyntax . x4ef4) (quasiquote . x4ef3) (syntax-rules . x4ef2) (include . x4ef1) (define-struct . x4ef0) (record-constructor-descriptor . x4eef) (record-type-descriptor . x4eee) (case . x4eed) (parameterize . x4eec) (unless . x4eeb) (when . x4eea) (or . x4ee9) (and . x4ee8) (if . x4ee7) (letrec* . x4ee6) (letrec . x4ee5) (type-descriptor . x4ee4) (case-lambda . x4ee3) (lambda . x4ee2) (syntax . x4ee1) (syntax-case . x4ee0) (quote . x4edf) (foreign-call . x4ede) (letrec-syntax . x4edd) (let-syntax . x4edc) (set! . x4edb) (import . x4eda) (begin . x4ed9) (module . x4ed8) (define-syntax . x4ed7) (define . x4ed6)) '((x4ca9 core-prim . &no-nans-rcd) (x4ca7 core-prim . &no-nans-rtd) (x4c94 core-prim . &no-infinities-rcd) (x4c92 core-prim . &no-infinities-rtd) (x4c7f core-prim . &i/o-encoding-rcd) (x4c7d core-prim . &i/o-encoding-rtd) (x4c64 core-prim . &i/o-decoding-rcd) (x4c62 core-prim . &i/o-decoding-rtd) (x4c4f core-prim . &i/o-port-rcd) (x4c4d core-prim . &i/o-port-rtd) (x4c34 core-prim . &i/o-file-does-not-exist-rcd) (x4c32 core-prim . &i/o-file-does-not-exist-rtd) (x4c1f core-prim . &i/o-file-already-exists-rcd) (x4c1d core-prim . &i/o-file-already-exists-rtd) (x4c0a core-prim . &i/o-file-is-read-only-rcd) (x4c08 core-prim . &i/o-file-is-read-only-rtd) (x4bf5 core-prim . &i/o-file-protection-rcd) (x4bf3 core-prim . &i/o-file-protection-rtd) (x4be0 core-prim . &i/o-filename-rcd) (x4bde core-prim . &i/o-filename-rtd) (x4bc5 core-prim . &i/o-invalid-position-rcd) (x4bc3 core-prim . &i/o-invalid-position-rtd) (x4baa core-prim . &i/o-write-rcd) (x4ba8 core-prim . &i/o-write-rtd) (x4b95 core-prim . &i/o-read-rcd) (x4b93 core-prim . &i/o-read-rtd) (x4b80 core-prim . &i/o-rcd) (x4b7e core-prim . &i/o-rtd) (x4b6b core-prim . &undefined-rcd) (x4b69 core-prim . &undefined-rtd) (x4b56 core-prim . &syntax-rcd) (x4b54 core-prim . &syntax-rtd) (x4b35 core-prim . &lexical-rcd) (x4b33 core-prim . &lexical-rtd) (x4b20 core-prim . &implementation-restriction-rcd) (x4b1e core-prim . &implementation-restriction-rtd) (x4b0b core-prim . &non-continuable-rcd) (x4b09 core-prim . &non-continuable-rtd) (x4af6 core-prim . &who-rcd) (x4af4 core-prim . &who-rtd) (x4adb core-prim . &irritants-rcd) (x4ad9 core-prim . &irritants-rtd) (x4ac0 core-prim . &assertion-rcd) (x4abe core-prim . &assertion-rtd) (x4aab core-prim . &violation-rcd) (x4aa9 core-prim . &violation-rtd) (x4a96 core-prim . &error-rcd) (x4a94 core-prim . &error-rtd) (x4a81 core-prim . &serious-rcd) (x4a7f core-prim . &serious-rtd) (x4a6c core-prim . &warning-rcd) (x4a6a core-prim . &warning-rtd) (x4a57 core-prim . &message-rcd) (x4a55 core-prim . &message-rtd) (x49f8 core-prim . &condition-rcd) (x49f6 core-prim . &condition-rtd) (x2fde core-prim . syntax-error) (x2ef9 core-prim . syntax-dispatch) (x51e8 core-prim . pretty-print) (x51e7 core-prim . eval-core) (x51e6 core-prim . set-symbol-value!) (x51e5 core-prim . symbol-value) (x51e4 core-prim . gensym) (x51e3 core-prim . void) (x4db6 core-prim . load) (x2fee core-prim . interaction-environment) (x51e2 core-prim . char-ready?) (x51e1 core-prim . regexp?) (x51e0 core-prim . read-line) (x51df core-prim . ungensym) (x51de core-prim . alist->eq-hash-table) (x51dd core-prim . assoc-ref) (x51dc core-prim . print) (x51db core-prim . format) (x51da core-prim . host-os) (x298f core-prim . library-path) (x51d9 core-prim . standard-library-path) (x51d8 core-prim . file-newer?) (x51d7 core-prim . stat-mtime) (x51d6 core-prim . write-to-file) (x51d5 core-prim . file->list) (x51d4 core-prim . file->string) (x51d3 core-prim . digit->integer) (x51d2 core-prim . call-with-string-input-port) (x51d1 core-prim . call-with-string-io) (x51d0 core-prim . string-split) (x51cf core-prim . bytevector-for-each) (x51ce core-prim . string->regexp) (x51cd core-prim . rxmatch) (x51cc core-prim . regexp-replace-all) (x51cb core-prim . hashtable-for-each) (x51ca core-prim . call-process) (x51c9 core-prim . local-tz-offset) (x51c8 core-prim . microseconds) (x51c7 core-prim . directory-list) (x51c6 core-prim . set-current-directory!) (x51c5 core-prim . expand-path) (x51c4 core-prim . current-directory) (x51c3 core-prim . %spawn) (x51c2 core-prim . %waitpid) (x51c1 core-prim . pointer-ref-c-int64) (x51c0 core-prim . pointer-ref-c-int32) (x51bf core-prim . pointer-ref-c-int16) (x51be core-prim . pointer-ref-c-int8) (x51bd core-prim . pointer-ref-c-uint64) (x51bc core-prim . pointer-ref-c-uint32) (x51bb core-prim . pointer-ref-c-uint16) (x51ba core-prim . pointer-ref-c-uint8) (x51b9 core-prim . pointer-set-c-int64!) (x51b8 core-prim . pointer-set-c-int32!) (x51b7 core-prim . pointer-set-c-int16!) (x51b6 core-prim . pointer-set-c-int8!) (x51b5 core-prim . pointer-set-c-pointer!) (x51b4 core-prim . pointer-set-c-double!) (x51b3 core-prim . pointer-set-c-float!) (x51b2 core-prim . pointer-set-c-long-long!) (x51b1 core-prim . pointer-set-c-long!) (x51b0 core-prim . pointer-set-c-int!) (x51af core-prim . pointer-set-c-short!) (x51ae core-prim . pointer-set-c-char!) (x51ad core-prim . pointer-ref-c-pointer) (x51ac core-prim . pointer-ref-c-double) (x51ab core-prim . pointer-ref-c-float) (x51aa core-prim . pointer-ref-c-unsigned-long-long) (x51a9 core-prim . pointer-ref-c-signed-long-long) (x51a8 core-prim . pointer-ref-c-unsigned-long) (x51a7 core-prim . pointer-ref-c-signed-long) (x51a6 core-prim . pointer-ref-c-unsigned-int) (x51a5 core-prim . pointer-ref-c-signed-int) (x51a4 core-prim . pointer-ref-c-unsigned-short) (x51a3 core-prim . pointer-ref-c-signed-short) (x51a2 core-prim . pointer-ref-c-unsigned-char) (x51a1 core-prim . pointer-ref-c-signed-char) (x51a0 core-prim . pointer->integer) (x519f core-prim . integer->pointer) (x519e core-prim . pointer?) (x519d core-prim . %ffi-supported?) (x519c core-prim . %ffi-pointer->string) (x519b core-prim . %ffi-call->string-or-zero) (x519a core-prim . %ffi-call->double) (x5199 core-prim . %ffi-call->void*) (x5198 core-prim . %ffi-call->void) (x5197 core-prim . %ffi-call->int) (x5196 core-prim . %ffi-lookup) (x5195 core-prim . %ffi-open) (x5194 core-prim . %fork) (x5193 core-prim . %pipe) (x5192 core-prim . p) (x5191 core-prim . open-output-string) (x5190 core-prim . get-output-string) (x518f core-prim . file-stat-ctime) (x518e core-prim . file-stat-atime) (x518d core-prim . file-stat-mtime) (x518c core-prim . file-size-in-bytes) (x518b core-prim . file-writable?) (x518a core-prim . file-executable?) (x5189 core-prim . file-readable?) (x5188 core-prim . file-regular?) (x5187 core-prim . file-symbolic-link?) (x5186 core-prim . file-directory?) (x5185 core-prim . create-symbolic-link) (x5184 core-prim . rename-file) (x5183 core-prim . delete-directory) (x5182 core-prim . create-directory) (x5181 core-prim . get-environment-variables) (x5180 core-prim . get-environment-variable) (x517f core-prim . get-timeofday) (x517e core-prim . get-command-line) (x517d core-prim . sys-display) (x517c core-prim . whereis) (x517b core-prim . register) (x517a core-prim . vm-join!) (x5179 core-prim . vm-set-value!) (x5178 core-prim . vm?) (x5177 core-prim . main-vm?) (x5176 core-prim . vm-eval) (x5175 core-prim . vm-self) (x5174 core-prim . vm-start!) (x5173 core-prim . make-vm) (x5172 core-prim . mutex-try-lock!) (x5171 core-prim . mutex-unlock!) (x5170 core-prim . mutex-lock!) (x516f core-prim . mutex?) (x516e core-prim . make-mutex) (x516d core-prim . condition-variable-notify-all!) (x516c core-prim . condition-variable-notify!) (x516b core-prim . condition-variable-wait!) (x516a core-prim . make-condition-variable) (x5169 core-prim . mosh-executable-path) (x5168 core-prim . make-file-options) (x5167 core-prim . source-info) (x5166 core-prim . make-compiler-instruction) (x5165 core-prim . make-instruction) (x5164 core-prim . set-source-info!) (x5163 core-prim . bignum?) (x5162 core-prim . fast-equal?) (x5161 core-prim . fasl-read) (x5160 core-prim . fasl-write) (x515f core-prim . time-usage) (x515e core-prim . os-constant) (x27c2 core-prim . make-parameter) (x515d core-prim . socket-port) (x515c core-prim . socket-shutdown) (x515b core-prim . socket-close) (x515a core-prim . socket-send) (x5159 core-prim . socket-recv!) (x5158 core-prim . socket-recv) (x5157 core-prim . make-server-socket) (x5156 core-prim . make-client-socket) (x5155 core-prim . socket-accept) (x5154 core-prim . socket?) (x5153 core-prim . string-upcase) (x5152 core-prim . string-titlecase) (x5151 core-prim . string-normalize-nfkd) (x5150 core-prim . string-normalize-nfkc) (x514f core-prim . string-normalize-nfd) (x514e core-prim . string-normalize-nfc) (x514d core-prim . string-foldcase) (x514c core-prim . string-downcase) (x514b core-prim . string-ci>?) (x514a core-prim . string-ci>=?) (x5149 core-prim . string-ci=?) (x5148 core-prim . string-ci<?) (x5147 core-prim . string-ci<=?) (x5146 core-prim . char-whitespace?) (x5145 core-prim . char-upper-case?) (x5144 core-prim . char-title-case?) (x5143 core-prim . char-numeric?) (x5142 core-prim . char-lower-case?) (x5141 core-prim . char-general-category) (x5140 core-prim . char-upcase) (x513f core-prim . char-titlecase) (x513e core-prim . char-foldcase) (x513d core-prim . char-downcase) (x513c core-prim . char-ci>?) (x513b core-prim . char-ci>=?) (x513a core-prim . char-ci=?) (x5139 core-prim . char-ci<?) (x5138 core-prim . char-ci<=?) (x5137 core-prim . char-alphabetic?) (x2d26 core-prim . make-variable-transformer) (x2fe4 core-prim . identifier?) (x2fd0 core-prim . generate-temporaries) (x2fd2 core-prim . free-identifier=?) (x2fe8 core-prim . syntax->datum) (x2fe6 core-prim . datum->syntax) (x2fd4 core-prim . bound-identifier=?) (x5136 core-prim . record-type-descriptor?) (x5135 core-prim . record-predicate) (x5134 core-prim . record-mutator) (x5133 core-prim . record-constructor) (x5132 core-prim . record-accessor) (x5131 core-prim . make-record-type-descriptor) (x5130 core-prim . make-record-constructor-descriptor) (x512f core-prim . record?) (x512e core-prim . record-type-uid) (x512d core-prim . record-type-sealed?) (x512c core-prim . record-type-parent) (x512b core-prim . record-type-opaque?) (x512a core-prim . record-type-name) (x5129 core-prim . record-type-generative?) (x5128 core-prim . record-type-field-names) (x5127 core-prim . record-rtd) (x5126 core-prim . record-field-mutable?) (x5125 core-prim . delete-file) (x5124 core-prim . file-exists?) (x5123 core-prim . vector-sort!) (x5122 core-prim . vector-sort) (x5121 core-prim . list-sort) (x5120 core-prim . symbol-hash) (x511f core-prim . string-ci-hash) (x511e core-prim . string-hash) (x511d core-prim . equal-hash) (x511c core-prim . hashtable-equivalence-function) (x511b core-prim . make-hashtable) (x511a core-prim . hashtable-hash-function) (x5119 core-prim . make-eqv-hashtable) (x5118 core-prim . make-eq-hashtable) (x5117 core-prim . hashtable?) (x5116 core-prim . hashtable-update!) (x5115 core-prim . hashtable-size) (x5114 core-prim . hashtable-set!) (x5113 core-prim . hashtable-ref) (x5112 core-prim . hashtable-mutable?) (x5111 core-prim . hashtable-keys) (x5110 core-prim . hashtable-entries) (x510f core-prim . hashtable-delete!) (x510e core-prim . hashtable-copy) (x510d core-prim . hashtable-contains?) (x510c core-prim . hashtable-clear!) (x510b core-prim . call-with-output-file) (x510a core-prim . call-with-input-file) (x5109 core-prim . write-char) (x5108 core-prim . write) (x5107 core-prim . with-output-to-file) (x5106 core-prim . with-input-from-file) (x5105 core-prim . read-char) (x5104 core-prim . read) (x5103 core-prim . peek-char) (x5102 core-prim . open-output-file) (x5101 core-prim . open-input-file) (x5100 core-prim . newline) (x50ff core-prim . display) (x50fe core-prim . close-output-port) (x50fd core-prim . close-input-port) (x50fc core-prim . eof-object?) (x50fb core-prim . eof-object) (x50fa core-prim . current-error-port) (x50f9 core-prim . current-output-port) (x50f8 core-prim . current-input-port) (x50f7 core-prim . output-port?) (x50f6 core-prim . input-port?) (x50f5 core-prim . utf-8-codec) (x50f4 core-prim . utf-16-codec) (x50f3 core-prim . transcoder-error-handling-mode) (x50f2 core-prim . transcoder-eol-style) (x50f1 core-prim . transcoder-codec) (x50f0 core-prim . transcoded-port) (x50ef core-prim . textual-port?) (x50ee core-prim . string->bytevector) (x50ed core-prim . standard-output-port) (x50ec core-prim . standard-input-port) (x50eb core-prim . standard-error-port) (x50ea core-prim . set-port-position!) (x50e9 core-prim . put-u8) (x50e8 core-prim . put-string) (x50e7 core-prim . put-datum) (x50e6 core-prim . put-char) (x50e5 core-prim . put-bytevector) (x50e4 core-prim . port?) (x50e3 core-prim . port-transcoder) (x50e2 core-prim . port-position) (x50e1 core-prim . port-has-set-port-position!?) (x50e0 core-prim . port-has-port-position?) (x50df core-prim . port-eof?) (x50de core-prim . output-port-buffer-mode) (x50dd core-prim . open-string-output-port) (x50dc core-prim . open-string-input-port) (x50db core-prim . open-file-output-port) (x50da core-prim . open-file-input/output-port) (x50d9 core-prim . open-file-input-port) (x50d8 core-prim . open-bytevector-output-port) (x50d7 core-prim . open-bytevector-input-port) (x50d6 core-prim . native-transcoder) (x50d5 core-prim . native-eol-style) (x50d4 core-prim . make-transcoder) (x50d3 core-prim . latin-1-codec) (x4ba4 core-prim . make-i/o-write-error) (x4b8f core-prim . make-i/o-read-error) (x4c45 core-prim . make-i/o-port-error) (x4bbb core-prim . make-i/o-invalid-position-error) (x4bd6 core-prim . make-i/o-filename-error) (x4bef core-prim . make-i/o-file-protection-error) (x4c04 core-prim . make-i/o-file-is-read-only-error) (x4c2e core-prim . make-i/o-file-does-not-exist-error) (x4c19 core-prim . make-i/o-file-already-exists-error) (x4b7a core-prim . make-i/o-error) (x4c75 core-prim . make-i/o-encoding-error) (x4c5e core-prim . make-i/o-decoding-error) (x50d2 core-prim . make-custom-textual-output-port) (x50d1 core-prim . make-custom-textual-input/output-port) (x50d0 core-prim . make-custom-textual-input-port) (x50cf core-prim . make-custom-binary-output-port) (x50ce core-prim . make-custom-binary-input/output-port) (x50cd core-prim . make-custom-binary-input-port) (x50cc core-prim . make-bytevector) (x50cb core-prim . lookahead-u8) (x50ca core-prim . lookahead-char) (x4ba6 core-prim . i/o-write-error?) (x4b91 core-prim . i/o-read-error?) (x4c49 core-prim . i/o-port-error?) (x4bbf core-prim . i/o-invalid-position-error?) (x4bda core-prim . i/o-filename-error?) (x4bf1 core-prim . i/o-file-protection-error?) (x4c06 core-prim . i/o-file-is-read-only-error?) (x4c30 core-prim . i/o-file-does-not-exist-error?) (x4c1b core-prim . i/o-file-already-exists-error?) (x4b7c core-prim . i/o-error?) (x4bc1 core-prim . i/o-error-position) (x4c4b core-prim . i/o-error-port) (x4bdc core-prim . i/o-error-filename) (x4c79 core-prim . i/o-encoding-error?) (x4c7b core-prim . i/o-encoding-error-char) (x4c60 core-prim . i/o-decoding-error?) (x50c9 core-prim . get-u8) (x50c8 core-prim . get-string-n!) (x50c7 core-prim . get-string-n) (x50c6 core-prim . get-string-all) (x50c5 core-prim . get-line) (x50c4 core-prim . get-datum) (x50c3 core-prim . get-char) (x50c2 core-prim . get-bytevector-some) (x50c1 core-prim . get-bytevector-n!) (x50c0 core-prim . get-bytevector-n) (x50bf core-prim . get-bytevector-all) (x50be core-prim . flush-output-port) (x50bd core-prim . close-port) (x2fbe core-prim . scheme-report-environment) (x50bc core-prim . quotient) (x2fbc core-prim . null-environment) (x50bb core-prim . remainder) (x50ba core-prim . modulo) (x50b9 core-prim . inexact->exact) (x50b8 core-prim . force) (x50b7 core-prim . exact->inexact) (x50b6 core-prim . make-promise) (x50b5 core-prim . exit) (x4db0 core-prim . command-line) (x50b4 core-prim . string-fill!) (x50b3 core-prim . string-set!) (x50b2 core-prim . set-cdr!) (x50b1 core-prim . set-car!) (x50b0 core-prim . remove) (x50af core-prim . remv) (x50ae core-prim . remp) (x50ad core-prim . remq) (x50ac core-prim . partition) (x50ab core-prim . memv) (x50aa core-prim . memq) (x50a9 core-prim . memp) (x50a8 core-prim . member) (x50a7 core-prim . exists) (x50a6 core-prim . for-all) (x50a5 core-prim . fold-right) (x50a4 core-prim . fold-left) (x50a3 core-prim . find) (x50a2 core-prim . filter) (x50a1 core-prim . cons*) (x50a0 core-prim . assv) (x509f core-prim . assq) (x509e core-prim . assp) (x509d core-prim . assoc) (x509c core-prim . call-with-string-output-port) (x509b core-prim . call-with-port) (x509a core-prim . call-with-bytevector-output-port) (x5099 core-prim . bytevector->string) (x5098 core-prim . buffer-mode?) (x5097 core-prim . binary-port?) (x5096 core-prim . with-exception-handler) (x5095 core-prim . raise-continuable) (x5094 core-prim . raise) (x2fc2 core-prim . eval) (x2fba core-prim . environment) (x5093 core-prim . make-enumeration) (x5092 core-prim . enum-set=?) (x5091 core-prim . enum-set-universe) (x5090 core-prim . enum-set-union) (x508f core-prim . enum-set-subset?) (x508e core-prim . enum-set-projection) (x508d core-prim . enum-set-member?) (x508c core-prim . enum-set-intersection) (x508b core-prim . enum-set-indexer) (x508a core-prim . enum-set-difference) (x5089 core-prim . enum-set-constructor) (x5088 core-prim . enum-set-complement) (x5087 core-prim . enum-set->list) (x4af0 core-prim . who-condition?) (x4a68 core-prim . warning?) (x4aa7 core-prim . violation?) (x4b67 core-prim . undefined-violation?) (x4b4e core-prim . syntax-violation?) (x4b52 core-prim . syntax-violation-subform) (x4b50 core-prim . syntax-violation-form) (x2fe2 core-prim . syntax-violation) (x5086 core-prim . simple-conditions) (x4a7d core-prim . serious-condition?) (x4b07 core-prim . non-continuable-violation?) (x4a51 core-prim . message-condition?) (x4aec core-prim . make-who-condition) (x4a66 core-prim . make-warning) (x4aa5 core-prim . make-violation) (x4b65 core-prim . make-undefined-violation) (x4b48 core-prim . make-syntax-violation) (x4a7b core-prim . make-serious-condition) (x4b05 core-prim . make-non-continuable-violation) (x4a4d core-prim . make-message-condition) (x4b2f core-prim . make-lexical-violation) (x4ad1 core-prim . make-irritants-condition) (x4b1a core-prim . make-implementation-restriction-violation) (x4a90 core-prim . make-error) (x4aba core-prim . make-assertion-violation) (x4b31 core-prim . lexical-violation?) (x4ad5 core-prim . irritants-condition?) (x4b1c core-prim . implementation-restriction-violation?) (x4a92 core-prim . error?) (x4af2 core-prim . condition-who) (x5085 core-prim . condition-predicate) (x4a53 core-prim . condition-message) (x4ad7 core-prim . condition-irritants) (x5084 core-prim . condition-accessor) (x5083 core-prim . condition) (x4abc core-prim . assertion-violation?) (x5082 core-prim . condition?) (x5081 core-prim . utf32->string) (x5080 core-prim . utf16->string) (x507f core-prim . utf8->string) (x507e core-prim . uint-list->bytevector) (x507d core-prim . u8-list->bytevector) (x507c core-prim . string->utf8) (x507b core-prim . string->utf32) (x507a core-prim . string->utf16) (x5079 core-prim . sint-list->bytevector) (x5078 core-prim . native-endianness) (x5077 core-prim . bytevector?) (x5076 core-prim . bytevector=?) (x5075 core-prim . bytevector-uint-set!) (x5074 core-prim . bytevector-uint-ref) (x5073 core-prim . bytevector-u8-set!) (x5072 core-prim . bytevector-u8-ref) (x5071 core-prim . bytevector-u64-set!) (x5070 core-prim . bytevector-u64-ref) (x506f core-prim . bytevector-u64-native-set!) (x506e core-prim . bytevector-u64-native-ref) (x506d core-prim . bytevector-u32-set!) (x506c core-prim . bytevector-u32-ref) (x506b core-prim . bytevector-u32-native-set!) (x506a core-prim . bytevector-u32-native-ref) (x5069 core-prim . bytevector-u16-set!) (x5068 core-prim . bytevector-u16-ref) (x5067 core-prim . bytevector-u16-native-set!) (x5066 core-prim . bytevector-u16-native-ref) (x5065 core-prim . bytevector-sint-set!) (x5064 core-prim . bytevector-sint-ref) (x5063 core-prim . bytevector-s8-set!) (x5062 core-prim . bytevector-s8-ref) (x5061 core-prim . bytevector-s64-set!) (x5060 core-prim . bytevector-s64-ref) (x505f core-prim . bytevector-s64-native-set!) (x505e core-prim . bytevector-s64-native-ref) (x505d core-prim . bytevector-s32-set!) (x505c core-prim . bytevector-s32-ref) (x505b core-prim . bytevector-s32-native-set!) (x505a core-prim . bytevector-s32-native-ref) (x5059 core-prim . bytevector-s16-set!) (x5058 core-prim . bytevector-s16-ref) (x5057 core-prim . bytevector-s16-native-set!) (x5056 core-prim . bytevector-s16-native-ref) (x5055 core-prim . bytevector-length) (x5054 core-prim . bytevector-ieee-single-ref) (x5053 core-prim . bytevector-ieee-single-set!) (x5052 core-prim . bytevector-ieee-single-native-set!) (x5051 core-prim . bytevector-ieee-single-native-ref) (x5050 core-prim . bytevector-ieee-double-set!) (x504f core-prim . bytevector-ieee-double-ref) (x504e core-prim . bytevector-ieee-double-native-set!) (x504d core-prim . bytevector-ieee-double-native-ref) (x504c core-prim . bytevector-fill!) (x504b core-prim . bytevector-copy!) (x504a core-prim . bytevector-copy) (x5049 core-prim . bytevector->uint-list) (x5048 core-prim . bytevector->u8-list) (x5047 core-prim . bytevector->sint-list) (x4ca5 core-prim . no-nans-violation?) (x4c90 core-prim . no-infinities-violation?) (x4ca3 core-prim . make-no-nans-violation) (x4c8e core-prim . make-no-infinities-violation) (x5046 core-prim . real->flonum) (x5045 core-prim . flzero?) (x5044 core-prim . fltruncate) (x5043 core-prim . fltan) (x5042 core-prim . flsqrt) (x5041 core-prim . flsin) (x5040 core-prim . flround) (x503f core-prim . flpositive?) (x503e core-prim . flonum?) (x503d core-prim . flodd?) (x503c core-prim . flnumerator) (x503b core-prim . flnegative?) (x503a core-prim . flnan?) (x5039 core-prim . flmod0) (x5038 core-prim . flmod) (x5037 core-prim . flmin) (x5036 core-prim . flmax) (x5035 core-prim . fllog) (x5034 core-prim . flinteger?) (x5033 core-prim . flinfinite?) (x5032 core-prim . flfloor) (x5031 core-prim . flfinite?) (x5030 core-prim . flexpt) (x502f core-prim . flexp) (x502e core-prim . fleven?) (x502d core-prim . fldiv0-and-mod0) (x502c core-prim . fldiv0) (x502b core-prim . fldiv-and-mod) (x502a core-prim . fldiv) (x5029 core-prim . fldenominator) (x5028 core-prim . flcos) (x5027 core-prim . flceiling) (x5026 core-prim . flatan) (x5025 core-prim . flasin) (x5024 core-prim . flacos) (x5023 core-prim . flabs) (x5022 core-prim . fl>?) (x5021 core-prim . fl>=?) (x5020 core-prim . fl=?) (x501f core-prim . fl<?) (x501e core-prim . fl<=?) (x501d core-prim . fl/) (x501c core-prim . fl-) (x501b core-prim . fl+) (x501a core-prim . fl*) (x5019 core-prim . fixnum->flonum) (x5018 core-prim . fxzero?) (x5017 core-prim . fxxor) (x5016 core-prim . fxrotate-bit-field) (x5015 core-prim . fxreverse-bit-field) (x5014 core-prim . fxpositive?) (x5013 core-prim . fxodd?) (x5012 core-prim . fxnot) (x5011 core-prim . fxnegative?) (x5010 core-prim . fxmod0) (x500f core-prim . fxmod) (x500e core-prim . fxmin) (x500d core-prim . fxmax) (x500c core-prim . fxlength) (x500b core-prim . fxior) (x500a core-prim . fxif) (x5009 core-prim . fxfirst-bit-set) (x5008 core-prim . fxeven?) (x5007 core-prim . fxdiv0-and-mod0) (x5006 core-prim . fxdiv0) (x5005 core-prim . fxdiv-and-mod) (x5004 core-prim . fxdiv) (x5003 core-prim . fxcopy-bit-field) (x5002 core-prim . fxcopy-bit) (x5001 core-prim . fxbit-set?) (x5000 core-prim . fxbit-field) (x4fff core-prim . fxbit-count) (x4ffe core-prim . fxarithmetic-shift-right) (x4ffd core-prim . fxarithmetic-shift-left) (x4ffc core-prim . fxarithmetic-shift) (x4ffb core-prim . fxand) (x4ffa core-prim . fx>?) (x4ff9 core-prim . fx>=?) (x4ff8 core-prim . fx=?) (x4ff7 core-prim . fx<?) (x4ff6 core-prim . fx<=?) (x4ff5 core-prim . fx-/carry) (x4ff4 core-prim . fx-) (x4ff3 core-prim . fx+/carry) (x4ff2 core-prim . fx+) (x4ff1 core-prim . fx*/carry) (x4ff0 core-prim . fx*) (x4fef core-prim . greatest-fixnum) (x4fee core-prim . least-fixnum) (x4fed core-prim . fixnum-width) (x4fec core-prim . fixnum?) (x4feb core-prim . bitwise-rotate-bit-field) (x4fea core-prim . bitwise-reverse-bit-field) (x4fe9 core-prim . bitwise-length) (x4fe8 core-prim . bitwise-if) (x4fe7 core-prim . bitwise-first-bit-set) (x4fe6 core-prim . bitwise-copy-bit-field) (x4fe5 core-prim . bitwise-copy-bit) (x4fe4 core-prim . bitwise-bit-set?) (x4fe3 core-prim . bitwise-bit-field) (x4fe2 core-prim . bitwise-bit-count) (x4fe1 core-prim . bitwise-xor) (x4fe0 core-prim . bitwise-ior) (x4fdf core-prim . bitwise-and) (x4fde core-prim . bitwise-not) (x4fdd core-prim . bitwise-arithmetic-shift-right) (x4fdc core-prim . bitwise-arithmetic-shift-left) (x4fdb core-prim . bitwise-arithmetic-shift) (x4fda core-prim . zero?) (x4fd9 core-prim . vector?) (x4fd8 core-prim . vector-set!) (x4fd7 core-prim . vector-ref) (x4fd6 core-prim . vector-map) (x4fd5 core-prim . vector-length) (x4fd4 core-prim . vector-for-each) (x4fd3 core-prim . vector-fill!) (x4fd2 core-prim . vector->list) (x4fd1 core-prim . vector) (x4fd0 core-prim . values) (x4fcf core-prim . truncate) (x4fce core-prim . tan) (x4fcd core-prim . symbol?) (x4fcc core-prim . symbol=?) (x4fcb core-prim . symbol->string) (x4fca core-prim . substring) (x4fc9 core-prim . string?) (x4fc8 core-prim . string>?) (x4fc7 core-prim . string>=?) (x4fc6 core-prim . string=?) (x4fc5 core-prim . string<?) (x4fc4 core-prim . string<=?) (x4fc3 core-prim . string-ref) (x4fc2 core-prim . string-length) (x4fc1 core-prim . string-for-each) (x4fc0 core-prim . string-copy) (x4fbf core-prim . string-append) (x4fbe core-prim . string->symbol) (x4fbd core-prim . string->number) (x4fbc core-prim . string->list) (x4fbb core-prim . string) (x4fba core-prim . sqrt) (x4fb9 core-prim . sin) (x4fb8 core-prim . round) (x4fb7 core-prim . reverse) (x4fb6 core-prim . real?) (x4fb5 core-prim . real-valued?) (x4fb4 core-prim . real-part) (x4fb3 core-prim . rationalize) (x4fb2 core-prim . rational?) (x4fb1 core-prim . rational-valued?) (x4fb0 core-prim . procedure?) (x4faf core-prim . positive?) (x4fae core-prim . pair?) (x4fad core-prim . odd?) (x4fac core-prim . numerator) (x4fab core-prim . number?) (x4faa core-prim . number->string) (x4fa9 core-prim . null?) (x4fa8 core-prim . not) (x4fa7 core-prim . negative?) (x4fa6 core-prim . nan?) (x4fa5 core-prim . min) (x4fa4 core-prim . max) (x4fa3 core-prim . map) (x4fa2 core-prim . make-vector) (x4fa1 core-prim . make-string) (x4fa0 core-prim . make-rectangular) (x4f9f core-prim . make-polar) (x4f9e core-prim . magnitude) (x4f9d core-prim . log) (x4f9c core-prim . list?) (x4f9b core-prim . list-tail) (x4f9a core-prim . list-ref) (x4f99 core-prim . list->vector) (x4f98 core-prim . list->string) (x4f97 core-prim . list) (x4f96 core-prim . length) (x4f95 core-prim . lcm) (x4f94 core-prim . integer?) (x4f93 core-prim . integer-valued?) (x4f92 core-prim . integer->char) (x4f91 core-prim . infinite?) (x4f90 core-prim . inexact?) (x4f8f core-prim . inexact) (x4f8e core-prim . imag-part) (x4f8d core-prim . gcd) (x4f8c core-prim . for-each) (x4f8b core-prim . floor) (x4f8a core-prim . finite?) (x4f89 core-prim . expt) (x4f88 core-prim . exp) (x4f87 core-prim . exact?) (x4f86 core-prim . exact-integer-sqrt) (x4f85 core-prim . exact) (x4f84 core-prim . even?) (x4f83 core-prim . error) (x4f82 core-prim . eqv?) (x4f81 core-prim . equal?) (x4f80 core-prim . eq?) (x4f7f core-prim . dynamic-wind) (x4f7e core-prim . div0-and-mod0) (x4f7d core-prim . mod0) (x4f7c core-prim . div0) (x4f7b core-prim . div-and-mod) (x4f7a core-prim . mod) (x4f79 core-prim . div) (x4f78 core-prim . denominator) (x4f77 core-prim . cos) (x4f76 core-prim . cons) (x4f75 core-prim . complex?) (x4f74 core-prim . char?) (x4f73 core-prim . char>?) (x4f72 core-prim . char>=?) (x4f71 core-prim . char=?) (x4f70 core-prim . char<?) (x4f6f core-prim . char<=?) (x4f6e core-prim . char->integer) (x4f6d core-prim . ceiling) (x4f6c core-prim . call-with-values) (x4f6b core-prim . call/cc) (x4f6a core-prim . call-with-current-continuation) (x4f69 core-prim . cddddr) (x4f68 core-prim . cdddar) (x4f67 core-prim . cddadr) (x4f66 core-prim . cddaar) (x4f65 core-prim . cdaddr) (x4f64 core-prim . cdadar) (x4f63 core-prim . cdaadr) (x4f62 core-prim . cdaaar) (x4f61 core-prim . cadddr) (x4f60 core-prim . caddar) (x4f5f core-prim . cadadr) (x4f5e core-prim . cadaar) (x4f5d core-prim . caaddr) (x4f5c core-prim . caadar) (x4f5b core-prim . caaadr) (x4f5a core-prim . caaaar) (x4f59 core-prim . cdddr) (x4f58 core-prim . cddar) (x4f57 core-prim . cdadr) (x4f56 core-prim . cdaar) (x4f55 core-prim . caddr) (x4f54 core-prim . cadar) (x4f53 core-prim . caadr) (x4f52 core-prim . caaar) (x4f51 core-prim . cddr) (x4f50 core-prim . cdar) (x4f4f core-prim . cadr) (x4f4e core-prim . caar) (x4f4d core-prim . cdr) (x4f4c core-prim . car) (x4f4b core-prim . boolean?) (x4f4a core-prim . boolean=?) (x4f49 core-prim . atan) (x4f48 core-prim . assertion-violation) (x2fdc core-prim . assertion-error) (x4f47 core-prim . asin) (x4f46 core-prim . apply) (x4f45 core-prim . append) (x4f44 core-prim . angle) (x4f43 core-prim . acos) (x4f42 core-prim . abs) (x4f41 core-prim . /) (x4f40 core-prim . *) (x4f3f core-prim . -) (x4f3e core-prim . +) (x4f3d core-prim . >=) (x4f3c core-prim . >) (x4f3b core-prim . =) (x4f3a core-prim . <=) (x4f39 core-prim . <) (x4f38 core-prim . library) (x4f37 $core-rtd &no-nans-rtd &no-nans-rcd) (x4f36 $core-rtd &no-infinities-rtd &no-infinities-rcd) (x4f35 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (x4f34 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (x4f33 $core-rtd &i/o-port-rtd &i/o-port-rcd) (x4f32 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (x4f31 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (x4f30 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (x4f2f $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (x4f2e $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (x4f2d $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (x4f2c $core-rtd &i/o-write-rtd &i/o-write-rcd) (x4f2b $core-rtd &i/o-read-rtd &i/o-read-rcd) (x4f2a $core-rtd &i/o-rtd &i/o-rcd) (x4f29 $core-rtd &undefined-rtd &undefined-rcd) (x4f28 $core-rtd &syntax-rtd &syntax-rcd) (x4f27 $core-rtd &lexical-rtd &lexical-rcd) (x4f26 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (x4f25 $core-rtd &non-continuable-rtd &non-continuable-rcd) (x4f24 $core-rtd &who-rtd &who-rcd) (x4f23 $core-rtd &irritants-rtd &irritants-rcd) (x4f22 $core-rtd &assertion-rtd &assertion-rcd) (x4f21 $core-rtd &violation-rtd &violation-rcd) (x4f20 $core-rtd &error-rtd &error-rcd) (x4f1f $core-rtd &serious-rtd &serious-rcd) (x4f1e $core-rtd &warning-rtd &warning-rcd) (x4f1d $core-rtd &message-rtd &message-rcd) (x4f1c $core-rtd &condition-rtd &condition-rcd) (x4f1b macro . define-condition-type) (x4f1a macro . define-enumeration) (x4f19 macro . define-record-type) (x4f18 macro . parent-rtd) (x4f17 macro . nongenerative) (x4f16 macro . opaque) (x4f15 macro . sealed) (x4f14 macro . protocol) (x4f13 macro . parent) (x4f12 macro . immutable) (x4f11 macro . mutable) (x4f10 macro . fields) (x4f0f macro . error-handling-mode) (x4f0e macro . file-options) (x4f0d macro . buffer-mode) (x4f0c macro . eol-style) (x4f0b macro . guard) (x4f0a macro . trace-define) (x4f09 macro . trace-lambda) (x4f08 macro . unsyntax-splicing) (x4f07 macro . unsyntax) (x4f06 macro . unquote-splicing) (x4f05 macro . unquote) (x4f04 macro . _) (x4f03 macro . else) (x4f02 macro . =>) (x4f01 macro . ...) (x4f00 macro . assert) (x4eff macro . endianness) (x4efe macro . delay) (x4efd macro . time) (x4efc macro . do) (x4efb macro . cond) (x4efa macro . let*) (x4ef9 macro . let) (x4ef8 macro . let*-values) (x4ef7 macro . let-values) (x4ef6 macro . identifier-syntax) (x4ef5 macro . with-syntax) (x4ef4 macro . quasisyntax) (x4ef3 macro . quasiquote) (x4ef2 macro . syntax-rules) (x4ef1 macro . include) (x4ef0 macro . define-struct) (x4eef core-macro . record-constructor-descriptor) (x4eee core-macro . record-type-descriptor) (x4eed macro . case) (x4eec macro . parameterize) (x4eeb macro . unless) (x4eea macro . when) (x4ee9 core-macro . or) (x4ee8 core-macro . and) (x4ee7 core-macro . if) (x4ee6 core-macro . letrec*) (x4ee5 core-macro . letrec) (x4ee4 core-macro . type-descriptor) (x4ee3 core-macro . case-lambda) (x4ee2 core-macro . lambda) (x4ee1 core-macro . syntax) (x4ee0 core-macro . syntax-case) (x4edf core-macro . quote) (x4ede core-macro . foreign-call) (x4edd letrec-syntax) (x4edc let-syntax) (x4edb set!) (x4eda import) (x4ed9 begin) (x4ed8 module) (x4ed7 define-syntax) (x4ed6 define)) values values '#f '#f '#f '#f) (x2b11@x29b0@install-library 'x5209 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . x51e8) (eval-core . x51e7) (set-symbol-value! . x51e6) (symbol-value . x51e5) (gensym . x51e4) (void . x51e3)) '() values values '#f '#f '#f '#f) (x2b11@x29b0@install-library 'x520a '(mosh) '() '() '() '() '((set-symbol-value! . x51e6) (symbol-value . x51e5) (regexp? . x51e1) (read-line . x51e0) (ungensym . x51df) (alist->eq-hash-table . x51de) (assoc-ref . x51dd) (print . x51dc) (format . x51db) (host-os . x51da) (library-path . x298f) (standard-library-path . x51d9) (file-newer? . x51d8) (stat-mtime . x51d7) (digit->integer . x51d3) (call-with-string-input-port . x51d2) (call-with-string-io . x51d1) (string-split . x51d0) (bytevector-for-each . x51cf) (string->regexp . x51ce) (rxmatch . x51cd) (regexp-replace-all . x51cc) (hashtable-for-each . x51cb) (set-current-directory! . x51c6) (expand-path . x51c5) (current-directory . x51c4) (p . x5192) (get-timeofday . x517f) (get-command-line . x517e) (sys-display . x517d) (whereis . x517c) (register . x517b) (vm-join! . x517a) (vm-set-value! . x5179) (vm? . x5178) (main-vm? . x5177) (vm-eval . x5176) (vm-self . x5175) (vm-start! . x5174) (make-vm . x5173) (mutex-try-lock! . x5172) (mutex-unlock! . x5171) (mutex-lock! . x5170) (mutex? . x516f) (make-mutex . x516e) (condition-variable-notify-all! . x516d) (condition-variable-notify! . x516c) (condition-variable-wait! . x516b) (make-condition-variable . x516a) (mosh-executable-path . x5169) (make-file-options . x5168) (source-info . x5167) (make-compiler-instruction . x5166) (make-instruction . x5165) (set-source-info! . x5164) (bignum? . x5163) (fast-equal? . x5162) (fasl-read . x5161) (fasl-write . x5160) (time-usage . x515f) (os-constant . x515e) (time . x4efd) (include . x4ef1)) '() values values '#f '#f '#f '#f) (x2b11@x29b0@install-library 'x520b '(system) '() '() '() '() '((write-to-file . x51d6) (file->list . x51d5) (file->string . x51d4) (call-process . x51ca) (local-tz-offset . x51c9) (microseconds . x51c8) (directory-list . x51c7) (expand-path . x51c5) (%spawn . x51c3) (%waitpid . x51c2) (pointer-ref-c-int64 . x51c1) (pointer-ref-c-int32 . x51c0) (pointer-ref-c-int16 . x51bf) (pointer-ref-c-int8 . x51be) (pointer-ref-c-uint64 . x51bd) (pointer-ref-c-uint32 . x51bc) (pointer-ref-c-uint16 . x51bb) (pointer-ref-c-uint8 . x51ba) (pointer-set-c-int64! . x51b9) (pointer-set-c-int32! . x51b8) (pointer-set-c-int16! . x51b7) (pointer-set-c-int8! . x51b6) (pointer-set-c-pointer! . x51b5) (pointer-set-c-double! . x51b4) (pointer-set-c-float! . x51b3) (pointer-set-c-long-long! . x51b2) (pointer-set-c-long! . x51b1) (pointer-set-c-int! . x51b0) (pointer-set-c-short! . x51af) (pointer-set-c-char! . x51ae) (pointer-ref-c-pointer . x51ad) (pointer-ref-c-double . x51ac) (pointer-ref-c-float . x51ab) (pointer-ref-c-unsigned-long-long . x51aa) (pointer-ref-c-signed-long-long . x51a9) (pointer-ref-c-unsigned-long . x51a8) (pointer-ref-c-signed-long . x51a7) (pointer-ref-c-unsigned-int . x51a6) (pointer-ref-c-signed-int . x51a5) (pointer-ref-c-unsigned-short . x51a4) (pointer-ref-c-signed-short . x51a3) (pointer-ref-c-unsigned-char . x51a2) (pointer-ref-c-signed-char . x51a1) (pointer->integer . x51a0) (integer->pointer . x519f) (pointer? . x519e) (%ffi-supported? . x519d) (%ffi-pointer->string . x519c) (%ffi-call->string-or-zero . x519b) (%ffi-call->double . x519a) (%ffi-call->void* . x5199) (%ffi-call->void . x5198) (%ffi-call->int . x5197) (%ffi-lookup . x5196) (%ffi-open . x5195) (%fork . x5194) (%pipe . x5193) (open-output-string . x5191) (get-output-string . x5190) (file-stat-ctime . x518f) (file-stat-atime . x518e) (file-stat-mtime . x518d) (file-size-in-bytes . x518c) (file-writable? . x518b) (file-executable? . x518a) (file-readable? . x5189) (file-regular? . x5188) (file-symbolic-link? . x5187) (file-directory? . x5186) (create-symbolic-link . x5185) (rename-file . x5184) (delete-directory . x5183) (create-directory . x5182) (get-environment-variables . x5181) (get-environment-variable . x5180) (make-parameter . x27c2) (socket-port . x515d) (socket-shutdown . x515c) (socket-close . x515b) (socket-send . x515a) (socket-recv! . x5159) (socket-recv . x5158) (make-server-socket . x5157) (make-client-socket . x5156) (socket-accept . x5155) (socket? . x5154) (parameterize . x4eec)) '() values values '#f '#f '#f '#f))
((lambda (x4d9f@add-library-path! x4da1@parse-and-add-library-path x4da3@for-each-with-index x4da5@rpad x4da7@condition-printer x4da9@record->field-alist x4dab@map-with-index x4dad@repl x4daf@trace-printer x4db1@command-line x4db3@local-library-path x4db5@load/args x4db7@load x4db9@ironscheme-build x4dbb@eval-top-level x4dbd@compile-system-libraries x4dbf@compile x4dc1@compile->closure x4dc3@pre-compile-r6rs-file x4dc5@load-r6rs-top-level x4dc7@load-r6rs-top-level-sexp) (begin (set! x4d9f@add-library-path! (lambda (x4dea@path) (x2b01@x2990@library-path (append (x2b01@x2990@library-path) (list x4dea@path))))) (set! x4da1@parse-and-add-library-path (lambda (x4dec@paths x4ded@message) ((lambda (x4df0@t) (if x4df0@t ((lambda (x4df2@paths) (for-each (lambda (x4df4@path) (if (file-exists? x4df4@path) (x4d9f@add-library-path! (expand-path x4df4@path)) (format (current-error-port) x4ded@message x4df4@path))) (string-split x4df2@paths '#\:))) x4df0@t) (void))) x4dec@paths))) (set! x4da3@for-each-with-index (lambda (x4df6@proc x4df7@lst) (letrec ((x4dfa@loop (lambda (x4dfc@i x4dfd@lst) (if (null? x4dfd@lst) (if '#f '#f (void)) (begin (x4df6@proc x4dfc@i (car x4dfd@lst)) (x4dfa@loop (+ x4dfc@i '1) (cdr x4dfd@lst))))))) (x4dfa@loop '1 x4df7@lst)))) (set! x4da5@rpad (lambda (x4e00@str x4e01@pad x4e02@n) ((lambda (x4e06@rest) ((letrec ((x4e08@loop (lambda (x4e0a@rest x4e0b@ret) (if (<= x4e0a@rest '0) x4e0b@ret (x4e08@loop (- x4e0a@rest '1) (string-append x4e0b@ret x4e01@pad)))))) x4e08@loop) x4e06@rest (format '"~a" x4e00@str))) (- x4e02@n (string-length (format '"~a" x4e00@str)))))) (set! x4da7@condition-printer (lambda (x4e0e@e x4e0f@port) ((lambda (x4e13@max-condition-len) (begin (set! x4e13@max-condition-len (apply max (map (lambda (x4e24@c) (string-length (symbol->string (record-type-name (record-rtd x4e24@c))))) (simple-conditions x4e0e@e)))) (begin (display '" Condition components:\n" x4e0f@port) (x4da3@for-each-with-index (lambda (x4e14@i x4e15@x) ((lambda (x4e18@rtd x4e19@fields-alist) (begin (format x4e0f@port '" ~d. ~a" x4e14@i (x4da5@rpad (symbol->string (record-type-name x4e18@rtd)) '" " x4e13@max-condition-len)) (if (null? x4e19@fields-alist) (newline x4e0f@port) (void)) ((letrec ((x4e1c@loop (lambda (x4e1e@first x4e1f@fields-alist) (if (null? x4e1f@fields-alist) '() ((lambda (x4e22@field) (begin (if (not x4e1e@first) (display (x4da5@rpad '"" '" " (+ '4 x4e13@max-condition-len)) x4e0f@port) (void)) (display '"       " x4e0f@port) (display (car x4e22@field) x4e0f@port) (display '": " x4e0f@port) (write (cdr x4e22@field) x4e0f@port) (newline x4e0f@port) (x4e1c@loop '#f (cdr x4e1f@fields-alist)))) (car x4e1f@fields-alist)))))) x4e1c@loop) '#t x4e19@fields-alist))) (record-rtd x4e15@x) (x4da9@record->field-alist x4e15@x))) (simple-conditions x4e0e@e))))) '#f))) (set! x4da9@record->field-alist (lambda (x4e26@r) ((lambda (x4e29@ref) (begin (set! x4e29@ref (lambda (x4e34@rtd x4e35@i x4e36@x) ((lambda (x4e3a@val) (if (symbol? x4e3a@val) (ungensym x4e3a@val) x4e3a@val)) ((record-accessor x4e34@rtd x4e35@i) x4e36@x)))) ((letrec ((x4e2a@loop (lambda (x4e2c@ret x4e2d@rtd) (if x4e2d@rtd (x4e2a@loop (append x4e2c@ret (x4dab@map-with-index (lambda (x4e30@i x4e31@field) (cons x4e31@field (x4e29@ref x4e2d@rtd x4e30@i x4e26@r))) (vector->list (record-type-field-names x4e2d@rtd)))) (record-type-parent x4e2d@rtd)) x4e2c@ret)))) x4e2a@loop) '() (record-rtd x4e26@r)))) '#f))) (set! x4dab@map-with-index (lambda (x4e3c@proc x4e3d@lst) ((letrec ((x4e40@loop (lambda (x4e42@i x4e43@lst x4e44@ret) (if (null? x4e43@lst) (reverse x4e44@ret) (x4e40@loop (+ x4e42@i '1) (cdr x4e43@lst) (cons (x4e3c@proc x4e42@i (car x4e43@lst)) x4e44@ret)))))) x4e40@loop) '0 x4e3d@lst '()))) (set! x4dad@repl (lambda x4e48@x ((lambda (x4e4b@rec) (begin (set! x4e4b@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (x4e4e@x4e4c) (lambda () (with-exception-handler (lambda (x4e50@e) ((call/cc (lambda (x4e52@x4e4d) (x4e4e@x4e4c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? x4e50@e) (x4da7@condition-printer x4e50@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" x4e50@e))) (x4e52@x4e4d (lambda () (raise-continuable x4e50@e)))))))))) (lambda () ((letrec ((x4e54@loop (lambda (x4e56@line x4e57@accum) ((lambda (x4e5b@parentheses-ok? x4e5d@eval-string-print) (begin (set! x4e5b@parentheses-ok? (lambda (x4e62@text) ((letrec ((x4e64@loop (lambda (x4e66@chars x4e67@p0 x4e68@p1) (if (null? x4e66@chars) (= '0 x4e67@p0 x4e68@p1) ((lambda (x4e6c@t) (if (memv x4e6c@t '(#\()) (x4e64@loop (cdr x4e66@chars) (+ x4e67@p0 '1) x4e68@p1) (if (memv x4e6c@t '(#\))) (x4e64@loop (cdr x4e66@chars) (- x4e67@p0 '1) x4e68@p1) (if (memv x4e6c@t '(#\[)) (x4e64@loop (cdr x4e66@chars) x4e67@p0 (+ x4e68@p1 '1)) (if (memv x4e6c@t '(#\])) (x4e64@loop (cdr x4e66@chars) x4e67@p0 (- x4e68@p1 '1)) (x4e64@loop (cdr x4e66@chars) x4e67@p0 x4e68@p1)))))) (car x4e66@chars)))))) x4e64@loop) (string->list x4e62@text) '0 '0))) (set! x4e5d@eval-string-print (lambda (x4e60@text) (if (not (or (string=? '"\n" x4e60@text) (= '0 (string-length x4e60@text)))) (write (x4dbb@eval-top-level (call-with-port (open-string-input-port x4e60@text) read))) (void)))) (if (eof-object? x4e56@line) (begin (x4e5d@eval-string-print x4e57@accum) (exit)) ((lambda (x4e5e@current) (if (x4e5b@parentheses-ok? x4e5e@current) (x4e5d@eval-string-print x4e5e@current) (x4e54@loop (get-line (current-input-port)) x4e5e@current))) (string-append x4e57@accum x4e56@line))))) '#f '#f)))) x4e54@loop) (get-line (current-input-port)) '""))))))) (newline) (x4e4b@rec)))) (x4e4b@rec))) '#f))) (set! x4daf@trace-printer (x2899@x27c3@make-parameter write)) (set! x4db1@command-line (x2899@x27c3@make-parameter (get-command-line))) (set! x4db3@local-library-path (lambda (x4e6e@filename) (x2b01@x2990@library-path))) (set! x4db5@load/args (lambda (x4e70@filename . x4e72@args) (begin (apply x4dc5@load-r6rs-top-level x4e70@filename 'load x4e72@args) (void)))) (set! x4db7@load (lambda (x4e74@filename) (begin (apply x4dc5@load-r6rs-top-level x4e74@filename 'load (x4db1@command-line)) (void)))) (set! x4db9@ironscheme-build (lambda () (x4db7@load '"ironscheme-buildscript.ss"))) (set! x4dbb@eval-top-level (lambda (x4e76@x) (x49cb@x2fc3@eval x4e76@x (x49e1@x2fef@interaction-environment)))) (set! x4dbd@compile-system-libraries (lambda () (x4dbb@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! x4dbf@compile (lambda (x4e78@filename) (x4dc5@load-r6rs-top-level x4e78@filename 'compile))) (set! x4dc1@compile->closure (lambda (x4e7a@filename) (x4dc5@load-r6rs-top-level x4e7a@filename 'closure))) (set! x4dc3@pre-compile-r6rs-file (lambda (x4e7c@filename) (x4dc5@load-r6rs-top-level x4e7c@filename 'compile))) (set! x4dc5@load-r6rs-top-level (lambda (x4e7e@filename x4e7f@how . x4e82@args) ((lambda (x4e88@x4e85 x4e89@x4e87) ((lambda (x4e8c@swap) (dynamic-wind x4e8c@swap (lambda () ((lambda (x4e8e@x*) ((lambda (x4e90@t) (if (memv x4e90@t '(closure)) (x49e0@x2fed@pre-compile-r6rs-top-level x4e8e@x*) (if (memv x4e90@t '(load)) ((lambda (x4e96@x4e93 x4e97@x4e95) ((lambda (x4e9a@swap) (dynamic-wind x4e9a@swap (lambda () ((x49df@x2feb@compile-r6rs-top-level x4e8e@x*))) x4e9a@swap)) (lambda () ((lambda (x4e9c@t) (begin (x4e96@x4e93 x4e97@x4e95) (set! x4e97@x4e95 x4e9c@t))) (x4e96@x4e93))))) x4db1@command-line (cons x4e7e@filename (car x4e82@args))) (if (memv x4e90@t '(compile)) (begin (x49df@x2feb@compile-r6rs-top-level x4e8e@x*) (x2b05@x2998@serialize-all x2894@x27b9@serialize-library x28ee@x28a7@compile-core-expr)) (if '#f '#f (void)))))) x4e7f@how)) (with-input-from-file x4e7e@filename (lambda () ((letrec ((x4e9e@f (lambda () ((lambda (x4ea0@x) (if (eof-object? x4ea0@x) '() (cons x4ea0@x (x4e9e@f)))) (x288c@x27a9@read-annotated))))) x4e9e@f)))))) x4e8c@swap)) (lambda () ((lambda (x4ea2@t) (begin (x4e88@x4e85 x4e89@x4e87) (set! x4e89@x4e87 x4ea2@t))) (x4e88@x4e85))))) x2b01@x2990@library-path (x4db3@local-library-path x4e7e@filename)))) (set! x4dc7@load-r6rs-top-level-sexp (lambda (x4ea4@import-spec x4ea5@thunk) ((lambda (x4eac@x4ea9 x4ead@x4eab) ((lambda (x4eb0@swap) (dynamic-wind x4eb0@swap (lambda () ((lambda (x4eb6@x4eb3 x4eb7@x4eb5) ((lambda (x4eba@swap) (dynamic-wind x4eba@swap (lambda () ((x49df@x2feb@compile-r6rs-top-level (list (cons 'import x4ea4@import-spec) (list x4ea5@thunk))))) x4eba@swap)) (lambda () ((lambda (x4ebc@t) (begin (x4eb6@x4eb3 x4eb7@x4eb5) (set! x4eb7@x4eb5 x4ebc@t))) (x4eb6@x4eb3))))) x4db1@command-line '())) x4eb0@swap)) (lambda () ((lambda (x4ebe@t) (begin (x4eac@x4ea9 x4ead@x4eab) (set! x4ead@x4eab x4ebe@t))) (x4eac@x4ea9))))) x2b01@x2990@library-path (x4db3@local-library-path '"")))) (begin (set! x4ed4@x4dc7@load-r6rs-top-level-sexp x4dc7@load-r6rs-top-level-sexp) (set! x4ed3@x4dc5@load-r6rs-top-level x4dc5@load-r6rs-top-level) (set! x4ed2@x4dc3@pre-compile-r6rs-file x4dc3@pre-compile-r6rs-file) (set! x4ed1@x4dc1@compile->closure x4dc1@compile->closure) (set! x4ed0@x4dbf@compile x4dbf@compile) (set! x4ecf@x4dbd@compile-system-libraries x4dbd@compile-system-libraries) (set! x4ece@x4dbb@eval-top-level x4dbb@eval-top-level) (set! x4ecd@x4db9@ironscheme-build x4db9@ironscheme-build) (set! x4ecc@x4db7@load x4db7@load) (set! x4ecb@x4db5@load/args x4db5@load/args) (set! x4eca@x4db3@local-library-path x4db3@local-library-path) (set! x4ec9@x4db1@command-line x4db1@command-line) (set! x4ec8@x4daf@trace-printer x4daf@trace-printer) (set! x4ec7@x4dad@repl x4dad@repl) (set! x4ec6@x4dab@map-with-index x4dab@map-with-index) (set! x4ec5@x4da9@record->field-alist x4da9@record->field-alist) (set! x4ec4@x4da7@condition-printer x4da7@condition-printer) (set! x4ec3@x4da5@rpad x4da5@rpad) (set! x4ec2@x4da3@for-each-with-index x4da3@for-each-with-index) (set! x4ec1@x4da1@parse-and-add-library-path x4da1@parse-and-add-library-path) (set! x4ec0@x4d9f@add-library-path! x4d9f@add-library-path!) (x2b06@x299a@current-precompiled-library-loader x2895@x27bb@load-serialized-library) (set-symbol-value! 'load x4db7@load) (set-symbol-value! 'pre-compile-r6rs-file x4dc3@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs x4dbb@eval-top-level) (set-symbol-value! 'int-env-syms x49c2@x2fb1@interaction-environment-symbols) (set-symbol-value! 'expanded2core x28ed@x28a5@expanded->core) (set-symbol-value! 'trace-printer x4daf@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (x4dc8@c) (condition (x4cfc@x4b06@make-non-continuable-violation) (x4cf2@x4aed@make-who-condition 'raise) (x4cb6@x4a4e@make-message-condition '"returned from non-continuable exception") (x4ce8@x4ad2@make-irritants-condition (list x4dc8@c))))) (x4da1@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (x4da1@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (x4d9f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (x4d9f@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (x4d9f@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (x4dca@prefix) (x2b02@x2992@library-extensions (x4dca@prefix '".mosh" (x2b02@x2992@library-extensions)))) (lambda (x4dcc@ext x4dcd@ls) (append (map (lambda (x4dd0@x) (string-append x4dcc@ext x4dd0@x)) x4dcd@ls) x4dcd@ls))) ((lambda (x4dd2@args x4dd3@port) ((lambda (x4dd7@ref) (begin (set! x4dd7@ref (lambda (x4de2@rtd x4de3@i x4de4@x) ((lambda (x4de8@val) (if (symbol? x4de8@val) (ungensym x4de8@val) x4de8@val)) ((record-accessor x4de2@rtd x4de3@i) x4de4@x)))) (with-exception-handler (lambda (x4dd8@c) (if (condition? x4dd8@c) (x4da7@condition-printer x4dd8@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" x4dd8@c))) (lambda () (if ((call/cc (lambda (x4ddc@x4dda) (lambda () (with-exception-handler (lambda (x4dde@c) ((call/cc (lambda (x4de0@x4ddb) (x4ddc@x4dda (lambda () (if '#t '#f (x4de0@x4ddb (lambda () (raise-continuable x4dde@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (x4dc7@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? x4dd2@args) (x4dad@repl) (x4dc5@load-r6rs-top-level (car x4dd2@args) 'load (cdr x4dd2@args)))))))) '#f)) (x4db1@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
