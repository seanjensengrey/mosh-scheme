;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (P906@make-gensym-counter P908@gen-sym-prefix P910@gen-sym-counter P912@gensym P914@read-annotated P916@annotation-stripped P918@annotation? P920@annotation-source P922@annotation-expression P924@scm->fasl P926@fasl-save P928@fasl-load P930@serialize-library P932@load-serialized-library P934@make-record-printer P936@compile-core P938@read-library-source-file P940@make-parameter P1040@file-options-spec) (begin (set! P906@make-gensym-counter (lambda (P1041@i) ((lambda (P1044@inc) (begin (set! P1044@inc (lambda () (begin (set! P1041@i (+ P1041@i '1)) P1041@i))) P1044@inc)) '#f))) (set! P908@gen-sym-prefix ((lambda (P1045@v) (if P1045@v (string->symbol P1045@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! P910@gen-sym-counter (P906@make-gensym-counter '0)) (set! P912@gensym (lambda P1047@x (string->symbol (if (null? P1047@x) (format '"~a~a" P908@gen-sym-prefix (P910@gen-sym-counter)) (format '"~a~a@~a" P908@gen-sym-prefix (P910@gen-sym-counter) (car P1047@x)))))) (set! P914@read-annotated read) (set! P916@annotation-stripped (lambda (P1049@x) (P922@annotation-expression P1049@x))) (set! P918@annotation? (lambda (P1051@x) (source-info P1051@x))) (set! P920@annotation-source (lambda (P1053@x) (source-info P1053@x))) (set! P922@annotation-expression (lambda (P1055@x) (if (pair? P1055@x) (cons (car P1055@x) (cdr P1055@x)) (display '"line:46\n")))) (set! P924@scm->fasl (lambda (P1057@filename) (string-append P1057@filename '".fasl"))) (set! P926@fasl-save (lambda (P1059@filename P1060@obj) (call-with-port (open-file-output-port P1059@filename) (lambda (P1063@port) ((symbol-value 'fasl-write!) P1060@obj P1063@port))))) (set! P928@fasl-load (lambda (P1065@filename) (call-with-port (open-file-input-port P1065@filename) (symbol-value 'fasl-read!)))) (set! P930@serialize-library (lambda (P1067@filename P1068@obj) (begin (format '#t '"serialize-library ~a\n..." P1067@filename) ((lambda (P1071@expanded2core) ((lambda (P1073@compile) ((lambda (P1075@code) ((lambda (P1077@pivot) ((lambda (P1079@visit) ((lambda () (begin (set-car! P1077@pivot P1079@visit) ((lambda (P1081@pivot) ((lambda (P1083@invoke) ((lambda () (set-car! P1081@pivot P1083@invoke)))) (P1073@compile (P1071@expanded2core (car P1081@pivot))))) (cdr P1077@pivot)))))) (P1073@compile (P1071@expanded2core (car P1077@pivot))))) (cddddr (cddddr P1075@code)))) P1068@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (P1085@fasl-file) (begin (if (file-exists? P1085@fasl-file) (delete-file P1085@fasl-file) (void)) ((call/cc (lambda (P1089@P1087) (lambda () (with-exception-handler (lambda (P1091@c) ((call/cc (lambda (P1093@P1088) (P1089@P1087 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " P1067@filename) (if (file-exists? P1085@fasl-file) (delete-file P1085@fasl-file) (void)) '#f) (P1093@P1088 (lambda () (raise-continuable P1091@c)))))))))) (lambda () (begin (P926@fasl-save P1085@fasl-file P1068@obj) (display '"OK\n")))))))))) (P924@scm->fasl P1067@filename))))) (set! P932@load-serialized-library (lambda (P1095@filename P1096@obj) ((lambda (P1099@fasl-file) (if (and (file-exists? P1099@fasl-file) ((symbol-value 'file-newer?) P1099@fasl-file P1095@filename)) ((lambda (P1101@expanded2core) ((lambda (P1103@eval-compiled-core) ((lambda (P1105@code) ((lambda (P1107@pivot) ((lambda (P1109@visit) ((lambda (P1111@visit-proc) ((lambda () (begin (set-car! P1107@pivot P1111@visit-proc) ((lambda (P1113@pivot) ((lambda (P1115@invoke) ((lambda () (begin (set-car! P1113@pivot (lambda () (P1103@eval-compiled-core P1115@invoke))) (apply P1096@obj P1105@code))))) (car P1113@pivot))) (cdr P1107@pivot)) '#t)))) (lambda () (P1103@eval-compiled-core P1109@visit)))) (car P1107@pivot))) (cddddr (cddddr P1105@code)))) (P928@fasl-load P1099@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (P924@scm->fasl P1095@filename)))) (set! P934@make-record-printer (lambda (P1117@name P1118@printer) (lambda P1121@x (begin (display '"record printer") (for-each display P1121@x))))) (set! P936@compile-core (lambda P1123@x (apply error 'comile-core '"not implementated" P1123@x))) (set! P938@read-library-source-file (lambda (P1125@file-name) (with-input-from-file P1125@file-name P914@read-annotated))) (set! P940@make-parameter (lambda P1141 ((lambda (P1142) (if (= P1142 '1) (apply (lambda (P1127@x) (P940@make-parameter P1127@x (lambda (P1129@x) P1129@x))) P1141) (if (= P1142 '2) (apply (lambda (P1131@x P1132@fender) ((lambda (P1135@x) (lambda P1139 ((lambda (P1140) (if (= P1140 '0) (apply (lambda () P1135@x) P1139) (if (= P1140 '1) (apply (lambda (P1137@v) (set! P1135@x (P1132@fender P1137@v))) P1139) (error 'apply '"invalid arg count")))) (length P1139)))) (P1132@fender P1131@x))) P1141) (error 'apply '"invalid arg count")))) (length P1141)))) (set! P1040@file-options-spec (lambda (P1143@x) P1143@x)) (begin (set! P1163@P1040@file-options-spec P1040@file-options-spec) (set! P1162@P940@make-parameter P940@make-parameter) (set! P1161@P938@read-library-source-file P938@read-library-source-file) (set! P1160@P936@compile-core P936@compile-core) (set! P1159@P934@make-record-printer P934@make-record-printer) (set! P1158@P932@load-serialized-library P932@load-serialized-library) (set! P1157@P930@serialize-library P930@serialize-library) (set! P1156@P928@fasl-load P928@fasl-load) (set! P1155@P926@fasl-save P926@fasl-save) (set! P1154@P924@scm->fasl P924@scm->fasl) (set! P1153@P922@annotation-expression P922@annotation-expression) (set! P1152@P920@annotation-source P920@annotation-source) (set! P1151@P918@annotation? P918@annotation?) (set! P1150@P916@annotation-stripped P916@annotation-stripped) (set! P1149@P914@read-annotated P914@read-annotated) (set! P1148@P912@gensym P912@gensym) (set! P1147@P910@gen-sym-counter P910@gen-sym-counter) (set! P1146@P908@gen-sym-prefix P908@gen-sym-prefix) (set! P1145@P906@make-gensym-counter P906@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (P1168@current-primitive-locations P1170@mutable? P1172@rewriter P1174@expanded->core P1176@compile-core-expr P1178@pretty-print P1180@compile-core-expr-to-port) (begin (set! P1168@current-primitive-locations (P1162@P940@make-parameter (lambda (P1181@x) '#f) (lambda (P1183@p) P1183@p))) (set! P1170@mutable? (lambda (P1185@x) (or (pair? P1185@x) (vector? P1185@x) (hashtable? P1185@x)))) (set! P1172@rewriter (lambda (P1187@quote-hack?) ((lambda (P1190@f) (begin (set! P1190@f (lambda (P1191@x) (if (pair? P1191@x) ((lambda (P1193@t) (if (memv P1193@t '(quote)) (if (and P1187@quote-hack? (P1170@mutable? (cadr P1191@x))) ((lambda (P1195@g) (begin (set-symbol-value! P1195@g (cadr P1191@x)) P1195@g)) (P1148@P912@gensym)) P1191@x) (if (memv P1193@t '(case-lambda)) (cons 'case-lambda (map (lambda (P1197@x) (cons (car P1197@x) (map P1190@f (cdr P1197@x)))) (cdr P1191@x))) (if (memv P1193@t '(lambda)) (cons* 'lambda (cadr P1191@x) (map P1190@f (cddr P1191@x))) (if (memv P1193@t '(letrec)) ((lambda (P1199@bindings P1200@body*) ((lambda (P1203@lhs* P1204@rhs*) (cons* 'letrec (map list P1203@lhs* (map P1190@f P1204@rhs*)) (map P1190@f P1200@body*))) (map car P1199@bindings) (map cadr P1199@bindings))) (cadr P1191@x) (cddr P1191@x)) (if (memv P1193@t '(letrec*)) ((lambda (P1207@bindings P1208@body*) ((lambda (P1211@lhs* P1212@rhs*) (cons* 'letrec* (map list P1211@lhs* (map P1190@f P1212@rhs*)) (map P1190@f P1208@body*))) (map car P1207@bindings) (map cadr P1207@bindings))) (cadr P1191@x) (cddr P1191@x)) (if (memv P1193@t '(library-letrec*)) ((lambda (P1215@name P1216@x) ((lambda (P1219@bindings P1220@body*) ((lambda (P1223@lhs* P1224@lhs** P1225@rhs*) (cons* 'library-letrec* P1215@name (map list P1223@lhs* P1224@lhs** (map P1190@f P1225@rhs*)) (map P1190@f P1220@body*))) (map car P1219@bindings) (map cadr P1219@bindings) (map caddr P1219@bindings))) (cadr P1216@x) (cddr P1216@x))) (cadr P1191@x) (cdr P1191@x)) (if (memv P1193@t '(begin)) (cons 'begin (map P1190@f (cdr P1191@x))) (if (memv P1193@t '(set!)) (list 'set! (cadr P1191@x) (P1190@f (caddr P1191@x))) (if (memv P1193@t '(primitive)) ((lambda (P1229@op) ((lambda (P1231@t) (if P1231@t ((lambda (P1233@loc) P1233@loc) P1231@t) P1229@op)) ((P1168@current-primitive-locations) P1229@op))) (cadr P1191@x)) (if (memv P1193@t '(define)) P1191@x (if (list? P1191@x) (map P1190@f P1191@x) (error 'rewrite '"invalid form ~s ~s" P1191@x (list? P1191@x)))))))))))))) (car P1191@x)) P1191@x))) P1190@f)) '#f))) (set! P1174@expanded->core (lambda (P1235@x) ((P1172@rewriter '#f) P1235@x))) (set! P1176@compile-core-expr (lambda (P1237@x) ((P1172@rewriter '#f) P1237@x))) (set! P1178@pretty-print write) (set! P1180@compile-core-expr-to-port (lambda (P1239@x P1240@p) (P1178@pretty-print ((P1172@rewriter '#f) P1239@x) P1240@p))) (begin (set! P1249@P1180@compile-core-expr-to-port P1180@compile-core-expr-to-port) (set! P1248@P1178@pretty-print P1178@pretty-print) (set! P1247@P1176@compile-core-expr P1176@compile-core-expr) (set! P1246@P1174@expanded->core P1174@expanded->core) (set! P1245@P1172@rewriter P1172@rewriter) (set! P1244@P1170@mutable? P1170@mutable?) (set! P1243@P1168@current-primitive-locations P1168@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (P1328@make-collection P1330@current-library-collection P1336@P1331 P1338@P1333 P1340@P1332 P1343@library? P1345@make-library P1347@library-id P1349@library-name P1351@library-version P1353@library-imp* P1355@library-vis* P1357@library-inv* P1359@library-subst P1361@library-env P1363@library-visit-state P1365@library-invoke-state P1367@library-visit-code P1369@library-invoke-code P1371@library-visible? P1373@library-source-file-name P1375@set-library-id! P1377@set-library-name! P1379@set-library-version! P1381@set-library-imp*! P1383@set-library-vis*! P1385@set-library-inv*! P1387@set-library-subst! P1389@set-library-env! P1391@set-library-visit-state! P1393@set-library-invoke-state! P1395@set-library-visit-code! P1397@set-library-invoke-code! P1399@set-library-visible?! P1401@set-library-source-file-name! P1403@rp P1405@find-dependencies P1407@find-library-by P1409@library-path P1411@library-extensions P1413@library-name->file-name P1415@file-locator P1417@serialize-all P1419@current-precompiled-library-loader P1421@try-load-from-file P1423@library-loader P1425@current-library-expander P1427@external-pending-libraries P1429@find-external-library P1431@find-library-by-name P1433@library-exists? P1435@find-library-by-spec/die P1437@label->binding-table P1439@install-library-record P1441@install-library P1443@imported-label->binding P1445@invoke-library P1447@visit-library P1449@invoke-library-by-spec P1451@installed-libraries P1453@library-spec) (begin (set! P1328@make-collection (lambda () ((lambda (P1454@set) ((lambda (P1457@set-cons) (begin (set! P1457@set-cons (lambda (P1462@x P1463@ls) (if (memq P1462@x P1463@ls) P1463@ls (cons P1462@x P1463@ls)))) (lambda P1460 ((lambda (P1461) (if (= P1461 '0) (apply (lambda () P1454@set) P1460) (if (= P1461 '1) (apply (lambda (P1458@x) (set! P1454@set (P1457@set-cons P1458@x P1454@set))) P1460) (error 'apply '"invalid arg count")))) (length P1460))))) '#f)) '()))) (set! P1330@current-library-collection (P1162@P940@make-parameter (P1328@make-collection) (lambda (P1466@x) (begin (if (not (procedure? P1466@x)) (assertion-violation 'current-library-collection '"not a procedure" P1466@x) (void)) P1466@x)))) (set! P1336@P1331 (make-record-type-descriptor 'library '#f 'P1334 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! P1338@P1333 '#f) (set! P1340@P1332 (make-record-constructor-descriptor P1336@P1331 '#f P1338@P1333)) (set! P1343@library? (record-predicate P1336@P1331)) (set! P1345@make-library (record-constructor P1340@P1332)) (set! P1347@library-id (record-accessor P1336@P1331 '0)) (set! P1349@library-name (record-accessor P1336@P1331 '1)) (set! P1351@library-version (record-accessor P1336@P1331 '2)) (set! P1353@library-imp* (record-accessor P1336@P1331 '3)) (set! P1355@library-vis* (record-accessor P1336@P1331 '4)) (set! P1357@library-inv* (record-accessor P1336@P1331 '5)) (set! P1359@library-subst (record-accessor P1336@P1331 '6)) (set! P1361@library-env (record-accessor P1336@P1331 '7)) (set! P1363@library-visit-state (record-accessor P1336@P1331 '8)) (set! P1365@library-invoke-state (record-accessor P1336@P1331 '9)) (set! P1367@library-visit-code (record-accessor P1336@P1331 '10)) (set! P1369@library-invoke-code (record-accessor P1336@P1331 '11)) (set! P1371@library-visible? (record-accessor P1336@P1331 '12)) (set! P1373@library-source-file-name (record-accessor P1336@P1331 '13)) (set! P1375@set-library-id! (record-mutator P1336@P1331 '0)) (set! P1377@set-library-name! (record-mutator P1336@P1331 '1)) (set! P1379@set-library-version! (record-mutator P1336@P1331 '2)) (set! P1381@set-library-imp*! (record-mutator P1336@P1331 '3)) (set! P1383@set-library-vis*! (record-mutator P1336@P1331 '4)) (set! P1385@set-library-inv*! (record-mutator P1336@P1331 '5)) (set! P1387@set-library-subst! (record-mutator P1336@P1331 '6)) (set! P1389@set-library-env! (record-mutator P1336@P1331 '7)) (set! P1391@set-library-visit-state! (record-mutator P1336@P1331 '8)) (set! P1393@set-library-invoke-state! (record-mutator P1336@P1331 '9)) (set! P1395@set-library-visit-code! (record-mutator P1336@P1331 '10)) (set! P1397@set-library-invoke-code! (record-mutator P1336@P1331 '11)) (set! P1399@set-library-visible?! (record-mutator P1336@P1331 '12)) (set! P1401@set-library-source-file-name! (record-mutator P1336@P1331 '13)) (set! P1403@rp (P1159@P934@make-record-printer 'library (lambda (P1468@x P1469@p P1470@wr) (begin (if (not (P1343@library? P1468@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (P1351@library-version P1468@x)) (P1349@library-name P1468@x) (append (P1349@library-name P1468@x) (list (P1351@library-version P1468@x))))) P1469@p))))) (set! P1405@find-dependencies (lambda (P1474@ls) (if (null? P1474@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! P1407@find-library-by (lambda (P1476@pred) ((letrec ((P1478@f (lambda (P1480@ls) (if (null? P1480@ls) '#f (if (P1476@pred (car P1480@ls)) (car P1480@ls) (P1478@f (cdr P1480@ls))))))) P1478@f) ((P1330@current-library-collection))))) (set! P1409@library-path (P1162@P940@make-parameter '(".") (lambda (P1482@x) (if (and (list? P1482@x) (for-all string? P1482@x)) (map (lambda (P1484@x) P1484@x) P1482@x) (assertion-violation 'library-path '"not a list of strings" P1482@x))))) (set! P1411@library-extensions (P1162@P940@make-parameter '(".sls" ".ss" ".scm") (lambda (P1486@x) (if (and (list? P1486@x) (for-all string? P1486@x)) (map (lambda (P1488@x) P1488@x) P1486@x) (assertion-violation 'library-extensions '"not a list of strings" P1486@x))))) (set! P1413@library-name->file-name (lambda (P1490@x) (call-with-values (lambda () (open-string-output-port)) (lambda (P1494@P1492@p P1495@P1493@extract) ((lambda (P1498@extract P1499@p) ((lambda (P1503@display-hex) (begin (set! P1503@display-hex (lambda (P1512@n) (if (<= '0 P1512@n '9) (display P1512@n P1499@p) (display (integer->char (+ (char->integer '#\a) (- P1512@n '10))) P1499@p)))) (begin ((letrec ((P1504@f (lambda (P1506@ls) (if (not (null? P1506@ls)) (begin (display '"/" P1499@p) (for-each (lambda (P1508@c) (if (or (char<=? '#\a P1508@c '#\z) (char<=? '#\A P1508@c '#\Z) (char<=? '#\0 P1508@c '#\9) (memv P1508@c '(#\- #\. #\_ #\~))) (display P1508@c P1499@p) (begin (display '"%" P1499@p) ((lambda (P1510@n) (begin (P1503@display-hex (quotient P1510@n '16)) (P1503@display-hex (remainder P1510@n '16)))) (char->integer P1508@c))))) (string->list (symbol->string (car P1506@ls)))) (P1504@f (cdr P1506@ls))) (void))))) P1504@f) P1490@x) (P1498@extract)))) '#f)) P1495@P1493@extract P1494@P1492@p))))) (set! P1415@file-locator (P1162@P940@make-parameter (lambda (P1514@x) ((lambda (P1516@str) ((letrec ((P1518@f (lambda (P1520@ls P1521@exts P1522@failed-list) (if (null? P1520@ls) ((lambda () ((lambda (P1534@P1529 P1536@P1531 P1538@P1530 P1541@P1528 P1543@make-library-resolution-condition P1545@P1526 P1547@P1527 P1549@library-resolution-condition? P1551@condition-library P1553@condition-files) (begin (set! P1534@P1529 (make-record-type-descriptor '&library-resolution P10070@P9385@&condition-rtd 'P1532 '#f '#f '#((immutable library) (immutable files)))) (set! P1536@P1531 '#f) (set! P1538@P1530 (make-record-constructor-descriptor P1534@P1529 P10071@P9387@&condition-rcd P1536@P1531)) (set! P1541@P1528 (record-predicate P1534@P1529)) (set! P1543@make-library-resolution-condition (record-constructor P1538@P1530)) (set! P1545@P1526 (record-accessor P1534@P1529 '0)) (set! P1547@P1527 (record-accessor P1534@P1529 '1)) (set! P1549@library-resolution-condition? (condition-predicate P1534@P1529)) (set! P1551@condition-library (condition-accessor P1534@P1529 P1545@P1526)) (set! P1553@condition-files (condition-accessor P1534@P1529 P1547@P1527)) (raise (condition (P10102@P9535@make-error) (P10136@P9625@make-who-condition 'expander) (P10076@P9468@make-message-condition '"cannot locate library in library-path") (P1543@make-library-resolution-condition P1514@x (reverse P1522@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? P1521@exts) (P1518@f (cdr P1520@ls) (P1411@library-extensions) P1522@failed-list) ((lambda (P1554@name) (if (file-exists? P1554@name) P1554@name (P1518@f P1520@ls (cdr P1521@exts) (cons P1554@name P1522@failed-list)))) (string-append (car P1520@ls) P1516@str (car P1521@exts)))))))) P1518@f) (P1409@library-path) (P1411@library-extensions) '())) (P1413@library-name->file-name P1514@x))) (lambda (P1556@f) (if (procedure? P1556@f) P1556@f (assertion-violation 'file-locator '"not a procedure" P1556@f))))) (set! P1417@serialize-all (lambda (P1558@serialize P1559@compile) ((lambda (P1563@library-desc) (begin (set! P1563@library-desc (lambda (P1566@x) (list (P1347@library-id P1566@x) (P1349@library-name P1566@x)))) (for-each (lambda (P1564@x) (if (P1373@library-source-file-name P1564@x) (P1558@serialize (P1373@library-source-file-name P1564@x) (list (P1347@library-id P1564@x) (P1349@library-name P1564@x) (P1351@library-version P1564@x) (map P1563@library-desc (P1353@library-imp* P1564@x)) (map P1563@library-desc (P1355@library-vis* P1564@x)) (map P1563@library-desc (P1357@library-inv* P1564@x)) (P1359@library-subst P1564@x) (P1361@library-env P1564@x) (P1559@compile (P1367@library-visit-code P1564@x)) (P1559@compile (P1369@library-invoke-code P1564@x)) (P1371@library-visible? P1564@x))) (void))) ((P1330@current-library-collection))))) '#f))) (set! P1419@current-precompiled-library-loader (P1162@P940@make-parameter (lambda (P1568@filename P1569@sk) '#f))) (set! P1421@try-load-from-file (lambda (P1572@filename) ((P1419@current-precompiled-library-loader) P1572@filename (lambda P1610 ((lambda (P1611) (if (= P1611 '11) (apply (lambda (P1574@id P1575@name P1576@ver P1577@imp* P1578@vis* P1579@inv* P1580@exp-subst P1581@exp-env P1582@visit-proc P1583@invoke-proc P1584@visible?) ((letrec ((P1596@f (lambda (P1598@deps) (if (null? P1598@deps) (begin (P1441@install-library P1574@id P1575@name P1576@ver P1577@imp* P1578@vis* P1579@inv* P1580@exp-subst P1581@exp-env P1582@visit-proc P1583@invoke-proc '#f '#f P1584@visible? '#f) '#t) ((lambda (P1600@d) ((lambda (P1602@label P1603@dname) ((lambda (P1606@l) (if (and (P1343@library? P1606@l) (eq? P1602@label (P1347@library-id P1606@l))) (P1596@f (cdr P1598@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" P1575@name P1603@dname P1572@filename P1606@l P1602@label (P1347@library-id P1606@l)) '#f))) (P1431@find-library-by-name P1603@dname))) (car P1600@d) (cadr P1600@d))) (car P1598@deps)))))) P1596@f) (append P1577@imp* P1578@vis* P1579@inv*))) P1610) (if (>= P1611 '0) (apply (lambda P1608@others '#f) P1610) (error 'apply '"invalid arg count")))) (length P1610)))))) (set! P1423@library-loader (P1162@P940@make-parameter (lambda (P1612@x) ((lambda (P1614@file-name) (if (not P1614@file-name) (assertion-violation '#f '"cannot file library" P1612@x) (or (P1421@try-load-from-file P1614@file-name) ((P1425@current-library-expander) (P1161@P938@read-library-source-file P1614@file-name) P1614@file-name (lambda (P1616@name) (if (not (fast-equal? P1616@name P1612@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (P1620@P1618@p P1621@P1619@e) ((lambda (P1624@e P1625@p) (begin (display '"expected to find library " P1625@p) (write P1612@x P1625@p) (display '" in file " P1625@p) (display P1614@file-name P1625@p) (display '", found " P1625@p) (write P1616@name P1625@p) (display '" instead" P1625@p) (P1624@e))) P1621@P1619@e P1620@P1618@p)))) (void))))))) ((P1415@file-locator) P1612@x))) (lambda (P1628@f) (if (procedure? P1628@f) P1628@f (assertion-violation 'library-locator '"not a procedure" P1628@f))))) (set! P1425@current-library-expander (P1162@P940@make-parameter (lambda (P1630@x) (assertion-violation 'library-expander '"not initialized")) (lambda (P1632@f) (if (procedure? P1632@f) P1632@f (assertion-violation 'library-expander '"not a procedure" P1632@f))))) (set! P1427@external-pending-libraries (P1162@P940@make-parameter '())) (set! P1429@find-external-library (lambda (P1634@name) (begin (if (member P1634@name (P1427@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" P1634@name) (void)) ((lambda (P1638@P1636@external-pending-libraries P1639@P1637@external-pending-libraries) ((lambda (P1642@swap) (dynamic-wind P1642@swap (lambda () (begin ((P1423@library-loader) P1634@name) (or (P1407@find-library-by (lambda (P1644@x) (fast-equal? (P1349@library-name P1644@x) P1634@name))) (assertion-violation '#f '"handling external library did not yield the correct library" P1634@name)))) P1642@swap)) (lambda () ((lambda (P1646@t) (begin (P1638@P1636@external-pending-libraries P1639@P1637@external-pending-libraries) (set! P1639@P1637@external-pending-libraries P1646@t))) (P1638@P1636@external-pending-libraries))))) P1427@external-pending-libraries (cons P1634@name (P1427@external-pending-libraries)))))) (set! P1431@find-library-by-name (lambda (P1648@name) (or (P1407@find-library-by (lambda (P1650@x) (fast-equal? (P1349@library-name P1650@x) P1648@name))) (P1429@find-external-library P1648@name)))) (set! P1433@library-exists? (lambda (P1652@name) (and (P1407@find-library-by (lambda (P1654@x) (fast-equal? (P1349@library-name P1654@x) P1652@name))) '#t))) (set! P1435@find-library-by-spec/die (lambda (P1656@spec) ((lambda (P1658@id) (or (P1407@find-library-by (lambda (P1660@x) (eq? P1658@id (P1347@library-id P1660@x)))) (assertion-violation '#f '"cannot find library with required spec" P1656@spec))) (car P1656@spec)))) (set! P1437@label->binding-table (make-eq-hashtable)) (set! P1439@install-library-record (lambda (P1662@lib) (begin ((lambda (P1664@exp-env) (for-each (lambda (P1666@x) ((lambda (P1668@label P1669@binding) ((lambda (P1672@binding) (begin (if (hashtable-ref P1437@label->binding-table P1668@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" P1668@label (hashtable-ref P1437@label->binding-table P1668@label '#f) P1672@binding) (exit)) (void)) (hashtable-set! P1437@label->binding-table P1668@label P1672@binding))) ((lambda (P1674@t) (if (memv P1674@t '(global)) (cons 'global (cons P1662@lib (cdr P1669@binding))) (if (memv P1674@t '(global-macro)) (cons 'global-macro (cons P1662@lib (cdr P1669@binding))) (if (memv P1674@t '(global-macro!)) (cons 'global-macro! (cons P1662@lib (cdr P1669@binding))) P1669@binding)))) (car P1669@binding)))) (car P1666@x) (cdr P1666@x))) P1664@exp-env)) (P1361@library-env P1662@lib)) ((P1330@current-library-collection) P1662@lib)))) (set! P1441@install-library (lambda (P1676@id P1677@name P1678@ver P1679@imp* P1680@vis* P1681@inv* P1682@exp-subst P1683@exp-env P1684@visit-proc P1685@invoke-proc P1686@visit-code P1687@invoke-code P1688@visible? P1689@source-file-name) ((lambda (P1704@imp-lib* P1705@vis-lib* P1706@inv-lib*) (begin (if (not (and (symbol? P1676@id) (list? P1677@name) (list? P1678@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" P1676@id P1677@name P1678@ver) (void)) (if (P1433@library-exists? P1677@name) (assertion-violation 'install-library '"library is already installed" P1677@name) (void)) ((lambda (P1710@lib) (P1439@install-library-record P1710@lib)) (P1345@make-library P1676@id P1677@name P1678@ver P1704@imp-lib* P1705@vis-lib* P1706@inv-lib* P1682@exp-subst P1683@exp-env P1684@visit-proc P1685@invoke-proc P1686@visit-code P1687@invoke-code P1688@visible? P1689@source-file-name)))) (map P1435@find-library-by-spec/die P1679@imp*) (map P1435@find-library-by-spec/die P1680@vis*) (map P1435@find-library-by-spec/die P1681@inv*)))) (set! P1443@imported-label->binding (lambda (P1712@lab) (hashtable-ref P1437@label->binding-table P1712@lab '#f))) (set! P1445@invoke-library (lambda (P1714@lib) ((lambda (P1716@invoke) (if (procedure? P1716@invoke) (begin (P1393@set-library-invoke-state! P1714@lib (lambda () (assertion-violation 'invoke '"circularity detected" P1714@lib))) (for-each P1445@invoke-library (P1357@library-inv* P1714@lib)) (P1393@set-library-invoke-state! P1714@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" P1714@lib))) (P1716@invoke) (P1393@set-library-invoke-state! P1714@lib '#t)) (void))) (P1365@library-invoke-state P1714@lib)))) (set! P1447@visit-library (lambda (P1718@lib) ((lambda (P1720@visit) (if (procedure? P1720@visit) (begin (P1391@set-library-visit-state! P1718@lib (lambda () (assertion-violation 'visit '"circularity detected" P1718@lib))) (for-each P1445@invoke-library (P1355@library-vis* P1718@lib)) (P1391@set-library-visit-state! P1718@lib (lambda () (assertion-violation 'invoke '"first visit did not return" P1718@lib))) (P1720@visit) (P1391@set-library-visit-state! P1718@lib '#t)) (void))) (P1363@library-visit-state P1718@lib)))) (set! P1449@invoke-library-by-spec (lambda (P1722@spec) (P1445@invoke-library (P1435@find-library-by-spec/die P1722@spec)))) (set! P1451@installed-libraries (lambda P1730 ((lambda (P1731) (if (= P1731 '1) (apply (lambda (P1724@all?) ((letrec ((P1726@f (lambda (P1728@ls) (if (null? P1728@ls) '() (if (or P1724@all? (P1371@library-visible? (car P1728@ls))) (cons (car P1728@ls) (P1726@f (cdr P1728@ls))) (P1726@f (cdr P1728@ls))))))) P1726@f) ((P1330@current-library-collection)))) P1730) (if (= P1731 '0) (apply (lambda () (P1451@installed-libraries '#f)) P1730) (error 'apply '"invalid arg count")))) (length P1730)))) (set! P1453@library-spec (lambda (P1732@x) (begin (if (not (P1343@library? P1732@x)) (assertion-violation 'library-spec '"not a library" P1732@x) (void)) (list (P1347@library-id P1732@x) (P1349@library-name P1732@x) (P1351@library-version P1732@x))))) (begin (set! P1794@P1453@library-spec P1453@library-spec) (set! P1793@P1451@installed-libraries P1451@installed-libraries) (set! P1792@P1449@invoke-library-by-spec P1449@invoke-library-by-spec) (set! P1791@P1447@visit-library P1447@visit-library) (set! P1790@P1445@invoke-library P1445@invoke-library) (set! P1789@P1443@imported-label->binding P1443@imported-label->binding) (set! P1788@P1441@install-library P1441@install-library) (set! P1787@P1439@install-library-record P1439@install-library-record) (set! P1786@P1437@label->binding-table P1437@label->binding-table) (set! P1785@P1435@find-library-by-spec/die P1435@find-library-by-spec/die) (set! P1784@P1433@library-exists? P1433@library-exists?) (set! P1783@P1431@find-library-by-name P1431@find-library-by-name) (set! P1782@P1429@find-external-library P1429@find-external-library) (set! P1781@P1427@external-pending-libraries P1427@external-pending-libraries) (set! P1780@P1425@current-library-expander P1425@current-library-expander) (set! P1779@P1423@library-loader P1423@library-loader) (set! P1778@P1421@try-load-from-file P1421@try-load-from-file) (set! P1777@P1419@current-precompiled-library-loader P1419@current-precompiled-library-loader) (set! P1776@P1417@serialize-all P1417@serialize-all) (set! P1775@P1415@file-locator P1415@file-locator) (set! P1774@P1413@library-name->file-name P1413@library-name->file-name) (set! P1773@P1411@library-extensions P1411@library-extensions) (set! P1772@P1409@library-path P1409@library-path) (set! P1771@P1407@find-library-by P1407@find-library-by) (set! P1770@P1405@find-dependencies P1405@find-dependencies) (set! P1769@P1403@rp P1403@rp) (set! P1768@P1401@set-library-source-file-name! P1401@set-library-source-file-name!) (set! P1767@P1399@set-library-visible?! P1399@set-library-visible?!) (set! P1766@P1397@set-library-invoke-code! P1397@set-library-invoke-code!) (set! P1765@P1395@set-library-visit-code! P1395@set-library-visit-code!) (set! P1764@P1393@set-library-invoke-state! P1393@set-library-invoke-state!) (set! P1763@P1391@set-library-visit-state! P1391@set-library-visit-state!) (set! P1762@P1389@set-library-env! P1389@set-library-env!) (set! P1761@P1387@set-library-subst! P1387@set-library-subst!) (set! P1760@P1385@set-library-inv*! P1385@set-library-inv*!) (set! P1759@P1383@set-library-vis*! P1383@set-library-vis*!) (set! P1758@P1381@set-library-imp*! P1381@set-library-imp*!) (set! P1757@P1379@set-library-version! P1379@set-library-version!) (set! P1756@P1377@set-library-name! P1377@set-library-name!) (set! P1755@P1375@set-library-id! P1375@set-library-id!) (set! P1754@P1373@library-source-file-name P1373@library-source-file-name) (set! P1753@P1371@library-visible? P1371@library-visible?) (set! P1752@P1369@library-invoke-code P1369@library-invoke-code) (set! P1751@P1367@library-visit-code P1367@library-visit-code) (set! P1750@P1365@library-invoke-state P1365@library-invoke-state) (set! P1749@P1363@library-visit-state P1363@library-visit-state) (set! P1748@P1361@library-env P1361@library-env) (set! P1747@P1359@library-subst P1359@library-subst) (set! P1746@P1357@library-inv* P1357@library-inv*) (set! P1745@P1355@library-vis* P1355@library-vis*) (set! P1744@P1353@library-imp* P1353@library-imp*) (set! P1743@P1351@library-version P1351@library-version) (set! P1742@P1349@library-name P1349@library-name) (set! P1741@P1347@library-id P1347@library-id) (set! P1740@P1345@make-library P1345@make-library) (set! P1739@P1343@library? P1343@library?) (set! P1738@P1340@P1332 P1340@P1332) (set! P1737@P1338@P1333 P1338@P1333) (set! P1736@P1336@P1331 P1336@P1331) (set! P1735@P1330@current-library-collection P1330@current-library-collection) (set! P1734@P1328@make-collection P1328@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (P1797@build-global-define P1910@build-lambda P1912@build-case-lambda P1914@build-let P1960@build-sequence P1962@build-void P1964@build-letrec P1966@build-letrec* P1968@build-library-letrec* P1970@build-receive) (begin (set! P1797@build-global-define (lambda (P1971@x) (P1962@build-void))) (set! P1910@build-lambda (lambda (P1973@ae P1974@vars P1975@exp) (list 'lambda P1974@vars P1975@exp))) (set! P1912@build-case-lambda (lambda (P1979@ae P1980@vars* P1981@exp*) ((lambda (P1986@build-error P1988@build-pred P1990@build-apply P1992@expand-case-lambda) (begin (set! P1986@build-error (lambda (P2039@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! P1988@build-pred (lambda (P2017@ae P2018@n P2019@vars) (call-with-values (lambda () ((letrec ((P2025@f (lambda (P2027@vars P2028@count) (if (pair? P2027@vars) (P2025@f (cdr P2027@vars) (+ P2028@count '1)) (if (null? P2027@vars) (values P2028@count '=) (values P2028@count '>=)))))) P2025@f) P2019@vars '0)) (lambda (P2031@P2023@count P2032@P2024@pred) ((lambda (P2035@pred P2036@count) (list (list 'primitive P2035@pred) P2018@n (list 'quote P2036@count))) P2032@P2024@pred P2031@P2023@count))))) (set! P1990@build-apply (lambda (P2009@ae P2010@g P2011@vars P2012@exp) (list '(primitive apply) (P1910@build-lambda P2009@ae P2011@vars P2012@exp) P2010@g))) (set! P1992@expand-case-lambda (lambda (P1993@ae P1994@vars P1995@exp*) ((lambda (P1999@g P2000@n) (list 'lambda P1999@g (P1914@build-let P1993@ae (list P2000@n) (list (list '(primitive length) P1999@g)) ((letrec ((P2003@f (lambda (P2005@vars* P2006@exp*) (if (null? P2005@vars*) (P1986@build-error P1993@ae) (list 'if (P1988@build-pred P1993@ae P2000@n (car P2005@vars*)) (P1990@build-apply P1993@ae P1999@g (car P2005@vars*) (car P2006@exp*)) (P2003@f (cdr P2005@vars*) (cdr P2006@exp*))))))) P2003@f) P1980@vars* P1995@exp*)))) (P1148@P912@gensym) (P1148@P912@gensym)))) (if (= (length P1981@exp*) '1) (P1910@build-lambda P1979@ae (car P1980@vars*) (car P1981@exp*)) (P1992@expand-case-lambda P1979@ae P1980@vars* P1981@exp*)))) '#f '#f '#f '#f))) (set! P1914@build-let (lambda (P2041@ae P2042@lhs* P2043@rhs* P2044@body) (cons (P1910@build-lambda P2041@ae P2042@lhs* P2044@body) P2043@rhs*))) (set! P1960@build-sequence (lambda (P2049@ae P2050@exps) ((letrec ((P2053@loop (lambda (P2055@exps) (if (null? (cdr P2055@exps)) (car P2055@exps) (if (equal? (car P2055@exps) (P1962@build-void)) (P2053@loop (cdr P2055@exps)) (cons 'begin P2055@exps)))))) P2053@loop) P2050@exps))) (set! P1962@build-void (lambda () '((primitive void)))) (set! P1964@build-letrec (lambda (P2057@ae P2058@vars P2059@val-exps P2060@body-exp) (if (null? P2058@vars) P2060@body-exp (list 'letrec (map list P2058@vars P2059@val-exps) P2060@body-exp)))) (set! P1966@build-letrec* (lambda (P2065@ae P2066@vars P2067@val-exps P2068@body-exp) (if (null? P2066@vars) P2068@body-exp (P1914@build-let P2065@ae P2066@vars (map (lambda (P2073@x) (list 'quote '#f)) P2066@vars) (P1960@build-sequence P2065@ae (append (map (lambda (P2075@lhs P2076@rhs) (list 'set! P2075@lhs P2076@rhs)) P2066@vars P2067@val-exps) (list P2068@body-exp))))))) (set! P1968@build-library-letrec* (lambda (P2079@ae P2080@name P2081@vars P2082@locs P2083@val-exps P2084@body-exp) (list 'library-letrec* P2080@name (map list P2081@vars P2082@locs P2083@val-exps) P2084@body-exp))) (set! P1970@build-receive (lambda (P2091@ae P2092@vars P2093@producer P2094@body*) (begin (display '"************** in ") (cons 'receive (cons P2092@vars (cons P2093@producer P2094@body*)))))) (begin (set! P2108@P1970@build-receive P1970@build-receive) (set! P2107@P1968@build-library-letrec* P1968@build-library-letrec*) (set! P2106@P1966@build-letrec* P1966@build-letrec*) (set! P2105@P1964@build-letrec P1964@build-letrec) (set! P2104@P1962@build-void P1962@build-void) (set! P2103@P1960@build-sequence P1960@build-sequence) (set! P2102@P1914@build-let P1914@build-let) (set! P2101@P1912@build-case-lambda P1912@build-case-lambda) (set! P2100@P1910@build-lambda P1910@build-lambda) (set! P2099@P1797@build-global-define P1797@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (P2123@file-options-macro P2125@set-cons P2127@set-union P2132@top-mark* P2134@top-marked? P2136@gen-lexical P2138@gen-global P2140@gen-label P2142@gen-top-level-label P2144@gen-define-label+loc P2146@gen-define-label P2152@P2147 P2154@P2149 P2156@P2148 P2159@rib? P2161@make-rib P2163@rib-sym* P2165@rib-mark** P2167@rib-label* P2169@rib-sealed/freq P2171@rib-cache P2173@set-rib-sym*! P2175@set-rib-mark**! P2177@set-rib-label*! P2179@set-rib-sealed/freq! P2181@set-rib-cache! P2183@make-empty-rib P2185@extend-rib! P2187@extend-rib/nc! P2189@make-rib-map P2191@seal-rib! P2193@unseal-rib! P2195@make-full-rib P2201@P2196 P2203@P2198 P2205@P2197 P2208@stx? P2210@make-stx P2212@stx-expr P2214@stx-mark* P2216@stx-subst* P2218@stx-ae* P2220@set-stx-expr! P2222@set-stx-mark*! P2224@set-stx-subst*! P2226@set-stx-ae*! P2228@rp P2230@datum->stx P2232@gen-mark P2234@anti-mark P2236@anti-mark? P2238@join-wraps P2240@mkstx P2242@add-mark P2244@add-subst P2246@syntax-kind? P2248@syntax-vector->list P2250@syntax-pair? P2252@syntax-vector? P2254@syntax-null? P2256@syntax-list? P2258@syntax-car P2260@syntax-cdr P2262@syntax->list P2264@id? P2266@id->sym P2268@same-marks? P2270@bound-id=? P2272@free-id=? P2274@valid-bound-ids? P2276@distinct-bound-ids? P2278@bound-id-member? P2280@self-evaluating? P2282@strip-annotations P2284@strip P2286@stx->datum P2288@same-marks*? P2290@id->label P2292@id->real-label P2294@label->binding P2296@make-binding P2298@binding-type P2300@binding-value P2302@raise-unbound-error P2304@syntax-type P2318@sanitize-binding P2320@make-variable-transformer P2322@variable-transformer? P2324@variable-transformer-procedure P2326@make-eval-transformer P2637@parse-define P2639@parse-define-syntax P2641@scheme-stx-hashtable P2643@scheme-stx P2645@lexical-var P2647@lexical-mutable? P2649@set-lexical-mutable! P2651@add-lexical P2653@add-lexicals P2655@letrec-helper P2657@letrec-transformer P2659@letrec*-transformer P2661@fluid-let-syntax-transformer P2663@type-descriptor-transformer P2665@record-type-descriptor-transformer P2667@record-constructor-descriptor-transformer P2669@when-macro P2671@unless-macro P2673@if-transformer P2675@and-transformer P2677@or-transformer P2679@case-macro P2681@quote-transformer P2683@case-lambda-transformer P2685@lambda-transformer P2687@bless P2689@with-syntax-macro P2691@invalid-fmls-error P2693@let-macro P2695@let-values-macro P2697@let*-values-macro P2699@trace-lambda-macro P2701@trace-define-macro P2703@trace-define-syntax-macro P2705@trace-let/rec-syntax P2707@trace-let-syntax-macro P2709@trace-letrec-syntax-macro P2711@guard-macro P2713@define-enumeration-macro P2715@time-macro P2717@delay-macro P2719@assert-macro P2721@endianness-macro P2723@identifier-syntax-macro P2725@do-macro P2727@let*-macro P2729@or-macro P2731@and-macro P2733@cond-macro P2735@do-include P2737@include-macro P2739@include-into-macro P2741@syntax-rules-macro P2743@quasiquote-macro P2745@quasisyntax-macro P2747@define-struct-macro P2749@define-record-type-macro P2751@define-condition-type-macro P2753@incorrect-usage-macro P2755@parameterize-macro P2757@foreign-call-transformer P2759@convert-pattern P2761@syntax-dispatch P2763@ellipsis? P2765@underscore? P2767@verify-literals P2769@syntax-case-transformer P2771@ellipsis-map P2773@syntax-transformer P2775@core-macro-transformer P2777@symbol-macro P2779@macro-transformer P2781@local-macro-transformer P2783@do-macro-call P2785@chi-macro P2787@chi-local-macro P2789@chi-global-macro P2791@chi-expr* P2793@chi-application P2795@chi-expr P2797@chi-set! P2799@verify-formals P2801@chi-lambda-clause P2803@chi-lambda-clause* P2805@chi-defun P2807@chi-rhs P2809@expand-interaction-rhs*/init* P2811@chi-rhs* P2813@find-bound=? P2815@find-dups P2817@chi-internal P2819@parse-module P2825@P2820 P2827@P2822 P2829@P2821 P2832@module-interface? P2834@make-module-interface P2836@module-interface-first-mark P2838@module-interface-exp-id-vec P2840@module-interface-exp-lab-vec P2842@set-module-interface-first-mark! P2844@set-module-interface-exp-id-vec! P2846@set-module-interface-exp-lab-vec! P2848@module-interface-exp-id* P2850@chi-internal-module P2852@chi-body* P2854@expand-transformer P2856@parse-exports P2858@parse-library-name P2860@parse-library P2862@parse-import-spec* P2864@make-top-rib P2866@make-collector P2868@inv-collector P2870@vis-collector P2872@imp-collector P2874@chi-library-internal P2876@chi-interaction-expr P2878@library-body-expander P2880@core-library-expander P2882@parse-top-level-program P2884@top-level-expander P2890@P2885 P2892@P2887 P2894@P2886 P2897@env? P2899@make-env P2901@env-names P2903@env-labels P2905@env-itc P2907@set-env-names! P2909@set-env-labels! P2911@set-env-itc! P2913@rp P2919@P2914 P2921@P2916 P2923@P2915 P2926@interaction-env? P2928@make-interaction-env P2930@interaction-env-rib P2932@interaction-env-r P2934@interaction-env-locs P2936@set-interaction-env-rib! P2938@set-interaction-env-r! P2940@set-interaction-env-locs! P2942@rp P2944@interaction-environment-symbols P2946@environment-bindings P2948@parse-binding P2950@environment? P2952@environment-symbols P2954@environment P2956@null-environment P2958@scheme-report-environment P2960@expand P2962@eval P2964@library-expander P2966@boot-library-expand P2968@rev-map-append P2970@build-exports P2972@make-export-subst P2974@make-export-env/macros P2976@generate-temporaries P2978@free-identifier=? P2980@bound-identifier=? P2982@make-source-condition P2984@extract-position-condition P2986@expression-position P2988@assertion-error P2990@syntax-error P2992@syntax-violation* P2994@syntax-violation P2996@identifier? P2998@datum->syntax P3000@syntax->datum P3002@compile-r6rs-top-level P3004@pre-compile-r6rs-top-level P3006@interaction-environment P3008@top-level-context) (begin (set! P2123@file-options-macro (lambda (P3009@x) ((lambda (P3012@valid-option?) (begin (set! P3012@valid-option? (lambda (P3021@x) (and (P2264@id? P3021@x) (memq (P2266@id->sym P3021@x) '(no-fail no-create no-truncate))))) ((lambda (P3013@t) ((lambda (P3015@ls/false) (if (and P3015@ls/false (apply (lambda (P3017@opt*) (for-all P3012@valid-option? P3017@opt*)) P3015@ls/false)) (apply (lambda (P3019@opt*) (P2687@bless (list 'make-file-options (list 'quote P3019@opt*)))) P3015@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3013@t))) (P2761@syntax-dispatch P3013@t '(_ . each-any)))) P3009@x))) '#f))) (set! P2125@set-cons (lambda (P3023@x P3024@ls) (if (memq P3023@x P3024@ls) P3024@ls (cons P3023@x P3024@ls)))) (set! P2127@set-union (lambda (P3027@ls1 P3028@ls2) (if (null? P3027@ls1) P3028@ls2 (if (memq (car P3027@ls1) P3028@ls2) (P2127@set-union (cdr P3027@ls1) P3028@ls2) (cons (car P3027@ls1) (P2127@set-union (cdr P3027@ls1) P3028@ls2)))))) (set! P2132@top-mark* '(top)) (set! P2134@top-marked? (lambda (P3031@m*) (memq 'top P3031@m*))) (set! P2136@gen-lexical (lambda (P3033@sym) (if (symbol? P3033@sym) (P1148@P912@gensym P3033@sym) (if (P2208@stx? P3033@sym) (P2136@gen-lexical (P2266@id->sym P3033@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" P3033@sym))))) (set! P2138@gen-global (lambda (P3035@x) (P2136@gen-lexical P3035@x))) (set! P2140@gen-label (lambda (P3037@_) (P1148@P912@gensym))) (set! P2142@gen-top-level-label (lambda (P3039@id P3040@rib) ((lambda (P3044@find) (begin (set! P3044@find (lambda (P3055@sym P3056@mark* P3057@sym* P3058@mark** P3059@label*) (and (pair? P3057@sym*) (if (and (eq? P3055@sym (car P3057@sym*)) (P2268@same-marks? P3056@mark* (car P3058@mark**))) (car P3059@label*) (P3044@find P3055@sym P3056@mark* (cdr P3057@sym*) (cdr P3058@mark**) (cdr P3059@label*)))))) ((lambda (P3045@sym P3046@mark*) ((lambda (P3049@sym*) ((lambda (P3051@t) (if P3051@t ((lambda (P3053@label) (if (P1789@P1443@imported-label->binding P3053@label) (P1148@P912@gensym) P3053@label)) P3051@t) (P1148@P912@gensym))) (and (memq P3045@sym (P2163@rib-sym* P3040@rib)) (P3044@find P3045@sym P3046@mark* P3049@sym* (P2165@rib-mark** P3040@rib) (P2167@rib-label* P3040@rib))))) (P2163@rib-sym* P3040@rib))) (P2266@id->sym P3039@id) (P2214@stx-mark* P3039@id)))) '#f))) (set! P2144@gen-define-label+loc (lambda (P3065@id P3066@rib) ((lambda (P3069@t) (if P3069@t ((lambda (P3071@env) ((lambda (P3073@label P3074@locs) (values P3073@label ((lambda (P3077@t) (if P3077@t (cdr P3077@t) ((lambda (P3079@loc) (begin (P2940@set-interaction-env-locs! P3071@env (cons (cons P3073@label P3079@loc) P3074@locs)) P3079@loc)) (P2136@gen-lexical P3065@id)))) (assq P3073@label P3074@locs)))) (P2142@gen-top-level-label P3065@id P3066@rib) (P2934@interaction-env-locs P3071@env))) P3069@t) (values (P1148@P912@gensym) (P2136@gen-lexical P3065@id)))) (P3008@top-level-context)))) (set! P2146@gen-define-label (lambda (P3081@id P3082@rib) (if (P3008@top-level-context) (P2142@gen-top-level-label P3081@id P3082@rib) (P1148@P912@gensym)))) (set! P2152@P2147 (make-record-type-descriptor 'rib '#f 'P2150 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! P2154@P2149 '#f) (set! P2156@P2148 (make-record-constructor-descriptor P2152@P2147 '#f P2154@P2149)) (set! P2159@rib? (record-predicate P2152@P2147)) (set! P2161@make-rib (record-constructor P2156@P2148)) (set! P2163@rib-sym* (record-accessor P2152@P2147 '0)) (set! P2165@rib-mark** (record-accessor P2152@P2147 '1)) (set! P2167@rib-label* (record-accessor P2152@P2147 '2)) (set! P2169@rib-sealed/freq (record-accessor P2152@P2147 '3)) (set! P2171@rib-cache (record-accessor P2152@P2147 '4)) (set! P2173@set-rib-sym*! (record-mutator P2152@P2147 '0)) (set! P2175@set-rib-mark**! (record-mutator P2152@P2147 '1)) (set! P2177@set-rib-label*! (record-mutator P2152@P2147 '2)) (set! P2179@set-rib-sealed/freq! (record-mutator P2152@P2147 '3)) (set! P2181@set-rib-cache! (record-mutator P2152@P2147 '4)) (set! P2183@make-empty-rib (lambda () (P2161@make-rib '() '() '() '#f '#f))) (set! P2185@extend-rib! (lambda (P3085@rib P3086@id P3087@label) ((lambda (P3092@find) (begin (set! P3092@find (lambda (P3105@sym P3106@mark* P3107@sym* P3108@mark** P3109@label*) (and (pair? P3107@sym*) (if (and (eq? P3105@sym (car P3107@sym*)) (P2268@same-marks? P3106@mark* (car P3108@mark**))) P3109@label* (P3092@find P3105@sym P3106@mark* (cdr P3107@sym*) (cdr P3108@mark**) (cdr P3109@label*)))))) (begin (if (P2169@rib-sealed/freq P3085@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" P3085@rib) (void)) ((lambda (P3093@sym P3094@mark*) ((lambda (P3097@sym*) ((lambda (P3099@t) (if P3099@t ((lambda (P3101@p) (if (not (eq? P3087@label (car P3101@p))) (if (P3008@top-level-context) (set-car! P3101@p P3087@label) (P2994@syntax-violation '#f '"multiple definitions of identifier" P3086@id)) (void))) P3099@t) (begin (if (P2171@rib-cache P3085@rib) (hashtable-update! (P2171@rib-cache P3085@rib) P3093@sym (lambda (P3103@e) (cons (cons P3094@mark* P3087@label) P3103@e)) '()) (void)) (P2173@set-rib-sym*! P3085@rib (cons P3093@sym P3097@sym*)) (P2175@set-rib-mark**! P3085@rib (cons P3094@mark* (P2165@rib-mark** P3085@rib))) (P2177@set-rib-label*! P3085@rib (cons P3087@label (P2167@rib-label* P3085@rib)))))) (and (memq P3093@sym (P2163@rib-sym* P3085@rib)) (P3092@find P3093@sym P3094@mark* P3097@sym* (P2165@rib-mark** P3085@rib) (P2167@rib-label* P3085@rib))))) (P2163@rib-sym* P3085@rib))) (P2266@id->sym P3086@id) (P2214@stx-mark* P3086@id))))) '#f))) (set! P2187@extend-rib/nc! (lambda (P3115@rib P3116@id P3117@label) ((lambda (P3121@sym P3122@mark*) ((lambda (P3125@sym*) (begin (if (P2171@rib-cache P3115@rib) (hashtable-update! (P2171@rib-cache P3115@rib) P3121@sym (lambda (P3127@e) (cons (cons P3122@mark* P3117@label) P3127@e)) '()) (void)) (P2173@set-rib-sym*! P3115@rib (cons P3121@sym P3125@sym*)) (P2175@set-rib-mark**! P3115@rib (cons P3122@mark* (P2165@rib-mark** P3115@rib))) (P2177@set-rib-label*! P3115@rib (cons P3117@label (P2167@rib-label* P3115@rib))))) (P2163@rib-sym* P3115@rib))) (P2266@id->sym P3116@id) (P2214@stx-mark* P3116@id)))) (set! P2189@make-rib-map (lambda (P3129@sym*) ((lambda (P3131@ht) ((letrec ((P3133@f (lambda (P3135@i P3136@sym*) (if (null? P3136@sym*) P3131@ht (begin (hashtable-update! P3131@ht (car P3136@sym*) (lambda (P3139@x) (cons P3135@i P3139@x)) '()) (P3133@f (+ P3135@i '1) (cdr P3136@sym*))))))) P3133@f) '0 P3129@sym*)) (make-eq-hashtable)))) (set! P2191@seal-rib! (lambda (P3141@rib) ((lambda (P3143@sym*) (if (not (null? P3143@sym*)) (begin (P2173@set-rib-sym*! P3141@rib (list->vector P3143@sym*)) (P2175@set-rib-mark**! P3141@rib (list->vector (P2165@rib-mark** P3141@rib))) (P2177@set-rib-label*! P3141@rib (list->vector (P2167@rib-label* P3141@rib))) (P2179@set-rib-sealed/freq! P3141@rib (P2189@make-rib-map P3143@sym*))) (void))) (P2163@rib-sym* P3141@rib)))) (set! P2193@unseal-rib! (lambda (P3145@rib) (if (P2169@rib-sealed/freq P3145@rib) (begin (P2179@set-rib-sealed/freq! P3145@rib '#f) (P2173@set-rib-sym*! P3145@rib (vector->list (P2163@rib-sym* P3145@rib))) (P2175@set-rib-mark**! P3145@rib (vector->list (P2165@rib-mark** P3145@rib))) (P2177@set-rib-label*! P3145@rib (vector->list (P2167@rib-label* P3145@rib)))) (void)))) (set! P2195@make-full-rib (lambda (P3147@id* P3148@label*) ((lambda (P3151@r) (begin (P2191@seal-rib! P3151@r) P3151@r)) (P2161@make-rib (map P2266@id->sym P3147@id*) (map P2214@stx-mark* P3147@id*) P3148@label* '#f '#f)))) (set! P2201@P2196 (make-record-type-descriptor 'stx '#f 'P2199 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! P2203@P2198 '#f) (set! P2205@P2197 (make-record-constructor-descriptor P2201@P2196 '#f P2203@P2198)) (set! P2208@stx? (record-predicate P2201@P2196)) (set! P2210@make-stx (record-constructor P2205@P2197)) (set! P2212@stx-expr (record-accessor P2201@P2196 '0)) (set! P2214@stx-mark* (record-accessor P2201@P2196 '1)) (set! P2216@stx-subst* (record-accessor P2201@P2196 '2)) (set! P2218@stx-ae* (record-accessor P2201@P2196 '3)) (set! P2220@set-stx-expr! (record-mutator P2201@P2196 '0)) (set! P2222@set-stx-mark*! (record-mutator P2201@P2196 '1)) (set! P2224@set-stx-subst*! (record-mutator P2201@P2196 '2)) (set! P2226@set-stx-ae*! (record-mutator P2201@P2196 '3)) (set! P2228@rp (P1159@P934@make-record-printer 'stx (lambda (P3153@x P3154@p P3155@wr) (begin (display '"#<syntax " P3154@p) (write (P2286@stx->datum P3153@x) P3154@p) ((lambda (P3159@expr) (if (P1151@P918@annotation? P3159@expr) ((lambda (P3161@src) (if (pair? P3161@src) (begin (display '" [" P3154@p) (display (cdr P3161@src) P3154@p) (display '" of " P3154@p) (display (car P3161@src) P3154@p) (display '"]" P3154@p)) (void))) (P1152@P920@annotation-source P3159@expr)) (void))) (P2212@stx-expr P3153@x)) (display '">" P3154@p))))) (set! P2230@datum->stx (lambda (P3163@id P3164@datum) (P2210@make-stx P3164@datum (P2214@stx-mark* P3163@id) (P2216@stx-subst* P3163@id) (P2218@stx-ae* P3163@id)))) (set! P2232@gen-mark (lambda () (string '#\m))) (set! P2234@anti-mark '#f) (set! P2236@anti-mark? not) (set! P2238@join-wraps (lambda (P3167@m1* P3168@s1* P3169@ae1* P3170@e) ((lambda (P3176@cancel) (begin (set! P3176@cancel (lambda (P3183@ls1 P3184@ls2) ((letrec ((P3187@f (lambda (P3189@x P3190@ls1) (if (null? P3190@ls1) (cdr P3184@ls2) (cons P3189@x (P3187@f (car P3190@ls1) (cdr P3190@ls1))))))) P3187@f) (car P3183@ls1) (cdr P3183@ls1)))) ((lambda (P3177@m2* P3178@s2* P3179@ae2*) (if (and (not (null? P3167@m1*)) (not (null? P3177@m2*)) (P2236@anti-mark? (car P3177@m2*))) (values (P3176@cancel P3167@m1* P3177@m2*) (P3176@cancel P3168@s1* P3178@s2*) (P3176@cancel P3169@ae1* P3179@ae2*)) (values (append P3167@m1* P3177@m2*) (append P3168@s1* P3178@s2*) (append P3169@ae1* P3179@ae2*)))) (P2214@stx-mark* P3170@e) (P2216@stx-subst* P3170@e) (P2218@stx-ae* P3170@e)))) '#f))) (set! P2240@mkstx (lambda (P3193@e P3194@m* P3195@s* P3196@ae*) (if (and (P2208@stx? P3193@e) (not (P2134@top-marked? P3194@m*))) (call-with-values (lambda () (P2238@join-wraps P3194@m* P3195@s* P3196@ae* P3193@e)) (lambda (P3204@P3201@m* P3205@P3202@s* P3206@P3203@ae*) ((lambda (P3210@ae* P3211@s* P3212@m*) (P2210@make-stx (P2212@stx-expr P3193@e) P3212@m* P3211@s* P3210@ae*)) P3206@P3203@ae* P3205@P3202@s* P3204@P3201@m*))) (P2210@make-stx P3193@e P3194@m* P3195@s* P3196@ae*)))) (set! P2242@add-mark (lambda (P3216@m P3217@e P3218@ae) (P2240@mkstx P3217@e (list P3216@m) '(shift) (list P3218@ae)))) (set! P2244@add-subst (lambda (P3222@subst P3223@e) (P2240@mkstx P3223@e '() (list P3222@subst) '()))) (set! P2246@syntax-kind? (lambda (P3226@x P3227@p?) (if (P2208@stx? P3226@x) (P2246@syntax-kind? (P2212@stx-expr P3226@x) P3227@p?) (if (P1151@P918@annotation? P3226@x) (P2246@syntax-kind? (P1153@P922@annotation-expression P3226@x) P3227@p?) (P3227@p? P3226@x))))) (set! P2248@syntax-vector->list (lambda (P3230@x) (if (P2208@stx? P3230@x) ((lambda (P3232@ls P3233@m* P3234@s* P3235@ae*) (map (lambda (P3240@x) (P2240@mkstx P3240@x P3233@m* P3234@s* P3235@ae*)) P3232@ls)) (P2248@syntax-vector->list (P2212@stx-expr P3230@x)) (P2214@stx-mark* P3230@x) (P2216@stx-subst* P3230@x) (P2218@stx-ae* P3230@x)) (if (P1151@P918@annotation? P3230@x) (P2248@syntax-vector->list (P1153@P922@annotation-expression P3230@x)) (if (vector? P3230@x) (vector->list P3230@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" P3230@x)))))) (set! P2250@syntax-pair? (lambda (P3242@x) (P2246@syntax-kind? P3242@x pair?))) (set! P2252@syntax-vector? (lambda (P3244@x) (P2246@syntax-kind? P3244@x vector?))) (set! P2254@syntax-null? (lambda (P3246@x) (P2246@syntax-kind? P3246@x null?))) (set! P2256@syntax-list? (lambda (P3248@x) (or (P2254@syntax-null? P3248@x) (and (P2250@syntax-pair? P3248@x) (P2256@syntax-list? (P2260@syntax-cdr P3248@x)))))) (set! P2258@syntax-car (lambda (P3250@x) (if (P2208@stx? P3250@x) (P2240@mkstx (P2258@syntax-car (P2212@stx-expr P3250@x)) (P2214@stx-mark* P3250@x) (P2216@stx-subst* P3250@x) (P2218@stx-ae* P3250@x)) (if (P1151@P918@annotation? P3250@x) (P2258@syntax-car (P1153@P922@annotation-expression P3250@x)) (if (pair? P3250@x) (car P3250@x) (assertion-violation 'syntax-car '"BUG: not a pair" P3250@x)))))) (set! P2260@syntax-cdr (lambda (P3252@x) (if (P2208@stx? P3252@x) (P2240@mkstx (P2260@syntax-cdr (P2212@stx-expr P3252@x)) (P2214@stx-mark* P3252@x) (P2216@stx-subst* P3252@x) (P2218@stx-ae* P3252@x)) (if (P1151@P918@annotation? P3252@x) (P2260@syntax-cdr (P1153@P922@annotation-expression P3252@x)) (if (pair? P3252@x) (cdr P3252@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" P3252@x)))))) (set! P2262@syntax->list (lambda (P3254@x) (if (P2250@syntax-pair? P3254@x) (cons (P2258@syntax-car P3254@x) (P2262@syntax->list (P2260@syntax-cdr P3254@x))) (if (P2254@syntax-null? P3254@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" P3254@x))))) (set! P2264@id? (lambda (P3256@x) (and (P2208@stx? P3256@x) ((lambda (P3258@expr) (symbol? (if (P1151@P918@annotation? P3258@expr) (P1150@P916@annotation-stripped P3258@expr) P3258@expr))) (P2212@stx-expr P3256@x))))) (set! P2266@id->sym (lambda (P3260@x) (begin (if (not (P2208@stx? P3260@x)) (error 'id->sym '"BUG in ikarus: not an id" P3260@x) (void)) ((lambda (P3262@expr) ((lambda (P3264@sym) (if (symbol? P3264@sym) P3264@sym (error 'id->sym '"BUG in ikarus: not an id" P3260@x))) (if (P1151@P918@annotation? P3262@expr) (P1150@P916@annotation-stripped P3262@expr) P3262@expr))) (P2212@stx-expr P3260@x))))) (set! P2268@same-marks? (lambda (P3266@x P3267@y) (or (and (null? P3266@x) (null? P3267@y)) (and (pair? P3266@x) (pair? P3267@y) (eq? (car P3266@x) (car P3267@y)) (P2268@same-marks? (cdr P3266@x) (cdr P3267@y)))))) (set! P2270@bound-id=? (lambda (P3270@x P3271@y) (and (eq? (P2266@id->sym P3270@x) (P2266@id->sym P3271@y)) (P2268@same-marks? (P2214@stx-mark* P3270@x) (P2214@stx-mark* P3271@y))))) (set! P2272@free-id=? (lambda (P3274@i P3275@j) ((lambda (P3278@t0 P3279@t1) (if (or P3278@t0 P3279@t1) (eq? P3278@t0 P3279@t1) (eq? (P2266@id->sym P3274@i) (P2266@id->sym P3275@j)))) (P2292@id->real-label P3274@i) (P2292@id->real-label P3275@j)))) (set! P2274@valid-bound-ids? (lambda (P3282@id*) (and (for-all P2264@id? P3282@id*) (P2276@distinct-bound-ids? P3282@id*)))) (set! P2276@distinct-bound-ids? (lambda (P3284@id*) (or (null? P3284@id*) (and (not (P2278@bound-id-member? (car P3284@id*) (cdr P3284@id*))) (P2276@distinct-bound-ids? (cdr P3284@id*)))))) (set! P2278@bound-id-member? (lambda (P3286@id P3287@id*) (and (pair? P3287@id*) (or (P2270@bound-id=? P3286@id (car P3287@id*)) (P2278@bound-id-member? P3286@id (cdr P3287@id*)))))) (set! P2280@self-evaluating? (lambda (P3290@x) (or (number? P3290@x) (string? P3290@x) (char? P3290@x) (boolean? P3290@x) (regexp? P3290@x) (bytevector? P3290@x)))) (set! P2282@strip-annotations (lambda (P3292@x) (if (pair? P3292@x) (cons (P2282@strip-annotations (car P3292@x)) (P2282@strip-annotations (cdr P3292@x))) (if (vector? P3292@x) (vector-map P2282@strip-annotations P3292@x) (if (P1151@P918@annotation? P3292@x) (P1150@P916@annotation-stripped P3292@x) P3292@x))))) (set! P2284@strip (lambda (P3294@x P3295@m*) (if (P2134@top-marked? P3295@m*) (if (or (P1151@P918@annotation? P3294@x) (and (pair? P3294@x) (P1151@P918@annotation? (car P3294@x))) (and (vector? P3294@x) (> (vector-length P3294@x) '0) (P1151@P918@annotation? (vector-ref P3294@x '0)))) (P2282@strip-annotations P3294@x) P3294@x) ((letrec ((P3298@f (lambda (P3300@x) (if (P2208@stx? P3300@x) (P2284@strip (P2212@stx-expr P3300@x) (P2214@stx-mark* P3300@x)) (if (P1151@P918@annotation? P3300@x) (P1150@P916@annotation-stripped P3300@x) (if (pair? P3300@x) ((lambda (P3302@a P3303@d) (if (and (eq? P3302@a (car P3300@x)) (eq? P3303@d (cdr P3300@x))) P3300@x (cons P3302@a P3303@d))) (P3298@f (car P3300@x)) (P3298@f (cdr P3300@x))) (if (vector? P3300@x) ((lambda (P3306@old) ((lambda (P3308@new) (if (for-all eq? P3306@old P3308@new) P3300@x (list->vector P3308@new))) (map P3298@f P3306@old))) (vector->list P3300@x)) P3300@x))))))) P3298@f) P3294@x)))) (set! P2286@stx->datum (lambda (P3310@x) (P2284@strip P3310@x '()))) (set! P2288@same-marks*? (lambda (P3312@mark* P3313@mark** P3314@si) (if (null? P3314@si) '#f (if (P2268@same-marks? P3312@mark* (vector-ref P3313@mark** (car P3314@si))) (car P3314@si) (P2288@same-marks*? P3312@mark* P3313@mark** (cdr P3314@si)))))) (set! P2290@id->label (lambda (P3318@id) (or (P2292@id->real-label P3318@id) ((lambda (P3320@t) (if P3320@t ((lambda (P3322@env) ((lambda (P3324@rib) (call-with-values (lambda () (P2144@gen-define-label+loc P3318@id P3324@rib)) (lambda (P3328@P3326@lab P3329@P3327@loc_) ((lambda (P3332@loc_ P3333@lab) (begin (P2185@extend-rib! P3324@rib P3318@id P3333@lab) P3333@lab)) P3329@P3327@loc_ P3328@P3326@lab)))) (P2930@interaction-env-rib P3322@env))) P3320@t) '#f)) (P3008@top-level-context))))) (set! P2292@id->real-label (lambda (P3336@id) ((lambda (P3338@sym) ((letrec ((P3340@search (lambda (P3342@subst* P3343@mark*) (if (null? P3342@subst*) '#f (if (eq? (car P3342@subst*) 'shift) (P3340@search (cdr P3342@subst*) (cdr P3343@mark*)) ((lambda (P3346@rib) ((lambda (P3348@t) (if P3348@t ((lambda (P3350@ht) ((lambda (P3352@si) ((lambda (P3354@i) (if P3354@i (vector-ref (P2167@rib-label* P3346@rib) P3354@i) (P3340@search (cdr P3342@subst*) P3343@mark*))) (and P3352@si (P2288@same-marks*? P3343@mark* (P2165@rib-mark** P3346@rib) (reverse P3352@si))))) (hashtable-ref P3350@ht P3338@sym '#f))) P3348@t) ((letrec ((P3356@f (lambda (P3358@sym* P3359@mark** P3360@label*) (if (null? P3358@sym*) (P3340@search (cdr P3342@subst*) P3343@mark*) (if (and (eq? (car P3358@sym*) P3338@sym) (P2268@same-marks? (car P3359@mark**) P3343@mark*)) (car P3360@label*) (P3356@f (cdr P3358@sym*) (cdr P3359@mark**) (cdr P3360@label*))))))) P3356@f) (P2163@rib-sym* P3346@rib) (P2165@rib-mark** P3346@rib) (P2167@rib-label* P3346@rib)))) (P2169@rib-sealed/freq P3346@rib))) (car P3342@subst*))))))) P3340@search) (P2216@stx-subst* P3336@id) (P2214@stx-mark* P3336@id))) (P2266@id->sym P3336@id)))) (set! P2294@label->binding (lambda (P3364@x P3365@r) ((lambda (P3368@t) (if P3368@t ((lambda (P3370@b) (if (and (pair? P3370@b) (eq? (car P3370@b) '$core-rtd)) (cons '$rtd (map P2687@bless (cdr P3370@b))) (if (and (pair? P3370@b) (eq? (car P3370@b) 'global-rtd)) ((lambda (P3372@lib P3373@loc) (cons '$rtd (symbol-value P3373@loc))) (cadr P3370@b) (cddr P3370@b)) P3370@b))) P3368@t) ((lambda (P3376@t) (if P3376@t (cdr P3376@t) ((lambda (P3378@t) (if P3378@t ((lambda (P3380@env) ((lambda (P3382@t) (if P3382@t ((lambda (P3384@p) (cons* 'lexical (cdr P3384@p) '#f)) P3382@t) '(displaced-lexical . #f))) (assq P3364@x (P2934@interaction-env-locs P3380@env)))) P3378@t) '(displaced-lexical . #f))) (P3008@top-level-context)))) (assq P3364@x P3365@r)))) (P1789@P1443@imported-label->binding P3364@x)))) (set! P2296@make-binding cons) (set! P2298@binding-type car) (set! P2300@binding-value cdr) (set! P2302@raise-unbound-error (lambda (P3386@id) (P2992@syntax-violation* '#f '"unbound identifier" P3386@id (P10182@P9744@make-undefined-violation)))) (set! P2304@syntax-type (lambda (P3388@e P3389@r) (if (P2264@id? P3388@e) ((lambda (P3392@id) ((lambda (P3394@label) ((lambda (P3396@b) ((lambda (P3398@type) ((lambda () (begin (if (not P3394@label) (P2302@raise-unbound-error P3392@id) (void)) ((lambda (P3400@t) (if (memv P3400@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values P3398@type (P2300@binding-value P3396@b) P3392@id) (values 'other '#f '#f))) P3398@type))))) (P2298@binding-type P3396@b))) (P2294@label->binding P3394@label P3389@r))) (P2290@id->label P3392@id))) P3388@e) (if (P2250@syntax-pair? P3388@e) ((lambda (P3402@id) (if (P2264@id? P3402@id) ((lambda (P3404@label) ((lambda (P3406@b) ((lambda (P3408@type) ((lambda () (begin (if (not P3404@label) (P2302@raise-unbound-error P3402@id) (void)) ((lambda (P3410@t) (if (memv P3410@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values P3408@type (P2300@binding-value P3406@b) P3402@id) (values 'call '#f '#f))) P3408@type))))) (P2298@binding-type P3406@b))) (P2294@label->binding P3404@label P3389@r))) (P2290@id->label P3402@id)) (values 'call '#f '#f))) (P2258@syntax-car P3388@e)) ((lambda (P3412@d) (if (P2280@self-evaluating? P3412@d) (values 'constant P3412@d '#f) (values 'other '#f '#f))) (P2286@stx->datum P3388@e)))))) (set! P2318@sanitize-binding (lambda (P3414@x P3415@src) (if (procedure? P3414@x) (cons* 'local-macro P3414@x P3415@src) (if (and (pair? P3414@x) (eq? (car P3414@x) 'macro!) (procedure? (cdr P3414@x))) (cons* 'local-macro! (cdr P3414@x) P3415@src) (if (and (pair? P3414@x) (eq? (car P3414@x) '$rtd)) P3414@x (assertion-violation 'expand '"invalid transformer" P3414@x)))))) (set! P2320@make-variable-transformer (lambda (P3418@x) (if (procedure? P3418@x) (cons 'macro! P3418@x) (assertion-violation 'make-variable-transformer '"not a procedure" P3418@x)))) (set! P2322@variable-transformer? (lambda (P3420@x) (and (pair? P3420@x) (eq? (car P3420@x) 'macro!) (procedure? (cdr P3420@x))))) (set! P2324@variable-transformer-procedure (lambda (P3422@x) (if (P2322@variable-transformer? P3422@x) (cdr P3422@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" P3422@x)))) (set! P2326@make-eval-transformer (lambda (P3424@x) (P2318@sanitize-binding (eval-core (P1246@P1174@expanded->core P3424@x)) P3424@x))) (set! P2637@parse-define (lambda (P3426@x) ((lambda (P3428@t) ((lambda (P3430@ls/false) (if (and P3430@ls/false (apply (lambda (P3432@id P3433@fmls P3434@b P3435@b*) (P2264@id? P3432@id)) P3430@ls/false)) (apply (lambda (P3440@id P3441@fmls P3442@b P3443@b*) (begin (P2799@verify-formals P3441@fmls P3426@x) (values P3440@id (cons 'defun (cons P3441@fmls (cons P3442@b P3443@b*)))))) P3430@ls/false) ((lambda (P3448@t) ((lambda (P3450@ls/false) (if (and P3450@ls/false (apply (lambda (P3452@id P3453@val) (P2264@id? P3452@id)) P3450@ls/false)) (apply (lambda (P3456@id P3457@val) (values P3456@id (cons 'expr P3457@val))) P3450@ls/false) ((lambda (P3460@t) ((lambda (P3462@ls/false) (if (and P3462@ls/false (apply (lambda (P3464@id) (P2264@id? P3464@id)) P3462@ls/false)) (apply (lambda (P3466@id) (values P3466@id (cons 'expr (P2687@bless '(void))))) P3462@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3460@t))) (P2761@syntax-dispatch P3460@t '(_ any)))) P3448@t))) (P2761@syntax-dispatch P3448@t '(_ any any)))) P3428@t))) (P2761@syntax-dispatch P3428@t '(_ (any . any) any . each-any)))) P3426@x))) (set! P2639@parse-define-syntax (lambda (P3468@x) ((lambda (P3470@t) ((lambda (P3472@ls/false) (if (and P3472@ls/false (apply (lambda (P3474@id P3475@val) (P2264@id? P3474@id)) P3472@ls/false)) (apply (lambda (P3478@id P3479@val) (values P3478@id P3479@val)) P3472@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3470@t))) (P2761@syntax-dispatch P3470@t '(_ any any)))) P3468@x))) (set! P2641@scheme-stx-hashtable (make-eq-hashtable)) (set! P2643@scheme-stx (lambda (P3482@sym) (or (hashtable-ref P2641@scheme-stx-hashtable P3482@sym '#f) ((lambda (P3484@subst) ((lambda (P3486@stx) ((lambda (P3488@stx) ((lambda () (begin (hashtable-set! P2641@scheme-stx-hashtable P3482@sym P3488@stx) P3488@stx)))) ((lambda (P3490@t) (if P3490@t ((lambda (P3492@x) ((lambda (P3494@name P3495@label) (P2244@add-subst (P2161@make-rib (list P3494@name) (list P2132@top-mark*) (list P3495@label) '#f '#f) P3486@stx)) (car P3492@x) (cdr P3492@x))) P3490@t) P3486@stx)) (assq P3482@sym P3484@subst)))) (P2210@make-stx P3482@sym P2132@top-mark* '() '()))) (P1747@P1359@library-subst (P1783@P1431@find-library-by-name '(psyntax system $all))))))) (set! P2645@lexical-var car) (set! P2647@lexical-mutable? cdr) (set! P2649@set-lexical-mutable! set-cdr!) (set! P2651@add-lexical (lambda (P3498@lab P3499@lex P3500@r) (cons (cons* P3498@lab 'lexical P3499@lex '#f) P3500@r))) (set! P2653@add-lexicals (lambda (P3504@lab* P3505@lex* P3506@r) (if (null? P3504@lab*) P3506@r (P2653@add-lexicals (cdr P3504@lab*) (cdr P3505@lex*) (P2651@add-lexical (car P3504@lab*) (car P3505@lex*) P3506@r))))) (set! P2655@letrec-helper (lambda (P3510@e P3511@r P3512@mr P3513@build) ((lambda (P3518@t) ((lambda (P3520@ls/false) (if P3520@ls/false (apply (lambda (P3522@lhs* P3523@rhs* P3524@b P3525@b*) (if (not (P2274@valid-bound-ids? P3522@lhs*)) (P2691@invalid-fmls-error P3510@e P3522@lhs*) ((lambda (P3530@lex* P3531@lab*) ((lambda (P3534@rib P3535@r) ((lambda (P3538@body P3539@rhs*) (P3513@build '#f P3530@lex* P3539@rhs* P3538@body)) (P2817@chi-internal (P2244@add-subst P3534@rib (cons P3524@b P3525@b*)) P3535@r P3512@mr) (P2791@chi-expr* (map (lambda (P3542@x) (P2244@add-subst P3534@rib P3542@x)) P3523@rhs*) P3535@r P3512@mr))) (P2195@make-full-rib P3522@lhs* P3531@lab*) (P2653@add-lexicals P3531@lab* P3530@lex* P3511@r))) (map P2136@gen-lexical P3522@lhs*) (map P2140@gen-label P3522@lhs*)))) P3520@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3518@t))) (P2761@syntax-dispatch P3518@t '(_ #(each (any any)) any . each-any)))) P3510@e))) (set! P2657@letrec-transformer (lambda (P3544@e P3545@r P3546@mr) (P2655@letrec-helper P3544@e P3545@r P3546@mr P2105@P1964@build-letrec))) (set! P2659@letrec*-transformer (lambda (P3550@e P3551@r P3552@mr) (P2655@letrec-helper P3550@e P3551@r P3552@mr P2106@P1966@build-letrec*))) (set! P2661@fluid-let-syntax-transformer (lambda (P3556@e P3557@r P3558@mr) ((lambda (P3563@lookup) (begin (set! P3563@lookup (lambda (P3582@x) (or (P2290@id->label P3582@x) (P2994@syntax-violation '#f '"unbound identifier" P3556@e P3582@x)))) ((lambda (P3564@t) ((lambda (P3566@ls/false) (if P3566@ls/false (apply (lambda (P3568@lhs* P3569@rhs* P3570@b P3571@b*) (if (not (P2274@valid-bound-ids? P3568@lhs*)) (P2691@invalid-fmls-error P3556@e P3568@lhs*) ((lambda (P3576@lab* P3577@rhs*) (P2817@chi-internal (cons P3570@b P3571@b*) (append (map cons P3576@lab* P3577@rhs*) P3557@r) (append (map cons P3576@lab* P3577@rhs*) P3558@mr))) (map P3563@lookup P3568@lhs*) (map (lambda (P3580@x) (P2326@make-eval-transformer (P2854@expand-transformer P3580@x P3558@mr))) P3569@rhs*)))) P3566@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3564@t))) (P2761@syntax-dispatch P3564@t '(_ #(each (any any)) any . each-any)))) P3556@e))) '#f))) (set! P2663@type-descriptor-transformer (lambda (P3584@e P3585@r P3586@mr) ((lambda (P3590@t) ((lambda (P3592@ls/false) (if (and P3592@ls/false (apply (lambda (P3594@id) (P2264@id? P3594@id)) P3592@ls/false)) (apply (lambda (P3596@id) ((lambda (P3598@lab) ((lambda (P3600@b) ((lambda (P3602@type) ((lambda () (begin (if (not P3598@lab) (P2302@raise-unbound-error P3596@id) (void)) (if (not (and (eq? P3602@type '$rtd) (not (list? (P2300@binding-value P3600@b))))) (P2994@syntax-violation '#f '"not a record type" P3584@e) (void)) (list 'quote (P2300@binding-value P3600@b)))))) (P2298@binding-type P3600@b))) (P2294@label->binding P3598@lab P3585@r))) (P2290@id->label P3596@id))) P3592@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3590@t))) (P2761@syntax-dispatch P3590@t '(_ any)))) P3584@e))) (set! P2665@record-type-descriptor-transformer (lambda (P3604@e P3605@r P3606@mr) ((lambda (P3610@t) ((lambda (P3612@ls/false) (if (and P3612@ls/false (apply (lambda (P3614@id) (P2264@id? P3614@id)) P3612@ls/false)) (apply (lambda (P3616@id) ((lambda (P3618@lab) ((lambda (P3620@b) ((lambda (P3622@type) ((lambda () (begin (if (not P3618@lab) (P2302@raise-unbound-error P3616@id) (void)) (if (not (and (eq? P3622@type '$rtd) (list? (P2300@binding-value P3620@b)))) (P2994@syntax-violation '#f '"not a record type" P3604@e) (void)) (P2795@chi-expr (car (P2300@binding-value P3620@b)) P3605@r P3606@mr))))) (P2298@binding-type P3620@b))) (P2294@label->binding P3618@lab P3605@r))) (P2290@id->label P3616@id))) P3612@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3610@t))) (P2761@syntax-dispatch P3610@t '(_ any)))) P3604@e))) (set! P2667@record-constructor-descriptor-transformer (lambda (P3624@e P3625@r P3626@mr) ((lambda (P3630@t) ((lambda (P3632@ls/false) (if (and P3632@ls/false (apply (lambda (P3634@id) (P2264@id? P3634@id)) P3632@ls/false)) (apply (lambda (P3636@id) ((lambda (P3638@lab) ((lambda (P3640@b) ((lambda (P3642@type) ((lambda () (begin (if (not P3638@lab) (P2302@raise-unbound-error P3636@id) (void)) (if (not (and (eq? P3642@type '$rtd) (list? (P2300@binding-value P3640@b)))) (P2994@syntax-violation '#f '"invalid type" P3624@e) (void)) (P2795@chi-expr (cadr (P2300@binding-value P3640@b)) P3625@r P3626@mr))))) (P2298@binding-type P3640@b))) (P2294@label->binding P3638@lab P3625@r))) (P2290@id->label P3636@id))) P3632@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3630@t))) (P2761@syntax-dispatch P3630@t '(_ any)))) P3624@e))) (set! P2669@when-macro (lambda (P3644@e) ((lambda (P3646@t) ((lambda (P3648@ls/false) (if P3648@ls/false (apply (lambda (P3650@test P3651@e P3652@e*) (P2687@bless (list 'if P3650@test (cons 'begin (cons P3651@e P3652@e*))))) P3648@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3646@t))) (P2761@syntax-dispatch P3646@t '(_ any any . each-any)))) P3644@e))) (set! P2671@unless-macro (lambda (P3656@e) ((lambda (P3658@t) ((lambda (P3660@ls/false) (if P3660@ls/false (apply (lambda (P3662@test P3663@e P3664@e*) (P2687@bless (list 'if (list 'not P3662@test) (cons 'begin (cons P3663@e P3664@e*))))) P3660@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3658@t))) (P2761@syntax-dispatch P3658@t '(_ any any . each-any)))) P3656@e))) (set! P2673@if-transformer (lambda (P3668@e P3669@r P3670@mr) ((lambda (P3674@t) ((lambda (P3676@ls/false) (if P3676@ls/false (apply (lambda (P3678@e0 P3679@e1 P3680@e2) (list 'if (P2795@chi-expr P3678@e0 P3669@r P3670@mr) (P2795@chi-expr P3679@e1 P3669@r P3670@mr) (P2795@chi-expr P3680@e2 P3669@r P3670@mr))) P3676@ls/false) ((lambda (P3684@t) ((lambda (P3686@ls/false) (if P3686@ls/false (apply (lambda (P3688@e0 P3689@e1) (list 'if (P2795@chi-expr P3688@e0 P3669@r P3670@mr) (P2795@chi-expr P3689@e1 P3669@r P3670@mr) (P2104@P1962@build-void))) P3686@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3684@t))) (P2761@syntax-dispatch P3684@t '(_ any any)))) P3674@t))) (P2761@syntax-dispatch P3674@t '(_ any any any)))) P3668@e))) (set! P2675@and-transformer (lambda (P3692@e P3693@r P3694@mr) ((lambda (P3698@t) ((lambda (P3700@ls/false) (if P3700@ls/false (apply (lambda (P3702@e*) (cons 'and (P2791@chi-expr* P3702@e* P3693@r P3694@mr))) P3700@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3698@t))) (P2761@syntax-dispatch P3698@t '(_ . each-any)))) P3692@e))) (set! P2677@or-transformer (lambda (P3704@e P3705@r P3706@mr) ((lambda (P3710@t) ((lambda (P3712@ls/false) (if P3712@ls/false (apply (lambda (P3714@e*) (cons 'or (P2791@chi-expr* P3714@e* P3705@r P3706@mr))) P3712@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3710@t))) (P2761@syntax-dispatch P3710@t '(_ . each-any)))) P3704@e))) (set! P2679@case-macro (lambda (P3716@e) ((lambda (P3719@build-last P3721@build-one) (begin (set! P3719@build-last (lambda (P3758@cls) ((lambda (P3760@t) ((lambda (P3762@ls/false) (if P3762@ls/false (apply (lambda (P3764@e P3765@e*) (cons 'begin (cons P3764@e P3765@e*))) P3762@ls/false) ((lambda (P3768@t) ((lambda (P3770@ls/false) (if P3770@ls/false (apply (lambda () (P3721@build-one P3758@cls '(if #f #f))) P3770@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3768@t))) (P2761@syntax-dispatch P3768@t '_))) P3760@t))) (P2761@syntax-dispatch P3760@t '(#(scheme-id else) any . each-any)))) P3758@cls))) (set! P3721@build-one (lambda (P3744@cls P3745@k) ((lambda (P3748@t) ((lambda (P3750@ls/false) (if P3750@ls/false (apply (lambda (P3752@d* P3753@e P3754@e*) (list 'if (list 'memv 't (list 'quote P3752@d*)) (cons 'begin (cons P3753@e P3754@e*)) P3745@k)) P3750@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3748@t))) (P2761@syntax-dispatch P3748@t '(each-any any . each-any)))) P3744@cls))) ((lambda (P3722@t) ((lambda (P3724@ls/false) (if P3724@ls/false (apply (lambda (P3726@expr) (P2687@bless (cons 'let (cons (list (list 't P3726@expr)) '((if #f #f)))))) P3724@ls/false) ((lambda (P3728@t) ((lambda (P3730@ls/false) (if P3730@ls/false (apply (lambda (P3732@expr P3733@cls P3734@cls*) (P2687@bless (list 'let (list (list 't P3732@expr)) ((letrec ((P3738@f (lambda (P3740@cls P3741@cls*) (if (null? P3741@cls*) (P3719@build-last P3740@cls) (P3721@build-one P3740@cls (P3738@f (car P3741@cls*) (cdr P3741@cls*))))))) P3738@f) P3733@cls P3734@cls*)))) P3730@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3728@t))) (P2761@syntax-dispatch P3728@t '(_ any any . each-any)))) P3722@t))) (P2761@syntax-dispatch P3722@t '(_ any)))) P3716@e))) '#f '#f))) (set! P2681@quote-transformer (lambda (P3772@e P3773@r P3774@mr) ((lambda (P3778@t) ((lambda (P3780@ls/false) (if P3780@ls/false (apply (lambda (P3782@datum) (list 'quote (P2286@stx->datum P3782@datum))) P3780@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3778@t))) (P2761@syntax-dispatch P3778@t '(_ any)))) P3772@e))) (set! P2683@case-lambda-transformer (lambda (P3784@e P3785@r P3786@mr) ((lambda (P3790@t) ((lambda (P3792@ls/false) (if P3792@ls/false (apply (lambda (P3794@fmls* P3795@b* P3796@b**) (call-with-values (lambda () (P2803@chi-lambda-clause* P3784@e P3794@fmls* (map cons P3795@b* P3796@b**) P3785@r P3786@mr)) (lambda (P3802@P3800@fmls* P3803@P3801@body*) ((lambda (P3806@body* P3807@fmls*) (P2101@P1912@build-case-lambda '#f P3807@fmls* P3806@body*)) P3803@P3801@body* P3802@P3800@fmls*)))) P3792@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3790@t))) (P2761@syntax-dispatch P3790@t '(_ . #(each (any any . each-any)))))) P3784@e))) (set! P2685@lambda-transformer (lambda (P3810@e P3811@r P3812@mr) ((lambda (P3816@t) ((lambda (P3818@ls/false) (if P3818@ls/false (apply (lambda (P3820@fmls P3821@b P3822@b*) (call-with-values (lambda () (P2801@chi-lambda-clause P3810@e P3820@fmls (cons P3821@b P3822@b*) P3811@r P3812@mr)) (lambda (P3828@P3826@fmls P3829@P3827@body) ((lambda (P3832@body P3833@fmls) (P2100@P1910@build-lambda '#f P3833@fmls P3832@body)) P3829@P3827@body P3828@P3826@fmls)))) P3818@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3816@t))) (P2761@syntax-dispatch P3816@t '(_ any any . each-any)))) P3810@e))) (set! P2687@bless (lambda (P3836@x) (P2240@mkstx ((letrec ((P3838@f (lambda (P3840@x) (if (P2208@stx? P3840@x) P3840@x (if (pair? P3840@x) (cons (P3838@f (car P3840@x)) (P3838@f (cdr P3840@x))) (if (symbol? P3840@x) (P2643@scheme-stx P3840@x) (if (vector? P3840@x) (vector-map P3838@f P3840@x) P3840@x))))))) P3838@f) P3836@x) '() '() '()))) (set! P2689@with-syntax-macro (lambda (P3842@e) ((lambda (P3844@t) ((lambda (P3846@ls/false) (if P3846@ls/false (apply (lambda (P3848@pat* P3849@expr* P3850@b P3851@b*) ((lambda (P3856@idn*) (begin (P2799@verify-formals (map car P3856@idn*) P3842@e) ((lambda (P3858@t*) (P2687@bless (list 'let (map list P3858@t* P3849@expr*) ((letrec ((P3860@f (lambda (P3862@pat* P3863@t*) (if (null? P3862@pat*) (cons 'begin (cons '#f (cons P3850@b P3851@b*))) (list 'syntax-case (car P3863@t*) '() (list (car P3862@pat*) (P3860@f (cdr P3862@pat*) (cdr P3863@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car P3862@pat*)) (car P3863@t*)))))))) P3860@f) P3848@pat* P3858@t*)))) (P2976@generate-temporaries P3849@expr*)))) ((letrec ((P3866@f (lambda (P3868@pat*) (if (null? P3868@pat*) '() (call-with-values (lambda () (P2759@convert-pattern (car P3868@pat*) '())) (lambda (P3872@P3870@pat P3873@P3871@idn*) ((lambda (P3876@idn* P3877@pat) (append P3876@idn* (P3866@f (cdr P3868@pat*)))) P3873@P3871@idn* P3872@P3870@pat))))))) P3866@f) P3848@pat*))) P3846@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3844@t))) (P2761@syntax-dispatch P3844@t '(_ #(each (any any)) any . each-any)))) P3842@e))) (set! P2691@invalid-fmls-error (lambda (P3880@stx P3881@fmls) ((lambda (P3884@t) ((lambda (P3886@ls/false) (if P3886@ls/false (apply (lambda (P3888@id* P3889@last) ((letrec ((P3892@f (lambda (P3894@id*) (if (null? P3894@id*) (values) (if (not (P2264@id? (car P3894@id*))) (P2994@syntax-violation '#f '"not an identifier" P3880@stx (car P3894@id*)) (begin (P3892@f (cdr P3894@id*)) (if (P2278@bound-id-member? (car P3894@id*) (cdr P3894@id*)) (P2994@syntax-violation '#f '"duplicate binding" P3880@stx (car P3894@id*)) (void)))))))) P3892@f) (if (P2264@id? P3889@last) (cons P3889@last P3888@id*) (if (P2254@syntax-null? P3889@last) P3888@id* (P2994@syntax-violation '#f '"not an identifier" P3880@stx P3889@last))))) P3886@ls/false) ((lambda (P3896@t) ((lambda (P3898@ls/false) (if P3898@ls/false (apply (lambda () (P2994@syntax-violation '#f '"malformed binding form" P3880@stx P3881@fmls)) P3898@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3896@t))) (P2761@syntax-dispatch P3896@t '_))) P3884@t))) (P2761@syntax-dispatch P3884@t '#(each+ any () any)))) P3881@fmls))) (set! P2693@let-macro (lambda (P3900@stx) ((lambda (P3902@t) ((lambda (P3904@ls/false) (if P3904@ls/false (apply (lambda (P3906@lhs* P3907@rhs* P3908@b P3909@b*) (if (P2274@valid-bound-ids? P3906@lhs*) (P2687@bless (cons (cons 'lambda (cons P3906@lhs* (cons P3908@b P3909@b*))) P3907@rhs*)) (P2691@invalid-fmls-error P3900@stx P3906@lhs*))) P3904@ls/false) ((lambda (P3914@t) ((lambda (P3916@ls/false) (if (and P3916@ls/false (apply (lambda (P3918@f P3919@lhs* P3920@rhs* P3921@b P3922@b*) (P2264@id? P3918@f)) P3916@ls/false)) (apply (lambda (P3928@f P3929@lhs* P3930@rhs* P3931@b P3932@b*) (if (P2274@valid-bound-ids? P3929@lhs*) (P2687@bless (cons (list 'letrec (list (list P3928@f (cons 'lambda (cons P3929@lhs* (cons P3931@b P3932@b*))))) P3928@f) P3930@rhs*)) (P2691@invalid-fmls-error P3900@stx P3929@lhs*))) P3916@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3914@t))) (P2761@syntax-dispatch P3914@t '(_ any #(each (any any)) any . each-any)))) P3902@t))) (P2761@syntax-dispatch P3902@t '(_ #(each (any any)) any . each-any)))) P3900@stx))) (set! P2695@let-values-macro (lambda (P3938@stx) ((lambda (P3941@rename P3943@rename*) (begin (set! P3941@rename (lambda (P4039@x P4040@old* P4041@new*) (begin (if (not (P2264@id? P4039@x)) (P2994@syntax-violation '#f '"not an indentifier" P3938@stx P4039@x) (void)) (if (P2278@bound-id-member? P4039@x P4040@old*) (P2994@syntax-violation '#f '"duplicate binding" P3938@stx P4039@x) (void)) ((lambda (P4045@y) (values P4045@y (cons P4039@x P4040@old*) (cons P4045@y P4041@new*))) (P1148@P912@gensym (P3000@syntax->datum P4039@x)))))) (set! P3943@rename* (lambda (P4021@x* P4022@old* P4023@new*) (if (null? P4021@x*) (values '() P4022@old* P4023@new*) (call-with-values (lambda () (P3941@rename (car P4021@x*) P4022@old* P4023@new*)) (lambda (P4027@x P4028@old* P4029@new*) (call-with-values (lambda () (P3943@rename* (cdr P4021@x*) P4028@old* P4029@new*)) (lambda (P4033@x* P4034@old* P4035@new*) (values (cons P4027@x P4033@x*) P4034@old* P4035@new*)))))))) ((lambda (P3944@t) ((lambda (P3946@ls/false) (if P3946@ls/false (apply (lambda (P3948@b P3949@b*) (cons* (P2687@bless 'let) '() P3948@b P3949@b*)) P3946@ls/false) ((lambda (P3952@t) ((lambda (P3954@ls/false) (if P3954@ls/false (apply (lambda (P3956@lhs* P3957@rhs* P3958@b P3959@b*) (P2687@bless ((letrec ((P3964@f (lambda (P3966@lhs* P3967@rhs* P3968@old* P3969@new*) (if (null? P3966@lhs*) (cons 'let (cons (map list P3968@old* P3969@new*) (cons P3958@b P3959@b*))) ((lambda (P3974@t) ((lambda (P3976@ls/false) (if P3976@ls/false (apply (lambda (P3978@x*) (call-with-values (lambda () (P3943@rename* P3978@x* P3968@old* P3969@new*)) (lambda (P3983@P3980@y* P3984@P3981@old* P3985@P3982@new*) ((lambda (P3989@new* P3990@old* P3991@y*) (list 'call-with-values (list 'lambda '() (car P3967@rhs*)) (list 'lambda P3991@y* (P3964@f (cdr P3966@lhs*) (cdr P3967@rhs*) P3990@old* P3989@new*)))) P3985@P3982@new* P3984@P3981@old* P3983@P3980@y*)))) P3976@ls/false) ((lambda (P3995@t) ((lambda (P3997@ls/false) (if P3997@ls/false (apply (lambda (P3999@x* P4000@x) (call-with-values (lambda () (P3941@rename P4000@x P3968@old* P3969@new*)) (lambda (P4003@y P4004@old* P4005@new*) (call-with-values (lambda () (P3943@rename* P3999@x* P4004@old* P4005@new*)) (lambda (P4009@y* P4010@old* P4011@new*) (list 'call-with-values (list 'lambda '() (car P3967@rhs*)) (list 'lambda (append P4009@y* P4003@y) (P3964@f (cdr P3966@lhs*) (cdr P3967@rhs*) P4010@old* P4011@new*)))))))) P3997@ls/false) ((lambda (P4015@t) ((lambda (P4017@ls/false) (if P4017@ls/false (apply (lambda (P4019@others) (P2994@syntax-violation '#f '"malformed bindings" P3938@stx P4019@others)) P4017@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4015@t))) (P2761@syntax-dispatch P4015@t 'any))) P3995@t))) (P2761@syntax-dispatch P3995@t '#(each+ any () any)))) P3974@t))) (P2761@syntax-dispatch P3974@t 'each-any))) (car P3966@lhs*)))))) P3964@f) P3956@lhs* P3957@rhs* '() '()))) P3954@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P3952@t))) (P2761@syntax-dispatch P3952@t '(_ #(each (any any)) any . each-any)))) P3944@t))) (P2761@syntax-dispatch P3944@t '(_ () any . each-any)))) P3938@stx))) '#f '#f))) (set! P2697@let*-values-macro (lambda (P4047@stx) ((lambda (P4050@check) (begin (set! P4050@check (lambda (P4097@x*) (if (not (null? P4097@x*)) ((lambda (P4099@x) (begin (if (not (P2264@id? P4099@x)) (P2994@syntax-violation '#f '"not an identifier" P4047@stx P4099@x) (void)) (P4050@check (cdr P4097@x*)) (if (P2278@bound-id-member? P4099@x (cdr P4097@x*)) (P2994@syntax-violation '#f '"duplicate identifier" P4047@stx P4099@x) (void)))) (car P4097@x*)) (void)))) ((lambda (P4051@t) ((lambda (P4053@ls/false) (if P4053@ls/false (apply (lambda (P4055@b P4056@b*) (cons* (P2687@bless 'let) '() P4055@b P4056@b*)) P4053@ls/false) ((lambda (P4059@t) ((lambda (P4061@ls/false) (if P4061@ls/false (apply (lambda (P4063@lhs* P4064@rhs* P4065@b P4066@b*) (P2687@bless ((letrec ((P4071@f (lambda (P4073@lhs* P4074@rhs*) (if (null? P4073@lhs*) (cons 'begin (cons P4065@b P4066@b*)) ((lambda (P4077@t) ((lambda (P4079@ls/false) (if P4079@ls/false (apply (lambda (P4081@x*) (begin (P4050@check P4081@x*) (list 'call-with-values (list 'lambda '() (car P4074@rhs*)) (list 'lambda P4081@x* (P4071@f (cdr P4073@lhs*) (cdr P4074@rhs*)))))) P4079@ls/false) ((lambda (P4083@t) ((lambda (P4085@ls/false) (if P4085@ls/false (apply (lambda (P4087@x* P4088@x) (begin (P4050@check (cons P4088@x P4087@x*)) (list 'call-with-values (list 'lambda '() (car P4074@rhs*)) (list 'lambda (append P4087@x* P4088@x) (P4071@f (cdr P4073@lhs*) (cdr P4074@rhs*)))))) P4085@ls/false) ((lambda (P4091@t) ((lambda (P4093@ls/false) (if P4093@ls/false (apply (lambda (P4095@others) (P2994@syntax-violation '#f '"malformed bindings" P4047@stx P4095@others)) P4093@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4091@t))) (P2761@syntax-dispatch P4091@t 'any))) P4083@t))) (P2761@syntax-dispatch P4083@t '#(each+ any () any)))) P4077@t))) (P2761@syntax-dispatch P4077@t 'each-any))) (car P4073@lhs*)))))) P4071@f) P4063@lhs* P4064@rhs*))) P4061@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4059@t))) (P2761@syntax-dispatch P4059@t '(_ #(each (any any)) any . each-any)))) P4051@t))) (P2761@syntax-dispatch P4051@t '(_ () any . each-any)))) P4047@stx))) '#f))) (set! P2699@trace-lambda-macro (lambda (P4101@stx) ((lambda (P4103@t) ((lambda (P4105@ls/false) (if P4105@ls/false (apply (lambda (P4107@who P4108@fmls P4109@b P4110@b*) (if (P2274@valid-bound-ids? P4108@fmls) (P2687@bless (list 'make-traced-procedure (list 'quote P4107@who) (cons 'lambda (cons P4108@fmls (cons P4109@b P4110@b*))))) (P2691@invalid-fmls-error P4101@stx P4108@fmls))) P4105@ls/false) ((lambda (P4115@t) ((lambda (P4117@ls/false) (if P4117@ls/false (apply (lambda (P4119@who P4120@fmls P4121@last P4122@b P4123@b*) (if (P2274@valid-bound-ids? (cons P4121@last P4120@fmls)) (P2687@bless (list 'make-traced-procedure (list 'quote P4119@who) (cons 'lambda (cons (append P4120@fmls P4121@last) (cons P4122@b P4123@b*))))) (P2691@invalid-fmls-error P4101@stx (append P4120@fmls P4121@last)))) P4117@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4115@t))) (P2761@syntax-dispatch P4115@t '(_ any #(each+ any () any) any . each-any)))) P4103@t))) (P2761@syntax-dispatch P4103@t '(_ any each-any any . each-any)))) P4101@stx))) (set! P2701@trace-define-macro (lambda (P4129@stx) ((lambda (P4131@t) ((lambda (P4133@ls/false) (if P4133@ls/false (apply (lambda (P4135@who P4136@fmls P4137@b P4138@b*) (if (P2274@valid-bound-ids? P4136@fmls) (P2687@bless (list 'define P4135@who (list 'make-traced-procedure (list 'quote P4135@who) (cons 'lambda (cons P4136@fmls (cons P4137@b P4138@b*)))))) (P2691@invalid-fmls-error P4129@stx P4136@fmls))) P4133@ls/false) ((lambda (P4143@t) ((lambda (P4145@ls/false) (if P4145@ls/false (apply (lambda (P4147@who P4148@fmls P4149@last P4150@b P4151@b*) (if (P2274@valid-bound-ids? (cons P4149@last P4148@fmls)) (P2687@bless (list 'define P4147@who (list 'make-traced-procedure (list 'quote P4147@who) (cons 'lambda (cons (append P4148@fmls P4149@last) (cons P4150@b P4151@b*)))))) (P2691@invalid-fmls-error P4129@stx (append P4148@fmls P4149@last)))) P4145@ls/false) ((lambda (P4157@t) ((lambda (P4159@ls/false) (if P4159@ls/false (apply (lambda (P4161@who P4162@expr) (if (P2264@id? P4161@who) (P2687@bless (list 'define P4161@who (list 'let (list (list 'v P4162@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote P4161@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (P2994@syntax-violation '#f '"invalid name" P4129@stx))) P4159@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4157@t))) (P2761@syntax-dispatch P4157@t '(_ any any)))) P4143@t))) (P2761@syntax-dispatch P4143@t '(_ (any . #(each+ any () any)) any . each-any)))) P4131@t))) (P2761@syntax-dispatch P4131@t '(_ (any . each-any) any . each-any)))) P4129@stx))) (set! P2703@trace-define-syntax-macro (lambda (P4165@stx) ((lambda (P4167@t) ((lambda (P4169@ls/false) (if P4169@ls/false (apply (lambda (P4171@who P4172@expr) (if (P2264@id? P4171@who) (P2687@bless (list 'define-syntax P4171@who (list 'make-traced-macro (list 'quote P4171@who) P4172@expr))) (P2994@syntax-violation '#f '"invalid name" P4165@stx))) P4169@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4167@t))) (P2761@syntax-dispatch P4167@t '(_ any any)))) P4165@stx))) (set! P2705@trace-let/rec-syntax (lambda (P4175@who) (lambda (P4177@stx) ((lambda (P4179@t) ((lambda (P4181@ls/false) (if P4181@ls/false (apply (lambda (P4183@lhs* P4184@rhs* P4185@b P4186@b*) (if (P2274@valid-bound-ids? P4183@lhs*) ((lambda (P4191@rhs*) (P2687@bless (cons P4175@who (cons (map list P4183@lhs* P4191@rhs*) (cons P4185@b P4186@b*))))) (map (lambda (P4193@lhs P4194@rhs) (list 'make-traced-macro (list 'quote P4193@lhs) P4194@rhs)) P4183@lhs* P4184@rhs*)) (P2691@invalid-fmls-error P4177@stx P4183@lhs*))) P4181@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4179@t))) (P2761@syntax-dispatch P4179@t '(_ #(each (any any)) any . each-any)))) P4177@stx)))) (set! P2707@trace-let-syntax-macro (P2705@trace-let/rec-syntax 'let-syntax)) (set! P2709@trace-letrec-syntax-macro (P2705@trace-let/rec-syntax 'letrec-syntax)) (set! P2711@guard-macro (lambda (P4197@x) ((lambda (P4200@gen-clauses) (begin (set! P4200@gen-clauses (lambda (P4223@con P4224@outerk P4225@clause*) ((lambda (P4230@f P4232@f*) (begin (set! P4230@f (lambda (P4283@x P4284@k) ((lambda (P4287@t) ((lambda (P4289@ls/false) (if P4289@ls/false (apply (lambda (P4291@e P4292@p) ((lambda (P4295@t) (list 'let (list (list P4295@t P4291@e)) (list 'if P4295@t (list P4292@p P4295@t) P4284@k))) (P1148@P912@gensym))) P4289@ls/false) ((lambda (P4297@t) ((lambda (P4299@ls/false) (if P4299@ls/false (apply (lambda (P4301@e) ((lambda (P4303@t) (list 'let (list (list P4303@t P4301@e)) (list 'if P4303@t P4303@t P4284@k))) (P1148@P912@gensym))) P4299@ls/false) ((lambda (P4305@t) ((lambda (P4307@ls/false) (if P4307@ls/false (apply (lambda (P4309@e P4310@v P4311@v*) (list 'if P4309@e (cons 'begin (cons P4310@v P4311@v*)) P4284@k)) P4307@ls/false) ((lambda (P4315@t) ((lambda (P4317@ls/false) (if P4317@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid guard clause" P4283@x)) P4317@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4315@t))) (P2761@syntax-dispatch P4315@t '_))) P4305@t))) (P2761@syntax-dispatch P4305@t '(any any . each-any)))) P4297@t))) (P2761@syntax-dispatch P4297@t '(any)))) P4287@t))) (P2761@syntax-dispatch P4287@t '(any #(scheme-id =>) any)))) P4283@x))) (set! P4232@f* (lambda (P4243@x*) ((lambda (P4245@t) ((lambda (P4247@ls/false) (if P4247@ls/false (apply (lambda () ((lambda (P4249@g) (values (list P4249@g (list 'lambda '() (list 'raise-continuable P4223@con))) P4249@g)) (P1148@P912@gensym))) P4247@ls/false) ((lambda (P4251@t) ((lambda (P4253@ls/false) (if P4253@ls/false (apply (lambda (P4255@e P4256@e*) (values (cons 'begin (cons P4255@e P4256@e*)) '#f)) P4253@ls/false) ((lambda (P4259@t) ((lambda (P4261@ls/false) (if P4261@ls/false (apply (lambda (P4263@cls P4264@cls*) (call-with-values (lambda () (P4232@f* P4264@cls*)) (lambda (P4269@P4267@e P4270@P4268@g) ((lambda (P4273@g P4274@e) (values (P4230@f P4263@cls P4274@e) P4273@g)) P4270@P4268@g P4269@P4267@e)))) P4261@ls/false) ((lambda (P4277@t) ((lambda (P4279@ls/false) (if P4279@ls/false (apply (lambda (P4281@others) (P2994@syntax-violation '#f '"invalid guard clause" P4281@others)) P4279@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4277@t))) (P2761@syntax-dispatch P4277@t 'any))) P4259@t))) (P2761@syntax-dispatch P4259@t '(any . any)))) P4251@t))) (P2761@syntax-dispatch P4251@t '((#(scheme-id else) any . each-any))))) P4245@t))) (P2761@syntax-dispatch P4245@t '()))) P4243@x*))) (call-with-values (lambda () (P4232@f* P4225@clause*)) (lambda (P4235@P4233@code P4236@P4234@raisek) ((lambda (P4239@raisek P4240@code) (if P4239@raisek (list (list 'call/cc (list 'lambda (list P4239@raisek) (list P4224@outerk (list 'lambda '() P4240@code))))) (list P4224@outerk (list 'lambda '() P4240@code)))) P4236@P4234@raisek P4235@P4233@code))))) '#f '#f))) ((lambda (P4201@t) ((lambda (P4203@ls/false) (if (and P4203@ls/false (apply (lambda (P4205@con P4206@clause* P4207@b P4208@b*) (P2264@id? P4205@con)) P4203@ls/false)) (apply (lambda (P4213@con P4214@clause* P4215@b P4216@b*) ((lambda (P4221@outerk) (P2687@bless (list (list 'call/cc (list 'lambda (list P4221@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list P4213@con) (P4200@gen-clauses P4213@con P4221@outerk P4214@clause*)) (cons 'lambda (cons '() (cons P4215@b P4216@b*)))))))))) (P1148@P912@gensym))) P4203@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4201@t))) (P2761@syntax-dispatch P4201@t '(_ (any . each-any) any . each-any)))) P4197@x))) '#f))) (set! P2713@define-enumeration-macro (lambda (P4319@stx) ((lambda (P4322@set? P4324@remove-dups) (begin (set! P4322@set? (lambda (P4347@x) (or (null? P4347@x) (and (not (memq (car P4347@x) (cdr P4347@x))) (P4322@set? (cdr P4347@x)))))) (set! P4324@remove-dups (lambda (P4345@ls) (if (null? P4345@ls) '() (cons (car P4345@ls) (P4324@remove-dups (remq (car P4345@ls) (cdr P4345@ls))))))) ((lambda (P4325@t) ((lambda (P4327@ls/false) (if (and P4327@ls/false (apply (lambda (P4329@name P4330@id* P4331@maker) (and (P2264@id? P4329@name) (P2264@id? P4331@maker) (for-all P2264@id? P4330@id*))) P4327@ls/false)) (apply (lambda (P4335@name P4336@id* P4337@maker) ((lambda (P4341@name* P4342@mk) (P2687@bless (list 'begin (list 'define P4342@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote P4341@name*)))) (list 'define-syntax P4335@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote P4341@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote P4335@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax P4337@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote P4337@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote P4341@name*)) (cons 'syntax-violation (cons (list 'quote P4337@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons P4342@mk '('(n* ...)))))))))))) (P4324@remove-dups (P3000@syntax->datum P4336@id*)) (P1148@P912@gensym))) P4327@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4325@t))) (P2761@syntax-dispatch P4325@t '(_ any each-any any)))) P4319@stx))) '#f '#f))) (set! P2715@time-macro (lambda (P4349@stx) ((lambda (P4351@t) ((lambda (P4353@ls/false) (if P4353@ls/false (apply (lambda (P4355@expr) (P2687@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() P4355@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) P4353@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4351@t))) (P2761@syntax-dispatch P4351@t '(_ any)))) P4349@stx))) (set! P2717@delay-macro (lambda (P4357@stx) ((lambda (P4359@t) ((lambda (P4361@ls/false) (if P4361@ls/false (apply (lambda (P4363@expr) (P2687@bless (list 'make-promise (list 'lambda '() P4363@expr)))) P4361@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4359@t))) (P2761@syntax-dispatch P4359@t '(_ any)))) P4357@stx))) (set! P2719@assert-macro (lambda (P4365@stx) ((lambda (P4367@t) ((lambda (P4369@ls/false) (if P4369@ls/false (apply (lambda (P4371@expr) ((lambda (P4373@pos) (P2687@bless (list 'unless P4371@expr (list 'assertion-error (list 'quote P4371@expr) (list 'quote P4373@pos))))) (or (P2986@expression-position P4365@stx) (P2986@expression-position P4371@expr)))) P4369@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4367@t))) (P2761@syntax-dispatch P4367@t '(_ any)))) P4365@stx))) (set! P2721@endianness-macro (lambda (P4375@stx) ((lambda (P4377@t) ((lambda (P4379@ls/false) (if P4379@ls/false (apply (lambda (P4381@e) ((lambda (P4383@t) (if (memv P4383@t '(little)) (P2687@bless ''little) (if (memv P4383@t '(big)) (P2687@bless ''big) (P2994@syntax-violation '#f '"endianness must be big or little" P4375@stx)))) (P3000@syntax->datum P4381@e))) P4379@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4377@t))) (P2761@syntax-dispatch P4377@t '(_ any)))) P4375@stx))) (set! P2723@identifier-syntax-macro (lambda (P4385@stx) ((lambda (P4387@t) ((lambda (P4389@ls/false) (if P4389@ls/false (apply (lambda (P4391@expr) (P2687@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax P4391@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax P4391@expr) '((syntax (e* ...)))))))))) P4389@ls/false) ((lambda (P4393@t) ((lambda (P4395@ls/false) (if (and P4395@ls/false (apply (lambda (P4397@id1 P4398@expr1 P4399@id2 P4400@expr2 P4401@expr3) (and (P2264@id? P4397@id1) (P2264@id? P4399@id2) (P2264@id? P4400@expr2))) P4395@ls/false)) (apply (lambda (P4407@id1 P4408@expr1 P4409@id2 P4410@expr2 P4411@expr3) (P2687@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax P4408@expr1)) (list (list 'set! 'id P4410@expr2) (list 'syntax P4411@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons P4408@expr1 '(e* ...))))))))) P4395@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4393@t))) (P2761@syntax-dispatch P4393@t '(_ (any any) ((#(scheme-id set!) any any) any))))) P4387@t))) (P2761@syntax-dispatch P4387@t '(_ any)))) P4385@stx))) (set! P2725@do-macro (lambda (P4417@stx) ((lambda (P4420@bind) (begin (set! P4420@bind (lambda (P4443@x) ((lambda (P4445@t) ((lambda (P4447@ls/false) (if P4447@ls/false (apply (lambda (P4449@x P4450@init) (list P4449@x P4450@init P4449@x)) P4447@ls/false) ((lambda (P4453@t) ((lambda (P4455@ls/false) (if P4455@ls/false (apply (lambda (P4457@x P4458@init P4459@step) (list P4457@x P4458@init P4459@step)) P4455@ls/false) ((lambda (P4463@t) ((lambda (P4465@ls/false) (if P4465@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid binding" P4417@stx)) P4465@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4463@t))) (P2761@syntax-dispatch P4463@t '_))) P4453@t))) (P2761@syntax-dispatch P4453@t '(any any any)))) P4445@t))) (P2761@syntax-dispatch P4445@t '(any any)))) P4443@x))) ((lambda (P4421@t) ((lambda (P4423@ls/false) (if P4423@ls/false (apply (lambda (P4425@binding* P4426@test P4427@expr* P4428@command*) ((lambda (P4433@t) ((lambda (P4435@ls/false) (if P4435@ls/false (apply (lambda (P4437@x* P4438@init* P4439@step*) (if (P2274@valid-bound-ids? P4437@x*) (P2687@bless (list 'letrec (list (list 'loop (list 'lambda P4437@x* (list 'if P4426@test (cons 'begin (cons '(if #f #f) P4427@expr*)) (cons 'begin (append P4428@command* (list (cons 'loop P4439@step*)))))))) (cons 'loop P4438@init*))) (P2994@syntax-violation '#f '"invalid bindings" P4417@stx))) P4435@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4433@t))) (P2761@syntax-dispatch P4433@t '#(each (any any any))))) (map P4420@bind P4425@binding*))) P4423@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4421@t))) (P2761@syntax-dispatch P4421@t '(_ each-any (any . each-any) . each-any)))) P4417@stx))) '#f))) (set! P2727@let*-macro (lambda (P4467@stx) ((lambda (P4469@t) ((lambda (P4471@ls/false) (if (and P4471@ls/false (apply (lambda (P4473@lhs* P4474@rhs* P4475@b P4476@b*) (for-all P2264@id? P4473@lhs*)) P4471@ls/false)) (apply (lambda (P4481@lhs* P4482@rhs* P4483@b P4484@b*) (P2687@bless ((letrec ((P4489@f (lambda (P4491@x*) (if (null? P4491@x*) (cons 'let (cons '() (cons P4483@b P4484@b*))) (list 'let (list (car P4491@x*)) (P4489@f (cdr P4491@x*))))))) P4489@f) (map list P4481@lhs* P4482@rhs*)))) P4471@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4469@t))) (P2761@syntax-dispatch P4469@t '(_ #(each (any any)) any . each-any)))) P4467@stx))) (set! P2729@or-macro (lambda (P4493@stx) ((lambda (P4495@t) ((lambda (P4497@ls/false) (if P4497@ls/false (apply (lambda () '#f) P4497@ls/false) ((lambda (P4499@t) ((lambda (P4501@ls/false) (if P4501@ls/false (apply (lambda (P4503@e P4504@e*) (P2687@bless ((letrec ((P4507@f (lambda (P4509@e P4510@e*) (if (null? P4510@e*) (list 'begin '#f P4509@e) (list 'let (list (list 't P4509@e)) (list 'if 't 't (P4507@f (car P4510@e*) (cdr P4510@e*)))))))) P4507@f) P4503@e P4504@e*))) P4501@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4499@t))) (P2761@syntax-dispatch P4499@t '(_ any . each-any)))) P4495@t))) (P2761@syntax-dispatch P4495@t '(_)))) P4493@stx))) (set! P2731@and-macro (lambda (P4513@stx) ((lambda (P4515@t) ((lambda (P4517@ls/false) (if P4517@ls/false (apply (lambda () '#t) P4517@ls/false) ((lambda (P4519@t) ((lambda (P4521@ls/false) (if P4521@ls/false (apply (lambda (P4523@e P4524@e*) (P2687@bless ((letrec ((P4527@f (lambda (P4529@e P4530@e*) (if (null? P4530@e*) (list 'begin '#f P4529@e) (cons 'if (cons P4529@e (cons (P4527@f (car P4530@e*) (cdr P4530@e*)) '(#f)))))))) P4527@f) P4523@e P4524@e*))) P4521@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4519@t))) (P2761@syntax-dispatch P4519@t '(_ any . each-any)))) P4515@t))) (P2761@syntax-dispatch P4515@t '(_)))) P4513@stx))) (set! P2733@cond-macro (lambda (P4533@stx) ((lambda (P4535@t) ((lambda (P4537@ls/false) (if P4537@ls/false (apply (lambda (P4539@cls P4540@cls*) (P2687@bless ((letrec ((P4543@f (lambda (P4545@cls P4546@cls*) (if (null? P4546@cls*) ((lambda (P4549@t) ((lambda (P4551@ls/false) (if P4551@ls/false (apply (lambda (P4553@e P4554@e*) (cons 'begin (cons P4553@e P4554@e*))) P4551@ls/false) ((lambda (P4557@t) ((lambda (P4559@ls/false) (if P4559@ls/false (apply (lambda (P4561@e P4562@p) (list 'let (list (list 't P4561@e)) (list 'if 't (cons P4562@p '(t))))) P4559@ls/false) ((lambda (P4565@t) ((lambda (P4567@ls/false) (if P4567@ls/false (apply (lambda (P4569@e) (cons 'or (cons P4569@e '((if #f #f))))) P4567@ls/false) ((lambda (P4571@t) ((lambda (P4573@ls/false) (if P4573@ls/false (apply (lambda (P4575@e P4576@e*) (list 'if P4575@e (cons 'begin P4576@e*))) P4573@ls/false) ((lambda (P4579@t) ((lambda (P4581@ls/false) (if P4581@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid last clause" P4533@stx)) P4581@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4579@t))) (P2761@syntax-dispatch P4579@t '_))) P4571@t))) (P2761@syntax-dispatch P4571@t '(any . each-any)))) P4565@t))) (P2761@syntax-dispatch P4565@t '(any)))) P4557@t))) (P2761@syntax-dispatch P4557@t '(any #(scheme-id =>) any)))) P4549@t))) (P2761@syntax-dispatch P4549@t '(#(scheme-id else) any . each-any)))) P4545@cls) ((lambda (P4583@t) ((lambda (P4585@ls/false) (if P4585@ls/false (apply (lambda (P4587@e P4588@e*) (P2994@syntax-violation '#f '"incorrect position of keyword else" P4533@stx)) P4585@ls/false) ((lambda (P4591@t) ((lambda (P4593@ls/false) (if P4593@ls/false (apply (lambda (P4595@e P4596@p) (list 'let (list (list 't P4595@e)) (list 'if 't (cons P4596@p '(t)) (P4543@f (car P4546@cls*) (cdr P4546@cls*))))) P4593@ls/false) ((lambda (P4599@t) ((lambda (P4601@ls/false) (if P4601@ls/false (apply (lambda (P4603@e) (list 'or P4603@e (P4543@f (car P4546@cls*) (cdr P4546@cls*)))) P4601@ls/false) ((lambda (P4605@t) ((lambda (P4607@ls/false) (if P4607@ls/false (apply (lambda (P4609@e P4610@e*) (list 'if P4609@e (cons 'begin P4610@e*) (P4543@f (car P4546@cls*) (cdr P4546@cls*)))) P4607@ls/false) ((lambda (P4613@t) ((lambda (P4615@ls/false) (if P4615@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid last clause" P4533@stx)) P4615@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4613@t))) (P2761@syntax-dispatch P4613@t '_))) P4605@t))) (P2761@syntax-dispatch P4605@t '(any . each-any)))) P4599@t))) (P2761@syntax-dispatch P4599@t '(any)))) P4591@t))) (P2761@syntax-dispatch P4591@t '(any #(scheme-id =>) any)))) P4583@t))) (P2761@syntax-dispatch P4583@t '(#(scheme-id else) any . each-any)))) P4545@cls))))) P4543@f) P4539@cls P4540@cls*))) P4537@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4535@t))) (P2761@syntax-dispatch P4535@t '(_ any . each-any)))) P4533@stx))) (set! P2735@do-include (lambda (P4617@stx P4618@id P4619@filename) ((lambda (P4623@filename) (begin (if (not (and (string? P4623@filename) (P2264@id? P4618@id))) (P2994@syntax-violation '#f '"invalid syntax" P4617@stx) (void)) (cons (P2687@bless 'begin) (with-input-from-file P4623@filename (lambda () ((letrec ((P4625@f (lambda (P4627@ls) ((lambda (P4629@x) (if (eof-object? P4629@x) (reverse P4627@ls) (P4625@f (cons (P2230@datum->stx P4618@id P4629@x) P4627@ls)))) (P1149@P914@read-annotated))))) P4625@f) '())))))) (P2286@stx->datum P4619@filename)))) (set! P2737@include-macro (lambda (P4631@e) ((lambda (P4633@t) ((lambda (P4635@ls/false) (if P4635@ls/false (apply (lambda (P4637@id P4638@filename) (P2735@do-include P4631@e P4637@id P4638@filename)) P4635@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4633@t))) (P2761@syntax-dispatch P4633@t '(any any)))) P4631@e))) (set! P2739@include-into-macro (lambda (P4641@e) ((lambda (P4643@t) ((lambda (P4645@ls/false) (if P4645@ls/false (apply (lambda (P4647@id P4648@filename) (P2735@do-include P4641@e P4647@id P4648@filename)) P4645@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4643@t))) (P2761@syntax-dispatch P4643@t '(_ any any)))) P4641@e))) (set! P2741@syntax-rules-macro (lambda (P4651@e) ((lambda (P4653@t) ((lambda (P4655@ls/false) (if P4655@ls/false (apply (lambda (P4657@lits P4658@pat* P4659@tmp*) (begin (P2767@verify-literals P4657@lits P4651@e) (P2687@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons P4657@lits (map (lambda (P4663@pat P4664@tmp) ((lambda (P4667@t) ((lambda (P4669@ls/false) (if P4669@ls/false (apply (lambda (P4671@rest) (list (cons 'g P4671@rest) (list 'syntax P4664@tmp))) P4669@ls/false) ((lambda (P4673@t) ((lambda (P4675@ls/false) (if P4675@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid syntax-rules pattern" P4651@e P4663@pat)) P4675@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4673@t))) (P2761@syntax-dispatch P4673@t '_))) P4667@t))) (P2761@syntax-dispatch P4667@t '(_ . any)))) P4663@pat)) P4658@pat* P4659@tmp*)))))))) P4655@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4653@t))) (P2761@syntax-dispatch P4653@t '(_ each-any . #(each (any any)))))) P4651@e))) (set! P2743@quasiquote-macro ((lambda () ((lambda (P4678@datum P4706@quasicons* P4708@quasicons P4710@quasiappend P4712@quasivector P4714@vquasi P4716@quasi) (begin (set! P4678@datum (lambda (P4935@x) (list (P2643@scheme-stx 'quote) (P2240@mkstx P4935@x '() '() '())))) (set! P4706@quasicons* (lambda (P4927@x P4928@y) ((letrec ((P4931@f (lambda (P4933@x) (if (null? P4933@x) P4928@y (P4708@quasicons (car P4933@x) (P4931@f (cdr P4933@x))))))) P4931@f) P4927@x))) (set! P4708@quasicons (lambda (P4889@x P4890@y) ((lambda (P4893@t) ((lambda (P4895@ls/false) (if P4895@ls/false (apply (lambda (P4897@dy) ((lambda (P4899@t) ((lambda (P4901@ls/false) (if P4901@ls/false (apply (lambda (P4903@dx) (list (P2643@scheme-stx 'quote) (cons P4903@dx P4897@dy))) P4901@ls/false) ((lambda (P4905@t) ((lambda (P4907@ls/false) (if P4907@ls/false (apply (lambda () ((lambda (P4909@t) ((lambda (P4911@ls/false) (if P4911@ls/false (apply (lambda () (list (P2643@scheme-stx 'list) P4889@x)) P4911@ls/false) ((lambda (P4913@t) ((lambda (P4915@ls/false) (if P4915@ls/false (apply (lambda () (list (P2643@scheme-stx 'cons) P4889@x P4890@y)) P4915@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4913@t))) (P2761@syntax-dispatch P4913@t '_))) P4909@t))) (P2761@syntax-dispatch P4909@t '()))) P4897@dy)) P4907@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4905@t))) (P2761@syntax-dispatch P4905@t '_))) P4899@t))) (P2761@syntax-dispatch P4899@t '(#(scheme-id quote) any)))) P4889@x)) P4895@ls/false) ((lambda (P4917@t) ((lambda (P4919@ls/false) (if P4919@ls/false (apply (lambda (P4921@stuff) (cons* (P2643@scheme-stx 'list) P4889@x P4921@stuff)) P4919@ls/false) ((lambda (P4923@t) ((lambda (P4925@ls/false) (if P4925@ls/false (apply (lambda () (list (P2643@scheme-stx 'cons) P4889@x P4890@y)) P4925@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4923@t))) (P2761@syntax-dispatch P4923@t '_))) P4917@t))) (P2761@syntax-dispatch P4917@t '(#(scheme-id list) . each-any)))) P4893@t))) (P2761@syntax-dispatch P4893@t '(#(scheme-id quote) any)))) P4890@y))) (set! P4710@quasiappend (lambda (P4863@x P4864@y) ((lambda (P4867@ls) (if (null? P4867@ls) (list (P2643@scheme-stx 'quote) '()) (if (null? (cdr P4867@ls)) (car P4867@ls) (cons* (P2643@scheme-stx 'append) P4867@ls)))) ((letrec ((P4869@f (lambda (P4871@x) (if (null? P4871@x) ((lambda (P4873@t) ((lambda (P4875@ls/false) (if P4875@ls/false (apply (lambda () '()) P4875@ls/false) ((lambda (P4877@t) ((lambda (P4879@ls/false) (if P4879@ls/false (apply (lambda () (list P4864@y)) P4879@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4877@t))) (P2761@syntax-dispatch P4877@t '_))) P4873@t))) (P2761@syntax-dispatch P4873@t '(#(scheme-id quote) ())))) P4864@y) ((lambda (P4881@t) ((lambda (P4883@ls/false) (if P4883@ls/false (apply (lambda () (P4869@f (cdr P4871@x))) P4883@ls/false) ((lambda (P4885@t) ((lambda (P4887@ls/false) (if P4887@ls/false (apply (lambda () (cons (car P4871@x) (P4869@f (cdr P4871@x)))) P4887@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4885@t))) (P2761@syntax-dispatch P4885@t '_))) P4881@t))) (P2761@syntax-dispatch P4881@t '(#(scheme-id quote) ())))) (car P4871@x)))))) P4869@f) P4863@x)))) (set! P4712@quasivector (lambda (P4813@x) ((lambda (P4815@pat-x) ((lambda (P4817@t) ((lambda (P4819@ls/false) (if P4819@ls/false (apply (lambda (P4821@x*) (list (P2643@scheme-stx 'quote) (list->vector P4821@x*))) P4819@ls/false) ((lambda (P4823@t) ((lambda (P4825@ls/false) (if P4825@ls/false (apply (lambda () ((letrec ((P4827@f (lambda (P4829@x P4830@k) ((lambda (P4833@t) ((lambda (P4835@ls/false) (if P4835@ls/false (apply (lambda (P4837@x*) (P4830@k (map (lambda (P4839@x) (list (P2643@scheme-stx 'quote) P4839@x)) P4837@x*))) P4835@ls/false) ((lambda (P4841@t) ((lambda (P4843@ls/false) (if P4843@ls/false (apply (lambda (P4845@x*) (P4830@k P4845@x*)) P4843@ls/false) ((lambda (P4847@t) ((lambda (P4849@ls/false) (if P4849@ls/false (apply (lambda (P4851@x P4852@y) (P4827@f P4852@y (lambda (P4855@ls) (P4830@k (cons P4851@x P4855@ls))))) P4849@ls/false) ((lambda (P4857@t) ((lambda (P4859@ls/false) (if P4859@ls/false (apply (lambda () (list (P2643@scheme-stx 'list->vector) P4815@pat-x)) P4859@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4857@t))) (P2761@syntax-dispatch P4857@t '_))) P4847@t))) (P2761@syntax-dispatch P4847@t '(#(scheme-id cons) any any)))) P4841@t))) (P2761@syntax-dispatch P4841@t '(#(scheme-id list) . each-any)))) P4833@t))) (P2761@syntax-dispatch P4833@t '(#(scheme-id quote) each-any)))) P4829@x)))) P4827@f) P4813@x (lambda (P4861@ls) (cons* (P2643@scheme-stx 'vector) P4861@ls)))) P4825@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4823@t))) (P2761@syntax-dispatch P4823@t '_))) P4817@t))) (P2761@syntax-dispatch P4817@t '(#(scheme-id quote) each-any)))) P4815@pat-x)) P4813@x))) (set! P4714@vquasi (lambda (P4779@p P4780@lev) ((lambda (P4783@t) ((lambda (P4785@ls/false) (if P4785@ls/false (apply (lambda (P4787@p P4788@q) ((lambda (P4791@t) ((lambda (P4793@ls/false) (if P4793@ls/false (apply (lambda (P4795@p) (if (= P4780@lev '0) (P4706@quasicons* P4795@p (P4714@vquasi P4788@q P4780@lev)) (P4708@quasicons (P4708@quasicons (P4678@datum 'unquote) (P4716@quasi P4795@p (- P4780@lev '1))) (P4714@vquasi P4788@q P4780@lev)))) P4793@ls/false) ((lambda (P4797@t) ((lambda (P4799@ls/false) (if P4799@ls/false (apply (lambda (P4801@p) (if (= P4780@lev '0) (P4710@quasiappend P4801@p (P4714@vquasi P4788@q P4780@lev)) (P4708@quasicons (P4708@quasicons (P4678@datum 'unquote-splicing) (P4716@quasi P4801@p (- P4780@lev '1))) (P4714@vquasi P4788@q P4780@lev)))) P4799@ls/false) ((lambda (P4803@t) ((lambda (P4805@ls/false) (if P4805@ls/false (apply (lambda (P4807@p) (P4708@quasicons (P4716@quasi P4807@p P4780@lev) (P4714@vquasi P4788@q P4780@lev))) P4805@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4803@t))) (P2761@syntax-dispatch P4803@t 'any))) P4797@t))) (P2761@syntax-dispatch P4797@t '(#(scheme-id unquote-splicing) . each-any)))) P4791@t))) (P2761@syntax-dispatch P4791@t '(#(scheme-id unquote) . each-any)))) P4787@p)) P4785@ls/false) ((lambda (P4809@t) ((lambda (P4811@ls/false) (if P4811@ls/false (apply (lambda () (list (P2643@scheme-stx 'quote) '())) P4811@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4809@t))) (P2761@syntax-dispatch P4809@t '()))) P4783@t))) (P2761@syntax-dispatch P4783@t '(any . any)))) P4779@p))) (set! P4716@quasi (lambda (P4725@p P4726@lev) ((lambda (P4729@t) ((lambda (P4731@ls/false) (if P4731@ls/false (apply (lambda (P4733@p) (if (= P4726@lev '0) P4733@p (P4708@quasicons (P4678@datum 'unquote) (P4716@quasi (list P4733@p) (- P4726@lev '1))))) P4731@ls/false) ((lambda (P4735@t) ((lambda (P4737@ls/false) (if P4737@ls/false (apply (lambda (P4739@p P4740@q) (if (= P4726@lev '0) (P4706@quasicons* P4739@p (P4716@quasi P4740@q P4726@lev)) (P4708@quasicons (P4708@quasicons (P4678@datum 'unquote) (P4716@quasi P4739@p (- P4726@lev '1))) (P4716@quasi P4740@q P4726@lev)))) P4737@ls/false) ((lambda (P4743@t) ((lambda (P4745@ls/false) (if P4745@ls/false (apply (lambda (P4747@p P4748@q) (if (= P4726@lev '0) (P4710@quasiappend P4747@p (P4716@quasi P4748@q P4726@lev)) (P4708@quasicons (P4708@quasicons (P4678@datum 'unquote-splicing) (P4716@quasi P4747@p (- P4726@lev '1))) (P4716@quasi P4748@q P4726@lev)))) P4745@ls/false) ((lambda (P4751@t) ((lambda (P4753@ls/false) (if P4753@ls/false (apply (lambda (P4755@p) (P4708@quasicons (P4678@datum 'quasiquote) (P4716@quasi (list P4755@p) (+ P4726@lev '1)))) P4753@ls/false) ((lambda (P4757@t) ((lambda (P4759@ls/false) (if P4759@ls/false (apply (lambda (P4761@p P4762@q) (P4708@quasicons (P4716@quasi P4761@p P4726@lev) (P4716@quasi P4762@q P4726@lev))) P4759@ls/false) ((lambda (P4765@t) ((lambda (P4767@ls/false) (if (and P4767@ls/false (apply (lambda (P4769@x) (not (P2208@stx? P4769@x))) P4767@ls/false)) (apply (lambda (P4771@x) (P4712@quasivector (P4714@vquasi P4771@x P4726@lev))) P4767@ls/false) ((lambda (P4773@t) ((lambda (P4775@ls/false) (if P4775@ls/false (apply (lambda (P4777@p) (list (P2643@scheme-stx 'quote) P4777@p)) P4775@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4773@t))) (P2761@syntax-dispatch P4773@t 'any))) P4765@t))) (P2761@syntax-dispatch P4765@t '#(vector each-any)))) P4757@t))) (P2761@syntax-dispatch P4757@t '(any . any)))) P4751@t))) (P2761@syntax-dispatch P4751@t '(#(scheme-id quasiquote) any)))) P4743@t))) (P2761@syntax-dispatch P4743@t '((#(scheme-id unquote-splicing) . each-any) . any)))) P4735@t))) (P2761@syntax-dispatch P4735@t '((#(scheme-id unquote) . each-any) . any)))) P4729@t))) (P2761@syntax-dispatch P4729@t '(#(scheme-id unquote) any)))) P4725@p))) (lambda (P4717@x) ((lambda (P4719@t) ((lambda (P4721@ls/false) (if P4721@ls/false (apply (lambda (P4723@e) (P4716@quasi P4723@e '0)) P4721@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4719@t))) (P2761@syntax-dispatch P4719@t '(_ any)))) P4717@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! P2745@quasisyntax-macro ((lambda () ((lambda (P4938@quasi) (begin (set! P4938@quasi (lambda (P4962@p P4963@lev) ((lambda (P4966@t) ((lambda (P4968@ls/false) (if P4968@ls/false (apply (lambda (P4970@p) (if (= P4963@lev '0) ((lambda (P4972@g) (values (list P4972@g) (list P4970@p) P4972@g)) (P1148@P912@gensym)) (call-with-values (lambda () (P4938@quasi P4970@p (- P4963@lev '1))) (lambda (P4977@P4974@lhs* P4978@P4975@rhs* P4979@P4976@p) ((lambda (P4983@p P4984@rhs* P4985@lhs*) (values P4985@lhs* P4984@rhs* (list 'unsyntax P4983@p))) P4979@P4976@p P4978@P4975@rhs* P4977@P4974@lhs*))))) P4968@ls/false) ((lambda (P4989@t) ((lambda (P4991@ls/false) (if (and P4991@ls/false (apply (lambda () (= P4963@lev '0)) P4991@ls/false)) (apply (lambda () (P2994@syntax-violation '#f '"incorrect use of unsyntax" P4962@p)) P4991@ls/false) ((lambda (P4993@t) ((lambda (P4995@ls/false) (if P4995@ls/false (apply (lambda (P4997@p* P4998@q) (call-with-values (lambda () (P4938@quasi P4998@q P4963@lev)) (lambda (P5004@P5001@lhs* P5005@P5002@rhs* P5006@P5003@q) ((lambda (P5010@q P5011@rhs* P5012@lhs*) (if (= P4963@lev '0) ((lambda (P5016@g*) (values (append P5016@g* P5012@lhs*) (append P4997@p* P5011@rhs*) (append P5016@g* P5010@q))) (map (lambda (P5018@x) (P1148@P912@gensym)) P4997@p*)) (call-with-values (lambda () (P4938@quasi P4997@p* (- P4963@lev '1))) (lambda (P5023@P5020@lhs2* P5024@P5021@rhs2* P5025@P5022@p*) ((lambda (P5029@p* P5030@rhs2* P5031@lhs2*) (values (append P5031@lhs2* P5012@lhs*) (append P5030@rhs2* P5011@rhs*) (cons (cons 'unsyntax P5029@p*) P5010@q))) P5025@P5022@p* P5024@P5021@rhs2* P5023@P5020@lhs2*))))) P5006@P5003@q P5005@P5002@rhs* P5004@P5001@lhs*)))) P4995@ls/false) ((lambda (P5035@t) ((lambda (P5037@ls/false) (if P5037@ls/false (apply (lambda (P5039@p* P5040@q) (call-with-values (lambda () (P4938@quasi P5040@q P4963@lev)) (lambda (P5046@P5043@lhs* P5047@P5044@rhs* P5048@P5045@q) ((lambda (P5052@q P5053@rhs* P5054@lhs*) (if (= P4963@lev '0) ((lambda (P5058@g*) (values (append (map (lambda (P5060@g) (cons P5060@g '(...))) P5058@g*) P5054@lhs*) (append P5039@p* P5053@rhs*) (append (apply append (map (lambda (P5062@g) (cons P5062@g '(...))) P5058@g*)) P5052@q))) (map (lambda (P5064@x) (P1148@P912@gensym)) P5039@p*)) (call-with-values (lambda () (P4938@quasi P5039@p* (- P4963@lev '1))) (lambda (P5069@P5066@lhs2* P5070@P5067@rhs2* P5071@P5068@p*) ((lambda (P5075@p* P5076@rhs2* P5077@lhs2*) (values (append P5077@lhs2* P5054@lhs*) (append P5076@rhs2* P5053@rhs*) (cons (cons 'unsyntax-splicing P5075@p*) P5052@q))) P5071@P5068@p* P5070@P5067@rhs2* P5069@P5066@lhs2*))))) P5048@P5045@q P5047@P5044@rhs* P5046@P5043@lhs*)))) P5037@ls/false) ((lambda (P5081@t) ((lambda (P5083@ls/false) (if (and P5083@ls/false (apply (lambda () (= P4963@lev '0)) P5083@ls/false)) (apply (lambda () (P2994@syntax-violation '#f '"incorrect use of unsyntax-splicing" P4962@p)) P5083@ls/false) ((lambda (P5085@t) ((lambda (P5087@ls/false) (if P5087@ls/false (apply (lambda (P5089@p) (call-with-values (lambda () (P4938@quasi P5089@p (+ P4963@lev '1))) (lambda (P5094@P5091@lhs* P5095@P5092@rhs* P5096@P5093@p) ((lambda (P5100@p P5101@rhs* P5102@lhs*) (values P5102@lhs* P5101@rhs* (list 'quasisyntax P5100@p))) P5096@P5093@p P5095@P5092@rhs* P5094@P5091@lhs*)))) P5087@ls/false) ((lambda (P5106@t) ((lambda (P5108@ls/false) (if P5108@ls/false (apply (lambda (P5110@p P5111@q) (call-with-values (lambda () (P4938@quasi P5110@p P4963@lev)) (lambda (P5120@P5114@lhs* P5121@P5115@rhs* P5122@P5116@p) (call-with-values (lambda () (P4938@quasi P5111@q P4963@lev)) (lambda (P5126@P5117@lhs2* P5127@P5118@rhs2* P5128@P5119@q) ((lambda (P5132@q P5133@rhs2* P5134@lhs2* P5135@p P5136@rhs* P5137@lhs*) (values (append P5134@lhs2* P5137@lhs*) (append P5133@rhs2* P5136@rhs*) (cons P5135@p P5132@q))) P5128@P5119@q P5127@P5118@rhs2* P5126@P5117@lhs2* P5122@P5116@p P5121@P5115@rhs* P5120@P5114@lhs*)))))) P5108@ls/false) ((lambda (P5144@t) ((lambda (P5146@ls/false) (if P5146@ls/false (apply (lambda (P5148@x*) (call-with-values (lambda () (P4938@quasi P5148@x* P4963@lev)) (lambda (P5153@P5150@lhs* P5154@P5151@rhs* P5155@P5152@x*) ((lambda (P5159@x* P5160@rhs* P5161@lhs*) (values P5161@lhs* P5160@rhs* (list->vector P5159@x*))) P5155@P5152@x* P5154@P5151@rhs* P5153@P5150@lhs*)))) P5146@ls/false) ((lambda (P5165@t) ((lambda (P5167@ls/false) (if P5167@ls/false (apply (lambda () (values '() '() P4962@p)) P5167@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5165@t))) (P2761@syntax-dispatch P5165@t '_))) P5144@t))) (P2761@syntax-dispatch P5144@t '#(vector each-any)))) P5106@t))) (P2761@syntax-dispatch P5106@t '(any . any)))) P5085@t))) (P2761@syntax-dispatch P5085@t '(#(scheme-id quasisyntax) any)))) P5081@t))) (P2761@syntax-dispatch P5081@t '#(scheme-id unsyntax-splicing)))) P5035@t))) (P2761@syntax-dispatch P5035@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) P4993@t))) (P2761@syntax-dispatch P4993@t '((#(scheme-id unsyntax) . each-any) . any)))) P4989@t))) (P2761@syntax-dispatch P4989@t '#(scheme-id unsyntax)))) P4966@t))) (P2761@syntax-dispatch P4966@t '(#(scheme-id unsyntax) any)))) P4962@p))) (lambda (P4939@x) ((lambda (P4941@t) ((lambda (P4943@ls/false) (if P4943@ls/false (apply (lambda (P4945@e) (call-with-values (lambda () (P4938@quasi P4945@e '0)) (lambda (P4950@P4947@lhs* P4951@P4948@rhs* P4952@P4949@v) ((lambda (P4956@v P4957@rhs* P4958@lhs*) (P2687@bless (list 'syntax-case (cons 'list P4957@rhs*) '() (list P4958@lhs* (list 'syntax P4956@v))))) P4952@P4949@v P4951@P4948@rhs* P4950@P4947@lhs*)))) P4943@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P4941@t))) (P2761@syntax-dispatch P4941@t '(_ any)))) P4939@x)))) '#f)))) (set! P2747@define-struct-macro (lambda (P5169@stx) (P2994@syntax-violation '#f '"define-struct not supported" P5169@stx))) (set! P2749@define-record-type-macro (lambda (P5171@x) ((lambda (P5174@id P5176@get-record-name P5178@get-record-constructor-name P5180@get-record-predicate-name P5182@get-clause P5184@foo-rtd-code P5186@parent-rtd-code P5188@parent-rcd-code P5190@foo-rcd-code P5192@get-protocol-code P5194@get-fields P5196@get-mutator-indices P5198@get-mutators P5200@get-accessors P5202@enumerate P5204@do-define-record P5206@verify-clauses) (begin (set! P5174@id (lambda (P5673@ctxt . P5675@str*) (P2998@datum->syntax P5673@ctxt (string->symbol (apply string-append (map (lambda (P5677@x) (if (symbol? P5677@x) (symbol->string P5677@x) (if (string? P5677@x) P5677@x (assertion-violation 'define-record-type '"BUG")))) P5675@str*)))))) (set! P5176@get-record-name (lambda (P5655@spec) ((lambda (P5657@t) ((lambda (P5659@ls/false) (if P5659@ls/false (apply (lambda (P5661@foo P5662@make-foo P5663@foo?) P5661@foo) P5659@ls/false) ((lambda (P5667@t) ((lambda (P5669@ls/false) (if P5669@ls/false (apply (lambda (P5671@foo) P5671@foo) P5669@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5667@t))) (P2761@syntax-dispatch P5667@t 'any))) P5657@t))) (P2761@syntax-dispatch P5657@t '(any any any)))) P5655@spec))) (set! P5178@get-record-constructor-name (lambda (P5635@spec) ((lambda (P5637@t) ((lambda (P5639@ls/false) (if P5639@ls/false (apply (lambda (P5641@foo P5642@make-foo P5643@foo?) P5642@make-foo) P5639@ls/false) ((lambda (P5647@t) ((lambda (P5649@ls/false) (if (and P5649@ls/false (apply (lambda (P5651@foo) (P2264@id? P5651@foo)) P5649@ls/false)) (apply (lambda (P5653@foo) (P5174@id P5653@foo '"make-" (P2286@stx->datum P5653@foo))) P5649@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5647@t))) (P2761@syntax-dispatch P5647@t 'any))) P5637@t))) (P2761@syntax-dispatch P5637@t '(any any any)))) P5635@spec))) (set! P5180@get-record-predicate-name (lambda (P5615@spec) ((lambda (P5617@t) ((lambda (P5619@ls/false) (if P5619@ls/false (apply (lambda (P5621@foo P5622@make-foo P5623@foo?) P5623@foo?) P5619@ls/false) ((lambda (P5627@t) ((lambda (P5629@ls/false) (if (and P5629@ls/false (apply (lambda (P5631@foo) (P2264@id? P5631@foo)) P5629@ls/false)) (apply (lambda (P5633@foo) (P5174@id P5633@foo (P2286@stx->datum P5633@foo) '"?")) P5629@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5627@t))) (P2761@syntax-dispatch P5627@t 'any))) P5617@t))) (P2761@syntax-dispatch P5617@t '(any any any)))) P5615@spec))) (set! P5182@get-clause (lambda (P5597@id P5598@ls) ((lambda (P5601@t) ((lambda (P5603@ls/false) (if P5603@ls/false (apply (lambda () '#f) P5603@ls/false) ((lambda (P5605@t) ((lambda (P5607@ls/false) (if P5607@ls/false (apply (lambda (P5609@x P5610@rest P5611@ls) (if (P2272@free-id=? (P2687@bless P5597@id) P5609@x) (cons P5609@x P5610@rest) (P5182@get-clause P5597@id P5611@ls))) P5607@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5605@t))) (P2761@syntax-dispatch P5605@t '((any . any) . any)))) P5601@t))) (P2761@syntax-dispatch P5601@t '()))) P5598@ls))) (set! P5184@foo-rtd-code (lambda (P5515@name P5516@clause* P5517@parent-rtd-code) ((lambda (P5522@convert-field-spec*) (begin (set! P5522@convert-field-spec* (lambda (P5571@ls) (list->vector (map (lambda (P5573@x) ((lambda (P5575@t) ((lambda (P5577@ls/false) (if P5577@ls/false (apply (lambda (P5579@name P5580@rest) (list 'mutable P5579@name)) P5577@ls/false) ((lambda (P5583@t) ((lambda (P5585@ls/false) (if P5585@ls/false (apply (lambda (P5587@name P5588@rest) (list 'immutable P5587@name)) P5585@ls/false) ((lambda (P5591@t) ((lambda (P5593@ls/false) (if P5593@ls/false (apply (lambda (P5595@name) (list 'immutable P5595@name)) P5593@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5591@t))) (P2761@syntax-dispatch P5591@t 'any))) P5583@t))) (P2761@syntax-dispatch P5583@t '(#(scheme-id immutable) any . any)))) P5575@t))) (P2761@syntax-dispatch P5575@t '(#(scheme-id mutable) any . any)))) P5573@x)) P5571@ls)))) ((lambda (P5523@uid-code P5524@sealed? P5525@opaque? P5526@fields) (P2687@bless (list 'make-record-type-descriptor (list 'quote P5515@name) P5517@parent-rtd-code P5523@uid-code P5524@sealed? P5525@opaque? P5526@fields))) ((lambda (P5531@t) ((lambda (P5533@ls/false) (if P5533@ls/false (apply (lambda () (list 'quote (P1148@P912@gensym))) P5533@ls/false) ((lambda (P5535@t) ((lambda (P5537@ls/false) (if P5537@ls/false (apply (lambda (P5539@uid) (list 'quote P5539@uid)) P5537@ls/false) ((lambda (P5541@t) ((lambda (P5543@ls/false) (if P5543@ls/false (apply (lambda () '#f) P5543@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5541@t))) (P2761@syntax-dispatch P5541@t '_))) P5535@t))) (P2761@syntax-dispatch P5535@t '(_ any)))) P5531@t))) (P2761@syntax-dispatch P5531@t '(_)))) (P5182@get-clause 'nongenerative P5516@clause*)) ((lambda (P5545@t) ((lambda (P5547@ls/false) (if P5547@ls/false (apply (lambda () '#t) P5547@ls/false) ((lambda (P5549@t) ((lambda (P5551@ls/false) (if P5551@ls/false (apply (lambda () '#f) P5551@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5549@t))) (P2761@syntax-dispatch P5549@t '_))) P5545@t))) (P2761@syntax-dispatch P5545@t '(_ #(atom #t))))) (P5182@get-clause 'sealed P5516@clause*)) ((lambda (P5553@t) ((lambda (P5555@ls/false) (if P5555@ls/false (apply (lambda () '#t) P5555@ls/false) ((lambda (P5557@t) ((lambda (P5559@ls/false) (if P5559@ls/false (apply (lambda () '#f) P5559@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5557@t))) (P2761@syntax-dispatch P5557@t '_))) P5553@t))) (P2761@syntax-dispatch P5553@t '(_ #(atom #t))))) (P5182@get-clause 'opaque P5516@clause*)) ((lambda (P5561@t) ((lambda (P5563@ls/false) (if P5563@ls/false (apply (lambda (P5565@field-spec*) (list 'quote (P5522@convert-field-spec* P5565@field-spec*))) P5563@ls/false) ((lambda (P5567@t) ((lambda (P5569@ls/false) (if P5569@ls/false (apply (lambda () ''#()) P5569@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5567@t))) (P2761@syntax-dispatch P5567@t '_))) P5561@t))) (P2761@syntax-dispatch P5561@t '(_ . each-any)))) (P5182@get-clause 'fields P5516@clause*))))) '#f))) (set! P5186@parent-rtd-code (lambda (P5491@clause*) ((lambda (P5493@t) ((lambda (P5495@ls/false) (if P5495@ls/false (apply (lambda (P5497@name) (list 'record-type-descriptor P5497@name)) P5495@ls/false) ((lambda (P5499@t) ((lambda (P5501@ls/false) (if P5501@ls/false (apply (lambda () ((lambda (P5503@t) ((lambda (P5505@ls/false) (if P5505@ls/false (apply (lambda (P5507@rtd P5508@rcd) P5507@rtd) P5505@ls/false) ((lambda (P5511@t) ((lambda (P5513@ls/false) (if P5513@ls/false (apply (lambda () '#f) P5513@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5511@t))) (P2761@syntax-dispatch P5511@t '#(atom #f)))) P5503@t))) (P2761@syntax-dispatch P5503@t '(_ any any)))) (P5182@get-clause 'parent-rtd P5491@clause*))) P5501@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5499@t))) (P2761@syntax-dispatch P5499@t '#(atom #f)))) P5493@t))) (P2761@syntax-dispatch P5493@t '(_ any)))) (P5182@get-clause 'parent P5491@clause*)))) (set! P5188@parent-rcd-code (lambda (P5467@clause*) ((lambda (P5469@t) ((lambda (P5471@ls/false) (if P5471@ls/false (apply (lambda (P5473@name) (list 'record-constructor-descriptor P5473@name)) P5471@ls/false) ((lambda (P5475@t) ((lambda (P5477@ls/false) (if P5477@ls/false (apply (lambda () ((lambda (P5479@t) ((lambda (P5481@ls/false) (if P5481@ls/false (apply (lambda (P5483@rtd P5484@rcd) P5484@rcd) P5481@ls/false) ((lambda (P5487@t) ((lambda (P5489@ls/false) (if P5489@ls/false (apply (lambda () '#f) P5489@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5487@t))) (P2761@syntax-dispatch P5487@t '#(atom #f)))) P5479@t))) (P2761@syntax-dispatch P5479@t '(_ any any)))) (P5182@get-clause 'parent-rtd P5467@clause*))) P5477@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5475@t))) (P2761@syntax-dispatch P5475@t '#(atom #f)))) P5469@t))) (P2761@syntax-dispatch P5469@t '(_ any)))) (P5182@get-clause 'parent P5467@clause*)))) (set! P5190@foo-rcd-code (lambda (P5459@clause* P5460@foo-rtd P5461@protocol P5462@parent-rcd-code) (list 'make-record-constructor-descriptor P5460@foo-rtd P5462@parent-rcd-code P5461@protocol))) (set! P5192@get-protocol-code (lambda (P5447@clause*) ((lambda (P5449@t) ((lambda (P5451@ls/false) (if P5451@ls/false (apply (lambda (P5453@expr) P5453@expr) P5451@ls/false) ((lambda (P5455@t) ((lambda (P5457@ls/false) (if P5457@ls/false (apply (lambda () '#f) P5457@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5455@t))) (P2761@syntax-dispatch P5455@t '_))) P5449@t))) (P2761@syntax-dispatch P5449@t '(_ any)))) (P5182@get-clause 'protocol P5447@clause*)))) (set! P5194@get-fields (lambda (P5429@clause*) ((lambda (P5431@t) ((lambda (P5433@ls/false) (if P5433@ls/false (apply (lambda () '()) P5433@ls/false) ((lambda (P5435@t) ((lambda (P5437@ls/false) (if P5437@ls/false (apply (lambda (P5439@f*) P5439@f*) P5437@ls/false) ((lambda (P5441@t) ((lambda (P5443@ls/false) (if P5443@ls/false (apply (lambda (P5445@rest) (P5194@get-fields P5445@rest)) P5443@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5441@t))) (P2761@syntax-dispatch P5441@t '(_ . any)))) P5435@t))) (P2761@syntax-dispatch P5435@t '((#(scheme-id fields) . each-any) . _)))) P5431@t))) (P2761@syntax-dispatch P5431@t '()))) P5429@clause*))) (set! P5196@get-mutator-indices (lambda (P5405@fields) ((letrec ((P5407@f (lambda (P5409@fields P5410@i) ((lambda (P5413@t) ((lambda (P5415@ls/false) (if P5415@ls/false (apply (lambda () '()) P5415@ls/false) ((lambda (P5417@t) ((lambda (P5419@ls/false) (if P5419@ls/false (apply (lambda (P5421@rest) (cons P5410@i (P5407@f P5421@rest (+ P5410@i '1)))) P5419@ls/false) ((lambda (P5423@t) ((lambda (P5425@ls/false) (if P5425@ls/false (apply (lambda (P5427@rest) (P5407@f P5427@rest (+ P5410@i '1))) P5425@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5423@t))) (P2761@syntax-dispatch P5423@t '(_ . any)))) P5417@t))) (P2761@syntax-dispatch P5417@t '((#(scheme-id mutable) . _) . any)))) P5413@t))) (P2761@syntax-dispatch P5413@t '()))) P5409@fields)))) P5407@f) P5405@fields '0))) (set! P5198@get-mutators (lambda (P5363@foo P5364@fields) ((lambda (P5368@gen-name) (begin (set! P5368@gen-name (lambda (P5403@x) (P2998@datum->syntax P5363@foo (string->symbol (string-append (symbol->string (P3000@syntax->datum P5363@foo)) '"-" (symbol->string (P3000@syntax->datum P5403@x)) '"-set!"))))) ((letrec ((P5369@f (lambda (P5371@fields) ((lambda (P5373@t) ((lambda (P5375@ls/false) (if P5375@ls/false (apply (lambda () '()) P5375@ls/false) ((lambda (P5377@t) ((lambda (P5379@ls/false) (if P5379@ls/false (apply (lambda (P5381@name P5382@accessor P5383@mutator P5384@rest) (cons P5383@mutator (P5369@f P5384@rest))) P5379@ls/false) ((lambda (P5389@t) ((lambda (P5391@ls/false) (if P5391@ls/false (apply (lambda (P5393@name P5394@rest) (cons (P5368@gen-name P5393@name) (P5369@f P5394@rest))) P5391@ls/false) ((lambda (P5397@t) ((lambda (P5399@ls/false) (if P5399@ls/false (apply (lambda (P5401@rest) (P5369@f P5401@rest)) P5399@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5397@t))) (P2761@syntax-dispatch P5397@t '(_ . any)))) P5389@t))) (P2761@syntax-dispatch P5389@t '((#(scheme-id mutable) any) . any)))) P5377@t))) (P2761@syntax-dispatch P5377@t '((#(scheme-id mutable) any any any) . any)))) P5373@t))) (P2761@syntax-dispatch P5373@t '()))) P5371@fields)))) P5369@f) P5364@fields))) '#f))) (set! P5200@get-accessors (lambda (P5295@foo P5296@fields) ((lambda (P5300@gen-name) (begin (set! P5300@gen-name (lambda (P5361@x) (P2998@datum->syntax P5295@foo (string->symbol (string-append (symbol->string (P3000@syntax->datum P5295@foo)) '"-" (symbol->string (P3000@syntax->datum P5361@x))))))) (map (lambda (P5301@field) ((lambda (P5303@t) ((lambda (P5305@ls/false) (if (and P5305@ls/false (apply (lambda (P5307@name P5308@accessor P5309@mutator) (P2264@id? P5308@accessor)) P5305@ls/false)) (apply (lambda (P5313@name P5314@accessor P5315@mutator) P5314@accessor) P5305@ls/false) ((lambda (P5319@t) ((lambda (P5321@ls/false) (if (and P5321@ls/false (apply (lambda (P5323@name P5324@accessor) (P2264@id? P5324@accessor)) P5321@ls/false)) (apply (lambda (P5327@name P5328@accessor) P5328@accessor) P5321@ls/false) ((lambda (P5331@t) ((lambda (P5333@ls/false) (if (and P5333@ls/false (apply (lambda (P5335@name) (P2264@id? P5335@name)) P5333@ls/false)) (apply (lambda (P5337@name) (P5300@gen-name P5337@name)) P5333@ls/false) ((lambda (P5339@t) ((lambda (P5341@ls/false) (if (and P5341@ls/false (apply (lambda (P5343@name) (P2264@id? P5343@name)) P5341@ls/false)) (apply (lambda (P5345@name) (P5300@gen-name P5345@name)) P5341@ls/false) ((lambda (P5347@t) ((lambda (P5349@ls/false) (if (and P5349@ls/false (apply (lambda (P5351@name) (P2264@id? P5351@name)) P5349@ls/false)) (apply (lambda (P5353@name) (P5300@gen-name P5353@name)) P5349@ls/false) ((lambda (P5355@t) ((lambda (P5357@ls/false) (if P5357@ls/false (apply (lambda (P5359@others) (P2994@syntax-violation '#f '"invalid field spec" P5301@field)) P5357@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5355@t))) (P2761@syntax-dispatch P5355@t 'any))) P5347@t))) (P2761@syntax-dispatch P5347@t 'any))) P5339@t))) (P2761@syntax-dispatch P5339@t '(#(scheme-id immutable) any)))) P5331@t))) (P2761@syntax-dispatch P5331@t '(#(scheme-id mutable) any)))) P5319@t))) (P2761@syntax-dispatch P5319@t '(#(scheme-id immutable) any any)))) P5303@t))) (P2761@syntax-dispatch P5303@t '(#(scheme-id mutable) any any any)))) P5301@field)) P5296@fields))) '#f))) (set! P5202@enumerate (lambda (P5287@ls) ((letrec ((P5289@f (lambda (P5291@ls P5292@i) (if (null? P5291@ls) '() (cons P5292@i (P5289@f (cdr P5291@ls) (+ P5292@i '1))))))) P5289@f) P5287@ls '0))) (set! P5204@do-define-record (lambda (P5247@namespec P5248@clause*) ((lambda (P5251@foo) ((lambda (P5253@foo-rtd) ((lambda (P5255@foo-rcd) ((lambda (P5257@protocol) ((lambda (P5259@make-foo) ((lambda (P5261@fields) ((lambda (P5263@idx*) ((lambda (P5265@foo-x*) ((lambda (P5267@set-foo-x!*) ((lambda (P5269@set-foo-idx*) ((lambda (P5271@foo?) ((lambda (P5273@foo-rtd-code) ((lambda (P5275@foo-rcd-code) ((lambda (P5277@protocol-code) ((lambda () (P2687@bless (cons 'begin (cons (list 'define P5253@foo-rtd P5273@foo-rtd-code) (cons (list 'define P5257@protocol P5277@protocol-code) (cons (list 'define P5255@foo-rcd P5275@foo-rcd-code) (cons (list 'define-syntax P5251@foo (list 'list ''$rtd (list 'syntax P5253@foo-rtd) (list 'syntax P5255@foo-rcd))) (cons (list 'define P5271@foo? (list 'record-predicate P5253@foo-rtd)) (cons (list 'define P5259@make-foo (list 'record-constructor P5255@foo-rcd)) (append (map (lambda (P5279@foo-x P5280@idx) (list 'define P5279@foo-x (list 'record-accessor P5253@foo-rtd P5280@idx))) P5265@foo-x* P5263@idx*) (map (lambda (P5283@set-foo-x! P5284@idx) (list 'define P5283@set-foo-x! (list 'record-mutator P5253@foo-rtd P5284@idx))) P5267@set-foo-x!* P5269@set-foo-idx*))))))))))))) (P5192@get-protocol-code P5248@clause*))) (P5190@foo-rcd-code P5248@clause* P5253@foo-rtd P5257@protocol (P5188@parent-rcd-code P5248@clause*)))) (P5184@foo-rtd-code P5251@foo P5248@clause* (P5186@parent-rtd-code P5248@clause*)))) (P5180@get-record-predicate-name P5247@namespec))) (P5196@get-mutator-indices P5261@fields))) (P5198@get-mutators P5251@foo P5261@fields))) (P5200@get-accessors P5251@foo P5261@fields))) (P5202@enumerate P5261@fields))) (P5194@get-fields P5248@clause*))) (P5178@get-record-constructor-name P5247@namespec))) (P1148@P912@gensym))) (P1148@P912@gensym))) (P1148@P912@gensym))) (P5176@get-record-name P5247@namespec)))) (set! P5206@verify-clauses (lambda (P5215@x P5216@cls*) ((lambda (P5220@valid-kwds P5222@free-id-member?) (begin (set! P5220@valid-kwds (map P2687@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! P5222@free-id-member? (lambda (P5243@x P5244@ls) (and (pair? P5244@ls) (or (P2272@free-id=? P5243@x (car P5244@ls)) (P5222@free-id-member? P5243@x (cdr P5244@ls)))))) ((letrec ((P5223@f (lambda (P5225@cls* P5226@seen*) (if (not (null? P5225@cls*)) ((lambda (P5229@t) ((lambda (P5231@ls/false) (if P5231@ls/false (apply (lambda (P5233@kwd P5234@rest) (if (or (not (P2264@id? P5233@kwd)) (not (P5222@free-id-member? P5233@kwd P5220@valid-kwds))) (P2994@syntax-violation '#f '"not a valid define-record-type keyword" P5233@kwd) (if (P2278@bound-id-member? P5233@kwd P5226@seen*) (P2994@syntax-violation '#f '"duplicate use of keyword " P5215@x P5233@kwd) (P5223@f (cdr P5225@cls*) (cons P5233@kwd P5226@seen*))))) P5231@ls/false) ((lambda (P5237@t) ((lambda (P5239@ls/false) (if P5239@ls/false (apply (lambda (P5241@cls) (P2994@syntax-violation '#f '"malformed define-record-type clause" P5241@cls)) P5239@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5237@t))) (P2761@syntax-dispatch P5237@t 'any))) P5229@t))) (P2761@syntax-dispatch P5229@t '(any . any)))) (car P5225@cls*)) (void))))) P5223@f) P5216@cls* '()))) '#f '#f))) ((lambda (P5207@t) ((lambda (P5209@ls/false) (if P5209@ls/false (apply (lambda (P5211@namespec P5212@clause*) (begin (P5206@verify-clauses P5171@x P5212@clause*) (P5204@do-define-record P5211@namespec P5212@clause*))) P5209@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5207@t))) (P2761@syntax-dispatch P5207@t '(_ any . each-any)))) P5171@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! P2751@define-condition-type-macro (lambda (P5679@x) ((lambda (P5682@mkname) (begin (set! P5682@mkname (lambda (P5727@name P5728@suffix) (P2998@datum->syntax P5727@name (string->symbol (string-append (symbol->string (P3000@syntax->datum P5727@name)) P5728@suffix))))) ((lambda (P5683@t) ((lambda (P5685@ls/false) (if (and P5685@ls/false (apply (lambda (P5687@ctxt P5688@name P5689@super P5690@constructor P5691@predicate P5692@field* P5693@accessor*) (and (P2264@id? P5688@name) (P2264@id? P5689@super) (P2264@id? P5690@constructor) (P2264@id? P5691@predicate) (for-all P2264@id? P5692@field*) (for-all P2264@id? P5693@accessor*))) P5685@ls/false)) (apply (lambda (P5701@ctxt P5702@name P5703@super P5704@constructor P5705@predicate P5706@field* P5707@accessor*) ((lambda (P5715@aux-accessor*) (P2687@bless (cons 'begin (cons (cons 'define-record-type (cons (list P5702@name P5704@constructor (P1148@P912@gensym)) (cons (list 'parent P5703@super) (cons (cons 'fields (map (lambda (P5717@field P5718@aux) (list 'immutable P5717@field P5718@aux)) P5706@field* P5715@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define P5705@predicate (list 'condition-predicate (list 'record-type-descriptor P5702@name))) (map (lambda (P5721@accessor P5722@aux) (list 'define P5721@accessor (list 'condition-accessor (list 'record-type-descriptor P5702@name) P5722@aux))) P5707@accessor* P5715@aux-accessor*)))))) (map (lambda (P5725@x) (P1148@P912@gensym)) P5707@accessor*))) P5685@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5683@t))) (P2761@syntax-dispatch P5683@t '(any any any any any . #(each (any any)))))) P5679@x))) '#f))) (set! P2753@incorrect-usage-macro (lambda (P5731@e) (P2994@syntax-violation '#f '"incorrect usage of auxiliary keyword" P5731@e))) (set! P2755@parameterize-macro (lambda (P5733@e) ((lambda (P5735@t) ((lambda (P5737@ls/false) (if P5737@ls/false (apply (lambda (P5739@b P5740@b*) (P2687@bless (cons 'let (cons '() (cons P5739@b P5740@b*))))) P5737@ls/false) ((lambda (P5743@t) ((lambda (P5745@ls/false) (if P5745@ls/false (apply (lambda (P5747@olhs* P5748@orhs* P5749@b P5750@b*) ((lambda (P5755@lhs* P5756@rhs*) (P2687@bless (cons (list 'lambda (append P5755@lhs* P5756@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (P5759@lhs P5760@rhs) (list 'let (list (list 't (list P5759@lhs))) (list P5759@lhs P5760@rhs) (cons 'set! (cons P5760@rhs '(t))))) P5755@lhs* P5756@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons P5749@b P5750@b*))) '(swap)))))) (append P5747@olhs* P5748@orhs*)))) (P2976@generate-temporaries P5747@olhs*) (P2976@generate-temporaries P5748@orhs*))) P5745@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5743@t))) (P2761@syntax-dispatch P5743@t '(_ #(each (any any)) any . each-any)))) P5735@t))) (P2761@syntax-dispatch P5735@t '(_ () any . each-any)))) P5733@e))) (set! P2757@foreign-call-transformer (lambda (P5763@e P5764@r P5765@mr) ((lambda (P5769@t) ((lambda (P5771@ls/false) (if P5771@ls/false (apply (lambda (P5773@name P5774@arg*) (cons 'foreign-call (cons (P2795@chi-expr P5773@name P5764@r P5765@mr) (P2791@chi-expr* P5774@arg* P5764@r P5765@mr)))) P5771@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5769@t))) (P2761@syntax-dispatch P5769@t '(_ any . each-any)))) P5763@e))) (set! P2759@convert-pattern (lambda (P5777@pattern P5778@keys) ((lambda (P5782@cvt* P5784@cvt) (begin (set! P5782@cvt* (lambda (P5927@p* P5928@n P5929@ids) (if (null? P5927@p*) (values '() P5929@ids) (call-with-values (lambda () (P5782@cvt* (cdr P5927@p*) P5928@n P5929@ids)) (lambda (P5935@P5933@y P5936@P5934@ids) ((lambda (P5939@ids P5940@y) (call-with-values (lambda () (P5784@cvt (car P5927@p*) P5928@n P5939@ids)) (lambda (P5945@P5943@x P5946@P5944@ids) ((lambda (P5949@ids P5950@x) (values (cons P5950@x P5940@y) P5949@ids)) P5946@P5944@ids P5945@P5943@x)))) P5936@P5934@ids P5935@P5933@y)))))) (set! P5784@cvt (lambda (P5785@p P5786@n P5787@ids) ((lambda (P5791@t) ((lambda (P5793@ls/false) (if (and P5793@ls/false (apply (lambda (P5795@id) (P2264@id? P5795@id)) P5793@ls/false)) (apply (lambda (P5797@id) (if (P2278@bound-id-member? P5785@p P5778@keys) (values (vector 'free-id P5785@p) P5787@ids) (if (P2272@free-id=? P5785@p (P2643@scheme-stx '_)) (values '_ P5787@ids) (values 'any (cons (cons P5785@p P5786@n) P5787@ids))))) P5793@ls/false) ((lambda (P5799@t) ((lambda (P5801@ls/false) (if (and P5801@ls/false (apply (lambda (P5803@p P5804@dots) (P2763@ellipsis? P5804@dots)) P5801@ls/false)) (apply (lambda (P5807@p P5808@dots) (call-with-values (lambda () (P5784@cvt P5807@p (+ P5786@n '1) P5787@ids)) (lambda (P5813@P5811@p P5814@P5812@ids) ((lambda (P5817@ids P5818@p) (values (if (eq? P5818@p 'any) 'each-any (vector 'each P5818@p)) P5817@ids)) P5814@P5812@ids P5813@P5811@p)))) P5801@ls/false) ((lambda (P5821@t) ((lambda (P5823@ls/false) (if (and P5823@ls/false (apply (lambda (P5825@x P5826@dots P5827@ys P5828@z) (P2763@ellipsis? P5826@dots)) P5823@ls/false)) (apply (lambda (P5833@x P5834@dots P5835@ys P5836@z) (call-with-values (lambda () (P5784@cvt P5836@z P5786@n P5787@ids)) (lambda (P5843@P5841@z P5844@P5842@ids) ((lambda (P5847@ids P5848@z) (call-with-values (lambda () (P5782@cvt* P5835@ys P5786@n P5847@ids)) (lambda (P5853@P5851@ys P5854@P5852@ids) ((lambda (P5857@ids P5858@ys) (call-with-values (lambda () (P5784@cvt P5833@x (+ P5786@n '1) P5857@ids)) (lambda (P5863@P5861@x P5864@P5862@ids) ((lambda (P5867@ids P5868@x) (values (vector 'each+ P5868@x (reverse P5858@ys) P5848@z) P5867@ids)) P5864@P5862@ids P5863@P5861@x)))) P5854@P5852@ids P5853@P5851@ys)))) P5844@P5842@ids P5843@P5841@z)))) P5823@ls/false) ((lambda (P5871@t) ((lambda (P5873@ls/false) (if P5873@ls/false (apply (lambda (P5875@x P5876@y) (call-with-values (lambda () (P5784@cvt P5876@y P5786@n P5787@ids)) (lambda (P5881@P5879@y P5882@P5880@ids) ((lambda (P5885@ids P5886@y) (call-with-values (lambda () (P5784@cvt P5875@x P5786@n P5885@ids)) (lambda (P5891@P5889@x P5892@P5890@ids) ((lambda (P5895@ids P5896@x) (values (cons P5896@x P5886@y) P5895@ids)) P5892@P5890@ids P5891@P5889@x)))) P5882@P5880@ids P5881@P5879@y)))) P5873@ls/false) ((lambda (P5899@t) ((lambda (P5901@ls/false) (if P5901@ls/false (apply (lambda () (values '() P5787@ids)) P5901@ls/false) ((lambda (P5903@t) ((lambda (P5905@ls/false) (if (and P5905@ls/false (apply (lambda (P5907@p) (not (P2208@stx? P5907@p))) P5905@ls/false)) (apply (lambda (P5909@p) (call-with-values (lambda () (P5784@cvt P5909@p P5786@n P5787@ids)) (lambda (P5913@P5911@p P5914@P5912@ids) ((lambda (P5917@ids P5918@p) (values (vector 'vector P5918@p) P5917@ids)) P5914@P5912@ids P5913@P5911@p)))) P5905@ls/false) ((lambda (P5921@t) ((lambda (P5923@ls/false) (if P5923@ls/false (apply (lambda (P5925@datum) (values (vector 'atom (P2286@stx->datum P5925@datum)) P5787@ids)) P5923@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P5921@t))) (P2761@syntax-dispatch P5921@t 'any))) P5903@t))) (P2761@syntax-dispatch P5903@t '#(vector each-any)))) P5899@t))) (P2761@syntax-dispatch P5899@t '()))) P5871@t))) (P2761@syntax-dispatch P5871@t '(any . any)))) P5821@t))) (P2761@syntax-dispatch P5821@t '(any any . #(each+ any () any))))) P5799@t))) (P2761@syntax-dispatch P5799@t '(any any)))) P5791@t))) (P2761@syntax-dispatch P5791@t 'any))) P5785@p))) (P5784@cvt P5777@pattern '0 '()))) '#f '#f))) (set! P2761@syntax-dispatch ((lambda () ((lambda (P5954@stx^ P5956@match-each P5958@match-each+ P5960@match-each-any P5962@match-empty P5964@combine P5966@match* P5968@match) (begin (set! P5954@stx^ (lambda (P6155@e P6156@m* P6157@s* P6158@ae*) (if (and (null? P6156@m*) (null? P6157@s*) (null? P6158@ae*)) P6155@e (P2240@mkstx P6155@e P6156@m* P6157@s* P6158@ae*)))) (set! P5956@match-each (lambda (P6126@e P6127@p P6128@m* P6129@s* P6130@ae*) (if (pair? P6126@e) ((lambda (P6136@first) (and P6136@first ((lambda (P6138@rest) (and P6138@rest (cons P6136@first P6138@rest))) (P5956@match-each (cdr P6126@e) P6127@p P6128@m* P6129@s* P6130@ae*)))) (P5968@match (car P6126@e) P6127@p P6128@m* P6129@s* P6130@ae* '())) (if (null? P6126@e) '() (if (P2208@stx? P6126@e) (and (not (P2134@top-marked? P6128@m*)) (call-with-values (lambda () (P2238@join-wraps P6128@m* P6129@s* P6130@ae* P6126@e)) (lambda (P6143@P6140@m* P6144@P6141@s* P6145@P6142@ae*) ((lambda (P6149@ae* P6150@s* P6151@m*) (P5956@match-each (P2212@stx-expr P6126@e) P6127@p P6151@m* P6150@s* P6149@ae*)) P6145@P6142@ae* P6144@P6141@s* P6143@P6140@m*)))) (if (P1151@P918@annotation? P6126@e) (P5956@match-each (P1153@P922@annotation-expression P6126@e) P6127@p P6128@m* P6129@s* P6130@ae*) '#f)))))) (set! P5958@match-each+ (lambda (P6068@e P6069@x-pat P6070@y-pat P6071@z-pat P6072@m* P6073@s* P6074@ae* P6075@r) ((letrec ((P6084@f (lambda (P6086@e P6087@m* P6088@s* P6089@ae*) (if (pair? P6086@e) (call-with-values (lambda () (P6084@f (cdr P6086@e) P6087@m* P6088@s* P6089@ae*)) (lambda (P6097@P6094@xr* P6098@P6095@y-pat P6099@P6096@r) ((lambda (P6103@r P6104@y-pat P6105@xr*) (if P6103@r (if (null? P6104@y-pat) ((lambda (P6109@xr) (if P6109@xr (values (cons P6109@xr P6105@xr*) P6104@y-pat P6103@r) (values '#f '#f '#f))) (P5968@match (car P6086@e) P6069@x-pat P6087@m* P6088@s* P6089@ae* '())) (values '() (cdr P6104@y-pat) (P5968@match (car P6086@e) (car P6104@y-pat) P6087@m* P6088@s* P6089@ae* P6103@r))) (values '#f '#f '#f))) P6099@P6096@r P6098@P6095@y-pat P6097@P6094@xr*))) (if (P2208@stx? P6086@e) (if (P2134@top-marked? P6087@m*) (values '() P6070@y-pat (P5968@match P6086@e P6071@z-pat P6087@m* P6088@s* P6089@ae* P6075@r)) (call-with-values (lambda () (P2238@join-wraps P6087@m* P6088@s* P6089@ae* P6086@e)) (lambda (P6114@P6111@m* P6115@P6112@s* P6116@P6113@ae*) ((lambda (P6120@ae* P6121@s* P6122@m*) (P6084@f (P2212@stx-expr P6086@e) P6122@m* P6121@s* P6120@ae*)) P6116@P6113@ae* P6115@P6112@s* P6114@P6111@m*)))) (if (P1151@P918@annotation? P6086@e) (P6084@f (P1153@P922@annotation-expression P6086@e) P6087@m* P6088@s* P6089@ae*) (values '() P6070@y-pat (P5968@match P6086@e P6071@z-pat P6087@m* P6088@s* P6089@ae* P6075@r)))))))) P6084@f) P6068@e P6072@m* P6073@s* P6074@ae*))) (set! P5960@match-each-any (lambda (P6043@e P6044@m* P6045@s* P6046@ae*) (if (pair? P6043@e) ((lambda (P6051@l) (and P6051@l (cons (P5954@stx^ (car P6043@e) P6044@m* P6045@s* P6046@ae*) P6051@l))) (P5960@match-each-any (cdr P6043@e) P6044@m* P6045@s* P6046@ae*)) (if (null? P6043@e) '() (if (P2208@stx? P6043@e) (and (not (P2134@top-marked? P6044@m*)) (call-with-values (lambda () (P2238@join-wraps P6044@m* P6045@s* P6046@ae* P6043@e)) (lambda (P6056@P6053@m* P6057@P6054@s* P6058@P6055@ae*) ((lambda (P6062@ae* P6063@s* P6064@m*) (P5960@match-each-any (P2212@stx-expr P6043@e) P6064@m* P6063@s* P6062@ae*)) P6058@P6055@ae* P6057@P6054@s* P6056@P6053@m*)))) (if (P1151@P918@annotation? P6043@e) (P5960@match-each-any (P1153@P922@annotation-expression P6043@e) P6044@m* P6045@s* P6046@ae*) '#f)))))) (set! P5962@match-empty (lambda (P6037@p P6038@r) (if (null? P6037@p) P6038@r (if (eq? P6037@p '_) P6038@r (if (eq? P6037@p 'any) (cons '() P6038@r) (if (pair? P6037@p) (P5962@match-empty (car P6037@p) (P5962@match-empty (cdr P6037@p) P6038@r)) (if (eq? P6037@p 'each-any) (cons '() P6038@r) ((lambda (P6041@t) (if (memv P6041@t '(each)) (P5962@match-empty (vector-ref P6037@p '1) P6038@r) (if (memv P6041@t '(each+)) (P5962@match-empty (vector-ref P6037@p '1) (P5962@match-empty (reverse (vector-ref P6037@p '2)) (P5962@match-empty (vector-ref P6037@p '3) P6038@r))) (if (memv P6041@t '(free-id atom)) P6038@r (if (memv P6041@t '(scheme-id atom)) P6038@r (if (memv P6041@t '(vector)) (P5962@match-empty (vector-ref P6037@p '1) P6038@r) (assertion-violation 'syntax-dispatch '"invalid pattern" P6037@p))))))) (vector-ref P6037@p '0))))))))) (set! P5964@combine (lambda (P6033@r* P6034@r) (if (null? (car P6033@r*)) P6034@r (cons (map car P6033@r*) (P5964@combine (map cdr P6033@r*) P6034@r))))) (set! P5966@match* (lambda (P6000@e P6001@p P6002@m* P6003@s* P6004@ae* P6005@r) (if (null? P6001@p) (and (null? P6000@e) P6005@r) (if (pair? P6001@p) (and (pair? P6000@e) (P5968@match (car P6000@e) (car P6001@p) P6002@m* P6003@s* P6004@ae* (P5968@match (cdr P6000@e) (cdr P6001@p) P6002@m* P6003@s* P6004@ae* P6005@r))) (if (eq? P6001@p 'each-any) ((lambda (P6012@l) (and P6012@l (cons P6012@l P6005@r))) (P5960@match-each-any P6000@e P6002@m* P6003@s* P6004@ae*)) ((lambda (P6014@t) (if (memv P6014@t '(each)) (if (null? P6000@e) (P5962@match-empty (vector-ref P6001@p '1) P6005@r) ((lambda (P6016@r*) (and P6016@r* (P5964@combine P6016@r* P6005@r))) (P5956@match-each P6000@e (vector-ref P6001@p '1) P6002@m* P6003@s* P6004@ae*))) (if (memv P6014@t '(free-id)) (and (symbol? P6000@e) (P2134@top-marked? P6002@m*) (P2272@free-id=? (P5954@stx^ P6000@e P6002@m* P6003@s* P6004@ae*) (vector-ref P6001@p '1)) P6005@r) (if (memv P6014@t '(scheme-id)) (and (symbol? P6000@e) (P2134@top-marked? P6002@m*) (P2272@free-id=? (P5954@stx^ P6000@e P6002@m* P6003@s* P6004@ae*) (P2643@scheme-stx (vector-ref P6001@p '1))) P6005@r) (if (memv P6014@t '(each+)) (call-with-values (lambda () (P5958@match-each+ P6000@e (vector-ref P6001@p '1) (vector-ref P6001@p '2) (vector-ref P6001@p '3) P6002@m* P6003@s* P6004@ae* P6005@r)) (lambda (P6021@P6018@xr* P6022@P6019@y-pat P6023@P6020@r) ((lambda (P6027@r P6028@y-pat P6029@xr*) (and P6027@r (null? P6028@y-pat) (if (null? P6029@xr*) (P5962@match-empty (vector-ref P6001@p '1) P6027@r) (P5964@combine P6029@xr* P6027@r)))) P6023@P6020@r P6022@P6019@y-pat P6021@P6018@xr*))) (if (memv P6014@t '(atom)) (and (fast-equal? (vector-ref P6001@p '1) (P2284@strip P6000@e P6002@m*)) P6005@r) (if (memv P6014@t '(vector)) (and (vector? P6000@e) (P5968@match (vector->list P6000@e) (vector-ref P6001@p '1) P6002@m* P6003@s* P6004@ae* P6005@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" P6001@p)))))))) (vector-ref P6001@p '0))))))) (set! P5968@match (lambda (P5973@e P5974@p P5975@m* P5976@s* P5977@ae* P5978@r) (if (not P5978@r) '#f (if (eq? P5974@p '_) P5978@r (if (eq? P5974@p 'any) (cons (P5954@stx^ P5973@e P5975@m* P5976@s* P5977@ae*) P5978@r) (if (P2208@stx? P5973@e) (and (not (P2134@top-marked? P5975@m*)) (call-with-values (lambda () (P2238@join-wraps P5975@m* P5976@s* P5977@ae* P5973@e)) (lambda (P5988@P5985@m* P5989@P5986@s* P5990@P5987@ae*) ((lambda (P5994@ae* P5995@s* P5996@m*) (P5968@match (P2212@stx-expr P5973@e) P5974@p P5996@m* P5995@s* P5994@ae* P5978@r)) P5990@P5987@ae* P5989@P5986@s* P5988@P5985@m*)))) (if (P1151@P918@annotation? P5973@e) (P5968@match (P1153@P922@annotation-expression P5973@e) P5974@p P5975@m* P5976@s* P5977@ae* P5978@r) (P5966@match* P5973@e P5974@p P5975@m* P5976@s* P5977@ae* P5978@r)))))))) (lambda (P5969@e P5970@p) (P5968@match P5969@e P5970@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! P2763@ellipsis? (lambda (P6163@x) (and (P2264@id? P6163@x) (P2272@free-id=? P6163@x (P2643@scheme-stx '...))))) (set! P2765@underscore? (lambda (P6165@x) (and (P2264@id? P6165@x) (P2272@free-id=? P6165@x (P2643@scheme-stx '_))))) (set! P2767@verify-literals (lambda (P6167@lits P6168@expr) (for-each (lambda (P6171@x) (if (or (not (P2264@id? P6171@x)) (P2763@ellipsis? P6171@x) (P2765@underscore? P6171@x)) (P2994@syntax-violation '#f '"invalid literal" P6168@expr P6171@x) (void))) P6167@lits))) (set! P2769@syntax-case-transformer ((lambda () ((lambda (P6174@build-dispatch-call P6176@invalid-ids-error P6178@gen-clause P6180@gen-syntax-case) (begin (set! P6174@build-dispatch-call (lambda (P6285@pvars P6286@expr P6287@y P6288@r P6289@mr) ((lambda (P6295@ids P6296@levels) ((lambda (P6299@labels P6300@new-vars) ((lambda (P6303@body) (list '(primitive apply) (P2100@P1910@build-lambda '#f P6300@new-vars P6303@body) P6287@y)) (P2795@chi-expr (P2244@add-subst (P2195@make-full-rib P6295@ids P6299@labels) P6286@expr) (append (map (lambda (P6305@label P6306@var P6307@level) (cons P6305@label (P2296@make-binding 'syntax (cons P6306@var P6307@level)))) P6299@labels P6300@new-vars (map cdr P6285@pvars)) P6288@r) P6289@mr))) (map P2140@gen-label P6295@ids) (map P2136@gen-lexical P6295@ids))) (map car P6285@pvars) (map cdr P6285@pvars)))) (set! P6176@invalid-ids-error (lambda (P6273@id* P6274@e P6275@class) ((letrec ((P6279@find (lambda (P6281@id* P6282@ok*) (if (null? P6281@id*) (P2994@syntax-violation '#f '"invalid syntax" P6274@e) (if (P2264@id? (car P6281@id*)) (if (P2278@bound-id-member? (car P6281@id*) P6282@ok*) (P2990@syntax-error (car P6281@id*) '"duplicate " P6275@class) (P6279@find (cdr P6281@id*) (cons (car P6281@id*) P6282@ok*))) (P2990@syntax-error (car P6281@id*) '"invalid " P6275@class)))))) P6279@find) P6273@id* '()))) (set! P6178@gen-clause (lambda (P6235@x P6236@keys P6237@clauses P6238@r P6239@mr P6240@pat P6241@fender P6242@expr) (call-with-values (lambda () (P2759@convert-pattern P6240@pat P6236@keys)) (lambda (P6253@P6251@p P6254@P6252@pvars) ((lambda (P6257@pvars P6258@p) (if (not (P2276@distinct-bound-ids? (map car P6257@pvars))) (P6176@invalid-ids-error (map car P6257@pvars) P6240@pat '"pattern variable") (if (not (for-all (lambda (P6261@x) (not (P2763@ellipsis? (car P6261@x)))) P6257@pvars)) (P2994@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" P6240@pat) ((lambda (P6263@y) ((lambda (P6265@test) ((lambda (P6267@conseq) ((lambda (P6269@altern) (list (P2100@P1910@build-lambda '#f (list P6263@y) (list 'if P6265@test P6267@conseq P6269@altern)) (list '(primitive syntax-dispatch) P6235@x (list 'quote P6258@p)))) (P6180@gen-syntax-case P6235@x P6236@keys P6237@clauses P6238@r P6239@mr))) (P6174@build-dispatch-call P6257@pvars P6242@expr P6263@y P6238@r P6239@mr))) (if (eq? P6241@fender '#t) P6263@y ((lambda (P6271@call) (list 'if P6263@y P6271@call (list 'quote '#f))) (P6174@build-dispatch-call P6257@pvars P6241@fender P6263@y P6238@r P6239@mr))))) (P2136@gen-lexical 'tmp))))) P6254@P6252@pvars P6253@P6251@p))))) (set! P6180@gen-syntax-case (lambda (P6201@x P6202@keys P6203@clauses P6204@r P6205@mr) (if (null? P6203@clauses) (list '(primitive syntax-error) P6201@x) ((lambda (P6211@t) ((lambda (P6213@ls/false) (if P6213@ls/false (apply (lambda (P6215@pat P6216@expr) (if (and (P2264@id? P6215@pat) (not (P2278@bound-id-member? P6215@pat P6202@keys)) (not (P2763@ellipsis? P6215@pat))) (if (P2272@free-id=? P6215@pat (P2643@scheme-stx '_)) (P2795@chi-expr P6216@expr P6204@r P6205@mr) ((lambda (P6219@lab P6220@lex) ((lambda (P6223@body) (list (P2100@P1910@build-lambda '#f (list P6220@lex) P6223@body) P6201@x)) (P2795@chi-expr (P2244@add-subst (P2195@make-full-rib (list P6215@pat) (list P6219@lab)) P6216@expr) (cons (cons P6219@lab (P2296@make-binding 'syntax (cons P6220@lex '0))) P6204@r) P6205@mr))) (P2140@gen-label P6215@pat) (P2136@gen-lexical P6215@pat))) (P6178@gen-clause P6201@x P6202@keys (cdr P6203@clauses) P6204@r P6205@mr P6215@pat '#t P6216@expr))) P6213@ls/false) ((lambda (P6225@t) ((lambda (P6227@ls/false) (if P6227@ls/false (apply (lambda (P6229@pat P6230@fender P6231@expr) (P6178@gen-clause P6201@x P6202@keys (cdr P6203@clauses) P6204@r P6205@mr P6229@pat P6230@fender P6231@expr)) P6227@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6225@t))) (P2761@syntax-dispatch P6225@t '(any any any)))) P6211@t))) (P2761@syntax-dispatch P6211@t '(any any)))) (car P6203@clauses))))) (lambda (P6181@e P6182@r P6183@mr) ((lambda (P6187@t) ((lambda (P6189@ls/false) (if P6189@ls/false (apply (lambda (P6191@expr P6192@keys P6193@clauses) (begin (P2767@verify-literals P6192@keys P6181@e) ((lambda (P6197@x) ((lambda (P6199@body) (list (P2100@P1910@build-lambda '#f (list P6197@x) P6199@body) (P2795@chi-expr P6191@expr P6182@r P6183@mr))) (P6180@gen-syntax-case P6197@x P6192@keys P6193@clauses P6182@r P6183@mr))) (P2136@gen-lexical 'tmp)))) P6189@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6187@t))) (P2761@syntax-dispatch P6187@t '(_ any each-any . each-any)))) P6181@e)))) '#f '#f '#f '#f)))) (set! P2771@ellipsis-map (lambda (P6311@proc P6312@ls . P6315@ls*) ((lambda (P6318@who) (begin (set! P6318@who '...) (begin (if (not (list? P6312@ls)) (assertion-violation P6318@who '"not a list" P6312@ls) (void)) (if (not (null? P6315@ls*)) ((lambda (P6319@n) (for-each (lambda (P6321@x) (begin (if (not (list? P6321@x)) (assertion-violation P6318@who '"not a list" P6321@x) (void)) (if (not (= (length P6321@x) P6319@n)) (assertion-violation P6318@who '"length mismatch" P6312@ls P6321@x) (void)))) P6315@ls*)) (length P6312@ls)) (void)) (apply map P6311@proc P6312@ls P6315@ls*)))) '#f))) (set! P2773@syntax-transformer ((lambda () ((lambda (P6324@gen-syntax P6326@gen-ref P6328@gen-append P6330@gen-mappend P6332@gen-map P6334@gen-cons P6336@gen-vector P6338@regen) (begin (set! P6324@gen-syntax (lambda (P6439@src P6440@e P6441@r P6442@maps P6443@ellipsis? P6444@vec?) ((lambda (P6451@t) ((lambda (P6453@ls/false) (if (and P6453@ls/false (apply (lambda (P6455@dots) (P6443@ellipsis? P6455@dots)) P6453@ls/false)) (apply (lambda (P6457@dots) (P2994@syntax-violation '#f '"misplaced ellipsis in syntax form" P6439@src)) P6453@ls/false) ((lambda (P6459@t) ((lambda (P6461@ls/false) (if (and P6461@ls/false (apply (lambda (P6463@id) (P2264@id? P6463@id)) P6461@ls/false)) (apply (lambda (P6465@id) ((lambda (P6467@label) ((lambda (P6469@b) ((lambda () (if (eq? (P2298@binding-type P6469@b) 'syntax) (call-with-values (lambda () ((lambda (P6473@var.lev) (P6326@gen-ref P6439@src (car P6473@var.lev) (cdr P6473@var.lev) P6442@maps)) (P2300@binding-value P6469@b))) (lambda (P6475@P6471@var P6476@P6472@maps) ((lambda (P6479@maps P6480@var) (values (list 'ref P6480@var) P6479@maps)) P6476@P6472@maps P6475@P6471@var))) (values (list 'quote P6440@e) P6442@maps))))) (P2294@label->binding P6467@label P6441@r))) (P2290@id->label P6440@e))) P6461@ls/false) ((lambda (P6483@t) ((lambda (P6485@ls/false) (if (and P6485@ls/false (apply (lambda (P6487@dots P6488@e) (P6443@ellipsis? P6487@dots)) P6485@ls/false)) (apply (lambda (P6491@dots P6492@e) (if P6444@vec? (P2994@syntax-violation '#f '"misplaced ellipsis in syntax form" P6439@src) (P6324@gen-syntax P6439@src P6492@e P6441@r P6442@maps (lambda (P6495@x) '#f) '#f))) P6485@ls/false) ((lambda (P6497@t) ((lambda (P6499@ls/false) (if (and P6499@ls/false (apply (lambda (P6501@x P6502@dots P6503@y) (P6443@ellipsis? P6502@dots)) P6499@ls/false)) (apply (lambda (P6507@x P6508@dots P6509@y) ((letrec ((P6513@f (lambda (P6515@y P6516@k) ((lambda (P6519@t) ((lambda (P6521@ls/false) (if P6521@ls/false (apply (lambda () (P6516@k P6442@maps)) P6521@ls/false) ((lambda (P6523@t) ((lambda (P6525@ls/false) (if (and P6525@ls/false (apply (lambda (P6527@dots P6528@y) (P6443@ellipsis? P6527@dots)) P6525@ls/false)) (apply (lambda (P6531@dots P6532@y) (P6513@f P6532@y (lambda (P6535@maps) (call-with-values (lambda () (P6516@k (cons '() P6535@maps))) (lambda (P6539@P6537@x P6540@P6538@maps) ((lambda (P6543@maps P6544@x) (if (null? (car P6543@maps)) (P2994@syntax-violation '#f '"extra ellipsis in syntax form" P6439@src) (values (P6330@gen-mappend P6544@x (car P6543@maps)) (cdr P6543@maps)))) P6540@P6538@maps P6539@P6537@x)))))) P6525@ls/false) ((lambda (P6547@t) ((lambda (P6549@ls/false) (if P6549@ls/false (apply (lambda () (call-with-values (lambda () (P6324@gen-syntax P6439@src P6515@y P6441@r P6442@maps P6443@ellipsis? P6444@vec?)) (lambda (P6553@P6551@y P6554@P6552@maps) ((lambda (P6557@maps P6558@y) (call-with-values (lambda () (P6516@k P6557@maps)) (lambda (P6563@P6561@x P6564@P6562@maps) ((lambda (P6567@maps P6568@x) (values (P6328@gen-append P6568@x P6558@y) P6567@maps)) P6564@P6562@maps P6563@P6561@x)))) P6554@P6552@maps P6553@P6551@y)))) P6549@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6547@t))) (P2761@syntax-dispatch P6547@t '_))) P6523@t))) (P2761@syntax-dispatch P6523@t '(any . any)))) P6519@t))) (P2761@syntax-dispatch P6519@t '()))) P6515@y)))) P6513@f) P6509@y (lambda (P6571@maps) (call-with-values (lambda () (P6324@gen-syntax P6439@src P6507@x P6441@r (cons '() P6571@maps) P6443@ellipsis? '#f)) (lambda (P6575@P6573@x P6576@P6574@maps) ((lambda (P6579@maps P6580@x) (if (null? (car P6579@maps)) (P2994@syntax-violation '#f '"extra ellipsis in syntax form" P6439@src) (values (P6332@gen-map P6580@x (car P6579@maps)) (cdr P6579@maps)))) P6576@P6574@maps P6575@P6573@x)))))) P6499@ls/false) ((lambda (P6583@t) ((lambda (P6585@ls/false) (if P6585@ls/false (apply (lambda (P6587@x P6588@y) (call-with-values (lambda () (P6324@gen-syntax P6439@src P6587@x P6441@r P6442@maps P6443@ellipsis? '#f)) (lambda (P6593@P6591@xnew P6594@P6592@maps) ((lambda (P6597@maps P6598@xnew) (call-with-values (lambda () (P6324@gen-syntax P6439@src P6588@y P6441@r P6597@maps P6443@ellipsis? P6444@vec?)) (lambda (P6603@P6601@ynew P6604@P6602@maps) ((lambda (P6607@maps P6608@ynew) (values (P6334@gen-cons P6440@e P6587@x P6588@y P6598@xnew P6608@ynew) P6607@maps)) P6604@P6602@maps P6603@P6601@ynew)))) P6594@P6592@maps P6593@P6591@xnew)))) P6585@ls/false) ((lambda (P6611@t) ((lambda (P6613@ls/false) (if P6613@ls/false (apply (lambda (P6615@ls) (call-with-values (lambda () (P6324@gen-syntax P6439@src P6615@ls P6441@r P6442@maps P6443@ellipsis? '#t)) (lambda (P6619@P6617@lsnew P6620@P6618@maps) ((lambda (P6623@maps P6624@lsnew) (values (P6336@gen-vector P6440@e P6615@ls P6624@lsnew) P6623@maps)) P6620@P6618@maps P6619@P6617@lsnew)))) P6613@ls/false) ((lambda (P6627@t) ((lambda (P6629@ls/false) (if P6629@ls/false (apply (lambda () (values (list 'quote P6440@e) P6442@maps)) P6629@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6627@t))) (P2761@syntax-dispatch P6627@t '_))) P6611@t))) (P2761@syntax-dispatch P6611@t '#(vector each-any)))) P6583@t))) (P2761@syntax-dispatch P6583@t '(any . any)))) P6497@t))) (P2761@syntax-dispatch P6497@t '(any any . any)))) P6483@t))) (P2761@syntax-dispatch P6483@t '(any any)))) P6459@t))) (P2761@syntax-dispatch P6459@t 'any))) P6451@t))) (P2761@syntax-dispatch P6451@t 'any))) P6440@e))) (set! P6326@gen-ref (lambda (P6415@src P6416@var P6417@level P6418@maps) (if (= P6417@level '0) (values P6416@var P6418@maps) (if (null? P6418@maps) (P2994@syntax-violation '#f '"missing ellipsis in syntax form" P6415@src) (call-with-values (lambda () (P6326@gen-ref P6415@src P6416@var (- P6417@level '1) (cdr P6418@maps))) (lambda (P6425@P6423@outer-var P6426@P6424@outer-maps) ((lambda (P6429@outer-maps P6430@outer-var) ((lambda (P6433@t) (if P6433@t ((lambda (P6435@b) (values (cdr P6435@b) P6418@maps)) P6433@t) ((lambda (P6437@inner-var) (values P6437@inner-var (cons (cons (cons P6430@outer-var P6437@inner-var) (car P6418@maps)) P6429@outer-maps))) (P2136@gen-lexical 'tmp)))) (assq P6430@outer-var (car P6418@maps)))) P6426@P6424@outer-maps P6425@P6423@outer-var))))))) (set! P6328@gen-append (lambda (P6411@x P6412@y) (if (fast-equal? P6412@y ''()) P6411@x (list 'append P6411@x P6412@y)))) (set! P6330@gen-mappend (lambda (P6407@e P6408@map-env) (list 'apply '(primitive append) (P6332@gen-map P6407@e P6408@map-env)))) (set! P6332@gen-map (lambda (P6389@e P6390@map-env) ((lambda (P6393@formals P6394@actuals) (if (eq? (car P6389@e) 'ref) (car P6394@actuals) (if (for-all (lambda (P6397@x) (and (eq? (car P6397@x) 'ref) (memq (cadr P6397@x) P6393@formals))) (cdr P6389@e)) ((lambda (P6399@args) (cons 'map (cons (list 'primitive (car P6389@e)) P6399@args))) (map ((lambda (P6401@r) (lambda (P6403@x) (cdr (assq (cadr P6403@x) P6401@r)))) (map cons P6393@formals P6394@actuals)) (cdr P6389@e))) (cons* 'map (list 'lambda P6393@formals P6389@e) P6394@actuals)))) (map cdr P6390@map-env) (map (lambda (P6405@x) (list 'ref (car P6405@x))) P6390@map-env)))) (set! P6334@gen-cons (lambda (P6373@e P6374@x P6375@y P6376@xnew P6377@ynew) ((lambda (P6383@t) (if (memv P6383@t '(quote)) (if (eq? (car P6376@xnew) 'quote) ((lambda (P6385@xnew P6386@ynew) (if (and (eq? P6385@xnew P6374@x) (eq? P6386@ynew P6375@y)) (list 'quote P6373@e) (list 'quote (cons P6385@xnew P6386@ynew)))) (cadr P6376@xnew) (cadr P6377@ynew)) (if (null? (cadr P6377@ynew)) (list 'list P6376@xnew) (list 'cons P6376@xnew P6377@ynew))) (if (memv P6383@t '(list)) (cons 'list (cons P6376@xnew (cdr P6377@ynew))) (list 'cons P6376@xnew P6377@ynew)))) (car P6377@ynew)))) (set! P6336@gen-vector (lambda (P6367@e P6368@ls P6369@lsnew) (if (eq? (car P6369@lsnew) 'quote) (if (eq? (cadr P6369@lsnew) P6368@ls) (list 'quote P6367@e) (list 'quote (list->vector (cadr P6369@lsnew)))) (if (eq? (car P6369@lsnew) 'list) (cons 'vector (cdr P6369@lsnew)) (list 'list->vector P6369@lsnew))))) (set! P6338@regen (lambda (P6361@x) ((lambda (P6363@t) (if (memv P6363@t '(ref)) (cadr P6361@x) (if (memv P6363@t '(primitive)) (list 'primitive (cadr P6361@x)) (if (memv P6363@t '(quote)) (list 'quote (cadr P6361@x)) (if (memv P6363@t '(lambda)) (P2100@P1910@build-lambda '#f (cadr P6361@x) (P6338@regen (caddr P6361@x))) (if (memv P6363@t '(map)) ((lambda (P6365@ls) (cons '(primitive ellipsis-map) P6365@ls)) (map P6338@regen (cdr P6361@x))) (cons (list 'primitive (car P6361@x)) (map P6338@regen (cdr P6361@x))))))))) (car P6361@x)))) (lambda (P6339@e P6340@r P6341@mr) ((lambda (P6345@t) ((lambda (P6347@ls/false) (if P6347@ls/false (apply (lambda (P6349@x) (call-with-values (lambda () (P6324@gen-syntax P6339@e P6349@x P6340@r '() P2763@ellipsis? '#f)) (lambda (P6353@P6351@e P6354@P6352@maps) ((lambda (P6357@maps P6358@e) (P6338@regen P6358@e)) P6354@P6352@maps P6353@P6351@e)))) P6347@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6345@t))) (P2761@syntax-dispatch P6345@t '(_ any)))) P6339@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! P2775@core-macro-transformer (lambda (P6631@name) ((lambda (P6633@t) (if (memv P6633@t '(quote)) P2681@quote-transformer (if (memv P6633@t '(lambda)) P2685@lambda-transformer (if (memv P6633@t '(case-lambda)) P2683@case-lambda-transformer (if (memv P6633@t '(letrec)) P2657@letrec-transformer (if (memv P6633@t '(letrec*)) P2659@letrec*-transformer (if (memv P6633@t '(if)) P2673@if-transformer (if (memv P6633@t '(and)) P2675@and-transformer (if (memv P6633@t '(or)) P2677@or-transformer (if (memv P6633@t '(foreign-call)) P2757@foreign-call-transformer (if (memv P6633@t '(syntax-case)) P2769@syntax-case-transformer (if (memv P6633@t '(syntax)) P2773@syntax-transformer (if (memv P6633@t '(type-descriptor)) P2663@type-descriptor-transformer (if (memv P6633@t '(record-type-descriptor)) P2665@record-type-descriptor-transformer (if (memv P6633@t '(record-constructor-descriptor)) P2667@record-constructor-descriptor-transformer (if (memv P6633@t '(fluid-let-syntax)) P2661@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" P6631@name))))))))))))))))) P6631@name))) (set! P2777@symbol-macro (lambda (P6635@x P6636@set) ((lambda (P6639@t) ((lambda (P6641@ls/false) (if (and P6641@ls/false (apply (lambda (P6643@name) (and (P2264@id? P6643@name) (memq (P2266@id->sym P6643@name) P6636@set))) P6641@ls/false)) (apply (lambda (P6645@name) (P2687@bless (list 'quote P6645@name))) P6641@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6639@t))) (P2761@syntax-dispatch P6639@t '(_ any)))) P6635@x))) (set! P2779@macro-transformer (lambda (P6647@x) (if (procedure? P6647@x) P6647@x (if (symbol? P6647@x) ((lambda (P6649@t) (if (memv P6649@t '(define-record-type)) P2749@define-record-type-macro (if (memv P6649@t '(define-struct)) P2747@define-struct-macro (if (memv P6649@t '(include)) P2737@include-macro (if (memv P6649@t '(cond)) P2733@cond-macro (if (memv P6649@t '(let)) P2693@let-macro (if (memv P6649@t '(do)) P2725@do-macro (if (memv P6649@t '(or)) P2729@or-macro (if (memv P6649@t '(and)) P2731@and-macro (if (memv P6649@t '(let*)) P2727@let*-macro (if (memv P6649@t '(let-values)) P2695@let-values-macro (if (memv P6649@t '(let*-values)) P2697@let*-values-macro (if (memv P6649@t '(syntax-rules)) P2741@syntax-rules-macro (if (memv P6649@t '(quasiquote)) P2743@quasiquote-macro (if (memv P6649@t '(quasisyntax)) P2745@quasisyntax-macro (if (memv P6649@t '(with-syntax)) P2689@with-syntax-macro (if (memv P6649@t '(when)) P2669@when-macro (if (memv P6649@t '(unless)) P2671@unless-macro (if (memv P6649@t '(case)) P2679@case-macro (if (memv P6649@t '(identifier-syntax)) P2723@identifier-syntax-macro (if (memv P6649@t '(time)) P2715@time-macro (if (memv P6649@t '(delay)) P2717@delay-macro (if (memv P6649@t '(assert)) P2719@assert-macro (if (memv P6649@t '(endianness)) P2721@endianness-macro (if (memv P6649@t '(guard)) P2711@guard-macro (if (memv P6649@t '(define-enumeration)) P2713@define-enumeration-macro (if (memv P6649@t '(trace-lambda)) P2699@trace-lambda-macro (if (memv P6649@t '(trace-define)) P2701@trace-define-macro (if (memv P6649@t '(trace-define-syntax)) P2703@trace-define-syntax-macro (if (memv P6649@t '(trace-let-syntax)) P2707@trace-let-syntax-macro (if (memv P6649@t '(trace-letrec-syntax)) P2709@trace-letrec-syntax-macro (if (memv P6649@t '(define-condition-type)) P2751@define-condition-type-macro (if (memv P6649@t '(parameterize)) P2755@parameterize-macro (if (memv P6649@t '(include-into)) P2739@include-into-macro (if (memv P6649@t '(eol-style)) (lambda (P6651@x) (P2777@symbol-macro P6651@x '(none lf cr crlf nel crnel ls))) (if (memv P6649@t '(error-handling-mode)) (lambda (P6653@x) (P2777@symbol-macro P6653@x '(ignore raise replace))) (if (memv P6649@t '(buffer-mode)) (lambda (P6655@x) (P2777@symbol-macro P6655@x '(none line block))) (if (memv P6649@t '(file-options)) P2123@file-options-macro (if (memv P6649@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) P2753@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" P6647@x)))))))))))))))))))))))))))))))))))))))) P6647@x) (error 'core-macro-transformer '"BUG: invalid macro" P6647@x))))) (set! P2781@local-macro-transformer (lambda (P6657@x) (car P6657@x))) (set! P2783@do-macro-call (lambda (P6659@transformer P6660@expr) ((lambda (P6663@out) (begin ((letrec ((P6665@f (lambda (P6667@x) (if (not (P2208@stx? P6667@x)) (if (pair? P6667@x) (begin (P6665@f (car P6667@x)) (P6665@f (cdr P6667@x))) (if (vector? P6667@x) (vector-for-each P6665@f P6667@x) (if (symbol? P6667@x) (P2994@syntax-violation '#f '"raw symbol encountered in output of macro" P6660@expr P6667@x) (void)))) (void))))) P6665@f) P6663@out) (P2242@add-mark (P2232@gen-mark) P6663@out P6660@expr))) (P6659@transformer (P2242@add-mark P2234@anti-mark P6660@expr '#f))))) (set! P2785@chi-macro (lambda (P6669@p P6670@e) (P2783@do-macro-call (P2779@macro-transformer P6669@p) P6670@e))) (set! P2787@chi-local-macro (lambda (P6673@p P6674@e) (P2783@do-macro-call (P2781@local-macro-transformer P6673@p) P6674@e))) (set! P2789@chi-global-macro (lambda (P6677@p P6678@e) ((lambda (P6681@lib P6682@loc) (begin (P1791@P1447@visit-library P6681@lib) ((lambda (P6685@x) ((lambda (P6687@transformer) (P2783@do-macro-call P6687@transformer P6678@e)) (if (procedure? P6685@x) P6685@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" P6685@x)))) (symbol-value P6682@loc)))) (car P6677@p) (cdr P6677@p)))) (set! P2791@chi-expr* (lambda (P6689@e* P6690@r P6691@mr) (if (null? P6689@e*) '() ((lambda (P6695@e) (cons P6695@e (P2791@chi-expr* (cdr P6689@e*) P6690@r P6691@mr))) (P2795@chi-expr (car P6689@e*) P6690@r P6691@mr))))) (set! P2793@chi-application (lambda (P6697@e P6698@r P6699@mr) ((lambda (P6703@t) ((lambda (P6705@ls/false) (if P6705@ls/false (apply (lambda (P6707@rator P6708@rands) ((lambda (P6711@rator) (cons P6711@rator (P2791@chi-expr* P6708@rands P6698@r P6699@mr))) (P2795@chi-expr P6707@rator P6698@r P6699@mr))) P6705@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6703@t))) (P2761@syntax-dispatch P6703@t '(any . each-any)))) P6697@e))) (set! P2795@chi-expr (lambda (P6713@e P6714@r P6715@mr) (call-with-values (lambda () (P2304@syntax-type P6713@e P6714@r)) (lambda (P6722@P6719@type P6723@P6720@value P6724@P6721@kwd) ((lambda (P6728@kwd P6729@value P6730@type) ((lambda (P6734@t) (if (memv P6734@t '(core-macro)) ((lambda (P6736@transformer) (P6736@transformer P6713@e P6714@r P6715@mr)) (P2775@core-macro-transformer P6729@value)) (if (memv P6734@t '(global)) ((lambda (P6738@lib) ((lambda (P6740@loc) ((lambda () (begin ((P2868@inv-collector) P6738@lib) P6740@loc)))) (cdr P6729@value))) (car P6729@value)) (if (memv P6734@t '(core-prim)) ((lambda (P6742@name) (list 'primitive P6742@name)) P6729@value) (if (memv P6734@t '(call)) (P2793@chi-application P6713@e P6714@r P6715@mr) (if (memv P6734@t '(lexical)) ((lambda (P6744@lex) P6744@lex) (P2645@lexical-var P6729@value)) (if (memv P6734@t '(global-macro global-macro!)) (P2795@chi-expr (P2789@chi-global-macro P6729@value P6713@e) P6714@r P6715@mr) (if (memv P6734@t '(local-macro local-macro!)) (P2795@chi-expr (P2787@chi-local-macro P6729@value P6713@e) P6714@r P6715@mr) (if (memv P6734@t '(macro macro!)) (P2795@chi-expr (P2785@chi-macro P6729@value P6713@e) P6714@r P6715@mr) (if (memv P6734@t '(constant)) ((lambda (P6746@datum) (list 'quote P6746@datum)) P6729@value) (if (memv P6734@t '(set!)) (P2797@chi-set! P6713@e P6714@r P6715@mr) (if (memv P6734@t '(begin)) ((lambda (P6748@t) ((lambda (P6750@ls/false) (if P6750@ls/false (apply (lambda (P6752@x P6753@x*) (P2103@P1960@build-sequence '#f (P2791@chi-expr* (cons P6752@x P6753@x*) P6714@r P6715@mr))) P6750@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6748@t))) (P2761@syntax-dispatch P6748@t '(_ any . each-any)))) P6713@e) (if (memv P6734@t '(let-syntax letrec-syntax)) ((lambda (P6756@t) ((lambda (P6758@ls/false) (if (and P6758@ls/false (apply (lambda (P6760@xlhs* P6761@xrhs* P6762@xbody P6763@xbody*) (if (not (P2274@valid-bound-ids? P6760@xlhs*)) (P2994@syntax-violation '#f '"invalid identifiers" P6713@e) (void))) P6758@ls/false)) (apply (lambda (P6768@xlhs* P6769@xrhs* P6770@xbody P6771@xbody*) ((lambda (P6776@xlab*) ((lambda (P6778@xrib) ((lambda (P6780@xb*) ((lambda () (P2103@P1960@build-sequence '#f (P2791@chi-expr* (map (lambda (P6782@x) (P2244@add-subst P6778@xrib P6782@x)) (cons P6770@xbody P6771@xbody*)) (append (map cons P6776@xlab* P6780@xb*) P6714@r) (append (map cons P6776@xlab* P6780@xb*) P6715@mr)))))) (map (lambda (P6784@x) (P2326@make-eval-transformer (P2854@expand-transformer (if (eq? P6730@type 'let-syntax) P6784@x (P2244@add-subst P6778@xrib P6784@x)) P6715@mr))) P6769@xrhs*))) (P2195@make-full-rib P6768@xlhs* P6776@xlab*))) (map P2140@gen-label P6768@xlhs*))) P6758@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6756@t))) (P2761@syntax-dispatch P6756@t '(_ #(each (any any)) any . each-any)))) P6713@e) (if (memv P6734@t '(displaced-lexical)) (P2994@syntax-violation '#f '"identifier out of context" P6713@e) (if (memv P6734@t '(syntax)) (P2994@syntax-violation '#f '"reference to pattern variable outside a syntax form" P6713@e) (if (memv P6734@t '(define define-syntax module import library)) (P2994@syntax-violation '#f (string-append ((lambda (P6786@t) (if (memv P6786@t '(define)) '"a definition" (if (memv P6786@t '(define-syntax)) '"a define-syntax" (if (memv P6786@t '(module)) '"a module definition" (if (memv P6786@t '(library)) '"a library definition" (if (memv P6786@t '(import)) '"an import declaration" (if (memv P6786@t '(export)) '"an export declaration" '"a non-expression"))))))) P6730@type) '" was found where an expression was expected") P6713@e) (if (memv P6734@t '(mutable)) (P2994@syntax-violation '#f '"attempt to reference an unexportable variable" P6713@e) (P2994@syntax-violation '#f '"invalid expression" P6713@e)))))))))))))))))) P6730@type)) P6724@P6721@kwd P6723@P6720@value P6722@P6719@type))))) (set! P2797@chi-set! (lambda (P6788@e P6789@r P6790@mr) ((lambda (P6794@t) ((lambda (P6796@ls/false) (if (and P6796@ls/false (apply (lambda (P6798@x P6799@v) (P2264@id? P6798@x)) P6796@ls/false)) (apply (lambda (P6802@x P6803@v) (call-with-values (lambda () (P2304@syntax-type P6802@x P6789@r)) (lambda (P6809@P6806@type P6810@P6807@value P6811@P6808@kwd) ((lambda (P6815@kwd P6816@value P6817@type) ((lambda (P6821@t) (if (memv P6821@t '(lexical)) (begin (P2649@set-lexical-mutable! P6816@value '#t) (list 'set! (P2645@lexical-var P6816@value) (P2795@chi-expr P6803@v P6789@r P6790@mr))) (if (memv P6821@t '(core-prim)) (P2994@syntax-violation '#f '"cannot modify imported core primitive" P6788@e) (if (memv P6821@t '(global)) (P2994@syntax-violation '#f '"attempt to modify imported binding" P6788@e) (if (memv P6821@t '(global-macro!)) (P2795@chi-expr (P2789@chi-global-macro P6816@value P6788@e) P6789@r P6790@mr) (if (memv P6821@t '(local-macro!)) (P2795@chi-expr (P2787@chi-local-macro P6816@value P6788@e) P6789@r P6790@mr) (if (memv P6821@t '(mutable)) (P2994@syntax-violation '#f '"attempt to assign to an unexportable variable" P6788@e) (P2994@syntax-violation '#f '"invalid syntax" P6788@e)))))))) P6817@type)) P6811@P6808@kwd P6810@P6807@value P6809@P6806@type)))) P6796@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6794@t))) (P2761@syntax-dispatch P6794@t '(_ any any)))) P6788@e))) (set! P2799@verify-formals (lambda (P6823@fmls P6824@stx) ((lambda (P6827@t) ((lambda (P6829@ls/false) (if P6829@ls/false (apply (lambda (P6831@x*) (if (not (P2274@valid-bound-ids? P6831@x*)) (P2691@invalid-fmls-error P6824@stx P6823@fmls) (void))) P6829@ls/false) ((lambda (P6833@t) ((lambda (P6835@ls/false) (if P6835@ls/false (apply (lambda (P6837@x* P6838@x) (if (not (P2274@valid-bound-ids? (cons P6838@x P6837@x*))) (P2691@invalid-fmls-error P6824@stx P6823@fmls) (void))) P6835@ls/false) ((lambda (P6841@t) ((lambda (P6843@ls/false) (if P6843@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid syntax" P6824@stx)) P6843@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6841@t))) (P2761@syntax-dispatch P6841@t '_))) P6833@t))) (P2761@syntax-dispatch P6833@t '#(each+ any () any)))) P6827@t))) (P2761@syntax-dispatch P6827@t 'each-any))) P6823@fmls))) (set! P2801@chi-lambda-clause (lambda (P6845@stx P6846@fmls P6847@body* P6848@r P6849@mr) ((lambda (P6855@t) ((lambda (P6857@ls/false) (if P6857@ls/false (apply (lambda (P6859@x*) (begin (P2799@verify-formals P6846@fmls P6845@stx) ((lambda (P6861@lex* P6862@lab*) (values P6861@lex* (P2817@chi-internal (P2244@add-subst (P2195@make-full-rib P6859@x* P6862@lab*) P6847@body*) (P2653@add-lexicals P6862@lab* P6861@lex* P6848@r) P6849@mr))) (map P2136@gen-lexical P6859@x*) (map P2140@gen-label P6859@x*)))) P6857@ls/false) ((lambda (P6865@t) ((lambda (P6867@ls/false) (if P6867@ls/false (apply (lambda (P6869@x* P6870@x) (begin (P2799@verify-formals P6846@fmls P6845@stx) ((lambda (P6873@lex* P6874@lab* P6875@lex P6876@lab) (values (append P6873@lex* P6875@lex) (P2817@chi-internal (P2244@add-subst (P2195@make-full-rib (cons P6870@x P6869@x*) (cons P6876@lab P6874@lab*)) P6847@body*) (P2653@add-lexicals (cons P6876@lab P6874@lab*) (cons P6875@lex P6873@lex*) P6848@r) P6849@mr))) (map P2136@gen-lexical P6869@x*) (map P2140@gen-label P6869@x*) (P2136@gen-lexical P6870@x) (P2140@gen-label P6870@x)))) P6867@ls/false) ((lambda (P6881@t) ((lambda (P6883@ls/false) (if P6883@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid syntax" P6846@fmls)) P6883@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P6881@t))) (P2761@syntax-dispatch P6881@t '_))) P6865@t))) (P2761@syntax-dispatch P6865@t '#(each+ any () any)))) P6855@t))) (P2761@syntax-dispatch P6855@t 'each-any))) P6846@fmls))) (set! P2803@chi-lambda-clause* (lambda (P6885@stx P6886@fmls* P6887@body** P6888@r P6889@mr) (if (null? P6886@fmls*) (values '() '()) (call-with-values (lambda () (P2801@chi-lambda-clause P6885@stx (car P6886@fmls*) (car P6887@body**) P6888@r P6889@mr)) (lambda (P6897@P6895@a P6898@P6896@b) ((lambda (P6901@b P6902@a) (call-with-values (lambda () (P2803@chi-lambda-clause* P6885@stx (cdr P6886@fmls*) (cdr P6887@body**) P6888@r P6889@mr)) (lambda (P6907@P6905@a* P6908@P6906@b*) ((lambda (P6911@b* P6912@a*) (values (cons P6902@a P6912@a*) (cons P6901@b P6911@b*))) P6908@P6906@b* P6907@P6905@a*)))) P6898@P6896@b P6897@P6895@a)))))) (set! P2805@chi-defun (lambda (P6915@x P6916@r P6917@mr) ((lambda (P6921@fmls P6922@body*) (call-with-values (lambda () (P2801@chi-lambda-clause P6921@fmls P6921@fmls P6922@body* P6916@r P6917@mr)) (lambda (P6927@P6925@fmls P6928@P6926@body) ((lambda (P6931@body P6932@fmls) (P2100@P1910@build-lambda '#f P6932@fmls P6931@body)) P6928@P6926@body P6927@P6925@fmls)))) (car P6915@x) (cdr P6915@x)))) (set! P2807@chi-rhs (lambda (P6935@rhs P6936@r P6937@mr) ((lambda (P6941@t) (if (memv P6941@t '(defun)) (P2805@chi-defun (cdr P6935@rhs) P6936@r P6937@mr) (if (memv P6941@t '(expr)) ((lambda (P6943@expr) (P2795@chi-expr P6943@expr P6936@r P6937@mr)) (cdr P6935@rhs)) (if (memv P6941@t '(top-expr)) ((lambda (P6945@expr) (P2103@P1960@build-sequence '#f (list (P2795@chi-expr P6945@expr P6936@r P6937@mr) (P2104@P1962@build-void)))) (cdr P6935@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" P6935@rhs))))) (car P6935@rhs)))) (set! P2809@expand-interaction-rhs*/init* (lambda (P6947@lhs* P6948@rhs* P6949@init* P6950@r P6951@mr) ((letrec ((P6957@f (lambda (P6959@lhs* P6960@rhs*) (if (null? P6959@lhs*) (map (lambda (P6963@x) (P2795@chi-expr P6963@x P6950@r P6951@mr)) P6949@init*) ((lambda (P6965@lhs P6966@rhs) ((lambda (P6969@t) (if (memv P6969@t '(defun)) ((lambda (P6971@rhs) (cons (list 'set! P6965@lhs P6971@rhs) (P6957@f (cdr P6959@lhs*) (cdr P6960@rhs*)))) (P2805@chi-defun (cdr P6966@rhs) P6950@r P6951@mr)) (if (memv P6969@t '(expr)) ((lambda (P6973@rhs) (cons (list 'set! P6965@lhs P6973@rhs) (P6957@f (cdr P6959@lhs*) (cdr P6960@rhs*)))) (P2795@chi-expr (cdr P6966@rhs) P6950@r P6951@mr)) (if (memv P6969@t '(top-expr)) ((lambda (P6975@e) (cons P6975@e (P6957@f (cdr P6959@lhs*) (cdr P6960@rhs*)))) (P2795@chi-expr (cdr P6966@rhs) P6950@r P6951@mr)) (error 'expand-interaction '"invallid" P6966@rhs))))) (car P6966@rhs))) (car P6959@lhs*) (car P6960@rhs*)))))) P6957@f) P6947@lhs* P6948@rhs*))) (set! P2811@chi-rhs* (lambda (P6977@rhs* P6978@r P6979@mr) ((letrec ((P6983@f (lambda (P6985@ls) (if (null? P6985@ls) '() ((lambda (P6987@a) (cons P6987@a (P6983@f (cdr P6985@ls)))) (P2807@chi-rhs (car P6985@ls) P6978@r P6979@mr)))))) P6983@f) P6977@rhs*))) (set! P2813@find-bound=? (lambda (P6989@x P6990@lhs* P6991@rhs*) (if (null? P6990@lhs*) '#f (if (P2270@bound-id=? P6989@x (car P6990@lhs*)) (car P6991@rhs*) (P2813@find-bound=? P6989@x (cdr P6990@lhs*) (cdr P6991@rhs*)))))) (set! P2815@find-dups (lambda (P6995@ls) ((letrec ((P6997@f (lambda (P6999@ls P7000@dups) (if (null? P6999@ls) P7000@dups ((lambda (P7003@t) (if P7003@t ((lambda (P7005@x) (P6997@f (cdr P6999@ls) (cons (list (car P6999@ls) P7005@x) P7000@dups))) P7003@t) (P6997@f (cdr P6999@ls) P7000@dups))) (P2813@find-bound=? (car P6999@ls) (cdr P6999@ls) (cdr P6999@ls))))))) P6997@f) P6995@ls '()))) (set! P2817@chi-internal (lambda (P7007@e* P7008@r P7009@mr) ((lambda (P7013@rib) (call-with-values (lambda () (P2852@chi-body* (map (lambda (P7023@x) (P2244@add-subst P7013@rib P7023@x)) (P2262@syntax->list P7007@e*)) P7008@r P7009@mr '() '() '() '() '() P7013@rib '#f)) (lambda (P7025@P7015@e* P7026@P7016@r P7027@P7017@mr P7028@P7018@lex* P7029@P7019@rhs* P7030@P7020@mod** P7031@P7021@kwd* P7032@P7022@_exp*) ((lambda (P7041@_exp* P7042@kwd* P7043@mod** P7044@rhs* P7045@lex* P7046@mr P7047@r P7048@e*) (begin (if (null? P7048@e*) (P2994@syntax-violation '#f '"no expression in body" P7048@e*) (void)) ((lambda (P7057@init*) ((lambda (P7059@rhs*) ((lambda () (P2106@P1966@build-letrec* '#f (reverse P7045@lex*) (reverse P7059@rhs*) (P2103@P1960@build-sequence '#f P7057@init*))))) (P2811@chi-rhs* P7044@rhs* P7047@r P7046@mr))) (P2791@chi-expr* (append (apply append (reverse P7043@mod**)) P7048@e*) P7047@r P7046@mr)))) P7032@P7022@_exp* P7031@P7021@kwd* P7030@P7020@mod** P7029@P7019@rhs* P7028@P7018@lex* P7027@P7017@mr P7026@P7016@r P7025@P7015@e*)))) (P2183@make-empty-rib)))) (set! P2819@parse-module (lambda (P7061@e) ((lambda (P7063@t) ((lambda (P7065@ls/false) (if P7065@ls/false (apply (lambda (P7067@export* P7068@b*) (begin (if (not (for-all P2264@id? P7067@export*)) (P2994@syntax-violation '#f '"module exports must be identifiers" P7061@e) (void)) (values '#f (list->vector P7067@export*) P7068@b*))) P7065@ls/false) ((lambda (P7071@t) ((lambda (P7073@ls/false) (if P7073@ls/false (apply (lambda (P7075@name P7076@export* P7077@b*) (begin (if (not (P2264@id? P7075@name)) (P2994@syntax-violation '#f '"module name must be an identifier" P7061@e) (void)) (if (not (for-all P2264@id? P7076@export*)) (P2994@syntax-violation '#f '"module exports must be identifiers" P7061@e) (void)) (values P7075@name (list->vector P7076@export*) P7077@b*))) P7073@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7071@t))) (P2761@syntax-dispatch P7071@t '(_ any each-any . each-any)))) P7063@t))) (P2761@syntax-dispatch P7063@t '(_ each-any . each-any)))) P7061@e))) (set! P2825@P2820 (make-record-type-descriptor 'module-interface '#f 'P2823 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! P2827@P2822 '#f) (set! P2829@P2821 (make-record-constructor-descriptor P2825@P2820 '#f P2827@P2822)) (set! P2832@module-interface? (record-predicate P2825@P2820)) (set! P2834@make-module-interface (record-constructor P2829@P2821)) (set! P2836@module-interface-first-mark (record-accessor P2825@P2820 '0)) (set! P2838@module-interface-exp-id-vec (record-accessor P2825@P2820 '1)) (set! P2840@module-interface-exp-lab-vec (record-accessor P2825@P2820 '2)) (set! P2842@set-module-interface-first-mark! (record-mutator P2825@P2820 '0)) (set! P2844@set-module-interface-exp-id-vec! (record-mutator P2825@P2820 '1)) (set! P2846@set-module-interface-exp-lab-vec! (record-mutator P2825@P2820 '2)) (set! P2848@module-interface-exp-id* (lambda (P7081@iface P7082@id) ((lambda (P7086@diff-marks) (begin (set! P7086@diff-marks (lambda (P7093@ls P7094@x) (begin (if (null? P7093@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (P7097@a) (if (eq? P7097@a P7094@x) '() (cons P7097@a (P7086@diff-marks (cdr P7093@ls) P7094@x)))) (car P7093@ls))))) ((lambda (P7087@diff P7088@id-vec) (if (null? P7087@diff) P7088@id-vec (vector-map (lambda (P7091@x) (P2210@make-stx (P2212@stx-expr P7091@x) (append P7087@diff (P2214@stx-mark* P7091@x)) '() '())) P7088@id-vec))) (P7086@diff-marks (P2214@stx-mark* P7082@id) (P2836@module-interface-first-mark P7081@iface)) (P2838@module-interface-exp-id-vec P7081@iface)))) '#f))) (set! P2850@chi-internal-module (lambda (P7099@e P7100@r P7101@mr P7102@lex* P7103@rhs* P7104@mod** P7105@kwd*) (call-with-values (lambda () (P2819@parse-module P7099@e)) (lambda (P7116@P7113@name P7117@P7114@exp-id* P7118@P7115@e*) ((lambda (P7122@e* P7123@exp-id* P7124@name) ((lambda (P7128@rib) ((lambda (P7130@e*) ((lambda () (call-with-values (lambda () (P2852@chi-body* P7130@e* P7100@r P7101@mr P7102@lex* P7103@rhs* P7104@mod** P7105@kwd* '() P7128@rib '#f)) (lambda (P7140@P7132@e* P7141@P7133@r P7142@P7134@mr P7143@P7135@lex* P7144@P7136@rhs* P7145@P7137@mod** P7146@P7138@kwd* P7147@P7139@_exp*) ((lambda (P7156@_exp* P7157@kwd* P7158@mod** P7159@rhs* P7160@lex* P7161@mr P7162@r P7163@e*) ((lambda (P7172@exp-lab* P7173@mod**) (if (not P7124@name) (values P7160@lex* P7159@rhs* P7123@exp-id* P7172@exp-lab* P7162@r P7161@mr P7173@mod** P7157@kwd*) ((lambda (P7176@lab P7177@iface) (values P7160@lex* P7159@rhs* (vector P7124@name) (vector P7176@lab) (cons (cons P7176@lab (cons '$module P7177@iface)) P7162@r) (cons (cons P7176@lab (cons '$module P7177@iface)) P7161@mr) P7173@mod** P7157@kwd*)) (P2140@gen-label 'module) (P2834@make-module-interface (car (P2214@stx-mark* P7124@name)) (vector-map (lambda (P7180@x) (P2210@make-stx (P2212@stx-expr P7180@x) (P2214@stx-mark* P7180@x) '() '())) P7123@exp-id*) P7172@exp-lab*)))) (vector-map (lambda (P7182@x) (or (P2290@id->label (P2210@make-stx (P2266@id->sym P7182@x) (P2214@stx-mark* P7182@x) (list P7128@rib) '())) (P2994@syntax-violation '#f '"cannot find module export" P7182@x))) P7123@exp-id*) (cons P7163@e* P7158@mod**))) P7147@P7139@_exp* P7146@P7138@kwd* P7145@P7137@mod** P7144@P7136@rhs* P7143@P7135@lex* P7142@P7134@mr P7141@P7133@r P7140@P7132@e*)))))) (map (lambda (P7184@x) (P2244@add-subst P7128@rib P7184@x)) (P2262@syntax->list P7122@e*)))) (P2183@make-empty-rib))) P7118@P7115@e* P7117@P7114@exp-id* P7116@P7113@name))))) (set! P2852@chi-body* (lambda (P7186@e* P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7192@kwd* P7193@exp* P7194@rib P7195@top?) (if (null? P7186@e*) (values P7186@e* P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7192@kwd* P7193@exp*) ((lambda (P7206@e) (call-with-values (lambda () (P2304@syntax-type P7206@e P7187@r)) (lambda (P7211@P7208@type P7212@P7209@value P7213@P7210@kwd) ((lambda (P7217@kwd P7218@value P7219@type) ((lambda (P7223@kwd*) ((lambda (P7225@t) (if (memv P7225@t '(define)) (call-with-values (lambda () (P2637@parse-define P7206@e)) (lambda (P7229@P7227@id P7230@P7228@rhs) ((lambda (P7233@rhs P7234@id) (begin (if (P2278@bound-id-member? P7234@id P7223@kwd*) (P2994@syntax-violation '#f '"cannot redefine keyword" P7206@e) (void)) (call-with-values (lambda () (P2144@gen-define-label+loc P7234@id P7194@rib)) (lambda (P7239@P7237@lab P7240@P7238@lex) ((lambda (P7243@lex P7244@lab) (begin (P2185@extend-rib! P7194@rib P7234@id P7244@lab) (P2852@chi-body* (cdr P7186@e*) (P2651@add-lexical P7244@lab P7243@lex P7187@r) P7188@mr (cons P7243@lex P7189@lex*) (cons P7233@rhs P7190@rhs*) P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?))) P7240@P7238@lex P7239@P7237@lab))))) P7230@P7228@rhs P7229@P7227@id))) (if (memv P7225@t '(define-syntax)) (call-with-values (lambda () (P2639@parse-define-syntax P7206@e)) (lambda (P7249@P7247@id P7250@P7248@rhs) ((lambda (P7253@rhs P7254@id) (begin (if (P2278@bound-id-member? P7254@id P7223@kwd*) (P2994@syntax-violation '#f '"cannot redefine keyword" P7206@e) (void)) ((lambda (P7257@lab P7258@expanded-rhs) (begin (P2185@extend-rib! P7194@rib P7254@id P7257@lab) ((lambda (P7261@b) (P2852@chi-body* (cdr P7186@e*) (cons (cons P7257@lab P7261@b) P7187@r) (cons (cons P7257@lab P7261@b) P7188@mr) P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?)) (P2326@make-eval-transformer P7258@expanded-rhs)))) (P2146@gen-define-label P7254@id P7194@rib) (P2854@expand-transformer P7253@rhs P7188@mr)))) P7250@P7248@rhs P7249@P7247@id))) (if (memv P7225@t '(let-syntax letrec-syntax)) ((lambda (P7263@t) ((lambda (P7265@ls/false) (if (and P7265@ls/false (apply (lambda (P7267@xlhs* P7268@xrhs* P7269@xbody*) (if (not (P2274@valid-bound-ids? P7267@xlhs*)) (P2994@syntax-violation '#f '"invalid identifiers" P7206@e) (void))) P7265@ls/false)) (apply (lambda (P7273@xlhs* P7274@xrhs* P7275@xbody*) ((lambda (P7279@xlab*) ((lambda (P7281@xrib) ((lambda (P7283@xb*) ((lambda () (P2852@chi-body* (append (map (lambda (P7285@x) (P2244@add-subst P7281@xrib P7285@x)) P7275@xbody*) (cdr P7186@e*)) (append (map cons P7279@xlab* P7283@xb*) P7187@r) (append (map cons P7279@xlab* P7283@xb*) P7188@mr) P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?)))) (map (lambda (P7287@x) (P2326@make-eval-transformer (P2854@expand-transformer (if (eq? P7219@type 'let-syntax) P7287@x (P2244@add-subst P7281@xrib P7287@x)) P7188@mr))) P7274@xrhs*))) (P2195@make-full-rib P7273@xlhs* P7279@xlab*))) (map P2140@gen-label P7273@xlhs*))) P7265@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7263@t))) (P2761@syntax-dispatch P7263@t '(_ #(each (any any)) . each-any)))) P7206@e) (if (memv P7225@t '(begin)) ((lambda (P7289@t) ((lambda (P7291@ls/false) (if P7291@ls/false (apply (lambda (P7293@x*) (P2852@chi-body* (append P7293@x* (cdr P7186@e*)) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?)) P7291@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7289@t))) (P2761@syntax-dispatch P7289@t '(_ . each-any)))) P7206@e) (if (memv P7225@t '(global-macro global-macro!)) (P2852@chi-body* (cons (P2244@add-subst P7194@rib (P2789@chi-global-macro P7218@value P7206@e)) (cdr P7186@e*)) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?) (if (memv P7225@t '(local-macro local-macro!)) (P2852@chi-body* (cons (P2244@add-subst P7194@rib (P2787@chi-local-macro P7218@value P7206@e)) (cdr P7186@e*)) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?) (if (memv P7225@t '(macro macro!)) (P2852@chi-body* (cons (P2244@add-subst P7194@rib (P2785@chi-macro P7218@value P7206@e)) (cdr P7186@e*)) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?) (if (memv P7225@t '(module)) (call-with-values (lambda () (P2850@chi-internal-module P7206@e P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd*)) (lambda (P7303@P7295@lex* P7304@P7296@rhs* P7305@P7297@m-exp-id* P7306@P7298@m-exp-lab* P7307@P7299@r P7308@P7300@mr P7309@P7301@mod** P7310@P7302@kwd*) ((lambda (P7319@kwd* P7320@mod** P7321@mr P7322@r P7323@m-exp-lab* P7324@m-exp-id* P7325@rhs* P7326@lex*) (begin (vector-for-each (lambda (P7335@id P7336@lab) (P2185@extend-rib! P7194@rib P7335@id P7336@lab)) P7324@m-exp-id* P7323@m-exp-lab*) (P2852@chi-body* (cdr P7186@e*) P7322@r P7321@mr P7326@lex* P7325@rhs* P7320@mod** P7319@kwd* P7193@exp* P7194@rib P7195@top?))) P7310@P7302@kwd* P7309@P7301@mod** P7308@P7300@mr P7307@P7299@r P7306@P7298@m-exp-lab* P7305@P7297@m-exp-id* P7304@P7296@rhs* P7303@P7295@lex*))) (if (memv P7225@t '(library)) (begin (P2964@library-expander (P2286@stx->datum P7206@e)) (P2852@chi-body* (cdr P7186@e*) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?)) (if (memv P7225@t '(export)) ((lambda (P7339@t) ((lambda (P7341@ls/false) (if P7341@ls/false (apply (lambda (P7343@exp-decl*) (P2852@chi-body* (cdr P7186@e*) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* (append P7343@exp-decl* P7193@exp*) P7194@rib P7195@top?)) P7341@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7339@t))) (P2761@syntax-dispatch P7339@t '(_ . each-any)))) P7206@e) (if (memv P7225@t '(import)) ((lambda () ((lambda (P7346@module-import? P7348@module-import P7350@library-import) (begin (set! P7346@module-import? (lambda (P7422@e) ((lambda (P7424@t) ((lambda (P7426@ls/false) (if (and P7426@ls/false (apply (lambda (P7428@id) (P2264@id? P7428@id)) P7426@ls/false)) (apply (lambda (P7430@id) '#t) P7426@ls/false) ((lambda (P7432@t) ((lambda (P7434@ls/false) (if P7434@ls/false (apply (lambda (P7436@imp*) '#f) P7434@ls/false) ((lambda (P7438@t) ((lambda (P7440@ls/false) (if P7440@ls/false (apply (lambda () (P2994@syntax-violation '#f '"malformed import form" P7422@e)) P7440@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7438@t))) (P2761@syntax-dispatch P7438@t '_))) P7432@t))) (P2761@syntax-dispatch P7432@t '(_ . each-any)))) P7424@t))) (P2761@syntax-dispatch P7424@t '(_ any)))) P7422@e))) (set! P7348@module-import (lambda (P7391@e P7392@r) ((lambda (P7395@t) ((lambda (P7397@ls/false) (if (and P7397@ls/false (apply (lambda (P7399@id) (P2264@id? P7399@id)) P7397@ls/false)) (apply (lambda (P7401@id) (call-with-values (lambda () (P2304@syntax-type P7401@id P7392@r)) (lambda (P7406@P7403@type P7407@P7404@value P7408@P7405@kwd) ((lambda (P7412@kwd P7413@value P7414@type) ((lambda (P7418@t) (if (memv P7418@t '($module)) ((lambda (P7420@iface) (values (P2848@module-interface-exp-id* P7420@iface P7401@id) (P2840@module-interface-exp-lab-vec P7420@iface))) P7413@value) (P2994@syntax-violation '#f '"invalid import" P7391@e))) P7414@type)) P7408@P7405@kwd P7407@P7404@value P7406@P7403@type)))) P7397@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7395@t))) (P2761@syntax-dispatch P7395@t '(_ any)))) P7391@e))) (set! P7350@library-import (lambda (P7365@e) ((lambda (P7367@t) ((lambda (P7369@ls/false) (if P7369@ls/false (apply (lambda (P7371@ctxt P7372@imp*) (call-with-values (lambda () (P2862@parse-import-spec* (P3000@syntax->datum P7372@imp*))) (lambda (P7377@P7375@subst-names P7378@P7376@subst-labels) ((lambda (P7381@subst-labels P7382@subst-names) (values (vector-map (lambda (P7385@name) (P2230@datum->stx P7371@ctxt P7385@name)) P7382@subst-names) P7381@subst-labels)) P7378@P7376@subst-labels P7377@P7375@subst-names)))) P7369@ls/false) ((lambda (P7387@t) ((lambda (P7389@ls/false) (if P7389@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid import form" P7365@e)) P7389@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7387@t))) (P2761@syntax-dispatch P7387@t '_))) P7367@t))) (P2761@syntax-dispatch P7367@t '(any . each-any)))) P7365@e))) (begin (call-with-values (lambda () (if (P7346@module-import? P7206@e) (P7348@module-import P7206@e P7187@r) (P7350@library-import P7206@e))) (lambda (P7353@P7351@id* P7354@P7352@lab*) ((lambda (P7357@lab* P7358@id*) (vector-for-each (lambda (P7361@id P7362@lab) (P2185@extend-rib! P7194@rib P7361@id P7362@lab)) P7358@id* P7357@lab*)) P7354@P7352@lab* P7353@P7351@id*))) (P2852@chi-body* (cdr P7186@e*) P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?)))) '#f '#f '#f))) (if P7195@top? (P2852@chi-body* (cdr P7186@e*) P7187@r P7188@mr (cons (P2136@gen-lexical 'dummy) P7189@lex*) (cons (cons 'top-expr P7206@e) P7190@rhs*) P7191@mod** P7223@kwd* P7193@exp* P7194@rib P7195@top?) (values P7186@e* P7187@r P7188@mr P7189@lex* P7190@rhs* P7191@mod** P7223@kwd* P7193@exp*)))))))))))))) P7219@type)) (if (P2264@id? P7217@kwd) (cons P7217@kwd P7192@kwd*) P7192@kwd*))) P7213@P7210@kwd P7212@P7209@value P7211@P7208@type)))) (car P7186@e*))))) (set! P2854@expand-transformer (lambda (P7442@expr P7443@r) ((lambda (P7446@rtc) ((lambda (P7448@expanded-rhs) (begin (for-each ((lambda (P7450@mark-visit) (lambda (P7452@x) (begin (P1790@P1445@invoke-library P7452@x) (P7450@mark-visit P7452@x)))) (P2870@vis-collector)) (P7446@rtc)) P7448@expanded-rhs)) ((lambda (P7458@P7454@inv-collector P7459@P7455@vis-collector P7460@P7456@inv-collector P7461@P7457@vis-collector) ((lambda (P7466@swap) (dynamic-wind P7466@swap (lambda () (P2795@chi-expr P7442@expr P7443@r P7443@r)) P7466@swap)) (lambda () (begin ((lambda (P7468@t) (begin (P7458@P7454@inv-collector P7460@P7456@inv-collector) (set! P7460@P7456@inv-collector P7468@t))) (P7458@P7454@inv-collector)) ((lambda (P7470@t) (begin (P7459@P7455@vis-collector P7461@P7457@vis-collector) (set! P7461@P7457@vis-collector P7470@t))) (P7459@P7455@vis-collector)))))) P2868@inv-collector P2870@vis-collector P7446@rtc (lambda (P7472@x) (values))))) (P2866@make-collector)))) (set! P2856@parse-exports (lambda (P7474@exp*) ((letrec ((P7476@f (lambda (P7478@exp* P7479@int* P7480@ext*) (if (null? P7478@exp*) (begin (if (not (P2274@valid-bound-ids? P7480@ext*)) (P2994@syntax-violation 'export '"invalid exports" (P2815@find-dups P7480@ext*)) (void)) (values (map P3000@syntax->datum P7480@ext*) P7479@int*)) ((lambda (P7484@t) ((lambda (P7486@ls/false) (if P7486@ls/false (apply (lambda (P7488@rename P7489@i* P7490@e*) (begin (if (not (and (eq? (P3000@syntax->datum P7488@rename) 'rename) (for-all P2264@id? P7489@i*) (for-all P2264@id? P7490@e*))) (P2994@syntax-violation 'export '"invalid export specifier" (car P7478@exp*)) (void)) (P7476@f (cdr P7478@exp*) (append P7489@i* P7479@int*) (append P7490@e* P7480@ext*)))) P7486@ls/false) ((lambda (P7494@t) ((lambda (P7496@ls/false) (if P7496@ls/false (apply (lambda (P7498@ie) (begin (if (not (P2264@id? P7498@ie)) (P2994@syntax-violation 'export '"invalid export" P7498@ie) (void)) (P7476@f (cdr P7478@exp*) (cons P7498@ie P7479@int*) (cons P7498@ie P7480@ext*)))) P7496@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7494@t))) (P2761@syntax-dispatch P7494@t 'any))) P7484@t))) (P2761@syntax-dispatch P7484@t '(any . #(each (any any)))))) (car P7478@exp*)))))) P7476@f) P7474@exp* '() '()))) (set! P2858@parse-library-name (lambda (P7500@spec) ((lambda (P7503@parse) (begin (set! P7503@parse (lambda (P7514@x) ((lambda (P7516@t) ((lambda (P7518@ls/false) (if (and P7518@ls/false (apply (lambda (P7520@v*) (for-all (lambda (P7522@x) ((lambda (P7524@x) (and (integer? P7524@x) (exact? P7524@x))) (P3000@syntax->datum P7522@x))) P7520@v*)) P7518@ls/false)) (apply (lambda (P7526@v*) (values '() (map P3000@syntax->datum P7526@v*))) P7518@ls/false) ((lambda (P7528@t) ((lambda (P7530@ls/false) (if (and P7530@ls/false (apply (lambda (P7532@x P7533@rest) (symbol? (P3000@syntax->datum P7532@x))) P7530@ls/false)) (apply (lambda (P7536@x P7537@rest) (call-with-values (lambda () (P7503@parse P7537@rest)) (lambda (P7542@P7540@x* P7543@P7541@v*) ((lambda (P7546@v* P7547@x*) (values (cons (P3000@syntax->datum P7536@x) P7547@x*) P7546@v*)) P7543@P7541@v* P7542@P7540@x*)))) P7530@ls/false) ((lambda (P7550@t) ((lambda (P7552@ls/false) (if P7552@ls/false (apply (lambda () (values '() '())) P7552@ls/false) ((lambda (P7554@t) ((lambda (P7556@ls/false) (if P7556@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid library name" P7500@spec)) P7556@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7554@t))) (P2761@syntax-dispatch P7554@t '_))) P7550@t))) (P2761@syntax-dispatch P7550@t '()))) P7528@t))) (P2761@syntax-dispatch P7528@t '(any . any)))) P7516@t))) (P2761@syntax-dispatch P7516@t '(each-any)))) P7514@x))) (call-with-values (lambda () (P7503@parse P7500@spec)) (lambda (P7506@P7504@name* P7507@P7505@ver*) ((lambda (P7510@ver* P7511@name*) (begin (if (null? P7511@name*) (P2994@syntax-violation '#f '"empty library name" P7500@spec) (void)) (values P7511@name* P7510@ver*))) P7507@P7505@ver* P7506@P7504@name*))))) '#f))) (set! P2860@parse-library (lambda (P7558@e) ((lambda (P7560@t) ((lambda (P7562@ls/false) (if (and P7562@ls/false (apply (lambda (P7564@library P7565@name* P7566@export P7567@exp* P7568@import P7569@imp* P7570@b*) (and (eq? (P3000@syntax->datum P7566@export) 'export) (eq? (P3000@syntax->datum P7568@import) 'import) (eq? (P3000@syntax->datum P7564@library) 'library))) P7562@ls/false)) (apply (lambda (P7578@library P7579@name* P7580@export P7581@exp* P7582@import P7583@imp* P7584@b*) (values P7579@name* P7581@exp* P7583@imp* P7584@b*)) P7562@ls/false) ((lambda (P7592@t) ((lambda (P7594@ls/false) (if P7594@ls/false (apply (lambda () (P2994@syntax-violation '#f '"malformed library" P7558@e)) P7594@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7592@t))) (P2761@syntax-dispatch P7592@t '_))) P7560@t))) (P2761@syntax-dispatch P7560@t '(any each-any (any . each-any) (any . each-any) . each-any)))) P7558@e))) (set! P2862@parse-import-spec* ((lambda () ((lambda (P7597@idsyn? P7599@dup-error P7601@merge-substs P7603@exclude* P7605@find* P7607@rem* P7609@remove-dups P7611@parse-library-name P7613@import-library P7615@get-import P7617@add-imports!) (begin (set! P7597@idsyn? (lambda (P8108@x) (symbol? (P3000@syntax->datum P8108@x)))) (set! P7599@dup-error (lambda (P8106@name) (P2994@syntax-violation 'import '"two imports with different bindings" P8106@name))) (set! P7601@merge-substs (lambda (P8088@s P8089@subst) ((lambda (P8093@insert-to-subst) (begin (set! P8093@insert-to-subst (lambda (P8094@a P8095@subst) ((lambda (P8098@name P8099@label) ((lambda (P8102@t) (if P8102@t ((lambda (P8104@x) (if (eq? (cdr P8104@x) P8099@label) P8095@subst (P7599@dup-error P8098@name))) P8102@t) (cons P8094@a P8095@subst))) (assq P8098@name P8095@subst))) (car P8094@a) (cdr P8094@a)))) (if (null? P8088@s) P8089@subst (P8093@insert-to-subst (car P8088@s) (P7601@merge-substs (cdr P8088@s) P8089@subst))))) '#f))) (set! P7603@exclude* (lambda (P8046@sym* P8047@subst) ((lambda (P8051@exclude) (begin (set! P8051@exclude (lambda (P8072@sym P8073@subst) (if (null? P8073@subst) (P2994@syntax-violation 'import '"cannot rename unbound identifier" P8072@sym) (if (eq? P8072@sym (caar P8073@subst)) (values (cdar P8073@subst) (cdr P8073@subst)) ((lambda (P8076@a) (call-with-values (lambda () (P8051@exclude P8072@sym (cdr P8073@subst))) (lambda (P8080@P8078@old P8081@P8079@subst) ((lambda (P8084@subst P8085@old) (values P8085@old (cons P8076@a P8084@subst))) P8081@P8079@subst P8080@P8078@old)))) (car P8073@subst)))))) (if (null? P8046@sym*) (values '() P8047@subst) (call-with-values (lambda () (P8051@exclude (car P8046@sym*) P8047@subst)) (lambda (P8054@P8052@old P8055@P8053@subst) ((lambda (P8058@subst P8059@old) (call-with-values (lambda () (P7603@exclude* (cdr P8046@sym*) P8058@subst)) (lambda (P8064@P8062@old* P8065@P8063@subst) ((lambda (P8068@subst P8069@old*) (values (cons P8059@old P8069@old*) P8068@subst)) P8065@P8063@subst P8064@P8062@old*)))) P8055@P8053@subst P8054@P8052@old)))))) '#f))) (set! P7605@find* (lambda (P8038@sym* P8039@subst) (map (lambda (P8042@x) ((lambda (P8044@t) (if P8044@t (cdr P8044@t) (P2994@syntax-violation 'import '"cannot find identifier" P8042@x))) (assq P8042@x P8039@subst))) P8038@sym*))) (set! P7607@rem* (lambda (P8030@sym* P8031@subst) ((letrec ((P8034@f (lambda (P8036@subst) (if (null? P8036@subst) '() (if (memq (caar P8036@subst) P8030@sym*) (P8034@f (cdr P8036@subst)) (cons (car P8036@subst) (P8034@f (cdr P8036@subst)))))))) P8034@f) P8031@subst))) (set! P7609@remove-dups (lambda (P8028@ls) (if (null? P8028@ls) '() (if (memq (car P8028@ls) (cdr P8028@ls)) (P7609@remove-dups (cdr P8028@ls)) (cons (car P8028@ls) (P7609@remove-dups (cdr P8028@ls))))))) (set! P7611@parse-library-name (lambda (P7798@spec) ((lambda (P7801@subversion? P7803@subversion-pred P7805@version-pred) (begin (set! P7801@subversion? (lambda (P8024@x) ((lambda (P8026@x) (and (integer? P8026@x) (exact? P8026@x) (>= P8026@x '0))) (P3000@syntax->datum P8024@x)))) (set! P7803@subversion-pred (lambda (P7928@x*) ((lambda (P7930@t) ((lambda (P7932@ls/false) (if (and P7932@ls/false (apply (lambda (P7934@n) (P7801@subversion? P7934@n)) P7932@ls/false)) (apply (lambda (P7936@n) (lambda (P7938@x) (= P7938@x (P3000@syntax->datum P7936@n)))) P7932@ls/false) ((lambda (P7940@t) ((lambda (P7942@ls/false) (if (and P7942@ls/false (apply (lambda (P7944@p? P7945@sub*) (eq? (P3000@syntax->datum P7944@p?) 'and)) P7942@ls/false)) (apply (lambda (P7948@p? P7949@sub*) ((lambda (P7952@p*) (lambda (P7954@x) (for-all (lambda (P7956@p) (P7956@p P7954@x)) P7952@p*))) (map P7803@subversion-pred P7949@sub*))) P7942@ls/false) ((lambda (P7958@t) ((lambda (P7960@ls/false) (if (and P7960@ls/false (apply (lambda (P7962@p? P7963@sub*) (eq? (P3000@syntax->datum P7962@p?) 'or)) P7960@ls/false)) (apply (lambda (P7966@p? P7967@sub*) ((lambda (P7970@p*) (lambda (P7972@x) (exists (lambda (P7974@p) (P7974@p P7972@x)) P7970@p*))) (map P7803@subversion-pred P7967@sub*))) P7960@ls/false) ((lambda (P7976@t) ((lambda (P7978@ls/false) (if (and P7978@ls/false (apply (lambda (P7980@p? P7981@sub) (eq? (P3000@syntax->datum P7980@p?) 'not)) P7978@ls/false)) (apply (lambda (P7984@p? P7985@sub) ((lambda (P7988@p) (lambda (P7990@x) (not (P7988@p P7990@x)))) (P7803@subversion-pred P7985@sub))) P7978@ls/false) ((lambda (P7992@t) ((lambda (P7994@ls/false) (if (and P7994@ls/false (apply (lambda (P7996@p? P7997@n) (and (eq? (P3000@syntax->datum P7996@p?) '<=) (P7801@subversion? P7997@n))) P7994@ls/false)) (apply (lambda (P8000@p? P8001@n) (lambda (P8004@x) (<= P8004@x (P3000@syntax->datum P8001@n)))) P7994@ls/false) ((lambda (P8006@t) ((lambda (P8008@ls/false) (if (and P8008@ls/false (apply (lambda (P8010@p? P8011@n) (and (eq? (P3000@syntax->datum P8010@p?) '>=) (P7801@subversion? P8011@n))) P8008@ls/false)) (apply (lambda (P8014@p? P8015@n) (lambda (P8018@x) (>= P8018@x (P3000@syntax->datum P8015@n)))) P8008@ls/false) ((lambda (P8020@t) ((lambda (P8022@ls/false) (if P8022@ls/false (apply (lambda () (P2994@syntax-violation 'import '"invalid sub-version spec" P7798@spec P7928@x*)) P8022@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P8020@t))) (P2761@syntax-dispatch P8020@t '_))) P8006@t))) (P2761@syntax-dispatch P8006@t '(any any)))) P7992@t))) (P2761@syntax-dispatch P7992@t '(any any)))) P7976@t))) (P2761@syntax-dispatch P7976@t '(any any)))) P7958@t))) (P2761@syntax-dispatch P7958@t '(any . each-any)))) P7940@t))) (P2761@syntax-dispatch P7940@t '(any . each-any)))) P7930@t))) (P2761@syntax-dispatch P7930@t 'any))) P7928@x*))) (set! P7805@version-pred (lambda (P7848@x*) ((lambda (P7850@t) ((lambda (P7852@ls/false) (if P7852@ls/false (apply (lambda () (lambda (P7854@x) '#t)) P7852@ls/false) ((lambda (P7856@t) ((lambda (P7858@ls/false) (if (and P7858@ls/false (apply (lambda (P7860@c P7861@ver*) (eq? (P3000@syntax->datum P7860@c) 'and)) P7858@ls/false)) (apply (lambda (P7864@c P7865@ver*) ((lambda (P7868@p*) (lambda (P7870@x) (for-all (lambda (P7872@p) (P7872@p P7870@x)) P7868@p*))) (map P7805@version-pred P7865@ver*))) P7858@ls/false) ((lambda (P7874@t) ((lambda (P7876@ls/false) (if (and P7876@ls/false (apply (lambda (P7878@c P7879@ver*) (eq? (P3000@syntax->datum P7878@c) 'or)) P7876@ls/false)) (apply (lambda (P7882@c P7883@ver*) ((lambda (P7886@p*) (lambda (P7888@x) (exists (lambda (P7890@p) (P7890@p P7888@x)) P7886@p*))) (map P7805@version-pred P7883@ver*))) P7876@ls/false) ((lambda (P7892@t) ((lambda (P7894@ls/false) (if (and P7894@ls/false (apply (lambda (P7896@c P7897@ver) (eq? (P3000@syntax->datum P7896@c) 'not)) P7894@ls/false)) (apply (lambda (P7900@c P7901@ver) ((lambda (P7904@p) (lambda (P7906@x) (not (P7904@p P7906@x)))) (P7805@version-pred P7901@ver))) P7894@ls/false) ((lambda (P7908@t) ((lambda (P7910@ls/false) (if P7910@ls/false (apply (lambda (P7912@sub*) ((lambda (P7914@p*) (lambda (P7916@x) ((letrec ((P7918@f (lambda (P7920@p* P7921@x) (if (null? P7920@p*) '#t (if (null? P7921@x) '#f (and ((car P7920@p*) (car P7921@x)) (P7918@f (cdr P7920@p*) (cdr P7921@x)))))))) P7918@f) P7914@p* P7916@x))) (map P7803@subversion-pred P7912@sub*))) P7910@ls/false) ((lambda (P7924@t) ((lambda (P7926@ls/false) (if P7926@ls/false (apply (lambda () (P2994@syntax-violation 'import '"invalid version spec" P7798@spec P7848@x*)) P7926@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7924@t))) (P2761@syntax-dispatch P7924@t '_))) P7908@t))) (P2761@syntax-dispatch P7908@t 'each-any))) P7892@t))) (P2761@syntax-dispatch P7892@t '(any any)))) P7874@t))) (P2761@syntax-dispatch P7874@t '(any . each-any)))) P7856@t))) (P2761@syntax-dispatch P7856@t '(any . each-any)))) P7850@t))) (P2761@syntax-dispatch P7850@t '()))) P7848@x*))) ((letrec ((P7806@f (lambda (P7808@x) ((lambda (P7810@t) ((lambda (P7812@ls/false) (if P7812@ls/false (apply (lambda (P7814@version-spec*) (values '() (P7805@version-pred P7814@version-spec*))) P7812@ls/false) ((lambda (P7816@t) ((lambda (P7818@ls/false) (if (and P7818@ls/false (apply (lambda (P7820@x P7821@x*) (P7597@idsyn? P7820@x)) P7818@ls/false)) (apply (lambda (P7824@x P7825@x*) (call-with-values (lambda () (P7806@f P7825@x*)) (lambda (P7830@P7828@name P7831@P7829@pred) ((lambda (P7834@pred P7835@name) (values (cons (P3000@syntax->datum P7824@x) P7835@name) P7834@pred)) P7831@P7829@pred P7830@P7828@name)))) P7818@ls/false) ((lambda (P7838@t) ((lambda (P7840@ls/false) (if P7840@ls/false (apply (lambda () (values '() (lambda (P7842@x) '#t))) P7840@ls/false) ((lambda (P7844@t) ((lambda (P7846@ls/false) (if P7846@ls/false (apply (lambda () (P2994@syntax-violation '#f '"invalid import spec" P7798@spec)) P7846@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7844@t))) (P2761@syntax-dispatch P7844@t '_))) P7838@t))) (P2761@syntax-dispatch P7838@t '()))) P7816@t))) (P2761@syntax-dispatch P7816@t '(any . any)))) P7810@t))) (P2761@syntax-dispatch P7810@t '(each-any)))) P7808@x)))) P7806@f) P7798@spec))) '#f '#f '#f))) (set! P7613@import-library (lambda (P7784@spec*) (call-with-values (lambda () (P7611@parse-library-name P7784@spec*)) (lambda (P7788@P7786@name P7789@P7787@pred) ((lambda (P7792@pred P7793@name) (begin (if (null? P7793@name) (P2994@syntax-violation 'import '"empty library name" P7784@spec*) (void)) ((lambda (P7796@lib) (begin (if (not P7796@lib) (P2994@syntax-violation 'import '"cannot find library with required name" P7793@name) (void)) (if (not (P7792@pred (P1743@P1351@library-version P7796@lib))) (P2994@syntax-violation 'import '"library does not satisfy version specification" P7784@spec* P7796@lib) (void)) ((P2872@imp-collector) P7796@lib) (P1747@P1359@library-subst P7796@lib))) (P1783@P1431@find-library-by-name P7793@name)))) P7789@P7787@pred P7788@P7786@name))))) (set! P7615@get-import (lambda (P7642@spec) ((lambda (P7644@t) ((lambda (P7646@ls/false) (if (and P7646@ls/false (apply (lambda (P7648@x P7649@x*) (not (memq (P3000@syntax->datum P7648@x) '(for rename except only prefix library)))) P7646@ls/false)) (apply (lambda (P7652@x P7653@x*) (P7613@import-library (cons P7652@x P7653@x*))) P7646@ls/false) ((lambda (P7656@t) ((lambda (P7658@ls/false) (if (and P7658@ls/false (apply (lambda (P7660@rename P7661@isp P7662@old* P7663@new*) (and (eq? (P3000@syntax->datum P7660@rename) 'rename) (for-all P7597@idsyn? P7662@old*) (for-all P7597@idsyn? P7663@new*))) P7658@ls/false)) (apply (lambda (P7668@rename P7669@isp P7670@old* P7671@new*) ((lambda (P7676@subst P7677@old* P7678@new*) ((lambda (P7682@old-label*) ((lambda (P7684@subst) (P7601@merge-substs (map cons P7678@new* P7682@old-label*) P7684@subst)) (P7607@rem* P7677@old* P7676@subst))) (P7605@find* P7677@old* P7676@subst))) (P7615@get-import P7669@isp) (map P3000@syntax->datum P7670@old*) (map P3000@syntax->datum P7671@new*))) P7658@ls/false) ((lambda (P7686@t) ((lambda (P7688@ls/false) (if (and P7688@ls/false (apply (lambda (P7690@except P7691@isp P7692@sym*) (and (eq? (P3000@syntax->datum P7690@except) 'except) (for-all P7597@idsyn? P7692@sym*))) P7688@ls/false)) (apply (lambda (P7696@except P7697@isp P7698@sym*) ((lambda (P7702@subst) (P7607@rem* (map P3000@syntax->datum P7698@sym*) P7702@subst)) (P7615@get-import P7697@isp))) P7688@ls/false) ((lambda (P7704@t) ((lambda (P7706@ls/false) (if (and P7706@ls/false (apply (lambda (P7708@only P7709@isp P7710@sym*) (and (eq? (P3000@syntax->datum P7708@only) 'only) (for-all P7597@idsyn? P7710@sym*))) P7706@ls/false)) (apply (lambda (P7714@only P7715@isp P7716@sym*) ((lambda (P7720@subst P7721@sym*) ((lambda (P7724@sym*) ((lambda (P7726@lab*) (map cons P7724@sym* P7726@lab*)) (P7605@find* P7724@sym* P7720@subst))) (P7609@remove-dups P7721@sym*))) (P7615@get-import P7715@isp) (map P3000@syntax->datum P7716@sym*))) P7706@ls/false) ((lambda (P7728@t) ((lambda (P7730@ls/false) (if (and P7730@ls/false (apply (lambda (P7732@prefix P7733@isp P7734@p) (and (eq? (P3000@syntax->datum P7732@prefix) 'prefix) (P7597@idsyn? P7734@p))) P7730@ls/false)) (apply (lambda (P7738@prefix P7739@isp P7740@p) ((lambda (P7744@subst P7745@prefix) (map (lambda (P7748@x) (cons (string->symbol (string-append P7745@prefix (symbol->string (car P7748@x)))) (cdr P7748@x))) P7744@subst)) (P7615@get-import P7739@isp) (symbol->string (P3000@syntax->datum P7740@p)))) P7730@ls/false) ((lambda (P7750@t) ((lambda (P7752@ls/false) (if (and P7752@ls/false (apply (lambda (P7754@library P7755@spec*) (eq? (P3000@syntax->datum P7754@library) 'library)) P7752@ls/false)) (apply (lambda (P7758@library P7759@spec*) (P7613@import-library P7759@spec*)) P7752@ls/false) ((lambda (P7762@t) ((lambda (P7764@ls/false) (if (and P7764@ls/false (apply (lambda (P7766@for P7767@isp P7768@rest) (eq? (P3000@syntax->datum P7766@for) 'for)) P7764@ls/false)) (apply (lambda (P7772@for P7773@isp P7774@rest) (P7615@get-import P7773@isp)) P7764@ls/false) ((lambda (P7778@t) ((lambda (P7780@ls/false) (if P7780@ls/false (apply (lambda (P7782@spec) (P2994@syntax-violation 'import '"invalid import spec" P7782@spec)) P7780@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P7778@t))) (P2761@syntax-dispatch P7778@t 'any))) P7762@t))) (P2761@syntax-dispatch P7762@t '(any any . any)))) P7750@t))) (P2761@syntax-dispatch P7750@t '(any each-any)))) P7728@t))) (P2761@syntax-dispatch P7728@t '(any any any)))) P7704@t))) (P2761@syntax-dispatch P7704@t '(any any . each-any)))) P7686@t))) (P2761@syntax-dispatch P7686@t '(any any . each-any)))) P7656@t))) (P2761@syntax-dispatch P7656@t '(any any . #(each (any any)))))) P7644@t))) (P2761@syntax-dispatch P7644@t '(any . each-any)))) P7642@spec))) (set! P7617@add-imports! (lambda (P7626@imp P7627@h) ((lambda (P7630@subst) (for-each (lambda (P7632@x) ((lambda (P7634@name P7635@label) ((lambda (P7638@t) (if P7638@t ((lambda (P7640@l) (if (not (eq? P7640@l P7635@label)) (P7599@dup-error P7634@name) (void))) P7638@t) (hashtable-set! P7627@h P7634@name P7635@label))) (hashtable-ref P7627@h P7634@name '#f))) (car P7632@x) (cdr P7632@x))) P7630@subst)) (P7615@get-import P7626@imp)))) (lambda (P7618@imp*) ((letrec ((P7620@f (lambda (P7622@imp* P7623@h) (if (null? P7622@imp*) (hashtable-entries P7623@h) (begin (P7617@add-imports! (car P7622@imp*) P7623@h) (P7620@f (cdr P7622@imp*) P7623@h)))))) P7620@f) P7618@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! P2864@make-top-rib (lambda (P8110@names P8111@labels) ((lambda (P8114@rib) (begin (vector-for-each (lambda (P8116@name P8117@label) (begin (if (not (symbol? P8116@name)) (error 'make-top-rib '"BUG: not a symbol" P8116@name) (void)) (P2187@extend-rib/nc! P8114@rib (P2210@make-stx P8116@name P2132@top-mark* '() '()) P8117@label))) P8110@names P8111@labels) P8114@rib)) (P2183@make-empty-rib)))) (set! P2866@make-collector (lambda () ((lambda (P8120@ls) (lambda P8124 ((lambda (P8125) (if (= P8125 '0) (apply (lambda () P8120@ls) P8124) (if (= P8125 '1) (apply (lambda (P8122@x) (set! P8120@ls (P2125@set-cons P8122@x P8120@ls))) P8124) (error 'apply '"invalid arg count")))) (length P8124)))) '()))) (set! P2868@inv-collector (P1162@P940@make-parameter (lambda P8126@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (P8128@x) (begin (if (not (procedure? P8128@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" P8128@x) (void)) P8128@x)))) (set! P2870@vis-collector (P1162@P940@make-parameter (lambda P8130@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (P8132@x) (begin (if (not (procedure? P8132@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" P8132@x) (void)) P8132@x)))) (set! P2872@imp-collector (P1162@P940@make-parameter (lambda P8134@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (P8136@x) (begin (if (not (procedure? P8136@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" P8136@x) (void)) P8136@x)))) (set! P2874@chi-library-internal (lambda (P8138@e* P8139@rib P8140@top?) (call-with-values (lambda () (P2852@chi-body* P8138@e* '() '() '() '() '() '() '() P8139@rib P8140@top?)) (lambda (P8152@P8144@e* P8153@P8145@r P8154@P8146@mr P8155@P8147@lex* P8156@P8148@rhs* P8157@P8149@mod** P8158@P8150@_kwd* P8159@P8151@exp*) ((lambda (P8168@exp* P8169@_kwd* P8170@mod** P8171@rhs* P8172@lex* P8173@mr P8174@r P8175@e*) (values (append (apply append (reverse P8170@mod**)) P8175@e*) P8174@r P8173@mr (reverse P8172@lex*) (reverse P8171@rhs*) P8168@exp*)) P8159@P8151@exp* P8158@P8150@_kwd* P8157@P8149@mod** P8156@P8148@rhs* P8155@P8147@lex* P8154@P8146@mr P8153@P8145@r P8152@P8144@e*))))) (set! P2876@chi-interaction-expr (lambda (P8184@e P8185@rib P8186@r) (call-with-values (lambda () (P2852@chi-body* (list P8184@e) P8186@r P8186@r '() '() '() '() '() P8185@rib '#t)) (lambda (P8198@P8190@e* P8199@P8191@r P8200@P8192@mr P8201@P8193@lex* P8202@P8194@rhs* P8203@P8195@mod** P8204@P8196@_kwd* P8205@P8197@_exp*) ((lambda (P8214@_exp* P8215@_kwd* P8216@mod** P8217@rhs* P8218@lex* P8219@mr P8220@r P8221@e*) ((lambda (P8230@e*) ((lambda (P8232@e) (values P8232@e P8220@r)) (if (null? P8230@e*) (P2104@P1962@build-void) (if (null? (cdr P8230@e*)) (car P8230@e*) (P2103@P1960@build-sequence '#f P8230@e*))))) (P2809@expand-interaction-rhs*/init* (reverse P8218@lex*) (reverse P8217@rhs*) (append (apply append (reverse P8216@mod**)) P8221@e*) P8220@r P8219@mr))) P8205@P8197@_exp* P8204@P8196@_kwd* P8203@P8195@mod** P8202@P8194@rhs* P8201@P8193@lex* P8200@P8192@mr P8199@P8191@r P8198@P8190@e*))))) (set! P2878@library-body-expander (lambda (P8234@name P8235@main-exp* P8236@imp* P8237@b* P8238@top?) ((lambda (P8245@itc) (begin (set! P8245@itc (P2866@make-collector)) ((lambda (P8250@P8246@imp-collector P8251@P8247@top-level-context P8252@P8248@imp-collector P8253@P8249@top-level-context) ((lambda (P8258@swap) (dynamic-wind P8258@swap (lambda () (call-with-values (lambda () (P2862@parse-import-spec* P8236@imp*)) (lambda (P8262@P8260@subst-names P8263@P8261@subst-labels) ((lambda (P8266@subst-labels P8267@subst-names) ((lambda (P8270@rib) ((lambda (P8273@wrap) (begin (set! P8273@wrap (lambda (P8381@x) (P2210@make-stx P8381@x P2132@top-mark* (list P8270@rib) '()))) ((lambda (P8274@b* P8275@main-exp* P8276@rtc P8277@vtc) ((lambda (P8286@P8282@inv-collector P8287@P8283@vis-collector P8288@P8284@inv-collector P8289@P8285@vis-collector) ((lambda (P8294@swap) (dynamic-wind P8294@swap (lambda () (call-with-values (lambda () (P2874@chi-library-internal P8274@b* P8270@rib P8238@top?)) (lambda (P8302@P8296@init* P8303@P8297@r P8304@P8298@mr P8305@P8299@lex* P8306@P8300@rhs* P8307@P8301@internal-exp*) ((lambda (P8314@internal-exp* P8315@rhs* P8316@lex* P8317@mr P8318@r P8319@init*) (call-with-values (lambda () (P2856@parse-exports (append P8275@main-exp* P8314@internal-exp*))) (lambda (P8328@P8326@exp-name* P8329@P8327@exp-id*) ((lambda (P8332@exp-id* P8333@exp-name*) (begin (P2191@seal-rib! P8270@rib) ((lambda (P8336@init*) ((lambda (P8338@rhs*) ((lambda () (begin (P2193@unseal-rib! P8270@rib) ((lambda (P8340@loc* P8341@export-subst) ((lambda (P8345@errstr) (begin (set! P8345@errstr '"attempt to export mutated variable") (call-with-values (lambda () (P2974@make-export-env/macros P8316@lex* P8340@loc* P8318@r)) (lambda (P8349@P8346@export-env P8350@P8347@global* P8351@P8348@macro*) ((lambda (P8355@macro* P8356@global* P8357@export-env) (begin (for-each (lambda (P8361@s) ((lambda (P8363@name P8364@label) ((lambda (P8367@p) (if P8367@p ((lambda (P8369@b) ((lambda (P8371@type) (if (eq? P8371@type 'mutable) (P2994@syntax-violation 'export P8345@errstr P8363@name) (void))) (car P8369@b))) (cdr P8367@p)) (void))) (assq P8364@label P8357@export-env))) (car P8361@s) (cdr P8361@s))) P8341@export-subst) ((lambda (P8373@invoke-body P8374@invoke-definitions) (values (P8245@itc) (P8276@rtc) (P8277@vtc) (P2103@P1960@build-sequence '#f (append P8374@invoke-definitions (list P8373@invoke-body))) P8355@macro* P8341@export-subst P8357@export-env)) (P2106@P1966@build-letrec* '#f P8316@lex* P8338@rhs* (P2970@build-exports P8356@global* P8336@init*)) (map P2099@P1797@build-global-define (map cdr P8356@global*))))) P8351@P8348@macro* P8350@P8347@global* P8349@P8346@export-env))))) '#f)) (map P2138@gen-global P8316@lex*) (P2972@make-export-subst P8333@exp-name* P8332@exp-id*)))))) (P2811@chi-rhs* P8315@rhs* P8318@r P8317@mr))) (P2791@chi-expr* P8319@init* P8318@r P8317@mr)))) P8329@P8327@exp-id* P8328@P8326@exp-name*)))) P8307@P8301@internal-exp* P8306@P8300@rhs* P8305@P8299@lex* P8304@P8298@mr P8303@P8297@r P8302@P8296@init*)))) P8294@swap)) (lambda () (begin ((lambda (P8377@t) (begin (P8286@P8282@inv-collector P8288@P8284@inv-collector) (set! P8288@P8284@inv-collector P8377@t))) (P8286@P8282@inv-collector)) ((lambda (P8379@t) (begin (P8287@P8283@vis-collector P8289@P8285@vis-collector) (set! P8289@P8285@vis-collector P8379@t))) (P8287@P8283@vis-collector)))))) P2868@inv-collector P2870@vis-collector P8276@rtc P8277@vtc)) (map P8273@wrap P8237@b*) (map P8273@wrap P8235@main-exp*) (P2866@make-collector) (P2866@make-collector)))) '#f)) (P2864@make-top-rib P8267@subst-names P8266@subst-labels))) P8263@P8261@subst-labels P8262@P8260@subst-names)))) P8258@swap)) (lambda () (begin ((lambda (P8383@t) (begin (P8250@P8246@imp-collector P8252@P8248@imp-collector) (set! P8252@P8248@imp-collector P8383@t))) (P8250@P8246@imp-collector)) ((lambda (P8385@t) (begin (P8251@P8247@top-level-context P8253@P8249@top-level-context) (set! P8253@P8249@top-level-context P8385@t))) (P8251@P8247@top-level-context)))))) P2872@imp-collector P3008@top-level-context P8245@itc '#f))) '#f))) (set! P2880@core-library-expander (lambda (P8387@e P8388@verify-name) (call-with-values (lambda () (P2860@parse-library P8387@e)) (lambda (P8395@P8391@name* P8396@P8392@exp* P8397@P8393@imp* P8398@P8394@b*) ((lambda (P8403@b* P8404@imp* P8405@exp* P8406@name*) (call-with-values (lambda () (P2858@parse-library-name P8406@name*)) (lambda (P8413@P8411@name P8414@P8412@ver) ((lambda (P8417@ver P8418@name) (begin (P8388@verify-name P8418@name) (call-with-values (lambda () (P2878@library-body-expander P8418@name P8405@exp* P8404@imp* P8403@b* '#f)) (lambda (P8428@P8421@imp* P8429@P8422@invoke-req* P8430@P8423@visit-req* P8431@P8424@invoke-code P8432@P8425@visit-code P8433@P8426@export-subst P8434@P8427@export-env) ((lambda (P8442@export-env P8443@export-subst P8444@visit-code P8445@invoke-code P8446@visit-req* P8447@invoke-req* P8448@imp*) (values P8418@name P8417@ver P8448@imp* P8447@invoke-req* P8446@visit-req* P8445@invoke-code P8444@visit-code P8443@export-subst P8442@export-env)) P8434@P8427@export-env P8433@P8426@export-subst P8432@P8425@visit-code P8431@P8424@invoke-code P8430@P8423@visit-req* P8429@P8422@invoke-req* P8428@P8421@imp*))))) P8414@P8412@ver P8413@P8411@name)))) P8398@P8394@b* P8397@P8393@imp* P8396@P8392@exp* P8395@P8391@name*))))) (set! P2882@parse-top-level-program (lambda (P8456@e*) ((lambda (P8458@t) ((lambda (P8460@ls/false) (if (and P8460@ls/false (apply (lambda (P8462@import P8463@imp* P8464@b*) (eq? (P3000@syntax->datum P8462@import) 'import)) P8460@ls/false)) (apply (lambda (P8468@import P8469@imp* P8470@b*) (values P8469@imp* P8470@b*)) P8460@ls/false) ((lambda (P8474@t) ((lambda (P8476@ls/false) (if (and P8476@ls/false (apply (lambda (P8478@import P8479@x P8480@y) (eq? (P3000@syntax->datum P8478@import) 'import)) P8476@ls/false)) (apply (lambda (P8484@import P8485@x P8486@y) (P2994@syntax-violation 'expander '"invalid syntax of top-level program" (P2258@syntax-car P8456@e*))) P8476@ls/false) ((lambda (P8490@t) ((lambda (P8492@ls/false) (if P8492@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) P8492@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P8490@t))) (P2761@syntax-dispatch P8490@t '_))) P8474@t))) (P2761@syntax-dispatch P8474@t '((any . any) . any)))) P8458@t))) (P2761@syntax-dispatch P8458@t '((any . each-any) . each-any)))) P8456@e*))) (set! P2884@top-level-expander (lambda (P8494@e*) (call-with-values (lambda () (P2882@parse-top-level-program P8494@e*)) (lambda (P8498@P8496@imp* P8499@P8497@b*) ((lambda (P8502@b* P8503@imp*) (call-with-values (lambda () (P2878@library-body-expander '() '() P8503@imp* P8502@b* '#t)) (lambda (P8513@P8506@imp* P8514@P8507@invoke-req* P8515@P8508@visit-req* P8516@P8509@invoke-code P8517@P8510@visit-code P8518@P8511@export-subst P8519@P8512@export-env) ((lambda (P8527@export-env P8528@export-subst P8529@visit-code P8530@invoke-code P8531@visit-req* P8532@invoke-req* P8533@imp*) (values P8532@invoke-req* P8530@invoke-code)) P8519@P8512@export-env P8518@P8511@export-subst P8517@P8510@visit-code P8516@P8509@invoke-code P8515@P8508@visit-req* P8514@P8507@invoke-req* P8513@P8506@imp*)))) P8499@P8497@b* P8498@P8496@imp*))))) (set! P2890@P2885 (make-record-type-descriptor 'env '#f 'P2888 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! P2892@P2887 '#f) (set! P2894@P2886 (make-record-constructor-descriptor P2890@P2885 '#f P2892@P2887)) (set! P2897@env? (record-predicate P2890@P2885)) (set! P2899@make-env (record-constructor P2894@P2886)) (set! P2901@env-names (record-accessor P2890@P2885 '0)) (set! P2903@env-labels (record-accessor P2890@P2885 '1)) (set! P2905@env-itc (record-accessor P2890@P2885 '2)) (set! P2907@set-env-names! (record-mutator P2890@P2885 '0)) (set! P2909@set-env-labels! (record-mutator P2890@P2885 '1)) (set! P2911@set-env-itc! (record-mutator P2890@P2885 '2)) (set! P2913@rp (P1159@P934@make-record-printer 'env (lambda (P8541@x P8542@p P8543@wr) (display '"#<environment>" P8542@p)))) (set! P2919@P2914 (make-record-type-descriptor 'interaction-env '#f 'P2917 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! P2921@P2916 '#f) (set! P2923@P2915 (make-record-constructor-descriptor P2919@P2914 '#f P2921@P2916)) (set! P2926@interaction-env? (record-predicate P2919@P2914)) (set! P2928@make-interaction-env (record-constructor P2923@P2915)) (set! P2930@interaction-env-rib (record-accessor P2919@P2914 '0)) (set! P2932@interaction-env-r (record-accessor P2919@P2914 '1)) (set! P2934@interaction-env-locs (record-accessor P2919@P2914 '2)) (set! P2936@set-interaction-env-rib! (record-mutator P2919@P2914 '0)) (set! P2938@set-interaction-env-r! (record-mutator P2919@P2914 '1)) (set! P2940@set-interaction-env-locs! (record-mutator P2919@P2914 '2)) (set! P2942@rp (P1159@P934@make-record-printer 'interaction-env (lambda (P8547@x P8548@p P8549@wr) (display '"#<environment>" P8548@p)))) (set! P2944@interaction-environment-symbols (lambda () (P2952@environment-symbols (P3006@interaction-environment)))) (set! P2946@environment-bindings (lambda (P8553@e) (vector->list (vector-map (lambda (P8555@name P8556@label) (P2948@parse-binding (cons P8555@name (P1789@P1443@imported-label->binding P8556@label)))) (P2901@env-names P8553@e) (P2903@env-labels P8553@e))))) (set! P2948@parse-binding (lambda (P8559@b) (cons (car P8559@b) ((lambda (P8561@t) (if (memv P8561@t '(core-prim global)) 'procedure (if (memv P8561@t '(core-macro macro global-macro)) 'syntax (if (memv P8561@t '($core-rtd)) 'record (if (eq? (car P8559@b) (cadr P8559@b)) 'syntax 'unknown))))) (cadr P8559@b))))) (set! P2950@environment? (lambda (P8563@x) (or (P2897@env? P8563@x) (P2926@interaction-env? P8563@x)))) (set! P2952@environment-symbols (lambda (P8565@x) (if (P2897@env? P8565@x) (vector->list (P2901@env-names P8565@x)) (if (P2926@interaction-env? P8565@x) (map values (P2163@rib-sym* (P2930@interaction-env-rib P8565@x))) (assertion-violation 'environment-symbols '"not an environment" P8565@x))))) (set! P2954@environment (lambda P8567@imp* ((lambda (P8569@itc) ((lambda (P8573@P8571@imp-collector P8574@P8572@imp-collector) ((lambda (P8577@swap) (dynamic-wind P8577@swap (lambda () (call-with-values (lambda () (P2862@parse-import-spec* P8567@imp*)) (lambda (P8581@P8579@subst-names P8582@P8580@subst-labels) ((lambda (P8585@subst-labels P8586@subst-names) (P2899@make-env P8586@subst-names P8585@subst-labels P8569@itc)) P8582@P8580@subst-labels P8581@P8579@subst-names)))) P8577@swap)) (lambda () ((lambda (P8589@t) (begin (P8573@P8571@imp-collector P8574@P8572@imp-collector) (set! P8574@P8572@imp-collector P8589@t))) (P8573@P8571@imp-collector))))) P2872@imp-collector P8569@itc)) (P2866@make-collector)))) (set! P2956@null-environment (lambda (P8591@n) (begin (if (not (eqv? P8591@n '5)) (assertion-violation 'null-environment '"not 5" P8591@n) (void)) (P2954@environment '(psyntax null-environment-5))))) (set! P2958@scheme-report-environment (lambda (P8593@n) (begin (if (not (eqv? P8593@n '5)) (assertion-violation 'scheme-report-environment '"not 5" P8593@n) (void)) (P2954@environment '(psyntax scheme-report-environment-5))))) (set! P2960@expand (lambda (P8595@x P8596@env) (if (P2897@env? P8596@env) ((lambda (P8599@rib) ((lambda (P8601@x P8602@itc P8603@rtc P8604@vtc) ((lambda (P8609@x) (begin (P2191@seal-rib! P8599@rib) (values P8609@x (P8603@rtc)))) ((lambda (P8619@P8611@top-level-context P8620@P8612@inv-collector P8621@P8613@vis-collector P8622@P8614@imp-collector P8623@P8615@top-level-context P8624@P8616@inv-collector P8625@P8617@vis-collector P8626@P8618@imp-collector) ((lambda (P8635@swap) (dynamic-wind P8635@swap (lambda () (P2795@chi-expr P8601@x '() '())) P8635@swap)) (lambda () (begin ((lambda (P8637@t) (begin (P8619@P8611@top-level-context P8623@P8615@top-level-context) (set! P8623@P8615@top-level-context P8637@t))) (P8619@P8611@top-level-context)) ((lambda (P8639@t) (begin (P8620@P8612@inv-collector P8624@P8616@inv-collector) (set! P8624@P8616@inv-collector P8639@t))) (P8620@P8612@inv-collector)) ((lambda (P8641@t) (begin (P8621@P8613@vis-collector P8625@P8617@vis-collector) (set! P8625@P8617@vis-collector P8641@t))) (P8621@P8613@vis-collector)) ((lambda (P8643@t) (begin (P8622@P8614@imp-collector P8626@P8618@imp-collector) (set! P8626@P8618@imp-collector P8643@t))) (P8622@P8614@imp-collector)))))) P3008@top-level-context P2868@inv-collector P2870@vis-collector P2872@imp-collector '#f P8603@rtc P8604@vtc P8602@itc))) (P2210@make-stx P8595@x P2132@top-mark* (list P8599@rib) '()) (P2905@env-itc P8596@env) (P2866@make-collector) (P2866@make-collector))) (P2864@make-top-rib (P2901@env-names P8596@env) (P2903@env-labels P8596@env))) (if (P2926@interaction-env? P8596@env) ((lambda (P8645@rib P8646@r P8647@rtc) ((lambda (P8651@x) (call-with-values (lambda () ((lambda (P8663@P8655@top-level-context P8664@P8656@inv-collector P8665@P8657@vis-collector P8666@P8658@imp-collector P8667@P8659@top-level-context P8668@P8660@inv-collector P8669@P8661@vis-collector P8670@P8662@imp-collector) ((lambda (P8679@swap) (dynamic-wind P8679@swap (lambda () (P2876@chi-interaction-expr P8651@x P8645@rib P8646@r)) P8679@swap)) (lambda () (begin ((lambda (P8681@t) (begin (P8663@P8655@top-level-context P8667@P8659@top-level-context) (set! P8667@P8659@top-level-context P8681@t))) (P8663@P8655@top-level-context)) ((lambda (P8683@t) (begin (P8664@P8656@inv-collector P8668@P8660@inv-collector) (set! P8668@P8660@inv-collector P8683@t))) (P8664@P8656@inv-collector)) ((lambda (P8685@t) (begin (P8665@P8657@vis-collector P8669@P8661@vis-collector) (set! P8669@P8661@vis-collector P8685@t))) (P8665@P8657@vis-collector)) ((lambda (P8687@t) (begin (P8666@P8658@imp-collector P8670@P8662@imp-collector) (set! P8670@P8662@imp-collector P8687@t))) (P8666@P8658@imp-collector)))))) P3008@top-level-context P2868@inv-collector P2870@vis-collector P2872@imp-collector P8596@env P8647@rtc (P2866@make-collector) (P2866@make-collector))) (lambda (P8689@P8653@e P8690@P8654@r^) ((lambda (P8693@r^ P8694@e) (begin (P2938@set-interaction-env-r! P8596@env P8693@r^) (values P8694@e (P8647@rtc)))) P8690@P8654@r^ P8689@P8653@e)))) (P2210@make-stx P8595@x P2132@top-mark* (list P8645@rib) '()))) (P2930@interaction-env-rib P8596@env) (P2932@interaction-env-r P8596@env) (P2866@make-collector)) (assertion-violation 'expand '"not an environment" P8596@env))))) (set! P2962@eval (lambda (P8697@x P8698@env) (begin (if (not (P2950@environment? P8698@env)) (error 'eval '"not an environment" P8698@env) (void)) (call-with-values (lambda () (P2960@expand P8697@x P8698@env)) (lambda (P8703@P8701@x P8704@P8702@invoke-req*) ((lambda (P8707@invoke-req* P8708@x) (begin (for-each P1790@P1445@invoke-library P8707@invoke-req*) (eval-core (P1246@P1174@expanded->core P8708@x)))) P8704@P8702@invoke-req* P8703@P8701@x)))))) (set! P2964@library-expander (lambda P8812 ((lambda (P8813) (if (= P8813 '3) (apply (lambda (P8711@x P8712@filename P8713@verify-name) ((lambda (P8718@build-visit-code P8720@visit!) (begin (set! P8718@build-visit-code (lambda (P8794@macro*) (if (null? P8794@macro*) (P2104@P1962@build-void) (P2103@P1960@build-sequence '#f (map (lambda (P8796@x) ((lambda (P8798@loc P8799@src) (list 'set! P8798@loc P8799@src)) (car P8796@x) (cddr P8796@x))) P8794@macro*))))) (set! P8720@visit! (lambda (P8786@macro*) (for-each (lambda (P8788@x) ((lambda (P8790@loc P8791@proc) (set-symbol-value! P8790@loc P8791@proc)) (car P8788@x) (cadr P8788@x))) P8786@macro*))) (call-with-values (lambda () (P2880@core-library-expander P8711@x P8713@verify-name)) (lambda (P8730@P8721@name P8731@P8722@ver P8732@P8723@imp* P8733@P8724@inv* P8734@P8725@vis* P8735@P8726@invoke-code P8736@P8727@macro* P8737@P8728@export-subst P8738@P8729@export-env) ((lambda (P8748@export-env P8749@export-subst P8750@macro* P8751@invoke-code P8752@vis* P8753@inv* P8754@imp* P8755@ver P8756@name) ((lambda (P8766@id P8767@name P8768@ver P8769@imp* P8770@vis* P8771@inv* P8772@visit-proc P8773@invoke-proc P8774@visit-code P8775@invoke-code) (begin (P1788@P1441@install-library P8766@id P8767@name P8768@ver P8769@imp* P8770@vis* P8771@inv* P8749@export-subst P8748@export-env P8772@visit-proc P8773@invoke-proc P8774@visit-code P8775@invoke-code '#t P8712@filename) (values P8766@id P8767@name P8768@ver P8769@imp* P8770@vis* P8771@inv* P8775@invoke-code P8774@visit-code P8749@export-subst P8748@export-env))) (P1148@P912@gensym) P8756@name P8755@ver (map P1794@P1453@library-spec P8754@imp*) (map P1794@P1453@library-spec P8752@vis*) (map P1794@P1453@library-spec P8753@inv*) (lambda () (P8720@visit! P8750@macro*)) (lambda () (eval-core (P1246@P1174@expanded->core P8751@invoke-code))) (P8718@build-visit-code P8750@macro*) P8751@invoke-code)) P8738@P8729@export-env P8737@P8728@export-subst P8736@P8727@macro* P8735@P8726@invoke-code P8734@P8725@vis* P8733@P8724@inv* P8732@P8723@imp* P8731@P8722@ver P8730@P8721@name))))) '#f '#f)) P8812) (if (= P8813 '2) (apply (lambda (P8802@x P8803@filename) (P2964@library-expander P8802@x P8803@filename (lambda (P8806@x) (values)))) P8812) (if (= P8813 '1) (apply (lambda (P8808@x) (P2964@library-expander P8808@x '#f (lambda (P8810@x) (values)))) P8812) (error 'apply '"invalid arg count"))))) (length P8812)))) (set! P2966@boot-library-expand (lambda (P8814@x) (call-with-values (lambda () (P2964@library-expander P8814@x)) (lambda (P8826@P8816@id P8827@P8817@name P8828@P8818@ver P8829@P8819@imp* P8830@P8820@vis* P8831@P8821@inv* P8832@P8822@invoke-code P8833@P8823@visit-code P8834@P8824@export-subst P8835@P8825@export-env) ((lambda (P8846@export-env P8847@export-subst P8848@visit-code P8849@invoke-code P8850@inv* P8851@vis* P8852@imp* P8853@ver P8854@name P8855@id) (values P8854@name P8849@invoke-code P8847@export-subst P8846@export-env)) P8835@P8825@export-env P8834@P8824@export-subst P8833@P8823@visit-code P8832@P8822@invoke-code P8831@P8821@inv* P8830@P8820@vis* P8829@P8819@imp* P8828@P8818@ver P8827@P8817@name P8826@P8816@id))))) (set! P2968@rev-map-append (lambda (P8866@f P8867@ls P8868@ac) (if (null? P8867@ls) P8868@ac (P2968@rev-map-append P8866@f (cdr P8867@ls) (cons (P8866@f (car P8867@ls)) P8868@ac))))) (set! P2970@build-exports (lambda (P8872@lex*+loc* P8873@init*) (P2103@P1960@build-sequence '#f (cons (P2104@P1962@build-void) (P2968@rev-map-append (lambda (P8876@x) (list 'set! (cdr P8876@x) (car P8876@x))) P8872@lex*+loc* P8873@init*))))) (set! P2972@make-export-subst (lambda (P8878@name* P8879@id*) (map (lambda (P8882@name P8883@id) ((lambda (P8886@label) (begin (if (not P8886@label) (P2994@syntax-violation '#f '"cannot export unbound identifier" P8883@id) (void)) (cons P8882@name P8886@label))) (P2290@id->label P8883@id))) P8878@name* P8879@id*))) (set! P2974@make-export-env/macros (lambda (P8888@lex* P8889@loc* P8890@r) ((lambda (P8895@lookup) (begin (set! P8895@lookup (lambda (P8924@x) ((letrec ((P8926@f (lambda (P8928@x P8929@lex* P8930@loc*) (if (pair? P8929@lex*) (if (eq? P8928@x (car P8929@lex*)) (car P8930@loc*) (P8926@f P8928@x (cdr P8929@lex*) (cdr P8930@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) P8926@f) P8924@x P8888@lex* P8889@loc*))) ((letrec ((P8896@f (lambda (P8898@r P8899@env P8900@global* P8901@macro*) (if (null? P8898@r) (values P8899@env P8900@global* P8901@macro*) ((lambda (P8906@x) ((lambda (P8908@label P8909@b) ((lambda (P8912@t) (if (memv P8912@t '(lexical)) ((lambda (P8914@v) ((lambda (P8916@loc P8917@type) (P8896@f (cdr P8898@r) (cons (cons* P8908@label P8917@type P8916@loc) P8899@env) (cons (cons (P2645@lexical-var P8914@v) P8916@loc) P8900@global*) P8901@macro*)) (P8895@lookup (P2645@lexical-var P8914@v)) (if (P2647@lexical-mutable? P8914@v) 'mutable 'global))) (P2300@binding-value P8909@b)) (if (memv P8912@t '(local-macro)) ((lambda (P8920@loc) (P8896@f (cdr P8898@r) (cons (cons* P8908@label 'global-macro P8920@loc) P8899@env) P8900@global* (cons (cons P8920@loc (P2300@binding-value P8909@b)) P8901@macro*))) (P1148@P912@gensym)) (if (memv P8912@t '(local-macro!)) ((lambda (P8922@loc) (P8896@f (cdr P8898@r) (cons (cons* P8908@label 'global-macro! P8922@loc) P8899@env) P8900@global* (cons (cons P8922@loc (P2300@binding-value P8909@b)) P8901@macro*))) (P1148@P912@gensym)) (if (memv P8912@t '($rtd $module)) (P8896@f (cdr P8898@r) (cons P8906@x P8899@env) P8900@global* P8901@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (P2298@binding-type P8909@b) (P2300@binding-value P8909@b))))))) (P2298@binding-type P8909@b))) (car P8906@x) (cdr P8906@x))) (car P8898@r)))))) P8896@f) P8890@r '() '() '()))) '#f))) (set! P2976@generate-temporaries (lambda (P8934@ls) ((lambda (P8936@t) ((lambda (P8938@ls/false) (if P8938@ls/false (apply (lambda (P8940@ls) (map (lambda (P8942@x) (P2210@make-stx ((lambda (P8944@x) (if (or (symbol? P8944@x) (string? P8944@x)) (P1148@P912@gensym P8944@x) (P1148@P912@gensym 't))) (P3000@syntax->datum P8942@x)) P2132@top-mark* '() '())) P8940@ls)) P8938@ls/false) ((lambda (P8946@t) ((lambda (P8948@ls/false) (if P8948@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) P8948@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P8946@t))) (P2761@syntax-dispatch P8946@t '_))) P8936@t))) (P2761@syntax-dispatch P8936@t 'each-any))) P8934@ls))) (set! P2978@free-identifier=? (lambda (P8950@x P8951@y) (if (P2264@id? P8950@x) (if (P2264@id? P8951@y) (P2272@free-id=? P8950@x P8951@y) (assertion-violation 'free-identifier=? '"not an identifier" P8951@y)) (assertion-violation 'free-identifier=? '"not an identifier" P8950@x)))) (set! P2980@bound-identifier=? (lambda (P8954@x P8955@y) (if (P2264@id? P8954@x) (if (P2264@id? P8955@y) (P2270@bound-id=? P8954@x P8955@y) (assertion-violation 'bound-identifier=? '"not an identifier" P8955@y)) (assertion-violation 'bound-identifier=? '"not an identifier" P8954@x)))) (set! P2982@make-source-condition (lambda (P8958@x) ((lambda (P8968@P8963 P8970@P8965 P8972@P8964 P8975@P8962 P8977@make-source-condition P8979@P8960 P8981@P8961 P8983@source-condition? P8985@source-filename P8987@source-character) (begin (set! P8968@P8963 (make-record-type-descriptor '&source-information P10070@P9385@&condition-rtd 'P8966 '#f '#f '#((immutable file-name) (immutable character)))) (set! P8970@P8965 '#f) (set! P8972@P8964 (make-record-constructor-descriptor P8968@P8963 P10071@P9387@&condition-rcd P8970@P8965)) (set! P8975@P8962 (record-predicate P8968@P8963)) (set! P8977@make-source-condition (record-constructor P8972@P8964)) (set! P8979@P8960 (record-accessor P8968@P8963 '0)) (set! P8981@P8961 (record-accessor P8968@P8963 '1)) (set! P8983@source-condition? (condition-predicate P8968@P8963)) (set! P8985@source-filename (condition-accessor P8968@P8963 P8979@P8960)) (set! P8987@source-character (condition-accessor P8968@P8963 P8981@P8961)) (if (pair? P8958@x) (P8977@make-source-condition (car P8958@x) (cdr P8958@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! P2984@extract-position-condition (lambda (P8988@x) (P2982@make-source-condition (P2986@expression-position P8988@x)))) (set! P2986@expression-position (lambda (P8990@x) (and (P2208@stx? P8990@x) ((lambda (P8992@x) (and (P1151@P918@annotation? P8992@x) (P1152@P920@annotation-source P8992@x))) (P2212@stx-expr P8990@x))))) (set! P2988@assertion-error (lambda (P8994@expr P8995@pos) (raise (condition (P10118@P9577@make-assertion-violation) (P10136@P9625@make-who-condition 'assert) (P10076@P9468@make-message-condition '"assertion failed") (P10126@P9599@make-irritants-condition (list P8994@expr)) (P2982@make-source-condition P8995@pos))))) (set! P2990@syntax-error (lambda (P8998@x . P9000@args) (begin (if (not (for-all string? P9000@args)) (assertion-violation 'syntax-error '"invalid argument" P9000@args) (void)) (raise (condition (P10076@P9468@make-message-condition (if (null? P9000@args) '"invalid syntax" (apply string-append P9000@args))) (P10170@P9715@make-syntax-violation (P3000@syntax->datum P8998@x) '#f) (P2984@extract-position-condition P8998@x)))))) (set! P2992@syntax-violation* (lambda (P9002@who P9003@msg P9004@form P9005@condition-object) (begin (if (not (string? P9003@msg)) (assertion-violation 'syntax-violation '"message is not a string" P9003@msg) (void)) ((lambda (P9010@who) (raise (condition (if P9010@who (P10136@P9625@make-who-condition P9010@who) (condition)) (P10076@P9468@make-message-condition P9003@msg) P9005@condition-object (P2984@extract-position-condition P9004@form)))) (if (or (string? P9002@who) (symbol? P9002@who)) P9002@who (if (not P9002@who) ((lambda (P9012@t) ((lambda (P9014@ls/false) (if (and P9014@ls/false (apply (lambda (P9016@id) (P2264@id? P9016@id)) P9014@ls/false)) (apply (lambda (P9018@id) (P3000@syntax->datum P9018@id)) P9014@ls/false) ((lambda (P9020@t) ((lambda (P9022@ls/false) (if (and P9022@ls/false (apply (lambda (P9024@id P9025@rest) (P2264@id? P9024@id)) P9022@ls/false)) (apply (lambda (P9028@id P9029@rest) (P3000@syntax->datum P9028@id)) P9022@ls/false) ((lambda (P9032@t) ((lambda (P9034@ls/false) (if P9034@ls/false (apply (lambda () '#f) P9034@ls/false) (P2994@syntax-violation '#f '"invalid syntax" P9032@t))) (P2761@syntax-dispatch P9032@t '_))) P9020@t))) (P2761@syntax-dispatch P9020@t '(any . any)))) P9012@t))) (P2761@syntax-dispatch P9012@t 'any))) P9004@form) (assertion-violation 'syntax-violation '"invalid who argument" P9002@who))))))) (set! P2994@syntax-violation (lambda P9050 ((lambda (P9051) (if (= P9051 '3) (apply (lambda (P9036@who P9037@msg P9038@form) (P2994@syntax-violation P9036@who P9037@msg P9038@form '#f)) P9050) (if (= P9051 '4) (apply (lambda (P9042@who P9043@msg P9044@form P9045@subform) (P2992@syntax-violation* P9042@who P9043@msg P9044@form (P10170@P9715@make-syntax-violation (P3000@syntax->datum P9044@form) (P3000@syntax->datum P9045@subform)))) P9050) (error 'apply '"invalid arg count")))) (length P9050)))) (set! P2996@identifier? (lambda (P9052@x) (P2264@id? P9052@x))) (set! P2998@datum->syntax (lambda (P9054@id P9055@datum) (if (P2264@id? P9054@id) (P2230@datum->stx P9054@id P9055@datum) (assertion-violation 'datum->syntax '"not an identifier" P9054@id)))) (set! P3000@syntax->datum (lambda (P9058@x) (P2286@stx->datum P9058@x))) (set! P3002@compile-r6rs-top-level (lambda (P9060@x*) (call-with-values (lambda () (P2884@top-level-expander P9060@x*)) (lambda (P9064@P9062@lib* P9065@P9063@invoke-code) ((lambda (P9068@invoke-code P9069@lib*) (lambda () (begin (for-each P1790@P1445@invoke-library P9069@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (P1246@P1174@expanded->core P9068@invoke-code)) (void)) (eval-core (P1246@P1174@expanded->core P9068@invoke-code))))) P9065@P9063@invoke-code P9064@P9062@lib*))))) (set! P3004@pre-compile-r6rs-top-level (lambda (P9072@x*) (call-with-values (lambda () (P2884@top-level-expander P9072@x*)) (lambda (P9076@P9074@lib* P9077@P9075@invoke-code) ((lambda (P9080@invoke-code P9081@lib*) (begin (for-each P1790@P1445@invoke-library P9081@lib*) (P1160@P936@compile-core (P1246@P1174@expanded->core P9080@invoke-code)))) P9077@P9075@invoke-code P9076@P9074@lib*))))) (set! P3006@interaction-environment ((lambda (P9084@the-env) (lambda () (or P9084@the-env ((lambda (P9086@lib P9087@rib) (begin ((lambda (P9090@subst) (begin (P2173@set-rib-sym*! P9087@rib (map car P9090@subst)) (P2175@set-rib-mark**! P9087@rib (map (lambda (P9092@x) P2132@top-mark*) P9090@subst)) (P2177@set-rib-label*! P9087@rib (map cdr P9090@subst)))) (P1747@P1359@library-subst P9086@lib)) ((lambda (P9094@env) (begin (set! P9084@the-env P9094@env) P9094@env)) (P2928@make-interaction-env P9087@rib '() '())))) (P1783@P1431@find-library-by-name '(mosh interaction)) (P2183@make-empty-rib))))) '#f)) (set! P3008@top-level-context (P1162@P940@make-parameter '#f)) (begin (set! P9364@P3008@top-level-context P3008@top-level-context) (set! P9363@P3006@interaction-environment P3006@interaction-environment) (set! P9362@P3004@pre-compile-r6rs-top-level P3004@pre-compile-r6rs-top-level) (set! P9361@P3002@compile-r6rs-top-level P3002@compile-r6rs-top-level) (set! P9360@P3000@syntax->datum P3000@syntax->datum) (set! P9359@P2998@datum->syntax P2998@datum->syntax) (set! P9358@P2996@identifier? P2996@identifier?) (set! P9357@P2994@syntax-violation P2994@syntax-violation) (set! P9356@P2992@syntax-violation* P2992@syntax-violation*) (set! P9355@P2990@syntax-error P2990@syntax-error) (set! P9354@P2988@assertion-error P2988@assertion-error) (set! P9353@P2986@expression-position P2986@expression-position) (set! P9352@P2984@extract-position-condition P2984@extract-position-condition) (set! P9351@P2982@make-source-condition P2982@make-source-condition) (set! P9350@P2980@bound-identifier=? P2980@bound-identifier=?) (set! P9349@P2978@free-identifier=? P2978@free-identifier=?) (set! P9348@P2976@generate-temporaries P2976@generate-temporaries) (set! P9347@P2974@make-export-env/macros P2974@make-export-env/macros) (set! P9346@P2972@make-export-subst P2972@make-export-subst) (set! P9345@P2970@build-exports P2970@build-exports) (set! P9344@P2968@rev-map-append P2968@rev-map-append) (set! P9343@P2966@boot-library-expand P2966@boot-library-expand) (set! P9342@P2964@library-expander P2964@library-expander) (set! P9341@P2962@eval P2962@eval) (set! P9340@P2960@expand P2960@expand) (set! P9339@P2958@scheme-report-environment P2958@scheme-report-environment) (set! P9338@P2956@null-environment P2956@null-environment) (set! P9337@P2954@environment P2954@environment) (set! P9336@P2952@environment-symbols P2952@environment-symbols) (set! P9335@P2950@environment? P2950@environment?) (set! P9334@P2948@parse-binding P2948@parse-binding) (set! P9333@P2946@environment-bindings P2946@environment-bindings) (set! P9332@P2944@interaction-environment-symbols P2944@interaction-environment-symbols) (set! P9331@P2942@rp P2942@rp) (set! P9330@P2940@set-interaction-env-locs! P2940@set-interaction-env-locs!) (set! P9329@P2938@set-interaction-env-r! P2938@set-interaction-env-r!) (set! P9328@P2936@set-interaction-env-rib! P2936@set-interaction-env-rib!) (set! P9327@P2934@interaction-env-locs P2934@interaction-env-locs) (set! P9326@P2932@interaction-env-r P2932@interaction-env-r) (set! P9325@P2930@interaction-env-rib P2930@interaction-env-rib) (set! P9324@P2928@make-interaction-env P2928@make-interaction-env) (set! P9323@P2926@interaction-env? P2926@interaction-env?) (set! P9322@P2923@P2915 P2923@P2915) (set! P9321@P2921@P2916 P2921@P2916) (set! P9320@P2919@P2914 P2919@P2914) (set! P9319@P2913@rp P2913@rp) (set! P9318@P2911@set-env-itc! P2911@set-env-itc!) (set! P9317@P2909@set-env-labels! P2909@set-env-labels!) (set! P9316@P2907@set-env-names! P2907@set-env-names!) (set! P9315@P2905@env-itc P2905@env-itc) (set! P9314@P2903@env-labels P2903@env-labels) (set! P9313@P2901@env-names P2901@env-names) (set! P9312@P2899@make-env P2899@make-env) (set! P9311@P2897@env? P2897@env?) (set! P9310@P2894@P2886 P2894@P2886) (set! P9309@P2892@P2887 P2892@P2887) (set! P9308@P2890@P2885 P2890@P2885) (set! P9307@P2884@top-level-expander P2884@top-level-expander) (set! P9306@P2882@parse-top-level-program P2882@parse-top-level-program) (set! P9305@P2880@core-library-expander P2880@core-library-expander) (set! P9304@P2878@library-body-expander P2878@library-body-expander) (set! P9303@P2876@chi-interaction-expr P2876@chi-interaction-expr) (set! P9302@P2874@chi-library-internal P2874@chi-library-internal) (set! P9301@P2872@imp-collector P2872@imp-collector) (set! P9300@P2870@vis-collector P2870@vis-collector) (set! P9299@P2868@inv-collector P2868@inv-collector) (set! P9298@P2866@make-collector P2866@make-collector) (set! P9297@P2864@make-top-rib P2864@make-top-rib) (set! P9296@P2862@parse-import-spec* P2862@parse-import-spec*) (set! P9295@P2860@parse-library P2860@parse-library) (set! P9294@P2858@parse-library-name P2858@parse-library-name) (set! P9293@P2856@parse-exports P2856@parse-exports) (set! P9292@P2854@expand-transformer P2854@expand-transformer) (set! P9291@P2852@chi-body* P2852@chi-body*) (set! P9290@P2850@chi-internal-module P2850@chi-internal-module) (set! P9289@P2848@module-interface-exp-id* P2848@module-interface-exp-id*) (set! P9288@P2846@set-module-interface-exp-lab-vec! P2846@set-module-interface-exp-lab-vec!) (set! P9287@P2844@set-module-interface-exp-id-vec! P2844@set-module-interface-exp-id-vec!) (set! P9286@P2842@set-module-interface-first-mark! P2842@set-module-interface-first-mark!) (set! P9285@P2840@module-interface-exp-lab-vec P2840@module-interface-exp-lab-vec) (set! P9284@P2838@module-interface-exp-id-vec P2838@module-interface-exp-id-vec) (set! P9283@P2836@module-interface-first-mark P2836@module-interface-first-mark) (set! P9282@P2834@make-module-interface P2834@make-module-interface) (set! P9281@P2832@module-interface? P2832@module-interface?) (set! P9280@P2829@P2821 P2829@P2821) (set! P9279@P2827@P2822 P2827@P2822) (set! P9278@P2825@P2820 P2825@P2820) (set! P9277@P2819@parse-module P2819@parse-module) (set! P9276@P2817@chi-internal P2817@chi-internal) (set! P9275@P2815@find-dups P2815@find-dups) (set! P9274@P2813@find-bound=? P2813@find-bound=?) (set! P9273@P2811@chi-rhs* P2811@chi-rhs*) (set! P9272@P2809@expand-interaction-rhs*/init* P2809@expand-interaction-rhs*/init*) (set! P9271@P2807@chi-rhs P2807@chi-rhs) (set! P9270@P2805@chi-defun P2805@chi-defun) (set! P9269@P2803@chi-lambda-clause* P2803@chi-lambda-clause*) (set! P9268@P2801@chi-lambda-clause P2801@chi-lambda-clause) (set! P9267@P2799@verify-formals P2799@verify-formals) (set! P9266@P2797@chi-set! P2797@chi-set!) (set! P9265@P2795@chi-expr P2795@chi-expr) (set! P9264@P2793@chi-application P2793@chi-application) (set! P9263@P2791@chi-expr* P2791@chi-expr*) (set! P9262@P2789@chi-global-macro P2789@chi-global-macro) (set! P9261@P2787@chi-local-macro P2787@chi-local-macro) (set! P9260@P2785@chi-macro P2785@chi-macro) (set! P9259@P2783@do-macro-call P2783@do-macro-call) (set! P9258@P2781@local-macro-transformer P2781@local-macro-transformer) (set! P9257@P2779@macro-transformer P2779@macro-transformer) (set! P9256@P2777@symbol-macro P2777@symbol-macro) (set! P9255@P2775@core-macro-transformer P2775@core-macro-transformer) (set! P9254@P2773@syntax-transformer P2773@syntax-transformer) (set! P9253@P2771@ellipsis-map P2771@ellipsis-map) (set! P9252@P2769@syntax-case-transformer P2769@syntax-case-transformer) (set! P9251@P2767@verify-literals P2767@verify-literals) (set! P9250@P2765@underscore? P2765@underscore?) (set! P9249@P2763@ellipsis? P2763@ellipsis?) (set! P9248@P2761@syntax-dispatch P2761@syntax-dispatch) (set! P9247@P2759@convert-pattern P2759@convert-pattern) (set! P9246@P2757@foreign-call-transformer P2757@foreign-call-transformer) (set! P9245@P2755@parameterize-macro P2755@parameterize-macro) (set! P9244@P2753@incorrect-usage-macro P2753@incorrect-usage-macro) (set! P9243@P2751@define-condition-type-macro P2751@define-condition-type-macro) (set! P9242@P2749@define-record-type-macro P2749@define-record-type-macro) (set! P9241@P2747@define-struct-macro P2747@define-struct-macro) (set! P9240@P2745@quasisyntax-macro P2745@quasisyntax-macro) (set! P9239@P2743@quasiquote-macro P2743@quasiquote-macro) (set! P9238@P2741@syntax-rules-macro P2741@syntax-rules-macro) (set! P9237@P2739@include-into-macro P2739@include-into-macro) (set! P9236@P2737@include-macro P2737@include-macro) (set! P9235@P2735@do-include P2735@do-include) (set! P9234@P2733@cond-macro P2733@cond-macro) (set! P9233@P2731@and-macro P2731@and-macro) (set! P9232@P2729@or-macro P2729@or-macro) (set! P9231@P2727@let*-macro P2727@let*-macro) (set! P9230@P2725@do-macro P2725@do-macro) (set! P9229@P2723@identifier-syntax-macro P2723@identifier-syntax-macro) (set! P9228@P2721@endianness-macro P2721@endianness-macro) (set! P9227@P2719@assert-macro P2719@assert-macro) (set! P9226@P2717@delay-macro P2717@delay-macro) (set! P9225@P2715@time-macro P2715@time-macro) (set! P9224@P2713@define-enumeration-macro P2713@define-enumeration-macro) (set! P9223@P2711@guard-macro P2711@guard-macro) (set! P9222@P2709@trace-letrec-syntax-macro P2709@trace-letrec-syntax-macro) (set! P9221@P2707@trace-let-syntax-macro P2707@trace-let-syntax-macro) (set! P9220@P2705@trace-let/rec-syntax P2705@trace-let/rec-syntax) (set! P9219@P2703@trace-define-syntax-macro P2703@trace-define-syntax-macro) (set! P9218@P2701@trace-define-macro P2701@trace-define-macro) (set! P9217@P2699@trace-lambda-macro P2699@trace-lambda-macro) (set! P9216@P2697@let*-values-macro P2697@let*-values-macro) (set! P9215@P2695@let-values-macro P2695@let-values-macro) (set! P9214@P2693@let-macro P2693@let-macro) (set! P9213@P2691@invalid-fmls-error P2691@invalid-fmls-error) (set! P9212@P2689@with-syntax-macro P2689@with-syntax-macro) (set! P9211@P2687@bless P2687@bless) (set! P9210@P2685@lambda-transformer P2685@lambda-transformer) (set! P9209@P2683@case-lambda-transformer P2683@case-lambda-transformer) (set! P9208@P2681@quote-transformer P2681@quote-transformer) (set! P9207@P2679@case-macro P2679@case-macro) (set! P9206@P2677@or-transformer P2677@or-transformer) (set! P9205@P2675@and-transformer P2675@and-transformer) (set! P9204@P2673@if-transformer P2673@if-transformer) (set! P9203@P2671@unless-macro P2671@unless-macro) (set! P9202@P2669@when-macro P2669@when-macro) (set! P9201@P2667@record-constructor-descriptor-transformer P2667@record-constructor-descriptor-transformer) (set! P9200@P2665@record-type-descriptor-transformer P2665@record-type-descriptor-transformer) (set! P9199@P2663@type-descriptor-transformer P2663@type-descriptor-transformer) (set! P9198@P2661@fluid-let-syntax-transformer P2661@fluid-let-syntax-transformer) (set! P9197@P2659@letrec*-transformer P2659@letrec*-transformer) (set! P9196@P2657@letrec-transformer P2657@letrec-transformer) (set! P9195@P2655@letrec-helper P2655@letrec-helper) (set! P9194@P2653@add-lexicals P2653@add-lexicals) (set! P9193@P2651@add-lexical P2651@add-lexical) (set! P9192@P2649@set-lexical-mutable! P2649@set-lexical-mutable!) (set! P9191@P2647@lexical-mutable? P2647@lexical-mutable?) (set! P9190@P2645@lexical-var P2645@lexical-var) (set! P9189@P2643@scheme-stx P2643@scheme-stx) (set! P9188@P2641@scheme-stx-hashtable P2641@scheme-stx-hashtable) (set! P9187@P2639@parse-define-syntax P2639@parse-define-syntax) (set! P9186@P2637@parse-define P2637@parse-define) (set! P9185@P2326@make-eval-transformer P2326@make-eval-transformer) (set! P9184@P2324@variable-transformer-procedure P2324@variable-transformer-procedure) (set! P9183@P2322@variable-transformer? P2322@variable-transformer?) (set! P9182@P2320@make-variable-transformer P2320@make-variable-transformer) (set! P9181@P2318@sanitize-binding P2318@sanitize-binding) (set! P9180@P2304@syntax-type P2304@syntax-type) (set! P9179@P2302@raise-unbound-error P2302@raise-unbound-error) (set! P9178@P2300@binding-value P2300@binding-value) (set! P9177@P2298@binding-type P2298@binding-type) (set! P9176@P2296@make-binding P2296@make-binding) (set! P9175@P2294@label->binding P2294@label->binding) (set! P9174@P2292@id->real-label P2292@id->real-label) (set! P9173@P2290@id->label P2290@id->label) (set! P9172@P2288@same-marks*? P2288@same-marks*?) (set! P9171@P2286@stx->datum P2286@stx->datum) (set! P9170@P2284@strip P2284@strip) (set! P9169@P2282@strip-annotations P2282@strip-annotations) (set! P9168@P2280@self-evaluating? P2280@self-evaluating?) (set! P9167@P2278@bound-id-member? P2278@bound-id-member?) (set! P9166@P2276@distinct-bound-ids? P2276@distinct-bound-ids?) (set! P9165@P2274@valid-bound-ids? P2274@valid-bound-ids?) (set! P9164@P2272@free-id=? P2272@free-id=?) (set! P9163@P2270@bound-id=? P2270@bound-id=?) (set! P9162@P2268@same-marks? P2268@same-marks?) (set! P9161@P2266@id->sym P2266@id->sym) (set! P9160@P2264@id? P2264@id?) (set! P9159@P2262@syntax->list P2262@syntax->list) (set! P9158@P2260@syntax-cdr P2260@syntax-cdr) (set! P9157@P2258@syntax-car P2258@syntax-car) (set! P9156@P2256@syntax-list? P2256@syntax-list?) (set! P9155@P2254@syntax-null? P2254@syntax-null?) (set! P9154@P2252@syntax-vector? P2252@syntax-vector?) (set! P9153@P2250@syntax-pair? P2250@syntax-pair?) (set! P9152@P2248@syntax-vector->list P2248@syntax-vector->list) (set! P9151@P2246@syntax-kind? P2246@syntax-kind?) (set! P9150@P2244@add-subst P2244@add-subst) (set! P9149@P2242@add-mark P2242@add-mark) (set! P9148@P2240@mkstx P2240@mkstx) (set! P9147@P2238@join-wraps P2238@join-wraps) (set! P9146@P2236@anti-mark? P2236@anti-mark?) (set! P9145@P2234@anti-mark P2234@anti-mark) (set! P9144@P2232@gen-mark P2232@gen-mark) (set! P9143@P2230@datum->stx P2230@datum->stx) (set! P9142@P2228@rp P2228@rp) (set! P9141@P2226@set-stx-ae*! P2226@set-stx-ae*!) (set! P9140@P2224@set-stx-subst*! P2224@set-stx-subst*!) (set! P9139@P2222@set-stx-mark*! P2222@set-stx-mark*!) (set! P9138@P2220@set-stx-expr! P2220@set-stx-expr!) (set! P9137@P2218@stx-ae* P2218@stx-ae*) (set! P9136@P2216@stx-subst* P2216@stx-subst*) (set! P9135@P2214@stx-mark* P2214@stx-mark*) (set! P9134@P2212@stx-expr P2212@stx-expr) (set! P9133@P2210@make-stx P2210@make-stx) (set! P9132@P2208@stx? P2208@stx?) (set! P9131@P2205@P2197 P2205@P2197) (set! P9130@P2203@P2198 P2203@P2198) (set! P9129@P2201@P2196 P2201@P2196) (set! P9128@P2195@make-full-rib P2195@make-full-rib) (set! P9127@P2193@unseal-rib! P2193@unseal-rib!) (set! P9126@P2191@seal-rib! P2191@seal-rib!) (set! P9125@P2189@make-rib-map P2189@make-rib-map) (set! P9124@P2187@extend-rib/nc! P2187@extend-rib/nc!) (set! P9123@P2185@extend-rib! P2185@extend-rib!) (set! P9122@P2183@make-empty-rib P2183@make-empty-rib) (set! P9121@P2181@set-rib-cache! P2181@set-rib-cache!) (set! P9120@P2179@set-rib-sealed/freq! P2179@set-rib-sealed/freq!) (set! P9119@P2177@set-rib-label*! P2177@set-rib-label*!) (set! P9118@P2175@set-rib-mark**! P2175@set-rib-mark**!) (set! P9117@P2173@set-rib-sym*! P2173@set-rib-sym*!) (set! P9116@P2171@rib-cache P2171@rib-cache) (set! P9115@P2169@rib-sealed/freq P2169@rib-sealed/freq) (set! P9114@P2167@rib-label* P2167@rib-label*) (set! P9113@P2165@rib-mark** P2165@rib-mark**) (set! P9112@P2163@rib-sym* P2163@rib-sym*) (set! P9111@P2161@make-rib P2161@make-rib) (set! P9110@P2159@rib? P2159@rib?) (set! P9109@P2156@P2148 P2156@P2148) (set! P9108@P2154@P2149 P2154@P2149) (set! P9107@P2152@P2147 P2152@P2147) (set! P9106@P2146@gen-define-label P2146@gen-define-label) (set! P9105@P2144@gen-define-label+loc P2144@gen-define-label+loc) (set! P9104@P2142@gen-top-level-label P2142@gen-top-level-label) (set! P9103@P2140@gen-label P2140@gen-label) (set! P9102@P2138@gen-global P2138@gen-global) (set! P9101@P2136@gen-lexical P2136@gen-lexical) (set! P9100@P2134@top-marked? P2134@top-marked?) (set! P9099@P2132@top-mark* P2132@top-mark*) (set! P9098@P2127@set-union P2127@set-union) (set! P9097@P2125@set-cons P2125@set-cons) (set! P9096@P2123@file-options-macro P2123@file-options-macro) (P1780@P1425@current-library-expander P2964@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (P9374@P9369 P9376@P9371 P9378@P9370 P9381@&condition? P9383@make-&condition P9385@&condition-rtd P9387@&condition-rcd P9459@P9454 P9461@P9456 P9463@P9455 P9466@p? P9468@make-message-condition P9470@P9453@condition-message P9472@message-condition? P9474@condition-message P9476@&message-rtd P9478@&message-rcd P9484@P9479 P9486@P9481 P9488@P9480 P9491@p? P9493@make-warning P9495@warning? P9497@&warning-rtd P9499@&warning-rcd P9505@P9500 P9507@P9502 P9509@P9501 P9512@p? P9514@make-serious-condition P9516@serious-condition? P9518@&serious-rtd P9520@&serious-rcd P9526@P9521 P9528@P9523 P9530@P9522 P9533@p? P9535@make-error P9537@error? P9539@&error-rtd P9541@&error-rcd P9547@P9542 P9549@P9544 P9551@P9543 P9554@p? P9556@make-violation P9558@violation? P9560@&violation-rtd P9562@&violation-rcd P9568@P9563 P9570@P9565 P9572@P9564 P9575@p? P9577@make-assertion-violation P9579@assertion-violation? P9581@&assertion-rtd P9583@&assertion-rcd P9590@P9585 P9592@P9587 P9594@P9586 P9597@p? P9599@make-irritants-condition P9601@P9584@condition-irritants P9603@irritants-condition? P9605@condition-irritants P9607@&irritants-rtd P9609@&irritants-rcd P9616@P9611 P9618@P9613 P9620@P9612 P9623@p? P9625@make-who-condition P9627@P9610@condition-who P9629@who-condition? P9631@condition-who P9633@&who-rtd P9635@&who-rcd P9641@P9636 P9643@P9638 P9645@P9637 P9648@p? P9650@make-non-continuable-violation P9652@non-continuable-violation? P9654@&non-continuable-rtd P9656@&non-continuable-rcd P9662@P9657 P9664@P9659 P9666@P9658 P9669@p? P9671@make-implementation-restriction-violation P9673@implementation-restriction-violation? P9675@&implementation-restriction-rtd P9677@&implementation-restriction-rcd P9683@P9678 P9685@P9680 P9687@P9679 P9690@p? P9692@make-lexical-violation P9694@lexical-violation? P9696@&lexical-rtd P9698@&lexical-rcd P9706@P9701 P9708@P9703 P9710@P9702 P9713@p? P9715@make-syntax-violation P9717@P9699@syntax-violation-form P9719@P9700@syntax-violation-subform P9721@syntax-violation? P9723@syntax-violation-form P9725@syntax-violation-subform P9727@&syntax-rtd P9729@&syntax-rcd P9735@P9730 P9737@P9732 P9739@P9731 P9742@p? P9744@make-undefined-violation P9746@undefined-violation? P9748@&undefined-rtd P9750@&undefined-rcd P9756@P9751 P9758@P9753 P9760@P9752 P9763@p? P9765@make-i/o-error P9767@i/o-error? P9769@&i/o-rtd P9771@&i/o-rcd P9777@P9772 P9779@P9774 P9781@P9773 P9784@p? P9786@make-i/o-read-error P9788@i/o-read-error? P9790@&i/o-read-rtd P9792@&i/o-read-rcd P9798@P9793 P9800@P9795 P9802@P9794 P9805@p? P9807@make-i/o-write-error P9809@i/o-write-error? P9811@&i/o-write-rtd P9813@&i/o-write-rcd P9820@P9815 P9822@P9817 P9824@P9816 P9827@p? P9829@make-i/o-invalid-position-error P9831@P9814@i/o-error-position P9833@i/o-invalid-position-error? P9835@i/o-error-position P9837@&i/o-invalid-position-rtd P9839@&i/o-invalid-position-rcd P9846@P9841 P9848@P9843 P9850@P9842 P9853@p? P9855@make-i/o-filename-error P9857@P9840@i/o-error-filename P9859@i/o-filename-error? P9861@i/o-error-filename P9863@&i/o-filename-rtd P9865@&i/o-filename-rcd P9871@P9866 P9873@P9868 P9875@P9867 P9878@p? P9880@make-i/o-file-protection-error P9882@i/o-file-protection-error? P9884@&i/o-file-protection-rtd P9886@&i/o-file-protection-rcd P9892@P9887 P9894@P9889 P9896@P9888 P9899@p? P9901@make-i/o-file-is-read-only-error P9903@i/o-file-is-read-only-error? P9905@&i/o-file-is-read-only-rtd P9907@&i/o-file-is-read-only-rcd P9913@P9908 P9915@P9910 P9917@P9909 P9920@p? P9922@make-i/o-file-already-exists-error P9924@i/o-file-already-exists-error? P9926@&i/o-file-already-exists-rtd P9928@&i/o-file-already-exists-rcd P9934@P9929 P9936@P9931 P9938@P9930 P9941@p? P9943@make-i/o-file-does-not-exist-error P9945@i/o-file-does-not-exist-error? P9947@&i/o-file-does-not-exist-rtd P9949@&i/o-file-does-not-exist-rcd P9956@P9951 P9958@P9953 P9960@P9952 P9963@p? P9965@make-i/o-port-error P9967@P9950@i/o-error-port P9969@i/o-port-error? P9971@i/o-error-port P9973@&i/o-port-rtd P9975@&i/o-port-rcd P9981@P9976 P9983@P9978 P9985@P9977 P9988@p? P9990@make-i/o-decoding-error P9992@i/o-decoding-error? P9994@&i/o-decoding-rtd P9996@&i/o-decoding-rcd P10003@P9998 P10005@P10000 P10007@P9999 P10010@p? P10012@make-i/o-encoding-error P10014@P9997@i/o-encoding-error-char P10016@i/o-encoding-error? P10018@i/o-encoding-error-char P10020@&i/o-encoding-rtd P10022@&i/o-encoding-rcd P10028@P10023 P10030@P10025 P10032@P10024 P10035@p? P10037@make-no-infinities-violation P10039@no-infinities-violation? P10041@&no-infinities-rtd P10043@&no-infinities-rcd P10049@P10044 P10051@P10046 P10053@P10045 P10056@p? P10058@make-no-nans-violation P10060@no-nans-violation? P10062@&no-nans-rtd P10064@&no-nans-rcd) (begin (set! P9374@P9369 (make-record-type-descriptor '&condition '#f 'P9372 '#f '#f '#())) (set! P9376@P9371 '#f) (set! P9378@P9370 (make-record-constructor-descriptor P9374@P9369 '#f P9376@P9371)) (set! P9381@&condition? (record-predicate P9374@P9369)) (set! P9383@make-&condition (record-constructor P9378@P9370)) (set! P9385@&condition-rtd P9374@P9369) (set! P9387@&condition-rcd P9378@P9370) (set! P9459@P9454 (make-record-type-descriptor '&message P9374@P9369 'P9457 '#f '#f '#((immutable message)))) (set! P9461@P9456 '#f) (set! P9463@P9455 (make-record-constructor-descriptor P9459@P9454 P9378@P9370 P9461@P9456)) (set! P9466@p? (record-predicate P9459@P9454)) (set! P9468@make-message-condition (record-constructor P9463@P9455)) (set! P9470@P9453@condition-message (record-accessor P9459@P9454 '0)) (set! P9472@message-condition? (condition-predicate P9459@P9454)) (set! P9474@condition-message (condition-accessor P9459@P9454 P9470@P9453@condition-message)) (set! P9476@&message-rtd P9459@P9454) (set! P9478@&message-rcd P9463@P9455) (set! P9484@P9479 (make-record-type-descriptor '&warning P9374@P9369 'P9482 '#f '#f '#())) (set! P9486@P9481 '#f) (set! P9488@P9480 (make-record-constructor-descriptor P9484@P9479 P9378@P9370 P9486@P9481)) (set! P9491@p? (record-predicate P9484@P9479)) (set! P9493@make-warning (record-constructor P9488@P9480)) (set! P9495@warning? (condition-predicate P9484@P9479)) (set! P9497@&warning-rtd P9484@P9479) (set! P9499@&warning-rcd P9488@P9480) (set! P9505@P9500 (make-record-type-descriptor '&serious P9374@P9369 'P9503 '#f '#f '#())) (set! P9507@P9502 '#f) (set! P9509@P9501 (make-record-constructor-descriptor P9505@P9500 P9378@P9370 P9507@P9502)) (set! P9512@p? (record-predicate P9505@P9500)) (set! P9514@make-serious-condition (record-constructor P9509@P9501)) (set! P9516@serious-condition? (condition-predicate P9505@P9500)) (set! P9518@&serious-rtd P9505@P9500) (set! P9520@&serious-rcd P9509@P9501) (set! P9526@P9521 (make-record-type-descriptor '&error P9505@P9500 'P9524 '#f '#f '#())) (set! P9528@P9523 '#f) (set! P9530@P9522 (make-record-constructor-descriptor P9526@P9521 P9509@P9501 P9528@P9523)) (set! P9533@p? (record-predicate P9526@P9521)) (set! P9535@make-error (record-constructor P9530@P9522)) (set! P9537@error? (condition-predicate P9526@P9521)) (set! P9539@&error-rtd P9526@P9521) (set! P9541@&error-rcd P9530@P9522) (set! P9547@P9542 (make-record-type-descriptor '&violation P9505@P9500 'P9545 '#f '#f '#())) (set! P9549@P9544 '#f) (set! P9551@P9543 (make-record-constructor-descriptor P9547@P9542 P9509@P9501 P9549@P9544)) (set! P9554@p? (record-predicate P9547@P9542)) (set! P9556@make-violation (record-constructor P9551@P9543)) (set! P9558@violation? (condition-predicate P9547@P9542)) (set! P9560@&violation-rtd P9547@P9542) (set! P9562@&violation-rcd P9551@P9543) (set! P9568@P9563 (make-record-type-descriptor '&assertion P9547@P9542 'P9566 '#f '#f '#())) (set! P9570@P9565 '#f) (set! P9572@P9564 (make-record-constructor-descriptor P9568@P9563 P9551@P9543 P9570@P9565)) (set! P9575@p? (record-predicate P9568@P9563)) (set! P9577@make-assertion-violation (record-constructor P9572@P9564)) (set! P9579@assertion-violation? (condition-predicate P9568@P9563)) (set! P9581@&assertion-rtd P9568@P9563) (set! P9583@&assertion-rcd P9572@P9564) (set! P9590@P9585 (make-record-type-descriptor '&irritants P9374@P9369 'P9588 '#f '#f '#((immutable irritants)))) (set! P9592@P9587 '#f) (set! P9594@P9586 (make-record-constructor-descriptor P9590@P9585 P9378@P9370 P9592@P9587)) (set! P9597@p? (record-predicate P9590@P9585)) (set! P9599@make-irritants-condition (record-constructor P9594@P9586)) (set! P9601@P9584@condition-irritants (record-accessor P9590@P9585 '0)) (set! P9603@irritants-condition? (condition-predicate P9590@P9585)) (set! P9605@condition-irritants (condition-accessor P9590@P9585 P9601@P9584@condition-irritants)) (set! P9607@&irritants-rtd P9590@P9585) (set! P9609@&irritants-rcd P9594@P9586) (set! P9616@P9611 (make-record-type-descriptor '&who P9374@P9369 'P9614 '#f '#f '#((immutable who)))) (set! P9618@P9613 '#f) (set! P9620@P9612 (make-record-constructor-descriptor P9616@P9611 P9378@P9370 P9618@P9613)) (set! P9623@p? (record-predicate P9616@P9611)) (set! P9625@make-who-condition (record-constructor P9620@P9612)) (set! P9627@P9610@condition-who (record-accessor P9616@P9611 '0)) (set! P9629@who-condition? (condition-predicate P9616@P9611)) (set! P9631@condition-who (condition-accessor P9616@P9611 P9627@P9610@condition-who)) (set! P9633@&who-rtd P9616@P9611) (set! P9635@&who-rcd P9620@P9612) (set! P9641@P9636 (make-record-type-descriptor '&non-continuable P9547@P9542 'P9639 '#f '#f '#())) (set! P9643@P9638 '#f) (set! P9645@P9637 (make-record-constructor-descriptor P9641@P9636 P9551@P9543 P9643@P9638)) (set! P9648@p? (record-predicate P9641@P9636)) (set! P9650@make-non-continuable-violation (record-constructor P9645@P9637)) (set! P9652@non-continuable-violation? (condition-predicate P9641@P9636)) (set! P9654@&non-continuable-rtd P9641@P9636) (set! P9656@&non-continuable-rcd P9645@P9637) (set! P9662@P9657 (make-record-type-descriptor '&implementation-restriction P9547@P9542 'P9660 '#f '#f '#())) (set! P9664@P9659 '#f) (set! P9666@P9658 (make-record-constructor-descriptor P9662@P9657 P9551@P9543 P9664@P9659)) (set! P9669@p? (record-predicate P9662@P9657)) (set! P9671@make-implementation-restriction-violation (record-constructor P9666@P9658)) (set! P9673@implementation-restriction-violation? (condition-predicate P9662@P9657)) (set! P9675@&implementation-restriction-rtd P9662@P9657) (set! P9677@&implementation-restriction-rcd P9666@P9658) (set! P9683@P9678 (make-record-type-descriptor '&lexical P9547@P9542 'P9681 '#f '#f '#())) (set! P9685@P9680 '#f) (set! P9687@P9679 (make-record-constructor-descriptor P9683@P9678 P9551@P9543 P9685@P9680)) (set! P9690@p? (record-predicate P9683@P9678)) (set! P9692@make-lexical-violation (record-constructor P9687@P9679)) (set! P9694@lexical-violation? (condition-predicate P9683@P9678)) (set! P9696@&lexical-rtd P9683@P9678) (set! P9698@&lexical-rcd P9687@P9679) (set! P9706@P9701 (make-record-type-descriptor '&syntax P9547@P9542 'P9704 '#f '#f '#((immutable form) (immutable subform)))) (set! P9708@P9703 '#f) (set! P9710@P9702 (make-record-constructor-descriptor P9706@P9701 P9551@P9543 P9708@P9703)) (set! P9713@p? (record-predicate P9706@P9701)) (set! P9715@make-syntax-violation (record-constructor P9710@P9702)) (set! P9717@P9699@syntax-violation-form (record-accessor P9706@P9701 '0)) (set! P9719@P9700@syntax-violation-subform (record-accessor P9706@P9701 '1)) (set! P9721@syntax-violation? (condition-predicate P9706@P9701)) (set! P9723@syntax-violation-form (condition-accessor P9706@P9701 P9717@P9699@syntax-violation-form)) (set! P9725@syntax-violation-subform (condition-accessor P9706@P9701 P9719@P9700@syntax-violation-subform)) (set! P9727@&syntax-rtd P9706@P9701) (set! P9729@&syntax-rcd P9710@P9702) (set! P9735@P9730 (make-record-type-descriptor '&undefined P9547@P9542 'P9733 '#f '#f '#())) (set! P9737@P9732 '#f) (set! P9739@P9731 (make-record-constructor-descriptor P9735@P9730 P9551@P9543 P9737@P9732)) (set! P9742@p? (record-predicate P9735@P9730)) (set! P9744@make-undefined-violation (record-constructor P9739@P9731)) (set! P9746@undefined-violation? (condition-predicate P9735@P9730)) (set! P9748@&undefined-rtd P9735@P9730) (set! P9750@&undefined-rcd P9739@P9731) (set! P9756@P9751 (make-record-type-descriptor '&i/o P9526@P9521 'P9754 '#f '#f '#())) (set! P9758@P9753 '#f) (set! P9760@P9752 (make-record-constructor-descriptor P9756@P9751 P9530@P9522 P9758@P9753)) (set! P9763@p? (record-predicate P9756@P9751)) (set! P9765@make-i/o-error (record-constructor P9760@P9752)) (set! P9767@i/o-error? (condition-predicate P9756@P9751)) (set! P9769@&i/o-rtd P9756@P9751) (set! P9771@&i/o-rcd P9760@P9752) (set! P9777@P9772 (make-record-type-descriptor '&i/o-read P9756@P9751 'P9775 '#f '#f '#())) (set! P9779@P9774 '#f) (set! P9781@P9773 (make-record-constructor-descriptor P9777@P9772 P9760@P9752 P9779@P9774)) (set! P9784@p? (record-predicate P9777@P9772)) (set! P9786@make-i/o-read-error (record-constructor P9781@P9773)) (set! P9788@i/o-read-error? (condition-predicate P9777@P9772)) (set! P9790@&i/o-read-rtd P9777@P9772) (set! P9792@&i/o-read-rcd P9781@P9773) (set! P9798@P9793 (make-record-type-descriptor '&i/o-write P9756@P9751 'P9796 '#f '#f '#())) (set! P9800@P9795 '#f) (set! P9802@P9794 (make-record-constructor-descriptor P9798@P9793 P9760@P9752 P9800@P9795)) (set! P9805@p? (record-predicate P9798@P9793)) (set! P9807@make-i/o-write-error (record-constructor P9802@P9794)) (set! P9809@i/o-write-error? (condition-predicate P9798@P9793)) (set! P9811@&i/o-write-rtd P9798@P9793) (set! P9813@&i/o-write-rcd P9802@P9794) (set! P9820@P9815 (make-record-type-descriptor '&i/o-invalid-position P9756@P9751 'P9818 '#f '#f '#((immutable position)))) (set! P9822@P9817 '#f) (set! P9824@P9816 (make-record-constructor-descriptor P9820@P9815 P9760@P9752 P9822@P9817)) (set! P9827@p? (record-predicate P9820@P9815)) (set! P9829@make-i/o-invalid-position-error (record-constructor P9824@P9816)) (set! P9831@P9814@i/o-error-position (record-accessor P9820@P9815 '0)) (set! P9833@i/o-invalid-position-error? (condition-predicate P9820@P9815)) (set! P9835@i/o-error-position (condition-accessor P9820@P9815 P9831@P9814@i/o-error-position)) (set! P9837@&i/o-invalid-position-rtd P9820@P9815) (set! P9839@&i/o-invalid-position-rcd P9824@P9816) (set! P9846@P9841 (make-record-type-descriptor '&i/o-filename P9756@P9751 'P9844 '#f '#f '#((immutable filename)))) (set! P9848@P9843 '#f) (set! P9850@P9842 (make-record-constructor-descriptor P9846@P9841 P9760@P9752 P9848@P9843)) (set! P9853@p? (record-predicate P9846@P9841)) (set! P9855@make-i/o-filename-error (record-constructor P9850@P9842)) (set! P9857@P9840@i/o-error-filename (record-accessor P9846@P9841 '0)) (set! P9859@i/o-filename-error? (condition-predicate P9846@P9841)) (set! P9861@i/o-error-filename (condition-accessor P9846@P9841 P9857@P9840@i/o-error-filename)) (set! P9863@&i/o-filename-rtd P9846@P9841) (set! P9865@&i/o-filename-rcd P9850@P9842) (set! P9871@P9866 (make-record-type-descriptor '&i/o-file-protection P9846@P9841 'P9869 '#f '#f '#())) (set! P9873@P9868 '#f) (set! P9875@P9867 (make-record-constructor-descriptor P9871@P9866 P9850@P9842 P9873@P9868)) (set! P9878@p? (record-predicate P9871@P9866)) (set! P9880@make-i/o-file-protection-error (record-constructor P9875@P9867)) (set! P9882@i/o-file-protection-error? (condition-predicate P9871@P9866)) (set! P9884@&i/o-file-protection-rtd P9871@P9866) (set! P9886@&i/o-file-protection-rcd P9875@P9867) (set! P9892@P9887 (make-record-type-descriptor '&i/o-file-is-read-only P9871@P9866 'P9890 '#f '#f '#())) (set! P9894@P9889 '#f) (set! P9896@P9888 (make-record-constructor-descriptor P9892@P9887 P9875@P9867 P9894@P9889)) (set! P9899@p? (record-predicate P9892@P9887)) (set! P9901@make-i/o-file-is-read-only-error (record-constructor P9896@P9888)) (set! P9903@i/o-file-is-read-only-error? (condition-predicate P9892@P9887)) (set! P9905@&i/o-file-is-read-only-rtd P9892@P9887) (set! P9907@&i/o-file-is-read-only-rcd P9896@P9888) (set! P9913@P9908 (make-record-type-descriptor '&i/o-file-already-exists P9846@P9841 'P9911 '#f '#f '#())) (set! P9915@P9910 '#f) (set! P9917@P9909 (make-record-constructor-descriptor P9913@P9908 P9850@P9842 P9915@P9910)) (set! P9920@p? (record-predicate P9913@P9908)) (set! P9922@make-i/o-file-already-exists-error (record-constructor P9917@P9909)) (set! P9924@i/o-file-already-exists-error? (condition-predicate P9913@P9908)) (set! P9926@&i/o-file-already-exists-rtd P9913@P9908) (set! P9928@&i/o-file-already-exists-rcd P9917@P9909) (set! P9934@P9929 (make-record-type-descriptor '&i/o-file-does-not-exist P9846@P9841 'P9932 '#f '#f '#())) (set! P9936@P9931 '#f) (set! P9938@P9930 (make-record-constructor-descriptor P9934@P9929 P9850@P9842 P9936@P9931)) (set! P9941@p? (record-predicate P9934@P9929)) (set! P9943@make-i/o-file-does-not-exist-error (record-constructor P9938@P9930)) (set! P9945@i/o-file-does-not-exist-error? (condition-predicate P9934@P9929)) (set! P9947@&i/o-file-does-not-exist-rtd P9934@P9929) (set! P9949@&i/o-file-does-not-exist-rcd P9938@P9930) (set! P9956@P9951 (make-record-type-descriptor '&i/o-port P9756@P9751 'P9954 '#f '#f '#((immutable port)))) (set! P9958@P9953 '#f) (set! P9960@P9952 (make-record-constructor-descriptor P9956@P9951 P9760@P9752 P9958@P9953)) (set! P9963@p? (record-predicate P9956@P9951)) (set! P9965@make-i/o-port-error (record-constructor P9960@P9952)) (set! P9967@P9950@i/o-error-port (record-accessor P9956@P9951 '0)) (set! P9969@i/o-port-error? (condition-predicate P9956@P9951)) (set! P9971@i/o-error-port (condition-accessor P9956@P9951 P9967@P9950@i/o-error-port)) (set! P9973@&i/o-port-rtd P9956@P9951) (set! P9975@&i/o-port-rcd P9960@P9952) (set! P9981@P9976 (make-record-type-descriptor '&i/o-decoding P9956@P9951 'P9979 '#f '#f '#())) (set! P9983@P9978 '#f) (set! P9985@P9977 (make-record-constructor-descriptor P9981@P9976 P9960@P9952 P9983@P9978)) (set! P9988@p? (record-predicate P9981@P9976)) (set! P9990@make-i/o-decoding-error (record-constructor P9985@P9977)) (set! P9992@i/o-decoding-error? (condition-predicate P9981@P9976)) (set! P9994@&i/o-decoding-rtd P9981@P9976) (set! P9996@&i/o-decoding-rcd P9985@P9977) (set! P10003@P9998 (make-record-type-descriptor '&i/o-encoding P9956@P9951 'P10001 '#f '#f '#((immutable char)))) (set! P10005@P10000 '#f) (set! P10007@P9999 (make-record-constructor-descriptor P10003@P9998 P9960@P9952 P10005@P10000)) (set! P10010@p? (record-predicate P10003@P9998)) (set! P10012@make-i/o-encoding-error (record-constructor P10007@P9999)) (set! P10014@P9997@i/o-encoding-error-char (record-accessor P10003@P9998 '0)) (set! P10016@i/o-encoding-error? (condition-predicate P10003@P9998)) (set! P10018@i/o-encoding-error-char (condition-accessor P10003@P9998 P10014@P9997@i/o-encoding-error-char)) (set! P10020@&i/o-encoding-rtd P10003@P9998) (set! P10022@&i/o-encoding-rcd P10007@P9999) (set! P10028@P10023 (make-record-type-descriptor '&no-infinities P9662@P9657 'P10026 '#f '#f '#())) (set! P10030@P10025 '#f) (set! P10032@P10024 (make-record-constructor-descriptor P10028@P10023 P9666@P9658 P10030@P10025)) (set! P10035@p? (record-predicate P10028@P10023)) (set! P10037@make-no-infinities-violation (record-constructor P10032@P10024)) (set! P10039@no-infinities-violation? (condition-predicate P10028@P10023)) (set! P10041@&no-infinities-rtd P10028@P10023) (set! P10043@&no-infinities-rcd P10032@P10024) (set! P10049@P10044 (make-record-type-descriptor '&no-nans P9662@P9657 'P10047 '#f '#f '#())) (set! P10051@P10046 '#f) (set! P10053@P10045 (make-record-constructor-descriptor P10049@P10044 P9666@P9658 P10051@P10046)) (set! P10056@p? (record-predicate P10049@P10044)) (set! P10058@make-no-nans-violation (record-constructor P10053@P10045)) (set! P10060@no-nans-violation? (condition-predicate P10049@P10044)) (set! P10062@&no-nans-rtd P10049@P10044) (set! P10064@&no-nans-rcd P10053@P10045) (begin (set! P10305@P10064@&no-nans-rcd P10064@&no-nans-rcd) (set! P10304@P10062@&no-nans-rtd P10062@&no-nans-rtd) (set! P10303@P10060@no-nans-violation? P10060@no-nans-violation?) (set! P10302@P10058@make-no-nans-violation P10058@make-no-nans-violation) (set! P10301@P10056@p? P10056@p?) (set! P10300@P10053@P10045 P10053@P10045) (set! P10299@P10051@P10046 P10051@P10046) (set! P10298@P10049@P10044 P10049@P10044) (set! P10297@P10043@&no-infinities-rcd P10043@&no-infinities-rcd) (set! P10296@P10041@&no-infinities-rtd P10041@&no-infinities-rtd) (set! P10295@P10039@no-infinities-violation? P10039@no-infinities-violation?) (set! P10294@P10037@make-no-infinities-violation P10037@make-no-infinities-violation) (set! P10293@P10035@p? P10035@p?) (set! P10292@P10032@P10024 P10032@P10024) (set! P10291@P10030@P10025 P10030@P10025) (set! P10290@P10028@P10023 P10028@P10023) (set! P10289@P10022@&i/o-encoding-rcd P10022@&i/o-encoding-rcd) (set! P10288@P10020@&i/o-encoding-rtd P10020@&i/o-encoding-rtd) (set! P10287@P10018@i/o-encoding-error-char P10018@i/o-encoding-error-char) (set! P10286@P10016@i/o-encoding-error? P10016@i/o-encoding-error?) (set! P10285@P10014@P9997@i/o-encoding-error-char P10014@P9997@i/o-encoding-error-char) (set! P10284@P10012@make-i/o-encoding-error P10012@make-i/o-encoding-error) (set! P10283@P10010@p? P10010@p?) (set! P10282@P10007@P9999 P10007@P9999) (set! P10281@P10005@P10000 P10005@P10000) (set! P10280@P10003@P9998 P10003@P9998) (set! P10279@P9996@&i/o-decoding-rcd P9996@&i/o-decoding-rcd) (set! P10278@P9994@&i/o-decoding-rtd P9994@&i/o-decoding-rtd) (set! P10277@P9992@i/o-decoding-error? P9992@i/o-decoding-error?) (set! P10276@P9990@make-i/o-decoding-error P9990@make-i/o-decoding-error) (set! P10275@P9988@p? P9988@p?) (set! P10274@P9985@P9977 P9985@P9977) (set! P10273@P9983@P9978 P9983@P9978) (set! P10272@P9981@P9976 P9981@P9976) (set! P10271@P9975@&i/o-port-rcd P9975@&i/o-port-rcd) (set! P10270@P9973@&i/o-port-rtd P9973@&i/o-port-rtd) (set! P10269@P9971@i/o-error-port P9971@i/o-error-port) (set! P10268@P9969@i/o-port-error? P9969@i/o-port-error?) (set! P10267@P9967@P9950@i/o-error-port P9967@P9950@i/o-error-port) (set! P10266@P9965@make-i/o-port-error P9965@make-i/o-port-error) (set! P10265@P9963@p? P9963@p?) (set! P10264@P9960@P9952 P9960@P9952) (set! P10263@P9958@P9953 P9958@P9953) (set! P10262@P9956@P9951 P9956@P9951) (set! P10261@P9949@&i/o-file-does-not-exist-rcd P9949@&i/o-file-does-not-exist-rcd) (set! P10260@P9947@&i/o-file-does-not-exist-rtd P9947@&i/o-file-does-not-exist-rtd) (set! P10259@P9945@i/o-file-does-not-exist-error? P9945@i/o-file-does-not-exist-error?) (set! P10258@P9943@make-i/o-file-does-not-exist-error P9943@make-i/o-file-does-not-exist-error) (set! P10257@P9941@p? P9941@p?) (set! P10256@P9938@P9930 P9938@P9930) (set! P10255@P9936@P9931 P9936@P9931) (set! P10254@P9934@P9929 P9934@P9929) (set! P10253@P9928@&i/o-file-already-exists-rcd P9928@&i/o-file-already-exists-rcd) (set! P10252@P9926@&i/o-file-already-exists-rtd P9926@&i/o-file-already-exists-rtd) (set! P10251@P9924@i/o-file-already-exists-error? P9924@i/o-file-already-exists-error?) (set! P10250@P9922@make-i/o-file-already-exists-error P9922@make-i/o-file-already-exists-error) (set! P10249@P9920@p? P9920@p?) (set! P10248@P9917@P9909 P9917@P9909) (set! P10247@P9915@P9910 P9915@P9910) (set! P10246@P9913@P9908 P9913@P9908) (set! P10245@P9907@&i/o-file-is-read-only-rcd P9907@&i/o-file-is-read-only-rcd) (set! P10244@P9905@&i/o-file-is-read-only-rtd P9905@&i/o-file-is-read-only-rtd) (set! P10243@P9903@i/o-file-is-read-only-error? P9903@i/o-file-is-read-only-error?) (set! P10242@P9901@make-i/o-file-is-read-only-error P9901@make-i/o-file-is-read-only-error) (set! P10241@P9899@p? P9899@p?) (set! P10240@P9896@P9888 P9896@P9888) (set! P10239@P9894@P9889 P9894@P9889) (set! P10238@P9892@P9887 P9892@P9887) (set! P10237@P9886@&i/o-file-protection-rcd P9886@&i/o-file-protection-rcd) (set! P10236@P9884@&i/o-file-protection-rtd P9884@&i/o-file-protection-rtd) (set! P10235@P9882@i/o-file-protection-error? P9882@i/o-file-protection-error?) (set! P10234@P9880@make-i/o-file-protection-error P9880@make-i/o-file-protection-error) (set! P10233@P9878@p? P9878@p?) (set! P10232@P9875@P9867 P9875@P9867) (set! P10231@P9873@P9868 P9873@P9868) (set! P10230@P9871@P9866 P9871@P9866) (set! P10229@P9865@&i/o-filename-rcd P9865@&i/o-filename-rcd) (set! P10228@P9863@&i/o-filename-rtd P9863@&i/o-filename-rtd) (set! P10227@P9861@i/o-error-filename P9861@i/o-error-filename) (set! P10226@P9859@i/o-filename-error? P9859@i/o-filename-error?) (set! P10225@P9857@P9840@i/o-error-filename P9857@P9840@i/o-error-filename) (set! P10224@P9855@make-i/o-filename-error P9855@make-i/o-filename-error) (set! P10223@P9853@p? P9853@p?) (set! P10222@P9850@P9842 P9850@P9842) (set! P10221@P9848@P9843 P9848@P9843) (set! P10220@P9846@P9841 P9846@P9841) (set! P10219@P9839@&i/o-invalid-position-rcd P9839@&i/o-invalid-position-rcd) (set! P10218@P9837@&i/o-invalid-position-rtd P9837@&i/o-invalid-position-rtd) (set! P10217@P9835@i/o-error-position P9835@i/o-error-position) (set! P10216@P9833@i/o-invalid-position-error? P9833@i/o-invalid-position-error?) (set! P10215@P9831@P9814@i/o-error-position P9831@P9814@i/o-error-position) (set! P10214@P9829@make-i/o-invalid-position-error P9829@make-i/o-invalid-position-error) (set! P10213@P9827@p? P9827@p?) (set! P10212@P9824@P9816 P9824@P9816) (set! P10211@P9822@P9817 P9822@P9817) (set! P10210@P9820@P9815 P9820@P9815) (set! P10209@P9813@&i/o-write-rcd P9813@&i/o-write-rcd) (set! P10208@P9811@&i/o-write-rtd P9811@&i/o-write-rtd) (set! P10207@P9809@i/o-write-error? P9809@i/o-write-error?) (set! P10206@P9807@make-i/o-write-error P9807@make-i/o-write-error) (set! P10205@P9805@p? P9805@p?) (set! P10204@P9802@P9794 P9802@P9794) (set! P10203@P9800@P9795 P9800@P9795) (set! P10202@P9798@P9793 P9798@P9793) (set! P10201@P9792@&i/o-read-rcd P9792@&i/o-read-rcd) (set! P10200@P9790@&i/o-read-rtd P9790@&i/o-read-rtd) (set! P10199@P9788@i/o-read-error? P9788@i/o-read-error?) (set! P10198@P9786@make-i/o-read-error P9786@make-i/o-read-error) (set! P10197@P9784@p? P9784@p?) (set! P10196@P9781@P9773 P9781@P9773) (set! P10195@P9779@P9774 P9779@P9774) (set! P10194@P9777@P9772 P9777@P9772) (set! P10193@P9771@&i/o-rcd P9771@&i/o-rcd) (set! P10192@P9769@&i/o-rtd P9769@&i/o-rtd) (set! P10191@P9767@i/o-error? P9767@i/o-error?) (set! P10190@P9765@make-i/o-error P9765@make-i/o-error) (set! P10189@P9763@p? P9763@p?) (set! P10188@P9760@P9752 P9760@P9752) (set! P10187@P9758@P9753 P9758@P9753) (set! P10186@P9756@P9751 P9756@P9751) (set! P10185@P9750@&undefined-rcd P9750@&undefined-rcd) (set! P10184@P9748@&undefined-rtd P9748@&undefined-rtd) (set! P10183@P9746@undefined-violation? P9746@undefined-violation?) (set! P10182@P9744@make-undefined-violation P9744@make-undefined-violation) (set! P10181@P9742@p? P9742@p?) (set! P10180@P9739@P9731 P9739@P9731) (set! P10179@P9737@P9732 P9737@P9732) (set! P10178@P9735@P9730 P9735@P9730) (set! P10177@P9729@&syntax-rcd P9729@&syntax-rcd) (set! P10176@P9727@&syntax-rtd P9727@&syntax-rtd) (set! P10175@P9725@syntax-violation-subform P9725@syntax-violation-subform) (set! P10174@P9723@syntax-violation-form P9723@syntax-violation-form) (set! P10173@P9721@syntax-violation? P9721@syntax-violation?) (set! P10172@P9719@P9700@syntax-violation-subform P9719@P9700@syntax-violation-subform) (set! P10171@P9717@P9699@syntax-violation-form P9717@P9699@syntax-violation-form) (set! P10170@P9715@make-syntax-violation P9715@make-syntax-violation) (set! P10169@P9713@p? P9713@p?) (set! P10168@P9710@P9702 P9710@P9702) (set! P10167@P9708@P9703 P9708@P9703) (set! P10166@P9706@P9701 P9706@P9701) (set! P10165@P9698@&lexical-rcd P9698@&lexical-rcd) (set! P10164@P9696@&lexical-rtd P9696@&lexical-rtd) (set! P10163@P9694@lexical-violation? P9694@lexical-violation?) (set! P10162@P9692@make-lexical-violation P9692@make-lexical-violation) (set! P10161@P9690@p? P9690@p?) (set! P10160@P9687@P9679 P9687@P9679) (set! P10159@P9685@P9680 P9685@P9680) (set! P10158@P9683@P9678 P9683@P9678) (set! P10157@P9677@&implementation-restriction-rcd P9677@&implementation-restriction-rcd) (set! P10156@P9675@&implementation-restriction-rtd P9675@&implementation-restriction-rtd) (set! P10155@P9673@implementation-restriction-violation? P9673@implementation-restriction-violation?) (set! P10154@P9671@make-implementation-restriction-violation P9671@make-implementation-restriction-violation) (set! P10153@P9669@p? P9669@p?) (set! P10152@P9666@P9658 P9666@P9658) (set! P10151@P9664@P9659 P9664@P9659) (set! P10150@P9662@P9657 P9662@P9657) (set! P10149@P9656@&non-continuable-rcd P9656@&non-continuable-rcd) (set! P10148@P9654@&non-continuable-rtd P9654@&non-continuable-rtd) (set! P10147@P9652@non-continuable-violation? P9652@non-continuable-violation?) (set! P10146@P9650@make-non-continuable-violation P9650@make-non-continuable-violation) (set! P10145@P9648@p? P9648@p?) (set! P10144@P9645@P9637 P9645@P9637) (set! P10143@P9643@P9638 P9643@P9638) (set! P10142@P9641@P9636 P9641@P9636) (set! P10141@P9635@&who-rcd P9635@&who-rcd) (set! P10140@P9633@&who-rtd P9633@&who-rtd) (set! P10139@P9631@condition-who P9631@condition-who) (set! P10138@P9629@who-condition? P9629@who-condition?) (set! P10137@P9627@P9610@condition-who P9627@P9610@condition-who) (set! P10136@P9625@make-who-condition P9625@make-who-condition) (set! P10135@P9623@p? P9623@p?) (set! P10134@P9620@P9612 P9620@P9612) (set! P10133@P9618@P9613 P9618@P9613) (set! P10132@P9616@P9611 P9616@P9611) (set! P10131@P9609@&irritants-rcd P9609@&irritants-rcd) (set! P10130@P9607@&irritants-rtd P9607@&irritants-rtd) (set! P10129@P9605@condition-irritants P9605@condition-irritants) (set! P10128@P9603@irritants-condition? P9603@irritants-condition?) (set! P10127@P9601@P9584@condition-irritants P9601@P9584@condition-irritants) (set! P10126@P9599@make-irritants-condition P9599@make-irritants-condition) (set! P10125@P9597@p? P9597@p?) (set! P10124@P9594@P9586 P9594@P9586) (set! P10123@P9592@P9587 P9592@P9587) (set! P10122@P9590@P9585 P9590@P9585) (set! P10121@P9583@&assertion-rcd P9583@&assertion-rcd) (set! P10120@P9581@&assertion-rtd P9581@&assertion-rtd) (set! P10119@P9579@assertion-violation? P9579@assertion-violation?) (set! P10118@P9577@make-assertion-violation P9577@make-assertion-violation) (set! P10117@P9575@p? P9575@p?) (set! P10116@P9572@P9564 P9572@P9564) (set! P10115@P9570@P9565 P9570@P9565) (set! P10114@P9568@P9563 P9568@P9563) (set! P10113@P9562@&violation-rcd P9562@&violation-rcd) (set! P10112@P9560@&violation-rtd P9560@&violation-rtd) (set! P10111@P9558@violation? P9558@violation?) (set! P10110@P9556@make-violation P9556@make-violation) (set! P10109@P9554@p? P9554@p?) (set! P10108@P9551@P9543 P9551@P9543) (set! P10107@P9549@P9544 P9549@P9544) (set! P10106@P9547@P9542 P9547@P9542) (set! P10105@P9541@&error-rcd P9541@&error-rcd) (set! P10104@P9539@&error-rtd P9539@&error-rtd) (set! P10103@P9537@error? P9537@error?) (set! P10102@P9535@make-error P9535@make-error) (set! P10101@P9533@p? P9533@p?) (set! P10100@P9530@P9522 P9530@P9522) (set! P10099@P9528@P9523 P9528@P9523) (set! P10098@P9526@P9521 P9526@P9521) (set! P10097@P9520@&serious-rcd P9520@&serious-rcd) (set! P10096@P9518@&serious-rtd P9518@&serious-rtd) (set! P10095@P9516@serious-condition? P9516@serious-condition?) (set! P10094@P9514@make-serious-condition P9514@make-serious-condition) (set! P10093@P9512@p? P9512@p?) (set! P10092@P9509@P9501 P9509@P9501) (set! P10091@P9507@P9502 P9507@P9502) (set! P10090@P9505@P9500 P9505@P9500) (set! P10089@P9499@&warning-rcd P9499@&warning-rcd) (set! P10088@P9497@&warning-rtd P9497@&warning-rtd) (set! P10087@P9495@warning? P9495@warning?) (set! P10086@P9493@make-warning P9493@make-warning) (set! P10085@P9491@p? P9491@p?) (set! P10084@P9488@P9480 P9488@P9480) (set! P10083@P9486@P9481 P9486@P9481) (set! P10082@P9484@P9479 P9484@P9479) (set! P10081@P9478@&message-rcd P9478@&message-rcd) (set! P10080@P9476@&message-rtd P9476@&message-rtd) (set! P10079@P9474@condition-message P9474@condition-message) (set! P10078@P9472@message-condition? P9472@message-condition?) (set! P10077@P9470@P9453@condition-message P9470@P9453@condition-message) (set! P10076@P9468@make-message-condition P9468@make-message-condition) (set! P10075@P9466@p? P9466@p?) (set! P10074@P9463@P9455 P9463@P9455) (set! P10073@P9461@P9456 P9461@P9456) (set! P10072@P9459@P9454 P9459@P9454) (set! P10071@P9387@&condition-rcd P9387@&condition-rcd) (set! P10070@P9385@&condition-rtd P9385@&condition-rtd) (set! P10069@P9383@make-&condition P9383@make-&condition) (set! P10068@P9381@&condition? P9381@&condition?) (set! P10067@P9378@P9370 P9378@P9370) (set! P10066@P9376@P9371 P9376@P9371) (set! P10065@P9374@P9369 P9374@P9369)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (P1243@P1168@current-primitive-locations (lambda (P11320@x) ((lambda (P11322@t) (if P11322@t (cdr P11322@t) '#f)) (assq P11320@x '((&no-nans-rcd . P10305@P10064@&no-nans-rcd) (&no-nans-rtd . P10304@P10062@&no-nans-rtd) (&no-infinities-rcd . P10297@P10043@&no-infinities-rcd) (&no-infinities-rtd . P10296@P10041@&no-infinities-rtd) (&i/o-encoding-rcd . P10289@P10022@&i/o-encoding-rcd) (&i/o-encoding-rtd . P10288@P10020@&i/o-encoding-rtd) (&i/o-decoding-rcd . P10279@P9996@&i/o-decoding-rcd) (&i/o-decoding-rtd . P10278@P9994@&i/o-decoding-rtd) (&i/o-port-rcd . P10271@P9975@&i/o-port-rcd) (&i/o-port-rtd . P10270@P9973@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . P10261@P9949@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . P10260@P9947@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . P10253@P9928@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . P10252@P9926@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . P10245@P9907@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . P10244@P9905@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . P10237@P9886@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . P10236@P9884@&i/o-file-protection-rtd) (&i/o-filename-rcd . P10229@P9865@&i/o-filename-rcd) (&i/o-filename-rtd . P10228@P9863@&i/o-filename-rtd) (&i/o-invalid-position-rcd . P10219@P9839@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . P10218@P9837@&i/o-invalid-position-rtd) (&i/o-write-rcd . P10209@P9813@&i/o-write-rcd) (&i/o-write-rtd . P10208@P9811@&i/o-write-rtd) (&i/o-read-rcd . P10201@P9792@&i/o-read-rcd) (&i/o-read-rtd . P10200@P9790@&i/o-read-rtd) (&i/o-rcd . P10193@P9771@&i/o-rcd) (&i/o-rtd . P10192@P9769@&i/o-rtd) (&undefined-rcd . P10185@P9750@&undefined-rcd) (&undefined-rtd . P10184@P9748@&undefined-rtd) (&syntax-rcd . P10177@P9729@&syntax-rcd) (&syntax-rtd . P10176@P9727@&syntax-rtd) (&lexical-rcd . P10165@P9698@&lexical-rcd) (&lexical-rtd . P10164@P9696@&lexical-rtd) (&implementation-restriction-rcd . P10157@P9677@&implementation-restriction-rcd) (&implementation-restriction-rtd . P10156@P9675@&implementation-restriction-rtd) (&non-continuable-rcd . P10149@P9656@&non-continuable-rcd) (&non-continuable-rtd . P10148@P9654@&non-continuable-rtd) (&who-rcd . P10141@P9635@&who-rcd) (&who-rtd . P10140@P9633@&who-rtd) (&irritants-rcd . P10131@P9609@&irritants-rcd) (&irritants-rtd . P10130@P9607@&irritants-rtd) (&assertion-rcd . P10121@P9583@&assertion-rcd) (&assertion-rtd . P10120@P9581@&assertion-rtd) (&violation-rcd . P10113@P9562@&violation-rcd) (&violation-rtd . P10112@P9560@&violation-rtd) (&error-rcd . P10105@P9541@&error-rcd) (&error-rtd . P10104@P9539@&error-rtd) (&serious-rcd . P10097@P9520@&serious-rcd) (&serious-rtd . P10096@P9518@&serious-rtd) (&warning-rcd . P10089@P9499@&warning-rcd) (&warning-rtd . P10088@P9497@&warning-rtd) (&message-rcd . P10081@P9478@&message-rcd) (&message-rtd . P10080@P9476@&message-rtd) (&condition-rcd . P10071@P9387@&condition-rcd) (&condition-rtd . P10070@P9385@&condition-rtd) (syntax-error . P9355@P2990@syntax-error) (syntax-dispatch . P9248@P2761@syntax-dispatch) (gensym . P1148@P912@gensym) (load . P10570@P10333@load) (interaction-environment . P9363@P3006@interaction-environment) (library-path . P1772@P1409@library-path) (make-parameter . P1162@P940@make-parameter) (make-variable-transformer . P9182@P2320@make-variable-transformer) (identifier? . P9358@P2996@identifier?) (generate-temporaries . P9348@P2976@generate-temporaries) (free-identifier=? . P9349@P2978@free-identifier=?) (syntax->datum . P9360@P3000@syntax->datum) (datum->syntax . P9359@P2998@datum->syntax) (bound-identifier=? . P9350@P2980@bound-identifier=?) (make-i/o-write-error . P10206@P9807@make-i/o-write-error) (make-i/o-read-error . P10198@P9786@make-i/o-read-error) (make-i/o-port-error . P10266@P9965@make-i/o-port-error) (make-i/o-invalid-position-error . P10214@P9829@make-i/o-invalid-position-error) (make-i/o-filename-error . P10224@P9855@make-i/o-filename-error) (make-i/o-file-protection-error . P10234@P9880@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . P10242@P9901@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . P10258@P9943@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . P10250@P9922@make-i/o-file-already-exists-error) (make-i/o-error . P10190@P9765@make-i/o-error) (make-i/o-encoding-error . P10284@P10012@make-i/o-encoding-error) (make-i/o-decoding-error . P10276@P9990@make-i/o-decoding-error) (i/o-write-error? . P10207@P9809@i/o-write-error?) (i/o-read-error? . P10199@P9788@i/o-read-error?) (i/o-port-error? . P10268@P9969@i/o-port-error?) (i/o-invalid-position-error? . P10216@P9833@i/o-invalid-position-error?) (i/o-filename-error? . P10226@P9859@i/o-filename-error?) (i/o-file-protection-error? . P10235@P9882@i/o-file-protection-error?) (i/o-file-is-read-only-error? . P10243@P9903@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . P10259@P9945@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . P10251@P9924@i/o-file-already-exists-error?) (i/o-error? . P10191@P9767@i/o-error?) (i/o-error-position . P10217@P9835@i/o-error-position) (i/o-error-port . P10269@P9971@i/o-error-port) (i/o-error-filename . P10227@P9861@i/o-error-filename) (i/o-encoding-error? . P10286@P10016@i/o-encoding-error?) (i/o-encoding-error-char . P10287@P10018@i/o-encoding-error-char) (i/o-decoding-error? . P10277@P9992@i/o-decoding-error?) (scheme-report-environment . P9339@P2958@scheme-report-environment) (null-environment . P9338@P2956@null-environment) (command-line . P10567@P10327@command-line) (eval . P9341@P2962@eval) (environment . P9337@P2954@environment) (who-condition? . P10138@P9629@who-condition?) (warning? . P10087@P9495@warning?) (violation? . P10111@P9558@violation?) (undefined-violation? . P10183@P9746@undefined-violation?) (syntax-violation? . P10173@P9721@syntax-violation?) (syntax-violation-subform . P10175@P9725@syntax-violation-subform) (syntax-violation-form . P10174@P9723@syntax-violation-form) (syntax-violation . P9357@P2994@syntax-violation) (serious-condition? . P10095@P9516@serious-condition?) (non-continuable-violation? . P10147@P9652@non-continuable-violation?) (message-condition? . P10078@P9472@message-condition?) (make-who-condition . P10136@P9625@make-who-condition) (make-warning . P10086@P9493@make-warning) (make-violation . P10110@P9556@make-violation) (make-undefined-violation . P10182@P9744@make-undefined-violation) (make-syntax-violation . P10170@P9715@make-syntax-violation) (make-serious-condition . P10094@P9514@make-serious-condition) (make-non-continuable-violation . P10146@P9650@make-non-continuable-violation) (make-message-condition . P10076@P9468@make-message-condition) (make-lexical-violation . P10162@P9692@make-lexical-violation) (make-irritants-condition . P10126@P9599@make-irritants-condition) (make-implementation-restriction-violation . P10154@P9671@make-implementation-restriction-violation) (make-error . P10102@P9535@make-error) (make-assertion-violation . P10118@P9577@make-assertion-violation) (lexical-violation? . P10163@P9694@lexical-violation?) (irritants-condition? . P10128@P9603@irritants-condition?) (implementation-restriction-violation? . P10155@P9673@implementation-restriction-violation?) (error? . P10103@P9537@error?) (condition-who . P10139@P9631@condition-who) (condition-message . P10079@P9474@condition-message) (condition-irritants . P10129@P9605@condition-irritants) (assertion-violation? . P10119@P9579@assertion-violation?) (no-nans-violation? . P10303@P10060@no-nans-violation?) (no-infinities-violation? . P10295@P10039@no-infinities-violation?) (make-no-nans-violation . P10302@P10058@make-no-nans-violation) (make-no-infinities-violation . P10294@P10037@make-no-infinities-violation)))))) (P1788@P1441@install-library 'P11285 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . P11275) (format . P11272) (string-split . P11261) (call-process . P11255) (set-current-directory! . P11251) (expand-path . P11250) (current-directory . P11249) (%spawn . P11248) (%waitpid . P11247) (%ffi-supported? . P11246) (%ffi-pointer-ref . P11245) (%ffi-pointer->string . P11244) (%ffi-call->string-or-zero . P11243) (%ffi-call->double . P11242) (%ffi-call->void* . P11241) (%ffi-call->void . P11240) (%ffi-call->int . P11239) (%ffi-lookup . P11238) (%ffi-open . P11237) (%fork . P11236) (%pipe . P11235) (p . P11234) (string-upcase . P11216) (string-titlecase . P11215) (string-normalize-nfkd . P11214) (string-normalize-nfkc . P11213) (string-normalize-nfd . P11212) (string-normalize-nfc . P11211) (string-foldcase . P11210) (string-downcase . P11209) (string-ci>? . P11208) (string-ci>=? . P11207) (string-ci=? . P11206) (string-ci<? . P11205) (string-ci<=? . P11204) (char-whitespace? . P11203) (char-upper-case? . P11202) (char-title-case? . P11201) (char-numeric? . P11200) (char-lower-case? . P11199) (char-general-category . P11198) (char-upcase . P11197) (char-titlecase . P11196) (char-foldcase . P11195) (char-downcase . P11194) (char-ci>? . P11193) (char-ci>=? . P11192) (char-ci=? . P11191) (char-ci<? . P11190) (char-ci<=? . P11189) (char-alphabetic? . P11188) (make-variable-transformer . P2319) (identifier? . P2995) (generate-temporaries . P2975) (free-identifier=? . P2977) (syntax->datum . P2999) (datum->syntax . P2997) (bound-identifier=? . P2979) (record-type-descriptor? . P11187) (record-predicate . P11186) (record-mutator . P11185) (record-constructor . P11184) (record-accessor . P11183) (make-record-type-descriptor . P11182) (make-record-constructor-descriptor . P11181) (record? . P11180) (record-type-uid . P11179) (record-type-sealed? . P11178) (record-type-parent . P11177) (record-type-opaque? . P11176) (record-type-name . P11175) (record-type-generative? . P11174) (record-type-field-names . P11173) (record-rtd . P11172) (record-field-mutable? . P11171) (delete-file . P11170) (file-exists? . P11169) (vector-sort! . P11168) (vector-sort . P11167) (list-sort . P11166) (symbol-hash . P11165) (string-ci-hash . P11164) (string-hash . P11163) (equal-hash . P11162) (hashtable-equivalence-function . P11161) (make-hashtable . P11160) (hashtable-hash-function . P11159) (make-eqv-hashtable . P11158) (make-eq-hashtable . P11157) (hashtable? . P11156) (hashtable-update! . P11155) (hashtable-size . P11154) (hashtable-set! . P11153) (hashtable-ref . P11152) (hashtable-mutable? . P11151) (hashtable-keys . P11150) (hashtable-entries . P11149) (hashtable-delete! . P11148) (hashtable-copy . P11147) (hashtable-contains? . P11146) (hashtable-clear! . P11145) (call-with-output-file . P11144) (call-with-input-file . P11143) (write-char . P11142) (write . P11141) (with-output-to-file . P11140) (with-input-from-file . P11139) (read-char . P11138) (read . P11137) (peek-char . P11136) (open-output-file . P11135) (open-input-file . P11134) (newline . P11133) (display . P11132) (close-output-port . P11131) (close-input-port . P11130) (eof-object? . P11129) (eof-object . P11128) (current-error-port . P11127) (current-output-port . P11126) (current-input-port . P11125) (output-port? . P11124) (input-port? . P11123) (utf-8-codec . P11122) (utf-16-codec . P11121) (transcoder-error-handling-mode . P11120) (transcoder-eol-style . P11119) (transcoder-codec . P11118) (transcoded-port . P11117) (textual-port? . P11116) (string->bytevector . P11115) (standard-output-port . P11114) (standard-input-port . P11113) (standard-error-port . P11112) (set-port-position! . P11111) (put-u8 . P11110) (put-string . P11109) (put-datum . P11108) (put-char . P11107) (put-bytevector . P11106) (port? . P11105) (port-transcoder . P11104) (port-position . P11103) (port-has-set-port-position!? . P11102) (port-has-port-position? . P11101) (port-eof? . P11100) (output-port-buffer-mode . P11099) (open-string-output-port . P11098) (open-string-input-port . P11097) (open-file-output-port . P11096) (open-file-input/output-port . P11095) (open-file-input-port . P11094) (open-bytevector-output-port . P11093) (open-bytevector-input-port . P11092) (native-transcoder . P11091) (native-eol-style . P11090) (make-transcoder . P11089) (latin-1-codec . P11088) (make-i/o-write-error . P9806) (make-i/o-read-error . P9785) (make-i/o-port-error . P9964) (make-i/o-invalid-position-error . P9828) (make-i/o-filename-error . P9854) (make-i/o-file-protection-error . P9879) (make-i/o-file-is-read-only-error . P9900) (make-i/o-file-does-not-exist-error . P9942) (make-i/o-file-already-exists-error . P9921) (make-i/o-error . P9764) (make-i/o-encoding-error . P10011) (make-i/o-decoding-error . P9989) (make-custom-textual-output-port . P11087) (make-custom-textual-input/output-port . P11086) (make-custom-textual-input-port . P11085) (make-custom-binary-output-port . P11084) (make-custom-binary-input/output-port . P11083) (make-custom-binary-input-port . P11082) (make-bytevector . P11081) (lookahead-u8 . P11080) (lookahead-char . P11079) (i/o-write-error? . P9808) (i/o-read-error? . P9787) (i/o-port-error? . P9968) (i/o-invalid-position-error? . P9832) (i/o-filename-error? . P9858) (i/o-file-protection-error? . P9881) (i/o-file-is-read-only-error? . P9902) (i/o-file-does-not-exist-error? . P9944) (i/o-file-already-exists-error? . P9923) (i/o-error? . P9766) (i/o-error-position . P9834) (i/o-error-port . P9970) (i/o-error-filename . P9860) (i/o-encoding-error? . P10015) (i/o-encoding-error-char . P10017) (i/o-decoding-error? . P9991) (get-u8 . P11078) (get-string-n! . P11077) (get-string-n . P11076) (get-string-all . P11075) (get-line . P11074) (get-datum . P11073) (get-char . P11072) (get-bytevector-some . P11071) (get-bytevector-n! . P11070) (get-bytevector-n . P11069) (get-bytevector-all . P11068) (flush-output-port . P11067) (close-port . P11066) (exit . P11058) (command-line . P10326) (string-fill! . P11057) (string-set! . P11056) (set-cdr! . P11055) (set-car! . P11054) (remove . P11053) (remv . P11052) (remp . P11051) (remq . P11050) (partition . P11049) (memv . P11048) (memq . P11047) (memp . P11046) (member . P11045) (exists . P11044) (for-all . P11043) (fold-right . P11042) (fold-left . P11041) (find . P11040) (filter . P11039) (cons* . P11038) (assv . P11037) (assq . P11036) (assp . P11035) (assoc . P11034) (call-with-string-output-port . P11033) (call-with-port . P11032) (call-with-bytevector-output-port . P11031) (bytevector->string . P11030) (buffer-mode? . P11029) (binary-port? . P11028) (with-exception-handler . P11027) (raise-continuable . P11026) (raise . P11025) (eval . P2961) (environment . P2953) (make-enumeration . P11024) (enum-set=? . P11023) (enum-set-universe . P11022) (enum-set-union . P11021) (enum-set-subset? . P11020) (enum-set-projection . P11019) (enum-set-member? . P11018) (enum-set-intersection . P11017) (enum-set-indexer . P11016) (enum-set-difference . P11015) (enum-set-constructor . P11014) (enum-set-complement . P11013) (enum-set->list . P11012) (who-condition? . P9628) (warning? . P9494) (violation? . P9557) (undefined-violation? . P9745) (syntax-violation? . P9720) (syntax-violation-subform . P9724) (syntax-violation-form . P9722) (syntax-violation . P2993) (simple-conditions . P11011) (serious-condition? . P9515) (non-continuable-violation? . P9651) (message-condition? . P9471) (make-who-condition . P9624) (make-warning . P9492) (make-violation . P9555) (make-undefined-violation . P9743) (make-syntax-violation . P9714) (make-serious-condition . P9513) (make-non-continuable-violation . P9649) (make-message-condition . P9467) (make-lexical-violation . P9691) (make-irritants-condition . P9598) (make-implementation-restriction-violation . P9670) (make-error . P9534) (make-assertion-violation . P9576) (lexical-violation? . P9693) (irritants-condition? . P9602) (implementation-restriction-violation? . P9672) (error? . P9536) (condition-who . P9630) (condition-predicate . P11010) (condition-message . P9473) (condition-irritants . P9604) (condition-accessor . P11009) (condition . P11008) (assertion-violation? . P9578) (condition? . P11007) (utf32->string . P11006) (utf16->string . P11005) (utf8->string . P11004) (uint-list->bytevector . P11003) (u8-list->bytevector . P11002) (string->utf8 . P11001) (string->utf32 . P11000) (string->utf16 . P10999) (sint-list->bytevector . P10998) (native-endianness . P10997) (bytevector? . P10996) (bytevector=? . P10995) (bytevector-uint-set! . P10994) (bytevector-uint-ref . P10993) (bytevector-u8-set! . P10992) (bytevector-u8-ref . P10991) (bytevector-u64-set! . P10990) (bytevector-u64-ref . P10989) (bytevector-u64-native-set! . P10988) (bytevector-u64-native-ref . P10987) (bytevector-u32-set! . P10986) (bytevector-u32-ref . P10985) (bytevector-u32-native-set! . P10984) (bytevector-u32-native-ref . P10983) (bytevector-u16-set! . P10982) (bytevector-u16-ref . P10981) (bytevector-u16-native-set! . P10980) (bytevector-u16-native-ref . P10979) (bytevector-sint-set! . P10978) (bytevector-sint-ref . P10977) (bytevector-s8-set! . P10976) (bytevector-s8-ref . P10975) (bytevector-s64-set! . P10974) (bytevector-s64-ref . P10973) (bytevector-s64-native-set! . P10972) (bytevector-s64-native-ref . P10971) (bytevector-s32-set! . P10970) (bytevector-s32-ref . P10969) (bytevector-s32-native-set! . P10968) (bytevector-s32-native-ref . P10967) (bytevector-s16-set! . P10966) (bytevector-s16-ref . P10965) (bytevector-s16-native-set! . P10964) (bytevector-s16-native-ref . P10963) (bytevector-length . P10962) (bytevector-ieee-single-ref . P10961) (bytevector-ieee-single-set! . P10960) (bytevector-ieee-single-native-set! . P10959) (bytevector-ieee-single-native-ref . P10958) (bytevector-ieee-double-set! . P10957) (bytevector-ieee-double-ref . P10956) (bytevector-ieee-double-native-set! . P10955) (bytevector-ieee-double-native-ref . P10954) (bytevector-fill! . P10953) (bytevector-copy! . P10952) (bytevector-copy . P10951) (bytevector->uint-list . P10950) (bytevector->u8-list . P10949) (bytevector->sint-list . P10948) (no-nans-violation? . P10059) (no-infinities-violation? . P10038) (make-no-nans-violation . P10057) (make-no-infinities-violation . P10036) (real->flonum . P10947) (flzero? . P10946) (fltruncate . P10945) (fltan . P10944) (flsqrt . P10943) (flsin . P10942) (flround . P10941) (flpositive? . P10940) (flonum? . P10939) (flodd? . P10938) (flnumerator . P10937) (flnegative? . P10936) (flnan? . P10935) (flmod0 . P10934) (flmod . P10933) (flmin . P10932) (flmax . P10931) (fllog . P10930) (flinteger? . P10929) (flinfinite? . P10928) (flfloor . P10927) (flfinite? . P10926) (flexpt . P10925) (flexp . P10924) (fleven? . P10923) (fldiv0-and-mod0 . P10922) (fldiv0 . P10921) (fldiv-and-mod . P10920) (fldiv . P10919) (fldenominator . P10918) (flcos . P10917) (flceiling . P10916) (flatan . P10915) (flasin . P10914) (flacos . P10913) (flabs . P10912) (fl>? . P10911) (fl>=? . P10910) (fl=? . P10909) (fl<? . P10908) (fl<=? . P10907) (fl/ . P10906) (fl- . P10905) (fl+ . P10904) (fl* . P10903) (fixnum->flonum . P10902) (fxzero? . P10901) (fxxor . P10900) (fxrotate-bit-field . P10899) (fxreverse-bit-field . P10898) (fxpositive? . P10897) (fxodd? . P10896) (fxnot . P10895) (fxnegative? . P10894) (fxmod0 . P10893) (fxmod . P10892) (fxmin . P10891) (fxmax . P10890) (fxlength . P10889) (fxior . P10888) (fxif . P10887) (fxfirst-bit-set . P10886) (fxeven? . P10885) (fxdiv0-and-mod0 . P10884) (fxdiv0 . P10883) (fxdiv-and-mod . P10882) (fxdiv . P10881) (fxcopy-bit-field . P10880) (fxcopy-bit . P10879) (fxbit-set? . P10878) (fxbit-field . P10877) (fxbit-count . P10876) (fxarithmetic-shift-right . P10875) (fxarithmetic-shift-left . P10874) (fxarithmetic-shift . P10873) (fxand . P10872) (fx>? . P10871) (fx>=? . P10870) (fx=? . P10869) (fx<? . P10868) (fx<=? . P10867) (fx-/carry . P10866) (fx- . P10865) (fx+/carry . P10864) (fx+ . P10863) (fx*/carry . P10862) (fx* . P10861) (greatest-fixnum . P10860) (least-fixnum . P10859) (fixnum-width . P10858) (fixnum? . P10857) (bitwise-rotate-bit-field . P10856) (bitwise-reverse-bit-field . P10855) (bitwise-length . P10854) (bitwise-if . P10853) (bitwise-first-bit-set . P10852) (bitwise-copy-bit-field . P10851) (bitwise-copy-bit . P10850) (bitwise-bit-set? . P10849) (bitwise-bit-field . P10848) (bitwise-bit-count . P10847) (bitwise-xor . P10846) (bitwise-ior . P10845) (bitwise-and . P10844) (bitwise-not . P10843) (bitwise-arithmetic-shift-right . P10842) (bitwise-arithmetic-shift-left . P10841) (bitwise-arithmetic-shift . P10840) (zero? . P10839) (vector? . P10838) (vector-set! . P10837) (vector-ref . P10836) (vector-map . P10835) (vector-length . P10834) (vector-for-each . P10833) (vector-fill! . P10832) (vector->list . P10831) (vector . P10830) (values . P10829) (truncate . P10828) (tan . P10827) (symbol? . P10826) (symbol=? . P10825) (symbol->string . P10824) (substring . P10823) (string? . P10822) (string>? . P10821) (string>=? . P10820) (string=? . P10819) (string<? . P10818) (string<=? . P10817) (string-ref . P10816) (string-length . P10815) (string-for-each . P10814) (string-copy . P10813) (string-append . P10812) (string->symbol . P10811) (string->number . P10810) (string->list . P10809) (string . P10808) (sqrt . P10807) (sin . P10806) (round . P10805) (reverse . P10804) (real? . P10803) (real-valued? . P10802) (real-part . P10801) (rationalize . P10800) (rational? . P10799) (rational-valued? . P10798) (procedure? . P10797) (positive? . P10796) (pair? . P10795) (odd? . P10794) (numerator . P10793) (number? . P10792) (number->string . P10791) (null? . P10790) (not . P10789) (negative? . P10788) (nan? . P10787) (min . P10786) (max . P10785) (map . P10784) (make-vector . P10783) (make-string . P10782) (make-rectangular . P10781) (make-polar . P10780) (magnitude . P10779) (log . P10778) (list? . P10777) (list-tail . P10776) (list-ref . P10775) (list->vector . P10774) (list->string . P10773) (list . P10772) (length . P10771) (lcm . P10770) (integer? . P10769) (integer-valued? . P10768) (integer->char . P10767) (infinite? . P10766) (inexact? . P10765) (inexact . P10764) (imag-part . P10763) (gcd . P10762) (for-each . P10761) (floor . P10760) (finite? . P10759) (expt . P10758) (exp . P10757) (exact? . P10756) (exact-integer-sqrt . P10755) (exact . P10754) (even? . P10753) (error . P10752) (eqv? . P10751) (equal? . P10750) (eq? . P10749) (dynamic-wind . P10748) (div0-and-mod0 . P10747) (mod0 . P10746) (div0 . P10745) (div-and-mod . P10744) (mod . P10743) (div . P10742) (denominator . P10741) (cos . P10740) (cons . P10739) (complex? . P10738) (char? . P10737) (char>? . P10736) (char>=? . P10735) (char=? . P10734) (char<? . P10733) (char<=? . P10732) (char->integer . P10731) (ceiling . P10730) (call-with-values . P10729) (call/cc . P10728) (call-with-current-continuation . P10727) (cddddr . P10726) (cdddar . P10725) (cddadr . P10724) (cddaar . P10723) (cdaddr . P10722) (cdadar . P10721) (cdaadr . P10720) (cdaaar . P10719) (cadddr . P10718) (caddar . P10717) (cadadr . P10716) (cadaar . P10715) (caaddr . P10714) (caadar . P10713) (caaadr . P10712) (caaaar . P10711) (cdddr . P10710) (cddar . P10709) (cdadr . P10708) (cdaar . P10707) (caddr . P10706) (cadar . P10705) (caadr . P10704) (caaar . P10703) (cddr . P10702) (cdar . P10701) (cadr . P10700) (caar . P10699) (cdr . P10698) (car . P10697) (boolean? . P10696) (boolean=? . P10695) (atan . P10694) (assertion-violation . P10693) (asin . P10692) (apply . P10691) (append . P10690) (angle . P10689) (acos . P10688) (abs . P10687) (/ . P10686) (* . P10685) (- . P10684) (+ . P10683) (>= . P10682) (> . P10681) (= . P10680) (<= . P10679) (< . P10678) (library . P10677) (&no-nans . P10676) (&no-infinities . P10675) (&i/o-encoding . P10674) (&i/o-decoding . P10673) (&i/o-port . P10672) (&i/o-file-does-not-exist . P10671) (&i/o-file-already-exists . P10670) (&i/o-file-is-read-only . P10669) (&i/o-file-protection . P10668) (&i/o-filename . P10667) (&i/o-invalid-position . P10666) (&i/o-write . P10665) (&i/o-read . P10664) (&i/o . P10663) (&undefined . P10662) (&syntax . P10661) (&lexical . P10660) (&implementation-restriction . P10659) (&non-continuable . P10658) (&who . P10657) (&irritants . P10656) (&assertion . P10655) (&violation . P10654) (&error . P10653) (&serious . P10652) (&warning . P10651) (&message . P10650) (&condition . P10649) (define-condition-type . P10648) (define-enumeration . P10647) (define-record-type . P10646) (parent-rtd . P10645) (nongenerative . P10644) (opaque . P10643) (sealed . P10642) (protocol . P10641) (parent . P10640) (immutable . P10639) (mutable . P10638) (fields . P10637) (error-handling-mode . P10636) (file-options . P10635) (buffer-mode . P10634) (eol-style . P10633) (guard . P10632) (unsyntax-splicing . P10629) (unsyntax . P10628) (unquote-splicing . P10627) (unquote . P10626) (_ . P10625) (else . P10624) (=> . P10623) (... . P10622) (assert . P10621) (endianness . P10620) (do . P10617) (cond . P10616) (let* . P10615) (let . P10614) (let*-values . P10613) (let-values . P10612) (identifier-syntax . P10611) (with-syntax . P10610) (quasisyntax . P10609) (quasiquote . P10608) (syntax-rules . P10607) (include . P10606) (record-constructor-descriptor . P10604) (record-type-descriptor . P10603) (case . P10602) (unless . P10600) (when . P10599) (or . P10598) (and . P10597) (if . P10596) (letrec* . P10595) (letrec . P10594) (case-lambda . P10592) (lambda . P10591) (syntax . P10590) (syntax-case . P10589) (quote . P10588) (letrec-syntax . P10586) (let-syntax . P10585) (set! . P10584) (import . P10583) (begin . P10582) (define-syntax . P10580) (define . P10579)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11286 '(psyntax null-environment-5) '() '() '() '() '((make-promise . P11059) (unquote-splicing . P10627) (unquote . P10626) (_ . P10625) (else . P10624) (=> . P10623) (... . P10622) (delay . P10619) (do . P10617) (cond . P10616) (let* . P10615) (let . P10614) (quasiquote . P10608) (syntax-rules . P10607) (case . P10602) (or . P10598) (and . P10597) (if . P10596) (letrec . P10594) (lambda . P10591) (quote . P10588) (letrec-syntax . P10586) (let-syntax . P10585) (set! . P10584) (begin . P10582) (define-syntax . P10580) (define . P10579)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11287 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . P11208) (string-ci>=? . P11207) (string-ci=? . P11206) (string-ci<? . P11205) (string-ci<=? . P11204) (char-whitespace? . P11203) (char-upper-case? . P11202) (char-numeric? . P11200) (char-lower-case? . P11199) (char-upcase . P11197) (char-downcase . P11194) (char-ci>? . P11193) (char-ci>=? . P11192) (char-ci=? . P11191) (char-ci<? . P11190) (char-ci<=? . P11189) (char-alphabetic? . P11188) (call-with-output-file . P11144) (call-with-input-file . P11143) (write-char . P11142) (write . P11141) (with-output-to-file . P11140) (with-input-from-file . P11139) (read-char . P11138) (read . P11137) (peek-char . P11136) (open-output-file . P11135) (open-input-file . P11134) (newline . P11133) (display . P11132) (close-output-port . P11131) (close-input-port . P11130) (eof-object . P11128) (current-output-port . P11126) (current-input-port . P11125) (output-port? . P11124) (input-port? . P11123) (scheme-report-environment . P2957) (quotient . P11065) (null-environment . P2955) (remainder . P11064) (modulo . P11063) (inexact->exact . P11062) (force . P11061) (exact->inexact . P11060) (make-promise . P11059) (string-fill! . P11057) (string-set! . P11056) (set-cdr! . P11055) (set-car! . P11054) (memv . P11048) (memq . P11047) (member . P11045) (assv . P11037) (assq . P11036) (assoc . P11034) (eval . P2961) (zero? . P10839) (vector? . P10838) (vector-set! . P10837) (vector-ref . P10836) (vector-length . P10834) (vector-fill! . P10832) (vector->list . P10831) (vector . P10830) (values . P10829) (truncate . P10828) (tan . P10827) (symbol? . P10826) (symbol->string . P10824) (substring . P10823) (string? . P10822) (string>? . P10821) (string>=? . P10820) (string=? . P10819) (string<? . P10818) (string<=? . P10817) (string-ref . P10816) (string-length . P10815) (string-copy . P10813) (string-append . P10812) (string->symbol . P10811) (string->number . P10810) (string->list . P10809) (string . P10808) (sqrt . P10807) (sin . P10806) (round . P10805) (reverse . P10804) (real? . P10803) (real-part . P10801) (rationalize . P10800) (rational? . P10799) (procedure? . P10797) (positive? . P10796) (pair? . P10795) (odd? . P10794) (numerator . P10793) (number? . P10792) (number->string . P10791) (not . P10789) (negative? . P10788) (min . P10786) (max . P10785) (map . P10784) (make-vector . P10783) (make-string . P10782) (make-rectangular . P10781) (make-polar . P10780) (magnitude . P10779) (log . P10778) (list? . P10777) (list-tail . P10776) (list-ref . P10775) (list->vector . P10774) (list->string . P10773) (list . P10772) (length . P10771) (lcm . P10770) (integer? . P10769) (integer->char . P10767) (inexact? . P10765) (imag-part . P10763) (gcd . P10762) (for-each . P10761) (floor . P10760) (expt . P10758) (exp . P10757) (exact? . P10756) (even? . P10753) (eqv? . P10751) (equal? . P10750) (eq? . P10749) (dynamic-wind . P10748) (denominator . P10741) (cos . P10740) (cons . P10739) (complex? . P10738) (char? . P10737) (char>? . P10736) (char>=? . P10735) (char=? . P10734) (char<? . P10733) (char<=? . P10732) (char->integer . P10731) (ceiling . P10730) (call-with-values . P10729) (call-with-current-continuation . P10727) (cddddr . P10726) (cdddar . P10725) (cddadr . P10724) (cddaar . P10723) (cdaddr . P10722) (cdadar . P10721) (cdaadr . P10720) (cdaaar . P10719) (cadddr . P10718) (caddar . P10717) (cadadr . P10716) (cadaar . P10715) (caaddr . P10714) (caadar . P10713) (caaadr . P10712) (caaaar . P10711) (cdddr . P10710) (cddar . P10709) (cdadr . P10708) (cdaar . P10707) (caddr . P10706) (cadar . P10705) (caadr . P10704) (caaar . P10703) (cddr . P10702) (cdar . P10701) (cadr . P10700) (caar . P10699) (cdr . P10698) (car . P10697) (boolean? . P10696) (atan . P10694) (asin . P10692) (apply . P10691) (append . P10690) (angle . P10689) (acos . P10688) (abs . P10687) (/ . P10686) (* . P10685) (- . P10684) (+ . P10683) (>= . P10682) (> . P10681) (= . P10680) (<= . P10679) (< . P10678) (unquote-splicing . P10627) (unquote . P10626) (else . P10624) (=> . P10623) (... . P10622) (delay . P10619) (do . P10617) (cond . P10616) (let* . P10615) (let . P10614) (quasiquote . P10608) (syntax-rules . P10607) (case . P10602) (or . P10598) (and . P10597) (if . P10596) (letrec . P10594) (lambda . P10591) (quote . P10588) (letrec-syntax . P10586) (let-syntax . P10585) (set! . P10584) (begin . P10582) (define-syntax . P10580) (define . P10579)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11288 '(psyntax modules) '() '() '() '() '((module . P10581)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11289 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11290 '(rnrs) '(6) '() '() '() '((regexp? . P11278) (string-upcase . P11216) (string-titlecase . P11215) (string-normalize-nfkd . P11214) (string-normalize-nfkc . P11213) (string-normalize-nfd . P11212) (string-normalize-nfc . P11211) (string-foldcase . P11210) (string-downcase . P11209) (string-ci>? . P11208) (string-ci>=? . P11207) (string-ci=? . P11206) (string-ci<? . P11205) (string-ci<=? . P11204) (char-whitespace? . P11203) (char-upper-case? . P11202) (char-title-case? . P11201) (char-numeric? . P11200) (char-lower-case? . P11199) (char-general-category . P11198) (char-upcase . P11197) (char-titlecase . P11196) (char-foldcase . P11195) (char-downcase . P11194) (char-ci>? . P11193) (char-ci>=? . P11192) (char-ci=? . P11191) (char-ci<? . P11190) (char-ci<=? . P11189) (char-alphabetic? . P11188) (make-variable-transformer . P2319) (identifier? . P2995) (generate-temporaries . P2975) (free-identifier=? . P2977) (syntax->datum . P2999) (datum->syntax . P2997) (bound-identifier=? . P2979) (record-type-descriptor? . P11187) (record-predicate . P11186) (record-mutator . P11185) (record-constructor . P11184) (record-accessor . P11183) (make-record-type-descriptor . P11182) (make-record-constructor-descriptor . P11181) (record? . P11180) (record-type-uid . P11179) (record-type-sealed? . P11178) (record-type-parent . P11177) (record-type-opaque? . P11176) (record-type-name . P11175) (record-type-generative? . P11174) (record-type-field-names . P11173) (record-rtd . P11172) (record-field-mutable? . P11171) (delete-file . P11170) (file-exists? . P11169) (vector-sort! . P11168) (vector-sort . P11167) (list-sort . P11166) (symbol-hash . P11165) (string-ci-hash . P11164) (string-hash . P11163) (equal-hash . P11162) (hashtable-equivalence-function . P11161) (make-hashtable . P11160) (hashtable-hash-function . P11159) (make-eqv-hashtable . P11158) (make-eq-hashtable . P11157) (hashtable? . P11156) (hashtable-update! . P11155) (hashtable-size . P11154) (hashtable-set! . P11153) (hashtable-ref . P11152) (hashtable-mutable? . P11151) (hashtable-keys . P11150) (hashtable-entries . P11149) (hashtable-delete! . P11148) (hashtable-copy . P11147) (hashtable-contains? . P11146) (hashtable-clear! . P11145) (call-with-output-file . P11144) (call-with-input-file . P11143) (write-char . P11142) (write . P11141) (with-output-to-file . P11140) (with-input-from-file . P11139) (read-char . P11138) (read . P11137) (peek-char . P11136) (open-output-file . P11135) (open-input-file . P11134) (newline . P11133) (display . P11132) (close-output-port . P11131) (close-input-port . P11130) (eof-object? . P11129) (eof-object . P11128) (current-error-port . P11127) (current-output-port . P11126) (current-input-port . P11125) (output-port? . P11124) (input-port? . P11123) (utf-8-codec . P11122) (utf-16-codec . P11121) (transcoder-error-handling-mode . P11120) (transcoder-eol-style . P11119) (transcoder-codec . P11118) (transcoded-port . P11117) (textual-port? . P11116) (string->bytevector . P11115) (standard-output-port . P11114) (standard-input-port . P11113) (standard-error-port . P11112) (set-port-position! . P11111) (put-u8 . P11110) (put-string . P11109) (put-datum . P11108) (put-char . P11107) (put-bytevector . P11106) (port? . P11105) (port-transcoder . P11104) (port-position . P11103) (port-has-set-port-position!? . P11102) (port-has-port-position? . P11101) (port-eof? . P11100) (output-port-buffer-mode . P11099) (open-string-output-port . P11098) (open-string-input-port . P11097) (open-file-output-port . P11096) (open-file-input/output-port . P11095) (open-file-input-port . P11094) (open-bytevector-output-port . P11093) (open-bytevector-input-port . P11092) (native-transcoder . P11091) (native-eol-style . P11090) (make-transcoder . P11089) (latin-1-codec . P11088) (make-i/o-write-error . P9806) (make-i/o-read-error . P9785) (make-i/o-port-error . P9964) (make-i/o-invalid-position-error . P9828) (make-i/o-filename-error . P9854) (make-i/o-file-protection-error . P9879) (make-i/o-file-is-read-only-error . P9900) (make-i/o-file-does-not-exist-error . P9942) (make-i/o-file-already-exists-error . P9921) (make-i/o-error . P9764) (make-i/o-encoding-error . P10011) (make-i/o-decoding-error . P9989) (make-custom-textual-output-port . P11087) (make-custom-textual-input/output-port . P11086) (make-custom-textual-input-port . P11085) (make-custom-binary-output-port . P11084) (make-custom-binary-input/output-port . P11083) (make-custom-binary-input-port . P11082) (make-bytevector . P11081) (lookahead-u8 . P11080) (lookahead-char . P11079) (i/o-write-error? . P9808) (i/o-read-error? . P9787) (i/o-port-error? . P9968) (i/o-invalid-position-error? . P9832) (i/o-filename-error? . P9858) (i/o-file-protection-error? . P9881) (i/o-file-is-read-only-error? . P9902) (i/o-file-does-not-exist-error? . P9944) (i/o-file-already-exists-error? . P9923) (i/o-error? . P9766) (i/o-error-position . P9834) (i/o-error-port . P9970) (i/o-error-filename . P9860) (i/o-encoding-error? . P10015) (i/o-encoding-error-char . P10017) (i/o-decoding-error? . P9991) (get-u8 . P11078) (get-string-n! . P11077) (get-string-n . P11076) (get-string-all . P11075) (get-line . P11074) (get-datum . P11073) (get-char . P11072) (get-bytevector-some . P11071) (get-bytevector-n! . P11070) (get-bytevector-n . P11069) (get-bytevector-all . P11068) (flush-output-port . P11067) (close-port . P11066) (exit . P11058) (command-line . P10326) (remove . P11053) (remv . P11052) (remp . P11051) (remq . P11050) (partition . P11049) (memv . P11048) (memq . P11047) (memp . P11046) (member . P11045) (exists . P11044) (for-all . P11043) (fold-right . P11042) (fold-left . P11041) (find . P11040) (filter . P11039) (cons* . P11038) (assv . P11037) (assq . P11036) (assp . P11035) (assoc . P11034) (call-with-string-output-port . P11033) (call-with-port . P11032) (call-with-bytevector-output-port . P11031) (bytevector->string . P11030) (buffer-mode? . P11029) (binary-port? . P11028) (with-exception-handler . P11027) (raise-continuable . P11026) (raise . P11025) (make-enumeration . P11024) (enum-set=? . P11023) (enum-set-universe . P11022) (enum-set-union . P11021) (enum-set-subset? . P11020) (enum-set-projection . P11019) (enum-set-member? . P11018) (enum-set-intersection . P11017) (enum-set-indexer . P11016) (enum-set-difference . P11015) (enum-set-constructor . P11014) (enum-set-complement . P11013) (enum-set->list . P11012) (who-condition? . P9628) (warning? . P9494) (violation? . P9557) (undefined-violation? . P9745) (syntax-violation? . P9720) (syntax-violation-subform . P9724) (syntax-violation-form . P9722) (syntax-violation . P2993) (simple-conditions . P11011) (serious-condition? . P9515) (non-continuable-violation? . P9651) (message-condition? . P9471) (make-who-condition . P9624) (make-warning . P9492) (make-violation . P9555) (make-undefined-violation . P9743) (make-syntax-violation . P9714) (make-serious-condition . P9513) (make-non-continuable-violation . P9649) (make-message-condition . P9467) (make-lexical-violation . P9691) (make-irritants-condition . P9598) (make-implementation-restriction-violation . P9670) (make-error . P9534) (make-assertion-violation . P9576) (lexical-violation? . P9693) (irritants-condition? . P9602) (implementation-restriction-violation? . P9672) (error? . P9536) (condition-who . P9630) (condition-predicate . P11010) (condition-message . P9473) (condition-irritants . P9604) (condition-accessor . P11009) (condition . P11008) (assertion-violation? . P9578) (condition? . P11007) (utf32->string . P11006) (utf16->string . P11005) (utf8->string . P11004) (uint-list->bytevector . P11003) (u8-list->bytevector . P11002) (string->utf8 . P11001) (string->utf32 . P11000) (string->utf16 . P10999) (sint-list->bytevector . P10998) (native-endianness . P10997) (bytevector? . P10996) (bytevector=? . P10995) (bytevector-uint-set! . P10994) (bytevector-uint-ref . P10993) (bytevector-u8-set! . P10992) (bytevector-u8-ref . P10991) (bytevector-u64-set! . P10990) (bytevector-u64-ref . P10989) (bytevector-u64-native-set! . P10988) (bytevector-u64-native-ref . P10987) (bytevector-u32-set! . P10986) (bytevector-u32-ref . P10985) (bytevector-u32-native-set! . P10984) (bytevector-u32-native-ref . P10983) (bytevector-u16-set! . P10982) (bytevector-u16-ref . P10981) (bytevector-u16-native-set! . P10980) (bytevector-u16-native-ref . P10979) (bytevector-sint-set! . P10978) (bytevector-sint-ref . P10977) (bytevector-s8-set! . P10976) (bytevector-s8-ref . P10975) (bytevector-s64-set! . P10974) (bytevector-s64-ref . P10973) (bytevector-s64-native-set! . P10972) (bytevector-s64-native-ref . P10971) (bytevector-s32-set! . P10970) (bytevector-s32-ref . P10969) (bytevector-s32-native-set! . P10968) (bytevector-s32-native-ref . P10967) (bytevector-s16-set! . P10966) (bytevector-s16-ref . P10965) (bytevector-s16-native-set! . P10964) (bytevector-s16-native-ref . P10963) (bytevector-length . P10962) (bytevector-ieee-single-ref . P10961) (bytevector-ieee-single-set! . P10960) (bytevector-ieee-single-native-set! . P10959) (bytevector-ieee-single-native-ref . P10958) (bytevector-ieee-double-set! . P10957) (bytevector-ieee-double-ref . P10956) (bytevector-ieee-double-native-set! . P10955) (bytevector-ieee-double-native-ref . P10954) (bytevector-fill! . P10953) (bytevector-copy! . P10952) (bytevector-copy . P10951) (bytevector->uint-list . P10950) (bytevector->u8-list . P10949) (bytevector->sint-list . P10948) (no-nans-violation? . P10059) (no-infinities-violation? . P10038) (make-no-nans-violation . P10057) (make-no-infinities-violation . P10036) (real->flonum . P10947) (flzero? . P10946) (fltruncate . P10945) (fltan . P10944) (flsqrt . P10943) (flsin . P10942) (flround . P10941) (flpositive? . P10940) (flonum? . P10939) (flodd? . P10938) (flnumerator . P10937) (flnegative? . P10936) (flnan? . P10935) (flmod0 . P10934) (flmod . P10933) (flmin . P10932) (flmax . P10931) (fllog . P10930) (flinteger? . P10929) (flinfinite? . P10928) (flfloor . P10927) (flfinite? . P10926) (flexpt . P10925) (flexp . P10924) (fleven? . P10923) (fldiv0-and-mod0 . P10922) (fldiv0 . P10921) (fldiv-and-mod . P10920) (fldiv . P10919) (fldenominator . P10918) (flcos . P10917) (flceiling . P10916) (flatan . P10915) (flasin . P10914) (flacos . P10913) (flabs . P10912) (fl>? . P10911) (fl>=? . P10910) (fl=? . P10909) (fl<? . P10908) (fl<=? . P10907) (fl/ . P10906) (fl- . P10905) (fl+ . P10904) (fl* . P10903) (fixnum->flonum . P10902) (fxzero? . P10901) (fxxor . P10900) (fxrotate-bit-field . P10899) (fxreverse-bit-field . P10898) (fxpositive? . P10897) (fxodd? . P10896) (fxnot . P10895) (fxnegative? . P10894) (fxmod0 . P10893) (fxmod . P10892) (fxmin . P10891) (fxmax . P10890) (fxlength . P10889) (fxior . P10888) (fxif . P10887) (fxfirst-bit-set . P10886) (fxeven? . P10885) (fxdiv0-and-mod0 . P10884) (fxdiv0 . P10883) (fxdiv-and-mod . P10882) (fxdiv . P10881) (fxcopy-bit-field . P10880) (fxcopy-bit . P10879) (fxbit-set? . P10878) (fxbit-field . P10877) (fxbit-count . P10876) (fxarithmetic-shift-right . P10875) (fxarithmetic-shift-left . P10874) (fxarithmetic-shift . P10873) (fxand . P10872) (fx>? . P10871) (fx>=? . P10870) (fx=? . P10869) (fx<? . P10868) (fx<=? . P10867) (fx-/carry . P10866) (fx- . P10865) (fx+/carry . P10864) (fx+ . P10863) (fx*/carry . P10862) (fx* . P10861) (greatest-fixnum . P10860) (least-fixnum . P10859) (fixnum-width . P10858) (fixnum? . P10857) (bitwise-rotate-bit-field . P10856) (bitwise-reverse-bit-field . P10855) (bitwise-length . P10854) (bitwise-if . P10853) (bitwise-first-bit-set . P10852) (bitwise-copy-bit-field . P10851) (bitwise-copy-bit . P10850) (bitwise-bit-set? . P10849) (bitwise-bit-field . P10848) (bitwise-bit-count . P10847) (bitwise-xor . P10846) (bitwise-ior . P10845) (bitwise-and . P10844) (bitwise-not . P10843) (bitwise-arithmetic-shift-right . P10842) (bitwise-arithmetic-shift-left . P10841) (bitwise-arithmetic-shift . P10840) (zero? . P10839) (vector? . P10838) (vector-set! . P10837) (vector-ref . P10836) (vector-map . P10835) (vector-length . P10834) (vector-for-each . P10833) (vector-fill! . P10832) (vector->list . P10831) (vector . P10830) (values . P10829) (truncate . P10828) (tan . P10827) (symbol? . P10826) (symbol=? . P10825) (symbol->string . P10824) (substring . P10823) (string? . P10822) (string>? . P10821) (string>=? . P10820) (string=? . P10819) (string<? . P10818) (string<=? . P10817) (string-ref . P10816) (string-length . P10815) (string-for-each . P10814) (string-copy . P10813) (string-append . P10812) (string->symbol . P10811) (string->number . P10810) (string->list . P10809) (string . P10808) (sqrt . P10807) (sin . P10806) (round . P10805) (reverse . P10804) (real? . P10803) (real-valued? . P10802) (real-part . P10801) (rationalize . P10800) (rational? . P10799) (rational-valued? . P10798) (procedure? . P10797) (positive? . P10796) (pair? . P10795) (odd? . P10794) (numerator . P10793) (number? . P10792) (number->string . P10791) (null? . P10790) (not . P10789) (negative? . P10788) (nan? . P10787) (min . P10786) (max . P10785) (map . P10784) (make-vector . P10783) (make-string . P10782) (make-rectangular . P10781) (make-polar . P10780) (magnitude . P10779) (log . P10778) (list? . P10777) (list-tail . P10776) (list-ref . P10775) (list->vector . P10774) (list->string . P10773) (list . P10772) (length . P10771) (lcm . P10770) (integer? . P10769) (integer-valued? . P10768) (integer->char . P10767) (infinite? . P10766) (inexact? . P10765) (inexact . P10764) (imag-part . P10763) (gcd . P10762) (for-each . P10761) (floor . P10760) (finite? . P10759) (expt . P10758) (exp . P10757) (exact? . P10756) (exact-integer-sqrt . P10755) (exact . P10754) (even? . P10753) (error . P10752) (eqv? . P10751) (equal? . P10750) (eq? . P10749) (dynamic-wind . P10748) (div0-and-mod0 . P10747) (mod0 . P10746) (div0 . P10745) (div-and-mod . P10744) (mod . P10743) (div . P10742) (denominator . P10741) (cos . P10740) (cons . P10739) (complex? . P10738) (char? . P10737) (char>? . P10736) (char>=? . P10735) (char=? . P10734) (char<? . P10733) (char<=? . P10732) (char->integer . P10731) (ceiling . P10730) (call-with-values . P10729) (call/cc . P10728) (call-with-current-continuation . P10727) (cddddr . P10726) (cdddar . P10725) (cddadr . P10724) (cddaar . P10723) (cdaddr . P10722) (cdadar . P10721) (cdaadr . P10720) (cdaaar . P10719) (cadddr . P10718) (caddar . P10717) (cadadr . P10716) (cadaar . P10715) (caaddr . P10714) (caadar . P10713) (caaadr . P10712) (caaaar . P10711) (cdddr . P10710) (cddar . P10709) (cdadr . P10708) (cdaar . P10707) (caddr . P10706) (cadar . P10705) (caadr . P10704) (caaar . P10703) (cddr . P10702) (cdar . P10701) (cadr . P10700) (caar . P10699) (cdr . P10698) (car . P10697) (boolean? . P10696) (boolean=? . P10695) (atan . P10694) (assertion-violation . P10693) (asin . P10692) (apply . P10691) (append . P10690) (angle . P10689) (acos . P10688) (abs . P10687) (/ . P10686) (* . P10685) (- . P10684) (+ . P10683) (>= . P10682) (> . P10681) (= . P10680) (<= . P10679) (< . P10678) (&no-nans . P10676) (&no-infinities . P10675) (&i/o-encoding . P10674) (&i/o-decoding . P10673) (&i/o-port . P10672) (&i/o-file-does-not-exist . P10671) (&i/o-file-already-exists . P10670) (&i/o-file-is-read-only . P10669) (&i/o-file-protection . P10668) (&i/o-filename . P10667) (&i/o-invalid-position . P10666) (&i/o-write . P10665) (&i/o-read . P10664) (&i/o . P10663) (&undefined . P10662) (&syntax . P10661) (&lexical . P10660) (&implementation-restriction . P10659) (&non-continuable . P10658) (&who . P10657) (&irritants . P10656) (&assertion . P10655) (&violation . P10654) (&error . P10653) (&serious . P10652) (&warning . P10651) (&message . P10650) (&condition . P10649) (define-condition-type . P10648) (define-enumeration . P10647) (define-record-type . P10646) (parent-rtd . P10645) (nongenerative . P10644) (opaque . P10643) (sealed . P10642) (protocol . P10641) (parent . P10640) (immutable . P10639) (mutable . P10638) (fields . P10637) (error-handling-mode . P10636) (file-options . P10635) (buffer-mode . P10634) (eol-style . P10633) (guard . P10632) (unsyntax-splicing . P10629) (unsyntax . P10628) (unquote-splicing . P10627) (unquote . P10626) (_ . P10625) (else . P10624) (=> . P10623) (... . P10622) (assert . P10621) (endianness . P10620) (do . P10617) (cond . P10616) (let* . P10615) (let . P10614) (let*-values . P10613) (let-values . P10612) (identifier-syntax . P10611) (with-syntax . P10610) (quasisyntax . P10609) (quasiquote . P10608) (syntax-rules . P10607) (record-constructor-descriptor . P10604) (record-type-descriptor . P10603) (case . P10602) (unless . P10600) (when . P10599) (or . P10598) (and . P10597) (if . P10596) (letrec* . P10595) (letrec . P10594) (case-lambda . P10592) (lambda . P10591) (syntax . P10590) (syntax-case . P10589) (quote . P10588) (letrec-syntax . P10586) (let-syntax . P10585) (set! . P10584) (begin . P10582) (define-syntax . P10580) (define . P10579)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11291 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . P2957) (quotient . P11065) (null-environment . P2955) (remainder . P11064) (modulo . P11063) (inexact->exact . P11062) (force . P11061) (exact->inexact . P11060) (make-promise . P11059) (delay . P10619)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11292 '(rnrs control) '(6) '() '() '() '((do . P10617) (unless . P10600) (when . P10599) (case-lambda . P10592)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11293 '(rnrs eval) '(6) '() '() '() '((eval . P2961) (environment . P2953)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11294 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . P11055) (set-car! . P11054)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11295 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . P11057) (string-set! . P11056)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11296 '(rnrs programs) '(6) '() '() '() '((exit . P11058) (command-line . P10326)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11297 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . P2319) (identifier? . P2995) (generate-temporaries . P2975) (free-identifier=? . P2977) (syntax->datum . P2999) (datum->syntax . P2997) (bound-identifier=? . P2979) (syntax-violation . P2993) (unsyntax-splicing . P10629) (unsyntax . P10628) (_ . P10625) (... . P10622) (with-syntax . P10610) (quasisyntax . P10609) (syntax . P10590) (syntax-case . P10589)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11298 '(rnrs files) '(6) '() '() '() '((delete-file . P11170) (file-exists? . P11169) (make-i/o-write-error . P9806) (make-i/o-read-error . P9785) (make-i/o-port-error . P9964) (make-i/o-invalid-position-error . P9828) (make-i/o-filename-error . P9854) (make-i/o-file-protection-error . P9879) (make-i/o-file-is-read-only-error . P9900) (make-i/o-file-does-not-exist-error . P9942) (make-i/o-file-already-exists-error . P9921) (make-i/o-error . P9764) (i/o-write-error? . P9808) (i/o-read-error? . P9787) (i/o-port-error? . P9968) (i/o-invalid-position-error? . P9832) (i/o-filename-error? . P9858) (i/o-file-protection-error? . P9881) (i/o-file-is-read-only-error? . P9902) (i/o-file-does-not-exist-error? . P9944) (i/o-file-already-exists-error? . P9923) (i/o-error? . P9766) (i/o-error-position . P9834) (i/o-error-port . P9970) (i/o-error-filename . P9860) (&i/o-port . P10672) (&i/o-file-does-not-exist . P10671) (&i/o-file-already-exists . P10670) (&i/o-file-is-read-only . P10669) (&i/o-file-protection . P10668) (&i/o-filename . P10667) (&i/o-invalid-position . P10666) (&i/o-write . P10665) (&i/o-read . P10664) (&i/o . P10663)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11299 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . P11168) (vector-sort . P11167) (list-sort . P11166)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11300 '(rnrs base) '(6) '() '() '() '((zero? . P10839) (vector? . P10838) (vector-set! . P10837) (vector-ref . P10836) (vector-map . P10835) (vector-length . P10834) (vector-for-each . P10833) (vector-fill! . P10832) (vector->list . P10831) (vector . P10830) (values . P10829) (truncate . P10828) (tan . P10827) (symbol? . P10826) (symbol=? . P10825) (symbol->string . P10824) (substring . P10823) (string? . P10822) (string>? . P10821) (string>=? . P10820) (string=? . P10819) (string<? . P10818) (string<=? . P10817) (string-ref . P10816) (string-length . P10815) (string-for-each . P10814) (string-copy . P10813) (string-append . P10812) (string->symbol . P10811) (string->number . P10810) (string->list . P10809) (string . P10808) (sqrt . P10807) (sin . P10806) (round . P10805) (reverse . P10804) (real? . P10803) (real-valued? . P10802) (real-part . P10801) (rationalize . P10800) (rational? . P10799) (rational-valued? . P10798) (procedure? . P10797) (positive? . P10796) (pair? . P10795) (odd? . P10794) (numerator . P10793) (number? . P10792) (number->string . P10791) (null? . P10790) (not . P10789) (negative? . P10788) (nan? . P10787) (min . P10786) (max . P10785) (map . P10784) (make-vector . P10783) (make-string . P10782) (make-rectangular . P10781) (make-polar . P10780) (magnitude . P10779) (log . P10778) (list? . P10777) (list-tail . P10776) (list-ref . P10775) (list->vector . P10774) (list->string . P10773) (list . P10772) (length . P10771) (lcm . P10770) (integer? . P10769) (integer-valued? . P10768) (integer->char . P10767) (infinite? . P10766) (inexact? . P10765) (inexact . P10764) (imag-part . P10763) (gcd . P10762) (for-each . P10761) (floor . P10760) (finite? . P10759) (expt . P10758) (exp . P10757) (exact? . P10756) (exact-integer-sqrt . P10755) (exact . P10754) (even? . P10753) (error . P10752) (eqv? . P10751) (equal? . P10750) (eq? . P10749) (dynamic-wind . P10748) (div0-and-mod0 . P10747) (mod0 . P10746) (div0 . P10745) (div-and-mod . P10744) (mod . P10743) (div . P10742) (denominator . P10741) (cos . P10740) (cons . P10739) (complex? . P10738) (char? . P10737) (char>? . P10736) (char>=? . P10735) (char=? . P10734) (char<? . P10733) (char<=? . P10732) (char->integer . P10731) (ceiling . P10730) (call-with-values . P10729) (call/cc . P10728) (call-with-current-continuation . P10727) (cddddr . P10726) (cdddar . P10725) (cddadr . P10724) (cddaar . P10723) (cdaddr . P10722) (cdadar . P10721) (cdaadr . P10720) (cdaaar . P10719) (cadddr . P10718) (caddar . P10717) (cadadr . P10716) (cadaar . P10715) (caaddr . P10714) (caadar . P10713) (caaadr . P10712) (caaaar . P10711) (cdddr . P10710) (cddar . P10709) (cdadr . P10708) (cdaar . P10707) (caddr . P10706) (cadar . P10705) (caadr . P10704) (caaar . P10703) (cddr . P10702) (cdar . P10701) (cadr . P10700) (caar . P10699) (cdr . P10698) (car . P10697) (boolean? . P10696) (boolean=? . P10695) (atan . P10694) (assertion-violation . P10693) (asin . P10692) (apply . P10691) (append . P10690) (angle . P10689) (acos . P10688) (abs . P10687) (/ . P10686) (* . P10685) (- . P10684) (+ . P10683) (>= . P10682) (> . P10681) (= . P10680) (<= . P10679) (< . P10678) (unquote-splicing . P10627) (unquote . P10626) (_ . P10625) (else . P10624) (=> . P10623) (... . P10622) (assert . P10621) (cond . P10616) (let* . P10615) (let . P10614) (let*-values . P10613) (let-values . P10612) (identifier-syntax . P10611) (quasiquote . P10608) (syntax-rules . P10607) (case . P10602) (or . P10598) (and . P10597) (if . P10596) (letrec* . P10595) (letrec . P10594) (lambda . P10591) (quote . P10588) (letrec-syntax . P10586) (let-syntax . P10585) (set! . P10584) (begin . P10582) (define-syntax . P10580) (define . P10579)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11301 '(rnrs lists) '(6) '() '() '() '((remove . P11053) (remv . P11052) (remp . P11051) (remq . P11050) (partition . P11049) (memv . P11048) (memq . P11047) (memp . P11046) (member . P11045) (exists . P11044) (for-all . P11043) (fold-right . P11042) (fold-left . P11041) (find . P11040) (filter . P11039) (cons* . P11038) (assv . P11037) (assq . P11036) (assp . P11035) (assoc . P11034)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11302 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . P11144) (call-with-input-file . P11143) (write-char . P11142) (write . P11141) (with-output-to-file . P11140) (with-input-from-file . P11139) (read-char . P11138) (read . P11137) (peek-char . P11136) (open-output-file . P11135) (open-input-file . P11134) (newline . P11133) (display . P11132) (close-output-port . P11131) (close-input-port . P11130) (eof-object? . P11129) (eof-object . P11128) (current-error-port . P11127) (current-output-port . P11126) (current-input-port . P11125) (output-port? . P11124) (input-port? . P11123) (make-i/o-write-error . P9806) (make-i/o-read-error . P9785) (make-i/o-port-error . P9964) (make-i/o-invalid-position-error . P9828) (make-i/o-filename-error . P9854) (make-i/o-file-protection-error . P9879) (make-i/o-file-is-read-only-error . P9900) (make-i/o-file-does-not-exist-error . P9942) (make-i/o-file-already-exists-error . P9921) (make-i/o-error . P9764) (i/o-write-error? . P9808) (i/o-read-error? . P9787) (i/o-port-error? . P9968) (i/o-invalid-position-error? . P9832) (i/o-filename-error? . P9858) (i/o-file-protection-error? . P9881) (i/o-file-is-read-only-error? . P9902) (i/o-file-does-not-exist-error? . P9944) (i/o-file-already-exists-error? . P9923) (i/o-error? . P9766) (i/o-error-position . P9834) (i/o-error-port . P9970) (i/o-error-filename . P9860) (&i/o-port . P10672) (&i/o-file-does-not-exist . P10671) (&i/o-file-already-exists . P10670) (&i/o-file-is-read-only . P10669) (&i/o-file-protection . P10668) (&i/o-filename . P10667) (&i/o-invalid-position . P10666) (&i/o-write . P10665) (&i/o-read . P10664) (&i/o . P10663)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11303 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . P11081) (utf32->string . P11006) (utf16->string . P11005) (utf8->string . P11004) (uint-list->bytevector . P11003) (u8-list->bytevector . P11002) (string->utf8 . P11001) (string->utf32 . P11000) (string->utf16 . P10999) (sint-list->bytevector . P10998) (native-endianness . P10997) (bytevector? . P10996) (bytevector=? . P10995) (bytevector-uint-set! . P10994) (bytevector-uint-ref . P10993) (bytevector-u8-set! . P10992) (bytevector-u8-ref . P10991) (bytevector-u64-set! . P10990) (bytevector-u64-ref . P10989) (bytevector-u64-native-set! . P10988) (bytevector-u64-native-ref . P10987) (bytevector-u32-set! . P10986) (bytevector-u32-ref . P10985) (bytevector-u32-native-set! . P10984) (bytevector-u32-native-ref . P10983) (bytevector-u16-set! . P10982) (bytevector-u16-ref . P10981) (bytevector-u16-native-set! . P10980) (bytevector-u16-native-ref . P10979) (bytevector-sint-set! . P10978) (bytevector-sint-ref . P10977) (bytevector-s8-set! . P10976) (bytevector-s8-ref . P10975) (bytevector-s64-set! . P10974) (bytevector-s64-ref . P10973) (bytevector-s64-native-set! . P10972) (bytevector-s64-native-ref . P10971) (bytevector-s32-set! . P10970) (bytevector-s32-ref . P10969) (bytevector-s32-native-set! . P10968) (bytevector-s32-native-ref . P10967) (bytevector-s16-set! . P10966) (bytevector-s16-ref . P10965) (bytevector-s16-native-set! . P10964) (bytevector-s16-native-ref . P10963) (bytevector-length . P10962) (bytevector-ieee-single-ref . P10961) (bytevector-ieee-single-set! . P10960) (bytevector-ieee-single-native-set! . P10959) (bytevector-ieee-single-native-ref . P10958) (bytevector-ieee-double-set! . P10957) (bytevector-ieee-double-ref . P10956) (bytevector-ieee-double-native-set! . P10955) (bytevector-ieee-double-native-ref . P10954) (bytevector-fill! . P10953) (bytevector-copy! . P10952) (bytevector-copy . P10951) (bytevector->uint-list . P10950) (bytevector->u8-list . P10949) (bytevector->sint-list . P10948) (endianness . P10620)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11304 '(rnrs unicode) '(6) '() '() '() '((string-upcase . P11216) (string-titlecase . P11215) (string-normalize-nfkd . P11214) (string-normalize-nfkc . P11213) (string-normalize-nfd . P11212) (string-normalize-nfc . P11211) (string-foldcase . P11210) (string-downcase . P11209) (string-ci>? . P11208) (string-ci>=? . P11207) (string-ci=? . P11206) (string-ci<? . P11205) (string-ci<=? . P11204) (char-whitespace? . P11203) (char-upper-case? . P11202) (char-title-case? . P11201) (char-numeric? . P11200) (char-lower-case? . P11199) (char-general-category . P11198) (char-upcase . P11197) (char-titlecase . P11196) (char-foldcase . P11195) (char-downcase . P11194) (char-ci>? . P11193) (char-ci>=? . P11192) (char-ci=? . P11191) (char-ci<? . P11190) (char-ci<=? . P11189) (char-alphabetic? . P11188)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11305 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . P11027) (raise-continuable . P11026) (raise . P11025) (guard . P10632) (else . P10624) (=> . P10623)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11306 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . P10856) (bitwise-reverse-bit-field . P10855) (bitwise-length . P10854) (bitwise-if . P10853) (bitwise-first-bit-set . P10852) (bitwise-copy-bit-field . P10851) (bitwise-copy-bit . P10850) (bitwise-bit-set? . P10849) (bitwise-bit-field . P10848) (bitwise-bit-count . P10847) (bitwise-xor . P10846) (bitwise-ior . P10845) (bitwise-and . P10844) (bitwise-not . P10843) (bitwise-arithmetic-shift-right . P10842) (bitwise-arithmetic-shift-left . P10841) (bitwise-arithmetic-shift . P10840)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11307 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . P10901) (fxxor . P10900) (fxrotate-bit-field . P10899) (fxreverse-bit-field . P10898) (fxpositive? . P10897) (fxodd? . P10896) (fxnot . P10895) (fxnegative? . P10894) (fxmod0 . P10893) (fxmod . P10892) (fxmin . P10891) (fxmax . P10890) (fxlength . P10889) (fxior . P10888) (fxif . P10887) (fxfirst-bit-set . P10886) (fxeven? . P10885) (fxdiv0-and-mod0 . P10884) (fxdiv0 . P10883) (fxdiv-and-mod . P10882) (fxdiv . P10881) (fxcopy-bit-field . P10880) (fxcopy-bit . P10879) (fxbit-set? . P10878) (fxbit-field . P10877) (fxbit-count . P10876) (fxarithmetic-shift-right . P10875) (fxarithmetic-shift-left . P10874) (fxarithmetic-shift . P10873) (fxand . P10872) (fx>? . P10871) (fx>=? . P10870) (fx=? . P10869) (fx<? . P10868) (fx<=? . P10867) (fx-/carry . P10866) (fx- . P10865) (fx+/carry . P10864) (fx+ . P10863) (fx*/carry . P10862) (fx* . P10861) (greatest-fixnum . P10860) (least-fixnum . P10859) (fixnum-width . P10858) (fixnum? . P10857)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11308 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . P10059) (no-infinities-violation? . P10038) (make-no-nans-violation . P10057) (make-no-infinities-violation . P10036) (real->flonum . P10947) (flzero? . P10946) (fltruncate . P10945) (fltan . P10944) (flsqrt . P10943) (flsin . P10942) (flround . P10941) (flpositive? . P10940) (flonum? . P10939) (flodd? . P10938) (flnumerator . P10937) (flnegative? . P10936) (flnan? . P10935) (flmod0 . P10934) (flmod . P10933) (flmin . P10932) (flmax . P10931) (fllog . P10930) (flinteger? . P10929) (flinfinite? . P10928) (flfloor . P10927) (flfinite? . P10926) (flexpt . P10925) (flexp . P10924) (fleven? . P10923) (fldiv0-and-mod0 . P10922) (fldiv0 . P10921) (fldiv-and-mod . P10920) (fldiv . P10919) (fldenominator . P10918) (flcos . P10917) (flceiling . P10916) (flatan . P10915) (flasin . P10914) (flacos . P10913) (flabs . P10912) (fl>? . P10911) (fl>=? . P10910) (fl=? . P10909) (fl<? . P10908) (fl<=? . P10907) (fl/ . P10906) (fl- . P10905) (fl+ . P10904) (fl* . P10903) (fixnum->flonum . P10902) (&no-nans . P10676) (&no-infinities . P10675)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11309 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . P11165) (string-ci-hash . P11164) (string-hash . P11163) (equal-hash . P11162) (hashtable-equivalence-function . P11161) (make-hashtable . P11160) (hashtable-hash-function . P11159) (make-eqv-hashtable . P11158) (make-eq-hashtable . P11157) (hashtable? . P11156) (hashtable-update! . P11155) (hashtable-size . P11154) (hashtable-set! . P11153) (hashtable-ref . P11152) (hashtable-mutable? . P11151) (hashtable-keys . P11150) (hashtable-entries . P11149) (hashtable-delete! . P11148) (hashtable-copy . P11147) (hashtable-contains? . P11146) (hashtable-clear! . P11145)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11310 '(rnrs io ports) '(6) '() '() '() '((eof-object? . P11129) (eof-object . P11128) (current-error-port . P11127) (current-output-port . P11126) (current-input-port . P11125) (output-port? . P11124) (input-port? . P11123) (utf-8-codec . P11122) (utf-16-codec . P11121) (transcoder-error-handling-mode . P11120) (transcoder-eol-style . P11119) (transcoder-codec . P11118) (transcoded-port . P11117) (textual-port? . P11116) (string->bytevector . P11115) (standard-output-port . P11114) (standard-input-port . P11113) (standard-error-port . P11112) (set-port-position! . P11111) (put-u8 . P11110) (put-string . P11109) (put-datum . P11108) (put-char . P11107) (put-bytevector . P11106) (port? . P11105) (port-transcoder . P11104) (port-position . P11103) (port-has-set-port-position!? . P11102) (port-has-port-position? . P11101) (port-eof? . P11100) (output-port-buffer-mode . P11099) (open-string-output-port . P11098) (open-string-input-port . P11097) (open-file-output-port . P11096) (open-file-input/output-port . P11095) (open-file-input-port . P11094) (open-bytevector-output-port . P11093) (open-bytevector-input-port . P11092) (native-transcoder . P11091) (native-eol-style . P11090) (make-transcoder . P11089) (latin-1-codec . P11088) (make-i/o-write-error . P9806) (make-i/o-read-error . P9785) (make-i/o-port-error . P9964) (make-i/o-invalid-position-error . P9828) (make-i/o-filename-error . P9854) (make-i/o-file-protection-error . P9879) (make-i/o-file-is-read-only-error . P9900) (make-i/o-file-does-not-exist-error . P9942) (make-i/o-file-already-exists-error . P9921) (make-i/o-error . P9764) (make-i/o-encoding-error . P10011) (make-i/o-decoding-error . P9989) (make-custom-textual-output-port . P11087) (make-custom-textual-input/output-port . P11086) (make-custom-textual-input-port . P11085) (make-custom-binary-output-port . P11084) (make-custom-binary-input/output-port . P11083) (make-custom-binary-input-port . P11082) (lookahead-u8 . P11080) (lookahead-char . P11079) (i/o-write-error? . P9808) (i/o-read-error? . P9787) (i/o-port-error? . P9968) (i/o-invalid-position-error? . P9832) (i/o-filename-error? . P9858) (i/o-file-protection-error? . P9881) (i/o-file-is-read-only-error? . P9902) (i/o-file-does-not-exist-error? . P9944) (i/o-file-already-exists-error? . P9923) (i/o-error? . P9766) (i/o-error-position . P9834) (i/o-error-port . P9970) (i/o-error-filename . P9860) (i/o-encoding-error? . P10015) (i/o-encoding-error-char . P10017) (i/o-decoding-error? . P9991) (get-u8 . P11078) (get-string-n! . P11077) (get-string-n . P11076) (get-string-all . P11075) (get-line . P11074) (get-datum . P11073) (get-char . P11072) (get-bytevector-some . P11071) (get-bytevector-n! . P11070) (get-bytevector-n . P11069) (get-bytevector-all . P11068) (flush-output-port . P11067) (close-port . P11066) (call-with-string-output-port . P11033) (call-with-port . P11032) (call-with-bytevector-output-port . P11031) (bytevector->string . P11030) (buffer-mode? . P11029) (binary-port? . P11028) (&i/o-encoding . P10674) (&i/o-decoding . P10673) (&i/o-port . P10672) (&i/o-file-does-not-exist . P10671) (&i/o-file-already-exists . P10670) (&i/o-file-is-read-only . P10669) (&i/o-file-protection . P10668) (&i/o-filename . P10667) (&i/o-invalid-position . P10666) (&i/o-write . P10665) (&i/o-read . P10664) (&i/o . P10663) (error-handling-mode . P10636) (file-options . P10635) (buffer-mode . P10634) (eol-style . P10633)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11311 '(rnrs enums) '(6) '() '() '() '((make-enumeration . P11024) (enum-set=? . P11023) (enum-set-universe . P11022) (enum-set-union . P11021) (enum-set-subset? . P11020) (enum-set-projection . P11019) (enum-set-member? . P11018) (enum-set-intersection . P11017) (enum-set-indexer . P11016) (enum-set-difference . P11015) (enum-set-constructor . P11014) (enum-set-complement . P11013) (enum-set->list . P11012) (define-enumeration . P10647)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11312 '(rnrs conditions) '(6) '() '() '() '((who-condition? . P9628) (warning? . P9494) (violation? . P9557) (undefined-violation? . P9745) (syntax-violation? . P9720) (syntax-violation-subform . P9724) (syntax-violation-form . P9722) (syntax-violation . P2993) (simple-conditions . P11011) (serious-condition? . P9515) (non-continuable-violation? . P9651) (message-condition? . P9471) (make-who-condition . P9624) (make-warning . P9492) (make-violation . P9555) (make-undefined-violation . P9743) (make-syntax-violation . P9714) (make-serious-condition . P9513) (make-non-continuable-violation . P9649) (make-message-condition . P9467) (make-lexical-violation . P9691) (make-irritants-condition . P9598) (make-implementation-restriction-violation . P9670) (make-error . P9534) (make-assertion-violation . P9576) (lexical-violation? . P9693) (irritants-condition? . P9602) (implementation-restriction-violation? . P9672) (error? . P9536) (condition-who . P9630) (condition-predicate . P11010) (condition-message . P9473) (condition-irritants . P9604) (condition-accessor . P11009) (condition . P11008) (assertion-violation? . P9578) (condition? . P11007) (&undefined . P10662) (&syntax . P10661) (&lexical . P10660) (&implementation-restriction . P10659) (&non-continuable . P10658) (&who . P10657) (&irritants . P10656) (&assertion . P10655) (&violation . P10654) (&error . P10653) (&serious . P10652) (&warning . P10651) (&message . P10650) (&condition . P10649) (define-condition-type . P10648)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11313 '(rnrs records inspection) '(6) '() '() '() '((record? . P11180) (record-type-uid . P11179) (record-type-sealed? . P11178) (record-type-parent . P11177) (record-type-opaque? . P11176) (record-type-name . P11175) (record-type-generative? . P11174) (record-type-field-names . P11173) (record-rtd . P11172) (record-field-mutable? . P11171)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11314 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . P11187) (record-predicate . P11186) (record-mutator . P11185) (record-constructor . P11184) (record-accessor . P11183) (make-record-type-descriptor . P11182) (make-record-constructor-descriptor . P11181)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11315 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . P10646) (parent-rtd . P10645) (nongenerative . P10644) (opaque . P10643) (sealed . P10642) (protocol . P10641) (parent . P10640) (immutable . P10639) (mutable . P10638) (fields . P10637) (record-constructor-descriptor . P10604) (record-type-descriptor . P10603)) '() values values '#f '#f '#t '#f) (P1788@P1441@install-library 'P11316 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . P10063) (&no-nans-rtd . P10061) (&no-infinities-rcd . P10042) (&no-infinities-rtd . P10040) (&i/o-encoding-rcd . P10021) (&i/o-encoding-rtd . P10019) (&i/o-decoding-rcd . P9995) (&i/o-decoding-rtd . P9993) (&i/o-port-rcd . P9974) (&i/o-port-rtd . P9972) (&i/o-file-does-not-exist-rcd . P9948) (&i/o-file-does-not-exist-rtd . P9946) (&i/o-file-already-exists-rcd . P9927) (&i/o-file-already-exists-rtd . P9925) (&i/o-file-is-read-only-rcd . P9906) (&i/o-file-is-read-only-rtd . P9904) (&i/o-file-protection-rcd . P9885) (&i/o-file-protection-rtd . P9883) (&i/o-filename-rcd . P9864) (&i/o-filename-rtd . P9862) (&i/o-invalid-position-rcd . P9838) (&i/o-invalid-position-rtd . P9836) (&i/o-write-rcd . P9812) (&i/o-write-rtd . P9810) (&i/o-read-rcd . P9791) (&i/o-read-rtd . P9789) (&i/o-rcd . P9770) (&i/o-rtd . P9768) (&undefined-rcd . P9749) (&undefined-rtd . P9747) (&syntax-rcd . P9728) (&syntax-rtd . P9726) (&lexical-rcd . P9697) (&lexical-rtd . P9695) (&implementation-restriction-rcd . P9676) (&implementation-restriction-rtd . P9674) (&non-continuable-rcd . P9655) (&non-continuable-rtd . P9653) (&who-rcd . P9634) (&who-rtd . P9632) (&irritants-rcd . P9608) (&irritants-rtd . P9606) (&assertion-rcd . P9582) (&assertion-rtd . P9580) (&violation-rcd . P9561) (&violation-rtd . P9559) (&error-rcd . P9540) (&error-rtd . P9538) (&serious-rcd . P9519) (&serious-rtd . P9517) (&warning-rcd . P9498) (&warning-rtd . P9496) (&message-rcd . P9477) (&message-rtd . P9475) (&condition-rcd . P9386) (&condition-rtd . P9384) (syntax-error . P2989) (syntax-dispatch . P2760) (pretty-print . P11284) (eval-core . P11283) (set-symbol-value! . P11282) (symbol-value . P11281) (gensym . P911) (void . P11280) (load . P10332) (interaction-environment . P3005) (char-ready? . P11279) (regexp? . P11278) (read-line . P11277) (ungensym . P11276) (alist->eq-hash-table . P11275) (assoc-ref . P11274) (print . P11273) (format . P11272) (host-os . P11271) (library-path . P1408) (standard-library-path . P11270) (file-newer? . P11269) (stat-mtime . P11268) (write-to-file . P11267) (file->list . P11266) (file->string . P11265) (digit->integer . P11264) (call-with-string-input-port . P11263) (call-with-string-io . P11262) (string-split . P11261) (bytevector-for-each . P11260) (string->regexp . P11259) (rxmatch . P11258) (regexp-replace-all . P11257) (hashtable-for-each . P11256) (call-process . P11255) (local-tz-offset . P11254) (microseconds . P11253) (readdir . P11252) (set-current-directory! . P11251) (expand-path . P11250) (current-directory . P11249) (%spawn . P11248) (%waitpid . P11247) (%ffi-supported? . P11246) (%ffi-pointer-ref . P11245) (%ffi-pointer->string . P11244) (%ffi-call->string-or-zero . P11243) (%ffi-call->double . P11242) (%ffi-call->void* . P11241) (%ffi-call->void . P11240) (%ffi-call->int . P11239) (%ffi-lookup . P11238) (%ffi-open . P11237) (%fork . P11236) (%pipe . P11235) (p . P11234) (open-output-string . P11233) (get-output-string . P11232) (get-environment-variables . P11231) (get-environment-variable . P11230) (get-timeofday . P11229) (get-command-line . P11228) (sys-display . P11227) (make-file-options . P11226) (source-info . P11225) (make-compiler-instruction . P11224) (make-instruction . P11223) (set-source-info! . P11222) (bignum? . P11221) (fast-equal? . P11220) (fasl-read . P11219) (fasl-write . P11218) (time-usage . P11217) (make-parameter . P939) (string-upcase . P11216) (string-titlecase . P11215) (string-normalize-nfkd . P11214) (string-normalize-nfkc . P11213) (string-normalize-nfd . P11212) (string-normalize-nfc . P11211) (string-foldcase . P11210) (string-downcase . P11209) (string-ci>? . P11208) (string-ci>=? . P11207) (string-ci=? . P11206) (string-ci<? . P11205) (string-ci<=? . P11204) (char-whitespace? . P11203) (char-upper-case? . P11202) (char-title-case? . P11201) (char-numeric? . P11200) (char-lower-case? . P11199) (char-general-category . P11198) (char-upcase . P11197) (char-titlecase . P11196) (char-foldcase . P11195) (char-downcase . P11194) (char-ci>? . P11193) (char-ci>=? . P11192) (char-ci=? . P11191) (char-ci<? . P11190) (char-ci<=? . P11189) (char-alphabetic? . P11188) (make-variable-transformer . P2319) (identifier? . P2995) (generate-temporaries . P2975) (free-identifier=? . P2977) (syntax->datum . P2999) (datum->syntax . P2997) (bound-identifier=? . P2979) (record-type-descriptor? . P11187) (record-predicate . P11186) (record-mutator . P11185) (record-constructor . P11184) (record-accessor . P11183) (make-record-type-descriptor . P11182) (make-record-constructor-descriptor . P11181) (record? . P11180) (record-type-uid . P11179) (record-type-sealed? . P11178) (record-type-parent . P11177) (record-type-opaque? . P11176) (record-type-name . P11175) (record-type-generative? . P11174) (record-type-field-names . P11173) (record-rtd . P11172) (record-field-mutable? . P11171) (delete-file . P11170) (file-exists? . P11169) (vector-sort! . P11168) (vector-sort . P11167) (list-sort . P11166) (symbol-hash . P11165) (string-ci-hash . P11164) (string-hash . P11163) (equal-hash . P11162) (hashtable-equivalence-function . P11161) (make-hashtable . P11160) (hashtable-hash-function . P11159) (make-eqv-hashtable . P11158) (make-eq-hashtable . P11157) (hashtable? . P11156) (hashtable-update! . P11155) (hashtable-size . P11154) (hashtable-set! . P11153) (hashtable-ref . P11152) (hashtable-mutable? . P11151) (hashtable-keys . P11150) (hashtable-entries . P11149) (hashtable-delete! . P11148) (hashtable-copy . P11147) (hashtable-contains? . P11146) (hashtable-clear! . P11145) (call-with-output-file . P11144) (call-with-input-file . P11143) (write-char . P11142) (write . P11141) (with-output-to-file . P11140) (with-input-from-file . P11139) (read-char . P11138) (read . P11137) (peek-char . P11136) (open-output-file . P11135) (open-input-file . P11134) (newline . P11133) (display . P11132) (close-output-port . P11131) (close-input-port . P11130) (eof-object? . P11129) (eof-object . P11128) (current-error-port . P11127) (current-output-port . P11126) (current-input-port . P11125) (output-port? . P11124) (input-port? . P11123) (utf-8-codec . P11122) (utf-16-codec . P11121) (transcoder-error-handling-mode . P11120) (transcoder-eol-style . P11119) (transcoder-codec . P11118) (transcoded-port . P11117) (textual-port? . P11116) (string->bytevector . P11115) (standard-output-port . P11114) (standard-input-port . P11113) (standard-error-port . P11112) (set-port-position! . P11111) (put-u8 . P11110) (put-string . P11109) (put-datum . P11108) (put-char . P11107) (put-bytevector . P11106) (port? . P11105) (port-transcoder . P11104) (port-position . P11103) (port-has-set-port-position!? . P11102) (port-has-port-position? . P11101) (port-eof? . P11100) (output-port-buffer-mode . P11099) (open-string-output-port . P11098) (open-string-input-port . P11097) (open-file-output-port . P11096) (open-file-input/output-port . P11095) (open-file-input-port . P11094) (open-bytevector-output-port . P11093) (open-bytevector-input-port . P11092) (native-transcoder . P11091) (native-eol-style . P11090) (make-transcoder . P11089) (latin-1-codec . P11088) (make-i/o-write-error . P9806) (make-i/o-read-error . P9785) (make-i/o-port-error . P9964) (make-i/o-invalid-position-error . P9828) (make-i/o-filename-error . P9854) (make-i/o-file-protection-error . P9879) (make-i/o-file-is-read-only-error . P9900) (make-i/o-file-does-not-exist-error . P9942) (make-i/o-file-already-exists-error . P9921) (make-i/o-error . P9764) (make-i/o-encoding-error . P10011) (make-i/o-decoding-error . P9989) (make-custom-textual-output-port . P11087) (make-custom-textual-input/output-port . P11086) (make-custom-textual-input-port . P11085) (make-custom-binary-output-port . P11084) (make-custom-binary-input/output-port . P11083) (make-custom-binary-input-port . P11082) (make-bytevector . P11081) (lookahead-u8 . P11080) (lookahead-char . P11079) (i/o-write-error? . P9808) (i/o-read-error? . P9787) (i/o-port-error? . P9968) (i/o-invalid-position-error? . P9832) (i/o-filename-error? . P9858) (i/o-file-protection-error? . P9881) (i/o-file-is-read-only-error? . P9902) (i/o-file-does-not-exist-error? . P9944) (i/o-file-already-exists-error? . P9923) (i/o-error? . P9766) (i/o-error-position . P9834) (i/o-error-port . P9970) (i/o-error-filename . P9860) (i/o-encoding-error? . P10015) (i/o-encoding-error-char . P10017) (i/o-decoding-error? . P9991) (get-u8 . P11078) (get-string-n! . P11077) (get-string-n . P11076) (get-string-all . P11075) (get-line . P11074) (get-datum . P11073) (get-char . P11072) (get-bytevector-some . P11071) (get-bytevector-n! . P11070) (get-bytevector-n . P11069) (get-bytevector-all . P11068) (flush-output-port . P11067) (close-port . P11066) (scheme-report-environment . P2957) (quotient . P11065) (null-environment . P2955) (remainder . P11064) (modulo . P11063) (inexact->exact . P11062) (force . P11061) (exact->inexact . P11060) (make-promise . P11059) (exit . P11058) (command-line . P10326) (string-fill! . P11057) (string-set! . P11056) (set-cdr! . P11055) (set-car! . P11054) (remove . P11053) (remv . P11052) (remp . P11051) (remq . P11050) (partition . P11049) (memv . P11048) (memq . P11047) (memp . P11046) (member . P11045) (exists . P11044) (for-all . P11043) (fold-right . P11042) (fold-left . P11041) (find . P11040) (filter . P11039) (cons* . P11038) (assv . P11037) (assq . P11036) (assp . P11035) (assoc . P11034) (call-with-string-output-port . P11033) (call-with-port . P11032) (call-with-bytevector-output-port . P11031) (bytevector->string . P11030) (buffer-mode? . P11029) (binary-port? . P11028) (with-exception-handler . P11027) (raise-continuable . P11026) (raise . P11025) (eval . P2961) (environment . P2953) (make-enumeration . P11024) (enum-set=? . P11023) (enum-set-universe . P11022) (enum-set-union . P11021) (enum-set-subset? . P11020) (enum-set-projection . P11019) (enum-set-member? . P11018) (enum-set-intersection . P11017) (enum-set-indexer . P11016) (enum-set-difference . P11015) (enum-set-constructor . P11014) (enum-set-complement . P11013) (enum-set->list . P11012) (who-condition? . P9628) (warning? . P9494) (violation? . P9557) (undefined-violation? . P9745) (syntax-violation? . P9720) (syntax-violation-subform . P9724) (syntax-violation-form . P9722) (syntax-violation . P2993) (simple-conditions . P11011) (serious-condition? . P9515) (non-continuable-violation? . P9651) (message-condition? . P9471) (make-who-condition . P9624) (make-warning . P9492) (make-violation . P9555) (make-undefined-violation . P9743) (make-syntax-violation . P9714) (make-serious-condition . P9513) (make-non-continuable-violation . P9649) (make-message-condition . P9467) (make-lexical-violation . P9691) (make-irritants-condition . P9598) (make-implementation-restriction-violation . P9670) (make-error . P9534) (make-assertion-violation . P9576) (lexical-violation? . P9693) (irritants-condition? . P9602) (implementation-restriction-violation? . P9672) (error? . P9536) (condition-who . P9630) (condition-predicate . P11010) (condition-message . P9473) (condition-irritants . P9604) (condition-accessor . P11009) (condition . P11008) (assertion-violation? . P9578) (condition? . P11007) (utf32->string . P11006) (utf16->string . P11005) (utf8->string . P11004) (uint-list->bytevector . P11003) (u8-list->bytevector . P11002) (string->utf8 . P11001) (string->utf32 . P11000) (string->utf16 . P10999) (sint-list->bytevector . P10998) (native-endianness . P10997) (bytevector? . P10996) (bytevector=? . P10995) (bytevector-uint-set! . P10994) (bytevector-uint-ref . P10993) (bytevector-u8-set! . P10992) (bytevector-u8-ref . P10991) (bytevector-u64-set! . P10990) (bytevector-u64-ref . P10989) (bytevector-u64-native-set! . P10988) (bytevector-u64-native-ref . P10987) (bytevector-u32-set! . P10986) (bytevector-u32-ref . P10985) (bytevector-u32-native-set! . P10984) (bytevector-u32-native-ref . P10983) (bytevector-u16-set! . P10982) (bytevector-u16-ref . P10981) (bytevector-u16-native-set! . P10980) (bytevector-u16-native-ref . P10979) (bytevector-sint-set! . P10978) (bytevector-sint-ref . P10977) (bytevector-s8-set! . P10976) (bytevector-s8-ref . P10975) (bytevector-s64-set! . P10974) (bytevector-s64-ref . P10973) (bytevector-s64-native-set! . P10972) (bytevector-s64-native-ref . P10971) (bytevector-s32-set! . P10970) (bytevector-s32-ref . P10969) (bytevector-s32-native-set! . P10968) (bytevector-s32-native-ref . P10967) (bytevector-s16-set! . P10966) (bytevector-s16-ref . P10965) (bytevector-s16-native-set! . P10964) (bytevector-s16-native-ref . P10963) (bytevector-length . P10962) (bytevector-ieee-single-ref . P10961) (bytevector-ieee-single-set! . P10960) (bytevector-ieee-single-native-set! . P10959) (bytevector-ieee-single-native-ref . P10958) (bytevector-ieee-double-set! . P10957) (bytevector-ieee-double-ref . P10956) (bytevector-ieee-double-native-set! . P10955) (bytevector-ieee-double-native-ref . P10954) (bytevector-fill! . P10953) (bytevector-copy! . P10952) (bytevector-copy . P10951) (bytevector->uint-list . P10950) (bytevector->u8-list . P10949) (bytevector->sint-list . P10948) (no-nans-violation? . P10059) (no-infinities-violation? . P10038) (make-no-nans-violation . P10057) (make-no-infinities-violation . P10036) (real->flonum . P10947) (flzero? . P10946) (fltruncate . P10945) (fltan . P10944) (flsqrt . P10943) (flsin . P10942) (flround . P10941) (flpositive? . P10940) (flonum? . P10939) (flodd? . P10938) (flnumerator . P10937) (flnegative? . P10936) (flnan? . P10935) (flmod0 . P10934) (flmod . P10933) (flmin . P10932) (flmax . P10931) (fllog . P10930) (flinteger? . P10929) (flinfinite? . P10928) (flfloor . P10927) (flfinite? . P10926) (flexpt . P10925) (flexp . P10924) (fleven? . P10923) (fldiv0-and-mod0 . P10922) (fldiv0 . P10921) (fldiv-and-mod . P10920) (fldiv . P10919) (fldenominator . P10918) (flcos . P10917) (flceiling . P10916) (flatan . P10915) (flasin . P10914) (flacos . P10913) (flabs . P10912) (fl>? . P10911) (fl>=? . P10910) (fl=? . P10909) (fl<? . P10908) (fl<=? . P10907) (fl/ . P10906) (fl- . P10905) (fl+ . P10904) (fl* . P10903) (fixnum->flonum . P10902) (fxzero? . P10901) (fxxor . P10900) (fxrotate-bit-field . P10899) (fxreverse-bit-field . P10898) (fxpositive? . P10897) (fxodd? . P10896) (fxnot . P10895) (fxnegative? . P10894) (fxmod0 . P10893) (fxmod . P10892) (fxmin . P10891) (fxmax . P10890) (fxlength . P10889) (fxior . P10888) (fxif . P10887) (fxfirst-bit-set . P10886) (fxeven? . P10885) (fxdiv0-and-mod0 . P10884) (fxdiv0 . P10883) (fxdiv-and-mod . P10882) (fxdiv . P10881) (fxcopy-bit-field . P10880) (fxcopy-bit . P10879) (fxbit-set? . P10878) (fxbit-field . P10877) (fxbit-count . P10876) (fxarithmetic-shift-right . P10875) (fxarithmetic-shift-left . P10874) (fxarithmetic-shift . P10873) (fxand . P10872) (fx>? . P10871) (fx>=? . P10870) (fx=? . P10869) (fx<? . P10868) (fx<=? . P10867) (fx-/carry . P10866) (fx- . P10865) (fx+/carry . P10864) (fx+ . P10863) (fx*/carry . P10862) (fx* . P10861) (greatest-fixnum . P10860) (least-fixnum . P10859) (fixnum-width . P10858) (fixnum? . P10857) (bitwise-rotate-bit-field . P10856) (bitwise-reverse-bit-field . P10855) (bitwise-length . P10854) (bitwise-if . P10853) (bitwise-first-bit-set . P10852) (bitwise-copy-bit-field . P10851) (bitwise-copy-bit . P10850) (bitwise-bit-set? . P10849) (bitwise-bit-field . P10848) (bitwise-bit-count . P10847) (bitwise-xor . P10846) (bitwise-ior . P10845) (bitwise-and . P10844) (bitwise-not . P10843) (bitwise-arithmetic-shift-right . P10842) (bitwise-arithmetic-shift-left . P10841) (bitwise-arithmetic-shift . P10840) (zero? . P10839) (vector? . P10838) (vector-set! . P10837) (vector-ref . P10836) (vector-map . P10835) (vector-length . P10834) (vector-for-each . P10833) (vector-fill! . P10832) (vector->list . P10831) (vector . P10830) (values . P10829) (truncate . P10828) (tan . P10827) (symbol? . P10826) (symbol=? . P10825) (symbol->string . P10824) (substring . P10823) (string? . P10822) (string>? . P10821) (string>=? . P10820) (string=? . P10819) (string<? . P10818) (string<=? . P10817) (string-ref . P10816) (string-length . P10815) (string-for-each . P10814) (string-copy . P10813) (string-append . P10812) (string->symbol . P10811) (string->number . P10810) (string->list . P10809) (string . P10808) (sqrt . P10807) (sin . P10806) (round . P10805) (reverse . P10804) (real? . P10803) (real-valued? . P10802) (real-part . P10801) (rationalize . P10800) (rational? . P10799) (rational-valued? . P10798) (procedure? . P10797) (positive? . P10796) (pair? . P10795) (odd? . P10794) (numerator . P10793) (number? . P10792) (number->string . P10791) (null? . P10790) (not . P10789) (negative? . P10788) (nan? . P10787) (min . P10786) (max . P10785) (map . P10784) (make-vector . P10783) (make-string . P10782) (make-rectangular . P10781) (make-polar . P10780) (magnitude . P10779) (log . P10778) (list? . P10777) (list-tail . P10776) (list-ref . P10775) (list->vector . P10774) (list->string . P10773) (list . P10772) (length . P10771) (lcm . P10770) (integer? . P10769) (integer-valued? . P10768) (integer->char . P10767) (infinite? . P10766) (inexact? . P10765) (inexact . P10764) (imag-part . P10763) (gcd . P10762) (for-each . P10761) (floor . P10760) (finite? . P10759) (expt . P10758) (exp . P10757) (exact? . P10756) (exact-integer-sqrt . P10755) (exact . P10754) (even? . P10753) (error . P10752) (eqv? . P10751) (equal? . P10750) (eq? . P10749) (dynamic-wind . P10748) (div0-and-mod0 . P10747) (mod0 . P10746) (div0 . P10745) (div-and-mod . P10744) (mod . P10743) (div . P10742) (denominator . P10741) (cos . P10740) (cons . P10739) (complex? . P10738) (char? . P10737) (char>? . P10736) (char>=? . P10735) (char=? . P10734) (char<? . P10733) (char<=? . P10732) (char->integer . P10731) (ceiling . P10730) (call-with-values . P10729) (call/cc . P10728) (call-with-current-continuation . P10727) (cddddr . P10726) (cdddar . P10725) (cddadr . P10724) (cddaar . P10723) (cdaddr . P10722) (cdadar . P10721) (cdaadr . P10720) (cdaaar . P10719) (cadddr . P10718) (caddar . P10717) (cadadr . P10716) (cadaar . P10715) (caaddr . P10714) (caadar . P10713) (caaadr . P10712) (caaaar . P10711) (cdddr . P10710) (cddar . P10709) (cdadr . P10708) (cdaar . P10707) (caddr . P10706) (cadar . P10705) (caadr . P10704) (caaar . P10703) (cddr . P10702) (cdar . P10701) (cadr . P10700) (caar . P10699) (cdr . P10698) (car . P10697) (boolean? . P10696) (boolean=? . P10695) (atan . P10694) (assertion-violation . P10693) (asin . P10692) (apply . P10691) (append . P10690) (angle . P10689) (acos . P10688) (abs . P10687) (/ . P10686) (* . P10685) (- . P10684) (+ . P10683) (>= . P10682) (> . P10681) (= . P10680) (<= . P10679) (< . P10678) (library . P10677) (&no-nans . P10676) (&no-infinities . P10675) (&i/o-encoding . P10674) (&i/o-decoding . P10673) (&i/o-port . P10672) (&i/o-file-does-not-exist . P10671) (&i/o-file-already-exists . P10670) (&i/o-file-is-read-only . P10669) (&i/o-file-protection . P10668) (&i/o-filename . P10667) (&i/o-invalid-position . P10666) (&i/o-write . P10665) (&i/o-read . P10664) (&i/o . P10663) (&undefined . P10662) (&syntax . P10661) (&lexical . P10660) (&implementation-restriction . P10659) (&non-continuable . P10658) (&who . P10657) (&irritants . P10656) (&assertion . P10655) (&violation . P10654) (&error . P10653) (&serious . P10652) (&warning . P10651) (&message . P10650) (&condition . P10649) (define-condition-type . P10648) (define-enumeration . P10647) (define-record-type . P10646) (parent-rtd . P10645) (nongenerative . P10644) (opaque . P10643) (sealed . P10642) (protocol . P10641) (parent . P10640) (immutable . P10639) (mutable . P10638) (fields . P10637) (error-handling-mode . P10636) (file-options . P10635) (buffer-mode . P10634) (eol-style . P10633) (guard . P10632) (trace-define . P10631) (trace-lambda . P10630) (unsyntax-splicing . P10629) (unsyntax . P10628) (unquote-splicing . P10627) (unquote . P10626) (_ . P10625) (else . P10624) (=> . P10623) (... . P10622) (assert . P10621) (endianness . P10620) (delay . P10619) (time . P10618) (do . P10617) (cond . P10616) (let* . P10615) (let . P10614) (let*-values . P10613) (let-values . P10612) (identifier-syntax . P10611) (with-syntax . P10610) (quasisyntax . P10609) (quasiquote . P10608) (syntax-rules . P10607) (include . P10606) (define-struct . P10605) (record-constructor-descriptor . P10604) (record-type-descriptor . P10603) (case . P10602) (parameterize . P10601) (unless . P10600) (when . P10599) (or . P10598) (and . P10597) (if . P10596) (letrec* . P10595) (letrec . P10594) (type-descriptor . P10593) (case-lambda . P10592) (lambda . P10591) (syntax . P10590) (syntax-case . P10589) (quote . P10588) (foreign-call . P10587) (letrec-syntax . P10586) (let-syntax . P10585) (set! . P10584) (import . P10583) (begin . P10582) (module . P10581) (define-syntax . P10580) (define . P10579)) '((P10063 core-prim . &no-nans-rcd) (P10061 core-prim . &no-nans-rtd) (P10042 core-prim . &no-infinities-rcd) (P10040 core-prim . &no-infinities-rtd) (P10021 core-prim . &i/o-encoding-rcd) (P10019 core-prim . &i/o-encoding-rtd) (P9995 core-prim . &i/o-decoding-rcd) (P9993 core-prim . &i/o-decoding-rtd) (P9974 core-prim . &i/o-port-rcd) (P9972 core-prim . &i/o-port-rtd) (P9948 core-prim . &i/o-file-does-not-exist-rcd) (P9946 core-prim . &i/o-file-does-not-exist-rtd) (P9927 core-prim . &i/o-file-already-exists-rcd) (P9925 core-prim . &i/o-file-already-exists-rtd) (P9906 core-prim . &i/o-file-is-read-only-rcd) (P9904 core-prim . &i/o-file-is-read-only-rtd) (P9885 core-prim . &i/o-file-protection-rcd) (P9883 core-prim . &i/o-file-protection-rtd) (P9864 core-prim . &i/o-filename-rcd) (P9862 core-prim . &i/o-filename-rtd) (P9838 core-prim . &i/o-invalid-position-rcd) (P9836 core-prim . &i/o-invalid-position-rtd) (P9812 core-prim . &i/o-write-rcd) (P9810 core-prim . &i/o-write-rtd) (P9791 core-prim . &i/o-read-rcd) (P9789 core-prim . &i/o-read-rtd) (P9770 core-prim . &i/o-rcd) (P9768 core-prim . &i/o-rtd) (P9749 core-prim . &undefined-rcd) (P9747 core-prim . &undefined-rtd) (P9728 core-prim . &syntax-rcd) (P9726 core-prim . &syntax-rtd) (P9697 core-prim . &lexical-rcd) (P9695 core-prim . &lexical-rtd) (P9676 core-prim . &implementation-restriction-rcd) (P9674 core-prim . &implementation-restriction-rtd) (P9655 core-prim . &non-continuable-rcd) (P9653 core-prim . &non-continuable-rtd) (P9634 core-prim . &who-rcd) (P9632 core-prim . &who-rtd) (P9608 core-prim . &irritants-rcd) (P9606 core-prim . &irritants-rtd) (P9582 core-prim . &assertion-rcd) (P9580 core-prim . &assertion-rtd) (P9561 core-prim . &violation-rcd) (P9559 core-prim . &violation-rtd) (P9540 core-prim . &error-rcd) (P9538 core-prim . &error-rtd) (P9519 core-prim . &serious-rcd) (P9517 core-prim . &serious-rtd) (P9498 core-prim . &warning-rcd) (P9496 core-prim . &warning-rtd) (P9477 core-prim . &message-rcd) (P9475 core-prim . &message-rtd) (P9386 core-prim . &condition-rcd) (P9384 core-prim . &condition-rtd) (P2989 core-prim . syntax-error) (P2760 core-prim . syntax-dispatch) (P11284 core-prim . pretty-print) (P11283 core-prim . eval-core) (P11282 core-prim . set-symbol-value!) (P11281 core-prim . symbol-value) (P911 core-prim . gensym) (P11280 core-prim . void) (P10332 core-prim . load) (P3005 core-prim . interaction-environment) (P11279 core-prim . char-ready?) (P11278 core-prim . regexp?) (P11277 core-prim . read-line) (P11276 core-prim . ungensym) (P11275 core-prim . alist->eq-hash-table) (P11274 core-prim . assoc-ref) (P11273 core-prim . print) (P11272 core-prim . format) (P11271 core-prim . host-os) (P1408 core-prim . library-path) (P11270 core-prim . standard-library-path) (P11269 core-prim . file-newer?) (P11268 core-prim . stat-mtime) (P11267 core-prim . write-to-file) (P11266 core-prim . file->list) (P11265 core-prim . file->string) (P11264 core-prim . digit->integer) (P11263 core-prim . call-with-string-input-port) (P11262 core-prim . call-with-string-io) (P11261 core-prim . string-split) (P11260 core-prim . bytevector-for-each) (P11259 core-prim . string->regexp) (P11258 core-prim . rxmatch) (P11257 core-prim . regexp-replace-all) (P11256 core-prim . hashtable-for-each) (P11255 core-prim . call-process) (P11254 core-prim . local-tz-offset) (P11253 core-prim . microseconds) (P11252 core-prim . readdir) (P11251 core-prim . set-current-directory!) (P11250 core-prim . expand-path) (P11249 core-prim . current-directory) (P11248 core-prim . %spawn) (P11247 core-prim . %waitpid) (P11246 core-prim . %ffi-supported?) (P11245 core-prim . %ffi-pointer-ref) (P11244 core-prim . %ffi-pointer->string) (P11243 core-prim . %ffi-call->string-or-zero) (P11242 core-prim . %ffi-call->double) (P11241 core-prim . %ffi-call->void*) (P11240 core-prim . %ffi-call->void) (P11239 core-prim . %ffi-call->int) (P11238 core-prim . %ffi-lookup) (P11237 core-prim . %ffi-open) (P11236 core-prim . %fork) (P11235 core-prim . %pipe) (P11234 core-prim . p) (P11233 core-prim . open-output-string) (P11232 core-prim . get-output-string) (P11231 core-prim . get-environment-variables) (P11230 core-prim . get-environment-variable) (P11229 core-prim . get-timeofday) (P11228 core-prim . get-command-line) (P11227 core-prim . sys-display) (P11226 core-prim . make-file-options) (P11225 core-prim . source-info) (P11224 core-prim . make-compiler-instruction) (P11223 core-prim . make-instruction) (P11222 core-prim . set-source-info!) (P11221 core-prim . bignum?) (P11220 core-prim . fast-equal?) (P11219 core-prim . fasl-read) (P11218 core-prim . fasl-write) (P11217 core-prim . time-usage) (P939 core-prim . make-parameter) (P11216 core-prim . string-upcase) (P11215 core-prim . string-titlecase) (P11214 core-prim . string-normalize-nfkd) (P11213 core-prim . string-normalize-nfkc) (P11212 core-prim . string-normalize-nfd) (P11211 core-prim . string-normalize-nfc) (P11210 core-prim . string-foldcase) (P11209 core-prim . string-downcase) (P11208 core-prim . string-ci>?) (P11207 core-prim . string-ci>=?) (P11206 core-prim . string-ci=?) (P11205 core-prim . string-ci<?) (P11204 core-prim . string-ci<=?) (P11203 core-prim . char-whitespace?) (P11202 core-prim . char-upper-case?) (P11201 core-prim . char-title-case?) (P11200 core-prim . char-numeric?) (P11199 core-prim . char-lower-case?) (P11198 core-prim . char-general-category) (P11197 core-prim . char-upcase) (P11196 core-prim . char-titlecase) (P11195 core-prim . char-foldcase) (P11194 core-prim . char-downcase) (P11193 core-prim . char-ci>?) (P11192 core-prim . char-ci>=?) (P11191 core-prim . char-ci=?) (P11190 core-prim . char-ci<?) (P11189 core-prim . char-ci<=?) (P11188 core-prim . char-alphabetic?) (P2319 core-prim . make-variable-transformer) (P2995 core-prim . identifier?) (P2975 core-prim . generate-temporaries) (P2977 core-prim . free-identifier=?) (P2999 core-prim . syntax->datum) (P2997 core-prim . datum->syntax) (P2979 core-prim . bound-identifier=?) (P11187 core-prim . record-type-descriptor?) (P11186 core-prim . record-predicate) (P11185 core-prim . record-mutator) (P11184 core-prim . record-constructor) (P11183 core-prim . record-accessor) (P11182 core-prim . make-record-type-descriptor) (P11181 core-prim . make-record-constructor-descriptor) (P11180 core-prim . record?) (P11179 core-prim . record-type-uid) (P11178 core-prim . record-type-sealed?) (P11177 core-prim . record-type-parent) (P11176 core-prim . record-type-opaque?) (P11175 core-prim . record-type-name) (P11174 core-prim . record-type-generative?) (P11173 core-prim . record-type-field-names) (P11172 core-prim . record-rtd) (P11171 core-prim . record-field-mutable?) (P11170 core-prim . delete-file) (P11169 core-prim . file-exists?) (P11168 core-prim . vector-sort!) (P11167 core-prim . vector-sort) (P11166 core-prim . list-sort) (P11165 core-prim . symbol-hash) (P11164 core-prim . string-ci-hash) (P11163 core-prim . string-hash) (P11162 core-prim . equal-hash) (P11161 core-prim . hashtable-equivalence-function) (P11160 core-prim . make-hashtable) (P11159 core-prim . hashtable-hash-function) (P11158 core-prim . make-eqv-hashtable) (P11157 core-prim . make-eq-hashtable) (P11156 core-prim . hashtable?) (P11155 core-prim . hashtable-update!) (P11154 core-prim . hashtable-size) (P11153 core-prim . hashtable-set!) (P11152 core-prim . hashtable-ref) (P11151 core-prim . hashtable-mutable?) (P11150 core-prim . hashtable-keys) (P11149 core-prim . hashtable-entries) (P11148 core-prim . hashtable-delete!) (P11147 core-prim . hashtable-copy) (P11146 core-prim . hashtable-contains?) (P11145 core-prim . hashtable-clear!) (P11144 core-prim . call-with-output-file) (P11143 core-prim . call-with-input-file) (P11142 core-prim . write-char) (P11141 core-prim . write) (P11140 core-prim . with-output-to-file) (P11139 core-prim . with-input-from-file) (P11138 core-prim . read-char) (P11137 core-prim . read) (P11136 core-prim . peek-char) (P11135 core-prim . open-output-file) (P11134 core-prim . open-input-file) (P11133 core-prim . newline) (P11132 core-prim . display) (P11131 core-prim . close-output-port) (P11130 core-prim . close-input-port) (P11129 core-prim . eof-object?) (P11128 core-prim . eof-object) (P11127 core-prim . current-error-port) (P11126 core-prim . current-output-port) (P11125 core-prim . current-input-port) (P11124 core-prim . output-port?) (P11123 core-prim . input-port?) (P11122 core-prim . utf-8-codec) (P11121 core-prim . utf-16-codec) (P11120 core-prim . transcoder-error-handling-mode) (P11119 core-prim . transcoder-eol-style) (P11118 core-prim . transcoder-codec) (P11117 core-prim . transcoded-port) (P11116 core-prim . textual-port?) (P11115 core-prim . string->bytevector) (P11114 core-prim . standard-output-port) (P11113 core-prim . standard-input-port) (P11112 core-prim . standard-error-port) (P11111 core-prim . set-port-position!) (P11110 core-prim . put-u8) (P11109 core-prim . put-string) (P11108 core-prim . put-datum) (P11107 core-prim . put-char) (P11106 core-prim . put-bytevector) (P11105 core-prim . port?) (P11104 core-prim . port-transcoder) (P11103 core-prim . port-position) (P11102 core-prim . port-has-set-port-position!?) (P11101 core-prim . port-has-port-position?) (P11100 core-prim . port-eof?) (P11099 core-prim . output-port-buffer-mode) (P11098 core-prim . open-string-output-port) (P11097 core-prim . open-string-input-port) (P11096 core-prim . open-file-output-port) (P11095 core-prim . open-file-input/output-port) (P11094 core-prim . open-file-input-port) (P11093 core-prim . open-bytevector-output-port) (P11092 core-prim . open-bytevector-input-port) (P11091 core-prim . native-transcoder) (P11090 core-prim . native-eol-style) (P11089 core-prim . make-transcoder) (P11088 core-prim . latin-1-codec) (P9806 core-prim . make-i/o-write-error) (P9785 core-prim . make-i/o-read-error) (P9964 core-prim . make-i/o-port-error) (P9828 core-prim . make-i/o-invalid-position-error) (P9854 core-prim . make-i/o-filename-error) (P9879 core-prim . make-i/o-file-protection-error) (P9900 core-prim . make-i/o-file-is-read-only-error) (P9942 core-prim . make-i/o-file-does-not-exist-error) (P9921 core-prim . make-i/o-file-already-exists-error) (P9764 core-prim . make-i/o-error) (P10011 core-prim . make-i/o-encoding-error) (P9989 core-prim . make-i/o-decoding-error) (P11087 core-prim . make-custom-textual-output-port) (P11086 core-prim . make-custom-textual-input/output-port) (P11085 core-prim . make-custom-textual-input-port) (P11084 core-prim . make-custom-binary-output-port) (P11083 core-prim . make-custom-binary-input/output-port) (P11082 core-prim . make-custom-binary-input-port) (P11081 core-prim . make-bytevector) (P11080 core-prim . lookahead-u8) (P11079 core-prim . lookahead-char) (P9808 core-prim . i/o-write-error?) (P9787 core-prim . i/o-read-error?) (P9968 core-prim . i/o-port-error?) (P9832 core-prim . i/o-invalid-position-error?) (P9858 core-prim . i/o-filename-error?) (P9881 core-prim . i/o-file-protection-error?) (P9902 core-prim . i/o-file-is-read-only-error?) (P9944 core-prim . i/o-file-does-not-exist-error?) (P9923 core-prim . i/o-file-already-exists-error?) (P9766 core-prim . i/o-error?) (P9834 core-prim . i/o-error-position) (P9970 core-prim . i/o-error-port) (P9860 core-prim . i/o-error-filename) (P10015 core-prim . i/o-encoding-error?) (P10017 core-prim . i/o-encoding-error-char) (P9991 core-prim . i/o-decoding-error?) (P11078 core-prim . get-u8) (P11077 core-prim . get-string-n!) (P11076 core-prim . get-string-n) (P11075 core-prim . get-string-all) (P11074 core-prim . get-line) (P11073 core-prim . get-datum) (P11072 core-prim . get-char) (P11071 core-prim . get-bytevector-some) (P11070 core-prim . get-bytevector-n!) (P11069 core-prim . get-bytevector-n) (P11068 core-prim . get-bytevector-all) (P11067 core-prim . flush-output-port) (P11066 core-prim . close-port) (P2957 core-prim . scheme-report-environment) (P11065 core-prim . quotient) (P2955 core-prim . null-environment) (P11064 core-prim . remainder) (P11063 core-prim . modulo) (P11062 core-prim . inexact->exact) (P11061 core-prim . force) (P11060 core-prim . exact->inexact) (P11059 core-prim . make-promise) (P11058 core-prim . exit) (P10326 core-prim . command-line) (P11057 core-prim . string-fill!) (P11056 core-prim . string-set!) (P11055 core-prim . set-cdr!) (P11054 core-prim . set-car!) (P11053 core-prim . remove) (P11052 core-prim . remv) (P11051 core-prim . remp) (P11050 core-prim . remq) (P11049 core-prim . partition) (P11048 core-prim . memv) (P11047 core-prim . memq) (P11046 core-prim . memp) (P11045 core-prim . member) (P11044 core-prim . exists) (P11043 core-prim . for-all) (P11042 core-prim . fold-right) (P11041 core-prim . fold-left) (P11040 core-prim . find) (P11039 core-prim . filter) (P11038 core-prim . cons*) (P11037 core-prim . assv) (P11036 core-prim . assq) (P11035 core-prim . assp) (P11034 core-prim . assoc) (P11033 core-prim . call-with-string-output-port) (P11032 core-prim . call-with-port) (P11031 core-prim . call-with-bytevector-output-port) (P11030 core-prim . bytevector->string) (P11029 core-prim . buffer-mode?) (P11028 core-prim . binary-port?) (P11027 core-prim . with-exception-handler) (P11026 core-prim . raise-continuable) (P11025 core-prim . raise) (P2961 core-prim . eval) (P2953 core-prim . environment) (P11024 core-prim . make-enumeration) (P11023 core-prim . enum-set=?) (P11022 core-prim . enum-set-universe) (P11021 core-prim . enum-set-union) (P11020 core-prim . enum-set-subset?) (P11019 core-prim . enum-set-projection) (P11018 core-prim . enum-set-member?) (P11017 core-prim . enum-set-intersection) (P11016 core-prim . enum-set-indexer) (P11015 core-prim . enum-set-difference) (P11014 core-prim . enum-set-constructor) (P11013 core-prim . enum-set-complement) (P11012 core-prim . enum-set->list) (P9628 core-prim . who-condition?) (P9494 core-prim . warning?) (P9557 core-prim . violation?) (P9745 core-prim . undefined-violation?) (P9720 core-prim . syntax-violation?) (P9724 core-prim . syntax-violation-subform) (P9722 core-prim . syntax-violation-form) (P2993 core-prim . syntax-violation) (P11011 core-prim . simple-conditions) (P9515 core-prim . serious-condition?) (P9651 core-prim . non-continuable-violation?) (P9471 core-prim . message-condition?) (P9624 core-prim . make-who-condition) (P9492 core-prim . make-warning) (P9555 core-prim . make-violation) (P9743 core-prim . make-undefined-violation) (P9714 core-prim . make-syntax-violation) (P9513 core-prim . make-serious-condition) (P9649 core-prim . make-non-continuable-violation) (P9467 core-prim . make-message-condition) (P9691 core-prim . make-lexical-violation) (P9598 core-prim . make-irritants-condition) (P9670 core-prim . make-implementation-restriction-violation) (P9534 core-prim . make-error) (P9576 core-prim . make-assertion-violation) (P9693 core-prim . lexical-violation?) (P9602 core-prim . irritants-condition?) (P9672 core-prim . implementation-restriction-violation?) (P9536 core-prim . error?) (P9630 core-prim . condition-who) (P11010 core-prim . condition-predicate) (P9473 core-prim . condition-message) (P9604 core-prim . condition-irritants) (P11009 core-prim . condition-accessor) (P11008 core-prim . condition) (P9578 core-prim . assertion-violation?) (P11007 core-prim . condition?) (P11006 core-prim . utf32->string) (P11005 core-prim . utf16->string) (P11004 core-prim . utf8->string) (P11003 core-prim . uint-list->bytevector) (P11002 core-prim . u8-list->bytevector) (P11001 core-prim . string->utf8) (P11000 core-prim . string->utf32) (P10999 core-prim . string->utf16) (P10998 core-prim . sint-list->bytevector) (P10997 core-prim . native-endianness) (P10996 core-prim . bytevector?) (P10995 core-prim . bytevector=?) (P10994 core-prim . bytevector-uint-set!) (P10993 core-prim . bytevector-uint-ref) (P10992 core-prim . bytevector-u8-set!) (P10991 core-prim . bytevector-u8-ref) (P10990 core-prim . bytevector-u64-set!) (P10989 core-prim . bytevector-u64-ref) (P10988 core-prim . bytevector-u64-native-set!) (P10987 core-prim . bytevector-u64-native-ref) (P10986 core-prim . bytevector-u32-set!) (P10985 core-prim . bytevector-u32-ref) (P10984 core-prim . bytevector-u32-native-set!) (P10983 core-prim . bytevector-u32-native-ref) (P10982 core-prim . bytevector-u16-set!) (P10981 core-prim . bytevector-u16-ref) (P10980 core-prim . bytevector-u16-native-set!) (P10979 core-prim . bytevector-u16-native-ref) (P10978 core-prim . bytevector-sint-set!) (P10977 core-prim . bytevector-sint-ref) (P10976 core-prim . bytevector-s8-set!) (P10975 core-prim . bytevector-s8-ref) (P10974 core-prim . bytevector-s64-set!) (P10973 core-prim . bytevector-s64-ref) (P10972 core-prim . bytevector-s64-native-set!) (P10971 core-prim . bytevector-s64-native-ref) (P10970 core-prim . bytevector-s32-set!) (P10969 core-prim . bytevector-s32-ref) (P10968 core-prim . bytevector-s32-native-set!) (P10967 core-prim . bytevector-s32-native-ref) (P10966 core-prim . bytevector-s16-set!) (P10965 core-prim . bytevector-s16-ref) (P10964 core-prim . bytevector-s16-native-set!) (P10963 core-prim . bytevector-s16-native-ref) (P10962 core-prim . bytevector-length) (P10961 core-prim . bytevector-ieee-single-ref) (P10960 core-prim . bytevector-ieee-single-set!) (P10959 core-prim . bytevector-ieee-single-native-set!) (P10958 core-prim . bytevector-ieee-single-native-ref) (P10957 core-prim . bytevector-ieee-double-set!) (P10956 core-prim . bytevector-ieee-double-ref) (P10955 core-prim . bytevector-ieee-double-native-set!) (P10954 core-prim . bytevector-ieee-double-native-ref) (P10953 core-prim . bytevector-fill!) (P10952 core-prim . bytevector-copy!) (P10951 core-prim . bytevector-copy) (P10950 core-prim . bytevector->uint-list) (P10949 core-prim . bytevector->u8-list) (P10948 core-prim . bytevector->sint-list) (P10059 core-prim . no-nans-violation?) (P10038 core-prim . no-infinities-violation?) (P10057 core-prim . make-no-nans-violation) (P10036 core-prim . make-no-infinities-violation) (P10947 core-prim . real->flonum) (P10946 core-prim . flzero?) (P10945 core-prim . fltruncate) (P10944 core-prim . fltan) (P10943 core-prim . flsqrt) (P10942 core-prim . flsin) (P10941 core-prim . flround) (P10940 core-prim . flpositive?) (P10939 core-prim . flonum?) (P10938 core-prim . flodd?) (P10937 core-prim . flnumerator) (P10936 core-prim . flnegative?) (P10935 core-prim . flnan?) (P10934 core-prim . flmod0) (P10933 core-prim . flmod) (P10932 core-prim . flmin) (P10931 core-prim . flmax) (P10930 core-prim . fllog) (P10929 core-prim . flinteger?) (P10928 core-prim . flinfinite?) (P10927 core-prim . flfloor) (P10926 core-prim . flfinite?) (P10925 core-prim . flexpt) (P10924 core-prim . flexp) (P10923 core-prim . fleven?) (P10922 core-prim . fldiv0-and-mod0) (P10921 core-prim . fldiv0) (P10920 core-prim . fldiv-and-mod) (P10919 core-prim . fldiv) (P10918 core-prim . fldenominator) (P10917 core-prim . flcos) (P10916 core-prim . flceiling) (P10915 core-prim . flatan) (P10914 core-prim . flasin) (P10913 core-prim . flacos) (P10912 core-prim . flabs) (P10911 core-prim . fl>?) (P10910 core-prim . fl>=?) (P10909 core-prim . fl=?) (P10908 core-prim . fl<?) (P10907 core-prim . fl<=?) (P10906 core-prim . fl/) (P10905 core-prim . fl-) (P10904 core-prim . fl+) (P10903 core-prim . fl*) (P10902 core-prim . fixnum->flonum) (P10901 core-prim . fxzero?) (P10900 core-prim . fxxor) (P10899 core-prim . fxrotate-bit-field) (P10898 core-prim . fxreverse-bit-field) (P10897 core-prim . fxpositive?) (P10896 core-prim . fxodd?) (P10895 core-prim . fxnot) (P10894 core-prim . fxnegative?) (P10893 core-prim . fxmod0) (P10892 core-prim . fxmod) (P10891 core-prim . fxmin) (P10890 core-prim . fxmax) (P10889 core-prim . fxlength) (P10888 core-prim . fxior) (P10887 core-prim . fxif) (P10886 core-prim . fxfirst-bit-set) (P10885 core-prim . fxeven?) (P10884 core-prim . fxdiv0-and-mod0) (P10883 core-prim . fxdiv0) (P10882 core-prim . fxdiv-and-mod) (P10881 core-prim . fxdiv) (P10880 core-prim . fxcopy-bit-field) (P10879 core-prim . fxcopy-bit) (P10878 core-prim . fxbit-set?) (P10877 core-prim . fxbit-field) (P10876 core-prim . fxbit-count) (P10875 core-prim . fxarithmetic-shift-right) (P10874 core-prim . fxarithmetic-shift-left) (P10873 core-prim . fxarithmetic-shift) (P10872 core-prim . fxand) (P10871 core-prim . fx>?) (P10870 core-prim . fx>=?) (P10869 core-prim . fx=?) (P10868 core-prim . fx<?) (P10867 core-prim . fx<=?) (P10866 core-prim . fx-/carry) (P10865 core-prim . fx-) (P10864 core-prim . fx+/carry) (P10863 core-prim . fx+) (P10862 core-prim . fx*/carry) (P10861 core-prim . fx*) (P10860 core-prim . greatest-fixnum) (P10859 core-prim . least-fixnum) (P10858 core-prim . fixnum-width) (P10857 core-prim . fixnum?) (P10856 core-prim . bitwise-rotate-bit-field) (P10855 core-prim . bitwise-reverse-bit-field) (P10854 core-prim . bitwise-length) (P10853 core-prim . bitwise-if) (P10852 core-prim . bitwise-first-bit-set) (P10851 core-prim . bitwise-copy-bit-field) (P10850 core-prim . bitwise-copy-bit) (P10849 core-prim . bitwise-bit-set?) (P10848 core-prim . bitwise-bit-field) (P10847 core-prim . bitwise-bit-count) (P10846 core-prim . bitwise-xor) (P10845 core-prim . bitwise-ior) (P10844 core-prim . bitwise-and) (P10843 core-prim . bitwise-not) (P10842 core-prim . bitwise-arithmetic-shift-right) (P10841 core-prim . bitwise-arithmetic-shift-left) (P10840 core-prim . bitwise-arithmetic-shift) (P10839 core-prim . zero?) (P10838 core-prim . vector?) (P10837 core-prim . vector-set!) (P10836 core-prim . vector-ref) (P10835 core-prim . vector-map) (P10834 core-prim . vector-length) (P10833 core-prim . vector-for-each) (P10832 core-prim . vector-fill!) (P10831 core-prim . vector->list) (P10830 core-prim . vector) (P10829 core-prim . values) (P10828 core-prim . truncate) (P10827 core-prim . tan) (P10826 core-prim . symbol?) (P10825 core-prim . symbol=?) (P10824 core-prim . symbol->string) (P10823 core-prim . substring) (P10822 core-prim . string?) (P10821 core-prim . string>?) (P10820 core-prim . string>=?) (P10819 core-prim . string=?) (P10818 core-prim . string<?) (P10817 core-prim . string<=?) (P10816 core-prim . string-ref) (P10815 core-prim . string-length) (P10814 core-prim . string-for-each) (P10813 core-prim . string-copy) (P10812 core-prim . string-append) (P10811 core-prim . string->symbol) (P10810 core-prim . string->number) (P10809 core-prim . string->list) (P10808 core-prim . string) (P10807 core-prim . sqrt) (P10806 core-prim . sin) (P10805 core-prim . round) (P10804 core-prim . reverse) (P10803 core-prim . real?) (P10802 core-prim . real-valued?) (P10801 core-prim . real-part) (P10800 core-prim . rationalize) (P10799 core-prim . rational?) (P10798 core-prim . rational-valued?) (P10797 core-prim . procedure?) (P10796 core-prim . positive?) (P10795 core-prim . pair?) (P10794 core-prim . odd?) (P10793 core-prim . numerator) (P10792 core-prim . number?) (P10791 core-prim . number->string) (P10790 core-prim . null?) (P10789 core-prim . not) (P10788 core-prim . negative?) (P10787 core-prim . nan?) (P10786 core-prim . min) (P10785 core-prim . max) (P10784 core-prim . map) (P10783 core-prim . make-vector) (P10782 core-prim . make-string) (P10781 core-prim . make-rectangular) (P10780 core-prim . make-polar) (P10779 core-prim . magnitude) (P10778 core-prim . log) (P10777 core-prim . list?) (P10776 core-prim . list-tail) (P10775 core-prim . list-ref) (P10774 core-prim . list->vector) (P10773 core-prim . list->string) (P10772 core-prim . list) (P10771 core-prim . length) (P10770 core-prim . lcm) (P10769 core-prim . integer?) (P10768 core-prim . integer-valued?) (P10767 core-prim . integer->char) (P10766 core-prim . infinite?) (P10765 core-prim . inexact?) (P10764 core-prim . inexact) (P10763 core-prim . imag-part) (P10762 core-prim . gcd) (P10761 core-prim . for-each) (P10760 core-prim . floor) (P10759 core-prim . finite?) (P10758 core-prim . expt) (P10757 core-prim . exp) (P10756 core-prim . exact?) (P10755 core-prim . exact-integer-sqrt) (P10754 core-prim . exact) (P10753 core-prim . even?) (P10752 core-prim . error) (P10751 core-prim . eqv?) (P10750 core-prim . equal?) (P10749 core-prim . eq?) (P10748 core-prim . dynamic-wind) (P10747 core-prim . div0-and-mod0) (P10746 core-prim . mod0) (P10745 core-prim . div0) (P10744 core-prim . div-and-mod) (P10743 core-prim . mod) (P10742 core-prim . div) (P10741 core-prim . denominator) (P10740 core-prim . cos) (P10739 core-prim . cons) (P10738 core-prim . complex?) (P10737 core-prim . char?) (P10736 core-prim . char>?) (P10735 core-prim . char>=?) (P10734 core-prim . char=?) (P10733 core-prim . char<?) (P10732 core-prim . char<=?) (P10731 core-prim . char->integer) (P10730 core-prim . ceiling) (P10729 core-prim . call-with-values) (P10728 core-prim . call/cc) (P10727 core-prim . call-with-current-continuation) (P10726 core-prim . cddddr) (P10725 core-prim . cdddar) (P10724 core-prim . cddadr) (P10723 core-prim . cddaar) (P10722 core-prim . cdaddr) (P10721 core-prim . cdadar) (P10720 core-prim . cdaadr) (P10719 core-prim . cdaaar) (P10718 core-prim . cadddr) (P10717 core-prim . caddar) (P10716 core-prim . cadadr) (P10715 core-prim . cadaar) (P10714 core-prim . caaddr) (P10713 core-prim . caadar) (P10712 core-prim . caaadr) (P10711 core-prim . caaaar) (P10710 core-prim . cdddr) (P10709 core-prim . cddar) (P10708 core-prim . cdadr) (P10707 core-prim . cdaar) (P10706 core-prim . caddr) (P10705 core-prim . cadar) (P10704 core-prim . caadr) (P10703 core-prim . caaar) (P10702 core-prim . cddr) (P10701 core-prim . cdar) (P10700 core-prim . cadr) (P10699 core-prim . caar) (P10698 core-prim . cdr) (P10697 core-prim . car) (P10696 core-prim . boolean?) (P10695 core-prim . boolean=?) (P10694 core-prim . atan) (P10693 core-prim . assertion-violation) (P10692 core-prim . asin) (P10691 core-prim . apply) (P10690 core-prim . append) (P10689 core-prim . angle) (P10688 core-prim . acos) (P10687 core-prim . abs) (P10686 core-prim . /) (P10685 core-prim . *) (P10684 core-prim . -) (P10683 core-prim . +) (P10682 core-prim . >=) (P10681 core-prim . >) (P10680 core-prim . =) (P10679 core-prim . <=) (P10678 core-prim . <) (P10677 core-prim . library) (P10676 $core-rtd &no-nans-rtd &no-nans-rcd) (P10675 $core-rtd &no-infinities-rtd &no-infinities-rcd) (P10674 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (P10673 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (P10672 $core-rtd &i/o-port-rtd &i/o-port-rcd) (P10671 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (P10670 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (P10669 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (P10668 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (P10667 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (P10666 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (P10665 $core-rtd &i/o-write-rtd &i/o-write-rcd) (P10664 $core-rtd &i/o-read-rtd &i/o-read-rcd) (P10663 $core-rtd &i/o-rtd &i/o-rcd) (P10662 $core-rtd &undefined-rtd &undefined-rcd) (P10661 $core-rtd &syntax-rtd &syntax-rcd) (P10660 $core-rtd &lexical-rtd &lexical-rcd) (P10659 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (P10658 $core-rtd &non-continuable-rtd &non-continuable-rcd) (P10657 $core-rtd &who-rtd &who-rcd) (P10656 $core-rtd &irritants-rtd &irritants-rcd) (P10655 $core-rtd &assertion-rtd &assertion-rcd) (P10654 $core-rtd &violation-rtd &violation-rcd) (P10653 $core-rtd &error-rtd &error-rcd) (P10652 $core-rtd &serious-rtd &serious-rcd) (P10651 $core-rtd &warning-rtd &warning-rcd) (P10650 $core-rtd &message-rtd &message-rcd) (P10649 $core-rtd &condition-rtd &condition-rcd) (P10648 macro . define-condition-type) (P10647 macro . define-enumeration) (P10646 macro . define-record-type) (P10645 macro . parent-rtd) (P10644 macro . nongenerative) (P10643 macro . opaque) (P10642 macro . sealed) (P10641 macro . protocol) (P10640 macro . parent) (P10639 macro . immutable) (P10638 macro . mutable) (P10637 macro . fields) (P10636 macro . error-handling-mode) (P10635 macro . file-options) (P10634 macro . buffer-mode) (P10633 macro . eol-style) (P10632 macro . guard) (P10631 macro . trace-define) (P10630 macro . trace-lambda) (P10629 macro . unsyntax-splicing) (P10628 macro . unsyntax) (P10627 macro . unquote-splicing) (P10626 macro . unquote) (P10625 macro . _) (P10624 macro . else) (P10623 macro . =>) (P10622 macro . ...) (P10621 macro . assert) (P10620 macro . endianness) (P10619 macro . delay) (P10618 macro . time) (P10617 macro . do) (P10616 macro . cond) (P10615 macro . let*) (P10614 macro . let) (P10613 macro . let*-values) (P10612 macro . let-values) (P10611 macro . identifier-syntax) (P10610 macro . with-syntax) (P10609 macro . quasisyntax) (P10608 macro . quasiquote) (P10607 macro . syntax-rules) (P10606 macro . include) (P10605 macro . define-struct) (P10604 core-macro . record-constructor-descriptor) (P10603 core-macro . record-type-descriptor) (P10602 macro . case) (P10601 macro . parameterize) (P10600 macro . unless) (P10599 macro . when) (P10598 core-macro . or) (P10597 core-macro . and) (P10596 core-macro . if) (P10595 core-macro . letrec*) (P10594 core-macro . letrec) (P10593 core-macro . type-descriptor) (P10592 core-macro . case-lambda) (P10591 core-macro . lambda) (P10590 core-macro . syntax) (P10589 core-macro . syntax-case) (P10588 core-macro . quote) (P10587 core-macro . foreign-call) (P10586 letrec-syntax) (P10585 let-syntax) (P10584 set!) (P10583 import) (P10582 begin) (P10581 module) (P10580 define-syntax) (P10579 define)) values values '#f '#f '#f '#f) (P1788@P1441@install-library 'P11317 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . P11284) (eval-core . P11283) (set-symbol-value! . P11282) (symbol-value . P11281) (gensym . P911) (void . P11280)) '() values values '#f '#f '#f '#f) (P1788@P1441@install-library 'P11318 '(mosh) '() '() '() '() '((set-symbol-value! . P11282) (symbol-value . P11281) (read-line . P11277) (ungensym . P11276) (alist->eq-hash-table . P11275) (assoc-ref . P11274) (print . P11273) (format . P11272) (host-os . P11271) (library-path . P1408) (standard-library-path . P11270) (file-newer? . P11269) (stat-mtime . P11268) (write-to-file . P11267) (file->list . P11266) (file->string . P11265) (digit->integer . P11264) (call-with-string-input-port . P11263) (call-with-string-io . P11262) (string-split . P11261) (bytevector-for-each . P11260) (string->regexp . P11259) (rxmatch . P11258) (regexp-replace-all . P11257) (hashtable-for-each . P11256) (readdir . P11252) (set-current-directory! . P11251) (expand-path . P11250) (current-directory . P11249) (p . P11234) (get-timeofday . P11229) (get-command-line . P11228) (sys-display . P11227) (make-file-options . P11226) (source-info . P11225) (make-compiler-instruction . P11224) (make-instruction . P11223) (set-source-info! . P11222) (bignum? . P11221) (fast-equal? . P11220) (fasl-read . P11219) (fasl-write . P11218) (time-usage . P11217) (time . P10618) (include . P10606)) '() values values '#f '#f '#f '#f) (P1788@P1441@install-library 'P11319 '(system) '() '() '() '() '((call-process . P11255) (local-tz-offset . P11254) (microseconds . P11253) (expand-path . P11250) (%spawn . P11248) (%waitpid . P11247) (%ffi-supported? . P11246) (%ffi-pointer-ref . P11245) (%ffi-pointer->string . P11244) (%ffi-call->string-or-zero . P11243) (%ffi-call->double . P11242) (%ffi-call->void* . P11241) (%ffi-call->void . P11240) (%ffi-call->int . P11239) (%ffi-lookup . P11238) (%ffi-open . P11237) (%fork . P11236) (%pipe . P11235) (open-output-string . P11233) (get-output-string . P11232) (get-environment-variables . P11231) (get-environment-variable . P11230) (make-parameter . P939) (parameterize . P10601)) '() values values '#f '#f '#f '#f))
((lambda (P10309@add-library-path! P10311@parse-and-add-library-path P10313@for-each-with-index P10315@conditioon-printer P10317@condition-printer P10319@record->field-alist P10321@map-with-index P10323@repl P10325@trace-printer P10327@command-line P10329@local-library-path P10331@load/args P10333@load P10335@ironscheme-build P10337@eval-top-level P10339@compile-system-libraries P10341@compile P10343@compile->closure P10345@pre-compile-r6rs-file P10347@load-r6rs-top-level) (begin (set! P10309@add-library-path! (lambda (P10374@path) (P1772@P1409@library-path (append (P1772@P1409@library-path) (list P10374@path))))) (set! P10311@parse-and-add-library-path (lambda (P10376@paths P10377@message) ((lambda (P10380@t) (if P10380@t ((lambda (P10382@paths) (for-each (lambda (P10384@path) (if (file-exists? P10384@path) (P10309@add-library-path! (expand-path P10384@path)) (format (current-error-port) P10377@message P10384@path))) (reverse (string-split P10382@paths '#\:)))) P10380@t) (void))) P10376@paths))) (set! P10313@for-each-with-index (lambda (P10386@proc P10387@lst) (letrec ((P10390@loop (lambda (P10392@i P10393@lst) (if (null? P10393@lst) (if '#f '#f (void)) (begin (P10386@proc P10392@i (car P10393@lst)) (P10390@loop (+ P10392@i '1) (cdr P10393@lst))))))) (P10390@loop '1 P10387@lst)))) (set! P10315@conditioon-printer (lambda (P10396@e P10397@port) ((lambda (P10401@ref) (begin (set! P10401@ref (lambda (P10416@rtd P10417@i P10418@x) ((lambda (P10422@val) (if (symbol? P10422@val) (ungensym P10422@val) P10422@val)) ((record-accessor P10416@rtd P10417@i) P10418@x)))) (begin (display '" Condition components:\n" P10397@port) (P10313@for-each-with-index (lambda (P10402@i P10403@x) ((lambda (P10406@rtd) (begin (format P10397@port '"   ~d. ~a" P10402@i (record-type-name P10406@rtd)) ((lambda (P10408@v) ((lambda (P10410@t) (if (memv P10410@t '(0)) (newline P10397@port) (if (memv P10410@t '(1)) (begin (display '": " P10397@port) (write (P10401@ref P10406@rtd '0 P10403@x) P10397@port) (newline P10397@port)) (begin (display '":\n" P10397@port) ((letrec ((P10412@f (lambda (P10414@i) (if (not (= P10414@i (vector-length P10408@v))) (begin (display '"       " P10397@port) (display (vector-ref P10408@v P10414@i) P10397@port) (display '": " P10397@port) (write (P10401@ref P10406@rtd P10414@i P10403@x) P10397@port) (newline P10397@port) (P10412@f (+ P10414@i '1))) (void))))) P10412@f) '0))))) (vector-length P10408@v))) (record-type-field-names P10406@rtd)))) (record-rtd P10403@x))) (simple-conditions P10396@e))))) '#f))) (set! P10317@condition-printer (lambda (P10424@e P10425@port) (begin (display '" Condition components:\n" P10425@port) (P10313@for-each-with-index (lambda (P10428@i P10429@x) ((lambda (P10432@rtd) (begin (format P10425@port '"   ~d. ~a" P10428@i (record-type-name P10432@rtd)) (for-each (lambda (P10434@field) (begin (display '"       " P10425@port) (display (car P10434@field) P10425@port) (display '": " P10425@port) (write (cdr P10434@field) P10425@port) (newline P10425@port))) (P10319@record->field-alist P10429@x)))) (record-rtd P10429@x))) (simple-conditions P10424@e))))) (set! P10319@record->field-alist (lambda (P10436@r) ((lambda (P10439@ref) (begin (set! P10439@ref (lambda (P10450@rtd P10451@i P10452@x) ((lambda (P10456@val) (if (symbol? P10456@val) (ungensym P10456@val) P10456@val)) ((record-accessor P10450@rtd P10451@i) P10452@x)))) ((letrec ((P10440@loop (lambda (P10442@ret P10443@rtd) (if P10443@rtd (P10440@loop (append P10442@ret (P10321@map-with-index (lambda (P10446@i P10447@field) (cons P10447@field (P10439@ref P10443@rtd P10446@i P10436@r))) (vector->list (record-type-field-names P10443@rtd)))) (record-type-parent P10443@rtd)) P10442@ret)))) P10440@loop) '() (record-rtd P10436@r)))) '#f))) (set! P10321@map-with-index (lambda (P10458@proc P10459@lst) ((letrec ((P10462@loop (lambda (P10464@i P10465@lst P10466@ret) (if (null? P10465@lst) (reverse P10466@ret) (P10462@loop (+ P10464@i '1) (cdr P10465@lst) (cons (P10458@proc P10464@i (car P10465@lst)) P10466@ret)))))) P10462@loop) '0 P10459@lst '()))) (set! P10323@repl (lambda P10470@x ((lambda (P10473@rec) (begin (set! P10473@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (P10476@P10474) (lambda () (with-exception-handler (lambda (P10478@e) ((call/cc (lambda (P10480@P10475) (P10476@P10474 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? P10478@e) (P10315@conditioon-printer P10478@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" P10478@e))) (P10480@P10475 (lambda () (raise-continuable P10478@e)))))))))) (lambda () ((letrec ((P10482@loop (lambda (P10484@line P10485@accum) ((lambda (P10489@parentheses-ok? P10491@eval-string-print) (begin (set! P10489@parentheses-ok? (lambda (P10496@text) ((letrec ((P10498@loop (lambda (P10500@chars P10501@p0 P10502@p1) (if (null? P10500@chars) (= '0 P10501@p0 P10502@p1) ((lambda (P10506@t) (if (memv P10506@t '(#\()) (P10498@loop (cdr P10500@chars) (+ P10501@p0 '1) P10502@p1) (if (memv P10506@t '(#\))) (P10498@loop (cdr P10500@chars) (- P10501@p0 '1) P10502@p1) (if (memv P10506@t '(#\[)) (P10498@loop (cdr P10500@chars) P10501@p0 (+ P10502@p1 '1)) (if (memv P10506@t '(#\])) (P10498@loop (cdr P10500@chars) P10501@p0 (- P10502@p1 '1)) (P10498@loop (cdr P10500@chars) P10501@p0 P10502@p1)))))) (car P10500@chars)))))) P10498@loop) (string->list P10496@text) '0 '0))) (set! P10491@eval-string-print (lambda (P10494@text) (if (not (or (string=? '"\n" P10494@text) (= '0 (string-length P10494@text)))) (write (P10337@eval-top-level (call-with-port (open-string-input-port P10494@text) read))) (void)))) (if (eof-object? P10484@line) (begin (P10491@eval-string-print P10485@accum) (exit)) ((lambda (P10492@current) (if (P10489@parentheses-ok? P10492@current) (P10491@eval-string-print P10492@current) (P10482@loop (get-line (current-input-port)) P10492@current))) (string-append P10485@accum P10484@line))))) '#f '#f)))) P10482@loop) (get-line (current-input-port)) '""))))))) (newline) (P10473@rec)))) (P10473@rec))) '#f))) (set! P10325@trace-printer (P1162@P940@make-parameter write)) (set! P10327@command-line (P1162@P940@make-parameter (get-command-line))) (set! P10329@local-library-path (lambda (P10508@filename) (cons (expand-path '".") (P1772@P1409@library-path)))) (set! P10331@load/args (lambda (P10510@filename . P10512@args) (begin (apply P10347@load-r6rs-top-level P10510@filename 'load P10512@args) (void)))) (set! P10333@load (lambda (P10514@filename) (begin (apply P10347@load-r6rs-top-level P10514@filename 'load (P10327@command-line)) (void)))) (set! P10335@ironscheme-build (lambda () (P10333@load '"ironscheme-buildscript.ss"))) (set! P10337@eval-top-level (lambda (P10516@x) (P9341@P2962@eval P10516@x (P9363@P3006@interaction-environment)))) (set! P10339@compile-system-libraries (lambda () (P10337@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! P10341@compile (lambda (P10518@filename) (P10347@load-r6rs-top-level P10518@filename 'compile))) (set! P10343@compile->closure (lambda (P10520@filename) (P10347@load-r6rs-top-level P10520@filename 'closure))) (set! P10345@pre-compile-r6rs-file (lambda (P10522@filename) (P10347@load-r6rs-top-level P10522@filename 'compile))) (set! P10347@load-r6rs-top-level (lambda (P10524@filename P10525@how . P10528@args) ((lambda (P10532@P10530@library-path P10533@P10531@library-path) ((lambda (P10536@swap) (dynamic-wind P10536@swap (lambda () ((lambda (P10538@x*) ((lambda (P10540@t) (if (memv P10540@t '(closure)) (P9362@P3004@pre-compile-r6rs-top-level P10538@x*) (if (memv P10540@t '(load)) ((lambda (P10544@P10542@command-line P10545@P10543@command-line) ((lambda (P10548@swap) (dynamic-wind P10548@swap (lambda () ((P9361@P3002@compile-r6rs-top-level P10538@x*))) P10548@swap)) (lambda () ((lambda (P10550@t) (begin (P10544@P10542@command-line P10545@P10543@command-line) (set! P10545@P10543@command-line P10550@t))) (P10544@P10542@command-line))))) P10327@command-line (cons P10524@filename (car P10528@args))) (if (memv P10540@t '(compile)) (begin (P9361@P3002@compile-r6rs-top-level P10538@x*) (P1776@P1417@serialize-all P1157@P930@serialize-library P1247@P1176@compile-core-expr)) (if '#f '#f (void)))))) P10525@how)) (with-input-from-file P10524@filename (lambda () ((letrec ((P10552@f (lambda () ((lambda (P10554@x) (if (eof-object? P10554@x) '() (cons P10554@x (P10552@f)))) (P1149@P914@read-annotated))))) P10552@f)))))) P10536@swap)) (lambda () ((lambda (P10556@t) (begin (P10532@P10530@library-path P10533@P10531@library-path) (set! P10533@P10531@library-path P10556@t))) (P10532@P10530@library-path))))) P1772@P1409@library-path (P10329@local-library-path P10524@filename)))) (begin (set! P10577@P10347@load-r6rs-top-level P10347@load-r6rs-top-level) (set! P10576@P10345@pre-compile-r6rs-file P10345@pre-compile-r6rs-file) (set! P10575@P10343@compile->closure P10343@compile->closure) (set! P10574@P10341@compile P10341@compile) (set! P10573@P10339@compile-system-libraries P10339@compile-system-libraries) (set! P10572@P10337@eval-top-level P10337@eval-top-level) (set! P10571@P10335@ironscheme-build P10335@ironscheme-build) (set! P10570@P10333@load P10333@load) (set! P10569@P10331@load/args P10331@load/args) (set! P10568@P10329@local-library-path P10329@local-library-path) (set! P10567@P10327@command-line P10327@command-line) (set! P10566@P10325@trace-printer P10325@trace-printer) (set! P10565@P10323@repl P10323@repl) (set! P10564@P10321@map-with-index P10321@map-with-index) (set! P10563@P10319@record->field-alist P10319@record->field-alist) (set! P10562@P10317@condition-printer P10317@condition-printer) (set! P10561@P10315@conditioon-printer P10315@conditioon-printer) (set! P10560@P10313@for-each-with-index P10313@for-each-with-index) (set! P10559@P10311@parse-and-add-library-path P10311@parse-and-add-library-path) (set! P10558@P10309@add-library-path! P10309@add-library-path!) (P1777@P1419@current-precompiled-library-loader P1158@P932@load-serialized-library) (set-symbol-value! 'load P10333@load) (set-symbol-value! 'pre-compile-r6rs-file P10345@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs P10337@eval-top-level) (set-symbol-value! 'int-env-syms P9332@P2944@interaction-environment-symbols) (set-symbol-value! 'expanded2core P1246@P1174@expanded->core) (set-symbol-value! 'trace-printer P10325@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (P10348@c) (condition (P10146@P9650@make-non-continuable-violation) (P10136@P9625@make-who-condition 'raise) (P10076@P9468@make-message-condition '"returned from non-continuable exception") (P10126@P9599@make-irritants-condition (list P10348@c))))) (P10311@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (P10311@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (P1772@P1409@library-path (append (P1772@P1409@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (P10350@prefix) (P1773@P1411@library-extensions (P10350@prefix '".mosh" (P1773@P1411@library-extensions)))) (lambda (P10352@ext P10353@ls) (append (map (lambda (P10356@x) (string-append P10352@ext P10356@x)) P10353@ls) P10353@ls))) ((lambda (P10358@args P10359@port) ((lambda (P10363@ref) (begin (set! P10363@ref (lambda (P10366@rtd P10367@i P10368@x) ((lambda (P10372@val) (if (symbol? P10372@val) (ungensym P10372@val) P10372@val)) ((record-accessor P10366@rtd P10367@i) P10368@x)))) (with-exception-handler (lambda (P10364@c) (if (condition? P10364@c) (P10315@conditioon-printer P10364@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" P10364@c))) (lambda () (if (null? P10358@args) (P10323@repl) (P10347@load-r6rs-top-level (car P10358@args) 'load (cdr P10358@args))))))) '#f)) (P10327@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
