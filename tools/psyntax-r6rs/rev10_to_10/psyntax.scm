;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (b2864@library-file-path->cache-path b2866@read-annotated b2868@annotation-stripped b286a@annotation? b286c@annotation-source b286e@annotation-expression b2870@scm->fasl b2872@fasl-save b2874@fasl-load b2876@serialize-library b2878@load-serialized-library b287a@make-record-printer b287c@compile-core b287e@read-library-source-file b2880@make-parameter b2882@mosh-cache-dir b2918@file-options-spec) (begin (set! b2864@library-file-path->cache-path (lambda (b2919@x) (call-with-values (lambda () (open-string-output-port)) (lambda (b291f@b291c b2920@b291e) ((lambda (b2923@extract b2924@p) ((lambda (b2928@display-hex) (begin (set! b2928@display-hex (lambda (b2931@n) (if (<= '0 b2931@n '9) (display b2931@n b2924@p) (display (integer->char (+ (char->integer '#\a) (- b2931@n '10))) b2924@p)))) (begin ((letrec ((b2929@f (lambda (b292b@ls) (if (not (null? b292b@ls)) (begin (display '"_" b2924@p) (for-each (lambda (b292d@c) (if (or (char<=? '#\a b292d@c '#\z) (char<=? '#\A b292d@c '#\Z) (char<=? '#\0 b292d@c '#\9) (memv b292d@c '(#\- #\. #\_ #\~))) (display b292d@c b2924@p) (begin (display '"%" b2924@p) ((lambda (b292f@n) (begin (b2928@display-hex (quotient b292f@n '16)) (b2928@display-hex (remainder b292f@n '16)))) (char->integer b292d@c))))) (string->list (car b292b@ls))) (b2929@f (cdr b292b@ls))) (void))))) b2929@f) (string-split b2919@x '#\/)) (b2923@extract)))) '#f)) b2920@b291e b291f@b291c))))) (set! b2866@read-annotated read) (set! b2868@annotation-stripped (lambda (b2933@x) (b286e@annotation-expression b2933@x))) (set! b286a@annotation? (lambda (b2935@x) (source-info b2935@x))) (set! b286c@annotation-source (lambda (b2937@x) (source-info b2937@x))) (set! b286e@annotation-expression (lambda (b2939@x) (if (pair? b2939@x) (cons (car b2939@x) (cdr b2939@x)) (display '"line:46\n")))) (set! b2870@scm->fasl (lambda (b293b@filename) (string-append (b2882@mosh-cache-dir) '"/" (b2864@library-file-path->cache-path b293b@filename) '".mosh-fasl"))) (set! b2872@fasl-save (lambda (b293d@filename b293e@obj) (call-with-port (open-file-output-port b293d@filename) (lambda (b2941@port) ((symbol-value 'fasl-write!) b293e@obj b2941@port))))) (set! b2874@fasl-load (lambda (b2943@filename) (call-with-port (open-file-input-port b2943@filename) (symbol-value 'fasl-read!)))) (set! b2876@serialize-library (lambda (b2945@filename b2946@obj) (begin (format '#t '"serialize-library ~a\n..." b2945@filename) ((lambda (b2949@expanded2core) ((lambda (b294b@compile) ((lambda (b294d@code) ((lambda (b294f@pivot) ((lambda (b2951@visit) ((lambda () (begin (set-car! b294f@pivot b2951@visit) ((lambda (b2953@pivot) ((lambda (b2955@invoke) ((lambda () (set-car! b2953@pivot b2955@invoke)))) (b294b@compile (b2949@expanded2core (car b2953@pivot))))) (cdr b294f@pivot)))))) (b294b@compile (b2949@expanded2core (car b294f@pivot))))) (cddddr (cddddr b294d@code)))) b2946@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (b2957@fasl-file) (begin (if (file-exists? b2957@fasl-file) (delete-file b2957@fasl-file) (void)) ((call/cc (lambda (b295b@b2959) (lambda () (with-exception-handler (lambda (b295d@c) ((call/cc (lambda (b295f@b295a) (b295b@b2959 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " b2945@filename) (if (file-exists? b2957@fasl-file) (delete-file b2957@fasl-file) (void)) '#f) (b295f@b295a (lambda () (raise-continuable b295d@c)))))))))) (lambda () (begin (b2872@fasl-save b2957@fasl-file b2946@obj) (display '"OK\n")))))))))) (b2870@scm->fasl b2945@filename))))) (set! b2878@load-serialized-library (lambda (b2961@filename b2962@obj) ((lambda (b2965@fasl-file) (if (and (file-exists? b2965@fasl-file) ((symbol-value 'file-newer?) b2965@fasl-file b2961@filename)) ((lambda (b2967@expanded2core) ((lambda (b2969@eval-compiled-core) ((lambda (b296b@code) ((lambda (b296d@pivot) ((lambda (b296f@visit) ((lambda (b2971@visit-proc) ((lambda () (begin (set-car! b296d@pivot b2971@visit-proc) ((lambda (b2973@pivot) ((lambda (b2975@invoke) ((lambda () (begin (set-car! b2973@pivot (lambda () (b2969@eval-compiled-core b2975@invoke))) (apply b2962@obj b296b@code))))) (car b2973@pivot))) (cdr b296d@pivot)))))) (lambda () (b2969@eval-compiled-core b296f@visit)))) (car b296d@pivot))) (cddddr (cddddr b296b@code)))) (b2874@fasl-load b2965@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (b2870@scm->fasl b2961@filename)))) (set! b287a@make-record-printer (lambda (b2977@name b2978@printer) (lambda b297b@x (begin (display '"record printer") (for-each display b297b@x))))) (set! b287c@compile-core (lambda b297d@x (apply error 'comile-core '"not implementated" b297d@x))) (set! b287e@read-library-source-file (lambda (b297f@file-name) (with-input-from-file b297f@file-name b2866@read-annotated))) (set! b2880@make-parameter (lambda b298f ((lambda (b2990) (if (= b2990 '1) (apply (lambda (b2981@x) (b2880@make-parameter b2981@x (lambda (b2983@x) b2983@x))) b298f) (if (= b2990 '2) (apply (lambda (b2985@x b2986@fender) ((lambda (b2989@x) (lambda b298d ((lambda (b298e) (if (= b298e '0) (apply (lambda () b2989@x) b298d) (if (= b298e '1) (apply (lambda (b298b@v) (set! b2989@x (b2986@fender b298b@v))) b298d) (error 'apply '"invalid arg count")))) (length b298d)))) (b2986@fender b2985@x))) b298f) (error 'apply '"invalid arg count")))) (length b298f)))) (set! b2882@mosh-cache-dir (b2880@make-parameter '#f)) (set! b2918@file-options-spec (lambda (b2991@x) b2991@x)) (begin (set! b29a3@b2918@file-options-spec b2918@file-options-spec) (set! b29a2@b2882@mosh-cache-dir b2882@mosh-cache-dir) (set! b29a1@b2880@make-parameter b2880@make-parameter) (set! b29a0@b287e@read-library-source-file b287e@read-library-source-file) (set! b299f@b287c@compile-core b287c@compile-core) (set! b299e@b287a@make-record-printer b287a@make-record-printer) (set! b299d@b2878@load-serialized-library b2878@load-serialized-library) (set! b299c@b2876@serialize-library b2876@serialize-library) (set! b299b@b2874@fasl-load b2874@fasl-load) (set! b299a@b2872@fasl-save b2872@fasl-save) (set! b2999@b2870@scm->fasl b2870@scm->fasl) (set! b2998@b286e@annotation-expression b286e@annotation-expression) (set! b2997@b286c@annotation-source b286c@annotation-source) (set! b2996@b286a@annotation? b286a@annotation?) (set! b2995@b2868@annotation-stripped b2868@annotation-stripped) (set! b2994@b2866@read-annotated b2866@read-annotated) (set! b2993@b2864@library-file-path->cache-path b2864@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (b29a9@current-primitive-locations b29ab@mutable? b29ad@rewriter b29af@expanded->core b29b1@compile-core-expr b29b3@pretty-print b29b5@compile-core-expr-to-port) (begin (set! b29a9@current-primitive-locations (b29a1@b2880@make-parameter (lambda (b29b6@x) '#f) (lambda (b29b8@p) b29b8@p))) (set! b29ab@mutable? (lambda (b29ba@x) (or (pair? b29ba@x) (vector? b29ba@x) (hashtable? b29ba@x)))) (set! b29ad@rewriter (lambda (b29bc@quote-hack?) ((lambda (b29bf@f) (begin (set! b29bf@f (lambda (b29c0@x) (if (pair? b29c0@x) ((lambda (b29c2@t) (if (memv b29c2@t '(quote)) (if (and b29bc@quote-hack? (b29ab@mutable? (cadr b29c0@x))) ((lambda (b29c4@g) (begin (set-symbol-value! b29c4@g (cadr b29c0@x)) b29c4@g)) (gensym)) b29c0@x) (if (memv b29c2@t '(case-lambda)) (cons 'case-lambda (map (lambda (b29c6@x) (cons (car b29c6@x) (map b29bf@f (cdr b29c6@x)))) (cdr b29c0@x))) (if (memv b29c2@t '(lambda)) (cons* 'lambda (cadr b29c0@x) (map b29bf@f (cddr b29c0@x))) (if (memv b29c2@t '(letrec)) ((lambda (b29c8@bindings b29c9@body*) ((lambda (b29cc@lhs* b29cd@rhs*) (cons* 'letrec (map list b29cc@lhs* (map b29bf@f b29cd@rhs*)) (map b29bf@f b29c9@body*))) (map car b29c8@bindings) (map cadr b29c8@bindings))) (cadr b29c0@x) (cddr b29c0@x)) (if (memv b29c2@t '(letrec*)) ((lambda (b29d0@bindings b29d1@body*) ((lambda (b29d4@lhs* b29d5@rhs*) (cons* 'letrec* (map list b29d4@lhs* (map b29bf@f b29d5@rhs*)) (map b29bf@f b29d1@body*))) (map car b29d0@bindings) (map cadr b29d0@bindings))) (cadr b29c0@x) (cddr b29c0@x)) (if (memv b29c2@t '(library-letrec*)) ((lambda (b29d8@name b29d9@x) ((lambda (b29dc@bindings b29dd@body*) ((lambda (b29e0@lhs* b29e1@lhs** b29e2@rhs*) (cons* 'library-letrec* b29d8@name (map list b29e0@lhs* b29e1@lhs** (map b29bf@f b29e2@rhs*)) (map b29bf@f b29dd@body*))) (map car b29dc@bindings) (map cadr b29dc@bindings) (map caddr b29dc@bindings))) (cadr b29d9@x) (cddr b29d9@x))) (cadr b29c0@x) (cdr b29c0@x)) (if (memv b29c2@t '(begin)) (cons 'begin (map b29bf@f (cdr b29c0@x))) (if (memv b29c2@t '(set!)) (list 'set! (cadr b29c0@x) (b29bf@f (caddr b29c0@x))) (if (memv b29c2@t '(primitive)) ((lambda (b29e6@op) ((lambda (b29e8@t) (if b29e8@t ((lambda (b29ea@loc) b29ea@loc) b29e8@t) b29e6@op)) ((b29a9@current-primitive-locations) b29e6@op))) (cadr b29c0@x)) (if (memv b29c2@t '(define)) b29c0@x (if (list? b29c0@x) (map b29bf@f b29c0@x) (error 'rewrite '"invalid form ~s ~s" b29c0@x (list? b29c0@x)))))))))))))) (car b29c0@x)) b29c0@x))) b29bf@f)) '#f))) (set! b29af@expanded->core (lambda (b29ec@x) ((b29ad@rewriter '#f) b29ec@x))) (set! b29b1@compile-core-expr (lambda (b29ee@x) ((b29ad@rewriter '#f) b29ee@x))) (set! b29b3@pretty-print write) (set! b29b5@compile-core-expr-to-port (lambda (b29f0@x b29f1@p) (b29b3@pretty-print ((b29ad@rewriter '#f) b29f0@x) b29f1@p))) (begin (set! b29fa@b29b5@compile-core-expr-to-port b29b5@compile-core-expr-to-port) (set! b29f9@b29b3@pretty-print b29b3@pretty-print) (set! b29f8@b29b1@compile-core-expr b29b1@compile-core-expr) (set! b29f7@b29af@expanded->core b29af@expanded->core) (set! b29f6@b29ad@rewriter b29ad@rewriter) (set! b29f5@b29ab@mutable? b29ab@mutable?) (set! b29f4@b29a9@current-primitive-locations b29a9@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (b2a49@make-collection b2a4b@current-library-collection b2a4d@rp b2a57@library? b2a59@library-id b2a5b@set-library-id! b2a5d@library-name b2a5f@set-library-name! b2a61@library-version b2a63@set-library-version! b2a65@library-imp* b2a67@set-library-imp*! b2a69@library-vis* b2a6b@set-library-vis*! b2a6d@library-inv* b2a6f@set-library-inv*! b2a71@library-subst b2a73@set-library-subst! b2a75@library-env b2a77@set-library-env! b2a79@library-visit-state b2a7b@set-library-visit-state! b2a7d@library-invoke-state b2a7f@set-library-invoke-state! b2a81@library-visit-code b2a83@set-library-visit-code! b2a85@library-invoke-code b2a87@set-library-invoke-code! b2a89@library-visible? b2a8b@set-library-visible?! b2a8d@library-source-file-name b2a8f@set-library-source-file-name! b2a91@dummy b2a93@find-dependencies b2a95@find-library-by b2a97@library-path b2a99@library-extensions b2a9b@library-name->file-name b2a9d@file-locator b2a9f@serialize-all b2aa1@current-precompiled-library-loader b2aa3@try-load-from-file b2aa5@library-loader b2aa7@current-library-expander b2aa9@external-pending-libraries b2aab@find-external-library b2aad@find-library-by-name b2aaf@library-exists? b2ab1@find-library-by-spec/die b2ab3@label->binding-table b2ab5@install-library-record b2ab7@install-library b2ab9@imported-label->binding b2abb@invoke-library b2abd@visit-library b2abf@invoke-library-by-spec b2ac1@installed-libraries b2ac3@library-spec) (begin (set! b2a49@make-collection (lambda () ((lambda (b2ac4@set) ((lambda (b2ac7@set-cons) (begin (set! b2ac7@set-cons (lambda (b2acc@x b2acd@ls) (if (memq b2acc@x b2acd@ls) b2acd@ls (cons b2acc@x b2acd@ls)))) (lambda b2aca ((lambda (b2acb) (if (= b2acb '0) (apply (lambda () b2ac4@set) b2aca) (if (= b2acb '1) (apply (lambda (b2ac8@x) (set! b2ac4@set (b2ac7@set-cons b2ac8@x b2ac4@set))) b2aca) (error 'apply '"invalid arg count")))) (length b2aca))))) '#f)) '()))) (set! b2a4b@current-library-collection (b29a1@b2880@make-parameter (b2a49@make-collection) (lambda (b2ad0@x) (begin (if (not (procedure? b2ad0@x)) (assertion-violation 'current-library-collection '"not a procedure" b2ad0@x) (void)) b2ad0@x)))) (set! b2a4d@rp (b299e@b287a@make-record-printer 'library (lambda (b2ad2@x b2ad3@p b2ad4@wr) (begin (if (not (b2a57@library? b2ad2@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (b2a61@library-version b2ad2@x)) (b2a5d@library-name b2ad2@x) (append (b2a5d@library-name b2ad2@x) (list (b2a61@library-version b2ad2@x))))) b2ad3@p))))) (set! b2a57@library? (lambda (b2ad8@x) (and (simple-struct? b2ad8@x) (eq? (simple-struct-name b2ad8@x) 'library)))) (set! b2a59@library-id (lambda (b2ada@x) (simple-struct-ref b2ada@x '0))) (set! b2a5b@set-library-id! (lambda (b2adc@x b2add@val) (simple-struct-set! b2adc@x '0 b2add@val))) (set! b2a5d@library-name (lambda (b2ae0@x) (simple-struct-ref b2ae0@x '1))) (set! b2a5f@set-library-name! (lambda (b2ae2@x b2ae3@val) (simple-struct-set! b2ae2@x '1 b2ae3@val))) (set! b2a61@library-version (lambda (b2ae6@x) (simple-struct-ref b2ae6@x '2))) (set! b2a63@set-library-version! (lambda (b2ae8@x b2ae9@val) (simple-struct-set! b2ae8@x '2 b2ae9@val))) (set! b2a65@library-imp* (lambda (b2aec@x) (simple-struct-ref b2aec@x '3))) (set! b2a67@set-library-imp*! (lambda (b2aee@x b2aef@val) (simple-struct-set! b2aee@x '3 b2aef@val))) (set! b2a69@library-vis* (lambda (b2af2@x) (simple-struct-ref b2af2@x '4))) (set! b2a6b@set-library-vis*! (lambda (b2af4@x b2af5@val) (simple-struct-set! b2af4@x '4 b2af5@val))) (set! b2a6d@library-inv* (lambda (b2af8@x) (simple-struct-ref b2af8@x '5))) (set! b2a6f@set-library-inv*! (lambda (b2afa@x b2afb@val) (simple-struct-set! b2afa@x '5 b2afb@val))) (set! b2a71@library-subst (lambda (b2afe@x) (simple-struct-ref b2afe@x '6))) (set! b2a73@set-library-subst! (lambda (b2b00@x b2b01@val) (simple-struct-set! b2b00@x '6 b2b01@val))) (set! b2a75@library-env (lambda (b2b04@x) (simple-struct-ref b2b04@x '7))) (set! b2a77@set-library-env! (lambda (b2b06@x b2b07@val) (simple-struct-set! b2b06@x '7 b2b07@val))) (set! b2a79@library-visit-state (lambda (b2b0a@x) (simple-struct-ref b2b0a@x '8))) (set! b2a7b@set-library-visit-state! (lambda (b2b0c@x b2b0d@val) (simple-struct-set! b2b0c@x '8 b2b0d@val))) (set! b2a7d@library-invoke-state (lambda (b2b10@x) (simple-struct-ref b2b10@x '9))) (set! b2a7f@set-library-invoke-state! (lambda (b2b12@x b2b13@val) (simple-struct-set! b2b12@x '9 b2b13@val))) (set! b2a81@library-visit-code (lambda (b2b16@x) (simple-struct-ref b2b16@x '10))) (set! b2a83@set-library-visit-code! (lambda (b2b18@x b2b19@val) (simple-struct-set! b2b18@x '10 b2b19@val))) (set! b2a85@library-invoke-code (lambda (b2b1c@x) (simple-struct-ref b2b1c@x '11))) (set! b2a87@set-library-invoke-code! (lambda (b2b1e@x b2b1f@val) (simple-struct-set! b2b1e@x '11 b2b1f@val))) (set! b2a89@library-visible? (lambda (b2b22@x) (simple-struct-ref b2b22@x '12))) (set! b2a8b@set-library-visible?! (lambda (b2b24@x b2b25@val) (simple-struct-set! b2b24@x '12 b2b25@val))) (set! b2a8d@library-source-file-name (lambda (b2b28@x) (simple-struct-ref b2b28@x '13))) (set! b2a8f@set-library-source-file-name! (lambda (b2b2a@x b2b2b@val) (simple-struct-set! b2b2a@x '13 b2b2b@val))) (set! b2a91@dummy '3) (set! b2a93@find-dependencies (lambda (b2b2e@ls) (if (null? b2b2e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! b2a95@find-library-by (lambda (b2b30@pred) ((letrec ((b2b32@f (lambda (b2b34@ls) (if (null? b2b34@ls) '#f (if (b2b30@pred (car b2b34@ls)) (car b2b34@ls) (b2b32@f (cdr b2b34@ls))))))) b2b32@f) ((b2a4b@current-library-collection))))) (set! b2a97@library-path (b29a1@b2880@make-parameter '(".") (lambda (b2b36@x) (if (and (list? b2b36@x) (for-all string? b2b36@x)) (map (lambda (b2b38@x) b2b38@x) b2b36@x) (assertion-violation 'library-path '"not a list of strings" b2b36@x))))) (set! b2a99@library-extensions (b29a1@b2880@make-parameter '(".sls" ".ss" ".scm") (lambda (b2b3a@x) (if (and (list? b2b3a@x) (for-all string? b2b3a@x)) (map (lambda (b2b3c@x) b2b3c@x) b2b3a@x) (assertion-violation 'library-extensions '"not a list of strings" b2b3a@x))))) (set! b2a9b@library-name->file-name (lambda (b2b3e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (b2b44@b2b41 b2b45@b2b43) ((lambda (b2b48@extract b2b49@p) ((lambda (b2b4d@display-hex) (begin (set! b2b4d@display-hex (lambda (b2b56@n) (if (<= '0 b2b56@n '9) (display b2b56@n b2b49@p) (display (integer->char (+ (char->integer '#\a) (- b2b56@n '10))) b2b49@p)))) (begin ((letrec ((b2b4e@f (lambda (b2b50@ls) (if (not (null? b2b50@ls)) (begin (display '"/" b2b49@p) (for-each (lambda (b2b52@c) (if (or (char<=? '#\a b2b52@c '#\z) (char<=? '#\A b2b52@c '#\Z) (char<=? '#\0 b2b52@c '#\9) (memv b2b52@c '(#\- #\. #\_ #\~))) (display b2b52@c b2b49@p) (begin (display '"%" b2b49@p) ((lambda (b2b54@n) (begin (b2b4d@display-hex (quotient b2b54@n '16)) (b2b4d@display-hex (remainder b2b54@n '16)))) (char->integer b2b52@c))))) (string->list (symbol->string (car b2b50@ls)))) (b2b4e@f (cdr b2b50@ls))) (void))))) b2b4e@f) b2b3e@x) (b2b48@extract)))) '#f)) b2b45@b2b43 b2b44@b2b41))))) (set! b2a9d@file-locator (b29a1@b2880@make-parameter (lambda (b2b58@x) ((lambda (b2b5a@str) ((letrec ((b2b5c@f (lambda (b2b5e@ls b2b5f@exts b2b60@failed-list) (if (null? b2b5e@ls) ((lambda () ((lambda (b2b6c@b2b67 b2b6e@b2b69 b2b70@b2b68 b2b73@b2b66 b2b75@make-library-resolution-condition b2b77@b2b64 b2b79@b2b65 b2b7b@library-resolution-condition? b2b7d@condition-library b2b7f@condition-files) (begin (set! b2b6c@b2b67 (make-record-type-descriptor '&library-resolution b4e16@b4b5d@&condition-rtd 'b2b6a '#f '#f '#((immutable library) (immutable files)))) (set! b2b6e@b2b69 '#f) (set! b2b70@b2b68 (make-record-constructor-descriptor b2b6c@b2b67 b4e17@b4b5f@&condition-rcd b2b6e@b2b69)) (set! b2b73@b2b66 (record-predicate b2b6c@b2b67)) (set! b2b75@make-library-resolution-condition (record-constructor b2b70@b2b68)) (set! b2b77@b2b64 (record-accessor b2b6c@b2b67 '0)) (set! b2b79@b2b65 (record-accessor b2b6c@b2b67 '1)) (set! b2b7b@library-resolution-condition? (condition-predicate b2b6c@b2b67)) (set! b2b7d@condition-library (condition-accessor b2b6c@b2b67 b2b77@b2b64)) (set! b2b7f@condition-files (condition-accessor b2b6c@b2b67 b2b79@b2b65)) (raise (condition (b4e36@b4bf7@make-error) (b4e58@b4c53@make-who-condition 'expander) (b4e1c@b4bb4@make-message-condition '"cannot locate library in library-path") (b2b75@make-library-resolution-condition b2b58@x (reverse b2b60@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? b2b5f@exts) (b2b5c@f (cdr b2b5e@ls) (b2a99@library-extensions) b2b60@failed-list) ((lambda (b2b80@name) (if (file-exists? b2b80@name) b2b80@name (b2b5c@f b2b5e@ls (cdr b2b5f@exts) (cons b2b80@name b2b60@failed-list)))) (string-append (car b2b5e@ls) b2b5a@str (car b2b5f@exts)))))))) b2b5c@f) (b2a97@library-path) (b2a99@library-extensions) '())) (b2a9b@library-name->file-name b2b58@x))) (lambda (b2b82@f) (if (procedure? b2b82@f) b2b82@f (assertion-violation 'file-locator '"not a procedure" b2b82@f))))) (set! b2a9f@serialize-all (lambda (b2b84@serialize b2b85@compile) ((lambda (b2b89@library-desc) (begin (set! b2b89@library-desc (lambda (b2b8c@x) (list (b2a59@library-id b2b8c@x) (b2a5d@library-name b2b8c@x)))) (for-each (lambda (b2b8a@x) (if (b2a8d@library-source-file-name b2b8a@x) (b2b84@serialize (b2a8d@library-source-file-name b2b8a@x) (list (b2a59@library-id b2b8a@x) (b2a5d@library-name b2b8a@x) (b2a61@library-version b2b8a@x) (map b2b89@library-desc (b2a65@library-imp* b2b8a@x)) (map b2b89@library-desc (b2a69@library-vis* b2b8a@x)) (map b2b89@library-desc (b2a6d@library-inv* b2b8a@x)) (b2a71@library-subst b2b8a@x) (b2a75@library-env b2b8a@x) (b2b85@compile (b2a81@library-visit-code b2b8a@x)) (b2b85@compile (b2a85@library-invoke-code b2b8a@x)) (b2a89@library-visible? b2b8a@x))) (void))) ((b2a4b@current-library-collection))))) '#f))) (set! b2aa1@current-precompiled-library-loader (b29a1@b2880@make-parameter (lambda (b2b8e@filename b2b8f@sk) '#f))) (set! b2aa3@try-load-from-file (lambda (b2b92@filename) ((b2aa1@current-precompiled-library-loader) b2b92@filename (lambda b2bb8 ((lambda (b2bb9) (if (= b2bb9 '11) (apply (lambda (b2b94@id b2b95@name b2b96@ver b2b97@imp* b2b98@vis* b2b99@inv* b2b9a@exp-subst b2b9b@exp-env b2b9c@visit-proc b2b9d@invoke-proc b2b9e@visible?) ((letrec ((b2baa@f (lambda (b2bac@deps) (if (null? b2bac@deps) (begin (b2ab7@install-library b2b94@id b2b95@name b2b96@ver b2b97@imp* b2b98@vis* b2b99@inv* b2b9a@exp-subst b2b9b@exp-env b2b9c@visit-proc b2b9d@invoke-proc '#f '#f b2b9e@visible? '#f) '#t) ((lambda (b2bae@d) ((lambda (b2bb0@label b2bb1@dname) ((lambda (b2bb4@l) (if (and (b2a57@library? b2bb4@l) (eq? b2bb0@label (b2a59@library-id b2bb4@l))) (b2baa@f (cdr b2bac@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" b2b95@name b2bb1@dname b2b92@filename b2bb4@l b2bb0@label (b2a59@library-id b2bb4@l)) '#f))) (b2aad@find-library-by-name b2bb1@dname))) (car b2bae@d) (cadr b2bae@d))) (car b2bac@deps)))))) b2baa@f) (append b2b97@imp* b2b98@vis* b2b99@inv*))) b2bb8) (if (>= b2bb9 '0) (apply (lambda b2bb6@others '#f) b2bb8) (error 'apply '"invalid arg count")))) (length b2bb8)))))) (set! b2aa5@library-loader (b29a1@b2880@make-parameter (lambda (b2bba@x) ((lambda (b2bbc@file-name) (if (not b2bbc@file-name) (assertion-violation '#f '"cannot file library" b2bba@x) (or (b2aa3@try-load-from-file b2bbc@file-name) ((b2aa7@current-library-expander) (b29a0@b287e@read-library-source-file b2bbc@file-name) b2bbc@file-name (lambda (b2bbe@name) (if (not (fast-equal? b2bbe@name b2bba@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (b2bc4@b2bc1 b2bc5@b2bc3) ((lambda (b2bc8@e b2bc9@p) (begin (display '"expected to find library " b2bc9@p) (write b2bba@x b2bc9@p) (display '" in file " b2bc9@p) (display b2bbc@file-name b2bc9@p) (display '", found " b2bc9@p) (write b2bbe@name b2bc9@p) (display '" instead" b2bc9@p) (b2bc8@e))) b2bc5@b2bc3 b2bc4@b2bc1)))) (void))))))) ((b2a9d@file-locator) b2bba@x))) (lambda (b2bcc@f) (if (procedure? b2bcc@f) b2bcc@f (assertion-violation 'library-locator '"not a procedure" b2bcc@f))))) (set! b2aa7@current-library-expander (b29a1@b2880@make-parameter (lambda (b2bce@x) (assertion-violation 'library-expander '"not initialized")) (lambda (b2bd0@f) (if (procedure? b2bd0@f) b2bd0@f (assertion-violation 'library-expander '"not a procedure" b2bd0@f))))) (set! b2aa9@external-pending-libraries (b29a1@b2880@make-parameter '())) (set! b2aab@find-external-library (lambda (b2bd2@name) (begin (if (member b2bd2@name (b2aa9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" b2bd2@name) (void)) ((lambda (b2bd8@b2bd5 b2bd9@b2bd7) ((lambda (b2bdc@swap) (dynamic-wind b2bdc@swap (lambda () (begin ((b2aa5@library-loader) b2bd2@name) (or (b2a95@find-library-by (lambda (b2bde@x) (fast-equal? (b2a5d@library-name b2bde@x) b2bd2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" b2bd2@name)))) b2bdc@swap)) (lambda () ((lambda (b2be0@t) (begin (b2bd8@b2bd5 b2bd9@b2bd7) (set! b2bd9@b2bd7 b2be0@t))) (b2bd8@b2bd5))))) b2aa9@external-pending-libraries (cons b2bd2@name (b2aa9@external-pending-libraries)))))) (set! b2aad@find-library-by-name (lambda (b2be2@name) (or (b2a95@find-library-by (lambda (b2be4@x) (fast-equal? (b2a5d@library-name b2be4@x) b2be2@name))) (b2aab@find-external-library b2be2@name)))) (set! b2aaf@library-exists? (lambda (b2be6@name) (and (b2a95@find-library-by (lambda (b2be8@x) (fast-equal? (b2a5d@library-name b2be8@x) b2be6@name))) '#t))) (set! b2ab1@find-library-by-spec/die (lambda (b2bea@spec) ((lambda (b2bec@id) (or (b2a95@find-library-by (lambda (b2bee@x) (eq? b2bec@id (b2a59@library-id b2bee@x)))) (assertion-violation '#f '"cannot find library with required spec" b2bea@spec))) (car b2bea@spec)))) (set! b2ab3@label->binding-table (make-eq-hashtable)) (set! b2ab5@install-library-record (lambda (b2bf0@lib) (begin ((lambda (b2bf2@exp-env) (for-each (lambda (b2bf4@x) ((lambda (b2bf6@label b2bf7@binding) ((lambda (b2bfa@binding) (begin (if (hashtable-ref b2ab3@label->binding-table b2bf6@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" b2bf6@label (hashtable-ref b2ab3@label->binding-table b2bf6@label '#f) b2bfa@binding) (exit)) (void)) (hashtable-set! b2ab3@label->binding-table b2bf6@label b2bfa@binding))) ((lambda (b2bfc@t) (if (memv b2bfc@t '(global)) (cons 'global (cons b2bf0@lib (cdr b2bf7@binding))) (if (memv b2bfc@t '(global-macro)) (cons 'global-macro (cons b2bf0@lib (cdr b2bf7@binding))) (if (memv b2bfc@t '(global-macro!)) (cons 'global-macro! (cons b2bf0@lib (cdr b2bf7@binding))) b2bf7@binding)))) (car b2bf7@binding)))) (car b2bf4@x) (cdr b2bf4@x))) b2bf2@exp-env)) (b2a75@library-env b2bf0@lib)) ((b2a4b@current-library-collection) b2bf0@lib)))) (set! b2ab7@install-library (lambda (b2bfe@id b2bff@name b2c00@ver b2c01@imp* b2c02@vis* b2c03@inv* b2c04@exp-subst b2c05@exp-env b2c06@visit-proc b2c07@invoke-proc b2c08@visit-code b2c09@invoke-code b2c0a@visible? b2c0b@source-file-name) ((lambda (b2c1a@imp-lib* b2c1b@vis-lib* b2c1c@inv-lib*) (begin (if (not (and (symbol? b2bfe@id) (list? b2bff@name) (list? b2c00@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" b2bfe@id b2bff@name b2c00@ver) (void)) (if (b2aaf@library-exists? b2bff@name) (assertion-violation 'install-library '"library is already installed" b2bff@name) (void)) ((lambda (b2c20@lib) (b2ab5@install-library-record b2c20@lib)) (make-simple-struct 'library '15 (list b2bfe@id b2bff@name b2c00@ver b2c1a@imp-lib* b2c1b@vis-lib* b2c1c@inv-lib* b2c04@exp-subst b2c05@exp-env b2c06@visit-proc b2c07@invoke-proc b2c08@visit-code b2c09@invoke-code b2c0a@visible? b2c0b@source-file-name))))) (map b2ab1@find-library-by-spec/die b2c01@imp*) (map b2ab1@find-library-by-spec/die b2c02@vis*) (map b2ab1@find-library-by-spec/die b2c03@inv*)))) (set! b2ab9@imported-label->binding (lambda (b2c22@lab) (hashtable-ref b2ab3@label->binding-table b2c22@lab '#f))) (set! b2abb@invoke-library (lambda (b2c24@lib) ((lambda (b2c26@invoke) (if (procedure? b2c26@invoke) (begin (b2a7f@set-library-invoke-state! b2c24@lib (lambda () (assertion-violation 'invoke '"circularity detected" b2c24@lib))) (for-each b2abb@invoke-library (b2a6d@library-inv* b2c24@lib)) (b2a7f@set-library-invoke-state! b2c24@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" b2c24@lib))) (b2c26@invoke) (b2a7f@set-library-invoke-state! b2c24@lib '#t)) (void))) (b2a7d@library-invoke-state b2c24@lib)))) (set! b2abd@visit-library (lambda (b2c28@lib) ((lambda (b2c2a@visit) (if (procedure? b2c2a@visit) (begin (b2a7b@set-library-visit-state! b2c28@lib (lambda () (assertion-violation 'visit '"circularity detected" b2c28@lib))) (for-each b2abb@invoke-library (b2a69@library-vis* b2c28@lib)) (b2a7b@set-library-visit-state! b2c28@lib (lambda () (assertion-violation 'invoke '"first visit did not return" b2c28@lib))) (b2c2a@visit) (b2a7b@set-library-visit-state! b2c28@lib '#t)) (void))) (b2a79@library-visit-state b2c28@lib)))) (set! b2abf@invoke-library-by-spec (lambda (b2c2c@spec) (b2abb@invoke-library (b2ab1@find-library-by-spec/die b2c2c@spec)))) (set! b2ac1@installed-libraries (lambda b2c34 ((lambda (b2c35) (if (= b2c35 '1) (apply (lambda (b2c2e@all?) ((letrec ((b2c30@f (lambda (b2c32@ls) (if (null? b2c32@ls) '() (if (or b2c2e@all? (b2a89@library-visible? (car b2c32@ls))) (cons (car b2c32@ls) (b2c30@f (cdr b2c32@ls))) (b2c30@f (cdr b2c32@ls))))))) b2c30@f) ((b2a4b@current-library-collection)))) b2c34) (if (= b2c35 '0) (apply (lambda () (b2ac1@installed-libraries '#f)) b2c34) (error 'apply '"invalid arg count")))) (length b2c34)))) (set! b2ac3@library-spec (lambda (b2c36@x) (begin (if (not (b2a57@library? b2c36@x)) (assertion-violation 'library-spec '"not a library" b2c36@x) (void)) (list (b2a59@library-id b2c36@x) (b2a5d@library-name b2c36@x) (b2a61@library-version b2c36@x))))) (begin (set! b2c71@b2ac3@library-spec b2ac3@library-spec) (set! b2c70@b2ac1@installed-libraries b2ac1@installed-libraries) (set! b2c6f@b2abf@invoke-library-by-spec b2abf@invoke-library-by-spec) (set! b2c6e@b2abd@visit-library b2abd@visit-library) (set! b2c6d@b2abb@invoke-library b2abb@invoke-library) (set! b2c6c@b2ab9@imported-label->binding b2ab9@imported-label->binding) (set! b2c6b@b2ab7@install-library b2ab7@install-library) (set! b2c6a@b2ab5@install-library-record b2ab5@install-library-record) (set! b2c69@b2ab3@label->binding-table b2ab3@label->binding-table) (set! b2c68@b2ab1@find-library-by-spec/die b2ab1@find-library-by-spec/die) (set! b2c67@b2aaf@library-exists? b2aaf@library-exists?) (set! b2c66@b2aad@find-library-by-name b2aad@find-library-by-name) (set! b2c65@b2aab@find-external-library b2aab@find-external-library) (set! b2c64@b2aa9@external-pending-libraries b2aa9@external-pending-libraries) (set! b2c63@b2aa7@current-library-expander b2aa7@current-library-expander) (set! b2c62@b2aa5@library-loader b2aa5@library-loader) (set! b2c61@b2aa3@try-load-from-file b2aa3@try-load-from-file) (set! b2c60@b2aa1@current-precompiled-library-loader b2aa1@current-precompiled-library-loader) (set! b2c5f@b2a9f@serialize-all b2a9f@serialize-all) (set! b2c5e@b2a9d@file-locator b2a9d@file-locator) (set! b2c5d@b2a9b@library-name->file-name b2a9b@library-name->file-name) (set! b2c5c@b2a99@library-extensions b2a99@library-extensions) (set! b2c5b@b2a97@library-path b2a97@library-path) (set! b2c5a@b2a95@find-library-by b2a95@find-library-by) (set! b2c59@b2a93@find-dependencies b2a93@find-dependencies) (set! b2c58@b2a91@dummy b2a91@dummy) (set! b2c57@b2a8f@set-library-source-file-name! b2a8f@set-library-source-file-name!) (set! b2c56@b2a8d@library-source-file-name b2a8d@library-source-file-name) (set! b2c55@b2a8b@set-library-visible?! b2a8b@set-library-visible?!) (set! b2c54@b2a89@library-visible? b2a89@library-visible?) (set! b2c53@b2a87@set-library-invoke-code! b2a87@set-library-invoke-code!) (set! b2c52@b2a85@library-invoke-code b2a85@library-invoke-code) (set! b2c51@b2a83@set-library-visit-code! b2a83@set-library-visit-code!) (set! b2c50@b2a81@library-visit-code b2a81@library-visit-code) (set! b2c4f@b2a7f@set-library-invoke-state! b2a7f@set-library-invoke-state!) (set! b2c4e@b2a7d@library-invoke-state b2a7d@library-invoke-state) (set! b2c4d@b2a7b@set-library-visit-state! b2a7b@set-library-visit-state!) (set! b2c4c@b2a79@library-visit-state b2a79@library-visit-state) (set! b2c4b@b2a77@set-library-env! b2a77@set-library-env!) (set! b2c4a@b2a75@library-env b2a75@library-env) (set! b2c49@b2a73@set-library-subst! b2a73@set-library-subst!) (set! b2c48@b2a71@library-subst b2a71@library-subst) (set! b2c47@b2a6f@set-library-inv*! b2a6f@set-library-inv*!) (set! b2c46@b2a6d@library-inv* b2a6d@library-inv*) (set! b2c45@b2a6b@set-library-vis*! b2a6b@set-library-vis*!) (set! b2c44@b2a69@library-vis* b2a69@library-vis*) (set! b2c43@b2a67@set-library-imp*! b2a67@set-library-imp*!) (set! b2c42@b2a65@library-imp* b2a65@library-imp*) (set! b2c41@b2a63@set-library-version! b2a63@set-library-version!) (set! b2c40@b2a61@library-version b2a61@library-version) (set! b2c3f@b2a5f@set-library-name! b2a5f@set-library-name!) (set! b2c3e@b2a5d@library-name b2a5d@library-name) (set! b2c3d@b2a5b@set-library-id! b2a5b@set-library-id!) (set! b2c3c@b2a59@library-id b2a59@library-id) (set! b2c3b@b2a57@library? b2a57@library?) (set! b2c3a@b2a4d@rp b2a4d@rp) (set! b2c39@b2a4b@current-library-collection b2a4b@current-library-collection) (set! b2c38@b2a49@make-collection b2a49@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (b2c75@build-global-define b2ce6@build-lambda b2ce8@build-case-lambda b2cea@build-let b2d18@build-sequence b2d1a@build-void b2d1c@build-letrec b2d1e@build-letrec* b2d20@build-library-letrec* b2d22@build-receive) (begin (set! b2c75@build-global-define (lambda (b2d23@x) (b2d1a@build-void))) (set! b2ce6@build-lambda (lambda (b2d25@ae b2d26@vars b2d27@exp) (list 'lambda b2d26@vars b2d27@exp))) (set! b2ce8@build-case-lambda (lambda (b2d2b@ae b2d2c@vars* b2d2d@exp*) ((lambda (b2d32@build-error b2d34@build-pred b2d36@build-apply b2d38@expand-case-lambda) (begin (set! b2d32@build-error (lambda (b2d69@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! b2d34@build-pred (lambda (b2d51@ae b2d52@n b2d53@vars) (call-with-values (lambda () ((letrec ((b2d5b@f (lambda (b2d5d@vars b2d5e@count) (if (pair? b2d5d@vars) (b2d5b@f (cdr b2d5d@vars) (+ b2d5e@count '1)) (if (null? b2d5d@vars) (values b2d5e@count '=) (values b2d5e@count '>=)))))) b2d5b@f) b2d53@vars '0)) (lambda (b2d61@b2d58 b2d62@b2d5a) ((lambda (b2d65@pred b2d66@count) (list (list 'primitive b2d65@pred) b2d52@n (list 'quote b2d66@count))) b2d62@b2d5a b2d61@b2d58))))) (set! b2d36@build-apply (lambda (b2d49@ae b2d4a@g b2d4b@vars b2d4c@exp) (list '(primitive apply) (b2ce6@build-lambda b2d49@ae b2d4b@vars b2d4c@exp) b2d4a@g))) (set! b2d38@expand-case-lambda (lambda (b2d39@ae b2d3a@vars b2d3b@exp*) ((lambda (b2d3f@g b2d40@n) (list 'lambda b2d3f@g (b2cea@build-let b2d39@ae (list b2d40@n) (list (list '(primitive length) b2d3f@g)) ((letrec ((b2d43@f (lambda (b2d45@vars* b2d46@exp*) (if (null? b2d45@vars*) (b2d32@build-error b2d39@ae) (list 'if (b2d34@build-pred b2d39@ae b2d40@n (car b2d45@vars*)) (b2d36@build-apply b2d39@ae b2d3f@g (car b2d45@vars*) (car b2d46@exp*)) (b2d43@f (cdr b2d45@vars*) (cdr b2d46@exp*))))))) b2d43@f) b2d2c@vars* b2d3b@exp*)))) (gensym) (gensym)))) (if (= (length b2d2d@exp*) '1) (b2ce6@build-lambda b2d2b@ae (car b2d2c@vars*) (car b2d2d@exp*)) (b2d38@expand-case-lambda b2d2b@ae b2d2c@vars* b2d2d@exp*)))) '#f '#f '#f '#f))) (set! b2cea@build-let (lambda (b2d6b@ae b2d6c@lhs* b2d6d@rhs* b2d6e@body) (cons (b2ce6@build-lambda b2d6b@ae b2d6c@lhs* b2d6e@body) b2d6d@rhs*))) (set! b2d18@build-sequence (lambda (b2d73@ae b2d74@exps) ((letrec ((b2d77@loop (lambda (b2d79@exps) (if (null? (cdr b2d79@exps)) (car b2d79@exps) (if (equal? (car b2d79@exps) (b2d1a@build-void)) (b2d77@loop (cdr b2d79@exps)) (cons 'begin b2d79@exps)))))) b2d77@loop) b2d74@exps))) (set! b2d1a@build-void (lambda () '((primitive void)))) (set! b2d1c@build-letrec (lambda (b2d7b@ae b2d7c@vars b2d7d@val-exps b2d7e@body-exp) (if (null? b2d7c@vars) b2d7e@body-exp (list 'letrec (map list b2d7c@vars b2d7d@val-exps) b2d7e@body-exp)))) (set! b2d1e@build-letrec* (lambda (b2d83@ae b2d84@vars b2d85@val-exps b2d86@body-exp) (if (null? b2d84@vars) b2d86@body-exp (b2cea@build-let b2d83@ae b2d84@vars (map (lambda (b2d8b@x) (list 'quote '#f)) b2d84@vars) (b2d18@build-sequence b2d83@ae (append (map (lambda (b2d8d@lhs b2d8e@rhs) (list 'set! b2d8d@lhs b2d8e@rhs)) b2d84@vars b2d85@val-exps) (list b2d86@body-exp))))))) (set! b2d20@build-library-letrec* (lambda (b2d91@ae b2d92@name b2d93@vars b2d94@locs b2d95@val-exps b2d96@body-exp) (list 'library-letrec* b2d92@name (map list b2d93@vars b2d94@locs b2d95@val-exps) b2d96@body-exp))) (set! b2d22@build-receive (lambda (b2d9d@ae b2d9e@vars b2d9f@producer b2da0@body*) (begin (display '"************** in ") (cons 'receive (cons b2d9e@vars (cons b2d9f@producer b2da0@body*)))))) (begin (set! b2dae@b2d22@build-receive b2d22@build-receive) (set! b2dad@b2d20@build-library-letrec* b2d20@build-library-letrec*) (set! b2dac@b2d1e@build-letrec* b2d1e@build-letrec*) (set! b2dab@b2d1c@build-letrec b2d1c@build-letrec) (set! b2daa@b2d1a@build-void b2d1a@build-void) (set! b2da9@b2d18@build-sequence b2d18@build-sequence) (set! b2da8@b2cea@build-let b2cea@build-let) (set! b2da7@b2ce8@build-case-lambda b2ce8@build-case-lambda) (set! b2da6@b2ce6@build-lambda b2ce6@build-lambda) (set! b2da5@b2c75@build-global-define b2c75@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (b2dbd@file-options-macro b2dbf@set-cons b2dc1@set-union b2dc6@top-mark* b2dc8@top-marked? b2dca@gen-lexical b2dcc@gen-global b2dce@gen-label b2dd0@gen-top-level-label b2dd2@gen-define-label+loc b2dd4@gen-define-label b2dde@rib? b2de0@rib-sym* b2de2@set-rib-sym*! b2de4@rib-mark** b2de6@set-rib-mark**! b2de8@rib-label* b2dea@set-rib-label*! b2dec@rib-sealed/freq b2dee@set-rib-sealed/freq! b2df0@rib-cache b2df2@set-rib-cache! b2df4@dummy b2df6@make-empty-rib b2df8@extend-rib! b2dfa@extend-rib/nc! b2dfc@make-rib-map b2dfe@seal-rib! b2e00@unseal-rib! b2e02@make-full-rib b2e04@rp b2e0e@stx? b2e10@stx-expr b2e12@set-stx-expr! b2e14@stx-mark* b2e16@set-stx-mark*! b2e18@stx-subst* b2e1a@set-stx-subst*! b2e1c@stx-ae* b2e1e@set-stx-ae*! b2e20@dummy b2e22@datum->stx b2e24@gen-mark b2e26@anti-mark b2e28@anti-mark? b2e2a@mkstx b2e2c@add-mark b2e2e@add-subst b2e30@syntax-kind? b2e32@syntax-vector->list b2e34@syntax-pair? b2e36@syntax-vector? b2e38@syntax-null? b2e3a@syntax-list? b2e3c@syntax-car b2e3e@syntax-cdr b2e40@syntax->list b2e42@id? b2e44@id->sym b2e46@bound-id=? b2e48@free-id=? b2e4a@valid-bound-ids? b2e4c@distinct-bound-ids? b2e4e@bound-id-member? b2e50@self-evaluating? b2e52@strip-annotations b2e54@strip b2e56@stx->datum b2e58@id->label b2e5a@label->binding b2e5c@make-binding b2e5e@binding-type b2e60@binding-value b2e62@raise-unbound-error b2e64@syntax-type b2e72@sanitize-binding b2e74@make-variable-transformer b2e76@variable-transformer? b2e78@variable-transformer-procedure b2e7a@make-eval-transformer b2fcb@parse-define b2fcd@parse-define-syntax b2fcf@scheme-stx-hashtable b2fd1@scheme-stx b2fd3@lexical-var b2fd5@lexical-mutable? b2fd7@set-lexical-mutable! b2fd9@add-lexical b2fdb@add-lexicals b2fdd@letrec-helper b2fdf@letrec-transformer b2fe1@letrec*-transformer b2fe3@fluid-let-syntax-transformer b2fe5@type-descriptor-transformer b2fe7@record-type-descriptor-transformer b2fe9@record-constructor-descriptor-transformer b2feb@when-macro b2fed@unless-macro b2fef@if-transformer b2ff1@and-transformer b2ff3@or-transformer b2ff5@case-macro b2ff7@quote-transformer b2ff9@case-lambda-transformer b2ffb@lambda-transformer b2ffd@bless b2fff@with-syntax-macro b3001@invalid-fmls-error b3003@let-macro b3005@let-values-macro b3007@let*-values-macro b3009@trace-lambda-macro b300b@trace-define-macro b300d@trace-define-syntax-macro b300f@trace-let/rec-syntax b3011@trace-let-syntax-macro b3013@trace-letrec-syntax-macro b3015@guard-macro b3017@define-enumeration-macro b3019@time-macro b301b@delay-macro b301d@assert-macro b301f@endianness-macro b3021@identifier-syntax-macro b3023@do-macro b3025@let*-macro b3027@or-macro b3029@and-macro b302b@cond-macro b302d@do-include b302f@include-macro b3031@include-into-macro b3033@syntax-rules-macro b3035@quasiquote-macro b3037@quasisyntax-macro b3039@define-struct-macro b303b@define-record-type-macro b303d@define-condition-type-macro b303f@incorrect-usage-macro b3041@parameterize-macro b3043@foreign-call-transformer b3045@convert-pattern b3047@syntax-dispatch b3049@ellipsis? b304b@underscore? b304d@verify-literals b304f@syntax-case-transformer b3051@ellipsis-map b3053@syntax-transformer b3055@core-macro-transformer b3057@symbol-macro b3059@macro-transformer b305b@local-macro-transformer b305d@do-macro-call b305f@chi-macro b3061@chi-local-macro b3063@chi-global-macro b3065@chi-expr* b3067@chi-application b3069@chi-expr b306b@chi-set! b306d@verify-formals b306f@chi-lambda-clause b3071@chi-lambda-clause* b3073@chi-defun b3075@chi-rhs b3077@expand-interaction-rhs*/init* b3079@chi-rhs* b307b@find-bound=? b307d@find-dups b307f@chi-internal b3081@parse-module b308b@module-interface? b308d@module-interface-first-mark b308f@set-module-interface-first-mark! b3091@module-interface-exp-id-vec b3093@set-module-interface-exp-id-vec! b3095@module-interface-exp-lab-vec b3097@set-module-interface-exp-lab-vec! b3099@dummy b309b@module-interface-exp-id* b309d@chi-internal-module b309f@chi-body* b30a1@expand-transformer b30a3@parse-exports b30a5@parse-library-name b30a7@parse-library b30a9@parse-import-spec* b30ab@make-top-rib b30ad@make-collector b30af@inv-collector b30b1@vis-collector b30b3@imp-collector b30b5@chi-library-internal b30b7@chi-interaction-expr b30b9@library-body-expander b30bb@core-library-expander b30bd@parse-top-level-program b30bf@top-level-expander b30c1@rp b30cb@env? b30cd@env-names b30cf@set-env-names! b30d1@env-labels b30d3@set-env-labels! b30d5@env-itc b30d7@set-env-itc! b30d9@dummy b30db@rp b30e5@interaction-env? b30e7@interaction-env-rib b30e9@set-interaction-env-rib! b30eb@interaction-env-r b30ed@set-interaction-env-r! b30ef@interaction-env-locs b30f1@set-interaction-env-locs! b30f3@dummy b30f5@interaction-environment-symbols b30f7@environment-bindings b30f9@parse-binding b30fb@environment? b30fd@environment-symbols b30ff@environment b3101@null-environment b3103@scheme-report-environment b3105@expand b3107@eval b3109@library-expander b310b@boot-library-expand b310d@rev-map-append b310f@build-exports b3111@make-export-subst b3113@make-export-env/macros b3115@generate-temporaries b3117@free-identifier=? b3119@bound-identifier=? b311b@make-source-condition b311d@extract-position-condition b311f@expression-position b3121@assertion-error b3123@syntax-error b3125@syntax-violation* b3127@syntax-violation b3129@identifier? b312b@datum->syntax b312d@syntax->datum b312f@compile-r6rs-top-level b3131@pre-compile-r6rs-top-level b3133@interaction-environment b3135@top-level-context) (begin (set! b2dbd@file-options-macro (lambda (b3136@x) ((lambda (b3139@valid-option?) (begin (set! b3139@valid-option? (lambda (b3142@x) (and (b2e42@id? b3142@x) (memq (b2e44@id->sym b3142@x) '(no-fail no-create no-truncate))))) ((lambda (b313a@t) ((lambda (b313c@ls/false) (if (and b313c@ls/false (apply (lambda (b313e@opt*) (for-all b3139@valid-option? b313e@opt*)) b313c@ls/false)) (apply (lambda (b3140@opt*) (b2ffd@bless (list 'make-file-options (list 'quote b3140@opt*)))) b313c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b313a@t))) (b3047@syntax-dispatch b313a@t '(_ . each-any)))) b3136@x))) '#f))) (set! b2dbf@set-cons (lambda (b3144@x b3145@ls) (if (memq b3144@x b3145@ls) b3145@ls (cons b3144@x b3145@ls)))) (set! b2dc1@set-union (lambda (b3148@ls1 b3149@ls2) (if (null? b3148@ls1) b3149@ls2 (if (memq (car b3148@ls1) b3149@ls2) (b2dc1@set-union (cdr b3148@ls1) b3149@ls2) (cons (car b3148@ls1) (b2dc1@set-union (cdr b3148@ls1) b3149@ls2)))))) (set! b2dc6@top-mark* '(top)) (set! b2dc8@top-marked? (lambda (b314c@m*) (memq 'top b314c@m*))) (set! b2dca@gen-lexical (lambda (b314e@sym) (if (symbol? b314e@sym) (gensym b314e@sym) (if (b2e0e@stx? b314e@sym) (b2dca@gen-lexical (b2e44@id->sym b314e@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" b314e@sym))))) (set! b2dcc@gen-global (lambda (b3150@x) (b2dca@gen-lexical b3150@x))) (set! b2dce@gen-label (lambda (b3152@_) (gensym))) (set! b2dd0@gen-top-level-label (lambda (b3154@id b3155@rib) ((lambda (b3159@find) (begin (set! b3159@find (lambda (b3164@sym b3165@mark* b3166@sym* b3167@mark** b3168@label*) (and (pair? b3166@sym*) (if (and (eq? b3164@sym (car b3166@sym*)) (same-marks? b3165@mark* (car b3167@mark**))) (car b3168@label*) (b3159@find b3164@sym b3165@mark* (cdr b3166@sym*) (cdr b3167@mark**) (cdr b3168@label*)))))) ((lambda (b315a@sym b315b@mark*) ((lambda (b315e@sym*) ((lambda (b3160@t) (if b3160@t ((lambda (b3162@label) (if (b2c6c@b2ab9@imported-label->binding b3162@label) (gensym) b3162@label)) b3160@t) (gensym))) (and (memq b315a@sym (b2de0@rib-sym* b3155@rib)) (b3159@find b315a@sym b315b@mark* b315e@sym* (b2de4@rib-mark** b3155@rib) (b2de8@rib-label* b3155@rib))))) (b2de0@rib-sym* b3155@rib))) (b2e44@id->sym b3154@id) (b2e14@stx-mark* b3154@id)))) '#f))) (set! b2dd2@gen-define-label+loc (lambda (b316e@id b316f@rib) ((lambda (b3172@t) (if b3172@t ((lambda (b3174@env) ((lambda (b3176@label b3177@locs) (values b3176@label ((lambda (b317a@t) (if b317a@t (cdr b317a@t) ((lambda (b317c@loc) (begin (b30f1@set-interaction-env-locs! b3174@env (cons (cons b3176@label b317c@loc) b3177@locs)) b317c@loc)) (b2dca@gen-lexical b316e@id)))) (assq b3176@label b3177@locs)))) (b2dd0@gen-top-level-label b316e@id b316f@rib) (b30ef@interaction-env-locs b3174@env))) b3172@t) (values (gensym) (b2dca@gen-lexical b316e@id)))) (b3135@top-level-context)))) (set! b2dd4@gen-define-label (lambda (b317e@id b317f@rib) (if (b3135@top-level-context) (b2dd0@gen-top-level-label b317e@id b317f@rib) (gensym)))) (set! b2dde@rib? (lambda (b3182@x) (and (simple-struct? b3182@x) (eq? (simple-struct-name b3182@x) 'rib)))) (set! b2de0@rib-sym* (lambda (b3184@x) (simple-struct-ref b3184@x '0))) (set! b2de2@set-rib-sym*! (lambda (b3186@x b3187@val) (simple-struct-set! b3186@x '0 b3187@val))) (set! b2de4@rib-mark** (lambda (b318a@x) (simple-struct-ref b318a@x '1))) (set! b2de6@set-rib-mark**! (lambda (b318c@x b318d@val) (simple-struct-set! b318c@x '1 b318d@val))) (set! b2de8@rib-label* (lambda (b3190@x) (simple-struct-ref b3190@x '2))) (set! b2dea@set-rib-label*! (lambda (b3192@x b3193@val) (simple-struct-set! b3192@x '2 b3193@val))) (set! b2dec@rib-sealed/freq (lambda (b3196@x) (simple-struct-ref b3196@x '3))) (set! b2dee@set-rib-sealed/freq! (lambda (b3198@x b3199@val) (simple-struct-set! b3198@x '3 b3199@val))) (set! b2df0@rib-cache (lambda (b319c@x) (simple-struct-ref b319c@x '4))) (set! b2df2@set-rib-cache! (lambda (b319e@x b319f@val) (simple-struct-set! b319e@x '4 b319f@val))) (set! b2df4@dummy '3) (set! b2df6@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! b2df8@extend-rib! (lambda (b31a2@rib b31a3@id b31a4@label) ((lambda (b31a9@find) (begin (set! b31a9@find (lambda (b31b6@sym b31b7@mark* b31b8@sym* b31b9@mark** b31ba@label*) (and (pair? b31b8@sym*) (if (and (eq? b31b6@sym (car b31b8@sym*)) (same-marks? b31b7@mark* (car b31b9@mark**))) b31ba@label* (b31a9@find b31b6@sym b31b7@mark* (cdr b31b8@sym*) (cdr b31b9@mark**) (cdr b31ba@label*)))))) (begin (if (b2dec@rib-sealed/freq b31a2@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" b31a2@rib) (void)) ((lambda (b31aa@sym b31ab@mark*) ((lambda (b31ae@sym*) ((lambda (b31b0@t) (if b31b0@t ((lambda (b31b2@p) (if (not (eq? b31a4@label (car b31b2@p))) (if (b3135@top-level-context) (set-car! b31b2@p b31a4@label) (b3127@syntax-violation '#f '"multiple definitions of identifier" b31a3@id)) (void))) b31b0@t) (begin (if (b2df0@rib-cache b31a2@rib) (hashtable-update! (b2df0@rib-cache b31a2@rib) b31aa@sym (lambda (b31b4@e) (cons (cons b31ab@mark* b31a4@label) b31b4@e)) '()) (void)) (b2de2@set-rib-sym*! b31a2@rib (cons b31aa@sym b31ae@sym*)) (b2de6@set-rib-mark**! b31a2@rib (cons b31ab@mark* (b2de4@rib-mark** b31a2@rib))) (b2dea@set-rib-label*! b31a2@rib (cons b31a4@label (b2de8@rib-label* b31a2@rib)))))) (and (memq b31aa@sym (b2de0@rib-sym* b31a2@rib)) (b31a9@find b31aa@sym b31ab@mark* b31ae@sym* (b2de4@rib-mark** b31a2@rib) (b2de8@rib-label* b31a2@rib))))) (b2de0@rib-sym* b31a2@rib))) (b2e44@id->sym b31a3@id) (b2e14@stx-mark* b31a3@id))))) '#f))) (set! b2dfa@extend-rib/nc! (lambda (b31c0@rib b31c1@id b31c2@label) ((lambda (b31c6@sym b31c7@mark*) ((lambda (b31ca@sym*) (begin (if (b2df0@rib-cache b31c0@rib) (hashtable-update! (b2df0@rib-cache b31c0@rib) b31c6@sym (lambda (b31cc@e) (cons (cons b31c7@mark* b31c2@label) b31cc@e)) '()) (void)) (b2de2@set-rib-sym*! b31c0@rib (cons b31c6@sym b31ca@sym*)) (b2de6@set-rib-mark**! b31c0@rib (cons b31c7@mark* (b2de4@rib-mark** b31c0@rib))) (b2dea@set-rib-label*! b31c0@rib (cons b31c2@label (b2de8@rib-label* b31c0@rib))))) (b2de0@rib-sym* b31c0@rib))) (b2e44@id->sym b31c1@id) (b2e14@stx-mark* b31c1@id)))) (set! b2dfc@make-rib-map (lambda (b31ce@sym*) ((lambda (b31d0@ht) ((letrec ((b31d2@f (lambda (b31d4@i b31d5@sym*) (if (null? b31d5@sym*) b31d0@ht (begin (hashtable-update! b31d0@ht (car b31d5@sym*) (lambda (b31d8@x) (cons b31d4@i b31d8@x)) '()) (b31d2@f (+ b31d4@i '1) (cdr b31d5@sym*))))))) b31d2@f) '0 b31ce@sym*)) (make-eq-hashtable)))) (set! b2dfe@seal-rib! (lambda (b31da@rib) ((lambda (b31dc@sym*) (if (not (null? b31dc@sym*)) (begin (b2de2@set-rib-sym*! b31da@rib (list->vector b31dc@sym*)) (b2de6@set-rib-mark**! b31da@rib (list->vector (b2de4@rib-mark** b31da@rib))) (b2dea@set-rib-label*! b31da@rib (list->vector (b2de8@rib-label* b31da@rib))) (b2dee@set-rib-sealed/freq! b31da@rib (b2dfc@make-rib-map b31dc@sym*))) (void))) (b2de0@rib-sym* b31da@rib)))) (set! b2e00@unseal-rib! (lambda (b31de@rib) (if (b2dec@rib-sealed/freq b31de@rib) (begin (b2dee@set-rib-sealed/freq! b31de@rib '#f) (b2de2@set-rib-sym*! b31de@rib (vector->list (b2de0@rib-sym* b31de@rib))) (b2de6@set-rib-mark**! b31de@rib (vector->list (b2de4@rib-mark** b31de@rib))) (b2dea@set-rib-label*! b31de@rib (vector->list (b2de8@rib-label* b31de@rib)))) (void)))) (set! b2e02@make-full-rib (lambda (b31e0@id* b31e1@label*) ((lambda (b31e4@r) (begin (b2dfe@seal-rib! b31e4@r) b31e4@r)) (make-simple-struct 'rib '6 (list (map b2e44@id->sym b31e0@id*) (map b2e14@stx-mark* b31e0@id*) b31e1@label* '#f '#f))))) (set! b2e04@rp (b299e@b287a@make-record-printer 'stx (lambda (b31e6@x b31e7@p b31e8@wr) (begin (display '"#<syntax " b31e7@p) (write (b2e56@stx->datum b31e6@x) b31e7@p) ((lambda (b31ec@expr) (if (b2996@b286a@annotation? b31ec@expr) ((lambda (b31ee@src) (if (pair? b31ee@src) (begin (display '" [" b31e7@p) (display (cdr b31ee@src) b31e7@p) (display '" of " b31e7@p) (display (car b31ee@src) b31e7@p) (display '"]" b31e7@p)) (void))) (b2997@b286c@annotation-source b31ec@expr)) (void))) (b2e10@stx-expr b31e6@x)) (display '">" b31e7@p))))) (set! b2e0e@stx? (lambda (b31f0@x) (and (simple-struct? b31f0@x) (eq? (simple-struct-name b31f0@x) 'stx)))) (set! b2e10@stx-expr (lambda (b31f2@x) (simple-struct-ref b31f2@x '0))) (set! b2e12@set-stx-expr! (lambda (b31f4@x b31f5@val) (simple-struct-set! b31f4@x '0 b31f5@val))) (set! b2e14@stx-mark* (lambda (b31f8@x) (simple-struct-ref b31f8@x '1))) (set! b2e16@set-stx-mark*! (lambda (b31fa@x b31fb@val) (simple-struct-set! b31fa@x '1 b31fb@val))) (set! b2e18@stx-subst* (lambda (b31fe@x) (simple-struct-ref b31fe@x '2))) (set! b2e1a@set-stx-subst*! (lambda (b3200@x b3201@val) (simple-struct-set! b3200@x '2 b3201@val))) (set! b2e1c@stx-ae* (lambda (b3204@x) (simple-struct-ref b3204@x '3))) (set! b2e1e@set-stx-ae*! (lambda (b3206@x b3207@val) (simple-struct-set! b3206@x '3 b3207@val))) (set! b2e20@dummy '3) (set! b2e22@datum->stx (lambda (b320a@id b320b@datum) (make-simple-struct 'stx '5 (list b320b@datum (b2e14@stx-mark* b320a@id) (b2e18@stx-subst* b320a@id) (b2e1c@stx-ae* b320a@id))))) (set! b2e24@gen-mark (lambda () (string '#\m))) (set! b2e26@anti-mark '#f) (set! b2e28@anti-mark? not) (set! b2e2a@mkstx (lambda (b320e@e b320f@m* b3210@s* b3211@ae*) (if (and (b2e0e@stx? b320e@e) (not (b2dc8@top-marked? b320f@m*))) (call-with-values (lambda () (join-wraps b320f@m* b3210@s* b3211@ae* b320e@e)) (lambda (b321c@b3217 b321d@b3219 b321e@b321b) ((lambda (b3222@ae* b3223@s* b3224@m*) (make-simple-struct 'stx '5 (list (b2e10@stx-expr b320e@e) b3224@m* b3223@s* b3222@ae*))) b321e@b321b b321d@b3219 b321c@b3217))) (make-simple-struct 'stx '5 (list b320e@e b320f@m* b3210@s* b3211@ae*))))) (set! b2e2c@add-mark (lambda (b3228@m b3229@e b322a@ae) (b2e2a@mkstx b3229@e (list b3228@m) '(shift) (list b322a@ae)))) (set! b2e2e@add-subst (lambda (b322e@subst b322f@e) (b2e2a@mkstx b322f@e '() (list b322e@subst) '()))) (set! b2e30@syntax-kind? (lambda (b3232@x b3233@p?) (if (b2e0e@stx? b3232@x) (b2e30@syntax-kind? (b2e10@stx-expr b3232@x) b3233@p?) (if (b2996@b286a@annotation? b3232@x) (b2e30@syntax-kind? (b2998@b286e@annotation-expression b3232@x) b3233@p?) (b3233@p? b3232@x))))) (set! b2e32@syntax-vector->list (lambda (b3236@x) (if (b2e0e@stx? b3236@x) ((lambda (b3238@ls b3239@m* b323a@s* b323b@ae*) (map (lambda (b3240@x) (b2e2a@mkstx b3240@x b3239@m* b323a@s* b323b@ae*)) b3238@ls)) (b2e32@syntax-vector->list (b2e10@stx-expr b3236@x)) (b2e14@stx-mark* b3236@x) (b2e18@stx-subst* b3236@x) (b2e1c@stx-ae* b3236@x)) (if (b2996@b286a@annotation? b3236@x) (b2e32@syntax-vector->list (b2998@b286e@annotation-expression b3236@x)) (if (vector? b3236@x) (vector->list b3236@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" b3236@x)))))) (set! b2e34@syntax-pair? (lambda (b3242@x) (b2e30@syntax-kind? b3242@x pair?))) (set! b2e36@syntax-vector? (lambda (b3244@x) (b2e30@syntax-kind? b3244@x vector?))) (set! b2e38@syntax-null? (lambda (b3246@x) (b2e30@syntax-kind? b3246@x null?))) (set! b2e3a@syntax-list? (lambda (b3248@x) (or (b2e38@syntax-null? b3248@x) (and (b2e34@syntax-pair? b3248@x) (b2e3a@syntax-list? (b2e3e@syntax-cdr b3248@x)))))) (set! b2e3c@syntax-car (lambda (b324a@x) (if (b2e0e@stx? b324a@x) (b2e2a@mkstx (b2e3c@syntax-car (b2e10@stx-expr b324a@x)) (b2e14@stx-mark* b324a@x) (b2e18@stx-subst* b324a@x) (b2e1c@stx-ae* b324a@x)) (if (b2996@b286a@annotation? b324a@x) (b2e3c@syntax-car (b2998@b286e@annotation-expression b324a@x)) (if (pair? b324a@x) (car b324a@x) (assertion-violation 'syntax-car '"BUG: not a pair" b324a@x)))))) (set! b2e3e@syntax-cdr (lambda (b324c@x) (if (b2e0e@stx? b324c@x) (b2e2a@mkstx (b2e3e@syntax-cdr (b2e10@stx-expr b324c@x)) (b2e14@stx-mark* b324c@x) (b2e18@stx-subst* b324c@x) (b2e1c@stx-ae* b324c@x)) (if (b2996@b286a@annotation? b324c@x) (b2e3e@syntax-cdr (b2998@b286e@annotation-expression b324c@x)) (if (pair? b324c@x) (cdr b324c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" b324c@x)))))) (set! b2e40@syntax->list (lambda (b324e@x) (if (b2e34@syntax-pair? b324e@x) (cons (b2e3c@syntax-car b324e@x) (b2e40@syntax->list (b2e3e@syntax-cdr b324e@x))) (if (b2e38@syntax-null? b324e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" b324e@x))))) (set! b2e42@id? (lambda (b3250@x) (and (b2e0e@stx? b3250@x) (symbol? (b2e10@stx-expr b3250@x))))) (set! b2e44@id->sym (lambda (b3252@x) (b2e10@stx-expr b3252@x))) (set! b2e46@bound-id=? (lambda (b3254@x b3255@y) (and (eq? (b2e44@id->sym b3254@x) (b2e44@id->sym b3255@y)) (same-marks? (b2e14@stx-mark* b3254@x) (b2e14@stx-mark* b3255@y))))) (set! b2e48@free-id=? (lambda (b3258@i b3259@j) ((lambda (b325c@t0 b325d@t1) (if (or b325c@t0 b325d@t1) (eq? b325c@t0 b325d@t1) (eq? (b2e44@id->sym b3258@i) (b2e44@id->sym b3259@j)))) (id->real-label b3258@i) (id->real-label b3259@j)))) (set! b2e4a@valid-bound-ids? (lambda (b3260@id*) (and (for-all b2e42@id? b3260@id*) (b2e4c@distinct-bound-ids? b3260@id*)))) (set! b2e4c@distinct-bound-ids? (lambda (b3262@id*) (or (null? b3262@id*) (and (not (b2e4e@bound-id-member? (car b3262@id*) (cdr b3262@id*))) (b2e4c@distinct-bound-ids? (cdr b3262@id*)))))) (set! b2e4e@bound-id-member? (lambda (b3264@id b3265@id*) (and (pair? b3265@id*) (or (b2e46@bound-id=? b3264@id (car b3265@id*)) (b2e4e@bound-id-member? b3264@id (cdr b3265@id*)))))) (set! b2e50@self-evaluating? (lambda (b3268@x) (or (number? b3268@x) (string? b3268@x) (char? b3268@x) (boolean? b3268@x) (regexp? b3268@x) (bytevector? b3268@x)))) (set! b2e52@strip-annotations (lambda (b326a@x) (if (pair? b326a@x) (cons (b2e52@strip-annotations (car b326a@x)) (b2e52@strip-annotations (cdr b326a@x))) (if (vector? b326a@x) (vector-map b2e52@strip-annotations b326a@x) (if (b2996@b286a@annotation? b326a@x) (b2995@b2868@annotation-stripped b326a@x) b326a@x))))) (set! b2e54@strip (lambda (b326c@x b326d@m*) (if (b2dc8@top-marked? b326d@m*) (if (or (b2996@b286a@annotation? b326c@x) (and (pair? b326c@x) (b2996@b286a@annotation? (car b326c@x))) (and (vector? b326c@x) (> (vector-length b326c@x) '0) (b2996@b286a@annotation? (vector-ref b326c@x '0)))) (b2e52@strip-annotations b326c@x) b326c@x) ((letrec ((b3270@f (lambda (b3272@x) (if (b2e0e@stx? b3272@x) (b2e54@strip (b2e10@stx-expr b3272@x) (b2e14@stx-mark* b3272@x)) (if (b2996@b286a@annotation? b3272@x) (b2995@b2868@annotation-stripped b3272@x) (if (pair? b3272@x) ((lambda (b3274@a b3275@d) (if (and (eq? b3274@a (car b3272@x)) (eq? b3275@d (cdr b3272@x))) b3272@x (cons b3274@a b3275@d))) (b3270@f (car b3272@x)) (b3270@f (cdr b3272@x))) (if (vector? b3272@x) ((lambda (b3278@old) ((lambda (b327a@new) (if (for-all eq? b3278@old b327a@new) b3272@x (list->vector b327a@new))) (map b3270@f b3278@old))) (vector->list b3272@x)) b3272@x))))))) b3270@f) b326c@x)))) (set! b2e56@stx->datum (lambda (b327c@x) (b2e54@strip b327c@x '()))) (set! b2e58@id->label (lambda (b327e@id) (or (id->real-label b327e@id) ((lambda (b3280@t) (if b3280@t ((lambda (b3282@env) ((lambda (b3284@rib) (call-with-values (lambda () (b2dd2@gen-define-label+loc b327e@id b3284@rib)) (lambda (b328a@b3287 b328b@b3289) ((lambda (b328e@loc_ b328f@lab) (begin (b2df8@extend-rib! b3284@rib b327e@id b328f@lab) b328f@lab)) b328b@b3289 b328a@b3287)))) (b30e7@interaction-env-rib b3282@env))) b3280@t) '#f)) (b3135@top-level-context))))) (set! b2e5a@label->binding (lambda (b3292@x b3293@r) ((lambda (b3296@t) (if b3296@t ((lambda (b3298@b) (if (and (pair? b3298@b) (eq? (car b3298@b) '$core-rtd)) (cons '$rtd (map b2ffd@bless (cdr b3298@b))) (if (and (pair? b3298@b) (eq? (car b3298@b) 'global-rtd)) ((lambda (b329a@lib b329b@loc) (cons '$rtd (symbol-value b329b@loc))) (cadr b3298@b) (cddr b3298@b)) b3298@b))) b3296@t) ((lambda (b329e@t) (if b329e@t (cdr b329e@t) ((lambda (b32a0@t) (if b32a0@t ((lambda (b32a2@env) ((lambda (b32a4@t) (if b32a4@t ((lambda (b32a6@p) (cons* 'lexical (cdr b32a6@p) '#f)) b32a4@t) '(displaced-lexical . #f))) (assq b3292@x (b30ef@interaction-env-locs b32a2@env)))) b32a0@t) '(displaced-lexical . #f))) (b3135@top-level-context)))) (assq b3292@x b3293@r)))) (b2c6c@b2ab9@imported-label->binding b3292@x)))) (set! b2e5c@make-binding cons) (set! b2e5e@binding-type car) (set! b2e60@binding-value cdr) (set! b2e62@raise-unbound-error (lambda (b32a8@id) (b3125@syntax-violation* '#f '"unbound identifier" b32a8@id (b4e86@b4ccc@make-undefined-violation)))) (set! b2e64@syntax-type (lambda (b32aa@e b32ab@r) (if (b2e42@id? b32aa@e) ((lambda (b32ae@id) ((lambda (b32b0@label) ((lambda (b32b2@b) ((lambda (b32b4@type) ((lambda () (begin (if (not b32b0@label) (b2e62@raise-unbound-error b32ae@id) (void)) ((lambda (b32b6@t) (if (memv b32b6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values b32b4@type (b2e60@binding-value b32b2@b) b32ae@id) (values 'other '#f '#f))) b32b4@type))))) (b2e5e@binding-type b32b2@b))) (b2e5a@label->binding b32b0@label b32ab@r))) (b2e58@id->label b32ae@id))) b32aa@e) (if (b2e34@syntax-pair? b32aa@e) ((lambda (b32b8@id) (if (b2e42@id? b32b8@id) ((lambda (b32ba@label) ((lambda (b32bc@b) ((lambda (b32be@type) ((lambda () (begin (if (not b32ba@label) (b2e62@raise-unbound-error b32b8@id) (void)) ((lambda (b32c0@t) (if (memv b32c0@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values b32be@type (b2e60@binding-value b32bc@b) b32b8@id) (values 'call '#f '#f))) b32be@type))))) (b2e5e@binding-type b32bc@b))) (b2e5a@label->binding b32ba@label b32ab@r))) (b2e58@id->label b32b8@id)) (values 'call '#f '#f))) (b2e3c@syntax-car b32aa@e)) ((lambda (b32c2@d) (if (b2e50@self-evaluating? b32c2@d) (values 'constant b32c2@d '#f) (values 'other '#f '#f))) (b2e56@stx->datum b32aa@e)))))) (set! b2e72@sanitize-binding (lambda (b32c4@x b32c5@src) (if (procedure? b32c4@x) (cons* 'local-macro b32c4@x b32c5@src) (if (and (pair? b32c4@x) (eq? (car b32c4@x) 'macro!) (procedure? (cdr b32c4@x))) (cons* 'local-macro! (cdr b32c4@x) b32c5@src) (if (and (pair? b32c4@x) (eq? (car b32c4@x) '$rtd)) b32c4@x (assertion-violation 'expand '"invalid transformer" b32c4@x)))))) (set! b2e74@make-variable-transformer (lambda (b32c8@x) (if (procedure? b32c8@x) (cons 'macro! b32c8@x) (assertion-violation 'make-variable-transformer '"not a procedure" b32c8@x)))) (set! b2e76@variable-transformer? (lambda (b32ca@x) (and (pair? b32ca@x) (eq? (car b32ca@x) 'macro!) (procedure? (cdr b32ca@x))))) (set! b2e78@variable-transformer-procedure (lambda (b32cc@x) (if (b2e76@variable-transformer? b32cc@x) (cdr b32cc@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" b32cc@x)))) (set! b2e7a@make-eval-transformer (lambda (b32ce@x) (b2e72@sanitize-binding (eval-core (b29f7@b29af@expanded->core b32ce@x)) b32ce@x))) (set! b2fcb@parse-define (lambda (b32d0@x) ((lambda (b32d2@t) ((lambda (b32d4@ls/false) (if (and b32d4@ls/false (apply (lambda (b32d6@id b32d7@fmls b32d8@b b32d9@b*) (b2e42@id? b32d6@id)) b32d4@ls/false)) (apply (lambda (b32de@id b32df@fmls b32e0@b b32e1@b*) (begin (b306d@verify-formals b32df@fmls b32d0@x) (values b32de@id (cons 'defun (cons b32df@fmls (cons b32e0@b b32e1@b*)))))) b32d4@ls/false) ((lambda (b32e6@t) ((lambda (b32e8@ls/false) (if (and b32e8@ls/false (apply (lambda (b32ea@id b32eb@val) (b2e42@id? b32ea@id)) b32e8@ls/false)) (apply (lambda (b32ee@id b32ef@val) (values b32ee@id (cons 'expr b32ef@val))) b32e8@ls/false) ((lambda (b32f2@t) ((lambda (b32f4@ls/false) (if (and b32f4@ls/false (apply (lambda (b32f6@id) (b2e42@id? b32f6@id)) b32f4@ls/false)) (apply (lambda (b32f8@id) (values b32f8@id (cons 'expr (b2ffd@bless '(void))))) b32f4@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b32f2@t))) (b3047@syntax-dispatch b32f2@t '(_ any)))) b32e6@t))) (b3047@syntax-dispatch b32e6@t '(_ any any)))) b32d2@t))) (b3047@syntax-dispatch b32d2@t '(_ (any . any) any . each-any)))) b32d0@x))) (set! b2fcd@parse-define-syntax (lambda (b32fa@x) ((lambda (b32fc@t) ((lambda (b32fe@ls/false) (if (and b32fe@ls/false (apply (lambda (b3300@id b3301@val) (b2e42@id? b3300@id)) b32fe@ls/false)) (apply (lambda (b3304@id b3305@val) (values b3304@id b3305@val)) b32fe@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b32fc@t))) (b3047@syntax-dispatch b32fc@t '(_ any any)))) b32fa@x))) (set! b2fcf@scheme-stx-hashtable (make-eq-hashtable)) (set! b2fd1@scheme-stx (lambda (b3308@sym) (or (hashtable-ref b2fcf@scheme-stx-hashtable b3308@sym '#f) ((lambda (b330a@subst) ((lambda (b330c@stx) ((lambda (b330e@stx) ((lambda () (begin (hashtable-set! b2fcf@scheme-stx-hashtable b3308@sym b330e@stx) b330e@stx)))) ((lambda (b3310@t) (if b3310@t ((lambda (b3312@x) ((lambda (b3314@name b3315@label) (b2e2e@add-subst (make-simple-struct 'rib '6 (list (list b3314@name) (list b2dc6@top-mark*) (list b3315@label) '#f '#f)) b330c@stx)) (car b3312@x) (cdr b3312@x))) b3310@t) b330c@stx)) (assq b3308@sym b330a@subst)))) (make-simple-struct 'stx '5 (list b3308@sym b2dc6@top-mark* '() '())))) (b2c48@b2a71@library-subst (b2c66@b2aad@find-library-by-name '(psyntax system $all))))))) (set! b2fd3@lexical-var car) (set! b2fd5@lexical-mutable? cdr) (set! b2fd7@set-lexical-mutable! set-cdr!) (set! b2fd9@add-lexical (lambda (b3318@lab b3319@lex b331a@r) (cons (cons* b3318@lab 'lexical b3319@lex '#f) b331a@r))) (set! b2fdb@add-lexicals (lambda (b331e@lab* b331f@lex* b3320@r) (if (null? b331e@lab*) b3320@r (b2fdb@add-lexicals (cdr b331e@lab*) (cdr b331f@lex*) (b2fd9@add-lexical (car b331e@lab*) (car b331f@lex*) b3320@r))))) (set! b2fdd@letrec-helper (lambda (b3324@e b3325@r b3326@mr b3327@build) ((lambda (b332c@t) ((lambda (b332e@ls/false) (if b332e@ls/false (apply (lambda (b3330@lhs* b3331@rhs* b3332@b b3333@b*) (if (not (b2e4a@valid-bound-ids? b3330@lhs*)) (b3001@invalid-fmls-error b3324@e b3330@lhs*) ((lambda (b3338@lex* b3339@lab*) ((lambda (b333c@rib b333d@r) ((lambda (b3340@body b3341@rhs*) (b3327@build '#f b3338@lex* b3341@rhs* b3340@body)) (b307f@chi-internal (b2e2e@add-subst b333c@rib (cons b3332@b b3333@b*)) b333d@r b3326@mr) (b3065@chi-expr* (map (lambda (b3344@x) (b2e2e@add-subst b333c@rib b3344@x)) b3331@rhs*) b333d@r b3326@mr))) (b2e02@make-full-rib b3330@lhs* b3339@lab*) (b2fdb@add-lexicals b3339@lab* b3338@lex* b3325@r))) (map b2dca@gen-lexical b3330@lhs*) (map b2dce@gen-label b3330@lhs*)))) b332e@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b332c@t))) (b3047@syntax-dispatch b332c@t '(_ #(each (any any)) any . each-any)))) b3324@e))) (set! b2fdf@letrec-transformer (lambda (b3346@e b3347@r b3348@mr) (b2fdd@letrec-helper b3346@e b3347@r b3348@mr b2dab@b2d1c@build-letrec))) (set! b2fe1@letrec*-transformer (lambda (b334c@e b334d@r b334e@mr) (b2fdd@letrec-helper b334c@e b334d@r b334e@mr b2dac@b2d1e@build-letrec*))) (set! b2fe3@fluid-let-syntax-transformer (lambda (b3352@e b3353@r b3354@mr) ((lambda (b3359@lookup) (begin (set! b3359@lookup (lambda (b336c@x) (or (b2e58@id->label b336c@x) (b3127@syntax-violation '#f '"unbound identifier" b3352@e b336c@x)))) ((lambda (b335a@t) ((lambda (b335c@ls/false) (if b335c@ls/false (apply (lambda (b335e@lhs* b335f@rhs* b3360@b b3361@b*) (if (not (b2e4a@valid-bound-ids? b335e@lhs*)) (b3001@invalid-fmls-error b3352@e b335e@lhs*) ((lambda (b3366@lab* b3367@rhs*) (b307f@chi-internal (cons b3360@b b3361@b*) (append (map cons b3366@lab* b3367@rhs*) b3353@r) (append (map cons b3366@lab* b3367@rhs*) b3354@mr))) (map b3359@lookup b335e@lhs*) (map (lambda (b336a@x) (b2e7a@make-eval-transformer (b30a1@expand-transformer b336a@x b3354@mr))) b335f@rhs*)))) b335c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b335a@t))) (b3047@syntax-dispatch b335a@t '(_ #(each (any any)) any . each-any)))) b3352@e))) '#f))) (set! b2fe5@type-descriptor-transformer (lambda (b336e@e b336f@r b3370@mr) ((lambda (b3374@t) ((lambda (b3376@ls/false) (if (and b3376@ls/false (apply (lambda (b3378@id) (b2e42@id? b3378@id)) b3376@ls/false)) (apply (lambda (b337a@id) ((lambda (b337c@lab) ((lambda (b337e@b) ((lambda (b3380@type) ((lambda () (begin (if (not b337c@lab) (b2e62@raise-unbound-error b337a@id) (void)) (if (not (and (eq? b3380@type '$rtd) (not (list? (b2e60@binding-value b337e@b))))) (b3127@syntax-violation '#f '"not a record type" b336e@e) (void)) (list 'quote (b2e60@binding-value b337e@b)))))) (b2e5e@binding-type b337e@b))) (b2e5a@label->binding b337c@lab b336f@r))) (b2e58@id->label b337a@id))) b3376@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3374@t))) (b3047@syntax-dispatch b3374@t '(_ any)))) b336e@e))) (set! b2fe7@record-type-descriptor-transformer (lambda (b3382@e b3383@r b3384@mr) ((lambda (b3388@t) ((lambda (b338a@ls/false) (if (and b338a@ls/false (apply (lambda (b338c@id) (b2e42@id? b338c@id)) b338a@ls/false)) (apply (lambda (b338e@id) ((lambda (b3390@lab) ((lambda (b3392@b) ((lambda (b3394@type) ((lambda () (begin (if (not b3390@lab) (b2e62@raise-unbound-error b338e@id) (void)) (if (not (and (eq? b3394@type '$rtd) (list? (b2e60@binding-value b3392@b)))) (b3127@syntax-violation '#f '"not a record type" b3382@e) (void)) (b3069@chi-expr (car (b2e60@binding-value b3392@b)) b3383@r b3384@mr))))) (b2e5e@binding-type b3392@b))) (b2e5a@label->binding b3390@lab b3383@r))) (b2e58@id->label b338e@id))) b338a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3388@t))) (b3047@syntax-dispatch b3388@t '(_ any)))) b3382@e))) (set! b2fe9@record-constructor-descriptor-transformer (lambda (b3396@e b3397@r b3398@mr) ((lambda (b339c@t) ((lambda (b339e@ls/false) (if (and b339e@ls/false (apply (lambda (b33a0@id) (b2e42@id? b33a0@id)) b339e@ls/false)) (apply (lambda (b33a2@id) ((lambda (b33a4@lab) ((lambda (b33a6@b) ((lambda (b33a8@type) ((lambda () (begin (if (not b33a4@lab) (b2e62@raise-unbound-error b33a2@id) (void)) (if (not (and (eq? b33a8@type '$rtd) (list? (b2e60@binding-value b33a6@b)))) (b3127@syntax-violation '#f '"invalid type" b3396@e) (void)) (b3069@chi-expr (cadr (b2e60@binding-value b33a6@b)) b3397@r b3398@mr))))) (b2e5e@binding-type b33a6@b))) (b2e5a@label->binding b33a4@lab b3397@r))) (b2e58@id->label b33a2@id))) b339e@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b339c@t))) (b3047@syntax-dispatch b339c@t '(_ any)))) b3396@e))) (set! b2feb@when-macro (lambda (b33aa@e) ((lambda (b33ac@t) ((lambda (b33ae@ls/false) (if b33ae@ls/false (apply (lambda (b33b0@test b33b1@e b33b2@e*) (b2ffd@bless (list 'if b33b0@test (cons 'begin (cons b33b1@e b33b2@e*))))) b33ae@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b33ac@t))) (b3047@syntax-dispatch b33ac@t '(_ any any . each-any)))) b33aa@e))) (set! b2fed@unless-macro (lambda (b33b6@e) ((lambda (b33b8@t) ((lambda (b33ba@ls/false) (if b33ba@ls/false (apply (lambda (b33bc@test b33bd@e b33be@e*) (b2ffd@bless (list 'if (list 'not b33bc@test) (cons 'begin (cons b33bd@e b33be@e*))))) b33ba@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b33b8@t))) (b3047@syntax-dispatch b33b8@t '(_ any any . each-any)))) b33b6@e))) (set! b2fef@if-transformer (lambda (b33c2@e b33c3@r b33c4@mr) ((lambda (b33c8@t) ((lambda (b33ca@ls/false) (if b33ca@ls/false (apply (lambda (b33cc@e0 b33cd@e1 b33ce@e2) (list 'if (b3069@chi-expr b33cc@e0 b33c3@r b33c4@mr) (b3069@chi-expr b33cd@e1 b33c3@r b33c4@mr) (b3069@chi-expr b33ce@e2 b33c3@r b33c4@mr))) b33ca@ls/false) ((lambda (b33d2@t) ((lambda (b33d4@ls/false) (if b33d4@ls/false (apply (lambda (b33d6@e0 b33d7@e1) (list 'if (b3069@chi-expr b33d6@e0 b33c3@r b33c4@mr) (b3069@chi-expr b33d7@e1 b33c3@r b33c4@mr) (b2daa@b2d1a@build-void))) b33d4@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b33d2@t))) (b3047@syntax-dispatch b33d2@t '(_ any any)))) b33c8@t))) (b3047@syntax-dispatch b33c8@t '(_ any any any)))) b33c2@e))) (set! b2ff1@and-transformer (lambda (b33da@e b33db@r b33dc@mr) ((lambda (b33e0@t) ((lambda (b33e2@ls/false) (if b33e2@ls/false (apply (lambda (b33e4@e*) (cons 'and (b3065@chi-expr* b33e4@e* b33db@r b33dc@mr))) b33e2@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b33e0@t))) (b3047@syntax-dispatch b33e0@t '(_ . each-any)))) b33da@e))) (set! b2ff3@or-transformer (lambda (b33e6@e b33e7@r b33e8@mr) ((lambda (b33ec@t) ((lambda (b33ee@ls/false) (if b33ee@ls/false (apply (lambda (b33f0@e*) (cons 'or (b3065@chi-expr* b33f0@e* b33e7@r b33e8@mr))) b33ee@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b33ec@t))) (b3047@syntax-dispatch b33ec@t '(_ . each-any)))) b33e6@e))) (set! b2ff5@case-macro (lambda (b33f2@e) ((lambda (b33f5@build-last b33f7@build-one) (begin (set! b33f5@build-last (lambda (b341c@cls) ((lambda (b341e@t) ((lambda (b3420@ls/false) (if b3420@ls/false (apply (lambda (b3422@e b3423@e*) (cons 'begin (cons b3422@e b3423@e*))) b3420@ls/false) ((lambda (b3426@t) ((lambda (b3428@ls/false) (if b3428@ls/false (apply (lambda () (b33f7@build-one b341c@cls '(if #f #f))) b3428@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3426@t))) (b3047@syntax-dispatch b3426@t '_))) b341e@t))) (b3047@syntax-dispatch b341e@t '(#(scheme-id else) any . each-any)))) b341c@cls))) (set! b33f7@build-one (lambda (b340e@cls b340f@k) ((lambda (b3412@t) ((lambda (b3414@ls/false) (if b3414@ls/false (apply (lambda (b3416@d* b3417@e b3418@e*) (list 'if (list 'memv 't (list 'quote b3416@d*)) (cons 'begin (cons b3417@e b3418@e*)) b340f@k)) b3414@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3412@t))) (b3047@syntax-dispatch b3412@t '(each-any any . each-any)))) b340e@cls))) ((lambda (b33f8@t) ((lambda (b33fa@ls/false) (if b33fa@ls/false (apply (lambda (b33fc@expr) (b2ffd@bless (cons 'let (cons (list (list 't b33fc@expr)) '((if #f #f)))))) b33fa@ls/false) ((lambda (b33fe@t) ((lambda (b3400@ls/false) (if b3400@ls/false (apply (lambda (b3402@expr b3403@cls b3404@cls*) (b2ffd@bless (list 'let (list (list 't b3402@expr)) ((letrec ((b3408@f (lambda (b340a@cls b340b@cls*) (if (null? b340b@cls*) (b33f5@build-last b340a@cls) (b33f7@build-one b340a@cls (b3408@f (car b340b@cls*) (cdr b340b@cls*))))))) b3408@f) b3403@cls b3404@cls*)))) b3400@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b33fe@t))) (b3047@syntax-dispatch b33fe@t '(_ any any . each-any)))) b33f8@t))) (b3047@syntax-dispatch b33f8@t '(_ any)))) b33f2@e))) '#f '#f))) (set! b2ff7@quote-transformer (lambda (b342a@e b342b@r b342c@mr) ((lambda (b3430@t) ((lambda (b3432@ls/false) (if b3432@ls/false (apply (lambda (b3434@datum) (list 'quote (b2e56@stx->datum b3434@datum))) b3432@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3430@t))) (b3047@syntax-dispatch b3430@t '(_ any)))) b342a@e))) (set! b2ff9@case-lambda-transformer (lambda (b3436@e b3437@r b3438@mr) ((lambda (b343c@t) ((lambda (b343e@ls/false) (if b343e@ls/false (apply (lambda (b3440@fmls* b3441@b* b3442@b**) (call-with-values (lambda () (b3071@chi-lambda-clause* b3436@e b3440@fmls* (map cons b3441@b* b3442@b**) b3437@r b3438@mr)) (lambda (b344a@b3447 b344b@b3449) ((lambda (b344e@body* b344f@fmls*) (b2da7@b2ce8@build-case-lambda '#f b344f@fmls* b344e@body*)) b344b@b3449 b344a@b3447)))) b343e@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b343c@t))) (b3047@syntax-dispatch b343c@t '(_ . #(each (any any . each-any)))))) b3436@e))) (set! b2ffb@lambda-transformer (lambda (b3452@e b3453@r b3454@mr) ((lambda (b3458@t) ((lambda (b345a@ls/false) (if b345a@ls/false (apply (lambda (b345c@fmls b345d@b b345e@b*) (call-with-values (lambda () (b306f@chi-lambda-clause b3452@e b345c@fmls (cons b345d@b b345e@b*) b3453@r b3454@mr)) (lambda (b3466@b3463 b3467@b3465) ((lambda (b346a@body b346b@fmls) (b2da6@b2ce6@build-lambda '#f b346b@fmls b346a@body)) b3467@b3465 b3466@b3463)))) b345a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3458@t))) (b3047@syntax-dispatch b3458@t '(_ any any . each-any)))) b3452@e))) (set! b2ffd@bless (lambda (b346e@x) (b2e2a@mkstx ((letrec ((b3470@f (lambda (b3472@x) (if (b2e0e@stx? b3472@x) b3472@x (if (pair? b3472@x) (cons (b3470@f (car b3472@x)) (b3470@f (cdr b3472@x))) (if (symbol? b3472@x) (b2fd1@scheme-stx b3472@x) (if (vector? b3472@x) (vector-map b3470@f b3472@x) b3472@x))))))) b3470@f) b346e@x) '() '() '()))) (set! b2fff@with-syntax-macro (lambda (b3474@e) ((lambda (b3476@t) ((lambda (b3478@ls/false) (if b3478@ls/false (apply (lambda (b347a@pat* b347b@expr* b347c@b b347d@b*) ((lambda (b3482@idn*) (begin (b306d@verify-formals (map car b3482@idn*) b3474@e) ((lambda (b3484@t*) (b2ffd@bless (list 'let (map list b3484@t* b347b@expr*) ((letrec ((b3486@f (lambda (b3488@pat* b3489@t*) (if (null? b3488@pat*) (cons 'begin (cons '#f (cons b347c@b b347d@b*))) (list 'syntax-case (car b3489@t*) '() (list (car b3488@pat*) (b3486@f (cdr b3488@pat*) (cdr b3489@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car b3488@pat*)) (car b3489@t*)))))))) b3486@f) b347a@pat* b3484@t*)))) (b3115@generate-temporaries b347b@expr*)))) ((letrec ((b348c@f (lambda (b348e@pat*) (if (null? b348e@pat*) '() (call-with-values (lambda () (b3045@convert-pattern (car b348e@pat*) '())) (lambda (b3494@b3491 b3495@b3493) ((lambda (b3498@idn* b3499@pat) (append b3498@idn* (b348c@f (cdr b348e@pat*)))) b3495@b3493 b3494@b3491))))))) b348c@f) b347a@pat*))) b3478@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3476@t))) (b3047@syntax-dispatch b3476@t '(_ #(each (any any)) any . each-any)))) b3474@e))) (set! b3001@invalid-fmls-error (lambda (b349c@stx b349d@fmls) ((lambda (b34a0@t) ((lambda (b34a2@ls/false) (if b34a2@ls/false (apply (lambda (b34a4@id* b34a5@last) ((letrec ((b34a8@f (lambda (b34aa@id*) (if (null? b34aa@id*) (values) (if (not (b2e42@id? (car b34aa@id*))) (b3127@syntax-violation '#f '"not an identifier" b349c@stx (car b34aa@id*)) (begin (b34a8@f (cdr b34aa@id*)) (if (b2e4e@bound-id-member? (car b34aa@id*) (cdr b34aa@id*)) (b3127@syntax-violation '#f '"duplicate binding" b349c@stx (car b34aa@id*)) (void)))))))) b34a8@f) (if (b2e42@id? b34a5@last) (cons b34a5@last b34a4@id*) (if (b2e38@syntax-null? b34a5@last) b34a4@id* (b3127@syntax-violation '#f '"not an identifier" b349c@stx b34a5@last))))) b34a2@ls/false) ((lambda (b34ac@t) ((lambda (b34ae@ls/false) (if b34ae@ls/false (apply (lambda () (b3127@syntax-violation '#f '"malformed binding form" b349c@stx b349d@fmls)) b34ae@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b34ac@t))) (b3047@syntax-dispatch b34ac@t '_))) b34a0@t))) (b3047@syntax-dispatch b34a0@t '#(each+ any () any)))) b349d@fmls))) (set! b3003@let-macro (lambda (b34b0@stx) ((lambda (b34b2@t) ((lambda (b34b4@ls/false) (if b34b4@ls/false (apply (lambda (b34b6@lhs* b34b7@rhs* b34b8@b b34b9@b*) (if (b2e4a@valid-bound-ids? b34b6@lhs*) (b2ffd@bless (cons (cons 'lambda (cons b34b6@lhs* (cons b34b8@b b34b9@b*))) b34b7@rhs*)) (b3001@invalid-fmls-error b34b0@stx b34b6@lhs*))) b34b4@ls/false) ((lambda (b34be@t) ((lambda (b34c0@ls/false) (if (and b34c0@ls/false (apply (lambda (b34c2@f b34c3@lhs* b34c4@rhs* b34c5@b b34c6@b*) (b2e42@id? b34c2@f)) b34c0@ls/false)) (apply (lambda (b34cc@f b34cd@lhs* b34ce@rhs* b34cf@b b34d0@b*) (if (b2e4a@valid-bound-ids? b34cd@lhs*) (b2ffd@bless (cons (list 'letrec (list (list b34cc@f (cons 'lambda (cons b34cd@lhs* (cons b34cf@b b34d0@b*))))) b34cc@f) b34ce@rhs*)) (b3001@invalid-fmls-error b34b0@stx b34cd@lhs*))) b34c0@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b34be@t))) (b3047@syntax-dispatch b34be@t '(_ any #(each (any any)) any . each-any)))) b34b2@t))) (b3047@syntax-dispatch b34b2@t '(_ #(each (any any)) any . each-any)))) b34b0@stx))) (set! b3005@let-values-macro (lambda (b34d6@stx) ((lambda (b34d9@rename b34db@rename*) (begin (set! b34d9@rename (lambda (b353e@x b353f@old* b3540@new*) (begin (if (not (b2e42@id? b353e@x)) (b3127@syntax-violation '#f '"not an indentifier" b34d6@stx b353e@x) (void)) (if (b2e4e@bound-id-member? b353e@x b353f@old*) (b3127@syntax-violation '#f '"duplicate binding" b34d6@stx b353e@x) (void)) ((lambda (b3544@y) (values b3544@y (cons b353e@x b353f@old*) (cons b3544@y b3540@new*))) (gensym (b312d@syntax->datum b353e@x)))))) (set! b34db@rename* (lambda (b352c@x* b352d@old* b352e@new*) (if (null? b352c@x*) (values '() b352d@old* b352e@new*) (call-with-values (lambda () (b34d9@rename (car b352c@x*) b352d@old* b352e@new*)) (lambda (b3532@x b3533@old* b3534@new*) (call-with-values (lambda () (b34db@rename* (cdr b352c@x*) b3533@old* b3534@new*)) (lambda (b3538@x* b3539@old* b353a@new*) (values (cons b3532@x b3538@x*) b3539@old* b353a@new*)))))))) ((lambda (b34dc@t) ((lambda (b34de@ls/false) (if b34de@ls/false (apply (lambda (b34e0@b b34e1@b*) (cons* (b2ffd@bless 'let) '() b34e0@b b34e1@b*)) b34de@ls/false) ((lambda (b34e4@t) ((lambda (b34e6@ls/false) (if b34e6@ls/false (apply (lambda (b34e8@lhs* b34e9@rhs* b34ea@b b34eb@b*) (b2ffd@bless ((letrec ((b34f0@f (lambda (b34f2@lhs* b34f3@rhs* b34f4@old* b34f5@new*) (if (null? b34f2@lhs*) (cons 'let (cons (map list b34f4@old* b34f5@new*) (cons b34ea@b b34eb@b*))) ((lambda (b34fa@t) ((lambda (b34fc@ls/false) (if b34fc@ls/false (apply (lambda (b34fe@x*) (call-with-values (lambda () (b34db@rename* b34fe@x* b34f4@old* b34f5@new*)) (lambda (b3506@b3501 b3507@b3503 b3508@b3505) ((lambda (b350c@new* b350d@old* b350e@y*) (list 'call-with-values (list 'lambda '() (car b34f3@rhs*)) (list 'lambda b350e@y* (b34f0@f (cdr b34f2@lhs*) (cdr b34f3@rhs*) b350d@old* b350c@new*)))) b3508@b3505 b3507@b3503 b3506@b3501)))) b34fc@ls/false) ((lambda (b3512@t) ((lambda (b3514@ls/false) (if b3514@ls/false (apply (lambda (b3516@x* b3517@x) (call-with-values (lambda () (b34d9@rename b3517@x b34f4@old* b34f5@new*)) (lambda (b351a@y b351b@old* b351c@new*) (call-with-values (lambda () (b34db@rename* b3516@x* b351b@old* b351c@new*)) (lambda (b3520@y* b3521@old* b3522@new*) (list 'call-with-values (list 'lambda '() (car b34f3@rhs*)) (list 'lambda (append b3520@y* b351a@y) (b34f0@f (cdr b34f2@lhs*) (cdr b34f3@rhs*) b3521@old* b3522@new*)))))))) b3514@ls/false) ((lambda (b3526@t) ((lambda (b3528@ls/false) (if b3528@ls/false (apply (lambda (b352a@others) (b3127@syntax-violation '#f '"malformed bindings" b34d6@stx b352a@others)) b3528@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3526@t))) (b3047@syntax-dispatch b3526@t 'any))) b3512@t))) (b3047@syntax-dispatch b3512@t '#(each+ any () any)))) b34fa@t))) (b3047@syntax-dispatch b34fa@t 'each-any))) (car b34f2@lhs*)))))) b34f0@f) b34e8@lhs* b34e9@rhs* '() '()))) b34e6@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b34e4@t))) (b3047@syntax-dispatch b34e4@t '(_ #(each (any any)) any . each-any)))) b34dc@t))) (b3047@syntax-dispatch b34dc@t '(_ () any . each-any)))) b34d6@stx))) '#f '#f))) (set! b3007@let*-values-macro (lambda (b3546@stx) ((lambda (b3549@check) (begin (set! b3549@check (lambda (b3578@x*) (if (not (null? b3578@x*)) ((lambda (b357a@x) (begin (if (not (b2e42@id? b357a@x)) (b3127@syntax-violation '#f '"not an identifier" b3546@stx b357a@x) (void)) (b3549@check (cdr b3578@x*)) (if (b2e4e@bound-id-member? b357a@x (cdr b3578@x*)) (b3127@syntax-violation '#f '"duplicate identifier" b3546@stx b357a@x) (void)))) (car b3578@x*)) (void)))) ((lambda (b354a@t) ((lambda (b354c@ls/false) (if b354c@ls/false (apply (lambda (b354e@b b354f@b*) (cons* (b2ffd@bless 'let) '() b354e@b b354f@b*)) b354c@ls/false) ((lambda (b3552@t) ((lambda (b3554@ls/false) (if b3554@ls/false (apply (lambda (b3556@lhs* b3557@rhs* b3558@b b3559@b*) (b2ffd@bless ((letrec ((b355e@f (lambda (b3560@lhs* b3561@rhs*) (if (null? b3560@lhs*) (cons 'begin (cons b3558@b b3559@b*)) ((lambda (b3564@t) ((lambda (b3566@ls/false) (if b3566@ls/false (apply (lambda (b3568@x*) (begin (b3549@check b3568@x*) (list 'call-with-values (list 'lambda '() (car b3561@rhs*)) (list 'lambda b3568@x* (b355e@f (cdr b3560@lhs*) (cdr b3561@rhs*)))))) b3566@ls/false) ((lambda (b356a@t) ((lambda (b356c@ls/false) (if b356c@ls/false (apply (lambda (b356e@x* b356f@x) (begin (b3549@check (cons b356f@x b356e@x*)) (list 'call-with-values (list 'lambda '() (car b3561@rhs*)) (list 'lambda (append b356e@x* b356f@x) (b355e@f (cdr b3560@lhs*) (cdr b3561@rhs*)))))) b356c@ls/false) ((lambda (b3572@t) ((lambda (b3574@ls/false) (if b3574@ls/false (apply (lambda (b3576@others) (b3127@syntax-violation '#f '"malformed bindings" b3546@stx b3576@others)) b3574@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3572@t))) (b3047@syntax-dispatch b3572@t 'any))) b356a@t))) (b3047@syntax-dispatch b356a@t '#(each+ any () any)))) b3564@t))) (b3047@syntax-dispatch b3564@t 'each-any))) (car b3560@lhs*)))))) b355e@f) b3556@lhs* b3557@rhs*))) b3554@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3552@t))) (b3047@syntax-dispatch b3552@t '(_ #(each (any any)) any . each-any)))) b354a@t))) (b3047@syntax-dispatch b354a@t '(_ () any . each-any)))) b3546@stx))) '#f))) (set! b3009@trace-lambda-macro (lambda (b357c@stx) ((lambda (b357e@t) ((lambda (b3580@ls/false) (if b3580@ls/false (apply (lambda (b3582@who b3583@fmls b3584@b b3585@b*) (if (b2e4a@valid-bound-ids? b3583@fmls) (b2ffd@bless (list 'make-traced-procedure (list 'quote b3582@who) (cons 'lambda (cons b3583@fmls (cons b3584@b b3585@b*))))) (b3001@invalid-fmls-error b357c@stx b3583@fmls))) b3580@ls/false) ((lambda (b358a@t) ((lambda (b358c@ls/false) (if b358c@ls/false (apply (lambda (b358e@who b358f@fmls b3590@last b3591@b b3592@b*) (if (b2e4a@valid-bound-ids? (cons b3590@last b358f@fmls)) (b2ffd@bless (list 'make-traced-procedure (list 'quote b358e@who) (cons 'lambda (cons (append b358f@fmls b3590@last) (cons b3591@b b3592@b*))))) (b3001@invalid-fmls-error b357c@stx (append b358f@fmls b3590@last)))) b358c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b358a@t))) (b3047@syntax-dispatch b358a@t '(_ any #(each+ any () any) any . each-any)))) b357e@t))) (b3047@syntax-dispatch b357e@t '(_ any each-any any . each-any)))) b357c@stx))) (set! b300b@trace-define-macro (lambda (b3598@stx) ((lambda (b359a@t) ((lambda (b359c@ls/false) (if b359c@ls/false (apply (lambda (b359e@who b359f@fmls b35a0@b b35a1@b*) (if (b2e4a@valid-bound-ids? b359f@fmls) (b2ffd@bless (list 'define b359e@who (list 'make-traced-procedure (list 'quote b359e@who) (cons 'lambda (cons b359f@fmls (cons b35a0@b b35a1@b*)))))) (b3001@invalid-fmls-error b3598@stx b359f@fmls))) b359c@ls/false) ((lambda (b35a6@t) ((lambda (b35a8@ls/false) (if b35a8@ls/false (apply (lambda (b35aa@who b35ab@fmls b35ac@last b35ad@b b35ae@b*) (if (b2e4a@valid-bound-ids? (cons b35ac@last b35ab@fmls)) (b2ffd@bless (list 'define b35aa@who (list 'make-traced-procedure (list 'quote b35aa@who) (cons 'lambda (cons (append b35ab@fmls b35ac@last) (cons b35ad@b b35ae@b*)))))) (b3001@invalid-fmls-error b3598@stx (append b35ab@fmls b35ac@last)))) b35a8@ls/false) ((lambda (b35b4@t) ((lambda (b35b6@ls/false) (if b35b6@ls/false (apply (lambda (b35b8@who b35b9@expr) (if (b2e42@id? b35b8@who) (b2ffd@bless (list 'define b35b8@who (list 'let (list (list 'v b35b9@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote b35b8@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (b3127@syntax-violation '#f '"invalid name" b3598@stx))) b35b6@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b35b4@t))) (b3047@syntax-dispatch b35b4@t '(_ any any)))) b35a6@t))) (b3047@syntax-dispatch b35a6@t '(_ (any . #(each+ any () any)) any . each-any)))) b359a@t))) (b3047@syntax-dispatch b359a@t '(_ (any . each-any) any . each-any)))) b3598@stx))) (set! b300d@trace-define-syntax-macro (lambda (b35bc@stx) ((lambda (b35be@t) ((lambda (b35c0@ls/false) (if b35c0@ls/false (apply (lambda (b35c2@who b35c3@expr) (if (b2e42@id? b35c2@who) (b2ffd@bless (list 'define-syntax b35c2@who (list 'make-traced-macro (list 'quote b35c2@who) b35c3@expr))) (b3127@syntax-violation '#f '"invalid name" b35bc@stx))) b35c0@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b35be@t))) (b3047@syntax-dispatch b35be@t '(_ any any)))) b35bc@stx))) (set! b300f@trace-let/rec-syntax (lambda (b35c6@who) (lambda (b35c8@stx) ((lambda (b35ca@t) ((lambda (b35cc@ls/false) (if b35cc@ls/false (apply (lambda (b35ce@lhs* b35cf@rhs* b35d0@b b35d1@b*) (if (b2e4a@valid-bound-ids? b35ce@lhs*) ((lambda (b35d6@rhs*) (b2ffd@bless (cons b35c6@who (cons (map list b35ce@lhs* b35d6@rhs*) (cons b35d0@b b35d1@b*))))) (map (lambda (b35d8@lhs b35d9@rhs) (list 'make-traced-macro (list 'quote b35d8@lhs) b35d9@rhs)) b35ce@lhs* b35cf@rhs*)) (b3001@invalid-fmls-error b35c8@stx b35ce@lhs*))) b35cc@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b35ca@t))) (b3047@syntax-dispatch b35ca@t '(_ #(each (any any)) any . each-any)))) b35c8@stx)))) (set! b3011@trace-let-syntax-macro (b300f@trace-let/rec-syntax 'let-syntax)) (set! b3013@trace-letrec-syntax-macro (b300f@trace-let/rec-syntax 'letrec-syntax)) (set! b3015@guard-macro (lambda (b35dc@x) ((lambda (b35df@gen-clauses) (begin (set! b35df@gen-clauses (lambda (b35f6@con b35f7@outerk b35f8@clause*) ((lambda (b35fd@f b35ff@f*) (begin (set! b35fd@f (lambda (b3636@x b3637@k) ((lambda (b363a@t) ((lambda (b363c@ls/false) (if b363c@ls/false (apply (lambda (b363e@e b363f@p) ((lambda (b3642@t) (list 'let (list (list b3642@t b363e@e)) (list 'if b3642@t (list b363f@p b3642@t) b3637@k))) (gensym))) b363c@ls/false) ((lambda (b3644@t) ((lambda (b3646@ls/false) (if b3646@ls/false (apply (lambda (b3648@e) ((lambda (b364a@t) (list 'let (list (list b364a@t b3648@e)) (list 'if b364a@t b364a@t b3637@k))) (gensym))) b3646@ls/false) ((lambda (b364c@t) ((lambda (b364e@ls/false) (if b364e@ls/false (apply (lambda (b3650@e b3651@v b3652@v*) (list 'if b3650@e (cons 'begin (cons b3651@v b3652@v*)) b3637@k)) b364e@ls/false) ((lambda (b3656@t) ((lambda (b3658@ls/false) (if b3658@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid guard clause" b3636@x)) b3658@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3656@t))) (b3047@syntax-dispatch b3656@t '_))) b364c@t))) (b3047@syntax-dispatch b364c@t '(any any . each-any)))) b3644@t))) (b3047@syntax-dispatch b3644@t '(any)))) b363a@t))) (b3047@syntax-dispatch b363a@t '(any #(scheme-id =>) any)))) b3636@x))) (set! b35ff@f* (lambda (b360c@x*) ((lambda (b360e@t) ((lambda (b3610@ls/false) (if b3610@ls/false (apply (lambda () ((lambda (b3612@g) (values (list b3612@g (list 'lambda '() (list 'raise-continuable b35f6@con))) b3612@g)) (gensym))) b3610@ls/false) ((lambda (b3614@t) ((lambda (b3616@ls/false) (if b3616@ls/false (apply (lambda (b3618@e b3619@e*) (values (cons 'begin (cons b3618@e b3619@e*)) '#f)) b3616@ls/false) ((lambda (b361c@t) ((lambda (b361e@ls/false) (if b361e@ls/false (apply (lambda (b3620@cls b3621@cls*) (call-with-values (lambda () (b35ff@f* b3621@cls*)) (lambda (b3628@b3625 b3629@b3627) ((lambda (b362c@g b362d@e) (values (b35fd@f b3620@cls b362d@e) b362c@g)) b3629@b3627 b3628@b3625)))) b361e@ls/false) ((lambda (b3630@t) ((lambda (b3632@ls/false) (if b3632@ls/false (apply (lambda (b3634@others) (b3127@syntax-violation '#f '"invalid guard clause" b3634@others)) b3632@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3630@t))) (b3047@syntax-dispatch b3630@t 'any))) b361c@t))) (b3047@syntax-dispatch b361c@t '(any . any)))) b3614@t))) (b3047@syntax-dispatch b3614@t '((#(scheme-id else) any . each-any))))) b360e@t))) (b3047@syntax-dispatch b360e@t '()))) b360c@x*))) (call-with-values (lambda () (b35ff@f* b35f8@clause*)) (lambda (b3604@b3601 b3605@b3603) ((lambda (b3608@raisek b3609@code) (if b3608@raisek (list (list 'call/cc (list 'lambda (list b3608@raisek) (list b35f7@outerk (list 'lambda '() b3609@code))))) (list b35f7@outerk (list 'lambda '() b3609@code)))) b3605@b3603 b3604@b3601))))) '#f '#f))) ((lambda (b35e0@t) ((lambda (b35e2@ls/false) (if (and b35e2@ls/false (apply (lambda (b35e4@con b35e5@clause* b35e6@b b35e7@b*) (b2e42@id? b35e4@con)) b35e2@ls/false)) (apply (lambda (b35ec@con b35ed@clause* b35ee@b b35ef@b*) ((lambda (b35f4@outerk) (b2ffd@bless (list (list 'call/cc (list 'lambda (list b35f4@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list b35ec@con) (b35df@gen-clauses b35ec@con b35f4@outerk b35ed@clause*)) (cons 'lambda (cons '() (cons b35ee@b b35ef@b*)))))))))) (gensym))) b35e2@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b35e0@t))) (b3047@syntax-dispatch b35e0@t '(_ (any . each-any) any . each-any)))) b35dc@x))) '#f))) (set! b3017@define-enumeration-macro (lambda (b365a@stx) ((lambda (b365d@set? b365f@remove-dups) (begin (set! b365d@set? (lambda (b3676@x) (or (null? b3676@x) (and (not (memq (car b3676@x) (cdr b3676@x))) (b365d@set? (cdr b3676@x)))))) (set! b365f@remove-dups (lambda (b3674@ls) (if (null? b3674@ls) '() (cons (car b3674@ls) (b365f@remove-dups (remq (car b3674@ls) (cdr b3674@ls))))))) ((lambda (b3660@t) ((lambda (b3662@ls/false) (if (and b3662@ls/false (apply (lambda (b3664@name b3665@id* b3666@maker) (and (b2e42@id? b3664@name) (b2e42@id? b3666@maker) (for-all b2e42@id? b3665@id*))) b3662@ls/false)) (apply (lambda (b366a@name b366b@id* b366c@maker) ((lambda (b3670@name* b3671@mk) (b2ffd@bless (list 'begin (list 'define b3671@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote b3670@name*)))) (list 'define-syntax b366a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote b3670@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote b366a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax b366c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote b366c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote b3670@name*)) (cons 'syntax-violation (cons (list 'quote b366c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons b3671@mk '('(n* ...)))))))))))) (b365f@remove-dups (b312d@syntax->datum b366b@id*)) (gensym))) b3662@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3660@t))) (b3047@syntax-dispatch b3660@t '(_ any each-any any)))) b365a@stx))) '#f '#f))) (set! b3019@time-macro (lambda (b3678@stx) ((lambda (b367a@t) ((lambda (b367c@ls/false) (if b367c@ls/false (apply (lambda (b367e@expr) (b2ffd@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() b367e@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) b367c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b367a@t))) (b3047@syntax-dispatch b367a@t '(_ any)))) b3678@stx))) (set! b301b@delay-macro (lambda (b3680@stx) ((lambda (b3682@t) ((lambda (b3684@ls/false) (if b3684@ls/false (apply (lambda (b3686@expr) (b2ffd@bless (list 'make-promise (list 'lambda '() b3686@expr)))) b3684@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3682@t))) (b3047@syntax-dispatch b3682@t '(_ any)))) b3680@stx))) (set! b301d@assert-macro (lambda (b3688@stx) ((lambda (b368a@t) ((lambda (b368c@ls/false) (if b368c@ls/false (apply (lambda (b368e@expr) ((lambda (b3690@pos) (b2ffd@bless (list 'unless b368e@expr (list 'assertion-error (list 'quote b368e@expr) (list 'quote b3690@pos))))) (or (b311f@expression-position b3688@stx) (b311f@expression-position b368e@expr)))) b368c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b368a@t))) (b3047@syntax-dispatch b368a@t '(_ any)))) b3688@stx))) (set! b301f@endianness-macro (lambda (b3692@stx) ((lambda (b3694@t) ((lambda (b3696@ls/false) (if b3696@ls/false (apply (lambda (b3698@e) ((lambda (b369a@t) (if (memv b369a@t '(little)) (b2ffd@bless ''little) (if (memv b369a@t '(big)) (b2ffd@bless ''big) (b3127@syntax-violation '#f '"endianness must be big or little" b3692@stx)))) (b312d@syntax->datum b3698@e))) b3696@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3694@t))) (b3047@syntax-dispatch b3694@t '(_ any)))) b3692@stx))) (set! b3021@identifier-syntax-macro (lambda (b369c@stx) ((lambda (b369e@t) ((lambda (b36a0@ls/false) (if b36a0@ls/false (apply (lambda (b36a2@expr) (b2ffd@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax b36a2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax b36a2@expr) '((syntax (e* ...)))))))))) b36a0@ls/false) ((lambda (b36a4@t) ((lambda (b36a6@ls/false) (if (and b36a6@ls/false (apply (lambda (b36a8@id1 b36a9@expr1 b36aa@id2 b36ab@expr2 b36ac@expr3) (and (b2e42@id? b36a8@id1) (b2e42@id? b36aa@id2) (b2e42@id? b36ab@expr2))) b36a6@ls/false)) (apply (lambda (b36b2@id1 b36b3@expr1 b36b4@id2 b36b5@expr2 b36b6@expr3) (b2ffd@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax b36b3@expr1)) (list (list 'set! 'id b36b5@expr2) (list 'syntax b36b6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons b36b3@expr1 '(e* ...))))))))) b36a6@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b36a4@t))) (b3047@syntax-dispatch b36a4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) b369e@t))) (b3047@syntax-dispatch b369e@t '(_ any)))) b369c@stx))) (set! b3023@do-macro (lambda (b36bc@stx) ((lambda (b36bf@bind) (begin (set! b36bf@bind (lambda (b36d6@x) ((lambda (b36d8@t) ((lambda (b36da@ls/false) (if b36da@ls/false (apply (lambda (b36dc@x b36dd@init) (list b36dc@x b36dd@init b36dc@x)) b36da@ls/false) ((lambda (b36e0@t) ((lambda (b36e2@ls/false) (if b36e2@ls/false (apply (lambda (b36e4@x b36e5@init b36e6@step) (list b36e4@x b36e5@init b36e6@step)) b36e2@ls/false) ((lambda (b36ea@t) ((lambda (b36ec@ls/false) (if b36ec@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid binding" b36bc@stx)) b36ec@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b36ea@t))) (b3047@syntax-dispatch b36ea@t '_))) b36e0@t))) (b3047@syntax-dispatch b36e0@t '(any any any)))) b36d8@t))) (b3047@syntax-dispatch b36d8@t '(any any)))) b36d6@x))) ((lambda (b36c0@t) ((lambda (b36c2@ls/false) (if b36c2@ls/false (apply (lambda (b36c4@binding* b36c5@test b36c6@expr* b36c7@command*) ((lambda (b36cc@t) ((lambda (b36ce@ls/false) (if b36ce@ls/false (apply (lambda (b36d0@x* b36d1@init* b36d2@step*) (if (b2e4a@valid-bound-ids? b36d0@x*) (b2ffd@bless (list 'letrec (list (list 'loop (list 'lambda b36d0@x* (list 'if b36c5@test (cons 'begin (cons '(if #f #f) b36c6@expr*)) (cons 'begin (append b36c7@command* (list (cons 'loop b36d2@step*)))))))) (cons 'loop b36d1@init*))) (b3127@syntax-violation '#f '"invalid bindings" b36bc@stx))) b36ce@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b36cc@t))) (b3047@syntax-dispatch b36cc@t '#(each (any any any))))) (map b36bf@bind b36c4@binding*))) b36c2@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b36c0@t))) (b3047@syntax-dispatch b36c0@t '(_ each-any (any . each-any) . each-any)))) b36bc@stx))) '#f))) (set! b3025@let*-macro (lambda (b36ee@stx) ((lambda (b36f0@t) ((lambda (b36f2@ls/false) (if (and b36f2@ls/false (apply (lambda (b36f4@lhs* b36f5@rhs* b36f6@b b36f7@b*) (for-all b2e42@id? b36f4@lhs*)) b36f2@ls/false)) (apply (lambda (b36fc@lhs* b36fd@rhs* b36fe@b b36ff@b*) (b2ffd@bless ((letrec ((b3704@f (lambda (b3706@x*) (if (null? b3706@x*) (cons 'let (cons '() (cons b36fe@b b36ff@b*))) (list 'let (list (car b3706@x*)) (b3704@f (cdr b3706@x*))))))) b3704@f) (map list b36fc@lhs* b36fd@rhs*)))) b36f2@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b36f0@t))) (b3047@syntax-dispatch b36f0@t '(_ #(each (any any)) any . each-any)))) b36ee@stx))) (set! b3027@or-macro (lambda (b3708@stx) ((lambda (b370a@t) ((lambda (b370c@ls/false) (if b370c@ls/false (apply (lambda () '#f) b370c@ls/false) ((lambda (b370e@t) ((lambda (b3710@ls/false) (if b3710@ls/false (apply (lambda (b3712@e b3713@e*) (b2ffd@bless ((letrec ((b3716@f (lambda (b3718@e b3719@e*) (if (null? b3719@e*) (list 'begin '#f b3718@e) (list 'let (list (list 't b3718@e)) (list 'if 't 't (b3716@f (car b3719@e*) (cdr b3719@e*)))))))) b3716@f) b3712@e b3713@e*))) b3710@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b370e@t))) (b3047@syntax-dispatch b370e@t '(_ any . each-any)))) b370a@t))) (b3047@syntax-dispatch b370a@t '(_)))) b3708@stx))) (set! b3029@and-macro (lambda (b371c@stx) ((lambda (b371e@t) ((lambda (b3720@ls/false) (if b3720@ls/false (apply (lambda () '#t) b3720@ls/false) ((lambda (b3722@t) ((lambda (b3724@ls/false) (if b3724@ls/false (apply (lambda (b3726@e b3727@e*) (b2ffd@bless ((letrec ((b372a@f (lambda (b372c@e b372d@e*) (if (null? b372d@e*) (list 'begin '#f b372c@e) (cons 'if (cons b372c@e (cons (b372a@f (car b372d@e*) (cdr b372d@e*)) '(#f)))))))) b372a@f) b3726@e b3727@e*))) b3724@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3722@t))) (b3047@syntax-dispatch b3722@t '(_ any . each-any)))) b371e@t))) (b3047@syntax-dispatch b371e@t '(_)))) b371c@stx))) (set! b302b@cond-macro (lambda (b3730@stx) ((lambda (b3732@t) ((lambda (b3734@ls/false) (if b3734@ls/false (apply (lambda (b3736@cls b3737@cls*) (b2ffd@bless ((letrec ((b373a@f (lambda (b373c@cls b373d@cls*) (if (null? b373d@cls*) ((lambda (b3740@t) ((lambda (b3742@ls/false) (if b3742@ls/false (apply (lambda (b3744@e b3745@e*) (cons 'begin (cons b3744@e b3745@e*))) b3742@ls/false) ((lambda (b3748@t) ((lambda (b374a@ls/false) (if b374a@ls/false (apply (lambda (b374c@e b374d@p) (list 'let (list (list 't b374c@e)) (list 'if 't (cons b374d@p '(t))))) b374a@ls/false) ((lambda (b3750@t) ((lambda (b3752@ls/false) (if b3752@ls/false (apply (lambda (b3754@e) (cons 'or (cons b3754@e '((if #f #f))))) b3752@ls/false) ((lambda (b3756@t) ((lambda (b3758@ls/false) (if b3758@ls/false (apply (lambda (b375a@e b375b@e*) (list 'if b375a@e (cons 'begin b375b@e*))) b3758@ls/false) ((lambda (b375e@t) ((lambda (b3760@ls/false) (if b3760@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid last clause" b3730@stx)) b3760@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b375e@t))) (b3047@syntax-dispatch b375e@t '_))) b3756@t))) (b3047@syntax-dispatch b3756@t '(any . each-any)))) b3750@t))) (b3047@syntax-dispatch b3750@t '(any)))) b3748@t))) (b3047@syntax-dispatch b3748@t '(any #(scheme-id =>) any)))) b3740@t))) (b3047@syntax-dispatch b3740@t '(#(scheme-id else) any . each-any)))) b373c@cls) ((lambda (b3762@t) ((lambda (b3764@ls/false) (if b3764@ls/false (apply (lambda (b3766@e b3767@e*) (b3127@syntax-violation '#f '"incorrect position of keyword else" b3730@stx)) b3764@ls/false) ((lambda (b376a@t) ((lambda (b376c@ls/false) (if b376c@ls/false (apply (lambda (b376e@e b376f@p) (list 'let (list (list 't b376e@e)) (list 'if 't (cons b376f@p '(t)) (b373a@f (car b373d@cls*) (cdr b373d@cls*))))) b376c@ls/false) ((lambda (b3772@t) ((lambda (b3774@ls/false) (if b3774@ls/false (apply (lambda (b3776@e) (list 'or b3776@e (b373a@f (car b373d@cls*) (cdr b373d@cls*)))) b3774@ls/false) ((lambda (b3778@t) ((lambda (b377a@ls/false) (if b377a@ls/false (apply (lambda (b377c@e b377d@e*) (list 'if b377c@e (cons 'begin b377d@e*) (b373a@f (car b373d@cls*) (cdr b373d@cls*)))) b377a@ls/false) ((lambda (b3780@t) ((lambda (b3782@ls/false) (if b3782@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid last clause" b3730@stx)) b3782@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3780@t))) (b3047@syntax-dispatch b3780@t '_))) b3778@t))) (b3047@syntax-dispatch b3778@t '(any . each-any)))) b3772@t))) (b3047@syntax-dispatch b3772@t '(any)))) b376a@t))) (b3047@syntax-dispatch b376a@t '(any #(scheme-id =>) any)))) b3762@t))) (b3047@syntax-dispatch b3762@t '(#(scheme-id else) any . each-any)))) b373c@cls))))) b373a@f) b3736@cls b3737@cls*))) b3734@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3732@t))) (b3047@syntax-dispatch b3732@t '(_ any . each-any)))) b3730@stx))) (set! b302d@do-include (lambda (b3784@stx b3785@id b3786@filename) ((lambda (b378a@filename) (begin (if (not (and (string? b378a@filename) (b2e42@id? b3785@id))) (b3127@syntax-violation '#f '"invalid syntax" b3784@stx) (void)) (cons (b2ffd@bless 'begin) (with-input-from-file b378a@filename (lambda () ((letrec ((b378c@f (lambda (b378e@ls) ((lambda (b3790@x) (if (eof-object? b3790@x) (reverse b378e@ls) (b378c@f (cons (b2e22@datum->stx b3785@id b3790@x) b378e@ls)))) (b2994@b2866@read-annotated))))) b378c@f) '())))))) (b2e56@stx->datum b3786@filename)))) (set! b302f@include-macro (lambda (b3792@e) ((lambda (b3794@t) ((lambda (b3796@ls/false) (if b3796@ls/false (apply (lambda (b3798@id b3799@filename) (b302d@do-include b3792@e b3798@id b3799@filename)) b3796@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3794@t))) (b3047@syntax-dispatch b3794@t '(any any)))) b3792@e))) (set! b3031@include-into-macro (lambda (b379c@e) ((lambda (b379e@t) ((lambda (b37a0@ls/false) (if b37a0@ls/false (apply (lambda (b37a2@id b37a3@filename) (b302d@do-include b379c@e b37a2@id b37a3@filename)) b37a0@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b379e@t))) (b3047@syntax-dispatch b379e@t '(_ any any)))) b379c@e))) (set! b3033@syntax-rules-macro (lambda (b37a6@e) ((lambda (b37a8@t) ((lambda (b37aa@ls/false) (if b37aa@ls/false (apply (lambda (b37ac@lits b37ad@pat* b37ae@tmp*) (begin (b304d@verify-literals b37ac@lits b37a6@e) (b2ffd@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons b37ac@lits (map (lambda (b37b2@pat b37b3@tmp) ((lambda (b37b6@t) ((lambda (b37b8@ls/false) (if b37b8@ls/false (apply (lambda (b37ba@rest) (list (cons 'g b37ba@rest) (list 'syntax b37b3@tmp))) b37b8@ls/false) ((lambda (b37bc@t) ((lambda (b37be@ls/false) (if b37be@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid syntax-rules pattern" b37a6@e b37b2@pat)) b37be@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b37bc@t))) (b3047@syntax-dispatch b37bc@t '_))) b37b6@t))) (b3047@syntax-dispatch b37b6@t '(_ . any)))) b37b2@pat)) b37ad@pat* b37ae@tmp*)))))))) b37aa@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b37a8@t))) (b3047@syntax-dispatch b37a8@t '(_ each-any . #(each (any any)))))) b37a6@e))) (set! b3035@quasiquote-macro ((lambda () ((lambda (b37c1@datum b37dd@quasicons* b37df@quasicons b37e1@quasiappend b37e3@quasivector b37e5@vquasi b37e7@quasi) (begin (set! b37c1@datum (lambda (b38c2@x) (list (b2fd1@scheme-stx 'quote) (b2e2a@mkstx b38c2@x '() '() '())))) (set! b37dd@quasicons* (lambda (b38ba@x b38bb@y) ((letrec ((b38be@f (lambda (b38c0@x) (if (null? b38c0@x) b38bb@y (b37df@quasicons (car b38c0@x) (b38be@f (cdr b38c0@x))))))) b38be@f) b38ba@x))) (set! b37df@quasicons (lambda (b3894@x b3895@y) ((lambda (b3898@t) ((lambda (b389a@ls/false) (if b389a@ls/false (apply (lambda (b389c@dy) ((lambda (b389e@t) ((lambda (b38a0@ls/false) (if b38a0@ls/false (apply (lambda (b38a2@dx) (list (b2fd1@scheme-stx 'quote) (cons b38a2@dx b389c@dy))) b38a0@ls/false) ((lambda (b38a4@t) ((lambda (b38a6@ls/false) (if b38a6@ls/false (apply (lambda () ((lambda (b38a8@t) ((lambda (b38aa@ls/false) (if b38aa@ls/false (apply (lambda () (list (b2fd1@scheme-stx 'list) b3894@x)) b38aa@ls/false) ((lambda (b38ac@t) ((lambda (b38ae@ls/false) (if b38ae@ls/false (apply (lambda () (list (b2fd1@scheme-stx 'cons) b3894@x b3895@y)) b38ae@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b38ac@t))) (b3047@syntax-dispatch b38ac@t '_))) b38a8@t))) (b3047@syntax-dispatch b38a8@t '()))) b389c@dy)) b38a6@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b38a4@t))) (b3047@syntax-dispatch b38a4@t '_))) b389e@t))) (b3047@syntax-dispatch b389e@t '(#(scheme-id quote) any)))) b3894@x)) b389a@ls/false) ((lambda (b38b0@t) ((lambda (b38b2@ls/false) (if b38b2@ls/false (apply (lambda (b38b4@stuff) (cons* (b2fd1@scheme-stx 'list) b3894@x b38b4@stuff)) b38b2@ls/false) ((lambda (b38b6@t) ((lambda (b38b8@ls/false) (if b38b8@ls/false (apply (lambda () (list (b2fd1@scheme-stx 'cons) b3894@x b3895@y)) b38b8@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b38b6@t))) (b3047@syntax-dispatch b38b6@t '_))) b38b0@t))) (b3047@syntax-dispatch b38b0@t '(#(scheme-id list) . each-any)))) b3898@t))) (b3047@syntax-dispatch b3898@t '(#(scheme-id quote) any)))) b3895@y))) (set! b37e1@quasiappend (lambda (b387a@x b387b@y) ((lambda (b387e@ls) (if (null? b387e@ls) (list (b2fd1@scheme-stx 'quote) '()) (if (null? (cdr b387e@ls)) (car b387e@ls) (cons* (b2fd1@scheme-stx 'append) b387e@ls)))) ((letrec ((b3880@f (lambda (b3882@x) (if (null? b3882@x) ((lambda (b3884@t) ((lambda (b3886@ls/false) (if b3886@ls/false (apply (lambda () '()) b3886@ls/false) ((lambda (b3888@t) ((lambda (b388a@ls/false) (if b388a@ls/false (apply (lambda () (list b387b@y)) b388a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3888@t))) (b3047@syntax-dispatch b3888@t '_))) b3884@t))) (b3047@syntax-dispatch b3884@t '(#(scheme-id quote) ())))) b387b@y) ((lambda (b388c@t) ((lambda (b388e@ls/false) (if b388e@ls/false (apply (lambda () (b3880@f (cdr b3882@x))) b388e@ls/false) ((lambda (b3890@t) ((lambda (b3892@ls/false) (if b3892@ls/false (apply (lambda () (cons (car b3882@x) (b3880@f (cdr b3882@x)))) b3892@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3890@t))) (b3047@syntax-dispatch b3890@t '_))) b388c@t))) (b3047@syntax-dispatch b388c@t '(#(scheme-id quote) ())))) (car b3882@x)))))) b3880@f) b387a@x)))) (set! b37e3@quasivector (lambda (b3848@x) ((lambda (b384a@pat-x) ((lambda (b384c@t) ((lambda (b384e@ls/false) (if b384e@ls/false (apply (lambda (b3850@x*) (list (b2fd1@scheme-stx 'quote) (list->vector b3850@x*))) b384e@ls/false) ((lambda (b3852@t) ((lambda (b3854@ls/false) (if b3854@ls/false (apply (lambda () ((letrec ((b3856@f (lambda (b3858@x b3859@k) ((lambda (b385c@t) ((lambda (b385e@ls/false) (if b385e@ls/false (apply (lambda (b3860@x*) (b3859@k (map (lambda (b3862@x) (list (b2fd1@scheme-stx 'quote) b3862@x)) b3860@x*))) b385e@ls/false) ((lambda (b3864@t) ((lambda (b3866@ls/false) (if b3866@ls/false (apply (lambda (b3868@x*) (b3859@k b3868@x*)) b3866@ls/false) ((lambda (b386a@t) ((lambda (b386c@ls/false) (if b386c@ls/false (apply (lambda (b386e@x b386f@y) (b3856@f b386f@y (lambda (b3872@ls) (b3859@k (cons b386e@x b3872@ls))))) b386c@ls/false) ((lambda (b3874@t) ((lambda (b3876@ls/false) (if b3876@ls/false (apply (lambda () (list (b2fd1@scheme-stx 'list->vector) b384a@pat-x)) b3876@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3874@t))) (b3047@syntax-dispatch b3874@t '_))) b386a@t))) (b3047@syntax-dispatch b386a@t '(#(scheme-id cons) any any)))) b3864@t))) (b3047@syntax-dispatch b3864@t '(#(scheme-id list) . each-any)))) b385c@t))) (b3047@syntax-dispatch b385c@t '(#(scheme-id quote) each-any)))) b3858@x)))) b3856@f) b3848@x (lambda (b3878@ls) (cons* (b2fd1@scheme-stx 'vector) b3878@ls)))) b3854@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3852@t))) (b3047@syntax-dispatch b3852@t '_))) b384c@t))) (b3047@syntax-dispatch b384c@t '(#(scheme-id quote) each-any)))) b384a@pat-x)) b3848@x))) (set! b37e5@vquasi (lambda (b3826@p b3827@lev) ((lambda (b382a@t) ((lambda (b382c@ls/false) (if b382c@ls/false (apply (lambda (b382e@p b382f@q) ((lambda (b3832@t) ((lambda (b3834@ls/false) (if b3834@ls/false (apply (lambda (b3836@p) (if (= b3827@lev '0) (b37dd@quasicons* b3836@p (b37e5@vquasi b382f@q b3827@lev)) (b37df@quasicons (b37df@quasicons (b37c1@datum 'unquote) (b37e7@quasi b3836@p (- b3827@lev '1))) (b37e5@vquasi b382f@q b3827@lev)))) b3834@ls/false) ((lambda (b3838@t) ((lambda (b383a@ls/false) (if b383a@ls/false (apply (lambda (b383c@p) (if (= b3827@lev '0) (b37e1@quasiappend b383c@p (b37e5@vquasi b382f@q b3827@lev)) (b37df@quasicons (b37df@quasicons (b37c1@datum 'unquote-splicing) (b37e7@quasi b383c@p (- b3827@lev '1))) (b37e5@vquasi b382f@q b3827@lev)))) b383a@ls/false) ((lambda (b383e@t) ((lambda (b3840@ls/false) (if b3840@ls/false (apply (lambda (b3842@p) (b37df@quasicons (b37e7@quasi b3842@p b3827@lev) (b37e5@vquasi b382f@q b3827@lev))) b3840@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b383e@t))) (b3047@syntax-dispatch b383e@t 'any))) b3838@t))) (b3047@syntax-dispatch b3838@t '(#(scheme-id unquote-splicing) . each-any)))) b3832@t))) (b3047@syntax-dispatch b3832@t '(#(scheme-id unquote) . each-any)))) b382e@p)) b382c@ls/false) ((lambda (b3844@t) ((lambda (b3846@ls/false) (if b3846@ls/false (apply (lambda () (list (b2fd1@scheme-stx 'quote) '())) b3846@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3844@t))) (b3047@syntax-dispatch b3844@t '()))) b382a@t))) (b3047@syntax-dispatch b382a@t '(any . any)))) b3826@p))) (set! b37e7@quasi (lambda (b37f0@p b37f1@lev) ((lambda (b37f4@t) ((lambda (b37f6@ls/false) (if b37f6@ls/false (apply (lambda (b37f8@p) (if (= b37f1@lev '0) b37f8@p (b37df@quasicons (b37c1@datum 'unquote) (b37e7@quasi (list b37f8@p) (- b37f1@lev '1))))) b37f6@ls/false) ((lambda (b37fa@t) ((lambda (b37fc@ls/false) (if b37fc@ls/false (apply (lambda (b37fe@p b37ff@q) (if (= b37f1@lev '0) (b37dd@quasicons* b37fe@p (b37e7@quasi b37ff@q b37f1@lev)) (b37df@quasicons (b37df@quasicons (b37c1@datum 'unquote) (b37e7@quasi b37fe@p (- b37f1@lev '1))) (b37e7@quasi b37ff@q b37f1@lev)))) b37fc@ls/false) ((lambda (b3802@t) ((lambda (b3804@ls/false) (if b3804@ls/false (apply (lambda (b3806@p b3807@q) (if (= b37f1@lev '0) (b37e1@quasiappend b3806@p (b37e7@quasi b3807@q b37f1@lev)) (b37df@quasicons (b37df@quasicons (b37c1@datum 'unquote-splicing) (b37e7@quasi b3806@p (- b37f1@lev '1))) (b37e7@quasi b3807@q b37f1@lev)))) b3804@ls/false) ((lambda (b380a@t) ((lambda (b380c@ls/false) (if b380c@ls/false (apply (lambda (b380e@p) (b37df@quasicons (b37c1@datum 'quasiquote) (b37e7@quasi (list b380e@p) (+ b37f1@lev '1)))) b380c@ls/false) ((lambda (b3810@t) ((lambda (b3812@ls/false) (if b3812@ls/false (apply (lambda (b3814@p b3815@q) (b37df@quasicons (b37e7@quasi b3814@p b37f1@lev) (b37e7@quasi b3815@q b37f1@lev))) b3812@ls/false) ((lambda (b3818@t) ((lambda (b381a@ls/false) (if (and b381a@ls/false (apply (lambda (b381c@x) (not (b2e0e@stx? b381c@x))) b381a@ls/false)) (apply (lambda (b381e@x) (b37e3@quasivector (b37e5@vquasi b381e@x b37f1@lev))) b381a@ls/false) ((lambda (b3820@t) ((lambda (b3822@ls/false) (if b3822@ls/false (apply (lambda (b3824@p) (list (b2fd1@scheme-stx 'quote) b3824@p)) b3822@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3820@t))) (b3047@syntax-dispatch b3820@t 'any))) b3818@t))) (b3047@syntax-dispatch b3818@t '#(vector each-any)))) b3810@t))) (b3047@syntax-dispatch b3810@t '(any . any)))) b380a@t))) (b3047@syntax-dispatch b380a@t '(#(scheme-id quasiquote) any)))) b3802@t))) (b3047@syntax-dispatch b3802@t '((#(scheme-id unquote-splicing) . each-any) . any)))) b37fa@t))) (b3047@syntax-dispatch b37fa@t '((#(scheme-id unquote) . each-any) . any)))) b37f4@t))) (b3047@syntax-dispatch b37f4@t '(#(scheme-id unquote) any)))) b37f0@p))) (lambda (b37e8@x) ((lambda (b37ea@t) ((lambda (b37ec@ls/false) (if b37ec@ls/false (apply (lambda (b37ee@e) (b37e7@quasi b37ee@e '0)) b37ec@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b37ea@t))) (b3047@syntax-dispatch b37ea@t '(_ any)))) b37e8@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! b3037@quasisyntax-macro ((lambda () ((lambda (b38c5@quasi) (begin (set! b38c5@quasi (lambda (b38e0@p b38e1@lev) ((lambda (b38e4@t) ((lambda (b38e6@ls/false) (if b38e6@ls/false (apply (lambda (b38e8@p) (if (= b38e1@lev '0) ((lambda (b38ea@g) (values (list b38ea@g) (list b38e8@p) b38ea@g)) (gensym)) (call-with-values (lambda () (b38c5@quasi b38e8@p (- b38e1@lev '1))) (lambda (b38f2@b38ed b38f3@b38ef b38f4@b38f1) ((lambda (b38f8@p b38f9@rhs* b38fa@lhs*) (values b38fa@lhs* b38f9@rhs* (list 'unsyntax b38f8@p))) b38f4@b38f1 b38f3@b38ef b38f2@b38ed))))) b38e6@ls/false) ((lambda (b38fe@t) ((lambda (b3900@ls/false) (if (and b3900@ls/false (apply (lambda () (= b38e1@lev '0)) b3900@ls/false)) (apply (lambda () (b3127@syntax-violation '#f '"incorrect use of unsyntax" b38e0@p)) b3900@ls/false) ((lambda (b3902@t) ((lambda (b3904@ls/false) (if b3904@ls/false (apply (lambda (b3906@p* b3907@q) (call-with-values (lambda () (b38c5@quasi b3907@q b38e1@lev)) (lambda (b3910@b390b b3911@b390d b3912@b390f) ((lambda (b3916@q b3917@rhs* b3918@lhs*) (if (= b38e1@lev '0) ((lambda (b391c@g*) (values (append b391c@g* b3918@lhs*) (append b3906@p* b3917@rhs*) (append b391c@g* b3916@q))) (map (lambda (b391e@x) (gensym)) b3906@p*)) (call-with-values (lambda () (b38c5@quasi b3906@p* (- b38e1@lev '1))) (lambda (b3926@b3921 b3927@b3923 b3928@b3925) ((lambda (b392c@p* b392d@rhs2* b392e@lhs2*) (values (append b392e@lhs2* b3918@lhs*) (append b392d@rhs2* b3917@rhs*) (cons (cons 'unsyntax b392c@p*) b3916@q))) b3928@b3925 b3927@b3923 b3926@b3921))))) b3912@b390f b3911@b390d b3910@b390b)))) b3904@ls/false) ((lambda (b3932@t) ((lambda (b3934@ls/false) (if b3934@ls/false (apply (lambda (b3936@p* b3937@q) (call-with-values (lambda () (b38c5@quasi b3937@q b38e1@lev)) (lambda (b3940@b393b b3941@b393d b3942@b393f) ((lambda (b3946@q b3947@rhs* b3948@lhs*) (if (= b38e1@lev '0) ((lambda (b394c@g*) (values (append (map (lambda (b394e@g) (cons b394e@g '(...))) b394c@g*) b3948@lhs*) (append b3936@p* b3947@rhs*) (append (apply append (map (lambda (b3950@g) (cons b3950@g '(...))) b394c@g*)) b3946@q))) (map (lambda (b3952@x) (gensym)) b3936@p*)) (call-with-values (lambda () (b38c5@quasi b3936@p* (- b38e1@lev '1))) (lambda (b395a@b3955 b395b@b3957 b395c@b3959) ((lambda (b3960@p* b3961@rhs2* b3962@lhs2*) (values (append b3962@lhs2* b3948@lhs*) (append b3961@rhs2* b3947@rhs*) (cons (cons 'unsyntax-splicing b3960@p*) b3946@q))) b395c@b3959 b395b@b3957 b395a@b3955))))) b3942@b393f b3941@b393d b3940@b393b)))) b3934@ls/false) ((lambda (b3966@t) ((lambda (b3968@ls/false) (if (and b3968@ls/false (apply (lambda () (= b38e1@lev '0)) b3968@ls/false)) (apply (lambda () (b3127@syntax-violation '#f '"incorrect use of unsyntax-splicing" b38e0@p)) b3968@ls/false) ((lambda (b396a@t) ((lambda (b396c@ls/false) (if b396c@ls/false (apply (lambda (b396e@p) (call-with-values (lambda () (b38c5@quasi b396e@p (+ b38e1@lev '1))) (lambda (b3976@b3971 b3977@b3973 b3978@b3975) ((lambda (b397c@p b397d@rhs* b397e@lhs*) (values b397e@lhs* b397d@rhs* (list 'quasisyntax b397c@p))) b3978@b3975 b3977@b3973 b3976@b3971)))) b396c@ls/false) ((lambda (b3982@t) ((lambda (b3984@ls/false) (if b3984@ls/false (apply (lambda (b3986@p b3987@q) (call-with-values (lambda () (b38c5@quasi b3986@p b38e1@lev)) (lambda (b3996@b398b b3997@b398d b3998@b398f) (call-with-values (lambda () (b38c5@quasi b3987@q b38e1@lev)) (lambda (b399c@b3991 b399d@b3993 b399e@b3995) ((lambda (b39a2@q b39a3@rhs2* b39a4@lhs2* b39a5@p b39a6@rhs* b39a7@lhs*) (values (append b39a4@lhs2* b39a7@lhs*) (append b39a3@rhs2* b39a6@rhs*) (cons b39a5@p b39a2@q))) b399e@b3995 b399d@b3993 b399c@b3991 b3998@b398f b3997@b398d b3996@b398b)))))) b3984@ls/false) ((lambda (b39ae@t) ((lambda (b39b0@ls/false) (if b39b0@ls/false (apply (lambda (b39b2@x*) (call-with-values (lambda () (b38c5@quasi b39b2@x* b38e1@lev)) (lambda (b39ba@b39b5 b39bb@b39b7 b39bc@b39b9) ((lambda (b39c0@x* b39c1@rhs* b39c2@lhs*) (values b39c2@lhs* b39c1@rhs* (list->vector b39c0@x*))) b39bc@b39b9 b39bb@b39b7 b39ba@b39b5)))) b39b0@ls/false) ((lambda (b39c6@t) ((lambda (b39c8@ls/false) (if b39c8@ls/false (apply (lambda () (values '() '() b38e0@p)) b39c8@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b39c6@t))) (b3047@syntax-dispatch b39c6@t '_))) b39ae@t))) (b3047@syntax-dispatch b39ae@t '#(vector each-any)))) b3982@t))) (b3047@syntax-dispatch b3982@t '(any . any)))) b396a@t))) (b3047@syntax-dispatch b396a@t '(#(scheme-id quasisyntax) any)))) b3966@t))) (b3047@syntax-dispatch b3966@t '#(scheme-id unsyntax-splicing)))) b3932@t))) (b3047@syntax-dispatch b3932@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) b3902@t))) (b3047@syntax-dispatch b3902@t '((#(scheme-id unsyntax) . each-any) . any)))) b38fe@t))) (b3047@syntax-dispatch b38fe@t '#(scheme-id unsyntax)))) b38e4@t))) (b3047@syntax-dispatch b38e4@t '(#(scheme-id unsyntax) any)))) b38e0@p))) (lambda (b38c6@x) ((lambda (b38c8@t) ((lambda (b38ca@ls/false) (if b38ca@ls/false (apply (lambda (b38cc@e) (call-with-values (lambda () (b38c5@quasi b38cc@e '0)) (lambda (b38d4@b38cf b38d5@b38d1 b38d6@b38d3) ((lambda (b38da@v b38db@rhs* b38dc@lhs*) (b2ffd@bless (list 'syntax-case (cons 'list b38db@rhs*) '() (list b38dc@lhs* (list 'syntax b38da@v))))) b38d6@b38d3 b38d5@b38d1 b38d4@b38cf)))) b38ca@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b38c8@t))) (b3047@syntax-dispatch b38c8@t '(_ any)))) b38c6@x)))) '#f)))) (set! b3039@define-struct-macro (lambda (b39ca@stx) (b3127@syntax-violation '#f '"define-struct not supported" b39ca@stx))) (set! b303b@define-record-type-macro (lambda (b39cc@x) ((lambda (b39cf@id b39d1@get-record-name b39d3@get-record-constructor-name b39d5@get-record-predicate-name b39d7@get-clause b39d9@foo-rtd-code b39db@parent-rtd-code b39dd@parent-rcd-code b39df@foo-rcd-code b39e1@get-protocol-code b39e3@get-fields b39e5@get-mutator-indices b39e7@get-mutators b39e9@get-accessors b39eb@enumerate b39ed@do-define-record b39ef@verify-clauses) (begin (set! b39cf@id (lambda (b3bc2@ctxt . b3bc4@str*) (b312b@datum->syntax b3bc2@ctxt (string->symbol (apply string-append (map (lambda (b3bc6@x) (if (symbol? b3bc6@x) (symbol->string b3bc6@x) (if (string? b3bc6@x) b3bc6@x (assertion-violation 'define-record-type '"BUG")))) b3bc4@str*)))))) (set! b39d1@get-record-name (lambda (b3bb0@spec) ((lambda (b3bb2@t) ((lambda (b3bb4@ls/false) (if b3bb4@ls/false (apply (lambda (b3bb6@foo b3bb7@make-foo b3bb8@foo?) b3bb6@foo) b3bb4@ls/false) ((lambda (b3bbc@t) ((lambda (b3bbe@ls/false) (if b3bbe@ls/false (apply (lambda (b3bc0@foo) b3bc0@foo) b3bbe@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3bbc@t))) (b3047@syntax-dispatch b3bbc@t 'any))) b3bb2@t))) (b3047@syntax-dispatch b3bb2@t '(any any any)))) b3bb0@spec))) (set! b39d3@get-record-constructor-name (lambda (b3b9c@spec) ((lambda (b3b9e@t) ((lambda (b3ba0@ls/false) (if b3ba0@ls/false (apply (lambda (b3ba2@foo b3ba3@make-foo b3ba4@foo?) b3ba3@make-foo) b3ba0@ls/false) ((lambda (b3ba8@t) ((lambda (b3baa@ls/false) (if (and b3baa@ls/false (apply (lambda (b3bac@foo) (b2e42@id? b3bac@foo)) b3baa@ls/false)) (apply (lambda (b3bae@foo) (b39cf@id b3bae@foo '"make-" (b2e56@stx->datum b3bae@foo))) b3baa@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3ba8@t))) (b3047@syntax-dispatch b3ba8@t 'any))) b3b9e@t))) (b3047@syntax-dispatch b3b9e@t '(any any any)))) b3b9c@spec))) (set! b39d5@get-record-predicate-name (lambda (b3b88@spec) ((lambda (b3b8a@t) ((lambda (b3b8c@ls/false) (if b3b8c@ls/false (apply (lambda (b3b8e@foo b3b8f@make-foo b3b90@foo?) b3b90@foo?) b3b8c@ls/false) ((lambda (b3b94@t) ((lambda (b3b96@ls/false) (if (and b3b96@ls/false (apply (lambda (b3b98@foo) (b2e42@id? b3b98@foo)) b3b96@ls/false)) (apply (lambda (b3b9a@foo) (b39cf@id b3b9a@foo (b2e56@stx->datum b3b9a@foo) '"?")) b3b96@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b94@t))) (b3047@syntax-dispatch b3b94@t 'any))) b3b8a@t))) (b3047@syntax-dispatch b3b8a@t '(any any any)))) b3b88@spec))) (set! b39d7@get-clause (lambda (b3b76@id b3b77@ls) ((lambda (b3b7a@t) ((lambda (b3b7c@ls/false) (if b3b7c@ls/false (apply (lambda () '#f) b3b7c@ls/false) ((lambda (b3b7e@t) ((lambda (b3b80@ls/false) (if b3b80@ls/false (apply (lambda (b3b82@x b3b83@rest b3b84@ls) (if (b2e48@free-id=? (b2ffd@bless b3b76@id) b3b82@x) (cons b3b82@x b3b83@rest) (b39d7@get-clause b3b76@id b3b84@ls))) b3b80@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b7e@t))) (b3047@syntax-dispatch b3b7e@t '((any . any) . any)))) b3b7a@t))) (b3047@syntax-dispatch b3b7a@t '()))) b3b77@ls))) (set! b39d9@foo-rtd-code (lambda (b3b24@name b3b25@clause* b3b26@parent-rtd-code) ((lambda (b3b2b@convert-field-spec*) (begin (set! b3b2b@convert-field-spec* (lambda (b3b5c@ls) (list->vector (map (lambda (b3b5e@x) ((lambda (b3b60@t) ((lambda (b3b62@ls/false) (if b3b62@ls/false (apply (lambda (b3b64@name b3b65@rest) (list 'mutable b3b64@name)) b3b62@ls/false) ((lambda (b3b68@t) ((lambda (b3b6a@ls/false) (if b3b6a@ls/false (apply (lambda (b3b6c@name b3b6d@rest) (list 'immutable b3b6c@name)) b3b6a@ls/false) ((lambda (b3b70@t) ((lambda (b3b72@ls/false) (if b3b72@ls/false (apply (lambda (b3b74@name) (list 'immutable b3b74@name)) b3b72@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b70@t))) (b3047@syntax-dispatch b3b70@t 'any))) b3b68@t))) (b3047@syntax-dispatch b3b68@t '(#(scheme-id immutable) any . any)))) b3b60@t))) (b3047@syntax-dispatch b3b60@t '(#(scheme-id mutable) any . any)))) b3b5e@x)) b3b5c@ls)))) ((lambda (b3b2c@uid-code b3b2d@sealed? b3b2e@opaque? b3b2f@fields) (b2ffd@bless (list 'make-record-type-descriptor (list 'quote b3b24@name) b3b26@parent-rtd-code b3b2c@uid-code b3b2d@sealed? b3b2e@opaque? b3b2f@fields))) ((lambda (b3b34@t) ((lambda (b3b36@ls/false) (if b3b36@ls/false (apply (lambda () (list 'quote (gensym))) b3b36@ls/false) ((lambda (b3b38@t) ((lambda (b3b3a@ls/false) (if b3b3a@ls/false (apply (lambda (b3b3c@uid) (list 'quote b3b3c@uid)) b3b3a@ls/false) ((lambda (b3b3e@t) ((lambda (b3b40@ls/false) (if b3b40@ls/false (apply (lambda () '#f) b3b40@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b3e@t))) (b3047@syntax-dispatch b3b3e@t '_))) b3b38@t))) (b3047@syntax-dispatch b3b38@t '(_ any)))) b3b34@t))) (b3047@syntax-dispatch b3b34@t '(_)))) (b39d7@get-clause 'nongenerative b3b25@clause*)) ((lambda (b3b42@t) ((lambda (b3b44@ls/false) (if b3b44@ls/false (apply (lambda () '#t) b3b44@ls/false) ((lambda (b3b46@t) ((lambda (b3b48@ls/false) (if b3b48@ls/false (apply (lambda () '#f) b3b48@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b46@t))) (b3047@syntax-dispatch b3b46@t '_))) b3b42@t))) (b3047@syntax-dispatch b3b42@t '(_ #(atom #t))))) (b39d7@get-clause 'sealed b3b25@clause*)) ((lambda (b3b4a@t) ((lambda (b3b4c@ls/false) (if b3b4c@ls/false (apply (lambda () '#t) b3b4c@ls/false) ((lambda (b3b4e@t) ((lambda (b3b50@ls/false) (if b3b50@ls/false (apply (lambda () '#f) b3b50@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b4e@t))) (b3047@syntax-dispatch b3b4e@t '_))) b3b4a@t))) (b3047@syntax-dispatch b3b4a@t '(_ #(atom #t))))) (b39d7@get-clause 'opaque b3b25@clause*)) ((lambda (b3b52@t) ((lambda (b3b54@ls/false) (if b3b54@ls/false (apply (lambda (b3b56@field-spec*) (list 'quote (b3b2b@convert-field-spec* b3b56@field-spec*))) b3b54@ls/false) ((lambda (b3b58@t) ((lambda (b3b5a@ls/false) (if b3b5a@ls/false (apply (lambda () ''#()) b3b5a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b58@t))) (b3047@syntax-dispatch b3b58@t '_))) b3b52@t))) (b3047@syntax-dispatch b3b52@t '(_ . each-any)))) (b39d7@get-clause 'fields b3b25@clause*))))) '#f))) (set! b39db@parent-rtd-code (lambda (b3b0c@clause*) ((lambda (b3b0e@t) ((lambda (b3b10@ls/false) (if b3b10@ls/false (apply (lambda (b3b12@name) (list 'record-type-descriptor b3b12@name)) b3b10@ls/false) ((lambda (b3b14@t) ((lambda (b3b16@ls/false) (if b3b16@ls/false (apply (lambda () ((lambda (b3b18@t) ((lambda (b3b1a@ls/false) (if b3b1a@ls/false (apply (lambda (b3b1c@rtd b3b1d@rcd) b3b1c@rtd) b3b1a@ls/false) ((lambda (b3b20@t) ((lambda (b3b22@ls/false) (if b3b22@ls/false (apply (lambda () '#f) b3b22@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b20@t))) (b3047@syntax-dispatch b3b20@t '#(atom #f)))) b3b18@t))) (b3047@syntax-dispatch b3b18@t '(_ any any)))) (b39d7@get-clause 'parent-rtd b3b0c@clause*))) b3b16@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b14@t))) (b3047@syntax-dispatch b3b14@t '#(atom #f)))) b3b0e@t))) (b3047@syntax-dispatch b3b0e@t '(_ any)))) (b39d7@get-clause 'parent b3b0c@clause*)))) (set! b39dd@parent-rcd-code (lambda (b3af4@clause*) ((lambda (b3af6@t) ((lambda (b3af8@ls/false) (if b3af8@ls/false (apply (lambda (b3afa@name) (list 'record-constructor-descriptor b3afa@name)) b3af8@ls/false) ((lambda (b3afc@t) ((lambda (b3afe@ls/false) (if b3afe@ls/false (apply (lambda () ((lambda (b3b00@t) ((lambda (b3b02@ls/false) (if b3b02@ls/false (apply (lambda (b3b04@rtd b3b05@rcd) b3b05@rcd) b3b02@ls/false) ((lambda (b3b08@t) ((lambda (b3b0a@ls/false) (if b3b0a@ls/false (apply (lambda () '#f) b3b0a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3b08@t))) (b3047@syntax-dispatch b3b08@t '#(atom #f)))) b3b00@t))) (b3047@syntax-dispatch b3b00@t '(_ any any)))) (b39d7@get-clause 'parent-rtd b3af4@clause*))) b3afe@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3afc@t))) (b3047@syntax-dispatch b3afc@t '#(atom #f)))) b3af6@t))) (b3047@syntax-dispatch b3af6@t '(_ any)))) (b39d7@get-clause 'parent b3af4@clause*)))) (set! b39df@foo-rcd-code (lambda (b3aec@clause* b3aed@foo-rtd b3aee@protocol b3aef@parent-rcd-code) (list 'make-record-constructor-descriptor b3aed@foo-rtd b3aef@parent-rcd-code b3aee@protocol))) (set! b39e1@get-protocol-code (lambda (b3ae0@clause*) ((lambda (b3ae2@t) ((lambda (b3ae4@ls/false) (if b3ae4@ls/false (apply (lambda (b3ae6@expr) b3ae6@expr) b3ae4@ls/false) ((lambda (b3ae8@t) ((lambda (b3aea@ls/false) (if b3aea@ls/false (apply (lambda () '#f) b3aea@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3ae8@t))) (b3047@syntax-dispatch b3ae8@t '_))) b3ae2@t))) (b3047@syntax-dispatch b3ae2@t '(_ any)))) (b39d7@get-clause 'protocol b3ae0@clause*)))) (set! b39e3@get-fields (lambda (b3ace@clause*) ((lambda (b3ad0@t) ((lambda (b3ad2@ls/false) (if b3ad2@ls/false (apply (lambda () '()) b3ad2@ls/false) ((lambda (b3ad4@t) ((lambda (b3ad6@ls/false) (if b3ad6@ls/false (apply (lambda (b3ad8@f*) b3ad8@f*) b3ad6@ls/false) ((lambda (b3ada@t) ((lambda (b3adc@ls/false) (if b3adc@ls/false (apply (lambda (b3ade@rest) (b39e3@get-fields b3ade@rest)) b3adc@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3ada@t))) (b3047@syntax-dispatch b3ada@t '(_ . any)))) b3ad4@t))) (b3047@syntax-dispatch b3ad4@t '((#(scheme-id fields) . each-any) . _)))) b3ad0@t))) (b3047@syntax-dispatch b3ad0@t '()))) b3ace@clause*))) (set! b39e5@get-mutator-indices (lambda (b3ab6@fields) ((letrec ((b3ab8@f (lambda (b3aba@fields b3abb@i) ((lambda (b3abe@t) ((lambda (b3ac0@ls/false) (if b3ac0@ls/false (apply (lambda () '()) b3ac0@ls/false) ((lambda (b3ac2@t) ((lambda (b3ac4@ls/false) (if b3ac4@ls/false (apply (lambda (b3ac6@rest) (cons b3abb@i (b3ab8@f b3ac6@rest (+ b3abb@i '1)))) b3ac4@ls/false) ((lambda (b3ac8@t) ((lambda (b3aca@ls/false) (if b3aca@ls/false (apply (lambda (b3acc@rest) (b3ab8@f b3acc@rest (+ b3abb@i '1))) b3aca@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3ac8@t))) (b3047@syntax-dispatch b3ac8@t '(_ . any)))) b3ac2@t))) (b3047@syntax-dispatch b3ac2@t '((#(scheme-id mutable) . _) . any)))) b3abe@t))) (b3047@syntax-dispatch b3abe@t '()))) b3aba@fields)))) b3ab8@f) b3ab6@fields '0))) (set! b39e7@get-mutators (lambda (b3a8c@foo b3a8d@fields) ((lambda (b3a91@gen-name) (begin (set! b3a91@gen-name (lambda (b3ab4@x) (b312b@datum->syntax b3a8c@foo (string->symbol (string-append (symbol->string (b312d@syntax->datum b3a8c@foo)) '"-" (symbol->string (b312d@syntax->datum b3ab4@x)) '"-set!"))))) ((letrec ((b3a92@f (lambda (b3a94@fields) ((lambda (b3a96@t) ((lambda (b3a98@ls/false) (if b3a98@ls/false (apply (lambda () '()) b3a98@ls/false) ((lambda (b3a9a@t) ((lambda (b3a9c@ls/false) (if b3a9c@ls/false (apply (lambda (b3a9e@name b3a9f@accessor b3aa0@mutator b3aa1@rest) (cons b3aa0@mutator (b3a92@f b3aa1@rest))) b3a9c@ls/false) ((lambda (b3aa6@t) ((lambda (b3aa8@ls/false) (if b3aa8@ls/false (apply (lambda (b3aaa@name b3aab@rest) (cons (b3a91@gen-name b3aaa@name) (b3a92@f b3aab@rest))) b3aa8@ls/false) ((lambda (b3aae@t) ((lambda (b3ab0@ls/false) (if b3ab0@ls/false (apply (lambda (b3ab2@rest) (b3a92@f b3ab2@rest)) b3ab0@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3aae@t))) (b3047@syntax-dispatch b3aae@t '(_ . any)))) b3aa6@t))) (b3047@syntax-dispatch b3aa6@t '((#(scheme-id mutable) any) . any)))) b3a9a@t))) (b3047@syntax-dispatch b3a9a@t '((#(scheme-id mutable) any any any) . any)))) b3a96@t))) (b3047@syntax-dispatch b3a96@t '()))) b3a94@fields)))) b3a92@f) b3a8d@fields))) '#f))) (set! b39e9@get-accessors (lambda (b3a48@foo b3a49@fields) ((lambda (b3a4d@gen-name) (begin (set! b3a4d@gen-name (lambda (b3a8a@x) (b312b@datum->syntax b3a48@foo (string->symbol (string-append (symbol->string (b312d@syntax->datum b3a48@foo)) '"-" (symbol->string (b312d@syntax->datum b3a8a@x))))))) (map (lambda (b3a4e@field) ((lambda (b3a50@t) ((lambda (b3a52@ls/false) (if (and b3a52@ls/false (apply (lambda (b3a54@name b3a55@accessor b3a56@mutator) (b2e42@id? b3a55@accessor)) b3a52@ls/false)) (apply (lambda (b3a5a@name b3a5b@accessor b3a5c@mutator) b3a5b@accessor) b3a52@ls/false) ((lambda (b3a60@t) ((lambda (b3a62@ls/false) (if (and b3a62@ls/false (apply (lambda (b3a64@name b3a65@accessor) (b2e42@id? b3a65@accessor)) b3a62@ls/false)) (apply (lambda (b3a68@name b3a69@accessor) b3a69@accessor) b3a62@ls/false) ((lambda (b3a6c@t) ((lambda (b3a6e@ls/false) (if (and b3a6e@ls/false (apply (lambda (b3a70@name) (b2e42@id? b3a70@name)) b3a6e@ls/false)) (apply (lambda (b3a72@name) (b3a4d@gen-name b3a72@name)) b3a6e@ls/false) ((lambda (b3a74@t) ((lambda (b3a76@ls/false) (if (and b3a76@ls/false (apply (lambda (b3a78@name) (b2e42@id? b3a78@name)) b3a76@ls/false)) (apply (lambda (b3a7a@name) (b3a4d@gen-name b3a7a@name)) b3a76@ls/false) ((lambda (b3a7c@t) ((lambda (b3a7e@ls/false) (if (and b3a7e@ls/false (apply (lambda (b3a80@name) (b2e42@id? b3a80@name)) b3a7e@ls/false)) (apply (lambda (b3a82@name) (b3a4d@gen-name b3a82@name)) b3a7e@ls/false) ((lambda (b3a84@t) ((lambda (b3a86@ls/false) (if b3a86@ls/false (apply (lambda (b3a88@others) (b3127@syntax-violation '#f '"invalid field spec" b3a4e@field)) b3a86@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3a84@t))) (b3047@syntax-dispatch b3a84@t 'any))) b3a7c@t))) (b3047@syntax-dispatch b3a7c@t 'any))) b3a74@t))) (b3047@syntax-dispatch b3a74@t '(#(scheme-id immutable) any)))) b3a6c@t))) (b3047@syntax-dispatch b3a6c@t '(#(scheme-id mutable) any)))) b3a60@t))) (b3047@syntax-dispatch b3a60@t '(#(scheme-id immutable) any any)))) b3a50@t))) (b3047@syntax-dispatch b3a50@t '(#(scheme-id mutable) any any any)))) b3a4e@field)) b3a49@fields))) '#f))) (set! b39eb@enumerate (lambda (b3a40@ls) ((letrec ((b3a42@f (lambda (b3a44@ls b3a45@i) (if (null? b3a44@ls) '() (cons b3a45@i (b3a42@f (cdr b3a44@ls) (+ b3a45@i '1))))))) b3a42@f) b3a40@ls '0))) (set! b39ed@do-define-record (lambda (b3a18@namespec b3a19@clause*) ((lambda (b3a1c@foo) ((lambda (b3a1e@foo-rtd) ((lambda (b3a20@foo-rcd) ((lambda (b3a22@protocol) ((lambda (b3a24@make-foo) ((lambda (b3a26@fields) ((lambda (b3a28@idx*) ((lambda (b3a2a@foo-x*) ((lambda (b3a2c@set-foo-x!*) ((lambda (b3a2e@set-foo-idx*) ((lambda (b3a30@foo?) ((lambda (b3a32@foo-rtd-code) ((lambda (b3a34@foo-rcd-code) ((lambda (b3a36@protocol-code) ((lambda () (b2ffd@bless (cons 'begin (cons (list 'define b3a1e@foo-rtd b3a32@foo-rtd-code) (cons (list 'define b3a22@protocol b3a36@protocol-code) (cons (list 'define b3a20@foo-rcd b3a34@foo-rcd-code) (cons (list 'define-syntax b3a1c@foo (list 'list ''$rtd (list 'syntax b3a1e@foo-rtd) (list 'syntax b3a20@foo-rcd))) (cons (list 'define b3a30@foo? (list 'record-predicate b3a1e@foo-rtd)) (cons (list 'define b3a24@make-foo (list 'record-constructor b3a20@foo-rcd)) (append (map (lambda (b3a38@foo-x b3a39@idx) (list 'define b3a38@foo-x (list 'record-accessor b3a1e@foo-rtd b3a39@idx))) b3a2a@foo-x* b3a28@idx*) (map (lambda (b3a3c@set-foo-x! b3a3d@idx) (list 'define b3a3c@set-foo-x! (list 'record-mutator b3a1e@foo-rtd b3a3d@idx))) b3a2c@set-foo-x!* b3a2e@set-foo-idx*))))))))))))) (b39e1@get-protocol-code b3a19@clause*))) (b39df@foo-rcd-code b3a19@clause* b3a1e@foo-rtd b3a22@protocol (b39dd@parent-rcd-code b3a19@clause*)))) (b39d9@foo-rtd-code b3a1c@foo b3a19@clause* (b39db@parent-rtd-code b3a19@clause*)))) (b39d5@get-record-predicate-name b3a18@namespec))) (b39e5@get-mutator-indices b3a26@fields))) (b39e7@get-mutators b3a1c@foo b3a26@fields))) (b39e9@get-accessors b3a1c@foo b3a26@fields))) (b39eb@enumerate b3a26@fields))) (b39e3@get-fields b3a19@clause*))) (b39d3@get-record-constructor-name b3a18@namespec))) (gensym))) (gensym))) (gensym))) (b39d1@get-record-name b3a18@namespec)))) (set! b39ef@verify-clauses (lambda (b39f8@x b39f9@cls*) ((lambda (b39fd@valid-kwds b39ff@free-id-member?) (begin (set! b39fd@valid-kwds (map b2ffd@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! b39ff@free-id-member? (lambda (b3a14@x b3a15@ls) (and (pair? b3a15@ls) (or (b2e48@free-id=? b3a14@x (car b3a15@ls)) (b39ff@free-id-member? b3a14@x (cdr b3a15@ls)))))) ((letrec ((b3a00@f (lambda (b3a02@cls* b3a03@seen*) (if (not (null? b3a02@cls*)) ((lambda (b3a06@t) ((lambda (b3a08@ls/false) (if b3a08@ls/false (apply (lambda (b3a0a@kwd b3a0b@rest) (if (or (not (b2e42@id? b3a0a@kwd)) (not (b39ff@free-id-member? b3a0a@kwd b39fd@valid-kwds))) (b3127@syntax-violation '#f '"not a valid define-record-type keyword" b3a0a@kwd) (if (b2e4e@bound-id-member? b3a0a@kwd b3a03@seen*) (b3127@syntax-violation '#f '"duplicate use of keyword " b39f8@x b3a0a@kwd) (b3a00@f (cdr b3a02@cls*) (cons b3a0a@kwd b3a03@seen*))))) b3a08@ls/false) ((lambda (b3a0e@t) ((lambda (b3a10@ls/false) (if b3a10@ls/false (apply (lambda (b3a12@cls) (b3127@syntax-violation '#f '"malformed define-record-type clause" b3a12@cls)) b3a10@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3a0e@t))) (b3047@syntax-dispatch b3a0e@t 'any))) b3a06@t))) (b3047@syntax-dispatch b3a06@t '(any . any)))) (car b3a02@cls*)) (void))))) b3a00@f) b39f9@cls* '()))) '#f '#f))) ((lambda (b39f0@t) ((lambda (b39f2@ls/false) (if b39f2@ls/false (apply (lambda (b39f4@namespec b39f5@clause*) (begin (b39ef@verify-clauses b39cc@x b39f5@clause*) (b39ed@do-define-record b39f4@namespec b39f5@clause*))) b39f2@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b39f0@t))) (b3047@syntax-dispatch b39f0@t '(_ any . each-any)))) b39cc@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! b303d@define-condition-type-macro (lambda (b3bc8@x) ((lambda (b3bcb@mkname) (begin (set! b3bcb@mkname (lambda (b3bf8@name b3bf9@suffix) (b312b@datum->syntax b3bf8@name (string->symbol (string-append (symbol->string (b312d@syntax->datum b3bf8@name)) b3bf9@suffix))))) ((lambda (b3bcc@t) ((lambda (b3bce@ls/false) (if (and b3bce@ls/false (apply (lambda (b3bd0@ctxt b3bd1@name b3bd2@super b3bd3@constructor b3bd4@predicate b3bd5@field* b3bd6@accessor*) (and (b2e42@id? b3bd1@name) (b2e42@id? b3bd2@super) (b2e42@id? b3bd3@constructor) (b2e42@id? b3bd4@predicate) (for-all b2e42@id? b3bd5@field*) (for-all b2e42@id? b3bd6@accessor*))) b3bce@ls/false)) (apply (lambda (b3bde@ctxt b3bdf@name b3be0@super b3be1@constructor b3be2@predicate b3be3@field* b3be4@accessor*) ((lambda (b3bec@aux-accessor*) (b2ffd@bless (cons 'begin (cons (cons 'define-record-type (cons (list b3bdf@name b3be1@constructor (gensym)) (cons (list 'parent b3be0@super) (cons (cons 'fields (map (lambda (b3bee@field b3bef@aux) (list 'immutable b3bee@field b3bef@aux)) b3be3@field* b3bec@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define b3be2@predicate (list 'condition-predicate (list 'record-type-descriptor b3bdf@name))) (map (lambda (b3bf2@accessor b3bf3@aux) (list 'define b3bf2@accessor (list 'condition-accessor (list 'record-type-descriptor b3bdf@name) b3bf3@aux))) b3be4@accessor* b3bec@aux-accessor*)))))) (map (lambda (b3bf6@x) (gensym)) b3be4@accessor*))) b3bce@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3bcc@t))) (b3047@syntax-dispatch b3bcc@t '(any any any any any . #(each (any any)))))) b3bc8@x))) '#f))) (set! b303f@incorrect-usage-macro (lambda (b3bfc@e) (b3127@syntax-violation '#f '"incorrect usage of auxiliary keyword" b3bfc@e))) (set! b3041@parameterize-macro (lambda (b3bfe@e) ((lambda (b3c00@t) ((lambda (b3c02@ls/false) (if b3c02@ls/false (apply (lambda (b3c04@b b3c05@b*) (b2ffd@bless (cons 'let (cons '() (cons b3c04@b b3c05@b*))))) b3c02@ls/false) ((lambda (b3c08@t) ((lambda (b3c0a@ls/false) (if b3c0a@ls/false (apply (lambda (b3c0c@olhs* b3c0d@orhs* b3c0e@b b3c0f@b*) ((lambda (b3c14@lhs* b3c15@rhs*) (b2ffd@bless (cons (list 'lambda (append b3c14@lhs* b3c15@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (b3c18@lhs b3c19@rhs) (list 'let (list (list 't (list b3c18@lhs))) (list b3c18@lhs b3c19@rhs) (cons 'set! (cons b3c19@rhs '(t))))) b3c14@lhs* b3c15@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons b3c0e@b b3c0f@b*))) '(swap)))))) (append b3c0c@olhs* b3c0d@orhs*)))) (b3115@generate-temporaries b3c0c@olhs*) (b3115@generate-temporaries b3c0d@orhs*))) b3c0a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3c08@t))) (b3047@syntax-dispatch b3c08@t '(_ #(each (any any)) any . each-any)))) b3c00@t))) (b3047@syntax-dispatch b3c00@t '(_ () any . each-any)))) b3bfe@e))) (set! b3043@foreign-call-transformer (lambda (b3c1c@e b3c1d@r b3c1e@mr) ((lambda (b3c22@t) ((lambda (b3c24@ls/false) (if b3c24@ls/false (apply (lambda (b3c26@name b3c27@arg*) (cons 'foreign-call (cons (b3069@chi-expr b3c26@name b3c1d@r b3c1e@mr) (b3065@chi-expr* b3c27@arg* b3c1d@r b3c1e@mr)))) b3c24@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3c22@t))) (b3047@syntax-dispatch b3c22@t '(_ any . each-any)))) b3c1c@e))) (set! b3045@convert-pattern (lambda (b3c2a@pattern b3c2b@keys) ((lambda (b3c2f@cvt* b3c31@cvt) (begin (set! b3c2f@cvt* (lambda (b3cce@p* b3ccf@n b3cd0@ids) (if (null? b3cce@p*) (values '() b3cd0@ids) (call-with-values (lambda () (b3c2f@cvt* (cdr b3cce@p*) b3ccf@n b3cd0@ids)) (lambda (b3cd8@b3cd5 b3cd9@b3cd7) ((lambda (b3cdc@ids b3cdd@y) (call-with-values (lambda () (b3c31@cvt (car b3cce@p*) b3ccf@n b3cdc@ids)) (lambda (b3ce4@b3ce1 b3ce5@b3ce3) ((lambda (b3ce8@ids b3ce9@x) (values (cons b3ce9@x b3cdd@y) b3ce8@ids)) b3ce5@b3ce3 b3ce4@b3ce1)))) b3cd9@b3cd7 b3cd8@b3cd5)))))) (set! b3c31@cvt (lambda (b3c32@p b3c33@n b3c34@ids) ((lambda (b3c38@t) ((lambda (b3c3a@ls/false) (if (and b3c3a@ls/false (apply (lambda (b3c3c@id) (b2e42@id? b3c3c@id)) b3c3a@ls/false)) (apply (lambda (b3c3e@id) (if (b2e4e@bound-id-member? b3c32@p b3c2b@keys) (values (vector 'free-id b3c32@p) b3c34@ids) (if (b2e48@free-id=? b3c32@p (b2fd1@scheme-stx '_)) (values '_ b3c34@ids) (values 'any (cons (cons b3c32@p b3c33@n) b3c34@ids))))) b3c3a@ls/false) ((lambda (b3c40@t) ((lambda (b3c42@ls/false) (if (and b3c42@ls/false (apply (lambda (b3c44@p b3c45@dots) (b3049@ellipsis? b3c45@dots)) b3c42@ls/false)) (apply (lambda (b3c48@p b3c49@dots) (call-with-values (lambda () (b3c31@cvt b3c48@p (+ b3c33@n '1) b3c34@ids)) (lambda (b3c50@b3c4d b3c51@b3c4f) ((lambda (b3c54@ids b3c55@p) (values (if (eq? b3c55@p 'any) 'each-any (vector 'each b3c55@p)) b3c54@ids)) b3c51@b3c4f b3c50@b3c4d)))) b3c42@ls/false) ((lambda (b3c58@t) ((lambda (b3c5a@ls/false) (if (and b3c5a@ls/false (apply (lambda (b3c5c@x b3c5d@dots b3c5e@ys b3c5f@z) (b3049@ellipsis? b3c5d@dots)) b3c5a@ls/false)) (apply (lambda (b3c64@x b3c65@dots b3c66@ys b3c67@z) (call-with-values (lambda () (b3c31@cvt b3c67@z b3c33@n b3c34@ids)) (lambda (b3c70@b3c6d b3c71@b3c6f) ((lambda (b3c74@ids b3c75@z) (call-with-values (lambda () (b3c2f@cvt* b3c66@ys b3c33@n b3c74@ids)) (lambda (b3c7c@b3c79 b3c7d@b3c7b) ((lambda (b3c80@ids b3c81@ys) (call-with-values (lambda () (b3c31@cvt b3c64@x (+ b3c33@n '1) b3c80@ids)) (lambda (b3c88@b3c85 b3c89@b3c87) ((lambda (b3c8c@ids b3c8d@x) (values (vector 'each+ b3c8d@x (reverse b3c81@ys) b3c75@z) b3c8c@ids)) b3c89@b3c87 b3c88@b3c85)))) b3c7d@b3c7b b3c7c@b3c79)))) b3c71@b3c6f b3c70@b3c6d)))) b3c5a@ls/false) ((lambda (b3c90@t) ((lambda (b3c92@ls/false) (if b3c92@ls/false (apply (lambda (b3c94@x b3c95@y) (call-with-values (lambda () (b3c31@cvt b3c95@y b3c33@n b3c34@ids)) (lambda (b3c9c@b3c99 b3c9d@b3c9b) ((lambda (b3ca0@ids b3ca1@y) (call-with-values (lambda () (b3c31@cvt b3c94@x b3c33@n b3ca0@ids)) (lambda (b3ca8@b3ca5 b3ca9@b3ca7) ((lambda (b3cac@ids b3cad@x) (values (cons b3cad@x b3ca1@y) b3cac@ids)) b3ca9@b3ca7 b3ca8@b3ca5)))) b3c9d@b3c9b b3c9c@b3c99)))) b3c92@ls/false) ((lambda (b3cb0@t) ((lambda (b3cb2@ls/false) (if b3cb2@ls/false (apply (lambda () (values '() b3c34@ids)) b3cb2@ls/false) ((lambda (b3cb4@t) ((lambda (b3cb6@ls/false) (if (and b3cb6@ls/false (apply (lambda (b3cb8@p) (not (b2e0e@stx? b3cb8@p))) b3cb6@ls/false)) (apply (lambda (b3cba@p) (call-with-values (lambda () (b3c31@cvt b3cba@p b3c33@n b3c34@ids)) (lambda (b3cc0@b3cbd b3cc1@b3cbf) ((lambda (b3cc4@ids b3cc5@p) (values (vector 'vector b3cc5@p) b3cc4@ids)) b3cc1@b3cbf b3cc0@b3cbd)))) b3cb6@ls/false) ((lambda (b3cc8@t) ((lambda (b3cca@ls/false) (if b3cca@ls/false (apply (lambda (b3ccc@datum) (values (vector 'atom (b2e56@stx->datum b3ccc@datum)) b3c34@ids)) b3cca@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3cc8@t))) (b3047@syntax-dispatch b3cc8@t 'any))) b3cb4@t))) (b3047@syntax-dispatch b3cb4@t '#(vector each-any)))) b3cb0@t))) (b3047@syntax-dispatch b3cb0@t '()))) b3c90@t))) (b3047@syntax-dispatch b3c90@t '(any . any)))) b3c58@t))) (b3047@syntax-dispatch b3c58@t '(any any . #(each+ any () any))))) b3c40@t))) (b3047@syntax-dispatch b3c40@t '(any any)))) b3c38@t))) (b3047@syntax-dispatch b3c38@t 'any))) b3c32@p))) (b3c31@cvt b3c2a@pattern '0 '()))) '#f '#f))) (set! b3047@syntax-dispatch ((lambda () ((lambda (b3ced@stx^ b3cef@match-each b3cf1@match-each+ b3cf3@match-each-any b3cf5@match-empty b3cf7@combine b3cf9@match* b3cfb@match) (begin (set! b3ced@stx^ (lambda (b3dc8@e b3dc9@m* b3dca@s* b3dcb@ae*) (if (and (null? b3dc9@m*) (null? b3dca@s*) (null? b3dcb@ae*)) b3dc8@e (b2e2a@mkstx b3dc8@e b3dc9@m* b3dca@s* b3dcb@ae*)))) (set! b3cef@match-each (lambda (b3da8@e b3da9@p b3daa@m* b3dab@s* b3dac@ae*) (if (pair? b3da8@e) ((lambda (b3db2@first) (and b3db2@first ((lambda (b3db4@rest) (and b3db4@rest (cons b3db2@first b3db4@rest))) (b3cef@match-each (cdr b3da8@e) b3da9@p b3daa@m* b3dab@s* b3dac@ae*)))) (b3cfb@match (car b3da8@e) b3da9@p b3daa@m* b3dab@s* b3dac@ae* '())) (if (null? b3da8@e) '() (if (b2e0e@stx? b3da8@e) (and (not (b2dc8@top-marked? b3daa@m*)) (call-with-values (lambda () (join-wraps b3daa@m* b3dab@s* b3dac@ae* b3da8@e)) (lambda (b3dbc@b3db7 b3dbd@b3db9 b3dbe@b3dbb) ((lambda (b3dc2@ae* b3dc3@s* b3dc4@m*) (b3cef@match-each (b2e10@stx-expr b3da8@e) b3da9@p b3dc4@m* b3dc3@s* b3dc2@ae*)) b3dbe@b3dbb b3dbd@b3db9 b3dbc@b3db7)))) (if (b2996@b286a@annotation? b3da8@e) (b3cef@match-each (b2998@b286e@annotation-expression b3da8@e) b3da9@p b3daa@m* b3dab@s* b3dac@ae*) '#f)))))) (set! b3cf1@match-each+ (lambda (b3d68@e b3d69@x-pat b3d6a@y-pat b3d6b@z-pat b3d6c@m* b3d6d@s* b3d6e@ae* b3d6f@r) ((letrec ((b3d78@f (lambda (b3d7a@e b3d7b@m* b3d7c@s* b3d7d@ae*) (if (pair? b3d7a@e) (call-with-values (lambda () (b3d78@f (cdr b3d7a@e) b3d7b@m* b3d7c@s* b3d7d@ae*)) (lambda (b3d88@b3d83 b3d89@b3d85 b3d8a@b3d87) ((lambda (b3d8e@r b3d8f@y-pat b3d90@xr*) (if b3d8e@r (if (null? b3d8f@y-pat) ((lambda (b3d94@xr) (if b3d94@xr (values (cons b3d94@xr b3d90@xr*) b3d8f@y-pat b3d8e@r) (values '#f '#f '#f))) (b3cfb@match (car b3d7a@e) b3d69@x-pat b3d7b@m* b3d7c@s* b3d7d@ae* '())) (values '() (cdr b3d8f@y-pat) (b3cfb@match (car b3d7a@e) (car b3d8f@y-pat) b3d7b@m* b3d7c@s* b3d7d@ae* b3d8e@r))) (values '#f '#f '#f))) b3d8a@b3d87 b3d89@b3d85 b3d88@b3d83))) (if (b2e0e@stx? b3d7a@e) (if (b2dc8@top-marked? b3d7b@m*) (values '() b3d6a@y-pat (b3cfb@match b3d7a@e b3d6b@z-pat b3d7b@m* b3d7c@s* b3d7d@ae* b3d6f@r)) (call-with-values (lambda () (join-wraps b3d7b@m* b3d7c@s* b3d7d@ae* b3d7a@e)) (lambda (b3d9c@b3d97 b3d9d@b3d99 b3d9e@b3d9b) ((lambda (b3da2@ae* b3da3@s* b3da4@m*) (b3d78@f (b2e10@stx-expr b3d7a@e) b3da4@m* b3da3@s* b3da2@ae*)) b3d9e@b3d9b b3d9d@b3d99 b3d9c@b3d97)))) (if (b2996@b286a@annotation? b3d7a@e) (b3d78@f (b2998@b286e@annotation-expression b3d7a@e) b3d7b@m* b3d7c@s* b3d7d@ae*) (values '() b3d6a@y-pat (b3cfb@match b3d7a@e b3d6b@z-pat b3d7b@m* b3d7c@s* b3d7d@ae* b3d6f@r)))))))) b3d78@f) b3d68@e b3d6c@m* b3d6d@s* b3d6e@ae*))) (set! b3cf3@match-each-any (lambda (b3d4c@e b3d4d@m* b3d4e@s* b3d4f@ae*) (if (pair? b3d4c@e) ((lambda (b3d54@l) (and b3d54@l (cons (b3ced@stx^ (car b3d4c@e) b3d4d@m* b3d4e@s* b3d4f@ae*) b3d54@l))) (b3cf3@match-each-any (cdr b3d4c@e) b3d4d@m* b3d4e@s* b3d4f@ae*)) (if (null? b3d4c@e) '() (if (b2e0e@stx? b3d4c@e) (and (not (b2dc8@top-marked? b3d4d@m*)) (call-with-values (lambda () (join-wraps b3d4d@m* b3d4e@s* b3d4f@ae* b3d4c@e)) (lambda (b3d5c@b3d57 b3d5d@b3d59 b3d5e@b3d5b) ((lambda (b3d62@ae* b3d63@s* b3d64@m*) (b3cf3@match-each-any (b2e10@stx-expr b3d4c@e) b3d64@m* b3d63@s* b3d62@ae*)) b3d5e@b3d5b b3d5d@b3d59 b3d5c@b3d57)))) (if (b2996@b286a@annotation? b3d4c@e) (b3cf3@match-each-any (b2998@b286e@annotation-expression b3d4c@e) b3d4d@m* b3d4e@s* b3d4f@ae*) '#f)))))) (set! b3cf5@match-empty (lambda (b3d46@p b3d47@r) (if (null? b3d46@p) b3d47@r (if (eq? b3d46@p '_) b3d47@r (if (eq? b3d46@p 'any) (cons '() b3d47@r) (if (pair? b3d46@p) (b3cf5@match-empty (car b3d46@p) (b3cf5@match-empty (cdr b3d46@p) b3d47@r)) (if (eq? b3d46@p 'each-any) (cons '() b3d47@r) ((lambda (b3d4a@t) (if (memv b3d4a@t '(each)) (b3cf5@match-empty (vector-ref b3d46@p '1) b3d47@r) (if (memv b3d4a@t '(each+)) (b3cf5@match-empty (vector-ref b3d46@p '1) (b3cf5@match-empty (reverse (vector-ref b3d46@p '2)) (b3cf5@match-empty (vector-ref b3d46@p '3) b3d47@r))) (if (memv b3d4a@t '(free-id atom)) b3d47@r (if (memv b3d4a@t '(scheme-id atom)) b3d47@r (if (memv b3d4a@t '(vector)) (b3cf5@match-empty (vector-ref b3d46@p '1) b3d47@r) (assertion-violation 'syntax-dispatch '"invalid pattern" b3d46@p))))))) (vector-ref b3d46@p '0))))))))) (set! b3cf7@combine (lambda (b3d42@r* b3d43@r) (if (null? (car b3d42@r*)) b3d43@r (cons (map car b3d42@r*) (b3cf7@combine (map cdr b3d42@r*) b3d43@r))))) (set! b3cf9@match* (lambda (b3d1e@e b3d1f@p b3d20@m* b3d21@s* b3d22@ae* b3d23@r) (if (null? b3d1f@p) (and (null? b3d1e@e) b3d23@r) (if (pair? b3d1f@p) (and (pair? b3d1e@e) (b3cfb@match (car b3d1e@e) (car b3d1f@p) b3d20@m* b3d21@s* b3d22@ae* (b3cfb@match (cdr b3d1e@e) (cdr b3d1f@p) b3d20@m* b3d21@s* b3d22@ae* b3d23@r))) (if (eq? b3d1f@p 'each-any) ((lambda (b3d2a@l) (and b3d2a@l (cons b3d2a@l b3d23@r))) (b3cf3@match-each-any b3d1e@e b3d20@m* b3d21@s* b3d22@ae*)) ((lambda (b3d2c@t) (if (memv b3d2c@t '(each)) (if (null? b3d1e@e) (b3cf5@match-empty (vector-ref b3d1f@p '1) b3d23@r) ((lambda (b3d2e@r*) (and b3d2e@r* (b3cf7@combine b3d2e@r* b3d23@r))) (b3cef@match-each b3d1e@e (vector-ref b3d1f@p '1) b3d20@m* b3d21@s* b3d22@ae*))) (if (memv b3d2c@t '(free-id)) (and (symbol? b3d1e@e) (b2dc8@top-marked? b3d20@m*) (b2e48@free-id=? (b3ced@stx^ b3d1e@e b3d20@m* b3d21@s* b3d22@ae*) (vector-ref b3d1f@p '1)) b3d23@r) (if (memv b3d2c@t '(scheme-id)) (and (symbol? b3d1e@e) (b2dc8@top-marked? b3d20@m*) (b2e48@free-id=? (b3ced@stx^ b3d1e@e b3d20@m* b3d21@s* b3d22@ae*) (b2fd1@scheme-stx (vector-ref b3d1f@p '1))) b3d23@r) (if (memv b3d2c@t '(each+)) (call-with-values (lambda () (b3cf1@match-each+ b3d1e@e (vector-ref b3d1f@p '1) (vector-ref b3d1f@p '2) (vector-ref b3d1f@p '3) b3d20@m* b3d21@s* b3d22@ae* b3d23@r)) (lambda (b3d36@b3d31 b3d37@b3d33 b3d38@b3d35) ((lambda (b3d3c@r b3d3d@y-pat b3d3e@xr*) (and b3d3c@r (null? b3d3d@y-pat) (if (null? b3d3e@xr*) (b3cf5@match-empty (vector-ref b3d1f@p '1) b3d3c@r) (b3cf7@combine b3d3e@xr* b3d3c@r)))) b3d38@b3d35 b3d37@b3d33 b3d36@b3d31))) (if (memv b3d2c@t '(atom)) (and (fast-equal? (vector-ref b3d1f@p '1) (b2e54@strip b3d1e@e b3d20@m*)) b3d23@r) (if (memv b3d2c@t '(vector)) (and (vector? b3d1e@e) (b3cfb@match (vector->list b3d1e@e) (vector-ref b3d1f@p '1) b3d20@m* b3d21@s* b3d22@ae* b3d23@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" b3d1f@p)))))))) (vector-ref b3d1f@p '0))))))) (set! b3cfb@match (lambda (b3d00@e b3d01@p b3d02@m* b3d03@s* b3d04@ae* b3d05@r) (if (not b3d05@r) '#f (if (eq? b3d01@p '_) b3d05@r (if (eq? b3d01@p 'any) (cons (b3ced@stx^ b3d00@e b3d02@m* b3d03@s* b3d04@ae*) b3d05@r) (if (b2e0e@stx? b3d00@e) (and (not (b2dc8@top-marked? b3d02@m*)) (call-with-values (lambda () (join-wraps b3d02@m* b3d03@s* b3d04@ae* b3d00@e)) (lambda (b3d12@b3d0d b3d13@b3d0f b3d14@b3d11) ((lambda (b3d18@ae* b3d19@s* b3d1a@m*) (b3cfb@match (b2e10@stx-expr b3d00@e) b3d01@p b3d1a@m* b3d19@s* b3d18@ae* b3d05@r)) b3d14@b3d11 b3d13@b3d0f b3d12@b3d0d)))) (if (b2996@b286a@annotation? b3d00@e) (b3cfb@match (b2998@b286e@annotation-expression b3d00@e) b3d01@p b3d02@m* b3d03@s* b3d04@ae* b3d05@r) (b3cf9@match* b3d00@e b3d01@p b3d02@m* b3d03@s* b3d04@ae* b3d05@r)))))))) (lambda (b3cfc@e b3cfd@p) (b3cfb@match b3cfc@e b3cfd@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! b3049@ellipsis? (lambda (b3dd0@x) (and (b2e42@id? b3dd0@x) (b2e48@free-id=? b3dd0@x (b2fd1@scheme-stx '...))))) (set! b304b@underscore? (lambda (b3dd2@x) (and (b2e42@id? b3dd2@x) (b2e48@free-id=? b3dd2@x (b2fd1@scheme-stx '_))))) (set! b304d@verify-literals (lambda (b3dd4@lits b3dd5@expr) (for-each (lambda (b3dd8@x) (if (or (not (b2e42@id? b3dd8@x)) (b3049@ellipsis? b3dd8@x) (b304b@underscore? b3dd8@x)) (b3127@syntax-violation '#f '"invalid literal" b3dd5@expr b3dd8@x) (void))) b3dd4@lits))) (set! b304f@syntax-case-transformer ((lambda () ((lambda (b3ddb@build-dispatch-call b3ddd@invalid-ids-error b3ddf@gen-clause b3de1@gen-syntax-case) (begin (set! b3ddb@build-dispatch-call (lambda (b3e4c@pvars b3e4d@expr b3e4e@y b3e4f@r b3e50@mr) ((lambda (b3e56@ids b3e57@levels) ((lambda (b3e5a@labels b3e5b@new-vars) ((lambda (b3e5e@body) (list '(primitive apply) (b2da6@b2ce6@build-lambda '#f b3e5b@new-vars b3e5e@body) b3e4e@y)) (b3069@chi-expr (b2e2e@add-subst (b2e02@make-full-rib b3e56@ids b3e5a@labels) b3e4d@expr) (append (map (lambda (b3e60@label b3e61@var b3e62@level) (cons b3e60@label (b2e5c@make-binding 'syntax (cons b3e61@var b3e62@level)))) b3e5a@labels b3e5b@new-vars (map cdr b3e4c@pvars)) b3e4f@r) b3e50@mr))) (map b2dce@gen-label b3e56@ids) (map b2dca@gen-lexical b3e56@ids))) (map car b3e4c@pvars) (map cdr b3e4c@pvars)))) (set! b3ddd@invalid-ids-error (lambda (b3e40@id* b3e41@e b3e42@class) ((letrec ((b3e46@find (lambda (b3e48@id* b3e49@ok*) (if (null? b3e48@id*) (b3127@syntax-violation '#f '"invalid syntax" b3e41@e) (if (b2e42@id? (car b3e48@id*)) (if (b2e4e@bound-id-member? (car b3e48@id*) b3e49@ok*) (b3123@syntax-error (car b3e48@id*) '"duplicate " b3e42@class) (b3e46@find (cdr b3e48@id*) (cons (car b3e48@id*) b3e49@ok*))) (b3123@syntax-error (car b3e48@id*) '"invalid " b3e42@class)))))) b3e46@find) b3e40@id* '()))) (set! b3ddf@gen-clause (lambda (b3e18@x b3e19@keys b3e1a@clauses b3e1b@r b3e1c@mr b3e1d@pat b3e1e@fender b3e1f@expr) (call-with-values (lambda () (b3045@convert-pattern b3e1d@pat b3e19@keys)) (lambda (b3e2c@b3e29 b3e2d@b3e2b) ((lambda (b3e30@pvars b3e31@p) (if (not (b2e4c@distinct-bound-ids? (map car b3e30@pvars))) (b3ddd@invalid-ids-error (map car b3e30@pvars) b3e1d@pat '"pattern variable") (if (not (for-all (lambda (b3e34@x) (not (b3049@ellipsis? (car b3e34@x)))) b3e30@pvars)) (b3127@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" b3e1d@pat) ((lambda (b3e36@y) ((lambda (b3e38@test) ((lambda (b3e3a@conseq) ((lambda (b3e3c@altern) (list (b2da6@b2ce6@build-lambda '#f (list b3e36@y) (list 'if b3e38@test b3e3a@conseq b3e3c@altern)) (list '(primitive syntax-dispatch) b3e18@x (list 'quote b3e31@p)))) (b3de1@gen-syntax-case b3e18@x b3e19@keys b3e1a@clauses b3e1b@r b3e1c@mr))) (b3ddb@build-dispatch-call b3e30@pvars b3e1f@expr b3e36@y b3e1b@r b3e1c@mr))) (if (eq? b3e1e@fender '#t) b3e36@y ((lambda (b3e3e@call) (list 'if b3e36@y b3e3e@call (list 'quote '#f))) (b3ddb@build-dispatch-call b3e30@pvars b3e1e@fender b3e36@y b3e1b@r b3e1c@mr))))) (b2dca@gen-lexical 'tmp))))) b3e2d@b3e2b b3e2c@b3e29))))) (set! b3de1@gen-syntax-case (lambda (b3df6@x b3df7@keys b3df8@clauses b3df9@r b3dfa@mr) (if (null? b3df8@clauses) (list '(primitive syntax-error) b3df6@x) ((lambda (b3e00@t) ((lambda (b3e02@ls/false) (if b3e02@ls/false (apply (lambda (b3e04@pat b3e05@expr) (if (and (b2e42@id? b3e04@pat) (not (b2e4e@bound-id-member? b3e04@pat b3df7@keys)) (not (b3049@ellipsis? b3e04@pat))) (if (b2e48@free-id=? b3e04@pat (b2fd1@scheme-stx '_)) (b3069@chi-expr b3e05@expr b3df9@r b3dfa@mr) ((lambda (b3e08@lab b3e09@lex) ((lambda (b3e0c@body) (list (b2da6@b2ce6@build-lambda '#f (list b3e09@lex) b3e0c@body) b3df6@x)) (b3069@chi-expr (b2e2e@add-subst (b2e02@make-full-rib (list b3e04@pat) (list b3e08@lab)) b3e05@expr) (cons (cons b3e08@lab (b2e5c@make-binding 'syntax (cons b3e09@lex '0))) b3df9@r) b3dfa@mr))) (b2dce@gen-label b3e04@pat) (b2dca@gen-lexical b3e04@pat))) (b3ddf@gen-clause b3df6@x b3df7@keys (cdr b3df8@clauses) b3df9@r b3dfa@mr b3e04@pat '#t b3e05@expr))) b3e02@ls/false) ((lambda (b3e0e@t) ((lambda (b3e10@ls/false) (if b3e10@ls/false (apply (lambda (b3e12@pat b3e13@fender b3e14@expr) (b3ddf@gen-clause b3df6@x b3df7@keys (cdr b3df8@clauses) b3df9@r b3dfa@mr b3e12@pat b3e13@fender b3e14@expr)) b3e10@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3e0e@t))) (b3047@syntax-dispatch b3e0e@t '(any any any)))) b3e00@t))) (b3047@syntax-dispatch b3e00@t '(any any)))) (car b3df8@clauses))))) (lambda (b3de2@e b3de3@r b3de4@mr) ((lambda (b3de8@t) ((lambda (b3dea@ls/false) (if b3dea@ls/false (apply (lambda (b3dec@expr b3ded@keys b3dee@clauses) (begin (b304d@verify-literals b3ded@keys b3de2@e) ((lambda (b3df2@x) ((lambda (b3df4@body) (list (b2da6@b2ce6@build-lambda '#f (list b3df2@x) b3df4@body) (b3069@chi-expr b3dec@expr b3de3@r b3de4@mr))) (b3de1@gen-syntax-case b3df2@x b3ded@keys b3dee@clauses b3de3@r b3de4@mr))) (b2dca@gen-lexical 'tmp)))) b3dea@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3de8@t))) (b3047@syntax-dispatch b3de8@t '(_ any each-any . each-any)))) b3de2@e)))) '#f '#f '#f '#f)))) (set! b3051@ellipsis-map (lambda (b3e66@proc b3e67@ls . b3e6a@ls*) ((lambda (b3e6d@who) (begin (set! b3e6d@who '...) (begin (if (not (list? b3e67@ls)) (assertion-violation b3e6d@who '"not a list" b3e67@ls) (void)) (if (not (null? b3e6a@ls*)) ((lambda (b3e6e@n) (for-each (lambda (b3e70@x) (begin (if (not (list? b3e70@x)) (assertion-violation b3e6d@who '"not a list" b3e70@x) (void)) (if (not (= (length b3e70@x) b3e6e@n)) (assertion-violation b3e6d@who '"length mismatch" b3e67@ls b3e70@x) (void)))) b3e6a@ls*)) (length b3e67@ls)) (void)) (apply map b3e66@proc b3e67@ls b3e6a@ls*)))) '#f))) (set! b3053@syntax-transformer ((lambda () ((lambda (b3e73@gen-syntax b3e75@gen-ref b3e77@gen-append b3e79@gen-mappend b3e7b@gen-map b3e7d@gen-cons b3e7f@gen-vector b3e81@regen) (begin (set! b3e73@gen-syntax (lambda (b3eea@src b3eeb@e b3eec@r b3eed@maps b3eee@ellipsis? b3eef@vec?) ((lambda (b3ef6@t) ((lambda (b3ef8@ls/false) (if (and b3ef8@ls/false (apply (lambda (b3efa@dots) (b3eee@ellipsis? b3efa@dots)) b3ef8@ls/false)) (apply (lambda (b3efc@dots) (b3127@syntax-violation '#f '"misplaced ellipsis in syntax form" b3eea@src)) b3ef8@ls/false) ((lambda (b3efe@t) ((lambda (b3f00@ls/false) (if (and b3f00@ls/false (apply (lambda (b3f02@id) (b2e42@id? b3f02@id)) b3f00@ls/false)) (apply (lambda (b3f04@id) ((lambda (b3f06@label) ((lambda (b3f08@b) ((lambda () (if (eq? (b2e5e@binding-type b3f08@b) 'syntax) (call-with-values (lambda () ((lambda (b3f0e@var.lev) (b3e75@gen-ref b3eea@src (car b3f0e@var.lev) (cdr b3f0e@var.lev) b3eed@maps)) (b2e60@binding-value b3f08@b))) (lambda (b3f10@b3f0b b3f11@b3f0d) ((lambda (b3f14@maps b3f15@var) (values (list 'ref b3f15@var) b3f14@maps)) b3f11@b3f0d b3f10@b3f0b))) (values (list 'quote b3eeb@e) b3eed@maps))))) (b2e5a@label->binding b3f06@label b3eec@r))) (b2e58@id->label b3eeb@e))) b3f00@ls/false) ((lambda (b3f18@t) ((lambda (b3f1a@ls/false) (if (and b3f1a@ls/false (apply (lambda (b3f1c@dots b3f1d@e) (b3eee@ellipsis? b3f1c@dots)) b3f1a@ls/false)) (apply (lambda (b3f20@dots b3f21@e) (if b3eef@vec? (b3127@syntax-violation '#f '"misplaced ellipsis in syntax form" b3eea@src) (b3e73@gen-syntax b3eea@src b3f21@e b3eec@r b3eed@maps (lambda (b3f24@x) '#f) '#f))) b3f1a@ls/false) ((lambda (b3f26@t) ((lambda (b3f28@ls/false) (if (and b3f28@ls/false (apply (lambda (b3f2a@x b3f2b@dots b3f2c@y) (b3eee@ellipsis? b3f2b@dots)) b3f28@ls/false)) (apply (lambda (b3f30@x b3f31@dots b3f32@y) ((letrec ((b3f36@f (lambda (b3f38@y b3f39@k) ((lambda (b3f3c@t) ((lambda (b3f3e@ls/false) (if b3f3e@ls/false (apply (lambda () (b3f39@k b3eed@maps)) b3f3e@ls/false) ((lambda (b3f40@t) ((lambda (b3f42@ls/false) (if (and b3f42@ls/false (apply (lambda (b3f44@dots b3f45@y) (b3eee@ellipsis? b3f44@dots)) b3f42@ls/false)) (apply (lambda (b3f48@dots b3f49@y) (b3f36@f b3f49@y (lambda (b3f4c@maps) (call-with-values (lambda () (b3f39@k (cons '() b3f4c@maps))) (lambda (b3f52@b3f4f b3f53@b3f51) ((lambda (b3f56@maps b3f57@x) (if (null? (car b3f56@maps)) (b3127@syntax-violation '#f '"extra ellipsis in syntax form" b3eea@src) (values (b3e79@gen-mappend b3f57@x (car b3f56@maps)) (cdr b3f56@maps)))) b3f53@b3f51 b3f52@b3f4f)))))) b3f42@ls/false) ((lambda (b3f5a@t) ((lambda (b3f5c@ls/false) (if b3f5c@ls/false (apply (lambda () (call-with-values (lambda () (b3e73@gen-syntax b3eea@src b3f38@y b3eec@r b3eed@maps b3eee@ellipsis? b3eef@vec?)) (lambda (b3f62@b3f5f b3f63@b3f61) ((lambda (b3f66@maps b3f67@y) (call-with-values (lambda () (b3f39@k b3f66@maps)) (lambda (b3f6e@b3f6b b3f6f@b3f6d) ((lambda (b3f72@maps b3f73@x) (values (b3e77@gen-append b3f73@x b3f67@y) b3f72@maps)) b3f6f@b3f6d b3f6e@b3f6b)))) b3f63@b3f61 b3f62@b3f5f)))) b3f5c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3f5a@t))) (b3047@syntax-dispatch b3f5a@t '_))) b3f40@t))) (b3047@syntax-dispatch b3f40@t '(any . any)))) b3f3c@t))) (b3047@syntax-dispatch b3f3c@t '()))) b3f38@y)))) b3f36@f) b3f32@y (lambda (b3f76@maps) (call-with-values (lambda () (b3e73@gen-syntax b3eea@src b3f30@x b3eec@r (cons '() b3f76@maps) b3eee@ellipsis? '#f)) (lambda (b3f7c@b3f79 b3f7d@b3f7b) ((lambda (b3f80@maps b3f81@x) (if (null? (car b3f80@maps)) (b3127@syntax-violation '#f '"extra ellipsis in syntax form" b3eea@src) (values (b3e7b@gen-map b3f81@x (car b3f80@maps)) (cdr b3f80@maps)))) b3f7d@b3f7b b3f7c@b3f79)))))) b3f28@ls/false) ((lambda (b3f84@t) ((lambda (b3f86@ls/false) (if b3f86@ls/false (apply (lambda (b3f88@x b3f89@y) (call-with-values (lambda () (b3e73@gen-syntax b3eea@src b3f88@x b3eec@r b3eed@maps b3eee@ellipsis? '#f)) (lambda (b3f90@b3f8d b3f91@b3f8f) ((lambda (b3f94@maps b3f95@xnew) (call-with-values (lambda () (b3e73@gen-syntax b3eea@src b3f89@y b3eec@r b3f94@maps b3eee@ellipsis? b3eef@vec?)) (lambda (b3f9c@b3f99 b3f9d@b3f9b) ((lambda (b3fa0@maps b3fa1@ynew) (values (b3e7d@gen-cons b3eeb@e b3f88@x b3f89@y b3f95@xnew b3fa1@ynew) b3fa0@maps)) b3f9d@b3f9b b3f9c@b3f99)))) b3f91@b3f8f b3f90@b3f8d)))) b3f86@ls/false) ((lambda (b3fa4@t) ((lambda (b3fa6@ls/false) (if b3fa6@ls/false (apply (lambda (b3fa8@ls) (call-with-values (lambda () (b3e73@gen-syntax b3eea@src b3fa8@ls b3eec@r b3eed@maps b3eee@ellipsis? '#t)) (lambda (b3fae@b3fab b3faf@b3fad) ((lambda (b3fb2@maps b3fb3@lsnew) (values (b3e7f@gen-vector b3eeb@e b3fa8@ls b3fb3@lsnew) b3fb2@maps)) b3faf@b3fad b3fae@b3fab)))) b3fa6@ls/false) ((lambda (b3fb6@t) ((lambda (b3fb8@ls/false) (if b3fb8@ls/false (apply (lambda () (values (list 'quote b3eeb@e) b3eed@maps)) b3fb8@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3fb6@t))) (b3047@syntax-dispatch b3fb6@t '_))) b3fa4@t))) (b3047@syntax-dispatch b3fa4@t '#(vector each-any)))) b3f84@t))) (b3047@syntax-dispatch b3f84@t '(any . any)))) b3f26@t))) (b3047@syntax-dispatch b3f26@t '(any any . any)))) b3f18@t))) (b3047@syntax-dispatch b3f18@t '(any any)))) b3efe@t))) (b3047@syntax-dispatch b3efe@t 'any))) b3ef6@t))) (b3047@syntax-dispatch b3ef6@t 'any))) b3eeb@e))) (set! b3e75@gen-ref (lambda (b3ed0@src b3ed1@var b3ed2@level b3ed3@maps) (if (= b3ed2@level '0) (values b3ed1@var b3ed3@maps) (if (null? b3ed3@maps) (b3127@syntax-violation '#f '"missing ellipsis in syntax form" b3ed0@src) (call-with-values (lambda () (b3e75@gen-ref b3ed0@src b3ed1@var (- b3ed2@level '1) (cdr b3ed3@maps))) (lambda (b3edc@b3ed9 b3edd@b3edb) ((lambda (b3ee0@outer-maps b3ee1@outer-var) ((lambda (b3ee4@t) (if b3ee4@t ((lambda (b3ee6@b) (values (cdr b3ee6@b) b3ed3@maps)) b3ee4@t) ((lambda (b3ee8@inner-var) (values b3ee8@inner-var (cons (cons (cons b3ee1@outer-var b3ee8@inner-var) (car b3ed3@maps)) b3ee0@outer-maps))) (b2dca@gen-lexical 'tmp)))) (assq b3ee1@outer-var (car b3ed3@maps)))) b3edd@b3edb b3edc@b3ed9))))))) (set! b3e77@gen-append (lambda (b3ecc@x b3ecd@y) (if (fast-equal? b3ecd@y ''()) b3ecc@x (list 'append b3ecc@x b3ecd@y)))) (set! b3e79@gen-mappend (lambda (b3ec8@e b3ec9@map-env) (list 'apply '(primitive append) (b3e7b@gen-map b3ec8@e b3ec9@map-env)))) (set! b3e7b@gen-map (lambda (b3eb6@e b3eb7@map-env) ((lambda (b3eba@formals b3ebb@actuals) (if (eq? (car b3eb6@e) 'ref) (car b3ebb@actuals) (if (for-all (lambda (b3ebe@x) (and (eq? (car b3ebe@x) 'ref) (memq (cadr b3ebe@x) b3eba@formals))) (cdr b3eb6@e)) ((lambda (b3ec0@args) (cons 'map (cons (list 'primitive (car b3eb6@e)) b3ec0@args))) (map ((lambda (b3ec2@r) (lambda (b3ec4@x) (cdr (assq (cadr b3ec4@x) b3ec2@r)))) (map cons b3eba@formals b3ebb@actuals)) (cdr b3eb6@e))) (cons* 'map (list 'lambda b3eba@formals b3eb6@e) b3ebb@actuals)))) (map cdr b3eb7@map-env) (map (lambda (b3ec6@x) (list 'ref (car b3ec6@x))) b3eb7@map-env)))) (set! b3e7d@gen-cons (lambda (b3ea6@e b3ea7@x b3ea8@y b3ea9@xnew b3eaa@ynew) ((lambda (b3eb0@t) (if (memv b3eb0@t '(quote)) (if (eq? (car b3ea9@xnew) 'quote) ((lambda (b3eb2@xnew b3eb3@ynew) (if (and (eq? b3eb2@xnew b3ea7@x) (eq? b3eb3@ynew b3ea8@y)) (list 'quote b3ea6@e) (list 'quote (cons b3eb2@xnew b3eb3@ynew)))) (cadr b3ea9@xnew) (cadr b3eaa@ynew)) (if (null? (cadr b3eaa@ynew)) (list 'list b3ea9@xnew) (list 'cons b3ea9@xnew b3eaa@ynew))) (if (memv b3eb0@t '(list)) (cons 'list (cons b3ea9@xnew (cdr b3eaa@ynew))) (list 'cons b3ea9@xnew b3eaa@ynew)))) (car b3eaa@ynew)))) (set! b3e7f@gen-vector (lambda (b3ea0@e b3ea1@ls b3ea2@lsnew) (if (eq? (car b3ea2@lsnew) 'quote) (if (eq? (cadr b3ea2@lsnew) b3ea1@ls) (list 'quote b3ea0@e) (list 'quote (list->vector (cadr b3ea2@lsnew)))) (if (eq? (car b3ea2@lsnew) 'list) (cons 'vector (cdr b3ea2@lsnew)) (list 'list->vector b3ea2@lsnew))))) (set! b3e81@regen (lambda (b3e9a@x) ((lambda (b3e9c@t) (if (memv b3e9c@t '(ref)) (cadr b3e9a@x) (if (memv b3e9c@t '(primitive)) (list 'primitive (cadr b3e9a@x)) (if (memv b3e9c@t '(quote)) (list 'quote (cadr b3e9a@x)) (if (memv b3e9c@t '(lambda)) (b2da6@b2ce6@build-lambda '#f (cadr b3e9a@x) (b3e81@regen (caddr b3e9a@x))) (if (memv b3e9c@t '(map)) ((lambda (b3e9e@ls) (cons '(primitive ellipsis-map) b3e9e@ls)) (map b3e81@regen (cdr b3e9a@x))) (cons (list 'primitive (car b3e9a@x)) (map b3e81@regen (cdr b3e9a@x))))))))) (car b3e9a@x)))) (lambda (b3e82@e b3e83@r b3e84@mr) ((lambda (b3e88@t) ((lambda (b3e8a@ls/false) (if b3e8a@ls/false (apply (lambda (b3e8c@x) (call-with-values (lambda () (b3e73@gen-syntax b3e82@e b3e8c@x b3e83@r '() b3049@ellipsis? '#f)) (lambda (b3e92@b3e8f b3e93@b3e91) ((lambda (b3e96@maps b3e97@e) (b3e81@regen b3e97@e)) b3e93@b3e91 b3e92@b3e8f)))) b3e8a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3e88@t))) (b3047@syntax-dispatch b3e88@t '(_ any)))) b3e82@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! b3055@core-macro-transformer (lambda (b3fba@name) ((lambda (b3fbc@t) (if (memv b3fbc@t '(quote)) b2ff7@quote-transformer (if (memv b3fbc@t '(lambda)) b2ffb@lambda-transformer (if (memv b3fbc@t '(case-lambda)) b2ff9@case-lambda-transformer (if (memv b3fbc@t '(letrec)) b2fdf@letrec-transformer (if (memv b3fbc@t '(letrec*)) b2fe1@letrec*-transformer (if (memv b3fbc@t '(if)) b2fef@if-transformer (if (memv b3fbc@t '(and)) b2ff1@and-transformer (if (memv b3fbc@t '(or)) b2ff3@or-transformer (if (memv b3fbc@t '(foreign-call)) b3043@foreign-call-transformer (if (memv b3fbc@t '(syntax-case)) b304f@syntax-case-transformer (if (memv b3fbc@t '(syntax)) b3053@syntax-transformer (if (memv b3fbc@t '(type-descriptor)) b2fe5@type-descriptor-transformer (if (memv b3fbc@t '(record-type-descriptor)) b2fe7@record-type-descriptor-transformer (if (memv b3fbc@t '(record-constructor-descriptor)) b2fe9@record-constructor-descriptor-transformer (if (memv b3fbc@t '(fluid-let-syntax)) b2fe3@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" b3fba@name))))))))))))))))) b3fba@name))) (set! b3057@symbol-macro (lambda (b3fbe@x b3fbf@set) ((lambda (b3fc2@t) ((lambda (b3fc4@ls/false) (if (and b3fc4@ls/false (apply (lambda (b3fc6@name) (and (b2e42@id? b3fc6@name) (memq (b2e44@id->sym b3fc6@name) b3fbf@set))) b3fc4@ls/false)) (apply (lambda (b3fc8@name) (b2ffd@bless (list 'quote b3fc8@name))) b3fc4@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b3fc2@t))) (b3047@syntax-dispatch b3fc2@t '(_ any)))) b3fbe@x))) (set! b3059@macro-transformer (lambda (b3fca@x) (if (procedure? b3fca@x) b3fca@x (if (symbol? b3fca@x) ((lambda (b3fcc@t) (if (memv b3fcc@t '(define-record-type)) b303b@define-record-type-macro (if (memv b3fcc@t '(define-struct)) b3039@define-struct-macro (if (memv b3fcc@t '(include)) b302f@include-macro (if (memv b3fcc@t '(cond)) b302b@cond-macro (if (memv b3fcc@t '(let)) b3003@let-macro (if (memv b3fcc@t '(do)) b3023@do-macro (if (memv b3fcc@t '(or)) b3027@or-macro (if (memv b3fcc@t '(and)) b3029@and-macro (if (memv b3fcc@t '(let*)) b3025@let*-macro (if (memv b3fcc@t '(let-values)) b3005@let-values-macro (if (memv b3fcc@t '(let*-values)) b3007@let*-values-macro (if (memv b3fcc@t '(syntax-rules)) b3033@syntax-rules-macro (if (memv b3fcc@t '(quasiquote)) b3035@quasiquote-macro (if (memv b3fcc@t '(quasisyntax)) b3037@quasisyntax-macro (if (memv b3fcc@t '(with-syntax)) b2fff@with-syntax-macro (if (memv b3fcc@t '(when)) b2feb@when-macro (if (memv b3fcc@t '(unless)) b2fed@unless-macro (if (memv b3fcc@t '(case)) b2ff5@case-macro (if (memv b3fcc@t '(identifier-syntax)) b3021@identifier-syntax-macro (if (memv b3fcc@t '(time)) b3019@time-macro (if (memv b3fcc@t '(delay)) b301b@delay-macro (if (memv b3fcc@t '(assert)) b301d@assert-macro (if (memv b3fcc@t '(endianness)) b301f@endianness-macro (if (memv b3fcc@t '(guard)) b3015@guard-macro (if (memv b3fcc@t '(define-enumeration)) b3017@define-enumeration-macro (if (memv b3fcc@t '(trace-lambda)) b3009@trace-lambda-macro (if (memv b3fcc@t '(trace-define)) b300b@trace-define-macro (if (memv b3fcc@t '(trace-define-syntax)) b300d@trace-define-syntax-macro (if (memv b3fcc@t '(trace-let-syntax)) b3011@trace-let-syntax-macro (if (memv b3fcc@t '(trace-letrec-syntax)) b3013@trace-letrec-syntax-macro (if (memv b3fcc@t '(define-condition-type)) b303d@define-condition-type-macro (if (memv b3fcc@t '(parameterize)) b3041@parameterize-macro (if (memv b3fcc@t '(include-into)) b3031@include-into-macro (if (memv b3fcc@t '(eol-style)) (lambda (b3fce@x) (b3057@symbol-macro b3fce@x '(none lf cr crlf nel crnel ls))) (if (memv b3fcc@t '(error-handling-mode)) (lambda (b3fd0@x) (b3057@symbol-macro b3fd0@x '(ignore raise replace))) (if (memv b3fcc@t '(buffer-mode)) (lambda (b3fd2@x) (b3057@symbol-macro b3fd2@x '(none line block))) (if (memv b3fcc@t '(file-options)) b2dbd@file-options-macro (if (memv b3fcc@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) b303f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" b3fca@x)))))))))))))))))))))))))))))))))))))))) b3fca@x) (error 'core-macro-transformer '"BUG: invalid macro" b3fca@x))))) (set! b305b@local-macro-transformer (lambda (b3fd4@x) (car b3fd4@x))) (set! b305d@do-macro-call (lambda (b3fd6@transformer b3fd7@expr) ((lambda (b3fda@out) (begin ((letrec ((b3fdc@f (lambda (b3fde@x) (if (not (b2e0e@stx? b3fde@x)) (if (pair? b3fde@x) (begin (b3fdc@f (car b3fde@x)) (b3fdc@f (cdr b3fde@x))) (if (vector? b3fde@x) (vector-for-each b3fdc@f b3fde@x) (if (symbol? b3fde@x) (b3127@syntax-violation '#f '"raw symbol encountered in output of macro" b3fd7@expr b3fde@x) (void)))) (void))))) b3fdc@f) b3fda@out) (b2e2c@add-mark (b2e24@gen-mark) b3fda@out b3fd7@expr))) (b3fd6@transformer (b2e2c@add-mark b2e26@anti-mark b3fd7@expr '#f))))) (set! b305f@chi-macro (lambda (b3fe0@p b3fe1@e) (b305d@do-macro-call (b3059@macro-transformer b3fe0@p) b3fe1@e))) (set! b3061@chi-local-macro (lambda (b3fe4@p b3fe5@e) (b305d@do-macro-call (b305b@local-macro-transformer b3fe4@p) b3fe5@e))) (set! b3063@chi-global-macro (lambda (b3fe8@p b3fe9@e) ((lambda (b3fec@lib b3fed@loc) (begin (b2c6e@b2abd@visit-library b3fec@lib) ((lambda (b3ff0@x) ((lambda (b3ff2@transformer) (b305d@do-macro-call b3ff2@transformer b3fe9@e)) (if (procedure? b3ff0@x) b3ff0@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" b3ff0@x)))) (symbol-value b3fed@loc)))) (car b3fe8@p) (cdr b3fe8@p)))) (set! b3065@chi-expr* (lambda (b3ff4@e* b3ff5@r b3ff6@mr) (if (null? b3ff4@e*) '() ((lambda (b3ffa@e) (cons b3ffa@e (b3065@chi-expr* (cdr b3ff4@e*) b3ff5@r b3ff6@mr))) (b3069@chi-expr (car b3ff4@e*) b3ff5@r b3ff6@mr))))) (set! b3067@chi-application (lambda (b3ffc@e b3ffd@r b3ffe@mr) ((lambda (b4002@t) ((lambda (b4004@ls/false) (if b4004@ls/false (apply (lambda (b4006@rator b4007@rands) ((lambda (b400a@rator) (cons b400a@rator (b3065@chi-expr* b4007@rands b3ffd@r b3ffe@mr))) (b3069@chi-expr b4006@rator b3ffd@r b3ffe@mr))) b4004@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4002@t))) (b3047@syntax-dispatch b4002@t '(any . each-any)))) b3ffc@e))) (set! b3069@chi-expr (lambda (b400c@e b400d@r b400e@mr) (call-with-values (lambda () (b2e64@syntax-type b400c@e b400d@r)) (lambda (b4018@b4013 b4019@b4015 b401a@b4017) ((lambda (b401e@kwd b401f@value b4020@type) ((lambda (b4024@t) (if (memv b4024@t '(core-macro)) ((lambda (b4026@transformer) (b4026@transformer b400c@e b400d@r b400e@mr)) (b3055@core-macro-transformer b401f@value)) (if (memv b4024@t '(global)) ((lambda (b4028@lib) ((lambda (b402a@loc) ((lambda () (begin ((b30af@inv-collector) b4028@lib) b402a@loc)))) (cdr b401f@value))) (car b401f@value)) (if (memv b4024@t '(core-prim)) ((lambda (b402c@name) (list 'primitive b402c@name)) b401f@value) (if (memv b4024@t '(call)) (b3067@chi-application b400c@e b400d@r b400e@mr) (if (memv b4024@t '(lexical)) ((lambda (b402e@lex) b402e@lex) (b2fd3@lexical-var b401f@value)) (if (memv b4024@t '(global-macro global-macro!)) (b3069@chi-expr (b3063@chi-global-macro b401f@value b400c@e) b400d@r b400e@mr) (if (memv b4024@t '(local-macro local-macro!)) (b3069@chi-expr (b3061@chi-local-macro b401f@value b400c@e) b400d@r b400e@mr) (if (memv b4024@t '(macro macro!)) (b3069@chi-expr (b305f@chi-macro b401f@value b400c@e) b400d@r b400e@mr) (if (memv b4024@t '(constant)) ((lambda (b4030@datum) (list 'quote b4030@datum)) b401f@value) (if (memv b4024@t '(set!)) (b306b@chi-set! b400c@e b400d@r b400e@mr) (if (memv b4024@t '(begin)) ((lambda (b4032@t) ((lambda (b4034@ls/false) (if b4034@ls/false (apply (lambda (b4036@x b4037@x*) (b2da9@b2d18@build-sequence '#f (b3065@chi-expr* (cons b4036@x b4037@x*) b400d@r b400e@mr))) b4034@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4032@t))) (b3047@syntax-dispatch b4032@t '(_ any . each-any)))) b400c@e) (if (memv b4024@t '(let-syntax letrec-syntax)) ((lambda (b403a@t) ((lambda (b403c@ls/false) (if (and b403c@ls/false (apply (lambda (b403e@xlhs* b403f@xrhs* b4040@xbody b4041@xbody*) (if (not (b2e4a@valid-bound-ids? b403e@xlhs*)) (b3127@syntax-violation '#f '"invalid identifiers" b400c@e) (void))) b403c@ls/false)) (apply (lambda (b4046@xlhs* b4047@xrhs* b4048@xbody b4049@xbody*) ((lambda (b404e@xlab*) ((lambda (b4050@xrib) ((lambda (b4052@xb*) ((lambda () (b2da9@b2d18@build-sequence '#f (b3065@chi-expr* (map (lambda (b4054@x) (b2e2e@add-subst b4050@xrib b4054@x)) (cons b4048@xbody b4049@xbody*)) (append (map cons b404e@xlab* b4052@xb*) b400d@r) (append (map cons b404e@xlab* b4052@xb*) b400e@mr)))))) (map (lambda (b4056@x) (b2e7a@make-eval-transformer (b30a1@expand-transformer (if (eq? b4020@type 'let-syntax) b4056@x (b2e2e@add-subst b4050@xrib b4056@x)) b400e@mr))) b4047@xrhs*))) (b2e02@make-full-rib b4046@xlhs* b404e@xlab*))) (map b2dce@gen-label b4046@xlhs*))) b403c@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b403a@t))) (b3047@syntax-dispatch b403a@t '(_ #(each (any any)) any . each-any)))) b400c@e) (if (memv b4024@t '(displaced-lexical)) (b3127@syntax-violation '#f '"identifier out of context" b400c@e) (if (memv b4024@t '(syntax)) (b3127@syntax-violation '#f '"reference to pattern variable outside a syntax form" b400c@e) (if (memv b4024@t '(define define-syntax module import library)) (b3127@syntax-violation '#f (string-append ((lambda (b4058@t) (if (memv b4058@t '(define)) '"a definition" (if (memv b4058@t '(define-syntax)) '"a define-syntax" (if (memv b4058@t '(module)) '"a module definition" (if (memv b4058@t '(library)) '"a library definition" (if (memv b4058@t '(import)) '"an import declaration" (if (memv b4058@t '(export)) '"an export declaration" '"a non-expression"))))))) b4020@type) '" was found where an expression was expected") b400c@e) (if (memv b4024@t '(mutable)) (b3127@syntax-violation '#f '"attempt to reference an unexportable variable" b400c@e) (b3127@syntax-violation '#f '"invalid expression" b400c@e)))))))))))))))))) b4020@type)) b401a@b4017 b4019@b4015 b4018@b4013))))) (set! b306b@chi-set! (lambda (b405a@e b405b@r b405c@mr) ((lambda (b4060@t) ((lambda (b4062@ls/false) (if (and b4062@ls/false (apply (lambda (b4064@x b4065@v) (b2e42@id? b4064@x)) b4062@ls/false)) (apply (lambda (b4068@x b4069@v) (call-with-values (lambda () (b2e64@syntax-type b4068@x b405b@r)) (lambda (b4072@b406d b4073@b406f b4074@b4071) ((lambda (b4078@kwd b4079@value b407a@type) ((lambda (b407e@t) (if (memv b407e@t '(lexical)) (begin (b2fd7@set-lexical-mutable! b4079@value '#t) (list 'set! (b2fd3@lexical-var b4079@value) (b3069@chi-expr b4069@v b405b@r b405c@mr))) (if (memv b407e@t '(core-prim)) (b3127@syntax-violation '#f '"cannot modify imported core primitive" b405a@e) (if (memv b407e@t '(global)) (b3127@syntax-violation '#f '"attempt to modify imported binding" b405a@e) (if (memv b407e@t '(global-macro!)) (b3069@chi-expr (b3063@chi-global-macro b4079@value b405a@e) b405b@r b405c@mr) (if (memv b407e@t '(local-macro!)) (b3069@chi-expr (b3061@chi-local-macro b4079@value b405a@e) b405b@r b405c@mr) (if (memv b407e@t '(mutable)) (b3127@syntax-violation '#f '"attempt to assign to an unexportable variable" b405a@e) (b3127@syntax-violation '#f '"invalid syntax" b405a@e)))))))) b407a@type)) b4074@b4071 b4073@b406f b4072@b406d)))) b4062@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4060@t))) (b3047@syntax-dispatch b4060@t '(_ any any)))) b405a@e))) (set! b306d@verify-formals (lambda (b4080@fmls b4081@stx) ((lambda (b4084@t) ((lambda (b4086@ls/false) (if b4086@ls/false (apply (lambda (b4088@x*) (if (not (b2e4a@valid-bound-ids? b4088@x*)) (b3001@invalid-fmls-error b4081@stx b4080@fmls) (void))) b4086@ls/false) ((lambda (b408a@t) ((lambda (b408c@ls/false) (if b408c@ls/false (apply (lambda (b408e@x* b408f@x) (if (not (b2e4a@valid-bound-ids? (cons b408f@x b408e@x*))) (b3001@invalid-fmls-error b4081@stx b4080@fmls) (void))) b408c@ls/false) ((lambda (b4092@t) ((lambda (b4094@ls/false) (if b4094@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid syntax" b4081@stx)) b4094@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4092@t))) (b3047@syntax-dispatch b4092@t '_))) b408a@t))) (b3047@syntax-dispatch b408a@t '#(each+ any () any)))) b4084@t))) (b3047@syntax-dispatch b4084@t 'each-any))) b4080@fmls))) (set! b306f@chi-lambda-clause (lambda (b4096@stx b4097@fmls b4098@body* b4099@r b409a@mr) ((lambda (b40a0@t) ((lambda (b40a2@ls/false) (if b40a2@ls/false (apply (lambda (b40a4@x*) (begin (b306d@verify-formals b4097@fmls b4096@stx) ((lambda (b40a6@lex* b40a7@lab*) (values b40a6@lex* (b307f@chi-internal (b2e2e@add-subst (b2e02@make-full-rib b40a4@x* b40a7@lab*) b4098@body*) (b2fdb@add-lexicals b40a7@lab* b40a6@lex* b4099@r) b409a@mr))) (map b2dca@gen-lexical b40a4@x*) (map b2dce@gen-label b40a4@x*)))) b40a2@ls/false) ((lambda (b40aa@t) ((lambda (b40ac@ls/false) (if b40ac@ls/false (apply (lambda (b40ae@x* b40af@x) (begin (b306d@verify-formals b4097@fmls b4096@stx) ((lambda (b40b2@lex* b40b3@lab* b40b4@lex b40b5@lab) (values (append b40b2@lex* b40b4@lex) (b307f@chi-internal (b2e2e@add-subst (b2e02@make-full-rib (cons b40af@x b40ae@x*) (cons b40b5@lab b40b3@lab*)) b4098@body*) (b2fdb@add-lexicals (cons b40b5@lab b40b3@lab*) (cons b40b4@lex b40b2@lex*) b4099@r) b409a@mr))) (map b2dca@gen-lexical b40ae@x*) (map b2dce@gen-label b40ae@x*) (b2dca@gen-lexical b40af@x) (b2dce@gen-label b40af@x)))) b40ac@ls/false) ((lambda (b40ba@t) ((lambda (b40bc@ls/false) (if b40bc@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid syntax" b4097@fmls)) b40bc@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b40ba@t))) (b3047@syntax-dispatch b40ba@t '_))) b40aa@t))) (b3047@syntax-dispatch b40aa@t '#(each+ any () any)))) b40a0@t))) (b3047@syntax-dispatch b40a0@t 'each-any))) b4097@fmls))) (set! b3071@chi-lambda-clause* (lambda (b40be@stx b40bf@fmls* b40c0@body** b40c1@r b40c2@mr) (if (null? b40bf@fmls*) (values '() '()) (call-with-values (lambda () (b306f@chi-lambda-clause b40be@stx (car b40bf@fmls*) (car b40c0@body**) b40c1@r b40c2@mr)) (lambda (b40cc@b40c9 b40cd@b40cb) ((lambda (b40d0@b b40d1@a) (call-with-values (lambda () (b3071@chi-lambda-clause* b40be@stx (cdr b40bf@fmls*) (cdr b40c0@body**) b40c1@r b40c2@mr)) (lambda (b40d8@b40d5 b40d9@b40d7) ((lambda (b40dc@b* b40dd@a*) (values (cons b40d1@a b40dd@a*) (cons b40d0@b b40dc@b*))) b40d9@b40d7 b40d8@b40d5)))) b40cd@b40cb b40cc@b40c9)))))) (set! b3073@chi-defun (lambda (b40e0@x b40e1@r b40e2@mr) ((lambda (b40e6@fmls b40e7@body*) (call-with-values (lambda () (b306f@chi-lambda-clause b40e6@fmls b40e6@fmls b40e7@body* b40e1@r b40e2@mr)) (lambda (b40ee@b40eb b40ef@b40ed) ((lambda (b40f2@body b40f3@fmls) (b2da6@b2ce6@build-lambda '#f b40f3@fmls b40f2@body)) b40ef@b40ed b40ee@b40eb)))) (car b40e0@x) (cdr b40e0@x)))) (set! b3075@chi-rhs (lambda (b40f6@rhs b40f7@r b40f8@mr) ((lambda (b40fc@t) (if (memv b40fc@t '(defun)) (b3073@chi-defun (cdr b40f6@rhs) b40f7@r b40f8@mr) (if (memv b40fc@t '(expr)) ((lambda (b40fe@expr) (b3069@chi-expr b40fe@expr b40f7@r b40f8@mr)) (cdr b40f6@rhs)) (if (memv b40fc@t '(top-expr)) ((lambda (b4100@expr) (b2da9@b2d18@build-sequence '#f (list (b3069@chi-expr b4100@expr b40f7@r b40f8@mr) (b2daa@b2d1a@build-void)))) (cdr b40f6@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" b40f6@rhs))))) (car b40f6@rhs)))) (set! b3077@expand-interaction-rhs*/init* (lambda (b4102@lhs* b4103@rhs* b4104@init* b4105@r b4106@mr) ((letrec ((b410c@f (lambda (b410e@lhs* b410f@rhs*) (if (null? b410e@lhs*) (map (lambda (b4112@x) (b3069@chi-expr b4112@x b4105@r b4106@mr)) b4104@init*) ((lambda (b4114@lhs b4115@rhs) ((lambda (b4118@t) (if (memv b4118@t '(defun)) ((lambda (b411a@rhs) (cons (list 'set! b4114@lhs b411a@rhs) (b410c@f (cdr b410e@lhs*) (cdr b410f@rhs*)))) (b3073@chi-defun (cdr b4115@rhs) b4105@r b4106@mr)) (if (memv b4118@t '(expr)) ((lambda (b411c@rhs) (cons (list 'set! b4114@lhs b411c@rhs) (b410c@f (cdr b410e@lhs*) (cdr b410f@rhs*)))) (b3069@chi-expr (cdr b4115@rhs) b4105@r b4106@mr)) (if (memv b4118@t '(top-expr)) ((lambda (b411e@e) (cons b411e@e (b410c@f (cdr b410e@lhs*) (cdr b410f@rhs*)))) (b3069@chi-expr (cdr b4115@rhs) b4105@r b4106@mr)) (error 'expand-interaction '"invallid" b4115@rhs))))) (car b4115@rhs))) (car b410e@lhs*) (car b410f@rhs*)))))) b410c@f) b4102@lhs* b4103@rhs*))) (set! b3079@chi-rhs* (lambda (b4120@rhs* b4121@r b4122@mr) ((letrec ((b4126@f (lambda (b4128@ls) (if (null? b4128@ls) '() ((lambda (b412a@a) (cons b412a@a (b4126@f (cdr b4128@ls)))) (b3075@chi-rhs (car b4128@ls) b4121@r b4122@mr)))))) b4126@f) b4120@rhs*))) (set! b307b@find-bound=? (lambda (b412c@x b412d@lhs* b412e@rhs*) (if (null? b412d@lhs*) '#f (if (b2e46@bound-id=? b412c@x (car b412d@lhs*)) (car b412e@rhs*) (b307b@find-bound=? b412c@x (cdr b412d@lhs*) (cdr b412e@rhs*)))))) (set! b307d@find-dups (lambda (b4132@ls) ((letrec ((b4134@f (lambda (b4136@ls b4137@dups) (if (null? b4136@ls) b4137@dups ((lambda (b413a@t) (if b413a@t ((lambda (b413c@x) (b4134@f (cdr b4136@ls) (cons (list (car b4136@ls) b413c@x) b4137@dups))) b413a@t) (b4134@f (cdr b4136@ls) b4137@dups))) (b307b@find-bound=? (car b4136@ls) (cdr b4136@ls) (cdr b4136@ls))))))) b4134@f) b4132@ls '()))) (set! b307f@chi-internal (lambda (b413e@e* b413f@r b4140@mr) ((lambda (b4144@rib) (call-with-values (lambda () (b309f@chi-body* (map (lambda (b4156@x) (b2e2e@add-subst b4144@rib b4156@x)) (b2e40@syntax->list b413e@e*)) b413f@r b4140@mr '() '() '() '() '() b4144@rib '#f)) (lambda (b4158@b4147 b4159@b4149 b415a@b414b b415b@b414d b415c@b414f b415d@b4151 b415e@b4153 b415f@b4155) ((lambda (b4168@_exp* b4169@kwd* b416a@mod** b416b@rhs* b416c@lex* b416d@mr b416e@r b416f@e*) (begin (if (null? b416f@e*) (b3127@syntax-violation '#f '"no expression in body" b416f@e*) (void)) ((lambda (b4178@init*) ((lambda (b417a@rhs*) ((lambda () (b2dac@b2d1e@build-letrec* '#f (reverse b416c@lex*) (reverse b417a@rhs*) (b2da9@b2d18@build-sequence '#f b4178@init*))))) (b3079@chi-rhs* b416b@rhs* b416e@r b416d@mr))) (b3065@chi-expr* (append (apply append (reverse b416a@mod**)) b416f@e*) b416e@r b416d@mr)))) b415f@b4155 b415e@b4153 b415d@b4151 b415c@b414f b415b@b414d b415a@b414b b4159@b4149 b4158@b4147)))) (b2df6@make-empty-rib)))) (set! b3081@parse-module (lambda (b417c@e) ((lambda (b417e@t) ((lambda (b4180@ls/false) (if b4180@ls/false (apply (lambda (b4182@export* b4183@b*) (begin (if (not (for-all b2e42@id? b4182@export*)) (b3127@syntax-violation '#f '"module exports must be identifiers" b417c@e) (void)) (values '#f (list->vector b4182@export*) b4183@b*))) b4180@ls/false) ((lambda (b4186@t) ((lambda (b4188@ls/false) (if b4188@ls/false (apply (lambda (b418a@name b418b@export* b418c@b*) (begin (if (not (b2e42@id? b418a@name)) (b3127@syntax-violation '#f '"module name must be an identifier" b417c@e) (void)) (if (not (for-all b2e42@id? b418b@export*)) (b3127@syntax-violation '#f '"module exports must be identifiers" b417c@e) (void)) (values b418a@name (list->vector b418b@export*) b418c@b*))) b4188@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4186@t))) (b3047@syntax-dispatch b4186@t '(_ any each-any . each-any)))) b417e@t))) (b3047@syntax-dispatch b417e@t '(_ each-any . each-any)))) b417c@e))) (set! b308b@module-interface? (lambda (b4190@x) (and (simple-struct? b4190@x) (eq? (simple-struct-name b4190@x) 'module-interface)))) (set! b308d@module-interface-first-mark (lambda (b4192@x) (simple-struct-ref b4192@x '0))) (set! b308f@set-module-interface-first-mark! (lambda (b4194@x b4195@val) (simple-struct-set! b4194@x '0 b4195@val))) (set! b3091@module-interface-exp-id-vec (lambda (b4198@x) (simple-struct-ref b4198@x '1))) (set! b3093@set-module-interface-exp-id-vec! (lambda (b419a@x b419b@val) (simple-struct-set! b419a@x '1 b419b@val))) (set! b3095@module-interface-exp-lab-vec (lambda (b419e@x) (simple-struct-ref b419e@x '2))) (set! b3097@set-module-interface-exp-lab-vec! (lambda (b41a0@x b41a1@val) (simple-struct-set! b41a0@x '2 b41a1@val))) (set! b3099@dummy '3) (set! b309b@module-interface-exp-id* (lambda (b41a4@iface b41a5@id) ((lambda (b41a9@diff-marks) (begin (set! b41a9@diff-marks (lambda (b41b0@ls b41b1@x) (begin (if (null? b41b0@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (b41b4@a) (if (eq? b41b4@a b41b1@x) '() (cons b41b4@a (b41a9@diff-marks (cdr b41b0@ls) b41b1@x)))) (car b41b0@ls))))) ((lambda (b41aa@diff b41ab@id-vec) (if (null? b41aa@diff) b41ab@id-vec (vector-map (lambda (b41ae@x) (make-simple-struct 'stx '5 (list (b2e10@stx-expr b41ae@x) (append b41aa@diff (b2e14@stx-mark* b41ae@x)) '() '()))) b41ab@id-vec))) (b41a9@diff-marks (b2e14@stx-mark* b41a5@id) (b308d@module-interface-first-mark b41a4@iface)) (b3091@module-interface-exp-id-vec b41a4@iface)))) '#f))) (set! b309d@chi-internal-module (lambda (b41b6@e b41b7@r b41b8@mr b41b9@lex* b41ba@rhs* b41bb@mod** b41bc@kwd*) (call-with-values (lambda () (b3081@parse-module b41b6@e)) (lambda (b41ca@b41c5 b41cb@b41c7 b41cc@b41c9) ((lambda (b41d0@e* b41d1@exp-id* b41d2@name) ((lambda (b41d6@rib) ((lambda (b41d8@e*) ((lambda () (call-with-values (lambda () (b309f@chi-body* b41d8@e* b41b7@r b41b8@mr b41b9@lex* b41ba@rhs* b41bb@mod** b41bc@kwd* '() b41d6@rib '#f)) (lambda (b41ea@b41db b41eb@b41dd b41ec@b41df b41ed@b41e1 b41ee@b41e3 b41ef@b41e5 b41f0@b41e7 b41f1@b41e9) ((lambda (b41fa@_exp* b41fb@kwd* b41fc@mod** b41fd@rhs* b41fe@lex* b41ff@mr b4200@r b4201@e*) ((lambda (b420a@exp-lab* b420b@mod**) (if (not b41d2@name) (values b41fe@lex* b41fd@rhs* b41d1@exp-id* b420a@exp-lab* b4200@r b41ff@mr b420b@mod** b41fb@kwd*) ((lambda (b420e@lab b420f@iface) (values b41fe@lex* b41fd@rhs* (vector b41d2@name) (vector b420e@lab) (cons (cons b420e@lab (cons '$module b420f@iface)) b4200@r) (cons (cons b420e@lab (cons '$module b420f@iface)) b41ff@mr) b420b@mod** b41fb@kwd*)) (b2dce@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (b2e14@stx-mark* b41d2@name)) (vector-map (lambda (b4212@x) (make-simple-struct 'stx '5 (list (b2e10@stx-expr b4212@x) (b2e14@stx-mark* b4212@x) '() '()))) b41d1@exp-id*) b420a@exp-lab*))))) (vector-map (lambda (b4214@x) (or (b2e58@id->label (make-simple-struct 'stx '5 (list (b2e44@id->sym b4214@x) (b2e14@stx-mark* b4214@x) (list b41d6@rib) '()))) (b3127@syntax-violation '#f '"cannot find module export" b4214@x))) b41d1@exp-id*) (cons b4201@e* b41fc@mod**))) b41f1@b41e9 b41f0@b41e7 b41ef@b41e5 b41ee@b41e3 b41ed@b41e1 b41ec@b41df b41eb@b41dd b41ea@b41db)))))) (map (lambda (b4216@x) (b2e2e@add-subst b41d6@rib b4216@x)) (b2e40@syntax->list b41d0@e*)))) (b2df6@make-empty-rib))) b41cc@b41c9 b41cb@b41c7 b41ca@b41c5))))) (set! b309f@chi-body* (lambda (b4218@e* b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b421e@kwd* b421f@exp* b4220@rib b4221@top?) (if (null? b4218@e*) (values b4218@e* b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b421e@kwd* b421f@exp*) ((lambda (b422c@e) (call-with-values (lambda () (b2e64@syntax-type b422c@e b4219@r)) (lambda (b4234@b422f b4235@b4231 b4236@b4233) ((lambda (b423a@kwd b423b@value b423c@type) ((lambda (b4240@kwd*) ((lambda (b4242@t) (if (memv b4242@t '(define)) (call-with-values (lambda () (b2fcb@parse-define b422c@e)) (lambda (b4248@b4245 b4249@b4247) ((lambda (b424c@rhs b424d@id) (begin (if (b2e4e@bound-id-member? b424d@id b4240@kwd*) (b3127@syntax-violation '#f '"cannot redefine keyword" b422c@e) (void)) (call-with-values (lambda () (b2dd2@gen-define-label+loc b424d@id b4220@rib)) (lambda (b4254@b4251 b4255@b4253) ((lambda (b4258@lex b4259@lab) (begin (b2df8@extend-rib! b4220@rib b424d@id b4259@lab) (b309f@chi-body* (cdr b4218@e*) (b2fd9@add-lexical b4259@lab b4258@lex b4219@r) b421a@mr (cons b4258@lex b421b@lex*) (cons b424c@rhs b421c@rhs*) b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?))) b4255@b4253 b4254@b4251))))) b4249@b4247 b4248@b4245))) (if (memv b4242@t '(define-syntax)) (call-with-values (lambda () (b2fcd@parse-define-syntax b422c@e)) (lambda (b4260@b425d b4261@b425f) ((lambda (b4264@rhs b4265@id) (begin (if (b2e4e@bound-id-member? b4265@id b4240@kwd*) (b3127@syntax-violation '#f '"cannot redefine keyword" b422c@e) (void)) ((lambda (b4268@lab b4269@expanded-rhs) (begin (b2df8@extend-rib! b4220@rib b4265@id b4268@lab) ((lambda (b426c@b) (b309f@chi-body* (cdr b4218@e*) (cons (cons b4268@lab b426c@b) b4219@r) (cons (cons b4268@lab b426c@b) b421a@mr) b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?)) (b2e7a@make-eval-transformer b4269@expanded-rhs)))) (b2dd4@gen-define-label b4265@id b4220@rib) (b30a1@expand-transformer b4264@rhs b421a@mr)))) b4261@b425f b4260@b425d))) (if (memv b4242@t '(let-syntax letrec-syntax)) ((lambda (b426e@t) ((lambda (b4270@ls/false) (if (and b4270@ls/false (apply (lambda (b4272@xlhs* b4273@xrhs* b4274@xbody*) (if (not (b2e4a@valid-bound-ids? b4272@xlhs*)) (b3127@syntax-violation '#f '"invalid identifiers" b422c@e) (void))) b4270@ls/false)) (apply (lambda (b4278@xlhs* b4279@xrhs* b427a@xbody*) ((lambda (b427e@xlab*) ((lambda (b4280@xrib) ((lambda (b4282@xb*) ((lambda () (b309f@chi-body* (append (map (lambda (b4284@x) (b2e2e@add-subst b4280@xrib b4284@x)) b427a@xbody*) (cdr b4218@e*)) (append (map cons b427e@xlab* b4282@xb*) b4219@r) (append (map cons b427e@xlab* b4282@xb*) b421a@mr) b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?)))) (map (lambda (b4286@x) (b2e7a@make-eval-transformer (b30a1@expand-transformer (if (eq? b423c@type 'let-syntax) b4286@x (b2e2e@add-subst b4280@xrib b4286@x)) b421a@mr))) b4279@xrhs*))) (b2e02@make-full-rib b4278@xlhs* b427e@xlab*))) (map b2dce@gen-label b4278@xlhs*))) b4270@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b426e@t))) (b3047@syntax-dispatch b426e@t '(_ #(each (any any)) . each-any)))) b422c@e) (if (memv b4242@t '(begin)) ((lambda (b4288@t) ((lambda (b428a@ls/false) (if b428a@ls/false (apply (lambda (b428c@x*) (b309f@chi-body* (append b428c@x* (cdr b4218@e*)) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?)) b428a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4288@t))) (b3047@syntax-dispatch b4288@t '(_ . each-any)))) b422c@e) (if (memv b4242@t '(global-macro global-macro!)) (b309f@chi-body* (cons (b2e2e@add-subst b4220@rib (b3063@chi-global-macro b423b@value b422c@e)) (cdr b4218@e*)) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?) (if (memv b4242@t '(local-macro local-macro!)) (b309f@chi-body* (cons (b2e2e@add-subst b4220@rib (b3061@chi-local-macro b423b@value b422c@e)) (cdr b4218@e*)) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?) (if (memv b4242@t '(macro macro!)) (b309f@chi-body* (cons (b2e2e@add-subst b4220@rib (b305f@chi-macro b423b@value b422c@e)) (cdr b4218@e*)) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?) (if (memv b4242@t '(module)) (call-with-values (lambda () (b309d@chi-internal-module b422c@e b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd*)) (lambda (b429e@b428f b429f@b4291 b42a0@b4293 b42a1@b4295 b42a2@b4297 b42a3@b4299 b42a4@b429b b42a5@b429d) ((lambda (b42ae@kwd* b42af@mod** b42b0@mr b42b1@r b42b2@m-exp-lab* b42b3@m-exp-id* b42b4@rhs* b42b5@lex*) (begin (vector-for-each (lambda (b42be@id b42bf@lab) (b2df8@extend-rib! b4220@rib b42be@id b42bf@lab)) b42b3@m-exp-id* b42b2@m-exp-lab*) (b309f@chi-body* (cdr b4218@e*) b42b1@r b42b0@mr b42b5@lex* b42b4@rhs* b42af@mod** b42ae@kwd* b421f@exp* b4220@rib b4221@top?))) b42a5@b429d b42a4@b429b b42a3@b4299 b42a2@b4297 b42a1@b4295 b42a0@b4293 b429f@b4291 b429e@b428f))) (if (memv b4242@t '(library)) (begin (b3109@library-expander (b2e56@stx->datum b422c@e)) (b309f@chi-body* (cdr b4218@e*) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?)) (if (memv b4242@t '(export)) ((lambda (b42c2@t) ((lambda (b42c4@ls/false) (if b42c4@ls/false (apply (lambda (b42c6@exp-decl*) (b309f@chi-body* (cdr b4218@e*) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* (append b42c6@exp-decl* b421f@exp*) b4220@rib b4221@top?)) b42c4@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b42c2@t))) (b3047@syntax-dispatch b42c2@t '(_ . each-any)))) b422c@e) (if (memv b4242@t '(import)) ((lambda () ((lambda (b42c9@module-import? b42cb@module-import b42cd@library-import) (begin (set! b42c9@module-import? (lambda (b431c@e) ((lambda (b431e@t) ((lambda (b4320@ls/false) (if (and b4320@ls/false (apply (lambda (b4322@id) (b2e42@id? b4322@id)) b4320@ls/false)) (apply (lambda (b4324@id) '#t) b4320@ls/false) ((lambda (b4326@t) ((lambda (b4328@ls/false) (if b4328@ls/false (apply (lambda (b432a@imp*) '#f) b4328@ls/false) ((lambda (b432c@t) ((lambda (b432e@ls/false) (if b432e@ls/false (apply (lambda () (b3127@syntax-violation '#f '"malformed import form" b431c@e)) b432e@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b432c@t))) (b3047@syntax-dispatch b432c@t '_))) b4326@t))) (b3047@syntax-dispatch b4326@t '(_ . each-any)))) b431e@t))) (b3047@syntax-dispatch b431e@t '(_ any)))) b431c@e))) (set! b42cb@module-import (lambda (b42fa@e b42fb@r) ((lambda (b42fe@t) ((lambda (b4300@ls/false) (if (and b4300@ls/false (apply (lambda (b4302@id) (b2e42@id? b4302@id)) b4300@ls/false)) (apply (lambda (b4304@id) (call-with-values (lambda () (b2e64@syntax-type b4304@id b42fb@r)) (lambda (b430c@b4307 b430d@b4309 b430e@b430b) ((lambda (b4312@kwd b4313@value b4314@type) ((lambda (b4318@t) (if (memv b4318@t '($module)) ((lambda (b431a@iface) (values (b309b@module-interface-exp-id* b431a@iface b4304@id) (b3095@module-interface-exp-lab-vec b431a@iface))) b4313@value) (b3127@syntax-violation '#f '"invalid import" b42fa@e))) b4314@type)) b430e@b430b b430d@b4309 b430c@b4307)))) b4300@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b42fe@t))) (b3047@syntax-dispatch b42fe@t '(_ any)))) b42fa@e))) (set! b42cd@library-import (lambda (b42de@e) ((lambda (b42e0@t) ((lambda (b42e2@ls/false) (if b42e2@ls/false (apply (lambda (b42e4@ctxt b42e5@imp*) (call-with-values (lambda () (b30a9@parse-import-spec* (b312d@syntax->datum b42e5@imp*))) (lambda (b42ec@b42e9 b42ed@b42eb) ((lambda (b42f0@subst-labels b42f1@subst-names) (values (vector-map (lambda (b42f4@name) (b2e22@datum->stx b42e4@ctxt b42f4@name)) b42f1@subst-names) b42f0@subst-labels)) b42ed@b42eb b42ec@b42e9)))) b42e2@ls/false) ((lambda (b42f6@t) ((lambda (b42f8@ls/false) (if b42f8@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid import form" b42de@e)) b42f8@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b42f6@t))) (b3047@syntax-dispatch b42f6@t '_))) b42e0@t))) (b3047@syntax-dispatch b42e0@t '(any . each-any)))) b42de@e))) (begin (call-with-values (lambda () (if (b42c9@module-import? b422c@e) (b42cb@module-import b422c@e b4219@r) (b42cd@library-import b422c@e))) (lambda (b42d2@b42cf b42d3@b42d1) ((lambda (b42d6@lab* b42d7@id*) (vector-for-each (lambda (b42da@id b42db@lab) (b2df8@extend-rib! b4220@rib b42da@id b42db@lab)) b42d7@id* b42d6@lab*)) b42d3@b42d1 b42d2@b42cf))) (b309f@chi-body* (cdr b4218@e*) b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?)))) '#f '#f '#f))) (if b4221@top? (b309f@chi-body* (cdr b4218@e*) b4219@r b421a@mr (cons (b2dca@gen-lexical 'dummy) b421b@lex*) (cons (cons 'top-expr b422c@e) b421c@rhs*) b421d@mod** b4240@kwd* b421f@exp* b4220@rib b4221@top?) (values b4218@e* b4219@r b421a@mr b421b@lex* b421c@rhs* b421d@mod** b4240@kwd* b421f@exp*)))))))))))))) b423c@type)) (if (b2e42@id? b423a@kwd) (cons b423a@kwd b421e@kwd*) b421e@kwd*))) b4236@b4233 b4235@b4231 b4234@b422f)))) (car b4218@e*))))) (set! b30a1@expand-transformer (lambda (b4330@expr b4331@r) ((lambda (b4334@rtc) ((lambda (b4336@expanded-rhs) (begin (for-each ((lambda (b4338@mark-visit) (lambda (b433a@x) (begin (b2c6d@b2abb@invoke-library b433a@x) (b4338@mark-visit b433a@x)))) (b30b1@vis-collector)) (b4334@rtc)) b4336@expanded-rhs)) ((lambda (b4344@b433d b4345@b433f b4346@b4341 b4347@b4343) ((lambda (b434c@swap) (dynamic-wind b434c@swap (lambda () (b3069@chi-expr b4330@expr b4331@r b4331@r)) b434c@swap)) (lambda () (begin ((lambda (b434e@t) (begin (b4344@b433d b4346@b4341) (set! b4346@b4341 b434e@t))) (b4344@b433d)) ((lambda (b4350@t) (begin (b4345@b433f b4347@b4343) (set! b4347@b4343 b4350@t))) (b4345@b433f)))))) b30af@inv-collector b30b1@vis-collector b4334@rtc (lambda (b4352@x) (values))))) (b30ad@make-collector)))) (set! b30a3@parse-exports (lambda (b4354@exp*) ((letrec ((b4356@f (lambda (b4358@exp* b4359@int* b435a@ext*) (if (null? b4358@exp*) (begin (if (not (b2e4a@valid-bound-ids? b435a@ext*)) (b3127@syntax-violation 'export '"invalid exports" (b307d@find-dups b435a@ext*)) (void)) (values (map b312d@syntax->datum b435a@ext*) b4359@int*)) ((lambda (b435e@t) ((lambda (b4360@ls/false) (if b4360@ls/false (apply (lambda (b4362@rename b4363@i* b4364@e*) (begin (if (not (and (eq? (b312d@syntax->datum b4362@rename) 'rename) (for-all b2e42@id? b4363@i*) (for-all b2e42@id? b4364@e*))) (b3127@syntax-violation 'export '"invalid export specifier" (car b4358@exp*)) (void)) (b4356@f (cdr b4358@exp*) (append b4363@i* b4359@int*) (append b4364@e* b435a@ext*)))) b4360@ls/false) ((lambda (b4368@t) ((lambda (b436a@ls/false) (if b436a@ls/false (apply (lambda (b436c@ie) (begin (if (not (b2e42@id? b436c@ie)) (b3127@syntax-violation 'export '"invalid export" b436c@ie) (void)) (b4356@f (cdr b4358@exp*) (cons b436c@ie b4359@int*) (cons b436c@ie b435a@ext*)))) b436a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4368@t))) (b3047@syntax-dispatch b4368@t 'any))) b435e@t))) (b3047@syntax-dispatch b435e@t '(any . #(each (any any)))))) (car b4358@exp*)))))) b4356@f) b4354@exp* '() '()))) (set! b30a5@parse-library-name (lambda (b436e@spec) ((lambda (b4371@parse) (begin (set! b4371@parse (lambda (b437e@x) ((lambda (b4380@t) ((lambda (b4382@ls/false) (if (and b4382@ls/false (apply (lambda (b4384@v*) (for-all (lambda (b4386@x) ((lambda (b4388@x) (and (integer? b4388@x) (exact? b4388@x))) (b312d@syntax->datum b4386@x))) b4384@v*)) b4382@ls/false)) (apply (lambda (b438a@v*) (values '() (map b312d@syntax->datum b438a@v*))) b4382@ls/false) ((lambda (b438c@t) ((lambda (b438e@ls/false) (if (and b438e@ls/false (apply (lambda (b4390@x b4391@rest) (symbol? (b312d@syntax->datum b4390@x))) b438e@ls/false)) (apply (lambda (b4394@x b4395@rest) (call-with-values (lambda () (b4371@parse b4395@rest)) (lambda (b439c@b4399 b439d@b439b) ((lambda (b43a0@v* b43a1@x*) (values (cons (b312d@syntax->datum b4394@x) b43a1@x*) b43a0@v*)) b439d@b439b b439c@b4399)))) b438e@ls/false) ((lambda (b43a4@t) ((lambda (b43a6@ls/false) (if b43a6@ls/false (apply (lambda () (values '() '())) b43a6@ls/false) ((lambda (b43a8@t) ((lambda (b43aa@ls/false) (if b43aa@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid library name" b436e@spec)) b43aa@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b43a8@t))) (b3047@syntax-dispatch b43a8@t '_))) b43a4@t))) (b3047@syntax-dispatch b43a4@t '()))) b438c@t))) (b3047@syntax-dispatch b438c@t '(any . any)))) b4380@t))) (b3047@syntax-dispatch b4380@t '(each-any)))) b437e@x))) (call-with-values (lambda () (b4371@parse b436e@spec)) (lambda (b4376@b4373 b4377@b4375) ((lambda (b437a@ver* b437b@name*) (begin (if (null? b437b@name*) (b3127@syntax-violation '#f '"empty library name" b436e@spec) (void)) (values b437b@name* b437a@ver*))) b4377@b4375 b4376@b4373))))) '#f))) (set! b30a7@parse-library (lambda (b43ac@e) ((lambda (b43ae@t) ((lambda (b43b0@ls/false) (if (and b43b0@ls/false (apply (lambda (b43b2@library b43b3@name* b43b4@export b43b5@exp* b43b6@import b43b7@imp* b43b8@b*) (and (eq? (b312d@syntax->datum b43b4@export) 'export) (eq? (b312d@syntax->datum b43b6@import) 'import) (eq? (b312d@syntax->datum b43b2@library) 'library))) b43b0@ls/false)) (apply (lambda (b43c0@library b43c1@name* b43c2@export b43c3@exp* b43c4@import b43c5@imp* b43c6@b*) (values b43c1@name* b43c3@exp* b43c5@imp* b43c6@b*)) b43b0@ls/false) ((lambda (b43ce@t) ((lambda (b43d0@ls/false) (if b43d0@ls/false (apply (lambda () (b3127@syntax-violation '#f '"malformed library" b43ac@e)) b43d0@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b43ce@t))) (b3047@syntax-dispatch b43ce@t '_))) b43ae@t))) (b3047@syntax-dispatch b43ae@t '(any each-any (any . each-any) (any . each-any) . each-any)))) b43ac@e))) (set! b30a9@parse-import-spec* ((lambda () ((lambda (b43d3@idsyn? b43d5@dup-error b43d7@merge-substs b43d9@exclude* b43db@find* b43dd@rem* b43df@remove-dups b43e1@parse-library-name b43e3@import-library b43e5@get-import b43e7@add-imports!) (begin (set! b43d3@idsyn? (lambda (b45dc@x) (symbol? (b312d@syntax->datum b45dc@x)))) (set! b43d5@dup-error (lambda (b45da@name) (b3127@syntax-violation 'import '"two imports with different bindings" b45da@name))) (set! b43d7@merge-substs (lambda (b45c8@s b45c9@subst) ((lambda (b45cd@insert-to-subst) (begin (set! b45cd@insert-to-subst (lambda (b45ce@a b45cf@subst) ((lambda (b45d2@name b45d3@label) ((lambda (b45d6@t) (if b45d6@t ((lambda (b45d8@x) (if (eq? (cdr b45d8@x) b45d3@label) b45cf@subst (b43d5@dup-error b45d2@name))) b45d6@t) (cons b45ce@a b45cf@subst))) (assq b45d2@name b45cf@subst))) (car b45ce@a) (cdr b45ce@a)))) (if (null? b45c8@s) b45c9@subst (b45cd@insert-to-subst (car b45c8@s) (b43d7@merge-substs (cdr b45c8@s) b45c9@subst))))) '#f))) (set! b43d9@exclude* (lambda (b4598@sym* b4599@subst) ((lambda (b459d@exclude) (begin (set! b459d@exclude (lambda (b45b6@sym b45b7@subst) (if (null? b45b7@subst) (b3127@syntax-violation 'import '"cannot rename unbound identifier" b45b6@sym) (if (eq? b45b6@sym (caar b45b7@subst)) (values (cdar b45b7@subst) (cdr b45b7@subst)) ((lambda (b45ba@a) (call-with-values (lambda () (b459d@exclude b45b6@sym (cdr b45b7@subst))) (lambda (b45c0@b45bd b45c1@b45bf) ((lambda (b45c4@subst b45c5@old) (values b45c5@old (cons b45ba@a b45c4@subst))) b45c1@b45bf b45c0@b45bd)))) (car b45b7@subst)))))) (if (null? b4598@sym*) (values '() b4599@subst) (call-with-values (lambda () (b459d@exclude (car b4598@sym*) b4599@subst)) (lambda (b45a2@b459f b45a3@b45a1) ((lambda (b45a6@subst b45a7@old) (call-with-values (lambda () (b43d9@exclude* (cdr b4598@sym*) b45a6@subst)) (lambda (b45ae@b45ab b45af@b45ad) ((lambda (b45b2@subst b45b3@old*) (values (cons b45a7@old b45b3@old*) b45b2@subst)) b45af@b45ad b45ae@b45ab)))) b45a3@b45a1 b45a2@b459f)))))) '#f))) (set! b43db@find* (lambda (b4590@sym* b4591@subst) (map (lambda (b4594@x) ((lambda (b4596@t) (if b4596@t (cdr b4596@t) (b3127@syntax-violation 'import '"cannot find identifier" b4594@x))) (assq b4594@x b4591@subst))) b4590@sym*))) (set! b43dd@rem* (lambda (b4588@sym* b4589@subst) ((letrec ((b458c@f (lambda (b458e@subst) (if (null? b458e@subst) '() (if (memq (caar b458e@subst) b4588@sym*) (b458c@f (cdr b458e@subst)) (cons (car b458e@subst) (b458c@f (cdr b458e@subst)))))))) b458c@f) b4589@subst))) (set! b43df@remove-dups (lambda (b4586@ls) (if (null? b4586@ls) '() (if (memq (car b4586@ls) (cdr b4586@ls)) (b43df@remove-dups (cdr b4586@ls)) (cons (car b4586@ls) (b43df@remove-dups (cdr b4586@ls))))))) (set! b43e1@parse-library-name (lambda (b449e@spec) ((lambda (b44a1@subversion? b44a3@subversion-pred b44a5@version-pred) (begin (set! b44a1@subversion? (lambda (b4582@x) ((lambda (b4584@x) (and (integer? b4584@x) (exact? b4584@x) (>= b4584@x '0))) (b312d@syntax->datum b4582@x)))) (set! b44a3@subversion-pred (lambda (b4522@x*) ((lambda (b4524@t) ((lambda (b4526@ls/false) (if (and b4526@ls/false (apply (lambda (b4528@n) (b44a1@subversion? b4528@n)) b4526@ls/false)) (apply (lambda (b452a@n) (lambda (b452c@x) (= b452c@x (b312d@syntax->datum b452a@n)))) b4526@ls/false) ((lambda (b452e@t) ((lambda (b4530@ls/false) (if (and b4530@ls/false (apply (lambda (b4532@p? b4533@sub*) (eq? (b312d@syntax->datum b4532@p?) 'and)) b4530@ls/false)) (apply (lambda (b4536@p? b4537@sub*) ((lambda (b453a@p*) (lambda (b453c@x) (for-all (lambda (b453e@p) (b453e@p b453c@x)) b453a@p*))) (map b44a3@subversion-pred b4537@sub*))) b4530@ls/false) ((lambda (b4540@t) ((lambda (b4542@ls/false) (if (and b4542@ls/false (apply (lambda (b4544@p? b4545@sub*) (eq? (b312d@syntax->datum b4544@p?) 'or)) b4542@ls/false)) (apply (lambda (b4548@p? b4549@sub*) ((lambda (b454c@p*) (lambda (b454e@x) (exists (lambda (b4550@p) (b4550@p b454e@x)) b454c@p*))) (map b44a3@subversion-pred b4549@sub*))) b4542@ls/false) ((lambda (b4552@t) ((lambda (b4554@ls/false) (if (and b4554@ls/false (apply (lambda (b4556@p? b4557@sub) (eq? (b312d@syntax->datum b4556@p?) 'not)) b4554@ls/false)) (apply (lambda (b455a@p? b455b@sub) ((lambda (b455e@p) (lambda (b4560@x) (not (b455e@p b4560@x)))) (b44a3@subversion-pred b455b@sub))) b4554@ls/false) ((lambda (b4562@t) ((lambda (b4564@ls/false) (if (and b4564@ls/false (apply (lambda (b4566@p? b4567@n) (and (eq? (b312d@syntax->datum b4566@p?) '<=) (b44a1@subversion? b4567@n))) b4564@ls/false)) (apply (lambda (b456a@p? b456b@n) (lambda (b456e@x) (<= b456e@x (b312d@syntax->datum b456b@n)))) b4564@ls/false) ((lambda (b4570@t) ((lambda (b4572@ls/false) (if (and b4572@ls/false (apply (lambda (b4574@p? b4575@n) (and (eq? (b312d@syntax->datum b4574@p?) '>=) (b44a1@subversion? b4575@n))) b4572@ls/false)) (apply (lambda (b4578@p? b4579@n) (lambda (b457c@x) (>= b457c@x (b312d@syntax->datum b4579@n)))) b4572@ls/false) ((lambda (b457e@t) ((lambda (b4580@ls/false) (if b4580@ls/false (apply (lambda () (b3127@syntax-violation 'import '"invalid sub-version spec" b449e@spec b4522@x*)) b4580@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b457e@t))) (b3047@syntax-dispatch b457e@t '_))) b4570@t))) (b3047@syntax-dispatch b4570@t '(any any)))) b4562@t))) (b3047@syntax-dispatch b4562@t '(any any)))) b4552@t))) (b3047@syntax-dispatch b4552@t '(any any)))) b4540@t))) (b3047@syntax-dispatch b4540@t '(any . each-any)))) b452e@t))) (b3047@syntax-dispatch b452e@t '(any . each-any)))) b4524@t))) (b3047@syntax-dispatch b4524@t 'any))) b4522@x*))) (set! b44a5@version-pred (lambda (b44d2@x*) ((lambda (b44d4@t) ((lambda (b44d6@ls/false) (if b44d6@ls/false (apply (lambda () (lambda (b44d8@x) '#t)) b44d6@ls/false) ((lambda (b44da@t) ((lambda (b44dc@ls/false) (if (and b44dc@ls/false (apply (lambda (b44de@c b44df@ver*) (eq? (b312d@syntax->datum b44de@c) 'and)) b44dc@ls/false)) (apply (lambda (b44e2@c b44e3@ver*) ((lambda (b44e6@p*) (lambda (b44e8@x) (for-all (lambda (b44ea@p) (b44ea@p b44e8@x)) b44e6@p*))) (map b44a5@version-pred b44e3@ver*))) b44dc@ls/false) ((lambda (b44ec@t) ((lambda (b44ee@ls/false) (if (and b44ee@ls/false (apply (lambda (b44f0@c b44f1@ver*) (eq? (b312d@syntax->datum b44f0@c) 'or)) b44ee@ls/false)) (apply (lambda (b44f4@c b44f5@ver*) ((lambda (b44f8@p*) (lambda (b44fa@x) (exists (lambda (b44fc@p) (b44fc@p b44fa@x)) b44f8@p*))) (map b44a5@version-pred b44f5@ver*))) b44ee@ls/false) ((lambda (b44fe@t) ((lambda (b4500@ls/false) (if (and b4500@ls/false (apply (lambda (b4502@c b4503@ver) (eq? (b312d@syntax->datum b4502@c) 'not)) b4500@ls/false)) (apply (lambda (b4506@c b4507@ver) ((lambda (b450a@p) (lambda (b450c@x) (not (b450a@p b450c@x)))) (b44a5@version-pred b4507@ver))) b4500@ls/false) ((lambda (b450e@t) ((lambda (b4510@ls/false) (if b4510@ls/false (apply (lambda (b4512@sub*) ((lambda (b4514@p*) (lambda (b4516@x) ((letrec ((b4518@f (lambda (b451a@p* b451b@x) (if (null? b451a@p*) '#t (if (null? b451b@x) '#f (and ((car b451a@p*) (car b451b@x)) (b4518@f (cdr b451a@p*) (cdr b451b@x)))))))) b4518@f) b4514@p* b4516@x))) (map b44a3@subversion-pred b4512@sub*))) b4510@ls/false) ((lambda (b451e@t) ((lambda (b4520@ls/false) (if b4520@ls/false (apply (lambda () (b3127@syntax-violation 'import '"invalid version spec" b449e@spec b44d2@x*)) b4520@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b451e@t))) (b3047@syntax-dispatch b451e@t '_))) b450e@t))) (b3047@syntax-dispatch b450e@t 'each-any))) b44fe@t))) (b3047@syntax-dispatch b44fe@t '(any any)))) b44ec@t))) (b3047@syntax-dispatch b44ec@t '(any . each-any)))) b44da@t))) (b3047@syntax-dispatch b44da@t '(any . each-any)))) b44d4@t))) (b3047@syntax-dispatch b44d4@t '()))) b44d2@x*))) ((letrec ((b44a6@f (lambda (b44a8@x) ((lambda (b44aa@t) ((lambda (b44ac@ls/false) (if b44ac@ls/false (apply (lambda (b44ae@version-spec*) (values '() (b44a5@version-pred b44ae@version-spec*))) b44ac@ls/false) ((lambda (b44b0@t) ((lambda (b44b2@ls/false) (if (and b44b2@ls/false (apply (lambda (b44b4@x b44b5@x*) (b43d3@idsyn? b44b4@x)) b44b2@ls/false)) (apply (lambda (b44b8@x b44b9@x*) (call-with-values (lambda () (b44a6@f b44b9@x*)) (lambda (b44c0@b44bd b44c1@b44bf) ((lambda (b44c4@pred b44c5@name) (values (cons (b312d@syntax->datum b44b8@x) b44c5@name) b44c4@pred)) b44c1@b44bf b44c0@b44bd)))) b44b2@ls/false) ((lambda (b44c8@t) ((lambda (b44ca@ls/false) (if b44ca@ls/false (apply (lambda () (values '() (lambda (b44cc@x) '#t))) b44ca@ls/false) ((lambda (b44ce@t) ((lambda (b44d0@ls/false) (if b44d0@ls/false (apply (lambda () (b3127@syntax-violation '#f '"invalid import spec" b449e@spec)) b44d0@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b44ce@t))) (b3047@syntax-dispatch b44ce@t '_))) b44c8@t))) (b3047@syntax-dispatch b44c8@t '()))) b44b0@t))) (b3047@syntax-dispatch b44b0@t '(any . any)))) b44aa@t))) (b3047@syntax-dispatch b44aa@t '(each-any)))) b44a8@x)))) b44a6@f) b449e@spec))) '#f '#f '#f))) (set! b43e3@import-library (lambda (b448e@spec*) (call-with-values (lambda () (b43e1@parse-library-name b448e@spec*)) (lambda (b4494@b4491 b4495@b4493) ((lambda (b4498@pred b4499@name) (begin (if (null? b4499@name) (b3127@syntax-violation 'import '"empty library name" b448e@spec*) (void)) ((lambda (b449c@lib) (begin (if (not b449c@lib) (b3127@syntax-violation 'import '"cannot find library with required name" b4499@name) (void)) (if (not (b4498@pred (b2c40@b2a61@library-version b449c@lib))) (b3127@syntax-violation 'import '"library does not satisfy version specification" b448e@spec* b449c@lib) (void)) ((b30b3@imp-collector) b449c@lib) (b2c48@b2a71@library-subst b449c@lib))) (b2c66@b2aad@find-library-by-name b4499@name)))) b4495@b4493 b4494@b4491))))) (set! b43e5@get-import (lambda (b4400@spec) ((lambda (b4402@t) ((lambda (b4404@ls/false) (if (and b4404@ls/false (apply (lambda (b4406@x b4407@x*) (not (memq (b312d@syntax->datum b4406@x) '(for rename except only prefix library)))) b4404@ls/false)) (apply (lambda (b440a@x b440b@x*) (b43e3@import-library (cons b440a@x b440b@x*))) b4404@ls/false) ((lambda (b440e@t) ((lambda (b4410@ls/false) (if (and b4410@ls/false (apply (lambda (b4412@rename b4413@isp b4414@old* b4415@new*) (and (eq? (b312d@syntax->datum b4412@rename) 'rename) (for-all b43d3@idsyn? b4414@old*) (for-all b43d3@idsyn? b4415@new*))) b4410@ls/false)) (apply (lambda (b441a@rename b441b@isp b441c@old* b441d@new*) ((lambda (b4422@subst b4423@old* b4424@new*) ((lambda (b4428@old-label*) ((lambda (b442a@subst) (b43d7@merge-substs (map cons b4424@new* b4428@old-label*) b442a@subst)) (b43dd@rem* b4423@old* b4422@subst))) (b43db@find* b4423@old* b4422@subst))) (b43e5@get-import b441b@isp) (map b312d@syntax->datum b441c@old*) (map b312d@syntax->datum b441d@new*))) b4410@ls/false) ((lambda (b442c@t) ((lambda (b442e@ls/false) (if (and b442e@ls/false (apply (lambda (b4430@except b4431@isp b4432@sym*) (and (eq? (b312d@syntax->datum b4430@except) 'except) (for-all b43d3@idsyn? b4432@sym*))) b442e@ls/false)) (apply (lambda (b4436@except b4437@isp b4438@sym*) ((lambda (b443c@subst) (b43dd@rem* (map b312d@syntax->datum b4438@sym*) b443c@subst)) (b43e5@get-import b4437@isp))) b442e@ls/false) ((lambda (b443e@t) ((lambda (b4440@ls/false) (if (and b4440@ls/false (apply (lambda (b4442@only b4443@isp b4444@sym*) (and (eq? (b312d@syntax->datum b4442@only) 'only) (for-all b43d3@idsyn? b4444@sym*))) b4440@ls/false)) (apply (lambda (b4448@only b4449@isp b444a@sym*) ((lambda (b444e@subst b444f@sym*) ((lambda (b4452@sym*) ((lambda (b4454@lab*) (map cons b4452@sym* b4454@lab*)) (b43db@find* b4452@sym* b444e@subst))) (b43df@remove-dups b444f@sym*))) (b43e5@get-import b4449@isp) (map b312d@syntax->datum b444a@sym*))) b4440@ls/false) ((lambda (b4456@t) ((lambda (b4458@ls/false) (if (and b4458@ls/false (apply (lambda (b445a@prefix b445b@isp b445c@p) (and (eq? (b312d@syntax->datum b445a@prefix) 'prefix) (b43d3@idsyn? b445c@p))) b4458@ls/false)) (apply (lambda (b4460@prefix b4461@isp b4462@p) ((lambda (b4466@subst b4467@prefix) (map (lambda (b446a@x) (cons (string->symbol (string-append b4467@prefix (symbol->string (car b446a@x)))) (cdr b446a@x))) b4466@subst)) (b43e5@get-import b4461@isp) (symbol->string (b312d@syntax->datum b4462@p)))) b4458@ls/false) ((lambda (b446c@t) ((lambda (b446e@ls/false) (if (and b446e@ls/false (apply (lambda (b4470@library b4471@spec*) (eq? (b312d@syntax->datum b4470@library) 'library)) b446e@ls/false)) (apply (lambda (b4474@library b4475@spec*) (b43e3@import-library b4475@spec*)) b446e@ls/false) ((lambda (b4478@t) ((lambda (b447a@ls/false) (if (and b447a@ls/false (apply (lambda (b447c@for b447d@isp b447e@rest) (eq? (b312d@syntax->datum b447c@for) 'for)) b447a@ls/false)) (apply (lambda (b4482@for b4483@isp b4484@rest) (b43e5@get-import b4483@isp)) b447a@ls/false) ((lambda (b4488@t) ((lambda (b448a@ls/false) (if b448a@ls/false (apply (lambda (b448c@spec) (b3127@syntax-violation 'import '"invalid import spec" b448c@spec)) b448a@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4488@t))) (b3047@syntax-dispatch b4488@t 'any))) b4478@t))) (b3047@syntax-dispatch b4478@t '(any any . any)))) b446c@t))) (b3047@syntax-dispatch b446c@t '(any each-any)))) b4456@t))) (b3047@syntax-dispatch b4456@t '(any any any)))) b443e@t))) (b3047@syntax-dispatch b443e@t '(any any . each-any)))) b442c@t))) (b3047@syntax-dispatch b442c@t '(any any . each-any)))) b440e@t))) (b3047@syntax-dispatch b440e@t '(any any . #(each (any any)))))) b4402@t))) (b3047@syntax-dispatch b4402@t '(any . each-any)))) b4400@spec))) (set! b43e7@add-imports! (lambda (b43f0@imp b43f1@h) ((lambda (b43f4@subst) (for-each (lambda (b43f6@x) ((lambda (b43f8@name b43f9@label) ((lambda (b43fc@t) (if b43fc@t ((lambda (b43fe@l) (if (not (eq? b43fe@l b43f9@label)) (b43d5@dup-error b43f8@name) (void))) b43fc@t) (hashtable-set! b43f1@h b43f8@name b43f9@label))) (hashtable-ref b43f1@h b43f8@name '#f))) (car b43f6@x) (cdr b43f6@x))) b43f4@subst)) (b43e5@get-import b43f0@imp)))) (lambda (b43e8@imp*) ((letrec ((b43ea@f (lambda (b43ec@imp* b43ed@h) (if (null? b43ec@imp*) (hashtable-entries b43ed@h) (begin (b43e7@add-imports! (car b43ec@imp*) b43ed@h) (b43ea@f (cdr b43ec@imp*) b43ed@h)))))) b43ea@f) b43e8@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! b30ab@make-top-rib (lambda (b45de@names b45df@labels) ((lambda (b45e2@rib) (begin (vector-for-each (lambda (b45e4@name b45e5@label) (begin (if (not (symbol? b45e4@name)) (error 'make-top-rib '"BUG: not a symbol" b45e4@name) (void)) (b2dfa@extend-rib/nc! b45e2@rib (make-simple-struct 'stx '5 (list b45e4@name b2dc6@top-mark* '() '())) b45e5@label))) b45de@names b45df@labels) b45e2@rib)) (b2df6@make-empty-rib)))) (set! b30ad@make-collector (lambda () ((lambda (b45e8@ls) (lambda b45ec ((lambda (b45ed) (if (= b45ed '0) (apply (lambda () b45e8@ls) b45ec) (if (= b45ed '1) (apply (lambda (b45ea@x) (set! b45e8@ls (b2dbf@set-cons b45ea@x b45e8@ls))) b45ec) (error 'apply '"invalid arg count")))) (length b45ec)))) '()))) (set! b30af@inv-collector (b29a1@b2880@make-parameter (lambda b45ee@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (b45f0@x) (begin (if (not (procedure? b45f0@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" b45f0@x) (void)) b45f0@x)))) (set! b30b1@vis-collector (b29a1@b2880@make-parameter (lambda b45f2@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (b45f4@x) (begin (if (not (procedure? b45f4@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" b45f4@x) (void)) b45f4@x)))) (set! b30b3@imp-collector (b29a1@b2880@make-parameter (lambda b45f6@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (b45f8@x) (begin (if (not (procedure? b45f8@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" b45f8@x) (void)) b45f8@x)))) (set! b30b5@chi-library-internal (lambda (b45fa@e* b45fb@rib b45fc@top?) (call-with-values (lambda () (b309f@chi-body* b45fa@e* '() '() '() '() '() '() '() b45fb@rib b45fc@top?)) (lambda (b4610@b4601 b4611@b4603 b4612@b4605 b4613@b4607 b4614@b4609 b4615@b460b b4616@b460d b4617@b460f) ((lambda (b4620@exp* b4621@_kwd* b4622@mod** b4623@rhs* b4624@lex* b4625@mr b4626@r b4627@e*) (values (append (apply append (reverse b4622@mod**)) b4627@e*) b4626@r b4625@mr (reverse b4624@lex*) (reverse b4623@rhs*) b4620@exp*)) b4617@b460f b4616@b460d b4615@b460b b4614@b4609 b4613@b4607 b4612@b4605 b4611@b4603 b4610@b4601))))) (set! b30b7@chi-interaction-expr (lambda (b4630@e b4631@rib b4632@r) (call-with-values (lambda () (b309f@chi-body* (list b4630@e) b4632@r b4632@r '() '() '() '() '() b4631@rib '#t)) (lambda (b4646@b4637 b4647@b4639 b4648@b463b b4649@b463d b464a@b463f b464b@b4641 b464c@b4643 b464d@b4645) ((lambda (b4656@_exp* b4657@_kwd* b4658@mod** b4659@rhs* b465a@lex* b465b@mr b465c@r b465d@e*) ((lambda (b4666@e*) ((lambda (b4668@e) (values b4668@e b465c@r)) (if (null? b4666@e*) (b2daa@b2d1a@build-void) (if (null? (cdr b4666@e*)) (car b4666@e*) (b2da9@b2d18@build-sequence '#f b4666@e*))))) (b3077@expand-interaction-rhs*/init* (reverse b465a@lex*) (reverse b4659@rhs*) (append (apply append (reverse b4658@mod**)) b465d@e*) b465c@r b465b@mr))) b464d@b4645 b464c@b4643 b464b@b4641 b464a@b463f b4649@b463d b4648@b463b b4647@b4639 b4646@b4637))))) (set! b30b9@library-body-expander (lambda (b466a@name b466b@main-exp* b466c@imp* b466d@b* b466e@top?) ((lambda (b4675@itc) (begin (set! b4675@itc (b30ad@make-collector)) ((lambda (b467e@b4677 b467f@b4679 b4680@b467b b4681@b467d) ((lambda (b4686@swap) (dynamic-wind b4686@swap (lambda () (call-with-values (lambda () (b30a9@parse-import-spec* b466c@imp*)) (lambda (b468c@b4689 b468d@b468b) ((lambda (b4690@subst-labels b4691@subst-names) ((lambda (b4694@rib) ((lambda (b4697@wrap) (begin (set! b4697@wrap (lambda (b4712@x) (make-simple-struct 'stx '5 (list b4712@x b2dc6@top-mark* (list b4694@rib) '())))) ((lambda (b4698@b* b4699@main-exp* b469a@rtc b469b@vtc) ((lambda (b46a8@b46a1 b46a9@b46a3 b46aa@b46a5 b46ab@b46a7) ((lambda (b46b0@swap) (dynamic-wind b46b0@swap (lambda () (call-with-values (lambda () (b30b5@chi-library-internal b4698@b* b4694@rib b466e@top?)) (lambda (b46be@b46b3 b46bf@b46b5 b46c0@b46b7 b46c1@b46b9 b46c2@b46bb b46c3@b46bd) ((lambda (b46ca@internal-exp* b46cb@rhs* b46cc@lex* b46cd@mr b46ce@r b46cf@init*) (call-with-values (lambda () (b30a3@parse-exports (append b4699@main-exp* b46ca@internal-exp*))) (lambda (b46da@b46d7 b46db@b46d9) ((lambda (b46de@exp-id* b46df@exp-name*) (begin (b2dfe@seal-rib! b4694@rib) ((lambda (b46e2@init*) ((lambda (b46e4@rhs*) ((lambda () (begin (b2e00@unseal-rib! b4694@rib) ((lambda (b46e6@loc* b46e7@export-subst) ((lambda (b46eb@errstr) (begin (set! b46eb@errstr '"attempt to export mutated variable") (call-with-values (lambda () (b3113@make-export-env/macros b46cc@lex* b46e6@loc* b46ce@r)) (lambda (b46f2@b46ed b46f3@b46ef b46f4@b46f1) ((lambda (b46f8@macro* b46f9@global* b46fa@export-env) (begin (for-each (lambda (b46fe@s) ((lambda (b4700@name b4701@label) ((lambda (b4704@p) (if b4704@p ((lambda (b4706@b) ((lambda (b4708@type) (if (eq? b4708@type 'mutable) (b3127@syntax-violation 'export b46eb@errstr b4700@name) (void))) (car b4706@b))) (cdr b4704@p)) (void))) (assq b4701@label b46fa@export-env))) (car b46fe@s) (cdr b46fe@s))) b46e7@export-subst) ((lambda (b470a@invoke-body b470b@invoke-definitions) (values (b4675@itc) (b469a@rtc) (b469b@vtc) (b2da9@b2d18@build-sequence '#f (append b470b@invoke-definitions (list b470a@invoke-body))) b46f8@macro* b46e7@export-subst b46fa@export-env)) (b2dac@b2d1e@build-letrec* '#f b46cc@lex* b46e4@rhs* (b310f@build-exports b46f9@global* b46e2@init*)) (map b2da5@b2c75@build-global-define (map cdr b46f9@global*))))) b46f4@b46f1 b46f3@b46ef b46f2@b46ed))))) '#f)) (map b2dcc@gen-global b46cc@lex*) (b3111@make-export-subst b46df@exp-name* b46de@exp-id*)))))) (b3079@chi-rhs* b46cb@rhs* b46ce@r b46cd@mr))) (b3065@chi-expr* b46cf@init* b46ce@r b46cd@mr)))) b46db@b46d9 b46da@b46d7)))) b46c3@b46bd b46c2@b46bb b46c1@b46b9 b46c0@b46b7 b46bf@b46b5 b46be@b46b3)))) b46b0@swap)) (lambda () (begin ((lambda (b470e@t) (begin (b46a8@b46a1 b46aa@b46a5) (set! b46aa@b46a5 b470e@t))) (b46a8@b46a1)) ((lambda (b4710@t) (begin (b46a9@b46a3 b46ab@b46a7) (set! b46ab@b46a7 b4710@t))) (b46a9@b46a3)))))) b30af@inv-collector b30b1@vis-collector b469a@rtc b469b@vtc)) (map b4697@wrap b466d@b*) (map b4697@wrap b466b@main-exp*) (b30ad@make-collector) (b30ad@make-collector)))) '#f)) (b30ab@make-top-rib b4691@subst-names b4690@subst-labels))) b468d@b468b b468c@b4689)))) b4686@swap)) (lambda () (begin ((lambda (b4714@t) (begin (b467e@b4677 b4680@b467b) (set! b4680@b467b b4714@t))) (b467e@b4677)) ((lambda (b4716@t) (begin (b467f@b4679 b4681@b467d) (set! b4681@b467d b4716@t))) (b467f@b4679)))))) b30b3@imp-collector b3135@top-level-context b4675@itc '#f))) '#f))) (set! b30bb@core-library-expander (lambda (b4718@e b4719@verify-name) (call-with-values (lambda () (b30a7@parse-library b4718@e)) (lambda (b4724@b471d b4725@b471f b4726@b4721 b4727@b4723) ((lambda (b472c@b* b472d@imp* b472e@exp* b472f@name*) (call-with-values (lambda () (b30a5@parse-library-name b472f@name*)) (lambda (b4738@b4735 b4739@b4737) ((lambda (b473c@ver b473d@name) (begin (b4719@verify-name b473d@name) (call-with-values (lambda () (b30b9@library-body-expander b473d@name b472e@exp* b472d@imp* b472c@b* '#f)) (lambda (b474e@b4741 b474f@b4743 b4750@b4745 b4751@b4747 b4752@b4749 b4753@b474b b4754@b474d) ((lambda (b475c@export-env b475d@export-subst b475e@visit-code b475f@invoke-code b4760@visit-req* b4761@invoke-req* b4762@imp*) (values b473d@name b473c@ver b4762@imp* b4761@invoke-req* b4760@visit-req* b475f@invoke-code b475e@visit-code b475d@export-subst b475c@export-env)) b4754@b474d b4753@b474b b4752@b4749 b4751@b4747 b4750@b4745 b474f@b4743 b474e@b4741))))) b4739@b4737 b4738@b4735)))) b4727@b4723 b4726@b4721 b4725@b471f b4724@b471d))))) (set! b30bd@parse-top-level-program (lambda (b476a@e*) ((lambda (b476c@t) ((lambda (b476e@ls/false) (if (and b476e@ls/false (apply (lambda (b4770@import b4771@imp* b4772@b*) (eq? (b312d@syntax->datum b4770@import) 'import)) b476e@ls/false)) (apply (lambda (b4776@import b4777@imp* b4778@b*) (values b4777@imp* b4778@b*)) b476e@ls/false) ((lambda (b477c@t) ((lambda (b477e@ls/false) (if (and b477e@ls/false (apply (lambda (b4780@import b4781@x b4782@y) (eq? (b312d@syntax->datum b4780@import) 'import)) b477e@ls/false)) (apply (lambda (b4786@import b4787@x b4788@y) (b3127@syntax-violation 'expander '"invalid syntax of top-level program" (b2e3c@syntax-car b476a@e*))) b477e@ls/false) ((lambda (b478c@t) ((lambda (b478e@ls/false) (if b478e@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) b478e@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b478c@t))) (b3047@syntax-dispatch b478c@t '_))) b477c@t))) (b3047@syntax-dispatch b477c@t '((any . any) . any)))) b476c@t))) (b3047@syntax-dispatch b476c@t '((any . each-any) . each-any)))) b476a@e*))) (set! b30bf@top-level-expander (lambda (b4790@e*) (call-with-values (lambda () (b30bd@parse-top-level-program b4790@e*)) (lambda (b4796@b4793 b4797@b4795) ((lambda (b479a@b* b479b@imp*) (call-with-values (lambda () (b30b9@library-body-expander '() '() b479b@imp* b479a@b* '#t)) (lambda (b47ac@b479f b47ad@b47a1 b47ae@b47a3 b47af@b47a5 b47b0@b47a7 b47b1@b47a9 b47b2@b47ab) ((lambda (b47ba@export-env b47bb@export-subst b47bc@visit-code b47bd@invoke-code b47be@visit-req* b47bf@invoke-req* b47c0@imp*) (values b47bf@invoke-req* b47bd@invoke-code)) b47b2@b47ab b47b1@b47a9 b47b0@b47a7 b47af@b47a5 b47ae@b47a3 b47ad@b47a1 b47ac@b479f)))) b4797@b4795 b4796@b4793))))) (set! b30c1@rp (b299e@b287a@make-record-printer 'env (lambda (b47c8@x b47c9@p b47ca@wr) (display '"#<environment>" b47c9@p)))) (set! b30cb@env? (lambda (b47ce@x) (and (simple-struct? b47ce@x) (eq? (simple-struct-name b47ce@x) 'env)))) (set! b30cd@env-names (lambda (b47d0@x) (simple-struct-ref b47d0@x '0))) (set! b30cf@set-env-names! (lambda (b47d2@x b47d3@val) (simple-struct-set! b47d2@x '0 b47d3@val))) (set! b30d1@env-labels (lambda (b47d6@x) (simple-struct-ref b47d6@x '1))) (set! b30d3@set-env-labels! (lambda (b47d8@x b47d9@val) (simple-struct-set! b47d8@x '1 b47d9@val))) (set! b30d5@env-itc (lambda (b47dc@x) (simple-struct-ref b47dc@x '2))) (set! b30d7@set-env-itc! (lambda (b47de@x b47df@val) (simple-struct-set! b47de@x '2 b47df@val))) (set! b30d9@dummy '3) (set! b30db@rp (b299e@b287a@make-record-printer 'interaction-env (lambda (b47e2@x b47e3@p b47e4@wr) (display '"#<environment>" b47e3@p)))) (set! b30e5@interaction-env? (lambda (b47e8@x) (and (simple-struct? b47e8@x) (eq? (simple-struct-name b47e8@x) 'interaction-env)))) (set! b30e7@interaction-env-rib (lambda (b47ea@x) (simple-struct-ref b47ea@x '0))) (set! b30e9@set-interaction-env-rib! (lambda (b47ec@x b47ed@val) (simple-struct-set! b47ec@x '0 b47ed@val))) (set! b30eb@interaction-env-r (lambda (b47f0@x) (simple-struct-ref b47f0@x '1))) (set! b30ed@set-interaction-env-r! (lambda (b47f2@x b47f3@val) (simple-struct-set! b47f2@x '1 b47f3@val))) (set! b30ef@interaction-env-locs (lambda (b47f6@x) (simple-struct-ref b47f6@x '2))) (set! b30f1@set-interaction-env-locs! (lambda (b47f8@x b47f9@val) (simple-struct-set! b47f8@x '2 b47f9@val))) (set! b30f3@dummy '3) (set! b30f5@interaction-environment-symbols (lambda () (b30fd@environment-symbols (b3133@interaction-environment)))) (set! b30f7@environment-bindings (lambda (b47fc@e) (vector->list (vector-map (lambda (b47fe@name b47ff@label) (b30f9@parse-binding (cons b47fe@name (b2c6c@b2ab9@imported-label->binding b47ff@label)))) (b30cd@env-names b47fc@e) (b30d1@env-labels b47fc@e))))) (set! b30f9@parse-binding (lambda (b4802@b) (cons (car b4802@b) ((lambda (b4804@t) (if (memv b4804@t '(core-prim global)) 'procedure (if (memv b4804@t '(core-macro macro global-macro)) 'syntax (if (memv b4804@t '($core-rtd)) 'record (if (eq? (car b4802@b) (cadr b4802@b)) 'syntax 'unknown))))) (cadr b4802@b))))) (set! b30fb@environment? (lambda (b4806@x) (or (b30cb@env? b4806@x) (b30e5@interaction-env? b4806@x)))) (set! b30fd@environment-symbols (lambda (b4808@x) (if (b30cb@env? b4808@x) (vector->list (b30cd@env-names b4808@x)) (if (b30e5@interaction-env? b4808@x) (map values (b2de0@rib-sym* (b30e7@interaction-env-rib b4808@x))) (assertion-violation 'environment-symbols '"not an environment" b4808@x))))) (set! b30ff@environment (lambda b480a@imp* ((lambda (b480c@itc) ((lambda (b4812@b480f b4813@b4811) ((lambda (b4816@swap) (dynamic-wind b4816@swap (lambda () (call-with-values (lambda () (b30a9@parse-import-spec* b480a@imp*)) (lambda (b481c@b4819 b481d@b481b) ((lambda (b4820@subst-labels b4821@subst-names) (make-simple-struct 'env '4 (list b4821@subst-names b4820@subst-labels b480c@itc))) b481d@b481b b481c@b4819)))) b4816@swap)) (lambda () ((lambda (b4824@t) (begin (b4812@b480f b4813@b4811) (set! b4813@b4811 b4824@t))) (b4812@b480f))))) b30b3@imp-collector b480c@itc)) (b30ad@make-collector)))) (set! b3101@null-environment (lambda (b4826@n) (begin (if (not (eqv? b4826@n '5)) (assertion-violation 'null-environment '"not 5" b4826@n) (void)) (b30ff@environment '(psyntax null-environment-5))))) (set! b3103@scheme-report-environment (lambda (b4828@n) (begin (if (not (eqv? b4828@n '5)) (assertion-violation 'scheme-report-environment '"not 5" b4828@n) (void)) (b30ff@environment '(psyntax scheme-report-environment-5))))) (set! b3105@expand (lambda (b482a@x b482b@env) (if (b30cb@env? b482b@env) ((lambda (b482e@rib) ((lambda (b4830@x b4831@itc b4832@rtc b4833@vtc) ((lambda (b4838@x) (begin (b2dfe@seal-rib! b482e@rib) (values b4838@x (b4832@rtc)))) ((lambda (b484a@b483b b484b@b483d b484c@b483f b484d@b4841 b484e@b4843 b484f@b4845 b4850@b4847 b4851@b4849) ((lambda (b485a@swap) (dynamic-wind b485a@swap (lambda () (b3069@chi-expr b4830@x '() '())) b485a@swap)) (lambda () (begin ((lambda (b485c@t) (begin (b484a@b483b b484e@b4843) (set! b484e@b4843 b485c@t))) (b484a@b483b)) ((lambda (b485e@t) (begin (b484b@b483d b484f@b4845) (set! b484f@b4845 b485e@t))) (b484b@b483d)) ((lambda (b4860@t) (begin (b484c@b483f b4850@b4847) (set! b4850@b4847 b4860@t))) (b484c@b483f)) ((lambda (b4862@t) (begin (b484d@b4841 b4851@b4849) (set! b4851@b4849 b4862@t))) (b484d@b4841)))))) b3135@top-level-context b30af@inv-collector b30b1@vis-collector b30b3@imp-collector '#f b4832@rtc b4833@vtc b4831@itc))) (make-simple-struct 'stx '5 (list b482a@x b2dc6@top-mark* (list b482e@rib) '())) (b30d5@env-itc b482b@env) (b30ad@make-collector) (b30ad@make-collector))) (b30ab@make-top-rib (b30cd@env-names b482b@env) (b30d1@env-labels b482b@env))) (if (b30e5@interaction-env? b482b@env) ((lambda (b4864@rib b4865@r b4866@rtc) ((lambda (b486a@x) (call-with-values (lambda () ((lambda (b4880@b4871 b4881@b4873 b4882@b4875 b4883@b4877 b4884@b4879 b4885@b487b b4886@b487d b4887@b487f) ((lambda (b4890@swap) (dynamic-wind b4890@swap (lambda () (b30b7@chi-interaction-expr b486a@x b4864@rib b4865@r)) b4890@swap)) (lambda () (begin ((lambda (b4892@t) (begin (b4880@b4871 b4884@b4879) (set! b4884@b4879 b4892@t))) (b4880@b4871)) ((lambda (b4894@t) (begin (b4881@b4873 b4885@b487b) (set! b4885@b487b b4894@t))) (b4881@b4873)) ((lambda (b4896@t) (begin (b4882@b4875 b4886@b487d) (set! b4886@b487d b4896@t))) (b4882@b4875)) ((lambda (b4898@t) (begin (b4883@b4877 b4887@b487f) (set! b4887@b487f b4898@t))) (b4883@b4877)))))) b3135@top-level-context b30af@inv-collector b30b1@vis-collector b30b3@imp-collector b482b@env b4866@rtc (b30ad@make-collector) (b30ad@make-collector))) (lambda (b489a@b486d b489b@b486f) ((lambda (b489e@r^ b489f@e) (begin (b30ed@set-interaction-env-r! b482b@env b489e@r^) (values b489f@e (b4866@rtc)))) b489b@b486f b489a@b486d)))) (make-simple-struct 'stx '5 (list b482a@x b2dc6@top-mark* (list b4864@rib) '())))) (b30e7@interaction-env-rib b482b@env) (b30eb@interaction-env-r b482b@env) (b30ad@make-collector)) (assertion-violation 'expand '"not an environment" b482b@env))))) (set! b3107@eval (lambda (b48a2@x b48a3@env) (begin (if (not (b30fb@environment? b48a3@env)) (error 'eval '"not an environment" b48a3@env) (void)) (call-with-values (lambda () (b3105@expand b48a2@x b48a3@env)) (lambda (b48aa@b48a7 b48ab@b48a9) ((lambda (b48ae@invoke-req* b48af@x) (begin (for-each b2c6d@b2abb@invoke-library b48ae@invoke-req*) (eval-core (b29f7@b29af@expanded->core b48af@x)))) b48ab@b48a9 b48aa@b48a7)))))) (set! b3109@library-expander (lambda b4920 ((lambda (b4921) (if (= b4921 '3) (apply (lambda (b48b2@x b48b3@filename b48b4@verify-name) ((lambda (b48b9@build-visit-code b48bb@visit!) (begin (set! b48b9@build-visit-code (lambda (b490e@macro*) (if (null? b490e@macro*) (b2daa@b2d1a@build-void) (b2da9@b2d18@build-sequence '#f (map (lambda (b4910@x) ((lambda (b4912@loc b4913@src) (list 'set! b4912@loc b4913@src)) (car b4910@x) (cddr b4910@x))) b490e@macro*))))) (set! b48bb@visit! (lambda (b4906@macro*) (for-each (lambda (b4908@x) ((lambda (b490a@loc b490b@proc) (set-symbol-value! b490a@loc b490b@proc)) (car b4908@x) (cadr b4908@x))) b4906@macro*))) (call-with-values (lambda () (b30bb@core-library-expander b48b2@x b48b4@verify-name)) (lambda (b48ce@b48bd b48cf@b48bf b48d0@b48c1 b48d1@b48c3 b48d2@b48c5 b48d3@b48c7 b48d4@b48c9 b48d5@b48cb b48d6@b48cd) ((lambda (b48e0@export-env b48e1@export-subst b48e2@macro* b48e3@invoke-code b48e4@vis* b48e5@inv* b48e6@imp* b48e7@ver b48e8@name) ((lambda (b48f2@id b48f3@name b48f4@ver b48f5@imp* b48f6@vis* b48f7@inv* b48f8@visit-proc b48f9@invoke-proc b48fa@visit-code b48fb@invoke-code) (begin (b2c6b@b2ab7@install-library b48f2@id b48f3@name b48f4@ver b48f5@imp* b48f6@vis* b48f7@inv* b48e1@export-subst b48e0@export-env b48f8@visit-proc b48f9@invoke-proc b48fa@visit-code b48fb@invoke-code '#t b48b3@filename) (values b48f2@id b48f3@name b48f4@ver b48f5@imp* b48f6@vis* b48f7@inv* b48fb@invoke-code b48fa@visit-code b48e1@export-subst b48e0@export-env))) (gensym) b48e8@name b48e7@ver (map b2c71@b2ac3@library-spec b48e6@imp*) (map b2c71@b2ac3@library-spec b48e4@vis*) (map b2c71@b2ac3@library-spec b48e5@inv*) (lambda () (b48bb@visit! b48e2@macro*)) (lambda () (eval-core (b29f7@b29af@expanded->core b48e3@invoke-code))) (b48b9@build-visit-code b48e2@macro*) b48e3@invoke-code)) b48d6@b48cd b48d5@b48cb b48d4@b48c9 b48d3@b48c7 b48d2@b48c5 b48d1@b48c3 b48d0@b48c1 b48cf@b48bf b48ce@b48bd))))) '#f '#f)) b4920) (if (= b4921 '2) (apply (lambda (b4916@x b4917@filename) (b3109@library-expander b4916@x b4917@filename (lambda (b491a@x) (values)))) b4920) (if (= b4921 '1) (apply (lambda (b491c@x) (b3109@library-expander b491c@x '#f (lambda (b491e@x) (values)))) b4920) (error 'apply '"invalid arg count"))))) (length b4920)))) (set! b310b@boot-library-expand (lambda (b4922@x) (call-with-values (lambda () (b3109@library-expander b4922@x)) (lambda (b4938@b4925 b4939@b4927 b493a@b4929 b493b@b492b b493c@b492d b493d@b492f b493e@b4931 b493f@b4933 b4940@b4935 b4941@b4937) ((lambda (b494c@export-env b494d@export-subst b494e@visit-code b494f@invoke-code b4950@inv* b4951@vis* b4952@imp* b4953@ver b4954@name b4955@id) (values b4954@name b494f@invoke-code b494d@export-subst b494c@export-env)) b4941@b4937 b4940@b4935 b493f@b4933 b493e@b4931 b493d@b492f b493c@b492d b493b@b492b b493a@b4929 b4939@b4927 b4938@b4925))))) (set! b310d@rev-map-append (lambda (b4960@f b4961@ls b4962@ac) (if (null? b4961@ls) b4962@ac (b310d@rev-map-append b4960@f (cdr b4961@ls) (cons (b4960@f (car b4961@ls)) b4962@ac))))) (set! b310f@build-exports (lambda (b4966@lex*+loc* b4967@init*) (b2da9@b2d18@build-sequence '#f (cons (b2daa@b2d1a@build-void) (b310d@rev-map-append (lambda (b496a@x) (list 'set! (cdr b496a@x) (car b496a@x))) b4966@lex*+loc* b4967@init*))))) (set! b3111@make-export-subst (lambda (b496c@name* b496d@id*) (map (lambda (b4970@name b4971@id) ((lambda (b4974@label) (begin (if (not b4974@label) (b3127@syntax-violation '#f '"cannot export unbound identifier" b4971@id) (void)) (cons b4970@name b4974@label))) (b2e58@id->label b4971@id))) b496c@name* b496d@id*))) (set! b3113@make-export-env/macros (lambda (b4976@lex* b4977@loc* b4978@r) ((lambda (b497d@lookup) (begin (set! b497d@lookup (lambda (b499a@x) ((letrec ((b499c@f (lambda (b499e@x b499f@lex* b49a0@loc*) (if (pair? b499f@lex*) (if (eq? b499e@x (car b499f@lex*)) (car b49a0@loc*) (b499c@f b499e@x (cdr b499f@lex*) (cdr b49a0@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) b499c@f) b499a@x b4976@lex* b4977@loc*))) ((letrec ((b497e@f (lambda (b4980@r b4981@env b4982@global* b4983@macro*) (if (null? b4980@r) (values b4981@env b4982@global* b4983@macro*) ((lambda (b4988@x) ((lambda (b498a@label b498b@b) ((lambda (b498e@t) (if (memv b498e@t '(lexical)) ((lambda (b4990@v) ((lambda (b4992@loc b4993@type) (b497e@f (cdr b4980@r) (cons (cons* b498a@label b4993@type b4992@loc) b4981@env) (cons (cons (b2fd3@lexical-var b4990@v) b4992@loc) b4982@global*) b4983@macro*)) (b497d@lookup (b2fd3@lexical-var b4990@v)) (if (b2fd5@lexical-mutable? b4990@v) 'mutable 'global))) (b2e60@binding-value b498b@b)) (if (memv b498e@t '(local-macro)) ((lambda (b4996@loc) (b497e@f (cdr b4980@r) (cons (cons* b498a@label 'global-macro b4996@loc) b4981@env) b4982@global* (cons (cons b4996@loc (b2e60@binding-value b498b@b)) b4983@macro*))) (gensym)) (if (memv b498e@t '(local-macro!)) ((lambda (b4998@loc) (b497e@f (cdr b4980@r) (cons (cons* b498a@label 'global-macro! b4998@loc) b4981@env) b4982@global* (cons (cons b4998@loc (b2e60@binding-value b498b@b)) b4983@macro*))) (gensym)) (if (memv b498e@t '($rtd $module)) (b497e@f (cdr b4980@r) (cons b4988@x b4981@env) b4982@global* b4983@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (b2e5e@binding-type b498b@b) (b2e60@binding-value b498b@b))))))) (b2e5e@binding-type b498b@b))) (car b4988@x) (cdr b4988@x))) (car b4980@r)))))) b497e@f) b4978@r '() '() '()))) '#f))) (set! b3115@generate-temporaries (lambda (b49a4@ls) ((lambda (b49a6@t) ((lambda (b49a8@ls/false) (if b49a8@ls/false (apply (lambda (b49aa@ls) (map (lambda (b49ac@x) (make-simple-struct 'stx '5 (list ((lambda (b49ae@x) (if (or (symbol? b49ae@x) (string? b49ae@x)) (gensym b49ae@x) (gensym 't))) (b312d@syntax->datum b49ac@x)) b2dc6@top-mark* '() '()))) b49aa@ls)) b49a8@ls/false) ((lambda (b49b0@t) ((lambda (b49b2@ls/false) (if b49b2@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) b49b2@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b49b0@t))) (b3047@syntax-dispatch b49b0@t '_))) b49a6@t))) (b3047@syntax-dispatch b49a6@t 'each-any))) b49a4@ls))) (set! b3117@free-identifier=? (lambda (b49b4@x b49b5@y) (if (b2e42@id? b49b4@x) (if (b2e42@id? b49b5@y) (b2e48@free-id=? b49b4@x b49b5@y) (assertion-violation 'free-identifier=? '"not an identifier" b49b5@y)) (assertion-violation 'free-identifier=? '"not an identifier" b49b4@x)))) (set! b3119@bound-identifier=? (lambda (b49b8@x b49b9@y) (if (b2e42@id? b49b8@x) (if (b2e42@id? b49b9@y) (b2e46@bound-id=? b49b8@x b49b9@y) (assertion-violation 'bound-identifier=? '"not an identifier" b49b9@y)) (assertion-violation 'bound-identifier=? '"not an identifier" b49b8@x)))) (set! b311b@make-source-condition (lambda (b49bc@x) ((lambda (b49c6@b49c1 b49c8@b49c3 b49ca@b49c2 b49cd@b49c0 b49cf@make-source-condition b49d1@b49be b49d3@b49bf b49d5@source-condition? b49d7@source-filename b49d9@source-character) (begin (set! b49c6@b49c1 (make-record-type-descriptor '&source-information b4e16@b4b5d@&condition-rtd 'b49c4 '#f '#f '#((immutable file-name) (immutable character)))) (set! b49c8@b49c3 '#f) (set! b49ca@b49c2 (make-record-constructor-descriptor b49c6@b49c1 b4e17@b4b5f@&condition-rcd b49c8@b49c3)) (set! b49cd@b49c0 (record-predicate b49c6@b49c1)) (set! b49cf@make-source-condition (record-constructor b49ca@b49c2)) (set! b49d1@b49be (record-accessor b49c6@b49c1 '0)) (set! b49d3@b49bf (record-accessor b49c6@b49c1 '1)) (set! b49d5@source-condition? (condition-predicate b49c6@b49c1)) (set! b49d7@source-filename (condition-accessor b49c6@b49c1 b49d1@b49be)) (set! b49d9@source-character (condition-accessor b49c6@b49c1 b49d3@b49bf)) (if (pair? b49bc@x) (b49cf@make-source-condition (car b49bc@x) (cdr b49bc@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! b311d@extract-position-condition (lambda (b49da@x) (b311b@make-source-condition (b311f@expression-position b49da@x)))) (set! b311f@expression-position (lambda (b49dc@x) (and (b2e0e@stx? b49dc@x) ((lambda (b49de@x) (and (b2996@b286a@annotation? b49de@x) (b2997@b286c@annotation-source b49de@x))) (b2e10@stx-expr b49dc@x))))) (set! b3121@assertion-error (lambda (b49e0@expr b49e1@pos) (raise (condition (b4e46@b4c21@make-assertion-violation) (b4e58@b4c53@make-who-condition 'assert) (b4e1c@b4bb4@make-message-condition '"assertion failed") (b4e4e@b4c38@make-irritants-condition (list b49e0@expr)) (b311b@make-source-condition b49e1@pos))))) (set! b3123@syntax-error (lambda (b49e4@x . b49e6@args) (begin (if (not (for-all string? b49e6@args)) (assertion-violation 'syntax-error '"invalid argument" b49e6@args) (void)) (raise (condition (b4e1c@b4bb4@make-message-condition (if (null? b49e6@args) '"invalid syntax" (apply string-append b49e6@args))) (b4e7a@b4caf@make-syntax-violation (b312d@syntax->datum b49e4@x) '#f) (b311d@extract-position-condition b49e4@x)))))) (set! b3125@syntax-violation* (lambda (b49e8@who b49e9@msg b49ea@form b49eb@condition-object) (begin (if (not (string? b49e9@msg)) (assertion-violation 'syntax-violation '"message is not a string" b49e9@msg) (void)) ((lambda (b49f0@who) (raise (condition (if b49f0@who (b4e58@b4c53@make-who-condition b49f0@who) (condition)) (b4e1c@b4bb4@make-message-condition b49e9@msg) b49eb@condition-object (b311d@extract-position-condition b49ea@form)))) (if (or (string? b49e8@who) (symbol? b49e8@who)) b49e8@who (if (not b49e8@who) ((lambda (b49f2@t) ((lambda (b49f4@ls/false) (if (and b49f4@ls/false (apply (lambda (b49f6@id) (b2e42@id? b49f6@id)) b49f4@ls/false)) (apply (lambda (b49f8@id) (b312d@syntax->datum b49f8@id)) b49f4@ls/false) ((lambda (b49fa@t) ((lambda (b49fc@ls/false) (if (and b49fc@ls/false (apply (lambda (b49fe@id b49ff@rest) (b2e42@id? b49fe@id)) b49fc@ls/false)) (apply (lambda (b4a02@id b4a03@rest) (b312d@syntax->datum b4a02@id)) b49fc@ls/false) ((lambda (b4a06@t) ((lambda (b4a08@ls/false) (if b4a08@ls/false (apply (lambda () '#f) b4a08@ls/false) (b3127@syntax-violation '#f '"invalid syntax" b4a06@t))) (b3047@syntax-dispatch b4a06@t '_))) b49fa@t))) (b3047@syntax-dispatch b49fa@t '(any . any)))) b49f2@t))) (b3047@syntax-dispatch b49f2@t 'any))) b49ea@form) (assertion-violation 'syntax-violation '"invalid who argument" b49e8@who))))))) (set! b3127@syntax-violation (lambda b4a18 ((lambda (b4a19) (if (= b4a19 '3) (apply (lambda (b4a0a@who b4a0b@msg b4a0c@form) (b3127@syntax-violation b4a0a@who b4a0b@msg b4a0c@form '#f)) b4a18) (if (= b4a19 '4) (apply (lambda (b4a10@who b4a11@msg b4a12@form b4a13@subform) (b3125@syntax-violation* b4a10@who b4a11@msg b4a12@form (b4e7a@b4caf@make-syntax-violation (b312d@syntax->datum b4a12@form) (b312d@syntax->datum b4a13@subform)))) b4a18) (error 'apply '"invalid arg count")))) (length b4a18)))) (set! b3129@identifier? (lambda (b4a1a@x) (b2e42@id? b4a1a@x))) (set! b312b@datum->syntax (lambda (b4a1c@id b4a1d@datum) (if (b2e42@id? b4a1c@id) (b2e22@datum->stx b4a1c@id b4a1d@datum) (assertion-violation 'datum->syntax '"not an identifier" b4a1c@id)))) (set! b312d@syntax->datum (lambda (b4a20@x) (b2e56@stx->datum b4a20@x))) (set! b312f@compile-r6rs-top-level (lambda (b4a22@x*) (call-with-values (lambda () (b30bf@top-level-expander b4a22@x*)) (lambda (b4a28@b4a25 b4a29@b4a27) ((lambda (b4a2c@invoke-code b4a2d@lib*) (lambda () (begin (for-each b2c6d@b2abb@invoke-library b4a2d@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (b29f7@b29af@expanded->core b4a2c@invoke-code)) (void)) (eval-core (b29f7@b29af@expanded->core b4a2c@invoke-code))))) b4a29@b4a27 b4a28@b4a25))))) (set! b3131@pre-compile-r6rs-top-level (lambda (b4a30@x*) (call-with-values (lambda () (b30bf@top-level-expander b4a30@x*)) (lambda (b4a36@b4a33 b4a37@b4a35) ((lambda (b4a3a@invoke-code b4a3b@lib*) (begin (for-each b2c6d@b2abb@invoke-library b4a3b@lib*) (b299f@b287c@compile-core (b29f7@b29af@expanded->core b4a3a@invoke-code)))) b4a37@b4a35 b4a36@b4a33))))) (set! b3133@interaction-environment ((lambda (b4a3e@the-env) (lambda () (or b4a3e@the-env ((lambda (b4a40@lib b4a41@rib) (begin ((lambda (b4a44@subst) (begin (b2de2@set-rib-sym*! b4a41@rib (map car b4a44@subst)) (b2de6@set-rib-mark**! b4a41@rib (map (lambda (b4a46@x) b2dc6@top-mark*) b4a44@subst)) (b2dea@set-rib-label*! b4a41@rib (map cdr b4a44@subst)))) (b2c48@b2a71@library-subst b4a40@lib)) ((lambda (b4a48@env) (begin (set! b4a3e@the-env b4a48@env) b4a48@env)) (make-simple-struct 'interaction-env '4 (list b4a41@rib '() '()))))) (b2c66@b2aad@find-library-by-name '(mosh interaction)) (b2df6@make-empty-rib))))) '#f)) (set! b3135@top-level-context (b29a1@b2880@make-parameter '#f)) (begin (set! b4b43@b3135@top-level-context b3135@top-level-context) (set! b4b42@b3133@interaction-environment b3133@interaction-environment) (set! b4b41@b3131@pre-compile-r6rs-top-level b3131@pre-compile-r6rs-top-level) (set! b4b40@b312f@compile-r6rs-top-level b312f@compile-r6rs-top-level) (set! b4b3f@b312d@syntax->datum b312d@syntax->datum) (set! b4b3e@b312b@datum->syntax b312b@datum->syntax) (set! b4b3d@b3129@identifier? b3129@identifier?) (set! b4b3c@b3127@syntax-violation b3127@syntax-violation) (set! b4b3b@b3125@syntax-violation* b3125@syntax-violation*) (set! b4b3a@b3123@syntax-error b3123@syntax-error) (set! b4b39@b3121@assertion-error b3121@assertion-error) (set! b4b38@b311f@expression-position b311f@expression-position) (set! b4b37@b311d@extract-position-condition b311d@extract-position-condition) (set! b4b36@b311b@make-source-condition b311b@make-source-condition) (set! b4b35@b3119@bound-identifier=? b3119@bound-identifier=?) (set! b4b34@b3117@free-identifier=? b3117@free-identifier=?) (set! b4b33@b3115@generate-temporaries b3115@generate-temporaries) (set! b4b32@b3113@make-export-env/macros b3113@make-export-env/macros) (set! b4b31@b3111@make-export-subst b3111@make-export-subst) (set! b4b30@b310f@build-exports b310f@build-exports) (set! b4b2f@b310d@rev-map-append b310d@rev-map-append) (set! b4b2e@b310b@boot-library-expand b310b@boot-library-expand) (set! b4b2d@b3109@library-expander b3109@library-expander) (set! b4b2c@b3107@eval b3107@eval) (set! b4b2b@b3105@expand b3105@expand) (set! b4b2a@b3103@scheme-report-environment b3103@scheme-report-environment) (set! b4b29@b3101@null-environment b3101@null-environment) (set! b4b28@b30ff@environment b30ff@environment) (set! b4b27@b30fd@environment-symbols b30fd@environment-symbols) (set! b4b26@b30fb@environment? b30fb@environment?) (set! b4b25@b30f9@parse-binding b30f9@parse-binding) (set! b4b24@b30f7@environment-bindings b30f7@environment-bindings) (set! b4b23@b30f5@interaction-environment-symbols b30f5@interaction-environment-symbols) (set! b4b22@b30f3@dummy b30f3@dummy) (set! b4b21@b30f1@set-interaction-env-locs! b30f1@set-interaction-env-locs!) (set! b4b20@b30ef@interaction-env-locs b30ef@interaction-env-locs) (set! b4b1f@b30ed@set-interaction-env-r! b30ed@set-interaction-env-r!) (set! b4b1e@b30eb@interaction-env-r b30eb@interaction-env-r) (set! b4b1d@b30e9@set-interaction-env-rib! b30e9@set-interaction-env-rib!) (set! b4b1c@b30e7@interaction-env-rib b30e7@interaction-env-rib) (set! b4b1b@b30e5@interaction-env? b30e5@interaction-env?) (set! b4b1a@b30db@rp b30db@rp) (set! b4b19@b30d9@dummy b30d9@dummy) (set! b4b18@b30d7@set-env-itc! b30d7@set-env-itc!) (set! b4b17@b30d5@env-itc b30d5@env-itc) (set! b4b16@b30d3@set-env-labels! b30d3@set-env-labels!) (set! b4b15@b30d1@env-labels b30d1@env-labels) (set! b4b14@b30cf@set-env-names! b30cf@set-env-names!) (set! b4b13@b30cd@env-names b30cd@env-names) (set! b4b12@b30cb@env? b30cb@env?) (set! b4b11@b30c1@rp b30c1@rp) (set! b4b10@b30bf@top-level-expander b30bf@top-level-expander) (set! b4b0f@b30bd@parse-top-level-program b30bd@parse-top-level-program) (set! b4b0e@b30bb@core-library-expander b30bb@core-library-expander) (set! b4b0d@b30b9@library-body-expander b30b9@library-body-expander) (set! b4b0c@b30b7@chi-interaction-expr b30b7@chi-interaction-expr) (set! b4b0b@b30b5@chi-library-internal b30b5@chi-library-internal) (set! b4b0a@b30b3@imp-collector b30b3@imp-collector) (set! b4b09@b30b1@vis-collector b30b1@vis-collector) (set! b4b08@b30af@inv-collector b30af@inv-collector) (set! b4b07@b30ad@make-collector b30ad@make-collector) (set! b4b06@b30ab@make-top-rib b30ab@make-top-rib) (set! b4b05@b30a9@parse-import-spec* b30a9@parse-import-spec*) (set! b4b04@b30a7@parse-library b30a7@parse-library) (set! b4b03@b30a5@parse-library-name b30a5@parse-library-name) (set! b4b02@b30a3@parse-exports b30a3@parse-exports) (set! b4b01@b30a1@expand-transformer b30a1@expand-transformer) (set! b4b00@b309f@chi-body* b309f@chi-body*) (set! b4aff@b309d@chi-internal-module b309d@chi-internal-module) (set! b4afe@b309b@module-interface-exp-id* b309b@module-interface-exp-id*) (set! b4afd@b3099@dummy b3099@dummy) (set! b4afc@b3097@set-module-interface-exp-lab-vec! b3097@set-module-interface-exp-lab-vec!) (set! b4afb@b3095@module-interface-exp-lab-vec b3095@module-interface-exp-lab-vec) (set! b4afa@b3093@set-module-interface-exp-id-vec! b3093@set-module-interface-exp-id-vec!) (set! b4af9@b3091@module-interface-exp-id-vec b3091@module-interface-exp-id-vec) (set! b4af8@b308f@set-module-interface-first-mark! b308f@set-module-interface-first-mark!) (set! b4af7@b308d@module-interface-first-mark b308d@module-interface-first-mark) (set! b4af6@b308b@module-interface? b308b@module-interface?) (set! b4af5@b3081@parse-module b3081@parse-module) (set! b4af4@b307f@chi-internal b307f@chi-internal) (set! b4af3@b307d@find-dups b307d@find-dups) (set! b4af2@b307b@find-bound=? b307b@find-bound=?) (set! b4af1@b3079@chi-rhs* b3079@chi-rhs*) (set! b4af0@b3077@expand-interaction-rhs*/init* b3077@expand-interaction-rhs*/init*) (set! b4aef@b3075@chi-rhs b3075@chi-rhs) (set! b4aee@b3073@chi-defun b3073@chi-defun) (set! b4aed@b3071@chi-lambda-clause* b3071@chi-lambda-clause*) (set! b4aec@b306f@chi-lambda-clause b306f@chi-lambda-clause) (set! b4aeb@b306d@verify-formals b306d@verify-formals) (set! b4aea@b306b@chi-set! b306b@chi-set!) (set! b4ae9@b3069@chi-expr b3069@chi-expr) (set! b4ae8@b3067@chi-application b3067@chi-application) (set! b4ae7@b3065@chi-expr* b3065@chi-expr*) (set! b4ae6@b3063@chi-global-macro b3063@chi-global-macro) (set! b4ae5@b3061@chi-local-macro b3061@chi-local-macro) (set! b4ae4@b305f@chi-macro b305f@chi-macro) (set! b4ae3@b305d@do-macro-call b305d@do-macro-call) (set! b4ae2@b305b@local-macro-transformer b305b@local-macro-transformer) (set! b4ae1@b3059@macro-transformer b3059@macro-transformer) (set! b4ae0@b3057@symbol-macro b3057@symbol-macro) (set! b4adf@b3055@core-macro-transformer b3055@core-macro-transformer) (set! b4ade@b3053@syntax-transformer b3053@syntax-transformer) (set! b4add@b3051@ellipsis-map b3051@ellipsis-map) (set! b4adc@b304f@syntax-case-transformer b304f@syntax-case-transformer) (set! b4adb@b304d@verify-literals b304d@verify-literals) (set! b4ada@b304b@underscore? b304b@underscore?) (set! b4ad9@b3049@ellipsis? b3049@ellipsis?) (set! b4ad8@b3047@syntax-dispatch b3047@syntax-dispatch) (set! b4ad7@b3045@convert-pattern b3045@convert-pattern) (set! b4ad6@b3043@foreign-call-transformer b3043@foreign-call-transformer) (set! b4ad5@b3041@parameterize-macro b3041@parameterize-macro) (set! b4ad4@b303f@incorrect-usage-macro b303f@incorrect-usage-macro) (set! b4ad3@b303d@define-condition-type-macro b303d@define-condition-type-macro) (set! b4ad2@b303b@define-record-type-macro b303b@define-record-type-macro) (set! b4ad1@b3039@define-struct-macro b3039@define-struct-macro) (set! b4ad0@b3037@quasisyntax-macro b3037@quasisyntax-macro) (set! b4acf@b3035@quasiquote-macro b3035@quasiquote-macro) (set! b4ace@b3033@syntax-rules-macro b3033@syntax-rules-macro) (set! b4acd@b3031@include-into-macro b3031@include-into-macro) (set! b4acc@b302f@include-macro b302f@include-macro) (set! b4acb@b302d@do-include b302d@do-include) (set! b4aca@b302b@cond-macro b302b@cond-macro) (set! b4ac9@b3029@and-macro b3029@and-macro) (set! b4ac8@b3027@or-macro b3027@or-macro) (set! b4ac7@b3025@let*-macro b3025@let*-macro) (set! b4ac6@b3023@do-macro b3023@do-macro) (set! b4ac5@b3021@identifier-syntax-macro b3021@identifier-syntax-macro) (set! b4ac4@b301f@endianness-macro b301f@endianness-macro) (set! b4ac3@b301d@assert-macro b301d@assert-macro) (set! b4ac2@b301b@delay-macro b301b@delay-macro) (set! b4ac1@b3019@time-macro b3019@time-macro) (set! b4ac0@b3017@define-enumeration-macro b3017@define-enumeration-macro) (set! b4abf@b3015@guard-macro b3015@guard-macro) (set! b4abe@b3013@trace-letrec-syntax-macro b3013@trace-letrec-syntax-macro) (set! b4abd@b3011@trace-let-syntax-macro b3011@trace-let-syntax-macro) (set! b4abc@b300f@trace-let/rec-syntax b300f@trace-let/rec-syntax) (set! b4abb@b300d@trace-define-syntax-macro b300d@trace-define-syntax-macro) (set! b4aba@b300b@trace-define-macro b300b@trace-define-macro) (set! b4ab9@b3009@trace-lambda-macro b3009@trace-lambda-macro) (set! b4ab8@b3007@let*-values-macro b3007@let*-values-macro) (set! b4ab7@b3005@let-values-macro b3005@let-values-macro) (set! b4ab6@b3003@let-macro b3003@let-macro) (set! b4ab5@b3001@invalid-fmls-error b3001@invalid-fmls-error) (set! b4ab4@b2fff@with-syntax-macro b2fff@with-syntax-macro) (set! b4ab3@b2ffd@bless b2ffd@bless) (set! b4ab2@b2ffb@lambda-transformer b2ffb@lambda-transformer) (set! b4ab1@b2ff9@case-lambda-transformer b2ff9@case-lambda-transformer) (set! b4ab0@b2ff7@quote-transformer b2ff7@quote-transformer) (set! b4aaf@b2ff5@case-macro b2ff5@case-macro) (set! b4aae@b2ff3@or-transformer b2ff3@or-transformer) (set! b4aad@b2ff1@and-transformer b2ff1@and-transformer) (set! b4aac@b2fef@if-transformer b2fef@if-transformer) (set! b4aab@b2fed@unless-macro b2fed@unless-macro) (set! b4aaa@b2feb@when-macro b2feb@when-macro) (set! b4aa9@b2fe9@record-constructor-descriptor-transformer b2fe9@record-constructor-descriptor-transformer) (set! b4aa8@b2fe7@record-type-descriptor-transformer b2fe7@record-type-descriptor-transformer) (set! b4aa7@b2fe5@type-descriptor-transformer b2fe5@type-descriptor-transformer) (set! b4aa6@b2fe3@fluid-let-syntax-transformer b2fe3@fluid-let-syntax-transformer) (set! b4aa5@b2fe1@letrec*-transformer b2fe1@letrec*-transformer) (set! b4aa4@b2fdf@letrec-transformer b2fdf@letrec-transformer) (set! b4aa3@b2fdd@letrec-helper b2fdd@letrec-helper) (set! b4aa2@b2fdb@add-lexicals b2fdb@add-lexicals) (set! b4aa1@b2fd9@add-lexical b2fd9@add-lexical) (set! b4aa0@b2fd7@set-lexical-mutable! b2fd7@set-lexical-mutable!) (set! b4a9f@b2fd5@lexical-mutable? b2fd5@lexical-mutable?) (set! b4a9e@b2fd3@lexical-var b2fd3@lexical-var) (set! b4a9d@b2fd1@scheme-stx b2fd1@scheme-stx) (set! b4a9c@b2fcf@scheme-stx-hashtable b2fcf@scheme-stx-hashtable) (set! b4a9b@b2fcd@parse-define-syntax b2fcd@parse-define-syntax) (set! b4a9a@b2fcb@parse-define b2fcb@parse-define) (set! b4a99@b2e7a@make-eval-transformer b2e7a@make-eval-transformer) (set! b4a98@b2e78@variable-transformer-procedure b2e78@variable-transformer-procedure) (set! b4a97@b2e76@variable-transformer? b2e76@variable-transformer?) (set! b4a96@b2e74@make-variable-transformer b2e74@make-variable-transformer) (set! b4a95@b2e72@sanitize-binding b2e72@sanitize-binding) (set! b4a94@b2e64@syntax-type b2e64@syntax-type) (set! b4a93@b2e62@raise-unbound-error b2e62@raise-unbound-error) (set! b4a92@b2e60@binding-value b2e60@binding-value) (set! b4a91@b2e5e@binding-type b2e5e@binding-type) (set! b4a90@b2e5c@make-binding b2e5c@make-binding) (set! b4a8f@b2e5a@label->binding b2e5a@label->binding) (set! b4a8e@b2e58@id->label b2e58@id->label) (set! b4a8d@b2e56@stx->datum b2e56@stx->datum) (set! b4a8c@b2e54@strip b2e54@strip) (set! b4a8b@b2e52@strip-annotations b2e52@strip-annotations) (set! b4a8a@b2e50@self-evaluating? b2e50@self-evaluating?) (set! b4a89@b2e4e@bound-id-member? b2e4e@bound-id-member?) (set! b4a88@b2e4c@distinct-bound-ids? b2e4c@distinct-bound-ids?) (set! b4a87@b2e4a@valid-bound-ids? b2e4a@valid-bound-ids?) (set! b4a86@b2e48@free-id=? b2e48@free-id=?) (set! b4a85@b2e46@bound-id=? b2e46@bound-id=?) (set! b4a84@b2e44@id->sym b2e44@id->sym) (set! b4a83@b2e42@id? b2e42@id?) (set! b4a82@b2e40@syntax->list b2e40@syntax->list) (set! b4a81@b2e3e@syntax-cdr b2e3e@syntax-cdr) (set! b4a80@b2e3c@syntax-car b2e3c@syntax-car) (set! b4a7f@b2e3a@syntax-list? b2e3a@syntax-list?) (set! b4a7e@b2e38@syntax-null? b2e38@syntax-null?) (set! b4a7d@b2e36@syntax-vector? b2e36@syntax-vector?) (set! b4a7c@b2e34@syntax-pair? b2e34@syntax-pair?) (set! b4a7b@b2e32@syntax-vector->list b2e32@syntax-vector->list) (set! b4a7a@b2e30@syntax-kind? b2e30@syntax-kind?) (set! b4a79@b2e2e@add-subst b2e2e@add-subst) (set! b4a78@b2e2c@add-mark b2e2c@add-mark) (set! b4a77@b2e2a@mkstx b2e2a@mkstx) (set! b4a76@b2e28@anti-mark? b2e28@anti-mark?) (set! b4a75@b2e26@anti-mark b2e26@anti-mark) (set! b4a74@b2e24@gen-mark b2e24@gen-mark) (set! b4a73@b2e22@datum->stx b2e22@datum->stx) (set! b4a72@b2e20@dummy b2e20@dummy) (set! b4a71@b2e1e@set-stx-ae*! b2e1e@set-stx-ae*!) (set! b4a70@b2e1c@stx-ae* b2e1c@stx-ae*) (set! b4a6f@b2e1a@set-stx-subst*! b2e1a@set-stx-subst*!) (set! b4a6e@b2e18@stx-subst* b2e18@stx-subst*) (set! b4a6d@b2e16@set-stx-mark*! b2e16@set-stx-mark*!) (set! b4a6c@b2e14@stx-mark* b2e14@stx-mark*) (set! b4a6b@b2e12@set-stx-expr! b2e12@set-stx-expr!) (set! b4a6a@b2e10@stx-expr b2e10@stx-expr) (set! b4a69@b2e0e@stx? b2e0e@stx?) (set! b4a68@b2e04@rp b2e04@rp) (set! b4a67@b2e02@make-full-rib b2e02@make-full-rib) (set! b4a66@b2e00@unseal-rib! b2e00@unseal-rib!) (set! b4a65@b2dfe@seal-rib! b2dfe@seal-rib!) (set! b4a64@b2dfc@make-rib-map b2dfc@make-rib-map) (set! b4a63@b2dfa@extend-rib/nc! b2dfa@extend-rib/nc!) (set! b4a62@b2df8@extend-rib! b2df8@extend-rib!) (set! b4a61@b2df6@make-empty-rib b2df6@make-empty-rib) (set! b4a60@b2df4@dummy b2df4@dummy) (set! b4a5f@b2df2@set-rib-cache! b2df2@set-rib-cache!) (set! b4a5e@b2df0@rib-cache b2df0@rib-cache) (set! b4a5d@b2dee@set-rib-sealed/freq! b2dee@set-rib-sealed/freq!) (set! b4a5c@b2dec@rib-sealed/freq b2dec@rib-sealed/freq) (set! b4a5b@b2dea@set-rib-label*! b2dea@set-rib-label*!) (set! b4a5a@b2de8@rib-label* b2de8@rib-label*) (set! b4a59@b2de6@set-rib-mark**! b2de6@set-rib-mark**!) (set! b4a58@b2de4@rib-mark** b2de4@rib-mark**) (set! b4a57@b2de2@set-rib-sym*! b2de2@set-rib-sym*!) (set! b4a56@b2de0@rib-sym* b2de0@rib-sym*) (set! b4a55@b2dde@rib? b2dde@rib?) (set! b4a54@b2dd4@gen-define-label b2dd4@gen-define-label) (set! b4a53@b2dd2@gen-define-label+loc b2dd2@gen-define-label+loc) (set! b4a52@b2dd0@gen-top-level-label b2dd0@gen-top-level-label) (set! b4a51@b2dce@gen-label b2dce@gen-label) (set! b4a50@b2dcc@gen-global b2dcc@gen-global) (set! b4a4f@b2dca@gen-lexical b2dca@gen-lexical) (set! b4a4e@b2dc8@top-marked? b2dc8@top-marked?) (set! b4a4d@b2dc6@top-mark* b2dc6@top-mark*) (set! b4a4c@b2dc1@set-union b2dc1@set-union) (set! b4a4b@b2dbf@set-cons b2dbf@set-cons) (set! b4a4a@b2dbd@file-options-macro b2dbd@file-options-macro) (b2c63@b2aa7@current-library-expander b3109@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (b4b52@b4b4d b4b54@b4b4f b4b56@b4b4e b4b59@&condition? b4b5b@make-&condition b4b5d@&condition-rtd b4b5f@&condition-rcd b4bab@b4ba6 b4bad@b4ba8 b4baf@b4ba7 b4bb2@p? b4bb4@make-message-condition b4bb6@b4ba5 b4bb8@message-condition? b4bba@condition-message b4bbc@&message-rtd b4bbe@&message-rcd b4bc4@b4bbf b4bc6@b4bc1 b4bc8@b4bc0 b4bcb@p? b4bcd@make-warning b4bcf@warning? b4bd1@&warning-rtd b4bd3@&warning-rcd b4bd9@b4bd4 b4bdb@b4bd6 b4bdd@b4bd5 b4be0@p? b4be2@make-serious-condition b4be4@serious-condition? b4be6@&serious-rtd b4be8@&serious-rcd b4bee@b4be9 b4bf0@b4beb b4bf2@b4bea b4bf5@p? b4bf7@make-error b4bf9@error? b4bfb@&error-rtd b4bfd@&error-rcd b4c03@b4bfe b4c05@b4c00 b4c07@b4bff b4c0a@p? b4c0c@make-violation b4c0e@violation? b4c10@&violation-rtd b4c12@&violation-rcd b4c18@b4c13 b4c1a@b4c15 b4c1c@b4c14 b4c1f@p? b4c21@make-assertion-violation b4c23@assertion-violation? b4c25@&assertion-rtd b4c27@&assertion-rcd b4c2f@b4c2a b4c31@b4c2c b4c33@b4c2b b4c36@p? b4c38@make-irritants-condition b4c3a@b4c29 b4c3c@irritants-condition? b4c3e@condition-irritants b4c40@&irritants-rtd b4c42@&irritants-rcd b4c4a@b4c45 b4c4c@b4c47 b4c4e@b4c46 b4c51@p? b4c53@make-who-condition b4c55@b4c44 b4c57@who-condition? b4c59@condition-who b4c5b@&who-rtd b4c5d@&who-rcd b4c63@b4c5e b4c65@b4c60 b4c67@b4c5f b4c6a@p? b4c6c@make-non-continuable-violation b4c6e@non-continuable-violation? b4c70@&non-continuable-rtd b4c72@&non-continuable-rcd b4c78@b4c73 b4c7a@b4c75 b4c7c@b4c74 b4c7f@p? b4c81@make-implementation-restriction-violation b4c83@implementation-restriction-violation? b4c85@&implementation-restriction-rtd b4c87@&implementation-restriction-rcd b4c8d@b4c88 b4c8f@b4c8a b4c91@b4c89 b4c94@p? b4c96@make-lexical-violation b4c98@lexical-violation? b4c9a@&lexical-rtd b4c9c@&lexical-rcd b4ca6@b4ca1 b4ca8@b4ca3 b4caa@b4ca2 b4cad@p? b4caf@make-syntax-violation b4cb1@b4c9e b4cb3@b4ca0 b4cb5@syntax-violation? b4cb7@syntax-violation-form b4cb9@syntax-violation-subform b4cbb@&syntax-rtd b4cbd@&syntax-rcd b4cc3@b4cbe b4cc5@b4cc0 b4cc7@b4cbf b4cca@p? b4ccc@make-undefined-violation b4cce@undefined-violation? b4cd0@&undefined-rtd b4cd2@&undefined-rcd b4cd8@b4cd3 b4cda@b4cd5 b4cdc@b4cd4 b4cdf@p? b4ce1@make-i/o-error b4ce3@i/o-error? b4ce5@&i/o-rtd b4ce7@&i/o-rcd b4ced@b4ce8 b4cef@b4cea b4cf1@b4ce9 b4cf4@p? b4cf6@make-i/o-read-error b4cf8@i/o-read-error? b4cfa@&i/o-read-rtd b4cfc@&i/o-read-rcd b4d02@b4cfd b4d04@b4cff b4d06@b4cfe b4d09@p? b4d0b@make-i/o-write-error b4d0d@i/o-write-error? b4d0f@&i/o-write-rtd b4d11@&i/o-write-rcd b4d19@b4d14 b4d1b@b4d16 b4d1d@b4d15 b4d20@p? b4d22@make-i/o-invalid-position-error b4d24@b4d13 b4d26@i/o-invalid-position-error? b4d28@i/o-error-position b4d2a@&i/o-invalid-position-rtd b4d2c@&i/o-invalid-position-rcd b4d34@b4d2f b4d36@b4d31 b4d38@b4d30 b4d3b@p? b4d3d@make-i/o-filename-error b4d3f@b4d2e b4d41@i/o-filename-error? b4d43@i/o-error-filename b4d45@&i/o-filename-rtd b4d47@&i/o-filename-rcd b4d4d@b4d48 b4d4f@b4d4a b4d51@b4d49 b4d54@p? b4d56@make-i/o-file-protection-error b4d58@i/o-file-protection-error? b4d5a@&i/o-file-protection-rtd b4d5c@&i/o-file-protection-rcd b4d62@b4d5d b4d64@b4d5f b4d66@b4d5e b4d69@p? b4d6b@make-i/o-file-is-read-only-error b4d6d@i/o-file-is-read-only-error? b4d6f@&i/o-file-is-read-only-rtd b4d71@&i/o-file-is-read-only-rcd b4d77@b4d72 b4d79@b4d74 b4d7b@b4d73 b4d7e@p? b4d80@make-i/o-file-already-exists-error b4d82@i/o-file-already-exists-error? b4d84@&i/o-file-already-exists-rtd b4d86@&i/o-file-already-exists-rcd b4d8c@b4d87 b4d8e@b4d89 b4d90@b4d88 b4d93@p? b4d95@make-i/o-file-does-not-exist-error b4d97@i/o-file-does-not-exist-error? b4d99@&i/o-file-does-not-exist-rtd b4d9b@&i/o-file-does-not-exist-rcd b4da3@b4d9e b4da5@b4da0 b4da7@b4d9f b4daa@p? b4dac@make-i/o-port-error b4dae@b4d9d b4db0@i/o-port-error? b4db2@i/o-error-port b4db4@&i/o-port-rtd b4db6@&i/o-port-rcd b4dbc@b4db7 b4dbe@b4db9 b4dc0@b4db8 b4dc3@p? b4dc5@make-i/o-decoding-error b4dc7@i/o-decoding-error? b4dc9@&i/o-decoding-rtd b4dcb@&i/o-decoding-rcd b4dd3@b4dce b4dd5@b4dd0 b4dd7@b4dcf b4dda@p? b4ddc@make-i/o-encoding-error b4dde@b4dcd b4de0@i/o-encoding-error? b4de2@i/o-encoding-error-char b4de4@&i/o-encoding-rtd b4de6@&i/o-encoding-rcd b4dec@b4de7 b4dee@b4de9 b4df0@b4de8 b4df3@p? b4df5@make-no-infinities-violation b4df7@no-infinities-violation? b4df9@&no-infinities-rtd b4dfb@&no-infinities-rcd b4e01@b4dfc b4e03@b4dfe b4e05@b4dfd b4e08@p? b4e0a@make-no-nans-violation b4e0c@no-nans-violation? b4e0e@&no-nans-rtd b4e10@&no-nans-rcd) (begin (set! b4b52@b4b4d (make-record-type-descriptor '&condition '#f 'b4b50 '#f '#f '#())) (set! b4b54@b4b4f '#f) (set! b4b56@b4b4e (make-record-constructor-descriptor b4b52@b4b4d '#f b4b54@b4b4f)) (set! b4b59@&condition? (record-predicate b4b52@b4b4d)) (set! b4b5b@make-&condition (record-constructor b4b56@b4b4e)) (set! b4b5d@&condition-rtd b4b52@b4b4d) (set! b4b5f@&condition-rcd b4b56@b4b4e) (set! b4bab@b4ba6 (make-record-type-descriptor '&message b4b52@b4b4d 'b4ba9 '#f '#f '#((immutable message)))) (set! b4bad@b4ba8 '#f) (set! b4baf@b4ba7 (make-record-constructor-descriptor b4bab@b4ba6 b4b56@b4b4e b4bad@b4ba8)) (set! b4bb2@p? (record-predicate b4bab@b4ba6)) (set! b4bb4@make-message-condition (record-constructor b4baf@b4ba7)) (set! b4bb6@b4ba5 (record-accessor b4bab@b4ba6 '0)) (set! b4bb8@message-condition? (condition-predicate b4bab@b4ba6)) (set! b4bba@condition-message (condition-accessor b4bab@b4ba6 b4bb6@b4ba5)) (set! b4bbc@&message-rtd b4bab@b4ba6) (set! b4bbe@&message-rcd b4baf@b4ba7) (set! b4bc4@b4bbf (make-record-type-descriptor '&warning b4b52@b4b4d 'b4bc2 '#f '#f '#())) (set! b4bc6@b4bc1 '#f) (set! b4bc8@b4bc0 (make-record-constructor-descriptor b4bc4@b4bbf b4b56@b4b4e b4bc6@b4bc1)) (set! b4bcb@p? (record-predicate b4bc4@b4bbf)) (set! b4bcd@make-warning (record-constructor b4bc8@b4bc0)) (set! b4bcf@warning? (condition-predicate b4bc4@b4bbf)) (set! b4bd1@&warning-rtd b4bc4@b4bbf) (set! b4bd3@&warning-rcd b4bc8@b4bc0) (set! b4bd9@b4bd4 (make-record-type-descriptor '&serious b4b52@b4b4d 'b4bd7 '#f '#f '#())) (set! b4bdb@b4bd6 '#f) (set! b4bdd@b4bd5 (make-record-constructor-descriptor b4bd9@b4bd4 b4b56@b4b4e b4bdb@b4bd6)) (set! b4be0@p? (record-predicate b4bd9@b4bd4)) (set! b4be2@make-serious-condition (record-constructor b4bdd@b4bd5)) (set! b4be4@serious-condition? (condition-predicate b4bd9@b4bd4)) (set! b4be6@&serious-rtd b4bd9@b4bd4) (set! b4be8@&serious-rcd b4bdd@b4bd5) (set! b4bee@b4be9 (make-record-type-descriptor '&error b4bd9@b4bd4 'b4bec '#f '#f '#())) (set! b4bf0@b4beb '#f) (set! b4bf2@b4bea (make-record-constructor-descriptor b4bee@b4be9 b4bdd@b4bd5 b4bf0@b4beb)) (set! b4bf5@p? (record-predicate b4bee@b4be9)) (set! b4bf7@make-error (record-constructor b4bf2@b4bea)) (set! b4bf9@error? (condition-predicate b4bee@b4be9)) (set! b4bfb@&error-rtd b4bee@b4be9) (set! b4bfd@&error-rcd b4bf2@b4bea) (set! b4c03@b4bfe (make-record-type-descriptor '&violation b4bd9@b4bd4 'b4c01 '#f '#f '#())) (set! b4c05@b4c00 '#f) (set! b4c07@b4bff (make-record-constructor-descriptor b4c03@b4bfe b4bdd@b4bd5 b4c05@b4c00)) (set! b4c0a@p? (record-predicate b4c03@b4bfe)) (set! b4c0c@make-violation (record-constructor b4c07@b4bff)) (set! b4c0e@violation? (condition-predicate b4c03@b4bfe)) (set! b4c10@&violation-rtd b4c03@b4bfe) (set! b4c12@&violation-rcd b4c07@b4bff) (set! b4c18@b4c13 (make-record-type-descriptor '&assertion b4c03@b4bfe 'b4c16 '#f '#f '#())) (set! b4c1a@b4c15 '#f) (set! b4c1c@b4c14 (make-record-constructor-descriptor b4c18@b4c13 b4c07@b4bff b4c1a@b4c15)) (set! b4c1f@p? (record-predicate b4c18@b4c13)) (set! b4c21@make-assertion-violation (record-constructor b4c1c@b4c14)) (set! b4c23@assertion-violation? (condition-predicate b4c18@b4c13)) (set! b4c25@&assertion-rtd b4c18@b4c13) (set! b4c27@&assertion-rcd b4c1c@b4c14) (set! b4c2f@b4c2a (make-record-type-descriptor '&irritants b4b52@b4b4d 'b4c2d '#f '#f '#((immutable irritants)))) (set! b4c31@b4c2c '#f) (set! b4c33@b4c2b (make-record-constructor-descriptor b4c2f@b4c2a b4b56@b4b4e b4c31@b4c2c)) (set! b4c36@p? (record-predicate b4c2f@b4c2a)) (set! b4c38@make-irritants-condition (record-constructor b4c33@b4c2b)) (set! b4c3a@b4c29 (record-accessor b4c2f@b4c2a '0)) (set! b4c3c@irritants-condition? (condition-predicate b4c2f@b4c2a)) (set! b4c3e@condition-irritants (condition-accessor b4c2f@b4c2a b4c3a@b4c29)) (set! b4c40@&irritants-rtd b4c2f@b4c2a) (set! b4c42@&irritants-rcd b4c33@b4c2b) (set! b4c4a@b4c45 (make-record-type-descriptor '&who b4b52@b4b4d 'b4c48 '#f '#f '#((immutable who)))) (set! b4c4c@b4c47 '#f) (set! b4c4e@b4c46 (make-record-constructor-descriptor b4c4a@b4c45 b4b56@b4b4e b4c4c@b4c47)) (set! b4c51@p? (record-predicate b4c4a@b4c45)) (set! b4c53@make-who-condition (record-constructor b4c4e@b4c46)) (set! b4c55@b4c44 (record-accessor b4c4a@b4c45 '0)) (set! b4c57@who-condition? (condition-predicate b4c4a@b4c45)) (set! b4c59@condition-who (condition-accessor b4c4a@b4c45 b4c55@b4c44)) (set! b4c5b@&who-rtd b4c4a@b4c45) (set! b4c5d@&who-rcd b4c4e@b4c46) (set! b4c63@b4c5e (make-record-type-descriptor '&non-continuable b4c03@b4bfe 'b4c61 '#f '#f '#())) (set! b4c65@b4c60 '#f) (set! b4c67@b4c5f (make-record-constructor-descriptor b4c63@b4c5e b4c07@b4bff b4c65@b4c60)) (set! b4c6a@p? (record-predicate b4c63@b4c5e)) (set! b4c6c@make-non-continuable-violation (record-constructor b4c67@b4c5f)) (set! b4c6e@non-continuable-violation? (condition-predicate b4c63@b4c5e)) (set! b4c70@&non-continuable-rtd b4c63@b4c5e) (set! b4c72@&non-continuable-rcd b4c67@b4c5f) (set! b4c78@b4c73 (make-record-type-descriptor '&implementation-restriction b4c03@b4bfe 'b4c76 '#f '#f '#())) (set! b4c7a@b4c75 '#f) (set! b4c7c@b4c74 (make-record-constructor-descriptor b4c78@b4c73 b4c07@b4bff b4c7a@b4c75)) (set! b4c7f@p? (record-predicate b4c78@b4c73)) (set! b4c81@make-implementation-restriction-violation (record-constructor b4c7c@b4c74)) (set! b4c83@implementation-restriction-violation? (condition-predicate b4c78@b4c73)) (set! b4c85@&implementation-restriction-rtd b4c78@b4c73) (set! b4c87@&implementation-restriction-rcd b4c7c@b4c74) (set! b4c8d@b4c88 (make-record-type-descriptor '&lexical b4c03@b4bfe 'b4c8b '#f '#f '#())) (set! b4c8f@b4c8a '#f) (set! b4c91@b4c89 (make-record-constructor-descriptor b4c8d@b4c88 b4c07@b4bff b4c8f@b4c8a)) (set! b4c94@p? (record-predicate b4c8d@b4c88)) (set! b4c96@make-lexical-violation (record-constructor b4c91@b4c89)) (set! b4c98@lexical-violation? (condition-predicate b4c8d@b4c88)) (set! b4c9a@&lexical-rtd b4c8d@b4c88) (set! b4c9c@&lexical-rcd b4c91@b4c89) (set! b4ca6@b4ca1 (make-record-type-descriptor '&syntax b4c03@b4bfe 'b4ca4 '#f '#f '#((immutable form) (immutable subform)))) (set! b4ca8@b4ca3 '#f) (set! b4caa@b4ca2 (make-record-constructor-descriptor b4ca6@b4ca1 b4c07@b4bff b4ca8@b4ca3)) (set! b4cad@p? (record-predicate b4ca6@b4ca1)) (set! b4caf@make-syntax-violation (record-constructor b4caa@b4ca2)) (set! b4cb1@b4c9e (record-accessor b4ca6@b4ca1 '0)) (set! b4cb3@b4ca0 (record-accessor b4ca6@b4ca1 '1)) (set! b4cb5@syntax-violation? (condition-predicate b4ca6@b4ca1)) (set! b4cb7@syntax-violation-form (condition-accessor b4ca6@b4ca1 b4cb1@b4c9e)) (set! b4cb9@syntax-violation-subform (condition-accessor b4ca6@b4ca1 b4cb3@b4ca0)) (set! b4cbb@&syntax-rtd b4ca6@b4ca1) (set! b4cbd@&syntax-rcd b4caa@b4ca2) (set! b4cc3@b4cbe (make-record-type-descriptor '&undefined b4c03@b4bfe 'b4cc1 '#f '#f '#())) (set! b4cc5@b4cc0 '#f) (set! b4cc7@b4cbf (make-record-constructor-descriptor b4cc3@b4cbe b4c07@b4bff b4cc5@b4cc0)) (set! b4cca@p? (record-predicate b4cc3@b4cbe)) (set! b4ccc@make-undefined-violation (record-constructor b4cc7@b4cbf)) (set! b4cce@undefined-violation? (condition-predicate b4cc3@b4cbe)) (set! b4cd0@&undefined-rtd b4cc3@b4cbe) (set! b4cd2@&undefined-rcd b4cc7@b4cbf) (set! b4cd8@b4cd3 (make-record-type-descriptor '&i/o b4bee@b4be9 'b4cd6 '#f '#f '#())) (set! b4cda@b4cd5 '#f) (set! b4cdc@b4cd4 (make-record-constructor-descriptor b4cd8@b4cd3 b4bf2@b4bea b4cda@b4cd5)) (set! b4cdf@p? (record-predicate b4cd8@b4cd3)) (set! b4ce1@make-i/o-error (record-constructor b4cdc@b4cd4)) (set! b4ce3@i/o-error? (condition-predicate b4cd8@b4cd3)) (set! b4ce5@&i/o-rtd b4cd8@b4cd3) (set! b4ce7@&i/o-rcd b4cdc@b4cd4) (set! b4ced@b4ce8 (make-record-type-descriptor '&i/o-read b4cd8@b4cd3 'b4ceb '#f '#f '#())) (set! b4cef@b4cea '#f) (set! b4cf1@b4ce9 (make-record-constructor-descriptor b4ced@b4ce8 b4cdc@b4cd4 b4cef@b4cea)) (set! b4cf4@p? (record-predicate b4ced@b4ce8)) (set! b4cf6@make-i/o-read-error (record-constructor b4cf1@b4ce9)) (set! b4cf8@i/o-read-error? (condition-predicate b4ced@b4ce8)) (set! b4cfa@&i/o-read-rtd b4ced@b4ce8) (set! b4cfc@&i/o-read-rcd b4cf1@b4ce9) (set! b4d02@b4cfd (make-record-type-descriptor '&i/o-write b4cd8@b4cd3 'b4d00 '#f '#f '#())) (set! b4d04@b4cff '#f) (set! b4d06@b4cfe (make-record-constructor-descriptor b4d02@b4cfd b4cdc@b4cd4 b4d04@b4cff)) (set! b4d09@p? (record-predicate b4d02@b4cfd)) (set! b4d0b@make-i/o-write-error (record-constructor b4d06@b4cfe)) (set! b4d0d@i/o-write-error? (condition-predicate b4d02@b4cfd)) (set! b4d0f@&i/o-write-rtd b4d02@b4cfd) (set! b4d11@&i/o-write-rcd b4d06@b4cfe) (set! b4d19@b4d14 (make-record-type-descriptor '&i/o-invalid-position b4cd8@b4cd3 'b4d17 '#f '#f '#((immutable position)))) (set! b4d1b@b4d16 '#f) (set! b4d1d@b4d15 (make-record-constructor-descriptor b4d19@b4d14 b4cdc@b4cd4 b4d1b@b4d16)) (set! b4d20@p? (record-predicate b4d19@b4d14)) (set! b4d22@make-i/o-invalid-position-error (record-constructor b4d1d@b4d15)) (set! b4d24@b4d13 (record-accessor b4d19@b4d14 '0)) (set! b4d26@i/o-invalid-position-error? (condition-predicate b4d19@b4d14)) (set! b4d28@i/o-error-position (condition-accessor b4d19@b4d14 b4d24@b4d13)) (set! b4d2a@&i/o-invalid-position-rtd b4d19@b4d14) (set! b4d2c@&i/o-invalid-position-rcd b4d1d@b4d15) (set! b4d34@b4d2f (make-record-type-descriptor '&i/o-filename b4cd8@b4cd3 'b4d32 '#f '#f '#((immutable filename)))) (set! b4d36@b4d31 '#f) (set! b4d38@b4d30 (make-record-constructor-descriptor b4d34@b4d2f b4cdc@b4cd4 b4d36@b4d31)) (set! b4d3b@p? (record-predicate b4d34@b4d2f)) (set! b4d3d@make-i/o-filename-error (record-constructor b4d38@b4d30)) (set! b4d3f@b4d2e (record-accessor b4d34@b4d2f '0)) (set! b4d41@i/o-filename-error? (condition-predicate b4d34@b4d2f)) (set! b4d43@i/o-error-filename (condition-accessor b4d34@b4d2f b4d3f@b4d2e)) (set! b4d45@&i/o-filename-rtd b4d34@b4d2f) (set! b4d47@&i/o-filename-rcd b4d38@b4d30) (set! b4d4d@b4d48 (make-record-type-descriptor '&i/o-file-protection b4d34@b4d2f 'b4d4b '#f '#f '#())) (set! b4d4f@b4d4a '#f) (set! b4d51@b4d49 (make-record-constructor-descriptor b4d4d@b4d48 b4d38@b4d30 b4d4f@b4d4a)) (set! b4d54@p? (record-predicate b4d4d@b4d48)) (set! b4d56@make-i/o-file-protection-error (record-constructor b4d51@b4d49)) (set! b4d58@i/o-file-protection-error? (condition-predicate b4d4d@b4d48)) (set! b4d5a@&i/o-file-protection-rtd b4d4d@b4d48) (set! b4d5c@&i/o-file-protection-rcd b4d51@b4d49) (set! b4d62@b4d5d (make-record-type-descriptor '&i/o-file-is-read-only b4d4d@b4d48 'b4d60 '#f '#f '#())) (set! b4d64@b4d5f '#f) (set! b4d66@b4d5e (make-record-constructor-descriptor b4d62@b4d5d b4d51@b4d49 b4d64@b4d5f)) (set! b4d69@p? (record-predicate b4d62@b4d5d)) (set! b4d6b@make-i/o-file-is-read-only-error (record-constructor b4d66@b4d5e)) (set! b4d6d@i/o-file-is-read-only-error? (condition-predicate b4d62@b4d5d)) (set! b4d6f@&i/o-file-is-read-only-rtd b4d62@b4d5d) (set! b4d71@&i/o-file-is-read-only-rcd b4d66@b4d5e) (set! b4d77@b4d72 (make-record-type-descriptor '&i/o-file-already-exists b4d34@b4d2f 'b4d75 '#f '#f '#())) (set! b4d79@b4d74 '#f) (set! b4d7b@b4d73 (make-record-constructor-descriptor b4d77@b4d72 b4d38@b4d30 b4d79@b4d74)) (set! b4d7e@p? (record-predicate b4d77@b4d72)) (set! b4d80@make-i/o-file-already-exists-error (record-constructor b4d7b@b4d73)) (set! b4d82@i/o-file-already-exists-error? (condition-predicate b4d77@b4d72)) (set! b4d84@&i/o-file-already-exists-rtd b4d77@b4d72) (set! b4d86@&i/o-file-already-exists-rcd b4d7b@b4d73) (set! b4d8c@b4d87 (make-record-type-descriptor '&i/o-file-does-not-exist b4d34@b4d2f 'b4d8a '#f '#f '#())) (set! b4d8e@b4d89 '#f) (set! b4d90@b4d88 (make-record-constructor-descriptor b4d8c@b4d87 b4d38@b4d30 b4d8e@b4d89)) (set! b4d93@p? (record-predicate b4d8c@b4d87)) (set! b4d95@make-i/o-file-does-not-exist-error (record-constructor b4d90@b4d88)) (set! b4d97@i/o-file-does-not-exist-error? (condition-predicate b4d8c@b4d87)) (set! b4d99@&i/o-file-does-not-exist-rtd b4d8c@b4d87) (set! b4d9b@&i/o-file-does-not-exist-rcd b4d90@b4d88) (set! b4da3@b4d9e (make-record-type-descriptor '&i/o-port b4cd8@b4cd3 'b4da1 '#f '#f '#((immutable port)))) (set! b4da5@b4da0 '#f) (set! b4da7@b4d9f (make-record-constructor-descriptor b4da3@b4d9e b4cdc@b4cd4 b4da5@b4da0)) (set! b4daa@p? (record-predicate b4da3@b4d9e)) (set! b4dac@make-i/o-port-error (record-constructor b4da7@b4d9f)) (set! b4dae@b4d9d (record-accessor b4da3@b4d9e '0)) (set! b4db0@i/o-port-error? (condition-predicate b4da3@b4d9e)) (set! b4db2@i/o-error-port (condition-accessor b4da3@b4d9e b4dae@b4d9d)) (set! b4db4@&i/o-port-rtd b4da3@b4d9e) (set! b4db6@&i/o-port-rcd b4da7@b4d9f) (set! b4dbc@b4db7 (make-record-type-descriptor '&i/o-decoding b4da3@b4d9e 'b4dba '#f '#f '#())) (set! b4dbe@b4db9 '#f) (set! b4dc0@b4db8 (make-record-constructor-descriptor b4dbc@b4db7 b4da7@b4d9f b4dbe@b4db9)) (set! b4dc3@p? (record-predicate b4dbc@b4db7)) (set! b4dc5@make-i/o-decoding-error (record-constructor b4dc0@b4db8)) (set! b4dc7@i/o-decoding-error? (condition-predicate b4dbc@b4db7)) (set! b4dc9@&i/o-decoding-rtd b4dbc@b4db7) (set! b4dcb@&i/o-decoding-rcd b4dc0@b4db8) (set! b4dd3@b4dce (make-record-type-descriptor '&i/o-encoding b4da3@b4d9e 'b4dd1 '#f '#f '#((immutable char)))) (set! b4dd5@b4dd0 '#f) (set! b4dd7@b4dcf (make-record-constructor-descriptor b4dd3@b4dce b4da7@b4d9f b4dd5@b4dd0)) (set! b4dda@p? (record-predicate b4dd3@b4dce)) (set! b4ddc@make-i/o-encoding-error (record-constructor b4dd7@b4dcf)) (set! b4dde@b4dcd (record-accessor b4dd3@b4dce '0)) (set! b4de0@i/o-encoding-error? (condition-predicate b4dd3@b4dce)) (set! b4de2@i/o-encoding-error-char (condition-accessor b4dd3@b4dce b4dde@b4dcd)) (set! b4de4@&i/o-encoding-rtd b4dd3@b4dce) (set! b4de6@&i/o-encoding-rcd b4dd7@b4dcf) (set! b4dec@b4de7 (make-record-type-descriptor '&no-infinities b4c78@b4c73 'b4dea '#f '#f '#())) (set! b4dee@b4de9 '#f) (set! b4df0@b4de8 (make-record-constructor-descriptor b4dec@b4de7 b4c7c@b4c74 b4dee@b4de9)) (set! b4df3@p? (record-predicate b4dec@b4de7)) (set! b4df5@make-no-infinities-violation (record-constructor b4df0@b4de8)) (set! b4df7@no-infinities-violation? (condition-predicate b4dec@b4de7)) (set! b4df9@&no-infinities-rtd b4dec@b4de7) (set! b4dfb@&no-infinities-rcd b4df0@b4de8) (set! b4e01@b4dfc (make-record-type-descriptor '&no-nans b4c78@b4c73 'b4dff '#f '#f '#())) (set! b4e03@b4dfe '#f) (set! b4e05@b4dfd (make-record-constructor-descriptor b4e01@b4dfc b4c7c@b4c74 b4e03@b4dfe)) (set! b4e08@p? (record-predicate b4e01@b4dfc)) (set! b4e0a@make-no-nans-violation (record-constructor b4e05@b4dfd)) (set! b4e0c@no-nans-violation? (condition-predicate b4e01@b4dfc)) (set! b4e0e@&no-nans-rtd b4e01@b4dfc) (set! b4e10@&no-nans-rcd b4e05@b4dfd) (begin (set! b4f01@b4e10@&no-nans-rcd b4e10@&no-nans-rcd) (set! b4f00@b4e0e@&no-nans-rtd b4e0e@&no-nans-rtd) (set! b4eff@b4e0c@no-nans-violation? b4e0c@no-nans-violation?) (set! b4efe@b4e0a@make-no-nans-violation b4e0a@make-no-nans-violation) (set! b4efd@b4e08@p? b4e08@p?) (set! b4efc@b4e05@b4dfd b4e05@b4dfd) (set! b4efb@b4e03@b4dfe b4e03@b4dfe) (set! b4efa@b4e01@b4dfc b4e01@b4dfc) (set! b4ef9@b4dfb@&no-infinities-rcd b4dfb@&no-infinities-rcd) (set! b4ef8@b4df9@&no-infinities-rtd b4df9@&no-infinities-rtd) (set! b4ef7@b4df7@no-infinities-violation? b4df7@no-infinities-violation?) (set! b4ef6@b4df5@make-no-infinities-violation b4df5@make-no-infinities-violation) (set! b4ef5@b4df3@p? b4df3@p?) (set! b4ef4@b4df0@b4de8 b4df0@b4de8) (set! b4ef3@b4dee@b4de9 b4dee@b4de9) (set! b4ef2@b4dec@b4de7 b4dec@b4de7) (set! b4ef1@b4de6@&i/o-encoding-rcd b4de6@&i/o-encoding-rcd) (set! b4ef0@b4de4@&i/o-encoding-rtd b4de4@&i/o-encoding-rtd) (set! b4eef@b4de2@i/o-encoding-error-char b4de2@i/o-encoding-error-char) (set! b4eee@b4de0@i/o-encoding-error? b4de0@i/o-encoding-error?) (set! b4eed@b4dde@b4dcd b4dde@b4dcd) (set! b4eec@b4ddc@make-i/o-encoding-error b4ddc@make-i/o-encoding-error) (set! b4eeb@b4dda@p? b4dda@p?) (set! b4eea@b4dd7@b4dcf b4dd7@b4dcf) (set! b4ee9@b4dd5@b4dd0 b4dd5@b4dd0) (set! b4ee8@b4dd3@b4dce b4dd3@b4dce) (set! b4ee7@b4dcb@&i/o-decoding-rcd b4dcb@&i/o-decoding-rcd) (set! b4ee6@b4dc9@&i/o-decoding-rtd b4dc9@&i/o-decoding-rtd) (set! b4ee5@b4dc7@i/o-decoding-error? b4dc7@i/o-decoding-error?) (set! b4ee4@b4dc5@make-i/o-decoding-error b4dc5@make-i/o-decoding-error) (set! b4ee3@b4dc3@p? b4dc3@p?) (set! b4ee2@b4dc0@b4db8 b4dc0@b4db8) (set! b4ee1@b4dbe@b4db9 b4dbe@b4db9) (set! b4ee0@b4dbc@b4db7 b4dbc@b4db7) (set! b4edf@b4db6@&i/o-port-rcd b4db6@&i/o-port-rcd) (set! b4ede@b4db4@&i/o-port-rtd b4db4@&i/o-port-rtd) (set! b4edd@b4db2@i/o-error-port b4db2@i/o-error-port) (set! b4edc@b4db0@i/o-port-error? b4db0@i/o-port-error?) (set! b4edb@b4dae@b4d9d b4dae@b4d9d) (set! b4eda@b4dac@make-i/o-port-error b4dac@make-i/o-port-error) (set! b4ed9@b4daa@p? b4daa@p?) (set! b4ed8@b4da7@b4d9f b4da7@b4d9f) (set! b4ed7@b4da5@b4da0 b4da5@b4da0) (set! b4ed6@b4da3@b4d9e b4da3@b4d9e) (set! b4ed5@b4d9b@&i/o-file-does-not-exist-rcd b4d9b@&i/o-file-does-not-exist-rcd) (set! b4ed4@b4d99@&i/o-file-does-not-exist-rtd b4d99@&i/o-file-does-not-exist-rtd) (set! b4ed3@b4d97@i/o-file-does-not-exist-error? b4d97@i/o-file-does-not-exist-error?) (set! b4ed2@b4d95@make-i/o-file-does-not-exist-error b4d95@make-i/o-file-does-not-exist-error) (set! b4ed1@b4d93@p? b4d93@p?) (set! b4ed0@b4d90@b4d88 b4d90@b4d88) (set! b4ecf@b4d8e@b4d89 b4d8e@b4d89) (set! b4ece@b4d8c@b4d87 b4d8c@b4d87) (set! b4ecd@b4d86@&i/o-file-already-exists-rcd b4d86@&i/o-file-already-exists-rcd) (set! b4ecc@b4d84@&i/o-file-already-exists-rtd b4d84@&i/o-file-already-exists-rtd) (set! b4ecb@b4d82@i/o-file-already-exists-error? b4d82@i/o-file-already-exists-error?) (set! b4eca@b4d80@make-i/o-file-already-exists-error b4d80@make-i/o-file-already-exists-error) (set! b4ec9@b4d7e@p? b4d7e@p?) (set! b4ec8@b4d7b@b4d73 b4d7b@b4d73) (set! b4ec7@b4d79@b4d74 b4d79@b4d74) (set! b4ec6@b4d77@b4d72 b4d77@b4d72) (set! b4ec5@b4d71@&i/o-file-is-read-only-rcd b4d71@&i/o-file-is-read-only-rcd) (set! b4ec4@b4d6f@&i/o-file-is-read-only-rtd b4d6f@&i/o-file-is-read-only-rtd) (set! b4ec3@b4d6d@i/o-file-is-read-only-error? b4d6d@i/o-file-is-read-only-error?) (set! b4ec2@b4d6b@make-i/o-file-is-read-only-error b4d6b@make-i/o-file-is-read-only-error) (set! b4ec1@b4d69@p? b4d69@p?) (set! b4ec0@b4d66@b4d5e b4d66@b4d5e) (set! b4ebf@b4d64@b4d5f b4d64@b4d5f) (set! b4ebe@b4d62@b4d5d b4d62@b4d5d) (set! b4ebd@b4d5c@&i/o-file-protection-rcd b4d5c@&i/o-file-protection-rcd) (set! b4ebc@b4d5a@&i/o-file-protection-rtd b4d5a@&i/o-file-protection-rtd) (set! b4ebb@b4d58@i/o-file-protection-error? b4d58@i/o-file-protection-error?) (set! b4eba@b4d56@make-i/o-file-protection-error b4d56@make-i/o-file-protection-error) (set! b4eb9@b4d54@p? b4d54@p?) (set! b4eb8@b4d51@b4d49 b4d51@b4d49) (set! b4eb7@b4d4f@b4d4a b4d4f@b4d4a) (set! b4eb6@b4d4d@b4d48 b4d4d@b4d48) (set! b4eb5@b4d47@&i/o-filename-rcd b4d47@&i/o-filename-rcd) (set! b4eb4@b4d45@&i/o-filename-rtd b4d45@&i/o-filename-rtd) (set! b4eb3@b4d43@i/o-error-filename b4d43@i/o-error-filename) (set! b4eb2@b4d41@i/o-filename-error? b4d41@i/o-filename-error?) (set! b4eb1@b4d3f@b4d2e b4d3f@b4d2e) (set! b4eb0@b4d3d@make-i/o-filename-error b4d3d@make-i/o-filename-error) (set! b4eaf@b4d3b@p? b4d3b@p?) (set! b4eae@b4d38@b4d30 b4d38@b4d30) (set! b4ead@b4d36@b4d31 b4d36@b4d31) (set! b4eac@b4d34@b4d2f b4d34@b4d2f) (set! b4eab@b4d2c@&i/o-invalid-position-rcd b4d2c@&i/o-invalid-position-rcd) (set! b4eaa@b4d2a@&i/o-invalid-position-rtd b4d2a@&i/o-invalid-position-rtd) (set! b4ea9@b4d28@i/o-error-position b4d28@i/o-error-position) (set! b4ea8@b4d26@i/o-invalid-position-error? b4d26@i/o-invalid-position-error?) (set! b4ea7@b4d24@b4d13 b4d24@b4d13) (set! b4ea6@b4d22@make-i/o-invalid-position-error b4d22@make-i/o-invalid-position-error) (set! b4ea5@b4d20@p? b4d20@p?) (set! b4ea4@b4d1d@b4d15 b4d1d@b4d15) (set! b4ea3@b4d1b@b4d16 b4d1b@b4d16) (set! b4ea2@b4d19@b4d14 b4d19@b4d14) (set! b4ea1@b4d11@&i/o-write-rcd b4d11@&i/o-write-rcd) (set! b4ea0@b4d0f@&i/o-write-rtd b4d0f@&i/o-write-rtd) (set! b4e9f@b4d0d@i/o-write-error? b4d0d@i/o-write-error?) (set! b4e9e@b4d0b@make-i/o-write-error b4d0b@make-i/o-write-error) (set! b4e9d@b4d09@p? b4d09@p?) (set! b4e9c@b4d06@b4cfe b4d06@b4cfe) (set! b4e9b@b4d04@b4cff b4d04@b4cff) (set! b4e9a@b4d02@b4cfd b4d02@b4cfd) (set! b4e99@b4cfc@&i/o-read-rcd b4cfc@&i/o-read-rcd) (set! b4e98@b4cfa@&i/o-read-rtd b4cfa@&i/o-read-rtd) (set! b4e97@b4cf8@i/o-read-error? b4cf8@i/o-read-error?) (set! b4e96@b4cf6@make-i/o-read-error b4cf6@make-i/o-read-error) (set! b4e95@b4cf4@p? b4cf4@p?) (set! b4e94@b4cf1@b4ce9 b4cf1@b4ce9) (set! b4e93@b4cef@b4cea b4cef@b4cea) (set! b4e92@b4ced@b4ce8 b4ced@b4ce8) (set! b4e91@b4ce7@&i/o-rcd b4ce7@&i/o-rcd) (set! b4e90@b4ce5@&i/o-rtd b4ce5@&i/o-rtd) (set! b4e8f@b4ce3@i/o-error? b4ce3@i/o-error?) (set! b4e8e@b4ce1@make-i/o-error b4ce1@make-i/o-error) (set! b4e8d@b4cdf@p? b4cdf@p?) (set! b4e8c@b4cdc@b4cd4 b4cdc@b4cd4) (set! b4e8b@b4cda@b4cd5 b4cda@b4cd5) (set! b4e8a@b4cd8@b4cd3 b4cd8@b4cd3) (set! b4e89@b4cd2@&undefined-rcd b4cd2@&undefined-rcd) (set! b4e88@b4cd0@&undefined-rtd b4cd0@&undefined-rtd) (set! b4e87@b4cce@undefined-violation? b4cce@undefined-violation?) (set! b4e86@b4ccc@make-undefined-violation b4ccc@make-undefined-violation) (set! b4e85@b4cca@p? b4cca@p?) (set! b4e84@b4cc7@b4cbf b4cc7@b4cbf) (set! b4e83@b4cc5@b4cc0 b4cc5@b4cc0) (set! b4e82@b4cc3@b4cbe b4cc3@b4cbe) (set! b4e81@b4cbd@&syntax-rcd b4cbd@&syntax-rcd) (set! b4e80@b4cbb@&syntax-rtd b4cbb@&syntax-rtd) (set! b4e7f@b4cb9@syntax-violation-subform b4cb9@syntax-violation-subform) (set! b4e7e@b4cb7@syntax-violation-form b4cb7@syntax-violation-form) (set! b4e7d@b4cb5@syntax-violation? b4cb5@syntax-violation?) (set! b4e7c@b4cb3@b4ca0 b4cb3@b4ca0) (set! b4e7b@b4cb1@b4c9e b4cb1@b4c9e) (set! b4e7a@b4caf@make-syntax-violation b4caf@make-syntax-violation) (set! b4e79@b4cad@p? b4cad@p?) (set! b4e78@b4caa@b4ca2 b4caa@b4ca2) (set! b4e77@b4ca8@b4ca3 b4ca8@b4ca3) (set! b4e76@b4ca6@b4ca1 b4ca6@b4ca1) (set! b4e75@b4c9c@&lexical-rcd b4c9c@&lexical-rcd) (set! b4e74@b4c9a@&lexical-rtd b4c9a@&lexical-rtd) (set! b4e73@b4c98@lexical-violation? b4c98@lexical-violation?) (set! b4e72@b4c96@make-lexical-violation b4c96@make-lexical-violation) (set! b4e71@b4c94@p? b4c94@p?) (set! b4e70@b4c91@b4c89 b4c91@b4c89) (set! b4e6f@b4c8f@b4c8a b4c8f@b4c8a) (set! b4e6e@b4c8d@b4c88 b4c8d@b4c88) (set! b4e6d@b4c87@&implementation-restriction-rcd b4c87@&implementation-restriction-rcd) (set! b4e6c@b4c85@&implementation-restriction-rtd b4c85@&implementation-restriction-rtd) (set! b4e6b@b4c83@implementation-restriction-violation? b4c83@implementation-restriction-violation?) (set! b4e6a@b4c81@make-implementation-restriction-violation b4c81@make-implementation-restriction-violation) (set! b4e69@b4c7f@p? b4c7f@p?) (set! b4e68@b4c7c@b4c74 b4c7c@b4c74) (set! b4e67@b4c7a@b4c75 b4c7a@b4c75) (set! b4e66@b4c78@b4c73 b4c78@b4c73) (set! b4e65@b4c72@&non-continuable-rcd b4c72@&non-continuable-rcd) (set! b4e64@b4c70@&non-continuable-rtd b4c70@&non-continuable-rtd) (set! b4e63@b4c6e@non-continuable-violation? b4c6e@non-continuable-violation?) (set! b4e62@b4c6c@make-non-continuable-violation b4c6c@make-non-continuable-violation) (set! b4e61@b4c6a@p? b4c6a@p?) (set! b4e60@b4c67@b4c5f b4c67@b4c5f) (set! b4e5f@b4c65@b4c60 b4c65@b4c60) (set! b4e5e@b4c63@b4c5e b4c63@b4c5e) (set! b4e5d@b4c5d@&who-rcd b4c5d@&who-rcd) (set! b4e5c@b4c5b@&who-rtd b4c5b@&who-rtd) (set! b4e5b@b4c59@condition-who b4c59@condition-who) (set! b4e5a@b4c57@who-condition? b4c57@who-condition?) (set! b4e59@b4c55@b4c44 b4c55@b4c44) (set! b4e58@b4c53@make-who-condition b4c53@make-who-condition) (set! b4e57@b4c51@p? b4c51@p?) (set! b4e56@b4c4e@b4c46 b4c4e@b4c46) (set! b4e55@b4c4c@b4c47 b4c4c@b4c47) (set! b4e54@b4c4a@b4c45 b4c4a@b4c45) (set! b4e53@b4c42@&irritants-rcd b4c42@&irritants-rcd) (set! b4e52@b4c40@&irritants-rtd b4c40@&irritants-rtd) (set! b4e51@b4c3e@condition-irritants b4c3e@condition-irritants) (set! b4e50@b4c3c@irritants-condition? b4c3c@irritants-condition?) (set! b4e4f@b4c3a@b4c29 b4c3a@b4c29) (set! b4e4e@b4c38@make-irritants-condition b4c38@make-irritants-condition) (set! b4e4d@b4c36@p? b4c36@p?) (set! b4e4c@b4c33@b4c2b b4c33@b4c2b) (set! b4e4b@b4c31@b4c2c b4c31@b4c2c) (set! b4e4a@b4c2f@b4c2a b4c2f@b4c2a) (set! b4e49@b4c27@&assertion-rcd b4c27@&assertion-rcd) (set! b4e48@b4c25@&assertion-rtd b4c25@&assertion-rtd) (set! b4e47@b4c23@assertion-violation? b4c23@assertion-violation?) (set! b4e46@b4c21@make-assertion-violation b4c21@make-assertion-violation) (set! b4e45@b4c1f@p? b4c1f@p?) (set! b4e44@b4c1c@b4c14 b4c1c@b4c14) (set! b4e43@b4c1a@b4c15 b4c1a@b4c15) (set! b4e42@b4c18@b4c13 b4c18@b4c13) (set! b4e41@b4c12@&violation-rcd b4c12@&violation-rcd) (set! b4e40@b4c10@&violation-rtd b4c10@&violation-rtd) (set! b4e3f@b4c0e@violation? b4c0e@violation?) (set! b4e3e@b4c0c@make-violation b4c0c@make-violation) (set! b4e3d@b4c0a@p? b4c0a@p?) (set! b4e3c@b4c07@b4bff b4c07@b4bff) (set! b4e3b@b4c05@b4c00 b4c05@b4c00) (set! b4e3a@b4c03@b4bfe b4c03@b4bfe) (set! b4e39@b4bfd@&error-rcd b4bfd@&error-rcd) (set! b4e38@b4bfb@&error-rtd b4bfb@&error-rtd) (set! b4e37@b4bf9@error? b4bf9@error?) (set! b4e36@b4bf7@make-error b4bf7@make-error) (set! b4e35@b4bf5@p? b4bf5@p?) (set! b4e34@b4bf2@b4bea b4bf2@b4bea) (set! b4e33@b4bf0@b4beb b4bf0@b4beb) (set! b4e32@b4bee@b4be9 b4bee@b4be9) (set! b4e31@b4be8@&serious-rcd b4be8@&serious-rcd) (set! b4e30@b4be6@&serious-rtd b4be6@&serious-rtd) (set! b4e2f@b4be4@serious-condition? b4be4@serious-condition?) (set! b4e2e@b4be2@make-serious-condition b4be2@make-serious-condition) (set! b4e2d@b4be0@p? b4be0@p?) (set! b4e2c@b4bdd@b4bd5 b4bdd@b4bd5) (set! b4e2b@b4bdb@b4bd6 b4bdb@b4bd6) (set! b4e2a@b4bd9@b4bd4 b4bd9@b4bd4) (set! b4e29@b4bd3@&warning-rcd b4bd3@&warning-rcd) (set! b4e28@b4bd1@&warning-rtd b4bd1@&warning-rtd) (set! b4e27@b4bcf@warning? b4bcf@warning?) (set! b4e26@b4bcd@make-warning b4bcd@make-warning) (set! b4e25@b4bcb@p? b4bcb@p?) (set! b4e24@b4bc8@b4bc0 b4bc8@b4bc0) (set! b4e23@b4bc6@b4bc1 b4bc6@b4bc1) (set! b4e22@b4bc4@b4bbf b4bc4@b4bbf) (set! b4e21@b4bbe@&message-rcd b4bbe@&message-rcd) (set! b4e20@b4bbc@&message-rtd b4bbc@&message-rtd) (set! b4e1f@b4bba@condition-message b4bba@condition-message) (set! b4e1e@b4bb8@message-condition? b4bb8@message-condition?) (set! b4e1d@b4bb6@b4ba5 b4bb6@b4ba5) (set! b4e1c@b4bb4@make-message-condition b4bb4@make-message-condition) (set! b4e1b@b4bb2@p? b4bb2@p?) (set! b4e1a@b4baf@b4ba7 b4baf@b4ba7) (set! b4e19@b4bad@b4ba8 b4bad@b4ba8) (set! b4e18@b4bab@b4ba6 b4bab@b4ba6) (set! b4e17@b4b5f@&condition-rcd b4b5f@&condition-rcd) (set! b4e16@b4b5d@&condition-rtd b4b5d@&condition-rtd) (set! b4e15@b4b5b@make-&condition b4b5b@make-&condition) (set! b4e14@b4b59@&condition? b4b59@&condition?) (set! b4e13@b4b56@b4b4e b4b56@b4b4e) (set! b4e12@b4b54@b4b4f b4b54@b4b4f) (set! b4e11@b4b52@b4b4d b4b52@b4b4d)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (b29f4@b29a9@current-primitive-locations (lambda (b538e@x) ((lambda (b5390@t) (if b5390@t (cdr b5390@t) '#f)) (assq b538e@x '((&no-nans-rcd . b4f01@b4e10@&no-nans-rcd) (&no-nans-rtd . b4f00@b4e0e@&no-nans-rtd) (&no-infinities-rcd . b4ef9@b4dfb@&no-infinities-rcd) (&no-infinities-rtd . b4ef8@b4df9@&no-infinities-rtd) (&i/o-encoding-rcd . b4ef1@b4de6@&i/o-encoding-rcd) (&i/o-encoding-rtd . b4ef0@b4de4@&i/o-encoding-rtd) (&i/o-decoding-rcd . b4ee7@b4dcb@&i/o-decoding-rcd) (&i/o-decoding-rtd . b4ee6@b4dc9@&i/o-decoding-rtd) (&i/o-port-rcd . b4edf@b4db6@&i/o-port-rcd) (&i/o-port-rtd . b4ede@b4db4@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . b4ed5@b4d9b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . b4ed4@b4d99@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . b4ecd@b4d86@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . b4ecc@b4d84@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . b4ec5@b4d71@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . b4ec4@b4d6f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . b4ebd@b4d5c@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . b4ebc@b4d5a@&i/o-file-protection-rtd) (&i/o-filename-rcd . b4eb5@b4d47@&i/o-filename-rcd) (&i/o-filename-rtd . b4eb4@b4d45@&i/o-filename-rtd) (&i/o-invalid-position-rcd . b4eab@b4d2c@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . b4eaa@b4d2a@&i/o-invalid-position-rtd) (&i/o-write-rcd . b4ea1@b4d11@&i/o-write-rcd) (&i/o-write-rtd . b4ea0@b4d0f@&i/o-write-rtd) (&i/o-read-rcd . b4e99@b4cfc@&i/o-read-rcd) (&i/o-read-rtd . b4e98@b4cfa@&i/o-read-rtd) (&i/o-rcd . b4e91@b4ce7@&i/o-rcd) (&i/o-rtd . b4e90@b4ce5@&i/o-rtd) (&undefined-rcd . b4e89@b4cd2@&undefined-rcd) (&undefined-rtd . b4e88@b4cd0@&undefined-rtd) (&syntax-rcd . b4e81@b4cbd@&syntax-rcd) (&syntax-rtd . b4e80@b4cbb@&syntax-rtd) (&lexical-rcd . b4e75@b4c9c@&lexical-rcd) (&lexical-rtd . b4e74@b4c9a@&lexical-rtd) (&implementation-restriction-rcd . b4e6d@b4c87@&implementation-restriction-rcd) (&implementation-restriction-rtd . b4e6c@b4c85@&implementation-restriction-rtd) (&non-continuable-rcd . b4e65@b4c72@&non-continuable-rcd) (&non-continuable-rtd . b4e64@b4c70@&non-continuable-rtd) (&who-rcd . b4e5d@b4c5d@&who-rcd) (&who-rtd . b4e5c@b4c5b@&who-rtd) (&irritants-rcd . b4e53@b4c42@&irritants-rcd) (&irritants-rtd . b4e52@b4c40@&irritants-rtd) (&assertion-rcd . b4e49@b4c27@&assertion-rcd) (&assertion-rtd . b4e48@b4c25@&assertion-rtd) (&violation-rcd . b4e41@b4c12@&violation-rcd) (&violation-rtd . b4e40@b4c10@&violation-rtd) (&error-rcd . b4e39@b4bfd@&error-rcd) (&error-rtd . b4e38@b4bfb@&error-rtd) (&serious-rcd . b4e31@b4be8@&serious-rcd) (&serious-rtd . b4e30@b4be6@&serious-rtd) (&warning-rcd . b4e29@b4bd3@&warning-rcd) (&warning-rtd . b4e28@b4bd1@&warning-rtd) (&message-rcd . b4e21@b4bbe@&message-rcd) (&message-rtd . b4e20@b4bbc@&message-rtd) (&condition-rcd . b4e17@b4b5f@&condition-rcd) (&condition-rtd . b4e16@b4b5d@&condition-rtd) (syntax-error . b4b3a@b3123@syntax-error) (syntax-dispatch . b4ad8@b3047@syntax-dispatch) (load . b503e@b4f1d@load) (interaction-environment . b4b42@b3133@interaction-environment) (library-path . b2c5b@b2a97@library-path) (make-parameter . b29a1@b2880@make-parameter) (make-variable-transformer . b4a96@b2e74@make-variable-transformer) (identifier? . b4b3d@b3129@identifier?) (generate-temporaries . b4b33@b3115@generate-temporaries) (free-identifier=? . b4b34@b3117@free-identifier=?) (syntax->datum . b4b3f@b312d@syntax->datum) (datum->syntax . b4b3e@b312b@datum->syntax) (bound-identifier=? . b4b35@b3119@bound-identifier=?) (make-i/o-write-error . b4e9e@b4d0b@make-i/o-write-error) (make-i/o-read-error . b4e96@b4cf6@make-i/o-read-error) (make-i/o-port-error . b4eda@b4dac@make-i/o-port-error) (make-i/o-invalid-position-error . b4ea6@b4d22@make-i/o-invalid-position-error) (make-i/o-filename-error . b4eb0@b4d3d@make-i/o-filename-error) (make-i/o-file-protection-error . b4eba@b4d56@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . b4ec2@b4d6b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . b4ed2@b4d95@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . b4eca@b4d80@make-i/o-file-already-exists-error) (make-i/o-error . b4e8e@b4ce1@make-i/o-error) (make-i/o-encoding-error . b4eec@b4ddc@make-i/o-encoding-error) (make-i/o-decoding-error . b4ee4@b4dc5@make-i/o-decoding-error) (i/o-write-error? . b4e9f@b4d0d@i/o-write-error?) (i/o-read-error? . b4e97@b4cf8@i/o-read-error?) (i/o-port-error? . b4edc@b4db0@i/o-port-error?) (i/o-invalid-position-error? . b4ea8@b4d26@i/o-invalid-position-error?) (i/o-filename-error? . b4eb2@b4d41@i/o-filename-error?) (i/o-file-protection-error? . b4ebb@b4d58@i/o-file-protection-error?) (i/o-file-is-read-only-error? . b4ec3@b4d6d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . b4ed3@b4d97@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . b4ecb@b4d82@i/o-file-already-exists-error?) (i/o-error? . b4e8f@b4ce3@i/o-error?) (i/o-error-position . b4ea9@b4d28@i/o-error-position) (i/o-error-port . b4edd@b4db2@i/o-error-port) (i/o-error-filename . b4eb3@b4d43@i/o-error-filename) (i/o-encoding-error? . b4eee@b4de0@i/o-encoding-error?) (i/o-encoding-error-char . b4eef@b4de2@i/o-encoding-error-char) (i/o-decoding-error? . b4ee5@b4dc7@i/o-decoding-error?) (scheme-report-environment . b4b2a@b3103@scheme-report-environment) (null-environment . b4b29@b3101@null-environment) (command-line . b503b@b4f17@command-line) (eval . b4b2c@b3107@eval) (environment . b4b28@b30ff@environment) (who-condition? . b4e5a@b4c57@who-condition?) (warning? . b4e27@b4bcf@warning?) (violation? . b4e3f@b4c0e@violation?) (undefined-violation? . b4e87@b4cce@undefined-violation?) (syntax-violation? . b4e7d@b4cb5@syntax-violation?) (syntax-violation-subform . b4e7f@b4cb9@syntax-violation-subform) (syntax-violation-form . b4e7e@b4cb7@syntax-violation-form) (syntax-violation . b4b3c@b3127@syntax-violation) (serious-condition? . b4e2f@b4be4@serious-condition?) (non-continuable-violation? . b4e63@b4c6e@non-continuable-violation?) (message-condition? . b4e1e@b4bb8@message-condition?) (make-who-condition . b4e58@b4c53@make-who-condition) (make-warning . b4e26@b4bcd@make-warning) (make-violation . b4e3e@b4c0c@make-violation) (make-undefined-violation . b4e86@b4ccc@make-undefined-violation) (make-syntax-violation . b4e7a@b4caf@make-syntax-violation) (make-serious-condition . b4e2e@b4be2@make-serious-condition) (make-non-continuable-violation . b4e62@b4c6c@make-non-continuable-violation) (make-message-condition . b4e1c@b4bb4@make-message-condition) (make-lexical-violation . b4e72@b4c96@make-lexical-violation) (make-irritants-condition . b4e4e@b4c38@make-irritants-condition) (make-implementation-restriction-violation . b4e6a@b4c81@make-implementation-restriction-violation) (make-error . b4e36@b4bf7@make-error) (make-assertion-violation . b4e46@b4c21@make-assertion-violation) (lexical-violation? . b4e73@b4c98@lexical-violation?) (irritants-condition? . b4e50@b4c3c@irritants-condition?) (implementation-restriction-violation? . b4e6b@b4c83@implementation-restriction-violation?) (error? . b4e37@b4bf9@error?) (condition-who . b4e5b@b4c59@condition-who) (condition-message . b4e1f@b4bba@condition-message) (condition-irritants . b4e51@b4c3e@condition-irritants) (assertion-violation? . b4e47@b4c23@assertion-violation?) (no-nans-violation? . b4eff@b4e0c@no-nans-violation?) (no-infinities-violation? . b4ef7@b4df7@no-infinities-violation?) (make-no-nans-violation . b4efe@b4e0a@make-no-nans-violation) (make-no-infinities-violation . b4ef6@b4df5@make-no-infinities-violation) (assertion-error . b4b39@b3121@assertion-error)))))) (b2c6b@b2ab7@install-library 'b536b '(mosh interaction) '() '() '() '() '((regexp? . b5363) (alist->eq-hash-table . b5360) (format . b535d) (string-split . b5352) (call-process . b534c) (set-current-directory! . b5348) (expand-path . b5347) (current-directory . b5346) (%spawn . b5345) (%waitpid . b5344) (simple-struct-name . b5343) (simple-struct-set! . b5342) (simple-struct-ref . b5341) (make-simple-struct . b5340) (simple-struct? . b533f) (pointer-ref-c-int64 . b533e) (pointer-ref-c-int32 . b533d) (pointer-ref-c-int16 . b533c) (pointer-ref-c-int8 . b533b) (pointer-ref-c-uint64 . b533a) (pointer-ref-c-uint32 . b5339) (pointer-ref-c-uint16 . b5338) (pointer-ref-c-uint8 . b5337) (pointer-set-c-uint64! . b5336) (pointer-set-c-uint32! . b5335) (pointer-set-c-uint16! . b5334) (pointer-set-c-uint8! . b5333) (pointer-set-c-int64! . b5332) (pointer-set-c-int32! . b5331) (pointer-set-c-int16! . b5330) (pointer-set-c-int8! . b532f) (pointer-set-c-pointer! . b532e) (pointer-set-c-double! . b532d) (pointer-set-c-float! . b532c) (pointer-set-c-long-long! . b532b) (pointer-set-c-long! . b532a) (pointer-set-c-int! . b5329) (pointer-set-c-short! . b5328) (pointer-set-c-char! . b5327) (pointer-ref-c-pointer . b5326) (pointer-ref-c-double . b5325) (pointer-ref-c-float . b5324) (pointer-ref-c-unsigned-long-long . b5323) (pointer-ref-c-signed-long-long . b5322) (pointer-ref-c-unsigned-long . b5321) (pointer-ref-c-signed-long . b5320) (pointer-ref-c-unsigned-int . b531f) (pointer-ref-c-signed-int . b531e) (pointer-ref-c-unsigned-short . b531d) (pointer-ref-c-signed-short . b531c) (pointer-ref-c-unsigned-char . b531b) (pointer-ref-c-signed-char . b531a) (pointer->integer . b5319) (integer->pointer . b5318) (pointer? . b5317) (shared-errno . b5316) (%ffi-supported? . b5315) (%ffi-pointer->string . b5314) (%ffi-call->string-or-zero . b5313) (%ffi-call->double . b5312) (%ffi-call->void* . b5311) (%ffi-call->void . b5310) (%ffi-call->char . b530f) (%ffi-call->int . b530e) (%ffi-lookup . b530d) (%ffi-open . b530c) (%fork . b530b) (%pipe . b530a) (p . b5309) (whereis . b52ee) (register . b52ed) (vm-join! . b52ec) (vm-set-value! . b52eb) (vm? . b52ea) (main-vm? . b52e9) (vm-eval . b52e8) (vm-self . b52e7) (vm-start! . b52e6) (make-vm . b52e5) (mutex-try-lock! . b52e4) (mutex-unlock! . b52e3) (mutex-lock! . b52e2) (mutex? . b52e1) (make-mutex . b52e0) (condition-variable-notify-all! . b52df) (condition-variable-notify! . b52de) (condition-variable-wait! . b52dd) (make-condition-variable . b52dc) (string-upcase . b52c5) (string-titlecase . b52c4) (string-normalize-nfkd . b52c3) (string-normalize-nfkc . b52c2) (string-normalize-nfd . b52c1) (string-normalize-nfc . b52c0) (string-foldcase . b52bf) (string-downcase . b52be) (string-ci>? . b52bd) (string-ci>=? . b52bc) (string-ci=? . b52bb) (string-ci<? . b52ba) (string-ci<=? . b52b9) (char-whitespace? . b52b8) (char-upper-case? . b52b7) (char-title-case? . b52b6) (char-numeric? . b52b5) (char-lower-case? . b52b4) (char-general-category . b52b3) (char-upcase . b52b2) (char-titlecase . b52b1) (char-foldcase . b52b0) (char-downcase . b52af) (char-ci>? . b52ae) (char-ci>=? . b52ad) (char-ci=? . b52ac) (char-ci<? . b52ab) (char-ci<=? . b52aa) (char-alphabetic? . b52a9) (make-variable-transformer . b2e73) (identifier? . b3128) (generate-temporaries . b3114) (free-identifier=? . b3116) (syntax->datum . b312c) (datum->syntax . b312a) (bound-identifier=? . b3118) (record-type-descriptor? . b52a8) (record-predicate . b52a7) (record-mutator . b52a6) (record-constructor . b52a5) (record-accessor . b52a4) (make-record-type-descriptor . b52a3) (make-record-constructor-descriptor . b52a2) (record? . b52a1) (record-type-uid . b52a0) (record-type-sealed? . b529f) (record-type-parent . b529e) (record-type-opaque? . b529d) (record-type-name . b529c) (record-type-generative? . b529b) (record-type-field-names . b529a) (record-rtd . b5299) (record-field-mutable? . b5298) (delete-file . b5297) (file-exists? . b5296) (vector-sort! . b5295) (vector-sort . b5294) (list-sort . b5293) (symbol-hash . b5292) (string-ci-hash . b5291) (string-hash . b5290) (equal-hash . b528f) (hashtable-equivalence-function . b528e) (make-hashtable . b528d) (hashtable-hash-function . b528c) (make-eqv-hashtable . b528b) (make-eq-hashtable . b528a) (hashtable? . b5289) (hashtable-update! . b5288) (hashtable-size . b5287) (hashtable-set! . b5286) (hashtable-ref . b5285) (hashtable-mutable? . b5284) (hashtable-keys . b5283) (hashtable-entries . b5282) (hashtable-delete! . b5281) (hashtable-copy . b5280) (hashtable-contains? . b527f) (hashtable-clear! . b527e) (call-with-output-file . b527d) (call-with-input-file . b527c) (write-char . b527b) (write . b527a) (with-output-to-file . b5279) (with-input-from-file . b5278) (read-char . b5277) (read . b5276) (peek-char . b5275) (open-output-file . b5274) (open-input-file . b5273) (newline . b5272) (display . b5271) (close-output-port . b5270) (close-input-port . b526f) (eof-object? . b526e) (eof-object . b526d) (current-error-port . b526c) (current-output-port . b526b) (current-input-port . b526a) (output-port? . b5269) (input-port? . b5268) (utf-8-codec . b5267) (utf-16-codec . b5266) (transcoder-error-handling-mode . b5265) (transcoder-eol-style . b5264) (transcoder-codec . b5263) (transcoded-port . b5262) (textual-port? . b5261) (string->bytevector . b5260) (standard-output-port . b525f) (standard-input-port . b525e) (standard-error-port . b525d) (set-port-position! . b525c) (put-u8 . b525b) (put-string . b525a) (put-datum . b5259) (put-char . b5258) (put-bytevector . b5257) (port? . b5256) (port-transcoder . b5255) (port-position . b5254) (port-has-set-port-position!? . b5253) (port-has-port-position? . b5252) (port-eof? . b5251) (output-port-buffer-mode . b5250) (open-string-output-port . b524f) (open-string-input-port . b524e) (open-file-output-port . b524d) (open-file-input/output-port . b524c) (open-file-input-port . b524b) (open-bytevector-output-port . b524a) (open-bytevector-input-port . b5249) (native-transcoder . b5248) (native-eol-style . b5247) (make-transcoder . b5246) (latin-1-codec . b5245) (make-i/o-write-error . b4d0a) (make-i/o-read-error . b4cf5) (make-i/o-port-error . b4dab) (make-i/o-invalid-position-error . b4d21) (make-i/o-filename-error . b4d3c) (make-i/o-file-protection-error . b4d55) (make-i/o-file-is-read-only-error . b4d6a) (make-i/o-file-does-not-exist-error . b4d94) (make-i/o-file-already-exists-error . b4d7f) (make-i/o-error . b4ce0) (make-i/o-encoding-error . b4ddb) (make-i/o-decoding-error . b4dc4) (make-custom-textual-output-port . b5244) (make-custom-textual-input/output-port . b5243) (make-custom-textual-input-port . b5242) (make-custom-binary-output-port . b5241) (make-custom-binary-input/output-port . b5240) (make-custom-binary-input-port . b523f) (make-bytevector . b523e) (lookahead-u8 . b523d) (lookahead-char . b523c) (i/o-write-error? . b4d0c) (i/o-read-error? . b4cf7) (i/o-port-error? . b4daf) (i/o-invalid-position-error? . b4d25) (i/o-filename-error? . b4d40) (i/o-file-protection-error? . b4d57) (i/o-file-is-read-only-error? . b4d6c) (i/o-file-does-not-exist-error? . b4d96) (i/o-file-already-exists-error? . b4d81) (i/o-error? . b4ce2) (i/o-error-position . b4d27) (i/o-error-port . b4db1) (i/o-error-filename . b4d42) (i/o-encoding-error? . b4ddf) (i/o-encoding-error-char . b4de1) (i/o-decoding-error? . b4dc6) (get-u8 . b523b) (get-string-n! . b523a) (get-string-n . b5239) (get-string-all . b5238) (get-line . b5237) (get-datum . b5236) (get-char . b5235) (get-bytevector-some . b5234) (get-bytevector-n! . b5233) (get-bytevector-n . b5232) (get-bytevector-all . b5231) (flush-output-port . b5230) (close-port . b522f) (exit . b5227) (command-line . b4f16) (string-fill! . b5226) (string-set! . b5225) (set-cdr! . b5224) (set-car! . b5223) (remove . b5222) (remv . b5221) (remp . b5220) (remq . b521f) (partition . b521e) (memv . b521d) (memq . b521c) (memp . b521b) (member . b521a) (exists . b5219) (for-all . b5218) (fold-right . b5217) (fold-left . b5216) (find . b5215) (filter . b5214) (cons* . b5213) (assv . b5212) (assq . b5211) (assp . b5210) (assoc . b520f) (call-with-string-output-port . b520e) (call-with-port . b520d) (call-with-bytevector-output-port . b520c) (bytevector->string . b520b) (buffer-mode? . b520a) (binary-port? . b5209) (with-exception-handler . b5208) (raise-continuable . b5207) (raise . b5206) (eval . b3106) (environment . b30fe) (make-enumeration . b5205) (enum-set=? . b5204) (enum-set-universe . b5203) (enum-set-union . b5202) (enum-set-subset? . b5201) (enum-set-projection . b5200) (enum-set-member? . b51ff) (enum-set-intersection . b51fe) (enum-set-indexer . b51fd) (enum-set-difference . b51fc) (enum-set-constructor . b51fb) (enum-set-complement . b51fa) (enum-set->list . b51f9) (who-condition? . b4c56) (warning? . b4bce) (violation? . b4c0d) (undefined-violation? . b4ccd) (syntax-violation? . b4cb4) (syntax-violation-subform . b4cb8) (syntax-violation-form . b4cb6) (syntax-violation . b3126) (simple-conditions . b51f8) (serious-condition? . b4be3) (non-continuable-violation? . b4c6d) (message-condition? . b4bb7) (make-who-condition . b4c52) (make-warning . b4bcc) (make-violation . b4c0b) (make-undefined-violation . b4ccb) (make-syntax-violation . b4cae) (make-serious-condition . b4be1) (make-non-continuable-violation . b4c6b) (make-message-condition . b4bb3) (make-lexical-violation . b4c95) (make-irritants-condition . b4c37) (make-implementation-restriction-violation . b4c80) (make-error . b4bf6) (make-assertion-violation . b4c20) (lexical-violation? . b4c97) (irritants-condition? . b4c3b) (implementation-restriction-violation? . b4c82) (error? . b4bf8) (condition-who . b4c58) (condition-predicate . b51f7) (condition-message . b4bb9) (condition-irritants . b4c3d) (condition-accessor . b51f6) (condition . b51f5) (assertion-violation? . b4c22) (condition? . b51f4) (utf32->string . b51f3) (utf16->string . b51f2) (utf8->string . b51f1) (uint-list->bytevector . b51f0) (u8-list->bytevector . b51ef) (string->utf8 . b51ee) (string->utf32 . b51ed) (string->utf16 . b51ec) (sint-list->bytevector . b51eb) (native-endianness . b51ea) (bytevector? . b51e9) (bytevector=? . b51e8) (bytevector-uint-set! . b51e7) (bytevector-uint-ref . b51e6) (bytevector-u8-set! . b51e5) (bytevector-u8-ref . b51e4) (bytevector-u64-set! . b51e3) (bytevector-u64-ref . b51e2) (bytevector-u64-native-set! . b51e1) (bytevector-u64-native-ref . b51e0) (bytevector-u32-set! . b51df) (bytevector-u32-ref . b51de) (bytevector-u32-native-set! . b51dd) (bytevector-u32-native-ref . b51dc) (bytevector-u16-set! . b51db) (bytevector-u16-ref . b51da) (bytevector-u16-native-set! . b51d9) (bytevector-u16-native-ref . b51d8) (bytevector-sint-set! . b51d7) (bytevector-sint-ref . b51d6) (bytevector-s8-set! . b51d5) (bytevector-s8-ref . b51d4) (bytevector-s64-set! . b51d3) (bytevector-s64-ref . b51d2) (bytevector-s64-native-set! . b51d1) (bytevector-s64-native-ref . b51d0) (bytevector-s32-set! . b51cf) (bytevector-s32-ref . b51ce) (bytevector-s32-native-set! . b51cd) (bytevector-s32-native-ref . b51cc) (bytevector-s16-set! . b51cb) (bytevector-s16-ref . b51ca) (bytevector-s16-native-set! . b51c9) (bytevector-s16-native-ref . b51c8) (bytevector-length . b51c7) (bytevector-ieee-single-ref . b51c6) (bytevector-ieee-single-set! . b51c5) (bytevector-ieee-single-native-set! . b51c4) (bytevector-ieee-single-native-ref . b51c3) (bytevector-ieee-double-set! . b51c2) (bytevector-ieee-double-ref . b51c1) (bytevector-ieee-double-native-set! . b51c0) (bytevector-ieee-double-native-ref . b51bf) (bytevector-fill! . b51be) (bytevector-copy! . b51bd) (bytevector-copy . b51bc) (bytevector->uint-list . b51bb) (bytevector->u8-list . b51ba) (bytevector->sint-list . b51b9) (no-nans-violation? . b4e0b) (no-infinities-violation? . b4df6) (make-no-nans-violation . b4e09) (make-no-infinities-violation . b4df4) (real->flonum . b51b8) (flzero? . b51b7) (fltruncate . b51b6) (fltan . b51b5) (flsqrt . b51b4) (flsin . b51b3) (flround . b51b2) (flpositive? . b51b1) (flonum? . b51b0) (flodd? . b51af) (flnumerator . b51ae) (flnegative? . b51ad) (flnan? . b51ac) (flmod0 . b51ab) (flmod . b51aa) (flmin . b51a9) (flmax . b51a8) (fllog . b51a7) (flinteger? . b51a6) (flinfinite? . b51a5) (flfloor . b51a4) (flfinite? . b51a3) (flexpt . b51a2) (flexp . b51a1) (fleven? . b51a0) (fldiv0-and-mod0 . b519f) (fldiv0 . b519e) (fldiv-and-mod . b519d) (fldiv . b519c) (fldenominator . b519b) (flcos . b519a) (flceiling . b5199) (flatan . b5198) (flasin . b5197) (flacos . b5196) (flabs . b5195) (fl>? . b5194) (fl>=? . b5193) (fl=? . b5192) (fl<? . b5191) (fl<=? . b5190) (fl/ . b518f) (fl- . b518e) (fl+ . b518d) (fl* . b518c) (fixnum->flonum . b518b) (fxzero? . b518a) (fxxor . b5189) (fxrotate-bit-field . b5188) (fxreverse-bit-field . b5187) (fxpositive? . b5186) (fxodd? . b5185) (fxnot . b5184) (fxnegative? . b5183) (fxmod0 . b5182) (fxmod . b5181) (fxmin . b5180) (fxmax . b517f) (fxlength . b517e) (fxior . b517d) (fxif . b517c) (fxfirst-bit-set . b517b) (fxeven? . b517a) (fxdiv0-and-mod0 . b5179) (fxdiv0 . b5178) (fxdiv-and-mod . b5177) (fxdiv . b5176) (fxcopy-bit-field . b5175) (fxcopy-bit . b5174) (fxbit-set? . b5173) (fxbit-field . b5172) (fxbit-count . b5171) (fxarithmetic-shift-right . b5170) (fxarithmetic-shift-left . b516f) (fxarithmetic-shift . b516e) (fxand . b516d) (fx>? . b516c) (fx>=? . b516b) (fx=? . b516a) (fx<? . b5169) (fx<=? . b5168) (fx-/carry . b5167) (fx- . b5166) (fx+/carry . b5165) (fx+ . b5164) (fx*/carry . b5163) (fx* . b5162) (greatest-fixnum . b5161) (least-fixnum . b5160) (fixnum-width . b515f) (fixnum? . b515e) (bitwise-rotate-bit-field . b515d) (bitwise-reverse-bit-field . b515c) (bitwise-length . b515b) (bitwise-if . b515a) (bitwise-first-bit-set . b5159) (bitwise-copy-bit-field . b5158) (bitwise-copy-bit . b5157) (bitwise-bit-set? . b5156) (bitwise-bit-field . b5155) (bitwise-bit-count . b5154) (bitwise-xor . b5153) (bitwise-ior . b5152) (bitwise-and . b5151) (bitwise-not . b5150) (bitwise-arithmetic-shift-right . b514f) (bitwise-arithmetic-shift-left . b514e) (bitwise-arithmetic-shift . b514d) (zero? . b514c) (vector? . b514b) (vector-set! . b514a) (vector-ref . b5149) (vector-map . b5148) (vector-length . b5147) (vector-for-each . b5146) (vector-fill! . b5145) (vector->list . b5144) (vector . b5143) (values . b5142) (truncate . b5141) (tan . b5140) (symbol? . b513f) (symbol=? . b513e) (symbol->string . b513d) (substring . b513c) (string? . b513b) (string>? . b513a) (string>=? . b5139) (string=? . b5138) (string<? . b5137) (string<=? . b5136) (string-ref . b5135) (string-length . b5134) (string-for-each . b5133) (string-copy . b5132) (string-append . b5131) (string->symbol . b5130) (string->number . b512f) (string->list . b512e) (string . b512d) (sqrt . b512c) (sin . b512b) (round . b512a) (reverse . b5129) (real? . b5128) (real-valued? . b5127) (real-part . b5126) (rationalize . b5125) (rational? . b5124) (rational-valued? . b5123) (procedure? . b5122) (positive? . b5121) (pair? . b5120) (odd? . b511f) (numerator . b511e) (number? . b511d) (number->string . b511c) (null? . b511b) (not . b511a) (negative? . b5119) (nan? . b5118) (min . b5117) (max . b5116) (map . b5115) (make-vector . b5114) (make-string . b5113) (make-rectangular . b5112) (make-polar . b5111) (magnitude . b5110) (log . b510f) (list? . b510e) (list-tail . b510d) (list-ref . b510c) (list->vector . b510b) (list->string . b510a) (list . b5109) (length . b5108) (lcm . b5107) (integer? . b5106) (integer-valued? . b5105) (integer->char . b5104) (infinite? . b5103) (inexact? . b5102) (inexact . b5101) (imag-part . b5100) (gcd . b50ff) (for-each . b50fe) (floor . b50fd) (finite? . b50fc) (expt . b50fb) (exp . b50fa) (exact? . b50f9) (exact-integer-sqrt . b50f8) (exact . b50f7) (even? . b50f6) (error . b50f5) (eqv? . b50f4) (equal? . b50f3) (eq? . b50f2) (dynamic-wind . b50f1) (div0-and-mod0 . b50f0) (mod0 . b50ef) (div0 . b50ee) (div-and-mod . b50ed) (mod . b50ec) (div . b50eb) (denominator . b50ea) (cos . b50e9) (cons . b50e8) (complex? . b50e7) (char? . b50e6) (char>? . b50e5) (char>=? . b50e4) (char=? . b50e3) (char<? . b50e2) (char<=? . b50e1) (char->integer . b50e0) (ceiling . b50df) (call-with-values . b50de) (call/cc . b50dd) (call-with-current-continuation . b50dc) (cddddr . b50db) (cdddar . b50da) (cddadr . b50d9) (cddaar . b50d8) (cdaddr . b50d7) (cdadar . b50d6) (cdaadr . b50d5) (cdaaar . b50d4) (cadddr . b50d3) (caddar . b50d2) (cadadr . b50d1) (cadaar . b50d0) (caaddr . b50cf) (caadar . b50ce) (caaadr . b50cd) (caaaar . b50cc) (cdddr . b50cb) (cddar . b50ca) (cdadr . b50c9) (cdaar . b50c8) (caddr . b50c7) (cadar . b50c6) (caadr . b50c5) (caaar . b50c4) (cddr . b50c3) (cdar . b50c2) (cadr . b50c1) (caar . b50c0) (cdr . b50bf) (car . b50be) (boolean? . b50bd) (boolean=? . b50bc) (atan . b50bb) (assertion-violation . b50ba) (asin . b50b9) (apply . b50b8) (append . b50b7) (angle . b50b6) (acos . b50b5) (abs . b50b4) (/ . b50b3) (* . b50b2) (- . b50b1) (+ . b50b0) (>= . b50af) (> . b50ae) (= . b50ad) (<= . b50ac) (< . b50ab) (library . b50aa) (&no-nans . b50a9) (&no-infinities . b50a8) (&i/o-encoding . b50a7) (&i/o-decoding . b50a6) (&i/o-port . b50a5) (&i/o-file-does-not-exist . b50a4) (&i/o-file-already-exists . b50a3) (&i/o-file-is-read-only . b50a2) (&i/o-file-protection . b50a1) (&i/o-filename . b50a0) (&i/o-invalid-position . b509f) (&i/o-write . b509e) (&i/o-read . b509d) (&i/o . b509c) (&undefined . b509b) (&syntax . b509a) (&lexical . b5099) (&implementation-restriction . b5098) (&non-continuable . b5097) (&who . b5096) (&irritants . b5095) (&assertion . b5094) (&violation . b5093) (&error . b5092) (&serious . b5091) (&warning . b5090) (&message . b508f) (&condition . b508e) (define-condition-type . b508d) (define-enumeration . b508c) (define-record-type . b508b) (parent-rtd . b508a) (nongenerative . b5089) (opaque . b5088) (sealed . b5087) (protocol . b5086) (parent . b5085) (immutable . b5084) (mutable . b5083) (fields . b5082) (error-handling-mode . b5081) (file-options . b5080) (buffer-mode . b507f) (eol-style . b507e) (guard . b507d) (unsyntax-splicing . b507a) (unsyntax . b5079) (unquote-splicing . b5078) (unquote . b5077) (_ . b5076) (else . b5075) (=> . b5074) (... . b5073) (assert . b5072) (endianness . b5071) (time . b506f) (do . b506e) (cond . b506d) (let* . b506c) (let . b506b) (let*-values . b506a) (let-values . b5069) (identifier-syntax . b5068) (with-syntax . b5067) (quasisyntax . b5066) (quasiquote . b5065) (syntax-rules . b5064) (include . b5063) (record-constructor-descriptor . b5061) (record-type-descriptor . b5060) (case . b505f) (unless . b505d) (when . b505c) (or . b505b) (and . b505a) (if . b5059) (letrec* . b5058) (letrec . b5057) (case-lambda . b5055) (lambda . b5054) (syntax . b5053) (syntax-case . b5052) (quote . b5051) (letrec-syntax . b504f) (let-syntax . b504e) (set! . b504d) (import . b504c) (begin . b504b) (define-syntax . b5049) (define . b5048)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b536c '(psyntax null-environment-5) '() '() '() '() '((make-promise . b5228) (unquote-splicing . b5078) (unquote . b5077) (_ . b5076) (else . b5075) (=> . b5074) (... . b5073) (delay . b5070) (do . b506e) (cond . b506d) (let* . b506c) (let . b506b) (quasiquote . b5065) (syntax-rules . b5064) (case . b505f) (or . b505b) (and . b505a) (if . b5059) (letrec . b5057) (lambda . b5054) (quote . b5051) (letrec-syntax . b504f) (let-syntax . b504e) (set! . b504d) (begin . b504b) (define-syntax . b5049) (define . b5048)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b536d '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . b52bd) (string-ci>=? . b52bc) (string-ci=? . b52bb) (string-ci<? . b52ba) (string-ci<=? . b52b9) (char-whitespace? . b52b8) (char-upper-case? . b52b7) (char-numeric? . b52b5) (char-lower-case? . b52b4) (char-upcase . b52b2) (char-downcase . b52af) (char-ci>? . b52ae) (char-ci>=? . b52ad) (char-ci=? . b52ac) (char-ci<? . b52ab) (char-ci<=? . b52aa) (char-alphabetic? . b52a9) (call-with-output-file . b527d) (call-with-input-file . b527c) (write-char . b527b) (write . b527a) (with-output-to-file . b5279) (with-input-from-file . b5278) (read-char . b5277) (read . b5276) (peek-char . b5275) (open-output-file . b5274) (open-input-file . b5273) (newline . b5272) (display . b5271) (close-output-port . b5270) (close-input-port . b526f) (eof-object . b526d) (current-output-port . b526b) (current-input-port . b526a) (output-port? . b5269) (input-port? . b5268) (scheme-report-environment . b3102) (quotient . b522e) (null-environment . b3100) (remainder . b522d) (modulo . b522c) (inexact->exact . b522b) (force . b522a) (exact->inexact . b5229) (make-promise . b5228) (string-fill! . b5226) (string-set! . b5225) (set-cdr! . b5224) (set-car! . b5223) (memv . b521d) (memq . b521c) (member . b521a) (assv . b5212) (assq . b5211) (assoc . b520f) (eval . b3106) (zero? . b514c) (vector? . b514b) (vector-set! . b514a) (vector-ref . b5149) (vector-length . b5147) (vector-fill! . b5145) (vector->list . b5144) (vector . b5143) (values . b5142) (truncate . b5141) (tan . b5140) (symbol? . b513f) (symbol->string . b513d) (substring . b513c) (string? . b513b) (string>? . b513a) (string>=? . b5139) (string=? . b5138) (string<? . b5137) (string<=? . b5136) (string-ref . b5135) (string-length . b5134) (string-copy . b5132) (string-append . b5131) (string->symbol . b5130) (string->number . b512f) (string->list . b512e) (string . b512d) (sqrt . b512c) (sin . b512b) (round . b512a) (reverse . b5129) (real? . b5128) (real-part . b5126) (rationalize . b5125) (rational? . b5124) (procedure? . b5122) (positive? . b5121) (pair? . b5120) (odd? . b511f) (numerator . b511e) (number? . b511d) (number->string . b511c) (not . b511a) (negative? . b5119) (min . b5117) (max . b5116) (map . b5115) (make-vector . b5114) (make-string . b5113) (make-rectangular . b5112) (make-polar . b5111) (magnitude . b5110) (log . b510f) (list? . b510e) (list-tail . b510d) (list-ref . b510c) (list->vector . b510b) (list->string . b510a) (list . b5109) (length . b5108) (lcm . b5107) (integer? . b5106) (integer->char . b5104) (inexact? . b5102) (imag-part . b5100) (gcd . b50ff) (for-each . b50fe) (floor . b50fd) (expt . b50fb) (exp . b50fa) (exact? . b50f9) (even? . b50f6) (eqv? . b50f4) (equal? . b50f3) (eq? . b50f2) (dynamic-wind . b50f1) (denominator . b50ea) (cos . b50e9) (cons . b50e8) (complex? . b50e7) (char? . b50e6) (char>? . b50e5) (char>=? . b50e4) (char=? . b50e3) (char<? . b50e2) (char<=? . b50e1) (char->integer . b50e0) (ceiling . b50df) (call-with-values . b50de) (call-with-current-continuation . b50dc) (cddddr . b50db) (cdddar . b50da) (cddadr . b50d9) (cddaar . b50d8) (cdaddr . b50d7) (cdadar . b50d6) (cdaadr . b50d5) (cdaaar . b50d4) (cadddr . b50d3) (caddar . b50d2) (cadadr . b50d1) (cadaar . b50d0) (caaddr . b50cf) (caadar . b50ce) (caaadr . b50cd) (caaaar . b50cc) (cdddr . b50cb) (cddar . b50ca) (cdadr . b50c9) (cdaar . b50c8) (caddr . b50c7) (cadar . b50c6) (caadr . b50c5) (caaar . b50c4) (cddr . b50c3) (cdar . b50c2) (cadr . b50c1) (caar . b50c0) (cdr . b50bf) (car . b50be) (boolean? . b50bd) (atan . b50bb) (asin . b50b9) (apply . b50b8) (append . b50b7) (angle . b50b6) (acos . b50b5) (abs . b50b4) (/ . b50b3) (* . b50b2) (- . b50b1) (+ . b50b0) (>= . b50af) (> . b50ae) (= . b50ad) (<= . b50ac) (< . b50ab) (unquote-splicing . b5078) (unquote . b5077) (else . b5075) (=> . b5074) (... . b5073) (delay . b5070) (do . b506e) (cond . b506d) (let* . b506c) (let . b506b) (quasiquote . b5065) (syntax-rules . b5064) (case . b505f) (or . b505b) (and . b505a) (if . b5059) (letrec . b5057) (lambda . b5054) (quote . b5051) (letrec-syntax . b504f) (let-syntax . b504e) (set! . b504d) (begin . b504b) (define-syntax . b5049) (define . b5048)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b536e '(psyntax modules) '() '() '() '() '((module . b504a)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b536f '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5370 '(rnrs) '(6) '() '() '() '((regexp? . b5363) (string-upcase . b52c5) (string-titlecase . b52c4) (string-normalize-nfkd . b52c3) (string-normalize-nfkc . b52c2) (string-normalize-nfd . b52c1) (string-normalize-nfc . b52c0) (string-foldcase . b52bf) (string-downcase . b52be) (string-ci>? . b52bd) (string-ci>=? . b52bc) (string-ci=? . b52bb) (string-ci<? . b52ba) (string-ci<=? . b52b9) (char-whitespace? . b52b8) (char-upper-case? . b52b7) (char-title-case? . b52b6) (char-numeric? . b52b5) (char-lower-case? . b52b4) (char-general-category . b52b3) (char-upcase . b52b2) (char-titlecase . b52b1) (char-foldcase . b52b0) (char-downcase . b52af) (char-ci>? . b52ae) (char-ci>=? . b52ad) (char-ci=? . b52ac) (char-ci<? . b52ab) (char-ci<=? . b52aa) (char-alphabetic? . b52a9) (make-variable-transformer . b2e73) (identifier? . b3128) (generate-temporaries . b3114) (free-identifier=? . b3116) (syntax->datum . b312c) (datum->syntax . b312a) (bound-identifier=? . b3118) (record-type-descriptor? . b52a8) (record-predicate . b52a7) (record-mutator . b52a6) (record-constructor . b52a5) (record-accessor . b52a4) (make-record-type-descriptor . b52a3) (make-record-constructor-descriptor . b52a2) (record? . b52a1) (record-type-uid . b52a0) (record-type-sealed? . b529f) (record-type-parent . b529e) (record-type-opaque? . b529d) (record-type-name . b529c) (record-type-generative? . b529b) (record-type-field-names . b529a) (record-rtd . b5299) (record-field-mutable? . b5298) (delete-file . b5297) (file-exists? . b5296) (vector-sort! . b5295) (vector-sort . b5294) (list-sort . b5293) (symbol-hash . b5292) (string-ci-hash . b5291) (string-hash . b5290) (equal-hash . b528f) (hashtable-equivalence-function . b528e) (make-hashtable . b528d) (hashtable-hash-function . b528c) (make-eqv-hashtable . b528b) (make-eq-hashtable . b528a) (hashtable? . b5289) (hashtable-update! . b5288) (hashtable-size . b5287) (hashtable-set! . b5286) (hashtable-ref . b5285) (hashtable-mutable? . b5284) (hashtable-keys . b5283) (hashtable-entries . b5282) (hashtable-delete! . b5281) (hashtable-copy . b5280) (hashtable-contains? . b527f) (hashtable-clear! . b527e) (call-with-output-file . b527d) (call-with-input-file . b527c) (write-char . b527b) (write . b527a) (with-output-to-file . b5279) (with-input-from-file . b5278) (read-char . b5277) (read . b5276) (peek-char . b5275) (open-output-file . b5274) (open-input-file . b5273) (newline . b5272) (display . b5271) (close-output-port . b5270) (close-input-port . b526f) (eof-object? . b526e) (eof-object . b526d) (current-error-port . b526c) (current-output-port . b526b) (current-input-port . b526a) (output-port? . b5269) (input-port? . b5268) (utf-8-codec . b5267) (utf-16-codec . b5266) (transcoder-error-handling-mode . b5265) (transcoder-eol-style . b5264) (transcoder-codec . b5263) (transcoded-port . b5262) (textual-port? . b5261) (string->bytevector . b5260) (standard-output-port . b525f) (standard-input-port . b525e) (standard-error-port . b525d) (set-port-position! . b525c) (put-u8 . b525b) (put-string . b525a) (put-datum . b5259) (put-char . b5258) (put-bytevector . b5257) (port? . b5256) (port-transcoder . b5255) (port-position . b5254) (port-has-set-port-position!? . b5253) (port-has-port-position? . b5252) (port-eof? . b5251) (output-port-buffer-mode . b5250) (open-string-output-port . b524f) (open-string-input-port . b524e) (open-file-output-port . b524d) (open-file-input/output-port . b524c) (open-file-input-port . b524b) (open-bytevector-output-port . b524a) (open-bytevector-input-port . b5249) (native-transcoder . b5248) (native-eol-style . b5247) (make-transcoder . b5246) (latin-1-codec . b5245) (make-i/o-write-error . b4d0a) (make-i/o-read-error . b4cf5) (make-i/o-port-error . b4dab) (make-i/o-invalid-position-error . b4d21) (make-i/o-filename-error . b4d3c) (make-i/o-file-protection-error . b4d55) (make-i/o-file-is-read-only-error . b4d6a) (make-i/o-file-does-not-exist-error . b4d94) (make-i/o-file-already-exists-error . b4d7f) (make-i/o-error . b4ce0) (make-i/o-encoding-error . b4ddb) (make-i/o-decoding-error . b4dc4) (make-custom-textual-output-port . b5244) (make-custom-textual-input/output-port . b5243) (make-custom-textual-input-port . b5242) (make-custom-binary-output-port . b5241) (make-custom-binary-input/output-port . b5240) (make-custom-binary-input-port . b523f) (make-bytevector . b523e) (lookahead-u8 . b523d) (lookahead-char . b523c) (i/o-write-error? . b4d0c) (i/o-read-error? . b4cf7) (i/o-port-error? . b4daf) (i/o-invalid-position-error? . b4d25) (i/o-filename-error? . b4d40) (i/o-file-protection-error? . b4d57) (i/o-file-is-read-only-error? . b4d6c) (i/o-file-does-not-exist-error? . b4d96) (i/o-file-already-exists-error? . b4d81) (i/o-error? . b4ce2) (i/o-error-position . b4d27) (i/o-error-port . b4db1) (i/o-error-filename . b4d42) (i/o-encoding-error? . b4ddf) (i/o-encoding-error-char . b4de1) (i/o-decoding-error? . b4dc6) (get-u8 . b523b) (get-string-n! . b523a) (get-string-n . b5239) (get-string-all . b5238) (get-line . b5237) (get-datum . b5236) (get-char . b5235) (get-bytevector-some . b5234) (get-bytevector-n! . b5233) (get-bytevector-n . b5232) (get-bytevector-all . b5231) (flush-output-port . b5230) (close-port . b522f) (exit . b5227) (command-line . b4f16) (remove . b5222) (remv . b5221) (remp . b5220) (remq . b521f) (partition . b521e) (memv . b521d) (memq . b521c) (memp . b521b) (member . b521a) (exists . b5219) (for-all . b5218) (fold-right . b5217) (fold-left . b5216) (find . b5215) (filter . b5214) (cons* . b5213) (assv . b5212) (assq . b5211) (assp . b5210) (assoc . b520f) (call-with-string-output-port . b520e) (call-with-port . b520d) (call-with-bytevector-output-port . b520c) (bytevector->string . b520b) (buffer-mode? . b520a) (binary-port? . b5209) (with-exception-handler . b5208) (raise-continuable . b5207) (raise . b5206) (make-enumeration . b5205) (enum-set=? . b5204) (enum-set-universe . b5203) (enum-set-union . b5202) (enum-set-subset? . b5201) (enum-set-projection . b5200) (enum-set-member? . b51ff) (enum-set-intersection . b51fe) (enum-set-indexer . b51fd) (enum-set-difference . b51fc) (enum-set-constructor . b51fb) (enum-set-complement . b51fa) (enum-set->list . b51f9) (who-condition? . b4c56) (warning? . b4bce) (violation? . b4c0d) (undefined-violation? . b4ccd) (syntax-violation? . b4cb4) (syntax-violation-subform . b4cb8) (syntax-violation-form . b4cb6) (syntax-violation . b3126) (simple-conditions . b51f8) (serious-condition? . b4be3) (non-continuable-violation? . b4c6d) (message-condition? . b4bb7) (make-who-condition . b4c52) (make-warning . b4bcc) (make-violation . b4c0b) (make-undefined-violation . b4ccb) (make-syntax-violation . b4cae) (make-serious-condition . b4be1) (make-non-continuable-violation . b4c6b) (make-message-condition . b4bb3) (make-lexical-violation . b4c95) (make-irritants-condition . b4c37) (make-implementation-restriction-violation . b4c80) (make-error . b4bf6) (make-assertion-violation . b4c20) (lexical-violation? . b4c97) (irritants-condition? . b4c3b) (implementation-restriction-violation? . b4c82) (error? . b4bf8) (condition-who . b4c58) (condition-predicate . b51f7) (condition-message . b4bb9) (condition-irritants . b4c3d) (condition-accessor . b51f6) (condition . b51f5) (assertion-violation? . b4c22) (condition? . b51f4) (utf32->string . b51f3) (utf16->string . b51f2) (utf8->string . b51f1) (uint-list->bytevector . b51f0) (u8-list->bytevector . b51ef) (string->utf8 . b51ee) (string->utf32 . b51ed) (string->utf16 . b51ec) (sint-list->bytevector . b51eb) (native-endianness . b51ea) (bytevector? . b51e9) (bytevector=? . b51e8) (bytevector-uint-set! . b51e7) (bytevector-uint-ref . b51e6) (bytevector-u8-set! . b51e5) (bytevector-u8-ref . b51e4) (bytevector-u64-set! . b51e3) (bytevector-u64-ref . b51e2) (bytevector-u64-native-set! . b51e1) (bytevector-u64-native-ref . b51e0) (bytevector-u32-set! . b51df) (bytevector-u32-ref . b51de) (bytevector-u32-native-set! . b51dd) (bytevector-u32-native-ref . b51dc) (bytevector-u16-set! . b51db) (bytevector-u16-ref . b51da) (bytevector-u16-native-set! . b51d9) (bytevector-u16-native-ref . b51d8) (bytevector-sint-set! . b51d7) (bytevector-sint-ref . b51d6) (bytevector-s8-set! . b51d5) (bytevector-s8-ref . b51d4) (bytevector-s64-set! . b51d3) (bytevector-s64-ref . b51d2) (bytevector-s64-native-set! . b51d1) (bytevector-s64-native-ref . b51d0) (bytevector-s32-set! . b51cf) (bytevector-s32-ref . b51ce) (bytevector-s32-native-set! . b51cd) (bytevector-s32-native-ref . b51cc) (bytevector-s16-set! . b51cb) (bytevector-s16-ref . b51ca) (bytevector-s16-native-set! . b51c9) (bytevector-s16-native-ref . b51c8) (bytevector-length . b51c7) (bytevector-ieee-single-ref . b51c6) (bytevector-ieee-single-set! . b51c5) (bytevector-ieee-single-native-set! . b51c4) (bytevector-ieee-single-native-ref . b51c3) (bytevector-ieee-double-set! . b51c2) (bytevector-ieee-double-ref . b51c1) (bytevector-ieee-double-native-set! . b51c0) (bytevector-ieee-double-native-ref . b51bf) (bytevector-fill! . b51be) (bytevector-copy! . b51bd) (bytevector-copy . b51bc) (bytevector->uint-list . b51bb) (bytevector->u8-list . b51ba) (bytevector->sint-list . b51b9) (no-nans-violation? . b4e0b) (no-infinities-violation? . b4df6) (make-no-nans-violation . b4e09) (make-no-infinities-violation . b4df4) (real->flonum . b51b8) (flzero? . b51b7) (fltruncate . b51b6) (fltan . b51b5) (flsqrt . b51b4) (flsin . b51b3) (flround . b51b2) (flpositive? . b51b1) (flonum? . b51b0) (flodd? . b51af) (flnumerator . b51ae) (flnegative? . b51ad) (flnan? . b51ac) (flmod0 . b51ab) (flmod . b51aa) (flmin . b51a9) (flmax . b51a8) (fllog . b51a7) (flinteger? . b51a6) (flinfinite? . b51a5) (flfloor . b51a4) (flfinite? . b51a3) (flexpt . b51a2) (flexp . b51a1) (fleven? . b51a0) (fldiv0-and-mod0 . b519f) (fldiv0 . b519e) (fldiv-and-mod . b519d) (fldiv . b519c) (fldenominator . b519b) (flcos . b519a) (flceiling . b5199) (flatan . b5198) (flasin . b5197) (flacos . b5196) (flabs . b5195) (fl>? . b5194) (fl>=? . b5193) (fl=? . b5192) (fl<? . b5191) (fl<=? . b5190) (fl/ . b518f) (fl- . b518e) (fl+ . b518d) (fl* . b518c) (fixnum->flonum . b518b) (fxzero? . b518a) (fxxor . b5189) (fxrotate-bit-field . b5188) (fxreverse-bit-field . b5187) (fxpositive? . b5186) (fxodd? . b5185) (fxnot . b5184) (fxnegative? . b5183) (fxmod0 . b5182) (fxmod . b5181) (fxmin . b5180) (fxmax . b517f) (fxlength . b517e) (fxior . b517d) (fxif . b517c) (fxfirst-bit-set . b517b) (fxeven? . b517a) (fxdiv0-and-mod0 . b5179) (fxdiv0 . b5178) (fxdiv-and-mod . b5177) (fxdiv . b5176) (fxcopy-bit-field . b5175) (fxcopy-bit . b5174) (fxbit-set? . b5173) (fxbit-field . b5172) (fxbit-count . b5171) (fxarithmetic-shift-right . b5170) (fxarithmetic-shift-left . b516f) (fxarithmetic-shift . b516e) (fxand . b516d) (fx>? . b516c) (fx>=? . b516b) (fx=? . b516a) (fx<? . b5169) (fx<=? . b5168) (fx-/carry . b5167) (fx- . b5166) (fx+/carry . b5165) (fx+ . b5164) (fx*/carry . b5163) (fx* . b5162) (greatest-fixnum . b5161) (least-fixnum . b5160) (fixnum-width . b515f) (fixnum? . b515e) (bitwise-rotate-bit-field . b515d) (bitwise-reverse-bit-field . b515c) (bitwise-length . b515b) (bitwise-if . b515a) (bitwise-first-bit-set . b5159) (bitwise-copy-bit-field . b5158) (bitwise-copy-bit . b5157) (bitwise-bit-set? . b5156) (bitwise-bit-field . b5155) (bitwise-bit-count . b5154) (bitwise-xor . b5153) (bitwise-ior . b5152) (bitwise-and . b5151) (bitwise-not . b5150) (bitwise-arithmetic-shift-right . b514f) (bitwise-arithmetic-shift-left . b514e) (bitwise-arithmetic-shift . b514d) (zero? . b514c) (vector? . b514b) (vector-set! . b514a) (vector-ref . b5149) (vector-map . b5148) (vector-length . b5147) (vector-for-each . b5146) (vector-fill! . b5145) (vector->list . b5144) (vector . b5143) (values . b5142) (truncate . b5141) (tan . b5140) (symbol? . b513f) (symbol=? . b513e) (symbol->string . b513d) (substring . b513c) (string? . b513b) (string>? . b513a) (string>=? . b5139) (string=? . b5138) (string<? . b5137) (string<=? . b5136) (string-ref . b5135) (string-length . b5134) (string-for-each . b5133) (string-copy . b5132) (string-append . b5131) (string->symbol . b5130) (string->number . b512f) (string->list . b512e) (string . b512d) (sqrt . b512c) (sin . b512b) (round . b512a) (reverse . b5129) (real? . b5128) (real-valued? . b5127) (real-part . b5126) (rationalize . b5125) (rational? . b5124) (rational-valued? . b5123) (procedure? . b5122) (positive? . b5121) (pair? . b5120) (odd? . b511f) (numerator . b511e) (number? . b511d) (number->string . b511c) (null? . b511b) (not . b511a) (negative? . b5119) (nan? . b5118) (min . b5117) (max . b5116) (map . b5115) (make-vector . b5114) (make-string . b5113) (make-rectangular . b5112) (make-polar . b5111) (magnitude . b5110) (log . b510f) (list? . b510e) (list-tail . b510d) (list-ref . b510c) (list->vector . b510b) (list->string . b510a) (list . b5109) (length . b5108) (lcm . b5107) (integer? . b5106) (integer-valued? . b5105) (integer->char . b5104) (infinite? . b5103) (inexact? . b5102) (inexact . b5101) (imag-part . b5100) (gcd . b50ff) (for-each . b50fe) (floor . b50fd) (finite? . b50fc) (expt . b50fb) (exp . b50fa) (exact? . b50f9) (exact-integer-sqrt . b50f8) (exact . b50f7) (even? . b50f6) (error . b50f5) (eqv? . b50f4) (equal? . b50f3) (eq? . b50f2) (dynamic-wind . b50f1) (div0-and-mod0 . b50f0) (mod0 . b50ef) (div0 . b50ee) (div-and-mod . b50ed) (mod . b50ec) (div . b50eb) (denominator . b50ea) (cos . b50e9) (cons . b50e8) (complex? . b50e7) (char? . b50e6) (char>? . b50e5) (char>=? . b50e4) (char=? . b50e3) (char<? . b50e2) (char<=? . b50e1) (char->integer . b50e0) (ceiling . b50df) (call-with-values . b50de) (call/cc . b50dd) (call-with-current-continuation . b50dc) (cddddr . b50db) (cdddar . b50da) (cddadr . b50d9) (cddaar . b50d8) (cdaddr . b50d7) (cdadar . b50d6) (cdaadr . b50d5) (cdaaar . b50d4) (cadddr . b50d3) (caddar . b50d2) (cadadr . b50d1) (cadaar . b50d0) (caaddr . b50cf) (caadar . b50ce) (caaadr . b50cd) (caaaar . b50cc) (cdddr . b50cb) (cddar . b50ca) (cdadr . b50c9) (cdaar . b50c8) (caddr . b50c7) (cadar . b50c6) (caadr . b50c5) (caaar . b50c4) (cddr . b50c3) (cdar . b50c2) (cadr . b50c1) (caar . b50c0) (cdr . b50bf) (car . b50be) (boolean? . b50bd) (boolean=? . b50bc) (atan . b50bb) (assertion-violation . b50ba) (asin . b50b9) (apply . b50b8) (append . b50b7) (angle . b50b6) (acos . b50b5) (abs . b50b4) (/ . b50b3) (* . b50b2) (- . b50b1) (+ . b50b0) (>= . b50af) (> . b50ae) (= . b50ad) (<= . b50ac) (< . b50ab) (&no-nans . b50a9) (&no-infinities . b50a8) (&i/o-encoding . b50a7) (&i/o-decoding . b50a6) (&i/o-port . b50a5) (&i/o-file-does-not-exist . b50a4) (&i/o-file-already-exists . b50a3) (&i/o-file-is-read-only . b50a2) (&i/o-file-protection . b50a1) (&i/o-filename . b50a0) (&i/o-invalid-position . b509f) (&i/o-write . b509e) (&i/o-read . b509d) (&i/o . b509c) (&undefined . b509b) (&syntax . b509a) (&lexical . b5099) (&implementation-restriction . b5098) (&non-continuable . b5097) (&who . b5096) (&irritants . b5095) (&assertion . b5094) (&violation . b5093) (&error . b5092) (&serious . b5091) (&warning . b5090) (&message . b508f) (&condition . b508e) (define-condition-type . b508d) (define-enumeration . b508c) (define-record-type . b508b) (parent-rtd . b508a) (nongenerative . b5089) (opaque . b5088) (sealed . b5087) (protocol . b5086) (parent . b5085) (immutable . b5084) (mutable . b5083) (fields . b5082) (error-handling-mode . b5081) (file-options . b5080) (buffer-mode . b507f) (eol-style . b507e) (guard . b507d) (unsyntax-splicing . b507a) (unsyntax . b5079) (unquote-splicing . b5078) (unquote . b5077) (_ . b5076) (else . b5075) (=> . b5074) (... . b5073) (assert . b5072) (endianness . b5071) (do . b506e) (cond . b506d) (let* . b506c) (let . b506b) (let*-values . b506a) (let-values . b5069) (identifier-syntax . b5068) (with-syntax . b5067) (quasisyntax . b5066) (quasiquote . b5065) (syntax-rules . b5064) (record-constructor-descriptor . b5061) (record-type-descriptor . b5060) (case . b505f) (unless . b505d) (when . b505c) (or . b505b) (and . b505a) (if . b5059) (letrec* . b5058) (letrec . b5057) (case-lambda . b5055) (lambda . b5054) (syntax . b5053) (syntax-case . b5052) (quote . b5051) (letrec-syntax . b504f) (let-syntax . b504e) (set! . b504d) (begin . b504b) (define-syntax . b5049) (define . b5048)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5371 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . b3102) (quotient . b522e) (null-environment . b3100) (remainder . b522d) (modulo . b522c) (inexact->exact . b522b) (force . b522a) (exact->inexact . b5229) (make-promise . b5228) (delay . b5070)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5372 '(rnrs control) '(6) '() '() '() '((do . b506e) (unless . b505d) (when . b505c) (case-lambda . b5055)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5373 '(rnrs eval) '(6) '() '() '() '((eval . b3106) (environment . b30fe)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5374 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . b5224) (set-car! . b5223)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5375 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . b5226) (string-set! . b5225)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5376 '(rnrs programs) '(6) '() '() '() '((exit . b5227) (command-line . b4f16)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5377 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . b2e73) (identifier? . b3128) (generate-temporaries . b3114) (free-identifier=? . b3116) (syntax->datum . b312c) (datum->syntax . b312a) (bound-identifier=? . b3118) (syntax-violation . b3126) (unsyntax-splicing . b507a) (unsyntax . b5079) (_ . b5076) (... . b5073) (with-syntax . b5067) (quasisyntax . b5066) (syntax . b5053) (syntax-case . b5052)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5378 '(rnrs files) '(6) '() '() '() '((delete-file . b5297) (file-exists? . b5296) (make-i/o-write-error . b4d0a) (make-i/o-read-error . b4cf5) (make-i/o-port-error . b4dab) (make-i/o-invalid-position-error . b4d21) (make-i/o-filename-error . b4d3c) (make-i/o-file-protection-error . b4d55) (make-i/o-file-is-read-only-error . b4d6a) (make-i/o-file-does-not-exist-error . b4d94) (make-i/o-file-already-exists-error . b4d7f) (make-i/o-error . b4ce0) (i/o-write-error? . b4d0c) (i/o-read-error? . b4cf7) (i/o-port-error? . b4daf) (i/o-invalid-position-error? . b4d25) (i/o-filename-error? . b4d40) (i/o-file-protection-error? . b4d57) (i/o-file-is-read-only-error? . b4d6c) (i/o-file-does-not-exist-error? . b4d96) (i/o-file-already-exists-error? . b4d81) (i/o-error? . b4ce2) (i/o-error-position . b4d27) (i/o-error-port . b4db1) (i/o-error-filename . b4d42) (&i/o-port . b50a5) (&i/o-file-does-not-exist . b50a4) (&i/o-file-already-exists . b50a3) (&i/o-file-is-read-only . b50a2) (&i/o-file-protection . b50a1) (&i/o-filename . b50a0) (&i/o-invalid-position . b509f) (&i/o-write . b509e) (&i/o-read . b509d) (&i/o . b509c)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5379 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . b5295) (vector-sort . b5294) (list-sort . b5293)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b537a '(rnrs base) '(6) '() '() '() '((zero? . b514c) (vector? . b514b) (vector-set! . b514a) (vector-ref . b5149) (vector-map . b5148) (vector-length . b5147) (vector-for-each . b5146) (vector-fill! . b5145) (vector->list . b5144) (vector . b5143) (values . b5142) (truncate . b5141) (tan . b5140) (symbol? . b513f) (symbol=? . b513e) (symbol->string . b513d) (substring . b513c) (string? . b513b) (string>? . b513a) (string>=? . b5139) (string=? . b5138) (string<? . b5137) (string<=? . b5136) (string-ref . b5135) (string-length . b5134) (string-for-each . b5133) (string-copy . b5132) (string-append . b5131) (string->symbol . b5130) (string->number . b512f) (string->list . b512e) (string . b512d) (sqrt . b512c) (sin . b512b) (round . b512a) (reverse . b5129) (real? . b5128) (real-valued? . b5127) (real-part . b5126) (rationalize . b5125) (rational? . b5124) (rational-valued? . b5123) (procedure? . b5122) (positive? . b5121) (pair? . b5120) (odd? . b511f) (numerator . b511e) (number? . b511d) (number->string . b511c) (null? . b511b) (not . b511a) (negative? . b5119) (nan? . b5118) (min . b5117) (max . b5116) (map . b5115) (make-vector . b5114) (make-string . b5113) (make-rectangular . b5112) (make-polar . b5111) (magnitude . b5110) (log . b510f) (list? . b510e) (list-tail . b510d) (list-ref . b510c) (list->vector . b510b) (list->string . b510a) (list . b5109) (length . b5108) (lcm . b5107) (integer? . b5106) (integer-valued? . b5105) (integer->char . b5104) (infinite? . b5103) (inexact? . b5102) (inexact . b5101) (imag-part . b5100) (gcd . b50ff) (for-each . b50fe) (floor . b50fd) (finite? . b50fc) (expt . b50fb) (exp . b50fa) (exact? . b50f9) (exact-integer-sqrt . b50f8) (exact . b50f7) (even? . b50f6) (error . b50f5) (eqv? . b50f4) (equal? . b50f3) (eq? . b50f2) (dynamic-wind . b50f1) (div0-and-mod0 . b50f0) (mod0 . b50ef) (div0 . b50ee) (div-and-mod . b50ed) (mod . b50ec) (div . b50eb) (denominator . b50ea) (cos . b50e9) (cons . b50e8) (complex? . b50e7) (char? . b50e6) (char>? . b50e5) (char>=? . b50e4) (char=? . b50e3) (char<? . b50e2) (char<=? . b50e1) (char->integer . b50e0) (ceiling . b50df) (call-with-values . b50de) (call/cc . b50dd) (call-with-current-continuation . b50dc) (cddddr . b50db) (cdddar . b50da) (cddadr . b50d9) (cddaar . b50d8) (cdaddr . b50d7) (cdadar . b50d6) (cdaadr . b50d5) (cdaaar . b50d4) (cadddr . b50d3) (caddar . b50d2) (cadadr . b50d1) (cadaar . b50d0) (caaddr . b50cf) (caadar . b50ce) (caaadr . b50cd) (caaaar . b50cc) (cdddr . b50cb) (cddar . b50ca) (cdadr . b50c9) (cdaar . b50c8) (caddr . b50c7) (cadar . b50c6) (caadr . b50c5) (caaar . b50c4) (cddr . b50c3) (cdar . b50c2) (cadr . b50c1) (caar . b50c0) (cdr . b50bf) (car . b50be) (boolean? . b50bd) (boolean=? . b50bc) (atan . b50bb) (assertion-violation . b50ba) (asin . b50b9) (apply . b50b8) (append . b50b7) (angle . b50b6) (acos . b50b5) (abs . b50b4) (/ . b50b3) (* . b50b2) (- . b50b1) (+ . b50b0) (>= . b50af) (> . b50ae) (= . b50ad) (<= . b50ac) (< . b50ab) (unquote-splicing . b5078) (unquote . b5077) (_ . b5076) (else . b5075) (=> . b5074) (... . b5073) (assert . b5072) (cond . b506d) (let* . b506c) (let . b506b) (let*-values . b506a) (let-values . b5069) (identifier-syntax . b5068) (quasiquote . b5065) (syntax-rules . b5064) (case . b505f) (or . b505b) (and . b505a) (if . b5059) (letrec* . b5058) (letrec . b5057) (lambda . b5054) (quote . b5051) (letrec-syntax . b504f) (let-syntax . b504e) (set! . b504d) (begin . b504b) (define-syntax . b5049) (define . b5048)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b537b '(rnrs lists) '(6) '() '() '() '((remove . b5222) (remv . b5221) (remp . b5220) (remq . b521f) (partition . b521e) (memv . b521d) (memq . b521c) (memp . b521b) (member . b521a) (exists . b5219) (for-all . b5218) (fold-right . b5217) (fold-left . b5216) (find . b5215) (filter . b5214) (cons* . b5213) (assv . b5212) (assq . b5211) (assp . b5210) (assoc . b520f)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b537c '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . b527d) (call-with-input-file . b527c) (write-char . b527b) (write . b527a) (with-output-to-file . b5279) (with-input-from-file . b5278) (read-char . b5277) (read . b5276) (peek-char . b5275) (open-output-file . b5274) (open-input-file . b5273) (newline . b5272) (display . b5271) (close-output-port . b5270) (close-input-port . b526f) (eof-object? . b526e) (eof-object . b526d) (current-error-port . b526c) (current-output-port . b526b) (current-input-port . b526a) (output-port? . b5269) (input-port? . b5268) (make-i/o-write-error . b4d0a) (make-i/o-read-error . b4cf5) (make-i/o-port-error . b4dab) (make-i/o-invalid-position-error . b4d21) (make-i/o-filename-error . b4d3c) (make-i/o-file-protection-error . b4d55) (make-i/o-file-is-read-only-error . b4d6a) (make-i/o-file-does-not-exist-error . b4d94) (make-i/o-file-already-exists-error . b4d7f) (make-i/o-error . b4ce0) (i/o-write-error? . b4d0c) (i/o-read-error? . b4cf7) (i/o-port-error? . b4daf) (i/o-invalid-position-error? . b4d25) (i/o-filename-error? . b4d40) (i/o-file-protection-error? . b4d57) (i/o-file-is-read-only-error? . b4d6c) (i/o-file-does-not-exist-error? . b4d96) (i/o-file-already-exists-error? . b4d81) (i/o-error? . b4ce2) (i/o-error-position . b4d27) (i/o-error-port . b4db1) (i/o-error-filename . b4d42) (&i/o-port . b50a5) (&i/o-file-does-not-exist . b50a4) (&i/o-file-already-exists . b50a3) (&i/o-file-is-read-only . b50a2) (&i/o-file-protection . b50a1) (&i/o-filename . b50a0) (&i/o-invalid-position . b509f) (&i/o-write . b509e) (&i/o-read . b509d) (&i/o . b509c)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b537d '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . b523e) (utf32->string . b51f3) (utf16->string . b51f2) (utf8->string . b51f1) (uint-list->bytevector . b51f0) (u8-list->bytevector . b51ef) (string->utf8 . b51ee) (string->utf32 . b51ed) (string->utf16 . b51ec) (sint-list->bytevector . b51eb) (native-endianness . b51ea) (bytevector? . b51e9) (bytevector=? . b51e8) (bytevector-uint-set! . b51e7) (bytevector-uint-ref . b51e6) (bytevector-u8-set! . b51e5) (bytevector-u8-ref . b51e4) (bytevector-u64-set! . b51e3) (bytevector-u64-ref . b51e2) (bytevector-u64-native-set! . b51e1) (bytevector-u64-native-ref . b51e0) (bytevector-u32-set! . b51df) (bytevector-u32-ref . b51de) (bytevector-u32-native-set! . b51dd) (bytevector-u32-native-ref . b51dc) (bytevector-u16-set! . b51db) (bytevector-u16-ref . b51da) (bytevector-u16-native-set! . b51d9) (bytevector-u16-native-ref . b51d8) (bytevector-sint-set! . b51d7) (bytevector-sint-ref . b51d6) (bytevector-s8-set! . b51d5) (bytevector-s8-ref . b51d4) (bytevector-s64-set! . b51d3) (bytevector-s64-ref . b51d2) (bytevector-s64-native-set! . b51d1) (bytevector-s64-native-ref . b51d0) (bytevector-s32-set! . b51cf) (bytevector-s32-ref . b51ce) (bytevector-s32-native-set! . b51cd) (bytevector-s32-native-ref . b51cc) (bytevector-s16-set! . b51cb) (bytevector-s16-ref . b51ca) (bytevector-s16-native-set! . b51c9) (bytevector-s16-native-ref . b51c8) (bytevector-length . b51c7) (bytevector-ieee-single-ref . b51c6) (bytevector-ieee-single-set! . b51c5) (bytevector-ieee-single-native-set! . b51c4) (bytevector-ieee-single-native-ref . b51c3) (bytevector-ieee-double-set! . b51c2) (bytevector-ieee-double-ref . b51c1) (bytevector-ieee-double-native-set! . b51c0) (bytevector-ieee-double-native-ref . b51bf) (bytevector-fill! . b51be) (bytevector-copy! . b51bd) (bytevector-copy . b51bc) (bytevector->uint-list . b51bb) (bytevector->u8-list . b51ba) (bytevector->sint-list . b51b9) (endianness . b5071)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b537e '(rnrs unicode) '(6) '() '() '() '((string-upcase . b52c5) (string-titlecase . b52c4) (string-normalize-nfkd . b52c3) (string-normalize-nfkc . b52c2) (string-normalize-nfd . b52c1) (string-normalize-nfc . b52c0) (string-foldcase . b52bf) (string-downcase . b52be) (string-ci>? . b52bd) (string-ci>=? . b52bc) (string-ci=? . b52bb) (string-ci<? . b52ba) (string-ci<=? . b52b9) (char-whitespace? . b52b8) (char-upper-case? . b52b7) (char-title-case? . b52b6) (char-numeric? . b52b5) (char-lower-case? . b52b4) (char-general-category . b52b3) (char-upcase . b52b2) (char-titlecase . b52b1) (char-foldcase . b52b0) (char-downcase . b52af) (char-ci>? . b52ae) (char-ci>=? . b52ad) (char-ci=? . b52ac) (char-ci<? . b52ab) (char-ci<=? . b52aa) (char-alphabetic? . b52a9)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b537f '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . b5208) (raise-continuable . b5207) (raise . b5206) (guard . b507d) (else . b5075) (=> . b5074)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5380 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . b515d) (bitwise-reverse-bit-field . b515c) (bitwise-length . b515b) (bitwise-if . b515a) (bitwise-first-bit-set . b5159) (bitwise-copy-bit-field . b5158) (bitwise-copy-bit . b5157) (bitwise-bit-set? . b5156) (bitwise-bit-field . b5155) (bitwise-bit-count . b5154) (bitwise-xor . b5153) (bitwise-ior . b5152) (bitwise-and . b5151) (bitwise-not . b5150) (bitwise-arithmetic-shift-right . b514f) (bitwise-arithmetic-shift-left . b514e) (bitwise-arithmetic-shift . b514d)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5381 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . b518a) (fxxor . b5189) (fxrotate-bit-field . b5188) (fxreverse-bit-field . b5187) (fxpositive? . b5186) (fxodd? . b5185) (fxnot . b5184) (fxnegative? . b5183) (fxmod0 . b5182) (fxmod . b5181) (fxmin . b5180) (fxmax . b517f) (fxlength . b517e) (fxior . b517d) (fxif . b517c) (fxfirst-bit-set . b517b) (fxeven? . b517a) (fxdiv0-and-mod0 . b5179) (fxdiv0 . b5178) (fxdiv-and-mod . b5177) (fxdiv . b5176) (fxcopy-bit-field . b5175) (fxcopy-bit . b5174) (fxbit-set? . b5173) (fxbit-field . b5172) (fxbit-count . b5171) (fxarithmetic-shift-right . b5170) (fxarithmetic-shift-left . b516f) (fxarithmetic-shift . b516e) (fxand . b516d) (fx>? . b516c) (fx>=? . b516b) (fx=? . b516a) (fx<? . b5169) (fx<=? . b5168) (fx-/carry . b5167) (fx- . b5166) (fx+/carry . b5165) (fx+ . b5164) (fx*/carry . b5163) (fx* . b5162) (greatest-fixnum . b5161) (least-fixnum . b5160) (fixnum-width . b515f) (fixnum? . b515e)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5382 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . b4e0b) (no-infinities-violation? . b4df6) (make-no-nans-violation . b4e09) (make-no-infinities-violation . b4df4) (real->flonum . b51b8) (flzero? . b51b7) (fltruncate . b51b6) (fltan . b51b5) (flsqrt . b51b4) (flsin . b51b3) (flround . b51b2) (flpositive? . b51b1) (flonum? . b51b0) (flodd? . b51af) (flnumerator . b51ae) (flnegative? . b51ad) (flnan? . b51ac) (flmod0 . b51ab) (flmod . b51aa) (flmin . b51a9) (flmax . b51a8) (fllog . b51a7) (flinteger? . b51a6) (flinfinite? . b51a5) (flfloor . b51a4) (flfinite? . b51a3) (flexpt . b51a2) (flexp . b51a1) (fleven? . b51a0) (fldiv0-and-mod0 . b519f) (fldiv0 . b519e) (fldiv-and-mod . b519d) (fldiv . b519c) (fldenominator . b519b) (flcos . b519a) (flceiling . b5199) (flatan . b5198) (flasin . b5197) (flacos . b5196) (flabs . b5195) (fl>? . b5194) (fl>=? . b5193) (fl=? . b5192) (fl<? . b5191) (fl<=? . b5190) (fl/ . b518f) (fl- . b518e) (fl+ . b518d) (fl* . b518c) (fixnum->flonum . b518b) (&no-nans . b50a9) (&no-infinities . b50a8)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5383 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . b5292) (string-ci-hash . b5291) (string-hash . b5290) (equal-hash . b528f) (hashtable-equivalence-function . b528e) (make-hashtable . b528d) (hashtable-hash-function . b528c) (make-eqv-hashtable . b528b) (make-eq-hashtable . b528a) (hashtable? . b5289) (hashtable-update! . b5288) (hashtable-size . b5287) (hashtable-set! . b5286) (hashtable-ref . b5285) (hashtable-mutable? . b5284) (hashtable-keys . b5283) (hashtable-entries . b5282) (hashtable-delete! . b5281) (hashtable-copy . b5280) (hashtable-contains? . b527f) (hashtable-clear! . b527e)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5384 '(rnrs io ports) '(6) '() '() '() '((eof-object? . b526e) (eof-object . b526d) (current-error-port . b526c) (current-output-port . b526b) (current-input-port . b526a) (output-port? . b5269) (input-port? . b5268) (utf-8-codec . b5267) (utf-16-codec . b5266) (transcoder-error-handling-mode . b5265) (transcoder-eol-style . b5264) (transcoder-codec . b5263) (transcoded-port . b5262) (textual-port? . b5261) (string->bytevector . b5260) (standard-output-port . b525f) (standard-input-port . b525e) (standard-error-port . b525d) (set-port-position! . b525c) (put-u8 . b525b) (put-string . b525a) (put-datum . b5259) (put-char . b5258) (put-bytevector . b5257) (port? . b5256) (port-transcoder . b5255) (port-position . b5254) (port-has-set-port-position!? . b5253) (port-has-port-position? . b5252) (port-eof? . b5251) (output-port-buffer-mode . b5250) (open-string-output-port . b524f) (open-string-input-port . b524e) (open-file-output-port . b524d) (open-file-input/output-port . b524c) (open-file-input-port . b524b) (open-bytevector-output-port . b524a) (open-bytevector-input-port . b5249) (native-transcoder . b5248) (native-eol-style . b5247) (make-transcoder . b5246) (latin-1-codec . b5245) (make-i/o-write-error . b4d0a) (make-i/o-read-error . b4cf5) (make-i/o-port-error . b4dab) (make-i/o-invalid-position-error . b4d21) (make-i/o-filename-error . b4d3c) (make-i/o-file-protection-error . b4d55) (make-i/o-file-is-read-only-error . b4d6a) (make-i/o-file-does-not-exist-error . b4d94) (make-i/o-file-already-exists-error . b4d7f) (make-i/o-error . b4ce0) (make-i/o-encoding-error . b4ddb) (make-i/o-decoding-error . b4dc4) (make-custom-textual-output-port . b5244) (make-custom-textual-input/output-port . b5243) (make-custom-textual-input-port . b5242) (make-custom-binary-output-port . b5241) (make-custom-binary-input/output-port . b5240) (make-custom-binary-input-port . b523f) (lookahead-u8 . b523d) (lookahead-char . b523c) (i/o-write-error? . b4d0c) (i/o-read-error? . b4cf7) (i/o-port-error? . b4daf) (i/o-invalid-position-error? . b4d25) (i/o-filename-error? . b4d40) (i/o-file-protection-error? . b4d57) (i/o-file-is-read-only-error? . b4d6c) (i/o-file-does-not-exist-error? . b4d96) (i/o-file-already-exists-error? . b4d81) (i/o-error? . b4ce2) (i/o-error-position . b4d27) (i/o-error-port . b4db1) (i/o-error-filename . b4d42) (i/o-encoding-error? . b4ddf) (i/o-encoding-error-char . b4de1) (i/o-decoding-error? . b4dc6) (get-u8 . b523b) (get-string-n! . b523a) (get-string-n . b5239) (get-string-all . b5238) (get-line . b5237) (get-datum . b5236) (get-char . b5235) (get-bytevector-some . b5234) (get-bytevector-n! . b5233) (get-bytevector-n . b5232) (get-bytevector-all . b5231) (flush-output-port . b5230) (close-port . b522f) (call-with-string-output-port . b520e) (call-with-port . b520d) (call-with-bytevector-output-port . b520c) (bytevector->string . b520b) (buffer-mode? . b520a) (binary-port? . b5209) (&i/o-encoding . b50a7) (&i/o-decoding . b50a6) (&i/o-port . b50a5) (&i/o-file-does-not-exist . b50a4) (&i/o-file-already-exists . b50a3) (&i/o-file-is-read-only . b50a2) (&i/o-file-protection . b50a1) (&i/o-filename . b50a0) (&i/o-invalid-position . b509f) (&i/o-write . b509e) (&i/o-read . b509d) (&i/o . b509c) (error-handling-mode . b5081) (file-options . b5080) (buffer-mode . b507f) (eol-style . b507e)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5385 '(rnrs enums) '(6) '() '() '() '((make-enumeration . b5205) (enum-set=? . b5204) (enum-set-universe . b5203) (enum-set-union . b5202) (enum-set-subset? . b5201) (enum-set-projection . b5200) (enum-set-member? . b51ff) (enum-set-intersection . b51fe) (enum-set-indexer . b51fd) (enum-set-difference . b51fc) (enum-set-constructor . b51fb) (enum-set-complement . b51fa) (enum-set->list . b51f9) (define-enumeration . b508c)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5386 '(rnrs conditions) '(6) '() '() '() '((who-condition? . b4c56) (warning? . b4bce) (violation? . b4c0d) (undefined-violation? . b4ccd) (syntax-violation? . b4cb4) (syntax-violation-subform . b4cb8) (syntax-violation-form . b4cb6) (syntax-violation . b3126) (simple-conditions . b51f8) (serious-condition? . b4be3) (non-continuable-violation? . b4c6d) (message-condition? . b4bb7) (make-who-condition . b4c52) (make-warning . b4bcc) (make-violation . b4c0b) (make-undefined-violation . b4ccb) (make-syntax-violation . b4cae) (make-serious-condition . b4be1) (make-non-continuable-violation . b4c6b) (make-message-condition . b4bb3) (make-lexical-violation . b4c95) (make-irritants-condition . b4c37) (make-implementation-restriction-violation . b4c80) (make-error . b4bf6) (make-assertion-violation . b4c20) (lexical-violation? . b4c97) (irritants-condition? . b4c3b) (implementation-restriction-violation? . b4c82) (error? . b4bf8) (condition-who . b4c58) (condition-predicate . b51f7) (condition-message . b4bb9) (condition-irritants . b4c3d) (condition-accessor . b51f6) (condition . b51f5) (assertion-violation? . b4c22) (condition? . b51f4) (&undefined . b509b) (&syntax . b509a) (&lexical . b5099) (&implementation-restriction . b5098) (&non-continuable . b5097) (&who . b5096) (&irritants . b5095) (&assertion . b5094) (&violation . b5093) (&error . b5092) (&serious . b5091) (&warning . b5090) (&message . b508f) (&condition . b508e) (define-condition-type . b508d)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5387 '(rnrs records inspection) '(6) '() '() '() '((record? . b52a1) (record-type-uid . b52a0) (record-type-sealed? . b529f) (record-type-parent . b529e) (record-type-opaque? . b529d) (record-type-name . b529c) (record-type-generative? . b529b) (record-type-field-names . b529a) (record-rtd . b5299) (record-field-mutable? . b5298)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5388 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . b52a8) (record-predicate . b52a7) (record-mutator . b52a6) (record-constructor . b52a5) (record-accessor . b52a4) (make-record-type-descriptor . b52a3) (make-record-constructor-descriptor . b52a2)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b5389 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . b508b) (parent-rtd . b508a) (nongenerative . b5089) (opaque . b5088) (sealed . b5087) (protocol . b5086) (parent . b5085) (immutable . b5084) (mutable . b5083) (fields . b5082) (record-constructor-descriptor . b5061) (record-type-descriptor . b5060)) '() values values '#f '#f '#t '#f) (b2c6b@b2ab7@install-library 'b538a '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . b4e0f) (&no-nans-rtd . b4e0d) (&no-infinities-rcd . b4dfa) (&no-infinities-rtd . b4df8) (&i/o-encoding-rcd . b4de5) (&i/o-encoding-rtd . b4de3) (&i/o-decoding-rcd . b4dca) (&i/o-decoding-rtd . b4dc8) (&i/o-port-rcd . b4db5) (&i/o-port-rtd . b4db3) (&i/o-file-does-not-exist-rcd . b4d9a) (&i/o-file-does-not-exist-rtd . b4d98) (&i/o-file-already-exists-rcd . b4d85) (&i/o-file-already-exists-rtd . b4d83) (&i/o-file-is-read-only-rcd . b4d70) (&i/o-file-is-read-only-rtd . b4d6e) (&i/o-file-protection-rcd . b4d5b) (&i/o-file-protection-rtd . b4d59) (&i/o-filename-rcd . b4d46) (&i/o-filename-rtd . b4d44) (&i/o-invalid-position-rcd . b4d2b) (&i/o-invalid-position-rtd . b4d29) (&i/o-write-rcd . b4d10) (&i/o-write-rtd . b4d0e) (&i/o-read-rcd . b4cfb) (&i/o-read-rtd . b4cf9) (&i/o-rcd . b4ce6) (&i/o-rtd . b4ce4) (&undefined-rcd . b4cd1) (&undefined-rtd . b4ccf) (&syntax-rcd . b4cbc) (&syntax-rtd . b4cba) (&lexical-rcd . b4c9b) (&lexical-rtd . b4c99) (&implementation-restriction-rcd . b4c86) (&implementation-restriction-rtd . b4c84) (&non-continuable-rcd . b4c71) (&non-continuable-rtd . b4c6f) (&who-rcd . b4c5c) (&who-rtd . b4c5a) (&irritants-rcd . b4c41) (&irritants-rtd . b4c3f) (&assertion-rcd . b4c26) (&assertion-rtd . b4c24) (&violation-rcd . b4c11) (&violation-rtd . b4c0f) (&error-rcd . b4bfc) (&error-rtd . b4bfa) (&serious-rcd . b4be7) (&serious-rtd . b4be5) (&warning-rcd . b4bd2) (&warning-rtd . b4bd0) (&message-rcd . b4bbd) (&message-rtd . b4bbb) (&condition-rcd . b4b5e) (&condition-rtd . b4b5c) (syntax-error . b3122) (syntax-dispatch . b3046) (pretty-print . b536a) (eval-core . b5369) (set-symbol-value! . b5368) (symbol-value . b5367) (gensym . b5366) (void . b5365) (load . b4f1c) (interaction-environment . b3132) (char-ready? . b5364) (regexp? . b5363) (read-line . b5362) (ungensym . b5361) (alist->eq-hash-table . b5360) (assoc-ref . b535f) (print . b535e) (format . b535d) (host-os . b535c) (library-path . b2a96) (standard-library-path . b535b) (file-newer? . b535a) (stat-mtime . b5359) (write-to-file . b5358) (file->list . b5357) (file->string . b5356) (digit->integer . b5355) (call-with-string-input-port . b5354) (call-with-string-io . b5353) (string-split . b5352) (bytevector-for-each . b5351) (string->regexp . b5350) (rxmatch . b534f) (regexp-replace-all . b534e) (hashtable-for-each . b534d) (call-process . b534c) (local-tz-offset . b534b) (microseconds . b534a) (directory-list . b5349) (set-current-directory! . b5348) (expand-path . b5347) (current-directory . b5346) (%spawn . b5345) (%waitpid . b5344) (simple-struct-name . b5343) (simple-struct-set! . b5342) (simple-struct-ref . b5341) (make-simple-struct . b5340) (simple-struct? . b533f) (pointer-ref-c-int64 . b533e) (pointer-ref-c-int32 . b533d) (pointer-ref-c-int16 . b533c) (pointer-ref-c-int8 . b533b) (pointer-ref-c-uint64 . b533a) (pointer-ref-c-uint32 . b5339) (pointer-ref-c-uint16 . b5338) (pointer-ref-c-uint8 . b5337) (pointer-set-c-uint64! . b5336) (pointer-set-c-uint32! . b5335) (pointer-set-c-uint16! . b5334) (pointer-set-c-uint8! . b5333) (pointer-set-c-int64! . b5332) (pointer-set-c-int32! . b5331) (pointer-set-c-int16! . b5330) (pointer-set-c-int8! . b532f) (pointer-set-c-pointer! . b532e) (pointer-set-c-double! . b532d) (pointer-set-c-float! . b532c) (pointer-set-c-long-long! . b532b) (pointer-set-c-long! . b532a) (pointer-set-c-int! . b5329) (pointer-set-c-short! . b5328) (pointer-set-c-char! . b5327) (pointer-ref-c-pointer . b5326) (pointer-ref-c-double . b5325) (pointer-ref-c-float . b5324) (pointer-ref-c-unsigned-long-long . b5323) (pointer-ref-c-signed-long-long . b5322) (pointer-ref-c-unsigned-long . b5321) (pointer-ref-c-signed-long . b5320) (pointer-ref-c-unsigned-int . b531f) (pointer-ref-c-signed-int . b531e) (pointer-ref-c-unsigned-short . b531d) (pointer-ref-c-signed-short . b531c) (pointer-ref-c-unsigned-char . b531b) (pointer-ref-c-signed-char . b531a) (pointer->integer . b5319) (integer->pointer . b5318) (pointer? . b5317) (shared-errno . b5316) (%ffi-supported? . b5315) (%ffi-pointer->string . b5314) (%ffi-call->string-or-zero . b5313) (%ffi-call->double . b5312) (%ffi-call->void* . b5311) (%ffi-call->void . b5310) (%ffi-call->char . b530f) (%ffi-call->int . b530e) (%ffi-lookup . b530d) (%ffi-open . b530c) (%fork . b530b) (%pipe . b530a) (p . b5309) (open-output-string . b5308) (get-output-string . b5307) (file-stat-ctime . b5306) (file-stat-atime . b5305) (file-stat-mtime . b5304) (file-size-in-bytes . b5303) (file-writable? . b5302) (file-executable? . b5301) (file-readable? . b5300) (file-regular? . b52ff) (file-symbolic-link? . b52fe) (file-directory? . b52fd) (create-symbolic-link . b52fc) (rename-file . b52fb) (delete-directory . b52fa) (create-directory . b52f9) (create-mosh-cache-dir . b52f8) (get-environment-variables . b52f7) (get-environment-variable . b52f6) (join-wraps . b52f5) (id->real-label . b52f4) (same-marks? . b52f3) (same-marks*? . b52f2) (get-timeofday . b52f1) (get-command-line . b52f0) (sys-display . b52ef) (whereis . b52ee) (register . b52ed) (vm-join! . b52ec) (vm-set-value! . b52eb) (vm? . b52ea) (main-vm? . b52e9) (vm-eval . b52e8) (vm-self . b52e7) (vm-start! . b52e6) (make-vm . b52e5) (mutex-try-lock! . b52e4) (mutex-unlock! . b52e3) (mutex-lock! . b52e2) (mutex? . b52e1) (make-mutex . b52e0) (condition-variable-notify-all! . b52df) (condition-variable-notify! . b52de) (condition-variable-wait! . b52dd) (make-condition-variable . b52dc) (mosh-executable-path . b52db) (make-file-options . b52da) (source-info . b52d9) (make-compiler-instruction . b52d8) (make-instruction . b52d7) (set-source-info! . b52d6) (bignum? . b52d5) (fast-equal? . b52d4) (fasl-read . b52d3) (fasl-write . b52d2) (time-usage . b52d1) (os-constant . b52d0) (make-parameter . b287f) (socket-port . b52cf) (socket-shutdown . b52ce) (socket-close . b52cd) (socket-send . b52cc) (socket-recv! . b52cb) (socket-recv . b52ca) (make-server-socket . b52c9) (make-client-socket . b52c8) (socket-accept . b52c7) (socket? . b52c6) (string-upcase . b52c5) (string-titlecase . b52c4) (string-normalize-nfkd . b52c3) (string-normalize-nfkc . b52c2) (string-normalize-nfd . b52c1) (string-normalize-nfc . b52c0) (string-foldcase . b52bf) (string-downcase . b52be) (string-ci>? . b52bd) (string-ci>=? . b52bc) (string-ci=? . b52bb) (string-ci<? . b52ba) (string-ci<=? . b52b9) (char-whitespace? . b52b8) (char-upper-case? . b52b7) (char-title-case? . b52b6) (char-numeric? . b52b5) (char-lower-case? . b52b4) (char-general-category . b52b3) (char-upcase . b52b2) (char-titlecase . b52b1) (char-foldcase . b52b0) (char-downcase . b52af) (char-ci>? . b52ae) (char-ci>=? . b52ad) (char-ci=? . b52ac) (char-ci<? . b52ab) (char-ci<=? . b52aa) (char-alphabetic? . b52a9) (make-variable-transformer . b2e73) (identifier? . b3128) (generate-temporaries . b3114) (free-identifier=? . b3116) (syntax->datum . b312c) (datum->syntax . b312a) (bound-identifier=? . b3118) (record-type-descriptor? . b52a8) (record-predicate . b52a7) (record-mutator . b52a6) (record-constructor . b52a5) (record-accessor . b52a4) (make-record-type-descriptor . b52a3) (make-record-constructor-descriptor . b52a2) (record? . b52a1) (record-type-uid . b52a0) (record-type-sealed? . b529f) (record-type-parent . b529e) (record-type-opaque? . b529d) (record-type-name . b529c) (record-type-generative? . b529b) (record-type-field-names . b529a) (record-rtd . b5299) (record-field-mutable? . b5298) (delete-file . b5297) (file-exists? . b5296) (vector-sort! . b5295) (vector-sort . b5294) (list-sort . b5293) (symbol-hash . b5292) (string-ci-hash . b5291) (string-hash . b5290) (equal-hash . b528f) (hashtable-equivalence-function . b528e) (make-hashtable . b528d) (hashtable-hash-function . b528c) (make-eqv-hashtable . b528b) (make-eq-hashtable . b528a) (hashtable? . b5289) (hashtable-update! . b5288) (hashtable-size . b5287) (hashtable-set! . b5286) (hashtable-ref . b5285) (hashtable-mutable? . b5284) (hashtable-keys . b5283) (hashtable-entries . b5282) (hashtable-delete! . b5281) (hashtable-copy . b5280) (hashtable-contains? . b527f) (hashtable-clear! . b527e) (call-with-output-file . b527d) (call-with-input-file . b527c) (write-char . b527b) (write . b527a) (with-output-to-file . b5279) (with-input-from-file . b5278) (read-char . b5277) (read . b5276) (peek-char . b5275) (open-output-file . b5274) (open-input-file . b5273) (newline . b5272) (display . b5271) (close-output-port . b5270) (close-input-port . b526f) (eof-object? . b526e) (eof-object . b526d) (current-error-port . b526c) (current-output-port . b526b) (current-input-port . b526a) (output-port? . b5269) (input-port? . b5268) (utf-8-codec . b5267) (utf-16-codec . b5266) (transcoder-error-handling-mode . b5265) (transcoder-eol-style . b5264) (transcoder-codec . b5263) (transcoded-port . b5262) (textual-port? . b5261) (string->bytevector . b5260) (standard-output-port . b525f) (standard-input-port . b525e) (standard-error-port . b525d) (set-port-position! . b525c) (put-u8 . b525b) (put-string . b525a) (put-datum . b5259) (put-char . b5258) (put-bytevector . b5257) (port? . b5256) (port-transcoder . b5255) (port-position . b5254) (port-has-set-port-position!? . b5253) (port-has-port-position? . b5252) (port-eof? . b5251) (output-port-buffer-mode . b5250) (open-string-output-port . b524f) (open-string-input-port . b524e) (open-file-output-port . b524d) (open-file-input/output-port . b524c) (open-file-input-port . b524b) (open-bytevector-output-port . b524a) (open-bytevector-input-port . b5249) (native-transcoder . b5248) (native-eol-style . b5247) (make-transcoder . b5246) (latin-1-codec . b5245) (make-i/o-write-error . b4d0a) (make-i/o-read-error . b4cf5) (make-i/o-port-error . b4dab) (make-i/o-invalid-position-error . b4d21) (make-i/o-filename-error . b4d3c) (make-i/o-file-protection-error . b4d55) (make-i/o-file-is-read-only-error . b4d6a) (make-i/o-file-does-not-exist-error . b4d94) (make-i/o-file-already-exists-error . b4d7f) (make-i/o-error . b4ce0) (make-i/o-encoding-error . b4ddb) (make-i/o-decoding-error . b4dc4) (make-custom-textual-output-port . b5244) (make-custom-textual-input/output-port . b5243) (make-custom-textual-input-port . b5242) (make-custom-binary-output-port . b5241) (make-custom-binary-input/output-port . b5240) (make-custom-binary-input-port . b523f) (make-bytevector . b523e) (lookahead-u8 . b523d) (lookahead-char . b523c) (i/o-write-error? . b4d0c) (i/o-read-error? . b4cf7) (i/o-port-error? . b4daf) (i/o-invalid-position-error? . b4d25) (i/o-filename-error? . b4d40) (i/o-file-protection-error? . b4d57) (i/o-file-is-read-only-error? . b4d6c) (i/o-file-does-not-exist-error? . b4d96) (i/o-file-already-exists-error? . b4d81) (i/o-error? . b4ce2) (i/o-error-position . b4d27) (i/o-error-port . b4db1) (i/o-error-filename . b4d42) (i/o-encoding-error? . b4ddf) (i/o-encoding-error-char . b4de1) (i/o-decoding-error? . b4dc6) (get-u8 . b523b) (get-string-n! . b523a) (get-string-n . b5239) (get-string-all . b5238) (get-line . b5237) (get-datum . b5236) (get-char . b5235) (get-bytevector-some . b5234) (get-bytevector-n! . b5233) (get-bytevector-n . b5232) (get-bytevector-all . b5231) (flush-output-port . b5230) (close-port . b522f) (scheme-report-environment . b3102) (quotient . b522e) (null-environment . b3100) (remainder . b522d) (modulo . b522c) (inexact->exact . b522b) (force . b522a) (exact->inexact . b5229) (make-promise . b5228) (exit . b5227) (command-line . b4f16) (string-fill! . b5226) (string-set! . b5225) (set-cdr! . b5224) (set-car! . b5223) (remove . b5222) (remv . b5221) (remp . b5220) (remq . b521f) (partition . b521e) (memv . b521d) (memq . b521c) (memp . b521b) (member . b521a) (exists . b5219) (for-all . b5218) (fold-right . b5217) (fold-left . b5216) (find . b5215) (filter . b5214) (cons* . b5213) (assv . b5212) (assq . b5211) (assp . b5210) (assoc . b520f) (call-with-string-output-port . b520e) (call-with-port . b520d) (call-with-bytevector-output-port . b520c) (bytevector->string . b520b) (buffer-mode? . b520a) (binary-port? . b5209) (with-exception-handler . b5208) (raise-continuable . b5207) (raise . b5206) (eval . b3106) (environment . b30fe) (make-enumeration . b5205) (enum-set=? . b5204) (enum-set-universe . b5203) (enum-set-union . b5202) (enum-set-subset? . b5201) (enum-set-projection . b5200) (enum-set-member? . b51ff) (enum-set-intersection . b51fe) (enum-set-indexer . b51fd) (enum-set-difference . b51fc) (enum-set-constructor . b51fb) (enum-set-complement . b51fa) (enum-set->list . b51f9) (who-condition? . b4c56) (warning? . b4bce) (violation? . b4c0d) (undefined-violation? . b4ccd) (syntax-violation? . b4cb4) (syntax-violation-subform . b4cb8) (syntax-violation-form . b4cb6) (syntax-violation . b3126) (simple-conditions . b51f8) (serious-condition? . b4be3) (non-continuable-violation? . b4c6d) (message-condition? . b4bb7) (make-who-condition . b4c52) (make-warning . b4bcc) (make-violation . b4c0b) (make-undefined-violation . b4ccb) (make-syntax-violation . b4cae) (make-serious-condition . b4be1) (make-non-continuable-violation . b4c6b) (make-message-condition . b4bb3) (make-lexical-violation . b4c95) (make-irritants-condition . b4c37) (make-implementation-restriction-violation . b4c80) (make-error . b4bf6) (make-assertion-violation . b4c20) (lexical-violation? . b4c97) (irritants-condition? . b4c3b) (implementation-restriction-violation? . b4c82) (error? . b4bf8) (condition-who . b4c58) (condition-predicate . b51f7) (condition-message . b4bb9) (condition-irritants . b4c3d) (condition-accessor . b51f6) (condition . b51f5) (assertion-violation? . b4c22) (condition? . b51f4) (utf32->string . b51f3) (utf16->string . b51f2) (utf8->string . b51f1) (uint-list->bytevector . b51f0) (u8-list->bytevector . b51ef) (string->utf8 . b51ee) (string->utf32 . b51ed) (string->utf16 . b51ec) (sint-list->bytevector . b51eb) (native-endianness . b51ea) (bytevector? . b51e9) (bytevector=? . b51e8) (bytevector-uint-set! . b51e7) (bytevector-uint-ref . b51e6) (bytevector-u8-set! . b51e5) (bytevector-u8-ref . b51e4) (bytevector-u64-set! . b51e3) (bytevector-u64-ref . b51e2) (bytevector-u64-native-set! . b51e1) (bytevector-u64-native-ref . b51e0) (bytevector-u32-set! . b51df) (bytevector-u32-ref . b51de) (bytevector-u32-native-set! . b51dd) (bytevector-u32-native-ref . b51dc) (bytevector-u16-set! . b51db) (bytevector-u16-ref . b51da) (bytevector-u16-native-set! . b51d9) (bytevector-u16-native-ref . b51d8) (bytevector-sint-set! . b51d7) (bytevector-sint-ref . b51d6) (bytevector-s8-set! . b51d5) (bytevector-s8-ref . b51d4) (bytevector-s64-set! . b51d3) (bytevector-s64-ref . b51d2) (bytevector-s64-native-set! . b51d1) (bytevector-s64-native-ref . b51d0) (bytevector-s32-set! . b51cf) (bytevector-s32-ref . b51ce) (bytevector-s32-native-set! . b51cd) (bytevector-s32-native-ref . b51cc) (bytevector-s16-set! . b51cb) (bytevector-s16-ref . b51ca) (bytevector-s16-native-set! . b51c9) (bytevector-s16-native-ref . b51c8) (bytevector-length . b51c7) (bytevector-ieee-single-ref . b51c6) (bytevector-ieee-single-set! . b51c5) (bytevector-ieee-single-native-set! . b51c4) (bytevector-ieee-single-native-ref . b51c3) (bytevector-ieee-double-set! . b51c2) (bytevector-ieee-double-ref . b51c1) (bytevector-ieee-double-native-set! . b51c0) (bytevector-ieee-double-native-ref . b51bf) (bytevector-fill! . b51be) (bytevector-copy! . b51bd) (bytevector-copy . b51bc) (bytevector->uint-list . b51bb) (bytevector->u8-list . b51ba) (bytevector->sint-list . b51b9) (no-nans-violation? . b4e0b) (no-infinities-violation? . b4df6) (make-no-nans-violation . b4e09) (make-no-infinities-violation . b4df4) (real->flonum . b51b8) (flzero? . b51b7) (fltruncate . b51b6) (fltan . b51b5) (flsqrt . b51b4) (flsin . b51b3) (flround . b51b2) (flpositive? . b51b1) (flonum? . b51b0) (flodd? . b51af) (flnumerator . b51ae) (flnegative? . b51ad) (flnan? . b51ac) (flmod0 . b51ab) (flmod . b51aa) (flmin . b51a9) (flmax . b51a8) (fllog . b51a7) (flinteger? . b51a6) (flinfinite? . b51a5) (flfloor . b51a4) (flfinite? . b51a3) (flexpt . b51a2) (flexp . b51a1) (fleven? . b51a0) (fldiv0-and-mod0 . b519f) (fldiv0 . b519e) (fldiv-and-mod . b519d) (fldiv . b519c) (fldenominator . b519b) (flcos . b519a) (flceiling . b5199) (flatan . b5198) (flasin . b5197) (flacos . b5196) (flabs . b5195) (fl>? . b5194) (fl>=? . b5193) (fl=? . b5192) (fl<? . b5191) (fl<=? . b5190) (fl/ . b518f) (fl- . b518e) (fl+ . b518d) (fl* . b518c) (fixnum->flonum . b518b) (fxzero? . b518a) (fxxor . b5189) (fxrotate-bit-field . b5188) (fxreverse-bit-field . b5187) (fxpositive? . b5186) (fxodd? . b5185) (fxnot . b5184) (fxnegative? . b5183) (fxmod0 . b5182) (fxmod . b5181) (fxmin . b5180) (fxmax . b517f) (fxlength . b517e) (fxior . b517d) (fxif . b517c) (fxfirst-bit-set . b517b) (fxeven? . b517a) (fxdiv0-and-mod0 . b5179) (fxdiv0 . b5178) (fxdiv-and-mod . b5177) (fxdiv . b5176) (fxcopy-bit-field . b5175) (fxcopy-bit . b5174) (fxbit-set? . b5173) (fxbit-field . b5172) (fxbit-count . b5171) (fxarithmetic-shift-right . b5170) (fxarithmetic-shift-left . b516f) (fxarithmetic-shift . b516e) (fxand . b516d) (fx>? . b516c) (fx>=? . b516b) (fx=? . b516a) (fx<? . b5169) (fx<=? . b5168) (fx-/carry . b5167) (fx- . b5166) (fx+/carry . b5165) (fx+ . b5164) (fx*/carry . b5163) (fx* . b5162) (greatest-fixnum . b5161) (least-fixnum . b5160) (fixnum-width . b515f) (fixnum? . b515e) (bitwise-rotate-bit-field . b515d) (bitwise-reverse-bit-field . b515c) (bitwise-length . b515b) (bitwise-if . b515a) (bitwise-first-bit-set . b5159) (bitwise-copy-bit-field . b5158) (bitwise-copy-bit . b5157) (bitwise-bit-set? . b5156) (bitwise-bit-field . b5155) (bitwise-bit-count . b5154) (bitwise-xor . b5153) (bitwise-ior . b5152) (bitwise-and . b5151) (bitwise-not . b5150) (bitwise-arithmetic-shift-right . b514f) (bitwise-arithmetic-shift-left . b514e) (bitwise-arithmetic-shift . b514d) (zero? . b514c) (vector? . b514b) (vector-set! . b514a) (vector-ref . b5149) (vector-map . b5148) (vector-length . b5147) (vector-for-each . b5146) (vector-fill! . b5145) (vector->list . b5144) (vector . b5143) (values . b5142) (truncate . b5141) (tan . b5140) (symbol? . b513f) (symbol=? . b513e) (symbol->string . b513d) (substring . b513c) (string? . b513b) (string>? . b513a) (string>=? . b5139) (string=? . b5138) (string<? . b5137) (string<=? . b5136) (string-ref . b5135) (string-length . b5134) (string-for-each . b5133) (string-copy . b5132) (string-append . b5131) (string->symbol . b5130) (string->number . b512f) (string->list . b512e) (string . b512d) (sqrt . b512c) (sin . b512b) (round . b512a) (reverse . b5129) (real? . b5128) (real-valued? . b5127) (real-part . b5126) (rationalize . b5125) (rational? . b5124) (rational-valued? . b5123) (procedure? . b5122) (positive? . b5121) (pair? . b5120) (odd? . b511f) (numerator . b511e) (number? . b511d) (number->string . b511c) (null? . b511b) (not . b511a) (negative? . b5119) (nan? . b5118) (min . b5117) (max . b5116) (map . b5115) (make-vector . b5114) (make-string . b5113) (make-rectangular . b5112) (make-polar . b5111) (magnitude . b5110) (log . b510f) (list? . b510e) (list-tail . b510d) (list-ref . b510c) (list->vector . b510b) (list->string . b510a) (list . b5109) (length . b5108) (lcm . b5107) (integer? . b5106) (integer-valued? . b5105) (integer->char . b5104) (infinite? . b5103) (inexact? . b5102) (inexact . b5101) (imag-part . b5100) (gcd . b50ff) (for-each . b50fe) (floor . b50fd) (finite? . b50fc) (expt . b50fb) (exp . b50fa) (exact? . b50f9) (exact-integer-sqrt . b50f8) (exact . b50f7) (even? . b50f6) (error . b50f5) (eqv? . b50f4) (equal? . b50f3) (eq? . b50f2) (dynamic-wind . b50f1) (div0-and-mod0 . b50f0) (mod0 . b50ef) (div0 . b50ee) (div-and-mod . b50ed) (mod . b50ec) (div . b50eb) (denominator . b50ea) (cos . b50e9) (cons . b50e8) (complex? . b50e7) (char? . b50e6) (char>? . b50e5) (char>=? . b50e4) (char=? . b50e3) (char<? . b50e2) (char<=? . b50e1) (char->integer . b50e0) (ceiling . b50df) (call-with-values . b50de) (call/cc . b50dd) (call-with-current-continuation . b50dc) (cddddr . b50db) (cdddar . b50da) (cddadr . b50d9) (cddaar . b50d8) (cdaddr . b50d7) (cdadar . b50d6) (cdaadr . b50d5) (cdaaar . b50d4) (cadddr . b50d3) (caddar . b50d2) (cadadr . b50d1) (cadaar . b50d0) (caaddr . b50cf) (caadar . b50ce) (caaadr . b50cd) (caaaar . b50cc) (cdddr . b50cb) (cddar . b50ca) (cdadr . b50c9) (cdaar . b50c8) (caddr . b50c7) (cadar . b50c6) (caadr . b50c5) (caaar . b50c4) (cddr . b50c3) (cdar . b50c2) (cadr . b50c1) (caar . b50c0) (cdr . b50bf) (car . b50be) (boolean? . b50bd) (boolean=? . b50bc) (atan . b50bb) (assertion-violation . b50ba) (assertion-error . b3120) (asin . b50b9) (apply . b50b8) (append . b50b7) (angle . b50b6) (acos . b50b5) (abs . b50b4) (/ . b50b3) (* . b50b2) (- . b50b1) (+ . b50b0) (>= . b50af) (> . b50ae) (= . b50ad) (<= . b50ac) (< . b50ab) (library . b50aa) (&no-nans . b50a9) (&no-infinities . b50a8) (&i/o-encoding . b50a7) (&i/o-decoding . b50a6) (&i/o-port . b50a5) (&i/o-file-does-not-exist . b50a4) (&i/o-file-already-exists . b50a3) (&i/o-file-is-read-only . b50a2) (&i/o-file-protection . b50a1) (&i/o-filename . b50a0) (&i/o-invalid-position . b509f) (&i/o-write . b509e) (&i/o-read . b509d) (&i/o . b509c) (&undefined . b509b) (&syntax . b509a) (&lexical . b5099) (&implementation-restriction . b5098) (&non-continuable . b5097) (&who . b5096) (&irritants . b5095) (&assertion . b5094) (&violation . b5093) (&error . b5092) (&serious . b5091) (&warning . b5090) (&message . b508f) (&condition . b508e) (define-condition-type . b508d) (define-enumeration . b508c) (define-record-type . b508b) (parent-rtd . b508a) (nongenerative . b5089) (opaque . b5088) (sealed . b5087) (protocol . b5086) (parent . b5085) (immutable . b5084) (mutable . b5083) (fields . b5082) (error-handling-mode . b5081) (file-options . b5080) (buffer-mode . b507f) (eol-style . b507e) (guard . b507d) (trace-define . b507c) (trace-lambda . b507b) (unsyntax-splicing . b507a) (unsyntax . b5079) (unquote-splicing . b5078) (unquote . b5077) (_ . b5076) (else . b5075) (=> . b5074) (... . b5073) (assert . b5072) (endianness . b5071) (delay . b5070) (time . b506f) (do . b506e) (cond . b506d) (let* . b506c) (let . b506b) (let*-values . b506a) (let-values . b5069) (identifier-syntax . b5068) (with-syntax . b5067) (quasisyntax . b5066) (quasiquote . b5065) (syntax-rules . b5064) (include . b5063) (define-struct . b5062) (record-constructor-descriptor . b5061) (record-type-descriptor . b5060) (case . b505f) (parameterize . b505e) (unless . b505d) (when . b505c) (or . b505b) (and . b505a) (if . b5059) (letrec* . b5058) (letrec . b5057) (type-descriptor . b5056) (case-lambda . b5055) (lambda . b5054) (syntax . b5053) (syntax-case . b5052) (quote . b5051) (foreign-call . b5050) (letrec-syntax . b504f) (let-syntax . b504e) (set! . b504d) (import . b504c) (begin . b504b) (module . b504a) (define-syntax . b5049) (define . b5048)) '((b4e0f core-prim . &no-nans-rcd) (b4e0d core-prim . &no-nans-rtd) (b4dfa core-prim . &no-infinities-rcd) (b4df8 core-prim . &no-infinities-rtd) (b4de5 core-prim . &i/o-encoding-rcd) (b4de3 core-prim . &i/o-encoding-rtd) (b4dca core-prim . &i/o-decoding-rcd) (b4dc8 core-prim . &i/o-decoding-rtd) (b4db5 core-prim . &i/o-port-rcd) (b4db3 core-prim . &i/o-port-rtd) (b4d9a core-prim . &i/o-file-does-not-exist-rcd) (b4d98 core-prim . &i/o-file-does-not-exist-rtd) (b4d85 core-prim . &i/o-file-already-exists-rcd) (b4d83 core-prim . &i/o-file-already-exists-rtd) (b4d70 core-prim . &i/o-file-is-read-only-rcd) (b4d6e core-prim . &i/o-file-is-read-only-rtd) (b4d5b core-prim . &i/o-file-protection-rcd) (b4d59 core-prim . &i/o-file-protection-rtd) (b4d46 core-prim . &i/o-filename-rcd) (b4d44 core-prim . &i/o-filename-rtd) (b4d2b core-prim . &i/o-invalid-position-rcd) (b4d29 core-prim . &i/o-invalid-position-rtd) (b4d10 core-prim . &i/o-write-rcd) (b4d0e core-prim . &i/o-write-rtd) (b4cfb core-prim . &i/o-read-rcd) (b4cf9 core-prim . &i/o-read-rtd) (b4ce6 core-prim . &i/o-rcd) (b4ce4 core-prim . &i/o-rtd) (b4cd1 core-prim . &undefined-rcd) (b4ccf core-prim . &undefined-rtd) (b4cbc core-prim . &syntax-rcd) (b4cba core-prim . &syntax-rtd) (b4c9b core-prim . &lexical-rcd) (b4c99 core-prim . &lexical-rtd) (b4c86 core-prim . &implementation-restriction-rcd) (b4c84 core-prim . &implementation-restriction-rtd) (b4c71 core-prim . &non-continuable-rcd) (b4c6f core-prim . &non-continuable-rtd) (b4c5c core-prim . &who-rcd) (b4c5a core-prim . &who-rtd) (b4c41 core-prim . &irritants-rcd) (b4c3f core-prim . &irritants-rtd) (b4c26 core-prim . &assertion-rcd) (b4c24 core-prim . &assertion-rtd) (b4c11 core-prim . &violation-rcd) (b4c0f core-prim . &violation-rtd) (b4bfc core-prim . &error-rcd) (b4bfa core-prim . &error-rtd) (b4be7 core-prim . &serious-rcd) (b4be5 core-prim . &serious-rtd) (b4bd2 core-prim . &warning-rcd) (b4bd0 core-prim . &warning-rtd) (b4bbd core-prim . &message-rcd) (b4bbb core-prim . &message-rtd) (b4b5e core-prim . &condition-rcd) (b4b5c core-prim . &condition-rtd) (b3122 core-prim . syntax-error) (b3046 core-prim . syntax-dispatch) (b536a core-prim . pretty-print) (b5369 core-prim . eval-core) (b5368 core-prim . set-symbol-value!) (b5367 core-prim . symbol-value) (b5366 core-prim . gensym) (b5365 core-prim . void) (b4f1c core-prim . load) (b3132 core-prim . interaction-environment) (b5364 core-prim . char-ready?) (b5363 core-prim . regexp?) (b5362 core-prim . read-line) (b5361 core-prim . ungensym) (b5360 core-prim . alist->eq-hash-table) (b535f core-prim . assoc-ref) (b535e core-prim . print) (b535d core-prim . format) (b535c core-prim . host-os) (b2a96 core-prim . library-path) (b535b core-prim . standard-library-path) (b535a core-prim . file-newer?) (b5359 core-prim . stat-mtime) (b5358 core-prim . write-to-file) (b5357 core-prim . file->list) (b5356 core-prim . file->string) (b5355 core-prim . digit->integer) (b5354 core-prim . call-with-string-input-port) (b5353 core-prim . call-with-string-io) (b5352 core-prim . string-split) (b5351 core-prim . bytevector-for-each) (b5350 core-prim . string->regexp) (b534f core-prim . rxmatch) (b534e core-prim . regexp-replace-all) (b534d core-prim . hashtable-for-each) (b534c core-prim . call-process) (b534b core-prim . local-tz-offset) (b534a core-prim . microseconds) (b5349 core-prim . directory-list) (b5348 core-prim . set-current-directory!) (b5347 core-prim . expand-path) (b5346 core-prim . current-directory) (b5345 core-prim . %spawn) (b5344 core-prim . %waitpid) (b5343 core-prim . simple-struct-name) (b5342 core-prim . simple-struct-set!) (b5341 core-prim . simple-struct-ref) (b5340 core-prim . make-simple-struct) (b533f core-prim . simple-struct?) (b533e core-prim . pointer-ref-c-int64) (b533d core-prim . pointer-ref-c-int32) (b533c core-prim . pointer-ref-c-int16) (b533b core-prim . pointer-ref-c-int8) (b533a core-prim . pointer-ref-c-uint64) (b5339 core-prim . pointer-ref-c-uint32) (b5338 core-prim . pointer-ref-c-uint16) (b5337 core-prim . pointer-ref-c-uint8) (b5336 core-prim . pointer-set-c-uint64!) (b5335 core-prim . pointer-set-c-uint32!) (b5334 core-prim . pointer-set-c-uint16!) (b5333 core-prim . pointer-set-c-uint8!) (b5332 core-prim . pointer-set-c-int64!) (b5331 core-prim . pointer-set-c-int32!) (b5330 core-prim . pointer-set-c-int16!) (b532f core-prim . pointer-set-c-int8!) (b532e core-prim . pointer-set-c-pointer!) (b532d core-prim . pointer-set-c-double!) (b532c core-prim . pointer-set-c-float!) (b532b core-prim . pointer-set-c-long-long!) (b532a core-prim . pointer-set-c-long!) (b5329 core-prim . pointer-set-c-int!) (b5328 core-prim . pointer-set-c-short!) (b5327 core-prim . pointer-set-c-char!) (b5326 core-prim . pointer-ref-c-pointer) (b5325 core-prim . pointer-ref-c-double) (b5324 core-prim . pointer-ref-c-float) (b5323 core-prim . pointer-ref-c-unsigned-long-long) (b5322 core-prim . pointer-ref-c-signed-long-long) (b5321 core-prim . pointer-ref-c-unsigned-long) (b5320 core-prim . pointer-ref-c-signed-long) (b531f core-prim . pointer-ref-c-unsigned-int) (b531e core-prim . pointer-ref-c-signed-int) (b531d core-prim . pointer-ref-c-unsigned-short) (b531c core-prim . pointer-ref-c-signed-short) (b531b core-prim . pointer-ref-c-unsigned-char) (b531a core-prim . pointer-ref-c-signed-char) (b5319 core-prim . pointer->integer) (b5318 core-prim . integer->pointer) (b5317 core-prim . pointer?) (b5316 core-prim . shared-errno) (b5315 core-prim . %ffi-supported?) (b5314 core-prim . %ffi-pointer->string) (b5313 core-prim . %ffi-call->string-or-zero) (b5312 core-prim . %ffi-call->double) (b5311 core-prim . %ffi-call->void*) (b5310 core-prim . %ffi-call->void) (b530f core-prim . %ffi-call->char) (b530e core-prim . %ffi-call->int) (b530d core-prim . %ffi-lookup) (b530c core-prim . %ffi-open) (b530b core-prim . %fork) (b530a core-prim . %pipe) (b5309 core-prim . p) (b5308 core-prim . open-output-string) (b5307 core-prim . get-output-string) (b5306 core-prim . file-stat-ctime) (b5305 core-prim . file-stat-atime) (b5304 core-prim . file-stat-mtime) (b5303 core-prim . file-size-in-bytes) (b5302 core-prim . file-writable?) (b5301 core-prim . file-executable?) (b5300 core-prim . file-readable?) (b52ff core-prim . file-regular?) (b52fe core-prim . file-symbolic-link?) (b52fd core-prim . file-directory?) (b52fc core-prim . create-symbolic-link) (b52fb core-prim . rename-file) (b52fa core-prim . delete-directory) (b52f9 core-prim . create-directory) (b52f8 core-prim . create-mosh-cache-dir) (b52f7 core-prim . get-environment-variables) (b52f6 core-prim . get-environment-variable) (b52f5 core-prim . join-wraps) (b52f4 core-prim . id->real-label) (b52f3 core-prim . same-marks?) (b52f2 core-prim . same-marks*?) (b52f1 core-prim . get-timeofday) (b52f0 core-prim . get-command-line) (b52ef core-prim . sys-display) (b52ee core-prim . whereis) (b52ed core-prim . register) (b52ec core-prim . vm-join!) (b52eb core-prim . vm-set-value!) (b52ea core-prim . vm?) (b52e9 core-prim . main-vm?) (b52e8 core-prim . vm-eval) (b52e7 core-prim . vm-self) (b52e6 core-prim . vm-start!) (b52e5 core-prim . make-vm) (b52e4 core-prim . mutex-try-lock!) (b52e3 core-prim . mutex-unlock!) (b52e2 core-prim . mutex-lock!) (b52e1 core-prim . mutex?) (b52e0 core-prim . make-mutex) (b52df core-prim . condition-variable-notify-all!) (b52de core-prim . condition-variable-notify!) (b52dd core-prim . condition-variable-wait!) (b52dc core-prim . make-condition-variable) (b52db core-prim . mosh-executable-path) (b52da core-prim . make-file-options) (b52d9 core-prim . source-info) (b52d8 core-prim . make-compiler-instruction) (b52d7 core-prim . make-instruction) (b52d6 core-prim . set-source-info!) (b52d5 core-prim . bignum?) (b52d4 core-prim . fast-equal?) (b52d3 core-prim . fasl-read) (b52d2 core-prim . fasl-write) (b52d1 core-prim . time-usage) (b52d0 core-prim . os-constant) (b287f core-prim . make-parameter) (b52cf core-prim . socket-port) (b52ce core-prim . socket-shutdown) (b52cd core-prim . socket-close) (b52cc core-prim . socket-send) (b52cb core-prim . socket-recv!) (b52ca core-prim . socket-recv) (b52c9 core-prim . make-server-socket) (b52c8 core-prim . make-client-socket) (b52c7 core-prim . socket-accept) (b52c6 core-prim . socket?) (b52c5 core-prim . string-upcase) (b52c4 core-prim . string-titlecase) (b52c3 core-prim . string-normalize-nfkd) (b52c2 core-prim . string-normalize-nfkc) (b52c1 core-prim . string-normalize-nfd) (b52c0 core-prim . string-normalize-nfc) (b52bf core-prim . string-foldcase) (b52be core-prim . string-downcase) (b52bd core-prim . string-ci>?) (b52bc core-prim . string-ci>=?) (b52bb core-prim . string-ci=?) (b52ba core-prim . string-ci<?) (b52b9 core-prim . string-ci<=?) (b52b8 core-prim . char-whitespace?) (b52b7 core-prim . char-upper-case?) (b52b6 core-prim . char-title-case?) (b52b5 core-prim . char-numeric?) (b52b4 core-prim . char-lower-case?) (b52b3 core-prim . char-general-category) (b52b2 core-prim . char-upcase) (b52b1 core-prim . char-titlecase) (b52b0 core-prim . char-foldcase) (b52af core-prim . char-downcase) (b52ae core-prim . char-ci>?) (b52ad core-prim . char-ci>=?) (b52ac core-prim . char-ci=?) (b52ab core-prim . char-ci<?) (b52aa core-prim . char-ci<=?) (b52a9 core-prim . char-alphabetic?) (b2e73 core-prim . make-variable-transformer) (b3128 core-prim . identifier?) (b3114 core-prim . generate-temporaries) (b3116 core-prim . free-identifier=?) (b312c core-prim . syntax->datum) (b312a core-prim . datum->syntax) (b3118 core-prim . bound-identifier=?) (b52a8 core-prim . record-type-descriptor?) (b52a7 core-prim . record-predicate) (b52a6 core-prim . record-mutator) (b52a5 core-prim . record-constructor) (b52a4 core-prim . record-accessor) (b52a3 core-prim . make-record-type-descriptor) (b52a2 core-prim . make-record-constructor-descriptor) (b52a1 core-prim . record?) (b52a0 core-prim . record-type-uid) (b529f core-prim . record-type-sealed?) (b529e core-prim . record-type-parent) (b529d core-prim . record-type-opaque?) (b529c core-prim . record-type-name) (b529b core-prim . record-type-generative?) (b529a core-prim . record-type-field-names) (b5299 core-prim . record-rtd) (b5298 core-prim . record-field-mutable?) (b5297 core-prim . delete-file) (b5296 core-prim . file-exists?) (b5295 core-prim . vector-sort!) (b5294 core-prim . vector-sort) (b5293 core-prim . list-sort) (b5292 core-prim . symbol-hash) (b5291 core-prim . string-ci-hash) (b5290 core-prim . string-hash) (b528f core-prim . equal-hash) (b528e core-prim . hashtable-equivalence-function) (b528d core-prim . make-hashtable) (b528c core-prim . hashtable-hash-function) (b528b core-prim . make-eqv-hashtable) (b528a core-prim . make-eq-hashtable) (b5289 core-prim . hashtable?) (b5288 core-prim . hashtable-update!) (b5287 core-prim . hashtable-size) (b5286 core-prim . hashtable-set!) (b5285 core-prim . hashtable-ref) (b5284 core-prim . hashtable-mutable?) (b5283 core-prim . hashtable-keys) (b5282 core-prim . hashtable-entries) (b5281 core-prim . hashtable-delete!) (b5280 core-prim . hashtable-copy) (b527f core-prim . hashtable-contains?) (b527e core-prim . hashtable-clear!) (b527d core-prim . call-with-output-file) (b527c core-prim . call-with-input-file) (b527b core-prim . write-char) (b527a core-prim . write) (b5279 core-prim . with-output-to-file) (b5278 core-prim . with-input-from-file) (b5277 core-prim . read-char) (b5276 core-prim . read) (b5275 core-prim . peek-char) (b5274 core-prim . open-output-file) (b5273 core-prim . open-input-file) (b5272 core-prim . newline) (b5271 core-prim . display) (b5270 core-prim . close-output-port) (b526f core-prim . close-input-port) (b526e core-prim . eof-object?) (b526d core-prim . eof-object) (b526c core-prim . current-error-port) (b526b core-prim . current-output-port) (b526a core-prim . current-input-port) (b5269 core-prim . output-port?) (b5268 core-prim . input-port?) (b5267 core-prim . utf-8-codec) (b5266 core-prim . utf-16-codec) (b5265 core-prim . transcoder-error-handling-mode) (b5264 core-prim . transcoder-eol-style) (b5263 core-prim . transcoder-codec) (b5262 core-prim . transcoded-port) (b5261 core-prim . textual-port?) (b5260 core-prim . string->bytevector) (b525f core-prim . standard-output-port) (b525e core-prim . standard-input-port) (b525d core-prim . standard-error-port) (b525c core-prim . set-port-position!) (b525b core-prim . put-u8) (b525a core-prim . put-string) (b5259 core-prim . put-datum) (b5258 core-prim . put-char) (b5257 core-prim . put-bytevector) (b5256 core-prim . port?) (b5255 core-prim . port-transcoder) (b5254 core-prim . port-position) (b5253 core-prim . port-has-set-port-position!?) (b5252 core-prim . port-has-port-position?) (b5251 core-prim . port-eof?) (b5250 core-prim . output-port-buffer-mode) (b524f core-prim . open-string-output-port) (b524e core-prim . open-string-input-port) (b524d core-prim . open-file-output-port) (b524c core-prim . open-file-input/output-port) (b524b core-prim . open-file-input-port) (b524a core-prim . open-bytevector-output-port) (b5249 core-prim . open-bytevector-input-port) (b5248 core-prim . native-transcoder) (b5247 core-prim . native-eol-style) (b5246 core-prim . make-transcoder) (b5245 core-prim . latin-1-codec) (b4d0a core-prim . make-i/o-write-error) (b4cf5 core-prim . make-i/o-read-error) (b4dab core-prim . make-i/o-port-error) (b4d21 core-prim . make-i/o-invalid-position-error) (b4d3c core-prim . make-i/o-filename-error) (b4d55 core-prim . make-i/o-file-protection-error) (b4d6a core-prim . make-i/o-file-is-read-only-error) (b4d94 core-prim . make-i/o-file-does-not-exist-error) (b4d7f core-prim . make-i/o-file-already-exists-error) (b4ce0 core-prim . make-i/o-error) (b4ddb core-prim . make-i/o-encoding-error) (b4dc4 core-prim . make-i/o-decoding-error) (b5244 core-prim . make-custom-textual-output-port) (b5243 core-prim . make-custom-textual-input/output-port) (b5242 core-prim . make-custom-textual-input-port) (b5241 core-prim . make-custom-binary-output-port) (b5240 core-prim . make-custom-binary-input/output-port) (b523f core-prim . make-custom-binary-input-port) (b523e core-prim . make-bytevector) (b523d core-prim . lookahead-u8) (b523c core-prim . lookahead-char) (b4d0c core-prim . i/o-write-error?) (b4cf7 core-prim . i/o-read-error?) (b4daf core-prim . i/o-port-error?) (b4d25 core-prim . i/o-invalid-position-error?) (b4d40 core-prim . i/o-filename-error?) (b4d57 core-prim . i/o-file-protection-error?) (b4d6c core-prim . i/o-file-is-read-only-error?) (b4d96 core-prim . i/o-file-does-not-exist-error?) (b4d81 core-prim . i/o-file-already-exists-error?) (b4ce2 core-prim . i/o-error?) (b4d27 core-prim . i/o-error-position) (b4db1 core-prim . i/o-error-port) (b4d42 core-prim . i/o-error-filename) (b4ddf core-prim . i/o-encoding-error?) (b4de1 core-prim . i/o-encoding-error-char) (b4dc6 core-prim . i/o-decoding-error?) (b523b core-prim . get-u8) (b523a core-prim . get-string-n!) (b5239 core-prim . get-string-n) (b5238 core-prim . get-string-all) (b5237 core-prim . get-line) (b5236 core-prim . get-datum) (b5235 core-prim . get-char) (b5234 core-prim . get-bytevector-some) (b5233 core-prim . get-bytevector-n!) (b5232 core-prim . get-bytevector-n) (b5231 core-prim . get-bytevector-all) (b5230 core-prim . flush-output-port) (b522f core-prim . close-port) (b3102 core-prim . scheme-report-environment) (b522e core-prim . quotient) (b3100 core-prim . null-environment) (b522d core-prim . remainder) (b522c core-prim . modulo) (b522b core-prim . inexact->exact) (b522a core-prim . force) (b5229 core-prim . exact->inexact) (b5228 core-prim . make-promise) (b5227 core-prim . exit) (b4f16 core-prim . command-line) (b5226 core-prim . string-fill!) (b5225 core-prim . string-set!) (b5224 core-prim . set-cdr!) (b5223 core-prim . set-car!) (b5222 core-prim . remove) (b5221 core-prim . remv) (b5220 core-prim . remp) (b521f core-prim . remq) (b521e core-prim . partition) (b521d core-prim . memv) (b521c core-prim . memq) (b521b core-prim . memp) (b521a core-prim . member) (b5219 core-prim . exists) (b5218 core-prim . for-all) (b5217 core-prim . fold-right) (b5216 core-prim . fold-left) (b5215 core-prim . find) (b5214 core-prim . filter) (b5213 core-prim . cons*) (b5212 core-prim . assv) (b5211 core-prim . assq) (b5210 core-prim . assp) (b520f core-prim . assoc) (b520e core-prim . call-with-string-output-port) (b520d core-prim . call-with-port) (b520c core-prim . call-with-bytevector-output-port) (b520b core-prim . bytevector->string) (b520a core-prim . buffer-mode?) (b5209 core-prim . binary-port?) (b5208 core-prim . with-exception-handler) (b5207 core-prim . raise-continuable) (b5206 core-prim . raise) (b3106 core-prim . eval) (b30fe core-prim . environment) (b5205 core-prim . make-enumeration) (b5204 core-prim . enum-set=?) (b5203 core-prim . enum-set-universe) (b5202 core-prim . enum-set-union) (b5201 core-prim . enum-set-subset?) (b5200 core-prim . enum-set-projection) (b51ff core-prim . enum-set-member?) (b51fe core-prim . enum-set-intersection) (b51fd core-prim . enum-set-indexer) (b51fc core-prim . enum-set-difference) (b51fb core-prim . enum-set-constructor) (b51fa core-prim . enum-set-complement) (b51f9 core-prim . enum-set->list) (b4c56 core-prim . who-condition?) (b4bce core-prim . warning?) (b4c0d core-prim . violation?) (b4ccd core-prim . undefined-violation?) (b4cb4 core-prim . syntax-violation?) (b4cb8 core-prim . syntax-violation-subform) (b4cb6 core-prim . syntax-violation-form) (b3126 core-prim . syntax-violation) (b51f8 core-prim . simple-conditions) (b4be3 core-prim . serious-condition?) (b4c6d core-prim . non-continuable-violation?) (b4bb7 core-prim . message-condition?) (b4c52 core-prim . make-who-condition) (b4bcc core-prim . make-warning) (b4c0b core-prim . make-violation) (b4ccb core-prim . make-undefined-violation) (b4cae core-prim . make-syntax-violation) (b4be1 core-prim . make-serious-condition) (b4c6b core-prim . make-non-continuable-violation) (b4bb3 core-prim . make-message-condition) (b4c95 core-prim . make-lexical-violation) (b4c37 core-prim . make-irritants-condition) (b4c80 core-prim . make-implementation-restriction-violation) (b4bf6 core-prim . make-error) (b4c20 core-prim . make-assertion-violation) (b4c97 core-prim . lexical-violation?) (b4c3b core-prim . irritants-condition?) (b4c82 core-prim . implementation-restriction-violation?) (b4bf8 core-prim . error?) (b4c58 core-prim . condition-who) (b51f7 core-prim . condition-predicate) (b4bb9 core-prim . condition-message) (b4c3d core-prim . condition-irritants) (b51f6 core-prim . condition-accessor) (b51f5 core-prim . condition) (b4c22 core-prim . assertion-violation?) (b51f4 core-prim . condition?) (b51f3 core-prim . utf32->string) (b51f2 core-prim . utf16->string) (b51f1 core-prim . utf8->string) (b51f0 core-prim . uint-list->bytevector) (b51ef core-prim . u8-list->bytevector) (b51ee core-prim . string->utf8) (b51ed core-prim . string->utf32) (b51ec core-prim . string->utf16) (b51eb core-prim . sint-list->bytevector) (b51ea core-prim . native-endianness) (b51e9 core-prim . bytevector?) (b51e8 core-prim . bytevector=?) (b51e7 core-prim . bytevector-uint-set!) (b51e6 core-prim . bytevector-uint-ref) (b51e5 core-prim . bytevector-u8-set!) (b51e4 core-prim . bytevector-u8-ref) (b51e3 core-prim . bytevector-u64-set!) (b51e2 core-prim . bytevector-u64-ref) (b51e1 core-prim . bytevector-u64-native-set!) (b51e0 core-prim . bytevector-u64-native-ref) (b51df core-prim . bytevector-u32-set!) (b51de core-prim . bytevector-u32-ref) (b51dd core-prim . bytevector-u32-native-set!) (b51dc core-prim . bytevector-u32-native-ref) (b51db core-prim . bytevector-u16-set!) (b51da core-prim . bytevector-u16-ref) (b51d9 core-prim . bytevector-u16-native-set!) (b51d8 core-prim . bytevector-u16-native-ref) (b51d7 core-prim . bytevector-sint-set!) (b51d6 core-prim . bytevector-sint-ref) (b51d5 core-prim . bytevector-s8-set!) (b51d4 core-prim . bytevector-s8-ref) (b51d3 core-prim . bytevector-s64-set!) (b51d2 core-prim . bytevector-s64-ref) (b51d1 core-prim . bytevector-s64-native-set!) (b51d0 core-prim . bytevector-s64-native-ref) (b51cf core-prim . bytevector-s32-set!) (b51ce core-prim . bytevector-s32-ref) (b51cd core-prim . bytevector-s32-native-set!) (b51cc core-prim . bytevector-s32-native-ref) (b51cb core-prim . bytevector-s16-set!) (b51ca core-prim . bytevector-s16-ref) (b51c9 core-prim . bytevector-s16-native-set!) (b51c8 core-prim . bytevector-s16-native-ref) (b51c7 core-prim . bytevector-length) (b51c6 core-prim . bytevector-ieee-single-ref) (b51c5 core-prim . bytevector-ieee-single-set!) (b51c4 core-prim . bytevector-ieee-single-native-set!) (b51c3 core-prim . bytevector-ieee-single-native-ref) (b51c2 core-prim . bytevector-ieee-double-set!) (b51c1 core-prim . bytevector-ieee-double-ref) (b51c0 core-prim . bytevector-ieee-double-native-set!) (b51bf core-prim . bytevector-ieee-double-native-ref) (b51be core-prim . bytevector-fill!) (b51bd core-prim . bytevector-copy!) (b51bc core-prim . bytevector-copy) (b51bb core-prim . bytevector->uint-list) (b51ba core-prim . bytevector->u8-list) (b51b9 core-prim . bytevector->sint-list) (b4e0b core-prim . no-nans-violation?) (b4df6 core-prim . no-infinities-violation?) (b4e09 core-prim . make-no-nans-violation) (b4df4 core-prim . make-no-infinities-violation) (b51b8 core-prim . real->flonum) (b51b7 core-prim . flzero?) (b51b6 core-prim . fltruncate) (b51b5 core-prim . fltan) (b51b4 core-prim . flsqrt) (b51b3 core-prim . flsin) (b51b2 core-prim . flround) (b51b1 core-prim . flpositive?) (b51b0 core-prim . flonum?) (b51af core-prim . flodd?) (b51ae core-prim . flnumerator) (b51ad core-prim . flnegative?) (b51ac core-prim . flnan?) (b51ab core-prim . flmod0) (b51aa core-prim . flmod) (b51a9 core-prim . flmin) (b51a8 core-prim . flmax) (b51a7 core-prim . fllog) (b51a6 core-prim . flinteger?) (b51a5 core-prim . flinfinite?) (b51a4 core-prim . flfloor) (b51a3 core-prim . flfinite?) (b51a2 core-prim . flexpt) (b51a1 core-prim . flexp) (b51a0 core-prim . fleven?) (b519f core-prim . fldiv0-and-mod0) (b519e core-prim . fldiv0) (b519d core-prim . fldiv-and-mod) (b519c core-prim . fldiv) (b519b core-prim . fldenominator) (b519a core-prim . flcos) (b5199 core-prim . flceiling) (b5198 core-prim . flatan) (b5197 core-prim . flasin) (b5196 core-prim . flacos) (b5195 core-prim . flabs) (b5194 core-prim . fl>?) (b5193 core-prim . fl>=?) (b5192 core-prim . fl=?) (b5191 core-prim . fl<?) (b5190 core-prim . fl<=?) (b518f core-prim . fl/) (b518e core-prim . fl-) (b518d core-prim . fl+) (b518c core-prim . fl*) (b518b core-prim . fixnum->flonum) (b518a core-prim . fxzero?) (b5189 core-prim . fxxor) (b5188 core-prim . fxrotate-bit-field) (b5187 core-prim . fxreverse-bit-field) (b5186 core-prim . fxpositive?) (b5185 core-prim . fxodd?) (b5184 core-prim . fxnot) (b5183 core-prim . fxnegative?) (b5182 core-prim . fxmod0) (b5181 core-prim . fxmod) (b5180 core-prim . fxmin) (b517f core-prim . fxmax) (b517e core-prim . fxlength) (b517d core-prim . fxior) (b517c core-prim . fxif) (b517b core-prim . fxfirst-bit-set) (b517a core-prim . fxeven?) (b5179 core-prim . fxdiv0-and-mod0) (b5178 core-prim . fxdiv0) (b5177 core-prim . fxdiv-and-mod) (b5176 core-prim . fxdiv) (b5175 core-prim . fxcopy-bit-field) (b5174 core-prim . fxcopy-bit) (b5173 core-prim . fxbit-set?) (b5172 core-prim . fxbit-field) (b5171 core-prim . fxbit-count) (b5170 core-prim . fxarithmetic-shift-right) (b516f core-prim . fxarithmetic-shift-left) (b516e core-prim . fxarithmetic-shift) (b516d core-prim . fxand) (b516c core-prim . fx>?) (b516b core-prim . fx>=?) (b516a core-prim . fx=?) (b5169 core-prim . fx<?) (b5168 core-prim . fx<=?) (b5167 core-prim . fx-/carry) (b5166 core-prim . fx-) (b5165 core-prim . fx+/carry) (b5164 core-prim . fx+) (b5163 core-prim . fx*/carry) (b5162 core-prim . fx*) (b5161 core-prim . greatest-fixnum) (b5160 core-prim . least-fixnum) (b515f core-prim . fixnum-width) (b515e core-prim . fixnum?) (b515d core-prim . bitwise-rotate-bit-field) (b515c core-prim . bitwise-reverse-bit-field) (b515b core-prim . bitwise-length) (b515a core-prim . bitwise-if) (b5159 core-prim . bitwise-first-bit-set) (b5158 core-prim . bitwise-copy-bit-field) (b5157 core-prim . bitwise-copy-bit) (b5156 core-prim . bitwise-bit-set?) (b5155 core-prim . bitwise-bit-field) (b5154 core-prim . bitwise-bit-count) (b5153 core-prim . bitwise-xor) (b5152 core-prim . bitwise-ior) (b5151 core-prim . bitwise-and) (b5150 core-prim . bitwise-not) (b514f core-prim . bitwise-arithmetic-shift-right) (b514e core-prim . bitwise-arithmetic-shift-left) (b514d core-prim . bitwise-arithmetic-shift) (b514c core-prim . zero?) (b514b core-prim . vector?) (b514a core-prim . vector-set!) (b5149 core-prim . vector-ref) (b5148 core-prim . vector-map) (b5147 core-prim . vector-length) (b5146 core-prim . vector-for-each) (b5145 core-prim . vector-fill!) (b5144 core-prim . vector->list) (b5143 core-prim . vector) (b5142 core-prim . values) (b5141 core-prim . truncate) (b5140 core-prim . tan) (b513f core-prim . symbol?) (b513e core-prim . symbol=?) (b513d core-prim . symbol->string) (b513c core-prim . substring) (b513b core-prim . string?) (b513a core-prim . string>?) (b5139 core-prim . string>=?) (b5138 core-prim . string=?) (b5137 core-prim . string<?) (b5136 core-prim . string<=?) (b5135 core-prim . string-ref) (b5134 core-prim . string-length) (b5133 core-prim . string-for-each) (b5132 core-prim . string-copy) (b5131 core-prim . string-append) (b5130 core-prim . string->symbol) (b512f core-prim . string->number) (b512e core-prim . string->list) (b512d core-prim . string) (b512c core-prim . sqrt) (b512b core-prim . sin) (b512a core-prim . round) (b5129 core-prim . reverse) (b5128 core-prim . real?) (b5127 core-prim . real-valued?) (b5126 core-prim . real-part) (b5125 core-prim . rationalize) (b5124 core-prim . rational?) (b5123 core-prim . rational-valued?) (b5122 core-prim . procedure?) (b5121 core-prim . positive?) (b5120 core-prim . pair?) (b511f core-prim . odd?) (b511e core-prim . numerator) (b511d core-prim . number?) (b511c core-prim . number->string) (b511b core-prim . null?) (b511a core-prim . not) (b5119 core-prim . negative?) (b5118 core-prim . nan?) (b5117 core-prim . min) (b5116 core-prim . max) (b5115 core-prim . map) (b5114 core-prim . make-vector) (b5113 core-prim . make-string) (b5112 core-prim . make-rectangular) (b5111 core-prim . make-polar) (b5110 core-prim . magnitude) (b510f core-prim . log) (b510e core-prim . list?) (b510d core-prim . list-tail) (b510c core-prim . list-ref) (b510b core-prim . list->vector) (b510a core-prim . list->string) (b5109 core-prim . list) (b5108 core-prim . length) (b5107 core-prim . lcm) (b5106 core-prim . integer?) (b5105 core-prim . integer-valued?) (b5104 core-prim . integer->char) (b5103 core-prim . infinite?) (b5102 core-prim . inexact?) (b5101 core-prim . inexact) (b5100 core-prim . imag-part) (b50ff core-prim . gcd) (b50fe core-prim . for-each) (b50fd core-prim . floor) (b50fc core-prim . finite?) (b50fb core-prim . expt) (b50fa core-prim . exp) (b50f9 core-prim . exact?) (b50f8 core-prim . exact-integer-sqrt) (b50f7 core-prim . exact) (b50f6 core-prim . even?) (b50f5 core-prim . error) (b50f4 core-prim . eqv?) (b50f3 core-prim . equal?) (b50f2 core-prim . eq?) (b50f1 core-prim . dynamic-wind) (b50f0 core-prim . div0-and-mod0) (b50ef core-prim . mod0) (b50ee core-prim . div0) (b50ed core-prim . div-and-mod) (b50ec core-prim . mod) (b50eb core-prim . div) (b50ea core-prim . denominator) (b50e9 core-prim . cos) (b50e8 core-prim . cons) (b50e7 core-prim . complex?) (b50e6 core-prim . char?) (b50e5 core-prim . char>?) (b50e4 core-prim . char>=?) (b50e3 core-prim . char=?) (b50e2 core-prim . char<?) (b50e1 core-prim . char<=?) (b50e0 core-prim . char->integer) (b50df core-prim . ceiling) (b50de core-prim . call-with-values) (b50dd core-prim . call/cc) (b50dc core-prim . call-with-current-continuation) (b50db core-prim . cddddr) (b50da core-prim . cdddar) (b50d9 core-prim . cddadr) (b50d8 core-prim . cddaar) (b50d7 core-prim . cdaddr) (b50d6 core-prim . cdadar) (b50d5 core-prim . cdaadr) (b50d4 core-prim . cdaaar) (b50d3 core-prim . cadddr) (b50d2 core-prim . caddar) (b50d1 core-prim . cadadr) (b50d0 core-prim . cadaar) (b50cf core-prim . caaddr) (b50ce core-prim . caadar) (b50cd core-prim . caaadr) (b50cc core-prim . caaaar) (b50cb core-prim . cdddr) (b50ca core-prim . cddar) (b50c9 core-prim . cdadr) (b50c8 core-prim . cdaar) (b50c7 core-prim . caddr) (b50c6 core-prim . cadar) (b50c5 core-prim . caadr) (b50c4 core-prim . caaar) (b50c3 core-prim . cddr) (b50c2 core-prim . cdar) (b50c1 core-prim . cadr) (b50c0 core-prim . caar) (b50bf core-prim . cdr) (b50be core-prim . car) (b50bd core-prim . boolean?) (b50bc core-prim . boolean=?) (b50bb core-prim . atan) (b50ba core-prim . assertion-violation) (b3120 core-prim . assertion-error) (b50b9 core-prim . asin) (b50b8 core-prim . apply) (b50b7 core-prim . append) (b50b6 core-prim . angle) (b50b5 core-prim . acos) (b50b4 core-prim . abs) (b50b3 core-prim . /) (b50b2 core-prim . *) (b50b1 core-prim . -) (b50b0 core-prim . +) (b50af core-prim . >=) (b50ae core-prim . >) (b50ad core-prim . =) (b50ac core-prim . <=) (b50ab core-prim . <) (b50aa core-prim . library) (b50a9 $core-rtd &no-nans-rtd &no-nans-rcd) (b50a8 $core-rtd &no-infinities-rtd &no-infinities-rcd) (b50a7 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (b50a6 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (b50a5 $core-rtd &i/o-port-rtd &i/o-port-rcd) (b50a4 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (b50a3 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (b50a2 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (b50a1 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (b50a0 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (b509f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (b509e $core-rtd &i/o-write-rtd &i/o-write-rcd) (b509d $core-rtd &i/o-read-rtd &i/o-read-rcd) (b509c $core-rtd &i/o-rtd &i/o-rcd) (b509b $core-rtd &undefined-rtd &undefined-rcd) (b509a $core-rtd &syntax-rtd &syntax-rcd) (b5099 $core-rtd &lexical-rtd &lexical-rcd) (b5098 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (b5097 $core-rtd &non-continuable-rtd &non-continuable-rcd) (b5096 $core-rtd &who-rtd &who-rcd) (b5095 $core-rtd &irritants-rtd &irritants-rcd) (b5094 $core-rtd &assertion-rtd &assertion-rcd) (b5093 $core-rtd &violation-rtd &violation-rcd) (b5092 $core-rtd &error-rtd &error-rcd) (b5091 $core-rtd &serious-rtd &serious-rcd) (b5090 $core-rtd &warning-rtd &warning-rcd) (b508f $core-rtd &message-rtd &message-rcd) (b508e $core-rtd &condition-rtd &condition-rcd) (b508d macro . define-condition-type) (b508c macro . define-enumeration) (b508b macro . define-record-type) (b508a macro . parent-rtd) (b5089 macro . nongenerative) (b5088 macro . opaque) (b5087 macro . sealed) (b5086 macro . protocol) (b5085 macro . parent) (b5084 macro . immutable) (b5083 macro . mutable) (b5082 macro . fields) (b5081 macro . error-handling-mode) (b5080 macro . file-options) (b507f macro . buffer-mode) (b507e macro . eol-style) (b507d macro . guard) (b507c macro . trace-define) (b507b macro . trace-lambda) (b507a macro . unsyntax-splicing) (b5079 macro . unsyntax) (b5078 macro . unquote-splicing) (b5077 macro . unquote) (b5076 macro . _) (b5075 macro . else) (b5074 macro . =>) (b5073 macro . ...) (b5072 macro . assert) (b5071 macro . endianness) (b5070 macro . delay) (b506f macro . time) (b506e macro . do) (b506d macro . cond) (b506c macro . let*) (b506b macro . let) (b506a macro . let*-values) (b5069 macro . let-values) (b5068 macro . identifier-syntax) (b5067 macro . with-syntax) (b5066 macro . quasisyntax) (b5065 macro . quasiquote) (b5064 macro . syntax-rules) (b5063 macro . include) (b5062 macro . define-struct) (b5061 core-macro . record-constructor-descriptor) (b5060 core-macro . record-type-descriptor) (b505f macro . case) (b505e macro . parameterize) (b505d macro . unless) (b505c macro . when) (b505b core-macro . or) (b505a core-macro . and) (b5059 core-macro . if) (b5058 core-macro . letrec*) (b5057 core-macro . letrec) (b5056 core-macro . type-descriptor) (b5055 core-macro . case-lambda) (b5054 core-macro . lambda) (b5053 core-macro . syntax) (b5052 core-macro . syntax-case) (b5051 core-macro . quote) (b5050 core-macro . foreign-call) (b504f letrec-syntax) (b504e let-syntax) (b504d set!) (b504c import) (b504b begin) (b504a module) (b5049 define-syntax) (b5048 define)) values values '#f '#f '#f '#f) (b2c6b@b2ab7@install-library 'b538b '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . b536a) (eval-core . b5369) (set-symbol-value! . b5368) (symbol-value . b5367) (gensym . b5366) (void . b5365)) '() values values '#f '#f '#f '#f) (b2c6b@b2ab7@install-library 'b538c '(mosh) '() '() '() '() '((set-symbol-value! . b5368) (symbol-value . b5367) (regexp? . b5363) (read-line . b5362) (ungensym . b5361) (alist->eq-hash-table . b5360) (assoc-ref . b535f) (print . b535e) (format . b535d) (host-os . b535c) (library-path . b2a96) (standard-library-path . b535b) (file-newer? . b535a) (stat-mtime . b5359) (digit->integer . b5355) (call-with-string-input-port . b5354) (call-with-string-io . b5353) (string-split . b5352) (bytevector-for-each . b5351) (string->regexp . b5350) (rxmatch . b534f) (regexp-replace-all . b534e) (hashtable-for-each . b534d) (set-current-directory! . b5348) (expand-path . b5347) (current-directory . b5346) (p . b5309) (get-timeofday . b52f1) (get-command-line . b52f0) (sys-display . b52ef) (whereis . b52ee) (register . b52ed) (vm-join! . b52ec) (vm-set-value! . b52eb) (vm? . b52ea) (main-vm? . b52e9) (vm-eval . b52e8) (vm-self . b52e7) (vm-start! . b52e6) (make-vm . b52e5) (mutex-try-lock! . b52e4) (mutex-unlock! . b52e3) (mutex-lock! . b52e2) (mutex? . b52e1) (make-mutex . b52e0) (condition-variable-notify-all! . b52df) (condition-variable-notify! . b52de) (condition-variable-wait! . b52dd) (make-condition-variable . b52dc) (mosh-executable-path . b52db) (make-file-options . b52da) (source-info . b52d9) (make-compiler-instruction . b52d8) (make-instruction . b52d7) (set-source-info! . b52d6) (bignum? . b52d5) (fast-equal? . b52d4) (fasl-read . b52d3) (fasl-write . b52d2) (time-usage . b52d1) (os-constant . b52d0) (time . b506f) (include . b5063)) '() values values '#f '#f '#f '#f) (b2c6b@b2ab7@install-library 'b538d '(system) '() '() '() '() '((write-to-file . b5358) (file->list . b5357) (file->string . b5356) (call-process . b534c) (local-tz-offset . b534b) (microseconds . b534a) (directory-list . b5349) (expand-path . b5347) (%spawn . b5345) (%waitpid . b5344) (simple-struct-name . b5343) (simple-struct-set! . b5342) (simple-struct-ref . b5341) (make-simple-struct . b5340) (simple-struct? . b533f) (pointer-ref-c-int64 . b533e) (pointer-ref-c-int32 . b533d) (pointer-ref-c-int16 . b533c) (pointer-ref-c-int8 . b533b) (pointer-ref-c-uint64 . b533a) (pointer-ref-c-uint32 . b5339) (pointer-ref-c-uint16 . b5338) (pointer-ref-c-uint8 . b5337) (pointer-set-c-uint64! . b5336) (pointer-set-c-uint32! . b5335) (pointer-set-c-uint16! . b5334) (pointer-set-c-uint8! . b5333) (pointer-set-c-int64! . b5332) (pointer-set-c-int32! . b5331) (pointer-set-c-int16! . b5330) (pointer-set-c-int8! . b532f) (pointer-set-c-pointer! . b532e) (pointer-set-c-double! . b532d) (pointer-set-c-float! . b532c) (pointer-set-c-long-long! . b532b) (pointer-set-c-long! . b532a) (pointer-set-c-int! . b5329) (pointer-set-c-short! . b5328) (pointer-set-c-char! . b5327) (pointer-ref-c-pointer . b5326) (pointer-ref-c-double . b5325) (pointer-ref-c-float . b5324) (pointer-ref-c-unsigned-long-long . b5323) (pointer-ref-c-signed-long-long . b5322) (pointer-ref-c-unsigned-long . b5321) (pointer-ref-c-signed-long . b5320) (pointer-ref-c-unsigned-int . b531f) (pointer-ref-c-signed-int . b531e) (pointer-ref-c-unsigned-short . b531d) (pointer-ref-c-signed-short . b531c) (pointer-ref-c-unsigned-char . b531b) (pointer-ref-c-signed-char . b531a) (pointer->integer . b5319) (integer->pointer . b5318) (pointer? . b5317) (shared-errno . b5316) (%ffi-supported? . b5315) (%ffi-pointer->string . b5314) (%ffi-call->string-or-zero . b5313) (%ffi-call->double . b5312) (%ffi-call->void* . b5311) (%ffi-call->void . b5310) (%ffi-call->char . b530f) (%ffi-call->int . b530e) (%ffi-lookup . b530d) (%ffi-open . b530c) (%fork . b530b) (%pipe . b530a) (open-output-string . b5308) (get-output-string . b5307) (file-stat-ctime . b5306) (file-stat-atime . b5305) (file-stat-mtime . b5304) (file-size-in-bytes . b5303) (file-writable? . b5302) (file-executable? . b5301) (file-readable? . b5300) (file-regular? . b52ff) (file-symbolic-link? . b52fe) (file-directory? . b52fd) (create-symbolic-link . b52fc) (rename-file . b52fb) (delete-directory . b52fa) (create-directory . b52f9) (create-mosh-cache-dir . b52f8) (get-environment-variables . b52f7) (get-environment-variable . b52f6) (join-wraps . b52f5) (id->real-label . b52f4) (same-marks? . b52f3) (same-marks*? . b52f2) (make-parameter . b287f) (socket-port . b52cf) (socket-shutdown . b52ce) (socket-close . b52cd) (socket-send . b52cc) (socket-recv! . b52cb) (socket-recv . b52ca) (make-server-socket . b52c9) (make-client-socket . b52c8) (socket-accept . b52c7) (socket? . b52c6) (parameterize . b505e)) '() values values '#f '#f '#f '#f))
((lambda (b4f05@add-library-path! b4f07@parse-and-add-library-path b4f09@for-each-with-index b4f0b@rpad b4f0d@condition-printer b4f0f@record->field-alist b4f11@map-with-index b4f13@repl b4f15@trace-printer b4f17@command-line b4f19@local-library-path b4f1b@load/args b4f1d@load b4f1f@ironscheme-build b4f21@eval-top-level b4f23@compile-system-libraries b4f25@compile b4f27@compile->closure b4f29@pre-compile-r6rs-file b4f2b@load-r6rs-top-level b4f2d@load-r6rs-top-level-sexp) (begin (set! b4f05@add-library-path! (lambda (b4f50@path) (b2c5b@b2a97@library-path (append (b2c5b@b2a97@library-path) (list b4f50@path))))) (set! b4f07@parse-and-add-library-path (lambda (b4f52@paths b4f53@message) ((lambda (b4f56@t) (if b4f56@t ((lambda (b4f58@paths) (for-each (lambda (b4f5a@path) (if (file-exists? b4f5a@path) (b4f05@add-library-path! (expand-path b4f5a@path)) (format (current-error-port) b4f53@message b4f5a@path))) (string-split b4f58@paths '#\:))) b4f56@t) (void))) b4f52@paths))) (set! b4f09@for-each-with-index (lambda (b4f5c@proc b4f5d@lst) (letrec ((b4f60@loop (lambda (b4f62@i b4f63@lst) (if (null? b4f63@lst) (if '#f '#f (void)) (begin (b4f5c@proc b4f62@i (car b4f63@lst)) (b4f60@loop (+ b4f62@i '1) (cdr b4f63@lst))))))) (b4f60@loop '1 b4f5d@lst)))) (set! b4f0b@rpad (lambda (b4f66@str b4f67@pad b4f68@n) ((lambda (b4f6c@rest) ((letrec ((b4f6e@loop (lambda (b4f70@rest b4f71@ret) (if (<= b4f70@rest '0) b4f71@ret (b4f6e@loop (- b4f70@rest '1) (string-append b4f71@ret b4f67@pad)))))) b4f6e@loop) b4f6c@rest (format '"~a" b4f66@str))) (- b4f68@n (string-length (format '"~a" b4f66@str)))))) (set! b4f0d@condition-printer (lambda (b4f74@e b4f75@port) ((lambda (b4f79@max-condition-len) (begin (set! b4f79@max-condition-len (apply max (map (lambda (b4f8a@c) (string-length (symbol->string (record-type-name (record-rtd b4f8a@c))))) (simple-conditions b4f74@e)))) (begin (display '" Condition components:\n" b4f75@port) (b4f09@for-each-with-index (lambda (b4f7a@i b4f7b@x) ((lambda (b4f7e@rtd b4f7f@fields-alist) (begin (format b4f75@port '" ~d. ~a" b4f7a@i (b4f0b@rpad (symbol->string (record-type-name b4f7e@rtd)) '" " b4f79@max-condition-len)) (if (null? b4f7f@fields-alist) (newline b4f75@port) (void)) ((letrec ((b4f82@loop (lambda (b4f84@first b4f85@fields-alist) (if (null? b4f85@fields-alist) '() ((lambda (b4f88@field) (begin (if (not b4f84@first) (display (b4f0b@rpad '"" '" " (+ '4 b4f79@max-condition-len)) b4f75@port) (void)) (display '"       " b4f75@port) (display (car b4f88@field) b4f75@port) (display '": " b4f75@port) (write (cdr b4f88@field) b4f75@port) (newline b4f75@port) (b4f82@loop '#f (cdr b4f85@fields-alist)))) (car b4f85@fields-alist)))))) b4f82@loop) '#t b4f7f@fields-alist))) (record-rtd b4f7b@x) (b4f0f@record->field-alist b4f7b@x))) (simple-conditions b4f74@e))))) '#f))) (set! b4f0f@record->field-alist (lambda (b4f8c@r) ((lambda (b4f8f@ref) (begin (set! b4f8f@ref (lambda (b4f9a@rtd b4f9b@i b4f9c@x) ((lambda (b4fa0@val) (if (symbol? b4fa0@val) (ungensym b4fa0@val) b4fa0@val)) ((record-accessor b4f9a@rtd b4f9b@i) b4f9c@x)))) ((letrec ((b4f90@loop (lambda (b4f92@ret b4f93@rtd) (if b4f93@rtd (b4f90@loop (append b4f92@ret (b4f11@map-with-index (lambda (b4f96@i b4f97@field) (cons b4f97@field (b4f8f@ref b4f93@rtd b4f96@i b4f8c@r))) (vector->list (record-type-field-names b4f93@rtd)))) (record-type-parent b4f93@rtd)) b4f92@ret)))) b4f90@loop) '() (record-rtd b4f8c@r)))) '#f))) (set! b4f11@map-with-index (lambda (b4fa2@proc b4fa3@lst) ((letrec ((b4fa6@loop (lambda (b4fa8@i b4fa9@lst b4faa@ret) (if (null? b4fa9@lst) (reverse b4faa@ret) (b4fa6@loop (+ b4fa8@i '1) (cdr b4fa9@lst) (cons (b4fa2@proc b4fa8@i (car b4fa9@lst)) b4faa@ret)))))) b4fa6@loop) '0 b4fa3@lst '()))) (set! b4f13@repl (lambda b4fae@x ((lambda (b4fb1@rec) (begin (set! b4fb1@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (b4fb4@b4fb2) (lambda () (with-exception-handler (lambda (b4fb6@e) ((call/cc (lambda (b4fb8@b4fb3) (b4fb4@b4fb2 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? b4fb6@e) (b4f0d@condition-printer b4fb6@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" b4fb6@e))) (b4fb8@b4fb3 (lambda () (raise-continuable b4fb6@e)))))))))) (lambda () ((letrec ((b4fba@loop (lambda (b4fbc@line b4fbd@accum) ((lambda (b4fc1@parentheses-ok? b4fc3@eval-string-print) (begin (set! b4fc1@parentheses-ok? (lambda (b4fc8@text) ((letrec ((b4fca@loop (lambda (b4fcc@chars b4fcd@p0 b4fce@p1) (if (null? b4fcc@chars) (= '0 b4fcd@p0 b4fce@p1) ((lambda (b4fd2@t) (if (memv b4fd2@t '(#\()) (b4fca@loop (cdr b4fcc@chars) (+ b4fcd@p0 '1) b4fce@p1) (if (memv b4fd2@t '(#\))) (b4fca@loop (cdr b4fcc@chars) (- b4fcd@p0 '1) b4fce@p1) (if (memv b4fd2@t '(#\[)) (b4fca@loop (cdr b4fcc@chars) b4fcd@p0 (+ b4fce@p1 '1)) (if (memv b4fd2@t '(#\])) (b4fca@loop (cdr b4fcc@chars) b4fcd@p0 (- b4fce@p1 '1)) (b4fca@loop (cdr b4fcc@chars) b4fcd@p0 b4fce@p1)))))) (car b4fcc@chars)))))) b4fca@loop) (string->list b4fc8@text) '0 '0))) (set! b4fc3@eval-string-print (lambda (b4fc6@text) (if (not (or (string=? '"\n" b4fc6@text) (= '0 (string-length b4fc6@text)))) (write (b4f21@eval-top-level (call-with-port (open-string-input-port b4fc6@text) read))) (void)))) (if (eof-object? b4fbc@line) (begin (b4fc3@eval-string-print b4fbd@accum) (exit)) ((lambda (b4fc4@current) (if (b4fc1@parentheses-ok? b4fc4@current) (b4fc3@eval-string-print b4fc4@current) (b4fba@loop (get-line (current-input-port)) b4fc4@current))) (string-append b4fbd@accum b4fbc@line))))) '#f '#f)))) b4fba@loop) (get-line (current-input-port)) '""))))))) (newline) (b4fb1@rec)))) (b4fb1@rec))) '#f))) (set! b4f15@trace-printer (b29a1@b2880@make-parameter write)) (set! b4f17@command-line (b29a1@b2880@make-parameter (get-command-line))) (set! b4f19@local-library-path (lambda (b4fd4@filename) (b2c5b@b2a97@library-path))) (set! b4f1b@load/args (lambda (b4fd6@filename . b4fd8@args) (begin (apply b4f2b@load-r6rs-top-level b4fd6@filename 'load b4fd8@args) (void)))) (set! b4f1d@load (lambda (b4fda@filename) (begin (apply b4f2b@load-r6rs-top-level b4fda@filename 'load (b4f17@command-line)) (void)))) (set! b4f1f@ironscheme-build (lambda () (b4f1d@load '"ironscheme-buildscript.ss"))) (set! b4f21@eval-top-level (lambda (b4fdc@x) (b4b2c@b3107@eval b4fdc@x (b4b42@b3133@interaction-environment)))) (set! b4f23@compile-system-libraries (lambda () (b4f21@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! b4f25@compile (lambda (b4fde@filename) (b4f2b@load-r6rs-top-level b4fde@filename 'compile))) (set! b4f27@compile->closure (lambda (b4fe0@filename) (b4f2b@load-r6rs-top-level b4fe0@filename 'closure))) (set! b4f29@pre-compile-r6rs-file (lambda (b4fe2@filename) (b4f2b@load-r6rs-top-level b4fe2@filename 'compile))) (set! b4f2b@load-r6rs-top-level (lambda (b4fe4@filename b4fe5@how . b4fe8@args) ((lambda (b4fee@b4feb b4fef@b4fed) ((lambda (b4ff2@swap) (dynamic-wind b4ff2@swap (lambda () ((lambda (b4ff4@x*) ((lambda (b4ff6@t) (if (memv b4ff6@t '(closure)) (b4b41@b3131@pre-compile-r6rs-top-level b4ff4@x*) (if (memv b4ff6@t '(load)) ((lambda (b5000@b4ff9 b5001@b4ffb b5002@b4ffd b5003@b4fff) ((lambda (b5008@swap) (dynamic-wind b5008@swap (lambda () (begin (display '"before compile\n") ((lambda (b500a@compiled) (begin (display '"before compile2\n") (b2c5f@b2a9f@serialize-all b299c@b2876@serialize-library b29f8@b29b1@compile-core-expr) (display '"before compile3\n") (b500a@compiled))) (b4b40@b312f@compile-r6rs-top-level b4ff4@x*)))) b5008@swap)) (lambda () (begin ((lambda (b500c@t) (begin (b5000@b4ff9 b5002@b4ffd) (set! b5002@b4ffd b500c@t))) (b5000@b4ff9)) ((lambda (b500e@t) (begin (b5001@b4ffb b5003@b4fff) (set! b5003@b4fff b500e@t))) (b5001@b4ffb)))))) b4f17@command-line b29a2@b2882@mosh-cache-dir (cons b4fe4@filename (car b4fe8@args)) (create-mosh-cache-dir)) (if (memv b4ff6@t '(compile)) (begin (b4b40@b312f@compile-r6rs-top-level b4ff4@x*) (b2c5f@b2a9f@serialize-all b299c@b2876@serialize-library b29f8@b29b1@compile-core-expr)) (if '#f '#f (void)))))) b4fe5@how)) (with-input-from-file b4fe4@filename (lambda () ((letrec ((b5010@f (lambda () ((lambda (b5012@x) (if (eof-object? b5012@x) '() (cons b5012@x (b5010@f)))) (b2994@b2866@read-annotated))))) b5010@f)))))) b4ff2@swap)) (lambda () ((lambda (b5014@t) (begin (b4fee@b4feb b4fef@b4fed) (set! b4fef@b4fed b5014@t))) (b4fee@b4feb))))) b2c5b@b2a97@library-path (b4f19@local-library-path b4fe4@filename)))) (set! b4f2d@load-r6rs-top-level-sexp (lambda (b5016@import-spec b5017@thunk) ((lambda (b501e@b501b b501f@b501d) ((lambda (b5022@swap) (dynamic-wind b5022@swap (lambda () ((lambda (b5028@b5025 b5029@b5027) ((lambda (b502c@swap) (dynamic-wind b502c@swap (lambda () ((b4b40@b312f@compile-r6rs-top-level (list (cons 'import b5016@import-spec) (list b5017@thunk))))) b502c@swap)) (lambda () ((lambda (b502e@t) (begin (b5028@b5025 b5029@b5027) (set! b5029@b5027 b502e@t))) (b5028@b5025))))) b4f17@command-line '())) b5022@swap)) (lambda () ((lambda (b5030@t) (begin (b501e@b501b b501f@b501d) (set! b501f@b501d b5030@t))) (b501e@b501b))))) b2c5b@b2a97@library-path (b4f19@local-library-path '"")))) (begin (set! b5046@b4f2d@load-r6rs-top-level-sexp b4f2d@load-r6rs-top-level-sexp) (set! b5045@b4f2b@load-r6rs-top-level b4f2b@load-r6rs-top-level) (set! b5044@b4f29@pre-compile-r6rs-file b4f29@pre-compile-r6rs-file) (set! b5043@b4f27@compile->closure b4f27@compile->closure) (set! b5042@b4f25@compile b4f25@compile) (set! b5041@b4f23@compile-system-libraries b4f23@compile-system-libraries) (set! b5040@b4f21@eval-top-level b4f21@eval-top-level) (set! b503f@b4f1f@ironscheme-build b4f1f@ironscheme-build) (set! b503e@b4f1d@load b4f1d@load) (set! b503d@b4f1b@load/args b4f1b@load/args) (set! b503c@b4f19@local-library-path b4f19@local-library-path) (set! b503b@b4f17@command-line b4f17@command-line) (set! b503a@b4f15@trace-printer b4f15@trace-printer) (set! b5039@b4f13@repl b4f13@repl) (set! b5038@b4f11@map-with-index b4f11@map-with-index) (set! b5037@b4f0f@record->field-alist b4f0f@record->field-alist) (set! b5036@b4f0d@condition-printer b4f0d@condition-printer) (set! b5035@b4f0b@rpad b4f0b@rpad) (set! b5034@b4f09@for-each-with-index b4f09@for-each-with-index) (set! b5033@b4f07@parse-and-add-library-path b4f07@parse-and-add-library-path) (set! b5032@b4f05@add-library-path! b4f05@add-library-path!) (b2c60@b2aa1@current-precompiled-library-loader b299d@b2878@load-serialized-library) (set-symbol-value! 'load b4f1d@load) (set-symbol-value! 'pre-compile-r6rs-file b4f29@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs b4f21@eval-top-level) (set-symbol-value! 'int-env-syms b4b23@b30f5@interaction-environment-symbols) (set-symbol-value! 'expanded2core b29f7@b29af@expanded->core) (set-symbol-value! 'trace-printer b4f15@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (b4f2e@c) (condition (b4e62@b4c6c@make-non-continuable-violation) (b4e58@b4c53@make-who-condition 'raise) (b4e1c@b4bb4@make-message-condition '"returned from non-continuable exception") (b4e4e@b4c38@make-irritants-condition (list b4f2e@c))))) (b4f07@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (b4f07@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (b4f05@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (b4f05@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (b4f05@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (b4f30@prefix) (b2c5c@b2a99@library-extensions (b4f30@prefix '".mosh" (b2c5c@b2a99@library-extensions)))) (lambda (b4f32@ext b4f33@ls) (append (map (lambda (b4f36@x) (string-append b4f32@ext b4f36@x)) b4f33@ls) b4f33@ls))) ((lambda (b4f38@args b4f39@port) ((lambda (b4f3d@ref) (begin (set! b4f3d@ref (lambda (b4f48@rtd b4f49@i b4f4a@x) ((lambda (b4f4e@val) (if (symbol? b4f4e@val) (ungensym b4f4e@val) b4f4e@val)) ((record-accessor b4f48@rtd b4f49@i) b4f4a@x)))) (with-exception-handler (lambda (b4f3e@c) (if (condition? b4f3e@c) (b4f0d@condition-printer b4f3e@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" b4f3e@c))) (lambda () (if ((call/cc (lambda (b4f42@b4f40) (lambda () (with-exception-handler (lambda (b4f44@c) ((call/cc (lambda (b4f46@b4f41) (b4f42@b4f40 (lambda () (if '#t '#f (b4f46@b4f41 (lambda () (raise-continuable b4f44@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (b4f2d@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? b4f38@args) (b4f13@repl) (b4f2b@load-r6rs-top-level (car b4f38@args) 'load (cdr b4f38@args)))))))) '#f)) (b4f17@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
