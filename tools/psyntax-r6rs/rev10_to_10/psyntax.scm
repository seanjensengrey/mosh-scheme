;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (g2765@read-annotated g2767@annotation-stripped g2769@annotation? g276b@annotation-source g276d@annotation-expression g276f@scm->fasl g2771@fasl-save g2773@fasl-load g2775@serialize-library g2777@load-serialized-library g2779@make-record-printer g277b@compile-core g277d@read-library-source-file g277f@make-parameter g27e7@file-options-spec) (begin (set! g2765@read-annotated read) (set! g2767@annotation-stripped (lambda (g27e8@x) (g276d@annotation-expression g27e8@x))) (set! g2769@annotation? (lambda (g27ea@x) (source-info g27ea@x))) (set! g276b@annotation-source (lambda (g27ec@x) (source-info g27ec@x))) (set! g276d@annotation-expression (lambda (g27ee@x) (if (pair? g27ee@x) (cons (car g27ee@x) (cdr g27ee@x)) (display '"line:46\n")))) (set! g276f@scm->fasl (lambda (g27f0@filename) (string-append g27f0@filename '".fasl"))) (set! g2771@fasl-save (lambda (g27f2@filename g27f3@obj) (call-with-port (open-file-output-port g27f2@filename) (lambda (g27f6@port) ((symbol-value 'fasl-write!) g27f3@obj g27f6@port))))) (set! g2773@fasl-load (lambda (g27f8@filename) (call-with-port (open-file-input-port g27f8@filename) (symbol-value 'fasl-read!)))) (set! g2775@serialize-library (lambda (g27fa@filename g27fb@obj) (begin (format '#t '"serialize-library ~a\n..." g27fa@filename) ((lambda (g27fe@expanded2core) ((lambda (g2800@compile) ((lambda (g2802@code) ((lambda (g2804@pivot) ((lambda (g2806@visit) ((lambda () (begin (set-car! g2804@pivot g2806@visit) ((lambda (g2808@pivot) ((lambda (g280a@invoke) ((lambda () (set-car! g2808@pivot g280a@invoke)))) (g2800@compile (g27fe@expanded2core (car g2808@pivot))))) (cdr g2804@pivot)))))) (g2800@compile (g27fe@expanded2core (car g2804@pivot))))) (cddddr (cddddr g2802@code)))) g27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (g280c@fasl-file) (begin (if (file-exists? g280c@fasl-file) (delete-file g280c@fasl-file) (void)) ((call/cc (lambda (g2810@g280e) (lambda () (with-exception-handler (lambda (g2812@c) ((call/cc (lambda (g2814@g280f) (g2810@g280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " g27fa@filename) (if (file-exists? g280c@fasl-file) (delete-file g280c@fasl-file) (void)) '#f) (g2814@g280f (lambda () (raise-continuable g2812@c)))))))))) (lambda () (begin (g2771@fasl-save g280c@fasl-file g27fb@obj) (display '"OK\n")))))))))) (g276f@scm->fasl g27fa@filename))))) (set! g2777@load-serialized-library (lambda (g2816@filename g2817@obj) ((lambda (g281a@fasl-file) (if (and (file-exists? g281a@fasl-file) ((symbol-value 'file-newer?) g281a@fasl-file g2816@filename)) ((lambda (g281c@expanded2core) ((lambda (g281e@eval-compiled-core) ((lambda (g2820@code) ((lambda (g2822@pivot) ((lambda (g2824@visit) ((lambda (g2826@visit-proc) ((lambda () (begin (set-car! g2822@pivot g2826@visit-proc) ((lambda (g2828@pivot) ((lambda (g282a@invoke) ((lambda () (begin (set-car! g2828@pivot (lambda () (g281e@eval-compiled-core g282a@invoke))) (apply g2817@obj g2820@code))))) (car g2828@pivot))) (cdr g2822@pivot)) '#t)))) (lambda () (g281e@eval-compiled-core g2824@visit)))) (car g2822@pivot))) (cddddr (cddddr g2820@code)))) (g2773@fasl-load g281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (g276f@scm->fasl g2816@filename)))) (set! g2779@make-record-printer (lambda (g282c@name g282d@printer) (lambda g2830@x (begin (display '"record printer") (for-each display g2830@x))))) (set! g277b@compile-core (lambda g2832@x (apply error 'comile-core '"not implementated" g2832@x))) (set! g277d@read-library-source-file (lambda (g2834@file-name) (with-input-from-file g2834@file-name g2765@read-annotated))) (set! g277f@make-parameter (lambda g2844 ((lambda (g2845) (if (= g2845 '1) (apply (lambda (g2836@x) (g277f@make-parameter g2836@x (lambda (g2838@x) g2838@x))) g2844) (if (= g2845 '2) (apply (lambda (g283a@x g283b@fender) ((lambda (g283e@x) (lambda g2842 ((lambda (g2843) (if (= g2843 '0) (apply (lambda () g283e@x) g2842) (if (= g2843 '1) (apply (lambda (g2840@v) (set! g283e@x (g283b@fender g2840@v))) g2842) (error 'apply '"invalid arg count")))) (length g2842)))) (g283b@fender g283a@x))) g2844) (error 'apply '"invalid arg count")))) (length g2844)))) (set! g27e7@file-options-spec (lambda (g2846@x) g2846@x)) (begin (set! g2856@g27e7@file-options-spec g27e7@file-options-spec) (set! g2855@g277f@make-parameter g277f@make-parameter) (set! g2854@g277d@read-library-source-file g277d@read-library-source-file) (set! g2853@g277b@compile-core g277b@compile-core) (set! g2852@g2779@make-record-printer g2779@make-record-printer) (set! g2851@g2777@load-serialized-library g2777@load-serialized-library) (set! g2850@g2775@serialize-library g2775@serialize-library) (set! g284f@g2773@fasl-load g2773@fasl-load) (set! g284e@g2771@fasl-save g2771@fasl-save) (set! g284d@g276f@scm->fasl g276f@scm->fasl) (set! g284c@g276d@annotation-expression g276d@annotation-expression) (set! g284b@g276b@annotation-source g276b@annotation-source) (set! g284a@g2769@annotation? g2769@annotation?) (set! g2849@g2767@annotation-stripped g2767@annotation-stripped) (set! g2848@g2765@read-annotated g2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g285b@current-primitive-locations g285d@mutable? g285f@rewriter g2861@expanded->core g2863@compile-core-expr g2865@pretty-print g2867@compile-core-expr-to-port) (begin (set! g285b@current-primitive-locations (g2855@g277f@make-parameter (lambda (g2868@x) '#f) (lambda (g286a@p) g286a@p))) (set! g285d@mutable? (lambda (g286c@x) (or (pair? g286c@x) (vector? g286c@x) (hashtable? g286c@x)))) (set! g285f@rewriter (lambda (g286e@quote-hack?) ((lambda (g2871@f) (begin (set! g2871@f (lambda (g2872@x) (if (pair? g2872@x) ((lambda (g2874@t) (if (memv g2874@t '(quote)) (if (and g286e@quote-hack? (g285d@mutable? (cadr g2872@x))) ((lambda (g2876@g) (begin (set-symbol-value! g2876@g (cadr g2872@x)) g2876@g)) (gensym)) g2872@x) (if (memv g2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (g2878@x) (cons (car g2878@x) (map g2871@f (cdr g2878@x)))) (cdr g2872@x))) (if (memv g2874@t '(lambda)) (cons* 'lambda (cadr g2872@x) (map g2871@f (cddr g2872@x))) (if (memv g2874@t '(letrec)) ((lambda (g287a@bindings g287b@body*) ((lambda (g287e@lhs* g287f@rhs*) (cons* 'letrec (map list g287e@lhs* (map g2871@f g287f@rhs*)) (map g2871@f g287b@body*))) (map car g287a@bindings) (map cadr g287a@bindings))) (cadr g2872@x) (cddr g2872@x)) (if (memv g2874@t '(letrec*)) ((lambda (g2882@bindings g2883@body*) ((lambda (g2886@lhs* g2887@rhs*) (cons* 'letrec* (map list g2886@lhs* (map g2871@f g2887@rhs*)) (map g2871@f g2883@body*))) (map car g2882@bindings) (map cadr g2882@bindings))) (cadr g2872@x) (cddr g2872@x)) (if (memv g2874@t '(library-letrec*)) ((lambda (g288a@name g288b@x) ((lambda (g288e@bindings g288f@body*) ((lambda (g2892@lhs* g2893@lhs** g2894@rhs*) (cons* 'library-letrec* g288a@name (map list g2892@lhs* g2893@lhs** (map g2871@f g2894@rhs*)) (map g2871@f g288f@body*))) (map car g288e@bindings) (map cadr g288e@bindings) (map caddr g288e@bindings))) (cadr g288b@x) (cddr g288b@x))) (cadr g2872@x) (cdr g2872@x)) (if (memv g2874@t '(begin)) (cons 'begin (map g2871@f (cdr g2872@x))) (if (memv g2874@t '(set!)) (list 'set! (cadr g2872@x) (g2871@f (caddr g2872@x))) (if (memv g2874@t '(primitive)) ((lambda (g2898@op) ((lambda (g289a@t) (if g289a@t ((lambda (g289c@loc) g289c@loc) g289a@t) g2898@op)) ((g285b@current-primitive-locations) g2898@op))) (cadr g2872@x)) (if (memv g2874@t '(define)) g2872@x (if (list? g2872@x) (map g2871@f g2872@x) (error 'rewrite '"invalid form ~s ~s" g2872@x (list? g2872@x)))))))))))))) (car g2872@x)) g2872@x))) g2871@f)) '#f))) (set! g2861@expanded->core (lambda (g289e@x) ((g285f@rewriter '#f) g289e@x))) (set! g2863@compile-core-expr (lambda (g28a0@x) ((g285f@rewriter '#f) g28a0@x))) (set! g2865@pretty-print write) (set! g2867@compile-core-expr-to-port (lambda (g28a2@x g28a3@p) (g2865@pretty-print ((g285f@rewriter '#f) g28a2@x) g28a3@p))) (begin (set! g28ac@g2867@compile-core-expr-to-port g2867@compile-core-expr-to-port) (set! g28ab@g2865@pretty-print g2865@pretty-print) (set! g28aa@g2863@compile-core-expr g2863@compile-core-expr) (set! g28a9@g2861@expanded->core g2861@expanded->core) (set! g28a8@g285f@rewriter g285f@rewriter) (set! g28a7@g285d@mutable? g285d@mutable?) (set! g28a6@g285b@current-primitive-locations g285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (g28fb@make-collection g28fd@current-library-collection g2903@g28fe g2905@g2900 g2907@g28ff g290a@library? g290c@make-library g290e@library-id g2910@library-name g2912@library-version g2914@library-imp* g2916@library-vis* g2918@library-inv* g291a@library-subst g291c@library-env g291e@library-visit-state g2920@library-invoke-state g2922@library-visit-code g2924@library-invoke-code g2926@library-visible? g2928@library-source-file-name g292a@set-library-id! g292c@set-library-name! g292e@set-library-version! g2930@set-library-imp*! g2932@set-library-vis*! g2934@set-library-inv*! g2936@set-library-subst! g2938@set-library-env! g293a@set-library-visit-state! g293c@set-library-invoke-state! g293e@set-library-visit-code! g2940@set-library-invoke-code! g2942@set-library-visible?! g2944@set-library-source-file-name! g2946@rp g2948@find-dependencies g294a@find-library-by g294c@library-path g294e@library-extensions g2950@library-name->file-name g2952@file-locator g2954@serialize-all g2956@current-precompiled-library-loader g2958@try-load-from-file g295a@library-loader g295c@current-library-expander g295e@external-pending-libraries g2960@find-external-library g2962@find-library-by-name g2964@library-exists? g2966@find-library-by-spec/die g2968@label->binding-table g296a@install-library-record g296c@install-library g296e@imported-label->binding g2970@invoke-library g2972@visit-library g2974@invoke-library-by-spec g2976@installed-libraries g2978@library-spec) (begin (set! g28fb@make-collection (lambda () ((lambda (g2979@set) ((lambda (g297c@set-cons) (begin (set! g297c@set-cons (lambda (g2981@x g2982@ls) (if (memq g2981@x g2982@ls) g2982@ls (cons g2981@x g2982@ls)))) (lambda g297f ((lambda (g2980) (if (= g2980 '0) (apply (lambda () g2979@set) g297f) (if (= g2980 '1) (apply (lambda (g297d@x) (set! g2979@set (g297c@set-cons g297d@x g2979@set))) g297f) (error 'apply '"invalid arg count")))) (length g297f))))) '#f)) '()))) (set! g28fd@current-library-collection (g2855@g277f@make-parameter (g28fb@make-collection) (lambda (g2985@x) (begin (if (not (procedure? g2985@x)) (assertion-violation 'current-library-collection '"not a procedure" g2985@x) (void)) g2985@x)))) (set! g2903@g28fe (make-record-type-descriptor 'library '#f 'g2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! g2905@g2900 '#f) (set! g2907@g28ff (make-record-constructor-descriptor g2903@g28fe '#f g2905@g2900)) (set! g290a@library? (record-predicate g2903@g28fe)) (set! g290c@make-library (record-constructor g2907@g28ff)) (set! g290e@library-id (record-accessor g2903@g28fe '0)) (set! g2910@library-name (record-accessor g2903@g28fe '1)) (set! g2912@library-version (record-accessor g2903@g28fe '2)) (set! g2914@library-imp* (record-accessor g2903@g28fe '3)) (set! g2916@library-vis* (record-accessor g2903@g28fe '4)) (set! g2918@library-inv* (record-accessor g2903@g28fe '5)) (set! g291a@library-subst (record-accessor g2903@g28fe '6)) (set! g291c@library-env (record-accessor g2903@g28fe '7)) (set! g291e@library-visit-state (record-accessor g2903@g28fe '8)) (set! g2920@library-invoke-state (record-accessor g2903@g28fe '9)) (set! g2922@library-visit-code (record-accessor g2903@g28fe '10)) (set! g2924@library-invoke-code (record-accessor g2903@g28fe '11)) (set! g2926@library-visible? (record-accessor g2903@g28fe '12)) (set! g2928@library-source-file-name (record-accessor g2903@g28fe '13)) (set! g292a@set-library-id! (record-mutator g2903@g28fe '0)) (set! g292c@set-library-name! (record-mutator g2903@g28fe '1)) (set! g292e@set-library-version! (record-mutator g2903@g28fe '2)) (set! g2930@set-library-imp*! (record-mutator g2903@g28fe '3)) (set! g2932@set-library-vis*! (record-mutator g2903@g28fe '4)) (set! g2934@set-library-inv*! (record-mutator g2903@g28fe '5)) (set! g2936@set-library-subst! (record-mutator g2903@g28fe '6)) (set! g2938@set-library-env! (record-mutator g2903@g28fe '7)) (set! g293a@set-library-visit-state! (record-mutator g2903@g28fe '8)) (set! g293c@set-library-invoke-state! (record-mutator g2903@g28fe '9)) (set! g293e@set-library-visit-code! (record-mutator g2903@g28fe '10)) (set! g2940@set-library-invoke-code! (record-mutator g2903@g28fe '11)) (set! g2942@set-library-visible?! (record-mutator g2903@g28fe '12)) (set! g2944@set-library-source-file-name! (record-mutator g2903@g28fe '13)) (set! g2946@rp (g2852@g2779@make-record-printer 'library (lambda (g2987@x g2988@p g2989@wr) (begin (if (not (g290a@library? g2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (g2912@library-version g2987@x)) (g2910@library-name g2987@x) (append (g2910@library-name g2987@x) (list (g2912@library-version g2987@x))))) g2988@p))))) (set! g2948@find-dependencies (lambda (g298d@ls) (if (null? g298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! g294a@find-library-by (lambda (g298f@pred) ((letrec ((g2991@f (lambda (g2993@ls) (if (null? g2993@ls) '#f (if (g298f@pred (car g2993@ls)) (car g2993@ls) (g2991@f (cdr g2993@ls))))))) g2991@f) ((g28fd@current-library-collection))))) (set! g294c@library-path (g2855@g277f@make-parameter '(".") (lambda (g2995@x) (if (and (list? g2995@x) (for-all string? g2995@x)) (map (lambda (g2997@x) g2997@x) g2995@x) (assertion-violation 'library-path '"not a list of strings" g2995@x))))) (set! g294e@library-extensions (g2855@g277f@make-parameter '(".sls" ".ss" ".scm") (lambda (g2999@x) (if (and (list? g2999@x) (for-all string? g2999@x)) (map (lambda (g299b@x) g299b@x) g2999@x) (assertion-violation 'library-extensions '"not a list of strings" g2999@x))))) (set! g2950@library-name->file-name (lambda (g299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (g29a3@g29a0 g29a4@g29a2) ((lambda (g29a7@extract g29a8@p) ((lambda (g29ac@display-hex) (begin (set! g29ac@display-hex (lambda (g29b5@n) (if (<= '0 g29b5@n '9) (display g29b5@n g29a8@p) (display (integer->char (+ (char->integer '#\a) (- g29b5@n '10))) g29a8@p)))) (begin ((letrec ((g29ad@f (lambda (g29af@ls) (if (not (null? g29af@ls)) (begin (display '"/" g29a8@p) (for-each (lambda (g29b1@c) (if (or (char<=? '#\a g29b1@c '#\z) (char<=? '#\A g29b1@c '#\Z) (char<=? '#\0 g29b1@c '#\9) (memv g29b1@c '(#\- #\. #\_ #\~))) (display g29b1@c g29a8@p) (begin (display '"%" g29a8@p) ((lambda (g29b3@n) (begin (g29ac@display-hex (quotient g29b3@n '16)) (g29ac@display-hex (remainder g29b3@n '16)))) (char->integer g29b1@c))))) (string->list (symbol->string (car g29af@ls)))) (g29ad@f (cdr g29af@ls))) (void))))) g29ad@f) g299d@x) (g29a7@extract)))) '#f)) g29a4@g29a2 g29a3@g29a0))))) (set! g2952@file-locator (g2855@g277f@make-parameter (lambda (g29b7@x) ((lambda (g29b9@str) ((letrec ((g29bb@f (lambda (g29bd@ls g29be@exts g29bf@failed-list) (if (null? g29bd@ls) ((lambda () ((lambda (g29cb@g29c6 g29cd@g29c8 g29cf@g29c7 g29d2@g29c5 g29d4@make-library-resolution-condition g29d6@g29c3 g29d8@g29c4 g29da@library-resolution-condition? g29dc@condition-library g29de@condition-files) (begin (set! g29cb@g29c6 (make-record-type-descriptor '&library-resolution g4c6c@g49b3@&condition-rtd 'g29c9 '#f '#f '#((immutable library) (immutable files)))) (set! g29cd@g29c8 '#f) (set! g29cf@g29c7 (make-record-constructor-descriptor g29cb@g29c6 g4c6d@g49b5@&condition-rcd g29cd@g29c8)) (set! g29d2@g29c5 (record-predicate g29cb@g29c6)) (set! g29d4@make-library-resolution-condition (record-constructor g29cf@g29c7)) (set! g29d6@g29c3 (record-accessor g29cb@g29c6 '0)) (set! g29d8@g29c4 (record-accessor g29cb@g29c6 '1)) (set! g29da@library-resolution-condition? (condition-predicate g29cb@g29c6)) (set! g29dc@condition-library (condition-accessor g29cb@g29c6 g29d6@g29c3)) (set! g29de@condition-files (condition-accessor g29cb@g29c6 g29d8@g29c4)) (raise (condition (g4c8c@g4a4d@make-error) (g4cae@g4aa9@make-who-condition 'expander) (g4c72@g4a0a@make-message-condition '"cannot locate library in library-path") (g29d4@make-library-resolution-condition g29b7@x (reverse g29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? g29be@exts) (g29bb@f (cdr g29bd@ls) (g294e@library-extensions) g29bf@failed-list) ((lambda (g29df@name) (if (file-exists? g29df@name) g29df@name (g29bb@f g29bd@ls (cdr g29be@exts) (cons g29df@name g29bf@failed-list)))) (string-append (car g29bd@ls) g29b9@str (car g29be@exts)))))))) g29bb@f) (g294c@library-path) (g294e@library-extensions) '())) (g2950@library-name->file-name g29b7@x))) (lambda (g29e1@f) (if (procedure? g29e1@f) g29e1@f (assertion-violation 'file-locator '"not a procedure" g29e1@f))))) (set! g2954@serialize-all (lambda (g29e3@serialize g29e4@compile) ((lambda (g29e8@library-desc) (begin (set! g29e8@library-desc (lambda (g29eb@x) (list (g290e@library-id g29eb@x) (g2910@library-name g29eb@x)))) (for-each (lambda (g29e9@x) (if (g2928@library-source-file-name g29e9@x) (g29e3@serialize (g2928@library-source-file-name g29e9@x) (list (g290e@library-id g29e9@x) (g2910@library-name g29e9@x) (g2912@library-version g29e9@x) (map g29e8@library-desc (g2914@library-imp* g29e9@x)) (map g29e8@library-desc (g2916@library-vis* g29e9@x)) (map g29e8@library-desc (g2918@library-inv* g29e9@x)) (g291a@library-subst g29e9@x) (g291c@library-env g29e9@x) (g29e4@compile (g2922@library-visit-code g29e9@x)) (g29e4@compile (g2924@library-invoke-code g29e9@x)) (g2926@library-visible? g29e9@x))) (void))) ((g28fd@current-library-collection))))) '#f))) (set! g2956@current-precompiled-library-loader (g2855@g277f@make-parameter (lambda (g29ed@filename g29ee@sk) '#f))) (set! g2958@try-load-from-file (lambda (g29f1@filename) ((g2956@current-precompiled-library-loader) g29f1@filename (lambda g2a17 ((lambda (g2a18) (if (= g2a18 '11) (apply (lambda (g29f3@id g29f4@name g29f5@ver g29f6@imp* g29f7@vis* g29f8@inv* g29f9@exp-subst g29fa@exp-env g29fb@visit-proc g29fc@invoke-proc g29fd@visible?) ((letrec ((g2a09@f (lambda (g2a0b@deps) (if (null? g2a0b@deps) (begin (g296c@install-library g29f3@id g29f4@name g29f5@ver g29f6@imp* g29f7@vis* g29f8@inv* g29f9@exp-subst g29fa@exp-env g29fb@visit-proc g29fc@invoke-proc '#f '#f g29fd@visible? '#f) '#t) ((lambda (g2a0d@d) ((lambda (g2a0f@label g2a10@dname) ((lambda (g2a13@l) (if (and (g290a@library? g2a13@l) (eq? g2a0f@label (g290e@library-id g2a13@l))) (g2a09@f (cdr g2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" g29f4@name g2a10@dname g29f1@filename g2a13@l g2a0f@label (g290e@library-id g2a13@l)) '#f))) (g2962@find-library-by-name g2a10@dname))) (car g2a0d@d) (cadr g2a0d@d))) (car g2a0b@deps)))))) g2a09@f) (append g29f6@imp* g29f7@vis* g29f8@inv*))) g2a17) (if (>= g2a18 '0) (apply (lambda g2a15@others '#f) g2a17) (error 'apply '"invalid arg count")))) (length g2a17)))))) (set! g295a@library-loader (g2855@g277f@make-parameter (lambda (g2a19@x) ((lambda (g2a1b@file-name) (if (not g2a1b@file-name) (assertion-violation '#f '"cannot file library" g2a19@x) (or (g2958@try-load-from-file g2a1b@file-name) ((g295c@current-library-expander) (g2854@g277d@read-library-source-file g2a1b@file-name) g2a1b@file-name (lambda (g2a1d@name) (if (not (fast-equal? g2a1d@name g2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (g2a23@g2a20 g2a24@g2a22) ((lambda (g2a27@e g2a28@p) (begin (display '"expected to find library " g2a28@p) (write g2a19@x g2a28@p) (display '" in file " g2a28@p) (display g2a1b@file-name g2a28@p) (display '", found " g2a28@p) (write g2a1d@name g2a28@p) (display '" instead" g2a28@p) (g2a27@e))) g2a24@g2a22 g2a23@g2a20)))) (void))))))) ((g2952@file-locator) g2a19@x))) (lambda (g2a2b@f) (if (procedure? g2a2b@f) g2a2b@f (assertion-violation 'library-locator '"not a procedure" g2a2b@f))))) (set! g295c@current-library-expander (g2855@g277f@make-parameter (lambda (g2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (g2a2f@f) (if (procedure? g2a2f@f) g2a2f@f (assertion-violation 'library-expander '"not a procedure" g2a2f@f))))) (set! g295e@external-pending-libraries (g2855@g277f@make-parameter '())) (set! g2960@find-external-library (lambda (g2a31@name) (begin (if (member g2a31@name (g295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" g2a31@name) (void)) ((lambda (g2a37@g2a34 g2a38@g2a36) ((lambda (g2a3b@swap) (dynamic-wind g2a3b@swap (lambda () (begin ((g295a@library-loader) g2a31@name) (or (g294a@find-library-by (lambda (g2a3d@x) (fast-equal? (g2910@library-name g2a3d@x) g2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" g2a31@name)))) g2a3b@swap)) (lambda () ((lambda (g2a3f@t) (begin (g2a37@g2a34 g2a38@g2a36) (set! g2a38@g2a36 g2a3f@t))) (g2a37@g2a34))))) g295e@external-pending-libraries (cons g2a31@name (g295e@external-pending-libraries)))))) (set! g2962@find-library-by-name (lambda (g2a41@name) (or (g294a@find-library-by (lambda (g2a43@x) (fast-equal? (g2910@library-name g2a43@x) g2a41@name))) (g2960@find-external-library g2a41@name)))) (set! g2964@library-exists? (lambda (g2a45@name) (and (g294a@find-library-by (lambda (g2a47@x) (fast-equal? (g2910@library-name g2a47@x) g2a45@name))) '#t))) (set! g2966@find-library-by-spec/die (lambda (g2a49@spec) ((lambda (g2a4b@id) (or (g294a@find-library-by (lambda (g2a4d@x) (eq? g2a4b@id (g290e@library-id g2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" g2a49@spec))) (car g2a49@spec)))) (set! g2968@label->binding-table (make-eq-hashtable)) (set! g296a@install-library-record (lambda (g2a4f@lib) (begin ((lambda (g2a51@exp-env) (for-each (lambda (g2a53@x) ((lambda (g2a55@label g2a56@binding) ((lambda (g2a59@binding) (begin (if (hashtable-ref g2968@label->binding-table g2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" g2a55@label (hashtable-ref g2968@label->binding-table g2a55@label '#f) g2a59@binding) (exit)) (void)) (hashtable-set! g2968@label->binding-table g2a55@label g2a59@binding))) ((lambda (g2a5b@t) (if (memv g2a5b@t '(global)) (cons 'global (cons g2a4f@lib (cdr g2a56@binding))) (if (memv g2a5b@t '(global-macro)) (cons 'global-macro (cons g2a4f@lib (cdr g2a56@binding))) (if (memv g2a5b@t '(global-macro!)) (cons 'global-macro! (cons g2a4f@lib (cdr g2a56@binding))) g2a56@binding)))) (car g2a56@binding)))) (car g2a53@x) (cdr g2a53@x))) g2a51@exp-env)) (g291c@library-env g2a4f@lib)) ((g28fd@current-library-collection) g2a4f@lib)))) (set! g296c@install-library (lambda (g2a5d@id g2a5e@name g2a5f@ver g2a60@imp* g2a61@vis* g2a62@inv* g2a63@exp-subst g2a64@exp-env g2a65@visit-proc g2a66@invoke-proc g2a67@visit-code g2a68@invoke-code g2a69@visible? g2a6a@source-file-name) ((lambda (g2a79@imp-lib* g2a7a@vis-lib* g2a7b@inv-lib*) (begin (if (not (and (symbol? g2a5d@id) (list? g2a5e@name) (list? g2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" g2a5d@id g2a5e@name g2a5f@ver) (void)) (if (g2964@library-exists? g2a5e@name) (assertion-violation 'install-library '"library is already installed" g2a5e@name) (void)) ((lambda (g2a7f@lib) (g296a@install-library-record g2a7f@lib)) (g290c@make-library g2a5d@id g2a5e@name g2a5f@ver g2a79@imp-lib* g2a7a@vis-lib* g2a7b@inv-lib* g2a63@exp-subst g2a64@exp-env g2a65@visit-proc g2a66@invoke-proc g2a67@visit-code g2a68@invoke-code g2a69@visible? g2a6a@source-file-name)))) (map g2966@find-library-by-spec/die g2a60@imp*) (map g2966@find-library-by-spec/die g2a61@vis*) (map g2966@find-library-by-spec/die g2a62@inv*)))) (set! g296e@imported-label->binding (lambda (g2a81@lab) (hashtable-ref g2968@label->binding-table g2a81@lab '#f))) (set! g2970@invoke-library (lambda (g2a83@lib) ((lambda (g2a85@invoke) (if (procedure? g2a85@invoke) (begin (g293c@set-library-invoke-state! g2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" g2a83@lib))) (for-each g2970@invoke-library (g2918@library-inv* g2a83@lib)) (g293c@set-library-invoke-state! g2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" g2a83@lib))) (g2a85@invoke) (g293c@set-library-invoke-state! g2a83@lib '#t)) (void))) (g2920@library-invoke-state g2a83@lib)))) (set! g2972@visit-library (lambda (g2a87@lib) ((lambda (g2a89@visit) (if (procedure? g2a89@visit) (begin (g293a@set-library-visit-state! g2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" g2a87@lib))) (for-each g2970@invoke-library (g2916@library-vis* g2a87@lib)) (g293a@set-library-visit-state! g2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" g2a87@lib))) (g2a89@visit) (g293a@set-library-visit-state! g2a87@lib '#t)) (void))) (g291e@library-visit-state g2a87@lib)))) (set! g2974@invoke-library-by-spec (lambda (g2a8b@spec) (g2970@invoke-library (g2966@find-library-by-spec/die g2a8b@spec)))) (set! g2976@installed-libraries (lambda g2a93 ((lambda (g2a94) (if (= g2a94 '1) (apply (lambda (g2a8d@all?) ((letrec ((g2a8f@f (lambda (g2a91@ls) (if (null? g2a91@ls) '() (if (or g2a8d@all? (g2926@library-visible? (car g2a91@ls))) (cons (car g2a91@ls) (g2a8f@f (cdr g2a91@ls))) (g2a8f@f (cdr g2a91@ls))))))) g2a8f@f) ((g28fd@current-library-collection)))) g2a93) (if (= g2a94 '0) (apply (lambda () (g2976@installed-libraries '#f)) g2a93) (error 'apply '"invalid arg count")))) (length g2a93)))) (set! g2978@library-spec (lambda (g2a95@x) (begin (if (not (g290a@library? g2a95@x)) (assertion-violation 'library-spec '"not a library" g2a95@x) (void)) (list (g290e@library-id g2a95@x) (g2910@library-name g2a95@x) (g2912@library-version g2a95@x))))) (begin (set! g2ad3@g2978@library-spec g2978@library-spec) (set! g2ad2@g2976@installed-libraries g2976@installed-libraries) (set! g2ad1@g2974@invoke-library-by-spec g2974@invoke-library-by-spec) (set! g2ad0@g2972@visit-library g2972@visit-library) (set! g2acf@g2970@invoke-library g2970@invoke-library) (set! g2ace@g296e@imported-label->binding g296e@imported-label->binding) (set! g2acd@g296c@install-library g296c@install-library) (set! g2acc@g296a@install-library-record g296a@install-library-record) (set! g2acb@g2968@label->binding-table g2968@label->binding-table) (set! g2aca@g2966@find-library-by-spec/die g2966@find-library-by-spec/die) (set! g2ac9@g2964@library-exists? g2964@library-exists?) (set! g2ac8@g2962@find-library-by-name g2962@find-library-by-name) (set! g2ac7@g2960@find-external-library g2960@find-external-library) (set! g2ac6@g295e@external-pending-libraries g295e@external-pending-libraries) (set! g2ac5@g295c@current-library-expander g295c@current-library-expander) (set! g2ac4@g295a@library-loader g295a@library-loader) (set! g2ac3@g2958@try-load-from-file g2958@try-load-from-file) (set! g2ac2@g2956@current-precompiled-library-loader g2956@current-precompiled-library-loader) (set! g2ac1@g2954@serialize-all g2954@serialize-all) (set! g2ac0@g2952@file-locator g2952@file-locator) (set! g2abf@g2950@library-name->file-name g2950@library-name->file-name) (set! g2abe@g294e@library-extensions g294e@library-extensions) (set! g2abd@g294c@library-path g294c@library-path) (set! g2abc@g294a@find-library-by g294a@find-library-by) (set! g2abb@g2948@find-dependencies g2948@find-dependencies) (set! g2aba@g2946@rp g2946@rp) (set! g2ab9@g2944@set-library-source-file-name! g2944@set-library-source-file-name!) (set! g2ab8@g2942@set-library-visible?! g2942@set-library-visible?!) (set! g2ab7@g2940@set-library-invoke-code! g2940@set-library-invoke-code!) (set! g2ab6@g293e@set-library-visit-code! g293e@set-library-visit-code!) (set! g2ab5@g293c@set-library-invoke-state! g293c@set-library-invoke-state!) (set! g2ab4@g293a@set-library-visit-state! g293a@set-library-visit-state!) (set! g2ab3@g2938@set-library-env! g2938@set-library-env!) (set! g2ab2@g2936@set-library-subst! g2936@set-library-subst!) (set! g2ab1@g2934@set-library-inv*! g2934@set-library-inv*!) (set! g2ab0@g2932@set-library-vis*! g2932@set-library-vis*!) (set! g2aaf@g2930@set-library-imp*! g2930@set-library-imp*!) (set! g2aae@g292e@set-library-version! g292e@set-library-version!) (set! g2aad@g292c@set-library-name! g292c@set-library-name!) (set! g2aac@g292a@set-library-id! g292a@set-library-id!) (set! g2aab@g2928@library-source-file-name g2928@library-source-file-name) (set! g2aaa@g2926@library-visible? g2926@library-visible?) (set! g2aa9@g2924@library-invoke-code g2924@library-invoke-code) (set! g2aa8@g2922@library-visit-code g2922@library-visit-code) (set! g2aa7@g2920@library-invoke-state g2920@library-invoke-state) (set! g2aa6@g291e@library-visit-state g291e@library-visit-state) (set! g2aa5@g291c@library-env g291c@library-env) (set! g2aa4@g291a@library-subst g291a@library-subst) (set! g2aa3@g2918@library-inv* g2918@library-inv*) (set! g2aa2@g2916@library-vis* g2916@library-vis*) (set! g2aa1@g2914@library-imp* g2914@library-imp*) (set! g2aa0@g2912@library-version g2912@library-version) (set! g2a9f@g2910@library-name g2910@library-name) (set! g2a9e@g290e@library-id g290e@library-id) (set! g2a9d@g290c@make-library g290c@make-library) (set! g2a9c@g290a@library? g290a@library?) (set! g2a9b@g2907@g28ff g2907@g28ff) (set! g2a9a@g2905@g2900 g2905@g2900) (set! g2a99@g2903@g28fe g2903@g28fe) (set! g2a98@g28fd@current-library-collection g28fd@current-library-collection) (set! g2a97@g28fb@make-collection g28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g2ad6@build-global-define g2b47@build-lambda g2b49@build-case-lambda g2b4b@build-let g2b79@build-sequence g2b7b@build-void g2b7d@build-letrec g2b7f@build-letrec* g2b81@build-library-letrec* g2b83@build-receive) (begin (set! g2ad6@build-global-define (lambda (g2b84@x) (g2b7b@build-void))) (set! g2b47@build-lambda (lambda (g2b86@ae g2b87@vars g2b88@exp) (list 'lambda g2b87@vars g2b88@exp))) (set! g2b49@build-case-lambda (lambda (g2b8c@ae g2b8d@vars* g2b8e@exp*) ((lambda (g2b93@build-error g2b95@build-pred g2b97@build-apply g2b99@expand-case-lambda) (begin (set! g2b93@build-error (lambda (g2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g2b95@build-pred (lambda (g2bb2@ae g2bb3@n g2bb4@vars) (call-with-values (lambda () ((letrec ((g2bbc@f (lambda (g2bbe@vars g2bbf@count) (if (pair? g2bbe@vars) (g2bbc@f (cdr g2bbe@vars) (+ g2bbf@count '1)) (if (null? g2bbe@vars) (values g2bbf@count '=) (values g2bbf@count '>=)))))) g2bbc@f) g2bb4@vars '0)) (lambda (g2bc2@g2bb9 g2bc3@g2bbb) ((lambda (g2bc6@pred g2bc7@count) (list (list 'primitive g2bc6@pred) g2bb3@n (list 'quote g2bc7@count))) g2bc3@g2bbb g2bc2@g2bb9))))) (set! g2b97@build-apply (lambda (g2baa@ae g2bab@g g2bac@vars g2bad@exp) (list '(primitive apply) (g2b47@build-lambda g2baa@ae g2bac@vars g2bad@exp) g2bab@g))) (set! g2b99@expand-case-lambda (lambda (g2b9a@ae g2b9b@vars g2b9c@exp*) ((lambda (g2ba0@g g2ba1@n) (list 'lambda g2ba0@g (g2b4b@build-let g2b9a@ae (list g2ba1@n) (list (list '(primitive length) g2ba0@g)) ((letrec ((g2ba4@f (lambda (g2ba6@vars* g2ba7@exp*) (if (null? g2ba6@vars*) (g2b93@build-error g2b9a@ae) (list 'if (g2b95@build-pred g2b9a@ae g2ba1@n (car g2ba6@vars*)) (g2b97@build-apply g2b9a@ae g2ba0@g (car g2ba6@vars*) (car g2ba7@exp*)) (g2ba4@f (cdr g2ba6@vars*) (cdr g2ba7@exp*))))))) g2ba4@f) g2b8d@vars* g2b9c@exp*)))) (gensym) (gensym)))) (if (= (length g2b8e@exp*) '1) (g2b47@build-lambda g2b8c@ae (car g2b8d@vars*) (car g2b8e@exp*)) (g2b99@expand-case-lambda g2b8c@ae g2b8d@vars* g2b8e@exp*)))) '#f '#f '#f '#f))) (set! g2b4b@build-let (lambda (g2bcc@ae g2bcd@lhs* g2bce@rhs* g2bcf@body) (cons (g2b47@build-lambda g2bcc@ae g2bcd@lhs* g2bcf@body) g2bce@rhs*))) (set! g2b79@build-sequence (lambda (g2bd4@ae g2bd5@exps) ((letrec ((g2bd8@loop (lambda (g2bda@exps) (if (null? (cdr g2bda@exps)) (car g2bda@exps) (if (equal? (car g2bda@exps) (g2b7b@build-void)) (g2bd8@loop (cdr g2bda@exps)) (cons 'begin g2bda@exps)))))) g2bd8@loop) g2bd5@exps))) (set! g2b7b@build-void (lambda () '((primitive void)))) (set! g2b7d@build-letrec (lambda (g2bdc@ae g2bdd@vars g2bde@val-exps g2bdf@body-exp) (if (null? g2bdd@vars) g2bdf@body-exp (list 'letrec (map list g2bdd@vars g2bde@val-exps) g2bdf@body-exp)))) (set! g2b7f@build-letrec* (lambda (g2be4@ae g2be5@vars g2be6@val-exps g2be7@body-exp) (if (null? g2be5@vars) g2be7@body-exp (g2b4b@build-let g2be4@ae g2be5@vars (map (lambda (g2bec@x) (list 'quote '#f)) g2be5@vars) (g2b79@build-sequence g2be4@ae (append (map (lambda (g2bee@lhs g2bef@rhs) (list 'set! g2bee@lhs g2bef@rhs)) g2be5@vars g2be6@val-exps) (list g2be7@body-exp))))))) (set! g2b81@build-library-letrec* (lambda (g2bf2@ae g2bf3@name g2bf4@vars g2bf5@locs g2bf6@val-exps g2bf7@body-exp) (list 'library-letrec* g2bf3@name (map list g2bf4@vars g2bf5@locs g2bf6@val-exps) g2bf7@body-exp))) (set! g2b83@build-receive (lambda (g2bfe@ae g2bff@vars g2c00@producer g2c01@body*) (begin (display '"************** in ") (cons 'receive (cons g2bff@vars (cons g2c00@producer g2c01@body*)))))) (begin (set! g2c0f@g2b83@build-receive g2b83@build-receive) (set! g2c0e@g2b81@build-library-letrec* g2b81@build-library-letrec*) (set! g2c0d@g2b7f@build-letrec* g2b7f@build-letrec*) (set! g2c0c@g2b7d@build-letrec g2b7d@build-letrec) (set! g2c0b@g2b7b@build-void g2b7b@build-void) (set! g2c0a@g2b79@build-sequence g2b79@build-sequence) (set! g2c09@g2b4b@build-let g2b4b@build-let) (set! g2c08@g2b49@build-case-lambda g2b49@build-case-lambda) (set! g2c07@g2b47@build-lambda g2b47@build-lambda) (set! g2c06@g2ad6@build-global-define g2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g2c1e@file-options-macro g2c20@set-cons g2c22@set-union g2c27@top-mark* g2c29@top-marked? g2c2b@gen-lexical g2c2d@gen-global g2c2f@gen-label g2c31@gen-top-level-label g2c33@gen-define-label+loc g2c35@gen-define-label g2c3b@g2c36 g2c3d@g2c38 g2c3f@g2c37 g2c42@rib? g2c44@make-rib g2c46@rib-sym* g2c48@rib-mark** g2c4a@rib-label* g2c4c@rib-sealed/freq g2c4e@rib-cache g2c50@set-rib-sym*! g2c52@set-rib-mark**! g2c54@set-rib-label*! g2c56@set-rib-sealed/freq! g2c58@set-rib-cache! g2c5a@make-empty-rib g2c5c@extend-rib! g2c5e@extend-rib/nc! g2c60@make-rib-map g2c62@seal-rib! g2c64@unseal-rib! g2c66@make-full-rib g2c6c@g2c67 g2c6e@g2c69 g2c70@g2c68 g2c73@stx? g2c75@make-stx g2c77@stx-expr g2c79@stx-mark* g2c7b@stx-subst* g2c7d@stx-ae* g2c7f@set-stx-expr! g2c81@set-stx-mark*! g2c83@set-stx-subst*! g2c85@set-stx-ae*! g2c87@rp g2c89@datum->stx g2c8b@gen-mark g2c8d@anti-mark g2c8f@anti-mark? g2c91@join-wraps g2c93@mkstx g2c95@add-mark g2c97@add-subst g2c99@syntax-kind? g2c9b@syntax-vector->list g2c9d@syntax-pair? g2c9f@syntax-vector? g2ca1@syntax-null? g2ca3@syntax-list? g2ca5@syntax-car g2ca7@syntax-cdr g2ca9@syntax->list g2cab@id? g2cad@id->sym g2caf@same-marks? g2cb1@bound-id=? g2cb3@free-id=? g2cb5@valid-bound-ids? g2cb7@distinct-bound-ids? g2cb9@bound-id-member? g2cbb@self-evaluating? g2cbd@strip-annotations g2cbf@strip g2cc1@stx->datum g2cc3@same-marks*? g2cc5@id->label g2cc7@id->real-label g2cc9@label->binding g2ccb@make-binding g2ccd@binding-type g2ccf@binding-value g2cd1@raise-unbound-error g2cd3@syntax-type g2ce1@sanitize-binding g2ce3@make-variable-transformer g2ce5@variable-transformer? g2ce7@variable-transformer-procedure g2ce9@make-eval-transformer g2e3a@parse-define g2e3c@parse-define-syntax g2e3e@scheme-stx-hashtable g2e40@scheme-stx g2e42@lexical-var g2e44@lexical-mutable? g2e46@set-lexical-mutable! g2e48@add-lexical g2e4a@add-lexicals g2e4c@letrec-helper g2e4e@letrec-transformer g2e50@letrec*-transformer g2e52@fluid-let-syntax-transformer g2e54@type-descriptor-transformer g2e56@record-type-descriptor-transformer g2e58@record-constructor-descriptor-transformer g2e5a@when-macro g2e5c@unless-macro g2e5e@if-transformer g2e60@and-transformer g2e62@or-transformer g2e64@case-macro g2e66@quote-transformer g2e68@case-lambda-transformer g2e6a@lambda-transformer g2e6c@bless g2e6e@with-syntax-macro g2e70@invalid-fmls-error g2e72@let-macro g2e74@let-values-macro g2e76@let*-values-macro g2e78@trace-lambda-macro g2e7a@trace-define-macro g2e7c@trace-define-syntax-macro g2e7e@trace-let/rec-syntax g2e80@trace-let-syntax-macro g2e82@trace-letrec-syntax-macro g2e84@guard-macro g2e86@define-enumeration-macro g2e88@time-macro g2e8a@delay-macro g2e8c@assert-macro g2e8e@endianness-macro g2e90@identifier-syntax-macro g2e92@do-macro g2e94@let*-macro g2e96@or-macro g2e98@and-macro g2e9a@cond-macro g2e9c@do-include g2e9e@include-macro g2ea0@include-into-macro g2ea2@syntax-rules-macro g2ea4@quasiquote-macro g2ea6@quasisyntax-macro g2ea8@define-struct-macro g2eaa@define-record-type-macro g2eac@define-condition-type-macro g2eae@incorrect-usage-macro g2eb0@parameterize-macro g2eb2@foreign-call-transformer g2eb4@convert-pattern g2eb6@syntax-dispatch g2eb8@ellipsis? g2eba@underscore? g2ebc@verify-literals g2ebe@syntax-case-transformer g2ec0@ellipsis-map g2ec2@syntax-transformer g2ec4@core-macro-transformer g2ec6@symbol-macro g2ec8@macro-transformer g2eca@local-macro-transformer g2ecc@do-macro-call g2ece@chi-macro g2ed0@chi-local-macro g2ed2@chi-global-macro g2ed4@chi-expr* g2ed6@chi-application g2ed8@chi-expr g2eda@chi-set! g2edc@verify-formals g2ede@chi-lambda-clause g2ee0@chi-lambda-clause* g2ee2@chi-defun g2ee4@chi-rhs g2ee6@expand-interaction-rhs*/init* g2ee8@chi-rhs* g2eea@find-bound=? g2eec@find-dups g2eee@chi-internal g2ef0@parse-module g2ef6@g2ef1 g2ef8@g2ef3 g2efa@g2ef2 g2efd@module-interface? g2eff@make-module-interface g2f01@module-interface-first-mark g2f03@module-interface-exp-id-vec g2f05@module-interface-exp-lab-vec g2f07@set-module-interface-first-mark! g2f09@set-module-interface-exp-id-vec! g2f0b@set-module-interface-exp-lab-vec! g2f0d@module-interface-exp-id* g2f0f@chi-internal-module g2f11@chi-body* g2f13@expand-transformer g2f15@parse-exports g2f17@parse-library-name g2f19@parse-library g2f1b@parse-import-spec* g2f1d@make-top-rib g2f1f@make-collector g2f21@inv-collector g2f23@vis-collector g2f25@imp-collector g2f27@chi-library-internal g2f29@chi-interaction-expr g2f2b@library-body-expander g2f2d@core-library-expander g2f2f@parse-top-level-program g2f31@top-level-expander g2f37@g2f32 g2f39@g2f34 g2f3b@g2f33 g2f3e@env? g2f40@make-env g2f42@env-names g2f44@env-labels g2f46@env-itc g2f48@set-env-names! g2f4a@set-env-labels! g2f4c@set-env-itc! g2f4e@rp g2f54@g2f4f g2f56@g2f51 g2f58@g2f50 g2f5b@interaction-env? g2f5d@make-interaction-env g2f5f@interaction-env-rib g2f61@interaction-env-r g2f63@interaction-env-locs g2f65@set-interaction-env-rib! g2f67@set-interaction-env-r! g2f69@set-interaction-env-locs! g2f6b@rp g2f6d@interaction-environment-symbols g2f6f@environment-bindings g2f71@parse-binding g2f73@environment? g2f75@environment-symbols g2f77@environment g2f79@null-environment g2f7b@scheme-report-environment g2f7d@expand g2f7f@eval g2f81@library-expander g2f83@boot-library-expand g2f85@rev-map-append g2f87@build-exports g2f89@make-export-subst g2f8b@make-export-env/macros g2f8d@generate-temporaries g2f8f@free-identifier=? g2f91@bound-identifier=? g2f93@make-source-condition g2f95@extract-position-condition g2f97@expression-position g2f99@assertion-error g2f9b@syntax-error g2f9d@syntax-violation* g2f9f@syntax-violation g2fa1@identifier? g2fa3@datum->syntax g2fa5@syntax->datum g2fa7@compile-r6rs-top-level g2fa9@pre-compile-r6rs-top-level g2fab@interaction-environment g2fad@top-level-context) (begin (set! g2c1e@file-options-macro (lambda (g2fae@x) ((lambda (g2fb1@valid-option?) (begin (set! g2fb1@valid-option? (lambda (g2fba@x) (and (g2cab@id? g2fba@x) (memq (g2cad@id->sym g2fba@x) '(no-fail no-create no-truncate))))) ((lambda (g2fb2@t) ((lambda (g2fb4@ls/false) (if (and g2fb4@ls/false (apply (lambda (g2fb6@opt*) (for-all g2fb1@valid-option? g2fb6@opt*)) g2fb4@ls/false)) (apply (lambda (g2fb8@opt*) (g2e6c@bless (list 'make-file-options (list 'quote g2fb8@opt*)))) g2fb4@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g2fb2@t))) (g2eb6@syntax-dispatch g2fb2@t '(_ . each-any)))) g2fae@x))) '#f))) (set! g2c20@set-cons (lambda (g2fbc@x g2fbd@ls) (if (memq g2fbc@x g2fbd@ls) g2fbd@ls (cons g2fbc@x g2fbd@ls)))) (set! g2c22@set-union (lambda (g2fc0@ls1 g2fc1@ls2) (if (null? g2fc0@ls1) g2fc1@ls2 (if (memq (car g2fc0@ls1) g2fc1@ls2) (g2c22@set-union (cdr g2fc0@ls1) g2fc1@ls2) (cons (car g2fc0@ls1) (g2c22@set-union (cdr g2fc0@ls1) g2fc1@ls2)))))) (set! g2c27@top-mark* '(top)) (set! g2c29@top-marked? (lambda (g2fc4@m*) (memq 'top g2fc4@m*))) (set! g2c2b@gen-lexical (lambda (g2fc6@sym) (if (symbol? g2fc6@sym) (gensym g2fc6@sym) (if (g2c73@stx? g2fc6@sym) (g2c2b@gen-lexical (g2cad@id->sym g2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g2fc6@sym))))) (set! g2c2d@gen-global (lambda (g2fc8@x) (g2c2b@gen-lexical g2fc8@x))) (set! g2c2f@gen-label (lambda (g2fca@_) (gensym))) (set! g2c31@gen-top-level-label (lambda (g2fcc@id g2fcd@rib) ((lambda (g2fd1@find) (begin (set! g2fd1@find (lambda (g2fdc@sym g2fdd@mark* g2fde@sym* g2fdf@mark** g2fe0@label*) (and (pair? g2fde@sym*) (if (and (eq? g2fdc@sym (car g2fde@sym*)) (g2caf@same-marks? g2fdd@mark* (car g2fdf@mark**))) (car g2fe0@label*) (g2fd1@find g2fdc@sym g2fdd@mark* (cdr g2fde@sym*) (cdr g2fdf@mark**) (cdr g2fe0@label*)))))) ((lambda (g2fd2@sym g2fd3@mark*) ((lambda (g2fd6@sym*) ((lambda (g2fd8@t) (if g2fd8@t ((lambda (g2fda@label) (if (g2ace@g296e@imported-label->binding g2fda@label) (gensym) g2fda@label)) g2fd8@t) (gensym))) (and (memq g2fd2@sym (g2c46@rib-sym* g2fcd@rib)) (g2fd1@find g2fd2@sym g2fd3@mark* g2fd6@sym* (g2c48@rib-mark** g2fcd@rib) (g2c4a@rib-label* g2fcd@rib))))) (g2c46@rib-sym* g2fcd@rib))) (g2cad@id->sym g2fcc@id) (g2c79@stx-mark* g2fcc@id)))) '#f))) (set! g2c33@gen-define-label+loc (lambda (g2fe6@id g2fe7@rib) ((lambda (g2fea@t) (if g2fea@t ((lambda (g2fec@env) ((lambda (g2fee@label g2fef@locs) (values g2fee@label ((lambda (g2ff2@t) (if g2ff2@t (cdr g2ff2@t) ((lambda (g2ff4@loc) (begin (g2f69@set-interaction-env-locs! g2fec@env (cons (cons g2fee@label g2ff4@loc) g2fef@locs)) g2ff4@loc)) (g2c2b@gen-lexical g2fe6@id)))) (assq g2fee@label g2fef@locs)))) (g2c31@gen-top-level-label g2fe6@id g2fe7@rib) (g2f63@interaction-env-locs g2fec@env))) g2fea@t) (values (gensym) (g2c2b@gen-lexical g2fe6@id)))) (g2fad@top-level-context)))) (set! g2c35@gen-define-label (lambda (g2ff6@id g2ff7@rib) (if (g2fad@top-level-context) (g2c31@gen-top-level-label g2ff6@id g2ff7@rib) (gensym)))) (set! g2c3b@g2c36 (make-record-type-descriptor 'rib '#f 'g2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! g2c3d@g2c38 '#f) (set! g2c3f@g2c37 (make-record-constructor-descriptor g2c3b@g2c36 '#f g2c3d@g2c38)) (set! g2c42@rib? (record-predicate g2c3b@g2c36)) (set! g2c44@make-rib (record-constructor g2c3f@g2c37)) (set! g2c46@rib-sym* (record-accessor g2c3b@g2c36 '0)) (set! g2c48@rib-mark** (record-accessor g2c3b@g2c36 '1)) (set! g2c4a@rib-label* (record-accessor g2c3b@g2c36 '2)) (set! g2c4c@rib-sealed/freq (record-accessor g2c3b@g2c36 '3)) (set! g2c4e@rib-cache (record-accessor g2c3b@g2c36 '4)) (set! g2c50@set-rib-sym*! (record-mutator g2c3b@g2c36 '0)) (set! g2c52@set-rib-mark**! (record-mutator g2c3b@g2c36 '1)) (set! g2c54@set-rib-label*! (record-mutator g2c3b@g2c36 '2)) (set! g2c56@set-rib-sealed/freq! (record-mutator g2c3b@g2c36 '3)) (set! g2c58@set-rib-cache! (record-mutator g2c3b@g2c36 '4)) (set! g2c5a@make-empty-rib (lambda () (g2c44@make-rib '() '() '() '#f '#f))) (set! g2c5c@extend-rib! (lambda (g2ffa@rib g2ffb@id g2ffc@label) ((lambda (g3001@find) (begin (set! g3001@find (lambda (g300e@sym g300f@mark* g3010@sym* g3011@mark** g3012@label*) (and (pair? g3010@sym*) (if (and (eq? g300e@sym (car g3010@sym*)) (g2caf@same-marks? g300f@mark* (car g3011@mark**))) g3012@label* (g3001@find g300e@sym g300f@mark* (cdr g3010@sym*) (cdr g3011@mark**) (cdr g3012@label*)))))) (begin (if (g2c4c@rib-sealed/freq g2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g2ffa@rib) (void)) ((lambda (g3002@sym g3003@mark*) ((lambda (g3006@sym*) ((lambda (g3008@t) (if g3008@t ((lambda (g300a@p) (if (not (eq? g2ffc@label (car g300a@p))) (if (g2fad@top-level-context) (set-car! g300a@p g2ffc@label) (g2f9f@syntax-violation '#f '"multiple definitions of identifier" g2ffb@id)) (void))) g3008@t) (begin (if (g2c4e@rib-cache g2ffa@rib) (hashtable-update! (g2c4e@rib-cache g2ffa@rib) g3002@sym (lambda (g300c@e) (cons (cons g3003@mark* g2ffc@label) g300c@e)) '()) (void)) (g2c50@set-rib-sym*! g2ffa@rib (cons g3002@sym g3006@sym*)) (g2c52@set-rib-mark**! g2ffa@rib (cons g3003@mark* (g2c48@rib-mark** g2ffa@rib))) (g2c54@set-rib-label*! g2ffa@rib (cons g2ffc@label (g2c4a@rib-label* g2ffa@rib)))))) (and (memq g3002@sym (g2c46@rib-sym* g2ffa@rib)) (g3001@find g3002@sym g3003@mark* g3006@sym* (g2c48@rib-mark** g2ffa@rib) (g2c4a@rib-label* g2ffa@rib))))) (g2c46@rib-sym* g2ffa@rib))) (g2cad@id->sym g2ffb@id) (g2c79@stx-mark* g2ffb@id))))) '#f))) (set! g2c5e@extend-rib/nc! (lambda (g3018@rib g3019@id g301a@label) ((lambda (g301e@sym g301f@mark*) ((lambda (g3022@sym*) (begin (if (g2c4e@rib-cache g3018@rib) (hashtable-update! (g2c4e@rib-cache g3018@rib) g301e@sym (lambda (g3024@e) (cons (cons g301f@mark* g301a@label) g3024@e)) '()) (void)) (g2c50@set-rib-sym*! g3018@rib (cons g301e@sym g3022@sym*)) (g2c52@set-rib-mark**! g3018@rib (cons g301f@mark* (g2c48@rib-mark** g3018@rib))) (g2c54@set-rib-label*! g3018@rib (cons g301a@label (g2c4a@rib-label* g3018@rib))))) (g2c46@rib-sym* g3018@rib))) (g2cad@id->sym g3019@id) (g2c79@stx-mark* g3019@id)))) (set! g2c60@make-rib-map (lambda (g3026@sym*) ((lambda (g3028@ht) ((letrec ((g302a@f (lambda (g302c@i g302d@sym*) (if (null? g302d@sym*) g3028@ht (begin (hashtable-update! g3028@ht (car g302d@sym*) (lambda (g3030@x) (cons g302c@i g3030@x)) '()) (g302a@f (+ g302c@i '1) (cdr g302d@sym*))))))) g302a@f) '0 g3026@sym*)) (make-eq-hashtable)))) (set! g2c62@seal-rib! (lambda (g3032@rib) ((lambda (g3034@sym*) (if (not (null? g3034@sym*)) (begin (g2c50@set-rib-sym*! g3032@rib (list->vector g3034@sym*)) (g2c52@set-rib-mark**! g3032@rib (list->vector (g2c48@rib-mark** g3032@rib))) (g2c54@set-rib-label*! g3032@rib (list->vector (g2c4a@rib-label* g3032@rib))) (g2c56@set-rib-sealed/freq! g3032@rib (g2c60@make-rib-map g3034@sym*))) (void))) (g2c46@rib-sym* g3032@rib)))) (set! g2c64@unseal-rib! (lambda (g3036@rib) (if (g2c4c@rib-sealed/freq g3036@rib) (begin (g2c56@set-rib-sealed/freq! g3036@rib '#f) (g2c50@set-rib-sym*! g3036@rib (vector->list (g2c46@rib-sym* g3036@rib))) (g2c52@set-rib-mark**! g3036@rib (vector->list (g2c48@rib-mark** g3036@rib))) (g2c54@set-rib-label*! g3036@rib (vector->list (g2c4a@rib-label* g3036@rib)))) (void)))) (set! g2c66@make-full-rib (lambda (g3038@id* g3039@label*) ((lambda (g303c@r) (begin (g2c62@seal-rib! g303c@r) g303c@r)) (g2c44@make-rib (map g2cad@id->sym g3038@id*) (map g2c79@stx-mark* g3038@id*) g3039@label* '#f '#f)))) (set! g2c6c@g2c67 (make-record-type-descriptor 'stx '#f 'g2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! g2c6e@g2c69 '#f) (set! g2c70@g2c68 (make-record-constructor-descriptor g2c6c@g2c67 '#f g2c6e@g2c69)) (set! g2c73@stx? (record-predicate g2c6c@g2c67)) (set! g2c75@make-stx (record-constructor g2c70@g2c68)) (set! g2c77@stx-expr (record-accessor g2c6c@g2c67 '0)) (set! g2c79@stx-mark* (record-accessor g2c6c@g2c67 '1)) (set! g2c7b@stx-subst* (record-accessor g2c6c@g2c67 '2)) (set! g2c7d@stx-ae* (record-accessor g2c6c@g2c67 '3)) (set! g2c7f@set-stx-expr! (record-mutator g2c6c@g2c67 '0)) (set! g2c81@set-stx-mark*! (record-mutator g2c6c@g2c67 '1)) (set! g2c83@set-stx-subst*! (record-mutator g2c6c@g2c67 '2)) (set! g2c85@set-stx-ae*! (record-mutator g2c6c@g2c67 '3)) (set! g2c87@rp (g2852@g2779@make-record-printer 'stx (lambda (g303e@x g303f@p g3040@wr) (begin (display '"#<syntax " g303f@p) (write (g2cc1@stx->datum g303e@x) g303f@p) ((lambda (g3044@expr) (if (g284a@g2769@annotation? g3044@expr) ((lambda (g3046@src) (if (pair? g3046@src) (begin (display '" [" g303f@p) (display (cdr g3046@src) g303f@p) (display '" of " g303f@p) (display (car g3046@src) g303f@p) (display '"]" g303f@p)) (void))) (g284b@g276b@annotation-source g3044@expr)) (void))) (g2c77@stx-expr g303e@x)) (display '">" g303f@p))))) (set! g2c89@datum->stx (lambda (g3048@id g3049@datum) (g2c75@make-stx g3049@datum (g2c79@stx-mark* g3048@id) (g2c7b@stx-subst* g3048@id) (g2c7d@stx-ae* g3048@id)))) (set! g2c8b@gen-mark (lambda () (string '#\m))) (set! g2c8d@anti-mark '#f) (set! g2c8f@anti-mark? not) (set! g2c91@join-wraps (lambda (g304c@m1* g304d@s1* g304e@ae1* g304f@e) ((lambda (g3055@cancel) (begin (set! g3055@cancel (lambda (g305c@ls1 g305d@ls2) ((letrec ((g3060@f (lambda (g3062@x g3063@ls1) (if (null? g3063@ls1) (cdr g305d@ls2) (cons g3062@x (g3060@f (car g3063@ls1) (cdr g3063@ls1))))))) g3060@f) (car g305c@ls1) (cdr g305c@ls1)))) ((lambda (g3056@m2* g3057@s2* g3058@ae2*) (if (and (not (null? g304c@m1*)) (not (null? g3056@m2*)) (g2c8f@anti-mark? (car g3056@m2*))) (values (g3055@cancel g304c@m1* g3056@m2*) (g3055@cancel g304d@s1* g3057@s2*) (g3055@cancel g304e@ae1* g3058@ae2*)) (values (append g304c@m1* g3056@m2*) (append g304d@s1* g3057@s2*) (append g304e@ae1* g3058@ae2*)))) (g2c79@stx-mark* g304f@e) (g2c7b@stx-subst* g304f@e) (g2c7d@stx-ae* g304f@e)))) '#f))) (set! g2c93@mkstx (lambda (g3066@e g3067@m* g3068@s* g3069@ae*) (if (and (g2c73@stx? g3066@e) (not (g2c29@top-marked? g3067@m*))) (call-with-values (lambda () (g2c91@join-wraps g3067@m* g3068@s* g3069@ae* g3066@e)) (lambda (g3074@g306f g3075@g3071 g3076@g3073) ((lambda (g307a@ae* g307b@s* g307c@m*) (g2c75@make-stx (g2c77@stx-expr g3066@e) g307c@m* g307b@s* g307a@ae*)) g3076@g3073 g3075@g3071 g3074@g306f))) (g2c75@make-stx g3066@e g3067@m* g3068@s* g3069@ae*)))) (set! g2c95@add-mark (lambda (g3080@m g3081@e g3082@ae) (g2c93@mkstx g3081@e (list g3080@m) '(shift) (list g3082@ae)))) (set! g2c97@add-subst (lambda (g3086@subst g3087@e) (g2c93@mkstx g3087@e '() (list g3086@subst) '()))) (set! g2c99@syntax-kind? (lambda (g308a@x g308b@p?) (if (g2c73@stx? g308a@x) (g2c99@syntax-kind? (g2c77@stx-expr g308a@x) g308b@p?) (if (g284a@g2769@annotation? g308a@x) (g2c99@syntax-kind? (g284c@g276d@annotation-expression g308a@x) g308b@p?) (g308b@p? g308a@x))))) (set! g2c9b@syntax-vector->list (lambda (g308e@x) (if (g2c73@stx? g308e@x) ((lambda (g3090@ls g3091@m* g3092@s* g3093@ae*) (map (lambda (g3098@x) (g2c93@mkstx g3098@x g3091@m* g3092@s* g3093@ae*)) g3090@ls)) (g2c9b@syntax-vector->list (g2c77@stx-expr g308e@x)) (g2c79@stx-mark* g308e@x) (g2c7b@stx-subst* g308e@x) (g2c7d@stx-ae* g308e@x)) (if (g284a@g2769@annotation? g308e@x) (g2c9b@syntax-vector->list (g284c@g276d@annotation-expression g308e@x)) (if (vector? g308e@x) (vector->list g308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g308e@x)))))) (set! g2c9d@syntax-pair? (lambda (g309a@x) (g2c99@syntax-kind? g309a@x pair?))) (set! g2c9f@syntax-vector? (lambda (g309c@x) (g2c99@syntax-kind? g309c@x vector?))) (set! g2ca1@syntax-null? (lambda (g309e@x) (g2c99@syntax-kind? g309e@x null?))) (set! g2ca3@syntax-list? (lambda (g30a0@x) (or (g2ca1@syntax-null? g30a0@x) (and (g2c9d@syntax-pair? g30a0@x) (g2ca3@syntax-list? (g2ca7@syntax-cdr g30a0@x)))))) (set! g2ca5@syntax-car (lambda (g30a2@x) (if (g2c73@stx? g30a2@x) (g2c93@mkstx (g2ca5@syntax-car (g2c77@stx-expr g30a2@x)) (g2c79@stx-mark* g30a2@x) (g2c7b@stx-subst* g30a2@x) (g2c7d@stx-ae* g30a2@x)) (if (g284a@g2769@annotation? g30a2@x) (g2ca5@syntax-car (g284c@g276d@annotation-expression g30a2@x)) (if (pair? g30a2@x) (car g30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" g30a2@x)))))) (set! g2ca7@syntax-cdr (lambda (g30a4@x) (if (g2c73@stx? g30a4@x) (g2c93@mkstx (g2ca7@syntax-cdr (g2c77@stx-expr g30a4@x)) (g2c79@stx-mark* g30a4@x) (g2c7b@stx-subst* g30a4@x) (g2c7d@stx-ae* g30a4@x)) (if (g284a@g2769@annotation? g30a4@x) (g2ca7@syntax-cdr (g284c@g276d@annotation-expression g30a4@x)) (if (pair? g30a4@x) (cdr g30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" g30a4@x)))))) (set! g2ca9@syntax->list (lambda (g30a6@x) (if (g2c9d@syntax-pair? g30a6@x) (cons (g2ca5@syntax-car g30a6@x) (g2ca9@syntax->list (g2ca7@syntax-cdr g30a6@x))) (if (g2ca1@syntax-null? g30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g30a6@x))))) (set! g2cab@id? (lambda (g30a8@x) (and (g2c73@stx? g30a8@x) ((lambda (g30aa@expr) (symbol? (if (g284a@g2769@annotation? g30aa@expr) (g2849@g2767@annotation-stripped g30aa@expr) g30aa@expr))) (g2c77@stx-expr g30a8@x))))) (set! g2cad@id->sym (lambda (g30ac@x) (begin (if (not (g2c73@stx? g30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" g30ac@x) (void)) ((lambda (g30ae@expr) ((lambda (g30b0@sym) (if (symbol? g30b0@sym) g30b0@sym (error 'id->sym '"BUG in ikarus: not an id" g30ac@x))) (if (g284a@g2769@annotation? g30ae@expr) (g2849@g2767@annotation-stripped g30ae@expr) g30ae@expr))) (g2c77@stx-expr g30ac@x))))) (set! g2caf@same-marks? (lambda (g30b2@x g30b3@y) (or (and (null? g30b2@x) (null? g30b3@y)) (and (pair? g30b2@x) (pair? g30b3@y) (eq? (car g30b2@x) (car g30b3@y)) (g2caf@same-marks? (cdr g30b2@x) (cdr g30b3@y)))))) (set! g2cb1@bound-id=? (lambda (g30b6@x g30b7@y) (and (eq? (g2cad@id->sym g30b6@x) (g2cad@id->sym g30b7@y)) (g2caf@same-marks? (g2c79@stx-mark* g30b6@x) (g2c79@stx-mark* g30b7@y))))) (set! g2cb3@free-id=? (lambda (g30ba@i g30bb@j) ((lambda (g30be@t0 g30bf@t1) (if (or g30be@t0 g30bf@t1) (eq? g30be@t0 g30bf@t1) (eq? (g2cad@id->sym g30ba@i) (g2cad@id->sym g30bb@j)))) (g2cc7@id->real-label g30ba@i) (g2cc7@id->real-label g30bb@j)))) (set! g2cb5@valid-bound-ids? (lambda (g30c2@id*) (and (for-all g2cab@id? g30c2@id*) (g2cb7@distinct-bound-ids? g30c2@id*)))) (set! g2cb7@distinct-bound-ids? (lambda (g30c4@id*) (or (null? g30c4@id*) (and (not (g2cb9@bound-id-member? (car g30c4@id*) (cdr g30c4@id*))) (g2cb7@distinct-bound-ids? (cdr g30c4@id*)))))) (set! g2cb9@bound-id-member? (lambda (g30c6@id g30c7@id*) (and (pair? g30c7@id*) (or (g2cb1@bound-id=? g30c6@id (car g30c7@id*)) (g2cb9@bound-id-member? g30c6@id (cdr g30c7@id*)))))) (set! g2cbb@self-evaluating? (lambda (g30ca@x) (or (number? g30ca@x) (string? g30ca@x) (char? g30ca@x) (boolean? g30ca@x) (regexp? g30ca@x) (bytevector? g30ca@x)))) (set! g2cbd@strip-annotations (lambda (g30cc@x) (if (pair? g30cc@x) (cons (g2cbd@strip-annotations (car g30cc@x)) (g2cbd@strip-annotations (cdr g30cc@x))) (if (vector? g30cc@x) (vector-map g2cbd@strip-annotations g30cc@x) (if (g284a@g2769@annotation? g30cc@x) (g2849@g2767@annotation-stripped g30cc@x) g30cc@x))))) (set! g2cbf@strip (lambda (g30ce@x g30cf@m*) (if (g2c29@top-marked? g30cf@m*) (if (or (g284a@g2769@annotation? g30ce@x) (and (pair? g30ce@x) (g284a@g2769@annotation? (car g30ce@x))) (and (vector? g30ce@x) (> (vector-length g30ce@x) '0) (g284a@g2769@annotation? (vector-ref g30ce@x '0)))) (g2cbd@strip-annotations g30ce@x) g30ce@x) ((letrec ((g30d2@f (lambda (g30d4@x) (if (g2c73@stx? g30d4@x) (g2cbf@strip (g2c77@stx-expr g30d4@x) (g2c79@stx-mark* g30d4@x)) (if (g284a@g2769@annotation? g30d4@x) (g2849@g2767@annotation-stripped g30d4@x) (if (pair? g30d4@x) ((lambda (g30d6@a g30d7@d) (if (and (eq? g30d6@a (car g30d4@x)) (eq? g30d7@d (cdr g30d4@x))) g30d4@x (cons g30d6@a g30d7@d))) (g30d2@f (car g30d4@x)) (g30d2@f (cdr g30d4@x))) (if (vector? g30d4@x) ((lambda (g30da@old) ((lambda (g30dc@new) (if (for-all eq? g30da@old g30dc@new) g30d4@x (list->vector g30dc@new))) (map g30d2@f g30da@old))) (vector->list g30d4@x)) g30d4@x))))))) g30d2@f) g30ce@x)))) (set! g2cc1@stx->datum (lambda (g30de@x) (g2cbf@strip g30de@x '()))) (set! g2cc3@same-marks*? (lambda (g30e0@mark* g30e1@mark** g30e2@si) (if (null? g30e2@si) '#f (if (g2caf@same-marks? g30e0@mark* (vector-ref g30e1@mark** (car g30e2@si))) (car g30e2@si) (g2cc3@same-marks*? g30e0@mark* g30e1@mark** (cdr g30e2@si)))))) (set! g2cc5@id->label (lambda (g30e6@id) (or (g2cc7@id->real-label g30e6@id) ((lambda (g30e8@t) (if g30e8@t ((lambda (g30ea@env) ((lambda (g30ec@rib) (call-with-values (lambda () (g2c33@gen-define-label+loc g30e6@id g30ec@rib)) (lambda (g30f2@g30ef g30f3@g30f1) ((lambda (g30f6@loc_ g30f7@lab) (begin (g2c5c@extend-rib! g30ec@rib g30e6@id g30f7@lab) g30f7@lab)) g30f3@g30f1 g30f2@g30ef)))) (g2f5f@interaction-env-rib g30ea@env))) g30e8@t) '#f)) (g2fad@top-level-context))))) (set! g2cc7@id->real-label (lambda (g30fa@id) ((lambda (g30fc@sym) ((letrec ((g30fe@search (lambda (g3100@subst* g3101@mark*) (if (null? g3100@subst*) '#f (if (eq? (car g3100@subst*) 'shift) (g30fe@search (cdr g3100@subst*) (cdr g3101@mark*)) ((lambda (g3104@rib) ((lambda (g3106@t) (if g3106@t ((lambda (g3108@ht) ((lambda (g310a@si) ((lambda (g310c@i) (if g310c@i (vector-ref (g2c4a@rib-label* g3104@rib) g310c@i) (g30fe@search (cdr g3100@subst*) g3101@mark*))) (and g310a@si (g2cc3@same-marks*? g3101@mark* (g2c48@rib-mark** g3104@rib) (reverse g310a@si))))) (hashtable-ref g3108@ht g30fc@sym '#f))) g3106@t) ((letrec ((g310e@f (lambda (g3110@sym* g3111@mark** g3112@label*) (if (null? g3110@sym*) (g30fe@search (cdr g3100@subst*) g3101@mark*) (if (and (eq? (car g3110@sym*) g30fc@sym) (g2caf@same-marks? (car g3111@mark**) g3101@mark*)) (car g3112@label*) (g310e@f (cdr g3110@sym*) (cdr g3111@mark**) (cdr g3112@label*))))))) g310e@f) (g2c46@rib-sym* g3104@rib) (g2c48@rib-mark** g3104@rib) (g2c4a@rib-label* g3104@rib)))) (g2c4c@rib-sealed/freq g3104@rib))) (car g3100@subst*))))))) g30fe@search) (g2c7b@stx-subst* g30fa@id) (g2c79@stx-mark* g30fa@id))) (g2cad@id->sym g30fa@id)))) (set! g2cc9@label->binding (lambda (g3116@x g3117@r) ((lambda (g311a@t) (if g311a@t ((lambda (g311c@b) (if (and (pair? g311c@b) (eq? (car g311c@b) '$core-rtd)) (cons '$rtd (map g2e6c@bless (cdr g311c@b))) (if (and (pair? g311c@b) (eq? (car g311c@b) 'global-rtd)) ((lambda (g311e@lib g311f@loc) (cons '$rtd (symbol-value g311f@loc))) (cadr g311c@b) (cddr g311c@b)) g311c@b))) g311a@t) ((lambda (g3122@t) (if g3122@t (cdr g3122@t) ((lambda (g3124@t) (if g3124@t ((lambda (g3126@env) ((lambda (g3128@t) (if g3128@t ((lambda (g312a@p) (cons* 'lexical (cdr g312a@p) '#f)) g3128@t) '(displaced-lexical . #f))) (assq g3116@x (g2f63@interaction-env-locs g3126@env)))) g3124@t) '(displaced-lexical . #f))) (g2fad@top-level-context)))) (assq g3116@x g3117@r)))) (g2ace@g296e@imported-label->binding g3116@x)))) (set! g2ccb@make-binding cons) (set! g2ccd@binding-type car) (set! g2ccf@binding-value cdr) (set! g2cd1@raise-unbound-error (lambda (g312c@id) (g2f9d@syntax-violation* '#f '"unbound identifier" g312c@id (g4cdc@g4b22@make-undefined-violation)))) (set! g2cd3@syntax-type (lambda (g312e@e g312f@r) (if (g2cab@id? g312e@e) ((lambda (g3132@id) ((lambda (g3134@label) ((lambda (g3136@b) ((lambda (g3138@type) ((lambda () (begin (if (not g3134@label) (g2cd1@raise-unbound-error g3132@id) (void)) ((lambda (g313a@t) (if (memv g313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values g3138@type (g2ccf@binding-value g3136@b) g3132@id) (values 'other '#f '#f))) g3138@type))))) (g2ccd@binding-type g3136@b))) (g2cc9@label->binding g3134@label g312f@r))) (g2cc5@id->label g3132@id))) g312e@e) (if (g2c9d@syntax-pair? g312e@e) ((lambda (g313c@id) (if (g2cab@id? g313c@id) ((lambda (g313e@label) ((lambda (g3140@b) ((lambda (g3142@type) ((lambda () (begin (if (not g313e@label) (g2cd1@raise-unbound-error g313c@id) (void)) ((lambda (g3144@t) (if (memv g3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values g3142@type (g2ccf@binding-value g3140@b) g313c@id) (values 'call '#f '#f))) g3142@type))))) (g2ccd@binding-type g3140@b))) (g2cc9@label->binding g313e@label g312f@r))) (g2cc5@id->label g313c@id)) (values 'call '#f '#f))) (g2ca5@syntax-car g312e@e)) ((lambda (g3146@d) (if (g2cbb@self-evaluating? g3146@d) (values 'constant g3146@d '#f) (values 'other '#f '#f))) (g2cc1@stx->datum g312e@e)))))) (set! g2ce1@sanitize-binding (lambda (g3148@x g3149@src) (if (procedure? g3148@x) (cons* 'local-macro g3148@x g3149@src) (if (and (pair? g3148@x) (eq? (car g3148@x) 'macro!) (procedure? (cdr g3148@x))) (cons* 'local-macro! (cdr g3148@x) g3149@src) (if (and (pair? g3148@x) (eq? (car g3148@x) '$rtd)) g3148@x (assertion-violation 'expand '"invalid transformer" g3148@x)))))) (set! g2ce3@make-variable-transformer (lambda (g314c@x) (if (procedure? g314c@x) (cons 'macro! g314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" g314c@x)))) (set! g2ce5@variable-transformer? (lambda (g314e@x) (and (pair? g314e@x) (eq? (car g314e@x) 'macro!) (procedure? (cdr g314e@x))))) (set! g2ce7@variable-transformer-procedure (lambda (g3150@x) (if (g2ce5@variable-transformer? g3150@x) (cdr g3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" g3150@x)))) (set! g2ce9@make-eval-transformer (lambda (g3152@x) (g2ce1@sanitize-binding (eval-core (g28a9@g2861@expanded->core g3152@x)) g3152@x))) (set! g2e3a@parse-define (lambda (g3154@x) ((lambda (g3156@t) ((lambda (g3158@ls/false) (if (and g3158@ls/false (apply (lambda (g315a@id g315b@fmls g315c@b g315d@b*) (g2cab@id? g315a@id)) g3158@ls/false)) (apply (lambda (g3162@id g3163@fmls g3164@b g3165@b*) (begin (g2edc@verify-formals g3163@fmls g3154@x) (values g3162@id (cons 'defun (cons g3163@fmls (cons g3164@b g3165@b*)))))) g3158@ls/false) ((lambda (g316a@t) ((lambda (g316c@ls/false) (if (and g316c@ls/false (apply (lambda (g316e@id g316f@val) (g2cab@id? g316e@id)) g316c@ls/false)) (apply (lambda (g3172@id g3173@val) (values g3172@id (cons 'expr g3173@val))) g316c@ls/false) ((lambda (g3176@t) ((lambda (g3178@ls/false) (if (and g3178@ls/false (apply (lambda (g317a@id) (g2cab@id? g317a@id)) g3178@ls/false)) (apply (lambda (g317c@id) (values g317c@id (cons 'expr (g2e6c@bless '(void))))) g3178@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3176@t))) (g2eb6@syntax-dispatch g3176@t '(_ any)))) g316a@t))) (g2eb6@syntax-dispatch g316a@t '(_ any any)))) g3156@t))) (g2eb6@syntax-dispatch g3156@t '(_ (any . any) any . each-any)))) g3154@x))) (set! g2e3c@parse-define-syntax (lambda (g317e@x) ((lambda (g3180@t) ((lambda (g3182@ls/false) (if (and g3182@ls/false (apply (lambda (g3184@id g3185@val) (g2cab@id? g3184@id)) g3182@ls/false)) (apply (lambda (g3188@id g3189@val) (values g3188@id g3189@val)) g3182@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3180@t))) (g2eb6@syntax-dispatch g3180@t '(_ any any)))) g317e@x))) (set! g2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! g2e40@scheme-stx (lambda (g318c@sym) (or (hashtable-ref g2e3e@scheme-stx-hashtable g318c@sym '#f) ((lambda (g318e@subst) ((lambda (g3190@stx) ((lambda (g3192@stx) ((lambda () (begin (hashtable-set! g2e3e@scheme-stx-hashtable g318c@sym g3192@stx) g3192@stx)))) ((lambda (g3194@t) (if g3194@t ((lambda (g3196@x) ((lambda (g3198@name g3199@label) (g2c97@add-subst (g2c44@make-rib (list g3198@name) (list g2c27@top-mark*) (list g3199@label) '#f '#f) g3190@stx)) (car g3196@x) (cdr g3196@x))) g3194@t) g3190@stx)) (assq g318c@sym g318e@subst)))) (g2c75@make-stx g318c@sym g2c27@top-mark* '() '()))) (g2aa4@g291a@library-subst (g2ac8@g2962@find-library-by-name '(psyntax system $all))))))) (set! g2e42@lexical-var car) (set! g2e44@lexical-mutable? cdr) (set! g2e46@set-lexical-mutable! set-cdr!) (set! g2e48@add-lexical (lambda (g319c@lab g319d@lex g319e@r) (cons (cons* g319c@lab 'lexical g319d@lex '#f) g319e@r))) (set! g2e4a@add-lexicals (lambda (g31a2@lab* g31a3@lex* g31a4@r) (if (null? g31a2@lab*) g31a4@r (g2e4a@add-lexicals (cdr g31a2@lab*) (cdr g31a3@lex*) (g2e48@add-lexical (car g31a2@lab*) (car g31a3@lex*) g31a4@r))))) (set! g2e4c@letrec-helper (lambda (g31a8@e g31a9@r g31aa@mr g31ab@build) ((lambda (g31b0@t) ((lambda (g31b2@ls/false) (if g31b2@ls/false (apply (lambda (g31b4@lhs* g31b5@rhs* g31b6@b g31b7@b*) (if (not (g2cb5@valid-bound-ids? g31b4@lhs*)) (g2e70@invalid-fmls-error g31a8@e g31b4@lhs*) ((lambda (g31bc@lex* g31bd@lab*) ((lambda (g31c0@rib g31c1@r) ((lambda (g31c4@body g31c5@rhs*) (g31ab@build '#f g31bc@lex* g31c5@rhs* g31c4@body)) (g2eee@chi-internal (g2c97@add-subst g31c0@rib (cons g31b6@b g31b7@b*)) g31c1@r g31aa@mr) (g2ed4@chi-expr* (map (lambda (g31c8@x) (g2c97@add-subst g31c0@rib g31c8@x)) g31b5@rhs*) g31c1@r g31aa@mr))) (g2c66@make-full-rib g31b4@lhs* g31bd@lab*) (g2e4a@add-lexicals g31bd@lab* g31bc@lex* g31a9@r))) (map g2c2b@gen-lexical g31b4@lhs*) (map g2c2f@gen-label g31b4@lhs*)))) g31b2@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g31b0@t))) (g2eb6@syntax-dispatch g31b0@t '(_ #(each (any any)) any . each-any)))) g31a8@e))) (set! g2e4e@letrec-transformer (lambda (g31ca@e g31cb@r g31cc@mr) (g2e4c@letrec-helper g31ca@e g31cb@r g31cc@mr g2c0c@g2b7d@build-letrec))) (set! g2e50@letrec*-transformer (lambda (g31d0@e g31d1@r g31d2@mr) (g2e4c@letrec-helper g31d0@e g31d1@r g31d2@mr g2c0d@g2b7f@build-letrec*))) (set! g2e52@fluid-let-syntax-transformer (lambda (g31d6@e g31d7@r g31d8@mr) ((lambda (g31dd@lookup) (begin (set! g31dd@lookup (lambda (g31f0@x) (or (g2cc5@id->label g31f0@x) (g2f9f@syntax-violation '#f '"unbound identifier" g31d6@e g31f0@x)))) ((lambda (g31de@t) ((lambda (g31e0@ls/false) (if g31e0@ls/false (apply (lambda (g31e2@lhs* g31e3@rhs* g31e4@b g31e5@b*) (if (not (g2cb5@valid-bound-ids? g31e2@lhs*)) (g2e70@invalid-fmls-error g31d6@e g31e2@lhs*) ((lambda (g31ea@lab* g31eb@rhs*) (g2eee@chi-internal (cons g31e4@b g31e5@b*) (append (map cons g31ea@lab* g31eb@rhs*) g31d7@r) (append (map cons g31ea@lab* g31eb@rhs*) g31d8@mr))) (map g31dd@lookup g31e2@lhs*) (map (lambda (g31ee@x) (g2ce9@make-eval-transformer (g2f13@expand-transformer g31ee@x g31d8@mr))) g31e3@rhs*)))) g31e0@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g31de@t))) (g2eb6@syntax-dispatch g31de@t '(_ #(each (any any)) any . each-any)))) g31d6@e))) '#f))) (set! g2e54@type-descriptor-transformer (lambda (g31f2@e g31f3@r g31f4@mr) ((lambda (g31f8@t) ((lambda (g31fa@ls/false) (if (and g31fa@ls/false (apply (lambda (g31fc@id) (g2cab@id? g31fc@id)) g31fa@ls/false)) (apply (lambda (g31fe@id) ((lambda (g3200@lab) ((lambda (g3202@b) ((lambda (g3204@type) ((lambda () (begin (if (not g3200@lab) (g2cd1@raise-unbound-error g31fe@id) (void)) (if (not (and (eq? g3204@type '$rtd) (not (list? (g2ccf@binding-value g3202@b))))) (g2f9f@syntax-violation '#f '"not a record type" g31f2@e) (void)) (list 'quote (g2ccf@binding-value g3202@b)))))) (g2ccd@binding-type g3202@b))) (g2cc9@label->binding g3200@lab g31f3@r))) (g2cc5@id->label g31fe@id))) g31fa@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g31f8@t))) (g2eb6@syntax-dispatch g31f8@t '(_ any)))) g31f2@e))) (set! g2e56@record-type-descriptor-transformer (lambda (g3206@e g3207@r g3208@mr) ((lambda (g320c@t) ((lambda (g320e@ls/false) (if (and g320e@ls/false (apply (lambda (g3210@id) (g2cab@id? g3210@id)) g320e@ls/false)) (apply (lambda (g3212@id) ((lambda (g3214@lab) ((lambda (g3216@b) ((lambda (g3218@type) ((lambda () (begin (if (not g3214@lab) (g2cd1@raise-unbound-error g3212@id) (void)) (if (not (and (eq? g3218@type '$rtd) (list? (g2ccf@binding-value g3216@b)))) (g2f9f@syntax-violation '#f '"not a record type" g3206@e) (void)) (g2ed8@chi-expr (car (g2ccf@binding-value g3216@b)) g3207@r g3208@mr))))) (g2ccd@binding-type g3216@b))) (g2cc9@label->binding g3214@lab g3207@r))) (g2cc5@id->label g3212@id))) g320e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g320c@t))) (g2eb6@syntax-dispatch g320c@t '(_ any)))) g3206@e))) (set! g2e58@record-constructor-descriptor-transformer (lambda (g321a@e g321b@r g321c@mr) ((lambda (g3220@t) ((lambda (g3222@ls/false) (if (and g3222@ls/false (apply (lambda (g3224@id) (g2cab@id? g3224@id)) g3222@ls/false)) (apply (lambda (g3226@id) ((lambda (g3228@lab) ((lambda (g322a@b) ((lambda (g322c@type) ((lambda () (begin (if (not g3228@lab) (g2cd1@raise-unbound-error g3226@id) (void)) (if (not (and (eq? g322c@type '$rtd) (list? (g2ccf@binding-value g322a@b)))) (g2f9f@syntax-violation '#f '"invalid type" g321a@e) (void)) (g2ed8@chi-expr (cadr (g2ccf@binding-value g322a@b)) g321b@r g321c@mr))))) (g2ccd@binding-type g322a@b))) (g2cc9@label->binding g3228@lab g321b@r))) (g2cc5@id->label g3226@id))) g3222@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3220@t))) (g2eb6@syntax-dispatch g3220@t '(_ any)))) g321a@e))) (set! g2e5a@when-macro (lambda (g322e@e) ((lambda (g3230@t) ((lambda (g3232@ls/false) (if g3232@ls/false (apply (lambda (g3234@test g3235@e g3236@e*) (g2e6c@bless (list 'if g3234@test (cons 'begin (cons g3235@e g3236@e*))))) g3232@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3230@t))) (g2eb6@syntax-dispatch g3230@t '(_ any any . each-any)))) g322e@e))) (set! g2e5c@unless-macro (lambda (g323a@e) ((lambda (g323c@t) ((lambda (g323e@ls/false) (if g323e@ls/false (apply (lambda (g3240@test g3241@e g3242@e*) (g2e6c@bless (list 'if (list 'not g3240@test) (cons 'begin (cons g3241@e g3242@e*))))) g323e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g323c@t))) (g2eb6@syntax-dispatch g323c@t '(_ any any . each-any)))) g323a@e))) (set! g2e5e@if-transformer (lambda (g3246@e g3247@r g3248@mr) ((lambda (g324c@t) ((lambda (g324e@ls/false) (if g324e@ls/false (apply (lambda (g3250@e0 g3251@e1 g3252@e2) (list 'if (g2ed8@chi-expr g3250@e0 g3247@r g3248@mr) (g2ed8@chi-expr g3251@e1 g3247@r g3248@mr) (g2ed8@chi-expr g3252@e2 g3247@r g3248@mr))) g324e@ls/false) ((lambda (g3256@t) ((lambda (g3258@ls/false) (if g3258@ls/false (apply (lambda (g325a@e0 g325b@e1) (list 'if (g2ed8@chi-expr g325a@e0 g3247@r g3248@mr) (g2ed8@chi-expr g325b@e1 g3247@r g3248@mr) (g2c0b@g2b7b@build-void))) g3258@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3256@t))) (g2eb6@syntax-dispatch g3256@t '(_ any any)))) g324c@t))) (g2eb6@syntax-dispatch g324c@t '(_ any any any)))) g3246@e))) (set! g2e60@and-transformer (lambda (g325e@e g325f@r g3260@mr) ((lambda (g3264@t) ((lambda (g3266@ls/false) (if g3266@ls/false (apply (lambda (g3268@e*) (cons 'and (g2ed4@chi-expr* g3268@e* g325f@r g3260@mr))) g3266@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3264@t))) (g2eb6@syntax-dispatch g3264@t '(_ . each-any)))) g325e@e))) (set! g2e62@or-transformer (lambda (g326a@e g326b@r g326c@mr) ((lambda (g3270@t) ((lambda (g3272@ls/false) (if g3272@ls/false (apply (lambda (g3274@e*) (cons 'or (g2ed4@chi-expr* g3274@e* g326b@r g326c@mr))) g3272@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3270@t))) (g2eb6@syntax-dispatch g3270@t '(_ . each-any)))) g326a@e))) (set! g2e64@case-macro (lambda (g3276@e) ((lambda (g3279@build-last g327b@build-one) (begin (set! g3279@build-last (lambda (g32a0@cls) ((lambda (g32a2@t) ((lambda (g32a4@ls/false) (if g32a4@ls/false (apply (lambda (g32a6@e g32a7@e*) (cons 'begin (cons g32a6@e g32a7@e*))) g32a4@ls/false) ((lambda (g32aa@t) ((lambda (g32ac@ls/false) (if g32ac@ls/false (apply (lambda () (g327b@build-one g32a0@cls '(if #f #f))) g32ac@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g32aa@t))) (g2eb6@syntax-dispatch g32aa@t '_))) g32a2@t))) (g2eb6@syntax-dispatch g32a2@t '(#(scheme-id else) any . each-any)))) g32a0@cls))) (set! g327b@build-one (lambda (g3292@cls g3293@k) ((lambda (g3296@t) ((lambda (g3298@ls/false) (if g3298@ls/false (apply (lambda (g329a@d* g329b@e g329c@e*) (list 'if (list 'memv 't (list 'quote g329a@d*)) (cons 'begin (cons g329b@e g329c@e*)) g3293@k)) g3298@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3296@t))) (g2eb6@syntax-dispatch g3296@t '(each-any any . each-any)))) g3292@cls))) ((lambda (g327c@t) ((lambda (g327e@ls/false) (if g327e@ls/false (apply (lambda (g3280@expr) (g2e6c@bless (cons 'let (cons (list (list 't g3280@expr)) '((if #f #f)))))) g327e@ls/false) ((lambda (g3282@t) ((lambda (g3284@ls/false) (if g3284@ls/false (apply (lambda (g3286@expr g3287@cls g3288@cls*) (g2e6c@bless (list 'let (list (list 't g3286@expr)) ((letrec ((g328c@f (lambda (g328e@cls g328f@cls*) (if (null? g328f@cls*) (g3279@build-last g328e@cls) (g327b@build-one g328e@cls (g328c@f (car g328f@cls*) (cdr g328f@cls*))))))) g328c@f) g3287@cls g3288@cls*)))) g3284@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3282@t))) (g2eb6@syntax-dispatch g3282@t '(_ any any . each-any)))) g327c@t))) (g2eb6@syntax-dispatch g327c@t '(_ any)))) g3276@e))) '#f '#f))) (set! g2e66@quote-transformer (lambda (g32ae@e g32af@r g32b0@mr) ((lambda (g32b4@t) ((lambda (g32b6@ls/false) (if g32b6@ls/false (apply (lambda (g32b8@datum) (list 'quote (g2cc1@stx->datum g32b8@datum))) g32b6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g32b4@t))) (g2eb6@syntax-dispatch g32b4@t '(_ any)))) g32ae@e))) (set! g2e68@case-lambda-transformer (lambda (g32ba@e g32bb@r g32bc@mr) ((lambda (g32c0@t) ((lambda (g32c2@ls/false) (if g32c2@ls/false (apply (lambda (g32c4@fmls* g32c5@b* g32c6@b**) (call-with-values (lambda () (g2ee0@chi-lambda-clause* g32ba@e g32c4@fmls* (map cons g32c5@b* g32c6@b**) g32bb@r g32bc@mr)) (lambda (g32ce@g32cb g32cf@g32cd) ((lambda (g32d2@body* g32d3@fmls*) (g2c08@g2b49@build-case-lambda '#f g32d3@fmls* g32d2@body*)) g32cf@g32cd g32ce@g32cb)))) g32c2@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g32c0@t))) (g2eb6@syntax-dispatch g32c0@t '(_ . #(each (any any . each-any)))))) g32ba@e))) (set! g2e6a@lambda-transformer (lambda (g32d6@e g32d7@r g32d8@mr) ((lambda (g32dc@t) ((lambda (g32de@ls/false) (if g32de@ls/false (apply (lambda (g32e0@fmls g32e1@b g32e2@b*) (call-with-values (lambda () (g2ede@chi-lambda-clause g32d6@e g32e0@fmls (cons g32e1@b g32e2@b*) g32d7@r g32d8@mr)) (lambda (g32ea@g32e7 g32eb@g32e9) ((lambda (g32ee@body g32ef@fmls) (g2c07@g2b47@build-lambda '#f g32ef@fmls g32ee@body)) g32eb@g32e9 g32ea@g32e7)))) g32de@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g32dc@t))) (g2eb6@syntax-dispatch g32dc@t '(_ any any . each-any)))) g32d6@e))) (set! g2e6c@bless (lambda (g32f2@x) (g2c93@mkstx ((letrec ((g32f4@f (lambda (g32f6@x) (if (g2c73@stx? g32f6@x) g32f6@x (if (pair? g32f6@x) (cons (g32f4@f (car g32f6@x)) (g32f4@f (cdr g32f6@x))) (if (symbol? g32f6@x) (g2e40@scheme-stx g32f6@x) (if (vector? g32f6@x) (vector-map g32f4@f g32f6@x) g32f6@x))))))) g32f4@f) g32f2@x) '() '() '()))) (set! g2e6e@with-syntax-macro (lambda (g32f8@e) ((lambda (g32fa@t) ((lambda (g32fc@ls/false) (if g32fc@ls/false (apply (lambda (g32fe@pat* g32ff@expr* g3300@b g3301@b*) ((lambda (g3306@idn*) (begin (g2edc@verify-formals (map car g3306@idn*) g32f8@e) ((lambda (g3308@t*) (g2e6c@bless (list 'let (map list g3308@t* g32ff@expr*) ((letrec ((g330a@f (lambda (g330c@pat* g330d@t*) (if (null? g330c@pat*) (cons 'begin (cons '#f (cons g3300@b g3301@b*))) (list 'syntax-case (car g330d@t*) '() (list (car g330c@pat*) (g330a@f (cdr g330c@pat*) (cdr g330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car g330c@pat*)) (car g330d@t*)))))))) g330a@f) g32fe@pat* g3308@t*)))) (g2f8d@generate-temporaries g32ff@expr*)))) ((letrec ((g3310@f (lambda (g3312@pat*) (if (null? g3312@pat*) '() (call-with-values (lambda () (g2eb4@convert-pattern (car g3312@pat*) '())) (lambda (g3318@g3315 g3319@g3317) ((lambda (g331c@idn* g331d@pat) (append g331c@idn* (g3310@f (cdr g3312@pat*)))) g3319@g3317 g3318@g3315))))))) g3310@f) g32fe@pat*))) g32fc@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g32fa@t))) (g2eb6@syntax-dispatch g32fa@t '(_ #(each (any any)) any . each-any)))) g32f8@e))) (set! g2e70@invalid-fmls-error (lambda (g3320@stx g3321@fmls) ((lambda (g3324@t) ((lambda (g3326@ls/false) (if g3326@ls/false (apply (lambda (g3328@id* g3329@last) ((letrec ((g332c@f (lambda (g332e@id*) (if (null? g332e@id*) (values) (if (not (g2cab@id? (car g332e@id*))) (g2f9f@syntax-violation '#f '"not an identifier" g3320@stx (car g332e@id*)) (begin (g332c@f (cdr g332e@id*)) (if (g2cb9@bound-id-member? (car g332e@id*) (cdr g332e@id*)) (g2f9f@syntax-violation '#f '"duplicate binding" g3320@stx (car g332e@id*)) (void)))))))) g332c@f) (if (g2cab@id? g3329@last) (cons g3329@last g3328@id*) (if (g2ca1@syntax-null? g3329@last) g3328@id* (g2f9f@syntax-violation '#f '"not an identifier" g3320@stx g3329@last))))) g3326@ls/false) ((lambda (g3330@t) ((lambda (g3332@ls/false) (if g3332@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"malformed binding form" g3320@stx g3321@fmls)) g3332@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3330@t))) (g2eb6@syntax-dispatch g3330@t '_))) g3324@t))) (g2eb6@syntax-dispatch g3324@t '#(each+ any () any)))) g3321@fmls))) (set! g2e72@let-macro (lambda (g3334@stx) ((lambda (g3336@t) ((lambda (g3338@ls/false) (if g3338@ls/false (apply (lambda (g333a@lhs* g333b@rhs* g333c@b g333d@b*) (if (g2cb5@valid-bound-ids? g333a@lhs*) (g2e6c@bless (cons (cons 'lambda (cons g333a@lhs* (cons g333c@b g333d@b*))) g333b@rhs*)) (g2e70@invalid-fmls-error g3334@stx g333a@lhs*))) g3338@ls/false) ((lambda (g3342@t) ((lambda (g3344@ls/false) (if (and g3344@ls/false (apply (lambda (g3346@f g3347@lhs* g3348@rhs* g3349@b g334a@b*) (g2cab@id? g3346@f)) g3344@ls/false)) (apply (lambda (g3350@f g3351@lhs* g3352@rhs* g3353@b g3354@b*) (if (g2cb5@valid-bound-ids? g3351@lhs*) (g2e6c@bless (cons (list 'letrec (list (list g3350@f (cons 'lambda (cons g3351@lhs* (cons g3353@b g3354@b*))))) g3350@f) g3352@rhs*)) (g2e70@invalid-fmls-error g3334@stx g3351@lhs*))) g3344@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3342@t))) (g2eb6@syntax-dispatch g3342@t '(_ any #(each (any any)) any . each-any)))) g3336@t))) (g2eb6@syntax-dispatch g3336@t '(_ #(each (any any)) any . each-any)))) g3334@stx))) (set! g2e74@let-values-macro (lambda (g335a@stx) ((lambda (g335d@rename g335f@rename*) (begin (set! g335d@rename (lambda (g33c2@x g33c3@old* g33c4@new*) (begin (if (not (g2cab@id? g33c2@x)) (g2f9f@syntax-violation '#f '"not an indentifier" g335a@stx g33c2@x) (void)) (if (g2cb9@bound-id-member? g33c2@x g33c3@old*) (g2f9f@syntax-violation '#f '"duplicate binding" g335a@stx g33c2@x) (void)) ((lambda (g33c8@y) (values g33c8@y (cons g33c2@x g33c3@old*) (cons g33c8@y g33c4@new*))) (gensym (g2fa5@syntax->datum g33c2@x)))))) (set! g335f@rename* (lambda (g33b0@x* g33b1@old* g33b2@new*) (if (null? g33b0@x*) (values '() g33b1@old* g33b2@new*) (call-with-values (lambda () (g335d@rename (car g33b0@x*) g33b1@old* g33b2@new*)) (lambda (g33b6@x g33b7@old* g33b8@new*) (call-with-values (lambda () (g335f@rename* (cdr g33b0@x*) g33b7@old* g33b8@new*)) (lambda (g33bc@x* g33bd@old* g33be@new*) (values (cons g33b6@x g33bc@x*) g33bd@old* g33be@new*)))))))) ((lambda (g3360@t) ((lambda (g3362@ls/false) (if g3362@ls/false (apply (lambda (g3364@b g3365@b*) (cons* (g2e6c@bless 'let) '() g3364@b g3365@b*)) g3362@ls/false) ((lambda (g3368@t) ((lambda (g336a@ls/false) (if g336a@ls/false (apply (lambda (g336c@lhs* g336d@rhs* g336e@b g336f@b*) (g2e6c@bless ((letrec ((g3374@f (lambda (g3376@lhs* g3377@rhs* g3378@old* g3379@new*) (if (null? g3376@lhs*) (cons 'let (cons (map list g3378@old* g3379@new*) (cons g336e@b g336f@b*))) ((lambda (g337e@t) ((lambda (g3380@ls/false) (if g3380@ls/false (apply (lambda (g3382@x*) (call-with-values (lambda () (g335f@rename* g3382@x* g3378@old* g3379@new*)) (lambda (g338a@g3385 g338b@g3387 g338c@g3389) ((lambda (g3390@new* g3391@old* g3392@y*) (list 'call-with-values (list 'lambda '() (car g3377@rhs*)) (list 'lambda g3392@y* (g3374@f (cdr g3376@lhs*) (cdr g3377@rhs*) g3391@old* g3390@new*)))) g338c@g3389 g338b@g3387 g338a@g3385)))) g3380@ls/false) ((lambda (g3396@t) ((lambda (g3398@ls/false) (if g3398@ls/false (apply (lambda (g339a@x* g339b@x) (call-with-values (lambda () (g335d@rename g339b@x g3378@old* g3379@new*)) (lambda (g339e@y g339f@old* g33a0@new*) (call-with-values (lambda () (g335f@rename* g339a@x* g339f@old* g33a0@new*)) (lambda (g33a4@y* g33a5@old* g33a6@new*) (list 'call-with-values (list 'lambda '() (car g3377@rhs*)) (list 'lambda (append g33a4@y* g339e@y) (g3374@f (cdr g3376@lhs*) (cdr g3377@rhs*) g33a5@old* g33a6@new*)))))))) g3398@ls/false) ((lambda (g33aa@t) ((lambda (g33ac@ls/false) (if g33ac@ls/false (apply (lambda (g33ae@others) (g2f9f@syntax-violation '#f '"malformed bindings" g335a@stx g33ae@others)) g33ac@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g33aa@t))) (g2eb6@syntax-dispatch g33aa@t 'any))) g3396@t))) (g2eb6@syntax-dispatch g3396@t '#(each+ any () any)))) g337e@t))) (g2eb6@syntax-dispatch g337e@t 'each-any))) (car g3376@lhs*)))))) g3374@f) g336c@lhs* g336d@rhs* '() '()))) g336a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3368@t))) (g2eb6@syntax-dispatch g3368@t '(_ #(each (any any)) any . each-any)))) g3360@t))) (g2eb6@syntax-dispatch g3360@t '(_ () any . each-any)))) g335a@stx))) '#f '#f))) (set! g2e76@let*-values-macro (lambda (g33ca@stx) ((lambda (g33cd@check) (begin (set! g33cd@check (lambda (g33fc@x*) (if (not (null? g33fc@x*)) ((lambda (g33fe@x) (begin (if (not (g2cab@id? g33fe@x)) (g2f9f@syntax-violation '#f '"not an identifier" g33ca@stx g33fe@x) (void)) (g33cd@check (cdr g33fc@x*)) (if (g2cb9@bound-id-member? g33fe@x (cdr g33fc@x*)) (g2f9f@syntax-violation '#f '"duplicate identifier" g33ca@stx g33fe@x) (void)))) (car g33fc@x*)) (void)))) ((lambda (g33ce@t) ((lambda (g33d0@ls/false) (if g33d0@ls/false (apply (lambda (g33d2@b g33d3@b*) (cons* (g2e6c@bless 'let) '() g33d2@b g33d3@b*)) g33d0@ls/false) ((lambda (g33d6@t) ((lambda (g33d8@ls/false) (if g33d8@ls/false (apply (lambda (g33da@lhs* g33db@rhs* g33dc@b g33dd@b*) (g2e6c@bless ((letrec ((g33e2@f (lambda (g33e4@lhs* g33e5@rhs*) (if (null? g33e4@lhs*) (cons 'begin (cons g33dc@b g33dd@b*)) ((lambda (g33e8@t) ((lambda (g33ea@ls/false) (if g33ea@ls/false (apply (lambda (g33ec@x*) (begin (g33cd@check g33ec@x*) (list 'call-with-values (list 'lambda '() (car g33e5@rhs*)) (list 'lambda g33ec@x* (g33e2@f (cdr g33e4@lhs*) (cdr g33e5@rhs*)))))) g33ea@ls/false) ((lambda (g33ee@t) ((lambda (g33f0@ls/false) (if g33f0@ls/false (apply (lambda (g33f2@x* g33f3@x) (begin (g33cd@check (cons g33f3@x g33f2@x*)) (list 'call-with-values (list 'lambda '() (car g33e5@rhs*)) (list 'lambda (append g33f2@x* g33f3@x) (g33e2@f (cdr g33e4@lhs*) (cdr g33e5@rhs*)))))) g33f0@ls/false) ((lambda (g33f6@t) ((lambda (g33f8@ls/false) (if g33f8@ls/false (apply (lambda (g33fa@others) (g2f9f@syntax-violation '#f '"malformed bindings" g33ca@stx g33fa@others)) g33f8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g33f6@t))) (g2eb6@syntax-dispatch g33f6@t 'any))) g33ee@t))) (g2eb6@syntax-dispatch g33ee@t '#(each+ any () any)))) g33e8@t))) (g2eb6@syntax-dispatch g33e8@t 'each-any))) (car g33e4@lhs*)))))) g33e2@f) g33da@lhs* g33db@rhs*))) g33d8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g33d6@t))) (g2eb6@syntax-dispatch g33d6@t '(_ #(each (any any)) any . each-any)))) g33ce@t))) (g2eb6@syntax-dispatch g33ce@t '(_ () any . each-any)))) g33ca@stx))) '#f))) (set! g2e78@trace-lambda-macro (lambda (g3400@stx) ((lambda (g3402@t) ((lambda (g3404@ls/false) (if g3404@ls/false (apply (lambda (g3406@who g3407@fmls g3408@b g3409@b*) (if (g2cb5@valid-bound-ids? g3407@fmls) (g2e6c@bless (list 'make-traced-procedure (list 'quote g3406@who) (cons 'lambda (cons g3407@fmls (cons g3408@b g3409@b*))))) (g2e70@invalid-fmls-error g3400@stx g3407@fmls))) g3404@ls/false) ((lambda (g340e@t) ((lambda (g3410@ls/false) (if g3410@ls/false (apply (lambda (g3412@who g3413@fmls g3414@last g3415@b g3416@b*) (if (g2cb5@valid-bound-ids? (cons g3414@last g3413@fmls)) (g2e6c@bless (list 'make-traced-procedure (list 'quote g3412@who) (cons 'lambda (cons (append g3413@fmls g3414@last) (cons g3415@b g3416@b*))))) (g2e70@invalid-fmls-error g3400@stx (append g3413@fmls g3414@last)))) g3410@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g340e@t))) (g2eb6@syntax-dispatch g340e@t '(_ any #(each+ any () any) any . each-any)))) g3402@t))) (g2eb6@syntax-dispatch g3402@t '(_ any each-any any . each-any)))) g3400@stx))) (set! g2e7a@trace-define-macro (lambda (g341c@stx) ((lambda (g341e@t) ((lambda (g3420@ls/false) (if g3420@ls/false (apply (lambda (g3422@who g3423@fmls g3424@b g3425@b*) (if (g2cb5@valid-bound-ids? g3423@fmls) (g2e6c@bless (list 'define g3422@who (list 'make-traced-procedure (list 'quote g3422@who) (cons 'lambda (cons g3423@fmls (cons g3424@b g3425@b*)))))) (g2e70@invalid-fmls-error g341c@stx g3423@fmls))) g3420@ls/false) ((lambda (g342a@t) ((lambda (g342c@ls/false) (if g342c@ls/false (apply (lambda (g342e@who g342f@fmls g3430@last g3431@b g3432@b*) (if (g2cb5@valid-bound-ids? (cons g3430@last g342f@fmls)) (g2e6c@bless (list 'define g342e@who (list 'make-traced-procedure (list 'quote g342e@who) (cons 'lambda (cons (append g342f@fmls g3430@last) (cons g3431@b g3432@b*)))))) (g2e70@invalid-fmls-error g341c@stx (append g342f@fmls g3430@last)))) g342c@ls/false) ((lambda (g3438@t) ((lambda (g343a@ls/false) (if g343a@ls/false (apply (lambda (g343c@who g343d@expr) (if (g2cab@id? g343c@who) (g2e6c@bless (list 'define g343c@who (list 'let (list (list 'v g343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g2f9f@syntax-violation '#f '"invalid name" g341c@stx))) g343a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3438@t))) (g2eb6@syntax-dispatch g3438@t '(_ any any)))) g342a@t))) (g2eb6@syntax-dispatch g342a@t '(_ (any . #(each+ any () any)) any . each-any)))) g341e@t))) (g2eb6@syntax-dispatch g341e@t '(_ (any . each-any) any . each-any)))) g341c@stx))) (set! g2e7c@trace-define-syntax-macro (lambda (g3440@stx) ((lambda (g3442@t) ((lambda (g3444@ls/false) (if g3444@ls/false (apply (lambda (g3446@who g3447@expr) (if (g2cab@id? g3446@who) (g2e6c@bless (list 'define-syntax g3446@who (list 'make-traced-macro (list 'quote g3446@who) g3447@expr))) (g2f9f@syntax-violation '#f '"invalid name" g3440@stx))) g3444@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3442@t))) (g2eb6@syntax-dispatch g3442@t '(_ any any)))) g3440@stx))) (set! g2e7e@trace-let/rec-syntax (lambda (g344a@who) (lambda (g344c@stx) ((lambda (g344e@t) ((lambda (g3450@ls/false) (if g3450@ls/false (apply (lambda (g3452@lhs* g3453@rhs* g3454@b g3455@b*) (if (g2cb5@valid-bound-ids? g3452@lhs*) ((lambda (g345a@rhs*) (g2e6c@bless (cons g344a@who (cons (map list g3452@lhs* g345a@rhs*) (cons g3454@b g3455@b*))))) (map (lambda (g345c@lhs g345d@rhs) (list 'make-traced-macro (list 'quote g345c@lhs) g345d@rhs)) g3452@lhs* g3453@rhs*)) (g2e70@invalid-fmls-error g344c@stx g3452@lhs*))) g3450@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g344e@t))) (g2eb6@syntax-dispatch g344e@t '(_ #(each (any any)) any . each-any)))) g344c@stx)))) (set! g2e80@trace-let-syntax-macro (g2e7e@trace-let/rec-syntax 'let-syntax)) (set! g2e82@trace-letrec-syntax-macro (g2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! g2e84@guard-macro (lambda (g3460@x) ((lambda (g3463@gen-clauses) (begin (set! g3463@gen-clauses (lambda (g347a@con g347b@outerk g347c@clause*) ((lambda (g3481@f g3483@f*) (begin (set! g3481@f (lambda (g34ba@x g34bb@k) ((lambda (g34be@t) ((lambda (g34c0@ls/false) (if g34c0@ls/false (apply (lambda (g34c2@e g34c3@p) ((lambda (g34c6@t) (list 'let (list (list g34c6@t g34c2@e)) (list 'if g34c6@t (list g34c3@p g34c6@t) g34bb@k))) (gensym))) g34c0@ls/false) ((lambda (g34c8@t) ((lambda (g34ca@ls/false) (if g34ca@ls/false (apply (lambda (g34cc@e) ((lambda (g34ce@t) (list 'let (list (list g34ce@t g34cc@e)) (list 'if g34ce@t g34ce@t g34bb@k))) (gensym))) g34ca@ls/false) ((lambda (g34d0@t) ((lambda (g34d2@ls/false) (if g34d2@ls/false (apply (lambda (g34d4@e g34d5@v g34d6@v*) (list 'if g34d4@e (cons 'begin (cons g34d5@v g34d6@v*)) g34bb@k)) g34d2@ls/false) ((lambda (g34da@t) ((lambda (g34dc@ls/false) (if g34dc@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid guard clause" g34ba@x)) g34dc@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g34da@t))) (g2eb6@syntax-dispatch g34da@t '_))) g34d0@t))) (g2eb6@syntax-dispatch g34d0@t '(any any . each-any)))) g34c8@t))) (g2eb6@syntax-dispatch g34c8@t '(any)))) g34be@t))) (g2eb6@syntax-dispatch g34be@t '(any #(scheme-id =>) any)))) g34ba@x))) (set! g3483@f* (lambda (g3490@x*) ((lambda (g3492@t) ((lambda (g3494@ls/false) (if g3494@ls/false (apply (lambda () ((lambda (g3496@g) (values (list g3496@g (list 'lambda '() (list 'raise-continuable g347a@con))) g3496@g)) (gensym))) g3494@ls/false) ((lambda (g3498@t) ((lambda (g349a@ls/false) (if g349a@ls/false (apply (lambda (g349c@e g349d@e*) (values (cons 'begin (cons g349c@e g349d@e*)) '#f)) g349a@ls/false) ((lambda (g34a0@t) ((lambda (g34a2@ls/false) (if g34a2@ls/false (apply (lambda (g34a4@cls g34a5@cls*) (call-with-values (lambda () (g3483@f* g34a5@cls*)) (lambda (g34ac@g34a9 g34ad@g34ab) ((lambda (g34b0@g g34b1@e) (values (g3481@f g34a4@cls g34b1@e) g34b0@g)) g34ad@g34ab g34ac@g34a9)))) g34a2@ls/false) ((lambda (g34b4@t) ((lambda (g34b6@ls/false) (if g34b6@ls/false (apply (lambda (g34b8@others) (g2f9f@syntax-violation '#f '"invalid guard clause" g34b8@others)) g34b6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g34b4@t))) (g2eb6@syntax-dispatch g34b4@t 'any))) g34a0@t))) (g2eb6@syntax-dispatch g34a0@t '(any . any)))) g3498@t))) (g2eb6@syntax-dispatch g3498@t '((#(scheme-id else) any . each-any))))) g3492@t))) (g2eb6@syntax-dispatch g3492@t '()))) g3490@x*))) (call-with-values (lambda () (g3483@f* g347c@clause*)) (lambda (g3488@g3485 g3489@g3487) ((lambda (g348c@raisek g348d@code) (if g348c@raisek (list (list 'call/cc (list 'lambda (list g348c@raisek) (list g347b@outerk (list 'lambda '() g348d@code))))) (list g347b@outerk (list 'lambda '() g348d@code)))) g3489@g3487 g3488@g3485))))) '#f '#f))) ((lambda (g3464@t) ((lambda (g3466@ls/false) (if (and g3466@ls/false (apply (lambda (g3468@con g3469@clause* g346a@b g346b@b*) (g2cab@id? g3468@con)) g3466@ls/false)) (apply (lambda (g3470@con g3471@clause* g3472@b g3473@b*) ((lambda (g3478@outerk) (g2e6c@bless (list (list 'call/cc (list 'lambda (list g3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g3470@con) (g3463@gen-clauses g3470@con g3478@outerk g3471@clause*)) (cons 'lambda (cons '() (cons g3472@b g3473@b*)))))))))) (gensym))) g3466@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3464@t))) (g2eb6@syntax-dispatch g3464@t '(_ (any . each-any) any . each-any)))) g3460@x))) '#f))) (set! g2e86@define-enumeration-macro (lambda (g34de@stx) ((lambda (g34e1@set? g34e3@remove-dups) (begin (set! g34e1@set? (lambda (g34fa@x) (or (null? g34fa@x) (and (not (memq (car g34fa@x) (cdr g34fa@x))) (g34e1@set? (cdr g34fa@x)))))) (set! g34e3@remove-dups (lambda (g34f8@ls) (if (null? g34f8@ls) '() (cons (car g34f8@ls) (g34e3@remove-dups (remq (car g34f8@ls) (cdr g34f8@ls))))))) ((lambda (g34e4@t) ((lambda (g34e6@ls/false) (if (and g34e6@ls/false (apply (lambda (g34e8@name g34e9@id* g34ea@maker) (and (g2cab@id? g34e8@name) (g2cab@id? g34ea@maker) (for-all g2cab@id? g34e9@id*))) g34e6@ls/false)) (apply (lambda (g34ee@name g34ef@id* g34f0@maker) ((lambda (g34f4@name* g34f5@mk) (g2e6c@bless (list 'begin (list 'define g34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote g34f4@name*)))) (list 'define-syntax g34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote g34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax g34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote g34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote g34f4@name*)) (cons 'syntax-violation (cons (list 'quote g34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons g34f5@mk '('(n* ...)))))))))))) (g34e3@remove-dups (g2fa5@syntax->datum g34ef@id*)) (gensym))) g34e6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g34e4@t))) (g2eb6@syntax-dispatch g34e4@t '(_ any each-any any)))) g34de@stx))) '#f '#f))) (set! g2e88@time-macro (lambda (g34fc@stx) ((lambda (g34fe@t) ((lambda (g3500@ls/false) (if g3500@ls/false (apply (lambda (g3502@expr) (g2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() g3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) g3500@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g34fe@t))) (g2eb6@syntax-dispatch g34fe@t '(_ any)))) g34fc@stx))) (set! g2e8a@delay-macro (lambda (g3504@stx) ((lambda (g3506@t) ((lambda (g3508@ls/false) (if g3508@ls/false (apply (lambda (g350a@expr) (g2e6c@bless (list 'make-promise (list 'lambda '() g350a@expr)))) g3508@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3506@t))) (g2eb6@syntax-dispatch g3506@t '(_ any)))) g3504@stx))) (set! g2e8c@assert-macro (lambda (g350c@stx) ((lambda (g350e@t) ((lambda (g3510@ls/false) (if g3510@ls/false (apply (lambda (g3512@expr) ((lambda (g3514@pos) (g2e6c@bless (list 'unless g3512@expr (list 'assertion-error (list 'quote g3512@expr) (list 'quote g3514@pos))))) (or (g2f97@expression-position g350c@stx) (g2f97@expression-position g3512@expr)))) g3510@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g350e@t))) (g2eb6@syntax-dispatch g350e@t '(_ any)))) g350c@stx))) (set! g2e8e@endianness-macro (lambda (g3516@stx) ((lambda (g3518@t) ((lambda (g351a@ls/false) (if g351a@ls/false (apply (lambda (g351c@e) ((lambda (g351e@t) (if (memv g351e@t '(little)) (g2e6c@bless ''little) (if (memv g351e@t '(big)) (g2e6c@bless ''big) (g2f9f@syntax-violation '#f '"endianness must be big or little" g3516@stx)))) (g2fa5@syntax->datum g351c@e))) g351a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3518@t))) (g2eb6@syntax-dispatch g3518@t '(_ any)))) g3516@stx))) (set! g2e90@identifier-syntax-macro (lambda (g3520@stx) ((lambda (g3522@t) ((lambda (g3524@ls/false) (if g3524@ls/false (apply (lambda (g3526@expr) (g2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g3526@expr) '((syntax (e* ...)))))))))) g3524@ls/false) ((lambda (g3528@t) ((lambda (g352a@ls/false) (if (and g352a@ls/false (apply (lambda (g352c@id1 g352d@expr1 g352e@id2 g352f@expr2 g3530@expr3) (and (g2cab@id? g352c@id1) (g2cab@id? g352e@id2) (g2cab@id? g352f@expr2))) g352a@ls/false)) (apply (lambda (g3536@id1 g3537@expr1 g3538@id2 g3539@expr2 g353a@expr3) (g2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g3537@expr1)) (list (list 'set! 'id g3539@expr2) (list 'syntax g353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g3537@expr1 '(e* ...))))))))) g352a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3528@t))) (g2eb6@syntax-dispatch g3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) g3522@t))) (g2eb6@syntax-dispatch g3522@t '(_ any)))) g3520@stx))) (set! g2e92@do-macro (lambda (g3540@stx) ((lambda (g3543@bind) (begin (set! g3543@bind (lambda (g355a@x) ((lambda (g355c@t) ((lambda (g355e@ls/false) (if g355e@ls/false (apply (lambda (g3560@x g3561@init) (list g3560@x g3561@init g3560@x)) g355e@ls/false) ((lambda (g3564@t) ((lambda (g3566@ls/false) (if g3566@ls/false (apply (lambda (g3568@x g3569@init g356a@step) (list g3568@x g3569@init g356a@step)) g3566@ls/false) ((lambda (g356e@t) ((lambda (g3570@ls/false) (if g3570@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid binding" g3540@stx)) g3570@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g356e@t))) (g2eb6@syntax-dispatch g356e@t '_))) g3564@t))) (g2eb6@syntax-dispatch g3564@t '(any any any)))) g355c@t))) (g2eb6@syntax-dispatch g355c@t '(any any)))) g355a@x))) ((lambda (g3544@t) ((lambda (g3546@ls/false) (if g3546@ls/false (apply (lambda (g3548@binding* g3549@test g354a@expr* g354b@command*) ((lambda (g3550@t) ((lambda (g3552@ls/false) (if g3552@ls/false (apply (lambda (g3554@x* g3555@init* g3556@step*) (if (g2cb5@valid-bound-ids? g3554@x*) (g2e6c@bless (list 'letrec (list (list 'loop (list 'lambda g3554@x* (list 'if g3549@test (cons 'begin (cons '(if #f #f) g354a@expr*)) (cons 'begin (append g354b@command* (list (cons 'loop g3556@step*)))))))) (cons 'loop g3555@init*))) (g2f9f@syntax-violation '#f '"invalid bindings" g3540@stx))) g3552@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3550@t))) (g2eb6@syntax-dispatch g3550@t '#(each (any any any))))) (map g3543@bind g3548@binding*))) g3546@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3544@t))) (g2eb6@syntax-dispatch g3544@t '(_ each-any (any . each-any) . each-any)))) g3540@stx))) '#f))) (set! g2e94@let*-macro (lambda (g3572@stx) ((lambda (g3574@t) ((lambda (g3576@ls/false) (if (and g3576@ls/false (apply (lambda (g3578@lhs* g3579@rhs* g357a@b g357b@b*) (for-all g2cab@id? g3578@lhs*)) g3576@ls/false)) (apply (lambda (g3580@lhs* g3581@rhs* g3582@b g3583@b*) (g2e6c@bless ((letrec ((g3588@f (lambda (g358a@x*) (if (null? g358a@x*) (cons 'let (cons '() (cons g3582@b g3583@b*))) (list 'let (list (car g358a@x*)) (g3588@f (cdr g358a@x*))))))) g3588@f) (map list g3580@lhs* g3581@rhs*)))) g3576@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3574@t))) (g2eb6@syntax-dispatch g3574@t '(_ #(each (any any)) any . each-any)))) g3572@stx))) (set! g2e96@or-macro (lambda (g358c@stx) ((lambda (g358e@t) ((lambda (g3590@ls/false) (if g3590@ls/false (apply (lambda () '#f) g3590@ls/false) ((lambda (g3592@t) ((lambda (g3594@ls/false) (if g3594@ls/false (apply (lambda (g3596@e g3597@e*) (g2e6c@bless ((letrec ((g359a@f (lambda (g359c@e g359d@e*) (if (null? g359d@e*) (list 'begin '#f g359c@e) (list 'let (list (list 't g359c@e)) (list 'if 't 't (g359a@f (car g359d@e*) (cdr g359d@e*)))))))) g359a@f) g3596@e g3597@e*))) g3594@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3592@t))) (g2eb6@syntax-dispatch g3592@t '(_ any . each-any)))) g358e@t))) (g2eb6@syntax-dispatch g358e@t '(_)))) g358c@stx))) (set! g2e98@and-macro (lambda (g35a0@stx) ((lambda (g35a2@t) ((lambda (g35a4@ls/false) (if g35a4@ls/false (apply (lambda () '#t) g35a4@ls/false) ((lambda (g35a6@t) ((lambda (g35a8@ls/false) (if g35a8@ls/false (apply (lambda (g35aa@e g35ab@e*) (g2e6c@bless ((letrec ((g35ae@f (lambda (g35b0@e g35b1@e*) (if (null? g35b1@e*) (list 'begin '#f g35b0@e) (cons 'if (cons g35b0@e (cons (g35ae@f (car g35b1@e*) (cdr g35b1@e*)) '(#f)))))))) g35ae@f) g35aa@e g35ab@e*))) g35a8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g35a6@t))) (g2eb6@syntax-dispatch g35a6@t '(_ any . each-any)))) g35a2@t))) (g2eb6@syntax-dispatch g35a2@t '(_)))) g35a0@stx))) (set! g2e9a@cond-macro (lambda (g35b4@stx) ((lambda (g35b6@t) ((lambda (g35b8@ls/false) (if g35b8@ls/false (apply (lambda (g35ba@cls g35bb@cls*) (g2e6c@bless ((letrec ((g35be@f (lambda (g35c0@cls g35c1@cls*) (if (null? g35c1@cls*) ((lambda (g35c4@t) ((lambda (g35c6@ls/false) (if g35c6@ls/false (apply (lambda (g35c8@e g35c9@e*) (cons 'begin (cons g35c8@e g35c9@e*))) g35c6@ls/false) ((lambda (g35cc@t) ((lambda (g35ce@ls/false) (if g35ce@ls/false (apply (lambda (g35d0@e g35d1@p) (list 'let (list (list 't g35d0@e)) (list 'if 't (cons g35d1@p '(t))))) g35ce@ls/false) ((lambda (g35d4@t) ((lambda (g35d6@ls/false) (if g35d6@ls/false (apply (lambda (g35d8@e) (cons 'or (cons g35d8@e '((if #f #f))))) g35d6@ls/false) ((lambda (g35da@t) ((lambda (g35dc@ls/false) (if g35dc@ls/false (apply (lambda (g35de@e g35df@e*) (list 'if g35de@e (cons 'begin g35df@e*))) g35dc@ls/false) ((lambda (g35e2@t) ((lambda (g35e4@ls/false) (if g35e4@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid last clause" g35b4@stx)) g35e4@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g35e2@t))) (g2eb6@syntax-dispatch g35e2@t '_))) g35da@t))) (g2eb6@syntax-dispatch g35da@t '(any . each-any)))) g35d4@t))) (g2eb6@syntax-dispatch g35d4@t '(any)))) g35cc@t))) (g2eb6@syntax-dispatch g35cc@t '(any #(scheme-id =>) any)))) g35c4@t))) (g2eb6@syntax-dispatch g35c4@t '(#(scheme-id else) any . each-any)))) g35c0@cls) ((lambda (g35e6@t) ((lambda (g35e8@ls/false) (if g35e8@ls/false (apply (lambda (g35ea@e g35eb@e*) (g2f9f@syntax-violation '#f '"incorrect position of keyword else" g35b4@stx)) g35e8@ls/false) ((lambda (g35ee@t) ((lambda (g35f0@ls/false) (if g35f0@ls/false (apply (lambda (g35f2@e g35f3@p) (list 'let (list (list 't g35f2@e)) (list 'if 't (cons g35f3@p '(t)) (g35be@f (car g35c1@cls*) (cdr g35c1@cls*))))) g35f0@ls/false) ((lambda (g35f6@t) ((lambda (g35f8@ls/false) (if g35f8@ls/false (apply (lambda (g35fa@e) (list 'or g35fa@e (g35be@f (car g35c1@cls*) (cdr g35c1@cls*)))) g35f8@ls/false) ((lambda (g35fc@t) ((lambda (g35fe@ls/false) (if g35fe@ls/false (apply (lambda (g3600@e g3601@e*) (list 'if g3600@e (cons 'begin g3601@e*) (g35be@f (car g35c1@cls*) (cdr g35c1@cls*)))) g35fe@ls/false) ((lambda (g3604@t) ((lambda (g3606@ls/false) (if g3606@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid last clause" g35b4@stx)) g3606@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3604@t))) (g2eb6@syntax-dispatch g3604@t '_))) g35fc@t))) (g2eb6@syntax-dispatch g35fc@t '(any . each-any)))) g35f6@t))) (g2eb6@syntax-dispatch g35f6@t '(any)))) g35ee@t))) (g2eb6@syntax-dispatch g35ee@t '(any #(scheme-id =>) any)))) g35e6@t))) (g2eb6@syntax-dispatch g35e6@t '(#(scheme-id else) any . each-any)))) g35c0@cls))))) g35be@f) g35ba@cls g35bb@cls*))) g35b8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g35b6@t))) (g2eb6@syntax-dispatch g35b6@t '(_ any . each-any)))) g35b4@stx))) (set! g2e9c@do-include (lambda (g3608@stx g3609@id g360a@filename) ((lambda (g360e@filename) (begin (if (not (and (string? g360e@filename) (g2cab@id? g3609@id))) (g2f9f@syntax-violation '#f '"invalid syntax" g3608@stx) (void)) (cons (g2e6c@bless 'begin) (with-input-from-file g360e@filename (lambda () ((letrec ((g3610@f (lambda (g3612@ls) ((lambda (g3614@x) (if (eof-object? g3614@x) (reverse g3612@ls) (g3610@f (cons (g2c89@datum->stx g3609@id g3614@x) g3612@ls)))) (g2848@g2765@read-annotated))))) g3610@f) '())))))) (g2cc1@stx->datum g360a@filename)))) (set! g2e9e@include-macro (lambda (g3616@e) ((lambda (g3618@t) ((lambda (g361a@ls/false) (if g361a@ls/false (apply (lambda (g361c@id g361d@filename) (g2e9c@do-include g3616@e g361c@id g361d@filename)) g361a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3618@t))) (g2eb6@syntax-dispatch g3618@t '(any any)))) g3616@e))) (set! g2ea0@include-into-macro (lambda (g3620@e) ((lambda (g3622@t) ((lambda (g3624@ls/false) (if g3624@ls/false (apply (lambda (g3626@id g3627@filename) (g2e9c@do-include g3620@e g3626@id g3627@filename)) g3624@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3622@t))) (g2eb6@syntax-dispatch g3622@t '(_ any any)))) g3620@e))) (set! g2ea2@syntax-rules-macro (lambda (g362a@e) ((lambda (g362c@t) ((lambda (g362e@ls/false) (if g362e@ls/false (apply (lambda (g3630@lits g3631@pat* g3632@tmp*) (begin (g2ebc@verify-literals g3630@lits g362a@e) (g2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g3630@lits (map (lambda (g3636@pat g3637@tmp) ((lambda (g363a@t) ((lambda (g363c@ls/false) (if g363c@ls/false (apply (lambda (g363e@rest) (list (cons 'g g363e@rest) (list 'syntax g3637@tmp))) g363c@ls/false) ((lambda (g3640@t) ((lambda (g3642@ls/false) (if g3642@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid syntax-rules pattern" g362a@e g3636@pat)) g3642@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3640@t))) (g2eb6@syntax-dispatch g3640@t '_))) g363a@t))) (g2eb6@syntax-dispatch g363a@t '(_ . any)))) g3636@pat)) g3631@pat* g3632@tmp*)))))))) g362e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g362c@t))) (g2eb6@syntax-dispatch g362c@t '(_ each-any . #(each (any any)))))) g362a@e))) (set! g2ea4@quasiquote-macro ((lambda () ((lambda (g3645@datum g3661@quasicons* g3663@quasicons g3665@quasiappend g3667@quasivector g3669@vquasi g366b@quasi) (begin (set! g3645@datum (lambda (g3746@x) (list (g2e40@scheme-stx 'quote) (g2c93@mkstx g3746@x '() '() '())))) (set! g3661@quasicons* (lambda (g373e@x g373f@y) ((letrec ((g3742@f (lambda (g3744@x) (if (null? g3744@x) g373f@y (g3663@quasicons (car g3744@x) (g3742@f (cdr g3744@x))))))) g3742@f) g373e@x))) (set! g3663@quasicons (lambda (g3718@x g3719@y) ((lambda (g371c@t) ((lambda (g371e@ls/false) (if g371e@ls/false (apply (lambda (g3720@dy) ((lambda (g3722@t) ((lambda (g3724@ls/false) (if g3724@ls/false (apply (lambda (g3726@dx) (list (g2e40@scheme-stx 'quote) (cons g3726@dx g3720@dy))) g3724@ls/false) ((lambda (g3728@t) ((lambda (g372a@ls/false) (if g372a@ls/false (apply (lambda () ((lambda (g372c@t) ((lambda (g372e@ls/false) (if g372e@ls/false (apply (lambda () (list (g2e40@scheme-stx 'list) g3718@x)) g372e@ls/false) ((lambda (g3730@t) ((lambda (g3732@ls/false) (if g3732@ls/false (apply (lambda () (list (g2e40@scheme-stx 'cons) g3718@x g3719@y)) g3732@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3730@t))) (g2eb6@syntax-dispatch g3730@t '_))) g372c@t))) (g2eb6@syntax-dispatch g372c@t '()))) g3720@dy)) g372a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3728@t))) (g2eb6@syntax-dispatch g3728@t '_))) g3722@t))) (g2eb6@syntax-dispatch g3722@t '(#(scheme-id quote) any)))) g3718@x)) g371e@ls/false) ((lambda (g3734@t) ((lambda (g3736@ls/false) (if g3736@ls/false (apply (lambda (g3738@stuff) (cons* (g2e40@scheme-stx 'list) g3718@x g3738@stuff)) g3736@ls/false) ((lambda (g373a@t) ((lambda (g373c@ls/false) (if g373c@ls/false (apply (lambda () (list (g2e40@scheme-stx 'cons) g3718@x g3719@y)) g373c@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g373a@t))) (g2eb6@syntax-dispatch g373a@t '_))) g3734@t))) (g2eb6@syntax-dispatch g3734@t '(#(scheme-id list) . each-any)))) g371c@t))) (g2eb6@syntax-dispatch g371c@t '(#(scheme-id quote) any)))) g3719@y))) (set! g3665@quasiappend (lambda (g36fe@x g36ff@y) ((lambda (g3702@ls) (if (null? g3702@ls) (list (g2e40@scheme-stx 'quote) '()) (if (null? (cdr g3702@ls)) (car g3702@ls) (cons* (g2e40@scheme-stx 'append) g3702@ls)))) ((letrec ((g3704@f (lambda (g3706@x) (if (null? g3706@x) ((lambda (g3708@t) ((lambda (g370a@ls/false) (if g370a@ls/false (apply (lambda () '()) g370a@ls/false) ((lambda (g370c@t) ((lambda (g370e@ls/false) (if g370e@ls/false (apply (lambda () (list g36ff@y)) g370e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g370c@t))) (g2eb6@syntax-dispatch g370c@t '_))) g3708@t))) (g2eb6@syntax-dispatch g3708@t '(#(scheme-id quote) ())))) g36ff@y) ((lambda (g3710@t) ((lambda (g3712@ls/false) (if g3712@ls/false (apply (lambda () (g3704@f (cdr g3706@x))) g3712@ls/false) ((lambda (g3714@t) ((lambda (g3716@ls/false) (if g3716@ls/false (apply (lambda () (cons (car g3706@x) (g3704@f (cdr g3706@x)))) g3716@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3714@t))) (g2eb6@syntax-dispatch g3714@t '_))) g3710@t))) (g2eb6@syntax-dispatch g3710@t '(#(scheme-id quote) ())))) (car g3706@x)))))) g3704@f) g36fe@x)))) (set! g3667@quasivector (lambda (g36cc@x) ((lambda (g36ce@pat-x) ((lambda (g36d0@t) ((lambda (g36d2@ls/false) (if g36d2@ls/false (apply (lambda (g36d4@x*) (list (g2e40@scheme-stx 'quote) (list->vector g36d4@x*))) g36d2@ls/false) ((lambda (g36d6@t) ((lambda (g36d8@ls/false) (if g36d8@ls/false (apply (lambda () ((letrec ((g36da@f (lambda (g36dc@x g36dd@k) ((lambda (g36e0@t) ((lambda (g36e2@ls/false) (if g36e2@ls/false (apply (lambda (g36e4@x*) (g36dd@k (map (lambda (g36e6@x) (list (g2e40@scheme-stx 'quote) g36e6@x)) g36e4@x*))) g36e2@ls/false) ((lambda (g36e8@t) ((lambda (g36ea@ls/false) (if g36ea@ls/false (apply (lambda (g36ec@x*) (g36dd@k g36ec@x*)) g36ea@ls/false) ((lambda (g36ee@t) ((lambda (g36f0@ls/false) (if g36f0@ls/false (apply (lambda (g36f2@x g36f3@y) (g36da@f g36f3@y (lambda (g36f6@ls) (g36dd@k (cons g36f2@x g36f6@ls))))) g36f0@ls/false) ((lambda (g36f8@t) ((lambda (g36fa@ls/false) (if g36fa@ls/false (apply (lambda () (list (g2e40@scheme-stx 'list->vector) g36ce@pat-x)) g36fa@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g36f8@t))) (g2eb6@syntax-dispatch g36f8@t '_))) g36ee@t))) (g2eb6@syntax-dispatch g36ee@t '(#(scheme-id cons) any any)))) g36e8@t))) (g2eb6@syntax-dispatch g36e8@t '(#(scheme-id list) . each-any)))) g36e0@t))) (g2eb6@syntax-dispatch g36e0@t '(#(scheme-id quote) each-any)))) g36dc@x)))) g36da@f) g36cc@x (lambda (g36fc@ls) (cons* (g2e40@scheme-stx 'vector) g36fc@ls)))) g36d8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g36d6@t))) (g2eb6@syntax-dispatch g36d6@t '_))) g36d0@t))) (g2eb6@syntax-dispatch g36d0@t '(#(scheme-id quote) each-any)))) g36ce@pat-x)) g36cc@x))) (set! g3669@vquasi (lambda (g36aa@p g36ab@lev) ((lambda (g36ae@t) ((lambda (g36b0@ls/false) (if g36b0@ls/false (apply (lambda (g36b2@p g36b3@q) ((lambda (g36b6@t) ((lambda (g36b8@ls/false) (if g36b8@ls/false (apply (lambda (g36ba@p) (if (= g36ab@lev '0) (g3661@quasicons* g36ba@p (g3669@vquasi g36b3@q g36ab@lev)) (g3663@quasicons (g3663@quasicons (g3645@datum 'unquote) (g366b@quasi g36ba@p (- g36ab@lev '1))) (g3669@vquasi g36b3@q g36ab@lev)))) g36b8@ls/false) ((lambda (g36bc@t) ((lambda (g36be@ls/false) (if g36be@ls/false (apply (lambda (g36c0@p) (if (= g36ab@lev '0) (g3665@quasiappend g36c0@p (g3669@vquasi g36b3@q g36ab@lev)) (g3663@quasicons (g3663@quasicons (g3645@datum 'unquote-splicing) (g366b@quasi g36c0@p (- g36ab@lev '1))) (g3669@vquasi g36b3@q g36ab@lev)))) g36be@ls/false) ((lambda (g36c2@t) ((lambda (g36c4@ls/false) (if g36c4@ls/false (apply (lambda (g36c6@p) (g3663@quasicons (g366b@quasi g36c6@p g36ab@lev) (g3669@vquasi g36b3@q g36ab@lev))) g36c4@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g36c2@t))) (g2eb6@syntax-dispatch g36c2@t 'any))) g36bc@t))) (g2eb6@syntax-dispatch g36bc@t '(#(scheme-id unquote-splicing) . each-any)))) g36b6@t))) (g2eb6@syntax-dispatch g36b6@t '(#(scheme-id unquote) . each-any)))) g36b2@p)) g36b0@ls/false) ((lambda (g36c8@t) ((lambda (g36ca@ls/false) (if g36ca@ls/false (apply (lambda () (list (g2e40@scheme-stx 'quote) '())) g36ca@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g36c8@t))) (g2eb6@syntax-dispatch g36c8@t '()))) g36ae@t))) (g2eb6@syntax-dispatch g36ae@t '(any . any)))) g36aa@p))) (set! g366b@quasi (lambda (g3674@p g3675@lev) ((lambda (g3678@t) ((lambda (g367a@ls/false) (if g367a@ls/false (apply (lambda (g367c@p) (if (= g3675@lev '0) g367c@p (g3663@quasicons (g3645@datum 'unquote) (g366b@quasi (list g367c@p) (- g3675@lev '1))))) g367a@ls/false) ((lambda (g367e@t) ((lambda (g3680@ls/false) (if g3680@ls/false (apply (lambda (g3682@p g3683@q) (if (= g3675@lev '0) (g3661@quasicons* g3682@p (g366b@quasi g3683@q g3675@lev)) (g3663@quasicons (g3663@quasicons (g3645@datum 'unquote) (g366b@quasi g3682@p (- g3675@lev '1))) (g366b@quasi g3683@q g3675@lev)))) g3680@ls/false) ((lambda (g3686@t) ((lambda (g3688@ls/false) (if g3688@ls/false (apply (lambda (g368a@p g368b@q) (if (= g3675@lev '0) (g3665@quasiappend g368a@p (g366b@quasi g368b@q g3675@lev)) (g3663@quasicons (g3663@quasicons (g3645@datum 'unquote-splicing) (g366b@quasi g368a@p (- g3675@lev '1))) (g366b@quasi g368b@q g3675@lev)))) g3688@ls/false) ((lambda (g368e@t) ((lambda (g3690@ls/false) (if g3690@ls/false (apply (lambda (g3692@p) (g3663@quasicons (g3645@datum 'quasiquote) (g366b@quasi (list g3692@p) (+ g3675@lev '1)))) g3690@ls/false) ((lambda (g3694@t) ((lambda (g3696@ls/false) (if g3696@ls/false (apply (lambda (g3698@p g3699@q) (g3663@quasicons (g366b@quasi g3698@p g3675@lev) (g366b@quasi g3699@q g3675@lev))) g3696@ls/false) ((lambda (g369c@t) ((lambda (g369e@ls/false) (if (and g369e@ls/false (apply (lambda (g36a0@x) (not (g2c73@stx? g36a0@x))) g369e@ls/false)) (apply (lambda (g36a2@x) (g3667@quasivector (g3669@vquasi g36a2@x g3675@lev))) g369e@ls/false) ((lambda (g36a4@t) ((lambda (g36a6@ls/false) (if g36a6@ls/false (apply (lambda (g36a8@p) (list (g2e40@scheme-stx 'quote) g36a8@p)) g36a6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g36a4@t))) (g2eb6@syntax-dispatch g36a4@t 'any))) g369c@t))) (g2eb6@syntax-dispatch g369c@t '#(vector each-any)))) g3694@t))) (g2eb6@syntax-dispatch g3694@t '(any . any)))) g368e@t))) (g2eb6@syntax-dispatch g368e@t '(#(scheme-id quasiquote) any)))) g3686@t))) (g2eb6@syntax-dispatch g3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) g367e@t))) (g2eb6@syntax-dispatch g367e@t '((#(scheme-id unquote) . each-any) . any)))) g3678@t))) (g2eb6@syntax-dispatch g3678@t '(#(scheme-id unquote) any)))) g3674@p))) (lambda (g366c@x) ((lambda (g366e@t) ((lambda (g3670@ls/false) (if g3670@ls/false (apply (lambda (g3672@e) (g366b@quasi g3672@e '0)) g3670@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g366e@t))) (g2eb6@syntax-dispatch g366e@t '(_ any)))) g366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! g2ea6@quasisyntax-macro ((lambda () ((lambda (g3749@quasi) (begin (set! g3749@quasi (lambda (g3764@p g3765@lev) ((lambda (g3768@t) ((lambda (g376a@ls/false) (if g376a@ls/false (apply (lambda (g376c@p) (if (= g3765@lev '0) ((lambda (g376e@g) (values (list g376e@g) (list g376c@p) g376e@g)) (gensym)) (call-with-values (lambda () (g3749@quasi g376c@p (- g3765@lev '1))) (lambda (g3776@g3771 g3777@g3773 g3778@g3775) ((lambda (g377c@p g377d@rhs* g377e@lhs*) (values g377e@lhs* g377d@rhs* (list 'unsyntax g377c@p))) g3778@g3775 g3777@g3773 g3776@g3771))))) g376a@ls/false) ((lambda (g3782@t) ((lambda (g3784@ls/false) (if (and g3784@ls/false (apply (lambda () (= g3765@lev '0)) g3784@ls/false)) (apply (lambda () (g2f9f@syntax-violation '#f '"incorrect use of unsyntax" g3764@p)) g3784@ls/false) ((lambda (g3786@t) ((lambda (g3788@ls/false) (if g3788@ls/false (apply (lambda (g378a@p* g378b@q) (call-with-values (lambda () (g3749@quasi g378b@q g3765@lev)) (lambda (g3794@g378f g3795@g3791 g3796@g3793) ((lambda (g379a@q g379b@rhs* g379c@lhs*) (if (= g3765@lev '0) ((lambda (g37a0@g*) (values (append g37a0@g* g379c@lhs*) (append g378a@p* g379b@rhs*) (append g37a0@g* g379a@q))) (map (lambda (g37a2@x) (gensym)) g378a@p*)) (call-with-values (lambda () (g3749@quasi g378a@p* (- g3765@lev '1))) (lambda (g37aa@g37a5 g37ab@g37a7 g37ac@g37a9) ((lambda (g37b0@p* g37b1@rhs2* g37b2@lhs2*) (values (append g37b2@lhs2* g379c@lhs*) (append g37b1@rhs2* g379b@rhs*) (cons (cons 'unsyntax g37b0@p*) g379a@q))) g37ac@g37a9 g37ab@g37a7 g37aa@g37a5))))) g3796@g3793 g3795@g3791 g3794@g378f)))) g3788@ls/false) ((lambda (g37b6@t) ((lambda (g37b8@ls/false) (if g37b8@ls/false (apply (lambda (g37ba@p* g37bb@q) (call-with-values (lambda () (g3749@quasi g37bb@q g3765@lev)) (lambda (g37c4@g37bf g37c5@g37c1 g37c6@g37c3) ((lambda (g37ca@q g37cb@rhs* g37cc@lhs*) (if (= g3765@lev '0) ((lambda (g37d0@g*) (values (append (map (lambda (g37d2@g) (cons g37d2@g '(...))) g37d0@g*) g37cc@lhs*) (append g37ba@p* g37cb@rhs*) (append (apply append (map (lambda (g37d4@g) (cons g37d4@g '(...))) g37d0@g*)) g37ca@q))) (map (lambda (g37d6@x) (gensym)) g37ba@p*)) (call-with-values (lambda () (g3749@quasi g37ba@p* (- g3765@lev '1))) (lambda (g37de@g37d9 g37df@g37db g37e0@g37dd) ((lambda (g37e4@p* g37e5@rhs2* g37e6@lhs2*) (values (append g37e6@lhs2* g37cc@lhs*) (append g37e5@rhs2* g37cb@rhs*) (cons (cons 'unsyntax-splicing g37e4@p*) g37ca@q))) g37e0@g37dd g37df@g37db g37de@g37d9))))) g37c6@g37c3 g37c5@g37c1 g37c4@g37bf)))) g37b8@ls/false) ((lambda (g37ea@t) ((lambda (g37ec@ls/false) (if (and g37ec@ls/false (apply (lambda () (= g3765@lev '0)) g37ec@ls/false)) (apply (lambda () (g2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" g3764@p)) g37ec@ls/false) ((lambda (g37ee@t) ((lambda (g37f0@ls/false) (if g37f0@ls/false (apply (lambda (g37f2@p) (call-with-values (lambda () (g3749@quasi g37f2@p (+ g3765@lev '1))) (lambda (g37fa@g37f5 g37fb@g37f7 g37fc@g37f9) ((lambda (g3800@p g3801@rhs* g3802@lhs*) (values g3802@lhs* g3801@rhs* (list 'quasisyntax g3800@p))) g37fc@g37f9 g37fb@g37f7 g37fa@g37f5)))) g37f0@ls/false) ((lambda (g3806@t) ((lambda (g3808@ls/false) (if g3808@ls/false (apply (lambda (g380a@p g380b@q) (call-with-values (lambda () (g3749@quasi g380a@p g3765@lev)) (lambda (g381a@g380f g381b@g3811 g381c@g3813) (call-with-values (lambda () (g3749@quasi g380b@q g3765@lev)) (lambda (g3820@g3815 g3821@g3817 g3822@g3819) ((lambda (g3826@q g3827@rhs2* g3828@lhs2* g3829@p g382a@rhs* g382b@lhs*) (values (append g3828@lhs2* g382b@lhs*) (append g3827@rhs2* g382a@rhs*) (cons g3829@p g3826@q))) g3822@g3819 g3821@g3817 g3820@g3815 g381c@g3813 g381b@g3811 g381a@g380f)))))) g3808@ls/false) ((lambda (g3832@t) ((lambda (g3834@ls/false) (if g3834@ls/false (apply (lambda (g3836@x*) (call-with-values (lambda () (g3749@quasi g3836@x* g3765@lev)) (lambda (g383e@g3839 g383f@g383b g3840@g383d) ((lambda (g3844@x* g3845@rhs* g3846@lhs*) (values g3846@lhs* g3845@rhs* (list->vector g3844@x*))) g3840@g383d g383f@g383b g383e@g3839)))) g3834@ls/false) ((lambda (g384a@t) ((lambda (g384c@ls/false) (if g384c@ls/false (apply (lambda () (values '() '() g3764@p)) g384c@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g384a@t))) (g2eb6@syntax-dispatch g384a@t '_))) g3832@t))) (g2eb6@syntax-dispatch g3832@t '#(vector each-any)))) g3806@t))) (g2eb6@syntax-dispatch g3806@t '(any . any)))) g37ee@t))) (g2eb6@syntax-dispatch g37ee@t '(#(scheme-id quasisyntax) any)))) g37ea@t))) (g2eb6@syntax-dispatch g37ea@t '#(scheme-id unsyntax-splicing)))) g37b6@t))) (g2eb6@syntax-dispatch g37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) g3786@t))) (g2eb6@syntax-dispatch g3786@t '((#(scheme-id unsyntax) . each-any) . any)))) g3782@t))) (g2eb6@syntax-dispatch g3782@t '#(scheme-id unsyntax)))) g3768@t))) (g2eb6@syntax-dispatch g3768@t '(#(scheme-id unsyntax) any)))) g3764@p))) (lambda (g374a@x) ((lambda (g374c@t) ((lambda (g374e@ls/false) (if g374e@ls/false (apply (lambda (g3750@e) (call-with-values (lambda () (g3749@quasi g3750@e '0)) (lambda (g3758@g3753 g3759@g3755 g375a@g3757) ((lambda (g375e@v g375f@rhs* g3760@lhs*) (g2e6c@bless (list 'syntax-case (cons 'list g375f@rhs*) '() (list g3760@lhs* (list 'syntax g375e@v))))) g375a@g3757 g3759@g3755 g3758@g3753)))) g374e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g374c@t))) (g2eb6@syntax-dispatch g374c@t '(_ any)))) g374a@x)))) '#f)))) (set! g2ea8@define-struct-macro (lambda (g384e@stx) (g2f9f@syntax-violation '#f '"define-struct not supported" g384e@stx))) (set! g2eaa@define-record-type-macro (lambda (g3850@x) ((lambda (g3853@id g3855@get-record-name g3857@get-record-constructor-name g3859@get-record-predicate-name g385b@get-clause g385d@foo-rtd-code g385f@parent-rtd-code g3861@parent-rcd-code g3863@foo-rcd-code g3865@get-protocol-code g3867@get-fields g3869@get-mutator-indices g386b@get-mutators g386d@get-accessors g386f@enumerate g3871@do-define-record g3873@verify-clauses) (begin (set! g3853@id (lambda (g3a46@ctxt . g3a48@str*) (g2fa3@datum->syntax g3a46@ctxt (string->symbol (apply string-append (map (lambda (g3a4a@x) (if (symbol? g3a4a@x) (symbol->string g3a4a@x) (if (string? g3a4a@x) g3a4a@x (assertion-violation 'define-record-type '"BUG")))) g3a48@str*)))))) (set! g3855@get-record-name (lambda (g3a34@spec) ((lambda (g3a36@t) ((lambda (g3a38@ls/false) (if g3a38@ls/false (apply (lambda (g3a3a@foo g3a3b@make-foo g3a3c@foo?) g3a3a@foo) g3a38@ls/false) ((lambda (g3a40@t) ((lambda (g3a42@ls/false) (if g3a42@ls/false (apply (lambda (g3a44@foo) g3a44@foo) g3a42@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3a40@t))) (g2eb6@syntax-dispatch g3a40@t 'any))) g3a36@t))) (g2eb6@syntax-dispatch g3a36@t '(any any any)))) g3a34@spec))) (set! g3857@get-record-constructor-name (lambda (g3a20@spec) ((lambda (g3a22@t) ((lambda (g3a24@ls/false) (if g3a24@ls/false (apply (lambda (g3a26@foo g3a27@make-foo g3a28@foo?) g3a27@make-foo) g3a24@ls/false) ((lambda (g3a2c@t) ((lambda (g3a2e@ls/false) (if (and g3a2e@ls/false (apply (lambda (g3a30@foo) (g2cab@id? g3a30@foo)) g3a2e@ls/false)) (apply (lambda (g3a32@foo) (g3853@id g3a32@foo '"make-" (g2cc1@stx->datum g3a32@foo))) g3a2e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3a2c@t))) (g2eb6@syntax-dispatch g3a2c@t 'any))) g3a22@t))) (g2eb6@syntax-dispatch g3a22@t '(any any any)))) g3a20@spec))) (set! g3859@get-record-predicate-name (lambda (g3a0c@spec) ((lambda (g3a0e@t) ((lambda (g3a10@ls/false) (if g3a10@ls/false (apply (lambda (g3a12@foo g3a13@make-foo g3a14@foo?) g3a14@foo?) g3a10@ls/false) ((lambda (g3a18@t) ((lambda (g3a1a@ls/false) (if (and g3a1a@ls/false (apply (lambda (g3a1c@foo) (g2cab@id? g3a1c@foo)) g3a1a@ls/false)) (apply (lambda (g3a1e@foo) (g3853@id g3a1e@foo (g2cc1@stx->datum g3a1e@foo) '"?")) g3a1a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3a18@t))) (g2eb6@syntax-dispatch g3a18@t 'any))) g3a0e@t))) (g2eb6@syntax-dispatch g3a0e@t '(any any any)))) g3a0c@spec))) (set! g385b@get-clause (lambda (g39fa@id g39fb@ls) ((lambda (g39fe@t) ((lambda (g3a00@ls/false) (if g3a00@ls/false (apply (lambda () '#f) g3a00@ls/false) ((lambda (g3a02@t) ((lambda (g3a04@ls/false) (if g3a04@ls/false (apply (lambda (g3a06@x g3a07@rest g3a08@ls) (if (g2cb3@free-id=? (g2e6c@bless g39fa@id) g3a06@x) (cons g3a06@x g3a07@rest) (g385b@get-clause g39fa@id g3a08@ls))) g3a04@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3a02@t))) (g2eb6@syntax-dispatch g3a02@t '((any . any) . any)))) g39fe@t))) (g2eb6@syntax-dispatch g39fe@t '()))) g39fb@ls))) (set! g385d@foo-rtd-code (lambda (g39a8@name g39a9@clause* g39aa@parent-rtd-code) ((lambda (g39af@convert-field-spec*) (begin (set! g39af@convert-field-spec* (lambda (g39e0@ls) (list->vector (map (lambda (g39e2@x) ((lambda (g39e4@t) ((lambda (g39e6@ls/false) (if g39e6@ls/false (apply (lambda (g39e8@name g39e9@rest) (list 'mutable g39e8@name)) g39e6@ls/false) ((lambda (g39ec@t) ((lambda (g39ee@ls/false) (if g39ee@ls/false (apply (lambda (g39f0@name g39f1@rest) (list 'immutable g39f0@name)) g39ee@ls/false) ((lambda (g39f4@t) ((lambda (g39f6@ls/false) (if g39f6@ls/false (apply (lambda (g39f8@name) (list 'immutable g39f8@name)) g39f6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g39f4@t))) (g2eb6@syntax-dispatch g39f4@t 'any))) g39ec@t))) (g2eb6@syntax-dispatch g39ec@t '(#(scheme-id immutable) any . any)))) g39e4@t))) (g2eb6@syntax-dispatch g39e4@t '(#(scheme-id mutable) any . any)))) g39e2@x)) g39e0@ls)))) ((lambda (g39b0@uid-code g39b1@sealed? g39b2@opaque? g39b3@fields) (g2e6c@bless (list 'make-record-type-descriptor (list 'quote g39a8@name) g39aa@parent-rtd-code g39b0@uid-code g39b1@sealed? g39b2@opaque? g39b3@fields))) ((lambda (g39b8@t) ((lambda (g39ba@ls/false) (if g39ba@ls/false (apply (lambda () (list 'quote (gensym))) g39ba@ls/false) ((lambda (g39bc@t) ((lambda (g39be@ls/false) (if g39be@ls/false (apply (lambda (g39c0@uid) (list 'quote g39c0@uid)) g39be@ls/false) ((lambda (g39c2@t) ((lambda (g39c4@ls/false) (if g39c4@ls/false (apply (lambda () '#f) g39c4@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g39c2@t))) (g2eb6@syntax-dispatch g39c2@t '_))) g39bc@t))) (g2eb6@syntax-dispatch g39bc@t '(_ any)))) g39b8@t))) (g2eb6@syntax-dispatch g39b8@t '(_)))) (g385b@get-clause 'nongenerative g39a9@clause*)) ((lambda (g39c6@t) ((lambda (g39c8@ls/false) (if g39c8@ls/false (apply (lambda () '#t) g39c8@ls/false) ((lambda (g39ca@t) ((lambda (g39cc@ls/false) (if g39cc@ls/false (apply (lambda () '#f) g39cc@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g39ca@t))) (g2eb6@syntax-dispatch g39ca@t '_))) g39c6@t))) (g2eb6@syntax-dispatch g39c6@t '(_ #(atom #t))))) (g385b@get-clause 'sealed g39a9@clause*)) ((lambda (g39ce@t) ((lambda (g39d0@ls/false) (if g39d0@ls/false (apply (lambda () '#t) g39d0@ls/false) ((lambda (g39d2@t) ((lambda (g39d4@ls/false) (if g39d4@ls/false (apply (lambda () '#f) g39d4@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g39d2@t))) (g2eb6@syntax-dispatch g39d2@t '_))) g39ce@t))) (g2eb6@syntax-dispatch g39ce@t '(_ #(atom #t))))) (g385b@get-clause 'opaque g39a9@clause*)) ((lambda (g39d6@t) ((lambda (g39d8@ls/false) (if g39d8@ls/false (apply (lambda (g39da@field-spec*) (list 'quote (g39af@convert-field-spec* g39da@field-spec*))) g39d8@ls/false) ((lambda (g39dc@t) ((lambda (g39de@ls/false) (if g39de@ls/false (apply (lambda () ''#()) g39de@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g39dc@t))) (g2eb6@syntax-dispatch g39dc@t '_))) g39d6@t))) (g2eb6@syntax-dispatch g39d6@t '(_ . each-any)))) (g385b@get-clause 'fields g39a9@clause*))))) '#f))) (set! g385f@parent-rtd-code (lambda (g3990@clause*) ((lambda (g3992@t) ((lambda (g3994@ls/false) (if g3994@ls/false (apply (lambda (g3996@name) (list 'record-type-descriptor g3996@name)) g3994@ls/false) ((lambda (g3998@t) ((lambda (g399a@ls/false) (if g399a@ls/false (apply (lambda () ((lambda (g399c@t) ((lambda (g399e@ls/false) (if g399e@ls/false (apply (lambda (g39a0@rtd g39a1@rcd) g39a0@rtd) g399e@ls/false) ((lambda (g39a4@t) ((lambda (g39a6@ls/false) (if g39a6@ls/false (apply (lambda () '#f) g39a6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g39a4@t))) (g2eb6@syntax-dispatch g39a4@t '#(atom #f)))) g399c@t))) (g2eb6@syntax-dispatch g399c@t '(_ any any)))) (g385b@get-clause 'parent-rtd g3990@clause*))) g399a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3998@t))) (g2eb6@syntax-dispatch g3998@t '#(atom #f)))) g3992@t))) (g2eb6@syntax-dispatch g3992@t '(_ any)))) (g385b@get-clause 'parent g3990@clause*)))) (set! g3861@parent-rcd-code (lambda (g3978@clause*) ((lambda (g397a@t) ((lambda (g397c@ls/false) (if g397c@ls/false (apply (lambda (g397e@name) (list 'record-constructor-descriptor g397e@name)) g397c@ls/false) ((lambda (g3980@t) ((lambda (g3982@ls/false) (if g3982@ls/false (apply (lambda () ((lambda (g3984@t) ((lambda (g3986@ls/false) (if g3986@ls/false (apply (lambda (g3988@rtd g3989@rcd) g3989@rcd) g3986@ls/false) ((lambda (g398c@t) ((lambda (g398e@ls/false) (if g398e@ls/false (apply (lambda () '#f) g398e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g398c@t))) (g2eb6@syntax-dispatch g398c@t '#(atom #f)))) g3984@t))) (g2eb6@syntax-dispatch g3984@t '(_ any any)))) (g385b@get-clause 'parent-rtd g3978@clause*))) g3982@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3980@t))) (g2eb6@syntax-dispatch g3980@t '#(atom #f)))) g397a@t))) (g2eb6@syntax-dispatch g397a@t '(_ any)))) (g385b@get-clause 'parent g3978@clause*)))) (set! g3863@foo-rcd-code (lambda (g3970@clause* g3971@foo-rtd g3972@protocol g3973@parent-rcd-code) (list 'make-record-constructor-descriptor g3971@foo-rtd g3973@parent-rcd-code g3972@protocol))) (set! g3865@get-protocol-code (lambda (g3964@clause*) ((lambda (g3966@t) ((lambda (g3968@ls/false) (if g3968@ls/false (apply (lambda (g396a@expr) g396a@expr) g3968@ls/false) ((lambda (g396c@t) ((lambda (g396e@ls/false) (if g396e@ls/false (apply (lambda () '#f) g396e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g396c@t))) (g2eb6@syntax-dispatch g396c@t '_))) g3966@t))) (g2eb6@syntax-dispatch g3966@t '(_ any)))) (g385b@get-clause 'protocol g3964@clause*)))) (set! g3867@get-fields (lambda (g3952@clause*) ((lambda (g3954@t) ((lambda (g3956@ls/false) (if g3956@ls/false (apply (lambda () '()) g3956@ls/false) ((lambda (g3958@t) ((lambda (g395a@ls/false) (if g395a@ls/false (apply (lambda (g395c@f*) g395c@f*) g395a@ls/false) ((lambda (g395e@t) ((lambda (g3960@ls/false) (if g3960@ls/false (apply (lambda (g3962@rest) (g3867@get-fields g3962@rest)) g3960@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g395e@t))) (g2eb6@syntax-dispatch g395e@t '(_ . any)))) g3958@t))) (g2eb6@syntax-dispatch g3958@t '((#(scheme-id fields) . each-any) . _)))) g3954@t))) (g2eb6@syntax-dispatch g3954@t '()))) g3952@clause*))) (set! g3869@get-mutator-indices (lambda (g393a@fields) ((letrec ((g393c@f (lambda (g393e@fields g393f@i) ((lambda (g3942@t) ((lambda (g3944@ls/false) (if g3944@ls/false (apply (lambda () '()) g3944@ls/false) ((lambda (g3946@t) ((lambda (g3948@ls/false) (if g3948@ls/false (apply (lambda (g394a@rest) (cons g393f@i (g393c@f g394a@rest (+ g393f@i '1)))) g3948@ls/false) ((lambda (g394c@t) ((lambda (g394e@ls/false) (if g394e@ls/false (apply (lambda (g3950@rest) (g393c@f g3950@rest (+ g393f@i '1))) g394e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g394c@t))) (g2eb6@syntax-dispatch g394c@t '(_ . any)))) g3946@t))) (g2eb6@syntax-dispatch g3946@t '((#(scheme-id mutable) . _) . any)))) g3942@t))) (g2eb6@syntax-dispatch g3942@t '()))) g393e@fields)))) g393c@f) g393a@fields '0))) (set! g386b@get-mutators (lambda (g3910@foo g3911@fields) ((lambda (g3915@gen-name) (begin (set! g3915@gen-name (lambda (g3938@x) (g2fa3@datum->syntax g3910@foo (string->symbol (string-append (symbol->string (g2fa5@syntax->datum g3910@foo)) '"-" (symbol->string (g2fa5@syntax->datum g3938@x)) '"-set!"))))) ((letrec ((g3916@f (lambda (g3918@fields) ((lambda (g391a@t) ((lambda (g391c@ls/false) (if g391c@ls/false (apply (lambda () '()) g391c@ls/false) ((lambda (g391e@t) ((lambda (g3920@ls/false) (if g3920@ls/false (apply (lambda (g3922@name g3923@accessor g3924@mutator g3925@rest) (cons g3924@mutator (g3916@f g3925@rest))) g3920@ls/false) ((lambda (g392a@t) ((lambda (g392c@ls/false) (if g392c@ls/false (apply (lambda (g392e@name g392f@rest) (cons (g3915@gen-name g392e@name) (g3916@f g392f@rest))) g392c@ls/false) ((lambda (g3932@t) ((lambda (g3934@ls/false) (if g3934@ls/false (apply (lambda (g3936@rest) (g3916@f g3936@rest)) g3934@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3932@t))) (g2eb6@syntax-dispatch g3932@t '(_ . any)))) g392a@t))) (g2eb6@syntax-dispatch g392a@t '((#(scheme-id mutable) any) . any)))) g391e@t))) (g2eb6@syntax-dispatch g391e@t '((#(scheme-id mutable) any any any) . any)))) g391a@t))) (g2eb6@syntax-dispatch g391a@t '()))) g3918@fields)))) g3916@f) g3911@fields))) '#f))) (set! g386d@get-accessors (lambda (g38cc@foo g38cd@fields) ((lambda (g38d1@gen-name) (begin (set! g38d1@gen-name (lambda (g390e@x) (g2fa3@datum->syntax g38cc@foo (string->symbol (string-append (symbol->string (g2fa5@syntax->datum g38cc@foo)) '"-" (symbol->string (g2fa5@syntax->datum g390e@x))))))) (map (lambda (g38d2@field) ((lambda (g38d4@t) ((lambda (g38d6@ls/false) (if (and g38d6@ls/false (apply (lambda (g38d8@name g38d9@accessor g38da@mutator) (g2cab@id? g38d9@accessor)) g38d6@ls/false)) (apply (lambda (g38de@name g38df@accessor g38e0@mutator) g38df@accessor) g38d6@ls/false) ((lambda (g38e4@t) ((lambda (g38e6@ls/false) (if (and g38e6@ls/false (apply (lambda (g38e8@name g38e9@accessor) (g2cab@id? g38e9@accessor)) g38e6@ls/false)) (apply (lambda (g38ec@name g38ed@accessor) g38ed@accessor) g38e6@ls/false) ((lambda (g38f0@t) ((lambda (g38f2@ls/false) (if (and g38f2@ls/false (apply (lambda (g38f4@name) (g2cab@id? g38f4@name)) g38f2@ls/false)) (apply (lambda (g38f6@name) (g38d1@gen-name g38f6@name)) g38f2@ls/false) ((lambda (g38f8@t) ((lambda (g38fa@ls/false) (if (and g38fa@ls/false (apply (lambda (g38fc@name) (g2cab@id? g38fc@name)) g38fa@ls/false)) (apply (lambda (g38fe@name) (g38d1@gen-name g38fe@name)) g38fa@ls/false) ((lambda (g3900@t) ((lambda (g3902@ls/false) (if (and g3902@ls/false (apply (lambda (g3904@name) (g2cab@id? g3904@name)) g3902@ls/false)) (apply (lambda (g3906@name) (g38d1@gen-name g3906@name)) g3902@ls/false) ((lambda (g3908@t) ((lambda (g390a@ls/false) (if g390a@ls/false (apply (lambda (g390c@others) (g2f9f@syntax-violation '#f '"invalid field spec" g38d2@field)) g390a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3908@t))) (g2eb6@syntax-dispatch g3908@t 'any))) g3900@t))) (g2eb6@syntax-dispatch g3900@t 'any))) g38f8@t))) (g2eb6@syntax-dispatch g38f8@t '(#(scheme-id immutable) any)))) g38f0@t))) (g2eb6@syntax-dispatch g38f0@t '(#(scheme-id mutable) any)))) g38e4@t))) (g2eb6@syntax-dispatch g38e4@t '(#(scheme-id immutable) any any)))) g38d4@t))) (g2eb6@syntax-dispatch g38d4@t '(#(scheme-id mutable) any any any)))) g38d2@field)) g38cd@fields))) '#f))) (set! g386f@enumerate (lambda (g38c4@ls) ((letrec ((g38c6@f (lambda (g38c8@ls g38c9@i) (if (null? g38c8@ls) '() (cons g38c9@i (g38c6@f (cdr g38c8@ls) (+ g38c9@i '1))))))) g38c6@f) g38c4@ls '0))) (set! g3871@do-define-record (lambda (g389c@namespec g389d@clause*) ((lambda (g38a0@foo) ((lambda (g38a2@foo-rtd) ((lambda (g38a4@foo-rcd) ((lambda (g38a6@protocol) ((lambda (g38a8@make-foo) ((lambda (g38aa@fields) ((lambda (g38ac@idx*) ((lambda (g38ae@foo-x*) ((lambda (g38b0@set-foo-x!*) ((lambda (g38b2@set-foo-idx*) ((lambda (g38b4@foo?) ((lambda (g38b6@foo-rtd-code) ((lambda (g38b8@foo-rcd-code) ((lambda (g38ba@protocol-code) ((lambda () (g2e6c@bless (cons 'begin (cons (list 'define g38a2@foo-rtd g38b6@foo-rtd-code) (cons (list 'define g38a6@protocol g38ba@protocol-code) (cons (list 'define g38a4@foo-rcd g38b8@foo-rcd-code) (cons (list 'define-syntax g38a0@foo (list 'list ''$rtd (list 'syntax g38a2@foo-rtd) (list 'syntax g38a4@foo-rcd))) (cons (list 'define g38b4@foo? (list 'record-predicate g38a2@foo-rtd)) (cons (list 'define g38a8@make-foo (list 'record-constructor g38a4@foo-rcd)) (append (map (lambda (g38bc@foo-x g38bd@idx) (list 'define g38bc@foo-x (list 'record-accessor g38a2@foo-rtd g38bd@idx))) g38ae@foo-x* g38ac@idx*) (map (lambda (g38c0@set-foo-x! g38c1@idx) (list 'define g38c0@set-foo-x! (list 'record-mutator g38a2@foo-rtd g38c1@idx))) g38b0@set-foo-x!* g38b2@set-foo-idx*))))))))))))) (g3865@get-protocol-code g389d@clause*))) (g3863@foo-rcd-code g389d@clause* g38a2@foo-rtd g38a6@protocol (g3861@parent-rcd-code g389d@clause*)))) (g385d@foo-rtd-code g38a0@foo g389d@clause* (g385f@parent-rtd-code g389d@clause*)))) (g3859@get-record-predicate-name g389c@namespec))) (g3869@get-mutator-indices g38aa@fields))) (g386b@get-mutators g38a0@foo g38aa@fields))) (g386d@get-accessors g38a0@foo g38aa@fields))) (g386f@enumerate g38aa@fields))) (g3867@get-fields g389d@clause*))) (g3857@get-record-constructor-name g389c@namespec))) (gensym))) (gensym))) (gensym))) (g3855@get-record-name g389c@namespec)))) (set! g3873@verify-clauses (lambda (g387c@x g387d@cls*) ((lambda (g3881@valid-kwds g3883@free-id-member?) (begin (set! g3881@valid-kwds (map g2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! g3883@free-id-member? (lambda (g3898@x g3899@ls) (and (pair? g3899@ls) (or (g2cb3@free-id=? g3898@x (car g3899@ls)) (g3883@free-id-member? g3898@x (cdr g3899@ls)))))) ((letrec ((g3884@f (lambda (g3886@cls* g3887@seen*) (if (not (null? g3886@cls*)) ((lambda (g388a@t) ((lambda (g388c@ls/false) (if g388c@ls/false (apply (lambda (g388e@kwd g388f@rest) (if (or (not (g2cab@id? g388e@kwd)) (not (g3883@free-id-member? g388e@kwd g3881@valid-kwds))) (g2f9f@syntax-violation '#f '"not a valid define-record-type keyword" g388e@kwd) (if (g2cb9@bound-id-member? g388e@kwd g3887@seen*) (g2f9f@syntax-violation '#f '"duplicate use of keyword " g387c@x g388e@kwd) (g3884@f (cdr g3886@cls*) (cons g388e@kwd g3887@seen*))))) g388c@ls/false) ((lambda (g3892@t) ((lambda (g3894@ls/false) (if g3894@ls/false (apply (lambda (g3896@cls) (g2f9f@syntax-violation '#f '"malformed define-record-type clause" g3896@cls)) g3894@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3892@t))) (g2eb6@syntax-dispatch g3892@t 'any))) g388a@t))) (g2eb6@syntax-dispatch g388a@t '(any . any)))) (car g3886@cls*)) (void))))) g3884@f) g387d@cls* '()))) '#f '#f))) ((lambda (g3874@t) ((lambda (g3876@ls/false) (if g3876@ls/false (apply (lambda (g3878@namespec g3879@clause*) (begin (g3873@verify-clauses g3850@x g3879@clause*) (g3871@do-define-record g3878@namespec g3879@clause*))) g3876@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3874@t))) (g2eb6@syntax-dispatch g3874@t '(_ any . each-any)))) g3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g2eac@define-condition-type-macro (lambda (g3a4c@x) ((lambda (g3a4f@mkname) (begin (set! g3a4f@mkname (lambda (g3a7c@name g3a7d@suffix) (g2fa3@datum->syntax g3a7c@name (string->symbol (string-append (symbol->string (g2fa5@syntax->datum g3a7c@name)) g3a7d@suffix))))) ((lambda (g3a50@t) ((lambda (g3a52@ls/false) (if (and g3a52@ls/false (apply (lambda (g3a54@ctxt g3a55@name g3a56@super g3a57@constructor g3a58@predicate g3a59@field* g3a5a@accessor*) (and (g2cab@id? g3a55@name) (g2cab@id? g3a56@super) (g2cab@id? g3a57@constructor) (g2cab@id? g3a58@predicate) (for-all g2cab@id? g3a59@field*) (for-all g2cab@id? g3a5a@accessor*))) g3a52@ls/false)) (apply (lambda (g3a62@ctxt g3a63@name g3a64@super g3a65@constructor g3a66@predicate g3a67@field* g3a68@accessor*) ((lambda (g3a70@aux-accessor*) (g2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list g3a63@name g3a65@constructor (gensym)) (cons (list 'parent g3a64@super) (cons (cons 'fields (map (lambda (g3a72@field g3a73@aux) (list 'immutable g3a72@field g3a73@aux)) g3a67@field* g3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g3a66@predicate (list 'condition-predicate (list 'record-type-descriptor g3a63@name))) (map (lambda (g3a76@accessor g3a77@aux) (list 'define g3a76@accessor (list 'condition-accessor (list 'record-type-descriptor g3a63@name) g3a77@aux))) g3a68@accessor* g3a70@aux-accessor*)))))) (map (lambda (g3a7a@x) (gensym)) g3a68@accessor*))) g3a52@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3a50@t))) (g2eb6@syntax-dispatch g3a50@t '(any any any any any . #(each (any any)))))) g3a4c@x))) '#f))) (set! g2eae@incorrect-usage-macro (lambda (g3a80@e) (g2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" g3a80@e))) (set! g2eb0@parameterize-macro (lambda (g3a82@e) ((lambda (g3a84@t) ((lambda (g3a86@ls/false) (if g3a86@ls/false (apply (lambda (g3a88@b g3a89@b*) (g2e6c@bless (cons 'let (cons '() (cons g3a88@b g3a89@b*))))) g3a86@ls/false) ((lambda (g3a8c@t) ((lambda (g3a8e@ls/false) (if g3a8e@ls/false (apply (lambda (g3a90@olhs* g3a91@orhs* g3a92@b g3a93@b*) ((lambda (g3a98@lhs* g3a99@rhs*) (g2e6c@bless (cons (list 'lambda (append g3a98@lhs* g3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (g3a9c@lhs g3a9d@rhs) (list 'let (list (list 't (list g3a9c@lhs))) (list g3a9c@lhs g3a9d@rhs) (cons 'set! (cons g3a9d@rhs '(t))))) g3a98@lhs* g3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons g3a92@b g3a93@b*))) '(swap)))))) (append g3a90@olhs* g3a91@orhs*)))) (g2f8d@generate-temporaries g3a90@olhs*) (g2f8d@generate-temporaries g3a91@orhs*))) g3a8e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3a8c@t))) (g2eb6@syntax-dispatch g3a8c@t '(_ #(each (any any)) any . each-any)))) g3a84@t))) (g2eb6@syntax-dispatch g3a84@t '(_ () any . each-any)))) g3a82@e))) (set! g2eb2@foreign-call-transformer (lambda (g3aa0@e g3aa1@r g3aa2@mr) ((lambda (g3aa6@t) ((lambda (g3aa8@ls/false) (if g3aa8@ls/false (apply (lambda (g3aaa@name g3aab@arg*) (cons 'foreign-call (cons (g2ed8@chi-expr g3aaa@name g3aa1@r g3aa2@mr) (g2ed4@chi-expr* g3aab@arg* g3aa1@r g3aa2@mr)))) g3aa8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3aa6@t))) (g2eb6@syntax-dispatch g3aa6@t '(_ any . each-any)))) g3aa0@e))) (set! g2eb4@convert-pattern (lambda (g3aae@pattern g3aaf@keys) ((lambda (g3ab3@cvt* g3ab5@cvt) (begin (set! g3ab3@cvt* (lambda (g3b52@p* g3b53@n g3b54@ids) (if (null? g3b52@p*) (values '() g3b54@ids) (call-with-values (lambda () (g3ab3@cvt* (cdr g3b52@p*) g3b53@n g3b54@ids)) (lambda (g3b5c@g3b59 g3b5d@g3b5b) ((lambda (g3b60@ids g3b61@y) (call-with-values (lambda () (g3ab5@cvt (car g3b52@p*) g3b53@n g3b60@ids)) (lambda (g3b68@g3b65 g3b69@g3b67) ((lambda (g3b6c@ids g3b6d@x) (values (cons g3b6d@x g3b61@y) g3b6c@ids)) g3b69@g3b67 g3b68@g3b65)))) g3b5d@g3b5b g3b5c@g3b59)))))) (set! g3ab5@cvt (lambda (g3ab6@p g3ab7@n g3ab8@ids) ((lambda (g3abc@t) ((lambda (g3abe@ls/false) (if (and g3abe@ls/false (apply (lambda (g3ac0@id) (g2cab@id? g3ac0@id)) g3abe@ls/false)) (apply (lambda (g3ac2@id) (if (g2cb9@bound-id-member? g3ab6@p g3aaf@keys) (values (vector 'free-id g3ab6@p) g3ab8@ids) (if (g2cb3@free-id=? g3ab6@p (g2e40@scheme-stx '_)) (values '_ g3ab8@ids) (values 'any (cons (cons g3ab6@p g3ab7@n) g3ab8@ids))))) g3abe@ls/false) ((lambda (g3ac4@t) ((lambda (g3ac6@ls/false) (if (and g3ac6@ls/false (apply (lambda (g3ac8@p g3ac9@dots) (g2eb8@ellipsis? g3ac9@dots)) g3ac6@ls/false)) (apply (lambda (g3acc@p g3acd@dots) (call-with-values (lambda () (g3ab5@cvt g3acc@p (+ g3ab7@n '1) g3ab8@ids)) (lambda (g3ad4@g3ad1 g3ad5@g3ad3) ((lambda (g3ad8@ids g3ad9@p) (values (if (eq? g3ad9@p 'any) 'each-any (vector 'each g3ad9@p)) g3ad8@ids)) g3ad5@g3ad3 g3ad4@g3ad1)))) g3ac6@ls/false) ((lambda (g3adc@t) ((lambda (g3ade@ls/false) (if (and g3ade@ls/false (apply (lambda (g3ae0@x g3ae1@dots g3ae2@ys g3ae3@z) (g2eb8@ellipsis? g3ae1@dots)) g3ade@ls/false)) (apply (lambda (g3ae8@x g3ae9@dots g3aea@ys g3aeb@z) (call-with-values (lambda () (g3ab5@cvt g3aeb@z g3ab7@n g3ab8@ids)) (lambda (g3af4@g3af1 g3af5@g3af3) ((lambda (g3af8@ids g3af9@z) (call-with-values (lambda () (g3ab3@cvt* g3aea@ys g3ab7@n g3af8@ids)) (lambda (g3b00@g3afd g3b01@g3aff) ((lambda (g3b04@ids g3b05@ys) (call-with-values (lambda () (g3ab5@cvt g3ae8@x (+ g3ab7@n '1) g3b04@ids)) (lambda (g3b0c@g3b09 g3b0d@g3b0b) ((lambda (g3b10@ids g3b11@x) (values (vector 'each+ g3b11@x (reverse g3b05@ys) g3af9@z) g3b10@ids)) g3b0d@g3b0b g3b0c@g3b09)))) g3b01@g3aff g3b00@g3afd)))) g3af5@g3af3 g3af4@g3af1)))) g3ade@ls/false) ((lambda (g3b14@t) ((lambda (g3b16@ls/false) (if g3b16@ls/false (apply (lambda (g3b18@x g3b19@y) (call-with-values (lambda () (g3ab5@cvt g3b19@y g3ab7@n g3ab8@ids)) (lambda (g3b20@g3b1d g3b21@g3b1f) ((lambda (g3b24@ids g3b25@y) (call-with-values (lambda () (g3ab5@cvt g3b18@x g3ab7@n g3b24@ids)) (lambda (g3b2c@g3b29 g3b2d@g3b2b) ((lambda (g3b30@ids g3b31@x) (values (cons g3b31@x g3b25@y) g3b30@ids)) g3b2d@g3b2b g3b2c@g3b29)))) g3b21@g3b1f g3b20@g3b1d)))) g3b16@ls/false) ((lambda (g3b34@t) ((lambda (g3b36@ls/false) (if g3b36@ls/false (apply (lambda () (values '() g3ab8@ids)) g3b36@ls/false) ((lambda (g3b38@t) ((lambda (g3b3a@ls/false) (if (and g3b3a@ls/false (apply (lambda (g3b3c@p) (not (g2c73@stx? g3b3c@p))) g3b3a@ls/false)) (apply (lambda (g3b3e@p) (call-with-values (lambda () (g3ab5@cvt g3b3e@p g3ab7@n g3ab8@ids)) (lambda (g3b44@g3b41 g3b45@g3b43) ((lambda (g3b48@ids g3b49@p) (values (vector 'vector g3b49@p) g3b48@ids)) g3b45@g3b43 g3b44@g3b41)))) g3b3a@ls/false) ((lambda (g3b4c@t) ((lambda (g3b4e@ls/false) (if g3b4e@ls/false (apply (lambda (g3b50@datum) (values (vector 'atom (g2cc1@stx->datum g3b50@datum)) g3ab8@ids)) g3b4e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3b4c@t))) (g2eb6@syntax-dispatch g3b4c@t 'any))) g3b38@t))) (g2eb6@syntax-dispatch g3b38@t '#(vector each-any)))) g3b34@t))) (g2eb6@syntax-dispatch g3b34@t '()))) g3b14@t))) (g2eb6@syntax-dispatch g3b14@t '(any . any)))) g3adc@t))) (g2eb6@syntax-dispatch g3adc@t '(any any . #(each+ any () any))))) g3ac4@t))) (g2eb6@syntax-dispatch g3ac4@t '(any any)))) g3abc@t))) (g2eb6@syntax-dispatch g3abc@t 'any))) g3ab6@p))) (g3ab5@cvt g3aae@pattern '0 '()))) '#f '#f))) (set! g2eb6@syntax-dispatch ((lambda () ((lambda (g3b71@stx^ g3b73@match-each g3b75@match-each+ g3b77@match-each-any g3b79@match-empty g3b7b@combine g3b7d@match* g3b7f@match) (begin (set! g3b71@stx^ (lambda (g3c4c@e g3c4d@m* g3c4e@s* g3c4f@ae*) (if (and (null? g3c4d@m*) (null? g3c4e@s*) (null? g3c4f@ae*)) g3c4c@e (g2c93@mkstx g3c4c@e g3c4d@m* g3c4e@s* g3c4f@ae*)))) (set! g3b73@match-each (lambda (g3c2c@e g3c2d@p g3c2e@m* g3c2f@s* g3c30@ae*) (if (pair? g3c2c@e) ((lambda (g3c36@first) (and g3c36@first ((lambda (g3c38@rest) (and g3c38@rest (cons g3c36@first g3c38@rest))) (g3b73@match-each (cdr g3c2c@e) g3c2d@p g3c2e@m* g3c2f@s* g3c30@ae*)))) (g3b7f@match (car g3c2c@e) g3c2d@p g3c2e@m* g3c2f@s* g3c30@ae* '())) (if (null? g3c2c@e) '() (if (g2c73@stx? g3c2c@e) (and (not (g2c29@top-marked? g3c2e@m*)) (call-with-values (lambda () (g2c91@join-wraps g3c2e@m* g3c2f@s* g3c30@ae* g3c2c@e)) (lambda (g3c40@g3c3b g3c41@g3c3d g3c42@g3c3f) ((lambda (g3c46@ae* g3c47@s* g3c48@m*) (g3b73@match-each (g2c77@stx-expr g3c2c@e) g3c2d@p g3c48@m* g3c47@s* g3c46@ae*)) g3c42@g3c3f g3c41@g3c3d g3c40@g3c3b)))) (if (g284a@g2769@annotation? g3c2c@e) (g3b73@match-each (g284c@g276d@annotation-expression g3c2c@e) g3c2d@p g3c2e@m* g3c2f@s* g3c30@ae*) '#f)))))) (set! g3b75@match-each+ (lambda (g3bec@e g3bed@x-pat g3bee@y-pat g3bef@z-pat g3bf0@m* g3bf1@s* g3bf2@ae* g3bf3@r) ((letrec ((g3bfc@f (lambda (g3bfe@e g3bff@m* g3c00@s* g3c01@ae*) (if (pair? g3bfe@e) (call-with-values (lambda () (g3bfc@f (cdr g3bfe@e) g3bff@m* g3c00@s* g3c01@ae*)) (lambda (g3c0c@g3c07 g3c0d@g3c09 g3c0e@g3c0b) ((lambda (g3c12@r g3c13@y-pat g3c14@xr*) (if g3c12@r (if (null? g3c13@y-pat) ((lambda (g3c18@xr) (if g3c18@xr (values (cons g3c18@xr g3c14@xr*) g3c13@y-pat g3c12@r) (values '#f '#f '#f))) (g3b7f@match (car g3bfe@e) g3bed@x-pat g3bff@m* g3c00@s* g3c01@ae* '())) (values '() (cdr g3c13@y-pat) (g3b7f@match (car g3bfe@e) (car g3c13@y-pat) g3bff@m* g3c00@s* g3c01@ae* g3c12@r))) (values '#f '#f '#f))) g3c0e@g3c0b g3c0d@g3c09 g3c0c@g3c07))) (if (g2c73@stx? g3bfe@e) (if (g2c29@top-marked? g3bff@m*) (values '() g3bee@y-pat (g3b7f@match g3bfe@e g3bef@z-pat g3bff@m* g3c00@s* g3c01@ae* g3bf3@r)) (call-with-values (lambda () (g2c91@join-wraps g3bff@m* g3c00@s* g3c01@ae* g3bfe@e)) (lambda (g3c20@g3c1b g3c21@g3c1d g3c22@g3c1f) ((lambda (g3c26@ae* g3c27@s* g3c28@m*) (g3bfc@f (g2c77@stx-expr g3bfe@e) g3c28@m* g3c27@s* g3c26@ae*)) g3c22@g3c1f g3c21@g3c1d g3c20@g3c1b)))) (if (g284a@g2769@annotation? g3bfe@e) (g3bfc@f (g284c@g276d@annotation-expression g3bfe@e) g3bff@m* g3c00@s* g3c01@ae*) (values '() g3bee@y-pat (g3b7f@match g3bfe@e g3bef@z-pat g3bff@m* g3c00@s* g3c01@ae* g3bf3@r)))))))) g3bfc@f) g3bec@e g3bf0@m* g3bf1@s* g3bf2@ae*))) (set! g3b77@match-each-any (lambda (g3bd0@e g3bd1@m* g3bd2@s* g3bd3@ae*) (if (pair? g3bd0@e) ((lambda (g3bd8@l) (and g3bd8@l (cons (g3b71@stx^ (car g3bd0@e) g3bd1@m* g3bd2@s* g3bd3@ae*) g3bd8@l))) (g3b77@match-each-any (cdr g3bd0@e) g3bd1@m* g3bd2@s* g3bd3@ae*)) (if (null? g3bd0@e) '() (if (g2c73@stx? g3bd0@e) (and (not (g2c29@top-marked? g3bd1@m*)) (call-with-values (lambda () (g2c91@join-wraps g3bd1@m* g3bd2@s* g3bd3@ae* g3bd0@e)) (lambda (g3be0@g3bdb g3be1@g3bdd g3be2@g3bdf) ((lambda (g3be6@ae* g3be7@s* g3be8@m*) (g3b77@match-each-any (g2c77@stx-expr g3bd0@e) g3be8@m* g3be7@s* g3be6@ae*)) g3be2@g3bdf g3be1@g3bdd g3be0@g3bdb)))) (if (g284a@g2769@annotation? g3bd0@e) (g3b77@match-each-any (g284c@g276d@annotation-expression g3bd0@e) g3bd1@m* g3bd2@s* g3bd3@ae*) '#f)))))) (set! g3b79@match-empty (lambda (g3bca@p g3bcb@r) (if (null? g3bca@p) g3bcb@r (if (eq? g3bca@p '_) g3bcb@r (if (eq? g3bca@p 'any) (cons '() g3bcb@r) (if (pair? g3bca@p) (g3b79@match-empty (car g3bca@p) (g3b79@match-empty (cdr g3bca@p) g3bcb@r)) (if (eq? g3bca@p 'each-any) (cons '() g3bcb@r) ((lambda (g3bce@t) (if (memv g3bce@t '(each)) (g3b79@match-empty (vector-ref g3bca@p '1) g3bcb@r) (if (memv g3bce@t '(each+)) (g3b79@match-empty (vector-ref g3bca@p '1) (g3b79@match-empty (reverse (vector-ref g3bca@p '2)) (g3b79@match-empty (vector-ref g3bca@p '3) g3bcb@r))) (if (memv g3bce@t '(free-id atom)) g3bcb@r (if (memv g3bce@t '(scheme-id atom)) g3bcb@r (if (memv g3bce@t '(vector)) (g3b79@match-empty (vector-ref g3bca@p '1) g3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" g3bca@p))))))) (vector-ref g3bca@p '0))))))))) (set! g3b7b@combine (lambda (g3bc6@r* g3bc7@r) (if (null? (car g3bc6@r*)) g3bc7@r (cons (map car g3bc6@r*) (g3b7b@combine (map cdr g3bc6@r*) g3bc7@r))))) (set! g3b7d@match* (lambda (g3ba2@e g3ba3@p g3ba4@m* g3ba5@s* g3ba6@ae* g3ba7@r) (if (null? g3ba3@p) (and (null? g3ba2@e) g3ba7@r) (if (pair? g3ba3@p) (and (pair? g3ba2@e) (g3b7f@match (car g3ba2@e) (car g3ba3@p) g3ba4@m* g3ba5@s* g3ba6@ae* (g3b7f@match (cdr g3ba2@e) (cdr g3ba3@p) g3ba4@m* g3ba5@s* g3ba6@ae* g3ba7@r))) (if (eq? g3ba3@p 'each-any) ((lambda (g3bae@l) (and g3bae@l (cons g3bae@l g3ba7@r))) (g3b77@match-each-any g3ba2@e g3ba4@m* g3ba5@s* g3ba6@ae*)) ((lambda (g3bb0@t) (if (memv g3bb0@t '(each)) (if (null? g3ba2@e) (g3b79@match-empty (vector-ref g3ba3@p '1) g3ba7@r) ((lambda (g3bb2@r*) (and g3bb2@r* (g3b7b@combine g3bb2@r* g3ba7@r))) (g3b73@match-each g3ba2@e (vector-ref g3ba3@p '1) g3ba4@m* g3ba5@s* g3ba6@ae*))) (if (memv g3bb0@t '(free-id)) (and (symbol? g3ba2@e) (g2c29@top-marked? g3ba4@m*) (g2cb3@free-id=? (g3b71@stx^ g3ba2@e g3ba4@m* g3ba5@s* g3ba6@ae*) (vector-ref g3ba3@p '1)) g3ba7@r) (if (memv g3bb0@t '(scheme-id)) (and (symbol? g3ba2@e) (g2c29@top-marked? g3ba4@m*) (g2cb3@free-id=? (g3b71@stx^ g3ba2@e g3ba4@m* g3ba5@s* g3ba6@ae*) (g2e40@scheme-stx (vector-ref g3ba3@p '1))) g3ba7@r) (if (memv g3bb0@t '(each+)) (call-with-values (lambda () (g3b75@match-each+ g3ba2@e (vector-ref g3ba3@p '1) (vector-ref g3ba3@p '2) (vector-ref g3ba3@p '3) g3ba4@m* g3ba5@s* g3ba6@ae* g3ba7@r)) (lambda (g3bba@g3bb5 g3bbb@g3bb7 g3bbc@g3bb9) ((lambda (g3bc0@r g3bc1@y-pat g3bc2@xr*) (and g3bc0@r (null? g3bc1@y-pat) (if (null? g3bc2@xr*) (g3b79@match-empty (vector-ref g3ba3@p '1) g3bc0@r) (g3b7b@combine g3bc2@xr* g3bc0@r)))) g3bbc@g3bb9 g3bbb@g3bb7 g3bba@g3bb5))) (if (memv g3bb0@t '(atom)) (and (fast-equal? (vector-ref g3ba3@p '1) (g2cbf@strip g3ba2@e g3ba4@m*)) g3ba7@r) (if (memv g3bb0@t '(vector)) (and (vector? g3ba2@e) (g3b7f@match (vector->list g3ba2@e) (vector-ref g3ba3@p '1) g3ba4@m* g3ba5@s* g3ba6@ae* g3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" g3ba3@p)))))))) (vector-ref g3ba3@p '0))))))) (set! g3b7f@match (lambda (g3b84@e g3b85@p g3b86@m* g3b87@s* g3b88@ae* g3b89@r) (if (not g3b89@r) '#f (if (eq? g3b85@p '_) g3b89@r (if (eq? g3b85@p 'any) (cons (g3b71@stx^ g3b84@e g3b86@m* g3b87@s* g3b88@ae*) g3b89@r) (if (g2c73@stx? g3b84@e) (and (not (g2c29@top-marked? g3b86@m*)) (call-with-values (lambda () (g2c91@join-wraps g3b86@m* g3b87@s* g3b88@ae* g3b84@e)) (lambda (g3b96@g3b91 g3b97@g3b93 g3b98@g3b95) ((lambda (g3b9c@ae* g3b9d@s* g3b9e@m*) (g3b7f@match (g2c77@stx-expr g3b84@e) g3b85@p g3b9e@m* g3b9d@s* g3b9c@ae* g3b89@r)) g3b98@g3b95 g3b97@g3b93 g3b96@g3b91)))) (if (g284a@g2769@annotation? g3b84@e) (g3b7f@match (g284c@g276d@annotation-expression g3b84@e) g3b85@p g3b86@m* g3b87@s* g3b88@ae* g3b89@r) (g3b7d@match* g3b84@e g3b85@p g3b86@m* g3b87@s* g3b88@ae* g3b89@r)))))))) (lambda (g3b80@e g3b81@p) (g3b7f@match g3b80@e g3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2eb8@ellipsis? (lambda (g3c54@x) (and (g2cab@id? g3c54@x) (g2cb3@free-id=? g3c54@x (g2e40@scheme-stx '...))))) (set! g2eba@underscore? (lambda (g3c56@x) (and (g2cab@id? g3c56@x) (g2cb3@free-id=? g3c56@x (g2e40@scheme-stx '_))))) (set! g2ebc@verify-literals (lambda (g3c58@lits g3c59@expr) (for-each (lambda (g3c5c@x) (if (or (not (g2cab@id? g3c5c@x)) (g2eb8@ellipsis? g3c5c@x) (g2eba@underscore? g3c5c@x)) (g2f9f@syntax-violation '#f '"invalid literal" g3c59@expr g3c5c@x) (void))) g3c58@lits))) (set! g2ebe@syntax-case-transformer ((lambda () ((lambda (g3c5f@build-dispatch-call g3c61@invalid-ids-error g3c63@gen-clause g3c65@gen-syntax-case) (begin (set! g3c5f@build-dispatch-call (lambda (g3cd0@pvars g3cd1@expr g3cd2@y g3cd3@r g3cd4@mr) ((lambda (g3cda@ids g3cdb@levels) ((lambda (g3cde@labels g3cdf@new-vars) ((lambda (g3ce2@body) (list '(primitive apply) (g2c07@g2b47@build-lambda '#f g3cdf@new-vars g3ce2@body) g3cd2@y)) (g2ed8@chi-expr (g2c97@add-subst (g2c66@make-full-rib g3cda@ids g3cde@labels) g3cd1@expr) (append (map (lambda (g3ce4@label g3ce5@var g3ce6@level) (cons g3ce4@label (g2ccb@make-binding 'syntax (cons g3ce5@var g3ce6@level)))) g3cde@labels g3cdf@new-vars (map cdr g3cd0@pvars)) g3cd3@r) g3cd4@mr))) (map g2c2f@gen-label g3cda@ids) (map g2c2b@gen-lexical g3cda@ids))) (map car g3cd0@pvars) (map cdr g3cd0@pvars)))) (set! g3c61@invalid-ids-error (lambda (g3cc4@id* g3cc5@e g3cc6@class) ((letrec ((g3cca@find (lambda (g3ccc@id* g3ccd@ok*) (if (null? g3ccc@id*) (g2f9f@syntax-violation '#f '"invalid syntax" g3cc5@e) (if (g2cab@id? (car g3ccc@id*)) (if (g2cb9@bound-id-member? (car g3ccc@id*) g3ccd@ok*) (g2f9b@syntax-error (car g3ccc@id*) '"duplicate " g3cc6@class) (g3cca@find (cdr g3ccc@id*) (cons (car g3ccc@id*) g3ccd@ok*))) (g2f9b@syntax-error (car g3ccc@id*) '"invalid " g3cc6@class)))))) g3cca@find) g3cc4@id* '()))) (set! g3c63@gen-clause (lambda (g3c9c@x g3c9d@keys g3c9e@clauses g3c9f@r g3ca0@mr g3ca1@pat g3ca2@fender g3ca3@expr) (call-with-values (lambda () (g2eb4@convert-pattern g3ca1@pat g3c9d@keys)) (lambda (g3cb0@g3cad g3cb1@g3caf) ((lambda (g3cb4@pvars g3cb5@p) (if (not (g2cb7@distinct-bound-ids? (map car g3cb4@pvars))) (g3c61@invalid-ids-error (map car g3cb4@pvars) g3ca1@pat '"pattern variable") (if (not (for-all (lambda (g3cb8@x) (not (g2eb8@ellipsis? (car g3cb8@x)))) g3cb4@pvars)) (g2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" g3ca1@pat) ((lambda (g3cba@y) ((lambda (g3cbc@test) ((lambda (g3cbe@conseq) ((lambda (g3cc0@altern) (list (g2c07@g2b47@build-lambda '#f (list g3cba@y) (list 'if g3cbc@test g3cbe@conseq g3cc0@altern)) (list '(primitive syntax-dispatch) g3c9c@x (list 'quote g3cb5@p)))) (g3c65@gen-syntax-case g3c9c@x g3c9d@keys g3c9e@clauses g3c9f@r g3ca0@mr))) (g3c5f@build-dispatch-call g3cb4@pvars g3ca3@expr g3cba@y g3c9f@r g3ca0@mr))) (if (eq? g3ca2@fender '#t) g3cba@y ((lambda (g3cc2@call) (list 'if g3cba@y g3cc2@call (list 'quote '#f))) (g3c5f@build-dispatch-call g3cb4@pvars g3ca2@fender g3cba@y g3c9f@r g3ca0@mr))))) (g2c2b@gen-lexical 'tmp))))) g3cb1@g3caf g3cb0@g3cad))))) (set! g3c65@gen-syntax-case (lambda (g3c7a@x g3c7b@keys g3c7c@clauses g3c7d@r g3c7e@mr) (if (null? g3c7c@clauses) (list '(primitive syntax-error) g3c7a@x) ((lambda (g3c84@t) ((lambda (g3c86@ls/false) (if g3c86@ls/false (apply (lambda (g3c88@pat g3c89@expr) (if (and (g2cab@id? g3c88@pat) (not (g2cb9@bound-id-member? g3c88@pat g3c7b@keys)) (not (g2eb8@ellipsis? g3c88@pat))) (if (g2cb3@free-id=? g3c88@pat (g2e40@scheme-stx '_)) (g2ed8@chi-expr g3c89@expr g3c7d@r g3c7e@mr) ((lambda (g3c8c@lab g3c8d@lex) ((lambda (g3c90@body) (list (g2c07@g2b47@build-lambda '#f (list g3c8d@lex) g3c90@body) g3c7a@x)) (g2ed8@chi-expr (g2c97@add-subst (g2c66@make-full-rib (list g3c88@pat) (list g3c8c@lab)) g3c89@expr) (cons (cons g3c8c@lab (g2ccb@make-binding 'syntax (cons g3c8d@lex '0))) g3c7d@r) g3c7e@mr))) (g2c2f@gen-label g3c88@pat) (g2c2b@gen-lexical g3c88@pat))) (g3c63@gen-clause g3c7a@x g3c7b@keys (cdr g3c7c@clauses) g3c7d@r g3c7e@mr g3c88@pat '#t g3c89@expr))) g3c86@ls/false) ((lambda (g3c92@t) ((lambda (g3c94@ls/false) (if g3c94@ls/false (apply (lambda (g3c96@pat g3c97@fender g3c98@expr) (g3c63@gen-clause g3c7a@x g3c7b@keys (cdr g3c7c@clauses) g3c7d@r g3c7e@mr g3c96@pat g3c97@fender g3c98@expr)) g3c94@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3c92@t))) (g2eb6@syntax-dispatch g3c92@t '(any any any)))) g3c84@t))) (g2eb6@syntax-dispatch g3c84@t '(any any)))) (car g3c7c@clauses))))) (lambda (g3c66@e g3c67@r g3c68@mr) ((lambda (g3c6c@t) ((lambda (g3c6e@ls/false) (if g3c6e@ls/false (apply (lambda (g3c70@expr g3c71@keys g3c72@clauses) (begin (g2ebc@verify-literals g3c71@keys g3c66@e) ((lambda (g3c76@x) ((lambda (g3c78@body) (list (g2c07@g2b47@build-lambda '#f (list g3c76@x) g3c78@body) (g2ed8@chi-expr g3c70@expr g3c67@r g3c68@mr))) (g3c65@gen-syntax-case g3c76@x g3c71@keys g3c72@clauses g3c67@r g3c68@mr))) (g2c2b@gen-lexical 'tmp)))) g3c6e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3c6c@t))) (g2eb6@syntax-dispatch g3c6c@t '(_ any each-any . each-any)))) g3c66@e)))) '#f '#f '#f '#f)))) (set! g2ec0@ellipsis-map (lambda (g3cea@proc g3ceb@ls . g3cee@ls*) ((lambda (g3cf1@who) (begin (set! g3cf1@who '...) (begin (if (not (list? g3ceb@ls)) (assertion-violation g3cf1@who '"not a list" g3ceb@ls) (void)) (if (not (null? g3cee@ls*)) ((lambda (g3cf2@n) (for-each (lambda (g3cf4@x) (begin (if (not (list? g3cf4@x)) (assertion-violation g3cf1@who '"not a list" g3cf4@x) (void)) (if (not (= (length g3cf4@x) g3cf2@n)) (assertion-violation g3cf1@who '"length mismatch" g3ceb@ls g3cf4@x) (void)))) g3cee@ls*)) (length g3ceb@ls)) (void)) (apply map g3cea@proc g3ceb@ls g3cee@ls*)))) '#f))) (set! g2ec2@syntax-transformer ((lambda () ((lambda (g3cf7@gen-syntax g3cf9@gen-ref g3cfb@gen-append g3cfd@gen-mappend g3cff@gen-map g3d01@gen-cons g3d03@gen-vector g3d05@regen) (begin (set! g3cf7@gen-syntax (lambda (g3d6e@src g3d6f@e g3d70@r g3d71@maps g3d72@ellipsis? g3d73@vec?) ((lambda (g3d7a@t) ((lambda (g3d7c@ls/false) (if (and g3d7c@ls/false (apply (lambda (g3d7e@dots) (g3d72@ellipsis? g3d7e@dots)) g3d7c@ls/false)) (apply (lambda (g3d80@dots) (g2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" g3d6e@src)) g3d7c@ls/false) ((lambda (g3d82@t) ((lambda (g3d84@ls/false) (if (and g3d84@ls/false (apply (lambda (g3d86@id) (g2cab@id? g3d86@id)) g3d84@ls/false)) (apply (lambda (g3d88@id) ((lambda (g3d8a@label) ((lambda (g3d8c@b) ((lambda () (if (eq? (g2ccd@binding-type g3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (g3d92@var.lev) (g3cf9@gen-ref g3d6e@src (car g3d92@var.lev) (cdr g3d92@var.lev) g3d71@maps)) (g2ccf@binding-value g3d8c@b))) (lambda (g3d94@g3d8f g3d95@g3d91) ((lambda (g3d98@maps g3d99@var) (values (list 'ref g3d99@var) g3d98@maps)) g3d95@g3d91 g3d94@g3d8f))) (values (list 'quote g3d6f@e) g3d71@maps))))) (g2cc9@label->binding g3d8a@label g3d70@r))) (g2cc5@id->label g3d6f@e))) g3d84@ls/false) ((lambda (g3d9c@t) ((lambda (g3d9e@ls/false) (if (and g3d9e@ls/false (apply (lambda (g3da0@dots g3da1@e) (g3d72@ellipsis? g3da0@dots)) g3d9e@ls/false)) (apply (lambda (g3da4@dots g3da5@e) (if g3d73@vec? (g2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" g3d6e@src) (g3cf7@gen-syntax g3d6e@src g3da5@e g3d70@r g3d71@maps (lambda (g3da8@x) '#f) '#f))) g3d9e@ls/false) ((lambda (g3daa@t) ((lambda (g3dac@ls/false) (if (and g3dac@ls/false (apply (lambda (g3dae@x g3daf@dots g3db0@y) (g3d72@ellipsis? g3daf@dots)) g3dac@ls/false)) (apply (lambda (g3db4@x g3db5@dots g3db6@y) ((letrec ((g3dba@f (lambda (g3dbc@y g3dbd@k) ((lambda (g3dc0@t) ((lambda (g3dc2@ls/false) (if g3dc2@ls/false (apply (lambda () (g3dbd@k g3d71@maps)) g3dc2@ls/false) ((lambda (g3dc4@t) ((lambda (g3dc6@ls/false) (if (and g3dc6@ls/false (apply (lambda (g3dc8@dots g3dc9@y) (g3d72@ellipsis? g3dc8@dots)) g3dc6@ls/false)) (apply (lambda (g3dcc@dots g3dcd@y) (g3dba@f g3dcd@y (lambda (g3dd0@maps) (call-with-values (lambda () (g3dbd@k (cons '() g3dd0@maps))) (lambda (g3dd6@g3dd3 g3dd7@g3dd5) ((lambda (g3dda@maps g3ddb@x) (if (null? (car g3dda@maps)) (g2f9f@syntax-violation '#f '"extra ellipsis in syntax form" g3d6e@src) (values (g3cfd@gen-mappend g3ddb@x (car g3dda@maps)) (cdr g3dda@maps)))) g3dd7@g3dd5 g3dd6@g3dd3)))))) g3dc6@ls/false) ((lambda (g3dde@t) ((lambda (g3de0@ls/false) (if g3de0@ls/false (apply (lambda () (call-with-values (lambda () (g3cf7@gen-syntax g3d6e@src g3dbc@y g3d70@r g3d71@maps g3d72@ellipsis? g3d73@vec?)) (lambda (g3de6@g3de3 g3de7@g3de5) ((lambda (g3dea@maps g3deb@y) (call-with-values (lambda () (g3dbd@k g3dea@maps)) (lambda (g3df2@g3def g3df3@g3df1) ((lambda (g3df6@maps g3df7@x) (values (g3cfb@gen-append g3df7@x g3deb@y) g3df6@maps)) g3df3@g3df1 g3df2@g3def)))) g3de7@g3de5 g3de6@g3de3)))) g3de0@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3dde@t))) (g2eb6@syntax-dispatch g3dde@t '_))) g3dc4@t))) (g2eb6@syntax-dispatch g3dc4@t '(any . any)))) g3dc0@t))) (g2eb6@syntax-dispatch g3dc0@t '()))) g3dbc@y)))) g3dba@f) g3db6@y (lambda (g3dfa@maps) (call-with-values (lambda () (g3cf7@gen-syntax g3d6e@src g3db4@x g3d70@r (cons '() g3dfa@maps) g3d72@ellipsis? '#f)) (lambda (g3e00@g3dfd g3e01@g3dff) ((lambda (g3e04@maps g3e05@x) (if (null? (car g3e04@maps)) (g2f9f@syntax-violation '#f '"extra ellipsis in syntax form" g3d6e@src) (values (g3cff@gen-map g3e05@x (car g3e04@maps)) (cdr g3e04@maps)))) g3e01@g3dff g3e00@g3dfd)))))) g3dac@ls/false) ((lambda (g3e08@t) ((lambda (g3e0a@ls/false) (if g3e0a@ls/false (apply (lambda (g3e0c@x g3e0d@y) (call-with-values (lambda () (g3cf7@gen-syntax g3d6e@src g3e0c@x g3d70@r g3d71@maps g3d72@ellipsis? '#f)) (lambda (g3e14@g3e11 g3e15@g3e13) ((lambda (g3e18@maps g3e19@xnew) (call-with-values (lambda () (g3cf7@gen-syntax g3d6e@src g3e0d@y g3d70@r g3e18@maps g3d72@ellipsis? g3d73@vec?)) (lambda (g3e20@g3e1d g3e21@g3e1f) ((lambda (g3e24@maps g3e25@ynew) (values (g3d01@gen-cons g3d6f@e g3e0c@x g3e0d@y g3e19@xnew g3e25@ynew) g3e24@maps)) g3e21@g3e1f g3e20@g3e1d)))) g3e15@g3e13 g3e14@g3e11)))) g3e0a@ls/false) ((lambda (g3e28@t) ((lambda (g3e2a@ls/false) (if g3e2a@ls/false (apply (lambda (g3e2c@ls) (call-with-values (lambda () (g3cf7@gen-syntax g3d6e@src g3e2c@ls g3d70@r g3d71@maps g3d72@ellipsis? '#t)) (lambda (g3e32@g3e2f g3e33@g3e31) ((lambda (g3e36@maps g3e37@lsnew) (values (g3d03@gen-vector g3d6f@e g3e2c@ls g3e37@lsnew) g3e36@maps)) g3e33@g3e31 g3e32@g3e2f)))) g3e2a@ls/false) ((lambda (g3e3a@t) ((lambda (g3e3c@ls/false) (if g3e3c@ls/false (apply (lambda () (values (list 'quote g3d6f@e) g3d71@maps)) g3e3c@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3e3a@t))) (g2eb6@syntax-dispatch g3e3a@t '_))) g3e28@t))) (g2eb6@syntax-dispatch g3e28@t '#(vector each-any)))) g3e08@t))) (g2eb6@syntax-dispatch g3e08@t '(any . any)))) g3daa@t))) (g2eb6@syntax-dispatch g3daa@t '(any any . any)))) g3d9c@t))) (g2eb6@syntax-dispatch g3d9c@t '(any any)))) g3d82@t))) (g2eb6@syntax-dispatch g3d82@t 'any))) g3d7a@t))) (g2eb6@syntax-dispatch g3d7a@t 'any))) g3d6f@e))) (set! g3cf9@gen-ref (lambda (g3d54@src g3d55@var g3d56@level g3d57@maps) (if (= g3d56@level '0) (values g3d55@var g3d57@maps) (if (null? g3d57@maps) (g2f9f@syntax-violation '#f '"missing ellipsis in syntax form" g3d54@src) (call-with-values (lambda () (g3cf9@gen-ref g3d54@src g3d55@var (- g3d56@level '1) (cdr g3d57@maps))) (lambda (g3d60@g3d5d g3d61@g3d5f) ((lambda (g3d64@outer-maps g3d65@outer-var) ((lambda (g3d68@t) (if g3d68@t ((lambda (g3d6a@b) (values (cdr g3d6a@b) g3d57@maps)) g3d68@t) ((lambda (g3d6c@inner-var) (values g3d6c@inner-var (cons (cons (cons g3d65@outer-var g3d6c@inner-var) (car g3d57@maps)) g3d64@outer-maps))) (g2c2b@gen-lexical 'tmp)))) (assq g3d65@outer-var (car g3d57@maps)))) g3d61@g3d5f g3d60@g3d5d))))))) (set! g3cfb@gen-append (lambda (g3d50@x g3d51@y) (if (fast-equal? g3d51@y ''()) g3d50@x (list 'append g3d50@x g3d51@y)))) (set! g3cfd@gen-mappend (lambda (g3d4c@e g3d4d@map-env) (list 'apply '(primitive append) (g3cff@gen-map g3d4c@e g3d4d@map-env)))) (set! g3cff@gen-map (lambda (g3d3a@e g3d3b@map-env) ((lambda (g3d3e@formals g3d3f@actuals) (if (eq? (car g3d3a@e) 'ref) (car g3d3f@actuals) (if (for-all (lambda (g3d42@x) (and (eq? (car g3d42@x) 'ref) (memq (cadr g3d42@x) g3d3e@formals))) (cdr g3d3a@e)) ((lambda (g3d44@args) (cons 'map (cons (list 'primitive (car g3d3a@e)) g3d44@args))) (map ((lambda (g3d46@r) (lambda (g3d48@x) (cdr (assq (cadr g3d48@x) g3d46@r)))) (map cons g3d3e@formals g3d3f@actuals)) (cdr g3d3a@e))) (cons* 'map (list 'lambda g3d3e@formals g3d3a@e) g3d3f@actuals)))) (map cdr g3d3b@map-env) (map (lambda (g3d4a@x) (list 'ref (car g3d4a@x))) g3d3b@map-env)))) (set! g3d01@gen-cons (lambda (g3d2a@e g3d2b@x g3d2c@y g3d2d@xnew g3d2e@ynew) ((lambda (g3d34@t) (if (memv g3d34@t '(quote)) (if (eq? (car g3d2d@xnew) 'quote) ((lambda (g3d36@xnew g3d37@ynew) (if (and (eq? g3d36@xnew g3d2b@x) (eq? g3d37@ynew g3d2c@y)) (list 'quote g3d2a@e) (list 'quote (cons g3d36@xnew g3d37@ynew)))) (cadr g3d2d@xnew) (cadr g3d2e@ynew)) (if (null? (cadr g3d2e@ynew)) (list 'list g3d2d@xnew) (list 'cons g3d2d@xnew g3d2e@ynew))) (if (memv g3d34@t '(list)) (cons 'list (cons g3d2d@xnew (cdr g3d2e@ynew))) (list 'cons g3d2d@xnew g3d2e@ynew)))) (car g3d2e@ynew)))) (set! g3d03@gen-vector (lambda (g3d24@e g3d25@ls g3d26@lsnew) (if (eq? (car g3d26@lsnew) 'quote) (if (eq? (cadr g3d26@lsnew) g3d25@ls) (list 'quote g3d24@e) (list 'quote (list->vector (cadr g3d26@lsnew)))) (if (eq? (car g3d26@lsnew) 'list) (cons 'vector (cdr g3d26@lsnew)) (list 'list->vector g3d26@lsnew))))) (set! g3d05@regen (lambda (g3d1e@x) ((lambda (g3d20@t) (if (memv g3d20@t '(ref)) (cadr g3d1e@x) (if (memv g3d20@t '(primitive)) (list 'primitive (cadr g3d1e@x)) (if (memv g3d20@t '(quote)) (list 'quote (cadr g3d1e@x)) (if (memv g3d20@t '(lambda)) (g2c07@g2b47@build-lambda '#f (cadr g3d1e@x) (g3d05@regen (caddr g3d1e@x))) (if (memv g3d20@t '(map)) ((lambda (g3d22@ls) (cons '(primitive ellipsis-map) g3d22@ls)) (map g3d05@regen (cdr g3d1e@x))) (cons (list 'primitive (car g3d1e@x)) (map g3d05@regen (cdr g3d1e@x))))))))) (car g3d1e@x)))) (lambda (g3d06@e g3d07@r g3d08@mr) ((lambda (g3d0c@t) ((lambda (g3d0e@ls/false) (if g3d0e@ls/false (apply (lambda (g3d10@x) (call-with-values (lambda () (g3cf7@gen-syntax g3d06@e g3d10@x g3d07@r '() g2eb8@ellipsis? '#f)) (lambda (g3d16@g3d13 g3d17@g3d15) ((lambda (g3d1a@maps g3d1b@e) (g3d05@regen g3d1b@e)) g3d17@g3d15 g3d16@g3d13)))) g3d0e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3d0c@t))) (g2eb6@syntax-dispatch g3d0c@t '(_ any)))) g3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2ec4@core-macro-transformer (lambda (g3e3e@name) ((lambda (g3e40@t) (if (memv g3e40@t '(quote)) g2e66@quote-transformer (if (memv g3e40@t '(lambda)) g2e6a@lambda-transformer (if (memv g3e40@t '(case-lambda)) g2e68@case-lambda-transformer (if (memv g3e40@t '(letrec)) g2e4e@letrec-transformer (if (memv g3e40@t '(letrec*)) g2e50@letrec*-transformer (if (memv g3e40@t '(if)) g2e5e@if-transformer (if (memv g3e40@t '(and)) g2e60@and-transformer (if (memv g3e40@t '(or)) g2e62@or-transformer (if (memv g3e40@t '(foreign-call)) g2eb2@foreign-call-transformer (if (memv g3e40@t '(syntax-case)) g2ebe@syntax-case-transformer (if (memv g3e40@t '(syntax)) g2ec2@syntax-transformer (if (memv g3e40@t '(type-descriptor)) g2e54@type-descriptor-transformer (if (memv g3e40@t '(record-type-descriptor)) g2e56@record-type-descriptor-transformer (if (memv g3e40@t '(record-constructor-descriptor)) g2e58@record-constructor-descriptor-transformer (if (memv g3e40@t '(fluid-let-syntax)) g2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g3e3e@name))))))))))))))))) g3e3e@name))) (set! g2ec6@symbol-macro (lambda (g3e42@x g3e43@set) ((lambda (g3e46@t) ((lambda (g3e48@ls/false) (if (and g3e48@ls/false (apply (lambda (g3e4a@name) (and (g2cab@id? g3e4a@name) (memq (g2cad@id->sym g3e4a@name) g3e43@set))) g3e48@ls/false)) (apply (lambda (g3e4c@name) (g2e6c@bless (list 'quote g3e4c@name))) g3e48@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3e46@t))) (g2eb6@syntax-dispatch g3e46@t '(_ any)))) g3e42@x))) (set! g2ec8@macro-transformer (lambda (g3e4e@x) (if (procedure? g3e4e@x) g3e4e@x (if (symbol? g3e4e@x) ((lambda (g3e50@t) (if (memv g3e50@t '(define-record-type)) g2eaa@define-record-type-macro (if (memv g3e50@t '(define-struct)) g2ea8@define-struct-macro (if (memv g3e50@t '(include)) g2e9e@include-macro (if (memv g3e50@t '(cond)) g2e9a@cond-macro (if (memv g3e50@t '(let)) g2e72@let-macro (if (memv g3e50@t '(do)) g2e92@do-macro (if (memv g3e50@t '(or)) g2e96@or-macro (if (memv g3e50@t '(and)) g2e98@and-macro (if (memv g3e50@t '(let*)) g2e94@let*-macro (if (memv g3e50@t '(let-values)) g2e74@let-values-macro (if (memv g3e50@t '(let*-values)) g2e76@let*-values-macro (if (memv g3e50@t '(syntax-rules)) g2ea2@syntax-rules-macro (if (memv g3e50@t '(quasiquote)) g2ea4@quasiquote-macro (if (memv g3e50@t '(quasisyntax)) g2ea6@quasisyntax-macro (if (memv g3e50@t '(with-syntax)) g2e6e@with-syntax-macro (if (memv g3e50@t '(when)) g2e5a@when-macro (if (memv g3e50@t '(unless)) g2e5c@unless-macro (if (memv g3e50@t '(case)) g2e64@case-macro (if (memv g3e50@t '(identifier-syntax)) g2e90@identifier-syntax-macro (if (memv g3e50@t '(time)) g2e88@time-macro (if (memv g3e50@t '(delay)) g2e8a@delay-macro (if (memv g3e50@t '(assert)) g2e8c@assert-macro (if (memv g3e50@t '(endianness)) g2e8e@endianness-macro (if (memv g3e50@t '(guard)) g2e84@guard-macro (if (memv g3e50@t '(define-enumeration)) g2e86@define-enumeration-macro (if (memv g3e50@t '(trace-lambda)) g2e78@trace-lambda-macro (if (memv g3e50@t '(trace-define)) g2e7a@trace-define-macro (if (memv g3e50@t '(trace-define-syntax)) g2e7c@trace-define-syntax-macro (if (memv g3e50@t '(trace-let-syntax)) g2e80@trace-let-syntax-macro (if (memv g3e50@t '(trace-letrec-syntax)) g2e82@trace-letrec-syntax-macro (if (memv g3e50@t '(define-condition-type)) g2eac@define-condition-type-macro (if (memv g3e50@t '(parameterize)) g2eb0@parameterize-macro (if (memv g3e50@t '(include-into)) g2ea0@include-into-macro (if (memv g3e50@t '(eol-style)) (lambda (g3e52@x) (g2ec6@symbol-macro g3e52@x '(none lf cr crlf nel crnel ls))) (if (memv g3e50@t '(error-handling-mode)) (lambda (g3e54@x) (g2ec6@symbol-macro g3e54@x '(ignore raise replace))) (if (memv g3e50@t '(buffer-mode)) (lambda (g3e56@x) (g2ec6@symbol-macro g3e56@x '(none line block))) (if (memv g3e50@t '(file-options)) g2c1e@file-options-macro (if (memv g3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" g3e4e@x)))))))))))))))))))))))))))))))))))))))) g3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" g3e4e@x))))) (set! g2eca@local-macro-transformer (lambda (g3e58@x) (car g3e58@x))) (set! g2ecc@do-macro-call (lambda (g3e5a@transformer g3e5b@expr) ((lambda (g3e5e@out) (begin ((letrec ((g3e60@f (lambda (g3e62@x) (if (not (g2c73@stx? g3e62@x)) (if (pair? g3e62@x) (begin (g3e60@f (car g3e62@x)) (g3e60@f (cdr g3e62@x))) (if (vector? g3e62@x) (vector-for-each g3e60@f g3e62@x) (if (symbol? g3e62@x) (g2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" g3e5b@expr g3e62@x) (void)))) (void))))) g3e60@f) g3e5e@out) (g2c95@add-mark (g2c8b@gen-mark) g3e5e@out g3e5b@expr))) (g3e5a@transformer (g2c95@add-mark g2c8d@anti-mark g3e5b@expr '#f))))) (set! g2ece@chi-macro (lambda (g3e64@p g3e65@e) (g2ecc@do-macro-call (g2ec8@macro-transformer g3e64@p) g3e65@e))) (set! g2ed0@chi-local-macro (lambda (g3e68@p g3e69@e) (g2ecc@do-macro-call (g2eca@local-macro-transformer g3e68@p) g3e69@e))) (set! g2ed2@chi-global-macro (lambda (g3e6c@p g3e6d@e) ((lambda (g3e70@lib g3e71@loc) (begin (g2ad0@g2972@visit-library g3e70@lib) ((lambda (g3e74@x) ((lambda (g3e76@transformer) (g2ecc@do-macro-call g3e76@transformer g3e6d@e)) (if (procedure? g3e74@x) g3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" g3e74@x)))) (symbol-value g3e71@loc)))) (car g3e6c@p) (cdr g3e6c@p)))) (set! g2ed4@chi-expr* (lambda (g3e78@e* g3e79@r g3e7a@mr) (if (null? g3e78@e*) '() ((lambda (g3e7e@e) (cons g3e7e@e (g2ed4@chi-expr* (cdr g3e78@e*) g3e79@r g3e7a@mr))) (g2ed8@chi-expr (car g3e78@e*) g3e79@r g3e7a@mr))))) (set! g2ed6@chi-application (lambda (g3e80@e g3e81@r g3e82@mr) ((lambda (g3e86@t) ((lambda (g3e88@ls/false) (if g3e88@ls/false (apply (lambda (g3e8a@rator g3e8b@rands) ((lambda (g3e8e@rator) (cons g3e8e@rator (g2ed4@chi-expr* g3e8b@rands g3e81@r g3e82@mr))) (g2ed8@chi-expr g3e8a@rator g3e81@r g3e82@mr))) g3e88@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3e86@t))) (g2eb6@syntax-dispatch g3e86@t '(any . each-any)))) g3e80@e))) (set! g2ed8@chi-expr (lambda (g3e90@e g3e91@r g3e92@mr) (call-with-values (lambda () (g2cd3@syntax-type g3e90@e g3e91@r)) (lambda (g3e9c@g3e97 g3e9d@g3e99 g3e9e@g3e9b) ((lambda (g3ea2@kwd g3ea3@value g3ea4@type) ((lambda (g3ea8@t) (if (memv g3ea8@t '(core-macro)) ((lambda (g3eaa@transformer) (g3eaa@transformer g3e90@e g3e91@r g3e92@mr)) (g2ec4@core-macro-transformer g3ea3@value)) (if (memv g3ea8@t '(global)) ((lambda (g3eac@lib) ((lambda (g3eae@loc) ((lambda () (begin ((g2f21@inv-collector) g3eac@lib) g3eae@loc)))) (cdr g3ea3@value))) (car g3ea3@value)) (if (memv g3ea8@t '(core-prim)) ((lambda (g3eb0@name) (list 'primitive g3eb0@name)) g3ea3@value) (if (memv g3ea8@t '(call)) (g2ed6@chi-application g3e90@e g3e91@r g3e92@mr) (if (memv g3ea8@t '(lexical)) ((lambda (g3eb2@lex) g3eb2@lex) (g2e42@lexical-var g3ea3@value)) (if (memv g3ea8@t '(global-macro global-macro!)) (g2ed8@chi-expr (g2ed2@chi-global-macro g3ea3@value g3e90@e) g3e91@r g3e92@mr) (if (memv g3ea8@t '(local-macro local-macro!)) (g2ed8@chi-expr (g2ed0@chi-local-macro g3ea3@value g3e90@e) g3e91@r g3e92@mr) (if (memv g3ea8@t '(macro macro!)) (g2ed8@chi-expr (g2ece@chi-macro g3ea3@value g3e90@e) g3e91@r g3e92@mr) (if (memv g3ea8@t '(constant)) ((lambda (g3eb4@datum) (list 'quote g3eb4@datum)) g3ea3@value) (if (memv g3ea8@t '(set!)) (g2eda@chi-set! g3e90@e g3e91@r g3e92@mr) (if (memv g3ea8@t '(begin)) ((lambda (g3eb6@t) ((lambda (g3eb8@ls/false) (if g3eb8@ls/false (apply (lambda (g3eba@x g3ebb@x*) (g2c0a@g2b79@build-sequence '#f (g2ed4@chi-expr* (cons g3eba@x g3ebb@x*) g3e91@r g3e92@mr))) g3eb8@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3eb6@t))) (g2eb6@syntax-dispatch g3eb6@t '(_ any . each-any)))) g3e90@e) (if (memv g3ea8@t '(let-syntax letrec-syntax)) ((lambda (g3ebe@t) ((lambda (g3ec0@ls/false) (if (and g3ec0@ls/false (apply (lambda (g3ec2@xlhs* g3ec3@xrhs* g3ec4@xbody g3ec5@xbody*) (if (not (g2cb5@valid-bound-ids? g3ec2@xlhs*)) (g2f9f@syntax-violation '#f '"invalid identifiers" g3e90@e) (void))) g3ec0@ls/false)) (apply (lambda (g3eca@xlhs* g3ecb@xrhs* g3ecc@xbody g3ecd@xbody*) ((lambda (g3ed2@xlab*) ((lambda (g3ed4@xrib) ((lambda (g3ed6@xb*) ((lambda () (g2c0a@g2b79@build-sequence '#f (g2ed4@chi-expr* (map (lambda (g3ed8@x) (g2c97@add-subst g3ed4@xrib g3ed8@x)) (cons g3ecc@xbody g3ecd@xbody*)) (append (map cons g3ed2@xlab* g3ed6@xb*) g3e91@r) (append (map cons g3ed2@xlab* g3ed6@xb*) g3e92@mr)))))) (map (lambda (g3eda@x) (g2ce9@make-eval-transformer (g2f13@expand-transformer (if (eq? g3ea4@type 'let-syntax) g3eda@x (g2c97@add-subst g3ed4@xrib g3eda@x)) g3e92@mr))) g3ecb@xrhs*))) (g2c66@make-full-rib g3eca@xlhs* g3ed2@xlab*))) (map g2c2f@gen-label g3eca@xlhs*))) g3ec0@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3ebe@t))) (g2eb6@syntax-dispatch g3ebe@t '(_ #(each (any any)) any . each-any)))) g3e90@e) (if (memv g3ea8@t '(displaced-lexical)) (g2f9f@syntax-violation '#f '"identifier out of context" g3e90@e) (if (memv g3ea8@t '(syntax)) (g2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" g3e90@e) (if (memv g3ea8@t '(define define-syntax module import library)) (g2f9f@syntax-violation '#f (string-append ((lambda (g3edc@t) (if (memv g3edc@t '(define)) '"a definition" (if (memv g3edc@t '(define-syntax)) '"a define-syntax" (if (memv g3edc@t '(module)) '"a module definition" (if (memv g3edc@t '(library)) '"a library definition" (if (memv g3edc@t '(import)) '"an import declaration" (if (memv g3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) g3ea4@type) '" was found where an expression was expected") g3e90@e) (if (memv g3ea8@t '(mutable)) (g2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" g3e90@e) (g2f9f@syntax-violation '#f '"invalid expression" g3e90@e)))))))))))))))))) g3ea4@type)) g3e9e@g3e9b g3e9d@g3e99 g3e9c@g3e97))))) (set! g2eda@chi-set! (lambda (g3ede@e g3edf@r g3ee0@mr) ((lambda (g3ee4@t) ((lambda (g3ee6@ls/false) (if (and g3ee6@ls/false (apply (lambda (g3ee8@x g3ee9@v) (g2cab@id? g3ee8@x)) g3ee6@ls/false)) (apply (lambda (g3eec@x g3eed@v) (call-with-values (lambda () (g2cd3@syntax-type g3eec@x g3edf@r)) (lambda (g3ef6@g3ef1 g3ef7@g3ef3 g3ef8@g3ef5) ((lambda (g3efc@kwd g3efd@value g3efe@type) ((lambda (g3f02@t) (if (memv g3f02@t '(lexical)) (begin (g2e46@set-lexical-mutable! g3efd@value '#t) (list 'set! (g2e42@lexical-var g3efd@value) (g2ed8@chi-expr g3eed@v g3edf@r g3ee0@mr))) (if (memv g3f02@t '(core-prim)) (g2f9f@syntax-violation '#f '"cannot modify imported core primitive" g3ede@e) (if (memv g3f02@t '(global)) (g2f9f@syntax-violation '#f '"attempt to modify imported binding" g3ede@e) (if (memv g3f02@t '(global-macro!)) (g2ed8@chi-expr (g2ed2@chi-global-macro g3efd@value g3ede@e) g3edf@r g3ee0@mr) (if (memv g3f02@t '(local-macro!)) (g2ed8@chi-expr (g2ed0@chi-local-macro g3efd@value g3ede@e) g3edf@r g3ee0@mr) (if (memv g3f02@t '(mutable)) (g2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" g3ede@e) (g2f9f@syntax-violation '#f '"invalid syntax" g3ede@e)))))))) g3efe@type)) g3ef8@g3ef5 g3ef7@g3ef3 g3ef6@g3ef1)))) g3ee6@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3ee4@t))) (g2eb6@syntax-dispatch g3ee4@t '(_ any any)))) g3ede@e))) (set! g2edc@verify-formals (lambda (g3f04@fmls g3f05@stx) ((lambda (g3f08@t) ((lambda (g3f0a@ls/false) (if g3f0a@ls/false (apply (lambda (g3f0c@x*) (if (not (g2cb5@valid-bound-ids? g3f0c@x*)) (g2e70@invalid-fmls-error g3f05@stx g3f04@fmls) (void))) g3f0a@ls/false) ((lambda (g3f0e@t) ((lambda (g3f10@ls/false) (if g3f10@ls/false (apply (lambda (g3f12@x* g3f13@x) (if (not (g2cb5@valid-bound-ids? (cons g3f13@x g3f12@x*))) (g2e70@invalid-fmls-error g3f05@stx g3f04@fmls) (void))) g3f10@ls/false) ((lambda (g3f16@t) ((lambda (g3f18@ls/false) (if g3f18@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid syntax" g3f05@stx)) g3f18@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3f16@t))) (g2eb6@syntax-dispatch g3f16@t '_))) g3f0e@t))) (g2eb6@syntax-dispatch g3f0e@t '#(each+ any () any)))) g3f08@t))) (g2eb6@syntax-dispatch g3f08@t 'each-any))) g3f04@fmls))) (set! g2ede@chi-lambda-clause (lambda (g3f1a@stx g3f1b@fmls g3f1c@body* g3f1d@r g3f1e@mr) ((lambda (g3f24@t) ((lambda (g3f26@ls/false) (if g3f26@ls/false (apply (lambda (g3f28@x*) (begin (g2edc@verify-formals g3f1b@fmls g3f1a@stx) ((lambda (g3f2a@lex* g3f2b@lab*) (values g3f2a@lex* (g2eee@chi-internal (g2c97@add-subst (g2c66@make-full-rib g3f28@x* g3f2b@lab*) g3f1c@body*) (g2e4a@add-lexicals g3f2b@lab* g3f2a@lex* g3f1d@r) g3f1e@mr))) (map g2c2b@gen-lexical g3f28@x*) (map g2c2f@gen-label g3f28@x*)))) g3f26@ls/false) ((lambda (g3f2e@t) ((lambda (g3f30@ls/false) (if g3f30@ls/false (apply (lambda (g3f32@x* g3f33@x) (begin (g2edc@verify-formals g3f1b@fmls g3f1a@stx) ((lambda (g3f36@lex* g3f37@lab* g3f38@lex g3f39@lab) (values (append g3f36@lex* g3f38@lex) (g2eee@chi-internal (g2c97@add-subst (g2c66@make-full-rib (cons g3f33@x g3f32@x*) (cons g3f39@lab g3f37@lab*)) g3f1c@body*) (g2e4a@add-lexicals (cons g3f39@lab g3f37@lab*) (cons g3f38@lex g3f36@lex*) g3f1d@r) g3f1e@mr))) (map g2c2b@gen-lexical g3f32@x*) (map g2c2f@gen-label g3f32@x*) (g2c2b@gen-lexical g3f33@x) (g2c2f@gen-label g3f33@x)))) g3f30@ls/false) ((lambda (g3f3e@t) ((lambda (g3f40@ls/false) (if g3f40@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid syntax" g3f1b@fmls)) g3f40@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g3f3e@t))) (g2eb6@syntax-dispatch g3f3e@t '_))) g3f2e@t))) (g2eb6@syntax-dispatch g3f2e@t '#(each+ any () any)))) g3f24@t))) (g2eb6@syntax-dispatch g3f24@t 'each-any))) g3f1b@fmls))) (set! g2ee0@chi-lambda-clause* (lambda (g3f42@stx g3f43@fmls* g3f44@body** g3f45@r g3f46@mr) (if (null? g3f43@fmls*) (values '() '()) (call-with-values (lambda () (g2ede@chi-lambda-clause g3f42@stx (car g3f43@fmls*) (car g3f44@body**) g3f45@r g3f46@mr)) (lambda (g3f50@g3f4d g3f51@g3f4f) ((lambda (g3f54@b g3f55@a) (call-with-values (lambda () (g2ee0@chi-lambda-clause* g3f42@stx (cdr g3f43@fmls*) (cdr g3f44@body**) g3f45@r g3f46@mr)) (lambda (g3f5c@g3f59 g3f5d@g3f5b) ((lambda (g3f60@b* g3f61@a*) (values (cons g3f55@a g3f61@a*) (cons g3f54@b g3f60@b*))) g3f5d@g3f5b g3f5c@g3f59)))) g3f51@g3f4f g3f50@g3f4d)))))) (set! g2ee2@chi-defun (lambda (g3f64@x g3f65@r g3f66@mr) ((lambda (g3f6a@fmls g3f6b@body*) (call-with-values (lambda () (g2ede@chi-lambda-clause g3f6a@fmls g3f6a@fmls g3f6b@body* g3f65@r g3f66@mr)) (lambda (g3f72@g3f6f g3f73@g3f71) ((lambda (g3f76@body g3f77@fmls) (g2c07@g2b47@build-lambda '#f g3f77@fmls g3f76@body)) g3f73@g3f71 g3f72@g3f6f)))) (car g3f64@x) (cdr g3f64@x)))) (set! g2ee4@chi-rhs (lambda (g3f7a@rhs g3f7b@r g3f7c@mr) ((lambda (g3f80@t) (if (memv g3f80@t '(defun)) (g2ee2@chi-defun (cdr g3f7a@rhs) g3f7b@r g3f7c@mr) (if (memv g3f80@t '(expr)) ((lambda (g3f82@expr) (g2ed8@chi-expr g3f82@expr g3f7b@r g3f7c@mr)) (cdr g3f7a@rhs)) (if (memv g3f80@t '(top-expr)) ((lambda (g3f84@expr) (g2c0a@g2b79@build-sequence '#f (list (g2ed8@chi-expr g3f84@expr g3f7b@r g3f7c@mr) (g2c0b@g2b7b@build-void)))) (cdr g3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g3f7a@rhs))))) (car g3f7a@rhs)))) (set! g2ee6@expand-interaction-rhs*/init* (lambda (g3f86@lhs* g3f87@rhs* g3f88@init* g3f89@r g3f8a@mr) ((letrec ((g3f90@f (lambda (g3f92@lhs* g3f93@rhs*) (if (null? g3f92@lhs*) (map (lambda (g3f96@x) (g2ed8@chi-expr g3f96@x g3f89@r g3f8a@mr)) g3f88@init*) ((lambda (g3f98@lhs g3f99@rhs) ((lambda (g3f9c@t) (if (memv g3f9c@t '(defun)) ((lambda (g3f9e@rhs) (cons (list 'set! g3f98@lhs g3f9e@rhs) (g3f90@f (cdr g3f92@lhs*) (cdr g3f93@rhs*)))) (g2ee2@chi-defun (cdr g3f99@rhs) g3f89@r g3f8a@mr)) (if (memv g3f9c@t '(expr)) ((lambda (g3fa0@rhs) (cons (list 'set! g3f98@lhs g3fa0@rhs) (g3f90@f (cdr g3f92@lhs*) (cdr g3f93@rhs*)))) (g2ed8@chi-expr (cdr g3f99@rhs) g3f89@r g3f8a@mr)) (if (memv g3f9c@t '(top-expr)) ((lambda (g3fa2@e) (cons g3fa2@e (g3f90@f (cdr g3f92@lhs*) (cdr g3f93@rhs*)))) (g2ed8@chi-expr (cdr g3f99@rhs) g3f89@r g3f8a@mr)) (error 'expand-interaction '"invallid" g3f99@rhs))))) (car g3f99@rhs))) (car g3f92@lhs*) (car g3f93@rhs*)))))) g3f90@f) g3f86@lhs* g3f87@rhs*))) (set! g2ee8@chi-rhs* (lambda (g3fa4@rhs* g3fa5@r g3fa6@mr) ((letrec ((g3faa@f (lambda (g3fac@ls) (if (null? g3fac@ls) '() ((lambda (g3fae@a) (cons g3fae@a (g3faa@f (cdr g3fac@ls)))) (g2ee4@chi-rhs (car g3fac@ls) g3fa5@r g3fa6@mr)))))) g3faa@f) g3fa4@rhs*))) (set! g2eea@find-bound=? (lambda (g3fb0@x g3fb1@lhs* g3fb2@rhs*) (if (null? g3fb1@lhs*) '#f (if (g2cb1@bound-id=? g3fb0@x (car g3fb1@lhs*)) (car g3fb2@rhs*) (g2eea@find-bound=? g3fb0@x (cdr g3fb1@lhs*) (cdr g3fb2@rhs*)))))) (set! g2eec@find-dups (lambda (g3fb6@ls) ((letrec ((g3fb8@f (lambda (g3fba@ls g3fbb@dups) (if (null? g3fba@ls) g3fbb@dups ((lambda (g3fbe@t) (if g3fbe@t ((lambda (g3fc0@x) (g3fb8@f (cdr g3fba@ls) (cons (list (car g3fba@ls) g3fc0@x) g3fbb@dups))) g3fbe@t) (g3fb8@f (cdr g3fba@ls) g3fbb@dups))) (g2eea@find-bound=? (car g3fba@ls) (cdr g3fba@ls) (cdr g3fba@ls))))))) g3fb8@f) g3fb6@ls '()))) (set! g2eee@chi-internal (lambda (g3fc2@e* g3fc3@r g3fc4@mr) ((lambda (g3fc8@rib) (call-with-values (lambda () (g2f11@chi-body* (map (lambda (g3fda@x) (g2c97@add-subst g3fc8@rib g3fda@x)) (g2ca9@syntax->list g3fc2@e*)) g3fc3@r g3fc4@mr '() '() '() '() '() g3fc8@rib '#f)) (lambda (g3fdc@g3fcb g3fdd@g3fcd g3fde@g3fcf g3fdf@g3fd1 g3fe0@g3fd3 g3fe1@g3fd5 g3fe2@g3fd7 g3fe3@g3fd9) ((lambda (g3fec@_exp* g3fed@kwd* g3fee@mod** g3fef@rhs* g3ff0@lex* g3ff1@mr g3ff2@r g3ff3@e*) (begin (if (null? g3ff3@e*) (g2f9f@syntax-violation '#f '"no expression in body" g3ff3@e*) (void)) ((lambda (g3ffc@init*) ((lambda (g3ffe@rhs*) ((lambda () (g2c0d@g2b7f@build-letrec* '#f (reverse g3ff0@lex*) (reverse g3ffe@rhs*) (g2c0a@g2b79@build-sequence '#f g3ffc@init*))))) (g2ee8@chi-rhs* g3fef@rhs* g3ff2@r g3ff1@mr))) (g2ed4@chi-expr* (append (apply append (reverse g3fee@mod**)) g3ff3@e*) g3ff2@r g3ff1@mr)))) g3fe3@g3fd9 g3fe2@g3fd7 g3fe1@g3fd5 g3fe0@g3fd3 g3fdf@g3fd1 g3fde@g3fcf g3fdd@g3fcd g3fdc@g3fcb)))) (g2c5a@make-empty-rib)))) (set! g2ef0@parse-module (lambda (g4000@e) ((lambda (g4002@t) ((lambda (g4004@ls/false) (if g4004@ls/false (apply (lambda (g4006@export* g4007@b*) (begin (if (not (for-all g2cab@id? g4006@export*)) (g2f9f@syntax-violation '#f '"module exports must be identifiers" g4000@e) (void)) (values '#f (list->vector g4006@export*) g4007@b*))) g4004@ls/false) ((lambda (g400a@t) ((lambda (g400c@ls/false) (if g400c@ls/false (apply (lambda (g400e@name g400f@export* g4010@b*) (begin (if (not (g2cab@id? g400e@name)) (g2f9f@syntax-violation '#f '"module name must be an identifier" g4000@e) (void)) (if (not (for-all g2cab@id? g400f@export*)) (g2f9f@syntax-violation '#f '"module exports must be identifiers" g4000@e) (void)) (values g400e@name (list->vector g400f@export*) g4010@b*))) g400c@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g400a@t))) (g2eb6@syntax-dispatch g400a@t '(_ any each-any . each-any)))) g4002@t))) (g2eb6@syntax-dispatch g4002@t '(_ each-any . each-any)))) g4000@e))) (set! g2ef6@g2ef1 (make-record-type-descriptor 'module-interface '#f 'g2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! g2ef8@g2ef3 '#f) (set! g2efa@g2ef2 (make-record-constructor-descriptor g2ef6@g2ef1 '#f g2ef8@g2ef3)) (set! g2efd@module-interface? (record-predicate g2ef6@g2ef1)) (set! g2eff@make-module-interface (record-constructor g2efa@g2ef2)) (set! g2f01@module-interface-first-mark (record-accessor g2ef6@g2ef1 '0)) (set! g2f03@module-interface-exp-id-vec (record-accessor g2ef6@g2ef1 '1)) (set! g2f05@module-interface-exp-lab-vec (record-accessor g2ef6@g2ef1 '2)) (set! g2f07@set-module-interface-first-mark! (record-mutator g2ef6@g2ef1 '0)) (set! g2f09@set-module-interface-exp-id-vec! (record-mutator g2ef6@g2ef1 '1)) (set! g2f0b@set-module-interface-exp-lab-vec! (record-mutator g2ef6@g2ef1 '2)) (set! g2f0d@module-interface-exp-id* (lambda (g4014@iface g4015@id) ((lambda (g4019@diff-marks) (begin (set! g4019@diff-marks (lambda (g4020@ls g4021@x) (begin (if (null? g4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (g4024@a) (if (eq? g4024@a g4021@x) '() (cons g4024@a (g4019@diff-marks (cdr g4020@ls) g4021@x)))) (car g4020@ls))))) ((lambda (g401a@diff g401b@id-vec) (if (null? g401a@diff) g401b@id-vec (vector-map (lambda (g401e@x) (g2c75@make-stx (g2c77@stx-expr g401e@x) (append g401a@diff (g2c79@stx-mark* g401e@x)) '() '())) g401b@id-vec))) (g4019@diff-marks (g2c79@stx-mark* g4015@id) (g2f01@module-interface-first-mark g4014@iface)) (g2f03@module-interface-exp-id-vec g4014@iface)))) '#f))) (set! g2f0f@chi-internal-module (lambda (g4026@e g4027@r g4028@mr g4029@lex* g402a@rhs* g402b@mod** g402c@kwd*) (call-with-values (lambda () (g2ef0@parse-module g4026@e)) (lambda (g403a@g4035 g403b@g4037 g403c@g4039) ((lambda (g4040@e* g4041@exp-id* g4042@name) ((lambda (g4046@rib) ((lambda (g4048@e*) ((lambda () (call-with-values (lambda () (g2f11@chi-body* g4048@e* g4027@r g4028@mr g4029@lex* g402a@rhs* g402b@mod** g402c@kwd* '() g4046@rib '#f)) (lambda (g405a@g404b g405b@g404d g405c@g404f g405d@g4051 g405e@g4053 g405f@g4055 g4060@g4057 g4061@g4059) ((lambda (g406a@_exp* g406b@kwd* g406c@mod** g406d@rhs* g406e@lex* g406f@mr g4070@r g4071@e*) ((lambda (g407a@exp-lab* g407b@mod**) (if (not g4042@name) (values g406e@lex* g406d@rhs* g4041@exp-id* g407a@exp-lab* g4070@r g406f@mr g407b@mod** g406b@kwd*) ((lambda (g407e@lab g407f@iface) (values g406e@lex* g406d@rhs* (vector g4042@name) (vector g407e@lab) (cons (cons g407e@lab (cons '$module g407f@iface)) g4070@r) (cons (cons g407e@lab (cons '$module g407f@iface)) g406f@mr) g407b@mod** g406b@kwd*)) (g2c2f@gen-label 'module) (g2eff@make-module-interface (car (g2c79@stx-mark* g4042@name)) (vector-map (lambda (g4082@x) (g2c75@make-stx (g2c77@stx-expr g4082@x) (g2c79@stx-mark* g4082@x) '() '())) g4041@exp-id*) g407a@exp-lab*)))) (vector-map (lambda (g4084@x) (or (g2cc5@id->label (g2c75@make-stx (g2cad@id->sym g4084@x) (g2c79@stx-mark* g4084@x) (list g4046@rib) '())) (g2f9f@syntax-violation '#f '"cannot find module export" g4084@x))) g4041@exp-id*) (cons g4071@e* g406c@mod**))) g4061@g4059 g4060@g4057 g405f@g4055 g405e@g4053 g405d@g4051 g405c@g404f g405b@g404d g405a@g404b)))))) (map (lambda (g4086@x) (g2c97@add-subst g4046@rib g4086@x)) (g2ca9@syntax->list g4040@e*)))) (g2c5a@make-empty-rib))) g403c@g4039 g403b@g4037 g403a@g4035))))) (set! g2f11@chi-body* (lambda (g4088@e* g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g408e@kwd* g408f@exp* g4090@rib g4091@top?) (if (null? g4088@e*) (values g4088@e* g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g408e@kwd* g408f@exp*) ((lambda (g409c@e) (call-with-values (lambda () (g2cd3@syntax-type g409c@e g4089@r)) (lambda (g40a4@g409f g40a5@g40a1 g40a6@g40a3) ((lambda (g40aa@kwd g40ab@value g40ac@type) ((lambda (g40b0@kwd*) ((lambda (g40b2@t) (if (memv g40b2@t '(define)) (call-with-values (lambda () (g2e3a@parse-define g409c@e)) (lambda (g40b8@g40b5 g40b9@g40b7) ((lambda (g40bc@rhs g40bd@id) (begin (if (g2cb9@bound-id-member? g40bd@id g40b0@kwd*) (g2f9f@syntax-violation '#f '"cannot redefine keyword" g409c@e) (void)) (call-with-values (lambda () (g2c33@gen-define-label+loc g40bd@id g4090@rib)) (lambda (g40c4@g40c1 g40c5@g40c3) ((lambda (g40c8@lex g40c9@lab) (begin (g2c5c@extend-rib! g4090@rib g40bd@id g40c9@lab) (g2f11@chi-body* (cdr g4088@e*) (g2e48@add-lexical g40c9@lab g40c8@lex g4089@r) g408a@mr (cons g40c8@lex g408b@lex*) (cons g40bc@rhs g408c@rhs*) g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?))) g40c5@g40c3 g40c4@g40c1))))) g40b9@g40b7 g40b8@g40b5))) (if (memv g40b2@t '(define-syntax)) (call-with-values (lambda () (g2e3c@parse-define-syntax g409c@e)) (lambda (g40d0@g40cd g40d1@g40cf) ((lambda (g40d4@rhs g40d5@id) (begin (if (g2cb9@bound-id-member? g40d5@id g40b0@kwd*) (g2f9f@syntax-violation '#f '"cannot redefine keyword" g409c@e) (void)) ((lambda (g40d8@lab g40d9@expanded-rhs) (begin (g2c5c@extend-rib! g4090@rib g40d5@id g40d8@lab) ((lambda (g40dc@b) (g2f11@chi-body* (cdr g4088@e*) (cons (cons g40d8@lab g40dc@b) g4089@r) (cons (cons g40d8@lab g40dc@b) g408a@mr) g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?)) (g2ce9@make-eval-transformer g40d9@expanded-rhs)))) (g2c35@gen-define-label g40d5@id g4090@rib) (g2f13@expand-transformer g40d4@rhs g408a@mr)))) g40d1@g40cf g40d0@g40cd))) (if (memv g40b2@t '(let-syntax letrec-syntax)) ((lambda (g40de@t) ((lambda (g40e0@ls/false) (if (and g40e0@ls/false (apply (lambda (g40e2@xlhs* g40e3@xrhs* g40e4@xbody*) (if (not (g2cb5@valid-bound-ids? g40e2@xlhs*)) (g2f9f@syntax-violation '#f '"invalid identifiers" g409c@e) (void))) g40e0@ls/false)) (apply (lambda (g40e8@xlhs* g40e9@xrhs* g40ea@xbody*) ((lambda (g40ee@xlab*) ((lambda (g40f0@xrib) ((lambda (g40f2@xb*) ((lambda () (g2f11@chi-body* (append (map (lambda (g40f4@x) (g2c97@add-subst g40f0@xrib g40f4@x)) g40ea@xbody*) (cdr g4088@e*)) (append (map cons g40ee@xlab* g40f2@xb*) g4089@r) (append (map cons g40ee@xlab* g40f2@xb*) g408a@mr) g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?)))) (map (lambda (g40f6@x) (g2ce9@make-eval-transformer (g2f13@expand-transformer (if (eq? g40ac@type 'let-syntax) g40f6@x (g2c97@add-subst g40f0@xrib g40f6@x)) g408a@mr))) g40e9@xrhs*))) (g2c66@make-full-rib g40e8@xlhs* g40ee@xlab*))) (map g2c2f@gen-label g40e8@xlhs*))) g40e0@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g40de@t))) (g2eb6@syntax-dispatch g40de@t '(_ #(each (any any)) . each-any)))) g409c@e) (if (memv g40b2@t '(begin)) ((lambda (g40f8@t) ((lambda (g40fa@ls/false) (if g40fa@ls/false (apply (lambda (g40fc@x*) (g2f11@chi-body* (append g40fc@x* (cdr g4088@e*)) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?)) g40fa@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g40f8@t))) (g2eb6@syntax-dispatch g40f8@t '(_ . each-any)))) g409c@e) (if (memv g40b2@t '(global-macro global-macro!)) (g2f11@chi-body* (cons (g2c97@add-subst g4090@rib (g2ed2@chi-global-macro g40ab@value g409c@e)) (cdr g4088@e*)) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?) (if (memv g40b2@t '(local-macro local-macro!)) (g2f11@chi-body* (cons (g2c97@add-subst g4090@rib (g2ed0@chi-local-macro g40ab@value g409c@e)) (cdr g4088@e*)) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?) (if (memv g40b2@t '(macro macro!)) (g2f11@chi-body* (cons (g2c97@add-subst g4090@rib (g2ece@chi-macro g40ab@value g409c@e)) (cdr g4088@e*)) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?) (if (memv g40b2@t '(module)) (call-with-values (lambda () (g2f0f@chi-internal-module g409c@e g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd*)) (lambda (g410e@g40ff g410f@g4101 g4110@g4103 g4111@g4105 g4112@g4107 g4113@g4109 g4114@g410b g4115@g410d) ((lambda (g411e@kwd* g411f@mod** g4120@mr g4121@r g4122@m-exp-lab* g4123@m-exp-id* g4124@rhs* g4125@lex*) (begin (vector-for-each (lambda (g412e@id g412f@lab) (g2c5c@extend-rib! g4090@rib g412e@id g412f@lab)) g4123@m-exp-id* g4122@m-exp-lab*) (g2f11@chi-body* (cdr g4088@e*) g4121@r g4120@mr g4125@lex* g4124@rhs* g411f@mod** g411e@kwd* g408f@exp* g4090@rib g4091@top?))) g4115@g410d g4114@g410b g4113@g4109 g4112@g4107 g4111@g4105 g4110@g4103 g410f@g4101 g410e@g40ff))) (if (memv g40b2@t '(library)) (begin (g2f81@library-expander (g2cc1@stx->datum g409c@e)) (g2f11@chi-body* (cdr g4088@e*) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?)) (if (memv g40b2@t '(export)) ((lambda (g4132@t) ((lambda (g4134@ls/false) (if g4134@ls/false (apply (lambda (g4136@exp-decl*) (g2f11@chi-body* (cdr g4088@e*) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* (append g4136@exp-decl* g408f@exp*) g4090@rib g4091@top?)) g4134@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g4132@t))) (g2eb6@syntax-dispatch g4132@t '(_ . each-any)))) g409c@e) (if (memv g40b2@t '(import)) ((lambda () ((lambda (g4139@module-import? g413b@module-import g413d@library-import) (begin (set! g4139@module-import? (lambda (g418c@e) ((lambda (g418e@t) ((lambda (g4190@ls/false) (if (and g4190@ls/false (apply (lambda (g4192@id) (g2cab@id? g4192@id)) g4190@ls/false)) (apply (lambda (g4194@id) '#t) g4190@ls/false) ((lambda (g4196@t) ((lambda (g4198@ls/false) (if g4198@ls/false (apply (lambda (g419a@imp*) '#f) g4198@ls/false) ((lambda (g419c@t) ((lambda (g419e@ls/false) (if g419e@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"malformed import form" g418c@e)) g419e@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g419c@t))) (g2eb6@syntax-dispatch g419c@t '_))) g4196@t))) (g2eb6@syntax-dispatch g4196@t '(_ . each-any)))) g418e@t))) (g2eb6@syntax-dispatch g418e@t '(_ any)))) g418c@e))) (set! g413b@module-import (lambda (g416a@e g416b@r) ((lambda (g416e@t) ((lambda (g4170@ls/false) (if (and g4170@ls/false (apply (lambda (g4172@id) (g2cab@id? g4172@id)) g4170@ls/false)) (apply (lambda (g4174@id) (call-with-values (lambda () (g2cd3@syntax-type g4174@id g416b@r)) (lambda (g417c@g4177 g417d@g4179 g417e@g417b) ((lambda (g4182@kwd g4183@value g4184@type) ((lambda (g4188@t) (if (memv g4188@t '($module)) ((lambda (g418a@iface) (values (g2f0d@module-interface-exp-id* g418a@iface g4174@id) (g2f05@module-interface-exp-lab-vec g418a@iface))) g4183@value) (g2f9f@syntax-violation '#f '"invalid import" g416a@e))) g4184@type)) g417e@g417b g417d@g4179 g417c@g4177)))) g4170@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g416e@t))) (g2eb6@syntax-dispatch g416e@t '(_ any)))) g416a@e))) (set! g413d@library-import (lambda (g414e@e) ((lambda (g4150@t) ((lambda (g4152@ls/false) (if g4152@ls/false (apply (lambda (g4154@ctxt g4155@imp*) (call-with-values (lambda () (g2f1b@parse-import-spec* (g2fa5@syntax->datum g4155@imp*))) (lambda (g415c@g4159 g415d@g415b) ((lambda (g4160@subst-labels g4161@subst-names) (values (vector-map (lambda (g4164@name) (g2c89@datum->stx g4154@ctxt g4164@name)) g4161@subst-names) g4160@subst-labels)) g415d@g415b g415c@g4159)))) g4152@ls/false) ((lambda (g4166@t) ((lambda (g4168@ls/false) (if g4168@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid import form" g414e@e)) g4168@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g4166@t))) (g2eb6@syntax-dispatch g4166@t '_))) g4150@t))) (g2eb6@syntax-dispatch g4150@t '(any . each-any)))) g414e@e))) (begin (call-with-values (lambda () (if (g4139@module-import? g409c@e) (g413b@module-import g409c@e g4089@r) (g413d@library-import g409c@e))) (lambda (g4142@g413f g4143@g4141) ((lambda (g4146@lab* g4147@id*) (vector-for-each (lambda (g414a@id g414b@lab) (g2c5c@extend-rib! g4090@rib g414a@id g414b@lab)) g4147@id* g4146@lab*)) g4143@g4141 g4142@g413f))) (g2f11@chi-body* (cdr g4088@e*) g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?)))) '#f '#f '#f))) (if g4091@top? (g2f11@chi-body* (cdr g4088@e*) g4089@r g408a@mr (cons (g2c2b@gen-lexical 'dummy) g408b@lex*) (cons (cons 'top-expr g409c@e) g408c@rhs*) g408d@mod** g40b0@kwd* g408f@exp* g4090@rib g4091@top?) (values g4088@e* g4089@r g408a@mr g408b@lex* g408c@rhs* g408d@mod** g40b0@kwd* g408f@exp*)))))))))))))) g40ac@type)) (if (g2cab@id? g40aa@kwd) (cons g40aa@kwd g408e@kwd*) g408e@kwd*))) g40a6@g40a3 g40a5@g40a1 g40a4@g409f)))) (car g4088@e*))))) (set! g2f13@expand-transformer (lambda (g41a0@expr g41a1@r) ((lambda (g41a4@rtc) ((lambda (g41a6@expanded-rhs) (begin (for-each ((lambda (g41a8@mark-visit) (lambda (g41aa@x) (begin (g2acf@g2970@invoke-library g41aa@x) (g41a8@mark-visit g41aa@x)))) (g2f23@vis-collector)) (g41a4@rtc)) g41a6@expanded-rhs)) ((lambda (g41b4@g41ad g41b5@g41af g41b6@g41b1 g41b7@g41b3) ((lambda (g41bc@swap) (dynamic-wind g41bc@swap (lambda () (g2ed8@chi-expr g41a0@expr g41a1@r g41a1@r)) g41bc@swap)) (lambda () (begin ((lambda (g41be@t) (begin (g41b4@g41ad g41b6@g41b1) (set! g41b6@g41b1 g41be@t))) (g41b4@g41ad)) ((lambda (g41c0@t) (begin (g41b5@g41af g41b7@g41b3) (set! g41b7@g41b3 g41c0@t))) (g41b5@g41af)))))) g2f21@inv-collector g2f23@vis-collector g41a4@rtc (lambda (g41c2@x) (values))))) (g2f1f@make-collector)))) (set! g2f15@parse-exports (lambda (g41c4@exp*) ((letrec ((g41c6@f (lambda (g41c8@exp* g41c9@int* g41ca@ext*) (if (null? g41c8@exp*) (begin (if (not (g2cb5@valid-bound-ids? g41ca@ext*)) (g2f9f@syntax-violation 'export '"invalid exports" (g2eec@find-dups g41ca@ext*)) (void)) (values (map g2fa5@syntax->datum g41ca@ext*) g41c9@int*)) ((lambda (g41ce@t) ((lambda (g41d0@ls/false) (if g41d0@ls/false (apply (lambda (g41d2@rename g41d3@i* g41d4@e*) (begin (if (not (and (eq? (g2fa5@syntax->datum g41d2@rename) 'rename) (for-all g2cab@id? g41d3@i*) (for-all g2cab@id? g41d4@e*))) (g2f9f@syntax-violation 'export '"invalid export specifier" (car g41c8@exp*)) (void)) (g41c6@f (cdr g41c8@exp*) (append g41d3@i* g41c9@int*) (append g41d4@e* g41ca@ext*)))) g41d0@ls/false) ((lambda (g41d8@t) ((lambda (g41da@ls/false) (if g41da@ls/false (apply (lambda (g41dc@ie) (begin (if (not (g2cab@id? g41dc@ie)) (g2f9f@syntax-violation 'export '"invalid export" g41dc@ie) (void)) (g41c6@f (cdr g41c8@exp*) (cons g41dc@ie g41c9@int*) (cons g41dc@ie g41ca@ext*)))) g41da@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g41d8@t))) (g2eb6@syntax-dispatch g41d8@t 'any))) g41ce@t))) (g2eb6@syntax-dispatch g41ce@t '(any . #(each (any any)))))) (car g41c8@exp*)))))) g41c6@f) g41c4@exp* '() '()))) (set! g2f17@parse-library-name (lambda (g41de@spec) ((lambda (g41e1@parse) (begin (set! g41e1@parse (lambda (g41ee@x) ((lambda (g41f0@t) ((lambda (g41f2@ls/false) (if (and g41f2@ls/false (apply (lambda (g41f4@v*) (for-all (lambda (g41f6@x) ((lambda (g41f8@x) (and (integer? g41f8@x) (exact? g41f8@x))) (g2fa5@syntax->datum g41f6@x))) g41f4@v*)) g41f2@ls/false)) (apply (lambda (g41fa@v*) (values '() (map g2fa5@syntax->datum g41fa@v*))) g41f2@ls/false) ((lambda (g41fc@t) ((lambda (g41fe@ls/false) (if (and g41fe@ls/false (apply (lambda (g4200@x g4201@rest) (symbol? (g2fa5@syntax->datum g4200@x))) g41fe@ls/false)) (apply (lambda (g4204@x g4205@rest) (call-with-values (lambda () (g41e1@parse g4205@rest)) (lambda (g420c@g4209 g420d@g420b) ((lambda (g4210@v* g4211@x*) (values (cons (g2fa5@syntax->datum g4204@x) g4211@x*) g4210@v*)) g420d@g420b g420c@g4209)))) g41fe@ls/false) ((lambda (g4214@t) ((lambda (g4216@ls/false) (if g4216@ls/false (apply (lambda () (values '() '())) g4216@ls/false) ((lambda (g4218@t) ((lambda (g421a@ls/false) (if g421a@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid library name" g41de@spec)) g421a@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g4218@t))) (g2eb6@syntax-dispatch g4218@t '_))) g4214@t))) (g2eb6@syntax-dispatch g4214@t '()))) g41fc@t))) (g2eb6@syntax-dispatch g41fc@t '(any . any)))) g41f0@t))) (g2eb6@syntax-dispatch g41f0@t '(each-any)))) g41ee@x))) (call-with-values (lambda () (g41e1@parse g41de@spec)) (lambda (g41e6@g41e3 g41e7@g41e5) ((lambda (g41ea@ver* g41eb@name*) (begin (if (null? g41eb@name*) (g2f9f@syntax-violation '#f '"empty library name" g41de@spec) (void)) (values g41eb@name* g41ea@ver*))) g41e7@g41e5 g41e6@g41e3))))) '#f))) (set! g2f19@parse-library (lambda (g421c@e) ((lambda (g421e@t) ((lambda (g4220@ls/false) (if (and g4220@ls/false (apply (lambda (g4222@library g4223@name* g4224@export g4225@exp* g4226@import g4227@imp* g4228@b*) (and (eq? (g2fa5@syntax->datum g4224@export) 'export) (eq? (g2fa5@syntax->datum g4226@import) 'import) (eq? (g2fa5@syntax->datum g4222@library) 'library))) g4220@ls/false)) (apply (lambda (g4230@library g4231@name* g4232@export g4233@exp* g4234@import g4235@imp* g4236@b*) (values g4231@name* g4233@exp* g4235@imp* g4236@b*)) g4220@ls/false) ((lambda (g423e@t) ((lambda (g4240@ls/false) (if g4240@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"malformed library" g421c@e)) g4240@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g423e@t))) (g2eb6@syntax-dispatch g423e@t '_))) g421e@t))) (g2eb6@syntax-dispatch g421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) g421c@e))) (set! g2f1b@parse-import-spec* ((lambda () ((lambda (g4243@idsyn? g4245@dup-error g4247@merge-substs g4249@exclude* g424b@find* g424d@rem* g424f@remove-dups g4251@parse-library-name g4253@import-library g4255@get-import g4257@add-imports!) (begin (set! g4243@idsyn? (lambda (g444c@x) (symbol? (g2fa5@syntax->datum g444c@x)))) (set! g4245@dup-error (lambda (g444a@name) (g2f9f@syntax-violation 'import '"two imports with different bindings" g444a@name))) (set! g4247@merge-substs (lambda (g4438@s g4439@subst) ((lambda (g443d@insert-to-subst) (begin (set! g443d@insert-to-subst (lambda (g443e@a g443f@subst) ((lambda (g4442@name g4443@label) ((lambda (g4446@t) (if g4446@t ((lambda (g4448@x) (if (eq? (cdr g4448@x) g4443@label) g443f@subst (g4245@dup-error g4442@name))) g4446@t) (cons g443e@a g443f@subst))) (assq g4442@name g443f@subst))) (car g443e@a) (cdr g443e@a)))) (if (null? g4438@s) g4439@subst (g443d@insert-to-subst (car g4438@s) (g4247@merge-substs (cdr g4438@s) g4439@subst))))) '#f))) (set! g4249@exclude* (lambda (g4408@sym* g4409@subst) ((lambda (g440d@exclude) (begin (set! g440d@exclude (lambda (g4426@sym g4427@subst) (if (null? g4427@subst) (g2f9f@syntax-violation 'import '"cannot rename unbound identifier" g4426@sym) (if (eq? g4426@sym (caar g4427@subst)) (values (cdar g4427@subst) (cdr g4427@subst)) ((lambda (g442a@a) (call-with-values (lambda () (g440d@exclude g4426@sym (cdr g4427@subst))) (lambda (g4430@g442d g4431@g442f) ((lambda (g4434@subst g4435@old) (values g4435@old (cons g442a@a g4434@subst))) g4431@g442f g4430@g442d)))) (car g4427@subst)))))) (if (null? g4408@sym*) (values '() g4409@subst) (call-with-values (lambda () (g440d@exclude (car g4408@sym*) g4409@subst)) (lambda (g4412@g440f g4413@g4411) ((lambda (g4416@subst g4417@old) (call-with-values (lambda () (g4249@exclude* (cdr g4408@sym*) g4416@subst)) (lambda (g441e@g441b g441f@g441d) ((lambda (g4422@subst g4423@old*) (values (cons g4417@old g4423@old*) g4422@subst)) g441f@g441d g441e@g441b)))) g4413@g4411 g4412@g440f)))))) '#f))) (set! g424b@find* (lambda (g4400@sym* g4401@subst) (map (lambda (g4404@x) ((lambda (g4406@t) (if g4406@t (cdr g4406@t) (g2f9f@syntax-violation 'import '"cannot find identifier" g4404@x))) (assq g4404@x g4401@subst))) g4400@sym*))) (set! g424d@rem* (lambda (g43f8@sym* g43f9@subst) ((letrec ((g43fc@f (lambda (g43fe@subst) (if (null? g43fe@subst) '() (if (memq (caar g43fe@subst) g43f8@sym*) (g43fc@f (cdr g43fe@subst)) (cons (car g43fe@subst) (g43fc@f (cdr g43fe@subst)))))))) g43fc@f) g43f9@subst))) (set! g424f@remove-dups (lambda (g43f6@ls) (if (null? g43f6@ls) '() (if (memq (car g43f6@ls) (cdr g43f6@ls)) (g424f@remove-dups (cdr g43f6@ls)) (cons (car g43f6@ls) (g424f@remove-dups (cdr g43f6@ls))))))) (set! g4251@parse-library-name (lambda (g430e@spec) ((lambda (g4311@subversion? g4313@subversion-pred g4315@version-pred) (begin (set! g4311@subversion? (lambda (g43f2@x) ((lambda (g43f4@x) (and (integer? g43f4@x) (exact? g43f4@x) (>= g43f4@x '0))) (g2fa5@syntax->datum g43f2@x)))) (set! g4313@subversion-pred (lambda (g4392@x*) ((lambda (g4394@t) ((lambda (g4396@ls/false) (if (and g4396@ls/false (apply (lambda (g4398@n) (g4311@subversion? g4398@n)) g4396@ls/false)) (apply (lambda (g439a@n) (lambda (g439c@x) (= g439c@x (g2fa5@syntax->datum g439a@n)))) g4396@ls/false) ((lambda (g439e@t) ((lambda (g43a0@ls/false) (if (and g43a0@ls/false (apply (lambda (g43a2@p? g43a3@sub*) (eq? (g2fa5@syntax->datum g43a2@p?) 'and)) g43a0@ls/false)) (apply (lambda (g43a6@p? g43a7@sub*) ((lambda (g43aa@p*) (lambda (g43ac@x) (for-all (lambda (g43ae@p) (g43ae@p g43ac@x)) g43aa@p*))) (map g4313@subversion-pred g43a7@sub*))) g43a0@ls/false) ((lambda (g43b0@t) ((lambda (g43b2@ls/false) (if (and g43b2@ls/false (apply (lambda (g43b4@p? g43b5@sub*) (eq? (g2fa5@syntax->datum g43b4@p?) 'or)) g43b2@ls/false)) (apply (lambda (g43b8@p? g43b9@sub*) ((lambda (g43bc@p*) (lambda (g43be@x) (exists (lambda (g43c0@p) (g43c0@p g43be@x)) g43bc@p*))) (map g4313@subversion-pred g43b9@sub*))) g43b2@ls/false) ((lambda (g43c2@t) ((lambda (g43c4@ls/false) (if (and g43c4@ls/false (apply (lambda (g43c6@p? g43c7@sub) (eq? (g2fa5@syntax->datum g43c6@p?) 'not)) g43c4@ls/false)) (apply (lambda (g43ca@p? g43cb@sub) ((lambda (g43ce@p) (lambda (g43d0@x) (not (g43ce@p g43d0@x)))) (g4313@subversion-pred g43cb@sub))) g43c4@ls/false) ((lambda (g43d2@t) ((lambda (g43d4@ls/false) (if (and g43d4@ls/false (apply (lambda (g43d6@p? g43d7@n) (and (eq? (g2fa5@syntax->datum g43d6@p?) '<=) (g4311@subversion? g43d7@n))) g43d4@ls/false)) (apply (lambda (g43da@p? g43db@n) (lambda (g43de@x) (<= g43de@x (g2fa5@syntax->datum g43db@n)))) g43d4@ls/false) ((lambda (g43e0@t) ((lambda (g43e2@ls/false) (if (and g43e2@ls/false (apply (lambda (g43e4@p? g43e5@n) (and (eq? (g2fa5@syntax->datum g43e4@p?) '>=) (g4311@subversion? g43e5@n))) g43e2@ls/false)) (apply (lambda (g43e8@p? g43e9@n) (lambda (g43ec@x) (>= g43ec@x (g2fa5@syntax->datum g43e9@n)))) g43e2@ls/false) ((lambda (g43ee@t) ((lambda (g43f0@ls/false) (if g43f0@ls/false (apply (lambda () (g2f9f@syntax-violation 'import '"invalid sub-version spec" g430e@spec g4392@x*)) g43f0@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g43ee@t))) (g2eb6@syntax-dispatch g43ee@t '_))) g43e0@t))) (g2eb6@syntax-dispatch g43e0@t '(any any)))) g43d2@t))) (g2eb6@syntax-dispatch g43d2@t '(any any)))) g43c2@t))) (g2eb6@syntax-dispatch g43c2@t '(any any)))) g43b0@t))) (g2eb6@syntax-dispatch g43b0@t '(any . each-any)))) g439e@t))) (g2eb6@syntax-dispatch g439e@t '(any . each-any)))) g4394@t))) (g2eb6@syntax-dispatch g4394@t 'any))) g4392@x*))) (set! g4315@version-pred (lambda (g4342@x*) ((lambda (g4344@t) ((lambda (g4346@ls/false) (if g4346@ls/false (apply (lambda () (lambda (g4348@x) '#t)) g4346@ls/false) ((lambda (g434a@t) ((lambda (g434c@ls/false) (if (and g434c@ls/false (apply (lambda (g434e@c g434f@ver*) (eq? (g2fa5@syntax->datum g434e@c) 'and)) g434c@ls/false)) (apply (lambda (g4352@c g4353@ver*) ((lambda (g4356@p*) (lambda (g4358@x) (for-all (lambda (g435a@p) (g435a@p g4358@x)) g4356@p*))) (map g4315@version-pred g4353@ver*))) g434c@ls/false) ((lambda (g435c@t) ((lambda (g435e@ls/false) (if (and g435e@ls/false (apply (lambda (g4360@c g4361@ver*) (eq? (g2fa5@syntax->datum g4360@c) 'or)) g435e@ls/false)) (apply (lambda (g4364@c g4365@ver*) ((lambda (g4368@p*) (lambda (g436a@x) (exists (lambda (g436c@p) (g436c@p g436a@x)) g4368@p*))) (map g4315@version-pred g4365@ver*))) g435e@ls/false) ((lambda (g436e@t) ((lambda (g4370@ls/false) (if (and g4370@ls/false (apply (lambda (g4372@c g4373@ver) (eq? (g2fa5@syntax->datum g4372@c) 'not)) g4370@ls/false)) (apply (lambda (g4376@c g4377@ver) ((lambda (g437a@p) (lambda (g437c@x) (not (g437a@p g437c@x)))) (g4315@version-pred g4377@ver))) g4370@ls/false) ((lambda (g437e@t) ((lambda (g4380@ls/false) (if g4380@ls/false (apply (lambda (g4382@sub*) ((lambda (g4384@p*) (lambda (g4386@x) ((letrec ((g4388@f (lambda (g438a@p* g438b@x) (if (null? g438a@p*) '#t (if (null? g438b@x) '#f (and ((car g438a@p*) (car g438b@x)) (g4388@f (cdr g438a@p*) (cdr g438b@x)))))))) g4388@f) g4384@p* g4386@x))) (map g4313@subversion-pred g4382@sub*))) g4380@ls/false) ((lambda (g438e@t) ((lambda (g4390@ls/false) (if g4390@ls/false (apply (lambda () (g2f9f@syntax-violation 'import '"invalid version spec" g430e@spec g4342@x*)) g4390@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g438e@t))) (g2eb6@syntax-dispatch g438e@t '_))) g437e@t))) (g2eb6@syntax-dispatch g437e@t 'each-any))) g436e@t))) (g2eb6@syntax-dispatch g436e@t '(any any)))) g435c@t))) (g2eb6@syntax-dispatch g435c@t '(any . each-any)))) g434a@t))) (g2eb6@syntax-dispatch g434a@t '(any . each-any)))) g4344@t))) (g2eb6@syntax-dispatch g4344@t '()))) g4342@x*))) ((letrec ((g4316@f (lambda (g4318@x) ((lambda (g431a@t) ((lambda (g431c@ls/false) (if g431c@ls/false (apply (lambda (g431e@version-spec*) (values '() (g4315@version-pred g431e@version-spec*))) g431c@ls/false) ((lambda (g4320@t) ((lambda (g4322@ls/false) (if (and g4322@ls/false (apply (lambda (g4324@x g4325@x*) (g4243@idsyn? g4324@x)) g4322@ls/false)) (apply (lambda (g4328@x g4329@x*) (call-with-values (lambda () (g4316@f g4329@x*)) (lambda (g4330@g432d g4331@g432f) ((lambda (g4334@pred g4335@name) (values (cons (g2fa5@syntax->datum g4328@x) g4335@name) g4334@pred)) g4331@g432f g4330@g432d)))) g4322@ls/false) ((lambda (g4338@t) ((lambda (g433a@ls/false) (if g433a@ls/false (apply (lambda () (values '() (lambda (g433c@x) '#t))) g433a@ls/false) ((lambda (g433e@t) ((lambda (g4340@ls/false) (if g4340@ls/false (apply (lambda () (g2f9f@syntax-violation '#f '"invalid import spec" g430e@spec)) g4340@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g433e@t))) (g2eb6@syntax-dispatch g433e@t '_))) g4338@t))) (g2eb6@syntax-dispatch g4338@t '()))) g4320@t))) (g2eb6@syntax-dispatch g4320@t '(any . any)))) g431a@t))) (g2eb6@syntax-dispatch g431a@t '(each-any)))) g4318@x)))) g4316@f) g430e@spec))) '#f '#f '#f))) (set! g4253@import-library (lambda (g42fe@spec*) (call-with-values (lambda () (g4251@parse-library-name g42fe@spec*)) (lambda (g4304@g4301 g4305@g4303) ((lambda (g4308@pred g4309@name) (begin (if (null? g4309@name) (g2f9f@syntax-violation 'import '"empty library name" g42fe@spec*) (void)) ((lambda (g430c@lib) (begin (if (not g430c@lib) (g2f9f@syntax-violation 'import '"cannot find library with required name" g4309@name) (void)) (if (not (g4308@pred (g2aa0@g2912@library-version g430c@lib))) (g2f9f@syntax-violation 'import '"library does not satisfy version specification" g42fe@spec* g430c@lib) (void)) ((g2f25@imp-collector) g430c@lib) (g2aa4@g291a@library-subst g430c@lib))) (g2ac8@g2962@find-library-by-name g4309@name)))) g4305@g4303 g4304@g4301))))) (set! g4255@get-import (lambda (g4270@spec) ((lambda (g4272@t) ((lambda (g4274@ls/false) (if (and g4274@ls/false (apply (lambda (g4276@x g4277@x*) (not (memq (g2fa5@syntax->datum g4276@x) '(for rename except only prefix library)))) g4274@ls/false)) (apply (lambda (g427a@x g427b@x*) (g4253@import-library (cons g427a@x g427b@x*))) g4274@ls/false) ((lambda (g427e@t) ((lambda (g4280@ls/false) (if (and g4280@ls/false (apply (lambda (g4282@rename g4283@isp g4284@old* g4285@new*) (and (eq? (g2fa5@syntax->datum g4282@rename) 'rename) (for-all g4243@idsyn? g4284@old*) (for-all g4243@idsyn? g4285@new*))) g4280@ls/false)) (apply (lambda (g428a@rename g428b@isp g428c@old* g428d@new*) ((lambda (g4292@subst g4293@old* g4294@new*) ((lambda (g4298@old-label*) ((lambda (g429a@subst) (g4247@merge-substs (map cons g4294@new* g4298@old-label*) g429a@subst)) (g424d@rem* g4293@old* g4292@subst))) (g424b@find* g4293@old* g4292@subst))) (g4255@get-import g428b@isp) (map g2fa5@syntax->datum g428c@old*) (map g2fa5@syntax->datum g428d@new*))) g4280@ls/false) ((lambda (g429c@t) ((lambda (g429e@ls/false) (if (and g429e@ls/false (apply (lambda (g42a0@except g42a1@isp g42a2@sym*) (and (eq? (g2fa5@syntax->datum g42a0@except) 'except) (for-all g4243@idsyn? g42a2@sym*))) g429e@ls/false)) (apply (lambda (g42a6@except g42a7@isp g42a8@sym*) ((lambda (g42ac@subst) (g424d@rem* (map g2fa5@syntax->datum g42a8@sym*) g42ac@subst)) (g4255@get-import g42a7@isp))) g429e@ls/false) ((lambda (g42ae@t) ((lambda (g42b0@ls/false) (if (and g42b0@ls/false (apply (lambda (g42b2@only g42b3@isp g42b4@sym*) (and (eq? (g2fa5@syntax->datum g42b2@only) 'only) (for-all g4243@idsyn? g42b4@sym*))) g42b0@ls/false)) (apply (lambda (g42b8@only g42b9@isp g42ba@sym*) ((lambda (g42be@subst g42bf@sym*) ((lambda (g42c2@sym*) ((lambda (g42c4@lab*) (map cons g42c2@sym* g42c4@lab*)) (g424b@find* g42c2@sym* g42be@subst))) (g424f@remove-dups g42bf@sym*))) (g4255@get-import g42b9@isp) (map g2fa5@syntax->datum g42ba@sym*))) g42b0@ls/false) ((lambda (g42c6@t) ((lambda (g42c8@ls/false) (if (and g42c8@ls/false (apply (lambda (g42ca@prefix g42cb@isp g42cc@p) (and (eq? (g2fa5@syntax->datum g42ca@prefix) 'prefix) (g4243@idsyn? g42cc@p))) g42c8@ls/false)) (apply (lambda (g42d0@prefix g42d1@isp g42d2@p) ((lambda (g42d6@subst g42d7@prefix) (map (lambda (g42da@x) (cons (string->symbol (string-append g42d7@prefix (symbol->string (car g42da@x)))) (cdr g42da@x))) g42d6@subst)) (g4255@get-import g42d1@isp) (symbol->string (g2fa5@syntax->datum g42d2@p)))) g42c8@ls/false) ((lambda (g42dc@t) ((lambda (g42de@ls/false) (if (and g42de@ls/false (apply (lambda (g42e0@library g42e1@spec*) (eq? (g2fa5@syntax->datum g42e0@library) 'library)) g42de@ls/false)) (apply (lambda (g42e4@library g42e5@spec*) (g4253@import-library g42e5@spec*)) g42de@ls/false) ((lambda (g42e8@t) ((lambda (g42ea@ls/false) (if (and g42ea@ls/false (apply (lambda (g42ec@for g42ed@isp g42ee@rest) (eq? (g2fa5@syntax->datum g42ec@for) 'for)) g42ea@ls/false)) (apply (lambda (g42f2@for g42f3@isp g42f4@rest) (g4255@get-import g42f3@isp)) g42ea@ls/false) ((lambda (g42f8@t) ((lambda (g42fa@ls/false) (if g42fa@ls/false (apply (lambda (g42fc@spec) (g2f9f@syntax-violation 'import '"invalid import spec" g42fc@spec)) g42fa@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g42f8@t))) (g2eb6@syntax-dispatch g42f8@t 'any))) g42e8@t))) (g2eb6@syntax-dispatch g42e8@t '(any any . any)))) g42dc@t))) (g2eb6@syntax-dispatch g42dc@t '(any each-any)))) g42c6@t))) (g2eb6@syntax-dispatch g42c6@t '(any any any)))) g42ae@t))) (g2eb6@syntax-dispatch g42ae@t '(any any . each-any)))) g429c@t))) (g2eb6@syntax-dispatch g429c@t '(any any . each-any)))) g427e@t))) (g2eb6@syntax-dispatch g427e@t '(any any . #(each (any any)))))) g4272@t))) (g2eb6@syntax-dispatch g4272@t '(any . each-any)))) g4270@spec))) (set! g4257@add-imports! (lambda (g4260@imp g4261@h) ((lambda (g4264@subst) (for-each (lambda (g4266@x) ((lambda (g4268@name g4269@label) ((lambda (g426c@t) (if g426c@t ((lambda (g426e@l) (if (not (eq? g426e@l g4269@label)) (g4245@dup-error g4268@name) (void))) g426c@t) (hashtable-set! g4261@h g4268@name g4269@label))) (hashtable-ref g4261@h g4268@name '#f))) (car g4266@x) (cdr g4266@x))) g4264@subst)) (g4255@get-import g4260@imp)))) (lambda (g4258@imp*) ((letrec ((g425a@f (lambda (g425c@imp* g425d@h) (if (null? g425c@imp*) (hashtable-entries g425d@h) (begin (g4257@add-imports! (car g425c@imp*) g425d@h) (g425a@f (cdr g425c@imp*) g425d@h)))))) g425a@f) g4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2f1d@make-top-rib (lambda (g444e@names g444f@labels) ((lambda (g4452@rib) (begin (vector-for-each (lambda (g4454@name g4455@label) (begin (if (not (symbol? g4454@name)) (error 'make-top-rib '"BUG: not a symbol" g4454@name) (void)) (g2c5e@extend-rib/nc! g4452@rib (g2c75@make-stx g4454@name g2c27@top-mark* '() '()) g4455@label))) g444e@names g444f@labels) g4452@rib)) (g2c5a@make-empty-rib)))) (set! g2f1f@make-collector (lambda () ((lambda (g4458@ls) (lambda g445c ((lambda (g445d) (if (= g445d '0) (apply (lambda () g4458@ls) g445c) (if (= g445d '1) (apply (lambda (g445a@x) (set! g4458@ls (g2c20@set-cons g445a@x g4458@ls))) g445c) (error 'apply '"invalid arg count")))) (length g445c)))) '()))) (set! g2f21@inv-collector (g2855@g277f@make-parameter (lambda g445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (g4460@x) (begin (if (not (procedure? g4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" g4460@x) (void)) g4460@x)))) (set! g2f23@vis-collector (g2855@g277f@make-parameter (lambda g4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (g4464@x) (begin (if (not (procedure? g4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" g4464@x) (void)) g4464@x)))) (set! g2f25@imp-collector (g2855@g277f@make-parameter (lambda g4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (g4468@x) (begin (if (not (procedure? g4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" g4468@x) (void)) g4468@x)))) (set! g2f27@chi-library-internal (lambda (g446a@e* g446b@rib g446c@top?) (call-with-values (lambda () (g2f11@chi-body* g446a@e* '() '() '() '() '() '() '() g446b@rib g446c@top?)) (lambda (g4480@g4471 g4481@g4473 g4482@g4475 g4483@g4477 g4484@g4479 g4485@g447b g4486@g447d g4487@g447f) ((lambda (g4490@exp* g4491@_kwd* g4492@mod** g4493@rhs* g4494@lex* g4495@mr g4496@r g4497@e*) (values (append (apply append (reverse g4492@mod**)) g4497@e*) g4496@r g4495@mr (reverse g4494@lex*) (reverse g4493@rhs*) g4490@exp*)) g4487@g447f g4486@g447d g4485@g447b g4484@g4479 g4483@g4477 g4482@g4475 g4481@g4473 g4480@g4471))))) (set! g2f29@chi-interaction-expr (lambda (g44a0@e g44a1@rib g44a2@r) (call-with-values (lambda () (g2f11@chi-body* (list g44a0@e) g44a2@r g44a2@r '() '() '() '() '() g44a1@rib '#t)) (lambda (g44b6@g44a7 g44b7@g44a9 g44b8@g44ab g44b9@g44ad g44ba@g44af g44bb@g44b1 g44bc@g44b3 g44bd@g44b5) ((lambda (g44c6@_exp* g44c7@_kwd* g44c8@mod** g44c9@rhs* g44ca@lex* g44cb@mr g44cc@r g44cd@e*) ((lambda (g44d6@e*) ((lambda (g44d8@e) (values g44d8@e g44cc@r)) (if (null? g44d6@e*) (g2c0b@g2b7b@build-void) (if (null? (cdr g44d6@e*)) (car g44d6@e*) (g2c0a@g2b79@build-sequence '#f g44d6@e*))))) (g2ee6@expand-interaction-rhs*/init* (reverse g44ca@lex*) (reverse g44c9@rhs*) (append (apply append (reverse g44c8@mod**)) g44cd@e*) g44cc@r g44cb@mr))) g44bd@g44b5 g44bc@g44b3 g44bb@g44b1 g44ba@g44af g44b9@g44ad g44b8@g44ab g44b7@g44a9 g44b6@g44a7))))) (set! g2f2b@library-body-expander (lambda (g44da@name g44db@main-exp* g44dc@imp* g44dd@b* g44de@top?) ((lambda (g44e5@itc) (begin (set! g44e5@itc (g2f1f@make-collector)) ((lambda (g44ee@g44e7 g44ef@g44e9 g44f0@g44eb g44f1@g44ed) ((lambda (g44f6@swap) (dynamic-wind g44f6@swap (lambda () (call-with-values (lambda () (g2f1b@parse-import-spec* g44dc@imp*)) (lambda (g44fc@g44f9 g44fd@g44fb) ((lambda (g4500@subst-labels g4501@subst-names) ((lambda (g4504@rib) ((lambda (g4507@wrap) (begin (set! g4507@wrap (lambda (g4582@x) (g2c75@make-stx g4582@x g2c27@top-mark* (list g4504@rib) '()))) ((lambda (g4508@b* g4509@main-exp* g450a@rtc g450b@vtc) ((lambda (g4518@g4511 g4519@g4513 g451a@g4515 g451b@g4517) ((lambda (g4520@swap) (dynamic-wind g4520@swap (lambda () (call-with-values (lambda () (g2f27@chi-library-internal g4508@b* g4504@rib g44de@top?)) (lambda (g452e@g4523 g452f@g4525 g4530@g4527 g4531@g4529 g4532@g452b g4533@g452d) ((lambda (g453a@internal-exp* g453b@rhs* g453c@lex* g453d@mr g453e@r g453f@init*) (call-with-values (lambda () (g2f15@parse-exports (append g4509@main-exp* g453a@internal-exp*))) (lambda (g454a@g4547 g454b@g4549) ((lambda (g454e@exp-id* g454f@exp-name*) (begin (g2c62@seal-rib! g4504@rib) ((lambda (g4552@init*) ((lambda (g4554@rhs*) ((lambda () (begin (g2c64@unseal-rib! g4504@rib) ((lambda (g4556@loc* g4557@export-subst) ((lambda (g455b@errstr) (begin (set! g455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (g2f8b@make-export-env/macros g453c@lex* g4556@loc* g453e@r)) (lambda (g4562@g455d g4563@g455f g4564@g4561) ((lambda (g4568@macro* g4569@global* g456a@export-env) (begin (for-each (lambda (g456e@s) ((lambda (g4570@name g4571@label) ((lambda (g4574@p) (if g4574@p ((lambda (g4576@b) ((lambda (g4578@type) (if (eq? g4578@type 'mutable) (g2f9f@syntax-violation 'export g455b@errstr g4570@name) (void))) (car g4576@b))) (cdr g4574@p)) (void))) (assq g4571@label g456a@export-env))) (car g456e@s) (cdr g456e@s))) g4557@export-subst) ((lambda (g457a@invoke-body g457b@invoke-definitions) (values (g44e5@itc) (g450a@rtc) (g450b@vtc) (g2c0a@g2b79@build-sequence '#f (append g457b@invoke-definitions (list g457a@invoke-body))) g4568@macro* g4557@export-subst g456a@export-env)) (g2c0d@g2b7f@build-letrec* '#f g453c@lex* g4554@rhs* (g2f87@build-exports g4569@global* g4552@init*)) (map g2c06@g2ad6@build-global-define (map cdr g4569@global*))))) g4564@g4561 g4563@g455f g4562@g455d))))) '#f)) (map g2c2d@gen-global g453c@lex*) (g2f89@make-export-subst g454f@exp-name* g454e@exp-id*)))))) (g2ee8@chi-rhs* g453b@rhs* g453e@r g453d@mr))) (g2ed4@chi-expr* g453f@init* g453e@r g453d@mr)))) g454b@g4549 g454a@g4547)))) g4533@g452d g4532@g452b g4531@g4529 g4530@g4527 g452f@g4525 g452e@g4523)))) g4520@swap)) (lambda () (begin ((lambda (g457e@t) (begin (g4518@g4511 g451a@g4515) (set! g451a@g4515 g457e@t))) (g4518@g4511)) ((lambda (g4580@t) (begin (g4519@g4513 g451b@g4517) (set! g451b@g4517 g4580@t))) (g4519@g4513)))))) g2f21@inv-collector g2f23@vis-collector g450a@rtc g450b@vtc)) (map g4507@wrap g44dd@b*) (map g4507@wrap g44db@main-exp*) (g2f1f@make-collector) (g2f1f@make-collector)))) '#f)) (g2f1d@make-top-rib g4501@subst-names g4500@subst-labels))) g44fd@g44fb g44fc@g44f9)))) g44f6@swap)) (lambda () (begin ((lambda (g4584@t) (begin (g44ee@g44e7 g44f0@g44eb) (set! g44f0@g44eb g4584@t))) (g44ee@g44e7)) ((lambda (g4586@t) (begin (g44ef@g44e9 g44f1@g44ed) (set! g44f1@g44ed g4586@t))) (g44ef@g44e9)))))) g2f25@imp-collector g2fad@top-level-context g44e5@itc '#f))) '#f))) (set! g2f2d@core-library-expander (lambda (g4588@e g4589@verify-name) (call-with-values (lambda () (g2f19@parse-library g4588@e)) (lambda (g4594@g458d g4595@g458f g4596@g4591 g4597@g4593) ((lambda (g459c@b* g459d@imp* g459e@exp* g459f@name*) (call-with-values (lambda () (g2f17@parse-library-name g459f@name*)) (lambda (g45a8@g45a5 g45a9@g45a7) ((lambda (g45ac@ver g45ad@name) (begin (g4589@verify-name g45ad@name) (call-with-values (lambda () (g2f2b@library-body-expander g45ad@name g459e@exp* g459d@imp* g459c@b* '#f)) (lambda (g45be@g45b1 g45bf@g45b3 g45c0@g45b5 g45c1@g45b7 g45c2@g45b9 g45c3@g45bb g45c4@g45bd) ((lambda (g45cc@export-env g45cd@export-subst g45ce@visit-code g45cf@invoke-code g45d0@visit-req* g45d1@invoke-req* g45d2@imp*) (values g45ad@name g45ac@ver g45d2@imp* g45d1@invoke-req* g45d0@visit-req* g45cf@invoke-code g45ce@visit-code g45cd@export-subst g45cc@export-env)) g45c4@g45bd g45c3@g45bb g45c2@g45b9 g45c1@g45b7 g45c0@g45b5 g45bf@g45b3 g45be@g45b1))))) g45a9@g45a7 g45a8@g45a5)))) g4597@g4593 g4596@g4591 g4595@g458f g4594@g458d))))) (set! g2f2f@parse-top-level-program (lambda (g45da@e*) ((lambda (g45dc@t) ((lambda (g45de@ls/false) (if (and g45de@ls/false (apply (lambda (g45e0@import g45e1@imp* g45e2@b*) (eq? (g2fa5@syntax->datum g45e0@import) 'import)) g45de@ls/false)) (apply (lambda (g45e6@import g45e7@imp* g45e8@b*) (values g45e7@imp* g45e8@b*)) g45de@ls/false) ((lambda (g45ec@t) ((lambda (g45ee@ls/false) (if (and g45ee@ls/false (apply (lambda (g45f0@import g45f1@x g45f2@y) (eq? (g2fa5@syntax->datum g45f0@import) 'import)) g45ee@ls/false)) (apply (lambda (g45f6@import g45f7@x g45f8@y) (g2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (g2ca5@syntax-car g45da@e*))) g45ee@ls/false) ((lambda (g45fc@t) ((lambda (g45fe@ls/false) (if g45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) g45fe@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g45fc@t))) (g2eb6@syntax-dispatch g45fc@t '_))) g45ec@t))) (g2eb6@syntax-dispatch g45ec@t '((any . any) . any)))) g45dc@t))) (g2eb6@syntax-dispatch g45dc@t '((any . each-any) . each-any)))) g45da@e*))) (set! g2f31@top-level-expander (lambda (g4600@e*) (call-with-values (lambda () (g2f2f@parse-top-level-program g4600@e*)) (lambda (g4606@g4603 g4607@g4605) ((lambda (g460a@b* g460b@imp*) (call-with-values (lambda () (g2f2b@library-body-expander '() '() g460b@imp* g460a@b* '#t)) (lambda (g461c@g460f g461d@g4611 g461e@g4613 g461f@g4615 g4620@g4617 g4621@g4619 g4622@g461b) ((lambda (g462a@export-env g462b@export-subst g462c@visit-code g462d@invoke-code g462e@visit-req* g462f@invoke-req* g4630@imp*) (values g462f@invoke-req* g462d@invoke-code)) g4622@g461b g4621@g4619 g4620@g4617 g461f@g4615 g461e@g4613 g461d@g4611 g461c@g460f)))) g4607@g4605 g4606@g4603))))) (set! g2f37@g2f32 (make-record-type-descriptor 'env '#f 'g2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! g2f39@g2f34 '#f) (set! g2f3b@g2f33 (make-record-constructor-descriptor g2f37@g2f32 '#f g2f39@g2f34)) (set! g2f3e@env? (record-predicate g2f37@g2f32)) (set! g2f40@make-env (record-constructor g2f3b@g2f33)) (set! g2f42@env-names (record-accessor g2f37@g2f32 '0)) (set! g2f44@env-labels (record-accessor g2f37@g2f32 '1)) (set! g2f46@env-itc (record-accessor g2f37@g2f32 '2)) (set! g2f48@set-env-names! (record-mutator g2f37@g2f32 '0)) (set! g2f4a@set-env-labels! (record-mutator g2f37@g2f32 '1)) (set! g2f4c@set-env-itc! (record-mutator g2f37@g2f32 '2)) (set! g2f4e@rp (g2852@g2779@make-record-printer 'env (lambda (g4638@x g4639@p g463a@wr) (display '"#<environment>" g4639@p)))) (set! g2f54@g2f4f (make-record-type-descriptor 'interaction-env '#f 'g2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! g2f56@g2f51 '#f) (set! g2f58@g2f50 (make-record-constructor-descriptor g2f54@g2f4f '#f g2f56@g2f51)) (set! g2f5b@interaction-env? (record-predicate g2f54@g2f4f)) (set! g2f5d@make-interaction-env (record-constructor g2f58@g2f50)) (set! g2f5f@interaction-env-rib (record-accessor g2f54@g2f4f '0)) (set! g2f61@interaction-env-r (record-accessor g2f54@g2f4f '1)) (set! g2f63@interaction-env-locs (record-accessor g2f54@g2f4f '2)) (set! g2f65@set-interaction-env-rib! (record-mutator g2f54@g2f4f '0)) (set! g2f67@set-interaction-env-r! (record-mutator g2f54@g2f4f '1)) (set! g2f69@set-interaction-env-locs! (record-mutator g2f54@g2f4f '2)) (set! g2f6b@rp (g2852@g2779@make-record-printer 'interaction-env (lambda (g463e@x g463f@p g4640@wr) (display '"#<environment>" g463f@p)))) (set! g2f6d@interaction-environment-symbols (lambda () (g2f75@environment-symbols (g2fab@interaction-environment)))) (set! g2f6f@environment-bindings (lambda (g4644@e) (vector->list (vector-map (lambda (g4646@name g4647@label) (g2f71@parse-binding (cons g4646@name (g2ace@g296e@imported-label->binding g4647@label)))) (g2f42@env-names g4644@e) (g2f44@env-labels g4644@e))))) (set! g2f71@parse-binding (lambda (g464a@b) (cons (car g464a@b) ((lambda (g464c@t) (if (memv g464c@t '(core-prim global)) 'procedure (if (memv g464c@t '(core-macro macro global-macro)) 'syntax (if (memv g464c@t '($core-rtd)) 'record (if (eq? (car g464a@b) (cadr g464a@b)) 'syntax 'unknown))))) (cadr g464a@b))))) (set! g2f73@environment? (lambda (g464e@x) (or (g2f3e@env? g464e@x) (g2f5b@interaction-env? g464e@x)))) (set! g2f75@environment-symbols (lambda (g4650@x) (if (g2f3e@env? g4650@x) (vector->list (g2f42@env-names g4650@x)) (if (g2f5b@interaction-env? g4650@x) (map values (g2c46@rib-sym* (g2f5f@interaction-env-rib g4650@x))) (assertion-violation 'environment-symbols '"not an environment" g4650@x))))) (set! g2f77@environment (lambda g4652@imp* ((lambda (g4654@itc) ((lambda (g465a@g4657 g465b@g4659) ((lambda (g465e@swap) (dynamic-wind g465e@swap (lambda () (call-with-values (lambda () (g2f1b@parse-import-spec* g4652@imp*)) (lambda (g4664@g4661 g4665@g4663) ((lambda (g4668@subst-labels g4669@subst-names) (g2f40@make-env g4669@subst-names g4668@subst-labels g4654@itc)) g4665@g4663 g4664@g4661)))) g465e@swap)) (lambda () ((lambda (g466c@t) (begin (g465a@g4657 g465b@g4659) (set! g465b@g4659 g466c@t))) (g465a@g4657))))) g2f25@imp-collector g4654@itc)) (g2f1f@make-collector)))) (set! g2f79@null-environment (lambda (g466e@n) (begin (if (not (eqv? g466e@n '5)) (assertion-violation 'null-environment '"not 5" g466e@n) (void)) (g2f77@environment '(psyntax null-environment-5))))) (set! g2f7b@scheme-report-environment (lambda (g4670@n) (begin (if (not (eqv? g4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" g4670@n) (void)) (g2f77@environment '(psyntax scheme-report-environment-5))))) (set! g2f7d@expand (lambda (g4672@x g4673@env) (if (g2f3e@env? g4673@env) ((lambda (g4676@rib) ((lambda (g4678@x g4679@itc g467a@rtc g467b@vtc) ((lambda (g4680@x) (begin (g2c62@seal-rib! g4676@rib) (values g4680@x (g467a@rtc)))) ((lambda (g4692@g4683 g4693@g4685 g4694@g4687 g4695@g4689 g4696@g468b g4697@g468d g4698@g468f g4699@g4691) ((lambda (g46a2@swap) (dynamic-wind g46a2@swap (lambda () (g2ed8@chi-expr g4678@x '() '())) g46a2@swap)) (lambda () (begin ((lambda (g46a4@t) (begin (g4692@g4683 g4696@g468b) (set! g4696@g468b g46a4@t))) (g4692@g4683)) ((lambda (g46a6@t) (begin (g4693@g4685 g4697@g468d) (set! g4697@g468d g46a6@t))) (g4693@g4685)) ((lambda (g46a8@t) (begin (g4694@g4687 g4698@g468f) (set! g4698@g468f g46a8@t))) (g4694@g4687)) ((lambda (g46aa@t) (begin (g4695@g4689 g4699@g4691) (set! g4699@g4691 g46aa@t))) (g4695@g4689)))))) g2fad@top-level-context g2f21@inv-collector g2f23@vis-collector g2f25@imp-collector '#f g467a@rtc g467b@vtc g4679@itc))) (g2c75@make-stx g4672@x g2c27@top-mark* (list g4676@rib) '()) (g2f46@env-itc g4673@env) (g2f1f@make-collector) (g2f1f@make-collector))) (g2f1d@make-top-rib (g2f42@env-names g4673@env) (g2f44@env-labels g4673@env))) (if (g2f5b@interaction-env? g4673@env) ((lambda (g46ac@rib g46ad@r g46ae@rtc) ((lambda (g46b2@x) (call-with-values (lambda () ((lambda (g46c8@g46b9 g46c9@g46bb g46ca@g46bd g46cb@g46bf g46cc@g46c1 g46cd@g46c3 g46ce@g46c5 g46cf@g46c7) ((lambda (g46d8@swap) (dynamic-wind g46d8@swap (lambda () (g2f29@chi-interaction-expr g46b2@x g46ac@rib g46ad@r)) g46d8@swap)) (lambda () (begin ((lambda (g46da@t) (begin (g46c8@g46b9 g46cc@g46c1) (set! g46cc@g46c1 g46da@t))) (g46c8@g46b9)) ((lambda (g46dc@t) (begin (g46c9@g46bb g46cd@g46c3) (set! g46cd@g46c3 g46dc@t))) (g46c9@g46bb)) ((lambda (g46de@t) (begin (g46ca@g46bd g46ce@g46c5) (set! g46ce@g46c5 g46de@t))) (g46ca@g46bd)) ((lambda (g46e0@t) (begin (g46cb@g46bf g46cf@g46c7) (set! g46cf@g46c7 g46e0@t))) (g46cb@g46bf)))))) g2fad@top-level-context g2f21@inv-collector g2f23@vis-collector g2f25@imp-collector g4673@env g46ae@rtc (g2f1f@make-collector) (g2f1f@make-collector))) (lambda (g46e2@g46b5 g46e3@g46b7) ((lambda (g46e6@r^ g46e7@e) (begin (g2f67@set-interaction-env-r! g4673@env g46e6@r^) (values g46e7@e (g46ae@rtc)))) g46e3@g46b7 g46e2@g46b5)))) (g2c75@make-stx g4672@x g2c27@top-mark* (list g46ac@rib) '()))) (g2f5f@interaction-env-rib g4673@env) (g2f61@interaction-env-r g4673@env) (g2f1f@make-collector)) (assertion-violation 'expand '"not an environment" g4673@env))))) (set! g2f7f@eval (lambda (g46ea@x g46eb@env) (begin (if (not (g2f73@environment? g46eb@env)) (error 'eval '"not an environment" g46eb@env) (void)) (call-with-values (lambda () (g2f7d@expand g46ea@x g46eb@env)) (lambda (g46f2@g46ef g46f3@g46f1) ((lambda (g46f6@invoke-req* g46f7@x) (begin (for-each g2acf@g2970@invoke-library g46f6@invoke-req*) (eval-core (g28a9@g2861@expanded->core g46f7@x)))) g46f3@g46f1 g46f2@g46ef)))))) (set! g2f81@library-expander (lambda g4768 ((lambda (g4769) (if (= g4769 '3) (apply (lambda (g46fa@x g46fb@filename g46fc@verify-name) ((lambda (g4701@build-visit-code g4703@visit!) (begin (set! g4701@build-visit-code (lambda (g4756@macro*) (if (null? g4756@macro*) (g2c0b@g2b7b@build-void) (g2c0a@g2b79@build-sequence '#f (map (lambda (g4758@x) ((lambda (g475a@loc g475b@src) (list 'set! g475a@loc g475b@src)) (car g4758@x) (cddr g4758@x))) g4756@macro*))))) (set! g4703@visit! (lambda (g474e@macro*) (for-each (lambda (g4750@x) ((lambda (g4752@loc g4753@proc) (set-symbol-value! g4752@loc g4753@proc)) (car g4750@x) (cadr g4750@x))) g474e@macro*))) (call-with-values (lambda () (g2f2d@core-library-expander g46fa@x g46fc@verify-name)) (lambda (g4716@g4705 g4717@g4707 g4718@g4709 g4719@g470b g471a@g470d g471b@g470f g471c@g4711 g471d@g4713 g471e@g4715) ((lambda (g4728@export-env g4729@export-subst g472a@macro* g472b@invoke-code g472c@vis* g472d@inv* g472e@imp* g472f@ver g4730@name) ((lambda (g473a@id g473b@name g473c@ver g473d@imp* g473e@vis* g473f@inv* g4740@visit-proc g4741@invoke-proc g4742@visit-code g4743@invoke-code) (begin (g2acd@g296c@install-library g473a@id g473b@name g473c@ver g473d@imp* g473e@vis* g473f@inv* g4729@export-subst g4728@export-env g4740@visit-proc g4741@invoke-proc g4742@visit-code g4743@invoke-code '#t g46fb@filename) (values g473a@id g473b@name g473c@ver g473d@imp* g473e@vis* g473f@inv* g4743@invoke-code g4742@visit-code g4729@export-subst g4728@export-env))) (gensym) g4730@name g472f@ver (map g2ad3@g2978@library-spec g472e@imp*) (map g2ad3@g2978@library-spec g472c@vis*) (map g2ad3@g2978@library-spec g472d@inv*) (lambda () (g4703@visit! g472a@macro*)) (lambda () (eval-core (g28a9@g2861@expanded->core g472b@invoke-code))) (g4701@build-visit-code g472a@macro*) g472b@invoke-code)) g471e@g4715 g471d@g4713 g471c@g4711 g471b@g470f g471a@g470d g4719@g470b g4718@g4709 g4717@g4707 g4716@g4705))))) '#f '#f)) g4768) (if (= g4769 '2) (apply (lambda (g475e@x g475f@filename) (g2f81@library-expander g475e@x g475f@filename (lambda (g4762@x) (values)))) g4768) (if (= g4769 '1) (apply (lambda (g4764@x) (g2f81@library-expander g4764@x '#f (lambda (g4766@x) (values)))) g4768) (error 'apply '"invalid arg count"))))) (length g4768)))) (set! g2f83@boot-library-expand (lambda (g476a@x) (call-with-values (lambda () (g2f81@library-expander g476a@x)) (lambda (g4780@g476d g4781@g476f g4782@g4771 g4783@g4773 g4784@g4775 g4785@g4777 g4786@g4779 g4787@g477b g4788@g477d g4789@g477f) ((lambda (g4794@export-env g4795@export-subst g4796@visit-code g4797@invoke-code g4798@inv* g4799@vis* g479a@imp* g479b@ver g479c@name g479d@id) (values g479c@name g4797@invoke-code g4795@export-subst g4794@export-env)) g4789@g477f g4788@g477d g4787@g477b g4786@g4779 g4785@g4777 g4784@g4775 g4783@g4773 g4782@g4771 g4781@g476f g4780@g476d))))) (set! g2f85@rev-map-append (lambda (g47a8@f g47a9@ls g47aa@ac) (if (null? g47a9@ls) g47aa@ac (g2f85@rev-map-append g47a8@f (cdr g47a9@ls) (cons (g47a8@f (car g47a9@ls)) g47aa@ac))))) (set! g2f87@build-exports (lambda (g47ae@lex*+loc* g47af@init*) (g2c0a@g2b79@build-sequence '#f (cons (g2c0b@g2b7b@build-void) (g2f85@rev-map-append (lambda (g47b2@x) (list 'set! (cdr g47b2@x) (car g47b2@x))) g47ae@lex*+loc* g47af@init*))))) (set! g2f89@make-export-subst (lambda (g47b4@name* g47b5@id*) (map (lambda (g47b8@name g47b9@id) ((lambda (g47bc@label) (begin (if (not g47bc@label) (g2f9f@syntax-violation '#f '"cannot export unbound identifier" g47b9@id) (void)) (cons g47b8@name g47bc@label))) (g2cc5@id->label g47b9@id))) g47b4@name* g47b5@id*))) (set! g2f8b@make-export-env/macros (lambda (g47be@lex* g47bf@loc* g47c0@r) ((lambda (g47c5@lookup) (begin (set! g47c5@lookup (lambda (g47e2@x) ((letrec ((g47e4@f (lambda (g47e6@x g47e7@lex* g47e8@loc*) (if (pair? g47e7@lex*) (if (eq? g47e6@x (car g47e7@lex*)) (car g47e8@loc*) (g47e4@f g47e6@x (cdr g47e7@lex*) (cdr g47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) g47e4@f) g47e2@x g47be@lex* g47bf@loc*))) ((letrec ((g47c6@f (lambda (g47c8@r g47c9@env g47ca@global* g47cb@macro*) (if (null? g47c8@r) (values g47c9@env g47ca@global* g47cb@macro*) ((lambda (g47d0@x) ((lambda (g47d2@label g47d3@b) ((lambda (g47d6@t) (if (memv g47d6@t '(lexical)) ((lambda (g47d8@v) ((lambda (g47da@loc g47db@type) (g47c6@f (cdr g47c8@r) (cons (cons* g47d2@label g47db@type g47da@loc) g47c9@env) (cons (cons (g2e42@lexical-var g47d8@v) g47da@loc) g47ca@global*) g47cb@macro*)) (g47c5@lookup (g2e42@lexical-var g47d8@v)) (if (g2e44@lexical-mutable? g47d8@v) 'mutable 'global))) (g2ccf@binding-value g47d3@b)) (if (memv g47d6@t '(local-macro)) ((lambda (g47de@loc) (g47c6@f (cdr g47c8@r) (cons (cons* g47d2@label 'global-macro g47de@loc) g47c9@env) g47ca@global* (cons (cons g47de@loc (g2ccf@binding-value g47d3@b)) g47cb@macro*))) (gensym)) (if (memv g47d6@t '(local-macro!)) ((lambda (g47e0@loc) (g47c6@f (cdr g47c8@r) (cons (cons* g47d2@label 'global-macro! g47e0@loc) g47c9@env) g47ca@global* (cons (cons g47e0@loc (g2ccf@binding-value g47d3@b)) g47cb@macro*))) (gensym)) (if (memv g47d6@t '($rtd $module)) (g47c6@f (cdr g47c8@r) (cons g47d0@x g47c9@env) g47ca@global* g47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (g2ccd@binding-type g47d3@b) (g2ccf@binding-value g47d3@b))))))) (g2ccd@binding-type g47d3@b))) (car g47d0@x) (cdr g47d0@x))) (car g47c8@r)))))) g47c6@f) g47c0@r '() '() '()))) '#f))) (set! g2f8d@generate-temporaries (lambda (g47ec@ls) ((lambda (g47ee@t) ((lambda (g47f0@ls/false) (if g47f0@ls/false (apply (lambda (g47f2@ls) (map (lambda (g47f4@x) (g2c75@make-stx ((lambda (g47f6@x) (if (or (symbol? g47f6@x) (string? g47f6@x)) (gensym g47f6@x) (gensym 't))) (g2fa5@syntax->datum g47f4@x)) g2c27@top-mark* '() '())) g47f2@ls)) g47f0@ls/false) ((lambda (g47f8@t) ((lambda (g47fa@ls/false) (if g47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) g47fa@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g47f8@t))) (g2eb6@syntax-dispatch g47f8@t '_))) g47ee@t))) (g2eb6@syntax-dispatch g47ee@t 'each-any))) g47ec@ls))) (set! g2f8f@free-identifier=? (lambda (g47fc@x g47fd@y) (if (g2cab@id? g47fc@x) (if (g2cab@id? g47fd@y) (g2cb3@free-id=? g47fc@x g47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" g47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" g47fc@x)))) (set! g2f91@bound-identifier=? (lambda (g4800@x g4801@y) (if (g2cab@id? g4800@x) (if (g2cab@id? g4801@y) (g2cb1@bound-id=? g4800@x g4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" g4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" g4800@x)))) (set! g2f93@make-source-condition (lambda (g4804@x) ((lambda (g480e@g4809 g4810@g480b g4812@g480a g4815@g4808 g4817@make-source-condition g4819@g4806 g481b@g4807 g481d@source-condition? g481f@source-filename g4821@source-character) (begin (set! g480e@g4809 (make-record-type-descriptor '&source-information g4c6c@g49b3@&condition-rtd 'g480c '#f '#f '#((immutable file-name) (immutable character)))) (set! g4810@g480b '#f) (set! g4812@g480a (make-record-constructor-descriptor g480e@g4809 g4c6d@g49b5@&condition-rcd g4810@g480b)) (set! g4815@g4808 (record-predicate g480e@g4809)) (set! g4817@make-source-condition (record-constructor g4812@g480a)) (set! g4819@g4806 (record-accessor g480e@g4809 '0)) (set! g481b@g4807 (record-accessor g480e@g4809 '1)) (set! g481d@source-condition? (condition-predicate g480e@g4809)) (set! g481f@source-filename (condition-accessor g480e@g4809 g4819@g4806)) (set! g4821@source-character (condition-accessor g480e@g4809 g481b@g4807)) (if (pair? g4804@x) (g4817@make-source-condition (car g4804@x) (cdr g4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g2f95@extract-position-condition (lambda (g4822@x) (g2f93@make-source-condition (g2f97@expression-position g4822@x)))) (set! g2f97@expression-position (lambda (g4824@x) (and (g2c73@stx? g4824@x) ((lambda (g4826@x) (and (g284a@g2769@annotation? g4826@x) (g284b@g276b@annotation-source g4826@x))) (g2c77@stx-expr g4824@x))))) (set! g2f99@assertion-error (lambda (g4828@expr g4829@pos) (raise (condition (g4c9c@g4a77@make-assertion-violation) (g4cae@g4aa9@make-who-condition 'assert) (g4c72@g4a0a@make-message-condition '"assertion failed") (g4ca4@g4a8e@make-irritants-condition (list g4828@expr)) (g2f93@make-source-condition g4829@pos))))) (set! g2f9b@syntax-error (lambda (g482c@x . g482e@args) (begin (if (not (for-all string? g482e@args)) (assertion-violation 'syntax-error '"invalid argument" g482e@args) (void)) (raise (condition (g4c72@g4a0a@make-message-condition (if (null? g482e@args) '"invalid syntax" (apply string-append g482e@args))) (g4cd0@g4b05@make-syntax-violation (g2fa5@syntax->datum g482c@x) '#f) (g2f95@extract-position-condition g482c@x)))))) (set! g2f9d@syntax-violation* (lambda (g4830@who g4831@msg g4832@form g4833@condition-object) (begin (if (not (string? g4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" g4831@msg) (void)) ((lambda (g4838@who) (raise (condition (if g4838@who (g4cae@g4aa9@make-who-condition g4838@who) (condition)) (g4c72@g4a0a@make-message-condition g4831@msg) g4833@condition-object (g2f95@extract-position-condition g4832@form)))) (if (or (string? g4830@who) (symbol? g4830@who)) g4830@who (if (not g4830@who) ((lambda (g483a@t) ((lambda (g483c@ls/false) (if (and g483c@ls/false (apply (lambda (g483e@id) (g2cab@id? g483e@id)) g483c@ls/false)) (apply (lambda (g4840@id) (g2fa5@syntax->datum g4840@id)) g483c@ls/false) ((lambda (g4842@t) ((lambda (g4844@ls/false) (if (and g4844@ls/false (apply (lambda (g4846@id g4847@rest) (g2cab@id? g4846@id)) g4844@ls/false)) (apply (lambda (g484a@id g484b@rest) (g2fa5@syntax->datum g484a@id)) g4844@ls/false) ((lambda (g484e@t) ((lambda (g4850@ls/false) (if g4850@ls/false (apply (lambda () '#f) g4850@ls/false) (g2f9f@syntax-violation '#f '"invalid syntax" g484e@t))) (g2eb6@syntax-dispatch g484e@t '_))) g4842@t))) (g2eb6@syntax-dispatch g4842@t '(any . any)))) g483a@t))) (g2eb6@syntax-dispatch g483a@t 'any))) g4832@form) (assertion-violation 'syntax-violation '"invalid who argument" g4830@who))))))) (set! g2f9f@syntax-violation (lambda g4860 ((lambda (g4861) (if (= g4861 '3) (apply (lambda (g4852@who g4853@msg g4854@form) (g2f9f@syntax-violation g4852@who g4853@msg g4854@form '#f)) g4860) (if (= g4861 '4) (apply (lambda (g4858@who g4859@msg g485a@form g485b@subform) (g2f9d@syntax-violation* g4858@who g4859@msg g485a@form (g4cd0@g4b05@make-syntax-violation (g2fa5@syntax->datum g485a@form) (g2fa5@syntax->datum g485b@subform)))) g4860) (error 'apply '"invalid arg count")))) (length g4860)))) (set! g2fa1@identifier? (lambda (g4862@x) (g2cab@id? g4862@x))) (set! g2fa3@datum->syntax (lambda (g4864@id g4865@datum) (if (g2cab@id? g4864@id) (g2c89@datum->stx g4864@id g4865@datum) (assertion-violation 'datum->syntax '"not an identifier" g4864@id)))) (set! g2fa5@syntax->datum (lambda (g4868@x) (g2cc1@stx->datum g4868@x))) (set! g2fa7@compile-r6rs-top-level (lambda (g486a@x*) (call-with-values (lambda () (g2f31@top-level-expander g486a@x*)) (lambda (g4870@g486d g4871@g486f) ((lambda (g4874@invoke-code g4875@lib*) (lambda () (begin (for-each g2acf@g2970@invoke-library g4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (g28a9@g2861@expanded->core g4874@invoke-code)) (void)) (eval-core (g28a9@g2861@expanded->core g4874@invoke-code))))) g4871@g486f g4870@g486d))))) (set! g2fa9@pre-compile-r6rs-top-level (lambda (g4878@x*) (call-with-values (lambda () (g2f31@top-level-expander g4878@x*)) (lambda (g487e@g487b g487f@g487d) ((lambda (g4882@invoke-code g4883@lib*) (begin (for-each g2acf@g2970@invoke-library g4883@lib*) (g2853@g277b@compile-core (g28a9@g2861@expanded->core g4882@invoke-code)))) g487f@g487d g487e@g487b))))) (set! g2fab@interaction-environment ((lambda (g4886@the-env) (lambda () (or g4886@the-env ((lambda (g4888@lib g4889@rib) (begin ((lambda (g488c@subst) (begin (g2c50@set-rib-sym*! g4889@rib (map car g488c@subst)) (g2c52@set-rib-mark**! g4889@rib (map (lambda (g488e@x) g2c27@top-mark*) g488c@subst)) (g2c54@set-rib-label*! g4889@rib (map cdr g488c@subst)))) (g2aa4@g291a@library-subst g4888@lib)) ((lambda (g4890@env) (begin (set! g4886@the-env g4890@env) g4890@env)) (g2f5d@make-interaction-env g4889@rib '() '())))) (g2ac8@g2962@find-library-by-name '(mosh interaction)) (g2c5a@make-empty-rib))))) '#f)) (set! g2fad@top-level-context (g2855@g277f@make-parameter '#f)) (begin (set! g499e@g2fad@top-level-context g2fad@top-level-context) (set! g499d@g2fab@interaction-environment g2fab@interaction-environment) (set! g499c@g2fa9@pre-compile-r6rs-top-level g2fa9@pre-compile-r6rs-top-level) (set! g499b@g2fa7@compile-r6rs-top-level g2fa7@compile-r6rs-top-level) (set! g499a@g2fa5@syntax->datum g2fa5@syntax->datum) (set! g4999@g2fa3@datum->syntax g2fa3@datum->syntax) (set! g4998@g2fa1@identifier? g2fa1@identifier?) (set! g4997@g2f9f@syntax-violation g2f9f@syntax-violation) (set! g4996@g2f9d@syntax-violation* g2f9d@syntax-violation*) (set! g4995@g2f9b@syntax-error g2f9b@syntax-error) (set! g4994@g2f99@assertion-error g2f99@assertion-error) (set! g4993@g2f97@expression-position g2f97@expression-position) (set! g4992@g2f95@extract-position-condition g2f95@extract-position-condition) (set! g4991@g2f93@make-source-condition g2f93@make-source-condition) (set! g4990@g2f91@bound-identifier=? g2f91@bound-identifier=?) (set! g498f@g2f8f@free-identifier=? g2f8f@free-identifier=?) (set! g498e@g2f8d@generate-temporaries g2f8d@generate-temporaries) (set! g498d@g2f8b@make-export-env/macros g2f8b@make-export-env/macros) (set! g498c@g2f89@make-export-subst g2f89@make-export-subst) (set! g498b@g2f87@build-exports g2f87@build-exports) (set! g498a@g2f85@rev-map-append g2f85@rev-map-append) (set! g4989@g2f83@boot-library-expand g2f83@boot-library-expand) (set! g4988@g2f81@library-expander g2f81@library-expander) (set! g4987@g2f7f@eval g2f7f@eval) (set! g4986@g2f7d@expand g2f7d@expand) (set! g4985@g2f7b@scheme-report-environment g2f7b@scheme-report-environment) (set! g4984@g2f79@null-environment g2f79@null-environment) (set! g4983@g2f77@environment g2f77@environment) (set! g4982@g2f75@environment-symbols g2f75@environment-symbols) (set! g4981@g2f73@environment? g2f73@environment?) (set! g4980@g2f71@parse-binding g2f71@parse-binding) (set! g497f@g2f6f@environment-bindings g2f6f@environment-bindings) (set! g497e@g2f6d@interaction-environment-symbols g2f6d@interaction-environment-symbols) (set! g497d@g2f6b@rp g2f6b@rp) (set! g497c@g2f69@set-interaction-env-locs! g2f69@set-interaction-env-locs!) (set! g497b@g2f67@set-interaction-env-r! g2f67@set-interaction-env-r!) (set! g497a@g2f65@set-interaction-env-rib! g2f65@set-interaction-env-rib!) (set! g4979@g2f63@interaction-env-locs g2f63@interaction-env-locs) (set! g4978@g2f61@interaction-env-r g2f61@interaction-env-r) (set! g4977@g2f5f@interaction-env-rib g2f5f@interaction-env-rib) (set! g4976@g2f5d@make-interaction-env g2f5d@make-interaction-env) (set! g4975@g2f5b@interaction-env? g2f5b@interaction-env?) (set! g4974@g2f58@g2f50 g2f58@g2f50) (set! g4973@g2f56@g2f51 g2f56@g2f51) (set! g4972@g2f54@g2f4f g2f54@g2f4f) (set! g4971@g2f4e@rp g2f4e@rp) (set! g4970@g2f4c@set-env-itc! g2f4c@set-env-itc!) (set! g496f@g2f4a@set-env-labels! g2f4a@set-env-labels!) (set! g496e@g2f48@set-env-names! g2f48@set-env-names!) (set! g496d@g2f46@env-itc g2f46@env-itc) (set! g496c@g2f44@env-labels g2f44@env-labels) (set! g496b@g2f42@env-names g2f42@env-names) (set! g496a@g2f40@make-env g2f40@make-env) (set! g4969@g2f3e@env? g2f3e@env?) (set! g4968@g2f3b@g2f33 g2f3b@g2f33) (set! g4967@g2f39@g2f34 g2f39@g2f34) (set! g4966@g2f37@g2f32 g2f37@g2f32) (set! g4965@g2f31@top-level-expander g2f31@top-level-expander) (set! g4964@g2f2f@parse-top-level-program g2f2f@parse-top-level-program) (set! g4963@g2f2d@core-library-expander g2f2d@core-library-expander) (set! g4962@g2f2b@library-body-expander g2f2b@library-body-expander) (set! g4961@g2f29@chi-interaction-expr g2f29@chi-interaction-expr) (set! g4960@g2f27@chi-library-internal g2f27@chi-library-internal) (set! g495f@g2f25@imp-collector g2f25@imp-collector) (set! g495e@g2f23@vis-collector g2f23@vis-collector) (set! g495d@g2f21@inv-collector g2f21@inv-collector) (set! g495c@g2f1f@make-collector g2f1f@make-collector) (set! g495b@g2f1d@make-top-rib g2f1d@make-top-rib) (set! g495a@g2f1b@parse-import-spec* g2f1b@parse-import-spec*) (set! g4959@g2f19@parse-library g2f19@parse-library) (set! g4958@g2f17@parse-library-name g2f17@parse-library-name) (set! g4957@g2f15@parse-exports g2f15@parse-exports) (set! g4956@g2f13@expand-transformer g2f13@expand-transformer) (set! g4955@g2f11@chi-body* g2f11@chi-body*) (set! g4954@g2f0f@chi-internal-module g2f0f@chi-internal-module) (set! g4953@g2f0d@module-interface-exp-id* g2f0d@module-interface-exp-id*) (set! g4952@g2f0b@set-module-interface-exp-lab-vec! g2f0b@set-module-interface-exp-lab-vec!) (set! g4951@g2f09@set-module-interface-exp-id-vec! g2f09@set-module-interface-exp-id-vec!) (set! g4950@g2f07@set-module-interface-first-mark! g2f07@set-module-interface-first-mark!) (set! g494f@g2f05@module-interface-exp-lab-vec g2f05@module-interface-exp-lab-vec) (set! g494e@g2f03@module-interface-exp-id-vec g2f03@module-interface-exp-id-vec) (set! g494d@g2f01@module-interface-first-mark g2f01@module-interface-first-mark) (set! g494c@g2eff@make-module-interface g2eff@make-module-interface) (set! g494b@g2efd@module-interface? g2efd@module-interface?) (set! g494a@g2efa@g2ef2 g2efa@g2ef2) (set! g4949@g2ef8@g2ef3 g2ef8@g2ef3) (set! g4948@g2ef6@g2ef1 g2ef6@g2ef1) (set! g4947@g2ef0@parse-module g2ef0@parse-module) (set! g4946@g2eee@chi-internal g2eee@chi-internal) (set! g4945@g2eec@find-dups g2eec@find-dups) (set! g4944@g2eea@find-bound=? g2eea@find-bound=?) (set! g4943@g2ee8@chi-rhs* g2ee8@chi-rhs*) (set! g4942@g2ee6@expand-interaction-rhs*/init* g2ee6@expand-interaction-rhs*/init*) (set! g4941@g2ee4@chi-rhs g2ee4@chi-rhs) (set! g4940@g2ee2@chi-defun g2ee2@chi-defun) (set! g493f@g2ee0@chi-lambda-clause* g2ee0@chi-lambda-clause*) (set! g493e@g2ede@chi-lambda-clause g2ede@chi-lambda-clause) (set! g493d@g2edc@verify-formals g2edc@verify-formals) (set! g493c@g2eda@chi-set! g2eda@chi-set!) (set! g493b@g2ed8@chi-expr g2ed8@chi-expr) (set! g493a@g2ed6@chi-application g2ed6@chi-application) (set! g4939@g2ed4@chi-expr* g2ed4@chi-expr*) (set! g4938@g2ed2@chi-global-macro g2ed2@chi-global-macro) (set! g4937@g2ed0@chi-local-macro g2ed0@chi-local-macro) (set! g4936@g2ece@chi-macro g2ece@chi-macro) (set! g4935@g2ecc@do-macro-call g2ecc@do-macro-call) (set! g4934@g2eca@local-macro-transformer g2eca@local-macro-transformer) (set! g4933@g2ec8@macro-transformer g2ec8@macro-transformer) (set! g4932@g2ec6@symbol-macro g2ec6@symbol-macro) (set! g4931@g2ec4@core-macro-transformer g2ec4@core-macro-transformer) (set! g4930@g2ec2@syntax-transformer g2ec2@syntax-transformer) (set! g492f@g2ec0@ellipsis-map g2ec0@ellipsis-map) (set! g492e@g2ebe@syntax-case-transformer g2ebe@syntax-case-transformer) (set! g492d@g2ebc@verify-literals g2ebc@verify-literals) (set! g492c@g2eba@underscore? g2eba@underscore?) (set! g492b@g2eb8@ellipsis? g2eb8@ellipsis?) (set! g492a@g2eb6@syntax-dispatch g2eb6@syntax-dispatch) (set! g4929@g2eb4@convert-pattern g2eb4@convert-pattern) (set! g4928@g2eb2@foreign-call-transformer g2eb2@foreign-call-transformer) (set! g4927@g2eb0@parameterize-macro g2eb0@parameterize-macro) (set! g4926@g2eae@incorrect-usage-macro g2eae@incorrect-usage-macro) (set! g4925@g2eac@define-condition-type-macro g2eac@define-condition-type-macro) (set! g4924@g2eaa@define-record-type-macro g2eaa@define-record-type-macro) (set! g4923@g2ea8@define-struct-macro g2ea8@define-struct-macro) (set! g4922@g2ea6@quasisyntax-macro g2ea6@quasisyntax-macro) (set! g4921@g2ea4@quasiquote-macro g2ea4@quasiquote-macro) (set! g4920@g2ea2@syntax-rules-macro g2ea2@syntax-rules-macro) (set! g491f@g2ea0@include-into-macro g2ea0@include-into-macro) (set! g491e@g2e9e@include-macro g2e9e@include-macro) (set! g491d@g2e9c@do-include g2e9c@do-include) (set! g491c@g2e9a@cond-macro g2e9a@cond-macro) (set! g491b@g2e98@and-macro g2e98@and-macro) (set! g491a@g2e96@or-macro g2e96@or-macro) (set! g4919@g2e94@let*-macro g2e94@let*-macro) (set! g4918@g2e92@do-macro g2e92@do-macro) (set! g4917@g2e90@identifier-syntax-macro g2e90@identifier-syntax-macro) (set! g4916@g2e8e@endianness-macro g2e8e@endianness-macro) (set! g4915@g2e8c@assert-macro g2e8c@assert-macro) (set! g4914@g2e8a@delay-macro g2e8a@delay-macro) (set! g4913@g2e88@time-macro g2e88@time-macro) (set! g4912@g2e86@define-enumeration-macro g2e86@define-enumeration-macro) (set! g4911@g2e84@guard-macro g2e84@guard-macro) (set! g4910@g2e82@trace-letrec-syntax-macro g2e82@trace-letrec-syntax-macro) (set! g490f@g2e80@trace-let-syntax-macro g2e80@trace-let-syntax-macro) (set! g490e@g2e7e@trace-let/rec-syntax g2e7e@trace-let/rec-syntax) (set! g490d@g2e7c@trace-define-syntax-macro g2e7c@trace-define-syntax-macro) (set! g490c@g2e7a@trace-define-macro g2e7a@trace-define-macro) (set! g490b@g2e78@trace-lambda-macro g2e78@trace-lambda-macro) (set! g490a@g2e76@let*-values-macro g2e76@let*-values-macro) (set! g4909@g2e74@let-values-macro g2e74@let-values-macro) (set! g4908@g2e72@let-macro g2e72@let-macro) (set! g4907@g2e70@invalid-fmls-error g2e70@invalid-fmls-error) (set! g4906@g2e6e@with-syntax-macro g2e6e@with-syntax-macro) (set! g4905@g2e6c@bless g2e6c@bless) (set! g4904@g2e6a@lambda-transformer g2e6a@lambda-transformer) (set! g4903@g2e68@case-lambda-transformer g2e68@case-lambda-transformer) (set! g4902@g2e66@quote-transformer g2e66@quote-transformer) (set! g4901@g2e64@case-macro g2e64@case-macro) (set! g4900@g2e62@or-transformer g2e62@or-transformer) (set! g48ff@g2e60@and-transformer g2e60@and-transformer) (set! g48fe@g2e5e@if-transformer g2e5e@if-transformer) (set! g48fd@g2e5c@unless-macro g2e5c@unless-macro) (set! g48fc@g2e5a@when-macro g2e5a@when-macro) (set! g48fb@g2e58@record-constructor-descriptor-transformer g2e58@record-constructor-descriptor-transformer) (set! g48fa@g2e56@record-type-descriptor-transformer g2e56@record-type-descriptor-transformer) (set! g48f9@g2e54@type-descriptor-transformer g2e54@type-descriptor-transformer) (set! g48f8@g2e52@fluid-let-syntax-transformer g2e52@fluid-let-syntax-transformer) (set! g48f7@g2e50@letrec*-transformer g2e50@letrec*-transformer) (set! g48f6@g2e4e@letrec-transformer g2e4e@letrec-transformer) (set! g48f5@g2e4c@letrec-helper g2e4c@letrec-helper) (set! g48f4@g2e4a@add-lexicals g2e4a@add-lexicals) (set! g48f3@g2e48@add-lexical g2e48@add-lexical) (set! g48f2@g2e46@set-lexical-mutable! g2e46@set-lexical-mutable!) (set! g48f1@g2e44@lexical-mutable? g2e44@lexical-mutable?) (set! g48f0@g2e42@lexical-var g2e42@lexical-var) (set! g48ef@g2e40@scheme-stx g2e40@scheme-stx) (set! g48ee@g2e3e@scheme-stx-hashtable g2e3e@scheme-stx-hashtable) (set! g48ed@g2e3c@parse-define-syntax g2e3c@parse-define-syntax) (set! g48ec@g2e3a@parse-define g2e3a@parse-define) (set! g48eb@g2ce9@make-eval-transformer g2ce9@make-eval-transformer) (set! g48ea@g2ce7@variable-transformer-procedure g2ce7@variable-transformer-procedure) (set! g48e9@g2ce5@variable-transformer? g2ce5@variable-transformer?) (set! g48e8@g2ce3@make-variable-transformer g2ce3@make-variable-transformer) (set! g48e7@g2ce1@sanitize-binding g2ce1@sanitize-binding) (set! g48e6@g2cd3@syntax-type g2cd3@syntax-type) (set! g48e5@g2cd1@raise-unbound-error g2cd1@raise-unbound-error) (set! g48e4@g2ccf@binding-value g2ccf@binding-value) (set! g48e3@g2ccd@binding-type g2ccd@binding-type) (set! g48e2@g2ccb@make-binding g2ccb@make-binding) (set! g48e1@g2cc9@label->binding g2cc9@label->binding) (set! g48e0@g2cc7@id->real-label g2cc7@id->real-label) (set! g48df@g2cc5@id->label g2cc5@id->label) (set! g48de@g2cc3@same-marks*? g2cc3@same-marks*?) (set! g48dd@g2cc1@stx->datum g2cc1@stx->datum) (set! g48dc@g2cbf@strip g2cbf@strip) (set! g48db@g2cbd@strip-annotations g2cbd@strip-annotations) (set! g48da@g2cbb@self-evaluating? g2cbb@self-evaluating?) (set! g48d9@g2cb9@bound-id-member? g2cb9@bound-id-member?) (set! g48d8@g2cb7@distinct-bound-ids? g2cb7@distinct-bound-ids?) (set! g48d7@g2cb5@valid-bound-ids? g2cb5@valid-bound-ids?) (set! g48d6@g2cb3@free-id=? g2cb3@free-id=?) (set! g48d5@g2cb1@bound-id=? g2cb1@bound-id=?) (set! g48d4@g2caf@same-marks? g2caf@same-marks?) (set! g48d3@g2cad@id->sym g2cad@id->sym) (set! g48d2@g2cab@id? g2cab@id?) (set! g48d1@g2ca9@syntax->list g2ca9@syntax->list) (set! g48d0@g2ca7@syntax-cdr g2ca7@syntax-cdr) (set! g48cf@g2ca5@syntax-car g2ca5@syntax-car) (set! g48ce@g2ca3@syntax-list? g2ca3@syntax-list?) (set! g48cd@g2ca1@syntax-null? g2ca1@syntax-null?) (set! g48cc@g2c9f@syntax-vector? g2c9f@syntax-vector?) (set! g48cb@g2c9d@syntax-pair? g2c9d@syntax-pair?) (set! g48ca@g2c9b@syntax-vector->list g2c9b@syntax-vector->list) (set! g48c9@g2c99@syntax-kind? g2c99@syntax-kind?) (set! g48c8@g2c97@add-subst g2c97@add-subst) (set! g48c7@g2c95@add-mark g2c95@add-mark) (set! g48c6@g2c93@mkstx g2c93@mkstx) (set! g48c5@g2c91@join-wraps g2c91@join-wraps) (set! g48c4@g2c8f@anti-mark? g2c8f@anti-mark?) (set! g48c3@g2c8d@anti-mark g2c8d@anti-mark) (set! g48c2@g2c8b@gen-mark g2c8b@gen-mark) (set! g48c1@g2c89@datum->stx g2c89@datum->stx) (set! g48c0@g2c87@rp g2c87@rp) (set! g48bf@g2c85@set-stx-ae*! g2c85@set-stx-ae*!) (set! g48be@g2c83@set-stx-subst*! g2c83@set-stx-subst*!) (set! g48bd@g2c81@set-stx-mark*! g2c81@set-stx-mark*!) (set! g48bc@g2c7f@set-stx-expr! g2c7f@set-stx-expr!) (set! g48bb@g2c7d@stx-ae* g2c7d@stx-ae*) (set! g48ba@g2c7b@stx-subst* g2c7b@stx-subst*) (set! g48b9@g2c79@stx-mark* g2c79@stx-mark*) (set! g48b8@g2c77@stx-expr g2c77@stx-expr) (set! g48b7@g2c75@make-stx g2c75@make-stx) (set! g48b6@g2c73@stx? g2c73@stx?) (set! g48b5@g2c70@g2c68 g2c70@g2c68) (set! g48b4@g2c6e@g2c69 g2c6e@g2c69) (set! g48b3@g2c6c@g2c67 g2c6c@g2c67) (set! g48b2@g2c66@make-full-rib g2c66@make-full-rib) (set! g48b1@g2c64@unseal-rib! g2c64@unseal-rib!) (set! g48b0@g2c62@seal-rib! g2c62@seal-rib!) (set! g48af@g2c60@make-rib-map g2c60@make-rib-map) (set! g48ae@g2c5e@extend-rib/nc! g2c5e@extend-rib/nc!) (set! g48ad@g2c5c@extend-rib! g2c5c@extend-rib!) (set! g48ac@g2c5a@make-empty-rib g2c5a@make-empty-rib) (set! g48ab@g2c58@set-rib-cache! g2c58@set-rib-cache!) (set! g48aa@g2c56@set-rib-sealed/freq! g2c56@set-rib-sealed/freq!) (set! g48a9@g2c54@set-rib-label*! g2c54@set-rib-label*!) (set! g48a8@g2c52@set-rib-mark**! g2c52@set-rib-mark**!) (set! g48a7@g2c50@set-rib-sym*! g2c50@set-rib-sym*!) (set! g48a6@g2c4e@rib-cache g2c4e@rib-cache) (set! g48a5@g2c4c@rib-sealed/freq g2c4c@rib-sealed/freq) (set! g48a4@g2c4a@rib-label* g2c4a@rib-label*) (set! g48a3@g2c48@rib-mark** g2c48@rib-mark**) (set! g48a2@g2c46@rib-sym* g2c46@rib-sym*) (set! g48a1@g2c44@make-rib g2c44@make-rib) (set! g48a0@g2c42@rib? g2c42@rib?) (set! g489f@g2c3f@g2c37 g2c3f@g2c37) (set! g489e@g2c3d@g2c38 g2c3d@g2c38) (set! g489d@g2c3b@g2c36 g2c3b@g2c36) (set! g489c@g2c35@gen-define-label g2c35@gen-define-label) (set! g489b@g2c33@gen-define-label+loc g2c33@gen-define-label+loc) (set! g489a@g2c31@gen-top-level-label g2c31@gen-top-level-label) (set! g4899@g2c2f@gen-label g2c2f@gen-label) (set! g4898@g2c2d@gen-global g2c2d@gen-global) (set! g4897@g2c2b@gen-lexical g2c2b@gen-lexical) (set! g4896@g2c29@top-marked? g2c29@top-marked?) (set! g4895@g2c27@top-mark* g2c27@top-mark*) (set! g4894@g2c22@set-union g2c22@set-union) (set! g4893@g2c20@set-cons g2c20@set-cons) (set! g4892@g2c1e@file-options-macro g2c1e@file-options-macro) (g2ac5@g295c@current-library-expander g2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g49a8@g49a3 g49aa@g49a5 g49ac@g49a4 g49af@&condition? g49b1@make-&condition g49b3@&condition-rtd g49b5@&condition-rcd g4a01@g49fc g4a03@g49fe g4a05@g49fd g4a08@p? g4a0a@make-message-condition g4a0c@g49fb g4a0e@message-condition? g4a10@condition-message g4a12@&message-rtd g4a14@&message-rcd g4a1a@g4a15 g4a1c@g4a17 g4a1e@g4a16 g4a21@p? g4a23@make-warning g4a25@warning? g4a27@&warning-rtd g4a29@&warning-rcd g4a2f@g4a2a g4a31@g4a2c g4a33@g4a2b g4a36@p? g4a38@make-serious-condition g4a3a@serious-condition? g4a3c@&serious-rtd g4a3e@&serious-rcd g4a44@g4a3f g4a46@g4a41 g4a48@g4a40 g4a4b@p? g4a4d@make-error g4a4f@error? g4a51@&error-rtd g4a53@&error-rcd g4a59@g4a54 g4a5b@g4a56 g4a5d@g4a55 g4a60@p? g4a62@make-violation g4a64@violation? g4a66@&violation-rtd g4a68@&violation-rcd g4a6e@g4a69 g4a70@g4a6b g4a72@g4a6a g4a75@p? g4a77@make-assertion-violation g4a79@assertion-violation? g4a7b@&assertion-rtd g4a7d@&assertion-rcd g4a85@g4a80 g4a87@g4a82 g4a89@g4a81 g4a8c@p? g4a8e@make-irritants-condition g4a90@g4a7f g4a92@irritants-condition? g4a94@condition-irritants g4a96@&irritants-rtd g4a98@&irritants-rcd g4aa0@g4a9b g4aa2@g4a9d g4aa4@g4a9c g4aa7@p? g4aa9@make-who-condition g4aab@g4a9a g4aad@who-condition? g4aaf@condition-who g4ab1@&who-rtd g4ab3@&who-rcd g4ab9@g4ab4 g4abb@g4ab6 g4abd@g4ab5 g4ac0@p? g4ac2@make-non-continuable-violation g4ac4@non-continuable-violation? g4ac6@&non-continuable-rtd g4ac8@&non-continuable-rcd g4ace@g4ac9 g4ad0@g4acb g4ad2@g4aca g4ad5@p? g4ad7@make-implementation-restriction-violation g4ad9@implementation-restriction-violation? g4adb@&implementation-restriction-rtd g4add@&implementation-restriction-rcd g4ae3@g4ade g4ae5@g4ae0 g4ae7@g4adf g4aea@p? g4aec@make-lexical-violation g4aee@lexical-violation? g4af0@&lexical-rtd g4af2@&lexical-rcd g4afc@g4af7 g4afe@g4af9 g4b00@g4af8 g4b03@p? g4b05@make-syntax-violation g4b07@g4af4 g4b09@g4af6 g4b0b@syntax-violation? g4b0d@syntax-violation-form g4b0f@syntax-violation-subform g4b11@&syntax-rtd g4b13@&syntax-rcd g4b19@g4b14 g4b1b@g4b16 g4b1d@g4b15 g4b20@p? g4b22@make-undefined-violation g4b24@undefined-violation? g4b26@&undefined-rtd g4b28@&undefined-rcd g4b2e@g4b29 g4b30@g4b2b g4b32@g4b2a g4b35@p? g4b37@make-i/o-error g4b39@i/o-error? g4b3b@&i/o-rtd g4b3d@&i/o-rcd g4b43@g4b3e g4b45@g4b40 g4b47@g4b3f g4b4a@p? g4b4c@make-i/o-read-error g4b4e@i/o-read-error? g4b50@&i/o-read-rtd g4b52@&i/o-read-rcd g4b58@g4b53 g4b5a@g4b55 g4b5c@g4b54 g4b5f@p? g4b61@make-i/o-write-error g4b63@i/o-write-error? g4b65@&i/o-write-rtd g4b67@&i/o-write-rcd g4b6f@g4b6a g4b71@g4b6c g4b73@g4b6b g4b76@p? g4b78@make-i/o-invalid-position-error g4b7a@g4b69 g4b7c@i/o-invalid-position-error? g4b7e@i/o-error-position g4b80@&i/o-invalid-position-rtd g4b82@&i/o-invalid-position-rcd g4b8a@g4b85 g4b8c@g4b87 g4b8e@g4b86 g4b91@p? g4b93@make-i/o-filename-error g4b95@g4b84 g4b97@i/o-filename-error? g4b99@i/o-error-filename g4b9b@&i/o-filename-rtd g4b9d@&i/o-filename-rcd g4ba3@g4b9e g4ba5@g4ba0 g4ba7@g4b9f g4baa@p? g4bac@make-i/o-file-protection-error g4bae@i/o-file-protection-error? g4bb0@&i/o-file-protection-rtd g4bb2@&i/o-file-protection-rcd g4bb8@g4bb3 g4bba@g4bb5 g4bbc@g4bb4 g4bbf@p? g4bc1@make-i/o-file-is-read-only-error g4bc3@i/o-file-is-read-only-error? g4bc5@&i/o-file-is-read-only-rtd g4bc7@&i/o-file-is-read-only-rcd g4bcd@g4bc8 g4bcf@g4bca g4bd1@g4bc9 g4bd4@p? g4bd6@make-i/o-file-already-exists-error g4bd8@i/o-file-already-exists-error? g4bda@&i/o-file-already-exists-rtd g4bdc@&i/o-file-already-exists-rcd g4be2@g4bdd g4be4@g4bdf g4be6@g4bde g4be9@p? g4beb@make-i/o-file-does-not-exist-error g4bed@i/o-file-does-not-exist-error? g4bef@&i/o-file-does-not-exist-rtd g4bf1@&i/o-file-does-not-exist-rcd g4bf9@g4bf4 g4bfb@g4bf6 g4bfd@g4bf5 g4c00@p? g4c02@make-i/o-port-error g4c04@g4bf3 g4c06@i/o-port-error? g4c08@i/o-error-port g4c0a@&i/o-port-rtd g4c0c@&i/o-port-rcd g4c12@g4c0d g4c14@g4c0f g4c16@g4c0e g4c19@p? g4c1b@make-i/o-decoding-error g4c1d@i/o-decoding-error? g4c1f@&i/o-decoding-rtd g4c21@&i/o-decoding-rcd g4c29@g4c24 g4c2b@g4c26 g4c2d@g4c25 g4c30@p? g4c32@make-i/o-encoding-error g4c34@g4c23 g4c36@i/o-encoding-error? g4c38@i/o-encoding-error-char g4c3a@&i/o-encoding-rtd g4c3c@&i/o-encoding-rcd g4c42@g4c3d g4c44@g4c3f g4c46@g4c3e g4c49@p? g4c4b@make-no-infinities-violation g4c4d@no-infinities-violation? g4c4f@&no-infinities-rtd g4c51@&no-infinities-rcd g4c57@g4c52 g4c59@g4c54 g4c5b@g4c53 g4c5e@p? g4c60@make-no-nans-violation g4c62@no-nans-violation? g4c64@&no-nans-rtd g4c66@&no-nans-rcd) (begin (set! g49a8@g49a3 (make-record-type-descriptor '&condition '#f 'g49a6 '#f '#f '#())) (set! g49aa@g49a5 '#f) (set! g49ac@g49a4 (make-record-constructor-descriptor g49a8@g49a3 '#f g49aa@g49a5)) (set! g49af@&condition? (record-predicate g49a8@g49a3)) (set! g49b1@make-&condition (record-constructor g49ac@g49a4)) (set! g49b3@&condition-rtd g49a8@g49a3) (set! g49b5@&condition-rcd g49ac@g49a4) (set! g4a01@g49fc (make-record-type-descriptor '&message g49a8@g49a3 'g49ff '#f '#f '#((immutable message)))) (set! g4a03@g49fe '#f) (set! g4a05@g49fd (make-record-constructor-descriptor g4a01@g49fc g49ac@g49a4 g4a03@g49fe)) (set! g4a08@p? (record-predicate g4a01@g49fc)) (set! g4a0a@make-message-condition (record-constructor g4a05@g49fd)) (set! g4a0c@g49fb (record-accessor g4a01@g49fc '0)) (set! g4a0e@message-condition? (condition-predicate g4a01@g49fc)) (set! g4a10@condition-message (condition-accessor g4a01@g49fc g4a0c@g49fb)) (set! g4a12@&message-rtd g4a01@g49fc) (set! g4a14@&message-rcd g4a05@g49fd) (set! g4a1a@g4a15 (make-record-type-descriptor '&warning g49a8@g49a3 'g4a18 '#f '#f '#())) (set! g4a1c@g4a17 '#f) (set! g4a1e@g4a16 (make-record-constructor-descriptor g4a1a@g4a15 g49ac@g49a4 g4a1c@g4a17)) (set! g4a21@p? (record-predicate g4a1a@g4a15)) (set! g4a23@make-warning (record-constructor g4a1e@g4a16)) (set! g4a25@warning? (condition-predicate g4a1a@g4a15)) (set! g4a27@&warning-rtd g4a1a@g4a15) (set! g4a29@&warning-rcd g4a1e@g4a16) (set! g4a2f@g4a2a (make-record-type-descriptor '&serious g49a8@g49a3 'g4a2d '#f '#f '#())) (set! g4a31@g4a2c '#f) (set! g4a33@g4a2b (make-record-constructor-descriptor g4a2f@g4a2a g49ac@g49a4 g4a31@g4a2c)) (set! g4a36@p? (record-predicate g4a2f@g4a2a)) (set! g4a38@make-serious-condition (record-constructor g4a33@g4a2b)) (set! g4a3a@serious-condition? (condition-predicate g4a2f@g4a2a)) (set! g4a3c@&serious-rtd g4a2f@g4a2a) (set! g4a3e@&serious-rcd g4a33@g4a2b) (set! g4a44@g4a3f (make-record-type-descriptor '&error g4a2f@g4a2a 'g4a42 '#f '#f '#())) (set! g4a46@g4a41 '#f) (set! g4a48@g4a40 (make-record-constructor-descriptor g4a44@g4a3f g4a33@g4a2b g4a46@g4a41)) (set! g4a4b@p? (record-predicate g4a44@g4a3f)) (set! g4a4d@make-error (record-constructor g4a48@g4a40)) (set! g4a4f@error? (condition-predicate g4a44@g4a3f)) (set! g4a51@&error-rtd g4a44@g4a3f) (set! g4a53@&error-rcd g4a48@g4a40) (set! g4a59@g4a54 (make-record-type-descriptor '&violation g4a2f@g4a2a 'g4a57 '#f '#f '#())) (set! g4a5b@g4a56 '#f) (set! g4a5d@g4a55 (make-record-constructor-descriptor g4a59@g4a54 g4a33@g4a2b g4a5b@g4a56)) (set! g4a60@p? (record-predicate g4a59@g4a54)) (set! g4a62@make-violation (record-constructor g4a5d@g4a55)) (set! g4a64@violation? (condition-predicate g4a59@g4a54)) (set! g4a66@&violation-rtd g4a59@g4a54) (set! g4a68@&violation-rcd g4a5d@g4a55) (set! g4a6e@g4a69 (make-record-type-descriptor '&assertion g4a59@g4a54 'g4a6c '#f '#f '#())) (set! g4a70@g4a6b '#f) (set! g4a72@g4a6a (make-record-constructor-descriptor g4a6e@g4a69 g4a5d@g4a55 g4a70@g4a6b)) (set! g4a75@p? (record-predicate g4a6e@g4a69)) (set! g4a77@make-assertion-violation (record-constructor g4a72@g4a6a)) (set! g4a79@assertion-violation? (condition-predicate g4a6e@g4a69)) (set! g4a7b@&assertion-rtd g4a6e@g4a69) (set! g4a7d@&assertion-rcd g4a72@g4a6a) (set! g4a85@g4a80 (make-record-type-descriptor '&irritants g49a8@g49a3 'g4a83 '#f '#f '#((immutable irritants)))) (set! g4a87@g4a82 '#f) (set! g4a89@g4a81 (make-record-constructor-descriptor g4a85@g4a80 g49ac@g49a4 g4a87@g4a82)) (set! g4a8c@p? (record-predicate g4a85@g4a80)) (set! g4a8e@make-irritants-condition (record-constructor g4a89@g4a81)) (set! g4a90@g4a7f (record-accessor g4a85@g4a80 '0)) (set! g4a92@irritants-condition? (condition-predicate g4a85@g4a80)) (set! g4a94@condition-irritants (condition-accessor g4a85@g4a80 g4a90@g4a7f)) (set! g4a96@&irritants-rtd g4a85@g4a80) (set! g4a98@&irritants-rcd g4a89@g4a81) (set! g4aa0@g4a9b (make-record-type-descriptor '&who g49a8@g49a3 'g4a9e '#f '#f '#((immutable who)))) (set! g4aa2@g4a9d '#f) (set! g4aa4@g4a9c (make-record-constructor-descriptor g4aa0@g4a9b g49ac@g49a4 g4aa2@g4a9d)) (set! g4aa7@p? (record-predicate g4aa0@g4a9b)) (set! g4aa9@make-who-condition (record-constructor g4aa4@g4a9c)) (set! g4aab@g4a9a (record-accessor g4aa0@g4a9b '0)) (set! g4aad@who-condition? (condition-predicate g4aa0@g4a9b)) (set! g4aaf@condition-who (condition-accessor g4aa0@g4a9b g4aab@g4a9a)) (set! g4ab1@&who-rtd g4aa0@g4a9b) (set! g4ab3@&who-rcd g4aa4@g4a9c) (set! g4ab9@g4ab4 (make-record-type-descriptor '&non-continuable g4a59@g4a54 'g4ab7 '#f '#f '#())) (set! g4abb@g4ab6 '#f) (set! g4abd@g4ab5 (make-record-constructor-descriptor g4ab9@g4ab4 g4a5d@g4a55 g4abb@g4ab6)) (set! g4ac0@p? (record-predicate g4ab9@g4ab4)) (set! g4ac2@make-non-continuable-violation (record-constructor g4abd@g4ab5)) (set! g4ac4@non-continuable-violation? (condition-predicate g4ab9@g4ab4)) (set! g4ac6@&non-continuable-rtd g4ab9@g4ab4) (set! g4ac8@&non-continuable-rcd g4abd@g4ab5) (set! g4ace@g4ac9 (make-record-type-descriptor '&implementation-restriction g4a59@g4a54 'g4acc '#f '#f '#())) (set! g4ad0@g4acb '#f) (set! g4ad2@g4aca (make-record-constructor-descriptor g4ace@g4ac9 g4a5d@g4a55 g4ad0@g4acb)) (set! g4ad5@p? (record-predicate g4ace@g4ac9)) (set! g4ad7@make-implementation-restriction-violation (record-constructor g4ad2@g4aca)) (set! g4ad9@implementation-restriction-violation? (condition-predicate g4ace@g4ac9)) (set! g4adb@&implementation-restriction-rtd g4ace@g4ac9) (set! g4add@&implementation-restriction-rcd g4ad2@g4aca) (set! g4ae3@g4ade (make-record-type-descriptor '&lexical g4a59@g4a54 'g4ae1 '#f '#f '#())) (set! g4ae5@g4ae0 '#f) (set! g4ae7@g4adf (make-record-constructor-descriptor g4ae3@g4ade g4a5d@g4a55 g4ae5@g4ae0)) (set! g4aea@p? (record-predicate g4ae3@g4ade)) (set! g4aec@make-lexical-violation (record-constructor g4ae7@g4adf)) (set! g4aee@lexical-violation? (condition-predicate g4ae3@g4ade)) (set! g4af0@&lexical-rtd g4ae3@g4ade) (set! g4af2@&lexical-rcd g4ae7@g4adf) (set! g4afc@g4af7 (make-record-type-descriptor '&syntax g4a59@g4a54 'g4afa '#f '#f '#((immutable form) (immutable subform)))) (set! g4afe@g4af9 '#f) (set! g4b00@g4af8 (make-record-constructor-descriptor g4afc@g4af7 g4a5d@g4a55 g4afe@g4af9)) (set! g4b03@p? (record-predicate g4afc@g4af7)) (set! g4b05@make-syntax-violation (record-constructor g4b00@g4af8)) (set! g4b07@g4af4 (record-accessor g4afc@g4af7 '0)) (set! g4b09@g4af6 (record-accessor g4afc@g4af7 '1)) (set! g4b0b@syntax-violation? (condition-predicate g4afc@g4af7)) (set! g4b0d@syntax-violation-form (condition-accessor g4afc@g4af7 g4b07@g4af4)) (set! g4b0f@syntax-violation-subform (condition-accessor g4afc@g4af7 g4b09@g4af6)) (set! g4b11@&syntax-rtd g4afc@g4af7) (set! g4b13@&syntax-rcd g4b00@g4af8) (set! g4b19@g4b14 (make-record-type-descriptor '&undefined g4a59@g4a54 'g4b17 '#f '#f '#())) (set! g4b1b@g4b16 '#f) (set! g4b1d@g4b15 (make-record-constructor-descriptor g4b19@g4b14 g4a5d@g4a55 g4b1b@g4b16)) (set! g4b20@p? (record-predicate g4b19@g4b14)) (set! g4b22@make-undefined-violation (record-constructor g4b1d@g4b15)) (set! g4b24@undefined-violation? (condition-predicate g4b19@g4b14)) (set! g4b26@&undefined-rtd g4b19@g4b14) (set! g4b28@&undefined-rcd g4b1d@g4b15) (set! g4b2e@g4b29 (make-record-type-descriptor '&i/o g4a44@g4a3f 'g4b2c '#f '#f '#())) (set! g4b30@g4b2b '#f) (set! g4b32@g4b2a (make-record-constructor-descriptor g4b2e@g4b29 g4a48@g4a40 g4b30@g4b2b)) (set! g4b35@p? (record-predicate g4b2e@g4b29)) (set! g4b37@make-i/o-error (record-constructor g4b32@g4b2a)) (set! g4b39@i/o-error? (condition-predicate g4b2e@g4b29)) (set! g4b3b@&i/o-rtd g4b2e@g4b29) (set! g4b3d@&i/o-rcd g4b32@g4b2a) (set! g4b43@g4b3e (make-record-type-descriptor '&i/o-read g4b2e@g4b29 'g4b41 '#f '#f '#())) (set! g4b45@g4b40 '#f) (set! g4b47@g4b3f (make-record-constructor-descriptor g4b43@g4b3e g4b32@g4b2a g4b45@g4b40)) (set! g4b4a@p? (record-predicate g4b43@g4b3e)) (set! g4b4c@make-i/o-read-error (record-constructor g4b47@g4b3f)) (set! g4b4e@i/o-read-error? (condition-predicate g4b43@g4b3e)) (set! g4b50@&i/o-read-rtd g4b43@g4b3e) (set! g4b52@&i/o-read-rcd g4b47@g4b3f) (set! g4b58@g4b53 (make-record-type-descriptor '&i/o-write g4b2e@g4b29 'g4b56 '#f '#f '#())) (set! g4b5a@g4b55 '#f) (set! g4b5c@g4b54 (make-record-constructor-descriptor g4b58@g4b53 g4b32@g4b2a g4b5a@g4b55)) (set! g4b5f@p? (record-predicate g4b58@g4b53)) (set! g4b61@make-i/o-write-error (record-constructor g4b5c@g4b54)) (set! g4b63@i/o-write-error? (condition-predicate g4b58@g4b53)) (set! g4b65@&i/o-write-rtd g4b58@g4b53) (set! g4b67@&i/o-write-rcd g4b5c@g4b54) (set! g4b6f@g4b6a (make-record-type-descriptor '&i/o-invalid-position g4b2e@g4b29 'g4b6d '#f '#f '#((immutable position)))) (set! g4b71@g4b6c '#f) (set! g4b73@g4b6b (make-record-constructor-descriptor g4b6f@g4b6a g4b32@g4b2a g4b71@g4b6c)) (set! g4b76@p? (record-predicate g4b6f@g4b6a)) (set! g4b78@make-i/o-invalid-position-error (record-constructor g4b73@g4b6b)) (set! g4b7a@g4b69 (record-accessor g4b6f@g4b6a '0)) (set! g4b7c@i/o-invalid-position-error? (condition-predicate g4b6f@g4b6a)) (set! g4b7e@i/o-error-position (condition-accessor g4b6f@g4b6a g4b7a@g4b69)) (set! g4b80@&i/o-invalid-position-rtd g4b6f@g4b6a) (set! g4b82@&i/o-invalid-position-rcd g4b73@g4b6b) (set! g4b8a@g4b85 (make-record-type-descriptor '&i/o-filename g4b2e@g4b29 'g4b88 '#f '#f '#((immutable filename)))) (set! g4b8c@g4b87 '#f) (set! g4b8e@g4b86 (make-record-constructor-descriptor g4b8a@g4b85 g4b32@g4b2a g4b8c@g4b87)) (set! g4b91@p? (record-predicate g4b8a@g4b85)) (set! g4b93@make-i/o-filename-error (record-constructor g4b8e@g4b86)) (set! g4b95@g4b84 (record-accessor g4b8a@g4b85 '0)) (set! g4b97@i/o-filename-error? (condition-predicate g4b8a@g4b85)) (set! g4b99@i/o-error-filename (condition-accessor g4b8a@g4b85 g4b95@g4b84)) (set! g4b9b@&i/o-filename-rtd g4b8a@g4b85) (set! g4b9d@&i/o-filename-rcd g4b8e@g4b86) (set! g4ba3@g4b9e (make-record-type-descriptor '&i/o-file-protection g4b8a@g4b85 'g4ba1 '#f '#f '#())) (set! g4ba5@g4ba0 '#f) (set! g4ba7@g4b9f (make-record-constructor-descriptor g4ba3@g4b9e g4b8e@g4b86 g4ba5@g4ba0)) (set! g4baa@p? (record-predicate g4ba3@g4b9e)) (set! g4bac@make-i/o-file-protection-error (record-constructor g4ba7@g4b9f)) (set! g4bae@i/o-file-protection-error? (condition-predicate g4ba3@g4b9e)) (set! g4bb0@&i/o-file-protection-rtd g4ba3@g4b9e) (set! g4bb2@&i/o-file-protection-rcd g4ba7@g4b9f) (set! g4bb8@g4bb3 (make-record-type-descriptor '&i/o-file-is-read-only g4ba3@g4b9e 'g4bb6 '#f '#f '#())) (set! g4bba@g4bb5 '#f) (set! g4bbc@g4bb4 (make-record-constructor-descriptor g4bb8@g4bb3 g4ba7@g4b9f g4bba@g4bb5)) (set! g4bbf@p? (record-predicate g4bb8@g4bb3)) (set! g4bc1@make-i/o-file-is-read-only-error (record-constructor g4bbc@g4bb4)) (set! g4bc3@i/o-file-is-read-only-error? (condition-predicate g4bb8@g4bb3)) (set! g4bc5@&i/o-file-is-read-only-rtd g4bb8@g4bb3) (set! g4bc7@&i/o-file-is-read-only-rcd g4bbc@g4bb4) (set! g4bcd@g4bc8 (make-record-type-descriptor '&i/o-file-already-exists g4b8a@g4b85 'g4bcb '#f '#f '#())) (set! g4bcf@g4bca '#f) (set! g4bd1@g4bc9 (make-record-constructor-descriptor g4bcd@g4bc8 g4b8e@g4b86 g4bcf@g4bca)) (set! g4bd4@p? (record-predicate g4bcd@g4bc8)) (set! g4bd6@make-i/o-file-already-exists-error (record-constructor g4bd1@g4bc9)) (set! g4bd8@i/o-file-already-exists-error? (condition-predicate g4bcd@g4bc8)) (set! g4bda@&i/o-file-already-exists-rtd g4bcd@g4bc8) (set! g4bdc@&i/o-file-already-exists-rcd g4bd1@g4bc9) (set! g4be2@g4bdd (make-record-type-descriptor '&i/o-file-does-not-exist g4b8a@g4b85 'g4be0 '#f '#f '#())) (set! g4be4@g4bdf '#f) (set! g4be6@g4bde (make-record-constructor-descriptor g4be2@g4bdd g4b8e@g4b86 g4be4@g4bdf)) (set! g4be9@p? (record-predicate g4be2@g4bdd)) (set! g4beb@make-i/o-file-does-not-exist-error (record-constructor g4be6@g4bde)) (set! g4bed@i/o-file-does-not-exist-error? (condition-predicate g4be2@g4bdd)) (set! g4bef@&i/o-file-does-not-exist-rtd g4be2@g4bdd) (set! g4bf1@&i/o-file-does-not-exist-rcd g4be6@g4bde) (set! g4bf9@g4bf4 (make-record-type-descriptor '&i/o-port g4b2e@g4b29 'g4bf7 '#f '#f '#((immutable port)))) (set! g4bfb@g4bf6 '#f) (set! g4bfd@g4bf5 (make-record-constructor-descriptor g4bf9@g4bf4 g4b32@g4b2a g4bfb@g4bf6)) (set! g4c00@p? (record-predicate g4bf9@g4bf4)) (set! g4c02@make-i/o-port-error (record-constructor g4bfd@g4bf5)) (set! g4c04@g4bf3 (record-accessor g4bf9@g4bf4 '0)) (set! g4c06@i/o-port-error? (condition-predicate g4bf9@g4bf4)) (set! g4c08@i/o-error-port (condition-accessor g4bf9@g4bf4 g4c04@g4bf3)) (set! g4c0a@&i/o-port-rtd g4bf9@g4bf4) (set! g4c0c@&i/o-port-rcd g4bfd@g4bf5) (set! g4c12@g4c0d (make-record-type-descriptor '&i/o-decoding g4bf9@g4bf4 'g4c10 '#f '#f '#())) (set! g4c14@g4c0f '#f) (set! g4c16@g4c0e (make-record-constructor-descriptor g4c12@g4c0d g4bfd@g4bf5 g4c14@g4c0f)) (set! g4c19@p? (record-predicate g4c12@g4c0d)) (set! g4c1b@make-i/o-decoding-error (record-constructor g4c16@g4c0e)) (set! g4c1d@i/o-decoding-error? (condition-predicate g4c12@g4c0d)) (set! g4c1f@&i/o-decoding-rtd g4c12@g4c0d) (set! g4c21@&i/o-decoding-rcd g4c16@g4c0e) (set! g4c29@g4c24 (make-record-type-descriptor '&i/o-encoding g4bf9@g4bf4 'g4c27 '#f '#f '#((immutable char)))) (set! g4c2b@g4c26 '#f) (set! g4c2d@g4c25 (make-record-constructor-descriptor g4c29@g4c24 g4bfd@g4bf5 g4c2b@g4c26)) (set! g4c30@p? (record-predicate g4c29@g4c24)) (set! g4c32@make-i/o-encoding-error (record-constructor g4c2d@g4c25)) (set! g4c34@g4c23 (record-accessor g4c29@g4c24 '0)) (set! g4c36@i/o-encoding-error? (condition-predicate g4c29@g4c24)) (set! g4c38@i/o-encoding-error-char (condition-accessor g4c29@g4c24 g4c34@g4c23)) (set! g4c3a@&i/o-encoding-rtd g4c29@g4c24) (set! g4c3c@&i/o-encoding-rcd g4c2d@g4c25) (set! g4c42@g4c3d (make-record-type-descriptor '&no-infinities g4ace@g4ac9 'g4c40 '#f '#f '#())) (set! g4c44@g4c3f '#f) (set! g4c46@g4c3e (make-record-constructor-descriptor g4c42@g4c3d g4ad2@g4aca g4c44@g4c3f)) (set! g4c49@p? (record-predicate g4c42@g4c3d)) (set! g4c4b@make-no-infinities-violation (record-constructor g4c46@g4c3e)) (set! g4c4d@no-infinities-violation? (condition-predicate g4c42@g4c3d)) (set! g4c4f@&no-infinities-rtd g4c42@g4c3d) (set! g4c51@&no-infinities-rcd g4c46@g4c3e) (set! g4c57@g4c52 (make-record-type-descriptor '&no-nans g4ace@g4ac9 'g4c55 '#f '#f '#())) (set! g4c59@g4c54 '#f) (set! g4c5b@g4c53 (make-record-constructor-descriptor g4c57@g4c52 g4ad2@g4aca g4c59@g4c54)) (set! g4c5e@p? (record-predicate g4c57@g4c52)) (set! g4c60@make-no-nans-violation (record-constructor g4c5b@g4c53)) (set! g4c62@no-nans-violation? (condition-predicate g4c57@g4c52)) (set! g4c64@&no-nans-rtd g4c57@g4c52) (set! g4c66@&no-nans-rcd g4c5b@g4c53) (begin (set! g4d57@g4c66@&no-nans-rcd g4c66@&no-nans-rcd) (set! g4d56@g4c64@&no-nans-rtd g4c64@&no-nans-rtd) (set! g4d55@g4c62@no-nans-violation? g4c62@no-nans-violation?) (set! g4d54@g4c60@make-no-nans-violation g4c60@make-no-nans-violation) (set! g4d53@g4c5e@p? g4c5e@p?) (set! g4d52@g4c5b@g4c53 g4c5b@g4c53) (set! g4d51@g4c59@g4c54 g4c59@g4c54) (set! g4d50@g4c57@g4c52 g4c57@g4c52) (set! g4d4f@g4c51@&no-infinities-rcd g4c51@&no-infinities-rcd) (set! g4d4e@g4c4f@&no-infinities-rtd g4c4f@&no-infinities-rtd) (set! g4d4d@g4c4d@no-infinities-violation? g4c4d@no-infinities-violation?) (set! g4d4c@g4c4b@make-no-infinities-violation g4c4b@make-no-infinities-violation) (set! g4d4b@g4c49@p? g4c49@p?) (set! g4d4a@g4c46@g4c3e g4c46@g4c3e) (set! g4d49@g4c44@g4c3f g4c44@g4c3f) (set! g4d48@g4c42@g4c3d g4c42@g4c3d) (set! g4d47@g4c3c@&i/o-encoding-rcd g4c3c@&i/o-encoding-rcd) (set! g4d46@g4c3a@&i/o-encoding-rtd g4c3a@&i/o-encoding-rtd) (set! g4d45@g4c38@i/o-encoding-error-char g4c38@i/o-encoding-error-char) (set! g4d44@g4c36@i/o-encoding-error? g4c36@i/o-encoding-error?) (set! g4d43@g4c34@g4c23 g4c34@g4c23) (set! g4d42@g4c32@make-i/o-encoding-error g4c32@make-i/o-encoding-error) (set! g4d41@g4c30@p? g4c30@p?) (set! g4d40@g4c2d@g4c25 g4c2d@g4c25) (set! g4d3f@g4c2b@g4c26 g4c2b@g4c26) (set! g4d3e@g4c29@g4c24 g4c29@g4c24) (set! g4d3d@g4c21@&i/o-decoding-rcd g4c21@&i/o-decoding-rcd) (set! g4d3c@g4c1f@&i/o-decoding-rtd g4c1f@&i/o-decoding-rtd) (set! g4d3b@g4c1d@i/o-decoding-error? g4c1d@i/o-decoding-error?) (set! g4d3a@g4c1b@make-i/o-decoding-error g4c1b@make-i/o-decoding-error) (set! g4d39@g4c19@p? g4c19@p?) (set! g4d38@g4c16@g4c0e g4c16@g4c0e) (set! g4d37@g4c14@g4c0f g4c14@g4c0f) (set! g4d36@g4c12@g4c0d g4c12@g4c0d) (set! g4d35@g4c0c@&i/o-port-rcd g4c0c@&i/o-port-rcd) (set! g4d34@g4c0a@&i/o-port-rtd g4c0a@&i/o-port-rtd) (set! g4d33@g4c08@i/o-error-port g4c08@i/o-error-port) (set! g4d32@g4c06@i/o-port-error? g4c06@i/o-port-error?) (set! g4d31@g4c04@g4bf3 g4c04@g4bf3) (set! g4d30@g4c02@make-i/o-port-error g4c02@make-i/o-port-error) (set! g4d2f@g4c00@p? g4c00@p?) (set! g4d2e@g4bfd@g4bf5 g4bfd@g4bf5) (set! g4d2d@g4bfb@g4bf6 g4bfb@g4bf6) (set! g4d2c@g4bf9@g4bf4 g4bf9@g4bf4) (set! g4d2b@g4bf1@&i/o-file-does-not-exist-rcd g4bf1@&i/o-file-does-not-exist-rcd) (set! g4d2a@g4bef@&i/o-file-does-not-exist-rtd g4bef@&i/o-file-does-not-exist-rtd) (set! g4d29@g4bed@i/o-file-does-not-exist-error? g4bed@i/o-file-does-not-exist-error?) (set! g4d28@g4beb@make-i/o-file-does-not-exist-error g4beb@make-i/o-file-does-not-exist-error) (set! g4d27@g4be9@p? g4be9@p?) (set! g4d26@g4be6@g4bde g4be6@g4bde) (set! g4d25@g4be4@g4bdf g4be4@g4bdf) (set! g4d24@g4be2@g4bdd g4be2@g4bdd) (set! g4d23@g4bdc@&i/o-file-already-exists-rcd g4bdc@&i/o-file-already-exists-rcd) (set! g4d22@g4bda@&i/o-file-already-exists-rtd g4bda@&i/o-file-already-exists-rtd) (set! g4d21@g4bd8@i/o-file-already-exists-error? g4bd8@i/o-file-already-exists-error?) (set! g4d20@g4bd6@make-i/o-file-already-exists-error g4bd6@make-i/o-file-already-exists-error) (set! g4d1f@g4bd4@p? g4bd4@p?) (set! g4d1e@g4bd1@g4bc9 g4bd1@g4bc9) (set! g4d1d@g4bcf@g4bca g4bcf@g4bca) (set! g4d1c@g4bcd@g4bc8 g4bcd@g4bc8) (set! g4d1b@g4bc7@&i/o-file-is-read-only-rcd g4bc7@&i/o-file-is-read-only-rcd) (set! g4d1a@g4bc5@&i/o-file-is-read-only-rtd g4bc5@&i/o-file-is-read-only-rtd) (set! g4d19@g4bc3@i/o-file-is-read-only-error? g4bc3@i/o-file-is-read-only-error?) (set! g4d18@g4bc1@make-i/o-file-is-read-only-error g4bc1@make-i/o-file-is-read-only-error) (set! g4d17@g4bbf@p? g4bbf@p?) (set! g4d16@g4bbc@g4bb4 g4bbc@g4bb4) (set! g4d15@g4bba@g4bb5 g4bba@g4bb5) (set! g4d14@g4bb8@g4bb3 g4bb8@g4bb3) (set! g4d13@g4bb2@&i/o-file-protection-rcd g4bb2@&i/o-file-protection-rcd) (set! g4d12@g4bb0@&i/o-file-protection-rtd g4bb0@&i/o-file-protection-rtd) (set! g4d11@g4bae@i/o-file-protection-error? g4bae@i/o-file-protection-error?) (set! g4d10@g4bac@make-i/o-file-protection-error g4bac@make-i/o-file-protection-error) (set! g4d0f@g4baa@p? g4baa@p?) (set! g4d0e@g4ba7@g4b9f g4ba7@g4b9f) (set! g4d0d@g4ba5@g4ba0 g4ba5@g4ba0) (set! g4d0c@g4ba3@g4b9e g4ba3@g4b9e) (set! g4d0b@g4b9d@&i/o-filename-rcd g4b9d@&i/o-filename-rcd) (set! g4d0a@g4b9b@&i/o-filename-rtd g4b9b@&i/o-filename-rtd) (set! g4d09@g4b99@i/o-error-filename g4b99@i/o-error-filename) (set! g4d08@g4b97@i/o-filename-error? g4b97@i/o-filename-error?) (set! g4d07@g4b95@g4b84 g4b95@g4b84) (set! g4d06@g4b93@make-i/o-filename-error g4b93@make-i/o-filename-error) (set! g4d05@g4b91@p? g4b91@p?) (set! g4d04@g4b8e@g4b86 g4b8e@g4b86) (set! g4d03@g4b8c@g4b87 g4b8c@g4b87) (set! g4d02@g4b8a@g4b85 g4b8a@g4b85) (set! g4d01@g4b82@&i/o-invalid-position-rcd g4b82@&i/o-invalid-position-rcd) (set! g4d00@g4b80@&i/o-invalid-position-rtd g4b80@&i/o-invalid-position-rtd) (set! g4cff@g4b7e@i/o-error-position g4b7e@i/o-error-position) (set! g4cfe@g4b7c@i/o-invalid-position-error? g4b7c@i/o-invalid-position-error?) (set! g4cfd@g4b7a@g4b69 g4b7a@g4b69) (set! g4cfc@g4b78@make-i/o-invalid-position-error g4b78@make-i/o-invalid-position-error) (set! g4cfb@g4b76@p? g4b76@p?) (set! g4cfa@g4b73@g4b6b g4b73@g4b6b) (set! g4cf9@g4b71@g4b6c g4b71@g4b6c) (set! g4cf8@g4b6f@g4b6a g4b6f@g4b6a) (set! g4cf7@g4b67@&i/o-write-rcd g4b67@&i/o-write-rcd) (set! g4cf6@g4b65@&i/o-write-rtd g4b65@&i/o-write-rtd) (set! g4cf5@g4b63@i/o-write-error? g4b63@i/o-write-error?) (set! g4cf4@g4b61@make-i/o-write-error g4b61@make-i/o-write-error) (set! g4cf3@g4b5f@p? g4b5f@p?) (set! g4cf2@g4b5c@g4b54 g4b5c@g4b54) (set! g4cf1@g4b5a@g4b55 g4b5a@g4b55) (set! g4cf0@g4b58@g4b53 g4b58@g4b53) (set! g4cef@g4b52@&i/o-read-rcd g4b52@&i/o-read-rcd) (set! g4cee@g4b50@&i/o-read-rtd g4b50@&i/o-read-rtd) (set! g4ced@g4b4e@i/o-read-error? g4b4e@i/o-read-error?) (set! g4cec@g4b4c@make-i/o-read-error g4b4c@make-i/o-read-error) (set! g4ceb@g4b4a@p? g4b4a@p?) (set! g4cea@g4b47@g4b3f g4b47@g4b3f) (set! g4ce9@g4b45@g4b40 g4b45@g4b40) (set! g4ce8@g4b43@g4b3e g4b43@g4b3e) (set! g4ce7@g4b3d@&i/o-rcd g4b3d@&i/o-rcd) (set! g4ce6@g4b3b@&i/o-rtd g4b3b@&i/o-rtd) (set! g4ce5@g4b39@i/o-error? g4b39@i/o-error?) (set! g4ce4@g4b37@make-i/o-error g4b37@make-i/o-error) (set! g4ce3@g4b35@p? g4b35@p?) (set! g4ce2@g4b32@g4b2a g4b32@g4b2a) (set! g4ce1@g4b30@g4b2b g4b30@g4b2b) (set! g4ce0@g4b2e@g4b29 g4b2e@g4b29) (set! g4cdf@g4b28@&undefined-rcd g4b28@&undefined-rcd) (set! g4cde@g4b26@&undefined-rtd g4b26@&undefined-rtd) (set! g4cdd@g4b24@undefined-violation? g4b24@undefined-violation?) (set! g4cdc@g4b22@make-undefined-violation g4b22@make-undefined-violation) (set! g4cdb@g4b20@p? g4b20@p?) (set! g4cda@g4b1d@g4b15 g4b1d@g4b15) (set! g4cd9@g4b1b@g4b16 g4b1b@g4b16) (set! g4cd8@g4b19@g4b14 g4b19@g4b14) (set! g4cd7@g4b13@&syntax-rcd g4b13@&syntax-rcd) (set! g4cd6@g4b11@&syntax-rtd g4b11@&syntax-rtd) (set! g4cd5@g4b0f@syntax-violation-subform g4b0f@syntax-violation-subform) (set! g4cd4@g4b0d@syntax-violation-form g4b0d@syntax-violation-form) (set! g4cd3@g4b0b@syntax-violation? g4b0b@syntax-violation?) (set! g4cd2@g4b09@g4af6 g4b09@g4af6) (set! g4cd1@g4b07@g4af4 g4b07@g4af4) (set! g4cd0@g4b05@make-syntax-violation g4b05@make-syntax-violation) (set! g4ccf@g4b03@p? g4b03@p?) (set! g4cce@g4b00@g4af8 g4b00@g4af8) (set! g4ccd@g4afe@g4af9 g4afe@g4af9) (set! g4ccc@g4afc@g4af7 g4afc@g4af7) (set! g4ccb@g4af2@&lexical-rcd g4af2@&lexical-rcd) (set! g4cca@g4af0@&lexical-rtd g4af0@&lexical-rtd) (set! g4cc9@g4aee@lexical-violation? g4aee@lexical-violation?) (set! g4cc8@g4aec@make-lexical-violation g4aec@make-lexical-violation) (set! g4cc7@g4aea@p? g4aea@p?) (set! g4cc6@g4ae7@g4adf g4ae7@g4adf) (set! g4cc5@g4ae5@g4ae0 g4ae5@g4ae0) (set! g4cc4@g4ae3@g4ade g4ae3@g4ade) (set! g4cc3@g4add@&implementation-restriction-rcd g4add@&implementation-restriction-rcd) (set! g4cc2@g4adb@&implementation-restriction-rtd g4adb@&implementation-restriction-rtd) (set! g4cc1@g4ad9@implementation-restriction-violation? g4ad9@implementation-restriction-violation?) (set! g4cc0@g4ad7@make-implementation-restriction-violation g4ad7@make-implementation-restriction-violation) (set! g4cbf@g4ad5@p? g4ad5@p?) (set! g4cbe@g4ad2@g4aca g4ad2@g4aca) (set! g4cbd@g4ad0@g4acb g4ad0@g4acb) (set! g4cbc@g4ace@g4ac9 g4ace@g4ac9) (set! g4cbb@g4ac8@&non-continuable-rcd g4ac8@&non-continuable-rcd) (set! g4cba@g4ac6@&non-continuable-rtd g4ac6@&non-continuable-rtd) (set! g4cb9@g4ac4@non-continuable-violation? g4ac4@non-continuable-violation?) (set! g4cb8@g4ac2@make-non-continuable-violation g4ac2@make-non-continuable-violation) (set! g4cb7@g4ac0@p? g4ac0@p?) (set! g4cb6@g4abd@g4ab5 g4abd@g4ab5) (set! g4cb5@g4abb@g4ab6 g4abb@g4ab6) (set! g4cb4@g4ab9@g4ab4 g4ab9@g4ab4) (set! g4cb3@g4ab3@&who-rcd g4ab3@&who-rcd) (set! g4cb2@g4ab1@&who-rtd g4ab1@&who-rtd) (set! g4cb1@g4aaf@condition-who g4aaf@condition-who) (set! g4cb0@g4aad@who-condition? g4aad@who-condition?) (set! g4caf@g4aab@g4a9a g4aab@g4a9a) (set! g4cae@g4aa9@make-who-condition g4aa9@make-who-condition) (set! g4cad@g4aa7@p? g4aa7@p?) (set! g4cac@g4aa4@g4a9c g4aa4@g4a9c) (set! g4cab@g4aa2@g4a9d g4aa2@g4a9d) (set! g4caa@g4aa0@g4a9b g4aa0@g4a9b) (set! g4ca9@g4a98@&irritants-rcd g4a98@&irritants-rcd) (set! g4ca8@g4a96@&irritants-rtd g4a96@&irritants-rtd) (set! g4ca7@g4a94@condition-irritants g4a94@condition-irritants) (set! g4ca6@g4a92@irritants-condition? g4a92@irritants-condition?) (set! g4ca5@g4a90@g4a7f g4a90@g4a7f) (set! g4ca4@g4a8e@make-irritants-condition g4a8e@make-irritants-condition) (set! g4ca3@g4a8c@p? g4a8c@p?) (set! g4ca2@g4a89@g4a81 g4a89@g4a81) (set! g4ca1@g4a87@g4a82 g4a87@g4a82) (set! g4ca0@g4a85@g4a80 g4a85@g4a80) (set! g4c9f@g4a7d@&assertion-rcd g4a7d@&assertion-rcd) (set! g4c9e@g4a7b@&assertion-rtd g4a7b@&assertion-rtd) (set! g4c9d@g4a79@assertion-violation? g4a79@assertion-violation?) (set! g4c9c@g4a77@make-assertion-violation g4a77@make-assertion-violation) (set! g4c9b@g4a75@p? g4a75@p?) (set! g4c9a@g4a72@g4a6a g4a72@g4a6a) (set! g4c99@g4a70@g4a6b g4a70@g4a6b) (set! g4c98@g4a6e@g4a69 g4a6e@g4a69) (set! g4c97@g4a68@&violation-rcd g4a68@&violation-rcd) (set! g4c96@g4a66@&violation-rtd g4a66@&violation-rtd) (set! g4c95@g4a64@violation? g4a64@violation?) (set! g4c94@g4a62@make-violation g4a62@make-violation) (set! g4c93@g4a60@p? g4a60@p?) (set! g4c92@g4a5d@g4a55 g4a5d@g4a55) (set! g4c91@g4a5b@g4a56 g4a5b@g4a56) (set! g4c90@g4a59@g4a54 g4a59@g4a54) (set! g4c8f@g4a53@&error-rcd g4a53@&error-rcd) (set! g4c8e@g4a51@&error-rtd g4a51@&error-rtd) (set! g4c8d@g4a4f@error? g4a4f@error?) (set! g4c8c@g4a4d@make-error g4a4d@make-error) (set! g4c8b@g4a4b@p? g4a4b@p?) (set! g4c8a@g4a48@g4a40 g4a48@g4a40) (set! g4c89@g4a46@g4a41 g4a46@g4a41) (set! g4c88@g4a44@g4a3f g4a44@g4a3f) (set! g4c87@g4a3e@&serious-rcd g4a3e@&serious-rcd) (set! g4c86@g4a3c@&serious-rtd g4a3c@&serious-rtd) (set! g4c85@g4a3a@serious-condition? g4a3a@serious-condition?) (set! g4c84@g4a38@make-serious-condition g4a38@make-serious-condition) (set! g4c83@g4a36@p? g4a36@p?) (set! g4c82@g4a33@g4a2b g4a33@g4a2b) (set! g4c81@g4a31@g4a2c g4a31@g4a2c) (set! g4c80@g4a2f@g4a2a g4a2f@g4a2a) (set! g4c7f@g4a29@&warning-rcd g4a29@&warning-rcd) (set! g4c7e@g4a27@&warning-rtd g4a27@&warning-rtd) (set! g4c7d@g4a25@warning? g4a25@warning?) (set! g4c7c@g4a23@make-warning g4a23@make-warning) (set! g4c7b@g4a21@p? g4a21@p?) (set! g4c7a@g4a1e@g4a16 g4a1e@g4a16) (set! g4c79@g4a1c@g4a17 g4a1c@g4a17) (set! g4c78@g4a1a@g4a15 g4a1a@g4a15) (set! g4c77@g4a14@&message-rcd g4a14@&message-rcd) (set! g4c76@g4a12@&message-rtd g4a12@&message-rtd) (set! g4c75@g4a10@condition-message g4a10@condition-message) (set! g4c74@g4a0e@message-condition? g4a0e@message-condition?) (set! g4c73@g4a0c@g49fb g4a0c@g49fb) (set! g4c72@g4a0a@make-message-condition g4a0a@make-message-condition) (set! g4c71@g4a08@p? g4a08@p?) (set! g4c70@g4a05@g49fd g4a05@g49fd) (set! g4c6f@g4a03@g49fe g4a03@g49fe) (set! g4c6e@g4a01@g49fc g4a01@g49fc) (set! g4c6d@g49b5@&condition-rcd g49b5@&condition-rcd) (set! g4c6c@g49b3@&condition-rtd g49b3@&condition-rtd) (set! g4c6b@g49b1@make-&condition g49b1@make-&condition) (set! g4c6a@g49af@&condition? g49af@&condition?) (set! g4c69@g49ac@g49a4 g49ac@g49a4) (set! g4c68@g49aa@g49a5 g49aa@g49a5) (set! g4c67@g49a8@g49a3 g49a8@g49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (g28a6@g285b@current-primitive-locations (lambda (g515d@x) ((lambda (g515f@t) (if g515f@t (cdr g515f@t) '#f)) (assq g515d@x '((&no-nans-rcd . g4d57@g4c66@&no-nans-rcd) (&no-nans-rtd . g4d56@g4c64@&no-nans-rtd) (&no-infinities-rcd . g4d4f@g4c51@&no-infinities-rcd) (&no-infinities-rtd . g4d4e@g4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . g4d47@g4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . g4d46@g4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . g4d3d@g4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . g4d3c@g4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . g4d35@g4c0c@&i/o-port-rcd) (&i/o-port-rtd . g4d34@g4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . g4d2b@g4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . g4d2a@g4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . g4d23@g4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . g4d22@g4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . g4d1b@g4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . g4d1a@g4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . g4d13@g4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . g4d12@g4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . g4d0b@g4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . g4d0a@g4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . g4d01@g4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . g4d00@g4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . g4cf7@g4b67@&i/o-write-rcd) (&i/o-write-rtd . g4cf6@g4b65@&i/o-write-rtd) (&i/o-read-rcd . g4cef@g4b52@&i/o-read-rcd) (&i/o-read-rtd . g4cee@g4b50@&i/o-read-rtd) (&i/o-rcd . g4ce7@g4b3d@&i/o-rcd) (&i/o-rtd . g4ce6@g4b3b@&i/o-rtd) (&undefined-rcd . g4cdf@g4b28@&undefined-rcd) (&undefined-rtd . g4cde@g4b26@&undefined-rtd) (&syntax-rcd . g4cd7@g4b13@&syntax-rcd) (&syntax-rtd . g4cd6@g4b11@&syntax-rtd) (&lexical-rcd . g4ccb@g4af2@&lexical-rcd) (&lexical-rtd . g4cca@g4af0@&lexical-rtd) (&implementation-restriction-rcd . g4cc3@g4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . g4cc2@g4adb@&implementation-restriction-rtd) (&non-continuable-rcd . g4cbb@g4ac8@&non-continuable-rcd) (&non-continuable-rtd . g4cba@g4ac6@&non-continuable-rtd) (&who-rcd . g4cb3@g4ab3@&who-rcd) (&who-rtd . g4cb2@g4ab1@&who-rtd) (&irritants-rcd . g4ca9@g4a98@&irritants-rcd) (&irritants-rtd . g4ca8@g4a96@&irritants-rtd) (&assertion-rcd . g4c9f@g4a7d@&assertion-rcd) (&assertion-rtd . g4c9e@g4a7b@&assertion-rtd) (&violation-rcd . g4c97@g4a68@&violation-rcd) (&violation-rtd . g4c96@g4a66@&violation-rtd) (&error-rcd . g4c8f@g4a53@&error-rcd) (&error-rtd . g4c8e@g4a51@&error-rtd) (&serious-rcd . g4c87@g4a3e@&serious-rcd) (&serious-rtd . g4c86@g4a3c@&serious-rtd) (&warning-rcd . g4c7f@g4a29@&warning-rcd) (&warning-rtd . g4c7e@g4a27@&warning-rtd) (&message-rcd . g4c77@g4a14@&message-rcd) (&message-rtd . g4c76@g4a12@&message-rtd) (&condition-rcd . g4c6d@g49b5@&condition-rcd) (&condition-rtd . g4c6c@g49b3@&condition-rtd) (syntax-error . g4995@g2f9b@syntax-error) (syntax-dispatch . g492a@g2eb6@syntax-dispatch) (load . g4e62@g4d73@load) (interaction-environment . g499d@g2fab@interaction-environment) (library-path . g2abd@g294c@library-path) (make-parameter . g2855@g277f@make-parameter) (make-variable-transformer . g48e8@g2ce3@make-variable-transformer) (identifier? . g4998@g2fa1@identifier?) (generate-temporaries . g498e@g2f8d@generate-temporaries) (free-identifier=? . g498f@g2f8f@free-identifier=?) (syntax->datum . g499a@g2fa5@syntax->datum) (datum->syntax . g4999@g2fa3@datum->syntax) (bound-identifier=? . g4990@g2f91@bound-identifier=?) (make-i/o-write-error . g4cf4@g4b61@make-i/o-write-error) (make-i/o-read-error . g4cec@g4b4c@make-i/o-read-error) (make-i/o-port-error . g4d30@g4c02@make-i/o-port-error) (make-i/o-invalid-position-error . g4cfc@g4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . g4d06@g4b93@make-i/o-filename-error) (make-i/o-file-protection-error . g4d10@g4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . g4d18@g4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . g4d28@g4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . g4d20@g4bd6@make-i/o-file-already-exists-error) (make-i/o-error . g4ce4@g4b37@make-i/o-error) (make-i/o-encoding-error . g4d42@g4c32@make-i/o-encoding-error) (make-i/o-decoding-error . g4d3a@g4c1b@make-i/o-decoding-error) (i/o-write-error? . g4cf5@g4b63@i/o-write-error?) (i/o-read-error? . g4ced@g4b4e@i/o-read-error?) (i/o-port-error? . g4d32@g4c06@i/o-port-error?) (i/o-invalid-position-error? . g4cfe@g4b7c@i/o-invalid-position-error?) (i/o-filename-error? . g4d08@g4b97@i/o-filename-error?) (i/o-file-protection-error? . g4d11@g4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . g4d19@g4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . g4d29@g4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . g4d21@g4bd8@i/o-file-already-exists-error?) (i/o-error? . g4ce5@g4b39@i/o-error?) (i/o-error-position . g4cff@g4b7e@i/o-error-position) (i/o-error-port . g4d33@g4c08@i/o-error-port) (i/o-error-filename . g4d09@g4b99@i/o-error-filename) (i/o-encoding-error? . g4d44@g4c36@i/o-encoding-error?) (i/o-encoding-error-char . g4d45@g4c38@i/o-encoding-error-char) (i/o-decoding-error? . g4d3b@g4c1d@i/o-decoding-error?) (scheme-report-environment . g4985@g2f7b@scheme-report-environment) (null-environment . g4984@g2f79@null-environment) (command-line . g4e5f@g4d6d@command-line) (eval . g4987@g2f7f@eval) (environment . g4983@g2f77@environment) (who-condition? . g4cb0@g4aad@who-condition?) (warning? . g4c7d@g4a25@warning?) (violation? . g4c95@g4a64@violation?) (undefined-violation? . g4cdd@g4b24@undefined-violation?) (syntax-violation? . g4cd3@g4b0b@syntax-violation?) (syntax-violation-subform . g4cd5@g4b0f@syntax-violation-subform) (syntax-violation-form . g4cd4@g4b0d@syntax-violation-form) (syntax-violation . g4997@g2f9f@syntax-violation) (serious-condition? . g4c85@g4a3a@serious-condition?) (non-continuable-violation? . g4cb9@g4ac4@non-continuable-violation?) (message-condition? . g4c74@g4a0e@message-condition?) (make-who-condition . g4cae@g4aa9@make-who-condition) (make-warning . g4c7c@g4a23@make-warning) (make-violation . g4c94@g4a62@make-violation) (make-undefined-violation . g4cdc@g4b22@make-undefined-violation) (make-syntax-violation . g4cd0@g4b05@make-syntax-violation) (make-serious-condition . g4c84@g4a38@make-serious-condition) (make-non-continuable-violation . g4cb8@g4ac2@make-non-continuable-violation) (make-message-condition . g4c72@g4a0a@make-message-condition) (make-lexical-violation . g4cc8@g4aec@make-lexical-violation) (make-irritants-condition . g4ca4@g4a8e@make-irritants-condition) (make-implementation-restriction-violation . g4cc0@g4ad7@make-implementation-restriction-violation) (make-error . g4c8c@g4a4d@make-error) (make-assertion-violation . g4c9c@g4a77@make-assertion-violation) (lexical-violation? . g4cc9@g4aee@lexical-violation?) (irritants-condition? . g4ca6@g4a92@irritants-condition?) (implementation-restriction-violation? . g4cc1@g4ad9@implementation-restriction-violation?) (error? . g4c8d@g4a4f@error?) (condition-who . g4cb1@g4aaf@condition-who) (condition-message . g4c75@g4a10@condition-message) (condition-irritants . g4ca7@g4a94@condition-irritants) (assertion-violation? . g4c9d@g4a79@assertion-violation?) (no-nans-violation? . g4d55@g4c62@no-nans-violation?) (no-infinities-violation? . g4d4d@g4c4d@no-infinities-violation?) (make-no-nans-violation . g4d54@g4c60@make-no-nans-violation) (make-no-infinities-violation . g4d4c@g4c4b@make-no-infinities-violation) (assertion-error . g4994@g2f99@assertion-error)))))) (g2acd@g296c@install-library 'g513a '(mosh interaction) '() '() '() '() '((regexp? . g5132) (alist->eq-hash-table . g512f) (format . g512c) (string-split . g5121) (call-process . g511b) (set-current-directory! . g5117) (expand-path . g5116) (current-directory . g5115) (%spawn . g5114) (%waitpid . g5113) (%ffi-supported? . g5112) (%ffi-pointer-ref . g5111) (%ffi-pointer->string . g5110) (%ffi-call->string-or-zero . g510f) (%ffi-call->double . g510e) (%ffi-call->void* . g510d) (%ffi-call->void . g510c) (%ffi-call->int . g510b) (%ffi-lookup . g510a) (%ffi-open . g5109) (%fork . g5108) (%pipe . g5107) (p . g5106) (string-upcase . g50e8) (string-titlecase . g50e7) (string-normalize-nfkd . g50e6) (string-normalize-nfkc . g50e5) (string-normalize-nfd . g50e4) (string-normalize-nfc . g50e3) (string-foldcase . g50e2) (string-downcase . g50e1) (string-ci>? . g50e0) (string-ci>=? . g50df) (string-ci=? . g50de) (string-ci<? . g50dd) (string-ci<=? . g50dc) (char-whitespace? . g50db) (char-upper-case? . g50da) (char-title-case? . g50d9) (char-numeric? . g50d8) (char-lower-case? . g50d7) (char-general-category . g50d6) (char-upcase . g50d5) (char-titlecase . g50d4) (char-foldcase . g50d3) (char-downcase . g50d2) (char-ci>? . g50d1) (char-ci>=? . g50d0) (char-ci=? . g50cf) (char-ci<? . g50ce) (char-ci<=? . g50cd) (char-alphabetic? . g50cc) (make-variable-transformer . g2ce2) (identifier? . g2fa0) (generate-temporaries . g2f8c) (free-identifier=? . g2f8e) (syntax->datum . g2fa4) (datum->syntax . g2fa2) (bound-identifier=? . g2f90) (record-type-descriptor? . g50cb) (record-predicate . g50ca) (record-mutator . g50c9) (record-constructor . g50c8) (record-accessor . g50c7) (make-record-type-descriptor . g50c6) (make-record-constructor-descriptor . g50c5) (record? . g50c4) (record-type-uid . g50c3) (record-type-sealed? . g50c2) (record-type-parent . g50c1) (record-type-opaque? . g50c0) (record-type-name . g50bf) (record-type-generative? . g50be) (record-type-field-names . g50bd) (record-rtd . g50bc) (record-field-mutable? . g50bb) (delete-file . g50ba) (file-exists? . g50b9) (vector-sort! . g50b8) (vector-sort . g50b7) (list-sort . g50b6) (symbol-hash . g50b5) (string-ci-hash . g50b4) (string-hash . g50b3) (equal-hash . g50b2) (hashtable-equivalence-function . g50b1) (make-hashtable . g50b0) (hashtable-hash-function . g50af) (make-eqv-hashtable . g50ae) (make-eq-hashtable . g50ad) (hashtable? . g50ac) (hashtable-update! . g50ab) (hashtable-size . g50aa) (hashtable-set! . g50a9) (hashtable-ref . g50a8) (hashtable-mutable? . g50a7) (hashtable-keys . g50a6) (hashtable-entries . g50a5) (hashtable-delete! . g50a4) (hashtable-copy . g50a3) (hashtable-contains? . g50a2) (hashtable-clear! . g50a1) (call-with-output-file . g50a0) (call-with-input-file . g509f) (write-char . g509e) (write . g509d) (with-output-to-file . g509c) (with-input-from-file . g509b) (read-char . g509a) (read . g5099) (peek-char . g5098) (open-output-file . g5097) (open-input-file . g5096) (newline . g5095) (display . g5094) (close-output-port . g5093) (close-input-port . g5092) (eof-object? . g5091) (eof-object . g5090) (current-error-port . g508f) (current-output-port . g508e) (current-input-port . g508d) (output-port? . g508c) (input-port? . g508b) (utf-8-codec . g508a) (utf-16-codec . g5089) (transcoder-error-handling-mode . g5088) (transcoder-eol-style . g5087) (transcoder-codec . g5086) (transcoded-port . g5085) (textual-port? . g5084) (string->bytevector . g5083) (standard-output-port . g5082) (standard-input-port . g5081) (standard-error-port . g5080) (set-port-position! . g507f) (put-u8 . g507e) (put-string . g507d) (put-datum . g507c) (put-char . g507b) (put-bytevector . g507a) (port? . g5079) (port-transcoder . g5078) (port-position . g5077) (port-has-set-port-position!? . g5076) (port-has-port-position? . g5075) (port-eof? . g5074) (output-port-buffer-mode . g5073) (open-string-output-port . g5072) (open-string-input-port . g5071) (open-file-output-port . g5070) (open-file-input/output-port . g506f) (open-file-input-port . g506e) (open-bytevector-output-port . g506d) (open-bytevector-input-port . g506c) (native-transcoder . g506b) (native-eol-style . g506a) (make-transcoder . g5069) (latin-1-codec . g5068) (make-i/o-write-error . g4b60) (make-i/o-read-error . g4b4b) (make-i/o-port-error . g4c01) (make-i/o-invalid-position-error . g4b77) (make-i/o-filename-error . g4b92) (make-i/o-file-protection-error . g4bab) (make-i/o-file-is-read-only-error . g4bc0) (make-i/o-file-does-not-exist-error . g4bea) (make-i/o-file-already-exists-error . g4bd5) (make-i/o-error . g4b36) (make-i/o-encoding-error . g4c31) (make-i/o-decoding-error . g4c1a) (make-custom-textual-output-port . g5067) (make-custom-textual-input/output-port . g5066) (make-custom-textual-input-port . g5065) (make-custom-binary-output-port . g5064) (make-custom-binary-input/output-port . g5063) (make-custom-binary-input-port . g5062) (make-bytevector . g5061) (lookahead-u8 . g5060) (lookahead-char . g505f) (i/o-write-error? . g4b62) (i/o-read-error? . g4b4d) (i/o-port-error? . g4c05) (i/o-invalid-position-error? . g4b7b) (i/o-filename-error? . g4b96) (i/o-file-protection-error? . g4bad) (i/o-file-is-read-only-error? . g4bc2) (i/o-file-does-not-exist-error? . g4bec) (i/o-file-already-exists-error? . g4bd7) (i/o-error? . g4b38) (i/o-error-position . g4b7d) (i/o-error-port . g4c07) (i/o-error-filename . g4b98) (i/o-encoding-error? . g4c35) (i/o-encoding-error-char . g4c37) (i/o-decoding-error? . g4c1c) (get-u8 . g505e) (get-string-n! . g505d) (get-string-n . g505c) (get-string-all . g505b) (get-line . g505a) (get-datum . g5059) (get-char . g5058) (get-bytevector-some . g5057) (get-bytevector-n! . g5056) (get-bytevector-n . g5055) (get-bytevector-all . g5054) (flush-output-port . g5053) (close-port . g5052) (exit . g504a) (command-line . g4d6c) (string-fill! . g5049) (string-set! . g5048) (set-cdr! . g5047) (set-car! . g5046) (remove . g5045) (remv . g5044) (remp . g5043) (remq . g5042) (partition . g5041) (memv . g5040) (memq . g503f) (memp . g503e) (member . g503d) (exists . g503c) (for-all . g503b) (fold-right . g503a) (fold-left . g5039) (find . g5038) (filter . g5037) (cons* . g5036) (assv . g5035) (assq . g5034) (assp . g5033) (assoc . g5032) (call-with-string-output-port . g5031) (call-with-port . g5030) (call-with-bytevector-output-port . g502f) (bytevector->string . g502e) (buffer-mode? . g502d) (binary-port? . g502c) (with-exception-handler . g502b) (raise-continuable . g502a) (raise . g5029) (eval . g2f7e) (environment . g2f76) (make-enumeration . g5028) (enum-set=? . g5027) (enum-set-universe . g5026) (enum-set-union . g5025) (enum-set-subset? . g5024) (enum-set-projection . g5023) (enum-set-member? . g5022) (enum-set-intersection . g5021) (enum-set-indexer . g5020) (enum-set-difference . g501f) (enum-set-constructor . g501e) (enum-set-complement . g501d) (enum-set->list . g501c) (who-condition? . g4aac) (warning? . g4a24) (violation? . g4a63) (undefined-violation? . g4b23) (syntax-violation? . g4b0a) (syntax-violation-subform . g4b0e) (syntax-violation-form . g4b0c) (syntax-violation . g2f9e) (simple-conditions . g501b) (serious-condition? . g4a39) (non-continuable-violation? . g4ac3) (message-condition? . g4a0d) (make-who-condition . g4aa8) (make-warning . g4a22) (make-violation . g4a61) (make-undefined-violation . g4b21) (make-syntax-violation . g4b04) (make-serious-condition . g4a37) (make-non-continuable-violation . g4ac1) (make-message-condition . g4a09) (make-lexical-violation . g4aeb) (make-irritants-condition . g4a8d) (make-implementation-restriction-violation . g4ad6) (make-error . g4a4c) (make-assertion-violation . g4a76) (lexical-violation? . g4aed) (irritants-condition? . g4a91) (implementation-restriction-violation? . g4ad8) (error? . g4a4e) (condition-who . g4aae) (condition-predicate . g501a) (condition-message . g4a0f) (condition-irritants . g4a93) (condition-accessor . g5019) (condition . g5018) (assertion-violation? . g4a78) (condition? . g5017) (utf32->string . g5016) (utf16->string . g5015) (utf8->string . g5014) (uint-list->bytevector . g5013) (u8-list->bytevector . g5012) (string->utf8 . g5011) (string->utf32 . g5010) (string->utf16 . g500f) (sint-list->bytevector . g500e) (native-endianness . g500d) (bytevector? . g500c) (bytevector=? . g500b) (bytevector-uint-set! . g500a) (bytevector-uint-ref . g5009) (bytevector-u8-set! . g5008) (bytevector-u8-ref . g5007) (bytevector-u64-set! . g5006) (bytevector-u64-ref . g5005) (bytevector-u64-native-set! . g5004) (bytevector-u64-native-ref . g5003) (bytevector-u32-set! . g5002) (bytevector-u32-ref . g5001) (bytevector-u32-native-set! . g5000) (bytevector-u32-native-ref . g4fff) (bytevector-u16-set! . g4ffe) (bytevector-u16-ref . g4ffd) (bytevector-u16-native-set! . g4ffc) (bytevector-u16-native-ref . g4ffb) (bytevector-sint-set! . g4ffa) (bytevector-sint-ref . g4ff9) (bytevector-s8-set! . g4ff8) (bytevector-s8-ref . g4ff7) (bytevector-s64-set! . g4ff6) (bytevector-s64-ref . g4ff5) (bytevector-s64-native-set! . g4ff4) (bytevector-s64-native-ref . g4ff3) (bytevector-s32-set! . g4ff2) (bytevector-s32-ref . g4ff1) (bytevector-s32-native-set! . g4ff0) (bytevector-s32-native-ref . g4fef) (bytevector-s16-set! . g4fee) (bytevector-s16-ref . g4fed) (bytevector-s16-native-set! . g4fec) (bytevector-s16-native-ref . g4feb) (bytevector-length . g4fea) (bytevector-ieee-single-ref . g4fe9) (bytevector-ieee-single-set! . g4fe8) (bytevector-ieee-single-native-set! . g4fe7) (bytevector-ieee-single-native-ref . g4fe6) (bytevector-ieee-double-set! . g4fe5) (bytevector-ieee-double-ref . g4fe4) (bytevector-ieee-double-native-set! . g4fe3) (bytevector-ieee-double-native-ref . g4fe2) (bytevector-fill! . g4fe1) (bytevector-copy! . g4fe0) (bytevector-copy . g4fdf) (bytevector->uint-list . g4fde) (bytevector->u8-list . g4fdd) (bytevector->sint-list . g4fdc) (no-nans-violation? . g4c61) (no-infinities-violation? . g4c4c) (make-no-nans-violation . g4c5f) (make-no-infinities-violation . g4c4a) (real->flonum . g4fdb) (flzero? . g4fda) (fltruncate . g4fd9) (fltan . g4fd8) (flsqrt . g4fd7) (flsin . g4fd6) (flround . g4fd5) (flpositive? . g4fd4) (flonum? . g4fd3) (flodd? . g4fd2) (flnumerator . g4fd1) (flnegative? . g4fd0) (flnan? . g4fcf) (flmod0 . g4fce) (flmod . g4fcd) (flmin . g4fcc) (flmax . g4fcb) (fllog . g4fca) (flinteger? . g4fc9) (flinfinite? . g4fc8) (flfloor . g4fc7) (flfinite? . g4fc6) (flexpt . g4fc5) (flexp . g4fc4) (fleven? . g4fc3) (fldiv0-and-mod0 . g4fc2) (fldiv0 . g4fc1) (fldiv-and-mod . g4fc0) (fldiv . g4fbf) (fldenominator . g4fbe) (flcos . g4fbd) (flceiling . g4fbc) (flatan . g4fbb) (flasin . g4fba) (flacos . g4fb9) (flabs . g4fb8) (fl>? . g4fb7) (fl>=? . g4fb6) (fl=? . g4fb5) (fl<? . g4fb4) (fl<=? . g4fb3) (fl/ . g4fb2) (fl- . g4fb1) (fl+ . g4fb0) (fl* . g4faf) (fixnum->flonum . g4fae) (fxzero? . g4fad) (fxxor . g4fac) (fxrotate-bit-field . g4fab) (fxreverse-bit-field . g4faa) (fxpositive? . g4fa9) (fxodd? . g4fa8) (fxnot . g4fa7) (fxnegative? . g4fa6) (fxmod0 . g4fa5) (fxmod . g4fa4) (fxmin . g4fa3) (fxmax . g4fa2) (fxlength . g4fa1) (fxior . g4fa0) (fxif . g4f9f) (fxfirst-bit-set . g4f9e) (fxeven? . g4f9d) (fxdiv0-and-mod0 . g4f9c) (fxdiv0 . g4f9b) (fxdiv-and-mod . g4f9a) (fxdiv . g4f99) (fxcopy-bit-field . g4f98) (fxcopy-bit . g4f97) (fxbit-set? . g4f96) (fxbit-field . g4f95) (fxbit-count . g4f94) (fxarithmetic-shift-right . g4f93) (fxarithmetic-shift-left . g4f92) (fxarithmetic-shift . g4f91) (fxand . g4f90) (fx>? . g4f8f) (fx>=? . g4f8e) (fx=? . g4f8d) (fx<? . g4f8c) (fx<=? . g4f8b) (fx-/carry . g4f8a) (fx- . g4f89) (fx+/carry . g4f88) (fx+ . g4f87) (fx*/carry . g4f86) (fx* . g4f85) (greatest-fixnum . g4f84) (least-fixnum . g4f83) (fixnum-width . g4f82) (fixnum? . g4f81) (bitwise-rotate-bit-field . g4f80) (bitwise-reverse-bit-field . g4f7f) (bitwise-length . g4f7e) (bitwise-if . g4f7d) (bitwise-first-bit-set . g4f7c) (bitwise-copy-bit-field . g4f7b) (bitwise-copy-bit . g4f7a) (bitwise-bit-set? . g4f79) (bitwise-bit-field . g4f78) (bitwise-bit-count . g4f77) (bitwise-xor . g4f76) (bitwise-ior . g4f75) (bitwise-and . g4f74) (bitwise-not . g4f73) (bitwise-arithmetic-shift-right . g4f72) (bitwise-arithmetic-shift-left . g4f71) (bitwise-arithmetic-shift . g4f70) (zero? . g4f6f) (vector? . g4f6e) (vector-set! . g4f6d) (vector-ref . g4f6c) (vector-map . g4f6b) (vector-length . g4f6a) (vector-for-each . g4f69) (vector-fill! . g4f68) (vector->list . g4f67) (vector . g4f66) (values . g4f65) (truncate . g4f64) (tan . g4f63) (symbol? . g4f62) (symbol=? . g4f61) (symbol->string . g4f60) (substring . g4f5f) (string? . g4f5e) (string>? . g4f5d) (string>=? . g4f5c) (string=? . g4f5b) (string<? . g4f5a) (string<=? . g4f59) (string-ref . g4f58) (string-length . g4f57) (string-for-each . g4f56) (string-copy . g4f55) (string-append . g4f54) (string->symbol . g4f53) (string->number . g4f52) (string->list . g4f51) (string . g4f50) (sqrt . g4f4f) (sin . g4f4e) (round . g4f4d) (reverse . g4f4c) (real? . g4f4b) (real-valued? . g4f4a) (real-part . g4f49) (rationalize . g4f48) (rational? . g4f47) (rational-valued? . g4f46) (procedure? . g4f45) (positive? . g4f44) (pair? . g4f43) (odd? . g4f42) (numerator . g4f41) (number? . g4f40) (number->string . g4f3f) (null? . g4f3e) (not . g4f3d) (negative? . g4f3c) (nan? . g4f3b) (min . g4f3a) (max . g4f39) (map . g4f38) (make-vector . g4f37) (make-string . g4f36) (make-rectangular . g4f35) (make-polar . g4f34) (magnitude . g4f33) (log . g4f32) (list? . g4f31) (list-tail . g4f30) (list-ref . g4f2f) (list->vector . g4f2e) (list->string . g4f2d) (list . g4f2c) (length . g4f2b) (lcm . g4f2a) (integer? . g4f29) (integer-valued? . g4f28) (integer->char . g4f27) (infinite? . g4f26) (inexact? . g4f25) (inexact . g4f24) (imag-part . g4f23) (gcd . g4f22) (for-each . g4f21) (floor . g4f20) (finite? . g4f1f) (expt . g4f1e) (exp . g4f1d) (exact? . g4f1c) (exact-integer-sqrt . g4f1b) (exact . g4f1a) (even? . g4f19) (error . g4f18) (eqv? . g4f17) (equal? . g4f16) (eq? . g4f15) (dynamic-wind . g4f14) (div0-and-mod0 . g4f13) (mod0 . g4f12) (div0 . g4f11) (div-and-mod . g4f10) (mod . g4f0f) (div . g4f0e) (denominator . g4f0d) (cos . g4f0c) (cons . g4f0b) (complex? . g4f0a) (char? . g4f09) (char>? . g4f08) (char>=? . g4f07) (char=? . g4f06) (char<? . g4f05) (char<=? . g4f04) (char->integer . g4f03) (ceiling . g4f02) (call-with-values . g4f01) (call/cc . g4f00) (call-with-current-continuation . g4eff) (cddddr . g4efe) (cdddar . g4efd) (cddadr . g4efc) (cddaar . g4efb) (cdaddr . g4efa) (cdadar . g4ef9) (cdaadr . g4ef8) (cdaaar . g4ef7) (cadddr . g4ef6) (caddar . g4ef5) (cadadr . g4ef4) (cadaar . g4ef3) (caaddr . g4ef2) (caadar . g4ef1) (caaadr . g4ef0) (caaaar . g4eef) (cdddr . g4eee) (cddar . g4eed) (cdadr . g4eec) (cdaar . g4eeb) (caddr . g4eea) (cadar . g4ee9) (caadr . g4ee8) (caaar . g4ee7) (cddr . g4ee6) (cdar . g4ee5) (cadr . g4ee4) (caar . g4ee3) (cdr . g4ee2) (car . g4ee1) (boolean? . g4ee0) (boolean=? . g4edf) (atan . g4ede) (assertion-violation . g4edd) (asin . g4edc) (apply . g4edb) (append . g4eda) (angle . g4ed9) (acos . g4ed8) (abs . g4ed7) (/ . g4ed6) (* . g4ed5) (- . g4ed4) (+ . g4ed3) (>= . g4ed2) (> . g4ed1) (= . g4ed0) (<= . g4ecf) (< . g4ece) (library . g4ecd) (&no-nans . g4ecc) (&no-infinities . g4ecb) (&i/o-encoding . g4eca) (&i/o-decoding . g4ec9) (&i/o-port . g4ec8) (&i/o-file-does-not-exist . g4ec7) (&i/o-file-already-exists . g4ec6) (&i/o-file-is-read-only . g4ec5) (&i/o-file-protection . g4ec4) (&i/o-filename . g4ec3) (&i/o-invalid-position . g4ec2) (&i/o-write . g4ec1) (&i/o-read . g4ec0) (&i/o . g4ebf) (&undefined . g4ebe) (&syntax . g4ebd) (&lexical . g4ebc) (&implementation-restriction . g4ebb) (&non-continuable . g4eba) (&who . g4eb9) (&irritants . g4eb8) (&assertion . g4eb7) (&violation . g4eb6) (&error . g4eb5) (&serious . g4eb4) (&warning . g4eb3) (&message . g4eb2) (&condition . g4eb1) (define-condition-type . g4eb0) (define-enumeration . g4eaf) (define-record-type . g4eae) (parent-rtd . g4ead) (nongenerative . g4eac) (opaque . g4eab) (sealed . g4eaa) (protocol . g4ea9) (parent . g4ea8) (immutable . g4ea7) (mutable . g4ea6) (fields . g4ea5) (error-handling-mode . g4ea4) (file-options . g4ea3) (buffer-mode . g4ea2) (eol-style . g4ea1) (guard . g4ea0) (unsyntax-splicing . g4e9d) (unsyntax . g4e9c) (unquote-splicing . g4e9b) (unquote . g4e9a) (_ . g4e99) (else . g4e98) (=> . g4e97) (... . g4e96) (assert . g4e95) (endianness . g4e94) (time . g4e92) (do . g4e91) (cond . g4e90) (let* . g4e8f) (let . g4e8e) (let*-values . g4e8d) (let-values . g4e8c) (identifier-syntax . g4e8b) (with-syntax . g4e8a) (quasisyntax . g4e89) (quasiquote . g4e88) (syntax-rules . g4e87) (include . g4e86) (record-constructor-descriptor . g4e84) (record-type-descriptor . g4e83) (case . g4e82) (unless . g4e80) (when . g4e7f) (or . g4e7e) (and . g4e7d) (if . g4e7c) (letrec* . g4e7b) (letrec . g4e7a) (case-lambda . g4e78) (lambda . g4e77) (syntax . g4e76) (syntax-case . g4e75) (quote . g4e74) (letrec-syntax . g4e72) (let-syntax . g4e71) (set! . g4e70) (import . g4e6f) (begin . g4e6e) (define-syntax . g4e6c) (define . g4e6b)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g513b '(psyntax null-environment-5) '() '() '() '() '((make-promise . g504b) (unquote-splicing . g4e9b) (unquote . g4e9a) (_ . g4e99) (else . g4e98) (=> . g4e97) (... . g4e96) (delay . g4e93) (do . g4e91) (cond . g4e90) (let* . g4e8f) (let . g4e8e) (quasiquote . g4e88) (syntax-rules . g4e87) (case . g4e82) (or . g4e7e) (and . g4e7d) (if . g4e7c) (letrec . g4e7a) (lambda . g4e77) (quote . g4e74) (letrec-syntax . g4e72) (let-syntax . g4e71) (set! . g4e70) (begin . g4e6e) (define-syntax . g4e6c) (define . g4e6b)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g513c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g50e0) (string-ci>=? . g50df) (string-ci=? . g50de) (string-ci<? . g50dd) (string-ci<=? . g50dc) (char-whitespace? . g50db) (char-upper-case? . g50da) (char-numeric? . g50d8) (char-lower-case? . g50d7) (char-upcase . g50d5) (char-downcase . g50d2) (char-ci>? . g50d1) (char-ci>=? . g50d0) (char-ci=? . g50cf) (char-ci<? . g50ce) (char-ci<=? . g50cd) (char-alphabetic? . g50cc) (call-with-output-file . g50a0) (call-with-input-file . g509f) (write-char . g509e) (write . g509d) (with-output-to-file . g509c) (with-input-from-file . g509b) (read-char . g509a) (read . g5099) (peek-char . g5098) (open-output-file . g5097) (open-input-file . g5096) (newline . g5095) (display . g5094) (close-output-port . g5093) (close-input-port . g5092) (eof-object . g5090) (current-output-port . g508e) (current-input-port . g508d) (output-port? . g508c) (input-port? . g508b) (scheme-report-environment . g2f7a) (quotient . g5051) (null-environment . g2f78) (remainder . g5050) (modulo . g504f) (inexact->exact . g504e) (force . g504d) (exact->inexact . g504c) (make-promise . g504b) (string-fill! . g5049) (string-set! . g5048) (set-cdr! . g5047) (set-car! . g5046) (memv . g5040) (memq . g503f) (member . g503d) (assv . g5035) (assq . g5034) (assoc . g5032) (eval . g2f7e) (zero? . g4f6f) (vector? . g4f6e) (vector-set! . g4f6d) (vector-ref . g4f6c) (vector-length . g4f6a) (vector-fill! . g4f68) (vector->list . g4f67) (vector . g4f66) (values . g4f65) (truncate . g4f64) (tan . g4f63) (symbol? . g4f62) (symbol->string . g4f60) (substring . g4f5f) (string? . g4f5e) (string>? . g4f5d) (string>=? . g4f5c) (string=? . g4f5b) (string<? . g4f5a) (string<=? . g4f59) (string-ref . g4f58) (string-length . g4f57) (string-copy . g4f55) (string-append . g4f54) (string->symbol . g4f53) (string->number . g4f52) (string->list . g4f51) (string . g4f50) (sqrt . g4f4f) (sin . g4f4e) (round . g4f4d) (reverse . g4f4c) (real? . g4f4b) (real-part . g4f49) (rationalize . g4f48) (rational? . g4f47) (procedure? . g4f45) (positive? . g4f44) (pair? . g4f43) (odd? . g4f42) (numerator . g4f41) (number? . g4f40) (number->string . g4f3f) (not . g4f3d) (negative? . g4f3c) (min . g4f3a) (max . g4f39) (map . g4f38) (make-vector . g4f37) (make-string . g4f36) (make-rectangular . g4f35) (make-polar . g4f34) (magnitude . g4f33) (log . g4f32) (list? . g4f31) (list-tail . g4f30) (list-ref . g4f2f) (list->vector . g4f2e) (list->string . g4f2d) (list . g4f2c) (length . g4f2b) (lcm . g4f2a) (integer? . g4f29) (integer->char . g4f27) (inexact? . g4f25) (imag-part . g4f23) (gcd . g4f22) (for-each . g4f21) (floor . g4f20) (expt . g4f1e) (exp . g4f1d) (exact? . g4f1c) (even? . g4f19) (eqv? . g4f17) (equal? . g4f16) (eq? . g4f15) (dynamic-wind . g4f14) (denominator . g4f0d) (cos . g4f0c) (cons . g4f0b) (complex? . g4f0a) (char? . g4f09) (char>? . g4f08) (char>=? . g4f07) (char=? . g4f06) (char<? . g4f05) (char<=? . g4f04) (char->integer . g4f03) (ceiling . g4f02) (call-with-values . g4f01) (call-with-current-continuation . g4eff) (cddddr . g4efe) (cdddar . g4efd) (cddadr . g4efc) (cddaar . g4efb) (cdaddr . g4efa) (cdadar . g4ef9) (cdaadr . g4ef8) (cdaaar . g4ef7) (cadddr . g4ef6) (caddar . g4ef5) (cadadr . g4ef4) (cadaar . g4ef3) (caaddr . g4ef2) (caadar . g4ef1) (caaadr . g4ef0) (caaaar . g4eef) (cdddr . g4eee) (cddar . g4eed) (cdadr . g4eec) (cdaar . g4eeb) (caddr . g4eea) (cadar . g4ee9) (caadr . g4ee8) (caaar . g4ee7) (cddr . g4ee6) (cdar . g4ee5) (cadr . g4ee4) (caar . g4ee3) (cdr . g4ee2) (car . g4ee1) (boolean? . g4ee0) (atan . g4ede) (asin . g4edc) (apply . g4edb) (append . g4eda) (angle . g4ed9) (acos . g4ed8) (abs . g4ed7) (/ . g4ed6) (* . g4ed5) (- . g4ed4) (+ . g4ed3) (>= . g4ed2) (> . g4ed1) (= . g4ed0) (<= . g4ecf) (< . g4ece) (unquote-splicing . g4e9b) (unquote . g4e9a) (else . g4e98) (=> . g4e97) (... . g4e96) (delay . g4e93) (do . g4e91) (cond . g4e90) (let* . g4e8f) (let . g4e8e) (quasiquote . g4e88) (syntax-rules . g4e87) (case . g4e82) (or . g4e7e) (and . g4e7d) (if . g4e7c) (letrec . g4e7a) (lambda . g4e77) (quote . g4e74) (letrec-syntax . g4e72) (let-syntax . g4e71) (set! . g4e70) (begin . g4e6e) (define-syntax . g4e6c) (define . g4e6b)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g513d '(psyntax modules) '() '() '() '() '((module . g4e6d)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g513e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g513f '(rnrs) '(6) '() '() '() '((regexp? . g5132) (string-upcase . g50e8) (string-titlecase . g50e7) (string-normalize-nfkd . g50e6) (string-normalize-nfkc . g50e5) (string-normalize-nfd . g50e4) (string-normalize-nfc . g50e3) (string-foldcase . g50e2) (string-downcase . g50e1) (string-ci>? . g50e0) (string-ci>=? . g50df) (string-ci=? . g50de) (string-ci<? . g50dd) (string-ci<=? . g50dc) (char-whitespace? . g50db) (char-upper-case? . g50da) (char-title-case? . g50d9) (char-numeric? . g50d8) (char-lower-case? . g50d7) (char-general-category . g50d6) (char-upcase . g50d5) (char-titlecase . g50d4) (char-foldcase . g50d3) (char-downcase . g50d2) (char-ci>? . g50d1) (char-ci>=? . g50d0) (char-ci=? . g50cf) (char-ci<? . g50ce) (char-ci<=? . g50cd) (char-alphabetic? . g50cc) (make-variable-transformer . g2ce2) (identifier? . g2fa0) (generate-temporaries . g2f8c) (free-identifier=? . g2f8e) (syntax->datum . g2fa4) (datum->syntax . g2fa2) (bound-identifier=? . g2f90) (record-type-descriptor? . g50cb) (record-predicate . g50ca) (record-mutator . g50c9) (record-constructor . g50c8) (record-accessor . g50c7) (make-record-type-descriptor . g50c6) (make-record-constructor-descriptor . g50c5) (record? . g50c4) (record-type-uid . g50c3) (record-type-sealed? . g50c2) (record-type-parent . g50c1) (record-type-opaque? . g50c0) (record-type-name . g50bf) (record-type-generative? . g50be) (record-type-field-names . g50bd) (record-rtd . g50bc) (record-field-mutable? . g50bb) (delete-file . g50ba) (file-exists? . g50b9) (vector-sort! . g50b8) (vector-sort . g50b7) (list-sort . g50b6) (symbol-hash . g50b5) (string-ci-hash . g50b4) (string-hash . g50b3) (equal-hash . g50b2) (hashtable-equivalence-function . g50b1) (make-hashtable . g50b0) (hashtable-hash-function . g50af) (make-eqv-hashtable . g50ae) (make-eq-hashtable . g50ad) (hashtable? . g50ac) (hashtable-update! . g50ab) (hashtable-size . g50aa) (hashtable-set! . g50a9) (hashtable-ref . g50a8) (hashtable-mutable? . g50a7) (hashtable-keys . g50a6) (hashtable-entries . g50a5) (hashtable-delete! . g50a4) (hashtable-copy . g50a3) (hashtable-contains? . g50a2) (hashtable-clear! . g50a1) (call-with-output-file . g50a0) (call-with-input-file . g509f) (write-char . g509e) (write . g509d) (with-output-to-file . g509c) (with-input-from-file . g509b) (read-char . g509a) (read . g5099) (peek-char . g5098) (open-output-file . g5097) (open-input-file . g5096) (newline . g5095) (display . g5094) (close-output-port . g5093) (close-input-port . g5092) (eof-object? . g5091) (eof-object . g5090) (current-error-port . g508f) (current-output-port . g508e) (current-input-port . g508d) (output-port? . g508c) (input-port? . g508b) (utf-8-codec . g508a) (utf-16-codec . g5089) (transcoder-error-handling-mode . g5088) (transcoder-eol-style . g5087) (transcoder-codec . g5086) (transcoded-port . g5085) (textual-port? . g5084) (string->bytevector . g5083) (standard-output-port . g5082) (standard-input-port . g5081) (standard-error-port . g5080) (set-port-position! . g507f) (put-u8 . g507e) (put-string . g507d) (put-datum . g507c) (put-char . g507b) (put-bytevector . g507a) (port? . g5079) (port-transcoder . g5078) (port-position . g5077) (port-has-set-port-position!? . g5076) (port-has-port-position? . g5075) (port-eof? . g5074) (output-port-buffer-mode . g5073) (open-string-output-port . g5072) (open-string-input-port . g5071) (open-file-output-port . g5070) (open-file-input/output-port . g506f) (open-file-input-port . g506e) (open-bytevector-output-port . g506d) (open-bytevector-input-port . g506c) (native-transcoder . g506b) (native-eol-style . g506a) (make-transcoder . g5069) (latin-1-codec . g5068) (make-i/o-write-error . g4b60) (make-i/o-read-error . g4b4b) (make-i/o-port-error . g4c01) (make-i/o-invalid-position-error . g4b77) (make-i/o-filename-error . g4b92) (make-i/o-file-protection-error . g4bab) (make-i/o-file-is-read-only-error . g4bc0) (make-i/o-file-does-not-exist-error . g4bea) (make-i/o-file-already-exists-error . g4bd5) (make-i/o-error . g4b36) (make-i/o-encoding-error . g4c31) (make-i/o-decoding-error . g4c1a) (make-custom-textual-output-port . g5067) (make-custom-textual-input/output-port . g5066) (make-custom-textual-input-port . g5065) (make-custom-binary-output-port . g5064) (make-custom-binary-input/output-port . g5063) (make-custom-binary-input-port . g5062) (make-bytevector . g5061) (lookahead-u8 . g5060) (lookahead-char . g505f) (i/o-write-error? . g4b62) (i/o-read-error? . g4b4d) (i/o-port-error? . g4c05) (i/o-invalid-position-error? . g4b7b) (i/o-filename-error? . g4b96) (i/o-file-protection-error? . g4bad) (i/o-file-is-read-only-error? . g4bc2) (i/o-file-does-not-exist-error? . g4bec) (i/o-file-already-exists-error? . g4bd7) (i/o-error? . g4b38) (i/o-error-position . g4b7d) (i/o-error-port . g4c07) (i/o-error-filename . g4b98) (i/o-encoding-error? . g4c35) (i/o-encoding-error-char . g4c37) (i/o-decoding-error? . g4c1c) (get-u8 . g505e) (get-string-n! . g505d) (get-string-n . g505c) (get-string-all . g505b) (get-line . g505a) (get-datum . g5059) (get-char . g5058) (get-bytevector-some . g5057) (get-bytevector-n! . g5056) (get-bytevector-n . g5055) (get-bytevector-all . g5054) (flush-output-port . g5053) (close-port . g5052) (exit . g504a) (command-line . g4d6c) (remove . g5045) (remv . g5044) (remp . g5043) (remq . g5042) (partition . g5041) (memv . g5040) (memq . g503f) (memp . g503e) (member . g503d) (exists . g503c) (for-all . g503b) (fold-right . g503a) (fold-left . g5039) (find . g5038) (filter . g5037) (cons* . g5036) (assv . g5035) (assq . g5034) (assp . g5033) (assoc . g5032) (call-with-string-output-port . g5031) (call-with-port . g5030) (call-with-bytevector-output-port . g502f) (bytevector->string . g502e) (buffer-mode? . g502d) (binary-port? . g502c) (with-exception-handler . g502b) (raise-continuable . g502a) (raise . g5029) (make-enumeration . g5028) (enum-set=? . g5027) (enum-set-universe . g5026) (enum-set-union . g5025) (enum-set-subset? . g5024) (enum-set-projection . g5023) (enum-set-member? . g5022) (enum-set-intersection . g5021) (enum-set-indexer . g5020) (enum-set-difference . g501f) (enum-set-constructor . g501e) (enum-set-complement . g501d) (enum-set->list . g501c) (who-condition? . g4aac) (warning? . g4a24) (violation? . g4a63) (undefined-violation? . g4b23) (syntax-violation? . g4b0a) (syntax-violation-subform . g4b0e) (syntax-violation-form . g4b0c) (syntax-violation . g2f9e) (simple-conditions . g501b) (serious-condition? . g4a39) (non-continuable-violation? . g4ac3) (message-condition? . g4a0d) (make-who-condition . g4aa8) (make-warning . g4a22) (make-violation . g4a61) (make-undefined-violation . g4b21) (make-syntax-violation . g4b04) (make-serious-condition . g4a37) (make-non-continuable-violation . g4ac1) (make-message-condition . g4a09) (make-lexical-violation . g4aeb) (make-irritants-condition . g4a8d) (make-implementation-restriction-violation . g4ad6) (make-error . g4a4c) (make-assertion-violation . g4a76) (lexical-violation? . g4aed) (irritants-condition? . g4a91) (implementation-restriction-violation? . g4ad8) (error? . g4a4e) (condition-who . g4aae) (condition-predicate . g501a) (condition-message . g4a0f) (condition-irritants . g4a93) (condition-accessor . g5019) (condition . g5018) (assertion-violation? . g4a78) (condition? . g5017) (utf32->string . g5016) (utf16->string . g5015) (utf8->string . g5014) (uint-list->bytevector . g5013) (u8-list->bytevector . g5012) (string->utf8 . g5011) (string->utf32 . g5010) (string->utf16 . g500f) (sint-list->bytevector . g500e) (native-endianness . g500d) (bytevector? . g500c) (bytevector=? . g500b) (bytevector-uint-set! . g500a) (bytevector-uint-ref . g5009) (bytevector-u8-set! . g5008) (bytevector-u8-ref . g5007) (bytevector-u64-set! . g5006) (bytevector-u64-ref . g5005) (bytevector-u64-native-set! . g5004) (bytevector-u64-native-ref . g5003) (bytevector-u32-set! . g5002) (bytevector-u32-ref . g5001) (bytevector-u32-native-set! . g5000) (bytevector-u32-native-ref . g4fff) (bytevector-u16-set! . g4ffe) (bytevector-u16-ref . g4ffd) (bytevector-u16-native-set! . g4ffc) (bytevector-u16-native-ref . g4ffb) (bytevector-sint-set! . g4ffa) (bytevector-sint-ref . g4ff9) (bytevector-s8-set! . g4ff8) (bytevector-s8-ref . g4ff7) (bytevector-s64-set! . g4ff6) (bytevector-s64-ref . g4ff5) (bytevector-s64-native-set! . g4ff4) (bytevector-s64-native-ref . g4ff3) (bytevector-s32-set! . g4ff2) (bytevector-s32-ref . g4ff1) (bytevector-s32-native-set! . g4ff0) (bytevector-s32-native-ref . g4fef) (bytevector-s16-set! . g4fee) (bytevector-s16-ref . g4fed) (bytevector-s16-native-set! . g4fec) (bytevector-s16-native-ref . g4feb) (bytevector-length . g4fea) (bytevector-ieee-single-ref . g4fe9) (bytevector-ieee-single-set! . g4fe8) (bytevector-ieee-single-native-set! . g4fe7) (bytevector-ieee-single-native-ref . g4fe6) (bytevector-ieee-double-set! . g4fe5) (bytevector-ieee-double-ref . g4fe4) (bytevector-ieee-double-native-set! . g4fe3) (bytevector-ieee-double-native-ref . g4fe2) (bytevector-fill! . g4fe1) (bytevector-copy! . g4fe0) (bytevector-copy . g4fdf) (bytevector->uint-list . g4fde) (bytevector->u8-list . g4fdd) (bytevector->sint-list . g4fdc) (no-nans-violation? . g4c61) (no-infinities-violation? . g4c4c) (make-no-nans-violation . g4c5f) (make-no-infinities-violation . g4c4a) (real->flonum . g4fdb) (flzero? . g4fda) (fltruncate . g4fd9) (fltan . g4fd8) (flsqrt . g4fd7) (flsin . g4fd6) (flround . g4fd5) (flpositive? . g4fd4) (flonum? . g4fd3) (flodd? . g4fd2) (flnumerator . g4fd1) (flnegative? . g4fd0) (flnan? . g4fcf) (flmod0 . g4fce) (flmod . g4fcd) (flmin . g4fcc) (flmax . g4fcb) (fllog . g4fca) (flinteger? . g4fc9) (flinfinite? . g4fc8) (flfloor . g4fc7) (flfinite? . g4fc6) (flexpt . g4fc5) (flexp . g4fc4) (fleven? . g4fc3) (fldiv0-and-mod0 . g4fc2) (fldiv0 . g4fc1) (fldiv-and-mod . g4fc0) (fldiv . g4fbf) (fldenominator . g4fbe) (flcos . g4fbd) (flceiling . g4fbc) (flatan . g4fbb) (flasin . g4fba) (flacos . g4fb9) (flabs . g4fb8) (fl>? . g4fb7) (fl>=? . g4fb6) (fl=? . g4fb5) (fl<? . g4fb4) (fl<=? . g4fb3) (fl/ . g4fb2) (fl- . g4fb1) (fl+ . g4fb0) (fl* . g4faf) (fixnum->flonum . g4fae) (fxzero? . g4fad) (fxxor . g4fac) (fxrotate-bit-field . g4fab) (fxreverse-bit-field . g4faa) (fxpositive? . g4fa9) (fxodd? . g4fa8) (fxnot . g4fa7) (fxnegative? . g4fa6) (fxmod0 . g4fa5) (fxmod . g4fa4) (fxmin . g4fa3) (fxmax . g4fa2) (fxlength . g4fa1) (fxior . g4fa0) (fxif . g4f9f) (fxfirst-bit-set . g4f9e) (fxeven? . g4f9d) (fxdiv0-and-mod0 . g4f9c) (fxdiv0 . g4f9b) (fxdiv-and-mod . g4f9a) (fxdiv . g4f99) (fxcopy-bit-field . g4f98) (fxcopy-bit . g4f97) (fxbit-set? . g4f96) (fxbit-field . g4f95) (fxbit-count . g4f94) (fxarithmetic-shift-right . g4f93) (fxarithmetic-shift-left . g4f92) (fxarithmetic-shift . g4f91) (fxand . g4f90) (fx>? . g4f8f) (fx>=? . g4f8e) (fx=? . g4f8d) (fx<? . g4f8c) (fx<=? . g4f8b) (fx-/carry . g4f8a) (fx- . g4f89) (fx+/carry . g4f88) (fx+ . g4f87) (fx*/carry . g4f86) (fx* . g4f85) (greatest-fixnum . g4f84) (least-fixnum . g4f83) (fixnum-width . g4f82) (fixnum? . g4f81) (bitwise-rotate-bit-field . g4f80) (bitwise-reverse-bit-field . g4f7f) (bitwise-length . g4f7e) (bitwise-if . g4f7d) (bitwise-first-bit-set . g4f7c) (bitwise-copy-bit-field . g4f7b) (bitwise-copy-bit . g4f7a) (bitwise-bit-set? . g4f79) (bitwise-bit-field . g4f78) (bitwise-bit-count . g4f77) (bitwise-xor . g4f76) (bitwise-ior . g4f75) (bitwise-and . g4f74) (bitwise-not . g4f73) (bitwise-arithmetic-shift-right . g4f72) (bitwise-arithmetic-shift-left . g4f71) (bitwise-arithmetic-shift . g4f70) (zero? . g4f6f) (vector? . g4f6e) (vector-set! . g4f6d) (vector-ref . g4f6c) (vector-map . g4f6b) (vector-length . g4f6a) (vector-for-each . g4f69) (vector-fill! . g4f68) (vector->list . g4f67) (vector . g4f66) (values . g4f65) (truncate . g4f64) (tan . g4f63) (symbol? . g4f62) (symbol=? . g4f61) (symbol->string . g4f60) (substring . g4f5f) (string? . g4f5e) (string>? . g4f5d) (string>=? . g4f5c) (string=? . g4f5b) (string<? . g4f5a) (string<=? . g4f59) (string-ref . g4f58) (string-length . g4f57) (string-for-each . g4f56) (string-copy . g4f55) (string-append . g4f54) (string->symbol . g4f53) (string->number . g4f52) (string->list . g4f51) (string . g4f50) (sqrt . g4f4f) (sin . g4f4e) (round . g4f4d) (reverse . g4f4c) (real? . g4f4b) (real-valued? . g4f4a) (real-part . g4f49) (rationalize . g4f48) (rational? . g4f47) (rational-valued? . g4f46) (procedure? . g4f45) (positive? . g4f44) (pair? . g4f43) (odd? . g4f42) (numerator . g4f41) (number? . g4f40) (number->string . g4f3f) (null? . g4f3e) (not . g4f3d) (negative? . g4f3c) (nan? . g4f3b) (min . g4f3a) (max . g4f39) (map . g4f38) (make-vector . g4f37) (make-string . g4f36) (make-rectangular . g4f35) (make-polar . g4f34) (magnitude . g4f33) (log . g4f32) (list? . g4f31) (list-tail . g4f30) (list-ref . g4f2f) (list->vector . g4f2e) (list->string . g4f2d) (list . g4f2c) (length . g4f2b) (lcm . g4f2a) (integer? . g4f29) (integer-valued? . g4f28) (integer->char . g4f27) (infinite? . g4f26) (inexact? . g4f25) (inexact . g4f24) (imag-part . g4f23) (gcd . g4f22) (for-each . g4f21) (floor . g4f20) (finite? . g4f1f) (expt . g4f1e) (exp . g4f1d) (exact? . g4f1c) (exact-integer-sqrt . g4f1b) (exact . g4f1a) (even? . g4f19) (error . g4f18) (eqv? . g4f17) (equal? . g4f16) (eq? . g4f15) (dynamic-wind . g4f14) (div0-and-mod0 . g4f13) (mod0 . g4f12) (div0 . g4f11) (div-and-mod . g4f10) (mod . g4f0f) (div . g4f0e) (denominator . g4f0d) (cos . g4f0c) (cons . g4f0b) (complex? . g4f0a) (char? . g4f09) (char>? . g4f08) (char>=? . g4f07) (char=? . g4f06) (char<? . g4f05) (char<=? . g4f04) (char->integer . g4f03) (ceiling . g4f02) (call-with-values . g4f01) (call/cc . g4f00) (call-with-current-continuation . g4eff) (cddddr . g4efe) (cdddar . g4efd) (cddadr . g4efc) (cddaar . g4efb) (cdaddr . g4efa) (cdadar . g4ef9) (cdaadr . g4ef8) (cdaaar . g4ef7) (cadddr . g4ef6) (caddar . g4ef5) (cadadr . g4ef4) (cadaar . g4ef3) (caaddr . g4ef2) (caadar . g4ef1) (caaadr . g4ef0) (caaaar . g4eef) (cdddr . g4eee) (cddar . g4eed) (cdadr . g4eec) (cdaar . g4eeb) (caddr . g4eea) (cadar . g4ee9) (caadr . g4ee8) (caaar . g4ee7) (cddr . g4ee6) (cdar . g4ee5) (cadr . g4ee4) (caar . g4ee3) (cdr . g4ee2) (car . g4ee1) (boolean? . g4ee0) (boolean=? . g4edf) (atan . g4ede) (assertion-violation . g4edd) (asin . g4edc) (apply . g4edb) (append . g4eda) (angle . g4ed9) (acos . g4ed8) (abs . g4ed7) (/ . g4ed6) (* . g4ed5) (- . g4ed4) (+ . g4ed3) (>= . g4ed2) (> . g4ed1) (= . g4ed0) (<= . g4ecf) (< . g4ece) (&no-nans . g4ecc) (&no-infinities . g4ecb) (&i/o-encoding . g4eca) (&i/o-decoding . g4ec9) (&i/o-port . g4ec8) (&i/o-file-does-not-exist . g4ec7) (&i/o-file-already-exists . g4ec6) (&i/o-file-is-read-only . g4ec5) (&i/o-file-protection . g4ec4) (&i/o-filename . g4ec3) (&i/o-invalid-position . g4ec2) (&i/o-write . g4ec1) (&i/o-read . g4ec0) (&i/o . g4ebf) (&undefined . g4ebe) (&syntax . g4ebd) (&lexical . g4ebc) (&implementation-restriction . g4ebb) (&non-continuable . g4eba) (&who . g4eb9) (&irritants . g4eb8) (&assertion . g4eb7) (&violation . g4eb6) (&error . g4eb5) (&serious . g4eb4) (&warning . g4eb3) (&message . g4eb2) (&condition . g4eb1) (define-condition-type . g4eb0) (define-enumeration . g4eaf) (define-record-type . g4eae) (parent-rtd . g4ead) (nongenerative . g4eac) (opaque . g4eab) (sealed . g4eaa) (protocol . g4ea9) (parent . g4ea8) (immutable . g4ea7) (mutable . g4ea6) (fields . g4ea5) (error-handling-mode . g4ea4) (file-options . g4ea3) (buffer-mode . g4ea2) (eol-style . g4ea1) (guard . g4ea0) (unsyntax-splicing . g4e9d) (unsyntax . g4e9c) (unquote-splicing . g4e9b) (unquote . g4e9a) (_ . g4e99) (else . g4e98) (=> . g4e97) (... . g4e96) (assert . g4e95) (endianness . g4e94) (do . g4e91) (cond . g4e90) (let* . g4e8f) (let . g4e8e) (let*-values . g4e8d) (let-values . g4e8c) (identifier-syntax . g4e8b) (with-syntax . g4e8a) (quasisyntax . g4e89) (quasiquote . g4e88) (syntax-rules . g4e87) (record-constructor-descriptor . g4e84) (record-type-descriptor . g4e83) (case . g4e82) (unless . g4e80) (when . g4e7f) (or . g4e7e) (and . g4e7d) (if . g4e7c) (letrec* . g4e7b) (letrec . g4e7a) (case-lambda . g4e78) (lambda . g4e77) (syntax . g4e76) (syntax-case . g4e75) (quote . g4e74) (letrec-syntax . g4e72) (let-syntax . g4e71) (set! . g4e70) (begin . g4e6e) (define-syntax . g4e6c) (define . g4e6b)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5140 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g2f7a) (quotient . g5051) (null-environment . g2f78) (remainder . g5050) (modulo . g504f) (inexact->exact . g504e) (force . g504d) (exact->inexact . g504c) (make-promise . g504b) (delay . g4e93)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5141 '(rnrs control) '(6) '() '() '() '((do . g4e91) (unless . g4e80) (when . g4e7f) (case-lambda . g4e78)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5142 '(rnrs eval) '(6) '() '() '() '((eval . g2f7e) (environment . g2f76)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5143 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g5047) (set-car! . g5046)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5144 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g5049) (string-set! . g5048)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5145 '(rnrs programs) '(6) '() '() '() '((exit . g504a) (command-line . g4d6c)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5146 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g2ce2) (identifier? . g2fa0) (generate-temporaries . g2f8c) (free-identifier=? . g2f8e) (syntax->datum . g2fa4) (datum->syntax . g2fa2) (bound-identifier=? . g2f90) (syntax-violation . g2f9e) (unsyntax-splicing . g4e9d) (unsyntax . g4e9c) (_ . g4e99) (... . g4e96) (with-syntax . g4e8a) (quasisyntax . g4e89) (syntax . g4e76) (syntax-case . g4e75)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5147 '(rnrs files) '(6) '() '() '() '((delete-file . g50ba) (file-exists? . g50b9) (make-i/o-write-error . g4b60) (make-i/o-read-error . g4b4b) (make-i/o-port-error . g4c01) (make-i/o-invalid-position-error . g4b77) (make-i/o-filename-error . g4b92) (make-i/o-file-protection-error . g4bab) (make-i/o-file-is-read-only-error . g4bc0) (make-i/o-file-does-not-exist-error . g4bea) (make-i/o-file-already-exists-error . g4bd5) (make-i/o-error . g4b36) (i/o-write-error? . g4b62) (i/o-read-error? . g4b4d) (i/o-port-error? . g4c05) (i/o-invalid-position-error? . g4b7b) (i/o-filename-error? . g4b96) (i/o-file-protection-error? . g4bad) (i/o-file-is-read-only-error? . g4bc2) (i/o-file-does-not-exist-error? . g4bec) (i/o-file-already-exists-error? . g4bd7) (i/o-error? . g4b38) (i/o-error-position . g4b7d) (i/o-error-port . g4c07) (i/o-error-filename . g4b98) (&i/o-port . g4ec8) (&i/o-file-does-not-exist . g4ec7) (&i/o-file-already-exists . g4ec6) (&i/o-file-is-read-only . g4ec5) (&i/o-file-protection . g4ec4) (&i/o-filename . g4ec3) (&i/o-invalid-position . g4ec2) (&i/o-write . g4ec1) (&i/o-read . g4ec0) (&i/o . g4ebf)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5148 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g50b8) (vector-sort . g50b7) (list-sort . g50b6)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5149 '(rnrs base) '(6) '() '() '() '((zero? . g4f6f) (vector? . g4f6e) (vector-set! . g4f6d) (vector-ref . g4f6c) (vector-map . g4f6b) (vector-length . g4f6a) (vector-for-each . g4f69) (vector-fill! . g4f68) (vector->list . g4f67) (vector . g4f66) (values . g4f65) (truncate . g4f64) (tan . g4f63) (symbol? . g4f62) (symbol=? . g4f61) (symbol->string . g4f60) (substring . g4f5f) (string? . g4f5e) (string>? . g4f5d) (string>=? . g4f5c) (string=? . g4f5b) (string<? . g4f5a) (string<=? . g4f59) (string-ref . g4f58) (string-length . g4f57) (string-for-each . g4f56) (string-copy . g4f55) (string-append . g4f54) (string->symbol . g4f53) (string->number . g4f52) (string->list . g4f51) (string . g4f50) (sqrt . g4f4f) (sin . g4f4e) (round . g4f4d) (reverse . g4f4c) (real? . g4f4b) (real-valued? . g4f4a) (real-part . g4f49) (rationalize . g4f48) (rational? . g4f47) (rational-valued? . g4f46) (procedure? . g4f45) (positive? . g4f44) (pair? . g4f43) (odd? . g4f42) (numerator . g4f41) (number? . g4f40) (number->string . g4f3f) (null? . g4f3e) (not . g4f3d) (negative? . g4f3c) (nan? . g4f3b) (min . g4f3a) (max . g4f39) (map . g4f38) (make-vector . g4f37) (make-string . g4f36) (make-rectangular . g4f35) (make-polar . g4f34) (magnitude . g4f33) (log . g4f32) (list? . g4f31) (list-tail . g4f30) (list-ref . g4f2f) (list->vector . g4f2e) (list->string . g4f2d) (list . g4f2c) (length . g4f2b) (lcm . g4f2a) (integer? . g4f29) (integer-valued? . g4f28) (integer->char . g4f27) (infinite? . g4f26) (inexact? . g4f25) (inexact . g4f24) (imag-part . g4f23) (gcd . g4f22) (for-each . g4f21) (floor . g4f20) (finite? . g4f1f) (expt . g4f1e) (exp . g4f1d) (exact? . g4f1c) (exact-integer-sqrt . g4f1b) (exact . g4f1a) (even? . g4f19) (error . g4f18) (eqv? . g4f17) (equal? . g4f16) (eq? . g4f15) (dynamic-wind . g4f14) (div0-and-mod0 . g4f13) (mod0 . g4f12) (div0 . g4f11) (div-and-mod . g4f10) (mod . g4f0f) (div . g4f0e) (denominator . g4f0d) (cos . g4f0c) (cons . g4f0b) (complex? . g4f0a) (char? . g4f09) (char>? . g4f08) (char>=? . g4f07) (char=? . g4f06) (char<? . g4f05) (char<=? . g4f04) (char->integer . g4f03) (ceiling . g4f02) (call-with-values . g4f01) (call/cc . g4f00) (call-with-current-continuation . g4eff) (cddddr . g4efe) (cdddar . g4efd) (cddadr . g4efc) (cddaar . g4efb) (cdaddr . g4efa) (cdadar . g4ef9) (cdaadr . g4ef8) (cdaaar . g4ef7) (cadddr . g4ef6) (caddar . g4ef5) (cadadr . g4ef4) (cadaar . g4ef3) (caaddr . g4ef2) (caadar . g4ef1) (caaadr . g4ef0) (caaaar . g4eef) (cdddr . g4eee) (cddar . g4eed) (cdadr . g4eec) (cdaar . g4eeb) (caddr . g4eea) (cadar . g4ee9) (caadr . g4ee8) (caaar . g4ee7) (cddr . g4ee6) (cdar . g4ee5) (cadr . g4ee4) (caar . g4ee3) (cdr . g4ee2) (car . g4ee1) (boolean? . g4ee0) (boolean=? . g4edf) (atan . g4ede) (assertion-violation . g4edd) (asin . g4edc) (apply . g4edb) (append . g4eda) (angle . g4ed9) (acos . g4ed8) (abs . g4ed7) (/ . g4ed6) (* . g4ed5) (- . g4ed4) (+ . g4ed3) (>= . g4ed2) (> . g4ed1) (= . g4ed0) (<= . g4ecf) (< . g4ece) (unquote-splicing . g4e9b) (unquote . g4e9a) (_ . g4e99) (else . g4e98) (=> . g4e97) (... . g4e96) (assert . g4e95) (cond . g4e90) (let* . g4e8f) (let . g4e8e) (let*-values . g4e8d) (let-values . g4e8c) (identifier-syntax . g4e8b) (quasiquote . g4e88) (syntax-rules . g4e87) (case . g4e82) (or . g4e7e) (and . g4e7d) (if . g4e7c) (letrec* . g4e7b) (letrec . g4e7a) (lambda . g4e77) (quote . g4e74) (letrec-syntax . g4e72) (let-syntax . g4e71) (set! . g4e70) (begin . g4e6e) (define-syntax . g4e6c) (define . g4e6b)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g514a '(rnrs lists) '(6) '() '() '() '((remove . g5045) (remv . g5044) (remp . g5043) (remq . g5042) (partition . g5041) (memv . g5040) (memq . g503f) (memp . g503e) (member . g503d) (exists . g503c) (for-all . g503b) (fold-right . g503a) (fold-left . g5039) (find . g5038) (filter . g5037) (cons* . g5036) (assv . g5035) (assq . g5034) (assp . g5033) (assoc . g5032)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g514b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g50a0) (call-with-input-file . g509f) (write-char . g509e) (write . g509d) (with-output-to-file . g509c) (with-input-from-file . g509b) (read-char . g509a) (read . g5099) (peek-char . g5098) (open-output-file . g5097) (open-input-file . g5096) (newline . g5095) (display . g5094) (close-output-port . g5093) (close-input-port . g5092) (eof-object? . g5091) (eof-object . g5090) (current-error-port . g508f) (current-output-port . g508e) (current-input-port . g508d) (output-port? . g508c) (input-port? . g508b) (make-i/o-write-error . g4b60) (make-i/o-read-error . g4b4b) (make-i/o-port-error . g4c01) (make-i/o-invalid-position-error . g4b77) (make-i/o-filename-error . g4b92) (make-i/o-file-protection-error . g4bab) (make-i/o-file-is-read-only-error . g4bc0) (make-i/o-file-does-not-exist-error . g4bea) (make-i/o-file-already-exists-error . g4bd5) (make-i/o-error . g4b36) (i/o-write-error? . g4b62) (i/o-read-error? . g4b4d) (i/o-port-error? . g4c05) (i/o-invalid-position-error? . g4b7b) (i/o-filename-error? . g4b96) (i/o-file-protection-error? . g4bad) (i/o-file-is-read-only-error? . g4bc2) (i/o-file-does-not-exist-error? . g4bec) (i/o-file-already-exists-error? . g4bd7) (i/o-error? . g4b38) (i/o-error-position . g4b7d) (i/o-error-port . g4c07) (i/o-error-filename . g4b98) (&i/o-port . g4ec8) (&i/o-file-does-not-exist . g4ec7) (&i/o-file-already-exists . g4ec6) (&i/o-file-is-read-only . g4ec5) (&i/o-file-protection . g4ec4) (&i/o-filename . g4ec3) (&i/o-invalid-position . g4ec2) (&i/o-write . g4ec1) (&i/o-read . g4ec0) (&i/o . g4ebf)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g514c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g5061) (utf32->string . g5016) (utf16->string . g5015) (utf8->string . g5014) (uint-list->bytevector . g5013) (u8-list->bytevector . g5012) (string->utf8 . g5011) (string->utf32 . g5010) (string->utf16 . g500f) (sint-list->bytevector . g500e) (native-endianness . g500d) (bytevector? . g500c) (bytevector=? . g500b) (bytevector-uint-set! . g500a) (bytevector-uint-ref . g5009) (bytevector-u8-set! . g5008) (bytevector-u8-ref . g5007) (bytevector-u64-set! . g5006) (bytevector-u64-ref . g5005) (bytevector-u64-native-set! . g5004) (bytevector-u64-native-ref . g5003) (bytevector-u32-set! . g5002) (bytevector-u32-ref . g5001) (bytevector-u32-native-set! . g5000) (bytevector-u32-native-ref . g4fff) (bytevector-u16-set! . g4ffe) (bytevector-u16-ref . g4ffd) (bytevector-u16-native-set! . g4ffc) (bytevector-u16-native-ref . g4ffb) (bytevector-sint-set! . g4ffa) (bytevector-sint-ref . g4ff9) (bytevector-s8-set! . g4ff8) (bytevector-s8-ref . g4ff7) (bytevector-s64-set! . g4ff6) (bytevector-s64-ref . g4ff5) (bytevector-s64-native-set! . g4ff4) (bytevector-s64-native-ref . g4ff3) (bytevector-s32-set! . g4ff2) (bytevector-s32-ref . g4ff1) (bytevector-s32-native-set! . g4ff0) (bytevector-s32-native-ref . g4fef) (bytevector-s16-set! . g4fee) (bytevector-s16-ref . g4fed) (bytevector-s16-native-set! . g4fec) (bytevector-s16-native-ref . g4feb) (bytevector-length . g4fea) (bytevector-ieee-single-ref . g4fe9) (bytevector-ieee-single-set! . g4fe8) (bytevector-ieee-single-native-set! . g4fe7) (bytevector-ieee-single-native-ref . g4fe6) (bytevector-ieee-double-set! . g4fe5) (bytevector-ieee-double-ref . g4fe4) (bytevector-ieee-double-native-set! . g4fe3) (bytevector-ieee-double-native-ref . g4fe2) (bytevector-fill! . g4fe1) (bytevector-copy! . g4fe0) (bytevector-copy . g4fdf) (bytevector->uint-list . g4fde) (bytevector->u8-list . g4fdd) (bytevector->sint-list . g4fdc) (endianness . g4e94)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g514d '(rnrs unicode) '(6) '() '() '() '((string-upcase . g50e8) (string-titlecase . g50e7) (string-normalize-nfkd . g50e6) (string-normalize-nfkc . g50e5) (string-normalize-nfd . g50e4) (string-normalize-nfc . g50e3) (string-foldcase . g50e2) (string-downcase . g50e1) (string-ci>? . g50e0) (string-ci>=? . g50df) (string-ci=? . g50de) (string-ci<? . g50dd) (string-ci<=? . g50dc) (char-whitespace? . g50db) (char-upper-case? . g50da) (char-title-case? . g50d9) (char-numeric? . g50d8) (char-lower-case? . g50d7) (char-general-category . g50d6) (char-upcase . g50d5) (char-titlecase . g50d4) (char-foldcase . g50d3) (char-downcase . g50d2) (char-ci>? . g50d1) (char-ci>=? . g50d0) (char-ci=? . g50cf) (char-ci<? . g50ce) (char-ci<=? . g50cd) (char-alphabetic? . g50cc)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g514e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g502b) (raise-continuable . g502a) (raise . g5029) (guard . g4ea0) (else . g4e98) (=> . g4e97)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g514f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g4f80) (bitwise-reverse-bit-field . g4f7f) (bitwise-length . g4f7e) (bitwise-if . g4f7d) (bitwise-first-bit-set . g4f7c) (bitwise-copy-bit-field . g4f7b) (bitwise-copy-bit . g4f7a) (bitwise-bit-set? . g4f79) (bitwise-bit-field . g4f78) (bitwise-bit-count . g4f77) (bitwise-xor . g4f76) (bitwise-ior . g4f75) (bitwise-and . g4f74) (bitwise-not . g4f73) (bitwise-arithmetic-shift-right . g4f72) (bitwise-arithmetic-shift-left . g4f71) (bitwise-arithmetic-shift . g4f70)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5150 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g4fad) (fxxor . g4fac) (fxrotate-bit-field . g4fab) (fxreverse-bit-field . g4faa) (fxpositive? . g4fa9) (fxodd? . g4fa8) (fxnot . g4fa7) (fxnegative? . g4fa6) (fxmod0 . g4fa5) (fxmod . g4fa4) (fxmin . g4fa3) (fxmax . g4fa2) (fxlength . g4fa1) (fxior . g4fa0) (fxif . g4f9f) (fxfirst-bit-set . g4f9e) (fxeven? . g4f9d) (fxdiv0-and-mod0 . g4f9c) (fxdiv0 . g4f9b) (fxdiv-and-mod . g4f9a) (fxdiv . g4f99) (fxcopy-bit-field . g4f98) (fxcopy-bit . g4f97) (fxbit-set? . g4f96) (fxbit-field . g4f95) (fxbit-count . g4f94) (fxarithmetic-shift-right . g4f93) (fxarithmetic-shift-left . g4f92) (fxarithmetic-shift . g4f91) (fxand . g4f90) (fx>? . g4f8f) (fx>=? . g4f8e) (fx=? . g4f8d) (fx<? . g4f8c) (fx<=? . g4f8b) (fx-/carry . g4f8a) (fx- . g4f89) (fx+/carry . g4f88) (fx+ . g4f87) (fx*/carry . g4f86) (fx* . g4f85) (greatest-fixnum . g4f84) (least-fixnum . g4f83) (fixnum-width . g4f82) (fixnum? . g4f81)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5151 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g4c61) (no-infinities-violation? . g4c4c) (make-no-nans-violation . g4c5f) (make-no-infinities-violation . g4c4a) (real->flonum . g4fdb) (flzero? . g4fda) (fltruncate . g4fd9) (fltan . g4fd8) (flsqrt . g4fd7) (flsin . g4fd6) (flround . g4fd5) (flpositive? . g4fd4) (flonum? . g4fd3) (flodd? . g4fd2) (flnumerator . g4fd1) (flnegative? . g4fd0) (flnan? . g4fcf) (flmod0 . g4fce) (flmod . g4fcd) (flmin . g4fcc) (flmax . g4fcb) (fllog . g4fca) (flinteger? . g4fc9) (flinfinite? . g4fc8) (flfloor . g4fc7) (flfinite? . g4fc6) (flexpt . g4fc5) (flexp . g4fc4) (fleven? . g4fc3) (fldiv0-and-mod0 . g4fc2) (fldiv0 . g4fc1) (fldiv-and-mod . g4fc0) (fldiv . g4fbf) (fldenominator . g4fbe) (flcos . g4fbd) (flceiling . g4fbc) (flatan . g4fbb) (flasin . g4fba) (flacos . g4fb9) (flabs . g4fb8) (fl>? . g4fb7) (fl>=? . g4fb6) (fl=? . g4fb5) (fl<? . g4fb4) (fl<=? . g4fb3) (fl/ . g4fb2) (fl- . g4fb1) (fl+ . g4fb0) (fl* . g4faf) (fixnum->flonum . g4fae) (&no-nans . g4ecc) (&no-infinities . g4ecb)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5152 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g50b5) (string-ci-hash . g50b4) (string-hash . g50b3) (equal-hash . g50b2) (hashtable-equivalence-function . g50b1) (make-hashtable . g50b0) (hashtable-hash-function . g50af) (make-eqv-hashtable . g50ae) (make-eq-hashtable . g50ad) (hashtable? . g50ac) (hashtable-update! . g50ab) (hashtable-size . g50aa) (hashtable-set! . g50a9) (hashtable-ref . g50a8) (hashtable-mutable? . g50a7) (hashtable-keys . g50a6) (hashtable-entries . g50a5) (hashtable-delete! . g50a4) (hashtable-copy . g50a3) (hashtable-contains? . g50a2) (hashtable-clear! . g50a1)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5153 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g5091) (eof-object . g5090) (current-error-port . g508f) (current-output-port . g508e) (current-input-port . g508d) (output-port? . g508c) (input-port? . g508b) (utf-8-codec . g508a) (utf-16-codec . g5089) (transcoder-error-handling-mode . g5088) (transcoder-eol-style . g5087) (transcoder-codec . g5086) (transcoded-port . g5085) (textual-port? . g5084) (string->bytevector . g5083) (standard-output-port . g5082) (standard-input-port . g5081) (standard-error-port . g5080) (set-port-position! . g507f) (put-u8 . g507e) (put-string . g507d) (put-datum . g507c) (put-char . g507b) (put-bytevector . g507a) (port? . g5079) (port-transcoder . g5078) (port-position . g5077) (port-has-set-port-position!? . g5076) (port-has-port-position? . g5075) (port-eof? . g5074) (output-port-buffer-mode . g5073) (open-string-output-port . g5072) (open-string-input-port . g5071) (open-file-output-port . g5070) (open-file-input/output-port . g506f) (open-file-input-port . g506e) (open-bytevector-output-port . g506d) (open-bytevector-input-port . g506c) (native-transcoder . g506b) (native-eol-style . g506a) (make-transcoder . g5069) (latin-1-codec . g5068) (make-i/o-write-error . g4b60) (make-i/o-read-error . g4b4b) (make-i/o-port-error . g4c01) (make-i/o-invalid-position-error . g4b77) (make-i/o-filename-error . g4b92) (make-i/o-file-protection-error . g4bab) (make-i/o-file-is-read-only-error . g4bc0) (make-i/o-file-does-not-exist-error . g4bea) (make-i/o-file-already-exists-error . g4bd5) (make-i/o-error . g4b36) (make-i/o-encoding-error . g4c31) (make-i/o-decoding-error . g4c1a) (make-custom-textual-output-port . g5067) (make-custom-textual-input/output-port . g5066) (make-custom-textual-input-port . g5065) (make-custom-binary-output-port . g5064) (make-custom-binary-input/output-port . g5063) (make-custom-binary-input-port . g5062) (lookahead-u8 . g5060) (lookahead-char . g505f) (i/o-write-error? . g4b62) (i/o-read-error? . g4b4d) (i/o-port-error? . g4c05) (i/o-invalid-position-error? . g4b7b) (i/o-filename-error? . g4b96) (i/o-file-protection-error? . g4bad) (i/o-file-is-read-only-error? . g4bc2) (i/o-file-does-not-exist-error? . g4bec) (i/o-file-already-exists-error? . g4bd7) (i/o-error? . g4b38) (i/o-error-position . g4b7d) (i/o-error-port . g4c07) (i/o-error-filename . g4b98) (i/o-encoding-error? . g4c35) (i/o-encoding-error-char . g4c37) (i/o-decoding-error? . g4c1c) (get-u8 . g505e) (get-string-n! . g505d) (get-string-n . g505c) (get-string-all . g505b) (get-line . g505a) (get-datum . g5059) (get-char . g5058) (get-bytevector-some . g5057) (get-bytevector-n! . g5056) (get-bytevector-n . g5055) (get-bytevector-all . g5054) (flush-output-port . g5053) (close-port . g5052) (call-with-string-output-port . g5031) (call-with-port . g5030) (call-with-bytevector-output-port . g502f) (bytevector->string . g502e) (buffer-mode? . g502d) (binary-port? . g502c) (&i/o-encoding . g4eca) (&i/o-decoding . g4ec9) (&i/o-port . g4ec8) (&i/o-file-does-not-exist . g4ec7) (&i/o-file-already-exists . g4ec6) (&i/o-file-is-read-only . g4ec5) (&i/o-file-protection . g4ec4) (&i/o-filename . g4ec3) (&i/o-invalid-position . g4ec2) (&i/o-write . g4ec1) (&i/o-read . g4ec0) (&i/o . g4ebf) (error-handling-mode . g4ea4) (file-options . g4ea3) (buffer-mode . g4ea2) (eol-style . g4ea1)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5154 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g5028) (enum-set=? . g5027) (enum-set-universe . g5026) (enum-set-union . g5025) (enum-set-subset? . g5024) (enum-set-projection . g5023) (enum-set-member? . g5022) (enum-set-intersection . g5021) (enum-set-indexer . g5020) (enum-set-difference . g501f) (enum-set-constructor . g501e) (enum-set-complement . g501d) (enum-set->list . g501c) (define-enumeration . g4eaf)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5155 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g4aac) (warning? . g4a24) (violation? . g4a63) (undefined-violation? . g4b23) (syntax-violation? . g4b0a) (syntax-violation-subform . g4b0e) (syntax-violation-form . g4b0c) (syntax-violation . g2f9e) (simple-conditions . g501b) (serious-condition? . g4a39) (non-continuable-violation? . g4ac3) (message-condition? . g4a0d) (make-who-condition . g4aa8) (make-warning . g4a22) (make-violation . g4a61) (make-undefined-violation . g4b21) (make-syntax-violation . g4b04) (make-serious-condition . g4a37) (make-non-continuable-violation . g4ac1) (make-message-condition . g4a09) (make-lexical-violation . g4aeb) (make-irritants-condition . g4a8d) (make-implementation-restriction-violation . g4ad6) (make-error . g4a4c) (make-assertion-violation . g4a76) (lexical-violation? . g4aed) (irritants-condition? . g4a91) (implementation-restriction-violation? . g4ad8) (error? . g4a4e) (condition-who . g4aae) (condition-predicate . g501a) (condition-message . g4a0f) (condition-irritants . g4a93) (condition-accessor . g5019) (condition . g5018) (assertion-violation? . g4a78) (condition? . g5017) (&undefined . g4ebe) (&syntax . g4ebd) (&lexical . g4ebc) (&implementation-restriction . g4ebb) (&non-continuable . g4eba) (&who . g4eb9) (&irritants . g4eb8) (&assertion . g4eb7) (&violation . g4eb6) (&error . g4eb5) (&serious . g4eb4) (&warning . g4eb3) (&message . g4eb2) (&condition . g4eb1) (define-condition-type . g4eb0)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5156 '(rnrs records inspection) '(6) '() '() '() '((record? . g50c4) (record-type-uid . g50c3) (record-type-sealed? . g50c2) (record-type-parent . g50c1) (record-type-opaque? . g50c0) (record-type-name . g50bf) (record-type-generative? . g50be) (record-type-field-names . g50bd) (record-rtd . g50bc) (record-field-mutable? . g50bb)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5157 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g50cb) (record-predicate . g50ca) (record-mutator . g50c9) (record-constructor . g50c8) (record-accessor . g50c7) (make-record-type-descriptor . g50c6) (make-record-constructor-descriptor . g50c5)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5158 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g4eae) (parent-rtd . g4ead) (nongenerative . g4eac) (opaque . g4eab) (sealed . g4eaa) (protocol . g4ea9) (parent . g4ea8) (immutable . g4ea7) (mutable . g4ea6) (fields . g4ea5) (record-constructor-descriptor . g4e84) (record-type-descriptor . g4e83)) '() values values '#f '#f '#t '#f) (g2acd@g296c@install-library 'g5159 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . g4c65) (&no-nans-rtd . g4c63) (&no-infinities-rcd . g4c50) (&no-infinities-rtd . g4c4e) (&i/o-encoding-rcd . g4c3b) (&i/o-encoding-rtd . g4c39) (&i/o-decoding-rcd . g4c20) (&i/o-decoding-rtd . g4c1e) (&i/o-port-rcd . g4c0b) (&i/o-port-rtd . g4c09) (&i/o-file-does-not-exist-rcd . g4bf0) (&i/o-file-does-not-exist-rtd . g4bee) (&i/o-file-already-exists-rcd . g4bdb) (&i/o-file-already-exists-rtd . g4bd9) (&i/o-file-is-read-only-rcd . g4bc6) (&i/o-file-is-read-only-rtd . g4bc4) (&i/o-file-protection-rcd . g4bb1) (&i/o-file-protection-rtd . g4baf) (&i/o-filename-rcd . g4b9c) (&i/o-filename-rtd . g4b9a) (&i/o-invalid-position-rcd . g4b81) (&i/o-invalid-position-rtd . g4b7f) (&i/o-write-rcd . g4b66) (&i/o-write-rtd . g4b64) (&i/o-read-rcd . g4b51) (&i/o-read-rtd . g4b4f) (&i/o-rcd . g4b3c) (&i/o-rtd . g4b3a) (&undefined-rcd . g4b27) (&undefined-rtd . g4b25) (&syntax-rcd . g4b12) (&syntax-rtd . g4b10) (&lexical-rcd . g4af1) (&lexical-rtd . g4aef) (&implementation-restriction-rcd . g4adc) (&implementation-restriction-rtd . g4ada) (&non-continuable-rcd . g4ac7) (&non-continuable-rtd . g4ac5) (&who-rcd . g4ab2) (&who-rtd . g4ab0) (&irritants-rcd . g4a97) (&irritants-rtd . g4a95) (&assertion-rcd . g4a7c) (&assertion-rtd . g4a7a) (&violation-rcd . g4a67) (&violation-rtd . g4a65) (&error-rcd . g4a52) (&error-rtd . g4a50) (&serious-rcd . g4a3d) (&serious-rtd . g4a3b) (&warning-rcd . g4a28) (&warning-rtd . g4a26) (&message-rcd . g4a13) (&message-rtd . g4a11) (&condition-rcd . g49b4) (&condition-rtd . g49b2) (syntax-error . g2f9a) (syntax-dispatch . g2eb5) (pretty-print . g5139) (eval-core . g5138) (set-symbol-value! . g5137) (symbol-value . g5136) (gensym . g5135) (void . g5134) (load . g4d72) (interaction-environment . g2faa) (char-ready? . g5133) (regexp? . g5132) (read-line . g5131) (ungensym . g5130) (alist->eq-hash-table . g512f) (assoc-ref . g512e) (print . g512d) (format . g512c) (host-os . g512b) (library-path . g294b) (standard-library-path . g512a) (file-newer? . g5129) (stat-mtime . g5128) (write-to-file . g5127) (file->list . g5126) (file->string . g5125) (digit->integer . g5124) (call-with-string-input-port . g5123) (call-with-string-io . g5122) (string-split . g5121) (bytevector-for-each . g5120) (string->regexp . g511f) (rxmatch . g511e) (regexp-replace-all . g511d) (hashtable-for-each . g511c) (call-process . g511b) (local-tz-offset . g511a) (microseconds . g5119) (readdir . g5118) (set-current-directory! . g5117) (expand-path . g5116) (current-directory . g5115) (%spawn . g5114) (%waitpid . g5113) (%ffi-supported? . g5112) (%ffi-pointer-ref . g5111) (%ffi-pointer->string . g5110) (%ffi-call->string-or-zero . g510f) (%ffi-call->double . g510e) (%ffi-call->void* . g510d) (%ffi-call->void . g510c) (%ffi-call->int . g510b) (%ffi-lookup . g510a) (%ffi-open . g5109) (%fork . g5108) (%pipe . g5107) (p . g5106) (open-output-string . g5105) (get-output-string . g5104) (get-environment-variables . g5103) (get-environment-variable . g5102) (get-timeofday . g5101) (get-command-line . g5100) (sys-display . g50ff) (mosh-executable-path . g50fe) (make-file-options . g50fd) (source-info . g50fc) (make-compiler-instruction . g50fb) (make-instruction . g50fa) (set-source-info! . g50f9) (bignum? . g50f8) (fast-equal? . g50f7) (fasl-read . g50f6) (fasl-write . g50f5) (time-usage . g50f4) (os-constant . g50f3) (make-parameter . g277e) (socket-port . g50f2) (socket-shutdown . g50f1) (socket-close . g50f0) (socket-send . g50ef) (socket-recv! . g50ee) (socket-recv . g50ed) (make-server-socket . g50ec) (make-client-socket . g50eb) (socket-accept . g50ea) (socket? . g50e9) (string-upcase . g50e8) (string-titlecase . g50e7) (string-normalize-nfkd . g50e6) (string-normalize-nfkc . g50e5) (string-normalize-nfd . g50e4) (string-normalize-nfc . g50e3) (string-foldcase . g50e2) (string-downcase . g50e1) (string-ci>? . g50e0) (string-ci>=? . g50df) (string-ci=? . g50de) (string-ci<? . g50dd) (string-ci<=? . g50dc) (char-whitespace? . g50db) (char-upper-case? . g50da) (char-title-case? . g50d9) (char-numeric? . g50d8) (char-lower-case? . g50d7) (char-general-category . g50d6) (char-upcase . g50d5) (char-titlecase . g50d4) (char-foldcase . g50d3) (char-downcase . g50d2) (char-ci>? . g50d1) (char-ci>=? . g50d0) (char-ci=? . g50cf) (char-ci<? . g50ce) (char-ci<=? . g50cd) (char-alphabetic? . g50cc) (make-variable-transformer . g2ce2) (identifier? . g2fa0) (generate-temporaries . g2f8c) (free-identifier=? . g2f8e) (syntax->datum . g2fa4) (datum->syntax . g2fa2) (bound-identifier=? . g2f90) (record-type-descriptor? . g50cb) (record-predicate . g50ca) (record-mutator . g50c9) (record-constructor . g50c8) (record-accessor . g50c7) (make-record-type-descriptor . g50c6) (make-record-constructor-descriptor . g50c5) (record? . g50c4) (record-type-uid . g50c3) (record-type-sealed? . g50c2) (record-type-parent . g50c1) (record-type-opaque? . g50c0) (record-type-name . g50bf) (record-type-generative? . g50be) (record-type-field-names . g50bd) (record-rtd . g50bc) (record-field-mutable? . g50bb) (delete-file . g50ba) (file-exists? . g50b9) (vector-sort! . g50b8) (vector-sort . g50b7) (list-sort . g50b6) (symbol-hash . g50b5) (string-ci-hash . g50b4) (string-hash . g50b3) (equal-hash . g50b2) (hashtable-equivalence-function . g50b1) (make-hashtable . g50b0) (hashtable-hash-function . g50af) (make-eqv-hashtable . g50ae) (make-eq-hashtable . g50ad) (hashtable? . g50ac) (hashtable-update! . g50ab) (hashtable-size . g50aa) (hashtable-set! . g50a9) (hashtable-ref . g50a8) (hashtable-mutable? . g50a7) (hashtable-keys . g50a6) (hashtable-entries . g50a5) (hashtable-delete! . g50a4) (hashtable-copy . g50a3) (hashtable-contains? . g50a2) (hashtable-clear! . g50a1) (call-with-output-file . g50a0) (call-with-input-file . g509f) (write-char . g509e) (write . g509d) (with-output-to-file . g509c) (with-input-from-file . g509b) (read-char . g509a) (read . g5099) (peek-char . g5098) (open-output-file . g5097) (open-input-file . g5096) (newline . g5095) (display . g5094) (close-output-port . g5093) (close-input-port . g5092) (eof-object? . g5091) (eof-object . g5090) (current-error-port . g508f) (current-output-port . g508e) (current-input-port . g508d) (output-port? . g508c) (input-port? . g508b) (utf-8-codec . g508a) (utf-16-codec . g5089) (transcoder-error-handling-mode . g5088) (transcoder-eol-style . g5087) (transcoder-codec . g5086) (transcoded-port . g5085) (textual-port? . g5084) (string->bytevector . g5083) (standard-output-port . g5082) (standard-input-port . g5081) (standard-error-port . g5080) (set-port-position! . g507f) (put-u8 . g507e) (put-string . g507d) (put-datum . g507c) (put-char . g507b) (put-bytevector . g507a) (port? . g5079) (port-transcoder . g5078) (port-position . g5077) (port-has-set-port-position!? . g5076) (port-has-port-position? . g5075) (port-eof? . g5074) (output-port-buffer-mode . g5073) (open-string-output-port . g5072) (open-string-input-port . g5071) (open-file-output-port . g5070) (open-file-input/output-port . g506f) (open-file-input-port . g506e) (open-bytevector-output-port . g506d) (open-bytevector-input-port . g506c) (native-transcoder . g506b) (native-eol-style . g506a) (make-transcoder . g5069) (latin-1-codec . g5068) (make-i/o-write-error . g4b60) (make-i/o-read-error . g4b4b) (make-i/o-port-error . g4c01) (make-i/o-invalid-position-error . g4b77) (make-i/o-filename-error . g4b92) (make-i/o-file-protection-error . g4bab) (make-i/o-file-is-read-only-error . g4bc0) (make-i/o-file-does-not-exist-error . g4bea) (make-i/o-file-already-exists-error . g4bd5) (make-i/o-error . g4b36) (make-i/o-encoding-error . g4c31) (make-i/o-decoding-error . g4c1a) (make-custom-textual-output-port . g5067) (make-custom-textual-input/output-port . g5066) (make-custom-textual-input-port . g5065) (make-custom-binary-output-port . g5064) (make-custom-binary-input/output-port . g5063) (make-custom-binary-input-port . g5062) (make-bytevector . g5061) (lookahead-u8 . g5060) (lookahead-char . g505f) (i/o-write-error? . g4b62) (i/o-read-error? . g4b4d) (i/o-port-error? . g4c05) (i/o-invalid-position-error? . g4b7b) (i/o-filename-error? . g4b96) (i/o-file-protection-error? . g4bad) (i/o-file-is-read-only-error? . g4bc2) (i/o-file-does-not-exist-error? . g4bec) (i/o-file-already-exists-error? . g4bd7) (i/o-error? . g4b38) (i/o-error-position . g4b7d) (i/o-error-port . g4c07) (i/o-error-filename . g4b98) (i/o-encoding-error? . g4c35) (i/o-encoding-error-char . g4c37) (i/o-decoding-error? . g4c1c) (get-u8 . g505e) (get-string-n! . g505d) (get-string-n . g505c) (get-string-all . g505b) (get-line . g505a) (get-datum . g5059) (get-char . g5058) (get-bytevector-some . g5057) (get-bytevector-n! . g5056) (get-bytevector-n . g5055) (get-bytevector-all . g5054) (flush-output-port . g5053) (close-port . g5052) (scheme-report-environment . g2f7a) (quotient . g5051) (null-environment . g2f78) (remainder . g5050) (modulo . g504f) (inexact->exact . g504e) (force . g504d) (exact->inexact . g504c) (make-promise . g504b) (exit . g504a) (command-line . g4d6c) (string-fill! . g5049) (string-set! . g5048) (set-cdr! . g5047) (set-car! . g5046) (remove . g5045) (remv . g5044) (remp . g5043) (remq . g5042) (partition . g5041) (memv . g5040) (memq . g503f) (memp . g503e) (member . g503d) (exists . g503c) (for-all . g503b) (fold-right . g503a) (fold-left . g5039) (find . g5038) (filter . g5037) (cons* . g5036) (assv . g5035) (assq . g5034) (assp . g5033) (assoc . g5032) (call-with-string-output-port . g5031) (call-with-port . g5030) (call-with-bytevector-output-port . g502f) (bytevector->string . g502e) (buffer-mode? . g502d) (binary-port? . g502c) (with-exception-handler . g502b) (raise-continuable . g502a) (raise . g5029) (eval . g2f7e) (environment . g2f76) (make-enumeration . g5028) (enum-set=? . g5027) (enum-set-universe . g5026) (enum-set-union . g5025) (enum-set-subset? . g5024) (enum-set-projection . g5023) (enum-set-member? . g5022) (enum-set-intersection . g5021) (enum-set-indexer . g5020) (enum-set-difference . g501f) (enum-set-constructor . g501e) (enum-set-complement . g501d) (enum-set->list . g501c) (who-condition? . g4aac) (warning? . g4a24) (violation? . g4a63) (undefined-violation? . g4b23) (syntax-violation? . g4b0a) (syntax-violation-subform . g4b0e) (syntax-violation-form . g4b0c) (syntax-violation . g2f9e) (simple-conditions . g501b) (serious-condition? . g4a39) (non-continuable-violation? . g4ac3) (message-condition? . g4a0d) (make-who-condition . g4aa8) (make-warning . g4a22) (make-violation . g4a61) (make-undefined-violation . g4b21) (make-syntax-violation . g4b04) (make-serious-condition . g4a37) (make-non-continuable-violation . g4ac1) (make-message-condition . g4a09) (make-lexical-violation . g4aeb) (make-irritants-condition . g4a8d) (make-implementation-restriction-violation . g4ad6) (make-error . g4a4c) (make-assertion-violation . g4a76) (lexical-violation? . g4aed) (irritants-condition? . g4a91) (implementation-restriction-violation? . g4ad8) (error? . g4a4e) (condition-who . g4aae) (condition-predicate . g501a) (condition-message . g4a0f) (condition-irritants . g4a93) (condition-accessor . g5019) (condition . g5018) (assertion-violation? . g4a78) (condition? . g5017) (utf32->string . g5016) (utf16->string . g5015) (utf8->string . g5014) (uint-list->bytevector . g5013) (u8-list->bytevector . g5012) (string->utf8 . g5011) (string->utf32 . g5010) (string->utf16 . g500f) (sint-list->bytevector . g500e) (native-endianness . g500d) (bytevector? . g500c) (bytevector=? . g500b) (bytevector-uint-set! . g500a) (bytevector-uint-ref . g5009) (bytevector-u8-set! . g5008) (bytevector-u8-ref . g5007) (bytevector-u64-set! . g5006) (bytevector-u64-ref . g5005) (bytevector-u64-native-set! . g5004) (bytevector-u64-native-ref . g5003) (bytevector-u32-set! . g5002) (bytevector-u32-ref . g5001) (bytevector-u32-native-set! . g5000) (bytevector-u32-native-ref . g4fff) (bytevector-u16-set! . g4ffe) (bytevector-u16-ref . g4ffd) (bytevector-u16-native-set! . g4ffc) (bytevector-u16-native-ref . g4ffb) (bytevector-sint-set! . g4ffa) (bytevector-sint-ref . g4ff9) (bytevector-s8-set! . g4ff8) (bytevector-s8-ref . g4ff7) (bytevector-s64-set! . g4ff6) (bytevector-s64-ref . g4ff5) (bytevector-s64-native-set! . g4ff4) (bytevector-s64-native-ref . g4ff3) (bytevector-s32-set! . g4ff2) (bytevector-s32-ref . g4ff1) (bytevector-s32-native-set! . g4ff0) (bytevector-s32-native-ref . g4fef) (bytevector-s16-set! . g4fee) (bytevector-s16-ref . g4fed) (bytevector-s16-native-set! . g4fec) (bytevector-s16-native-ref . g4feb) (bytevector-length . g4fea) (bytevector-ieee-single-ref . g4fe9) (bytevector-ieee-single-set! . g4fe8) (bytevector-ieee-single-native-set! . g4fe7) (bytevector-ieee-single-native-ref . g4fe6) (bytevector-ieee-double-set! . g4fe5) (bytevector-ieee-double-ref . g4fe4) (bytevector-ieee-double-native-set! . g4fe3) (bytevector-ieee-double-native-ref . g4fe2) (bytevector-fill! . g4fe1) (bytevector-copy! . g4fe0) (bytevector-copy . g4fdf) (bytevector->uint-list . g4fde) (bytevector->u8-list . g4fdd) (bytevector->sint-list . g4fdc) (no-nans-violation? . g4c61) (no-infinities-violation? . g4c4c) (make-no-nans-violation . g4c5f) (make-no-infinities-violation . g4c4a) (real->flonum . g4fdb) (flzero? . g4fda) (fltruncate . g4fd9) (fltan . g4fd8) (flsqrt . g4fd7) (flsin . g4fd6) (flround . g4fd5) (flpositive? . g4fd4) (flonum? . g4fd3) (flodd? . g4fd2) (flnumerator . g4fd1) (flnegative? . g4fd0) (flnan? . g4fcf) (flmod0 . g4fce) (flmod . g4fcd) (flmin . g4fcc) (flmax . g4fcb) (fllog . g4fca) (flinteger? . g4fc9) (flinfinite? . g4fc8) (flfloor . g4fc7) (flfinite? . g4fc6) (flexpt . g4fc5) (flexp . g4fc4) (fleven? . g4fc3) (fldiv0-and-mod0 . g4fc2) (fldiv0 . g4fc1) (fldiv-and-mod . g4fc0) (fldiv . g4fbf) (fldenominator . g4fbe) (flcos . g4fbd) (flceiling . g4fbc) (flatan . g4fbb) (flasin . g4fba) (flacos . g4fb9) (flabs . g4fb8) (fl>? . g4fb7) (fl>=? . g4fb6) (fl=? . g4fb5) (fl<? . g4fb4) (fl<=? . g4fb3) (fl/ . g4fb2) (fl- . g4fb1) (fl+ . g4fb0) (fl* . g4faf) (fixnum->flonum . g4fae) (fxzero? . g4fad) (fxxor . g4fac) (fxrotate-bit-field . g4fab) (fxreverse-bit-field . g4faa) (fxpositive? . g4fa9) (fxodd? . g4fa8) (fxnot . g4fa7) (fxnegative? . g4fa6) (fxmod0 . g4fa5) (fxmod . g4fa4) (fxmin . g4fa3) (fxmax . g4fa2) (fxlength . g4fa1) (fxior . g4fa0) (fxif . g4f9f) (fxfirst-bit-set . g4f9e) (fxeven? . g4f9d) (fxdiv0-and-mod0 . g4f9c) (fxdiv0 . g4f9b) (fxdiv-and-mod . g4f9a) (fxdiv . g4f99) (fxcopy-bit-field . g4f98) (fxcopy-bit . g4f97) (fxbit-set? . g4f96) (fxbit-field . g4f95) (fxbit-count . g4f94) (fxarithmetic-shift-right . g4f93) (fxarithmetic-shift-left . g4f92) (fxarithmetic-shift . g4f91) (fxand . g4f90) (fx>? . g4f8f) (fx>=? . g4f8e) (fx=? . g4f8d) (fx<? . g4f8c) (fx<=? . g4f8b) (fx-/carry . g4f8a) (fx- . g4f89) (fx+/carry . g4f88) (fx+ . g4f87) (fx*/carry . g4f86) (fx* . g4f85) (greatest-fixnum . g4f84) (least-fixnum . g4f83) (fixnum-width . g4f82) (fixnum? . g4f81) (bitwise-rotate-bit-field . g4f80) (bitwise-reverse-bit-field . g4f7f) (bitwise-length . g4f7e) (bitwise-if . g4f7d) (bitwise-first-bit-set . g4f7c) (bitwise-copy-bit-field . g4f7b) (bitwise-copy-bit . g4f7a) (bitwise-bit-set? . g4f79) (bitwise-bit-field . g4f78) (bitwise-bit-count . g4f77) (bitwise-xor . g4f76) (bitwise-ior . g4f75) (bitwise-and . g4f74) (bitwise-not . g4f73) (bitwise-arithmetic-shift-right . g4f72) (bitwise-arithmetic-shift-left . g4f71) (bitwise-arithmetic-shift . g4f70) (zero? . g4f6f) (vector? . g4f6e) (vector-set! . g4f6d) (vector-ref . g4f6c) (vector-map . g4f6b) (vector-length . g4f6a) (vector-for-each . g4f69) (vector-fill! . g4f68) (vector->list . g4f67) (vector . g4f66) (values . g4f65) (truncate . g4f64) (tan . g4f63) (symbol? . g4f62) (symbol=? . g4f61) (symbol->string . g4f60) (substring . g4f5f) (string? . g4f5e) (string>? . g4f5d) (string>=? . g4f5c) (string=? . g4f5b) (string<? . g4f5a) (string<=? . g4f59) (string-ref . g4f58) (string-length . g4f57) (string-for-each . g4f56) (string-copy . g4f55) (string-append . g4f54) (string->symbol . g4f53) (string->number . g4f52) (string->list . g4f51) (string . g4f50) (sqrt . g4f4f) (sin . g4f4e) (round . g4f4d) (reverse . g4f4c) (real? . g4f4b) (real-valued? . g4f4a) (real-part . g4f49) (rationalize . g4f48) (rational? . g4f47) (rational-valued? . g4f46) (procedure? . g4f45) (positive? . g4f44) (pair? . g4f43) (odd? . g4f42) (numerator . g4f41) (number? . g4f40) (number->string . g4f3f) (null? . g4f3e) (not . g4f3d) (negative? . g4f3c) (nan? . g4f3b) (min . g4f3a) (max . g4f39) (map . g4f38) (make-vector . g4f37) (make-string . g4f36) (make-rectangular . g4f35) (make-polar . g4f34) (magnitude . g4f33) (log . g4f32) (list? . g4f31) (list-tail . g4f30) (list-ref . g4f2f) (list->vector . g4f2e) (list->string . g4f2d) (list . g4f2c) (length . g4f2b) (lcm . g4f2a) (integer? . g4f29) (integer-valued? . g4f28) (integer->char . g4f27) (infinite? . g4f26) (inexact? . g4f25) (inexact . g4f24) (imag-part . g4f23) (gcd . g4f22) (for-each . g4f21) (floor . g4f20) (finite? . g4f1f) (expt . g4f1e) (exp . g4f1d) (exact? . g4f1c) (exact-integer-sqrt . g4f1b) (exact . g4f1a) (even? . g4f19) (error . g4f18) (eqv? . g4f17) (equal? . g4f16) (eq? . g4f15) (dynamic-wind . g4f14) (div0-and-mod0 . g4f13) (mod0 . g4f12) (div0 . g4f11) (div-and-mod . g4f10) (mod . g4f0f) (div . g4f0e) (denominator . g4f0d) (cos . g4f0c) (cons . g4f0b) (complex? . g4f0a) (char? . g4f09) (char>? . g4f08) (char>=? . g4f07) (char=? . g4f06) (char<? . g4f05) (char<=? . g4f04) (char->integer . g4f03) (ceiling . g4f02) (call-with-values . g4f01) (call/cc . g4f00) (call-with-current-continuation . g4eff) (cddddr . g4efe) (cdddar . g4efd) (cddadr . g4efc) (cddaar . g4efb) (cdaddr . g4efa) (cdadar . g4ef9) (cdaadr . g4ef8) (cdaaar . g4ef7) (cadddr . g4ef6) (caddar . g4ef5) (cadadr . g4ef4) (cadaar . g4ef3) (caaddr . g4ef2) (caadar . g4ef1) (caaadr . g4ef0) (caaaar . g4eef) (cdddr . g4eee) (cddar . g4eed) (cdadr . g4eec) (cdaar . g4eeb) (caddr . g4eea) (cadar . g4ee9) (caadr . g4ee8) (caaar . g4ee7) (cddr . g4ee6) (cdar . g4ee5) (cadr . g4ee4) (caar . g4ee3) (cdr . g4ee2) (car . g4ee1) (boolean? . g4ee0) (boolean=? . g4edf) (atan . g4ede) (assertion-violation . g4edd) (assertion-error . g2f98) (asin . g4edc) (apply . g4edb) (append . g4eda) (angle . g4ed9) (acos . g4ed8) (abs . g4ed7) (/ . g4ed6) (* . g4ed5) (- . g4ed4) (+ . g4ed3) (>= . g4ed2) (> . g4ed1) (= . g4ed0) (<= . g4ecf) (< . g4ece) (library . g4ecd) (&no-nans . g4ecc) (&no-infinities . g4ecb) (&i/o-encoding . g4eca) (&i/o-decoding . g4ec9) (&i/o-port . g4ec8) (&i/o-file-does-not-exist . g4ec7) (&i/o-file-already-exists . g4ec6) (&i/o-file-is-read-only . g4ec5) (&i/o-file-protection . g4ec4) (&i/o-filename . g4ec3) (&i/o-invalid-position . g4ec2) (&i/o-write . g4ec1) (&i/o-read . g4ec0) (&i/o . g4ebf) (&undefined . g4ebe) (&syntax . g4ebd) (&lexical . g4ebc) (&implementation-restriction . g4ebb) (&non-continuable . g4eba) (&who . g4eb9) (&irritants . g4eb8) (&assertion . g4eb7) (&violation . g4eb6) (&error . g4eb5) (&serious . g4eb4) (&warning . g4eb3) (&message . g4eb2) (&condition . g4eb1) (define-condition-type . g4eb0) (define-enumeration . g4eaf) (define-record-type . g4eae) (parent-rtd . g4ead) (nongenerative . g4eac) (opaque . g4eab) (sealed . g4eaa) (protocol . g4ea9) (parent . g4ea8) (immutable . g4ea7) (mutable . g4ea6) (fields . g4ea5) (error-handling-mode . g4ea4) (file-options . g4ea3) (buffer-mode . g4ea2) (eol-style . g4ea1) (guard . g4ea0) (trace-define . g4e9f) (trace-lambda . g4e9e) (unsyntax-splicing . g4e9d) (unsyntax . g4e9c) (unquote-splicing . g4e9b) (unquote . g4e9a) (_ . g4e99) (else . g4e98) (=> . g4e97) (... . g4e96) (assert . g4e95) (endianness . g4e94) (delay . g4e93) (time . g4e92) (do . g4e91) (cond . g4e90) (let* . g4e8f) (let . g4e8e) (let*-values . g4e8d) (let-values . g4e8c) (identifier-syntax . g4e8b) (with-syntax . g4e8a) (quasisyntax . g4e89) (quasiquote . g4e88) (syntax-rules . g4e87) (include . g4e86) (define-struct . g4e85) (record-constructor-descriptor . g4e84) (record-type-descriptor . g4e83) (case . g4e82) (parameterize . g4e81) (unless . g4e80) (when . g4e7f) (or . g4e7e) (and . g4e7d) (if . g4e7c) (letrec* . g4e7b) (letrec . g4e7a) (type-descriptor . g4e79) (case-lambda . g4e78) (lambda . g4e77) (syntax . g4e76) (syntax-case . g4e75) (quote . g4e74) (foreign-call . g4e73) (letrec-syntax . g4e72) (let-syntax . g4e71) (set! . g4e70) (import . g4e6f) (begin . g4e6e) (module . g4e6d) (define-syntax . g4e6c) (define . g4e6b)) '((g4c65 core-prim . &no-nans-rcd) (g4c63 core-prim . &no-nans-rtd) (g4c50 core-prim . &no-infinities-rcd) (g4c4e core-prim . &no-infinities-rtd) (g4c3b core-prim . &i/o-encoding-rcd) (g4c39 core-prim . &i/o-encoding-rtd) (g4c20 core-prim . &i/o-decoding-rcd) (g4c1e core-prim . &i/o-decoding-rtd) (g4c0b core-prim . &i/o-port-rcd) (g4c09 core-prim . &i/o-port-rtd) (g4bf0 core-prim . &i/o-file-does-not-exist-rcd) (g4bee core-prim . &i/o-file-does-not-exist-rtd) (g4bdb core-prim . &i/o-file-already-exists-rcd) (g4bd9 core-prim . &i/o-file-already-exists-rtd) (g4bc6 core-prim . &i/o-file-is-read-only-rcd) (g4bc4 core-prim . &i/o-file-is-read-only-rtd) (g4bb1 core-prim . &i/o-file-protection-rcd) (g4baf core-prim . &i/o-file-protection-rtd) (g4b9c core-prim . &i/o-filename-rcd) (g4b9a core-prim . &i/o-filename-rtd) (g4b81 core-prim . &i/o-invalid-position-rcd) (g4b7f core-prim . &i/o-invalid-position-rtd) (g4b66 core-prim . &i/o-write-rcd) (g4b64 core-prim . &i/o-write-rtd) (g4b51 core-prim . &i/o-read-rcd) (g4b4f core-prim . &i/o-read-rtd) (g4b3c core-prim . &i/o-rcd) (g4b3a core-prim . &i/o-rtd) (g4b27 core-prim . &undefined-rcd) (g4b25 core-prim . &undefined-rtd) (g4b12 core-prim . &syntax-rcd) (g4b10 core-prim . &syntax-rtd) (g4af1 core-prim . &lexical-rcd) (g4aef core-prim . &lexical-rtd) (g4adc core-prim . &implementation-restriction-rcd) (g4ada core-prim . &implementation-restriction-rtd) (g4ac7 core-prim . &non-continuable-rcd) (g4ac5 core-prim . &non-continuable-rtd) (g4ab2 core-prim . &who-rcd) (g4ab0 core-prim . &who-rtd) (g4a97 core-prim . &irritants-rcd) (g4a95 core-prim . &irritants-rtd) (g4a7c core-prim . &assertion-rcd) (g4a7a core-prim . &assertion-rtd) (g4a67 core-prim . &violation-rcd) (g4a65 core-prim . &violation-rtd) (g4a52 core-prim . &error-rcd) (g4a50 core-prim . &error-rtd) (g4a3d core-prim . &serious-rcd) (g4a3b core-prim . &serious-rtd) (g4a28 core-prim . &warning-rcd) (g4a26 core-prim . &warning-rtd) (g4a13 core-prim . &message-rcd) (g4a11 core-prim . &message-rtd) (g49b4 core-prim . &condition-rcd) (g49b2 core-prim . &condition-rtd) (g2f9a core-prim . syntax-error) (g2eb5 core-prim . syntax-dispatch) (g5139 core-prim . pretty-print) (g5138 core-prim . eval-core) (g5137 core-prim . set-symbol-value!) (g5136 core-prim . symbol-value) (g5135 core-prim . gensym) (g5134 core-prim . void) (g4d72 core-prim . load) (g2faa core-prim . interaction-environment) (g5133 core-prim . char-ready?) (g5132 core-prim . regexp?) (g5131 core-prim . read-line) (g5130 core-prim . ungensym) (g512f core-prim . alist->eq-hash-table) (g512e core-prim . assoc-ref) (g512d core-prim . print) (g512c core-prim . format) (g512b core-prim . host-os) (g294b core-prim . library-path) (g512a core-prim . standard-library-path) (g5129 core-prim . file-newer?) (g5128 core-prim . stat-mtime) (g5127 core-prim . write-to-file) (g5126 core-prim . file->list) (g5125 core-prim . file->string) (g5124 core-prim . digit->integer) (g5123 core-prim . call-with-string-input-port) (g5122 core-prim . call-with-string-io) (g5121 core-prim . string-split) (g5120 core-prim . bytevector-for-each) (g511f core-prim . string->regexp) (g511e core-prim . rxmatch) (g511d core-prim . regexp-replace-all) (g511c core-prim . hashtable-for-each) (g511b core-prim . call-process) (g511a core-prim . local-tz-offset) (g5119 core-prim . microseconds) (g5118 core-prim . readdir) (g5117 core-prim . set-current-directory!) (g5116 core-prim . expand-path) (g5115 core-prim . current-directory) (g5114 core-prim . %spawn) (g5113 core-prim . %waitpid) (g5112 core-prim . %ffi-supported?) (g5111 core-prim . %ffi-pointer-ref) (g5110 core-prim . %ffi-pointer->string) (g510f core-prim . %ffi-call->string-or-zero) (g510e core-prim . %ffi-call->double) (g510d core-prim . %ffi-call->void*) (g510c core-prim . %ffi-call->void) (g510b core-prim . %ffi-call->int) (g510a core-prim . %ffi-lookup) (g5109 core-prim . %ffi-open) (g5108 core-prim . %fork) (g5107 core-prim . %pipe) (g5106 core-prim . p) (g5105 core-prim . open-output-string) (g5104 core-prim . get-output-string) (g5103 core-prim . get-environment-variables) (g5102 core-prim . get-environment-variable) (g5101 core-prim . get-timeofday) (g5100 core-prim . get-command-line) (g50ff core-prim . sys-display) (g50fe core-prim . mosh-executable-path) (g50fd core-prim . make-file-options) (g50fc core-prim . source-info) (g50fb core-prim . make-compiler-instruction) (g50fa core-prim . make-instruction) (g50f9 core-prim . set-source-info!) (g50f8 core-prim . bignum?) (g50f7 core-prim . fast-equal?) (g50f6 core-prim . fasl-read) (g50f5 core-prim . fasl-write) (g50f4 core-prim . time-usage) (g50f3 core-prim . os-constant) (g277e core-prim . make-parameter) (g50f2 core-prim . socket-port) (g50f1 core-prim . socket-shutdown) (g50f0 core-prim . socket-close) (g50ef core-prim . socket-send) (g50ee core-prim . socket-recv!) (g50ed core-prim . socket-recv) (g50ec core-prim . make-server-socket) (g50eb core-prim . make-client-socket) (g50ea core-prim . socket-accept) (g50e9 core-prim . socket?) (g50e8 core-prim . string-upcase) (g50e7 core-prim . string-titlecase) (g50e6 core-prim . string-normalize-nfkd) (g50e5 core-prim . string-normalize-nfkc) (g50e4 core-prim . string-normalize-nfd) (g50e3 core-prim . string-normalize-nfc) (g50e2 core-prim . string-foldcase) (g50e1 core-prim . string-downcase) (g50e0 core-prim . string-ci>?) (g50df core-prim . string-ci>=?) (g50de core-prim . string-ci=?) (g50dd core-prim . string-ci<?) (g50dc core-prim . string-ci<=?) (g50db core-prim . char-whitespace?) (g50da core-prim . char-upper-case?) (g50d9 core-prim . char-title-case?) (g50d8 core-prim . char-numeric?) (g50d7 core-prim . char-lower-case?) (g50d6 core-prim . char-general-category) (g50d5 core-prim . char-upcase) (g50d4 core-prim . char-titlecase) (g50d3 core-prim . char-foldcase) (g50d2 core-prim . char-downcase) (g50d1 core-prim . char-ci>?) (g50d0 core-prim . char-ci>=?) (g50cf core-prim . char-ci=?) (g50ce core-prim . char-ci<?) (g50cd core-prim . char-ci<=?) (g50cc core-prim . char-alphabetic?) (g2ce2 core-prim . make-variable-transformer) (g2fa0 core-prim . identifier?) (g2f8c core-prim . generate-temporaries) (g2f8e core-prim . free-identifier=?) (g2fa4 core-prim . syntax->datum) (g2fa2 core-prim . datum->syntax) (g2f90 core-prim . bound-identifier=?) (g50cb core-prim . record-type-descriptor?) (g50ca core-prim . record-predicate) (g50c9 core-prim . record-mutator) (g50c8 core-prim . record-constructor) (g50c7 core-prim . record-accessor) (g50c6 core-prim . make-record-type-descriptor) (g50c5 core-prim . make-record-constructor-descriptor) (g50c4 core-prim . record?) (g50c3 core-prim . record-type-uid) (g50c2 core-prim . record-type-sealed?) (g50c1 core-prim . record-type-parent) (g50c0 core-prim . record-type-opaque?) (g50bf core-prim . record-type-name) (g50be core-prim . record-type-generative?) (g50bd core-prim . record-type-field-names) (g50bc core-prim . record-rtd) (g50bb core-prim . record-field-mutable?) (g50ba core-prim . delete-file) (g50b9 core-prim . file-exists?) (g50b8 core-prim . vector-sort!) (g50b7 core-prim . vector-sort) (g50b6 core-prim . list-sort) (g50b5 core-prim . symbol-hash) (g50b4 core-prim . string-ci-hash) (g50b3 core-prim . string-hash) (g50b2 core-prim . equal-hash) (g50b1 core-prim . hashtable-equivalence-function) (g50b0 core-prim . make-hashtable) (g50af core-prim . hashtable-hash-function) (g50ae core-prim . make-eqv-hashtable) (g50ad core-prim . make-eq-hashtable) (g50ac core-prim . hashtable?) (g50ab core-prim . hashtable-update!) (g50aa core-prim . hashtable-size) (g50a9 core-prim . hashtable-set!) (g50a8 core-prim . hashtable-ref) (g50a7 core-prim . hashtable-mutable?) (g50a6 core-prim . hashtable-keys) (g50a5 core-prim . hashtable-entries) (g50a4 core-prim . hashtable-delete!) (g50a3 core-prim . hashtable-copy) (g50a2 core-prim . hashtable-contains?) (g50a1 core-prim . hashtable-clear!) (g50a0 core-prim . call-with-output-file) (g509f core-prim . call-with-input-file) (g509e core-prim . write-char) (g509d core-prim . write) (g509c core-prim . with-output-to-file) (g509b core-prim . with-input-from-file) (g509a core-prim . read-char) (g5099 core-prim . read) (g5098 core-prim . peek-char) (g5097 core-prim . open-output-file) (g5096 core-prim . open-input-file) (g5095 core-prim . newline) (g5094 core-prim . display) (g5093 core-prim . close-output-port) (g5092 core-prim . close-input-port) (g5091 core-prim . eof-object?) (g5090 core-prim . eof-object) (g508f core-prim . current-error-port) (g508e core-prim . current-output-port) (g508d core-prim . current-input-port) (g508c core-prim . output-port?) (g508b core-prim . input-port?) (g508a core-prim . utf-8-codec) (g5089 core-prim . utf-16-codec) (g5088 core-prim . transcoder-error-handling-mode) (g5087 core-prim . transcoder-eol-style) (g5086 core-prim . transcoder-codec) (g5085 core-prim . transcoded-port) (g5084 core-prim . textual-port?) (g5083 core-prim . string->bytevector) (g5082 core-prim . standard-output-port) (g5081 core-prim . standard-input-port) (g5080 core-prim . standard-error-port) (g507f core-prim . set-port-position!) (g507e core-prim . put-u8) (g507d core-prim . put-string) (g507c core-prim . put-datum) (g507b core-prim . put-char) (g507a core-prim . put-bytevector) (g5079 core-prim . port?) (g5078 core-prim . port-transcoder) (g5077 core-prim . port-position) (g5076 core-prim . port-has-set-port-position!?) (g5075 core-prim . port-has-port-position?) (g5074 core-prim . port-eof?) (g5073 core-prim . output-port-buffer-mode) (g5072 core-prim . open-string-output-port) (g5071 core-prim . open-string-input-port) (g5070 core-prim . open-file-output-port) (g506f core-prim . open-file-input/output-port) (g506e core-prim . open-file-input-port) (g506d core-prim . open-bytevector-output-port) (g506c core-prim . open-bytevector-input-port) (g506b core-prim . native-transcoder) (g506a core-prim . native-eol-style) (g5069 core-prim . make-transcoder) (g5068 core-prim . latin-1-codec) (g4b60 core-prim . make-i/o-write-error) (g4b4b core-prim . make-i/o-read-error) (g4c01 core-prim . make-i/o-port-error) (g4b77 core-prim . make-i/o-invalid-position-error) (g4b92 core-prim . make-i/o-filename-error) (g4bab core-prim . make-i/o-file-protection-error) (g4bc0 core-prim . make-i/o-file-is-read-only-error) (g4bea core-prim . make-i/o-file-does-not-exist-error) (g4bd5 core-prim . make-i/o-file-already-exists-error) (g4b36 core-prim . make-i/o-error) (g4c31 core-prim . make-i/o-encoding-error) (g4c1a core-prim . make-i/o-decoding-error) (g5067 core-prim . make-custom-textual-output-port) (g5066 core-prim . make-custom-textual-input/output-port) (g5065 core-prim . make-custom-textual-input-port) (g5064 core-prim . make-custom-binary-output-port) (g5063 core-prim . make-custom-binary-input/output-port) (g5062 core-prim . make-custom-binary-input-port) (g5061 core-prim . make-bytevector) (g5060 core-prim . lookahead-u8) (g505f core-prim . lookahead-char) (g4b62 core-prim . i/o-write-error?) (g4b4d core-prim . i/o-read-error?) (g4c05 core-prim . i/o-port-error?) (g4b7b core-prim . i/o-invalid-position-error?) (g4b96 core-prim . i/o-filename-error?) (g4bad core-prim . i/o-file-protection-error?) (g4bc2 core-prim . i/o-file-is-read-only-error?) (g4bec core-prim . i/o-file-does-not-exist-error?) (g4bd7 core-prim . i/o-file-already-exists-error?) (g4b38 core-prim . i/o-error?) (g4b7d core-prim . i/o-error-position) (g4c07 core-prim . i/o-error-port) (g4b98 core-prim . i/o-error-filename) (g4c35 core-prim . i/o-encoding-error?) (g4c37 core-prim . i/o-encoding-error-char) (g4c1c core-prim . i/o-decoding-error?) (g505e core-prim . get-u8) (g505d core-prim . get-string-n!) (g505c core-prim . get-string-n) (g505b core-prim . get-string-all) (g505a core-prim . get-line) (g5059 core-prim . get-datum) (g5058 core-prim . get-char) (g5057 core-prim . get-bytevector-some) (g5056 core-prim . get-bytevector-n!) (g5055 core-prim . get-bytevector-n) (g5054 core-prim . get-bytevector-all) (g5053 core-prim . flush-output-port) (g5052 core-prim . close-port) (g2f7a core-prim . scheme-report-environment) (g5051 core-prim . quotient) (g2f78 core-prim . null-environment) (g5050 core-prim . remainder) (g504f core-prim . modulo) (g504e core-prim . inexact->exact) (g504d core-prim . force) (g504c core-prim . exact->inexact) (g504b core-prim . make-promise) (g504a core-prim . exit) (g4d6c core-prim . command-line) (g5049 core-prim . string-fill!) (g5048 core-prim . string-set!) (g5047 core-prim . set-cdr!) (g5046 core-prim . set-car!) (g5045 core-prim . remove) (g5044 core-prim . remv) (g5043 core-prim . remp) (g5042 core-prim . remq) (g5041 core-prim . partition) (g5040 core-prim . memv) (g503f core-prim . memq) (g503e core-prim . memp) (g503d core-prim . member) (g503c core-prim . exists) (g503b core-prim . for-all) (g503a core-prim . fold-right) (g5039 core-prim . fold-left) (g5038 core-prim . find) (g5037 core-prim . filter) (g5036 core-prim . cons*) (g5035 core-prim . assv) (g5034 core-prim . assq) (g5033 core-prim . assp) (g5032 core-prim . assoc) (g5031 core-prim . call-with-string-output-port) (g5030 core-prim . call-with-port) (g502f core-prim . call-with-bytevector-output-port) (g502e core-prim . bytevector->string) (g502d core-prim . buffer-mode?) (g502c core-prim . binary-port?) (g502b core-prim . with-exception-handler) (g502a core-prim . raise-continuable) (g5029 core-prim . raise) (g2f7e core-prim . eval) (g2f76 core-prim . environment) (g5028 core-prim . make-enumeration) (g5027 core-prim . enum-set=?) (g5026 core-prim . enum-set-universe) (g5025 core-prim . enum-set-union) (g5024 core-prim . enum-set-subset?) (g5023 core-prim . enum-set-projection) (g5022 core-prim . enum-set-member?) (g5021 core-prim . enum-set-intersection) (g5020 core-prim . enum-set-indexer) (g501f core-prim . enum-set-difference) (g501e core-prim . enum-set-constructor) (g501d core-prim . enum-set-complement) (g501c core-prim . enum-set->list) (g4aac core-prim . who-condition?) (g4a24 core-prim . warning?) (g4a63 core-prim . violation?) (g4b23 core-prim . undefined-violation?) (g4b0a core-prim . syntax-violation?) (g4b0e core-prim . syntax-violation-subform) (g4b0c core-prim . syntax-violation-form) (g2f9e core-prim . syntax-violation) (g501b core-prim . simple-conditions) (g4a39 core-prim . serious-condition?) (g4ac3 core-prim . non-continuable-violation?) (g4a0d core-prim . message-condition?) (g4aa8 core-prim . make-who-condition) (g4a22 core-prim . make-warning) (g4a61 core-prim . make-violation) (g4b21 core-prim . make-undefined-violation) (g4b04 core-prim . make-syntax-violation) (g4a37 core-prim . make-serious-condition) (g4ac1 core-prim . make-non-continuable-violation) (g4a09 core-prim . make-message-condition) (g4aeb core-prim . make-lexical-violation) (g4a8d core-prim . make-irritants-condition) (g4ad6 core-prim . make-implementation-restriction-violation) (g4a4c core-prim . make-error) (g4a76 core-prim . make-assertion-violation) (g4aed core-prim . lexical-violation?) (g4a91 core-prim . irritants-condition?) (g4ad8 core-prim . implementation-restriction-violation?) (g4a4e core-prim . error?) (g4aae core-prim . condition-who) (g501a core-prim . condition-predicate) (g4a0f core-prim . condition-message) (g4a93 core-prim . condition-irritants) (g5019 core-prim . condition-accessor) (g5018 core-prim . condition) (g4a78 core-prim . assertion-violation?) (g5017 core-prim . condition?) (g5016 core-prim . utf32->string) (g5015 core-prim . utf16->string) (g5014 core-prim . utf8->string) (g5013 core-prim . uint-list->bytevector) (g5012 core-prim . u8-list->bytevector) (g5011 core-prim . string->utf8) (g5010 core-prim . string->utf32) (g500f core-prim . string->utf16) (g500e core-prim . sint-list->bytevector) (g500d core-prim . native-endianness) (g500c core-prim . bytevector?) (g500b core-prim . bytevector=?) (g500a core-prim . bytevector-uint-set!) (g5009 core-prim . bytevector-uint-ref) (g5008 core-prim . bytevector-u8-set!) (g5007 core-prim . bytevector-u8-ref) (g5006 core-prim . bytevector-u64-set!) (g5005 core-prim . bytevector-u64-ref) (g5004 core-prim . bytevector-u64-native-set!) (g5003 core-prim . bytevector-u64-native-ref) (g5002 core-prim . bytevector-u32-set!) (g5001 core-prim . bytevector-u32-ref) (g5000 core-prim . bytevector-u32-native-set!) (g4fff core-prim . bytevector-u32-native-ref) (g4ffe core-prim . bytevector-u16-set!) (g4ffd core-prim . bytevector-u16-ref) (g4ffc core-prim . bytevector-u16-native-set!) (g4ffb core-prim . bytevector-u16-native-ref) (g4ffa core-prim . bytevector-sint-set!) (g4ff9 core-prim . bytevector-sint-ref) (g4ff8 core-prim . bytevector-s8-set!) (g4ff7 core-prim . bytevector-s8-ref) (g4ff6 core-prim . bytevector-s64-set!) (g4ff5 core-prim . bytevector-s64-ref) (g4ff4 core-prim . bytevector-s64-native-set!) (g4ff3 core-prim . bytevector-s64-native-ref) (g4ff2 core-prim . bytevector-s32-set!) (g4ff1 core-prim . bytevector-s32-ref) (g4ff0 core-prim . bytevector-s32-native-set!) (g4fef core-prim . bytevector-s32-native-ref) (g4fee core-prim . bytevector-s16-set!) (g4fed core-prim . bytevector-s16-ref) (g4fec core-prim . bytevector-s16-native-set!) (g4feb core-prim . bytevector-s16-native-ref) (g4fea core-prim . bytevector-length) (g4fe9 core-prim . bytevector-ieee-single-ref) (g4fe8 core-prim . bytevector-ieee-single-set!) (g4fe7 core-prim . bytevector-ieee-single-native-set!) (g4fe6 core-prim . bytevector-ieee-single-native-ref) (g4fe5 core-prim . bytevector-ieee-double-set!) (g4fe4 core-prim . bytevector-ieee-double-ref) (g4fe3 core-prim . bytevector-ieee-double-native-set!) (g4fe2 core-prim . bytevector-ieee-double-native-ref) (g4fe1 core-prim . bytevector-fill!) (g4fe0 core-prim . bytevector-copy!) (g4fdf core-prim . bytevector-copy) (g4fde core-prim . bytevector->uint-list) (g4fdd core-prim . bytevector->u8-list) (g4fdc core-prim . bytevector->sint-list) (g4c61 core-prim . no-nans-violation?) (g4c4c core-prim . no-infinities-violation?) (g4c5f core-prim . make-no-nans-violation) (g4c4a core-prim . make-no-infinities-violation) (g4fdb core-prim . real->flonum) (g4fda core-prim . flzero?) (g4fd9 core-prim . fltruncate) (g4fd8 core-prim . fltan) (g4fd7 core-prim . flsqrt) (g4fd6 core-prim . flsin) (g4fd5 core-prim . flround) (g4fd4 core-prim . flpositive?) (g4fd3 core-prim . flonum?) (g4fd2 core-prim . flodd?) (g4fd1 core-prim . flnumerator) (g4fd0 core-prim . flnegative?) (g4fcf core-prim . flnan?) (g4fce core-prim . flmod0) (g4fcd core-prim . flmod) (g4fcc core-prim . flmin) (g4fcb core-prim . flmax) (g4fca core-prim . fllog) (g4fc9 core-prim . flinteger?) (g4fc8 core-prim . flinfinite?) (g4fc7 core-prim . flfloor) (g4fc6 core-prim . flfinite?) (g4fc5 core-prim . flexpt) (g4fc4 core-prim . flexp) (g4fc3 core-prim . fleven?) (g4fc2 core-prim . fldiv0-and-mod0) (g4fc1 core-prim . fldiv0) (g4fc0 core-prim . fldiv-and-mod) (g4fbf core-prim . fldiv) (g4fbe core-prim . fldenominator) (g4fbd core-prim . flcos) (g4fbc core-prim . flceiling) (g4fbb core-prim . flatan) (g4fba core-prim . flasin) (g4fb9 core-prim . flacos) (g4fb8 core-prim . flabs) (g4fb7 core-prim . fl>?) (g4fb6 core-prim . fl>=?) (g4fb5 core-prim . fl=?) (g4fb4 core-prim . fl<?) (g4fb3 core-prim . fl<=?) (g4fb2 core-prim . fl/) (g4fb1 core-prim . fl-) (g4fb0 core-prim . fl+) (g4faf core-prim . fl*) (g4fae core-prim . fixnum->flonum) (g4fad core-prim . fxzero?) (g4fac core-prim . fxxor) (g4fab core-prim . fxrotate-bit-field) (g4faa core-prim . fxreverse-bit-field) (g4fa9 core-prim . fxpositive?) (g4fa8 core-prim . fxodd?) (g4fa7 core-prim . fxnot) (g4fa6 core-prim . fxnegative?) (g4fa5 core-prim . fxmod0) (g4fa4 core-prim . fxmod) (g4fa3 core-prim . fxmin) (g4fa2 core-prim . fxmax) (g4fa1 core-prim . fxlength) (g4fa0 core-prim . fxior) (g4f9f core-prim . fxif) (g4f9e core-prim . fxfirst-bit-set) (g4f9d core-prim . fxeven?) (g4f9c core-prim . fxdiv0-and-mod0) (g4f9b core-prim . fxdiv0) (g4f9a core-prim . fxdiv-and-mod) (g4f99 core-prim . fxdiv) (g4f98 core-prim . fxcopy-bit-field) (g4f97 core-prim . fxcopy-bit) (g4f96 core-prim . fxbit-set?) (g4f95 core-prim . fxbit-field) (g4f94 core-prim . fxbit-count) (g4f93 core-prim . fxarithmetic-shift-right) (g4f92 core-prim . fxarithmetic-shift-left) (g4f91 core-prim . fxarithmetic-shift) (g4f90 core-prim . fxand) (g4f8f core-prim . fx>?) (g4f8e core-prim . fx>=?) (g4f8d core-prim . fx=?) (g4f8c core-prim . fx<?) (g4f8b core-prim . fx<=?) (g4f8a core-prim . fx-/carry) (g4f89 core-prim . fx-) (g4f88 core-prim . fx+/carry) (g4f87 core-prim . fx+) (g4f86 core-prim . fx*/carry) (g4f85 core-prim . fx*) (g4f84 core-prim . greatest-fixnum) (g4f83 core-prim . least-fixnum) (g4f82 core-prim . fixnum-width) (g4f81 core-prim . fixnum?) (g4f80 core-prim . bitwise-rotate-bit-field) (g4f7f core-prim . bitwise-reverse-bit-field) (g4f7e core-prim . bitwise-length) (g4f7d core-prim . bitwise-if) (g4f7c core-prim . bitwise-first-bit-set) (g4f7b core-prim . bitwise-copy-bit-field) (g4f7a core-prim . bitwise-copy-bit) (g4f79 core-prim . bitwise-bit-set?) (g4f78 core-prim . bitwise-bit-field) (g4f77 core-prim . bitwise-bit-count) (g4f76 core-prim . bitwise-xor) (g4f75 core-prim . bitwise-ior) (g4f74 core-prim . bitwise-and) (g4f73 core-prim . bitwise-not) (g4f72 core-prim . bitwise-arithmetic-shift-right) (g4f71 core-prim . bitwise-arithmetic-shift-left) (g4f70 core-prim . bitwise-arithmetic-shift) (g4f6f core-prim . zero?) (g4f6e core-prim . vector?) (g4f6d core-prim . vector-set!) (g4f6c core-prim . vector-ref) (g4f6b core-prim . vector-map) (g4f6a core-prim . vector-length) (g4f69 core-prim . vector-for-each) (g4f68 core-prim . vector-fill!) (g4f67 core-prim . vector->list) (g4f66 core-prim . vector) (g4f65 core-prim . values) (g4f64 core-prim . truncate) (g4f63 core-prim . tan) (g4f62 core-prim . symbol?) (g4f61 core-prim . symbol=?) (g4f60 core-prim . symbol->string) (g4f5f core-prim . substring) (g4f5e core-prim . string?) (g4f5d core-prim . string>?) (g4f5c core-prim . string>=?) (g4f5b core-prim . string=?) (g4f5a core-prim . string<?) (g4f59 core-prim . string<=?) (g4f58 core-prim . string-ref) (g4f57 core-prim . string-length) (g4f56 core-prim . string-for-each) (g4f55 core-prim . string-copy) (g4f54 core-prim . string-append) (g4f53 core-prim . string->symbol) (g4f52 core-prim . string->number) (g4f51 core-prim . string->list) (g4f50 core-prim . string) (g4f4f core-prim . sqrt) (g4f4e core-prim . sin) (g4f4d core-prim . round) (g4f4c core-prim . reverse) (g4f4b core-prim . real?) (g4f4a core-prim . real-valued?) (g4f49 core-prim . real-part) (g4f48 core-prim . rationalize) (g4f47 core-prim . rational?) (g4f46 core-prim . rational-valued?) (g4f45 core-prim . procedure?) (g4f44 core-prim . positive?) (g4f43 core-prim . pair?) (g4f42 core-prim . odd?) (g4f41 core-prim . numerator) (g4f40 core-prim . number?) (g4f3f core-prim . number->string) (g4f3e core-prim . null?) (g4f3d core-prim . not) (g4f3c core-prim . negative?) (g4f3b core-prim . nan?) (g4f3a core-prim . min) (g4f39 core-prim . max) (g4f38 core-prim . map) (g4f37 core-prim . make-vector) (g4f36 core-prim . make-string) (g4f35 core-prim . make-rectangular) (g4f34 core-prim . make-polar) (g4f33 core-prim . magnitude) (g4f32 core-prim . log) (g4f31 core-prim . list?) (g4f30 core-prim . list-tail) (g4f2f core-prim . list-ref) (g4f2e core-prim . list->vector) (g4f2d core-prim . list->string) (g4f2c core-prim . list) (g4f2b core-prim . length) (g4f2a core-prim . lcm) (g4f29 core-prim . integer?) (g4f28 core-prim . integer-valued?) (g4f27 core-prim . integer->char) (g4f26 core-prim . infinite?) (g4f25 core-prim . inexact?) (g4f24 core-prim . inexact) (g4f23 core-prim . imag-part) (g4f22 core-prim . gcd) (g4f21 core-prim . for-each) (g4f20 core-prim . floor) (g4f1f core-prim . finite?) (g4f1e core-prim . expt) (g4f1d core-prim . exp) (g4f1c core-prim . exact?) (g4f1b core-prim . exact-integer-sqrt) (g4f1a core-prim . exact) (g4f19 core-prim . even?) (g4f18 core-prim . error) (g4f17 core-prim . eqv?) (g4f16 core-prim . equal?) (g4f15 core-prim . eq?) (g4f14 core-prim . dynamic-wind) (g4f13 core-prim . div0-and-mod0) (g4f12 core-prim . mod0) (g4f11 core-prim . div0) (g4f10 core-prim . div-and-mod) (g4f0f core-prim . mod) (g4f0e core-prim . div) (g4f0d core-prim . denominator) (g4f0c core-prim . cos) (g4f0b core-prim . cons) (g4f0a core-prim . complex?) (g4f09 core-prim . char?) (g4f08 core-prim . char>?) (g4f07 core-prim . char>=?) (g4f06 core-prim . char=?) (g4f05 core-prim . char<?) (g4f04 core-prim . char<=?) (g4f03 core-prim . char->integer) (g4f02 core-prim . ceiling) (g4f01 core-prim . call-with-values) (g4f00 core-prim . call/cc) (g4eff core-prim . call-with-current-continuation) (g4efe core-prim . cddddr) (g4efd core-prim . cdddar) (g4efc core-prim . cddadr) (g4efb core-prim . cddaar) (g4efa core-prim . cdaddr) (g4ef9 core-prim . cdadar) (g4ef8 core-prim . cdaadr) (g4ef7 core-prim . cdaaar) (g4ef6 core-prim . cadddr) (g4ef5 core-prim . caddar) (g4ef4 core-prim . cadadr) (g4ef3 core-prim . cadaar) (g4ef2 core-prim . caaddr) (g4ef1 core-prim . caadar) (g4ef0 core-prim . caaadr) (g4eef core-prim . caaaar) (g4eee core-prim . cdddr) (g4eed core-prim . cddar) (g4eec core-prim . cdadr) (g4eeb core-prim . cdaar) (g4eea core-prim . caddr) (g4ee9 core-prim . cadar) (g4ee8 core-prim . caadr) (g4ee7 core-prim . caaar) (g4ee6 core-prim . cddr) (g4ee5 core-prim . cdar) (g4ee4 core-prim . cadr) (g4ee3 core-prim . caar) (g4ee2 core-prim . cdr) (g4ee1 core-prim . car) (g4ee0 core-prim . boolean?) (g4edf core-prim . boolean=?) (g4ede core-prim . atan) (g4edd core-prim . assertion-violation) (g2f98 core-prim . assertion-error) (g4edc core-prim . asin) (g4edb core-prim . apply) (g4eda core-prim . append) (g4ed9 core-prim . angle) (g4ed8 core-prim . acos) (g4ed7 core-prim . abs) (g4ed6 core-prim . /) (g4ed5 core-prim . *) (g4ed4 core-prim . -) (g4ed3 core-prim . +) (g4ed2 core-prim . >=) (g4ed1 core-prim . >) (g4ed0 core-prim . =) (g4ecf core-prim . <=) (g4ece core-prim . <) (g4ecd core-prim . library) (g4ecc $core-rtd &no-nans-rtd &no-nans-rcd) (g4ecb $core-rtd &no-infinities-rtd &no-infinities-rcd) (g4eca $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g4ec9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g4ec8 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g4ec7 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g4ec6 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g4ec5 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g4ec4 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g4ec3 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g4ec2 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g4ec1 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g4ec0 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g4ebf $core-rtd &i/o-rtd &i/o-rcd) (g4ebe $core-rtd &undefined-rtd &undefined-rcd) (g4ebd $core-rtd &syntax-rtd &syntax-rcd) (g4ebc $core-rtd &lexical-rtd &lexical-rcd) (g4ebb $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g4eba $core-rtd &non-continuable-rtd &non-continuable-rcd) (g4eb9 $core-rtd &who-rtd &who-rcd) (g4eb8 $core-rtd &irritants-rtd &irritants-rcd) (g4eb7 $core-rtd &assertion-rtd &assertion-rcd) (g4eb6 $core-rtd &violation-rtd &violation-rcd) (g4eb5 $core-rtd &error-rtd &error-rcd) (g4eb4 $core-rtd &serious-rtd &serious-rcd) (g4eb3 $core-rtd &warning-rtd &warning-rcd) (g4eb2 $core-rtd &message-rtd &message-rcd) (g4eb1 $core-rtd &condition-rtd &condition-rcd) (g4eb0 macro . define-condition-type) (g4eaf macro . define-enumeration) (g4eae macro . define-record-type) (g4ead macro . parent-rtd) (g4eac macro . nongenerative) (g4eab macro . opaque) (g4eaa macro . sealed) (g4ea9 macro . protocol) (g4ea8 macro . parent) (g4ea7 macro . immutable) (g4ea6 macro . mutable) (g4ea5 macro . fields) (g4ea4 macro . error-handling-mode) (g4ea3 macro . file-options) (g4ea2 macro . buffer-mode) (g4ea1 macro . eol-style) (g4ea0 macro . guard) (g4e9f macro . trace-define) (g4e9e macro . trace-lambda) (g4e9d macro . unsyntax-splicing) (g4e9c macro . unsyntax) (g4e9b macro . unquote-splicing) (g4e9a macro . unquote) (g4e99 macro . _) (g4e98 macro . else) (g4e97 macro . =>) (g4e96 macro . ...) (g4e95 macro . assert) (g4e94 macro . endianness) (g4e93 macro . delay) (g4e92 macro . time) (g4e91 macro . do) (g4e90 macro . cond) (g4e8f macro . let*) (g4e8e macro . let) (g4e8d macro . let*-values) (g4e8c macro . let-values) (g4e8b macro . identifier-syntax) (g4e8a macro . with-syntax) (g4e89 macro . quasisyntax) (g4e88 macro . quasiquote) (g4e87 macro . syntax-rules) (g4e86 macro . include) (g4e85 macro . define-struct) (g4e84 core-macro . record-constructor-descriptor) (g4e83 core-macro . record-type-descriptor) (g4e82 macro . case) (g4e81 macro . parameterize) (g4e80 macro . unless) (g4e7f macro . when) (g4e7e core-macro . or) (g4e7d core-macro . and) (g4e7c core-macro . if) (g4e7b core-macro . letrec*) (g4e7a core-macro . letrec) (g4e79 core-macro . type-descriptor) (g4e78 core-macro . case-lambda) (g4e77 core-macro . lambda) (g4e76 core-macro . syntax) (g4e75 core-macro . syntax-case) (g4e74 core-macro . quote) (g4e73 core-macro . foreign-call) (g4e72 letrec-syntax) (g4e71 let-syntax) (g4e70 set!) (g4e6f import) (g4e6e begin) (g4e6d module) (g4e6c define-syntax) (g4e6b define)) values values '#f '#f '#f '#f) (g2acd@g296c@install-library 'g515a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g5139) (eval-core . g5138) (set-symbol-value! . g5137) (symbol-value . g5136) (gensym . g5135) (void . g5134)) '() values values '#f '#f '#f '#f) (g2acd@g296c@install-library 'g515b '(mosh) '() '() '() '() '((set-symbol-value! . g5137) (symbol-value . g5136) (regexp? . g5132) (read-line . g5131) (ungensym . g5130) (alist->eq-hash-table . g512f) (assoc-ref . g512e) (print . g512d) (format . g512c) (host-os . g512b) (library-path . g294b) (standard-library-path . g512a) (file-newer? . g5129) (stat-mtime . g5128) (write-to-file . g5127) (file->list . g5126) (file->string . g5125) (digit->integer . g5124) (call-with-string-input-port . g5123) (call-with-string-io . g5122) (string-split . g5121) (bytevector-for-each . g5120) (string->regexp . g511f) (rxmatch . g511e) (regexp-replace-all . g511d) (hashtable-for-each . g511c) (readdir . g5118) (set-current-directory! . g5117) (expand-path . g5116) (current-directory . g5115) (p . g5106) (get-timeofday . g5101) (get-command-line . g5100) (sys-display . g50ff) (mosh-executable-path . g50fe) (make-file-options . g50fd) (source-info . g50fc) (make-compiler-instruction . g50fb) (make-instruction . g50fa) (set-source-info! . g50f9) (bignum? . g50f8) (fast-equal? . g50f7) (fasl-read . g50f6) (fasl-write . g50f5) (time-usage . g50f4) (os-constant . g50f3) (time . g4e92) (include . g4e86)) '() values values '#f '#f '#f '#f) (g2acd@g296c@install-library 'g515c '(system) '() '() '() '() '((call-process . g511b) (local-tz-offset . g511a) (microseconds . g5119) (expand-path . g5116) (%spawn . g5114) (%waitpid . g5113) (%ffi-supported? . g5112) (%ffi-pointer-ref . g5111) (%ffi-pointer->string . g5110) (%ffi-call->string-or-zero . g510f) (%ffi-call->double . g510e) (%ffi-call->void* . g510d) (%ffi-call->void . g510c) (%ffi-call->int . g510b) (%ffi-lookup . g510a) (%ffi-open . g5109) (%fork . g5108) (%pipe . g5107) (open-output-string . g5105) (get-output-string . g5104) (get-environment-variables . g5103) (get-environment-variable . g5102) (make-parameter . g277e) (socket-port . g50f2) (socket-shutdown . g50f1) (socket-close . g50f0) (socket-send . g50ef) (socket-recv! . g50ee) (socket-recv . g50ed) (make-server-socket . g50ec) (make-client-socket . g50eb) (socket-accept . g50ea) (socket? . g50e9) (parameterize . g4e81)) '() values values '#f '#f '#f '#f))
((lambda (g4d5b@add-library-path! g4d5d@parse-and-add-library-path g4d5f@for-each-with-index g4d61@rpad g4d63@condition-printer g4d65@record->field-alist g4d67@map-with-index g4d69@repl g4d6b@trace-printer g4d6d@command-line g4d6f@local-library-path g4d71@load/args g4d73@load g4d75@ironscheme-build g4d77@eval-top-level g4d79@compile-system-libraries g4d7b@compile g4d7d@compile->closure g4d7f@pre-compile-r6rs-file g4d81@load-r6rs-top-level) (begin (set! g4d5b@add-library-path! (lambda (g4d9c@path) (g2abd@g294c@library-path (append (g2abd@g294c@library-path) (list g4d9c@path))))) (set! g4d5d@parse-and-add-library-path (lambda (g4d9e@paths g4d9f@message) ((lambda (g4da2@t) (if g4da2@t ((lambda (g4da4@paths) (for-each (lambda (g4da6@path) (if (file-exists? g4da6@path) (g4d5b@add-library-path! (expand-path g4da6@path)) (format (current-error-port) g4d9f@message g4da6@path))) (reverse (string-split g4da4@paths '#\:)))) g4da2@t) (void))) g4d9e@paths))) (set! g4d5f@for-each-with-index (lambda (g4da8@proc g4da9@lst) (letrec ((g4dac@loop (lambda (g4dae@i g4daf@lst) (if (null? g4daf@lst) (if '#f '#f (void)) (begin (g4da8@proc g4dae@i (car g4daf@lst)) (g4dac@loop (+ g4dae@i '1) (cdr g4daf@lst))))))) (g4dac@loop '1 g4da9@lst)))) (set! g4d61@rpad (lambda (g4db2@str g4db3@pad g4db4@n) ((lambda (g4db8@rest) ((letrec ((g4dba@loop (lambda (g4dbc@rest g4dbd@ret) (if (<= g4dbc@rest '0) g4dbd@ret (g4dba@loop (- g4dbc@rest '1) (string-append g4dbd@ret g4db3@pad)))))) g4dba@loop) g4db8@rest (format '"~a" g4db2@str))) (- g4db4@n (string-length (format '"~a" g4db2@str)))))) (set! g4d63@condition-printer (lambda (g4dc0@e g4dc1@port) ((lambda (g4dc5@max-condition-len) (begin (set! g4dc5@max-condition-len (apply max (map (lambda (g4dd6@c) (string-length (symbol->string (record-type-name (record-rtd g4dd6@c))))) (simple-conditions g4dc0@e)))) (begin (display '" Condition components:\n" g4dc1@port) (g4d5f@for-each-with-index (lambda (g4dc6@i g4dc7@x) ((lambda (g4dca@rtd g4dcb@fields-alist) (begin (format g4dc1@port '" ~d. ~a" g4dc6@i (g4d61@rpad (symbol->string (record-type-name g4dca@rtd)) '" " g4dc5@max-condition-len)) (if (null? g4dcb@fields-alist) (newline g4dc1@port) (void)) ((letrec ((g4dce@loop (lambda (g4dd0@first g4dd1@fields-alist) (if (null? g4dd1@fields-alist) '() ((lambda (g4dd4@field) (begin (if (not g4dd0@first) (display (g4d61@rpad '"" '" " (+ '4 g4dc5@max-condition-len)) g4dc1@port) (void)) (display '"       " g4dc1@port) (display (car g4dd4@field) g4dc1@port) (display '": " g4dc1@port) (write (cdr g4dd4@field) g4dc1@port) (newline g4dc1@port) (g4dce@loop '#f (cdr g4dd1@fields-alist)))) (car g4dd1@fields-alist)))))) g4dce@loop) '#t g4dcb@fields-alist))) (record-rtd g4dc7@x) (g4d65@record->field-alist g4dc7@x))) (simple-conditions g4dc0@e))))) '#f))) (set! g4d65@record->field-alist (lambda (g4dd8@r) ((lambda (g4ddb@ref) (begin (set! g4ddb@ref (lambda (g4de6@rtd g4de7@i g4de8@x) ((lambda (g4dec@val) (if (symbol? g4dec@val) (ungensym g4dec@val) g4dec@val)) ((record-accessor g4de6@rtd g4de7@i) g4de8@x)))) ((letrec ((g4ddc@loop (lambda (g4dde@ret g4ddf@rtd) (if g4ddf@rtd (g4ddc@loop (append g4dde@ret (g4d67@map-with-index (lambda (g4de2@i g4de3@field) (cons g4de3@field (g4ddb@ref g4ddf@rtd g4de2@i g4dd8@r))) (vector->list (record-type-field-names g4ddf@rtd)))) (record-type-parent g4ddf@rtd)) g4dde@ret)))) g4ddc@loop) '() (record-rtd g4dd8@r)))) '#f))) (set! g4d67@map-with-index (lambda (g4dee@proc g4def@lst) ((letrec ((g4df2@loop (lambda (g4df4@i g4df5@lst g4df6@ret) (if (null? g4df5@lst) (reverse g4df6@ret) (g4df2@loop (+ g4df4@i '1) (cdr g4df5@lst) (cons (g4dee@proc g4df4@i (car g4df5@lst)) g4df6@ret)))))) g4df2@loop) '0 g4def@lst '()))) (set! g4d69@repl (lambda g4dfa@x ((lambda (g4dfd@rec) (begin (set! g4dfd@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (g4e00@g4dfe) (lambda () (with-exception-handler (lambda (g4e02@e) ((call/cc (lambda (g4e04@g4dff) (g4e00@g4dfe (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? g4e02@e) (g4d63@condition-printer g4e02@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" g4e02@e))) (g4e04@g4dff (lambda () (raise-continuable g4e02@e)))))))))) (lambda () ((letrec ((g4e06@loop (lambda (g4e08@line g4e09@accum) ((lambda (g4e0d@parentheses-ok? g4e0f@eval-string-print) (begin (set! g4e0d@parentheses-ok? (lambda (g4e14@text) ((letrec ((g4e16@loop (lambda (g4e18@chars g4e19@p0 g4e1a@p1) (if (null? g4e18@chars) (= '0 g4e19@p0 g4e1a@p1) ((lambda (g4e1e@t) (if (memv g4e1e@t '(#\()) (g4e16@loop (cdr g4e18@chars) (+ g4e19@p0 '1) g4e1a@p1) (if (memv g4e1e@t '(#\))) (g4e16@loop (cdr g4e18@chars) (- g4e19@p0 '1) g4e1a@p1) (if (memv g4e1e@t '(#\[)) (g4e16@loop (cdr g4e18@chars) g4e19@p0 (+ g4e1a@p1 '1)) (if (memv g4e1e@t '(#\])) (g4e16@loop (cdr g4e18@chars) g4e19@p0 (- g4e1a@p1 '1)) (g4e16@loop (cdr g4e18@chars) g4e19@p0 g4e1a@p1)))))) (car g4e18@chars)))))) g4e16@loop) (string->list g4e14@text) '0 '0))) (set! g4e0f@eval-string-print (lambda (g4e12@text) (if (not (or (string=? '"\n" g4e12@text) (= '0 (string-length g4e12@text)))) (write (g4d77@eval-top-level (call-with-port (open-string-input-port g4e12@text) read))) (void)))) (if (eof-object? g4e08@line) (begin (g4e0f@eval-string-print g4e09@accum) (exit)) ((lambda (g4e10@current) (if (g4e0d@parentheses-ok? g4e10@current) (g4e0f@eval-string-print g4e10@current) (g4e06@loop (get-line (current-input-port)) g4e10@current))) (string-append g4e09@accum g4e08@line))))) '#f '#f)))) g4e06@loop) (get-line (current-input-port)) '""))))))) (newline) (g4dfd@rec)))) (g4dfd@rec))) '#f))) (set! g4d6b@trace-printer (g2855@g277f@make-parameter write)) (set! g4d6d@command-line (g2855@g277f@make-parameter (get-command-line))) (set! g4d6f@local-library-path (lambda (g4e20@filename) (cons (expand-path '".") (g2abd@g294c@library-path)))) (set! g4d71@load/args (lambda (g4e22@filename . g4e24@args) (begin (apply g4d81@load-r6rs-top-level g4e22@filename 'load g4e24@args) (void)))) (set! g4d73@load (lambda (g4e26@filename) (begin (apply g4d81@load-r6rs-top-level g4e26@filename 'load (g4d6d@command-line)) (void)))) (set! g4d75@ironscheme-build (lambda () (g4d73@load '"ironscheme-buildscript.ss"))) (set! g4d77@eval-top-level (lambda (g4e28@x) (g4987@g2f7f@eval g4e28@x (g499d@g2fab@interaction-environment)))) (set! g4d79@compile-system-libraries (lambda () (g4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! g4d7b@compile (lambda (g4e2a@filename) (g4d81@load-r6rs-top-level g4e2a@filename 'compile))) (set! g4d7d@compile->closure (lambda (g4e2c@filename) (g4d81@load-r6rs-top-level g4e2c@filename 'closure))) (set! g4d7f@pre-compile-r6rs-file (lambda (g4e2e@filename) (g4d81@load-r6rs-top-level g4e2e@filename 'compile))) (set! g4d81@load-r6rs-top-level (lambda (g4e30@filename g4e31@how . g4e34@args) ((lambda (g4e3a@g4e37 g4e3b@g4e39) ((lambda (g4e3e@swap) (dynamic-wind g4e3e@swap (lambda () ((lambda (g4e40@x*) ((lambda (g4e42@t) (if (memv g4e42@t '(closure)) (g499c@g2fa9@pre-compile-r6rs-top-level g4e40@x*) (if (memv g4e42@t '(load)) ((lambda (g4e48@g4e45 g4e49@g4e47) ((lambda (g4e4c@swap) (dynamic-wind g4e4c@swap (lambda () ((g499b@g2fa7@compile-r6rs-top-level g4e40@x*))) g4e4c@swap)) (lambda () ((lambda (g4e4e@t) (begin (g4e48@g4e45 g4e49@g4e47) (set! g4e49@g4e47 g4e4e@t))) (g4e48@g4e45))))) g4d6d@command-line (cons g4e30@filename (car g4e34@args))) (if (memv g4e42@t '(compile)) (begin (g499b@g2fa7@compile-r6rs-top-level g4e40@x*) (g2ac1@g2954@serialize-all g2850@g2775@serialize-library g28aa@g2863@compile-core-expr)) (if '#f '#f (void)))))) g4e31@how)) (with-input-from-file g4e30@filename (lambda () ((letrec ((g4e50@f (lambda () ((lambda (g4e52@x) (if (eof-object? g4e52@x) '() (cons g4e52@x (g4e50@f)))) (g2848@g2765@read-annotated))))) g4e50@f)))))) g4e3e@swap)) (lambda () ((lambda (g4e54@t) (begin (g4e3a@g4e37 g4e3b@g4e39) (set! g4e3b@g4e39 g4e54@t))) (g4e3a@g4e37))))) g2abd@g294c@library-path (g4d6f@local-library-path g4e30@filename)))) (begin (set! g4e69@g4d81@load-r6rs-top-level g4d81@load-r6rs-top-level) (set! g4e68@g4d7f@pre-compile-r6rs-file g4d7f@pre-compile-r6rs-file) (set! g4e67@g4d7d@compile->closure g4d7d@compile->closure) (set! g4e66@g4d7b@compile g4d7b@compile) (set! g4e65@g4d79@compile-system-libraries g4d79@compile-system-libraries) (set! g4e64@g4d77@eval-top-level g4d77@eval-top-level) (set! g4e63@g4d75@ironscheme-build g4d75@ironscheme-build) (set! g4e62@g4d73@load g4d73@load) (set! g4e61@g4d71@load/args g4d71@load/args) (set! g4e60@g4d6f@local-library-path g4d6f@local-library-path) (set! g4e5f@g4d6d@command-line g4d6d@command-line) (set! g4e5e@g4d6b@trace-printer g4d6b@trace-printer) (set! g4e5d@g4d69@repl g4d69@repl) (set! g4e5c@g4d67@map-with-index g4d67@map-with-index) (set! g4e5b@g4d65@record->field-alist g4d65@record->field-alist) (set! g4e5a@g4d63@condition-printer g4d63@condition-printer) (set! g4e59@g4d61@rpad g4d61@rpad) (set! g4e58@g4d5f@for-each-with-index g4d5f@for-each-with-index) (set! g4e57@g4d5d@parse-and-add-library-path g4d5d@parse-and-add-library-path) (set! g4e56@g4d5b@add-library-path! g4d5b@add-library-path!) (g2ac2@g2956@current-precompiled-library-loader g2851@g2777@load-serialized-library) (set-symbol-value! 'load g4d73@load) (set-symbol-value! 'pre-compile-r6rs-file g4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs g4d77@eval-top-level) (set-symbol-value! 'int-env-syms g497e@g2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core g28a9@g2861@expanded->core) (set-symbol-value! 'trace-printer g4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (g4d82@c) (condition (g4cb8@g4ac2@make-non-continuable-violation) (g4cae@g4aa9@make-who-condition 'raise) (g4c72@g4a0a@make-message-condition '"returned from non-continuable exception") (g4ca4@g4a8e@make-irritants-condition (list g4d82@c))))) (g4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (g4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (g4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (g4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (g4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (g4d84@prefix) (g2abe@g294e@library-extensions (g4d84@prefix '".mosh" (g2abe@g294e@library-extensions)))) (lambda (g4d86@ext g4d87@ls) (append (map (lambda (g4d8a@x) (string-append g4d86@ext g4d8a@x)) g4d87@ls) g4d87@ls))) ((lambda (g4d8c@args g4d8d@port) ((lambda (g4d91@ref) (begin (set! g4d91@ref (lambda (g4d94@rtd g4d95@i g4d96@x) ((lambda (g4d9a@val) (if (symbol? g4d9a@val) (ungensym g4d9a@val) g4d9a@val)) ((record-accessor g4d94@rtd g4d95@i) g4d96@x)))) (with-exception-handler (lambda (g4d92@c) (if (condition? g4d92@c) (g4d63@condition-printer g4d92@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" g4d92@c))) (lambda () (if (null? g4d8c@args) (g4d69@repl) (g4d81@load-r6rs-top-level (car g4d8c@args) 'load (cdr g4d8c@args))))))) '#f)) (g4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
