;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (q2786@read-annotated q2788@annotation-stripped q278a@annotation? q278c@annotation-source q278e@annotation-expression q2790@scm->fasl q2792@fasl-save q2794@fasl-load q2796@serialize-library q2798@load-serialized-library q279a@make-record-printer q279c@compile-core q279e@read-library-source-file q27a0@make-parameter q2808@file-options-spec) (begin (set! q2786@read-annotated read) (set! q2788@annotation-stripped (lambda (q2809@x) (q278e@annotation-expression q2809@x))) (set! q278a@annotation? (lambda (q280b@x) (source-info q280b@x))) (set! q278c@annotation-source (lambda (q280d@x) (source-info q280d@x))) (set! q278e@annotation-expression (lambda (q280f@x) (if (pair? q280f@x) (cons (car q280f@x) (cdr q280f@x)) (display '"line:46\n")))) (set! q2790@scm->fasl (lambda (q2811@filename) (string-append q2811@filename '".mosh-fasl"))) (set! q2792@fasl-save (lambda (q2813@filename q2814@obj) (call-with-port (open-file-output-port q2813@filename) (lambda (q2817@port) ((symbol-value 'fasl-write!) q2814@obj q2817@port))))) (set! q2794@fasl-load (lambda (q2819@filename) (call-with-port (open-file-input-port q2819@filename) (symbol-value 'fasl-read!)))) (set! q2796@serialize-library (lambda (q281b@filename q281c@obj) (begin (format '#t '"serialize-library ~a\n..." q281b@filename) ((lambda (q281f@expanded2core) ((lambda (q2821@compile) ((lambda (q2823@code) ((lambda (q2825@pivot) ((lambda (q2827@visit) ((lambda () (begin (set-car! q2825@pivot q2827@visit) ((lambda (q2829@pivot) ((lambda (q282b@invoke) ((lambda () (set-car! q2829@pivot q282b@invoke)))) (q2821@compile (q281f@expanded2core (car q2829@pivot))))) (cdr q2825@pivot)))))) (q2821@compile (q281f@expanded2core (car q2825@pivot))))) (cddddr (cddddr q2823@code)))) q281c@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (q282d@fasl-file) (begin (if (file-exists? q282d@fasl-file) (delete-file q282d@fasl-file) (void)) ((call/cc (lambda (q2831@q282f) (lambda () (with-exception-handler (lambda (q2833@c) ((call/cc (lambda (q2835@q2830) (q2831@q282f (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " q281b@filename) (if (file-exists? q282d@fasl-file) (delete-file q282d@fasl-file) (void)) '#f) (q2835@q2830 (lambda () (raise-continuable q2833@c)))))))))) (lambda () (begin (q2792@fasl-save q282d@fasl-file q281c@obj) (display '"OK\n")))))))))) (q2790@scm->fasl q281b@filename))))) (set! q2798@load-serialized-library (lambda (q2837@filename q2838@obj) ((lambda (q283b@fasl-file) (if (and (file-exists? q283b@fasl-file) ((symbol-value 'file-newer?) q283b@fasl-file q2837@filename)) ((lambda (q283d@expanded2core) ((lambda (q283f@eval-compiled-core) ((lambda (q2841@code) ((lambda (q2843@pivot) ((lambda (q2845@visit) ((lambda (q2847@visit-proc) ((lambda () (begin (set-car! q2843@pivot q2847@visit-proc) ((lambda (q2849@pivot) ((lambda (q284b@invoke) ((lambda () (begin (set-car! q2849@pivot (lambda () (q283f@eval-compiled-core q284b@invoke))) (apply q2838@obj q2841@code))))) (car q2849@pivot))) (cdr q2843@pivot)) '#t)))) (lambda () (q283f@eval-compiled-core q2845@visit)))) (car q2843@pivot))) (cddddr (cddddr q2841@code)))) (q2794@fasl-load q283b@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (q2790@scm->fasl q2837@filename)))) (set! q279a@make-record-printer (lambda (q284d@name q284e@printer) (lambda q2851@x (begin (display '"record printer") (for-each display q2851@x))))) (set! q279c@compile-core (lambda q2853@x (apply error 'comile-core '"not implementated" q2853@x))) (set! q279e@read-library-source-file (lambda (q2855@file-name) (with-input-from-file q2855@file-name q2786@read-annotated))) (set! q27a0@make-parameter (lambda q2865 ((lambda (q2866) (if (= q2866 '1) (apply (lambda (q2857@x) (q27a0@make-parameter q2857@x (lambda (q2859@x) q2859@x))) q2865) (if (= q2866 '2) (apply (lambda (q285b@x q285c@fender) ((lambda (q285f@x) (lambda q2863 ((lambda (q2864) (if (= q2864 '0) (apply (lambda () q285f@x) q2863) (if (= q2864 '1) (apply (lambda (q2861@v) (set! q285f@x (q285c@fender q2861@v))) q2863) (error 'apply '"invalid arg count")))) (length q2863)))) (q285c@fender q285b@x))) q2865) (error 'apply '"invalid arg count")))) (length q2865)))) (set! q2808@file-options-spec (lambda (q2867@x) q2867@x)) (begin (set! q2877@q2808@file-options-spec q2808@file-options-spec) (set! q2876@q27a0@make-parameter q27a0@make-parameter) (set! q2875@q279e@read-library-source-file q279e@read-library-source-file) (set! q2874@q279c@compile-core q279c@compile-core) (set! q2873@q279a@make-record-printer q279a@make-record-printer) (set! q2872@q2798@load-serialized-library q2798@load-serialized-library) (set! q2871@q2796@serialize-library q2796@serialize-library) (set! q2870@q2794@fasl-load q2794@fasl-load) (set! q286f@q2792@fasl-save q2792@fasl-save) (set! q286e@q2790@scm->fasl q2790@scm->fasl) (set! q286d@q278e@annotation-expression q278e@annotation-expression) (set! q286c@q278c@annotation-source q278c@annotation-source) (set! q286b@q278a@annotation? q278a@annotation?) (set! q286a@q2788@annotation-stripped q2788@annotation-stripped) (set! q2869@q2786@read-annotated q2786@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q287c@current-primitive-locations q287e@mutable? q2880@rewriter q2882@expanded->core q2884@compile-core-expr q2886@pretty-print q2888@compile-core-expr-to-port) (begin (set! q287c@current-primitive-locations (q2876@q27a0@make-parameter (lambda (q2889@x) '#f) (lambda (q288b@p) q288b@p))) (set! q287e@mutable? (lambda (q288d@x) (or (pair? q288d@x) (vector? q288d@x) (hashtable? q288d@x)))) (set! q2880@rewriter (lambda (q288f@quote-hack?) ((lambda (q2892@f) (begin (set! q2892@f (lambda (q2893@x) (if (pair? q2893@x) ((lambda (q2895@t) (if (memv q2895@t '(quote)) (if (and q288f@quote-hack? (q287e@mutable? (cadr q2893@x))) ((lambda (q2897@g) (begin (set-symbol-value! q2897@g (cadr q2893@x)) q2897@g)) (gensym)) q2893@x) (if (memv q2895@t '(case-lambda)) (cons 'case-lambda (map (lambda (q2899@x) (cons (car q2899@x) (map q2892@f (cdr q2899@x)))) (cdr q2893@x))) (if (memv q2895@t '(lambda)) (cons* 'lambda (cadr q2893@x) (map q2892@f (cddr q2893@x))) (if (memv q2895@t '(letrec)) ((lambda (q289b@bindings q289c@body*) ((lambda (q289f@lhs* q28a0@rhs*) (cons* 'letrec (map list q289f@lhs* (map q2892@f q28a0@rhs*)) (map q2892@f q289c@body*))) (map car q289b@bindings) (map cadr q289b@bindings))) (cadr q2893@x) (cddr q2893@x)) (if (memv q2895@t '(letrec*)) ((lambda (q28a3@bindings q28a4@body*) ((lambda (q28a7@lhs* q28a8@rhs*) (cons* 'letrec* (map list q28a7@lhs* (map q2892@f q28a8@rhs*)) (map q2892@f q28a4@body*))) (map car q28a3@bindings) (map cadr q28a3@bindings))) (cadr q2893@x) (cddr q2893@x)) (if (memv q2895@t '(library-letrec*)) ((lambda (q28ab@name q28ac@x) ((lambda (q28af@bindings q28b0@body*) ((lambda (q28b3@lhs* q28b4@lhs** q28b5@rhs*) (cons* 'library-letrec* q28ab@name (map list q28b3@lhs* q28b4@lhs** (map q2892@f q28b5@rhs*)) (map q2892@f q28b0@body*))) (map car q28af@bindings) (map cadr q28af@bindings) (map caddr q28af@bindings))) (cadr q28ac@x) (cddr q28ac@x))) (cadr q2893@x) (cdr q2893@x)) (if (memv q2895@t '(begin)) (cons 'begin (map q2892@f (cdr q2893@x))) (if (memv q2895@t '(set!)) (list 'set! (cadr q2893@x) (q2892@f (caddr q2893@x))) (if (memv q2895@t '(primitive)) ((lambda (q28b9@op) ((lambda (q28bb@t) (if q28bb@t ((lambda (q28bd@loc) q28bd@loc) q28bb@t) q28b9@op)) ((q287c@current-primitive-locations) q28b9@op))) (cadr q2893@x)) (if (memv q2895@t '(define)) q2893@x (if (list? q2893@x) (map q2892@f q2893@x) (error 'rewrite '"invalid form ~s ~s" q2893@x (list? q2893@x)))))))))))))) (car q2893@x)) q2893@x))) q2892@f)) '#f))) (set! q2882@expanded->core (lambda (q28bf@x) ((q2880@rewriter '#f) q28bf@x))) (set! q2884@compile-core-expr (lambda (q28c1@x) ((q2880@rewriter '#f) q28c1@x))) (set! q2886@pretty-print write) (set! q2888@compile-core-expr-to-port (lambda (q28c3@x q28c4@p) (q2886@pretty-print ((q2880@rewriter '#f) q28c3@x) q28c4@p))) (begin (set! q28cd@q2888@compile-core-expr-to-port q2888@compile-core-expr-to-port) (set! q28cc@q2886@pretty-print q2886@pretty-print) (set! q28cb@q2884@compile-core-expr q2884@compile-core-expr) (set! q28ca@q2882@expanded->core q2882@expanded->core) (set! q28c9@q2880@rewriter q2880@rewriter) (set! q28c8@q287e@mutable? q287e@mutable?) (set! q28c7@q287c@current-primitive-locations q287c@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (q291c@make-collection q291e@current-library-collection q2924@q291f q2926@q2921 q2928@q2920 q292b@library? q292d@make-library q292f@library-id q2931@library-name q2933@library-version q2935@library-imp* q2937@library-vis* q2939@library-inv* q293b@library-subst q293d@library-env q293f@library-visit-state q2941@library-invoke-state q2943@library-visit-code q2945@library-invoke-code q2947@library-visible? q2949@library-source-file-name q294b@set-library-id! q294d@set-library-name! q294f@set-library-version! q2951@set-library-imp*! q2953@set-library-vis*! q2955@set-library-inv*! q2957@set-library-subst! q2959@set-library-env! q295b@set-library-visit-state! q295d@set-library-invoke-state! q295f@set-library-visit-code! q2961@set-library-invoke-code! q2963@set-library-visible?! q2965@set-library-source-file-name! q2967@rp q2969@find-dependencies q296b@find-library-by q296d@library-path q296f@library-extensions q2971@library-name->file-name q2973@file-locator q2975@serialize-all q2977@current-precompiled-library-loader q2979@try-load-from-file q297b@library-loader q297d@current-library-expander q297f@external-pending-libraries q2981@find-external-library q2983@find-library-by-name q2985@library-exists? q2987@find-library-by-spec/die q2989@label->binding-table q298b@install-library-record q298d@install-library q298f@imported-label->binding q2991@invoke-library q2993@visit-library q2995@invoke-library-by-spec q2997@installed-libraries q2999@library-spec) (begin (set! q291c@make-collection (lambda () ((lambda (q299a@set) ((lambda (q299d@set-cons) (begin (set! q299d@set-cons (lambda (q29a2@x q29a3@ls) (if (memq q29a2@x q29a3@ls) q29a3@ls (cons q29a2@x q29a3@ls)))) (lambda q29a0 ((lambda (q29a1) (if (= q29a1 '0) (apply (lambda () q299a@set) q29a0) (if (= q29a1 '1) (apply (lambda (q299e@x) (set! q299a@set (q299d@set-cons q299e@x q299a@set))) q29a0) (error 'apply '"invalid arg count")))) (length q29a0))))) '#f)) '()))) (set! q291e@current-library-collection (q2876@q27a0@make-parameter (q291c@make-collection) (lambda (q29a6@x) (begin (if (not (procedure? q29a6@x)) (assertion-violation 'current-library-collection '"not a procedure" q29a6@x) (void)) q29a6@x)))) (set! q2924@q291f (make-record-type-descriptor 'library '#f 'q2922 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! q2926@q2921 '#f) (set! q2928@q2920 (make-record-constructor-descriptor q2924@q291f '#f q2926@q2921)) (set! q292b@library? (record-predicate q2924@q291f)) (set! q292d@make-library (record-constructor q2928@q2920)) (set! q292f@library-id (record-accessor q2924@q291f '0)) (set! q2931@library-name (record-accessor q2924@q291f '1)) (set! q2933@library-version (record-accessor q2924@q291f '2)) (set! q2935@library-imp* (record-accessor q2924@q291f '3)) (set! q2937@library-vis* (record-accessor q2924@q291f '4)) (set! q2939@library-inv* (record-accessor q2924@q291f '5)) (set! q293b@library-subst (record-accessor q2924@q291f '6)) (set! q293d@library-env (record-accessor q2924@q291f '7)) (set! q293f@library-visit-state (record-accessor q2924@q291f '8)) (set! q2941@library-invoke-state (record-accessor q2924@q291f '9)) (set! q2943@library-visit-code (record-accessor q2924@q291f '10)) (set! q2945@library-invoke-code (record-accessor q2924@q291f '11)) (set! q2947@library-visible? (record-accessor q2924@q291f '12)) (set! q2949@library-source-file-name (record-accessor q2924@q291f '13)) (set! q294b@set-library-id! (record-mutator q2924@q291f '0)) (set! q294d@set-library-name! (record-mutator q2924@q291f '1)) (set! q294f@set-library-version! (record-mutator q2924@q291f '2)) (set! q2951@set-library-imp*! (record-mutator q2924@q291f '3)) (set! q2953@set-library-vis*! (record-mutator q2924@q291f '4)) (set! q2955@set-library-inv*! (record-mutator q2924@q291f '5)) (set! q2957@set-library-subst! (record-mutator q2924@q291f '6)) (set! q2959@set-library-env! (record-mutator q2924@q291f '7)) (set! q295b@set-library-visit-state! (record-mutator q2924@q291f '8)) (set! q295d@set-library-invoke-state! (record-mutator q2924@q291f '9)) (set! q295f@set-library-visit-code! (record-mutator q2924@q291f '10)) (set! q2961@set-library-invoke-code! (record-mutator q2924@q291f '11)) (set! q2963@set-library-visible?! (record-mutator q2924@q291f '12)) (set! q2965@set-library-source-file-name! (record-mutator q2924@q291f '13)) (set! q2967@rp (q2873@q279a@make-record-printer 'library (lambda (q29a8@x q29a9@p q29aa@wr) (begin (if (not (q292b@library? q29a8@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (q2933@library-version q29a8@x)) (q2931@library-name q29a8@x) (append (q2931@library-name q29a8@x) (list (q2933@library-version q29a8@x))))) q29a9@p))))) (set! q2969@find-dependencies (lambda (q29ae@ls) (if (null? q29ae@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! q296b@find-library-by (lambda (q29b0@pred) ((letrec ((q29b2@f (lambda (q29b4@ls) (if (null? q29b4@ls) '#f (if (q29b0@pred (car q29b4@ls)) (car q29b4@ls) (q29b2@f (cdr q29b4@ls))))))) q29b2@f) ((q291e@current-library-collection))))) (set! q296d@library-path (q2876@q27a0@make-parameter '(".") (lambda (q29b6@x) (if (and (list? q29b6@x) (for-all string? q29b6@x)) (map (lambda (q29b8@x) q29b8@x) q29b6@x) (assertion-violation 'library-path '"not a list of strings" q29b6@x))))) (set! q296f@library-extensions (q2876@q27a0@make-parameter '(".sls" ".ss" ".scm") (lambda (q29ba@x) (if (and (list? q29ba@x) (for-all string? q29ba@x)) (map (lambda (q29bc@x) q29bc@x) q29ba@x) (assertion-violation 'library-extensions '"not a list of strings" q29ba@x))))) (set! q2971@library-name->file-name (lambda (q29be@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q29c4@q29c1 q29c5@q29c3) ((lambda (q29c8@extract q29c9@p) ((lambda (q29cd@display-hex) (begin (set! q29cd@display-hex (lambda (q29d6@n) (if (<= '0 q29d6@n '9) (display q29d6@n q29c9@p) (display (integer->char (+ (char->integer '#\a) (- q29d6@n '10))) q29c9@p)))) (begin ((letrec ((q29ce@f (lambda (q29d0@ls) (if (not (null? q29d0@ls)) (begin (display '"/" q29c9@p) (for-each (lambda (q29d2@c) (if (or (char<=? '#\a q29d2@c '#\z) (char<=? '#\A q29d2@c '#\Z) (char<=? '#\0 q29d2@c '#\9) (memv q29d2@c '(#\- #\. #\_ #\~))) (display q29d2@c q29c9@p) (begin (display '"%" q29c9@p) ((lambda (q29d4@n) (begin (q29cd@display-hex (quotient q29d4@n '16)) (q29cd@display-hex (remainder q29d4@n '16)))) (char->integer q29d2@c))))) (string->list (symbol->string (car q29d0@ls)))) (q29ce@f (cdr q29d0@ls))) (void))))) q29ce@f) q29be@x) (q29c8@extract)))) '#f)) q29c5@q29c3 q29c4@q29c1))))) (set! q2973@file-locator (q2876@q27a0@make-parameter (lambda (q29d8@x) ((lambda (q29da@str) ((letrec ((q29dc@f (lambda (q29de@ls q29df@exts q29e0@failed-list) (if (null? q29de@ls) ((lambda () ((lambda (q29ec@q29e7 q29ee@q29e9 q29f0@q29e8 q29f3@q29e6 q29f5@make-library-resolution-condition q29f7@q29e4 q29f9@q29e5 q29fb@library-resolution-condition? q29fd@condition-library q29ff@condition-files) (begin (set! q29ec@q29e7 (make-record-type-descriptor '&library-resolution q4c8d@q49d4@&condition-rtd 'q29ea '#f '#f '#((immutable library) (immutable files)))) (set! q29ee@q29e9 '#f) (set! q29f0@q29e8 (make-record-constructor-descriptor q29ec@q29e7 q4c8e@q49d6@&condition-rcd q29ee@q29e9)) (set! q29f3@q29e6 (record-predicate q29ec@q29e7)) (set! q29f5@make-library-resolution-condition (record-constructor q29f0@q29e8)) (set! q29f7@q29e4 (record-accessor q29ec@q29e7 '0)) (set! q29f9@q29e5 (record-accessor q29ec@q29e7 '1)) (set! q29fb@library-resolution-condition? (condition-predicate q29ec@q29e7)) (set! q29fd@condition-library (condition-accessor q29ec@q29e7 q29f7@q29e4)) (set! q29ff@condition-files (condition-accessor q29ec@q29e7 q29f9@q29e5)) (raise (condition (q4cad@q4a6e@make-error) (q4ccf@q4aca@make-who-condition 'expander) (q4c93@q4a2b@make-message-condition '"cannot locate library in library-path") (q29f5@make-library-resolution-condition q29d8@x (reverse q29e0@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? q29df@exts) (q29dc@f (cdr q29de@ls) (q296f@library-extensions) q29e0@failed-list) ((lambda (q2a00@name) (if (file-exists? q2a00@name) q2a00@name (q29dc@f q29de@ls (cdr q29df@exts) (cons q2a00@name q29e0@failed-list)))) (string-append (car q29de@ls) q29da@str (car q29df@exts)))))))) q29dc@f) (q296d@library-path) (q296f@library-extensions) '())) (q2971@library-name->file-name q29d8@x))) (lambda (q2a02@f) (if (procedure? q2a02@f) q2a02@f (assertion-violation 'file-locator '"not a procedure" q2a02@f))))) (set! q2975@serialize-all (lambda (q2a04@serialize q2a05@compile) ((lambda (q2a09@library-desc) (begin (set! q2a09@library-desc (lambda (q2a0c@x) (list (q292f@library-id q2a0c@x) (q2931@library-name q2a0c@x)))) (for-each (lambda (q2a0a@x) (if (q2949@library-source-file-name q2a0a@x) (q2a04@serialize (q2949@library-source-file-name q2a0a@x) (list (q292f@library-id q2a0a@x) (q2931@library-name q2a0a@x) (q2933@library-version q2a0a@x) (map q2a09@library-desc (q2935@library-imp* q2a0a@x)) (map q2a09@library-desc (q2937@library-vis* q2a0a@x)) (map q2a09@library-desc (q2939@library-inv* q2a0a@x)) (q293b@library-subst q2a0a@x) (q293d@library-env q2a0a@x) (q2a05@compile (q2943@library-visit-code q2a0a@x)) (q2a05@compile (q2945@library-invoke-code q2a0a@x)) (q2947@library-visible? q2a0a@x))) (void))) ((q291e@current-library-collection))))) '#f))) (set! q2977@current-precompiled-library-loader (q2876@q27a0@make-parameter (lambda (q2a0e@filename q2a0f@sk) '#f))) (set! q2979@try-load-from-file (lambda (q2a12@filename) ((q2977@current-precompiled-library-loader) q2a12@filename (lambda q2a38 ((lambda (q2a39) (if (= q2a39 '11) (apply (lambda (q2a14@id q2a15@name q2a16@ver q2a17@imp* q2a18@vis* q2a19@inv* q2a1a@exp-subst q2a1b@exp-env q2a1c@visit-proc q2a1d@invoke-proc q2a1e@visible?) ((letrec ((q2a2a@f (lambda (q2a2c@deps) (if (null? q2a2c@deps) (begin (q298d@install-library q2a14@id q2a15@name q2a16@ver q2a17@imp* q2a18@vis* q2a19@inv* q2a1a@exp-subst q2a1b@exp-env q2a1c@visit-proc q2a1d@invoke-proc '#f '#f q2a1e@visible? '#f) '#t) ((lambda (q2a2e@d) ((lambda (q2a30@label q2a31@dname) ((lambda (q2a34@l) (if (and (q292b@library? q2a34@l) (eq? q2a30@label (q292f@library-id q2a34@l))) (q2a2a@f (cdr q2a2c@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" q2a15@name q2a31@dname q2a12@filename q2a34@l q2a30@label (q292f@library-id q2a34@l)) '#f))) (q2983@find-library-by-name q2a31@dname))) (car q2a2e@d) (cadr q2a2e@d))) (car q2a2c@deps)))))) q2a2a@f) (append q2a17@imp* q2a18@vis* q2a19@inv*))) q2a38) (if (>= q2a39 '0) (apply (lambda q2a36@others '#f) q2a38) (error 'apply '"invalid arg count")))) (length q2a38)))))) (set! q297b@library-loader (q2876@q27a0@make-parameter (lambda (q2a3a@x) ((lambda (q2a3c@file-name) (if (not q2a3c@file-name) (assertion-violation '#f '"cannot file library" q2a3a@x) (or (q2979@try-load-from-file q2a3c@file-name) ((q297d@current-library-expander) (q2875@q279e@read-library-source-file q2a3c@file-name) q2a3c@file-name (lambda (q2a3e@name) (if (not (fast-equal? q2a3e@name q2a3a@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (q2a44@q2a41 q2a45@q2a43) ((lambda (q2a48@e q2a49@p) (begin (display '"expected to find library " q2a49@p) (write q2a3a@x q2a49@p) (display '" in file " q2a49@p) (display q2a3c@file-name q2a49@p) (display '", found " q2a49@p) (write q2a3e@name q2a49@p) (display '" instead" q2a49@p) (q2a48@e))) q2a45@q2a43 q2a44@q2a41)))) (void))))))) ((q2973@file-locator) q2a3a@x))) (lambda (q2a4c@f) (if (procedure? q2a4c@f) q2a4c@f (assertion-violation 'library-locator '"not a procedure" q2a4c@f))))) (set! q297d@current-library-expander (q2876@q27a0@make-parameter (lambda (q2a4e@x) (assertion-violation 'library-expander '"not initialized")) (lambda (q2a50@f) (if (procedure? q2a50@f) q2a50@f (assertion-violation 'library-expander '"not a procedure" q2a50@f))))) (set! q297f@external-pending-libraries (q2876@q27a0@make-parameter '())) (set! q2981@find-external-library (lambda (q2a52@name) (begin (if (member q2a52@name (q297f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" q2a52@name) (void)) ((lambda (q2a58@q2a55 q2a59@q2a57) ((lambda (q2a5c@swap) (dynamic-wind q2a5c@swap (lambda () (begin ((q297b@library-loader) q2a52@name) (or (q296b@find-library-by (lambda (q2a5e@x) (fast-equal? (q2931@library-name q2a5e@x) q2a52@name))) (assertion-violation '#f '"handling external library did not yield the correct library" q2a52@name)))) q2a5c@swap)) (lambda () ((lambda (q2a60@t) (begin (q2a58@q2a55 q2a59@q2a57) (set! q2a59@q2a57 q2a60@t))) (q2a58@q2a55))))) q297f@external-pending-libraries (cons q2a52@name (q297f@external-pending-libraries)))))) (set! q2983@find-library-by-name (lambda (q2a62@name) (or (q296b@find-library-by (lambda (q2a64@x) (fast-equal? (q2931@library-name q2a64@x) q2a62@name))) (q2981@find-external-library q2a62@name)))) (set! q2985@library-exists? (lambda (q2a66@name) (and (q296b@find-library-by (lambda (q2a68@x) (fast-equal? (q2931@library-name q2a68@x) q2a66@name))) '#t))) (set! q2987@find-library-by-spec/die (lambda (q2a6a@spec) ((lambda (q2a6c@id) (or (q296b@find-library-by (lambda (q2a6e@x) (eq? q2a6c@id (q292f@library-id q2a6e@x)))) (assertion-violation '#f '"cannot find library with required spec" q2a6a@spec))) (car q2a6a@spec)))) (set! q2989@label->binding-table (make-eq-hashtable)) (set! q298b@install-library-record (lambda (q2a70@lib) (begin ((lambda (q2a72@exp-env) (for-each (lambda (q2a74@x) ((lambda (q2a76@label q2a77@binding) ((lambda (q2a7a@binding) (begin (if (hashtable-ref q2989@label->binding-table q2a76@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" q2a76@label (hashtable-ref q2989@label->binding-table q2a76@label '#f) q2a7a@binding) (exit)) (void)) (hashtable-set! q2989@label->binding-table q2a76@label q2a7a@binding))) ((lambda (q2a7c@t) (if (memv q2a7c@t '(global)) (cons 'global (cons q2a70@lib (cdr q2a77@binding))) (if (memv q2a7c@t '(global-macro)) (cons 'global-macro (cons q2a70@lib (cdr q2a77@binding))) (if (memv q2a7c@t '(global-macro!)) (cons 'global-macro! (cons q2a70@lib (cdr q2a77@binding))) q2a77@binding)))) (car q2a77@binding)))) (car q2a74@x) (cdr q2a74@x))) q2a72@exp-env)) (q293d@library-env q2a70@lib)) ((q291e@current-library-collection) q2a70@lib)))) (set! q298d@install-library (lambda (q2a7e@id q2a7f@name q2a80@ver q2a81@imp* q2a82@vis* q2a83@inv* q2a84@exp-subst q2a85@exp-env q2a86@visit-proc q2a87@invoke-proc q2a88@visit-code q2a89@invoke-code q2a8a@visible? q2a8b@source-file-name) ((lambda (q2a9a@imp-lib* q2a9b@vis-lib* q2a9c@inv-lib*) (begin (if (not (and (symbol? q2a7e@id) (list? q2a7f@name) (list? q2a80@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" q2a7e@id q2a7f@name q2a80@ver) (void)) (if (q2985@library-exists? q2a7f@name) (assertion-violation 'install-library '"library is already installed" q2a7f@name) (void)) ((lambda (q2aa0@lib) (q298b@install-library-record q2aa0@lib)) (q292d@make-library q2a7e@id q2a7f@name q2a80@ver q2a9a@imp-lib* q2a9b@vis-lib* q2a9c@inv-lib* q2a84@exp-subst q2a85@exp-env q2a86@visit-proc q2a87@invoke-proc q2a88@visit-code q2a89@invoke-code q2a8a@visible? q2a8b@source-file-name)))) (map q2987@find-library-by-spec/die q2a81@imp*) (map q2987@find-library-by-spec/die q2a82@vis*) (map q2987@find-library-by-spec/die q2a83@inv*)))) (set! q298f@imported-label->binding (lambda (q2aa2@lab) (hashtable-ref q2989@label->binding-table q2aa2@lab '#f))) (set! q2991@invoke-library (lambda (q2aa4@lib) ((lambda (q2aa6@invoke) (if (procedure? q2aa6@invoke) (begin (q295d@set-library-invoke-state! q2aa4@lib (lambda () (assertion-violation 'invoke '"circularity detected" q2aa4@lib))) (for-each q2991@invoke-library (q2939@library-inv* q2aa4@lib)) (q295d@set-library-invoke-state! q2aa4@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" q2aa4@lib))) (q2aa6@invoke) (q295d@set-library-invoke-state! q2aa4@lib '#t)) (void))) (q2941@library-invoke-state q2aa4@lib)))) (set! q2993@visit-library (lambda (q2aa8@lib) ((lambda (q2aaa@visit) (if (procedure? q2aaa@visit) (begin (q295b@set-library-visit-state! q2aa8@lib (lambda () (assertion-violation 'visit '"circularity detected" q2aa8@lib))) (for-each q2991@invoke-library (q2937@library-vis* q2aa8@lib)) (q295b@set-library-visit-state! q2aa8@lib (lambda () (assertion-violation 'invoke '"first visit did not return" q2aa8@lib))) (q2aaa@visit) (q295b@set-library-visit-state! q2aa8@lib '#t)) (void))) (q293f@library-visit-state q2aa8@lib)))) (set! q2995@invoke-library-by-spec (lambda (q2aac@spec) (q2991@invoke-library (q2987@find-library-by-spec/die q2aac@spec)))) (set! q2997@installed-libraries (lambda q2ab4 ((lambda (q2ab5) (if (= q2ab5 '1) (apply (lambda (q2aae@all?) ((letrec ((q2ab0@f (lambda (q2ab2@ls) (if (null? q2ab2@ls) '() (if (or q2aae@all? (q2947@library-visible? (car q2ab2@ls))) (cons (car q2ab2@ls) (q2ab0@f (cdr q2ab2@ls))) (q2ab0@f (cdr q2ab2@ls))))))) q2ab0@f) ((q291e@current-library-collection)))) q2ab4) (if (= q2ab5 '0) (apply (lambda () (q2997@installed-libraries '#f)) q2ab4) (error 'apply '"invalid arg count")))) (length q2ab4)))) (set! q2999@library-spec (lambda (q2ab6@x) (begin (if (not (q292b@library? q2ab6@x)) (assertion-violation 'library-spec '"not a library" q2ab6@x) (void)) (list (q292f@library-id q2ab6@x) (q2931@library-name q2ab6@x) (q2933@library-version q2ab6@x))))) (begin (set! q2af4@q2999@library-spec q2999@library-spec) (set! q2af3@q2997@installed-libraries q2997@installed-libraries) (set! q2af2@q2995@invoke-library-by-spec q2995@invoke-library-by-spec) (set! q2af1@q2993@visit-library q2993@visit-library) (set! q2af0@q2991@invoke-library q2991@invoke-library) (set! q2aef@q298f@imported-label->binding q298f@imported-label->binding) (set! q2aee@q298d@install-library q298d@install-library) (set! q2aed@q298b@install-library-record q298b@install-library-record) (set! q2aec@q2989@label->binding-table q2989@label->binding-table) (set! q2aeb@q2987@find-library-by-spec/die q2987@find-library-by-spec/die) (set! q2aea@q2985@library-exists? q2985@library-exists?) (set! q2ae9@q2983@find-library-by-name q2983@find-library-by-name) (set! q2ae8@q2981@find-external-library q2981@find-external-library) (set! q2ae7@q297f@external-pending-libraries q297f@external-pending-libraries) (set! q2ae6@q297d@current-library-expander q297d@current-library-expander) (set! q2ae5@q297b@library-loader q297b@library-loader) (set! q2ae4@q2979@try-load-from-file q2979@try-load-from-file) (set! q2ae3@q2977@current-precompiled-library-loader q2977@current-precompiled-library-loader) (set! q2ae2@q2975@serialize-all q2975@serialize-all) (set! q2ae1@q2973@file-locator q2973@file-locator) (set! q2ae0@q2971@library-name->file-name q2971@library-name->file-name) (set! q2adf@q296f@library-extensions q296f@library-extensions) (set! q2ade@q296d@library-path q296d@library-path) (set! q2add@q296b@find-library-by q296b@find-library-by) (set! q2adc@q2969@find-dependencies q2969@find-dependencies) (set! q2adb@q2967@rp q2967@rp) (set! q2ada@q2965@set-library-source-file-name! q2965@set-library-source-file-name!) (set! q2ad9@q2963@set-library-visible?! q2963@set-library-visible?!) (set! q2ad8@q2961@set-library-invoke-code! q2961@set-library-invoke-code!) (set! q2ad7@q295f@set-library-visit-code! q295f@set-library-visit-code!) (set! q2ad6@q295d@set-library-invoke-state! q295d@set-library-invoke-state!) (set! q2ad5@q295b@set-library-visit-state! q295b@set-library-visit-state!) (set! q2ad4@q2959@set-library-env! q2959@set-library-env!) (set! q2ad3@q2957@set-library-subst! q2957@set-library-subst!) (set! q2ad2@q2955@set-library-inv*! q2955@set-library-inv*!) (set! q2ad1@q2953@set-library-vis*! q2953@set-library-vis*!) (set! q2ad0@q2951@set-library-imp*! q2951@set-library-imp*!) (set! q2acf@q294f@set-library-version! q294f@set-library-version!) (set! q2ace@q294d@set-library-name! q294d@set-library-name!) (set! q2acd@q294b@set-library-id! q294b@set-library-id!) (set! q2acc@q2949@library-source-file-name q2949@library-source-file-name) (set! q2acb@q2947@library-visible? q2947@library-visible?) (set! q2aca@q2945@library-invoke-code q2945@library-invoke-code) (set! q2ac9@q2943@library-visit-code q2943@library-visit-code) (set! q2ac8@q2941@library-invoke-state q2941@library-invoke-state) (set! q2ac7@q293f@library-visit-state q293f@library-visit-state) (set! q2ac6@q293d@library-env q293d@library-env) (set! q2ac5@q293b@library-subst q293b@library-subst) (set! q2ac4@q2939@library-inv* q2939@library-inv*) (set! q2ac3@q2937@library-vis* q2937@library-vis*) (set! q2ac2@q2935@library-imp* q2935@library-imp*) (set! q2ac1@q2933@library-version q2933@library-version) (set! q2ac0@q2931@library-name q2931@library-name) (set! q2abf@q292f@library-id q292f@library-id) (set! q2abe@q292d@make-library q292d@make-library) (set! q2abd@q292b@library? q292b@library?) (set! q2abc@q2928@q2920 q2928@q2920) (set! q2abb@q2926@q2921 q2926@q2921) (set! q2aba@q2924@q291f q2924@q291f) (set! q2ab9@q291e@current-library-collection q291e@current-library-collection) (set! q2ab8@q291c@make-collection q291c@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2af7@build-global-define q2b68@build-lambda q2b6a@build-case-lambda q2b6c@build-let q2b9a@build-sequence q2b9c@build-void q2b9e@build-letrec q2ba0@build-letrec* q2ba2@build-library-letrec* q2ba4@build-receive) (begin (set! q2af7@build-global-define (lambda (q2ba5@x) (q2b9c@build-void))) (set! q2b68@build-lambda (lambda (q2ba7@ae q2ba8@vars q2ba9@exp) (list 'lambda q2ba8@vars q2ba9@exp))) (set! q2b6a@build-case-lambda (lambda (q2bad@ae q2bae@vars* q2baf@exp*) ((lambda (q2bb4@build-error q2bb6@build-pred q2bb8@build-apply q2bba@expand-case-lambda) (begin (set! q2bb4@build-error (lambda (q2beb@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! q2bb6@build-pred (lambda (q2bd3@ae q2bd4@n q2bd5@vars) (call-with-values (lambda () ((letrec ((q2bdd@f (lambda (q2bdf@vars q2be0@count) (if (pair? q2bdf@vars) (q2bdd@f (cdr q2bdf@vars) (+ q2be0@count '1)) (if (null? q2bdf@vars) (values q2be0@count '=) (values q2be0@count '>=)))))) q2bdd@f) q2bd5@vars '0)) (lambda (q2be3@q2bda q2be4@q2bdc) ((lambda (q2be7@pred q2be8@count) (list (list 'primitive q2be7@pred) q2bd4@n (list 'quote q2be8@count))) q2be4@q2bdc q2be3@q2bda))))) (set! q2bb8@build-apply (lambda (q2bcb@ae q2bcc@g q2bcd@vars q2bce@exp) (list '(primitive apply) (q2b68@build-lambda q2bcb@ae q2bcd@vars q2bce@exp) q2bcc@g))) (set! q2bba@expand-case-lambda (lambda (q2bbb@ae q2bbc@vars q2bbd@exp*) ((lambda (q2bc1@g q2bc2@n) (list 'lambda q2bc1@g (q2b6c@build-let q2bbb@ae (list q2bc2@n) (list (list '(primitive length) q2bc1@g)) ((letrec ((q2bc5@f (lambda (q2bc7@vars* q2bc8@exp*) (if (null? q2bc7@vars*) (q2bb4@build-error q2bbb@ae) (list 'if (q2bb6@build-pred q2bbb@ae q2bc2@n (car q2bc7@vars*)) (q2bb8@build-apply q2bbb@ae q2bc1@g (car q2bc7@vars*) (car q2bc8@exp*)) (q2bc5@f (cdr q2bc7@vars*) (cdr q2bc8@exp*))))))) q2bc5@f) q2bae@vars* q2bbd@exp*)))) (gensym) (gensym)))) (if (= (length q2baf@exp*) '1) (q2b68@build-lambda q2bad@ae (car q2bae@vars*) (car q2baf@exp*)) (q2bba@expand-case-lambda q2bad@ae q2bae@vars* q2baf@exp*)))) '#f '#f '#f '#f))) (set! q2b6c@build-let (lambda (q2bed@ae q2bee@lhs* q2bef@rhs* q2bf0@body) (cons (q2b68@build-lambda q2bed@ae q2bee@lhs* q2bf0@body) q2bef@rhs*))) (set! q2b9a@build-sequence (lambda (q2bf5@ae q2bf6@exps) ((letrec ((q2bf9@loop (lambda (q2bfb@exps) (if (null? (cdr q2bfb@exps)) (car q2bfb@exps) (if (equal? (car q2bfb@exps) (q2b9c@build-void)) (q2bf9@loop (cdr q2bfb@exps)) (cons 'begin q2bfb@exps)))))) q2bf9@loop) q2bf6@exps))) (set! q2b9c@build-void (lambda () '((primitive void)))) (set! q2b9e@build-letrec (lambda (q2bfd@ae q2bfe@vars q2bff@val-exps q2c00@body-exp) (if (null? q2bfe@vars) q2c00@body-exp (list 'letrec (map list q2bfe@vars q2bff@val-exps) q2c00@body-exp)))) (set! q2ba0@build-letrec* (lambda (q2c05@ae q2c06@vars q2c07@val-exps q2c08@body-exp) (if (null? q2c06@vars) q2c08@body-exp (q2b6c@build-let q2c05@ae q2c06@vars (map (lambda (q2c0d@x) (list 'quote '#f)) q2c06@vars) (q2b9a@build-sequence q2c05@ae (append (map (lambda (q2c0f@lhs q2c10@rhs) (list 'set! q2c0f@lhs q2c10@rhs)) q2c06@vars q2c07@val-exps) (list q2c08@body-exp))))))) (set! q2ba2@build-library-letrec* (lambda (q2c13@ae q2c14@name q2c15@vars q2c16@locs q2c17@val-exps q2c18@body-exp) (list 'library-letrec* q2c14@name (map list q2c15@vars q2c16@locs q2c17@val-exps) q2c18@body-exp))) (set! q2ba4@build-receive (lambda (q2c1f@ae q2c20@vars q2c21@producer q2c22@body*) (begin (display '"************** in ") (cons 'receive (cons q2c20@vars (cons q2c21@producer q2c22@body*)))))) (begin (set! q2c30@q2ba4@build-receive q2ba4@build-receive) (set! q2c2f@q2ba2@build-library-letrec* q2ba2@build-library-letrec*) (set! q2c2e@q2ba0@build-letrec* q2ba0@build-letrec*) (set! q2c2d@q2b9e@build-letrec q2b9e@build-letrec) (set! q2c2c@q2b9c@build-void q2b9c@build-void) (set! q2c2b@q2b9a@build-sequence q2b9a@build-sequence) (set! q2c2a@q2b6c@build-let q2b6c@build-let) (set! q2c29@q2b6a@build-case-lambda q2b6a@build-case-lambda) (set! q2c28@q2b68@build-lambda q2b68@build-lambda) (set! q2c27@q2af7@build-global-define q2af7@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2c3f@file-options-macro q2c41@set-cons q2c43@set-union q2c48@top-mark* q2c4a@top-marked? q2c4c@gen-lexical q2c4e@gen-global q2c50@gen-label q2c52@gen-top-level-label q2c54@gen-define-label+loc q2c56@gen-define-label q2c5c@q2c57 q2c5e@q2c59 q2c60@q2c58 q2c63@rib? q2c65@make-rib q2c67@rib-sym* q2c69@rib-mark** q2c6b@rib-label* q2c6d@rib-sealed/freq q2c6f@rib-cache q2c71@set-rib-sym*! q2c73@set-rib-mark**! q2c75@set-rib-label*! q2c77@set-rib-sealed/freq! q2c79@set-rib-cache! q2c7b@make-empty-rib q2c7d@extend-rib! q2c7f@extend-rib/nc! q2c81@make-rib-map q2c83@seal-rib! q2c85@unseal-rib! q2c87@make-full-rib q2c8d@q2c88 q2c8f@q2c8a q2c91@q2c89 q2c94@stx? q2c96@make-stx q2c98@stx-expr q2c9a@stx-mark* q2c9c@stx-subst* q2c9e@stx-ae* q2ca0@set-stx-expr! q2ca2@set-stx-mark*! q2ca4@set-stx-subst*! q2ca6@set-stx-ae*! q2ca8@rp q2caa@datum->stx q2cac@gen-mark q2cae@anti-mark q2cb0@anti-mark? q2cb2@join-wraps q2cb4@mkstx q2cb6@add-mark q2cb8@add-subst q2cba@syntax-kind? q2cbc@syntax-vector->list q2cbe@syntax-pair? q2cc0@syntax-vector? q2cc2@syntax-null? q2cc4@syntax-list? q2cc6@syntax-car q2cc8@syntax-cdr q2cca@syntax->list q2ccc@id? q2cce@id->sym q2cd0@same-marks? q2cd2@bound-id=? q2cd4@free-id=? q2cd6@valid-bound-ids? q2cd8@distinct-bound-ids? q2cda@bound-id-member? q2cdc@self-evaluating? q2cde@strip-annotations q2ce0@strip q2ce2@stx->datum q2ce4@same-marks*? q2ce6@id->label q2ce8@id->real-label q2cea@label->binding q2cec@make-binding q2cee@binding-type q2cf0@binding-value q2cf2@raise-unbound-error q2cf4@syntax-type q2d02@sanitize-binding q2d04@make-variable-transformer q2d06@variable-transformer? q2d08@variable-transformer-procedure q2d0a@make-eval-transformer q2e5b@parse-define q2e5d@parse-define-syntax q2e5f@scheme-stx-hashtable q2e61@scheme-stx q2e63@lexical-var q2e65@lexical-mutable? q2e67@set-lexical-mutable! q2e69@add-lexical q2e6b@add-lexicals q2e6d@letrec-helper q2e6f@letrec-transformer q2e71@letrec*-transformer q2e73@fluid-let-syntax-transformer q2e75@type-descriptor-transformer q2e77@record-type-descriptor-transformer q2e79@record-constructor-descriptor-transformer q2e7b@when-macro q2e7d@unless-macro q2e7f@if-transformer q2e81@and-transformer q2e83@or-transformer q2e85@case-macro q2e87@quote-transformer q2e89@case-lambda-transformer q2e8b@lambda-transformer q2e8d@bless q2e8f@with-syntax-macro q2e91@invalid-fmls-error q2e93@let-macro q2e95@let-values-macro q2e97@let*-values-macro q2e99@trace-lambda-macro q2e9b@trace-define-macro q2e9d@trace-define-syntax-macro q2e9f@trace-let/rec-syntax q2ea1@trace-let-syntax-macro q2ea3@trace-letrec-syntax-macro q2ea5@guard-macro q2ea7@define-enumeration-macro q2ea9@time-macro q2eab@delay-macro q2ead@assert-macro q2eaf@endianness-macro q2eb1@identifier-syntax-macro q2eb3@do-macro q2eb5@let*-macro q2eb7@or-macro q2eb9@and-macro q2ebb@cond-macro q2ebd@do-include q2ebf@include-macro q2ec1@include-into-macro q2ec3@syntax-rules-macro q2ec5@quasiquote-macro q2ec7@quasisyntax-macro q2ec9@define-struct-macro q2ecb@define-record-type-macro q2ecd@define-condition-type-macro q2ecf@incorrect-usage-macro q2ed1@parameterize-macro q2ed3@foreign-call-transformer q2ed5@convert-pattern q2ed7@syntax-dispatch q2ed9@ellipsis? q2edb@underscore? q2edd@verify-literals q2edf@syntax-case-transformer q2ee1@ellipsis-map q2ee3@syntax-transformer q2ee5@core-macro-transformer q2ee7@symbol-macro q2ee9@macro-transformer q2eeb@local-macro-transformer q2eed@do-macro-call q2eef@chi-macro q2ef1@chi-local-macro q2ef3@chi-global-macro q2ef5@chi-expr* q2ef7@chi-application q2ef9@chi-expr q2efb@chi-set! q2efd@verify-formals q2eff@chi-lambda-clause q2f01@chi-lambda-clause* q2f03@chi-defun q2f05@chi-rhs q2f07@expand-interaction-rhs*/init* q2f09@chi-rhs* q2f0b@find-bound=? q2f0d@find-dups q2f0f@chi-internal q2f11@parse-module q2f17@q2f12 q2f19@q2f14 q2f1b@q2f13 q2f1e@module-interface? q2f20@make-module-interface q2f22@module-interface-first-mark q2f24@module-interface-exp-id-vec q2f26@module-interface-exp-lab-vec q2f28@set-module-interface-first-mark! q2f2a@set-module-interface-exp-id-vec! q2f2c@set-module-interface-exp-lab-vec! q2f2e@module-interface-exp-id* q2f30@chi-internal-module q2f32@chi-body* q2f34@expand-transformer q2f36@parse-exports q2f38@parse-library-name q2f3a@parse-library q2f3c@parse-import-spec* q2f3e@make-top-rib q2f40@make-collector q2f42@inv-collector q2f44@vis-collector q2f46@imp-collector q2f48@chi-library-internal q2f4a@chi-interaction-expr q2f4c@library-body-expander q2f4e@core-library-expander q2f50@parse-top-level-program q2f52@top-level-expander q2f58@q2f53 q2f5a@q2f55 q2f5c@q2f54 q2f5f@env? q2f61@make-env q2f63@env-names q2f65@env-labels q2f67@env-itc q2f69@set-env-names! q2f6b@set-env-labels! q2f6d@set-env-itc! q2f6f@rp q2f75@q2f70 q2f77@q2f72 q2f79@q2f71 q2f7c@interaction-env? q2f7e@make-interaction-env q2f80@interaction-env-rib q2f82@interaction-env-r q2f84@interaction-env-locs q2f86@set-interaction-env-rib! q2f88@set-interaction-env-r! q2f8a@set-interaction-env-locs! q2f8c@rp q2f8e@interaction-environment-symbols q2f90@environment-bindings q2f92@parse-binding q2f94@environment? q2f96@environment-symbols q2f98@environment q2f9a@null-environment q2f9c@scheme-report-environment q2f9e@expand q2fa0@eval q2fa2@library-expander q2fa4@boot-library-expand q2fa6@rev-map-append q2fa8@build-exports q2faa@make-export-subst q2fac@make-export-env/macros q2fae@generate-temporaries q2fb0@free-identifier=? q2fb2@bound-identifier=? q2fb4@make-source-condition q2fb6@extract-position-condition q2fb8@expression-position q2fba@assertion-error q2fbc@syntax-error q2fbe@syntax-violation* q2fc0@syntax-violation q2fc2@identifier? q2fc4@datum->syntax q2fc6@syntax->datum q2fc8@compile-r6rs-top-level q2fca@pre-compile-r6rs-top-level q2fcc@interaction-environment q2fce@top-level-context) (begin (set! q2c3f@file-options-macro (lambda (q2fcf@x) ((lambda (q2fd2@valid-option?) (begin (set! q2fd2@valid-option? (lambda (q2fdb@x) (and (q2ccc@id? q2fdb@x) (memq (q2cce@id->sym q2fdb@x) '(no-fail no-create no-truncate))))) ((lambda (q2fd3@t) ((lambda (q2fd5@ls/false) (if (and q2fd5@ls/false (apply (lambda (q2fd7@opt*) (for-all q2fd2@valid-option? q2fd7@opt*)) q2fd5@ls/false)) (apply (lambda (q2fd9@opt*) (q2e8d@bless (list 'make-file-options (list 'quote q2fd9@opt*)))) q2fd5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q2fd3@t))) (q2ed7@syntax-dispatch q2fd3@t '(_ . each-any)))) q2fcf@x))) '#f))) (set! q2c41@set-cons (lambda (q2fdd@x q2fde@ls) (if (memq q2fdd@x q2fde@ls) q2fde@ls (cons q2fdd@x q2fde@ls)))) (set! q2c43@set-union (lambda (q2fe1@ls1 q2fe2@ls2) (if (null? q2fe1@ls1) q2fe2@ls2 (if (memq (car q2fe1@ls1) q2fe2@ls2) (q2c43@set-union (cdr q2fe1@ls1) q2fe2@ls2) (cons (car q2fe1@ls1) (q2c43@set-union (cdr q2fe1@ls1) q2fe2@ls2)))))) (set! q2c48@top-mark* '(top)) (set! q2c4a@top-marked? (lambda (q2fe5@m*) (memq 'top q2fe5@m*))) (set! q2c4c@gen-lexical (lambda (q2fe7@sym) (if (symbol? q2fe7@sym) (gensym q2fe7@sym) (if (q2c94@stx? q2fe7@sym) (q2c4c@gen-lexical (q2cce@id->sym q2fe7@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" q2fe7@sym))))) (set! q2c4e@gen-global (lambda (q2fe9@x) (q2c4c@gen-lexical q2fe9@x))) (set! q2c50@gen-label (lambda (q2feb@_) (gensym))) (set! q2c52@gen-top-level-label (lambda (q2fed@id q2fee@rib) ((lambda (q2ff2@find) (begin (set! q2ff2@find (lambda (q2ffd@sym q2ffe@mark* q2fff@sym* q3000@mark** q3001@label*) (and (pair? q2fff@sym*) (if (and (eq? q2ffd@sym (car q2fff@sym*)) (q2cd0@same-marks? q2ffe@mark* (car q3000@mark**))) (car q3001@label*) (q2ff2@find q2ffd@sym q2ffe@mark* (cdr q2fff@sym*) (cdr q3000@mark**) (cdr q3001@label*)))))) ((lambda (q2ff3@sym q2ff4@mark*) ((lambda (q2ff7@sym*) ((lambda (q2ff9@t) (if q2ff9@t ((lambda (q2ffb@label) (if (q2aef@q298f@imported-label->binding q2ffb@label) (gensym) q2ffb@label)) q2ff9@t) (gensym))) (and (memq q2ff3@sym (q2c67@rib-sym* q2fee@rib)) (q2ff2@find q2ff3@sym q2ff4@mark* q2ff7@sym* (q2c69@rib-mark** q2fee@rib) (q2c6b@rib-label* q2fee@rib))))) (q2c67@rib-sym* q2fee@rib))) (q2cce@id->sym q2fed@id) (q2c9a@stx-mark* q2fed@id)))) '#f))) (set! q2c54@gen-define-label+loc (lambda (q3007@id q3008@rib) ((lambda (q300b@t) (if q300b@t ((lambda (q300d@env) ((lambda (q300f@label q3010@locs) (values q300f@label ((lambda (q3013@t) (if q3013@t (cdr q3013@t) ((lambda (q3015@loc) (begin (q2f8a@set-interaction-env-locs! q300d@env (cons (cons q300f@label q3015@loc) q3010@locs)) q3015@loc)) (q2c4c@gen-lexical q3007@id)))) (assq q300f@label q3010@locs)))) (q2c52@gen-top-level-label q3007@id q3008@rib) (q2f84@interaction-env-locs q300d@env))) q300b@t) (values (gensym) (q2c4c@gen-lexical q3007@id)))) (q2fce@top-level-context)))) (set! q2c56@gen-define-label (lambda (q3017@id q3018@rib) (if (q2fce@top-level-context) (q2c52@gen-top-level-label q3017@id q3018@rib) (gensym)))) (set! q2c5c@q2c57 (make-record-type-descriptor 'rib '#f 'q2c5a '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! q2c5e@q2c59 '#f) (set! q2c60@q2c58 (make-record-constructor-descriptor q2c5c@q2c57 '#f q2c5e@q2c59)) (set! q2c63@rib? (record-predicate q2c5c@q2c57)) (set! q2c65@make-rib (record-constructor q2c60@q2c58)) (set! q2c67@rib-sym* (record-accessor q2c5c@q2c57 '0)) (set! q2c69@rib-mark** (record-accessor q2c5c@q2c57 '1)) (set! q2c6b@rib-label* (record-accessor q2c5c@q2c57 '2)) (set! q2c6d@rib-sealed/freq (record-accessor q2c5c@q2c57 '3)) (set! q2c6f@rib-cache (record-accessor q2c5c@q2c57 '4)) (set! q2c71@set-rib-sym*! (record-mutator q2c5c@q2c57 '0)) (set! q2c73@set-rib-mark**! (record-mutator q2c5c@q2c57 '1)) (set! q2c75@set-rib-label*! (record-mutator q2c5c@q2c57 '2)) (set! q2c77@set-rib-sealed/freq! (record-mutator q2c5c@q2c57 '3)) (set! q2c79@set-rib-cache! (record-mutator q2c5c@q2c57 '4)) (set! q2c7b@make-empty-rib (lambda () (q2c65@make-rib '() '() '() '#f '#f))) (set! q2c7d@extend-rib! (lambda (q301b@rib q301c@id q301d@label) ((lambda (q3022@find) (begin (set! q3022@find (lambda (q302f@sym q3030@mark* q3031@sym* q3032@mark** q3033@label*) (and (pair? q3031@sym*) (if (and (eq? q302f@sym (car q3031@sym*)) (q2cd0@same-marks? q3030@mark* (car q3032@mark**))) q3033@label* (q3022@find q302f@sym q3030@mark* (cdr q3031@sym*) (cdr q3032@mark**) (cdr q3033@label*)))))) (begin (if (q2c6d@rib-sealed/freq q301b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" q301b@rib) (void)) ((lambda (q3023@sym q3024@mark*) ((lambda (q3027@sym*) ((lambda (q3029@t) (if q3029@t ((lambda (q302b@p) (if (not (eq? q301d@label (car q302b@p))) (if (q2fce@top-level-context) (set-car! q302b@p q301d@label) (q2fc0@syntax-violation '#f '"multiple definitions of identifier" q301c@id)) (void))) q3029@t) (begin (if (q2c6f@rib-cache q301b@rib) (hashtable-update! (q2c6f@rib-cache q301b@rib) q3023@sym (lambda (q302d@e) (cons (cons q3024@mark* q301d@label) q302d@e)) '()) (void)) (q2c71@set-rib-sym*! q301b@rib (cons q3023@sym q3027@sym*)) (q2c73@set-rib-mark**! q301b@rib (cons q3024@mark* (q2c69@rib-mark** q301b@rib))) (q2c75@set-rib-label*! q301b@rib (cons q301d@label (q2c6b@rib-label* q301b@rib)))))) (and (memq q3023@sym (q2c67@rib-sym* q301b@rib)) (q3022@find q3023@sym q3024@mark* q3027@sym* (q2c69@rib-mark** q301b@rib) (q2c6b@rib-label* q301b@rib))))) (q2c67@rib-sym* q301b@rib))) (q2cce@id->sym q301c@id) (q2c9a@stx-mark* q301c@id))))) '#f))) (set! q2c7f@extend-rib/nc! (lambda (q3039@rib q303a@id q303b@label) ((lambda (q303f@sym q3040@mark*) ((lambda (q3043@sym*) (begin (if (q2c6f@rib-cache q3039@rib) (hashtable-update! (q2c6f@rib-cache q3039@rib) q303f@sym (lambda (q3045@e) (cons (cons q3040@mark* q303b@label) q3045@e)) '()) (void)) (q2c71@set-rib-sym*! q3039@rib (cons q303f@sym q3043@sym*)) (q2c73@set-rib-mark**! q3039@rib (cons q3040@mark* (q2c69@rib-mark** q3039@rib))) (q2c75@set-rib-label*! q3039@rib (cons q303b@label (q2c6b@rib-label* q3039@rib))))) (q2c67@rib-sym* q3039@rib))) (q2cce@id->sym q303a@id) (q2c9a@stx-mark* q303a@id)))) (set! q2c81@make-rib-map (lambda (q3047@sym*) ((lambda (q3049@ht) ((letrec ((q304b@f (lambda (q304d@i q304e@sym*) (if (null? q304e@sym*) q3049@ht (begin (hashtable-update! q3049@ht (car q304e@sym*) (lambda (q3051@x) (cons q304d@i q3051@x)) '()) (q304b@f (+ q304d@i '1) (cdr q304e@sym*))))))) q304b@f) '0 q3047@sym*)) (make-eq-hashtable)))) (set! q2c83@seal-rib! (lambda (q3053@rib) ((lambda (q3055@sym*) (if (not (null? q3055@sym*)) (begin (q2c71@set-rib-sym*! q3053@rib (list->vector q3055@sym*)) (q2c73@set-rib-mark**! q3053@rib (list->vector (q2c69@rib-mark** q3053@rib))) (q2c75@set-rib-label*! q3053@rib (list->vector (q2c6b@rib-label* q3053@rib))) (q2c77@set-rib-sealed/freq! q3053@rib (q2c81@make-rib-map q3055@sym*))) (void))) (q2c67@rib-sym* q3053@rib)))) (set! q2c85@unseal-rib! (lambda (q3057@rib) (if (q2c6d@rib-sealed/freq q3057@rib) (begin (q2c77@set-rib-sealed/freq! q3057@rib '#f) (q2c71@set-rib-sym*! q3057@rib (vector->list (q2c67@rib-sym* q3057@rib))) (q2c73@set-rib-mark**! q3057@rib (vector->list (q2c69@rib-mark** q3057@rib))) (q2c75@set-rib-label*! q3057@rib (vector->list (q2c6b@rib-label* q3057@rib)))) (void)))) (set! q2c87@make-full-rib (lambda (q3059@id* q305a@label*) ((lambda (q305d@r) (begin (q2c83@seal-rib! q305d@r) q305d@r)) (q2c65@make-rib (map q2cce@id->sym q3059@id*) (map q2c9a@stx-mark* q3059@id*) q305a@label* '#f '#f)))) (set! q2c8d@q2c88 (make-record-type-descriptor 'stx '#f 'q2c8b '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! q2c8f@q2c8a '#f) (set! q2c91@q2c89 (make-record-constructor-descriptor q2c8d@q2c88 '#f q2c8f@q2c8a)) (set! q2c94@stx? (record-predicate q2c8d@q2c88)) (set! q2c96@make-stx (record-constructor q2c91@q2c89)) (set! q2c98@stx-expr (record-accessor q2c8d@q2c88 '0)) (set! q2c9a@stx-mark* (record-accessor q2c8d@q2c88 '1)) (set! q2c9c@stx-subst* (record-accessor q2c8d@q2c88 '2)) (set! q2c9e@stx-ae* (record-accessor q2c8d@q2c88 '3)) (set! q2ca0@set-stx-expr! (record-mutator q2c8d@q2c88 '0)) (set! q2ca2@set-stx-mark*! (record-mutator q2c8d@q2c88 '1)) (set! q2ca4@set-stx-subst*! (record-mutator q2c8d@q2c88 '2)) (set! q2ca6@set-stx-ae*! (record-mutator q2c8d@q2c88 '3)) (set! q2ca8@rp (q2873@q279a@make-record-printer 'stx (lambda (q305f@x q3060@p q3061@wr) (begin (display '"#<syntax " q3060@p) (write (q2ce2@stx->datum q305f@x) q3060@p) ((lambda (q3065@expr) (if (q286b@q278a@annotation? q3065@expr) ((lambda (q3067@src) (if (pair? q3067@src) (begin (display '" [" q3060@p) (display (cdr q3067@src) q3060@p) (display '" of " q3060@p) (display (car q3067@src) q3060@p) (display '"]" q3060@p)) (void))) (q286c@q278c@annotation-source q3065@expr)) (void))) (q2c98@stx-expr q305f@x)) (display '">" q3060@p))))) (set! q2caa@datum->stx (lambda (q3069@id q306a@datum) (q2c96@make-stx q306a@datum (q2c9a@stx-mark* q3069@id) (q2c9c@stx-subst* q3069@id) (q2c9e@stx-ae* q3069@id)))) (set! q2cac@gen-mark (lambda () (string '#\m))) (set! q2cae@anti-mark '#f) (set! q2cb0@anti-mark? not) (set! q2cb2@join-wraps (lambda (q306d@m1* q306e@s1* q306f@ae1* q3070@e) ((lambda (q3076@cancel) (begin (set! q3076@cancel (lambda (q307d@ls1 q307e@ls2) ((letrec ((q3081@f (lambda (q3083@x q3084@ls1) (if (null? q3084@ls1) (cdr q307e@ls2) (cons q3083@x (q3081@f (car q3084@ls1) (cdr q3084@ls1))))))) q3081@f) (car q307d@ls1) (cdr q307d@ls1)))) ((lambda (q3077@m2* q3078@s2* q3079@ae2*) (if (and (not (null? q306d@m1*)) (not (null? q3077@m2*)) (q2cb0@anti-mark? (car q3077@m2*))) (values (q3076@cancel q306d@m1* q3077@m2*) (q3076@cancel q306e@s1* q3078@s2*) (q3076@cancel q306f@ae1* q3079@ae2*)) (values (append q306d@m1* q3077@m2*) (append q306e@s1* q3078@s2*) (append q306f@ae1* q3079@ae2*)))) (q2c9a@stx-mark* q3070@e) (q2c9c@stx-subst* q3070@e) (q2c9e@stx-ae* q3070@e)))) '#f))) (set! q2cb4@mkstx (lambda (q3087@e q3088@m* q3089@s* q308a@ae*) (if (and (q2c94@stx? q3087@e) (not (q2c4a@top-marked? q3088@m*))) (call-with-values (lambda () (q2cb2@join-wraps q3088@m* q3089@s* q308a@ae* q3087@e)) (lambda (q3095@q3090 q3096@q3092 q3097@q3094) ((lambda (q309b@ae* q309c@s* q309d@m*) (q2c96@make-stx (q2c98@stx-expr q3087@e) q309d@m* q309c@s* q309b@ae*)) q3097@q3094 q3096@q3092 q3095@q3090))) (q2c96@make-stx q3087@e q3088@m* q3089@s* q308a@ae*)))) (set! q2cb6@add-mark (lambda (q30a1@m q30a2@e q30a3@ae) (q2cb4@mkstx q30a2@e (list q30a1@m) '(shift) (list q30a3@ae)))) (set! q2cb8@add-subst (lambda (q30a7@subst q30a8@e) (q2cb4@mkstx q30a8@e '() (list q30a7@subst) '()))) (set! q2cba@syntax-kind? (lambda (q30ab@x q30ac@p?) (if (q2c94@stx? q30ab@x) (q2cba@syntax-kind? (q2c98@stx-expr q30ab@x) q30ac@p?) (if (q286b@q278a@annotation? q30ab@x) (q2cba@syntax-kind? (q286d@q278e@annotation-expression q30ab@x) q30ac@p?) (q30ac@p? q30ab@x))))) (set! q2cbc@syntax-vector->list (lambda (q30af@x) (if (q2c94@stx? q30af@x) ((lambda (q30b1@ls q30b2@m* q30b3@s* q30b4@ae*) (map (lambda (q30b9@x) (q2cb4@mkstx q30b9@x q30b2@m* q30b3@s* q30b4@ae*)) q30b1@ls)) (q2cbc@syntax-vector->list (q2c98@stx-expr q30af@x)) (q2c9a@stx-mark* q30af@x) (q2c9c@stx-subst* q30af@x) (q2c9e@stx-ae* q30af@x)) (if (q286b@q278a@annotation? q30af@x) (q2cbc@syntax-vector->list (q286d@q278e@annotation-expression q30af@x)) (if (vector? q30af@x) (vector->list q30af@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" q30af@x)))))) (set! q2cbe@syntax-pair? (lambda (q30bb@x) (q2cba@syntax-kind? q30bb@x pair?))) (set! q2cc0@syntax-vector? (lambda (q30bd@x) (q2cba@syntax-kind? q30bd@x vector?))) (set! q2cc2@syntax-null? (lambda (q30bf@x) (q2cba@syntax-kind? q30bf@x null?))) (set! q2cc4@syntax-list? (lambda (q30c1@x) (or (q2cc2@syntax-null? q30c1@x) (and (q2cbe@syntax-pair? q30c1@x) (q2cc4@syntax-list? (q2cc8@syntax-cdr q30c1@x)))))) (set! q2cc6@syntax-car (lambda (q30c3@x) (if (q2c94@stx? q30c3@x) (q2cb4@mkstx (q2cc6@syntax-car (q2c98@stx-expr q30c3@x)) (q2c9a@stx-mark* q30c3@x) (q2c9c@stx-subst* q30c3@x) (q2c9e@stx-ae* q30c3@x)) (if (q286b@q278a@annotation? q30c3@x) (q2cc6@syntax-car (q286d@q278e@annotation-expression q30c3@x)) (if (pair? q30c3@x) (car q30c3@x) (assertion-violation 'syntax-car '"BUG: not a pair" q30c3@x)))))) (set! q2cc8@syntax-cdr (lambda (q30c5@x) (if (q2c94@stx? q30c5@x) (q2cb4@mkstx (q2cc8@syntax-cdr (q2c98@stx-expr q30c5@x)) (q2c9a@stx-mark* q30c5@x) (q2c9c@stx-subst* q30c5@x) (q2c9e@stx-ae* q30c5@x)) (if (q286b@q278a@annotation? q30c5@x) (q2cc8@syntax-cdr (q286d@q278e@annotation-expression q30c5@x)) (if (pair? q30c5@x) (cdr q30c5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" q30c5@x)))))) (set! q2cca@syntax->list (lambda (q30c7@x) (if (q2cbe@syntax-pair? q30c7@x) (cons (q2cc6@syntax-car q30c7@x) (q2cca@syntax->list (q2cc8@syntax-cdr q30c7@x))) (if (q2cc2@syntax-null? q30c7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" q30c7@x))))) (set! q2ccc@id? (lambda (q30c9@x) (and (q2c94@stx? q30c9@x) ((lambda (q30cb@expr) (symbol? (if (q286b@q278a@annotation? q30cb@expr) (q286a@q2788@annotation-stripped q30cb@expr) q30cb@expr))) (q2c98@stx-expr q30c9@x))))) (set! q2cce@id->sym (lambda (q30cd@x) (begin (if (not (q2c94@stx? q30cd@x)) (error 'id->sym '"BUG in ikarus: not an id" q30cd@x) (void)) ((lambda (q30cf@expr) ((lambda (q30d1@sym) (if (symbol? q30d1@sym) q30d1@sym (error 'id->sym '"BUG in ikarus: not an id" q30cd@x))) (if (q286b@q278a@annotation? q30cf@expr) (q286a@q2788@annotation-stripped q30cf@expr) q30cf@expr))) (q2c98@stx-expr q30cd@x))))) (set! q2cd0@same-marks? (lambda (q30d3@x q30d4@y) (or (and (null? q30d3@x) (null? q30d4@y)) (and (pair? q30d3@x) (pair? q30d4@y) (eq? (car q30d3@x) (car q30d4@y)) (q2cd0@same-marks? (cdr q30d3@x) (cdr q30d4@y)))))) (set! q2cd2@bound-id=? (lambda (q30d7@x q30d8@y) (and (eq? (q2cce@id->sym q30d7@x) (q2cce@id->sym q30d8@y)) (q2cd0@same-marks? (q2c9a@stx-mark* q30d7@x) (q2c9a@stx-mark* q30d8@y))))) (set! q2cd4@free-id=? (lambda (q30db@i q30dc@j) ((lambda (q30df@t0 q30e0@t1) (if (or q30df@t0 q30e0@t1) (eq? q30df@t0 q30e0@t1) (eq? (q2cce@id->sym q30db@i) (q2cce@id->sym q30dc@j)))) (q2ce8@id->real-label q30db@i) (q2ce8@id->real-label q30dc@j)))) (set! q2cd6@valid-bound-ids? (lambda (q30e3@id*) (and (for-all q2ccc@id? q30e3@id*) (q2cd8@distinct-bound-ids? q30e3@id*)))) (set! q2cd8@distinct-bound-ids? (lambda (q30e5@id*) (or (null? q30e5@id*) (and (not (q2cda@bound-id-member? (car q30e5@id*) (cdr q30e5@id*))) (q2cd8@distinct-bound-ids? (cdr q30e5@id*)))))) (set! q2cda@bound-id-member? (lambda (q30e7@id q30e8@id*) (and (pair? q30e8@id*) (or (q2cd2@bound-id=? q30e7@id (car q30e8@id*)) (q2cda@bound-id-member? q30e7@id (cdr q30e8@id*)))))) (set! q2cdc@self-evaluating? (lambda (q30eb@x) (or (number? q30eb@x) (string? q30eb@x) (char? q30eb@x) (boolean? q30eb@x) (regexp? q30eb@x) (bytevector? q30eb@x)))) (set! q2cde@strip-annotations (lambda (q30ed@x) (if (pair? q30ed@x) (cons (q2cde@strip-annotations (car q30ed@x)) (q2cde@strip-annotations (cdr q30ed@x))) (if (vector? q30ed@x) (vector-map q2cde@strip-annotations q30ed@x) (if (q286b@q278a@annotation? q30ed@x) (q286a@q2788@annotation-stripped q30ed@x) q30ed@x))))) (set! q2ce0@strip (lambda (q30ef@x q30f0@m*) (if (q2c4a@top-marked? q30f0@m*) (if (or (q286b@q278a@annotation? q30ef@x) (and (pair? q30ef@x) (q286b@q278a@annotation? (car q30ef@x))) (and (vector? q30ef@x) (> (vector-length q30ef@x) '0) (q286b@q278a@annotation? (vector-ref q30ef@x '0)))) (q2cde@strip-annotations q30ef@x) q30ef@x) ((letrec ((q30f3@f (lambda (q30f5@x) (if (q2c94@stx? q30f5@x) (q2ce0@strip (q2c98@stx-expr q30f5@x) (q2c9a@stx-mark* q30f5@x)) (if (q286b@q278a@annotation? q30f5@x) (q286a@q2788@annotation-stripped q30f5@x) (if (pair? q30f5@x) ((lambda (q30f7@a q30f8@d) (if (and (eq? q30f7@a (car q30f5@x)) (eq? q30f8@d (cdr q30f5@x))) q30f5@x (cons q30f7@a q30f8@d))) (q30f3@f (car q30f5@x)) (q30f3@f (cdr q30f5@x))) (if (vector? q30f5@x) ((lambda (q30fb@old) ((lambda (q30fd@new) (if (for-all eq? q30fb@old q30fd@new) q30f5@x (list->vector q30fd@new))) (map q30f3@f q30fb@old))) (vector->list q30f5@x)) q30f5@x))))))) q30f3@f) q30ef@x)))) (set! q2ce2@stx->datum (lambda (q30ff@x) (q2ce0@strip q30ff@x '()))) (set! q2ce4@same-marks*? (lambda (q3101@mark* q3102@mark** q3103@si) (if (null? q3103@si) '#f (if (q2cd0@same-marks? q3101@mark* (vector-ref q3102@mark** (car q3103@si))) (car q3103@si) (q2ce4@same-marks*? q3101@mark* q3102@mark** (cdr q3103@si)))))) (set! q2ce6@id->label (lambda (q3107@id) (or (q2ce8@id->real-label q3107@id) ((lambda (q3109@t) (if q3109@t ((lambda (q310b@env) ((lambda (q310d@rib) (call-with-values (lambda () (q2c54@gen-define-label+loc q3107@id q310d@rib)) (lambda (q3113@q3110 q3114@q3112) ((lambda (q3117@loc_ q3118@lab) (begin (q2c7d@extend-rib! q310d@rib q3107@id q3118@lab) q3118@lab)) q3114@q3112 q3113@q3110)))) (q2f80@interaction-env-rib q310b@env))) q3109@t) '#f)) (q2fce@top-level-context))))) (set! q2ce8@id->real-label (lambda (q311b@id) ((lambda (q311d@sym) ((letrec ((q311f@search (lambda (q3121@subst* q3122@mark*) (if (null? q3121@subst*) '#f (if (eq? (car q3121@subst*) 'shift) (q311f@search (cdr q3121@subst*) (cdr q3122@mark*)) ((lambda (q3125@rib) ((lambda (q3127@t) (if q3127@t ((lambda (q3129@ht) ((lambda (q312b@si) ((lambda (q312d@i) (if q312d@i (vector-ref (q2c6b@rib-label* q3125@rib) q312d@i) (q311f@search (cdr q3121@subst*) q3122@mark*))) (and q312b@si (q2ce4@same-marks*? q3122@mark* (q2c69@rib-mark** q3125@rib) (reverse q312b@si))))) (hashtable-ref q3129@ht q311d@sym '#f))) q3127@t) ((letrec ((q312f@f (lambda (q3131@sym* q3132@mark** q3133@label*) (if (null? q3131@sym*) (q311f@search (cdr q3121@subst*) q3122@mark*) (if (and (eq? (car q3131@sym*) q311d@sym) (q2cd0@same-marks? (car q3132@mark**) q3122@mark*)) (car q3133@label*) (q312f@f (cdr q3131@sym*) (cdr q3132@mark**) (cdr q3133@label*))))))) q312f@f) (q2c67@rib-sym* q3125@rib) (q2c69@rib-mark** q3125@rib) (q2c6b@rib-label* q3125@rib)))) (q2c6d@rib-sealed/freq q3125@rib))) (car q3121@subst*))))))) q311f@search) (q2c9c@stx-subst* q311b@id) (q2c9a@stx-mark* q311b@id))) (q2cce@id->sym q311b@id)))) (set! q2cea@label->binding (lambda (q3137@x q3138@r) ((lambda (q313b@t) (if q313b@t ((lambda (q313d@b) (if (and (pair? q313d@b) (eq? (car q313d@b) '$core-rtd)) (cons '$rtd (map q2e8d@bless (cdr q313d@b))) (if (and (pair? q313d@b) (eq? (car q313d@b) 'global-rtd)) ((lambda (q313f@lib q3140@loc) (cons '$rtd (symbol-value q3140@loc))) (cadr q313d@b) (cddr q313d@b)) q313d@b))) q313b@t) ((lambda (q3143@t) (if q3143@t (cdr q3143@t) ((lambda (q3145@t) (if q3145@t ((lambda (q3147@env) ((lambda (q3149@t) (if q3149@t ((lambda (q314b@p) (cons* 'lexical (cdr q314b@p) '#f)) q3149@t) '(displaced-lexical . #f))) (assq q3137@x (q2f84@interaction-env-locs q3147@env)))) q3145@t) '(displaced-lexical . #f))) (q2fce@top-level-context)))) (assq q3137@x q3138@r)))) (q2aef@q298f@imported-label->binding q3137@x)))) (set! q2cec@make-binding cons) (set! q2cee@binding-type car) (set! q2cf0@binding-value cdr) (set! q2cf2@raise-unbound-error (lambda (q314d@id) (q2fbe@syntax-violation* '#f '"unbound identifier" q314d@id (q4cfd@q4b43@make-undefined-violation)))) (set! q2cf4@syntax-type (lambda (q314f@e q3150@r) (if (q2ccc@id? q314f@e) ((lambda (q3153@id) ((lambda (q3155@label) ((lambda (q3157@b) ((lambda (q3159@type) ((lambda () (begin (if (not q3155@label) (q2cf2@raise-unbound-error q3153@id) (void)) ((lambda (q315b@t) (if (memv q315b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values q3159@type (q2cf0@binding-value q3157@b) q3153@id) (values 'other '#f '#f))) q3159@type))))) (q2cee@binding-type q3157@b))) (q2cea@label->binding q3155@label q3150@r))) (q2ce6@id->label q3153@id))) q314f@e) (if (q2cbe@syntax-pair? q314f@e) ((lambda (q315d@id) (if (q2ccc@id? q315d@id) ((lambda (q315f@label) ((lambda (q3161@b) ((lambda (q3163@type) ((lambda () (begin (if (not q315f@label) (q2cf2@raise-unbound-error q315d@id) (void)) ((lambda (q3165@t) (if (memv q3165@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values q3163@type (q2cf0@binding-value q3161@b) q315d@id) (values 'call '#f '#f))) q3163@type))))) (q2cee@binding-type q3161@b))) (q2cea@label->binding q315f@label q3150@r))) (q2ce6@id->label q315d@id)) (values 'call '#f '#f))) (q2cc6@syntax-car q314f@e)) ((lambda (q3167@d) (if (q2cdc@self-evaluating? q3167@d) (values 'constant q3167@d '#f) (values 'other '#f '#f))) (q2ce2@stx->datum q314f@e)))))) (set! q2d02@sanitize-binding (lambda (q3169@x q316a@src) (if (procedure? q3169@x) (cons* 'local-macro q3169@x q316a@src) (if (and (pair? q3169@x) (eq? (car q3169@x) 'macro!) (procedure? (cdr q3169@x))) (cons* 'local-macro! (cdr q3169@x) q316a@src) (if (and (pair? q3169@x) (eq? (car q3169@x) '$rtd)) q3169@x (assertion-violation 'expand '"invalid transformer" q3169@x)))))) (set! q2d04@make-variable-transformer (lambda (q316d@x) (if (procedure? q316d@x) (cons 'macro! q316d@x) (assertion-violation 'make-variable-transformer '"not a procedure" q316d@x)))) (set! q2d06@variable-transformer? (lambda (q316f@x) (and (pair? q316f@x) (eq? (car q316f@x) 'macro!) (procedure? (cdr q316f@x))))) (set! q2d08@variable-transformer-procedure (lambda (q3171@x) (if (q2d06@variable-transformer? q3171@x) (cdr q3171@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" q3171@x)))) (set! q2d0a@make-eval-transformer (lambda (q3173@x) (q2d02@sanitize-binding (eval-core (q28ca@q2882@expanded->core q3173@x)) q3173@x))) (set! q2e5b@parse-define (lambda (q3175@x) ((lambda (q3177@t) ((lambda (q3179@ls/false) (if (and q3179@ls/false (apply (lambda (q317b@id q317c@fmls q317d@b q317e@b*) (q2ccc@id? q317b@id)) q3179@ls/false)) (apply (lambda (q3183@id q3184@fmls q3185@b q3186@b*) (begin (q2efd@verify-formals q3184@fmls q3175@x) (values q3183@id (cons 'defun (cons q3184@fmls (cons q3185@b q3186@b*)))))) q3179@ls/false) ((lambda (q318b@t) ((lambda (q318d@ls/false) (if (and q318d@ls/false (apply (lambda (q318f@id q3190@val) (q2ccc@id? q318f@id)) q318d@ls/false)) (apply (lambda (q3193@id q3194@val) (values q3193@id (cons 'expr q3194@val))) q318d@ls/false) ((lambda (q3197@t) ((lambda (q3199@ls/false) (if (and q3199@ls/false (apply (lambda (q319b@id) (q2ccc@id? q319b@id)) q3199@ls/false)) (apply (lambda (q319d@id) (values q319d@id (cons 'expr (q2e8d@bless '(void))))) q3199@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3197@t))) (q2ed7@syntax-dispatch q3197@t '(_ any)))) q318b@t))) (q2ed7@syntax-dispatch q318b@t '(_ any any)))) q3177@t))) (q2ed7@syntax-dispatch q3177@t '(_ (any . any) any . each-any)))) q3175@x))) (set! q2e5d@parse-define-syntax (lambda (q319f@x) ((lambda (q31a1@t) ((lambda (q31a3@ls/false) (if (and q31a3@ls/false (apply (lambda (q31a5@id q31a6@val) (q2ccc@id? q31a5@id)) q31a3@ls/false)) (apply (lambda (q31a9@id q31aa@val) (values q31a9@id q31aa@val)) q31a3@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q31a1@t))) (q2ed7@syntax-dispatch q31a1@t '(_ any any)))) q319f@x))) (set! q2e5f@scheme-stx-hashtable (make-eq-hashtable)) (set! q2e61@scheme-stx (lambda (q31ad@sym) (or (hashtable-ref q2e5f@scheme-stx-hashtable q31ad@sym '#f) ((lambda (q31af@subst) ((lambda (q31b1@stx) ((lambda (q31b3@stx) ((lambda () (begin (hashtable-set! q2e5f@scheme-stx-hashtable q31ad@sym q31b3@stx) q31b3@stx)))) ((lambda (q31b5@t) (if q31b5@t ((lambda (q31b7@x) ((lambda (q31b9@name q31ba@label) (q2cb8@add-subst (q2c65@make-rib (list q31b9@name) (list q2c48@top-mark*) (list q31ba@label) '#f '#f) q31b1@stx)) (car q31b7@x) (cdr q31b7@x))) q31b5@t) q31b1@stx)) (assq q31ad@sym q31af@subst)))) (q2c96@make-stx q31ad@sym q2c48@top-mark* '() '()))) (q2ac5@q293b@library-subst (q2ae9@q2983@find-library-by-name '(psyntax system $all))))))) (set! q2e63@lexical-var car) (set! q2e65@lexical-mutable? cdr) (set! q2e67@set-lexical-mutable! set-cdr!) (set! q2e69@add-lexical (lambda (q31bd@lab q31be@lex q31bf@r) (cons (cons* q31bd@lab 'lexical q31be@lex '#f) q31bf@r))) (set! q2e6b@add-lexicals (lambda (q31c3@lab* q31c4@lex* q31c5@r) (if (null? q31c3@lab*) q31c5@r (q2e6b@add-lexicals (cdr q31c3@lab*) (cdr q31c4@lex*) (q2e69@add-lexical (car q31c3@lab*) (car q31c4@lex*) q31c5@r))))) (set! q2e6d@letrec-helper (lambda (q31c9@e q31ca@r q31cb@mr q31cc@build) ((lambda (q31d1@t) ((lambda (q31d3@ls/false) (if q31d3@ls/false (apply (lambda (q31d5@lhs* q31d6@rhs* q31d7@b q31d8@b*) (if (not (q2cd6@valid-bound-ids? q31d5@lhs*)) (q2e91@invalid-fmls-error q31c9@e q31d5@lhs*) ((lambda (q31dd@lex* q31de@lab*) ((lambda (q31e1@rib q31e2@r) ((lambda (q31e5@body q31e6@rhs*) (q31cc@build '#f q31dd@lex* q31e6@rhs* q31e5@body)) (q2f0f@chi-internal (q2cb8@add-subst q31e1@rib (cons q31d7@b q31d8@b*)) q31e2@r q31cb@mr) (q2ef5@chi-expr* (map (lambda (q31e9@x) (q2cb8@add-subst q31e1@rib q31e9@x)) q31d6@rhs*) q31e2@r q31cb@mr))) (q2c87@make-full-rib q31d5@lhs* q31de@lab*) (q2e6b@add-lexicals q31de@lab* q31dd@lex* q31ca@r))) (map q2c4c@gen-lexical q31d5@lhs*) (map q2c50@gen-label q31d5@lhs*)))) q31d3@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q31d1@t))) (q2ed7@syntax-dispatch q31d1@t '(_ #(each (any any)) any . each-any)))) q31c9@e))) (set! q2e6f@letrec-transformer (lambda (q31eb@e q31ec@r q31ed@mr) (q2e6d@letrec-helper q31eb@e q31ec@r q31ed@mr q2c2d@q2b9e@build-letrec))) (set! q2e71@letrec*-transformer (lambda (q31f1@e q31f2@r q31f3@mr) (q2e6d@letrec-helper q31f1@e q31f2@r q31f3@mr q2c2e@q2ba0@build-letrec*))) (set! q2e73@fluid-let-syntax-transformer (lambda (q31f7@e q31f8@r q31f9@mr) ((lambda (q31fe@lookup) (begin (set! q31fe@lookup (lambda (q3211@x) (or (q2ce6@id->label q3211@x) (q2fc0@syntax-violation '#f '"unbound identifier" q31f7@e q3211@x)))) ((lambda (q31ff@t) ((lambda (q3201@ls/false) (if q3201@ls/false (apply (lambda (q3203@lhs* q3204@rhs* q3205@b q3206@b*) (if (not (q2cd6@valid-bound-ids? q3203@lhs*)) (q2e91@invalid-fmls-error q31f7@e q3203@lhs*) ((lambda (q320b@lab* q320c@rhs*) (q2f0f@chi-internal (cons q3205@b q3206@b*) (append (map cons q320b@lab* q320c@rhs*) q31f8@r) (append (map cons q320b@lab* q320c@rhs*) q31f9@mr))) (map q31fe@lookup q3203@lhs*) (map (lambda (q320f@x) (q2d0a@make-eval-transformer (q2f34@expand-transformer q320f@x q31f9@mr))) q3204@rhs*)))) q3201@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q31ff@t))) (q2ed7@syntax-dispatch q31ff@t '(_ #(each (any any)) any . each-any)))) q31f7@e))) '#f))) (set! q2e75@type-descriptor-transformer (lambda (q3213@e q3214@r q3215@mr) ((lambda (q3219@t) ((lambda (q321b@ls/false) (if (and q321b@ls/false (apply (lambda (q321d@id) (q2ccc@id? q321d@id)) q321b@ls/false)) (apply (lambda (q321f@id) ((lambda (q3221@lab) ((lambda (q3223@b) ((lambda (q3225@type) ((lambda () (begin (if (not q3221@lab) (q2cf2@raise-unbound-error q321f@id) (void)) (if (not (and (eq? q3225@type '$rtd) (not (list? (q2cf0@binding-value q3223@b))))) (q2fc0@syntax-violation '#f '"not a record type" q3213@e) (void)) (list 'quote (q2cf0@binding-value q3223@b)))))) (q2cee@binding-type q3223@b))) (q2cea@label->binding q3221@lab q3214@r))) (q2ce6@id->label q321f@id))) q321b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3219@t))) (q2ed7@syntax-dispatch q3219@t '(_ any)))) q3213@e))) (set! q2e77@record-type-descriptor-transformer (lambda (q3227@e q3228@r q3229@mr) ((lambda (q322d@t) ((lambda (q322f@ls/false) (if (and q322f@ls/false (apply (lambda (q3231@id) (q2ccc@id? q3231@id)) q322f@ls/false)) (apply (lambda (q3233@id) ((lambda (q3235@lab) ((lambda (q3237@b) ((lambda (q3239@type) ((lambda () (begin (if (not q3235@lab) (q2cf2@raise-unbound-error q3233@id) (void)) (if (not (and (eq? q3239@type '$rtd) (list? (q2cf0@binding-value q3237@b)))) (q2fc0@syntax-violation '#f '"not a record type" q3227@e) (void)) (q2ef9@chi-expr (car (q2cf0@binding-value q3237@b)) q3228@r q3229@mr))))) (q2cee@binding-type q3237@b))) (q2cea@label->binding q3235@lab q3228@r))) (q2ce6@id->label q3233@id))) q322f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q322d@t))) (q2ed7@syntax-dispatch q322d@t '(_ any)))) q3227@e))) (set! q2e79@record-constructor-descriptor-transformer (lambda (q323b@e q323c@r q323d@mr) ((lambda (q3241@t) ((lambda (q3243@ls/false) (if (and q3243@ls/false (apply (lambda (q3245@id) (q2ccc@id? q3245@id)) q3243@ls/false)) (apply (lambda (q3247@id) ((lambda (q3249@lab) ((lambda (q324b@b) ((lambda (q324d@type) ((lambda () (begin (if (not q3249@lab) (q2cf2@raise-unbound-error q3247@id) (void)) (if (not (and (eq? q324d@type '$rtd) (list? (q2cf0@binding-value q324b@b)))) (q2fc0@syntax-violation '#f '"invalid type" q323b@e) (void)) (q2ef9@chi-expr (cadr (q2cf0@binding-value q324b@b)) q323c@r q323d@mr))))) (q2cee@binding-type q324b@b))) (q2cea@label->binding q3249@lab q323c@r))) (q2ce6@id->label q3247@id))) q3243@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3241@t))) (q2ed7@syntax-dispatch q3241@t '(_ any)))) q323b@e))) (set! q2e7b@when-macro (lambda (q324f@e) ((lambda (q3251@t) ((lambda (q3253@ls/false) (if q3253@ls/false (apply (lambda (q3255@test q3256@e q3257@e*) (q2e8d@bless (list 'if q3255@test (cons 'begin (cons q3256@e q3257@e*))))) q3253@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3251@t))) (q2ed7@syntax-dispatch q3251@t '(_ any any . each-any)))) q324f@e))) (set! q2e7d@unless-macro (lambda (q325b@e) ((lambda (q325d@t) ((lambda (q325f@ls/false) (if q325f@ls/false (apply (lambda (q3261@test q3262@e q3263@e*) (q2e8d@bless (list 'if (list 'not q3261@test) (cons 'begin (cons q3262@e q3263@e*))))) q325f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q325d@t))) (q2ed7@syntax-dispatch q325d@t '(_ any any . each-any)))) q325b@e))) (set! q2e7f@if-transformer (lambda (q3267@e q3268@r q3269@mr) ((lambda (q326d@t) ((lambda (q326f@ls/false) (if q326f@ls/false (apply (lambda (q3271@e0 q3272@e1 q3273@e2) (list 'if (q2ef9@chi-expr q3271@e0 q3268@r q3269@mr) (q2ef9@chi-expr q3272@e1 q3268@r q3269@mr) (q2ef9@chi-expr q3273@e2 q3268@r q3269@mr))) q326f@ls/false) ((lambda (q3277@t) ((lambda (q3279@ls/false) (if q3279@ls/false (apply (lambda (q327b@e0 q327c@e1) (list 'if (q2ef9@chi-expr q327b@e0 q3268@r q3269@mr) (q2ef9@chi-expr q327c@e1 q3268@r q3269@mr) (q2c2c@q2b9c@build-void))) q3279@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3277@t))) (q2ed7@syntax-dispatch q3277@t '(_ any any)))) q326d@t))) (q2ed7@syntax-dispatch q326d@t '(_ any any any)))) q3267@e))) (set! q2e81@and-transformer (lambda (q327f@e q3280@r q3281@mr) ((lambda (q3285@t) ((lambda (q3287@ls/false) (if q3287@ls/false (apply (lambda (q3289@e*) (cons 'and (q2ef5@chi-expr* q3289@e* q3280@r q3281@mr))) q3287@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3285@t))) (q2ed7@syntax-dispatch q3285@t '(_ . each-any)))) q327f@e))) (set! q2e83@or-transformer (lambda (q328b@e q328c@r q328d@mr) ((lambda (q3291@t) ((lambda (q3293@ls/false) (if q3293@ls/false (apply (lambda (q3295@e*) (cons 'or (q2ef5@chi-expr* q3295@e* q328c@r q328d@mr))) q3293@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3291@t))) (q2ed7@syntax-dispatch q3291@t '(_ . each-any)))) q328b@e))) (set! q2e85@case-macro (lambda (q3297@e) ((lambda (q329a@build-last q329c@build-one) (begin (set! q329a@build-last (lambda (q32c1@cls) ((lambda (q32c3@t) ((lambda (q32c5@ls/false) (if q32c5@ls/false (apply (lambda (q32c7@e q32c8@e*) (cons 'begin (cons q32c7@e q32c8@e*))) q32c5@ls/false) ((lambda (q32cb@t) ((lambda (q32cd@ls/false) (if q32cd@ls/false (apply (lambda () (q329c@build-one q32c1@cls '(if #f #f))) q32cd@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q32cb@t))) (q2ed7@syntax-dispatch q32cb@t '_))) q32c3@t))) (q2ed7@syntax-dispatch q32c3@t '(#(scheme-id else) any . each-any)))) q32c1@cls))) (set! q329c@build-one (lambda (q32b3@cls q32b4@k) ((lambda (q32b7@t) ((lambda (q32b9@ls/false) (if q32b9@ls/false (apply (lambda (q32bb@d* q32bc@e q32bd@e*) (list 'if (list 'memv 't (list 'quote q32bb@d*)) (cons 'begin (cons q32bc@e q32bd@e*)) q32b4@k)) q32b9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q32b7@t))) (q2ed7@syntax-dispatch q32b7@t '(each-any any . each-any)))) q32b3@cls))) ((lambda (q329d@t) ((lambda (q329f@ls/false) (if q329f@ls/false (apply (lambda (q32a1@expr) (q2e8d@bless (cons 'let (cons (list (list 't q32a1@expr)) '((if #f #f)))))) q329f@ls/false) ((lambda (q32a3@t) ((lambda (q32a5@ls/false) (if q32a5@ls/false (apply (lambda (q32a7@expr q32a8@cls q32a9@cls*) (q2e8d@bless (list 'let (list (list 't q32a7@expr)) ((letrec ((q32ad@f (lambda (q32af@cls q32b0@cls*) (if (null? q32b0@cls*) (q329a@build-last q32af@cls) (q329c@build-one q32af@cls (q32ad@f (car q32b0@cls*) (cdr q32b0@cls*))))))) q32ad@f) q32a8@cls q32a9@cls*)))) q32a5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q32a3@t))) (q2ed7@syntax-dispatch q32a3@t '(_ any any . each-any)))) q329d@t))) (q2ed7@syntax-dispatch q329d@t '(_ any)))) q3297@e))) '#f '#f))) (set! q2e87@quote-transformer (lambda (q32cf@e q32d0@r q32d1@mr) ((lambda (q32d5@t) ((lambda (q32d7@ls/false) (if q32d7@ls/false (apply (lambda (q32d9@datum) (list 'quote (q2ce2@stx->datum q32d9@datum))) q32d7@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q32d5@t))) (q2ed7@syntax-dispatch q32d5@t '(_ any)))) q32cf@e))) (set! q2e89@case-lambda-transformer (lambda (q32db@e q32dc@r q32dd@mr) ((lambda (q32e1@t) ((lambda (q32e3@ls/false) (if q32e3@ls/false (apply (lambda (q32e5@fmls* q32e6@b* q32e7@b**) (call-with-values (lambda () (q2f01@chi-lambda-clause* q32db@e q32e5@fmls* (map cons q32e6@b* q32e7@b**) q32dc@r q32dd@mr)) (lambda (q32ef@q32ec q32f0@q32ee) ((lambda (q32f3@body* q32f4@fmls*) (q2c29@q2b6a@build-case-lambda '#f q32f4@fmls* q32f3@body*)) q32f0@q32ee q32ef@q32ec)))) q32e3@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q32e1@t))) (q2ed7@syntax-dispatch q32e1@t '(_ . #(each (any any . each-any)))))) q32db@e))) (set! q2e8b@lambda-transformer (lambda (q32f7@e q32f8@r q32f9@mr) ((lambda (q32fd@t) ((lambda (q32ff@ls/false) (if q32ff@ls/false (apply (lambda (q3301@fmls q3302@b q3303@b*) (call-with-values (lambda () (q2eff@chi-lambda-clause q32f7@e q3301@fmls (cons q3302@b q3303@b*) q32f8@r q32f9@mr)) (lambda (q330b@q3308 q330c@q330a) ((lambda (q330f@body q3310@fmls) (q2c28@q2b68@build-lambda '#f q3310@fmls q330f@body)) q330c@q330a q330b@q3308)))) q32ff@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q32fd@t))) (q2ed7@syntax-dispatch q32fd@t '(_ any any . each-any)))) q32f7@e))) (set! q2e8d@bless (lambda (q3313@x) (q2cb4@mkstx ((letrec ((q3315@f (lambda (q3317@x) (if (q2c94@stx? q3317@x) q3317@x (if (pair? q3317@x) (cons (q3315@f (car q3317@x)) (q3315@f (cdr q3317@x))) (if (symbol? q3317@x) (q2e61@scheme-stx q3317@x) (if (vector? q3317@x) (vector-map q3315@f q3317@x) q3317@x))))))) q3315@f) q3313@x) '() '() '()))) (set! q2e8f@with-syntax-macro (lambda (q3319@e) ((lambda (q331b@t) ((lambda (q331d@ls/false) (if q331d@ls/false (apply (lambda (q331f@pat* q3320@expr* q3321@b q3322@b*) ((lambda (q3327@idn*) (begin (q2efd@verify-formals (map car q3327@idn*) q3319@e) ((lambda (q3329@t*) (q2e8d@bless (list 'let (map list q3329@t* q3320@expr*) ((letrec ((q332b@f (lambda (q332d@pat* q332e@t*) (if (null? q332d@pat*) (cons 'begin (cons '#f (cons q3321@b q3322@b*))) (list 'syntax-case (car q332e@t*) '() (list (car q332d@pat*) (q332b@f (cdr q332d@pat*) (cdr q332e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car q332d@pat*)) (car q332e@t*)))))))) q332b@f) q331f@pat* q3329@t*)))) (q2fae@generate-temporaries q3320@expr*)))) ((letrec ((q3331@f (lambda (q3333@pat*) (if (null? q3333@pat*) '() (call-with-values (lambda () (q2ed5@convert-pattern (car q3333@pat*) '())) (lambda (q3339@q3336 q333a@q3338) ((lambda (q333d@idn* q333e@pat) (append q333d@idn* (q3331@f (cdr q3333@pat*)))) q333a@q3338 q3339@q3336))))))) q3331@f) q331f@pat*))) q331d@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q331b@t))) (q2ed7@syntax-dispatch q331b@t '(_ #(each (any any)) any . each-any)))) q3319@e))) (set! q2e91@invalid-fmls-error (lambda (q3341@stx q3342@fmls) ((lambda (q3345@t) ((lambda (q3347@ls/false) (if q3347@ls/false (apply (lambda (q3349@id* q334a@last) ((letrec ((q334d@f (lambda (q334f@id*) (if (null? q334f@id*) (values) (if (not (q2ccc@id? (car q334f@id*))) (q2fc0@syntax-violation '#f '"not an identifier" q3341@stx (car q334f@id*)) (begin (q334d@f (cdr q334f@id*)) (if (q2cda@bound-id-member? (car q334f@id*) (cdr q334f@id*)) (q2fc0@syntax-violation '#f '"duplicate binding" q3341@stx (car q334f@id*)) (void)))))))) q334d@f) (if (q2ccc@id? q334a@last) (cons q334a@last q3349@id*) (if (q2cc2@syntax-null? q334a@last) q3349@id* (q2fc0@syntax-violation '#f '"not an identifier" q3341@stx q334a@last))))) q3347@ls/false) ((lambda (q3351@t) ((lambda (q3353@ls/false) (if q3353@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"malformed binding form" q3341@stx q3342@fmls)) q3353@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3351@t))) (q2ed7@syntax-dispatch q3351@t '_))) q3345@t))) (q2ed7@syntax-dispatch q3345@t '#(each+ any () any)))) q3342@fmls))) (set! q2e93@let-macro (lambda (q3355@stx) ((lambda (q3357@t) ((lambda (q3359@ls/false) (if q3359@ls/false (apply (lambda (q335b@lhs* q335c@rhs* q335d@b q335e@b*) (if (q2cd6@valid-bound-ids? q335b@lhs*) (q2e8d@bless (cons (cons 'lambda (cons q335b@lhs* (cons q335d@b q335e@b*))) q335c@rhs*)) (q2e91@invalid-fmls-error q3355@stx q335b@lhs*))) q3359@ls/false) ((lambda (q3363@t) ((lambda (q3365@ls/false) (if (and q3365@ls/false (apply (lambda (q3367@f q3368@lhs* q3369@rhs* q336a@b q336b@b*) (q2ccc@id? q3367@f)) q3365@ls/false)) (apply (lambda (q3371@f q3372@lhs* q3373@rhs* q3374@b q3375@b*) (if (q2cd6@valid-bound-ids? q3372@lhs*) (q2e8d@bless (cons (list 'letrec (list (list q3371@f (cons 'lambda (cons q3372@lhs* (cons q3374@b q3375@b*))))) q3371@f) q3373@rhs*)) (q2e91@invalid-fmls-error q3355@stx q3372@lhs*))) q3365@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3363@t))) (q2ed7@syntax-dispatch q3363@t '(_ any #(each (any any)) any . each-any)))) q3357@t))) (q2ed7@syntax-dispatch q3357@t '(_ #(each (any any)) any . each-any)))) q3355@stx))) (set! q2e95@let-values-macro (lambda (q337b@stx) ((lambda (q337e@rename q3380@rename*) (begin (set! q337e@rename (lambda (q33e3@x q33e4@old* q33e5@new*) (begin (if (not (q2ccc@id? q33e3@x)) (q2fc0@syntax-violation '#f '"not an indentifier" q337b@stx q33e3@x) (void)) (if (q2cda@bound-id-member? q33e3@x q33e4@old*) (q2fc0@syntax-violation '#f '"duplicate binding" q337b@stx q33e3@x) (void)) ((lambda (q33e9@y) (values q33e9@y (cons q33e3@x q33e4@old*) (cons q33e9@y q33e5@new*))) (gensym (q2fc6@syntax->datum q33e3@x)))))) (set! q3380@rename* (lambda (q33d1@x* q33d2@old* q33d3@new*) (if (null? q33d1@x*) (values '() q33d2@old* q33d3@new*) (call-with-values (lambda () (q337e@rename (car q33d1@x*) q33d2@old* q33d3@new*)) (lambda (q33d7@x q33d8@old* q33d9@new*) (call-with-values (lambda () (q3380@rename* (cdr q33d1@x*) q33d8@old* q33d9@new*)) (lambda (q33dd@x* q33de@old* q33df@new*) (values (cons q33d7@x q33dd@x*) q33de@old* q33df@new*)))))))) ((lambda (q3381@t) ((lambda (q3383@ls/false) (if q3383@ls/false (apply (lambda (q3385@b q3386@b*) (cons* (q2e8d@bless 'let) '() q3385@b q3386@b*)) q3383@ls/false) ((lambda (q3389@t) ((lambda (q338b@ls/false) (if q338b@ls/false (apply (lambda (q338d@lhs* q338e@rhs* q338f@b q3390@b*) (q2e8d@bless ((letrec ((q3395@f (lambda (q3397@lhs* q3398@rhs* q3399@old* q339a@new*) (if (null? q3397@lhs*) (cons 'let (cons (map list q3399@old* q339a@new*) (cons q338f@b q3390@b*))) ((lambda (q339f@t) ((lambda (q33a1@ls/false) (if q33a1@ls/false (apply (lambda (q33a3@x*) (call-with-values (lambda () (q3380@rename* q33a3@x* q3399@old* q339a@new*)) (lambda (q33ab@q33a6 q33ac@q33a8 q33ad@q33aa) ((lambda (q33b1@new* q33b2@old* q33b3@y*) (list 'call-with-values (list 'lambda '() (car q3398@rhs*)) (list 'lambda q33b3@y* (q3395@f (cdr q3397@lhs*) (cdr q3398@rhs*) q33b2@old* q33b1@new*)))) q33ad@q33aa q33ac@q33a8 q33ab@q33a6)))) q33a1@ls/false) ((lambda (q33b7@t) ((lambda (q33b9@ls/false) (if q33b9@ls/false (apply (lambda (q33bb@x* q33bc@x) (call-with-values (lambda () (q337e@rename q33bc@x q3399@old* q339a@new*)) (lambda (q33bf@y q33c0@old* q33c1@new*) (call-with-values (lambda () (q3380@rename* q33bb@x* q33c0@old* q33c1@new*)) (lambda (q33c5@y* q33c6@old* q33c7@new*) (list 'call-with-values (list 'lambda '() (car q3398@rhs*)) (list 'lambda (append q33c5@y* q33bf@y) (q3395@f (cdr q3397@lhs*) (cdr q3398@rhs*) q33c6@old* q33c7@new*)))))))) q33b9@ls/false) ((lambda (q33cb@t) ((lambda (q33cd@ls/false) (if q33cd@ls/false (apply (lambda (q33cf@others) (q2fc0@syntax-violation '#f '"malformed bindings" q337b@stx q33cf@others)) q33cd@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q33cb@t))) (q2ed7@syntax-dispatch q33cb@t 'any))) q33b7@t))) (q2ed7@syntax-dispatch q33b7@t '#(each+ any () any)))) q339f@t))) (q2ed7@syntax-dispatch q339f@t 'each-any))) (car q3397@lhs*)))))) q3395@f) q338d@lhs* q338e@rhs* '() '()))) q338b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3389@t))) (q2ed7@syntax-dispatch q3389@t '(_ #(each (any any)) any . each-any)))) q3381@t))) (q2ed7@syntax-dispatch q3381@t '(_ () any . each-any)))) q337b@stx))) '#f '#f))) (set! q2e97@let*-values-macro (lambda (q33eb@stx) ((lambda (q33ee@check) (begin (set! q33ee@check (lambda (q341d@x*) (if (not (null? q341d@x*)) ((lambda (q341f@x) (begin (if (not (q2ccc@id? q341f@x)) (q2fc0@syntax-violation '#f '"not an identifier" q33eb@stx q341f@x) (void)) (q33ee@check (cdr q341d@x*)) (if (q2cda@bound-id-member? q341f@x (cdr q341d@x*)) (q2fc0@syntax-violation '#f '"duplicate identifier" q33eb@stx q341f@x) (void)))) (car q341d@x*)) (void)))) ((lambda (q33ef@t) ((lambda (q33f1@ls/false) (if q33f1@ls/false (apply (lambda (q33f3@b q33f4@b*) (cons* (q2e8d@bless 'let) '() q33f3@b q33f4@b*)) q33f1@ls/false) ((lambda (q33f7@t) ((lambda (q33f9@ls/false) (if q33f9@ls/false (apply (lambda (q33fb@lhs* q33fc@rhs* q33fd@b q33fe@b*) (q2e8d@bless ((letrec ((q3403@f (lambda (q3405@lhs* q3406@rhs*) (if (null? q3405@lhs*) (cons 'begin (cons q33fd@b q33fe@b*)) ((lambda (q3409@t) ((lambda (q340b@ls/false) (if q340b@ls/false (apply (lambda (q340d@x*) (begin (q33ee@check q340d@x*) (list 'call-with-values (list 'lambda '() (car q3406@rhs*)) (list 'lambda q340d@x* (q3403@f (cdr q3405@lhs*) (cdr q3406@rhs*)))))) q340b@ls/false) ((lambda (q340f@t) ((lambda (q3411@ls/false) (if q3411@ls/false (apply (lambda (q3413@x* q3414@x) (begin (q33ee@check (cons q3414@x q3413@x*)) (list 'call-with-values (list 'lambda '() (car q3406@rhs*)) (list 'lambda (append q3413@x* q3414@x) (q3403@f (cdr q3405@lhs*) (cdr q3406@rhs*)))))) q3411@ls/false) ((lambda (q3417@t) ((lambda (q3419@ls/false) (if q3419@ls/false (apply (lambda (q341b@others) (q2fc0@syntax-violation '#f '"malformed bindings" q33eb@stx q341b@others)) q3419@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3417@t))) (q2ed7@syntax-dispatch q3417@t 'any))) q340f@t))) (q2ed7@syntax-dispatch q340f@t '#(each+ any () any)))) q3409@t))) (q2ed7@syntax-dispatch q3409@t 'each-any))) (car q3405@lhs*)))))) q3403@f) q33fb@lhs* q33fc@rhs*))) q33f9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q33f7@t))) (q2ed7@syntax-dispatch q33f7@t '(_ #(each (any any)) any . each-any)))) q33ef@t))) (q2ed7@syntax-dispatch q33ef@t '(_ () any . each-any)))) q33eb@stx))) '#f))) (set! q2e99@trace-lambda-macro (lambda (q3421@stx) ((lambda (q3423@t) ((lambda (q3425@ls/false) (if q3425@ls/false (apply (lambda (q3427@who q3428@fmls q3429@b q342a@b*) (if (q2cd6@valid-bound-ids? q3428@fmls) (q2e8d@bless (list 'make-traced-procedure (list 'quote q3427@who) (cons 'lambda (cons q3428@fmls (cons q3429@b q342a@b*))))) (q2e91@invalid-fmls-error q3421@stx q3428@fmls))) q3425@ls/false) ((lambda (q342f@t) ((lambda (q3431@ls/false) (if q3431@ls/false (apply (lambda (q3433@who q3434@fmls q3435@last q3436@b q3437@b*) (if (q2cd6@valid-bound-ids? (cons q3435@last q3434@fmls)) (q2e8d@bless (list 'make-traced-procedure (list 'quote q3433@who) (cons 'lambda (cons (append q3434@fmls q3435@last) (cons q3436@b q3437@b*))))) (q2e91@invalid-fmls-error q3421@stx (append q3434@fmls q3435@last)))) q3431@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q342f@t))) (q2ed7@syntax-dispatch q342f@t '(_ any #(each+ any () any) any . each-any)))) q3423@t))) (q2ed7@syntax-dispatch q3423@t '(_ any each-any any . each-any)))) q3421@stx))) (set! q2e9b@trace-define-macro (lambda (q343d@stx) ((lambda (q343f@t) ((lambda (q3441@ls/false) (if q3441@ls/false (apply (lambda (q3443@who q3444@fmls q3445@b q3446@b*) (if (q2cd6@valid-bound-ids? q3444@fmls) (q2e8d@bless (list 'define q3443@who (list 'make-traced-procedure (list 'quote q3443@who) (cons 'lambda (cons q3444@fmls (cons q3445@b q3446@b*)))))) (q2e91@invalid-fmls-error q343d@stx q3444@fmls))) q3441@ls/false) ((lambda (q344b@t) ((lambda (q344d@ls/false) (if q344d@ls/false (apply (lambda (q344f@who q3450@fmls q3451@last q3452@b q3453@b*) (if (q2cd6@valid-bound-ids? (cons q3451@last q3450@fmls)) (q2e8d@bless (list 'define q344f@who (list 'make-traced-procedure (list 'quote q344f@who) (cons 'lambda (cons (append q3450@fmls q3451@last) (cons q3452@b q3453@b*)))))) (q2e91@invalid-fmls-error q343d@stx (append q3450@fmls q3451@last)))) q344d@ls/false) ((lambda (q3459@t) ((lambda (q345b@ls/false) (if q345b@ls/false (apply (lambda (q345d@who q345e@expr) (if (q2ccc@id? q345d@who) (q2e8d@bless (list 'define q345d@who (list 'let (list (list 'v q345e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote q345d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (q2fc0@syntax-violation '#f '"invalid name" q343d@stx))) q345b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3459@t))) (q2ed7@syntax-dispatch q3459@t '(_ any any)))) q344b@t))) (q2ed7@syntax-dispatch q344b@t '(_ (any . #(each+ any () any)) any . each-any)))) q343f@t))) (q2ed7@syntax-dispatch q343f@t '(_ (any . each-any) any . each-any)))) q343d@stx))) (set! q2e9d@trace-define-syntax-macro (lambda (q3461@stx) ((lambda (q3463@t) ((lambda (q3465@ls/false) (if q3465@ls/false (apply (lambda (q3467@who q3468@expr) (if (q2ccc@id? q3467@who) (q2e8d@bless (list 'define-syntax q3467@who (list 'make-traced-macro (list 'quote q3467@who) q3468@expr))) (q2fc0@syntax-violation '#f '"invalid name" q3461@stx))) q3465@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3463@t))) (q2ed7@syntax-dispatch q3463@t '(_ any any)))) q3461@stx))) (set! q2e9f@trace-let/rec-syntax (lambda (q346b@who) (lambda (q346d@stx) ((lambda (q346f@t) ((lambda (q3471@ls/false) (if q3471@ls/false (apply (lambda (q3473@lhs* q3474@rhs* q3475@b q3476@b*) (if (q2cd6@valid-bound-ids? q3473@lhs*) ((lambda (q347b@rhs*) (q2e8d@bless (cons q346b@who (cons (map list q3473@lhs* q347b@rhs*) (cons q3475@b q3476@b*))))) (map (lambda (q347d@lhs q347e@rhs) (list 'make-traced-macro (list 'quote q347d@lhs) q347e@rhs)) q3473@lhs* q3474@rhs*)) (q2e91@invalid-fmls-error q346d@stx q3473@lhs*))) q3471@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q346f@t))) (q2ed7@syntax-dispatch q346f@t '(_ #(each (any any)) any . each-any)))) q346d@stx)))) (set! q2ea1@trace-let-syntax-macro (q2e9f@trace-let/rec-syntax 'let-syntax)) (set! q2ea3@trace-letrec-syntax-macro (q2e9f@trace-let/rec-syntax 'letrec-syntax)) (set! q2ea5@guard-macro (lambda (q3481@x) ((lambda (q3484@gen-clauses) (begin (set! q3484@gen-clauses (lambda (q349b@con q349c@outerk q349d@clause*) ((lambda (q34a2@f q34a4@f*) (begin (set! q34a2@f (lambda (q34db@x q34dc@k) ((lambda (q34df@t) ((lambda (q34e1@ls/false) (if q34e1@ls/false (apply (lambda (q34e3@e q34e4@p) ((lambda (q34e7@t) (list 'let (list (list q34e7@t q34e3@e)) (list 'if q34e7@t (list q34e4@p q34e7@t) q34dc@k))) (gensym))) q34e1@ls/false) ((lambda (q34e9@t) ((lambda (q34eb@ls/false) (if q34eb@ls/false (apply (lambda (q34ed@e) ((lambda (q34ef@t) (list 'let (list (list q34ef@t q34ed@e)) (list 'if q34ef@t q34ef@t q34dc@k))) (gensym))) q34eb@ls/false) ((lambda (q34f1@t) ((lambda (q34f3@ls/false) (if q34f3@ls/false (apply (lambda (q34f5@e q34f6@v q34f7@v*) (list 'if q34f5@e (cons 'begin (cons q34f6@v q34f7@v*)) q34dc@k)) q34f3@ls/false) ((lambda (q34fb@t) ((lambda (q34fd@ls/false) (if q34fd@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid guard clause" q34db@x)) q34fd@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q34fb@t))) (q2ed7@syntax-dispatch q34fb@t '_))) q34f1@t))) (q2ed7@syntax-dispatch q34f1@t '(any any . each-any)))) q34e9@t))) (q2ed7@syntax-dispatch q34e9@t '(any)))) q34df@t))) (q2ed7@syntax-dispatch q34df@t '(any #(scheme-id =>) any)))) q34db@x))) (set! q34a4@f* (lambda (q34b1@x*) ((lambda (q34b3@t) ((lambda (q34b5@ls/false) (if q34b5@ls/false (apply (lambda () ((lambda (q34b7@g) (values (list q34b7@g (list 'lambda '() (list 'raise-continuable q349b@con))) q34b7@g)) (gensym))) q34b5@ls/false) ((lambda (q34b9@t) ((lambda (q34bb@ls/false) (if q34bb@ls/false (apply (lambda (q34bd@e q34be@e*) (values (cons 'begin (cons q34bd@e q34be@e*)) '#f)) q34bb@ls/false) ((lambda (q34c1@t) ((lambda (q34c3@ls/false) (if q34c3@ls/false (apply (lambda (q34c5@cls q34c6@cls*) (call-with-values (lambda () (q34a4@f* q34c6@cls*)) (lambda (q34cd@q34ca q34ce@q34cc) ((lambda (q34d1@g q34d2@e) (values (q34a2@f q34c5@cls q34d2@e) q34d1@g)) q34ce@q34cc q34cd@q34ca)))) q34c3@ls/false) ((lambda (q34d5@t) ((lambda (q34d7@ls/false) (if q34d7@ls/false (apply (lambda (q34d9@others) (q2fc0@syntax-violation '#f '"invalid guard clause" q34d9@others)) q34d7@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q34d5@t))) (q2ed7@syntax-dispatch q34d5@t 'any))) q34c1@t))) (q2ed7@syntax-dispatch q34c1@t '(any . any)))) q34b9@t))) (q2ed7@syntax-dispatch q34b9@t '((#(scheme-id else) any . each-any))))) q34b3@t))) (q2ed7@syntax-dispatch q34b3@t '()))) q34b1@x*))) (call-with-values (lambda () (q34a4@f* q349d@clause*)) (lambda (q34a9@q34a6 q34aa@q34a8) ((lambda (q34ad@raisek q34ae@code) (if q34ad@raisek (list (list 'call/cc (list 'lambda (list q34ad@raisek) (list q349c@outerk (list 'lambda '() q34ae@code))))) (list q349c@outerk (list 'lambda '() q34ae@code)))) q34aa@q34a8 q34a9@q34a6))))) '#f '#f))) ((lambda (q3485@t) ((lambda (q3487@ls/false) (if (and q3487@ls/false (apply (lambda (q3489@con q348a@clause* q348b@b q348c@b*) (q2ccc@id? q3489@con)) q3487@ls/false)) (apply (lambda (q3491@con q3492@clause* q3493@b q3494@b*) ((lambda (q3499@outerk) (q2e8d@bless (list (list 'call/cc (list 'lambda (list q3499@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list q3491@con) (q3484@gen-clauses q3491@con q3499@outerk q3492@clause*)) (cons 'lambda (cons '() (cons q3493@b q3494@b*)))))))))) (gensym))) q3487@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3485@t))) (q2ed7@syntax-dispatch q3485@t '(_ (any . each-any) any . each-any)))) q3481@x))) '#f))) (set! q2ea7@define-enumeration-macro (lambda (q34ff@stx) ((lambda (q3502@set? q3504@remove-dups) (begin (set! q3502@set? (lambda (q351b@x) (or (null? q351b@x) (and (not (memq (car q351b@x) (cdr q351b@x))) (q3502@set? (cdr q351b@x)))))) (set! q3504@remove-dups (lambda (q3519@ls) (if (null? q3519@ls) '() (cons (car q3519@ls) (q3504@remove-dups (remq (car q3519@ls) (cdr q3519@ls))))))) ((lambda (q3505@t) ((lambda (q3507@ls/false) (if (and q3507@ls/false (apply (lambda (q3509@name q350a@id* q350b@maker) (and (q2ccc@id? q3509@name) (q2ccc@id? q350b@maker) (for-all q2ccc@id? q350a@id*))) q3507@ls/false)) (apply (lambda (q350f@name q3510@id* q3511@maker) ((lambda (q3515@name* q3516@mk) (q2e8d@bless (list 'begin (list 'define q3516@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote q3515@name*)))) (list 'define-syntax q350f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote q3515@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote q350f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax q3511@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote q3511@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote q3515@name*)) (cons 'syntax-violation (cons (list 'quote q3511@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons q3516@mk '('(n* ...)))))))))))) (q3504@remove-dups (q2fc6@syntax->datum q3510@id*)) (gensym))) q3507@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3505@t))) (q2ed7@syntax-dispatch q3505@t '(_ any each-any any)))) q34ff@stx))) '#f '#f))) (set! q2ea9@time-macro (lambda (q351d@stx) ((lambda (q351f@t) ((lambda (q3521@ls/false) (if q3521@ls/false (apply (lambda (q3523@expr) (q2e8d@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() q3523@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) q3521@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q351f@t))) (q2ed7@syntax-dispatch q351f@t '(_ any)))) q351d@stx))) (set! q2eab@delay-macro (lambda (q3525@stx) ((lambda (q3527@t) ((lambda (q3529@ls/false) (if q3529@ls/false (apply (lambda (q352b@expr) (q2e8d@bless (list 'make-promise (list 'lambda '() q352b@expr)))) q3529@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3527@t))) (q2ed7@syntax-dispatch q3527@t '(_ any)))) q3525@stx))) (set! q2ead@assert-macro (lambda (q352d@stx) ((lambda (q352f@t) ((lambda (q3531@ls/false) (if q3531@ls/false (apply (lambda (q3533@expr) ((lambda (q3535@pos) (q2e8d@bless (list 'unless q3533@expr (list 'assertion-error (list 'quote q3533@expr) (list 'quote q3535@pos))))) (or (q2fb8@expression-position q352d@stx) (q2fb8@expression-position q3533@expr)))) q3531@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q352f@t))) (q2ed7@syntax-dispatch q352f@t '(_ any)))) q352d@stx))) (set! q2eaf@endianness-macro (lambda (q3537@stx) ((lambda (q3539@t) ((lambda (q353b@ls/false) (if q353b@ls/false (apply (lambda (q353d@e) ((lambda (q353f@t) (if (memv q353f@t '(little)) (q2e8d@bless ''little) (if (memv q353f@t '(big)) (q2e8d@bless ''big) (q2fc0@syntax-violation '#f '"endianness must be big or little" q3537@stx)))) (q2fc6@syntax->datum q353d@e))) q353b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3539@t))) (q2ed7@syntax-dispatch q3539@t '(_ any)))) q3537@stx))) (set! q2eb1@identifier-syntax-macro (lambda (q3541@stx) ((lambda (q3543@t) ((lambda (q3545@ls/false) (if q3545@ls/false (apply (lambda (q3547@expr) (q2e8d@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax q3547@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax q3547@expr) '((syntax (e* ...)))))))))) q3545@ls/false) ((lambda (q3549@t) ((lambda (q354b@ls/false) (if (and q354b@ls/false (apply (lambda (q354d@id1 q354e@expr1 q354f@id2 q3550@expr2 q3551@expr3) (and (q2ccc@id? q354d@id1) (q2ccc@id? q354f@id2) (q2ccc@id? q3550@expr2))) q354b@ls/false)) (apply (lambda (q3557@id1 q3558@expr1 q3559@id2 q355a@expr2 q355b@expr3) (q2e8d@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax q3558@expr1)) (list (list 'set! 'id q355a@expr2) (list 'syntax q355b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons q3558@expr1 '(e* ...))))))))) q354b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3549@t))) (q2ed7@syntax-dispatch q3549@t '(_ (any any) ((#(scheme-id set!) any any) any))))) q3543@t))) (q2ed7@syntax-dispatch q3543@t '(_ any)))) q3541@stx))) (set! q2eb3@do-macro (lambda (q3561@stx) ((lambda (q3564@bind) (begin (set! q3564@bind (lambda (q357b@x) ((lambda (q357d@t) ((lambda (q357f@ls/false) (if q357f@ls/false (apply (lambda (q3581@x q3582@init) (list q3581@x q3582@init q3581@x)) q357f@ls/false) ((lambda (q3585@t) ((lambda (q3587@ls/false) (if q3587@ls/false (apply (lambda (q3589@x q358a@init q358b@step) (list q3589@x q358a@init q358b@step)) q3587@ls/false) ((lambda (q358f@t) ((lambda (q3591@ls/false) (if q3591@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid binding" q3561@stx)) q3591@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q358f@t))) (q2ed7@syntax-dispatch q358f@t '_))) q3585@t))) (q2ed7@syntax-dispatch q3585@t '(any any any)))) q357d@t))) (q2ed7@syntax-dispatch q357d@t '(any any)))) q357b@x))) ((lambda (q3565@t) ((lambda (q3567@ls/false) (if q3567@ls/false (apply (lambda (q3569@binding* q356a@test q356b@expr* q356c@command*) ((lambda (q3571@t) ((lambda (q3573@ls/false) (if q3573@ls/false (apply (lambda (q3575@x* q3576@init* q3577@step*) (if (q2cd6@valid-bound-ids? q3575@x*) (q2e8d@bless (list 'letrec (list (list 'loop (list 'lambda q3575@x* (list 'if q356a@test (cons 'begin (cons '(if #f #f) q356b@expr*)) (cons 'begin (append q356c@command* (list (cons 'loop q3577@step*)))))))) (cons 'loop q3576@init*))) (q2fc0@syntax-violation '#f '"invalid bindings" q3561@stx))) q3573@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3571@t))) (q2ed7@syntax-dispatch q3571@t '#(each (any any any))))) (map q3564@bind q3569@binding*))) q3567@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3565@t))) (q2ed7@syntax-dispatch q3565@t '(_ each-any (any . each-any) . each-any)))) q3561@stx))) '#f))) (set! q2eb5@let*-macro (lambda (q3593@stx) ((lambda (q3595@t) ((lambda (q3597@ls/false) (if (and q3597@ls/false (apply (lambda (q3599@lhs* q359a@rhs* q359b@b q359c@b*) (for-all q2ccc@id? q3599@lhs*)) q3597@ls/false)) (apply (lambda (q35a1@lhs* q35a2@rhs* q35a3@b q35a4@b*) (q2e8d@bless ((letrec ((q35a9@f (lambda (q35ab@x*) (if (null? q35ab@x*) (cons 'let (cons '() (cons q35a3@b q35a4@b*))) (list 'let (list (car q35ab@x*)) (q35a9@f (cdr q35ab@x*))))))) q35a9@f) (map list q35a1@lhs* q35a2@rhs*)))) q3597@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3595@t))) (q2ed7@syntax-dispatch q3595@t '(_ #(each (any any)) any . each-any)))) q3593@stx))) (set! q2eb7@or-macro (lambda (q35ad@stx) ((lambda (q35af@t) ((lambda (q35b1@ls/false) (if q35b1@ls/false (apply (lambda () '#f) q35b1@ls/false) ((lambda (q35b3@t) ((lambda (q35b5@ls/false) (if q35b5@ls/false (apply (lambda (q35b7@e q35b8@e*) (q2e8d@bless ((letrec ((q35bb@f (lambda (q35bd@e q35be@e*) (if (null? q35be@e*) (list 'begin '#f q35bd@e) (list 'let (list (list 't q35bd@e)) (list 'if 't 't (q35bb@f (car q35be@e*) (cdr q35be@e*)))))))) q35bb@f) q35b7@e q35b8@e*))) q35b5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q35b3@t))) (q2ed7@syntax-dispatch q35b3@t '(_ any . each-any)))) q35af@t))) (q2ed7@syntax-dispatch q35af@t '(_)))) q35ad@stx))) (set! q2eb9@and-macro (lambda (q35c1@stx) ((lambda (q35c3@t) ((lambda (q35c5@ls/false) (if q35c5@ls/false (apply (lambda () '#t) q35c5@ls/false) ((lambda (q35c7@t) ((lambda (q35c9@ls/false) (if q35c9@ls/false (apply (lambda (q35cb@e q35cc@e*) (q2e8d@bless ((letrec ((q35cf@f (lambda (q35d1@e q35d2@e*) (if (null? q35d2@e*) (list 'begin '#f q35d1@e) (cons 'if (cons q35d1@e (cons (q35cf@f (car q35d2@e*) (cdr q35d2@e*)) '(#f)))))))) q35cf@f) q35cb@e q35cc@e*))) q35c9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q35c7@t))) (q2ed7@syntax-dispatch q35c7@t '(_ any . each-any)))) q35c3@t))) (q2ed7@syntax-dispatch q35c3@t '(_)))) q35c1@stx))) (set! q2ebb@cond-macro (lambda (q35d5@stx) ((lambda (q35d7@t) ((lambda (q35d9@ls/false) (if q35d9@ls/false (apply (lambda (q35db@cls q35dc@cls*) (q2e8d@bless ((letrec ((q35df@f (lambda (q35e1@cls q35e2@cls*) (if (null? q35e2@cls*) ((lambda (q35e5@t) ((lambda (q35e7@ls/false) (if q35e7@ls/false (apply (lambda (q35e9@e q35ea@e*) (cons 'begin (cons q35e9@e q35ea@e*))) q35e7@ls/false) ((lambda (q35ed@t) ((lambda (q35ef@ls/false) (if q35ef@ls/false (apply (lambda (q35f1@e q35f2@p) (list 'let (list (list 't q35f1@e)) (list 'if 't (cons q35f2@p '(t))))) q35ef@ls/false) ((lambda (q35f5@t) ((lambda (q35f7@ls/false) (if q35f7@ls/false (apply (lambda (q35f9@e) (cons 'or (cons q35f9@e '((if #f #f))))) q35f7@ls/false) ((lambda (q35fb@t) ((lambda (q35fd@ls/false) (if q35fd@ls/false (apply (lambda (q35ff@e q3600@e*) (list 'if q35ff@e (cons 'begin q3600@e*))) q35fd@ls/false) ((lambda (q3603@t) ((lambda (q3605@ls/false) (if q3605@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid last clause" q35d5@stx)) q3605@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3603@t))) (q2ed7@syntax-dispatch q3603@t '_))) q35fb@t))) (q2ed7@syntax-dispatch q35fb@t '(any . each-any)))) q35f5@t))) (q2ed7@syntax-dispatch q35f5@t '(any)))) q35ed@t))) (q2ed7@syntax-dispatch q35ed@t '(any #(scheme-id =>) any)))) q35e5@t))) (q2ed7@syntax-dispatch q35e5@t '(#(scheme-id else) any . each-any)))) q35e1@cls) ((lambda (q3607@t) ((lambda (q3609@ls/false) (if q3609@ls/false (apply (lambda (q360b@e q360c@e*) (q2fc0@syntax-violation '#f '"incorrect position of keyword else" q35d5@stx)) q3609@ls/false) ((lambda (q360f@t) ((lambda (q3611@ls/false) (if q3611@ls/false (apply (lambda (q3613@e q3614@p) (list 'let (list (list 't q3613@e)) (list 'if 't (cons q3614@p '(t)) (q35df@f (car q35e2@cls*) (cdr q35e2@cls*))))) q3611@ls/false) ((lambda (q3617@t) ((lambda (q3619@ls/false) (if q3619@ls/false (apply (lambda (q361b@e) (list 'or q361b@e (q35df@f (car q35e2@cls*) (cdr q35e2@cls*)))) q3619@ls/false) ((lambda (q361d@t) ((lambda (q361f@ls/false) (if q361f@ls/false (apply (lambda (q3621@e q3622@e*) (list 'if q3621@e (cons 'begin q3622@e*) (q35df@f (car q35e2@cls*) (cdr q35e2@cls*)))) q361f@ls/false) ((lambda (q3625@t) ((lambda (q3627@ls/false) (if q3627@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid last clause" q35d5@stx)) q3627@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3625@t))) (q2ed7@syntax-dispatch q3625@t '_))) q361d@t))) (q2ed7@syntax-dispatch q361d@t '(any . each-any)))) q3617@t))) (q2ed7@syntax-dispatch q3617@t '(any)))) q360f@t))) (q2ed7@syntax-dispatch q360f@t '(any #(scheme-id =>) any)))) q3607@t))) (q2ed7@syntax-dispatch q3607@t '(#(scheme-id else) any . each-any)))) q35e1@cls))))) q35df@f) q35db@cls q35dc@cls*))) q35d9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q35d7@t))) (q2ed7@syntax-dispatch q35d7@t '(_ any . each-any)))) q35d5@stx))) (set! q2ebd@do-include (lambda (q3629@stx q362a@id q362b@filename) ((lambda (q362f@filename) (begin (if (not (and (string? q362f@filename) (q2ccc@id? q362a@id))) (q2fc0@syntax-violation '#f '"invalid syntax" q3629@stx) (void)) (cons (q2e8d@bless 'begin) (with-input-from-file q362f@filename (lambda () ((letrec ((q3631@f (lambda (q3633@ls) ((lambda (q3635@x) (if (eof-object? q3635@x) (reverse q3633@ls) (q3631@f (cons (q2caa@datum->stx q362a@id q3635@x) q3633@ls)))) (q2869@q2786@read-annotated))))) q3631@f) '())))))) (q2ce2@stx->datum q362b@filename)))) (set! q2ebf@include-macro (lambda (q3637@e) ((lambda (q3639@t) ((lambda (q363b@ls/false) (if q363b@ls/false (apply (lambda (q363d@id q363e@filename) (q2ebd@do-include q3637@e q363d@id q363e@filename)) q363b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3639@t))) (q2ed7@syntax-dispatch q3639@t '(any any)))) q3637@e))) (set! q2ec1@include-into-macro (lambda (q3641@e) ((lambda (q3643@t) ((lambda (q3645@ls/false) (if q3645@ls/false (apply (lambda (q3647@id q3648@filename) (q2ebd@do-include q3641@e q3647@id q3648@filename)) q3645@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3643@t))) (q2ed7@syntax-dispatch q3643@t '(_ any any)))) q3641@e))) (set! q2ec3@syntax-rules-macro (lambda (q364b@e) ((lambda (q364d@t) ((lambda (q364f@ls/false) (if q364f@ls/false (apply (lambda (q3651@lits q3652@pat* q3653@tmp*) (begin (q2edd@verify-literals q3651@lits q364b@e) (q2e8d@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons q3651@lits (map (lambda (q3657@pat q3658@tmp) ((lambda (q365b@t) ((lambda (q365d@ls/false) (if q365d@ls/false (apply (lambda (q365f@rest) (list (cons 'g q365f@rest) (list 'syntax q3658@tmp))) q365d@ls/false) ((lambda (q3661@t) ((lambda (q3663@ls/false) (if q3663@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid syntax-rules pattern" q364b@e q3657@pat)) q3663@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3661@t))) (q2ed7@syntax-dispatch q3661@t '_))) q365b@t))) (q2ed7@syntax-dispatch q365b@t '(_ . any)))) q3657@pat)) q3652@pat* q3653@tmp*)))))))) q364f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q364d@t))) (q2ed7@syntax-dispatch q364d@t '(_ each-any . #(each (any any)))))) q364b@e))) (set! q2ec5@quasiquote-macro ((lambda () ((lambda (q3666@datum q3682@quasicons* q3684@quasicons q3686@quasiappend q3688@quasivector q368a@vquasi q368c@quasi) (begin (set! q3666@datum (lambda (q3767@x) (list (q2e61@scheme-stx 'quote) (q2cb4@mkstx q3767@x '() '() '())))) (set! q3682@quasicons* (lambda (q375f@x q3760@y) ((letrec ((q3763@f (lambda (q3765@x) (if (null? q3765@x) q3760@y (q3684@quasicons (car q3765@x) (q3763@f (cdr q3765@x))))))) q3763@f) q375f@x))) (set! q3684@quasicons (lambda (q3739@x q373a@y) ((lambda (q373d@t) ((lambda (q373f@ls/false) (if q373f@ls/false (apply (lambda (q3741@dy) ((lambda (q3743@t) ((lambda (q3745@ls/false) (if q3745@ls/false (apply (lambda (q3747@dx) (list (q2e61@scheme-stx 'quote) (cons q3747@dx q3741@dy))) q3745@ls/false) ((lambda (q3749@t) ((lambda (q374b@ls/false) (if q374b@ls/false (apply (lambda () ((lambda (q374d@t) ((lambda (q374f@ls/false) (if q374f@ls/false (apply (lambda () (list (q2e61@scheme-stx 'list) q3739@x)) q374f@ls/false) ((lambda (q3751@t) ((lambda (q3753@ls/false) (if q3753@ls/false (apply (lambda () (list (q2e61@scheme-stx 'cons) q3739@x q373a@y)) q3753@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3751@t))) (q2ed7@syntax-dispatch q3751@t '_))) q374d@t))) (q2ed7@syntax-dispatch q374d@t '()))) q3741@dy)) q374b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3749@t))) (q2ed7@syntax-dispatch q3749@t '_))) q3743@t))) (q2ed7@syntax-dispatch q3743@t '(#(scheme-id quote) any)))) q3739@x)) q373f@ls/false) ((lambda (q3755@t) ((lambda (q3757@ls/false) (if q3757@ls/false (apply (lambda (q3759@stuff) (cons* (q2e61@scheme-stx 'list) q3739@x q3759@stuff)) q3757@ls/false) ((lambda (q375b@t) ((lambda (q375d@ls/false) (if q375d@ls/false (apply (lambda () (list (q2e61@scheme-stx 'cons) q3739@x q373a@y)) q375d@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q375b@t))) (q2ed7@syntax-dispatch q375b@t '_))) q3755@t))) (q2ed7@syntax-dispatch q3755@t '(#(scheme-id list) . each-any)))) q373d@t))) (q2ed7@syntax-dispatch q373d@t '(#(scheme-id quote) any)))) q373a@y))) (set! q3686@quasiappend (lambda (q371f@x q3720@y) ((lambda (q3723@ls) (if (null? q3723@ls) (list (q2e61@scheme-stx 'quote) '()) (if (null? (cdr q3723@ls)) (car q3723@ls) (cons* (q2e61@scheme-stx 'append) q3723@ls)))) ((letrec ((q3725@f (lambda (q3727@x) (if (null? q3727@x) ((lambda (q3729@t) ((lambda (q372b@ls/false) (if q372b@ls/false (apply (lambda () '()) q372b@ls/false) ((lambda (q372d@t) ((lambda (q372f@ls/false) (if q372f@ls/false (apply (lambda () (list q3720@y)) q372f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q372d@t))) (q2ed7@syntax-dispatch q372d@t '_))) q3729@t))) (q2ed7@syntax-dispatch q3729@t '(#(scheme-id quote) ())))) q3720@y) ((lambda (q3731@t) ((lambda (q3733@ls/false) (if q3733@ls/false (apply (lambda () (q3725@f (cdr q3727@x))) q3733@ls/false) ((lambda (q3735@t) ((lambda (q3737@ls/false) (if q3737@ls/false (apply (lambda () (cons (car q3727@x) (q3725@f (cdr q3727@x)))) q3737@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3735@t))) (q2ed7@syntax-dispatch q3735@t '_))) q3731@t))) (q2ed7@syntax-dispatch q3731@t '(#(scheme-id quote) ())))) (car q3727@x)))))) q3725@f) q371f@x)))) (set! q3688@quasivector (lambda (q36ed@x) ((lambda (q36ef@pat-x) ((lambda (q36f1@t) ((lambda (q36f3@ls/false) (if q36f3@ls/false (apply (lambda (q36f5@x*) (list (q2e61@scheme-stx 'quote) (list->vector q36f5@x*))) q36f3@ls/false) ((lambda (q36f7@t) ((lambda (q36f9@ls/false) (if q36f9@ls/false (apply (lambda () ((letrec ((q36fb@f (lambda (q36fd@x q36fe@k) ((lambda (q3701@t) ((lambda (q3703@ls/false) (if q3703@ls/false (apply (lambda (q3705@x*) (q36fe@k (map (lambda (q3707@x) (list (q2e61@scheme-stx 'quote) q3707@x)) q3705@x*))) q3703@ls/false) ((lambda (q3709@t) ((lambda (q370b@ls/false) (if q370b@ls/false (apply (lambda (q370d@x*) (q36fe@k q370d@x*)) q370b@ls/false) ((lambda (q370f@t) ((lambda (q3711@ls/false) (if q3711@ls/false (apply (lambda (q3713@x q3714@y) (q36fb@f q3714@y (lambda (q3717@ls) (q36fe@k (cons q3713@x q3717@ls))))) q3711@ls/false) ((lambda (q3719@t) ((lambda (q371b@ls/false) (if q371b@ls/false (apply (lambda () (list (q2e61@scheme-stx 'list->vector) q36ef@pat-x)) q371b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3719@t))) (q2ed7@syntax-dispatch q3719@t '_))) q370f@t))) (q2ed7@syntax-dispatch q370f@t '(#(scheme-id cons) any any)))) q3709@t))) (q2ed7@syntax-dispatch q3709@t '(#(scheme-id list) . each-any)))) q3701@t))) (q2ed7@syntax-dispatch q3701@t '(#(scheme-id quote) each-any)))) q36fd@x)))) q36fb@f) q36ed@x (lambda (q371d@ls) (cons* (q2e61@scheme-stx 'vector) q371d@ls)))) q36f9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q36f7@t))) (q2ed7@syntax-dispatch q36f7@t '_))) q36f1@t))) (q2ed7@syntax-dispatch q36f1@t '(#(scheme-id quote) each-any)))) q36ef@pat-x)) q36ed@x))) (set! q368a@vquasi (lambda (q36cb@p q36cc@lev) ((lambda (q36cf@t) ((lambda (q36d1@ls/false) (if q36d1@ls/false (apply (lambda (q36d3@p q36d4@q) ((lambda (q36d7@t) ((lambda (q36d9@ls/false) (if q36d9@ls/false (apply (lambda (q36db@p) (if (= q36cc@lev '0) (q3682@quasicons* q36db@p (q368a@vquasi q36d4@q q36cc@lev)) (q3684@quasicons (q3684@quasicons (q3666@datum 'unquote) (q368c@quasi q36db@p (- q36cc@lev '1))) (q368a@vquasi q36d4@q q36cc@lev)))) q36d9@ls/false) ((lambda (q36dd@t) ((lambda (q36df@ls/false) (if q36df@ls/false (apply (lambda (q36e1@p) (if (= q36cc@lev '0) (q3686@quasiappend q36e1@p (q368a@vquasi q36d4@q q36cc@lev)) (q3684@quasicons (q3684@quasicons (q3666@datum 'unquote-splicing) (q368c@quasi q36e1@p (- q36cc@lev '1))) (q368a@vquasi q36d4@q q36cc@lev)))) q36df@ls/false) ((lambda (q36e3@t) ((lambda (q36e5@ls/false) (if q36e5@ls/false (apply (lambda (q36e7@p) (q3684@quasicons (q368c@quasi q36e7@p q36cc@lev) (q368a@vquasi q36d4@q q36cc@lev))) q36e5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q36e3@t))) (q2ed7@syntax-dispatch q36e3@t 'any))) q36dd@t))) (q2ed7@syntax-dispatch q36dd@t '(#(scheme-id unquote-splicing) . each-any)))) q36d7@t))) (q2ed7@syntax-dispatch q36d7@t '(#(scheme-id unquote) . each-any)))) q36d3@p)) q36d1@ls/false) ((lambda (q36e9@t) ((lambda (q36eb@ls/false) (if q36eb@ls/false (apply (lambda () (list (q2e61@scheme-stx 'quote) '())) q36eb@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q36e9@t))) (q2ed7@syntax-dispatch q36e9@t '()))) q36cf@t))) (q2ed7@syntax-dispatch q36cf@t '(any . any)))) q36cb@p))) (set! q368c@quasi (lambda (q3695@p q3696@lev) ((lambda (q3699@t) ((lambda (q369b@ls/false) (if q369b@ls/false (apply (lambda (q369d@p) (if (= q3696@lev '0) q369d@p (q3684@quasicons (q3666@datum 'unquote) (q368c@quasi (list q369d@p) (- q3696@lev '1))))) q369b@ls/false) ((lambda (q369f@t) ((lambda (q36a1@ls/false) (if q36a1@ls/false (apply (lambda (q36a3@p q36a4@q) (if (= q3696@lev '0) (q3682@quasicons* q36a3@p (q368c@quasi q36a4@q q3696@lev)) (q3684@quasicons (q3684@quasicons (q3666@datum 'unquote) (q368c@quasi q36a3@p (- q3696@lev '1))) (q368c@quasi q36a4@q q3696@lev)))) q36a1@ls/false) ((lambda (q36a7@t) ((lambda (q36a9@ls/false) (if q36a9@ls/false (apply (lambda (q36ab@p q36ac@q) (if (= q3696@lev '0) (q3686@quasiappend q36ab@p (q368c@quasi q36ac@q q3696@lev)) (q3684@quasicons (q3684@quasicons (q3666@datum 'unquote-splicing) (q368c@quasi q36ab@p (- q3696@lev '1))) (q368c@quasi q36ac@q q3696@lev)))) q36a9@ls/false) ((lambda (q36af@t) ((lambda (q36b1@ls/false) (if q36b1@ls/false (apply (lambda (q36b3@p) (q3684@quasicons (q3666@datum 'quasiquote) (q368c@quasi (list q36b3@p) (+ q3696@lev '1)))) q36b1@ls/false) ((lambda (q36b5@t) ((lambda (q36b7@ls/false) (if q36b7@ls/false (apply (lambda (q36b9@p q36ba@q) (q3684@quasicons (q368c@quasi q36b9@p q3696@lev) (q368c@quasi q36ba@q q3696@lev))) q36b7@ls/false) ((lambda (q36bd@t) ((lambda (q36bf@ls/false) (if (and q36bf@ls/false (apply (lambda (q36c1@x) (not (q2c94@stx? q36c1@x))) q36bf@ls/false)) (apply (lambda (q36c3@x) (q3688@quasivector (q368a@vquasi q36c3@x q3696@lev))) q36bf@ls/false) ((lambda (q36c5@t) ((lambda (q36c7@ls/false) (if q36c7@ls/false (apply (lambda (q36c9@p) (list (q2e61@scheme-stx 'quote) q36c9@p)) q36c7@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q36c5@t))) (q2ed7@syntax-dispatch q36c5@t 'any))) q36bd@t))) (q2ed7@syntax-dispatch q36bd@t '#(vector each-any)))) q36b5@t))) (q2ed7@syntax-dispatch q36b5@t '(any . any)))) q36af@t))) (q2ed7@syntax-dispatch q36af@t '(#(scheme-id quasiquote) any)))) q36a7@t))) (q2ed7@syntax-dispatch q36a7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) q369f@t))) (q2ed7@syntax-dispatch q369f@t '((#(scheme-id unquote) . each-any) . any)))) q3699@t))) (q2ed7@syntax-dispatch q3699@t '(#(scheme-id unquote) any)))) q3695@p))) (lambda (q368d@x) ((lambda (q368f@t) ((lambda (q3691@ls/false) (if q3691@ls/false (apply (lambda (q3693@e) (q368c@quasi q3693@e '0)) q3691@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q368f@t))) (q2ed7@syntax-dispatch q368f@t '(_ any)))) q368d@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! q2ec7@quasisyntax-macro ((lambda () ((lambda (q376a@quasi) (begin (set! q376a@quasi (lambda (q3785@p q3786@lev) ((lambda (q3789@t) ((lambda (q378b@ls/false) (if q378b@ls/false (apply (lambda (q378d@p) (if (= q3786@lev '0) ((lambda (q378f@g) (values (list q378f@g) (list q378d@p) q378f@g)) (gensym)) (call-with-values (lambda () (q376a@quasi q378d@p (- q3786@lev '1))) (lambda (q3797@q3792 q3798@q3794 q3799@q3796) ((lambda (q379d@p q379e@rhs* q379f@lhs*) (values q379f@lhs* q379e@rhs* (list 'unsyntax q379d@p))) q3799@q3796 q3798@q3794 q3797@q3792))))) q378b@ls/false) ((lambda (q37a3@t) ((lambda (q37a5@ls/false) (if (and q37a5@ls/false (apply (lambda () (= q3786@lev '0)) q37a5@ls/false)) (apply (lambda () (q2fc0@syntax-violation '#f '"incorrect use of unsyntax" q3785@p)) q37a5@ls/false) ((lambda (q37a7@t) ((lambda (q37a9@ls/false) (if q37a9@ls/false (apply (lambda (q37ab@p* q37ac@q) (call-with-values (lambda () (q376a@quasi q37ac@q q3786@lev)) (lambda (q37b5@q37b0 q37b6@q37b2 q37b7@q37b4) ((lambda (q37bb@q q37bc@rhs* q37bd@lhs*) (if (= q3786@lev '0) ((lambda (q37c1@g*) (values (append q37c1@g* q37bd@lhs*) (append q37ab@p* q37bc@rhs*) (append q37c1@g* q37bb@q))) (map (lambda (q37c3@x) (gensym)) q37ab@p*)) (call-with-values (lambda () (q376a@quasi q37ab@p* (- q3786@lev '1))) (lambda (q37cb@q37c6 q37cc@q37c8 q37cd@q37ca) ((lambda (q37d1@p* q37d2@rhs2* q37d3@lhs2*) (values (append q37d3@lhs2* q37bd@lhs*) (append q37d2@rhs2* q37bc@rhs*) (cons (cons 'unsyntax q37d1@p*) q37bb@q))) q37cd@q37ca q37cc@q37c8 q37cb@q37c6))))) q37b7@q37b4 q37b6@q37b2 q37b5@q37b0)))) q37a9@ls/false) ((lambda (q37d7@t) ((lambda (q37d9@ls/false) (if q37d9@ls/false (apply (lambda (q37db@p* q37dc@q) (call-with-values (lambda () (q376a@quasi q37dc@q q3786@lev)) (lambda (q37e5@q37e0 q37e6@q37e2 q37e7@q37e4) ((lambda (q37eb@q q37ec@rhs* q37ed@lhs*) (if (= q3786@lev '0) ((lambda (q37f1@g*) (values (append (map (lambda (q37f3@g) (cons q37f3@g '(...))) q37f1@g*) q37ed@lhs*) (append q37db@p* q37ec@rhs*) (append (apply append (map (lambda (q37f5@g) (cons q37f5@g '(...))) q37f1@g*)) q37eb@q))) (map (lambda (q37f7@x) (gensym)) q37db@p*)) (call-with-values (lambda () (q376a@quasi q37db@p* (- q3786@lev '1))) (lambda (q37ff@q37fa q3800@q37fc q3801@q37fe) ((lambda (q3805@p* q3806@rhs2* q3807@lhs2*) (values (append q3807@lhs2* q37ed@lhs*) (append q3806@rhs2* q37ec@rhs*) (cons (cons 'unsyntax-splicing q3805@p*) q37eb@q))) q3801@q37fe q3800@q37fc q37ff@q37fa))))) q37e7@q37e4 q37e6@q37e2 q37e5@q37e0)))) q37d9@ls/false) ((lambda (q380b@t) ((lambda (q380d@ls/false) (if (and q380d@ls/false (apply (lambda () (= q3786@lev '0)) q380d@ls/false)) (apply (lambda () (q2fc0@syntax-violation '#f '"incorrect use of unsyntax-splicing" q3785@p)) q380d@ls/false) ((lambda (q380f@t) ((lambda (q3811@ls/false) (if q3811@ls/false (apply (lambda (q3813@p) (call-with-values (lambda () (q376a@quasi q3813@p (+ q3786@lev '1))) (lambda (q381b@q3816 q381c@q3818 q381d@q381a) ((lambda (q3821@p q3822@rhs* q3823@lhs*) (values q3823@lhs* q3822@rhs* (list 'quasisyntax q3821@p))) q381d@q381a q381c@q3818 q381b@q3816)))) q3811@ls/false) ((lambda (q3827@t) ((lambda (q3829@ls/false) (if q3829@ls/false (apply (lambda (q382b@p q382c@q) (call-with-values (lambda () (q376a@quasi q382b@p q3786@lev)) (lambda (q383b@q3830 q383c@q3832 q383d@q3834) (call-with-values (lambda () (q376a@quasi q382c@q q3786@lev)) (lambda (q3841@q3836 q3842@q3838 q3843@q383a) ((lambda (q3847@q q3848@rhs2* q3849@lhs2* q384a@p q384b@rhs* q384c@lhs*) (values (append q3849@lhs2* q384c@lhs*) (append q3848@rhs2* q384b@rhs*) (cons q384a@p q3847@q))) q3843@q383a q3842@q3838 q3841@q3836 q383d@q3834 q383c@q3832 q383b@q3830)))))) q3829@ls/false) ((lambda (q3853@t) ((lambda (q3855@ls/false) (if q3855@ls/false (apply (lambda (q3857@x*) (call-with-values (lambda () (q376a@quasi q3857@x* q3786@lev)) (lambda (q385f@q385a q3860@q385c q3861@q385e) ((lambda (q3865@x* q3866@rhs* q3867@lhs*) (values q3867@lhs* q3866@rhs* (list->vector q3865@x*))) q3861@q385e q3860@q385c q385f@q385a)))) q3855@ls/false) ((lambda (q386b@t) ((lambda (q386d@ls/false) (if q386d@ls/false (apply (lambda () (values '() '() q3785@p)) q386d@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q386b@t))) (q2ed7@syntax-dispatch q386b@t '_))) q3853@t))) (q2ed7@syntax-dispatch q3853@t '#(vector each-any)))) q3827@t))) (q2ed7@syntax-dispatch q3827@t '(any . any)))) q380f@t))) (q2ed7@syntax-dispatch q380f@t '(#(scheme-id quasisyntax) any)))) q380b@t))) (q2ed7@syntax-dispatch q380b@t '#(scheme-id unsyntax-splicing)))) q37d7@t))) (q2ed7@syntax-dispatch q37d7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) q37a7@t))) (q2ed7@syntax-dispatch q37a7@t '((#(scheme-id unsyntax) . each-any) . any)))) q37a3@t))) (q2ed7@syntax-dispatch q37a3@t '#(scheme-id unsyntax)))) q3789@t))) (q2ed7@syntax-dispatch q3789@t '(#(scheme-id unsyntax) any)))) q3785@p))) (lambda (q376b@x) ((lambda (q376d@t) ((lambda (q376f@ls/false) (if q376f@ls/false (apply (lambda (q3771@e) (call-with-values (lambda () (q376a@quasi q3771@e '0)) (lambda (q3779@q3774 q377a@q3776 q377b@q3778) ((lambda (q377f@v q3780@rhs* q3781@lhs*) (q2e8d@bless (list 'syntax-case (cons 'list q3780@rhs*) '() (list q3781@lhs* (list 'syntax q377f@v))))) q377b@q3778 q377a@q3776 q3779@q3774)))) q376f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q376d@t))) (q2ed7@syntax-dispatch q376d@t '(_ any)))) q376b@x)))) '#f)))) (set! q2ec9@define-struct-macro (lambda (q386f@stx) (q2fc0@syntax-violation '#f '"define-struct not supported" q386f@stx))) (set! q2ecb@define-record-type-macro (lambda (q3871@x) ((lambda (q3874@id q3876@get-record-name q3878@get-record-constructor-name q387a@get-record-predicate-name q387c@get-clause q387e@foo-rtd-code q3880@parent-rtd-code q3882@parent-rcd-code q3884@foo-rcd-code q3886@get-protocol-code q3888@get-fields q388a@get-mutator-indices q388c@get-mutators q388e@get-accessors q3890@enumerate q3892@do-define-record q3894@verify-clauses) (begin (set! q3874@id (lambda (q3a67@ctxt . q3a69@str*) (q2fc4@datum->syntax q3a67@ctxt (string->symbol (apply string-append (map (lambda (q3a6b@x) (if (symbol? q3a6b@x) (symbol->string q3a6b@x) (if (string? q3a6b@x) q3a6b@x (assertion-violation 'define-record-type '"BUG")))) q3a69@str*)))))) (set! q3876@get-record-name (lambda (q3a55@spec) ((lambda (q3a57@t) ((lambda (q3a59@ls/false) (if q3a59@ls/false (apply (lambda (q3a5b@foo q3a5c@make-foo q3a5d@foo?) q3a5b@foo) q3a59@ls/false) ((lambda (q3a61@t) ((lambda (q3a63@ls/false) (if q3a63@ls/false (apply (lambda (q3a65@foo) q3a65@foo) q3a63@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3a61@t))) (q2ed7@syntax-dispatch q3a61@t 'any))) q3a57@t))) (q2ed7@syntax-dispatch q3a57@t '(any any any)))) q3a55@spec))) (set! q3878@get-record-constructor-name (lambda (q3a41@spec) ((lambda (q3a43@t) ((lambda (q3a45@ls/false) (if q3a45@ls/false (apply (lambda (q3a47@foo q3a48@make-foo q3a49@foo?) q3a48@make-foo) q3a45@ls/false) ((lambda (q3a4d@t) ((lambda (q3a4f@ls/false) (if (and q3a4f@ls/false (apply (lambda (q3a51@foo) (q2ccc@id? q3a51@foo)) q3a4f@ls/false)) (apply (lambda (q3a53@foo) (q3874@id q3a53@foo '"make-" (q2ce2@stx->datum q3a53@foo))) q3a4f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3a4d@t))) (q2ed7@syntax-dispatch q3a4d@t 'any))) q3a43@t))) (q2ed7@syntax-dispatch q3a43@t '(any any any)))) q3a41@spec))) (set! q387a@get-record-predicate-name (lambda (q3a2d@spec) ((lambda (q3a2f@t) ((lambda (q3a31@ls/false) (if q3a31@ls/false (apply (lambda (q3a33@foo q3a34@make-foo q3a35@foo?) q3a35@foo?) q3a31@ls/false) ((lambda (q3a39@t) ((lambda (q3a3b@ls/false) (if (and q3a3b@ls/false (apply (lambda (q3a3d@foo) (q2ccc@id? q3a3d@foo)) q3a3b@ls/false)) (apply (lambda (q3a3f@foo) (q3874@id q3a3f@foo (q2ce2@stx->datum q3a3f@foo) '"?")) q3a3b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3a39@t))) (q2ed7@syntax-dispatch q3a39@t 'any))) q3a2f@t))) (q2ed7@syntax-dispatch q3a2f@t '(any any any)))) q3a2d@spec))) (set! q387c@get-clause (lambda (q3a1b@id q3a1c@ls) ((lambda (q3a1f@t) ((lambda (q3a21@ls/false) (if q3a21@ls/false (apply (lambda () '#f) q3a21@ls/false) ((lambda (q3a23@t) ((lambda (q3a25@ls/false) (if q3a25@ls/false (apply (lambda (q3a27@x q3a28@rest q3a29@ls) (if (q2cd4@free-id=? (q2e8d@bless q3a1b@id) q3a27@x) (cons q3a27@x q3a28@rest) (q387c@get-clause q3a1b@id q3a29@ls))) q3a25@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3a23@t))) (q2ed7@syntax-dispatch q3a23@t '((any . any) . any)))) q3a1f@t))) (q2ed7@syntax-dispatch q3a1f@t '()))) q3a1c@ls))) (set! q387e@foo-rtd-code (lambda (q39c9@name q39ca@clause* q39cb@parent-rtd-code) ((lambda (q39d0@convert-field-spec*) (begin (set! q39d0@convert-field-spec* (lambda (q3a01@ls) (list->vector (map (lambda (q3a03@x) ((lambda (q3a05@t) ((lambda (q3a07@ls/false) (if q3a07@ls/false (apply (lambda (q3a09@name q3a0a@rest) (list 'mutable q3a09@name)) q3a07@ls/false) ((lambda (q3a0d@t) ((lambda (q3a0f@ls/false) (if q3a0f@ls/false (apply (lambda (q3a11@name q3a12@rest) (list 'immutable q3a11@name)) q3a0f@ls/false) ((lambda (q3a15@t) ((lambda (q3a17@ls/false) (if q3a17@ls/false (apply (lambda (q3a19@name) (list 'immutable q3a19@name)) q3a17@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3a15@t))) (q2ed7@syntax-dispatch q3a15@t 'any))) q3a0d@t))) (q2ed7@syntax-dispatch q3a0d@t '(#(scheme-id immutable) any . any)))) q3a05@t))) (q2ed7@syntax-dispatch q3a05@t '(#(scheme-id mutable) any . any)))) q3a03@x)) q3a01@ls)))) ((lambda (q39d1@uid-code q39d2@sealed? q39d3@opaque? q39d4@fields) (q2e8d@bless (list 'make-record-type-descriptor (list 'quote q39c9@name) q39cb@parent-rtd-code q39d1@uid-code q39d2@sealed? q39d3@opaque? q39d4@fields))) ((lambda (q39d9@t) ((lambda (q39db@ls/false) (if q39db@ls/false (apply (lambda () (list 'quote (gensym))) q39db@ls/false) ((lambda (q39dd@t) ((lambda (q39df@ls/false) (if q39df@ls/false (apply (lambda (q39e1@uid) (list 'quote q39e1@uid)) q39df@ls/false) ((lambda (q39e3@t) ((lambda (q39e5@ls/false) (if q39e5@ls/false (apply (lambda () '#f) q39e5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39e3@t))) (q2ed7@syntax-dispatch q39e3@t '_))) q39dd@t))) (q2ed7@syntax-dispatch q39dd@t '(_ any)))) q39d9@t))) (q2ed7@syntax-dispatch q39d9@t '(_)))) (q387c@get-clause 'nongenerative q39ca@clause*)) ((lambda (q39e7@t) ((lambda (q39e9@ls/false) (if q39e9@ls/false (apply (lambda () '#t) q39e9@ls/false) ((lambda (q39eb@t) ((lambda (q39ed@ls/false) (if q39ed@ls/false (apply (lambda () '#f) q39ed@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39eb@t))) (q2ed7@syntax-dispatch q39eb@t '_))) q39e7@t))) (q2ed7@syntax-dispatch q39e7@t '(_ #(atom #t))))) (q387c@get-clause 'sealed q39ca@clause*)) ((lambda (q39ef@t) ((lambda (q39f1@ls/false) (if q39f1@ls/false (apply (lambda () '#t) q39f1@ls/false) ((lambda (q39f3@t) ((lambda (q39f5@ls/false) (if q39f5@ls/false (apply (lambda () '#f) q39f5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39f3@t))) (q2ed7@syntax-dispatch q39f3@t '_))) q39ef@t))) (q2ed7@syntax-dispatch q39ef@t '(_ #(atom #t))))) (q387c@get-clause 'opaque q39ca@clause*)) ((lambda (q39f7@t) ((lambda (q39f9@ls/false) (if q39f9@ls/false (apply (lambda (q39fb@field-spec*) (list 'quote (q39d0@convert-field-spec* q39fb@field-spec*))) q39f9@ls/false) ((lambda (q39fd@t) ((lambda (q39ff@ls/false) (if q39ff@ls/false (apply (lambda () ''#()) q39ff@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39fd@t))) (q2ed7@syntax-dispatch q39fd@t '_))) q39f7@t))) (q2ed7@syntax-dispatch q39f7@t '(_ . each-any)))) (q387c@get-clause 'fields q39ca@clause*))))) '#f))) (set! q3880@parent-rtd-code (lambda (q39b1@clause*) ((lambda (q39b3@t) ((lambda (q39b5@ls/false) (if q39b5@ls/false (apply (lambda (q39b7@name) (list 'record-type-descriptor q39b7@name)) q39b5@ls/false) ((lambda (q39b9@t) ((lambda (q39bb@ls/false) (if q39bb@ls/false (apply (lambda () ((lambda (q39bd@t) ((lambda (q39bf@ls/false) (if q39bf@ls/false (apply (lambda (q39c1@rtd q39c2@rcd) q39c1@rtd) q39bf@ls/false) ((lambda (q39c5@t) ((lambda (q39c7@ls/false) (if q39c7@ls/false (apply (lambda () '#f) q39c7@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39c5@t))) (q2ed7@syntax-dispatch q39c5@t '#(atom #f)))) q39bd@t))) (q2ed7@syntax-dispatch q39bd@t '(_ any any)))) (q387c@get-clause 'parent-rtd q39b1@clause*))) q39bb@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39b9@t))) (q2ed7@syntax-dispatch q39b9@t '#(atom #f)))) q39b3@t))) (q2ed7@syntax-dispatch q39b3@t '(_ any)))) (q387c@get-clause 'parent q39b1@clause*)))) (set! q3882@parent-rcd-code (lambda (q3999@clause*) ((lambda (q399b@t) ((lambda (q399d@ls/false) (if q399d@ls/false (apply (lambda (q399f@name) (list 'record-constructor-descriptor q399f@name)) q399d@ls/false) ((lambda (q39a1@t) ((lambda (q39a3@ls/false) (if q39a3@ls/false (apply (lambda () ((lambda (q39a5@t) ((lambda (q39a7@ls/false) (if q39a7@ls/false (apply (lambda (q39a9@rtd q39aa@rcd) q39aa@rcd) q39a7@ls/false) ((lambda (q39ad@t) ((lambda (q39af@ls/false) (if q39af@ls/false (apply (lambda () '#f) q39af@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39ad@t))) (q2ed7@syntax-dispatch q39ad@t '#(atom #f)))) q39a5@t))) (q2ed7@syntax-dispatch q39a5@t '(_ any any)))) (q387c@get-clause 'parent-rtd q3999@clause*))) q39a3@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q39a1@t))) (q2ed7@syntax-dispatch q39a1@t '#(atom #f)))) q399b@t))) (q2ed7@syntax-dispatch q399b@t '(_ any)))) (q387c@get-clause 'parent q3999@clause*)))) (set! q3884@foo-rcd-code (lambda (q3991@clause* q3992@foo-rtd q3993@protocol q3994@parent-rcd-code) (list 'make-record-constructor-descriptor q3992@foo-rtd q3994@parent-rcd-code q3993@protocol))) (set! q3886@get-protocol-code (lambda (q3985@clause*) ((lambda (q3987@t) ((lambda (q3989@ls/false) (if q3989@ls/false (apply (lambda (q398b@expr) q398b@expr) q3989@ls/false) ((lambda (q398d@t) ((lambda (q398f@ls/false) (if q398f@ls/false (apply (lambda () '#f) q398f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q398d@t))) (q2ed7@syntax-dispatch q398d@t '_))) q3987@t))) (q2ed7@syntax-dispatch q3987@t '(_ any)))) (q387c@get-clause 'protocol q3985@clause*)))) (set! q3888@get-fields (lambda (q3973@clause*) ((lambda (q3975@t) ((lambda (q3977@ls/false) (if q3977@ls/false (apply (lambda () '()) q3977@ls/false) ((lambda (q3979@t) ((lambda (q397b@ls/false) (if q397b@ls/false (apply (lambda (q397d@f*) q397d@f*) q397b@ls/false) ((lambda (q397f@t) ((lambda (q3981@ls/false) (if q3981@ls/false (apply (lambda (q3983@rest) (q3888@get-fields q3983@rest)) q3981@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q397f@t))) (q2ed7@syntax-dispatch q397f@t '(_ . any)))) q3979@t))) (q2ed7@syntax-dispatch q3979@t '((#(scheme-id fields) . each-any) . _)))) q3975@t))) (q2ed7@syntax-dispatch q3975@t '()))) q3973@clause*))) (set! q388a@get-mutator-indices (lambda (q395b@fields) ((letrec ((q395d@f (lambda (q395f@fields q3960@i) ((lambda (q3963@t) ((lambda (q3965@ls/false) (if q3965@ls/false (apply (lambda () '()) q3965@ls/false) ((lambda (q3967@t) ((lambda (q3969@ls/false) (if q3969@ls/false (apply (lambda (q396b@rest) (cons q3960@i (q395d@f q396b@rest (+ q3960@i '1)))) q3969@ls/false) ((lambda (q396d@t) ((lambda (q396f@ls/false) (if q396f@ls/false (apply (lambda (q3971@rest) (q395d@f q3971@rest (+ q3960@i '1))) q396f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q396d@t))) (q2ed7@syntax-dispatch q396d@t '(_ . any)))) q3967@t))) (q2ed7@syntax-dispatch q3967@t '((#(scheme-id mutable) . _) . any)))) q3963@t))) (q2ed7@syntax-dispatch q3963@t '()))) q395f@fields)))) q395d@f) q395b@fields '0))) (set! q388c@get-mutators (lambda (q3931@foo q3932@fields) ((lambda (q3936@gen-name) (begin (set! q3936@gen-name (lambda (q3959@x) (q2fc4@datum->syntax q3931@foo (string->symbol (string-append (symbol->string (q2fc6@syntax->datum q3931@foo)) '"-" (symbol->string (q2fc6@syntax->datum q3959@x)) '"-set!"))))) ((letrec ((q3937@f (lambda (q3939@fields) ((lambda (q393b@t) ((lambda (q393d@ls/false) (if q393d@ls/false (apply (lambda () '()) q393d@ls/false) ((lambda (q393f@t) ((lambda (q3941@ls/false) (if q3941@ls/false (apply (lambda (q3943@name q3944@accessor q3945@mutator q3946@rest) (cons q3945@mutator (q3937@f q3946@rest))) q3941@ls/false) ((lambda (q394b@t) ((lambda (q394d@ls/false) (if q394d@ls/false (apply (lambda (q394f@name q3950@rest) (cons (q3936@gen-name q394f@name) (q3937@f q3950@rest))) q394d@ls/false) ((lambda (q3953@t) ((lambda (q3955@ls/false) (if q3955@ls/false (apply (lambda (q3957@rest) (q3937@f q3957@rest)) q3955@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3953@t))) (q2ed7@syntax-dispatch q3953@t '(_ . any)))) q394b@t))) (q2ed7@syntax-dispatch q394b@t '((#(scheme-id mutable) any) . any)))) q393f@t))) (q2ed7@syntax-dispatch q393f@t '((#(scheme-id mutable) any any any) . any)))) q393b@t))) (q2ed7@syntax-dispatch q393b@t '()))) q3939@fields)))) q3937@f) q3932@fields))) '#f))) (set! q388e@get-accessors (lambda (q38ed@foo q38ee@fields) ((lambda (q38f2@gen-name) (begin (set! q38f2@gen-name (lambda (q392f@x) (q2fc4@datum->syntax q38ed@foo (string->symbol (string-append (symbol->string (q2fc6@syntax->datum q38ed@foo)) '"-" (symbol->string (q2fc6@syntax->datum q392f@x))))))) (map (lambda (q38f3@field) ((lambda (q38f5@t) ((lambda (q38f7@ls/false) (if (and q38f7@ls/false (apply (lambda (q38f9@name q38fa@accessor q38fb@mutator) (q2ccc@id? q38fa@accessor)) q38f7@ls/false)) (apply (lambda (q38ff@name q3900@accessor q3901@mutator) q3900@accessor) q38f7@ls/false) ((lambda (q3905@t) ((lambda (q3907@ls/false) (if (and q3907@ls/false (apply (lambda (q3909@name q390a@accessor) (q2ccc@id? q390a@accessor)) q3907@ls/false)) (apply (lambda (q390d@name q390e@accessor) q390e@accessor) q3907@ls/false) ((lambda (q3911@t) ((lambda (q3913@ls/false) (if (and q3913@ls/false (apply (lambda (q3915@name) (q2ccc@id? q3915@name)) q3913@ls/false)) (apply (lambda (q3917@name) (q38f2@gen-name q3917@name)) q3913@ls/false) ((lambda (q3919@t) ((lambda (q391b@ls/false) (if (and q391b@ls/false (apply (lambda (q391d@name) (q2ccc@id? q391d@name)) q391b@ls/false)) (apply (lambda (q391f@name) (q38f2@gen-name q391f@name)) q391b@ls/false) ((lambda (q3921@t) ((lambda (q3923@ls/false) (if (and q3923@ls/false (apply (lambda (q3925@name) (q2ccc@id? q3925@name)) q3923@ls/false)) (apply (lambda (q3927@name) (q38f2@gen-name q3927@name)) q3923@ls/false) ((lambda (q3929@t) ((lambda (q392b@ls/false) (if q392b@ls/false (apply (lambda (q392d@others) (q2fc0@syntax-violation '#f '"invalid field spec" q38f3@field)) q392b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3929@t))) (q2ed7@syntax-dispatch q3929@t 'any))) q3921@t))) (q2ed7@syntax-dispatch q3921@t 'any))) q3919@t))) (q2ed7@syntax-dispatch q3919@t '(#(scheme-id immutable) any)))) q3911@t))) (q2ed7@syntax-dispatch q3911@t '(#(scheme-id mutable) any)))) q3905@t))) (q2ed7@syntax-dispatch q3905@t '(#(scheme-id immutable) any any)))) q38f5@t))) (q2ed7@syntax-dispatch q38f5@t '(#(scheme-id mutable) any any any)))) q38f3@field)) q38ee@fields))) '#f))) (set! q3890@enumerate (lambda (q38e5@ls) ((letrec ((q38e7@f (lambda (q38e9@ls q38ea@i) (if (null? q38e9@ls) '() (cons q38ea@i (q38e7@f (cdr q38e9@ls) (+ q38ea@i '1))))))) q38e7@f) q38e5@ls '0))) (set! q3892@do-define-record (lambda (q38bd@namespec q38be@clause*) ((lambda (q38c1@foo) ((lambda (q38c3@foo-rtd) ((lambda (q38c5@foo-rcd) ((lambda (q38c7@protocol) ((lambda (q38c9@make-foo) ((lambda (q38cb@fields) ((lambda (q38cd@idx*) ((lambda (q38cf@foo-x*) ((lambda (q38d1@set-foo-x!*) ((lambda (q38d3@set-foo-idx*) ((lambda (q38d5@foo?) ((lambda (q38d7@foo-rtd-code) ((lambda (q38d9@foo-rcd-code) ((lambda (q38db@protocol-code) ((lambda () (q2e8d@bless (cons 'begin (cons (list 'define q38c3@foo-rtd q38d7@foo-rtd-code) (cons (list 'define q38c7@protocol q38db@protocol-code) (cons (list 'define q38c5@foo-rcd q38d9@foo-rcd-code) (cons (list 'define-syntax q38c1@foo (list 'list ''$rtd (list 'syntax q38c3@foo-rtd) (list 'syntax q38c5@foo-rcd))) (cons (list 'define q38d5@foo? (list 'record-predicate q38c3@foo-rtd)) (cons (list 'define q38c9@make-foo (list 'record-constructor q38c5@foo-rcd)) (append (map (lambda (q38dd@foo-x q38de@idx) (list 'define q38dd@foo-x (list 'record-accessor q38c3@foo-rtd q38de@idx))) q38cf@foo-x* q38cd@idx*) (map (lambda (q38e1@set-foo-x! q38e2@idx) (list 'define q38e1@set-foo-x! (list 'record-mutator q38c3@foo-rtd q38e2@idx))) q38d1@set-foo-x!* q38d3@set-foo-idx*))))))))))))) (q3886@get-protocol-code q38be@clause*))) (q3884@foo-rcd-code q38be@clause* q38c3@foo-rtd q38c7@protocol (q3882@parent-rcd-code q38be@clause*)))) (q387e@foo-rtd-code q38c1@foo q38be@clause* (q3880@parent-rtd-code q38be@clause*)))) (q387a@get-record-predicate-name q38bd@namespec))) (q388a@get-mutator-indices q38cb@fields))) (q388c@get-mutators q38c1@foo q38cb@fields))) (q388e@get-accessors q38c1@foo q38cb@fields))) (q3890@enumerate q38cb@fields))) (q3888@get-fields q38be@clause*))) (q3878@get-record-constructor-name q38bd@namespec))) (gensym))) (gensym))) (gensym))) (q3876@get-record-name q38bd@namespec)))) (set! q3894@verify-clauses (lambda (q389d@x q389e@cls*) ((lambda (q38a2@valid-kwds q38a4@free-id-member?) (begin (set! q38a2@valid-kwds (map q2e8d@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! q38a4@free-id-member? (lambda (q38b9@x q38ba@ls) (and (pair? q38ba@ls) (or (q2cd4@free-id=? q38b9@x (car q38ba@ls)) (q38a4@free-id-member? q38b9@x (cdr q38ba@ls)))))) ((letrec ((q38a5@f (lambda (q38a7@cls* q38a8@seen*) (if (not (null? q38a7@cls*)) ((lambda (q38ab@t) ((lambda (q38ad@ls/false) (if q38ad@ls/false (apply (lambda (q38af@kwd q38b0@rest) (if (or (not (q2ccc@id? q38af@kwd)) (not (q38a4@free-id-member? q38af@kwd q38a2@valid-kwds))) (q2fc0@syntax-violation '#f '"not a valid define-record-type keyword" q38af@kwd) (if (q2cda@bound-id-member? q38af@kwd q38a8@seen*) (q2fc0@syntax-violation '#f '"duplicate use of keyword " q389d@x q38af@kwd) (q38a5@f (cdr q38a7@cls*) (cons q38af@kwd q38a8@seen*))))) q38ad@ls/false) ((lambda (q38b3@t) ((lambda (q38b5@ls/false) (if q38b5@ls/false (apply (lambda (q38b7@cls) (q2fc0@syntax-violation '#f '"malformed define-record-type clause" q38b7@cls)) q38b5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q38b3@t))) (q2ed7@syntax-dispatch q38b3@t 'any))) q38ab@t))) (q2ed7@syntax-dispatch q38ab@t '(any . any)))) (car q38a7@cls*)) (void))))) q38a5@f) q389e@cls* '()))) '#f '#f))) ((lambda (q3895@t) ((lambda (q3897@ls/false) (if q3897@ls/false (apply (lambda (q3899@namespec q389a@clause*) (begin (q3894@verify-clauses q3871@x q389a@clause*) (q3892@do-define-record q3899@namespec q389a@clause*))) q3897@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3895@t))) (q2ed7@syntax-dispatch q3895@t '(_ any . each-any)))) q3871@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q2ecd@define-condition-type-macro (lambda (q3a6d@x) ((lambda (q3a70@mkname) (begin (set! q3a70@mkname (lambda (q3a9d@name q3a9e@suffix) (q2fc4@datum->syntax q3a9d@name (string->symbol (string-append (symbol->string (q2fc6@syntax->datum q3a9d@name)) q3a9e@suffix))))) ((lambda (q3a71@t) ((lambda (q3a73@ls/false) (if (and q3a73@ls/false (apply (lambda (q3a75@ctxt q3a76@name q3a77@super q3a78@constructor q3a79@predicate q3a7a@field* q3a7b@accessor*) (and (q2ccc@id? q3a76@name) (q2ccc@id? q3a77@super) (q2ccc@id? q3a78@constructor) (q2ccc@id? q3a79@predicate) (for-all q2ccc@id? q3a7a@field*) (for-all q2ccc@id? q3a7b@accessor*))) q3a73@ls/false)) (apply (lambda (q3a83@ctxt q3a84@name q3a85@super q3a86@constructor q3a87@predicate q3a88@field* q3a89@accessor*) ((lambda (q3a91@aux-accessor*) (q2e8d@bless (cons 'begin (cons (cons 'define-record-type (cons (list q3a84@name q3a86@constructor (gensym)) (cons (list 'parent q3a85@super) (cons (cons 'fields (map (lambda (q3a93@field q3a94@aux) (list 'immutable q3a93@field q3a94@aux)) q3a88@field* q3a91@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define q3a87@predicate (list 'condition-predicate (list 'record-type-descriptor q3a84@name))) (map (lambda (q3a97@accessor q3a98@aux) (list 'define q3a97@accessor (list 'condition-accessor (list 'record-type-descriptor q3a84@name) q3a98@aux))) q3a89@accessor* q3a91@aux-accessor*)))))) (map (lambda (q3a9b@x) (gensym)) q3a89@accessor*))) q3a73@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3a71@t))) (q2ed7@syntax-dispatch q3a71@t '(any any any any any . #(each (any any)))))) q3a6d@x))) '#f))) (set! q2ecf@incorrect-usage-macro (lambda (q3aa1@e) (q2fc0@syntax-violation '#f '"incorrect usage of auxiliary keyword" q3aa1@e))) (set! q2ed1@parameterize-macro (lambda (q3aa3@e) ((lambda (q3aa5@t) ((lambda (q3aa7@ls/false) (if q3aa7@ls/false (apply (lambda (q3aa9@b q3aaa@b*) (q2e8d@bless (cons 'let (cons '() (cons q3aa9@b q3aaa@b*))))) q3aa7@ls/false) ((lambda (q3aad@t) ((lambda (q3aaf@ls/false) (if q3aaf@ls/false (apply (lambda (q3ab1@olhs* q3ab2@orhs* q3ab3@b q3ab4@b*) ((lambda (q3ab9@lhs* q3aba@rhs*) (q2e8d@bless (cons (list 'lambda (append q3ab9@lhs* q3aba@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (q3abd@lhs q3abe@rhs) (list 'let (list (list 't (list q3abd@lhs))) (list q3abd@lhs q3abe@rhs) (cons 'set! (cons q3abe@rhs '(t))))) q3ab9@lhs* q3aba@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons q3ab3@b q3ab4@b*))) '(swap)))))) (append q3ab1@olhs* q3ab2@orhs*)))) (q2fae@generate-temporaries q3ab1@olhs*) (q2fae@generate-temporaries q3ab2@orhs*))) q3aaf@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3aad@t))) (q2ed7@syntax-dispatch q3aad@t '(_ #(each (any any)) any . each-any)))) q3aa5@t))) (q2ed7@syntax-dispatch q3aa5@t '(_ () any . each-any)))) q3aa3@e))) (set! q2ed3@foreign-call-transformer (lambda (q3ac1@e q3ac2@r q3ac3@mr) ((lambda (q3ac7@t) ((lambda (q3ac9@ls/false) (if q3ac9@ls/false (apply (lambda (q3acb@name q3acc@arg*) (cons 'foreign-call (cons (q2ef9@chi-expr q3acb@name q3ac2@r q3ac3@mr) (q2ef5@chi-expr* q3acc@arg* q3ac2@r q3ac3@mr)))) q3ac9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3ac7@t))) (q2ed7@syntax-dispatch q3ac7@t '(_ any . each-any)))) q3ac1@e))) (set! q2ed5@convert-pattern (lambda (q3acf@pattern q3ad0@keys) ((lambda (q3ad4@cvt* q3ad6@cvt) (begin (set! q3ad4@cvt* (lambda (q3b73@p* q3b74@n q3b75@ids) (if (null? q3b73@p*) (values '() q3b75@ids) (call-with-values (lambda () (q3ad4@cvt* (cdr q3b73@p*) q3b74@n q3b75@ids)) (lambda (q3b7d@q3b7a q3b7e@q3b7c) ((lambda (q3b81@ids q3b82@y) (call-with-values (lambda () (q3ad6@cvt (car q3b73@p*) q3b74@n q3b81@ids)) (lambda (q3b89@q3b86 q3b8a@q3b88) ((lambda (q3b8d@ids q3b8e@x) (values (cons q3b8e@x q3b82@y) q3b8d@ids)) q3b8a@q3b88 q3b89@q3b86)))) q3b7e@q3b7c q3b7d@q3b7a)))))) (set! q3ad6@cvt (lambda (q3ad7@p q3ad8@n q3ad9@ids) ((lambda (q3add@t) ((lambda (q3adf@ls/false) (if (and q3adf@ls/false (apply (lambda (q3ae1@id) (q2ccc@id? q3ae1@id)) q3adf@ls/false)) (apply (lambda (q3ae3@id) (if (q2cda@bound-id-member? q3ad7@p q3ad0@keys) (values (vector 'free-id q3ad7@p) q3ad9@ids) (if (q2cd4@free-id=? q3ad7@p (q2e61@scheme-stx '_)) (values '_ q3ad9@ids) (values 'any (cons (cons q3ad7@p q3ad8@n) q3ad9@ids))))) q3adf@ls/false) ((lambda (q3ae5@t) ((lambda (q3ae7@ls/false) (if (and q3ae7@ls/false (apply (lambda (q3ae9@p q3aea@dots) (q2ed9@ellipsis? q3aea@dots)) q3ae7@ls/false)) (apply (lambda (q3aed@p q3aee@dots) (call-with-values (lambda () (q3ad6@cvt q3aed@p (+ q3ad8@n '1) q3ad9@ids)) (lambda (q3af5@q3af2 q3af6@q3af4) ((lambda (q3af9@ids q3afa@p) (values (if (eq? q3afa@p 'any) 'each-any (vector 'each q3afa@p)) q3af9@ids)) q3af6@q3af4 q3af5@q3af2)))) q3ae7@ls/false) ((lambda (q3afd@t) ((lambda (q3aff@ls/false) (if (and q3aff@ls/false (apply (lambda (q3b01@x q3b02@dots q3b03@ys q3b04@z) (q2ed9@ellipsis? q3b02@dots)) q3aff@ls/false)) (apply (lambda (q3b09@x q3b0a@dots q3b0b@ys q3b0c@z) (call-with-values (lambda () (q3ad6@cvt q3b0c@z q3ad8@n q3ad9@ids)) (lambda (q3b15@q3b12 q3b16@q3b14) ((lambda (q3b19@ids q3b1a@z) (call-with-values (lambda () (q3ad4@cvt* q3b0b@ys q3ad8@n q3b19@ids)) (lambda (q3b21@q3b1e q3b22@q3b20) ((lambda (q3b25@ids q3b26@ys) (call-with-values (lambda () (q3ad6@cvt q3b09@x (+ q3ad8@n '1) q3b25@ids)) (lambda (q3b2d@q3b2a q3b2e@q3b2c) ((lambda (q3b31@ids q3b32@x) (values (vector 'each+ q3b32@x (reverse q3b26@ys) q3b1a@z) q3b31@ids)) q3b2e@q3b2c q3b2d@q3b2a)))) q3b22@q3b20 q3b21@q3b1e)))) q3b16@q3b14 q3b15@q3b12)))) q3aff@ls/false) ((lambda (q3b35@t) ((lambda (q3b37@ls/false) (if q3b37@ls/false (apply (lambda (q3b39@x q3b3a@y) (call-with-values (lambda () (q3ad6@cvt q3b3a@y q3ad8@n q3ad9@ids)) (lambda (q3b41@q3b3e q3b42@q3b40) ((lambda (q3b45@ids q3b46@y) (call-with-values (lambda () (q3ad6@cvt q3b39@x q3ad8@n q3b45@ids)) (lambda (q3b4d@q3b4a q3b4e@q3b4c) ((lambda (q3b51@ids q3b52@x) (values (cons q3b52@x q3b46@y) q3b51@ids)) q3b4e@q3b4c q3b4d@q3b4a)))) q3b42@q3b40 q3b41@q3b3e)))) q3b37@ls/false) ((lambda (q3b55@t) ((lambda (q3b57@ls/false) (if q3b57@ls/false (apply (lambda () (values '() q3ad9@ids)) q3b57@ls/false) ((lambda (q3b59@t) ((lambda (q3b5b@ls/false) (if (and q3b5b@ls/false (apply (lambda (q3b5d@p) (not (q2c94@stx? q3b5d@p))) q3b5b@ls/false)) (apply (lambda (q3b5f@p) (call-with-values (lambda () (q3ad6@cvt q3b5f@p q3ad8@n q3ad9@ids)) (lambda (q3b65@q3b62 q3b66@q3b64) ((lambda (q3b69@ids q3b6a@p) (values (vector 'vector q3b6a@p) q3b69@ids)) q3b66@q3b64 q3b65@q3b62)))) q3b5b@ls/false) ((lambda (q3b6d@t) ((lambda (q3b6f@ls/false) (if q3b6f@ls/false (apply (lambda (q3b71@datum) (values (vector 'atom (q2ce2@stx->datum q3b71@datum)) q3ad9@ids)) q3b6f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3b6d@t))) (q2ed7@syntax-dispatch q3b6d@t 'any))) q3b59@t))) (q2ed7@syntax-dispatch q3b59@t '#(vector each-any)))) q3b55@t))) (q2ed7@syntax-dispatch q3b55@t '()))) q3b35@t))) (q2ed7@syntax-dispatch q3b35@t '(any . any)))) q3afd@t))) (q2ed7@syntax-dispatch q3afd@t '(any any . #(each+ any () any))))) q3ae5@t))) (q2ed7@syntax-dispatch q3ae5@t '(any any)))) q3add@t))) (q2ed7@syntax-dispatch q3add@t 'any))) q3ad7@p))) (q3ad6@cvt q3acf@pattern '0 '()))) '#f '#f))) (set! q2ed7@syntax-dispatch ((lambda () ((lambda (q3b92@stx^ q3b94@match-each q3b96@match-each+ q3b98@match-each-any q3b9a@match-empty q3b9c@combine q3b9e@match* q3ba0@match) (begin (set! q3b92@stx^ (lambda (q3c6d@e q3c6e@m* q3c6f@s* q3c70@ae*) (if (and (null? q3c6e@m*) (null? q3c6f@s*) (null? q3c70@ae*)) q3c6d@e (q2cb4@mkstx q3c6d@e q3c6e@m* q3c6f@s* q3c70@ae*)))) (set! q3b94@match-each (lambda (q3c4d@e q3c4e@p q3c4f@m* q3c50@s* q3c51@ae*) (if (pair? q3c4d@e) ((lambda (q3c57@first) (and q3c57@first ((lambda (q3c59@rest) (and q3c59@rest (cons q3c57@first q3c59@rest))) (q3b94@match-each (cdr q3c4d@e) q3c4e@p q3c4f@m* q3c50@s* q3c51@ae*)))) (q3ba0@match (car q3c4d@e) q3c4e@p q3c4f@m* q3c50@s* q3c51@ae* '())) (if (null? q3c4d@e) '() (if (q2c94@stx? q3c4d@e) (and (not (q2c4a@top-marked? q3c4f@m*)) (call-with-values (lambda () (q2cb2@join-wraps q3c4f@m* q3c50@s* q3c51@ae* q3c4d@e)) (lambda (q3c61@q3c5c q3c62@q3c5e q3c63@q3c60) ((lambda (q3c67@ae* q3c68@s* q3c69@m*) (q3b94@match-each (q2c98@stx-expr q3c4d@e) q3c4e@p q3c69@m* q3c68@s* q3c67@ae*)) q3c63@q3c60 q3c62@q3c5e q3c61@q3c5c)))) (if (q286b@q278a@annotation? q3c4d@e) (q3b94@match-each (q286d@q278e@annotation-expression q3c4d@e) q3c4e@p q3c4f@m* q3c50@s* q3c51@ae*) '#f)))))) (set! q3b96@match-each+ (lambda (q3c0d@e q3c0e@x-pat q3c0f@y-pat q3c10@z-pat q3c11@m* q3c12@s* q3c13@ae* q3c14@r) ((letrec ((q3c1d@f (lambda (q3c1f@e q3c20@m* q3c21@s* q3c22@ae*) (if (pair? q3c1f@e) (call-with-values (lambda () (q3c1d@f (cdr q3c1f@e) q3c20@m* q3c21@s* q3c22@ae*)) (lambda (q3c2d@q3c28 q3c2e@q3c2a q3c2f@q3c2c) ((lambda (q3c33@r q3c34@y-pat q3c35@xr*) (if q3c33@r (if (null? q3c34@y-pat) ((lambda (q3c39@xr) (if q3c39@xr (values (cons q3c39@xr q3c35@xr*) q3c34@y-pat q3c33@r) (values '#f '#f '#f))) (q3ba0@match (car q3c1f@e) q3c0e@x-pat q3c20@m* q3c21@s* q3c22@ae* '())) (values '() (cdr q3c34@y-pat) (q3ba0@match (car q3c1f@e) (car q3c34@y-pat) q3c20@m* q3c21@s* q3c22@ae* q3c33@r))) (values '#f '#f '#f))) q3c2f@q3c2c q3c2e@q3c2a q3c2d@q3c28))) (if (q2c94@stx? q3c1f@e) (if (q2c4a@top-marked? q3c20@m*) (values '() q3c0f@y-pat (q3ba0@match q3c1f@e q3c10@z-pat q3c20@m* q3c21@s* q3c22@ae* q3c14@r)) (call-with-values (lambda () (q2cb2@join-wraps q3c20@m* q3c21@s* q3c22@ae* q3c1f@e)) (lambda (q3c41@q3c3c q3c42@q3c3e q3c43@q3c40) ((lambda (q3c47@ae* q3c48@s* q3c49@m*) (q3c1d@f (q2c98@stx-expr q3c1f@e) q3c49@m* q3c48@s* q3c47@ae*)) q3c43@q3c40 q3c42@q3c3e q3c41@q3c3c)))) (if (q286b@q278a@annotation? q3c1f@e) (q3c1d@f (q286d@q278e@annotation-expression q3c1f@e) q3c20@m* q3c21@s* q3c22@ae*) (values '() q3c0f@y-pat (q3ba0@match q3c1f@e q3c10@z-pat q3c20@m* q3c21@s* q3c22@ae* q3c14@r)))))))) q3c1d@f) q3c0d@e q3c11@m* q3c12@s* q3c13@ae*))) (set! q3b98@match-each-any (lambda (q3bf1@e q3bf2@m* q3bf3@s* q3bf4@ae*) (if (pair? q3bf1@e) ((lambda (q3bf9@l) (and q3bf9@l (cons (q3b92@stx^ (car q3bf1@e) q3bf2@m* q3bf3@s* q3bf4@ae*) q3bf9@l))) (q3b98@match-each-any (cdr q3bf1@e) q3bf2@m* q3bf3@s* q3bf4@ae*)) (if (null? q3bf1@e) '() (if (q2c94@stx? q3bf1@e) (and (not (q2c4a@top-marked? q3bf2@m*)) (call-with-values (lambda () (q2cb2@join-wraps q3bf2@m* q3bf3@s* q3bf4@ae* q3bf1@e)) (lambda (q3c01@q3bfc q3c02@q3bfe q3c03@q3c00) ((lambda (q3c07@ae* q3c08@s* q3c09@m*) (q3b98@match-each-any (q2c98@stx-expr q3bf1@e) q3c09@m* q3c08@s* q3c07@ae*)) q3c03@q3c00 q3c02@q3bfe q3c01@q3bfc)))) (if (q286b@q278a@annotation? q3bf1@e) (q3b98@match-each-any (q286d@q278e@annotation-expression q3bf1@e) q3bf2@m* q3bf3@s* q3bf4@ae*) '#f)))))) (set! q3b9a@match-empty (lambda (q3beb@p q3bec@r) (if (null? q3beb@p) q3bec@r (if (eq? q3beb@p '_) q3bec@r (if (eq? q3beb@p 'any) (cons '() q3bec@r) (if (pair? q3beb@p) (q3b9a@match-empty (car q3beb@p) (q3b9a@match-empty (cdr q3beb@p) q3bec@r)) (if (eq? q3beb@p 'each-any) (cons '() q3bec@r) ((lambda (q3bef@t) (if (memv q3bef@t '(each)) (q3b9a@match-empty (vector-ref q3beb@p '1) q3bec@r) (if (memv q3bef@t '(each+)) (q3b9a@match-empty (vector-ref q3beb@p '1) (q3b9a@match-empty (reverse (vector-ref q3beb@p '2)) (q3b9a@match-empty (vector-ref q3beb@p '3) q3bec@r))) (if (memv q3bef@t '(free-id atom)) q3bec@r (if (memv q3bef@t '(scheme-id atom)) q3bec@r (if (memv q3bef@t '(vector)) (q3b9a@match-empty (vector-ref q3beb@p '1) q3bec@r) (assertion-violation 'syntax-dispatch '"invalid pattern" q3beb@p))))))) (vector-ref q3beb@p '0))))))))) (set! q3b9c@combine (lambda (q3be7@r* q3be8@r) (if (null? (car q3be7@r*)) q3be8@r (cons (map car q3be7@r*) (q3b9c@combine (map cdr q3be7@r*) q3be8@r))))) (set! q3b9e@match* (lambda (q3bc3@e q3bc4@p q3bc5@m* q3bc6@s* q3bc7@ae* q3bc8@r) (if (null? q3bc4@p) (and (null? q3bc3@e) q3bc8@r) (if (pair? q3bc4@p) (and (pair? q3bc3@e) (q3ba0@match (car q3bc3@e) (car q3bc4@p) q3bc5@m* q3bc6@s* q3bc7@ae* (q3ba0@match (cdr q3bc3@e) (cdr q3bc4@p) q3bc5@m* q3bc6@s* q3bc7@ae* q3bc8@r))) (if (eq? q3bc4@p 'each-any) ((lambda (q3bcf@l) (and q3bcf@l (cons q3bcf@l q3bc8@r))) (q3b98@match-each-any q3bc3@e q3bc5@m* q3bc6@s* q3bc7@ae*)) ((lambda (q3bd1@t) (if (memv q3bd1@t '(each)) (if (null? q3bc3@e) (q3b9a@match-empty (vector-ref q3bc4@p '1) q3bc8@r) ((lambda (q3bd3@r*) (and q3bd3@r* (q3b9c@combine q3bd3@r* q3bc8@r))) (q3b94@match-each q3bc3@e (vector-ref q3bc4@p '1) q3bc5@m* q3bc6@s* q3bc7@ae*))) (if (memv q3bd1@t '(free-id)) (and (symbol? q3bc3@e) (q2c4a@top-marked? q3bc5@m*) (q2cd4@free-id=? (q3b92@stx^ q3bc3@e q3bc5@m* q3bc6@s* q3bc7@ae*) (vector-ref q3bc4@p '1)) q3bc8@r) (if (memv q3bd1@t '(scheme-id)) (and (symbol? q3bc3@e) (q2c4a@top-marked? q3bc5@m*) (q2cd4@free-id=? (q3b92@stx^ q3bc3@e q3bc5@m* q3bc6@s* q3bc7@ae*) (q2e61@scheme-stx (vector-ref q3bc4@p '1))) q3bc8@r) (if (memv q3bd1@t '(each+)) (call-with-values (lambda () (q3b96@match-each+ q3bc3@e (vector-ref q3bc4@p '1) (vector-ref q3bc4@p '2) (vector-ref q3bc4@p '3) q3bc5@m* q3bc6@s* q3bc7@ae* q3bc8@r)) (lambda (q3bdb@q3bd6 q3bdc@q3bd8 q3bdd@q3bda) ((lambda (q3be1@r q3be2@y-pat q3be3@xr*) (and q3be1@r (null? q3be2@y-pat) (if (null? q3be3@xr*) (q3b9a@match-empty (vector-ref q3bc4@p '1) q3be1@r) (q3b9c@combine q3be3@xr* q3be1@r)))) q3bdd@q3bda q3bdc@q3bd8 q3bdb@q3bd6))) (if (memv q3bd1@t '(atom)) (and (fast-equal? (vector-ref q3bc4@p '1) (q2ce0@strip q3bc3@e q3bc5@m*)) q3bc8@r) (if (memv q3bd1@t '(vector)) (and (vector? q3bc3@e) (q3ba0@match (vector->list q3bc3@e) (vector-ref q3bc4@p '1) q3bc5@m* q3bc6@s* q3bc7@ae* q3bc8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" q3bc4@p)))))))) (vector-ref q3bc4@p '0))))))) (set! q3ba0@match (lambda (q3ba5@e q3ba6@p q3ba7@m* q3ba8@s* q3ba9@ae* q3baa@r) (if (not q3baa@r) '#f (if (eq? q3ba6@p '_) q3baa@r (if (eq? q3ba6@p 'any) (cons (q3b92@stx^ q3ba5@e q3ba7@m* q3ba8@s* q3ba9@ae*) q3baa@r) (if (q2c94@stx? q3ba5@e) (and (not (q2c4a@top-marked? q3ba7@m*)) (call-with-values (lambda () (q2cb2@join-wraps q3ba7@m* q3ba8@s* q3ba9@ae* q3ba5@e)) (lambda (q3bb7@q3bb2 q3bb8@q3bb4 q3bb9@q3bb6) ((lambda (q3bbd@ae* q3bbe@s* q3bbf@m*) (q3ba0@match (q2c98@stx-expr q3ba5@e) q3ba6@p q3bbf@m* q3bbe@s* q3bbd@ae* q3baa@r)) q3bb9@q3bb6 q3bb8@q3bb4 q3bb7@q3bb2)))) (if (q286b@q278a@annotation? q3ba5@e) (q3ba0@match (q286d@q278e@annotation-expression q3ba5@e) q3ba6@p q3ba7@m* q3ba8@s* q3ba9@ae* q3baa@r) (q3b9e@match* q3ba5@e q3ba6@p q3ba7@m* q3ba8@s* q3ba9@ae* q3baa@r)))))))) (lambda (q3ba1@e q3ba2@p) (q3ba0@match q3ba1@e q3ba2@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2ed9@ellipsis? (lambda (q3c75@x) (and (q2ccc@id? q3c75@x) (q2cd4@free-id=? q3c75@x (q2e61@scheme-stx '...))))) (set! q2edb@underscore? (lambda (q3c77@x) (and (q2ccc@id? q3c77@x) (q2cd4@free-id=? q3c77@x (q2e61@scheme-stx '_))))) (set! q2edd@verify-literals (lambda (q3c79@lits q3c7a@expr) (for-each (lambda (q3c7d@x) (if (or (not (q2ccc@id? q3c7d@x)) (q2ed9@ellipsis? q3c7d@x) (q2edb@underscore? q3c7d@x)) (q2fc0@syntax-violation '#f '"invalid literal" q3c7a@expr q3c7d@x) (void))) q3c79@lits))) (set! q2edf@syntax-case-transformer ((lambda () ((lambda (q3c80@build-dispatch-call q3c82@invalid-ids-error q3c84@gen-clause q3c86@gen-syntax-case) (begin (set! q3c80@build-dispatch-call (lambda (q3cf1@pvars q3cf2@expr q3cf3@y q3cf4@r q3cf5@mr) ((lambda (q3cfb@ids q3cfc@levels) ((lambda (q3cff@labels q3d00@new-vars) ((lambda (q3d03@body) (list '(primitive apply) (q2c28@q2b68@build-lambda '#f q3d00@new-vars q3d03@body) q3cf3@y)) (q2ef9@chi-expr (q2cb8@add-subst (q2c87@make-full-rib q3cfb@ids q3cff@labels) q3cf2@expr) (append (map (lambda (q3d05@label q3d06@var q3d07@level) (cons q3d05@label (q2cec@make-binding 'syntax (cons q3d06@var q3d07@level)))) q3cff@labels q3d00@new-vars (map cdr q3cf1@pvars)) q3cf4@r) q3cf5@mr))) (map q2c50@gen-label q3cfb@ids) (map q2c4c@gen-lexical q3cfb@ids))) (map car q3cf1@pvars) (map cdr q3cf1@pvars)))) (set! q3c82@invalid-ids-error (lambda (q3ce5@id* q3ce6@e q3ce7@class) ((letrec ((q3ceb@find (lambda (q3ced@id* q3cee@ok*) (if (null? q3ced@id*) (q2fc0@syntax-violation '#f '"invalid syntax" q3ce6@e) (if (q2ccc@id? (car q3ced@id*)) (if (q2cda@bound-id-member? (car q3ced@id*) q3cee@ok*) (q2fbc@syntax-error (car q3ced@id*) '"duplicate " q3ce7@class) (q3ceb@find (cdr q3ced@id*) (cons (car q3ced@id*) q3cee@ok*))) (q2fbc@syntax-error (car q3ced@id*) '"invalid " q3ce7@class)))))) q3ceb@find) q3ce5@id* '()))) (set! q3c84@gen-clause (lambda (q3cbd@x q3cbe@keys q3cbf@clauses q3cc0@r q3cc1@mr q3cc2@pat q3cc3@fender q3cc4@expr) (call-with-values (lambda () (q2ed5@convert-pattern q3cc2@pat q3cbe@keys)) (lambda (q3cd1@q3cce q3cd2@q3cd0) ((lambda (q3cd5@pvars q3cd6@p) (if (not (q2cd8@distinct-bound-ids? (map car q3cd5@pvars))) (q3c82@invalid-ids-error (map car q3cd5@pvars) q3cc2@pat '"pattern variable") (if (not (for-all (lambda (q3cd9@x) (not (q2ed9@ellipsis? (car q3cd9@x)))) q3cd5@pvars)) (q2fc0@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" q3cc2@pat) ((lambda (q3cdb@y) ((lambda (q3cdd@test) ((lambda (q3cdf@conseq) ((lambda (q3ce1@altern) (list (q2c28@q2b68@build-lambda '#f (list q3cdb@y) (list 'if q3cdd@test q3cdf@conseq q3ce1@altern)) (list '(primitive syntax-dispatch) q3cbd@x (list 'quote q3cd6@p)))) (q3c86@gen-syntax-case q3cbd@x q3cbe@keys q3cbf@clauses q3cc0@r q3cc1@mr))) (q3c80@build-dispatch-call q3cd5@pvars q3cc4@expr q3cdb@y q3cc0@r q3cc1@mr))) (if (eq? q3cc3@fender '#t) q3cdb@y ((lambda (q3ce3@call) (list 'if q3cdb@y q3ce3@call (list 'quote '#f))) (q3c80@build-dispatch-call q3cd5@pvars q3cc3@fender q3cdb@y q3cc0@r q3cc1@mr))))) (q2c4c@gen-lexical 'tmp))))) q3cd2@q3cd0 q3cd1@q3cce))))) (set! q3c86@gen-syntax-case (lambda (q3c9b@x q3c9c@keys q3c9d@clauses q3c9e@r q3c9f@mr) (if (null? q3c9d@clauses) (list '(primitive syntax-error) q3c9b@x) ((lambda (q3ca5@t) ((lambda (q3ca7@ls/false) (if q3ca7@ls/false (apply (lambda (q3ca9@pat q3caa@expr) (if (and (q2ccc@id? q3ca9@pat) (not (q2cda@bound-id-member? q3ca9@pat q3c9c@keys)) (not (q2ed9@ellipsis? q3ca9@pat))) (if (q2cd4@free-id=? q3ca9@pat (q2e61@scheme-stx '_)) (q2ef9@chi-expr q3caa@expr q3c9e@r q3c9f@mr) ((lambda (q3cad@lab q3cae@lex) ((lambda (q3cb1@body) (list (q2c28@q2b68@build-lambda '#f (list q3cae@lex) q3cb1@body) q3c9b@x)) (q2ef9@chi-expr (q2cb8@add-subst (q2c87@make-full-rib (list q3ca9@pat) (list q3cad@lab)) q3caa@expr) (cons (cons q3cad@lab (q2cec@make-binding 'syntax (cons q3cae@lex '0))) q3c9e@r) q3c9f@mr))) (q2c50@gen-label q3ca9@pat) (q2c4c@gen-lexical q3ca9@pat))) (q3c84@gen-clause q3c9b@x q3c9c@keys (cdr q3c9d@clauses) q3c9e@r q3c9f@mr q3ca9@pat '#t q3caa@expr))) q3ca7@ls/false) ((lambda (q3cb3@t) ((lambda (q3cb5@ls/false) (if q3cb5@ls/false (apply (lambda (q3cb7@pat q3cb8@fender q3cb9@expr) (q3c84@gen-clause q3c9b@x q3c9c@keys (cdr q3c9d@clauses) q3c9e@r q3c9f@mr q3cb7@pat q3cb8@fender q3cb9@expr)) q3cb5@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3cb3@t))) (q2ed7@syntax-dispatch q3cb3@t '(any any any)))) q3ca5@t))) (q2ed7@syntax-dispatch q3ca5@t '(any any)))) (car q3c9d@clauses))))) (lambda (q3c87@e q3c88@r q3c89@mr) ((lambda (q3c8d@t) ((lambda (q3c8f@ls/false) (if q3c8f@ls/false (apply (lambda (q3c91@expr q3c92@keys q3c93@clauses) (begin (q2edd@verify-literals q3c92@keys q3c87@e) ((lambda (q3c97@x) ((lambda (q3c99@body) (list (q2c28@q2b68@build-lambda '#f (list q3c97@x) q3c99@body) (q2ef9@chi-expr q3c91@expr q3c88@r q3c89@mr))) (q3c86@gen-syntax-case q3c97@x q3c92@keys q3c93@clauses q3c88@r q3c89@mr))) (q2c4c@gen-lexical 'tmp)))) q3c8f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3c8d@t))) (q2ed7@syntax-dispatch q3c8d@t '(_ any each-any . each-any)))) q3c87@e)))) '#f '#f '#f '#f)))) (set! q2ee1@ellipsis-map (lambda (q3d0b@proc q3d0c@ls . q3d0f@ls*) ((lambda (q3d12@who) (begin (set! q3d12@who '...) (begin (if (not (list? q3d0c@ls)) (assertion-violation q3d12@who '"not a list" q3d0c@ls) (void)) (if (not (null? q3d0f@ls*)) ((lambda (q3d13@n) (for-each (lambda (q3d15@x) (begin (if (not (list? q3d15@x)) (assertion-violation q3d12@who '"not a list" q3d15@x) (void)) (if (not (= (length q3d15@x) q3d13@n)) (assertion-violation q3d12@who '"length mismatch" q3d0c@ls q3d15@x) (void)))) q3d0f@ls*)) (length q3d0c@ls)) (void)) (apply map q3d0b@proc q3d0c@ls q3d0f@ls*)))) '#f))) (set! q2ee3@syntax-transformer ((lambda () ((lambda (q3d18@gen-syntax q3d1a@gen-ref q3d1c@gen-append q3d1e@gen-mappend q3d20@gen-map q3d22@gen-cons q3d24@gen-vector q3d26@regen) (begin (set! q3d18@gen-syntax (lambda (q3d8f@src q3d90@e q3d91@r q3d92@maps q3d93@ellipsis? q3d94@vec?) ((lambda (q3d9b@t) ((lambda (q3d9d@ls/false) (if (and q3d9d@ls/false (apply (lambda (q3d9f@dots) (q3d93@ellipsis? q3d9f@dots)) q3d9d@ls/false)) (apply (lambda (q3da1@dots) (q2fc0@syntax-violation '#f '"misplaced ellipsis in syntax form" q3d8f@src)) q3d9d@ls/false) ((lambda (q3da3@t) ((lambda (q3da5@ls/false) (if (and q3da5@ls/false (apply (lambda (q3da7@id) (q2ccc@id? q3da7@id)) q3da5@ls/false)) (apply (lambda (q3da9@id) ((lambda (q3dab@label) ((lambda (q3dad@b) ((lambda () (if (eq? (q2cee@binding-type q3dad@b) 'syntax) (call-with-values (lambda () ((lambda (q3db3@var.lev) (q3d1a@gen-ref q3d8f@src (car q3db3@var.lev) (cdr q3db3@var.lev) q3d92@maps)) (q2cf0@binding-value q3dad@b))) (lambda (q3db5@q3db0 q3db6@q3db2) ((lambda (q3db9@maps q3dba@var) (values (list 'ref q3dba@var) q3db9@maps)) q3db6@q3db2 q3db5@q3db0))) (values (list 'quote q3d90@e) q3d92@maps))))) (q2cea@label->binding q3dab@label q3d91@r))) (q2ce6@id->label q3d90@e))) q3da5@ls/false) ((lambda (q3dbd@t) ((lambda (q3dbf@ls/false) (if (and q3dbf@ls/false (apply (lambda (q3dc1@dots q3dc2@e) (q3d93@ellipsis? q3dc1@dots)) q3dbf@ls/false)) (apply (lambda (q3dc5@dots q3dc6@e) (if q3d94@vec? (q2fc0@syntax-violation '#f '"misplaced ellipsis in syntax form" q3d8f@src) (q3d18@gen-syntax q3d8f@src q3dc6@e q3d91@r q3d92@maps (lambda (q3dc9@x) '#f) '#f))) q3dbf@ls/false) ((lambda (q3dcb@t) ((lambda (q3dcd@ls/false) (if (and q3dcd@ls/false (apply (lambda (q3dcf@x q3dd0@dots q3dd1@y) (q3d93@ellipsis? q3dd0@dots)) q3dcd@ls/false)) (apply (lambda (q3dd5@x q3dd6@dots q3dd7@y) ((letrec ((q3ddb@f (lambda (q3ddd@y q3dde@k) ((lambda (q3de1@t) ((lambda (q3de3@ls/false) (if q3de3@ls/false (apply (lambda () (q3dde@k q3d92@maps)) q3de3@ls/false) ((lambda (q3de5@t) ((lambda (q3de7@ls/false) (if (and q3de7@ls/false (apply (lambda (q3de9@dots q3dea@y) (q3d93@ellipsis? q3de9@dots)) q3de7@ls/false)) (apply (lambda (q3ded@dots q3dee@y) (q3ddb@f q3dee@y (lambda (q3df1@maps) (call-with-values (lambda () (q3dde@k (cons '() q3df1@maps))) (lambda (q3df7@q3df4 q3df8@q3df6) ((lambda (q3dfb@maps q3dfc@x) (if (null? (car q3dfb@maps)) (q2fc0@syntax-violation '#f '"extra ellipsis in syntax form" q3d8f@src) (values (q3d1e@gen-mappend q3dfc@x (car q3dfb@maps)) (cdr q3dfb@maps)))) q3df8@q3df6 q3df7@q3df4)))))) q3de7@ls/false) ((lambda (q3dff@t) ((lambda (q3e01@ls/false) (if q3e01@ls/false (apply (lambda () (call-with-values (lambda () (q3d18@gen-syntax q3d8f@src q3ddd@y q3d91@r q3d92@maps q3d93@ellipsis? q3d94@vec?)) (lambda (q3e07@q3e04 q3e08@q3e06) ((lambda (q3e0b@maps q3e0c@y) (call-with-values (lambda () (q3dde@k q3e0b@maps)) (lambda (q3e13@q3e10 q3e14@q3e12) ((lambda (q3e17@maps q3e18@x) (values (q3d1c@gen-append q3e18@x q3e0c@y) q3e17@maps)) q3e14@q3e12 q3e13@q3e10)))) q3e08@q3e06 q3e07@q3e04)))) q3e01@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3dff@t))) (q2ed7@syntax-dispatch q3dff@t '_))) q3de5@t))) (q2ed7@syntax-dispatch q3de5@t '(any . any)))) q3de1@t))) (q2ed7@syntax-dispatch q3de1@t '()))) q3ddd@y)))) q3ddb@f) q3dd7@y (lambda (q3e1b@maps) (call-with-values (lambda () (q3d18@gen-syntax q3d8f@src q3dd5@x q3d91@r (cons '() q3e1b@maps) q3d93@ellipsis? '#f)) (lambda (q3e21@q3e1e q3e22@q3e20) ((lambda (q3e25@maps q3e26@x) (if (null? (car q3e25@maps)) (q2fc0@syntax-violation '#f '"extra ellipsis in syntax form" q3d8f@src) (values (q3d20@gen-map q3e26@x (car q3e25@maps)) (cdr q3e25@maps)))) q3e22@q3e20 q3e21@q3e1e)))))) q3dcd@ls/false) ((lambda (q3e29@t) ((lambda (q3e2b@ls/false) (if q3e2b@ls/false (apply (lambda (q3e2d@x q3e2e@y) (call-with-values (lambda () (q3d18@gen-syntax q3d8f@src q3e2d@x q3d91@r q3d92@maps q3d93@ellipsis? '#f)) (lambda (q3e35@q3e32 q3e36@q3e34) ((lambda (q3e39@maps q3e3a@xnew) (call-with-values (lambda () (q3d18@gen-syntax q3d8f@src q3e2e@y q3d91@r q3e39@maps q3d93@ellipsis? q3d94@vec?)) (lambda (q3e41@q3e3e q3e42@q3e40) ((lambda (q3e45@maps q3e46@ynew) (values (q3d22@gen-cons q3d90@e q3e2d@x q3e2e@y q3e3a@xnew q3e46@ynew) q3e45@maps)) q3e42@q3e40 q3e41@q3e3e)))) q3e36@q3e34 q3e35@q3e32)))) q3e2b@ls/false) ((lambda (q3e49@t) ((lambda (q3e4b@ls/false) (if q3e4b@ls/false (apply (lambda (q3e4d@ls) (call-with-values (lambda () (q3d18@gen-syntax q3d8f@src q3e4d@ls q3d91@r q3d92@maps q3d93@ellipsis? '#t)) (lambda (q3e53@q3e50 q3e54@q3e52) ((lambda (q3e57@maps q3e58@lsnew) (values (q3d24@gen-vector q3d90@e q3e4d@ls q3e58@lsnew) q3e57@maps)) q3e54@q3e52 q3e53@q3e50)))) q3e4b@ls/false) ((lambda (q3e5b@t) ((lambda (q3e5d@ls/false) (if q3e5d@ls/false (apply (lambda () (values (list 'quote q3d90@e) q3d92@maps)) q3e5d@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3e5b@t))) (q2ed7@syntax-dispatch q3e5b@t '_))) q3e49@t))) (q2ed7@syntax-dispatch q3e49@t '#(vector each-any)))) q3e29@t))) (q2ed7@syntax-dispatch q3e29@t '(any . any)))) q3dcb@t))) (q2ed7@syntax-dispatch q3dcb@t '(any any . any)))) q3dbd@t))) (q2ed7@syntax-dispatch q3dbd@t '(any any)))) q3da3@t))) (q2ed7@syntax-dispatch q3da3@t 'any))) q3d9b@t))) (q2ed7@syntax-dispatch q3d9b@t 'any))) q3d90@e))) (set! q3d1a@gen-ref (lambda (q3d75@src q3d76@var q3d77@level q3d78@maps) (if (= q3d77@level '0) (values q3d76@var q3d78@maps) (if (null? q3d78@maps) (q2fc0@syntax-violation '#f '"missing ellipsis in syntax form" q3d75@src) (call-with-values (lambda () (q3d1a@gen-ref q3d75@src q3d76@var (- q3d77@level '1) (cdr q3d78@maps))) (lambda (q3d81@q3d7e q3d82@q3d80) ((lambda (q3d85@outer-maps q3d86@outer-var) ((lambda (q3d89@t) (if q3d89@t ((lambda (q3d8b@b) (values (cdr q3d8b@b) q3d78@maps)) q3d89@t) ((lambda (q3d8d@inner-var) (values q3d8d@inner-var (cons (cons (cons q3d86@outer-var q3d8d@inner-var) (car q3d78@maps)) q3d85@outer-maps))) (q2c4c@gen-lexical 'tmp)))) (assq q3d86@outer-var (car q3d78@maps)))) q3d82@q3d80 q3d81@q3d7e))))))) (set! q3d1c@gen-append (lambda (q3d71@x q3d72@y) (if (fast-equal? q3d72@y ''()) q3d71@x (list 'append q3d71@x q3d72@y)))) (set! q3d1e@gen-mappend (lambda (q3d6d@e q3d6e@map-env) (list 'apply '(primitive append) (q3d20@gen-map q3d6d@e q3d6e@map-env)))) (set! q3d20@gen-map (lambda (q3d5b@e q3d5c@map-env) ((lambda (q3d5f@formals q3d60@actuals) (if (eq? (car q3d5b@e) 'ref) (car q3d60@actuals) (if (for-all (lambda (q3d63@x) (and (eq? (car q3d63@x) 'ref) (memq (cadr q3d63@x) q3d5f@formals))) (cdr q3d5b@e)) ((lambda (q3d65@args) (cons 'map (cons (list 'primitive (car q3d5b@e)) q3d65@args))) (map ((lambda (q3d67@r) (lambda (q3d69@x) (cdr (assq (cadr q3d69@x) q3d67@r)))) (map cons q3d5f@formals q3d60@actuals)) (cdr q3d5b@e))) (cons* 'map (list 'lambda q3d5f@formals q3d5b@e) q3d60@actuals)))) (map cdr q3d5c@map-env) (map (lambda (q3d6b@x) (list 'ref (car q3d6b@x))) q3d5c@map-env)))) (set! q3d22@gen-cons (lambda (q3d4b@e q3d4c@x q3d4d@y q3d4e@xnew q3d4f@ynew) ((lambda (q3d55@t) (if (memv q3d55@t '(quote)) (if (eq? (car q3d4e@xnew) 'quote) ((lambda (q3d57@xnew q3d58@ynew) (if (and (eq? q3d57@xnew q3d4c@x) (eq? q3d58@ynew q3d4d@y)) (list 'quote q3d4b@e) (list 'quote (cons q3d57@xnew q3d58@ynew)))) (cadr q3d4e@xnew) (cadr q3d4f@ynew)) (if (null? (cadr q3d4f@ynew)) (list 'list q3d4e@xnew) (list 'cons q3d4e@xnew q3d4f@ynew))) (if (memv q3d55@t '(list)) (cons 'list (cons q3d4e@xnew (cdr q3d4f@ynew))) (list 'cons q3d4e@xnew q3d4f@ynew)))) (car q3d4f@ynew)))) (set! q3d24@gen-vector (lambda (q3d45@e q3d46@ls q3d47@lsnew) (if (eq? (car q3d47@lsnew) 'quote) (if (eq? (cadr q3d47@lsnew) q3d46@ls) (list 'quote q3d45@e) (list 'quote (list->vector (cadr q3d47@lsnew)))) (if (eq? (car q3d47@lsnew) 'list) (cons 'vector (cdr q3d47@lsnew)) (list 'list->vector q3d47@lsnew))))) (set! q3d26@regen (lambda (q3d3f@x) ((lambda (q3d41@t) (if (memv q3d41@t '(ref)) (cadr q3d3f@x) (if (memv q3d41@t '(primitive)) (list 'primitive (cadr q3d3f@x)) (if (memv q3d41@t '(quote)) (list 'quote (cadr q3d3f@x)) (if (memv q3d41@t '(lambda)) (q2c28@q2b68@build-lambda '#f (cadr q3d3f@x) (q3d26@regen (caddr q3d3f@x))) (if (memv q3d41@t '(map)) ((lambda (q3d43@ls) (cons '(primitive ellipsis-map) q3d43@ls)) (map q3d26@regen (cdr q3d3f@x))) (cons (list 'primitive (car q3d3f@x)) (map q3d26@regen (cdr q3d3f@x))))))))) (car q3d3f@x)))) (lambda (q3d27@e q3d28@r q3d29@mr) ((lambda (q3d2d@t) ((lambda (q3d2f@ls/false) (if q3d2f@ls/false (apply (lambda (q3d31@x) (call-with-values (lambda () (q3d18@gen-syntax q3d27@e q3d31@x q3d28@r '() q2ed9@ellipsis? '#f)) (lambda (q3d37@q3d34 q3d38@q3d36) ((lambda (q3d3b@maps q3d3c@e) (q3d26@regen q3d3c@e)) q3d38@q3d36 q3d37@q3d34)))) q3d2f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3d2d@t))) (q2ed7@syntax-dispatch q3d2d@t '(_ any)))) q3d27@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2ee5@core-macro-transformer (lambda (q3e5f@name) ((lambda (q3e61@t) (if (memv q3e61@t '(quote)) q2e87@quote-transformer (if (memv q3e61@t '(lambda)) q2e8b@lambda-transformer (if (memv q3e61@t '(case-lambda)) q2e89@case-lambda-transformer (if (memv q3e61@t '(letrec)) q2e6f@letrec-transformer (if (memv q3e61@t '(letrec*)) q2e71@letrec*-transformer (if (memv q3e61@t '(if)) q2e7f@if-transformer (if (memv q3e61@t '(and)) q2e81@and-transformer (if (memv q3e61@t '(or)) q2e83@or-transformer (if (memv q3e61@t '(foreign-call)) q2ed3@foreign-call-transformer (if (memv q3e61@t '(syntax-case)) q2edf@syntax-case-transformer (if (memv q3e61@t '(syntax)) q2ee3@syntax-transformer (if (memv q3e61@t '(type-descriptor)) q2e75@type-descriptor-transformer (if (memv q3e61@t '(record-type-descriptor)) q2e77@record-type-descriptor-transformer (if (memv q3e61@t '(record-constructor-descriptor)) q2e79@record-constructor-descriptor-transformer (if (memv q3e61@t '(fluid-let-syntax)) q2e73@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" q3e5f@name))))))))))))))))) q3e5f@name))) (set! q2ee7@symbol-macro (lambda (q3e63@x q3e64@set) ((lambda (q3e67@t) ((lambda (q3e69@ls/false) (if (and q3e69@ls/false (apply (lambda (q3e6b@name) (and (q2ccc@id? q3e6b@name) (memq (q2cce@id->sym q3e6b@name) q3e64@set))) q3e69@ls/false)) (apply (lambda (q3e6d@name) (q2e8d@bless (list 'quote q3e6d@name))) q3e69@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3e67@t))) (q2ed7@syntax-dispatch q3e67@t '(_ any)))) q3e63@x))) (set! q2ee9@macro-transformer (lambda (q3e6f@x) (if (procedure? q3e6f@x) q3e6f@x (if (symbol? q3e6f@x) ((lambda (q3e71@t) (if (memv q3e71@t '(define-record-type)) q2ecb@define-record-type-macro (if (memv q3e71@t '(define-struct)) q2ec9@define-struct-macro (if (memv q3e71@t '(include)) q2ebf@include-macro (if (memv q3e71@t '(cond)) q2ebb@cond-macro (if (memv q3e71@t '(let)) q2e93@let-macro (if (memv q3e71@t '(do)) q2eb3@do-macro (if (memv q3e71@t '(or)) q2eb7@or-macro (if (memv q3e71@t '(and)) q2eb9@and-macro (if (memv q3e71@t '(let*)) q2eb5@let*-macro (if (memv q3e71@t '(let-values)) q2e95@let-values-macro (if (memv q3e71@t '(let*-values)) q2e97@let*-values-macro (if (memv q3e71@t '(syntax-rules)) q2ec3@syntax-rules-macro (if (memv q3e71@t '(quasiquote)) q2ec5@quasiquote-macro (if (memv q3e71@t '(quasisyntax)) q2ec7@quasisyntax-macro (if (memv q3e71@t '(with-syntax)) q2e8f@with-syntax-macro (if (memv q3e71@t '(when)) q2e7b@when-macro (if (memv q3e71@t '(unless)) q2e7d@unless-macro (if (memv q3e71@t '(case)) q2e85@case-macro (if (memv q3e71@t '(identifier-syntax)) q2eb1@identifier-syntax-macro (if (memv q3e71@t '(time)) q2ea9@time-macro (if (memv q3e71@t '(delay)) q2eab@delay-macro (if (memv q3e71@t '(assert)) q2ead@assert-macro (if (memv q3e71@t '(endianness)) q2eaf@endianness-macro (if (memv q3e71@t '(guard)) q2ea5@guard-macro (if (memv q3e71@t '(define-enumeration)) q2ea7@define-enumeration-macro (if (memv q3e71@t '(trace-lambda)) q2e99@trace-lambda-macro (if (memv q3e71@t '(trace-define)) q2e9b@trace-define-macro (if (memv q3e71@t '(trace-define-syntax)) q2e9d@trace-define-syntax-macro (if (memv q3e71@t '(trace-let-syntax)) q2ea1@trace-let-syntax-macro (if (memv q3e71@t '(trace-letrec-syntax)) q2ea3@trace-letrec-syntax-macro (if (memv q3e71@t '(define-condition-type)) q2ecd@define-condition-type-macro (if (memv q3e71@t '(parameterize)) q2ed1@parameterize-macro (if (memv q3e71@t '(include-into)) q2ec1@include-into-macro (if (memv q3e71@t '(eol-style)) (lambda (q3e73@x) (q2ee7@symbol-macro q3e73@x '(none lf cr crlf nel crnel ls))) (if (memv q3e71@t '(error-handling-mode)) (lambda (q3e75@x) (q2ee7@symbol-macro q3e75@x '(ignore raise replace))) (if (memv q3e71@t '(buffer-mode)) (lambda (q3e77@x) (q2ee7@symbol-macro q3e77@x '(none line block))) (if (memv q3e71@t '(file-options)) q2c3f@file-options-macro (if (memv q3e71@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) q2ecf@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" q3e6f@x)))))))))))))))))))))))))))))))))))))))) q3e6f@x) (error 'core-macro-transformer '"BUG: invalid macro" q3e6f@x))))) (set! q2eeb@local-macro-transformer (lambda (q3e79@x) (car q3e79@x))) (set! q2eed@do-macro-call (lambda (q3e7b@transformer q3e7c@expr) ((lambda (q3e7f@out) (begin ((letrec ((q3e81@f (lambda (q3e83@x) (if (not (q2c94@stx? q3e83@x)) (if (pair? q3e83@x) (begin (q3e81@f (car q3e83@x)) (q3e81@f (cdr q3e83@x))) (if (vector? q3e83@x) (vector-for-each q3e81@f q3e83@x) (if (symbol? q3e83@x) (q2fc0@syntax-violation '#f '"raw symbol encountered in output of macro" q3e7c@expr q3e83@x) (void)))) (void))))) q3e81@f) q3e7f@out) (q2cb6@add-mark (q2cac@gen-mark) q3e7f@out q3e7c@expr))) (q3e7b@transformer (q2cb6@add-mark q2cae@anti-mark q3e7c@expr '#f))))) (set! q2eef@chi-macro (lambda (q3e85@p q3e86@e) (q2eed@do-macro-call (q2ee9@macro-transformer q3e85@p) q3e86@e))) (set! q2ef1@chi-local-macro (lambda (q3e89@p q3e8a@e) (q2eed@do-macro-call (q2eeb@local-macro-transformer q3e89@p) q3e8a@e))) (set! q2ef3@chi-global-macro (lambda (q3e8d@p q3e8e@e) ((lambda (q3e91@lib q3e92@loc) (begin (q2af1@q2993@visit-library q3e91@lib) ((lambda (q3e95@x) ((lambda (q3e97@transformer) (q2eed@do-macro-call q3e97@transformer q3e8e@e)) (if (procedure? q3e95@x) q3e95@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" q3e95@x)))) (symbol-value q3e92@loc)))) (car q3e8d@p) (cdr q3e8d@p)))) (set! q2ef5@chi-expr* (lambda (q3e99@e* q3e9a@r q3e9b@mr) (if (null? q3e99@e*) '() ((lambda (q3e9f@e) (cons q3e9f@e (q2ef5@chi-expr* (cdr q3e99@e*) q3e9a@r q3e9b@mr))) (q2ef9@chi-expr (car q3e99@e*) q3e9a@r q3e9b@mr))))) (set! q2ef7@chi-application (lambda (q3ea1@e q3ea2@r q3ea3@mr) ((lambda (q3ea7@t) ((lambda (q3ea9@ls/false) (if q3ea9@ls/false (apply (lambda (q3eab@rator q3eac@rands) ((lambda (q3eaf@rator) (cons q3eaf@rator (q2ef5@chi-expr* q3eac@rands q3ea2@r q3ea3@mr))) (q2ef9@chi-expr q3eab@rator q3ea2@r q3ea3@mr))) q3ea9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3ea7@t))) (q2ed7@syntax-dispatch q3ea7@t '(any . each-any)))) q3ea1@e))) (set! q2ef9@chi-expr (lambda (q3eb1@e q3eb2@r q3eb3@mr) (call-with-values (lambda () (q2cf4@syntax-type q3eb1@e q3eb2@r)) (lambda (q3ebd@q3eb8 q3ebe@q3eba q3ebf@q3ebc) ((lambda (q3ec3@kwd q3ec4@value q3ec5@type) ((lambda (q3ec9@t) (if (memv q3ec9@t '(core-macro)) ((lambda (q3ecb@transformer) (q3ecb@transformer q3eb1@e q3eb2@r q3eb3@mr)) (q2ee5@core-macro-transformer q3ec4@value)) (if (memv q3ec9@t '(global)) ((lambda (q3ecd@lib) ((lambda (q3ecf@loc) ((lambda () (begin ((q2f42@inv-collector) q3ecd@lib) q3ecf@loc)))) (cdr q3ec4@value))) (car q3ec4@value)) (if (memv q3ec9@t '(core-prim)) ((lambda (q3ed1@name) (list 'primitive q3ed1@name)) q3ec4@value) (if (memv q3ec9@t '(call)) (q2ef7@chi-application q3eb1@e q3eb2@r q3eb3@mr) (if (memv q3ec9@t '(lexical)) ((lambda (q3ed3@lex) q3ed3@lex) (q2e63@lexical-var q3ec4@value)) (if (memv q3ec9@t '(global-macro global-macro!)) (q2ef9@chi-expr (q2ef3@chi-global-macro q3ec4@value q3eb1@e) q3eb2@r q3eb3@mr) (if (memv q3ec9@t '(local-macro local-macro!)) (q2ef9@chi-expr (q2ef1@chi-local-macro q3ec4@value q3eb1@e) q3eb2@r q3eb3@mr) (if (memv q3ec9@t '(macro macro!)) (q2ef9@chi-expr (q2eef@chi-macro q3ec4@value q3eb1@e) q3eb2@r q3eb3@mr) (if (memv q3ec9@t '(constant)) ((lambda (q3ed5@datum) (list 'quote q3ed5@datum)) q3ec4@value) (if (memv q3ec9@t '(set!)) (q2efb@chi-set! q3eb1@e q3eb2@r q3eb3@mr) (if (memv q3ec9@t '(begin)) ((lambda (q3ed7@t) ((lambda (q3ed9@ls/false) (if q3ed9@ls/false (apply (lambda (q3edb@x q3edc@x*) (q2c2b@q2b9a@build-sequence '#f (q2ef5@chi-expr* (cons q3edb@x q3edc@x*) q3eb2@r q3eb3@mr))) q3ed9@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3ed7@t))) (q2ed7@syntax-dispatch q3ed7@t '(_ any . each-any)))) q3eb1@e) (if (memv q3ec9@t '(let-syntax letrec-syntax)) ((lambda (q3edf@t) ((lambda (q3ee1@ls/false) (if (and q3ee1@ls/false (apply (lambda (q3ee3@xlhs* q3ee4@xrhs* q3ee5@xbody q3ee6@xbody*) (if (not (q2cd6@valid-bound-ids? q3ee3@xlhs*)) (q2fc0@syntax-violation '#f '"invalid identifiers" q3eb1@e) (void))) q3ee1@ls/false)) (apply (lambda (q3eeb@xlhs* q3eec@xrhs* q3eed@xbody q3eee@xbody*) ((lambda (q3ef3@xlab*) ((lambda (q3ef5@xrib) ((lambda (q3ef7@xb*) ((lambda () (q2c2b@q2b9a@build-sequence '#f (q2ef5@chi-expr* (map (lambda (q3ef9@x) (q2cb8@add-subst q3ef5@xrib q3ef9@x)) (cons q3eed@xbody q3eee@xbody*)) (append (map cons q3ef3@xlab* q3ef7@xb*) q3eb2@r) (append (map cons q3ef3@xlab* q3ef7@xb*) q3eb3@mr)))))) (map (lambda (q3efb@x) (q2d0a@make-eval-transformer (q2f34@expand-transformer (if (eq? q3ec5@type 'let-syntax) q3efb@x (q2cb8@add-subst q3ef5@xrib q3efb@x)) q3eb3@mr))) q3eec@xrhs*))) (q2c87@make-full-rib q3eeb@xlhs* q3ef3@xlab*))) (map q2c50@gen-label q3eeb@xlhs*))) q3ee1@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3edf@t))) (q2ed7@syntax-dispatch q3edf@t '(_ #(each (any any)) any . each-any)))) q3eb1@e) (if (memv q3ec9@t '(displaced-lexical)) (q2fc0@syntax-violation '#f '"identifier out of context" q3eb1@e) (if (memv q3ec9@t '(syntax)) (q2fc0@syntax-violation '#f '"reference to pattern variable outside a syntax form" q3eb1@e) (if (memv q3ec9@t '(define define-syntax module import library)) (q2fc0@syntax-violation '#f (string-append ((lambda (q3efd@t) (if (memv q3efd@t '(define)) '"a definition" (if (memv q3efd@t '(define-syntax)) '"a define-syntax" (if (memv q3efd@t '(module)) '"a module definition" (if (memv q3efd@t '(library)) '"a library definition" (if (memv q3efd@t '(import)) '"an import declaration" (if (memv q3efd@t '(export)) '"an export declaration" '"a non-expression"))))))) q3ec5@type) '" was found where an expression was expected") q3eb1@e) (if (memv q3ec9@t '(mutable)) (q2fc0@syntax-violation '#f '"attempt to reference an unexportable variable" q3eb1@e) (q2fc0@syntax-violation '#f '"invalid expression" q3eb1@e)))))))))))))))))) q3ec5@type)) q3ebf@q3ebc q3ebe@q3eba q3ebd@q3eb8))))) (set! q2efb@chi-set! (lambda (q3eff@e q3f00@r q3f01@mr) ((lambda (q3f05@t) ((lambda (q3f07@ls/false) (if (and q3f07@ls/false (apply (lambda (q3f09@x q3f0a@v) (q2ccc@id? q3f09@x)) q3f07@ls/false)) (apply (lambda (q3f0d@x q3f0e@v) (call-with-values (lambda () (q2cf4@syntax-type q3f0d@x q3f00@r)) (lambda (q3f17@q3f12 q3f18@q3f14 q3f19@q3f16) ((lambda (q3f1d@kwd q3f1e@value q3f1f@type) ((lambda (q3f23@t) (if (memv q3f23@t '(lexical)) (begin (q2e67@set-lexical-mutable! q3f1e@value '#t) (list 'set! (q2e63@lexical-var q3f1e@value) (q2ef9@chi-expr q3f0e@v q3f00@r q3f01@mr))) (if (memv q3f23@t '(core-prim)) (q2fc0@syntax-violation '#f '"cannot modify imported core primitive" q3eff@e) (if (memv q3f23@t '(global)) (q2fc0@syntax-violation '#f '"attempt to modify imported binding" q3eff@e) (if (memv q3f23@t '(global-macro!)) (q2ef9@chi-expr (q2ef3@chi-global-macro q3f1e@value q3eff@e) q3f00@r q3f01@mr) (if (memv q3f23@t '(local-macro!)) (q2ef9@chi-expr (q2ef1@chi-local-macro q3f1e@value q3eff@e) q3f00@r q3f01@mr) (if (memv q3f23@t '(mutable)) (q2fc0@syntax-violation '#f '"attempt to assign to an unexportable variable" q3eff@e) (q2fc0@syntax-violation '#f '"invalid syntax" q3eff@e)))))))) q3f1f@type)) q3f19@q3f16 q3f18@q3f14 q3f17@q3f12)))) q3f07@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3f05@t))) (q2ed7@syntax-dispatch q3f05@t '(_ any any)))) q3eff@e))) (set! q2efd@verify-formals (lambda (q3f25@fmls q3f26@stx) ((lambda (q3f29@t) ((lambda (q3f2b@ls/false) (if q3f2b@ls/false (apply (lambda (q3f2d@x*) (if (not (q2cd6@valid-bound-ids? q3f2d@x*)) (q2e91@invalid-fmls-error q3f26@stx q3f25@fmls) (void))) q3f2b@ls/false) ((lambda (q3f2f@t) ((lambda (q3f31@ls/false) (if q3f31@ls/false (apply (lambda (q3f33@x* q3f34@x) (if (not (q2cd6@valid-bound-ids? (cons q3f34@x q3f33@x*))) (q2e91@invalid-fmls-error q3f26@stx q3f25@fmls) (void))) q3f31@ls/false) ((lambda (q3f37@t) ((lambda (q3f39@ls/false) (if q3f39@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid syntax" q3f26@stx)) q3f39@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3f37@t))) (q2ed7@syntax-dispatch q3f37@t '_))) q3f2f@t))) (q2ed7@syntax-dispatch q3f2f@t '#(each+ any () any)))) q3f29@t))) (q2ed7@syntax-dispatch q3f29@t 'each-any))) q3f25@fmls))) (set! q2eff@chi-lambda-clause (lambda (q3f3b@stx q3f3c@fmls q3f3d@body* q3f3e@r q3f3f@mr) ((lambda (q3f45@t) ((lambda (q3f47@ls/false) (if q3f47@ls/false (apply (lambda (q3f49@x*) (begin (q2efd@verify-formals q3f3c@fmls q3f3b@stx) ((lambda (q3f4b@lex* q3f4c@lab*) (values q3f4b@lex* (q2f0f@chi-internal (q2cb8@add-subst (q2c87@make-full-rib q3f49@x* q3f4c@lab*) q3f3d@body*) (q2e6b@add-lexicals q3f4c@lab* q3f4b@lex* q3f3e@r) q3f3f@mr))) (map q2c4c@gen-lexical q3f49@x*) (map q2c50@gen-label q3f49@x*)))) q3f47@ls/false) ((lambda (q3f4f@t) ((lambda (q3f51@ls/false) (if q3f51@ls/false (apply (lambda (q3f53@x* q3f54@x) (begin (q2efd@verify-formals q3f3c@fmls q3f3b@stx) ((lambda (q3f57@lex* q3f58@lab* q3f59@lex q3f5a@lab) (values (append q3f57@lex* q3f59@lex) (q2f0f@chi-internal (q2cb8@add-subst (q2c87@make-full-rib (cons q3f54@x q3f53@x*) (cons q3f5a@lab q3f58@lab*)) q3f3d@body*) (q2e6b@add-lexicals (cons q3f5a@lab q3f58@lab*) (cons q3f59@lex q3f57@lex*) q3f3e@r) q3f3f@mr))) (map q2c4c@gen-lexical q3f53@x*) (map q2c50@gen-label q3f53@x*) (q2c4c@gen-lexical q3f54@x) (q2c50@gen-label q3f54@x)))) q3f51@ls/false) ((lambda (q3f5f@t) ((lambda (q3f61@ls/false) (if q3f61@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid syntax" q3f3c@fmls)) q3f61@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q3f5f@t))) (q2ed7@syntax-dispatch q3f5f@t '_))) q3f4f@t))) (q2ed7@syntax-dispatch q3f4f@t '#(each+ any () any)))) q3f45@t))) (q2ed7@syntax-dispatch q3f45@t 'each-any))) q3f3c@fmls))) (set! q2f01@chi-lambda-clause* (lambda (q3f63@stx q3f64@fmls* q3f65@body** q3f66@r q3f67@mr) (if (null? q3f64@fmls*) (values '() '()) (call-with-values (lambda () (q2eff@chi-lambda-clause q3f63@stx (car q3f64@fmls*) (car q3f65@body**) q3f66@r q3f67@mr)) (lambda (q3f71@q3f6e q3f72@q3f70) ((lambda (q3f75@b q3f76@a) (call-with-values (lambda () (q2f01@chi-lambda-clause* q3f63@stx (cdr q3f64@fmls*) (cdr q3f65@body**) q3f66@r q3f67@mr)) (lambda (q3f7d@q3f7a q3f7e@q3f7c) ((lambda (q3f81@b* q3f82@a*) (values (cons q3f76@a q3f82@a*) (cons q3f75@b q3f81@b*))) q3f7e@q3f7c q3f7d@q3f7a)))) q3f72@q3f70 q3f71@q3f6e)))))) (set! q2f03@chi-defun (lambda (q3f85@x q3f86@r q3f87@mr) ((lambda (q3f8b@fmls q3f8c@body*) (call-with-values (lambda () (q2eff@chi-lambda-clause q3f8b@fmls q3f8b@fmls q3f8c@body* q3f86@r q3f87@mr)) (lambda (q3f93@q3f90 q3f94@q3f92) ((lambda (q3f97@body q3f98@fmls) (q2c28@q2b68@build-lambda '#f q3f98@fmls q3f97@body)) q3f94@q3f92 q3f93@q3f90)))) (car q3f85@x) (cdr q3f85@x)))) (set! q2f05@chi-rhs (lambda (q3f9b@rhs q3f9c@r q3f9d@mr) ((lambda (q3fa1@t) (if (memv q3fa1@t '(defun)) (q2f03@chi-defun (cdr q3f9b@rhs) q3f9c@r q3f9d@mr) (if (memv q3fa1@t '(expr)) ((lambda (q3fa3@expr) (q2ef9@chi-expr q3fa3@expr q3f9c@r q3f9d@mr)) (cdr q3f9b@rhs)) (if (memv q3fa1@t '(top-expr)) ((lambda (q3fa5@expr) (q2c2b@q2b9a@build-sequence '#f (list (q2ef9@chi-expr q3fa5@expr q3f9c@r q3f9d@mr) (q2c2c@q2b9c@build-void)))) (cdr q3f9b@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" q3f9b@rhs))))) (car q3f9b@rhs)))) (set! q2f07@expand-interaction-rhs*/init* (lambda (q3fa7@lhs* q3fa8@rhs* q3fa9@init* q3faa@r q3fab@mr) ((letrec ((q3fb1@f (lambda (q3fb3@lhs* q3fb4@rhs*) (if (null? q3fb3@lhs*) (map (lambda (q3fb7@x) (q2ef9@chi-expr q3fb7@x q3faa@r q3fab@mr)) q3fa9@init*) ((lambda (q3fb9@lhs q3fba@rhs) ((lambda (q3fbd@t) (if (memv q3fbd@t '(defun)) ((lambda (q3fbf@rhs) (cons (list 'set! q3fb9@lhs q3fbf@rhs) (q3fb1@f (cdr q3fb3@lhs*) (cdr q3fb4@rhs*)))) (q2f03@chi-defun (cdr q3fba@rhs) q3faa@r q3fab@mr)) (if (memv q3fbd@t '(expr)) ((lambda (q3fc1@rhs) (cons (list 'set! q3fb9@lhs q3fc1@rhs) (q3fb1@f (cdr q3fb3@lhs*) (cdr q3fb4@rhs*)))) (q2ef9@chi-expr (cdr q3fba@rhs) q3faa@r q3fab@mr)) (if (memv q3fbd@t '(top-expr)) ((lambda (q3fc3@e) (cons q3fc3@e (q3fb1@f (cdr q3fb3@lhs*) (cdr q3fb4@rhs*)))) (q2ef9@chi-expr (cdr q3fba@rhs) q3faa@r q3fab@mr)) (error 'expand-interaction '"invallid" q3fba@rhs))))) (car q3fba@rhs))) (car q3fb3@lhs*) (car q3fb4@rhs*)))))) q3fb1@f) q3fa7@lhs* q3fa8@rhs*))) (set! q2f09@chi-rhs* (lambda (q3fc5@rhs* q3fc6@r q3fc7@mr) ((letrec ((q3fcb@f (lambda (q3fcd@ls) (if (null? q3fcd@ls) '() ((lambda (q3fcf@a) (cons q3fcf@a (q3fcb@f (cdr q3fcd@ls)))) (q2f05@chi-rhs (car q3fcd@ls) q3fc6@r q3fc7@mr)))))) q3fcb@f) q3fc5@rhs*))) (set! q2f0b@find-bound=? (lambda (q3fd1@x q3fd2@lhs* q3fd3@rhs*) (if (null? q3fd2@lhs*) '#f (if (q2cd2@bound-id=? q3fd1@x (car q3fd2@lhs*)) (car q3fd3@rhs*) (q2f0b@find-bound=? q3fd1@x (cdr q3fd2@lhs*) (cdr q3fd3@rhs*)))))) (set! q2f0d@find-dups (lambda (q3fd7@ls) ((letrec ((q3fd9@f (lambda (q3fdb@ls q3fdc@dups) (if (null? q3fdb@ls) q3fdc@dups ((lambda (q3fdf@t) (if q3fdf@t ((lambda (q3fe1@x) (q3fd9@f (cdr q3fdb@ls) (cons (list (car q3fdb@ls) q3fe1@x) q3fdc@dups))) q3fdf@t) (q3fd9@f (cdr q3fdb@ls) q3fdc@dups))) (q2f0b@find-bound=? (car q3fdb@ls) (cdr q3fdb@ls) (cdr q3fdb@ls))))))) q3fd9@f) q3fd7@ls '()))) (set! q2f0f@chi-internal (lambda (q3fe3@e* q3fe4@r q3fe5@mr) ((lambda (q3fe9@rib) (call-with-values (lambda () (q2f32@chi-body* (map (lambda (q3ffb@x) (q2cb8@add-subst q3fe9@rib q3ffb@x)) (q2cca@syntax->list q3fe3@e*)) q3fe4@r q3fe5@mr '() '() '() '() '() q3fe9@rib '#f)) (lambda (q3ffd@q3fec q3ffe@q3fee q3fff@q3ff0 q4000@q3ff2 q4001@q3ff4 q4002@q3ff6 q4003@q3ff8 q4004@q3ffa) ((lambda (q400d@_exp* q400e@kwd* q400f@mod** q4010@rhs* q4011@lex* q4012@mr q4013@r q4014@e*) (begin (if (null? q4014@e*) (q2fc0@syntax-violation '#f '"no expression in body" q4014@e*) (void)) ((lambda (q401d@init*) ((lambda (q401f@rhs*) ((lambda () (q2c2e@q2ba0@build-letrec* '#f (reverse q4011@lex*) (reverse q401f@rhs*) (q2c2b@q2b9a@build-sequence '#f q401d@init*))))) (q2f09@chi-rhs* q4010@rhs* q4013@r q4012@mr))) (q2ef5@chi-expr* (append (apply append (reverse q400f@mod**)) q4014@e*) q4013@r q4012@mr)))) q4004@q3ffa q4003@q3ff8 q4002@q3ff6 q4001@q3ff4 q4000@q3ff2 q3fff@q3ff0 q3ffe@q3fee q3ffd@q3fec)))) (q2c7b@make-empty-rib)))) (set! q2f11@parse-module (lambda (q4021@e) ((lambda (q4023@t) ((lambda (q4025@ls/false) (if q4025@ls/false (apply (lambda (q4027@export* q4028@b*) (begin (if (not (for-all q2ccc@id? q4027@export*)) (q2fc0@syntax-violation '#f '"module exports must be identifiers" q4021@e) (void)) (values '#f (list->vector q4027@export*) q4028@b*))) q4025@ls/false) ((lambda (q402b@t) ((lambda (q402d@ls/false) (if q402d@ls/false (apply (lambda (q402f@name q4030@export* q4031@b*) (begin (if (not (q2ccc@id? q402f@name)) (q2fc0@syntax-violation '#f '"module name must be an identifier" q4021@e) (void)) (if (not (for-all q2ccc@id? q4030@export*)) (q2fc0@syntax-violation '#f '"module exports must be identifiers" q4021@e) (void)) (values q402f@name (list->vector q4030@export*) q4031@b*))) q402d@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q402b@t))) (q2ed7@syntax-dispatch q402b@t '(_ any each-any . each-any)))) q4023@t))) (q2ed7@syntax-dispatch q4023@t '(_ each-any . each-any)))) q4021@e))) (set! q2f17@q2f12 (make-record-type-descriptor 'module-interface '#f 'q2f15 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! q2f19@q2f14 '#f) (set! q2f1b@q2f13 (make-record-constructor-descriptor q2f17@q2f12 '#f q2f19@q2f14)) (set! q2f1e@module-interface? (record-predicate q2f17@q2f12)) (set! q2f20@make-module-interface (record-constructor q2f1b@q2f13)) (set! q2f22@module-interface-first-mark (record-accessor q2f17@q2f12 '0)) (set! q2f24@module-interface-exp-id-vec (record-accessor q2f17@q2f12 '1)) (set! q2f26@module-interface-exp-lab-vec (record-accessor q2f17@q2f12 '2)) (set! q2f28@set-module-interface-first-mark! (record-mutator q2f17@q2f12 '0)) (set! q2f2a@set-module-interface-exp-id-vec! (record-mutator q2f17@q2f12 '1)) (set! q2f2c@set-module-interface-exp-lab-vec! (record-mutator q2f17@q2f12 '2)) (set! q2f2e@module-interface-exp-id* (lambda (q4035@iface q4036@id) ((lambda (q403a@diff-marks) (begin (set! q403a@diff-marks (lambda (q4041@ls q4042@x) (begin (if (null? q4041@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (q4045@a) (if (eq? q4045@a q4042@x) '() (cons q4045@a (q403a@diff-marks (cdr q4041@ls) q4042@x)))) (car q4041@ls))))) ((lambda (q403b@diff q403c@id-vec) (if (null? q403b@diff) q403c@id-vec (vector-map (lambda (q403f@x) (q2c96@make-stx (q2c98@stx-expr q403f@x) (append q403b@diff (q2c9a@stx-mark* q403f@x)) '() '())) q403c@id-vec))) (q403a@diff-marks (q2c9a@stx-mark* q4036@id) (q2f22@module-interface-first-mark q4035@iface)) (q2f24@module-interface-exp-id-vec q4035@iface)))) '#f))) (set! q2f30@chi-internal-module (lambda (q4047@e q4048@r q4049@mr q404a@lex* q404b@rhs* q404c@mod** q404d@kwd*) (call-with-values (lambda () (q2f11@parse-module q4047@e)) (lambda (q405b@q4056 q405c@q4058 q405d@q405a) ((lambda (q4061@e* q4062@exp-id* q4063@name) ((lambda (q4067@rib) ((lambda (q4069@e*) ((lambda () (call-with-values (lambda () (q2f32@chi-body* q4069@e* q4048@r q4049@mr q404a@lex* q404b@rhs* q404c@mod** q404d@kwd* '() q4067@rib '#f)) (lambda (q407b@q406c q407c@q406e q407d@q4070 q407e@q4072 q407f@q4074 q4080@q4076 q4081@q4078 q4082@q407a) ((lambda (q408b@_exp* q408c@kwd* q408d@mod** q408e@rhs* q408f@lex* q4090@mr q4091@r q4092@e*) ((lambda (q409b@exp-lab* q409c@mod**) (if (not q4063@name) (values q408f@lex* q408e@rhs* q4062@exp-id* q409b@exp-lab* q4091@r q4090@mr q409c@mod** q408c@kwd*) ((lambda (q409f@lab q40a0@iface) (values q408f@lex* q408e@rhs* (vector q4063@name) (vector q409f@lab) (cons (cons q409f@lab (cons '$module q40a0@iface)) q4091@r) (cons (cons q409f@lab (cons '$module q40a0@iface)) q4090@mr) q409c@mod** q408c@kwd*)) (q2c50@gen-label 'module) (q2f20@make-module-interface (car (q2c9a@stx-mark* q4063@name)) (vector-map (lambda (q40a3@x) (q2c96@make-stx (q2c98@stx-expr q40a3@x) (q2c9a@stx-mark* q40a3@x) '() '())) q4062@exp-id*) q409b@exp-lab*)))) (vector-map (lambda (q40a5@x) (or (q2ce6@id->label (q2c96@make-stx (q2cce@id->sym q40a5@x) (q2c9a@stx-mark* q40a5@x) (list q4067@rib) '())) (q2fc0@syntax-violation '#f '"cannot find module export" q40a5@x))) q4062@exp-id*) (cons q4092@e* q408d@mod**))) q4082@q407a q4081@q4078 q4080@q4076 q407f@q4074 q407e@q4072 q407d@q4070 q407c@q406e q407b@q406c)))))) (map (lambda (q40a7@x) (q2cb8@add-subst q4067@rib q40a7@x)) (q2cca@syntax->list q4061@e*)))) (q2c7b@make-empty-rib))) q405d@q405a q405c@q4058 q405b@q4056))))) (set! q2f32@chi-body* (lambda (q40a9@e* q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40af@kwd* q40b0@exp* q40b1@rib q40b2@top?) (if (null? q40a9@e*) (values q40a9@e* q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40af@kwd* q40b0@exp*) ((lambda (q40bd@e) (call-with-values (lambda () (q2cf4@syntax-type q40bd@e q40aa@r)) (lambda (q40c5@q40c0 q40c6@q40c2 q40c7@q40c4) ((lambda (q40cb@kwd q40cc@value q40cd@type) ((lambda (q40d1@kwd*) ((lambda (q40d3@t) (if (memv q40d3@t '(define)) (call-with-values (lambda () (q2e5b@parse-define q40bd@e)) (lambda (q40d9@q40d6 q40da@q40d8) ((lambda (q40dd@rhs q40de@id) (begin (if (q2cda@bound-id-member? q40de@id q40d1@kwd*) (q2fc0@syntax-violation '#f '"cannot redefine keyword" q40bd@e) (void)) (call-with-values (lambda () (q2c54@gen-define-label+loc q40de@id q40b1@rib)) (lambda (q40e5@q40e2 q40e6@q40e4) ((lambda (q40e9@lex q40ea@lab) (begin (q2c7d@extend-rib! q40b1@rib q40de@id q40ea@lab) (q2f32@chi-body* (cdr q40a9@e*) (q2e69@add-lexical q40ea@lab q40e9@lex q40aa@r) q40ab@mr (cons q40e9@lex q40ac@lex*) (cons q40dd@rhs q40ad@rhs*) q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?))) q40e6@q40e4 q40e5@q40e2))))) q40da@q40d8 q40d9@q40d6))) (if (memv q40d3@t '(define-syntax)) (call-with-values (lambda () (q2e5d@parse-define-syntax q40bd@e)) (lambda (q40f1@q40ee q40f2@q40f0) ((lambda (q40f5@rhs q40f6@id) (begin (if (q2cda@bound-id-member? q40f6@id q40d1@kwd*) (q2fc0@syntax-violation '#f '"cannot redefine keyword" q40bd@e) (void)) ((lambda (q40f9@lab q40fa@expanded-rhs) (begin (q2c7d@extend-rib! q40b1@rib q40f6@id q40f9@lab) ((lambda (q40fd@b) (q2f32@chi-body* (cdr q40a9@e*) (cons (cons q40f9@lab q40fd@b) q40aa@r) (cons (cons q40f9@lab q40fd@b) q40ab@mr) q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?)) (q2d0a@make-eval-transformer q40fa@expanded-rhs)))) (q2c56@gen-define-label q40f6@id q40b1@rib) (q2f34@expand-transformer q40f5@rhs q40ab@mr)))) q40f2@q40f0 q40f1@q40ee))) (if (memv q40d3@t '(let-syntax letrec-syntax)) ((lambda (q40ff@t) ((lambda (q4101@ls/false) (if (and q4101@ls/false (apply (lambda (q4103@xlhs* q4104@xrhs* q4105@xbody*) (if (not (q2cd6@valid-bound-ids? q4103@xlhs*)) (q2fc0@syntax-violation '#f '"invalid identifiers" q40bd@e) (void))) q4101@ls/false)) (apply (lambda (q4109@xlhs* q410a@xrhs* q410b@xbody*) ((lambda (q410f@xlab*) ((lambda (q4111@xrib) ((lambda (q4113@xb*) ((lambda () (q2f32@chi-body* (append (map (lambda (q4115@x) (q2cb8@add-subst q4111@xrib q4115@x)) q410b@xbody*) (cdr q40a9@e*)) (append (map cons q410f@xlab* q4113@xb*) q40aa@r) (append (map cons q410f@xlab* q4113@xb*) q40ab@mr) q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?)))) (map (lambda (q4117@x) (q2d0a@make-eval-transformer (q2f34@expand-transformer (if (eq? q40cd@type 'let-syntax) q4117@x (q2cb8@add-subst q4111@xrib q4117@x)) q40ab@mr))) q410a@xrhs*))) (q2c87@make-full-rib q4109@xlhs* q410f@xlab*))) (map q2c50@gen-label q4109@xlhs*))) q4101@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q40ff@t))) (q2ed7@syntax-dispatch q40ff@t '(_ #(each (any any)) . each-any)))) q40bd@e) (if (memv q40d3@t '(begin)) ((lambda (q4119@t) ((lambda (q411b@ls/false) (if q411b@ls/false (apply (lambda (q411d@x*) (q2f32@chi-body* (append q411d@x* (cdr q40a9@e*)) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?)) q411b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q4119@t))) (q2ed7@syntax-dispatch q4119@t '(_ . each-any)))) q40bd@e) (if (memv q40d3@t '(global-macro global-macro!)) (q2f32@chi-body* (cons (q2cb8@add-subst q40b1@rib (q2ef3@chi-global-macro q40cc@value q40bd@e)) (cdr q40a9@e*)) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?) (if (memv q40d3@t '(local-macro local-macro!)) (q2f32@chi-body* (cons (q2cb8@add-subst q40b1@rib (q2ef1@chi-local-macro q40cc@value q40bd@e)) (cdr q40a9@e*)) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?) (if (memv q40d3@t '(macro macro!)) (q2f32@chi-body* (cons (q2cb8@add-subst q40b1@rib (q2eef@chi-macro q40cc@value q40bd@e)) (cdr q40a9@e*)) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?) (if (memv q40d3@t '(module)) (call-with-values (lambda () (q2f30@chi-internal-module q40bd@e q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd*)) (lambda (q412f@q4120 q4130@q4122 q4131@q4124 q4132@q4126 q4133@q4128 q4134@q412a q4135@q412c q4136@q412e) ((lambda (q413f@kwd* q4140@mod** q4141@mr q4142@r q4143@m-exp-lab* q4144@m-exp-id* q4145@rhs* q4146@lex*) (begin (vector-for-each (lambda (q414f@id q4150@lab) (q2c7d@extend-rib! q40b1@rib q414f@id q4150@lab)) q4144@m-exp-id* q4143@m-exp-lab*) (q2f32@chi-body* (cdr q40a9@e*) q4142@r q4141@mr q4146@lex* q4145@rhs* q4140@mod** q413f@kwd* q40b0@exp* q40b1@rib q40b2@top?))) q4136@q412e q4135@q412c q4134@q412a q4133@q4128 q4132@q4126 q4131@q4124 q4130@q4122 q412f@q4120))) (if (memv q40d3@t '(library)) (begin (q2fa2@library-expander (q2ce2@stx->datum q40bd@e)) (q2f32@chi-body* (cdr q40a9@e*) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?)) (if (memv q40d3@t '(export)) ((lambda (q4153@t) ((lambda (q4155@ls/false) (if q4155@ls/false (apply (lambda (q4157@exp-decl*) (q2f32@chi-body* (cdr q40a9@e*) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* (append q4157@exp-decl* q40b0@exp*) q40b1@rib q40b2@top?)) q4155@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q4153@t))) (q2ed7@syntax-dispatch q4153@t '(_ . each-any)))) q40bd@e) (if (memv q40d3@t '(import)) ((lambda () ((lambda (q415a@module-import? q415c@module-import q415e@library-import) (begin (set! q415a@module-import? (lambda (q41ad@e) ((lambda (q41af@t) ((lambda (q41b1@ls/false) (if (and q41b1@ls/false (apply (lambda (q41b3@id) (q2ccc@id? q41b3@id)) q41b1@ls/false)) (apply (lambda (q41b5@id) '#t) q41b1@ls/false) ((lambda (q41b7@t) ((lambda (q41b9@ls/false) (if q41b9@ls/false (apply (lambda (q41bb@imp*) '#f) q41b9@ls/false) ((lambda (q41bd@t) ((lambda (q41bf@ls/false) (if q41bf@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"malformed import form" q41ad@e)) q41bf@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q41bd@t))) (q2ed7@syntax-dispatch q41bd@t '_))) q41b7@t))) (q2ed7@syntax-dispatch q41b7@t '(_ . each-any)))) q41af@t))) (q2ed7@syntax-dispatch q41af@t '(_ any)))) q41ad@e))) (set! q415c@module-import (lambda (q418b@e q418c@r) ((lambda (q418f@t) ((lambda (q4191@ls/false) (if (and q4191@ls/false (apply (lambda (q4193@id) (q2ccc@id? q4193@id)) q4191@ls/false)) (apply (lambda (q4195@id) (call-with-values (lambda () (q2cf4@syntax-type q4195@id q418c@r)) (lambda (q419d@q4198 q419e@q419a q419f@q419c) ((lambda (q41a3@kwd q41a4@value q41a5@type) ((lambda (q41a9@t) (if (memv q41a9@t '($module)) ((lambda (q41ab@iface) (values (q2f2e@module-interface-exp-id* q41ab@iface q4195@id) (q2f26@module-interface-exp-lab-vec q41ab@iface))) q41a4@value) (q2fc0@syntax-violation '#f '"invalid import" q418b@e))) q41a5@type)) q419f@q419c q419e@q419a q419d@q4198)))) q4191@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q418f@t))) (q2ed7@syntax-dispatch q418f@t '(_ any)))) q418b@e))) (set! q415e@library-import (lambda (q416f@e) ((lambda (q4171@t) ((lambda (q4173@ls/false) (if q4173@ls/false (apply (lambda (q4175@ctxt q4176@imp*) (call-with-values (lambda () (q2f3c@parse-import-spec* (q2fc6@syntax->datum q4176@imp*))) (lambda (q417d@q417a q417e@q417c) ((lambda (q4181@subst-labels q4182@subst-names) (values (vector-map (lambda (q4185@name) (q2caa@datum->stx q4175@ctxt q4185@name)) q4182@subst-names) q4181@subst-labels)) q417e@q417c q417d@q417a)))) q4173@ls/false) ((lambda (q4187@t) ((lambda (q4189@ls/false) (if q4189@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid import form" q416f@e)) q4189@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q4187@t))) (q2ed7@syntax-dispatch q4187@t '_))) q4171@t))) (q2ed7@syntax-dispatch q4171@t '(any . each-any)))) q416f@e))) (begin (call-with-values (lambda () (if (q415a@module-import? q40bd@e) (q415c@module-import q40bd@e q40aa@r) (q415e@library-import q40bd@e))) (lambda (q4163@q4160 q4164@q4162) ((lambda (q4167@lab* q4168@id*) (vector-for-each (lambda (q416b@id q416c@lab) (q2c7d@extend-rib! q40b1@rib q416b@id q416c@lab)) q4168@id* q4167@lab*)) q4164@q4162 q4163@q4160))) (q2f32@chi-body* (cdr q40a9@e*) q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?)))) '#f '#f '#f))) (if q40b2@top? (q2f32@chi-body* (cdr q40a9@e*) q40aa@r q40ab@mr (cons (q2c4c@gen-lexical 'dummy) q40ac@lex*) (cons (cons 'top-expr q40bd@e) q40ad@rhs*) q40ae@mod** q40d1@kwd* q40b0@exp* q40b1@rib q40b2@top?) (values q40a9@e* q40aa@r q40ab@mr q40ac@lex* q40ad@rhs* q40ae@mod** q40d1@kwd* q40b0@exp*)))))))))))))) q40cd@type)) (if (q2ccc@id? q40cb@kwd) (cons q40cb@kwd q40af@kwd*) q40af@kwd*))) q40c7@q40c4 q40c6@q40c2 q40c5@q40c0)))) (car q40a9@e*))))) (set! q2f34@expand-transformer (lambda (q41c1@expr q41c2@r) ((lambda (q41c5@rtc) ((lambda (q41c7@expanded-rhs) (begin (for-each ((lambda (q41c9@mark-visit) (lambda (q41cb@x) (begin (q2af0@q2991@invoke-library q41cb@x) (q41c9@mark-visit q41cb@x)))) (q2f44@vis-collector)) (q41c5@rtc)) q41c7@expanded-rhs)) ((lambda (q41d5@q41ce q41d6@q41d0 q41d7@q41d2 q41d8@q41d4) ((lambda (q41dd@swap) (dynamic-wind q41dd@swap (lambda () (q2ef9@chi-expr q41c1@expr q41c2@r q41c2@r)) q41dd@swap)) (lambda () (begin ((lambda (q41df@t) (begin (q41d5@q41ce q41d7@q41d2) (set! q41d7@q41d2 q41df@t))) (q41d5@q41ce)) ((lambda (q41e1@t) (begin (q41d6@q41d0 q41d8@q41d4) (set! q41d8@q41d4 q41e1@t))) (q41d6@q41d0)))))) q2f42@inv-collector q2f44@vis-collector q41c5@rtc (lambda (q41e3@x) (values))))) (q2f40@make-collector)))) (set! q2f36@parse-exports (lambda (q41e5@exp*) ((letrec ((q41e7@f (lambda (q41e9@exp* q41ea@int* q41eb@ext*) (if (null? q41e9@exp*) (begin (if (not (q2cd6@valid-bound-ids? q41eb@ext*)) (q2fc0@syntax-violation 'export '"invalid exports" (q2f0d@find-dups q41eb@ext*)) (void)) (values (map q2fc6@syntax->datum q41eb@ext*) q41ea@int*)) ((lambda (q41ef@t) ((lambda (q41f1@ls/false) (if q41f1@ls/false (apply (lambda (q41f3@rename q41f4@i* q41f5@e*) (begin (if (not (and (eq? (q2fc6@syntax->datum q41f3@rename) 'rename) (for-all q2ccc@id? q41f4@i*) (for-all q2ccc@id? q41f5@e*))) (q2fc0@syntax-violation 'export '"invalid export specifier" (car q41e9@exp*)) (void)) (q41e7@f (cdr q41e9@exp*) (append q41f4@i* q41ea@int*) (append q41f5@e* q41eb@ext*)))) q41f1@ls/false) ((lambda (q41f9@t) ((lambda (q41fb@ls/false) (if q41fb@ls/false (apply (lambda (q41fd@ie) (begin (if (not (q2ccc@id? q41fd@ie)) (q2fc0@syntax-violation 'export '"invalid export" q41fd@ie) (void)) (q41e7@f (cdr q41e9@exp*) (cons q41fd@ie q41ea@int*) (cons q41fd@ie q41eb@ext*)))) q41fb@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q41f9@t))) (q2ed7@syntax-dispatch q41f9@t 'any))) q41ef@t))) (q2ed7@syntax-dispatch q41ef@t '(any . #(each (any any)))))) (car q41e9@exp*)))))) q41e7@f) q41e5@exp* '() '()))) (set! q2f38@parse-library-name (lambda (q41ff@spec) ((lambda (q4202@parse) (begin (set! q4202@parse (lambda (q420f@x) ((lambda (q4211@t) ((lambda (q4213@ls/false) (if (and q4213@ls/false (apply (lambda (q4215@v*) (for-all (lambda (q4217@x) ((lambda (q4219@x) (and (integer? q4219@x) (exact? q4219@x))) (q2fc6@syntax->datum q4217@x))) q4215@v*)) q4213@ls/false)) (apply (lambda (q421b@v*) (values '() (map q2fc6@syntax->datum q421b@v*))) q4213@ls/false) ((lambda (q421d@t) ((lambda (q421f@ls/false) (if (and q421f@ls/false (apply (lambda (q4221@x q4222@rest) (symbol? (q2fc6@syntax->datum q4221@x))) q421f@ls/false)) (apply (lambda (q4225@x q4226@rest) (call-with-values (lambda () (q4202@parse q4226@rest)) (lambda (q422d@q422a q422e@q422c) ((lambda (q4231@v* q4232@x*) (values (cons (q2fc6@syntax->datum q4225@x) q4232@x*) q4231@v*)) q422e@q422c q422d@q422a)))) q421f@ls/false) ((lambda (q4235@t) ((lambda (q4237@ls/false) (if q4237@ls/false (apply (lambda () (values '() '())) q4237@ls/false) ((lambda (q4239@t) ((lambda (q423b@ls/false) (if q423b@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid library name" q41ff@spec)) q423b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q4239@t))) (q2ed7@syntax-dispatch q4239@t '_))) q4235@t))) (q2ed7@syntax-dispatch q4235@t '()))) q421d@t))) (q2ed7@syntax-dispatch q421d@t '(any . any)))) q4211@t))) (q2ed7@syntax-dispatch q4211@t '(each-any)))) q420f@x))) (call-with-values (lambda () (q4202@parse q41ff@spec)) (lambda (q4207@q4204 q4208@q4206) ((lambda (q420b@ver* q420c@name*) (begin (if (null? q420c@name*) (q2fc0@syntax-violation '#f '"empty library name" q41ff@spec) (void)) (values q420c@name* q420b@ver*))) q4208@q4206 q4207@q4204))))) '#f))) (set! q2f3a@parse-library (lambda (q423d@e) ((lambda (q423f@t) ((lambda (q4241@ls/false) (if (and q4241@ls/false (apply (lambda (q4243@library q4244@name* q4245@export q4246@exp* q4247@import q4248@imp* q4249@b*) (and (eq? (q2fc6@syntax->datum q4245@export) 'export) (eq? (q2fc6@syntax->datum q4247@import) 'import) (eq? (q2fc6@syntax->datum q4243@library) 'library))) q4241@ls/false)) (apply (lambda (q4251@library q4252@name* q4253@export q4254@exp* q4255@import q4256@imp* q4257@b*) (values q4252@name* q4254@exp* q4256@imp* q4257@b*)) q4241@ls/false) ((lambda (q425f@t) ((lambda (q4261@ls/false) (if q4261@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"malformed library" q423d@e)) q4261@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q425f@t))) (q2ed7@syntax-dispatch q425f@t '_))) q423f@t))) (q2ed7@syntax-dispatch q423f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) q423d@e))) (set! q2f3c@parse-import-spec* ((lambda () ((lambda (q4264@idsyn? q4266@dup-error q4268@merge-substs q426a@exclude* q426c@find* q426e@rem* q4270@remove-dups q4272@parse-library-name q4274@import-library q4276@get-import q4278@add-imports!) (begin (set! q4264@idsyn? (lambda (q446d@x) (symbol? (q2fc6@syntax->datum q446d@x)))) (set! q4266@dup-error (lambda (q446b@name) (q2fc0@syntax-violation 'import '"two imports with different bindings" q446b@name))) (set! q4268@merge-substs (lambda (q4459@s q445a@subst) ((lambda (q445e@insert-to-subst) (begin (set! q445e@insert-to-subst (lambda (q445f@a q4460@subst) ((lambda (q4463@name q4464@label) ((lambda (q4467@t) (if q4467@t ((lambda (q4469@x) (if (eq? (cdr q4469@x) q4464@label) q4460@subst (q4266@dup-error q4463@name))) q4467@t) (cons q445f@a q4460@subst))) (assq q4463@name q4460@subst))) (car q445f@a) (cdr q445f@a)))) (if (null? q4459@s) q445a@subst (q445e@insert-to-subst (car q4459@s) (q4268@merge-substs (cdr q4459@s) q445a@subst))))) '#f))) (set! q426a@exclude* (lambda (q4429@sym* q442a@subst) ((lambda (q442e@exclude) (begin (set! q442e@exclude (lambda (q4447@sym q4448@subst) (if (null? q4448@subst) (q2fc0@syntax-violation 'import '"cannot rename unbound identifier" q4447@sym) (if (eq? q4447@sym (caar q4448@subst)) (values (cdar q4448@subst) (cdr q4448@subst)) ((lambda (q444b@a) (call-with-values (lambda () (q442e@exclude q4447@sym (cdr q4448@subst))) (lambda (q4451@q444e q4452@q4450) ((lambda (q4455@subst q4456@old) (values q4456@old (cons q444b@a q4455@subst))) q4452@q4450 q4451@q444e)))) (car q4448@subst)))))) (if (null? q4429@sym*) (values '() q442a@subst) (call-with-values (lambda () (q442e@exclude (car q4429@sym*) q442a@subst)) (lambda (q4433@q4430 q4434@q4432) ((lambda (q4437@subst q4438@old) (call-with-values (lambda () (q426a@exclude* (cdr q4429@sym*) q4437@subst)) (lambda (q443f@q443c q4440@q443e) ((lambda (q4443@subst q4444@old*) (values (cons q4438@old q4444@old*) q4443@subst)) q4440@q443e q443f@q443c)))) q4434@q4432 q4433@q4430)))))) '#f))) (set! q426c@find* (lambda (q4421@sym* q4422@subst) (map (lambda (q4425@x) ((lambda (q4427@t) (if q4427@t (cdr q4427@t) (q2fc0@syntax-violation 'import '"cannot find identifier" q4425@x))) (assq q4425@x q4422@subst))) q4421@sym*))) (set! q426e@rem* (lambda (q4419@sym* q441a@subst) ((letrec ((q441d@f (lambda (q441f@subst) (if (null? q441f@subst) '() (if (memq (caar q441f@subst) q4419@sym*) (q441d@f (cdr q441f@subst)) (cons (car q441f@subst) (q441d@f (cdr q441f@subst)))))))) q441d@f) q441a@subst))) (set! q4270@remove-dups (lambda (q4417@ls) (if (null? q4417@ls) '() (if (memq (car q4417@ls) (cdr q4417@ls)) (q4270@remove-dups (cdr q4417@ls)) (cons (car q4417@ls) (q4270@remove-dups (cdr q4417@ls))))))) (set! q4272@parse-library-name (lambda (q432f@spec) ((lambda (q4332@subversion? q4334@subversion-pred q4336@version-pred) (begin (set! q4332@subversion? (lambda (q4413@x) ((lambda (q4415@x) (and (integer? q4415@x) (exact? q4415@x) (>= q4415@x '0))) (q2fc6@syntax->datum q4413@x)))) (set! q4334@subversion-pred (lambda (q43b3@x*) ((lambda (q43b5@t) ((lambda (q43b7@ls/false) (if (and q43b7@ls/false (apply (lambda (q43b9@n) (q4332@subversion? q43b9@n)) q43b7@ls/false)) (apply (lambda (q43bb@n) (lambda (q43bd@x) (= q43bd@x (q2fc6@syntax->datum q43bb@n)))) q43b7@ls/false) ((lambda (q43bf@t) ((lambda (q43c1@ls/false) (if (and q43c1@ls/false (apply (lambda (q43c3@p? q43c4@sub*) (eq? (q2fc6@syntax->datum q43c3@p?) 'and)) q43c1@ls/false)) (apply (lambda (q43c7@p? q43c8@sub*) ((lambda (q43cb@p*) (lambda (q43cd@x) (for-all (lambda (q43cf@p) (q43cf@p q43cd@x)) q43cb@p*))) (map q4334@subversion-pred q43c8@sub*))) q43c1@ls/false) ((lambda (q43d1@t) ((lambda (q43d3@ls/false) (if (and q43d3@ls/false (apply (lambda (q43d5@p? q43d6@sub*) (eq? (q2fc6@syntax->datum q43d5@p?) 'or)) q43d3@ls/false)) (apply (lambda (q43d9@p? q43da@sub*) ((lambda (q43dd@p*) (lambda (q43df@x) (exists (lambda (q43e1@p) (q43e1@p q43df@x)) q43dd@p*))) (map q4334@subversion-pred q43da@sub*))) q43d3@ls/false) ((lambda (q43e3@t) ((lambda (q43e5@ls/false) (if (and q43e5@ls/false (apply (lambda (q43e7@p? q43e8@sub) (eq? (q2fc6@syntax->datum q43e7@p?) 'not)) q43e5@ls/false)) (apply (lambda (q43eb@p? q43ec@sub) ((lambda (q43ef@p) (lambda (q43f1@x) (not (q43ef@p q43f1@x)))) (q4334@subversion-pred q43ec@sub))) q43e5@ls/false) ((lambda (q43f3@t) ((lambda (q43f5@ls/false) (if (and q43f5@ls/false (apply (lambda (q43f7@p? q43f8@n) (and (eq? (q2fc6@syntax->datum q43f7@p?) '<=) (q4332@subversion? q43f8@n))) q43f5@ls/false)) (apply (lambda (q43fb@p? q43fc@n) (lambda (q43ff@x) (<= q43ff@x (q2fc6@syntax->datum q43fc@n)))) q43f5@ls/false) ((lambda (q4401@t) ((lambda (q4403@ls/false) (if (and q4403@ls/false (apply (lambda (q4405@p? q4406@n) (and (eq? (q2fc6@syntax->datum q4405@p?) '>=) (q4332@subversion? q4406@n))) q4403@ls/false)) (apply (lambda (q4409@p? q440a@n) (lambda (q440d@x) (>= q440d@x (q2fc6@syntax->datum q440a@n)))) q4403@ls/false) ((lambda (q440f@t) ((lambda (q4411@ls/false) (if q4411@ls/false (apply (lambda () (q2fc0@syntax-violation 'import '"invalid sub-version spec" q432f@spec q43b3@x*)) q4411@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q440f@t))) (q2ed7@syntax-dispatch q440f@t '_))) q4401@t))) (q2ed7@syntax-dispatch q4401@t '(any any)))) q43f3@t))) (q2ed7@syntax-dispatch q43f3@t '(any any)))) q43e3@t))) (q2ed7@syntax-dispatch q43e3@t '(any any)))) q43d1@t))) (q2ed7@syntax-dispatch q43d1@t '(any . each-any)))) q43bf@t))) (q2ed7@syntax-dispatch q43bf@t '(any . each-any)))) q43b5@t))) (q2ed7@syntax-dispatch q43b5@t 'any))) q43b3@x*))) (set! q4336@version-pred (lambda (q4363@x*) ((lambda (q4365@t) ((lambda (q4367@ls/false) (if q4367@ls/false (apply (lambda () (lambda (q4369@x) '#t)) q4367@ls/false) ((lambda (q436b@t) ((lambda (q436d@ls/false) (if (and q436d@ls/false (apply (lambda (q436f@c q4370@ver*) (eq? (q2fc6@syntax->datum q436f@c) 'and)) q436d@ls/false)) (apply (lambda (q4373@c q4374@ver*) ((lambda (q4377@p*) (lambda (q4379@x) (for-all (lambda (q437b@p) (q437b@p q4379@x)) q4377@p*))) (map q4336@version-pred q4374@ver*))) q436d@ls/false) ((lambda (q437d@t) ((lambda (q437f@ls/false) (if (and q437f@ls/false (apply (lambda (q4381@c q4382@ver*) (eq? (q2fc6@syntax->datum q4381@c) 'or)) q437f@ls/false)) (apply (lambda (q4385@c q4386@ver*) ((lambda (q4389@p*) (lambda (q438b@x) (exists (lambda (q438d@p) (q438d@p q438b@x)) q4389@p*))) (map q4336@version-pred q4386@ver*))) q437f@ls/false) ((lambda (q438f@t) ((lambda (q4391@ls/false) (if (and q4391@ls/false (apply (lambda (q4393@c q4394@ver) (eq? (q2fc6@syntax->datum q4393@c) 'not)) q4391@ls/false)) (apply (lambda (q4397@c q4398@ver) ((lambda (q439b@p) (lambda (q439d@x) (not (q439b@p q439d@x)))) (q4336@version-pred q4398@ver))) q4391@ls/false) ((lambda (q439f@t) ((lambda (q43a1@ls/false) (if q43a1@ls/false (apply (lambda (q43a3@sub*) ((lambda (q43a5@p*) (lambda (q43a7@x) ((letrec ((q43a9@f (lambda (q43ab@p* q43ac@x) (if (null? q43ab@p*) '#t (if (null? q43ac@x) '#f (and ((car q43ab@p*) (car q43ac@x)) (q43a9@f (cdr q43ab@p*) (cdr q43ac@x)))))))) q43a9@f) q43a5@p* q43a7@x))) (map q4334@subversion-pred q43a3@sub*))) q43a1@ls/false) ((lambda (q43af@t) ((lambda (q43b1@ls/false) (if q43b1@ls/false (apply (lambda () (q2fc0@syntax-violation 'import '"invalid version spec" q432f@spec q4363@x*)) q43b1@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q43af@t))) (q2ed7@syntax-dispatch q43af@t '_))) q439f@t))) (q2ed7@syntax-dispatch q439f@t 'each-any))) q438f@t))) (q2ed7@syntax-dispatch q438f@t '(any any)))) q437d@t))) (q2ed7@syntax-dispatch q437d@t '(any . each-any)))) q436b@t))) (q2ed7@syntax-dispatch q436b@t '(any . each-any)))) q4365@t))) (q2ed7@syntax-dispatch q4365@t '()))) q4363@x*))) ((letrec ((q4337@f (lambda (q4339@x) ((lambda (q433b@t) ((lambda (q433d@ls/false) (if q433d@ls/false (apply (lambda (q433f@version-spec*) (values '() (q4336@version-pred q433f@version-spec*))) q433d@ls/false) ((lambda (q4341@t) ((lambda (q4343@ls/false) (if (and q4343@ls/false (apply (lambda (q4345@x q4346@x*) (q4264@idsyn? q4345@x)) q4343@ls/false)) (apply (lambda (q4349@x q434a@x*) (call-with-values (lambda () (q4337@f q434a@x*)) (lambda (q4351@q434e q4352@q4350) ((lambda (q4355@pred q4356@name) (values (cons (q2fc6@syntax->datum q4349@x) q4356@name) q4355@pred)) q4352@q4350 q4351@q434e)))) q4343@ls/false) ((lambda (q4359@t) ((lambda (q435b@ls/false) (if q435b@ls/false (apply (lambda () (values '() (lambda (q435d@x) '#t))) q435b@ls/false) ((lambda (q435f@t) ((lambda (q4361@ls/false) (if q4361@ls/false (apply (lambda () (q2fc0@syntax-violation '#f '"invalid import spec" q432f@spec)) q4361@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q435f@t))) (q2ed7@syntax-dispatch q435f@t '_))) q4359@t))) (q2ed7@syntax-dispatch q4359@t '()))) q4341@t))) (q2ed7@syntax-dispatch q4341@t '(any . any)))) q433b@t))) (q2ed7@syntax-dispatch q433b@t '(each-any)))) q4339@x)))) q4337@f) q432f@spec))) '#f '#f '#f))) (set! q4274@import-library (lambda (q431f@spec*) (call-with-values (lambda () (q4272@parse-library-name q431f@spec*)) (lambda (q4325@q4322 q4326@q4324) ((lambda (q4329@pred q432a@name) (begin (if (null? q432a@name) (q2fc0@syntax-violation 'import '"empty library name" q431f@spec*) (void)) ((lambda (q432d@lib) (begin (if (not q432d@lib) (q2fc0@syntax-violation 'import '"cannot find library with required name" q432a@name) (void)) (if (not (q4329@pred (q2ac1@q2933@library-version q432d@lib))) (q2fc0@syntax-violation 'import '"library does not satisfy version specification" q431f@spec* q432d@lib) (void)) ((q2f46@imp-collector) q432d@lib) (q2ac5@q293b@library-subst q432d@lib))) (q2ae9@q2983@find-library-by-name q432a@name)))) q4326@q4324 q4325@q4322))))) (set! q4276@get-import (lambda (q4291@spec) ((lambda (q4293@t) ((lambda (q4295@ls/false) (if (and q4295@ls/false (apply (lambda (q4297@x q4298@x*) (not (memq (q2fc6@syntax->datum q4297@x) '(for rename except only prefix library)))) q4295@ls/false)) (apply (lambda (q429b@x q429c@x*) (q4274@import-library (cons q429b@x q429c@x*))) q4295@ls/false) ((lambda (q429f@t) ((lambda (q42a1@ls/false) (if (and q42a1@ls/false (apply (lambda (q42a3@rename q42a4@isp q42a5@old* q42a6@new*) (and (eq? (q2fc6@syntax->datum q42a3@rename) 'rename) (for-all q4264@idsyn? q42a5@old*) (for-all q4264@idsyn? q42a6@new*))) q42a1@ls/false)) (apply (lambda (q42ab@rename q42ac@isp q42ad@old* q42ae@new*) ((lambda (q42b3@subst q42b4@old* q42b5@new*) ((lambda (q42b9@old-label*) ((lambda (q42bb@subst) (q4268@merge-substs (map cons q42b5@new* q42b9@old-label*) q42bb@subst)) (q426e@rem* q42b4@old* q42b3@subst))) (q426c@find* q42b4@old* q42b3@subst))) (q4276@get-import q42ac@isp) (map q2fc6@syntax->datum q42ad@old*) (map q2fc6@syntax->datum q42ae@new*))) q42a1@ls/false) ((lambda (q42bd@t) ((lambda (q42bf@ls/false) (if (and q42bf@ls/false (apply (lambda (q42c1@except q42c2@isp q42c3@sym*) (and (eq? (q2fc6@syntax->datum q42c1@except) 'except) (for-all q4264@idsyn? q42c3@sym*))) q42bf@ls/false)) (apply (lambda (q42c7@except q42c8@isp q42c9@sym*) ((lambda (q42cd@subst) (q426e@rem* (map q2fc6@syntax->datum q42c9@sym*) q42cd@subst)) (q4276@get-import q42c8@isp))) q42bf@ls/false) ((lambda (q42cf@t) ((lambda (q42d1@ls/false) (if (and q42d1@ls/false (apply (lambda (q42d3@only q42d4@isp q42d5@sym*) (and (eq? (q2fc6@syntax->datum q42d3@only) 'only) (for-all q4264@idsyn? q42d5@sym*))) q42d1@ls/false)) (apply (lambda (q42d9@only q42da@isp q42db@sym*) ((lambda (q42df@subst q42e0@sym*) ((lambda (q42e3@sym*) ((lambda (q42e5@lab*) (map cons q42e3@sym* q42e5@lab*)) (q426c@find* q42e3@sym* q42df@subst))) (q4270@remove-dups q42e0@sym*))) (q4276@get-import q42da@isp) (map q2fc6@syntax->datum q42db@sym*))) q42d1@ls/false) ((lambda (q42e7@t) ((lambda (q42e9@ls/false) (if (and q42e9@ls/false (apply (lambda (q42eb@prefix q42ec@isp q42ed@p) (and (eq? (q2fc6@syntax->datum q42eb@prefix) 'prefix) (q4264@idsyn? q42ed@p))) q42e9@ls/false)) (apply (lambda (q42f1@prefix q42f2@isp q42f3@p) ((lambda (q42f7@subst q42f8@prefix) (map (lambda (q42fb@x) (cons (string->symbol (string-append q42f8@prefix (symbol->string (car q42fb@x)))) (cdr q42fb@x))) q42f7@subst)) (q4276@get-import q42f2@isp) (symbol->string (q2fc6@syntax->datum q42f3@p)))) q42e9@ls/false) ((lambda (q42fd@t) ((lambda (q42ff@ls/false) (if (and q42ff@ls/false (apply (lambda (q4301@library q4302@spec*) (eq? (q2fc6@syntax->datum q4301@library) 'library)) q42ff@ls/false)) (apply (lambda (q4305@library q4306@spec*) (q4274@import-library q4306@spec*)) q42ff@ls/false) ((lambda (q4309@t) ((lambda (q430b@ls/false) (if (and q430b@ls/false (apply (lambda (q430d@for q430e@isp q430f@rest) (eq? (q2fc6@syntax->datum q430d@for) 'for)) q430b@ls/false)) (apply (lambda (q4313@for q4314@isp q4315@rest) (q4276@get-import q4314@isp)) q430b@ls/false) ((lambda (q4319@t) ((lambda (q431b@ls/false) (if q431b@ls/false (apply (lambda (q431d@spec) (q2fc0@syntax-violation 'import '"invalid import spec" q431d@spec)) q431b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q4319@t))) (q2ed7@syntax-dispatch q4319@t 'any))) q4309@t))) (q2ed7@syntax-dispatch q4309@t '(any any . any)))) q42fd@t))) (q2ed7@syntax-dispatch q42fd@t '(any each-any)))) q42e7@t))) (q2ed7@syntax-dispatch q42e7@t '(any any any)))) q42cf@t))) (q2ed7@syntax-dispatch q42cf@t '(any any . each-any)))) q42bd@t))) (q2ed7@syntax-dispatch q42bd@t '(any any . each-any)))) q429f@t))) (q2ed7@syntax-dispatch q429f@t '(any any . #(each (any any)))))) q4293@t))) (q2ed7@syntax-dispatch q4293@t '(any . each-any)))) q4291@spec))) (set! q4278@add-imports! (lambda (q4281@imp q4282@h) ((lambda (q4285@subst) (for-each (lambda (q4287@x) ((lambda (q4289@name q428a@label) ((lambda (q428d@t) (if q428d@t ((lambda (q428f@l) (if (not (eq? q428f@l q428a@label)) (q4266@dup-error q4289@name) (void))) q428d@t) (hashtable-set! q4282@h q4289@name q428a@label))) (hashtable-ref q4282@h q4289@name '#f))) (car q4287@x) (cdr q4287@x))) q4285@subst)) (q4276@get-import q4281@imp)))) (lambda (q4279@imp*) ((letrec ((q427b@f (lambda (q427d@imp* q427e@h) (if (null? q427d@imp*) (hashtable-entries q427e@h) (begin (q4278@add-imports! (car q427d@imp*) q427e@h) (q427b@f (cdr q427d@imp*) q427e@h)))))) q427b@f) q4279@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2f3e@make-top-rib (lambda (q446f@names q4470@labels) ((lambda (q4473@rib) (begin (vector-for-each (lambda (q4475@name q4476@label) (begin (if (not (symbol? q4475@name)) (error 'make-top-rib '"BUG: not a symbol" q4475@name) (void)) (q2c7f@extend-rib/nc! q4473@rib (q2c96@make-stx q4475@name q2c48@top-mark* '() '()) q4476@label))) q446f@names q4470@labels) q4473@rib)) (q2c7b@make-empty-rib)))) (set! q2f40@make-collector (lambda () ((lambda (q4479@ls) (lambda q447d ((lambda (q447e) (if (= q447e '0) (apply (lambda () q4479@ls) q447d) (if (= q447e '1) (apply (lambda (q447b@x) (set! q4479@ls (q2c41@set-cons q447b@x q4479@ls))) q447d) (error 'apply '"invalid arg count")))) (length q447d)))) '()))) (set! q2f42@inv-collector (q2876@q27a0@make-parameter (lambda q447f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (q4481@x) (begin (if (not (procedure? q4481@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" q4481@x) (void)) q4481@x)))) (set! q2f44@vis-collector (q2876@q27a0@make-parameter (lambda q4483@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (q4485@x) (begin (if (not (procedure? q4485@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" q4485@x) (void)) q4485@x)))) (set! q2f46@imp-collector (q2876@q27a0@make-parameter (lambda q4487@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (q4489@x) (begin (if (not (procedure? q4489@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" q4489@x) (void)) q4489@x)))) (set! q2f48@chi-library-internal (lambda (q448b@e* q448c@rib q448d@top?) (call-with-values (lambda () (q2f32@chi-body* q448b@e* '() '() '() '() '() '() '() q448c@rib q448d@top?)) (lambda (q44a1@q4492 q44a2@q4494 q44a3@q4496 q44a4@q4498 q44a5@q449a q44a6@q449c q44a7@q449e q44a8@q44a0) ((lambda (q44b1@exp* q44b2@_kwd* q44b3@mod** q44b4@rhs* q44b5@lex* q44b6@mr q44b7@r q44b8@e*) (values (append (apply append (reverse q44b3@mod**)) q44b8@e*) q44b7@r q44b6@mr (reverse q44b5@lex*) (reverse q44b4@rhs*) q44b1@exp*)) q44a8@q44a0 q44a7@q449e q44a6@q449c q44a5@q449a q44a4@q4498 q44a3@q4496 q44a2@q4494 q44a1@q4492))))) (set! q2f4a@chi-interaction-expr (lambda (q44c1@e q44c2@rib q44c3@r) (call-with-values (lambda () (q2f32@chi-body* (list q44c1@e) q44c3@r q44c3@r '() '() '() '() '() q44c2@rib '#t)) (lambda (q44d7@q44c8 q44d8@q44ca q44d9@q44cc q44da@q44ce q44db@q44d0 q44dc@q44d2 q44dd@q44d4 q44de@q44d6) ((lambda (q44e7@_exp* q44e8@_kwd* q44e9@mod** q44ea@rhs* q44eb@lex* q44ec@mr q44ed@r q44ee@e*) ((lambda (q44f7@e*) ((lambda (q44f9@e) (values q44f9@e q44ed@r)) (if (null? q44f7@e*) (q2c2c@q2b9c@build-void) (if (null? (cdr q44f7@e*)) (car q44f7@e*) (q2c2b@q2b9a@build-sequence '#f q44f7@e*))))) (q2f07@expand-interaction-rhs*/init* (reverse q44eb@lex*) (reverse q44ea@rhs*) (append (apply append (reverse q44e9@mod**)) q44ee@e*) q44ed@r q44ec@mr))) q44de@q44d6 q44dd@q44d4 q44dc@q44d2 q44db@q44d0 q44da@q44ce q44d9@q44cc q44d8@q44ca q44d7@q44c8))))) (set! q2f4c@library-body-expander (lambda (q44fb@name q44fc@main-exp* q44fd@imp* q44fe@b* q44ff@top?) ((lambda (q4506@itc) (begin (set! q4506@itc (q2f40@make-collector)) ((lambda (q450f@q4508 q4510@q450a q4511@q450c q4512@q450e) ((lambda (q4517@swap) (dynamic-wind q4517@swap (lambda () (call-with-values (lambda () (q2f3c@parse-import-spec* q44fd@imp*)) (lambda (q451d@q451a q451e@q451c) ((lambda (q4521@subst-labels q4522@subst-names) ((lambda (q4525@rib) ((lambda (q4528@wrap) (begin (set! q4528@wrap (lambda (q45a3@x) (q2c96@make-stx q45a3@x q2c48@top-mark* (list q4525@rib) '()))) ((lambda (q4529@b* q452a@main-exp* q452b@rtc q452c@vtc) ((lambda (q4539@q4532 q453a@q4534 q453b@q4536 q453c@q4538) ((lambda (q4541@swap) (dynamic-wind q4541@swap (lambda () (call-with-values (lambda () (q2f48@chi-library-internal q4529@b* q4525@rib q44ff@top?)) (lambda (q454f@q4544 q4550@q4546 q4551@q4548 q4552@q454a q4553@q454c q4554@q454e) ((lambda (q455b@internal-exp* q455c@rhs* q455d@lex* q455e@mr q455f@r q4560@init*) (call-with-values (lambda () (q2f36@parse-exports (append q452a@main-exp* q455b@internal-exp*))) (lambda (q456b@q4568 q456c@q456a) ((lambda (q456f@exp-id* q4570@exp-name*) (begin (q2c83@seal-rib! q4525@rib) ((lambda (q4573@init*) ((lambda (q4575@rhs*) ((lambda () (begin (q2c85@unseal-rib! q4525@rib) ((lambda (q4577@loc* q4578@export-subst) ((lambda (q457c@errstr) (begin (set! q457c@errstr '"attempt to export mutated variable") (call-with-values (lambda () (q2fac@make-export-env/macros q455d@lex* q4577@loc* q455f@r)) (lambda (q4583@q457e q4584@q4580 q4585@q4582) ((lambda (q4589@macro* q458a@global* q458b@export-env) (begin (for-each (lambda (q458f@s) ((lambda (q4591@name q4592@label) ((lambda (q4595@p) (if q4595@p ((lambda (q4597@b) ((lambda (q4599@type) (if (eq? q4599@type 'mutable) (q2fc0@syntax-violation 'export q457c@errstr q4591@name) (void))) (car q4597@b))) (cdr q4595@p)) (void))) (assq q4592@label q458b@export-env))) (car q458f@s) (cdr q458f@s))) q4578@export-subst) ((lambda (q459b@invoke-body q459c@invoke-definitions) (values (q4506@itc) (q452b@rtc) (q452c@vtc) (q2c2b@q2b9a@build-sequence '#f (append q459c@invoke-definitions (list q459b@invoke-body))) q4589@macro* q4578@export-subst q458b@export-env)) (q2c2e@q2ba0@build-letrec* '#f q455d@lex* q4575@rhs* (q2fa8@build-exports q458a@global* q4573@init*)) (map q2c27@q2af7@build-global-define (map cdr q458a@global*))))) q4585@q4582 q4584@q4580 q4583@q457e))))) '#f)) (map q2c4e@gen-global q455d@lex*) (q2faa@make-export-subst q4570@exp-name* q456f@exp-id*)))))) (q2f09@chi-rhs* q455c@rhs* q455f@r q455e@mr))) (q2ef5@chi-expr* q4560@init* q455f@r q455e@mr)))) q456c@q456a q456b@q4568)))) q4554@q454e q4553@q454c q4552@q454a q4551@q4548 q4550@q4546 q454f@q4544)))) q4541@swap)) (lambda () (begin ((lambda (q459f@t) (begin (q4539@q4532 q453b@q4536) (set! q453b@q4536 q459f@t))) (q4539@q4532)) ((lambda (q45a1@t) (begin (q453a@q4534 q453c@q4538) (set! q453c@q4538 q45a1@t))) (q453a@q4534)))))) q2f42@inv-collector q2f44@vis-collector q452b@rtc q452c@vtc)) (map q4528@wrap q44fe@b*) (map q4528@wrap q44fc@main-exp*) (q2f40@make-collector) (q2f40@make-collector)))) '#f)) (q2f3e@make-top-rib q4522@subst-names q4521@subst-labels))) q451e@q451c q451d@q451a)))) q4517@swap)) (lambda () (begin ((lambda (q45a5@t) (begin (q450f@q4508 q4511@q450c) (set! q4511@q450c q45a5@t))) (q450f@q4508)) ((lambda (q45a7@t) (begin (q4510@q450a q4512@q450e) (set! q4512@q450e q45a7@t))) (q4510@q450a)))))) q2f46@imp-collector q2fce@top-level-context q4506@itc '#f))) '#f))) (set! q2f4e@core-library-expander (lambda (q45a9@e q45aa@verify-name) (call-with-values (lambda () (q2f3a@parse-library q45a9@e)) (lambda (q45b5@q45ae q45b6@q45b0 q45b7@q45b2 q45b8@q45b4) ((lambda (q45bd@b* q45be@imp* q45bf@exp* q45c0@name*) (call-with-values (lambda () (q2f38@parse-library-name q45c0@name*)) (lambda (q45c9@q45c6 q45ca@q45c8) ((lambda (q45cd@ver q45ce@name) (begin (q45aa@verify-name q45ce@name) (call-with-values (lambda () (q2f4c@library-body-expander q45ce@name q45bf@exp* q45be@imp* q45bd@b* '#f)) (lambda (q45df@q45d2 q45e0@q45d4 q45e1@q45d6 q45e2@q45d8 q45e3@q45da q45e4@q45dc q45e5@q45de) ((lambda (q45ed@export-env q45ee@export-subst q45ef@visit-code q45f0@invoke-code q45f1@visit-req* q45f2@invoke-req* q45f3@imp*) (values q45ce@name q45cd@ver q45f3@imp* q45f2@invoke-req* q45f1@visit-req* q45f0@invoke-code q45ef@visit-code q45ee@export-subst q45ed@export-env)) q45e5@q45de q45e4@q45dc q45e3@q45da q45e2@q45d8 q45e1@q45d6 q45e0@q45d4 q45df@q45d2))))) q45ca@q45c8 q45c9@q45c6)))) q45b8@q45b4 q45b7@q45b2 q45b6@q45b0 q45b5@q45ae))))) (set! q2f50@parse-top-level-program (lambda (q45fb@e*) ((lambda (q45fd@t) ((lambda (q45ff@ls/false) (if (and q45ff@ls/false (apply (lambda (q4601@import q4602@imp* q4603@b*) (eq? (q2fc6@syntax->datum q4601@import) 'import)) q45ff@ls/false)) (apply (lambda (q4607@import q4608@imp* q4609@b*) (values q4608@imp* q4609@b*)) q45ff@ls/false) ((lambda (q460d@t) ((lambda (q460f@ls/false) (if (and q460f@ls/false (apply (lambda (q4611@import q4612@x q4613@y) (eq? (q2fc6@syntax->datum q4611@import) 'import)) q460f@ls/false)) (apply (lambda (q4617@import q4618@x q4619@y) (q2fc0@syntax-violation 'expander '"invalid syntax of top-level program" (q2cc6@syntax-car q45fb@e*))) q460f@ls/false) ((lambda (q461d@t) ((lambda (q461f@ls/false) (if q461f@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) q461f@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q461d@t))) (q2ed7@syntax-dispatch q461d@t '_))) q460d@t))) (q2ed7@syntax-dispatch q460d@t '((any . any) . any)))) q45fd@t))) (q2ed7@syntax-dispatch q45fd@t '((any . each-any) . each-any)))) q45fb@e*))) (set! q2f52@top-level-expander (lambda (q4621@e*) (call-with-values (lambda () (q2f50@parse-top-level-program q4621@e*)) (lambda (q4627@q4624 q4628@q4626) ((lambda (q462b@b* q462c@imp*) (call-with-values (lambda () (q2f4c@library-body-expander '() '() q462c@imp* q462b@b* '#t)) (lambda (q463d@q4630 q463e@q4632 q463f@q4634 q4640@q4636 q4641@q4638 q4642@q463a q4643@q463c) ((lambda (q464b@export-env q464c@export-subst q464d@visit-code q464e@invoke-code q464f@visit-req* q4650@invoke-req* q4651@imp*) (values q4650@invoke-req* q464e@invoke-code)) q4643@q463c q4642@q463a q4641@q4638 q4640@q4636 q463f@q4634 q463e@q4632 q463d@q4630)))) q4628@q4626 q4627@q4624))))) (set! q2f58@q2f53 (make-record-type-descriptor 'env '#f 'q2f56 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! q2f5a@q2f55 '#f) (set! q2f5c@q2f54 (make-record-constructor-descriptor q2f58@q2f53 '#f q2f5a@q2f55)) (set! q2f5f@env? (record-predicate q2f58@q2f53)) (set! q2f61@make-env (record-constructor q2f5c@q2f54)) (set! q2f63@env-names (record-accessor q2f58@q2f53 '0)) (set! q2f65@env-labels (record-accessor q2f58@q2f53 '1)) (set! q2f67@env-itc (record-accessor q2f58@q2f53 '2)) (set! q2f69@set-env-names! (record-mutator q2f58@q2f53 '0)) (set! q2f6b@set-env-labels! (record-mutator q2f58@q2f53 '1)) (set! q2f6d@set-env-itc! (record-mutator q2f58@q2f53 '2)) (set! q2f6f@rp (q2873@q279a@make-record-printer 'env (lambda (q4659@x q465a@p q465b@wr) (display '"#<environment>" q465a@p)))) (set! q2f75@q2f70 (make-record-type-descriptor 'interaction-env '#f 'q2f73 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! q2f77@q2f72 '#f) (set! q2f79@q2f71 (make-record-constructor-descriptor q2f75@q2f70 '#f q2f77@q2f72)) (set! q2f7c@interaction-env? (record-predicate q2f75@q2f70)) (set! q2f7e@make-interaction-env (record-constructor q2f79@q2f71)) (set! q2f80@interaction-env-rib (record-accessor q2f75@q2f70 '0)) (set! q2f82@interaction-env-r (record-accessor q2f75@q2f70 '1)) (set! q2f84@interaction-env-locs (record-accessor q2f75@q2f70 '2)) (set! q2f86@set-interaction-env-rib! (record-mutator q2f75@q2f70 '0)) (set! q2f88@set-interaction-env-r! (record-mutator q2f75@q2f70 '1)) (set! q2f8a@set-interaction-env-locs! (record-mutator q2f75@q2f70 '2)) (set! q2f8c@rp (q2873@q279a@make-record-printer 'interaction-env (lambda (q465f@x q4660@p q4661@wr) (display '"#<environment>" q4660@p)))) (set! q2f8e@interaction-environment-symbols (lambda () (q2f96@environment-symbols (q2fcc@interaction-environment)))) (set! q2f90@environment-bindings (lambda (q4665@e) (vector->list (vector-map (lambda (q4667@name q4668@label) (q2f92@parse-binding (cons q4667@name (q2aef@q298f@imported-label->binding q4668@label)))) (q2f63@env-names q4665@e) (q2f65@env-labels q4665@e))))) (set! q2f92@parse-binding (lambda (q466b@b) (cons (car q466b@b) ((lambda (q466d@t) (if (memv q466d@t '(core-prim global)) 'procedure (if (memv q466d@t '(core-macro macro global-macro)) 'syntax (if (memv q466d@t '($core-rtd)) 'record (if (eq? (car q466b@b) (cadr q466b@b)) 'syntax 'unknown))))) (cadr q466b@b))))) (set! q2f94@environment? (lambda (q466f@x) (or (q2f5f@env? q466f@x) (q2f7c@interaction-env? q466f@x)))) (set! q2f96@environment-symbols (lambda (q4671@x) (if (q2f5f@env? q4671@x) (vector->list (q2f63@env-names q4671@x)) (if (q2f7c@interaction-env? q4671@x) (map values (q2c67@rib-sym* (q2f80@interaction-env-rib q4671@x))) (assertion-violation 'environment-symbols '"not an environment" q4671@x))))) (set! q2f98@environment (lambda q4673@imp* ((lambda (q4675@itc) ((lambda (q467b@q4678 q467c@q467a) ((lambda (q467f@swap) (dynamic-wind q467f@swap (lambda () (call-with-values (lambda () (q2f3c@parse-import-spec* q4673@imp*)) (lambda (q4685@q4682 q4686@q4684) ((lambda (q4689@subst-labels q468a@subst-names) (q2f61@make-env q468a@subst-names q4689@subst-labels q4675@itc)) q4686@q4684 q4685@q4682)))) q467f@swap)) (lambda () ((lambda (q468d@t) (begin (q467b@q4678 q467c@q467a) (set! q467c@q467a q468d@t))) (q467b@q4678))))) q2f46@imp-collector q4675@itc)) (q2f40@make-collector)))) (set! q2f9a@null-environment (lambda (q468f@n) (begin (if (not (eqv? q468f@n '5)) (assertion-violation 'null-environment '"not 5" q468f@n) (void)) (q2f98@environment '(psyntax null-environment-5))))) (set! q2f9c@scheme-report-environment (lambda (q4691@n) (begin (if (not (eqv? q4691@n '5)) (assertion-violation 'scheme-report-environment '"not 5" q4691@n) (void)) (q2f98@environment '(psyntax scheme-report-environment-5))))) (set! q2f9e@expand (lambda (q4693@x q4694@env) (if (q2f5f@env? q4694@env) ((lambda (q4697@rib) ((lambda (q4699@x q469a@itc q469b@rtc q469c@vtc) ((lambda (q46a1@x) (begin (q2c83@seal-rib! q4697@rib) (values q46a1@x (q469b@rtc)))) ((lambda (q46b3@q46a4 q46b4@q46a6 q46b5@q46a8 q46b6@q46aa q46b7@q46ac q46b8@q46ae q46b9@q46b0 q46ba@q46b2) ((lambda (q46c3@swap) (dynamic-wind q46c3@swap (lambda () (q2ef9@chi-expr q4699@x '() '())) q46c3@swap)) (lambda () (begin ((lambda (q46c5@t) (begin (q46b3@q46a4 q46b7@q46ac) (set! q46b7@q46ac q46c5@t))) (q46b3@q46a4)) ((lambda (q46c7@t) (begin (q46b4@q46a6 q46b8@q46ae) (set! q46b8@q46ae q46c7@t))) (q46b4@q46a6)) ((lambda (q46c9@t) (begin (q46b5@q46a8 q46b9@q46b0) (set! q46b9@q46b0 q46c9@t))) (q46b5@q46a8)) ((lambda (q46cb@t) (begin (q46b6@q46aa q46ba@q46b2) (set! q46ba@q46b2 q46cb@t))) (q46b6@q46aa)))))) q2fce@top-level-context q2f42@inv-collector q2f44@vis-collector q2f46@imp-collector '#f q469b@rtc q469c@vtc q469a@itc))) (q2c96@make-stx q4693@x q2c48@top-mark* (list q4697@rib) '()) (q2f67@env-itc q4694@env) (q2f40@make-collector) (q2f40@make-collector))) (q2f3e@make-top-rib (q2f63@env-names q4694@env) (q2f65@env-labels q4694@env))) (if (q2f7c@interaction-env? q4694@env) ((lambda (q46cd@rib q46ce@r q46cf@rtc) ((lambda (q46d3@x) (call-with-values (lambda () ((lambda (q46e9@q46da q46ea@q46dc q46eb@q46de q46ec@q46e0 q46ed@q46e2 q46ee@q46e4 q46ef@q46e6 q46f0@q46e8) ((lambda (q46f9@swap) (dynamic-wind q46f9@swap (lambda () (q2f4a@chi-interaction-expr q46d3@x q46cd@rib q46ce@r)) q46f9@swap)) (lambda () (begin ((lambda (q46fb@t) (begin (q46e9@q46da q46ed@q46e2) (set! q46ed@q46e2 q46fb@t))) (q46e9@q46da)) ((lambda (q46fd@t) (begin (q46ea@q46dc q46ee@q46e4) (set! q46ee@q46e4 q46fd@t))) (q46ea@q46dc)) ((lambda (q46ff@t) (begin (q46eb@q46de q46ef@q46e6) (set! q46ef@q46e6 q46ff@t))) (q46eb@q46de)) ((lambda (q4701@t) (begin (q46ec@q46e0 q46f0@q46e8) (set! q46f0@q46e8 q4701@t))) (q46ec@q46e0)))))) q2fce@top-level-context q2f42@inv-collector q2f44@vis-collector q2f46@imp-collector q4694@env q46cf@rtc (q2f40@make-collector) (q2f40@make-collector))) (lambda (q4703@q46d6 q4704@q46d8) ((lambda (q4707@r^ q4708@e) (begin (q2f88@set-interaction-env-r! q4694@env q4707@r^) (values q4708@e (q46cf@rtc)))) q4704@q46d8 q4703@q46d6)))) (q2c96@make-stx q4693@x q2c48@top-mark* (list q46cd@rib) '()))) (q2f80@interaction-env-rib q4694@env) (q2f82@interaction-env-r q4694@env) (q2f40@make-collector)) (assertion-violation 'expand '"not an environment" q4694@env))))) (set! q2fa0@eval (lambda (q470b@x q470c@env) (begin (if (not (q2f94@environment? q470c@env)) (error 'eval '"not an environment" q470c@env) (void)) (call-with-values (lambda () (q2f9e@expand q470b@x q470c@env)) (lambda (q4713@q4710 q4714@q4712) ((lambda (q4717@invoke-req* q4718@x) (begin (for-each q2af0@q2991@invoke-library q4717@invoke-req*) (eval-core (q28ca@q2882@expanded->core q4718@x)))) q4714@q4712 q4713@q4710)))))) (set! q2fa2@library-expander (lambda q4789 ((lambda (q478a) (if (= q478a '3) (apply (lambda (q471b@x q471c@filename q471d@verify-name) ((lambda (q4722@build-visit-code q4724@visit!) (begin (set! q4722@build-visit-code (lambda (q4777@macro*) (if (null? q4777@macro*) (q2c2c@q2b9c@build-void) (q2c2b@q2b9a@build-sequence '#f (map (lambda (q4779@x) ((lambda (q477b@loc q477c@src) (list 'set! q477b@loc q477c@src)) (car q4779@x) (cddr q4779@x))) q4777@macro*))))) (set! q4724@visit! (lambda (q476f@macro*) (for-each (lambda (q4771@x) ((lambda (q4773@loc q4774@proc) (set-symbol-value! q4773@loc q4774@proc)) (car q4771@x) (cadr q4771@x))) q476f@macro*))) (call-with-values (lambda () (q2f4e@core-library-expander q471b@x q471d@verify-name)) (lambda (q4737@q4726 q4738@q4728 q4739@q472a q473a@q472c q473b@q472e q473c@q4730 q473d@q4732 q473e@q4734 q473f@q4736) ((lambda (q4749@export-env q474a@export-subst q474b@macro* q474c@invoke-code q474d@vis* q474e@inv* q474f@imp* q4750@ver q4751@name) ((lambda (q475b@id q475c@name q475d@ver q475e@imp* q475f@vis* q4760@inv* q4761@visit-proc q4762@invoke-proc q4763@visit-code q4764@invoke-code) (begin (q2aee@q298d@install-library q475b@id q475c@name q475d@ver q475e@imp* q475f@vis* q4760@inv* q474a@export-subst q4749@export-env q4761@visit-proc q4762@invoke-proc q4763@visit-code q4764@invoke-code '#t q471c@filename) (values q475b@id q475c@name q475d@ver q475e@imp* q475f@vis* q4760@inv* q4764@invoke-code q4763@visit-code q474a@export-subst q4749@export-env))) (gensym) q4751@name q4750@ver (map q2af4@q2999@library-spec q474f@imp*) (map q2af4@q2999@library-spec q474d@vis*) (map q2af4@q2999@library-spec q474e@inv*) (lambda () (q4724@visit! q474b@macro*)) (lambda () (eval-core (q28ca@q2882@expanded->core q474c@invoke-code))) (q4722@build-visit-code q474b@macro*) q474c@invoke-code)) q473f@q4736 q473e@q4734 q473d@q4732 q473c@q4730 q473b@q472e q473a@q472c q4739@q472a q4738@q4728 q4737@q4726))))) '#f '#f)) q4789) (if (= q478a '2) (apply (lambda (q477f@x q4780@filename) (q2fa2@library-expander q477f@x q4780@filename (lambda (q4783@x) (values)))) q4789) (if (= q478a '1) (apply (lambda (q4785@x) (q2fa2@library-expander q4785@x '#f (lambda (q4787@x) (values)))) q4789) (error 'apply '"invalid arg count"))))) (length q4789)))) (set! q2fa4@boot-library-expand (lambda (q478b@x) (call-with-values (lambda () (q2fa2@library-expander q478b@x)) (lambda (q47a1@q478e q47a2@q4790 q47a3@q4792 q47a4@q4794 q47a5@q4796 q47a6@q4798 q47a7@q479a q47a8@q479c q47a9@q479e q47aa@q47a0) ((lambda (q47b5@export-env q47b6@export-subst q47b7@visit-code q47b8@invoke-code q47b9@inv* q47ba@vis* q47bb@imp* q47bc@ver q47bd@name q47be@id) (values q47bd@name q47b8@invoke-code q47b6@export-subst q47b5@export-env)) q47aa@q47a0 q47a9@q479e q47a8@q479c q47a7@q479a q47a6@q4798 q47a5@q4796 q47a4@q4794 q47a3@q4792 q47a2@q4790 q47a1@q478e))))) (set! q2fa6@rev-map-append (lambda (q47c9@f q47ca@ls q47cb@ac) (if (null? q47ca@ls) q47cb@ac (q2fa6@rev-map-append q47c9@f (cdr q47ca@ls) (cons (q47c9@f (car q47ca@ls)) q47cb@ac))))) (set! q2fa8@build-exports (lambda (q47cf@lex*+loc* q47d0@init*) (q2c2b@q2b9a@build-sequence '#f (cons (q2c2c@q2b9c@build-void) (q2fa6@rev-map-append (lambda (q47d3@x) (list 'set! (cdr q47d3@x) (car q47d3@x))) q47cf@lex*+loc* q47d0@init*))))) (set! q2faa@make-export-subst (lambda (q47d5@name* q47d6@id*) (map (lambda (q47d9@name q47da@id) ((lambda (q47dd@label) (begin (if (not q47dd@label) (q2fc0@syntax-violation '#f '"cannot export unbound identifier" q47da@id) (void)) (cons q47d9@name q47dd@label))) (q2ce6@id->label q47da@id))) q47d5@name* q47d6@id*))) (set! q2fac@make-export-env/macros (lambda (q47df@lex* q47e0@loc* q47e1@r) ((lambda (q47e6@lookup) (begin (set! q47e6@lookup (lambda (q4803@x) ((letrec ((q4805@f (lambda (q4807@x q4808@lex* q4809@loc*) (if (pair? q4808@lex*) (if (eq? q4807@x (car q4808@lex*)) (car q4809@loc*) (q4805@f q4807@x (cdr q4808@lex*) (cdr q4809@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) q4805@f) q4803@x q47df@lex* q47e0@loc*))) ((letrec ((q47e7@f (lambda (q47e9@r q47ea@env q47eb@global* q47ec@macro*) (if (null? q47e9@r) (values q47ea@env q47eb@global* q47ec@macro*) ((lambda (q47f1@x) ((lambda (q47f3@label q47f4@b) ((lambda (q47f7@t) (if (memv q47f7@t '(lexical)) ((lambda (q47f9@v) ((lambda (q47fb@loc q47fc@type) (q47e7@f (cdr q47e9@r) (cons (cons* q47f3@label q47fc@type q47fb@loc) q47ea@env) (cons (cons (q2e63@lexical-var q47f9@v) q47fb@loc) q47eb@global*) q47ec@macro*)) (q47e6@lookup (q2e63@lexical-var q47f9@v)) (if (q2e65@lexical-mutable? q47f9@v) 'mutable 'global))) (q2cf0@binding-value q47f4@b)) (if (memv q47f7@t '(local-macro)) ((lambda (q47ff@loc) (q47e7@f (cdr q47e9@r) (cons (cons* q47f3@label 'global-macro q47ff@loc) q47ea@env) q47eb@global* (cons (cons q47ff@loc (q2cf0@binding-value q47f4@b)) q47ec@macro*))) (gensym)) (if (memv q47f7@t '(local-macro!)) ((lambda (q4801@loc) (q47e7@f (cdr q47e9@r) (cons (cons* q47f3@label 'global-macro! q4801@loc) q47ea@env) q47eb@global* (cons (cons q4801@loc (q2cf0@binding-value q47f4@b)) q47ec@macro*))) (gensym)) (if (memv q47f7@t '($rtd $module)) (q47e7@f (cdr q47e9@r) (cons q47f1@x q47ea@env) q47eb@global* q47ec@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (q2cee@binding-type q47f4@b) (q2cf0@binding-value q47f4@b))))))) (q2cee@binding-type q47f4@b))) (car q47f1@x) (cdr q47f1@x))) (car q47e9@r)))))) q47e7@f) q47e1@r '() '() '()))) '#f))) (set! q2fae@generate-temporaries (lambda (q480d@ls) ((lambda (q480f@t) ((lambda (q4811@ls/false) (if q4811@ls/false (apply (lambda (q4813@ls) (map (lambda (q4815@x) (q2c96@make-stx ((lambda (q4817@x) (if (or (symbol? q4817@x) (string? q4817@x)) (gensym q4817@x) (gensym 't))) (q2fc6@syntax->datum q4815@x)) q2c48@top-mark* '() '())) q4813@ls)) q4811@ls/false) ((lambda (q4819@t) ((lambda (q481b@ls/false) (if q481b@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) q481b@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q4819@t))) (q2ed7@syntax-dispatch q4819@t '_))) q480f@t))) (q2ed7@syntax-dispatch q480f@t 'each-any))) q480d@ls))) (set! q2fb0@free-identifier=? (lambda (q481d@x q481e@y) (if (q2ccc@id? q481d@x) (if (q2ccc@id? q481e@y) (q2cd4@free-id=? q481d@x q481e@y) (assertion-violation 'free-identifier=? '"not an identifier" q481e@y)) (assertion-violation 'free-identifier=? '"not an identifier" q481d@x)))) (set! q2fb2@bound-identifier=? (lambda (q4821@x q4822@y) (if (q2ccc@id? q4821@x) (if (q2ccc@id? q4822@y) (q2cd2@bound-id=? q4821@x q4822@y) (assertion-violation 'bound-identifier=? '"not an identifier" q4822@y)) (assertion-violation 'bound-identifier=? '"not an identifier" q4821@x)))) (set! q2fb4@make-source-condition (lambda (q4825@x) ((lambda (q482f@q482a q4831@q482c q4833@q482b q4836@q4829 q4838@make-source-condition q483a@q4827 q483c@q4828 q483e@source-condition? q4840@source-filename q4842@source-character) (begin (set! q482f@q482a (make-record-type-descriptor '&source-information q4c8d@q49d4@&condition-rtd 'q482d '#f '#f '#((immutable file-name) (immutable character)))) (set! q4831@q482c '#f) (set! q4833@q482b (make-record-constructor-descriptor q482f@q482a q4c8e@q49d6@&condition-rcd q4831@q482c)) (set! q4836@q4829 (record-predicate q482f@q482a)) (set! q4838@make-source-condition (record-constructor q4833@q482b)) (set! q483a@q4827 (record-accessor q482f@q482a '0)) (set! q483c@q4828 (record-accessor q482f@q482a '1)) (set! q483e@source-condition? (condition-predicate q482f@q482a)) (set! q4840@source-filename (condition-accessor q482f@q482a q483a@q4827)) (set! q4842@source-character (condition-accessor q482f@q482a q483c@q4828)) (if (pair? q4825@x) (q4838@make-source-condition (car q4825@x) (cdr q4825@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q2fb6@extract-position-condition (lambda (q4843@x) (q2fb4@make-source-condition (q2fb8@expression-position q4843@x)))) (set! q2fb8@expression-position (lambda (q4845@x) (and (q2c94@stx? q4845@x) ((lambda (q4847@x) (and (q286b@q278a@annotation? q4847@x) (q286c@q278c@annotation-source q4847@x))) (q2c98@stx-expr q4845@x))))) (set! q2fba@assertion-error (lambda (q4849@expr q484a@pos) (raise (condition (q4cbd@q4a98@make-assertion-violation) (q4ccf@q4aca@make-who-condition 'assert) (q4c93@q4a2b@make-message-condition '"assertion failed") (q4cc5@q4aaf@make-irritants-condition (list q4849@expr)) (q2fb4@make-source-condition q484a@pos))))) (set! q2fbc@syntax-error (lambda (q484d@x . q484f@args) (begin (if (not (for-all string? q484f@args)) (assertion-violation 'syntax-error '"invalid argument" q484f@args) (void)) (raise (condition (q4c93@q4a2b@make-message-condition (if (null? q484f@args) '"invalid syntax" (apply string-append q484f@args))) (q4cf1@q4b26@make-syntax-violation (q2fc6@syntax->datum q484d@x) '#f) (q2fb6@extract-position-condition q484d@x)))))) (set! q2fbe@syntax-violation* (lambda (q4851@who q4852@msg q4853@form q4854@condition-object) (begin (if (not (string? q4852@msg)) (assertion-violation 'syntax-violation '"message is not a string" q4852@msg) (void)) ((lambda (q4859@who) (raise (condition (if q4859@who (q4ccf@q4aca@make-who-condition q4859@who) (condition)) (q4c93@q4a2b@make-message-condition q4852@msg) q4854@condition-object (q2fb6@extract-position-condition q4853@form)))) (if (or (string? q4851@who) (symbol? q4851@who)) q4851@who (if (not q4851@who) ((lambda (q485b@t) ((lambda (q485d@ls/false) (if (and q485d@ls/false (apply (lambda (q485f@id) (q2ccc@id? q485f@id)) q485d@ls/false)) (apply (lambda (q4861@id) (q2fc6@syntax->datum q4861@id)) q485d@ls/false) ((lambda (q4863@t) ((lambda (q4865@ls/false) (if (and q4865@ls/false (apply (lambda (q4867@id q4868@rest) (q2ccc@id? q4867@id)) q4865@ls/false)) (apply (lambda (q486b@id q486c@rest) (q2fc6@syntax->datum q486b@id)) q4865@ls/false) ((lambda (q486f@t) ((lambda (q4871@ls/false) (if q4871@ls/false (apply (lambda () '#f) q4871@ls/false) (q2fc0@syntax-violation '#f '"invalid syntax" q486f@t))) (q2ed7@syntax-dispatch q486f@t '_))) q4863@t))) (q2ed7@syntax-dispatch q4863@t '(any . any)))) q485b@t))) (q2ed7@syntax-dispatch q485b@t 'any))) q4853@form) (assertion-violation 'syntax-violation '"invalid who argument" q4851@who))))))) (set! q2fc0@syntax-violation (lambda q4881 ((lambda (q4882) (if (= q4882 '3) (apply (lambda (q4873@who q4874@msg q4875@form) (q2fc0@syntax-violation q4873@who q4874@msg q4875@form '#f)) q4881) (if (= q4882 '4) (apply (lambda (q4879@who q487a@msg q487b@form q487c@subform) (q2fbe@syntax-violation* q4879@who q487a@msg q487b@form (q4cf1@q4b26@make-syntax-violation (q2fc6@syntax->datum q487b@form) (q2fc6@syntax->datum q487c@subform)))) q4881) (error 'apply '"invalid arg count")))) (length q4881)))) (set! q2fc2@identifier? (lambda (q4883@x) (q2ccc@id? q4883@x))) (set! q2fc4@datum->syntax (lambda (q4885@id q4886@datum) (if (q2ccc@id? q4885@id) (q2caa@datum->stx q4885@id q4886@datum) (assertion-violation 'datum->syntax '"not an identifier" q4885@id)))) (set! q2fc6@syntax->datum (lambda (q4889@x) (q2ce2@stx->datum q4889@x))) (set! q2fc8@compile-r6rs-top-level (lambda (q488b@x*) (call-with-values (lambda () (q2f52@top-level-expander q488b@x*)) (lambda (q4891@q488e q4892@q4890) ((lambda (q4895@invoke-code q4896@lib*) (lambda () (begin (for-each q2af0@q2991@invoke-library q4896@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (q28ca@q2882@expanded->core q4895@invoke-code)) (void)) (eval-core (q28ca@q2882@expanded->core q4895@invoke-code))))) q4892@q4890 q4891@q488e))))) (set! q2fca@pre-compile-r6rs-top-level (lambda (q4899@x*) (call-with-values (lambda () (q2f52@top-level-expander q4899@x*)) (lambda (q489f@q489c q48a0@q489e) ((lambda (q48a3@invoke-code q48a4@lib*) (begin (for-each q2af0@q2991@invoke-library q48a4@lib*) (q2874@q279c@compile-core (q28ca@q2882@expanded->core q48a3@invoke-code)))) q48a0@q489e q489f@q489c))))) (set! q2fcc@interaction-environment ((lambda (q48a7@the-env) (lambda () (or q48a7@the-env ((lambda (q48a9@lib q48aa@rib) (begin ((lambda (q48ad@subst) (begin (q2c71@set-rib-sym*! q48aa@rib (map car q48ad@subst)) (q2c73@set-rib-mark**! q48aa@rib (map (lambda (q48af@x) q2c48@top-mark*) q48ad@subst)) (q2c75@set-rib-label*! q48aa@rib (map cdr q48ad@subst)))) (q2ac5@q293b@library-subst q48a9@lib)) ((lambda (q48b1@env) (begin (set! q48a7@the-env q48b1@env) q48b1@env)) (q2f7e@make-interaction-env q48aa@rib '() '())))) (q2ae9@q2983@find-library-by-name '(mosh interaction)) (q2c7b@make-empty-rib))))) '#f)) (set! q2fce@top-level-context (q2876@q27a0@make-parameter '#f)) (begin (set! q49bf@q2fce@top-level-context q2fce@top-level-context) (set! q49be@q2fcc@interaction-environment q2fcc@interaction-environment) (set! q49bd@q2fca@pre-compile-r6rs-top-level q2fca@pre-compile-r6rs-top-level) (set! q49bc@q2fc8@compile-r6rs-top-level q2fc8@compile-r6rs-top-level) (set! q49bb@q2fc6@syntax->datum q2fc6@syntax->datum) (set! q49ba@q2fc4@datum->syntax q2fc4@datum->syntax) (set! q49b9@q2fc2@identifier? q2fc2@identifier?) (set! q49b8@q2fc0@syntax-violation q2fc0@syntax-violation) (set! q49b7@q2fbe@syntax-violation* q2fbe@syntax-violation*) (set! q49b6@q2fbc@syntax-error q2fbc@syntax-error) (set! q49b5@q2fba@assertion-error q2fba@assertion-error) (set! q49b4@q2fb8@expression-position q2fb8@expression-position) (set! q49b3@q2fb6@extract-position-condition q2fb6@extract-position-condition) (set! q49b2@q2fb4@make-source-condition q2fb4@make-source-condition) (set! q49b1@q2fb2@bound-identifier=? q2fb2@bound-identifier=?) (set! q49b0@q2fb0@free-identifier=? q2fb0@free-identifier=?) (set! q49af@q2fae@generate-temporaries q2fae@generate-temporaries) (set! q49ae@q2fac@make-export-env/macros q2fac@make-export-env/macros) (set! q49ad@q2faa@make-export-subst q2faa@make-export-subst) (set! q49ac@q2fa8@build-exports q2fa8@build-exports) (set! q49ab@q2fa6@rev-map-append q2fa6@rev-map-append) (set! q49aa@q2fa4@boot-library-expand q2fa4@boot-library-expand) (set! q49a9@q2fa2@library-expander q2fa2@library-expander) (set! q49a8@q2fa0@eval q2fa0@eval) (set! q49a7@q2f9e@expand q2f9e@expand) (set! q49a6@q2f9c@scheme-report-environment q2f9c@scheme-report-environment) (set! q49a5@q2f9a@null-environment q2f9a@null-environment) (set! q49a4@q2f98@environment q2f98@environment) (set! q49a3@q2f96@environment-symbols q2f96@environment-symbols) (set! q49a2@q2f94@environment? q2f94@environment?) (set! q49a1@q2f92@parse-binding q2f92@parse-binding) (set! q49a0@q2f90@environment-bindings q2f90@environment-bindings) (set! q499f@q2f8e@interaction-environment-symbols q2f8e@interaction-environment-symbols) (set! q499e@q2f8c@rp q2f8c@rp) (set! q499d@q2f8a@set-interaction-env-locs! q2f8a@set-interaction-env-locs!) (set! q499c@q2f88@set-interaction-env-r! q2f88@set-interaction-env-r!) (set! q499b@q2f86@set-interaction-env-rib! q2f86@set-interaction-env-rib!) (set! q499a@q2f84@interaction-env-locs q2f84@interaction-env-locs) (set! q4999@q2f82@interaction-env-r q2f82@interaction-env-r) (set! q4998@q2f80@interaction-env-rib q2f80@interaction-env-rib) (set! q4997@q2f7e@make-interaction-env q2f7e@make-interaction-env) (set! q4996@q2f7c@interaction-env? q2f7c@interaction-env?) (set! q4995@q2f79@q2f71 q2f79@q2f71) (set! q4994@q2f77@q2f72 q2f77@q2f72) (set! q4993@q2f75@q2f70 q2f75@q2f70) (set! q4992@q2f6f@rp q2f6f@rp) (set! q4991@q2f6d@set-env-itc! q2f6d@set-env-itc!) (set! q4990@q2f6b@set-env-labels! q2f6b@set-env-labels!) (set! q498f@q2f69@set-env-names! q2f69@set-env-names!) (set! q498e@q2f67@env-itc q2f67@env-itc) (set! q498d@q2f65@env-labels q2f65@env-labels) (set! q498c@q2f63@env-names q2f63@env-names) (set! q498b@q2f61@make-env q2f61@make-env) (set! q498a@q2f5f@env? q2f5f@env?) (set! q4989@q2f5c@q2f54 q2f5c@q2f54) (set! q4988@q2f5a@q2f55 q2f5a@q2f55) (set! q4987@q2f58@q2f53 q2f58@q2f53) (set! q4986@q2f52@top-level-expander q2f52@top-level-expander) (set! q4985@q2f50@parse-top-level-program q2f50@parse-top-level-program) (set! q4984@q2f4e@core-library-expander q2f4e@core-library-expander) (set! q4983@q2f4c@library-body-expander q2f4c@library-body-expander) (set! q4982@q2f4a@chi-interaction-expr q2f4a@chi-interaction-expr) (set! q4981@q2f48@chi-library-internal q2f48@chi-library-internal) (set! q4980@q2f46@imp-collector q2f46@imp-collector) (set! q497f@q2f44@vis-collector q2f44@vis-collector) (set! q497e@q2f42@inv-collector q2f42@inv-collector) (set! q497d@q2f40@make-collector q2f40@make-collector) (set! q497c@q2f3e@make-top-rib q2f3e@make-top-rib) (set! q497b@q2f3c@parse-import-spec* q2f3c@parse-import-spec*) (set! q497a@q2f3a@parse-library q2f3a@parse-library) (set! q4979@q2f38@parse-library-name q2f38@parse-library-name) (set! q4978@q2f36@parse-exports q2f36@parse-exports) (set! q4977@q2f34@expand-transformer q2f34@expand-transformer) (set! q4976@q2f32@chi-body* q2f32@chi-body*) (set! q4975@q2f30@chi-internal-module q2f30@chi-internal-module) (set! q4974@q2f2e@module-interface-exp-id* q2f2e@module-interface-exp-id*) (set! q4973@q2f2c@set-module-interface-exp-lab-vec! q2f2c@set-module-interface-exp-lab-vec!) (set! q4972@q2f2a@set-module-interface-exp-id-vec! q2f2a@set-module-interface-exp-id-vec!) (set! q4971@q2f28@set-module-interface-first-mark! q2f28@set-module-interface-first-mark!) (set! q4970@q2f26@module-interface-exp-lab-vec q2f26@module-interface-exp-lab-vec) (set! q496f@q2f24@module-interface-exp-id-vec q2f24@module-interface-exp-id-vec) (set! q496e@q2f22@module-interface-first-mark q2f22@module-interface-first-mark) (set! q496d@q2f20@make-module-interface q2f20@make-module-interface) (set! q496c@q2f1e@module-interface? q2f1e@module-interface?) (set! q496b@q2f1b@q2f13 q2f1b@q2f13) (set! q496a@q2f19@q2f14 q2f19@q2f14) (set! q4969@q2f17@q2f12 q2f17@q2f12) (set! q4968@q2f11@parse-module q2f11@parse-module) (set! q4967@q2f0f@chi-internal q2f0f@chi-internal) (set! q4966@q2f0d@find-dups q2f0d@find-dups) (set! q4965@q2f0b@find-bound=? q2f0b@find-bound=?) (set! q4964@q2f09@chi-rhs* q2f09@chi-rhs*) (set! q4963@q2f07@expand-interaction-rhs*/init* q2f07@expand-interaction-rhs*/init*) (set! q4962@q2f05@chi-rhs q2f05@chi-rhs) (set! q4961@q2f03@chi-defun q2f03@chi-defun) (set! q4960@q2f01@chi-lambda-clause* q2f01@chi-lambda-clause*) (set! q495f@q2eff@chi-lambda-clause q2eff@chi-lambda-clause) (set! q495e@q2efd@verify-formals q2efd@verify-formals) (set! q495d@q2efb@chi-set! q2efb@chi-set!) (set! q495c@q2ef9@chi-expr q2ef9@chi-expr) (set! q495b@q2ef7@chi-application q2ef7@chi-application) (set! q495a@q2ef5@chi-expr* q2ef5@chi-expr*) (set! q4959@q2ef3@chi-global-macro q2ef3@chi-global-macro) (set! q4958@q2ef1@chi-local-macro q2ef1@chi-local-macro) (set! q4957@q2eef@chi-macro q2eef@chi-macro) (set! q4956@q2eed@do-macro-call q2eed@do-macro-call) (set! q4955@q2eeb@local-macro-transformer q2eeb@local-macro-transformer) (set! q4954@q2ee9@macro-transformer q2ee9@macro-transformer) (set! q4953@q2ee7@symbol-macro q2ee7@symbol-macro) (set! q4952@q2ee5@core-macro-transformer q2ee5@core-macro-transformer) (set! q4951@q2ee3@syntax-transformer q2ee3@syntax-transformer) (set! q4950@q2ee1@ellipsis-map q2ee1@ellipsis-map) (set! q494f@q2edf@syntax-case-transformer q2edf@syntax-case-transformer) (set! q494e@q2edd@verify-literals q2edd@verify-literals) (set! q494d@q2edb@underscore? q2edb@underscore?) (set! q494c@q2ed9@ellipsis? q2ed9@ellipsis?) (set! q494b@q2ed7@syntax-dispatch q2ed7@syntax-dispatch) (set! q494a@q2ed5@convert-pattern q2ed5@convert-pattern) (set! q4949@q2ed3@foreign-call-transformer q2ed3@foreign-call-transformer) (set! q4948@q2ed1@parameterize-macro q2ed1@parameterize-macro) (set! q4947@q2ecf@incorrect-usage-macro q2ecf@incorrect-usage-macro) (set! q4946@q2ecd@define-condition-type-macro q2ecd@define-condition-type-macro) (set! q4945@q2ecb@define-record-type-macro q2ecb@define-record-type-macro) (set! q4944@q2ec9@define-struct-macro q2ec9@define-struct-macro) (set! q4943@q2ec7@quasisyntax-macro q2ec7@quasisyntax-macro) (set! q4942@q2ec5@quasiquote-macro q2ec5@quasiquote-macro) (set! q4941@q2ec3@syntax-rules-macro q2ec3@syntax-rules-macro) (set! q4940@q2ec1@include-into-macro q2ec1@include-into-macro) (set! q493f@q2ebf@include-macro q2ebf@include-macro) (set! q493e@q2ebd@do-include q2ebd@do-include) (set! q493d@q2ebb@cond-macro q2ebb@cond-macro) (set! q493c@q2eb9@and-macro q2eb9@and-macro) (set! q493b@q2eb7@or-macro q2eb7@or-macro) (set! q493a@q2eb5@let*-macro q2eb5@let*-macro) (set! q4939@q2eb3@do-macro q2eb3@do-macro) (set! q4938@q2eb1@identifier-syntax-macro q2eb1@identifier-syntax-macro) (set! q4937@q2eaf@endianness-macro q2eaf@endianness-macro) (set! q4936@q2ead@assert-macro q2ead@assert-macro) (set! q4935@q2eab@delay-macro q2eab@delay-macro) (set! q4934@q2ea9@time-macro q2ea9@time-macro) (set! q4933@q2ea7@define-enumeration-macro q2ea7@define-enumeration-macro) (set! q4932@q2ea5@guard-macro q2ea5@guard-macro) (set! q4931@q2ea3@trace-letrec-syntax-macro q2ea3@trace-letrec-syntax-macro) (set! q4930@q2ea1@trace-let-syntax-macro q2ea1@trace-let-syntax-macro) (set! q492f@q2e9f@trace-let/rec-syntax q2e9f@trace-let/rec-syntax) (set! q492e@q2e9d@trace-define-syntax-macro q2e9d@trace-define-syntax-macro) (set! q492d@q2e9b@trace-define-macro q2e9b@trace-define-macro) (set! q492c@q2e99@trace-lambda-macro q2e99@trace-lambda-macro) (set! q492b@q2e97@let*-values-macro q2e97@let*-values-macro) (set! q492a@q2e95@let-values-macro q2e95@let-values-macro) (set! q4929@q2e93@let-macro q2e93@let-macro) (set! q4928@q2e91@invalid-fmls-error q2e91@invalid-fmls-error) (set! q4927@q2e8f@with-syntax-macro q2e8f@with-syntax-macro) (set! q4926@q2e8d@bless q2e8d@bless) (set! q4925@q2e8b@lambda-transformer q2e8b@lambda-transformer) (set! q4924@q2e89@case-lambda-transformer q2e89@case-lambda-transformer) (set! q4923@q2e87@quote-transformer q2e87@quote-transformer) (set! q4922@q2e85@case-macro q2e85@case-macro) (set! q4921@q2e83@or-transformer q2e83@or-transformer) (set! q4920@q2e81@and-transformer q2e81@and-transformer) (set! q491f@q2e7f@if-transformer q2e7f@if-transformer) (set! q491e@q2e7d@unless-macro q2e7d@unless-macro) (set! q491d@q2e7b@when-macro q2e7b@when-macro) (set! q491c@q2e79@record-constructor-descriptor-transformer q2e79@record-constructor-descriptor-transformer) (set! q491b@q2e77@record-type-descriptor-transformer q2e77@record-type-descriptor-transformer) (set! q491a@q2e75@type-descriptor-transformer q2e75@type-descriptor-transformer) (set! q4919@q2e73@fluid-let-syntax-transformer q2e73@fluid-let-syntax-transformer) (set! q4918@q2e71@letrec*-transformer q2e71@letrec*-transformer) (set! q4917@q2e6f@letrec-transformer q2e6f@letrec-transformer) (set! q4916@q2e6d@letrec-helper q2e6d@letrec-helper) (set! q4915@q2e6b@add-lexicals q2e6b@add-lexicals) (set! q4914@q2e69@add-lexical q2e69@add-lexical) (set! q4913@q2e67@set-lexical-mutable! q2e67@set-lexical-mutable!) (set! q4912@q2e65@lexical-mutable? q2e65@lexical-mutable?) (set! q4911@q2e63@lexical-var q2e63@lexical-var) (set! q4910@q2e61@scheme-stx q2e61@scheme-stx) (set! q490f@q2e5f@scheme-stx-hashtable q2e5f@scheme-stx-hashtable) (set! q490e@q2e5d@parse-define-syntax q2e5d@parse-define-syntax) (set! q490d@q2e5b@parse-define q2e5b@parse-define) (set! q490c@q2d0a@make-eval-transformer q2d0a@make-eval-transformer) (set! q490b@q2d08@variable-transformer-procedure q2d08@variable-transformer-procedure) (set! q490a@q2d06@variable-transformer? q2d06@variable-transformer?) (set! q4909@q2d04@make-variable-transformer q2d04@make-variable-transformer) (set! q4908@q2d02@sanitize-binding q2d02@sanitize-binding) (set! q4907@q2cf4@syntax-type q2cf4@syntax-type) (set! q4906@q2cf2@raise-unbound-error q2cf2@raise-unbound-error) (set! q4905@q2cf0@binding-value q2cf0@binding-value) (set! q4904@q2cee@binding-type q2cee@binding-type) (set! q4903@q2cec@make-binding q2cec@make-binding) (set! q4902@q2cea@label->binding q2cea@label->binding) (set! q4901@q2ce8@id->real-label q2ce8@id->real-label) (set! q4900@q2ce6@id->label q2ce6@id->label) (set! q48ff@q2ce4@same-marks*? q2ce4@same-marks*?) (set! q48fe@q2ce2@stx->datum q2ce2@stx->datum) (set! q48fd@q2ce0@strip q2ce0@strip) (set! q48fc@q2cde@strip-annotations q2cde@strip-annotations) (set! q48fb@q2cdc@self-evaluating? q2cdc@self-evaluating?) (set! q48fa@q2cda@bound-id-member? q2cda@bound-id-member?) (set! q48f9@q2cd8@distinct-bound-ids? q2cd8@distinct-bound-ids?) (set! q48f8@q2cd6@valid-bound-ids? q2cd6@valid-bound-ids?) (set! q48f7@q2cd4@free-id=? q2cd4@free-id=?) (set! q48f6@q2cd2@bound-id=? q2cd2@bound-id=?) (set! q48f5@q2cd0@same-marks? q2cd0@same-marks?) (set! q48f4@q2cce@id->sym q2cce@id->sym) (set! q48f3@q2ccc@id? q2ccc@id?) (set! q48f2@q2cca@syntax->list q2cca@syntax->list) (set! q48f1@q2cc8@syntax-cdr q2cc8@syntax-cdr) (set! q48f0@q2cc6@syntax-car q2cc6@syntax-car) (set! q48ef@q2cc4@syntax-list? q2cc4@syntax-list?) (set! q48ee@q2cc2@syntax-null? q2cc2@syntax-null?) (set! q48ed@q2cc0@syntax-vector? q2cc0@syntax-vector?) (set! q48ec@q2cbe@syntax-pair? q2cbe@syntax-pair?) (set! q48eb@q2cbc@syntax-vector->list q2cbc@syntax-vector->list) (set! q48ea@q2cba@syntax-kind? q2cba@syntax-kind?) (set! q48e9@q2cb8@add-subst q2cb8@add-subst) (set! q48e8@q2cb6@add-mark q2cb6@add-mark) (set! q48e7@q2cb4@mkstx q2cb4@mkstx) (set! q48e6@q2cb2@join-wraps q2cb2@join-wraps) (set! q48e5@q2cb0@anti-mark? q2cb0@anti-mark?) (set! q48e4@q2cae@anti-mark q2cae@anti-mark) (set! q48e3@q2cac@gen-mark q2cac@gen-mark) (set! q48e2@q2caa@datum->stx q2caa@datum->stx) (set! q48e1@q2ca8@rp q2ca8@rp) (set! q48e0@q2ca6@set-stx-ae*! q2ca6@set-stx-ae*!) (set! q48df@q2ca4@set-stx-subst*! q2ca4@set-stx-subst*!) (set! q48de@q2ca2@set-stx-mark*! q2ca2@set-stx-mark*!) (set! q48dd@q2ca0@set-stx-expr! q2ca0@set-stx-expr!) (set! q48dc@q2c9e@stx-ae* q2c9e@stx-ae*) (set! q48db@q2c9c@stx-subst* q2c9c@stx-subst*) (set! q48da@q2c9a@stx-mark* q2c9a@stx-mark*) (set! q48d9@q2c98@stx-expr q2c98@stx-expr) (set! q48d8@q2c96@make-stx q2c96@make-stx) (set! q48d7@q2c94@stx? q2c94@stx?) (set! q48d6@q2c91@q2c89 q2c91@q2c89) (set! q48d5@q2c8f@q2c8a q2c8f@q2c8a) (set! q48d4@q2c8d@q2c88 q2c8d@q2c88) (set! q48d3@q2c87@make-full-rib q2c87@make-full-rib) (set! q48d2@q2c85@unseal-rib! q2c85@unseal-rib!) (set! q48d1@q2c83@seal-rib! q2c83@seal-rib!) (set! q48d0@q2c81@make-rib-map q2c81@make-rib-map) (set! q48cf@q2c7f@extend-rib/nc! q2c7f@extend-rib/nc!) (set! q48ce@q2c7d@extend-rib! q2c7d@extend-rib!) (set! q48cd@q2c7b@make-empty-rib q2c7b@make-empty-rib) (set! q48cc@q2c79@set-rib-cache! q2c79@set-rib-cache!) (set! q48cb@q2c77@set-rib-sealed/freq! q2c77@set-rib-sealed/freq!) (set! q48ca@q2c75@set-rib-label*! q2c75@set-rib-label*!) (set! q48c9@q2c73@set-rib-mark**! q2c73@set-rib-mark**!) (set! q48c8@q2c71@set-rib-sym*! q2c71@set-rib-sym*!) (set! q48c7@q2c6f@rib-cache q2c6f@rib-cache) (set! q48c6@q2c6d@rib-sealed/freq q2c6d@rib-sealed/freq) (set! q48c5@q2c6b@rib-label* q2c6b@rib-label*) (set! q48c4@q2c69@rib-mark** q2c69@rib-mark**) (set! q48c3@q2c67@rib-sym* q2c67@rib-sym*) (set! q48c2@q2c65@make-rib q2c65@make-rib) (set! q48c1@q2c63@rib? q2c63@rib?) (set! q48c0@q2c60@q2c58 q2c60@q2c58) (set! q48bf@q2c5e@q2c59 q2c5e@q2c59) (set! q48be@q2c5c@q2c57 q2c5c@q2c57) (set! q48bd@q2c56@gen-define-label q2c56@gen-define-label) (set! q48bc@q2c54@gen-define-label+loc q2c54@gen-define-label+loc) (set! q48bb@q2c52@gen-top-level-label q2c52@gen-top-level-label) (set! q48ba@q2c50@gen-label q2c50@gen-label) (set! q48b9@q2c4e@gen-global q2c4e@gen-global) (set! q48b8@q2c4c@gen-lexical q2c4c@gen-lexical) (set! q48b7@q2c4a@top-marked? q2c4a@top-marked?) (set! q48b6@q2c48@top-mark* q2c48@top-mark*) (set! q48b5@q2c43@set-union q2c43@set-union) (set! q48b4@q2c41@set-cons q2c41@set-cons) (set! q48b3@q2c3f@file-options-macro q2c3f@file-options-macro) (q2ae6@q297d@current-library-expander q2fa2@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q49c9@q49c4 q49cb@q49c6 q49cd@q49c5 q49d0@&condition? q49d2@make-&condition q49d4@&condition-rtd q49d6@&condition-rcd q4a22@q4a1d q4a24@q4a1f q4a26@q4a1e q4a29@p? q4a2b@make-message-condition q4a2d@q4a1c q4a2f@message-condition? q4a31@condition-message q4a33@&message-rtd q4a35@&message-rcd q4a3b@q4a36 q4a3d@q4a38 q4a3f@q4a37 q4a42@p? q4a44@make-warning q4a46@warning? q4a48@&warning-rtd q4a4a@&warning-rcd q4a50@q4a4b q4a52@q4a4d q4a54@q4a4c q4a57@p? q4a59@make-serious-condition q4a5b@serious-condition? q4a5d@&serious-rtd q4a5f@&serious-rcd q4a65@q4a60 q4a67@q4a62 q4a69@q4a61 q4a6c@p? q4a6e@make-error q4a70@error? q4a72@&error-rtd q4a74@&error-rcd q4a7a@q4a75 q4a7c@q4a77 q4a7e@q4a76 q4a81@p? q4a83@make-violation q4a85@violation? q4a87@&violation-rtd q4a89@&violation-rcd q4a8f@q4a8a q4a91@q4a8c q4a93@q4a8b q4a96@p? q4a98@make-assertion-violation q4a9a@assertion-violation? q4a9c@&assertion-rtd q4a9e@&assertion-rcd q4aa6@q4aa1 q4aa8@q4aa3 q4aaa@q4aa2 q4aad@p? q4aaf@make-irritants-condition q4ab1@q4aa0 q4ab3@irritants-condition? q4ab5@condition-irritants q4ab7@&irritants-rtd q4ab9@&irritants-rcd q4ac1@q4abc q4ac3@q4abe q4ac5@q4abd q4ac8@p? q4aca@make-who-condition q4acc@q4abb q4ace@who-condition? q4ad0@condition-who q4ad2@&who-rtd q4ad4@&who-rcd q4ada@q4ad5 q4adc@q4ad7 q4ade@q4ad6 q4ae1@p? q4ae3@make-non-continuable-violation q4ae5@non-continuable-violation? q4ae7@&non-continuable-rtd q4ae9@&non-continuable-rcd q4aef@q4aea q4af1@q4aec q4af3@q4aeb q4af6@p? q4af8@make-implementation-restriction-violation q4afa@implementation-restriction-violation? q4afc@&implementation-restriction-rtd q4afe@&implementation-restriction-rcd q4b04@q4aff q4b06@q4b01 q4b08@q4b00 q4b0b@p? q4b0d@make-lexical-violation q4b0f@lexical-violation? q4b11@&lexical-rtd q4b13@&lexical-rcd q4b1d@q4b18 q4b1f@q4b1a q4b21@q4b19 q4b24@p? q4b26@make-syntax-violation q4b28@q4b15 q4b2a@q4b17 q4b2c@syntax-violation? q4b2e@syntax-violation-form q4b30@syntax-violation-subform q4b32@&syntax-rtd q4b34@&syntax-rcd q4b3a@q4b35 q4b3c@q4b37 q4b3e@q4b36 q4b41@p? q4b43@make-undefined-violation q4b45@undefined-violation? q4b47@&undefined-rtd q4b49@&undefined-rcd q4b4f@q4b4a q4b51@q4b4c q4b53@q4b4b q4b56@p? q4b58@make-i/o-error q4b5a@i/o-error? q4b5c@&i/o-rtd q4b5e@&i/o-rcd q4b64@q4b5f q4b66@q4b61 q4b68@q4b60 q4b6b@p? q4b6d@make-i/o-read-error q4b6f@i/o-read-error? q4b71@&i/o-read-rtd q4b73@&i/o-read-rcd q4b79@q4b74 q4b7b@q4b76 q4b7d@q4b75 q4b80@p? q4b82@make-i/o-write-error q4b84@i/o-write-error? q4b86@&i/o-write-rtd q4b88@&i/o-write-rcd q4b90@q4b8b q4b92@q4b8d q4b94@q4b8c q4b97@p? q4b99@make-i/o-invalid-position-error q4b9b@q4b8a q4b9d@i/o-invalid-position-error? q4b9f@i/o-error-position q4ba1@&i/o-invalid-position-rtd q4ba3@&i/o-invalid-position-rcd q4bab@q4ba6 q4bad@q4ba8 q4baf@q4ba7 q4bb2@p? q4bb4@make-i/o-filename-error q4bb6@q4ba5 q4bb8@i/o-filename-error? q4bba@i/o-error-filename q4bbc@&i/o-filename-rtd q4bbe@&i/o-filename-rcd q4bc4@q4bbf q4bc6@q4bc1 q4bc8@q4bc0 q4bcb@p? q4bcd@make-i/o-file-protection-error q4bcf@i/o-file-protection-error? q4bd1@&i/o-file-protection-rtd q4bd3@&i/o-file-protection-rcd q4bd9@q4bd4 q4bdb@q4bd6 q4bdd@q4bd5 q4be0@p? q4be2@make-i/o-file-is-read-only-error q4be4@i/o-file-is-read-only-error? q4be6@&i/o-file-is-read-only-rtd q4be8@&i/o-file-is-read-only-rcd q4bee@q4be9 q4bf0@q4beb q4bf2@q4bea q4bf5@p? q4bf7@make-i/o-file-already-exists-error q4bf9@i/o-file-already-exists-error? q4bfb@&i/o-file-already-exists-rtd q4bfd@&i/o-file-already-exists-rcd q4c03@q4bfe q4c05@q4c00 q4c07@q4bff q4c0a@p? q4c0c@make-i/o-file-does-not-exist-error q4c0e@i/o-file-does-not-exist-error? q4c10@&i/o-file-does-not-exist-rtd q4c12@&i/o-file-does-not-exist-rcd q4c1a@q4c15 q4c1c@q4c17 q4c1e@q4c16 q4c21@p? q4c23@make-i/o-port-error q4c25@q4c14 q4c27@i/o-port-error? q4c29@i/o-error-port q4c2b@&i/o-port-rtd q4c2d@&i/o-port-rcd q4c33@q4c2e q4c35@q4c30 q4c37@q4c2f q4c3a@p? q4c3c@make-i/o-decoding-error q4c3e@i/o-decoding-error? q4c40@&i/o-decoding-rtd q4c42@&i/o-decoding-rcd q4c4a@q4c45 q4c4c@q4c47 q4c4e@q4c46 q4c51@p? q4c53@make-i/o-encoding-error q4c55@q4c44 q4c57@i/o-encoding-error? q4c59@i/o-encoding-error-char q4c5b@&i/o-encoding-rtd q4c5d@&i/o-encoding-rcd q4c63@q4c5e q4c65@q4c60 q4c67@q4c5f q4c6a@p? q4c6c@make-no-infinities-violation q4c6e@no-infinities-violation? q4c70@&no-infinities-rtd q4c72@&no-infinities-rcd q4c78@q4c73 q4c7a@q4c75 q4c7c@q4c74 q4c7f@p? q4c81@make-no-nans-violation q4c83@no-nans-violation? q4c85@&no-nans-rtd q4c87@&no-nans-rcd) (begin (set! q49c9@q49c4 (make-record-type-descriptor '&condition '#f 'q49c7 '#f '#f '#())) (set! q49cb@q49c6 '#f) (set! q49cd@q49c5 (make-record-constructor-descriptor q49c9@q49c4 '#f q49cb@q49c6)) (set! q49d0@&condition? (record-predicate q49c9@q49c4)) (set! q49d2@make-&condition (record-constructor q49cd@q49c5)) (set! q49d4@&condition-rtd q49c9@q49c4) (set! q49d6@&condition-rcd q49cd@q49c5) (set! q4a22@q4a1d (make-record-type-descriptor '&message q49c9@q49c4 'q4a20 '#f '#f '#((immutable message)))) (set! q4a24@q4a1f '#f) (set! q4a26@q4a1e (make-record-constructor-descriptor q4a22@q4a1d q49cd@q49c5 q4a24@q4a1f)) (set! q4a29@p? (record-predicate q4a22@q4a1d)) (set! q4a2b@make-message-condition (record-constructor q4a26@q4a1e)) (set! q4a2d@q4a1c (record-accessor q4a22@q4a1d '0)) (set! q4a2f@message-condition? (condition-predicate q4a22@q4a1d)) (set! q4a31@condition-message (condition-accessor q4a22@q4a1d q4a2d@q4a1c)) (set! q4a33@&message-rtd q4a22@q4a1d) (set! q4a35@&message-rcd q4a26@q4a1e) (set! q4a3b@q4a36 (make-record-type-descriptor '&warning q49c9@q49c4 'q4a39 '#f '#f '#())) (set! q4a3d@q4a38 '#f) (set! q4a3f@q4a37 (make-record-constructor-descriptor q4a3b@q4a36 q49cd@q49c5 q4a3d@q4a38)) (set! q4a42@p? (record-predicate q4a3b@q4a36)) (set! q4a44@make-warning (record-constructor q4a3f@q4a37)) (set! q4a46@warning? (condition-predicate q4a3b@q4a36)) (set! q4a48@&warning-rtd q4a3b@q4a36) (set! q4a4a@&warning-rcd q4a3f@q4a37) (set! q4a50@q4a4b (make-record-type-descriptor '&serious q49c9@q49c4 'q4a4e '#f '#f '#())) (set! q4a52@q4a4d '#f) (set! q4a54@q4a4c (make-record-constructor-descriptor q4a50@q4a4b q49cd@q49c5 q4a52@q4a4d)) (set! q4a57@p? (record-predicate q4a50@q4a4b)) (set! q4a59@make-serious-condition (record-constructor q4a54@q4a4c)) (set! q4a5b@serious-condition? (condition-predicate q4a50@q4a4b)) (set! q4a5d@&serious-rtd q4a50@q4a4b) (set! q4a5f@&serious-rcd q4a54@q4a4c) (set! q4a65@q4a60 (make-record-type-descriptor '&error q4a50@q4a4b 'q4a63 '#f '#f '#())) (set! q4a67@q4a62 '#f) (set! q4a69@q4a61 (make-record-constructor-descriptor q4a65@q4a60 q4a54@q4a4c q4a67@q4a62)) (set! q4a6c@p? (record-predicate q4a65@q4a60)) (set! q4a6e@make-error (record-constructor q4a69@q4a61)) (set! q4a70@error? (condition-predicate q4a65@q4a60)) (set! q4a72@&error-rtd q4a65@q4a60) (set! q4a74@&error-rcd q4a69@q4a61) (set! q4a7a@q4a75 (make-record-type-descriptor '&violation q4a50@q4a4b 'q4a78 '#f '#f '#())) (set! q4a7c@q4a77 '#f) (set! q4a7e@q4a76 (make-record-constructor-descriptor q4a7a@q4a75 q4a54@q4a4c q4a7c@q4a77)) (set! q4a81@p? (record-predicate q4a7a@q4a75)) (set! q4a83@make-violation (record-constructor q4a7e@q4a76)) (set! q4a85@violation? (condition-predicate q4a7a@q4a75)) (set! q4a87@&violation-rtd q4a7a@q4a75) (set! q4a89@&violation-rcd q4a7e@q4a76) (set! q4a8f@q4a8a (make-record-type-descriptor '&assertion q4a7a@q4a75 'q4a8d '#f '#f '#())) (set! q4a91@q4a8c '#f) (set! q4a93@q4a8b (make-record-constructor-descriptor q4a8f@q4a8a q4a7e@q4a76 q4a91@q4a8c)) (set! q4a96@p? (record-predicate q4a8f@q4a8a)) (set! q4a98@make-assertion-violation (record-constructor q4a93@q4a8b)) (set! q4a9a@assertion-violation? (condition-predicate q4a8f@q4a8a)) (set! q4a9c@&assertion-rtd q4a8f@q4a8a) (set! q4a9e@&assertion-rcd q4a93@q4a8b) (set! q4aa6@q4aa1 (make-record-type-descriptor '&irritants q49c9@q49c4 'q4aa4 '#f '#f '#((immutable irritants)))) (set! q4aa8@q4aa3 '#f) (set! q4aaa@q4aa2 (make-record-constructor-descriptor q4aa6@q4aa1 q49cd@q49c5 q4aa8@q4aa3)) (set! q4aad@p? (record-predicate q4aa6@q4aa1)) (set! q4aaf@make-irritants-condition (record-constructor q4aaa@q4aa2)) (set! q4ab1@q4aa0 (record-accessor q4aa6@q4aa1 '0)) (set! q4ab3@irritants-condition? (condition-predicate q4aa6@q4aa1)) (set! q4ab5@condition-irritants (condition-accessor q4aa6@q4aa1 q4ab1@q4aa0)) (set! q4ab7@&irritants-rtd q4aa6@q4aa1) (set! q4ab9@&irritants-rcd q4aaa@q4aa2) (set! q4ac1@q4abc (make-record-type-descriptor '&who q49c9@q49c4 'q4abf '#f '#f '#((immutable who)))) (set! q4ac3@q4abe '#f) (set! q4ac5@q4abd (make-record-constructor-descriptor q4ac1@q4abc q49cd@q49c5 q4ac3@q4abe)) (set! q4ac8@p? (record-predicate q4ac1@q4abc)) (set! q4aca@make-who-condition (record-constructor q4ac5@q4abd)) (set! q4acc@q4abb (record-accessor q4ac1@q4abc '0)) (set! q4ace@who-condition? (condition-predicate q4ac1@q4abc)) (set! q4ad0@condition-who (condition-accessor q4ac1@q4abc q4acc@q4abb)) (set! q4ad2@&who-rtd q4ac1@q4abc) (set! q4ad4@&who-rcd q4ac5@q4abd) (set! q4ada@q4ad5 (make-record-type-descriptor '&non-continuable q4a7a@q4a75 'q4ad8 '#f '#f '#())) (set! q4adc@q4ad7 '#f) (set! q4ade@q4ad6 (make-record-constructor-descriptor q4ada@q4ad5 q4a7e@q4a76 q4adc@q4ad7)) (set! q4ae1@p? (record-predicate q4ada@q4ad5)) (set! q4ae3@make-non-continuable-violation (record-constructor q4ade@q4ad6)) (set! q4ae5@non-continuable-violation? (condition-predicate q4ada@q4ad5)) (set! q4ae7@&non-continuable-rtd q4ada@q4ad5) (set! q4ae9@&non-continuable-rcd q4ade@q4ad6) (set! q4aef@q4aea (make-record-type-descriptor '&implementation-restriction q4a7a@q4a75 'q4aed '#f '#f '#())) (set! q4af1@q4aec '#f) (set! q4af3@q4aeb (make-record-constructor-descriptor q4aef@q4aea q4a7e@q4a76 q4af1@q4aec)) (set! q4af6@p? (record-predicate q4aef@q4aea)) (set! q4af8@make-implementation-restriction-violation (record-constructor q4af3@q4aeb)) (set! q4afa@implementation-restriction-violation? (condition-predicate q4aef@q4aea)) (set! q4afc@&implementation-restriction-rtd q4aef@q4aea) (set! q4afe@&implementation-restriction-rcd q4af3@q4aeb) (set! q4b04@q4aff (make-record-type-descriptor '&lexical q4a7a@q4a75 'q4b02 '#f '#f '#())) (set! q4b06@q4b01 '#f) (set! q4b08@q4b00 (make-record-constructor-descriptor q4b04@q4aff q4a7e@q4a76 q4b06@q4b01)) (set! q4b0b@p? (record-predicate q4b04@q4aff)) (set! q4b0d@make-lexical-violation (record-constructor q4b08@q4b00)) (set! q4b0f@lexical-violation? (condition-predicate q4b04@q4aff)) (set! q4b11@&lexical-rtd q4b04@q4aff) (set! q4b13@&lexical-rcd q4b08@q4b00) (set! q4b1d@q4b18 (make-record-type-descriptor '&syntax q4a7a@q4a75 'q4b1b '#f '#f '#((immutable form) (immutable subform)))) (set! q4b1f@q4b1a '#f) (set! q4b21@q4b19 (make-record-constructor-descriptor q4b1d@q4b18 q4a7e@q4a76 q4b1f@q4b1a)) (set! q4b24@p? (record-predicate q4b1d@q4b18)) (set! q4b26@make-syntax-violation (record-constructor q4b21@q4b19)) (set! q4b28@q4b15 (record-accessor q4b1d@q4b18 '0)) (set! q4b2a@q4b17 (record-accessor q4b1d@q4b18 '1)) (set! q4b2c@syntax-violation? (condition-predicate q4b1d@q4b18)) (set! q4b2e@syntax-violation-form (condition-accessor q4b1d@q4b18 q4b28@q4b15)) (set! q4b30@syntax-violation-subform (condition-accessor q4b1d@q4b18 q4b2a@q4b17)) (set! q4b32@&syntax-rtd q4b1d@q4b18) (set! q4b34@&syntax-rcd q4b21@q4b19) (set! q4b3a@q4b35 (make-record-type-descriptor '&undefined q4a7a@q4a75 'q4b38 '#f '#f '#())) (set! q4b3c@q4b37 '#f) (set! q4b3e@q4b36 (make-record-constructor-descriptor q4b3a@q4b35 q4a7e@q4a76 q4b3c@q4b37)) (set! q4b41@p? (record-predicate q4b3a@q4b35)) (set! q4b43@make-undefined-violation (record-constructor q4b3e@q4b36)) (set! q4b45@undefined-violation? (condition-predicate q4b3a@q4b35)) (set! q4b47@&undefined-rtd q4b3a@q4b35) (set! q4b49@&undefined-rcd q4b3e@q4b36) (set! q4b4f@q4b4a (make-record-type-descriptor '&i/o q4a65@q4a60 'q4b4d '#f '#f '#())) (set! q4b51@q4b4c '#f) (set! q4b53@q4b4b (make-record-constructor-descriptor q4b4f@q4b4a q4a69@q4a61 q4b51@q4b4c)) (set! q4b56@p? (record-predicate q4b4f@q4b4a)) (set! q4b58@make-i/o-error (record-constructor q4b53@q4b4b)) (set! q4b5a@i/o-error? (condition-predicate q4b4f@q4b4a)) (set! q4b5c@&i/o-rtd q4b4f@q4b4a) (set! q4b5e@&i/o-rcd q4b53@q4b4b) (set! q4b64@q4b5f (make-record-type-descriptor '&i/o-read q4b4f@q4b4a 'q4b62 '#f '#f '#())) (set! q4b66@q4b61 '#f) (set! q4b68@q4b60 (make-record-constructor-descriptor q4b64@q4b5f q4b53@q4b4b q4b66@q4b61)) (set! q4b6b@p? (record-predicate q4b64@q4b5f)) (set! q4b6d@make-i/o-read-error (record-constructor q4b68@q4b60)) (set! q4b6f@i/o-read-error? (condition-predicate q4b64@q4b5f)) (set! q4b71@&i/o-read-rtd q4b64@q4b5f) (set! q4b73@&i/o-read-rcd q4b68@q4b60) (set! q4b79@q4b74 (make-record-type-descriptor '&i/o-write q4b4f@q4b4a 'q4b77 '#f '#f '#())) (set! q4b7b@q4b76 '#f) (set! q4b7d@q4b75 (make-record-constructor-descriptor q4b79@q4b74 q4b53@q4b4b q4b7b@q4b76)) (set! q4b80@p? (record-predicate q4b79@q4b74)) (set! q4b82@make-i/o-write-error (record-constructor q4b7d@q4b75)) (set! q4b84@i/o-write-error? (condition-predicate q4b79@q4b74)) (set! q4b86@&i/o-write-rtd q4b79@q4b74) (set! q4b88@&i/o-write-rcd q4b7d@q4b75) (set! q4b90@q4b8b (make-record-type-descriptor '&i/o-invalid-position q4b4f@q4b4a 'q4b8e '#f '#f '#((immutable position)))) (set! q4b92@q4b8d '#f) (set! q4b94@q4b8c (make-record-constructor-descriptor q4b90@q4b8b q4b53@q4b4b q4b92@q4b8d)) (set! q4b97@p? (record-predicate q4b90@q4b8b)) (set! q4b99@make-i/o-invalid-position-error (record-constructor q4b94@q4b8c)) (set! q4b9b@q4b8a (record-accessor q4b90@q4b8b '0)) (set! q4b9d@i/o-invalid-position-error? (condition-predicate q4b90@q4b8b)) (set! q4b9f@i/o-error-position (condition-accessor q4b90@q4b8b q4b9b@q4b8a)) (set! q4ba1@&i/o-invalid-position-rtd q4b90@q4b8b) (set! q4ba3@&i/o-invalid-position-rcd q4b94@q4b8c) (set! q4bab@q4ba6 (make-record-type-descriptor '&i/o-filename q4b4f@q4b4a 'q4ba9 '#f '#f '#((immutable filename)))) (set! q4bad@q4ba8 '#f) (set! q4baf@q4ba7 (make-record-constructor-descriptor q4bab@q4ba6 q4b53@q4b4b q4bad@q4ba8)) (set! q4bb2@p? (record-predicate q4bab@q4ba6)) (set! q4bb4@make-i/o-filename-error (record-constructor q4baf@q4ba7)) (set! q4bb6@q4ba5 (record-accessor q4bab@q4ba6 '0)) (set! q4bb8@i/o-filename-error? (condition-predicate q4bab@q4ba6)) (set! q4bba@i/o-error-filename (condition-accessor q4bab@q4ba6 q4bb6@q4ba5)) (set! q4bbc@&i/o-filename-rtd q4bab@q4ba6) (set! q4bbe@&i/o-filename-rcd q4baf@q4ba7) (set! q4bc4@q4bbf (make-record-type-descriptor '&i/o-file-protection q4bab@q4ba6 'q4bc2 '#f '#f '#())) (set! q4bc6@q4bc1 '#f) (set! q4bc8@q4bc0 (make-record-constructor-descriptor q4bc4@q4bbf q4baf@q4ba7 q4bc6@q4bc1)) (set! q4bcb@p? (record-predicate q4bc4@q4bbf)) (set! q4bcd@make-i/o-file-protection-error (record-constructor q4bc8@q4bc0)) (set! q4bcf@i/o-file-protection-error? (condition-predicate q4bc4@q4bbf)) (set! q4bd1@&i/o-file-protection-rtd q4bc4@q4bbf) (set! q4bd3@&i/o-file-protection-rcd q4bc8@q4bc0) (set! q4bd9@q4bd4 (make-record-type-descriptor '&i/o-file-is-read-only q4bc4@q4bbf 'q4bd7 '#f '#f '#())) (set! q4bdb@q4bd6 '#f) (set! q4bdd@q4bd5 (make-record-constructor-descriptor q4bd9@q4bd4 q4bc8@q4bc0 q4bdb@q4bd6)) (set! q4be0@p? (record-predicate q4bd9@q4bd4)) (set! q4be2@make-i/o-file-is-read-only-error (record-constructor q4bdd@q4bd5)) (set! q4be4@i/o-file-is-read-only-error? (condition-predicate q4bd9@q4bd4)) (set! q4be6@&i/o-file-is-read-only-rtd q4bd9@q4bd4) (set! q4be8@&i/o-file-is-read-only-rcd q4bdd@q4bd5) (set! q4bee@q4be9 (make-record-type-descriptor '&i/o-file-already-exists q4bab@q4ba6 'q4bec '#f '#f '#())) (set! q4bf0@q4beb '#f) (set! q4bf2@q4bea (make-record-constructor-descriptor q4bee@q4be9 q4baf@q4ba7 q4bf0@q4beb)) (set! q4bf5@p? (record-predicate q4bee@q4be9)) (set! q4bf7@make-i/o-file-already-exists-error (record-constructor q4bf2@q4bea)) (set! q4bf9@i/o-file-already-exists-error? (condition-predicate q4bee@q4be9)) (set! q4bfb@&i/o-file-already-exists-rtd q4bee@q4be9) (set! q4bfd@&i/o-file-already-exists-rcd q4bf2@q4bea) (set! q4c03@q4bfe (make-record-type-descriptor '&i/o-file-does-not-exist q4bab@q4ba6 'q4c01 '#f '#f '#())) (set! q4c05@q4c00 '#f) (set! q4c07@q4bff (make-record-constructor-descriptor q4c03@q4bfe q4baf@q4ba7 q4c05@q4c00)) (set! q4c0a@p? (record-predicate q4c03@q4bfe)) (set! q4c0c@make-i/o-file-does-not-exist-error (record-constructor q4c07@q4bff)) (set! q4c0e@i/o-file-does-not-exist-error? (condition-predicate q4c03@q4bfe)) (set! q4c10@&i/o-file-does-not-exist-rtd q4c03@q4bfe) (set! q4c12@&i/o-file-does-not-exist-rcd q4c07@q4bff) (set! q4c1a@q4c15 (make-record-type-descriptor '&i/o-port q4b4f@q4b4a 'q4c18 '#f '#f '#((immutable port)))) (set! q4c1c@q4c17 '#f) (set! q4c1e@q4c16 (make-record-constructor-descriptor q4c1a@q4c15 q4b53@q4b4b q4c1c@q4c17)) (set! q4c21@p? (record-predicate q4c1a@q4c15)) (set! q4c23@make-i/o-port-error (record-constructor q4c1e@q4c16)) (set! q4c25@q4c14 (record-accessor q4c1a@q4c15 '0)) (set! q4c27@i/o-port-error? (condition-predicate q4c1a@q4c15)) (set! q4c29@i/o-error-port (condition-accessor q4c1a@q4c15 q4c25@q4c14)) (set! q4c2b@&i/o-port-rtd q4c1a@q4c15) (set! q4c2d@&i/o-port-rcd q4c1e@q4c16) (set! q4c33@q4c2e (make-record-type-descriptor '&i/o-decoding q4c1a@q4c15 'q4c31 '#f '#f '#())) (set! q4c35@q4c30 '#f) (set! q4c37@q4c2f (make-record-constructor-descriptor q4c33@q4c2e q4c1e@q4c16 q4c35@q4c30)) (set! q4c3a@p? (record-predicate q4c33@q4c2e)) (set! q4c3c@make-i/o-decoding-error (record-constructor q4c37@q4c2f)) (set! q4c3e@i/o-decoding-error? (condition-predicate q4c33@q4c2e)) (set! q4c40@&i/o-decoding-rtd q4c33@q4c2e) (set! q4c42@&i/o-decoding-rcd q4c37@q4c2f) (set! q4c4a@q4c45 (make-record-type-descriptor '&i/o-encoding q4c1a@q4c15 'q4c48 '#f '#f '#((immutable char)))) (set! q4c4c@q4c47 '#f) (set! q4c4e@q4c46 (make-record-constructor-descriptor q4c4a@q4c45 q4c1e@q4c16 q4c4c@q4c47)) (set! q4c51@p? (record-predicate q4c4a@q4c45)) (set! q4c53@make-i/o-encoding-error (record-constructor q4c4e@q4c46)) (set! q4c55@q4c44 (record-accessor q4c4a@q4c45 '0)) (set! q4c57@i/o-encoding-error? (condition-predicate q4c4a@q4c45)) (set! q4c59@i/o-encoding-error-char (condition-accessor q4c4a@q4c45 q4c55@q4c44)) (set! q4c5b@&i/o-encoding-rtd q4c4a@q4c45) (set! q4c5d@&i/o-encoding-rcd q4c4e@q4c46) (set! q4c63@q4c5e (make-record-type-descriptor '&no-infinities q4aef@q4aea 'q4c61 '#f '#f '#())) (set! q4c65@q4c60 '#f) (set! q4c67@q4c5f (make-record-constructor-descriptor q4c63@q4c5e q4af3@q4aeb q4c65@q4c60)) (set! q4c6a@p? (record-predicate q4c63@q4c5e)) (set! q4c6c@make-no-infinities-violation (record-constructor q4c67@q4c5f)) (set! q4c6e@no-infinities-violation? (condition-predicate q4c63@q4c5e)) (set! q4c70@&no-infinities-rtd q4c63@q4c5e) (set! q4c72@&no-infinities-rcd q4c67@q4c5f) (set! q4c78@q4c73 (make-record-type-descriptor '&no-nans q4aef@q4aea 'q4c76 '#f '#f '#())) (set! q4c7a@q4c75 '#f) (set! q4c7c@q4c74 (make-record-constructor-descriptor q4c78@q4c73 q4af3@q4aeb q4c7a@q4c75)) (set! q4c7f@p? (record-predicate q4c78@q4c73)) (set! q4c81@make-no-nans-violation (record-constructor q4c7c@q4c74)) (set! q4c83@no-nans-violation? (condition-predicate q4c78@q4c73)) (set! q4c85@&no-nans-rtd q4c78@q4c73) (set! q4c87@&no-nans-rcd q4c7c@q4c74) (begin (set! q4d78@q4c87@&no-nans-rcd q4c87@&no-nans-rcd) (set! q4d77@q4c85@&no-nans-rtd q4c85@&no-nans-rtd) (set! q4d76@q4c83@no-nans-violation? q4c83@no-nans-violation?) (set! q4d75@q4c81@make-no-nans-violation q4c81@make-no-nans-violation) (set! q4d74@q4c7f@p? q4c7f@p?) (set! q4d73@q4c7c@q4c74 q4c7c@q4c74) (set! q4d72@q4c7a@q4c75 q4c7a@q4c75) (set! q4d71@q4c78@q4c73 q4c78@q4c73) (set! q4d70@q4c72@&no-infinities-rcd q4c72@&no-infinities-rcd) (set! q4d6f@q4c70@&no-infinities-rtd q4c70@&no-infinities-rtd) (set! q4d6e@q4c6e@no-infinities-violation? q4c6e@no-infinities-violation?) (set! q4d6d@q4c6c@make-no-infinities-violation q4c6c@make-no-infinities-violation) (set! q4d6c@q4c6a@p? q4c6a@p?) (set! q4d6b@q4c67@q4c5f q4c67@q4c5f) (set! q4d6a@q4c65@q4c60 q4c65@q4c60) (set! q4d69@q4c63@q4c5e q4c63@q4c5e) (set! q4d68@q4c5d@&i/o-encoding-rcd q4c5d@&i/o-encoding-rcd) (set! q4d67@q4c5b@&i/o-encoding-rtd q4c5b@&i/o-encoding-rtd) (set! q4d66@q4c59@i/o-encoding-error-char q4c59@i/o-encoding-error-char) (set! q4d65@q4c57@i/o-encoding-error? q4c57@i/o-encoding-error?) (set! q4d64@q4c55@q4c44 q4c55@q4c44) (set! q4d63@q4c53@make-i/o-encoding-error q4c53@make-i/o-encoding-error) (set! q4d62@q4c51@p? q4c51@p?) (set! q4d61@q4c4e@q4c46 q4c4e@q4c46) (set! q4d60@q4c4c@q4c47 q4c4c@q4c47) (set! q4d5f@q4c4a@q4c45 q4c4a@q4c45) (set! q4d5e@q4c42@&i/o-decoding-rcd q4c42@&i/o-decoding-rcd) (set! q4d5d@q4c40@&i/o-decoding-rtd q4c40@&i/o-decoding-rtd) (set! q4d5c@q4c3e@i/o-decoding-error? q4c3e@i/o-decoding-error?) (set! q4d5b@q4c3c@make-i/o-decoding-error q4c3c@make-i/o-decoding-error) (set! q4d5a@q4c3a@p? q4c3a@p?) (set! q4d59@q4c37@q4c2f q4c37@q4c2f) (set! q4d58@q4c35@q4c30 q4c35@q4c30) (set! q4d57@q4c33@q4c2e q4c33@q4c2e) (set! q4d56@q4c2d@&i/o-port-rcd q4c2d@&i/o-port-rcd) (set! q4d55@q4c2b@&i/o-port-rtd q4c2b@&i/o-port-rtd) (set! q4d54@q4c29@i/o-error-port q4c29@i/o-error-port) (set! q4d53@q4c27@i/o-port-error? q4c27@i/o-port-error?) (set! q4d52@q4c25@q4c14 q4c25@q4c14) (set! q4d51@q4c23@make-i/o-port-error q4c23@make-i/o-port-error) (set! q4d50@q4c21@p? q4c21@p?) (set! q4d4f@q4c1e@q4c16 q4c1e@q4c16) (set! q4d4e@q4c1c@q4c17 q4c1c@q4c17) (set! q4d4d@q4c1a@q4c15 q4c1a@q4c15) (set! q4d4c@q4c12@&i/o-file-does-not-exist-rcd q4c12@&i/o-file-does-not-exist-rcd) (set! q4d4b@q4c10@&i/o-file-does-not-exist-rtd q4c10@&i/o-file-does-not-exist-rtd) (set! q4d4a@q4c0e@i/o-file-does-not-exist-error? q4c0e@i/o-file-does-not-exist-error?) (set! q4d49@q4c0c@make-i/o-file-does-not-exist-error q4c0c@make-i/o-file-does-not-exist-error) (set! q4d48@q4c0a@p? q4c0a@p?) (set! q4d47@q4c07@q4bff q4c07@q4bff) (set! q4d46@q4c05@q4c00 q4c05@q4c00) (set! q4d45@q4c03@q4bfe q4c03@q4bfe) (set! q4d44@q4bfd@&i/o-file-already-exists-rcd q4bfd@&i/o-file-already-exists-rcd) (set! q4d43@q4bfb@&i/o-file-already-exists-rtd q4bfb@&i/o-file-already-exists-rtd) (set! q4d42@q4bf9@i/o-file-already-exists-error? q4bf9@i/o-file-already-exists-error?) (set! q4d41@q4bf7@make-i/o-file-already-exists-error q4bf7@make-i/o-file-already-exists-error) (set! q4d40@q4bf5@p? q4bf5@p?) (set! q4d3f@q4bf2@q4bea q4bf2@q4bea) (set! q4d3e@q4bf0@q4beb q4bf0@q4beb) (set! q4d3d@q4bee@q4be9 q4bee@q4be9) (set! q4d3c@q4be8@&i/o-file-is-read-only-rcd q4be8@&i/o-file-is-read-only-rcd) (set! q4d3b@q4be6@&i/o-file-is-read-only-rtd q4be6@&i/o-file-is-read-only-rtd) (set! q4d3a@q4be4@i/o-file-is-read-only-error? q4be4@i/o-file-is-read-only-error?) (set! q4d39@q4be2@make-i/o-file-is-read-only-error q4be2@make-i/o-file-is-read-only-error) (set! q4d38@q4be0@p? q4be0@p?) (set! q4d37@q4bdd@q4bd5 q4bdd@q4bd5) (set! q4d36@q4bdb@q4bd6 q4bdb@q4bd6) (set! q4d35@q4bd9@q4bd4 q4bd9@q4bd4) (set! q4d34@q4bd3@&i/o-file-protection-rcd q4bd3@&i/o-file-protection-rcd) (set! q4d33@q4bd1@&i/o-file-protection-rtd q4bd1@&i/o-file-protection-rtd) (set! q4d32@q4bcf@i/o-file-protection-error? q4bcf@i/o-file-protection-error?) (set! q4d31@q4bcd@make-i/o-file-protection-error q4bcd@make-i/o-file-protection-error) (set! q4d30@q4bcb@p? q4bcb@p?) (set! q4d2f@q4bc8@q4bc0 q4bc8@q4bc0) (set! q4d2e@q4bc6@q4bc1 q4bc6@q4bc1) (set! q4d2d@q4bc4@q4bbf q4bc4@q4bbf) (set! q4d2c@q4bbe@&i/o-filename-rcd q4bbe@&i/o-filename-rcd) (set! q4d2b@q4bbc@&i/o-filename-rtd q4bbc@&i/o-filename-rtd) (set! q4d2a@q4bba@i/o-error-filename q4bba@i/o-error-filename) (set! q4d29@q4bb8@i/o-filename-error? q4bb8@i/o-filename-error?) (set! q4d28@q4bb6@q4ba5 q4bb6@q4ba5) (set! q4d27@q4bb4@make-i/o-filename-error q4bb4@make-i/o-filename-error) (set! q4d26@q4bb2@p? q4bb2@p?) (set! q4d25@q4baf@q4ba7 q4baf@q4ba7) (set! q4d24@q4bad@q4ba8 q4bad@q4ba8) (set! q4d23@q4bab@q4ba6 q4bab@q4ba6) (set! q4d22@q4ba3@&i/o-invalid-position-rcd q4ba3@&i/o-invalid-position-rcd) (set! q4d21@q4ba1@&i/o-invalid-position-rtd q4ba1@&i/o-invalid-position-rtd) (set! q4d20@q4b9f@i/o-error-position q4b9f@i/o-error-position) (set! q4d1f@q4b9d@i/o-invalid-position-error? q4b9d@i/o-invalid-position-error?) (set! q4d1e@q4b9b@q4b8a q4b9b@q4b8a) (set! q4d1d@q4b99@make-i/o-invalid-position-error q4b99@make-i/o-invalid-position-error) (set! q4d1c@q4b97@p? q4b97@p?) (set! q4d1b@q4b94@q4b8c q4b94@q4b8c) (set! q4d1a@q4b92@q4b8d q4b92@q4b8d) (set! q4d19@q4b90@q4b8b q4b90@q4b8b) (set! q4d18@q4b88@&i/o-write-rcd q4b88@&i/o-write-rcd) (set! q4d17@q4b86@&i/o-write-rtd q4b86@&i/o-write-rtd) (set! q4d16@q4b84@i/o-write-error? q4b84@i/o-write-error?) (set! q4d15@q4b82@make-i/o-write-error q4b82@make-i/o-write-error) (set! q4d14@q4b80@p? q4b80@p?) (set! q4d13@q4b7d@q4b75 q4b7d@q4b75) (set! q4d12@q4b7b@q4b76 q4b7b@q4b76) (set! q4d11@q4b79@q4b74 q4b79@q4b74) (set! q4d10@q4b73@&i/o-read-rcd q4b73@&i/o-read-rcd) (set! q4d0f@q4b71@&i/o-read-rtd q4b71@&i/o-read-rtd) (set! q4d0e@q4b6f@i/o-read-error? q4b6f@i/o-read-error?) (set! q4d0d@q4b6d@make-i/o-read-error q4b6d@make-i/o-read-error) (set! q4d0c@q4b6b@p? q4b6b@p?) (set! q4d0b@q4b68@q4b60 q4b68@q4b60) (set! q4d0a@q4b66@q4b61 q4b66@q4b61) (set! q4d09@q4b64@q4b5f q4b64@q4b5f) (set! q4d08@q4b5e@&i/o-rcd q4b5e@&i/o-rcd) (set! q4d07@q4b5c@&i/o-rtd q4b5c@&i/o-rtd) (set! q4d06@q4b5a@i/o-error? q4b5a@i/o-error?) (set! q4d05@q4b58@make-i/o-error q4b58@make-i/o-error) (set! q4d04@q4b56@p? q4b56@p?) (set! q4d03@q4b53@q4b4b q4b53@q4b4b) (set! q4d02@q4b51@q4b4c q4b51@q4b4c) (set! q4d01@q4b4f@q4b4a q4b4f@q4b4a) (set! q4d00@q4b49@&undefined-rcd q4b49@&undefined-rcd) (set! q4cff@q4b47@&undefined-rtd q4b47@&undefined-rtd) (set! q4cfe@q4b45@undefined-violation? q4b45@undefined-violation?) (set! q4cfd@q4b43@make-undefined-violation q4b43@make-undefined-violation) (set! q4cfc@q4b41@p? q4b41@p?) (set! q4cfb@q4b3e@q4b36 q4b3e@q4b36) (set! q4cfa@q4b3c@q4b37 q4b3c@q4b37) (set! q4cf9@q4b3a@q4b35 q4b3a@q4b35) (set! q4cf8@q4b34@&syntax-rcd q4b34@&syntax-rcd) (set! q4cf7@q4b32@&syntax-rtd q4b32@&syntax-rtd) (set! q4cf6@q4b30@syntax-violation-subform q4b30@syntax-violation-subform) (set! q4cf5@q4b2e@syntax-violation-form q4b2e@syntax-violation-form) (set! q4cf4@q4b2c@syntax-violation? q4b2c@syntax-violation?) (set! q4cf3@q4b2a@q4b17 q4b2a@q4b17) (set! q4cf2@q4b28@q4b15 q4b28@q4b15) (set! q4cf1@q4b26@make-syntax-violation q4b26@make-syntax-violation) (set! q4cf0@q4b24@p? q4b24@p?) (set! q4cef@q4b21@q4b19 q4b21@q4b19) (set! q4cee@q4b1f@q4b1a q4b1f@q4b1a) (set! q4ced@q4b1d@q4b18 q4b1d@q4b18) (set! q4cec@q4b13@&lexical-rcd q4b13@&lexical-rcd) (set! q4ceb@q4b11@&lexical-rtd q4b11@&lexical-rtd) (set! q4cea@q4b0f@lexical-violation? q4b0f@lexical-violation?) (set! q4ce9@q4b0d@make-lexical-violation q4b0d@make-lexical-violation) (set! q4ce8@q4b0b@p? q4b0b@p?) (set! q4ce7@q4b08@q4b00 q4b08@q4b00) (set! q4ce6@q4b06@q4b01 q4b06@q4b01) (set! q4ce5@q4b04@q4aff q4b04@q4aff) (set! q4ce4@q4afe@&implementation-restriction-rcd q4afe@&implementation-restriction-rcd) (set! q4ce3@q4afc@&implementation-restriction-rtd q4afc@&implementation-restriction-rtd) (set! q4ce2@q4afa@implementation-restriction-violation? q4afa@implementation-restriction-violation?) (set! q4ce1@q4af8@make-implementation-restriction-violation q4af8@make-implementation-restriction-violation) (set! q4ce0@q4af6@p? q4af6@p?) (set! q4cdf@q4af3@q4aeb q4af3@q4aeb) (set! q4cde@q4af1@q4aec q4af1@q4aec) (set! q4cdd@q4aef@q4aea q4aef@q4aea) (set! q4cdc@q4ae9@&non-continuable-rcd q4ae9@&non-continuable-rcd) (set! q4cdb@q4ae7@&non-continuable-rtd q4ae7@&non-continuable-rtd) (set! q4cda@q4ae5@non-continuable-violation? q4ae5@non-continuable-violation?) (set! q4cd9@q4ae3@make-non-continuable-violation q4ae3@make-non-continuable-violation) (set! q4cd8@q4ae1@p? q4ae1@p?) (set! q4cd7@q4ade@q4ad6 q4ade@q4ad6) (set! q4cd6@q4adc@q4ad7 q4adc@q4ad7) (set! q4cd5@q4ada@q4ad5 q4ada@q4ad5) (set! q4cd4@q4ad4@&who-rcd q4ad4@&who-rcd) (set! q4cd3@q4ad2@&who-rtd q4ad2@&who-rtd) (set! q4cd2@q4ad0@condition-who q4ad0@condition-who) (set! q4cd1@q4ace@who-condition? q4ace@who-condition?) (set! q4cd0@q4acc@q4abb q4acc@q4abb) (set! q4ccf@q4aca@make-who-condition q4aca@make-who-condition) (set! q4cce@q4ac8@p? q4ac8@p?) (set! q4ccd@q4ac5@q4abd q4ac5@q4abd) (set! q4ccc@q4ac3@q4abe q4ac3@q4abe) (set! q4ccb@q4ac1@q4abc q4ac1@q4abc) (set! q4cca@q4ab9@&irritants-rcd q4ab9@&irritants-rcd) (set! q4cc9@q4ab7@&irritants-rtd q4ab7@&irritants-rtd) (set! q4cc8@q4ab5@condition-irritants q4ab5@condition-irritants) (set! q4cc7@q4ab3@irritants-condition? q4ab3@irritants-condition?) (set! q4cc6@q4ab1@q4aa0 q4ab1@q4aa0) (set! q4cc5@q4aaf@make-irritants-condition q4aaf@make-irritants-condition) (set! q4cc4@q4aad@p? q4aad@p?) (set! q4cc3@q4aaa@q4aa2 q4aaa@q4aa2) (set! q4cc2@q4aa8@q4aa3 q4aa8@q4aa3) (set! q4cc1@q4aa6@q4aa1 q4aa6@q4aa1) (set! q4cc0@q4a9e@&assertion-rcd q4a9e@&assertion-rcd) (set! q4cbf@q4a9c@&assertion-rtd q4a9c@&assertion-rtd) (set! q4cbe@q4a9a@assertion-violation? q4a9a@assertion-violation?) (set! q4cbd@q4a98@make-assertion-violation q4a98@make-assertion-violation) (set! q4cbc@q4a96@p? q4a96@p?) (set! q4cbb@q4a93@q4a8b q4a93@q4a8b) (set! q4cba@q4a91@q4a8c q4a91@q4a8c) (set! q4cb9@q4a8f@q4a8a q4a8f@q4a8a) (set! q4cb8@q4a89@&violation-rcd q4a89@&violation-rcd) (set! q4cb7@q4a87@&violation-rtd q4a87@&violation-rtd) (set! q4cb6@q4a85@violation? q4a85@violation?) (set! q4cb5@q4a83@make-violation q4a83@make-violation) (set! q4cb4@q4a81@p? q4a81@p?) (set! q4cb3@q4a7e@q4a76 q4a7e@q4a76) (set! q4cb2@q4a7c@q4a77 q4a7c@q4a77) (set! q4cb1@q4a7a@q4a75 q4a7a@q4a75) (set! q4cb0@q4a74@&error-rcd q4a74@&error-rcd) (set! q4caf@q4a72@&error-rtd q4a72@&error-rtd) (set! q4cae@q4a70@error? q4a70@error?) (set! q4cad@q4a6e@make-error q4a6e@make-error) (set! q4cac@q4a6c@p? q4a6c@p?) (set! q4cab@q4a69@q4a61 q4a69@q4a61) (set! q4caa@q4a67@q4a62 q4a67@q4a62) (set! q4ca9@q4a65@q4a60 q4a65@q4a60) (set! q4ca8@q4a5f@&serious-rcd q4a5f@&serious-rcd) (set! q4ca7@q4a5d@&serious-rtd q4a5d@&serious-rtd) (set! q4ca6@q4a5b@serious-condition? q4a5b@serious-condition?) (set! q4ca5@q4a59@make-serious-condition q4a59@make-serious-condition) (set! q4ca4@q4a57@p? q4a57@p?) (set! q4ca3@q4a54@q4a4c q4a54@q4a4c) (set! q4ca2@q4a52@q4a4d q4a52@q4a4d) (set! q4ca1@q4a50@q4a4b q4a50@q4a4b) (set! q4ca0@q4a4a@&warning-rcd q4a4a@&warning-rcd) (set! q4c9f@q4a48@&warning-rtd q4a48@&warning-rtd) (set! q4c9e@q4a46@warning? q4a46@warning?) (set! q4c9d@q4a44@make-warning q4a44@make-warning) (set! q4c9c@q4a42@p? q4a42@p?) (set! q4c9b@q4a3f@q4a37 q4a3f@q4a37) (set! q4c9a@q4a3d@q4a38 q4a3d@q4a38) (set! q4c99@q4a3b@q4a36 q4a3b@q4a36) (set! q4c98@q4a35@&message-rcd q4a35@&message-rcd) (set! q4c97@q4a33@&message-rtd q4a33@&message-rtd) (set! q4c96@q4a31@condition-message q4a31@condition-message) (set! q4c95@q4a2f@message-condition? q4a2f@message-condition?) (set! q4c94@q4a2d@q4a1c q4a2d@q4a1c) (set! q4c93@q4a2b@make-message-condition q4a2b@make-message-condition) (set! q4c92@q4a29@p? q4a29@p?) (set! q4c91@q4a26@q4a1e q4a26@q4a1e) (set! q4c90@q4a24@q4a1f q4a24@q4a1f) (set! q4c8f@q4a22@q4a1d q4a22@q4a1d) (set! q4c8e@q49d6@&condition-rcd q49d6@&condition-rcd) (set! q4c8d@q49d4@&condition-rtd q49d4@&condition-rtd) (set! q4c8c@q49d2@make-&condition q49d2@make-&condition) (set! q4c8b@q49d0@&condition? q49d0@&condition?) (set! q4c8a@q49cd@q49c5 q49cd@q49c5) (set! q4c89@q49cb@q49c6 q49cb@q49c6) (set! q4c88@q49c9@q49c4 q49c9@q49c4)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (q28c7@q287c@current-primitive-locations (lambda (q51c6@x) ((lambda (q51c8@t) (if q51c8@t (cdr q51c8@t) '#f)) (assq q51c6@x '((&no-nans-rcd . q4d78@q4c87@&no-nans-rcd) (&no-nans-rtd . q4d77@q4c85@&no-nans-rtd) (&no-infinities-rcd . q4d70@q4c72@&no-infinities-rcd) (&no-infinities-rtd . q4d6f@q4c70@&no-infinities-rtd) (&i/o-encoding-rcd . q4d68@q4c5d@&i/o-encoding-rcd) (&i/o-encoding-rtd . q4d67@q4c5b@&i/o-encoding-rtd) (&i/o-decoding-rcd . q4d5e@q4c42@&i/o-decoding-rcd) (&i/o-decoding-rtd . q4d5d@q4c40@&i/o-decoding-rtd) (&i/o-port-rcd . q4d56@q4c2d@&i/o-port-rcd) (&i/o-port-rtd . q4d55@q4c2b@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . q4d4c@q4c12@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . q4d4b@q4c10@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . q4d44@q4bfd@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . q4d43@q4bfb@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . q4d3c@q4be8@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . q4d3b@q4be6@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . q4d34@q4bd3@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . q4d33@q4bd1@&i/o-file-protection-rtd) (&i/o-filename-rcd . q4d2c@q4bbe@&i/o-filename-rcd) (&i/o-filename-rtd . q4d2b@q4bbc@&i/o-filename-rtd) (&i/o-invalid-position-rcd . q4d22@q4ba3@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . q4d21@q4ba1@&i/o-invalid-position-rtd) (&i/o-write-rcd . q4d18@q4b88@&i/o-write-rcd) (&i/o-write-rtd . q4d17@q4b86@&i/o-write-rtd) (&i/o-read-rcd . q4d10@q4b73@&i/o-read-rcd) (&i/o-read-rtd . q4d0f@q4b71@&i/o-read-rtd) (&i/o-rcd . q4d08@q4b5e@&i/o-rcd) (&i/o-rtd . q4d07@q4b5c@&i/o-rtd) (&undefined-rcd . q4d00@q4b49@&undefined-rcd) (&undefined-rtd . q4cff@q4b47@&undefined-rtd) (&syntax-rcd . q4cf8@q4b34@&syntax-rcd) (&syntax-rtd . q4cf7@q4b32@&syntax-rtd) (&lexical-rcd . q4cec@q4b13@&lexical-rcd) (&lexical-rtd . q4ceb@q4b11@&lexical-rtd) (&implementation-restriction-rcd . q4ce4@q4afe@&implementation-restriction-rcd) (&implementation-restriction-rtd . q4ce3@q4afc@&implementation-restriction-rtd) (&non-continuable-rcd . q4cdc@q4ae9@&non-continuable-rcd) (&non-continuable-rtd . q4cdb@q4ae7@&non-continuable-rtd) (&who-rcd . q4cd4@q4ad4@&who-rcd) (&who-rtd . q4cd3@q4ad2@&who-rtd) (&irritants-rcd . q4cca@q4ab9@&irritants-rcd) (&irritants-rtd . q4cc9@q4ab7@&irritants-rtd) (&assertion-rcd . q4cc0@q4a9e@&assertion-rcd) (&assertion-rtd . q4cbf@q4a9c@&assertion-rtd) (&violation-rcd . q4cb8@q4a89@&violation-rcd) (&violation-rtd . q4cb7@q4a87@&violation-rtd) (&error-rcd . q4cb0@q4a74@&error-rcd) (&error-rtd . q4caf@q4a72@&error-rtd) (&serious-rcd . q4ca8@q4a5f@&serious-rcd) (&serious-rtd . q4ca7@q4a5d@&serious-rtd) (&warning-rcd . q4ca0@q4a4a@&warning-rcd) (&warning-rtd . q4c9f@q4a48@&warning-rtd) (&message-rcd . q4c98@q4a35@&message-rcd) (&message-rtd . q4c97@q4a33@&message-rtd) (&condition-rcd . q4c8e@q49d6@&condition-rcd) (&condition-rtd . q4c8d@q49d4@&condition-rtd) (syntax-error . q49b6@q2fbc@syntax-error) (syntax-dispatch . q494b@q2ed7@syntax-dispatch) (load . q4ea9@q4d94@load) (interaction-environment . q49be@q2fcc@interaction-environment) (library-path . q2ade@q296d@library-path) (make-parameter . q2876@q27a0@make-parameter) (make-variable-transformer . q4909@q2d04@make-variable-transformer) (identifier? . q49b9@q2fc2@identifier?) (generate-temporaries . q49af@q2fae@generate-temporaries) (free-identifier=? . q49b0@q2fb0@free-identifier=?) (syntax->datum . q49bb@q2fc6@syntax->datum) (datum->syntax . q49ba@q2fc4@datum->syntax) (bound-identifier=? . q49b1@q2fb2@bound-identifier=?) (make-i/o-write-error . q4d15@q4b82@make-i/o-write-error) (make-i/o-read-error . q4d0d@q4b6d@make-i/o-read-error) (make-i/o-port-error . q4d51@q4c23@make-i/o-port-error) (make-i/o-invalid-position-error . q4d1d@q4b99@make-i/o-invalid-position-error) (make-i/o-filename-error . q4d27@q4bb4@make-i/o-filename-error) (make-i/o-file-protection-error . q4d31@q4bcd@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . q4d39@q4be2@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . q4d49@q4c0c@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . q4d41@q4bf7@make-i/o-file-already-exists-error) (make-i/o-error . q4d05@q4b58@make-i/o-error) (make-i/o-encoding-error . q4d63@q4c53@make-i/o-encoding-error) (make-i/o-decoding-error . q4d5b@q4c3c@make-i/o-decoding-error) (i/o-write-error? . q4d16@q4b84@i/o-write-error?) (i/o-read-error? . q4d0e@q4b6f@i/o-read-error?) (i/o-port-error? . q4d53@q4c27@i/o-port-error?) (i/o-invalid-position-error? . q4d1f@q4b9d@i/o-invalid-position-error?) (i/o-filename-error? . q4d29@q4bb8@i/o-filename-error?) (i/o-file-protection-error? . q4d32@q4bcf@i/o-file-protection-error?) (i/o-file-is-read-only-error? . q4d3a@q4be4@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . q4d4a@q4c0e@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . q4d42@q4bf9@i/o-file-already-exists-error?) (i/o-error? . q4d06@q4b5a@i/o-error?) (i/o-error-position . q4d20@q4b9f@i/o-error-position) (i/o-error-port . q4d54@q4c29@i/o-error-port) (i/o-error-filename . q4d2a@q4bba@i/o-error-filename) (i/o-encoding-error? . q4d65@q4c57@i/o-encoding-error?) (i/o-encoding-error-char . q4d66@q4c59@i/o-encoding-error-char) (i/o-decoding-error? . q4d5c@q4c3e@i/o-decoding-error?) (scheme-report-environment . q49a6@q2f9c@scheme-report-environment) (null-environment . q49a5@q2f9a@null-environment) (command-line . q4ea6@q4d8e@command-line) (eval . q49a8@q2fa0@eval) (environment . q49a4@q2f98@environment) (who-condition? . q4cd1@q4ace@who-condition?) (warning? . q4c9e@q4a46@warning?) (violation? . q4cb6@q4a85@violation?) (undefined-violation? . q4cfe@q4b45@undefined-violation?) (syntax-violation? . q4cf4@q4b2c@syntax-violation?) (syntax-violation-subform . q4cf6@q4b30@syntax-violation-subform) (syntax-violation-form . q4cf5@q4b2e@syntax-violation-form) (syntax-violation . q49b8@q2fc0@syntax-violation) (serious-condition? . q4ca6@q4a5b@serious-condition?) (non-continuable-violation? . q4cda@q4ae5@non-continuable-violation?) (message-condition? . q4c95@q4a2f@message-condition?) (make-who-condition . q4ccf@q4aca@make-who-condition) (make-warning . q4c9d@q4a44@make-warning) (make-violation . q4cb5@q4a83@make-violation) (make-undefined-violation . q4cfd@q4b43@make-undefined-violation) (make-syntax-violation . q4cf1@q4b26@make-syntax-violation) (make-serious-condition . q4ca5@q4a59@make-serious-condition) (make-non-continuable-violation . q4cd9@q4ae3@make-non-continuable-violation) (make-message-condition . q4c93@q4a2b@make-message-condition) (make-lexical-violation . q4ce9@q4b0d@make-lexical-violation) (make-irritants-condition . q4cc5@q4aaf@make-irritants-condition) (make-implementation-restriction-violation . q4ce1@q4af8@make-implementation-restriction-violation) (make-error . q4cad@q4a6e@make-error) (make-assertion-violation . q4cbd@q4a98@make-assertion-violation) (lexical-violation? . q4cea@q4b0f@lexical-violation?) (irritants-condition? . q4cc7@q4ab3@irritants-condition?) (implementation-restriction-violation? . q4ce2@q4afa@implementation-restriction-violation?) (error? . q4cae@q4a70@error?) (condition-who . q4cd2@q4ad0@condition-who) (condition-message . q4c96@q4a31@condition-message) (condition-irritants . q4cc8@q4ab5@condition-irritants) (assertion-violation? . q4cbe@q4a9a@assertion-violation?) (no-nans-violation? . q4d76@q4c83@no-nans-violation?) (no-infinities-violation? . q4d6e@q4c6e@no-infinities-violation?) (make-no-nans-violation . q4d75@q4c81@make-no-nans-violation) (make-no-infinities-violation . q4d6d@q4c6c@make-no-infinities-violation) (assertion-error . q49b5@q2fba@assertion-error)))))) (q2aee@q298d@install-library 'q51a3 '(mosh interaction) '() '() '() '() '((regexp? . q519b) (alist->eq-hash-table . q5198) (format . q5195) (string-split . q518a) (call-process . q5184) (set-current-directory! . q5180) (expand-path . q517f) (current-directory . q517e) (%spawn . q517d) (%waitpid . q517c) (%ffi-supported? . q517b) (%ffi-pointer-ref . q517a) (%ffi-pointer->string . q5179) (%ffi-call->string-or-zero . q5178) (%ffi-call->double . q5177) (%ffi-call->void* . q5176) (%ffi-call->void . q5175) (%ffi-call->int . q5174) (%ffi-lookup . q5173) (%ffi-open . q5172) (%fork . q5171) (%pipe . q5170) (p . q516f) (whereis . q5159) (register . q5158) (vm-join! . q5157) (vm-set-value! . q5156) (vm? . q5155) (main-vm? . q5154) (vm-eval . q5153) (vm-self . q5152) (vm-start! . q5151) (make-vm . q5150) (mutex-try-lock! . q514f) (mutex-unlock! . q514e) (mutex-lock! . q514d) (mutex? . q514c) (make-mutex . q514b) (condition-variable-notify-all! . q514a) (condition-variable-notify! . q5149) (condition-variable-wait! . q5148) (make-condition-variable . q5147) (string-upcase . q5130) (string-titlecase . q512f) (string-normalize-nfkd . q512e) (string-normalize-nfkc . q512d) (string-normalize-nfd . q512c) (string-normalize-nfc . q512b) (string-foldcase . q512a) (string-downcase . q5129) (string-ci>? . q5128) (string-ci>=? . q5127) (string-ci=? . q5126) (string-ci<? . q5125) (string-ci<=? . q5124) (char-whitespace? . q5123) (char-upper-case? . q5122) (char-title-case? . q5121) (char-numeric? . q5120) (char-lower-case? . q511f) (char-general-category . q511e) (char-upcase . q511d) (char-titlecase . q511c) (char-foldcase . q511b) (char-downcase . q511a) (char-ci>? . q5119) (char-ci>=? . q5118) (char-ci=? . q5117) (char-ci<? . q5116) (char-ci<=? . q5115) (char-alphabetic? . q5114) (make-variable-transformer . q2d03) (identifier? . q2fc1) (generate-temporaries . q2fad) (free-identifier=? . q2faf) (syntax->datum . q2fc5) (datum->syntax . q2fc3) (bound-identifier=? . q2fb1) (record-type-descriptor? . q5113) (record-predicate . q5112) (record-mutator . q5111) (record-constructor . q5110) (record-accessor . q510f) (make-record-type-descriptor . q510e) (make-record-constructor-descriptor . q510d) (record? . q510c) (record-type-uid . q510b) (record-type-sealed? . q510a) (record-type-parent . q5109) (record-type-opaque? . q5108) (record-type-name . q5107) (record-type-generative? . q5106) (record-type-field-names . q5105) (record-rtd . q5104) (record-field-mutable? . q5103) (delete-file . q5102) (file-exists? . q5101) (vector-sort! . q5100) (vector-sort . q50ff) (list-sort . q50fe) (symbol-hash . q50fd) (string-ci-hash . q50fc) (string-hash . q50fb) (equal-hash . q50fa) (hashtable-equivalence-function . q50f9) (make-hashtable . q50f8) (hashtable-hash-function . q50f7) (make-eqv-hashtable . q50f6) (make-eq-hashtable . q50f5) (hashtable? . q50f4) (hashtable-update! . q50f3) (hashtable-size . q50f2) (hashtable-set! . q50f1) (hashtable-ref . q50f0) (hashtable-mutable? . q50ef) (hashtable-keys . q50ee) (hashtable-entries . q50ed) (hashtable-delete! . q50ec) (hashtable-copy . q50eb) (hashtable-contains? . q50ea) (hashtable-clear! . q50e9) (call-with-output-file . q50e8) (call-with-input-file . q50e7) (write-char . q50e6) (write . q50e5) (with-output-to-file . q50e4) (with-input-from-file . q50e3) (read-char . q50e2) (read . q50e1) (peek-char . q50e0) (open-output-file . q50df) (open-input-file . q50de) (newline . q50dd) (display . q50dc) (close-output-port . q50db) (close-input-port . q50da) (eof-object? . q50d9) (eof-object . q50d8) (current-error-port . q50d7) (current-output-port . q50d6) (current-input-port . q50d5) (output-port? . q50d4) (input-port? . q50d3) (utf-8-codec . q50d2) (utf-16-codec . q50d1) (transcoder-error-handling-mode . q50d0) (transcoder-eol-style . q50cf) (transcoder-codec . q50ce) (transcoded-port . q50cd) (textual-port? . q50cc) (string->bytevector . q50cb) (standard-output-port . q50ca) (standard-input-port . q50c9) (standard-error-port . q50c8) (set-port-position! . q50c7) (put-u8 . q50c6) (put-string . q50c5) (put-datum . q50c4) (put-char . q50c3) (put-bytevector . q50c2) (port? . q50c1) (port-transcoder . q50c0) (port-position . q50bf) (port-has-set-port-position!? . q50be) (port-has-port-position? . q50bd) (port-eof? . q50bc) (output-port-buffer-mode . q50bb) (open-string-output-port . q50ba) (open-string-input-port . q50b9) (open-file-output-port . q50b8) (open-file-input/output-port . q50b7) (open-file-input-port . q50b6) (open-bytevector-output-port . q50b5) (open-bytevector-input-port . q50b4) (native-transcoder . q50b3) (native-eol-style . q50b2) (make-transcoder . q50b1) (latin-1-codec . q50b0) (make-i/o-write-error . q4b81) (make-i/o-read-error . q4b6c) (make-i/o-port-error . q4c22) (make-i/o-invalid-position-error . q4b98) (make-i/o-filename-error . q4bb3) (make-i/o-file-protection-error . q4bcc) (make-i/o-file-is-read-only-error . q4be1) (make-i/o-file-does-not-exist-error . q4c0b) (make-i/o-file-already-exists-error . q4bf6) (make-i/o-error . q4b57) (make-i/o-encoding-error . q4c52) (make-i/o-decoding-error . q4c3b) (make-custom-textual-output-port . q50af) (make-custom-textual-input/output-port . q50ae) (make-custom-textual-input-port . q50ad) (make-custom-binary-output-port . q50ac) (make-custom-binary-input/output-port . q50ab) (make-custom-binary-input-port . q50aa) (make-bytevector . q50a9) (lookahead-u8 . q50a8) (lookahead-char . q50a7) (i/o-write-error? . q4b83) (i/o-read-error? . q4b6e) (i/o-port-error? . q4c26) (i/o-invalid-position-error? . q4b9c) (i/o-filename-error? . q4bb7) (i/o-file-protection-error? . q4bce) (i/o-file-is-read-only-error? . q4be3) (i/o-file-does-not-exist-error? . q4c0d) (i/o-file-already-exists-error? . q4bf8) (i/o-error? . q4b59) (i/o-error-position . q4b9e) (i/o-error-port . q4c28) (i/o-error-filename . q4bb9) (i/o-encoding-error? . q4c56) (i/o-encoding-error-char . q4c58) (i/o-decoding-error? . q4c3d) (get-u8 . q50a6) (get-string-n! . q50a5) (get-string-n . q50a4) (get-string-all . q50a3) (get-line . q50a2) (get-datum . q50a1) (get-char . q50a0) (get-bytevector-some . q509f) (get-bytevector-n! . q509e) (get-bytevector-n . q509d) (get-bytevector-all . q509c) (flush-output-port . q509b) (close-port . q509a) (exit . q5092) (command-line . q4d8d) (string-fill! . q5091) (string-set! . q5090) (set-cdr! . q508f) (set-car! . q508e) (remove . q508d) (remv . q508c) (remp . q508b) (remq . q508a) (partition . q5089) (memv . q5088) (memq . q5087) (memp . q5086) (member . q5085) (exists . q5084) (for-all . q5083) (fold-right . q5082) (fold-left . q5081) (find . q5080) (filter . q507f) (cons* . q507e) (assv . q507d) (assq . q507c) (assp . q507b) (assoc . q507a) (call-with-string-output-port . q5079) (call-with-port . q5078) (call-with-bytevector-output-port . q5077) (bytevector->string . q5076) (buffer-mode? . q5075) (binary-port? . q5074) (with-exception-handler . q5073) (raise-continuable . q5072) (raise . q5071) (eval . q2f9f) (environment . q2f97) (make-enumeration . q5070) (enum-set=? . q506f) (enum-set-universe . q506e) (enum-set-union . q506d) (enum-set-subset? . q506c) (enum-set-projection . q506b) (enum-set-member? . q506a) (enum-set-intersection . q5069) (enum-set-indexer . q5068) (enum-set-difference . q5067) (enum-set-constructor . q5066) (enum-set-complement . q5065) (enum-set->list . q5064) (who-condition? . q4acd) (warning? . q4a45) (violation? . q4a84) (undefined-violation? . q4b44) (syntax-violation? . q4b2b) (syntax-violation-subform . q4b2f) (syntax-violation-form . q4b2d) (syntax-violation . q2fbf) (simple-conditions . q5063) (serious-condition? . q4a5a) (non-continuable-violation? . q4ae4) (message-condition? . q4a2e) (make-who-condition . q4ac9) (make-warning . q4a43) (make-violation . q4a82) (make-undefined-violation . q4b42) (make-syntax-violation . q4b25) (make-serious-condition . q4a58) (make-non-continuable-violation . q4ae2) (make-message-condition . q4a2a) (make-lexical-violation . q4b0c) (make-irritants-condition . q4aae) (make-implementation-restriction-violation . q4af7) (make-error . q4a6d) (make-assertion-violation . q4a97) (lexical-violation? . q4b0e) (irritants-condition? . q4ab2) (implementation-restriction-violation? . q4af9) (error? . q4a6f) (condition-who . q4acf) (condition-predicate . q5062) (condition-message . q4a30) (condition-irritants . q4ab4) (condition-accessor . q5061) (condition . q5060) (assertion-violation? . q4a99) (condition? . q505f) (utf32->string . q505e) (utf16->string . q505d) (utf8->string . q505c) (uint-list->bytevector . q505b) (u8-list->bytevector . q505a) (string->utf8 . q5059) (string->utf32 . q5058) (string->utf16 . q5057) (sint-list->bytevector . q5056) (native-endianness . q5055) (bytevector? . q5054) (bytevector=? . q5053) (bytevector-uint-set! . q5052) (bytevector-uint-ref . q5051) (bytevector-u8-set! . q5050) (bytevector-u8-ref . q504f) (bytevector-u64-set! . q504e) (bytevector-u64-ref . q504d) (bytevector-u64-native-set! . q504c) (bytevector-u64-native-ref . q504b) (bytevector-u32-set! . q504a) (bytevector-u32-ref . q5049) (bytevector-u32-native-set! . q5048) (bytevector-u32-native-ref . q5047) (bytevector-u16-set! . q5046) (bytevector-u16-ref . q5045) (bytevector-u16-native-set! . q5044) (bytevector-u16-native-ref . q5043) (bytevector-sint-set! . q5042) (bytevector-sint-ref . q5041) (bytevector-s8-set! . q5040) (bytevector-s8-ref . q503f) (bytevector-s64-set! . q503e) (bytevector-s64-ref . q503d) (bytevector-s64-native-set! . q503c) (bytevector-s64-native-ref . q503b) (bytevector-s32-set! . q503a) (bytevector-s32-ref . q5039) (bytevector-s32-native-set! . q5038) (bytevector-s32-native-ref . q5037) (bytevector-s16-set! . q5036) (bytevector-s16-ref . q5035) (bytevector-s16-native-set! . q5034) (bytevector-s16-native-ref . q5033) (bytevector-length . q5032) (bytevector-ieee-single-ref . q5031) (bytevector-ieee-single-set! . q5030) (bytevector-ieee-single-native-set! . q502f) (bytevector-ieee-single-native-ref . q502e) (bytevector-ieee-double-set! . q502d) (bytevector-ieee-double-ref . q502c) (bytevector-ieee-double-native-set! . q502b) (bytevector-ieee-double-native-ref . q502a) (bytevector-fill! . q5029) (bytevector-copy! . q5028) (bytevector-copy . q5027) (bytevector->uint-list . q5026) (bytevector->u8-list . q5025) (bytevector->sint-list . q5024) (no-nans-violation? . q4c82) (no-infinities-violation? . q4c6d) (make-no-nans-violation . q4c80) (make-no-infinities-violation . q4c6b) (real->flonum . q5023) (flzero? . q5022) (fltruncate . q5021) (fltan . q5020) (flsqrt . q501f) (flsin . q501e) (flround . q501d) (flpositive? . q501c) (flonum? . q501b) (flodd? . q501a) (flnumerator . q5019) (flnegative? . q5018) (flnan? . q5017) (flmod0 . q5016) (flmod . q5015) (flmin . q5014) (flmax . q5013) (fllog . q5012) (flinteger? . q5011) (flinfinite? . q5010) (flfloor . q500f) (flfinite? . q500e) (flexpt . q500d) (flexp . q500c) (fleven? . q500b) (fldiv0-and-mod0 . q500a) (fldiv0 . q5009) (fldiv-and-mod . q5008) (fldiv . q5007) (fldenominator . q5006) (flcos . q5005) (flceiling . q5004) (flatan . q5003) (flasin . q5002) (flacos . q5001) (flabs . q5000) (fl>? . q4fff) (fl>=? . q4ffe) (fl=? . q4ffd) (fl<? . q4ffc) (fl<=? . q4ffb) (fl/ . q4ffa) (fl- . q4ff9) (fl+ . q4ff8) (fl* . q4ff7) (fixnum->flonum . q4ff6) (fxzero? . q4ff5) (fxxor . q4ff4) (fxrotate-bit-field . q4ff3) (fxreverse-bit-field . q4ff2) (fxpositive? . q4ff1) (fxodd? . q4ff0) (fxnot . q4fef) (fxnegative? . q4fee) (fxmod0 . q4fed) (fxmod . q4fec) (fxmin . q4feb) (fxmax . q4fea) (fxlength . q4fe9) (fxior . q4fe8) (fxif . q4fe7) (fxfirst-bit-set . q4fe6) (fxeven? . q4fe5) (fxdiv0-and-mod0 . q4fe4) (fxdiv0 . q4fe3) (fxdiv-and-mod . q4fe2) (fxdiv . q4fe1) (fxcopy-bit-field . q4fe0) (fxcopy-bit . q4fdf) (fxbit-set? . q4fde) (fxbit-field . q4fdd) (fxbit-count . q4fdc) (fxarithmetic-shift-right . q4fdb) (fxarithmetic-shift-left . q4fda) (fxarithmetic-shift . q4fd9) (fxand . q4fd8) (fx>? . q4fd7) (fx>=? . q4fd6) (fx=? . q4fd5) (fx<? . q4fd4) (fx<=? . q4fd3) (fx-/carry . q4fd2) (fx- . q4fd1) (fx+/carry . q4fd0) (fx+ . q4fcf) (fx*/carry . q4fce) (fx* . q4fcd) (greatest-fixnum . q4fcc) (least-fixnum . q4fcb) (fixnum-width . q4fca) (fixnum? . q4fc9) (bitwise-rotate-bit-field . q4fc8) (bitwise-reverse-bit-field . q4fc7) (bitwise-length . q4fc6) (bitwise-if . q4fc5) (bitwise-first-bit-set . q4fc4) (bitwise-copy-bit-field . q4fc3) (bitwise-copy-bit . q4fc2) (bitwise-bit-set? . q4fc1) (bitwise-bit-field . q4fc0) (bitwise-bit-count . q4fbf) (bitwise-xor . q4fbe) (bitwise-ior . q4fbd) (bitwise-and . q4fbc) (bitwise-not . q4fbb) (bitwise-arithmetic-shift-right . q4fba) (bitwise-arithmetic-shift-left . q4fb9) (bitwise-arithmetic-shift . q4fb8) (zero? . q4fb7) (vector? . q4fb6) (vector-set! . q4fb5) (vector-ref . q4fb4) (vector-map . q4fb3) (vector-length . q4fb2) (vector-for-each . q4fb1) (vector-fill! . q4fb0) (vector->list . q4faf) (vector . q4fae) (values . q4fad) (truncate . q4fac) (tan . q4fab) (symbol? . q4faa) (symbol=? . q4fa9) (symbol->string . q4fa8) (substring . q4fa7) (string? . q4fa6) (string>? . q4fa5) (string>=? . q4fa4) (string=? . q4fa3) (string<? . q4fa2) (string<=? . q4fa1) (string-ref . q4fa0) (string-length . q4f9f) (string-for-each . q4f9e) (string-copy . q4f9d) (string-append . q4f9c) (string->symbol . q4f9b) (string->number . q4f9a) (string->list . q4f99) (string . q4f98) (sqrt . q4f97) (sin . q4f96) (round . q4f95) (reverse . q4f94) (real? . q4f93) (real-valued? . q4f92) (real-part . q4f91) (rationalize . q4f90) (rational? . q4f8f) (rational-valued? . q4f8e) (procedure? . q4f8d) (positive? . q4f8c) (pair? . q4f8b) (odd? . q4f8a) (numerator . q4f89) (number? . q4f88) (number->string . q4f87) (null? . q4f86) (not . q4f85) (negative? . q4f84) (nan? . q4f83) (min . q4f82) (max . q4f81) (map . q4f80) (make-vector . q4f7f) (make-string . q4f7e) (make-rectangular . q4f7d) (make-polar . q4f7c) (magnitude . q4f7b) (log . q4f7a) (list? . q4f79) (list-tail . q4f78) (list-ref . q4f77) (list->vector . q4f76) (list->string . q4f75) (list . q4f74) (length . q4f73) (lcm . q4f72) (integer? . q4f71) (integer-valued? . q4f70) (integer->char . q4f6f) (infinite? . q4f6e) (inexact? . q4f6d) (inexact . q4f6c) (imag-part . q4f6b) (gcd . q4f6a) (for-each . q4f69) (floor . q4f68) (finite? . q4f67) (expt . q4f66) (exp . q4f65) (exact? . q4f64) (exact-integer-sqrt . q4f63) (exact . q4f62) (even? . q4f61) (error . q4f60) (eqv? . q4f5f) (equal? . q4f5e) (eq? . q4f5d) (dynamic-wind . q4f5c) (div0-and-mod0 . q4f5b) (mod0 . q4f5a) (div0 . q4f59) (div-and-mod . q4f58) (mod . q4f57) (div . q4f56) (denominator . q4f55) (cos . q4f54) (cons . q4f53) (complex? . q4f52) (char? . q4f51) (char>? . q4f50) (char>=? . q4f4f) (char=? . q4f4e) (char<? . q4f4d) (char<=? . q4f4c) (char->integer . q4f4b) (ceiling . q4f4a) (call-with-values . q4f49) (call/cc . q4f48) (call-with-current-continuation . q4f47) (cddddr . q4f46) (cdddar . q4f45) (cddadr . q4f44) (cddaar . q4f43) (cdaddr . q4f42) (cdadar . q4f41) (cdaadr . q4f40) (cdaaar . q4f3f) (cadddr . q4f3e) (caddar . q4f3d) (cadadr . q4f3c) (cadaar . q4f3b) (caaddr . q4f3a) (caadar . q4f39) (caaadr . q4f38) (caaaar . q4f37) (cdddr . q4f36) (cddar . q4f35) (cdadr . q4f34) (cdaar . q4f33) (caddr . q4f32) (cadar . q4f31) (caadr . q4f30) (caaar . q4f2f) (cddr . q4f2e) (cdar . q4f2d) (cadr . q4f2c) (caar . q4f2b) (cdr . q4f2a) (car . q4f29) (boolean? . q4f28) (boolean=? . q4f27) (atan . q4f26) (assertion-violation . q4f25) (asin . q4f24) (apply . q4f23) (append . q4f22) (angle . q4f21) (acos . q4f20) (abs . q4f1f) (/ . q4f1e) (* . q4f1d) (- . q4f1c) (+ . q4f1b) (>= . q4f1a) (> . q4f19) (= . q4f18) (<= . q4f17) (< . q4f16) (library . q4f15) (&no-nans . q4f14) (&no-infinities . q4f13) (&i/o-encoding . q4f12) (&i/o-decoding . q4f11) (&i/o-port . q4f10) (&i/o-file-does-not-exist . q4f0f) (&i/o-file-already-exists . q4f0e) (&i/o-file-is-read-only . q4f0d) (&i/o-file-protection . q4f0c) (&i/o-filename . q4f0b) (&i/o-invalid-position . q4f0a) (&i/o-write . q4f09) (&i/o-read . q4f08) (&i/o . q4f07) (&undefined . q4f06) (&syntax . q4f05) (&lexical . q4f04) (&implementation-restriction . q4f03) (&non-continuable . q4f02) (&who . q4f01) (&irritants . q4f00) (&assertion . q4eff) (&violation . q4efe) (&error . q4efd) (&serious . q4efc) (&warning . q4efb) (&message . q4efa) (&condition . q4ef9) (define-condition-type . q4ef8) (define-enumeration . q4ef7) (define-record-type . q4ef6) (parent-rtd . q4ef5) (nongenerative . q4ef4) (opaque . q4ef3) (sealed . q4ef2) (protocol . q4ef1) (parent . q4ef0) (immutable . q4eef) (mutable . q4eee) (fields . q4eed) (error-handling-mode . q4eec) (file-options . q4eeb) (buffer-mode . q4eea) (eol-style . q4ee9) (guard . q4ee8) (unsyntax-splicing . q4ee5) (unsyntax . q4ee4) (unquote-splicing . q4ee3) (unquote . q4ee2) (_ . q4ee1) (else . q4ee0) (=> . q4edf) (... . q4ede) (assert . q4edd) (endianness . q4edc) (time . q4eda) (do . q4ed9) (cond . q4ed8) (let* . q4ed7) (let . q4ed6) (let*-values . q4ed5) (let-values . q4ed4) (identifier-syntax . q4ed3) (with-syntax . q4ed2) (quasisyntax . q4ed1) (quasiquote . q4ed0) (syntax-rules . q4ecf) (include . q4ece) (record-constructor-descriptor . q4ecc) (record-type-descriptor . q4ecb) (case . q4eca) (unless . q4ec8) (when . q4ec7) (or . q4ec6) (and . q4ec5) (if . q4ec4) (letrec* . q4ec3) (letrec . q4ec2) (case-lambda . q4ec0) (lambda . q4ebf) (syntax . q4ebe) (syntax-case . q4ebd) (quote . q4ebc) (letrec-syntax . q4eba) (let-syntax . q4eb9) (set! . q4eb8) (import . q4eb7) (begin . q4eb6) (define-syntax . q4eb4) (define . q4eb3)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51a4 '(psyntax null-environment-5) '() '() '() '() '((make-promise . q5093) (unquote-splicing . q4ee3) (unquote . q4ee2) (_ . q4ee1) (else . q4ee0) (=> . q4edf) (... . q4ede) (delay . q4edb) (do . q4ed9) (cond . q4ed8) (let* . q4ed7) (let . q4ed6) (quasiquote . q4ed0) (syntax-rules . q4ecf) (case . q4eca) (or . q4ec6) (and . q4ec5) (if . q4ec4) (letrec . q4ec2) (lambda . q4ebf) (quote . q4ebc) (letrec-syntax . q4eba) (let-syntax . q4eb9) (set! . q4eb8) (begin . q4eb6) (define-syntax . q4eb4) (define . q4eb3)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51a5 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . q5128) (string-ci>=? . q5127) (string-ci=? . q5126) (string-ci<? . q5125) (string-ci<=? . q5124) (char-whitespace? . q5123) (char-upper-case? . q5122) (char-numeric? . q5120) (char-lower-case? . q511f) (char-upcase . q511d) (char-downcase . q511a) (char-ci>? . q5119) (char-ci>=? . q5118) (char-ci=? . q5117) (char-ci<? . q5116) (char-ci<=? . q5115) (char-alphabetic? . q5114) (call-with-output-file . q50e8) (call-with-input-file . q50e7) (write-char . q50e6) (write . q50e5) (with-output-to-file . q50e4) (with-input-from-file . q50e3) (read-char . q50e2) (read . q50e1) (peek-char . q50e0) (open-output-file . q50df) (open-input-file . q50de) (newline . q50dd) (display . q50dc) (close-output-port . q50db) (close-input-port . q50da) (eof-object . q50d8) (current-output-port . q50d6) (current-input-port . q50d5) (output-port? . q50d4) (input-port? . q50d3) (scheme-report-environment . q2f9b) (quotient . q5099) (null-environment . q2f99) (remainder . q5098) (modulo . q5097) (inexact->exact . q5096) (force . q5095) (exact->inexact . q5094) (make-promise . q5093) (string-fill! . q5091) (string-set! . q5090) (set-cdr! . q508f) (set-car! . q508e) (memv . q5088) (memq . q5087) (member . q5085) (assv . q507d) (assq . q507c) (assoc . q507a) (eval . q2f9f) (zero? . q4fb7) (vector? . q4fb6) (vector-set! . q4fb5) (vector-ref . q4fb4) (vector-length . q4fb2) (vector-fill! . q4fb0) (vector->list . q4faf) (vector . q4fae) (values . q4fad) (truncate . q4fac) (tan . q4fab) (symbol? . q4faa) (symbol->string . q4fa8) (substring . q4fa7) (string? . q4fa6) (string>? . q4fa5) (string>=? . q4fa4) (string=? . q4fa3) (string<? . q4fa2) (string<=? . q4fa1) (string-ref . q4fa0) (string-length . q4f9f) (string-copy . q4f9d) (string-append . q4f9c) (string->symbol . q4f9b) (string->number . q4f9a) (string->list . q4f99) (string . q4f98) (sqrt . q4f97) (sin . q4f96) (round . q4f95) (reverse . q4f94) (real? . q4f93) (real-part . q4f91) (rationalize . q4f90) (rational? . q4f8f) (procedure? . q4f8d) (positive? . q4f8c) (pair? . q4f8b) (odd? . q4f8a) (numerator . q4f89) (number? . q4f88) (number->string . q4f87) (not . q4f85) (negative? . q4f84) (min . q4f82) (max . q4f81) (map . q4f80) (make-vector . q4f7f) (make-string . q4f7e) (make-rectangular . q4f7d) (make-polar . q4f7c) (magnitude . q4f7b) (log . q4f7a) (list? . q4f79) (list-tail . q4f78) (list-ref . q4f77) (list->vector . q4f76) (list->string . q4f75) (list . q4f74) (length . q4f73) (lcm . q4f72) (integer? . q4f71) (integer->char . q4f6f) (inexact? . q4f6d) (imag-part . q4f6b) (gcd . q4f6a) (for-each . q4f69) (floor . q4f68) (expt . q4f66) (exp . q4f65) (exact? . q4f64) (even? . q4f61) (eqv? . q4f5f) (equal? . q4f5e) (eq? . q4f5d) (dynamic-wind . q4f5c) (denominator . q4f55) (cos . q4f54) (cons . q4f53) (complex? . q4f52) (char? . q4f51) (char>? . q4f50) (char>=? . q4f4f) (char=? . q4f4e) (char<? . q4f4d) (char<=? . q4f4c) (char->integer . q4f4b) (ceiling . q4f4a) (call-with-values . q4f49) (call-with-current-continuation . q4f47) (cddddr . q4f46) (cdddar . q4f45) (cddadr . q4f44) (cddaar . q4f43) (cdaddr . q4f42) (cdadar . q4f41) (cdaadr . q4f40) (cdaaar . q4f3f) (cadddr . q4f3e) (caddar . q4f3d) (cadadr . q4f3c) (cadaar . q4f3b) (caaddr . q4f3a) (caadar . q4f39) (caaadr . q4f38) (caaaar . q4f37) (cdddr . q4f36) (cddar . q4f35) (cdadr . q4f34) (cdaar . q4f33) (caddr . q4f32) (cadar . q4f31) (caadr . q4f30) (caaar . q4f2f) (cddr . q4f2e) (cdar . q4f2d) (cadr . q4f2c) (caar . q4f2b) (cdr . q4f2a) (car . q4f29) (boolean? . q4f28) (atan . q4f26) (asin . q4f24) (apply . q4f23) (append . q4f22) (angle . q4f21) (acos . q4f20) (abs . q4f1f) (/ . q4f1e) (* . q4f1d) (- . q4f1c) (+ . q4f1b) (>= . q4f1a) (> . q4f19) (= . q4f18) (<= . q4f17) (< . q4f16) (unquote-splicing . q4ee3) (unquote . q4ee2) (else . q4ee0) (=> . q4edf) (... . q4ede) (delay . q4edb) (do . q4ed9) (cond . q4ed8) (let* . q4ed7) (let . q4ed6) (quasiquote . q4ed0) (syntax-rules . q4ecf) (case . q4eca) (or . q4ec6) (and . q4ec5) (if . q4ec4) (letrec . q4ec2) (lambda . q4ebf) (quote . q4ebc) (letrec-syntax . q4eba) (let-syntax . q4eb9) (set! . q4eb8) (begin . q4eb6) (define-syntax . q4eb4) (define . q4eb3)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51a6 '(psyntax modules) '() '() '() '() '((module . q4eb5)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51a7 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51a8 '(rnrs) '(6) '() '() '() '((regexp? . q519b) (string-upcase . q5130) (string-titlecase . q512f) (string-normalize-nfkd . q512e) (string-normalize-nfkc . q512d) (string-normalize-nfd . q512c) (string-normalize-nfc . q512b) (string-foldcase . q512a) (string-downcase . q5129) (string-ci>? . q5128) (string-ci>=? . q5127) (string-ci=? . q5126) (string-ci<? . q5125) (string-ci<=? . q5124) (char-whitespace? . q5123) (char-upper-case? . q5122) (char-title-case? . q5121) (char-numeric? . q5120) (char-lower-case? . q511f) (char-general-category . q511e) (char-upcase . q511d) (char-titlecase . q511c) (char-foldcase . q511b) (char-downcase . q511a) (char-ci>? . q5119) (char-ci>=? . q5118) (char-ci=? . q5117) (char-ci<? . q5116) (char-ci<=? . q5115) (char-alphabetic? . q5114) (make-variable-transformer . q2d03) (identifier? . q2fc1) (generate-temporaries . q2fad) (free-identifier=? . q2faf) (syntax->datum . q2fc5) (datum->syntax . q2fc3) (bound-identifier=? . q2fb1) (record-type-descriptor? . q5113) (record-predicate . q5112) (record-mutator . q5111) (record-constructor . q5110) (record-accessor . q510f) (make-record-type-descriptor . q510e) (make-record-constructor-descriptor . q510d) (record? . q510c) (record-type-uid . q510b) (record-type-sealed? . q510a) (record-type-parent . q5109) (record-type-opaque? . q5108) (record-type-name . q5107) (record-type-generative? . q5106) (record-type-field-names . q5105) (record-rtd . q5104) (record-field-mutable? . q5103) (delete-file . q5102) (file-exists? . q5101) (vector-sort! . q5100) (vector-sort . q50ff) (list-sort . q50fe) (symbol-hash . q50fd) (string-ci-hash . q50fc) (string-hash . q50fb) (equal-hash . q50fa) (hashtable-equivalence-function . q50f9) (make-hashtable . q50f8) (hashtable-hash-function . q50f7) (make-eqv-hashtable . q50f6) (make-eq-hashtable . q50f5) (hashtable? . q50f4) (hashtable-update! . q50f3) (hashtable-size . q50f2) (hashtable-set! . q50f1) (hashtable-ref . q50f0) (hashtable-mutable? . q50ef) (hashtable-keys . q50ee) (hashtable-entries . q50ed) (hashtable-delete! . q50ec) (hashtable-copy . q50eb) (hashtable-contains? . q50ea) (hashtable-clear! . q50e9) (call-with-output-file . q50e8) (call-with-input-file . q50e7) (write-char . q50e6) (write . q50e5) (with-output-to-file . q50e4) (with-input-from-file . q50e3) (read-char . q50e2) (read . q50e1) (peek-char . q50e0) (open-output-file . q50df) (open-input-file . q50de) (newline . q50dd) (display . q50dc) (close-output-port . q50db) (close-input-port . q50da) (eof-object? . q50d9) (eof-object . q50d8) (current-error-port . q50d7) (current-output-port . q50d6) (current-input-port . q50d5) (output-port? . q50d4) (input-port? . q50d3) (utf-8-codec . q50d2) (utf-16-codec . q50d1) (transcoder-error-handling-mode . q50d0) (transcoder-eol-style . q50cf) (transcoder-codec . q50ce) (transcoded-port . q50cd) (textual-port? . q50cc) (string->bytevector . q50cb) (standard-output-port . q50ca) (standard-input-port . q50c9) (standard-error-port . q50c8) (set-port-position! . q50c7) (put-u8 . q50c6) (put-string . q50c5) (put-datum . q50c4) (put-char . q50c3) (put-bytevector . q50c2) (port? . q50c1) (port-transcoder . q50c0) (port-position . q50bf) (port-has-set-port-position!? . q50be) (port-has-port-position? . q50bd) (port-eof? . q50bc) (output-port-buffer-mode . q50bb) (open-string-output-port . q50ba) (open-string-input-port . q50b9) (open-file-output-port . q50b8) (open-file-input/output-port . q50b7) (open-file-input-port . q50b6) (open-bytevector-output-port . q50b5) (open-bytevector-input-port . q50b4) (native-transcoder . q50b3) (native-eol-style . q50b2) (make-transcoder . q50b1) (latin-1-codec . q50b0) (make-i/o-write-error . q4b81) (make-i/o-read-error . q4b6c) (make-i/o-port-error . q4c22) (make-i/o-invalid-position-error . q4b98) (make-i/o-filename-error . q4bb3) (make-i/o-file-protection-error . q4bcc) (make-i/o-file-is-read-only-error . q4be1) (make-i/o-file-does-not-exist-error . q4c0b) (make-i/o-file-already-exists-error . q4bf6) (make-i/o-error . q4b57) (make-i/o-encoding-error . q4c52) (make-i/o-decoding-error . q4c3b) (make-custom-textual-output-port . q50af) (make-custom-textual-input/output-port . q50ae) (make-custom-textual-input-port . q50ad) (make-custom-binary-output-port . q50ac) (make-custom-binary-input/output-port . q50ab) (make-custom-binary-input-port . q50aa) (make-bytevector . q50a9) (lookahead-u8 . q50a8) (lookahead-char . q50a7) (i/o-write-error? . q4b83) (i/o-read-error? . q4b6e) (i/o-port-error? . q4c26) (i/o-invalid-position-error? . q4b9c) (i/o-filename-error? . q4bb7) (i/o-file-protection-error? . q4bce) (i/o-file-is-read-only-error? . q4be3) (i/o-file-does-not-exist-error? . q4c0d) (i/o-file-already-exists-error? . q4bf8) (i/o-error? . q4b59) (i/o-error-position . q4b9e) (i/o-error-port . q4c28) (i/o-error-filename . q4bb9) (i/o-encoding-error? . q4c56) (i/o-encoding-error-char . q4c58) (i/o-decoding-error? . q4c3d) (get-u8 . q50a6) (get-string-n! . q50a5) (get-string-n . q50a4) (get-string-all . q50a3) (get-line . q50a2) (get-datum . q50a1) (get-char . q50a0) (get-bytevector-some . q509f) (get-bytevector-n! . q509e) (get-bytevector-n . q509d) (get-bytevector-all . q509c) (flush-output-port . q509b) (close-port . q509a) (exit . q5092) (command-line . q4d8d) (remove . q508d) (remv . q508c) (remp . q508b) (remq . q508a) (partition . q5089) (memv . q5088) (memq . q5087) (memp . q5086) (member . q5085) (exists . q5084) (for-all . q5083) (fold-right . q5082) (fold-left . q5081) (find . q5080) (filter . q507f) (cons* . q507e) (assv . q507d) (assq . q507c) (assp . q507b) (assoc . q507a) (call-with-string-output-port . q5079) (call-with-port . q5078) (call-with-bytevector-output-port . q5077) (bytevector->string . q5076) (buffer-mode? . q5075) (binary-port? . q5074) (with-exception-handler . q5073) (raise-continuable . q5072) (raise . q5071) (make-enumeration . q5070) (enum-set=? . q506f) (enum-set-universe . q506e) (enum-set-union . q506d) (enum-set-subset? . q506c) (enum-set-projection . q506b) (enum-set-member? . q506a) (enum-set-intersection . q5069) (enum-set-indexer . q5068) (enum-set-difference . q5067) (enum-set-constructor . q5066) (enum-set-complement . q5065) (enum-set->list . q5064) (who-condition? . q4acd) (warning? . q4a45) (violation? . q4a84) (undefined-violation? . q4b44) (syntax-violation? . q4b2b) (syntax-violation-subform . q4b2f) (syntax-violation-form . q4b2d) (syntax-violation . q2fbf) (simple-conditions . q5063) (serious-condition? . q4a5a) (non-continuable-violation? . q4ae4) (message-condition? . q4a2e) (make-who-condition . q4ac9) (make-warning . q4a43) (make-violation . q4a82) (make-undefined-violation . q4b42) (make-syntax-violation . q4b25) (make-serious-condition . q4a58) (make-non-continuable-violation . q4ae2) (make-message-condition . q4a2a) (make-lexical-violation . q4b0c) (make-irritants-condition . q4aae) (make-implementation-restriction-violation . q4af7) (make-error . q4a6d) (make-assertion-violation . q4a97) (lexical-violation? . q4b0e) (irritants-condition? . q4ab2) (implementation-restriction-violation? . q4af9) (error? . q4a6f) (condition-who . q4acf) (condition-predicate . q5062) (condition-message . q4a30) (condition-irritants . q4ab4) (condition-accessor . q5061) (condition . q5060) (assertion-violation? . q4a99) (condition? . q505f) (utf32->string . q505e) (utf16->string . q505d) (utf8->string . q505c) (uint-list->bytevector . q505b) (u8-list->bytevector . q505a) (string->utf8 . q5059) (string->utf32 . q5058) (string->utf16 . q5057) (sint-list->bytevector . q5056) (native-endianness . q5055) (bytevector? . q5054) (bytevector=? . q5053) (bytevector-uint-set! . q5052) (bytevector-uint-ref . q5051) (bytevector-u8-set! . q5050) (bytevector-u8-ref . q504f) (bytevector-u64-set! . q504e) (bytevector-u64-ref . q504d) (bytevector-u64-native-set! . q504c) (bytevector-u64-native-ref . q504b) (bytevector-u32-set! . q504a) (bytevector-u32-ref . q5049) (bytevector-u32-native-set! . q5048) (bytevector-u32-native-ref . q5047) (bytevector-u16-set! . q5046) (bytevector-u16-ref . q5045) (bytevector-u16-native-set! . q5044) (bytevector-u16-native-ref . q5043) (bytevector-sint-set! . q5042) (bytevector-sint-ref . q5041) (bytevector-s8-set! . q5040) (bytevector-s8-ref . q503f) (bytevector-s64-set! . q503e) (bytevector-s64-ref . q503d) (bytevector-s64-native-set! . q503c) (bytevector-s64-native-ref . q503b) (bytevector-s32-set! . q503a) (bytevector-s32-ref . q5039) (bytevector-s32-native-set! . q5038) (bytevector-s32-native-ref . q5037) (bytevector-s16-set! . q5036) (bytevector-s16-ref . q5035) (bytevector-s16-native-set! . q5034) (bytevector-s16-native-ref . q5033) (bytevector-length . q5032) (bytevector-ieee-single-ref . q5031) (bytevector-ieee-single-set! . q5030) (bytevector-ieee-single-native-set! . q502f) (bytevector-ieee-single-native-ref . q502e) (bytevector-ieee-double-set! . q502d) (bytevector-ieee-double-ref . q502c) (bytevector-ieee-double-native-set! . q502b) (bytevector-ieee-double-native-ref . q502a) (bytevector-fill! . q5029) (bytevector-copy! . q5028) (bytevector-copy . q5027) (bytevector->uint-list . q5026) (bytevector->u8-list . q5025) (bytevector->sint-list . q5024) (no-nans-violation? . q4c82) (no-infinities-violation? . q4c6d) (make-no-nans-violation . q4c80) (make-no-infinities-violation . q4c6b) (real->flonum . q5023) (flzero? . q5022) (fltruncate . q5021) (fltan . q5020) (flsqrt . q501f) (flsin . q501e) (flround . q501d) (flpositive? . q501c) (flonum? . q501b) (flodd? . q501a) (flnumerator . q5019) (flnegative? . q5018) (flnan? . q5017) (flmod0 . q5016) (flmod . q5015) (flmin . q5014) (flmax . q5013) (fllog . q5012) (flinteger? . q5011) (flinfinite? . q5010) (flfloor . q500f) (flfinite? . q500e) (flexpt . q500d) (flexp . q500c) (fleven? . q500b) (fldiv0-and-mod0 . q500a) (fldiv0 . q5009) (fldiv-and-mod . q5008) (fldiv . q5007) (fldenominator . q5006) (flcos . q5005) (flceiling . q5004) (flatan . q5003) (flasin . q5002) (flacos . q5001) (flabs . q5000) (fl>? . q4fff) (fl>=? . q4ffe) (fl=? . q4ffd) (fl<? . q4ffc) (fl<=? . q4ffb) (fl/ . q4ffa) (fl- . q4ff9) (fl+ . q4ff8) (fl* . q4ff7) (fixnum->flonum . q4ff6) (fxzero? . q4ff5) (fxxor . q4ff4) (fxrotate-bit-field . q4ff3) (fxreverse-bit-field . q4ff2) (fxpositive? . q4ff1) (fxodd? . q4ff0) (fxnot . q4fef) (fxnegative? . q4fee) (fxmod0 . q4fed) (fxmod . q4fec) (fxmin . q4feb) (fxmax . q4fea) (fxlength . q4fe9) (fxior . q4fe8) (fxif . q4fe7) (fxfirst-bit-set . q4fe6) (fxeven? . q4fe5) (fxdiv0-and-mod0 . q4fe4) (fxdiv0 . q4fe3) (fxdiv-and-mod . q4fe2) (fxdiv . q4fe1) (fxcopy-bit-field . q4fe0) (fxcopy-bit . q4fdf) (fxbit-set? . q4fde) (fxbit-field . q4fdd) (fxbit-count . q4fdc) (fxarithmetic-shift-right . q4fdb) (fxarithmetic-shift-left . q4fda) (fxarithmetic-shift . q4fd9) (fxand . q4fd8) (fx>? . q4fd7) (fx>=? . q4fd6) (fx=? . q4fd5) (fx<? . q4fd4) (fx<=? . q4fd3) (fx-/carry . q4fd2) (fx- . q4fd1) (fx+/carry . q4fd0) (fx+ . q4fcf) (fx*/carry . q4fce) (fx* . q4fcd) (greatest-fixnum . q4fcc) (least-fixnum . q4fcb) (fixnum-width . q4fca) (fixnum? . q4fc9) (bitwise-rotate-bit-field . q4fc8) (bitwise-reverse-bit-field . q4fc7) (bitwise-length . q4fc6) (bitwise-if . q4fc5) (bitwise-first-bit-set . q4fc4) (bitwise-copy-bit-field . q4fc3) (bitwise-copy-bit . q4fc2) (bitwise-bit-set? . q4fc1) (bitwise-bit-field . q4fc0) (bitwise-bit-count . q4fbf) (bitwise-xor . q4fbe) (bitwise-ior . q4fbd) (bitwise-and . q4fbc) (bitwise-not . q4fbb) (bitwise-arithmetic-shift-right . q4fba) (bitwise-arithmetic-shift-left . q4fb9) (bitwise-arithmetic-shift . q4fb8) (zero? . q4fb7) (vector? . q4fb6) (vector-set! . q4fb5) (vector-ref . q4fb4) (vector-map . q4fb3) (vector-length . q4fb2) (vector-for-each . q4fb1) (vector-fill! . q4fb0) (vector->list . q4faf) (vector . q4fae) (values . q4fad) (truncate . q4fac) (tan . q4fab) (symbol? . q4faa) (symbol=? . q4fa9) (symbol->string . q4fa8) (substring . q4fa7) (string? . q4fa6) (string>? . q4fa5) (string>=? . q4fa4) (string=? . q4fa3) (string<? . q4fa2) (string<=? . q4fa1) (string-ref . q4fa0) (string-length . q4f9f) (string-for-each . q4f9e) (string-copy . q4f9d) (string-append . q4f9c) (string->symbol . q4f9b) (string->number . q4f9a) (string->list . q4f99) (string . q4f98) (sqrt . q4f97) (sin . q4f96) (round . q4f95) (reverse . q4f94) (real? . q4f93) (real-valued? . q4f92) (real-part . q4f91) (rationalize . q4f90) (rational? . q4f8f) (rational-valued? . q4f8e) (procedure? . q4f8d) (positive? . q4f8c) (pair? . q4f8b) (odd? . q4f8a) (numerator . q4f89) (number? . q4f88) (number->string . q4f87) (null? . q4f86) (not . q4f85) (negative? . q4f84) (nan? . q4f83) (min . q4f82) (max . q4f81) (map . q4f80) (make-vector . q4f7f) (make-string . q4f7e) (make-rectangular . q4f7d) (make-polar . q4f7c) (magnitude . q4f7b) (log . q4f7a) (list? . q4f79) (list-tail . q4f78) (list-ref . q4f77) (list->vector . q4f76) (list->string . q4f75) (list . q4f74) (length . q4f73) (lcm . q4f72) (integer? . q4f71) (integer-valued? . q4f70) (integer->char . q4f6f) (infinite? . q4f6e) (inexact? . q4f6d) (inexact . q4f6c) (imag-part . q4f6b) (gcd . q4f6a) (for-each . q4f69) (floor . q4f68) (finite? . q4f67) (expt . q4f66) (exp . q4f65) (exact? . q4f64) (exact-integer-sqrt . q4f63) (exact . q4f62) (even? . q4f61) (error . q4f60) (eqv? . q4f5f) (equal? . q4f5e) (eq? . q4f5d) (dynamic-wind . q4f5c) (div0-and-mod0 . q4f5b) (mod0 . q4f5a) (div0 . q4f59) (div-and-mod . q4f58) (mod . q4f57) (div . q4f56) (denominator . q4f55) (cos . q4f54) (cons . q4f53) (complex? . q4f52) (char? . q4f51) (char>? . q4f50) (char>=? . q4f4f) (char=? . q4f4e) (char<? . q4f4d) (char<=? . q4f4c) (char->integer . q4f4b) (ceiling . q4f4a) (call-with-values . q4f49) (call/cc . q4f48) (call-with-current-continuation . q4f47) (cddddr . q4f46) (cdddar . q4f45) (cddadr . q4f44) (cddaar . q4f43) (cdaddr . q4f42) (cdadar . q4f41) (cdaadr . q4f40) (cdaaar . q4f3f) (cadddr . q4f3e) (caddar . q4f3d) (cadadr . q4f3c) (cadaar . q4f3b) (caaddr . q4f3a) (caadar . q4f39) (caaadr . q4f38) (caaaar . q4f37) (cdddr . q4f36) (cddar . q4f35) (cdadr . q4f34) (cdaar . q4f33) (caddr . q4f32) (cadar . q4f31) (caadr . q4f30) (caaar . q4f2f) (cddr . q4f2e) (cdar . q4f2d) (cadr . q4f2c) (caar . q4f2b) (cdr . q4f2a) (car . q4f29) (boolean? . q4f28) (boolean=? . q4f27) (atan . q4f26) (assertion-violation . q4f25) (asin . q4f24) (apply . q4f23) (append . q4f22) (angle . q4f21) (acos . q4f20) (abs . q4f1f) (/ . q4f1e) (* . q4f1d) (- . q4f1c) (+ . q4f1b) (>= . q4f1a) (> . q4f19) (= . q4f18) (<= . q4f17) (< . q4f16) (&no-nans . q4f14) (&no-infinities . q4f13) (&i/o-encoding . q4f12) (&i/o-decoding . q4f11) (&i/o-port . q4f10) (&i/o-file-does-not-exist . q4f0f) (&i/o-file-already-exists . q4f0e) (&i/o-file-is-read-only . q4f0d) (&i/o-file-protection . q4f0c) (&i/o-filename . q4f0b) (&i/o-invalid-position . q4f0a) (&i/o-write . q4f09) (&i/o-read . q4f08) (&i/o . q4f07) (&undefined . q4f06) (&syntax . q4f05) (&lexical . q4f04) (&implementation-restriction . q4f03) (&non-continuable . q4f02) (&who . q4f01) (&irritants . q4f00) (&assertion . q4eff) (&violation . q4efe) (&error . q4efd) (&serious . q4efc) (&warning . q4efb) (&message . q4efa) (&condition . q4ef9) (define-condition-type . q4ef8) (define-enumeration . q4ef7) (define-record-type . q4ef6) (parent-rtd . q4ef5) (nongenerative . q4ef4) (opaque . q4ef3) (sealed . q4ef2) (protocol . q4ef1) (parent . q4ef0) (immutable . q4eef) (mutable . q4eee) (fields . q4eed) (error-handling-mode . q4eec) (file-options . q4eeb) (buffer-mode . q4eea) (eol-style . q4ee9) (guard . q4ee8) (unsyntax-splicing . q4ee5) (unsyntax . q4ee4) (unquote-splicing . q4ee3) (unquote . q4ee2) (_ . q4ee1) (else . q4ee0) (=> . q4edf) (... . q4ede) (assert . q4edd) (endianness . q4edc) (do . q4ed9) (cond . q4ed8) (let* . q4ed7) (let . q4ed6) (let*-values . q4ed5) (let-values . q4ed4) (identifier-syntax . q4ed3) (with-syntax . q4ed2) (quasisyntax . q4ed1) (quasiquote . q4ed0) (syntax-rules . q4ecf) (record-constructor-descriptor . q4ecc) (record-type-descriptor . q4ecb) (case . q4eca) (unless . q4ec8) (when . q4ec7) (or . q4ec6) (and . q4ec5) (if . q4ec4) (letrec* . q4ec3) (letrec . q4ec2) (case-lambda . q4ec0) (lambda . q4ebf) (syntax . q4ebe) (syntax-case . q4ebd) (quote . q4ebc) (letrec-syntax . q4eba) (let-syntax . q4eb9) (set! . q4eb8) (begin . q4eb6) (define-syntax . q4eb4) (define . q4eb3)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51a9 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . q2f9b) (quotient . q5099) (null-environment . q2f99) (remainder . q5098) (modulo . q5097) (inexact->exact . q5096) (force . q5095) (exact->inexact . q5094) (make-promise . q5093) (delay . q4edb)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51aa '(rnrs control) '(6) '() '() '() '((do . q4ed9) (unless . q4ec8) (when . q4ec7) (case-lambda . q4ec0)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51ab '(rnrs eval) '(6) '() '() '() '((eval . q2f9f) (environment . q2f97)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51ac '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . q508f) (set-car! . q508e)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51ad '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . q5091) (string-set! . q5090)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51ae '(rnrs programs) '(6) '() '() '() '((exit . q5092) (command-line . q4d8d)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51af '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . q2d03) (identifier? . q2fc1) (generate-temporaries . q2fad) (free-identifier=? . q2faf) (syntax->datum . q2fc5) (datum->syntax . q2fc3) (bound-identifier=? . q2fb1) (syntax-violation . q2fbf) (unsyntax-splicing . q4ee5) (unsyntax . q4ee4) (_ . q4ee1) (... . q4ede) (with-syntax . q4ed2) (quasisyntax . q4ed1) (syntax . q4ebe) (syntax-case . q4ebd)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b0 '(rnrs files) '(6) '() '() '() '((delete-file . q5102) (file-exists? . q5101) (make-i/o-write-error . q4b81) (make-i/o-read-error . q4b6c) (make-i/o-port-error . q4c22) (make-i/o-invalid-position-error . q4b98) (make-i/o-filename-error . q4bb3) (make-i/o-file-protection-error . q4bcc) (make-i/o-file-is-read-only-error . q4be1) (make-i/o-file-does-not-exist-error . q4c0b) (make-i/o-file-already-exists-error . q4bf6) (make-i/o-error . q4b57) (i/o-write-error? . q4b83) (i/o-read-error? . q4b6e) (i/o-port-error? . q4c26) (i/o-invalid-position-error? . q4b9c) (i/o-filename-error? . q4bb7) (i/o-file-protection-error? . q4bce) (i/o-file-is-read-only-error? . q4be3) (i/o-file-does-not-exist-error? . q4c0d) (i/o-file-already-exists-error? . q4bf8) (i/o-error? . q4b59) (i/o-error-position . q4b9e) (i/o-error-port . q4c28) (i/o-error-filename . q4bb9) (&i/o-port . q4f10) (&i/o-file-does-not-exist . q4f0f) (&i/o-file-already-exists . q4f0e) (&i/o-file-is-read-only . q4f0d) (&i/o-file-protection . q4f0c) (&i/o-filename . q4f0b) (&i/o-invalid-position . q4f0a) (&i/o-write . q4f09) (&i/o-read . q4f08) (&i/o . q4f07)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b1 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . q5100) (vector-sort . q50ff) (list-sort . q50fe)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b2 '(rnrs base) '(6) '() '() '() '((zero? . q4fb7) (vector? . q4fb6) (vector-set! . q4fb5) (vector-ref . q4fb4) (vector-map . q4fb3) (vector-length . q4fb2) (vector-for-each . q4fb1) (vector-fill! . q4fb0) (vector->list . q4faf) (vector . q4fae) (values . q4fad) (truncate . q4fac) (tan . q4fab) (symbol? . q4faa) (symbol=? . q4fa9) (symbol->string . q4fa8) (substring . q4fa7) (string? . q4fa6) (string>? . q4fa5) (string>=? . q4fa4) (string=? . q4fa3) (string<? . q4fa2) (string<=? . q4fa1) (string-ref . q4fa0) (string-length . q4f9f) (string-for-each . q4f9e) (string-copy . q4f9d) (string-append . q4f9c) (string->symbol . q4f9b) (string->number . q4f9a) (string->list . q4f99) (string . q4f98) (sqrt . q4f97) (sin . q4f96) (round . q4f95) (reverse . q4f94) (real? . q4f93) (real-valued? . q4f92) (real-part . q4f91) (rationalize . q4f90) (rational? . q4f8f) (rational-valued? . q4f8e) (procedure? . q4f8d) (positive? . q4f8c) (pair? . q4f8b) (odd? . q4f8a) (numerator . q4f89) (number? . q4f88) (number->string . q4f87) (null? . q4f86) (not . q4f85) (negative? . q4f84) (nan? . q4f83) (min . q4f82) (max . q4f81) (map . q4f80) (make-vector . q4f7f) (make-string . q4f7e) (make-rectangular . q4f7d) (make-polar . q4f7c) (magnitude . q4f7b) (log . q4f7a) (list? . q4f79) (list-tail . q4f78) (list-ref . q4f77) (list->vector . q4f76) (list->string . q4f75) (list . q4f74) (length . q4f73) (lcm . q4f72) (integer? . q4f71) (integer-valued? . q4f70) (integer->char . q4f6f) (infinite? . q4f6e) (inexact? . q4f6d) (inexact . q4f6c) (imag-part . q4f6b) (gcd . q4f6a) (for-each . q4f69) (floor . q4f68) (finite? . q4f67) (expt . q4f66) (exp . q4f65) (exact? . q4f64) (exact-integer-sqrt . q4f63) (exact . q4f62) (even? . q4f61) (error . q4f60) (eqv? . q4f5f) (equal? . q4f5e) (eq? . q4f5d) (dynamic-wind . q4f5c) (div0-and-mod0 . q4f5b) (mod0 . q4f5a) (div0 . q4f59) (div-and-mod . q4f58) (mod . q4f57) (div . q4f56) (denominator . q4f55) (cos . q4f54) (cons . q4f53) (complex? . q4f52) (char? . q4f51) (char>? . q4f50) (char>=? . q4f4f) (char=? . q4f4e) (char<? . q4f4d) (char<=? . q4f4c) (char->integer . q4f4b) (ceiling . q4f4a) (call-with-values . q4f49) (call/cc . q4f48) (call-with-current-continuation . q4f47) (cddddr . q4f46) (cdddar . q4f45) (cddadr . q4f44) (cddaar . q4f43) (cdaddr . q4f42) (cdadar . q4f41) (cdaadr . q4f40) (cdaaar . q4f3f) (cadddr . q4f3e) (caddar . q4f3d) (cadadr . q4f3c) (cadaar . q4f3b) (caaddr . q4f3a) (caadar . q4f39) (caaadr . q4f38) (caaaar . q4f37) (cdddr . q4f36) (cddar . q4f35) (cdadr . q4f34) (cdaar . q4f33) (caddr . q4f32) (cadar . q4f31) (caadr . q4f30) (caaar . q4f2f) (cddr . q4f2e) (cdar . q4f2d) (cadr . q4f2c) (caar . q4f2b) (cdr . q4f2a) (car . q4f29) (boolean? . q4f28) (boolean=? . q4f27) (atan . q4f26) (assertion-violation . q4f25) (asin . q4f24) (apply . q4f23) (append . q4f22) (angle . q4f21) (acos . q4f20) (abs . q4f1f) (/ . q4f1e) (* . q4f1d) (- . q4f1c) (+ . q4f1b) (>= . q4f1a) (> . q4f19) (= . q4f18) (<= . q4f17) (< . q4f16) (unquote-splicing . q4ee3) (unquote . q4ee2) (_ . q4ee1) (else . q4ee0) (=> . q4edf) (... . q4ede) (assert . q4edd) (cond . q4ed8) (let* . q4ed7) (let . q4ed6) (let*-values . q4ed5) (let-values . q4ed4) (identifier-syntax . q4ed3) (quasiquote . q4ed0) (syntax-rules . q4ecf) (case . q4eca) (or . q4ec6) (and . q4ec5) (if . q4ec4) (letrec* . q4ec3) (letrec . q4ec2) (lambda . q4ebf) (quote . q4ebc) (letrec-syntax . q4eba) (let-syntax . q4eb9) (set! . q4eb8) (begin . q4eb6) (define-syntax . q4eb4) (define . q4eb3)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b3 '(rnrs lists) '(6) '() '() '() '((remove . q508d) (remv . q508c) (remp . q508b) (remq . q508a) (partition . q5089) (memv . q5088) (memq . q5087) (memp . q5086) (member . q5085) (exists . q5084) (for-all . q5083) (fold-right . q5082) (fold-left . q5081) (find . q5080) (filter . q507f) (cons* . q507e) (assv . q507d) (assq . q507c) (assp . q507b) (assoc . q507a)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b4 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . q50e8) (call-with-input-file . q50e7) (write-char . q50e6) (write . q50e5) (with-output-to-file . q50e4) (with-input-from-file . q50e3) (read-char . q50e2) (read . q50e1) (peek-char . q50e0) (open-output-file . q50df) (open-input-file . q50de) (newline . q50dd) (display . q50dc) (close-output-port . q50db) (close-input-port . q50da) (eof-object? . q50d9) (eof-object . q50d8) (current-error-port . q50d7) (current-output-port . q50d6) (current-input-port . q50d5) (output-port? . q50d4) (input-port? . q50d3) (make-i/o-write-error . q4b81) (make-i/o-read-error . q4b6c) (make-i/o-port-error . q4c22) (make-i/o-invalid-position-error . q4b98) (make-i/o-filename-error . q4bb3) (make-i/o-file-protection-error . q4bcc) (make-i/o-file-is-read-only-error . q4be1) (make-i/o-file-does-not-exist-error . q4c0b) (make-i/o-file-already-exists-error . q4bf6) (make-i/o-error . q4b57) (i/o-write-error? . q4b83) (i/o-read-error? . q4b6e) (i/o-port-error? . q4c26) (i/o-invalid-position-error? . q4b9c) (i/o-filename-error? . q4bb7) (i/o-file-protection-error? . q4bce) (i/o-file-is-read-only-error? . q4be3) (i/o-file-does-not-exist-error? . q4c0d) (i/o-file-already-exists-error? . q4bf8) (i/o-error? . q4b59) (i/o-error-position . q4b9e) (i/o-error-port . q4c28) (i/o-error-filename . q4bb9) (&i/o-port . q4f10) (&i/o-file-does-not-exist . q4f0f) (&i/o-file-already-exists . q4f0e) (&i/o-file-is-read-only . q4f0d) (&i/o-file-protection . q4f0c) (&i/o-filename . q4f0b) (&i/o-invalid-position . q4f0a) (&i/o-write . q4f09) (&i/o-read . q4f08) (&i/o . q4f07)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b5 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . q50a9) (utf32->string . q505e) (utf16->string . q505d) (utf8->string . q505c) (uint-list->bytevector . q505b) (u8-list->bytevector . q505a) (string->utf8 . q5059) (string->utf32 . q5058) (string->utf16 . q5057) (sint-list->bytevector . q5056) (native-endianness . q5055) (bytevector? . q5054) (bytevector=? . q5053) (bytevector-uint-set! . q5052) (bytevector-uint-ref . q5051) (bytevector-u8-set! . q5050) (bytevector-u8-ref . q504f) (bytevector-u64-set! . q504e) (bytevector-u64-ref . q504d) (bytevector-u64-native-set! . q504c) (bytevector-u64-native-ref . q504b) (bytevector-u32-set! . q504a) (bytevector-u32-ref . q5049) (bytevector-u32-native-set! . q5048) (bytevector-u32-native-ref . q5047) (bytevector-u16-set! . q5046) (bytevector-u16-ref . q5045) (bytevector-u16-native-set! . q5044) (bytevector-u16-native-ref . q5043) (bytevector-sint-set! . q5042) (bytevector-sint-ref . q5041) (bytevector-s8-set! . q5040) (bytevector-s8-ref . q503f) (bytevector-s64-set! . q503e) (bytevector-s64-ref . q503d) (bytevector-s64-native-set! . q503c) (bytevector-s64-native-ref . q503b) (bytevector-s32-set! . q503a) (bytevector-s32-ref . q5039) (bytevector-s32-native-set! . q5038) (bytevector-s32-native-ref . q5037) (bytevector-s16-set! . q5036) (bytevector-s16-ref . q5035) (bytevector-s16-native-set! . q5034) (bytevector-s16-native-ref . q5033) (bytevector-length . q5032) (bytevector-ieee-single-ref . q5031) (bytevector-ieee-single-set! . q5030) (bytevector-ieee-single-native-set! . q502f) (bytevector-ieee-single-native-ref . q502e) (bytevector-ieee-double-set! . q502d) (bytevector-ieee-double-ref . q502c) (bytevector-ieee-double-native-set! . q502b) (bytevector-ieee-double-native-ref . q502a) (bytevector-fill! . q5029) (bytevector-copy! . q5028) (bytevector-copy . q5027) (bytevector->uint-list . q5026) (bytevector->u8-list . q5025) (bytevector->sint-list . q5024) (endianness . q4edc)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b6 '(rnrs unicode) '(6) '() '() '() '((string-upcase . q5130) (string-titlecase . q512f) (string-normalize-nfkd . q512e) (string-normalize-nfkc . q512d) (string-normalize-nfd . q512c) (string-normalize-nfc . q512b) (string-foldcase . q512a) (string-downcase . q5129) (string-ci>? . q5128) (string-ci>=? . q5127) (string-ci=? . q5126) (string-ci<? . q5125) (string-ci<=? . q5124) (char-whitespace? . q5123) (char-upper-case? . q5122) (char-title-case? . q5121) (char-numeric? . q5120) (char-lower-case? . q511f) (char-general-category . q511e) (char-upcase . q511d) (char-titlecase . q511c) (char-foldcase . q511b) (char-downcase . q511a) (char-ci>? . q5119) (char-ci>=? . q5118) (char-ci=? . q5117) (char-ci<? . q5116) (char-ci<=? . q5115) (char-alphabetic? . q5114)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b7 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . q5073) (raise-continuable . q5072) (raise . q5071) (guard . q4ee8) (else . q4ee0) (=> . q4edf)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b8 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . q4fc8) (bitwise-reverse-bit-field . q4fc7) (bitwise-length . q4fc6) (bitwise-if . q4fc5) (bitwise-first-bit-set . q4fc4) (bitwise-copy-bit-field . q4fc3) (bitwise-copy-bit . q4fc2) (bitwise-bit-set? . q4fc1) (bitwise-bit-field . q4fc0) (bitwise-bit-count . q4fbf) (bitwise-xor . q4fbe) (bitwise-ior . q4fbd) (bitwise-and . q4fbc) (bitwise-not . q4fbb) (bitwise-arithmetic-shift-right . q4fba) (bitwise-arithmetic-shift-left . q4fb9) (bitwise-arithmetic-shift . q4fb8)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51b9 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . q4ff5) (fxxor . q4ff4) (fxrotate-bit-field . q4ff3) (fxreverse-bit-field . q4ff2) (fxpositive? . q4ff1) (fxodd? . q4ff0) (fxnot . q4fef) (fxnegative? . q4fee) (fxmod0 . q4fed) (fxmod . q4fec) (fxmin . q4feb) (fxmax . q4fea) (fxlength . q4fe9) (fxior . q4fe8) (fxif . q4fe7) (fxfirst-bit-set . q4fe6) (fxeven? . q4fe5) (fxdiv0-and-mod0 . q4fe4) (fxdiv0 . q4fe3) (fxdiv-and-mod . q4fe2) (fxdiv . q4fe1) (fxcopy-bit-field . q4fe0) (fxcopy-bit . q4fdf) (fxbit-set? . q4fde) (fxbit-field . q4fdd) (fxbit-count . q4fdc) (fxarithmetic-shift-right . q4fdb) (fxarithmetic-shift-left . q4fda) (fxarithmetic-shift . q4fd9) (fxand . q4fd8) (fx>? . q4fd7) (fx>=? . q4fd6) (fx=? . q4fd5) (fx<? . q4fd4) (fx<=? . q4fd3) (fx-/carry . q4fd2) (fx- . q4fd1) (fx+/carry . q4fd0) (fx+ . q4fcf) (fx*/carry . q4fce) (fx* . q4fcd) (greatest-fixnum . q4fcc) (least-fixnum . q4fcb) (fixnum-width . q4fca) (fixnum? . q4fc9)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51ba '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . q4c82) (no-infinities-violation? . q4c6d) (make-no-nans-violation . q4c80) (make-no-infinities-violation . q4c6b) (real->flonum . q5023) (flzero? . q5022) (fltruncate . q5021) (fltan . q5020) (flsqrt . q501f) (flsin . q501e) (flround . q501d) (flpositive? . q501c) (flonum? . q501b) (flodd? . q501a) (flnumerator . q5019) (flnegative? . q5018) (flnan? . q5017) (flmod0 . q5016) (flmod . q5015) (flmin . q5014) (flmax . q5013) (fllog . q5012) (flinteger? . q5011) (flinfinite? . q5010) (flfloor . q500f) (flfinite? . q500e) (flexpt . q500d) (flexp . q500c) (fleven? . q500b) (fldiv0-and-mod0 . q500a) (fldiv0 . q5009) (fldiv-and-mod . q5008) (fldiv . q5007) (fldenominator . q5006) (flcos . q5005) (flceiling . q5004) (flatan . q5003) (flasin . q5002) (flacos . q5001) (flabs . q5000) (fl>? . q4fff) (fl>=? . q4ffe) (fl=? . q4ffd) (fl<? . q4ffc) (fl<=? . q4ffb) (fl/ . q4ffa) (fl- . q4ff9) (fl+ . q4ff8) (fl* . q4ff7) (fixnum->flonum . q4ff6) (&no-nans . q4f14) (&no-infinities . q4f13)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51bb '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . q50fd) (string-ci-hash . q50fc) (string-hash . q50fb) (equal-hash . q50fa) (hashtable-equivalence-function . q50f9) (make-hashtable . q50f8) (hashtable-hash-function . q50f7) (make-eqv-hashtable . q50f6) (make-eq-hashtable . q50f5) (hashtable? . q50f4) (hashtable-update! . q50f3) (hashtable-size . q50f2) (hashtable-set! . q50f1) (hashtable-ref . q50f0) (hashtable-mutable? . q50ef) (hashtable-keys . q50ee) (hashtable-entries . q50ed) (hashtable-delete! . q50ec) (hashtable-copy . q50eb) (hashtable-contains? . q50ea) (hashtable-clear! . q50e9)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51bc '(rnrs io ports) '(6) '() '() '() '((eof-object? . q50d9) (eof-object . q50d8) (current-error-port . q50d7) (current-output-port . q50d6) (current-input-port . q50d5) (output-port? . q50d4) (input-port? . q50d3) (utf-8-codec . q50d2) (utf-16-codec . q50d1) (transcoder-error-handling-mode . q50d0) (transcoder-eol-style . q50cf) (transcoder-codec . q50ce) (transcoded-port . q50cd) (textual-port? . q50cc) (string->bytevector . q50cb) (standard-output-port . q50ca) (standard-input-port . q50c9) (standard-error-port . q50c8) (set-port-position! . q50c7) (put-u8 . q50c6) (put-string . q50c5) (put-datum . q50c4) (put-char . q50c3) (put-bytevector . q50c2) (port? . q50c1) (port-transcoder . q50c0) (port-position . q50bf) (port-has-set-port-position!? . q50be) (port-has-port-position? . q50bd) (port-eof? . q50bc) (output-port-buffer-mode . q50bb) (open-string-output-port . q50ba) (open-string-input-port . q50b9) (open-file-output-port . q50b8) (open-file-input/output-port . q50b7) (open-file-input-port . q50b6) (open-bytevector-output-port . q50b5) (open-bytevector-input-port . q50b4) (native-transcoder . q50b3) (native-eol-style . q50b2) (make-transcoder . q50b1) (latin-1-codec . q50b0) (make-i/o-write-error . q4b81) (make-i/o-read-error . q4b6c) (make-i/o-port-error . q4c22) (make-i/o-invalid-position-error . q4b98) (make-i/o-filename-error . q4bb3) (make-i/o-file-protection-error . q4bcc) (make-i/o-file-is-read-only-error . q4be1) (make-i/o-file-does-not-exist-error . q4c0b) (make-i/o-file-already-exists-error . q4bf6) (make-i/o-error . q4b57) (make-i/o-encoding-error . q4c52) (make-i/o-decoding-error . q4c3b) (make-custom-textual-output-port . q50af) (make-custom-textual-input/output-port . q50ae) (make-custom-textual-input-port . q50ad) (make-custom-binary-output-port . q50ac) (make-custom-binary-input/output-port . q50ab) (make-custom-binary-input-port . q50aa) (lookahead-u8 . q50a8) (lookahead-char . q50a7) (i/o-write-error? . q4b83) (i/o-read-error? . q4b6e) (i/o-port-error? . q4c26) (i/o-invalid-position-error? . q4b9c) (i/o-filename-error? . q4bb7) (i/o-file-protection-error? . q4bce) (i/o-file-is-read-only-error? . q4be3) (i/o-file-does-not-exist-error? . q4c0d) (i/o-file-already-exists-error? . q4bf8) (i/o-error? . q4b59) (i/o-error-position . q4b9e) (i/o-error-port . q4c28) (i/o-error-filename . q4bb9) (i/o-encoding-error? . q4c56) (i/o-encoding-error-char . q4c58) (i/o-decoding-error? . q4c3d) (get-u8 . q50a6) (get-string-n! . q50a5) (get-string-n . q50a4) (get-string-all . q50a3) (get-line . q50a2) (get-datum . q50a1) (get-char . q50a0) (get-bytevector-some . q509f) (get-bytevector-n! . q509e) (get-bytevector-n . q509d) (get-bytevector-all . q509c) (flush-output-port . q509b) (close-port . q509a) (call-with-string-output-port . q5079) (call-with-port . q5078) (call-with-bytevector-output-port . q5077) (bytevector->string . q5076) (buffer-mode? . q5075) (binary-port? . q5074) (&i/o-encoding . q4f12) (&i/o-decoding . q4f11) (&i/o-port . q4f10) (&i/o-file-does-not-exist . q4f0f) (&i/o-file-already-exists . q4f0e) (&i/o-file-is-read-only . q4f0d) (&i/o-file-protection . q4f0c) (&i/o-filename . q4f0b) (&i/o-invalid-position . q4f0a) (&i/o-write . q4f09) (&i/o-read . q4f08) (&i/o . q4f07) (error-handling-mode . q4eec) (file-options . q4eeb) (buffer-mode . q4eea) (eol-style . q4ee9)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51bd '(rnrs enums) '(6) '() '() '() '((make-enumeration . q5070) (enum-set=? . q506f) (enum-set-universe . q506e) (enum-set-union . q506d) (enum-set-subset? . q506c) (enum-set-projection . q506b) (enum-set-member? . q506a) (enum-set-intersection . q5069) (enum-set-indexer . q5068) (enum-set-difference . q5067) (enum-set-constructor . q5066) (enum-set-complement . q5065) (enum-set->list . q5064) (define-enumeration . q4ef7)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51be '(rnrs conditions) '(6) '() '() '() '((who-condition? . q4acd) (warning? . q4a45) (violation? . q4a84) (undefined-violation? . q4b44) (syntax-violation? . q4b2b) (syntax-violation-subform . q4b2f) (syntax-violation-form . q4b2d) (syntax-violation . q2fbf) (simple-conditions . q5063) (serious-condition? . q4a5a) (non-continuable-violation? . q4ae4) (message-condition? . q4a2e) (make-who-condition . q4ac9) (make-warning . q4a43) (make-violation . q4a82) (make-undefined-violation . q4b42) (make-syntax-violation . q4b25) (make-serious-condition . q4a58) (make-non-continuable-violation . q4ae2) (make-message-condition . q4a2a) (make-lexical-violation . q4b0c) (make-irritants-condition . q4aae) (make-implementation-restriction-violation . q4af7) (make-error . q4a6d) (make-assertion-violation . q4a97) (lexical-violation? . q4b0e) (irritants-condition? . q4ab2) (implementation-restriction-violation? . q4af9) (error? . q4a6f) (condition-who . q4acf) (condition-predicate . q5062) (condition-message . q4a30) (condition-irritants . q4ab4) (condition-accessor . q5061) (condition . q5060) (assertion-violation? . q4a99) (condition? . q505f) (&undefined . q4f06) (&syntax . q4f05) (&lexical . q4f04) (&implementation-restriction . q4f03) (&non-continuable . q4f02) (&who . q4f01) (&irritants . q4f00) (&assertion . q4eff) (&violation . q4efe) (&error . q4efd) (&serious . q4efc) (&warning . q4efb) (&message . q4efa) (&condition . q4ef9) (define-condition-type . q4ef8)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51bf '(rnrs records inspection) '(6) '() '() '() '((record? . q510c) (record-type-uid . q510b) (record-type-sealed? . q510a) (record-type-parent . q5109) (record-type-opaque? . q5108) (record-type-name . q5107) (record-type-generative? . q5106) (record-type-field-names . q5105) (record-rtd . q5104) (record-field-mutable? . q5103)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51c0 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . q5113) (record-predicate . q5112) (record-mutator . q5111) (record-constructor . q5110) (record-accessor . q510f) (make-record-type-descriptor . q510e) (make-record-constructor-descriptor . q510d)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51c1 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . q4ef6) (parent-rtd . q4ef5) (nongenerative . q4ef4) (opaque . q4ef3) (sealed . q4ef2) (protocol . q4ef1) (parent . q4ef0) (immutable . q4eef) (mutable . q4eee) (fields . q4eed) (record-constructor-descriptor . q4ecc) (record-type-descriptor . q4ecb)) '() values values '#f '#f '#t '#f) (q2aee@q298d@install-library 'q51c2 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . q4c86) (&no-nans-rtd . q4c84) (&no-infinities-rcd . q4c71) (&no-infinities-rtd . q4c6f) (&i/o-encoding-rcd . q4c5c) (&i/o-encoding-rtd . q4c5a) (&i/o-decoding-rcd . q4c41) (&i/o-decoding-rtd . q4c3f) (&i/o-port-rcd . q4c2c) (&i/o-port-rtd . q4c2a) (&i/o-file-does-not-exist-rcd . q4c11) (&i/o-file-does-not-exist-rtd . q4c0f) (&i/o-file-already-exists-rcd . q4bfc) (&i/o-file-already-exists-rtd . q4bfa) (&i/o-file-is-read-only-rcd . q4be7) (&i/o-file-is-read-only-rtd . q4be5) (&i/o-file-protection-rcd . q4bd2) (&i/o-file-protection-rtd . q4bd0) (&i/o-filename-rcd . q4bbd) (&i/o-filename-rtd . q4bbb) (&i/o-invalid-position-rcd . q4ba2) (&i/o-invalid-position-rtd . q4ba0) (&i/o-write-rcd . q4b87) (&i/o-write-rtd . q4b85) (&i/o-read-rcd . q4b72) (&i/o-read-rtd . q4b70) (&i/o-rcd . q4b5d) (&i/o-rtd . q4b5b) (&undefined-rcd . q4b48) (&undefined-rtd . q4b46) (&syntax-rcd . q4b33) (&syntax-rtd . q4b31) (&lexical-rcd . q4b12) (&lexical-rtd . q4b10) (&implementation-restriction-rcd . q4afd) (&implementation-restriction-rtd . q4afb) (&non-continuable-rcd . q4ae8) (&non-continuable-rtd . q4ae6) (&who-rcd . q4ad3) (&who-rtd . q4ad1) (&irritants-rcd . q4ab8) (&irritants-rtd . q4ab6) (&assertion-rcd . q4a9d) (&assertion-rtd . q4a9b) (&violation-rcd . q4a88) (&violation-rtd . q4a86) (&error-rcd . q4a73) (&error-rtd . q4a71) (&serious-rcd . q4a5e) (&serious-rtd . q4a5c) (&warning-rcd . q4a49) (&warning-rtd . q4a47) (&message-rcd . q4a34) (&message-rtd . q4a32) (&condition-rcd . q49d5) (&condition-rtd . q49d3) (syntax-error . q2fbb) (syntax-dispatch . q2ed6) (pretty-print . q51a2) (eval-core . q51a1) (set-symbol-value! . q51a0) (symbol-value . q519f) (gensym . q519e) (void . q519d) (load . q4d93) (interaction-environment . q2fcb) (char-ready? . q519c) (regexp? . q519b) (read-line . q519a) (ungensym . q5199) (alist->eq-hash-table . q5198) (assoc-ref . q5197) (print . q5196) (format . q5195) (host-os . q5194) (library-path . q296c) (standard-library-path . q5193) (file-newer? . q5192) (stat-mtime . q5191) (write-to-file . q5190) (file->list . q518f) (file->string . q518e) (digit->integer . q518d) (call-with-string-input-port . q518c) (call-with-string-io . q518b) (string-split . q518a) (bytevector-for-each . q5189) (string->regexp . q5188) (rxmatch . q5187) (regexp-replace-all . q5186) (hashtable-for-each . q5185) (call-process . q5184) (local-tz-offset . q5183) (microseconds . q5182) (directory-list . q5181) (set-current-directory! . q5180) (expand-path . q517f) (current-directory . q517e) (%spawn . q517d) (%waitpid . q517c) (%ffi-supported? . q517b) (%ffi-pointer-ref . q517a) (%ffi-pointer->string . q5179) (%ffi-call->string-or-zero . q5178) (%ffi-call->double . q5177) (%ffi-call->void* . q5176) (%ffi-call->void . q5175) (%ffi-call->int . q5174) (%ffi-lookup . q5173) (%ffi-open . q5172) (%fork . q5171) (%pipe . q5170) (p . q516f) (open-output-string . q516e) (get-output-string . q516d) (file-stat-ctime . q516c) (file-stat-atime . q516b) (file-stat-mtime . q516a) (file-size-in-bytes . q5169) (file-writable? . q5168) (file-executable? . q5167) (file-readable? . q5166) (file-regular? . q5165) (file-symbolic-link? . q5164) (file-directory? . q5163) (create-symbolic-link . q5162) (rename-file . q5161) (delete-directory . q5160) (create-directory . q515f) (get-environment-variables . q515e) (get-environment-variable . q515d) (get-timeofday . q515c) (get-command-line . q515b) (sys-display . q515a) (whereis . q5159) (register . q5158) (vm-join! . q5157) (vm-set-value! . q5156) (vm? . q5155) (main-vm? . q5154) (vm-eval . q5153) (vm-self . q5152) (vm-start! . q5151) (make-vm . q5150) (mutex-try-lock! . q514f) (mutex-unlock! . q514e) (mutex-lock! . q514d) (mutex? . q514c) (make-mutex . q514b) (condition-variable-notify-all! . q514a) (condition-variable-notify! . q5149) (condition-variable-wait! . q5148) (make-condition-variable . q5147) (mosh-executable-path . q5146) (make-file-options . q5145) (source-info . q5144) (make-compiler-instruction . q5143) (make-instruction . q5142) (set-source-info! . q5141) (bignum? . q5140) (fast-equal? . q513f) (fasl-read . q513e) (fasl-write . q513d) (time-usage . q513c) (os-constant . q513b) (make-parameter . q279f) (socket-port . q513a) (socket-shutdown . q5139) (socket-close . q5138) (socket-send . q5137) (socket-recv! . q5136) (socket-recv . q5135) (make-server-socket . q5134) (make-client-socket . q5133) (socket-accept . q5132) (socket? . q5131) (string-upcase . q5130) (string-titlecase . q512f) (string-normalize-nfkd . q512e) (string-normalize-nfkc . q512d) (string-normalize-nfd . q512c) (string-normalize-nfc . q512b) (string-foldcase . q512a) (string-downcase . q5129) (string-ci>? . q5128) (string-ci>=? . q5127) (string-ci=? . q5126) (string-ci<? . q5125) (string-ci<=? . q5124) (char-whitespace? . q5123) (char-upper-case? . q5122) (char-title-case? . q5121) (char-numeric? . q5120) (char-lower-case? . q511f) (char-general-category . q511e) (char-upcase . q511d) (char-titlecase . q511c) (char-foldcase . q511b) (char-downcase . q511a) (char-ci>? . q5119) (char-ci>=? . q5118) (char-ci=? . q5117) (char-ci<? . q5116) (char-ci<=? . q5115) (char-alphabetic? . q5114) (make-variable-transformer . q2d03) (identifier? . q2fc1) (generate-temporaries . q2fad) (free-identifier=? . q2faf) (syntax->datum . q2fc5) (datum->syntax . q2fc3) (bound-identifier=? . q2fb1) (record-type-descriptor? . q5113) (record-predicate . q5112) (record-mutator . q5111) (record-constructor . q5110) (record-accessor . q510f) (make-record-type-descriptor . q510e) (make-record-constructor-descriptor . q510d) (record? . q510c) (record-type-uid . q510b) (record-type-sealed? . q510a) (record-type-parent . q5109) (record-type-opaque? . q5108) (record-type-name . q5107) (record-type-generative? . q5106) (record-type-field-names . q5105) (record-rtd . q5104) (record-field-mutable? . q5103) (delete-file . q5102) (file-exists? . q5101) (vector-sort! . q5100) (vector-sort . q50ff) (list-sort . q50fe) (symbol-hash . q50fd) (string-ci-hash . q50fc) (string-hash . q50fb) (equal-hash . q50fa) (hashtable-equivalence-function . q50f9) (make-hashtable . q50f8) (hashtable-hash-function . q50f7) (make-eqv-hashtable . q50f6) (make-eq-hashtable . q50f5) (hashtable? . q50f4) (hashtable-update! . q50f3) (hashtable-size . q50f2) (hashtable-set! . q50f1) (hashtable-ref . q50f0) (hashtable-mutable? . q50ef) (hashtable-keys . q50ee) (hashtable-entries . q50ed) (hashtable-delete! . q50ec) (hashtable-copy . q50eb) (hashtable-contains? . q50ea) (hashtable-clear! . q50e9) (call-with-output-file . q50e8) (call-with-input-file . q50e7) (write-char . q50e6) (write . q50e5) (with-output-to-file . q50e4) (with-input-from-file . q50e3) (read-char . q50e2) (read . q50e1) (peek-char . q50e0) (open-output-file . q50df) (open-input-file . q50de) (newline . q50dd) (display . q50dc) (close-output-port . q50db) (close-input-port . q50da) (eof-object? . q50d9) (eof-object . q50d8) (current-error-port . q50d7) (current-output-port . q50d6) (current-input-port . q50d5) (output-port? . q50d4) (input-port? . q50d3) (utf-8-codec . q50d2) (utf-16-codec . q50d1) (transcoder-error-handling-mode . q50d0) (transcoder-eol-style . q50cf) (transcoder-codec . q50ce) (transcoded-port . q50cd) (textual-port? . q50cc) (string->bytevector . q50cb) (standard-output-port . q50ca) (standard-input-port . q50c9) (standard-error-port . q50c8) (set-port-position! . q50c7) (put-u8 . q50c6) (put-string . q50c5) (put-datum . q50c4) (put-char . q50c3) (put-bytevector . q50c2) (port? . q50c1) (port-transcoder . q50c0) (port-position . q50bf) (port-has-set-port-position!? . q50be) (port-has-port-position? . q50bd) (port-eof? . q50bc) (output-port-buffer-mode . q50bb) (open-string-output-port . q50ba) (open-string-input-port . q50b9) (open-file-output-port . q50b8) (open-file-input/output-port . q50b7) (open-file-input-port . q50b6) (open-bytevector-output-port . q50b5) (open-bytevector-input-port . q50b4) (native-transcoder . q50b3) (native-eol-style . q50b2) (make-transcoder . q50b1) (latin-1-codec . q50b0) (make-i/o-write-error . q4b81) (make-i/o-read-error . q4b6c) (make-i/o-port-error . q4c22) (make-i/o-invalid-position-error . q4b98) (make-i/o-filename-error . q4bb3) (make-i/o-file-protection-error . q4bcc) (make-i/o-file-is-read-only-error . q4be1) (make-i/o-file-does-not-exist-error . q4c0b) (make-i/o-file-already-exists-error . q4bf6) (make-i/o-error . q4b57) (make-i/o-encoding-error . q4c52) (make-i/o-decoding-error . q4c3b) (make-custom-textual-output-port . q50af) (make-custom-textual-input/output-port . q50ae) (make-custom-textual-input-port . q50ad) (make-custom-binary-output-port . q50ac) (make-custom-binary-input/output-port . q50ab) (make-custom-binary-input-port . q50aa) (make-bytevector . q50a9) (lookahead-u8 . q50a8) (lookahead-char . q50a7) (i/o-write-error? . q4b83) (i/o-read-error? . q4b6e) (i/o-port-error? . q4c26) (i/o-invalid-position-error? . q4b9c) (i/o-filename-error? . q4bb7) (i/o-file-protection-error? . q4bce) (i/o-file-is-read-only-error? . q4be3) (i/o-file-does-not-exist-error? . q4c0d) (i/o-file-already-exists-error? . q4bf8) (i/o-error? . q4b59) (i/o-error-position . q4b9e) (i/o-error-port . q4c28) (i/o-error-filename . q4bb9) (i/o-encoding-error? . q4c56) (i/o-encoding-error-char . q4c58) (i/o-decoding-error? . q4c3d) (get-u8 . q50a6) (get-string-n! . q50a5) (get-string-n . q50a4) (get-string-all . q50a3) (get-line . q50a2) (get-datum . q50a1) (get-char . q50a0) (get-bytevector-some . q509f) (get-bytevector-n! . q509e) (get-bytevector-n . q509d) (get-bytevector-all . q509c) (flush-output-port . q509b) (close-port . q509a) (scheme-report-environment . q2f9b) (quotient . q5099) (null-environment . q2f99) (remainder . q5098) (modulo . q5097) (inexact->exact . q5096) (force . q5095) (exact->inexact . q5094) (make-promise . q5093) (exit . q5092) (command-line . q4d8d) (string-fill! . q5091) (string-set! . q5090) (set-cdr! . q508f) (set-car! . q508e) (remove . q508d) (remv . q508c) (remp . q508b) (remq . q508a) (partition . q5089) (memv . q5088) (memq . q5087) (memp . q5086) (member . q5085) (exists . q5084) (for-all . q5083) (fold-right . q5082) (fold-left . q5081) (find . q5080) (filter . q507f) (cons* . q507e) (assv . q507d) (assq . q507c) (assp . q507b) (assoc . q507a) (call-with-string-output-port . q5079) (call-with-port . q5078) (call-with-bytevector-output-port . q5077) (bytevector->string . q5076) (buffer-mode? . q5075) (binary-port? . q5074) (with-exception-handler . q5073) (raise-continuable . q5072) (raise . q5071) (eval . q2f9f) (environment . q2f97) (make-enumeration . q5070) (enum-set=? . q506f) (enum-set-universe . q506e) (enum-set-union . q506d) (enum-set-subset? . q506c) (enum-set-projection . q506b) (enum-set-member? . q506a) (enum-set-intersection . q5069) (enum-set-indexer . q5068) (enum-set-difference . q5067) (enum-set-constructor . q5066) (enum-set-complement . q5065) (enum-set->list . q5064) (who-condition? . q4acd) (warning? . q4a45) (violation? . q4a84) (undefined-violation? . q4b44) (syntax-violation? . q4b2b) (syntax-violation-subform . q4b2f) (syntax-violation-form . q4b2d) (syntax-violation . q2fbf) (simple-conditions . q5063) (serious-condition? . q4a5a) (non-continuable-violation? . q4ae4) (message-condition? . q4a2e) (make-who-condition . q4ac9) (make-warning . q4a43) (make-violation . q4a82) (make-undefined-violation . q4b42) (make-syntax-violation . q4b25) (make-serious-condition . q4a58) (make-non-continuable-violation . q4ae2) (make-message-condition . q4a2a) (make-lexical-violation . q4b0c) (make-irritants-condition . q4aae) (make-implementation-restriction-violation . q4af7) (make-error . q4a6d) (make-assertion-violation . q4a97) (lexical-violation? . q4b0e) (irritants-condition? . q4ab2) (implementation-restriction-violation? . q4af9) (error? . q4a6f) (condition-who . q4acf) (condition-predicate . q5062) (condition-message . q4a30) (condition-irritants . q4ab4) (condition-accessor . q5061) (condition . q5060) (assertion-violation? . q4a99) (condition? . q505f) (utf32->string . q505e) (utf16->string . q505d) (utf8->string . q505c) (uint-list->bytevector . q505b) (u8-list->bytevector . q505a) (string->utf8 . q5059) (string->utf32 . q5058) (string->utf16 . q5057) (sint-list->bytevector . q5056) (native-endianness . q5055) (bytevector? . q5054) (bytevector=? . q5053) (bytevector-uint-set! . q5052) (bytevector-uint-ref . q5051) (bytevector-u8-set! . q5050) (bytevector-u8-ref . q504f) (bytevector-u64-set! . q504e) (bytevector-u64-ref . q504d) (bytevector-u64-native-set! . q504c) (bytevector-u64-native-ref . q504b) (bytevector-u32-set! . q504a) (bytevector-u32-ref . q5049) (bytevector-u32-native-set! . q5048) (bytevector-u32-native-ref . q5047) (bytevector-u16-set! . q5046) (bytevector-u16-ref . q5045) (bytevector-u16-native-set! . q5044) (bytevector-u16-native-ref . q5043) (bytevector-sint-set! . q5042) (bytevector-sint-ref . q5041) (bytevector-s8-set! . q5040) (bytevector-s8-ref . q503f) (bytevector-s64-set! . q503e) (bytevector-s64-ref . q503d) (bytevector-s64-native-set! . q503c) (bytevector-s64-native-ref . q503b) (bytevector-s32-set! . q503a) (bytevector-s32-ref . q5039) (bytevector-s32-native-set! . q5038) (bytevector-s32-native-ref . q5037) (bytevector-s16-set! . q5036) (bytevector-s16-ref . q5035) (bytevector-s16-native-set! . q5034) (bytevector-s16-native-ref . q5033) (bytevector-length . q5032) (bytevector-ieee-single-ref . q5031) (bytevector-ieee-single-set! . q5030) (bytevector-ieee-single-native-set! . q502f) (bytevector-ieee-single-native-ref . q502e) (bytevector-ieee-double-set! . q502d) (bytevector-ieee-double-ref . q502c) (bytevector-ieee-double-native-set! . q502b) (bytevector-ieee-double-native-ref . q502a) (bytevector-fill! . q5029) (bytevector-copy! . q5028) (bytevector-copy . q5027) (bytevector->uint-list . q5026) (bytevector->u8-list . q5025) (bytevector->sint-list . q5024) (no-nans-violation? . q4c82) (no-infinities-violation? . q4c6d) (make-no-nans-violation . q4c80) (make-no-infinities-violation . q4c6b) (real->flonum . q5023) (flzero? . q5022) (fltruncate . q5021) (fltan . q5020) (flsqrt . q501f) (flsin . q501e) (flround . q501d) (flpositive? . q501c) (flonum? . q501b) (flodd? . q501a) (flnumerator . q5019) (flnegative? . q5018) (flnan? . q5017) (flmod0 . q5016) (flmod . q5015) (flmin . q5014) (flmax . q5013) (fllog . q5012) (flinteger? . q5011) (flinfinite? . q5010) (flfloor . q500f) (flfinite? . q500e) (flexpt . q500d) (flexp . q500c) (fleven? . q500b) (fldiv0-and-mod0 . q500a) (fldiv0 . q5009) (fldiv-and-mod . q5008) (fldiv . q5007) (fldenominator . q5006) (flcos . q5005) (flceiling . q5004) (flatan . q5003) (flasin . q5002) (flacos . q5001) (flabs . q5000) (fl>? . q4fff) (fl>=? . q4ffe) (fl=? . q4ffd) (fl<? . q4ffc) (fl<=? . q4ffb) (fl/ . q4ffa) (fl- . q4ff9) (fl+ . q4ff8) (fl* . q4ff7) (fixnum->flonum . q4ff6) (fxzero? . q4ff5) (fxxor . q4ff4) (fxrotate-bit-field . q4ff3) (fxreverse-bit-field . q4ff2) (fxpositive? . q4ff1) (fxodd? . q4ff0) (fxnot . q4fef) (fxnegative? . q4fee) (fxmod0 . q4fed) (fxmod . q4fec) (fxmin . q4feb) (fxmax . q4fea) (fxlength . q4fe9) (fxior . q4fe8) (fxif . q4fe7) (fxfirst-bit-set . q4fe6) (fxeven? . q4fe5) (fxdiv0-and-mod0 . q4fe4) (fxdiv0 . q4fe3) (fxdiv-and-mod . q4fe2) (fxdiv . q4fe1) (fxcopy-bit-field . q4fe0) (fxcopy-bit . q4fdf) (fxbit-set? . q4fde) (fxbit-field . q4fdd) (fxbit-count . q4fdc) (fxarithmetic-shift-right . q4fdb) (fxarithmetic-shift-left . q4fda) (fxarithmetic-shift . q4fd9) (fxand . q4fd8) (fx>? . q4fd7) (fx>=? . q4fd6) (fx=? . q4fd5) (fx<? . q4fd4) (fx<=? . q4fd3) (fx-/carry . q4fd2) (fx- . q4fd1) (fx+/carry . q4fd0) (fx+ . q4fcf) (fx*/carry . q4fce) (fx* . q4fcd) (greatest-fixnum . q4fcc) (least-fixnum . q4fcb) (fixnum-width . q4fca) (fixnum? . q4fc9) (bitwise-rotate-bit-field . q4fc8) (bitwise-reverse-bit-field . q4fc7) (bitwise-length . q4fc6) (bitwise-if . q4fc5) (bitwise-first-bit-set . q4fc4) (bitwise-copy-bit-field . q4fc3) (bitwise-copy-bit . q4fc2) (bitwise-bit-set? . q4fc1) (bitwise-bit-field . q4fc0) (bitwise-bit-count . q4fbf) (bitwise-xor . q4fbe) (bitwise-ior . q4fbd) (bitwise-and . q4fbc) (bitwise-not . q4fbb) (bitwise-arithmetic-shift-right . q4fba) (bitwise-arithmetic-shift-left . q4fb9) (bitwise-arithmetic-shift . q4fb8) (zero? . q4fb7) (vector? . q4fb6) (vector-set! . q4fb5) (vector-ref . q4fb4) (vector-map . q4fb3) (vector-length . q4fb2) (vector-for-each . q4fb1) (vector-fill! . q4fb0) (vector->list . q4faf) (vector . q4fae) (values . q4fad) (truncate . q4fac) (tan . q4fab) (symbol? . q4faa) (symbol=? . q4fa9) (symbol->string . q4fa8) (substring . q4fa7) (string? . q4fa6) (string>? . q4fa5) (string>=? . q4fa4) (string=? . q4fa3) (string<? . q4fa2) (string<=? . q4fa1) (string-ref . q4fa0) (string-length . q4f9f) (string-for-each . q4f9e) (string-copy . q4f9d) (string-append . q4f9c) (string->symbol . q4f9b) (string->number . q4f9a) (string->list . q4f99) (string . q4f98) (sqrt . q4f97) (sin . q4f96) (round . q4f95) (reverse . q4f94) (real? . q4f93) (real-valued? . q4f92) (real-part . q4f91) (rationalize . q4f90) (rational? . q4f8f) (rational-valued? . q4f8e) (procedure? . q4f8d) (positive? . q4f8c) (pair? . q4f8b) (odd? . q4f8a) (numerator . q4f89) (number? . q4f88) (number->string . q4f87) (null? . q4f86) (not . q4f85) (negative? . q4f84) (nan? . q4f83) (min . q4f82) (max . q4f81) (map . q4f80) (make-vector . q4f7f) (make-string . q4f7e) (make-rectangular . q4f7d) (make-polar . q4f7c) (magnitude . q4f7b) (log . q4f7a) (list? . q4f79) (list-tail . q4f78) (list-ref . q4f77) (list->vector . q4f76) (list->string . q4f75) (list . q4f74) (length . q4f73) (lcm . q4f72) (integer? . q4f71) (integer-valued? . q4f70) (integer->char . q4f6f) (infinite? . q4f6e) (inexact? . q4f6d) (inexact . q4f6c) (imag-part . q4f6b) (gcd . q4f6a) (for-each . q4f69) (floor . q4f68) (finite? . q4f67) (expt . q4f66) (exp . q4f65) (exact? . q4f64) (exact-integer-sqrt . q4f63) (exact . q4f62) (even? . q4f61) (error . q4f60) (eqv? . q4f5f) (equal? . q4f5e) (eq? . q4f5d) (dynamic-wind . q4f5c) (div0-and-mod0 . q4f5b) (mod0 . q4f5a) (div0 . q4f59) (div-and-mod . q4f58) (mod . q4f57) (div . q4f56) (denominator . q4f55) (cos . q4f54) (cons . q4f53) (complex? . q4f52) (char? . q4f51) (char>? . q4f50) (char>=? . q4f4f) (char=? . q4f4e) (char<? . q4f4d) (char<=? . q4f4c) (char->integer . q4f4b) (ceiling . q4f4a) (call-with-values . q4f49) (call/cc . q4f48) (call-with-current-continuation . q4f47) (cddddr . q4f46) (cdddar . q4f45) (cddadr . q4f44) (cddaar . q4f43) (cdaddr . q4f42) (cdadar . q4f41) (cdaadr . q4f40) (cdaaar . q4f3f) (cadddr . q4f3e) (caddar . q4f3d) (cadadr . q4f3c) (cadaar . q4f3b) (caaddr . q4f3a) (caadar . q4f39) (caaadr . q4f38) (caaaar . q4f37) (cdddr . q4f36) (cddar . q4f35) (cdadr . q4f34) (cdaar . q4f33) (caddr . q4f32) (cadar . q4f31) (caadr . q4f30) (caaar . q4f2f) (cddr . q4f2e) (cdar . q4f2d) (cadr . q4f2c) (caar . q4f2b) (cdr . q4f2a) (car . q4f29) (boolean? . q4f28) (boolean=? . q4f27) (atan . q4f26) (assertion-violation . q4f25) (assertion-error . q2fb9) (asin . q4f24) (apply . q4f23) (append . q4f22) (angle . q4f21) (acos . q4f20) (abs . q4f1f) (/ . q4f1e) (* . q4f1d) (- . q4f1c) (+ . q4f1b) (>= . q4f1a) (> . q4f19) (= . q4f18) (<= . q4f17) (< . q4f16) (library . q4f15) (&no-nans . q4f14) (&no-infinities . q4f13) (&i/o-encoding . q4f12) (&i/o-decoding . q4f11) (&i/o-port . q4f10) (&i/o-file-does-not-exist . q4f0f) (&i/o-file-already-exists . q4f0e) (&i/o-file-is-read-only . q4f0d) (&i/o-file-protection . q4f0c) (&i/o-filename . q4f0b) (&i/o-invalid-position . q4f0a) (&i/o-write . q4f09) (&i/o-read . q4f08) (&i/o . q4f07) (&undefined . q4f06) (&syntax . q4f05) (&lexical . q4f04) (&implementation-restriction . q4f03) (&non-continuable . q4f02) (&who . q4f01) (&irritants . q4f00) (&assertion . q4eff) (&violation . q4efe) (&error . q4efd) (&serious . q4efc) (&warning . q4efb) (&message . q4efa) (&condition . q4ef9) (define-condition-type . q4ef8) (define-enumeration . q4ef7) (define-record-type . q4ef6) (parent-rtd . q4ef5) (nongenerative . q4ef4) (opaque . q4ef3) (sealed . q4ef2) (protocol . q4ef1) (parent . q4ef0) (immutable . q4eef) (mutable . q4eee) (fields . q4eed) (error-handling-mode . q4eec) (file-options . q4eeb) (buffer-mode . q4eea) (eol-style . q4ee9) (guard . q4ee8) (trace-define . q4ee7) (trace-lambda . q4ee6) (unsyntax-splicing . q4ee5) (unsyntax . q4ee4) (unquote-splicing . q4ee3) (unquote . q4ee2) (_ . q4ee1) (else . q4ee0) (=> . q4edf) (... . q4ede) (assert . q4edd) (endianness . q4edc) (delay . q4edb) (time . q4eda) (do . q4ed9) (cond . q4ed8) (let* . q4ed7) (let . q4ed6) (let*-values . q4ed5) (let-values . q4ed4) (identifier-syntax . q4ed3) (with-syntax . q4ed2) (quasisyntax . q4ed1) (quasiquote . q4ed0) (syntax-rules . q4ecf) (include . q4ece) (define-struct . q4ecd) (record-constructor-descriptor . q4ecc) (record-type-descriptor . q4ecb) (case . q4eca) (parameterize . q4ec9) (unless . q4ec8) (when . q4ec7) (or . q4ec6) (and . q4ec5) (if . q4ec4) (letrec* . q4ec3) (letrec . q4ec2) (type-descriptor . q4ec1) (case-lambda . q4ec0) (lambda . q4ebf) (syntax . q4ebe) (syntax-case . q4ebd) (quote . q4ebc) (foreign-call . q4ebb) (letrec-syntax . q4eba) (let-syntax . q4eb9) (set! . q4eb8) (import . q4eb7) (begin . q4eb6) (module . q4eb5) (define-syntax . q4eb4) (define . q4eb3)) '((q4c86 core-prim . &no-nans-rcd) (q4c84 core-prim . &no-nans-rtd) (q4c71 core-prim . &no-infinities-rcd) (q4c6f core-prim . &no-infinities-rtd) (q4c5c core-prim . &i/o-encoding-rcd) (q4c5a core-prim . &i/o-encoding-rtd) (q4c41 core-prim . &i/o-decoding-rcd) (q4c3f core-prim . &i/o-decoding-rtd) (q4c2c core-prim . &i/o-port-rcd) (q4c2a core-prim . &i/o-port-rtd) (q4c11 core-prim . &i/o-file-does-not-exist-rcd) (q4c0f core-prim . &i/o-file-does-not-exist-rtd) (q4bfc core-prim . &i/o-file-already-exists-rcd) (q4bfa core-prim . &i/o-file-already-exists-rtd) (q4be7 core-prim . &i/o-file-is-read-only-rcd) (q4be5 core-prim . &i/o-file-is-read-only-rtd) (q4bd2 core-prim . &i/o-file-protection-rcd) (q4bd0 core-prim . &i/o-file-protection-rtd) (q4bbd core-prim . &i/o-filename-rcd) (q4bbb core-prim . &i/o-filename-rtd) (q4ba2 core-prim . &i/o-invalid-position-rcd) (q4ba0 core-prim . &i/o-invalid-position-rtd) (q4b87 core-prim . &i/o-write-rcd) (q4b85 core-prim . &i/o-write-rtd) (q4b72 core-prim . &i/o-read-rcd) (q4b70 core-prim . &i/o-read-rtd) (q4b5d core-prim . &i/o-rcd) (q4b5b core-prim . &i/o-rtd) (q4b48 core-prim . &undefined-rcd) (q4b46 core-prim . &undefined-rtd) (q4b33 core-prim . &syntax-rcd) (q4b31 core-prim . &syntax-rtd) (q4b12 core-prim . &lexical-rcd) (q4b10 core-prim . &lexical-rtd) (q4afd core-prim . &implementation-restriction-rcd) (q4afb core-prim . &implementation-restriction-rtd) (q4ae8 core-prim . &non-continuable-rcd) (q4ae6 core-prim . &non-continuable-rtd) (q4ad3 core-prim . &who-rcd) (q4ad1 core-prim . &who-rtd) (q4ab8 core-prim . &irritants-rcd) (q4ab6 core-prim . &irritants-rtd) (q4a9d core-prim . &assertion-rcd) (q4a9b core-prim . &assertion-rtd) (q4a88 core-prim . &violation-rcd) (q4a86 core-prim . &violation-rtd) (q4a73 core-prim . &error-rcd) (q4a71 core-prim . &error-rtd) (q4a5e core-prim . &serious-rcd) (q4a5c core-prim . &serious-rtd) (q4a49 core-prim . &warning-rcd) (q4a47 core-prim . &warning-rtd) (q4a34 core-prim . &message-rcd) (q4a32 core-prim . &message-rtd) (q49d5 core-prim . &condition-rcd) (q49d3 core-prim . &condition-rtd) (q2fbb core-prim . syntax-error) (q2ed6 core-prim . syntax-dispatch) (q51a2 core-prim . pretty-print) (q51a1 core-prim . eval-core) (q51a0 core-prim . set-symbol-value!) (q519f core-prim . symbol-value) (q519e core-prim . gensym) (q519d core-prim . void) (q4d93 core-prim . load) (q2fcb core-prim . interaction-environment) (q519c core-prim . char-ready?) (q519b core-prim . regexp?) (q519a core-prim . read-line) (q5199 core-prim . ungensym) (q5198 core-prim . alist->eq-hash-table) (q5197 core-prim . assoc-ref) (q5196 core-prim . print) (q5195 core-prim . format) (q5194 core-prim . host-os) (q296c core-prim . library-path) (q5193 core-prim . standard-library-path) (q5192 core-prim . file-newer?) (q5191 core-prim . stat-mtime) (q5190 core-prim . write-to-file) (q518f core-prim . file->list) (q518e core-prim . file->string) (q518d core-prim . digit->integer) (q518c core-prim . call-with-string-input-port) (q518b core-prim . call-with-string-io) (q518a core-prim . string-split) (q5189 core-prim . bytevector-for-each) (q5188 core-prim . string->regexp) (q5187 core-prim . rxmatch) (q5186 core-prim . regexp-replace-all) (q5185 core-prim . hashtable-for-each) (q5184 core-prim . call-process) (q5183 core-prim . local-tz-offset) (q5182 core-prim . microseconds) (q5181 core-prim . directory-list) (q5180 core-prim . set-current-directory!) (q517f core-prim . expand-path) (q517e core-prim . current-directory) (q517d core-prim . %spawn) (q517c core-prim . %waitpid) (q517b core-prim . %ffi-supported?) (q517a core-prim . %ffi-pointer-ref) (q5179 core-prim . %ffi-pointer->string) (q5178 core-prim . %ffi-call->string-or-zero) (q5177 core-prim . %ffi-call->double) (q5176 core-prim . %ffi-call->void*) (q5175 core-prim . %ffi-call->void) (q5174 core-prim . %ffi-call->int) (q5173 core-prim . %ffi-lookup) (q5172 core-prim . %ffi-open) (q5171 core-prim . %fork) (q5170 core-prim . %pipe) (q516f core-prim . p) (q516e core-prim . open-output-string) (q516d core-prim . get-output-string) (q516c core-prim . file-stat-ctime) (q516b core-prim . file-stat-atime) (q516a core-prim . file-stat-mtime) (q5169 core-prim . file-size-in-bytes) (q5168 core-prim . file-writable?) (q5167 core-prim . file-executable?) (q5166 core-prim . file-readable?) (q5165 core-prim . file-regular?) (q5164 core-prim . file-symbolic-link?) (q5163 core-prim . file-directory?) (q5162 core-prim . create-symbolic-link) (q5161 core-prim . rename-file) (q5160 core-prim . delete-directory) (q515f core-prim . create-directory) (q515e core-prim . get-environment-variables) (q515d core-prim . get-environment-variable) (q515c core-prim . get-timeofday) (q515b core-prim . get-command-line) (q515a core-prim . sys-display) (q5159 core-prim . whereis) (q5158 core-prim . register) (q5157 core-prim . vm-join!) (q5156 core-prim . vm-set-value!) (q5155 core-prim . vm?) (q5154 core-prim . main-vm?) (q5153 core-prim . vm-eval) (q5152 core-prim . vm-self) (q5151 core-prim . vm-start!) (q5150 core-prim . make-vm) (q514f core-prim . mutex-try-lock!) (q514e core-prim . mutex-unlock!) (q514d core-prim . mutex-lock!) (q514c core-prim . mutex?) (q514b core-prim . make-mutex) (q514a core-prim . condition-variable-notify-all!) (q5149 core-prim . condition-variable-notify!) (q5148 core-prim . condition-variable-wait!) (q5147 core-prim . make-condition-variable) (q5146 core-prim . mosh-executable-path) (q5145 core-prim . make-file-options) (q5144 core-prim . source-info) (q5143 core-prim . make-compiler-instruction) (q5142 core-prim . make-instruction) (q5141 core-prim . set-source-info!) (q5140 core-prim . bignum?) (q513f core-prim . fast-equal?) (q513e core-prim . fasl-read) (q513d core-prim . fasl-write) (q513c core-prim . time-usage) (q513b core-prim . os-constant) (q279f core-prim . make-parameter) (q513a core-prim . socket-port) (q5139 core-prim . socket-shutdown) (q5138 core-prim . socket-close) (q5137 core-prim . socket-send) (q5136 core-prim . socket-recv!) (q5135 core-prim . socket-recv) (q5134 core-prim . make-server-socket) (q5133 core-prim . make-client-socket) (q5132 core-prim . socket-accept) (q5131 core-prim . socket?) (q5130 core-prim . string-upcase) (q512f core-prim . string-titlecase) (q512e core-prim . string-normalize-nfkd) (q512d core-prim . string-normalize-nfkc) (q512c core-prim . string-normalize-nfd) (q512b core-prim . string-normalize-nfc) (q512a core-prim . string-foldcase) (q5129 core-prim . string-downcase) (q5128 core-prim . string-ci>?) (q5127 core-prim . string-ci>=?) (q5126 core-prim . string-ci=?) (q5125 core-prim . string-ci<?) (q5124 core-prim . string-ci<=?) (q5123 core-prim . char-whitespace?) (q5122 core-prim . char-upper-case?) (q5121 core-prim . char-title-case?) (q5120 core-prim . char-numeric?) (q511f core-prim . char-lower-case?) (q511e core-prim . char-general-category) (q511d core-prim . char-upcase) (q511c core-prim . char-titlecase) (q511b core-prim . char-foldcase) (q511a core-prim . char-downcase) (q5119 core-prim . char-ci>?) (q5118 core-prim . char-ci>=?) (q5117 core-prim . char-ci=?) (q5116 core-prim . char-ci<?) (q5115 core-prim . char-ci<=?) (q5114 core-prim . char-alphabetic?) (q2d03 core-prim . make-variable-transformer) (q2fc1 core-prim . identifier?) (q2fad core-prim . generate-temporaries) (q2faf core-prim . free-identifier=?) (q2fc5 core-prim . syntax->datum) (q2fc3 core-prim . datum->syntax) (q2fb1 core-prim . bound-identifier=?) (q5113 core-prim . record-type-descriptor?) (q5112 core-prim . record-predicate) (q5111 core-prim . record-mutator) (q5110 core-prim . record-constructor) (q510f core-prim . record-accessor) (q510e core-prim . make-record-type-descriptor) (q510d core-prim . make-record-constructor-descriptor) (q510c core-prim . record?) (q510b core-prim . record-type-uid) (q510a core-prim . record-type-sealed?) (q5109 core-prim . record-type-parent) (q5108 core-prim . record-type-opaque?) (q5107 core-prim . record-type-name) (q5106 core-prim . record-type-generative?) (q5105 core-prim . record-type-field-names) (q5104 core-prim . record-rtd) (q5103 core-prim . record-field-mutable?) (q5102 core-prim . delete-file) (q5101 core-prim . file-exists?) (q5100 core-prim . vector-sort!) (q50ff core-prim . vector-sort) (q50fe core-prim . list-sort) (q50fd core-prim . symbol-hash) (q50fc core-prim . string-ci-hash) (q50fb core-prim . string-hash) (q50fa core-prim . equal-hash) (q50f9 core-prim . hashtable-equivalence-function) (q50f8 core-prim . make-hashtable) (q50f7 core-prim . hashtable-hash-function) (q50f6 core-prim . make-eqv-hashtable) (q50f5 core-prim . make-eq-hashtable) (q50f4 core-prim . hashtable?) (q50f3 core-prim . hashtable-update!) (q50f2 core-prim . hashtable-size) (q50f1 core-prim . hashtable-set!) (q50f0 core-prim . hashtable-ref) (q50ef core-prim . hashtable-mutable?) (q50ee core-prim . hashtable-keys) (q50ed core-prim . hashtable-entries) (q50ec core-prim . hashtable-delete!) (q50eb core-prim . hashtable-copy) (q50ea core-prim . hashtable-contains?) (q50e9 core-prim . hashtable-clear!) (q50e8 core-prim . call-with-output-file) (q50e7 core-prim . call-with-input-file) (q50e6 core-prim . write-char) (q50e5 core-prim . write) (q50e4 core-prim . with-output-to-file) (q50e3 core-prim . with-input-from-file) (q50e2 core-prim . read-char) (q50e1 core-prim . read) (q50e0 core-prim . peek-char) (q50df core-prim . open-output-file) (q50de core-prim . open-input-file) (q50dd core-prim . newline) (q50dc core-prim . display) (q50db core-prim . close-output-port) (q50da core-prim . close-input-port) (q50d9 core-prim . eof-object?) (q50d8 core-prim . eof-object) (q50d7 core-prim . current-error-port) (q50d6 core-prim . current-output-port) (q50d5 core-prim . current-input-port) (q50d4 core-prim . output-port?) (q50d3 core-prim . input-port?) (q50d2 core-prim . utf-8-codec) (q50d1 core-prim . utf-16-codec) (q50d0 core-prim . transcoder-error-handling-mode) (q50cf core-prim . transcoder-eol-style) (q50ce core-prim . transcoder-codec) (q50cd core-prim . transcoded-port) (q50cc core-prim . textual-port?) (q50cb core-prim . string->bytevector) (q50ca core-prim . standard-output-port) (q50c9 core-prim . standard-input-port) (q50c8 core-prim . standard-error-port) (q50c7 core-prim . set-port-position!) (q50c6 core-prim . put-u8) (q50c5 core-prim . put-string) (q50c4 core-prim . put-datum) (q50c3 core-prim . put-char) (q50c2 core-prim . put-bytevector) (q50c1 core-prim . port?) (q50c0 core-prim . port-transcoder) (q50bf core-prim . port-position) (q50be core-prim . port-has-set-port-position!?) (q50bd core-prim . port-has-port-position?) (q50bc core-prim . port-eof?) (q50bb core-prim . output-port-buffer-mode) (q50ba core-prim . open-string-output-port) (q50b9 core-prim . open-string-input-port) (q50b8 core-prim . open-file-output-port) (q50b7 core-prim . open-file-input/output-port) (q50b6 core-prim . open-file-input-port) (q50b5 core-prim . open-bytevector-output-port) (q50b4 core-prim . open-bytevector-input-port) (q50b3 core-prim . native-transcoder) (q50b2 core-prim . native-eol-style) (q50b1 core-prim . make-transcoder) (q50b0 core-prim . latin-1-codec) (q4b81 core-prim . make-i/o-write-error) (q4b6c core-prim . make-i/o-read-error) (q4c22 core-prim . make-i/o-port-error) (q4b98 core-prim . make-i/o-invalid-position-error) (q4bb3 core-prim . make-i/o-filename-error) (q4bcc core-prim . make-i/o-file-protection-error) (q4be1 core-prim . make-i/o-file-is-read-only-error) (q4c0b core-prim . make-i/o-file-does-not-exist-error) (q4bf6 core-prim . make-i/o-file-already-exists-error) (q4b57 core-prim . make-i/o-error) (q4c52 core-prim . make-i/o-encoding-error) (q4c3b core-prim . make-i/o-decoding-error) (q50af core-prim . make-custom-textual-output-port) (q50ae core-prim . make-custom-textual-input/output-port) (q50ad core-prim . make-custom-textual-input-port) (q50ac core-prim . make-custom-binary-output-port) (q50ab core-prim . make-custom-binary-input/output-port) (q50aa core-prim . make-custom-binary-input-port) (q50a9 core-prim . make-bytevector) (q50a8 core-prim . lookahead-u8) (q50a7 core-prim . lookahead-char) (q4b83 core-prim . i/o-write-error?) (q4b6e core-prim . i/o-read-error?) (q4c26 core-prim . i/o-port-error?) (q4b9c core-prim . i/o-invalid-position-error?) (q4bb7 core-prim . i/o-filename-error?) (q4bce core-prim . i/o-file-protection-error?) (q4be3 core-prim . i/o-file-is-read-only-error?) (q4c0d core-prim . i/o-file-does-not-exist-error?) (q4bf8 core-prim . i/o-file-already-exists-error?) (q4b59 core-prim . i/o-error?) (q4b9e core-prim . i/o-error-position) (q4c28 core-prim . i/o-error-port) (q4bb9 core-prim . i/o-error-filename) (q4c56 core-prim . i/o-encoding-error?) (q4c58 core-prim . i/o-encoding-error-char) (q4c3d core-prim . i/o-decoding-error?) (q50a6 core-prim . get-u8) (q50a5 core-prim . get-string-n!) (q50a4 core-prim . get-string-n) (q50a3 core-prim . get-string-all) (q50a2 core-prim . get-line) (q50a1 core-prim . get-datum) (q50a0 core-prim . get-char) (q509f core-prim . get-bytevector-some) (q509e core-prim . get-bytevector-n!) (q509d core-prim . get-bytevector-n) (q509c core-prim . get-bytevector-all) (q509b core-prim . flush-output-port) (q509a core-prim . close-port) (q2f9b core-prim . scheme-report-environment) (q5099 core-prim . quotient) (q2f99 core-prim . null-environment) (q5098 core-prim . remainder) (q5097 core-prim . modulo) (q5096 core-prim . inexact->exact) (q5095 core-prim . force) (q5094 core-prim . exact->inexact) (q5093 core-prim . make-promise) (q5092 core-prim . exit) (q4d8d core-prim . command-line) (q5091 core-prim . string-fill!) (q5090 core-prim . string-set!) (q508f core-prim . set-cdr!) (q508e core-prim . set-car!) (q508d core-prim . remove) (q508c core-prim . remv) (q508b core-prim . remp) (q508a core-prim . remq) (q5089 core-prim . partition) (q5088 core-prim . memv) (q5087 core-prim . memq) (q5086 core-prim . memp) (q5085 core-prim . member) (q5084 core-prim . exists) (q5083 core-prim . for-all) (q5082 core-prim . fold-right) (q5081 core-prim . fold-left) (q5080 core-prim . find) (q507f core-prim . filter) (q507e core-prim . cons*) (q507d core-prim . assv) (q507c core-prim . assq) (q507b core-prim . assp) (q507a core-prim . assoc) (q5079 core-prim . call-with-string-output-port) (q5078 core-prim . call-with-port) (q5077 core-prim . call-with-bytevector-output-port) (q5076 core-prim . bytevector->string) (q5075 core-prim . buffer-mode?) (q5074 core-prim . binary-port?) (q5073 core-prim . with-exception-handler) (q5072 core-prim . raise-continuable) (q5071 core-prim . raise) (q2f9f core-prim . eval) (q2f97 core-prim . environment) (q5070 core-prim . make-enumeration) (q506f core-prim . enum-set=?) (q506e core-prim . enum-set-universe) (q506d core-prim . enum-set-union) (q506c core-prim . enum-set-subset?) (q506b core-prim . enum-set-projection) (q506a core-prim . enum-set-member?) (q5069 core-prim . enum-set-intersection) (q5068 core-prim . enum-set-indexer) (q5067 core-prim . enum-set-difference) (q5066 core-prim . enum-set-constructor) (q5065 core-prim . enum-set-complement) (q5064 core-prim . enum-set->list) (q4acd core-prim . who-condition?) (q4a45 core-prim . warning?) (q4a84 core-prim . violation?) (q4b44 core-prim . undefined-violation?) (q4b2b core-prim . syntax-violation?) (q4b2f core-prim . syntax-violation-subform) (q4b2d core-prim . syntax-violation-form) (q2fbf core-prim . syntax-violation) (q5063 core-prim . simple-conditions) (q4a5a core-prim . serious-condition?) (q4ae4 core-prim . non-continuable-violation?) (q4a2e core-prim . message-condition?) (q4ac9 core-prim . make-who-condition) (q4a43 core-prim . make-warning) (q4a82 core-prim . make-violation) (q4b42 core-prim . make-undefined-violation) (q4b25 core-prim . make-syntax-violation) (q4a58 core-prim . make-serious-condition) (q4ae2 core-prim . make-non-continuable-violation) (q4a2a core-prim . make-message-condition) (q4b0c core-prim . make-lexical-violation) (q4aae core-prim . make-irritants-condition) (q4af7 core-prim . make-implementation-restriction-violation) (q4a6d core-prim . make-error) (q4a97 core-prim . make-assertion-violation) (q4b0e core-prim . lexical-violation?) (q4ab2 core-prim . irritants-condition?) (q4af9 core-prim . implementation-restriction-violation?) (q4a6f core-prim . error?) (q4acf core-prim . condition-who) (q5062 core-prim . condition-predicate) (q4a30 core-prim . condition-message) (q4ab4 core-prim . condition-irritants) (q5061 core-prim . condition-accessor) (q5060 core-prim . condition) (q4a99 core-prim . assertion-violation?) (q505f core-prim . condition?) (q505e core-prim . utf32->string) (q505d core-prim . utf16->string) (q505c core-prim . utf8->string) (q505b core-prim . uint-list->bytevector) (q505a core-prim . u8-list->bytevector) (q5059 core-prim . string->utf8) (q5058 core-prim . string->utf32) (q5057 core-prim . string->utf16) (q5056 core-prim . sint-list->bytevector) (q5055 core-prim . native-endianness) (q5054 core-prim . bytevector?) (q5053 core-prim . bytevector=?) (q5052 core-prim . bytevector-uint-set!) (q5051 core-prim . bytevector-uint-ref) (q5050 core-prim . bytevector-u8-set!) (q504f core-prim . bytevector-u8-ref) (q504e core-prim . bytevector-u64-set!) (q504d core-prim . bytevector-u64-ref) (q504c core-prim . bytevector-u64-native-set!) (q504b core-prim . bytevector-u64-native-ref) (q504a core-prim . bytevector-u32-set!) (q5049 core-prim . bytevector-u32-ref) (q5048 core-prim . bytevector-u32-native-set!) (q5047 core-prim . bytevector-u32-native-ref) (q5046 core-prim . bytevector-u16-set!) (q5045 core-prim . bytevector-u16-ref) (q5044 core-prim . bytevector-u16-native-set!) (q5043 core-prim . bytevector-u16-native-ref) (q5042 core-prim . bytevector-sint-set!) (q5041 core-prim . bytevector-sint-ref) (q5040 core-prim . bytevector-s8-set!) (q503f core-prim . bytevector-s8-ref) (q503e core-prim . bytevector-s64-set!) (q503d core-prim . bytevector-s64-ref) (q503c core-prim . bytevector-s64-native-set!) (q503b core-prim . bytevector-s64-native-ref) (q503a core-prim . bytevector-s32-set!) (q5039 core-prim . bytevector-s32-ref) (q5038 core-prim . bytevector-s32-native-set!) (q5037 core-prim . bytevector-s32-native-ref) (q5036 core-prim . bytevector-s16-set!) (q5035 core-prim . bytevector-s16-ref) (q5034 core-prim . bytevector-s16-native-set!) (q5033 core-prim . bytevector-s16-native-ref) (q5032 core-prim . bytevector-length) (q5031 core-prim . bytevector-ieee-single-ref) (q5030 core-prim . bytevector-ieee-single-set!) (q502f core-prim . bytevector-ieee-single-native-set!) (q502e core-prim . bytevector-ieee-single-native-ref) (q502d core-prim . bytevector-ieee-double-set!) (q502c core-prim . bytevector-ieee-double-ref) (q502b core-prim . bytevector-ieee-double-native-set!) (q502a core-prim . bytevector-ieee-double-native-ref) (q5029 core-prim . bytevector-fill!) (q5028 core-prim . bytevector-copy!) (q5027 core-prim . bytevector-copy) (q5026 core-prim . bytevector->uint-list) (q5025 core-prim . bytevector->u8-list) (q5024 core-prim . bytevector->sint-list) (q4c82 core-prim . no-nans-violation?) (q4c6d core-prim . no-infinities-violation?) (q4c80 core-prim . make-no-nans-violation) (q4c6b core-prim . make-no-infinities-violation) (q5023 core-prim . real->flonum) (q5022 core-prim . flzero?) (q5021 core-prim . fltruncate) (q5020 core-prim . fltan) (q501f core-prim . flsqrt) (q501e core-prim . flsin) (q501d core-prim . flround) (q501c core-prim . flpositive?) (q501b core-prim . flonum?) (q501a core-prim . flodd?) (q5019 core-prim . flnumerator) (q5018 core-prim . flnegative?) (q5017 core-prim . flnan?) (q5016 core-prim . flmod0) (q5015 core-prim . flmod) (q5014 core-prim . flmin) (q5013 core-prim . flmax) (q5012 core-prim . fllog) (q5011 core-prim . flinteger?) (q5010 core-prim . flinfinite?) (q500f core-prim . flfloor) (q500e core-prim . flfinite?) (q500d core-prim . flexpt) (q500c core-prim . flexp) (q500b core-prim . fleven?) (q500a core-prim . fldiv0-and-mod0) (q5009 core-prim . fldiv0) (q5008 core-prim . fldiv-and-mod) (q5007 core-prim . fldiv) (q5006 core-prim . fldenominator) (q5005 core-prim . flcos) (q5004 core-prim . flceiling) (q5003 core-prim . flatan) (q5002 core-prim . flasin) (q5001 core-prim . flacos) (q5000 core-prim . flabs) (q4fff core-prim . fl>?) (q4ffe core-prim . fl>=?) (q4ffd core-prim . fl=?) (q4ffc core-prim . fl<?) (q4ffb core-prim . fl<=?) (q4ffa core-prim . fl/) (q4ff9 core-prim . fl-) (q4ff8 core-prim . fl+) (q4ff7 core-prim . fl*) (q4ff6 core-prim . fixnum->flonum) (q4ff5 core-prim . fxzero?) (q4ff4 core-prim . fxxor) (q4ff3 core-prim . fxrotate-bit-field) (q4ff2 core-prim . fxreverse-bit-field) (q4ff1 core-prim . fxpositive?) (q4ff0 core-prim . fxodd?) (q4fef core-prim . fxnot) (q4fee core-prim . fxnegative?) (q4fed core-prim . fxmod0) (q4fec core-prim . fxmod) (q4feb core-prim . fxmin) (q4fea core-prim . fxmax) (q4fe9 core-prim . fxlength) (q4fe8 core-prim . fxior) (q4fe7 core-prim . fxif) (q4fe6 core-prim . fxfirst-bit-set) (q4fe5 core-prim . fxeven?) (q4fe4 core-prim . fxdiv0-and-mod0) (q4fe3 core-prim . fxdiv0) (q4fe2 core-prim . fxdiv-and-mod) (q4fe1 core-prim . fxdiv) (q4fe0 core-prim . fxcopy-bit-field) (q4fdf core-prim . fxcopy-bit) (q4fde core-prim . fxbit-set?) (q4fdd core-prim . fxbit-field) (q4fdc core-prim . fxbit-count) (q4fdb core-prim . fxarithmetic-shift-right) (q4fda core-prim . fxarithmetic-shift-left) (q4fd9 core-prim . fxarithmetic-shift) (q4fd8 core-prim . fxand) (q4fd7 core-prim . fx>?) (q4fd6 core-prim . fx>=?) (q4fd5 core-prim . fx=?) (q4fd4 core-prim . fx<?) (q4fd3 core-prim . fx<=?) (q4fd2 core-prim . fx-/carry) (q4fd1 core-prim . fx-) (q4fd0 core-prim . fx+/carry) (q4fcf core-prim . fx+) (q4fce core-prim . fx*/carry) (q4fcd core-prim . fx*) (q4fcc core-prim . greatest-fixnum) (q4fcb core-prim . least-fixnum) (q4fca core-prim . fixnum-width) (q4fc9 core-prim . fixnum?) (q4fc8 core-prim . bitwise-rotate-bit-field) (q4fc7 core-prim . bitwise-reverse-bit-field) (q4fc6 core-prim . bitwise-length) (q4fc5 core-prim . bitwise-if) (q4fc4 core-prim . bitwise-first-bit-set) (q4fc3 core-prim . bitwise-copy-bit-field) (q4fc2 core-prim . bitwise-copy-bit) (q4fc1 core-prim . bitwise-bit-set?) (q4fc0 core-prim . bitwise-bit-field) (q4fbf core-prim . bitwise-bit-count) (q4fbe core-prim . bitwise-xor) (q4fbd core-prim . bitwise-ior) (q4fbc core-prim . bitwise-and) (q4fbb core-prim . bitwise-not) (q4fba core-prim . bitwise-arithmetic-shift-right) (q4fb9 core-prim . bitwise-arithmetic-shift-left) (q4fb8 core-prim . bitwise-arithmetic-shift) (q4fb7 core-prim . zero?) (q4fb6 core-prim . vector?) (q4fb5 core-prim . vector-set!) (q4fb4 core-prim . vector-ref) (q4fb3 core-prim . vector-map) (q4fb2 core-prim . vector-length) (q4fb1 core-prim . vector-for-each) (q4fb0 core-prim . vector-fill!) (q4faf core-prim . vector->list) (q4fae core-prim . vector) (q4fad core-prim . values) (q4fac core-prim . truncate) (q4fab core-prim . tan) (q4faa core-prim . symbol?) (q4fa9 core-prim . symbol=?) (q4fa8 core-prim . symbol->string) (q4fa7 core-prim . substring) (q4fa6 core-prim . string?) (q4fa5 core-prim . string>?) (q4fa4 core-prim . string>=?) (q4fa3 core-prim . string=?) (q4fa2 core-prim . string<?) (q4fa1 core-prim . string<=?) (q4fa0 core-prim . string-ref) (q4f9f core-prim . string-length) (q4f9e core-prim . string-for-each) (q4f9d core-prim . string-copy) (q4f9c core-prim . string-append) (q4f9b core-prim . string->symbol) (q4f9a core-prim . string->number) (q4f99 core-prim . string->list) (q4f98 core-prim . string) (q4f97 core-prim . sqrt) (q4f96 core-prim . sin) (q4f95 core-prim . round) (q4f94 core-prim . reverse) (q4f93 core-prim . real?) (q4f92 core-prim . real-valued?) (q4f91 core-prim . real-part) (q4f90 core-prim . rationalize) (q4f8f core-prim . rational?) (q4f8e core-prim . rational-valued?) (q4f8d core-prim . procedure?) (q4f8c core-prim . positive?) (q4f8b core-prim . pair?) (q4f8a core-prim . odd?) (q4f89 core-prim . numerator) (q4f88 core-prim . number?) (q4f87 core-prim . number->string) (q4f86 core-prim . null?) (q4f85 core-prim . not) (q4f84 core-prim . negative?) (q4f83 core-prim . nan?) (q4f82 core-prim . min) (q4f81 core-prim . max) (q4f80 core-prim . map) (q4f7f core-prim . make-vector) (q4f7e core-prim . make-string) (q4f7d core-prim . make-rectangular) (q4f7c core-prim . make-polar) (q4f7b core-prim . magnitude) (q4f7a core-prim . log) (q4f79 core-prim . list?) (q4f78 core-prim . list-tail) (q4f77 core-prim . list-ref) (q4f76 core-prim . list->vector) (q4f75 core-prim . list->string) (q4f74 core-prim . list) (q4f73 core-prim . length) (q4f72 core-prim . lcm) (q4f71 core-prim . integer?) (q4f70 core-prim . integer-valued?) (q4f6f core-prim . integer->char) (q4f6e core-prim . infinite?) (q4f6d core-prim . inexact?) (q4f6c core-prim . inexact) (q4f6b core-prim . imag-part) (q4f6a core-prim . gcd) (q4f69 core-prim . for-each) (q4f68 core-prim . floor) (q4f67 core-prim . finite?) (q4f66 core-prim . expt) (q4f65 core-prim . exp) (q4f64 core-prim . exact?) (q4f63 core-prim . exact-integer-sqrt) (q4f62 core-prim . exact) (q4f61 core-prim . even?) (q4f60 core-prim . error) (q4f5f core-prim . eqv?) (q4f5e core-prim . equal?) (q4f5d core-prim . eq?) (q4f5c core-prim . dynamic-wind) (q4f5b core-prim . div0-and-mod0) (q4f5a core-prim . mod0) (q4f59 core-prim . div0) (q4f58 core-prim . div-and-mod) (q4f57 core-prim . mod) (q4f56 core-prim . div) (q4f55 core-prim . denominator) (q4f54 core-prim . cos) (q4f53 core-prim . cons) (q4f52 core-prim . complex?) (q4f51 core-prim . char?) (q4f50 core-prim . char>?) (q4f4f core-prim . char>=?) (q4f4e core-prim . char=?) (q4f4d core-prim . char<?) (q4f4c core-prim . char<=?) (q4f4b core-prim . char->integer) (q4f4a core-prim . ceiling) (q4f49 core-prim . call-with-values) (q4f48 core-prim . call/cc) (q4f47 core-prim . call-with-current-continuation) (q4f46 core-prim . cddddr) (q4f45 core-prim . cdddar) (q4f44 core-prim . cddadr) (q4f43 core-prim . cddaar) (q4f42 core-prim . cdaddr) (q4f41 core-prim . cdadar) (q4f40 core-prim . cdaadr) (q4f3f core-prim . cdaaar) (q4f3e core-prim . cadddr) (q4f3d core-prim . caddar) (q4f3c core-prim . cadadr) (q4f3b core-prim . cadaar) (q4f3a core-prim . caaddr) (q4f39 core-prim . caadar) (q4f38 core-prim . caaadr) (q4f37 core-prim . caaaar) (q4f36 core-prim . cdddr) (q4f35 core-prim . cddar) (q4f34 core-prim . cdadr) (q4f33 core-prim . cdaar) (q4f32 core-prim . caddr) (q4f31 core-prim . cadar) (q4f30 core-prim . caadr) (q4f2f core-prim . caaar) (q4f2e core-prim . cddr) (q4f2d core-prim . cdar) (q4f2c core-prim . cadr) (q4f2b core-prim . caar) (q4f2a core-prim . cdr) (q4f29 core-prim . car) (q4f28 core-prim . boolean?) (q4f27 core-prim . boolean=?) (q4f26 core-prim . atan) (q4f25 core-prim . assertion-violation) (q2fb9 core-prim . assertion-error) (q4f24 core-prim . asin) (q4f23 core-prim . apply) (q4f22 core-prim . append) (q4f21 core-prim . angle) (q4f20 core-prim . acos) (q4f1f core-prim . abs) (q4f1e core-prim . /) (q4f1d core-prim . *) (q4f1c core-prim . -) (q4f1b core-prim . +) (q4f1a core-prim . >=) (q4f19 core-prim . >) (q4f18 core-prim . =) (q4f17 core-prim . <=) (q4f16 core-prim . <) (q4f15 core-prim . library) (q4f14 $core-rtd &no-nans-rtd &no-nans-rcd) (q4f13 $core-rtd &no-infinities-rtd &no-infinities-rcd) (q4f12 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (q4f11 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (q4f10 $core-rtd &i/o-port-rtd &i/o-port-rcd) (q4f0f $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (q4f0e $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (q4f0d $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (q4f0c $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (q4f0b $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (q4f0a $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (q4f09 $core-rtd &i/o-write-rtd &i/o-write-rcd) (q4f08 $core-rtd &i/o-read-rtd &i/o-read-rcd) (q4f07 $core-rtd &i/o-rtd &i/o-rcd) (q4f06 $core-rtd &undefined-rtd &undefined-rcd) (q4f05 $core-rtd &syntax-rtd &syntax-rcd) (q4f04 $core-rtd &lexical-rtd &lexical-rcd) (q4f03 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (q4f02 $core-rtd &non-continuable-rtd &non-continuable-rcd) (q4f01 $core-rtd &who-rtd &who-rcd) (q4f00 $core-rtd &irritants-rtd &irritants-rcd) (q4eff $core-rtd &assertion-rtd &assertion-rcd) (q4efe $core-rtd &violation-rtd &violation-rcd) (q4efd $core-rtd &error-rtd &error-rcd) (q4efc $core-rtd &serious-rtd &serious-rcd) (q4efb $core-rtd &warning-rtd &warning-rcd) (q4efa $core-rtd &message-rtd &message-rcd) (q4ef9 $core-rtd &condition-rtd &condition-rcd) (q4ef8 macro . define-condition-type) (q4ef7 macro . define-enumeration) (q4ef6 macro . define-record-type) (q4ef5 macro . parent-rtd) (q4ef4 macro . nongenerative) (q4ef3 macro . opaque) (q4ef2 macro . sealed) (q4ef1 macro . protocol) (q4ef0 macro . parent) (q4eef macro . immutable) (q4eee macro . mutable) (q4eed macro . fields) (q4eec macro . error-handling-mode) (q4eeb macro . file-options) (q4eea macro . buffer-mode) (q4ee9 macro . eol-style) (q4ee8 macro . guard) (q4ee7 macro . trace-define) (q4ee6 macro . trace-lambda) (q4ee5 macro . unsyntax-splicing) (q4ee4 macro . unsyntax) (q4ee3 macro . unquote-splicing) (q4ee2 macro . unquote) (q4ee1 macro . _) (q4ee0 macro . else) (q4edf macro . =>) (q4ede macro . ...) (q4edd macro . assert) (q4edc macro . endianness) (q4edb macro . delay) (q4eda macro . time) (q4ed9 macro . do) (q4ed8 macro . cond) (q4ed7 macro . let*) (q4ed6 macro . let) (q4ed5 macro . let*-values) (q4ed4 macro . let-values) (q4ed3 macro . identifier-syntax) (q4ed2 macro . with-syntax) (q4ed1 macro . quasisyntax) (q4ed0 macro . quasiquote) (q4ecf macro . syntax-rules) (q4ece macro . include) (q4ecd macro . define-struct) (q4ecc core-macro . record-constructor-descriptor) (q4ecb core-macro . record-type-descriptor) (q4eca macro . case) (q4ec9 macro . parameterize) (q4ec8 macro . unless) (q4ec7 macro . when) (q4ec6 core-macro . or) (q4ec5 core-macro . and) (q4ec4 core-macro . if) (q4ec3 core-macro . letrec*) (q4ec2 core-macro . letrec) (q4ec1 core-macro . type-descriptor) (q4ec0 core-macro . case-lambda) (q4ebf core-macro . lambda) (q4ebe core-macro . syntax) (q4ebd core-macro . syntax-case) (q4ebc core-macro . quote) (q4ebb core-macro . foreign-call) (q4eba letrec-syntax) (q4eb9 let-syntax) (q4eb8 set!) (q4eb7 import) (q4eb6 begin) (q4eb5 module) (q4eb4 define-syntax) (q4eb3 define)) values values '#f '#f '#f '#f) (q2aee@q298d@install-library 'q51c3 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . q51a2) (eval-core . q51a1) (set-symbol-value! . q51a0) (symbol-value . q519f) (gensym . q519e) (void . q519d)) '() values values '#f '#f '#f '#f) (q2aee@q298d@install-library 'q51c4 '(mosh) '() '() '() '() '((set-symbol-value! . q51a0) (symbol-value . q519f) (regexp? . q519b) (read-line . q519a) (ungensym . q5199) (alist->eq-hash-table . q5198) (assoc-ref . q5197) (print . q5196) (format . q5195) (host-os . q5194) (library-path . q296c) (standard-library-path . q5193) (file-newer? . q5192) (stat-mtime . q5191) (digit->integer . q518d) (call-with-string-input-port . q518c) (call-with-string-io . q518b) (string-split . q518a) (bytevector-for-each . q5189) (string->regexp . q5188) (rxmatch . q5187) (regexp-replace-all . q5186) (hashtable-for-each . q5185) (set-current-directory! . q5180) (expand-path . q517f) (current-directory . q517e) (p . q516f) (get-timeofday . q515c) (get-command-line . q515b) (sys-display . q515a) (whereis . q5159) (register . q5158) (vm-join! . q5157) (vm-set-value! . q5156) (vm? . q5155) (main-vm? . q5154) (vm-eval . q5153) (vm-self . q5152) (vm-start! . q5151) (make-vm . q5150) (mutex-try-lock! . q514f) (mutex-unlock! . q514e) (mutex-lock! . q514d) (mutex? . q514c) (make-mutex . q514b) (condition-variable-notify-all! . q514a) (condition-variable-notify! . q5149) (condition-variable-wait! . q5148) (make-condition-variable . q5147) (mosh-executable-path . q5146) (make-file-options . q5145) (source-info . q5144) (make-compiler-instruction . q5143) (make-instruction . q5142) (set-source-info! . q5141) (bignum? . q5140) (fast-equal? . q513f) (fasl-read . q513e) (fasl-write . q513d) (time-usage . q513c) (os-constant . q513b) (time . q4eda) (include . q4ece)) '() values values '#f '#f '#f '#f) (q2aee@q298d@install-library 'q51c5 '(system) '() '() '() '() '((write-to-file . q5190) (file->list . q518f) (file->string . q518e) (call-process . q5184) (local-tz-offset . q5183) (microseconds . q5182) (directory-list . q5181) (expand-path . q517f) (%spawn . q517d) (%waitpid . q517c) (%ffi-supported? . q517b) (%ffi-pointer-ref . q517a) (%ffi-pointer->string . q5179) (%ffi-call->string-or-zero . q5178) (%ffi-call->double . q5177) (%ffi-call->void* . q5176) (%ffi-call->void . q5175) (%ffi-call->int . q5174) (%ffi-lookup . q5173) (%ffi-open . q5172) (%fork . q5171) (%pipe . q5170) (open-output-string . q516e) (get-output-string . q516d) (file-stat-ctime . q516c) (file-stat-atime . q516b) (file-stat-mtime . q516a) (file-size-in-bytes . q5169) (file-writable? . q5168) (file-executable? . q5167) (file-readable? . q5166) (file-regular? . q5165) (file-symbolic-link? . q5164) (file-directory? . q5163) (create-symbolic-link . q5162) (rename-file . q5161) (delete-directory . q5160) (create-directory . q515f) (get-environment-variables . q515e) (get-environment-variable . q515d) (make-parameter . q279f) (socket-port . q513a) (socket-shutdown . q5139) (socket-close . q5138) (socket-send . q5137) (socket-recv! . q5136) (socket-recv . q5135) (make-server-socket . q5134) (make-client-socket . q5133) (socket-accept . q5132) (socket? . q5131) (parameterize . q4ec9)) '() values values '#f '#f '#f '#f))
((lambda (q4d7c@add-library-path! q4d7e@parse-and-add-library-path q4d80@for-each-with-index q4d82@rpad q4d84@condition-printer q4d86@record->field-alist q4d88@map-with-index q4d8a@repl q4d8c@trace-printer q4d8e@command-line q4d90@local-library-path q4d92@load/args q4d94@load q4d96@ironscheme-build q4d98@eval-top-level q4d9a@compile-system-libraries q4d9c@compile q4d9e@compile->closure q4da0@pre-compile-r6rs-file q4da2@load-r6rs-top-level q4da4@load-r6rs-top-level-sexp) (begin (set! q4d7c@add-library-path! (lambda (q4dc7@path) (q2ade@q296d@library-path (append (q2ade@q296d@library-path) (list q4dc7@path))))) (set! q4d7e@parse-and-add-library-path (lambda (q4dc9@paths q4dca@message) ((lambda (q4dcd@t) (if q4dcd@t ((lambda (q4dcf@paths) (for-each (lambda (q4dd1@path) (if (file-exists? q4dd1@path) (q4d7c@add-library-path! (expand-path q4dd1@path)) (format (current-error-port) q4dca@message q4dd1@path))) (string-split q4dcf@paths '#\:))) q4dcd@t) (void))) q4dc9@paths))) (set! q4d80@for-each-with-index (lambda (q4dd3@proc q4dd4@lst) (letrec ((q4dd7@loop (lambda (q4dd9@i q4dda@lst) (if (null? q4dda@lst) (if '#f '#f (void)) (begin (q4dd3@proc q4dd9@i (car q4dda@lst)) (q4dd7@loop (+ q4dd9@i '1) (cdr q4dda@lst))))))) (q4dd7@loop '1 q4dd4@lst)))) (set! q4d82@rpad (lambda (q4ddd@str q4dde@pad q4ddf@n) ((lambda (q4de3@rest) ((letrec ((q4de5@loop (lambda (q4de7@rest q4de8@ret) (if (<= q4de7@rest '0) q4de8@ret (q4de5@loop (- q4de7@rest '1) (string-append q4de8@ret q4dde@pad)))))) q4de5@loop) q4de3@rest (format '"~a" q4ddd@str))) (- q4ddf@n (string-length (format '"~a" q4ddd@str)))))) (set! q4d84@condition-printer (lambda (q4deb@e q4dec@port) ((lambda (q4df0@max-condition-len) (begin (set! q4df0@max-condition-len (apply max (map (lambda (q4e01@c) (string-length (symbol->string (record-type-name (record-rtd q4e01@c))))) (simple-conditions q4deb@e)))) (begin (display '" Condition components:\n" q4dec@port) (q4d80@for-each-with-index (lambda (q4df1@i q4df2@x) ((lambda (q4df5@rtd q4df6@fields-alist) (begin (format q4dec@port '" ~d. ~a" q4df1@i (q4d82@rpad (symbol->string (record-type-name q4df5@rtd)) '" " q4df0@max-condition-len)) (if (null? q4df6@fields-alist) (newline q4dec@port) (void)) ((letrec ((q4df9@loop (lambda (q4dfb@first q4dfc@fields-alist) (if (null? q4dfc@fields-alist) '() ((lambda (q4dff@field) (begin (if (not q4dfb@first) (display (q4d82@rpad '"" '" " (+ '4 q4df0@max-condition-len)) q4dec@port) (void)) (display '"       " q4dec@port) (display (car q4dff@field) q4dec@port) (display '": " q4dec@port) (write (cdr q4dff@field) q4dec@port) (newline q4dec@port) (q4df9@loop '#f (cdr q4dfc@fields-alist)))) (car q4dfc@fields-alist)))))) q4df9@loop) '#t q4df6@fields-alist))) (record-rtd q4df2@x) (q4d86@record->field-alist q4df2@x))) (simple-conditions q4deb@e))))) '#f))) (set! q4d86@record->field-alist (lambda (q4e03@r) ((lambda (q4e06@ref) (begin (set! q4e06@ref (lambda (q4e11@rtd q4e12@i q4e13@x) ((lambda (q4e17@val) (if (symbol? q4e17@val) (ungensym q4e17@val) q4e17@val)) ((record-accessor q4e11@rtd q4e12@i) q4e13@x)))) ((letrec ((q4e07@loop (lambda (q4e09@ret q4e0a@rtd) (if q4e0a@rtd (q4e07@loop (append q4e09@ret (q4d88@map-with-index (lambda (q4e0d@i q4e0e@field) (cons q4e0e@field (q4e06@ref q4e0a@rtd q4e0d@i q4e03@r))) (vector->list (record-type-field-names q4e0a@rtd)))) (record-type-parent q4e0a@rtd)) q4e09@ret)))) q4e07@loop) '() (record-rtd q4e03@r)))) '#f))) (set! q4d88@map-with-index (lambda (q4e19@proc q4e1a@lst) ((letrec ((q4e1d@loop (lambda (q4e1f@i q4e20@lst q4e21@ret) (if (null? q4e20@lst) (reverse q4e21@ret) (q4e1d@loop (+ q4e1f@i '1) (cdr q4e20@lst) (cons (q4e19@proc q4e1f@i (car q4e20@lst)) q4e21@ret)))))) q4e1d@loop) '0 q4e1a@lst '()))) (set! q4d8a@repl (lambda q4e25@x ((lambda (q4e28@rec) (begin (set! q4e28@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (q4e2b@q4e29) (lambda () (with-exception-handler (lambda (q4e2d@e) ((call/cc (lambda (q4e2f@q4e2a) (q4e2b@q4e29 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? q4e2d@e) (q4d84@condition-printer q4e2d@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" q4e2d@e))) (q4e2f@q4e2a (lambda () (raise-continuable q4e2d@e)))))))))) (lambda () ((letrec ((q4e31@loop (lambda (q4e33@line q4e34@accum) ((lambda (q4e38@parentheses-ok? q4e3a@eval-string-print) (begin (set! q4e38@parentheses-ok? (lambda (q4e3f@text) ((letrec ((q4e41@loop (lambda (q4e43@chars q4e44@p0 q4e45@p1) (if (null? q4e43@chars) (= '0 q4e44@p0 q4e45@p1) ((lambda (q4e49@t) (if (memv q4e49@t '(#\()) (q4e41@loop (cdr q4e43@chars) (+ q4e44@p0 '1) q4e45@p1) (if (memv q4e49@t '(#\))) (q4e41@loop (cdr q4e43@chars) (- q4e44@p0 '1) q4e45@p1) (if (memv q4e49@t '(#\[)) (q4e41@loop (cdr q4e43@chars) q4e44@p0 (+ q4e45@p1 '1)) (if (memv q4e49@t '(#\])) (q4e41@loop (cdr q4e43@chars) q4e44@p0 (- q4e45@p1 '1)) (q4e41@loop (cdr q4e43@chars) q4e44@p0 q4e45@p1)))))) (car q4e43@chars)))))) q4e41@loop) (string->list q4e3f@text) '0 '0))) (set! q4e3a@eval-string-print (lambda (q4e3d@text) (if (not (or (string=? '"\n" q4e3d@text) (= '0 (string-length q4e3d@text)))) (write (q4d98@eval-top-level (call-with-port (open-string-input-port q4e3d@text) read))) (void)))) (if (eof-object? q4e33@line) (begin (q4e3a@eval-string-print q4e34@accum) (exit)) ((lambda (q4e3b@current) (if (q4e38@parentheses-ok? q4e3b@current) (q4e3a@eval-string-print q4e3b@current) (q4e31@loop (get-line (current-input-port)) q4e3b@current))) (string-append q4e34@accum q4e33@line))))) '#f '#f)))) q4e31@loop) (get-line (current-input-port)) '""))))))) (newline) (q4e28@rec)))) (q4e28@rec))) '#f))) (set! q4d8c@trace-printer (q2876@q27a0@make-parameter write)) (set! q4d8e@command-line (q2876@q27a0@make-parameter (get-command-line))) (set! q4d90@local-library-path (lambda (q4e4b@filename) (q2ade@q296d@library-path))) (set! q4d92@load/args (lambda (q4e4d@filename . q4e4f@args) (begin (apply q4da2@load-r6rs-top-level q4e4d@filename 'load q4e4f@args) (void)))) (set! q4d94@load (lambda (q4e51@filename) (begin (apply q4da2@load-r6rs-top-level q4e51@filename 'load (q4d8e@command-line)) (void)))) (set! q4d96@ironscheme-build (lambda () (q4d94@load '"ironscheme-buildscript.ss"))) (set! q4d98@eval-top-level (lambda (q4e53@x) (q49a8@q2fa0@eval q4e53@x (q49be@q2fcc@interaction-environment)))) (set! q4d9a@compile-system-libraries (lambda () (q4d98@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! q4d9c@compile (lambda (q4e55@filename) (q4da2@load-r6rs-top-level q4e55@filename 'compile))) (set! q4d9e@compile->closure (lambda (q4e57@filename) (q4da2@load-r6rs-top-level q4e57@filename 'closure))) (set! q4da0@pre-compile-r6rs-file (lambda (q4e59@filename) (q4da2@load-r6rs-top-level q4e59@filename 'compile))) (set! q4da2@load-r6rs-top-level (lambda (q4e5b@filename q4e5c@how . q4e5f@args) ((lambda (q4e65@q4e62 q4e66@q4e64) ((lambda (q4e69@swap) (dynamic-wind q4e69@swap (lambda () ((lambda (q4e6b@x*) ((lambda (q4e6d@t) (if (memv q4e6d@t '(closure)) (q49bd@q2fca@pre-compile-r6rs-top-level q4e6b@x*) (if (memv q4e6d@t '(load)) ((lambda (q4e73@q4e70 q4e74@q4e72) ((lambda (q4e77@swap) (dynamic-wind q4e77@swap (lambda () ((q49bc@q2fc8@compile-r6rs-top-level q4e6b@x*))) q4e77@swap)) (lambda () ((lambda (q4e79@t) (begin (q4e73@q4e70 q4e74@q4e72) (set! q4e74@q4e72 q4e79@t))) (q4e73@q4e70))))) q4d8e@command-line (cons q4e5b@filename (car q4e5f@args))) (if (memv q4e6d@t '(compile)) (begin (q49bc@q2fc8@compile-r6rs-top-level q4e6b@x*) (q2ae2@q2975@serialize-all q2871@q2796@serialize-library q28cb@q2884@compile-core-expr)) (if '#f '#f (void)))))) q4e5c@how)) (with-input-from-file q4e5b@filename (lambda () ((letrec ((q4e7b@f (lambda () ((lambda (q4e7d@x) (if (eof-object? q4e7d@x) '() (cons q4e7d@x (q4e7b@f)))) (q2869@q2786@read-annotated))))) q4e7b@f)))))) q4e69@swap)) (lambda () ((lambda (q4e7f@t) (begin (q4e65@q4e62 q4e66@q4e64) (set! q4e66@q4e64 q4e7f@t))) (q4e65@q4e62))))) q2ade@q296d@library-path (q4d90@local-library-path q4e5b@filename)))) (set! q4da4@load-r6rs-top-level-sexp (lambda (q4e81@import-spec q4e82@thunk) ((lambda (q4e89@q4e86 q4e8a@q4e88) ((lambda (q4e8d@swap) (dynamic-wind q4e8d@swap (lambda () ((lambda (q4e93@q4e90 q4e94@q4e92) ((lambda (q4e97@swap) (dynamic-wind q4e97@swap (lambda () ((q49bc@q2fc8@compile-r6rs-top-level (list (cons 'import q4e81@import-spec) (list q4e82@thunk))))) q4e97@swap)) (lambda () ((lambda (q4e99@t) (begin (q4e93@q4e90 q4e94@q4e92) (set! q4e94@q4e92 q4e99@t))) (q4e93@q4e90))))) q4d8e@command-line '())) q4e8d@swap)) (lambda () ((lambda (q4e9b@t) (begin (q4e89@q4e86 q4e8a@q4e88) (set! q4e8a@q4e88 q4e9b@t))) (q4e89@q4e86))))) q2ade@q296d@library-path (q4d90@local-library-path '"")))) (begin (set! q4eb1@q4da4@load-r6rs-top-level-sexp q4da4@load-r6rs-top-level-sexp) (set! q4eb0@q4da2@load-r6rs-top-level q4da2@load-r6rs-top-level) (set! q4eaf@q4da0@pre-compile-r6rs-file q4da0@pre-compile-r6rs-file) (set! q4eae@q4d9e@compile->closure q4d9e@compile->closure) (set! q4ead@q4d9c@compile q4d9c@compile) (set! q4eac@q4d9a@compile-system-libraries q4d9a@compile-system-libraries) (set! q4eab@q4d98@eval-top-level q4d98@eval-top-level) (set! q4eaa@q4d96@ironscheme-build q4d96@ironscheme-build) (set! q4ea9@q4d94@load q4d94@load) (set! q4ea8@q4d92@load/args q4d92@load/args) (set! q4ea7@q4d90@local-library-path q4d90@local-library-path) (set! q4ea6@q4d8e@command-line q4d8e@command-line) (set! q4ea5@q4d8c@trace-printer q4d8c@trace-printer) (set! q4ea4@q4d8a@repl q4d8a@repl) (set! q4ea3@q4d88@map-with-index q4d88@map-with-index) (set! q4ea2@q4d86@record->field-alist q4d86@record->field-alist) (set! q4ea1@q4d84@condition-printer q4d84@condition-printer) (set! q4ea0@q4d82@rpad q4d82@rpad) (set! q4e9f@q4d80@for-each-with-index q4d80@for-each-with-index) (set! q4e9e@q4d7e@parse-and-add-library-path q4d7e@parse-and-add-library-path) (set! q4e9d@q4d7c@add-library-path! q4d7c@add-library-path!) (q2ae3@q2977@current-precompiled-library-loader q2872@q2798@load-serialized-library) (set-symbol-value! 'load q4d94@load) (set-symbol-value! 'pre-compile-r6rs-file q4da0@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs q4d98@eval-top-level) (set-symbol-value! 'int-env-syms q499f@q2f8e@interaction-environment-symbols) (set-symbol-value! 'expanded2core q28ca@q2882@expanded->core) (set-symbol-value! 'trace-printer q4d8c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (q4da5@c) (condition (q4cd9@q4ae3@make-non-continuable-violation) (q4ccf@q4aca@make-who-condition 'raise) (q4c93@q4a2b@make-message-condition '"returned from non-continuable exception") (q4cc5@q4aaf@make-irritants-condition (list q4da5@c))))) (q4d7e@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (q4d7e@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (q4d7c@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (q4d7c@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (q4d7c@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (q4da7@prefix) (q2adf@q296f@library-extensions (q4da7@prefix '".mosh" (q2adf@q296f@library-extensions)))) (lambda (q4da9@ext q4daa@ls) (append (map (lambda (q4dad@x) (string-append q4da9@ext q4dad@x)) q4daa@ls) q4daa@ls))) ((lambda (q4daf@args q4db0@port) ((lambda (q4db4@ref) (begin (set! q4db4@ref (lambda (q4dbf@rtd q4dc0@i q4dc1@x) ((lambda (q4dc5@val) (if (symbol? q4dc5@val) (ungensym q4dc5@val) q4dc5@val)) ((record-accessor q4dbf@rtd q4dc0@i) q4dc1@x)))) (with-exception-handler (lambda (q4db5@c) (if (condition? q4db5@c) (q4d84@condition-printer q4db5@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" q4db5@c))) (lambda () (if ((call/cc (lambda (q4db9@q4db7) (lambda () (with-exception-handler (lambda (q4dbb@c) ((call/cc (lambda (q4dbd@q4db8) (q4db9@q4db7 (lambda () (if '#t '#f (q4dbd@q4db8 (lambda () (raise-continuable q4dbb@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (q4da4@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? q4daf@args) (q4d8a@repl) (q4da2@load-r6rs-top-level (car q4daf@args) 'load (cdr q4daf@args)))))))) '#f)) (q4d8e@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
