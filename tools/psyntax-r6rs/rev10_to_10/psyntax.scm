;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (g2778@read-annotated g277a@annotation-stripped g277c@annotation? g277e@annotation-source g2780@annotation-expression g2782@scm->fasl g2784@fasl-save g2786@fasl-load g2788@serialize-library g278a@load-serialized-library g278c@make-record-printer g278e@compile-core g2790@read-library-source-file g2792@make-parameter g27fa@file-options-spec) (begin (set! g2778@read-annotated read) (set! g277a@annotation-stripped (lambda (g27fb@x) (g2780@annotation-expression g27fb@x))) (set! g277c@annotation? (lambda (g27fd@x) (source-info g27fd@x))) (set! g277e@annotation-source (lambda (g27ff@x) (source-info g27ff@x))) (set! g2780@annotation-expression (lambda (g2801@x) (if (pair? g2801@x) (cons (car g2801@x) (cdr g2801@x)) (display '"line:46\n")))) (set! g2782@scm->fasl (lambda (g2803@filename) (string-append g2803@filename '".mosh-fasl"))) (set! g2784@fasl-save (lambda (g2805@filename g2806@obj) (call-with-port (open-file-output-port g2805@filename) (lambda (g2809@port) ((symbol-value 'fasl-write!) g2806@obj g2809@port))))) (set! g2786@fasl-load (lambda (g280b@filename) (call-with-port (open-file-input-port g280b@filename) (symbol-value 'fasl-read!)))) (set! g2788@serialize-library (lambda (g280d@filename g280e@obj) (begin (format '#t '"serialize-library ~a\n..." g280d@filename) ((lambda (g2811@expanded2core) ((lambda (g2813@compile) ((lambda (g2815@code) ((lambda (g2817@pivot) ((lambda (g2819@visit) ((lambda () (begin (set-car! g2817@pivot g2819@visit) ((lambda (g281b@pivot) ((lambda (g281d@invoke) ((lambda () (set-car! g281b@pivot g281d@invoke)))) (g2813@compile (g2811@expanded2core (car g281b@pivot))))) (cdr g2817@pivot)))))) (g2813@compile (g2811@expanded2core (car g2817@pivot))))) (cddddr (cddddr g2815@code)))) g280e@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (g281f@fasl-file) (begin (if (file-exists? g281f@fasl-file) (delete-file g281f@fasl-file) (void)) ((call/cc (lambda (g2823@g2821) (lambda () (with-exception-handler (lambda (g2825@c) ((call/cc (lambda (g2827@g2822) (g2823@g2821 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " g280d@filename) (if (file-exists? g281f@fasl-file) (delete-file g281f@fasl-file) (void)) '#f) (g2827@g2822 (lambda () (raise-continuable g2825@c)))))))))) (lambda () (begin (g2784@fasl-save g281f@fasl-file g280e@obj) (display '"OK\n")))))))))) (g2782@scm->fasl g280d@filename))))) (set! g278a@load-serialized-library (lambda (g2829@filename g282a@obj) ((lambda (g282d@fasl-file) (if (and (file-exists? g282d@fasl-file) ((symbol-value 'file-newer?) g282d@fasl-file g2829@filename)) ((lambda (g282f@expanded2core) ((lambda (g2831@eval-compiled-core) ((lambda (g2833@code) ((lambda (g2835@pivot) ((lambda (g2837@visit) ((lambda (g2839@visit-proc) ((lambda () (begin (set-car! g2835@pivot g2839@visit-proc) ((lambda (g283b@pivot) ((lambda (g283d@invoke) ((lambda () (begin (set-car! g283b@pivot (lambda () (g2831@eval-compiled-core g283d@invoke))) (apply g282a@obj g2833@code))))) (car g283b@pivot))) (cdr g2835@pivot)) '#t)))) (lambda () (g2831@eval-compiled-core g2837@visit)))) (car g2835@pivot))) (cddddr (cddddr g2833@code)))) (g2786@fasl-load g282d@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (g2782@scm->fasl g2829@filename)))) (set! g278c@make-record-printer (lambda (g283f@name g2840@printer) (lambda g2843@x (begin (display '"record printer") (for-each display g2843@x))))) (set! g278e@compile-core (lambda g2845@x (apply error 'comile-core '"not implementated" g2845@x))) (set! g2790@read-library-source-file (lambda (g2847@file-name) (with-input-from-file g2847@file-name g2778@read-annotated))) (set! g2792@make-parameter (lambda g2857 ((lambda (g2858) (if (= g2858 '1) (apply (lambda (g2849@x) (g2792@make-parameter g2849@x (lambda (g284b@x) g284b@x))) g2857) (if (= g2858 '2) (apply (lambda (g284d@x g284e@fender) ((lambda (g2851@x) (lambda g2855 ((lambda (g2856) (if (= g2856 '0) (apply (lambda () g2851@x) g2855) (if (= g2856 '1) (apply (lambda (g2853@v) (set! g2851@x (g284e@fender g2853@v))) g2855) (error 'apply '"invalid arg count")))) (length g2855)))) (g284e@fender g284d@x))) g2857) (error 'apply '"invalid arg count")))) (length g2857)))) (set! g27fa@file-options-spec (lambda (g2859@x) g2859@x)) (begin (set! g2869@g27fa@file-options-spec g27fa@file-options-spec) (set! g2868@g2792@make-parameter g2792@make-parameter) (set! g2867@g2790@read-library-source-file g2790@read-library-source-file) (set! g2866@g278e@compile-core g278e@compile-core) (set! g2865@g278c@make-record-printer g278c@make-record-printer) (set! g2864@g278a@load-serialized-library g278a@load-serialized-library) (set! g2863@g2788@serialize-library g2788@serialize-library) (set! g2862@g2786@fasl-load g2786@fasl-load) (set! g2861@g2784@fasl-save g2784@fasl-save) (set! g2860@g2782@scm->fasl g2782@scm->fasl) (set! g285f@g2780@annotation-expression g2780@annotation-expression) (set! g285e@g277e@annotation-source g277e@annotation-source) (set! g285d@g277c@annotation? g277c@annotation?) (set! g285c@g277a@annotation-stripped g277a@annotation-stripped) (set! g285b@g2778@read-annotated g2778@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g286e@current-primitive-locations g2870@mutable? g2872@rewriter g2874@expanded->core g2876@compile-core-expr g2878@pretty-print g287a@compile-core-expr-to-port) (begin (set! g286e@current-primitive-locations (g2868@g2792@make-parameter (lambda (g287b@x) '#f) (lambda (g287d@p) g287d@p))) (set! g2870@mutable? (lambda (g287f@x) (or (pair? g287f@x) (vector? g287f@x) (hashtable? g287f@x)))) (set! g2872@rewriter (lambda (g2881@quote-hack?) ((lambda (g2884@f) (begin (set! g2884@f (lambda (g2885@x) (if (pair? g2885@x) ((lambda (g2887@t) (if (memv g2887@t '(quote)) (if (and g2881@quote-hack? (g2870@mutable? (cadr g2885@x))) ((lambda (g2889@g) (begin (set-symbol-value! g2889@g (cadr g2885@x)) g2889@g)) (gensym)) g2885@x) (if (memv g2887@t '(case-lambda)) (cons 'case-lambda (map (lambda (g288b@x) (cons (car g288b@x) (map g2884@f (cdr g288b@x)))) (cdr g2885@x))) (if (memv g2887@t '(lambda)) (cons* 'lambda (cadr g2885@x) (map g2884@f (cddr g2885@x))) (if (memv g2887@t '(letrec)) ((lambda (g288d@bindings g288e@body*) ((lambda (g2891@lhs* g2892@rhs*) (cons* 'letrec (map list g2891@lhs* (map g2884@f g2892@rhs*)) (map g2884@f g288e@body*))) (map car g288d@bindings) (map cadr g288d@bindings))) (cadr g2885@x) (cddr g2885@x)) (if (memv g2887@t '(letrec*)) ((lambda (g2895@bindings g2896@body*) ((lambda (g2899@lhs* g289a@rhs*) (cons* 'letrec* (map list g2899@lhs* (map g2884@f g289a@rhs*)) (map g2884@f g2896@body*))) (map car g2895@bindings) (map cadr g2895@bindings))) (cadr g2885@x) (cddr g2885@x)) (if (memv g2887@t '(library-letrec*)) ((lambda (g289d@name g289e@x) ((lambda (g28a1@bindings g28a2@body*) ((lambda (g28a5@lhs* g28a6@lhs** g28a7@rhs*) (cons* 'library-letrec* g289d@name (map list g28a5@lhs* g28a6@lhs** (map g2884@f g28a7@rhs*)) (map g2884@f g28a2@body*))) (map car g28a1@bindings) (map cadr g28a1@bindings) (map caddr g28a1@bindings))) (cadr g289e@x) (cddr g289e@x))) (cadr g2885@x) (cdr g2885@x)) (if (memv g2887@t '(begin)) (cons 'begin (map g2884@f (cdr g2885@x))) (if (memv g2887@t '(set!)) (list 'set! (cadr g2885@x) (g2884@f (caddr g2885@x))) (if (memv g2887@t '(primitive)) ((lambda (g28ab@op) ((lambda (g28ad@t) (if g28ad@t ((lambda (g28af@loc) g28af@loc) g28ad@t) g28ab@op)) ((g286e@current-primitive-locations) g28ab@op))) (cadr g2885@x)) (if (memv g2887@t '(define)) g2885@x (if (list? g2885@x) (map g2884@f g2885@x) (error 'rewrite '"invalid form ~s ~s" g2885@x (list? g2885@x)))))))))))))) (car g2885@x)) g2885@x))) g2884@f)) '#f))) (set! g2874@expanded->core (lambda (g28b1@x) ((g2872@rewriter '#f) g28b1@x))) (set! g2876@compile-core-expr (lambda (g28b3@x) ((g2872@rewriter '#f) g28b3@x))) (set! g2878@pretty-print write) (set! g287a@compile-core-expr-to-port (lambda (g28b5@x g28b6@p) (g2878@pretty-print ((g2872@rewriter '#f) g28b5@x) g28b6@p))) (begin (set! g28bf@g287a@compile-core-expr-to-port g287a@compile-core-expr-to-port) (set! g28be@g2878@pretty-print g2878@pretty-print) (set! g28bd@g2876@compile-core-expr g2876@compile-core-expr) (set! g28bc@g2874@expanded->core g2874@expanded->core) (set! g28bb@g2872@rewriter g2872@rewriter) (set! g28ba@g2870@mutable? g2870@mutable?) (set! g28b9@g286e@current-primitive-locations g286e@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (g290e@make-collection g2910@current-library-collection g2916@g2911 g2918@g2913 g291a@g2912 g291d@library? g291f@make-library g2921@library-id g2923@library-name g2925@library-version g2927@library-imp* g2929@library-vis* g292b@library-inv* g292d@library-subst g292f@library-env g2931@library-visit-state g2933@library-invoke-state g2935@library-visit-code g2937@library-invoke-code g2939@library-visible? g293b@library-source-file-name g293d@set-library-id! g293f@set-library-name! g2941@set-library-version! g2943@set-library-imp*! g2945@set-library-vis*! g2947@set-library-inv*! g2949@set-library-subst! g294b@set-library-env! g294d@set-library-visit-state! g294f@set-library-invoke-state! g2951@set-library-visit-code! g2953@set-library-invoke-code! g2955@set-library-visible?! g2957@set-library-source-file-name! g2959@rp g295b@find-dependencies g295d@find-library-by g295f@library-path g2961@library-extensions g2963@library-name->file-name g2965@file-locator g2967@serialize-all g2969@current-precompiled-library-loader g296b@try-load-from-file g296d@library-loader g296f@current-library-expander g2971@external-pending-libraries g2973@find-external-library g2975@find-library-by-name g2977@library-exists? g2979@find-library-by-spec/die g297b@label->binding-table g297d@install-library-record g297f@install-library g2981@imported-label->binding g2983@invoke-library g2985@visit-library g2987@invoke-library-by-spec g2989@installed-libraries g298b@library-spec) (begin (set! g290e@make-collection (lambda () ((lambda (g298c@set) ((lambda (g298f@set-cons) (begin (set! g298f@set-cons (lambda (g2994@x g2995@ls) (if (memq g2994@x g2995@ls) g2995@ls (cons g2994@x g2995@ls)))) (lambda g2992 ((lambda (g2993) (if (= g2993 '0) (apply (lambda () g298c@set) g2992) (if (= g2993 '1) (apply (lambda (g2990@x) (set! g298c@set (g298f@set-cons g2990@x g298c@set))) g2992) (error 'apply '"invalid arg count")))) (length g2992))))) '#f)) '()))) (set! g2910@current-library-collection (g2868@g2792@make-parameter (g290e@make-collection) (lambda (g2998@x) (begin (if (not (procedure? g2998@x)) (assertion-violation 'current-library-collection '"not a procedure" g2998@x) (void)) g2998@x)))) (set! g2916@g2911 (make-record-type-descriptor 'library '#f 'g2914 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! g2918@g2913 '#f) (set! g291a@g2912 (make-record-constructor-descriptor g2916@g2911 '#f g2918@g2913)) (set! g291d@library? (record-predicate g2916@g2911)) (set! g291f@make-library (record-constructor g291a@g2912)) (set! g2921@library-id (record-accessor g2916@g2911 '0)) (set! g2923@library-name (record-accessor g2916@g2911 '1)) (set! g2925@library-version (record-accessor g2916@g2911 '2)) (set! g2927@library-imp* (record-accessor g2916@g2911 '3)) (set! g2929@library-vis* (record-accessor g2916@g2911 '4)) (set! g292b@library-inv* (record-accessor g2916@g2911 '5)) (set! g292d@library-subst (record-accessor g2916@g2911 '6)) (set! g292f@library-env (record-accessor g2916@g2911 '7)) (set! g2931@library-visit-state (record-accessor g2916@g2911 '8)) (set! g2933@library-invoke-state (record-accessor g2916@g2911 '9)) (set! g2935@library-visit-code (record-accessor g2916@g2911 '10)) (set! g2937@library-invoke-code (record-accessor g2916@g2911 '11)) (set! g2939@library-visible? (record-accessor g2916@g2911 '12)) (set! g293b@library-source-file-name (record-accessor g2916@g2911 '13)) (set! g293d@set-library-id! (record-mutator g2916@g2911 '0)) (set! g293f@set-library-name! (record-mutator g2916@g2911 '1)) (set! g2941@set-library-version! (record-mutator g2916@g2911 '2)) (set! g2943@set-library-imp*! (record-mutator g2916@g2911 '3)) (set! g2945@set-library-vis*! (record-mutator g2916@g2911 '4)) (set! g2947@set-library-inv*! (record-mutator g2916@g2911 '5)) (set! g2949@set-library-subst! (record-mutator g2916@g2911 '6)) (set! g294b@set-library-env! (record-mutator g2916@g2911 '7)) (set! g294d@set-library-visit-state! (record-mutator g2916@g2911 '8)) (set! g294f@set-library-invoke-state! (record-mutator g2916@g2911 '9)) (set! g2951@set-library-visit-code! (record-mutator g2916@g2911 '10)) (set! g2953@set-library-invoke-code! (record-mutator g2916@g2911 '11)) (set! g2955@set-library-visible?! (record-mutator g2916@g2911 '12)) (set! g2957@set-library-source-file-name! (record-mutator g2916@g2911 '13)) (set! g2959@rp (g2865@g278c@make-record-printer 'library (lambda (g299a@x g299b@p g299c@wr) (begin (if (not (g291d@library? g299a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (g2925@library-version g299a@x)) (g2923@library-name g299a@x) (append (g2923@library-name g299a@x) (list (g2925@library-version g299a@x))))) g299b@p))))) (set! g295b@find-dependencies (lambda (g29a0@ls) (if (null? g29a0@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! g295d@find-library-by (lambda (g29a2@pred) ((letrec ((g29a4@f (lambda (g29a6@ls) (if (null? g29a6@ls) '#f (if (g29a2@pred (car g29a6@ls)) (car g29a6@ls) (g29a4@f (cdr g29a6@ls))))))) g29a4@f) ((g2910@current-library-collection))))) (set! g295f@library-path (g2868@g2792@make-parameter '(".") (lambda (g29a8@x) (if (and (list? g29a8@x) (for-all string? g29a8@x)) (map (lambda (g29aa@x) g29aa@x) g29a8@x) (assertion-violation 'library-path '"not a list of strings" g29a8@x))))) (set! g2961@library-extensions (g2868@g2792@make-parameter '(".sls" ".ss" ".scm") (lambda (g29ac@x) (if (and (list? g29ac@x) (for-all string? g29ac@x)) (map (lambda (g29ae@x) g29ae@x) g29ac@x) (assertion-violation 'library-extensions '"not a list of strings" g29ac@x))))) (set! g2963@library-name->file-name (lambda (g29b0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (g29b6@g29b3 g29b7@g29b5) ((lambda (g29ba@extract g29bb@p) ((lambda (g29bf@display-hex) (begin (set! g29bf@display-hex (lambda (g29c8@n) (if (<= '0 g29c8@n '9) (display g29c8@n g29bb@p) (display (integer->char (+ (char->integer '#\a) (- g29c8@n '10))) g29bb@p)))) (begin ((letrec ((g29c0@f (lambda (g29c2@ls) (if (not (null? g29c2@ls)) (begin (display '"/" g29bb@p) (for-each (lambda (g29c4@c) (if (or (char<=? '#\a g29c4@c '#\z) (char<=? '#\A g29c4@c '#\Z) (char<=? '#\0 g29c4@c '#\9) (memv g29c4@c '(#\- #\. #\_ #\~))) (display g29c4@c g29bb@p) (begin (display '"%" g29bb@p) ((lambda (g29c6@n) (begin (g29bf@display-hex (quotient g29c6@n '16)) (g29bf@display-hex (remainder g29c6@n '16)))) (char->integer g29c4@c))))) (string->list (symbol->string (car g29c2@ls)))) (g29c0@f (cdr g29c2@ls))) (void))))) g29c0@f) g29b0@x) (g29ba@extract)))) '#f)) g29b7@g29b5 g29b6@g29b3))))) (set! g2965@file-locator (g2868@g2792@make-parameter (lambda (g29ca@x) ((lambda (g29cc@str) ((letrec ((g29ce@f (lambda (g29d0@ls g29d1@exts g29d2@failed-list) (if (null? g29d0@ls) ((lambda () ((lambda (g29de@g29d9 g29e0@g29db g29e2@g29da g29e5@g29d8 g29e7@make-library-resolution-condition g29e9@g29d6 g29eb@g29d7 g29ed@library-resolution-condition? g29ef@condition-library g29f1@condition-files) (begin (set! g29de@g29d9 (make-record-type-descriptor '&library-resolution g4c7f@g49c6@&condition-rtd 'g29dc '#f '#f '#((immutable library) (immutable files)))) (set! g29e0@g29db '#f) (set! g29e2@g29da (make-record-constructor-descriptor g29de@g29d9 g4c80@g49c8@&condition-rcd g29e0@g29db)) (set! g29e5@g29d8 (record-predicate g29de@g29d9)) (set! g29e7@make-library-resolution-condition (record-constructor g29e2@g29da)) (set! g29e9@g29d6 (record-accessor g29de@g29d9 '0)) (set! g29eb@g29d7 (record-accessor g29de@g29d9 '1)) (set! g29ed@library-resolution-condition? (condition-predicate g29de@g29d9)) (set! g29ef@condition-library (condition-accessor g29de@g29d9 g29e9@g29d6)) (set! g29f1@condition-files (condition-accessor g29de@g29d9 g29eb@g29d7)) (raise (condition (g4c9f@g4a60@make-error) (g4cc1@g4abc@make-who-condition 'expander) (g4c85@g4a1d@make-message-condition '"cannot locate library in library-path") (g29e7@make-library-resolution-condition g29ca@x (reverse g29d2@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? g29d1@exts) (g29ce@f (cdr g29d0@ls) (g2961@library-extensions) g29d2@failed-list) ((lambda (g29f2@name) (if (file-exists? g29f2@name) g29f2@name (g29ce@f g29d0@ls (cdr g29d1@exts) (cons g29f2@name g29d2@failed-list)))) (string-append (car g29d0@ls) g29cc@str (car g29d1@exts)))))))) g29ce@f) (g295f@library-path) (g2961@library-extensions) '())) (g2963@library-name->file-name g29ca@x))) (lambda (g29f4@f) (if (procedure? g29f4@f) g29f4@f (assertion-violation 'file-locator '"not a procedure" g29f4@f))))) (set! g2967@serialize-all (lambda (g29f6@serialize g29f7@compile) ((lambda (g29fb@library-desc) (begin (set! g29fb@library-desc (lambda (g29fe@x) (list (g2921@library-id g29fe@x) (g2923@library-name g29fe@x)))) (for-each (lambda (g29fc@x) (if (g293b@library-source-file-name g29fc@x) (g29f6@serialize (g293b@library-source-file-name g29fc@x) (list (g2921@library-id g29fc@x) (g2923@library-name g29fc@x) (g2925@library-version g29fc@x) (map g29fb@library-desc (g2927@library-imp* g29fc@x)) (map g29fb@library-desc (g2929@library-vis* g29fc@x)) (map g29fb@library-desc (g292b@library-inv* g29fc@x)) (g292d@library-subst g29fc@x) (g292f@library-env g29fc@x) (g29f7@compile (g2935@library-visit-code g29fc@x)) (g29f7@compile (g2937@library-invoke-code g29fc@x)) (g2939@library-visible? g29fc@x))) (void))) ((g2910@current-library-collection))))) '#f))) (set! g2969@current-precompiled-library-loader (g2868@g2792@make-parameter (lambda (g2a00@filename g2a01@sk) '#f))) (set! g296b@try-load-from-file (lambda (g2a04@filename) ((g2969@current-precompiled-library-loader) g2a04@filename (lambda g2a2a ((lambda (g2a2b) (if (= g2a2b '11) (apply (lambda (g2a06@id g2a07@name g2a08@ver g2a09@imp* g2a0a@vis* g2a0b@inv* g2a0c@exp-subst g2a0d@exp-env g2a0e@visit-proc g2a0f@invoke-proc g2a10@visible?) ((letrec ((g2a1c@f (lambda (g2a1e@deps) (if (null? g2a1e@deps) (begin (g297f@install-library g2a06@id g2a07@name g2a08@ver g2a09@imp* g2a0a@vis* g2a0b@inv* g2a0c@exp-subst g2a0d@exp-env g2a0e@visit-proc g2a0f@invoke-proc '#f '#f g2a10@visible? '#f) '#t) ((lambda (g2a20@d) ((lambda (g2a22@label g2a23@dname) ((lambda (g2a26@l) (if (and (g291d@library? g2a26@l) (eq? g2a22@label (g2921@library-id g2a26@l))) (g2a1c@f (cdr g2a1e@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" g2a07@name g2a23@dname g2a04@filename g2a26@l g2a22@label (g2921@library-id g2a26@l)) '#f))) (g2975@find-library-by-name g2a23@dname))) (car g2a20@d) (cadr g2a20@d))) (car g2a1e@deps)))))) g2a1c@f) (append g2a09@imp* g2a0a@vis* g2a0b@inv*))) g2a2a) (if (>= g2a2b '0) (apply (lambda g2a28@others '#f) g2a2a) (error 'apply '"invalid arg count")))) (length g2a2a)))))) (set! g296d@library-loader (g2868@g2792@make-parameter (lambda (g2a2c@x) ((lambda (g2a2e@file-name) (if (not g2a2e@file-name) (assertion-violation '#f '"cannot file library" g2a2c@x) (or (g296b@try-load-from-file g2a2e@file-name) ((g296f@current-library-expander) (g2867@g2790@read-library-source-file g2a2e@file-name) g2a2e@file-name (lambda (g2a30@name) (if (not (fast-equal? g2a30@name g2a2c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (g2a36@g2a33 g2a37@g2a35) ((lambda (g2a3a@e g2a3b@p) (begin (display '"expected to find library " g2a3b@p) (write g2a2c@x g2a3b@p) (display '" in file " g2a3b@p) (display g2a2e@file-name g2a3b@p) (display '", found " g2a3b@p) (write g2a30@name g2a3b@p) (display '" instead" g2a3b@p) (g2a3a@e))) g2a37@g2a35 g2a36@g2a33)))) (void))))))) ((g2965@file-locator) g2a2c@x))) (lambda (g2a3e@f) (if (procedure? g2a3e@f) g2a3e@f (assertion-violation 'library-locator '"not a procedure" g2a3e@f))))) (set! g296f@current-library-expander (g2868@g2792@make-parameter (lambda (g2a40@x) (assertion-violation 'library-expander '"not initialized")) (lambda (g2a42@f) (if (procedure? g2a42@f) g2a42@f (assertion-violation 'library-expander '"not a procedure" g2a42@f))))) (set! g2971@external-pending-libraries (g2868@g2792@make-parameter '())) (set! g2973@find-external-library (lambda (g2a44@name) (begin (if (member g2a44@name (g2971@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" g2a44@name) (void)) ((lambda (g2a4a@g2a47 g2a4b@g2a49) ((lambda (g2a4e@swap) (dynamic-wind g2a4e@swap (lambda () (begin ((g296d@library-loader) g2a44@name) (or (g295d@find-library-by (lambda (g2a50@x) (fast-equal? (g2923@library-name g2a50@x) g2a44@name))) (assertion-violation '#f '"handling external library did not yield the correct library" g2a44@name)))) g2a4e@swap)) (lambda () ((lambda (g2a52@t) (begin (g2a4a@g2a47 g2a4b@g2a49) (set! g2a4b@g2a49 g2a52@t))) (g2a4a@g2a47))))) g2971@external-pending-libraries (cons g2a44@name (g2971@external-pending-libraries)))))) (set! g2975@find-library-by-name (lambda (g2a54@name) (or (g295d@find-library-by (lambda (g2a56@x) (fast-equal? (g2923@library-name g2a56@x) g2a54@name))) (g2973@find-external-library g2a54@name)))) (set! g2977@library-exists? (lambda (g2a58@name) (and (g295d@find-library-by (lambda (g2a5a@x) (fast-equal? (g2923@library-name g2a5a@x) g2a58@name))) '#t))) (set! g2979@find-library-by-spec/die (lambda (g2a5c@spec) ((lambda (g2a5e@id) (or (g295d@find-library-by (lambda (g2a60@x) (eq? g2a5e@id (g2921@library-id g2a60@x)))) (assertion-violation '#f '"cannot find library with required spec" g2a5c@spec))) (car g2a5c@spec)))) (set! g297b@label->binding-table (make-eq-hashtable)) (set! g297d@install-library-record (lambda (g2a62@lib) (begin ((lambda (g2a64@exp-env) (for-each (lambda (g2a66@x) ((lambda (g2a68@label g2a69@binding) ((lambda (g2a6c@binding) (begin (if (hashtable-ref g297b@label->binding-table g2a68@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" g2a68@label (hashtable-ref g297b@label->binding-table g2a68@label '#f) g2a6c@binding) (exit)) (void)) (hashtable-set! g297b@label->binding-table g2a68@label g2a6c@binding))) ((lambda (g2a6e@t) (if (memv g2a6e@t '(global)) (cons 'global (cons g2a62@lib (cdr g2a69@binding))) (if (memv g2a6e@t '(global-macro)) (cons 'global-macro (cons g2a62@lib (cdr g2a69@binding))) (if (memv g2a6e@t '(global-macro!)) (cons 'global-macro! (cons g2a62@lib (cdr g2a69@binding))) g2a69@binding)))) (car g2a69@binding)))) (car g2a66@x) (cdr g2a66@x))) g2a64@exp-env)) (g292f@library-env g2a62@lib)) ((g2910@current-library-collection) g2a62@lib)))) (set! g297f@install-library (lambda (g2a70@id g2a71@name g2a72@ver g2a73@imp* g2a74@vis* g2a75@inv* g2a76@exp-subst g2a77@exp-env g2a78@visit-proc g2a79@invoke-proc g2a7a@visit-code g2a7b@invoke-code g2a7c@visible? g2a7d@source-file-name) ((lambda (g2a8c@imp-lib* g2a8d@vis-lib* g2a8e@inv-lib*) (begin (if (not (and (symbol? g2a70@id) (list? g2a71@name) (list? g2a72@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" g2a70@id g2a71@name g2a72@ver) (void)) (if (g2977@library-exists? g2a71@name) (assertion-violation 'install-library '"library is already installed" g2a71@name) (void)) ((lambda (g2a92@lib) (g297d@install-library-record g2a92@lib)) (g291f@make-library g2a70@id g2a71@name g2a72@ver g2a8c@imp-lib* g2a8d@vis-lib* g2a8e@inv-lib* g2a76@exp-subst g2a77@exp-env g2a78@visit-proc g2a79@invoke-proc g2a7a@visit-code g2a7b@invoke-code g2a7c@visible? g2a7d@source-file-name)))) (map g2979@find-library-by-spec/die g2a73@imp*) (map g2979@find-library-by-spec/die g2a74@vis*) (map g2979@find-library-by-spec/die g2a75@inv*)))) (set! g2981@imported-label->binding (lambda (g2a94@lab) (hashtable-ref g297b@label->binding-table g2a94@lab '#f))) (set! g2983@invoke-library (lambda (g2a96@lib) ((lambda (g2a98@invoke) (if (procedure? g2a98@invoke) (begin (g294f@set-library-invoke-state! g2a96@lib (lambda () (assertion-violation 'invoke '"circularity detected" g2a96@lib))) (for-each g2983@invoke-library (g292b@library-inv* g2a96@lib)) (g294f@set-library-invoke-state! g2a96@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" g2a96@lib))) (g2a98@invoke) (g294f@set-library-invoke-state! g2a96@lib '#t)) (void))) (g2933@library-invoke-state g2a96@lib)))) (set! g2985@visit-library (lambda (g2a9a@lib) ((lambda (g2a9c@visit) (if (procedure? g2a9c@visit) (begin (g294d@set-library-visit-state! g2a9a@lib (lambda () (assertion-violation 'visit '"circularity detected" g2a9a@lib))) (for-each g2983@invoke-library (g2929@library-vis* g2a9a@lib)) (g294d@set-library-visit-state! g2a9a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" g2a9a@lib))) (g2a9c@visit) (g294d@set-library-visit-state! g2a9a@lib '#t)) (void))) (g2931@library-visit-state g2a9a@lib)))) (set! g2987@invoke-library-by-spec (lambda (g2a9e@spec) (g2983@invoke-library (g2979@find-library-by-spec/die g2a9e@spec)))) (set! g2989@installed-libraries (lambda g2aa6 ((lambda (g2aa7) (if (= g2aa7 '1) (apply (lambda (g2aa0@all?) ((letrec ((g2aa2@f (lambda (g2aa4@ls) (if (null? g2aa4@ls) '() (if (or g2aa0@all? (g2939@library-visible? (car g2aa4@ls))) (cons (car g2aa4@ls) (g2aa2@f (cdr g2aa4@ls))) (g2aa2@f (cdr g2aa4@ls))))))) g2aa2@f) ((g2910@current-library-collection)))) g2aa6) (if (= g2aa7 '0) (apply (lambda () (g2989@installed-libraries '#f)) g2aa6) (error 'apply '"invalid arg count")))) (length g2aa6)))) (set! g298b@library-spec (lambda (g2aa8@x) (begin (if (not (g291d@library? g2aa8@x)) (assertion-violation 'library-spec '"not a library" g2aa8@x) (void)) (list (g2921@library-id g2aa8@x) (g2923@library-name g2aa8@x) (g2925@library-version g2aa8@x))))) (begin (set! g2ae6@g298b@library-spec g298b@library-spec) (set! g2ae5@g2989@installed-libraries g2989@installed-libraries) (set! g2ae4@g2987@invoke-library-by-spec g2987@invoke-library-by-spec) (set! g2ae3@g2985@visit-library g2985@visit-library) (set! g2ae2@g2983@invoke-library g2983@invoke-library) (set! g2ae1@g2981@imported-label->binding g2981@imported-label->binding) (set! g2ae0@g297f@install-library g297f@install-library) (set! g2adf@g297d@install-library-record g297d@install-library-record) (set! g2ade@g297b@label->binding-table g297b@label->binding-table) (set! g2add@g2979@find-library-by-spec/die g2979@find-library-by-spec/die) (set! g2adc@g2977@library-exists? g2977@library-exists?) (set! g2adb@g2975@find-library-by-name g2975@find-library-by-name) (set! g2ada@g2973@find-external-library g2973@find-external-library) (set! g2ad9@g2971@external-pending-libraries g2971@external-pending-libraries) (set! g2ad8@g296f@current-library-expander g296f@current-library-expander) (set! g2ad7@g296d@library-loader g296d@library-loader) (set! g2ad6@g296b@try-load-from-file g296b@try-load-from-file) (set! g2ad5@g2969@current-precompiled-library-loader g2969@current-precompiled-library-loader) (set! g2ad4@g2967@serialize-all g2967@serialize-all) (set! g2ad3@g2965@file-locator g2965@file-locator) (set! g2ad2@g2963@library-name->file-name g2963@library-name->file-name) (set! g2ad1@g2961@library-extensions g2961@library-extensions) (set! g2ad0@g295f@library-path g295f@library-path) (set! g2acf@g295d@find-library-by g295d@find-library-by) (set! g2ace@g295b@find-dependencies g295b@find-dependencies) (set! g2acd@g2959@rp g2959@rp) (set! g2acc@g2957@set-library-source-file-name! g2957@set-library-source-file-name!) (set! g2acb@g2955@set-library-visible?! g2955@set-library-visible?!) (set! g2aca@g2953@set-library-invoke-code! g2953@set-library-invoke-code!) (set! g2ac9@g2951@set-library-visit-code! g2951@set-library-visit-code!) (set! g2ac8@g294f@set-library-invoke-state! g294f@set-library-invoke-state!) (set! g2ac7@g294d@set-library-visit-state! g294d@set-library-visit-state!) (set! g2ac6@g294b@set-library-env! g294b@set-library-env!) (set! g2ac5@g2949@set-library-subst! g2949@set-library-subst!) (set! g2ac4@g2947@set-library-inv*! g2947@set-library-inv*!) (set! g2ac3@g2945@set-library-vis*! g2945@set-library-vis*!) (set! g2ac2@g2943@set-library-imp*! g2943@set-library-imp*!) (set! g2ac1@g2941@set-library-version! g2941@set-library-version!) (set! g2ac0@g293f@set-library-name! g293f@set-library-name!) (set! g2abf@g293d@set-library-id! g293d@set-library-id!) (set! g2abe@g293b@library-source-file-name g293b@library-source-file-name) (set! g2abd@g2939@library-visible? g2939@library-visible?) (set! g2abc@g2937@library-invoke-code g2937@library-invoke-code) (set! g2abb@g2935@library-visit-code g2935@library-visit-code) (set! g2aba@g2933@library-invoke-state g2933@library-invoke-state) (set! g2ab9@g2931@library-visit-state g2931@library-visit-state) (set! g2ab8@g292f@library-env g292f@library-env) (set! g2ab7@g292d@library-subst g292d@library-subst) (set! g2ab6@g292b@library-inv* g292b@library-inv*) (set! g2ab5@g2929@library-vis* g2929@library-vis*) (set! g2ab4@g2927@library-imp* g2927@library-imp*) (set! g2ab3@g2925@library-version g2925@library-version) (set! g2ab2@g2923@library-name g2923@library-name) (set! g2ab1@g2921@library-id g2921@library-id) (set! g2ab0@g291f@make-library g291f@make-library) (set! g2aaf@g291d@library? g291d@library?) (set! g2aae@g291a@g2912 g291a@g2912) (set! g2aad@g2918@g2913 g2918@g2913) (set! g2aac@g2916@g2911 g2916@g2911) (set! g2aab@g2910@current-library-collection g2910@current-library-collection) (set! g2aaa@g290e@make-collection g290e@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g2ae9@build-global-define g2b5a@build-lambda g2b5c@build-case-lambda g2b5e@build-let g2b8c@build-sequence g2b8e@build-void g2b90@build-letrec g2b92@build-letrec* g2b94@build-library-letrec* g2b96@build-receive) (begin (set! g2ae9@build-global-define (lambda (g2b97@x) (g2b8e@build-void))) (set! g2b5a@build-lambda (lambda (g2b99@ae g2b9a@vars g2b9b@exp) (list 'lambda g2b9a@vars g2b9b@exp))) (set! g2b5c@build-case-lambda (lambda (g2b9f@ae g2ba0@vars* g2ba1@exp*) ((lambda (g2ba6@build-error g2ba8@build-pred g2baa@build-apply g2bac@expand-case-lambda) (begin (set! g2ba6@build-error (lambda (g2bdd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g2ba8@build-pred (lambda (g2bc5@ae g2bc6@n g2bc7@vars) (call-with-values (lambda () ((letrec ((g2bcf@f (lambda (g2bd1@vars g2bd2@count) (if (pair? g2bd1@vars) (g2bcf@f (cdr g2bd1@vars) (+ g2bd2@count '1)) (if (null? g2bd1@vars) (values g2bd2@count '=) (values g2bd2@count '>=)))))) g2bcf@f) g2bc7@vars '0)) (lambda (g2bd5@g2bcc g2bd6@g2bce) ((lambda (g2bd9@pred g2bda@count) (list (list 'primitive g2bd9@pred) g2bc6@n (list 'quote g2bda@count))) g2bd6@g2bce g2bd5@g2bcc))))) (set! g2baa@build-apply (lambda (g2bbd@ae g2bbe@g g2bbf@vars g2bc0@exp) (list '(primitive apply) (g2b5a@build-lambda g2bbd@ae g2bbf@vars g2bc0@exp) g2bbe@g))) (set! g2bac@expand-case-lambda (lambda (g2bad@ae g2bae@vars g2baf@exp*) ((lambda (g2bb3@g g2bb4@n) (list 'lambda g2bb3@g (g2b5e@build-let g2bad@ae (list g2bb4@n) (list (list '(primitive length) g2bb3@g)) ((letrec ((g2bb7@f (lambda (g2bb9@vars* g2bba@exp*) (if (null? g2bb9@vars*) (g2ba6@build-error g2bad@ae) (list 'if (g2ba8@build-pred g2bad@ae g2bb4@n (car g2bb9@vars*)) (g2baa@build-apply g2bad@ae g2bb3@g (car g2bb9@vars*) (car g2bba@exp*)) (g2bb7@f (cdr g2bb9@vars*) (cdr g2bba@exp*))))))) g2bb7@f) g2ba0@vars* g2baf@exp*)))) (gensym) (gensym)))) (if (= (length g2ba1@exp*) '1) (g2b5a@build-lambda g2b9f@ae (car g2ba0@vars*) (car g2ba1@exp*)) (g2bac@expand-case-lambda g2b9f@ae g2ba0@vars* g2ba1@exp*)))) '#f '#f '#f '#f))) (set! g2b5e@build-let (lambda (g2bdf@ae g2be0@lhs* g2be1@rhs* g2be2@body) (cons (g2b5a@build-lambda g2bdf@ae g2be0@lhs* g2be2@body) g2be1@rhs*))) (set! g2b8c@build-sequence (lambda (g2be7@ae g2be8@exps) ((letrec ((g2beb@loop (lambda (g2bed@exps) (if (null? (cdr g2bed@exps)) (car g2bed@exps) (if (equal? (car g2bed@exps) (g2b8e@build-void)) (g2beb@loop (cdr g2bed@exps)) (cons 'begin g2bed@exps)))))) g2beb@loop) g2be8@exps))) (set! g2b8e@build-void (lambda () '((primitive void)))) (set! g2b90@build-letrec (lambda (g2bef@ae g2bf0@vars g2bf1@val-exps g2bf2@body-exp) (if (null? g2bf0@vars) g2bf2@body-exp (list 'letrec (map list g2bf0@vars g2bf1@val-exps) g2bf2@body-exp)))) (set! g2b92@build-letrec* (lambda (g2bf7@ae g2bf8@vars g2bf9@val-exps g2bfa@body-exp) (if (null? g2bf8@vars) g2bfa@body-exp (g2b5e@build-let g2bf7@ae g2bf8@vars (map (lambda (g2bff@x) (list 'quote '#f)) g2bf8@vars) (g2b8c@build-sequence g2bf7@ae (append (map (lambda (g2c01@lhs g2c02@rhs) (list 'set! g2c01@lhs g2c02@rhs)) g2bf8@vars g2bf9@val-exps) (list g2bfa@body-exp))))))) (set! g2b94@build-library-letrec* (lambda (g2c05@ae g2c06@name g2c07@vars g2c08@locs g2c09@val-exps g2c0a@body-exp) (list 'library-letrec* g2c06@name (map list g2c07@vars g2c08@locs g2c09@val-exps) g2c0a@body-exp))) (set! g2b96@build-receive (lambda (g2c11@ae g2c12@vars g2c13@producer g2c14@body*) (begin (display '"************** in ") (cons 'receive (cons g2c12@vars (cons g2c13@producer g2c14@body*)))))) (begin (set! g2c22@g2b96@build-receive g2b96@build-receive) (set! g2c21@g2b94@build-library-letrec* g2b94@build-library-letrec*) (set! g2c20@g2b92@build-letrec* g2b92@build-letrec*) (set! g2c1f@g2b90@build-letrec g2b90@build-letrec) (set! g2c1e@g2b8e@build-void g2b8e@build-void) (set! g2c1d@g2b8c@build-sequence g2b8c@build-sequence) (set! g2c1c@g2b5e@build-let g2b5e@build-let) (set! g2c1b@g2b5c@build-case-lambda g2b5c@build-case-lambda) (set! g2c1a@g2b5a@build-lambda g2b5a@build-lambda) (set! g2c19@g2ae9@build-global-define g2ae9@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g2c31@file-options-macro g2c33@set-cons g2c35@set-union g2c3a@top-mark* g2c3c@top-marked? g2c3e@gen-lexical g2c40@gen-global g2c42@gen-label g2c44@gen-top-level-label g2c46@gen-define-label+loc g2c48@gen-define-label g2c4e@g2c49 g2c50@g2c4b g2c52@g2c4a g2c55@rib? g2c57@make-rib g2c59@rib-sym* g2c5b@rib-mark** g2c5d@rib-label* g2c5f@rib-sealed/freq g2c61@rib-cache g2c63@set-rib-sym*! g2c65@set-rib-mark**! g2c67@set-rib-label*! g2c69@set-rib-sealed/freq! g2c6b@set-rib-cache! g2c6d@make-empty-rib g2c6f@extend-rib! g2c71@extend-rib/nc! g2c73@make-rib-map g2c75@seal-rib! g2c77@unseal-rib! g2c79@make-full-rib g2c7f@g2c7a g2c81@g2c7c g2c83@g2c7b g2c86@stx? g2c88@make-stx g2c8a@stx-expr g2c8c@stx-mark* g2c8e@stx-subst* g2c90@stx-ae* g2c92@set-stx-expr! g2c94@set-stx-mark*! g2c96@set-stx-subst*! g2c98@set-stx-ae*! g2c9a@rp g2c9c@datum->stx g2c9e@gen-mark g2ca0@anti-mark g2ca2@anti-mark? g2ca4@join-wraps g2ca6@mkstx g2ca8@add-mark g2caa@add-subst g2cac@syntax-kind? g2cae@syntax-vector->list g2cb0@syntax-pair? g2cb2@syntax-vector? g2cb4@syntax-null? g2cb6@syntax-list? g2cb8@syntax-car g2cba@syntax-cdr g2cbc@syntax->list g2cbe@id? g2cc0@id->sym g2cc2@same-marks? g2cc4@bound-id=? g2cc6@free-id=? g2cc8@valid-bound-ids? g2cca@distinct-bound-ids? g2ccc@bound-id-member? g2cce@self-evaluating? g2cd0@strip-annotations g2cd2@strip g2cd4@stx->datum g2cd6@same-marks*? g2cd8@id->label g2cda@id->real-label g2cdc@label->binding g2cde@make-binding g2ce0@binding-type g2ce2@binding-value g2ce4@raise-unbound-error g2ce6@syntax-type g2cf4@sanitize-binding g2cf6@make-variable-transformer g2cf8@variable-transformer? g2cfa@variable-transformer-procedure g2cfc@make-eval-transformer g2e4d@parse-define g2e4f@parse-define-syntax g2e51@scheme-stx-hashtable g2e53@scheme-stx g2e55@lexical-var g2e57@lexical-mutable? g2e59@set-lexical-mutable! g2e5b@add-lexical g2e5d@add-lexicals g2e5f@letrec-helper g2e61@letrec-transformer g2e63@letrec*-transformer g2e65@fluid-let-syntax-transformer g2e67@type-descriptor-transformer g2e69@record-type-descriptor-transformer g2e6b@record-constructor-descriptor-transformer g2e6d@when-macro g2e6f@unless-macro g2e71@if-transformer g2e73@and-transformer g2e75@or-transformer g2e77@case-macro g2e79@quote-transformer g2e7b@case-lambda-transformer g2e7d@lambda-transformer g2e7f@bless g2e81@with-syntax-macro g2e83@invalid-fmls-error g2e85@let-macro g2e87@let-values-macro g2e89@let*-values-macro g2e8b@trace-lambda-macro g2e8d@trace-define-macro g2e8f@trace-define-syntax-macro g2e91@trace-let/rec-syntax g2e93@trace-let-syntax-macro g2e95@trace-letrec-syntax-macro g2e97@guard-macro g2e99@define-enumeration-macro g2e9b@time-macro g2e9d@delay-macro g2e9f@assert-macro g2ea1@endianness-macro g2ea3@identifier-syntax-macro g2ea5@do-macro g2ea7@let*-macro g2ea9@or-macro g2eab@and-macro g2ead@cond-macro g2eaf@do-include g2eb1@include-macro g2eb3@include-into-macro g2eb5@syntax-rules-macro g2eb7@quasiquote-macro g2eb9@quasisyntax-macro g2ebb@define-struct-macro g2ebd@define-record-type-macro g2ebf@define-condition-type-macro g2ec1@incorrect-usage-macro g2ec3@parameterize-macro g2ec5@foreign-call-transformer g2ec7@convert-pattern g2ec9@syntax-dispatch g2ecb@ellipsis? g2ecd@underscore? g2ecf@verify-literals g2ed1@syntax-case-transformer g2ed3@ellipsis-map g2ed5@syntax-transformer g2ed7@core-macro-transformer g2ed9@symbol-macro g2edb@macro-transformer g2edd@local-macro-transformer g2edf@do-macro-call g2ee1@chi-macro g2ee3@chi-local-macro g2ee5@chi-global-macro g2ee7@chi-expr* g2ee9@chi-application g2eeb@chi-expr g2eed@chi-set! g2eef@verify-formals g2ef1@chi-lambda-clause g2ef3@chi-lambda-clause* g2ef5@chi-defun g2ef7@chi-rhs g2ef9@expand-interaction-rhs*/init* g2efb@chi-rhs* g2efd@find-bound=? g2eff@find-dups g2f01@chi-internal g2f03@parse-module g2f09@g2f04 g2f0b@g2f06 g2f0d@g2f05 g2f10@module-interface? g2f12@make-module-interface g2f14@module-interface-first-mark g2f16@module-interface-exp-id-vec g2f18@module-interface-exp-lab-vec g2f1a@set-module-interface-first-mark! g2f1c@set-module-interface-exp-id-vec! g2f1e@set-module-interface-exp-lab-vec! g2f20@module-interface-exp-id* g2f22@chi-internal-module g2f24@chi-body* g2f26@expand-transformer g2f28@parse-exports g2f2a@parse-library-name g2f2c@parse-library g2f2e@parse-import-spec* g2f30@make-top-rib g2f32@make-collector g2f34@inv-collector g2f36@vis-collector g2f38@imp-collector g2f3a@chi-library-internal g2f3c@chi-interaction-expr g2f3e@library-body-expander g2f40@core-library-expander g2f42@parse-top-level-program g2f44@top-level-expander g2f4a@g2f45 g2f4c@g2f47 g2f4e@g2f46 g2f51@env? g2f53@make-env g2f55@env-names g2f57@env-labels g2f59@env-itc g2f5b@set-env-names! g2f5d@set-env-labels! g2f5f@set-env-itc! g2f61@rp g2f67@g2f62 g2f69@g2f64 g2f6b@g2f63 g2f6e@interaction-env? g2f70@make-interaction-env g2f72@interaction-env-rib g2f74@interaction-env-r g2f76@interaction-env-locs g2f78@set-interaction-env-rib! g2f7a@set-interaction-env-r! g2f7c@set-interaction-env-locs! g2f7e@rp g2f80@interaction-environment-symbols g2f82@environment-bindings g2f84@parse-binding g2f86@environment? g2f88@environment-symbols g2f8a@environment g2f8c@null-environment g2f8e@scheme-report-environment g2f90@expand g2f92@eval g2f94@library-expander g2f96@boot-library-expand g2f98@rev-map-append g2f9a@build-exports g2f9c@make-export-subst g2f9e@make-export-env/macros g2fa0@generate-temporaries g2fa2@free-identifier=? g2fa4@bound-identifier=? g2fa6@make-source-condition g2fa8@extract-position-condition g2faa@expression-position g2fac@assertion-error g2fae@syntax-error g2fb0@syntax-violation* g2fb2@syntax-violation g2fb4@identifier? g2fb6@datum->syntax g2fb8@syntax->datum g2fba@compile-r6rs-top-level g2fbc@pre-compile-r6rs-top-level g2fbe@interaction-environment g2fc0@top-level-context) (begin (set! g2c31@file-options-macro (lambda (g2fc1@x) ((lambda (g2fc4@valid-option?) (begin (set! g2fc4@valid-option? (lambda (g2fcd@x) (and (g2cbe@id? g2fcd@x) (memq (g2cc0@id->sym g2fcd@x) '(no-fail no-create no-truncate))))) ((lambda (g2fc5@t) ((lambda (g2fc7@ls/false) (if (and g2fc7@ls/false (apply (lambda (g2fc9@opt*) (for-all g2fc4@valid-option? g2fc9@opt*)) g2fc7@ls/false)) (apply (lambda (g2fcb@opt*) (g2e7f@bless (list 'make-file-options (list 'quote g2fcb@opt*)))) g2fc7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g2fc5@t))) (g2ec9@syntax-dispatch g2fc5@t '(_ . each-any)))) g2fc1@x))) '#f))) (set! g2c33@set-cons (lambda (g2fcf@x g2fd0@ls) (if (memq g2fcf@x g2fd0@ls) g2fd0@ls (cons g2fcf@x g2fd0@ls)))) (set! g2c35@set-union (lambda (g2fd3@ls1 g2fd4@ls2) (if (null? g2fd3@ls1) g2fd4@ls2 (if (memq (car g2fd3@ls1) g2fd4@ls2) (g2c35@set-union (cdr g2fd3@ls1) g2fd4@ls2) (cons (car g2fd3@ls1) (g2c35@set-union (cdr g2fd3@ls1) g2fd4@ls2)))))) (set! g2c3a@top-mark* '(top)) (set! g2c3c@top-marked? (lambda (g2fd7@m*) (memq 'top g2fd7@m*))) (set! g2c3e@gen-lexical (lambda (g2fd9@sym) (if (symbol? g2fd9@sym) (gensym g2fd9@sym) (if (g2c86@stx? g2fd9@sym) (g2c3e@gen-lexical (g2cc0@id->sym g2fd9@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g2fd9@sym))))) (set! g2c40@gen-global (lambda (g2fdb@x) (g2c3e@gen-lexical g2fdb@x))) (set! g2c42@gen-label (lambda (g2fdd@_) (gensym))) (set! g2c44@gen-top-level-label (lambda (g2fdf@id g2fe0@rib) ((lambda (g2fe4@find) (begin (set! g2fe4@find (lambda (g2fef@sym g2ff0@mark* g2ff1@sym* g2ff2@mark** g2ff3@label*) (and (pair? g2ff1@sym*) (if (and (eq? g2fef@sym (car g2ff1@sym*)) (g2cc2@same-marks? g2ff0@mark* (car g2ff2@mark**))) (car g2ff3@label*) (g2fe4@find g2fef@sym g2ff0@mark* (cdr g2ff1@sym*) (cdr g2ff2@mark**) (cdr g2ff3@label*)))))) ((lambda (g2fe5@sym g2fe6@mark*) ((lambda (g2fe9@sym*) ((lambda (g2feb@t) (if g2feb@t ((lambda (g2fed@label) (if (g2ae1@g2981@imported-label->binding g2fed@label) (gensym) g2fed@label)) g2feb@t) (gensym))) (and (memq g2fe5@sym (g2c59@rib-sym* g2fe0@rib)) (g2fe4@find g2fe5@sym g2fe6@mark* g2fe9@sym* (g2c5b@rib-mark** g2fe0@rib) (g2c5d@rib-label* g2fe0@rib))))) (g2c59@rib-sym* g2fe0@rib))) (g2cc0@id->sym g2fdf@id) (g2c8c@stx-mark* g2fdf@id)))) '#f))) (set! g2c46@gen-define-label+loc (lambda (g2ff9@id g2ffa@rib) ((lambda (g2ffd@t) (if g2ffd@t ((lambda (g2fff@env) ((lambda (g3001@label g3002@locs) (values g3001@label ((lambda (g3005@t) (if g3005@t (cdr g3005@t) ((lambda (g3007@loc) (begin (g2f7c@set-interaction-env-locs! g2fff@env (cons (cons g3001@label g3007@loc) g3002@locs)) g3007@loc)) (g2c3e@gen-lexical g2ff9@id)))) (assq g3001@label g3002@locs)))) (g2c44@gen-top-level-label g2ff9@id g2ffa@rib) (g2f76@interaction-env-locs g2fff@env))) g2ffd@t) (values (gensym) (g2c3e@gen-lexical g2ff9@id)))) (g2fc0@top-level-context)))) (set! g2c48@gen-define-label (lambda (g3009@id g300a@rib) (if (g2fc0@top-level-context) (g2c44@gen-top-level-label g3009@id g300a@rib) (gensym)))) (set! g2c4e@g2c49 (make-record-type-descriptor 'rib '#f 'g2c4c '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! g2c50@g2c4b '#f) (set! g2c52@g2c4a (make-record-constructor-descriptor g2c4e@g2c49 '#f g2c50@g2c4b)) (set! g2c55@rib? (record-predicate g2c4e@g2c49)) (set! g2c57@make-rib (record-constructor g2c52@g2c4a)) (set! g2c59@rib-sym* (record-accessor g2c4e@g2c49 '0)) (set! g2c5b@rib-mark** (record-accessor g2c4e@g2c49 '1)) (set! g2c5d@rib-label* (record-accessor g2c4e@g2c49 '2)) (set! g2c5f@rib-sealed/freq (record-accessor g2c4e@g2c49 '3)) (set! g2c61@rib-cache (record-accessor g2c4e@g2c49 '4)) (set! g2c63@set-rib-sym*! (record-mutator g2c4e@g2c49 '0)) (set! g2c65@set-rib-mark**! (record-mutator g2c4e@g2c49 '1)) (set! g2c67@set-rib-label*! (record-mutator g2c4e@g2c49 '2)) (set! g2c69@set-rib-sealed/freq! (record-mutator g2c4e@g2c49 '3)) (set! g2c6b@set-rib-cache! (record-mutator g2c4e@g2c49 '4)) (set! g2c6d@make-empty-rib (lambda () (g2c57@make-rib '() '() '() '#f '#f))) (set! g2c6f@extend-rib! (lambda (g300d@rib g300e@id g300f@label) ((lambda (g3014@find) (begin (set! g3014@find (lambda (g3021@sym g3022@mark* g3023@sym* g3024@mark** g3025@label*) (and (pair? g3023@sym*) (if (and (eq? g3021@sym (car g3023@sym*)) (g2cc2@same-marks? g3022@mark* (car g3024@mark**))) g3025@label* (g3014@find g3021@sym g3022@mark* (cdr g3023@sym*) (cdr g3024@mark**) (cdr g3025@label*)))))) (begin (if (g2c5f@rib-sealed/freq g300d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g300d@rib) (void)) ((lambda (g3015@sym g3016@mark*) ((lambda (g3019@sym*) ((lambda (g301b@t) (if g301b@t ((lambda (g301d@p) (if (not (eq? g300f@label (car g301d@p))) (if (g2fc0@top-level-context) (set-car! g301d@p g300f@label) (g2fb2@syntax-violation '#f '"multiple definitions of identifier" g300e@id)) (void))) g301b@t) (begin (if (g2c61@rib-cache g300d@rib) (hashtable-update! (g2c61@rib-cache g300d@rib) g3015@sym (lambda (g301f@e) (cons (cons g3016@mark* g300f@label) g301f@e)) '()) (void)) (g2c63@set-rib-sym*! g300d@rib (cons g3015@sym g3019@sym*)) (g2c65@set-rib-mark**! g300d@rib (cons g3016@mark* (g2c5b@rib-mark** g300d@rib))) (g2c67@set-rib-label*! g300d@rib (cons g300f@label (g2c5d@rib-label* g300d@rib)))))) (and (memq g3015@sym (g2c59@rib-sym* g300d@rib)) (g3014@find g3015@sym g3016@mark* g3019@sym* (g2c5b@rib-mark** g300d@rib) (g2c5d@rib-label* g300d@rib))))) (g2c59@rib-sym* g300d@rib))) (g2cc0@id->sym g300e@id) (g2c8c@stx-mark* g300e@id))))) '#f))) (set! g2c71@extend-rib/nc! (lambda (g302b@rib g302c@id g302d@label) ((lambda (g3031@sym g3032@mark*) ((lambda (g3035@sym*) (begin (if (g2c61@rib-cache g302b@rib) (hashtable-update! (g2c61@rib-cache g302b@rib) g3031@sym (lambda (g3037@e) (cons (cons g3032@mark* g302d@label) g3037@e)) '()) (void)) (g2c63@set-rib-sym*! g302b@rib (cons g3031@sym g3035@sym*)) (g2c65@set-rib-mark**! g302b@rib (cons g3032@mark* (g2c5b@rib-mark** g302b@rib))) (g2c67@set-rib-label*! g302b@rib (cons g302d@label (g2c5d@rib-label* g302b@rib))))) (g2c59@rib-sym* g302b@rib))) (g2cc0@id->sym g302c@id) (g2c8c@stx-mark* g302c@id)))) (set! g2c73@make-rib-map (lambda (g3039@sym*) ((lambda (g303b@ht) ((letrec ((g303d@f (lambda (g303f@i g3040@sym*) (if (null? g3040@sym*) g303b@ht (begin (hashtable-update! g303b@ht (car g3040@sym*) (lambda (g3043@x) (cons g303f@i g3043@x)) '()) (g303d@f (+ g303f@i '1) (cdr g3040@sym*))))))) g303d@f) '0 g3039@sym*)) (make-eq-hashtable)))) (set! g2c75@seal-rib! (lambda (g3045@rib) ((lambda (g3047@sym*) (if (not (null? g3047@sym*)) (begin (g2c63@set-rib-sym*! g3045@rib (list->vector g3047@sym*)) (g2c65@set-rib-mark**! g3045@rib (list->vector (g2c5b@rib-mark** g3045@rib))) (g2c67@set-rib-label*! g3045@rib (list->vector (g2c5d@rib-label* g3045@rib))) (g2c69@set-rib-sealed/freq! g3045@rib (g2c73@make-rib-map g3047@sym*))) (void))) (g2c59@rib-sym* g3045@rib)))) (set! g2c77@unseal-rib! (lambda (g3049@rib) (if (g2c5f@rib-sealed/freq g3049@rib) (begin (g2c69@set-rib-sealed/freq! g3049@rib '#f) (g2c63@set-rib-sym*! g3049@rib (vector->list (g2c59@rib-sym* g3049@rib))) (g2c65@set-rib-mark**! g3049@rib (vector->list (g2c5b@rib-mark** g3049@rib))) (g2c67@set-rib-label*! g3049@rib (vector->list (g2c5d@rib-label* g3049@rib)))) (void)))) (set! g2c79@make-full-rib (lambda (g304b@id* g304c@label*) ((lambda (g304f@r) (begin (g2c75@seal-rib! g304f@r) g304f@r)) (g2c57@make-rib (map g2cc0@id->sym g304b@id*) (map g2c8c@stx-mark* g304b@id*) g304c@label* '#f '#f)))) (set! g2c7f@g2c7a (make-record-type-descriptor 'stx '#f 'g2c7d '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! g2c81@g2c7c '#f) (set! g2c83@g2c7b (make-record-constructor-descriptor g2c7f@g2c7a '#f g2c81@g2c7c)) (set! g2c86@stx? (record-predicate g2c7f@g2c7a)) (set! g2c88@make-stx (record-constructor g2c83@g2c7b)) (set! g2c8a@stx-expr (record-accessor g2c7f@g2c7a '0)) (set! g2c8c@stx-mark* (record-accessor g2c7f@g2c7a '1)) (set! g2c8e@stx-subst* (record-accessor g2c7f@g2c7a '2)) (set! g2c90@stx-ae* (record-accessor g2c7f@g2c7a '3)) (set! g2c92@set-stx-expr! (record-mutator g2c7f@g2c7a '0)) (set! g2c94@set-stx-mark*! (record-mutator g2c7f@g2c7a '1)) (set! g2c96@set-stx-subst*! (record-mutator g2c7f@g2c7a '2)) (set! g2c98@set-stx-ae*! (record-mutator g2c7f@g2c7a '3)) (set! g2c9a@rp (g2865@g278c@make-record-printer 'stx (lambda (g3051@x g3052@p g3053@wr) (begin (display '"#<syntax " g3052@p) (write (g2cd4@stx->datum g3051@x) g3052@p) ((lambda (g3057@expr) (if (g285d@g277c@annotation? g3057@expr) ((lambda (g3059@src) (if (pair? g3059@src) (begin (display '" [" g3052@p) (display (cdr g3059@src) g3052@p) (display '" of " g3052@p) (display (car g3059@src) g3052@p) (display '"]" g3052@p)) (void))) (g285e@g277e@annotation-source g3057@expr)) (void))) (g2c8a@stx-expr g3051@x)) (display '">" g3052@p))))) (set! g2c9c@datum->stx (lambda (g305b@id g305c@datum) (g2c88@make-stx g305c@datum (g2c8c@stx-mark* g305b@id) (g2c8e@stx-subst* g305b@id) (g2c90@stx-ae* g305b@id)))) (set! g2c9e@gen-mark (lambda () (string '#\m))) (set! g2ca0@anti-mark '#f) (set! g2ca2@anti-mark? not) (set! g2ca4@join-wraps (lambda (g305f@m1* g3060@s1* g3061@ae1* g3062@e) ((lambda (g3068@cancel) (begin (set! g3068@cancel (lambda (g306f@ls1 g3070@ls2) ((letrec ((g3073@f (lambda (g3075@x g3076@ls1) (if (null? g3076@ls1) (cdr g3070@ls2) (cons g3075@x (g3073@f (car g3076@ls1) (cdr g3076@ls1))))))) g3073@f) (car g306f@ls1) (cdr g306f@ls1)))) ((lambda (g3069@m2* g306a@s2* g306b@ae2*) (if (and (not (null? g305f@m1*)) (not (null? g3069@m2*)) (g2ca2@anti-mark? (car g3069@m2*))) (values (g3068@cancel g305f@m1* g3069@m2*) (g3068@cancel g3060@s1* g306a@s2*) (g3068@cancel g3061@ae1* g306b@ae2*)) (values (append g305f@m1* g3069@m2*) (append g3060@s1* g306a@s2*) (append g3061@ae1* g306b@ae2*)))) (g2c8c@stx-mark* g3062@e) (g2c8e@stx-subst* g3062@e) (g2c90@stx-ae* g3062@e)))) '#f))) (set! g2ca6@mkstx (lambda (g3079@e g307a@m* g307b@s* g307c@ae*) (if (and (g2c86@stx? g3079@e) (not (g2c3c@top-marked? g307a@m*))) (call-with-values (lambda () (g2ca4@join-wraps g307a@m* g307b@s* g307c@ae* g3079@e)) (lambda (g3087@g3082 g3088@g3084 g3089@g3086) ((lambda (g308d@ae* g308e@s* g308f@m*) (g2c88@make-stx (g2c8a@stx-expr g3079@e) g308f@m* g308e@s* g308d@ae*)) g3089@g3086 g3088@g3084 g3087@g3082))) (g2c88@make-stx g3079@e g307a@m* g307b@s* g307c@ae*)))) (set! g2ca8@add-mark (lambda (g3093@m g3094@e g3095@ae) (g2ca6@mkstx g3094@e (list g3093@m) '(shift) (list g3095@ae)))) (set! g2caa@add-subst (lambda (g3099@subst g309a@e) (g2ca6@mkstx g309a@e '() (list g3099@subst) '()))) (set! g2cac@syntax-kind? (lambda (g309d@x g309e@p?) (if (g2c86@stx? g309d@x) (g2cac@syntax-kind? (g2c8a@stx-expr g309d@x) g309e@p?) (if (g285d@g277c@annotation? g309d@x) (g2cac@syntax-kind? (g285f@g2780@annotation-expression g309d@x) g309e@p?) (g309e@p? g309d@x))))) (set! g2cae@syntax-vector->list (lambda (g30a1@x) (if (g2c86@stx? g30a1@x) ((lambda (g30a3@ls g30a4@m* g30a5@s* g30a6@ae*) (map (lambda (g30ab@x) (g2ca6@mkstx g30ab@x g30a4@m* g30a5@s* g30a6@ae*)) g30a3@ls)) (g2cae@syntax-vector->list (g2c8a@stx-expr g30a1@x)) (g2c8c@stx-mark* g30a1@x) (g2c8e@stx-subst* g30a1@x) (g2c90@stx-ae* g30a1@x)) (if (g285d@g277c@annotation? g30a1@x) (g2cae@syntax-vector->list (g285f@g2780@annotation-expression g30a1@x)) (if (vector? g30a1@x) (vector->list g30a1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g30a1@x)))))) (set! g2cb0@syntax-pair? (lambda (g30ad@x) (g2cac@syntax-kind? g30ad@x pair?))) (set! g2cb2@syntax-vector? (lambda (g30af@x) (g2cac@syntax-kind? g30af@x vector?))) (set! g2cb4@syntax-null? (lambda (g30b1@x) (g2cac@syntax-kind? g30b1@x null?))) (set! g2cb6@syntax-list? (lambda (g30b3@x) (or (g2cb4@syntax-null? g30b3@x) (and (g2cb0@syntax-pair? g30b3@x) (g2cb6@syntax-list? (g2cba@syntax-cdr g30b3@x)))))) (set! g2cb8@syntax-car (lambda (g30b5@x) (if (g2c86@stx? g30b5@x) (g2ca6@mkstx (g2cb8@syntax-car (g2c8a@stx-expr g30b5@x)) (g2c8c@stx-mark* g30b5@x) (g2c8e@stx-subst* g30b5@x) (g2c90@stx-ae* g30b5@x)) (if (g285d@g277c@annotation? g30b5@x) (g2cb8@syntax-car (g285f@g2780@annotation-expression g30b5@x)) (if (pair? g30b5@x) (car g30b5@x) (assertion-violation 'syntax-car '"BUG: not a pair" g30b5@x)))))) (set! g2cba@syntax-cdr (lambda (g30b7@x) (if (g2c86@stx? g30b7@x) (g2ca6@mkstx (g2cba@syntax-cdr (g2c8a@stx-expr g30b7@x)) (g2c8c@stx-mark* g30b7@x) (g2c8e@stx-subst* g30b7@x) (g2c90@stx-ae* g30b7@x)) (if (g285d@g277c@annotation? g30b7@x) (g2cba@syntax-cdr (g285f@g2780@annotation-expression g30b7@x)) (if (pair? g30b7@x) (cdr g30b7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" g30b7@x)))))) (set! g2cbc@syntax->list (lambda (g30b9@x) (if (g2cb0@syntax-pair? g30b9@x) (cons (g2cb8@syntax-car g30b9@x) (g2cbc@syntax->list (g2cba@syntax-cdr g30b9@x))) (if (g2cb4@syntax-null? g30b9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g30b9@x))))) (set! g2cbe@id? (lambda (g30bb@x) (and (g2c86@stx? g30bb@x) ((lambda (g30bd@expr) (symbol? (if (g285d@g277c@annotation? g30bd@expr) (g285c@g277a@annotation-stripped g30bd@expr) g30bd@expr))) (g2c8a@stx-expr g30bb@x))))) (set! g2cc0@id->sym (lambda (g30bf@x) (begin (if (not (g2c86@stx? g30bf@x)) (error 'id->sym '"BUG in ikarus: not an id" g30bf@x) (void)) ((lambda (g30c1@expr) ((lambda (g30c3@sym) (if (symbol? g30c3@sym) g30c3@sym (error 'id->sym '"BUG in ikarus: not an id" g30bf@x))) (if (g285d@g277c@annotation? g30c1@expr) (g285c@g277a@annotation-stripped g30c1@expr) g30c1@expr))) (g2c8a@stx-expr g30bf@x))))) (set! g2cc2@same-marks? (lambda (g30c5@x g30c6@y) (or (and (null? g30c5@x) (null? g30c6@y)) (and (pair? g30c5@x) (pair? g30c6@y) (eq? (car g30c5@x) (car g30c6@y)) (g2cc2@same-marks? (cdr g30c5@x) (cdr g30c6@y)))))) (set! g2cc4@bound-id=? (lambda (g30c9@x g30ca@y) (and (eq? (g2cc0@id->sym g30c9@x) (g2cc0@id->sym g30ca@y)) (g2cc2@same-marks? (g2c8c@stx-mark* g30c9@x) (g2c8c@stx-mark* g30ca@y))))) (set! g2cc6@free-id=? (lambda (g30cd@i g30ce@j) ((lambda (g30d1@t0 g30d2@t1) (if (or g30d1@t0 g30d2@t1) (eq? g30d1@t0 g30d2@t1) (eq? (g2cc0@id->sym g30cd@i) (g2cc0@id->sym g30ce@j)))) (g2cda@id->real-label g30cd@i) (g2cda@id->real-label g30ce@j)))) (set! g2cc8@valid-bound-ids? (lambda (g30d5@id*) (and (for-all g2cbe@id? g30d5@id*) (g2cca@distinct-bound-ids? g30d5@id*)))) (set! g2cca@distinct-bound-ids? (lambda (g30d7@id*) (or (null? g30d7@id*) (and (not (g2ccc@bound-id-member? (car g30d7@id*) (cdr g30d7@id*))) (g2cca@distinct-bound-ids? (cdr g30d7@id*)))))) (set! g2ccc@bound-id-member? (lambda (g30d9@id g30da@id*) (and (pair? g30da@id*) (or (g2cc4@bound-id=? g30d9@id (car g30da@id*)) (g2ccc@bound-id-member? g30d9@id (cdr g30da@id*)))))) (set! g2cce@self-evaluating? (lambda (g30dd@x) (or (number? g30dd@x) (string? g30dd@x) (char? g30dd@x) (boolean? g30dd@x) (regexp? g30dd@x) (bytevector? g30dd@x)))) (set! g2cd0@strip-annotations (lambda (g30df@x) (if (pair? g30df@x) (cons (g2cd0@strip-annotations (car g30df@x)) (g2cd0@strip-annotations (cdr g30df@x))) (if (vector? g30df@x) (vector-map g2cd0@strip-annotations g30df@x) (if (g285d@g277c@annotation? g30df@x) (g285c@g277a@annotation-stripped g30df@x) g30df@x))))) (set! g2cd2@strip (lambda (g30e1@x g30e2@m*) (if (g2c3c@top-marked? g30e2@m*) (if (or (g285d@g277c@annotation? g30e1@x) (and (pair? g30e1@x) (g285d@g277c@annotation? (car g30e1@x))) (and (vector? g30e1@x) (> (vector-length g30e1@x) '0) (g285d@g277c@annotation? (vector-ref g30e1@x '0)))) (g2cd0@strip-annotations g30e1@x) g30e1@x) ((letrec ((g30e5@f (lambda (g30e7@x) (if (g2c86@stx? g30e7@x) (g2cd2@strip (g2c8a@stx-expr g30e7@x) (g2c8c@stx-mark* g30e7@x)) (if (g285d@g277c@annotation? g30e7@x) (g285c@g277a@annotation-stripped g30e7@x) (if (pair? g30e7@x) ((lambda (g30e9@a g30ea@d) (if (and (eq? g30e9@a (car g30e7@x)) (eq? g30ea@d (cdr g30e7@x))) g30e7@x (cons g30e9@a g30ea@d))) (g30e5@f (car g30e7@x)) (g30e5@f (cdr g30e7@x))) (if (vector? g30e7@x) ((lambda (g30ed@old) ((lambda (g30ef@new) (if (for-all eq? g30ed@old g30ef@new) g30e7@x (list->vector g30ef@new))) (map g30e5@f g30ed@old))) (vector->list g30e7@x)) g30e7@x))))))) g30e5@f) g30e1@x)))) (set! g2cd4@stx->datum (lambda (g30f1@x) (g2cd2@strip g30f1@x '()))) (set! g2cd6@same-marks*? (lambda (g30f3@mark* g30f4@mark** g30f5@si) (if (null? g30f5@si) '#f (if (g2cc2@same-marks? g30f3@mark* (vector-ref g30f4@mark** (car g30f5@si))) (car g30f5@si) (g2cd6@same-marks*? g30f3@mark* g30f4@mark** (cdr g30f5@si)))))) (set! g2cd8@id->label (lambda (g30f9@id) (or (g2cda@id->real-label g30f9@id) ((lambda (g30fb@t) (if g30fb@t ((lambda (g30fd@env) ((lambda (g30ff@rib) (call-with-values (lambda () (g2c46@gen-define-label+loc g30f9@id g30ff@rib)) (lambda (g3105@g3102 g3106@g3104) ((lambda (g3109@loc_ g310a@lab) (begin (g2c6f@extend-rib! g30ff@rib g30f9@id g310a@lab) g310a@lab)) g3106@g3104 g3105@g3102)))) (g2f72@interaction-env-rib g30fd@env))) g30fb@t) '#f)) (g2fc0@top-level-context))))) (set! g2cda@id->real-label (lambda (g310d@id) ((lambda (g310f@sym) ((letrec ((g3111@search (lambda (g3113@subst* g3114@mark*) (if (null? g3113@subst*) '#f (if (eq? (car g3113@subst*) 'shift) (g3111@search (cdr g3113@subst*) (cdr g3114@mark*)) ((lambda (g3117@rib) ((lambda (g3119@t) (if g3119@t ((lambda (g311b@ht) ((lambda (g311d@si) ((lambda (g311f@i) (if g311f@i (vector-ref (g2c5d@rib-label* g3117@rib) g311f@i) (g3111@search (cdr g3113@subst*) g3114@mark*))) (and g311d@si (g2cd6@same-marks*? g3114@mark* (g2c5b@rib-mark** g3117@rib) (reverse g311d@si))))) (hashtable-ref g311b@ht g310f@sym '#f))) g3119@t) ((letrec ((g3121@f (lambda (g3123@sym* g3124@mark** g3125@label*) (if (null? g3123@sym*) (g3111@search (cdr g3113@subst*) g3114@mark*) (if (and (eq? (car g3123@sym*) g310f@sym) (g2cc2@same-marks? (car g3124@mark**) g3114@mark*)) (car g3125@label*) (g3121@f (cdr g3123@sym*) (cdr g3124@mark**) (cdr g3125@label*))))))) g3121@f) (g2c59@rib-sym* g3117@rib) (g2c5b@rib-mark** g3117@rib) (g2c5d@rib-label* g3117@rib)))) (g2c5f@rib-sealed/freq g3117@rib))) (car g3113@subst*))))))) g3111@search) (g2c8e@stx-subst* g310d@id) (g2c8c@stx-mark* g310d@id))) (g2cc0@id->sym g310d@id)))) (set! g2cdc@label->binding (lambda (g3129@x g312a@r) ((lambda (g312d@t) (if g312d@t ((lambda (g312f@b) (if (and (pair? g312f@b) (eq? (car g312f@b) '$core-rtd)) (cons '$rtd (map g2e7f@bless (cdr g312f@b))) (if (and (pair? g312f@b) (eq? (car g312f@b) 'global-rtd)) ((lambda (g3131@lib g3132@loc) (cons '$rtd (symbol-value g3132@loc))) (cadr g312f@b) (cddr g312f@b)) g312f@b))) g312d@t) ((lambda (g3135@t) (if g3135@t (cdr g3135@t) ((lambda (g3137@t) (if g3137@t ((lambda (g3139@env) ((lambda (g313b@t) (if g313b@t ((lambda (g313d@p) (cons* 'lexical (cdr g313d@p) '#f)) g313b@t) '(displaced-lexical . #f))) (assq g3129@x (g2f76@interaction-env-locs g3139@env)))) g3137@t) '(displaced-lexical . #f))) (g2fc0@top-level-context)))) (assq g3129@x g312a@r)))) (g2ae1@g2981@imported-label->binding g3129@x)))) (set! g2cde@make-binding cons) (set! g2ce0@binding-type car) (set! g2ce2@binding-value cdr) (set! g2ce4@raise-unbound-error (lambda (g313f@id) (g2fb0@syntax-violation* '#f '"unbound identifier" g313f@id (g4cef@g4b35@make-undefined-violation)))) (set! g2ce6@syntax-type (lambda (g3141@e g3142@r) (if (g2cbe@id? g3141@e) ((lambda (g3145@id) ((lambda (g3147@label) ((lambda (g3149@b) ((lambda (g314b@type) ((lambda () (begin (if (not g3147@label) (g2ce4@raise-unbound-error g3145@id) (void)) ((lambda (g314d@t) (if (memv g314d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values g314b@type (g2ce2@binding-value g3149@b) g3145@id) (values 'other '#f '#f))) g314b@type))))) (g2ce0@binding-type g3149@b))) (g2cdc@label->binding g3147@label g3142@r))) (g2cd8@id->label g3145@id))) g3141@e) (if (g2cb0@syntax-pair? g3141@e) ((lambda (g314f@id) (if (g2cbe@id? g314f@id) ((lambda (g3151@label) ((lambda (g3153@b) ((lambda (g3155@type) ((lambda () (begin (if (not g3151@label) (g2ce4@raise-unbound-error g314f@id) (void)) ((lambda (g3157@t) (if (memv g3157@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values g3155@type (g2ce2@binding-value g3153@b) g314f@id) (values 'call '#f '#f))) g3155@type))))) (g2ce0@binding-type g3153@b))) (g2cdc@label->binding g3151@label g3142@r))) (g2cd8@id->label g314f@id)) (values 'call '#f '#f))) (g2cb8@syntax-car g3141@e)) ((lambda (g3159@d) (if (g2cce@self-evaluating? g3159@d) (values 'constant g3159@d '#f) (values 'other '#f '#f))) (g2cd4@stx->datum g3141@e)))))) (set! g2cf4@sanitize-binding (lambda (g315b@x g315c@src) (if (procedure? g315b@x) (cons* 'local-macro g315b@x g315c@src) (if (and (pair? g315b@x) (eq? (car g315b@x) 'macro!) (procedure? (cdr g315b@x))) (cons* 'local-macro! (cdr g315b@x) g315c@src) (if (and (pair? g315b@x) (eq? (car g315b@x) '$rtd)) g315b@x (assertion-violation 'expand '"invalid transformer" g315b@x)))))) (set! g2cf6@make-variable-transformer (lambda (g315f@x) (if (procedure? g315f@x) (cons 'macro! g315f@x) (assertion-violation 'make-variable-transformer '"not a procedure" g315f@x)))) (set! g2cf8@variable-transformer? (lambda (g3161@x) (and (pair? g3161@x) (eq? (car g3161@x) 'macro!) (procedure? (cdr g3161@x))))) (set! g2cfa@variable-transformer-procedure (lambda (g3163@x) (if (g2cf8@variable-transformer? g3163@x) (cdr g3163@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" g3163@x)))) (set! g2cfc@make-eval-transformer (lambda (g3165@x) (g2cf4@sanitize-binding (eval-core (g28bc@g2874@expanded->core g3165@x)) g3165@x))) (set! g2e4d@parse-define (lambda (g3167@x) ((lambda (g3169@t) ((lambda (g316b@ls/false) (if (and g316b@ls/false (apply (lambda (g316d@id g316e@fmls g316f@b g3170@b*) (g2cbe@id? g316d@id)) g316b@ls/false)) (apply (lambda (g3175@id g3176@fmls g3177@b g3178@b*) (begin (g2eef@verify-formals g3176@fmls g3167@x) (values g3175@id (cons 'defun (cons g3176@fmls (cons g3177@b g3178@b*)))))) g316b@ls/false) ((lambda (g317d@t) ((lambda (g317f@ls/false) (if (and g317f@ls/false (apply (lambda (g3181@id g3182@val) (g2cbe@id? g3181@id)) g317f@ls/false)) (apply (lambda (g3185@id g3186@val) (values g3185@id (cons 'expr g3186@val))) g317f@ls/false) ((lambda (g3189@t) ((lambda (g318b@ls/false) (if (and g318b@ls/false (apply (lambda (g318d@id) (g2cbe@id? g318d@id)) g318b@ls/false)) (apply (lambda (g318f@id) (values g318f@id (cons 'expr (g2e7f@bless '(void))))) g318b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3189@t))) (g2ec9@syntax-dispatch g3189@t '(_ any)))) g317d@t))) (g2ec9@syntax-dispatch g317d@t '(_ any any)))) g3169@t))) (g2ec9@syntax-dispatch g3169@t '(_ (any . any) any . each-any)))) g3167@x))) (set! g2e4f@parse-define-syntax (lambda (g3191@x) ((lambda (g3193@t) ((lambda (g3195@ls/false) (if (and g3195@ls/false (apply (lambda (g3197@id g3198@val) (g2cbe@id? g3197@id)) g3195@ls/false)) (apply (lambda (g319b@id g319c@val) (values g319b@id g319c@val)) g3195@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3193@t))) (g2ec9@syntax-dispatch g3193@t '(_ any any)))) g3191@x))) (set! g2e51@scheme-stx-hashtable (make-eq-hashtable)) (set! g2e53@scheme-stx (lambda (g319f@sym) (or (hashtable-ref g2e51@scheme-stx-hashtable g319f@sym '#f) ((lambda (g31a1@subst) ((lambda (g31a3@stx) ((lambda (g31a5@stx) ((lambda () (begin (hashtable-set! g2e51@scheme-stx-hashtable g319f@sym g31a5@stx) g31a5@stx)))) ((lambda (g31a7@t) (if g31a7@t ((lambda (g31a9@x) ((lambda (g31ab@name g31ac@label) (g2caa@add-subst (g2c57@make-rib (list g31ab@name) (list g2c3a@top-mark*) (list g31ac@label) '#f '#f) g31a3@stx)) (car g31a9@x) (cdr g31a9@x))) g31a7@t) g31a3@stx)) (assq g319f@sym g31a1@subst)))) (g2c88@make-stx g319f@sym g2c3a@top-mark* '() '()))) (g2ab7@g292d@library-subst (g2adb@g2975@find-library-by-name '(psyntax system $all))))))) (set! g2e55@lexical-var car) (set! g2e57@lexical-mutable? cdr) (set! g2e59@set-lexical-mutable! set-cdr!) (set! g2e5b@add-lexical (lambda (g31af@lab g31b0@lex g31b1@r) (cons (cons* g31af@lab 'lexical g31b0@lex '#f) g31b1@r))) (set! g2e5d@add-lexicals (lambda (g31b5@lab* g31b6@lex* g31b7@r) (if (null? g31b5@lab*) g31b7@r (g2e5d@add-lexicals (cdr g31b5@lab*) (cdr g31b6@lex*) (g2e5b@add-lexical (car g31b5@lab*) (car g31b6@lex*) g31b7@r))))) (set! g2e5f@letrec-helper (lambda (g31bb@e g31bc@r g31bd@mr g31be@build) ((lambda (g31c3@t) ((lambda (g31c5@ls/false) (if g31c5@ls/false (apply (lambda (g31c7@lhs* g31c8@rhs* g31c9@b g31ca@b*) (if (not (g2cc8@valid-bound-ids? g31c7@lhs*)) (g2e83@invalid-fmls-error g31bb@e g31c7@lhs*) ((lambda (g31cf@lex* g31d0@lab*) ((lambda (g31d3@rib g31d4@r) ((lambda (g31d7@body g31d8@rhs*) (g31be@build '#f g31cf@lex* g31d8@rhs* g31d7@body)) (g2f01@chi-internal (g2caa@add-subst g31d3@rib (cons g31c9@b g31ca@b*)) g31d4@r g31bd@mr) (g2ee7@chi-expr* (map (lambda (g31db@x) (g2caa@add-subst g31d3@rib g31db@x)) g31c8@rhs*) g31d4@r g31bd@mr))) (g2c79@make-full-rib g31c7@lhs* g31d0@lab*) (g2e5d@add-lexicals g31d0@lab* g31cf@lex* g31bc@r))) (map g2c3e@gen-lexical g31c7@lhs*) (map g2c42@gen-label g31c7@lhs*)))) g31c5@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g31c3@t))) (g2ec9@syntax-dispatch g31c3@t '(_ #(each (any any)) any . each-any)))) g31bb@e))) (set! g2e61@letrec-transformer (lambda (g31dd@e g31de@r g31df@mr) (g2e5f@letrec-helper g31dd@e g31de@r g31df@mr g2c1f@g2b90@build-letrec))) (set! g2e63@letrec*-transformer (lambda (g31e3@e g31e4@r g31e5@mr) (g2e5f@letrec-helper g31e3@e g31e4@r g31e5@mr g2c20@g2b92@build-letrec*))) (set! g2e65@fluid-let-syntax-transformer (lambda (g31e9@e g31ea@r g31eb@mr) ((lambda (g31f0@lookup) (begin (set! g31f0@lookup (lambda (g3203@x) (or (g2cd8@id->label g3203@x) (g2fb2@syntax-violation '#f '"unbound identifier" g31e9@e g3203@x)))) ((lambda (g31f1@t) ((lambda (g31f3@ls/false) (if g31f3@ls/false (apply (lambda (g31f5@lhs* g31f6@rhs* g31f7@b g31f8@b*) (if (not (g2cc8@valid-bound-ids? g31f5@lhs*)) (g2e83@invalid-fmls-error g31e9@e g31f5@lhs*) ((lambda (g31fd@lab* g31fe@rhs*) (g2f01@chi-internal (cons g31f7@b g31f8@b*) (append (map cons g31fd@lab* g31fe@rhs*) g31ea@r) (append (map cons g31fd@lab* g31fe@rhs*) g31eb@mr))) (map g31f0@lookup g31f5@lhs*) (map (lambda (g3201@x) (g2cfc@make-eval-transformer (g2f26@expand-transformer g3201@x g31eb@mr))) g31f6@rhs*)))) g31f3@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g31f1@t))) (g2ec9@syntax-dispatch g31f1@t '(_ #(each (any any)) any . each-any)))) g31e9@e))) '#f))) (set! g2e67@type-descriptor-transformer (lambda (g3205@e g3206@r g3207@mr) ((lambda (g320b@t) ((lambda (g320d@ls/false) (if (and g320d@ls/false (apply (lambda (g320f@id) (g2cbe@id? g320f@id)) g320d@ls/false)) (apply (lambda (g3211@id) ((lambda (g3213@lab) ((lambda (g3215@b) ((lambda (g3217@type) ((lambda () (begin (if (not g3213@lab) (g2ce4@raise-unbound-error g3211@id) (void)) (if (not (and (eq? g3217@type '$rtd) (not (list? (g2ce2@binding-value g3215@b))))) (g2fb2@syntax-violation '#f '"not a record type" g3205@e) (void)) (list 'quote (g2ce2@binding-value g3215@b)))))) (g2ce0@binding-type g3215@b))) (g2cdc@label->binding g3213@lab g3206@r))) (g2cd8@id->label g3211@id))) g320d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g320b@t))) (g2ec9@syntax-dispatch g320b@t '(_ any)))) g3205@e))) (set! g2e69@record-type-descriptor-transformer (lambda (g3219@e g321a@r g321b@mr) ((lambda (g321f@t) ((lambda (g3221@ls/false) (if (and g3221@ls/false (apply (lambda (g3223@id) (g2cbe@id? g3223@id)) g3221@ls/false)) (apply (lambda (g3225@id) ((lambda (g3227@lab) ((lambda (g3229@b) ((lambda (g322b@type) ((lambda () (begin (if (not g3227@lab) (g2ce4@raise-unbound-error g3225@id) (void)) (if (not (and (eq? g322b@type '$rtd) (list? (g2ce2@binding-value g3229@b)))) (g2fb2@syntax-violation '#f '"not a record type" g3219@e) (void)) (g2eeb@chi-expr (car (g2ce2@binding-value g3229@b)) g321a@r g321b@mr))))) (g2ce0@binding-type g3229@b))) (g2cdc@label->binding g3227@lab g321a@r))) (g2cd8@id->label g3225@id))) g3221@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g321f@t))) (g2ec9@syntax-dispatch g321f@t '(_ any)))) g3219@e))) (set! g2e6b@record-constructor-descriptor-transformer (lambda (g322d@e g322e@r g322f@mr) ((lambda (g3233@t) ((lambda (g3235@ls/false) (if (and g3235@ls/false (apply (lambda (g3237@id) (g2cbe@id? g3237@id)) g3235@ls/false)) (apply (lambda (g3239@id) ((lambda (g323b@lab) ((lambda (g323d@b) ((lambda (g323f@type) ((lambda () (begin (if (not g323b@lab) (g2ce4@raise-unbound-error g3239@id) (void)) (if (not (and (eq? g323f@type '$rtd) (list? (g2ce2@binding-value g323d@b)))) (g2fb2@syntax-violation '#f '"invalid type" g322d@e) (void)) (g2eeb@chi-expr (cadr (g2ce2@binding-value g323d@b)) g322e@r g322f@mr))))) (g2ce0@binding-type g323d@b))) (g2cdc@label->binding g323b@lab g322e@r))) (g2cd8@id->label g3239@id))) g3235@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3233@t))) (g2ec9@syntax-dispatch g3233@t '(_ any)))) g322d@e))) (set! g2e6d@when-macro (lambda (g3241@e) ((lambda (g3243@t) ((lambda (g3245@ls/false) (if g3245@ls/false (apply (lambda (g3247@test g3248@e g3249@e*) (g2e7f@bless (list 'if g3247@test (cons 'begin (cons g3248@e g3249@e*))))) g3245@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3243@t))) (g2ec9@syntax-dispatch g3243@t '(_ any any . each-any)))) g3241@e))) (set! g2e6f@unless-macro (lambda (g324d@e) ((lambda (g324f@t) ((lambda (g3251@ls/false) (if g3251@ls/false (apply (lambda (g3253@test g3254@e g3255@e*) (g2e7f@bless (list 'if (list 'not g3253@test) (cons 'begin (cons g3254@e g3255@e*))))) g3251@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g324f@t))) (g2ec9@syntax-dispatch g324f@t '(_ any any . each-any)))) g324d@e))) (set! g2e71@if-transformer (lambda (g3259@e g325a@r g325b@mr) ((lambda (g325f@t) ((lambda (g3261@ls/false) (if g3261@ls/false (apply (lambda (g3263@e0 g3264@e1 g3265@e2) (list 'if (g2eeb@chi-expr g3263@e0 g325a@r g325b@mr) (g2eeb@chi-expr g3264@e1 g325a@r g325b@mr) (g2eeb@chi-expr g3265@e2 g325a@r g325b@mr))) g3261@ls/false) ((lambda (g3269@t) ((lambda (g326b@ls/false) (if g326b@ls/false (apply (lambda (g326d@e0 g326e@e1) (list 'if (g2eeb@chi-expr g326d@e0 g325a@r g325b@mr) (g2eeb@chi-expr g326e@e1 g325a@r g325b@mr) (g2c1e@g2b8e@build-void))) g326b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3269@t))) (g2ec9@syntax-dispatch g3269@t '(_ any any)))) g325f@t))) (g2ec9@syntax-dispatch g325f@t '(_ any any any)))) g3259@e))) (set! g2e73@and-transformer (lambda (g3271@e g3272@r g3273@mr) ((lambda (g3277@t) ((lambda (g3279@ls/false) (if g3279@ls/false (apply (lambda (g327b@e*) (cons 'and (g2ee7@chi-expr* g327b@e* g3272@r g3273@mr))) g3279@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3277@t))) (g2ec9@syntax-dispatch g3277@t '(_ . each-any)))) g3271@e))) (set! g2e75@or-transformer (lambda (g327d@e g327e@r g327f@mr) ((lambda (g3283@t) ((lambda (g3285@ls/false) (if g3285@ls/false (apply (lambda (g3287@e*) (cons 'or (g2ee7@chi-expr* g3287@e* g327e@r g327f@mr))) g3285@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3283@t))) (g2ec9@syntax-dispatch g3283@t '(_ . each-any)))) g327d@e))) (set! g2e77@case-macro (lambda (g3289@e) ((lambda (g328c@build-last g328e@build-one) (begin (set! g328c@build-last (lambda (g32b3@cls) ((lambda (g32b5@t) ((lambda (g32b7@ls/false) (if g32b7@ls/false (apply (lambda (g32b9@e g32ba@e*) (cons 'begin (cons g32b9@e g32ba@e*))) g32b7@ls/false) ((lambda (g32bd@t) ((lambda (g32bf@ls/false) (if g32bf@ls/false (apply (lambda () (g328e@build-one g32b3@cls '(if #f #f))) g32bf@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g32bd@t))) (g2ec9@syntax-dispatch g32bd@t '_))) g32b5@t))) (g2ec9@syntax-dispatch g32b5@t '(#(scheme-id else) any . each-any)))) g32b3@cls))) (set! g328e@build-one (lambda (g32a5@cls g32a6@k) ((lambda (g32a9@t) ((lambda (g32ab@ls/false) (if g32ab@ls/false (apply (lambda (g32ad@d* g32ae@e g32af@e*) (list 'if (list 'memv 't (list 'quote g32ad@d*)) (cons 'begin (cons g32ae@e g32af@e*)) g32a6@k)) g32ab@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g32a9@t))) (g2ec9@syntax-dispatch g32a9@t '(each-any any . each-any)))) g32a5@cls))) ((lambda (g328f@t) ((lambda (g3291@ls/false) (if g3291@ls/false (apply (lambda (g3293@expr) (g2e7f@bless (cons 'let (cons (list (list 't g3293@expr)) '((if #f #f)))))) g3291@ls/false) ((lambda (g3295@t) ((lambda (g3297@ls/false) (if g3297@ls/false (apply (lambda (g3299@expr g329a@cls g329b@cls*) (g2e7f@bless (list 'let (list (list 't g3299@expr)) ((letrec ((g329f@f (lambda (g32a1@cls g32a2@cls*) (if (null? g32a2@cls*) (g328c@build-last g32a1@cls) (g328e@build-one g32a1@cls (g329f@f (car g32a2@cls*) (cdr g32a2@cls*))))))) g329f@f) g329a@cls g329b@cls*)))) g3297@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3295@t))) (g2ec9@syntax-dispatch g3295@t '(_ any any . each-any)))) g328f@t))) (g2ec9@syntax-dispatch g328f@t '(_ any)))) g3289@e))) '#f '#f))) (set! g2e79@quote-transformer (lambda (g32c1@e g32c2@r g32c3@mr) ((lambda (g32c7@t) ((lambda (g32c9@ls/false) (if g32c9@ls/false (apply (lambda (g32cb@datum) (list 'quote (g2cd4@stx->datum g32cb@datum))) g32c9@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g32c7@t))) (g2ec9@syntax-dispatch g32c7@t '(_ any)))) g32c1@e))) (set! g2e7b@case-lambda-transformer (lambda (g32cd@e g32ce@r g32cf@mr) ((lambda (g32d3@t) ((lambda (g32d5@ls/false) (if g32d5@ls/false (apply (lambda (g32d7@fmls* g32d8@b* g32d9@b**) (call-with-values (lambda () (g2ef3@chi-lambda-clause* g32cd@e g32d7@fmls* (map cons g32d8@b* g32d9@b**) g32ce@r g32cf@mr)) (lambda (g32e1@g32de g32e2@g32e0) ((lambda (g32e5@body* g32e6@fmls*) (g2c1b@g2b5c@build-case-lambda '#f g32e6@fmls* g32e5@body*)) g32e2@g32e0 g32e1@g32de)))) g32d5@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g32d3@t))) (g2ec9@syntax-dispatch g32d3@t '(_ . #(each (any any . each-any)))))) g32cd@e))) (set! g2e7d@lambda-transformer (lambda (g32e9@e g32ea@r g32eb@mr) ((lambda (g32ef@t) ((lambda (g32f1@ls/false) (if g32f1@ls/false (apply (lambda (g32f3@fmls g32f4@b g32f5@b*) (call-with-values (lambda () (g2ef1@chi-lambda-clause g32e9@e g32f3@fmls (cons g32f4@b g32f5@b*) g32ea@r g32eb@mr)) (lambda (g32fd@g32fa g32fe@g32fc) ((lambda (g3301@body g3302@fmls) (g2c1a@g2b5a@build-lambda '#f g3302@fmls g3301@body)) g32fe@g32fc g32fd@g32fa)))) g32f1@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g32ef@t))) (g2ec9@syntax-dispatch g32ef@t '(_ any any . each-any)))) g32e9@e))) (set! g2e7f@bless (lambda (g3305@x) (g2ca6@mkstx ((letrec ((g3307@f (lambda (g3309@x) (if (g2c86@stx? g3309@x) g3309@x (if (pair? g3309@x) (cons (g3307@f (car g3309@x)) (g3307@f (cdr g3309@x))) (if (symbol? g3309@x) (g2e53@scheme-stx g3309@x) (if (vector? g3309@x) (vector-map g3307@f g3309@x) g3309@x))))))) g3307@f) g3305@x) '() '() '()))) (set! g2e81@with-syntax-macro (lambda (g330b@e) ((lambda (g330d@t) ((lambda (g330f@ls/false) (if g330f@ls/false (apply (lambda (g3311@pat* g3312@expr* g3313@b g3314@b*) ((lambda (g3319@idn*) (begin (g2eef@verify-formals (map car g3319@idn*) g330b@e) ((lambda (g331b@t*) (g2e7f@bless (list 'let (map list g331b@t* g3312@expr*) ((letrec ((g331d@f (lambda (g331f@pat* g3320@t*) (if (null? g331f@pat*) (cons 'begin (cons '#f (cons g3313@b g3314@b*))) (list 'syntax-case (car g3320@t*) '() (list (car g331f@pat*) (g331d@f (cdr g331f@pat*) (cdr g3320@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car g331f@pat*)) (car g3320@t*)))))))) g331d@f) g3311@pat* g331b@t*)))) (g2fa0@generate-temporaries g3312@expr*)))) ((letrec ((g3323@f (lambda (g3325@pat*) (if (null? g3325@pat*) '() (call-with-values (lambda () (g2ec7@convert-pattern (car g3325@pat*) '())) (lambda (g332b@g3328 g332c@g332a) ((lambda (g332f@idn* g3330@pat) (append g332f@idn* (g3323@f (cdr g3325@pat*)))) g332c@g332a g332b@g3328))))))) g3323@f) g3311@pat*))) g330f@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g330d@t))) (g2ec9@syntax-dispatch g330d@t '(_ #(each (any any)) any . each-any)))) g330b@e))) (set! g2e83@invalid-fmls-error (lambda (g3333@stx g3334@fmls) ((lambda (g3337@t) ((lambda (g3339@ls/false) (if g3339@ls/false (apply (lambda (g333b@id* g333c@last) ((letrec ((g333f@f (lambda (g3341@id*) (if (null? g3341@id*) (values) (if (not (g2cbe@id? (car g3341@id*))) (g2fb2@syntax-violation '#f '"not an identifier" g3333@stx (car g3341@id*)) (begin (g333f@f (cdr g3341@id*)) (if (g2ccc@bound-id-member? (car g3341@id*) (cdr g3341@id*)) (g2fb2@syntax-violation '#f '"duplicate binding" g3333@stx (car g3341@id*)) (void)))))))) g333f@f) (if (g2cbe@id? g333c@last) (cons g333c@last g333b@id*) (if (g2cb4@syntax-null? g333c@last) g333b@id* (g2fb2@syntax-violation '#f '"not an identifier" g3333@stx g333c@last))))) g3339@ls/false) ((lambda (g3343@t) ((lambda (g3345@ls/false) (if g3345@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"malformed binding form" g3333@stx g3334@fmls)) g3345@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3343@t))) (g2ec9@syntax-dispatch g3343@t '_))) g3337@t))) (g2ec9@syntax-dispatch g3337@t '#(each+ any () any)))) g3334@fmls))) (set! g2e85@let-macro (lambda (g3347@stx) ((lambda (g3349@t) ((lambda (g334b@ls/false) (if g334b@ls/false (apply (lambda (g334d@lhs* g334e@rhs* g334f@b g3350@b*) (if (g2cc8@valid-bound-ids? g334d@lhs*) (g2e7f@bless (cons (cons 'lambda (cons g334d@lhs* (cons g334f@b g3350@b*))) g334e@rhs*)) (g2e83@invalid-fmls-error g3347@stx g334d@lhs*))) g334b@ls/false) ((lambda (g3355@t) ((lambda (g3357@ls/false) (if (and g3357@ls/false (apply (lambda (g3359@f g335a@lhs* g335b@rhs* g335c@b g335d@b*) (g2cbe@id? g3359@f)) g3357@ls/false)) (apply (lambda (g3363@f g3364@lhs* g3365@rhs* g3366@b g3367@b*) (if (g2cc8@valid-bound-ids? g3364@lhs*) (g2e7f@bless (cons (list 'letrec (list (list g3363@f (cons 'lambda (cons g3364@lhs* (cons g3366@b g3367@b*))))) g3363@f) g3365@rhs*)) (g2e83@invalid-fmls-error g3347@stx g3364@lhs*))) g3357@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3355@t))) (g2ec9@syntax-dispatch g3355@t '(_ any #(each (any any)) any . each-any)))) g3349@t))) (g2ec9@syntax-dispatch g3349@t '(_ #(each (any any)) any . each-any)))) g3347@stx))) (set! g2e87@let-values-macro (lambda (g336d@stx) ((lambda (g3370@rename g3372@rename*) (begin (set! g3370@rename (lambda (g33d5@x g33d6@old* g33d7@new*) (begin (if (not (g2cbe@id? g33d5@x)) (g2fb2@syntax-violation '#f '"not an indentifier" g336d@stx g33d5@x) (void)) (if (g2ccc@bound-id-member? g33d5@x g33d6@old*) (g2fb2@syntax-violation '#f '"duplicate binding" g336d@stx g33d5@x) (void)) ((lambda (g33db@y) (values g33db@y (cons g33d5@x g33d6@old*) (cons g33db@y g33d7@new*))) (gensym (g2fb8@syntax->datum g33d5@x)))))) (set! g3372@rename* (lambda (g33c3@x* g33c4@old* g33c5@new*) (if (null? g33c3@x*) (values '() g33c4@old* g33c5@new*) (call-with-values (lambda () (g3370@rename (car g33c3@x*) g33c4@old* g33c5@new*)) (lambda (g33c9@x g33ca@old* g33cb@new*) (call-with-values (lambda () (g3372@rename* (cdr g33c3@x*) g33ca@old* g33cb@new*)) (lambda (g33cf@x* g33d0@old* g33d1@new*) (values (cons g33c9@x g33cf@x*) g33d0@old* g33d1@new*)))))))) ((lambda (g3373@t) ((lambda (g3375@ls/false) (if g3375@ls/false (apply (lambda (g3377@b g3378@b*) (cons* (g2e7f@bless 'let) '() g3377@b g3378@b*)) g3375@ls/false) ((lambda (g337b@t) ((lambda (g337d@ls/false) (if g337d@ls/false (apply (lambda (g337f@lhs* g3380@rhs* g3381@b g3382@b*) (g2e7f@bless ((letrec ((g3387@f (lambda (g3389@lhs* g338a@rhs* g338b@old* g338c@new*) (if (null? g3389@lhs*) (cons 'let (cons (map list g338b@old* g338c@new*) (cons g3381@b g3382@b*))) ((lambda (g3391@t) ((lambda (g3393@ls/false) (if g3393@ls/false (apply (lambda (g3395@x*) (call-with-values (lambda () (g3372@rename* g3395@x* g338b@old* g338c@new*)) (lambda (g339d@g3398 g339e@g339a g339f@g339c) ((lambda (g33a3@new* g33a4@old* g33a5@y*) (list 'call-with-values (list 'lambda '() (car g338a@rhs*)) (list 'lambda g33a5@y* (g3387@f (cdr g3389@lhs*) (cdr g338a@rhs*) g33a4@old* g33a3@new*)))) g339f@g339c g339e@g339a g339d@g3398)))) g3393@ls/false) ((lambda (g33a9@t) ((lambda (g33ab@ls/false) (if g33ab@ls/false (apply (lambda (g33ad@x* g33ae@x) (call-with-values (lambda () (g3370@rename g33ae@x g338b@old* g338c@new*)) (lambda (g33b1@y g33b2@old* g33b3@new*) (call-with-values (lambda () (g3372@rename* g33ad@x* g33b2@old* g33b3@new*)) (lambda (g33b7@y* g33b8@old* g33b9@new*) (list 'call-with-values (list 'lambda '() (car g338a@rhs*)) (list 'lambda (append g33b7@y* g33b1@y) (g3387@f (cdr g3389@lhs*) (cdr g338a@rhs*) g33b8@old* g33b9@new*)))))))) g33ab@ls/false) ((lambda (g33bd@t) ((lambda (g33bf@ls/false) (if g33bf@ls/false (apply (lambda (g33c1@others) (g2fb2@syntax-violation '#f '"malformed bindings" g336d@stx g33c1@others)) g33bf@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g33bd@t))) (g2ec9@syntax-dispatch g33bd@t 'any))) g33a9@t))) (g2ec9@syntax-dispatch g33a9@t '#(each+ any () any)))) g3391@t))) (g2ec9@syntax-dispatch g3391@t 'each-any))) (car g3389@lhs*)))))) g3387@f) g337f@lhs* g3380@rhs* '() '()))) g337d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g337b@t))) (g2ec9@syntax-dispatch g337b@t '(_ #(each (any any)) any . each-any)))) g3373@t))) (g2ec9@syntax-dispatch g3373@t '(_ () any . each-any)))) g336d@stx))) '#f '#f))) (set! g2e89@let*-values-macro (lambda (g33dd@stx) ((lambda (g33e0@check) (begin (set! g33e0@check (lambda (g340f@x*) (if (not (null? g340f@x*)) ((lambda (g3411@x) (begin (if (not (g2cbe@id? g3411@x)) (g2fb2@syntax-violation '#f '"not an identifier" g33dd@stx g3411@x) (void)) (g33e0@check (cdr g340f@x*)) (if (g2ccc@bound-id-member? g3411@x (cdr g340f@x*)) (g2fb2@syntax-violation '#f '"duplicate identifier" g33dd@stx g3411@x) (void)))) (car g340f@x*)) (void)))) ((lambda (g33e1@t) ((lambda (g33e3@ls/false) (if g33e3@ls/false (apply (lambda (g33e5@b g33e6@b*) (cons* (g2e7f@bless 'let) '() g33e5@b g33e6@b*)) g33e3@ls/false) ((lambda (g33e9@t) ((lambda (g33eb@ls/false) (if g33eb@ls/false (apply (lambda (g33ed@lhs* g33ee@rhs* g33ef@b g33f0@b*) (g2e7f@bless ((letrec ((g33f5@f (lambda (g33f7@lhs* g33f8@rhs*) (if (null? g33f7@lhs*) (cons 'begin (cons g33ef@b g33f0@b*)) ((lambda (g33fb@t) ((lambda (g33fd@ls/false) (if g33fd@ls/false (apply (lambda (g33ff@x*) (begin (g33e0@check g33ff@x*) (list 'call-with-values (list 'lambda '() (car g33f8@rhs*)) (list 'lambda g33ff@x* (g33f5@f (cdr g33f7@lhs*) (cdr g33f8@rhs*)))))) g33fd@ls/false) ((lambda (g3401@t) ((lambda (g3403@ls/false) (if g3403@ls/false (apply (lambda (g3405@x* g3406@x) (begin (g33e0@check (cons g3406@x g3405@x*)) (list 'call-with-values (list 'lambda '() (car g33f8@rhs*)) (list 'lambda (append g3405@x* g3406@x) (g33f5@f (cdr g33f7@lhs*) (cdr g33f8@rhs*)))))) g3403@ls/false) ((lambda (g3409@t) ((lambda (g340b@ls/false) (if g340b@ls/false (apply (lambda (g340d@others) (g2fb2@syntax-violation '#f '"malformed bindings" g33dd@stx g340d@others)) g340b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3409@t))) (g2ec9@syntax-dispatch g3409@t 'any))) g3401@t))) (g2ec9@syntax-dispatch g3401@t '#(each+ any () any)))) g33fb@t))) (g2ec9@syntax-dispatch g33fb@t 'each-any))) (car g33f7@lhs*)))))) g33f5@f) g33ed@lhs* g33ee@rhs*))) g33eb@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g33e9@t))) (g2ec9@syntax-dispatch g33e9@t '(_ #(each (any any)) any . each-any)))) g33e1@t))) (g2ec9@syntax-dispatch g33e1@t '(_ () any . each-any)))) g33dd@stx))) '#f))) (set! g2e8b@trace-lambda-macro (lambda (g3413@stx) ((lambda (g3415@t) ((lambda (g3417@ls/false) (if g3417@ls/false (apply (lambda (g3419@who g341a@fmls g341b@b g341c@b*) (if (g2cc8@valid-bound-ids? g341a@fmls) (g2e7f@bless (list 'make-traced-procedure (list 'quote g3419@who) (cons 'lambda (cons g341a@fmls (cons g341b@b g341c@b*))))) (g2e83@invalid-fmls-error g3413@stx g341a@fmls))) g3417@ls/false) ((lambda (g3421@t) ((lambda (g3423@ls/false) (if g3423@ls/false (apply (lambda (g3425@who g3426@fmls g3427@last g3428@b g3429@b*) (if (g2cc8@valid-bound-ids? (cons g3427@last g3426@fmls)) (g2e7f@bless (list 'make-traced-procedure (list 'quote g3425@who) (cons 'lambda (cons (append g3426@fmls g3427@last) (cons g3428@b g3429@b*))))) (g2e83@invalid-fmls-error g3413@stx (append g3426@fmls g3427@last)))) g3423@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3421@t))) (g2ec9@syntax-dispatch g3421@t '(_ any #(each+ any () any) any . each-any)))) g3415@t))) (g2ec9@syntax-dispatch g3415@t '(_ any each-any any . each-any)))) g3413@stx))) (set! g2e8d@trace-define-macro (lambda (g342f@stx) ((lambda (g3431@t) ((lambda (g3433@ls/false) (if g3433@ls/false (apply (lambda (g3435@who g3436@fmls g3437@b g3438@b*) (if (g2cc8@valid-bound-ids? g3436@fmls) (g2e7f@bless (list 'define g3435@who (list 'make-traced-procedure (list 'quote g3435@who) (cons 'lambda (cons g3436@fmls (cons g3437@b g3438@b*)))))) (g2e83@invalid-fmls-error g342f@stx g3436@fmls))) g3433@ls/false) ((lambda (g343d@t) ((lambda (g343f@ls/false) (if g343f@ls/false (apply (lambda (g3441@who g3442@fmls g3443@last g3444@b g3445@b*) (if (g2cc8@valid-bound-ids? (cons g3443@last g3442@fmls)) (g2e7f@bless (list 'define g3441@who (list 'make-traced-procedure (list 'quote g3441@who) (cons 'lambda (cons (append g3442@fmls g3443@last) (cons g3444@b g3445@b*)))))) (g2e83@invalid-fmls-error g342f@stx (append g3442@fmls g3443@last)))) g343f@ls/false) ((lambda (g344b@t) ((lambda (g344d@ls/false) (if g344d@ls/false (apply (lambda (g344f@who g3450@expr) (if (g2cbe@id? g344f@who) (g2e7f@bless (list 'define g344f@who (list 'let (list (list 'v g3450@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g344f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g2fb2@syntax-violation '#f '"invalid name" g342f@stx))) g344d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g344b@t))) (g2ec9@syntax-dispatch g344b@t '(_ any any)))) g343d@t))) (g2ec9@syntax-dispatch g343d@t '(_ (any . #(each+ any () any)) any . each-any)))) g3431@t))) (g2ec9@syntax-dispatch g3431@t '(_ (any . each-any) any . each-any)))) g342f@stx))) (set! g2e8f@trace-define-syntax-macro (lambda (g3453@stx) ((lambda (g3455@t) ((lambda (g3457@ls/false) (if g3457@ls/false (apply (lambda (g3459@who g345a@expr) (if (g2cbe@id? g3459@who) (g2e7f@bless (list 'define-syntax g3459@who (list 'make-traced-macro (list 'quote g3459@who) g345a@expr))) (g2fb2@syntax-violation '#f '"invalid name" g3453@stx))) g3457@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3455@t))) (g2ec9@syntax-dispatch g3455@t '(_ any any)))) g3453@stx))) (set! g2e91@trace-let/rec-syntax (lambda (g345d@who) (lambda (g345f@stx) ((lambda (g3461@t) ((lambda (g3463@ls/false) (if g3463@ls/false (apply (lambda (g3465@lhs* g3466@rhs* g3467@b g3468@b*) (if (g2cc8@valid-bound-ids? g3465@lhs*) ((lambda (g346d@rhs*) (g2e7f@bless (cons g345d@who (cons (map list g3465@lhs* g346d@rhs*) (cons g3467@b g3468@b*))))) (map (lambda (g346f@lhs g3470@rhs) (list 'make-traced-macro (list 'quote g346f@lhs) g3470@rhs)) g3465@lhs* g3466@rhs*)) (g2e83@invalid-fmls-error g345f@stx g3465@lhs*))) g3463@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3461@t))) (g2ec9@syntax-dispatch g3461@t '(_ #(each (any any)) any . each-any)))) g345f@stx)))) (set! g2e93@trace-let-syntax-macro (g2e91@trace-let/rec-syntax 'let-syntax)) (set! g2e95@trace-letrec-syntax-macro (g2e91@trace-let/rec-syntax 'letrec-syntax)) (set! g2e97@guard-macro (lambda (g3473@x) ((lambda (g3476@gen-clauses) (begin (set! g3476@gen-clauses (lambda (g348d@con g348e@outerk g348f@clause*) ((lambda (g3494@f g3496@f*) (begin (set! g3494@f (lambda (g34cd@x g34ce@k) ((lambda (g34d1@t) ((lambda (g34d3@ls/false) (if g34d3@ls/false (apply (lambda (g34d5@e g34d6@p) ((lambda (g34d9@t) (list 'let (list (list g34d9@t g34d5@e)) (list 'if g34d9@t (list g34d6@p g34d9@t) g34ce@k))) (gensym))) g34d3@ls/false) ((lambda (g34db@t) ((lambda (g34dd@ls/false) (if g34dd@ls/false (apply (lambda (g34df@e) ((lambda (g34e1@t) (list 'let (list (list g34e1@t g34df@e)) (list 'if g34e1@t g34e1@t g34ce@k))) (gensym))) g34dd@ls/false) ((lambda (g34e3@t) ((lambda (g34e5@ls/false) (if g34e5@ls/false (apply (lambda (g34e7@e g34e8@v g34e9@v*) (list 'if g34e7@e (cons 'begin (cons g34e8@v g34e9@v*)) g34ce@k)) g34e5@ls/false) ((lambda (g34ed@t) ((lambda (g34ef@ls/false) (if g34ef@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid guard clause" g34cd@x)) g34ef@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g34ed@t))) (g2ec9@syntax-dispatch g34ed@t '_))) g34e3@t))) (g2ec9@syntax-dispatch g34e3@t '(any any . each-any)))) g34db@t))) (g2ec9@syntax-dispatch g34db@t '(any)))) g34d1@t))) (g2ec9@syntax-dispatch g34d1@t '(any #(scheme-id =>) any)))) g34cd@x))) (set! g3496@f* (lambda (g34a3@x*) ((lambda (g34a5@t) ((lambda (g34a7@ls/false) (if g34a7@ls/false (apply (lambda () ((lambda (g34a9@g) (values (list g34a9@g (list 'lambda '() (list 'raise-continuable g348d@con))) g34a9@g)) (gensym))) g34a7@ls/false) ((lambda (g34ab@t) ((lambda (g34ad@ls/false) (if g34ad@ls/false (apply (lambda (g34af@e g34b0@e*) (values (cons 'begin (cons g34af@e g34b0@e*)) '#f)) g34ad@ls/false) ((lambda (g34b3@t) ((lambda (g34b5@ls/false) (if g34b5@ls/false (apply (lambda (g34b7@cls g34b8@cls*) (call-with-values (lambda () (g3496@f* g34b8@cls*)) (lambda (g34bf@g34bc g34c0@g34be) ((lambda (g34c3@g g34c4@e) (values (g3494@f g34b7@cls g34c4@e) g34c3@g)) g34c0@g34be g34bf@g34bc)))) g34b5@ls/false) ((lambda (g34c7@t) ((lambda (g34c9@ls/false) (if g34c9@ls/false (apply (lambda (g34cb@others) (g2fb2@syntax-violation '#f '"invalid guard clause" g34cb@others)) g34c9@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g34c7@t))) (g2ec9@syntax-dispatch g34c7@t 'any))) g34b3@t))) (g2ec9@syntax-dispatch g34b3@t '(any . any)))) g34ab@t))) (g2ec9@syntax-dispatch g34ab@t '((#(scheme-id else) any . each-any))))) g34a5@t))) (g2ec9@syntax-dispatch g34a5@t '()))) g34a3@x*))) (call-with-values (lambda () (g3496@f* g348f@clause*)) (lambda (g349b@g3498 g349c@g349a) ((lambda (g349f@raisek g34a0@code) (if g349f@raisek (list (list 'call/cc (list 'lambda (list g349f@raisek) (list g348e@outerk (list 'lambda '() g34a0@code))))) (list g348e@outerk (list 'lambda '() g34a0@code)))) g349c@g349a g349b@g3498))))) '#f '#f))) ((lambda (g3477@t) ((lambda (g3479@ls/false) (if (and g3479@ls/false (apply (lambda (g347b@con g347c@clause* g347d@b g347e@b*) (g2cbe@id? g347b@con)) g3479@ls/false)) (apply (lambda (g3483@con g3484@clause* g3485@b g3486@b*) ((lambda (g348b@outerk) (g2e7f@bless (list (list 'call/cc (list 'lambda (list g348b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g3483@con) (g3476@gen-clauses g3483@con g348b@outerk g3484@clause*)) (cons 'lambda (cons '() (cons g3485@b g3486@b*)))))))))) (gensym))) g3479@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3477@t))) (g2ec9@syntax-dispatch g3477@t '(_ (any . each-any) any . each-any)))) g3473@x))) '#f))) (set! g2e99@define-enumeration-macro (lambda (g34f1@stx) ((lambda (g34f4@set? g34f6@remove-dups) (begin (set! g34f4@set? (lambda (g350d@x) (or (null? g350d@x) (and (not (memq (car g350d@x) (cdr g350d@x))) (g34f4@set? (cdr g350d@x)))))) (set! g34f6@remove-dups (lambda (g350b@ls) (if (null? g350b@ls) '() (cons (car g350b@ls) (g34f6@remove-dups (remq (car g350b@ls) (cdr g350b@ls))))))) ((lambda (g34f7@t) ((lambda (g34f9@ls/false) (if (and g34f9@ls/false (apply (lambda (g34fb@name g34fc@id* g34fd@maker) (and (g2cbe@id? g34fb@name) (g2cbe@id? g34fd@maker) (for-all g2cbe@id? g34fc@id*))) g34f9@ls/false)) (apply (lambda (g3501@name g3502@id* g3503@maker) ((lambda (g3507@name* g3508@mk) (g2e7f@bless (list 'begin (list 'define g3508@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote g3507@name*)))) (list 'define-syntax g3501@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g3507@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote g3501@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax g3503@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote g3503@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote g3507@name*)) (cons 'syntax-violation (cons (list 'quote g3503@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons g3508@mk '('(n* ...)))))))))))) (g34f6@remove-dups (g2fb8@syntax->datum g3502@id*)) (gensym))) g34f9@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g34f7@t))) (g2ec9@syntax-dispatch g34f7@t '(_ any each-any any)))) g34f1@stx))) '#f '#f))) (set! g2e9b@time-macro (lambda (g350f@stx) ((lambda (g3511@t) ((lambda (g3513@ls/false) (if g3513@ls/false (apply (lambda (g3515@expr) (g2e7f@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() g3515@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) g3513@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3511@t))) (g2ec9@syntax-dispatch g3511@t '(_ any)))) g350f@stx))) (set! g2e9d@delay-macro (lambda (g3517@stx) ((lambda (g3519@t) ((lambda (g351b@ls/false) (if g351b@ls/false (apply (lambda (g351d@expr) (g2e7f@bless (list 'make-promise (list 'lambda '() g351d@expr)))) g351b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3519@t))) (g2ec9@syntax-dispatch g3519@t '(_ any)))) g3517@stx))) (set! g2e9f@assert-macro (lambda (g351f@stx) ((lambda (g3521@t) ((lambda (g3523@ls/false) (if g3523@ls/false (apply (lambda (g3525@expr) ((lambda (g3527@pos) (g2e7f@bless (list 'unless g3525@expr (list 'assertion-error (list 'quote g3525@expr) (list 'quote g3527@pos))))) (or (g2faa@expression-position g351f@stx) (g2faa@expression-position g3525@expr)))) g3523@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3521@t))) (g2ec9@syntax-dispatch g3521@t '(_ any)))) g351f@stx))) (set! g2ea1@endianness-macro (lambda (g3529@stx) ((lambda (g352b@t) ((lambda (g352d@ls/false) (if g352d@ls/false (apply (lambda (g352f@e) ((lambda (g3531@t) (if (memv g3531@t '(little)) (g2e7f@bless ''little) (if (memv g3531@t '(big)) (g2e7f@bless ''big) (g2fb2@syntax-violation '#f '"endianness must be big or little" g3529@stx)))) (g2fb8@syntax->datum g352f@e))) g352d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g352b@t))) (g2ec9@syntax-dispatch g352b@t '(_ any)))) g3529@stx))) (set! g2ea3@identifier-syntax-macro (lambda (g3533@stx) ((lambda (g3535@t) ((lambda (g3537@ls/false) (if g3537@ls/false (apply (lambda (g3539@expr) (g2e7f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g3539@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g3539@expr) '((syntax (e* ...)))))))))) g3537@ls/false) ((lambda (g353b@t) ((lambda (g353d@ls/false) (if (and g353d@ls/false (apply (lambda (g353f@id1 g3540@expr1 g3541@id2 g3542@expr2 g3543@expr3) (and (g2cbe@id? g353f@id1) (g2cbe@id? g3541@id2) (g2cbe@id? g3542@expr2))) g353d@ls/false)) (apply (lambda (g3549@id1 g354a@expr1 g354b@id2 g354c@expr2 g354d@expr3) (g2e7f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g354a@expr1)) (list (list 'set! 'id g354c@expr2) (list 'syntax g354d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g354a@expr1 '(e* ...))))))))) g353d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g353b@t))) (g2ec9@syntax-dispatch g353b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) g3535@t))) (g2ec9@syntax-dispatch g3535@t '(_ any)))) g3533@stx))) (set! g2ea5@do-macro (lambda (g3553@stx) ((lambda (g3556@bind) (begin (set! g3556@bind (lambda (g356d@x) ((lambda (g356f@t) ((lambda (g3571@ls/false) (if g3571@ls/false (apply (lambda (g3573@x g3574@init) (list g3573@x g3574@init g3573@x)) g3571@ls/false) ((lambda (g3577@t) ((lambda (g3579@ls/false) (if g3579@ls/false (apply (lambda (g357b@x g357c@init g357d@step) (list g357b@x g357c@init g357d@step)) g3579@ls/false) ((lambda (g3581@t) ((lambda (g3583@ls/false) (if g3583@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid binding" g3553@stx)) g3583@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3581@t))) (g2ec9@syntax-dispatch g3581@t '_))) g3577@t))) (g2ec9@syntax-dispatch g3577@t '(any any any)))) g356f@t))) (g2ec9@syntax-dispatch g356f@t '(any any)))) g356d@x))) ((lambda (g3557@t) ((lambda (g3559@ls/false) (if g3559@ls/false (apply (lambda (g355b@binding* g355c@test g355d@expr* g355e@command*) ((lambda (g3563@t) ((lambda (g3565@ls/false) (if g3565@ls/false (apply (lambda (g3567@x* g3568@init* g3569@step*) (if (g2cc8@valid-bound-ids? g3567@x*) (g2e7f@bless (list 'letrec (list (list 'loop (list 'lambda g3567@x* (list 'if g355c@test (cons 'begin (cons '(if #f #f) g355d@expr*)) (cons 'begin (append g355e@command* (list (cons 'loop g3569@step*)))))))) (cons 'loop g3568@init*))) (g2fb2@syntax-violation '#f '"invalid bindings" g3553@stx))) g3565@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3563@t))) (g2ec9@syntax-dispatch g3563@t '#(each (any any any))))) (map g3556@bind g355b@binding*))) g3559@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3557@t))) (g2ec9@syntax-dispatch g3557@t '(_ each-any (any . each-any) . each-any)))) g3553@stx))) '#f))) (set! g2ea7@let*-macro (lambda (g3585@stx) ((lambda (g3587@t) ((lambda (g3589@ls/false) (if (and g3589@ls/false (apply (lambda (g358b@lhs* g358c@rhs* g358d@b g358e@b*) (for-all g2cbe@id? g358b@lhs*)) g3589@ls/false)) (apply (lambda (g3593@lhs* g3594@rhs* g3595@b g3596@b*) (g2e7f@bless ((letrec ((g359b@f (lambda (g359d@x*) (if (null? g359d@x*) (cons 'let (cons '() (cons g3595@b g3596@b*))) (list 'let (list (car g359d@x*)) (g359b@f (cdr g359d@x*))))))) g359b@f) (map list g3593@lhs* g3594@rhs*)))) g3589@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3587@t))) (g2ec9@syntax-dispatch g3587@t '(_ #(each (any any)) any . each-any)))) g3585@stx))) (set! g2ea9@or-macro (lambda (g359f@stx) ((lambda (g35a1@t) ((lambda (g35a3@ls/false) (if g35a3@ls/false (apply (lambda () '#f) g35a3@ls/false) ((lambda (g35a5@t) ((lambda (g35a7@ls/false) (if g35a7@ls/false (apply (lambda (g35a9@e g35aa@e*) (g2e7f@bless ((letrec ((g35ad@f (lambda (g35af@e g35b0@e*) (if (null? g35b0@e*) (list 'begin '#f g35af@e) (list 'let (list (list 't g35af@e)) (list 'if 't 't (g35ad@f (car g35b0@e*) (cdr g35b0@e*)))))))) g35ad@f) g35a9@e g35aa@e*))) g35a7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g35a5@t))) (g2ec9@syntax-dispatch g35a5@t '(_ any . each-any)))) g35a1@t))) (g2ec9@syntax-dispatch g35a1@t '(_)))) g359f@stx))) (set! g2eab@and-macro (lambda (g35b3@stx) ((lambda (g35b5@t) ((lambda (g35b7@ls/false) (if g35b7@ls/false (apply (lambda () '#t) g35b7@ls/false) ((lambda (g35b9@t) ((lambda (g35bb@ls/false) (if g35bb@ls/false (apply (lambda (g35bd@e g35be@e*) (g2e7f@bless ((letrec ((g35c1@f (lambda (g35c3@e g35c4@e*) (if (null? g35c4@e*) (list 'begin '#f g35c3@e) (cons 'if (cons g35c3@e (cons (g35c1@f (car g35c4@e*) (cdr g35c4@e*)) '(#f)))))))) g35c1@f) g35bd@e g35be@e*))) g35bb@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g35b9@t))) (g2ec9@syntax-dispatch g35b9@t '(_ any . each-any)))) g35b5@t))) (g2ec9@syntax-dispatch g35b5@t '(_)))) g35b3@stx))) (set! g2ead@cond-macro (lambda (g35c7@stx) ((lambda (g35c9@t) ((lambda (g35cb@ls/false) (if g35cb@ls/false (apply (lambda (g35cd@cls g35ce@cls*) (g2e7f@bless ((letrec ((g35d1@f (lambda (g35d3@cls g35d4@cls*) (if (null? g35d4@cls*) ((lambda (g35d7@t) ((lambda (g35d9@ls/false) (if g35d9@ls/false (apply (lambda (g35db@e g35dc@e*) (cons 'begin (cons g35db@e g35dc@e*))) g35d9@ls/false) ((lambda (g35df@t) ((lambda (g35e1@ls/false) (if g35e1@ls/false (apply (lambda (g35e3@e g35e4@p) (list 'let (list (list 't g35e3@e)) (list 'if 't (cons g35e4@p '(t))))) g35e1@ls/false) ((lambda (g35e7@t) ((lambda (g35e9@ls/false) (if g35e9@ls/false (apply (lambda (g35eb@e) (cons 'or (cons g35eb@e '((if #f #f))))) g35e9@ls/false) ((lambda (g35ed@t) ((lambda (g35ef@ls/false) (if g35ef@ls/false (apply (lambda (g35f1@e g35f2@e*) (list 'if g35f1@e (cons 'begin g35f2@e*))) g35ef@ls/false) ((lambda (g35f5@t) ((lambda (g35f7@ls/false) (if g35f7@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid last clause" g35c7@stx)) g35f7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g35f5@t))) (g2ec9@syntax-dispatch g35f5@t '_))) g35ed@t))) (g2ec9@syntax-dispatch g35ed@t '(any . each-any)))) g35e7@t))) (g2ec9@syntax-dispatch g35e7@t '(any)))) g35df@t))) (g2ec9@syntax-dispatch g35df@t '(any #(scheme-id =>) any)))) g35d7@t))) (g2ec9@syntax-dispatch g35d7@t '(#(scheme-id else) any . each-any)))) g35d3@cls) ((lambda (g35f9@t) ((lambda (g35fb@ls/false) (if g35fb@ls/false (apply (lambda (g35fd@e g35fe@e*) (g2fb2@syntax-violation '#f '"incorrect position of keyword else" g35c7@stx)) g35fb@ls/false) ((lambda (g3601@t) ((lambda (g3603@ls/false) (if g3603@ls/false (apply (lambda (g3605@e g3606@p) (list 'let (list (list 't g3605@e)) (list 'if 't (cons g3606@p '(t)) (g35d1@f (car g35d4@cls*) (cdr g35d4@cls*))))) g3603@ls/false) ((lambda (g3609@t) ((lambda (g360b@ls/false) (if g360b@ls/false (apply (lambda (g360d@e) (list 'or g360d@e (g35d1@f (car g35d4@cls*) (cdr g35d4@cls*)))) g360b@ls/false) ((lambda (g360f@t) ((lambda (g3611@ls/false) (if g3611@ls/false (apply (lambda (g3613@e g3614@e*) (list 'if g3613@e (cons 'begin g3614@e*) (g35d1@f (car g35d4@cls*) (cdr g35d4@cls*)))) g3611@ls/false) ((lambda (g3617@t) ((lambda (g3619@ls/false) (if g3619@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid last clause" g35c7@stx)) g3619@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3617@t))) (g2ec9@syntax-dispatch g3617@t '_))) g360f@t))) (g2ec9@syntax-dispatch g360f@t '(any . each-any)))) g3609@t))) (g2ec9@syntax-dispatch g3609@t '(any)))) g3601@t))) (g2ec9@syntax-dispatch g3601@t '(any #(scheme-id =>) any)))) g35f9@t))) (g2ec9@syntax-dispatch g35f9@t '(#(scheme-id else) any . each-any)))) g35d3@cls))))) g35d1@f) g35cd@cls g35ce@cls*))) g35cb@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g35c9@t))) (g2ec9@syntax-dispatch g35c9@t '(_ any . each-any)))) g35c7@stx))) (set! g2eaf@do-include (lambda (g361b@stx g361c@id g361d@filename) ((lambda (g3621@filename) (begin (if (not (and (string? g3621@filename) (g2cbe@id? g361c@id))) (g2fb2@syntax-violation '#f '"invalid syntax" g361b@stx) (void)) (cons (g2e7f@bless 'begin) (with-input-from-file g3621@filename (lambda () ((letrec ((g3623@f (lambda (g3625@ls) ((lambda (g3627@x) (if (eof-object? g3627@x) (reverse g3625@ls) (g3623@f (cons (g2c9c@datum->stx g361c@id g3627@x) g3625@ls)))) (g285b@g2778@read-annotated))))) g3623@f) '())))))) (g2cd4@stx->datum g361d@filename)))) (set! g2eb1@include-macro (lambda (g3629@e) ((lambda (g362b@t) ((lambda (g362d@ls/false) (if g362d@ls/false (apply (lambda (g362f@id g3630@filename) (g2eaf@do-include g3629@e g362f@id g3630@filename)) g362d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g362b@t))) (g2ec9@syntax-dispatch g362b@t '(any any)))) g3629@e))) (set! g2eb3@include-into-macro (lambda (g3633@e) ((lambda (g3635@t) ((lambda (g3637@ls/false) (if g3637@ls/false (apply (lambda (g3639@id g363a@filename) (g2eaf@do-include g3633@e g3639@id g363a@filename)) g3637@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3635@t))) (g2ec9@syntax-dispatch g3635@t '(_ any any)))) g3633@e))) (set! g2eb5@syntax-rules-macro (lambda (g363d@e) ((lambda (g363f@t) ((lambda (g3641@ls/false) (if g3641@ls/false (apply (lambda (g3643@lits g3644@pat* g3645@tmp*) (begin (g2ecf@verify-literals g3643@lits g363d@e) (g2e7f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g3643@lits (map (lambda (g3649@pat g364a@tmp) ((lambda (g364d@t) ((lambda (g364f@ls/false) (if g364f@ls/false (apply (lambda (g3651@rest) (list (cons 'g g3651@rest) (list 'syntax g364a@tmp))) g364f@ls/false) ((lambda (g3653@t) ((lambda (g3655@ls/false) (if g3655@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid syntax-rules pattern" g363d@e g3649@pat)) g3655@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3653@t))) (g2ec9@syntax-dispatch g3653@t '_))) g364d@t))) (g2ec9@syntax-dispatch g364d@t '(_ . any)))) g3649@pat)) g3644@pat* g3645@tmp*)))))))) g3641@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g363f@t))) (g2ec9@syntax-dispatch g363f@t '(_ each-any . #(each (any any)))))) g363d@e))) (set! g2eb7@quasiquote-macro ((lambda () ((lambda (g3658@datum g3674@quasicons* g3676@quasicons g3678@quasiappend g367a@quasivector g367c@vquasi g367e@quasi) (begin (set! g3658@datum (lambda (g3759@x) (list (g2e53@scheme-stx 'quote) (g2ca6@mkstx g3759@x '() '() '())))) (set! g3674@quasicons* (lambda (g3751@x g3752@y) ((letrec ((g3755@f (lambda (g3757@x) (if (null? g3757@x) g3752@y (g3676@quasicons (car g3757@x) (g3755@f (cdr g3757@x))))))) g3755@f) g3751@x))) (set! g3676@quasicons (lambda (g372b@x g372c@y) ((lambda (g372f@t) ((lambda (g3731@ls/false) (if g3731@ls/false (apply (lambda (g3733@dy) ((lambda (g3735@t) ((lambda (g3737@ls/false) (if g3737@ls/false (apply (lambda (g3739@dx) (list (g2e53@scheme-stx 'quote) (cons g3739@dx g3733@dy))) g3737@ls/false) ((lambda (g373b@t) ((lambda (g373d@ls/false) (if g373d@ls/false (apply (lambda () ((lambda (g373f@t) ((lambda (g3741@ls/false) (if g3741@ls/false (apply (lambda () (list (g2e53@scheme-stx 'list) g372b@x)) g3741@ls/false) ((lambda (g3743@t) ((lambda (g3745@ls/false) (if g3745@ls/false (apply (lambda () (list (g2e53@scheme-stx 'cons) g372b@x g372c@y)) g3745@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3743@t))) (g2ec9@syntax-dispatch g3743@t '_))) g373f@t))) (g2ec9@syntax-dispatch g373f@t '()))) g3733@dy)) g373d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g373b@t))) (g2ec9@syntax-dispatch g373b@t '_))) g3735@t))) (g2ec9@syntax-dispatch g3735@t '(#(scheme-id quote) any)))) g372b@x)) g3731@ls/false) ((lambda (g3747@t) ((lambda (g3749@ls/false) (if g3749@ls/false (apply (lambda (g374b@stuff) (cons* (g2e53@scheme-stx 'list) g372b@x g374b@stuff)) g3749@ls/false) ((lambda (g374d@t) ((lambda (g374f@ls/false) (if g374f@ls/false (apply (lambda () (list (g2e53@scheme-stx 'cons) g372b@x g372c@y)) g374f@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g374d@t))) (g2ec9@syntax-dispatch g374d@t '_))) g3747@t))) (g2ec9@syntax-dispatch g3747@t '(#(scheme-id list) . each-any)))) g372f@t))) (g2ec9@syntax-dispatch g372f@t '(#(scheme-id quote) any)))) g372c@y))) (set! g3678@quasiappend (lambda (g3711@x g3712@y) ((lambda (g3715@ls) (if (null? g3715@ls) (list (g2e53@scheme-stx 'quote) '()) (if (null? (cdr g3715@ls)) (car g3715@ls) (cons* (g2e53@scheme-stx 'append) g3715@ls)))) ((letrec ((g3717@f (lambda (g3719@x) (if (null? g3719@x) ((lambda (g371b@t) ((lambda (g371d@ls/false) (if g371d@ls/false (apply (lambda () '()) g371d@ls/false) ((lambda (g371f@t) ((lambda (g3721@ls/false) (if g3721@ls/false (apply (lambda () (list g3712@y)) g3721@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g371f@t))) (g2ec9@syntax-dispatch g371f@t '_))) g371b@t))) (g2ec9@syntax-dispatch g371b@t '(#(scheme-id quote) ())))) g3712@y) ((lambda (g3723@t) ((lambda (g3725@ls/false) (if g3725@ls/false (apply (lambda () (g3717@f (cdr g3719@x))) g3725@ls/false) ((lambda (g3727@t) ((lambda (g3729@ls/false) (if g3729@ls/false (apply (lambda () (cons (car g3719@x) (g3717@f (cdr g3719@x)))) g3729@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3727@t))) (g2ec9@syntax-dispatch g3727@t '_))) g3723@t))) (g2ec9@syntax-dispatch g3723@t '(#(scheme-id quote) ())))) (car g3719@x)))))) g3717@f) g3711@x)))) (set! g367a@quasivector (lambda (g36df@x) ((lambda (g36e1@pat-x) ((lambda (g36e3@t) ((lambda (g36e5@ls/false) (if g36e5@ls/false (apply (lambda (g36e7@x*) (list (g2e53@scheme-stx 'quote) (list->vector g36e7@x*))) g36e5@ls/false) ((lambda (g36e9@t) ((lambda (g36eb@ls/false) (if g36eb@ls/false (apply (lambda () ((letrec ((g36ed@f (lambda (g36ef@x g36f0@k) ((lambda (g36f3@t) ((lambda (g36f5@ls/false) (if g36f5@ls/false (apply (lambda (g36f7@x*) (g36f0@k (map (lambda (g36f9@x) (list (g2e53@scheme-stx 'quote) g36f9@x)) g36f7@x*))) g36f5@ls/false) ((lambda (g36fb@t) ((lambda (g36fd@ls/false) (if g36fd@ls/false (apply (lambda (g36ff@x*) (g36f0@k g36ff@x*)) g36fd@ls/false) ((lambda (g3701@t) ((lambda (g3703@ls/false) (if g3703@ls/false (apply (lambda (g3705@x g3706@y) (g36ed@f g3706@y (lambda (g3709@ls) (g36f0@k (cons g3705@x g3709@ls))))) g3703@ls/false) ((lambda (g370b@t) ((lambda (g370d@ls/false) (if g370d@ls/false (apply (lambda () (list (g2e53@scheme-stx 'list->vector) g36e1@pat-x)) g370d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g370b@t))) (g2ec9@syntax-dispatch g370b@t '_))) g3701@t))) (g2ec9@syntax-dispatch g3701@t '(#(scheme-id cons) any any)))) g36fb@t))) (g2ec9@syntax-dispatch g36fb@t '(#(scheme-id list) . each-any)))) g36f3@t))) (g2ec9@syntax-dispatch g36f3@t '(#(scheme-id quote) each-any)))) g36ef@x)))) g36ed@f) g36df@x (lambda (g370f@ls) (cons* (g2e53@scheme-stx 'vector) g370f@ls)))) g36eb@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g36e9@t))) (g2ec9@syntax-dispatch g36e9@t '_))) g36e3@t))) (g2ec9@syntax-dispatch g36e3@t '(#(scheme-id quote) each-any)))) g36e1@pat-x)) g36df@x))) (set! g367c@vquasi (lambda (g36bd@p g36be@lev) ((lambda (g36c1@t) ((lambda (g36c3@ls/false) (if g36c3@ls/false (apply (lambda (g36c5@p g36c6@q) ((lambda (g36c9@t) ((lambda (g36cb@ls/false) (if g36cb@ls/false (apply (lambda (g36cd@p) (if (= g36be@lev '0) (g3674@quasicons* g36cd@p (g367c@vquasi g36c6@q g36be@lev)) (g3676@quasicons (g3676@quasicons (g3658@datum 'unquote) (g367e@quasi g36cd@p (- g36be@lev '1))) (g367c@vquasi g36c6@q g36be@lev)))) g36cb@ls/false) ((lambda (g36cf@t) ((lambda (g36d1@ls/false) (if g36d1@ls/false (apply (lambda (g36d3@p) (if (= g36be@lev '0) (g3678@quasiappend g36d3@p (g367c@vquasi g36c6@q g36be@lev)) (g3676@quasicons (g3676@quasicons (g3658@datum 'unquote-splicing) (g367e@quasi g36d3@p (- g36be@lev '1))) (g367c@vquasi g36c6@q g36be@lev)))) g36d1@ls/false) ((lambda (g36d5@t) ((lambda (g36d7@ls/false) (if g36d7@ls/false (apply (lambda (g36d9@p) (g3676@quasicons (g367e@quasi g36d9@p g36be@lev) (g367c@vquasi g36c6@q g36be@lev))) g36d7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g36d5@t))) (g2ec9@syntax-dispatch g36d5@t 'any))) g36cf@t))) (g2ec9@syntax-dispatch g36cf@t '(#(scheme-id unquote-splicing) . each-any)))) g36c9@t))) (g2ec9@syntax-dispatch g36c9@t '(#(scheme-id unquote) . each-any)))) g36c5@p)) g36c3@ls/false) ((lambda (g36db@t) ((lambda (g36dd@ls/false) (if g36dd@ls/false (apply (lambda () (list (g2e53@scheme-stx 'quote) '())) g36dd@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g36db@t))) (g2ec9@syntax-dispatch g36db@t '()))) g36c1@t))) (g2ec9@syntax-dispatch g36c1@t '(any . any)))) g36bd@p))) (set! g367e@quasi (lambda (g3687@p g3688@lev) ((lambda (g368b@t) ((lambda (g368d@ls/false) (if g368d@ls/false (apply (lambda (g368f@p) (if (= g3688@lev '0) g368f@p (g3676@quasicons (g3658@datum 'unquote) (g367e@quasi (list g368f@p) (- g3688@lev '1))))) g368d@ls/false) ((lambda (g3691@t) ((lambda (g3693@ls/false) (if g3693@ls/false (apply (lambda (g3695@p g3696@q) (if (= g3688@lev '0) (g3674@quasicons* g3695@p (g367e@quasi g3696@q g3688@lev)) (g3676@quasicons (g3676@quasicons (g3658@datum 'unquote) (g367e@quasi g3695@p (- g3688@lev '1))) (g367e@quasi g3696@q g3688@lev)))) g3693@ls/false) ((lambda (g3699@t) ((lambda (g369b@ls/false) (if g369b@ls/false (apply (lambda (g369d@p g369e@q) (if (= g3688@lev '0) (g3678@quasiappend g369d@p (g367e@quasi g369e@q g3688@lev)) (g3676@quasicons (g3676@quasicons (g3658@datum 'unquote-splicing) (g367e@quasi g369d@p (- g3688@lev '1))) (g367e@quasi g369e@q g3688@lev)))) g369b@ls/false) ((lambda (g36a1@t) ((lambda (g36a3@ls/false) (if g36a3@ls/false (apply (lambda (g36a5@p) (g3676@quasicons (g3658@datum 'quasiquote) (g367e@quasi (list g36a5@p) (+ g3688@lev '1)))) g36a3@ls/false) ((lambda (g36a7@t) ((lambda (g36a9@ls/false) (if g36a9@ls/false (apply (lambda (g36ab@p g36ac@q) (g3676@quasicons (g367e@quasi g36ab@p g3688@lev) (g367e@quasi g36ac@q g3688@lev))) g36a9@ls/false) ((lambda (g36af@t) ((lambda (g36b1@ls/false) (if (and g36b1@ls/false (apply (lambda (g36b3@x) (not (g2c86@stx? g36b3@x))) g36b1@ls/false)) (apply (lambda (g36b5@x) (g367a@quasivector (g367c@vquasi g36b5@x g3688@lev))) g36b1@ls/false) ((lambda (g36b7@t) ((lambda (g36b9@ls/false) (if g36b9@ls/false (apply (lambda (g36bb@p) (list (g2e53@scheme-stx 'quote) g36bb@p)) g36b9@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g36b7@t))) (g2ec9@syntax-dispatch g36b7@t 'any))) g36af@t))) (g2ec9@syntax-dispatch g36af@t '#(vector each-any)))) g36a7@t))) (g2ec9@syntax-dispatch g36a7@t '(any . any)))) g36a1@t))) (g2ec9@syntax-dispatch g36a1@t '(#(scheme-id quasiquote) any)))) g3699@t))) (g2ec9@syntax-dispatch g3699@t '((#(scheme-id unquote-splicing) . each-any) . any)))) g3691@t))) (g2ec9@syntax-dispatch g3691@t '((#(scheme-id unquote) . each-any) . any)))) g368b@t))) (g2ec9@syntax-dispatch g368b@t '(#(scheme-id unquote) any)))) g3687@p))) (lambda (g367f@x) ((lambda (g3681@t) ((lambda (g3683@ls/false) (if g3683@ls/false (apply (lambda (g3685@e) (g367e@quasi g3685@e '0)) g3683@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3681@t))) (g2ec9@syntax-dispatch g3681@t '(_ any)))) g367f@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! g2eb9@quasisyntax-macro ((lambda () ((lambda (g375c@quasi) (begin (set! g375c@quasi (lambda (g3777@p g3778@lev) ((lambda (g377b@t) ((lambda (g377d@ls/false) (if g377d@ls/false (apply (lambda (g377f@p) (if (= g3778@lev '0) ((lambda (g3781@g) (values (list g3781@g) (list g377f@p) g3781@g)) (gensym)) (call-with-values (lambda () (g375c@quasi g377f@p (- g3778@lev '1))) (lambda (g3789@g3784 g378a@g3786 g378b@g3788) ((lambda (g378f@p g3790@rhs* g3791@lhs*) (values g3791@lhs* g3790@rhs* (list 'unsyntax g378f@p))) g378b@g3788 g378a@g3786 g3789@g3784))))) g377d@ls/false) ((lambda (g3795@t) ((lambda (g3797@ls/false) (if (and g3797@ls/false (apply (lambda () (= g3778@lev '0)) g3797@ls/false)) (apply (lambda () (g2fb2@syntax-violation '#f '"incorrect use of unsyntax" g3777@p)) g3797@ls/false) ((lambda (g3799@t) ((lambda (g379b@ls/false) (if g379b@ls/false (apply (lambda (g379d@p* g379e@q) (call-with-values (lambda () (g375c@quasi g379e@q g3778@lev)) (lambda (g37a7@g37a2 g37a8@g37a4 g37a9@g37a6) ((lambda (g37ad@q g37ae@rhs* g37af@lhs*) (if (= g3778@lev '0) ((lambda (g37b3@g*) (values (append g37b3@g* g37af@lhs*) (append g379d@p* g37ae@rhs*) (append g37b3@g* g37ad@q))) (map (lambda (g37b5@x) (gensym)) g379d@p*)) (call-with-values (lambda () (g375c@quasi g379d@p* (- g3778@lev '1))) (lambda (g37bd@g37b8 g37be@g37ba g37bf@g37bc) ((lambda (g37c3@p* g37c4@rhs2* g37c5@lhs2*) (values (append g37c5@lhs2* g37af@lhs*) (append g37c4@rhs2* g37ae@rhs*) (cons (cons 'unsyntax g37c3@p*) g37ad@q))) g37bf@g37bc g37be@g37ba g37bd@g37b8))))) g37a9@g37a6 g37a8@g37a4 g37a7@g37a2)))) g379b@ls/false) ((lambda (g37c9@t) ((lambda (g37cb@ls/false) (if g37cb@ls/false (apply (lambda (g37cd@p* g37ce@q) (call-with-values (lambda () (g375c@quasi g37ce@q g3778@lev)) (lambda (g37d7@g37d2 g37d8@g37d4 g37d9@g37d6) ((lambda (g37dd@q g37de@rhs* g37df@lhs*) (if (= g3778@lev '0) ((lambda (g37e3@g*) (values (append (map (lambda (g37e5@g) (cons g37e5@g '(...))) g37e3@g*) g37df@lhs*) (append g37cd@p* g37de@rhs*) (append (apply append (map (lambda (g37e7@g) (cons g37e7@g '(...))) g37e3@g*)) g37dd@q))) (map (lambda (g37e9@x) (gensym)) g37cd@p*)) (call-with-values (lambda () (g375c@quasi g37cd@p* (- g3778@lev '1))) (lambda (g37f1@g37ec g37f2@g37ee g37f3@g37f0) ((lambda (g37f7@p* g37f8@rhs2* g37f9@lhs2*) (values (append g37f9@lhs2* g37df@lhs*) (append g37f8@rhs2* g37de@rhs*) (cons (cons 'unsyntax-splicing g37f7@p*) g37dd@q))) g37f3@g37f0 g37f2@g37ee g37f1@g37ec))))) g37d9@g37d6 g37d8@g37d4 g37d7@g37d2)))) g37cb@ls/false) ((lambda (g37fd@t) ((lambda (g37ff@ls/false) (if (and g37ff@ls/false (apply (lambda () (= g3778@lev '0)) g37ff@ls/false)) (apply (lambda () (g2fb2@syntax-violation '#f '"incorrect use of unsyntax-splicing" g3777@p)) g37ff@ls/false) ((lambda (g3801@t) ((lambda (g3803@ls/false) (if g3803@ls/false (apply (lambda (g3805@p) (call-with-values (lambda () (g375c@quasi g3805@p (+ g3778@lev '1))) (lambda (g380d@g3808 g380e@g380a g380f@g380c) ((lambda (g3813@p g3814@rhs* g3815@lhs*) (values g3815@lhs* g3814@rhs* (list 'quasisyntax g3813@p))) g380f@g380c g380e@g380a g380d@g3808)))) g3803@ls/false) ((lambda (g3819@t) ((lambda (g381b@ls/false) (if g381b@ls/false (apply (lambda (g381d@p g381e@q) (call-with-values (lambda () (g375c@quasi g381d@p g3778@lev)) (lambda (g382d@g3822 g382e@g3824 g382f@g3826) (call-with-values (lambda () (g375c@quasi g381e@q g3778@lev)) (lambda (g3833@g3828 g3834@g382a g3835@g382c) ((lambda (g3839@q g383a@rhs2* g383b@lhs2* g383c@p g383d@rhs* g383e@lhs*) (values (append g383b@lhs2* g383e@lhs*) (append g383a@rhs2* g383d@rhs*) (cons g383c@p g3839@q))) g3835@g382c g3834@g382a g3833@g3828 g382f@g3826 g382e@g3824 g382d@g3822)))))) g381b@ls/false) ((lambda (g3845@t) ((lambda (g3847@ls/false) (if g3847@ls/false (apply (lambda (g3849@x*) (call-with-values (lambda () (g375c@quasi g3849@x* g3778@lev)) (lambda (g3851@g384c g3852@g384e g3853@g3850) ((lambda (g3857@x* g3858@rhs* g3859@lhs*) (values g3859@lhs* g3858@rhs* (list->vector g3857@x*))) g3853@g3850 g3852@g384e g3851@g384c)))) g3847@ls/false) ((lambda (g385d@t) ((lambda (g385f@ls/false) (if g385f@ls/false (apply (lambda () (values '() '() g3777@p)) g385f@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g385d@t))) (g2ec9@syntax-dispatch g385d@t '_))) g3845@t))) (g2ec9@syntax-dispatch g3845@t '#(vector each-any)))) g3819@t))) (g2ec9@syntax-dispatch g3819@t '(any . any)))) g3801@t))) (g2ec9@syntax-dispatch g3801@t '(#(scheme-id quasisyntax) any)))) g37fd@t))) (g2ec9@syntax-dispatch g37fd@t '#(scheme-id unsyntax-splicing)))) g37c9@t))) (g2ec9@syntax-dispatch g37c9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) g3799@t))) (g2ec9@syntax-dispatch g3799@t '((#(scheme-id unsyntax) . each-any) . any)))) g3795@t))) (g2ec9@syntax-dispatch g3795@t '#(scheme-id unsyntax)))) g377b@t))) (g2ec9@syntax-dispatch g377b@t '(#(scheme-id unsyntax) any)))) g3777@p))) (lambda (g375d@x) ((lambda (g375f@t) ((lambda (g3761@ls/false) (if g3761@ls/false (apply (lambda (g3763@e) (call-with-values (lambda () (g375c@quasi g3763@e '0)) (lambda (g376b@g3766 g376c@g3768 g376d@g376a) ((lambda (g3771@v g3772@rhs* g3773@lhs*) (g2e7f@bless (list 'syntax-case (cons 'list g3772@rhs*) '() (list g3773@lhs* (list 'syntax g3771@v))))) g376d@g376a g376c@g3768 g376b@g3766)))) g3761@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g375f@t))) (g2ec9@syntax-dispatch g375f@t '(_ any)))) g375d@x)))) '#f)))) (set! g2ebb@define-struct-macro (lambda (g3861@stx) (g2fb2@syntax-violation '#f '"define-struct not supported" g3861@stx))) (set! g2ebd@define-record-type-macro (lambda (g3863@x) ((lambda (g3866@id g3868@get-record-name g386a@get-record-constructor-name g386c@get-record-predicate-name g386e@get-clause g3870@foo-rtd-code g3872@parent-rtd-code g3874@parent-rcd-code g3876@foo-rcd-code g3878@get-protocol-code g387a@get-fields g387c@get-mutator-indices g387e@get-mutators g3880@get-accessors g3882@enumerate g3884@do-define-record g3886@verify-clauses) (begin (set! g3866@id (lambda (g3a59@ctxt . g3a5b@str*) (g2fb6@datum->syntax g3a59@ctxt (string->symbol (apply string-append (map (lambda (g3a5d@x) (if (symbol? g3a5d@x) (symbol->string g3a5d@x) (if (string? g3a5d@x) g3a5d@x (assertion-violation 'define-record-type '"BUG")))) g3a5b@str*)))))) (set! g3868@get-record-name (lambda (g3a47@spec) ((lambda (g3a49@t) ((lambda (g3a4b@ls/false) (if g3a4b@ls/false (apply (lambda (g3a4d@foo g3a4e@make-foo g3a4f@foo?) g3a4d@foo) g3a4b@ls/false) ((lambda (g3a53@t) ((lambda (g3a55@ls/false) (if g3a55@ls/false (apply (lambda (g3a57@foo) g3a57@foo) g3a55@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a53@t))) (g2ec9@syntax-dispatch g3a53@t 'any))) g3a49@t))) (g2ec9@syntax-dispatch g3a49@t '(any any any)))) g3a47@spec))) (set! g386a@get-record-constructor-name (lambda (g3a33@spec) ((lambda (g3a35@t) ((lambda (g3a37@ls/false) (if g3a37@ls/false (apply (lambda (g3a39@foo g3a3a@make-foo g3a3b@foo?) g3a3a@make-foo) g3a37@ls/false) ((lambda (g3a3f@t) ((lambda (g3a41@ls/false) (if (and g3a41@ls/false (apply (lambda (g3a43@foo) (g2cbe@id? g3a43@foo)) g3a41@ls/false)) (apply (lambda (g3a45@foo) (g3866@id g3a45@foo '"make-" (g2cd4@stx->datum g3a45@foo))) g3a41@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a3f@t))) (g2ec9@syntax-dispatch g3a3f@t 'any))) g3a35@t))) (g2ec9@syntax-dispatch g3a35@t '(any any any)))) g3a33@spec))) (set! g386c@get-record-predicate-name (lambda (g3a1f@spec) ((lambda (g3a21@t) ((lambda (g3a23@ls/false) (if g3a23@ls/false (apply (lambda (g3a25@foo g3a26@make-foo g3a27@foo?) g3a27@foo?) g3a23@ls/false) ((lambda (g3a2b@t) ((lambda (g3a2d@ls/false) (if (and g3a2d@ls/false (apply (lambda (g3a2f@foo) (g2cbe@id? g3a2f@foo)) g3a2d@ls/false)) (apply (lambda (g3a31@foo) (g3866@id g3a31@foo (g2cd4@stx->datum g3a31@foo) '"?")) g3a2d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a2b@t))) (g2ec9@syntax-dispatch g3a2b@t 'any))) g3a21@t))) (g2ec9@syntax-dispatch g3a21@t '(any any any)))) g3a1f@spec))) (set! g386e@get-clause (lambda (g3a0d@id g3a0e@ls) ((lambda (g3a11@t) ((lambda (g3a13@ls/false) (if g3a13@ls/false (apply (lambda () '#f) g3a13@ls/false) ((lambda (g3a15@t) ((lambda (g3a17@ls/false) (if g3a17@ls/false (apply (lambda (g3a19@x g3a1a@rest g3a1b@ls) (if (g2cc6@free-id=? (g2e7f@bless g3a0d@id) g3a19@x) (cons g3a19@x g3a1a@rest) (g386e@get-clause g3a0d@id g3a1b@ls))) g3a17@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a15@t))) (g2ec9@syntax-dispatch g3a15@t '((any . any) . any)))) g3a11@t))) (g2ec9@syntax-dispatch g3a11@t '()))) g3a0e@ls))) (set! g3870@foo-rtd-code (lambda (g39bb@name g39bc@clause* g39bd@parent-rtd-code) ((lambda (g39c2@convert-field-spec*) (begin (set! g39c2@convert-field-spec* (lambda (g39f3@ls) (list->vector (map (lambda (g39f5@x) ((lambda (g39f7@t) ((lambda (g39f9@ls/false) (if g39f9@ls/false (apply (lambda (g39fb@name g39fc@rest) (list 'mutable g39fb@name)) g39f9@ls/false) ((lambda (g39ff@t) ((lambda (g3a01@ls/false) (if g3a01@ls/false (apply (lambda (g3a03@name g3a04@rest) (list 'immutable g3a03@name)) g3a01@ls/false) ((lambda (g3a07@t) ((lambda (g3a09@ls/false) (if g3a09@ls/false (apply (lambda (g3a0b@name) (list 'immutable g3a0b@name)) g3a09@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a07@t))) (g2ec9@syntax-dispatch g3a07@t 'any))) g39ff@t))) (g2ec9@syntax-dispatch g39ff@t '(#(scheme-id immutable) any . any)))) g39f7@t))) (g2ec9@syntax-dispatch g39f7@t '(#(scheme-id mutable) any . any)))) g39f5@x)) g39f3@ls)))) ((lambda (g39c3@uid-code g39c4@sealed? g39c5@opaque? g39c6@fields) (g2e7f@bless (list 'make-record-type-descriptor (list 'quote g39bb@name) g39bd@parent-rtd-code g39c3@uid-code g39c4@sealed? g39c5@opaque? g39c6@fields))) ((lambda (g39cb@t) ((lambda (g39cd@ls/false) (if g39cd@ls/false (apply (lambda () (list 'quote (gensym))) g39cd@ls/false) ((lambda (g39cf@t) ((lambda (g39d1@ls/false) (if g39d1@ls/false (apply (lambda (g39d3@uid) (list 'quote g39d3@uid)) g39d1@ls/false) ((lambda (g39d5@t) ((lambda (g39d7@ls/false) (if g39d7@ls/false (apply (lambda () '#f) g39d7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g39d5@t))) (g2ec9@syntax-dispatch g39d5@t '_))) g39cf@t))) (g2ec9@syntax-dispatch g39cf@t '(_ any)))) g39cb@t))) (g2ec9@syntax-dispatch g39cb@t '(_)))) (g386e@get-clause 'nongenerative g39bc@clause*)) ((lambda (g39d9@t) ((lambda (g39db@ls/false) (if g39db@ls/false (apply (lambda () '#t) g39db@ls/false) ((lambda (g39dd@t) ((lambda (g39df@ls/false) (if g39df@ls/false (apply (lambda () '#f) g39df@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g39dd@t))) (g2ec9@syntax-dispatch g39dd@t '_))) g39d9@t))) (g2ec9@syntax-dispatch g39d9@t '(_ #(atom #t))))) (g386e@get-clause 'sealed g39bc@clause*)) ((lambda (g39e1@t) ((lambda (g39e3@ls/false) (if g39e3@ls/false (apply (lambda () '#t) g39e3@ls/false) ((lambda (g39e5@t) ((lambda (g39e7@ls/false) (if g39e7@ls/false (apply (lambda () '#f) g39e7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g39e5@t))) (g2ec9@syntax-dispatch g39e5@t '_))) g39e1@t))) (g2ec9@syntax-dispatch g39e1@t '(_ #(atom #t))))) (g386e@get-clause 'opaque g39bc@clause*)) ((lambda (g39e9@t) ((lambda (g39eb@ls/false) (if g39eb@ls/false (apply (lambda (g39ed@field-spec*) (list 'quote (g39c2@convert-field-spec* g39ed@field-spec*))) g39eb@ls/false) ((lambda (g39ef@t) ((lambda (g39f1@ls/false) (if g39f1@ls/false (apply (lambda () ''#()) g39f1@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g39ef@t))) (g2ec9@syntax-dispatch g39ef@t '_))) g39e9@t))) (g2ec9@syntax-dispatch g39e9@t '(_ . each-any)))) (g386e@get-clause 'fields g39bc@clause*))))) '#f))) (set! g3872@parent-rtd-code (lambda (g39a3@clause*) ((lambda (g39a5@t) ((lambda (g39a7@ls/false) (if g39a7@ls/false (apply (lambda (g39a9@name) (list 'record-type-descriptor g39a9@name)) g39a7@ls/false) ((lambda (g39ab@t) ((lambda (g39ad@ls/false) (if g39ad@ls/false (apply (lambda () ((lambda (g39af@t) ((lambda (g39b1@ls/false) (if g39b1@ls/false (apply (lambda (g39b3@rtd g39b4@rcd) g39b3@rtd) g39b1@ls/false) ((lambda (g39b7@t) ((lambda (g39b9@ls/false) (if g39b9@ls/false (apply (lambda () '#f) g39b9@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g39b7@t))) (g2ec9@syntax-dispatch g39b7@t '#(atom #f)))) g39af@t))) (g2ec9@syntax-dispatch g39af@t '(_ any any)))) (g386e@get-clause 'parent-rtd g39a3@clause*))) g39ad@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g39ab@t))) (g2ec9@syntax-dispatch g39ab@t '#(atom #f)))) g39a5@t))) (g2ec9@syntax-dispatch g39a5@t '(_ any)))) (g386e@get-clause 'parent g39a3@clause*)))) (set! g3874@parent-rcd-code (lambda (g398b@clause*) ((lambda (g398d@t) ((lambda (g398f@ls/false) (if g398f@ls/false (apply (lambda (g3991@name) (list 'record-constructor-descriptor g3991@name)) g398f@ls/false) ((lambda (g3993@t) ((lambda (g3995@ls/false) (if g3995@ls/false (apply (lambda () ((lambda (g3997@t) ((lambda (g3999@ls/false) (if g3999@ls/false (apply (lambda (g399b@rtd g399c@rcd) g399c@rcd) g3999@ls/false) ((lambda (g399f@t) ((lambda (g39a1@ls/false) (if g39a1@ls/false (apply (lambda () '#f) g39a1@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g399f@t))) (g2ec9@syntax-dispatch g399f@t '#(atom #f)))) g3997@t))) (g2ec9@syntax-dispatch g3997@t '(_ any any)))) (g386e@get-clause 'parent-rtd g398b@clause*))) g3995@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3993@t))) (g2ec9@syntax-dispatch g3993@t '#(atom #f)))) g398d@t))) (g2ec9@syntax-dispatch g398d@t '(_ any)))) (g386e@get-clause 'parent g398b@clause*)))) (set! g3876@foo-rcd-code (lambda (g3983@clause* g3984@foo-rtd g3985@protocol g3986@parent-rcd-code) (list 'make-record-constructor-descriptor g3984@foo-rtd g3986@parent-rcd-code g3985@protocol))) (set! g3878@get-protocol-code (lambda (g3977@clause*) ((lambda (g3979@t) ((lambda (g397b@ls/false) (if g397b@ls/false (apply (lambda (g397d@expr) g397d@expr) g397b@ls/false) ((lambda (g397f@t) ((lambda (g3981@ls/false) (if g3981@ls/false (apply (lambda () '#f) g3981@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g397f@t))) (g2ec9@syntax-dispatch g397f@t '_))) g3979@t))) (g2ec9@syntax-dispatch g3979@t '(_ any)))) (g386e@get-clause 'protocol g3977@clause*)))) (set! g387a@get-fields (lambda (g3965@clause*) ((lambda (g3967@t) ((lambda (g3969@ls/false) (if g3969@ls/false (apply (lambda () '()) g3969@ls/false) ((lambda (g396b@t) ((lambda (g396d@ls/false) (if g396d@ls/false (apply (lambda (g396f@f*) g396f@f*) g396d@ls/false) ((lambda (g3971@t) ((lambda (g3973@ls/false) (if g3973@ls/false (apply (lambda (g3975@rest) (g387a@get-fields g3975@rest)) g3973@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3971@t))) (g2ec9@syntax-dispatch g3971@t '(_ . any)))) g396b@t))) (g2ec9@syntax-dispatch g396b@t '((#(scheme-id fields) . each-any) . _)))) g3967@t))) (g2ec9@syntax-dispatch g3967@t '()))) g3965@clause*))) (set! g387c@get-mutator-indices (lambda (g394d@fields) ((letrec ((g394f@f (lambda (g3951@fields g3952@i) ((lambda (g3955@t) ((lambda (g3957@ls/false) (if g3957@ls/false (apply (lambda () '()) g3957@ls/false) ((lambda (g3959@t) ((lambda (g395b@ls/false) (if g395b@ls/false (apply (lambda (g395d@rest) (cons g3952@i (g394f@f g395d@rest (+ g3952@i '1)))) g395b@ls/false) ((lambda (g395f@t) ((lambda (g3961@ls/false) (if g3961@ls/false (apply (lambda (g3963@rest) (g394f@f g3963@rest (+ g3952@i '1))) g3961@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g395f@t))) (g2ec9@syntax-dispatch g395f@t '(_ . any)))) g3959@t))) (g2ec9@syntax-dispatch g3959@t '((#(scheme-id mutable) . _) . any)))) g3955@t))) (g2ec9@syntax-dispatch g3955@t '()))) g3951@fields)))) g394f@f) g394d@fields '0))) (set! g387e@get-mutators (lambda (g3923@foo g3924@fields) ((lambda (g3928@gen-name) (begin (set! g3928@gen-name (lambda (g394b@x) (g2fb6@datum->syntax g3923@foo (string->symbol (string-append (symbol->string (g2fb8@syntax->datum g3923@foo)) '"-" (symbol->string (g2fb8@syntax->datum g394b@x)) '"-set!"))))) ((letrec ((g3929@f (lambda (g392b@fields) ((lambda (g392d@t) ((lambda (g392f@ls/false) (if g392f@ls/false (apply (lambda () '()) g392f@ls/false) ((lambda (g3931@t) ((lambda (g3933@ls/false) (if g3933@ls/false (apply (lambda (g3935@name g3936@accessor g3937@mutator g3938@rest) (cons g3937@mutator (g3929@f g3938@rest))) g3933@ls/false) ((lambda (g393d@t) ((lambda (g393f@ls/false) (if g393f@ls/false (apply (lambda (g3941@name g3942@rest) (cons (g3928@gen-name g3941@name) (g3929@f g3942@rest))) g393f@ls/false) ((lambda (g3945@t) ((lambda (g3947@ls/false) (if g3947@ls/false (apply (lambda (g3949@rest) (g3929@f g3949@rest)) g3947@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3945@t))) (g2ec9@syntax-dispatch g3945@t '(_ . any)))) g393d@t))) (g2ec9@syntax-dispatch g393d@t '((#(scheme-id mutable) any) . any)))) g3931@t))) (g2ec9@syntax-dispatch g3931@t '((#(scheme-id mutable) any any any) . any)))) g392d@t))) (g2ec9@syntax-dispatch g392d@t '()))) g392b@fields)))) g3929@f) g3924@fields))) '#f))) (set! g3880@get-accessors (lambda (g38df@foo g38e0@fields) ((lambda (g38e4@gen-name) (begin (set! g38e4@gen-name (lambda (g3921@x) (g2fb6@datum->syntax g38df@foo (string->symbol (string-append (symbol->string (g2fb8@syntax->datum g38df@foo)) '"-" (symbol->string (g2fb8@syntax->datum g3921@x))))))) (map (lambda (g38e5@field) ((lambda (g38e7@t) ((lambda (g38e9@ls/false) (if (and g38e9@ls/false (apply (lambda (g38eb@name g38ec@accessor g38ed@mutator) (g2cbe@id? g38ec@accessor)) g38e9@ls/false)) (apply (lambda (g38f1@name g38f2@accessor g38f3@mutator) g38f2@accessor) g38e9@ls/false) ((lambda (g38f7@t) ((lambda (g38f9@ls/false) (if (and g38f9@ls/false (apply (lambda (g38fb@name g38fc@accessor) (g2cbe@id? g38fc@accessor)) g38f9@ls/false)) (apply (lambda (g38ff@name g3900@accessor) g3900@accessor) g38f9@ls/false) ((lambda (g3903@t) ((lambda (g3905@ls/false) (if (and g3905@ls/false (apply (lambda (g3907@name) (g2cbe@id? g3907@name)) g3905@ls/false)) (apply (lambda (g3909@name) (g38e4@gen-name g3909@name)) g3905@ls/false) ((lambda (g390b@t) ((lambda (g390d@ls/false) (if (and g390d@ls/false (apply (lambda (g390f@name) (g2cbe@id? g390f@name)) g390d@ls/false)) (apply (lambda (g3911@name) (g38e4@gen-name g3911@name)) g390d@ls/false) ((lambda (g3913@t) ((lambda (g3915@ls/false) (if (and g3915@ls/false (apply (lambda (g3917@name) (g2cbe@id? g3917@name)) g3915@ls/false)) (apply (lambda (g3919@name) (g38e4@gen-name g3919@name)) g3915@ls/false) ((lambda (g391b@t) ((lambda (g391d@ls/false) (if g391d@ls/false (apply (lambda (g391f@others) (g2fb2@syntax-violation '#f '"invalid field spec" g38e5@field)) g391d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g391b@t))) (g2ec9@syntax-dispatch g391b@t 'any))) g3913@t))) (g2ec9@syntax-dispatch g3913@t 'any))) g390b@t))) (g2ec9@syntax-dispatch g390b@t '(#(scheme-id immutable) any)))) g3903@t))) (g2ec9@syntax-dispatch g3903@t '(#(scheme-id mutable) any)))) g38f7@t))) (g2ec9@syntax-dispatch g38f7@t '(#(scheme-id immutable) any any)))) g38e7@t))) (g2ec9@syntax-dispatch g38e7@t '(#(scheme-id mutable) any any any)))) g38e5@field)) g38e0@fields))) '#f))) (set! g3882@enumerate (lambda (g38d7@ls) ((letrec ((g38d9@f (lambda (g38db@ls g38dc@i) (if (null? g38db@ls) '() (cons g38dc@i (g38d9@f (cdr g38db@ls) (+ g38dc@i '1))))))) g38d9@f) g38d7@ls '0))) (set! g3884@do-define-record (lambda (g38af@namespec g38b0@clause*) ((lambda (g38b3@foo) ((lambda (g38b5@foo-rtd) ((lambda (g38b7@foo-rcd) ((lambda (g38b9@protocol) ((lambda (g38bb@make-foo) ((lambda (g38bd@fields) ((lambda (g38bf@idx*) ((lambda (g38c1@foo-x*) ((lambda (g38c3@set-foo-x!*) ((lambda (g38c5@set-foo-idx*) ((lambda (g38c7@foo?) ((lambda (g38c9@foo-rtd-code) ((lambda (g38cb@foo-rcd-code) ((lambda (g38cd@protocol-code) ((lambda () (g2e7f@bless (cons 'begin (cons (list 'define g38b5@foo-rtd g38c9@foo-rtd-code) (cons (list 'define g38b9@protocol g38cd@protocol-code) (cons (list 'define g38b7@foo-rcd g38cb@foo-rcd-code) (cons (list 'define-syntax g38b3@foo (list 'list ''$rtd (list 'syntax g38b5@foo-rtd) (list 'syntax g38b7@foo-rcd))) (cons (list 'define g38c7@foo? (list 'record-predicate g38b5@foo-rtd)) (cons (list 'define g38bb@make-foo (list 'record-constructor g38b7@foo-rcd)) (append (map (lambda (g38cf@foo-x g38d0@idx) (list 'define g38cf@foo-x (list 'record-accessor g38b5@foo-rtd g38d0@idx))) g38c1@foo-x* g38bf@idx*) (map (lambda (g38d3@set-foo-x! g38d4@idx) (list 'define g38d3@set-foo-x! (list 'record-mutator g38b5@foo-rtd g38d4@idx))) g38c3@set-foo-x!* g38c5@set-foo-idx*))))))))))))) (g3878@get-protocol-code g38b0@clause*))) (g3876@foo-rcd-code g38b0@clause* g38b5@foo-rtd g38b9@protocol (g3874@parent-rcd-code g38b0@clause*)))) (g3870@foo-rtd-code g38b3@foo g38b0@clause* (g3872@parent-rtd-code g38b0@clause*)))) (g386c@get-record-predicate-name g38af@namespec))) (g387c@get-mutator-indices g38bd@fields))) (g387e@get-mutators g38b3@foo g38bd@fields))) (g3880@get-accessors g38b3@foo g38bd@fields))) (g3882@enumerate g38bd@fields))) (g387a@get-fields g38b0@clause*))) (g386a@get-record-constructor-name g38af@namespec))) (gensym))) (gensym))) (gensym))) (g3868@get-record-name g38af@namespec)))) (set! g3886@verify-clauses (lambda (g388f@x g3890@cls*) ((lambda (g3894@valid-kwds g3896@free-id-member?) (begin (set! g3894@valid-kwds (map g2e7f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! g3896@free-id-member? (lambda (g38ab@x g38ac@ls) (and (pair? g38ac@ls) (or (g2cc6@free-id=? g38ab@x (car g38ac@ls)) (g3896@free-id-member? g38ab@x (cdr g38ac@ls)))))) ((letrec ((g3897@f (lambda (g3899@cls* g389a@seen*) (if (not (null? g3899@cls*)) ((lambda (g389d@t) ((lambda (g389f@ls/false) (if g389f@ls/false (apply (lambda (g38a1@kwd g38a2@rest) (if (or (not (g2cbe@id? g38a1@kwd)) (not (g3896@free-id-member? g38a1@kwd g3894@valid-kwds))) (g2fb2@syntax-violation '#f '"not a valid define-record-type keyword" g38a1@kwd) (if (g2ccc@bound-id-member? g38a1@kwd g389a@seen*) (g2fb2@syntax-violation '#f '"duplicate use of keyword " g388f@x g38a1@kwd) (g3897@f (cdr g3899@cls*) (cons g38a1@kwd g389a@seen*))))) g389f@ls/false) ((lambda (g38a5@t) ((lambda (g38a7@ls/false) (if g38a7@ls/false (apply (lambda (g38a9@cls) (g2fb2@syntax-violation '#f '"malformed define-record-type clause" g38a9@cls)) g38a7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g38a5@t))) (g2ec9@syntax-dispatch g38a5@t 'any))) g389d@t))) (g2ec9@syntax-dispatch g389d@t '(any . any)))) (car g3899@cls*)) (void))))) g3897@f) g3890@cls* '()))) '#f '#f))) ((lambda (g3887@t) ((lambda (g3889@ls/false) (if g3889@ls/false (apply (lambda (g388b@namespec g388c@clause*) (begin (g3886@verify-clauses g3863@x g388c@clause*) (g3884@do-define-record g388b@namespec g388c@clause*))) g3889@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3887@t))) (g2ec9@syntax-dispatch g3887@t '(_ any . each-any)))) g3863@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g2ebf@define-condition-type-macro (lambda (g3a5f@x) ((lambda (g3a62@mkname) (begin (set! g3a62@mkname (lambda (g3a8f@name g3a90@suffix) (g2fb6@datum->syntax g3a8f@name (string->symbol (string-append (symbol->string (g2fb8@syntax->datum g3a8f@name)) g3a90@suffix))))) ((lambda (g3a63@t) ((lambda (g3a65@ls/false) (if (and g3a65@ls/false (apply (lambda (g3a67@ctxt g3a68@name g3a69@super g3a6a@constructor g3a6b@predicate g3a6c@field* g3a6d@accessor*) (and (g2cbe@id? g3a68@name) (g2cbe@id? g3a69@super) (g2cbe@id? g3a6a@constructor) (g2cbe@id? g3a6b@predicate) (for-all g2cbe@id? g3a6c@field*) (for-all g2cbe@id? g3a6d@accessor*))) g3a65@ls/false)) (apply (lambda (g3a75@ctxt g3a76@name g3a77@super g3a78@constructor g3a79@predicate g3a7a@field* g3a7b@accessor*) ((lambda (g3a83@aux-accessor*) (g2e7f@bless (cons 'begin (cons (cons 'define-record-type (cons (list g3a76@name g3a78@constructor (gensym)) (cons (list 'parent g3a77@super) (cons (cons 'fields (map (lambda (g3a85@field g3a86@aux) (list 'immutable g3a85@field g3a86@aux)) g3a7a@field* g3a83@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g3a79@predicate (list 'condition-predicate (list 'record-type-descriptor g3a76@name))) (map (lambda (g3a89@accessor g3a8a@aux) (list 'define g3a89@accessor (list 'condition-accessor (list 'record-type-descriptor g3a76@name) g3a8a@aux))) g3a7b@accessor* g3a83@aux-accessor*)))))) (map (lambda (g3a8d@x) (gensym)) g3a7b@accessor*))) g3a65@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a63@t))) (g2ec9@syntax-dispatch g3a63@t '(any any any any any . #(each (any any)))))) g3a5f@x))) '#f))) (set! g2ec1@incorrect-usage-macro (lambda (g3a93@e) (g2fb2@syntax-violation '#f '"incorrect usage of auxiliary keyword" g3a93@e))) (set! g2ec3@parameterize-macro (lambda (g3a95@e) ((lambda (g3a97@t) ((lambda (g3a99@ls/false) (if g3a99@ls/false (apply (lambda (g3a9b@b g3a9c@b*) (g2e7f@bless (cons 'let (cons '() (cons g3a9b@b g3a9c@b*))))) g3a99@ls/false) ((lambda (g3a9f@t) ((lambda (g3aa1@ls/false) (if g3aa1@ls/false (apply (lambda (g3aa3@olhs* g3aa4@orhs* g3aa5@b g3aa6@b*) ((lambda (g3aab@lhs* g3aac@rhs*) (g2e7f@bless (cons (list 'lambda (append g3aab@lhs* g3aac@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (g3aaf@lhs g3ab0@rhs) (list 'let (list (list 't (list g3aaf@lhs))) (list g3aaf@lhs g3ab0@rhs) (cons 'set! (cons g3ab0@rhs '(t))))) g3aab@lhs* g3aac@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons g3aa5@b g3aa6@b*))) '(swap)))))) (append g3aa3@olhs* g3aa4@orhs*)))) (g2fa0@generate-temporaries g3aa3@olhs*) (g2fa0@generate-temporaries g3aa4@orhs*))) g3aa1@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3a9f@t))) (g2ec9@syntax-dispatch g3a9f@t '(_ #(each (any any)) any . each-any)))) g3a97@t))) (g2ec9@syntax-dispatch g3a97@t '(_ () any . each-any)))) g3a95@e))) (set! g2ec5@foreign-call-transformer (lambda (g3ab3@e g3ab4@r g3ab5@mr) ((lambda (g3ab9@t) ((lambda (g3abb@ls/false) (if g3abb@ls/false (apply (lambda (g3abd@name g3abe@arg*) (cons 'foreign-call (cons (g2eeb@chi-expr g3abd@name g3ab4@r g3ab5@mr) (g2ee7@chi-expr* g3abe@arg* g3ab4@r g3ab5@mr)))) g3abb@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3ab9@t))) (g2ec9@syntax-dispatch g3ab9@t '(_ any . each-any)))) g3ab3@e))) (set! g2ec7@convert-pattern (lambda (g3ac1@pattern g3ac2@keys) ((lambda (g3ac6@cvt* g3ac8@cvt) (begin (set! g3ac6@cvt* (lambda (g3b65@p* g3b66@n g3b67@ids) (if (null? g3b65@p*) (values '() g3b67@ids) (call-with-values (lambda () (g3ac6@cvt* (cdr g3b65@p*) g3b66@n g3b67@ids)) (lambda (g3b6f@g3b6c g3b70@g3b6e) ((lambda (g3b73@ids g3b74@y) (call-with-values (lambda () (g3ac8@cvt (car g3b65@p*) g3b66@n g3b73@ids)) (lambda (g3b7b@g3b78 g3b7c@g3b7a) ((lambda (g3b7f@ids g3b80@x) (values (cons g3b80@x g3b74@y) g3b7f@ids)) g3b7c@g3b7a g3b7b@g3b78)))) g3b70@g3b6e g3b6f@g3b6c)))))) (set! g3ac8@cvt (lambda (g3ac9@p g3aca@n g3acb@ids) ((lambda (g3acf@t) ((lambda (g3ad1@ls/false) (if (and g3ad1@ls/false (apply (lambda (g3ad3@id) (g2cbe@id? g3ad3@id)) g3ad1@ls/false)) (apply (lambda (g3ad5@id) (if (g2ccc@bound-id-member? g3ac9@p g3ac2@keys) (values (vector 'free-id g3ac9@p) g3acb@ids) (if (g2cc6@free-id=? g3ac9@p (g2e53@scheme-stx '_)) (values '_ g3acb@ids) (values 'any (cons (cons g3ac9@p g3aca@n) g3acb@ids))))) g3ad1@ls/false) ((lambda (g3ad7@t) ((lambda (g3ad9@ls/false) (if (and g3ad9@ls/false (apply (lambda (g3adb@p g3adc@dots) (g2ecb@ellipsis? g3adc@dots)) g3ad9@ls/false)) (apply (lambda (g3adf@p g3ae0@dots) (call-with-values (lambda () (g3ac8@cvt g3adf@p (+ g3aca@n '1) g3acb@ids)) (lambda (g3ae7@g3ae4 g3ae8@g3ae6) ((lambda (g3aeb@ids g3aec@p) (values (if (eq? g3aec@p 'any) 'each-any (vector 'each g3aec@p)) g3aeb@ids)) g3ae8@g3ae6 g3ae7@g3ae4)))) g3ad9@ls/false) ((lambda (g3aef@t) ((lambda (g3af1@ls/false) (if (and g3af1@ls/false (apply (lambda (g3af3@x g3af4@dots g3af5@ys g3af6@z) (g2ecb@ellipsis? g3af4@dots)) g3af1@ls/false)) (apply (lambda (g3afb@x g3afc@dots g3afd@ys g3afe@z) (call-with-values (lambda () (g3ac8@cvt g3afe@z g3aca@n g3acb@ids)) (lambda (g3b07@g3b04 g3b08@g3b06) ((lambda (g3b0b@ids g3b0c@z) (call-with-values (lambda () (g3ac6@cvt* g3afd@ys g3aca@n g3b0b@ids)) (lambda (g3b13@g3b10 g3b14@g3b12) ((lambda (g3b17@ids g3b18@ys) (call-with-values (lambda () (g3ac8@cvt g3afb@x (+ g3aca@n '1) g3b17@ids)) (lambda (g3b1f@g3b1c g3b20@g3b1e) ((lambda (g3b23@ids g3b24@x) (values (vector 'each+ g3b24@x (reverse g3b18@ys) g3b0c@z) g3b23@ids)) g3b20@g3b1e g3b1f@g3b1c)))) g3b14@g3b12 g3b13@g3b10)))) g3b08@g3b06 g3b07@g3b04)))) g3af1@ls/false) ((lambda (g3b27@t) ((lambda (g3b29@ls/false) (if g3b29@ls/false (apply (lambda (g3b2b@x g3b2c@y) (call-with-values (lambda () (g3ac8@cvt g3b2c@y g3aca@n g3acb@ids)) (lambda (g3b33@g3b30 g3b34@g3b32) ((lambda (g3b37@ids g3b38@y) (call-with-values (lambda () (g3ac8@cvt g3b2b@x g3aca@n g3b37@ids)) (lambda (g3b3f@g3b3c g3b40@g3b3e) ((lambda (g3b43@ids g3b44@x) (values (cons g3b44@x g3b38@y) g3b43@ids)) g3b40@g3b3e g3b3f@g3b3c)))) g3b34@g3b32 g3b33@g3b30)))) g3b29@ls/false) ((lambda (g3b47@t) ((lambda (g3b49@ls/false) (if g3b49@ls/false (apply (lambda () (values '() g3acb@ids)) g3b49@ls/false) ((lambda (g3b4b@t) ((lambda (g3b4d@ls/false) (if (and g3b4d@ls/false (apply (lambda (g3b4f@p) (not (g2c86@stx? g3b4f@p))) g3b4d@ls/false)) (apply (lambda (g3b51@p) (call-with-values (lambda () (g3ac8@cvt g3b51@p g3aca@n g3acb@ids)) (lambda (g3b57@g3b54 g3b58@g3b56) ((lambda (g3b5b@ids g3b5c@p) (values (vector 'vector g3b5c@p) g3b5b@ids)) g3b58@g3b56 g3b57@g3b54)))) g3b4d@ls/false) ((lambda (g3b5f@t) ((lambda (g3b61@ls/false) (if g3b61@ls/false (apply (lambda (g3b63@datum) (values (vector 'atom (g2cd4@stx->datum g3b63@datum)) g3acb@ids)) g3b61@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3b5f@t))) (g2ec9@syntax-dispatch g3b5f@t 'any))) g3b4b@t))) (g2ec9@syntax-dispatch g3b4b@t '#(vector each-any)))) g3b47@t))) (g2ec9@syntax-dispatch g3b47@t '()))) g3b27@t))) (g2ec9@syntax-dispatch g3b27@t '(any . any)))) g3aef@t))) (g2ec9@syntax-dispatch g3aef@t '(any any . #(each+ any () any))))) g3ad7@t))) (g2ec9@syntax-dispatch g3ad7@t '(any any)))) g3acf@t))) (g2ec9@syntax-dispatch g3acf@t 'any))) g3ac9@p))) (g3ac8@cvt g3ac1@pattern '0 '()))) '#f '#f))) (set! g2ec9@syntax-dispatch ((lambda () ((lambda (g3b84@stx^ g3b86@match-each g3b88@match-each+ g3b8a@match-each-any g3b8c@match-empty g3b8e@combine g3b90@match* g3b92@match) (begin (set! g3b84@stx^ (lambda (g3c5f@e g3c60@m* g3c61@s* g3c62@ae*) (if (and (null? g3c60@m*) (null? g3c61@s*) (null? g3c62@ae*)) g3c5f@e (g2ca6@mkstx g3c5f@e g3c60@m* g3c61@s* g3c62@ae*)))) (set! g3b86@match-each (lambda (g3c3f@e g3c40@p g3c41@m* g3c42@s* g3c43@ae*) (if (pair? g3c3f@e) ((lambda (g3c49@first) (and g3c49@first ((lambda (g3c4b@rest) (and g3c4b@rest (cons g3c49@first g3c4b@rest))) (g3b86@match-each (cdr g3c3f@e) g3c40@p g3c41@m* g3c42@s* g3c43@ae*)))) (g3b92@match (car g3c3f@e) g3c40@p g3c41@m* g3c42@s* g3c43@ae* '())) (if (null? g3c3f@e) '() (if (g2c86@stx? g3c3f@e) (and (not (g2c3c@top-marked? g3c41@m*)) (call-with-values (lambda () (g2ca4@join-wraps g3c41@m* g3c42@s* g3c43@ae* g3c3f@e)) (lambda (g3c53@g3c4e g3c54@g3c50 g3c55@g3c52) ((lambda (g3c59@ae* g3c5a@s* g3c5b@m*) (g3b86@match-each (g2c8a@stx-expr g3c3f@e) g3c40@p g3c5b@m* g3c5a@s* g3c59@ae*)) g3c55@g3c52 g3c54@g3c50 g3c53@g3c4e)))) (if (g285d@g277c@annotation? g3c3f@e) (g3b86@match-each (g285f@g2780@annotation-expression g3c3f@e) g3c40@p g3c41@m* g3c42@s* g3c43@ae*) '#f)))))) (set! g3b88@match-each+ (lambda (g3bff@e g3c00@x-pat g3c01@y-pat g3c02@z-pat g3c03@m* g3c04@s* g3c05@ae* g3c06@r) ((letrec ((g3c0f@f (lambda (g3c11@e g3c12@m* g3c13@s* g3c14@ae*) (if (pair? g3c11@e) (call-with-values (lambda () (g3c0f@f (cdr g3c11@e) g3c12@m* g3c13@s* g3c14@ae*)) (lambda (g3c1f@g3c1a g3c20@g3c1c g3c21@g3c1e) ((lambda (g3c25@r g3c26@y-pat g3c27@xr*) (if g3c25@r (if (null? g3c26@y-pat) ((lambda (g3c2b@xr) (if g3c2b@xr (values (cons g3c2b@xr g3c27@xr*) g3c26@y-pat g3c25@r) (values '#f '#f '#f))) (g3b92@match (car g3c11@e) g3c00@x-pat g3c12@m* g3c13@s* g3c14@ae* '())) (values '() (cdr g3c26@y-pat) (g3b92@match (car g3c11@e) (car g3c26@y-pat) g3c12@m* g3c13@s* g3c14@ae* g3c25@r))) (values '#f '#f '#f))) g3c21@g3c1e g3c20@g3c1c g3c1f@g3c1a))) (if (g2c86@stx? g3c11@e) (if (g2c3c@top-marked? g3c12@m*) (values '() g3c01@y-pat (g3b92@match g3c11@e g3c02@z-pat g3c12@m* g3c13@s* g3c14@ae* g3c06@r)) (call-with-values (lambda () (g2ca4@join-wraps g3c12@m* g3c13@s* g3c14@ae* g3c11@e)) (lambda (g3c33@g3c2e g3c34@g3c30 g3c35@g3c32) ((lambda (g3c39@ae* g3c3a@s* g3c3b@m*) (g3c0f@f (g2c8a@stx-expr g3c11@e) g3c3b@m* g3c3a@s* g3c39@ae*)) g3c35@g3c32 g3c34@g3c30 g3c33@g3c2e)))) (if (g285d@g277c@annotation? g3c11@e) (g3c0f@f (g285f@g2780@annotation-expression g3c11@e) g3c12@m* g3c13@s* g3c14@ae*) (values '() g3c01@y-pat (g3b92@match g3c11@e g3c02@z-pat g3c12@m* g3c13@s* g3c14@ae* g3c06@r)))))))) g3c0f@f) g3bff@e g3c03@m* g3c04@s* g3c05@ae*))) (set! g3b8a@match-each-any (lambda (g3be3@e g3be4@m* g3be5@s* g3be6@ae*) (if (pair? g3be3@e) ((lambda (g3beb@l) (and g3beb@l (cons (g3b84@stx^ (car g3be3@e) g3be4@m* g3be5@s* g3be6@ae*) g3beb@l))) (g3b8a@match-each-any (cdr g3be3@e) g3be4@m* g3be5@s* g3be6@ae*)) (if (null? g3be3@e) '() (if (g2c86@stx? g3be3@e) (and (not (g2c3c@top-marked? g3be4@m*)) (call-with-values (lambda () (g2ca4@join-wraps g3be4@m* g3be5@s* g3be6@ae* g3be3@e)) (lambda (g3bf3@g3bee g3bf4@g3bf0 g3bf5@g3bf2) ((lambda (g3bf9@ae* g3bfa@s* g3bfb@m*) (g3b8a@match-each-any (g2c8a@stx-expr g3be3@e) g3bfb@m* g3bfa@s* g3bf9@ae*)) g3bf5@g3bf2 g3bf4@g3bf0 g3bf3@g3bee)))) (if (g285d@g277c@annotation? g3be3@e) (g3b8a@match-each-any (g285f@g2780@annotation-expression g3be3@e) g3be4@m* g3be5@s* g3be6@ae*) '#f)))))) (set! g3b8c@match-empty (lambda (g3bdd@p g3bde@r) (if (null? g3bdd@p) g3bde@r (if (eq? g3bdd@p '_) g3bde@r (if (eq? g3bdd@p 'any) (cons '() g3bde@r) (if (pair? g3bdd@p) (g3b8c@match-empty (car g3bdd@p) (g3b8c@match-empty (cdr g3bdd@p) g3bde@r)) (if (eq? g3bdd@p 'each-any) (cons '() g3bde@r) ((lambda (g3be1@t) (if (memv g3be1@t '(each)) (g3b8c@match-empty (vector-ref g3bdd@p '1) g3bde@r) (if (memv g3be1@t '(each+)) (g3b8c@match-empty (vector-ref g3bdd@p '1) (g3b8c@match-empty (reverse (vector-ref g3bdd@p '2)) (g3b8c@match-empty (vector-ref g3bdd@p '3) g3bde@r))) (if (memv g3be1@t '(free-id atom)) g3bde@r (if (memv g3be1@t '(scheme-id atom)) g3bde@r (if (memv g3be1@t '(vector)) (g3b8c@match-empty (vector-ref g3bdd@p '1) g3bde@r) (assertion-violation 'syntax-dispatch '"invalid pattern" g3bdd@p))))))) (vector-ref g3bdd@p '0))))))))) (set! g3b8e@combine (lambda (g3bd9@r* g3bda@r) (if (null? (car g3bd9@r*)) g3bda@r (cons (map car g3bd9@r*) (g3b8e@combine (map cdr g3bd9@r*) g3bda@r))))) (set! g3b90@match* (lambda (g3bb5@e g3bb6@p g3bb7@m* g3bb8@s* g3bb9@ae* g3bba@r) (if (null? g3bb6@p) (and (null? g3bb5@e) g3bba@r) (if (pair? g3bb6@p) (and (pair? g3bb5@e) (g3b92@match (car g3bb5@e) (car g3bb6@p) g3bb7@m* g3bb8@s* g3bb9@ae* (g3b92@match (cdr g3bb5@e) (cdr g3bb6@p) g3bb7@m* g3bb8@s* g3bb9@ae* g3bba@r))) (if (eq? g3bb6@p 'each-any) ((lambda (g3bc1@l) (and g3bc1@l (cons g3bc1@l g3bba@r))) (g3b8a@match-each-any g3bb5@e g3bb7@m* g3bb8@s* g3bb9@ae*)) ((lambda (g3bc3@t) (if (memv g3bc3@t '(each)) (if (null? g3bb5@e) (g3b8c@match-empty (vector-ref g3bb6@p '1) g3bba@r) ((lambda (g3bc5@r*) (and g3bc5@r* (g3b8e@combine g3bc5@r* g3bba@r))) (g3b86@match-each g3bb5@e (vector-ref g3bb6@p '1) g3bb7@m* g3bb8@s* g3bb9@ae*))) (if (memv g3bc3@t '(free-id)) (and (symbol? g3bb5@e) (g2c3c@top-marked? g3bb7@m*) (g2cc6@free-id=? (g3b84@stx^ g3bb5@e g3bb7@m* g3bb8@s* g3bb9@ae*) (vector-ref g3bb6@p '1)) g3bba@r) (if (memv g3bc3@t '(scheme-id)) (and (symbol? g3bb5@e) (g2c3c@top-marked? g3bb7@m*) (g2cc6@free-id=? (g3b84@stx^ g3bb5@e g3bb7@m* g3bb8@s* g3bb9@ae*) (g2e53@scheme-stx (vector-ref g3bb6@p '1))) g3bba@r) (if (memv g3bc3@t '(each+)) (call-with-values (lambda () (g3b88@match-each+ g3bb5@e (vector-ref g3bb6@p '1) (vector-ref g3bb6@p '2) (vector-ref g3bb6@p '3) g3bb7@m* g3bb8@s* g3bb9@ae* g3bba@r)) (lambda (g3bcd@g3bc8 g3bce@g3bca g3bcf@g3bcc) ((lambda (g3bd3@r g3bd4@y-pat g3bd5@xr*) (and g3bd3@r (null? g3bd4@y-pat) (if (null? g3bd5@xr*) (g3b8c@match-empty (vector-ref g3bb6@p '1) g3bd3@r) (g3b8e@combine g3bd5@xr* g3bd3@r)))) g3bcf@g3bcc g3bce@g3bca g3bcd@g3bc8))) (if (memv g3bc3@t '(atom)) (and (fast-equal? (vector-ref g3bb6@p '1) (g2cd2@strip g3bb5@e g3bb7@m*)) g3bba@r) (if (memv g3bc3@t '(vector)) (and (vector? g3bb5@e) (g3b92@match (vector->list g3bb5@e) (vector-ref g3bb6@p '1) g3bb7@m* g3bb8@s* g3bb9@ae* g3bba@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" g3bb6@p)))))))) (vector-ref g3bb6@p '0))))))) (set! g3b92@match (lambda (g3b97@e g3b98@p g3b99@m* g3b9a@s* g3b9b@ae* g3b9c@r) (if (not g3b9c@r) '#f (if (eq? g3b98@p '_) g3b9c@r (if (eq? g3b98@p 'any) (cons (g3b84@stx^ g3b97@e g3b99@m* g3b9a@s* g3b9b@ae*) g3b9c@r) (if (g2c86@stx? g3b97@e) (and (not (g2c3c@top-marked? g3b99@m*)) (call-with-values (lambda () (g2ca4@join-wraps g3b99@m* g3b9a@s* g3b9b@ae* g3b97@e)) (lambda (g3ba9@g3ba4 g3baa@g3ba6 g3bab@g3ba8) ((lambda (g3baf@ae* g3bb0@s* g3bb1@m*) (g3b92@match (g2c8a@stx-expr g3b97@e) g3b98@p g3bb1@m* g3bb0@s* g3baf@ae* g3b9c@r)) g3bab@g3ba8 g3baa@g3ba6 g3ba9@g3ba4)))) (if (g285d@g277c@annotation? g3b97@e) (g3b92@match (g285f@g2780@annotation-expression g3b97@e) g3b98@p g3b99@m* g3b9a@s* g3b9b@ae* g3b9c@r) (g3b90@match* g3b97@e g3b98@p g3b99@m* g3b9a@s* g3b9b@ae* g3b9c@r)))))))) (lambda (g3b93@e g3b94@p) (g3b92@match g3b93@e g3b94@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2ecb@ellipsis? (lambda (g3c67@x) (and (g2cbe@id? g3c67@x) (g2cc6@free-id=? g3c67@x (g2e53@scheme-stx '...))))) (set! g2ecd@underscore? (lambda (g3c69@x) (and (g2cbe@id? g3c69@x) (g2cc6@free-id=? g3c69@x (g2e53@scheme-stx '_))))) (set! g2ecf@verify-literals (lambda (g3c6b@lits g3c6c@expr) (for-each (lambda (g3c6f@x) (if (or (not (g2cbe@id? g3c6f@x)) (g2ecb@ellipsis? g3c6f@x) (g2ecd@underscore? g3c6f@x)) (g2fb2@syntax-violation '#f '"invalid literal" g3c6c@expr g3c6f@x) (void))) g3c6b@lits))) (set! g2ed1@syntax-case-transformer ((lambda () ((lambda (g3c72@build-dispatch-call g3c74@invalid-ids-error g3c76@gen-clause g3c78@gen-syntax-case) (begin (set! g3c72@build-dispatch-call (lambda (g3ce3@pvars g3ce4@expr g3ce5@y g3ce6@r g3ce7@mr) ((lambda (g3ced@ids g3cee@levels) ((lambda (g3cf1@labels g3cf2@new-vars) ((lambda (g3cf5@body) (list '(primitive apply) (g2c1a@g2b5a@build-lambda '#f g3cf2@new-vars g3cf5@body) g3ce5@y)) (g2eeb@chi-expr (g2caa@add-subst (g2c79@make-full-rib g3ced@ids g3cf1@labels) g3ce4@expr) (append (map (lambda (g3cf7@label g3cf8@var g3cf9@level) (cons g3cf7@label (g2cde@make-binding 'syntax (cons g3cf8@var g3cf9@level)))) g3cf1@labels g3cf2@new-vars (map cdr g3ce3@pvars)) g3ce6@r) g3ce7@mr))) (map g2c42@gen-label g3ced@ids) (map g2c3e@gen-lexical g3ced@ids))) (map car g3ce3@pvars) (map cdr g3ce3@pvars)))) (set! g3c74@invalid-ids-error (lambda (g3cd7@id* g3cd8@e g3cd9@class) ((letrec ((g3cdd@find (lambda (g3cdf@id* g3ce0@ok*) (if (null? g3cdf@id*) (g2fb2@syntax-violation '#f '"invalid syntax" g3cd8@e) (if (g2cbe@id? (car g3cdf@id*)) (if (g2ccc@bound-id-member? (car g3cdf@id*) g3ce0@ok*) (g2fae@syntax-error (car g3cdf@id*) '"duplicate " g3cd9@class) (g3cdd@find (cdr g3cdf@id*) (cons (car g3cdf@id*) g3ce0@ok*))) (g2fae@syntax-error (car g3cdf@id*) '"invalid " g3cd9@class)))))) g3cdd@find) g3cd7@id* '()))) (set! g3c76@gen-clause (lambda (g3caf@x g3cb0@keys g3cb1@clauses g3cb2@r g3cb3@mr g3cb4@pat g3cb5@fender g3cb6@expr) (call-with-values (lambda () (g2ec7@convert-pattern g3cb4@pat g3cb0@keys)) (lambda (g3cc3@g3cc0 g3cc4@g3cc2) ((lambda (g3cc7@pvars g3cc8@p) (if (not (g2cca@distinct-bound-ids? (map car g3cc7@pvars))) (g3c74@invalid-ids-error (map car g3cc7@pvars) g3cb4@pat '"pattern variable") (if (not (for-all (lambda (g3ccb@x) (not (g2ecb@ellipsis? (car g3ccb@x)))) g3cc7@pvars)) (g2fb2@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" g3cb4@pat) ((lambda (g3ccd@y) ((lambda (g3ccf@test) ((lambda (g3cd1@conseq) ((lambda (g3cd3@altern) (list (g2c1a@g2b5a@build-lambda '#f (list g3ccd@y) (list 'if g3ccf@test g3cd1@conseq g3cd3@altern)) (list '(primitive syntax-dispatch) g3caf@x (list 'quote g3cc8@p)))) (g3c78@gen-syntax-case g3caf@x g3cb0@keys g3cb1@clauses g3cb2@r g3cb3@mr))) (g3c72@build-dispatch-call g3cc7@pvars g3cb6@expr g3ccd@y g3cb2@r g3cb3@mr))) (if (eq? g3cb5@fender '#t) g3ccd@y ((lambda (g3cd5@call) (list 'if g3ccd@y g3cd5@call (list 'quote '#f))) (g3c72@build-dispatch-call g3cc7@pvars g3cb5@fender g3ccd@y g3cb2@r g3cb3@mr))))) (g2c3e@gen-lexical 'tmp))))) g3cc4@g3cc2 g3cc3@g3cc0))))) (set! g3c78@gen-syntax-case (lambda (g3c8d@x g3c8e@keys g3c8f@clauses g3c90@r g3c91@mr) (if (null? g3c8f@clauses) (list '(primitive syntax-error) g3c8d@x) ((lambda (g3c97@t) ((lambda (g3c99@ls/false) (if g3c99@ls/false (apply (lambda (g3c9b@pat g3c9c@expr) (if (and (g2cbe@id? g3c9b@pat) (not (g2ccc@bound-id-member? g3c9b@pat g3c8e@keys)) (not (g2ecb@ellipsis? g3c9b@pat))) (if (g2cc6@free-id=? g3c9b@pat (g2e53@scheme-stx '_)) (g2eeb@chi-expr g3c9c@expr g3c90@r g3c91@mr) ((lambda (g3c9f@lab g3ca0@lex) ((lambda (g3ca3@body) (list (g2c1a@g2b5a@build-lambda '#f (list g3ca0@lex) g3ca3@body) g3c8d@x)) (g2eeb@chi-expr (g2caa@add-subst (g2c79@make-full-rib (list g3c9b@pat) (list g3c9f@lab)) g3c9c@expr) (cons (cons g3c9f@lab (g2cde@make-binding 'syntax (cons g3ca0@lex '0))) g3c90@r) g3c91@mr))) (g2c42@gen-label g3c9b@pat) (g2c3e@gen-lexical g3c9b@pat))) (g3c76@gen-clause g3c8d@x g3c8e@keys (cdr g3c8f@clauses) g3c90@r g3c91@mr g3c9b@pat '#t g3c9c@expr))) g3c99@ls/false) ((lambda (g3ca5@t) ((lambda (g3ca7@ls/false) (if g3ca7@ls/false (apply (lambda (g3ca9@pat g3caa@fender g3cab@expr) (g3c76@gen-clause g3c8d@x g3c8e@keys (cdr g3c8f@clauses) g3c90@r g3c91@mr g3ca9@pat g3caa@fender g3cab@expr)) g3ca7@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3ca5@t))) (g2ec9@syntax-dispatch g3ca5@t '(any any any)))) g3c97@t))) (g2ec9@syntax-dispatch g3c97@t '(any any)))) (car g3c8f@clauses))))) (lambda (g3c79@e g3c7a@r g3c7b@mr) ((lambda (g3c7f@t) ((lambda (g3c81@ls/false) (if g3c81@ls/false (apply (lambda (g3c83@expr g3c84@keys g3c85@clauses) (begin (g2ecf@verify-literals g3c84@keys g3c79@e) ((lambda (g3c89@x) ((lambda (g3c8b@body) (list (g2c1a@g2b5a@build-lambda '#f (list g3c89@x) g3c8b@body) (g2eeb@chi-expr g3c83@expr g3c7a@r g3c7b@mr))) (g3c78@gen-syntax-case g3c89@x g3c84@keys g3c85@clauses g3c7a@r g3c7b@mr))) (g2c3e@gen-lexical 'tmp)))) g3c81@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3c7f@t))) (g2ec9@syntax-dispatch g3c7f@t '(_ any each-any . each-any)))) g3c79@e)))) '#f '#f '#f '#f)))) (set! g2ed3@ellipsis-map (lambda (g3cfd@proc g3cfe@ls . g3d01@ls*) ((lambda (g3d04@who) (begin (set! g3d04@who '...) (begin (if (not (list? g3cfe@ls)) (assertion-violation g3d04@who '"not a list" g3cfe@ls) (void)) (if (not (null? g3d01@ls*)) ((lambda (g3d05@n) (for-each (lambda (g3d07@x) (begin (if (not (list? g3d07@x)) (assertion-violation g3d04@who '"not a list" g3d07@x) (void)) (if (not (= (length g3d07@x) g3d05@n)) (assertion-violation g3d04@who '"length mismatch" g3cfe@ls g3d07@x) (void)))) g3d01@ls*)) (length g3cfe@ls)) (void)) (apply map g3cfd@proc g3cfe@ls g3d01@ls*)))) '#f))) (set! g2ed5@syntax-transformer ((lambda () ((lambda (g3d0a@gen-syntax g3d0c@gen-ref g3d0e@gen-append g3d10@gen-mappend g3d12@gen-map g3d14@gen-cons g3d16@gen-vector g3d18@regen) (begin (set! g3d0a@gen-syntax (lambda (g3d81@src g3d82@e g3d83@r g3d84@maps g3d85@ellipsis? g3d86@vec?) ((lambda (g3d8d@t) ((lambda (g3d8f@ls/false) (if (and g3d8f@ls/false (apply (lambda (g3d91@dots) (g3d85@ellipsis? g3d91@dots)) g3d8f@ls/false)) (apply (lambda (g3d93@dots) (g2fb2@syntax-violation '#f '"misplaced ellipsis in syntax form" g3d81@src)) g3d8f@ls/false) ((lambda (g3d95@t) ((lambda (g3d97@ls/false) (if (and g3d97@ls/false (apply (lambda (g3d99@id) (g2cbe@id? g3d99@id)) g3d97@ls/false)) (apply (lambda (g3d9b@id) ((lambda (g3d9d@label) ((lambda (g3d9f@b) ((lambda () (if (eq? (g2ce0@binding-type g3d9f@b) 'syntax) (call-with-values (lambda () ((lambda (g3da5@var.lev) (g3d0c@gen-ref g3d81@src (car g3da5@var.lev) (cdr g3da5@var.lev) g3d84@maps)) (g2ce2@binding-value g3d9f@b))) (lambda (g3da7@g3da2 g3da8@g3da4) ((lambda (g3dab@maps g3dac@var) (values (list 'ref g3dac@var) g3dab@maps)) g3da8@g3da4 g3da7@g3da2))) (values (list 'quote g3d82@e) g3d84@maps))))) (g2cdc@label->binding g3d9d@label g3d83@r))) (g2cd8@id->label g3d82@e))) g3d97@ls/false) ((lambda (g3daf@t) ((lambda (g3db1@ls/false) (if (and g3db1@ls/false (apply (lambda (g3db3@dots g3db4@e) (g3d85@ellipsis? g3db3@dots)) g3db1@ls/false)) (apply (lambda (g3db7@dots g3db8@e) (if g3d86@vec? (g2fb2@syntax-violation '#f '"misplaced ellipsis in syntax form" g3d81@src) (g3d0a@gen-syntax g3d81@src g3db8@e g3d83@r g3d84@maps (lambda (g3dbb@x) '#f) '#f))) g3db1@ls/false) ((lambda (g3dbd@t) ((lambda (g3dbf@ls/false) (if (and g3dbf@ls/false (apply (lambda (g3dc1@x g3dc2@dots g3dc3@y) (g3d85@ellipsis? g3dc2@dots)) g3dbf@ls/false)) (apply (lambda (g3dc7@x g3dc8@dots g3dc9@y) ((letrec ((g3dcd@f (lambda (g3dcf@y g3dd0@k) ((lambda (g3dd3@t) ((lambda (g3dd5@ls/false) (if g3dd5@ls/false (apply (lambda () (g3dd0@k g3d84@maps)) g3dd5@ls/false) ((lambda (g3dd7@t) ((lambda (g3dd9@ls/false) (if (and g3dd9@ls/false (apply (lambda (g3ddb@dots g3ddc@y) (g3d85@ellipsis? g3ddb@dots)) g3dd9@ls/false)) (apply (lambda (g3ddf@dots g3de0@y) (g3dcd@f g3de0@y (lambda (g3de3@maps) (call-with-values (lambda () (g3dd0@k (cons '() g3de3@maps))) (lambda (g3de9@g3de6 g3dea@g3de8) ((lambda (g3ded@maps g3dee@x) (if (null? (car g3ded@maps)) (g2fb2@syntax-violation '#f '"extra ellipsis in syntax form" g3d81@src) (values (g3d10@gen-mappend g3dee@x (car g3ded@maps)) (cdr g3ded@maps)))) g3dea@g3de8 g3de9@g3de6)))))) g3dd9@ls/false) ((lambda (g3df1@t) ((lambda (g3df3@ls/false) (if g3df3@ls/false (apply (lambda () (call-with-values (lambda () (g3d0a@gen-syntax g3d81@src g3dcf@y g3d83@r g3d84@maps g3d85@ellipsis? g3d86@vec?)) (lambda (g3df9@g3df6 g3dfa@g3df8) ((lambda (g3dfd@maps g3dfe@y) (call-with-values (lambda () (g3dd0@k g3dfd@maps)) (lambda (g3e05@g3e02 g3e06@g3e04) ((lambda (g3e09@maps g3e0a@x) (values (g3d0e@gen-append g3e0a@x g3dfe@y) g3e09@maps)) g3e06@g3e04 g3e05@g3e02)))) g3dfa@g3df8 g3df9@g3df6)))) g3df3@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3df1@t))) (g2ec9@syntax-dispatch g3df1@t '_))) g3dd7@t))) (g2ec9@syntax-dispatch g3dd7@t '(any . any)))) g3dd3@t))) (g2ec9@syntax-dispatch g3dd3@t '()))) g3dcf@y)))) g3dcd@f) g3dc9@y (lambda (g3e0d@maps) (call-with-values (lambda () (g3d0a@gen-syntax g3d81@src g3dc7@x g3d83@r (cons '() g3e0d@maps) g3d85@ellipsis? '#f)) (lambda (g3e13@g3e10 g3e14@g3e12) ((lambda (g3e17@maps g3e18@x) (if (null? (car g3e17@maps)) (g2fb2@syntax-violation '#f '"extra ellipsis in syntax form" g3d81@src) (values (g3d12@gen-map g3e18@x (car g3e17@maps)) (cdr g3e17@maps)))) g3e14@g3e12 g3e13@g3e10)))))) g3dbf@ls/false) ((lambda (g3e1b@t) ((lambda (g3e1d@ls/false) (if g3e1d@ls/false (apply (lambda (g3e1f@x g3e20@y) (call-with-values (lambda () (g3d0a@gen-syntax g3d81@src g3e1f@x g3d83@r g3d84@maps g3d85@ellipsis? '#f)) (lambda (g3e27@g3e24 g3e28@g3e26) ((lambda (g3e2b@maps g3e2c@xnew) (call-with-values (lambda () (g3d0a@gen-syntax g3d81@src g3e20@y g3d83@r g3e2b@maps g3d85@ellipsis? g3d86@vec?)) (lambda (g3e33@g3e30 g3e34@g3e32) ((lambda (g3e37@maps g3e38@ynew) (values (g3d14@gen-cons g3d82@e g3e1f@x g3e20@y g3e2c@xnew g3e38@ynew) g3e37@maps)) g3e34@g3e32 g3e33@g3e30)))) g3e28@g3e26 g3e27@g3e24)))) g3e1d@ls/false) ((lambda (g3e3b@t) ((lambda (g3e3d@ls/false) (if g3e3d@ls/false (apply (lambda (g3e3f@ls) (call-with-values (lambda () (g3d0a@gen-syntax g3d81@src g3e3f@ls g3d83@r g3d84@maps g3d85@ellipsis? '#t)) (lambda (g3e45@g3e42 g3e46@g3e44) ((lambda (g3e49@maps g3e4a@lsnew) (values (g3d16@gen-vector g3d82@e g3e3f@ls g3e4a@lsnew) g3e49@maps)) g3e46@g3e44 g3e45@g3e42)))) g3e3d@ls/false) ((lambda (g3e4d@t) ((lambda (g3e4f@ls/false) (if g3e4f@ls/false (apply (lambda () (values (list 'quote g3d82@e) g3d84@maps)) g3e4f@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3e4d@t))) (g2ec9@syntax-dispatch g3e4d@t '_))) g3e3b@t))) (g2ec9@syntax-dispatch g3e3b@t '#(vector each-any)))) g3e1b@t))) (g2ec9@syntax-dispatch g3e1b@t '(any . any)))) g3dbd@t))) (g2ec9@syntax-dispatch g3dbd@t '(any any . any)))) g3daf@t))) (g2ec9@syntax-dispatch g3daf@t '(any any)))) g3d95@t))) (g2ec9@syntax-dispatch g3d95@t 'any))) g3d8d@t))) (g2ec9@syntax-dispatch g3d8d@t 'any))) g3d82@e))) (set! g3d0c@gen-ref (lambda (g3d67@src g3d68@var g3d69@level g3d6a@maps) (if (= g3d69@level '0) (values g3d68@var g3d6a@maps) (if (null? g3d6a@maps) (g2fb2@syntax-violation '#f '"missing ellipsis in syntax form" g3d67@src) (call-with-values (lambda () (g3d0c@gen-ref g3d67@src g3d68@var (- g3d69@level '1) (cdr g3d6a@maps))) (lambda (g3d73@g3d70 g3d74@g3d72) ((lambda (g3d77@outer-maps g3d78@outer-var) ((lambda (g3d7b@t) (if g3d7b@t ((lambda (g3d7d@b) (values (cdr g3d7d@b) g3d6a@maps)) g3d7b@t) ((lambda (g3d7f@inner-var) (values g3d7f@inner-var (cons (cons (cons g3d78@outer-var g3d7f@inner-var) (car g3d6a@maps)) g3d77@outer-maps))) (g2c3e@gen-lexical 'tmp)))) (assq g3d78@outer-var (car g3d6a@maps)))) g3d74@g3d72 g3d73@g3d70))))))) (set! g3d0e@gen-append (lambda (g3d63@x g3d64@y) (if (fast-equal? g3d64@y ''()) g3d63@x (list 'append g3d63@x g3d64@y)))) (set! g3d10@gen-mappend (lambda (g3d5f@e g3d60@map-env) (list 'apply '(primitive append) (g3d12@gen-map g3d5f@e g3d60@map-env)))) (set! g3d12@gen-map (lambda (g3d4d@e g3d4e@map-env) ((lambda (g3d51@formals g3d52@actuals) (if (eq? (car g3d4d@e) 'ref) (car g3d52@actuals) (if (for-all (lambda (g3d55@x) (and (eq? (car g3d55@x) 'ref) (memq (cadr g3d55@x) g3d51@formals))) (cdr g3d4d@e)) ((lambda (g3d57@args) (cons 'map (cons (list 'primitive (car g3d4d@e)) g3d57@args))) (map ((lambda (g3d59@r) (lambda (g3d5b@x) (cdr (assq (cadr g3d5b@x) g3d59@r)))) (map cons g3d51@formals g3d52@actuals)) (cdr g3d4d@e))) (cons* 'map (list 'lambda g3d51@formals g3d4d@e) g3d52@actuals)))) (map cdr g3d4e@map-env) (map (lambda (g3d5d@x) (list 'ref (car g3d5d@x))) g3d4e@map-env)))) (set! g3d14@gen-cons (lambda (g3d3d@e g3d3e@x g3d3f@y g3d40@xnew g3d41@ynew) ((lambda (g3d47@t) (if (memv g3d47@t '(quote)) (if (eq? (car g3d40@xnew) 'quote) ((lambda (g3d49@xnew g3d4a@ynew) (if (and (eq? g3d49@xnew g3d3e@x) (eq? g3d4a@ynew g3d3f@y)) (list 'quote g3d3d@e) (list 'quote (cons g3d49@xnew g3d4a@ynew)))) (cadr g3d40@xnew) (cadr g3d41@ynew)) (if (null? (cadr g3d41@ynew)) (list 'list g3d40@xnew) (list 'cons g3d40@xnew g3d41@ynew))) (if (memv g3d47@t '(list)) (cons 'list (cons g3d40@xnew (cdr g3d41@ynew))) (list 'cons g3d40@xnew g3d41@ynew)))) (car g3d41@ynew)))) (set! g3d16@gen-vector (lambda (g3d37@e g3d38@ls g3d39@lsnew) (if (eq? (car g3d39@lsnew) 'quote) (if (eq? (cadr g3d39@lsnew) g3d38@ls) (list 'quote g3d37@e) (list 'quote (list->vector (cadr g3d39@lsnew)))) (if (eq? (car g3d39@lsnew) 'list) (cons 'vector (cdr g3d39@lsnew)) (list 'list->vector g3d39@lsnew))))) (set! g3d18@regen (lambda (g3d31@x) ((lambda (g3d33@t) (if (memv g3d33@t '(ref)) (cadr g3d31@x) (if (memv g3d33@t '(primitive)) (list 'primitive (cadr g3d31@x)) (if (memv g3d33@t '(quote)) (list 'quote (cadr g3d31@x)) (if (memv g3d33@t '(lambda)) (g2c1a@g2b5a@build-lambda '#f (cadr g3d31@x) (g3d18@regen (caddr g3d31@x))) (if (memv g3d33@t '(map)) ((lambda (g3d35@ls) (cons '(primitive ellipsis-map) g3d35@ls)) (map g3d18@regen (cdr g3d31@x))) (cons (list 'primitive (car g3d31@x)) (map g3d18@regen (cdr g3d31@x))))))))) (car g3d31@x)))) (lambda (g3d19@e g3d1a@r g3d1b@mr) ((lambda (g3d1f@t) ((lambda (g3d21@ls/false) (if g3d21@ls/false (apply (lambda (g3d23@x) (call-with-values (lambda () (g3d0a@gen-syntax g3d19@e g3d23@x g3d1a@r '() g2ecb@ellipsis? '#f)) (lambda (g3d29@g3d26 g3d2a@g3d28) ((lambda (g3d2d@maps g3d2e@e) (g3d18@regen g3d2e@e)) g3d2a@g3d28 g3d29@g3d26)))) g3d21@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3d1f@t))) (g2ec9@syntax-dispatch g3d1f@t '(_ any)))) g3d19@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2ed7@core-macro-transformer (lambda (g3e51@name) ((lambda (g3e53@t) (if (memv g3e53@t '(quote)) g2e79@quote-transformer (if (memv g3e53@t '(lambda)) g2e7d@lambda-transformer (if (memv g3e53@t '(case-lambda)) g2e7b@case-lambda-transformer (if (memv g3e53@t '(letrec)) g2e61@letrec-transformer (if (memv g3e53@t '(letrec*)) g2e63@letrec*-transformer (if (memv g3e53@t '(if)) g2e71@if-transformer (if (memv g3e53@t '(and)) g2e73@and-transformer (if (memv g3e53@t '(or)) g2e75@or-transformer (if (memv g3e53@t '(foreign-call)) g2ec5@foreign-call-transformer (if (memv g3e53@t '(syntax-case)) g2ed1@syntax-case-transformer (if (memv g3e53@t '(syntax)) g2ed5@syntax-transformer (if (memv g3e53@t '(type-descriptor)) g2e67@type-descriptor-transformer (if (memv g3e53@t '(record-type-descriptor)) g2e69@record-type-descriptor-transformer (if (memv g3e53@t '(record-constructor-descriptor)) g2e6b@record-constructor-descriptor-transformer (if (memv g3e53@t '(fluid-let-syntax)) g2e65@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g3e51@name))))))))))))))))) g3e51@name))) (set! g2ed9@symbol-macro (lambda (g3e55@x g3e56@set) ((lambda (g3e59@t) ((lambda (g3e5b@ls/false) (if (and g3e5b@ls/false (apply (lambda (g3e5d@name) (and (g2cbe@id? g3e5d@name) (memq (g2cc0@id->sym g3e5d@name) g3e56@set))) g3e5b@ls/false)) (apply (lambda (g3e5f@name) (g2e7f@bless (list 'quote g3e5f@name))) g3e5b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3e59@t))) (g2ec9@syntax-dispatch g3e59@t '(_ any)))) g3e55@x))) (set! g2edb@macro-transformer (lambda (g3e61@x) (if (procedure? g3e61@x) g3e61@x (if (symbol? g3e61@x) ((lambda (g3e63@t) (if (memv g3e63@t '(define-record-type)) g2ebd@define-record-type-macro (if (memv g3e63@t '(define-struct)) g2ebb@define-struct-macro (if (memv g3e63@t '(include)) g2eb1@include-macro (if (memv g3e63@t '(cond)) g2ead@cond-macro (if (memv g3e63@t '(let)) g2e85@let-macro (if (memv g3e63@t '(do)) g2ea5@do-macro (if (memv g3e63@t '(or)) g2ea9@or-macro (if (memv g3e63@t '(and)) g2eab@and-macro (if (memv g3e63@t '(let*)) g2ea7@let*-macro (if (memv g3e63@t '(let-values)) g2e87@let-values-macro (if (memv g3e63@t '(let*-values)) g2e89@let*-values-macro (if (memv g3e63@t '(syntax-rules)) g2eb5@syntax-rules-macro (if (memv g3e63@t '(quasiquote)) g2eb7@quasiquote-macro (if (memv g3e63@t '(quasisyntax)) g2eb9@quasisyntax-macro (if (memv g3e63@t '(with-syntax)) g2e81@with-syntax-macro (if (memv g3e63@t '(when)) g2e6d@when-macro (if (memv g3e63@t '(unless)) g2e6f@unless-macro (if (memv g3e63@t '(case)) g2e77@case-macro (if (memv g3e63@t '(identifier-syntax)) g2ea3@identifier-syntax-macro (if (memv g3e63@t '(time)) g2e9b@time-macro (if (memv g3e63@t '(delay)) g2e9d@delay-macro (if (memv g3e63@t '(assert)) g2e9f@assert-macro (if (memv g3e63@t '(endianness)) g2ea1@endianness-macro (if (memv g3e63@t '(guard)) g2e97@guard-macro (if (memv g3e63@t '(define-enumeration)) g2e99@define-enumeration-macro (if (memv g3e63@t '(trace-lambda)) g2e8b@trace-lambda-macro (if (memv g3e63@t '(trace-define)) g2e8d@trace-define-macro (if (memv g3e63@t '(trace-define-syntax)) g2e8f@trace-define-syntax-macro (if (memv g3e63@t '(trace-let-syntax)) g2e93@trace-let-syntax-macro (if (memv g3e63@t '(trace-letrec-syntax)) g2e95@trace-letrec-syntax-macro (if (memv g3e63@t '(define-condition-type)) g2ebf@define-condition-type-macro (if (memv g3e63@t '(parameterize)) g2ec3@parameterize-macro (if (memv g3e63@t '(include-into)) g2eb3@include-into-macro (if (memv g3e63@t '(eol-style)) (lambda (g3e65@x) (g2ed9@symbol-macro g3e65@x '(none lf cr crlf nel crnel ls))) (if (memv g3e63@t '(error-handling-mode)) (lambda (g3e67@x) (g2ed9@symbol-macro g3e67@x '(ignore raise replace))) (if (memv g3e63@t '(buffer-mode)) (lambda (g3e69@x) (g2ed9@symbol-macro g3e69@x '(none line block))) (if (memv g3e63@t '(file-options)) g2c31@file-options-macro (if (memv g3e63@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g2ec1@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" g3e61@x)))))))))))))))))))))))))))))))))))))))) g3e61@x) (error 'core-macro-transformer '"BUG: invalid macro" g3e61@x))))) (set! g2edd@local-macro-transformer (lambda (g3e6b@x) (car g3e6b@x))) (set! g2edf@do-macro-call (lambda (g3e6d@transformer g3e6e@expr) ((lambda (g3e71@out) (begin ((letrec ((g3e73@f (lambda (g3e75@x) (if (not (g2c86@stx? g3e75@x)) (if (pair? g3e75@x) (begin (g3e73@f (car g3e75@x)) (g3e73@f (cdr g3e75@x))) (if (vector? g3e75@x) (vector-for-each g3e73@f g3e75@x) (if (symbol? g3e75@x) (g2fb2@syntax-violation '#f '"raw symbol encountered in output of macro" g3e6e@expr g3e75@x) (void)))) (void))))) g3e73@f) g3e71@out) (g2ca8@add-mark (g2c9e@gen-mark) g3e71@out g3e6e@expr))) (g3e6d@transformer (g2ca8@add-mark g2ca0@anti-mark g3e6e@expr '#f))))) (set! g2ee1@chi-macro (lambda (g3e77@p g3e78@e) (g2edf@do-macro-call (g2edb@macro-transformer g3e77@p) g3e78@e))) (set! g2ee3@chi-local-macro (lambda (g3e7b@p g3e7c@e) (g2edf@do-macro-call (g2edd@local-macro-transformer g3e7b@p) g3e7c@e))) (set! g2ee5@chi-global-macro (lambda (g3e7f@p g3e80@e) ((lambda (g3e83@lib g3e84@loc) (begin (g2ae3@g2985@visit-library g3e83@lib) ((lambda (g3e87@x) ((lambda (g3e89@transformer) (g2edf@do-macro-call g3e89@transformer g3e80@e)) (if (procedure? g3e87@x) g3e87@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" g3e87@x)))) (symbol-value g3e84@loc)))) (car g3e7f@p) (cdr g3e7f@p)))) (set! g2ee7@chi-expr* (lambda (g3e8b@e* g3e8c@r g3e8d@mr) (if (null? g3e8b@e*) '() ((lambda (g3e91@e) (cons g3e91@e (g2ee7@chi-expr* (cdr g3e8b@e*) g3e8c@r g3e8d@mr))) (g2eeb@chi-expr (car g3e8b@e*) g3e8c@r g3e8d@mr))))) (set! g2ee9@chi-application (lambda (g3e93@e g3e94@r g3e95@mr) ((lambda (g3e99@t) ((lambda (g3e9b@ls/false) (if g3e9b@ls/false (apply (lambda (g3e9d@rator g3e9e@rands) ((lambda (g3ea1@rator) (cons g3ea1@rator (g2ee7@chi-expr* g3e9e@rands g3e94@r g3e95@mr))) (g2eeb@chi-expr g3e9d@rator g3e94@r g3e95@mr))) g3e9b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3e99@t))) (g2ec9@syntax-dispatch g3e99@t '(any . each-any)))) g3e93@e))) (set! g2eeb@chi-expr (lambda (g3ea3@e g3ea4@r g3ea5@mr) (call-with-values (lambda () (g2ce6@syntax-type g3ea3@e g3ea4@r)) (lambda (g3eaf@g3eaa g3eb0@g3eac g3eb1@g3eae) ((lambda (g3eb5@kwd g3eb6@value g3eb7@type) ((lambda (g3ebb@t) (if (memv g3ebb@t '(core-macro)) ((lambda (g3ebd@transformer) (g3ebd@transformer g3ea3@e g3ea4@r g3ea5@mr)) (g2ed7@core-macro-transformer g3eb6@value)) (if (memv g3ebb@t '(global)) ((lambda (g3ebf@lib) ((lambda (g3ec1@loc) ((lambda () (begin ((g2f34@inv-collector) g3ebf@lib) g3ec1@loc)))) (cdr g3eb6@value))) (car g3eb6@value)) (if (memv g3ebb@t '(core-prim)) ((lambda (g3ec3@name) (list 'primitive g3ec3@name)) g3eb6@value) (if (memv g3ebb@t '(call)) (g2ee9@chi-application g3ea3@e g3ea4@r g3ea5@mr) (if (memv g3ebb@t '(lexical)) ((lambda (g3ec5@lex) g3ec5@lex) (g2e55@lexical-var g3eb6@value)) (if (memv g3ebb@t '(global-macro global-macro!)) (g2eeb@chi-expr (g2ee5@chi-global-macro g3eb6@value g3ea3@e) g3ea4@r g3ea5@mr) (if (memv g3ebb@t '(local-macro local-macro!)) (g2eeb@chi-expr (g2ee3@chi-local-macro g3eb6@value g3ea3@e) g3ea4@r g3ea5@mr) (if (memv g3ebb@t '(macro macro!)) (g2eeb@chi-expr (g2ee1@chi-macro g3eb6@value g3ea3@e) g3ea4@r g3ea5@mr) (if (memv g3ebb@t '(constant)) ((lambda (g3ec7@datum) (list 'quote g3ec7@datum)) g3eb6@value) (if (memv g3ebb@t '(set!)) (g2eed@chi-set! g3ea3@e g3ea4@r g3ea5@mr) (if (memv g3ebb@t '(begin)) ((lambda (g3ec9@t) ((lambda (g3ecb@ls/false) (if g3ecb@ls/false (apply (lambda (g3ecd@x g3ece@x*) (g2c1d@g2b8c@build-sequence '#f (g2ee7@chi-expr* (cons g3ecd@x g3ece@x*) g3ea4@r g3ea5@mr))) g3ecb@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3ec9@t))) (g2ec9@syntax-dispatch g3ec9@t '(_ any . each-any)))) g3ea3@e) (if (memv g3ebb@t '(let-syntax letrec-syntax)) ((lambda (g3ed1@t) ((lambda (g3ed3@ls/false) (if (and g3ed3@ls/false (apply (lambda (g3ed5@xlhs* g3ed6@xrhs* g3ed7@xbody g3ed8@xbody*) (if (not (g2cc8@valid-bound-ids? g3ed5@xlhs*)) (g2fb2@syntax-violation '#f '"invalid identifiers" g3ea3@e) (void))) g3ed3@ls/false)) (apply (lambda (g3edd@xlhs* g3ede@xrhs* g3edf@xbody g3ee0@xbody*) ((lambda (g3ee5@xlab*) ((lambda (g3ee7@xrib) ((lambda (g3ee9@xb*) ((lambda () (g2c1d@g2b8c@build-sequence '#f (g2ee7@chi-expr* (map (lambda (g3eeb@x) (g2caa@add-subst g3ee7@xrib g3eeb@x)) (cons g3edf@xbody g3ee0@xbody*)) (append (map cons g3ee5@xlab* g3ee9@xb*) g3ea4@r) (append (map cons g3ee5@xlab* g3ee9@xb*) g3ea5@mr)))))) (map (lambda (g3eed@x) (g2cfc@make-eval-transformer (g2f26@expand-transformer (if (eq? g3eb7@type 'let-syntax) g3eed@x (g2caa@add-subst g3ee7@xrib g3eed@x)) g3ea5@mr))) g3ede@xrhs*))) (g2c79@make-full-rib g3edd@xlhs* g3ee5@xlab*))) (map g2c42@gen-label g3edd@xlhs*))) g3ed3@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3ed1@t))) (g2ec9@syntax-dispatch g3ed1@t '(_ #(each (any any)) any . each-any)))) g3ea3@e) (if (memv g3ebb@t '(displaced-lexical)) (g2fb2@syntax-violation '#f '"identifier out of context" g3ea3@e) (if (memv g3ebb@t '(syntax)) (g2fb2@syntax-violation '#f '"reference to pattern variable outside a syntax form" g3ea3@e) (if (memv g3ebb@t '(define define-syntax module import library)) (g2fb2@syntax-violation '#f (string-append ((lambda (g3eef@t) (if (memv g3eef@t '(define)) '"a definition" (if (memv g3eef@t '(define-syntax)) '"a define-syntax" (if (memv g3eef@t '(module)) '"a module definition" (if (memv g3eef@t '(library)) '"a library definition" (if (memv g3eef@t '(import)) '"an import declaration" (if (memv g3eef@t '(export)) '"an export declaration" '"a non-expression"))))))) g3eb7@type) '" was found where an expression was expected") g3ea3@e) (if (memv g3ebb@t '(mutable)) (g2fb2@syntax-violation '#f '"attempt to reference an unexportable variable" g3ea3@e) (g2fb2@syntax-violation '#f '"invalid expression" g3ea3@e)))))))))))))))))) g3eb7@type)) g3eb1@g3eae g3eb0@g3eac g3eaf@g3eaa))))) (set! g2eed@chi-set! (lambda (g3ef1@e g3ef2@r g3ef3@mr) ((lambda (g3ef7@t) ((lambda (g3ef9@ls/false) (if (and g3ef9@ls/false (apply (lambda (g3efb@x g3efc@v) (g2cbe@id? g3efb@x)) g3ef9@ls/false)) (apply (lambda (g3eff@x g3f00@v) (call-with-values (lambda () (g2ce6@syntax-type g3eff@x g3ef2@r)) (lambda (g3f09@g3f04 g3f0a@g3f06 g3f0b@g3f08) ((lambda (g3f0f@kwd g3f10@value g3f11@type) ((lambda (g3f15@t) (if (memv g3f15@t '(lexical)) (begin (g2e59@set-lexical-mutable! g3f10@value '#t) (list 'set! (g2e55@lexical-var g3f10@value) (g2eeb@chi-expr g3f00@v g3ef2@r g3ef3@mr))) (if (memv g3f15@t '(core-prim)) (g2fb2@syntax-violation '#f '"cannot modify imported core primitive" g3ef1@e) (if (memv g3f15@t '(global)) (g2fb2@syntax-violation '#f '"attempt to modify imported binding" g3ef1@e) (if (memv g3f15@t '(global-macro!)) (g2eeb@chi-expr (g2ee5@chi-global-macro g3f10@value g3ef1@e) g3ef2@r g3ef3@mr) (if (memv g3f15@t '(local-macro!)) (g2eeb@chi-expr (g2ee3@chi-local-macro g3f10@value g3ef1@e) g3ef2@r g3ef3@mr) (if (memv g3f15@t '(mutable)) (g2fb2@syntax-violation '#f '"attempt to assign to an unexportable variable" g3ef1@e) (g2fb2@syntax-violation '#f '"invalid syntax" g3ef1@e)))))))) g3f11@type)) g3f0b@g3f08 g3f0a@g3f06 g3f09@g3f04)))) g3ef9@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3ef7@t))) (g2ec9@syntax-dispatch g3ef7@t '(_ any any)))) g3ef1@e))) (set! g2eef@verify-formals (lambda (g3f17@fmls g3f18@stx) ((lambda (g3f1b@t) ((lambda (g3f1d@ls/false) (if g3f1d@ls/false (apply (lambda (g3f1f@x*) (if (not (g2cc8@valid-bound-ids? g3f1f@x*)) (g2e83@invalid-fmls-error g3f18@stx g3f17@fmls) (void))) g3f1d@ls/false) ((lambda (g3f21@t) ((lambda (g3f23@ls/false) (if g3f23@ls/false (apply (lambda (g3f25@x* g3f26@x) (if (not (g2cc8@valid-bound-ids? (cons g3f26@x g3f25@x*))) (g2e83@invalid-fmls-error g3f18@stx g3f17@fmls) (void))) g3f23@ls/false) ((lambda (g3f29@t) ((lambda (g3f2b@ls/false) (if g3f2b@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid syntax" g3f18@stx)) g3f2b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3f29@t))) (g2ec9@syntax-dispatch g3f29@t '_))) g3f21@t))) (g2ec9@syntax-dispatch g3f21@t '#(each+ any () any)))) g3f1b@t))) (g2ec9@syntax-dispatch g3f1b@t 'each-any))) g3f17@fmls))) (set! g2ef1@chi-lambda-clause (lambda (g3f2d@stx g3f2e@fmls g3f2f@body* g3f30@r g3f31@mr) ((lambda (g3f37@t) ((lambda (g3f39@ls/false) (if g3f39@ls/false (apply (lambda (g3f3b@x*) (begin (g2eef@verify-formals g3f2e@fmls g3f2d@stx) ((lambda (g3f3d@lex* g3f3e@lab*) (values g3f3d@lex* (g2f01@chi-internal (g2caa@add-subst (g2c79@make-full-rib g3f3b@x* g3f3e@lab*) g3f2f@body*) (g2e5d@add-lexicals g3f3e@lab* g3f3d@lex* g3f30@r) g3f31@mr))) (map g2c3e@gen-lexical g3f3b@x*) (map g2c42@gen-label g3f3b@x*)))) g3f39@ls/false) ((lambda (g3f41@t) ((lambda (g3f43@ls/false) (if g3f43@ls/false (apply (lambda (g3f45@x* g3f46@x) (begin (g2eef@verify-formals g3f2e@fmls g3f2d@stx) ((lambda (g3f49@lex* g3f4a@lab* g3f4b@lex g3f4c@lab) (values (append g3f49@lex* g3f4b@lex) (g2f01@chi-internal (g2caa@add-subst (g2c79@make-full-rib (cons g3f46@x g3f45@x*) (cons g3f4c@lab g3f4a@lab*)) g3f2f@body*) (g2e5d@add-lexicals (cons g3f4c@lab g3f4a@lab*) (cons g3f4b@lex g3f49@lex*) g3f30@r) g3f31@mr))) (map g2c3e@gen-lexical g3f45@x*) (map g2c42@gen-label g3f45@x*) (g2c3e@gen-lexical g3f46@x) (g2c42@gen-label g3f46@x)))) g3f43@ls/false) ((lambda (g3f51@t) ((lambda (g3f53@ls/false) (if g3f53@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid syntax" g3f2e@fmls)) g3f53@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g3f51@t))) (g2ec9@syntax-dispatch g3f51@t '_))) g3f41@t))) (g2ec9@syntax-dispatch g3f41@t '#(each+ any () any)))) g3f37@t))) (g2ec9@syntax-dispatch g3f37@t 'each-any))) g3f2e@fmls))) (set! g2ef3@chi-lambda-clause* (lambda (g3f55@stx g3f56@fmls* g3f57@body** g3f58@r g3f59@mr) (if (null? g3f56@fmls*) (values '() '()) (call-with-values (lambda () (g2ef1@chi-lambda-clause g3f55@stx (car g3f56@fmls*) (car g3f57@body**) g3f58@r g3f59@mr)) (lambda (g3f63@g3f60 g3f64@g3f62) ((lambda (g3f67@b g3f68@a) (call-with-values (lambda () (g2ef3@chi-lambda-clause* g3f55@stx (cdr g3f56@fmls*) (cdr g3f57@body**) g3f58@r g3f59@mr)) (lambda (g3f6f@g3f6c g3f70@g3f6e) ((lambda (g3f73@b* g3f74@a*) (values (cons g3f68@a g3f74@a*) (cons g3f67@b g3f73@b*))) g3f70@g3f6e g3f6f@g3f6c)))) g3f64@g3f62 g3f63@g3f60)))))) (set! g2ef5@chi-defun (lambda (g3f77@x g3f78@r g3f79@mr) ((lambda (g3f7d@fmls g3f7e@body*) (call-with-values (lambda () (g2ef1@chi-lambda-clause g3f7d@fmls g3f7d@fmls g3f7e@body* g3f78@r g3f79@mr)) (lambda (g3f85@g3f82 g3f86@g3f84) ((lambda (g3f89@body g3f8a@fmls) (g2c1a@g2b5a@build-lambda '#f g3f8a@fmls g3f89@body)) g3f86@g3f84 g3f85@g3f82)))) (car g3f77@x) (cdr g3f77@x)))) (set! g2ef7@chi-rhs (lambda (g3f8d@rhs g3f8e@r g3f8f@mr) ((lambda (g3f93@t) (if (memv g3f93@t '(defun)) (g2ef5@chi-defun (cdr g3f8d@rhs) g3f8e@r g3f8f@mr) (if (memv g3f93@t '(expr)) ((lambda (g3f95@expr) (g2eeb@chi-expr g3f95@expr g3f8e@r g3f8f@mr)) (cdr g3f8d@rhs)) (if (memv g3f93@t '(top-expr)) ((lambda (g3f97@expr) (g2c1d@g2b8c@build-sequence '#f (list (g2eeb@chi-expr g3f97@expr g3f8e@r g3f8f@mr) (g2c1e@g2b8e@build-void)))) (cdr g3f8d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g3f8d@rhs))))) (car g3f8d@rhs)))) (set! g2ef9@expand-interaction-rhs*/init* (lambda (g3f99@lhs* g3f9a@rhs* g3f9b@init* g3f9c@r g3f9d@mr) ((letrec ((g3fa3@f (lambda (g3fa5@lhs* g3fa6@rhs*) (if (null? g3fa5@lhs*) (map (lambda (g3fa9@x) (g2eeb@chi-expr g3fa9@x g3f9c@r g3f9d@mr)) g3f9b@init*) ((lambda (g3fab@lhs g3fac@rhs) ((lambda (g3faf@t) (if (memv g3faf@t '(defun)) ((lambda (g3fb1@rhs) (cons (list 'set! g3fab@lhs g3fb1@rhs) (g3fa3@f (cdr g3fa5@lhs*) (cdr g3fa6@rhs*)))) (g2ef5@chi-defun (cdr g3fac@rhs) g3f9c@r g3f9d@mr)) (if (memv g3faf@t '(expr)) ((lambda (g3fb3@rhs) (cons (list 'set! g3fab@lhs g3fb3@rhs) (g3fa3@f (cdr g3fa5@lhs*) (cdr g3fa6@rhs*)))) (g2eeb@chi-expr (cdr g3fac@rhs) g3f9c@r g3f9d@mr)) (if (memv g3faf@t '(top-expr)) ((lambda (g3fb5@e) (cons g3fb5@e (g3fa3@f (cdr g3fa5@lhs*) (cdr g3fa6@rhs*)))) (g2eeb@chi-expr (cdr g3fac@rhs) g3f9c@r g3f9d@mr)) (error 'expand-interaction '"invallid" g3fac@rhs))))) (car g3fac@rhs))) (car g3fa5@lhs*) (car g3fa6@rhs*)))))) g3fa3@f) g3f99@lhs* g3f9a@rhs*))) (set! g2efb@chi-rhs* (lambda (g3fb7@rhs* g3fb8@r g3fb9@mr) ((letrec ((g3fbd@f (lambda (g3fbf@ls) (if (null? g3fbf@ls) '() ((lambda (g3fc1@a) (cons g3fc1@a (g3fbd@f (cdr g3fbf@ls)))) (g2ef7@chi-rhs (car g3fbf@ls) g3fb8@r g3fb9@mr)))))) g3fbd@f) g3fb7@rhs*))) (set! g2efd@find-bound=? (lambda (g3fc3@x g3fc4@lhs* g3fc5@rhs*) (if (null? g3fc4@lhs*) '#f (if (g2cc4@bound-id=? g3fc3@x (car g3fc4@lhs*)) (car g3fc5@rhs*) (g2efd@find-bound=? g3fc3@x (cdr g3fc4@lhs*) (cdr g3fc5@rhs*)))))) (set! g2eff@find-dups (lambda (g3fc9@ls) ((letrec ((g3fcb@f (lambda (g3fcd@ls g3fce@dups) (if (null? g3fcd@ls) g3fce@dups ((lambda (g3fd1@t) (if g3fd1@t ((lambda (g3fd3@x) (g3fcb@f (cdr g3fcd@ls) (cons (list (car g3fcd@ls) g3fd3@x) g3fce@dups))) g3fd1@t) (g3fcb@f (cdr g3fcd@ls) g3fce@dups))) (g2efd@find-bound=? (car g3fcd@ls) (cdr g3fcd@ls) (cdr g3fcd@ls))))))) g3fcb@f) g3fc9@ls '()))) (set! g2f01@chi-internal (lambda (g3fd5@e* g3fd6@r g3fd7@mr) ((lambda (g3fdb@rib) (call-with-values (lambda () (g2f24@chi-body* (map (lambda (g3fed@x) (g2caa@add-subst g3fdb@rib g3fed@x)) (g2cbc@syntax->list g3fd5@e*)) g3fd6@r g3fd7@mr '() '() '() '() '() g3fdb@rib '#f)) (lambda (g3fef@g3fde g3ff0@g3fe0 g3ff1@g3fe2 g3ff2@g3fe4 g3ff3@g3fe6 g3ff4@g3fe8 g3ff5@g3fea g3ff6@g3fec) ((lambda (g3fff@_exp* g4000@kwd* g4001@mod** g4002@rhs* g4003@lex* g4004@mr g4005@r g4006@e*) (begin (if (null? g4006@e*) (g2fb2@syntax-violation '#f '"no expression in body" g4006@e*) (void)) ((lambda (g400f@init*) ((lambda (g4011@rhs*) ((lambda () (g2c20@g2b92@build-letrec* '#f (reverse g4003@lex*) (reverse g4011@rhs*) (g2c1d@g2b8c@build-sequence '#f g400f@init*))))) (g2efb@chi-rhs* g4002@rhs* g4005@r g4004@mr))) (g2ee7@chi-expr* (append (apply append (reverse g4001@mod**)) g4006@e*) g4005@r g4004@mr)))) g3ff6@g3fec g3ff5@g3fea g3ff4@g3fe8 g3ff3@g3fe6 g3ff2@g3fe4 g3ff1@g3fe2 g3ff0@g3fe0 g3fef@g3fde)))) (g2c6d@make-empty-rib)))) (set! g2f03@parse-module (lambda (g4013@e) ((lambda (g4015@t) ((lambda (g4017@ls/false) (if g4017@ls/false (apply (lambda (g4019@export* g401a@b*) (begin (if (not (for-all g2cbe@id? g4019@export*)) (g2fb2@syntax-violation '#f '"module exports must be identifiers" g4013@e) (void)) (values '#f (list->vector g4019@export*) g401a@b*))) g4017@ls/false) ((lambda (g401d@t) ((lambda (g401f@ls/false) (if g401f@ls/false (apply (lambda (g4021@name g4022@export* g4023@b*) (begin (if (not (g2cbe@id? g4021@name)) (g2fb2@syntax-violation '#f '"module name must be an identifier" g4013@e) (void)) (if (not (for-all g2cbe@id? g4022@export*)) (g2fb2@syntax-violation '#f '"module exports must be identifiers" g4013@e) (void)) (values g4021@name (list->vector g4022@export*) g4023@b*))) g401f@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g401d@t))) (g2ec9@syntax-dispatch g401d@t '(_ any each-any . each-any)))) g4015@t))) (g2ec9@syntax-dispatch g4015@t '(_ each-any . each-any)))) g4013@e))) (set! g2f09@g2f04 (make-record-type-descriptor 'module-interface '#f 'g2f07 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! g2f0b@g2f06 '#f) (set! g2f0d@g2f05 (make-record-constructor-descriptor g2f09@g2f04 '#f g2f0b@g2f06)) (set! g2f10@module-interface? (record-predicate g2f09@g2f04)) (set! g2f12@make-module-interface (record-constructor g2f0d@g2f05)) (set! g2f14@module-interface-first-mark (record-accessor g2f09@g2f04 '0)) (set! g2f16@module-interface-exp-id-vec (record-accessor g2f09@g2f04 '1)) (set! g2f18@module-interface-exp-lab-vec (record-accessor g2f09@g2f04 '2)) (set! g2f1a@set-module-interface-first-mark! (record-mutator g2f09@g2f04 '0)) (set! g2f1c@set-module-interface-exp-id-vec! (record-mutator g2f09@g2f04 '1)) (set! g2f1e@set-module-interface-exp-lab-vec! (record-mutator g2f09@g2f04 '2)) (set! g2f20@module-interface-exp-id* (lambda (g4027@iface g4028@id) ((lambda (g402c@diff-marks) (begin (set! g402c@diff-marks (lambda (g4033@ls g4034@x) (begin (if (null? g4033@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (g4037@a) (if (eq? g4037@a g4034@x) '() (cons g4037@a (g402c@diff-marks (cdr g4033@ls) g4034@x)))) (car g4033@ls))))) ((lambda (g402d@diff g402e@id-vec) (if (null? g402d@diff) g402e@id-vec (vector-map (lambda (g4031@x) (g2c88@make-stx (g2c8a@stx-expr g4031@x) (append g402d@diff (g2c8c@stx-mark* g4031@x)) '() '())) g402e@id-vec))) (g402c@diff-marks (g2c8c@stx-mark* g4028@id) (g2f14@module-interface-first-mark g4027@iface)) (g2f16@module-interface-exp-id-vec g4027@iface)))) '#f))) (set! g2f22@chi-internal-module (lambda (g4039@e g403a@r g403b@mr g403c@lex* g403d@rhs* g403e@mod** g403f@kwd*) (call-with-values (lambda () (g2f03@parse-module g4039@e)) (lambda (g404d@g4048 g404e@g404a g404f@g404c) ((lambda (g4053@e* g4054@exp-id* g4055@name) ((lambda (g4059@rib) ((lambda (g405b@e*) ((lambda () (call-with-values (lambda () (g2f24@chi-body* g405b@e* g403a@r g403b@mr g403c@lex* g403d@rhs* g403e@mod** g403f@kwd* '() g4059@rib '#f)) (lambda (g406d@g405e g406e@g4060 g406f@g4062 g4070@g4064 g4071@g4066 g4072@g4068 g4073@g406a g4074@g406c) ((lambda (g407d@_exp* g407e@kwd* g407f@mod** g4080@rhs* g4081@lex* g4082@mr g4083@r g4084@e*) ((lambda (g408d@exp-lab* g408e@mod**) (if (not g4055@name) (values g4081@lex* g4080@rhs* g4054@exp-id* g408d@exp-lab* g4083@r g4082@mr g408e@mod** g407e@kwd*) ((lambda (g4091@lab g4092@iface) (values g4081@lex* g4080@rhs* (vector g4055@name) (vector g4091@lab) (cons (cons g4091@lab (cons '$module g4092@iface)) g4083@r) (cons (cons g4091@lab (cons '$module g4092@iface)) g4082@mr) g408e@mod** g407e@kwd*)) (g2c42@gen-label 'module) (g2f12@make-module-interface (car (g2c8c@stx-mark* g4055@name)) (vector-map (lambda (g4095@x) (g2c88@make-stx (g2c8a@stx-expr g4095@x) (g2c8c@stx-mark* g4095@x) '() '())) g4054@exp-id*) g408d@exp-lab*)))) (vector-map (lambda (g4097@x) (or (g2cd8@id->label (g2c88@make-stx (g2cc0@id->sym g4097@x) (g2c8c@stx-mark* g4097@x) (list g4059@rib) '())) (g2fb2@syntax-violation '#f '"cannot find module export" g4097@x))) g4054@exp-id*) (cons g4084@e* g407f@mod**))) g4074@g406c g4073@g406a g4072@g4068 g4071@g4066 g4070@g4064 g406f@g4062 g406e@g4060 g406d@g405e)))))) (map (lambda (g4099@x) (g2caa@add-subst g4059@rib g4099@x)) (g2cbc@syntax->list g4053@e*)))) (g2c6d@make-empty-rib))) g404f@g404c g404e@g404a g404d@g4048))))) (set! g2f24@chi-body* (lambda (g409b@e* g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40a1@kwd* g40a2@exp* g40a3@rib g40a4@top?) (if (null? g409b@e*) (values g409b@e* g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40a1@kwd* g40a2@exp*) ((lambda (g40af@e) (call-with-values (lambda () (g2ce6@syntax-type g40af@e g409c@r)) (lambda (g40b7@g40b2 g40b8@g40b4 g40b9@g40b6) ((lambda (g40bd@kwd g40be@value g40bf@type) ((lambda (g40c3@kwd*) ((lambda (g40c5@t) (if (memv g40c5@t '(define)) (call-with-values (lambda () (g2e4d@parse-define g40af@e)) (lambda (g40cb@g40c8 g40cc@g40ca) ((lambda (g40cf@rhs g40d0@id) (begin (if (g2ccc@bound-id-member? g40d0@id g40c3@kwd*) (g2fb2@syntax-violation '#f '"cannot redefine keyword" g40af@e) (void)) (call-with-values (lambda () (g2c46@gen-define-label+loc g40d0@id g40a3@rib)) (lambda (g40d7@g40d4 g40d8@g40d6) ((lambda (g40db@lex g40dc@lab) (begin (g2c6f@extend-rib! g40a3@rib g40d0@id g40dc@lab) (g2f24@chi-body* (cdr g409b@e*) (g2e5b@add-lexical g40dc@lab g40db@lex g409c@r) g409d@mr (cons g40db@lex g409e@lex*) (cons g40cf@rhs g409f@rhs*) g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?))) g40d8@g40d6 g40d7@g40d4))))) g40cc@g40ca g40cb@g40c8))) (if (memv g40c5@t '(define-syntax)) (call-with-values (lambda () (g2e4f@parse-define-syntax g40af@e)) (lambda (g40e3@g40e0 g40e4@g40e2) ((lambda (g40e7@rhs g40e8@id) (begin (if (g2ccc@bound-id-member? g40e8@id g40c3@kwd*) (g2fb2@syntax-violation '#f '"cannot redefine keyword" g40af@e) (void)) ((lambda (g40eb@lab g40ec@expanded-rhs) (begin (g2c6f@extend-rib! g40a3@rib g40e8@id g40eb@lab) ((lambda (g40ef@b) (g2f24@chi-body* (cdr g409b@e*) (cons (cons g40eb@lab g40ef@b) g409c@r) (cons (cons g40eb@lab g40ef@b) g409d@mr) g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?)) (g2cfc@make-eval-transformer g40ec@expanded-rhs)))) (g2c48@gen-define-label g40e8@id g40a3@rib) (g2f26@expand-transformer g40e7@rhs g409d@mr)))) g40e4@g40e2 g40e3@g40e0))) (if (memv g40c5@t '(let-syntax letrec-syntax)) ((lambda (g40f1@t) ((lambda (g40f3@ls/false) (if (and g40f3@ls/false (apply (lambda (g40f5@xlhs* g40f6@xrhs* g40f7@xbody*) (if (not (g2cc8@valid-bound-ids? g40f5@xlhs*)) (g2fb2@syntax-violation '#f '"invalid identifiers" g40af@e) (void))) g40f3@ls/false)) (apply (lambda (g40fb@xlhs* g40fc@xrhs* g40fd@xbody*) ((lambda (g4101@xlab*) ((lambda (g4103@xrib) ((lambda (g4105@xb*) ((lambda () (g2f24@chi-body* (append (map (lambda (g4107@x) (g2caa@add-subst g4103@xrib g4107@x)) g40fd@xbody*) (cdr g409b@e*)) (append (map cons g4101@xlab* g4105@xb*) g409c@r) (append (map cons g4101@xlab* g4105@xb*) g409d@mr) g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?)))) (map (lambda (g4109@x) (g2cfc@make-eval-transformer (g2f26@expand-transformer (if (eq? g40bf@type 'let-syntax) g4109@x (g2caa@add-subst g4103@xrib g4109@x)) g409d@mr))) g40fc@xrhs*))) (g2c79@make-full-rib g40fb@xlhs* g4101@xlab*))) (map g2c42@gen-label g40fb@xlhs*))) g40f3@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g40f1@t))) (g2ec9@syntax-dispatch g40f1@t '(_ #(each (any any)) . each-any)))) g40af@e) (if (memv g40c5@t '(begin)) ((lambda (g410b@t) ((lambda (g410d@ls/false) (if g410d@ls/false (apply (lambda (g410f@x*) (g2f24@chi-body* (append g410f@x* (cdr g409b@e*)) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?)) g410d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g410b@t))) (g2ec9@syntax-dispatch g410b@t '(_ . each-any)))) g40af@e) (if (memv g40c5@t '(global-macro global-macro!)) (g2f24@chi-body* (cons (g2caa@add-subst g40a3@rib (g2ee5@chi-global-macro g40be@value g40af@e)) (cdr g409b@e*)) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?) (if (memv g40c5@t '(local-macro local-macro!)) (g2f24@chi-body* (cons (g2caa@add-subst g40a3@rib (g2ee3@chi-local-macro g40be@value g40af@e)) (cdr g409b@e*)) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?) (if (memv g40c5@t '(macro macro!)) (g2f24@chi-body* (cons (g2caa@add-subst g40a3@rib (g2ee1@chi-macro g40be@value g40af@e)) (cdr g409b@e*)) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?) (if (memv g40c5@t '(module)) (call-with-values (lambda () (g2f22@chi-internal-module g40af@e g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd*)) (lambda (g4121@g4112 g4122@g4114 g4123@g4116 g4124@g4118 g4125@g411a g4126@g411c g4127@g411e g4128@g4120) ((lambda (g4131@kwd* g4132@mod** g4133@mr g4134@r g4135@m-exp-lab* g4136@m-exp-id* g4137@rhs* g4138@lex*) (begin (vector-for-each (lambda (g4141@id g4142@lab) (g2c6f@extend-rib! g40a3@rib g4141@id g4142@lab)) g4136@m-exp-id* g4135@m-exp-lab*) (g2f24@chi-body* (cdr g409b@e*) g4134@r g4133@mr g4138@lex* g4137@rhs* g4132@mod** g4131@kwd* g40a2@exp* g40a3@rib g40a4@top?))) g4128@g4120 g4127@g411e g4126@g411c g4125@g411a g4124@g4118 g4123@g4116 g4122@g4114 g4121@g4112))) (if (memv g40c5@t '(library)) (begin (g2f94@library-expander (g2cd4@stx->datum g40af@e)) (g2f24@chi-body* (cdr g409b@e*) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?)) (if (memv g40c5@t '(export)) ((lambda (g4145@t) ((lambda (g4147@ls/false) (if g4147@ls/false (apply (lambda (g4149@exp-decl*) (g2f24@chi-body* (cdr g409b@e*) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* (append g4149@exp-decl* g40a2@exp*) g40a3@rib g40a4@top?)) g4147@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4145@t))) (g2ec9@syntax-dispatch g4145@t '(_ . each-any)))) g40af@e) (if (memv g40c5@t '(import)) ((lambda () ((lambda (g414c@module-import? g414e@module-import g4150@library-import) (begin (set! g414c@module-import? (lambda (g419f@e) ((lambda (g41a1@t) ((lambda (g41a3@ls/false) (if (and g41a3@ls/false (apply (lambda (g41a5@id) (g2cbe@id? g41a5@id)) g41a3@ls/false)) (apply (lambda (g41a7@id) '#t) g41a3@ls/false) ((lambda (g41a9@t) ((lambda (g41ab@ls/false) (if g41ab@ls/false (apply (lambda (g41ad@imp*) '#f) g41ab@ls/false) ((lambda (g41af@t) ((lambda (g41b1@ls/false) (if g41b1@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"malformed import form" g419f@e)) g41b1@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g41af@t))) (g2ec9@syntax-dispatch g41af@t '_))) g41a9@t))) (g2ec9@syntax-dispatch g41a9@t '(_ . each-any)))) g41a1@t))) (g2ec9@syntax-dispatch g41a1@t '(_ any)))) g419f@e))) (set! g414e@module-import (lambda (g417d@e g417e@r) ((lambda (g4181@t) ((lambda (g4183@ls/false) (if (and g4183@ls/false (apply (lambda (g4185@id) (g2cbe@id? g4185@id)) g4183@ls/false)) (apply (lambda (g4187@id) (call-with-values (lambda () (g2ce6@syntax-type g4187@id g417e@r)) (lambda (g418f@g418a g4190@g418c g4191@g418e) ((lambda (g4195@kwd g4196@value g4197@type) ((lambda (g419b@t) (if (memv g419b@t '($module)) ((lambda (g419d@iface) (values (g2f20@module-interface-exp-id* g419d@iface g4187@id) (g2f18@module-interface-exp-lab-vec g419d@iface))) g4196@value) (g2fb2@syntax-violation '#f '"invalid import" g417d@e))) g4197@type)) g4191@g418e g4190@g418c g418f@g418a)))) g4183@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4181@t))) (g2ec9@syntax-dispatch g4181@t '(_ any)))) g417d@e))) (set! g4150@library-import (lambda (g4161@e) ((lambda (g4163@t) ((lambda (g4165@ls/false) (if g4165@ls/false (apply (lambda (g4167@ctxt g4168@imp*) (call-with-values (lambda () (g2f2e@parse-import-spec* (g2fb8@syntax->datum g4168@imp*))) (lambda (g416f@g416c g4170@g416e) ((lambda (g4173@subst-labels g4174@subst-names) (values (vector-map (lambda (g4177@name) (g2c9c@datum->stx g4167@ctxt g4177@name)) g4174@subst-names) g4173@subst-labels)) g4170@g416e g416f@g416c)))) g4165@ls/false) ((lambda (g4179@t) ((lambda (g417b@ls/false) (if g417b@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid import form" g4161@e)) g417b@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4179@t))) (g2ec9@syntax-dispatch g4179@t '_))) g4163@t))) (g2ec9@syntax-dispatch g4163@t '(any . each-any)))) g4161@e))) (begin (call-with-values (lambda () (if (g414c@module-import? g40af@e) (g414e@module-import g40af@e g409c@r) (g4150@library-import g40af@e))) (lambda (g4155@g4152 g4156@g4154) ((lambda (g4159@lab* g415a@id*) (vector-for-each (lambda (g415d@id g415e@lab) (g2c6f@extend-rib! g40a3@rib g415d@id g415e@lab)) g415a@id* g4159@lab*)) g4156@g4154 g4155@g4152))) (g2f24@chi-body* (cdr g409b@e*) g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?)))) '#f '#f '#f))) (if g40a4@top? (g2f24@chi-body* (cdr g409b@e*) g409c@r g409d@mr (cons (g2c3e@gen-lexical 'dummy) g409e@lex*) (cons (cons 'top-expr g40af@e) g409f@rhs*) g40a0@mod** g40c3@kwd* g40a2@exp* g40a3@rib g40a4@top?) (values g409b@e* g409c@r g409d@mr g409e@lex* g409f@rhs* g40a0@mod** g40c3@kwd* g40a2@exp*)))))))))))))) g40bf@type)) (if (g2cbe@id? g40bd@kwd) (cons g40bd@kwd g40a1@kwd*) g40a1@kwd*))) g40b9@g40b6 g40b8@g40b4 g40b7@g40b2)))) (car g409b@e*))))) (set! g2f26@expand-transformer (lambda (g41b3@expr g41b4@r) ((lambda (g41b7@rtc) ((lambda (g41b9@expanded-rhs) (begin (for-each ((lambda (g41bb@mark-visit) (lambda (g41bd@x) (begin (g2ae2@g2983@invoke-library g41bd@x) (g41bb@mark-visit g41bd@x)))) (g2f36@vis-collector)) (g41b7@rtc)) g41b9@expanded-rhs)) ((lambda (g41c7@g41c0 g41c8@g41c2 g41c9@g41c4 g41ca@g41c6) ((lambda (g41cf@swap) (dynamic-wind g41cf@swap (lambda () (g2eeb@chi-expr g41b3@expr g41b4@r g41b4@r)) g41cf@swap)) (lambda () (begin ((lambda (g41d1@t) (begin (g41c7@g41c0 g41c9@g41c4) (set! g41c9@g41c4 g41d1@t))) (g41c7@g41c0)) ((lambda (g41d3@t) (begin (g41c8@g41c2 g41ca@g41c6) (set! g41ca@g41c6 g41d3@t))) (g41c8@g41c2)))))) g2f34@inv-collector g2f36@vis-collector g41b7@rtc (lambda (g41d5@x) (values))))) (g2f32@make-collector)))) (set! g2f28@parse-exports (lambda (g41d7@exp*) ((letrec ((g41d9@f (lambda (g41db@exp* g41dc@int* g41dd@ext*) (if (null? g41db@exp*) (begin (if (not (g2cc8@valid-bound-ids? g41dd@ext*)) (g2fb2@syntax-violation 'export '"invalid exports" (g2eff@find-dups g41dd@ext*)) (void)) (values (map g2fb8@syntax->datum g41dd@ext*) g41dc@int*)) ((lambda (g41e1@t) ((lambda (g41e3@ls/false) (if g41e3@ls/false (apply (lambda (g41e5@rename g41e6@i* g41e7@e*) (begin (if (not (and (eq? (g2fb8@syntax->datum g41e5@rename) 'rename) (for-all g2cbe@id? g41e6@i*) (for-all g2cbe@id? g41e7@e*))) (g2fb2@syntax-violation 'export '"invalid export specifier" (car g41db@exp*)) (void)) (g41d9@f (cdr g41db@exp*) (append g41e6@i* g41dc@int*) (append g41e7@e* g41dd@ext*)))) g41e3@ls/false) ((lambda (g41eb@t) ((lambda (g41ed@ls/false) (if g41ed@ls/false (apply (lambda (g41ef@ie) (begin (if (not (g2cbe@id? g41ef@ie)) (g2fb2@syntax-violation 'export '"invalid export" g41ef@ie) (void)) (g41d9@f (cdr g41db@exp*) (cons g41ef@ie g41dc@int*) (cons g41ef@ie g41dd@ext*)))) g41ed@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g41eb@t))) (g2ec9@syntax-dispatch g41eb@t 'any))) g41e1@t))) (g2ec9@syntax-dispatch g41e1@t '(any . #(each (any any)))))) (car g41db@exp*)))))) g41d9@f) g41d7@exp* '() '()))) (set! g2f2a@parse-library-name (lambda (g41f1@spec) ((lambda (g41f4@parse) (begin (set! g41f4@parse (lambda (g4201@x) ((lambda (g4203@t) ((lambda (g4205@ls/false) (if (and g4205@ls/false (apply (lambda (g4207@v*) (for-all (lambda (g4209@x) ((lambda (g420b@x) (and (integer? g420b@x) (exact? g420b@x))) (g2fb8@syntax->datum g4209@x))) g4207@v*)) g4205@ls/false)) (apply (lambda (g420d@v*) (values '() (map g2fb8@syntax->datum g420d@v*))) g4205@ls/false) ((lambda (g420f@t) ((lambda (g4211@ls/false) (if (and g4211@ls/false (apply (lambda (g4213@x g4214@rest) (symbol? (g2fb8@syntax->datum g4213@x))) g4211@ls/false)) (apply (lambda (g4217@x g4218@rest) (call-with-values (lambda () (g41f4@parse g4218@rest)) (lambda (g421f@g421c g4220@g421e) ((lambda (g4223@v* g4224@x*) (values (cons (g2fb8@syntax->datum g4217@x) g4224@x*) g4223@v*)) g4220@g421e g421f@g421c)))) g4211@ls/false) ((lambda (g4227@t) ((lambda (g4229@ls/false) (if g4229@ls/false (apply (lambda () (values '() '())) g4229@ls/false) ((lambda (g422b@t) ((lambda (g422d@ls/false) (if g422d@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid library name" g41f1@spec)) g422d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g422b@t))) (g2ec9@syntax-dispatch g422b@t '_))) g4227@t))) (g2ec9@syntax-dispatch g4227@t '()))) g420f@t))) (g2ec9@syntax-dispatch g420f@t '(any . any)))) g4203@t))) (g2ec9@syntax-dispatch g4203@t '(each-any)))) g4201@x))) (call-with-values (lambda () (g41f4@parse g41f1@spec)) (lambda (g41f9@g41f6 g41fa@g41f8) ((lambda (g41fd@ver* g41fe@name*) (begin (if (null? g41fe@name*) (g2fb2@syntax-violation '#f '"empty library name" g41f1@spec) (void)) (values g41fe@name* g41fd@ver*))) g41fa@g41f8 g41f9@g41f6))))) '#f))) (set! g2f2c@parse-library (lambda (g422f@e) ((lambda (g4231@t) ((lambda (g4233@ls/false) (if (and g4233@ls/false (apply (lambda (g4235@library g4236@name* g4237@export g4238@exp* g4239@import g423a@imp* g423b@b*) (and (eq? (g2fb8@syntax->datum g4237@export) 'export) (eq? (g2fb8@syntax->datum g4239@import) 'import) (eq? (g2fb8@syntax->datum g4235@library) 'library))) g4233@ls/false)) (apply (lambda (g4243@library g4244@name* g4245@export g4246@exp* g4247@import g4248@imp* g4249@b*) (values g4244@name* g4246@exp* g4248@imp* g4249@b*)) g4233@ls/false) ((lambda (g4251@t) ((lambda (g4253@ls/false) (if g4253@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"malformed library" g422f@e)) g4253@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4251@t))) (g2ec9@syntax-dispatch g4251@t '_))) g4231@t))) (g2ec9@syntax-dispatch g4231@t '(any each-any (any . each-any) (any . each-any) . each-any)))) g422f@e))) (set! g2f2e@parse-import-spec* ((lambda () ((lambda (g4256@idsyn? g4258@dup-error g425a@merge-substs g425c@exclude* g425e@find* g4260@rem* g4262@remove-dups g4264@parse-library-name g4266@import-library g4268@get-import g426a@add-imports!) (begin (set! g4256@idsyn? (lambda (g445f@x) (symbol? (g2fb8@syntax->datum g445f@x)))) (set! g4258@dup-error (lambda (g445d@name) (g2fb2@syntax-violation 'import '"two imports with different bindings" g445d@name))) (set! g425a@merge-substs (lambda (g444b@s g444c@subst) ((lambda (g4450@insert-to-subst) (begin (set! g4450@insert-to-subst (lambda (g4451@a g4452@subst) ((lambda (g4455@name g4456@label) ((lambda (g4459@t) (if g4459@t ((lambda (g445b@x) (if (eq? (cdr g445b@x) g4456@label) g4452@subst (g4258@dup-error g4455@name))) g4459@t) (cons g4451@a g4452@subst))) (assq g4455@name g4452@subst))) (car g4451@a) (cdr g4451@a)))) (if (null? g444b@s) g444c@subst (g4450@insert-to-subst (car g444b@s) (g425a@merge-substs (cdr g444b@s) g444c@subst))))) '#f))) (set! g425c@exclude* (lambda (g441b@sym* g441c@subst) ((lambda (g4420@exclude) (begin (set! g4420@exclude (lambda (g4439@sym g443a@subst) (if (null? g443a@subst) (g2fb2@syntax-violation 'import '"cannot rename unbound identifier" g4439@sym) (if (eq? g4439@sym (caar g443a@subst)) (values (cdar g443a@subst) (cdr g443a@subst)) ((lambda (g443d@a) (call-with-values (lambda () (g4420@exclude g4439@sym (cdr g443a@subst))) (lambda (g4443@g4440 g4444@g4442) ((lambda (g4447@subst g4448@old) (values g4448@old (cons g443d@a g4447@subst))) g4444@g4442 g4443@g4440)))) (car g443a@subst)))))) (if (null? g441b@sym*) (values '() g441c@subst) (call-with-values (lambda () (g4420@exclude (car g441b@sym*) g441c@subst)) (lambda (g4425@g4422 g4426@g4424) ((lambda (g4429@subst g442a@old) (call-with-values (lambda () (g425c@exclude* (cdr g441b@sym*) g4429@subst)) (lambda (g4431@g442e g4432@g4430) ((lambda (g4435@subst g4436@old*) (values (cons g442a@old g4436@old*) g4435@subst)) g4432@g4430 g4431@g442e)))) g4426@g4424 g4425@g4422)))))) '#f))) (set! g425e@find* (lambda (g4413@sym* g4414@subst) (map (lambda (g4417@x) ((lambda (g4419@t) (if g4419@t (cdr g4419@t) (g2fb2@syntax-violation 'import '"cannot find identifier" g4417@x))) (assq g4417@x g4414@subst))) g4413@sym*))) (set! g4260@rem* (lambda (g440b@sym* g440c@subst) ((letrec ((g440f@f (lambda (g4411@subst) (if (null? g4411@subst) '() (if (memq (caar g4411@subst) g440b@sym*) (g440f@f (cdr g4411@subst)) (cons (car g4411@subst) (g440f@f (cdr g4411@subst)))))))) g440f@f) g440c@subst))) (set! g4262@remove-dups (lambda (g4409@ls) (if (null? g4409@ls) '() (if (memq (car g4409@ls) (cdr g4409@ls)) (g4262@remove-dups (cdr g4409@ls)) (cons (car g4409@ls) (g4262@remove-dups (cdr g4409@ls))))))) (set! g4264@parse-library-name (lambda (g4321@spec) ((lambda (g4324@subversion? g4326@subversion-pred g4328@version-pred) (begin (set! g4324@subversion? (lambda (g4405@x) ((lambda (g4407@x) (and (integer? g4407@x) (exact? g4407@x) (>= g4407@x '0))) (g2fb8@syntax->datum g4405@x)))) (set! g4326@subversion-pred (lambda (g43a5@x*) ((lambda (g43a7@t) ((lambda (g43a9@ls/false) (if (and g43a9@ls/false (apply (lambda (g43ab@n) (g4324@subversion? g43ab@n)) g43a9@ls/false)) (apply (lambda (g43ad@n) (lambda (g43af@x) (= g43af@x (g2fb8@syntax->datum g43ad@n)))) g43a9@ls/false) ((lambda (g43b1@t) ((lambda (g43b3@ls/false) (if (and g43b3@ls/false (apply (lambda (g43b5@p? g43b6@sub*) (eq? (g2fb8@syntax->datum g43b5@p?) 'and)) g43b3@ls/false)) (apply (lambda (g43b9@p? g43ba@sub*) ((lambda (g43bd@p*) (lambda (g43bf@x) (for-all (lambda (g43c1@p) (g43c1@p g43bf@x)) g43bd@p*))) (map g4326@subversion-pred g43ba@sub*))) g43b3@ls/false) ((lambda (g43c3@t) ((lambda (g43c5@ls/false) (if (and g43c5@ls/false (apply (lambda (g43c7@p? g43c8@sub*) (eq? (g2fb8@syntax->datum g43c7@p?) 'or)) g43c5@ls/false)) (apply (lambda (g43cb@p? g43cc@sub*) ((lambda (g43cf@p*) (lambda (g43d1@x) (exists (lambda (g43d3@p) (g43d3@p g43d1@x)) g43cf@p*))) (map g4326@subversion-pred g43cc@sub*))) g43c5@ls/false) ((lambda (g43d5@t) ((lambda (g43d7@ls/false) (if (and g43d7@ls/false (apply (lambda (g43d9@p? g43da@sub) (eq? (g2fb8@syntax->datum g43d9@p?) 'not)) g43d7@ls/false)) (apply (lambda (g43dd@p? g43de@sub) ((lambda (g43e1@p) (lambda (g43e3@x) (not (g43e1@p g43e3@x)))) (g4326@subversion-pred g43de@sub))) g43d7@ls/false) ((lambda (g43e5@t) ((lambda (g43e7@ls/false) (if (and g43e7@ls/false (apply (lambda (g43e9@p? g43ea@n) (and (eq? (g2fb8@syntax->datum g43e9@p?) '<=) (g4324@subversion? g43ea@n))) g43e7@ls/false)) (apply (lambda (g43ed@p? g43ee@n) (lambda (g43f1@x) (<= g43f1@x (g2fb8@syntax->datum g43ee@n)))) g43e7@ls/false) ((lambda (g43f3@t) ((lambda (g43f5@ls/false) (if (and g43f5@ls/false (apply (lambda (g43f7@p? g43f8@n) (and (eq? (g2fb8@syntax->datum g43f7@p?) '>=) (g4324@subversion? g43f8@n))) g43f5@ls/false)) (apply (lambda (g43fb@p? g43fc@n) (lambda (g43ff@x) (>= g43ff@x (g2fb8@syntax->datum g43fc@n)))) g43f5@ls/false) ((lambda (g4401@t) ((lambda (g4403@ls/false) (if g4403@ls/false (apply (lambda () (g2fb2@syntax-violation 'import '"invalid sub-version spec" g4321@spec g43a5@x*)) g4403@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4401@t))) (g2ec9@syntax-dispatch g4401@t '_))) g43f3@t))) (g2ec9@syntax-dispatch g43f3@t '(any any)))) g43e5@t))) (g2ec9@syntax-dispatch g43e5@t '(any any)))) g43d5@t))) (g2ec9@syntax-dispatch g43d5@t '(any any)))) g43c3@t))) (g2ec9@syntax-dispatch g43c3@t '(any . each-any)))) g43b1@t))) (g2ec9@syntax-dispatch g43b1@t '(any . each-any)))) g43a7@t))) (g2ec9@syntax-dispatch g43a7@t 'any))) g43a5@x*))) (set! g4328@version-pred (lambda (g4355@x*) ((lambda (g4357@t) ((lambda (g4359@ls/false) (if g4359@ls/false (apply (lambda () (lambda (g435b@x) '#t)) g4359@ls/false) ((lambda (g435d@t) ((lambda (g435f@ls/false) (if (and g435f@ls/false (apply (lambda (g4361@c g4362@ver*) (eq? (g2fb8@syntax->datum g4361@c) 'and)) g435f@ls/false)) (apply (lambda (g4365@c g4366@ver*) ((lambda (g4369@p*) (lambda (g436b@x) (for-all (lambda (g436d@p) (g436d@p g436b@x)) g4369@p*))) (map g4328@version-pred g4366@ver*))) g435f@ls/false) ((lambda (g436f@t) ((lambda (g4371@ls/false) (if (and g4371@ls/false (apply (lambda (g4373@c g4374@ver*) (eq? (g2fb8@syntax->datum g4373@c) 'or)) g4371@ls/false)) (apply (lambda (g4377@c g4378@ver*) ((lambda (g437b@p*) (lambda (g437d@x) (exists (lambda (g437f@p) (g437f@p g437d@x)) g437b@p*))) (map g4328@version-pred g4378@ver*))) g4371@ls/false) ((lambda (g4381@t) ((lambda (g4383@ls/false) (if (and g4383@ls/false (apply (lambda (g4385@c g4386@ver) (eq? (g2fb8@syntax->datum g4385@c) 'not)) g4383@ls/false)) (apply (lambda (g4389@c g438a@ver) ((lambda (g438d@p) (lambda (g438f@x) (not (g438d@p g438f@x)))) (g4328@version-pred g438a@ver))) g4383@ls/false) ((lambda (g4391@t) ((lambda (g4393@ls/false) (if g4393@ls/false (apply (lambda (g4395@sub*) ((lambda (g4397@p*) (lambda (g4399@x) ((letrec ((g439b@f (lambda (g439d@p* g439e@x) (if (null? g439d@p*) '#t (if (null? g439e@x) '#f (and ((car g439d@p*) (car g439e@x)) (g439b@f (cdr g439d@p*) (cdr g439e@x)))))))) g439b@f) g4397@p* g4399@x))) (map g4326@subversion-pred g4395@sub*))) g4393@ls/false) ((lambda (g43a1@t) ((lambda (g43a3@ls/false) (if g43a3@ls/false (apply (lambda () (g2fb2@syntax-violation 'import '"invalid version spec" g4321@spec g4355@x*)) g43a3@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g43a1@t))) (g2ec9@syntax-dispatch g43a1@t '_))) g4391@t))) (g2ec9@syntax-dispatch g4391@t 'each-any))) g4381@t))) (g2ec9@syntax-dispatch g4381@t '(any any)))) g436f@t))) (g2ec9@syntax-dispatch g436f@t '(any . each-any)))) g435d@t))) (g2ec9@syntax-dispatch g435d@t '(any . each-any)))) g4357@t))) (g2ec9@syntax-dispatch g4357@t '()))) g4355@x*))) ((letrec ((g4329@f (lambda (g432b@x) ((lambda (g432d@t) ((lambda (g432f@ls/false) (if g432f@ls/false (apply (lambda (g4331@version-spec*) (values '() (g4328@version-pred g4331@version-spec*))) g432f@ls/false) ((lambda (g4333@t) ((lambda (g4335@ls/false) (if (and g4335@ls/false (apply (lambda (g4337@x g4338@x*) (g4256@idsyn? g4337@x)) g4335@ls/false)) (apply (lambda (g433b@x g433c@x*) (call-with-values (lambda () (g4329@f g433c@x*)) (lambda (g4343@g4340 g4344@g4342) ((lambda (g4347@pred g4348@name) (values (cons (g2fb8@syntax->datum g433b@x) g4348@name) g4347@pred)) g4344@g4342 g4343@g4340)))) g4335@ls/false) ((lambda (g434b@t) ((lambda (g434d@ls/false) (if g434d@ls/false (apply (lambda () (values '() (lambda (g434f@x) '#t))) g434d@ls/false) ((lambda (g4351@t) ((lambda (g4353@ls/false) (if g4353@ls/false (apply (lambda () (g2fb2@syntax-violation '#f '"invalid import spec" g4321@spec)) g4353@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4351@t))) (g2ec9@syntax-dispatch g4351@t '_))) g434b@t))) (g2ec9@syntax-dispatch g434b@t '()))) g4333@t))) (g2ec9@syntax-dispatch g4333@t '(any . any)))) g432d@t))) (g2ec9@syntax-dispatch g432d@t '(each-any)))) g432b@x)))) g4329@f) g4321@spec))) '#f '#f '#f))) (set! g4266@import-library (lambda (g4311@spec*) (call-with-values (lambda () (g4264@parse-library-name g4311@spec*)) (lambda (g4317@g4314 g4318@g4316) ((lambda (g431b@pred g431c@name) (begin (if (null? g431c@name) (g2fb2@syntax-violation 'import '"empty library name" g4311@spec*) (void)) ((lambda (g431f@lib) (begin (if (not g431f@lib) (g2fb2@syntax-violation 'import '"cannot find library with required name" g431c@name) (void)) (if (not (g431b@pred (g2ab3@g2925@library-version g431f@lib))) (g2fb2@syntax-violation 'import '"library does not satisfy version specification" g4311@spec* g431f@lib) (void)) ((g2f38@imp-collector) g431f@lib) (g2ab7@g292d@library-subst g431f@lib))) (g2adb@g2975@find-library-by-name g431c@name)))) g4318@g4316 g4317@g4314))))) (set! g4268@get-import (lambda (g4283@spec) ((lambda (g4285@t) ((lambda (g4287@ls/false) (if (and g4287@ls/false (apply (lambda (g4289@x g428a@x*) (not (memq (g2fb8@syntax->datum g4289@x) '(for rename except only prefix library)))) g4287@ls/false)) (apply (lambda (g428d@x g428e@x*) (g4266@import-library (cons g428d@x g428e@x*))) g4287@ls/false) ((lambda (g4291@t) ((lambda (g4293@ls/false) (if (and g4293@ls/false (apply (lambda (g4295@rename g4296@isp g4297@old* g4298@new*) (and (eq? (g2fb8@syntax->datum g4295@rename) 'rename) (for-all g4256@idsyn? g4297@old*) (for-all g4256@idsyn? g4298@new*))) g4293@ls/false)) (apply (lambda (g429d@rename g429e@isp g429f@old* g42a0@new*) ((lambda (g42a5@subst g42a6@old* g42a7@new*) ((lambda (g42ab@old-label*) ((lambda (g42ad@subst) (g425a@merge-substs (map cons g42a7@new* g42ab@old-label*) g42ad@subst)) (g4260@rem* g42a6@old* g42a5@subst))) (g425e@find* g42a6@old* g42a5@subst))) (g4268@get-import g429e@isp) (map g2fb8@syntax->datum g429f@old*) (map g2fb8@syntax->datum g42a0@new*))) g4293@ls/false) ((lambda (g42af@t) ((lambda (g42b1@ls/false) (if (and g42b1@ls/false (apply (lambda (g42b3@except g42b4@isp g42b5@sym*) (and (eq? (g2fb8@syntax->datum g42b3@except) 'except) (for-all g4256@idsyn? g42b5@sym*))) g42b1@ls/false)) (apply (lambda (g42b9@except g42ba@isp g42bb@sym*) ((lambda (g42bf@subst) (g4260@rem* (map g2fb8@syntax->datum g42bb@sym*) g42bf@subst)) (g4268@get-import g42ba@isp))) g42b1@ls/false) ((lambda (g42c1@t) ((lambda (g42c3@ls/false) (if (and g42c3@ls/false (apply (lambda (g42c5@only g42c6@isp g42c7@sym*) (and (eq? (g2fb8@syntax->datum g42c5@only) 'only) (for-all g4256@idsyn? g42c7@sym*))) g42c3@ls/false)) (apply (lambda (g42cb@only g42cc@isp g42cd@sym*) ((lambda (g42d1@subst g42d2@sym*) ((lambda (g42d5@sym*) ((lambda (g42d7@lab*) (map cons g42d5@sym* g42d7@lab*)) (g425e@find* g42d5@sym* g42d1@subst))) (g4262@remove-dups g42d2@sym*))) (g4268@get-import g42cc@isp) (map g2fb8@syntax->datum g42cd@sym*))) g42c3@ls/false) ((lambda (g42d9@t) ((lambda (g42db@ls/false) (if (and g42db@ls/false (apply (lambda (g42dd@prefix g42de@isp g42df@p) (and (eq? (g2fb8@syntax->datum g42dd@prefix) 'prefix) (g4256@idsyn? g42df@p))) g42db@ls/false)) (apply (lambda (g42e3@prefix g42e4@isp g42e5@p) ((lambda (g42e9@subst g42ea@prefix) (map (lambda (g42ed@x) (cons (string->symbol (string-append g42ea@prefix (symbol->string (car g42ed@x)))) (cdr g42ed@x))) g42e9@subst)) (g4268@get-import g42e4@isp) (symbol->string (g2fb8@syntax->datum g42e5@p)))) g42db@ls/false) ((lambda (g42ef@t) ((lambda (g42f1@ls/false) (if (and g42f1@ls/false (apply (lambda (g42f3@library g42f4@spec*) (eq? (g2fb8@syntax->datum g42f3@library) 'library)) g42f1@ls/false)) (apply (lambda (g42f7@library g42f8@spec*) (g4266@import-library g42f8@spec*)) g42f1@ls/false) ((lambda (g42fb@t) ((lambda (g42fd@ls/false) (if (and g42fd@ls/false (apply (lambda (g42ff@for g4300@isp g4301@rest) (eq? (g2fb8@syntax->datum g42ff@for) 'for)) g42fd@ls/false)) (apply (lambda (g4305@for g4306@isp g4307@rest) (g4268@get-import g4306@isp)) g42fd@ls/false) ((lambda (g430b@t) ((lambda (g430d@ls/false) (if g430d@ls/false (apply (lambda (g430f@spec) (g2fb2@syntax-violation 'import '"invalid import spec" g430f@spec)) g430d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g430b@t))) (g2ec9@syntax-dispatch g430b@t 'any))) g42fb@t))) (g2ec9@syntax-dispatch g42fb@t '(any any . any)))) g42ef@t))) (g2ec9@syntax-dispatch g42ef@t '(any each-any)))) g42d9@t))) (g2ec9@syntax-dispatch g42d9@t '(any any any)))) g42c1@t))) (g2ec9@syntax-dispatch g42c1@t '(any any . each-any)))) g42af@t))) (g2ec9@syntax-dispatch g42af@t '(any any . each-any)))) g4291@t))) (g2ec9@syntax-dispatch g4291@t '(any any . #(each (any any)))))) g4285@t))) (g2ec9@syntax-dispatch g4285@t '(any . each-any)))) g4283@spec))) (set! g426a@add-imports! (lambda (g4273@imp g4274@h) ((lambda (g4277@subst) (for-each (lambda (g4279@x) ((lambda (g427b@name g427c@label) ((lambda (g427f@t) (if g427f@t ((lambda (g4281@l) (if (not (eq? g4281@l g427c@label)) (g4258@dup-error g427b@name) (void))) g427f@t) (hashtable-set! g4274@h g427b@name g427c@label))) (hashtable-ref g4274@h g427b@name '#f))) (car g4279@x) (cdr g4279@x))) g4277@subst)) (g4268@get-import g4273@imp)))) (lambda (g426b@imp*) ((letrec ((g426d@f (lambda (g426f@imp* g4270@h) (if (null? g426f@imp*) (hashtable-entries g4270@h) (begin (g426a@add-imports! (car g426f@imp*) g4270@h) (g426d@f (cdr g426f@imp*) g4270@h)))))) g426d@f) g426b@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2f30@make-top-rib (lambda (g4461@names g4462@labels) ((lambda (g4465@rib) (begin (vector-for-each (lambda (g4467@name g4468@label) (begin (if (not (symbol? g4467@name)) (error 'make-top-rib '"BUG: not a symbol" g4467@name) (void)) (g2c71@extend-rib/nc! g4465@rib (g2c88@make-stx g4467@name g2c3a@top-mark* '() '()) g4468@label))) g4461@names g4462@labels) g4465@rib)) (g2c6d@make-empty-rib)))) (set! g2f32@make-collector (lambda () ((lambda (g446b@ls) (lambda g446f ((lambda (g4470) (if (= g4470 '0) (apply (lambda () g446b@ls) g446f) (if (= g4470 '1) (apply (lambda (g446d@x) (set! g446b@ls (g2c33@set-cons g446d@x g446b@ls))) g446f) (error 'apply '"invalid arg count")))) (length g446f)))) '()))) (set! g2f34@inv-collector (g2868@g2792@make-parameter (lambda g4471@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (g4473@x) (begin (if (not (procedure? g4473@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" g4473@x) (void)) g4473@x)))) (set! g2f36@vis-collector (g2868@g2792@make-parameter (lambda g4475@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (g4477@x) (begin (if (not (procedure? g4477@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" g4477@x) (void)) g4477@x)))) (set! g2f38@imp-collector (g2868@g2792@make-parameter (lambda g4479@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (g447b@x) (begin (if (not (procedure? g447b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" g447b@x) (void)) g447b@x)))) (set! g2f3a@chi-library-internal (lambda (g447d@e* g447e@rib g447f@top?) (call-with-values (lambda () (g2f24@chi-body* g447d@e* '() '() '() '() '() '() '() g447e@rib g447f@top?)) (lambda (g4493@g4484 g4494@g4486 g4495@g4488 g4496@g448a g4497@g448c g4498@g448e g4499@g4490 g449a@g4492) ((lambda (g44a3@exp* g44a4@_kwd* g44a5@mod** g44a6@rhs* g44a7@lex* g44a8@mr g44a9@r g44aa@e*) (values (append (apply append (reverse g44a5@mod**)) g44aa@e*) g44a9@r g44a8@mr (reverse g44a7@lex*) (reverse g44a6@rhs*) g44a3@exp*)) g449a@g4492 g4499@g4490 g4498@g448e g4497@g448c g4496@g448a g4495@g4488 g4494@g4486 g4493@g4484))))) (set! g2f3c@chi-interaction-expr (lambda (g44b3@e g44b4@rib g44b5@r) (call-with-values (lambda () (g2f24@chi-body* (list g44b3@e) g44b5@r g44b5@r '() '() '() '() '() g44b4@rib '#t)) (lambda (g44c9@g44ba g44ca@g44bc g44cb@g44be g44cc@g44c0 g44cd@g44c2 g44ce@g44c4 g44cf@g44c6 g44d0@g44c8) ((lambda (g44d9@_exp* g44da@_kwd* g44db@mod** g44dc@rhs* g44dd@lex* g44de@mr g44df@r g44e0@e*) ((lambda (g44e9@e*) ((lambda (g44eb@e) (values g44eb@e g44df@r)) (if (null? g44e9@e*) (g2c1e@g2b8e@build-void) (if (null? (cdr g44e9@e*)) (car g44e9@e*) (g2c1d@g2b8c@build-sequence '#f g44e9@e*))))) (g2ef9@expand-interaction-rhs*/init* (reverse g44dd@lex*) (reverse g44dc@rhs*) (append (apply append (reverse g44db@mod**)) g44e0@e*) g44df@r g44de@mr))) g44d0@g44c8 g44cf@g44c6 g44ce@g44c4 g44cd@g44c2 g44cc@g44c0 g44cb@g44be g44ca@g44bc g44c9@g44ba))))) (set! g2f3e@library-body-expander (lambda (g44ed@name g44ee@main-exp* g44ef@imp* g44f0@b* g44f1@top?) ((lambda (g44f8@itc) (begin (set! g44f8@itc (g2f32@make-collector)) ((lambda (g4501@g44fa g4502@g44fc g4503@g44fe g4504@g4500) ((lambda (g4509@swap) (dynamic-wind g4509@swap (lambda () (call-with-values (lambda () (g2f2e@parse-import-spec* g44ef@imp*)) (lambda (g450f@g450c g4510@g450e) ((lambda (g4513@subst-labels g4514@subst-names) ((lambda (g4517@rib) ((lambda (g451a@wrap) (begin (set! g451a@wrap (lambda (g4595@x) (g2c88@make-stx g4595@x g2c3a@top-mark* (list g4517@rib) '()))) ((lambda (g451b@b* g451c@main-exp* g451d@rtc g451e@vtc) ((lambda (g452b@g4524 g452c@g4526 g452d@g4528 g452e@g452a) ((lambda (g4533@swap) (dynamic-wind g4533@swap (lambda () (call-with-values (lambda () (g2f3a@chi-library-internal g451b@b* g4517@rib g44f1@top?)) (lambda (g4541@g4536 g4542@g4538 g4543@g453a g4544@g453c g4545@g453e g4546@g4540) ((lambda (g454d@internal-exp* g454e@rhs* g454f@lex* g4550@mr g4551@r g4552@init*) (call-with-values (lambda () (g2f28@parse-exports (append g451c@main-exp* g454d@internal-exp*))) (lambda (g455d@g455a g455e@g455c) ((lambda (g4561@exp-id* g4562@exp-name*) (begin (g2c75@seal-rib! g4517@rib) ((lambda (g4565@init*) ((lambda (g4567@rhs*) ((lambda () (begin (g2c77@unseal-rib! g4517@rib) ((lambda (g4569@loc* g456a@export-subst) ((lambda (g456e@errstr) (begin (set! g456e@errstr '"attempt to export mutated variable") (call-with-values (lambda () (g2f9e@make-export-env/macros g454f@lex* g4569@loc* g4551@r)) (lambda (g4575@g4570 g4576@g4572 g4577@g4574) ((lambda (g457b@macro* g457c@global* g457d@export-env) (begin (for-each (lambda (g4581@s) ((lambda (g4583@name g4584@label) ((lambda (g4587@p) (if g4587@p ((lambda (g4589@b) ((lambda (g458b@type) (if (eq? g458b@type 'mutable) (g2fb2@syntax-violation 'export g456e@errstr g4583@name) (void))) (car g4589@b))) (cdr g4587@p)) (void))) (assq g4584@label g457d@export-env))) (car g4581@s) (cdr g4581@s))) g456a@export-subst) ((lambda (g458d@invoke-body g458e@invoke-definitions) (values (g44f8@itc) (g451d@rtc) (g451e@vtc) (g2c1d@g2b8c@build-sequence '#f (append g458e@invoke-definitions (list g458d@invoke-body))) g457b@macro* g456a@export-subst g457d@export-env)) (g2c20@g2b92@build-letrec* '#f g454f@lex* g4567@rhs* (g2f9a@build-exports g457c@global* g4565@init*)) (map g2c19@g2ae9@build-global-define (map cdr g457c@global*))))) g4577@g4574 g4576@g4572 g4575@g4570))))) '#f)) (map g2c40@gen-global g454f@lex*) (g2f9c@make-export-subst g4562@exp-name* g4561@exp-id*)))))) (g2efb@chi-rhs* g454e@rhs* g4551@r g4550@mr))) (g2ee7@chi-expr* g4552@init* g4551@r g4550@mr)))) g455e@g455c g455d@g455a)))) g4546@g4540 g4545@g453e g4544@g453c g4543@g453a g4542@g4538 g4541@g4536)))) g4533@swap)) (lambda () (begin ((lambda (g4591@t) (begin (g452b@g4524 g452d@g4528) (set! g452d@g4528 g4591@t))) (g452b@g4524)) ((lambda (g4593@t) (begin (g452c@g4526 g452e@g452a) (set! g452e@g452a g4593@t))) (g452c@g4526)))))) g2f34@inv-collector g2f36@vis-collector g451d@rtc g451e@vtc)) (map g451a@wrap g44f0@b*) (map g451a@wrap g44ee@main-exp*) (g2f32@make-collector) (g2f32@make-collector)))) '#f)) (g2f30@make-top-rib g4514@subst-names g4513@subst-labels))) g4510@g450e g450f@g450c)))) g4509@swap)) (lambda () (begin ((lambda (g4597@t) (begin (g4501@g44fa g4503@g44fe) (set! g4503@g44fe g4597@t))) (g4501@g44fa)) ((lambda (g4599@t) (begin (g4502@g44fc g4504@g4500) (set! g4504@g4500 g4599@t))) (g4502@g44fc)))))) g2f38@imp-collector g2fc0@top-level-context g44f8@itc '#f))) '#f))) (set! g2f40@core-library-expander (lambda (g459b@e g459c@verify-name) (call-with-values (lambda () (g2f2c@parse-library g459b@e)) (lambda (g45a7@g45a0 g45a8@g45a2 g45a9@g45a4 g45aa@g45a6) ((lambda (g45af@b* g45b0@imp* g45b1@exp* g45b2@name*) (call-with-values (lambda () (g2f2a@parse-library-name g45b2@name*)) (lambda (g45bb@g45b8 g45bc@g45ba) ((lambda (g45bf@ver g45c0@name) (begin (g459c@verify-name g45c0@name) (call-with-values (lambda () (g2f3e@library-body-expander g45c0@name g45b1@exp* g45b0@imp* g45af@b* '#f)) (lambda (g45d1@g45c4 g45d2@g45c6 g45d3@g45c8 g45d4@g45ca g45d5@g45cc g45d6@g45ce g45d7@g45d0) ((lambda (g45df@export-env g45e0@export-subst g45e1@visit-code g45e2@invoke-code g45e3@visit-req* g45e4@invoke-req* g45e5@imp*) (values g45c0@name g45bf@ver g45e5@imp* g45e4@invoke-req* g45e3@visit-req* g45e2@invoke-code g45e1@visit-code g45e0@export-subst g45df@export-env)) g45d7@g45d0 g45d6@g45ce g45d5@g45cc g45d4@g45ca g45d3@g45c8 g45d2@g45c6 g45d1@g45c4))))) g45bc@g45ba g45bb@g45b8)))) g45aa@g45a6 g45a9@g45a4 g45a8@g45a2 g45a7@g45a0))))) (set! g2f42@parse-top-level-program (lambda (g45ed@e*) ((lambda (g45ef@t) ((lambda (g45f1@ls/false) (if (and g45f1@ls/false (apply (lambda (g45f3@import g45f4@imp* g45f5@b*) (eq? (g2fb8@syntax->datum g45f3@import) 'import)) g45f1@ls/false)) (apply (lambda (g45f9@import g45fa@imp* g45fb@b*) (values g45fa@imp* g45fb@b*)) g45f1@ls/false) ((lambda (g45ff@t) ((lambda (g4601@ls/false) (if (and g4601@ls/false (apply (lambda (g4603@import g4604@x g4605@y) (eq? (g2fb8@syntax->datum g4603@import) 'import)) g4601@ls/false)) (apply (lambda (g4609@import g460a@x g460b@y) (g2fb2@syntax-violation 'expander '"invalid syntax of top-level program" (g2cb8@syntax-car g45ed@e*))) g4601@ls/false) ((lambda (g460f@t) ((lambda (g4611@ls/false) (if g4611@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) g4611@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g460f@t))) (g2ec9@syntax-dispatch g460f@t '_))) g45ff@t))) (g2ec9@syntax-dispatch g45ff@t '((any . any) . any)))) g45ef@t))) (g2ec9@syntax-dispatch g45ef@t '((any . each-any) . each-any)))) g45ed@e*))) (set! g2f44@top-level-expander (lambda (g4613@e*) (call-with-values (lambda () (g2f42@parse-top-level-program g4613@e*)) (lambda (g4619@g4616 g461a@g4618) ((lambda (g461d@b* g461e@imp*) (call-with-values (lambda () (g2f3e@library-body-expander '() '() g461e@imp* g461d@b* '#t)) (lambda (g462f@g4622 g4630@g4624 g4631@g4626 g4632@g4628 g4633@g462a g4634@g462c g4635@g462e) ((lambda (g463d@export-env g463e@export-subst g463f@visit-code g4640@invoke-code g4641@visit-req* g4642@invoke-req* g4643@imp*) (values g4642@invoke-req* g4640@invoke-code)) g4635@g462e g4634@g462c g4633@g462a g4632@g4628 g4631@g4626 g4630@g4624 g462f@g4622)))) g461a@g4618 g4619@g4616))))) (set! g2f4a@g2f45 (make-record-type-descriptor 'env '#f 'g2f48 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! g2f4c@g2f47 '#f) (set! g2f4e@g2f46 (make-record-constructor-descriptor g2f4a@g2f45 '#f g2f4c@g2f47)) (set! g2f51@env? (record-predicate g2f4a@g2f45)) (set! g2f53@make-env (record-constructor g2f4e@g2f46)) (set! g2f55@env-names (record-accessor g2f4a@g2f45 '0)) (set! g2f57@env-labels (record-accessor g2f4a@g2f45 '1)) (set! g2f59@env-itc (record-accessor g2f4a@g2f45 '2)) (set! g2f5b@set-env-names! (record-mutator g2f4a@g2f45 '0)) (set! g2f5d@set-env-labels! (record-mutator g2f4a@g2f45 '1)) (set! g2f5f@set-env-itc! (record-mutator g2f4a@g2f45 '2)) (set! g2f61@rp (g2865@g278c@make-record-printer 'env (lambda (g464b@x g464c@p g464d@wr) (display '"#<environment>" g464c@p)))) (set! g2f67@g2f62 (make-record-type-descriptor 'interaction-env '#f 'g2f65 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! g2f69@g2f64 '#f) (set! g2f6b@g2f63 (make-record-constructor-descriptor g2f67@g2f62 '#f g2f69@g2f64)) (set! g2f6e@interaction-env? (record-predicate g2f67@g2f62)) (set! g2f70@make-interaction-env (record-constructor g2f6b@g2f63)) (set! g2f72@interaction-env-rib (record-accessor g2f67@g2f62 '0)) (set! g2f74@interaction-env-r (record-accessor g2f67@g2f62 '1)) (set! g2f76@interaction-env-locs (record-accessor g2f67@g2f62 '2)) (set! g2f78@set-interaction-env-rib! (record-mutator g2f67@g2f62 '0)) (set! g2f7a@set-interaction-env-r! (record-mutator g2f67@g2f62 '1)) (set! g2f7c@set-interaction-env-locs! (record-mutator g2f67@g2f62 '2)) (set! g2f7e@rp (g2865@g278c@make-record-printer 'interaction-env (lambda (g4651@x g4652@p g4653@wr) (display '"#<environment>" g4652@p)))) (set! g2f80@interaction-environment-symbols (lambda () (g2f88@environment-symbols (g2fbe@interaction-environment)))) (set! g2f82@environment-bindings (lambda (g4657@e) (vector->list (vector-map (lambda (g4659@name g465a@label) (g2f84@parse-binding (cons g4659@name (g2ae1@g2981@imported-label->binding g465a@label)))) (g2f55@env-names g4657@e) (g2f57@env-labels g4657@e))))) (set! g2f84@parse-binding (lambda (g465d@b) (cons (car g465d@b) ((lambda (g465f@t) (if (memv g465f@t '(core-prim global)) 'procedure (if (memv g465f@t '(core-macro macro global-macro)) 'syntax (if (memv g465f@t '($core-rtd)) 'record (if (eq? (car g465d@b) (cadr g465d@b)) 'syntax 'unknown))))) (cadr g465d@b))))) (set! g2f86@environment? (lambda (g4661@x) (or (g2f51@env? g4661@x) (g2f6e@interaction-env? g4661@x)))) (set! g2f88@environment-symbols (lambda (g4663@x) (if (g2f51@env? g4663@x) (vector->list (g2f55@env-names g4663@x)) (if (g2f6e@interaction-env? g4663@x) (map values (g2c59@rib-sym* (g2f72@interaction-env-rib g4663@x))) (assertion-violation 'environment-symbols '"not an environment" g4663@x))))) (set! g2f8a@environment (lambda g4665@imp* ((lambda (g4667@itc) ((lambda (g466d@g466a g466e@g466c) ((lambda (g4671@swap) (dynamic-wind g4671@swap (lambda () (call-with-values (lambda () (g2f2e@parse-import-spec* g4665@imp*)) (lambda (g4677@g4674 g4678@g4676) ((lambda (g467b@subst-labels g467c@subst-names) (g2f53@make-env g467c@subst-names g467b@subst-labels g4667@itc)) g4678@g4676 g4677@g4674)))) g4671@swap)) (lambda () ((lambda (g467f@t) (begin (g466d@g466a g466e@g466c) (set! g466e@g466c g467f@t))) (g466d@g466a))))) g2f38@imp-collector g4667@itc)) (g2f32@make-collector)))) (set! g2f8c@null-environment (lambda (g4681@n) (begin (if (not (eqv? g4681@n '5)) (assertion-violation 'null-environment '"not 5" g4681@n) (void)) (g2f8a@environment '(psyntax null-environment-5))))) (set! g2f8e@scheme-report-environment (lambda (g4683@n) (begin (if (not (eqv? g4683@n '5)) (assertion-violation 'scheme-report-environment '"not 5" g4683@n) (void)) (g2f8a@environment '(psyntax scheme-report-environment-5))))) (set! g2f90@expand (lambda (g4685@x g4686@env) (if (g2f51@env? g4686@env) ((lambda (g4689@rib) ((lambda (g468b@x g468c@itc g468d@rtc g468e@vtc) ((lambda (g4693@x) (begin (g2c75@seal-rib! g4689@rib) (values g4693@x (g468d@rtc)))) ((lambda (g46a5@g4696 g46a6@g4698 g46a7@g469a g46a8@g469c g46a9@g469e g46aa@g46a0 g46ab@g46a2 g46ac@g46a4) ((lambda (g46b5@swap) (dynamic-wind g46b5@swap (lambda () (g2eeb@chi-expr g468b@x '() '())) g46b5@swap)) (lambda () (begin ((lambda (g46b7@t) (begin (g46a5@g4696 g46a9@g469e) (set! g46a9@g469e g46b7@t))) (g46a5@g4696)) ((lambda (g46b9@t) (begin (g46a6@g4698 g46aa@g46a0) (set! g46aa@g46a0 g46b9@t))) (g46a6@g4698)) ((lambda (g46bb@t) (begin (g46a7@g469a g46ab@g46a2) (set! g46ab@g46a2 g46bb@t))) (g46a7@g469a)) ((lambda (g46bd@t) (begin (g46a8@g469c g46ac@g46a4) (set! g46ac@g46a4 g46bd@t))) (g46a8@g469c)))))) g2fc0@top-level-context g2f34@inv-collector g2f36@vis-collector g2f38@imp-collector '#f g468d@rtc g468e@vtc g468c@itc))) (g2c88@make-stx g4685@x g2c3a@top-mark* (list g4689@rib) '()) (g2f59@env-itc g4686@env) (g2f32@make-collector) (g2f32@make-collector))) (g2f30@make-top-rib (g2f55@env-names g4686@env) (g2f57@env-labels g4686@env))) (if (g2f6e@interaction-env? g4686@env) ((lambda (g46bf@rib g46c0@r g46c1@rtc) ((lambda (g46c5@x) (call-with-values (lambda () ((lambda (g46db@g46cc g46dc@g46ce g46dd@g46d0 g46de@g46d2 g46df@g46d4 g46e0@g46d6 g46e1@g46d8 g46e2@g46da) ((lambda (g46eb@swap) (dynamic-wind g46eb@swap (lambda () (g2f3c@chi-interaction-expr g46c5@x g46bf@rib g46c0@r)) g46eb@swap)) (lambda () (begin ((lambda (g46ed@t) (begin (g46db@g46cc g46df@g46d4) (set! g46df@g46d4 g46ed@t))) (g46db@g46cc)) ((lambda (g46ef@t) (begin (g46dc@g46ce g46e0@g46d6) (set! g46e0@g46d6 g46ef@t))) (g46dc@g46ce)) ((lambda (g46f1@t) (begin (g46dd@g46d0 g46e1@g46d8) (set! g46e1@g46d8 g46f1@t))) (g46dd@g46d0)) ((lambda (g46f3@t) (begin (g46de@g46d2 g46e2@g46da) (set! g46e2@g46da g46f3@t))) (g46de@g46d2)))))) g2fc0@top-level-context g2f34@inv-collector g2f36@vis-collector g2f38@imp-collector g4686@env g46c1@rtc (g2f32@make-collector) (g2f32@make-collector))) (lambda (g46f5@g46c8 g46f6@g46ca) ((lambda (g46f9@r^ g46fa@e) (begin (g2f7a@set-interaction-env-r! g4686@env g46f9@r^) (values g46fa@e (g46c1@rtc)))) g46f6@g46ca g46f5@g46c8)))) (g2c88@make-stx g4685@x g2c3a@top-mark* (list g46bf@rib) '()))) (g2f72@interaction-env-rib g4686@env) (g2f74@interaction-env-r g4686@env) (g2f32@make-collector)) (assertion-violation 'expand '"not an environment" g4686@env))))) (set! g2f92@eval (lambda (g46fd@x g46fe@env) (begin (if (not (g2f86@environment? g46fe@env)) (error 'eval '"not an environment" g46fe@env) (void)) (call-with-values (lambda () (g2f90@expand g46fd@x g46fe@env)) (lambda (g4705@g4702 g4706@g4704) ((lambda (g4709@invoke-req* g470a@x) (begin (for-each g2ae2@g2983@invoke-library g4709@invoke-req*) (eval-core (g28bc@g2874@expanded->core g470a@x)))) g4706@g4704 g4705@g4702)))))) (set! g2f94@library-expander (lambda g477b ((lambda (g477c) (if (= g477c '3) (apply (lambda (g470d@x g470e@filename g470f@verify-name) ((lambda (g4714@build-visit-code g4716@visit!) (begin (set! g4714@build-visit-code (lambda (g4769@macro*) (if (null? g4769@macro*) (g2c1e@g2b8e@build-void) (g2c1d@g2b8c@build-sequence '#f (map (lambda (g476b@x) ((lambda (g476d@loc g476e@src) (list 'set! g476d@loc g476e@src)) (car g476b@x) (cddr g476b@x))) g4769@macro*))))) (set! g4716@visit! (lambda (g4761@macro*) (for-each (lambda (g4763@x) ((lambda (g4765@loc g4766@proc) (set-symbol-value! g4765@loc g4766@proc)) (car g4763@x) (cadr g4763@x))) g4761@macro*))) (call-with-values (lambda () (g2f40@core-library-expander g470d@x g470f@verify-name)) (lambda (g4729@g4718 g472a@g471a g472b@g471c g472c@g471e g472d@g4720 g472e@g4722 g472f@g4724 g4730@g4726 g4731@g4728) ((lambda (g473b@export-env g473c@export-subst g473d@macro* g473e@invoke-code g473f@vis* g4740@inv* g4741@imp* g4742@ver g4743@name) ((lambda (g474d@id g474e@name g474f@ver g4750@imp* g4751@vis* g4752@inv* g4753@visit-proc g4754@invoke-proc g4755@visit-code g4756@invoke-code) (begin (g2ae0@g297f@install-library g474d@id g474e@name g474f@ver g4750@imp* g4751@vis* g4752@inv* g473c@export-subst g473b@export-env g4753@visit-proc g4754@invoke-proc g4755@visit-code g4756@invoke-code '#t g470e@filename) (values g474d@id g474e@name g474f@ver g4750@imp* g4751@vis* g4752@inv* g4756@invoke-code g4755@visit-code g473c@export-subst g473b@export-env))) (gensym) g4743@name g4742@ver (map g2ae6@g298b@library-spec g4741@imp*) (map g2ae6@g298b@library-spec g473f@vis*) (map g2ae6@g298b@library-spec g4740@inv*) (lambda () (g4716@visit! g473d@macro*)) (lambda () (eval-core (g28bc@g2874@expanded->core g473e@invoke-code))) (g4714@build-visit-code g473d@macro*) g473e@invoke-code)) g4731@g4728 g4730@g4726 g472f@g4724 g472e@g4722 g472d@g4720 g472c@g471e g472b@g471c g472a@g471a g4729@g4718))))) '#f '#f)) g477b) (if (= g477c '2) (apply (lambda (g4771@x g4772@filename) (g2f94@library-expander g4771@x g4772@filename (lambda (g4775@x) (values)))) g477b) (if (= g477c '1) (apply (lambda (g4777@x) (g2f94@library-expander g4777@x '#f (lambda (g4779@x) (values)))) g477b) (error 'apply '"invalid arg count"))))) (length g477b)))) (set! g2f96@boot-library-expand (lambda (g477d@x) (call-with-values (lambda () (g2f94@library-expander g477d@x)) (lambda (g4793@g4780 g4794@g4782 g4795@g4784 g4796@g4786 g4797@g4788 g4798@g478a g4799@g478c g479a@g478e g479b@g4790 g479c@g4792) ((lambda (g47a7@export-env g47a8@export-subst g47a9@visit-code g47aa@invoke-code g47ab@inv* g47ac@vis* g47ad@imp* g47ae@ver g47af@name g47b0@id) (values g47af@name g47aa@invoke-code g47a8@export-subst g47a7@export-env)) g479c@g4792 g479b@g4790 g479a@g478e g4799@g478c g4798@g478a g4797@g4788 g4796@g4786 g4795@g4784 g4794@g4782 g4793@g4780))))) (set! g2f98@rev-map-append (lambda (g47bb@f g47bc@ls g47bd@ac) (if (null? g47bc@ls) g47bd@ac (g2f98@rev-map-append g47bb@f (cdr g47bc@ls) (cons (g47bb@f (car g47bc@ls)) g47bd@ac))))) (set! g2f9a@build-exports (lambda (g47c1@lex*+loc* g47c2@init*) (g2c1d@g2b8c@build-sequence '#f (cons (g2c1e@g2b8e@build-void) (g2f98@rev-map-append (lambda (g47c5@x) (list 'set! (cdr g47c5@x) (car g47c5@x))) g47c1@lex*+loc* g47c2@init*))))) (set! g2f9c@make-export-subst (lambda (g47c7@name* g47c8@id*) (map (lambda (g47cb@name g47cc@id) ((lambda (g47cf@label) (begin (if (not g47cf@label) (g2fb2@syntax-violation '#f '"cannot export unbound identifier" g47cc@id) (void)) (cons g47cb@name g47cf@label))) (g2cd8@id->label g47cc@id))) g47c7@name* g47c8@id*))) (set! g2f9e@make-export-env/macros (lambda (g47d1@lex* g47d2@loc* g47d3@r) ((lambda (g47d8@lookup) (begin (set! g47d8@lookup (lambda (g47f5@x) ((letrec ((g47f7@f (lambda (g47f9@x g47fa@lex* g47fb@loc*) (if (pair? g47fa@lex*) (if (eq? g47f9@x (car g47fa@lex*)) (car g47fb@loc*) (g47f7@f g47f9@x (cdr g47fa@lex*) (cdr g47fb@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) g47f7@f) g47f5@x g47d1@lex* g47d2@loc*))) ((letrec ((g47d9@f (lambda (g47db@r g47dc@env g47dd@global* g47de@macro*) (if (null? g47db@r) (values g47dc@env g47dd@global* g47de@macro*) ((lambda (g47e3@x) ((lambda (g47e5@label g47e6@b) ((lambda (g47e9@t) (if (memv g47e9@t '(lexical)) ((lambda (g47eb@v) ((lambda (g47ed@loc g47ee@type) (g47d9@f (cdr g47db@r) (cons (cons* g47e5@label g47ee@type g47ed@loc) g47dc@env) (cons (cons (g2e55@lexical-var g47eb@v) g47ed@loc) g47dd@global*) g47de@macro*)) (g47d8@lookup (g2e55@lexical-var g47eb@v)) (if (g2e57@lexical-mutable? g47eb@v) 'mutable 'global))) (g2ce2@binding-value g47e6@b)) (if (memv g47e9@t '(local-macro)) ((lambda (g47f1@loc) (g47d9@f (cdr g47db@r) (cons (cons* g47e5@label 'global-macro g47f1@loc) g47dc@env) g47dd@global* (cons (cons g47f1@loc (g2ce2@binding-value g47e6@b)) g47de@macro*))) (gensym)) (if (memv g47e9@t '(local-macro!)) ((lambda (g47f3@loc) (g47d9@f (cdr g47db@r) (cons (cons* g47e5@label 'global-macro! g47f3@loc) g47dc@env) g47dd@global* (cons (cons g47f3@loc (g2ce2@binding-value g47e6@b)) g47de@macro*))) (gensym)) (if (memv g47e9@t '($rtd $module)) (g47d9@f (cdr g47db@r) (cons g47e3@x g47dc@env) g47dd@global* g47de@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (g2ce0@binding-type g47e6@b) (g2ce2@binding-value g47e6@b))))))) (g2ce0@binding-type g47e6@b))) (car g47e3@x) (cdr g47e3@x))) (car g47db@r)))))) g47d9@f) g47d3@r '() '() '()))) '#f))) (set! g2fa0@generate-temporaries (lambda (g47ff@ls) ((lambda (g4801@t) ((lambda (g4803@ls/false) (if g4803@ls/false (apply (lambda (g4805@ls) (map (lambda (g4807@x) (g2c88@make-stx ((lambda (g4809@x) (if (or (symbol? g4809@x) (string? g4809@x)) (gensym g4809@x) (gensym 't))) (g2fb8@syntax->datum g4807@x)) g2c3a@top-mark* '() '())) g4805@ls)) g4803@ls/false) ((lambda (g480b@t) ((lambda (g480d@ls/false) (if g480d@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) g480d@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g480b@t))) (g2ec9@syntax-dispatch g480b@t '_))) g4801@t))) (g2ec9@syntax-dispatch g4801@t 'each-any))) g47ff@ls))) (set! g2fa2@free-identifier=? (lambda (g480f@x g4810@y) (if (g2cbe@id? g480f@x) (if (g2cbe@id? g4810@y) (g2cc6@free-id=? g480f@x g4810@y) (assertion-violation 'free-identifier=? '"not an identifier" g4810@y)) (assertion-violation 'free-identifier=? '"not an identifier" g480f@x)))) (set! g2fa4@bound-identifier=? (lambda (g4813@x g4814@y) (if (g2cbe@id? g4813@x) (if (g2cbe@id? g4814@y) (g2cc4@bound-id=? g4813@x g4814@y) (assertion-violation 'bound-identifier=? '"not an identifier" g4814@y)) (assertion-violation 'bound-identifier=? '"not an identifier" g4813@x)))) (set! g2fa6@make-source-condition (lambda (g4817@x) ((lambda (g4821@g481c g4823@g481e g4825@g481d g4828@g481b g482a@make-source-condition g482c@g4819 g482e@g481a g4830@source-condition? g4832@source-filename g4834@source-character) (begin (set! g4821@g481c (make-record-type-descriptor '&source-information g4c7f@g49c6@&condition-rtd 'g481f '#f '#f '#((immutable file-name) (immutable character)))) (set! g4823@g481e '#f) (set! g4825@g481d (make-record-constructor-descriptor g4821@g481c g4c80@g49c8@&condition-rcd g4823@g481e)) (set! g4828@g481b (record-predicate g4821@g481c)) (set! g482a@make-source-condition (record-constructor g4825@g481d)) (set! g482c@g4819 (record-accessor g4821@g481c '0)) (set! g482e@g481a (record-accessor g4821@g481c '1)) (set! g4830@source-condition? (condition-predicate g4821@g481c)) (set! g4832@source-filename (condition-accessor g4821@g481c g482c@g4819)) (set! g4834@source-character (condition-accessor g4821@g481c g482e@g481a)) (if (pair? g4817@x) (g482a@make-source-condition (car g4817@x) (cdr g4817@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g2fa8@extract-position-condition (lambda (g4835@x) (g2fa6@make-source-condition (g2faa@expression-position g4835@x)))) (set! g2faa@expression-position (lambda (g4837@x) (and (g2c86@stx? g4837@x) ((lambda (g4839@x) (and (g285d@g277c@annotation? g4839@x) (g285e@g277e@annotation-source g4839@x))) (g2c8a@stx-expr g4837@x))))) (set! g2fac@assertion-error (lambda (g483b@expr g483c@pos) (raise (condition (g4caf@g4a8a@make-assertion-violation) (g4cc1@g4abc@make-who-condition 'assert) (g4c85@g4a1d@make-message-condition '"assertion failed") (g4cb7@g4aa1@make-irritants-condition (list g483b@expr)) (g2fa6@make-source-condition g483c@pos))))) (set! g2fae@syntax-error (lambda (g483f@x . g4841@args) (begin (if (not (for-all string? g4841@args)) (assertion-violation 'syntax-error '"invalid argument" g4841@args) (void)) (raise (condition (g4c85@g4a1d@make-message-condition (if (null? g4841@args) '"invalid syntax" (apply string-append g4841@args))) (g4ce3@g4b18@make-syntax-violation (g2fb8@syntax->datum g483f@x) '#f) (g2fa8@extract-position-condition g483f@x)))))) (set! g2fb0@syntax-violation* (lambda (g4843@who g4844@msg g4845@form g4846@condition-object) (begin (if (not (string? g4844@msg)) (assertion-violation 'syntax-violation '"message is not a string" g4844@msg) (void)) ((lambda (g484b@who) (raise (condition (if g484b@who (g4cc1@g4abc@make-who-condition g484b@who) (condition)) (g4c85@g4a1d@make-message-condition g4844@msg) g4846@condition-object (g2fa8@extract-position-condition g4845@form)))) (if (or (string? g4843@who) (symbol? g4843@who)) g4843@who (if (not g4843@who) ((lambda (g484d@t) ((lambda (g484f@ls/false) (if (and g484f@ls/false (apply (lambda (g4851@id) (g2cbe@id? g4851@id)) g484f@ls/false)) (apply (lambda (g4853@id) (g2fb8@syntax->datum g4853@id)) g484f@ls/false) ((lambda (g4855@t) ((lambda (g4857@ls/false) (if (and g4857@ls/false (apply (lambda (g4859@id g485a@rest) (g2cbe@id? g4859@id)) g4857@ls/false)) (apply (lambda (g485d@id g485e@rest) (g2fb8@syntax->datum g485d@id)) g4857@ls/false) ((lambda (g4861@t) ((lambda (g4863@ls/false) (if g4863@ls/false (apply (lambda () '#f) g4863@ls/false) (g2fb2@syntax-violation '#f '"invalid syntax" g4861@t))) (g2ec9@syntax-dispatch g4861@t '_))) g4855@t))) (g2ec9@syntax-dispatch g4855@t '(any . any)))) g484d@t))) (g2ec9@syntax-dispatch g484d@t 'any))) g4845@form) (assertion-violation 'syntax-violation '"invalid who argument" g4843@who))))))) (set! g2fb2@syntax-violation (lambda g4873 ((lambda (g4874) (if (= g4874 '3) (apply (lambda (g4865@who g4866@msg g4867@form) (g2fb2@syntax-violation g4865@who g4866@msg g4867@form '#f)) g4873) (if (= g4874 '4) (apply (lambda (g486b@who g486c@msg g486d@form g486e@subform) (g2fb0@syntax-violation* g486b@who g486c@msg g486d@form (g4ce3@g4b18@make-syntax-violation (g2fb8@syntax->datum g486d@form) (g2fb8@syntax->datum g486e@subform)))) g4873) (error 'apply '"invalid arg count")))) (length g4873)))) (set! g2fb4@identifier? (lambda (g4875@x) (g2cbe@id? g4875@x))) (set! g2fb6@datum->syntax (lambda (g4877@id g4878@datum) (if (g2cbe@id? g4877@id) (g2c9c@datum->stx g4877@id g4878@datum) (assertion-violation 'datum->syntax '"not an identifier" g4877@id)))) (set! g2fb8@syntax->datum (lambda (g487b@x) (g2cd4@stx->datum g487b@x))) (set! g2fba@compile-r6rs-top-level (lambda (g487d@x*) (call-with-values (lambda () (g2f44@top-level-expander g487d@x*)) (lambda (g4883@g4880 g4884@g4882) ((lambda (g4887@invoke-code g4888@lib*) (lambda () (begin (for-each g2ae2@g2983@invoke-library g4888@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (g28bc@g2874@expanded->core g4887@invoke-code)) (void)) (eval-core (g28bc@g2874@expanded->core g4887@invoke-code))))) g4884@g4882 g4883@g4880))))) (set! g2fbc@pre-compile-r6rs-top-level (lambda (g488b@x*) (call-with-values (lambda () (g2f44@top-level-expander g488b@x*)) (lambda (g4891@g488e g4892@g4890) ((lambda (g4895@invoke-code g4896@lib*) (begin (for-each g2ae2@g2983@invoke-library g4896@lib*) (g2866@g278e@compile-core (g28bc@g2874@expanded->core g4895@invoke-code)))) g4892@g4890 g4891@g488e))))) (set! g2fbe@interaction-environment ((lambda (g4899@the-env) (lambda () (or g4899@the-env ((lambda (g489b@lib g489c@rib) (begin ((lambda (g489f@subst) (begin (g2c63@set-rib-sym*! g489c@rib (map car g489f@subst)) (g2c65@set-rib-mark**! g489c@rib (map (lambda (g48a1@x) g2c3a@top-mark*) g489f@subst)) (g2c67@set-rib-label*! g489c@rib (map cdr g489f@subst)))) (g2ab7@g292d@library-subst g489b@lib)) ((lambda (g48a3@env) (begin (set! g4899@the-env g48a3@env) g48a3@env)) (g2f70@make-interaction-env g489c@rib '() '())))) (g2adb@g2975@find-library-by-name '(mosh interaction)) (g2c6d@make-empty-rib))))) '#f)) (set! g2fc0@top-level-context (g2868@g2792@make-parameter '#f)) (begin (set! g49b1@g2fc0@top-level-context g2fc0@top-level-context) (set! g49b0@g2fbe@interaction-environment g2fbe@interaction-environment) (set! g49af@g2fbc@pre-compile-r6rs-top-level g2fbc@pre-compile-r6rs-top-level) (set! g49ae@g2fba@compile-r6rs-top-level g2fba@compile-r6rs-top-level) (set! g49ad@g2fb8@syntax->datum g2fb8@syntax->datum) (set! g49ac@g2fb6@datum->syntax g2fb6@datum->syntax) (set! g49ab@g2fb4@identifier? g2fb4@identifier?) (set! g49aa@g2fb2@syntax-violation g2fb2@syntax-violation) (set! g49a9@g2fb0@syntax-violation* g2fb0@syntax-violation*) (set! g49a8@g2fae@syntax-error g2fae@syntax-error) (set! g49a7@g2fac@assertion-error g2fac@assertion-error) (set! g49a6@g2faa@expression-position g2faa@expression-position) (set! g49a5@g2fa8@extract-position-condition g2fa8@extract-position-condition) (set! g49a4@g2fa6@make-source-condition g2fa6@make-source-condition) (set! g49a3@g2fa4@bound-identifier=? g2fa4@bound-identifier=?) (set! g49a2@g2fa2@free-identifier=? g2fa2@free-identifier=?) (set! g49a1@g2fa0@generate-temporaries g2fa0@generate-temporaries) (set! g49a0@g2f9e@make-export-env/macros g2f9e@make-export-env/macros) (set! g499f@g2f9c@make-export-subst g2f9c@make-export-subst) (set! g499e@g2f9a@build-exports g2f9a@build-exports) (set! g499d@g2f98@rev-map-append g2f98@rev-map-append) (set! g499c@g2f96@boot-library-expand g2f96@boot-library-expand) (set! g499b@g2f94@library-expander g2f94@library-expander) (set! g499a@g2f92@eval g2f92@eval) (set! g4999@g2f90@expand g2f90@expand) (set! g4998@g2f8e@scheme-report-environment g2f8e@scheme-report-environment) (set! g4997@g2f8c@null-environment g2f8c@null-environment) (set! g4996@g2f8a@environment g2f8a@environment) (set! g4995@g2f88@environment-symbols g2f88@environment-symbols) (set! g4994@g2f86@environment? g2f86@environment?) (set! g4993@g2f84@parse-binding g2f84@parse-binding) (set! g4992@g2f82@environment-bindings g2f82@environment-bindings) (set! g4991@g2f80@interaction-environment-symbols g2f80@interaction-environment-symbols) (set! g4990@g2f7e@rp g2f7e@rp) (set! g498f@g2f7c@set-interaction-env-locs! g2f7c@set-interaction-env-locs!) (set! g498e@g2f7a@set-interaction-env-r! g2f7a@set-interaction-env-r!) (set! g498d@g2f78@set-interaction-env-rib! g2f78@set-interaction-env-rib!) (set! g498c@g2f76@interaction-env-locs g2f76@interaction-env-locs) (set! g498b@g2f74@interaction-env-r g2f74@interaction-env-r) (set! g498a@g2f72@interaction-env-rib g2f72@interaction-env-rib) (set! g4989@g2f70@make-interaction-env g2f70@make-interaction-env) (set! g4988@g2f6e@interaction-env? g2f6e@interaction-env?) (set! g4987@g2f6b@g2f63 g2f6b@g2f63) (set! g4986@g2f69@g2f64 g2f69@g2f64) (set! g4985@g2f67@g2f62 g2f67@g2f62) (set! g4984@g2f61@rp g2f61@rp) (set! g4983@g2f5f@set-env-itc! g2f5f@set-env-itc!) (set! g4982@g2f5d@set-env-labels! g2f5d@set-env-labels!) (set! g4981@g2f5b@set-env-names! g2f5b@set-env-names!) (set! g4980@g2f59@env-itc g2f59@env-itc) (set! g497f@g2f57@env-labels g2f57@env-labels) (set! g497e@g2f55@env-names g2f55@env-names) (set! g497d@g2f53@make-env g2f53@make-env) (set! g497c@g2f51@env? g2f51@env?) (set! g497b@g2f4e@g2f46 g2f4e@g2f46) (set! g497a@g2f4c@g2f47 g2f4c@g2f47) (set! g4979@g2f4a@g2f45 g2f4a@g2f45) (set! g4978@g2f44@top-level-expander g2f44@top-level-expander) (set! g4977@g2f42@parse-top-level-program g2f42@parse-top-level-program) (set! g4976@g2f40@core-library-expander g2f40@core-library-expander) (set! g4975@g2f3e@library-body-expander g2f3e@library-body-expander) (set! g4974@g2f3c@chi-interaction-expr g2f3c@chi-interaction-expr) (set! g4973@g2f3a@chi-library-internal g2f3a@chi-library-internal) (set! g4972@g2f38@imp-collector g2f38@imp-collector) (set! g4971@g2f36@vis-collector g2f36@vis-collector) (set! g4970@g2f34@inv-collector g2f34@inv-collector) (set! g496f@g2f32@make-collector g2f32@make-collector) (set! g496e@g2f30@make-top-rib g2f30@make-top-rib) (set! g496d@g2f2e@parse-import-spec* g2f2e@parse-import-spec*) (set! g496c@g2f2c@parse-library g2f2c@parse-library) (set! g496b@g2f2a@parse-library-name g2f2a@parse-library-name) (set! g496a@g2f28@parse-exports g2f28@parse-exports) (set! g4969@g2f26@expand-transformer g2f26@expand-transformer) (set! g4968@g2f24@chi-body* g2f24@chi-body*) (set! g4967@g2f22@chi-internal-module g2f22@chi-internal-module) (set! g4966@g2f20@module-interface-exp-id* g2f20@module-interface-exp-id*) (set! g4965@g2f1e@set-module-interface-exp-lab-vec! g2f1e@set-module-interface-exp-lab-vec!) (set! g4964@g2f1c@set-module-interface-exp-id-vec! g2f1c@set-module-interface-exp-id-vec!) (set! g4963@g2f1a@set-module-interface-first-mark! g2f1a@set-module-interface-first-mark!) (set! g4962@g2f18@module-interface-exp-lab-vec g2f18@module-interface-exp-lab-vec) (set! g4961@g2f16@module-interface-exp-id-vec g2f16@module-interface-exp-id-vec) (set! g4960@g2f14@module-interface-first-mark g2f14@module-interface-first-mark) (set! g495f@g2f12@make-module-interface g2f12@make-module-interface) (set! g495e@g2f10@module-interface? g2f10@module-interface?) (set! g495d@g2f0d@g2f05 g2f0d@g2f05) (set! g495c@g2f0b@g2f06 g2f0b@g2f06) (set! g495b@g2f09@g2f04 g2f09@g2f04) (set! g495a@g2f03@parse-module g2f03@parse-module) (set! g4959@g2f01@chi-internal g2f01@chi-internal) (set! g4958@g2eff@find-dups g2eff@find-dups) (set! g4957@g2efd@find-bound=? g2efd@find-bound=?) (set! g4956@g2efb@chi-rhs* g2efb@chi-rhs*) (set! g4955@g2ef9@expand-interaction-rhs*/init* g2ef9@expand-interaction-rhs*/init*) (set! g4954@g2ef7@chi-rhs g2ef7@chi-rhs) (set! g4953@g2ef5@chi-defun g2ef5@chi-defun) (set! g4952@g2ef3@chi-lambda-clause* g2ef3@chi-lambda-clause*) (set! g4951@g2ef1@chi-lambda-clause g2ef1@chi-lambda-clause) (set! g4950@g2eef@verify-formals g2eef@verify-formals) (set! g494f@g2eed@chi-set! g2eed@chi-set!) (set! g494e@g2eeb@chi-expr g2eeb@chi-expr) (set! g494d@g2ee9@chi-application g2ee9@chi-application) (set! g494c@g2ee7@chi-expr* g2ee7@chi-expr*) (set! g494b@g2ee5@chi-global-macro g2ee5@chi-global-macro) (set! g494a@g2ee3@chi-local-macro g2ee3@chi-local-macro) (set! g4949@g2ee1@chi-macro g2ee1@chi-macro) (set! g4948@g2edf@do-macro-call g2edf@do-macro-call) (set! g4947@g2edd@local-macro-transformer g2edd@local-macro-transformer) (set! g4946@g2edb@macro-transformer g2edb@macro-transformer) (set! g4945@g2ed9@symbol-macro g2ed9@symbol-macro) (set! g4944@g2ed7@core-macro-transformer g2ed7@core-macro-transformer) (set! g4943@g2ed5@syntax-transformer g2ed5@syntax-transformer) (set! g4942@g2ed3@ellipsis-map g2ed3@ellipsis-map) (set! g4941@g2ed1@syntax-case-transformer g2ed1@syntax-case-transformer) (set! g4940@g2ecf@verify-literals g2ecf@verify-literals) (set! g493f@g2ecd@underscore? g2ecd@underscore?) (set! g493e@g2ecb@ellipsis? g2ecb@ellipsis?) (set! g493d@g2ec9@syntax-dispatch g2ec9@syntax-dispatch) (set! g493c@g2ec7@convert-pattern g2ec7@convert-pattern) (set! g493b@g2ec5@foreign-call-transformer g2ec5@foreign-call-transformer) (set! g493a@g2ec3@parameterize-macro g2ec3@parameterize-macro) (set! g4939@g2ec1@incorrect-usage-macro g2ec1@incorrect-usage-macro) (set! g4938@g2ebf@define-condition-type-macro g2ebf@define-condition-type-macro) (set! g4937@g2ebd@define-record-type-macro g2ebd@define-record-type-macro) (set! g4936@g2ebb@define-struct-macro g2ebb@define-struct-macro) (set! g4935@g2eb9@quasisyntax-macro g2eb9@quasisyntax-macro) (set! g4934@g2eb7@quasiquote-macro g2eb7@quasiquote-macro) (set! g4933@g2eb5@syntax-rules-macro g2eb5@syntax-rules-macro) (set! g4932@g2eb3@include-into-macro g2eb3@include-into-macro) (set! g4931@g2eb1@include-macro g2eb1@include-macro) (set! g4930@g2eaf@do-include g2eaf@do-include) (set! g492f@g2ead@cond-macro g2ead@cond-macro) (set! g492e@g2eab@and-macro g2eab@and-macro) (set! g492d@g2ea9@or-macro g2ea9@or-macro) (set! g492c@g2ea7@let*-macro g2ea7@let*-macro) (set! g492b@g2ea5@do-macro g2ea5@do-macro) (set! g492a@g2ea3@identifier-syntax-macro g2ea3@identifier-syntax-macro) (set! g4929@g2ea1@endianness-macro g2ea1@endianness-macro) (set! g4928@g2e9f@assert-macro g2e9f@assert-macro) (set! g4927@g2e9d@delay-macro g2e9d@delay-macro) (set! g4926@g2e9b@time-macro g2e9b@time-macro) (set! g4925@g2e99@define-enumeration-macro g2e99@define-enumeration-macro) (set! g4924@g2e97@guard-macro g2e97@guard-macro) (set! g4923@g2e95@trace-letrec-syntax-macro g2e95@trace-letrec-syntax-macro) (set! g4922@g2e93@trace-let-syntax-macro g2e93@trace-let-syntax-macro) (set! g4921@g2e91@trace-let/rec-syntax g2e91@trace-let/rec-syntax) (set! g4920@g2e8f@trace-define-syntax-macro g2e8f@trace-define-syntax-macro) (set! g491f@g2e8d@trace-define-macro g2e8d@trace-define-macro) (set! g491e@g2e8b@trace-lambda-macro g2e8b@trace-lambda-macro) (set! g491d@g2e89@let*-values-macro g2e89@let*-values-macro) (set! g491c@g2e87@let-values-macro g2e87@let-values-macro) (set! g491b@g2e85@let-macro g2e85@let-macro) (set! g491a@g2e83@invalid-fmls-error g2e83@invalid-fmls-error) (set! g4919@g2e81@with-syntax-macro g2e81@with-syntax-macro) (set! g4918@g2e7f@bless g2e7f@bless) (set! g4917@g2e7d@lambda-transformer g2e7d@lambda-transformer) (set! g4916@g2e7b@case-lambda-transformer g2e7b@case-lambda-transformer) (set! g4915@g2e79@quote-transformer g2e79@quote-transformer) (set! g4914@g2e77@case-macro g2e77@case-macro) (set! g4913@g2e75@or-transformer g2e75@or-transformer) (set! g4912@g2e73@and-transformer g2e73@and-transformer) (set! g4911@g2e71@if-transformer g2e71@if-transformer) (set! g4910@g2e6f@unless-macro g2e6f@unless-macro) (set! g490f@g2e6d@when-macro g2e6d@when-macro) (set! g490e@g2e6b@record-constructor-descriptor-transformer g2e6b@record-constructor-descriptor-transformer) (set! g490d@g2e69@record-type-descriptor-transformer g2e69@record-type-descriptor-transformer) (set! g490c@g2e67@type-descriptor-transformer g2e67@type-descriptor-transformer) (set! g490b@g2e65@fluid-let-syntax-transformer g2e65@fluid-let-syntax-transformer) (set! g490a@g2e63@letrec*-transformer g2e63@letrec*-transformer) (set! g4909@g2e61@letrec-transformer g2e61@letrec-transformer) (set! g4908@g2e5f@letrec-helper g2e5f@letrec-helper) (set! g4907@g2e5d@add-lexicals g2e5d@add-lexicals) (set! g4906@g2e5b@add-lexical g2e5b@add-lexical) (set! g4905@g2e59@set-lexical-mutable! g2e59@set-lexical-mutable!) (set! g4904@g2e57@lexical-mutable? g2e57@lexical-mutable?) (set! g4903@g2e55@lexical-var g2e55@lexical-var) (set! g4902@g2e53@scheme-stx g2e53@scheme-stx) (set! g4901@g2e51@scheme-stx-hashtable g2e51@scheme-stx-hashtable) (set! g4900@g2e4f@parse-define-syntax g2e4f@parse-define-syntax) (set! g48ff@g2e4d@parse-define g2e4d@parse-define) (set! g48fe@g2cfc@make-eval-transformer g2cfc@make-eval-transformer) (set! g48fd@g2cfa@variable-transformer-procedure g2cfa@variable-transformer-procedure) (set! g48fc@g2cf8@variable-transformer? g2cf8@variable-transformer?) (set! g48fb@g2cf6@make-variable-transformer g2cf6@make-variable-transformer) (set! g48fa@g2cf4@sanitize-binding g2cf4@sanitize-binding) (set! g48f9@g2ce6@syntax-type g2ce6@syntax-type) (set! g48f8@g2ce4@raise-unbound-error g2ce4@raise-unbound-error) (set! g48f7@g2ce2@binding-value g2ce2@binding-value) (set! g48f6@g2ce0@binding-type g2ce0@binding-type) (set! g48f5@g2cde@make-binding g2cde@make-binding) (set! g48f4@g2cdc@label->binding g2cdc@label->binding) (set! g48f3@g2cda@id->real-label g2cda@id->real-label) (set! g48f2@g2cd8@id->label g2cd8@id->label) (set! g48f1@g2cd6@same-marks*? g2cd6@same-marks*?) (set! g48f0@g2cd4@stx->datum g2cd4@stx->datum) (set! g48ef@g2cd2@strip g2cd2@strip) (set! g48ee@g2cd0@strip-annotations g2cd0@strip-annotations) (set! g48ed@g2cce@self-evaluating? g2cce@self-evaluating?) (set! g48ec@g2ccc@bound-id-member? g2ccc@bound-id-member?) (set! g48eb@g2cca@distinct-bound-ids? g2cca@distinct-bound-ids?) (set! g48ea@g2cc8@valid-bound-ids? g2cc8@valid-bound-ids?) (set! g48e9@g2cc6@free-id=? g2cc6@free-id=?) (set! g48e8@g2cc4@bound-id=? g2cc4@bound-id=?) (set! g48e7@g2cc2@same-marks? g2cc2@same-marks?) (set! g48e6@g2cc0@id->sym g2cc0@id->sym) (set! g48e5@g2cbe@id? g2cbe@id?) (set! g48e4@g2cbc@syntax->list g2cbc@syntax->list) (set! g48e3@g2cba@syntax-cdr g2cba@syntax-cdr) (set! g48e2@g2cb8@syntax-car g2cb8@syntax-car) (set! g48e1@g2cb6@syntax-list? g2cb6@syntax-list?) (set! g48e0@g2cb4@syntax-null? g2cb4@syntax-null?) (set! g48df@g2cb2@syntax-vector? g2cb2@syntax-vector?) (set! g48de@g2cb0@syntax-pair? g2cb0@syntax-pair?) (set! g48dd@g2cae@syntax-vector->list g2cae@syntax-vector->list) (set! g48dc@g2cac@syntax-kind? g2cac@syntax-kind?) (set! g48db@g2caa@add-subst g2caa@add-subst) (set! g48da@g2ca8@add-mark g2ca8@add-mark) (set! g48d9@g2ca6@mkstx g2ca6@mkstx) (set! g48d8@g2ca4@join-wraps g2ca4@join-wraps) (set! g48d7@g2ca2@anti-mark? g2ca2@anti-mark?) (set! g48d6@g2ca0@anti-mark g2ca0@anti-mark) (set! g48d5@g2c9e@gen-mark g2c9e@gen-mark) (set! g48d4@g2c9c@datum->stx g2c9c@datum->stx) (set! g48d3@g2c9a@rp g2c9a@rp) (set! g48d2@g2c98@set-stx-ae*! g2c98@set-stx-ae*!) (set! g48d1@g2c96@set-stx-subst*! g2c96@set-stx-subst*!) (set! g48d0@g2c94@set-stx-mark*! g2c94@set-stx-mark*!) (set! g48cf@g2c92@set-stx-expr! g2c92@set-stx-expr!) (set! g48ce@g2c90@stx-ae* g2c90@stx-ae*) (set! g48cd@g2c8e@stx-subst* g2c8e@stx-subst*) (set! g48cc@g2c8c@stx-mark* g2c8c@stx-mark*) (set! g48cb@g2c8a@stx-expr g2c8a@stx-expr) (set! g48ca@g2c88@make-stx g2c88@make-stx) (set! g48c9@g2c86@stx? g2c86@stx?) (set! g48c8@g2c83@g2c7b g2c83@g2c7b) (set! g48c7@g2c81@g2c7c g2c81@g2c7c) (set! g48c6@g2c7f@g2c7a g2c7f@g2c7a) (set! g48c5@g2c79@make-full-rib g2c79@make-full-rib) (set! g48c4@g2c77@unseal-rib! g2c77@unseal-rib!) (set! g48c3@g2c75@seal-rib! g2c75@seal-rib!) (set! g48c2@g2c73@make-rib-map g2c73@make-rib-map) (set! g48c1@g2c71@extend-rib/nc! g2c71@extend-rib/nc!) (set! g48c0@g2c6f@extend-rib! g2c6f@extend-rib!) (set! g48bf@g2c6d@make-empty-rib g2c6d@make-empty-rib) (set! g48be@g2c6b@set-rib-cache! g2c6b@set-rib-cache!) (set! g48bd@g2c69@set-rib-sealed/freq! g2c69@set-rib-sealed/freq!) (set! g48bc@g2c67@set-rib-label*! g2c67@set-rib-label*!) (set! g48bb@g2c65@set-rib-mark**! g2c65@set-rib-mark**!) (set! g48ba@g2c63@set-rib-sym*! g2c63@set-rib-sym*!) (set! g48b9@g2c61@rib-cache g2c61@rib-cache) (set! g48b8@g2c5f@rib-sealed/freq g2c5f@rib-sealed/freq) (set! g48b7@g2c5d@rib-label* g2c5d@rib-label*) (set! g48b6@g2c5b@rib-mark** g2c5b@rib-mark**) (set! g48b5@g2c59@rib-sym* g2c59@rib-sym*) (set! g48b4@g2c57@make-rib g2c57@make-rib) (set! g48b3@g2c55@rib? g2c55@rib?) (set! g48b2@g2c52@g2c4a g2c52@g2c4a) (set! g48b1@g2c50@g2c4b g2c50@g2c4b) (set! g48b0@g2c4e@g2c49 g2c4e@g2c49) (set! g48af@g2c48@gen-define-label g2c48@gen-define-label) (set! g48ae@g2c46@gen-define-label+loc g2c46@gen-define-label+loc) (set! g48ad@g2c44@gen-top-level-label g2c44@gen-top-level-label) (set! g48ac@g2c42@gen-label g2c42@gen-label) (set! g48ab@g2c40@gen-global g2c40@gen-global) (set! g48aa@g2c3e@gen-lexical g2c3e@gen-lexical) (set! g48a9@g2c3c@top-marked? g2c3c@top-marked?) (set! g48a8@g2c3a@top-mark* g2c3a@top-mark*) (set! g48a7@g2c35@set-union g2c35@set-union) (set! g48a6@g2c33@set-cons g2c33@set-cons) (set! g48a5@g2c31@file-options-macro g2c31@file-options-macro) (g2ad8@g296f@current-library-expander g2f94@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g49bb@g49b6 g49bd@g49b8 g49bf@g49b7 g49c2@&condition? g49c4@make-&condition g49c6@&condition-rtd g49c8@&condition-rcd g4a14@g4a0f g4a16@g4a11 g4a18@g4a10 g4a1b@p? g4a1d@make-message-condition g4a1f@g4a0e g4a21@message-condition? g4a23@condition-message g4a25@&message-rtd g4a27@&message-rcd g4a2d@g4a28 g4a2f@g4a2a g4a31@g4a29 g4a34@p? g4a36@make-warning g4a38@warning? g4a3a@&warning-rtd g4a3c@&warning-rcd g4a42@g4a3d g4a44@g4a3f g4a46@g4a3e g4a49@p? g4a4b@make-serious-condition g4a4d@serious-condition? g4a4f@&serious-rtd g4a51@&serious-rcd g4a57@g4a52 g4a59@g4a54 g4a5b@g4a53 g4a5e@p? g4a60@make-error g4a62@error? g4a64@&error-rtd g4a66@&error-rcd g4a6c@g4a67 g4a6e@g4a69 g4a70@g4a68 g4a73@p? g4a75@make-violation g4a77@violation? g4a79@&violation-rtd g4a7b@&violation-rcd g4a81@g4a7c g4a83@g4a7e g4a85@g4a7d g4a88@p? g4a8a@make-assertion-violation g4a8c@assertion-violation? g4a8e@&assertion-rtd g4a90@&assertion-rcd g4a98@g4a93 g4a9a@g4a95 g4a9c@g4a94 g4a9f@p? g4aa1@make-irritants-condition g4aa3@g4a92 g4aa5@irritants-condition? g4aa7@condition-irritants g4aa9@&irritants-rtd g4aab@&irritants-rcd g4ab3@g4aae g4ab5@g4ab0 g4ab7@g4aaf g4aba@p? g4abc@make-who-condition g4abe@g4aad g4ac0@who-condition? g4ac2@condition-who g4ac4@&who-rtd g4ac6@&who-rcd g4acc@g4ac7 g4ace@g4ac9 g4ad0@g4ac8 g4ad3@p? g4ad5@make-non-continuable-violation g4ad7@non-continuable-violation? g4ad9@&non-continuable-rtd g4adb@&non-continuable-rcd g4ae1@g4adc g4ae3@g4ade g4ae5@g4add g4ae8@p? g4aea@make-implementation-restriction-violation g4aec@implementation-restriction-violation? g4aee@&implementation-restriction-rtd g4af0@&implementation-restriction-rcd g4af6@g4af1 g4af8@g4af3 g4afa@g4af2 g4afd@p? g4aff@make-lexical-violation g4b01@lexical-violation? g4b03@&lexical-rtd g4b05@&lexical-rcd g4b0f@g4b0a g4b11@g4b0c g4b13@g4b0b g4b16@p? g4b18@make-syntax-violation g4b1a@g4b07 g4b1c@g4b09 g4b1e@syntax-violation? g4b20@syntax-violation-form g4b22@syntax-violation-subform g4b24@&syntax-rtd g4b26@&syntax-rcd g4b2c@g4b27 g4b2e@g4b29 g4b30@g4b28 g4b33@p? g4b35@make-undefined-violation g4b37@undefined-violation? g4b39@&undefined-rtd g4b3b@&undefined-rcd g4b41@g4b3c g4b43@g4b3e g4b45@g4b3d g4b48@p? g4b4a@make-i/o-error g4b4c@i/o-error? g4b4e@&i/o-rtd g4b50@&i/o-rcd g4b56@g4b51 g4b58@g4b53 g4b5a@g4b52 g4b5d@p? g4b5f@make-i/o-read-error g4b61@i/o-read-error? g4b63@&i/o-read-rtd g4b65@&i/o-read-rcd g4b6b@g4b66 g4b6d@g4b68 g4b6f@g4b67 g4b72@p? g4b74@make-i/o-write-error g4b76@i/o-write-error? g4b78@&i/o-write-rtd g4b7a@&i/o-write-rcd g4b82@g4b7d g4b84@g4b7f g4b86@g4b7e g4b89@p? g4b8b@make-i/o-invalid-position-error g4b8d@g4b7c g4b8f@i/o-invalid-position-error? g4b91@i/o-error-position g4b93@&i/o-invalid-position-rtd g4b95@&i/o-invalid-position-rcd g4b9d@g4b98 g4b9f@g4b9a g4ba1@g4b99 g4ba4@p? g4ba6@make-i/o-filename-error g4ba8@g4b97 g4baa@i/o-filename-error? g4bac@i/o-error-filename g4bae@&i/o-filename-rtd g4bb0@&i/o-filename-rcd g4bb6@g4bb1 g4bb8@g4bb3 g4bba@g4bb2 g4bbd@p? g4bbf@make-i/o-file-protection-error g4bc1@i/o-file-protection-error? g4bc3@&i/o-file-protection-rtd g4bc5@&i/o-file-protection-rcd g4bcb@g4bc6 g4bcd@g4bc8 g4bcf@g4bc7 g4bd2@p? g4bd4@make-i/o-file-is-read-only-error g4bd6@i/o-file-is-read-only-error? g4bd8@&i/o-file-is-read-only-rtd g4bda@&i/o-file-is-read-only-rcd g4be0@g4bdb g4be2@g4bdd g4be4@g4bdc g4be7@p? g4be9@make-i/o-file-already-exists-error g4beb@i/o-file-already-exists-error? g4bed@&i/o-file-already-exists-rtd g4bef@&i/o-file-already-exists-rcd g4bf5@g4bf0 g4bf7@g4bf2 g4bf9@g4bf1 g4bfc@p? g4bfe@make-i/o-file-does-not-exist-error g4c00@i/o-file-does-not-exist-error? g4c02@&i/o-file-does-not-exist-rtd g4c04@&i/o-file-does-not-exist-rcd g4c0c@g4c07 g4c0e@g4c09 g4c10@g4c08 g4c13@p? g4c15@make-i/o-port-error g4c17@g4c06 g4c19@i/o-port-error? g4c1b@i/o-error-port g4c1d@&i/o-port-rtd g4c1f@&i/o-port-rcd g4c25@g4c20 g4c27@g4c22 g4c29@g4c21 g4c2c@p? g4c2e@make-i/o-decoding-error g4c30@i/o-decoding-error? g4c32@&i/o-decoding-rtd g4c34@&i/o-decoding-rcd g4c3c@g4c37 g4c3e@g4c39 g4c40@g4c38 g4c43@p? g4c45@make-i/o-encoding-error g4c47@g4c36 g4c49@i/o-encoding-error? g4c4b@i/o-encoding-error-char g4c4d@&i/o-encoding-rtd g4c4f@&i/o-encoding-rcd g4c55@g4c50 g4c57@g4c52 g4c59@g4c51 g4c5c@p? g4c5e@make-no-infinities-violation g4c60@no-infinities-violation? g4c62@&no-infinities-rtd g4c64@&no-infinities-rcd g4c6a@g4c65 g4c6c@g4c67 g4c6e@g4c66 g4c71@p? g4c73@make-no-nans-violation g4c75@no-nans-violation? g4c77@&no-nans-rtd g4c79@&no-nans-rcd) (begin (set! g49bb@g49b6 (make-record-type-descriptor '&condition '#f 'g49b9 '#f '#f '#())) (set! g49bd@g49b8 '#f) (set! g49bf@g49b7 (make-record-constructor-descriptor g49bb@g49b6 '#f g49bd@g49b8)) (set! g49c2@&condition? (record-predicate g49bb@g49b6)) (set! g49c4@make-&condition (record-constructor g49bf@g49b7)) (set! g49c6@&condition-rtd g49bb@g49b6) (set! g49c8@&condition-rcd g49bf@g49b7) (set! g4a14@g4a0f (make-record-type-descriptor '&message g49bb@g49b6 'g4a12 '#f '#f '#((immutable message)))) (set! g4a16@g4a11 '#f) (set! g4a18@g4a10 (make-record-constructor-descriptor g4a14@g4a0f g49bf@g49b7 g4a16@g4a11)) (set! g4a1b@p? (record-predicate g4a14@g4a0f)) (set! g4a1d@make-message-condition (record-constructor g4a18@g4a10)) (set! g4a1f@g4a0e (record-accessor g4a14@g4a0f '0)) (set! g4a21@message-condition? (condition-predicate g4a14@g4a0f)) (set! g4a23@condition-message (condition-accessor g4a14@g4a0f g4a1f@g4a0e)) (set! g4a25@&message-rtd g4a14@g4a0f) (set! g4a27@&message-rcd g4a18@g4a10) (set! g4a2d@g4a28 (make-record-type-descriptor '&warning g49bb@g49b6 'g4a2b '#f '#f '#())) (set! g4a2f@g4a2a '#f) (set! g4a31@g4a29 (make-record-constructor-descriptor g4a2d@g4a28 g49bf@g49b7 g4a2f@g4a2a)) (set! g4a34@p? (record-predicate g4a2d@g4a28)) (set! g4a36@make-warning (record-constructor g4a31@g4a29)) (set! g4a38@warning? (condition-predicate g4a2d@g4a28)) (set! g4a3a@&warning-rtd g4a2d@g4a28) (set! g4a3c@&warning-rcd g4a31@g4a29) (set! g4a42@g4a3d (make-record-type-descriptor '&serious g49bb@g49b6 'g4a40 '#f '#f '#())) (set! g4a44@g4a3f '#f) (set! g4a46@g4a3e (make-record-constructor-descriptor g4a42@g4a3d g49bf@g49b7 g4a44@g4a3f)) (set! g4a49@p? (record-predicate g4a42@g4a3d)) (set! g4a4b@make-serious-condition (record-constructor g4a46@g4a3e)) (set! g4a4d@serious-condition? (condition-predicate g4a42@g4a3d)) (set! g4a4f@&serious-rtd g4a42@g4a3d) (set! g4a51@&serious-rcd g4a46@g4a3e) (set! g4a57@g4a52 (make-record-type-descriptor '&error g4a42@g4a3d 'g4a55 '#f '#f '#())) (set! g4a59@g4a54 '#f) (set! g4a5b@g4a53 (make-record-constructor-descriptor g4a57@g4a52 g4a46@g4a3e g4a59@g4a54)) (set! g4a5e@p? (record-predicate g4a57@g4a52)) (set! g4a60@make-error (record-constructor g4a5b@g4a53)) (set! g4a62@error? (condition-predicate g4a57@g4a52)) (set! g4a64@&error-rtd g4a57@g4a52) (set! g4a66@&error-rcd g4a5b@g4a53) (set! g4a6c@g4a67 (make-record-type-descriptor '&violation g4a42@g4a3d 'g4a6a '#f '#f '#())) (set! g4a6e@g4a69 '#f) (set! g4a70@g4a68 (make-record-constructor-descriptor g4a6c@g4a67 g4a46@g4a3e g4a6e@g4a69)) (set! g4a73@p? (record-predicate g4a6c@g4a67)) (set! g4a75@make-violation (record-constructor g4a70@g4a68)) (set! g4a77@violation? (condition-predicate g4a6c@g4a67)) (set! g4a79@&violation-rtd g4a6c@g4a67) (set! g4a7b@&violation-rcd g4a70@g4a68) (set! g4a81@g4a7c (make-record-type-descriptor '&assertion g4a6c@g4a67 'g4a7f '#f '#f '#())) (set! g4a83@g4a7e '#f) (set! g4a85@g4a7d (make-record-constructor-descriptor g4a81@g4a7c g4a70@g4a68 g4a83@g4a7e)) (set! g4a88@p? (record-predicate g4a81@g4a7c)) (set! g4a8a@make-assertion-violation (record-constructor g4a85@g4a7d)) (set! g4a8c@assertion-violation? (condition-predicate g4a81@g4a7c)) (set! g4a8e@&assertion-rtd g4a81@g4a7c) (set! g4a90@&assertion-rcd g4a85@g4a7d) (set! g4a98@g4a93 (make-record-type-descriptor '&irritants g49bb@g49b6 'g4a96 '#f '#f '#((immutable irritants)))) (set! g4a9a@g4a95 '#f) (set! g4a9c@g4a94 (make-record-constructor-descriptor g4a98@g4a93 g49bf@g49b7 g4a9a@g4a95)) (set! g4a9f@p? (record-predicate g4a98@g4a93)) (set! g4aa1@make-irritants-condition (record-constructor g4a9c@g4a94)) (set! g4aa3@g4a92 (record-accessor g4a98@g4a93 '0)) (set! g4aa5@irritants-condition? (condition-predicate g4a98@g4a93)) (set! g4aa7@condition-irritants (condition-accessor g4a98@g4a93 g4aa3@g4a92)) (set! g4aa9@&irritants-rtd g4a98@g4a93) (set! g4aab@&irritants-rcd g4a9c@g4a94) (set! g4ab3@g4aae (make-record-type-descriptor '&who g49bb@g49b6 'g4ab1 '#f '#f '#((immutable who)))) (set! g4ab5@g4ab0 '#f) (set! g4ab7@g4aaf (make-record-constructor-descriptor g4ab3@g4aae g49bf@g49b7 g4ab5@g4ab0)) (set! g4aba@p? (record-predicate g4ab3@g4aae)) (set! g4abc@make-who-condition (record-constructor g4ab7@g4aaf)) (set! g4abe@g4aad (record-accessor g4ab3@g4aae '0)) (set! g4ac0@who-condition? (condition-predicate g4ab3@g4aae)) (set! g4ac2@condition-who (condition-accessor g4ab3@g4aae g4abe@g4aad)) (set! g4ac4@&who-rtd g4ab3@g4aae) (set! g4ac6@&who-rcd g4ab7@g4aaf) (set! g4acc@g4ac7 (make-record-type-descriptor '&non-continuable g4a6c@g4a67 'g4aca '#f '#f '#())) (set! g4ace@g4ac9 '#f) (set! g4ad0@g4ac8 (make-record-constructor-descriptor g4acc@g4ac7 g4a70@g4a68 g4ace@g4ac9)) (set! g4ad3@p? (record-predicate g4acc@g4ac7)) (set! g4ad5@make-non-continuable-violation (record-constructor g4ad0@g4ac8)) (set! g4ad7@non-continuable-violation? (condition-predicate g4acc@g4ac7)) (set! g4ad9@&non-continuable-rtd g4acc@g4ac7) (set! g4adb@&non-continuable-rcd g4ad0@g4ac8) (set! g4ae1@g4adc (make-record-type-descriptor '&implementation-restriction g4a6c@g4a67 'g4adf '#f '#f '#())) (set! g4ae3@g4ade '#f) (set! g4ae5@g4add (make-record-constructor-descriptor g4ae1@g4adc g4a70@g4a68 g4ae3@g4ade)) (set! g4ae8@p? (record-predicate g4ae1@g4adc)) (set! g4aea@make-implementation-restriction-violation (record-constructor g4ae5@g4add)) (set! g4aec@implementation-restriction-violation? (condition-predicate g4ae1@g4adc)) (set! g4aee@&implementation-restriction-rtd g4ae1@g4adc) (set! g4af0@&implementation-restriction-rcd g4ae5@g4add) (set! g4af6@g4af1 (make-record-type-descriptor '&lexical g4a6c@g4a67 'g4af4 '#f '#f '#())) (set! g4af8@g4af3 '#f) (set! g4afa@g4af2 (make-record-constructor-descriptor g4af6@g4af1 g4a70@g4a68 g4af8@g4af3)) (set! g4afd@p? (record-predicate g4af6@g4af1)) (set! g4aff@make-lexical-violation (record-constructor g4afa@g4af2)) (set! g4b01@lexical-violation? (condition-predicate g4af6@g4af1)) (set! g4b03@&lexical-rtd g4af6@g4af1) (set! g4b05@&lexical-rcd g4afa@g4af2) (set! g4b0f@g4b0a (make-record-type-descriptor '&syntax g4a6c@g4a67 'g4b0d '#f '#f '#((immutable form) (immutable subform)))) (set! g4b11@g4b0c '#f) (set! g4b13@g4b0b (make-record-constructor-descriptor g4b0f@g4b0a g4a70@g4a68 g4b11@g4b0c)) (set! g4b16@p? (record-predicate g4b0f@g4b0a)) (set! g4b18@make-syntax-violation (record-constructor g4b13@g4b0b)) (set! g4b1a@g4b07 (record-accessor g4b0f@g4b0a '0)) (set! g4b1c@g4b09 (record-accessor g4b0f@g4b0a '1)) (set! g4b1e@syntax-violation? (condition-predicate g4b0f@g4b0a)) (set! g4b20@syntax-violation-form (condition-accessor g4b0f@g4b0a g4b1a@g4b07)) (set! g4b22@syntax-violation-subform (condition-accessor g4b0f@g4b0a g4b1c@g4b09)) (set! g4b24@&syntax-rtd g4b0f@g4b0a) (set! g4b26@&syntax-rcd g4b13@g4b0b) (set! g4b2c@g4b27 (make-record-type-descriptor '&undefined g4a6c@g4a67 'g4b2a '#f '#f '#())) (set! g4b2e@g4b29 '#f) (set! g4b30@g4b28 (make-record-constructor-descriptor g4b2c@g4b27 g4a70@g4a68 g4b2e@g4b29)) (set! g4b33@p? (record-predicate g4b2c@g4b27)) (set! g4b35@make-undefined-violation (record-constructor g4b30@g4b28)) (set! g4b37@undefined-violation? (condition-predicate g4b2c@g4b27)) (set! g4b39@&undefined-rtd g4b2c@g4b27) (set! g4b3b@&undefined-rcd g4b30@g4b28) (set! g4b41@g4b3c (make-record-type-descriptor '&i/o g4a57@g4a52 'g4b3f '#f '#f '#())) (set! g4b43@g4b3e '#f) (set! g4b45@g4b3d (make-record-constructor-descriptor g4b41@g4b3c g4a5b@g4a53 g4b43@g4b3e)) (set! g4b48@p? (record-predicate g4b41@g4b3c)) (set! g4b4a@make-i/o-error (record-constructor g4b45@g4b3d)) (set! g4b4c@i/o-error? (condition-predicate g4b41@g4b3c)) (set! g4b4e@&i/o-rtd g4b41@g4b3c) (set! g4b50@&i/o-rcd g4b45@g4b3d) (set! g4b56@g4b51 (make-record-type-descriptor '&i/o-read g4b41@g4b3c 'g4b54 '#f '#f '#())) (set! g4b58@g4b53 '#f) (set! g4b5a@g4b52 (make-record-constructor-descriptor g4b56@g4b51 g4b45@g4b3d g4b58@g4b53)) (set! g4b5d@p? (record-predicate g4b56@g4b51)) (set! g4b5f@make-i/o-read-error (record-constructor g4b5a@g4b52)) (set! g4b61@i/o-read-error? (condition-predicate g4b56@g4b51)) (set! g4b63@&i/o-read-rtd g4b56@g4b51) (set! g4b65@&i/o-read-rcd g4b5a@g4b52) (set! g4b6b@g4b66 (make-record-type-descriptor '&i/o-write g4b41@g4b3c 'g4b69 '#f '#f '#())) (set! g4b6d@g4b68 '#f) (set! g4b6f@g4b67 (make-record-constructor-descriptor g4b6b@g4b66 g4b45@g4b3d g4b6d@g4b68)) (set! g4b72@p? (record-predicate g4b6b@g4b66)) (set! g4b74@make-i/o-write-error (record-constructor g4b6f@g4b67)) (set! g4b76@i/o-write-error? (condition-predicate g4b6b@g4b66)) (set! g4b78@&i/o-write-rtd g4b6b@g4b66) (set! g4b7a@&i/o-write-rcd g4b6f@g4b67) (set! g4b82@g4b7d (make-record-type-descriptor '&i/o-invalid-position g4b41@g4b3c 'g4b80 '#f '#f '#((immutable position)))) (set! g4b84@g4b7f '#f) (set! g4b86@g4b7e (make-record-constructor-descriptor g4b82@g4b7d g4b45@g4b3d g4b84@g4b7f)) (set! g4b89@p? (record-predicate g4b82@g4b7d)) (set! g4b8b@make-i/o-invalid-position-error (record-constructor g4b86@g4b7e)) (set! g4b8d@g4b7c (record-accessor g4b82@g4b7d '0)) (set! g4b8f@i/o-invalid-position-error? (condition-predicate g4b82@g4b7d)) (set! g4b91@i/o-error-position (condition-accessor g4b82@g4b7d g4b8d@g4b7c)) (set! g4b93@&i/o-invalid-position-rtd g4b82@g4b7d) (set! g4b95@&i/o-invalid-position-rcd g4b86@g4b7e) (set! g4b9d@g4b98 (make-record-type-descriptor '&i/o-filename g4b41@g4b3c 'g4b9b '#f '#f '#((immutable filename)))) (set! g4b9f@g4b9a '#f) (set! g4ba1@g4b99 (make-record-constructor-descriptor g4b9d@g4b98 g4b45@g4b3d g4b9f@g4b9a)) (set! g4ba4@p? (record-predicate g4b9d@g4b98)) (set! g4ba6@make-i/o-filename-error (record-constructor g4ba1@g4b99)) (set! g4ba8@g4b97 (record-accessor g4b9d@g4b98 '0)) (set! g4baa@i/o-filename-error? (condition-predicate g4b9d@g4b98)) (set! g4bac@i/o-error-filename (condition-accessor g4b9d@g4b98 g4ba8@g4b97)) (set! g4bae@&i/o-filename-rtd g4b9d@g4b98) (set! g4bb0@&i/o-filename-rcd g4ba1@g4b99) (set! g4bb6@g4bb1 (make-record-type-descriptor '&i/o-file-protection g4b9d@g4b98 'g4bb4 '#f '#f '#())) (set! g4bb8@g4bb3 '#f) (set! g4bba@g4bb2 (make-record-constructor-descriptor g4bb6@g4bb1 g4ba1@g4b99 g4bb8@g4bb3)) (set! g4bbd@p? (record-predicate g4bb6@g4bb1)) (set! g4bbf@make-i/o-file-protection-error (record-constructor g4bba@g4bb2)) (set! g4bc1@i/o-file-protection-error? (condition-predicate g4bb6@g4bb1)) (set! g4bc3@&i/o-file-protection-rtd g4bb6@g4bb1) (set! g4bc5@&i/o-file-protection-rcd g4bba@g4bb2) (set! g4bcb@g4bc6 (make-record-type-descriptor '&i/o-file-is-read-only g4bb6@g4bb1 'g4bc9 '#f '#f '#())) (set! g4bcd@g4bc8 '#f) (set! g4bcf@g4bc7 (make-record-constructor-descriptor g4bcb@g4bc6 g4bba@g4bb2 g4bcd@g4bc8)) (set! g4bd2@p? (record-predicate g4bcb@g4bc6)) (set! g4bd4@make-i/o-file-is-read-only-error (record-constructor g4bcf@g4bc7)) (set! g4bd6@i/o-file-is-read-only-error? (condition-predicate g4bcb@g4bc6)) (set! g4bd8@&i/o-file-is-read-only-rtd g4bcb@g4bc6) (set! g4bda@&i/o-file-is-read-only-rcd g4bcf@g4bc7) (set! g4be0@g4bdb (make-record-type-descriptor '&i/o-file-already-exists g4b9d@g4b98 'g4bde '#f '#f '#())) (set! g4be2@g4bdd '#f) (set! g4be4@g4bdc (make-record-constructor-descriptor g4be0@g4bdb g4ba1@g4b99 g4be2@g4bdd)) (set! g4be7@p? (record-predicate g4be0@g4bdb)) (set! g4be9@make-i/o-file-already-exists-error (record-constructor g4be4@g4bdc)) (set! g4beb@i/o-file-already-exists-error? (condition-predicate g4be0@g4bdb)) (set! g4bed@&i/o-file-already-exists-rtd g4be0@g4bdb) (set! g4bef@&i/o-file-already-exists-rcd g4be4@g4bdc) (set! g4bf5@g4bf0 (make-record-type-descriptor '&i/o-file-does-not-exist g4b9d@g4b98 'g4bf3 '#f '#f '#())) (set! g4bf7@g4bf2 '#f) (set! g4bf9@g4bf1 (make-record-constructor-descriptor g4bf5@g4bf0 g4ba1@g4b99 g4bf7@g4bf2)) (set! g4bfc@p? (record-predicate g4bf5@g4bf0)) (set! g4bfe@make-i/o-file-does-not-exist-error (record-constructor g4bf9@g4bf1)) (set! g4c00@i/o-file-does-not-exist-error? (condition-predicate g4bf5@g4bf0)) (set! g4c02@&i/o-file-does-not-exist-rtd g4bf5@g4bf0) (set! g4c04@&i/o-file-does-not-exist-rcd g4bf9@g4bf1) (set! g4c0c@g4c07 (make-record-type-descriptor '&i/o-port g4b41@g4b3c 'g4c0a '#f '#f '#((immutable port)))) (set! g4c0e@g4c09 '#f) (set! g4c10@g4c08 (make-record-constructor-descriptor g4c0c@g4c07 g4b45@g4b3d g4c0e@g4c09)) (set! g4c13@p? (record-predicate g4c0c@g4c07)) (set! g4c15@make-i/o-port-error (record-constructor g4c10@g4c08)) (set! g4c17@g4c06 (record-accessor g4c0c@g4c07 '0)) (set! g4c19@i/o-port-error? (condition-predicate g4c0c@g4c07)) (set! g4c1b@i/o-error-port (condition-accessor g4c0c@g4c07 g4c17@g4c06)) (set! g4c1d@&i/o-port-rtd g4c0c@g4c07) (set! g4c1f@&i/o-port-rcd g4c10@g4c08) (set! g4c25@g4c20 (make-record-type-descriptor '&i/o-decoding g4c0c@g4c07 'g4c23 '#f '#f '#())) (set! g4c27@g4c22 '#f) (set! g4c29@g4c21 (make-record-constructor-descriptor g4c25@g4c20 g4c10@g4c08 g4c27@g4c22)) (set! g4c2c@p? (record-predicate g4c25@g4c20)) (set! g4c2e@make-i/o-decoding-error (record-constructor g4c29@g4c21)) (set! g4c30@i/o-decoding-error? (condition-predicate g4c25@g4c20)) (set! g4c32@&i/o-decoding-rtd g4c25@g4c20) (set! g4c34@&i/o-decoding-rcd g4c29@g4c21) (set! g4c3c@g4c37 (make-record-type-descriptor '&i/o-encoding g4c0c@g4c07 'g4c3a '#f '#f '#((immutable char)))) (set! g4c3e@g4c39 '#f) (set! g4c40@g4c38 (make-record-constructor-descriptor g4c3c@g4c37 g4c10@g4c08 g4c3e@g4c39)) (set! g4c43@p? (record-predicate g4c3c@g4c37)) (set! g4c45@make-i/o-encoding-error (record-constructor g4c40@g4c38)) (set! g4c47@g4c36 (record-accessor g4c3c@g4c37 '0)) (set! g4c49@i/o-encoding-error? (condition-predicate g4c3c@g4c37)) (set! g4c4b@i/o-encoding-error-char (condition-accessor g4c3c@g4c37 g4c47@g4c36)) (set! g4c4d@&i/o-encoding-rtd g4c3c@g4c37) (set! g4c4f@&i/o-encoding-rcd g4c40@g4c38) (set! g4c55@g4c50 (make-record-type-descriptor '&no-infinities g4ae1@g4adc 'g4c53 '#f '#f '#())) (set! g4c57@g4c52 '#f) (set! g4c59@g4c51 (make-record-constructor-descriptor g4c55@g4c50 g4ae5@g4add g4c57@g4c52)) (set! g4c5c@p? (record-predicate g4c55@g4c50)) (set! g4c5e@make-no-infinities-violation (record-constructor g4c59@g4c51)) (set! g4c60@no-infinities-violation? (condition-predicate g4c55@g4c50)) (set! g4c62@&no-infinities-rtd g4c55@g4c50) (set! g4c64@&no-infinities-rcd g4c59@g4c51) (set! g4c6a@g4c65 (make-record-type-descriptor '&no-nans g4ae1@g4adc 'g4c68 '#f '#f '#())) (set! g4c6c@g4c67 '#f) (set! g4c6e@g4c66 (make-record-constructor-descriptor g4c6a@g4c65 g4ae5@g4add g4c6c@g4c67)) (set! g4c71@p? (record-predicate g4c6a@g4c65)) (set! g4c73@make-no-nans-violation (record-constructor g4c6e@g4c66)) (set! g4c75@no-nans-violation? (condition-predicate g4c6a@g4c65)) (set! g4c77@&no-nans-rtd g4c6a@g4c65) (set! g4c79@&no-nans-rcd g4c6e@g4c66) (begin (set! g4d6a@g4c79@&no-nans-rcd g4c79@&no-nans-rcd) (set! g4d69@g4c77@&no-nans-rtd g4c77@&no-nans-rtd) (set! g4d68@g4c75@no-nans-violation? g4c75@no-nans-violation?) (set! g4d67@g4c73@make-no-nans-violation g4c73@make-no-nans-violation) (set! g4d66@g4c71@p? g4c71@p?) (set! g4d65@g4c6e@g4c66 g4c6e@g4c66) (set! g4d64@g4c6c@g4c67 g4c6c@g4c67) (set! g4d63@g4c6a@g4c65 g4c6a@g4c65) (set! g4d62@g4c64@&no-infinities-rcd g4c64@&no-infinities-rcd) (set! g4d61@g4c62@&no-infinities-rtd g4c62@&no-infinities-rtd) (set! g4d60@g4c60@no-infinities-violation? g4c60@no-infinities-violation?) (set! g4d5f@g4c5e@make-no-infinities-violation g4c5e@make-no-infinities-violation) (set! g4d5e@g4c5c@p? g4c5c@p?) (set! g4d5d@g4c59@g4c51 g4c59@g4c51) (set! g4d5c@g4c57@g4c52 g4c57@g4c52) (set! g4d5b@g4c55@g4c50 g4c55@g4c50) (set! g4d5a@g4c4f@&i/o-encoding-rcd g4c4f@&i/o-encoding-rcd) (set! g4d59@g4c4d@&i/o-encoding-rtd g4c4d@&i/o-encoding-rtd) (set! g4d58@g4c4b@i/o-encoding-error-char g4c4b@i/o-encoding-error-char) (set! g4d57@g4c49@i/o-encoding-error? g4c49@i/o-encoding-error?) (set! g4d56@g4c47@g4c36 g4c47@g4c36) (set! g4d55@g4c45@make-i/o-encoding-error g4c45@make-i/o-encoding-error) (set! g4d54@g4c43@p? g4c43@p?) (set! g4d53@g4c40@g4c38 g4c40@g4c38) (set! g4d52@g4c3e@g4c39 g4c3e@g4c39) (set! g4d51@g4c3c@g4c37 g4c3c@g4c37) (set! g4d50@g4c34@&i/o-decoding-rcd g4c34@&i/o-decoding-rcd) (set! g4d4f@g4c32@&i/o-decoding-rtd g4c32@&i/o-decoding-rtd) (set! g4d4e@g4c30@i/o-decoding-error? g4c30@i/o-decoding-error?) (set! g4d4d@g4c2e@make-i/o-decoding-error g4c2e@make-i/o-decoding-error) (set! g4d4c@g4c2c@p? g4c2c@p?) (set! g4d4b@g4c29@g4c21 g4c29@g4c21) (set! g4d4a@g4c27@g4c22 g4c27@g4c22) (set! g4d49@g4c25@g4c20 g4c25@g4c20) (set! g4d48@g4c1f@&i/o-port-rcd g4c1f@&i/o-port-rcd) (set! g4d47@g4c1d@&i/o-port-rtd g4c1d@&i/o-port-rtd) (set! g4d46@g4c1b@i/o-error-port g4c1b@i/o-error-port) (set! g4d45@g4c19@i/o-port-error? g4c19@i/o-port-error?) (set! g4d44@g4c17@g4c06 g4c17@g4c06) (set! g4d43@g4c15@make-i/o-port-error g4c15@make-i/o-port-error) (set! g4d42@g4c13@p? g4c13@p?) (set! g4d41@g4c10@g4c08 g4c10@g4c08) (set! g4d40@g4c0e@g4c09 g4c0e@g4c09) (set! g4d3f@g4c0c@g4c07 g4c0c@g4c07) (set! g4d3e@g4c04@&i/o-file-does-not-exist-rcd g4c04@&i/o-file-does-not-exist-rcd) (set! g4d3d@g4c02@&i/o-file-does-not-exist-rtd g4c02@&i/o-file-does-not-exist-rtd) (set! g4d3c@g4c00@i/o-file-does-not-exist-error? g4c00@i/o-file-does-not-exist-error?) (set! g4d3b@g4bfe@make-i/o-file-does-not-exist-error g4bfe@make-i/o-file-does-not-exist-error) (set! g4d3a@g4bfc@p? g4bfc@p?) (set! g4d39@g4bf9@g4bf1 g4bf9@g4bf1) (set! g4d38@g4bf7@g4bf2 g4bf7@g4bf2) (set! g4d37@g4bf5@g4bf0 g4bf5@g4bf0) (set! g4d36@g4bef@&i/o-file-already-exists-rcd g4bef@&i/o-file-already-exists-rcd) (set! g4d35@g4bed@&i/o-file-already-exists-rtd g4bed@&i/o-file-already-exists-rtd) (set! g4d34@g4beb@i/o-file-already-exists-error? g4beb@i/o-file-already-exists-error?) (set! g4d33@g4be9@make-i/o-file-already-exists-error g4be9@make-i/o-file-already-exists-error) (set! g4d32@g4be7@p? g4be7@p?) (set! g4d31@g4be4@g4bdc g4be4@g4bdc) (set! g4d30@g4be2@g4bdd g4be2@g4bdd) (set! g4d2f@g4be0@g4bdb g4be0@g4bdb) (set! g4d2e@g4bda@&i/o-file-is-read-only-rcd g4bda@&i/o-file-is-read-only-rcd) (set! g4d2d@g4bd8@&i/o-file-is-read-only-rtd g4bd8@&i/o-file-is-read-only-rtd) (set! g4d2c@g4bd6@i/o-file-is-read-only-error? g4bd6@i/o-file-is-read-only-error?) (set! g4d2b@g4bd4@make-i/o-file-is-read-only-error g4bd4@make-i/o-file-is-read-only-error) (set! g4d2a@g4bd2@p? g4bd2@p?) (set! g4d29@g4bcf@g4bc7 g4bcf@g4bc7) (set! g4d28@g4bcd@g4bc8 g4bcd@g4bc8) (set! g4d27@g4bcb@g4bc6 g4bcb@g4bc6) (set! g4d26@g4bc5@&i/o-file-protection-rcd g4bc5@&i/o-file-protection-rcd) (set! g4d25@g4bc3@&i/o-file-protection-rtd g4bc3@&i/o-file-protection-rtd) (set! g4d24@g4bc1@i/o-file-protection-error? g4bc1@i/o-file-protection-error?) (set! g4d23@g4bbf@make-i/o-file-protection-error g4bbf@make-i/o-file-protection-error) (set! g4d22@g4bbd@p? g4bbd@p?) (set! g4d21@g4bba@g4bb2 g4bba@g4bb2) (set! g4d20@g4bb8@g4bb3 g4bb8@g4bb3) (set! g4d1f@g4bb6@g4bb1 g4bb6@g4bb1) (set! g4d1e@g4bb0@&i/o-filename-rcd g4bb0@&i/o-filename-rcd) (set! g4d1d@g4bae@&i/o-filename-rtd g4bae@&i/o-filename-rtd) (set! g4d1c@g4bac@i/o-error-filename g4bac@i/o-error-filename) (set! g4d1b@g4baa@i/o-filename-error? g4baa@i/o-filename-error?) (set! g4d1a@g4ba8@g4b97 g4ba8@g4b97) (set! g4d19@g4ba6@make-i/o-filename-error g4ba6@make-i/o-filename-error) (set! g4d18@g4ba4@p? g4ba4@p?) (set! g4d17@g4ba1@g4b99 g4ba1@g4b99) (set! g4d16@g4b9f@g4b9a g4b9f@g4b9a) (set! g4d15@g4b9d@g4b98 g4b9d@g4b98) (set! g4d14@g4b95@&i/o-invalid-position-rcd g4b95@&i/o-invalid-position-rcd) (set! g4d13@g4b93@&i/o-invalid-position-rtd g4b93@&i/o-invalid-position-rtd) (set! g4d12@g4b91@i/o-error-position g4b91@i/o-error-position) (set! g4d11@g4b8f@i/o-invalid-position-error? g4b8f@i/o-invalid-position-error?) (set! g4d10@g4b8d@g4b7c g4b8d@g4b7c) (set! g4d0f@g4b8b@make-i/o-invalid-position-error g4b8b@make-i/o-invalid-position-error) (set! g4d0e@g4b89@p? g4b89@p?) (set! g4d0d@g4b86@g4b7e g4b86@g4b7e) (set! g4d0c@g4b84@g4b7f g4b84@g4b7f) (set! g4d0b@g4b82@g4b7d g4b82@g4b7d) (set! g4d0a@g4b7a@&i/o-write-rcd g4b7a@&i/o-write-rcd) (set! g4d09@g4b78@&i/o-write-rtd g4b78@&i/o-write-rtd) (set! g4d08@g4b76@i/o-write-error? g4b76@i/o-write-error?) (set! g4d07@g4b74@make-i/o-write-error g4b74@make-i/o-write-error) (set! g4d06@g4b72@p? g4b72@p?) (set! g4d05@g4b6f@g4b67 g4b6f@g4b67) (set! g4d04@g4b6d@g4b68 g4b6d@g4b68) (set! g4d03@g4b6b@g4b66 g4b6b@g4b66) (set! g4d02@g4b65@&i/o-read-rcd g4b65@&i/o-read-rcd) (set! g4d01@g4b63@&i/o-read-rtd g4b63@&i/o-read-rtd) (set! g4d00@g4b61@i/o-read-error? g4b61@i/o-read-error?) (set! g4cff@g4b5f@make-i/o-read-error g4b5f@make-i/o-read-error) (set! g4cfe@g4b5d@p? g4b5d@p?) (set! g4cfd@g4b5a@g4b52 g4b5a@g4b52) (set! g4cfc@g4b58@g4b53 g4b58@g4b53) (set! g4cfb@g4b56@g4b51 g4b56@g4b51) (set! g4cfa@g4b50@&i/o-rcd g4b50@&i/o-rcd) (set! g4cf9@g4b4e@&i/o-rtd g4b4e@&i/o-rtd) (set! g4cf8@g4b4c@i/o-error? g4b4c@i/o-error?) (set! g4cf7@g4b4a@make-i/o-error g4b4a@make-i/o-error) (set! g4cf6@g4b48@p? g4b48@p?) (set! g4cf5@g4b45@g4b3d g4b45@g4b3d) (set! g4cf4@g4b43@g4b3e g4b43@g4b3e) (set! g4cf3@g4b41@g4b3c g4b41@g4b3c) (set! g4cf2@g4b3b@&undefined-rcd g4b3b@&undefined-rcd) (set! g4cf1@g4b39@&undefined-rtd g4b39@&undefined-rtd) (set! g4cf0@g4b37@undefined-violation? g4b37@undefined-violation?) (set! g4cef@g4b35@make-undefined-violation g4b35@make-undefined-violation) (set! g4cee@g4b33@p? g4b33@p?) (set! g4ced@g4b30@g4b28 g4b30@g4b28) (set! g4cec@g4b2e@g4b29 g4b2e@g4b29) (set! g4ceb@g4b2c@g4b27 g4b2c@g4b27) (set! g4cea@g4b26@&syntax-rcd g4b26@&syntax-rcd) (set! g4ce9@g4b24@&syntax-rtd g4b24@&syntax-rtd) (set! g4ce8@g4b22@syntax-violation-subform g4b22@syntax-violation-subform) (set! g4ce7@g4b20@syntax-violation-form g4b20@syntax-violation-form) (set! g4ce6@g4b1e@syntax-violation? g4b1e@syntax-violation?) (set! g4ce5@g4b1c@g4b09 g4b1c@g4b09) (set! g4ce4@g4b1a@g4b07 g4b1a@g4b07) (set! g4ce3@g4b18@make-syntax-violation g4b18@make-syntax-violation) (set! g4ce2@g4b16@p? g4b16@p?) (set! g4ce1@g4b13@g4b0b g4b13@g4b0b) (set! g4ce0@g4b11@g4b0c g4b11@g4b0c) (set! g4cdf@g4b0f@g4b0a g4b0f@g4b0a) (set! g4cde@g4b05@&lexical-rcd g4b05@&lexical-rcd) (set! g4cdd@g4b03@&lexical-rtd g4b03@&lexical-rtd) (set! g4cdc@g4b01@lexical-violation? g4b01@lexical-violation?) (set! g4cdb@g4aff@make-lexical-violation g4aff@make-lexical-violation) (set! g4cda@g4afd@p? g4afd@p?) (set! g4cd9@g4afa@g4af2 g4afa@g4af2) (set! g4cd8@g4af8@g4af3 g4af8@g4af3) (set! g4cd7@g4af6@g4af1 g4af6@g4af1) (set! g4cd6@g4af0@&implementation-restriction-rcd g4af0@&implementation-restriction-rcd) (set! g4cd5@g4aee@&implementation-restriction-rtd g4aee@&implementation-restriction-rtd) (set! g4cd4@g4aec@implementation-restriction-violation? g4aec@implementation-restriction-violation?) (set! g4cd3@g4aea@make-implementation-restriction-violation g4aea@make-implementation-restriction-violation) (set! g4cd2@g4ae8@p? g4ae8@p?) (set! g4cd1@g4ae5@g4add g4ae5@g4add) (set! g4cd0@g4ae3@g4ade g4ae3@g4ade) (set! g4ccf@g4ae1@g4adc g4ae1@g4adc) (set! g4cce@g4adb@&non-continuable-rcd g4adb@&non-continuable-rcd) (set! g4ccd@g4ad9@&non-continuable-rtd g4ad9@&non-continuable-rtd) (set! g4ccc@g4ad7@non-continuable-violation? g4ad7@non-continuable-violation?) (set! g4ccb@g4ad5@make-non-continuable-violation g4ad5@make-non-continuable-violation) (set! g4cca@g4ad3@p? g4ad3@p?) (set! g4cc9@g4ad0@g4ac8 g4ad0@g4ac8) (set! g4cc8@g4ace@g4ac9 g4ace@g4ac9) (set! g4cc7@g4acc@g4ac7 g4acc@g4ac7) (set! g4cc6@g4ac6@&who-rcd g4ac6@&who-rcd) (set! g4cc5@g4ac4@&who-rtd g4ac4@&who-rtd) (set! g4cc4@g4ac2@condition-who g4ac2@condition-who) (set! g4cc3@g4ac0@who-condition? g4ac0@who-condition?) (set! g4cc2@g4abe@g4aad g4abe@g4aad) (set! g4cc1@g4abc@make-who-condition g4abc@make-who-condition) (set! g4cc0@g4aba@p? g4aba@p?) (set! g4cbf@g4ab7@g4aaf g4ab7@g4aaf) (set! g4cbe@g4ab5@g4ab0 g4ab5@g4ab0) (set! g4cbd@g4ab3@g4aae g4ab3@g4aae) (set! g4cbc@g4aab@&irritants-rcd g4aab@&irritants-rcd) (set! g4cbb@g4aa9@&irritants-rtd g4aa9@&irritants-rtd) (set! g4cba@g4aa7@condition-irritants g4aa7@condition-irritants) (set! g4cb9@g4aa5@irritants-condition? g4aa5@irritants-condition?) (set! g4cb8@g4aa3@g4a92 g4aa3@g4a92) (set! g4cb7@g4aa1@make-irritants-condition g4aa1@make-irritants-condition) (set! g4cb6@g4a9f@p? g4a9f@p?) (set! g4cb5@g4a9c@g4a94 g4a9c@g4a94) (set! g4cb4@g4a9a@g4a95 g4a9a@g4a95) (set! g4cb3@g4a98@g4a93 g4a98@g4a93) (set! g4cb2@g4a90@&assertion-rcd g4a90@&assertion-rcd) (set! g4cb1@g4a8e@&assertion-rtd g4a8e@&assertion-rtd) (set! g4cb0@g4a8c@assertion-violation? g4a8c@assertion-violation?) (set! g4caf@g4a8a@make-assertion-violation g4a8a@make-assertion-violation) (set! g4cae@g4a88@p? g4a88@p?) (set! g4cad@g4a85@g4a7d g4a85@g4a7d) (set! g4cac@g4a83@g4a7e g4a83@g4a7e) (set! g4cab@g4a81@g4a7c g4a81@g4a7c) (set! g4caa@g4a7b@&violation-rcd g4a7b@&violation-rcd) (set! g4ca9@g4a79@&violation-rtd g4a79@&violation-rtd) (set! g4ca8@g4a77@violation? g4a77@violation?) (set! g4ca7@g4a75@make-violation g4a75@make-violation) (set! g4ca6@g4a73@p? g4a73@p?) (set! g4ca5@g4a70@g4a68 g4a70@g4a68) (set! g4ca4@g4a6e@g4a69 g4a6e@g4a69) (set! g4ca3@g4a6c@g4a67 g4a6c@g4a67) (set! g4ca2@g4a66@&error-rcd g4a66@&error-rcd) (set! g4ca1@g4a64@&error-rtd g4a64@&error-rtd) (set! g4ca0@g4a62@error? g4a62@error?) (set! g4c9f@g4a60@make-error g4a60@make-error) (set! g4c9e@g4a5e@p? g4a5e@p?) (set! g4c9d@g4a5b@g4a53 g4a5b@g4a53) (set! g4c9c@g4a59@g4a54 g4a59@g4a54) (set! g4c9b@g4a57@g4a52 g4a57@g4a52) (set! g4c9a@g4a51@&serious-rcd g4a51@&serious-rcd) (set! g4c99@g4a4f@&serious-rtd g4a4f@&serious-rtd) (set! g4c98@g4a4d@serious-condition? g4a4d@serious-condition?) (set! g4c97@g4a4b@make-serious-condition g4a4b@make-serious-condition) (set! g4c96@g4a49@p? g4a49@p?) (set! g4c95@g4a46@g4a3e g4a46@g4a3e) (set! g4c94@g4a44@g4a3f g4a44@g4a3f) (set! g4c93@g4a42@g4a3d g4a42@g4a3d) (set! g4c92@g4a3c@&warning-rcd g4a3c@&warning-rcd) (set! g4c91@g4a3a@&warning-rtd g4a3a@&warning-rtd) (set! g4c90@g4a38@warning? g4a38@warning?) (set! g4c8f@g4a36@make-warning g4a36@make-warning) (set! g4c8e@g4a34@p? g4a34@p?) (set! g4c8d@g4a31@g4a29 g4a31@g4a29) (set! g4c8c@g4a2f@g4a2a g4a2f@g4a2a) (set! g4c8b@g4a2d@g4a28 g4a2d@g4a28) (set! g4c8a@g4a27@&message-rcd g4a27@&message-rcd) (set! g4c89@g4a25@&message-rtd g4a25@&message-rtd) (set! g4c88@g4a23@condition-message g4a23@condition-message) (set! g4c87@g4a21@message-condition? g4a21@message-condition?) (set! g4c86@g4a1f@g4a0e g4a1f@g4a0e) (set! g4c85@g4a1d@make-message-condition g4a1d@make-message-condition) (set! g4c84@g4a1b@p? g4a1b@p?) (set! g4c83@g4a18@g4a10 g4a18@g4a10) (set! g4c82@g4a16@g4a11 g4a16@g4a11) (set! g4c81@g4a14@g4a0f g4a14@g4a0f) (set! g4c80@g49c8@&condition-rcd g49c8@&condition-rcd) (set! g4c7f@g49c6@&condition-rtd g49c6@&condition-rtd) (set! g4c7e@g49c4@make-&condition g49c4@make-&condition) (set! g4c7d@g49c2@&condition? g49c2@&condition?) (set! g4c7c@g49bf@g49b7 g49bf@g49b7) (set! g4c7b@g49bd@g49b8 g49bd@g49b8) (set! g4c7a@g49bb@g49b6 g49bb@g49b6)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (g28b9@g286e@current-primitive-locations (lambda (g51aa@x) ((lambda (g51ac@t) (if g51ac@t (cdr g51ac@t) '#f)) (assq g51aa@x '((&no-nans-rcd . g4d6a@g4c79@&no-nans-rcd) (&no-nans-rtd . g4d69@g4c77@&no-nans-rtd) (&no-infinities-rcd . g4d62@g4c64@&no-infinities-rcd) (&no-infinities-rtd . g4d61@g4c62@&no-infinities-rtd) (&i/o-encoding-rcd . g4d5a@g4c4f@&i/o-encoding-rcd) (&i/o-encoding-rtd . g4d59@g4c4d@&i/o-encoding-rtd) (&i/o-decoding-rcd . g4d50@g4c34@&i/o-decoding-rcd) (&i/o-decoding-rtd . g4d4f@g4c32@&i/o-decoding-rtd) (&i/o-port-rcd . g4d48@g4c1f@&i/o-port-rcd) (&i/o-port-rtd . g4d47@g4c1d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . g4d3e@g4c04@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . g4d3d@g4c02@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . g4d36@g4bef@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . g4d35@g4bed@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . g4d2e@g4bda@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . g4d2d@g4bd8@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . g4d26@g4bc5@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . g4d25@g4bc3@&i/o-file-protection-rtd) (&i/o-filename-rcd . g4d1e@g4bb0@&i/o-filename-rcd) (&i/o-filename-rtd . g4d1d@g4bae@&i/o-filename-rtd) (&i/o-invalid-position-rcd . g4d14@g4b95@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . g4d13@g4b93@&i/o-invalid-position-rtd) (&i/o-write-rcd . g4d0a@g4b7a@&i/o-write-rcd) (&i/o-write-rtd . g4d09@g4b78@&i/o-write-rtd) (&i/o-read-rcd . g4d02@g4b65@&i/o-read-rcd) (&i/o-read-rtd . g4d01@g4b63@&i/o-read-rtd) (&i/o-rcd . g4cfa@g4b50@&i/o-rcd) (&i/o-rtd . g4cf9@g4b4e@&i/o-rtd) (&undefined-rcd . g4cf2@g4b3b@&undefined-rcd) (&undefined-rtd . g4cf1@g4b39@&undefined-rtd) (&syntax-rcd . g4cea@g4b26@&syntax-rcd) (&syntax-rtd . g4ce9@g4b24@&syntax-rtd) (&lexical-rcd . g4cde@g4b05@&lexical-rcd) (&lexical-rtd . g4cdd@g4b03@&lexical-rtd) (&implementation-restriction-rcd . g4cd6@g4af0@&implementation-restriction-rcd) (&implementation-restriction-rtd . g4cd5@g4aee@&implementation-restriction-rtd) (&non-continuable-rcd . g4cce@g4adb@&non-continuable-rcd) (&non-continuable-rtd . g4ccd@g4ad9@&non-continuable-rtd) (&who-rcd . g4cc6@g4ac6@&who-rcd) (&who-rtd . g4cc5@g4ac4@&who-rtd) (&irritants-rcd . g4cbc@g4aab@&irritants-rcd) (&irritants-rtd . g4cbb@g4aa9@&irritants-rtd) (&assertion-rcd . g4cb2@g4a90@&assertion-rcd) (&assertion-rtd . g4cb1@g4a8e@&assertion-rtd) (&violation-rcd . g4caa@g4a7b@&violation-rcd) (&violation-rtd . g4ca9@g4a79@&violation-rtd) (&error-rcd . g4ca2@g4a66@&error-rcd) (&error-rtd . g4ca1@g4a64@&error-rtd) (&serious-rcd . g4c9a@g4a51@&serious-rcd) (&serious-rtd . g4c99@g4a4f@&serious-rtd) (&warning-rcd . g4c92@g4a3c@&warning-rcd) (&warning-rtd . g4c91@g4a3a@&warning-rtd) (&message-rcd . g4c8a@g4a27@&message-rcd) (&message-rtd . g4c89@g4a25@&message-rtd) (&condition-rcd . g4c80@g49c8@&condition-rcd) (&condition-rtd . g4c7f@g49c6@&condition-rtd) (syntax-error . g49a8@g2fae@syntax-error) (syntax-dispatch . g493d@g2ec9@syntax-dispatch) (load . g4e9b@g4d86@load) (interaction-environment . g49b0@g2fbe@interaction-environment) (library-path . g2ad0@g295f@library-path) (make-parameter . g2868@g2792@make-parameter) (make-variable-transformer . g48fb@g2cf6@make-variable-transformer) (identifier? . g49ab@g2fb4@identifier?) (generate-temporaries . g49a1@g2fa0@generate-temporaries) (free-identifier=? . g49a2@g2fa2@free-identifier=?) (syntax->datum . g49ad@g2fb8@syntax->datum) (datum->syntax . g49ac@g2fb6@datum->syntax) (bound-identifier=? . g49a3@g2fa4@bound-identifier=?) (make-i/o-write-error . g4d07@g4b74@make-i/o-write-error) (make-i/o-read-error . g4cff@g4b5f@make-i/o-read-error) (make-i/o-port-error . g4d43@g4c15@make-i/o-port-error) (make-i/o-invalid-position-error . g4d0f@g4b8b@make-i/o-invalid-position-error) (make-i/o-filename-error . g4d19@g4ba6@make-i/o-filename-error) (make-i/o-file-protection-error . g4d23@g4bbf@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . g4d2b@g4bd4@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . g4d3b@g4bfe@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . g4d33@g4be9@make-i/o-file-already-exists-error) (make-i/o-error . g4cf7@g4b4a@make-i/o-error) (make-i/o-encoding-error . g4d55@g4c45@make-i/o-encoding-error) (make-i/o-decoding-error . g4d4d@g4c2e@make-i/o-decoding-error) (i/o-write-error? . g4d08@g4b76@i/o-write-error?) (i/o-read-error? . g4d00@g4b61@i/o-read-error?) (i/o-port-error? . g4d45@g4c19@i/o-port-error?) (i/o-invalid-position-error? . g4d11@g4b8f@i/o-invalid-position-error?) (i/o-filename-error? . g4d1b@g4baa@i/o-filename-error?) (i/o-file-protection-error? . g4d24@g4bc1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . g4d2c@g4bd6@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . g4d3c@g4c00@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . g4d34@g4beb@i/o-file-already-exists-error?) (i/o-error? . g4cf8@g4b4c@i/o-error?) (i/o-error-position . g4d12@g4b91@i/o-error-position) (i/o-error-port . g4d46@g4c1b@i/o-error-port) (i/o-error-filename . g4d1c@g4bac@i/o-error-filename) (i/o-encoding-error? . g4d57@g4c49@i/o-encoding-error?) (i/o-encoding-error-char . g4d58@g4c4b@i/o-encoding-error-char) (i/o-decoding-error? . g4d4e@g4c30@i/o-decoding-error?) (scheme-report-environment . g4998@g2f8e@scheme-report-environment) (null-environment . g4997@g2f8c@null-environment) (command-line . g4e98@g4d80@command-line) (eval . g499a@g2f92@eval) (environment . g4996@g2f8a@environment) (who-condition? . g4cc3@g4ac0@who-condition?) (warning? . g4c90@g4a38@warning?) (violation? . g4ca8@g4a77@violation?) (undefined-violation? . g4cf0@g4b37@undefined-violation?) (syntax-violation? . g4ce6@g4b1e@syntax-violation?) (syntax-violation-subform . g4ce8@g4b22@syntax-violation-subform) (syntax-violation-form . g4ce7@g4b20@syntax-violation-form) (syntax-violation . g49aa@g2fb2@syntax-violation) (serious-condition? . g4c98@g4a4d@serious-condition?) (non-continuable-violation? . g4ccc@g4ad7@non-continuable-violation?) (message-condition? . g4c87@g4a21@message-condition?) (make-who-condition . g4cc1@g4abc@make-who-condition) (make-warning . g4c8f@g4a36@make-warning) (make-violation . g4ca7@g4a75@make-violation) (make-undefined-violation . g4cef@g4b35@make-undefined-violation) (make-syntax-violation . g4ce3@g4b18@make-syntax-violation) (make-serious-condition . g4c97@g4a4b@make-serious-condition) (make-non-continuable-violation . g4ccb@g4ad5@make-non-continuable-violation) (make-message-condition . g4c85@g4a1d@make-message-condition) (make-lexical-violation . g4cdb@g4aff@make-lexical-violation) (make-irritants-condition . g4cb7@g4aa1@make-irritants-condition) (make-implementation-restriction-violation . g4cd3@g4aea@make-implementation-restriction-violation) (make-error . g4c9f@g4a60@make-error) (make-assertion-violation . g4caf@g4a8a@make-assertion-violation) (lexical-violation? . g4cdc@g4b01@lexical-violation?) (irritants-condition? . g4cb9@g4aa5@irritants-condition?) (implementation-restriction-violation? . g4cd4@g4aec@implementation-restriction-violation?) (error? . g4ca0@g4a62@error?) (condition-who . g4cc4@g4ac2@condition-who) (condition-message . g4c88@g4a23@condition-message) (condition-irritants . g4cba@g4aa7@condition-irritants) (assertion-violation? . g4cb0@g4a8c@assertion-violation?) (no-nans-violation? . g4d68@g4c75@no-nans-violation?) (no-infinities-violation? . g4d60@g4c60@no-infinities-violation?) (make-no-nans-violation . g4d67@g4c73@make-no-nans-violation) (make-no-infinities-violation . g4d5f@g4c5e@make-no-infinities-violation) (assertion-error . g49a7@g2fac@assertion-error)))))) (g2ae0@g297f@install-library 'g5187 '(mosh interaction) '() '() '() '() '((regexp? . g517f) (alist->eq-hash-table . g517c) (format . g5179) (string-split . g516e) (call-process . g5168) (set-current-directory! . g5164) (expand-path . g5163) (current-directory . g5162) (%spawn . g5161) (%waitpid . g5160) (%ffi-supported? . g515f) (%ffi-pointer-ref . g515e) (%ffi-pointer->string . g515d) (%ffi-call->string-or-zero . g515c) (%ffi-call->double . g515b) (%ffi-call->void* . g515a) (%ffi-call->void . g5159) (%ffi-call->int . g5158) (%ffi-lookup . g5157) (%ffi-open . g5156) (%fork . g5155) (%pipe . g5154) (p . g5153) (whereis . g514b) (register . g514a) (vm-join! . g5149) (vm-set-value! . g5148) (vm? . g5147) (main-vm? . g5146) (vm-eval . g5145) (vm-self . g5144) (vm-start! . g5143) (make-vm . g5142) (mutex-try-lock! . g5141) (mutex-unlock! . g5140) (mutex-lock! . g513f) (mutex? . g513e) (make-mutex . g513d) (condition-variable-notify-all! . g513c) (condition-variable-notify! . g513b) (condition-variable-wait! . g513a) (make-condition-variable . g5139) (string-upcase . g5122) (string-titlecase . g5121) (string-normalize-nfkd . g5120) (string-normalize-nfkc . g511f) (string-normalize-nfd . g511e) (string-normalize-nfc . g511d) (string-foldcase . g511c) (string-downcase . g511b) (string-ci>? . g511a) (string-ci>=? . g5119) (string-ci=? . g5118) (string-ci<? . g5117) (string-ci<=? . g5116) (char-whitespace? . g5115) (char-upper-case? . g5114) (char-title-case? . g5113) (char-numeric? . g5112) (char-lower-case? . g5111) (char-general-category . g5110) (char-upcase . g510f) (char-titlecase . g510e) (char-foldcase . g510d) (char-downcase . g510c) (char-ci>? . g510b) (char-ci>=? . g510a) (char-ci=? . g5109) (char-ci<? . g5108) (char-ci<=? . g5107) (char-alphabetic? . g5106) (make-variable-transformer . g2cf5) (identifier? . g2fb3) (generate-temporaries . g2f9f) (free-identifier=? . g2fa1) (syntax->datum . g2fb7) (datum->syntax . g2fb5) (bound-identifier=? . g2fa3) (record-type-descriptor? . g5105) (record-predicate . g5104) (record-mutator . g5103) (record-constructor . g5102) (record-accessor . g5101) (make-record-type-descriptor . g5100) (make-record-constructor-descriptor . g50ff) (record? . g50fe) (record-type-uid . g50fd) (record-type-sealed? . g50fc) (record-type-parent . g50fb) (record-type-opaque? . g50fa) (record-type-name . g50f9) (record-type-generative? . g50f8) (record-type-field-names . g50f7) (record-rtd . g50f6) (record-field-mutable? . g50f5) (delete-file . g50f4) (file-exists? . g50f3) (vector-sort! . g50f2) (vector-sort . g50f1) (list-sort . g50f0) (symbol-hash . g50ef) (string-ci-hash . g50ee) (string-hash . g50ed) (equal-hash . g50ec) (hashtable-equivalence-function . g50eb) (make-hashtable . g50ea) (hashtable-hash-function . g50e9) (make-eqv-hashtable . g50e8) (make-eq-hashtable . g50e7) (hashtable? . g50e6) (hashtable-update! . g50e5) (hashtable-size . g50e4) (hashtable-set! . g50e3) (hashtable-ref . g50e2) (hashtable-mutable? . g50e1) (hashtable-keys . g50e0) (hashtable-entries . g50df) (hashtable-delete! . g50de) (hashtable-copy . g50dd) (hashtable-contains? . g50dc) (hashtable-clear! . g50db) (call-with-output-file . g50da) (call-with-input-file . g50d9) (write-char . g50d8) (write . g50d7) (with-output-to-file . g50d6) (with-input-from-file . g50d5) (read-char . g50d4) (read . g50d3) (peek-char . g50d2) (open-output-file . g50d1) (open-input-file . g50d0) (newline . g50cf) (display . g50ce) (close-output-port . g50cd) (close-input-port . g50cc) (eof-object? . g50cb) (eof-object . g50ca) (current-error-port . g50c9) (current-output-port . g50c8) (current-input-port . g50c7) (output-port? . g50c6) (input-port? . g50c5) (utf-8-codec . g50c4) (utf-16-codec . g50c3) (transcoder-error-handling-mode . g50c2) (transcoder-eol-style . g50c1) (transcoder-codec . g50c0) (transcoded-port . g50bf) (textual-port? . g50be) (string->bytevector . g50bd) (standard-output-port . g50bc) (standard-input-port . g50bb) (standard-error-port . g50ba) (set-port-position! . g50b9) (put-u8 . g50b8) (put-string . g50b7) (put-datum . g50b6) (put-char . g50b5) (put-bytevector . g50b4) (port? . g50b3) (port-transcoder . g50b2) (port-position . g50b1) (port-has-set-port-position!? . g50b0) (port-has-port-position? . g50af) (port-eof? . g50ae) (output-port-buffer-mode . g50ad) (open-string-output-port . g50ac) (open-string-input-port . g50ab) (open-file-output-port . g50aa) (open-file-input/output-port . g50a9) (open-file-input-port . g50a8) (open-bytevector-output-port . g50a7) (open-bytevector-input-port . g50a6) (native-transcoder . g50a5) (native-eol-style . g50a4) (make-transcoder . g50a3) (latin-1-codec . g50a2) (make-i/o-write-error . g4b73) (make-i/o-read-error . g4b5e) (make-i/o-port-error . g4c14) (make-i/o-invalid-position-error . g4b8a) (make-i/o-filename-error . g4ba5) (make-i/o-file-protection-error . g4bbe) (make-i/o-file-is-read-only-error . g4bd3) (make-i/o-file-does-not-exist-error . g4bfd) (make-i/o-file-already-exists-error . g4be8) (make-i/o-error . g4b49) (make-i/o-encoding-error . g4c44) (make-i/o-decoding-error . g4c2d) (make-custom-textual-output-port . g50a1) (make-custom-textual-input/output-port . g50a0) (make-custom-textual-input-port . g509f) (make-custom-binary-output-port . g509e) (make-custom-binary-input/output-port . g509d) (make-custom-binary-input-port . g509c) (make-bytevector . g509b) (lookahead-u8 . g509a) (lookahead-char . g5099) (i/o-write-error? . g4b75) (i/o-read-error? . g4b60) (i/o-port-error? . g4c18) (i/o-invalid-position-error? . g4b8e) (i/o-filename-error? . g4ba9) (i/o-file-protection-error? . g4bc0) (i/o-file-is-read-only-error? . g4bd5) (i/o-file-does-not-exist-error? . g4bff) (i/o-file-already-exists-error? . g4bea) (i/o-error? . g4b4b) (i/o-error-position . g4b90) (i/o-error-port . g4c1a) (i/o-error-filename . g4bab) (i/o-encoding-error? . g4c48) (i/o-encoding-error-char . g4c4a) (i/o-decoding-error? . g4c2f) (get-u8 . g5098) (get-string-n! . g5097) (get-string-n . g5096) (get-string-all . g5095) (get-line . g5094) (get-datum . g5093) (get-char . g5092) (get-bytevector-some . g5091) (get-bytevector-n! . g5090) (get-bytevector-n . g508f) (get-bytevector-all . g508e) (flush-output-port . g508d) (close-port . g508c) (exit . g5084) (command-line . g4d7f) (string-fill! . g5083) (string-set! . g5082) (set-cdr! . g5081) (set-car! . g5080) (remove . g507f) (remv . g507e) (remp . g507d) (remq . g507c) (partition . g507b) (memv . g507a) (memq . g5079) (memp . g5078) (member . g5077) (exists . g5076) (for-all . g5075) (fold-right . g5074) (fold-left . g5073) (find . g5072) (filter . g5071) (cons* . g5070) (assv . g506f) (assq . g506e) (assp . g506d) (assoc . g506c) (call-with-string-output-port . g506b) (call-with-port . g506a) (call-with-bytevector-output-port . g5069) (bytevector->string . g5068) (buffer-mode? . g5067) (binary-port? . g5066) (with-exception-handler . g5065) (raise-continuable . g5064) (raise . g5063) (eval . g2f91) (environment . g2f89) (make-enumeration . g5062) (enum-set=? . g5061) (enum-set-universe . g5060) (enum-set-union . g505f) (enum-set-subset? . g505e) (enum-set-projection . g505d) (enum-set-member? . g505c) (enum-set-intersection . g505b) (enum-set-indexer . g505a) (enum-set-difference . g5059) (enum-set-constructor . g5058) (enum-set-complement . g5057) (enum-set->list . g5056) (who-condition? . g4abf) (warning? . g4a37) (violation? . g4a76) (undefined-violation? . g4b36) (syntax-violation? . g4b1d) (syntax-violation-subform . g4b21) (syntax-violation-form . g4b1f) (syntax-violation . g2fb1) (simple-conditions . g5055) (serious-condition? . g4a4c) (non-continuable-violation? . g4ad6) (message-condition? . g4a20) (make-who-condition . g4abb) (make-warning . g4a35) (make-violation . g4a74) (make-undefined-violation . g4b34) (make-syntax-violation . g4b17) (make-serious-condition . g4a4a) (make-non-continuable-violation . g4ad4) (make-message-condition . g4a1c) (make-lexical-violation . g4afe) (make-irritants-condition . g4aa0) (make-implementation-restriction-violation . g4ae9) (make-error . g4a5f) (make-assertion-violation . g4a89) (lexical-violation? . g4b00) (irritants-condition? . g4aa4) (implementation-restriction-violation? . g4aeb) (error? . g4a61) (condition-who . g4ac1) (condition-predicate . g5054) (condition-message . g4a22) (condition-irritants . g4aa6) (condition-accessor . g5053) (condition . g5052) (assertion-violation? . g4a8b) (condition? . g5051) (utf32->string . g5050) (utf16->string . g504f) (utf8->string . g504e) (uint-list->bytevector . g504d) (u8-list->bytevector . g504c) (string->utf8 . g504b) (string->utf32 . g504a) (string->utf16 . g5049) (sint-list->bytevector . g5048) (native-endianness . g5047) (bytevector? . g5046) (bytevector=? . g5045) (bytevector-uint-set! . g5044) (bytevector-uint-ref . g5043) (bytevector-u8-set! . g5042) (bytevector-u8-ref . g5041) (bytevector-u64-set! . g5040) (bytevector-u64-ref . g503f) (bytevector-u64-native-set! . g503e) (bytevector-u64-native-ref . g503d) (bytevector-u32-set! . g503c) (bytevector-u32-ref . g503b) (bytevector-u32-native-set! . g503a) (bytevector-u32-native-ref . g5039) (bytevector-u16-set! . g5038) (bytevector-u16-ref . g5037) (bytevector-u16-native-set! . g5036) (bytevector-u16-native-ref . g5035) (bytevector-sint-set! . g5034) (bytevector-sint-ref . g5033) (bytevector-s8-set! . g5032) (bytevector-s8-ref . g5031) (bytevector-s64-set! . g5030) (bytevector-s64-ref . g502f) (bytevector-s64-native-set! . g502e) (bytevector-s64-native-ref . g502d) (bytevector-s32-set! . g502c) (bytevector-s32-ref . g502b) (bytevector-s32-native-set! . g502a) (bytevector-s32-native-ref . g5029) (bytevector-s16-set! . g5028) (bytevector-s16-ref . g5027) (bytevector-s16-native-set! . g5026) (bytevector-s16-native-ref . g5025) (bytevector-length . g5024) (bytevector-ieee-single-ref . g5023) (bytevector-ieee-single-set! . g5022) (bytevector-ieee-single-native-set! . g5021) (bytevector-ieee-single-native-ref . g5020) (bytevector-ieee-double-set! . g501f) (bytevector-ieee-double-ref . g501e) (bytevector-ieee-double-native-set! . g501d) (bytevector-ieee-double-native-ref . g501c) (bytevector-fill! . g501b) (bytevector-copy! . g501a) (bytevector-copy . g5019) (bytevector->uint-list . g5018) (bytevector->u8-list . g5017) (bytevector->sint-list . g5016) (no-nans-violation? . g4c74) (no-infinities-violation? . g4c5f) (make-no-nans-violation . g4c72) (make-no-infinities-violation . g4c5d) (real->flonum . g5015) (flzero? . g5014) (fltruncate . g5013) (fltan . g5012) (flsqrt . g5011) (flsin . g5010) (flround . g500f) (flpositive? . g500e) (flonum? . g500d) (flodd? . g500c) (flnumerator . g500b) (flnegative? . g500a) (flnan? . g5009) (flmod0 . g5008) (flmod . g5007) (flmin . g5006) (flmax . g5005) (fllog . g5004) (flinteger? . g5003) (flinfinite? . g5002) (flfloor . g5001) (flfinite? . g5000) (flexpt . g4fff) (flexp . g4ffe) (fleven? . g4ffd) (fldiv0-and-mod0 . g4ffc) (fldiv0 . g4ffb) (fldiv-and-mod . g4ffa) (fldiv . g4ff9) (fldenominator . g4ff8) (flcos . g4ff7) (flceiling . g4ff6) (flatan . g4ff5) (flasin . g4ff4) (flacos . g4ff3) (flabs . g4ff2) (fl>? . g4ff1) (fl>=? . g4ff0) (fl=? . g4fef) (fl<? . g4fee) (fl<=? . g4fed) (fl/ . g4fec) (fl- . g4feb) (fl+ . g4fea) (fl* . g4fe9) (fixnum->flonum . g4fe8) (fxzero? . g4fe7) (fxxor . g4fe6) (fxrotate-bit-field . g4fe5) (fxreverse-bit-field . g4fe4) (fxpositive? . g4fe3) (fxodd? . g4fe2) (fxnot . g4fe1) (fxnegative? . g4fe0) (fxmod0 . g4fdf) (fxmod . g4fde) (fxmin . g4fdd) (fxmax . g4fdc) (fxlength . g4fdb) (fxior . g4fda) (fxif . g4fd9) (fxfirst-bit-set . g4fd8) (fxeven? . g4fd7) (fxdiv0-and-mod0 . g4fd6) (fxdiv0 . g4fd5) (fxdiv-and-mod . g4fd4) (fxdiv . g4fd3) (fxcopy-bit-field . g4fd2) (fxcopy-bit . g4fd1) (fxbit-set? . g4fd0) (fxbit-field . g4fcf) (fxbit-count . g4fce) (fxarithmetic-shift-right . g4fcd) (fxarithmetic-shift-left . g4fcc) (fxarithmetic-shift . g4fcb) (fxand . g4fca) (fx>? . g4fc9) (fx>=? . g4fc8) (fx=? . g4fc7) (fx<? . g4fc6) (fx<=? . g4fc5) (fx-/carry . g4fc4) (fx- . g4fc3) (fx+/carry . g4fc2) (fx+ . g4fc1) (fx*/carry . g4fc0) (fx* . g4fbf) (greatest-fixnum . g4fbe) (least-fixnum . g4fbd) (fixnum-width . g4fbc) (fixnum? . g4fbb) (bitwise-rotate-bit-field . g4fba) (bitwise-reverse-bit-field . g4fb9) (bitwise-length . g4fb8) (bitwise-if . g4fb7) (bitwise-first-bit-set . g4fb6) (bitwise-copy-bit-field . g4fb5) (bitwise-copy-bit . g4fb4) (bitwise-bit-set? . g4fb3) (bitwise-bit-field . g4fb2) (bitwise-bit-count . g4fb1) (bitwise-xor . g4fb0) (bitwise-ior . g4faf) (bitwise-and . g4fae) (bitwise-not . g4fad) (bitwise-arithmetic-shift-right . g4fac) (bitwise-arithmetic-shift-left . g4fab) (bitwise-arithmetic-shift . g4faa) (zero? . g4fa9) (vector? . g4fa8) (vector-set! . g4fa7) (vector-ref . g4fa6) (vector-map . g4fa5) (vector-length . g4fa4) (vector-for-each . g4fa3) (vector-fill! . g4fa2) (vector->list . g4fa1) (vector . g4fa0) (values . g4f9f) (truncate . g4f9e) (tan . g4f9d) (symbol? . g4f9c) (symbol=? . g4f9b) (symbol->string . g4f9a) (substring . g4f99) (string? . g4f98) (string>? . g4f97) (string>=? . g4f96) (string=? . g4f95) (string<? . g4f94) (string<=? . g4f93) (string-ref . g4f92) (string-length . g4f91) (string-for-each . g4f90) (string-copy . g4f8f) (string-append . g4f8e) (string->symbol . g4f8d) (string->number . g4f8c) (string->list . g4f8b) (string . g4f8a) (sqrt . g4f89) (sin . g4f88) (round . g4f87) (reverse . g4f86) (real? . g4f85) (real-valued? . g4f84) (real-part . g4f83) (rationalize . g4f82) (rational? . g4f81) (rational-valued? . g4f80) (procedure? . g4f7f) (positive? . g4f7e) (pair? . g4f7d) (odd? . g4f7c) (numerator . g4f7b) (number? . g4f7a) (number->string . g4f79) (null? . g4f78) (not . g4f77) (negative? . g4f76) (nan? . g4f75) (min . g4f74) (max . g4f73) (map . g4f72) (make-vector . g4f71) (make-string . g4f70) (make-rectangular . g4f6f) (make-polar . g4f6e) (magnitude . g4f6d) (log . g4f6c) (list? . g4f6b) (list-tail . g4f6a) (list-ref . g4f69) (list->vector . g4f68) (list->string . g4f67) (list . g4f66) (length . g4f65) (lcm . g4f64) (integer? . g4f63) (integer-valued? . g4f62) (integer->char . g4f61) (infinite? . g4f60) (inexact? . g4f5f) (inexact . g4f5e) (imag-part . g4f5d) (gcd . g4f5c) (for-each . g4f5b) (floor . g4f5a) (finite? . g4f59) (expt . g4f58) (exp . g4f57) (exact? . g4f56) (exact-integer-sqrt . g4f55) (exact . g4f54) (even? . g4f53) (error . g4f52) (eqv? . g4f51) (equal? . g4f50) (eq? . g4f4f) (dynamic-wind . g4f4e) (div0-and-mod0 . g4f4d) (mod0 . g4f4c) (div0 . g4f4b) (div-and-mod . g4f4a) (mod . g4f49) (div . g4f48) (denominator . g4f47) (cos . g4f46) (cons . g4f45) (complex? . g4f44) (char? . g4f43) (char>? . g4f42) (char>=? . g4f41) (char=? . g4f40) (char<? . g4f3f) (char<=? . g4f3e) (char->integer . g4f3d) (ceiling . g4f3c) (call-with-values . g4f3b) (call/cc . g4f3a) (call-with-current-continuation . g4f39) (cddddr . g4f38) (cdddar . g4f37) (cddadr . g4f36) (cddaar . g4f35) (cdaddr . g4f34) (cdadar . g4f33) (cdaadr . g4f32) (cdaaar . g4f31) (cadddr . g4f30) (caddar . g4f2f) (cadadr . g4f2e) (cadaar . g4f2d) (caaddr . g4f2c) (caadar . g4f2b) (caaadr . g4f2a) (caaaar . g4f29) (cdddr . g4f28) (cddar . g4f27) (cdadr . g4f26) (cdaar . g4f25) (caddr . g4f24) (cadar . g4f23) (caadr . g4f22) (caaar . g4f21) (cddr . g4f20) (cdar . g4f1f) (cadr . g4f1e) (caar . g4f1d) (cdr . g4f1c) (car . g4f1b) (boolean? . g4f1a) (boolean=? . g4f19) (atan . g4f18) (assertion-violation . g4f17) (asin . g4f16) (apply . g4f15) (append . g4f14) (angle . g4f13) (acos . g4f12) (abs . g4f11) (/ . g4f10) (* . g4f0f) (- . g4f0e) (+ . g4f0d) (>= . g4f0c) (> . g4f0b) (= . g4f0a) (<= . g4f09) (< . g4f08) (library . g4f07) (&no-nans . g4f06) (&no-infinities . g4f05) (&i/o-encoding . g4f04) (&i/o-decoding . g4f03) (&i/o-port . g4f02) (&i/o-file-does-not-exist . g4f01) (&i/o-file-already-exists . g4f00) (&i/o-file-is-read-only . g4eff) (&i/o-file-protection . g4efe) (&i/o-filename . g4efd) (&i/o-invalid-position . g4efc) (&i/o-write . g4efb) (&i/o-read . g4efa) (&i/o . g4ef9) (&undefined . g4ef8) (&syntax . g4ef7) (&lexical . g4ef6) (&implementation-restriction . g4ef5) (&non-continuable . g4ef4) (&who . g4ef3) (&irritants . g4ef2) (&assertion . g4ef1) (&violation . g4ef0) (&error . g4eef) (&serious . g4eee) (&warning . g4eed) (&message . g4eec) (&condition . g4eeb) (define-condition-type . g4eea) (define-enumeration . g4ee9) (define-record-type . g4ee8) (parent-rtd . g4ee7) (nongenerative . g4ee6) (opaque . g4ee5) (sealed . g4ee4) (protocol . g4ee3) (parent . g4ee2) (immutable . g4ee1) (mutable . g4ee0) (fields . g4edf) (error-handling-mode . g4ede) (file-options . g4edd) (buffer-mode . g4edc) (eol-style . g4edb) (guard . g4eda) (unsyntax-splicing . g4ed7) (unsyntax . g4ed6) (unquote-splicing . g4ed5) (unquote . g4ed4) (_ . g4ed3) (else . g4ed2) (=> . g4ed1) (... . g4ed0) (assert . g4ecf) (endianness . g4ece) (time . g4ecc) (do . g4ecb) (cond . g4eca) (let* . g4ec9) (let . g4ec8) (let*-values . g4ec7) (let-values . g4ec6) (identifier-syntax . g4ec5) (with-syntax . g4ec4) (quasisyntax . g4ec3) (quasiquote . g4ec2) (syntax-rules . g4ec1) (include . g4ec0) (record-constructor-descriptor . g4ebe) (record-type-descriptor . g4ebd) (case . g4ebc) (unless . g4eba) (when . g4eb9) (or . g4eb8) (and . g4eb7) (if . g4eb6) (letrec* . g4eb5) (letrec . g4eb4) (case-lambda . g4eb2) (lambda . g4eb1) (syntax . g4eb0) (syntax-case . g4eaf) (quote . g4eae) (letrec-syntax . g4eac) (let-syntax . g4eab) (set! . g4eaa) (import . g4ea9) (begin . g4ea8) (define-syntax . g4ea6) (define . g4ea5)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5188 '(psyntax null-environment-5) '() '() '() '() '((make-promise . g5085) (unquote-splicing . g4ed5) (unquote . g4ed4) (_ . g4ed3) (else . g4ed2) (=> . g4ed1) (... . g4ed0) (delay . g4ecd) (do . g4ecb) (cond . g4eca) (let* . g4ec9) (let . g4ec8) (quasiquote . g4ec2) (syntax-rules . g4ec1) (case . g4ebc) (or . g4eb8) (and . g4eb7) (if . g4eb6) (letrec . g4eb4) (lambda . g4eb1) (quote . g4eae) (letrec-syntax . g4eac) (let-syntax . g4eab) (set! . g4eaa) (begin . g4ea8) (define-syntax . g4ea6) (define . g4ea5)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5189 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g511a) (string-ci>=? . g5119) (string-ci=? . g5118) (string-ci<? . g5117) (string-ci<=? . g5116) (char-whitespace? . g5115) (char-upper-case? . g5114) (char-numeric? . g5112) (char-lower-case? . g5111) (char-upcase . g510f) (char-downcase . g510c) (char-ci>? . g510b) (char-ci>=? . g510a) (char-ci=? . g5109) (char-ci<? . g5108) (char-ci<=? . g5107) (char-alphabetic? . g5106) (call-with-output-file . g50da) (call-with-input-file . g50d9) (write-char . g50d8) (write . g50d7) (with-output-to-file . g50d6) (with-input-from-file . g50d5) (read-char . g50d4) (read . g50d3) (peek-char . g50d2) (open-output-file . g50d1) (open-input-file . g50d0) (newline . g50cf) (display . g50ce) (close-output-port . g50cd) (close-input-port . g50cc) (eof-object . g50ca) (current-output-port . g50c8) (current-input-port . g50c7) (output-port? . g50c6) (input-port? . g50c5) (scheme-report-environment . g2f8d) (quotient . g508b) (null-environment . g2f8b) (remainder . g508a) (modulo . g5089) (inexact->exact . g5088) (force . g5087) (exact->inexact . g5086) (make-promise . g5085) (string-fill! . g5083) (string-set! . g5082) (set-cdr! . g5081) (set-car! . g5080) (memv . g507a) (memq . g5079) (member . g5077) (assv . g506f) (assq . g506e) (assoc . g506c) (eval . g2f91) (zero? . g4fa9) (vector? . g4fa8) (vector-set! . g4fa7) (vector-ref . g4fa6) (vector-length . g4fa4) (vector-fill! . g4fa2) (vector->list . g4fa1) (vector . g4fa0) (values . g4f9f) (truncate . g4f9e) (tan . g4f9d) (symbol? . g4f9c) (symbol->string . g4f9a) (substring . g4f99) (string? . g4f98) (string>? . g4f97) (string>=? . g4f96) (string=? . g4f95) (string<? . g4f94) (string<=? . g4f93) (string-ref . g4f92) (string-length . g4f91) (string-copy . g4f8f) (string-append . g4f8e) (string->symbol . g4f8d) (string->number . g4f8c) (string->list . g4f8b) (string . g4f8a) (sqrt . g4f89) (sin . g4f88) (round . g4f87) (reverse . g4f86) (real? . g4f85) (real-part . g4f83) (rationalize . g4f82) (rational? . g4f81) (procedure? . g4f7f) (positive? . g4f7e) (pair? . g4f7d) (odd? . g4f7c) (numerator . g4f7b) (number? . g4f7a) (number->string . g4f79) (not . g4f77) (negative? . g4f76) (min . g4f74) (max . g4f73) (map . g4f72) (make-vector . g4f71) (make-string . g4f70) (make-rectangular . g4f6f) (make-polar . g4f6e) (magnitude . g4f6d) (log . g4f6c) (list? . g4f6b) (list-tail . g4f6a) (list-ref . g4f69) (list->vector . g4f68) (list->string . g4f67) (list . g4f66) (length . g4f65) (lcm . g4f64) (integer? . g4f63) (integer->char . g4f61) (inexact? . g4f5f) (imag-part . g4f5d) (gcd . g4f5c) (for-each . g4f5b) (floor . g4f5a) (expt . g4f58) (exp . g4f57) (exact? . g4f56) (even? . g4f53) (eqv? . g4f51) (equal? . g4f50) (eq? . g4f4f) (dynamic-wind . g4f4e) (denominator . g4f47) (cos . g4f46) (cons . g4f45) (complex? . g4f44) (char? . g4f43) (char>? . g4f42) (char>=? . g4f41) (char=? . g4f40) (char<? . g4f3f) (char<=? . g4f3e) (char->integer . g4f3d) (ceiling . g4f3c) (call-with-values . g4f3b) (call-with-current-continuation . g4f39) (cddddr . g4f38) (cdddar . g4f37) (cddadr . g4f36) (cddaar . g4f35) (cdaddr . g4f34) (cdadar . g4f33) (cdaadr . g4f32) (cdaaar . g4f31) (cadddr . g4f30) (caddar . g4f2f) (cadadr . g4f2e) (cadaar . g4f2d) (caaddr . g4f2c) (caadar . g4f2b) (caaadr . g4f2a) (caaaar . g4f29) (cdddr . g4f28) (cddar . g4f27) (cdadr . g4f26) (cdaar . g4f25) (caddr . g4f24) (cadar . g4f23) (caadr . g4f22) (caaar . g4f21) (cddr . g4f20) (cdar . g4f1f) (cadr . g4f1e) (caar . g4f1d) (cdr . g4f1c) (car . g4f1b) (boolean? . g4f1a) (atan . g4f18) (asin . g4f16) (apply . g4f15) (append . g4f14) (angle . g4f13) (acos . g4f12) (abs . g4f11) (/ . g4f10) (* . g4f0f) (- . g4f0e) (+ . g4f0d) (>= . g4f0c) (> . g4f0b) (= . g4f0a) (<= . g4f09) (< . g4f08) (unquote-splicing . g4ed5) (unquote . g4ed4) (else . g4ed2) (=> . g4ed1) (... . g4ed0) (delay . g4ecd) (do . g4ecb) (cond . g4eca) (let* . g4ec9) (let . g4ec8) (quasiquote . g4ec2) (syntax-rules . g4ec1) (case . g4ebc) (or . g4eb8) (and . g4eb7) (if . g4eb6) (letrec . g4eb4) (lambda . g4eb1) (quote . g4eae) (letrec-syntax . g4eac) (let-syntax . g4eab) (set! . g4eaa) (begin . g4ea8) (define-syntax . g4ea6) (define . g4ea5)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g518a '(psyntax modules) '() '() '() '() '((module . g4ea7)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g518b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g518c '(rnrs) '(6) '() '() '() '((regexp? . g517f) (string-upcase . g5122) (string-titlecase . g5121) (string-normalize-nfkd . g5120) (string-normalize-nfkc . g511f) (string-normalize-nfd . g511e) (string-normalize-nfc . g511d) (string-foldcase . g511c) (string-downcase . g511b) (string-ci>? . g511a) (string-ci>=? . g5119) (string-ci=? . g5118) (string-ci<? . g5117) (string-ci<=? . g5116) (char-whitespace? . g5115) (char-upper-case? . g5114) (char-title-case? . g5113) (char-numeric? . g5112) (char-lower-case? . g5111) (char-general-category . g5110) (char-upcase . g510f) (char-titlecase . g510e) (char-foldcase . g510d) (char-downcase . g510c) (char-ci>? . g510b) (char-ci>=? . g510a) (char-ci=? . g5109) (char-ci<? . g5108) (char-ci<=? . g5107) (char-alphabetic? . g5106) (make-variable-transformer . g2cf5) (identifier? . g2fb3) (generate-temporaries . g2f9f) (free-identifier=? . g2fa1) (syntax->datum . g2fb7) (datum->syntax . g2fb5) (bound-identifier=? . g2fa3) (record-type-descriptor? . g5105) (record-predicate . g5104) (record-mutator . g5103) (record-constructor . g5102) (record-accessor . g5101) (make-record-type-descriptor . g5100) (make-record-constructor-descriptor . g50ff) (record? . g50fe) (record-type-uid . g50fd) (record-type-sealed? . g50fc) (record-type-parent . g50fb) (record-type-opaque? . g50fa) (record-type-name . g50f9) (record-type-generative? . g50f8) (record-type-field-names . g50f7) (record-rtd . g50f6) (record-field-mutable? . g50f5) (delete-file . g50f4) (file-exists? . g50f3) (vector-sort! . g50f2) (vector-sort . g50f1) (list-sort . g50f0) (symbol-hash . g50ef) (string-ci-hash . g50ee) (string-hash . g50ed) (equal-hash . g50ec) (hashtable-equivalence-function . g50eb) (make-hashtable . g50ea) (hashtable-hash-function . g50e9) (make-eqv-hashtable . g50e8) (make-eq-hashtable . g50e7) (hashtable? . g50e6) (hashtable-update! . g50e5) (hashtable-size . g50e4) (hashtable-set! . g50e3) (hashtable-ref . g50e2) (hashtable-mutable? . g50e1) (hashtable-keys . g50e0) (hashtable-entries . g50df) (hashtable-delete! . g50de) (hashtable-copy . g50dd) (hashtable-contains? . g50dc) (hashtable-clear! . g50db) (call-with-output-file . g50da) (call-with-input-file . g50d9) (write-char . g50d8) (write . g50d7) (with-output-to-file . g50d6) (with-input-from-file . g50d5) (read-char . g50d4) (read . g50d3) (peek-char . g50d2) (open-output-file . g50d1) (open-input-file . g50d0) (newline . g50cf) (display . g50ce) (close-output-port . g50cd) (close-input-port . g50cc) (eof-object? . g50cb) (eof-object . g50ca) (current-error-port . g50c9) (current-output-port . g50c8) (current-input-port . g50c7) (output-port? . g50c6) (input-port? . g50c5) (utf-8-codec . g50c4) (utf-16-codec . g50c3) (transcoder-error-handling-mode . g50c2) (transcoder-eol-style . g50c1) (transcoder-codec . g50c0) (transcoded-port . g50bf) (textual-port? . g50be) (string->bytevector . g50bd) (standard-output-port . g50bc) (standard-input-port . g50bb) (standard-error-port . g50ba) (set-port-position! . g50b9) (put-u8 . g50b8) (put-string . g50b7) (put-datum . g50b6) (put-char . g50b5) (put-bytevector . g50b4) (port? . g50b3) (port-transcoder . g50b2) (port-position . g50b1) (port-has-set-port-position!? . g50b0) (port-has-port-position? . g50af) (port-eof? . g50ae) (output-port-buffer-mode . g50ad) (open-string-output-port . g50ac) (open-string-input-port . g50ab) (open-file-output-port . g50aa) (open-file-input/output-port . g50a9) (open-file-input-port . g50a8) (open-bytevector-output-port . g50a7) (open-bytevector-input-port . g50a6) (native-transcoder . g50a5) (native-eol-style . g50a4) (make-transcoder . g50a3) (latin-1-codec . g50a2) (make-i/o-write-error . g4b73) (make-i/o-read-error . g4b5e) (make-i/o-port-error . g4c14) (make-i/o-invalid-position-error . g4b8a) (make-i/o-filename-error . g4ba5) (make-i/o-file-protection-error . g4bbe) (make-i/o-file-is-read-only-error . g4bd3) (make-i/o-file-does-not-exist-error . g4bfd) (make-i/o-file-already-exists-error . g4be8) (make-i/o-error . g4b49) (make-i/o-encoding-error . g4c44) (make-i/o-decoding-error . g4c2d) (make-custom-textual-output-port . g50a1) (make-custom-textual-input/output-port . g50a0) (make-custom-textual-input-port . g509f) (make-custom-binary-output-port . g509e) (make-custom-binary-input/output-port . g509d) (make-custom-binary-input-port . g509c) (make-bytevector . g509b) (lookahead-u8 . g509a) (lookahead-char . g5099) (i/o-write-error? . g4b75) (i/o-read-error? . g4b60) (i/o-port-error? . g4c18) (i/o-invalid-position-error? . g4b8e) (i/o-filename-error? . g4ba9) (i/o-file-protection-error? . g4bc0) (i/o-file-is-read-only-error? . g4bd5) (i/o-file-does-not-exist-error? . g4bff) (i/o-file-already-exists-error? . g4bea) (i/o-error? . g4b4b) (i/o-error-position . g4b90) (i/o-error-port . g4c1a) (i/o-error-filename . g4bab) (i/o-encoding-error? . g4c48) (i/o-encoding-error-char . g4c4a) (i/o-decoding-error? . g4c2f) (get-u8 . g5098) (get-string-n! . g5097) (get-string-n . g5096) (get-string-all . g5095) (get-line . g5094) (get-datum . g5093) (get-char . g5092) (get-bytevector-some . g5091) (get-bytevector-n! . g5090) (get-bytevector-n . g508f) (get-bytevector-all . g508e) (flush-output-port . g508d) (close-port . g508c) (exit . g5084) (command-line . g4d7f) (remove . g507f) (remv . g507e) (remp . g507d) (remq . g507c) (partition . g507b) (memv . g507a) (memq . g5079) (memp . g5078) (member . g5077) (exists . g5076) (for-all . g5075) (fold-right . g5074) (fold-left . g5073) (find . g5072) (filter . g5071) (cons* . g5070) (assv . g506f) (assq . g506e) (assp . g506d) (assoc . g506c) (call-with-string-output-port . g506b) (call-with-port . g506a) (call-with-bytevector-output-port . g5069) (bytevector->string . g5068) (buffer-mode? . g5067) (binary-port? . g5066) (with-exception-handler . g5065) (raise-continuable . g5064) (raise . g5063) (make-enumeration . g5062) (enum-set=? . g5061) (enum-set-universe . g5060) (enum-set-union . g505f) (enum-set-subset? . g505e) (enum-set-projection . g505d) (enum-set-member? . g505c) (enum-set-intersection . g505b) (enum-set-indexer . g505a) (enum-set-difference . g5059) (enum-set-constructor . g5058) (enum-set-complement . g5057) (enum-set->list . g5056) (who-condition? . g4abf) (warning? . g4a37) (violation? . g4a76) (undefined-violation? . g4b36) (syntax-violation? . g4b1d) (syntax-violation-subform . g4b21) (syntax-violation-form . g4b1f) (syntax-violation . g2fb1) (simple-conditions . g5055) (serious-condition? . g4a4c) (non-continuable-violation? . g4ad6) (message-condition? . g4a20) (make-who-condition . g4abb) (make-warning . g4a35) (make-violation . g4a74) (make-undefined-violation . g4b34) (make-syntax-violation . g4b17) (make-serious-condition . g4a4a) (make-non-continuable-violation . g4ad4) (make-message-condition . g4a1c) (make-lexical-violation . g4afe) (make-irritants-condition . g4aa0) (make-implementation-restriction-violation . g4ae9) (make-error . g4a5f) (make-assertion-violation . g4a89) (lexical-violation? . g4b00) (irritants-condition? . g4aa4) (implementation-restriction-violation? . g4aeb) (error? . g4a61) (condition-who . g4ac1) (condition-predicate . g5054) (condition-message . g4a22) (condition-irritants . g4aa6) (condition-accessor . g5053) (condition . g5052) (assertion-violation? . g4a8b) (condition? . g5051) (utf32->string . g5050) (utf16->string . g504f) (utf8->string . g504e) (uint-list->bytevector . g504d) (u8-list->bytevector . g504c) (string->utf8 . g504b) (string->utf32 . g504a) (string->utf16 . g5049) (sint-list->bytevector . g5048) (native-endianness . g5047) (bytevector? . g5046) (bytevector=? . g5045) (bytevector-uint-set! . g5044) (bytevector-uint-ref . g5043) (bytevector-u8-set! . g5042) (bytevector-u8-ref . g5041) (bytevector-u64-set! . g5040) (bytevector-u64-ref . g503f) (bytevector-u64-native-set! . g503e) (bytevector-u64-native-ref . g503d) (bytevector-u32-set! . g503c) (bytevector-u32-ref . g503b) (bytevector-u32-native-set! . g503a) (bytevector-u32-native-ref . g5039) (bytevector-u16-set! . g5038) (bytevector-u16-ref . g5037) (bytevector-u16-native-set! . g5036) (bytevector-u16-native-ref . g5035) (bytevector-sint-set! . g5034) (bytevector-sint-ref . g5033) (bytevector-s8-set! . g5032) (bytevector-s8-ref . g5031) (bytevector-s64-set! . g5030) (bytevector-s64-ref . g502f) (bytevector-s64-native-set! . g502e) (bytevector-s64-native-ref . g502d) (bytevector-s32-set! . g502c) (bytevector-s32-ref . g502b) (bytevector-s32-native-set! . g502a) (bytevector-s32-native-ref . g5029) (bytevector-s16-set! . g5028) (bytevector-s16-ref . g5027) (bytevector-s16-native-set! . g5026) (bytevector-s16-native-ref . g5025) (bytevector-length . g5024) (bytevector-ieee-single-ref . g5023) (bytevector-ieee-single-set! . g5022) (bytevector-ieee-single-native-set! . g5021) (bytevector-ieee-single-native-ref . g5020) (bytevector-ieee-double-set! . g501f) (bytevector-ieee-double-ref . g501e) (bytevector-ieee-double-native-set! . g501d) (bytevector-ieee-double-native-ref . g501c) (bytevector-fill! . g501b) (bytevector-copy! . g501a) (bytevector-copy . g5019) (bytevector->uint-list . g5018) (bytevector->u8-list . g5017) (bytevector->sint-list . g5016) (no-nans-violation? . g4c74) (no-infinities-violation? . g4c5f) (make-no-nans-violation . g4c72) (make-no-infinities-violation . g4c5d) (real->flonum . g5015) (flzero? . g5014) (fltruncate . g5013) (fltan . g5012) (flsqrt . g5011) (flsin . g5010) (flround . g500f) (flpositive? . g500e) (flonum? . g500d) (flodd? . g500c) (flnumerator . g500b) (flnegative? . g500a) (flnan? . g5009) (flmod0 . g5008) (flmod . g5007) (flmin . g5006) (flmax . g5005) (fllog . g5004) (flinteger? . g5003) (flinfinite? . g5002) (flfloor . g5001) (flfinite? . g5000) (flexpt . g4fff) (flexp . g4ffe) (fleven? . g4ffd) (fldiv0-and-mod0 . g4ffc) (fldiv0 . g4ffb) (fldiv-and-mod . g4ffa) (fldiv . g4ff9) (fldenominator . g4ff8) (flcos . g4ff7) (flceiling . g4ff6) (flatan . g4ff5) (flasin . g4ff4) (flacos . g4ff3) (flabs . g4ff2) (fl>? . g4ff1) (fl>=? . g4ff0) (fl=? . g4fef) (fl<? . g4fee) (fl<=? . g4fed) (fl/ . g4fec) (fl- . g4feb) (fl+ . g4fea) (fl* . g4fe9) (fixnum->flonum . g4fe8) (fxzero? . g4fe7) (fxxor . g4fe6) (fxrotate-bit-field . g4fe5) (fxreverse-bit-field . g4fe4) (fxpositive? . g4fe3) (fxodd? . g4fe2) (fxnot . g4fe1) (fxnegative? . g4fe0) (fxmod0 . g4fdf) (fxmod . g4fde) (fxmin . g4fdd) (fxmax . g4fdc) (fxlength . g4fdb) (fxior . g4fda) (fxif . g4fd9) (fxfirst-bit-set . g4fd8) (fxeven? . g4fd7) (fxdiv0-and-mod0 . g4fd6) (fxdiv0 . g4fd5) (fxdiv-and-mod . g4fd4) (fxdiv . g4fd3) (fxcopy-bit-field . g4fd2) (fxcopy-bit . g4fd1) (fxbit-set? . g4fd0) (fxbit-field . g4fcf) (fxbit-count . g4fce) (fxarithmetic-shift-right . g4fcd) (fxarithmetic-shift-left . g4fcc) (fxarithmetic-shift . g4fcb) (fxand . g4fca) (fx>? . g4fc9) (fx>=? . g4fc8) (fx=? . g4fc7) (fx<? . g4fc6) (fx<=? . g4fc5) (fx-/carry . g4fc4) (fx- . g4fc3) (fx+/carry . g4fc2) (fx+ . g4fc1) (fx*/carry . g4fc0) (fx* . g4fbf) (greatest-fixnum . g4fbe) (least-fixnum . g4fbd) (fixnum-width . g4fbc) (fixnum? . g4fbb) (bitwise-rotate-bit-field . g4fba) (bitwise-reverse-bit-field . g4fb9) (bitwise-length . g4fb8) (bitwise-if . g4fb7) (bitwise-first-bit-set . g4fb6) (bitwise-copy-bit-field . g4fb5) (bitwise-copy-bit . g4fb4) (bitwise-bit-set? . g4fb3) (bitwise-bit-field . g4fb2) (bitwise-bit-count . g4fb1) (bitwise-xor . g4fb0) (bitwise-ior . g4faf) (bitwise-and . g4fae) (bitwise-not . g4fad) (bitwise-arithmetic-shift-right . g4fac) (bitwise-arithmetic-shift-left . g4fab) (bitwise-arithmetic-shift . g4faa) (zero? . g4fa9) (vector? . g4fa8) (vector-set! . g4fa7) (vector-ref . g4fa6) (vector-map . g4fa5) (vector-length . g4fa4) (vector-for-each . g4fa3) (vector-fill! . g4fa2) (vector->list . g4fa1) (vector . g4fa0) (values . g4f9f) (truncate . g4f9e) (tan . g4f9d) (symbol? . g4f9c) (symbol=? . g4f9b) (symbol->string . g4f9a) (substring . g4f99) (string? . g4f98) (string>? . g4f97) (string>=? . g4f96) (string=? . g4f95) (string<? . g4f94) (string<=? . g4f93) (string-ref . g4f92) (string-length . g4f91) (string-for-each . g4f90) (string-copy . g4f8f) (string-append . g4f8e) (string->symbol . g4f8d) (string->number . g4f8c) (string->list . g4f8b) (string . g4f8a) (sqrt . g4f89) (sin . g4f88) (round . g4f87) (reverse . g4f86) (real? . g4f85) (real-valued? . g4f84) (real-part . g4f83) (rationalize . g4f82) (rational? . g4f81) (rational-valued? . g4f80) (procedure? . g4f7f) (positive? . g4f7e) (pair? . g4f7d) (odd? . g4f7c) (numerator . g4f7b) (number? . g4f7a) (number->string . g4f79) (null? . g4f78) (not . g4f77) (negative? . g4f76) (nan? . g4f75) (min . g4f74) (max . g4f73) (map . g4f72) (make-vector . g4f71) (make-string . g4f70) (make-rectangular . g4f6f) (make-polar . g4f6e) (magnitude . g4f6d) (log . g4f6c) (list? . g4f6b) (list-tail . g4f6a) (list-ref . g4f69) (list->vector . g4f68) (list->string . g4f67) (list . g4f66) (length . g4f65) (lcm . g4f64) (integer? . g4f63) (integer-valued? . g4f62) (integer->char . g4f61) (infinite? . g4f60) (inexact? . g4f5f) (inexact . g4f5e) (imag-part . g4f5d) (gcd . g4f5c) (for-each . g4f5b) (floor . g4f5a) (finite? . g4f59) (expt . g4f58) (exp . g4f57) (exact? . g4f56) (exact-integer-sqrt . g4f55) (exact . g4f54) (even? . g4f53) (error . g4f52) (eqv? . g4f51) (equal? . g4f50) (eq? . g4f4f) (dynamic-wind . g4f4e) (div0-and-mod0 . g4f4d) (mod0 . g4f4c) (div0 . g4f4b) (div-and-mod . g4f4a) (mod . g4f49) (div . g4f48) (denominator . g4f47) (cos . g4f46) (cons . g4f45) (complex? . g4f44) (char? . g4f43) (char>? . g4f42) (char>=? . g4f41) (char=? . g4f40) (char<? . g4f3f) (char<=? . g4f3e) (char->integer . g4f3d) (ceiling . g4f3c) (call-with-values . g4f3b) (call/cc . g4f3a) (call-with-current-continuation . g4f39) (cddddr . g4f38) (cdddar . g4f37) (cddadr . g4f36) (cddaar . g4f35) (cdaddr . g4f34) (cdadar . g4f33) (cdaadr . g4f32) (cdaaar . g4f31) (cadddr . g4f30) (caddar . g4f2f) (cadadr . g4f2e) (cadaar . g4f2d) (caaddr . g4f2c) (caadar . g4f2b) (caaadr . g4f2a) (caaaar . g4f29) (cdddr . g4f28) (cddar . g4f27) (cdadr . g4f26) (cdaar . g4f25) (caddr . g4f24) (cadar . g4f23) (caadr . g4f22) (caaar . g4f21) (cddr . g4f20) (cdar . g4f1f) (cadr . g4f1e) (caar . g4f1d) (cdr . g4f1c) (car . g4f1b) (boolean? . g4f1a) (boolean=? . g4f19) (atan . g4f18) (assertion-violation . g4f17) (asin . g4f16) (apply . g4f15) (append . g4f14) (angle . g4f13) (acos . g4f12) (abs . g4f11) (/ . g4f10) (* . g4f0f) (- . g4f0e) (+ . g4f0d) (>= . g4f0c) (> . g4f0b) (= . g4f0a) (<= . g4f09) (< . g4f08) (&no-nans . g4f06) (&no-infinities . g4f05) (&i/o-encoding . g4f04) (&i/o-decoding . g4f03) (&i/o-port . g4f02) (&i/o-file-does-not-exist . g4f01) (&i/o-file-already-exists . g4f00) (&i/o-file-is-read-only . g4eff) (&i/o-file-protection . g4efe) (&i/o-filename . g4efd) (&i/o-invalid-position . g4efc) (&i/o-write . g4efb) (&i/o-read . g4efa) (&i/o . g4ef9) (&undefined . g4ef8) (&syntax . g4ef7) (&lexical . g4ef6) (&implementation-restriction . g4ef5) (&non-continuable . g4ef4) (&who . g4ef3) (&irritants . g4ef2) (&assertion . g4ef1) (&violation . g4ef0) (&error . g4eef) (&serious . g4eee) (&warning . g4eed) (&message . g4eec) (&condition . g4eeb) (define-condition-type . g4eea) (define-enumeration . g4ee9) (define-record-type . g4ee8) (parent-rtd . g4ee7) (nongenerative . g4ee6) (opaque . g4ee5) (sealed . g4ee4) (protocol . g4ee3) (parent . g4ee2) (immutable . g4ee1) (mutable . g4ee0) (fields . g4edf) (error-handling-mode . g4ede) (file-options . g4edd) (buffer-mode . g4edc) (eol-style . g4edb) (guard . g4eda) (unsyntax-splicing . g4ed7) (unsyntax . g4ed6) (unquote-splicing . g4ed5) (unquote . g4ed4) (_ . g4ed3) (else . g4ed2) (=> . g4ed1) (... . g4ed0) (assert . g4ecf) (endianness . g4ece) (do . g4ecb) (cond . g4eca) (let* . g4ec9) (let . g4ec8) (let*-values . g4ec7) (let-values . g4ec6) (identifier-syntax . g4ec5) (with-syntax . g4ec4) (quasisyntax . g4ec3) (quasiquote . g4ec2) (syntax-rules . g4ec1) (record-constructor-descriptor . g4ebe) (record-type-descriptor . g4ebd) (case . g4ebc) (unless . g4eba) (when . g4eb9) (or . g4eb8) (and . g4eb7) (if . g4eb6) (letrec* . g4eb5) (letrec . g4eb4) (case-lambda . g4eb2) (lambda . g4eb1) (syntax . g4eb0) (syntax-case . g4eaf) (quote . g4eae) (letrec-syntax . g4eac) (let-syntax . g4eab) (set! . g4eaa) (begin . g4ea8) (define-syntax . g4ea6) (define . g4ea5)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g518d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g2f8d) (quotient . g508b) (null-environment . g2f8b) (remainder . g508a) (modulo . g5089) (inexact->exact . g5088) (force . g5087) (exact->inexact . g5086) (make-promise . g5085) (delay . g4ecd)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g518e '(rnrs control) '(6) '() '() '() '((do . g4ecb) (unless . g4eba) (when . g4eb9) (case-lambda . g4eb2)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g518f '(rnrs eval) '(6) '() '() '() '((eval . g2f91) (environment . g2f89)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5190 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g5081) (set-car! . g5080)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5191 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g5083) (string-set! . g5082)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5192 '(rnrs programs) '(6) '() '() '() '((exit . g5084) (command-line . g4d7f)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5193 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g2cf5) (identifier? . g2fb3) (generate-temporaries . g2f9f) (free-identifier=? . g2fa1) (syntax->datum . g2fb7) (datum->syntax . g2fb5) (bound-identifier=? . g2fa3) (syntax-violation . g2fb1) (unsyntax-splicing . g4ed7) (unsyntax . g4ed6) (_ . g4ed3) (... . g4ed0) (with-syntax . g4ec4) (quasisyntax . g4ec3) (syntax . g4eb0) (syntax-case . g4eaf)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5194 '(rnrs files) '(6) '() '() '() '((delete-file . g50f4) (file-exists? . g50f3) (make-i/o-write-error . g4b73) (make-i/o-read-error . g4b5e) (make-i/o-port-error . g4c14) (make-i/o-invalid-position-error . g4b8a) (make-i/o-filename-error . g4ba5) (make-i/o-file-protection-error . g4bbe) (make-i/o-file-is-read-only-error . g4bd3) (make-i/o-file-does-not-exist-error . g4bfd) (make-i/o-file-already-exists-error . g4be8) (make-i/o-error . g4b49) (i/o-write-error? . g4b75) (i/o-read-error? . g4b60) (i/o-port-error? . g4c18) (i/o-invalid-position-error? . g4b8e) (i/o-filename-error? . g4ba9) (i/o-file-protection-error? . g4bc0) (i/o-file-is-read-only-error? . g4bd5) (i/o-file-does-not-exist-error? . g4bff) (i/o-file-already-exists-error? . g4bea) (i/o-error? . g4b4b) (i/o-error-position . g4b90) (i/o-error-port . g4c1a) (i/o-error-filename . g4bab) (&i/o-port . g4f02) (&i/o-file-does-not-exist . g4f01) (&i/o-file-already-exists . g4f00) (&i/o-file-is-read-only . g4eff) (&i/o-file-protection . g4efe) (&i/o-filename . g4efd) (&i/o-invalid-position . g4efc) (&i/o-write . g4efb) (&i/o-read . g4efa) (&i/o . g4ef9)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5195 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g50f2) (vector-sort . g50f1) (list-sort . g50f0)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5196 '(rnrs base) '(6) '() '() '() '((zero? . g4fa9) (vector? . g4fa8) (vector-set! . g4fa7) (vector-ref . g4fa6) (vector-map . g4fa5) (vector-length . g4fa4) (vector-for-each . g4fa3) (vector-fill! . g4fa2) (vector->list . g4fa1) (vector . g4fa0) (values . g4f9f) (truncate . g4f9e) (tan . g4f9d) (symbol? . g4f9c) (symbol=? . g4f9b) (symbol->string . g4f9a) (substring . g4f99) (string? . g4f98) (string>? . g4f97) (string>=? . g4f96) (string=? . g4f95) (string<? . g4f94) (string<=? . g4f93) (string-ref . g4f92) (string-length . g4f91) (string-for-each . g4f90) (string-copy . g4f8f) (string-append . g4f8e) (string->symbol . g4f8d) (string->number . g4f8c) (string->list . g4f8b) (string . g4f8a) (sqrt . g4f89) (sin . g4f88) (round . g4f87) (reverse . g4f86) (real? . g4f85) (real-valued? . g4f84) (real-part . g4f83) (rationalize . g4f82) (rational? . g4f81) (rational-valued? . g4f80) (procedure? . g4f7f) (positive? . g4f7e) (pair? . g4f7d) (odd? . g4f7c) (numerator . g4f7b) (number? . g4f7a) (number->string . g4f79) (null? . g4f78) (not . g4f77) (negative? . g4f76) (nan? . g4f75) (min . g4f74) (max . g4f73) (map . g4f72) (make-vector . g4f71) (make-string . g4f70) (make-rectangular . g4f6f) (make-polar . g4f6e) (magnitude . g4f6d) (log . g4f6c) (list? . g4f6b) (list-tail . g4f6a) (list-ref . g4f69) (list->vector . g4f68) (list->string . g4f67) (list . g4f66) (length . g4f65) (lcm . g4f64) (integer? . g4f63) (integer-valued? . g4f62) (integer->char . g4f61) (infinite? . g4f60) (inexact? . g4f5f) (inexact . g4f5e) (imag-part . g4f5d) (gcd . g4f5c) (for-each . g4f5b) (floor . g4f5a) (finite? . g4f59) (expt . g4f58) (exp . g4f57) (exact? . g4f56) (exact-integer-sqrt . g4f55) (exact . g4f54) (even? . g4f53) (error . g4f52) (eqv? . g4f51) (equal? . g4f50) (eq? . g4f4f) (dynamic-wind . g4f4e) (div0-and-mod0 . g4f4d) (mod0 . g4f4c) (div0 . g4f4b) (div-and-mod . g4f4a) (mod . g4f49) (div . g4f48) (denominator . g4f47) (cos . g4f46) (cons . g4f45) (complex? . g4f44) (char? . g4f43) (char>? . g4f42) (char>=? . g4f41) (char=? . g4f40) (char<? . g4f3f) (char<=? . g4f3e) (char->integer . g4f3d) (ceiling . g4f3c) (call-with-values . g4f3b) (call/cc . g4f3a) (call-with-current-continuation . g4f39) (cddddr . g4f38) (cdddar . g4f37) (cddadr . g4f36) (cddaar . g4f35) (cdaddr . g4f34) (cdadar . g4f33) (cdaadr . g4f32) (cdaaar . g4f31) (cadddr . g4f30) (caddar . g4f2f) (cadadr . g4f2e) (cadaar . g4f2d) (caaddr . g4f2c) (caadar . g4f2b) (caaadr . g4f2a) (caaaar . g4f29) (cdddr . g4f28) (cddar . g4f27) (cdadr . g4f26) (cdaar . g4f25) (caddr . g4f24) (cadar . g4f23) (caadr . g4f22) (caaar . g4f21) (cddr . g4f20) (cdar . g4f1f) (cadr . g4f1e) (caar . g4f1d) (cdr . g4f1c) (car . g4f1b) (boolean? . g4f1a) (boolean=? . g4f19) (atan . g4f18) (assertion-violation . g4f17) (asin . g4f16) (apply . g4f15) (append . g4f14) (angle . g4f13) (acos . g4f12) (abs . g4f11) (/ . g4f10) (* . g4f0f) (- . g4f0e) (+ . g4f0d) (>= . g4f0c) (> . g4f0b) (= . g4f0a) (<= . g4f09) (< . g4f08) (unquote-splicing . g4ed5) (unquote . g4ed4) (_ . g4ed3) (else . g4ed2) (=> . g4ed1) (... . g4ed0) (assert . g4ecf) (cond . g4eca) (let* . g4ec9) (let . g4ec8) (let*-values . g4ec7) (let-values . g4ec6) (identifier-syntax . g4ec5) (quasiquote . g4ec2) (syntax-rules . g4ec1) (case . g4ebc) (or . g4eb8) (and . g4eb7) (if . g4eb6) (letrec* . g4eb5) (letrec . g4eb4) (lambda . g4eb1) (quote . g4eae) (letrec-syntax . g4eac) (let-syntax . g4eab) (set! . g4eaa) (begin . g4ea8) (define-syntax . g4ea6) (define . g4ea5)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5197 '(rnrs lists) '(6) '() '() '() '((remove . g507f) (remv . g507e) (remp . g507d) (remq . g507c) (partition . g507b) (memv . g507a) (memq . g5079) (memp . g5078) (member . g5077) (exists . g5076) (for-all . g5075) (fold-right . g5074) (fold-left . g5073) (find . g5072) (filter . g5071) (cons* . g5070) (assv . g506f) (assq . g506e) (assp . g506d) (assoc . g506c)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5198 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g50da) (call-with-input-file . g50d9) (write-char . g50d8) (write . g50d7) (with-output-to-file . g50d6) (with-input-from-file . g50d5) (read-char . g50d4) (read . g50d3) (peek-char . g50d2) (open-output-file . g50d1) (open-input-file . g50d0) (newline . g50cf) (display . g50ce) (close-output-port . g50cd) (close-input-port . g50cc) (eof-object? . g50cb) (eof-object . g50ca) (current-error-port . g50c9) (current-output-port . g50c8) (current-input-port . g50c7) (output-port? . g50c6) (input-port? . g50c5) (make-i/o-write-error . g4b73) (make-i/o-read-error . g4b5e) (make-i/o-port-error . g4c14) (make-i/o-invalid-position-error . g4b8a) (make-i/o-filename-error . g4ba5) (make-i/o-file-protection-error . g4bbe) (make-i/o-file-is-read-only-error . g4bd3) (make-i/o-file-does-not-exist-error . g4bfd) (make-i/o-file-already-exists-error . g4be8) (make-i/o-error . g4b49) (i/o-write-error? . g4b75) (i/o-read-error? . g4b60) (i/o-port-error? . g4c18) (i/o-invalid-position-error? . g4b8e) (i/o-filename-error? . g4ba9) (i/o-file-protection-error? . g4bc0) (i/o-file-is-read-only-error? . g4bd5) (i/o-file-does-not-exist-error? . g4bff) (i/o-file-already-exists-error? . g4bea) (i/o-error? . g4b4b) (i/o-error-position . g4b90) (i/o-error-port . g4c1a) (i/o-error-filename . g4bab) (&i/o-port . g4f02) (&i/o-file-does-not-exist . g4f01) (&i/o-file-already-exists . g4f00) (&i/o-file-is-read-only . g4eff) (&i/o-file-protection . g4efe) (&i/o-filename . g4efd) (&i/o-invalid-position . g4efc) (&i/o-write . g4efb) (&i/o-read . g4efa) (&i/o . g4ef9)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g5199 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g509b) (utf32->string . g5050) (utf16->string . g504f) (utf8->string . g504e) (uint-list->bytevector . g504d) (u8-list->bytevector . g504c) (string->utf8 . g504b) (string->utf32 . g504a) (string->utf16 . g5049) (sint-list->bytevector . g5048) (native-endianness . g5047) (bytevector? . g5046) (bytevector=? . g5045) (bytevector-uint-set! . g5044) (bytevector-uint-ref . g5043) (bytevector-u8-set! . g5042) (bytevector-u8-ref . g5041) (bytevector-u64-set! . g5040) (bytevector-u64-ref . g503f) (bytevector-u64-native-set! . g503e) (bytevector-u64-native-ref . g503d) (bytevector-u32-set! . g503c) (bytevector-u32-ref . g503b) (bytevector-u32-native-set! . g503a) (bytevector-u32-native-ref . g5039) (bytevector-u16-set! . g5038) (bytevector-u16-ref . g5037) (bytevector-u16-native-set! . g5036) (bytevector-u16-native-ref . g5035) (bytevector-sint-set! . g5034) (bytevector-sint-ref . g5033) (bytevector-s8-set! . g5032) (bytevector-s8-ref . g5031) (bytevector-s64-set! . g5030) (bytevector-s64-ref . g502f) (bytevector-s64-native-set! . g502e) (bytevector-s64-native-ref . g502d) (bytevector-s32-set! . g502c) (bytevector-s32-ref . g502b) (bytevector-s32-native-set! . g502a) (bytevector-s32-native-ref . g5029) (bytevector-s16-set! . g5028) (bytevector-s16-ref . g5027) (bytevector-s16-native-set! . g5026) (bytevector-s16-native-ref . g5025) (bytevector-length . g5024) (bytevector-ieee-single-ref . g5023) (bytevector-ieee-single-set! . g5022) (bytevector-ieee-single-native-set! . g5021) (bytevector-ieee-single-native-ref . g5020) (bytevector-ieee-double-set! . g501f) (bytevector-ieee-double-ref . g501e) (bytevector-ieee-double-native-set! . g501d) (bytevector-ieee-double-native-ref . g501c) (bytevector-fill! . g501b) (bytevector-copy! . g501a) (bytevector-copy . g5019) (bytevector->uint-list . g5018) (bytevector->u8-list . g5017) (bytevector->sint-list . g5016) (endianness . g4ece)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g519a '(rnrs unicode) '(6) '() '() '() '((string-upcase . g5122) (string-titlecase . g5121) (string-normalize-nfkd . g5120) (string-normalize-nfkc . g511f) (string-normalize-nfd . g511e) (string-normalize-nfc . g511d) (string-foldcase . g511c) (string-downcase . g511b) (string-ci>? . g511a) (string-ci>=? . g5119) (string-ci=? . g5118) (string-ci<? . g5117) (string-ci<=? . g5116) (char-whitespace? . g5115) (char-upper-case? . g5114) (char-title-case? . g5113) (char-numeric? . g5112) (char-lower-case? . g5111) (char-general-category . g5110) (char-upcase . g510f) (char-titlecase . g510e) (char-foldcase . g510d) (char-downcase . g510c) (char-ci>? . g510b) (char-ci>=? . g510a) (char-ci=? . g5109) (char-ci<? . g5108) (char-ci<=? . g5107) (char-alphabetic? . g5106)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g519b '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g5065) (raise-continuable . g5064) (raise . g5063) (guard . g4eda) (else . g4ed2) (=> . g4ed1)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g519c '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g4fba) (bitwise-reverse-bit-field . g4fb9) (bitwise-length . g4fb8) (bitwise-if . g4fb7) (bitwise-first-bit-set . g4fb6) (bitwise-copy-bit-field . g4fb5) (bitwise-copy-bit . g4fb4) (bitwise-bit-set? . g4fb3) (bitwise-bit-field . g4fb2) (bitwise-bit-count . g4fb1) (bitwise-xor . g4fb0) (bitwise-ior . g4faf) (bitwise-and . g4fae) (bitwise-not . g4fad) (bitwise-arithmetic-shift-right . g4fac) (bitwise-arithmetic-shift-left . g4fab) (bitwise-arithmetic-shift . g4faa)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g519d '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g4fe7) (fxxor . g4fe6) (fxrotate-bit-field . g4fe5) (fxreverse-bit-field . g4fe4) (fxpositive? . g4fe3) (fxodd? . g4fe2) (fxnot . g4fe1) (fxnegative? . g4fe0) (fxmod0 . g4fdf) (fxmod . g4fde) (fxmin . g4fdd) (fxmax . g4fdc) (fxlength . g4fdb) (fxior . g4fda) (fxif . g4fd9) (fxfirst-bit-set . g4fd8) (fxeven? . g4fd7) (fxdiv0-and-mod0 . g4fd6) (fxdiv0 . g4fd5) (fxdiv-and-mod . g4fd4) (fxdiv . g4fd3) (fxcopy-bit-field . g4fd2) (fxcopy-bit . g4fd1) (fxbit-set? . g4fd0) (fxbit-field . g4fcf) (fxbit-count . g4fce) (fxarithmetic-shift-right . g4fcd) (fxarithmetic-shift-left . g4fcc) (fxarithmetic-shift . g4fcb) (fxand . g4fca) (fx>? . g4fc9) (fx>=? . g4fc8) (fx=? . g4fc7) (fx<? . g4fc6) (fx<=? . g4fc5) (fx-/carry . g4fc4) (fx- . g4fc3) (fx+/carry . g4fc2) (fx+ . g4fc1) (fx*/carry . g4fc0) (fx* . g4fbf) (greatest-fixnum . g4fbe) (least-fixnum . g4fbd) (fixnum-width . g4fbc) (fixnum? . g4fbb)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g519e '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g4c74) (no-infinities-violation? . g4c5f) (make-no-nans-violation . g4c72) (make-no-infinities-violation . g4c5d) (real->flonum . g5015) (flzero? . g5014) (fltruncate . g5013) (fltan . g5012) (flsqrt . g5011) (flsin . g5010) (flround . g500f) (flpositive? . g500e) (flonum? . g500d) (flodd? . g500c) (flnumerator . g500b) (flnegative? . g500a) (flnan? . g5009) (flmod0 . g5008) (flmod . g5007) (flmin . g5006) (flmax . g5005) (fllog . g5004) (flinteger? . g5003) (flinfinite? . g5002) (flfloor . g5001) (flfinite? . g5000) (flexpt . g4fff) (flexp . g4ffe) (fleven? . g4ffd) (fldiv0-and-mod0 . g4ffc) (fldiv0 . g4ffb) (fldiv-and-mod . g4ffa) (fldiv . g4ff9) (fldenominator . g4ff8) (flcos . g4ff7) (flceiling . g4ff6) (flatan . g4ff5) (flasin . g4ff4) (flacos . g4ff3) (flabs . g4ff2) (fl>? . g4ff1) (fl>=? . g4ff0) (fl=? . g4fef) (fl<? . g4fee) (fl<=? . g4fed) (fl/ . g4fec) (fl- . g4feb) (fl+ . g4fea) (fl* . g4fe9) (fixnum->flonum . g4fe8) (&no-nans . g4f06) (&no-infinities . g4f05)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g519f '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g50ef) (string-ci-hash . g50ee) (string-hash . g50ed) (equal-hash . g50ec) (hashtable-equivalence-function . g50eb) (make-hashtable . g50ea) (hashtable-hash-function . g50e9) (make-eqv-hashtable . g50e8) (make-eq-hashtable . g50e7) (hashtable? . g50e6) (hashtable-update! . g50e5) (hashtable-size . g50e4) (hashtable-set! . g50e3) (hashtable-ref . g50e2) (hashtable-mutable? . g50e1) (hashtable-keys . g50e0) (hashtable-entries . g50df) (hashtable-delete! . g50de) (hashtable-copy . g50dd) (hashtable-contains? . g50dc) (hashtable-clear! . g50db)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g50cb) (eof-object . g50ca) (current-error-port . g50c9) (current-output-port . g50c8) (current-input-port . g50c7) (output-port? . g50c6) (input-port? . g50c5) (utf-8-codec . g50c4) (utf-16-codec . g50c3) (transcoder-error-handling-mode . g50c2) (transcoder-eol-style . g50c1) (transcoder-codec . g50c0) (transcoded-port . g50bf) (textual-port? . g50be) (string->bytevector . g50bd) (standard-output-port . g50bc) (standard-input-port . g50bb) (standard-error-port . g50ba) (set-port-position! . g50b9) (put-u8 . g50b8) (put-string . g50b7) (put-datum . g50b6) (put-char . g50b5) (put-bytevector . g50b4) (port? . g50b3) (port-transcoder . g50b2) (port-position . g50b1) (port-has-set-port-position!? . g50b0) (port-has-port-position? . g50af) (port-eof? . g50ae) (output-port-buffer-mode . g50ad) (open-string-output-port . g50ac) (open-string-input-port . g50ab) (open-file-output-port . g50aa) (open-file-input/output-port . g50a9) (open-file-input-port . g50a8) (open-bytevector-output-port . g50a7) (open-bytevector-input-port . g50a6) (native-transcoder . g50a5) (native-eol-style . g50a4) (make-transcoder . g50a3) (latin-1-codec . g50a2) (make-i/o-write-error . g4b73) (make-i/o-read-error . g4b5e) (make-i/o-port-error . g4c14) (make-i/o-invalid-position-error . g4b8a) (make-i/o-filename-error . g4ba5) (make-i/o-file-protection-error . g4bbe) (make-i/o-file-is-read-only-error . g4bd3) (make-i/o-file-does-not-exist-error . g4bfd) (make-i/o-file-already-exists-error . g4be8) (make-i/o-error . g4b49) (make-i/o-encoding-error . g4c44) (make-i/o-decoding-error . g4c2d) (make-custom-textual-output-port . g50a1) (make-custom-textual-input/output-port . g50a0) (make-custom-textual-input-port . g509f) (make-custom-binary-output-port . g509e) (make-custom-binary-input/output-port . g509d) (make-custom-binary-input-port . g509c) (lookahead-u8 . g509a) (lookahead-char . g5099) (i/o-write-error? . g4b75) (i/o-read-error? . g4b60) (i/o-port-error? . g4c18) (i/o-invalid-position-error? . g4b8e) (i/o-filename-error? . g4ba9) (i/o-file-protection-error? . g4bc0) (i/o-file-is-read-only-error? . g4bd5) (i/o-file-does-not-exist-error? . g4bff) (i/o-file-already-exists-error? . g4bea) (i/o-error? . g4b4b) (i/o-error-position . g4b90) (i/o-error-port . g4c1a) (i/o-error-filename . g4bab) (i/o-encoding-error? . g4c48) (i/o-encoding-error-char . g4c4a) (i/o-decoding-error? . g4c2f) (get-u8 . g5098) (get-string-n! . g5097) (get-string-n . g5096) (get-string-all . g5095) (get-line . g5094) (get-datum . g5093) (get-char . g5092) (get-bytevector-some . g5091) (get-bytevector-n! . g5090) (get-bytevector-n . g508f) (get-bytevector-all . g508e) (flush-output-port . g508d) (close-port . g508c) (call-with-string-output-port . g506b) (call-with-port . g506a) (call-with-bytevector-output-port . g5069) (bytevector->string . g5068) (buffer-mode? . g5067) (binary-port? . g5066) (&i/o-encoding . g4f04) (&i/o-decoding . g4f03) (&i/o-port . g4f02) (&i/o-file-does-not-exist . g4f01) (&i/o-file-already-exists . g4f00) (&i/o-file-is-read-only . g4eff) (&i/o-file-protection . g4efe) (&i/o-filename . g4efd) (&i/o-invalid-position . g4efc) (&i/o-write . g4efb) (&i/o-read . g4efa) (&i/o . g4ef9) (error-handling-mode . g4ede) (file-options . g4edd) (buffer-mode . g4edc) (eol-style . g4edb)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g5062) (enum-set=? . g5061) (enum-set-universe . g5060) (enum-set-union . g505f) (enum-set-subset? . g505e) (enum-set-projection . g505d) (enum-set-member? . g505c) (enum-set-intersection . g505b) (enum-set-indexer . g505a) (enum-set-difference . g5059) (enum-set-constructor . g5058) (enum-set-complement . g5057) (enum-set->list . g5056) (define-enumeration . g4ee9)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g4abf) (warning? . g4a37) (violation? . g4a76) (undefined-violation? . g4b36) (syntax-violation? . g4b1d) (syntax-violation-subform . g4b21) (syntax-violation-form . g4b1f) (syntax-violation . g2fb1) (simple-conditions . g5055) (serious-condition? . g4a4c) (non-continuable-violation? . g4ad6) (message-condition? . g4a20) (make-who-condition . g4abb) (make-warning . g4a35) (make-violation . g4a74) (make-undefined-violation . g4b34) (make-syntax-violation . g4b17) (make-serious-condition . g4a4a) (make-non-continuable-violation . g4ad4) (make-message-condition . g4a1c) (make-lexical-violation . g4afe) (make-irritants-condition . g4aa0) (make-implementation-restriction-violation . g4ae9) (make-error . g4a5f) (make-assertion-violation . g4a89) (lexical-violation? . g4b00) (irritants-condition? . g4aa4) (implementation-restriction-violation? . g4aeb) (error? . g4a61) (condition-who . g4ac1) (condition-predicate . g5054) (condition-message . g4a22) (condition-irritants . g4aa6) (condition-accessor . g5053) (condition . g5052) (assertion-violation? . g4a8b) (condition? . g5051) (&undefined . g4ef8) (&syntax . g4ef7) (&lexical . g4ef6) (&implementation-restriction . g4ef5) (&non-continuable . g4ef4) (&who . g4ef3) (&irritants . g4ef2) (&assertion . g4ef1) (&violation . g4ef0) (&error . g4eef) (&serious . g4eee) (&warning . g4eed) (&message . g4eec) (&condition . g4eeb) (define-condition-type . g4eea)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a3 '(rnrs records inspection) '(6) '() '() '() '((record? . g50fe) (record-type-uid . g50fd) (record-type-sealed? . g50fc) (record-type-parent . g50fb) (record-type-opaque? . g50fa) (record-type-name . g50f9) (record-type-generative? . g50f8) (record-type-field-names . g50f7) (record-rtd . g50f6) (record-field-mutable? . g50f5)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g5105) (record-predicate . g5104) (record-mutator . g5103) (record-constructor . g5102) (record-accessor . g5101) (make-record-type-descriptor . g5100) (make-record-constructor-descriptor . g50ff)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g4ee8) (parent-rtd . g4ee7) (nongenerative . g4ee6) (opaque . g4ee5) (sealed . g4ee4) (protocol . g4ee3) (parent . g4ee2) (immutable . g4ee1) (mutable . g4ee0) (fields . g4edf) (record-constructor-descriptor . g4ebe) (record-type-descriptor . g4ebd)) '() values values '#f '#f '#t '#f) (g2ae0@g297f@install-library 'g51a6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . g4c78) (&no-nans-rtd . g4c76) (&no-infinities-rcd . g4c63) (&no-infinities-rtd . g4c61) (&i/o-encoding-rcd . g4c4e) (&i/o-encoding-rtd . g4c4c) (&i/o-decoding-rcd . g4c33) (&i/o-decoding-rtd . g4c31) (&i/o-port-rcd . g4c1e) (&i/o-port-rtd . g4c1c) (&i/o-file-does-not-exist-rcd . g4c03) (&i/o-file-does-not-exist-rtd . g4c01) (&i/o-file-already-exists-rcd . g4bee) (&i/o-file-already-exists-rtd . g4bec) (&i/o-file-is-read-only-rcd . g4bd9) (&i/o-file-is-read-only-rtd . g4bd7) (&i/o-file-protection-rcd . g4bc4) (&i/o-file-protection-rtd . g4bc2) (&i/o-filename-rcd . g4baf) (&i/o-filename-rtd . g4bad) (&i/o-invalid-position-rcd . g4b94) (&i/o-invalid-position-rtd . g4b92) (&i/o-write-rcd . g4b79) (&i/o-write-rtd . g4b77) (&i/o-read-rcd . g4b64) (&i/o-read-rtd . g4b62) (&i/o-rcd . g4b4f) (&i/o-rtd . g4b4d) (&undefined-rcd . g4b3a) (&undefined-rtd . g4b38) (&syntax-rcd . g4b25) (&syntax-rtd . g4b23) (&lexical-rcd . g4b04) (&lexical-rtd . g4b02) (&implementation-restriction-rcd . g4aef) (&implementation-restriction-rtd . g4aed) (&non-continuable-rcd . g4ada) (&non-continuable-rtd . g4ad8) (&who-rcd . g4ac5) (&who-rtd . g4ac3) (&irritants-rcd . g4aaa) (&irritants-rtd . g4aa8) (&assertion-rcd . g4a8f) (&assertion-rtd . g4a8d) (&violation-rcd . g4a7a) (&violation-rtd . g4a78) (&error-rcd . g4a65) (&error-rtd . g4a63) (&serious-rcd . g4a50) (&serious-rtd . g4a4e) (&warning-rcd . g4a3b) (&warning-rtd . g4a39) (&message-rcd . g4a26) (&message-rtd . g4a24) (&condition-rcd . g49c7) (&condition-rtd . g49c5) (syntax-error . g2fad) (syntax-dispatch . g2ec8) (pretty-print . g5186) (eval-core . g5185) (set-symbol-value! . g5184) (symbol-value . g5183) (gensym . g5182) (void . g5181) (load . g4d85) (interaction-environment . g2fbd) (char-ready? . g5180) (regexp? . g517f) (read-line . g517e) (ungensym . g517d) (alist->eq-hash-table . g517c) (assoc-ref . g517b) (print . g517a) (format . g5179) (host-os . g5178) (library-path . g295e) (standard-library-path . g5177) (file-newer? . g5176) (stat-mtime . g5175) (write-to-file . g5174) (file->list . g5173) (file->string . g5172) (digit->integer . g5171) (call-with-string-input-port . g5170) (call-with-string-io . g516f) (string-split . g516e) (bytevector-for-each . g516d) (string->regexp . g516c) (rxmatch . g516b) (regexp-replace-all . g516a) (hashtable-for-each . g5169) (call-process . g5168) (local-tz-offset . g5167) (microseconds . g5166) (readdir . g5165) (set-current-directory! . g5164) (expand-path . g5163) (current-directory . g5162) (%spawn . g5161) (%waitpid . g5160) (%ffi-supported? . g515f) (%ffi-pointer-ref . g515e) (%ffi-pointer->string . g515d) (%ffi-call->string-or-zero . g515c) (%ffi-call->double . g515b) (%ffi-call->void* . g515a) (%ffi-call->void . g5159) (%ffi-call->int . g5158) (%ffi-lookup . g5157) (%ffi-open . g5156) (%fork . g5155) (%pipe . g5154) (p . g5153) (open-output-string . g5152) (get-output-string . g5151) (get-environment-variables . g5150) (get-environment-variable . g514f) (get-timeofday . g514e) (get-command-line . g514d) (sys-display . g514c) (whereis . g514b) (register . g514a) (vm-join! . g5149) (vm-set-value! . g5148) (vm? . g5147) (main-vm? . g5146) (vm-eval . g5145) (vm-self . g5144) (vm-start! . g5143) (make-vm . g5142) (mutex-try-lock! . g5141) (mutex-unlock! . g5140) (mutex-lock! . g513f) (mutex? . g513e) (make-mutex . g513d) (condition-variable-notify-all! . g513c) (condition-variable-notify! . g513b) (condition-variable-wait! . g513a) (make-condition-variable . g5139) (mosh-executable-path . g5138) (make-file-options . g5137) (source-info . g5136) (make-compiler-instruction . g5135) (make-instruction . g5134) (set-source-info! . g5133) (bignum? . g5132) (fast-equal? . g5131) (fasl-read . g5130) (fasl-write . g512f) (time-usage . g512e) (os-constant . g512d) (make-parameter . g2791) (socket-port . g512c) (socket-shutdown . g512b) (socket-close . g512a) (socket-send . g5129) (socket-recv! . g5128) (socket-recv . g5127) (make-server-socket . g5126) (make-client-socket . g5125) (socket-accept . g5124) (socket? . g5123) (string-upcase . g5122) (string-titlecase . g5121) (string-normalize-nfkd . g5120) (string-normalize-nfkc . g511f) (string-normalize-nfd . g511e) (string-normalize-nfc . g511d) (string-foldcase . g511c) (string-downcase . g511b) (string-ci>? . g511a) (string-ci>=? . g5119) (string-ci=? . g5118) (string-ci<? . g5117) (string-ci<=? . g5116) (char-whitespace? . g5115) (char-upper-case? . g5114) (char-title-case? . g5113) (char-numeric? . g5112) (char-lower-case? . g5111) (char-general-category . g5110) (char-upcase . g510f) (char-titlecase . g510e) (char-foldcase . g510d) (char-downcase . g510c) (char-ci>? . g510b) (char-ci>=? . g510a) (char-ci=? . g5109) (char-ci<? . g5108) (char-ci<=? . g5107) (char-alphabetic? . g5106) (make-variable-transformer . g2cf5) (identifier? . g2fb3) (generate-temporaries . g2f9f) (free-identifier=? . g2fa1) (syntax->datum . g2fb7) (datum->syntax . g2fb5) (bound-identifier=? . g2fa3) (record-type-descriptor? . g5105) (record-predicate . g5104) (record-mutator . g5103) (record-constructor . g5102) (record-accessor . g5101) (make-record-type-descriptor . g5100) (make-record-constructor-descriptor . g50ff) (record? . g50fe) (record-type-uid . g50fd) (record-type-sealed? . g50fc) (record-type-parent . g50fb) (record-type-opaque? . g50fa) (record-type-name . g50f9) (record-type-generative? . g50f8) (record-type-field-names . g50f7) (record-rtd . g50f6) (record-field-mutable? . g50f5) (delete-file . g50f4) (file-exists? . g50f3) (vector-sort! . g50f2) (vector-sort . g50f1) (list-sort . g50f0) (symbol-hash . g50ef) (string-ci-hash . g50ee) (string-hash . g50ed) (equal-hash . g50ec) (hashtable-equivalence-function . g50eb) (make-hashtable . g50ea) (hashtable-hash-function . g50e9) (make-eqv-hashtable . g50e8) (make-eq-hashtable . g50e7) (hashtable? . g50e6) (hashtable-update! . g50e5) (hashtable-size . g50e4) (hashtable-set! . g50e3) (hashtable-ref . g50e2) (hashtable-mutable? . g50e1) (hashtable-keys . g50e0) (hashtable-entries . g50df) (hashtable-delete! . g50de) (hashtable-copy . g50dd) (hashtable-contains? . g50dc) (hashtable-clear! . g50db) (call-with-output-file . g50da) (call-with-input-file . g50d9) (write-char . g50d8) (write . g50d7) (with-output-to-file . g50d6) (with-input-from-file . g50d5) (read-char . g50d4) (read . g50d3) (peek-char . g50d2) (open-output-file . g50d1) (open-input-file . g50d0) (newline . g50cf) (display . g50ce) (close-output-port . g50cd) (close-input-port . g50cc) (eof-object? . g50cb) (eof-object . g50ca) (current-error-port . g50c9) (current-output-port . g50c8) (current-input-port . g50c7) (output-port? . g50c6) (input-port? . g50c5) (utf-8-codec . g50c4) (utf-16-codec . g50c3) (transcoder-error-handling-mode . g50c2) (transcoder-eol-style . g50c1) (transcoder-codec . g50c0) (transcoded-port . g50bf) (textual-port? . g50be) (string->bytevector . g50bd) (standard-output-port . g50bc) (standard-input-port . g50bb) (standard-error-port . g50ba) (set-port-position! . g50b9) (put-u8 . g50b8) (put-string . g50b7) (put-datum . g50b6) (put-char . g50b5) (put-bytevector . g50b4) (port? . g50b3) (port-transcoder . g50b2) (port-position . g50b1) (port-has-set-port-position!? . g50b0) (port-has-port-position? . g50af) (port-eof? . g50ae) (output-port-buffer-mode . g50ad) (open-string-output-port . g50ac) (open-string-input-port . g50ab) (open-file-output-port . g50aa) (open-file-input/output-port . g50a9) (open-file-input-port . g50a8) (open-bytevector-output-port . g50a7) (open-bytevector-input-port . g50a6) (native-transcoder . g50a5) (native-eol-style . g50a4) (make-transcoder . g50a3) (latin-1-codec . g50a2) (make-i/o-write-error . g4b73) (make-i/o-read-error . g4b5e) (make-i/o-port-error . g4c14) (make-i/o-invalid-position-error . g4b8a) (make-i/o-filename-error . g4ba5) (make-i/o-file-protection-error . g4bbe) (make-i/o-file-is-read-only-error . g4bd3) (make-i/o-file-does-not-exist-error . g4bfd) (make-i/o-file-already-exists-error . g4be8) (make-i/o-error . g4b49) (make-i/o-encoding-error . g4c44) (make-i/o-decoding-error . g4c2d) (make-custom-textual-output-port . g50a1) (make-custom-textual-input/output-port . g50a0) (make-custom-textual-input-port . g509f) (make-custom-binary-output-port . g509e) (make-custom-binary-input/output-port . g509d) (make-custom-binary-input-port . g509c) (make-bytevector . g509b) (lookahead-u8 . g509a) (lookahead-char . g5099) (i/o-write-error? . g4b75) (i/o-read-error? . g4b60) (i/o-port-error? . g4c18) (i/o-invalid-position-error? . g4b8e) (i/o-filename-error? . g4ba9) (i/o-file-protection-error? . g4bc0) (i/o-file-is-read-only-error? . g4bd5) (i/o-file-does-not-exist-error? . g4bff) (i/o-file-already-exists-error? . g4bea) (i/o-error? . g4b4b) (i/o-error-position . g4b90) (i/o-error-port . g4c1a) (i/o-error-filename . g4bab) (i/o-encoding-error? . g4c48) (i/o-encoding-error-char . g4c4a) (i/o-decoding-error? . g4c2f) (get-u8 . g5098) (get-string-n! . g5097) (get-string-n . g5096) (get-string-all . g5095) (get-line . g5094) (get-datum . g5093) (get-char . g5092) (get-bytevector-some . g5091) (get-bytevector-n! . g5090) (get-bytevector-n . g508f) (get-bytevector-all . g508e) (flush-output-port . g508d) (close-port . g508c) (scheme-report-environment . g2f8d) (quotient . g508b) (null-environment . g2f8b) (remainder . g508a) (modulo . g5089) (inexact->exact . g5088) (force . g5087) (exact->inexact . g5086) (make-promise . g5085) (exit . g5084) (command-line . g4d7f) (string-fill! . g5083) (string-set! . g5082) (set-cdr! . g5081) (set-car! . g5080) (remove . g507f) (remv . g507e) (remp . g507d) (remq . g507c) (partition . g507b) (memv . g507a) (memq . g5079) (memp . g5078) (member . g5077) (exists . g5076) (for-all . g5075) (fold-right . g5074) (fold-left . g5073) (find . g5072) (filter . g5071) (cons* . g5070) (assv . g506f) (assq . g506e) (assp . g506d) (assoc . g506c) (call-with-string-output-port . g506b) (call-with-port . g506a) (call-with-bytevector-output-port . g5069) (bytevector->string . g5068) (buffer-mode? . g5067) (binary-port? . g5066) (with-exception-handler . g5065) (raise-continuable . g5064) (raise . g5063) (eval . g2f91) (environment . g2f89) (make-enumeration . g5062) (enum-set=? . g5061) (enum-set-universe . g5060) (enum-set-union . g505f) (enum-set-subset? . g505e) (enum-set-projection . g505d) (enum-set-member? . g505c) (enum-set-intersection . g505b) (enum-set-indexer . g505a) (enum-set-difference . g5059) (enum-set-constructor . g5058) (enum-set-complement . g5057) (enum-set->list . g5056) (who-condition? . g4abf) (warning? . g4a37) (violation? . g4a76) (undefined-violation? . g4b36) (syntax-violation? . g4b1d) (syntax-violation-subform . g4b21) (syntax-violation-form . g4b1f) (syntax-violation . g2fb1) (simple-conditions . g5055) (serious-condition? . g4a4c) (non-continuable-violation? . g4ad6) (message-condition? . g4a20) (make-who-condition . g4abb) (make-warning . g4a35) (make-violation . g4a74) (make-undefined-violation . g4b34) (make-syntax-violation . g4b17) (make-serious-condition . g4a4a) (make-non-continuable-violation . g4ad4) (make-message-condition . g4a1c) (make-lexical-violation . g4afe) (make-irritants-condition . g4aa0) (make-implementation-restriction-violation . g4ae9) (make-error . g4a5f) (make-assertion-violation . g4a89) (lexical-violation? . g4b00) (irritants-condition? . g4aa4) (implementation-restriction-violation? . g4aeb) (error? . g4a61) (condition-who . g4ac1) (condition-predicate . g5054) (condition-message . g4a22) (condition-irritants . g4aa6) (condition-accessor . g5053) (condition . g5052) (assertion-violation? . g4a8b) (condition? . g5051) (utf32->string . g5050) (utf16->string . g504f) (utf8->string . g504e) (uint-list->bytevector . g504d) (u8-list->bytevector . g504c) (string->utf8 . g504b) (string->utf32 . g504a) (string->utf16 . g5049) (sint-list->bytevector . g5048) (native-endianness . g5047) (bytevector? . g5046) (bytevector=? . g5045) (bytevector-uint-set! . g5044) (bytevector-uint-ref . g5043) (bytevector-u8-set! . g5042) (bytevector-u8-ref . g5041) (bytevector-u64-set! . g5040) (bytevector-u64-ref . g503f) (bytevector-u64-native-set! . g503e) (bytevector-u64-native-ref . g503d) (bytevector-u32-set! . g503c) (bytevector-u32-ref . g503b) (bytevector-u32-native-set! . g503a) (bytevector-u32-native-ref . g5039) (bytevector-u16-set! . g5038) (bytevector-u16-ref . g5037) (bytevector-u16-native-set! . g5036) (bytevector-u16-native-ref . g5035) (bytevector-sint-set! . g5034) (bytevector-sint-ref . g5033) (bytevector-s8-set! . g5032) (bytevector-s8-ref . g5031) (bytevector-s64-set! . g5030) (bytevector-s64-ref . g502f) (bytevector-s64-native-set! . g502e) (bytevector-s64-native-ref . g502d) (bytevector-s32-set! . g502c) (bytevector-s32-ref . g502b) (bytevector-s32-native-set! . g502a) (bytevector-s32-native-ref . g5029) (bytevector-s16-set! . g5028) (bytevector-s16-ref . g5027) (bytevector-s16-native-set! . g5026) (bytevector-s16-native-ref . g5025) (bytevector-length . g5024) (bytevector-ieee-single-ref . g5023) (bytevector-ieee-single-set! . g5022) (bytevector-ieee-single-native-set! . g5021) (bytevector-ieee-single-native-ref . g5020) (bytevector-ieee-double-set! . g501f) (bytevector-ieee-double-ref . g501e) (bytevector-ieee-double-native-set! . g501d) (bytevector-ieee-double-native-ref . g501c) (bytevector-fill! . g501b) (bytevector-copy! . g501a) (bytevector-copy . g5019) (bytevector->uint-list . g5018) (bytevector->u8-list . g5017) (bytevector->sint-list . g5016) (no-nans-violation? . g4c74) (no-infinities-violation? . g4c5f) (make-no-nans-violation . g4c72) (make-no-infinities-violation . g4c5d) (real->flonum . g5015) (flzero? . g5014) (fltruncate . g5013) (fltan . g5012) (flsqrt . g5011) (flsin . g5010) (flround . g500f) (flpositive? . g500e) (flonum? . g500d) (flodd? . g500c) (flnumerator . g500b) (flnegative? . g500a) (flnan? . g5009) (flmod0 . g5008) (flmod . g5007) (flmin . g5006) (flmax . g5005) (fllog . g5004) (flinteger? . g5003) (flinfinite? . g5002) (flfloor . g5001) (flfinite? . g5000) (flexpt . g4fff) (flexp . g4ffe) (fleven? . g4ffd) (fldiv0-and-mod0 . g4ffc) (fldiv0 . g4ffb) (fldiv-and-mod . g4ffa) (fldiv . g4ff9) (fldenominator . g4ff8) (flcos . g4ff7) (flceiling . g4ff6) (flatan . g4ff5) (flasin . g4ff4) (flacos . g4ff3) (flabs . g4ff2) (fl>? . g4ff1) (fl>=? . g4ff0) (fl=? . g4fef) (fl<? . g4fee) (fl<=? . g4fed) (fl/ . g4fec) (fl- . g4feb) (fl+ . g4fea) (fl* . g4fe9) (fixnum->flonum . g4fe8) (fxzero? . g4fe7) (fxxor . g4fe6) (fxrotate-bit-field . g4fe5) (fxreverse-bit-field . g4fe4) (fxpositive? . g4fe3) (fxodd? . g4fe2) (fxnot . g4fe1) (fxnegative? . g4fe0) (fxmod0 . g4fdf) (fxmod . g4fde) (fxmin . g4fdd) (fxmax . g4fdc) (fxlength . g4fdb) (fxior . g4fda) (fxif . g4fd9) (fxfirst-bit-set . g4fd8) (fxeven? . g4fd7) (fxdiv0-and-mod0 . g4fd6) (fxdiv0 . g4fd5) (fxdiv-and-mod . g4fd4) (fxdiv . g4fd3) (fxcopy-bit-field . g4fd2) (fxcopy-bit . g4fd1) (fxbit-set? . g4fd0) (fxbit-field . g4fcf) (fxbit-count . g4fce) (fxarithmetic-shift-right . g4fcd) (fxarithmetic-shift-left . g4fcc) (fxarithmetic-shift . g4fcb) (fxand . g4fca) (fx>? . g4fc9) (fx>=? . g4fc8) (fx=? . g4fc7) (fx<? . g4fc6) (fx<=? . g4fc5) (fx-/carry . g4fc4) (fx- . g4fc3) (fx+/carry . g4fc2) (fx+ . g4fc1) (fx*/carry . g4fc0) (fx* . g4fbf) (greatest-fixnum . g4fbe) (least-fixnum . g4fbd) (fixnum-width . g4fbc) (fixnum? . g4fbb) (bitwise-rotate-bit-field . g4fba) (bitwise-reverse-bit-field . g4fb9) (bitwise-length . g4fb8) (bitwise-if . g4fb7) (bitwise-first-bit-set . g4fb6) (bitwise-copy-bit-field . g4fb5) (bitwise-copy-bit . g4fb4) (bitwise-bit-set? . g4fb3) (bitwise-bit-field . g4fb2) (bitwise-bit-count . g4fb1) (bitwise-xor . g4fb0) (bitwise-ior . g4faf) (bitwise-and . g4fae) (bitwise-not . g4fad) (bitwise-arithmetic-shift-right . g4fac) (bitwise-arithmetic-shift-left . g4fab) (bitwise-arithmetic-shift . g4faa) (zero? . g4fa9) (vector? . g4fa8) (vector-set! . g4fa7) (vector-ref . g4fa6) (vector-map . g4fa5) (vector-length . g4fa4) (vector-for-each . g4fa3) (vector-fill! . g4fa2) (vector->list . g4fa1) (vector . g4fa0) (values . g4f9f) (truncate . g4f9e) (tan . g4f9d) (symbol? . g4f9c) (symbol=? . g4f9b) (symbol->string . g4f9a) (substring . g4f99) (string? . g4f98) (string>? . g4f97) (string>=? . g4f96) (string=? . g4f95) (string<? . g4f94) (string<=? . g4f93) (string-ref . g4f92) (string-length . g4f91) (string-for-each . g4f90) (string-copy . g4f8f) (string-append . g4f8e) (string->symbol . g4f8d) (string->number . g4f8c) (string->list . g4f8b) (string . g4f8a) (sqrt . g4f89) (sin . g4f88) (round . g4f87) (reverse . g4f86) (real? . g4f85) (real-valued? . g4f84) (real-part . g4f83) (rationalize . g4f82) (rational? . g4f81) (rational-valued? . g4f80) (procedure? . g4f7f) (positive? . g4f7e) (pair? . g4f7d) (odd? . g4f7c) (numerator . g4f7b) (number? . g4f7a) (number->string . g4f79) (null? . g4f78) (not . g4f77) (negative? . g4f76) (nan? . g4f75) (min . g4f74) (max . g4f73) (map . g4f72) (make-vector . g4f71) (make-string . g4f70) (make-rectangular . g4f6f) (make-polar . g4f6e) (magnitude . g4f6d) (log . g4f6c) (list? . g4f6b) (list-tail . g4f6a) (list-ref . g4f69) (list->vector . g4f68) (list->string . g4f67) (list . g4f66) (length . g4f65) (lcm . g4f64) (integer? . g4f63) (integer-valued? . g4f62) (integer->char . g4f61) (infinite? . g4f60) (inexact? . g4f5f) (inexact . g4f5e) (imag-part . g4f5d) (gcd . g4f5c) (for-each . g4f5b) (floor . g4f5a) (finite? . g4f59) (expt . g4f58) (exp . g4f57) (exact? . g4f56) (exact-integer-sqrt . g4f55) (exact . g4f54) (even? . g4f53) (error . g4f52) (eqv? . g4f51) (equal? . g4f50) (eq? . g4f4f) (dynamic-wind . g4f4e) (div0-and-mod0 . g4f4d) (mod0 . g4f4c) (div0 . g4f4b) (div-and-mod . g4f4a) (mod . g4f49) (div . g4f48) (denominator . g4f47) (cos . g4f46) (cons . g4f45) (complex? . g4f44) (char? . g4f43) (char>? . g4f42) (char>=? . g4f41) (char=? . g4f40) (char<? . g4f3f) (char<=? . g4f3e) (char->integer . g4f3d) (ceiling . g4f3c) (call-with-values . g4f3b) (call/cc . g4f3a) (call-with-current-continuation . g4f39) (cddddr . g4f38) (cdddar . g4f37) (cddadr . g4f36) (cddaar . g4f35) (cdaddr . g4f34) (cdadar . g4f33) (cdaadr . g4f32) (cdaaar . g4f31) (cadddr . g4f30) (caddar . g4f2f) (cadadr . g4f2e) (cadaar . g4f2d) (caaddr . g4f2c) (caadar . g4f2b) (caaadr . g4f2a) (caaaar . g4f29) (cdddr . g4f28) (cddar . g4f27) (cdadr . g4f26) (cdaar . g4f25) (caddr . g4f24) (cadar . g4f23) (caadr . g4f22) (caaar . g4f21) (cddr . g4f20) (cdar . g4f1f) (cadr . g4f1e) (caar . g4f1d) (cdr . g4f1c) (car . g4f1b) (boolean? . g4f1a) (boolean=? . g4f19) (atan . g4f18) (assertion-violation . g4f17) (assertion-error . g2fab) (asin . g4f16) (apply . g4f15) (append . g4f14) (angle . g4f13) (acos . g4f12) (abs . g4f11) (/ . g4f10) (* . g4f0f) (- . g4f0e) (+ . g4f0d) (>= . g4f0c) (> . g4f0b) (= . g4f0a) (<= . g4f09) (< . g4f08) (library . g4f07) (&no-nans . g4f06) (&no-infinities . g4f05) (&i/o-encoding . g4f04) (&i/o-decoding . g4f03) (&i/o-port . g4f02) (&i/o-file-does-not-exist . g4f01) (&i/o-file-already-exists . g4f00) (&i/o-file-is-read-only . g4eff) (&i/o-file-protection . g4efe) (&i/o-filename . g4efd) (&i/o-invalid-position . g4efc) (&i/o-write . g4efb) (&i/o-read . g4efa) (&i/o . g4ef9) (&undefined . g4ef8) (&syntax . g4ef7) (&lexical . g4ef6) (&implementation-restriction . g4ef5) (&non-continuable . g4ef4) (&who . g4ef3) (&irritants . g4ef2) (&assertion . g4ef1) (&violation . g4ef0) (&error . g4eef) (&serious . g4eee) (&warning . g4eed) (&message . g4eec) (&condition . g4eeb) (define-condition-type . g4eea) (define-enumeration . g4ee9) (define-record-type . g4ee8) (parent-rtd . g4ee7) (nongenerative . g4ee6) (opaque . g4ee5) (sealed . g4ee4) (protocol . g4ee3) (parent . g4ee2) (immutable . g4ee1) (mutable . g4ee0) (fields . g4edf) (error-handling-mode . g4ede) (file-options . g4edd) (buffer-mode . g4edc) (eol-style . g4edb) (guard . g4eda) (trace-define . g4ed9) (trace-lambda . g4ed8) (unsyntax-splicing . g4ed7) (unsyntax . g4ed6) (unquote-splicing . g4ed5) (unquote . g4ed4) (_ . g4ed3) (else . g4ed2) (=> . g4ed1) (... . g4ed0) (assert . g4ecf) (endianness . g4ece) (delay . g4ecd) (time . g4ecc) (do . g4ecb) (cond . g4eca) (let* . g4ec9) (let . g4ec8) (let*-values . g4ec7) (let-values . g4ec6) (identifier-syntax . g4ec5) (with-syntax . g4ec4) (quasisyntax . g4ec3) (quasiquote . g4ec2) (syntax-rules . g4ec1) (include . g4ec0) (define-struct . g4ebf) (record-constructor-descriptor . g4ebe) (record-type-descriptor . g4ebd) (case . g4ebc) (parameterize . g4ebb) (unless . g4eba) (when . g4eb9) (or . g4eb8) (and . g4eb7) (if . g4eb6) (letrec* . g4eb5) (letrec . g4eb4) (type-descriptor . g4eb3) (case-lambda . g4eb2) (lambda . g4eb1) (syntax . g4eb0) (syntax-case . g4eaf) (quote . g4eae) (foreign-call . g4ead) (letrec-syntax . g4eac) (let-syntax . g4eab) (set! . g4eaa) (import . g4ea9) (begin . g4ea8) (module . g4ea7) (define-syntax . g4ea6) (define . g4ea5)) '((g4c78 core-prim . &no-nans-rcd) (g4c76 core-prim . &no-nans-rtd) (g4c63 core-prim . &no-infinities-rcd) (g4c61 core-prim . &no-infinities-rtd) (g4c4e core-prim . &i/o-encoding-rcd) (g4c4c core-prim . &i/o-encoding-rtd) (g4c33 core-prim . &i/o-decoding-rcd) (g4c31 core-prim . &i/o-decoding-rtd) (g4c1e core-prim . &i/o-port-rcd) (g4c1c core-prim . &i/o-port-rtd) (g4c03 core-prim . &i/o-file-does-not-exist-rcd) (g4c01 core-prim . &i/o-file-does-not-exist-rtd) (g4bee core-prim . &i/o-file-already-exists-rcd) (g4bec core-prim . &i/o-file-already-exists-rtd) (g4bd9 core-prim . &i/o-file-is-read-only-rcd) (g4bd7 core-prim . &i/o-file-is-read-only-rtd) (g4bc4 core-prim . &i/o-file-protection-rcd) (g4bc2 core-prim . &i/o-file-protection-rtd) (g4baf core-prim . &i/o-filename-rcd) (g4bad core-prim . &i/o-filename-rtd) (g4b94 core-prim . &i/o-invalid-position-rcd) (g4b92 core-prim . &i/o-invalid-position-rtd) (g4b79 core-prim . &i/o-write-rcd) (g4b77 core-prim . &i/o-write-rtd) (g4b64 core-prim . &i/o-read-rcd) (g4b62 core-prim . &i/o-read-rtd) (g4b4f core-prim . &i/o-rcd) (g4b4d core-prim . &i/o-rtd) (g4b3a core-prim . &undefined-rcd) (g4b38 core-prim . &undefined-rtd) (g4b25 core-prim . &syntax-rcd) (g4b23 core-prim . &syntax-rtd) (g4b04 core-prim . &lexical-rcd) (g4b02 core-prim . &lexical-rtd) (g4aef core-prim . &implementation-restriction-rcd) (g4aed core-prim . &implementation-restriction-rtd) (g4ada core-prim . &non-continuable-rcd) (g4ad8 core-prim . &non-continuable-rtd) (g4ac5 core-prim . &who-rcd) (g4ac3 core-prim . &who-rtd) (g4aaa core-prim . &irritants-rcd) (g4aa8 core-prim . &irritants-rtd) (g4a8f core-prim . &assertion-rcd) (g4a8d core-prim . &assertion-rtd) (g4a7a core-prim . &violation-rcd) (g4a78 core-prim . &violation-rtd) (g4a65 core-prim . &error-rcd) (g4a63 core-prim . &error-rtd) (g4a50 core-prim . &serious-rcd) (g4a4e core-prim . &serious-rtd) (g4a3b core-prim . &warning-rcd) (g4a39 core-prim . &warning-rtd) (g4a26 core-prim . &message-rcd) (g4a24 core-prim . &message-rtd) (g49c7 core-prim . &condition-rcd) (g49c5 core-prim . &condition-rtd) (g2fad core-prim . syntax-error) (g2ec8 core-prim . syntax-dispatch) (g5186 core-prim . pretty-print) (g5185 core-prim . eval-core) (g5184 core-prim . set-symbol-value!) (g5183 core-prim . symbol-value) (g5182 core-prim . gensym) (g5181 core-prim . void) (g4d85 core-prim . load) (g2fbd core-prim . interaction-environment) (g5180 core-prim . char-ready?) (g517f core-prim . regexp?) (g517e core-prim . read-line) (g517d core-prim . ungensym) (g517c core-prim . alist->eq-hash-table) (g517b core-prim . assoc-ref) (g517a core-prim . print) (g5179 core-prim . format) (g5178 core-prim . host-os) (g295e core-prim . library-path) (g5177 core-prim . standard-library-path) (g5176 core-prim . file-newer?) (g5175 core-prim . stat-mtime) (g5174 core-prim . write-to-file) (g5173 core-prim . file->list) (g5172 core-prim . file->string) (g5171 core-prim . digit->integer) (g5170 core-prim . call-with-string-input-port) (g516f core-prim . call-with-string-io) (g516e core-prim . string-split) (g516d core-prim . bytevector-for-each) (g516c core-prim . string->regexp) (g516b core-prim . rxmatch) (g516a core-prim . regexp-replace-all) (g5169 core-prim . hashtable-for-each) (g5168 core-prim . call-process) (g5167 core-prim . local-tz-offset) (g5166 core-prim . microseconds) (g5165 core-prim . readdir) (g5164 core-prim . set-current-directory!) (g5163 core-prim . expand-path) (g5162 core-prim . current-directory) (g5161 core-prim . %spawn) (g5160 core-prim . %waitpid) (g515f core-prim . %ffi-supported?) (g515e core-prim . %ffi-pointer-ref) (g515d core-prim . %ffi-pointer->string) (g515c core-prim . %ffi-call->string-or-zero) (g515b core-prim . %ffi-call->double) (g515a core-prim . %ffi-call->void*) (g5159 core-prim . %ffi-call->void) (g5158 core-prim . %ffi-call->int) (g5157 core-prim . %ffi-lookup) (g5156 core-prim . %ffi-open) (g5155 core-prim . %fork) (g5154 core-prim . %pipe) (g5153 core-prim . p) (g5152 core-prim . open-output-string) (g5151 core-prim . get-output-string) (g5150 core-prim . get-environment-variables) (g514f core-prim . get-environment-variable) (g514e core-prim . get-timeofday) (g514d core-prim . get-command-line) (g514c core-prim . sys-display) (g514b core-prim . whereis) (g514a core-prim . register) (g5149 core-prim . vm-join!) (g5148 core-prim . vm-set-value!) (g5147 core-prim . vm?) (g5146 core-prim . main-vm?) (g5145 core-prim . vm-eval) (g5144 core-prim . vm-self) (g5143 core-prim . vm-start!) (g5142 core-prim . make-vm) (g5141 core-prim . mutex-try-lock!) (g5140 core-prim . mutex-unlock!) (g513f core-prim . mutex-lock!) (g513e core-prim . mutex?) (g513d core-prim . make-mutex) (g513c core-prim . condition-variable-notify-all!) (g513b core-prim . condition-variable-notify!) (g513a core-prim . condition-variable-wait!) (g5139 core-prim . make-condition-variable) (g5138 core-prim . mosh-executable-path) (g5137 core-prim . make-file-options) (g5136 core-prim . source-info) (g5135 core-prim . make-compiler-instruction) (g5134 core-prim . make-instruction) (g5133 core-prim . set-source-info!) (g5132 core-prim . bignum?) (g5131 core-prim . fast-equal?) (g5130 core-prim . fasl-read) (g512f core-prim . fasl-write) (g512e core-prim . time-usage) (g512d core-prim . os-constant) (g2791 core-prim . make-parameter) (g512c core-prim . socket-port) (g512b core-prim . socket-shutdown) (g512a core-prim . socket-close) (g5129 core-prim . socket-send) (g5128 core-prim . socket-recv!) (g5127 core-prim . socket-recv) (g5126 core-prim . make-server-socket) (g5125 core-prim . make-client-socket) (g5124 core-prim . socket-accept) (g5123 core-prim . socket?) (g5122 core-prim . string-upcase) (g5121 core-prim . string-titlecase) (g5120 core-prim . string-normalize-nfkd) (g511f core-prim . string-normalize-nfkc) (g511e core-prim . string-normalize-nfd) (g511d core-prim . string-normalize-nfc) (g511c core-prim . string-foldcase) (g511b core-prim . string-downcase) (g511a core-prim . string-ci>?) (g5119 core-prim . string-ci>=?) (g5118 core-prim . string-ci=?) (g5117 core-prim . string-ci<?) (g5116 core-prim . string-ci<=?) (g5115 core-prim . char-whitespace?) (g5114 core-prim . char-upper-case?) (g5113 core-prim . char-title-case?) (g5112 core-prim . char-numeric?) (g5111 core-prim . char-lower-case?) (g5110 core-prim . char-general-category) (g510f core-prim . char-upcase) (g510e core-prim . char-titlecase) (g510d core-prim . char-foldcase) (g510c core-prim . char-downcase) (g510b core-prim . char-ci>?) (g510a core-prim . char-ci>=?) (g5109 core-prim . char-ci=?) (g5108 core-prim . char-ci<?) (g5107 core-prim . char-ci<=?) (g5106 core-prim . char-alphabetic?) (g2cf5 core-prim . make-variable-transformer) (g2fb3 core-prim . identifier?) (g2f9f core-prim . generate-temporaries) (g2fa1 core-prim . free-identifier=?) (g2fb7 core-prim . syntax->datum) (g2fb5 core-prim . datum->syntax) (g2fa3 core-prim . bound-identifier=?) (g5105 core-prim . record-type-descriptor?) (g5104 core-prim . record-predicate) (g5103 core-prim . record-mutator) (g5102 core-prim . record-constructor) (g5101 core-prim . record-accessor) (g5100 core-prim . make-record-type-descriptor) (g50ff core-prim . make-record-constructor-descriptor) (g50fe core-prim . record?) (g50fd core-prim . record-type-uid) (g50fc core-prim . record-type-sealed?) (g50fb core-prim . record-type-parent) (g50fa core-prim . record-type-opaque?) (g50f9 core-prim . record-type-name) (g50f8 core-prim . record-type-generative?) (g50f7 core-prim . record-type-field-names) (g50f6 core-prim . record-rtd) (g50f5 core-prim . record-field-mutable?) (g50f4 core-prim . delete-file) (g50f3 core-prim . file-exists?) (g50f2 core-prim . vector-sort!) (g50f1 core-prim . vector-sort) (g50f0 core-prim . list-sort) (g50ef core-prim . symbol-hash) (g50ee core-prim . string-ci-hash) (g50ed core-prim . string-hash) (g50ec core-prim . equal-hash) (g50eb core-prim . hashtable-equivalence-function) (g50ea core-prim . make-hashtable) (g50e9 core-prim . hashtable-hash-function) (g50e8 core-prim . make-eqv-hashtable) (g50e7 core-prim . make-eq-hashtable) (g50e6 core-prim . hashtable?) (g50e5 core-prim . hashtable-update!) (g50e4 core-prim . hashtable-size) (g50e3 core-prim . hashtable-set!) (g50e2 core-prim . hashtable-ref) (g50e1 core-prim . hashtable-mutable?) (g50e0 core-prim . hashtable-keys) (g50df core-prim . hashtable-entries) (g50de core-prim . hashtable-delete!) (g50dd core-prim . hashtable-copy) (g50dc core-prim . hashtable-contains?) (g50db core-prim . hashtable-clear!) (g50da core-prim . call-with-output-file) (g50d9 core-prim . call-with-input-file) (g50d8 core-prim . write-char) (g50d7 core-prim . write) (g50d6 core-prim . with-output-to-file) (g50d5 core-prim . with-input-from-file) (g50d4 core-prim . read-char) (g50d3 core-prim . read) (g50d2 core-prim . peek-char) (g50d1 core-prim . open-output-file) (g50d0 core-prim . open-input-file) (g50cf core-prim . newline) (g50ce core-prim . display) (g50cd core-prim . close-output-port) (g50cc core-prim . close-input-port) (g50cb core-prim . eof-object?) (g50ca core-prim . eof-object) (g50c9 core-prim . current-error-port) (g50c8 core-prim . current-output-port) (g50c7 core-prim . current-input-port) (g50c6 core-prim . output-port?) (g50c5 core-prim . input-port?) (g50c4 core-prim . utf-8-codec) (g50c3 core-prim . utf-16-codec) (g50c2 core-prim . transcoder-error-handling-mode) (g50c1 core-prim . transcoder-eol-style) (g50c0 core-prim . transcoder-codec) (g50bf core-prim . transcoded-port) (g50be core-prim . textual-port?) (g50bd core-prim . string->bytevector) (g50bc core-prim . standard-output-port) (g50bb core-prim . standard-input-port) (g50ba core-prim . standard-error-port) (g50b9 core-prim . set-port-position!) (g50b8 core-prim . put-u8) (g50b7 core-prim . put-string) (g50b6 core-prim . put-datum) (g50b5 core-prim . put-char) (g50b4 core-prim . put-bytevector) (g50b3 core-prim . port?) (g50b2 core-prim . port-transcoder) (g50b1 core-prim . port-position) (g50b0 core-prim . port-has-set-port-position!?) (g50af core-prim . port-has-port-position?) (g50ae core-prim . port-eof?) (g50ad core-prim . output-port-buffer-mode) (g50ac core-prim . open-string-output-port) (g50ab core-prim . open-string-input-port) (g50aa core-prim . open-file-output-port) (g50a9 core-prim . open-file-input/output-port) (g50a8 core-prim . open-file-input-port) (g50a7 core-prim . open-bytevector-output-port) (g50a6 core-prim . open-bytevector-input-port) (g50a5 core-prim . native-transcoder) (g50a4 core-prim . native-eol-style) (g50a3 core-prim . make-transcoder) (g50a2 core-prim . latin-1-codec) (g4b73 core-prim . make-i/o-write-error) (g4b5e core-prim . make-i/o-read-error) (g4c14 core-prim . make-i/o-port-error) (g4b8a core-prim . make-i/o-invalid-position-error) (g4ba5 core-prim . make-i/o-filename-error) (g4bbe core-prim . make-i/o-file-protection-error) (g4bd3 core-prim . make-i/o-file-is-read-only-error) (g4bfd core-prim . make-i/o-file-does-not-exist-error) (g4be8 core-prim . make-i/o-file-already-exists-error) (g4b49 core-prim . make-i/o-error) (g4c44 core-prim . make-i/o-encoding-error) (g4c2d core-prim . make-i/o-decoding-error) (g50a1 core-prim . make-custom-textual-output-port) (g50a0 core-prim . make-custom-textual-input/output-port) (g509f core-prim . make-custom-textual-input-port) (g509e core-prim . make-custom-binary-output-port) (g509d core-prim . make-custom-binary-input/output-port) (g509c core-prim . make-custom-binary-input-port) (g509b core-prim . make-bytevector) (g509a core-prim . lookahead-u8) (g5099 core-prim . lookahead-char) (g4b75 core-prim . i/o-write-error?) (g4b60 core-prim . i/o-read-error?) (g4c18 core-prim . i/o-port-error?) (g4b8e core-prim . i/o-invalid-position-error?) (g4ba9 core-prim . i/o-filename-error?) (g4bc0 core-prim . i/o-file-protection-error?) (g4bd5 core-prim . i/o-file-is-read-only-error?) (g4bff core-prim . i/o-file-does-not-exist-error?) (g4bea core-prim . i/o-file-already-exists-error?) (g4b4b core-prim . i/o-error?) (g4b90 core-prim . i/o-error-position) (g4c1a core-prim . i/o-error-port) (g4bab core-prim . i/o-error-filename) (g4c48 core-prim . i/o-encoding-error?) (g4c4a core-prim . i/o-encoding-error-char) (g4c2f core-prim . i/o-decoding-error?) (g5098 core-prim . get-u8) (g5097 core-prim . get-string-n!) (g5096 core-prim . get-string-n) (g5095 core-prim . get-string-all) (g5094 core-prim . get-line) (g5093 core-prim . get-datum) (g5092 core-prim . get-char) (g5091 core-prim . get-bytevector-some) (g5090 core-prim . get-bytevector-n!) (g508f core-prim . get-bytevector-n) (g508e core-prim . get-bytevector-all) (g508d core-prim . flush-output-port) (g508c core-prim . close-port) (g2f8d core-prim . scheme-report-environment) (g508b core-prim . quotient) (g2f8b core-prim . null-environment) (g508a core-prim . remainder) (g5089 core-prim . modulo) (g5088 core-prim . inexact->exact) (g5087 core-prim . force) (g5086 core-prim . exact->inexact) (g5085 core-prim . make-promise) (g5084 core-prim . exit) (g4d7f core-prim . command-line) (g5083 core-prim . string-fill!) (g5082 core-prim . string-set!) (g5081 core-prim . set-cdr!) (g5080 core-prim . set-car!) (g507f core-prim . remove) (g507e core-prim . remv) (g507d core-prim . remp) (g507c core-prim . remq) (g507b core-prim . partition) (g507a core-prim . memv) (g5079 core-prim . memq) (g5078 core-prim . memp) (g5077 core-prim . member) (g5076 core-prim . exists) (g5075 core-prim . for-all) (g5074 core-prim . fold-right) (g5073 core-prim . fold-left) (g5072 core-prim . find) (g5071 core-prim . filter) (g5070 core-prim . cons*) (g506f core-prim . assv) (g506e core-prim . assq) (g506d core-prim . assp) (g506c core-prim . assoc) (g506b core-prim . call-with-string-output-port) (g506a core-prim . call-with-port) (g5069 core-prim . call-with-bytevector-output-port) (g5068 core-prim . bytevector->string) (g5067 core-prim . buffer-mode?) (g5066 core-prim . binary-port?) (g5065 core-prim . with-exception-handler) (g5064 core-prim . raise-continuable) (g5063 core-prim . raise) (g2f91 core-prim . eval) (g2f89 core-prim . environment) (g5062 core-prim . make-enumeration) (g5061 core-prim . enum-set=?) (g5060 core-prim . enum-set-universe) (g505f core-prim . enum-set-union) (g505e core-prim . enum-set-subset?) (g505d core-prim . enum-set-projection) (g505c core-prim . enum-set-member?) (g505b core-prim . enum-set-intersection) (g505a core-prim . enum-set-indexer) (g5059 core-prim . enum-set-difference) (g5058 core-prim . enum-set-constructor) (g5057 core-prim . enum-set-complement) (g5056 core-prim . enum-set->list) (g4abf core-prim . who-condition?) (g4a37 core-prim . warning?) (g4a76 core-prim . violation?) (g4b36 core-prim . undefined-violation?) (g4b1d core-prim . syntax-violation?) (g4b21 core-prim . syntax-violation-subform) (g4b1f core-prim . syntax-violation-form) (g2fb1 core-prim . syntax-violation) (g5055 core-prim . simple-conditions) (g4a4c core-prim . serious-condition?) (g4ad6 core-prim . non-continuable-violation?) (g4a20 core-prim . message-condition?) (g4abb core-prim . make-who-condition) (g4a35 core-prim . make-warning) (g4a74 core-prim . make-violation) (g4b34 core-prim . make-undefined-violation) (g4b17 core-prim . make-syntax-violation) (g4a4a core-prim . make-serious-condition) (g4ad4 core-prim . make-non-continuable-violation) (g4a1c core-prim . make-message-condition) (g4afe core-prim . make-lexical-violation) (g4aa0 core-prim . make-irritants-condition) (g4ae9 core-prim . make-implementation-restriction-violation) (g4a5f core-prim . make-error) (g4a89 core-prim . make-assertion-violation) (g4b00 core-prim . lexical-violation?) (g4aa4 core-prim . irritants-condition?) (g4aeb core-prim . implementation-restriction-violation?) (g4a61 core-prim . error?) (g4ac1 core-prim . condition-who) (g5054 core-prim . condition-predicate) (g4a22 core-prim . condition-message) (g4aa6 core-prim . condition-irritants) (g5053 core-prim . condition-accessor) (g5052 core-prim . condition) (g4a8b core-prim . assertion-violation?) (g5051 core-prim . condition?) (g5050 core-prim . utf32->string) (g504f core-prim . utf16->string) (g504e core-prim . utf8->string) (g504d core-prim . uint-list->bytevector) (g504c core-prim . u8-list->bytevector) (g504b core-prim . string->utf8) (g504a core-prim . string->utf32) (g5049 core-prim . string->utf16) (g5048 core-prim . sint-list->bytevector) (g5047 core-prim . native-endianness) (g5046 core-prim . bytevector?) (g5045 core-prim . bytevector=?) (g5044 core-prim . bytevector-uint-set!) (g5043 core-prim . bytevector-uint-ref) (g5042 core-prim . bytevector-u8-set!) (g5041 core-prim . bytevector-u8-ref) (g5040 core-prim . bytevector-u64-set!) (g503f core-prim . bytevector-u64-ref) (g503e core-prim . bytevector-u64-native-set!) (g503d core-prim . bytevector-u64-native-ref) (g503c core-prim . bytevector-u32-set!) (g503b core-prim . bytevector-u32-ref) (g503a core-prim . bytevector-u32-native-set!) (g5039 core-prim . bytevector-u32-native-ref) (g5038 core-prim . bytevector-u16-set!) (g5037 core-prim . bytevector-u16-ref) (g5036 core-prim . bytevector-u16-native-set!) (g5035 core-prim . bytevector-u16-native-ref) (g5034 core-prim . bytevector-sint-set!) (g5033 core-prim . bytevector-sint-ref) (g5032 core-prim . bytevector-s8-set!) (g5031 core-prim . bytevector-s8-ref) (g5030 core-prim . bytevector-s64-set!) (g502f core-prim . bytevector-s64-ref) (g502e core-prim . bytevector-s64-native-set!) (g502d core-prim . bytevector-s64-native-ref) (g502c core-prim . bytevector-s32-set!) (g502b core-prim . bytevector-s32-ref) (g502a core-prim . bytevector-s32-native-set!) (g5029 core-prim . bytevector-s32-native-ref) (g5028 core-prim . bytevector-s16-set!) (g5027 core-prim . bytevector-s16-ref) (g5026 core-prim . bytevector-s16-native-set!) (g5025 core-prim . bytevector-s16-native-ref) (g5024 core-prim . bytevector-length) (g5023 core-prim . bytevector-ieee-single-ref) (g5022 core-prim . bytevector-ieee-single-set!) (g5021 core-prim . bytevector-ieee-single-native-set!) (g5020 core-prim . bytevector-ieee-single-native-ref) (g501f core-prim . bytevector-ieee-double-set!) (g501e core-prim . bytevector-ieee-double-ref) (g501d core-prim . bytevector-ieee-double-native-set!) (g501c core-prim . bytevector-ieee-double-native-ref) (g501b core-prim . bytevector-fill!) (g501a core-prim . bytevector-copy!) (g5019 core-prim . bytevector-copy) (g5018 core-prim . bytevector->uint-list) (g5017 core-prim . bytevector->u8-list) (g5016 core-prim . bytevector->sint-list) (g4c74 core-prim . no-nans-violation?) (g4c5f core-prim . no-infinities-violation?) (g4c72 core-prim . make-no-nans-violation) (g4c5d core-prim . make-no-infinities-violation) (g5015 core-prim . real->flonum) (g5014 core-prim . flzero?) (g5013 core-prim . fltruncate) (g5012 core-prim . fltan) (g5011 core-prim . flsqrt) (g5010 core-prim . flsin) (g500f core-prim . flround) (g500e core-prim . flpositive?) (g500d core-prim . flonum?) (g500c core-prim . flodd?) (g500b core-prim . flnumerator) (g500a core-prim . flnegative?) (g5009 core-prim . flnan?) (g5008 core-prim . flmod0) (g5007 core-prim . flmod) (g5006 core-prim . flmin) (g5005 core-prim . flmax) (g5004 core-prim . fllog) (g5003 core-prim . flinteger?) (g5002 core-prim . flinfinite?) (g5001 core-prim . flfloor) (g5000 core-prim . flfinite?) (g4fff core-prim . flexpt) (g4ffe core-prim . flexp) (g4ffd core-prim . fleven?) (g4ffc core-prim . fldiv0-and-mod0) (g4ffb core-prim . fldiv0) (g4ffa core-prim . fldiv-and-mod) (g4ff9 core-prim . fldiv) (g4ff8 core-prim . fldenominator) (g4ff7 core-prim . flcos) (g4ff6 core-prim . flceiling) (g4ff5 core-prim . flatan) (g4ff4 core-prim . flasin) (g4ff3 core-prim . flacos) (g4ff2 core-prim . flabs) (g4ff1 core-prim . fl>?) (g4ff0 core-prim . fl>=?) (g4fef core-prim . fl=?) (g4fee core-prim . fl<?) (g4fed core-prim . fl<=?) (g4fec core-prim . fl/) (g4feb core-prim . fl-) (g4fea core-prim . fl+) (g4fe9 core-prim . fl*) (g4fe8 core-prim . fixnum->flonum) (g4fe7 core-prim . fxzero?) (g4fe6 core-prim . fxxor) (g4fe5 core-prim . fxrotate-bit-field) (g4fe4 core-prim . fxreverse-bit-field) (g4fe3 core-prim . fxpositive?) (g4fe2 core-prim . fxodd?) (g4fe1 core-prim . fxnot) (g4fe0 core-prim . fxnegative?) (g4fdf core-prim . fxmod0) (g4fde core-prim . fxmod) (g4fdd core-prim . fxmin) (g4fdc core-prim . fxmax) (g4fdb core-prim . fxlength) (g4fda core-prim . fxior) (g4fd9 core-prim . fxif) (g4fd8 core-prim . fxfirst-bit-set) (g4fd7 core-prim . fxeven?) (g4fd6 core-prim . fxdiv0-and-mod0) (g4fd5 core-prim . fxdiv0) (g4fd4 core-prim . fxdiv-and-mod) (g4fd3 core-prim . fxdiv) (g4fd2 core-prim . fxcopy-bit-field) (g4fd1 core-prim . fxcopy-bit) (g4fd0 core-prim . fxbit-set?) (g4fcf core-prim . fxbit-field) (g4fce core-prim . fxbit-count) (g4fcd core-prim . fxarithmetic-shift-right) (g4fcc core-prim . fxarithmetic-shift-left) (g4fcb core-prim . fxarithmetic-shift) (g4fca core-prim . fxand) (g4fc9 core-prim . fx>?) (g4fc8 core-prim . fx>=?) (g4fc7 core-prim . fx=?) (g4fc6 core-prim . fx<?) (g4fc5 core-prim . fx<=?) (g4fc4 core-prim . fx-/carry) (g4fc3 core-prim . fx-) (g4fc2 core-prim . fx+/carry) (g4fc1 core-prim . fx+) (g4fc0 core-prim . fx*/carry) (g4fbf core-prim . fx*) (g4fbe core-prim . greatest-fixnum) (g4fbd core-prim . least-fixnum) (g4fbc core-prim . fixnum-width) (g4fbb core-prim . fixnum?) (g4fba core-prim . bitwise-rotate-bit-field) (g4fb9 core-prim . bitwise-reverse-bit-field) (g4fb8 core-prim . bitwise-length) (g4fb7 core-prim . bitwise-if) (g4fb6 core-prim . bitwise-first-bit-set) (g4fb5 core-prim . bitwise-copy-bit-field) (g4fb4 core-prim . bitwise-copy-bit) (g4fb3 core-prim . bitwise-bit-set?) (g4fb2 core-prim . bitwise-bit-field) (g4fb1 core-prim . bitwise-bit-count) (g4fb0 core-prim . bitwise-xor) (g4faf core-prim . bitwise-ior) (g4fae core-prim . bitwise-and) (g4fad core-prim . bitwise-not) (g4fac core-prim . bitwise-arithmetic-shift-right) (g4fab core-prim . bitwise-arithmetic-shift-left) (g4faa core-prim . bitwise-arithmetic-shift) (g4fa9 core-prim . zero?) (g4fa8 core-prim . vector?) (g4fa7 core-prim . vector-set!) (g4fa6 core-prim . vector-ref) (g4fa5 core-prim . vector-map) (g4fa4 core-prim . vector-length) (g4fa3 core-prim . vector-for-each) (g4fa2 core-prim . vector-fill!) (g4fa1 core-prim . vector->list) (g4fa0 core-prim . vector) (g4f9f core-prim . values) (g4f9e core-prim . truncate) (g4f9d core-prim . tan) (g4f9c core-prim . symbol?) (g4f9b core-prim . symbol=?) (g4f9a core-prim . symbol->string) (g4f99 core-prim . substring) (g4f98 core-prim . string?) (g4f97 core-prim . string>?) (g4f96 core-prim . string>=?) (g4f95 core-prim . string=?) (g4f94 core-prim . string<?) (g4f93 core-prim . string<=?) (g4f92 core-prim . string-ref) (g4f91 core-prim . string-length) (g4f90 core-prim . string-for-each) (g4f8f core-prim . string-copy) (g4f8e core-prim . string-append) (g4f8d core-prim . string->symbol) (g4f8c core-prim . string->number) (g4f8b core-prim . string->list) (g4f8a core-prim . string) (g4f89 core-prim . sqrt) (g4f88 core-prim . sin) (g4f87 core-prim . round) (g4f86 core-prim . reverse) (g4f85 core-prim . real?) (g4f84 core-prim . real-valued?) (g4f83 core-prim . real-part) (g4f82 core-prim . rationalize) (g4f81 core-prim . rational?) (g4f80 core-prim . rational-valued?) (g4f7f core-prim . procedure?) (g4f7e core-prim . positive?) (g4f7d core-prim . pair?) (g4f7c core-prim . odd?) (g4f7b core-prim . numerator) (g4f7a core-prim . number?) (g4f79 core-prim . number->string) (g4f78 core-prim . null?) (g4f77 core-prim . not) (g4f76 core-prim . negative?) (g4f75 core-prim . nan?) (g4f74 core-prim . min) (g4f73 core-prim . max) (g4f72 core-prim . map) (g4f71 core-prim . make-vector) (g4f70 core-prim . make-string) (g4f6f core-prim . make-rectangular) (g4f6e core-prim . make-polar) (g4f6d core-prim . magnitude) (g4f6c core-prim . log) (g4f6b core-prim . list?) (g4f6a core-prim . list-tail) (g4f69 core-prim . list-ref) (g4f68 core-prim . list->vector) (g4f67 core-prim . list->string) (g4f66 core-prim . list) (g4f65 core-prim . length) (g4f64 core-prim . lcm) (g4f63 core-prim . integer?) (g4f62 core-prim . integer-valued?) (g4f61 core-prim . integer->char) (g4f60 core-prim . infinite?) (g4f5f core-prim . inexact?) (g4f5e core-prim . inexact) (g4f5d core-prim . imag-part) (g4f5c core-prim . gcd) (g4f5b core-prim . for-each) (g4f5a core-prim . floor) (g4f59 core-prim . finite?) (g4f58 core-prim . expt) (g4f57 core-prim . exp) (g4f56 core-prim . exact?) (g4f55 core-prim . exact-integer-sqrt) (g4f54 core-prim . exact) (g4f53 core-prim . even?) (g4f52 core-prim . error) (g4f51 core-prim . eqv?) (g4f50 core-prim . equal?) (g4f4f core-prim . eq?) (g4f4e core-prim . dynamic-wind) (g4f4d core-prim . div0-and-mod0) (g4f4c core-prim . mod0) (g4f4b core-prim . div0) (g4f4a core-prim . div-and-mod) (g4f49 core-prim . mod) (g4f48 core-prim . div) (g4f47 core-prim . denominator) (g4f46 core-prim . cos) (g4f45 core-prim . cons) (g4f44 core-prim . complex?) (g4f43 core-prim . char?) (g4f42 core-prim . char>?) (g4f41 core-prim . char>=?) (g4f40 core-prim . char=?) (g4f3f core-prim . char<?) (g4f3e core-prim . char<=?) (g4f3d core-prim . char->integer) (g4f3c core-prim . ceiling) (g4f3b core-prim . call-with-values) (g4f3a core-prim . call/cc) (g4f39 core-prim . call-with-current-continuation) (g4f38 core-prim . cddddr) (g4f37 core-prim . cdddar) (g4f36 core-prim . cddadr) (g4f35 core-prim . cddaar) (g4f34 core-prim . cdaddr) (g4f33 core-prim . cdadar) (g4f32 core-prim . cdaadr) (g4f31 core-prim . cdaaar) (g4f30 core-prim . cadddr) (g4f2f core-prim . caddar) (g4f2e core-prim . cadadr) (g4f2d core-prim . cadaar) (g4f2c core-prim . caaddr) (g4f2b core-prim . caadar) (g4f2a core-prim . caaadr) (g4f29 core-prim . caaaar) (g4f28 core-prim . cdddr) (g4f27 core-prim . cddar) (g4f26 core-prim . cdadr) (g4f25 core-prim . cdaar) (g4f24 core-prim . caddr) (g4f23 core-prim . cadar) (g4f22 core-prim . caadr) (g4f21 core-prim . caaar) (g4f20 core-prim . cddr) (g4f1f core-prim . cdar) (g4f1e core-prim . cadr) (g4f1d core-prim . caar) (g4f1c core-prim . cdr) (g4f1b core-prim . car) (g4f1a core-prim . boolean?) (g4f19 core-prim . boolean=?) (g4f18 core-prim . atan) (g4f17 core-prim . assertion-violation) (g2fab core-prim . assertion-error) (g4f16 core-prim . asin) (g4f15 core-prim . apply) (g4f14 core-prim . append) (g4f13 core-prim . angle) (g4f12 core-prim . acos) (g4f11 core-prim . abs) (g4f10 core-prim . /) (g4f0f core-prim . *) (g4f0e core-prim . -) (g4f0d core-prim . +) (g4f0c core-prim . >=) (g4f0b core-prim . >) (g4f0a core-prim . =) (g4f09 core-prim . <=) (g4f08 core-prim . <) (g4f07 core-prim . library) (g4f06 $core-rtd &no-nans-rtd &no-nans-rcd) (g4f05 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g4f04 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g4f03 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g4f02 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g4f01 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g4f00 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g4eff $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g4efe $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g4efd $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g4efc $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g4efb $core-rtd &i/o-write-rtd &i/o-write-rcd) (g4efa $core-rtd &i/o-read-rtd &i/o-read-rcd) (g4ef9 $core-rtd &i/o-rtd &i/o-rcd) (g4ef8 $core-rtd &undefined-rtd &undefined-rcd) (g4ef7 $core-rtd &syntax-rtd &syntax-rcd) (g4ef6 $core-rtd &lexical-rtd &lexical-rcd) (g4ef5 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g4ef4 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g4ef3 $core-rtd &who-rtd &who-rcd) (g4ef2 $core-rtd &irritants-rtd &irritants-rcd) (g4ef1 $core-rtd &assertion-rtd &assertion-rcd) (g4ef0 $core-rtd &violation-rtd &violation-rcd) (g4eef $core-rtd &error-rtd &error-rcd) (g4eee $core-rtd &serious-rtd &serious-rcd) (g4eed $core-rtd &warning-rtd &warning-rcd) (g4eec $core-rtd &message-rtd &message-rcd) (g4eeb $core-rtd &condition-rtd &condition-rcd) (g4eea macro . define-condition-type) (g4ee9 macro . define-enumeration) (g4ee8 macro . define-record-type) (g4ee7 macro . parent-rtd) (g4ee6 macro . nongenerative) (g4ee5 macro . opaque) (g4ee4 macro . sealed) (g4ee3 macro . protocol) (g4ee2 macro . parent) (g4ee1 macro . immutable) (g4ee0 macro . mutable) (g4edf macro . fields) (g4ede macro . error-handling-mode) (g4edd macro . file-options) (g4edc macro . buffer-mode) (g4edb macro . eol-style) (g4eda macro . guard) (g4ed9 macro . trace-define) (g4ed8 macro . trace-lambda) (g4ed7 macro . unsyntax-splicing) (g4ed6 macro . unsyntax) (g4ed5 macro . unquote-splicing) (g4ed4 macro . unquote) (g4ed3 macro . _) (g4ed2 macro . else) (g4ed1 macro . =>) (g4ed0 macro . ...) (g4ecf macro . assert) (g4ece macro . endianness) (g4ecd macro . delay) (g4ecc macro . time) (g4ecb macro . do) (g4eca macro . cond) (g4ec9 macro . let*) (g4ec8 macro . let) (g4ec7 macro . let*-values) (g4ec6 macro . let-values) (g4ec5 macro . identifier-syntax) (g4ec4 macro . with-syntax) (g4ec3 macro . quasisyntax) (g4ec2 macro . quasiquote) (g4ec1 macro . syntax-rules) (g4ec0 macro . include) (g4ebf macro . define-struct) (g4ebe core-macro . record-constructor-descriptor) (g4ebd core-macro . record-type-descriptor) (g4ebc macro . case) (g4ebb macro . parameterize) (g4eba macro . unless) (g4eb9 macro . when) (g4eb8 core-macro . or) (g4eb7 core-macro . and) (g4eb6 core-macro . if) (g4eb5 core-macro . letrec*) (g4eb4 core-macro . letrec) (g4eb3 core-macro . type-descriptor) (g4eb2 core-macro . case-lambda) (g4eb1 core-macro . lambda) (g4eb0 core-macro . syntax) (g4eaf core-macro . syntax-case) (g4eae core-macro . quote) (g4ead core-macro . foreign-call) (g4eac letrec-syntax) (g4eab let-syntax) (g4eaa set!) (g4ea9 import) (g4ea8 begin) (g4ea7 module) (g4ea6 define-syntax) (g4ea5 define)) values values '#f '#f '#f '#f) (g2ae0@g297f@install-library 'g51a7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g5186) (eval-core . g5185) (set-symbol-value! . g5184) (symbol-value . g5183) (gensym . g5182) (void . g5181)) '() values values '#f '#f '#f '#f) (g2ae0@g297f@install-library 'g51a8 '(mosh) '() '() '() '() '((set-symbol-value! . g5184) (symbol-value . g5183) (regexp? . g517f) (read-line . g517e) (ungensym . g517d) (alist->eq-hash-table . g517c) (assoc-ref . g517b) (print . g517a) (format . g5179) (host-os . g5178) (library-path . g295e) (standard-library-path . g5177) (file-newer? . g5176) (stat-mtime . g5175) (write-to-file . g5174) (file->list . g5173) (file->string . g5172) (digit->integer . g5171) (call-with-string-input-port . g5170) (call-with-string-io . g516f) (string-split . g516e) (bytevector-for-each . g516d) (string->regexp . g516c) (rxmatch . g516b) (regexp-replace-all . g516a) (hashtable-for-each . g5169) (readdir . g5165) (set-current-directory! . g5164) (expand-path . g5163) (current-directory . g5162) (p . g5153) (get-timeofday . g514e) (get-command-line . g514d) (sys-display . g514c) (whereis . g514b) (register . g514a) (vm-join! . g5149) (vm-set-value! . g5148) (vm? . g5147) (main-vm? . g5146) (vm-eval . g5145) (vm-self . g5144) (vm-start! . g5143) (make-vm . g5142) (mutex-try-lock! . g5141) (mutex-unlock! . g5140) (mutex-lock! . g513f) (mutex? . g513e) (make-mutex . g513d) (condition-variable-notify-all! . g513c) (condition-variable-notify! . g513b) (condition-variable-wait! . g513a) (make-condition-variable . g5139) (mosh-executable-path . g5138) (make-file-options . g5137) (source-info . g5136) (make-compiler-instruction . g5135) (make-instruction . g5134) (set-source-info! . g5133) (bignum? . g5132) (fast-equal? . g5131) (fasl-read . g5130) (fasl-write . g512f) (time-usage . g512e) (os-constant . g512d) (time . g4ecc) (include . g4ec0)) '() values values '#f '#f '#f '#f) (g2ae0@g297f@install-library 'g51a9 '(system) '() '() '() '() '((call-process . g5168) (local-tz-offset . g5167) (microseconds . g5166) (expand-path . g5163) (%spawn . g5161) (%waitpid . g5160) (%ffi-supported? . g515f) (%ffi-pointer-ref . g515e) (%ffi-pointer->string . g515d) (%ffi-call->string-or-zero . g515c) (%ffi-call->double . g515b) (%ffi-call->void* . g515a) (%ffi-call->void . g5159) (%ffi-call->int . g5158) (%ffi-lookup . g5157) (%ffi-open . g5156) (%fork . g5155) (%pipe . g5154) (open-output-string . g5152) (get-output-string . g5151) (get-environment-variables . g5150) (get-environment-variable . g514f) (make-parameter . g2791) (socket-port . g512c) (socket-shutdown . g512b) (socket-close . g512a) (socket-send . g5129) (socket-recv! . g5128) (socket-recv . g5127) (make-server-socket . g5126) (make-client-socket . g5125) (socket-accept . g5124) (socket? . g5123) (parameterize . g4ebb)) '() values values '#f '#f '#f '#f))
((lambda (g4d6e@add-library-path! g4d70@parse-and-add-library-path g4d72@for-each-with-index g4d74@rpad g4d76@condition-printer g4d78@record->field-alist g4d7a@map-with-index g4d7c@repl g4d7e@trace-printer g4d80@command-line g4d82@local-library-path g4d84@load/args g4d86@load g4d88@ironscheme-build g4d8a@eval-top-level g4d8c@compile-system-libraries g4d8e@compile g4d90@compile->closure g4d92@pre-compile-r6rs-file g4d94@load-r6rs-top-level g4d96@load-r6rs-top-level-sexp) (begin (set! g4d6e@add-library-path! (lambda (g4db9@path) (g2ad0@g295f@library-path (append (g2ad0@g295f@library-path) (list g4db9@path))))) (set! g4d70@parse-and-add-library-path (lambda (g4dbb@paths g4dbc@message) ((lambda (g4dbf@t) (if g4dbf@t ((lambda (g4dc1@paths) (for-each (lambda (g4dc3@path) (if (file-exists? g4dc3@path) (g4d6e@add-library-path! (expand-path g4dc3@path)) (format (current-error-port) g4dbc@message g4dc3@path))) (reverse (string-split g4dc1@paths '#\:)))) g4dbf@t) (void))) g4dbb@paths))) (set! g4d72@for-each-with-index (lambda (g4dc5@proc g4dc6@lst) (letrec ((g4dc9@loop (lambda (g4dcb@i g4dcc@lst) (if (null? g4dcc@lst) (if '#f '#f (void)) (begin (g4dc5@proc g4dcb@i (car g4dcc@lst)) (g4dc9@loop (+ g4dcb@i '1) (cdr g4dcc@lst))))))) (g4dc9@loop '1 g4dc6@lst)))) (set! g4d74@rpad (lambda (g4dcf@str g4dd0@pad g4dd1@n) ((lambda (g4dd5@rest) ((letrec ((g4dd7@loop (lambda (g4dd9@rest g4dda@ret) (if (<= g4dd9@rest '0) g4dda@ret (g4dd7@loop (- g4dd9@rest '1) (string-append g4dda@ret g4dd0@pad)))))) g4dd7@loop) g4dd5@rest (format '"~a" g4dcf@str))) (- g4dd1@n (string-length (format '"~a" g4dcf@str)))))) (set! g4d76@condition-printer (lambda (g4ddd@e g4dde@port) ((lambda (g4de2@max-condition-len) (begin (set! g4de2@max-condition-len (apply max (map (lambda (g4df3@c) (string-length (symbol->string (record-type-name (record-rtd g4df3@c))))) (simple-conditions g4ddd@e)))) (begin (display '" Condition components:\n" g4dde@port) (g4d72@for-each-with-index (lambda (g4de3@i g4de4@x) ((lambda (g4de7@rtd g4de8@fields-alist) (begin (format g4dde@port '" ~d. ~a" g4de3@i (g4d74@rpad (symbol->string (record-type-name g4de7@rtd)) '" " g4de2@max-condition-len)) (if (null? g4de8@fields-alist) (newline g4dde@port) (void)) ((letrec ((g4deb@loop (lambda (g4ded@first g4dee@fields-alist) (if (null? g4dee@fields-alist) '() ((lambda (g4df1@field) (begin (if (not g4ded@first) (display (g4d74@rpad '"" '" " (+ '4 g4de2@max-condition-len)) g4dde@port) (void)) (display '"       " g4dde@port) (display (car g4df1@field) g4dde@port) (display '": " g4dde@port) (write (cdr g4df1@field) g4dde@port) (newline g4dde@port) (g4deb@loop '#f (cdr g4dee@fields-alist)))) (car g4dee@fields-alist)))))) g4deb@loop) '#t g4de8@fields-alist))) (record-rtd g4de4@x) (g4d78@record->field-alist g4de4@x))) (simple-conditions g4ddd@e))))) '#f))) (set! g4d78@record->field-alist (lambda (g4df5@r) ((lambda (g4df8@ref) (begin (set! g4df8@ref (lambda (g4e03@rtd g4e04@i g4e05@x) ((lambda (g4e09@val) (if (symbol? g4e09@val) (ungensym g4e09@val) g4e09@val)) ((record-accessor g4e03@rtd g4e04@i) g4e05@x)))) ((letrec ((g4df9@loop (lambda (g4dfb@ret g4dfc@rtd) (if g4dfc@rtd (g4df9@loop (append g4dfb@ret (g4d7a@map-with-index (lambda (g4dff@i g4e00@field) (cons g4e00@field (g4df8@ref g4dfc@rtd g4dff@i g4df5@r))) (vector->list (record-type-field-names g4dfc@rtd)))) (record-type-parent g4dfc@rtd)) g4dfb@ret)))) g4df9@loop) '() (record-rtd g4df5@r)))) '#f))) (set! g4d7a@map-with-index (lambda (g4e0b@proc g4e0c@lst) ((letrec ((g4e0f@loop (lambda (g4e11@i g4e12@lst g4e13@ret) (if (null? g4e12@lst) (reverse g4e13@ret) (g4e0f@loop (+ g4e11@i '1) (cdr g4e12@lst) (cons (g4e0b@proc g4e11@i (car g4e12@lst)) g4e13@ret)))))) g4e0f@loop) '0 g4e0c@lst '()))) (set! g4d7c@repl (lambda g4e17@x ((lambda (g4e1a@rec) (begin (set! g4e1a@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (g4e1d@g4e1b) (lambda () (with-exception-handler (lambda (g4e1f@e) ((call/cc (lambda (g4e21@g4e1c) (g4e1d@g4e1b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? g4e1f@e) (g4d76@condition-printer g4e1f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" g4e1f@e))) (g4e21@g4e1c (lambda () (raise-continuable g4e1f@e)))))))))) (lambda () ((letrec ((g4e23@loop (lambda (g4e25@line g4e26@accum) ((lambda (g4e2a@parentheses-ok? g4e2c@eval-string-print) (begin (set! g4e2a@parentheses-ok? (lambda (g4e31@text) ((letrec ((g4e33@loop (lambda (g4e35@chars g4e36@p0 g4e37@p1) (if (null? g4e35@chars) (= '0 g4e36@p0 g4e37@p1) ((lambda (g4e3b@t) (if (memv g4e3b@t '(#\()) (g4e33@loop (cdr g4e35@chars) (+ g4e36@p0 '1) g4e37@p1) (if (memv g4e3b@t '(#\))) (g4e33@loop (cdr g4e35@chars) (- g4e36@p0 '1) g4e37@p1) (if (memv g4e3b@t '(#\[)) (g4e33@loop (cdr g4e35@chars) g4e36@p0 (+ g4e37@p1 '1)) (if (memv g4e3b@t '(#\])) (g4e33@loop (cdr g4e35@chars) g4e36@p0 (- g4e37@p1 '1)) (g4e33@loop (cdr g4e35@chars) g4e36@p0 g4e37@p1)))))) (car g4e35@chars)))))) g4e33@loop) (string->list g4e31@text) '0 '0))) (set! g4e2c@eval-string-print (lambda (g4e2f@text) (if (not (or (string=? '"\n" g4e2f@text) (= '0 (string-length g4e2f@text)))) (write (g4d8a@eval-top-level (call-with-port (open-string-input-port g4e2f@text) read))) (void)))) (if (eof-object? g4e25@line) (begin (g4e2c@eval-string-print g4e26@accum) (exit)) ((lambda (g4e2d@current) (if (g4e2a@parentheses-ok? g4e2d@current) (g4e2c@eval-string-print g4e2d@current) (g4e23@loop (get-line (current-input-port)) g4e2d@current))) (string-append g4e26@accum g4e25@line))))) '#f '#f)))) g4e23@loop) (get-line (current-input-port)) '""))))))) (newline) (g4e1a@rec)))) (g4e1a@rec))) '#f))) (set! g4d7e@trace-printer (g2868@g2792@make-parameter write)) (set! g4d80@command-line (g2868@g2792@make-parameter (get-command-line))) (set! g4d82@local-library-path (lambda (g4e3d@filename) (cons (expand-path '".") (g2ad0@g295f@library-path)))) (set! g4d84@load/args (lambda (g4e3f@filename . g4e41@args) (begin (apply g4d94@load-r6rs-top-level g4e3f@filename 'load g4e41@args) (void)))) (set! g4d86@load (lambda (g4e43@filename) (begin (apply g4d94@load-r6rs-top-level g4e43@filename 'load (g4d80@command-line)) (void)))) (set! g4d88@ironscheme-build (lambda () (g4d86@load '"ironscheme-buildscript.ss"))) (set! g4d8a@eval-top-level (lambda (g4e45@x) (g499a@g2f92@eval g4e45@x (g49b0@g2fbe@interaction-environment)))) (set! g4d8c@compile-system-libraries (lambda () (g4d8a@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! g4d8e@compile (lambda (g4e47@filename) (g4d94@load-r6rs-top-level g4e47@filename 'compile))) (set! g4d90@compile->closure (lambda (g4e49@filename) (g4d94@load-r6rs-top-level g4e49@filename 'closure))) (set! g4d92@pre-compile-r6rs-file (lambda (g4e4b@filename) (g4d94@load-r6rs-top-level g4e4b@filename 'compile))) (set! g4d94@load-r6rs-top-level (lambda (g4e4d@filename g4e4e@how . g4e51@args) ((lambda (g4e57@g4e54 g4e58@g4e56) ((lambda (g4e5b@swap) (dynamic-wind g4e5b@swap (lambda () ((lambda (g4e5d@x*) ((lambda (g4e5f@t) (if (memv g4e5f@t '(closure)) (g49af@g2fbc@pre-compile-r6rs-top-level g4e5d@x*) (if (memv g4e5f@t '(load)) ((lambda (g4e65@g4e62 g4e66@g4e64) ((lambda (g4e69@swap) (dynamic-wind g4e69@swap (lambda () ((g49ae@g2fba@compile-r6rs-top-level g4e5d@x*))) g4e69@swap)) (lambda () ((lambda (g4e6b@t) (begin (g4e65@g4e62 g4e66@g4e64) (set! g4e66@g4e64 g4e6b@t))) (g4e65@g4e62))))) g4d80@command-line (cons g4e4d@filename (car g4e51@args))) (if (memv g4e5f@t '(compile)) (begin (g49ae@g2fba@compile-r6rs-top-level g4e5d@x*) (g2ad4@g2967@serialize-all g2863@g2788@serialize-library g28bd@g2876@compile-core-expr)) (if '#f '#f (void)))))) g4e4e@how)) (with-input-from-file g4e4d@filename (lambda () ((letrec ((g4e6d@f (lambda () ((lambda (g4e6f@x) (if (eof-object? g4e6f@x) '() (cons g4e6f@x (g4e6d@f)))) (g285b@g2778@read-annotated))))) g4e6d@f)))))) g4e5b@swap)) (lambda () ((lambda (g4e71@t) (begin (g4e57@g4e54 g4e58@g4e56) (set! g4e58@g4e56 g4e71@t))) (g4e57@g4e54))))) g2ad0@g295f@library-path (g4d82@local-library-path g4e4d@filename)))) (set! g4d96@load-r6rs-top-level-sexp (lambda (g4e73@import-spec g4e74@thunk) ((lambda (g4e7b@g4e78 g4e7c@g4e7a) ((lambda (g4e7f@swap) (dynamic-wind g4e7f@swap (lambda () ((lambda (g4e85@g4e82 g4e86@g4e84) ((lambda (g4e89@swap) (dynamic-wind g4e89@swap (lambda () ((g49ae@g2fba@compile-r6rs-top-level (list (cons 'import g4e73@import-spec) (list g4e74@thunk))))) g4e89@swap)) (lambda () ((lambda (g4e8b@t) (begin (g4e85@g4e82 g4e86@g4e84) (set! g4e86@g4e84 g4e8b@t))) (g4e85@g4e82))))) g4d80@command-line '())) g4e7f@swap)) (lambda () ((lambda (g4e8d@t) (begin (g4e7b@g4e78 g4e7c@g4e7a) (set! g4e7c@g4e7a g4e8d@t))) (g4e7b@g4e78))))) g2ad0@g295f@library-path (g4d82@local-library-path '"")))) (begin (set! g4ea3@g4d96@load-r6rs-top-level-sexp g4d96@load-r6rs-top-level-sexp) (set! g4ea2@g4d94@load-r6rs-top-level g4d94@load-r6rs-top-level) (set! g4ea1@g4d92@pre-compile-r6rs-file g4d92@pre-compile-r6rs-file) (set! g4ea0@g4d90@compile->closure g4d90@compile->closure) (set! g4e9f@g4d8e@compile g4d8e@compile) (set! g4e9e@g4d8c@compile-system-libraries g4d8c@compile-system-libraries) (set! g4e9d@g4d8a@eval-top-level g4d8a@eval-top-level) (set! g4e9c@g4d88@ironscheme-build g4d88@ironscheme-build) (set! g4e9b@g4d86@load g4d86@load) (set! g4e9a@g4d84@load/args g4d84@load/args) (set! g4e99@g4d82@local-library-path g4d82@local-library-path) (set! g4e98@g4d80@command-line g4d80@command-line) (set! g4e97@g4d7e@trace-printer g4d7e@trace-printer) (set! g4e96@g4d7c@repl g4d7c@repl) (set! g4e95@g4d7a@map-with-index g4d7a@map-with-index) (set! g4e94@g4d78@record->field-alist g4d78@record->field-alist) (set! g4e93@g4d76@condition-printer g4d76@condition-printer) (set! g4e92@g4d74@rpad g4d74@rpad) (set! g4e91@g4d72@for-each-with-index g4d72@for-each-with-index) (set! g4e90@g4d70@parse-and-add-library-path g4d70@parse-and-add-library-path) (set! g4e8f@g4d6e@add-library-path! g4d6e@add-library-path!) (g2ad5@g2969@current-precompiled-library-loader g2864@g278a@load-serialized-library) (set-symbol-value! 'load g4d86@load) (set-symbol-value! 'pre-compile-r6rs-file g4d92@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs g4d8a@eval-top-level) (set-symbol-value! 'int-env-syms g4991@g2f80@interaction-environment-symbols) (set-symbol-value! 'expanded2core g28bc@g2874@expanded->core) (set-symbol-value! 'trace-printer g4d7e@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (g4d97@c) (condition (g4ccb@g4ad5@make-non-continuable-violation) (g4cc1@g4abc@make-who-condition 'raise) (g4c85@g4a1d@make-message-condition '"returned from non-continuable exception") (g4cb7@g4aa1@make-irritants-condition (list g4d97@c))))) (g4d70@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (g4d70@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (g4d6e@add-library-path! (string-append (mosh-executable-path) '"/lib")) (g4d6e@add-library-path! (string-append (current-directory) '"/lib"))) (g4d6e@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (g4d99@prefix) (g2ad1@g2961@library-extensions (g4d99@prefix '".mosh" (g2ad1@g2961@library-extensions)))) (lambda (g4d9b@ext g4d9c@ls) (append (map (lambda (g4d9f@x) (string-append g4d9b@ext g4d9f@x)) g4d9c@ls) g4d9c@ls))) ((lambda (g4da1@args g4da2@port) ((lambda (g4da6@ref) (begin (set! g4da6@ref (lambda (g4db1@rtd g4db2@i g4db3@x) ((lambda (g4db7@val) (if (symbol? g4db7@val) (ungensym g4db7@val) g4db7@val)) ((record-accessor g4db1@rtd g4db2@i) g4db3@x)))) (with-exception-handler (lambda (g4da7@c) (if (condition? g4da7@c) (g4d76@condition-printer g4da7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" g4da7@c))) (lambda () (if ((call/cc (lambda (g4dab@g4da9) (lambda () (with-exception-handler (lambda (g4dad@c) ((call/cc (lambda (g4daf@g4daa) (g4dab@g4da9 (lambda () (if '#t '#f (g4daf@g4daa (lambda () (raise-continuable g4dad@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (g4d96@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? g4da1@args) (g4d7c@repl) (g4d94@load-r6rs-top-level (car g4da1@args) 'load (cdr g4da1@args)))))))) '#f)) (g4d80@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
