;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (bg57e@library-file-path->cache-path bg580@read-annotated bg582@annotation-stripped bg584@annotation? bg586@annotation-source bg588@annotation-expression bg58a@scm->fasl bg58c@fasl-save bg58e@fasl-load bg590@serialize-library bg592@load-serialized-library bg594@make-record-printer bg596@compile-core bg598@read-library-source-file bg59a@make-parameter bg59c@mosh-cache-dir bg632@file-options-spec) (begin (set! bg57e@library-file-path->cache-path (lambda (bg633@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bg639@bg636 bg63a@bg638) ((lambda (bg63d@extract bg63e@p) ((lambda (bg642@display-hex) (begin (set! bg642@display-hex (lambda (bg64b@n) (if (<= '0 bg64b@n '9) (display bg64b@n bg63e@p) (display (integer->char (+ (char->integer '#\a) (- bg64b@n '10))) bg63e@p)))) (begin ((letrec ((bg643@f (lambda (bg645@ls) (if (not (null? bg645@ls)) (begin (display '"_" bg63e@p) (for-each (lambda (bg647@c) (if (or (char<=? '#\a bg647@c '#\z) (char<=? '#\A bg647@c '#\Z) (char<=? '#\0 bg647@c '#\9) (memv bg647@c '(#\- #\. #\_ #\~))) (display bg647@c bg63e@p) (begin (display '"%" bg63e@p) ((lambda (bg649@n) (begin (bg642@display-hex (quotient bg649@n '16)) (bg642@display-hex (remainder bg649@n '16)))) (char->integer bg647@c))))) (string->list (car bg645@ls))) (bg643@f (cdr bg645@ls))) (void))))) bg643@f) (string-split bg633@x '#\/)) (bg63d@extract)))) '#f)) bg63a@bg638 bg639@bg636))))) (set! bg580@read-annotated read) (set! bg582@annotation-stripped (lambda (bg64d@x) (bg588@annotation-expression bg64d@x))) (set! bg584@annotation? (lambda (bg64f@x) (source-info bg64f@x))) (set! bg586@annotation-source (lambda (bg651@x) (source-info bg651@x))) (set! bg588@annotation-expression (lambda (bg653@x) (if (pair? bg653@x) (cons (car bg653@x) (cdr bg653@x)) (display '"line:46\n")))) (set! bg58a@scm->fasl (lambda (bg655@filename) (string-append (bg59c@mosh-cache-dir) '"/" (bg57e@library-file-path->cache-path bg655@filename) '".mosh-fasl"))) (set! bg58c@fasl-save (lambda (bg657@filename bg658@obj) (call-with-port (open-file-output-port bg657@filename) (lambda (bg65b@port) ((symbol-value 'fasl-write!) bg658@obj bg65b@port))))) (set! bg58e@fasl-load (lambda (bg65d@filename) (call-with-port (open-file-input-port bg65d@filename) (symbol-value 'fasl-read!)))) (set! bg590@serialize-library (lambda (bg65f@filename bg660@obj) (begin ((lambda (bg663@expanded2core) ((lambda (bg665@compile) ((lambda (bg667@code) ((lambda (bg669@pivot) ((lambda (bg66b@visit) ((lambda () (begin (set-car! bg669@pivot bg66b@visit) ((lambda (bg66d@pivot) ((lambda (bg66f@invoke) ((lambda () (set-car! bg66d@pivot bg66f@invoke)))) (bg665@compile (bg663@expanded2core (car bg66d@pivot))))) (cdr bg669@pivot)))))) (bg665@compile (bg663@expanded2core (car bg669@pivot))))) (cddddr (cddddr bg667@code)))) bg660@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (bg671@fasl-file) (begin (if (file-exists? bg671@fasl-file) (delete-file bg671@fasl-file) (void)) ((call/cc (lambda (bg675@bg673) (lambda () (with-exception-handler (lambda (bg677@c) ((call/cc (lambda (bg679@bg674) (bg675@bg673 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " bg65f@filename) (if (file-exists? bg671@fasl-file) (delete-file bg671@fasl-file) (void)) '#f) (bg679@bg674 (lambda () (raise-continuable bg677@c)))))))))) (lambda () (bg58c@fasl-save bg671@fasl-file bg660@obj))))))))) (bg58a@scm->fasl bg65f@filename))))) (set! bg592@load-serialized-library (lambda (bg67b@filename bg67c@obj) (and (bg59c@mosh-cache-dir) ((lambda (bg67f@fasl-file) (if (and (file-exists? bg67f@fasl-file) ((symbol-value 'file-newer?) bg67f@fasl-file bg67b@filename)) ((lambda (bg681@expanded2core) ((lambda (bg683@eval-compiled-core) ((lambda (bg685@code) ((lambda (bg687@pivot) ((lambda (bg689@visit) ((lambda (bg68b@visit-proc) ((lambda () (begin (set-car! bg687@pivot bg68b@visit-proc) ((lambda (bg68d@pivot) ((lambda (bg68f@invoke) ((lambda () (begin (set-car! bg68d@pivot (lambda () (bg683@eval-compiled-core bg68f@invoke))) (apply bg67c@obj bg685@code))))) (car bg68d@pivot))) (cdr bg687@pivot)))))) (lambda () (bg683@eval-compiled-core bg689@visit)))) (car bg687@pivot))) (cddddr (cddddr bg685@code)))) (bg58e@fasl-load bg67f@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (bg58a@scm->fasl bg67b@filename))))) (set! bg594@make-record-printer (lambda (bg691@name bg692@printer) (lambda bg695@x (begin (display '"record printer") (for-each display bg695@x))))) (set! bg596@compile-core (lambda bg697@x (apply error 'comile-core '"not implementated" bg697@x))) (set! bg598@read-library-source-file (lambda (bg699@file-name) (with-input-from-file bg699@file-name bg580@read-annotated))) (set! bg59a@make-parameter (lambda bg6a9 ((lambda (bg6aa) (if (= bg6aa '1) (apply (lambda (bg69b@x) (bg59a@make-parameter bg69b@x (lambda (bg69d@x) bg69d@x))) bg6a9) (if (= bg6aa '2) (apply (lambda (bg69f@x bg6a0@fender) ((lambda (bg6a3@x) (lambda bg6a7 ((lambda (bg6a8) (if (= bg6a8 '0) (apply (lambda () bg6a3@x) bg6a7) (if (= bg6a8 '1) (apply (lambda (bg6a5@v) (set! bg6a3@x (bg6a0@fender bg6a5@v))) bg6a7) (error 'apply '"invalid arg count")))) (length bg6a7)))) (bg6a0@fender bg69f@x))) bg6a9) (error 'apply '"invalid arg count")))) (length bg6a9)))) (set! bg59c@mosh-cache-dir (bg59a@make-parameter '#f)) (set! bg632@file-options-spec (lambda (bg6ab@x) bg6ab@x)) (begin (set! bg6bd@bg632@file-options-spec bg632@file-options-spec) (set! bg6bc@bg59c@mosh-cache-dir bg59c@mosh-cache-dir) (set! bg6bb@bg59a@make-parameter bg59a@make-parameter) (set! bg6ba@bg598@read-library-source-file bg598@read-library-source-file) (set! bg6b9@bg596@compile-core bg596@compile-core) (set! bg6b8@bg594@make-record-printer bg594@make-record-printer) (set! bg6b7@bg592@load-serialized-library bg592@load-serialized-library) (set! bg6b6@bg590@serialize-library bg590@serialize-library) (set! bg6b5@bg58e@fasl-load bg58e@fasl-load) (set! bg6b4@bg58c@fasl-save bg58c@fasl-save) (set! bg6b3@bg58a@scm->fasl bg58a@scm->fasl) (set! bg6b2@bg588@annotation-expression bg588@annotation-expression) (set! bg6b1@bg586@annotation-source bg586@annotation-source) (set! bg6b0@bg584@annotation? bg584@annotation?) (set! bg6af@bg582@annotation-stripped bg582@annotation-stripped) (set! bg6ae@bg580@read-annotated bg580@read-annotated) (set! bg6ad@bg57e@library-file-path->cache-path bg57e@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bg6c3@current-primitive-locations bg6c5@mutable? bg6c7@rewriter bg6c9@expanded->core bg6cb@compile-core-expr bg6cd@pretty-print bg6cf@compile-core-expr-to-port) (begin (set! bg6c3@current-primitive-locations (bg6bb@bg59a@make-parameter (lambda (bg6d0@x) '#f) (lambda (bg6d2@p) bg6d2@p))) (set! bg6c5@mutable? (lambda (bg6d4@x) (or (pair? bg6d4@x) (vector? bg6d4@x) (hashtable? bg6d4@x)))) (set! bg6c7@rewriter (lambda (bg6d6@quote-hack?) ((lambda (bg6d9@f) (begin (set! bg6d9@f (lambda (bg6da@x) (if (pair? bg6da@x) ((lambda (bg6dc@t) (if (memv bg6dc@t '(quote)) (if (and bg6d6@quote-hack? (bg6c5@mutable? (cadr bg6da@x))) ((lambda (bg6de@g) (begin (set-symbol-value! bg6de@g (cadr bg6da@x)) bg6de@g)) (gensym)) bg6da@x) (if (memv bg6dc@t '(case-lambda)) (cons 'case-lambda (map (lambda (bg6e0@x) (cons (car bg6e0@x) (map bg6d9@f (cdr bg6e0@x)))) (cdr bg6da@x))) (if (memv bg6dc@t '(lambda)) (cons* 'lambda (cadr bg6da@x) (map bg6d9@f (cddr bg6da@x))) (if (memv bg6dc@t '(letrec)) ((lambda (bg6e2@bindings bg6e3@body*) ((lambda (bg6e6@lhs* bg6e7@rhs*) (cons* 'letrec (map list bg6e6@lhs* (map bg6d9@f bg6e7@rhs*)) (map bg6d9@f bg6e3@body*))) (map car bg6e2@bindings) (map cadr bg6e2@bindings))) (cadr bg6da@x) (cddr bg6da@x)) (if (memv bg6dc@t '(letrec*)) ((lambda (bg6ea@bindings bg6eb@body*) ((lambda (bg6ee@lhs* bg6ef@rhs*) (cons* 'letrec* (map list bg6ee@lhs* (map bg6d9@f bg6ef@rhs*)) (map bg6d9@f bg6eb@body*))) (map car bg6ea@bindings) (map cadr bg6ea@bindings))) (cadr bg6da@x) (cddr bg6da@x)) (if (memv bg6dc@t '(library-letrec*)) ((lambda (bg6f2@name bg6f3@x) ((lambda (bg6f6@bindings bg6f7@body*) ((lambda (bg6fa@lhs* bg6fb@lhs** bg6fc@rhs*) (cons* 'library-letrec* bg6f2@name (map list bg6fa@lhs* bg6fb@lhs** (map bg6d9@f bg6fc@rhs*)) (map bg6d9@f bg6f7@body*))) (map car bg6f6@bindings) (map cadr bg6f6@bindings) (map caddr bg6f6@bindings))) (cadr bg6f3@x) (cddr bg6f3@x))) (cadr bg6da@x) (cdr bg6da@x)) (if (memv bg6dc@t '(begin)) (cons 'begin (map bg6d9@f (cdr bg6da@x))) (if (memv bg6dc@t '(set!)) (list 'set! (cadr bg6da@x) (bg6d9@f (caddr bg6da@x))) (if (memv bg6dc@t '(primitive)) ((lambda (bg700@op) ((lambda (bg702@t) (if bg702@t ((lambda (bg704@loc) bg704@loc) bg702@t) bg700@op)) ((bg6c3@current-primitive-locations) bg700@op))) (cadr bg6da@x)) (if (memv bg6dc@t '(define)) bg6da@x (if (list? bg6da@x) (map bg6d9@f bg6da@x) (error 'rewrite '"invalid form ~s ~s" bg6da@x (list? bg6da@x)))))))))))))) (car bg6da@x)) bg6da@x))) bg6d9@f)) '#f))) (set! bg6c9@expanded->core (lambda (bg706@x) ((bg6c7@rewriter '#f) bg706@x))) (set! bg6cb@compile-core-expr (lambda (bg708@x) ((bg6c7@rewriter '#f) bg708@x))) (set! bg6cd@pretty-print write) (set! bg6cf@compile-core-expr-to-port (lambda (bg70a@x bg70b@p) (bg6cd@pretty-print ((bg6c7@rewriter '#f) bg70a@x) bg70b@p))) (begin (set! bg714@bg6cf@compile-core-expr-to-port bg6cf@compile-core-expr-to-port) (set! bg713@bg6cd@pretty-print bg6cd@pretty-print) (set! bg712@bg6cb@compile-core-expr bg6cb@compile-core-expr) (set! bg711@bg6c9@expanded->core bg6c9@expanded->core) (set! bg710@bg6c7@rewriter bg6c7@rewriter) (set! bg70f@bg6c5@mutable? bg6c5@mutable?) (set! bg70e@bg6c3@current-primitive-locations bg6c3@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (bg763@make-collection bg765@current-library-collection bg767@rp bg771@library? bg773@library-id bg775@set-library-id! bg777@library-name bg779@set-library-name! bg77b@library-version bg77d@set-library-version! bg77f@library-imp* bg781@set-library-imp*! bg783@library-vis* bg785@set-library-vis*! bg787@library-inv* bg789@set-library-inv*! bg78b@library-subst bg78d@set-library-subst! bg78f@library-env bg791@set-library-env! bg793@library-visit-state bg795@set-library-visit-state! bg797@library-invoke-state bg799@set-library-invoke-state! bg79b@library-visit-code bg79d@set-library-visit-code! bg79f@library-invoke-code bg7a1@set-library-invoke-code! bg7a3@library-visible? bg7a5@set-library-visible?! bg7a7@library-source-file-name bg7a9@set-library-source-file-name! bg7ab@dummy bg7ad@find-dependencies bg7af@find-library-by bg7b1@library-path bg7b3@library-extensions bg7b5@library-name->file-name bg7b7@file-locator bg7b9@serialize-all bg7bb@current-precompiled-library-loader bg7bd@try-load-from-file bg7bf@library-loader bg7c1@current-library-expander bg7c3@external-pending-libraries bg7c5@find-external-library bg7c7@find-library-by-name bg7c9@library-exists? bg7cb@find-library-by-spec/die bg7cd@label->binding-table bg7cf@install-library-record bg7d1@install-library bg7d3@imported-label->binding bg7d5@invoke-library bg7d7@visit-library bg7d9@invoke-library-by-spec bg7db@installed-libraries bg7dd@library-spec) (begin (set! bg763@make-collection (lambda () ((lambda (bg7de@set) ((lambda (bg7e1@set-cons) (begin (set! bg7e1@set-cons (lambda (bg7e6@x bg7e7@ls) (if (memq bg7e6@x bg7e7@ls) bg7e7@ls (cons bg7e6@x bg7e7@ls)))) (lambda bg7e4 ((lambda (bg7e5) (if (= bg7e5 '0) (apply (lambda () bg7de@set) bg7e4) (if (= bg7e5 '1) (apply (lambda (bg7e2@x) (set! bg7de@set (bg7e1@set-cons bg7e2@x bg7de@set))) bg7e4) (error 'apply '"invalid arg count")))) (length bg7e4))))) '#f)) '()))) (set! bg765@current-library-collection (bg6bb@bg59a@make-parameter (bg763@make-collection) (lambda (bg7ea@x) (begin (if (not (procedure? bg7ea@x)) (assertion-violation 'current-library-collection '"not a procedure" bg7ea@x) (void)) bg7ea@x)))) (set! bg767@rp (bg6b8@bg594@make-record-printer 'library (lambda (bg7ec@x bg7ed@p bg7ee@wr) (begin (if (not (bg771@library? bg7ec@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bg77b@library-version bg7ec@x)) (bg777@library-name bg7ec@x) (append (bg777@library-name bg7ec@x) (list (bg77b@library-version bg7ec@x))))) bg7ed@p))))) (set! bg771@library? (lambda (bg7f2@x) (and (simple-struct? bg7f2@x) (eq? (simple-struct-name bg7f2@x) 'library)))) (set! bg773@library-id (lambda (bg7f4@x) (simple-struct-ref bg7f4@x '0))) (set! bg775@set-library-id! (lambda (bg7f6@x bg7f7@val) (simple-struct-set! bg7f6@x '0 bg7f7@val))) (set! bg777@library-name (lambda (bg7fa@x) (simple-struct-ref bg7fa@x '1))) (set! bg779@set-library-name! (lambda (bg7fc@x bg7fd@val) (simple-struct-set! bg7fc@x '1 bg7fd@val))) (set! bg77b@library-version (lambda (bg800@x) (simple-struct-ref bg800@x '2))) (set! bg77d@set-library-version! (lambda (bg802@x bg803@val) (simple-struct-set! bg802@x '2 bg803@val))) (set! bg77f@library-imp* (lambda (bg806@x) (simple-struct-ref bg806@x '3))) (set! bg781@set-library-imp*! (lambda (bg808@x bg809@val) (simple-struct-set! bg808@x '3 bg809@val))) (set! bg783@library-vis* (lambda (bg80c@x) (simple-struct-ref bg80c@x '4))) (set! bg785@set-library-vis*! (lambda (bg80e@x bg80f@val) (simple-struct-set! bg80e@x '4 bg80f@val))) (set! bg787@library-inv* (lambda (bg812@x) (simple-struct-ref bg812@x '5))) (set! bg789@set-library-inv*! (lambda (bg814@x bg815@val) (simple-struct-set! bg814@x '5 bg815@val))) (set! bg78b@library-subst (lambda (bg818@x) (simple-struct-ref bg818@x '6))) (set! bg78d@set-library-subst! (lambda (bg81a@x bg81b@val) (simple-struct-set! bg81a@x '6 bg81b@val))) (set! bg78f@library-env (lambda (bg81e@x) (simple-struct-ref bg81e@x '7))) (set! bg791@set-library-env! (lambda (bg820@x bg821@val) (simple-struct-set! bg820@x '7 bg821@val))) (set! bg793@library-visit-state (lambda (bg824@x) (simple-struct-ref bg824@x '8))) (set! bg795@set-library-visit-state! (lambda (bg826@x bg827@val) (simple-struct-set! bg826@x '8 bg827@val))) (set! bg797@library-invoke-state (lambda (bg82a@x) (simple-struct-ref bg82a@x '9))) (set! bg799@set-library-invoke-state! (lambda (bg82c@x bg82d@val) (simple-struct-set! bg82c@x '9 bg82d@val))) (set! bg79b@library-visit-code (lambda (bg830@x) (simple-struct-ref bg830@x '10))) (set! bg79d@set-library-visit-code! (lambda (bg832@x bg833@val) (simple-struct-set! bg832@x '10 bg833@val))) (set! bg79f@library-invoke-code (lambda (bg836@x) (simple-struct-ref bg836@x '11))) (set! bg7a1@set-library-invoke-code! (lambda (bg838@x bg839@val) (simple-struct-set! bg838@x '11 bg839@val))) (set! bg7a3@library-visible? (lambda (bg83c@x) (simple-struct-ref bg83c@x '12))) (set! bg7a5@set-library-visible?! (lambda (bg83e@x bg83f@val) (simple-struct-set! bg83e@x '12 bg83f@val))) (set! bg7a7@library-source-file-name (lambda (bg842@x) (simple-struct-ref bg842@x '13))) (set! bg7a9@set-library-source-file-name! (lambda (bg844@x bg845@val) (simple-struct-set! bg844@x '13 bg845@val))) (set! bg7ab@dummy '3) (set! bg7ad@find-dependencies (lambda (bg848@ls) (if (null? bg848@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bg7af@find-library-by (lambda (bg84a@pred) ((letrec ((bg84c@f (lambda (bg84e@ls) (if (null? bg84e@ls) '#f (if (bg84a@pred (car bg84e@ls)) (car bg84e@ls) (bg84c@f (cdr bg84e@ls))))))) bg84c@f) ((bg765@current-library-collection))))) (set! bg7b1@library-path (bg6bb@bg59a@make-parameter '(".") (lambda (bg850@x) (if (and (list? bg850@x) (for-all string? bg850@x)) (map (lambda (bg852@x) bg852@x) bg850@x) (assertion-violation 'library-path '"not a list of strings" bg850@x))))) (set! bg7b3@library-extensions (bg6bb@bg59a@make-parameter '(".sls" ".ss" ".scm") (lambda (bg854@x) (if (and (list? bg854@x) (for-all string? bg854@x)) (map (lambda (bg856@x) bg856@x) bg854@x) (assertion-violation 'library-extensions '"not a list of strings" bg854@x))))) (set! bg7b5@library-name->file-name (lambda (bg858@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bg85e@bg85b bg85f@bg85d) ((lambda (bg862@extract bg863@p) ((lambda (bg867@display-hex) (begin (set! bg867@display-hex (lambda (bg870@n) (if (<= '0 bg870@n '9) (display bg870@n bg863@p) (display (integer->char (+ (char->integer '#\a) (- bg870@n '10))) bg863@p)))) (begin ((letrec ((bg868@f (lambda (bg86a@ls) (if (not (null? bg86a@ls)) (begin (display '"/" bg863@p) (for-each (lambda (bg86c@c) (if (or (char<=? '#\a bg86c@c '#\z) (char<=? '#\A bg86c@c '#\Z) (char<=? '#\0 bg86c@c '#\9) (memv bg86c@c '(#\- #\. #\_ #\~))) (display bg86c@c bg863@p) (begin (display '"%" bg863@p) ((lambda (bg86e@n) (begin (bg867@display-hex (quotient bg86e@n '16)) (bg867@display-hex (remainder bg86e@n '16)))) (char->integer bg86c@c))))) (string->list (symbol->string (car bg86a@ls)))) (bg868@f (cdr bg86a@ls))) (void))))) bg868@f) bg858@x) (bg862@extract)))) '#f)) bg85f@bg85d bg85e@bg85b))))) (set! bg7b7@file-locator (bg6bb@bg59a@make-parameter (lambda (bg872@x) ((lambda (bg874@str) ((letrec ((bg876@f (lambda (bg878@ls bg879@exts bg87a@failed-list) (if (null? bg878@ls) ((lambda () ((lambda (bg886@bg881 bg888@bg883 bg88a@bg882 bg88d@bg880 bg88f@make-library-resolution-condition bg891@bg87e bg893@bg87f bg895@library-resolution-condition? bg897@condition-library bg899@condition-files) (begin (set! bg886@bg881 (make-record-type-descriptor '&library-resolution bg2b30@bg2877@&condition-rtd 'bg884 '#f '#f '#((immutable library) (immutable files)))) (set! bg888@bg883 '#f) (set! bg88a@bg882 (make-record-constructor-descriptor bg886@bg881 bg2b31@bg2879@&condition-rcd bg888@bg883)) (set! bg88d@bg880 (record-predicate bg886@bg881)) (set! bg88f@make-library-resolution-condition (record-constructor bg88a@bg882)) (set! bg891@bg87e (record-accessor bg886@bg881 '0)) (set! bg893@bg87f (record-accessor bg886@bg881 '1)) (set! bg895@library-resolution-condition? (condition-predicate bg886@bg881)) (set! bg897@condition-library (condition-accessor bg886@bg881 bg891@bg87e)) (set! bg899@condition-files (condition-accessor bg886@bg881 bg893@bg87f)) (raise (condition (bg2b50@bg2911@make-error) (bg2b72@bg296d@make-who-condition 'expander) (bg2b36@bg28ce@make-message-condition '"cannot locate library in library-path") (bg88f@make-library-resolution-condition bg872@x (reverse bg87a@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? bg879@exts) (bg876@f (cdr bg878@ls) (bg7b3@library-extensions) bg87a@failed-list) ((lambda (bg89a@name) (if (file-exists? bg89a@name) bg89a@name (bg876@f bg878@ls (cdr bg879@exts) (cons bg89a@name bg87a@failed-list)))) (string-append (car bg878@ls) bg874@str (car bg879@exts)))))))) bg876@f) (bg7b1@library-path) (bg7b3@library-extensions) '())) (bg7b5@library-name->file-name bg872@x))) (lambda (bg89c@f) (if (procedure? bg89c@f) bg89c@f (assertion-violation 'file-locator '"not a procedure" bg89c@f))))) (set! bg7b9@serialize-all (lambda (bg89e@serialize bg89f@compile) ((lambda (bg8a3@library-desc) (begin (set! bg8a3@library-desc (lambda (bg8a6@x) (list (bg773@library-id bg8a6@x) (bg777@library-name bg8a6@x)))) (for-each (lambda (bg8a4@x) (if (bg7a7@library-source-file-name bg8a4@x) (bg89e@serialize (bg7a7@library-source-file-name bg8a4@x) (list (bg773@library-id bg8a4@x) (bg777@library-name bg8a4@x) (bg77b@library-version bg8a4@x) (map bg8a3@library-desc (bg77f@library-imp* bg8a4@x)) (map bg8a3@library-desc (bg783@library-vis* bg8a4@x)) (map bg8a3@library-desc (bg787@library-inv* bg8a4@x)) (bg78b@library-subst bg8a4@x) (bg78f@library-env bg8a4@x) (bg89f@compile (bg79b@library-visit-code bg8a4@x)) (bg89f@compile (bg79f@library-invoke-code bg8a4@x)) (bg7a3@library-visible? bg8a4@x))) (void))) ((bg765@current-library-collection))))) '#f))) (set! bg7bb@current-precompiled-library-loader (bg6bb@bg59a@make-parameter (lambda (bg8a8@filename bg8a9@sk) '#f))) (set! bg7bd@try-load-from-file (lambda (bg8ac@filename) ((bg7bb@current-precompiled-library-loader) bg8ac@filename (lambda bg8d2 ((lambda (bg8d3) (if (= bg8d3 '11) (apply (lambda (bg8ae@id bg8af@name bg8b0@ver bg8b1@imp* bg8b2@vis* bg8b3@inv* bg8b4@exp-subst bg8b5@exp-env bg8b6@visit-proc bg8b7@invoke-proc bg8b8@visible?) ((letrec ((bg8c4@f (lambda (bg8c6@deps) (if (null? bg8c6@deps) (begin (bg7d1@install-library bg8ae@id bg8af@name bg8b0@ver bg8b1@imp* bg8b2@vis* bg8b3@inv* bg8b4@exp-subst bg8b5@exp-env bg8b6@visit-proc bg8b7@invoke-proc '#f '#f bg8b8@visible? '#f) '#t) ((lambda (bg8c8@d) ((lambda (bg8ca@label bg8cb@dname) ((lambda (bg8ce@l) (if (and (bg771@library? bg8ce@l) (eq? bg8ca@label (bg773@library-id bg8ce@l))) (bg8c4@f (cdr bg8c6@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" bg8af@name bg8cb@dname bg8ac@filename bg8ce@l bg8ca@label (bg773@library-id bg8ce@l)) '#f))) (bg7c7@find-library-by-name bg8cb@dname))) (car bg8c8@d) (cadr bg8c8@d))) (car bg8c6@deps)))))) bg8c4@f) (append bg8b1@imp* bg8b2@vis* bg8b3@inv*))) bg8d2) (if (>= bg8d3 '0) (apply (lambda bg8d0@others '#f) bg8d2) (error 'apply '"invalid arg count")))) (length bg8d2)))))) (set! bg7bf@library-loader (bg6bb@bg59a@make-parameter (lambda (bg8d4@x) ((lambda (bg8d6@file-name) (if (not bg8d6@file-name) (assertion-violation '#f '"cannot file library" bg8d4@x) (or (bg7bd@try-load-from-file bg8d6@file-name) ((bg7c1@current-library-expander) (bg6ba@bg598@read-library-source-file bg8d6@file-name) bg8d6@file-name (lambda (bg8d8@name) (if (not (fast-equal? bg8d8@name bg8d4@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bg8de@bg8db bg8df@bg8dd) ((lambda (bg8e2@e bg8e3@p) (begin (display '"expected to find library " bg8e3@p) (write bg8d4@x bg8e3@p) (display '" in file " bg8e3@p) (display bg8d6@file-name bg8e3@p) (display '", found " bg8e3@p) (write bg8d8@name bg8e3@p) (display '" instead" bg8e3@p) (bg8e2@e))) bg8df@bg8dd bg8de@bg8db)))) (void))))))) ((bg7b7@file-locator) bg8d4@x))) (lambda (bg8e6@f) (if (procedure? bg8e6@f) bg8e6@f (assertion-violation 'library-locator '"not a procedure" bg8e6@f))))) (set! bg7c1@current-library-expander (bg6bb@bg59a@make-parameter (lambda (bg8e8@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bg8ea@f) (if (procedure? bg8ea@f) bg8ea@f (assertion-violation 'library-expander '"not a procedure" bg8ea@f))))) (set! bg7c3@external-pending-libraries (bg6bb@bg59a@make-parameter '())) (set! bg7c5@find-external-library (lambda (bg8ec@name) (begin (if (member bg8ec@name (bg7c3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bg8ec@name) (void)) ((lambda (bg8f2@bg8ef bg8f3@bg8f1) ((lambda (bg8f6@swap) (dynamic-wind bg8f6@swap (lambda () (begin ((bg7bf@library-loader) bg8ec@name) (or (bg7af@find-library-by (lambda (bg8f8@x) (fast-equal? (bg777@library-name bg8f8@x) bg8ec@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bg8ec@name)))) bg8f6@swap)) (lambda () ((lambda (bg8fa@t) (begin (bg8f2@bg8ef bg8f3@bg8f1) (set! bg8f3@bg8f1 bg8fa@t))) (bg8f2@bg8ef))))) bg7c3@external-pending-libraries (cons bg8ec@name (bg7c3@external-pending-libraries)))))) (set! bg7c7@find-library-by-name (lambda (bg8fc@name) (or (bg7af@find-library-by (lambda (bg8fe@x) (fast-equal? (bg777@library-name bg8fe@x) bg8fc@name))) (bg7c5@find-external-library bg8fc@name)))) (set! bg7c9@library-exists? (lambda (bg900@name) (and (bg7af@find-library-by (lambda (bg902@x) (fast-equal? (bg777@library-name bg902@x) bg900@name))) '#t))) (set! bg7cb@find-library-by-spec/die (lambda (bg904@spec) ((lambda (bg906@id) (or (bg7af@find-library-by (lambda (bg908@x) (eq? bg906@id (bg773@library-id bg908@x)))) (assertion-violation '#f '"cannot find library with required spec" bg904@spec))) (car bg904@spec)))) (set! bg7cd@label->binding-table (make-eq-hashtable)) (set! bg7cf@install-library-record (lambda (bg90a@lib) (begin ((lambda (bg90c@exp-env) (for-each (lambda (bg90e@x) ((lambda (bg910@label bg911@binding) ((lambda (bg914@binding) (begin (if (hashtable-ref bg7cd@label->binding-table bg910@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bg910@label (hashtable-ref bg7cd@label->binding-table bg910@label '#f) bg914@binding) (exit)) (void)) (hashtable-set! bg7cd@label->binding-table bg910@label bg914@binding))) ((lambda (bg916@t) (if (memv bg916@t '(global)) (cons 'global (cons bg90a@lib (cdr bg911@binding))) (if (memv bg916@t '(global-macro)) (cons 'global-macro (cons bg90a@lib (cdr bg911@binding))) (if (memv bg916@t '(global-macro!)) (cons 'global-macro! (cons bg90a@lib (cdr bg911@binding))) bg911@binding)))) (car bg911@binding)))) (car bg90e@x) (cdr bg90e@x))) bg90c@exp-env)) (bg78f@library-env bg90a@lib)) ((bg765@current-library-collection) bg90a@lib)))) (set! bg7d1@install-library (lambda (bg918@id bg919@name bg91a@ver bg91b@imp* bg91c@vis* bg91d@inv* bg91e@exp-subst bg91f@exp-env bg920@visit-proc bg921@invoke-proc bg922@visit-code bg923@invoke-code bg924@visible? bg925@source-file-name) ((lambda (bg934@imp-lib* bg935@vis-lib* bg936@inv-lib*) (begin (if (not (and (symbol? bg918@id) (list? bg919@name) (list? bg91a@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bg918@id bg919@name bg91a@ver) (void)) (if (bg7c9@library-exists? bg919@name) (assertion-violation 'install-library '"library is already installed" bg919@name) (void)) ((lambda (bg93a@lib) (bg7cf@install-library-record bg93a@lib)) (make-simple-struct 'library '15 (list bg918@id bg919@name bg91a@ver bg934@imp-lib* bg935@vis-lib* bg936@inv-lib* bg91e@exp-subst bg91f@exp-env bg920@visit-proc bg921@invoke-proc bg922@visit-code bg923@invoke-code bg924@visible? bg925@source-file-name))))) (map bg7cb@find-library-by-spec/die bg91b@imp*) (map bg7cb@find-library-by-spec/die bg91c@vis*) (map bg7cb@find-library-by-spec/die bg91d@inv*)))) (set! bg7d3@imported-label->binding (lambda (bg93c@lab) (hashtable-ref bg7cd@label->binding-table bg93c@lab '#f))) (set! bg7d5@invoke-library (lambda (bg93e@lib) ((lambda (bg940@invoke) (if (procedure? bg940@invoke) (begin (bg799@set-library-invoke-state! bg93e@lib (lambda () (assertion-violation 'invoke '"circularity detected" bg93e@lib))) (for-each bg7d5@invoke-library (bg787@library-inv* bg93e@lib)) (bg799@set-library-invoke-state! bg93e@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bg93e@lib))) (bg940@invoke) (bg799@set-library-invoke-state! bg93e@lib '#t)) (void))) (bg797@library-invoke-state bg93e@lib)))) (set! bg7d7@visit-library (lambda (bg942@lib) ((lambda (bg944@visit) (if (procedure? bg944@visit) (begin (bg795@set-library-visit-state! bg942@lib (lambda () (assertion-violation 'visit '"circularity detected" bg942@lib))) (for-each bg7d5@invoke-library (bg783@library-vis* bg942@lib)) (bg795@set-library-visit-state! bg942@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bg942@lib))) (bg944@visit) (bg795@set-library-visit-state! bg942@lib '#t)) (void))) (bg793@library-visit-state bg942@lib)))) (set! bg7d9@invoke-library-by-spec (lambda (bg946@spec) (bg7d5@invoke-library (bg7cb@find-library-by-spec/die bg946@spec)))) (set! bg7db@installed-libraries (lambda bg94e ((lambda (bg94f) (if (= bg94f '1) (apply (lambda (bg948@all?) ((letrec ((bg94a@f (lambda (bg94c@ls) (if (null? bg94c@ls) '() (if (or bg948@all? (bg7a3@library-visible? (car bg94c@ls))) (cons (car bg94c@ls) (bg94a@f (cdr bg94c@ls))) (bg94a@f (cdr bg94c@ls))))))) bg94a@f) ((bg765@current-library-collection)))) bg94e) (if (= bg94f '0) (apply (lambda () (bg7db@installed-libraries '#f)) bg94e) (error 'apply '"invalid arg count")))) (length bg94e)))) (set! bg7dd@library-spec (lambda (bg950@x) (begin (if (not (bg771@library? bg950@x)) (assertion-violation 'library-spec '"not a library" bg950@x) (void)) (list (bg773@library-id bg950@x) (bg777@library-name bg950@x) (bg77b@library-version bg950@x))))) (begin (set! bg98b@bg7dd@library-spec bg7dd@library-spec) (set! bg98a@bg7db@installed-libraries bg7db@installed-libraries) (set! bg989@bg7d9@invoke-library-by-spec bg7d9@invoke-library-by-spec) (set! bg988@bg7d7@visit-library bg7d7@visit-library) (set! bg987@bg7d5@invoke-library bg7d5@invoke-library) (set! bg986@bg7d3@imported-label->binding bg7d3@imported-label->binding) (set! bg985@bg7d1@install-library bg7d1@install-library) (set! bg984@bg7cf@install-library-record bg7cf@install-library-record) (set! bg983@bg7cd@label->binding-table bg7cd@label->binding-table) (set! bg982@bg7cb@find-library-by-spec/die bg7cb@find-library-by-spec/die) (set! bg981@bg7c9@library-exists? bg7c9@library-exists?) (set! bg980@bg7c7@find-library-by-name bg7c7@find-library-by-name) (set! bg97f@bg7c5@find-external-library bg7c5@find-external-library) (set! bg97e@bg7c3@external-pending-libraries bg7c3@external-pending-libraries) (set! bg97d@bg7c1@current-library-expander bg7c1@current-library-expander) (set! bg97c@bg7bf@library-loader bg7bf@library-loader) (set! bg97b@bg7bd@try-load-from-file bg7bd@try-load-from-file) (set! bg97a@bg7bb@current-precompiled-library-loader bg7bb@current-precompiled-library-loader) (set! bg979@bg7b9@serialize-all bg7b9@serialize-all) (set! bg978@bg7b7@file-locator bg7b7@file-locator) (set! bg977@bg7b5@library-name->file-name bg7b5@library-name->file-name) (set! bg976@bg7b3@library-extensions bg7b3@library-extensions) (set! bg975@bg7b1@library-path bg7b1@library-path) (set! bg974@bg7af@find-library-by bg7af@find-library-by) (set! bg973@bg7ad@find-dependencies bg7ad@find-dependencies) (set! bg972@bg7ab@dummy bg7ab@dummy) (set! bg971@bg7a9@set-library-source-file-name! bg7a9@set-library-source-file-name!) (set! bg970@bg7a7@library-source-file-name bg7a7@library-source-file-name) (set! bg96f@bg7a5@set-library-visible?! bg7a5@set-library-visible?!) (set! bg96e@bg7a3@library-visible? bg7a3@library-visible?) (set! bg96d@bg7a1@set-library-invoke-code! bg7a1@set-library-invoke-code!) (set! bg96c@bg79f@library-invoke-code bg79f@library-invoke-code) (set! bg96b@bg79d@set-library-visit-code! bg79d@set-library-visit-code!) (set! bg96a@bg79b@library-visit-code bg79b@library-visit-code) (set! bg969@bg799@set-library-invoke-state! bg799@set-library-invoke-state!) (set! bg968@bg797@library-invoke-state bg797@library-invoke-state) (set! bg967@bg795@set-library-visit-state! bg795@set-library-visit-state!) (set! bg966@bg793@library-visit-state bg793@library-visit-state) (set! bg965@bg791@set-library-env! bg791@set-library-env!) (set! bg964@bg78f@library-env bg78f@library-env) (set! bg963@bg78d@set-library-subst! bg78d@set-library-subst!) (set! bg962@bg78b@library-subst bg78b@library-subst) (set! bg961@bg789@set-library-inv*! bg789@set-library-inv*!) (set! bg960@bg787@library-inv* bg787@library-inv*) (set! bg95f@bg785@set-library-vis*! bg785@set-library-vis*!) (set! bg95e@bg783@library-vis* bg783@library-vis*) (set! bg95d@bg781@set-library-imp*! bg781@set-library-imp*!) (set! bg95c@bg77f@library-imp* bg77f@library-imp*) (set! bg95b@bg77d@set-library-version! bg77d@set-library-version!) (set! bg95a@bg77b@library-version bg77b@library-version) (set! bg959@bg779@set-library-name! bg779@set-library-name!) (set! bg958@bg777@library-name bg777@library-name) (set! bg957@bg775@set-library-id! bg775@set-library-id!) (set! bg956@bg773@library-id bg773@library-id) (set! bg955@bg771@library? bg771@library?) (set! bg954@bg767@rp bg767@rp) (set! bg953@bg765@current-library-collection bg765@current-library-collection) (set! bg952@bg763@make-collection bg763@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bg98f@build-global-define bga00@build-lambda bga02@build-case-lambda bga04@build-let bga32@build-sequence bga34@build-void bga36@build-letrec bga38@build-letrec* bga3a@build-library-letrec* bga3c@build-receive) (begin (set! bg98f@build-global-define (lambda (bga3d@x) (bga34@build-void))) (set! bga00@build-lambda (lambda (bga3f@ae bga40@vars bga41@exp) (list 'lambda bga40@vars bga41@exp))) (set! bga02@build-case-lambda (lambda (bga45@ae bga46@vars* bga47@exp*) ((lambda (bga4c@build-error bga4e@build-pred bga50@build-apply bga52@expand-case-lambda) (begin (set! bga4c@build-error (lambda (bga83@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! bga4e@build-pred (lambda (bga6b@ae bga6c@n bga6d@vars) (call-with-values (lambda () ((letrec ((bga75@f (lambda (bga77@vars bga78@count) (if (pair? bga77@vars) (bga75@f (cdr bga77@vars) (+ bga78@count '1)) (if (null? bga77@vars) (values bga78@count '=) (values bga78@count '>=)))))) bga75@f) bga6d@vars '0)) (lambda (bga7b@bga72 bga7c@bga74) ((lambda (bga7f@pred bga80@count) (list (list 'primitive bga7f@pred) bga6c@n (list 'quote bga80@count))) bga7c@bga74 bga7b@bga72))))) (set! bga50@build-apply (lambda (bga63@ae bga64@g bga65@vars bga66@exp) (list '(primitive apply) (bga00@build-lambda bga63@ae bga65@vars bga66@exp) bga64@g))) (set! bga52@expand-case-lambda (lambda (bga53@ae bga54@vars bga55@exp*) ((lambda (bga59@g bga5a@n) (list 'lambda bga59@g (bga04@build-let bga53@ae (list bga5a@n) (list (list '(primitive length) bga59@g)) ((letrec ((bga5d@f (lambda (bga5f@vars* bga60@exp*) (if (null? bga5f@vars*) (bga4c@build-error bga53@ae) (list 'if (bga4e@build-pred bga53@ae bga5a@n (car bga5f@vars*)) (bga50@build-apply bga53@ae bga59@g (car bga5f@vars*) (car bga60@exp*)) (bga5d@f (cdr bga5f@vars*) (cdr bga60@exp*))))))) bga5d@f) bga46@vars* bga55@exp*)))) (gensym) (gensym)))) (if (= (length bga47@exp*) '1) (bga00@build-lambda bga45@ae (car bga46@vars*) (car bga47@exp*)) (bga52@expand-case-lambda bga45@ae bga46@vars* bga47@exp*)))) '#f '#f '#f '#f))) (set! bga04@build-let (lambda (bga85@ae bga86@lhs* bga87@rhs* bga88@body) (cons (bga00@build-lambda bga85@ae bga86@lhs* bga88@body) bga87@rhs*))) (set! bga32@build-sequence (lambda (bga8d@ae bga8e@exps) ((letrec ((bga91@loop (lambda (bga93@exps) (if (null? (cdr bga93@exps)) (car bga93@exps) (if (equal? (car bga93@exps) (bga34@build-void)) (bga91@loop (cdr bga93@exps)) (cons 'begin bga93@exps)))))) bga91@loop) bga8e@exps))) (set! bga34@build-void (lambda () '((primitive void)))) (set! bga36@build-letrec (lambda (bga95@ae bga96@vars bga97@val-exps bga98@body-exp) (if (null? bga96@vars) bga98@body-exp (list 'letrec (map list bga96@vars bga97@val-exps) bga98@body-exp)))) (set! bga38@build-letrec* (lambda (bga9d@ae bga9e@vars bga9f@val-exps bgaa0@body-exp) (if (null? bga9e@vars) bgaa0@body-exp (bga04@build-let bga9d@ae bga9e@vars (map (lambda (bgaa5@x) (list 'quote '#f)) bga9e@vars) (bga32@build-sequence bga9d@ae (append (map (lambda (bgaa7@lhs bgaa8@rhs) (list 'set! bgaa7@lhs bgaa8@rhs)) bga9e@vars bga9f@val-exps) (list bgaa0@body-exp))))))) (set! bga3a@build-library-letrec* (lambda (bgaab@ae bgaac@name bgaad@vars bgaae@locs bgaaf@val-exps bgab0@body-exp) (list 'library-letrec* bgaac@name (map list bgaad@vars bgaae@locs bgaaf@val-exps) bgab0@body-exp))) (set! bga3c@build-receive (lambda (bgab7@ae bgab8@vars bgab9@producer bgaba@body*) (begin (display '"************** in ") (cons 'receive (cons bgab8@vars (cons bgab9@producer bgaba@body*)))))) (begin (set! bgac8@bga3c@build-receive bga3c@build-receive) (set! bgac7@bga3a@build-library-letrec* bga3a@build-library-letrec*) (set! bgac6@bga38@build-letrec* bga38@build-letrec*) (set! bgac5@bga36@build-letrec bga36@build-letrec) (set! bgac4@bga34@build-void bga34@build-void) (set! bgac3@bga32@build-sequence bga32@build-sequence) (set! bgac2@bga04@build-let bga04@build-let) (set! bgac1@bga02@build-case-lambda bga02@build-case-lambda) (set! bgac0@bga00@build-lambda bga00@build-lambda) (set! bgabf@bg98f@build-global-define bg98f@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bgad7@file-options-macro bgad9@set-cons bgadb@set-union bgae0@top-mark* bgae2@top-marked? bgae4@gen-lexical bgae6@gen-global bgae8@gen-label bgaea@gen-top-level-label bgaec@gen-define-label+loc bgaee@gen-define-label bgaf8@rib? bgafa@rib-sym* bgafc@set-rib-sym*! bgafe@rib-mark** bgb00@set-rib-mark**! bgb02@rib-label* bgb04@set-rib-label*! bgb06@rib-sealed/freq bgb08@set-rib-sealed/freq! bgb0a@rib-cache bgb0c@set-rib-cache! bgb0e@dummy bgb10@make-empty-rib bgb12@extend-rib! bgb14@extend-rib/nc! bgb16@make-rib-map bgb18@seal-rib! bgb1a@unseal-rib! bgb1c@make-full-rib bgb1e@rp bgb28@stx? bgb2a@stx-expr bgb2c@set-stx-expr! bgb2e@stx-mark* bgb30@set-stx-mark*! bgb32@stx-subst* bgb34@set-stx-subst*! bgb36@stx-ae* bgb38@set-stx-ae*! bgb3a@dummy bgb3c@datum->stx bgb3e@gen-mark bgb40@anti-mark bgb42@anti-mark? bgb44@mkstx bgb46@add-mark bgb48@add-subst bgb4a@syntax-kind? bgb4c@syntax-vector->list bgb4e@syntax-pair? bgb50@syntax-vector? bgb52@syntax-null? bgb54@syntax-list? bgb56@syntax-car bgb58@syntax-cdr bgb5a@syntax->list bgb5c@id? bgb5e@id->sym bgb60@bound-id=? bgb62@free-id=? bgb64@valid-bound-ids? bgb66@distinct-bound-ids? bgb68@bound-id-member? bgb6a@self-evaluating? bgb6c@strip-annotations bgb6e@strip bgb70@stx->datum bgb72@id->label bgb74@label->binding bgb76@make-binding bgb78@binding-type bgb7a@binding-value bgb7c@raise-unbound-error bgb7e@syntax-type bgb8c@sanitize-binding bgb8e@make-variable-transformer bgb90@variable-transformer? bgb92@variable-transformer-procedure bgb94@make-eval-transformer bgce5@parse-define bgce7@parse-define-syntax bgce9@scheme-stx-hashtable bgceb@scheme-stx bgced@lexical-var bgcef@lexical-mutable? bgcf1@set-lexical-mutable! bgcf3@add-lexical bgcf5@add-lexicals bgcf7@letrec-helper bgcf9@letrec-transformer bgcfb@letrec*-transformer bgcfd@fluid-let-syntax-transformer bgcff@type-descriptor-transformer bgd01@record-type-descriptor-transformer bgd03@record-constructor-descriptor-transformer bgd05@when-macro bgd07@unless-macro bgd09@if-transformer bgd0b@and-transformer bgd0d@or-transformer bgd0f@case-macro bgd11@quote-transformer bgd13@case-lambda-transformer bgd15@lambda-transformer bgd17@bless bgd19@with-syntax-macro bgd1b@invalid-fmls-error bgd1d@let-macro bgd1f@let-values-macro bgd21@let*-values-macro bgd23@trace-lambda-macro bgd25@trace-define-macro bgd27@trace-define-syntax-macro bgd29@trace-let/rec-syntax bgd2b@trace-let-syntax-macro bgd2d@trace-letrec-syntax-macro bgd2f@guard-macro bgd31@define-enumeration-macro bgd33@time-macro bgd35@delay-macro bgd37@assert-macro bgd39@endianness-macro bgd3b@identifier-syntax-macro bgd3d@do-macro bgd3f@let*-macro bgd41@or-macro bgd43@and-macro bgd45@cond-macro bgd47@do-include bgd49@include-macro bgd4b@include-into-macro bgd4d@syntax-rules-macro bgd4f@quasiquote-macro bgd51@quasisyntax-macro bgd53@define-struct-macro bgd55@define-record-type-macro bgd57@define-condition-type-macro bgd59@incorrect-usage-macro bgd5b@parameterize-macro bgd5d@foreign-call-transformer bgd5f@convert-pattern bgd61@syntax-dispatch bgd63@ellipsis? bgd65@underscore? bgd67@verify-literals bgd69@syntax-case-transformer bgd6b@ellipsis-map bgd6d@syntax-transformer bgd6f@core-macro-transformer bgd71@symbol-macro bgd73@macro-transformer bgd75@local-macro-transformer bgd77@do-macro-call bgd79@chi-macro bgd7b@chi-local-macro bgd7d@chi-global-macro bgd7f@chi-expr* bgd81@chi-application bgd83@chi-expr bgd85@chi-set! bgd87@verify-formals bgd89@chi-lambda-clause bgd8b@chi-lambda-clause* bgd8d@chi-defun bgd8f@chi-rhs bgd91@expand-interaction-rhs*/init* bgd93@chi-rhs* bgd95@find-bound=? bgd97@find-dups bgd99@chi-internal bgd9b@parse-module bgda5@module-interface? bgda7@module-interface-first-mark bgda9@set-module-interface-first-mark! bgdab@module-interface-exp-id-vec bgdad@set-module-interface-exp-id-vec! bgdaf@module-interface-exp-lab-vec bgdb1@set-module-interface-exp-lab-vec! bgdb3@dummy bgdb5@module-interface-exp-id* bgdb7@chi-internal-module bgdb9@chi-body* bgdbb@expand-transformer bgdbd@parse-exports bgdbf@parse-library-name bgdc1@parse-library bgdc3@parse-import-spec* bgdc5@make-top-rib bgdc7@make-collector bgdc9@inv-collector bgdcb@vis-collector bgdcd@imp-collector bgdcf@chi-library-internal bgdd1@chi-interaction-expr bgdd3@library-body-expander bgdd5@core-library-expander bgdd7@parse-top-level-program bgdd9@top-level-expander bgddb@rp bgde5@env? bgde7@env-names bgde9@set-env-names! bgdeb@env-labels bgded@set-env-labels! bgdef@env-itc bgdf1@set-env-itc! bgdf3@dummy bgdf5@rp bgdff@interaction-env? bge01@interaction-env-rib bge03@set-interaction-env-rib! bge05@interaction-env-r bge07@set-interaction-env-r! bge09@interaction-env-locs bge0b@set-interaction-env-locs! bge0d@dummy bge0f@interaction-environment-symbols bge11@environment-bindings bge13@parse-binding bge15@environment? bge17@environment-symbols bge19@environment bge1b@null-environment bge1d@scheme-report-environment bge1f@expand bge21@eval bge23@library-expander bge25@boot-library-expand bge27@rev-map-append bge29@build-exports bge2b@make-export-subst bge2d@make-export-env/macros bge2f@generate-temporaries bge31@free-identifier=? bge33@bound-identifier=? bge35@make-source-condition bge37@extract-position-condition bge39@expression-position bge3b@assertion-error bge3d@syntax-error bge3f@syntax-violation* bge41@syntax-violation bge43@identifier? bge45@datum->syntax bge47@syntax->datum bge49@compile-r6rs-top-level bge4b@pre-compile-r6rs-top-level bge4d@interaction-environment bge4f@top-level-context) (begin (set! bgad7@file-options-macro (lambda (bge50@x) ((lambda (bge53@valid-option?) (begin (set! bge53@valid-option? (lambda (bge5c@x) (and (bgb5c@id? bge5c@x) (memq (bgb5e@id->sym bge5c@x) '(no-fail no-create no-truncate))))) ((lambda (bge54@t) ((lambda (bge56@ls/false) (if (and bge56@ls/false (apply (lambda (bge58@opt*) (for-all bge53@valid-option? bge58@opt*)) bge56@ls/false)) (apply (lambda (bge5a@opt*) (bgd17@bless (list 'make-file-options (list 'quote bge5a@opt*)))) bge56@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bge54@t))) (bgd61@syntax-dispatch bge54@t '(_ . each-any)))) bge50@x))) '#f))) (set! bgad9@set-cons (lambda (bge5e@x bge5f@ls) (if (memq bge5e@x bge5f@ls) bge5f@ls (cons bge5e@x bge5f@ls)))) (set! bgadb@set-union (lambda (bge62@ls1 bge63@ls2) (if (null? bge62@ls1) bge63@ls2 (if (memq (car bge62@ls1) bge63@ls2) (bgadb@set-union (cdr bge62@ls1) bge63@ls2) (cons (car bge62@ls1) (bgadb@set-union (cdr bge62@ls1) bge63@ls2)))))) (set! bgae0@top-mark* '(top)) (set! bgae2@top-marked? (lambda (bge66@m*) (memq 'top bge66@m*))) (set! bgae4@gen-lexical (lambda (bge68@sym) (if (symbol? bge68@sym) (gensym bge68@sym) (if (bgb28@stx? bge68@sym) (bgae4@gen-lexical (bgb5e@id->sym bge68@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bge68@sym))))) (set! bgae6@gen-global (lambda (bge6a@x) (bgae4@gen-lexical bge6a@x))) (set! bgae8@gen-label (lambda (bge6c@_) (gensym))) (set! bgaea@gen-top-level-label (lambda (bge6e@id bge6f@rib) ((lambda (bge73@find) (begin (set! bge73@find (lambda (bge7e@sym bge7f@mark* bge80@sym* bge81@mark** bge82@label*) (and (pair? bge80@sym*) (if (and (eq? bge7e@sym (car bge80@sym*)) (same-marks? bge7f@mark* (car bge81@mark**))) (car bge82@label*) (bge73@find bge7e@sym bge7f@mark* (cdr bge80@sym*) (cdr bge81@mark**) (cdr bge82@label*)))))) ((lambda (bge74@sym bge75@mark*) ((lambda (bge78@sym*) ((lambda (bge7a@t) (if bge7a@t ((lambda (bge7c@label) (if (bg986@bg7d3@imported-label->binding bge7c@label) (gensym) bge7c@label)) bge7a@t) (gensym))) (and (memq bge74@sym (bgafa@rib-sym* bge6f@rib)) (bge73@find bge74@sym bge75@mark* bge78@sym* (bgafe@rib-mark** bge6f@rib) (bgb02@rib-label* bge6f@rib))))) (bgafa@rib-sym* bge6f@rib))) (bgb5e@id->sym bge6e@id) (bgb2e@stx-mark* bge6e@id)))) '#f))) (set! bgaec@gen-define-label+loc (lambda (bge88@id bge89@rib) ((lambda (bge8c@t) (if bge8c@t ((lambda (bge8e@env) ((lambda (bge90@label bge91@locs) (values bge90@label ((lambda (bge94@t) (if bge94@t (cdr bge94@t) ((lambda (bge96@loc) (begin (bge0b@set-interaction-env-locs! bge8e@env (cons (cons bge90@label bge96@loc) bge91@locs)) bge96@loc)) (bgae4@gen-lexical bge88@id)))) (assq bge90@label bge91@locs)))) (bgaea@gen-top-level-label bge88@id bge89@rib) (bge09@interaction-env-locs bge8e@env))) bge8c@t) (values (gensym) (bgae4@gen-lexical bge88@id)))) (bge4f@top-level-context)))) (set! bgaee@gen-define-label (lambda (bge98@id bge99@rib) (if (bge4f@top-level-context) (bgaea@gen-top-level-label bge98@id bge99@rib) (gensym)))) (set! bgaf8@rib? (lambda (bge9c@x) (and (simple-struct? bge9c@x) (eq? (simple-struct-name bge9c@x) 'rib)))) (set! bgafa@rib-sym* (lambda (bge9e@x) (simple-struct-ref bge9e@x '0))) (set! bgafc@set-rib-sym*! (lambda (bgea0@x bgea1@val) (simple-struct-set! bgea0@x '0 bgea1@val))) (set! bgafe@rib-mark** (lambda (bgea4@x) (simple-struct-ref bgea4@x '1))) (set! bgb00@set-rib-mark**! (lambda (bgea6@x bgea7@val) (simple-struct-set! bgea6@x '1 bgea7@val))) (set! bgb02@rib-label* (lambda (bgeaa@x) (simple-struct-ref bgeaa@x '2))) (set! bgb04@set-rib-label*! (lambda (bgeac@x bgead@val) (simple-struct-set! bgeac@x '2 bgead@val))) (set! bgb06@rib-sealed/freq (lambda (bgeb0@x) (simple-struct-ref bgeb0@x '3))) (set! bgb08@set-rib-sealed/freq! (lambda (bgeb2@x bgeb3@val) (simple-struct-set! bgeb2@x '3 bgeb3@val))) (set! bgb0a@rib-cache (lambda (bgeb6@x) (simple-struct-ref bgeb6@x '4))) (set! bgb0c@set-rib-cache! (lambda (bgeb8@x bgeb9@val) (simple-struct-set! bgeb8@x '4 bgeb9@val))) (set! bgb0e@dummy '3) (set! bgb10@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bgb12@extend-rib! (lambda (bgebc@rib bgebd@id bgebe@label) ((lambda (bgec3@find) (begin (set! bgec3@find (lambda (bged0@sym bged1@mark* bged2@sym* bged3@mark** bged4@label*) (and (pair? bged2@sym*) (if (and (eq? bged0@sym (car bged2@sym*)) (same-marks? bged1@mark* (car bged3@mark**))) bged4@label* (bgec3@find bged0@sym bged1@mark* (cdr bged2@sym*) (cdr bged3@mark**) (cdr bged4@label*)))))) (begin (if (bgb06@rib-sealed/freq bgebc@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bgebc@rib) (void)) ((lambda (bgec4@sym bgec5@mark*) ((lambda (bgec8@sym*) ((lambda (bgeca@t) (if bgeca@t ((lambda (bgecc@p) (if (not (eq? bgebe@label (car bgecc@p))) (if (bge4f@top-level-context) (set-car! bgecc@p bgebe@label) (bge41@syntax-violation '#f '"multiple definitions of identifier" bgebd@id)) (void))) bgeca@t) (begin (if (bgb0a@rib-cache bgebc@rib) (hashtable-update! (bgb0a@rib-cache bgebc@rib) bgec4@sym (lambda (bgece@e) (cons (cons bgec5@mark* bgebe@label) bgece@e)) '()) (void)) (bgafc@set-rib-sym*! bgebc@rib (cons bgec4@sym bgec8@sym*)) (bgb00@set-rib-mark**! bgebc@rib (cons bgec5@mark* (bgafe@rib-mark** bgebc@rib))) (bgb04@set-rib-label*! bgebc@rib (cons bgebe@label (bgb02@rib-label* bgebc@rib)))))) (and (memq bgec4@sym (bgafa@rib-sym* bgebc@rib)) (bgec3@find bgec4@sym bgec5@mark* bgec8@sym* (bgafe@rib-mark** bgebc@rib) (bgb02@rib-label* bgebc@rib))))) (bgafa@rib-sym* bgebc@rib))) (bgb5e@id->sym bgebd@id) (bgb2e@stx-mark* bgebd@id))))) '#f))) (set! bgb14@extend-rib/nc! (lambda (bgeda@rib bgedb@id bgedc@label) ((lambda (bgee0@sym bgee1@mark*) ((lambda (bgee4@sym*) (begin (if (bgb0a@rib-cache bgeda@rib) (hashtable-update! (bgb0a@rib-cache bgeda@rib) bgee0@sym (lambda (bgee6@e) (cons (cons bgee1@mark* bgedc@label) bgee6@e)) '()) (void)) (bgafc@set-rib-sym*! bgeda@rib (cons bgee0@sym bgee4@sym*)) (bgb00@set-rib-mark**! bgeda@rib (cons bgee1@mark* (bgafe@rib-mark** bgeda@rib))) (bgb04@set-rib-label*! bgeda@rib (cons bgedc@label (bgb02@rib-label* bgeda@rib))))) (bgafa@rib-sym* bgeda@rib))) (bgb5e@id->sym bgedb@id) (bgb2e@stx-mark* bgedb@id)))) (set! bgb16@make-rib-map (lambda (bgee8@sym*) ((lambda (bgeea@ht) ((letrec ((bgeec@f (lambda (bgeee@i bgeef@sym*) (if (null? bgeef@sym*) bgeea@ht (begin (hashtable-update! bgeea@ht (car bgeef@sym*) (lambda (bgef2@x) (cons bgeee@i bgef2@x)) '()) (bgeec@f (+ bgeee@i '1) (cdr bgeef@sym*))))))) bgeec@f) '0 bgee8@sym*)) (make-eq-hashtable)))) (set! bgb18@seal-rib! (lambda (bgef4@rib) ((lambda (bgef6@sym*) (if (not (null? bgef6@sym*)) (begin (bgafc@set-rib-sym*! bgef4@rib (list->vector bgef6@sym*)) (bgb00@set-rib-mark**! bgef4@rib (list->vector (bgafe@rib-mark** bgef4@rib))) (bgb04@set-rib-label*! bgef4@rib (list->vector (bgb02@rib-label* bgef4@rib))) (bgb08@set-rib-sealed/freq! bgef4@rib (bgb16@make-rib-map bgef6@sym*))) (void))) (bgafa@rib-sym* bgef4@rib)))) (set! bgb1a@unseal-rib! (lambda (bgef8@rib) (if (bgb06@rib-sealed/freq bgef8@rib) (begin (bgb08@set-rib-sealed/freq! bgef8@rib '#f) (bgafc@set-rib-sym*! bgef8@rib (vector->list (bgafa@rib-sym* bgef8@rib))) (bgb00@set-rib-mark**! bgef8@rib (vector->list (bgafe@rib-mark** bgef8@rib))) (bgb04@set-rib-label*! bgef8@rib (vector->list (bgb02@rib-label* bgef8@rib)))) (void)))) (set! bgb1c@make-full-rib (lambda (bgefa@id* bgefb@label*) ((lambda (bgefe@r) (begin (bgb18@seal-rib! bgefe@r) bgefe@r)) (make-simple-struct 'rib '6 (list (map bgb5e@id->sym bgefa@id*) (map bgb2e@stx-mark* bgefa@id*) bgefb@label* '#f '#f))))) (set! bgb1e@rp (bg6b8@bg594@make-record-printer 'stx (lambda (bgf00@x bgf01@p bgf02@wr) (begin (display '"#<syntax " bgf01@p) (write (bgb70@stx->datum bgf00@x) bgf01@p) ((lambda (bgf06@expr) (if (bg6b0@bg584@annotation? bgf06@expr) ((lambda (bgf08@src) (if (pair? bgf08@src) (begin (display '" [" bgf01@p) (display (cdr bgf08@src) bgf01@p) (display '" of " bgf01@p) (display (car bgf08@src) bgf01@p) (display '"]" bgf01@p)) (void))) (bg6b1@bg586@annotation-source bgf06@expr)) (void))) (bgb2a@stx-expr bgf00@x)) (display '">" bgf01@p))))) (set! bgb28@stx? (lambda (bgf0a@x) (and (simple-struct? bgf0a@x) (eq? (simple-struct-name bgf0a@x) 'stx)))) (set! bgb2a@stx-expr (lambda (bgf0c@x) (simple-struct-ref bgf0c@x '0))) (set! bgb2c@set-stx-expr! (lambda (bgf0e@x bgf0f@val) (simple-struct-set! bgf0e@x '0 bgf0f@val))) (set! bgb2e@stx-mark* (lambda (bgf12@x) (simple-struct-ref bgf12@x '1))) (set! bgb30@set-stx-mark*! (lambda (bgf14@x bgf15@val) (simple-struct-set! bgf14@x '1 bgf15@val))) (set! bgb32@stx-subst* (lambda (bgf18@x) (simple-struct-ref bgf18@x '2))) (set! bgb34@set-stx-subst*! (lambda (bgf1a@x bgf1b@val) (simple-struct-set! bgf1a@x '2 bgf1b@val))) (set! bgb36@stx-ae* (lambda (bgf1e@x) (simple-struct-ref bgf1e@x '3))) (set! bgb38@set-stx-ae*! (lambda (bgf20@x bgf21@val) (simple-struct-set! bgf20@x '3 bgf21@val))) (set! bgb3a@dummy '3) (set! bgb3c@datum->stx (lambda (bgf24@id bgf25@datum) (make-simple-struct 'stx '5 (list bgf25@datum (bgb2e@stx-mark* bgf24@id) (bgb32@stx-subst* bgf24@id) (bgb36@stx-ae* bgf24@id))))) (set! bgb3e@gen-mark (lambda () (string '#\m))) (set! bgb40@anti-mark '#f) (set! bgb42@anti-mark? not) (set! bgb44@mkstx (lambda (bgf28@e bgf29@m* bgf2a@s* bgf2b@ae*) (if (and (bgb28@stx? bgf28@e) (not (bgae2@top-marked? bgf29@m*))) (call-with-values (lambda () (join-wraps bgf29@m* bgf2a@s* bgf2b@ae* bgf28@e)) (lambda (bgf36@bgf31 bgf37@bgf33 bgf38@bgf35) ((lambda (bgf3c@ae* bgf3d@s* bgf3e@m*) (make-simple-struct 'stx '5 (list (bgb2a@stx-expr bgf28@e) bgf3e@m* bgf3d@s* bgf3c@ae*))) bgf38@bgf35 bgf37@bgf33 bgf36@bgf31))) (make-simple-struct 'stx '5 (list bgf28@e bgf29@m* bgf2a@s* bgf2b@ae*))))) (set! bgb46@add-mark (lambda (bgf42@m bgf43@e bgf44@ae) (bgb44@mkstx bgf43@e (list bgf42@m) '(shift) (list bgf44@ae)))) (set! bgb48@add-subst (lambda (bgf48@subst bgf49@e) (bgb44@mkstx bgf49@e '() (list bgf48@subst) '()))) (set! bgb4a@syntax-kind? (lambda (bgf4c@x bgf4d@p?) (if (bgb28@stx? bgf4c@x) (bgb4a@syntax-kind? (bgb2a@stx-expr bgf4c@x) bgf4d@p?) (if (bg6b0@bg584@annotation? bgf4c@x) (bgb4a@syntax-kind? (bg6b2@bg588@annotation-expression bgf4c@x) bgf4d@p?) (bgf4d@p? bgf4c@x))))) (set! bgb4c@syntax-vector->list (lambda (bgf50@x) (if (bgb28@stx? bgf50@x) ((lambda (bgf52@ls bgf53@m* bgf54@s* bgf55@ae*) (map (lambda (bgf5a@x) (bgb44@mkstx bgf5a@x bgf53@m* bgf54@s* bgf55@ae*)) bgf52@ls)) (bgb4c@syntax-vector->list (bgb2a@stx-expr bgf50@x)) (bgb2e@stx-mark* bgf50@x) (bgb32@stx-subst* bgf50@x) (bgb36@stx-ae* bgf50@x)) (if (bg6b0@bg584@annotation? bgf50@x) (bgb4c@syntax-vector->list (bg6b2@bg588@annotation-expression bgf50@x)) (if (vector? bgf50@x) (vector->list bgf50@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bgf50@x)))))) (set! bgb4e@syntax-pair? (lambda (bgf5c@x) (bgb4a@syntax-kind? bgf5c@x pair?))) (set! bgb50@syntax-vector? (lambda (bgf5e@x) (bgb4a@syntax-kind? bgf5e@x vector?))) (set! bgb52@syntax-null? (lambda (bgf60@x) (bgb4a@syntax-kind? bgf60@x null?))) (set! bgb54@syntax-list? (lambda (bgf62@x) (or (bgb52@syntax-null? bgf62@x) (and (bgb4e@syntax-pair? bgf62@x) (bgb54@syntax-list? (bgb58@syntax-cdr bgf62@x)))))) (set! bgb56@syntax-car (lambda (bgf64@x) (if (bgb28@stx? bgf64@x) (bgb44@mkstx (bgb56@syntax-car (bgb2a@stx-expr bgf64@x)) (bgb2e@stx-mark* bgf64@x) (bgb32@stx-subst* bgf64@x) (bgb36@stx-ae* bgf64@x)) (if (bg6b0@bg584@annotation? bgf64@x) (bgb56@syntax-car (bg6b2@bg588@annotation-expression bgf64@x)) (if (pair? bgf64@x) (car bgf64@x) (assertion-violation 'syntax-car '"BUG: not a pair" bgf64@x)))))) (set! bgb58@syntax-cdr (lambda (bgf66@x) (if (bgb28@stx? bgf66@x) (bgb44@mkstx (bgb58@syntax-cdr (bgb2a@stx-expr bgf66@x)) (bgb2e@stx-mark* bgf66@x) (bgb32@stx-subst* bgf66@x) (bgb36@stx-ae* bgf66@x)) (if (bg6b0@bg584@annotation? bgf66@x) (bgb58@syntax-cdr (bg6b2@bg588@annotation-expression bgf66@x)) (if (pair? bgf66@x) (cdr bgf66@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bgf66@x)))))) (set! bgb5a@syntax->list (lambda (bgf68@x) (if (bgb4e@syntax-pair? bgf68@x) (cons (bgb56@syntax-car bgf68@x) (bgb5a@syntax->list (bgb58@syntax-cdr bgf68@x))) (if (bgb52@syntax-null? bgf68@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bgf68@x))))) (set! bgb5c@id? (lambda (bgf6a@x) (and (bgb28@stx? bgf6a@x) (symbol? (bgb2a@stx-expr bgf6a@x))))) (set! bgb5e@id->sym (lambda (bgf6c@x) (bgb2a@stx-expr bgf6c@x))) (set! bgb60@bound-id=? (lambda (bgf6e@x bgf6f@y) (and (eq? (bgb5e@id->sym bgf6e@x) (bgb5e@id->sym bgf6f@y)) (same-marks? (bgb2e@stx-mark* bgf6e@x) (bgb2e@stx-mark* bgf6f@y))))) (set! bgb62@free-id=? (lambda (bgf72@i bgf73@j) ((lambda (bgf76@t0 bgf77@t1) (if (or bgf76@t0 bgf77@t1) (eq? bgf76@t0 bgf77@t1) (eq? (bgb5e@id->sym bgf72@i) (bgb5e@id->sym bgf73@j)))) (id->real-label bgf72@i) (id->real-label bgf73@j)))) (set! bgb64@valid-bound-ids? (lambda (bgf7a@id*) (and (for-all bgb5c@id? bgf7a@id*) (bgb66@distinct-bound-ids? bgf7a@id*)))) (set! bgb66@distinct-bound-ids? (lambda (bgf7c@id*) (or (null? bgf7c@id*) (and (not (bgb68@bound-id-member? (car bgf7c@id*) (cdr bgf7c@id*))) (bgb66@distinct-bound-ids? (cdr bgf7c@id*)))))) (set! bgb68@bound-id-member? (lambda (bgf7e@id bgf7f@id*) (and (pair? bgf7f@id*) (or (bgb60@bound-id=? bgf7e@id (car bgf7f@id*)) (bgb68@bound-id-member? bgf7e@id (cdr bgf7f@id*)))))) (set! bgb6a@self-evaluating? (lambda (bgf82@x) (or (number? bgf82@x) (string? bgf82@x) (char? bgf82@x) (boolean? bgf82@x) (regexp? bgf82@x) (bytevector? bgf82@x)))) (set! bgb6c@strip-annotations (lambda (bgf84@x) (if (pair? bgf84@x) (cons (bgb6c@strip-annotations (car bgf84@x)) (bgb6c@strip-annotations (cdr bgf84@x))) (if (vector? bgf84@x) (vector-map bgb6c@strip-annotations bgf84@x) (if (bg6b0@bg584@annotation? bgf84@x) (bg6af@bg582@annotation-stripped bgf84@x) bgf84@x))))) (set! bgb6e@strip (lambda (bgf86@x bgf87@m*) (if (bgae2@top-marked? bgf87@m*) (if (or (bg6b0@bg584@annotation? bgf86@x) (and (pair? bgf86@x) (bg6b0@bg584@annotation? (car bgf86@x))) (and (vector? bgf86@x) (> (vector-length bgf86@x) '0) (bg6b0@bg584@annotation? (vector-ref bgf86@x '0)))) (bgb6c@strip-annotations bgf86@x) bgf86@x) ((letrec ((bgf8a@f (lambda (bgf8c@x) (if (bgb28@stx? bgf8c@x) (bgb6e@strip (bgb2a@stx-expr bgf8c@x) (bgb2e@stx-mark* bgf8c@x)) (if (bg6b0@bg584@annotation? bgf8c@x) (bg6af@bg582@annotation-stripped bgf8c@x) (if (pair? bgf8c@x) ((lambda (bgf8e@a bgf8f@d) (if (and (eq? bgf8e@a (car bgf8c@x)) (eq? bgf8f@d (cdr bgf8c@x))) bgf8c@x (cons bgf8e@a bgf8f@d))) (bgf8a@f (car bgf8c@x)) (bgf8a@f (cdr bgf8c@x))) (if (vector? bgf8c@x) ((lambda (bgf92@old) ((lambda (bgf94@new) (if (for-all eq? bgf92@old bgf94@new) bgf8c@x (list->vector bgf94@new))) (map bgf8a@f bgf92@old))) (vector->list bgf8c@x)) bgf8c@x))))))) bgf8a@f) bgf86@x)))) (set! bgb70@stx->datum (lambda (bgf96@x) (bgb6e@strip bgf96@x '()))) (set! bgb72@id->label (lambda (bgf98@id) (or (id->real-label bgf98@id) ((lambda (bgf9a@t) (if bgf9a@t ((lambda (bgf9c@env) ((lambda (bgf9e@rib) (call-with-values (lambda () (bgaec@gen-define-label+loc bgf98@id bgf9e@rib)) (lambda (bgfa4@bgfa1 bgfa5@bgfa3) ((lambda (bgfa8@loc_ bgfa9@lab) (begin (bgb12@extend-rib! bgf9e@rib bgf98@id bgfa9@lab) bgfa9@lab)) bgfa5@bgfa3 bgfa4@bgfa1)))) (bge01@interaction-env-rib bgf9c@env))) bgf9a@t) '#f)) (bge4f@top-level-context))))) (set! bgb74@label->binding (lambda (bgfac@x bgfad@r) ((lambda (bgfb0@t) (if bgfb0@t ((lambda (bgfb2@b) (if (and (pair? bgfb2@b) (eq? (car bgfb2@b) '$core-rtd)) (cons '$rtd (map bgd17@bless (cdr bgfb2@b))) (if (and (pair? bgfb2@b) (eq? (car bgfb2@b) 'global-rtd)) ((lambda (bgfb4@lib bgfb5@loc) (cons '$rtd (symbol-value bgfb5@loc))) (cadr bgfb2@b) (cddr bgfb2@b)) bgfb2@b))) bgfb0@t) ((lambda (bgfb8@t) (if bgfb8@t (cdr bgfb8@t) ((lambda (bgfba@t) (if bgfba@t ((lambda (bgfbc@env) ((lambda (bgfbe@t) (if bgfbe@t ((lambda (bgfc0@p) (cons* 'lexical (cdr bgfc0@p) '#f)) bgfbe@t) '(displaced-lexical . #f))) (assq bgfac@x (bge09@interaction-env-locs bgfbc@env)))) bgfba@t) '(displaced-lexical . #f))) (bge4f@top-level-context)))) (assq bgfac@x bgfad@r)))) (bg986@bg7d3@imported-label->binding bgfac@x)))) (set! bgb76@make-binding cons) (set! bgb78@binding-type car) (set! bgb7a@binding-value cdr) (set! bgb7c@raise-unbound-error (lambda (bgfc2@id) (bge3f@syntax-violation* '#f '"unbound identifier" bgfc2@id (bg2ba0@bg29e6@make-undefined-violation)))) (set! bgb7e@syntax-type (lambda (bgfc4@e bgfc5@r) (if (bgb5c@id? bgfc4@e) ((lambda (bgfc8@id) ((lambda (bgfca@label) ((lambda (bgfcc@b) ((lambda (bgfce@type) ((lambda () (begin (if (not bgfca@label) (bgb7c@raise-unbound-error bgfc8@id) (void)) ((lambda (bgfd0@t) (if (memv bgfd0@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bgfce@type (bgb7a@binding-value bgfcc@b) bgfc8@id) (values 'other '#f '#f))) bgfce@type))))) (bgb78@binding-type bgfcc@b))) (bgb74@label->binding bgfca@label bgfc5@r))) (bgb72@id->label bgfc8@id))) bgfc4@e) (if (bgb4e@syntax-pair? bgfc4@e) ((lambda (bgfd2@id) (if (bgb5c@id? bgfd2@id) ((lambda (bgfd4@label) ((lambda (bgfd6@b) ((lambda (bgfd8@type) ((lambda () (begin (if (not bgfd4@label) (bgb7c@raise-unbound-error bgfd2@id) (void)) ((lambda (bgfda@t) (if (memv bgfda@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bgfd8@type (bgb7a@binding-value bgfd6@b) bgfd2@id) (values 'call '#f '#f))) bgfd8@type))))) (bgb78@binding-type bgfd6@b))) (bgb74@label->binding bgfd4@label bgfc5@r))) (bgb72@id->label bgfd2@id)) (values 'call '#f '#f))) (bgb56@syntax-car bgfc4@e)) ((lambda (bgfdc@d) (if (bgb6a@self-evaluating? bgfdc@d) (values 'constant bgfdc@d '#f) (values 'other '#f '#f))) (bgb70@stx->datum bgfc4@e)))))) (set! bgb8c@sanitize-binding (lambda (bgfde@x bgfdf@src) (if (procedure? bgfde@x) (cons* 'local-macro bgfde@x bgfdf@src) (if (and (pair? bgfde@x) (eq? (car bgfde@x) 'macro!) (procedure? (cdr bgfde@x))) (cons* 'local-macro! (cdr bgfde@x) bgfdf@src) (if (and (pair? bgfde@x) (eq? (car bgfde@x) '$rtd)) bgfde@x (assertion-violation 'expand '"invalid transformer" bgfde@x)))))) (set! bgb8e@make-variable-transformer (lambda (bgfe2@x) (if (procedure? bgfe2@x) (cons 'macro! bgfe2@x) (assertion-violation 'make-variable-transformer '"not a procedure" bgfe2@x)))) (set! bgb90@variable-transformer? (lambda (bgfe4@x) (and (pair? bgfe4@x) (eq? (car bgfe4@x) 'macro!) (procedure? (cdr bgfe4@x))))) (set! bgb92@variable-transformer-procedure (lambda (bgfe6@x) (if (bgb90@variable-transformer? bgfe6@x) (cdr bgfe6@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bgfe6@x)))) (set! bgb94@make-eval-transformer (lambda (bgfe8@x) (bgb8c@sanitize-binding (eval-core (bg711@bg6c9@expanded->core bgfe8@x)) bgfe8@x))) (set! bgce5@parse-define (lambda (bgfea@x) ((lambda (bgfec@t) ((lambda (bgfee@ls/false) (if (and bgfee@ls/false (apply (lambda (bgff0@id bgff1@fmls bgff2@b bgff3@b*) (bgb5c@id? bgff0@id)) bgfee@ls/false)) (apply (lambda (bgff8@id bgff9@fmls bgffa@b bgffb@b*) (begin (bgd87@verify-formals bgff9@fmls bgfea@x) (values bgff8@id (cons 'defun (cons bgff9@fmls (cons bgffa@b bgffb@b*)))))) bgfee@ls/false) ((lambda (bg1000@t) ((lambda (bg1002@ls/false) (if (and bg1002@ls/false (apply (lambda (bg1004@id bg1005@val) (bgb5c@id? bg1004@id)) bg1002@ls/false)) (apply (lambda (bg1008@id bg1009@val) (values bg1008@id (cons 'expr bg1009@val))) bg1002@ls/false) ((lambda (bg100c@t) ((lambda (bg100e@ls/false) (if (and bg100e@ls/false (apply (lambda (bg1010@id) (bgb5c@id? bg1010@id)) bg100e@ls/false)) (apply (lambda (bg1012@id) (values bg1012@id (cons 'expr (bgd17@bless '(void))))) bg100e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg100c@t))) (bgd61@syntax-dispatch bg100c@t '(_ any)))) bg1000@t))) (bgd61@syntax-dispatch bg1000@t '(_ any any)))) bgfec@t))) (bgd61@syntax-dispatch bgfec@t '(_ (any . any) any . each-any)))) bgfea@x))) (set! bgce7@parse-define-syntax (lambda (bg1014@x) ((lambda (bg1016@t) ((lambda (bg1018@ls/false) (if (and bg1018@ls/false (apply (lambda (bg101a@id bg101b@val) (bgb5c@id? bg101a@id)) bg1018@ls/false)) (apply (lambda (bg101e@id bg101f@val) (values bg101e@id bg101f@val)) bg1018@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1016@t))) (bgd61@syntax-dispatch bg1016@t '(_ any any)))) bg1014@x))) (set! bgce9@scheme-stx-hashtable (make-eq-hashtable)) (set! bgceb@scheme-stx (lambda (bg1022@sym) (or (hashtable-ref bgce9@scheme-stx-hashtable bg1022@sym '#f) ((lambda (bg1024@subst) ((lambda (bg1026@stx) ((lambda (bg1028@stx) ((lambda () (begin (hashtable-set! bgce9@scheme-stx-hashtable bg1022@sym bg1028@stx) bg1028@stx)))) ((lambda (bg102a@t) (if bg102a@t ((lambda (bg102c@x) ((lambda (bg102e@name bg102f@label) (bgb48@add-subst (make-simple-struct 'rib '6 (list (list bg102e@name) (list bgae0@top-mark*) (list bg102f@label) '#f '#f)) bg1026@stx)) (car bg102c@x) (cdr bg102c@x))) bg102a@t) bg1026@stx)) (assq bg1022@sym bg1024@subst)))) (make-simple-struct 'stx '5 (list bg1022@sym bgae0@top-mark* '() '())))) (bg962@bg78b@library-subst (bg980@bg7c7@find-library-by-name '(psyntax system $all))))))) (set! bgced@lexical-var car) (set! bgcef@lexical-mutable? cdr) (set! bgcf1@set-lexical-mutable! set-cdr!) (set! bgcf3@add-lexical (lambda (bg1032@lab bg1033@lex bg1034@r) (cons (cons* bg1032@lab 'lexical bg1033@lex '#f) bg1034@r))) (set! bgcf5@add-lexicals (lambda (bg1038@lab* bg1039@lex* bg103a@r) (if (null? bg1038@lab*) bg103a@r (bgcf5@add-lexicals (cdr bg1038@lab*) (cdr bg1039@lex*) (bgcf3@add-lexical (car bg1038@lab*) (car bg1039@lex*) bg103a@r))))) (set! bgcf7@letrec-helper (lambda (bg103e@e bg103f@r bg1040@mr bg1041@build) ((lambda (bg1046@t) ((lambda (bg1048@ls/false) (if bg1048@ls/false (apply (lambda (bg104a@lhs* bg104b@rhs* bg104c@b bg104d@b*) (if (not (bgb64@valid-bound-ids? bg104a@lhs*)) (bgd1b@invalid-fmls-error bg103e@e bg104a@lhs*) ((lambda (bg1052@lex* bg1053@lab*) ((lambda (bg1056@rib bg1057@r) ((lambda (bg105a@body bg105b@rhs*) (bg1041@build '#f bg1052@lex* bg105b@rhs* bg105a@body)) (bgd99@chi-internal (bgb48@add-subst bg1056@rib (cons bg104c@b bg104d@b*)) bg1057@r bg1040@mr) (bgd7f@chi-expr* (map (lambda (bg105e@x) (bgb48@add-subst bg1056@rib bg105e@x)) bg104b@rhs*) bg1057@r bg1040@mr))) (bgb1c@make-full-rib bg104a@lhs* bg1053@lab*) (bgcf5@add-lexicals bg1053@lab* bg1052@lex* bg103f@r))) (map bgae4@gen-lexical bg104a@lhs*) (map bgae8@gen-label bg104a@lhs*)))) bg1048@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1046@t))) (bgd61@syntax-dispatch bg1046@t '(_ #(each (any any)) any . each-any)))) bg103e@e))) (set! bgcf9@letrec-transformer (lambda (bg1060@e bg1061@r bg1062@mr) (bgcf7@letrec-helper bg1060@e bg1061@r bg1062@mr bgac5@bga36@build-letrec))) (set! bgcfb@letrec*-transformer (lambda (bg1066@e bg1067@r bg1068@mr) (bgcf7@letrec-helper bg1066@e bg1067@r bg1068@mr bgac6@bga38@build-letrec*))) (set! bgcfd@fluid-let-syntax-transformer (lambda (bg106c@e bg106d@r bg106e@mr) ((lambda (bg1073@lookup) (begin (set! bg1073@lookup (lambda (bg1086@x) (or (bgb72@id->label bg1086@x) (bge41@syntax-violation '#f '"unbound identifier" bg106c@e bg1086@x)))) ((lambda (bg1074@t) ((lambda (bg1076@ls/false) (if bg1076@ls/false (apply (lambda (bg1078@lhs* bg1079@rhs* bg107a@b bg107b@b*) (if (not (bgb64@valid-bound-ids? bg1078@lhs*)) (bgd1b@invalid-fmls-error bg106c@e bg1078@lhs*) ((lambda (bg1080@lab* bg1081@rhs*) (bgd99@chi-internal (cons bg107a@b bg107b@b*) (append (map cons bg1080@lab* bg1081@rhs*) bg106d@r) (append (map cons bg1080@lab* bg1081@rhs*) bg106e@mr))) (map bg1073@lookup bg1078@lhs*) (map (lambda (bg1084@x) (bgb94@make-eval-transformer (bgdbb@expand-transformer bg1084@x bg106e@mr))) bg1079@rhs*)))) bg1076@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1074@t))) (bgd61@syntax-dispatch bg1074@t '(_ #(each (any any)) any . each-any)))) bg106c@e))) '#f))) (set! bgcff@type-descriptor-transformer (lambda (bg1088@e bg1089@r bg108a@mr) ((lambda (bg108e@t) ((lambda (bg1090@ls/false) (if (and bg1090@ls/false (apply (lambda (bg1092@id) (bgb5c@id? bg1092@id)) bg1090@ls/false)) (apply (lambda (bg1094@id) ((lambda (bg1096@lab) ((lambda (bg1098@b) ((lambda (bg109a@type) ((lambda () (begin (if (not bg1096@lab) (bgb7c@raise-unbound-error bg1094@id) (void)) (if (not (and (eq? bg109a@type '$rtd) (not (list? (bgb7a@binding-value bg1098@b))))) (bge41@syntax-violation '#f '"not a record type" bg1088@e) (void)) (list 'quote (bgb7a@binding-value bg1098@b)))))) (bgb78@binding-type bg1098@b))) (bgb74@label->binding bg1096@lab bg1089@r))) (bgb72@id->label bg1094@id))) bg1090@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg108e@t))) (bgd61@syntax-dispatch bg108e@t '(_ any)))) bg1088@e))) (set! bgd01@record-type-descriptor-transformer (lambda (bg109c@e bg109d@r bg109e@mr) ((lambda (bg10a2@t) ((lambda (bg10a4@ls/false) (if (and bg10a4@ls/false (apply (lambda (bg10a6@id) (bgb5c@id? bg10a6@id)) bg10a4@ls/false)) (apply (lambda (bg10a8@id) ((lambda (bg10aa@lab) ((lambda (bg10ac@b) ((lambda (bg10ae@type) ((lambda () (begin (if (not bg10aa@lab) (bgb7c@raise-unbound-error bg10a8@id) (void)) (if (not (and (eq? bg10ae@type '$rtd) (list? (bgb7a@binding-value bg10ac@b)))) (bge41@syntax-violation '#f '"not a record type" bg109c@e) (void)) (bgd83@chi-expr (car (bgb7a@binding-value bg10ac@b)) bg109d@r bg109e@mr))))) (bgb78@binding-type bg10ac@b))) (bgb74@label->binding bg10aa@lab bg109d@r))) (bgb72@id->label bg10a8@id))) bg10a4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg10a2@t))) (bgd61@syntax-dispatch bg10a2@t '(_ any)))) bg109c@e))) (set! bgd03@record-constructor-descriptor-transformer (lambda (bg10b0@e bg10b1@r bg10b2@mr) ((lambda (bg10b6@t) ((lambda (bg10b8@ls/false) (if (and bg10b8@ls/false (apply (lambda (bg10ba@id) (bgb5c@id? bg10ba@id)) bg10b8@ls/false)) (apply (lambda (bg10bc@id) ((lambda (bg10be@lab) ((lambda (bg10c0@b) ((lambda (bg10c2@type) ((lambda () (begin (if (not bg10be@lab) (bgb7c@raise-unbound-error bg10bc@id) (void)) (if (not (and (eq? bg10c2@type '$rtd) (list? (bgb7a@binding-value bg10c0@b)))) (bge41@syntax-violation '#f '"invalid type" bg10b0@e) (void)) (bgd83@chi-expr (cadr (bgb7a@binding-value bg10c0@b)) bg10b1@r bg10b2@mr))))) (bgb78@binding-type bg10c0@b))) (bgb74@label->binding bg10be@lab bg10b1@r))) (bgb72@id->label bg10bc@id))) bg10b8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg10b6@t))) (bgd61@syntax-dispatch bg10b6@t '(_ any)))) bg10b0@e))) (set! bgd05@when-macro (lambda (bg10c4@e) ((lambda (bg10c6@t) ((lambda (bg10c8@ls/false) (if bg10c8@ls/false (apply (lambda (bg10ca@test bg10cb@e bg10cc@e*) (bgd17@bless (list 'if bg10ca@test (cons 'begin (cons bg10cb@e bg10cc@e*))))) bg10c8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg10c6@t))) (bgd61@syntax-dispatch bg10c6@t '(_ any any . each-any)))) bg10c4@e))) (set! bgd07@unless-macro (lambda (bg10d0@e) ((lambda (bg10d2@t) ((lambda (bg10d4@ls/false) (if bg10d4@ls/false (apply (lambda (bg10d6@test bg10d7@e bg10d8@e*) (bgd17@bless (list 'if (list 'not bg10d6@test) (cons 'begin (cons bg10d7@e bg10d8@e*))))) bg10d4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg10d2@t))) (bgd61@syntax-dispatch bg10d2@t '(_ any any . each-any)))) bg10d0@e))) (set! bgd09@if-transformer (lambda (bg10dc@e bg10dd@r bg10de@mr) ((lambda (bg10e2@t) ((lambda (bg10e4@ls/false) (if bg10e4@ls/false (apply (lambda (bg10e6@e0 bg10e7@e1 bg10e8@e2) (list 'if (bgd83@chi-expr bg10e6@e0 bg10dd@r bg10de@mr) (bgd83@chi-expr bg10e7@e1 bg10dd@r bg10de@mr) (bgd83@chi-expr bg10e8@e2 bg10dd@r bg10de@mr))) bg10e4@ls/false) ((lambda (bg10ec@t) ((lambda (bg10ee@ls/false) (if bg10ee@ls/false (apply (lambda (bg10f0@e0 bg10f1@e1) (list 'if (bgd83@chi-expr bg10f0@e0 bg10dd@r bg10de@mr) (bgd83@chi-expr bg10f1@e1 bg10dd@r bg10de@mr) (bgac4@bga34@build-void))) bg10ee@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg10ec@t))) (bgd61@syntax-dispatch bg10ec@t '(_ any any)))) bg10e2@t))) (bgd61@syntax-dispatch bg10e2@t '(_ any any any)))) bg10dc@e))) (set! bgd0b@and-transformer (lambda (bg10f4@e bg10f5@r bg10f6@mr) ((lambda (bg10fa@t) ((lambda (bg10fc@ls/false) (if bg10fc@ls/false (apply (lambda (bg10fe@e*) (cons 'and (bgd7f@chi-expr* bg10fe@e* bg10f5@r bg10f6@mr))) bg10fc@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg10fa@t))) (bgd61@syntax-dispatch bg10fa@t '(_ . each-any)))) bg10f4@e))) (set! bgd0d@or-transformer (lambda (bg1100@e bg1101@r bg1102@mr) ((lambda (bg1106@t) ((lambda (bg1108@ls/false) (if bg1108@ls/false (apply (lambda (bg110a@e*) (cons 'or (bgd7f@chi-expr* bg110a@e* bg1101@r bg1102@mr))) bg1108@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1106@t))) (bgd61@syntax-dispatch bg1106@t '(_ . each-any)))) bg1100@e))) (set! bgd0f@case-macro (lambda (bg110c@e) ((lambda (bg110f@build-last bg1111@build-one) (begin (set! bg110f@build-last (lambda (bg1136@cls) ((lambda (bg1138@t) ((lambda (bg113a@ls/false) (if bg113a@ls/false (apply (lambda (bg113c@e bg113d@e*) (cons 'begin (cons bg113c@e bg113d@e*))) bg113a@ls/false) ((lambda (bg1140@t) ((lambda (bg1142@ls/false) (if bg1142@ls/false (apply (lambda () (bg1111@build-one bg1136@cls '(if #f #f))) bg1142@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1140@t))) (bgd61@syntax-dispatch bg1140@t '_))) bg1138@t))) (bgd61@syntax-dispatch bg1138@t '(#(scheme-id else) any . each-any)))) bg1136@cls))) (set! bg1111@build-one (lambda (bg1128@cls bg1129@k) ((lambda (bg112c@t) ((lambda (bg112e@ls/false) (if bg112e@ls/false (apply (lambda (bg1130@d* bg1131@e bg1132@e*) (list 'if (list 'memv 't (list 'quote bg1130@d*)) (cons 'begin (cons bg1131@e bg1132@e*)) bg1129@k)) bg112e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg112c@t))) (bgd61@syntax-dispatch bg112c@t '(each-any any . each-any)))) bg1128@cls))) ((lambda (bg1112@t) ((lambda (bg1114@ls/false) (if bg1114@ls/false (apply (lambda (bg1116@expr) (bgd17@bless (cons 'let (cons (list (list 't bg1116@expr)) '((if #f #f)))))) bg1114@ls/false) ((lambda (bg1118@t) ((lambda (bg111a@ls/false) (if bg111a@ls/false (apply (lambda (bg111c@expr bg111d@cls bg111e@cls*) (bgd17@bless (list 'let (list (list 't bg111c@expr)) ((letrec ((bg1122@f (lambda (bg1124@cls bg1125@cls*) (if (null? bg1125@cls*) (bg110f@build-last bg1124@cls) (bg1111@build-one bg1124@cls (bg1122@f (car bg1125@cls*) (cdr bg1125@cls*))))))) bg1122@f) bg111d@cls bg111e@cls*)))) bg111a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1118@t))) (bgd61@syntax-dispatch bg1118@t '(_ any any . each-any)))) bg1112@t))) (bgd61@syntax-dispatch bg1112@t '(_ any)))) bg110c@e))) '#f '#f))) (set! bgd11@quote-transformer (lambda (bg1144@e bg1145@r bg1146@mr) ((lambda (bg114a@t) ((lambda (bg114c@ls/false) (if bg114c@ls/false (apply (lambda (bg114e@datum) (list 'quote (bgb70@stx->datum bg114e@datum))) bg114c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg114a@t))) (bgd61@syntax-dispatch bg114a@t '(_ any)))) bg1144@e))) (set! bgd13@case-lambda-transformer (lambda (bg1150@e bg1151@r bg1152@mr) ((lambda (bg1156@t) ((lambda (bg1158@ls/false) (if bg1158@ls/false (apply (lambda (bg115a@fmls* bg115b@b* bg115c@b**) (call-with-values (lambda () (bgd8b@chi-lambda-clause* bg1150@e bg115a@fmls* (map cons bg115b@b* bg115c@b**) bg1151@r bg1152@mr)) (lambda (bg1164@bg1161 bg1165@bg1163) ((lambda (bg1168@body* bg1169@fmls*) (bgac1@bga02@build-case-lambda '#f bg1169@fmls* bg1168@body*)) bg1165@bg1163 bg1164@bg1161)))) bg1158@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1156@t))) (bgd61@syntax-dispatch bg1156@t '(_ . #(each (any any . each-any)))))) bg1150@e))) (set! bgd15@lambda-transformer (lambda (bg116c@e bg116d@r bg116e@mr) ((lambda (bg1172@t) ((lambda (bg1174@ls/false) (if bg1174@ls/false (apply (lambda (bg1176@fmls bg1177@b bg1178@b*) (call-with-values (lambda () (bgd89@chi-lambda-clause bg116c@e bg1176@fmls (cons bg1177@b bg1178@b*) bg116d@r bg116e@mr)) (lambda (bg1180@bg117d bg1181@bg117f) ((lambda (bg1184@body bg1185@fmls) (bgac0@bga00@build-lambda '#f bg1185@fmls bg1184@body)) bg1181@bg117f bg1180@bg117d)))) bg1174@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1172@t))) (bgd61@syntax-dispatch bg1172@t '(_ any any . each-any)))) bg116c@e))) (set! bgd17@bless (lambda (bg1188@x) (bgb44@mkstx ((letrec ((bg118a@f (lambda (bg118c@x) (if (bgb28@stx? bg118c@x) bg118c@x (if (pair? bg118c@x) (cons (bg118a@f (car bg118c@x)) (bg118a@f (cdr bg118c@x))) (if (symbol? bg118c@x) (bgceb@scheme-stx bg118c@x) (if (vector? bg118c@x) (vector-map bg118a@f bg118c@x) bg118c@x))))))) bg118a@f) bg1188@x) '() '() '()))) (set! bgd19@with-syntax-macro (lambda (bg118e@e) ((lambda (bg1190@t) ((lambda (bg1192@ls/false) (if bg1192@ls/false (apply (lambda (bg1194@pat* bg1195@expr* bg1196@b bg1197@b*) ((lambda (bg119c@idn*) (begin (bgd87@verify-formals (map car bg119c@idn*) bg118e@e) ((lambda (bg119e@t*) (bgd17@bless (list 'let (map list bg119e@t* bg1195@expr*) ((letrec ((bg11a0@f (lambda (bg11a2@pat* bg11a3@t*) (if (null? bg11a2@pat*) (cons 'begin (cons '#f (cons bg1196@b bg1197@b*))) (list 'syntax-case (car bg11a3@t*) '() (list (car bg11a2@pat*) (bg11a0@f (cdr bg11a2@pat*) (cdr bg11a3@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bg11a2@pat*)) (car bg11a3@t*)))))))) bg11a0@f) bg1194@pat* bg119e@t*)))) (bge2f@generate-temporaries bg1195@expr*)))) ((letrec ((bg11a6@f (lambda (bg11a8@pat*) (if (null? bg11a8@pat*) '() (call-with-values (lambda () (bgd5f@convert-pattern (car bg11a8@pat*) '())) (lambda (bg11ae@bg11ab bg11af@bg11ad) ((lambda (bg11b2@idn* bg11b3@pat) (append bg11b2@idn* (bg11a6@f (cdr bg11a8@pat*)))) bg11af@bg11ad bg11ae@bg11ab))))))) bg11a6@f) bg1194@pat*))) bg1192@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1190@t))) (bgd61@syntax-dispatch bg1190@t '(_ #(each (any any)) any . each-any)))) bg118e@e))) (set! bgd1b@invalid-fmls-error (lambda (bg11b6@stx bg11b7@fmls) ((lambda (bg11ba@t) ((lambda (bg11bc@ls/false) (if bg11bc@ls/false (apply (lambda (bg11be@id* bg11bf@last) ((letrec ((bg11c2@f (lambda (bg11c4@id*) (if (null? bg11c4@id*) (values) (if (not (bgb5c@id? (car bg11c4@id*))) (bge41@syntax-violation '#f '"not an identifier" bg11b6@stx (car bg11c4@id*)) (begin (bg11c2@f (cdr bg11c4@id*)) (if (bgb68@bound-id-member? (car bg11c4@id*) (cdr bg11c4@id*)) (bge41@syntax-violation '#f '"duplicate binding" bg11b6@stx (car bg11c4@id*)) (void)))))))) bg11c2@f) (if (bgb5c@id? bg11bf@last) (cons bg11bf@last bg11be@id*) (if (bgb52@syntax-null? bg11bf@last) bg11be@id* (bge41@syntax-violation '#f '"not an identifier" bg11b6@stx bg11bf@last))))) bg11bc@ls/false) ((lambda (bg11c6@t) ((lambda (bg11c8@ls/false) (if bg11c8@ls/false (apply (lambda () (bge41@syntax-violation '#f '"malformed binding form" bg11b6@stx bg11b7@fmls)) bg11c8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg11c6@t))) (bgd61@syntax-dispatch bg11c6@t '_))) bg11ba@t))) (bgd61@syntax-dispatch bg11ba@t '#(each+ any () any)))) bg11b7@fmls))) (set! bgd1d@let-macro (lambda (bg11ca@stx) ((lambda (bg11cc@t) ((lambda (bg11ce@ls/false) (if bg11ce@ls/false (apply (lambda (bg11d0@lhs* bg11d1@rhs* bg11d2@b bg11d3@b*) (if (bgb64@valid-bound-ids? bg11d0@lhs*) (bgd17@bless (cons (cons 'lambda (cons bg11d0@lhs* (cons bg11d2@b bg11d3@b*))) bg11d1@rhs*)) (bgd1b@invalid-fmls-error bg11ca@stx bg11d0@lhs*))) bg11ce@ls/false) ((lambda (bg11d8@t) ((lambda (bg11da@ls/false) (if (and bg11da@ls/false (apply (lambda (bg11dc@f bg11dd@lhs* bg11de@rhs* bg11df@b bg11e0@b*) (bgb5c@id? bg11dc@f)) bg11da@ls/false)) (apply (lambda (bg11e6@f bg11e7@lhs* bg11e8@rhs* bg11e9@b bg11ea@b*) (if (bgb64@valid-bound-ids? bg11e7@lhs*) (bgd17@bless (cons (list 'letrec (list (list bg11e6@f (cons 'lambda (cons bg11e7@lhs* (cons bg11e9@b bg11ea@b*))))) bg11e6@f) bg11e8@rhs*)) (bgd1b@invalid-fmls-error bg11ca@stx bg11e7@lhs*))) bg11da@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg11d8@t))) (bgd61@syntax-dispatch bg11d8@t '(_ any #(each (any any)) any . each-any)))) bg11cc@t))) (bgd61@syntax-dispatch bg11cc@t '(_ #(each (any any)) any . each-any)))) bg11ca@stx))) (set! bgd1f@let-values-macro (lambda (bg11f0@stx) ((lambda (bg11f3@rename bg11f5@rename*) (begin (set! bg11f3@rename (lambda (bg1258@x bg1259@old* bg125a@new*) (begin (if (not (bgb5c@id? bg1258@x)) (bge41@syntax-violation '#f '"not an indentifier" bg11f0@stx bg1258@x) (void)) (if (bgb68@bound-id-member? bg1258@x bg1259@old*) (bge41@syntax-violation '#f '"duplicate binding" bg11f0@stx bg1258@x) (void)) ((lambda (bg125e@y) (values bg125e@y (cons bg1258@x bg1259@old*) (cons bg125e@y bg125a@new*))) (gensym (bge47@syntax->datum bg1258@x)))))) (set! bg11f5@rename* (lambda (bg1246@x* bg1247@old* bg1248@new*) (if (null? bg1246@x*) (values '() bg1247@old* bg1248@new*) (call-with-values (lambda () (bg11f3@rename (car bg1246@x*) bg1247@old* bg1248@new*)) (lambda (bg124c@x bg124d@old* bg124e@new*) (call-with-values (lambda () (bg11f5@rename* (cdr bg1246@x*) bg124d@old* bg124e@new*)) (lambda (bg1252@x* bg1253@old* bg1254@new*) (values (cons bg124c@x bg1252@x*) bg1253@old* bg1254@new*)))))))) ((lambda (bg11f6@t) ((lambda (bg11f8@ls/false) (if bg11f8@ls/false (apply (lambda (bg11fa@b bg11fb@b*) (cons* (bgd17@bless 'let) '() bg11fa@b bg11fb@b*)) bg11f8@ls/false) ((lambda (bg11fe@t) ((lambda (bg1200@ls/false) (if bg1200@ls/false (apply (lambda (bg1202@lhs* bg1203@rhs* bg1204@b bg1205@b*) (bgd17@bless ((letrec ((bg120a@f (lambda (bg120c@lhs* bg120d@rhs* bg120e@old* bg120f@new*) (if (null? bg120c@lhs*) (cons 'let (cons (map list bg120e@old* bg120f@new*) (cons bg1204@b bg1205@b*))) ((lambda (bg1214@t) ((lambda (bg1216@ls/false) (if bg1216@ls/false (apply (lambda (bg1218@x*) (call-with-values (lambda () (bg11f5@rename* bg1218@x* bg120e@old* bg120f@new*)) (lambda (bg1220@bg121b bg1221@bg121d bg1222@bg121f) ((lambda (bg1226@new* bg1227@old* bg1228@y*) (list 'call-with-values (list 'lambda '() (car bg120d@rhs*)) (list 'lambda bg1228@y* (bg120a@f (cdr bg120c@lhs*) (cdr bg120d@rhs*) bg1227@old* bg1226@new*)))) bg1222@bg121f bg1221@bg121d bg1220@bg121b)))) bg1216@ls/false) ((lambda (bg122c@t) ((lambda (bg122e@ls/false) (if bg122e@ls/false (apply (lambda (bg1230@x* bg1231@x) (call-with-values (lambda () (bg11f3@rename bg1231@x bg120e@old* bg120f@new*)) (lambda (bg1234@y bg1235@old* bg1236@new*) (call-with-values (lambda () (bg11f5@rename* bg1230@x* bg1235@old* bg1236@new*)) (lambda (bg123a@y* bg123b@old* bg123c@new*) (list 'call-with-values (list 'lambda '() (car bg120d@rhs*)) (list 'lambda (append bg123a@y* bg1234@y) (bg120a@f (cdr bg120c@lhs*) (cdr bg120d@rhs*) bg123b@old* bg123c@new*)))))))) bg122e@ls/false) ((lambda (bg1240@t) ((lambda (bg1242@ls/false) (if bg1242@ls/false (apply (lambda (bg1244@others) (bge41@syntax-violation '#f '"malformed bindings" bg11f0@stx bg1244@others)) bg1242@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1240@t))) (bgd61@syntax-dispatch bg1240@t 'any))) bg122c@t))) (bgd61@syntax-dispatch bg122c@t '#(each+ any () any)))) bg1214@t))) (bgd61@syntax-dispatch bg1214@t 'each-any))) (car bg120c@lhs*)))))) bg120a@f) bg1202@lhs* bg1203@rhs* '() '()))) bg1200@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg11fe@t))) (bgd61@syntax-dispatch bg11fe@t '(_ #(each (any any)) any . each-any)))) bg11f6@t))) (bgd61@syntax-dispatch bg11f6@t '(_ () any . each-any)))) bg11f0@stx))) '#f '#f))) (set! bgd21@let*-values-macro (lambda (bg1260@stx) ((lambda (bg1263@check) (begin (set! bg1263@check (lambda (bg1292@x*) (if (not (null? bg1292@x*)) ((lambda (bg1294@x) (begin (if (not (bgb5c@id? bg1294@x)) (bge41@syntax-violation '#f '"not an identifier" bg1260@stx bg1294@x) (void)) (bg1263@check (cdr bg1292@x*)) (if (bgb68@bound-id-member? bg1294@x (cdr bg1292@x*)) (bge41@syntax-violation '#f '"duplicate identifier" bg1260@stx bg1294@x) (void)))) (car bg1292@x*)) (void)))) ((lambda (bg1264@t) ((lambda (bg1266@ls/false) (if bg1266@ls/false (apply (lambda (bg1268@b bg1269@b*) (cons* (bgd17@bless 'let) '() bg1268@b bg1269@b*)) bg1266@ls/false) ((lambda (bg126c@t) ((lambda (bg126e@ls/false) (if bg126e@ls/false (apply (lambda (bg1270@lhs* bg1271@rhs* bg1272@b bg1273@b*) (bgd17@bless ((letrec ((bg1278@f (lambda (bg127a@lhs* bg127b@rhs*) (if (null? bg127a@lhs*) (cons 'begin (cons bg1272@b bg1273@b*)) ((lambda (bg127e@t) ((lambda (bg1280@ls/false) (if bg1280@ls/false (apply (lambda (bg1282@x*) (begin (bg1263@check bg1282@x*) (list 'call-with-values (list 'lambda '() (car bg127b@rhs*)) (list 'lambda bg1282@x* (bg1278@f (cdr bg127a@lhs*) (cdr bg127b@rhs*)))))) bg1280@ls/false) ((lambda (bg1284@t) ((lambda (bg1286@ls/false) (if bg1286@ls/false (apply (lambda (bg1288@x* bg1289@x) (begin (bg1263@check (cons bg1289@x bg1288@x*)) (list 'call-with-values (list 'lambda '() (car bg127b@rhs*)) (list 'lambda (append bg1288@x* bg1289@x) (bg1278@f (cdr bg127a@lhs*) (cdr bg127b@rhs*)))))) bg1286@ls/false) ((lambda (bg128c@t) ((lambda (bg128e@ls/false) (if bg128e@ls/false (apply (lambda (bg1290@others) (bge41@syntax-violation '#f '"malformed bindings" bg1260@stx bg1290@others)) bg128e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg128c@t))) (bgd61@syntax-dispatch bg128c@t 'any))) bg1284@t))) (bgd61@syntax-dispatch bg1284@t '#(each+ any () any)))) bg127e@t))) (bgd61@syntax-dispatch bg127e@t 'each-any))) (car bg127a@lhs*)))))) bg1278@f) bg1270@lhs* bg1271@rhs*))) bg126e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg126c@t))) (bgd61@syntax-dispatch bg126c@t '(_ #(each (any any)) any . each-any)))) bg1264@t))) (bgd61@syntax-dispatch bg1264@t '(_ () any . each-any)))) bg1260@stx))) '#f))) (set! bgd23@trace-lambda-macro (lambda (bg1296@stx) ((lambda (bg1298@t) ((lambda (bg129a@ls/false) (if bg129a@ls/false (apply (lambda (bg129c@who bg129d@fmls bg129e@b bg129f@b*) (if (bgb64@valid-bound-ids? bg129d@fmls) (bgd17@bless (list 'make-traced-procedure (list 'quote bg129c@who) (cons 'lambda (cons bg129d@fmls (cons bg129e@b bg129f@b*))))) (bgd1b@invalid-fmls-error bg1296@stx bg129d@fmls))) bg129a@ls/false) ((lambda (bg12a4@t) ((lambda (bg12a6@ls/false) (if bg12a6@ls/false (apply (lambda (bg12a8@who bg12a9@fmls bg12aa@last bg12ab@b bg12ac@b*) (if (bgb64@valid-bound-ids? (cons bg12aa@last bg12a9@fmls)) (bgd17@bless (list 'make-traced-procedure (list 'quote bg12a8@who) (cons 'lambda (cons (append bg12a9@fmls bg12aa@last) (cons bg12ab@b bg12ac@b*))))) (bgd1b@invalid-fmls-error bg1296@stx (append bg12a9@fmls bg12aa@last)))) bg12a6@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg12a4@t))) (bgd61@syntax-dispatch bg12a4@t '(_ any #(each+ any () any) any . each-any)))) bg1298@t))) (bgd61@syntax-dispatch bg1298@t '(_ any each-any any . each-any)))) bg1296@stx))) (set! bgd25@trace-define-macro (lambda (bg12b2@stx) ((lambda (bg12b4@t) ((lambda (bg12b6@ls/false) (if bg12b6@ls/false (apply (lambda (bg12b8@who bg12b9@fmls bg12ba@b bg12bb@b*) (if (bgb64@valid-bound-ids? bg12b9@fmls) (bgd17@bless (list 'define bg12b8@who (list 'make-traced-procedure (list 'quote bg12b8@who) (cons 'lambda (cons bg12b9@fmls (cons bg12ba@b bg12bb@b*)))))) (bgd1b@invalid-fmls-error bg12b2@stx bg12b9@fmls))) bg12b6@ls/false) ((lambda (bg12c0@t) ((lambda (bg12c2@ls/false) (if bg12c2@ls/false (apply (lambda (bg12c4@who bg12c5@fmls bg12c6@last bg12c7@b bg12c8@b*) (if (bgb64@valid-bound-ids? (cons bg12c6@last bg12c5@fmls)) (bgd17@bless (list 'define bg12c4@who (list 'make-traced-procedure (list 'quote bg12c4@who) (cons 'lambda (cons (append bg12c5@fmls bg12c6@last) (cons bg12c7@b bg12c8@b*)))))) (bgd1b@invalid-fmls-error bg12b2@stx (append bg12c5@fmls bg12c6@last)))) bg12c2@ls/false) ((lambda (bg12ce@t) ((lambda (bg12d0@ls/false) (if bg12d0@ls/false (apply (lambda (bg12d2@who bg12d3@expr) (if (bgb5c@id? bg12d2@who) (bgd17@bless (list 'define bg12d2@who (list 'let (list (list 'v bg12d3@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bg12d2@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bge41@syntax-violation '#f '"invalid name" bg12b2@stx))) bg12d0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg12ce@t))) (bgd61@syntax-dispatch bg12ce@t '(_ any any)))) bg12c0@t))) (bgd61@syntax-dispatch bg12c0@t '(_ (any . #(each+ any () any)) any . each-any)))) bg12b4@t))) (bgd61@syntax-dispatch bg12b4@t '(_ (any . each-any) any . each-any)))) bg12b2@stx))) (set! bgd27@trace-define-syntax-macro (lambda (bg12d6@stx) ((lambda (bg12d8@t) ((lambda (bg12da@ls/false) (if bg12da@ls/false (apply (lambda (bg12dc@who bg12dd@expr) (if (bgb5c@id? bg12dc@who) (bgd17@bless (list 'define-syntax bg12dc@who (list 'make-traced-macro (list 'quote bg12dc@who) bg12dd@expr))) (bge41@syntax-violation '#f '"invalid name" bg12d6@stx))) bg12da@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg12d8@t))) (bgd61@syntax-dispatch bg12d8@t '(_ any any)))) bg12d6@stx))) (set! bgd29@trace-let/rec-syntax (lambda (bg12e0@who) (lambda (bg12e2@stx) ((lambda (bg12e4@t) ((lambda (bg12e6@ls/false) (if bg12e6@ls/false (apply (lambda (bg12e8@lhs* bg12e9@rhs* bg12ea@b bg12eb@b*) (if (bgb64@valid-bound-ids? bg12e8@lhs*) ((lambda (bg12f0@rhs*) (bgd17@bless (cons bg12e0@who (cons (map list bg12e8@lhs* bg12f0@rhs*) (cons bg12ea@b bg12eb@b*))))) (map (lambda (bg12f2@lhs bg12f3@rhs) (list 'make-traced-macro (list 'quote bg12f2@lhs) bg12f3@rhs)) bg12e8@lhs* bg12e9@rhs*)) (bgd1b@invalid-fmls-error bg12e2@stx bg12e8@lhs*))) bg12e6@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg12e4@t))) (bgd61@syntax-dispatch bg12e4@t '(_ #(each (any any)) any . each-any)))) bg12e2@stx)))) (set! bgd2b@trace-let-syntax-macro (bgd29@trace-let/rec-syntax 'let-syntax)) (set! bgd2d@trace-letrec-syntax-macro (bgd29@trace-let/rec-syntax 'letrec-syntax)) (set! bgd2f@guard-macro (lambda (bg12f6@x) ((lambda (bg12f9@gen-clauses) (begin (set! bg12f9@gen-clauses (lambda (bg1310@con bg1311@outerk bg1312@clause*) ((lambda (bg1317@f bg1319@f*) (begin (set! bg1317@f (lambda (bg1350@x bg1351@k) ((lambda (bg1354@t) ((lambda (bg1356@ls/false) (if bg1356@ls/false (apply (lambda (bg1358@e bg1359@p) ((lambda (bg135c@t) (list 'let (list (list bg135c@t bg1358@e)) (list 'if bg135c@t (list bg1359@p bg135c@t) bg1351@k))) (gensym))) bg1356@ls/false) ((lambda (bg135e@t) ((lambda (bg1360@ls/false) (if bg1360@ls/false (apply (lambda (bg1362@e) ((lambda (bg1364@t) (list 'let (list (list bg1364@t bg1362@e)) (list 'if bg1364@t bg1364@t bg1351@k))) (gensym))) bg1360@ls/false) ((lambda (bg1366@t) ((lambda (bg1368@ls/false) (if bg1368@ls/false (apply (lambda (bg136a@e bg136b@v bg136c@v*) (list 'if bg136a@e (cons 'begin (cons bg136b@v bg136c@v*)) bg1351@k)) bg1368@ls/false) ((lambda (bg1370@t) ((lambda (bg1372@ls/false) (if bg1372@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid guard clause" bg1350@x)) bg1372@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1370@t))) (bgd61@syntax-dispatch bg1370@t '_))) bg1366@t))) (bgd61@syntax-dispatch bg1366@t '(any any . each-any)))) bg135e@t))) (bgd61@syntax-dispatch bg135e@t '(any)))) bg1354@t))) (bgd61@syntax-dispatch bg1354@t '(any #(scheme-id =>) any)))) bg1350@x))) (set! bg1319@f* (lambda (bg1326@x*) ((lambda (bg1328@t) ((lambda (bg132a@ls/false) (if bg132a@ls/false (apply (lambda () ((lambda (bg132c@g) (values (list bg132c@g (list 'lambda '() (list 'raise-continuable bg1310@con))) bg132c@g)) (gensym))) bg132a@ls/false) ((lambda (bg132e@t) ((lambda (bg1330@ls/false) (if bg1330@ls/false (apply (lambda (bg1332@e bg1333@e*) (values (cons 'begin (cons bg1332@e bg1333@e*)) '#f)) bg1330@ls/false) ((lambda (bg1336@t) ((lambda (bg1338@ls/false) (if bg1338@ls/false (apply (lambda (bg133a@cls bg133b@cls*) (call-with-values (lambda () (bg1319@f* bg133b@cls*)) (lambda (bg1342@bg133f bg1343@bg1341) ((lambda (bg1346@g bg1347@e) (values (bg1317@f bg133a@cls bg1347@e) bg1346@g)) bg1343@bg1341 bg1342@bg133f)))) bg1338@ls/false) ((lambda (bg134a@t) ((lambda (bg134c@ls/false) (if bg134c@ls/false (apply (lambda (bg134e@others) (bge41@syntax-violation '#f '"invalid guard clause" bg134e@others)) bg134c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg134a@t))) (bgd61@syntax-dispatch bg134a@t 'any))) bg1336@t))) (bgd61@syntax-dispatch bg1336@t '(any . any)))) bg132e@t))) (bgd61@syntax-dispatch bg132e@t '((#(scheme-id else) any . each-any))))) bg1328@t))) (bgd61@syntax-dispatch bg1328@t '()))) bg1326@x*))) (call-with-values (lambda () (bg1319@f* bg1312@clause*)) (lambda (bg131e@bg131b bg131f@bg131d) ((lambda (bg1322@raisek bg1323@code) (if bg1322@raisek (list (list 'call/cc (list 'lambda (list bg1322@raisek) (list bg1311@outerk (list 'lambda '() bg1323@code))))) (list bg1311@outerk (list 'lambda '() bg1323@code)))) bg131f@bg131d bg131e@bg131b))))) '#f '#f))) ((lambda (bg12fa@t) ((lambda (bg12fc@ls/false) (if (and bg12fc@ls/false (apply (lambda (bg12fe@con bg12ff@clause* bg1300@b bg1301@b*) (bgb5c@id? bg12fe@con)) bg12fc@ls/false)) (apply (lambda (bg1306@con bg1307@clause* bg1308@b bg1309@b*) ((lambda (bg130e@outerk) (bgd17@bless (list (list 'call/cc (list 'lambda (list bg130e@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bg1306@con) (bg12f9@gen-clauses bg1306@con bg130e@outerk bg1307@clause*)) (cons 'lambda (cons '() (cons bg1308@b bg1309@b*)))))))))) (gensym))) bg12fc@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg12fa@t))) (bgd61@syntax-dispatch bg12fa@t '(_ (any . each-any) any . each-any)))) bg12f6@x))) '#f))) (set! bgd31@define-enumeration-macro (lambda (bg1374@stx) ((lambda (bg1377@set? bg1379@remove-dups) (begin (set! bg1377@set? (lambda (bg1390@x) (or (null? bg1390@x) (and (not (memq (car bg1390@x) (cdr bg1390@x))) (bg1377@set? (cdr bg1390@x)))))) (set! bg1379@remove-dups (lambda (bg138e@ls) (if (null? bg138e@ls) '() (cons (car bg138e@ls) (bg1379@remove-dups (remq (car bg138e@ls) (cdr bg138e@ls))))))) ((lambda (bg137a@t) ((lambda (bg137c@ls/false) (if (and bg137c@ls/false (apply (lambda (bg137e@name bg137f@id* bg1380@maker) (and (bgb5c@id? bg137e@name) (bgb5c@id? bg1380@maker) (for-all bgb5c@id? bg137f@id*))) bg137c@ls/false)) (apply (lambda (bg1384@name bg1385@id* bg1386@maker) ((lambda (bg138a@name* bg138b@mk) (bgd17@bless (list 'begin (list 'define bg138b@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bg138a@name*)))) (list 'define-syntax bg1384@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bg138a@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bg1384@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bg1386@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bg1386@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bg138a@name*)) (cons 'syntax-violation (cons (list 'quote bg1386@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bg138b@mk '('(n* ...)))))))))))) (bg1379@remove-dups (bge47@syntax->datum bg1385@id*)) (gensym))) bg137c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg137a@t))) (bgd61@syntax-dispatch bg137a@t '(_ any each-any any)))) bg1374@stx))) '#f '#f))) (set! bgd33@time-macro (lambda (bg1392@stx) ((lambda (bg1394@t) ((lambda (bg1396@ls/false) (if bg1396@ls/false (apply (lambda (bg1398@expr) (bgd17@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bg1398@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bg1396@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1394@t))) (bgd61@syntax-dispatch bg1394@t '(_ any)))) bg1392@stx))) (set! bgd35@delay-macro (lambda (bg139a@stx) ((lambda (bg139c@t) ((lambda (bg139e@ls/false) (if bg139e@ls/false (apply (lambda (bg13a0@expr) (bgd17@bless (list 'make-promise (list 'lambda '() bg13a0@expr)))) bg139e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg139c@t))) (bgd61@syntax-dispatch bg139c@t '(_ any)))) bg139a@stx))) (set! bgd37@assert-macro (lambda (bg13a2@stx) ((lambda (bg13a4@t) ((lambda (bg13a6@ls/false) (if bg13a6@ls/false (apply (lambda (bg13a8@expr) ((lambda (bg13aa@pos) (bgd17@bless (list 'unless bg13a8@expr (list 'assertion-error (list 'quote bg13a8@expr) (list 'quote bg13aa@pos))))) (or (bge39@expression-position bg13a2@stx) (bge39@expression-position bg13a8@expr)))) bg13a6@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg13a4@t))) (bgd61@syntax-dispatch bg13a4@t '(_ any)))) bg13a2@stx))) (set! bgd39@endianness-macro (lambda (bg13ac@stx) ((lambda (bg13ae@t) ((lambda (bg13b0@ls/false) (if bg13b0@ls/false (apply (lambda (bg13b2@e) ((lambda (bg13b4@t) (if (memv bg13b4@t '(little)) (bgd17@bless ''little) (if (memv bg13b4@t '(big)) (bgd17@bless ''big) (bge41@syntax-violation '#f '"endianness must be big or little" bg13ac@stx)))) (bge47@syntax->datum bg13b2@e))) bg13b0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg13ae@t))) (bgd61@syntax-dispatch bg13ae@t '(_ any)))) bg13ac@stx))) (set! bgd3b@identifier-syntax-macro (lambda (bg13b6@stx) ((lambda (bg13b8@t) ((lambda (bg13ba@ls/false) (if bg13ba@ls/false (apply (lambda (bg13bc@expr) (bgd17@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bg13bc@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bg13bc@expr) '((syntax (e* ...)))))))))) bg13ba@ls/false) ((lambda (bg13be@t) ((lambda (bg13c0@ls/false) (if (and bg13c0@ls/false (apply (lambda (bg13c2@id1 bg13c3@expr1 bg13c4@id2 bg13c5@expr2 bg13c6@expr3) (and (bgb5c@id? bg13c2@id1) (bgb5c@id? bg13c4@id2) (bgb5c@id? bg13c5@expr2))) bg13c0@ls/false)) (apply (lambda (bg13cc@id1 bg13cd@expr1 bg13ce@id2 bg13cf@expr2 bg13d0@expr3) (bgd17@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bg13cd@expr1)) (list (list 'set! 'id bg13cf@expr2) (list 'syntax bg13d0@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bg13cd@expr1 '(e* ...))))))))) bg13c0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg13be@t))) (bgd61@syntax-dispatch bg13be@t '(_ (any any) ((#(scheme-id set!) any any) any))))) bg13b8@t))) (bgd61@syntax-dispatch bg13b8@t '(_ any)))) bg13b6@stx))) (set! bgd3d@do-macro (lambda (bg13d6@stx) ((lambda (bg13d9@bind) (begin (set! bg13d9@bind (lambda (bg13f0@x) ((lambda (bg13f2@t) ((lambda (bg13f4@ls/false) (if bg13f4@ls/false (apply (lambda (bg13f6@x bg13f7@init) (list bg13f6@x bg13f7@init bg13f6@x)) bg13f4@ls/false) ((lambda (bg13fa@t) ((lambda (bg13fc@ls/false) (if bg13fc@ls/false (apply (lambda (bg13fe@x bg13ff@init bg1400@step) (list bg13fe@x bg13ff@init bg1400@step)) bg13fc@ls/false) ((lambda (bg1404@t) ((lambda (bg1406@ls/false) (if bg1406@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid binding" bg13d6@stx)) bg1406@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1404@t))) (bgd61@syntax-dispatch bg1404@t '_))) bg13fa@t))) (bgd61@syntax-dispatch bg13fa@t '(any any any)))) bg13f2@t))) (bgd61@syntax-dispatch bg13f2@t '(any any)))) bg13f0@x))) ((lambda (bg13da@t) ((lambda (bg13dc@ls/false) (if bg13dc@ls/false (apply (lambda (bg13de@binding* bg13df@test bg13e0@expr* bg13e1@command*) ((lambda (bg13e6@t) ((lambda (bg13e8@ls/false) (if bg13e8@ls/false (apply (lambda (bg13ea@x* bg13eb@init* bg13ec@step*) (if (bgb64@valid-bound-ids? bg13ea@x*) (bgd17@bless (list 'letrec (list (list 'loop (list 'lambda bg13ea@x* (list 'if bg13df@test (cons 'begin (cons '(if #f #f) bg13e0@expr*)) (cons 'begin (append bg13e1@command* (list (cons 'loop bg13ec@step*)))))))) (cons 'loop bg13eb@init*))) (bge41@syntax-violation '#f '"invalid bindings" bg13d6@stx))) bg13e8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg13e6@t))) (bgd61@syntax-dispatch bg13e6@t '#(each (any any any))))) (map bg13d9@bind bg13de@binding*))) bg13dc@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg13da@t))) (bgd61@syntax-dispatch bg13da@t '(_ each-any (any . each-any) . each-any)))) bg13d6@stx))) '#f))) (set! bgd3f@let*-macro (lambda (bg1408@stx) ((lambda (bg140a@t) ((lambda (bg140c@ls/false) (if (and bg140c@ls/false (apply (lambda (bg140e@lhs* bg140f@rhs* bg1410@b bg1411@b*) (for-all bgb5c@id? bg140e@lhs*)) bg140c@ls/false)) (apply (lambda (bg1416@lhs* bg1417@rhs* bg1418@b bg1419@b*) (bgd17@bless ((letrec ((bg141e@f (lambda (bg1420@x*) (if (null? bg1420@x*) (cons 'let (cons '() (cons bg1418@b bg1419@b*))) (list 'let (list (car bg1420@x*)) (bg141e@f (cdr bg1420@x*))))))) bg141e@f) (map list bg1416@lhs* bg1417@rhs*)))) bg140c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg140a@t))) (bgd61@syntax-dispatch bg140a@t '(_ #(each (any any)) any . each-any)))) bg1408@stx))) (set! bgd41@or-macro (lambda (bg1422@stx) ((lambda (bg1424@t) ((lambda (bg1426@ls/false) (if bg1426@ls/false (apply (lambda () '#f) bg1426@ls/false) ((lambda (bg1428@t) ((lambda (bg142a@ls/false) (if bg142a@ls/false (apply (lambda (bg142c@e bg142d@e*) (bgd17@bless ((letrec ((bg1430@f (lambda (bg1432@e bg1433@e*) (if (null? bg1433@e*) (list 'begin '#f bg1432@e) (list 'let (list (list 't bg1432@e)) (list 'if 't 't (bg1430@f (car bg1433@e*) (cdr bg1433@e*)))))))) bg1430@f) bg142c@e bg142d@e*))) bg142a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1428@t))) (bgd61@syntax-dispatch bg1428@t '(_ any . each-any)))) bg1424@t))) (bgd61@syntax-dispatch bg1424@t '(_)))) bg1422@stx))) (set! bgd43@and-macro (lambda (bg1436@stx) ((lambda (bg1438@t) ((lambda (bg143a@ls/false) (if bg143a@ls/false (apply (lambda () '#t) bg143a@ls/false) ((lambda (bg143c@t) ((lambda (bg143e@ls/false) (if bg143e@ls/false (apply (lambda (bg1440@e bg1441@e*) (bgd17@bless ((letrec ((bg1444@f (lambda (bg1446@e bg1447@e*) (if (null? bg1447@e*) (list 'begin '#f bg1446@e) (cons 'if (cons bg1446@e (cons (bg1444@f (car bg1447@e*) (cdr bg1447@e*)) '(#f)))))))) bg1444@f) bg1440@e bg1441@e*))) bg143e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg143c@t))) (bgd61@syntax-dispatch bg143c@t '(_ any . each-any)))) bg1438@t))) (bgd61@syntax-dispatch bg1438@t '(_)))) bg1436@stx))) (set! bgd45@cond-macro (lambda (bg144a@stx) ((lambda (bg144c@t) ((lambda (bg144e@ls/false) (if bg144e@ls/false (apply (lambda (bg1450@cls bg1451@cls*) (bgd17@bless ((letrec ((bg1454@f (lambda (bg1456@cls bg1457@cls*) (if (null? bg1457@cls*) ((lambda (bg145a@t) ((lambda (bg145c@ls/false) (if bg145c@ls/false (apply (lambda (bg145e@e bg145f@e*) (cons 'begin (cons bg145e@e bg145f@e*))) bg145c@ls/false) ((lambda (bg1462@t) ((lambda (bg1464@ls/false) (if bg1464@ls/false (apply (lambda (bg1466@e bg1467@p) (list 'let (list (list 't bg1466@e)) (list 'if 't (cons bg1467@p '(t))))) bg1464@ls/false) ((lambda (bg146a@t) ((lambda (bg146c@ls/false) (if bg146c@ls/false (apply (lambda (bg146e@e) (cons 'or (cons bg146e@e '((if #f #f))))) bg146c@ls/false) ((lambda (bg1470@t) ((lambda (bg1472@ls/false) (if bg1472@ls/false (apply (lambda (bg1474@e bg1475@e*) (list 'if bg1474@e (cons 'begin bg1475@e*))) bg1472@ls/false) ((lambda (bg1478@t) ((lambda (bg147a@ls/false) (if bg147a@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid last clause" bg144a@stx)) bg147a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1478@t))) (bgd61@syntax-dispatch bg1478@t '_))) bg1470@t))) (bgd61@syntax-dispatch bg1470@t '(any . each-any)))) bg146a@t))) (bgd61@syntax-dispatch bg146a@t '(any)))) bg1462@t))) (bgd61@syntax-dispatch bg1462@t '(any #(scheme-id =>) any)))) bg145a@t))) (bgd61@syntax-dispatch bg145a@t '(#(scheme-id else) any . each-any)))) bg1456@cls) ((lambda (bg147c@t) ((lambda (bg147e@ls/false) (if bg147e@ls/false (apply (lambda (bg1480@e bg1481@e*) (bge41@syntax-violation '#f '"incorrect position of keyword else" bg144a@stx)) bg147e@ls/false) ((lambda (bg1484@t) ((lambda (bg1486@ls/false) (if bg1486@ls/false (apply (lambda (bg1488@e bg1489@p) (list 'let (list (list 't bg1488@e)) (list 'if 't (cons bg1489@p '(t)) (bg1454@f (car bg1457@cls*) (cdr bg1457@cls*))))) bg1486@ls/false) ((lambda (bg148c@t) ((lambda (bg148e@ls/false) (if bg148e@ls/false (apply (lambda (bg1490@e) (list 'or bg1490@e (bg1454@f (car bg1457@cls*) (cdr bg1457@cls*)))) bg148e@ls/false) ((lambda (bg1492@t) ((lambda (bg1494@ls/false) (if bg1494@ls/false (apply (lambda (bg1496@e bg1497@e*) (list 'if bg1496@e (cons 'begin bg1497@e*) (bg1454@f (car bg1457@cls*) (cdr bg1457@cls*)))) bg1494@ls/false) ((lambda (bg149a@t) ((lambda (bg149c@ls/false) (if bg149c@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid last clause" bg144a@stx)) bg149c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg149a@t))) (bgd61@syntax-dispatch bg149a@t '_))) bg1492@t))) (bgd61@syntax-dispatch bg1492@t '(any . each-any)))) bg148c@t))) (bgd61@syntax-dispatch bg148c@t '(any)))) bg1484@t))) (bgd61@syntax-dispatch bg1484@t '(any #(scheme-id =>) any)))) bg147c@t))) (bgd61@syntax-dispatch bg147c@t '(#(scheme-id else) any . each-any)))) bg1456@cls))))) bg1454@f) bg1450@cls bg1451@cls*))) bg144e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg144c@t))) (bgd61@syntax-dispatch bg144c@t '(_ any . each-any)))) bg144a@stx))) (set! bgd47@do-include (lambda (bg149e@stx bg149f@id bg14a0@filename) ((lambda (bg14a4@filename) (begin (if (not (and (string? bg14a4@filename) (bgb5c@id? bg149f@id))) (bge41@syntax-violation '#f '"invalid syntax" bg149e@stx) (void)) (cons (bgd17@bless 'begin) (with-input-from-file bg14a4@filename (lambda () ((letrec ((bg14a6@f (lambda (bg14a8@ls) ((lambda (bg14aa@x) (if (eof-object? bg14aa@x) (reverse bg14a8@ls) (bg14a6@f (cons (bgb3c@datum->stx bg149f@id bg14aa@x) bg14a8@ls)))) (bg6ae@bg580@read-annotated))))) bg14a6@f) '())))))) (bgb70@stx->datum bg14a0@filename)))) (set! bgd49@include-macro (lambda (bg14ac@e) ((lambda (bg14ae@t) ((lambda (bg14b0@ls/false) (if bg14b0@ls/false (apply (lambda (bg14b2@id bg14b3@filename) (bgd47@do-include bg14ac@e bg14b2@id bg14b3@filename)) bg14b0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg14ae@t))) (bgd61@syntax-dispatch bg14ae@t '(any any)))) bg14ac@e))) (set! bgd4b@include-into-macro (lambda (bg14b6@e) ((lambda (bg14b8@t) ((lambda (bg14ba@ls/false) (if bg14ba@ls/false (apply (lambda (bg14bc@id bg14bd@filename) (bgd47@do-include bg14b6@e bg14bc@id bg14bd@filename)) bg14ba@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg14b8@t))) (bgd61@syntax-dispatch bg14b8@t '(_ any any)))) bg14b6@e))) (set! bgd4d@syntax-rules-macro (lambda (bg14c0@e) ((lambda (bg14c2@t) ((lambda (bg14c4@ls/false) (if bg14c4@ls/false (apply (lambda (bg14c6@lits bg14c7@pat* bg14c8@tmp*) (begin (bgd67@verify-literals bg14c6@lits bg14c0@e) (bgd17@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bg14c6@lits (map (lambda (bg14cc@pat bg14cd@tmp) ((lambda (bg14d0@t) ((lambda (bg14d2@ls/false) (if bg14d2@ls/false (apply (lambda (bg14d4@rest) (list (cons 'g bg14d4@rest) (list 'syntax bg14cd@tmp))) bg14d2@ls/false) ((lambda (bg14d6@t) ((lambda (bg14d8@ls/false) (if bg14d8@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid syntax-rules pattern" bg14c0@e bg14cc@pat)) bg14d8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg14d6@t))) (bgd61@syntax-dispatch bg14d6@t '_))) bg14d0@t))) (bgd61@syntax-dispatch bg14d0@t '(_ . any)))) bg14cc@pat)) bg14c7@pat* bg14c8@tmp*)))))))) bg14c4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg14c2@t))) (bgd61@syntax-dispatch bg14c2@t '(_ each-any . #(each (any any)))))) bg14c0@e))) (set! bgd4f@quasiquote-macro ((lambda () ((lambda (bg14db@datum bg14f7@quasicons* bg14f9@quasicons bg14fb@quasiappend bg14fd@quasivector bg14ff@vquasi bg1501@quasi) (begin (set! bg14db@datum (lambda (bg15dc@x) (list (bgceb@scheme-stx 'quote) (bgb44@mkstx bg15dc@x '() '() '())))) (set! bg14f7@quasicons* (lambda (bg15d4@x bg15d5@y) ((letrec ((bg15d8@f (lambda (bg15da@x) (if (null? bg15da@x) bg15d5@y (bg14f9@quasicons (car bg15da@x) (bg15d8@f (cdr bg15da@x))))))) bg15d8@f) bg15d4@x))) (set! bg14f9@quasicons (lambda (bg15ae@x bg15af@y) ((lambda (bg15b2@t) ((lambda (bg15b4@ls/false) (if bg15b4@ls/false (apply (lambda (bg15b6@dy) ((lambda (bg15b8@t) ((lambda (bg15ba@ls/false) (if bg15ba@ls/false (apply (lambda (bg15bc@dx) (list (bgceb@scheme-stx 'quote) (cons bg15bc@dx bg15b6@dy))) bg15ba@ls/false) ((lambda (bg15be@t) ((lambda (bg15c0@ls/false) (if bg15c0@ls/false (apply (lambda () ((lambda (bg15c2@t) ((lambda (bg15c4@ls/false) (if bg15c4@ls/false (apply (lambda () (list (bgceb@scheme-stx 'list) bg15ae@x)) bg15c4@ls/false) ((lambda (bg15c6@t) ((lambda (bg15c8@ls/false) (if bg15c8@ls/false (apply (lambda () (list (bgceb@scheme-stx 'cons) bg15ae@x bg15af@y)) bg15c8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg15c6@t))) (bgd61@syntax-dispatch bg15c6@t '_))) bg15c2@t))) (bgd61@syntax-dispatch bg15c2@t '()))) bg15b6@dy)) bg15c0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg15be@t))) (bgd61@syntax-dispatch bg15be@t '_))) bg15b8@t))) (bgd61@syntax-dispatch bg15b8@t '(#(scheme-id quote) any)))) bg15ae@x)) bg15b4@ls/false) ((lambda (bg15ca@t) ((lambda (bg15cc@ls/false) (if bg15cc@ls/false (apply (lambda (bg15ce@stuff) (cons* (bgceb@scheme-stx 'list) bg15ae@x bg15ce@stuff)) bg15cc@ls/false) ((lambda (bg15d0@t) ((lambda (bg15d2@ls/false) (if bg15d2@ls/false (apply (lambda () (list (bgceb@scheme-stx 'cons) bg15ae@x bg15af@y)) bg15d2@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg15d0@t))) (bgd61@syntax-dispatch bg15d0@t '_))) bg15ca@t))) (bgd61@syntax-dispatch bg15ca@t '(#(scheme-id list) . each-any)))) bg15b2@t))) (bgd61@syntax-dispatch bg15b2@t '(#(scheme-id quote) any)))) bg15af@y))) (set! bg14fb@quasiappend (lambda (bg1594@x bg1595@y) ((lambda (bg1598@ls) (if (null? bg1598@ls) (list (bgceb@scheme-stx 'quote) '()) (if (null? (cdr bg1598@ls)) (car bg1598@ls) (cons* (bgceb@scheme-stx 'append) bg1598@ls)))) ((letrec ((bg159a@f (lambda (bg159c@x) (if (null? bg159c@x) ((lambda (bg159e@t) ((lambda (bg15a0@ls/false) (if bg15a0@ls/false (apply (lambda () '()) bg15a0@ls/false) ((lambda (bg15a2@t) ((lambda (bg15a4@ls/false) (if bg15a4@ls/false (apply (lambda () (list bg1595@y)) bg15a4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg15a2@t))) (bgd61@syntax-dispatch bg15a2@t '_))) bg159e@t))) (bgd61@syntax-dispatch bg159e@t '(#(scheme-id quote) ())))) bg1595@y) ((lambda (bg15a6@t) ((lambda (bg15a8@ls/false) (if bg15a8@ls/false (apply (lambda () (bg159a@f (cdr bg159c@x))) bg15a8@ls/false) ((lambda (bg15aa@t) ((lambda (bg15ac@ls/false) (if bg15ac@ls/false (apply (lambda () (cons (car bg159c@x) (bg159a@f (cdr bg159c@x)))) bg15ac@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg15aa@t))) (bgd61@syntax-dispatch bg15aa@t '_))) bg15a6@t))) (bgd61@syntax-dispatch bg15a6@t '(#(scheme-id quote) ())))) (car bg159c@x)))))) bg159a@f) bg1594@x)))) (set! bg14fd@quasivector (lambda (bg1562@x) ((lambda (bg1564@pat-x) ((lambda (bg1566@t) ((lambda (bg1568@ls/false) (if bg1568@ls/false (apply (lambda (bg156a@x*) (list (bgceb@scheme-stx 'quote) (list->vector bg156a@x*))) bg1568@ls/false) ((lambda (bg156c@t) ((lambda (bg156e@ls/false) (if bg156e@ls/false (apply (lambda () ((letrec ((bg1570@f (lambda (bg1572@x bg1573@k) ((lambda (bg1576@t) ((lambda (bg1578@ls/false) (if bg1578@ls/false (apply (lambda (bg157a@x*) (bg1573@k (map (lambda (bg157c@x) (list (bgceb@scheme-stx 'quote) bg157c@x)) bg157a@x*))) bg1578@ls/false) ((lambda (bg157e@t) ((lambda (bg1580@ls/false) (if bg1580@ls/false (apply (lambda (bg1582@x*) (bg1573@k bg1582@x*)) bg1580@ls/false) ((lambda (bg1584@t) ((lambda (bg1586@ls/false) (if bg1586@ls/false (apply (lambda (bg1588@x bg1589@y) (bg1570@f bg1589@y (lambda (bg158c@ls) (bg1573@k (cons bg1588@x bg158c@ls))))) bg1586@ls/false) ((lambda (bg158e@t) ((lambda (bg1590@ls/false) (if bg1590@ls/false (apply (lambda () (list (bgceb@scheme-stx 'list->vector) bg1564@pat-x)) bg1590@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg158e@t))) (bgd61@syntax-dispatch bg158e@t '_))) bg1584@t))) (bgd61@syntax-dispatch bg1584@t '(#(scheme-id cons) any any)))) bg157e@t))) (bgd61@syntax-dispatch bg157e@t '(#(scheme-id list) . each-any)))) bg1576@t))) (bgd61@syntax-dispatch bg1576@t '(#(scheme-id quote) each-any)))) bg1572@x)))) bg1570@f) bg1562@x (lambda (bg1592@ls) (cons* (bgceb@scheme-stx 'vector) bg1592@ls)))) bg156e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg156c@t))) (bgd61@syntax-dispatch bg156c@t '_))) bg1566@t))) (bgd61@syntax-dispatch bg1566@t '(#(scheme-id quote) each-any)))) bg1564@pat-x)) bg1562@x))) (set! bg14ff@vquasi (lambda (bg1540@p bg1541@lev) ((lambda (bg1544@t) ((lambda (bg1546@ls/false) (if bg1546@ls/false (apply (lambda (bg1548@p bg1549@q) ((lambda (bg154c@t) ((lambda (bg154e@ls/false) (if bg154e@ls/false (apply (lambda (bg1550@p) (if (= bg1541@lev '0) (bg14f7@quasicons* bg1550@p (bg14ff@vquasi bg1549@q bg1541@lev)) (bg14f9@quasicons (bg14f9@quasicons (bg14db@datum 'unquote) (bg1501@quasi bg1550@p (- bg1541@lev '1))) (bg14ff@vquasi bg1549@q bg1541@lev)))) bg154e@ls/false) ((lambda (bg1552@t) ((lambda (bg1554@ls/false) (if bg1554@ls/false (apply (lambda (bg1556@p) (if (= bg1541@lev '0) (bg14fb@quasiappend bg1556@p (bg14ff@vquasi bg1549@q bg1541@lev)) (bg14f9@quasicons (bg14f9@quasicons (bg14db@datum 'unquote-splicing) (bg1501@quasi bg1556@p (- bg1541@lev '1))) (bg14ff@vquasi bg1549@q bg1541@lev)))) bg1554@ls/false) ((lambda (bg1558@t) ((lambda (bg155a@ls/false) (if bg155a@ls/false (apply (lambda (bg155c@p) (bg14f9@quasicons (bg1501@quasi bg155c@p bg1541@lev) (bg14ff@vquasi bg1549@q bg1541@lev))) bg155a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1558@t))) (bgd61@syntax-dispatch bg1558@t 'any))) bg1552@t))) (bgd61@syntax-dispatch bg1552@t '(#(scheme-id unquote-splicing) . each-any)))) bg154c@t))) (bgd61@syntax-dispatch bg154c@t '(#(scheme-id unquote) . each-any)))) bg1548@p)) bg1546@ls/false) ((lambda (bg155e@t) ((lambda (bg1560@ls/false) (if bg1560@ls/false (apply (lambda () (list (bgceb@scheme-stx 'quote) '())) bg1560@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg155e@t))) (bgd61@syntax-dispatch bg155e@t '()))) bg1544@t))) (bgd61@syntax-dispatch bg1544@t '(any . any)))) bg1540@p))) (set! bg1501@quasi (lambda (bg150a@p bg150b@lev) ((lambda (bg150e@t) ((lambda (bg1510@ls/false) (if bg1510@ls/false (apply (lambda (bg1512@p) (if (= bg150b@lev '0) bg1512@p (bg14f9@quasicons (bg14db@datum 'unquote) (bg1501@quasi (list bg1512@p) (- bg150b@lev '1))))) bg1510@ls/false) ((lambda (bg1514@t) ((lambda (bg1516@ls/false) (if bg1516@ls/false (apply (lambda (bg1518@p bg1519@q) (if (= bg150b@lev '0) (bg14f7@quasicons* bg1518@p (bg1501@quasi bg1519@q bg150b@lev)) (bg14f9@quasicons (bg14f9@quasicons (bg14db@datum 'unquote) (bg1501@quasi bg1518@p (- bg150b@lev '1))) (bg1501@quasi bg1519@q bg150b@lev)))) bg1516@ls/false) ((lambda (bg151c@t) ((lambda (bg151e@ls/false) (if bg151e@ls/false (apply (lambda (bg1520@p bg1521@q) (if (= bg150b@lev '0) (bg14fb@quasiappend bg1520@p (bg1501@quasi bg1521@q bg150b@lev)) (bg14f9@quasicons (bg14f9@quasicons (bg14db@datum 'unquote-splicing) (bg1501@quasi bg1520@p (- bg150b@lev '1))) (bg1501@quasi bg1521@q bg150b@lev)))) bg151e@ls/false) ((lambda (bg1524@t) ((lambda (bg1526@ls/false) (if bg1526@ls/false (apply (lambda (bg1528@p) (bg14f9@quasicons (bg14db@datum 'quasiquote) (bg1501@quasi (list bg1528@p) (+ bg150b@lev '1)))) bg1526@ls/false) ((lambda (bg152a@t) ((lambda (bg152c@ls/false) (if bg152c@ls/false (apply (lambda (bg152e@p bg152f@q) (bg14f9@quasicons (bg1501@quasi bg152e@p bg150b@lev) (bg1501@quasi bg152f@q bg150b@lev))) bg152c@ls/false) ((lambda (bg1532@t) ((lambda (bg1534@ls/false) (if (and bg1534@ls/false (apply (lambda (bg1536@x) (not (bgb28@stx? bg1536@x))) bg1534@ls/false)) (apply (lambda (bg1538@x) (bg14fd@quasivector (bg14ff@vquasi bg1538@x bg150b@lev))) bg1534@ls/false) ((lambda (bg153a@t) ((lambda (bg153c@ls/false) (if bg153c@ls/false (apply (lambda (bg153e@p) (list (bgceb@scheme-stx 'quote) bg153e@p)) bg153c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg153a@t))) (bgd61@syntax-dispatch bg153a@t 'any))) bg1532@t))) (bgd61@syntax-dispatch bg1532@t '#(vector each-any)))) bg152a@t))) (bgd61@syntax-dispatch bg152a@t '(any . any)))) bg1524@t))) (bgd61@syntax-dispatch bg1524@t '(#(scheme-id quasiquote) any)))) bg151c@t))) (bgd61@syntax-dispatch bg151c@t '((#(scheme-id unquote-splicing) . each-any) . any)))) bg1514@t))) (bgd61@syntax-dispatch bg1514@t '((#(scheme-id unquote) . each-any) . any)))) bg150e@t))) (bgd61@syntax-dispatch bg150e@t '(#(scheme-id unquote) any)))) bg150a@p))) (lambda (bg1502@x) ((lambda (bg1504@t) ((lambda (bg1506@ls/false) (if bg1506@ls/false (apply (lambda (bg1508@e) (bg1501@quasi bg1508@e '0)) bg1506@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1504@t))) (bgd61@syntax-dispatch bg1504@t '(_ any)))) bg1502@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! bgd51@quasisyntax-macro ((lambda () ((lambda (bg15df@quasi) (begin (set! bg15df@quasi (lambda (bg15fa@p bg15fb@lev) ((lambda (bg15fe@t) ((lambda (bg1600@ls/false) (if bg1600@ls/false (apply (lambda (bg1602@p) (if (= bg15fb@lev '0) ((lambda (bg1604@g) (values (list bg1604@g) (list bg1602@p) bg1604@g)) (gensym)) (call-with-values (lambda () (bg15df@quasi bg1602@p (- bg15fb@lev '1))) (lambda (bg160c@bg1607 bg160d@bg1609 bg160e@bg160b) ((lambda (bg1612@p bg1613@rhs* bg1614@lhs*) (values bg1614@lhs* bg1613@rhs* (list 'unsyntax bg1612@p))) bg160e@bg160b bg160d@bg1609 bg160c@bg1607))))) bg1600@ls/false) ((lambda (bg1618@t) ((lambda (bg161a@ls/false) (if (and bg161a@ls/false (apply (lambda () (= bg15fb@lev '0)) bg161a@ls/false)) (apply (lambda () (bge41@syntax-violation '#f '"incorrect use of unsyntax" bg15fa@p)) bg161a@ls/false) ((lambda (bg161c@t) ((lambda (bg161e@ls/false) (if bg161e@ls/false (apply (lambda (bg1620@p* bg1621@q) (call-with-values (lambda () (bg15df@quasi bg1621@q bg15fb@lev)) (lambda (bg162a@bg1625 bg162b@bg1627 bg162c@bg1629) ((lambda (bg1630@q bg1631@rhs* bg1632@lhs*) (if (= bg15fb@lev '0) ((lambda (bg1636@g*) (values (append bg1636@g* bg1632@lhs*) (append bg1620@p* bg1631@rhs*) (append bg1636@g* bg1630@q))) (map (lambda (bg1638@x) (gensym)) bg1620@p*)) (call-with-values (lambda () (bg15df@quasi bg1620@p* (- bg15fb@lev '1))) (lambda (bg1640@bg163b bg1641@bg163d bg1642@bg163f) ((lambda (bg1646@p* bg1647@rhs2* bg1648@lhs2*) (values (append bg1648@lhs2* bg1632@lhs*) (append bg1647@rhs2* bg1631@rhs*) (cons (cons 'unsyntax bg1646@p*) bg1630@q))) bg1642@bg163f bg1641@bg163d bg1640@bg163b))))) bg162c@bg1629 bg162b@bg1627 bg162a@bg1625)))) bg161e@ls/false) ((lambda (bg164c@t) ((lambda (bg164e@ls/false) (if bg164e@ls/false (apply (lambda (bg1650@p* bg1651@q) (call-with-values (lambda () (bg15df@quasi bg1651@q bg15fb@lev)) (lambda (bg165a@bg1655 bg165b@bg1657 bg165c@bg1659) ((lambda (bg1660@q bg1661@rhs* bg1662@lhs*) (if (= bg15fb@lev '0) ((lambda (bg1666@g*) (values (append (map (lambda (bg1668@g) (cons bg1668@g '(...))) bg1666@g*) bg1662@lhs*) (append bg1650@p* bg1661@rhs*) (append (apply append (map (lambda (bg166a@g) (cons bg166a@g '(...))) bg1666@g*)) bg1660@q))) (map (lambda (bg166c@x) (gensym)) bg1650@p*)) (call-with-values (lambda () (bg15df@quasi bg1650@p* (- bg15fb@lev '1))) (lambda (bg1674@bg166f bg1675@bg1671 bg1676@bg1673) ((lambda (bg167a@p* bg167b@rhs2* bg167c@lhs2*) (values (append bg167c@lhs2* bg1662@lhs*) (append bg167b@rhs2* bg1661@rhs*) (cons (cons 'unsyntax-splicing bg167a@p*) bg1660@q))) bg1676@bg1673 bg1675@bg1671 bg1674@bg166f))))) bg165c@bg1659 bg165b@bg1657 bg165a@bg1655)))) bg164e@ls/false) ((lambda (bg1680@t) ((lambda (bg1682@ls/false) (if (and bg1682@ls/false (apply (lambda () (= bg15fb@lev '0)) bg1682@ls/false)) (apply (lambda () (bge41@syntax-violation '#f '"incorrect use of unsyntax-splicing" bg15fa@p)) bg1682@ls/false) ((lambda (bg1684@t) ((lambda (bg1686@ls/false) (if bg1686@ls/false (apply (lambda (bg1688@p) (call-with-values (lambda () (bg15df@quasi bg1688@p (+ bg15fb@lev '1))) (lambda (bg1690@bg168b bg1691@bg168d bg1692@bg168f) ((lambda (bg1696@p bg1697@rhs* bg1698@lhs*) (values bg1698@lhs* bg1697@rhs* (list 'quasisyntax bg1696@p))) bg1692@bg168f bg1691@bg168d bg1690@bg168b)))) bg1686@ls/false) ((lambda (bg169c@t) ((lambda (bg169e@ls/false) (if bg169e@ls/false (apply (lambda (bg16a0@p bg16a1@q) (call-with-values (lambda () (bg15df@quasi bg16a0@p bg15fb@lev)) (lambda (bg16b0@bg16a5 bg16b1@bg16a7 bg16b2@bg16a9) (call-with-values (lambda () (bg15df@quasi bg16a1@q bg15fb@lev)) (lambda (bg16b6@bg16ab bg16b7@bg16ad bg16b8@bg16af) ((lambda (bg16bc@q bg16bd@rhs2* bg16be@lhs2* bg16bf@p bg16c0@rhs* bg16c1@lhs*) (values (append bg16be@lhs2* bg16c1@lhs*) (append bg16bd@rhs2* bg16c0@rhs*) (cons bg16bf@p bg16bc@q))) bg16b8@bg16af bg16b7@bg16ad bg16b6@bg16ab bg16b2@bg16a9 bg16b1@bg16a7 bg16b0@bg16a5)))))) bg169e@ls/false) ((lambda (bg16c8@t) ((lambda (bg16ca@ls/false) (if bg16ca@ls/false (apply (lambda (bg16cc@x*) (call-with-values (lambda () (bg15df@quasi bg16cc@x* bg15fb@lev)) (lambda (bg16d4@bg16cf bg16d5@bg16d1 bg16d6@bg16d3) ((lambda (bg16da@x* bg16db@rhs* bg16dc@lhs*) (values bg16dc@lhs* bg16db@rhs* (list->vector bg16da@x*))) bg16d6@bg16d3 bg16d5@bg16d1 bg16d4@bg16cf)))) bg16ca@ls/false) ((lambda (bg16e0@t) ((lambda (bg16e2@ls/false) (if bg16e2@ls/false (apply (lambda () (values '() '() bg15fa@p)) bg16e2@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg16e0@t))) (bgd61@syntax-dispatch bg16e0@t '_))) bg16c8@t))) (bgd61@syntax-dispatch bg16c8@t '#(vector each-any)))) bg169c@t))) (bgd61@syntax-dispatch bg169c@t '(any . any)))) bg1684@t))) (bgd61@syntax-dispatch bg1684@t '(#(scheme-id quasisyntax) any)))) bg1680@t))) (bgd61@syntax-dispatch bg1680@t '#(scheme-id unsyntax-splicing)))) bg164c@t))) (bgd61@syntax-dispatch bg164c@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) bg161c@t))) (bgd61@syntax-dispatch bg161c@t '((#(scheme-id unsyntax) . each-any) . any)))) bg1618@t))) (bgd61@syntax-dispatch bg1618@t '#(scheme-id unsyntax)))) bg15fe@t))) (bgd61@syntax-dispatch bg15fe@t '(#(scheme-id unsyntax) any)))) bg15fa@p))) (lambda (bg15e0@x) ((lambda (bg15e2@t) ((lambda (bg15e4@ls/false) (if bg15e4@ls/false (apply (lambda (bg15e6@e) (call-with-values (lambda () (bg15df@quasi bg15e6@e '0)) (lambda (bg15ee@bg15e9 bg15ef@bg15eb bg15f0@bg15ed) ((lambda (bg15f4@v bg15f5@rhs* bg15f6@lhs*) (bgd17@bless (list 'syntax-case (cons 'list bg15f5@rhs*) '() (list bg15f6@lhs* (list 'syntax bg15f4@v))))) bg15f0@bg15ed bg15ef@bg15eb bg15ee@bg15e9)))) bg15e4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg15e2@t))) (bgd61@syntax-dispatch bg15e2@t '(_ any)))) bg15e0@x)))) '#f)))) (set! bgd53@define-struct-macro (lambda (bg16e4@stx) (bge41@syntax-violation '#f '"define-struct not supported" bg16e4@stx))) (set! bgd55@define-record-type-macro (lambda (bg16e6@x) ((lambda (bg16e9@id bg16eb@get-record-name bg16ed@get-record-constructor-name bg16ef@get-record-predicate-name bg16f1@get-clause bg16f3@foo-rtd-code bg16f5@parent-rtd-code bg16f7@parent-rcd-code bg16f9@foo-rcd-code bg16fb@get-protocol-code bg16fd@get-fields bg16ff@get-mutator-indices bg1701@get-mutators bg1703@get-accessors bg1705@enumerate bg1707@do-define-record bg1709@verify-clauses) (begin (set! bg16e9@id (lambda (bg18dc@ctxt . bg18de@str*) (bge45@datum->syntax bg18dc@ctxt (string->symbol (apply string-append (map (lambda (bg18e0@x) (if (symbol? bg18e0@x) (symbol->string bg18e0@x) (if (string? bg18e0@x) bg18e0@x (assertion-violation 'define-record-type '"BUG")))) bg18de@str*)))))) (set! bg16eb@get-record-name (lambda (bg18ca@spec) ((lambda (bg18cc@t) ((lambda (bg18ce@ls/false) (if bg18ce@ls/false (apply (lambda (bg18d0@foo bg18d1@make-foo bg18d2@foo?) bg18d0@foo) bg18ce@ls/false) ((lambda (bg18d6@t) ((lambda (bg18d8@ls/false) (if bg18d8@ls/false (apply (lambda (bg18da@foo) bg18da@foo) bg18d8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg18d6@t))) (bgd61@syntax-dispatch bg18d6@t 'any))) bg18cc@t))) (bgd61@syntax-dispatch bg18cc@t '(any any any)))) bg18ca@spec))) (set! bg16ed@get-record-constructor-name (lambda (bg18b6@spec) ((lambda (bg18b8@t) ((lambda (bg18ba@ls/false) (if bg18ba@ls/false (apply (lambda (bg18bc@foo bg18bd@make-foo bg18be@foo?) bg18bd@make-foo) bg18ba@ls/false) ((lambda (bg18c2@t) ((lambda (bg18c4@ls/false) (if (and bg18c4@ls/false (apply (lambda (bg18c6@foo) (bgb5c@id? bg18c6@foo)) bg18c4@ls/false)) (apply (lambda (bg18c8@foo) (bg16e9@id bg18c8@foo '"make-" (bgb70@stx->datum bg18c8@foo))) bg18c4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg18c2@t))) (bgd61@syntax-dispatch bg18c2@t 'any))) bg18b8@t))) (bgd61@syntax-dispatch bg18b8@t '(any any any)))) bg18b6@spec))) (set! bg16ef@get-record-predicate-name (lambda (bg18a2@spec) ((lambda (bg18a4@t) ((lambda (bg18a6@ls/false) (if bg18a6@ls/false (apply (lambda (bg18a8@foo bg18a9@make-foo bg18aa@foo?) bg18aa@foo?) bg18a6@ls/false) ((lambda (bg18ae@t) ((lambda (bg18b0@ls/false) (if (and bg18b0@ls/false (apply (lambda (bg18b2@foo) (bgb5c@id? bg18b2@foo)) bg18b0@ls/false)) (apply (lambda (bg18b4@foo) (bg16e9@id bg18b4@foo (bgb70@stx->datum bg18b4@foo) '"?")) bg18b0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg18ae@t))) (bgd61@syntax-dispatch bg18ae@t 'any))) bg18a4@t))) (bgd61@syntax-dispatch bg18a4@t '(any any any)))) bg18a2@spec))) (set! bg16f1@get-clause (lambda (bg1890@id bg1891@ls) ((lambda (bg1894@t) ((lambda (bg1896@ls/false) (if bg1896@ls/false (apply (lambda () '#f) bg1896@ls/false) ((lambda (bg1898@t) ((lambda (bg189a@ls/false) (if bg189a@ls/false (apply (lambda (bg189c@x bg189d@rest bg189e@ls) (if (bgb62@free-id=? (bgd17@bless bg1890@id) bg189c@x) (cons bg189c@x bg189d@rest) (bg16f1@get-clause bg1890@id bg189e@ls))) bg189a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1898@t))) (bgd61@syntax-dispatch bg1898@t '((any . any) . any)))) bg1894@t))) (bgd61@syntax-dispatch bg1894@t '()))) bg1891@ls))) (set! bg16f3@foo-rtd-code (lambda (bg183e@name bg183f@clause* bg1840@parent-rtd-code) ((lambda (bg1845@convert-field-spec*) (begin (set! bg1845@convert-field-spec* (lambda (bg1876@ls) (list->vector (map (lambda (bg1878@x) ((lambda (bg187a@t) ((lambda (bg187c@ls/false) (if bg187c@ls/false (apply (lambda (bg187e@name bg187f@rest) (list 'mutable bg187e@name)) bg187c@ls/false) ((lambda (bg1882@t) ((lambda (bg1884@ls/false) (if bg1884@ls/false (apply (lambda (bg1886@name bg1887@rest) (list 'immutable bg1886@name)) bg1884@ls/false) ((lambda (bg188a@t) ((lambda (bg188c@ls/false) (if bg188c@ls/false (apply (lambda (bg188e@name) (list 'immutable bg188e@name)) bg188c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg188a@t))) (bgd61@syntax-dispatch bg188a@t 'any))) bg1882@t))) (bgd61@syntax-dispatch bg1882@t '(#(scheme-id immutable) any . any)))) bg187a@t))) (bgd61@syntax-dispatch bg187a@t '(#(scheme-id mutable) any . any)))) bg1878@x)) bg1876@ls)))) ((lambda (bg1846@uid-code bg1847@sealed? bg1848@opaque? bg1849@fields) (bgd17@bless (list 'make-record-type-descriptor (list 'quote bg183e@name) bg1840@parent-rtd-code bg1846@uid-code bg1847@sealed? bg1848@opaque? bg1849@fields))) ((lambda (bg184e@t) ((lambda (bg1850@ls/false) (if bg1850@ls/false (apply (lambda () (list 'quote (gensym))) bg1850@ls/false) ((lambda (bg1852@t) ((lambda (bg1854@ls/false) (if bg1854@ls/false (apply (lambda (bg1856@uid) (list 'quote bg1856@uid)) bg1854@ls/false) ((lambda (bg1858@t) ((lambda (bg185a@ls/false) (if bg185a@ls/false (apply (lambda () '#f) bg185a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1858@t))) (bgd61@syntax-dispatch bg1858@t '_))) bg1852@t))) (bgd61@syntax-dispatch bg1852@t '(_ any)))) bg184e@t))) (bgd61@syntax-dispatch bg184e@t '(_)))) (bg16f1@get-clause 'nongenerative bg183f@clause*)) ((lambda (bg185c@t) ((lambda (bg185e@ls/false) (if bg185e@ls/false (apply (lambda () '#t) bg185e@ls/false) ((lambda (bg1860@t) ((lambda (bg1862@ls/false) (if bg1862@ls/false (apply (lambda () '#f) bg1862@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1860@t))) (bgd61@syntax-dispatch bg1860@t '_))) bg185c@t))) (bgd61@syntax-dispatch bg185c@t '(_ #(atom #t))))) (bg16f1@get-clause 'sealed bg183f@clause*)) ((lambda (bg1864@t) ((lambda (bg1866@ls/false) (if bg1866@ls/false (apply (lambda () '#t) bg1866@ls/false) ((lambda (bg1868@t) ((lambda (bg186a@ls/false) (if bg186a@ls/false (apply (lambda () '#f) bg186a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1868@t))) (bgd61@syntax-dispatch bg1868@t '_))) bg1864@t))) (bgd61@syntax-dispatch bg1864@t '(_ #(atom #t))))) (bg16f1@get-clause 'opaque bg183f@clause*)) ((lambda (bg186c@t) ((lambda (bg186e@ls/false) (if bg186e@ls/false (apply (lambda (bg1870@field-spec*) (list 'quote (bg1845@convert-field-spec* bg1870@field-spec*))) bg186e@ls/false) ((lambda (bg1872@t) ((lambda (bg1874@ls/false) (if bg1874@ls/false (apply (lambda () ''#()) bg1874@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1872@t))) (bgd61@syntax-dispatch bg1872@t '_))) bg186c@t))) (bgd61@syntax-dispatch bg186c@t '(_ . each-any)))) (bg16f1@get-clause 'fields bg183f@clause*))))) '#f))) (set! bg16f5@parent-rtd-code (lambda (bg1826@clause*) ((lambda (bg1828@t) ((lambda (bg182a@ls/false) (if bg182a@ls/false (apply (lambda (bg182c@name) (list 'record-type-descriptor bg182c@name)) bg182a@ls/false) ((lambda (bg182e@t) ((lambda (bg1830@ls/false) (if bg1830@ls/false (apply (lambda () ((lambda (bg1832@t) ((lambda (bg1834@ls/false) (if bg1834@ls/false (apply (lambda (bg1836@rtd bg1837@rcd) bg1836@rtd) bg1834@ls/false) ((lambda (bg183a@t) ((lambda (bg183c@ls/false) (if bg183c@ls/false (apply (lambda () '#f) bg183c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg183a@t))) (bgd61@syntax-dispatch bg183a@t '#(atom #f)))) bg1832@t))) (bgd61@syntax-dispatch bg1832@t '(_ any any)))) (bg16f1@get-clause 'parent-rtd bg1826@clause*))) bg1830@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg182e@t))) (bgd61@syntax-dispatch bg182e@t '#(atom #f)))) bg1828@t))) (bgd61@syntax-dispatch bg1828@t '(_ any)))) (bg16f1@get-clause 'parent bg1826@clause*)))) (set! bg16f7@parent-rcd-code (lambda (bg180e@clause*) ((lambda (bg1810@t) ((lambda (bg1812@ls/false) (if bg1812@ls/false (apply (lambda (bg1814@name) (list 'record-constructor-descriptor bg1814@name)) bg1812@ls/false) ((lambda (bg1816@t) ((lambda (bg1818@ls/false) (if bg1818@ls/false (apply (lambda () ((lambda (bg181a@t) ((lambda (bg181c@ls/false) (if bg181c@ls/false (apply (lambda (bg181e@rtd bg181f@rcd) bg181f@rcd) bg181c@ls/false) ((lambda (bg1822@t) ((lambda (bg1824@ls/false) (if bg1824@ls/false (apply (lambda () '#f) bg1824@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1822@t))) (bgd61@syntax-dispatch bg1822@t '#(atom #f)))) bg181a@t))) (bgd61@syntax-dispatch bg181a@t '(_ any any)))) (bg16f1@get-clause 'parent-rtd bg180e@clause*))) bg1818@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1816@t))) (bgd61@syntax-dispatch bg1816@t '#(atom #f)))) bg1810@t))) (bgd61@syntax-dispatch bg1810@t '(_ any)))) (bg16f1@get-clause 'parent bg180e@clause*)))) (set! bg16f9@foo-rcd-code (lambda (bg1806@clause* bg1807@foo-rtd bg1808@protocol bg1809@parent-rcd-code) (list 'make-record-constructor-descriptor bg1807@foo-rtd bg1809@parent-rcd-code bg1808@protocol))) (set! bg16fb@get-protocol-code (lambda (bg17fa@clause*) ((lambda (bg17fc@t) ((lambda (bg17fe@ls/false) (if bg17fe@ls/false (apply (lambda (bg1800@expr) bg1800@expr) bg17fe@ls/false) ((lambda (bg1802@t) ((lambda (bg1804@ls/false) (if bg1804@ls/false (apply (lambda () '#f) bg1804@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1802@t))) (bgd61@syntax-dispatch bg1802@t '_))) bg17fc@t))) (bgd61@syntax-dispatch bg17fc@t '(_ any)))) (bg16f1@get-clause 'protocol bg17fa@clause*)))) (set! bg16fd@get-fields (lambda (bg17e8@clause*) ((lambda (bg17ea@t) ((lambda (bg17ec@ls/false) (if bg17ec@ls/false (apply (lambda () '()) bg17ec@ls/false) ((lambda (bg17ee@t) ((lambda (bg17f0@ls/false) (if bg17f0@ls/false (apply (lambda (bg17f2@f*) bg17f2@f*) bg17f0@ls/false) ((lambda (bg17f4@t) ((lambda (bg17f6@ls/false) (if bg17f6@ls/false (apply (lambda (bg17f8@rest) (bg16fd@get-fields bg17f8@rest)) bg17f6@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg17f4@t))) (bgd61@syntax-dispatch bg17f4@t '(_ . any)))) bg17ee@t))) (bgd61@syntax-dispatch bg17ee@t '((#(scheme-id fields) . each-any) . _)))) bg17ea@t))) (bgd61@syntax-dispatch bg17ea@t '()))) bg17e8@clause*))) (set! bg16ff@get-mutator-indices (lambda (bg17d0@fields) ((letrec ((bg17d2@f (lambda (bg17d4@fields bg17d5@i) ((lambda (bg17d8@t) ((lambda (bg17da@ls/false) (if bg17da@ls/false (apply (lambda () '()) bg17da@ls/false) ((lambda (bg17dc@t) ((lambda (bg17de@ls/false) (if bg17de@ls/false (apply (lambda (bg17e0@rest) (cons bg17d5@i (bg17d2@f bg17e0@rest (+ bg17d5@i '1)))) bg17de@ls/false) ((lambda (bg17e2@t) ((lambda (bg17e4@ls/false) (if bg17e4@ls/false (apply (lambda (bg17e6@rest) (bg17d2@f bg17e6@rest (+ bg17d5@i '1))) bg17e4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg17e2@t))) (bgd61@syntax-dispatch bg17e2@t '(_ . any)))) bg17dc@t))) (bgd61@syntax-dispatch bg17dc@t '((#(scheme-id mutable) . _) . any)))) bg17d8@t))) (bgd61@syntax-dispatch bg17d8@t '()))) bg17d4@fields)))) bg17d2@f) bg17d0@fields '0))) (set! bg1701@get-mutators (lambda (bg17a6@foo bg17a7@fields) ((lambda (bg17ab@gen-name) (begin (set! bg17ab@gen-name (lambda (bg17ce@x) (bge45@datum->syntax bg17a6@foo (string->symbol (string-append (symbol->string (bge47@syntax->datum bg17a6@foo)) '"-" (symbol->string (bge47@syntax->datum bg17ce@x)) '"-set!"))))) ((letrec ((bg17ac@f (lambda (bg17ae@fields) ((lambda (bg17b0@t) ((lambda (bg17b2@ls/false) (if bg17b2@ls/false (apply (lambda () '()) bg17b2@ls/false) ((lambda (bg17b4@t) ((lambda (bg17b6@ls/false) (if bg17b6@ls/false (apply (lambda (bg17b8@name bg17b9@accessor bg17ba@mutator bg17bb@rest) (cons bg17ba@mutator (bg17ac@f bg17bb@rest))) bg17b6@ls/false) ((lambda (bg17c0@t) ((lambda (bg17c2@ls/false) (if bg17c2@ls/false (apply (lambda (bg17c4@name bg17c5@rest) (cons (bg17ab@gen-name bg17c4@name) (bg17ac@f bg17c5@rest))) bg17c2@ls/false) ((lambda (bg17c8@t) ((lambda (bg17ca@ls/false) (if bg17ca@ls/false (apply (lambda (bg17cc@rest) (bg17ac@f bg17cc@rest)) bg17ca@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg17c8@t))) (bgd61@syntax-dispatch bg17c8@t '(_ . any)))) bg17c0@t))) (bgd61@syntax-dispatch bg17c0@t '((#(scheme-id mutable) any) . any)))) bg17b4@t))) (bgd61@syntax-dispatch bg17b4@t '((#(scheme-id mutable) any any any) . any)))) bg17b0@t))) (bgd61@syntax-dispatch bg17b0@t '()))) bg17ae@fields)))) bg17ac@f) bg17a7@fields))) '#f))) (set! bg1703@get-accessors (lambda (bg1762@foo bg1763@fields) ((lambda (bg1767@gen-name) (begin (set! bg1767@gen-name (lambda (bg17a4@x) (bge45@datum->syntax bg1762@foo (string->symbol (string-append (symbol->string (bge47@syntax->datum bg1762@foo)) '"-" (symbol->string (bge47@syntax->datum bg17a4@x))))))) (map (lambda (bg1768@field) ((lambda (bg176a@t) ((lambda (bg176c@ls/false) (if (and bg176c@ls/false (apply (lambda (bg176e@name bg176f@accessor bg1770@mutator) (bgb5c@id? bg176f@accessor)) bg176c@ls/false)) (apply (lambda (bg1774@name bg1775@accessor bg1776@mutator) bg1775@accessor) bg176c@ls/false) ((lambda (bg177a@t) ((lambda (bg177c@ls/false) (if (and bg177c@ls/false (apply (lambda (bg177e@name bg177f@accessor) (bgb5c@id? bg177f@accessor)) bg177c@ls/false)) (apply (lambda (bg1782@name bg1783@accessor) bg1783@accessor) bg177c@ls/false) ((lambda (bg1786@t) ((lambda (bg1788@ls/false) (if (and bg1788@ls/false (apply (lambda (bg178a@name) (bgb5c@id? bg178a@name)) bg1788@ls/false)) (apply (lambda (bg178c@name) (bg1767@gen-name bg178c@name)) bg1788@ls/false) ((lambda (bg178e@t) ((lambda (bg1790@ls/false) (if (and bg1790@ls/false (apply (lambda (bg1792@name) (bgb5c@id? bg1792@name)) bg1790@ls/false)) (apply (lambda (bg1794@name) (bg1767@gen-name bg1794@name)) bg1790@ls/false) ((lambda (bg1796@t) ((lambda (bg1798@ls/false) (if (and bg1798@ls/false (apply (lambda (bg179a@name) (bgb5c@id? bg179a@name)) bg1798@ls/false)) (apply (lambda (bg179c@name) (bg1767@gen-name bg179c@name)) bg1798@ls/false) ((lambda (bg179e@t) ((lambda (bg17a0@ls/false) (if bg17a0@ls/false (apply (lambda (bg17a2@others) (bge41@syntax-violation '#f '"invalid field spec" bg1768@field)) bg17a0@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg179e@t))) (bgd61@syntax-dispatch bg179e@t 'any))) bg1796@t))) (bgd61@syntax-dispatch bg1796@t 'any))) bg178e@t))) (bgd61@syntax-dispatch bg178e@t '(#(scheme-id immutable) any)))) bg1786@t))) (bgd61@syntax-dispatch bg1786@t '(#(scheme-id mutable) any)))) bg177a@t))) (bgd61@syntax-dispatch bg177a@t '(#(scheme-id immutable) any any)))) bg176a@t))) (bgd61@syntax-dispatch bg176a@t '(#(scheme-id mutable) any any any)))) bg1768@field)) bg1763@fields))) '#f))) (set! bg1705@enumerate (lambda (bg175a@ls) ((letrec ((bg175c@f (lambda (bg175e@ls bg175f@i) (if (null? bg175e@ls) '() (cons bg175f@i (bg175c@f (cdr bg175e@ls) (+ bg175f@i '1))))))) bg175c@f) bg175a@ls '0))) (set! bg1707@do-define-record (lambda (bg1732@namespec bg1733@clause*) ((lambda (bg1736@foo) ((lambda (bg1738@foo-rtd) ((lambda (bg173a@foo-rcd) ((lambda (bg173c@protocol) ((lambda (bg173e@make-foo) ((lambda (bg1740@fields) ((lambda (bg1742@idx*) ((lambda (bg1744@foo-x*) ((lambda (bg1746@set-foo-x!*) ((lambda (bg1748@set-foo-idx*) ((lambda (bg174a@foo?) ((lambda (bg174c@foo-rtd-code) ((lambda (bg174e@foo-rcd-code) ((lambda (bg1750@protocol-code) ((lambda () (bgd17@bless (cons 'begin (cons (list 'define bg1738@foo-rtd bg174c@foo-rtd-code) (cons (list 'define bg173c@protocol bg1750@protocol-code) (cons (list 'define bg173a@foo-rcd bg174e@foo-rcd-code) (cons (list 'define-syntax bg1736@foo (list 'list ''$rtd (list 'syntax bg1738@foo-rtd) (list 'syntax bg173a@foo-rcd))) (cons (list 'define bg174a@foo? (list 'record-predicate bg1738@foo-rtd)) (cons (list 'define bg173e@make-foo (list 'record-constructor bg173a@foo-rcd)) (append (map (lambda (bg1752@foo-x bg1753@idx) (list 'define bg1752@foo-x (list 'record-accessor bg1738@foo-rtd bg1753@idx))) bg1744@foo-x* bg1742@idx*) (map (lambda (bg1756@set-foo-x! bg1757@idx) (list 'define bg1756@set-foo-x! (list 'record-mutator bg1738@foo-rtd bg1757@idx))) bg1746@set-foo-x!* bg1748@set-foo-idx*))))))))))))) (bg16fb@get-protocol-code bg1733@clause*))) (bg16f9@foo-rcd-code bg1733@clause* bg1738@foo-rtd bg173c@protocol (bg16f7@parent-rcd-code bg1733@clause*)))) (bg16f3@foo-rtd-code bg1736@foo bg1733@clause* (bg16f5@parent-rtd-code bg1733@clause*)))) (bg16ef@get-record-predicate-name bg1732@namespec))) (bg16ff@get-mutator-indices bg1740@fields))) (bg1701@get-mutators bg1736@foo bg1740@fields))) (bg1703@get-accessors bg1736@foo bg1740@fields))) (bg1705@enumerate bg1740@fields))) (bg16fd@get-fields bg1733@clause*))) (bg16ed@get-record-constructor-name bg1732@namespec))) (gensym))) (gensym))) (gensym))) (bg16eb@get-record-name bg1732@namespec)))) (set! bg1709@verify-clauses (lambda (bg1712@x bg1713@cls*) ((lambda (bg1717@valid-kwds bg1719@free-id-member?) (begin (set! bg1717@valid-kwds (map bgd17@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! bg1719@free-id-member? (lambda (bg172e@x bg172f@ls) (and (pair? bg172f@ls) (or (bgb62@free-id=? bg172e@x (car bg172f@ls)) (bg1719@free-id-member? bg172e@x (cdr bg172f@ls)))))) ((letrec ((bg171a@f (lambda (bg171c@cls* bg171d@seen*) (if (not (null? bg171c@cls*)) ((lambda (bg1720@t) ((lambda (bg1722@ls/false) (if bg1722@ls/false (apply (lambda (bg1724@kwd bg1725@rest) (if (or (not (bgb5c@id? bg1724@kwd)) (not (bg1719@free-id-member? bg1724@kwd bg1717@valid-kwds))) (bge41@syntax-violation '#f '"not a valid define-record-type keyword" bg1724@kwd) (if (bgb68@bound-id-member? bg1724@kwd bg171d@seen*) (bge41@syntax-violation '#f '"duplicate use of keyword " bg1712@x bg1724@kwd) (bg171a@f (cdr bg171c@cls*) (cons bg1724@kwd bg171d@seen*))))) bg1722@ls/false) ((lambda (bg1728@t) ((lambda (bg172a@ls/false) (if bg172a@ls/false (apply (lambda (bg172c@cls) (bge41@syntax-violation '#f '"malformed define-record-type clause" bg172c@cls)) bg172a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1728@t))) (bgd61@syntax-dispatch bg1728@t 'any))) bg1720@t))) (bgd61@syntax-dispatch bg1720@t '(any . any)))) (car bg171c@cls*)) (void))))) bg171a@f) bg1713@cls* '()))) '#f '#f))) ((lambda (bg170a@t) ((lambda (bg170c@ls/false) (if bg170c@ls/false (apply (lambda (bg170e@namespec bg170f@clause*) (begin (bg1709@verify-clauses bg16e6@x bg170f@clause*) (bg1707@do-define-record bg170e@namespec bg170f@clause*))) bg170c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg170a@t))) (bgd61@syntax-dispatch bg170a@t '(_ any . each-any)))) bg16e6@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! bgd57@define-condition-type-macro (lambda (bg18e2@x) ((lambda (bg18e5@mkname) (begin (set! bg18e5@mkname (lambda (bg1912@name bg1913@suffix) (bge45@datum->syntax bg1912@name (string->symbol (string-append (symbol->string (bge47@syntax->datum bg1912@name)) bg1913@suffix))))) ((lambda (bg18e6@t) ((lambda (bg18e8@ls/false) (if (and bg18e8@ls/false (apply (lambda (bg18ea@ctxt bg18eb@name bg18ec@super bg18ed@constructor bg18ee@predicate bg18ef@field* bg18f0@accessor*) (and (bgb5c@id? bg18eb@name) (bgb5c@id? bg18ec@super) (bgb5c@id? bg18ed@constructor) (bgb5c@id? bg18ee@predicate) (for-all bgb5c@id? bg18ef@field*) (for-all bgb5c@id? bg18f0@accessor*))) bg18e8@ls/false)) (apply (lambda (bg18f8@ctxt bg18f9@name bg18fa@super bg18fb@constructor bg18fc@predicate bg18fd@field* bg18fe@accessor*) ((lambda (bg1906@aux-accessor*) (bgd17@bless (cons 'begin (cons (cons 'define-record-type (cons (list bg18f9@name bg18fb@constructor (gensym)) (cons (list 'parent bg18fa@super) (cons (cons 'fields (map (lambda (bg1908@field bg1909@aux) (list 'immutable bg1908@field bg1909@aux)) bg18fd@field* bg1906@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bg18fc@predicate (list 'condition-predicate (list 'record-type-descriptor bg18f9@name))) (map (lambda (bg190c@accessor bg190d@aux) (list 'define bg190c@accessor (list 'condition-accessor (list 'record-type-descriptor bg18f9@name) bg190d@aux))) bg18fe@accessor* bg1906@aux-accessor*)))))) (map (lambda (bg1910@x) (gensym)) bg18fe@accessor*))) bg18e8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg18e6@t))) (bgd61@syntax-dispatch bg18e6@t '(any any any any any . #(each (any any)))))) bg18e2@x))) '#f))) (set! bgd59@incorrect-usage-macro (lambda (bg1916@e) (bge41@syntax-violation '#f '"incorrect usage of auxiliary keyword" bg1916@e))) (set! bgd5b@parameterize-macro (lambda (bg1918@e) ((lambda (bg191a@t) ((lambda (bg191c@ls/false) (if bg191c@ls/false (apply (lambda (bg191e@b bg191f@b*) (bgd17@bless (cons 'let (cons '() (cons bg191e@b bg191f@b*))))) bg191c@ls/false) ((lambda (bg1922@t) ((lambda (bg1924@ls/false) (if bg1924@ls/false (apply (lambda (bg1926@olhs* bg1927@orhs* bg1928@b bg1929@b*) ((lambda (bg192e@lhs* bg192f@rhs*) (bgd17@bless (cons (list 'lambda (append bg192e@lhs* bg192f@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bg1932@lhs bg1933@rhs) (list 'let (list (list 't (list bg1932@lhs))) (list bg1932@lhs bg1933@rhs) (cons 'set! (cons bg1933@rhs '(t))))) bg192e@lhs* bg192f@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bg1928@b bg1929@b*))) '(swap)))))) (append bg1926@olhs* bg1927@orhs*)))) (bge2f@generate-temporaries bg1926@olhs*) (bge2f@generate-temporaries bg1927@orhs*))) bg1924@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1922@t))) (bgd61@syntax-dispatch bg1922@t '(_ #(each (any any)) any . each-any)))) bg191a@t))) (bgd61@syntax-dispatch bg191a@t '(_ () any . each-any)))) bg1918@e))) (set! bgd5d@foreign-call-transformer (lambda (bg1936@e bg1937@r bg1938@mr) ((lambda (bg193c@t) ((lambda (bg193e@ls/false) (if bg193e@ls/false (apply (lambda (bg1940@name bg1941@arg*) (cons 'foreign-call (cons (bgd83@chi-expr bg1940@name bg1937@r bg1938@mr) (bgd7f@chi-expr* bg1941@arg* bg1937@r bg1938@mr)))) bg193e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg193c@t))) (bgd61@syntax-dispatch bg193c@t '(_ any . each-any)))) bg1936@e))) (set! bgd5f@convert-pattern (lambda (bg1944@pattern bg1945@keys) ((lambda (bg1949@cvt* bg194b@cvt) (begin (set! bg1949@cvt* (lambda (bg19e8@p* bg19e9@n bg19ea@ids) (if (null? bg19e8@p*) (values '() bg19ea@ids) (call-with-values (lambda () (bg1949@cvt* (cdr bg19e8@p*) bg19e9@n bg19ea@ids)) (lambda (bg19f2@bg19ef bg19f3@bg19f1) ((lambda (bg19f6@ids bg19f7@y) (call-with-values (lambda () (bg194b@cvt (car bg19e8@p*) bg19e9@n bg19f6@ids)) (lambda (bg19fe@bg19fb bg19ff@bg19fd) ((lambda (bg1a02@ids bg1a03@x) (values (cons bg1a03@x bg19f7@y) bg1a02@ids)) bg19ff@bg19fd bg19fe@bg19fb)))) bg19f3@bg19f1 bg19f2@bg19ef)))))) (set! bg194b@cvt (lambda (bg194c@p bg194d@n bg194e@ids) ((lambda (bg1952@t) ((lambda (bg1954@ls/false) (if (and bg1954@ls/false (apply (lambda (bg1956@id) (bgb5c@id? bg1956@id)) bg1954@ls/false)) (apply (lambda (bg1958@id) (if (bgb68@bound-id-member? bg194c@p bg1945@keys) (values (vector 'free-id bg194c@p) bg194e@ids) (if (bgb62@free-id=? bg194c@p (bgceb@scheme-stx '_)) (values '_ bg194e@ids) (values 'any (cons (cons bg194c@p bg194d@n) bg194e@ids))))) bg1954@ls/false) ((lambda (bg195a@t) ((lambda (bg195c@ls/false) (if (and bg195c@ls/false (apply (lambda (bg195e@p bg195f@dots) (bgd63@ellipsis? bg195f@dots)) bg195c@ls/false)) (apply (lambda (bg1962@p bg1963@dots) (call-with-values (lambda () (bg194b@cvt bg1962@p (+ bg194d@n '1) bg194e@ids)) (lambda (bg196a@bg1967 bg196b@bg1969) ((lambda (bg196e@ids bg196f@p) (values (if (eq? bg196f@p 'any) 'each-any (vector 'each bg196f@p)) bg196e@ids)) bg196b@bg1969 bg196a@bg1967)))) bg195c@ls/false) ((lambda (bg1972@t) ((lambda (bg1974@ls/false) (if (and bg1974@ls/false (apply (lambda (bg1976@x bg1977@dots bg1978@ys bg1979@z) (bgd63@ellipsis? bg1977@dots)) bg1974@ls/false)) (apply (lambda (bg197e@x bg197f@dots bg1980@ys bg1981@z) (call-with-values (lambda () (bg194b@cvt bg1981@z bg194d@n bg194e@ids)) (lambda (bg198a@bg1987 bg198b@bg1989) ((lambda (bg198e@ids bg198f@z) (call-with-values (lambda () (bg1949@cvt* bg1980@ys bg194d@n bg198e@ids)) (lambda (bg1996@bg1993 bg1997@bg1995) ((lambda (bg199a@ids bg199b@ys) (call-with-values (lambda () (bg194b@cvt bg197e@x (+ bg194d@n '1) bg199a@ids)) (lambda (bg19a2@bg199f bg19a3@bg19a1) ((lambda (bg19a6@ids bg19a7@x) (values (vector 'each+ bg19a7@x (reverse bg199b@ys) bg198f@z) bg19a6@ids)) bg19a3@bg19a1 bg19a2@bg199f)))) bg1997@bg1995 bg1996@bg1993)))) bg198b@bg1989 bg198a@bg1987)))) bg1974@ls/false) ((lambda (bg19aa@t) ((lambda (bg19ac@ls/false) (if bg19ac@ls/false (apply (lambda (bg19ae@x bg19af@y) (call-with-values (lambda () (bg194b@cvt bg19af@y bg194d@n bg194e@ids)) (lambda (bg19b6@bg19b3 bg19b7@bg19b5) ((lambda (bg19ba@ids bg19bb@y) (call-with-values (lambda () (bg194b@cvt bg19ae@x bg194d@n bg19ba@ids)) (lambda (bg19c2@bg19bf bg19c3@bg19c1) ((lambda (bg19c6@ids bg19c7@x) (values (cons bg19c7@x bg19bb@y) bg19c6@ids)) bg19c3@bg19c1 bg19c2@bg19bf)))) bg19b7@bg19b5 bg19b6@bg19b3)))) bg19ac@ls/false) ((lambda (bg19ca@t) ((lambda (bg19cc@ls/false) (if bg19cc@ls/false (apply (lambda () (values '() bg194e@ids)) bg19cc@ls/false) ((lambda (bg19ce@t) ((lambda (bg19d0@ls/false) (if (and bg19d0@ls/false (apply (lambda (bg19d2@p) (not (bgb28@stx? bg19d2@p))) bg19d0@ls/false)) (apply (lambda (bg19d4@p) (call-with-values (lambda () (bg194b@cvt bg19d4@p bg194d@n bg194e@ids)) (lambda (bg19da@bg19d7 bg19db@bg19d9) ((lambda (bg19de@ids bg19df@p) (values (vector 'vector bg19df@p) bg19de@ids)) bg19db@bg19d9 bg19da@bg19d7)))) bg19d0@ls/false) ((lambda (bg19e2@t) ((lambda (bg19e4@ls/false) (if bg19e4@ls/false (apply (lambda (bg19e6@datum) (values (vector 'atom (bgb70@stx->datum bg19e6@datum)) bg194e@ids)) bg19e4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg19e2@t))) (bgd61@syntax-dispatch bg19e2@t 'any))) bg19ce@t))) (bgd61@syntax-dispatch bg19ce@t '#(vector each-any)))) bg19ca@t))) (bgd61@syntax-dispatch bg19ca@t '()))) bg19aa@t))) (bgd61@syntax-dispatch bg19aa@t '(any . any)))) bg1972@t))) (bgd61@syntax-dispatch bg1972@t '(any any . #(each+ any () any))))) bg195a@t))) (bgd61@syntax-dispatch bg195a@t '(any any)))) bg1952@t))) (bgd61@syntax-dispatch bg1952@t 'any))) bg194c@p))) (bg194b@cvt bg1944@pattern '0 '()))) '#f '#f))) (set! bgd61@syntax-dispatch ((lambda () ((lambda (bg1a07@stx^ bg1a09@match-each bg1a0b@match-each+ bg1a0d@match-each-any bg1a0f@match-empty bg1a11@combine bg1a13@match* bg1a15@match) (begin (set! bg1a07@stx^ (lambda (bg1ae2@e bg1ae3@m* bg1ae4@s* bg1ae5@ae*) (if (and (null? bg1ae3@m*) (null? bg1ae4@s*) (null? bg1ae5@ae*)) bg1ae2@e (bgb44@mkstx bg1ae2@e bg1ae3@m* bg1ae4@s* bg1ae5@ae*)))) (set! bg1a09@match-each (lambda (bg1ac2@e bg1ac3@p bg1ac4@m* bg1ac5@s* bg1ac6@ae*) (if (pair? bg1ac2@e) ((lambda (bg1acc@first) (and bg1acc@first ((lambda (bg1ace@rest) (and bg1ace@rest (cons bg1acc@first bg1ace@rest))) (bg1a09@match-each (cdr bg1ac2@e) bg1ac3@p bg1ac4@m* bg1ac5@s* bg1ac6@ae*)))) (bg1a15@match (car bg1ac2@e) bg1ac3@p bg1ac4@m* bg1ac5@s* bg1ac6@ae* '())) (if (null? bg1ac2@e) '() (if (bgb28@stx? bg1ac2@e) (and (not (bgae2@top-marked? bg1ac4@m*)) (call-with-values (lambda () (join-wraps bg1ac4@m* bg1ac5@s* bg1ac6@ae* bg1ac2@e)) (lambda (bg1ad6@bg1ad1 bg1ad7@bg1ad3 bg1ad8@bg1ad5) ((lambda (bg1adc@ae* bg1add@s* bg1ade@m*) (bg1a09@match-each (bgb2a@stx-expr bg1ac2@e) bg1ac3@p bg1ade@m* bg1add@s* bg1adc@ae*)) bg1ad8@bg1ad5 bg1ad7@bg1ad3 bg1ad6@bg1ad1)))) (if (bg6b0@bg584@annotation? bg1ac2@e) (bg1a09@match-each (bg6b2@bg588@annotation-expression bg1ac2@e) bg1ac3@p bg1ac4@m* bg1ac5@s* bg1ac6@ae*) '#f)))))) (set! bg1a0b@match-each+ (lambda (bg1a82@e bg1a83@x-pat bg1a84@y-pat bg1a85@z-pat bg1a86@m* bg1a87@s* bg1a88@ae* bg1a89@r) ((letrec ((bg1a92@f (lambda (bg1a94@e bg1a95@m* bg1a96@s* bg1a97@ae*) (if (pair? bg1a94@e) (call-with-values (lambda () (bg1a92@f (cdr bg1a94@e) bg1a95@m* bg1a96@s* bg1a97@ae*)) (lambda (bg1aa2@bg1a9d bg1aa3@bg1a9f bg1aa4@bg1aa1) ((lambda (bg1aa8@r bg1aa9@y-pat bg1aaa@xr*) (if bg1aa8@r (if (null? bg1aa9@y-pat) ((lambda (bg1aae@xr) (if bg1aae@xr (values (cons bg1aae@xr bg1aaa@xr*) bg1aa9@y-pat bg1aa8@r) (values '#f '#f '#f))) (bg1a15@match (car bg1a94@e) bg1a83@x-pat bg1a95@m* bg1a96@s* bg1a97@ae* '())) (values '() (cdr bg1aa9@y-pat) (bg1a15@match (car bg1a94@e) (car bg1aa9@y-pat) bg1a95@m* bg1a96@s* bg1a97@ae* bg1aa8@r))) (values '#f '#f '#f))) bg1aa4@bg1aa1 bg1aa3@bg1a9f bg1aa2@bg1a9d))) (if (bgb28@stx? bg1a94@e) (if (bgae2@top-marked? bg1a95@m*) (values '() bg1a84@y-pat (bg1a15@match bg1a94@e bg1a85@z-pat bg1a95@m* bg1a96@s* bg1a97@ae* bg1a89@r)) (call-with-values (lambda () (join-wraps bg1a95@m* bg1a96@s* bg1a97@ae* bg1a94@e)) (lambda (bg1ab6@bg1ab1 bg1ab7@bg1ab3 bg1ab8@bg1ab5) ((lambda (bg1abc@ae* bg1abd@s* bg1abe@m*) (bg1a92@f (bgb2a@stx-expr bg1a94@e) bg1abe@m* bg1abd@s* bg1abc@ae*)) bg1ab8@bg1ab5 bg1ab7@bg1ab3 bg1ab6@bg1ab1)))) (if (bg6b0@bg584@annotation? bg1a94@e) (bg1a92@f (bg6b2@bg588@annotation-expression bg1a94@e) bg1a95@m* bg1a96@s* bg1a97@ae*) (values '() bg1a84@y-pat (bg1a15@match bg1a94@e bg1a85@z-pat bg1a95@m* bg1a96@s* bg1a97@ae* bg1a89@r)))))))) bg1a92@f) bg1a82@e bg1a86@m* bg1a87@s* bg1a88@ae*))) (set! bg1a0d@match-each-any (lambda (bg1a66@e bg1a67@m* bg1a68@s* bg1a69@ae*) (if (pair? bg1a66@e) ((lambda (bg1a6e@l) (and bg1a6e@l (cons (bg1a07@stx^ (car bg1a66@e) bg1a67@m* bg1a68@s* bg1a69@ae*) bg1a6e@l))) (bg1a0d@match-each-any (cdr bg1a66@e) bg1a67@m* bg1a68@s* bg1a69@ae*)) (if (null? bg1a66@e) '() (if (bgb28@stx? bg1a66@e) (and (not (bgae2@top-marked? bg1a67@m*)) (call-with-values (lambda () (join-wraps bg1a67@m* bg1a68@s* bg1a69@ae* bg1a66@e)) (lambda (bg1a76@bg1a71 bg1a77@bg1a73 bg1a78@bg1a75) ((lambda (bg1a7c@ae* bg1a7d@s* bg1a7e@m*) (bg1a0d@match-each-any (bgb2a@stx-expr bg1a66@e) bg1a7e@m* bg1a7d@s* bg1a7c@ae*)) bg1a78@bg1a75 bg1a77@bg1a73 bg1a76@bg1a71)))) (if (bg6b0@bg584@annotation? bg1a66@e) (bg1a0d@match-each-any (bg6b2@bg588@annotation-expression bg1a66@e) bg1a67@m* bg1a68@s* bg1a69@ae*) '#f)))))) (set! bg1a0f@match-empty (lambda (bg1a60@p bg1a61@r) (if (null? bg1a60@p) bg1a61@r (if (eq? bg1a60@p '_) bg1a61@r (if (eq? bg1a60@p 'any) (cons '() bg1a61@r) (if (pair? bg1a60@p) (bg1a0f@match-empty (car bg1a60@p) (bg1a0f@match-empty (cdr bg1a60@p) bg1a61@r)) (if (eq? bg1a60@p 'each-any) (cons '() bg1a61@r) ((lambda (bg1a64@t) (if (memv bg1a64@t '(each)) (bg1a0f@match-empty (vector-ref bg1a60@p '1) bg1a61@r) (if (memv bg1a64@t '(each+)) (bg1a0f@match-empty (vector-ref bg1a60@p '1) (bg1a0f@match-empty (reverse (vector-ref bg1a60@p '2)) (bg1a0f@match-empty (vector-ref bg1a60@p '3) bg1a61@r))) (if (memv bg1a64@t '(free-id atom)) bg1a61@r (if (memv bg1a64@t '(scheme-id atom)) bg1a61@r (if (memv bg1a64@t '(vector)) (bg1a0f@match-empty (vector-ref bg1a60@p '1) bg1a61@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bg1a60@p))))))) (vector-ref bg1a60@p '0))))))))) (set! bg1a11@combine (lambda (bg1a5c@r* bg1a5d@r) (if (null? (car bg1a5c@r*)) bg1a5d@r (cons (map car bg1a5c@r*) (bg1a11@combine (map cdr bg1a5c@r*) bg1a5d@r))))) (set! bg1a13@match* (lambda (bg1a38@e bg1a39@p bg1a3a@m* bg1a3b@s* bg1a3c@ae* bg1a3d@r) (if (null? bg1a39@p) (and (null? bg1a38@e) bg1a3d@r) (if (pair? bg1a39@p) (and (pair? bg1a38@e) (bg1a15@match (car bg1a38@e) (car bg1a39@p) bg1a3a@m* bg1a3b@s* bg1a3c@ae* (bg1a15@match (cdr bg1a38@e) (cdr bg1a39@p) bg1a3a@m* bg1a3b@s* bg1a3c@ae* bg1a3d@r))) (if (eq? bg1a39@p 'each-any) ((lambda (bg1a44@l) (and bg1a44@l (cons bg1a44@l bg1a3d@r))) (bg1a0d@match-each-any bg1a38@e bg1a3a@m* bg1a3b@s* bg1a3c@ae*)) ((lambda (bg1a46@t) (if (memv bg1a46@t '(each)) (if (null? bg1a38@e) (bg1a0f@match-empty (vector-ref bg1a39@p '1) bg1a3d@r) ((lambda (bg1a48@r*) (and bg1a48@r* (bg1a11@combine bg1a48@r* bg1a3d@r))) (bg1a09@match-each bg1a38@e (vector-ref bg1a39@p '1) bg1a3a@m* bg1a3b@s* bg1a3c@ae*))) (if (memv bg1a46@t '(free-id)) (and (symbol? bg1a38@e) (bgae2@top-marked? bg1a3a@m*) (bgb62@free-id=? (bg1a07@stx^ bg1a38@e bg1a3a@m* bg1a3b@s* bg1a3c@ae*) (vector-ref bg1a39@p '1)) bg1a3d@r) (if (memv bg1a46@t '(scheme-id)) (and (symbol? bg1a38@e) (bgae2@top-marked? bg1a3a@m*) (bgb62@free-id=? (bg1a07@stx^ bg1a38@e bg1a3a@m* bg1a3b@s* bg1a3c@ae*) (bgceb@scheme-stx (vector-ref bg1a39@p '1))) bg1a3d@r) (if (memv bg1a46@t '(each+)) (call-with-values (lambda () (bg1a0b@match-each+ bg1a38@e (vector-ref bg1a39@p '1) (vector-ref bg1a39@p '2) (vector-ref bg1a39@p '3) bg1a3a@m* bg1a3b@s* bg1a3c@ae* bg1a3d@r)) (lambda (bg1a50@bg1a4b bg1a51@bg1a4d bg1a52@bg1a4f) ((lambda (bg1a56@r bg1a57@y-pat bg1a58@xr*) (and bg1a56@r (null? bg1a57@y-pat) (if (null? bg1a58@xr*) (bg1a0f@match-empty (vector-ref bg1a39@p '1) bg1a56@r) (bg1a11@combine bg1a58@xr* bg1a56@r)))) bg1a52@bg1a4f bg1a51@bg1a4d bg1a50@bg1a4b))) (if (memv bg1a46@t '(atom)) (and (fast-equal? (vector-ref bg1a39@p '1) (bgb6e@strip bg1a38@e bg1a3a@m*)) bg1a3d@r) (if (memv bg1a46@t '(vector)) (and (vector? bg1a38@e) (bg1a15@match (vector->list bg1a38@e) (vector-ref bg1a39@p '1) bg1a3a@m* bg1a3b@s* bg1a3c@ae* bg1a3d@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bg1a39@p)))))))) (vector-ref bg1a39@p '0))))))) (set! bg1a15@match (lambda (bg1a1a@e bg1a1b@p bg1a1c@m* bg1a1d@s* bg1a1e@ae* bg1a1f@r) (if (not bg1a1f@r) '#f (if (eq? bg1a1b@p '_) bg1a1f@r (if (eq? bg1a1b@p 'any) (cons (bg1a07@stx^ bg1a1a@e bg1a1c@m* bg1a1d@s* bg1a1e@ae*) bg1a1f@r) (if (bgb28@stx? bg1a1a@e) (and (not (bgae2@top-marked? bg1a1c@m*)) (call-with-values (lambda () (join-wraps bg1a1c@m* bg1a1d@s* bg1a1e@ae* bg1a1a@e)) (lambda (bg1a2c@bg1a27 bg1a2d@bg1a29 bg1a2e@bg1a2b) ((lambda (bg1a32@ae* bg1a33@s* bg1a34@m*) (bg1a15@match (bgb2a@stx-expr bg1a1a@e) bg1a1b@p bg1a34@m* bg1a33@s* bg1a32@ae* bg1a1f@r)) bg1a2e@bg1a2b bg1a2d@bg1a29 bg1a2c@bg1a27)))) (if (bg6b0@bg584@annotation? bg1a1a@e) (bg1a15@match (bg6b2@bg588@annotation-expression bg1a1a@e) bg1a1b@p bg1a1c@m* bg1a1d@s* bg1a1e@ae* bg1a1f@r) (bg1a13@match* bg1a1a@e bg1a1b@p bg1a1c@m* bg1a1d@s* bg1a1e@ae* bg1a1f@r)))))))) (lambda (bg1a16@e bg1a17@p) (bg1a15@match bg1a16@e bg1a17@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! bgd63@ellipsis? (lambda (bg1aea@x) (and (bgb5c@id? bg1aea@x) (bgb62@free-id=? bg1aea@x (bgceb@scheme-stx '...))))) (set! bgd65@underscore? (lambda (bg1aec@x) (and (bgb5c@id? bg1aec@x) (bgb62@free-id=? bg1aec@x (bgceb@scheme-stx '_))))) (set! bgd67@verify-literals (lambda (bg1aee@lits bg1aef@expr) (for-each (lambda (bg1af2@x) (if (or (not (bgb5c@id? bg1af2@x)) (bgd63@ellipsis? bg1af2@x) (bgd65@underscore? bg1af2@x)) (bge41@syntax-violation '#f '"invalid literal" bg1aef@expr bg1af2@x) (void))) bg1aee@lits))) (set! bgd69@syntax-case-transformer ((lambda () ((lambda (bg1af5@build-dispatch-call bg1af7@invalid-ids-error bg1af9@gen-clause bg1afb@gen-syntax-case) (begin (set! bg1af5@build-dispatch-call (lambda (bg1b66@pvars bg1b67@expr bg1b68@y bg1b69@r bg1b6a@mr) ((lambda (bg1b70@ids bg1b71@levels) ((lambda (bg1b74@labels bg1b75@new-vars) ((lambda (bg1b78@body) (list '(primitive apply) (bgac0@bga00@build-lambda '#f bg1b75@new-vars bg1b78@body) bg1b68@y)) (bgd83@chi-expr (bgb48@add-subst (bgb1c@make-full-rib bg1b70@ids bg1b74@labels) bg1b67@expr) (append (map (lambda (bg1b7a@label bg1b7b@var bg1b7c@level) (cons bg1b7a@label (bgb76@make-binding 'syntax (cons bg1b7b@var bg1b7c@level)))) bg1b74@labels bg1b75@new-vars (map cdr bg1b66@pvars)) bg1b69@r) bg1b6a@mr))) (map bgae8@gen-label bg1b70@ids) (map bgae4@gen-lexical bg1b70@ids))) (map car bg1b66@pvars) (map cdr bg1b66@pvars)))) (set! bg1af7@invalid-ids-error (lambda (bg1b5a@id* bg1b5b@e bg1b5c@class) ((letrec ((bg1b60@find (lambda (bg1b62@id* bg1b63@ok*) (if (null? bg1b62@id*) (bge41@syntax-violation '#f '"invalid syntax" bg1b5b@e) (if (bgb5c@id? (car bg1b62@id*)) (if (bgb68@bound-id-member? (car bg1b62@id*) bg1b63@ok*) (bge3d@syntax-error (car bg1b62@id*) '"duplicate " bg1b5c@class) (bg1b60@find (cdr bg1b62@id*) (cons (car bg1b62@id*) bg1b63@ok*))) (bge3d@syntax-error (car bg1b62@id*) '"invalid " bg1b5c@class)))))) bg1b60@find) bg1b5a@id* '()))) (set! bg1af9@gen-clause (lambda (bg1b32@x bg1b33@keys bg1b34@clauses bg1b35@r bg1b36@mr bg1b37@pat bg1b38@fender bg1b39@expr) (call-with-values (lambda () (bgd5f@convert-pattern bg1b37@pat bg1b33@keys)) (lambda (bg1b46@bg1b43 bg1b47@bg1b45) ((lambda (bg1b4a@pvars bg1b4b@p) (if (not (bgb66@distinct-bound-ids? (map car bg1b4a@pvars))) (bg1af7@invalid-ids-error (map car bg1b4a@pvars) bg1b37@pat '"pattern variable") (if (not (for-all (lambda (bg1b4e@x) (not (bgd63@ellipsis? (car bg1b4e@x)))) bg1b4a@pvars)) (bge41@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bg1b37@pat) ((lambda (bg1b50@y) ((lambda (bg1b52@test) ((lambda (bg1b54@conseq) ((lambda (bg1b56@altern) (list (bgac0@bga00@build-lambda '#f (list bg1b50@y) (list 'if bg1b52@test bg1b54@conseq bg1b56@altern)) (list '(primitive syntax-dispatch) bg1b32@x (list 'quote bg1b4b@p)))) (bg1afb@gen-syntax-case bg1b32@x bg1b33@keys bg1b34@clauses bg1b35@r bg1b36@mr))) (bg1af5@build-dispatch-call bg1b4a@pvars bg1b39@expr bg1b50@y bg1b35@r bg1b36@mr))) (if (eq? bg1b38@fender '#t) bg1b50@y ((lambda (bg1b58@call) (list 'if bg1b50@y bg1b58@call (list 'quote '#f))) (bg1af5@build-dispatch-call bg1b4a@pvars bg1b38@fender bg1b50@y bg1b35@r bg1b36@mr))))) (bgae4@gen-lexical 'tmp))))) bg1b47@bg1b45 bg1b46@bg1b43))))) (set! bg1afb@gen-syntax-case (lambda (bg1b10@x bg1b11@keys bg1b12@clauses bg1b13@r bg1b14@mr) (if (null? bg1b12@clauses) (list '(primitive syntax-error) bg1b10@x) ((lambda (bg1b1a@t) ((lambda (bg1b1c@ls/false) (if bg1b1c@ls/false (apply (lambda (bg1b1e@pat bg1b1f@expr) (if (and (bgb5c@id? bg1b1e@pat) (not (bgb68@bound-id-member? bg1b1e@pat bg1b11@keys)) (not (bgd63@ellipsis? bg1b1e@pat))) (if (bgb62@free-id=? bg1b1e@pat (bgceb@scheme-stx '_)) (bgd83@chi-expr bg1b1f@expr bg1b13@r bg1b14@mr) ((lambda (bg1b22@lab bg1b23@lex) ((lambda (bg1b26@body) (list (bgac0@bga00@build-lambda '#f (list bg1b23@lex) bg1b26@body) bg1b10@x)) (bgd83@chi-expr (bgb48@add-subst (bgb1c@make-full-rib (list bg1b1e@pat) (list bg1b22@lab)) bg1b1f@expr) (cons (cons bg1b22@lab (bgb76@make-binding 'syntax (cons bg1b23@lex '0))) bg1b13@r) bg1b14@mr))) (bgae8@gen-label bg1b1e@pat) (bgae4@gen-lexical bg1b1e@pat))) (bg1af9@gen-clause bg1b10@x bg1b11@keys (cdr bg1b12@clauses) bg1b13@r bg1b14@mr bg1b1e@pat '#t bg1b1f@expr))) bg1b1c@ls/false) ((lambda (bg1b28@t) ((lambda (bg1b2a@ls/false) (if bg1b2a@ls/false (apply (lambda (bg1b2c@pat bg1b2d@fender bg1b2e@expr) (bg1af9@gen-clause bg1b10@x bg1b11@keys (cdr bg1b12@clauses) bg1b13@r bg1b14@mr bg1b2c@pat bg1b2d@fender bg1b2e@expr)) bg1b2a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1b28@t))) (bgd61@syntax-dispatch bg1b28@t '(any any any)))) bg1b1a@t))) (bgd61@syntax-dispatch bg1b1a@t '(any any)))) (car bg1b12@clauses))))) (lambda (bg1afc@e bg1afd@r bg1afe@mr) ((lambda (bg1b02@t) ((lambda (bg1b04@ls/false) (if bg1b04@ls/false (apply (lambda (bg1b06@expr bg1b07@keys bg1b08@clauses) (begin (bgd67@verify-literals bg1b07@keys bg1afc@e) ((lambda (bg1b0c@x) ((lambda (bg1b0e@body) (list (bgac0@bga00@build-lambda '#f (list bg1b0c@x) bg1b0e@body) (bgd83@chi-expr bg1b06@expr bg1afd@r bg1afe@mr))) (bg1afb@gen-syntax-case bg1b0c@x bg1b07@keys bg1b08@clauses bg1afd@r bg1afe@mr))) (bgae4@gen-lexical 'tmp)))) bg1b04@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1b02@t))) (bgd61@syntax-dispatch bg1b02@t '(_ any each-any . each-any)))) bg1afc@e)))) '#f '#f '#f '#f)))) (set! bgd6b@ellipsis-map (lambda (bg1b80@proc bg1b81@ls . bg1b84@ls*) ((lambda (bg1b87@who) (begin (set! bg1b87@who '...) (begin (if (not (list? bg1b81@ls)) (assertion-violation bg1b87@who '"not a list" bg1b81@ls) (void)) (if (not (null? bg1b84@ls*)) ((lambda (bg1b88@n) (for-each (lambda (bg1b8a@x) (begin (if (not (list? bg1b8a@x)) (assertion-violation bg1b87@who '"not a list" bg1b8a@x) (void)) (if (not (= (length bg1b8a@x) bg1b88@n)) (assertion-violation bg1b87@who '"length mismatch" bg1b81@ls bg1b8a@x) (void)))) bg1b84@ls*)) (length bg1b81@ls)) (void)) (apply map bg1b80@proc bg1b81@ls bg1b84@ls*)))) '#f))) (set! bgd6d@syntax-transformer ((lambda () ((lambda (bg1b8d@gen-syntax bg1b8f@gen-ref bg1b91@gen-append bg1b93@gen-mappend bg1b95@gen-map bg1b97@gen-cons bg1b99@gen-vector bg1b9b@regen) (begin (set! bg1b8d@gen-syntax (lambda (bg1c04@src bg1c05@e bg1c06@r bg1c07@maps bg1c08@ellipsis? bg1c09@vec?) ((lambda (bg1c10@t) ((lambda (bg1c12@ls/false) (if (and bg1c12@ls/false (apply (lambda (bg1c14@dots) (bg1c08@ellipsis? bg1c14@dots)) bg1c12@ls/false)) (apply (lambda (bg1c16@dots) (bge41@syntax-violation '#f '"misplaced ellipsis in syntax form" bg1c04@src)) bg1c12@ls/false) ((lambda (bg1c18@t) ((lambda (bg1c1a@ls/false) (if (and bg1c1a@ls/false (apply (lambda (bg1c1c@id) (bgb5c@id? bg1c1c@id)) bg1c1a@ls/false)) (apply (lambda (bg1c1e@id) ((lambda (bg1c20@label) ((lambda (bg1c22@b) ((lambda () (if (eq? (bgb78@binding-type bg1c22@b) 'syntax) (call-with-values (lambda () ((lambda (bg1c28@var.lev) (bg1b8f@gen-ref bg1c04@src (car bg1c28@var.lev) (cdr bg1c28@var.lev) bg1c07@maps)) (bgb7a@binding-value bg1c22@b))) (lambda (bg1c2a@bg1c25 bg1c2b@bg1c27) ((lambda (bg1c2e@maps bg1c2f@var) (values (list 'ref bg1c2f@var) bg1c2e@maps)) bg1c2b@bg1c27 bg1c2a@bg1c25))) (values (list 'quote bg1c05@e) bg1c07@maps))))) (bgb74@label->binding bg1c20@label bg1c06@r))) (bgb72@id->label bg1c05@e))) bg1c1a@ls/false) ((lambda (bg1c32@t) ((lambda (bg1c34@ls/false) (if (and bg1c34@ls/false (apply (lambda (bg1c36@dots bg1c37@e) (bg1c08@ellipsis? bg1c36@dots)) bg1c34@ls/false)) (apply (lambda (bg1c3a@dots bg1c3b@e) (if bg1c09@vec? (bge41@syntax-violation '#f '"misplaced ellipsis in syntax form" bg1c04@src) (bg1b8d@gen-syntax bg1c04@src bg1c3b@e bg1c06@r bg1c07@maps (lambda (bg1c3e@x) '#f) '#f))) bg1c34@ls/false) ((lambda (bg1c40@t) ((lambda (bg1c42@ls/false) (if (and bg1c42@ls/false (apply (lambda (bg1c44@x bg1c45@dots bg1c46@y) (bg1c08@ellipsis? bg1c45@dots)) bg1c42@ls/false)) (apply (lambda (bg1c4a@x bg1c4b@dots bg1c4c@y) ((letrec ((bg1c50@f (lambda (bg1c52@y bg1c53@k) ((lambda (bg1c56@t) ((lambda (bg1c58@ls/false) (if bg1c58@ls/false (apply (lambda () (bg1c53@k bg1c07@maps)) bg1c58@ls/false) ((lambda (bg1c5a@t) ((lambda (bg1c5c@ls/false) (if (and bg1c5c@ls/false (apply (lambda (bg1c5e@dots bg1c5f@y) (bg1c08@ellipsis? bg1c5e@dots)) bg1c5c@ls/false)) (apply (lambda (bg1c62@dots bg1c63@y) (bg1c50@f bg1c63@y (lambda (bg1c66@maps) (call-with-values (lambda () (bg1c53@k (cons '() bg1c66@maps))) (lambda (bg1c6c@bg1c69 bg1c6d@bg1c6b) ((lambda (bg1c70@maps bg1c71@x) (if (null? (car bg1c70@maps)) (bge41@syntax-violation '#f '"extra ellipsis in syntax form" bg1c04@src) (values (bg1b93@gen-mappend bg1c71@x (car bg1c70@maps)) (cdr bg1c70@maps)))) bg1c6d@bg1c6b bg1c6c@bg1c69)))))) bg1c5c@ls/false) ((lambda (bg1c74@t) ((lambda (bg1c76@ls/false) (if bg1c76@ls/false (apply (lambda () (call-with-values (lambda () (bg1b8d@gen-syntax bg1c04@src bg1c52@y bg1c06@r bg1c07@maps bg1c08@ellipsis? bg1c09@vec?)) (lambda (bg1c7c@bg1c79 bg1c7d@bg1c7b) ((lambda (bg1c80@maps bg1c81@y) (call-with-values (lambda () (bg1c53@k bg1c80@maps)) (lambda (bg1c88@bg1c85 bg1c89@bg1c87) ((lambda (bg1c8c@maps bg1c8d@x) (values (bg1b91@gen-append bg1c8d@x bg1c81@y) bg1c8c@maps)) bg1c89@bg1c87 bg1c88@bg1c85)))) bg1c7d@bg1c7b bg1c7c@bg1c79)))) bg1c76@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1c74@t))) (bgd61@syntax-dispatch bg1c74@t '_))) bg1c5a@t))) (bgd61@syntax-dispatch bg1c5a@t '(any . any)))) bg1c56@t))) (bgd61@syntax-dispatch bg1c56@t '()))) bg1c52@y)))) bg1c50@f) bg1c4c@y (lambda (bg1c90@maps) (call-with-values (lambda () (bg1b8d@gen-syntax bg1c04@src bg1c4a@x bg1c06@r (cons '() bg1c90@maps) bg1c08@ellipsis? '#f)) (lambda (bg1c96@bg1c93 bg1c97@bg1c95) ((lambda (bg1c9a@maps bg1c9b@x) (if (null? (car bg1c9a@maps)) (bge41@syntax-violation '#f '"extra ellipsis in syntax form" bg1c04@src) (values (bg1b95@gen-map bg1c9b@x (car bg1c9a@maps)) (cdr bg1c9a@maps)))) bg1c97@bg1c95 bg1c96@bg1c93)))))) bg1c42@ls/false) ((lambda (bg1c9e@t) ((lambda (bg1ca0@ls/false) (if bg1ca0@ls/false (apply (lambda (bg1ca2@x bg1ca3@y) (call-with-values (lambda () (bg1b8d@gen-syntax bg1c04@src bg1ca2@x bg1c06@r bg1c07@maps bg1c08@ellipsis? '#f)) (lambda (bg1caa@bg1ca7 bg1cab@bg1ca9) ((lambda (bg1cae@maps bg1caf@xnew) (call-with-values (lambda () (bg1b8d@gen-syntax bg1c04@src bg1ca3@y bg1c06@r bg1cae@maps bg1c08@ellipsis? bg1c09@vec?)) (lambda (bg1cb6@bg1cb3 bg1cb7@bg1cb5) ((lambda (bg1cba@maps bg1cbb@ynew) (values (bg1b97@gen-cons bg1c05@e bg1ca2@x bg1ca3@y bg1caf@xnew bg1cbb@ynew) bg1cba@maps)) bg1cb7@bg1cb5 bg1cb6@bg1cb3)))) bg1cab@bg1ca9 bg1caa@bg1ca7)))) bg1ca0@ls/false) ((lambda (bg1cbe@t) ((lambda (bg1cc0@ls/false) (if bg1cc0@ls/false (apply (lambda (bg1cc2@ls) (call-with-values (lambda () (bg1b8d@gen-syntax bg1c04@src bg1cc2@ls bg1c06@r bg1c07@maps bg1c08@ellipsis? '#t)) (lambda (bg1cc8@bg1cc5 bg1cc9@bg1cc7) ((lambda (bg1ccc@maps bg1ccd@lsnew) (values (bg1b99@gen-vector bg1c05@e bg1cc2@ls bg1ccd@lsnew) bg1ccc@maps)) bg1cc9@bg1cc7 bg1cc8@bg1cc5)))) bg1cc0@ls/false) ((lambda (bg1cd0@t) ((lambda (bg1cd2@ls/false) (if bg1cd2@ls/false (apply (lambda () (values (list 'quote bg1c05@e) bg1c07@maps)) bg1cd2@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1cd0@t))) (bgd61@syntax-dispatch bg1cd0@t '_))) bg1cbe@t))) (bgd61@syntax-dispatch bg1cbe@t '#(vector each-any)))) bg1c9e@t))) (bgd61@syntax-dispatch bg1c9e@t '(any . any)))) bg1c40@t))) (bgd61@syntax-dispatch bg1c40@t '(any any . any)))) bg1c32@t))) (bgd61@syntax-dispatch bg1c32@t '(any any)))) bg1c18@t))) (bgd61@syntax-dispatch bg1c18@t 'any))) bg1c10@t))) (bgd61@syntax-dispatch bg1c10@t 'any))) bg1c05@e))) (set! bg1b8f@gen-ref (lambda (bg1bea@src bg1beb@var bg1bec@level bg1bed@maps) (if (= bg1bec@level '0) (values bg1beb@var bg1bed@maps) (if (null? bg1bed@maps) (bge41@syntax-violation '#f '"missing ellipsis in syntax form" bg1bea@src) (call-with-values (lambda () (bg1b8f@gen-ref bg1bea@src bg1beb@var (- bg1bec@level '1) (cdr bg1bed@maps))) (lambda (bg1bf6@bg1bf3 bg1bf7@bg1bf5) ((lambda (bg1bfa@outer-maps bg1bfb@outer-var) ((lambda (bg1bfe@t) (if bg1bfe@t ((lambda (bg1c00@b) (values (cdr bg1c00@b) bg1bed@maps)) bg1bfe@t) ((lambda (bg1c02@inner-var) (values bg1c02@inner-var (cons (cons (cons bg1bfb@outer-var bg1c02@inner-var) (car bg1bed@maps)) bg1bfa@outer-maps))) (bgae4@gen-lexical 'tmp)))) (assq bg1bfb@outer-var (car bg1bed@maps)))) bg1bf7@bg1bf5 bg1bf6@bg1bf3))))))) (set! bg1b91@gen-append (lambda (bg1be6@x bg1be7@y) (if (fast-equal? bg1be7@y ''()) bg1be6@x (list 'append bg1be6@x bg1be7@y)))) (set! bg1b93@gen-mappend (lambda (bg1be2@e bg1be3@map-env) (list 'apply '(primitive append) (bg1b95@gen-map bg1be2@e bg1be3@map-env)))) (set! bg1b95@gen-map (lambda (bg1bd0@e bg1bd1@map-env) ((lambda (bg1bd4@formals bg1bd5@actuals) (if (eq? (car bg1bd0@e) 'ref) (car bg1bd5@actuals) (if (for-all (lambda (bg1bd8@x) (and (eq? (car bg1bd8@x) 'ref) (memq (cadr bg1bd8@x) bg1bd4@formals))) (cdr bg1bd0@e)) ((lambda (bg1bda@args) (cons 'map (cons (list 'primitive (car bg1bd0@e)) bg1bda@args))) (map ((lambda (bg1bdc@r) (lambda (bg1bde@x) (cdr (assq (cadr bg1bde@x) bg1bdc@r)))) (map cons bg1bd4@formals bg1bd5@actuals)) (cdr bg1bd0@e))) (cons* 'map (list 'lambda bg1bd4@formals bg1bd0@e) bg1bd5@actuals)))) (map cdr bg1bd1@map-env) (map (lambda (bg1be0@x) (list 'ref (car bg1be0@x))) bg1bd1@map-env)))) (set! bg1b97@gen-cons (lambda (bg1bc0@e bg1bc1@x bg1bc2@y bg1bc3@xnew bg1bc4@ynew) ((lambda (bg1bca@t) (if (memv bg1bca@t '(quote)) (if (eq? (car bg1bc3@xnew) 'quote) ((lambda (bg1bcc@xnew bg1bcd@ynew) (if (and (eq? bg1bcc@xnew bg1bc1@x) (eq? bg1bcd@ynew bg1bc2@y)) (list 'quote bg1bc0@e) (list 'quote (cons bg1bcc@xnew bg1bcd@ynew)))) (cadr bg1bc3@xnew) (cadr bg1bc4@ynew)) (if (null? (cadr bg1bc4@ynew)) (list 'list bg1bc3@xnew) (list 'cons bg1bc3@xnew bg1bc4@ynew))) (if (memv bg1bca@t '(list)) (cons 'list (cons bg1bc3@xnew (cdr bg1bc4@ynew))) (list 'cons bg1bc3@xnew bg1bc4@ynew)))) (car bg1bc4@ynew)))) (set! bg1b99@gen-vector (lambda (bg1bba@e bg1bbb@ls bg1bbc@lsnew) (if (eq? (car bg1bbc@lsnew) 'quote) (if (eq? (cadr bg1bbc@lsnew) bg1bbb@ls) (list 'quote bg1bba@e) (list 'quote (list->vector (cadr bg1bbc@lsnew)))) (if (eq? (car bg1bbc@lsnew) 'list) (cons 'vector (cdr bg1bbc@lsnew)) (list 'list->vector bg1bbc@lsnew))))) (set! bg1b9b@regen (lambda (bg1bb4@x) ((lambda (bg1bb6@t) (if (memv bg1bb6@t '(ref)) (cadr bg1bb4@x) (if (memv bg1bb6@t '(primitive)) (list 'primitive (cadr bg1bb4@x)) (if (memv bg1bb6@t '(quote)) (list 'quote (cadr bg1bb4@x)) (if (memv bg1bb6@t '(lambda)) (bgac0@bga00@build-lambda '#f (cadr bg1bb4@x) (bg1b9b@regen (caddr bg1bb4@x))) (if (memv bg1bb6@t '(map)) ((lambda (bg1bb8@ls) (cons '(primitive ellipsis-map) bg1bb8@ls)) (map bg1b9b@regen (cdr bg1bb4@x))) (cons (list 'primitive (car bg1bb4@x)) (map bg1b9b@regen (cdr bg1bb4@x))))))))) (car bg1bb4@x)))) (lambda (bg1b9c@e bg1b9d@r bg1b9e@mr) ((lambda (bg1ba2@t) ((lambda (bg1ba4@ls/false) (if bg1ba4@ls/false (apply (lambda (bg1ba6@x) (call-with-values (lambda () (bg1b8d@gen-syntax bg1b9c@e bg1ba6@x bg1b9d@r '() bgd63@ellipsis? '#f)) (lambda (bg1bac@bg1ba9 bg1bad@bg1bab) ((lambda (bg1bb0@maps bg1bb1@e) (bg1b9b@regen bg1bb1@e)) bg1bad@bg1bab bg1bac@bg1ba9)))) bg1ba4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1ba2@t))) (bgd61@syntax-dispatch bg1ba2@t '(_ any)))) bg1b9c@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! bgd6f@core-macro-transformer (lambda (bg1cd4@name) ((lambda (bg1cd6@t) (if (memv bg1cd6@t '(quote)) bgd11@quote-transformer (if (memv bg1cd6@t '(lambda)) bgd15@lambda-transformer (if (memv bg1cd6@t '(case-lambda)) bgd13@case-lambda-transformer (if (memv bg1cd6@t '(letrec)) bgcf9@letrec-transformer (if (memv bg1cd6@t '(letrec*)) bgcfb@letrec*-transformer (if (memv bg1cd6@t '(if)) bgd09@if-transformer (if (memv bg1cd6@t '(and)) bgd0b@and-transformer (if (memv bg1cd6@t '(or)) bgd0d@or-transformer (if (memv bg1cd6@t '(foreign-call)) bgd5d@foreign-call-transformer (if (memv bg1cd6@t '(syntax-case)) bgd69@syntax-case-transformer (if (memv bg1cd6@t '(syntax)) bgd6d@syntax-transformer (if (memv bg1cd6@t '(type-descriptor)) bgcff@type-descriptor-transformer (if (memv bg1cd6@t '(record-type-descriptor)) bgd01@record-type-descriptor-transformer (if (memv bg1cd6@t '(record-constructor-descriptor)) bgd03@record-constructor-descriptor-transformer (if (memv bg1cd6@t '(fluid-let-syntax)) bgcfd@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bg1cd4@name))))))))))))))))) bg1cd4@name))) (set! bgd71@symbol-macro (lambda (bg1cd8@x bg1cd9@set) ((lambda (bg1cdc@t) ((lambda (bg1cde@ls/false) (if (and bg1cde@ls/false (apply (lambda (bg1ce0@name) (and (bgb5c@id? bg1ce0@name) (memq (bgb5e@id->sym bg1ce0@name) bg1cd9@set))) bg1cde@ls/false)) (apply (lambda (bg1ce2@name) (bgd17@bless (list 'quote bg1ce2@name))) bg1cde@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1cdc@t))) (bgd61@syntax-dispatch bg1cdc@t '(_ any)))) bg1cd8@x))) (set! bgd73@macro-transformer (lambda (bg1ce4@x) (if (procedure? bg1ce4@x) bg1ce4@x (if (symbol? bg1ce4@x) ((lambda (bg1ce6@t) (if (memv bg1ce6@t '(define-record-type)) bgd55@define-record-type-macro (if (memv bg1ce6@t '(define-struct)) bgd53@define-struct-macro (if (memv bg1ce6@t '(include)) bgd49@include-macro (if (memv bg1ce6@t '(cond)) bgd45@cond-macro (if (memv bg1ce6@t '(let)) bgd1d@let-macro (if (memv bg1ce6@t '(do)) bgd3d@do-macro (if (memv bg1ce6@t '(or)) bgd41@or-macro (if (memv bg1ce6@t '(and)) bgd43@and-macro (if (memv bg1ce6@t '(let*)) bgd3f@let*-macro (if (memv bg1ce6@t '(let-values)) bgd1f@let-values-macro (if (memv bg1ce6@t '(let*-values)) bgd21@let*-values-macro (if (memv bg1ce6@t '(syntax-rules)) bgd4d@syntax-rules-macro (if (memv bg1ce6@t '(quasiquote)) bgd4f@quasiquote-macro (if (memv bg1ce6@t '(quasisyntax)) bgd51@quasisyntax-macro (if (memv bg1ce6@t '(with-syntax)) bgd19@with-syntax-macro (if (memv bg1ce6@t '(when)) bgd05@when-macro (if (memv bg1ce6@t '(unless)) bgd07@unless-macro (if (memv bg1ce6@t '(case)) bgd0f@case-macro (if (memv bg1ce6@t '(identifier-syntax)) bgd3b@identifier-syntax-macro (if (memv bg1ce6@t '(time)) bgd33@time-macro (if (memv bg1ce6@t '(delay)) bgd35@delay-macro (if (memv bg1ce6@t '(assert)) bgd37@assert-macro (if (memv bg1ce6@t '(endianness)) bgd39@endianness-macro (if (memv bg1ce6@t '(guard)) bgd2f@guard-macro (if (memv bg1ce6@t '(define-enumeration)) bgd31@define-enumeration-macro (if (memv bg1ce6@t '(trace-lambda)) bgd23@trace-lambda-macro (if (memv bg1ce6@t '(trace-define)) bgd25@trace-define-macro (if (memv bg1ce6@t '(trace-define-syntax)) bgd27@trace-define-syntax-macro (if (memv bg1ce6@t '(trace-let-syntax)) bgd2b@trace-let-syntax-macro (if (memv bg1ce6@t '(trace-letrec-syntax)) bgd2d@trace-letrec-syntax-macro (if (memv bg1ce6@t '(define-condition-type)) bgd57@define-condition-type-macro (if (memv bg1ce6@t '(parameterize)) bgd5b@parameterize-macro (if (memv bg1ce6@t '(include-into)) bgd4b@include-into-macro (if (memv bg1ce6@t '(eol-style)) (lambda (bg1ce8@x) (bgd71@symbol-macro bg1ce8@x '(none lf cr crlf nel crnel ls))) (if (memv bg1ce6@t '(error-handling-mode)) (lambda (bg1cea@x) (bgd71@symbol-macro bg1cea@x '(ignore raise replace))) (if (memv bg1ce6@t '(buffer-mode)) (lambda (bg1cec@x) (bgd71@symbol-macro bg1cec@x '(none line block))) (if (memv bg1ce6@t '(file-options)) bgad7@file-options-macro (if (memv bg1ce6@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bgd59@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bg1ce4@x)))))))))))))))))))))))))))))))))))))))) bg1ce4@x) (error 'core-macro-transformer '"BUG: invalid macro" bg1ce4@x))))) (set! bgd75@local-macro-transformer (lambda (bg1cee@x) (car bg1cee@x))) (set! bgd77@do-macro-call (lambda (bg1cf0@transformer bg1cf1@expr) ((lambda (bg1cf4@out) (begin ((letrec ((bg1cf6@f (lambda (bg1cf8@x) (if (not (bgb28@stx? bg1cf8@x)) (if (pair? bg1cf8@x) (begin (bg1cf6@f (car bg1cf8@x)) (bg1cf6@f (cdr bg1cf8@x))) (if (vector? bg1cf8@x) (vector-for-each bg1cf6@f bg1cf8@x) (if (symbol? bg1cf8@x) (bge41@syntax-violation '#f '"raw symbol encountered in output of macro" bg1cf1@expr bg1cf8@x) (void)))) (void))))) bg1cf6@f) bg1cf4@out) (bgb46@add-mark (bgb3e@gen-mark) bg1cf4@out bg1cf1@expr))) (bg1cf0@transformer (bgb46@add-mark bgb40@anti-mark bg1cf1@expr '#f))))) (set! bgd79@chi-macro (lambda (bg1cfa@p bg1cfb@e) (bgd77@do-macro-call (bgd73@macro-transformer bg1cfa@p) bg1cfb@e))) (set! bgd7b@chi-local-macro (lambda (bg1cfe@p bg1cff@e) (bgd77@do-macro-call (bgd75@local-macro-transformer bg1cfe@p) bg1cff@e))) (set! bgd7d@chi-global-macro (lambda (bg1d02@p bg1d03@e) ((lambda (bg1d06@lib bg1d07@loc) (begin (bg988@bg7d7@visit-library bg1d06@lib) ((lambda (bg1d0a@x) ((lambda (bg1d0c@transformer) (bgd77@do-macro-call bg1d0c@transformer bg1d03@e)) (if (procedure? bg1d0a@x) bg1d0a@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bg1d0a@x)))) (symbol-value bg1d07@loc)))) (car bg1d02@p) (cdr bg1d02@p)))) (set! bgd7f@chi-expr* (lambda (bg1d0e@e* bg1d0f@r bg1d10@mr) (if (null? bg1d0e@e*) '() ((lambda (bg1d14@e) (cons bg1d14@e (bgd7f@chi-expr* (cdr bg1d0e@e*) bg1d0f@r bg1d10@mr))) (bgd83@chi-expr (car bg1d0e@e*) bg1d0f@r bg1d10@mr))))) (set! bgd81@chi-application (lambda (bg1d16@e bg1d17@r bg1d18@mr) ((lambda (bg1d1c@t) ((lambda (bg1d1e@ls/false) (if bg1d1e@ls/false (apply (lambda (bg1d20@rator bg1d21@rands) ((lambda (bg1d24@rator) (cons bg1d24@rator (bgd7f@chi-expr* bg1d21@rands bg1d17@r bg1d18@mr))) (bgd83@chi-expr bg1d20@rator bg1d17@r bg1d18@mr))) bg1d1e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1d1c@t))) (bgd61@syntax-dispatch bg1d1c@t '(any . each-any)))) bg1d16@e))) (set! bgd83@chi-expr (lambda (bg1d26@e bg1d27@r bg1d28@mr) (call-with-values (lambda () (bgb7e@syntax-type bg1d26@e bg1d27@r)) (lambda (bg1d32@bg1d2d bg1d33@bg1d2f bg1d34@bg1d31) ((lambda (bg1d38@kwd bg1d39@value bg1d3a@type) ((lambda (bg1d3e@t) (if (memv bg1d3e@t '(core-macro)) ((lambda (bg1d40@transformer) (bg1d40@transformer bg1d26@e bg1d27@r bg1d28@mr)) (bgd6f@core-macro-transformer bg1d39@value)) (if (memv bg1d3e@t '(global)) ((lambda (bg1d42@lib) ((lambda (bg1d44@loc) ((lambda () (begin ((bgdc9@inv-collector) bg1d42@lib) bg1d44@loc)))) (cdr bg1d39@value))) (car bg1d39@value)) (if (memv bg1d3e@t '(core-prim)) ((lambda (bg1d46@name) (list 'primitive bg1d46@name)) bg1d39@value) (if (memv bg1d3e@t '(call)) (bgd81@chi-application bg1d26@e bg1d27@r bg1d28@mr) (if (memv bg1d3e@t '(lexical)) ((lambda (bg1d48@lex) bg1d48@lex) (bgced@lexical-var bg1d39@value)) (if (memv bg1d3e@t '(global-macro global-macro!)) (bgd83@chi-expr (bgd7d@chi-global-macro bg1d39@value bg1d26@e) bg1d27@r bg1d28@mr) (if (memv bg1d3e@t '(local-macro local-macro!)) (bgd83@chi-expr (bgd7b@chi-local-macro bg1d39@value bg1d26@e) bg1d27@r bg1d28@mr) (if (memv bg1d3e@t '(macro macro!)) (bgd83@chi-expr (bgd79@chi-macro bg1d39@value bg1d26@e) bg1d27@r bg1d28@mr) (if (memv bg1d3e@t '(constant)) ((lambda (bg1d4a@datum) (list 'quote bg1d4a@datum)) bg1d39@value) (if (memv bg1d3e@t '(set!)) (bgd85@chi-set! bg1d26@e bg1d27@r bg1d28@mr) (if (memv bg1d3e@t '(begin)) ((lambda (bg1d4c@t) ((lambda (bg1d4e@ls/false) (if bg1d4e@ls/false (apply (lambda (bg1d50@x bg1d51@x*) (bgac3@bga32@build-sequence '#f (bgd7f@chi-expr* (cons bg1d50@x bg1d51@x*) bg1d27@r bg1d28@mr))) bg1d4e@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1d4c@t))) (bgd61@syntax-dispatch bg1d4c@t '(_ any . each-any)))) bg1d26@e) (if (memv bg1d3e@t '(let-syntax letrec-syntax)) ((lambda (bg1d54@t) ((lambda (bg1d56@ls/false) (if (and bg1d56@ls/false (apply (lambda (bg1d58@xlhs* bg1d59@xrhs* bg1d5a@xbody bg1d5b@xbody*) (if (not (bgb64@valid-bound-ids? bg1d58@xlhs*)) (bge41@syntax-violation '#f '"invalid identifiers" bg1d26@e) (void))) bg1d56@ls/false)) (apply (lambda (bg1d60@xlhs* bg1d61@xrhs* bg1d62@xbody bg1d63@xbody*) ((lambda (bg1d68@xlab*) ((lambda (bg1d6a@xrib) ((lambda (bg1d6c@xb*) ((lambda () (bgac3@bga32@build-sequence '#f (bgd7f@chi-expr* (map (lambda (bg1d6e@x) (bgb48@add-subst bg1d6a@xrib bg1d6e@x)) (cons bg1d62@xbody bg1d63@xbody*)) (append (map cons bg1d68@xlab* bg1d6c@xb*) bg1d27@r) (append (map cons bg1d68@xlab* bg1d6c@xb*) bg1d28@mr)))))) (map (lambda (bg1d70@x) (bgb94@make-eval-transformer (bgdbb@expand-transformer (if (eq? bg1d3a@type 'let-syntax) bg1d70@x (bgb48@add-subst bg1d6a@xrib bg1d70@x)) bg1d28@mr))) bg1d61@xrhs*))) (bgb1c@make-full-rib bg1d60@xlhs* bg1d68@xlab*))) (map bgae8@gen-label bg1d60@xlhs*))) bg1d56@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1d54@t))) (bgd61@syntax-dispatch bg1d54@t '(_ #(each (any any)) any . each-any)))) bg1d26@e) (if (memv bg1d3e@t '(displaced-lexical)) (bge41@syntax-violation '#f '"identifier out of context" bg1d26@e) (if (memv bg1d3e@t '(syntax)) (bge41@syntax-violation '#f '"reference to pattern variable outside a syntax form" bg1d26@e) (if (memv bg1d3e@t '(define define-syntax module import library)) (bge41@syntax-violation '#f (string-append ((lambda (bg1d72@t) (if (memv bg1d72@t '(define)) '"a definition" (if (memv bg1d72@t '(define-syntax)) '"a define-syntax" (if (memv bg1d72@t '(module)) '"a module definition" (if (memv bg1d72@t '(library)) '"a library definition" (if (memv bg1d72@t '(import)) '"an import declaration" (if (memv bg1d72@t '(export)) '"an export declaration" '"a non-expression"))))))) bg1d3a@type) '" was found where an expression was expected") bg1d26@e) (if (memv bg1d3e@t '(mutable)) (bge41@syntax-violation '#f '"attempt to reference an unexportable variable" bg1d26@e) (bge41@syntax-violation '#f '"invalid expression" bg1d26@e)))))))))))))))))) bg1d3a@type)) bg1d34@bg1d31 bg1d33@bg1d2f bg1d32@bg1d2d))))) (set! bgd85@chi-set! (lambda (bg1d74@e bg1d75@r bg1d76@mr) ((lambda (bg1d7a@t) ((lambda (bg1d7c@ls/false) (if (and bg1d7c@ls/false (apply (lambda (bg1d7e@x bg1d7f@v) (bgb5c@id? bg1d7e@x)) bg1d7c@ls/false)) (apply (lambda (bg1d82@x bg1d83@v) (call-with-values (lambda () (bgb7e@syntax-type bg1d82@x bg1d75@r)) (lambda (bg1d8c@bg1d87 bg1d8d@bg1d89 bg1d8e@bg1d8b) ((lambda (bg1d92@kwd bg1d93@value bg1d94@type) ((lambda (bg1d98@t) (if (memv bg1d98@t '(lexical)) (begin (bgcf1@set-lexical-mutable! bg1d93@value '#t) (list 'set! (bgced@lexical-var bg1d93@value) (bgd83@chi-expr bg1d83@v bg1d75@r bg1d76@mr))) (if (memv bg1d98@t '(core-prim)) (bge41@syntax-violation '#f '"cannot modify imported core primitive" bg1d74@e) (if (memv bg1d98@t '(global)) (bge41@syntax-violation '#f '"attempt to modify imported binding" bg1d74@e) (if (memv bg1d98@t '(global-macro!)) (bgd83@chi-expr (bgd7d@chi-global-macro bg1d93@value bg1d74@e) bg1d75@r bg1d76@mr) (if (memv bg1d98@t '(local-macro!)) (bgd83@chi-expr (bgd7b@chi-local-macro bg1d93@value bg1d74@e) bg1d75@r bg1d76@mr) (if (memv bg1d98@t '(mutable)) (bge41@syntax-violation '#f '"attempt to assign to an unexportable variable" bg1d74@e) (bge41@syntax-violation '#f '"invalid syntax" bg1d74@e)))))))) bg1d94@type)) bg1d8e@bg1d8b bg1d8d@bg1d89 bg1d8c@bg1d87)))) bg1d7c@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1d7a@t))) (bgd61@syntax-dispatch bg1d7a@t '(_ any any)))) bg1d74@e))) (set! bgd87@verify-formals (lambda (bg1d9a@fmls bg1d9b@stx) ((lambda (bg1d9e@t) ((lambda (bg1da0@ls/false) (if bg1da0@ls/false (apply (lambda (bg1da2@x*) (if (not (bgb64@valid-bound-ids? bg1da2@x*)) (bgd1b@invalid-fmls-error bg1d9b@stx bg1d9a@fmls) (void))) bg1da0@ls/false) ((lambda (bg1da4@t) ((lambda (bg1da6@ls/false) (if bg1da6@ls/false (apply (lambda (bg1da8@x* bg1da9@x) (if (not (bgb64@valid-bound-ids? (cons bg1da9@x bg1da8@x*))) (bgd1b@invalid-fmls-error bg1d9b@stx bg1d9a@fmls) (void))) bg1da6@ls/false) ((lambda (bg1dac@t) ((lambda (bg1dae@ls/false) (if bg1dae@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid syntax" bg1d9b@stx)) bg1dae@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1dac@t))) (bgd61@syntax-dispatch bg1dac@t '_))) bg1da4@t))) (bgd61@syntax-dispatch bg1da4@t '#(each+ any () any)))) bg1d9e@t))) (bgd61@syntax-dispatch bg1d9e@t 'each-any))) bg1d9a@fmls))) (set! bgd89@chi-lambda-clause (lambda (bg1db0@stx bg1db1@fmls bg1db2@body* bg1db3@r bg1db4@mr) ((lambda (bg1dba@t) ((lambda (bg1dbc@ls/false) (if bg1dbc@ls/false (apply (lambda (bg1dbe@x*) (begin (bgd87@verify-formals bg1db1@fmls bg1db0@stx) ((lambda (bg1dc0@lex* bg1dc1@lab*) (values bg1dc0@lex* (bgd99@chi-internal (bgb48@add-subst (bgb1c@make-full-rib bg1dbe@x* bg1dc1@lab*) bg1db2@body*) (bgcf5@add-lexicals bg1dc1@lab* bg1dc0@lex* bg1db3@r) bg1db4@mr))) (map bgae4@gen-lexical bg1dbe@x*) (map bgae8@gen-label bg1dbe@x*)))) bg1dbc@ls/false) ((lambda (bg1dc4@t) ((lambda (bg1dc6@ls/false) (if bg1dc6@ls/false (apply (lambda (bg1dc8@x* bg1dc9@x) (begin (bgd87@verify-formals bg1db1@fmls bg1db0@stx) ((lambda (bg1dcc@lex* bg1dcd@lab* bg1dce@lex bg1dcf@lab) (values (append bg1dcc@lex* bg1dce@lex) (bgd99@chi-internal (bgb48@add-subst (bgb1c@make-full-rib (cons bg1dc9@x bg1dc8@x*) (cons bg1dcf@lab bg1dcd@lab*)) bg1db2@body*) (bgcf5@add-lexicals (cons bg1dcf@lab bg1dcd@lab*) (cons bg1dce@lex bg1dcc@lex*) bg1db3@r) bg1db4@mr))) (map bgae4@gen-lexical bg1dc8@x*) (map bgae8@gen-label bg1dc8@x*) (bgae4@gen-lexical bg1dc9@x) (bgae8@gen-label bg1dc9@x)))) bg1dc6@ls/false) ((lambda (bg1dd4@t) ((lambda (bg1dd6@ls/false) (if bg1dd6@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid syntax" bg1db1@fmls)) bg1dd6@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1dd4@t))) (bgd61@syntax-dispatch bg1dd4@t '_))) bg1dc4@t))) (bgd61@syntax-dispatch bg1dc4@t '#(each+ any () any)))) bg1dba@t))) (bgd61@syntax-dispatch bg1dba@t 'each-any))) bg1db1@fmls))) (set! bgd8b@chi-lambda-clause* (lambda (bg1dd8@stx bg1dd9@fmls* bg1dda@body** bg1ddb@r bg1ddc@mr) (if (null? bg1dd9@fmls*) (values '() '()) (call-with-values (lambda () (bgd89@chi-lambda-clause bg1dd8@stx (car bg1dd9@fmls*) (car bg1dda@body**) bg1ddb@r bg1ddc@mr)) (lambda (bg1de6@bg1de3 bg1de7@bg1de5) ((lambda (bg1dea@b bg1deb@a) (call-with-values (lambda () (bgd8b@chi-lambda-clause* bg1dd8@stx (cdr bg1dd9@fmls*) (cdr bg1dda@body**) bg1ddb@r bg1ddc@mr)) (lambda (bg1df2@bg1def bg1df3@bg1df1) ((lambda (bg1df6@b* bg1df7@a*) (values (cons bg1deb@a bg1df7@a*) (cons bg1dea@b bg1df6@b*))) bg1df3@bg1df1 bg1df2@bg1def)))) bg1de7@bg1de5 bg1de6@bg1de3)))))) (set! bgd8d@chi-defun (lambda (bg1dfa@x bg1dfb@r bg1dfc@mr) ((lambda (bg1e00@fmls bg1e01@body*) (call-with-values (lambda () (bgd89@chi-lambda-clause bg1e00@fmls bg1e00@fmls bg1e01@body* bg1dfb@r bg1dfc@mr)) (lambda (bg1e08@bg1e05 bg1e09@bg1e07) ((lambda (bg1e0c@body bg1e0d@fmls) (bgac0@bga00@build-lambda '#f bg1e0d@fmls bg1e0c@body)) bg1e09@bg1e07 bg1e08@bg1e05)))) (car bg1dfa@x) (cdr bg1dfa@x)))) (set! bgd8f@chi-rhs (lambda (bg1e10@rhs bg1e11@r bg1e12@mr) ((lambda (bg1e16@t) (if (memv bg1e16@t '(defun)) (bgd8d@chi-defun (cdr bg1e10@rhs) bg1e11@r bg1e12@mr) (if (memv bg1e16@t '(expr)) ((lambda (bg1e18@expr) (bgd83@chi-expr bg1e18@expr bg1e11@r bg1e12@mr)) (cdr bg1e10@rhs)) (if (memv bg1e16@t '(top-expr)) ((lambda (bg1e1a@expr) (bgac3@bga32@build-sequence '#f (list (bgd83@chi-expr bg1e1a@expr bg1e11@r bg1e12@mr) (bgac4@bga34@build-void)))) (cdr bg1e10@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bg1e10@rhs))))) (car bg1e10@rhs)))) (set! bgd91@expand-interaction-rhs*/init* (lambda (bg1e1c@lhs* bg1e1d@rhs* bg1e1e@init* bg1e1f@r bg1e20@mr) ((letrec ((bg1e26@f (lambda (bg1e28@lhs* bg1e29@rhs*) (if (null? bg1e28@lhs*) (map (lambda (bg1e2c@x) (bgd83@chi-expr bg1e2c@x bg1e1f@r bg1e20@mr)) bg1e1e@init*) ((lambda (bg1e2e@lhs bg1e2f@rhs) ((lambda (bg1e32@t) (if (memv bg1e32@t '(defun)) ((lambda (bg1e34@rhs) (cons (list 'set! bg1e2e@lhs bg1e34@rhs) (bg1e26@f (cdr bg1e28@lhs*) (cdr bg1e29@rhs*)))) (bgd8d@chi-defun (cdr bg1e2f@rhs) bg1e1f@r bg1e20@mr)) (if (memv bg1e32@t '(expr)) ((lambda (bg1e36@rhs) (cons (list 'set! bg1e2e@lhs bg1e36@rhs) (bg1e26@f (cdr bg1e28@lhs*) (cdr bg1e29@rhs*)))) (bgd83@chi-expr (cdr bg1e2f@rhs) bg1e1f@r bg1e20@mr)) (if (memv bg1e32@t '(top-expr)) ((lambda (bg1e38@e) (cons bg1e38@e (bg1e26@f (cdr bg1e28@lhs*) (cdr bg1e29@rhs*)))) (bgd83@chi-expr (cdr bg1e2f@rhs) bg1e1f@r bg1e20@mr)) (error 'expand-interaction '"invallid" bg1e2f@rhs))))) (car bg1e2f@rhs))) (car bg1e28@lhs*) (car bg1e29@rhs*)))))) bg1e26@f) bg1e1c@lhs* bg1e1d@rhs*))) (set! bgd93@chi-rhs* (lambda (bg1e3a@rhs* bg1e3b@r bg1e3c@mr) ((letrec ((bg1e40@f (lambda (bg1e42@ls) (if (null? bg1e42@ls) '() ((lambda (bg1e44@a) (cons bg1e44@a (bg1e40@f (cdr bg1e42@ls)))) (bgd8f@chi-rhs (car bg1e42@ls) bg1e3b@r bg1e3c@mr)))))) bg1e40@f) bg1e3a@rhs*))) (set! bgd95@find-bound=? (lambda (bg1e46@x bg1e47@lhs* bg1e48@rhs*) (if (null? bg1e47@lhs*) '#f (if (bgb60@bound-id=? bg1e46@x (car bg1e47@lhs*)) (car bg1e48@rhs*) (bgd95@find-bound=? bg1e46@x (cdr bg1e47@lhs*) (cdr bg1e48@rhs*)))))) (set! bgd97@find-dups (lambda (bg1e4c@ls) ((letrec ((bg1e4e@f (lambda (bg1e50@ls bg1e51@dups) (if (null? bg1e50@ls) bg1e51@dups ((lambda (bg1e54@t) (if bg1e54@t ((lambda (bg1e56@x) (bg1e4e@f (cdr bg1e50@ls) (cons (list (car bg1e50@ls) bg1e56@x) bg1e51@dups))) bg1e54@t) (bg1e4e@f (cdr bg1e50@ls) bg1e51@dups))) (bgd95@find-bound=? (car bg1e50@ls) (cdr bg1e50@ls) (cdr bg1e50@ls))))))) bg1e4e@f) bg1e4c@ls '()))) (set! bgd99@chi-internal (lambda (bg1e58@e* bg1e59@r bg1e5a@mr) ((lambda (bg1e5e@rib) (call-with-values (lambda () (bgdb9@chi-body* (map (lambda (bg1e70@x) (bgb48@add-subst bg1e5e@rib bg1e70@x)) (bgb5a@syntax->list bg1e58@e*)) bg1e59@r bg1e5a@mr '() '() '() '() '() bg1e5e@rib '#f)) (lambda (bg1e72@bg1e61 bg1e73@bg1e63 bg1e74@bg1e65 bg1e75@bg1e67 bg1e76@bg1e69 bg1e77@bg1e6b bg1e78@bg1e6d bg1e79@bg1e6f) ((lambda (bg1e82@_exp* bg1e83@kwd* bg1e84@mod** bg1e85@rhs* bg1e86@lex* bg1e87@mr bg1e88@r bg1e89@e*) (begin (if (null? bg1e89@e*) (bge41@syntax-violation '#f '"no expression in body" bg1e89@e*) (void)) ((lambda (bg1e92@init*) ((lambda (bg1e94@rhs*) ((lambda () (bgac6@bga38@build-letrec* '#f (reverse bg1e86@lex*) (reverse bg1e94@rhs*) (bgac3@bga32@build-sequence '#f bg1e92@init*))))) (bgd93@chi-rhs* bg1e85@rhs* bg1e88@r bg1e87@mr))) (bgd7f@chi-expr* (append (apply append (reverse bg1e84@mod**)) bg1e89@e*) bg1e88@r bg1e87@mr)))) bg1e79@bg1e6f bg1e78@bg1e6d bg1e77@bg1e6b bg1e76@bg1e69 bg1e75@bg1e67 bg1e74@bg1e65 bg1e73@bg1e63 bg1e72@bg1e61)))) (bgb10@make-empty-rib)))) (set! bgd9b@parse-module (lambda (bg1e96@e) ((lambda (bg1e98@t) ((lambda (bg1e9a@ls/false) (if bg1e9a@ls/false (apply (lambda (bg1e9c@export* bg1e9d@b*) (begin (if (not (for-all bgb5c@id? bg1e9c@export*)) (bge41@syntax-violation '#f '"module exports must be identifiers" bg1e96@e) (void)) (values '#f (list->vector bg1e9c@export*) bg1e9d@b*))) bg1e9a@ls/false) ((lambda (bg1ea0@t) ((lambda (bg1ea2@ls/false) (if bg1ea2@ls/false (apply (lambda (bg1ea4@name bg1ea5@export* bg1ea6@b*) (begin (if (not (bgb5c@id? bg1ea4@name)) (bge41@syntax-violation '#f '"module name must be an identifier" bg1e96@e) (void)) (if (not (for-all bgb5c@id? bg1ea5@export*)) (bge41@syntax-violation '#f '"module exports must be identifiers" bg1e96@e) (void)) (values bg1ea4@name (list->vector bg1ea5@export*) bg1ea6@b*))) bg1ea2@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1ea0@t))) (bgd61@syntax-dispatch bg1ea0@t '(_ any each-any . each-any)))) bg1e98@t))) (bgd61@syntax-dispatch bg1e98@t '(_ each-any . each-any)))) bg1e96@e))) (set! bgda5@module-interface? (lambda (bg1eaa@x) (and (simple-struct? bg1eaa@x) (eq? (simple-struct-name bg1eaa@x) 'module-interface)))) (set! bgda7@module-interface-first-mark (lambda (bg1eac@x) (simple-struct-ref bg1eac@x '0))) (set! bgda9@set-module-interface-first-mark! (lambda (bg1eae@x bg1eaf@val) (simple-struct-set! bg1eae@x '0 bg1eaf@val))) (set! bgdab@module-interface-exp-id-vec (lambda (bg1eb2@x) (simple-struct-ref bg1eb2@x '1))) (set! bgdad@set-module-interface-exp-id-vec! (lambda (bg1eb4@x bg1eb5@val) (simple-struct-set! bg1eb4@x '1 bg1eb5@val))) (set! bgdaf@module-interface-exp-lab-vec (lambda (bg1eb8@x) (simple-struct-ref bg1eb8@x '2))) (set! bgdb1@set-module-interface-exp-lab-vec! (lambda (bg1eba@x bg1ebb@val) (simple-struct-set! bg1eba@x '2 bg1ebb@val))) (set! bgdb3@dummy '3) (set! bgdb5@module-interface-exp-id* (lambda (bg1ebe@iface bg1ebf@id) ((lambda (bg1ec3@diff-marks) (begin (set! bg1ec3@diff-marks (lambda (bg1eca@ls bg1ecb@x) (begin (if (null? bg1eca@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (bg1ece@a) (if (eq? bg1ece@a bg1ecb@x) '() (cons bg1ece@a (bg1ec3@diff-marks (cdr bg1eca@ls) bg1ecb@x)))) (car bg1eca@ls))))) ((lambda (bg1ec4@diff bg1ec5@id-vec) (if (null? bg1ec4@diff) bg1ec5@id-vec (vector-map (lambda (bg1ec8@x) (make-simple-struct 'stx '5 (list (bgb2a@stx-expr bg1ec8@x) (append bg1ec4@diff (bgb2e@stx-mark* bg1ec8@x)) '() '()))) bg1ec5@id-vec))) (bg1ec3@diff-marks (bgb2e@stx-mark* bg1ebf@id) (bgda7@module-interface-first-mark bg1ebe@iface)) (bgdab@module-interface-exp-id-vec bg1ebe@iface)))) '#f))) (set! bgdb7@chi-internal-module (lambda (bg1ed0@e bg1ed1@r bg1ed2@mr bg1ed3@lex* bg1ed4@rhs* bg1ed5@mod** bg1ed6@kwd*) (call-with-values (lambda () (bgd9b@parse-module bg1ed0@e)) (lambda (bg1ee4@bg1edf bg1ee5@bg1ee1 bg1ee6@bg1ee3) ((lambda (bg1eea@e* bg1eeb@exp-id* bg1eec@name) ((lambda (bg1ef0@rib) ((lambda (bg1ef2@e*) ((lambda () (call-with-values (lambda () (bgdb9@chi-body* bg1ef2@e* bg1ed1@r bg1ed2@mr bg1ed3@lex* bg1ed4@rhs* bg1ed5@mod** bg1ed6@kwd* '() bg1ef0@rib '#f)) (lambda (bg1f04@bg1ef5 bg1f05@bg1ef7 bg1f06@bg1ef9 bg1f07@bg1efb bg1f08@bg1efd bg1f09@bg1eff bg1f0a@bg1f01 bg1f0b@bg1f03) ((lambda (bg1f14@_exp* bg1f15@kwd* bg1f16@mod** bg1f17@rhs* bg1f18@lex* bg1f19@mr bg1f1a@r bg1f1b@e*) ((lambda (bg1f24@exp-lab* bg1f25@mod**) (if (not bg1eec@name) (values bg1f18@lex* bg1f17@rhs* bg1eeb@exp-id* bg1f24@exp-lab* bg1f1a@r bg1f19@mr bg1f25@mod** bg1f15@kwd*) ((lambda (bg1f28@lab bg1f29@iface) (values bg1f18@lex* bg1f17@rhs* (vector bg1eec@name) (vector bg1f28@lab) (cons (cons bg1f28@lab (cons '$module bg1f29@iface)) bg1f1a@r) (cons (cons bg1f28@lab (cons '$module bg1f29@iface)) bg1f19@mr) bg1f25@mod** bg1f15@kwd*)) (bgae8@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (bgb2e@stx-mark* bg1eec@name)) (vector-map (lambda (bg1f2c@x) (make-simple-struct 'stx '5 (list (bgb2a@stx-expr bg1f2c@x) (bgb2e@stx-mark* bg1f2c@x) '() '()))) bg1eeb@exp-id*) bg1f24@exp-lab*))))) (vector-map (lambda (bg1f2e@x) (or (bgb72@id->label (make-simple-struct 'stx '5 (list (bgb5e@id->sym bg1f2e@x) (bgb2e@stx-mark* bg1f2e@x) (list bg1ef0@rib) '()))) (bge41@syntax-violation '#f '"cannot find module export" bg1f2e@x))) bg1eeb@exp-id*) (cons bg1f1b@e* bg1f16@mod**))) bg1f0b@bg1f03 bg1f0a@bg1f01 bg1f09@bg1eff bg1f08@bg1efd bg1f07@bg1efb bg1f06@bg1ef9 bg1f05@bg1ef7 bg1f04@bg1ef5)))))) (map (lambda (bg1f30@x) (bgb48@add-subst bg1ef0@rib bg1f30@x)) (bgb5a@syntax->list bg1eea@e*)))) (bgb10@make-empty-rib))) bg1ee6@bg1ee3 bg1ee5@bg1ee1 bg1ee4@bg1edf))))) (set! bgdb9@chi-body* (lambda (bg1f32@e* bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f38@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?) (if (null? bg1f32@e*) (values bg1f32@e* bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f38@kwd* bg1f39@exp*) ((lambda (bg1f46@e) (call-with-values (lambda () (bgb7e@syntax-type bg1f46@e bg1f33@r)) (lambda (bg1f4e@bg1f49 bg1f4f@bg1f4b bg1f50@bg1f4d) ((lambda (bg1f54@kwd bg1f55@value bg1f56@type) ((lambda (bg1f5a@kwd*) ((lambda (bg1f5c@t) (if (memv bg1f5c@t '(define)) (call-with-values (lambda () (bgce5@parse-define bg1f46@e)) (lambda (bg1f62@bg1f5f bg1f63@bg1f61) ((lambda (bg1f66@rhs bg1f67@id) (begin (if (bgb68@bound-id-member? bg1f67@id bg1f5a@kwd*) (bge41@syntax-violation '#f '"cannot redefine keyword" bg1f46@e) (void)) (call-with-values (lambda () (bgaec@gen-define-label+loc bg1f67@id bg1f3a@rib)) (lambda (bg1f6e@bg1f6b bg1f6f@bg1f6d) ((lambda (bg1f72@lex bg1f73@lab) (begin (bgb12@extend-rib! bg1f3a@rib bg1f67@id bg1f73@lab) (bgdb9@chi-body* (cdr bg1f32@e*) (bgcf3@add-lexical bg1f73@lab bg1f72@lex bg1f33@r) bg1f34@mr (cons bg1f72@lex bg1f35@lex*) (cons bg1f66@rhs bg1f36@rhs*) bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?))) bg1f6f@bg1f6d bg1f6e@bg1f6b))))) bg1f63@bg1f61 bg1f62@bg1f5f))) (if (memv bg1f5c@t '(define-syntax)) (call-with-values (lambda () (bgce7@parse-define-syntax bg1f46@e)) (lambda (bg1f7a@bg1f77 bg1f7b@bg1f79) ((lambda (bg1f7e@rhs bg1f7f@id) (begin (if (bgb68@bound-id-member? bg1f7f@id bg1f5a@kwd*) (bge41@syntax-violation '#f '"cannot redefine keyword" bg1f46@e) (void)) ((lambda (bg1f82@lab bg1f83@expanded-rhs) (begin (bgb12@extend-rib! bg1f3a@rib bg1f7f@id bg1f82@lab) ((lambda (bg1f86@b) (bgdb9@chi-body* (cdr bg1f32@e*) (cons (cons bg1f82@lab bg1f86@b) bg1f33@r) (cons (cons bg1f82@lab bg1f86@b) bg1f34@mr) bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?)) (bgb94@make-eval-transformer bg1f83@expanded-rhs)))) (bgaee@gen-define-label bg1f7f@id bg1f3a@rib) (bgdbb@expand-transformer bg1f7e@rhs bg1f34@mr)))) bg1f7b@bg1f79 bg1f7a@bg1f77))) (if (memv bg1f5c@t '(let-syntax letrec-syntax)) ((lambda (bg1f88@t) ((lambda (bg1f8a@ls/false) (if (and bg1f8a@ls/false (apply (lambda (bg1f8c@xlhs* bg1f8d@xrhs* bg1f8e@xbody*) (if (not (bgb64@valid-bound-ids? bg1f8c@xlhs*)) (bge41@syntax-violation '#f '"invalid identifiers" bg1f46@e) (void))) bg1f8a@ls/false)) (apply (lambda (bg1f92@xlhs* bg1f93@xrhs* bg1f94@xbody*) ((lambda (bg1f98@xlab*) ((lambda (bg1f9a@xrib) ((lambda (bg1f9c@xb*) ((lambda () (bgdb9@chi-body* (append (map (lambda (bg1f9e@x) (bgb48@add-subst bg1f9a@xrib bg1f9e@x)) bg1f94@xbody*) (cdr bg1f32@e*)) (append (map cons bg1f98@xlab* bg1f9c@xb*) bg1f33@r) (append (map cons bg1f98@xlab* bg1f9c@xb*) bg1f34@mr) bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?)))) (map (lambda (bg1fa0@x) (bgb94@make-eval-transformer (bgdbb@expand-transformer (if (eq? bg1f56@type 'let-syntax) bg1fa0@x (bgb48@add-subst bg1f9a@xrib bg1fa0@x)) bg1f34@mr))) bg1f93@xrhs*))) (bgb1c@make-full-rib bg1f92@xlhs* bg1f98@xlab*))) (map bgae8@gen-label bg1f92@xlhs*))) bg1f8a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1f88@t))) (bgd61@syntax-dispatch bg1f88@t '(_ #(each (any any)) . each-any)))) bg1f46@e) (if (memv bg1f5c@t '(begin)) ((lambda (bg1fa2@t) ((lambda (bg1fa4@ls/false) (if bg1fa4@ls/false (apply (lambda (bg1fa6@x*) (bgdb9@chi-body* (append bg1fa6@x* (cdr bg1f32@e*)) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?)) bg1fa4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1fa2@t))) (bgd61@syntax-dispatch bg1fa2@t '(_ . each-any)))) bg1f46@e) (if (memv bg1f5c@t '(global-macro global-macro!)) (bgdb9@chi-body* (cons (bgb48@add-subst bg1f3a@rib (bgd7d@chi-global-macro bg1f55@value bg1f46@e)) (cdr bg1f32@e*)) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?) (if (memv bg1f5c@t '(local-macro local-macro!)) (bgdb9@chi-body* (cons (bgb48@add-subst bg1f3a@rib (bgd7b@chi-local-macro bg1f55@value bg1f46@e)) (cdr bg1f32@e*)) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?) (if (memv bg1f5c@t '(macro macro!)) (bgdb9@chi-body* (cons (bgb48@add-subst bg1f3a@rib (bgd79@chi-macro bg1f55@value bg1f46@e)) (cdr bg1f32@e*)) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?) (if (memv bg1f5c@t '(module)) (call-with-values (lambda () (bgdb7@chi-internal-module bg1f46@e bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd*)) (lambda (bg1fb8@bg1fa9 bg1fb9@bg1fab bg1fba@bg1fad bg1fbb@bg1faf bg1fbc@bg1fb1 bg1fbd@bg1fb3 bg1fbe@bg1fb5 bg1fbf@bg1fb7) ((lambda (bg1fc8@kwd* bg1fc9@mod** bg1fca@mr bg1fcb@r bg1fcc@m-exp-lab* bg1fcd@m-exp-id* bg1fce@rhs* bg1fcf@lex*) (begin (vector-for-each (lambda (bg1fd8@id bg1fd9@lab) (bgb12@extend-rib! bg1f3a@rib bg1fd8@id bg1fd9@lab)) bg1fcd@m-exp-id* bg1fcc@m-exp-lab*) (bgdb9@chi-body* (cdr bg1f32@e*) bg1fcb@r bg1fca@mr bg1fcf@lex* bg1fce@rhs* bg1fc9@mod** bg1fc8@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?))) bg1fbf@bg1fb7 bg1fbe@bg1fb5 bg1fbd@bg1fb3 bg1fbc@bg1fb1 bg1fbb@bg1faf bg1fba@bg1fad bg1fb9@bg1fab bg1fb8@bg1fa9))) (if (memv bg1f5c@t '(library)) (begin (bge23@library-expander (bgb70@stx->datum bg1f46@e)) (bgdb9@chi-body* (cdr bg1f32@e*) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?)) (if (memv bg1f5c@t '(export)) ((lambda (bg1fdc@t) ((lambda (bg1fde@ls/false) (if bg1fde@ls/false (apply (lambda (bg1fe0@exp-decl*) (bgdb9@chi-body* (cdr bg1f32@e*) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* (append bg1fe0@exp-decl* bg1f39@exp*) bg1f3a@rib bg1f3b@top?)) bg1fde@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg1fdc@t))) (bgd61@syntax-dispatch bg1fdc@t '(_ . each-any)))) bg1f46@e) (if (memv bg1f5c@t '(import)) ((lambda () ((lambda (bg1fe3@module-import? bg1fe5@module-import bg1fe7@library-import) (begin (set! bg1fe3@module-import? (lambda (bg2036@e) ((lambda (bg2038@t) ((lambda (bg203a@ls/false) (if (and bg203a@ls/false (apply (lambda (bg203c@id) (bgb5c@id? bg203c@id)) bg203a@ls/false)) (apply (lambda (bg203e@id) '#t) bg203a@ls/false) ((lambda (bg2040@t) ((lambda (bg2042@ls/false) (if bg2042@ls/false (apply (lambda (bg2044@imp*) '#f) bg2042@ls/false) ((lambda (bg2046@t) ((lambda (bg2048@ls/false) (if bg2048@ls/false (apply (lambda () (bge41@syntax-violation '#f '"malformed import form" bg2036@e)) bg2048@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2046@t))) (bgd61@syntax-dispatch bg2046@t '_))) bg2040@t))) (bgd61@syntax-dispatch bg2040@t '(_ . each-any)))) bg2038@t))) (bgd61@syntax-dispatch bg2038@t '(_ any)))) bg2036@e))) (set! bg1fe5@module-import (lambda (bg2014@e bg2015@r) ((lambda (bg2018@t) ((lambda (bg201a@ls/false) (if (and bg201a@ls/false (apply (lambda (bg201c@id) (bgb5c@id? bg201c@id)) bg201a@ls/false)) (apply (lambda (bg201e@id) (call-with-values (lambda () (bgb7e@syntax-type bg201e@id bg2015@r)) (lambda (bg2026@bg2021 bg2027@bg2023 bg2028@bg2025) ((lambda (bg202c@kwd bg202d@value bg202e@type) ((lambda (bg2032@t) (if (memv bg2032@t '($module)) ((lambda (bg2034@iface) (values (bgdb5@module-interface-exp-id* bg2034@iface bg201e@id) (bgdaf@module-interface-exp-lab-vec bg2034@iface))) bg202d@value) (bge41@syntax-violation '#f '"invalid import" bg2014@e))) bg202e@type)) bg2028@bg2025 bg2027@bg2023 bg2026@bg2021)))) bg201a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2018@t))) (bgd61@syntax-dispatch bg2018@t '(_ any)))) bg2014@e))) (set! bg1fe7@library-import (lambda (bg1ff8@e) ((lambda (bg1ffa@t) ((lambda (bg1ffc@ls/false) (if bg1ffc@ls/false (apply (lambda (bg1ffe@ctxt bg1fff@imp*) (call-with-values (lambda () (bgdc3@parse-import-spec* (bge47@syntax->datum bg1fff@imp*))) (lambda (bg2006@bg2003 bg2007@bg2005) ((lambda (bg200a@subst-labels bg200b@subst-names) (values (vector-map (lambda (bg200e@name) (bgb3c@datum->stx bg1ffe@ctxt bg200e@name)) bg200b@subst-names) bg200a@subst-labels)) bg2007@bg2005 bg2006@bg2003)))) bg1ffc@ls/false) ((lambda (bg2010@t) ((lambda (bg2012@ls/false) (if bg2012@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid import form" bg1ff8@e)) bg2012@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2010@t))) (bgd61@syntax-dispatch bg2010@t '_))) bg1ffa@t))) (bgd61@syntax-dispatch bg1ffa@t '(any . each-any)))) bg1ff8@e))) (begin (call-with-values (lambda () (if (bg1fe3@module-import? bg1f46@e) (bg1fe5@module-import bg1f46@e bg1f33@r) (bg1fe7@library-import bg1f46@e))) (lambda (bg1fec@bg1fe9 bg1fed@bg1feb) ((lambda (bg1ff0@lab* bg1ff1@id*) (vector-for-each (lambda (bg1ff4@id bg1ff5@lab) (bgb12@extend-rib! bg1f3a@rib bg1ff4@id bg1ff5@lab)) bg1ff1@id* bg1ff0@lab*)) bg1fed@bg1feb bg1fec@bg1fe9))) (bgdb9@chi-body* (cdr bg1f32@e*) bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?)))) '#f '#f '#f))) (if bg1f3b@top? (bgdb9@chi-body* (cdr bg1f32@e*) bg1f33@r bg1f34@mr (cons (bgae4@gen-lexical 'dummy) bg1f35@lex*) (cons (cons 'top-expr bg1f46@e) bg1f36@rhs*) bg1f37@mod** bg1f5a@kwd* bg1f39@exp* bg1f3a@rib bg1f3b@top?) (values bg1f32@e* bg1f33@r bg1f34@mr bg1f35@lex* bg1f36@rhs* bg1f37@mod** bg1f5a@kwd* bg1f39@exp*)))))))))))))) bg1f56@type)) (if (bgb5c@id? bg1f54@kwd) (cons bg1f54@kwd bg1f38@kwd*) bg1f38@kwd*))) bg1f50@bg1f4d bg1f4f@bg1f4b bg1f4e@bg1f49)))) (car bg1f32@e*))))) (set! bgdbb@expand-transformer (lambda (bg204a@expr bg204b@r) ((lambda (bg204e@rtc) ((lambda (bg2050@expanded-rhs) (begin (for-each ((lambda (bg2052@mark-visit) (lambda (bg2054@x) (begin (bg987@bg7d5@invoke-library bg2054@x) (bg2052@mark-visit bg2054@x)))) (bgdcb@vis-collector)) (bg204e@rtc)) bg2050@expanded-rhs)) ((lambda (bg205e@bg2057 bg205f@bg2059 bg2060@bg205b bg2061@bg205d) ((lambda (bg2066@swap) (dynamic-wind bg2066@swap (lambda () (bgd83@chi-expr bg204a@expr bg204b@r bg204b@r)) bg2066@swap)) (lambda () (begin ((lambda (bg2068@t) (begin (bg205e@bg2057 bg2060@bg205b) (set! bg2060@bg205b bg2068@t))) (bg205e@bg2057)) ((lambda (bg206a@t) (begin (bg205f@bg2059 bg2061@bg205d) (set! bg2061@bg205d bg206a@t))) (bg205f@bg2059)))))) bgdc9@inv-collector bgdcb@vis-collector bg204e@rtc (lambda (bg206c@x) (values))))) (bgdc7@make-collector)))) (set! bgdbd@parse-exports (lambda (bg206e@exp*) ((letrec ((bg2070@f (lambda (bg2072@exp* bg2073@int* bg2074@ext*) (if (null? bg2072@exp*) (begin (if (not (bgb64@valid-bound-ids? bg2074@ext*)) (bge41@syntax-violation 'export '"invalid exports" (bgd97@find-dups bg2074@ext*)) (void)) (values (map bge47@syntax->datum bg2074@ext*) bg2073@int*)) ((lambda (bg2078@t) ((lambda (bg207a@ls/false) (if bg207a@ls/false (apply (lambda (bg207c@rename bg207d@i* bg207e@e*) (begin (if (not (and (eq? (bge47@syntax->datum bg207c@rename) 'rename) (for-all bgb5c@id? bg207d@i*) (for-all bgb5c@id? bg207e@e*))) (bge41@syntax-violation 'export '"invalid export specifier" (car bg2072@exp*)) (void)) (bg2070@f (cdr bg2072@exp*) (append bg207d@i* bg2073@int*) (append bg207e@e* bg2074@ext*)))) bg207a@ls/false) ((lambda (bg2082@t) ((lambda (bg2084@ls/false) (if bg2084@ls/false (apply (lambda (bg2086@ie) (begin (if (not (bgb5c@id? bg2086@ie)) (bge41@syntax-violation 'export '"invalid export" bg2086@ie) (void)) (bg2070@f (cdr bg2072@exp*) (cons bg2086@ie bg2073@int*) (cons bg2086@ie bg2074@ext*)))) bg2084@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2082@t))) (bgd61@syntax-dispatch bg2082@t 'any))) bg2078@t))) (bgd61@syntax-dispatch bg2078@t '(any . #(each (any any)))))) (car bg2072@exp*)))))) bg2070@f) bg206e@exp* '() '()))) (set! bgdbf@parse-library-name (lambda (bg2088@spec) ((lambda (bg208b@parse) (begin (set! bg208b@parse (lambda (bg2098@x) ((lambda (bg209a@t) ((lambda (bg209c@ls/false) (if (and bg209c@ls/false (apply (lambda (bg209e@v*) (for-all (lambda (bg20a0@x) ((lambda (bg20a2@x) (and (integer? bg20a2@x) (exact? bg20a2@x))) (bge47@syntax->datum bg20a0@x))) bg209e@v*)) bg209c@ls/false)) (apply (lambda (bg20a4@v*) (values '() (map bge47@syntax->datum bg20a4@v*))) bg209c@ls/false) ((lambda (bg20a6@t) ((lambda (bg20a8@ls/false) (if (and bg20a8@ls/false (apply (lambda (bg20aa@x bg20ab@rest) (symbol? (bge47@syntax->datum bg20aa@x))) bg20a8@ls/false)) (apply (lambda (bg20ae@x bg20af@rest) (call-with-values (lambda () (bg208b@parse bg20af@rest)) (lambda (bg20b6@bg20b3 bg20b7@bg20b5) ((lambda (bg20ba@v* bg20bb@x*) (values (cons (bge47@syntax->datum bg20ae@x) bg20bb@x*) bg20ba@v*)) bg20b7@bg20b5 bg20b6@bg20b3)))) bg20a8@ls/false) ((lambda (bg20be@t) ((lambda (bg20c0@ls/false) (if bg20c0@ls/false (apply (lambda () (values '() '())) bg20c0@ls/false) ((lambda (bg20c2@t) ((lambda (bg20c4@ls/false) (if bg20c4@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid library name" bg2088@spec)) bg20c4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg20c2@t))) (bgd61@syntax-dispatch bg20c2@t '_))) bg20be@t))) (bgd61@syntax-dispatch bg20be@t '()))) bg20a6@t))) (bgd61@syntax-dispatch bg20a6@t '(any . any)))) bg209a@t))) (bgd61@syntax-dispatch bg209a@t '(each-any)))) bg2098@x))) (call-with-values (lambda () (bg208b@parse bg2088@spec)) (lambda (bg2090@bg208d bg2091@bg208f) ((lambda (bg2094@ver* bg2095@name*) (begin (if (null? bg2095@name*) (bge41@syntax-violation '#f '"empty library name" bg2088@spec) (void)) (values bg2095@name* bg2094@ver*))) bg2091@bg208f bg2090@bg208d))))) '#f))) (set! bgdc1@parse-library (lambda (bg20c6@e) ((lambda (bg20c8@t) ((lambda (bg20ca@ls/false) (if (and bg20ca@ls/false (apply (lambda (bg20cc@library bg20cd@name* bg20ce@export bg20cf@exp* bg20d0@import bg20d1@imp* bg20d2@b*) (and (eq? (bge47@syntax->datum bg20ce@export) 'export) (eq? (bge47@syntax->datum bg20d0@import) 'import) (eq? (bge47@syntax->datum bg20cc@library) 'library))) bg20ca@ls/false)) (apply (lambda (bg20da@library bg20db@name* bg20dc@export bg20dd@exp* bg20de@import bg20df@imp* bg20e0@b*) (values bg20db@name* bg20dd@exp* bg20df@imp* bg20e0@b*)) bg20ca@ls/false) ((lambda (bg20e8@t) ((lambda (bg20ea@ls/false) (if bg20ea@ls/false (apply (lambda () (bge41@syntax-violation '#f '"malformed library" bg20c6@e)) bg20ea@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg20e8@t))) (bgd61@syntax-dispatch bg20e8@t '_))) bg20c8@t))) (bgd61@syntax-dispatch bg20c8@t '(any each-any (any . each-any) (any . each-any) . each-any)))) bg20c6@e))) (set! bgdc3@parse-import-spec* ((lambda () ((lambda (bg20ed@idsyn? bg20ef@dup-error bg20f1@merge-substs bg20f3@exclude* bg20f5@find* bg20f7@rem* bg20f9@remove-dups bg20fb@parse-library-name bg20fd@import-library bg20ff@get-import bg2101@add-imports!) (begin (set! bg20ed@idsyn? (lambda (bg22f6@x) (symbol? (bge47@syntax->datum bg22f6@x)))) (set! bg20ef@dup-error (lambda (bg22f4@name) (bge41@syntax-violation 'import '"two imports with different bindings" bg22f4@name))) (set! bg20f1@merge-substs (lambda (bg22e2@s bg22e3@subst) ((lambda (bg22e7@insert-to-subst) (begin (set! bg22e7@insert-to-subst (lambda (bg22e8@a bg22e9@subst) ((lambda (bg22ec@name bg22ed@label) ((lambda (bg22f0@t) (if bg22f0@t ((lambda (bg22f2@x) (if (eq? (cdr bg22f2@x) bg22ed@label) bg22e9@subst (bg20ef@dup-error bg22ec@name))) bg22f0@t) (cons bg22e8@a bg22e9@subst))) (assq bg22ec@name bg22e9@subst))) (car bg22e8@a) (cdr bg22e8@a)))) (if (null? bg22e2@s) bg22e3@subst (bg22e7@insert-to-subst (car bg22e2@s) (bg20f1@merge-substs (cdr bg22e2@s) bg22e3@subst))))) '#f))) (set! bg20f3@exclude* (lambda (bg22b2@sym* bg22b3@subst) ((lambda (bg22b7@exclude) (begin (set! bg22b7@exclude (lambda (bg22d0@sym bg22d1@subst) (if (null? bg22d1@subst) (bge41@syntax-violation 'import '"cannot rename unbound identifier" bg22d0@sym) (if (eq? bg22d0@sym (caar bg22d1@subst)) (values (cdar bg22d1@subst) (cdr bg22d1@subst)) ((lambda (bg22d4@a) (call-with-values (lambda () (bg22b7@exclude bg22d0@sym (cdr bg22d1@subst))) (lambda (bg22da@bg22d7 bg22db@bg22d9) ((lambda (bg22de@subst bg22df@old) (values bg22df@old (cons bg22d4@a bg22de@subst))) bg22db@bg22d9 bg22da@bg22d7)))) (car bg22d1@subst)))))) (if (null? bg22b2@sym*) (values '() bg22b3@subst) (call-with-values (lambda () (bg22b7@exclude (car bg22b2@sym*) bg22b3@subst)) (lambda (bg22bc@bg22b9 bg22bd@bg22bb) ((lambda (bg22c0@subst bg22c1@old) (call-with-values (lambda () (bg20f3@exclude* (cdr bg22b2@sym*) bg22c0@subst)) (lambda (bg22c8@bg22c5 bg22c9@bg22c7) ((lambda (bg22cc@subst bg22cd@old*) (values (cons bg22c1@old bg22cd@old*) bg22cc@subst)) bg22c9@bg22c7 bg22c8@bg22c5)))) bg22bd@bg22bb bg22bc@bg22b9)))))) '#f))) (set! bg20f5@find* (lambda (bg22aa@sym* bg22ab@subst) (map (lambda (bg22ae@x) ((lambda (bg22b0@t) (if bg22b0@t (cdr bg22b0@t) (bge41@syntax-violation 'import '"cannot find identifier" bg22ae@x))) (assq bg22ae@x bg22ab@subst))) bg22aa@sym*))) (set! bg20f7@rem* (lambda (bg22a2@sym* bg22a3@subst) ((letrec ((bg22a6@f (lambda (bg22a8@subst) (if (null? bg22a8@subst) '() (if (memq (caar bg22a8@subst) bg22a2@sym*) (bg22a6@f (cdr bg22a8@subst)) (cons (car bg22a8@subst) (bg22a6@f (cdr bg22a8@subst)))))))) bg22a6@f) bg22a3@subst))) (set! bg20f9@remove-dups (lambda (bg22a0@ls) (if (null? bg22a0@ls) '() (if (memq (car bg22a0@ls) (cdr bg22a0@ls)) (bg20f9@remove-dups (cdr bg22a0@ls)) (cons (car bg22a0@ls) (bg20f9@remove-dups (cdr bg22a0@ls))))))) (set! bg20fb@parse-library-name (lambda (bg21b8@spec) ((lambda (bg21bb@subversion? bg21bd@subversion-pred bg21bf@version-pred) (begin (set! bg21bb@subversion? (lambda (bg229c@x) ((lambda (bg229e@x) (and (integer? bg229e@x) (exact? bg229e@x) (>= bg229e@x '0))) (bge47@syntax->datum bg229c@x)))) (set! bg21bd@subversion-pred (lambda (bg223c@x*) ((lambda (bg223e@t) ((lambda (bg2240@ls/false) (if (and bg2240@ls/false (apply (lambda (bg2242@n) (bg21bb@subversion? bg2242@n)) bg2240@ls/false)) (apply (lambda (bg2244@n) (lambda (bg2246@x) (= bg2246@x (bge47@syntax->datum bg2244@n)))) bg2240@ls/false) ((lambda (bg2248@t) ((lambda (bg224a@ls/false) (if (and bg224a@ls/false (apply (lambda (bg224c@p? bg224d@sub*) (eq? (bge47@syntax->datum bg224c@p?) 'and)) bg224a@ls/false)) (apply (lambda (bg2250@p? bg2251@sub*) ((lambda (bg2254@p*) (lambda (bg2256@x) (for-all (lambda (bg2258@p) (bg2258@p bg2256@x)) bg2254@p*))) (map bg21bd@subversion-pred bg2251@sub*))) bg224a@ls/false) ((lambda (bg225a@t) ((lambda (bg225c@ls/false) (if (and bg225c@ls/false (apply (lambda (bg225e@p? bg225f@sub*) (eq? (bge47@syntax->datum bg225e@p?) 'or)) bg225c@ls/false)) (apply (lambda (bg2262@p? bg2263@sub*) ((lambda (bg2266@p*) (lambda (bg2268@x) (exists (lambda (bg226a@p) (bg226a@p bg2268@x)) bg2266@p*))) (map bg21bd@subversion-pred bg2263@sub*))) bg225c@ls/false) ((lambda (bg226c@t) ((lambda (bg226e@ls/false) (if (and bg226e@ls/false (apply (lambda (bg2270@p? bg2271@sub) (eq? (bge47@syntax->datum bg2270@p?) 'not)) bg226e@ls/false)) (apply (lambda (bg2274@p? bg2275@sub) ((lambda (bg2278@p) (lambda (bg227a@x) (not (bg2278@p bg227a@x)))) (bg21bd@subversion-pred bg2275@sub))) bg226e@ls/false) ((lambda (bg227c@t) ((lambda (bg227e@ls/false) (if (and bg227e@ls/false (apply (lambda (bg2280@p? bg2281@n) (and (eq? (bge47@syntax->datum bg2280@p?) '<=) (bg21bb@subversion? bg2281@n))) bg227e@ls/false)) (apply (lambda (bg2284@p? bg2285@n) (lambda (bg2288@x) (<= bg2288@x (bge47@syntax->datum bg2285@n)))) bg227e@ls/false) ((lambda (bg228a@t) ((lambda (bg228c@ls/false) (if (and bg228c@ls/false (apply (lambda (bg228e@p? bg228f@n) (and (eq? (bge47@syntax->datum bg228e@p?) '>=) (bg21bb@subversion? bg228f@n))) bg228c@ls/false)) (apply (lambda (bg2292@p? bg2293@n) (lambda (bg2296@x) (>= bg2296@x (bge47@syntax->datum bg2293@n)))) bg228c@ls/false) ((lambda (bg2298@t) ((lambda (bg229a@ls/false) (if bg229a@ls/false (apply (lambda () (bge41@syntax-violation 'import '"invalid sub-version spec" bg21b8@spec bg223c@x*)) bg229a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2298@t))) (bgd61@syntax-dispatch bg2298@t '_))) bg228a@t))) (bgd61@syntax-dispatch bg228a@t '(any any)))) bg227c@t))) (bgd61@syntax-dispatch bg227c@t '(any any)))) bg226c@t))) (bgd61@syntax-dispatch bg226c@t '(any any)))) bg225a@t))) (bgd61@syntax-dispatch bg225a@t '(any . each-any)))) bg2248@t))) (bgd61@syntax-dispatch bg2248@t '(any . each-any)))) bg223e@t))) (bgd61@syntax-dispatch bg223e@t 'any))) bg223c@x*))) (set! bg21bf@version-pred (lambda (bg21ec@x*) ((lambda (bg21ee@t) ((lambda (bg21f0@ls/false) (if bg21f0@ls/false (apply (lambda () (lambda (bg21f2@x) '#t)) bg21f0@ls/false) ((lambda (bg21f4@t) ((lambda (bg21f6@ls/false) (if (and bg21f6@ls/false (apply (lambda (bg21f8@c bg21f9@ver*) (eq? (bge47@syntax->datum bg21f8@c) 'and)) bg21f6@ls/false)) (apply (lambda (bg21fc@c bg21fd@ver*) ((lambda (bg2200@p*) (lambda (bg2202@x) (for-all (lambda (bg2204@p) (bg2204@p bg2202@x)) bg2200@p*))) (map bg21bf@version-pred bg21fd@ver*))) bg21f6@ls/false) ((lambda (bg2206@t) ((lambda (bg2208@ls/false) (if (and bg2208@ls/false (apply (lambda (bg220a@c bg220b@ver*) (eq? (bge47@syntax->datum bg220a@c) 'or)) bg2208@ls/false)) (apply (lambda (bg220e@c bg220f@ver*) ((lambda (bg2212@p*) (lambda (bg2214@x) (exists (lambda (bg2216@p) (bg2216@p bg2214@x)) bg2212@p*))) (map bg21bf@version-pred bg220f@ver*))) bg2208@ls/false) ((lambda (bg2218@t) ((lambda (bg221a@ls/false) (if (and bg221a@ls/false (apply (lambda (bg221c@c bg221d@ver) (eq? (bge47@syntax->datum bg221c@c) 'not)) bg221a@ls/false)) (apply (lambda (bg2220@c bg2221@ver) ((lambda (bg2224@p) (lambda (bg2226@x) (not (bg2224@p bg2226@x)))) (bg21bf@version-pred bg2221@ver))) bg221a@ls/false) ((lambda (bg2228@t) ((lambda (bg222a@ls/false) (if bg222a@ls/false (apply (lambda (bg222c@sub*) ((lambda (bg222e@p*) (lambda (bg2230@x) ((letrec ((bg2232@f (lambda (bg2234@p* bg2235@x) (if (null? bg2234@p*) '#t (if (null? bg2235@x) '#f (and ((car bg2234@p*) (car bg2235@x)) (bg2232@f (cdr bg2234@p*) (cdr bg2235@x)))))))) bg2232@f) bg222e@p* bg2230@x))) (map bg21bd@subversion-pred bg222c@sub*))) bg222a@ls/false) ((lambda (bg2238@t) ((lambda (bg223a@ls/false) (if bg223a@ls/false (apply (lambda () (bge41@syntax-violation 'import '"invalid version spec" bg21b8@spec bg21ec@x*)) bg223a@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2238@t))) (bgd61@syntax-dispatch bg2238@t '_))) bg2228@t))) (bgd61@syntax-dispatch bg2228@t 'each-any))) bg2218@t))) (bgd61@syntax-dispatch bg2218@t '(any any)))) bg2206@t))) (bgd61@syntax-dispatch bg2206@t '(any . each-any)))) bg21f4@t))) (bgd61@syntax-dispatch bg21f4@t '(any . each-any)))) bg21ee@t))) (bgd61@syntax-dispatch bg21ee@t '()))) bg21ec@x*))) ((letrec ((bg21c0@f (lambda (bg21c2@x) ((lambda (bg21c4@t) ((lambda (bg21c6@ls/false) (if bg21c6@ls/false (apply (lambda (bg21c8@version-spec*) (values '() (bg21bf@version-pred bg21c8@version-spec*))) bg21c6@ls/false) ((lambda (bg21ca@t) ((lambda (bg21cc@ls/false) (if (and bg21cc@ls/false (apply (lambda (bg21ce@x bg21cf@x*) (bg20ed@idsyn? bg21ce@x)) bg21cc@ls/false)) (apply (lambda (bg21d2@x bg21d3@x*) (call-with-values (lambda () (bg21c0@f bg21d3@x*)) (lambda (bg21da@bg21d7 bg21db@bg21d9) ((lambda (bg21de@pred bg21df@name) (values (cons (bge47@syntax->datum bg21d2@x) bg21df@name) bg21de@pred)) bg21db@bg21d9 bg21da@bg21d7)))) bg21cc@ls/false) ((lambda (bg21e2@t) ((lambda (bg21e4@ls/false) (if bg21e4@ls/false (apply (lambda () (values '() (lambda (bg21e6@x) '#t))) bg21e4@ls/false) ((lambda (bg21e8@t) ((lambda (bg21ea@ls/false) (if bg21ea@ls/false (apply (lambda () (bge41@syntax-violation '#f '"invalid import spec" bg21b8@spec)) bg21ea@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg21e8@t))) (bgd61@syntax-dispatch bg21e8@t '_))) bg21e2@t))) (bgd61@syntax-dispatch bg21e2@t '()))) bg21ca@t))) (bgd61@syntax-dispatch bg21ca@t '(any . any)))) bg21c4@t))) (bgd61@syntax-dispatch bg21c4@t '(each-any)))) bg21c2@x)))) bg21c0@f) bg21b8@spec))) '#f '#f '#f))) (set! bg20fd@import-library (lambda (bg21a8@spec*) (call-with-values (lambda () (bg20fb@parse-library-name bg21a8@spec*)) (lambda (bg21ae@bg21ab bg21af@bg21ad) ((lambda (bg21b2@pred bg21b3@name) (begin (if (null? bg21b3@name) (bge41@syntax-violation 'import '"empty library name" bg21a8@spec*) (void)) ((lambda (bg21b6@lib) (begin (if (not bg21b6@lib) (bge41@syntax-violation 'import '"cannot find library with required name" bg21b3@name) (void)) (if (not (bg21b2@pred (bg95a@bg77b@library-version bg21b6@lib))) (bge41@syntax-violation 'import '"library does not satisfy version specification" bg21a8@spec* bg21b6@lib) (void)) ((bgdcd@imp-collector) bg21b6@lib) (bg962@bg78b@library-subst bg21b6@lib))) (bg980@bg7c7@find-library-by-name bg21b3@name)))) bg21af@bg21ad bg21ae@bg21ab))))) (set! bg20ff@get-import (lambda (bg211a@spec) ((lambda (bg211c@t) ((lambda (bg211e@ls/false) (if (and bg211e@ls/false (apply (lambda (bg2120@x bg2121@x*) (not (memq (bge47@syntax->datum bg2120@x) '(for rename except only prefix library)))) bg211e@ls/false)) (apply (lambda (bg2124@x bg2125@x*) (bg20fd@import-library (cons bg2124@x bg2125@x*))) bg211e@ls/false) ((lambda (bg2128@t) ((lambda (bg212a@ls/false) (if (and bg212a@ls/false (apply (lambda (bg212c@rename bg212d@isp bg212e@old* bg212f@new*) (and (eq? (bge47@syntax->datum bg212c@rename) 'rename) (for-all bg20ed@idsyn? bg212e@old*) (for-all bg20ed@idsyn? bg212f@new*))) bg212a@ls/false)) (apply (lambda (bg2134@rename bg2135@isp bg2136@old* bg2137@new*) ((lambda (bg213c@subst bg213d@old* bg213e@new*) ((lambda (bg2142@old-label*) ((lambda (bg2144@subst) (bg20f1@merge-substs (map cons bg213e@new* bg2142@old-label*) bg2144@subst)) (bg20f7@rem* bg213d@old* bg213c@subst))) (bg20f5@find* bg213d@old* bg213c@subst))) (bg20ff@get-import bg2135@isp) (map bge47@syntax->datum bg2136@old*) (map bge47@syntax->datum bg2137@new*))) bg212a@ls/false) ((lambda (bg2146@t) ((lambda (bg2148@ls/false) (if (and bg2148@ls/false (apply (lambda (bg214a@except bg214b@isp bg214c@sym*) (and (eq? (bge47@syntax->datum bg214a@except) 'except) (for-all bg20ed@idsyn? bg214c@sym*))) bg2148@ls/false)) (apply (lambda (bg2150@except bg2151@isp bg2152@sym*) ((lambda (bg2156@subst) (bg20f7@rem* (map bge47@syntax->datum bg2152@sym*) bg2156@subst)) (bg20ff@get-import bg2151@isp))) bg2148@ls/false) ((lambda (bg2158@t) ((lambda (bg215a@ls/false) (if (and bg215a@ls/false (apply (lambda (bg215c@only bg215d@isp bg215e@sym*) (and (eq? (bge47@syntax->datum bg215c@only) 'only) (for-all bg20ed@idsyn? bg215e@sym*))) bg215a@ls/false)) (apply (lambda (bg2162@only bg2163@isp bg2164@sym*) ((lambda (bg2168@subst bg2169@sym*) ((lambda (bg216c@sym*) ((lambda (bg216e@lab*) (map cons bg216c@sym* bg216e@lab*)) (bg20f5@find* bg216c@sym* bg2168@subst))) (bg20f9@remove-dups bg2169@sym*))) (bg20ff@get-import bg2163@isp) (map bge47@syntax->datum bg2164@sym*))) bg215a@ls/false) ((lambda (bg2170@t) ((lambda (bg2172@ls/false) (if (and bg2172@ls/false (apply (lambda (bg2174@prefix bg2175@isp bg2176@p) (and (eq? (bge47@syntax->datum bg2174@prefix) 'prefix) (bg20ed@idsyn? bg2176@p))) bg2172@ls/false)) (apply (lambda (bg217a@prefix bg217b@isp bg217c@p) ((lambda (bg2180@subst bg2181@prefix) (map (lambda (bg2184@x) (cons (string->symbol (string-append bg2181@prefix (symbol->string (car bg2184@x)))) (cdr bg2184@x))) bg2180@subst)) (bg20ff@get-import bg217b@isp) (symbol->string (bge47@syntax->datum bg217c@p)))) bg2172@ls/false) ((lambda (bg2186@t) ((lambda (bg2188@ls/false) (if (and bg2188@ls/false (apply (lambda (bg218a@library bg218b@spec*) (eq? (bge47@syntax->datum bg218a@library) 'library)) bg2188@ls/false)) (apply (lambda (bg218e@library bg218f@spec*) (bg20fd@import-library bg218f@spec*)) bg2188@ls/false) ((lambda (bg2192@t) ((lambda (bg2194@ls/false) (if (and bg2194@ls/false (apply (lambda (bg2196@for bg2197@isp bg2198@rest) (eq? (bge47@syntax->datum bg2196@for) 'for)) bg2194@ls/false)) (apply (lambda (bg219c@for bg219d@isp bg219e@rest) (bg20ff@get-import bg219d@isp)) bg2194@ls/false) ((lambda (bg21a2@t) ((lambda (bg21a4@ls/false) (if bg21a4@ls/false (apply (lambda (bg21a6@spec) (bge41@syntax-violation 'import '"invalid import spec" bg21a6@spec)) bg21a4@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg21a2@t))) (bgd61@syntax-dispatch bg21a2@t 'any))) bg2192@t))) (bgd61@syntax-dispatch bg2192@t '(any any . any)))) bg2186@t))) (bgd61@syntax-dispatch bg2186@t '(any each-any)))) bg2170@t))) (bgd61@syntax-dispatch bg2170@t '(any any any)))) bg2158@t))) (bgd61@syntax-dispatch bg2158@t '(any any . each-any)))) bg2146@t))) (bgd61@syntax-dispatch bg2146@t '(any any . each-any)))) bg2128@t))) (bgd61@syntax-dispatch bg2128@t '(any any . #(each (any any)))))) bg211c@t))) (bgd61@syntax-dispatch bg211c@t '(any . each-any)))) bg211a@spec))) (set! bg2101@add-imports! (lambda (bg210a@imp bg210b@h) ((lambda (bg210e@subst) (for-each (lambda (bg2110@x) ((lambda (bg2112@name bg2113@label) ((lambda (bg2116@t) (if bg2116@t ((lambda (bg2118@l) (if (not (eq? bg2118@l bg2113@label)) (bg20ef@dup-error bg2112@name) (void))) bg2116@t) (hashtable-set! bg210b@h bg2112@name bg2113@label))) (hashtable-ref bg210b@h bg2112@name '#f))) (car bg2110@x) (cdr bg2110@x))) bg210e@subst)) (bg20ff@get-import bg210a@imp)))) (lambda (bg2102@imp*) ((letrec ((bg2104@f (lambda (bg2106@imp* bg2107@h) (if (null? bg2106@imp*) (hashtable-entries bg2107@h) (begin (bg2101@add-imports! (car bg2106@imp*) bg2107@h) (bg2104@f (cdr bg2106@imp*) bg2107@h)))))) bg2104@f) bg2102@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! bgdc5@make-top-rib (lambda (bg22f8@names bg22f9@labels) ((lambda (bg22fc@rib) (begin (vector-for-each (lambda (bg22fe@name bg22ff@label) (begin (if (not (symbol? bg22fe@name)) (error 'make-top-rib '"BUG: not a symbol" bg22fe@name) (void)) (bgb14@extend-rib/nc! bg22fc@rib (make-simple-struct 'stx '5 (list bg22fe@name bgae0@top-mark* '() '())) bg22ff@label))) bg22f8@names bg22f9@labels) bg22fc@rib)) (bgb10@make-empty-rib)))) (set! bgdc7@make-collector (lambda () ((lambda (bg2302@ls) (lambda bg2306 ((lambda (bg2307) (if (= bg2307 '0) (apply (lambda () bg2302@ls) bg2306) (if (= bg2307 '1) (apply (lambda (bg2304@x) (set! bg2302@ls (bgad9@set-cons bg2304@x bg2302@ls))) bg2306) (error 'apply '"invalid arg count")))) (length bg2306)))) '()))) (set! bgdc9@inv-collector (bg6bb@bg59a@make-parameter (lambda bg2308@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bg230a@x) (begin (if (not (procedure? bg230a@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bg230a@x) (void)) bg230a@x)))) (set! bgdcb@vis-collector (bg6bb@bg59a@make-parameter (lambda bg230c@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bg230e@x) (begin (if (not (procedure? bg230e@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bg230e@x) (void)) bg230e@x)))) (set! bgdcd@imp-collector (bg6bb@bg59a@make-parameter (lambda bg2310@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bg2312@x) (begin (if (not (procedure? bg2312@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bg2312@x) (void)) bg2312@x)))) (set! bgdcf@chi-library-internal (lambda (bg2314@e* bg2315@rib bg2316@top?) (call-with-values (lambda () (bgdb9@chi-body* bg2314@e* '() '() '() '() '() '() '() bg2315@rib bg2316@top?)) (lambda (bg232a@bg231b bg232b@bg231d bg232c@bg231f bg232d@bg2321 bg232e@bg2323 bg232f@bg2325 bg2330@bg2327 bg2331@bg2329) ((lambda (bg233a@exp* bg233b@_kwd* bg233c@mod** bg233d@rhs* bg233e@lex* bg233f@mr bg2340@r bg2341@e*) (values (append (apply append (reverse bg233c@mod**)) bg2341@e*) bg2340@r bg233f@mr (reverse bg233e@lex*) (reverse bg233d@rhs*) bg233a@exp*)) bg2331@bg2329 bg2330@bg2327 bg232f@bg2325 bg232e@bg2323 bg232d@bg2321 bg232c@bg231f bg232b@bg231d bg232a@bg231b))))) (set! bgdd1@chi-interaction-expr (lambda (bg234a@e bg234b@rib bg234c@r) (call-with-values (lambda () (bgdb9@chi-body* (list bg234a@e) bg234c@r bg234c@r '() '() '() '() '() bg234b@rib '#t)) (lambda (bg2360@bg2351 bg2361@bg2353 bg2362@bg2355 bg2363@bg2357 bg2364@bg2359 bg2365@bg235b bg2366@bg235d bg2367@bg235f) ((lambda (bg2370@_exp* bg2371@_kwd* bg2372@mod** bg2373@rhs* bg2374@lex* bg2375@mr bg2376@r bg2377@e*) ((lambda (bg2380@e*) ((lambda (bg2382@e) (values bg2382@e bg2376@r)) (if (null? bg2380@e*) (bgac4@bga34@build-void) (if (null? (cdr bg2380@e*)) (car bg2380@e*) (bgac3@bga32@build-sequence '#f bg2380@e*))))) (bgd91@expand-interaction-rhs*/init* (reverse bg2374@lex*) (reverse bg2373@rhs*) (append (apply append (reverse bg2372@mod**)) bg2377@e*) bg2376@r bg2375@mr))) bg2367@bg235f bg2366@bg235d bg2365@bg235b bg2364@bg2359 bg2363@bg2357 bg2362@bg2355 bg2361@bg2353 bg2360@bg2351))))) (set! bgdd3@library-body-expander (lambda (bg2384@name bg2385@main-exp* bg2386@imp* bg2387@b* bg2388@top?) ((lambda (bg238f@itc) (begin (set! bg238f@itc (bgdc7@make-collector)) ((lambda (bg2398@bg2391 bg2399@bg2393 bg239a@bg2395 bg239b@bg2397) ((lambda (bg23a0@swap) (dynamic-wind bg23a0@swap (lambda () (call-with-values (lambda () (bgdc3@parse-import-spec* bg2386@imp*)) (lambda (bg23a6@bg23a3 bg23a7@bg23a5) ((lambda (bg23aa@subst-labels bg23ab@subst-names) ((lambda (bg23ae@rib) ((lambda (bg23b1@wrap) (begin (set! bg23b1@wrap (lambda (bg242c@x) (make-simple-struct 'stx '5 (list bg242c@x bgae0@top-mark* (list bg23ae@rib) '())))) ((lambda (bg23b2@b* bg23b3@main-exp* bg23b4@rtc bg23b5@vtc) ((lambda (bg23c2@bg23bb bg23c3@bg23bd bg23c4@bg23bf bg23c5@bg23c1) ((lambda (bg23ca@swap) (dynamic-wind bg23ca@swap (lambda () (call-with-values (lambda () (bgdcf@chi-library-internal bg23b2@b* bg23ae@rib bg2388@top?)) (lambda (bg23d8@bg23cd bg23d9@bg23cf bg23da@bg23d1 bg23db@bg23d3 bg23dc@bg23d5 bg23dd@bg23d7) ((lambda (bg23e4@internal-exp* bg23e5@rhs* bg23e6@lex* bg23e7@mr bg23e8@r bg23e9@init*) (call-with-values (lambda () (bgdbd@parse-exports (append bg23b3@main-exp* bg23e4@internal-exp*))) (lambda (bg23f4@bg23f1 bg23f5@bg23f3) ((lambda (bg23f8@exp-id* bg23f9@exp-name*) (begin (bgb18@seal-rib! bg23ae@rib) ((lambda (bg23fc@init*) ((lambda (bg23fe@rhs*) ((lambda () (begin (bgb1a@unseal-rib! bg23ae@rib) ((lambda (bg2400@loc* bg2401@export-subst) ((lambda (bg2405@errstr) (begin (set! bg2405@errstr '"attempt to export mutated variable") (call-with-values (lambda () (bge2d@make-export-env/macros bg23e6@lex* bg2400@loc* bg23e8@r)) (lambda (bg240c@bg2407 bg240d@bg2409 bg240e@bg240b) ((lambda (bg2412@macro* bg2413@global* bg2414@export-env) (begin (for-each (lambda (bg2418@s) ((lambda (bg241a@name bg241b@label) ((lambda (bg241e@p) (if bg241e@p ((lambda (bg2420@b) ((lambda (bg2422@type) (if (eq? bg2422@type 'mutable) (bge41@syntax-violation 'export bg2405@errstr bg241a@name) (void))) (car bg2420@b))) (cdr bg241e@p)) (void))) (assq bg241b@label bg2414@export-env))) (car bg2418@s) (cdr bg2418@s))) bg2401@export-subst) ((lambda (bg2424@invoke-body bg2425@invoke-definitions) (values (bg238f@itc) (bg23b4@rtc) (bg23b5@vtc) (bgac3@bga32@build-sequence '#f (append bg2425@invoke-definitions (list bg2424@invoke-body))) bg2412@macro* bg2401@export-subst bg2414@export-env)) (bgac6@bga38@build-letrec* '#f bg23e6@lex* bg23fe@rhs* (bge29@build-exports bg2413@global* bg23fc@init*)) (map bgabf@bg98f@build-global-define (map cdr bg2413@global*))))) bg240e@bg240b bg240d@bg2409 bg240c@bg2407))))) '#f)) (map bgae6@gen-global bg23e6@lex*) (bge2b@make-export-subst bg23f9@exp-name* bg23f8@exp-id*)))))) (bgd93@chi-rhs* bg23e5@rhs* bg23e8@r bg23e7@mr))) (bgd7f@chi-expr* bg23e9@init* bg23e8@r bg23e7@mr)))) bg23f5@bg23f3 bg23f4@bg23f1)))) bg23dd@bg23d7 bg23dc@bg23d5 bg23db@bg23d3 bg23da@bg23d1 bg23d9@bg23cf bg23d8@bg23cd)))) bg23ca@swap)) (lambda () (begin ((lambda (bg2428@t) (begin (bg23c2@bg23bb bg23c4@bg23bf) (set! bg23c4@bg23bf bg2428@t))) (bg23c2@bg23bb)) ((lambda (bg242a@t) (begin (bg23c3@bg23bd bg23c5@bg23c1) (set! bg23c5@bg23c1 bg242a@t))) (bg23c3@bg23bd)))))) bgdc9@inv-collector bgdcb@vis-collector bg23b4@rtc bg23b5@vtc)) (map bg23b1@wrap bg2387@b*) (map bg23b1@wrap bg2385@main-exp*) (bgdc7@make-collector) (bgdc7@make-collector)))) '#f)) (bgdc5@make-top-rib bg23ab@subst-names bg23aa@subst-labels))) bg23a7@bg23a5 bg23a6@bg23a3)))) bg23a0@swap)) (lambda () (begin ((lambda (bg242e@t) (begin (bg2398@bg2391 bg239a@bg2395) (set! bg239a@bg2395 bg242e@t))) (bg2398@bg2391)) ((lambda (bg2430@t) (begin (bg2399@bg2393 bg239b@bg2397) (set! bg239b@bg2397 bg2430@t))) (bg2399@bg2393)))))) bgdcd@imp-collector bge4f@top-level-context bg238f@itc '#f))) '#f))) (set! bgdd5@core-library-expander (lambda (bg2432@e bg2433@verify-name) (call-with-values (lambda () (bgdc1@parse-library bg2432@e)) (lambda (bg243e@bg2437 bg243f@bg2439 bg2440@bg243b bg2441@bg243d) ((lambda (bg2446@b* bg2447@imp* bg2448@exp* bg2449@name*) (call-with-values (lambda () (bgdbf@parse-library-name bg2449@name*)) (lambda (bg2452@bg244f bg2453@bg2451) ((lambda (bg2456@ver bg2457@name) (begin (bg2433@verify-name bg2457@name) (call-with-values (lambda () (bgdd3@library-body-expander bg2457@name bg2448@exp* bg2447@imp* bg2446@b* '#f)) (lambda (bg2468@bg245b bg2469@bg245d bg246a@bg245f bg246b@bg2461 bg246c@bg2463 bg246d@bg2465 bg246e@bg2467) ((lambda (bg2476@export-env bg2477@export-subst bg2478@visit-code bg2479@invoke-code bg247a@visit-req* bg247b@invoke-req* bg247c@imp*) (values bg2457@name bg2456@ver bg247c@imp* bg247b@invoke-req* bg247a@visit-req* bg2479@invoke-code bg2478@visit-code bg2477@export-subst bg2476@export-env)) bg246e@bg2467 bg246d@bg2465 bg246c@bg2463 bg246b@bg2461 bg246a@bg245f bg2469@bg245d bg2468@bg245b))))) bg2453@bg2451 bg2452@bg244f)))) bg2441@bg243d bg2440@bg243b bg243f@bg2439 bg243e@bg2437))))) (set! bgdd7@parse-top-level-program (lambda (bg2484@e*) ((lambda (bg2486@t) ((lambda (bg2488@ls/false) (if (and bg2488@ls/false (apply (lambda (bg248a@import bg248b@imp* bg248c@b*) (eq? (bge47@syntax->datum bg248a@import) 'import)) bg2488@ls/false)) (apply (lambda (bg2490@import bg2491@imp* bg2492@b*) (values bg2491@imp* bg2492@b*)) bg2488@ls/false) ((lambda (bg2496@t) ((lambda (bg2498@ls/false) (if (and bg2498@ls/false (apply (lambda (bg249a@import bg249b@x bg249c@y) (eq? (bge47@syntax->datum bg249a@import) 'import)) bg2498@ls/false)) (apply (lambda (bg24a0@import bg24a1@x bg24a2@y) (bge41@syntax-violation 'expander '"invalid syntax of top-level program" (bgb56@syntax-car bg2484@e*))) bg2498@ls/false) ((lambda (bg24a6@t) ((lambda (bg24a8@ls/false) (if bg24a8@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bg24a8@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg24a6@t))) (bgd61@syntax-dispatch bg24a6@t '_))) bg2496@t))) (bgd61@syntax-dispatch bg2496@t '((any . any) . any)))) bg2486@t))) (bgd61@syntax-dispatch bg2486@t '((any . each-any) . each-any)))) bg2484@e*))) (set! bgdd9@top-level-expander (lambda (bg24aa@e*) (call-with-values (lambda () (bgdd7@parse-top-level-program bg24aa@e*)) (lambda (bg24b0@bg24ad bg24b1@bg24af) ((lambda (bg24b4@b* bg24b5@imp*) (call-with-values (lambda () (bgdd3@library-body-expander '() '() bg24b5@imp* bg24b4@b* '#t)) (lambda (bg24c6@bg24b9 bg24c7@bg24bb bg24c8@bg24bd bg24c9@bg24bf bg24ca@bg24c1 bg24cb@bg24c3 bg24cc@bg24c5) ((lambda (bg24d4@export-env bg24d5@export-subst bg24d6@visit-code bg24d7@invoke-code bg24d8@visit-req* bg24d9@invoke-req* bg24da@imp*) (values bg24d9@invoke-req* bg24d7@invoke-code)) bg24cc@bg24c5 bg24cb@bg24c3 bg24ca@bg24c1 bg24c9@bg24bf bg24c8@bg24bd bg24c7@bg24bb bg24c6@bg24b9)))) bg24b1@bg24af bg24b0@bg24ad))))) (set! bgddb@rp (bg6b8@bg594@make-record-printer 'env (lambda (bg24e2@x bg24e3@p bg24e4@wr) (display '"#<environment>" bg24e3@p)))) (set! bgde5@env? (lambda (bg24e8@x) (and (simple-struct? bg24e8@x) (eq? (simple-struct-name bg24e8@x) 'env)))) (set! bgde7@env-names (lambda (bg24ea@x) (simple-struct-ref bg24ea@x '0))) (set! bgde9@set-env-names! (lambda (bg24ec@x bg24ed@val) (simple-struct-set! bg24ec@x '0 bg24ed@val))) (set! bgdeb@env-labels (lambda (bg24f0@x) (simple-struct-ref bg24f0@x '1))) (set! bgded@set-env-labels! (lambda (bg24f2@x bg24f3@val) (simple-struct-set! bg24f2@x '1 bg24f3@val))) (set! bgdef@env-itc (lambda (bg24f6@x) (simple-struct-ref bg24f6@x '2))) (set! bgdf1@set-env-itc! (lambda (bg24f8@x bg24f9@val) (simple-struct-set! bg24f8@x '2 bg24f9@val))) (set! bgdf3@dummy '3) (set! bgdf5@rp (bg6b8@bg594@make-record-printer 'interaction-env (lambda (bg24fc@x bg24fd@p bg24fe@wr) (display '"#<environment>" bg24fd@p)))) (set! bgdff@interaction-env? (lambda (bg2502@x) (and (simple-struct? bg2502@x) (eq? (simple-struct-name bg2502@x) 'interaction-env)))) (set! bge01@interaction-env-rib (lambda (bg2504@x) (simple-struct-ref bg2504@x '0))) (set! bge03@set-interaction-env-rib! (lambda (bg2506@x bg2507@val) (simple-struct-set! bg2506@x '0 bg2507@val))) (set! bge05@interaction-env-r (lambda (bg250a@x) (simple-struct-ref bg250a@x '1))) (set! bge07@set-interaction-env-r! (lambda (bg250c@x bg250d@val) (simple-struct-set! bg250c@x '1 bg250d@val))) (set! bge09@interaction-env-locs (lambda (bg2510@x) (simple-struct-ref bg2510@x '2))) (set! bge0b@set-interaction-env-locs! (lambda (bg2512@x bg2513@val) (simple-struct-set! bg2512@x '2 bg2513@val))) (set! bge0d@dummy '3) (set! bge0f@interaction-environment-symbols (lambda () (bge17@environment-symbols (bge4d@interaction-environment)))) (set! bge11@environment-bindings (lambda (bg2516@e) (vector->list (vector-map (lambda (bg2518@name bg2519@label) (bge13@parse-binding (cons bg2518@name (bg986@bg7d3@imported-label->binding bg2519@label)))) (bgde7@env-names bg2516@e) (bgdeb@env-labels bg2516@e))))) (set! bge13@parse-binding (lambda (bg251c@b) (cons (car bg251c@b) ((lambda (bg251e@t) (if (memv bg251e@t '(core-prim global)) 'procedure (if (memv bg251e@t '(core-macro macro global-macro)) 'syntax (if (memv bg251e@t '($core-rtd)) 'record (if (eq? (car bg251c@b) (cadr bg251c@b)) 'syntax 'unknown))))) (cadr bg251c@b))))) (set! bge15@environment? (lambda (bg2520@x) (or (bgde5@env? bg2520@x) (bgdff@interaction-env? bg2520@x)))) (set! bge17@environment-symbols (lambda (bg2522@x) (if (bgde5@env? bg2522@x) (vector->list (bgde7@env-names bg2522@x)) (if (bgdff@interaction-env? bg2522@x) (map values (bgafa@rib-sym* (bge01@interaction-env-rib bg2522@x))) (assertion-violation 'environment-symbols '"not an environment" bg2522@x))))) (set! bge19@environment (lambda bg2524@imp* ((lambda (bg2526@itc) ((lambda (bg252c@bg2529 bg252d@bg252b) ((lambda (bg2530@swap) (dynamic-wind bg2530@swap (lambda () (call-with-values (lambda () (bgdc3@parse-import-spec* bg2524@imp*)) (lambda (bg2536@bg2533 bg2537@bg2535) ((lambda (bg253a@subst-labels bg253b@subst-names) (make-simple-struct 'env '4 (list bg253b@subst-names bg253a@subst-labels bg2526@itc))) bg2537@bg2535 bg2536@bg2533)))) bg2530@swap)) (lambda () ((lambda (bg253e@t) (begin (bg252c@bg2529 bg252d@bg252b) (set! bg252d@bg252b bg253e@t))) (bg252c@bg2529))))) bgdcd@imp-collector bg2526@itc)) (bgdc7@make-collector)))) (set! bge1b@null-environment (lambda (bg2540@n) (begin (if (not (eqv? bg2540@n '5)) (assertion-violation 'null-environment '"not 5" bg2540@n) (void)) (bge19@environment '(psyntax null-environment-5))))) (set! bge1d@scheme-report-environment (lambda (bg2542@n) (begin (if (not (eqv? bg2542@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bg2542@n) (void)) (bge19@environment '(psyntax scheme-report-environment-5))))) (set! bge1f@expand (lambda (bg2544@x bg2545@env) (if (bgde5@env? bg2545@env) ((lambda (bg2548@rib) ((lambda (bg254a@x bg254b@itc bg254c@rtc bg254d@vtc) ((lambda (bg2552@x) (begin (bgb18@seal-rib! bg2548@rib) (values bg2552@x (bg254c@rtc)))) ((lambda (bg2564@bg2555 bg2565@bg2557 bg2566@bg2559 bg2567@bg255b bg2568@bg255d bg2569@bg255f bg256a@bg2561 bg256b@bg2563) ((lambda (bg2574@swap) (dynamic-wind bg2574@swap (lambda () (bgd83@chi-expr bg254a@x '() '())) bg2574@swap)) (lambda () (begin ((lambda (bg2576@t) (begin (bg2564@bg2555 bg2568@bg255d) (set! bg2568@bg255d bg2576@t))) (bg2564@bg2555)) ((lambda (bg2578@t) (begin (bg2565@bg2557 bg2569@bg255f) (set! bg2569@bg255f bg2578@t))) (bg2565@bg2557)) ((lambda (bg257a@t) (begin (bg2566@bg2559 bg256a@bg2561) (set! bg256a@bg2561 bg257a@t))) (bg2566@bg2559)) ((lambda (bg257c@t) (begin (bg2567@bg255b bg256b@bg2563) (set! bg256b@bg2563 bg257c@t))) (bg2567@bg255b)))))) bge4f@top-level-context bgdc9@inv-collector bgdcb@vis-collector bgdcd@imp-collector '#f bg254c@rtc bg254d@vtc bg254b@itc))) (make-simple-struct 'stx '5 (list bg2544@x bgae0@top-mark* (list bg2548@rib) '())) (bgdef@env-itc bg2545@env) (bgdc7@make-collector) (bgdc7@make-collector))) (bgdc5@make-top-rib (bgde7@env-names bg2545@env) (bgdeb@env-labels bg2545@env))) (if (bgdff@interaction-env? bg2545@env) ((lambda (bg257e@rib bg257f@r bg2580@rtc) ((lambda (bg2584@x) (call-with-values (lambda () ((lambda (bg259a@bg258b bg259b@bg258d bg259c@bg258f bg259d@bg2591 bg259e@bg2593 bg259f@bg2595 bg25a0@bg2597 bg25a1@bg2599) ((lambda (bg25aa@swap) (dynamic-wind bg25aa@swap (lambda () (bgdd1@chi-interaction-expr bg2584@x bg257e@rib bg257f@r)) bg25aa@swap)) (lambda () (begin ((lambda (bg25ac@t) (begin (bg259a@bg258b bg259e@bg2593) (set! bg259e@bg2593 bg25ac@t))) (bg259a@bg258b)) ((lambda (bg25ae@t) (begin (bg259b@bg258d bg259f@bg2595) (set! bg259f@bg2595 bg25ae@t))) (bg259b@bg258d)) ((lambda (bg25b0@t) (begin (bg259c@bg258f bg25a0@bg2597) (set! bg25a0@bg2597 bg25b0@t))) (bg259c@bg258f)) ((lambda (bg25b2@t) (begin (bg259d@bg2591 bg25a1@bg2599) (set! bg25a1@bg2599 bg25b2@t))) (bg259d@bg2591)))))) bge4f@top-level-context bgdc9@inv-collector bgdcb@vis-collector bgdcd@imp-collector bg2545@env bg2580@rtc (bgdc7@make-collector) (bgdc7@make-collector))) (lambda (bg25b4@bg2587 bg25b5@bg2589) ((lambda (bg25b8@r^ bg25b9@e) (begin (bge07@set-interaction-env-r! bg2545@env bg25b8@r^) (values bg25b9@e (bg2580@rtc)))) bg25b5@bg2589 bg25b4@bg2587)))) (make-simple-struct 'stx '5 (list bg2544@x bgae0@top-mark* (list bg257e@rib) '())))) (bge01@interaction-env-rib bg2545@env) (bge05@interaction-env-r bg2545@env) (bgdc7@make-collector)) (assertion-violation 'expand '"not an environment" bg2545@env))))) (set! bge21@eval (lambda (bg25bc@x bg25bd@env) (begin (if (not (bge15@environment? bg25bd@env)) (error 'eval '"not an environment" bg25bd@env) (void)) (call-with-values (lambda () (bge1f@expand bg25bc@x bg25bd@env)) (lambda (bg25c4@bg25c1 bg25c5@bg25c3) ((lambda (bg25c8@invoke-req* bg25c9@x) (begin (for-each bg987@bg7d5@invoke-library bg25c8@invoke-req*) (eval-core (bg711@bg6c9@expanded->core bg25c9@x)))) bg25c5@bg25c3 bg25c4@bg25c1)))))) (set! bge23@library-expander (lambda bg263a ((lambda (bg263b) (if (= bg263b '3) (apply (lambda (bg25cc@x bg25cd@filename bg25ce@verify-name) ((lambda (bg25d3@build-visit-code bg25d5@visit!) (begin (set! bg25d3@build-visit-code (lambda (bg2628@macro*) (if (null? bg2628@macro*) (bgac4@bga34@build-void) (bgac3@bga32@build-sequence '#f (map (lambda (bg262a@x) ((lambda (bg262c@loc bg262d@src) (list 'set! bg262c@loc bg262d@src)) (car bg262a@x) (cddr bg262a@x))) bg2628@macro*))))) (set! bg25d5@visit! (lambda (bg2620@macro*) (for-each (lambda (bg2622@x) ((lambda (bg2624@loc bg2625@proc) (set-symbol-value! bg2624@loc bg2625@proc)) (car bg2622@x) (cadr bg2622@x))) bg2620@macro*))) (call-with-values (lambda () (bgdd5@core-library-expander bg25cc@x bg25ce@verify-name)) (lambda (bg25e8@bg25d7 bg25e9@bg25d9 bg25ea@bg25db bg25eb@bg25dd bg25ec@bg25df bg25ed@bg25e1 bg25ee@bg25e3 bg25ef@bg25e5 bg25f0@bg25e7) ((lambda (bg25fa@export-env bg25fb@export-subst bg25fc@macro* bg25fd@invoke-code bg25fe@vis* bg25ff@inv* bg2600@imp* bg2601@ver bg2602@name) ((lambda (bg260c@id bg260d@name bg260e@ver bg260f@imp* bg2610@vis* bg2611@inv* bg2612@visit-proc bg2613@invoke-proc bg2614@visit-code bg2615@invoke-code) (begin (bg985@bg7d1@install-library bg260c@id bg260d@name bg260e@ver bg260f@imp* bg2610@vis* bg2611@inv* bg25fb@export-subst bg25fa@export-env bg2612@visit-proc bg2613@invoke-proc bg2614@visit-code bg2615@invoke-code '#t bg25cd@filename) (values bg260c@id bg260d@name bg260e@ver bg260f@imp* bg2610@vis* bg2611@inv* bg2615@invoke-code bg2614@visit-code bg25fb@export-subst bg25fa@export-env))) (gensym) bg2602@name bg2601@ver (map bg98b@bg7dd@library-spec bg2600@imp*) (map bg98b@bg7dd@library-spec bg25fe@vis*) (map bg98b@bg7dd@library-spec bg25ff@inv*) (lambda () (bg25d5@visit! bg25fc@macro*)) (lambda () (eval-core (bg711@bg6c9@expanded->core bg25fd@invoke-code))) (bg25d3@build-visit-code bg25fc@macro*) bg25fd@invoke-code)) bg25f0@bg25e7 bg25ef@bg25e5 bg25ee@bg25e3 bg25ed@bg25e1 bg25ec@bg25df bg25eb@bg25dd bg25ea@bg25db bg25e9@bg25d9 bg25e8@bg25d7))))) '#f '#f)) bg263a) (if (= bg263b '2) (apply (lambda (bg2630@x bg2631@filename) (bge23@library-expander bg2630@x bg2631@filename (lambda (bg2634@x) (values)))) bg263a) (if (= bg263b '1) (apply (lambda (bg2636@x) (bge23@library-expander bg2636@x '#f (lambda (bg2638@x) (values)))) bg263a) (error 'apply '"invalid arg count"))))) (length bg263a)))) (set! bge25@boot-library-expand (lambda (bg263c@x) (call-with-values (lambda () (bge23@library-expander bg263c@x)) (lambda (bg2652@bg263f bg2653@bg2641 bg2654@bg2643 bg2655@bg2645 bg2656@bg2647 bg2657@bg2649 bg2658@bg264b bg2659@bg264d bg265a@bg264f bg265b@bg2651) ((lambda (bg2666@export-env bg2667@export-subst bg2668@visit-code bg2669@invoke-code bg266a@inv* bg266b@vis* bg266c@imp* bg266d@ver bg266e@name bg266f@id) (values bg266e@name bg2669@invoke-code bg2667@export-subst bg2666@export-env)) bg265b@bg2651 bg265a@bg264f bg2659@bg264d bg2658@bg264b bg2657@bg2649 bg2656@bg2647 bg2655@bg2645 bg2654@bg2643 bg2653@bg2641 bg2652@bg263f))))) (set! bge27@rev-map-append (lambda (bg267a@f bg267b@ls bg267c@ac) (if (null? bg267b@ls) bg267c@ac (bge27@rev-map-append bg267a@f (cdr bg267b@ls) (cons (bg267a@f (car bg267b@ls)) bg267c@ac))))) (set! bge29@build-exports (lambda (bg2680@lex*+loc* bg2681@init*) (bgac3@bga32@build-sequence '#f (cons (bgac4@bga34@build-void) (bge27@rev-map-append (lambda (bg2684@x) (list 'set! (cdr bg2684@x) (car bg2684@x))) bg2680@lex*+loc* bg2681@init*))))) (set! bge2b@make-export-subst (lambda (bg2686@name* bg2687@id*) (map (lambda (bg268a@name bg268b@id) ((lambda (bg268e@label) (begin (if (not bg268e@label) (bge41@syntax-violation '#f '"cannot export unbound identifier" bg268b@id) (void)) (cons bg268a@name bg268e@label))) (bgb72@id->label bg268b@id))) bg2686@name* bg2687@id*))) (set! bge2d@make-export-env/macros (lambda (bg2690@lex* bg2691@loc* bg2692@r) ((lambda (bg2697@lookup) (begin (set! bg2697@lookup (lambda (bg26b4@x) ((letrec ((bg26b6@f (lambda (bg26b8@x bg26b9@lex* bg26ba@loc*) (if (pair? bg26b9@lex*) (if (eq? bg26b8@x (car bg26b9@lex*)) (car bg26ba@loc*) (bg26b6@f bg26b8@x (cdr bg26b9@lex*) (cdr bg26ba@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) bg26b6@f) bg26b4@x bg2690@lex* bg2691@loc*))) ((letrec ((bg2698@f (lambda (bg269a@r bg269b@env bg269c@global* bg269d@macro*) (if (null? bg269a@r) (values bg269b@env bg269c@global* bg269d@macro*) ((lambda (bg26a2@x) ((lambda (bg26a4@label bg26a5@b) ((lambda (bg26a8@t) (if (memv bg26a8@t '(lexical)) ((lambda (bg26aa@v) ((lambda (bg26ac@loc bg26ad@type) (bg2698@f (cdr bg269a@r) (cons (cons* bg26a4@label bg26ad@type bg26ac@loc) bg269b@env) (cons (cons (bgced@lexical-var bg26aa@v) bg26ac@loc) bg269c@global*) bg269d@macro*)) (bg2697@lookup (bgced@lexical-var bg26aa@v)) (if (bgcef@lexical-mutable? bg26aa@v) 'mutable 'global))) (bgb7a@binding-value bg26a5@b)) (if (memv bg26a8@t '(local-macro)) ((lambda (bg26b0@loc) (bg2698@f (cdr bg269a@r) (cons (cons* bg26a4@label 'global-macro bg26b0@loc) bg269b@env) bg269c@global* (cons (cons bg26b0@loc (bgb7a@binding-value bg26a5@b)) bg269d@macro*))) (gensym)) (if (memv bg26a8@t '(local-macro!)) ((lambda (bg26b2@loc) (bg2698@f (cdr bg269a@r) (cons (cons* bg26a4@label 'global-macro! bg26b2@loc) bg269b@env) bg269c@global* (cons (cons bg26b2@loc (bgb7a@binding-value bg26a5@b)) bg269d@macro*))) (gensym)) (if (memv bg26a8@t '($rtd $module)) (bg2698@f (cdr bg269a@r) (cons bg26a2@x bg269b@env) bg269c@global* bg269d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bgb78@binding-type bg26a5@b) (bgb7a@binding-value bg26a5@b))))))) (bgb78@binding-type bg26a5@b))) (car bg26a2@x) (cdr bg26a2@x))) (car bg269a@r)))))) bg2698@f) bg2692@r '() '() '()))) '#f))) (set! bge2f@generate-temporaries (lambda (bg26be@ls) ((lambda (bg26c0@t) ((lambda (bg26c2@ls/false) (if bg26c2@ls/false (apply (lambda (bg26c4@ls) (map (lambda (bg26c6@x) (make-simple-struct 'stx '5 (list ((lambda (bg26c8@x) (if (or (symbol? bg26c8@x) (string? bg26c8@x)) (gensym bg26c8@x) (gensym 't))) (bge47@syntax->datum bg26c6@x)) bgae0@top-mark* '() '()))) bg26c4@ls)) bg26c2@ls/false) ((lambda (bg26ca@t) ((lambda (bg26cc@ls/false) (if bg26cc@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bg26cc@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg26ca@t))) (bgd61@syntax-dispatch bg26ca@t '_))) bg26c0@t))) (bgd61@syntax-dispatch bg26c0@t 'each-any))) bg26be@ls))) (set! bge31@free-identifier=? (lambda (bg26ce@x bg26cf@y) (if (bgb5c@id? bg26ce@x) (if (bgb5c@id? bg26cf@y) (bgb62@free-id=? bg26ce@x bg26cf@y) (assertion-violation 'free-identifier=? '"not an identifier" bg26cf@y)) (assertion-violation 'free-identifier=? '"not an identifier" bg26ce@x)))) (set! bge33@bound-identifier=? (lambda (bg26d2@x bg26d3@y) (if (bgb5c@id? bg26d2@x) (if (bgb5c@id? bg26d3@y) (bgb60@bound-id=? bg26d2@x bg26d3@y) (assertion-violation 'bound-identifier=? '"not an identifier" bg26d3@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bg26d2@x)))) (set! bge35@make-source-condition (lambda (bg26d6@x) ((lambda (bg26e0@bg26db bg26e2@bg26dd bg26e4@bg26dc bg26e7@bg26da bg26e9@make-source-condition bg26eb@bg26d8 bg26ed@bg26d9 bg26ef@source-condition? bg26f1@source-filename bg26f3@source-character) (begin (set! bg26e0@bg26db (make-record-type-descriptor '&source-information bg2b30@bg2877@&condition-rtd 'bg26de '#f '#f '#((immutable file-name) (immutable character)))) (set! bg26e2@bg26dd '#f) (set! bg26e4@bg26dc (make-record-constructor-descriptor bg26e0@bg26db bg2b31@bg2879@&condition-rcd bg26e2@bg26dd)) (set! bg26e7@bg26da (record-predicate bg26e0@bg26db)) (set! bg26e9@make-source-condition (record-constructor bg26e4@bg26dc)) (set! bg26eb@bg26d8 (record-accessor bg26e0@bg26db '0)) (set! bg26ed@bg26d9 (record-accessor bg26e0@bg26db '1)) (set! bg26ef@source-condition? (condition-predicate bg26e0@bg26db)) (set! bg26f1@source-filename (condition-accessor bg26e0@bg26db bg26eb@bg26d8)) (set! bg26f3@source-character (condition-accessor bg26e0@bg26db bg26ed@bg26d9)) (if (pair? bg26d6@x) (bg26e9@make-source-condition (car bg26d6@x) (cdr bg26d6@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! bge37@extract-position-condition (lambda (bg26f4@x) (bge35@make-source-condition (bge39@expression-position bg26f4@x)))) (set! bge39@expression-position (lambda (bg26f6@x) (and (bgb28@stx? bg26f6@x) ((lambda (bg26f8@x) (and (bg6b0@bg584@annotation? bg26f8@x) (bg6b1@bg586@annotation-source bg26f8@x))) (bgb2a@stx-expr bg26f6@x))))) (set! bge3b@assertion-error (lambda (bg26fa@expr bg26fb@pos) (raise (condition (bg2b60@bg293b@make-assertion-violation) (bg2b72@bg296d@make-who-condition 'assert) (bg2b36@bg28ce@make-message-condition '"assertion failed") (bg2b68@bg2952@make-irritants-condition (list bg26fa@expr)) (bge35@make-source-condition bg26fb@pos))))) (set! bge3d@syntax-error (lambda (bg26fe@x . bg2700@args) (begin (if (not (for-all string? bg2700@args)) (assertion-violation 'syntax-error '"invalid argument" bg2700@args) (void)) (raise (condition (bg2b36@bg28ce@make-message-condition (if (null? bg2700@args) '"invalid syntax" (apply string-append bg2700@args))) (bg2b94@bg29c9@make-syntax-violation (bge47@syntax->datum bg26fe@x) '#f) (bge37@extract-position-condition bg26fe@x)))))) (set! bge3f@syntax-violation* (lambda (bg2702@who bg2703@msg bg2704@form bg2705@condition-object) (begin (if (not (string? bg2703@msg)) (assertion-violation 'syntax-violation '"message is not a string" bg2703@msg) (void)) ((lambda (bg270a@who) (raise (condition (if bg270a@who (bg2b72@bg296d@make-who-condition bg270a@who) (condition)) (bg2b36@bg28ce@make-message-condition bg2703@msg) bg2705@condition-object (bge37@extract-position-condition bg2704@form)))) (if (or (string? bg2702@who) (symbol? bg2702@who)) bg2702@who (if (not bg2702@who) ((lambda (bg270c@t) ((lambda (bg270e@ls/false) (if (and bg270e@ls/false (apply (lambda (bg2710@id) (bgb5c@id? bg2710@id)) bg270e@ls/false)) (apply (lambda (bg2712@id) (bge47@syntax->datum bg2712@id)) bg270e@ls/false) ((lambda (bg2714@t) ((lambda (bg2716@ls/false) (if (and bg2716@ls/false (apply (lambda (bg2718@id bg2719@rest) (bgb5c@id? bg2718@id)) bg2716@ls/false)) (apply (lambda (bg271c@id bg271d@rest) (bge47@syntax->datum bg271c@id)) bg2716@ls/false) ((lambda (bg2720@t) ((lambda (bg2722@ls/false) (if bg2722@ls/false (apply (lambda () '#f) bg2722@ls/false) (bge41@syntax-violation '#f '"invalid syntax" bg2720@t))) (bgd61@syntax-dispatch bg2720@t '_))) bg2714@t))) (bgd61@syntax-dispatch bg2714@t '(any . any)))) bg270c@t))) (bgd61@syntax-dispatch bg270c@t 'any))) bg2704@form) (assertion-violation 'syntax-violation '"invalid who argument" bg2702@who))))))) (set! bge41@syntax-violation (lambda bg2732 ((lambda (bg2733) (if (= bg2733 '3) (apply (lambda (bg2724@who bg2725@msg bg2726@form) (bge41@syntax-violation bg2724@who bg2725@msg bg2726@form '#f)) bg2732) (if (= bg2733 '4) (apply (lambda (bg272a@who bg272b@msg bg272c@form bg272d@subform) (bge3f@syntax-violation* bg272a@who bg272b@msg bg272c@form (bg2b94@bg29c9@make-syntax-violation (bge47@syntax->datum bg272c@form) (bge47@syntax->datum bg272d@subform)))) bg2732) (error 'apply '"invalid arg count")))) (length bg2732)))) (set! bge43@identifier? (lambda (bg2734@x) (bgb5c@id? bg2734@x))) (set! bge45@datum->syntax (lambda (bg2736@id bg2737@datum) (if (bgb5c@id? bg2736@id) (bgb3c@datum->stx bg2736@id bg2737@datum) (assertion-violation 'datum->syntax '"not an identifier" bg2736@id)))) (set! bge47@syntax->datum (lambda (bg273a@x) (bgb70@stx->datum bg273a@x))) (set! bge49@compile-r6rs-top-level (lambda (bg273c@x*) (call-with-values (lambda () (bgdd9@top-level-expander bg273c@x*)) (lambda (bg2742@bg273f bg2743@bg2741) ((lambda (bg2746@invoke-code bg2747@lib*) (lambda () (begin (for-each bg987@bg7d5@invoke-library bg2747@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bg711@bg6c9@expanded->core bg2746@invoke-code)) (void)) (eval-core (bg711@bg6c9@expanded->core bg2746@invoke-code))))) bg2743@bg2741 bg2742@bg273f))))) (set! bge4b@pre-compile-r6rs-top-level (lambda (bg274a@x*) (call-with-values (lambda () (bgdd9@top-level-expander bg274a@x*)) (lambda (bg2750@bg274d bg2751@bg274f) ((lambda (bg2754@invoke-code bg2755@lib*) (begin (for-each bg987@bg7d5@invoke-library bg2755@lib*) (bg6b9@bg596@compile-core (bg711@bg6c9@expanded->core bg2754@invoke-code)))) bg2751@bg274f bg2750@bg274d))))) (set! bge4d@interaction-environment ((lambda (bg2758@the-env) (lambda () (or bg2758@the-env ((lambda (bg275a@lib bg275b@rib) (begin ((lambda (bg275e@subst) (begin (bgafc@set-rib-sym*! bg275b@rib (map car bg275e@subst)) (bgb00@set-rib-mark**! bg275b@rib (map (lambda (bg2760@x) bgae0@top-mark*) bg275e@subst)) (bgb04@set-rib-label*! bg275b@rib (map cdr bg275e@subst)))) (bg962@bg78b@library-subst bg275a@lib)) ((lambda (bg2762@env) (begin (set! bg2758@the-env bg2762@env) bg2762@env)) (make-simple-struct 'interaction-env '4 (list bg275b@rib '() '()))))) (bg980@bg7c7@find-library-by-name '(mosh interaction)) (bgb10@make-empty-rib))))) '#f)) (set! bge4f@top-level-context (bg6bb@bg59a@make-parameter '#f)) (begin (set! bg285d@bge4f@top-level-context bge4f@top-level-context) (set! bg285c@bge4d@interaction-environment bge4d@interaction-environment) (set! bg285b@bge4b@pre-compile-r6rs-top-level bge4b@pre-compile-r6rs-top-level) (set! bg285a@bge49@compile-r6rs-top-level bge49@compile-r6rs-top-level) (set! bg2859@bge47@syntax->datum bge47@syntax->datum) (set! bg2858@bge45@datum->syntax bge45@datum->syntax) (set! bg2857@bge43@identifier? bge43@identifier?) (set! bg2856@bge41@syntax-violation bge41@syntax-violation) (set! bg2855@bge3f@syntax-violation* bge3f@syntax-violation*) (set! bg2854@bge3d@syntax-error bge3d@syntax-error) (set! bg2853@bge3b@assertion-error bge3b@assertion-error) (set! bg2852@bge39@expression-position bge39@expression-position) (set! bg2851@bge37@extract-position-condition bge37@extract-position-condition) (set! bg2850@bge35@make-source-condition bge35@make-source-condition) (set! bg284f@bge33@bound-identifier=? bge33@bound-identifier=?) (set! bg284e@bge31@free-identifier=? bge31@free-identifier=?) (set! bg284d@bge2f@generate-temporaries bge2f@generate-temporaries) (set! bg284c@bge2d@make-export-env/macros bge2d@make-export-env/macros) (set! bg284b@bge2b@make-export-subst bge2b@make-export-subst) (set! bg284a@bge29@build-exports bge29@build-exports) (set! bg2849@bge27@rev-map-append bge27@rev-map-append) (set! bg2848@bge25@boot-library-expand bge25@boot-library-expand) (set! bg2847@bge23@library-expander bge23@library-expander) (set! bg2846@bge21@eval bge21@eval) (set! bg2845@bge1f@expand bge1f@expand) (set! bg2844@bge1d@scheme-report-environment bge1d@scheme-report-environment) (set! bg2843@bge1b@null-environment bge1b@null-environment) (set! bg2842@bge19@environment bge19@environment) (set! bg2841@bge17@environment-symbols bge17@environment-symbols) (set! bg2840@bge15@environment? bge15@environment?) (set! bg283f@bge13@parse-binding bge13@parse-binding) (set! bg283e@bge11@environment-bindings bge11@environment-bindings) (set! bg283d@bge0f@interaction-environment-symbols bge0f@interaction-environment-symbols) (set! bg283c@bge0d@dummy bge0d@dummy) (set! bg283b@bge0b@set-interaction-env-locs! bge0b@set-interaction-env-locs!) (set! bg283a@bge09@interaction-env-locs bge09@interaction-env-locs) (set! bg2839@bge07@set-interaction-env-r! bge07@set-interaction-env-r!) (set! bg2838@bge05@interaction-env-r bge05@interaction-env-r) (set! bg2837@bge03@set-interaction-env-rib! bge03@set-interaction-env-rib!) (set! bg2836@bge01@interaction-env-rib bge01@interaction-env-rib) (set! bg2835@bgdff@interaction-env? bgdff@interaction-env?) (set! bg2834@bgdf5@rp bgdf5@rp) (set! bg2833@bgdf3@dummy bgdf3@dummy) (set! bg2832@bgdf1@set-env-itc! bgdf1@set-env-itc!) (set! bg2831@bgdef@env-itc bgdef@env-itc) (set! bg2830@bgded@set-env-labels! bgded@set-env-labels!) (set! bg282f@bgdeb@env-labels bgdeb@env-labels) (set! bg282e@bgde9@set-env-names! bgde9@set-env-names!) (set! bg282d@bgde7@env-names bgde7@env-names) (set! bg282c@bgde5@env? bgde5@env?) (set! bg282b@bgddb@rp bgddb@rp) (set! bg282a@bgdd9@top-level-expander bgdd9@top-level-expander) (set! bg2829@bgdd7@parse-top-level-program bgdd7@parse-top-level-program) (set! bg2828@bgdd5@core-library-expander bgdd5@core-library-expander) (set! bg2827@bgdd3@library-body-expander bgdd3@library-body-expander) (set! bg2826@bgdd1@chi-interaction-expr bgdd1@chi-interaction-expr) (set! bg2825@bgdcf@chi-library-internal bgdcf@chi-library-internal) (set! bg2824@bgdcd@imp-collector bgdcd@imp-collector) (set! bg2823@bgdcb@vis-collector bgdcb@vis-collector) (set! bg2822@bgdc9@inv-collector bgdc9@inv-collector) (set! bg2821@bgdc7@make-collector bgdc7@make-collector) (set! bg2820@bgdc5@make-top-rib bgdc5@make-top-rib) (set! bg281f@bgdc3@parse-import-spec* bgdc3@parse-import-spec*) (set! bg281e@bgdc1@parse-library bgdc1@parse-library) (set! bg281d@bgdbf@parse-library-name bgdbf@parse-library-name) (set! bg281c@bgdbd@parse-exports bgdbd@parse-exports) (set! bg281b@bgdbb@expand-transformer bgdbb@expand-transformer) (set! bg281a@bgdb9@chi-body* bgdb9@chi-body*) (set! bg2819@bgdb7@chi-internal-module bgdb7@chi-internal-module) (set! bg2818@bgdb5@module-interface-exp-id* bgdb5@module-interface-exp-id*) (set! bg2817@bgdb3@dummy bgdb3@dummy) (set! bg2816@bgdb1@set-module-interface-exp-lab-vec! bgdb1@set-module-interface-exp-lab-vec!) (set! bg2815@bgdaf@module-interface-exp-lab-vec bgdaf@module-interface-exp-lab-vec) (set! bg2814@bgdad@set-module-interface-exp-id-vec! bgdad@set-module-interface-exp-id-vec!) (set! bg2813@bgdab@module-interface-exp-id-vec bgdab@module-interface-exp-id-vec) (set! bg2812@bgda9@set-module-interface-first-mark! bgda9@set-module-interface-first-mark!) (set! bg2811@bgda7@module-interface-first-mark bgda7@module-interface-first-mark) (set! bg2810@bgda5@module-interface? bgda5@module-interface?) (set! bg280f@bgd9b@parse-module bgd9b@parse-module) (set! bg280e@bgd99@chi-internal bgd99@chi-internal) (set! bg280d@bgd97@find-dups bgd97@find-dups) (set! bg280c@bgd95@find-bound=? bgd95@find-bound=?) (set! bg280b@bgd93@chi-rhs* bgd93@chi-rhs*) (set! bg280a@bgd91@expand-interaction-rhs*/init* bgd91@expand-interaction-rhs*/init*) (set! bg2809@bgd8f@chi-rhs bgd8f@chi-rhs) (set! bg2808@bgd8d@chi-defun bgd8d@chi-defun) (set! bg2807@bgd8b@chi-lambda-clause* bgd8b@chi-lambda-clause*) (set! bg2806@bgd89@chi-lambda-clause bgd89@chi-lambda-clause) (set! bg2805@bgd87@verify-formals bgd87@verify-formals) (set! bg2804@bgd85@chi-set! bgd85@chi-set!) (set! bg2803@bgd83@chi-expr bgd83@chi-expr) (set! bg2802@bgd81@chi-application bgd81@chi-application) (set! bg2801@bgd7f@chi-expr* bgd7f@chi-expr*) (set! bg2800@bgd7d@chi-global-macro bgd7d@chi-global-macro) (set! bg27ff@bgd7b@chi-local-macro bgd7b@chi-local-macro) (set! bg27fe@bgd79@chi-macro bgd79@chi-macro) (set! bg27fd@bgd77@do-macro-call bgd77@do-macro-call) (set! bg27fc@bgd75@local-macro-transformer bgd75@local-macro-transformer) (set! bg27fb@bgd73@macro-transformer bgd73@macro-transformer) (set! bg27fa@bgd71@symbol-macro bgd71@symbol-macro) (set! bg27f9@bgd6f@core-macro-transformer bgd6f@core-macro-transformer) (set! bg27f8@bgd6d@syntax-transformer bgd6d@syntax-transformer) (set! bg27f7@bgd6b@ellipsis-map bgd6b@ellipsis-map) (set! bg27f6@bgd69@syntax-case-transformer bgd69@syntax-case-transformer) (set! bg27f5@bgd67@verify-literals bgd67@verify-literals) (set! bg27f4@bgd65@underscore? bgd65@underscore?) (set! bg27f3@bgd63@ellipsis? bgd63@ellipsis?) (set! bg27f2@bgd61@syntax-dispatch bgd61@syntax-dispatch) (set! bg27f1@bgd5f@convert-pattern bgd5f@convert-pattern) (set! bg27f0@bgd5d@foreign-call-transformer bgd5d@foreign-call-transformer) (set! bg27ef@bgd5b@parameterize-macro bgd5b@parameterize-macro) (set! bg27ee@bgd59@incorrect-usage-macro bgd59@incorrect-usage-macro) (set! bg27ed@bgd57@define-condition-type-macro bgd57@define-condition-type-macro) (set! bg27ec@bgd55@define-record-type-macro bgd55@define-record-type-macro) (set! bg27eb@bgd53@define-struct-macro bgd53@define-struct-macro) (set! bg27ea@bgd51@quasisyntax-macro bgd51@quasisyntax-macro) (set! bg27e9@bgd4f@quasiquote-macro bgd4f@quasiquote-macro) (set! bg27e8@bgd4d@syntax-rules-macro bgd4d@syntax-rules-macro) (set! bg27e7@bgd4b@include-into-macro bgd4b@include-into-macro) (set! bg27e6@bgd49@include-macro bgd49@include-macro) (set! bg27e5@bgd47@do-include bgd47@do-include) (set! bg27e4@bgd45@cond-macro bgd45@cond-macro) (set! bg27e3@bgd43@and-macro bgd43@and-macro) (set! bg27e2@bgd41@or-macro bgd41@or-macro) (set! bg27e1@bgd3f@let*-macro bgd3f@let*-macro) (set! bg27e0@bgd3d@do-macro bgd3d@do-macro) (set! bg27df@bgd3b@identifier-syntax-macro bgd3b@identifier-syntax-macro) (set! bg27de@bgd39@endianness-macro bgd39@endianness-macro) (set! bg27dd@bgd37@assert-macro bgd37@assert-macro) (set! bg27dc@bgd35@delay-macro bgd35@delay-macro) (set! bg27db@bgd33@time-macro bgd33@time-macro) (set! bg27da@bgd31@define-enumeration-macro bgd31@define-enumeration-macro) (set! bg27d9@bgd2f@guard-macro bgd2f@guard-macro) (set! bg27d8@bgd2d@trace-letrec-syntax-macro bgd2d@trace-letrec-syntax-macro) (set! bg27d7@bgd2b@trace-let-syntax-macro bgd2b@trace-let-syntax-macro) (set! bg27d6@bgd29@trace-let/rec-syntax bgd29@trace-let/rec-syntax) (set! bg27d5@bgd27@trace-define-syntax-macro bgd27@trace-define-syntax-macro) (set! bg27d4@bgd25@trace-define-macro bgd25@trace-define-macro) (set! bg27d3@bgd23@trace-lambda-macro bgd23@trace-lambda-macro) (set! bg27d2@bgd21@let*-values-macro bgd21@let*-values-macro) (set! bg27d1@bgd1f@let-values-macro bgd1f@let-values-macro) (set! bg27d0@bgd1d@let-macro bgd1d@let-macro) (set! bg27cf@bgd1b@invalid-fmls-error bgd1b@invalid-fmls-error) (set! bg27ce@bgd19@with-syntax-macro bgd19@with-syntax-macro) (set! bg27cd@bgd17@bless bgd17@bless) (set! bg27cc@bgd15@lambda-transformer bgd15@lambda-transformer) (set! bg27cb@bgd13@case-lambda-transformer bgd13@case-lambda-transformer) (set! bg27ca@bgd11@quote-transformer bgd11@quote-transformer) (set! bg27c9@bgd0f@case-macro bgd0f@case-macro) (set! bg27c8@bgd0d@or-transformer bgd0d@or-transformer) (set! bg27c7@bgd0b@and-transformer bgd0b@and-transformer) (set! bg27c6@bgd09@if-transformer bgd09@if-transformer) (set! bg27c5@bgd07@unless-macro bgd07@unless-macro) (set! bg27c4@bgd05@when-macro bgd05@when-macro) (set! bg27c3@bgd03@record-constructor-descriptor-transformer bgd03@record-constructor-descriptor-transformer) (set! bg27c2@bgd01@record-type-descriptor-transformer bgd01@record-type-descriptor-transformer) (set! bg27c1@bgcff@type-descriptor-transformer bgcff@type-descriptor-transformer) (set! bg27c0@bgcfd@fluid-let-syntax-transformer bgcfd@fluid-let-syntax-transformer) (set! bg27bf@bgcfb@letrec*-transformer bgcfb@letrec*-transformer) (set! bg27be@bgcf9@letrec-transformer bgcf9@letrec-transformer) (set! bg27bd@bgcf7@letrec-helper bgcf7@letrec-helper) (set! bg27bc@bgcf5@add-lexicals bgcf5@add-lexicals) (set! bg27bb@bgcf3@add-lexical bgcf3@add-lexical) (set! bg27ba@bgcf1@set-lexical-mutable! bgcf1@set-lexical-mutable!) (set! bg27b9@bgcef@lexical-mutable? bgcef@lexical-mutable?) (set! bg27b8@bgced@lexical-var bgced@lexical-var) (set! bg27b7@bgceb@scheme-stx bgceb@scheme-stx) (set! bg27b6@bgce9@scheme-stx-hashtable bgce9@scheme-stx-hashtable) (set! bg27b5@bgce7@parse-define-syntax bgce7@parse-define-syntax) (set! bg27b4@bgce5@parse-define bgce5@parse-define) (set! bg27b3@bgb94@make-eval-transformer bgb94@make-eval-transformer) (set! bg27b2@bgb92@variable-transformer-procedure bgb92@variable-transformer-procedure) (set! bg27b1@bgb90@variable-transformer? bgb90@variable-transformer?) (set! bg27b0@bgb8e@make-variable-transformer bgb8e@make-variable-transformer) (set! bg27af@bgb8c@sanitize-binding bgb8c@sanitize-binding) (set! bg27ae@bgb7e@syntax-type bgb7e@syntax-type) (set! bg27ad@bgb7c@raise-unbound-error bgb7c@raise-unbound-error) (set! bg27ac@bgb7a@binding-value bgb7a@binding-value) (set! bg27ab@bgb78@binding-type bgb78@binding-type) (set! bg27aa@bgb76@make-binding bgb76@make-binding) (set! bg27a9@bgb74@label->binding bgb74@label->binding) (set! bg27a8@bgb72@id->label bgb72@id->label) (set! bg27a7@bgb70@stx->datum bgb70@stx->datum) (set! bg27a6@bgb6e@strip bgb6e@strip) (set! bg27a5@bgb6c@strip-annotations bgb6c@strip-annotations) (set! bg27a4@bgb6a@self-evaluating? bgb6a@self-evaluating?) (set! bg27a3@bgb68@bound-id-member? bgb68@bound-id-member?) (set! bg27a2@bgb66@distinct-bound-ids? bgb66@distinct-bound-ids?) (set! bg27a1@bgb64@valid-bound-ids? bgb64@valid-bound-ids?) (set! bg27a0@bgb62@free-id=? bgb62@free-id=?) (set! bg279f@bgb60@bound-id=? bgb60@bound-id=?) (set! bg279e@bgb5e@id->sym bgb5e@id->sym) (set! bg279d@bgb5c@id? bgb5c@id?) (set! bg279c@bgb5a@syntax->list bgb5a@syntax->list) (set! bg279b@bgb58@syntax-cdr bgb58@syntax-cdr) (set! bg279a@bgb56@syntax-car bgb56@syntax-car) (set! bg2799@bgb54@syntax-list? bgb54@syntax-list?) (set! bg2798@bgb52@syntax-null? bgb52@syntax-null?) (set! bg2797@bgb50@syntax-vector? bgb50@syntax-vector?) (set! bg2796@bgb4e@syntax-pair? bgb4e@syntax-pair?) (set! bg2795@bgb4c@syntax-vector->list bgb4c@syntax-vector->list) (set! bg2794@bgb4a@syntax-kind? bgb4a@syntax-kind?) (set! bg2793@bgb48@add-subst bgb48@add-subst) (set! bg2792@bgb46@add-mark bgb46@add-mark) (set! bg2791@bgb44@mkstx bgb44@mkstx) (set! bg2790@bgb42@anti-mark? bgb42@anti-mark?) (set! bg278f@bgb40@anti-mark bgb40@anti-mark) (set! bg278e@bgb3e@gen-mark bgb3e@gen-mark) (set! bg278d@bgb3c@datum->stx bgb3c@datum->stx) (set! bg278c@bgb3a@dummy bgb3a@dummy) (set! bg278b@bgb38@set-stx-ae*! bgb38@set-stx-ae*!) (set! bg278a@bgb36@stx-ae* bgb36@stx-ae*) (set! bg2789@bgb34@set-stx-subst*! bgb34@set-stx-subst*!) (set! bg2788@bgb32@stx-subst* bgb32@stx-subst*) (set! bg2787@bgb30@set-stx-mark*! bgb30@set-stx-mark*!) (set! bg2786@bgb2e@stx-mark* bgb2e@stx-mark*) (set! bg2785@bgb2c@set-stx-expr! bgb2c@set-stx-expr!) (set! bg2784@bgb2a@stx-expr bgb2a@stx-expr) (set! bg2783@bgb28@stx? bgb28@stx?) (set! bg2782@bgb1e@rp bgb1e@rp) (set! bg2781@bgb1c@make-full-rib bgb1c@make-full-rib) (set! bg2780@bgb1a@unseal-rib! bgb1a@unseal-rib!) (set! bg277f@bgb18@seal-rib! bgb18@seal-rib!) (set! bg277e@bgb16@make-rib-map bgb16@make-rib-map) (set! bg277d@bgb14@extend-rib/nc! bgb14@extend-rib/nc!) (set! bg277c@bgb12@extend-rib! bgb12@extend-rib!) (set! bg277b@bgb10@make-empty-rib bgb10@make-empty-rib) (set! bg277a@bgb0e@dummy bgb0e@dummy) (set! bg2779@bgb0c@set-rib-cache! bgb0c@set-rib-cache!) (set! bg2778@bgb0a@rib-cache bgb0a@rib-cache) (set! bg2777@bgb08@set-rib-sealed/freq! bgb08@set-rib-sealed/freq!) (set! bg2776@bgb06@rib-sealed/freq bgb06@rib-sealed/freq) (set! bg2775@bgb04@set-rib-label*! bgb04@set-rib-label*!) (set! bg2774@bgb02@rib-label* bgb02@rib-label*) (set! bg2773@bgb00@set-rib-mark**! bgb00@set-rib-mark**!) (set! bg2772@bgafe@rib-mark** bgafe@rib-mark**) (set! bg2771@bgafc@set-rib-sym*! bgafc@set-rib-sym*!) (set! bg2770@bgafa@rib-sym* bgafa@rib-sym*) (set! bg276f@bgaf8@rib? bgaf8@rib?) (set! bg276e@bgaee@gen-define-label bgaee@gen-define-label) (set! bg276d@bgaec@gen-define-label+loc bgaec@gen-define-label+loc) (set! bg276c@bgaea@gen-top-level-label bgaea@gen-top-level-label) (set! bg276b@bgae8@gen-label bgae8@gen-label) (set! bg276a@bgae6@gen-global bgae6@gen-global) (set! bg2769@bgae4@gen-lexical bgae4@gen-lexical) (set! bg2768@bgae2@top-marked? bgae2@top-marked?) (set! bg2767@bgae0@top-mark* bgae0@top-mark*) (set! bg2766@bgadb@set-union bgadb@set-union) (set! bg2765@bgad9@set-cons bgad9@set-cons) (set! bg2764@bgad7@file-options-macro bgad7@file-options-macro) (bg97d@bg7c1@current-library-expander bge23@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bg286c@bg2867 bg286e@bg2869 bg2870@bg2868 bg2873@&condition? bg2875@make-&condition bg2877@&condition-rtd bg2879@&condition-rcd bg28c5@bg28c0 bg28c7@bg28c2 bg28c9@bg28c1 bg28cc@p? bg28ce@make-message-condition bg28d0@bg28bf bg28d2@message-condition? bg28d4@condition-message bg28d6@&message-rtd bg28d8@&message-rcd bg28de@bg28d9 bg28e0@bg28db bg28e2@bg28da bg28e5@p? bg28e7@make-warning bg28e9@warning? bg28eb@&warning-rtd bg28ed@&warning-rcd bg28f3@bg28ee bg28f5@bg28f0 bg28f7@bg28ef bg28fa@p? bg28fc@make-serious-condition bg28fe@serious-condition? bg2900@&serious-rtd bg2902@&serious-rcd bg2908@bg2903 bg290a@bg2905 bg290c@bg2904 bg290f@p? bg2911@make-error bg2913@error? bg2915@&error-rtd bg2917@&error-rcd bg291d@bg2918 bg291f@bg291a bg2921@bg2919 bg2924@p? bg2926@make-violation bg2928@violation? bg292a@&violation-rtd bg292c@&violation-rcd bg2932@bg292d bg2934@bg292f bg2936@bg292e bg2939@p? bg293b@make-assertion-violation bg293d@assertion-violation? bg293f@&assertion-rtd bg2941@&assertion-rcd bg2949@bg2944 bg294b@bg2946 bg294d@bg2945 bg2950@p? bg2952@make-irritants-condition bg2954@bg2943 bg2956@irritants-condition? bg2958@condition-irritants bg295a@&irritants-rtd bg295c@&irritants-rcd bg2964@bg295f bg2966@bg2961 bg2968@bg2960 bg296b@p? bg296d@make-who-condition bg296f@bg295e bg2971@who-condition? bg2973@condition-who bg2975@&who-rtd bg2977@&who-rcd bg297d@bg2978 bg297f@bg297a bg2981@bg2979 bg2984@p? bg2986@make-non-continuable-violation bg2988@non-continuable-violation? bg298a@&non-continuable-rtd bg298c@&non-continuable-rcd bg2992@bg298d bg2994@bg298f bg2996@bg298e bg2999@p? bg299b@make-implementation-restriction-violation bg299d@implementation-restriction-violation? bg299f@&implementation-restriction-rtd bg29a1@&implementation-restriction-rcd bg29a7@bg29a2 bg29a9@bg29a4 bg29ab@bg29a3 bg29ae@p? bg29b0@make-lexical-violation bg29b2@lexical-violation? bg29b4@&lexical-rtd bg29b6@&lexical-rcd bg29c0@bg29bb bg29c2@bg29bd bg29c4@bg29bc bg29c7@p? bg29c9@make-syntax-violation bg29cb@bg29b8 bg29cd@bg29ba bg29cf@syntax-violation? bg29d1@syntax-violation-form bg29d3@syntax-violation-subform bg29d5@&syntax-rtd bg29d7@&syntax-rcd bg29dd@bg29d8 bg29df@bg29da bg29e1@bg29d9 bg29e4@p? bg29e6@make-undefined-violation bg29e8@undefined-violation? bg29ea@&undefined-rtd bg29ec@&undefined-rcd bg29f2@bg29ed bg29f4@bg29ef bg29f6@bg29ee bg29f9@p? bg29fb@make-i/o-error bg29fd@i/o-error? bg29ff@&i/o-rtd bg2a01@&i/o-rcd bg2a07@bg2a02 bg2a09@bg2a04 bg2a0b@bg2a03 bg2a0e@p? bg2a10@make-i/o-read-error bg2a12@i/o-read-error? bg2a14@&i/o-read-rtd bg2a16@&i/o-read-rcd bg2a1c@bg2a17 bg2a1e@bg2a19 bg2a20@bg2a18 bg2a23@p? bg2a25@make-i/o-write-error bg2a27@i/o-write-error? bg2a29@&i/o-write-rtd bg2a2b@&i/o-write-rcd bg2a33@bg2a2e bg2a35@bg2a30 bg2a37@bg2a2f bg2a3a@p? bg2a3c@make-i/o-invalid-position-error bg2a3e@bg2a2d bg2a40@i/o-invalid-position-error? bg2a42@i/o-error-position bg2a44@&i/o-invalid-position-rtd bg2a46@&i/o-invalid-position-rcd bg2a4e@bg2a49 bg2a50@bg2a4b bg2a52@bg2a4a bg2a55@p? bg2a57@make-i/o-filename-error bg2a59@bg2a48 bg2a5b@i/o-filename-error? bg2a5d@i/o-error-filename bg2a5f@&i/o-filename-rtd bg2a61@&i/o-filename-rcd bg2a67@bg2a62 bg2a69@bg2a64 bg2a6b@bg2a63 bg2a6e@p? bg2a70@make-i/o-file-protection-error bg2a72@i/o-file-protection-error? bg2a74@&i/o-file-protection-rtd bg2a76@&i/o-file-protection-rcd bg2a7c@bg2a77 bg2a7e@bg2a79 bg2a80@bg2a78 bg2a83@p? bg2a85@make-i/o-file-is-read-only-error bg2a87@i/o-file-is-read-only-error? bg2a89@&i/o-file-is-read-only-rtd bg2a8b@&i/o-file-is-read-only-rcd bg2a91@bg2a8c bg2a93@bg2a8e bg2a95@bg2a8d bg2a98@p? bg2a9a@make-i/o-file-already-exists-error bg2a9c@i/o-file-already-exists-error? bg2a9e@&i/o-file-already-exists-rtd bg2aa0@&i/o-file-already-exists-rcd bg2aa6@bg2aa1 bg2aa8@bg2aa3 bg2aaa@bg2aa2 bg2aad@p? bg2aaf@make-i/o-file-does-not-exist-error bg2ab1@i/o-file-does-not-exist-error? bg2ab3@&i/o-file-does-not-exist-rtd bg2ab5@&i/o-file-does-not-exist-rcd bg2abd@bg2ab8 bg2abf@bg2aba bg2ac1@bg2ab9 bg2ac4@p? bg2ac6@make-i/o-port-error bg2ac8@bg2ab7 bg2aca@i/o-port-error? bg2acc@i/o-error-port bg2ace@&i/o-port-rtd bg2ad0@&i/o-port-rcd bg2ad6@bg2ad1 bg2ad8@bg2ad3 bg2ada@bg2ad2 bg2add@p? bg2adf@make-i/o-decoding-error bg2ae1@i/o-decoding-error? bg2ae3@&i/o-decoding-rtd bg2ae5@&i/o-decoding-rcd bg2aed@bg2ae8 bg2aef@bg2aea bg2af1@bg2ae9 bg2af4@p? bg2af6@make-i/o-encoding-error bg2af8@bg2ae7 bg2afa@i/o-encoding-error? bg2afc@i/o-encoding-error-char bg2afe@&i/o-encoding-rtd bg2b00@&i/o-encoding-rcd bg2b06@bg2b01 bg2b08@bg2b03 bg2b0a@bg2b02 bg2b0d@p? bg2b0f@make-no-infinities-violation bg2b11@no-infinities-violation? bg2b13@&no-infinities-rtd bg2b15@&no-infinities-rcd bg2b1b@bg2b16 bg2b1d@bg2b18 bg2b1f@bg2b17 bg2b22@p? bg2b24@make-no-nans-violation bg2b26@no-nans-violation? bg2b28@&no-nans-rtd bg2b2a@&no-nans-rcd) (begin (set! bg286c@bg2867 (make-record-type-descriptor '&condition '#f 'bg286a '#f '#f '#())) (set! bg286e@bg2869 '#f) (set! bg2870@bg2868 (make-record-constructor-descriptor bg286c@bg2867 '#f bg286e@bg2869)) (set! bg2873@&condition? (record-predicate bg286c@bg2867)) (set! bg2875@make-&condition (record-constructor bg2870@bg2868)) (set! bg2877@&condition-rtd bg286c@bg2867) (set! bg2879@&condition-rcd bg2870@bg2868) (set! bg28c5@bg28c0 (make-record-type-descriptor '&message bg286c@bg2867 'bg28c3 '#f '#f '#((immutable message)))) (set! bg28c7@bg28c2 '#f) (set! bg28c9@bg28c1 (make-record-constructor-descriptor bg28c5@bg28c0 bg2870@bg2868 bg28c7@bg28c2)) (set! bg28cc@p? (record-predicate bg28c5@bg28c0)) (set! bg28ce@make-message-condition (record-constructor bg28c9@bg28c1)) (set! bg28d0@bg28bf (record-accessor bg28c5@bg28c0 '0)) (set! bg28d2@message-condition? (condition-predicate bg28c5@bg28c0)) (set! bg28d4@condition-message (condition-accessor bg28c5@bg28c0 bg28d0@bg28bf)) (set! bg28d6@&message-rtd bg28c5@bg28c0) (set! bg28d8@&message-rcd bg28c9@bg28c1) (set! bg28de@bg28d9 (make-record-type-descriptor '&warning bg286c@bg2867 'bg28dc '#f '#f '#())) (set! bg28e0@bg28db '#f) (set! bg28e2@bg28da (make-record-constructor-descriptor bg28de@bg28d9 bg2870@bg2868 bg28e0@bg28db)) (set! bg28e5@p? (record-predicate bg28de@bg28d9)) (set! bg28e7@make-warning (record-constructor bg28e2@bg28da)) (set! bg28e9@warning? (condition-predicate bg28de@bg28d9)) (set! bg28eb@&warning-rtd bg28de@bg28d9) (set! bg28ed@&warning-rcd bg28e2@bg28da) (set! bg28f3@bg28ee (make-record-type-descriptor '&serious bg286c@bg2867 'bg28f1 '#f '#f '#())) (set! bg28f5@bg28f0 '#f) (set! bg28f7@bg28ef (make-record-constructor-descriptor bg28f3@bg28ee bg2870@bg2868 bg28f5@bg28f0)) (set! bg28fa@p? (record-predicate bg28f3@bg28ee)) (set! bg28fc@make-serious-condition (record-constructor bg28f7@bg28ef)) (set! bg28fe@serious-condition? (condition-predicate bg28f3@bg28ee)) (set! bg2900@&serious-rtd bg28f3@bg28ee) (set! bg2902@&serious-rcd bg28f7@bg28ef) (set! bg2908@bg2903 (make-record-type-descriptor '&error bg28f3@bg28ee 'bg2906 '#f '#f '#())) (set! bg290a@bg2905 '#f) (set! bg290c@bg2904 (make-record-constructor-descriptor bg2908@bg2903 bg28f7@bg28ef bg290a@bg2905)) (set! bg290f@p? (record-predicate bg2908@bg2903)) (set! bg2911@make-error (record-constructor bg290c@bg2904)) (set! bg2913@error? (condition-predicate bg2908@bg2903)) (set! bg2915@&error-rtd bg2908@bg2903) (set! bg2917@&error-rcd bg290c@bg2904) (set! bg291d@bg2918 (make-record-type-descriptor '&violation bg28f3@bg28ee 'bg291b '#f '#f '#())) (set! bg291f@bg291a '#f) (set! bg2921@bg2919 (make-record-constructor-descriptor bg291d@bg2918 bg28f7@bg28ef bg291f@bg291a)) (set! bg2924@p? (record-predicate bg291d@bg2918)) (set! bg2926@make-violation (record-constructor bg2921@bg2919)) (set! bg2928@violation? (condition-predicate bg291d@bg2918)) (set! bg292a@&violation-rtd bg291d@bg2918) (set! bg292c@&violation-rcd bg2921@bg2919) (set! bg2932@bg292d (make-record-type-descriptor '&assertion bg291d@bg2918 'bg2930 '#f '#f '#())) (set! bg2934@bg292f '#f) (set! bg2936@bg292e (make-record-constructor-descriptor bg2932@bg292d bg2921@bg2919 bg2934@bg292f)) (set! bg2939@p? (record-predicate bg2932@bg292d)) (set! bg293b@make-assertion-violation (record-constructor bg2936@bg292e)) (set! bg293d@assertion-violation? (condition-predicate bg2932@bg292d)) (set! bg293f@&assertion-rtd bg2932@bg292d) (set! bg2941@&assertion-rcd bg2936@bg292e) (set! bg2949@bg2944 (make-record-type-descriptor '&irritants bg286c@bg2867 'bg2947 '#f '#f '#((immutable irritants)))) (set! bg294b@bg2946 '#f) (set! bg294d@bg2945 (make-record-constructor-descriptor bg2949@bg2944 bg2870@bg2868 bg294b@bg2946)) (set! bg2950@p? (record-predicate bg2949@bg2944)) (set! bg2952@make-irritants-condition (record-constructor bg294d@bg2945)) (set! bg2954@bg2943 (record-accessor bg2949@bg2944 '0)) (set! bg2956@irritants-condition? (condition-predicate bg2949@bg2944)) (set! bg2958@condition-irritants (condition-accessor bg2949@bg2944 bg2954@bg2943)) (set! bg295a@&irritants-rtd bg2949@bg2944) (set! bg295c@&irritants-rcd bg294d@bg2945) (set! bg2964@bg295f (make-record-type-descriptor '&who bg286c@bg2867 'bg2962 '#f '#f '#((immutable who)))) (set! bg2966@bg2961 '#f) (set! bg2968@bg2960 (make-record-constructor-descriptor bg2964@bg295f bg2870@bg2868 bg2966@bg2961)) (set! bg296b@p? (record-predicate bg2964@bg295f)) (set! bg296d@make-who-condition (record-constructor bg2968@bg2960)) (set! bg296f@bg295e (record-accessor bg2964@bg295f '0)) (set! bg2971@who-condition? (condition-predicate bg2964@bg295f)) (set! bg2973@condition-who (condition-accessor bg2964@bg295f bg296f@bg295e)) (set! bg2975@&who-rtd bg2964@bg295f) (set! bg2977@&who-rcd bg2968@bg2960) (set! bg297d@bg2978 (make-record-type-descriptor '&non-continuable bg291d@bg2918 'bg297b '#f '#f '#())) (set! bg297f@bg297a '#f) (set! bg2981@bg2979 (make-record-constructor-descriptor bg297d@bg2978 bg2921@bg2919 bg297f@bg297a)) (set! bg2984@p? (record-predicate bg297d@bg2978)) (set! bg2986@make-non-continuable-violation (record-constructor bg2981@bg2979)) (set! bg2988@non-continuable-violation? (condition-predicate bg297d@bg2978)) (set! bg298a@&non-continuable-rtd bg297d@bg2978) (set! bg298c@&non-continuable-rcd bg2981@bg2979) (set! bg2992@bg298d (make-record-type-descriptor '&implementation-restriction bg291d@bg2918 'bg2990 '#f '#f '#())) (set! bg2994@bg298f '#f) (set! bg2996@bg298e (make-record-constructor-descriptor bg2992@bg298d bg2921@bg2919 bg2994@bg298f)) (set! bg2999@p? (record-predicate bg2992@bg298d)) (set! bg299b@make-implementation-restriction-violation (record-constructor bg2996@bg298e)) (set! bg299d@implementation-restriction-violation? (condition-predicate bg2992@bg298d)) (set! bg299f@&implementation-restriction-rtd bg2992@bg298d) (set! bg29a1@&implementation-restriction-rcd bg2996@bg298e) (set! bg29a7@bg29a2 (make-record-type-descriptor '&lexical bg291d@bg2918 'bg29a5 '#f '#f '#())) (set! bg29a9@bg29a4 '#f) (set! bg29ab@bg29a3 (make-record-constructor-descriptor bg29a7@bg29a2 bg2921@bg2919 bg29a9@bg29a4)) (set! bg29ae@p? (record-predicate bg29a7@bg29a2)) (set! bg29b0@make-lexical-violation (record-constructor bg29ab@bg29a3)) (set! bg29b2@lexical-violation? (condition-predicate bg29a7@bg29a2)) (set! bg29b4@&lexical-rtd bg29a7@bg29a2) (set! bg29b6@&lexical-rcd bg29ab@bg29a3) (set! bg29c0@bg29bb (make-record-type-descriptor '&syntax bg291d@bg2918 'bg29be '#f '#f '#((immutable form) (immutable subform)))) (set! bg29c2@bg29bd '#f) (set! bg29c4@bg29bc (make-record-constructor-descriptor bg29c0@bg29bb bg2921@bg2919 bg29c2@bg29bd)) (set! bg29c7@p? (record-predicate bg29c0@bg29bb)) (set! bg29c9@make-syntax-violation (record-constructor bg29c4@bg29bc)) (set! bg29cb@bg29b8 (record-accessor bg29c0@bg29bb '0)) (set! bg29cd@bg29ba (record-accessor bg29c0@bg29bb '1)) (set! bg29cf@syntax-violation? (condition-predicate bg29c0@bg29bb)) (set! bg29d1@syntax-violation-form (condition-accessor bg29c0@bg29bb bg29cb@bg29b8)) (set! bg29d3@syntax-violation-subform (condition-accessor bg29c0@bg29bb bg29cd@bg29ba)) (set! bg29d5@&syntax-rtd bg29c0@bg29bb) (set! bg29d7@&syntax-rcd bg29c4@bg29bc) (set! bg29dd@bg29d8 (make-record-type-descriptor '&undefined bg291d@bg2918 'bg29db '#f '#f '#())) (set! bg29df@bg29da '#f) (set! bg29e1@bg29d9 (make-record-constructor-descriptor bg29dd@bg29d8 bg2921@bg2919 bg29df@bg29da)) (set! bg29e4@p? (record-predicate bg29dd@bg29d8)) (set! bg29e6@make-undefined-violation (record-constructor bg29e1@bg29d9)) (set! bg29e8@undefined-violation? (condition-predicate bg29dd@bg29d8)) (set! bg29ea@&undefined-rtd bg29dd@bg29d8) (set! bg29ec@&undefined-rcd bg29e1@bg29d9) (set! bg29f2@bg29ed (make-record-type-descriptor '&i/o bg2908@bg2903 'bg29f0 '#f '#f '#())) (set! bg29f4@bg29ef '#f) (set! bg29f6@bg29ee (make-record-constructor-descriptor bg29f2@bg29ed bg290c@bg2904 bg29f4@bg29ef)) (set! bg29f9@p? (record-predicate bg29f2@bg29ed)) (set! bg29fb@make-i/o-error (record-constructor bg29f6@bg29ee)) (set! bg29fd@i/o-error? (condition-predicate bg29f2@bg29ed)) (set! bg29ff@&i/o-rtd bg29f2@bg29ed) (set! bg2a01@&i/o-rcd bg29f6@bg29ee) (set! bg2a07@bg2a02 (make-record-type-descriptor '&i/o-read bg29f2@bg29ed 'bg2a05 '#f '#f '#())) (set! bg2a09@bg2a04 '#f) (set! bg2a0b@bg2a03 (make-record-constructor-descriptor bg2a07@bg2a02 bg29f6@bg29ee bg2a09@bg2a04)) (set! bg2a0e@p? (record-predicate bg2a07@bg2a02)) (set! bg2a10@make-i/o-read-error (record-constructor bg2a0b@bg2a03)) (set! bg2a12@i/o-read-error? (condition-predicate bg2a07@bg2a02)) (set! bg2a14@&i/o-read-rtd bg2a07@bg2a02) (set! bg2a16@&i/o-read-rcd bg2a0b@bg2a03) (set! bg2a1c@bg2a17 (make-record-type-descriptor '&i/o-write bg29f2@bg29ed 'bg2a1a '#f '#f '#())) (set! bg2a1e@bg2a19 '#f) (set! bg2a20@bg2a18 (make-record-constructor-descriptor bg2a1c@bg2a17 bg29f6@bg29ee bg2a1e@bg2a19)) (set! bg2a23@p? (record-predicate bg2a1c@bg2a17)) (set! bg2a25@make-i/o-write-error (record-constructor bg2a20@bg2a18)) (set! bg2a27@i/o-write-error? (condition-predicate bg2a1c@bg2a17)) (set! bg2a29@&i/o-write-rtd bg2a1c@bg2a17) (set! bg2a2b@&i/o-write-rcd bg2a20@bg2a18) (set! bg2a33@bg2a2e (make-record-type-descriptor '&i/o-invalid-position bg29f2@bg29ed 'bg2a31 '#f '#f '#((immutable position)))) (set! bg2a35@bg2a30 '#f) (set! bg2a37@bg2a2f (make-record-constructor-descriptor bg2a33@bg2a2e bg29f6@bg29ee bg2a35@bg2a30)) (set! bg2a3a@p? (record-predicate bg2a33@bg2a2e)) (set! bg2a3c@make-i/o-invalid-position-error (record-constructor bg2a37@bg2a2f)) (set! bg2a3e@bg2a2d (record-accessor bg2a33@bg2a2e '0)) (set! bg2a40@i/o-invalid-position-error? (condition-predicate bg2a33@bg2a2e)) (set! bg2a42@i/o-error-position (condition-accessor bg2a33@bg2a2e bg2a3e@bg2a2d)) (set! bg2a44@&i/o-invalid-position-rtd bg2a33@bg2a2e) (set! bg2a46@&i/o-invalid-position-rcd bg2a37@bg2a2f) (set! bg2a4e@bg2a49 (make-record-type-descriptor '&i/o-filename bg29f2@bg29ed 'bg2a4c '#f '#f '#((immutable filename)))) (set! bg2a50@bg2a4b '#f) (set! bg2a52@bg2a4a (make-record-constructor-descriptor bg2a4e@bg2a49 bg29f6@bg29ee bg2a50@bg2a4b)) (set! bg2a55@p? (record-predicate bg2a4e@bg2a49)) (set! bg2a57@make-i/o-filename-error (record-constructor bg2a52@bg2a4a)) (set! bg2a59@bg2a48 (record-accessor bg2a4e@bg2a49 '0)) (set! bg2a5b@i/o-filename-error? (condition-predicate bg2a4e@bg2a49)) (set! bg2a5d@i/o-error-filename (condition-accessor bg2a4e@bg2a49 bg2a59@bg2a48)) (set! bg2a5f@&i/o-filename-rtd bg2a4e@bg2a49) (set! bg2a61@&i/o-filename-rcd bg2a52@bg2a4a) (set! bg2a67@bg2a62 (make-record-type-descriptor '&i/o-file-protection bg2a4e@bg2a49 'bg2a65 '#f '#f '#())) (set! bg2a69@bg2a64 '#f) (set! bg2a6b@bg2a63 (make-record-constructor-descriptor bg2a67@bg2a62 bg2a52@bg2a4a bg2a69@bg2a64)) (set! bg2a6e@p? (record-predicate bg2a67@bg2a62)) (set! bg2a70@make-i/o-file-protection-error (record-constructor bg2a6b@bg2a63)) (set! bg2a72@i/o-file-protection-error? (condition-predicate bg2a67@bg2a62)) (set! bg2a74@&i/o-file-protection-rtd bg2a67@bg2a62) (set! bg2a76@&i/o-file-protection-rcd bg2a6b@bg2a63) (set! bg2a7c@bg2a77 (make-record-type-descriptor '&i/o-file-is-read-only bg2a67@bg2a62 'bg2a7a '#f '#f '#())) (set! bg2a7e@bg2a79 '#f) (set! bg2a80@bg2a78 (make-record-constructor-descriptor bg2a7c@bg2a77 bg2a6b@bg2a63 bg2a7e@bg2a79)) (set! bg2a83@p? (record-predicate bg2a7c@bg2a77)) (set! bg2a85@make-i/o-file-is-read-only-error (record-constructor bg2a80@bg2a78)) (set! bg2a87@i/o-file-is-read-only-error? (condition-predicate bg2a7c@bg2a77)) (set! bg2a89@&i/o-file-is-read-only-rtd bg2a7c@bg2a77) (set! bg2a8b@&i/o-file-is-read-only-rcd bg2a80@bg2a78) (set! bg2a91@bg2a8c (make-record-type-descriptor '&i/o-file-already-exists bg2a4e@bg2a49 'bg2a8f '#f '#f '#())) (set! bg2a93@bg2a8e '#f) (set! bg2a95@bg2a8d (make-record-constructor-descriptor bg2a91@bg2a8c bg2a52@bg2a4a bg2a93@bg2a8e)) (set! bg2a98@p? (record-predicate bg2a91@bg2a8c)) (set! bg2a9a@make-i/o-file-already-exists-error (record-constructor bg2a95@bg2a8d)) (set! bg2a9c@i/o-file-already-exists-error? (condition-predicate bg2a91@bg2a8c)) (set! bg2a9e@&i/o-file-already-exists-rtd bg2a91@bg2a8c) (set! bg2aa0@&i/o-file-already-exists-rcd bg2a95@bg2a8d) (set! bg2aa6@bg2aa1 (make-record-type-descriptor '&i/o-file-does-not-exist bg2a4e@bg2a49 'bg2aa4 '#f '#f '#())) (set! bg2aa8@bg2aa3 '#f) (set! bg2aaa@bg2aa2 (make-record-constructor-descriptor bg2aa6@bg2aa1 bg2a52@bg2a4a bg2aa8@bg2aa3)) (set! bg2aad@p? (record-predicate bg2aa6@bg2aa1)) (set! bg2aaf@make-i/o-file-does-not-exist-error (record-constructor bg2aaa@bg2aa2)) (set! bg2ab1@i/o-file-does-not-exist-error? (condition-predicate bg2aa6@bg2aa1)) (set! bg2ab3@&i/o-file-does-not-exist-rtd bg2aa6@bg2aa1) (set! bg2ab5@&i/o-file-does-not-exist-rcd bg2aaa@bg2aa2) (set! bg2abd@bg2ab8 (make-record-type-descriptor '&i/o-port bg29f2@bg29ed 'bg2abb '#f '#f '#((immutable port)))) (set! bg2abf@bg2aba '#f) (set! bg2ac1@bg2ab9 (make-record-constructor-descriptor bg2abd@bg2ab8 bg29f6@bg29ee bg2abf@bg2aba)) (set! bg2ac4@p? (record-predicate bg2abd@bg2ab8)) (set! bg2ac6@make-i/o-port-error (record-constructor bg2ac1@bg2ab9)) (set! bg2ac8@bg2ab7 (record-accessor bg2abd@bg2ab8 '0)) (set! bg2aca@i/o-port-error? (condition-predicate bg2abd@bg2ab8)) (set! bg2acc@i/o-error-port (condition-accessor bg2abd@bg2ab8 bg2ac8@bg2ab7)) (set! bg2ace@&i/o-port-rtd bg2abd@bg2ab8) (set! bg2ad0@&i/o-port-rcd bg2ac1@bg2ab9) (set! bg2ad6@bg2ad1 (make-record-type-descriptor '&i/o-decoding bg2abd@bg2ab8 'bg2ad4 '#f '#f '#())) (set! bg2ad8@bg2ad3 '#f) (set! bg2ada@bg2ad2 (make-record-constructor-descriptor bg2ad6@bg2ad1 bg2ac1@bg2ab9 bg2ad8@bg2ad3)) (set! bg2add@p? (record-predicate bg2ad6@bg2ad1)) (set! bg2adf@make-i/o-decoding-error (record-constructor bg2ada@bg2ad2)) (set! bg2ae1@i/o-decoding-error? (condition-predicate bg2ad6@bg2ad1)) (set! bg2ae3@&i/o-decoding-rtd bg2ad6@bg2ad1) (set! bg2ae5@&i/o-decoding-rcd bg2ada@bg2ad2) (set! bg2aed@bg2ae8 (make-record-type-descriptor '&i/o-encoding bg2abd@bg2ab8 'bg2aeb '#f '#f '#((immutable char)))) (set! bg2aef@bg2aea '#f) (set! bg2af1@bg2ae9 (make-record-constructor-descriptor bg2aed@bg2ae8 bg2ac1@bg2ab9 bg2aef@bg2aea)) (set! bg2af4@p? (record-predicate bg2aed@bg2ae8)) (set! bg2af6@make-i/o-encoding-error (record-constructor bg2af1@bg2ae9)) (set! bg2af8@bg2ae7 (record-accessor bg2aed@bg2ae8 '0)) (set! bg2afa@i/o-encoding-error? (condition-predicate bg2aed@bg2ae8)) (set! bg2afc@i/o-encoding-error-char (condition-accessor bg2aed@bg2ae8 bg2af8@bg2ae7)) (set! bg2afe@&i/o-encoding-rtd bg2aed@bg2ae8) (set! bg2b00@&i/o-encoding-rcd bg2af1@bg2ae9) (set! bg2b06@bg2b01 (make-record-type-descriptor '&no-infinities bg2992@bg298d 'bg2b04 '#f '#f '#())) (set! bg2b08@bg2b03 '#f) (set! bg2b0a@bg2b02 (make-record-constructor-descriptor bg2b06@bg2b01 bg2996@bg298e bg2b08@bg2b03)) (set! bg2b0d@p? (record-predicate bg2b06@bg2b01)) (set! bg2b0f@make-no-infinities-violation (record-constructor bg2b0a@bg2b02)) (set! bg2b11@no-infinities-violation? (condition-predicate bg2b06@bg2b01)) (set! bg2b13@&no-infinities-rtd bg2b06@bg2b01) (set! bg2b15@&no-infinities-rcd bg2b0a@bg2b02) (set! bg2b1b@bg2b16 (make-record-type-descriptor '&no-nans bg2992@bg298d 'bg2b19 '#f '#f '#())) (set! bg2b1d@bg2b18 '#f) (set! bg2b1f@bg2b17 (make-record-constructor-descriptor bg2b1b@bg2b16 bg2996@bg298e bg2b1d@bg2b18)) (set! bg2b22@p? (record-predicate bg2b1b@bg2b16)) (set! bg2b24@make-no-nans-violation (record-constructor bg2b1f@bg2b17)) (set! bg2b26@no-nans-violation? (condition-predicate bg2b1b@bg2b16)) (set! bg2b28@&no-nans-rtd bg2b1b@bg2b16) (set! bg2b2a@&no-nans-rcd bg2b1f@bg2b17) (begin (set! bg2c1b@bg2b2a@&no-nans-rcd bg2b2a@&no-nans-rcd) (set! bg2c1a@bg2b28@&no-nans-rtd bg2b28@&no-nans-rtd) (set! bg2c19@bg2b26@no-nans-violation? bg2b26@no-nans-violation?) (set! bg2c18@bg2b24@make-no-nans-violation bg2b24@make-no-nans-violation) (set! bg2c17@bg2b22@p? bg2b22@p?) (set! bg2c16@bg2b1f@bg2b17 bg2b1f@bg2b17) (set! bg2c15@bg2b1d@bg2b18 bg2b1d@bg2b18) (set! bg2c14@bg2b1b@bg2b16 bg2b1b@bg2b16) (set! bg2c13@bg2b15@&no-infinities-rcd bg2b15@&no-infinities-rcd) (set! bg2c12@bg2b13@&no-infinities-rtd bg2b13@&no-infinities-rtd) (set! bg2c11@bg2b11@no-infinities-violation? bg2b11@no-infinities-violation?) (set! bg2c10@bg2b0f@make-no-infinities-violation bg2b0f@make-no-infinities-violation) (set! bg2c0f@bg2b0d@p? bg2b0d@p?) (set! bg2c0e@bg2b0a@bg2b02 bg2b0a@bg2b02) (set! bg2c0d@bg2b08@bg2b03 bg2b08@bg2b03) (set! bg2c0c@bg2b06@bg2b01 bg2b06@bg2b01) (set! bg2c0b@bg2b00@&i/o-encoding-rcd bg2b00@&i/o-encoding-rcd) (set! bg2c0a@bg2afe@&i/o-encoding-rtd bg2afe@&i/o-encoding-rtd) (set! bg2c09@bg2afc@i/o-encoding-error-char bg2afc@i/o-encoding-error-char) (set! bg2c08@bg2afa@i/o-encoding-error? bg2afa@i/o-encoding-error?) (set! bg2c07@bg2af8@bg2ae7 bg2af8@bg2ae7) (set! bg2c06@bg2af6@make-i/o-encoding-error bg2af6@make-i/o-encoding-error) (set! bg2c05@bg2af4@p? bg2af4@p?) (set! bg2c04@bg2af1@bg2ae9 bg2af1@bg2ae9) (set! bg2c03@bg2aef@bg2aea bg2aef@bg2aea) (set! bg2c02@bg2aed@bg2ae8 bg2aed@bg2ae8) (set! bg2c01@bg2ae5@&i/o-decoding-rcd bg2ae5@&i/o-decoding-rcd) (set! bg2c00@bg2ae3@&i/o-decoding-rtd bg2ae3@&i/o-decoding-rtd) (set! bg2bff@bg2ae1@i/o-decoding-error? bg2ae1@i/o-decoding-error?) (set! bg2bfe@bg2adf@make-i/o-decoding-error bg2adf@make-i/o-decoding-error) (set! bg2bfd@bg2add@p? bg2add@p?) (set! bg2bfc@bg2ada@bg2ad2 bg2ada@bg2ad2) (set! bg2bfb@bg2ad8@bg2ad3 bg2ad8@bg2ad3) (set! bg2bfa@bg2ad6@bg2ad1 bg2ad6@bg2ad1) (set! bg2bf9@bg2ad0@&i/o-port-rcd bg2ad0@&i/o-port-rcd) (set! bg2bf8@bg2ace@&i/o-port-rtd bg2ace@&i/o-port-rtd) (set! bg2bf7@bg2acc@i/o-error-port bg2acc@i/o-error-port) (set! bg2bf6@bg2aca@i/o-port-error? bg2aca@i/o-port-error?) (set! bg2bf5@bg2ac8@bg2ab7 bg2ac8@bg2ab7) (set! bg2bf4@bg2ac6@make-i/o-port-error bg2ac6@make-i/o-port-error) (set! bg2bf3@bg2ac4@p? bg2ac4@p?) (set! bg2bf2@bg2ac1@bg2ab9 bg2ac1@bg2ab9) (set! bg2bf1@bg2abf@bg2aba bg2abf@bg2aba) (set! bg2bf0@bg2abd@bg2ab8 bg2abd@bg2ab8) (set! bg2bef@bg2ab5@&i/o-file-does-not-exist-rcd bg2ab5@&i/o-file-does-not-exist-rcd) (set! bg2bee@bg2ab3@&i/o-file-does-not-exist-rtd bg2ab3@&i/o-file-does-not-exist-rtd) (set! bg2bed@bg2ab1@i/o-file-does-not-exist-error? bg2ab1@i/o-file-does-not-exist-error?) (set! bg2bec@bg2aaf@make-i/o-file-does-not-exist-error bg2aaf@make-i/o-file-does-not-exist-error) (set! bg2beb@bg2aad@p? bg2aad@p?) (set! bg2bea@bg2aaa@bg2aa2 bg2aaa@bg2aa2) (set! bg2be9@bg2aa8@bg2aa3 bg2aa8@bg2aa3) (set! bg2be8@bg2aa6@bg2aa1 bg2aa6@bg2aa1) (set! bg2be7@bg2aa0@&i/o-file-already-exists-rcd bg2aa0@&i/o-file-already-exists-rcd) (set! bg2be6@bg2a9e@&i/o-file-already-exists-rtd bg2a9e@&i/o-file-already-exists-rtd) (set! bg2be5@bg2a9c@i/o-file-already-exists-error? bg2a9c@i/o-file-already-exists-error?) (set! bg2be4@bg2a9a@make-i/o-file-already-exists-error bg2a9a@make-i/o-file-already-exists-error) (set! bg2be3@bg2a98@p? bg2a98@p?) (set! bg2be2@bg2a95@bg2a8d bg2a95@bg2a8d) (set! bg2be1@bg2a93@bg2a8e bg2a93@bg2a8e) (set! bg2be0@bg2a91@bg2a8c bg2a91@bg2a8c) (set! bg2bdf@bg2a8b@&i/o-file-is-read-only-rcd bg2a8b@&i/o-file-is-read-only-rcd) (set! bg2bde@bg2a89@&i/o-file-is-read-only-rtd bg2a89@&i/o-file-is-read-only-rtd) (set! bg2bdd@bg2a87@i/o-file-is-read-only-error? bg2a87@i/o-file-is-read-only-error?) (set! bg2bdc@bg2a85@make-i/o-file-is-read-only-error bg2a85@make-i/o-file-is-read-only-error) (set! bg2bdb@bg2a83@p? bg2a83@p?) (set! bg2bda@bg2a80@bg2a78 bg2a80@bg2a78) (set! bg2bd9@bg2a7e@bg2a79 bg2a7e@bg2a79) (set! bg2bd8@bg2a7c@bg2a77 bg2a7c@bg2a77) (set! bg2bd7@bg2a76@&i/o-file-protection-rcd bg2a76@&i/o-file-protection-rcd) (set! bg2bd6@bg2a74@&i/o-file-protection-rtd bg2a74@&i/o-file-protection-rtd) (set! bg2bd5@bg2a72@i/o-file-protection-error? bg2a72@i/o-file-protection-error?) (set! bg2bd4@bg2a70@make-i/o-file-protection-error bg2a70@make-i/o-file-protection-error) (set! bg2bd3@bg2a6e@p? bg2a6e@p?) (set! bg2bd2@bg2a6b@bg2a63 bg2a6b@bg2a63) (set! bg2bd1@bg2a69@bg2a64 bg2a69@bg2a64) (set! bg2bd0@bg2a67@bg2a62 bg2a67@bg2a62) (set! bg2bcf@bg2a61@&i/o-filename-rcd bg2a61@&i/o-filename-rcd) (set! bg2bce@bg2a5f@&i/o-filename-rtd bg2a5f@&i/o-filename-rtd) (set! bg2bcd@bg2a5d@i/o-error-filename bg2a5d@i/o-error-filename) (set! bg2bcc@bg2a5b@i/o-filename-error? bg2a5b@i/o-filename-error?) (set! bg2bcb@bg2a59@bg2a48 bg2a59@bg2a48) (set! bg2bca@bg2a57@make-i/o-filename-error bg2a57@make-i/o-filename-error) (set! bg2bc9@bg2a55@p? bg2a55@p?) (set! bg2bc8@bg2a52@bg2a4a bg2a52@bg2a4a) (set! bg2bc7@bg2a50@bg2a4b bg2a50@bg2a4b) (set! bg2bc6@bg2a4e@bg2a49 bg2a4e@bg2a49) (set! bg2bc5@bg2a46@&i/o-invalid-position-rcd bg2a46@&i/o-invalid-position-rcd) (set! bg2bc4@bg2a44@&i/o-invalid-position-rtd bg2a44@&i/o-invalid-position-rtd) (set! bg2bc3@bg2a42@i/o-error-position bg2a42@i/o-error-position) (set! bg2bc2@bg2a40@i/o-invalid-position-error? bg2a40@i/o-invalid-position-error?) (set! bg2bc1@bg2a3e@bg2a2d bg2a3e@bg2a2d) (set! bg2bc0@bg2a3c@make-i/o-invalid-position-error bg2a3c@make-i/o-invalid-position-error) (set! bg2bbf@bg2a3a@p? bg2a3a@p?) (set! bg2bbe@bg2a37@bg2a2f bg2a37@bg2a2f) (set! bg2bbd@bg2a35@bg2a30 bg2a35@bg2a30) (set! bg2bbc@bg2a33@bg2a2e bg2a33@bg2a2e) (set! bg2bbb@bg2a2b@&i/o-write-rcd bg2a2b@&i/o-write-rcd) (set! bg2bba@bg2a29@&i/o-write-rtd bg2a29@&i/o-write-rtd) (set! bg2bb9@bg2a27@i/o-write-error? bg2a27@i/o-write-error?) (set! bg2bb8@bg2a25@make-i/o-write-error bg2a25@make-i/o-write-error) (set! bg2bb7@bg2a23@p? bg2a23@p?) (set! bg2bb6@bg2a20@bg2a18 bg2a20@bg2a18) (set! bg2bb5@bg2a1e@bg2a19 bg2a1e@bg2a19) (set! bg2bb4@bg2a1c@bg2a17 bg2a1c@bg2a17) (set! bg2bb3@bg2a16@&i/o-read-rcd bg2a16@&i/o-read-rcd) (set! bg2bb2@bg2a14@&i/o-read-rtd bg2a14@&i/o-read-rtd) (set! bg2bb1@bg2a12@i/o-read-error? bg2a12@i/o-read-error?) (set! bg2bb0@bg2a10@make-i/o-read-error bg2a10@make-i/o-read-error) (set! bg2baf@bg2a0e@p? bg2a0e@p?) (set! bg2bae@bg2a0b@bg2a03 bg2a0b@bg2a03) (set! bg2bad@bg2a09@bg2a04 bg2a09@bg2a04) (set! bg2bac@bg2a07@bg2a02 bg2a07@bg2a02) (set! bg2bab@bg2a01@&i/o-rcd bg2a01@&i/o-rcd) (set! bg2baa@bg29ff@&i/o-rtd bg29ff@&i/o-rtd) (set! bg2ba9@bg29fd@i/o-error? bg29fd@i/o-error?) (set! bg2ba8@bg29fb@make-i/o-error bg29fb@make-i/o-error) (set! bg2ba7@bg29f9@p? bg29f9@p?) (set! bg2ba6@bg29f6@bg29ee bg29f6@bg29ee) (set! bg2ba5@bg29f4@bg29ef bg29f4@bg29ef) (set! bg2ba4@bg29f2@bg29ed bg29f2@bg29ed) (set! bg2ba3@bg29ec@&undefined-rcd bg29ec@&undefined-rcd) (set! bg2ba2@bg29ea@&undefined-rtd bg29ea@&undefined-rtd) (set! bg2ba1@bg29e8@undefined-violation? bg29e8@undefined-violation?) (set! bg2ba0@bg29e6@make-undefined-violation bg29e6@make-undefined-violation) (set! bg2b9f@bg29e4@p? bg29e4@p?) (set! bg2b9e@bg29e1@bg29d9 bg29e1@bg29d9) (set! bg2b9d@bg29df@bg29da bg29df@bg29da) (set! bg2b9c@bg29dd@bg29d8 bg29dd@bg29d8) (set! bg2b9b@bg29d7@&syntax-rcd bg29d7@&syntax-rcd) (set! bg2b9a@bg29d5@&syntax-rtd bg29d5@&syntax-rtd) (set! bg2b99@bg29d3@syntax-violation-subform bg29d3@syntax-violation-subform) (set! bg2b98@bg29d1@syntax-violation-form bg29d1@syntax-violation-form) (set! bg2b97@bg29cf@syntax-violation? bg29cf@syntax-violation?) (set! bg2b96@bg29cd@bg29ba bg29cd@bg29ba) (set! bg2b95@bg29cb@bg29b8 bg29cb@bg29b8) (set! bg2b94@bg29c9@make-syntax-violation bg29c9@make-syntax-violation) (set! bg2b93@bg29c7@p? bg29c7@p?) (set! bg2b92@bg29c4@bg29bc bg29c4@bg29bc) (set! bg2b91@bg29c2@bg29bd bg29c2@bg29bd) (set! bg2b90@bg29c0@bg29bb bg29c0@bg29bb) (set! bg2b8f@bg29b6@&lexical-rcd bg29b6@&lexical-rcd) (set! bg2b8e@bg29b4@&lexical-rtd bg29b4@&lexical-rtd) (set! bg2b8d@bg29b2@lexical-violation? bg29b2@lexical-violation?) (set! bg2b8c@bg29b0@make-lexical-violation bg29b0@make-lexical-violation) (set! bg2b8b@bg29ae@p? bg29ae@p?) (set! bg2b8a@bg29ab@bg29a3 bg29ab@bg29a3) (set! bg2b89@bg29a9@bg29a4 bg29a9@bg29a4) (set! bg2b88@bg29a7@bg29a2 bg29a7@bg29a2) (set! bg2b87@bg29a1@&implementation-restriction-rcd bg29a1@&implementation-restriction-rcd) (set! bg2b86@bg299f@&implementation-restriction-rtd bg299f@&implementation-restriction-rtd) (set! bg2b85@bg299d@implementation-restriction-violation? bg299d@implementation-restriction-violation?) (set! bg2b84@bg299b@make-implementation-restriction-violation bg299b@make-implementation-restriction-violation) (set! bg2b83@bg2999@p? bg2999@p?) (set! bg2b82@bg2996@bg298e bg2996@bg298e) (set! bg2b81@bg2994@bg298f bg2994@bg298f) (set! bg2b80@bg2992@bg298d bg2992@bg298d) (set! bg2b7f@bg298c@&non-continuable-rcd bg298c@&non-continuable-rcd) (set! bg2b7e@bg298a@&non-continuable-rtd bg298a@&non-continuable-rtd) (set! bg2b7d@bg2988@non-continuable-violation? bg2988@non-continuable-violation?) (set! bg2b7c@bg2986@make-non-continuable-violation bg2986@make-non-continuable-violation) (set! bg2b7b@bg2984@p? bg2984@p?) (set! bg2b7a@bg2981@bg2979 bg2981@bg2979) (set! bg2b79@bg297f@bg297a bg297f@bg297a) (set! bg2b78@bg297d@bg2978 bg297d@bg2978) (set! bg2b77@bg2977@&who-rcd bg2977@&who-rcd) (set! bg2b76@bg2975@&who-rtd bg2975@&who-rtd) (set! bg2b75@bg2973@condition-who bg2973@condition-who) (set! bg2b74@bg2971@who-condition? bg2971@who-condition?) (set! bg2b73@bg296f@bg295e bg296f@bg295e) (set! bg2b72@bg296d@make-who-condition bg296d@make-who-condition) (set! bg2b71@bg296b@p? bg296b@p?) (set! bg2b70@bg2968@bg2960 bg2968@bg2960) (set! bg2b6f@bg2966@bg2961 bg2966@bg2961) (set! bg2b6e@bg2964@bg295f bg2964@bg295f) (set! bg2b6d@bg295c@&irritants-rcd bg295c@&irritants-rcd) (set! bg2b6c@bg295a@&irritants-rtd bg295a@&irritants-rtd) (set! bg2b6b@bg2958@condition-irritants bg2958@condition-irritants) (set! bg2b6a@bg2956@irritants-condition? bg2956@irritants-condition?) (set! bg2b69@bg2954@bg2943 bg2954@bg2943) (set! bg2b68@bg2952@make-irritants-condition bg2952@make-irritants-condition) (set! bg2b67@bg2950@p? bg2950@p?) (set! bg2b66@bg294d@bg2945 bg294d@bg2945) (set! bg2b65@bg294b@bg2946 bg294b@bg2946) (set! bg2b64@bg2949@bg2944 bg2949@bg2944) (set! bg2b63@bg2941@&assertion-rcd bg2941@&assertion-rcd) (set! bg2b62@bg293f@&assertion-rtd bg293f@&assertion-rtd) (set! bg2b61@bg293d@assertion-violation? bg293d@assertion-violation?) (set! bg2b60@bg293b@make-assertion-violation bg293b@make-assertion-violation) (set! bg2b5f@bg2939@p? bg2939@p?) (set! bg2b5e@bg2936@bg292e bg2936@bg292e) (set! bg2b5d@bg2934@bg292f bg2934@bg292f) (set! bg2b5c@bg2932@bg292d bg2932@bg292d) (set! bg2b5b@bg292c@&violation-rcd bg292c@&violation-rcd) (set! bg2b5a@bg292a@&violation-rtd bg292a@&violation-rtd) (set! bg2b59@bg2928@violation? bg2928@violation?) (set! bg2b58@bg2926@make-violation bg2926@make-violation) (set! bg2b57@bg2924@p? bg2924@p?) (set! bg2b56@bg2921@bg2919 bg2921@bg2919) (set! bg2b55@bg291f@bg291a bg291f@bg291a) (set! bg2b54@bg291d@bg2918 bg291d@bg2918) (set! bg2b53@bg2917@&error-rcd bg2917@&error-rcd) (set! bg2b52@bg2915@&error-rtd bg2915@&error-rtd) (set! bg2b51@bg2913@error? bg2913@error?) (set! bg2b50@bg2911@make-error bg2911@make-error) (set! bg2b4f@bg290f@p? bg290f@p?) (set! bg2b4e@bg290c@bg2904 bg290c@bg2904) (set! bg2b4d@bg290a@bg2905 bg290a@bg2905) (set! bg2b4c@bg2908@bg2903 bg2908@bg2903) (set! bg2b4b@bg2902@&serious-rcd bg2902@&serious-rcd) (set! bg2b4a@bg2900@&serious-rtd bg2900@&serious-rtd) (set! bg2b49@bg28fe@serious-condition? bg28fe@serious-condition?) (set! bg2b48@bg28fc@make-serious-condition bg28fc@make-serious-condition) (set! bg2b47@bg28fa@p? bg28fa@p?) (set! bg2b46@bg28f7@bg28ef bg28f7@bg28ef) (set! bg2b45@bg28f5@bg28f0 bg28f5@bg28f0) (set! bg2b44@bg28f3@bg28ee bg28f3@bg28ee) (set! bg2b43@bg28ed@&warning-rcd bg28ed@&warning-rcd) (set! bg2b42@bg28eb@&warning-rtd bg28eb@&warning-rtd) (set! bg2b41@bg28e9@warning? bg28e9@warning?) (set! bg2b40@bg28e7@make-warning bg28e7@make-warning) (set! bg2b3f@bg28e5@p? bg28e5@p?) (set! bg2b3e@bg28e2@bg28da bg28e2@bg28da) (set! bg2b3d@bg28e0@bg28db bg28e0@bg28db) (set! bg2b3c@bg28de@bg28d9 bg28de@bg28d9) (set! bg2b3b@bg28d8@&message-rcd bg28d8@&message-rcd) (set! bg2b3a@bg28d6@&message-rtd bg28d6@&message-rtd) (set! bg2b39@bg28d4@condition-message bg28d4@condition-message) (set! bg2b38@bg28d2@message-condition? bg28d2@message-condition?) (set! bg2b37@bg28d0@bg28bf bg28d0@bg28bf) (set! bg2b36@bg28ce@make-message-condition bg28ce@make-message-condition) (set! bg2b35@bg28cc@p? bg28cc@p?) (set! bg2b34@bg28c9@bg28c1 bg28c9@bg28c1) (set! bg2b33@bg28c7@bg28c2 bg28c7@bg28c2) (set! bg2b32@bg28c5@bg28c0 bg28c5@bg28c0) (set! bg2b31@bg2879@&condition-rcd bg2879@&condition-rcd) (set! bg2b30@bg2877@&condition-rtd bg2877@&condition-rtd) (set! bg2b2f@bg2875@make-&condition bg2875@make-&condition) (set! bg2b2e@bg2873@&condition? bg2873@&condition?) (set! bg2b2d@bg2870@bg2868 bg2870@bg2868) (set! bg2b2c@bg286e@bg2869 bg286e@bg2869) (set! bg2b2b@bg286c@bg2867 bg286c@bg2867)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (bg70e@bg6c3@current-primitive-locations (lambda (bg30f7@x) ((lambda (bg30f9@t) (if bg30f9@t (cdr bg30f9@t) '#f)) (assq bg30f7@x '((&no-nans-rcd . bg2c1b@bg2b2a@&no-nans-rcd) (&no-nans-rtd . bg2c1a@bg2b28@&no-nans-rtd) (&no-infinities-rcd . bg2c13@bg2b15@&no-infinities-rcd) (&no-infinities-rtd . bg2c12@bg2b13@&no-infinities-rtd) (&i/o-encoding-rcd . bg2c0b@bg2b00@&i/o-encoding-rcd) (&i/o-encoding-rtd . bg2c0a@bg2afe@&i/o-encoding-rtd) (&i/o-decoding-rcd . bg2c01@bg2ae5@&i/o-decoding-rcd) (&i/o-decoding-rtd . bg2c00@bg2ae3@&i/o-decoding-rtd) (&i/o-port-rcd . bg2bf9@bg2ad0@&i/o-port-rcd) (&i/o-port-rtd . bg2bf8@bg2ace@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . bg2bef@bg2ab5@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . bg2bee@bg2ab3@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . bg2be7@bg2aa0@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . bg2be6@bg2a9e@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . bg2bdf@bg2a8b@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . bg2bde@bg2a89@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . bg2bd7@bg2a76@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . bg2bd6@bg2a74@&i/o-file-protection-rtd) (&i/o-filename-rcd . bg2bcf@bg2a61@&i/o-filename-rcd) (&i/o-filename-rtd . bg2bce@bg2a5f@&i/o-filename-rtd) (&i/o-invalid-position-rcd . bg2bc5@bg2a46@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . bg2bc4@bg2a44@&i/o-invalid-position-rtd) (&i/o-write-rcd . bg2bbb@bg2a2b@&i/o-write-rcd) (&i/o-write-rtd . bg2bba@bg2a29@&i/o-write-rtd) (&i/o-read-rcd . bg2bb3@bg2a16@&i/o-read-rcd) (&i/o-read-rtd . bg2bb2@bg2a14@&i/o-read-rtd) (&i/o-rcd . bg2bab@bg2a01@&i/o-rcd) (&i/o-rtd . bg2baa@bg29ff@&i/o-rtd) (&undefined-rcd . bg2ba3@bg29ec@&undefined-rcd) (&undefined-rtd . bg2ba2@bg29ea@&undefined-rtd) (&syntax-rcd . bg2b9b@bg29d7@&syntax-rcd) (&syntax-rtd . bg2b9a@bg29d5@&syntax-rtd) (&lexical-rcd . bg2b8f@bg29b6@&lexical-rcd) (&lexical-rtd . bg2b8e@bg29b4@&lexical-rtd) (&implementation-restriction-rcd . bg2b87@bg29a1@&implementation-restriction-rcd) (&implementation-restriction-rtd . bg2b86@bg299f@&implementation-restriction-rtd) (&non-continuable-rcd . bg2b7f@bg298c@&non-continuable-rcd) (&non-continuable-rtd . bg2b7e@bg298a@&non-continuable-rtd) (&who-rcd . bg2b77@bg2977@&who-rcd) (&who-rtd . bg2b76@bg2975@&who-rtd) (&irritants-rcd . bg2b6d@bg295c@&irritants-rcd) (&irritants-rtd . bg2b6c@bg295a@&irritants-rtd) (&assertion-rcd . bg2b63@bg2941@&assertion-rcd) (&assertion-rtd . bg2b62@bg293f@&assertion-rtd) (&violation-rcd . bg2b5b@bg292c@&violation-rcd) (&violation-rtd . bg2b5a@bg292a@&violation-rtd) (&error-rcd . bg2b53@bg2917@&error-rcd) (&error-rtd . bg2b52@bg2915@&error-rtd) (&serious-rcd . bg2b4b@bg2902@&serious-rcd) (&serious-rtd . bg2b4a@bg2900@&serious-rtd) (&warning-rcd . bg2b43@bg28ed@&warning-rcd) (&warning-rtd . bg2b42@bg28eb@&warning-rtd) (&message-rcd . bg2b3b@bg28d8@&message-rcd) (&message-rtd . bg2b3a@bg28d6@&message-rtd) (&condition-rcd . bg2b31@bg2879@&condition-rcd) (&condition-rtd . bg2b30@bg2877@&condition-rtd) (syntax-error . bg2854@bge3d@syntax-error) (syntax-dispatch . bg27f2@bgd61@syntax-dispatch) (load . bg2da2@bg2c37@load) (interaction-environment . bg285c@bge4d@interaction-environment) (library-path . bg975@bg7b1@library-path) (mosh-cache-dir . bg6bc@bg59c@mosh-cache-dir) (make-parameter . bg6bb@bg59a@make-parameter) (make-variable-transformer . bg27b0@bgb8e@make-variable-transformer) (identifier? . bg2857@bge43@identifier?) (generate-temporaries . bg284d@bge2f@generate-temporaries) (free-identifier=? . bg284e@bge31@free-identifier=?) (syntax->datum . bg2859@bge47@syntax->datum) (datum->syntax . bg2858@bge45@datum->syntax) (bound-identifier=? . bg284f@bge33@bound-identifier=?) (make-i/o-write-error . bg2bb8@bg2a25@make-i/o-write-error) (make-i/o-read-error . bg2bb0@bg2a10@make-i/o-read-error) (make-i/o-port-error . bg2bf4@bg2ac6@make-i/o-port-error) (make-i/o-invalid-position-error . bg2bc0@bg2a3c@make-i/o-invalid-position-error) (make-i/o-filename-error . bg2bca@bg2a57@make-i/o-filename-error) (make-i/o-file-protection-error . bg2bd4@bg2a70@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . bg2bdc@bg2a85@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . bg2bec@bg2aaf@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . bg2be4@bg2a9a@make-i/o-file-already-exists-error) (make-i/o-error . bg2ba8@bg29fb@make-i/o-error) (make-i/o-encoding-error . bg2c06@bg2af6@make-i/o-encoding-error) (make-i/o-decoding-error . bg2bfe@bg2adf@make-i/o-decoding-error) (i/o-write-error? . bg2bb9@bg2a27@i/o-write-error?) (i/o-read-error? . bg2bb1@bg2a12@i/o-read-error?) (i/o-port-error? . bg2bf6@bg2aca@i/o-port-error?) (i/o-invalid-position-error? . bg2bc2@bg2a40@i/o-invalid-position-error?) (i/o-filename-error? . bg2bcc@bg2a5b@i/o-filename-error?) (i/o-file-protection-error? . bg2bd5@bg2a72@i/o-file-protection-error?) (i/o-file-is-read-only-error? . bg2bdd@bg2a87@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . bg2bed@bg2ab1@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . bg2be5@bg2a9c@i/o-file-already-exists-error?) (i/o-error? . bg2ba9@bg29fd@i/o-error?) (i/o-error-position . bg2bc3@bg2a42@i/o-error-position) (i/o-error-port . bg2bf7@bg2acc@i/o-error-port) (i/o-error-filename . bg2bcd@bg2a5d@i/o-error-filename) (i/o-encoding-error? . bg2c08@bg2afa@i/o-encoding-error?) (i/o-encoding-error-char . bg2c09@bg2afc@i/o-encoding-error-char) (i/o-decoding-error? . bg2bff@bg2ae1@i/o-decoding-error?) (scheme-report-environment . bg2844@bge1d@scheme-report-environment) (null-environment . bg2843@bge1b@null-environment) (command-line . bg2d9f@bg2c31@command-line) (eval . bg2846@bge21@eval) (environment . bg2842@bge19@environment) (who-condition? . bg2b74@bg2971@who-condition?) (warning? . bg2b41@bg28e9@warning?) (violation? . bg2b59@bg2928@violation?) (undefined-violation? . bg2ba1@bg29e8@undefined-violation?) (syntax-violation? . bg2b97@bg29cf@syntax-violation?) (syntax-violation-subform . bg2b99@bg29d3@syntax-violation-subform) (syntax-violation-form . bg2b98@bg29d1@syntax-violation-form) (syntax-violation . bg2856@bge41@syntax-violation) (serious-condition? . bg2b49@bg28fe@serious-condition?) (non-continuable-violation? . bg2b7d@bg2988@non-continuable-violation?) (message-condition? . bg2b38@bg28d2@message-condition?) (make-who-condition . bg2b72@bg296d@make-who-condition) (make-warning . bg2b40@bg28e7@make-warning) (make-violation . bg2b58@bg2926@make-violation) (make-undefined-violation . bg2ba0@bg29e6@make-undefined-violation) (make-syntax-violation . bg2b94@bg29c9@make-syntax-violation) (make-serious-condition . bg2b48@bg28fc@make-serious-condition) (make-non-continuable-violation . bg2b7c@bg2986@make-non-continuable-violation) (make-message-condition . bg2b36@bg28ce@make-message-condition) (make-lexical-violation . bg2b8c@bg29b0@make-lexical-violation) (make-irritants-condition . bg2b68@bg2952@make-irritants-condition) (make-implementation-restriction-violation . bg2b84@bg299b@make-implementation-restriction-violation) (make-error . bg2b50@bg2911@make-error) (make-assertion-violation . bg2b60@bg293b@make-assertion-violation) (lexical-violation? . bg2b8d@bg29b2@lexical-violation?) (irritants-condition? . bg2b6a@bg2956@irritants-condition?) (implementation-restriction-violation? . bg2b85@bg299d@implementation-restriction-violation?) (error? . bg2b51@bg2913@error?) (condition-who . bg2b75@bg2973@condition-who) (condition-message . bg2b39@bg28d4@condition-message) (condition-irritants . bg2b6b@bg2958@condition-irritants) (assertion-violation? . bg2b61@bg293d@assertion-violation?) (no-nans-violation? . bg2c19@bg2b26@no-nans-violation?) (no-infinities-violation? . bg2c11@bg2b11@no-infinities-violation?) (make-no-nans-violation . bg2c18@bg2b24@make-no-nans-violation) (make-no-infinities-violation . bg2c10@bg2b0f@make-no-infinities-violation) (assertion-error . bg2853@bge3b@assertion-error)))))) (bg985@bg7d1@install-library 'bg30d4 '(mosh interaction) '() '() '() '() '((regexp? . bg30cc) (alist->eq-hash-table . bg30c8) (format . bg30c5) (string-split . bg30ba) (call-process . bg30b4) (set-current-directory! . bg30b0) (expand-path . bg30af) (current-directory . bg30ae) (%spawn . bg30ad) (%waitpid . bg30ac) (simple-struct-name . bg30ab) (simple-struct-set! . bg30aa) (simple-struct-ref . bg30a9) (make-simple-struct . bg30a8) (simple-struct? . bg30a7) (pointer-ref-c-int64 . bg30a6) (pointer-ref-c-int32 . bg30a5) (pointer-ref-c-int16 . bg30a4) (pointer-ref-c-int8 . bg30a3) (pointer-ref-c-uint64 . bg30a2) (pointer-ref-c-uint32 . bg30a1) (pointer-ref-c-uint16 . bg30a0) (pointer-ref-c-uint8 . bg309f) (pointer-set-c-uint64! . bg309e) (pointer-set-c-uint32! . bg309d) (pointer-set-c-uint16! . bg309c) (pointer-set-c-uint8! . bg309b) (pointer-set-c-int64! . bg309a) (pointer-set-c-int32! . bg3099) (pointer-set-c-int16! . bg3098) (pointer-set-c-int8! . bg3097) (pointer-set-c-pointer! . bg3096) (pointer-set-c-double! . bg3095) (pointer-set-c-float! . bg3094) (pointer-set-c-long-long! . bg3093) (pointer-set-c-long! . bg3092) (pointer-set-c-int! . bg3091) (pointer-set-c-short! . bg3090) (pointer-set-c-char! . bg308f) (pointer-ref-c-pointer . bg308e) (pointer-ref-c-double . bg308d) (pointer-ref-c-float . bg308c) (pointer-ref-c-unsigned-long-long . bg308b) (pointer-ref-c-signed-long-long . bg308a) (pointer-ref-c-unsigned-long . bg3089) (pointer-ref-c-signed-long . bg3088) (pointer-ref-c-unsigned-int . bg3087) (pointer-ref-c-signed-int . bg3086) (pointer-ref-c-unsigned-short . bg3085) (pointer-ref-c-signed-short . bg3084) (pointer-ref-c-unsigned-char . bg3083) (pointer-ref-c-signed-char . bg3082) (pointer->integer . bg3081) (integer->pointer . bg3080) (pointer? . bg307f) (shared-errno . bg307e) (%ffi-supported? . bg307b) (%ffi-pointer->string . bg307a) (%ffi-call->string-or-zero . bg3079) (%ffi-call->double . bg3078) (%ffi-call->void* . bg3077) (%ffi-call->void . bg3076) (%ffi-call->char . bg3075) (%ffi-call->int . bg3074) (%ffi-lookup . bg3073) (%ffi-open . bg3072) (%fork . bg3071) (%pipe . bg3070) (p . bg306f) (whereis . bg3054) (register . bg3053) (vm-join! . bg3052) (vm-set-value! . bg3051) (vm? . bg3050) (main-vm? . bg304f) (vm-eval . bg304e) (vm-self . bg304d) (vm-start! . bg304c) (make-vm . bg304b) (mutex-try-lock! . bg304a) (mutex-unlock! . bg3049) (mutex-lock! . bg3048) (mutex? . bg3047) (make-mutex . bg3046) (condition-variable-notify-all! . bg3045) (condition-variable-notify! . bg3044) (condition-variable-wait! . bg3043) (make-condition-variable . bg3042) (string-upcase . bg302b) (string-titlecase . bg302a) (string-normalize-nfkd . bg3029) (string-normalize-nfkc . bg3028) (string-normalize-nfd . bg3027) (string-normalize-nfc . bg3026) (string-foldcase . bg3025) (string-downcase . bg3024) (string-ci>? . bg3023) (string-ci>=? . bg3022) (string-ci=? . bg3021) (string-ci<? . bg3020) (string-ci<=? . bg301f) (char-whitespace? . bg301e) (char-upper-case? . bg301d) (char-title-case? . bg301c) (char-numeric? . bg301b) (char-lower-case? . bg301a) (char-general-category . bg3019) (char-upcase . bg3018) (char-titlecase . bg3017) (char-foldcase . bg3016) (char-downcase . bg3015) (char-ci>? . bg3014) (char-ci>=? . bg3013) (char-ci=? . bg3012) (char-ci<? . bg3011) (char-ci<=? . bg3010) (char-alphabetic? . bg300f) (make-variable-transformer . bgb8d) (identifier? . bge42) (generate-temporaries . bge2e) (free-identifier=? . bge30) (syntax->datum . bge46) (datum->syntax . bge44) (bound-identifier=? . bge32) (record-type-descriptor? . bg300e) (record-predicate . bg300d) (record-mutator . bg300c) (record-constructor . bg300b) (record-accessor . bg300a) (make-record-type-descriptor . bg3009) (make-record-constructor-descriptor . bg3008) (record? . bg3007) (record-type-uid . bg3006) (record-type-sealed? . bg3005) (record-type-parent . bg3004) (record-type-opaque? . bg3003) (record-type-name . bg3002) (record-type-generative? . bg3001) (record-type-field-names . bg3000) (record-rtd . bg2fff) (record-field-mutable? . bg2ffe) (delete-file . bg2ffd) (file-exists? . bg2ffc) (vector-sort! . bg2ffb) (vector-sort . bg2ffa) (list-sort . bg2ff9) (symbol-hash . bg2ff8) (string-ci-hash . bg2ff7) (string-hash . bg2ff6) (equal-hash . bg2ff5) (hashtable-equivalence-function . bg2ff4) (make-hashtable . bg2ff3) (hashtable-hash-function . bg2ff2) (make-eqv-hashtable . bg2ff1) (make-eq-hashtable . bg2ff0) (hashtable? . bg2fef) (hashtable-update! . bg2fee) (hashtable-size . bg2fed) (hashtable-set! . bg2fec) (hashtable-ref . bg2feb) (hashtable-mutable? . bg2fea) (hashtable-keys . bg2fe9) (hashtable-entries . bg2fe8) (hashtable-delete! . bg2fe7) (hashtable-copy . bg2fe6) (hashtable-contains? . bg2fe5) (hashtable-clear! . bg2fe4) (call-with-output-file . bg2fe3) (call-with-input-file . bg2fe2) (write-char . bg2fe1) (write . bg2fe0) (with-output-to-file . bg2fdf) (with-input-from-file . bg2fde) (read-char . bg2fdd) (read . bg2fdc) (peek-char . bg2fdb) (open-output-file . bg2fda) (open-input-file . bg2fd9) (newline . bg2fd8) (display . bg2fd7) (close-output-port . bg2fd6) (close-input-port . bg2fd5) (eof-object? . bg2fd4) (eof-object . bg2fd3) (current-error-port . bg2fd2) (current-output-port . bg2fd1) (current-input-port . bg2fd0) (output-port? . bg2fcf) (input-port? . bg2fce) (utf-8-codec . bg2fcd) (utf-16-codec . bg2fcc) (transcoder-error-handling-mode . bg2fcb) (transcoder-eol-style . bg2fca) (transcoder-codec . bg2fc9) (transcoded-port . bg2fc8) (textual-port? . bg2fc7) (string->bytevector . bg2fc6) (standard-output-port . bg2fc5) (standard-input-port . bg2fc4) (standard-error-port . bg2fc3) (set-port-position! . bg2fc2) (put-u8 . bg2fc1) (put-string . bg2fc0) (put-datum . bg2fbf) (put-char . bg2fbe) (put-bytevector . bg2fbd) (port? . bg2fbc) (port-transcoder . bg2fbb) (port-position . bg2fba) (port-has-set-port-position!? . bg2fb9) (port-has-port-position? . bg2fb8) (port-eof? . bg2fb7) (output-port-buffer-mode . bg2fb6) (open-string-output-port . bg2fb5) (open-string-input-port . bg2fb4) (open-file-output-port . bg2fb3) (open-file-input/output-port . bg2fb2) (open-file-input-port . bg2fb1) (open-bytevector-output-port . bg2fb0) (open-bytevector-input-port . bg2faf) (native-transcoder . bg2fae) (native-eol-style . bg2fad) (make-transcoder . bg2fac) (latin-1-codec . bg2fab) (make-i/o-write-error . bg2a24) (make-i/o-read-error . bg2a0f) (make-i/o-port-error . bg2ac5) (make-i/o-invalid-position-error . bg2a3b) (make-i/o-filename-error . bg2a56) (make-i/o-file-protection-error . bg2a6f) (make-i/o-file-is-read-only-error . bg2a84) (make-i/o-file-does-not-exist-error . bg2aae) (make-i/o-file-already-exists-error . bg2a99) (make-i/o-error . bg29fa) (make-i/o-encoding-error . bg2af5) (make-i/o-decoding-error . bg2ade) (make-custom-textual-output-port . bg2faa) (make-custom-textual-input/output-port . bg2fa9) (make-custom-textual-input-port . bg2fa8) (make-custom-binary-output-port . bg2fa7) (make-custom-binary-input/output-port . bg2fa6) (make-custom-binary-input-port . bg2fa5) (make-bytevector . bg2fa4) (lookahead-u8 . bg2fa3) (lookahead-char . bg2fa2) (i/o-write-error? . bg2a26) (i/o-read-error? . bg2a11) (i/o-port-error? . bg2ac9) (i/o-invalid-position-error? . bg2a3f) (i/o-filename-error? . bg2a5a) (i/o-file-protection-error? . bg2a71) (i/o-file-is-read-only-error? . bg2a86) (i/o-file-does-not-exist-error? . bg2ab0) (i/o-file-already-exists-error? . bg2a9b) (i/o-error? . bg29fc) (i/o-error-position . bg2a41) (i/o-error-port . bg2acb) (i/o-error-filename . bg2a5c) (i/o-encoding-error? . bg2af9) (i/o-encoding-error-char . bg2afb) (i/o-decoding-error? . bg2ae0) (get-u8 . bg2fa1) (get-string-n! . bg2fa0) (get-string-n . bg2f9f) (get-string-all . bg2f9e) (get-line . bg2f9d) (get-datum . bg2f9c) (get-char . bg2f9b) (get-bytevector-some . bg2f9a) (get-bytevector-n! . bg2f99) (get-bytevector-n . bg2f98) (get-bytevector-all . bg2f97) (flush-output-port . bg2f96) (close-port . bg2f95) (exit . bg2f8d) (command-line . bg2c30) (string-fill! . bg2f8c) (string-set! . bg2f8b) (set-cdr! . bg2f8a) (set-car! . bg2f89) (remove . bg2f88) (remv . bg2f87) (remp . bg2f86) (remq . bg2f85) (partition . bg2f84) (memv . bg2f83) (memq . bg2f82) (memp . bg2f81) (member . bg2f80) (exists . bg2f7f) (for-all . bg2f7e) (fold-right . bg2f7d) (fold-left . bg2f7c) (find . bg2f7b) (filter . bg2f7a) (cons* . bg2f79) (assv . bg2f78) (assq . bg2f77) (assp . bg2f76) (assoc . bg2f75) (call-with-string-output-port . bg2f74) (call-with-port . bg2f73) (call-with-bytevector-output-port . bg2f72) (bytevector->string . bg2f71) (buffer-mode? . bg2f70) (binary-port? . bg2f6f) (with-exception-handler . bg2f6e) (raise-continuable . bg2f6d) (raise . bg2f6c) (eval . bge20) (environment . bge18) (make-enumeration . bg2f6b) (enum-set=? . bg2f6a) (enum-set-universe . bg2f69) (enum-set-union . bg2f68) (enum-set-subset? . bg2f67) (enum-set-projection . bg2f66) (enum-set-member? . bg2f65) (enum-set-intersection . bg2f64) (enum-set-indexer . bg2f63) (enum-set-difference . bg2f62) (enum-set-constructor . bg2f61) (enum-set-complement . bg2f60) (enum-set->list . bg2f5f) (who-condition? . bg2970) (warning? . bg28e8) (violation? . bg2927) (undefined-violation? . bg29e7) (syntax-violation? . bg29ce) (syntax-violation-subform . bg29d2) (syntax-violation-form . bg29d0) (syntax-violation . bge40) (simple-conditions . bg2f5e) (serious-condition? . bg28fd) (non-continuable-violation? . bg2987) (message-condition? . bg28d1) (make-who-condition . bg296c) (make-warning . bg28e6) (make-violation . bg2925) (make-undefined-violation . bg29e5) (make-syntax-violation . bg29c8) (make-serious-condition . bg28fb) (make-non-continuable-violation . bg2985) (make-message-condition . bg28cd) (make-lexical-violation . bg29af) (make-irritants-condition . bg2951) (make-implementation-restriction-violation . bg299a) (make-error . bg2910) (make-assertion-violation . bg293a) (lexical-violation? . bg29b1) (irritants-condition? . bg2955) (implementation-restriction-violation? . bg299c) (error? . bg2912) (condition-who . bg2972) (condition-predicate . bg2f5d) (condition-message . bg28d3) (condition-irritants . bg2957) (condition-accessor . bg2f5c) (condition . bg2f5b) (assertion-violation? . bg293c) (condition? . bg2f5a) (utf32->string . bg2f59) (utf16->string . bg2f58) (utf8->string . bg2f57) (uint-list->bytevector . bg2f56) (u8-list->bytevector . bg2f55) (string->utf8 . bg2f54) (string->utf32 . bg2f53) (string->utf16 . bg2f52) (sint-list->bytevector . bg2f51) (native-endianness . bg2f50) (bytevector? . bg2f4f) (bytevector=? . bg2f4e) (bytevector-uint-set! . bg2f4d) (bytevector-uint-ref . bg2f4c) (bytevector-u8-set! . bg2f4b) (bytevector-u8-ref . bg2f4a) (bytevector-u64-set! . bg2f49) (bytevector-u64-ref . bg2f48) (bytevector-u64-native-set! . bg2f47) (bytevector-u64-native-ref . bg2f46) (bytevector-u32-set! . bg2f45) (bytevector-u32-ref . bg2f44) (bytevector-u32-native-set! . bg2f43) (bytevector-u32-native-ref . bg2f42) (bytevector-u16-set! . bg2f41) (bytevector-u16-ref . bg2f40) (bytevector-u16-native-set! . bg2f3f) (bytevector-u16-native-ref . bg2f3e) (bytevector-sint-set! . bg2f3d) (bytevector-sint-ref . bg2f3c) (bytevector-s8-set! . bg2f3b) (bytevector-s8-ref . bg2f3a) (bytevector-s64-set! . bg2f39) (bytevector-s64-ref . bg2f38) (bytevector-s64-native-set! . bg2f37) (bytevector-s64-native-ref . bg2f36) (bytevector-s32-set! . bg2f35) (bytevector-s32-ref . bg2f34) (bytevector-s32-native-set! . bg2f33) (bytevector-s32-native-ref . bg2f32) (bytevector-s16-set! . bg2f31) (bytevector-s16-ref . bg2f30) (bytevector-s16-native-set! . bg2f2f) (bytevector-s16-native-ref . bg2f2e) (bytevector-length . bg2f2d) (bytevector-ieee-single-ref . bg2f2c) (bytevector-ieee-single-set! . bg2f2b) (bytevector-ieee-single-native-set! . bg2f2a) (bytevector-ieee-single-native-ref . bg2f29) (bytevector-ieee-double-set! . bg2f28) (bytevector-ieee-double-ref . bg2f27) (bytevector-ieee-double-native-set! . bg2f26) (bytevector-ieee-double-native-ref . bg2f25) (bytevector-fill! . bg2f24) (bytevector-copy! . bg2f23) (bytevector-copy . bg2f22) (bytevector->uint-list . bg2f21) (bytevector->u8-list . bg2f20) (bytevector->sint-list . bg2f1f) (no-nans-violation? . bg2b25) (no-infinities-violation? . bg2b10) (make-no-nans-violation . bg2b23) (make-no-infinities-violation . bg2b0e) (real->flonum . bg2f1e) (flzero? . bg2f1d) (fltruncate . bg2f1c) (fltan . bg2f1b) (flsqrt . bg2f1a) (flsin . bg2f19) (flround . bg2f18) (flpositive? . bg2f17) (flonum? . bg2f16) (flodd? . bg2f15) (flnumerator . bg2f14) (flnegative? . bg2f13) (flnan? . bg2f12) (flmod0 . bg2f11) (flmod . bg2f10) (flmin . bg2f0f) (flmax . bg2f0e) (fllog . bg2f0d) (flinteger? . bg2f0c) (flinfinite? . bg2f0b) (flfloor . bg2f0a) (flfinite? . bg2f09) (flexpt . bg2f08) (flexp . bg2f07) (fleven? . bg2f06) (fldiv0-and-mod0 . bg2f05) (fldiv0 . bg2f04) (fldiv-and-mod . bg2f03) (fldiv . bg2f02) (fldenominator . bg2f01) (flcos . bg2f00) (flceiling . bg2eff) (flatan . bg2efe) (flasin . bg2efd) (flacos . bg2efc) (flabs . bg2efb) (fl>? . bg2efa) (fl>=? . bg2ef9) (fl=? . bg2ef8) (fl<? . bg2ef7) (fl<=? . bg2ef6) (fl/ . bg2ef5) (fl- . bg2ef4) (fl+ . bg2ef3) (fl* . bg2ef2) (fixnum->flonum . bg2ef1) (fxzero? . bg2ef0) (fxxor . bg2eef) (fxrotate-bit-field . bg2eee) (fxreverse-bit-field . bg2eed) (fxpositive? . bg2eec) (fxodd? . bg2eeb) (fxnot . bg2eea) (fxnegative? . bg2ee9) (fxmod0 . bg2ee8) (fxmod . bg2ee7) (fxmin . bg2ee6) (fxmax . bg2ee5) (fxlength . bg2ee4) (fxior . bg2ee3) (fxif . bg2ee2) (fxfirst-bit-set . bg2ee1) (fxeven? . bg2ee0) (fxdiv0-and-mod0 . bg2edf) (fxdiv0 . bg2ede) (fxdiv-and-mod . bg2edd) (fxdiv . bg2edc) (fxcopy-bit-field . bg2edb) (fxcopy-bit . bg2eda) (fxbit-set? . bg2ed9) (fxbit-field . bg2ed8) (fxbit-count . bg2ed7) (fxarithmetic-shift-right . bg2ed6) (fxarithmetic-shift-left . bg2ed5) (fxarithmetic-shift . bg2ed4) (fxand . bg2ed3) (fx>? . bg2ed2) (fx>=? . bg2ed1) (fx=? . bg2ed0) (fx<? . bg2ecf) (fx<=? . bg2ece) (fx-/carry . bg2ecd) (fx- . bg2ecc) (fx+/carry . bg2ecb) (fx+ . bg2eca) (fx*/carry . bg2ec9) (fx* . bg2ec8) (greatest-fixnum . bg2ec7) (least-fixnum . bg2ec6) (fixnum-width . bg2ec5) (fixnum? . bg2ec4) (bitwise-rotate-bit-field . bg2ec3) (bitwise-reverse-bit-field . bg2ec2) (bitwise-length . bg2ec1) (bitwise-if . bg2ec0) (bitwise-first-bit-set . bg2ebf) (bitwise-copy-bit-field . bg2ebe) (bitwise-copy-bit . bg2ebd) (bitwise-bit-set? . bg2ebc) (bitwise-bit-field . bg2ebb) (bitwise-bit-count . bg2eba) (bitwise-xor . bg2eb9) (bitwise-ior . bg2eb8) (bitwise-and . bg2eb7) (bitwise-not . bg2eb6) (bitwise-arithmetic-shift-right . bg2eb5) (bitwise-arithmetic-shift-left . bg2eb4) (bitwise-arithmetic-shift . bg2eb3) (zero? . bg2eb2) (vector? . bg2eb1) (vector-set! . bg2eb0) (vector-ref . bg2eaf) (vector-map . bg2eae) (vector-length . bg2ead) (vector-for-each . bg2eac) (vector-fill! . bg2eab) (vector->list . bg2eaa) (vector . bg2ea9) (values . bg2ea8) (truncate . bg2ea7) (tan . bg2ea6) (symbol? . bg2ea5) (symbol=? . bg2ea4) (symbol->string . bg2ea3) (substring . bg2ea2) (string? . bg2ea1) (string>? . bg2ea0) (string>=? . bg2e9f) (string=? . bg2e9e) (string<? . bg2e9d) (string<=? . bg2e9c) (string-ref . bg2e9b) (string-length . bg2e9a) (string-for-each . bg2e99) (string-copy . bg2e98) (string-append . bg2e97) (string->symbol . bg2e96) (string->number . bg2e95) (string->list . bg2e94) (string . bg2e93) (sqrt . bg2e92) (sin . bg2e91) (round . bg2e90) (reverse . bg2e8f) (real? . bg2e8e) (real-valued? . bg2e8d) (real-part . bg2e8c) (rationalize . bg2e8b) (rational? . bg2e8a) (rational-valued? . bg2e89) (procedure? . bg2e88) (positive? . bg2e87) (pair? . bg2e86) (odd? . bg2e85) (numerator . bg2e84) (number? . bg2e83) (number->string . bg2e82) (null? . bg2e81) (not . bg2e80) (negative? . bg2e7f) (nan? . bg2e7e) (min . bg2e7d) (max . bg2e7c) (map . bg2e7b) (make-vector . bg2e7a) (make-string . bg2e79) (make-rectangular . bg2e78) (make-polar . bg2e77) (magnitude . bg2e76) (log . bg2e75) (list? . bg2e74) (list-tail . bg2e73) (list-ref . bg2e72) (list->vector . bg2e71) (list->string . bg2e70) (list . bg2e6f) (length . bg2e6e) (lcm . bg2e6d) (integer? . bg2e6c) (integer-valued? . bg2e6b) (integer->char . bg2e6a) (infinite? . bg2e69) (inexact? . bg2e68) (inexact . bg2e67) (imag-part . bg2e66) (gcd . bg2e65) (for-each . bg2e64) (floor . bg2e63) (finite? . bg2e62) (expt . bg2e61) (exp . bg2e60) (exact? . bg2e5f) (exact-integer-sqrt . bg2e5e) (exact . bg2e5d) (even? . bg2e5c) (error . bg2e5b) (eqv? . bg2e5a) (equal? . bg2e59) (eq? . bg2e58) (dynamic-wind . bg2e57) (div0-and-mod0 . bg2e56) (mod0 . bg2e55) (div0 . bg2e54) (div-and-mod . bg2e53) (mod . bg2e52) (div . bg2e51) (denominator . bg2e50) (cos . bg2e4f) (cons . bg2e4e) (complex? . bg2e4d) (char? . bg2e4c) (char>? . bg2e4b) (char>=? . bg2e4a) (char=? . bg2e49) (char<? . bg2e48) (char<=? . bg2e47) (char->integer . bg2e46) (ceiling . bg2e45) (call-with-values . bg2e44) (call/cc . bg2e43) (call-with-current-continuation . bg2e42) (cddddr . bg2e41) (cdddar . bg2e40) (cddadr . bg2e3f) (cddaar . bg2e3e) (cdaddr . bg2e3d) (cdadar . bg2e3c) (cdaadr . bg2e3b) (cdaaar . bg2e3a) (cadddr . bg2e39) (caddar . bg2e38) (cadadr . bg2e37) (cadaar . bg2e36) (caaddr . bg2e35) (caadar . bg2e34) (caaadr . bg2e33) (caaaar . bg2e32) (cdddr . bg2e31) (cddar . bg2e30) (cdadr . bg2e2f) (cdaar . bg2e2e) (caddr . bg2e2d) (cadar . bg2e2c) (caadr . bg2e2b) (caaar . bg2e2a) (cddr . bg2e29) (cdar . bg2e28) (cadr . bg2e27) (caar . bg2e26) (cdr . bg2e25) (car . bg2e24) (boolean? . bg2e23) (boolean=? . bg2e22) (atan . bg2e21) (assertion-violation . bg2e20) (asin . bg2e1f) (apply . bg2e1e) (append . bg2e1d) (angle . bg2e1c) (acos . bg2e1b) (abs . bg2e1a) (/ . bg2e19) (* . bg2e18) (- . bg2e17) (+ . bg2e16) (>= . bg2e15) (> . bg2e14) (= . bg2e13) (<= . bg2e12) (< . bg2e11) (library . bg2e10) (&no-nans . bg2e0f) (&no-infinities . bg2e0e) (&i/o-encoding . bg2e0d) (&i/o-decoding . bg2e0c) (&i/o-port . bg2e0b) (&i/o-file-does-not-exist . bg2e0a) (&i/o-file-already-exists . bg2e09) (&i/o-file-is-read-only . bg2e08) (&i/o-file-protection . bg2e07) (&i/o-filename . bg2e06) (&i/o-invalid-position . bg2e05) (&i/o-write . bg2e04) (&i/o-read . bg2e03) (&i/o . bg2e02) (&undefined . bg2e01) (&syntax . bg2e00) (&lexical . bg2dff) (&implementation-restriction . bg2dfe) (&non-continuable . bg2dfd) (&who . bg2dfc) (&irritants . bg2dfb) (&assertion . bg2dfa) (&violation . bg2df9) (&error . bg2df8) (&serious . bg2df7) (&warning . bg2df6) (&message . bg2df5) (&condition . bg2df4) (define-condition-type . bg2df3) (define-enumeration . bg2df2) (define-record-type . bg2df1) (parent-rtd . bg2df0) (nongenerative . bg2def) (opaque . bg2dee) (sealed . bg2ded) (protocol . bg2dec) (parent . bg2deb) (immutable . bg2dea) (mutable . bg2de9) (fields . bg2de8) (error-handling-mode . bg2de7) (file-options . bg2de6) (buffer-mode . bg2de5) (eol-style . bg2de4) (guard . bg2de3) (unsyntax-splicing . bg2de0) (unsyntax . bg2ddf) (unquote-splicing . bg2dde) (unquote . bg2ddd) (_ . bg2ddc) (else . bg2ddb) (=> . bg2dda) (... . bg2dd9) (assert . bg2dd8) (endianness . bg2dd7) (time . bg2dd5) (do . bg2dd4) (cond . bg2dd3) (let* . bg2dd2) (let . bg2dd1) (let*-values . bg2dd0) (let-values . bg2dcf) (identifier-syntax . bg2dce) (with-syntax . bg2dcd) (quasisyntax . bg2dcc) (quasiquote . bg2dcb) (syntax-rules . bg2dca) (include . bg2dc9) (record-constructor-descriptor . bg2dc7) (record-type-descriptor . bg2dc6) (case . bg2dc5) (unless . bg2dc3) (when . bg2dc2) (or . bg2dc1) (and . bg2dc0) (if . bg2dbf) (letrec* . bg2dbe) (letrec . bg2dbd) (case-lambda . bg2dbb) (lambda . bg2dba) (syntax . bg2db9) (syntax-case . bg2db8) (quote . bg2db7) (letrec-syntax . bg2db5) (let-syntax . bg2db4) (set! . bg2db3) (import . bg2db2) (begin . bg2db1) (define-syntax . bg2daf) (define . bg2dae)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30d5 '(psyntax null-environment-5) '() '() '() '() '((make-promise . bg2f8e) (unquote-splicing . bg2dde) (unquote . bg2ddd) (_ . bg2ddc) (else . bg2ddb) (=> . bg2dda) (... . bg2dd9) (delay . bg2dd6) (do . bg2dd4) (cond . bg2dd3) (let* . bg2dd2) (let . bg2dd1) (quasiquote . bg2dcb) (syntax-rules . bg2dca) (case . bg2dc5) (or . bg2dc1) (and . bg2dc0) (if . bg2dbf) (letrec . bg2dbd) (lambda . bg2dba) (quote . bg2db7) (letrec-syntax . bg2db5) (let-syntax . bg2db4) (set! . bg2db3) (begin . bg2db1) (define-syntax . bg2daf) (define . bg2dae)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30d6 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bg3023) (string-ci>=? . bg3022) (string-ci=? . bg3021) (string-ci<? . bg3020) (string-ci<=? . bg301f) (char-whitespace? . bg301e) (char-upper-case? . bg301d) (char-numeric? . bg301b) (char-lower-case? . bg301a) (char-upcase . bg3018) (char-downcase . bg3015) (char-ci>? . bg3014) (char-ci>=? . bg3013) (char-ci=? . bg3012) (char-ci<? . bg3011) (char-ci<=? . bg3010) (char-alphabetic? . bg300f) (call-with-output-file . bg2fe3) (call-with-input-file . bg2fe2) (write-char . bg2fe1) (write . bg2fe0) (with-output-to-file . bg2fdf) (with-input-from-file . bg2fde) (read-char . bg2fdd) (read . bg2fdc) (peek-char . bg2fdb) (open-output-file . bg2fda) (open-input-file . bg2fd9) (newline . bg2fd8) (display . bg2fd7) (close-output-port . bg2fd6) (close-input-port . bg2fd5) (eof-object . bg2fd3) (current-output-port . bg2fd1) (current-input-port . bg2fd0) (output-port? . bg2fcf) (input-port? . bg2fce) (scheme-report-environment . bge1c) (quotient . bg2f94) (null-environment . bge1a) (remainder . bg2f93) (modulo . bg2f92) (inexact->exact . bg2f91) (force . bg2f90) (exact->inexact . bg2f8f) (make-promise . bg2f8e) (string-fill! . bg2f8c) (string-set! . bg2f8b) (set-cdr! . bg2f8a) (set-car! . bg2f89) (memv . bg2f83) (memq . bg2f82) (member . bg2f80) (assv . bg2f78) (assq . bg2f77) (assoc . bg2f75) (eval . bge20) (zero? . bg2eb2) (vector? . bg2eb1) (vector-set! . bg2eb0) (vector-ref . bg2eaf) (vector-length . bg2ead) (vector-fill! . bg2eab) (vector->list . bg2eaa) (vector . bg2ea9) (values . bg2ea8) (truncate . bg2ea7) (tan . bg2ea6) (symbol? . bg2ea5) (symbol->string . bg2ea3) (substring . bg2ea2) (string? . bg2ea1) (string>? . bg2ea0) (string>=? . bg2e9f) (string=? . bg2e9e) (string<? . bg2e9d) (string<=? . bg2e9c) (string-ref . bg2e9b) (string-length . bg2e9a) (string-copy . bg2e98) (string-append . bg2e97) (string->symbol . bg2e96) (string->number . bg2e95) (string->list . bg2e94) (string . bg2e93) (sqrt . bg2e92) (sin . bg2e91) (round . bg2e90) (reverse . bg2e8f) (real? . bg2e8e) (real-part . bg2e8c) (rationalize . bg2e8b) (rational? . bg2e8a) (procedure? . bg2e88) (positive? . bg2e87) (pair? . bg2e86) (odd? . bg2e85) (numerator . bg2e84) (number? . bg2e83) (number->string . bg2e82) (not . bg2e80) (negative? . bg2e7f) (min . bg2e7d) (max . bg2e7c) (map . bg2e7b) (make-vector . bg2e7a) (make-string . bg2e79) (make-rectangular . bg2e78) (make-polar . bg2e77) (magnitude . bg2e76) (log . bg2e75) (list? . bg2e74) (list-tail . bg2e73) (list-ref . bg2e72) (list->vector . bg2e71) (list->string . bg2e70) (list . bg2e6f) (length . bg2e6e) (lcm . bg2e6d) (integer? . bg2e6c) (integer->char . bg2e6a) (inexact? . bg2e68) (imag-part . bg2e66) (gcd . bg2e65) (for-each . bg2e64) (floor . bg2e63) (expt . bg2e61) (exp . bg2e60) (exact? . bg2e5f) (even? . bg2e5c) (eqv? . bg2e5a) (equal? . bg2e59) (eq? . bg2e58) (dynamic-wind . bg2e57) (denominator . bg2e50) (cos . bg2e4f) (cons . bg2e4e) (complex? . bg2e4d) (char? . bg2e4c) (char>? . bg2e4b) (char>=? . bg2e4a) (char=? . bg2e49) (char<? . bg2e48) (char<=? . bg2e47) (char->integer . bg2e46) (ceiling . bg2e45) (call-with-values . bg2e44) (call-with-current-continuation . bg2e42) (cddddr . bg2e41) (cdddar . bg2e40) (cddadr . bg2e3f) (cddaar . bg2e3e) (cdaddr . bg2e3d) (cdadar . bg2e3c) (cdaadr . bg2e3b) (cdaaar . bg2e3a) (cadddr . bg2e39) (caddar . bg2e38) (cadadr . bg2e37) (cadaar . bg2e36) (caaddr . bg2e35) (caadar . bg2e34) (caaadr . bg2e33) (caaaar . bg2e32) (cdddr . bg2e31) (cddar . bg2e30) (cdadr . bg2e2f) (cdaar . bg2e2e) (caddr . bg2e2d) (cadar . bg2e2c) (caadr . bg2e2b) (caaar . bg2e2a) (cddr . bg2e29) (cdar . bg2e28) (cadr . bg2e27) (caar . bg2e26) (cdr . bg2e25) (car . bg2e24) (boolean? . bg2e23) (atan . bg2e21) (asin . bg2e1f) (apply . bg2e1e) (append . bg2e1d) (angle . bg2e1c) (acos . bg2e1b) (abs . bg2e1a) (/ . bg2e19) (* . bg2e18) (- . bg2e17) (+ . bg2e16) (>= . bg2e15) (> . bg2e14) (= . bg2e13) (<= . bg2e12) (< . bg2e11) (unquote-splicing . bg2dde) (unquote . bg2ddd) (else . bg2ddb) (=> . bg2dda) (... . bg2dd9) (delay . bg2dd6) (do . bg2dd4) (cond . bg2dd3) (let* . bg2dd2) (let . bg2dd1) (quasiquote . bg2dcb) (syntax-rules . bg2dca) (case . bg2dc5) (or . bg2dc1) (and . bg2dc0) (if . bg2dbf) (letrec . bg2dbd) (lambda . bg2dba) (quote . bg2db7) (letrec-syntax . bg2db5) (let-syntax . bg2db4) (set! . bg2db3) (begin . bg2db1) (define-syntax . bg2daf) (define . bg2dae)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30d7 '(psyntax modules) '() '() '() '() '((module . bg2db0)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30d8 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30d9 '(rnrs) '(6) '() '() '() '((regexp? . bg30cc) (string-upcase . bg302b) (string-titlecase . bg302a) (string-normalize-nfkd . bg3029) (string-normalize-nfkc . bg3028) (string-normalize-nfd . bg3027) (string-normalize-nfc . bg3026) (string-foldcase . bg3025) (string-downcase . bg3024) (string-ci>? . bg3023) (string-ci>=? . bg3022) (string-ci=? . bg3021) (string-ci<? . bg3020) (string-ci<=? . bg301f) (char-whitespace? . bg301e) (char-upper-case? . bg301d) (char-title-case? . bg301c) (char-numeric? . bg301b) (char-lower-case? . bg301a) (char-general-category . bg3019) (char-upcase . bg3018) (char-titlecase . bg3017) (char-foldcase . bg3016) (char-downcase . bg3015) (char-ci>? . bg3014) (char-ci>=? . bg3013) (char-ci=? . bg3012) (char-ci<? . bg3011) (char-ci<=? . bg3010) (char-alphabetic? . bg300f) (make-variable-transformer . bgb8d) (identifier? . bge42) (generate-temporaries . bge2e) (free-identifier=? . bge30) (syntax->datum . bge46) (datum->syntax . bge44) (bound-identifier=? . bge32) (record-type-descriptor? . bg300e) (record-predicate . bg300d) (record-mutator . bg300c) (record-constructor . bg300b) (record-accessor . bg300a) (make-record-type-descriptor . bg3009) (make-record-constructor-descriptor . bg3008) (record? . bg3007) (record-type-uid . bg3006) (record-type-sealed? . bg3005) (record-type-parent . bg3004) (record-type-opaque? . bg3003) (record-type-name . bg3002) (record-type-generative? . bg3001) (record-type-field-names . bg3000) (record-rtd . bg2fff) (record-field-mutable? . bg2ffe) (delete-file . bg2ffd) (file-exists? . bg2ffc) (vector-sort! . bg2ffb) (vector-sort . bg2ffa) (list-sort . bg2ff9) (symbol-hash . bg2ff8) (string-ci-hash . bg2ff7) (string-hash . bg2ff6) (equal-hash . bg2ff5) (hashtable-equivalence-function . bg2ff4) (make-hashtable . bg2ff3) (hashtable-hash-function . bg2ff2) (make-eqv-hashtable . bg2ff1) (make-eq-hashtable . bg2ff0) (hashtable? . bg2fef) (hashtable-update! . bg2fee) (hashtable-size . bg2fed) (hashtable-set! . bg2fec) (hashtable-ref . bg2feb) (hashtable-mutable? . bg2fea) (hashtable-keys . bg2fe9) (hashtable-entries . bg2fe8) (hashtable-delete! . bg2fe7) (hashtable-copy . bg2fe6) (hashtable-contains? . bg2fe5) (hashtable-clear! . bg2fe4) (call-with-output-file . bg2fe3) (call-with-input-file . bg2fe2) (write-char . bg2fe1) (write . bg2fe0) (with-output-to-file . bg2fdf) (with-input-from-file . bg2fde) (read-char . bg2fdd) (read . bg2fdc) (peek-char . bg2fdb) (open-output-file . bg2fda) (open-input-file . bg2fd9) (newline . bg2fd8) (display . bg2fd7) (close-output-port . bg2fd6) (close-input-port . bg2fd5) (eof-object? . bg2fd4) (eof-object . bg2fd3) (current-error-port . bg2fd2) (current-output-port . bg2fd1) (current-input-port . bg2fd0) (output-port? . bg2fcf) (input-port? . bg2fce) (utf-8-codec . bg2fcd) (utf-16-codec . bg2fcc) (transcoder-error-handling-mode . bg2fcb) (transcoder-eol-style . bg2fca) (transcoder-codec . bg2fc9) (transcoded-port . bg2fc8) (textual-port? . bg2fc7) (string->bytevector . bg2fc6) (standard-output-port . bg2fc5) (standard-input-port . bg2fc4) (standard-error-port . bg2fc3) (set-port-position! . bg2fc2) (put-u8 . bg2fc1) (put-string . bg2fc0) (put-datum . bg2fbf) (put-char . bg2fbe) (put-bytevector . bg2fbd) (port? . bg2fbc) (port-transcoder . bg2fbb) (port-position . bg2fba) (port-has-set-port-position!? . bg2fb9) (port-has-port-position? . bg2fb8) (port-eof? . bg2fb7) (output-port-buffer-mode . bg2fb6) (open-string-output-port . bg2fb5) (open-string-input-port . bg2fb4) (open-file-output-port . bg2fb3) (open-file-input/output-port . bg2fb2) (open-file-input-port . bg2fb1) (open-bytevector-output-port . bg2fb0) (open-bytevector-input-port . bg2faf) (native-transcoder . bg2fae) (native-eol-style . bg2fad) (make-transcoder . bg2fac) (latin-1-codec . bg2fab) (make-i/o-write-error . bg2a24) (make-i/o-read-error . bg2a0f) (make-i/o-port-error . bg2ac5) (make-i/o-invalid-position-error . bg2a3b) (make-i/o-filename-error . bg2a56) (make-i/o-file-protection-error . bg2a6f) (make-i/o-file-is-read-only-error . bg2a84) (make-i/o-file-does-not-exist-error . bg2aae) (make-i/o-file-already-exists-error . bg2a99) (make-i/o-error . bg29fa) (make-i/o-encoding-error . bg2af5) (make-i/o-decoding-error . bg2ade) (make-custom-textual-output-port . bg2faa) (make-custom-textual-input/output-port . bg2fa9) (make-custom-textual-input-port . bg2fa8) (make-custom-binary-output-port . bg2fa7) (make-custom-binary-input/output-port . bg2fa6) (make-custom-binary-input-port . bg2fa5) (make-bytevector . bg2fa4) (lookahead-u8 . bg2fa3) (lookahead-char . bg2fa2) (i/o-write-error? . bg2a26) (i/o-read-error? . bg2a11) (i/o-port-error? . bg2ac9) (i/o-invalid-position-error? . bg2a3f) (i/o-filename-error? . bg2a5a) (i/o-file-protection-error? . bg2a71) (i/o-file-is-read-only-error? . bg2a86) (i/o-file-does-not-exist-error? . bg2ab0) (i/o-file-already-exists-error? . bg2a9b) (i/o-error? . bg29fc) (i/o-error-position . bg2a41) (i/o-error-port . bg2acb) (i/o-error-filename . bg2a5c) (i/o-encoding-error? . bg2af9) (i/o-encoding-error-char . bg2afb) (i/o-decoding-error? . bg2ae0) (get-u8 . bg2fa1) (get-string-n! . bg2fa0) (get-string-n . bg2f9f) (get-string-all . bg2f9e) (get-line . bg2f9d) (get-datum . bg2f9c) (get-char . bg2f9b) (get-bytevector-some . bg2f9a) (get-bytevector-n! . bg2f99) (get-bytevector-n . bg2f98) (get-bytevector-all . bg2f97) (flush-output-port . bg2f96) (close-port . bg2f95) (exit . bg2f8d) (command-line . bg2c30) (remove . bg2f88) (remv . bg2f87) (remp . bg2f86) (remq . bg2f85) (partition . bg2f84) (memv . bg2f83) (memq . bg2f82) (memp . bg2f81) (member . bg2f80) (exists . bg2f7f) (for-all . bg2f7e) (fold-right . bg2f7d) (fold-left . bg2f7c) (find . bg2f7b) (filter . bg2f7a) (cons* . bg2f79) (assv . bg2f78) (assq . bg2f77) (assp . bg2f76) (assoc . bg2f75) (call-with-string-output-port . bg2f74) (call-with-port . bg2f73) (call-with-bytevector-output-port . bg2f72) (bytevector->string . bg2f71) (buffer-mode? . bg2f70) (binary-port? . bg2f6f) (with-exception-handler . bg2f6e) (raise-continuable . bg2f6d) (raise . bg2f6c) (make-enumeration . bg2f6b) (enum-set=? . bg2f6a) (enum-set-universe . bg2f69) (enum-set-union . bg2f68) (enum-set-subset? . bg2f67) (enum-set-projection . bg2f66) (enum-set-member? . bg2f65) (enum-set-intersection . bg2f64) (enum-set-indexer . bg2f63) (enum-set-difference . bg2f62) (enum-set-constructor . bg2f61) (enum-set-complement . bg2f60) (enum-set->list . bg2f5f) (who-condition? . bg2970) (warning? . bg28e8) (violation? . bg2927) (undefined-violation? . bg29e7) (syntax-violation? . bg29ce) (syntax-violation-subform . bg29d2) (syntax-violation-form . bg29d0) (syntax-violation . bge40) (simple-conditions . bg2f5e) (serious-condition? . bg28fd) (non-continuable-violation? . bg2987) (message-condition? . bg28d1) (make-who-condition . bg296c) (make-warning . bg28e6) (make-violation . bg2925) (make-undefined-violation . bg29e5) (make-syntax-violation . bg29c8) (make-serious-condition . bg28fb) (make-non-continuable-violation . bg2985) (make-message-condition . bg28cd) (make-lexical-violation . bg29af) (make-irritants-condition . bg2951) (make-implementation-restriction-violation . bg299a) (make-error . bg2910) (make-assertion-violation . bg293a) (lexical-violation? . bg29b1) (irritants-condition? . bg2955) (implementation-restriction-violation? . bg299c) (error? . bg2912) (condition-who . bg2972) (condition-predicate . bg2f5d) (condition-message . bg28d3) (condition-irritants . bg2957) (condition-accessor . bg2f5c) (condition . bg2f5b) (assertion-violation? . bg293c) (condition? . bg2f5a) (utf32->string . bg2f59) (utf16->string . bg2f58) (utf8->string . bg2f57) (uint-list->bytevector . bg2f56) (u8-list->bytevector . bg2f55) (string->utf8 . bg2f54) (string->utf32 . bg2f53) (string->utf16 . bg2f52) (sint-list->bytevector . bg2f51) (native-endianness . bg2f50) (bytevector? . bg2f4f) (bytevector=? . bg2f4e) (bytevector-uint-set! . bg2f4d) (bytevector-uint-ref . bg2f4c) (bytevector-u8-set! . bg2f4b) (bytevector-u8-ref . bg2f4a) (bytevector-u64-set! . bg2f49) (bytevector-u64-ref . bg2f48) (bytevector-u64-native-set! . bg2f47) (bytevector-u64-native-ref . bg2f46) (bytevector-u32-set! . bg2f45) (bytevector-u32-ref . bg2f44) (bytevector-u32-native-set! . bg2f43) (bytevector-u32-native-ref . bg2f42) (bytevector-u16-set! . bg2f41) (bytevector-u16-ref . bg2f40) (bytevector-u16-native-set! . bg2f3f) (bytevector-u16-native-ref . bg2f3e) (bytevector-sint-set! . bg2f3d) (bytevector-sint-ref . bg2f3c) (bytevector-s8-set! . bg2f3b) (bytevector-s8-ref . bg2f3a) (bytevector-s64-set! . bg2f39) (bytevector-s64-ref . bg2f38) (bytevector-s64-native-set! . bg2f37) (bytevector-s64-native-ref . bg2f36) (bytevector-s32-set! . bg2f35) (bytevector-s32-ref . bg2f34) (bytevector-s32-native-set! . bg2f33) (bytevector-s32-native-ref . bg2f32) (bytevector-s16-set! . bg2f31) (bytevector-s16-ref . bg2f30) (bytevector-s16-native-set! . bg2f2f) (bytevector-s16-native-ref . bg2f2e) (bytevector-length . bg2f2d) (bytevector-ieee-single-ref . bg2f2c) (bytevector-ieee-single-set! . bg2f2b) (bytevector-ieee-single-native-set! . bg2f2a) (bytevector-ieee-single-native-ref . bg2f29) (bytevector-ieee-double-set! . bg2f28) (bytevector-ieee-double-ref . bg2f27) (bytevector-ieee-double-native-set! . bg2f26) (bytevector-ieee-double-native-ref . bg2f25) (bytevector-fill! . bg2f24) (bytevector-copy! . bg2f23) (bytevector-copy . bg2f22) (bytevector->uint-list . bg2f21) (bytevector->u8-list . bg2f20) (bytevector->sint-list . bg2f1f) (no-nans-violation? . bg2b25) (no-infinities-violation? . bg2b10) (make-no-nans-violation . bg2b23) (make-no-infinities-violation . bg2b0e) (real->flonum . bg2f1e) (flzero? . bg2f1d) (fltruncate . bg2f1c) (fltan . bg2f1b) (flsqrt . bg2f1a) (flsin . bg2f19) (flround . bg2f18) (flpositive? . bg2f17) (flonum? . bg2f16) (flodd? . bg2f15) (flnumerator . bg2f14) (flnegative? . bg2f13) (flnan? . bg2f12) (flmod0 . bg2f11) (flmod . bg2f10) (flmin . bg2f0f) (flmax . bg2f0e) (fllog . bg2f0d) (flinteger? . bg2f0c) (flinfinite? . bg2f0b) (flfloor . bg2f0a) (flfinite? . bg2f09) (flexpt . bg2f08) (flexp . bg2f07) (fleven? . bg2f06) (fldiv0-and-mod0 . bg2f05) (fldiv0 . bg2f04) (fldiv-and-mod . bg2f03) (fldiv . bg2f02) (fldenominator . bg2f01) (flcos . bg2f00) (flceiling . bg2eff) (flatan . bg2efe) (flasin . bg2efd) (flacos . bg2efc) (flabs . bg2efb) (fl>? . bg2efa) (fl>=? . bg2ef9) (fl=? . bg2ef8) (fl<? . bg2ef7) (fl<=? . bg2ef6) (fl/ . bg2ef5) (fl- . bg2ef4) (fl+ . bg2ef3) (fl* . bg2ef2) (fixnum->flonum . bg2ef1) (fxzero? . bg2ef0) (fxxor . bg2eef) (fxrotate-bit-field . bg2eee) (fxreverse-bit-field . bg2eed) (fxpositive? . bg2eec) (fxodd? . bg2eeb) (fxnot . bg2eea) (fxnegative? . bg2ee9) (fxmod0 . bg2ee8) (fxmod . bg2ee7) (fxmin . bg2ee6) (fxmax . bg2ee5) (fxlength . bg2ee4) (fxior . bg2ee3) (fxif . bg2ee2) (fxfirst-bit-set . bg2ee1) (fxeven? . bg2ee0) (fxdiv0-and-mod0 . bg2edf) (fxdiv0 . bg2ede) (fxdiv-and-mod . bg2edd) (fxdiv . bg2edc) (fxcopy-bit-field . bg2edb) (fxcopy-bit . bg2eda) (fxbit-set? . bg2ed9) (fxbit-field . bg2ed8) (fxbit-count . bg2ed7) (fxarithmetic-shift-right . bg2ed6) (fxarithmetic-shift-left . bg2ed5) (fxarithmetic-shift . bg2ed4) (fxand . bg2ed3) (fx>? . bg2ed2) (fx>=? . bg2ed1) (fx=? . bg2ed0) (fx<? . bg2ecf) (fx<=? . bg2ece) (fx-/carry . bg2ecd) (fx- . bg2ecc) (fx+/carry . bg2ecb) (fx+ . bg2eca) (fx*/carry . bg2ec9) (fx* . bg2ec8) (greatest-fixnum . bg2ec7) (least-fixnum . bg2ec6) (fixnum-width . bg2ec5) (fixnum? . bg2ec4) (bitwise-rotate-bit-field . bg2ec3) (bitwise-reverse-bit-field . bg2ec2) (bitwise-length . bg2ec1) (bitwise-if . bg2ec0) (bitwise-first-bit-set . bg2ebf) (bitwise-copy-bit-field . bg2ebe) (bitwise-copy-bit . bg2ebd) (bitwise-bit-set? . bg2ebc) (bitwise-bit-field . bg2ebb) (bitwise-bit-count . bg2eba) (bitwise-xor . bg2eb9) (bitwise-ior . bg2eb8) (bitwise-and . bg2eb7) (bitwise-not . bg2eb6) (bitwise-arithmetic-shift-right . bg2eb5) (bitwise-arithmetic-shift-left . bg2eb4) (bitwise-arithmetic-shift . bg2eb3) (zero? . bg2eb2) (vector? . bg2eb1) (vector-set! . bg2eb0) (vector-ref . bg2eaf) (vector-map . bg2eae) (vector-length . bg2ead) (vector-for-each . bg2eac) (vector-fill! . bg2eab) (vector->list . bg2eaa) (vector . bg2ea9) (values . bg2ea8) (truncate . bg2ea7) (tan . bg2ea6) (symbol? . bg2ea5) (symbol=? . bg2ea4) (symbol->string . bg2ea3) (substring . bg2ea2) (string? . bg2ea1) (string>? . bg2ea0) (string>=? . bg2e9f) (string=? . bg2e9e) (string<? . bg2e9d) (string<=? . bg2e9c) (string-ref . bg2e9b) (string-length . bg2e9a) (string-for-each . bg2e99) (string-copy . bg2e98) (string-append . bg2e97) (string->symbol . bg2e96) (string->number . bg2e95) (string->list . bg2e94) (string . bg2e93) (sqrt . bg2e92) (sin . bg2e91) (round . bg2e90) (reverse . bg2e8f) (real? . bg2e8e) (real-valued? . bg2e8d) (real-part . bg2e8c) (rationalize . bg2e8b) (rational? . bg2e8a) (rational-valued? . bg2e89) (procedure? . bg2e88) (positive? . bg2e87) (pair? . bg2e86) (odd? . bg2e85) (numerator . bg2e84) (number? . bg2e83) (number->string . bg2e82) (null? . bg2e81) (not . bg2e80) (negative? . bg2e7f) (nan? . bg2e7e) (min . bg2e7d) (max . bg2e7c) (map . bg2e7b) (make-vector . bg2e7a) (make-string . bg2e79) (make-rectangular . bg2e78) (make-polar . bg2e77) (magnitude . bg2e76) (log . bg2e75) (list? . bg2e74) (list-tail . bg2e73) (list-ref . bg2e72) (list->vector . bg2e71) (list->string . bg2e70) (list . bg2e6f) (length . bg2e6e) (lcm . bg2e6d) (integer? . bg2e6c) (integer-valued? . bg2e6b) (integer->char . bg2e6a) (infinite? . bg2e69) (inexact? . bg2e68) (inexact . bg2e67) (imag-part . bg2e66) (gcd . bg2e65) (for-each . bg2e64) (floor . bg2e63) (finite? . bg2e62) (expt . bg2e61) (exp . bg2e60) (exact? . bg2e5f) (exact-integer-sqrt . bg2e5e) (exact . bg2e5d) (even? . bg2e5c) (error . bg2e5b) (eqv? . bg2e5a) (equal? . bg2e59) (eq? . bg2e58) (dynamic-wind . bg2e57) (div0-and-mod0 . bg2e56) (mod0 . bg2e55) (div0 . bg2e54) (div-and-mod . bg2e53) (mod . bg2e52) (div . bg2e51) (denominator . bg2e50) (cos . bg2e4f) (cons . bg2e4e) (complex? . bg2e4d) (char? . bg2e4c) (char>? . bg2e4b) (char>=? . bg2e4a) (char=? . bg2e49) (char<? . bg2e48) (char<=? . bg2e47) (char->integer . bg2e46) (ceiling . bg2e45) (call-with-values . bg2e44) (call/cc . bg2e43) (call-with-current-continuation . bg2e42) (cddddr . bg2e41) (cdddar . bg2e40) (cddadr . bg2e3f) (cddaar . bg2e3e) (cdaddr . bg2e3d) (cdadar . bg2e3c) (cdaadr . bg2e3b) (cdaaar . bg2e3a) (cadddr . bg2e39) (caddar . bg2e38) (cadadr . bg2e37) (cadaar . bg2e36) (caaddr . bg2e35) (caadar . bg2e34) (caaadr . bg2e33) (caaaar . bg2e32) (cdddr . bg2e31) (cddar . bg2e30) (cdadr . bg2e2f) (cdaar . bg2e2e) (caddr . bg2e2d) (cadar . bg2e2c) (caadr . bg2e2b) (caaar . bg2e2a) (cddr . bg2e29) (cdar . bg2e28) (cadr . bg2e27) (caar . bg2e26) (cdr . bg2e25) (car . bg2e24) (boolean? . bg2e23) (boolean=? . bg2e22) (atan . bg2e21) (assertion-violation . bg2e20) (asin . bg2e1f) (apply . bg2e1e) (append . bg2e1d) (angle . bg2e1c) (acos . bg2e1b) (abs . bg2e1a) (/ . bg2e19) (* . bg2e18) (- . bg2e17) (+ . bg2e16) (>= . bg2e15) (> . bg2e14) (= . bg2e13) (<= . bg2e12) (< . bg2e11) (&no-nans . bg2e0f) (&no-infinities . bg2e0e) (&i/o-encoding . bg2e0d) (&i/o-decoding . bg2e0c) (&i/o-port . bg2e0b) (&i/o-file-does-not-exist . bg2e0a) (&i/o-file-already-exists . bg2e09) (&i/o-file-is-read-only . bg2e08) (&i/o-file-protection . bg2e07) (&i/o-filename . bg2e06) (&i/o-invalid-position . bg2e05) (&i/o-write . bg2e04) (&i/o-read . bg2e03) (&i/o . bg2e02) (&undefined . bg2e01) (&syntax . bg2e00) (&lexical . bg2dff) (&implementation-restriction . bg2dfe) (&non-continuable . bg2dfd) (&who . bg2dfc) (&irritants . bg2dfb) (&assertion . bg2dfa) (&violation . bg2df9) (&error . bg2df8) (&serious . bg2df7) (&warning . bg2df6) (&message . bg2df5) (&condition . bg2df4) (define-condition-type . bg2df3) (define-enumeration . bg2df2) (define-record-type . bg2df1) (parent-rtd . bg2df0) (nongenerative . bg2def) (opaque . bg2dee) (sealed . bg2ded) (protocol . bg2dec) (parent . bg2deb) (immutable . bg2dea) (mutable . bg2de9) (fields . bg2de8) (error-handling-mode . bg2de7) (file-options . bg2de6) (buffer-mode . bg2de5) (eol-style . bg2de4) (guard . bg2de3) (unsyntax-splicing . bg2de0) (unsyntax . bg2ddf) (unquote-splicing . bg2dde) (unquote . bg2ddd) (_ . bg2ddc) (else . bg2ddb) (=> . bg2dda) (... . bg2dd9) (assert . bg2dd8) (endianness . bg2dd7) (do . bg2dd4) (cond . bg2dd3) (let* . bg2dd2) (let . bg2dd1) (let*-values . bg2dd0) (let-values . bg2dcf) (identifier-syntax . bg2dce) (with-syntax . bg2dcd) (quasisyntax . bg2dcc) (quasiquote . bg2dcb) (syntax-rules . bg2dca) (record-constructor-descriptor . bg2dc7) (record-type-descriptor . bg2dc6) (case . bg2dc5) (unless . bg2dc3) (when . bg2dc2) (or . bg2dc1) (and . bg2dc0) (if . bg2dbf) (letrec* . bg2dbe) (letrec . bg2dbd) (case-lambda . bg2dbb) (lambda . bg2dba) (syntax . bg2db9) (syntax-case . bg2db8) (quote . bg2db7) (letrec-syntax . bg2db5) (let-syntax . bg2db4) (set! . bg2db3) (begin . bg2db1) (define-syntax . bg2daf) (define . bg2dae)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30da '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bge1c) (quotient . bg2f94) (null-environment . bge1a) (remainder . bg2f93) (modulo . bg2f92) (inexact->exact . bg2f91) (force . bg2f90) (exact->inexact . bg2f8f) (make-promise . bg2f8e) (delay . bg2dd6)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30db '(rnrs control) '(6) '() '() '() '((do . bg2dd4) (unless . bg2dc3) (when . bg2dc2) (case-lambda . bg2dbb)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30dc '(rnrs eval) '(6) '() '() '() '((eval . bge20) (environment . bge18)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30dd '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bg2f8a) (set-car! . bg2f89)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30de '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bg2f8c) (string-set! . bg2f8b)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30df '(rnrs programs) '(6) '() '() '() '((exit . bg2f8d) (command-line . bg2c30)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bgb8d) (identifier? . bge42) (generate-temporaries . bge2e) (free-identifier=? . bge30) (syntax->datum . bge46) (datum->syntax . bge44) (bound-identifier=? . bge32) (syntax-violation . bge40) (unsyntax-splicing . bg2de0) (unsyntax . bg2ddf) (_ . bg2ddc) (... . bg2dd9) (with-syntax . bg2dcd) (quasisyntax . bg2dcc) (syntax . bg2db9) (syntax-case . bg2db8)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e1 '(rnrs files) '(6) '() '() '() '((delete-file . bg2ffd) (file-exists? . bg2ffc) (make-i/o-write-error . bg2a24) (make-i/o-read-error . bg2a0f) (make-i/o-port-error . bg2ac5) (make-i/o-invalid-position-error . bg2a3b) (make-i/o-filename-error . bg2a56) (make-i/o-file-protection-error . bg2a6f) (make-i/o-file-is-read-only-error . bg2a84) (make-i/o-file-does-not-exist-error . bg2aae) (make-i/o-file-already-exists-error . bg2a99) (make-i/o-error . bg29fa) (i/o-write-error? . bg2a26) (i/o-read-error? . bg2a11) (i/o-port-error? . bg2ac9) (i/o-invalid-position-error? . bg2a3f) (i/o-filename-error? . bg2a5a) (i/o-file-protection-error? . bg2a71) (i/o-file-is-read-only-error? . bg2a86) (i/o-file-does-not-exist-error? . bg2ab0) (i/o-file-already-exists-error? . bg2a9b) (i/o-error? . bg29fc) (i/o-error-position . bg2a41) (i/o-error-port . bg2acb) (i/o-error-filename . bg2a5c) (&i/o-port . bg2e0b) (&i/o-file-does-not-exist . bg2e0a) (&i/o-file-already-exists . bg2e09) (&i/o-file-is-read-only . bg2e08) (&i/o-file-protection . bg2e07) (&i/o-filename . bg2e06) (&i/o-invalid-position . bg2e05) (&i/o-write . bg2e04) (&i/o-read . bg2e03) (&i/o . bg2e02)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bg2ffb) (vector-sort . bg2ffa) (list-sort . bg2ff9)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e3 '(rnrs base) '(6) '() '() '() '((zero? . bg2eb2) (vector? . bg2eb1) (vector-set! . bg2eb0) (vector-ref . bg2eaf) (vector-map . bg2eae) (vector-length . bg2ead) (vector-for-each . bg2eac) (vector-fill! . bg2eab) (vector->list . bg2eaa) (vector . bg2ea9) (values . bg2ea8) (truncate . bg2ea7) (tan . bg2ea6) (symbol? . bg2ea5) (symbol=? . bg2ea4) (symbol->string . bg2ea3) (substring . bg2ea2) (string? . bg2ea1) (string>? . bg2ea0) (string>=? . bg2e9f) (string=? . bg2e9e) (string<? . bg2e9d) (string<=? . bg2e9c) (string-ref . bg2e9b) (string-length . bg2e9a) (string-for-each . bg2e99) (string-copy . bg2e98) (string-append . bg2e97) (string->symbol . bg2e96) (string->number . bg2e95) (string->list . bg2e94) (string . bg2e93) (sqrt . bg2e92) (sin . bg2e91) (round . bg2e90) (reverse . bg2e8f) (real? . bg2e8e) (real-valued? . bg2e8d) (real-part . bg2e8c) (rationalize . bg2e8b) (rational? . bg2e8a) (rational-valued? . bg2e89) (procedure? . bg2e88) (positive? . bg2e87) (pair? . bg2e86) (odd? . bg2e85) (numerator . bg2e84) (number? . bg2e83) (number->string . bg2e82) (null? . bg2e81) (not . bg2e80) (negative? . bg2e7f) (nan? . bg2e7e) (min . bg2e7d) (max . bg2e7c) (map . bg2e7b) (make-vector . bg2e7a) (make-string . bg2e79) (make-rectangular . bg2e78) (make-polar . bg2e77) (magnitude . bg2e76) (log . bg2e75) (list? . bg2e74) (list-tail . bg2e73) (list-ref . bg2e72) (list->vector . bg2e71) (list->string . bg2e70) (list . bg2e6f) (length . bg2e6e) (lcm . bg2e6d) (integer? . bg2e6c) (integer-valued? . bg2e6b) (integer->char . bg2e6a) (infinite? . bg2e69) (inexact? . bg2e68) (inexact . bg2e67) (imag-part . bg2e66) (gcd . bg2e65) (for-each . bg2e64) (floor . bg2e63) (finite? . bg2e62) (expt . bg2e61) (exp . bg2e60) (exact? . bg2e5f) (exact-integer-sqrt . bg2e5e) (exact . bg2e5d) (even? . bg2e5c) (error . bg2e5b) (eqv? . bg2e5a) (equal? . bg2e59) (eq? . bg2e58) (dynamic-wind . bg2e57) (div0-and-mod0 . bg2e56) (mod0 . bg2e55) (div0 . bg2e54) (div-and-mod . bg2e53) (mod . bg2e52) (div . bg2e51) (denominator . bg2e50) (cos . bg2e4f) (cons . bg2e4e) (complex? . bg2e4d) (char? . bg2e4c) (char>? . bg2e4b) (char>=? . bg2e4a) (char=? . bg2e49) (char<? . bg2e48) (char<=? . bg2e47) (char->integer . bg2e46) (ceiling . bg2e45) (call-with-values . bg2e44) (call/cc . bg2e43) (call-with-current-continuation . bg2e42) (cddddr . bg2e41) (cdddar . bg2e40) (cddadr . bg2e3f) (cddaar . bg2e3e) (cdaddr . bg2e3d) (cdadar . bg2e3c) (cdaadr . bg2e3b) (cdaaar . bg2e3a) (cadddr . bg2e39) (caddar . bg2e38) (cadadr . bg2e37) (cadaar . bg2e36) (caaddr . bg2e35) (caadar . bg2e34) (caaadr . bg2e33) (caaaar . bg2e32) (cdddr . bg2e31) (cddar . bg2e30) (cdadr . bg2e2f) (cdaar . bg2e2e) (caddr . bg2e2d) (cadar . bg2e2c) (caadr . bg2e2b) (caaar . bg2e2a) (cddr . bg2e29) (cdar . bg2e28) (cadr . bg2e27) (caar . bg2e26) (cdr . bg2e25) (car . bg2e24) (boolean? . bg2e23) (boolean=? . bg2e22) (atan . bg2e21) (assertion-violation . bg2e20) (asin . bg2e1f) (apply . bg2e1e) (append . bg2e1d) (angle . bg2e1c) (acos . bg2e1b) (abs . bg2e1a) (/ . bg2e19) (* . bg2e18) (- . bg2e17) (+ . bg2e16) (>= . bg2e15) (> . bg2e14) (= . bg2e13) (<= . bg2e12) (< . bg2e11) (unquote-splicing . bg2dde) (unquote . bg2ddd) (_ . bg2ddc) (else . bg2ddb) (=> . bg2dda) (... . bg2dd9) (assert . bg2dd8) (cond . bg2dd3) (let* . bg2dd2) (let . bg2dd1) (let*-values . bg2dd0) (let-values . bg2dcf) (identifier-syntax . bg2dce) (quasiquote . bg2dcb) (syntax-rules . bg2dca) (case . bg2dc5) (or . bg2dc1) (and . bg2dc0) (if . bg2dbf) (letrec* . bg2dbe) (letrec . bg2dbd) (lambda . bg2dba) (quote . bg2db7) (letrec-syntax . bg2db5) (let-syntax . bg2db4) (set! . bg2db3) (begin . bg2db1) (define-syntax . bg2daf) (define . bg2dae)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e4 '(rnrs lists) '(6) '() '() '() '((remove . bg2f88) (remv . bg2f87) (remp . bg2f86) (remq . bg2f85) (partition . bg2f84) (memv . bg2f83) (memq . bg2f82) (memp . bg2f81) (member . bg2f80) (exists . bg2f7f) (for-all . bg2f7e) (fold-right . bg2f7d) (fold-left . bg2f7c) (find . bg2f7b) (filter . bg2f7a) (cons* . bg2f79) (assv . bg2f78) (assq . bg2f77) (assp . bg2f76) (assoc . bg2f75)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bg2fe3) (call-with-input-file . bg2fe2) (write-char . bg2fe1) (write . bg2fe0) (with-output-to-file . bg2fdf) (with-input-from-file . bg2fde) (read-char . bg2fdd) (read . bg2fdc) (peek-char . bg2fdb) (open-output-file . bg2fda) (open-input-file . bg2fd9) (newline . bg2fd8) (display . bg2fd7) (close-output-port . bg2fd6) (close-input-port . bg2fd5) (eof-object? . bg2fd4) (eof-object . bg2fd3) (current-error-port . bg2fd2) (current-output-port . bg2fd1) (current-input-port . bg2fd0) (output-port? . bg2fcf) (input-port? . bg2fce) (make-i/o-write-error . bg2a24) (make-i/o-read-error . bg2a0f) (make-i/o-port-error . bg2ac5) (make-i/o-invalid-position-error . bg2a3b) (make-i/o-filename-error . bg2a56) (make-i/o-file-protection-error . bg2a6f) (make-i/o-file-is-read-only-error . bg2a84) (make-i/o-file-does-not-exist-error . bg2aae) (make-i/o-file-already-exists-error . bg2a99) (make-i/o-error . bg29fa) (i/o-write-error? . bg2a26) (i/o-read-error? . bg2a11) (i/o-port-error? . bg2ac9) (i/o-invalid-position-error? . bg2a3f) (i/o-filename-error? . bg2a5a) (i/o-file-protection-error? . bg2a71) (i/o-file-is-read-only-error? . bg2a86) (i/o-file-does-not-exist-error? . bg2ab0) (i/o-file-already-exists-error? . bg2a9b) (i/o-error? . bg29fc) (i/o-error-position . bg2a41) (i/o-error-port . bg2acb) (i/o-error-filename . bg2a5c) (&i/o-port . bg2e0b) (&i/o-file-does-not-exist . bg2e0a) (&i/o-file-already-exists . bg2e09) (&i/o-file-is-read-only . bg2e08) (&i/o-file-protection . bg2e07) (&i/o-filename . bg2e06) (&i/o-invalid-position . bg2e05) (&i/o-write . bg2e04) (&i/o-read . bg2e03) (&i/o . bg2e02)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bg2fa4) (utf32->string . bg2f59) (utf16->string . bg2f58) (utf8->string . bg2f57) (uint-list->bytevector . bg2f56) (u8-list->bytevector . bg2f55) (string->utf8 . bg2f54) (string->utf32 . bg2f53) (string->utf16 . bg2f52) (sint-list->bytevector . bg2f51) (native-endianness . bg2f50) (bytevector? . bg2f4f) (bytevector=? . bg2f4e) (bytevector-uint-set! . bg2f4d) (bytevector-uint-ref . bg2f4c) (bytevector-u8-set! . bg2f4b) (bytevector-u8-ref . bg2f4a) (bytevector-u64-set! . bg2f49) (bytevector-u64-ref . bg2f48) (bytevector-u64-native-set! . bg2f47) (bytevector-u64-native-ref . bg2f46) (bytevector-u32-set! . bg2f45) (bytevector-u32-ref . bg2f44) (bytevector-u32-native-set! . bg2f43) (bytevector-u32-native-ref . bg2f42) (bytevector-u16-set! . bg2f41) (bytevector-u16-ref . bg2f40) (bytevector-u16-native-set! . bg2f3f) (bytevector-u16-native-ref . bg2f3e) (bytevector-sint-set! . bg2f3d) (bytevector-sint-ref . bg2f3c) (bytevector-s8-set! . bg2f3b) (bytevector-s8-ref . bg2f3a) (bytevector-s64-set! . bg2f39) (bytevector-s64-ref . bg2f38) (bytevector-s64-native-set! . bg2f37) (bytevector-s64-native-ref . bg2f36) (bytevector-s32-set! . bg2f35) (bytevector-s32-ref . bg2f34) (bytevector-s32-native-set! . bg2f33) (bytevector-s32-native-ref . bg2f32) (bytevector-s16-set! . bg2f31) (bytevector-s16-ref . bg2f30) (bytevector-s16-native-set! . bg2f2f) (bytevector-s16-native-ref . bg2f2e) (bytevector-length . bg2f2d) (bytevector-ieee-single-ref . bg2f2c) (bytevector-ieee-single-set! . bg2f2b) (bytevector-ieee-single-native-set! . bg2f2a) (bytevector-ieee-single-native-ref . bg2f29) (bytevector-ieee-double-set! . bg2f28) (bytevector-ieee-double-ref . bg2f27) (bytevector-ieee-double-native-set! . bg2f26) (bytevector-ieee-double-native-ref . bg2f25) (bytevector-fill! . bg2f24) (bytevector-copy! . bg2f23) (bytevector-copy . bg2f22) (bytevector->uint-list . bg2f21) (bytevector->u8-list . bg2f20) (bytevector->sint-list . bg2f1f) (endianness . bg2dd7)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bg302b) (string-titlecase . bg302a) (string-normalize-nfkd . bg3029) (string-normalize-nfkc . bg3028) (string-normalize-nfd . bg3027) (string-normalize-nfc . bg3026) (string-foldcase . bg3025) (string-downcase . bg3024) (string-ci>? . bg3023) (string-ci>=? . bg3022) (string-ci=? . bg3021) (string-ci<? . bg3020) (string-ci<=? . bg301f) (char-whitespace? . bg301e) (char-upper-case? . bg301d) (char-title-case? . bg301c) (char-numeric? . bg301b) (char-lower-case? . bg301a) (char-general-category . bg3019) (char-upcase . bg3018) (char-titlecase . bg3017) (char-foldcase . bg3016) (char-downcase . bg3015) (char-ci>? . bg3014) (char-ci>=? . bg3013) (char-ci=? . bg3012) (char-ci<? . bg3011) (char-ci<=? . bg3010) (char-alphabetic? . bg300f)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bg2f6e) (raise-continuable . bg2f6d) (raise . bg2f6c) (guard . bg2de3) (else . bg2ddb) (=> . bg2dda)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30e9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bg2ec3) (bitwise-reverse-bit-field . bg2ec2) (bitwise-length . bg2ec1) (bitwise-if . bg2ec0) (bitwise-first-bit-set . bg2ebf) (bitwise-copy-bit-field . bg2ebe) (bitwise-copy-bit . bg2ebd) (bitwise-bit-set? . bg2ebc) (bitwise-bit-field . bg2ebb) (bitwise-bit-count . bg2eba) (bitwise-xor . bg2eb9) (bitwise-ior . bg2eb8) (bitwise-and . bg2eb7) (bitwise-not . bg2eb6) (bitwise-arithmetic-shift-right . bg2eb5) (bitwise-arithmetic-shift-left . bg2eb4) (bitwise-arithmetic-shift . bg2eb3)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30ea '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bg2ef0) (fxxor . bg2eef) (fxrotate-bit-field . bg2eee) (fxreverse-bit-field . bg2eed) (fxpositive? . bg2eec) (fxodd? . bg2eeb) (fxnot . bg2eea) (fxnegative? . bg2ee9) (fxmod0 . bg2ee8) (fxmod . bg2ee7) (fxmin . bg2ee6) (fxmax . bg2ee5) (fxlength . bg2ee4) (fxior . bg2ee3) (fxif . bg2ee2) (fxfirst-bit-set . bg2ee1) (fxeven? . bg2ee0) (fxdiv0-and-mod0 . bg2edf) (fxdiv0 . bg2ede) (fxdiv-and-mod . bg2edd) (fxdiv . bg2edc) (fxcopy-bit-field . bg2edb) (fxcopy-bit . bg2eda) (fxbit-set? . bg2ed9) (fxbit-field . bg2ed8) (fxbit-count . bg2ed7) (fxarithmetic-shift-right . bg2ed6) (fxarithmetic-shift-left . bg2ed5) (fxarithmetic-shift . bg2ed4) (fxand . bg2ed3) (fx>? . bg2ed2) (fx>=? . bg2ed1) (fx=? . bg2ed0) (fx<? . bg2ecf) (fx<=? . bg2ece) (fx-/carry . bg2ecd) (fx- . bg2ecc) (fx+/carry . bg2ecb) (fx+ . bg2eca) (fx*/carry . bg2ec9) (fx* . bg2ec8) (greatest-fixnum . bg2ec7) (least-fixnum . bg2ec6) (fixnum-width . bg2ec5) (fixnum? . bg2ec4)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30eb '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bg2b25) (no-infinities-violation? . bg2b10) (make-no-nans-violation . bg2b23) (make-no-infinities-violation . bg2b0e) (real->flonum . bg2f1e) (flzero? . bg2f1d) (fltruncate . bg2f1c) (fltan . bg2f1b) (flsqrt . bg2f1a) (flsin . bg2f19) (flround . bg2f18) (flpositive? . bg2f17) (flonum? . bg2f16) (flodd? . bg2f15) (flnumerator . bg2f14) (flnegative? . bg2f13) (flnan? . bg2f12) (flmod0 . bg2f11) (flmod . bg2f10) (flmin . bg2f0f) (flmax . bg2f0e) (fllog . bg2f0d) (flinteger? . bg2f0c) (flinfinite? . bg2f0b) (flfloor . bg2f0a) (flfinite? . bg2f09) (flexpt . bg2f08) (flexp . bg2f07) (fleven? . bg2f06) (fldiv0-and-mod0 . bg2f05) (fldiv0 . bg2f04) (fldiv-and-mod . bg2f03) (fldiv . bg2f02) (fldenominator . bg2f01) (flcos . bg2f00) (flceiling . bg2eff) (flatan . bg2efe) (flasin . bg2efd) (flacos . bg2efc) (flabs . bg2efb) (fl>? . bg2efa) (fl>=? . bg2ef9) (fl=? . bg2ef8) (fl<? . bg2ef7) (fl<=? . bg2ef6) (fl/ . bg2ef5) (fl- . bg2ef4) (fl+ . bg2ef3) (fl* . bg2ef2) (fixnum->flonum . bg2ef1) (&no-nans . bg2e0f) (&no-infinities . bg2e0e)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30ec '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bg2ff8) (string-ci-hash . bg2ff7) (string-hash . bg2ff6) (equal-hash . bg2ff5) (hashtable-equivalence-function . bg2ff4) (make-hashtable . bg2ff3) (hashtable-hash-function . bg2ff2) (make-eqv-hashtable . bg2ff1) (make-eq-hashtable . bg2ff0) (hashtable? . bg2fef) (hashtable-update! . bg2fee) (hashtable-size . bg2fed) (hashtable-set! . bg2fec) (hashtable-ref . bg2feb) (hashtable-mutable? . bg2fea) (hashtable-keys . bg2fe9) (hashtable-entries . bg2fe8) (hashtable-delete! . bg2fe7) (hashtable-copy . bg2fe6) (hashtable-contains? . bg2fe5) (hashtable-clear! . bg2fe4)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30ed '(rnrs io ports) '(6) '() '() '() '((eof-object? . bg2fd4) (eof-object . bg2fd3) (current-error-port . bg2fd2) (current-output-port . bg2fd1) (current-input-port . bg2fd0) (output-port? . bg2fcf) (input-port? . bg2fce) (utf-8-codec . bg2fcd) (utf-16-codec . bg2fcc) (transcoder-error-handling-mode . bg2fcb) (transcoder-eol-style . bg2fca) (transcoder-codec . bg2fc9) (transcoded-port . bg2fc8) (textual-port? . bg2fc7) (string->bytevector . bg2fc6) (standard-output-port . bg2fc5) (standard-input-port . bg2fc4) (standard-error-port . bg2fc3) (set-port-position! . bg2fc2) (put-u8 . bg2fc1) (put-string . bg2fc0) (put-datum . bg2fbf) (put-char . bg2fbe) (put-bytevector . bg2fbd) (port? . bg2fbc) (port-transcoder . bg2fbb) (port-position . bg2fba) (port-has-set-port-position!? . bg2fb9) (port-has-port-position? . bg2fb8) (port-eof? . bg2fb7) (output-port-buffer-mode . bg2fb6) (open-string-output-port . bg2fb5) (open-string-input-port . bg2fb4) (open-file-output-port . bg2fb3) (open-file-input/output-port . bg2fb2) (open-file-input-port . bg2fb1) (open-bytevector-output-port . bg2fb0) (open-bytevector-input-port . bg2faf) (native-transcoder . bg2fae) (native-eol-style . bg2fad) (make-transcoder . bg2fac) (latin-1-codec . bg2fab) (make-i/o-write-error . bg2a24) (make-i/o-read-error . bg2a0f) (make-i/o-port-error . bg2ac5) (make-i/o-invalid-position-error . bg2a3b) (make-i/o-filename-error . bg2a56) (make-i/o-file-protection-error . bg2a6f) (make-i/o-file-is-read-only-error . bg2a84) (make-i/o-file-does-not-exist-error . bg2aae) (make-i/o-file-already-exists-error . bg2a99) (make-i/o-error . bg29fa) (make-i/o-encoding-error . bg2af5) (make-i/o-decoding-error . bg2ade) (make-custom-textual-output-port . bg2faa) (make-custom-textual-input/output-port . bg2fa9) (make-custom-textual-input-port . bg2fa8) (make-custom-binary-output-port . bg2fa7) (make-custom-binary-input/output-port . bg2fa6) (make-custom-binary-input-port . bg2fa5) (lookahead-u8 . bg2fa3) (lookahead-char . bg2fa2) (i/o-write-error? . bg2a26) (i/o-read-error? . bg2a11) (i/o-port-error? . bg2ac9) (i/o-invalid-position-error? . bg2a3f) (i/o-filename-error? . bg2a5a) (i/o-file-protection-error? . bg2a71) (i/o-file-is-read-only-error? . bg2a86) (i/o-file-does-not-exist-error? . bg2ab0) (i/o-file-already-exists-error? . bg2a9b) (i/o-error? . bg29fc) (i/o-error-position . bg2a41) (i/o-error-port . bg2acb) (i/o-error-filename . bg2a5c) (i/o-encoding-error? . bg2af9) (i/o-encoding-error-char . bg2afb) (i/o-decoding-error? . bg2ae0) (get-u8 . bg2fa1) (get-string-n! . bg2fa0) (get-string-n . bg2f9f) (get-string-all . bg2f9e) (get-line . bg2f9d) (get-datum . bg2f9c) (get-char . bg2f9b) (get-bytevector-some . bg2f9a) (get-bytevector-n! . bg2f99) (get-bytevector-n . bg2f98) (get-bytevector-all . bg2f97) (flush-output-port . bg2f96) (close-port . bg2f95) (call-with-string-output-port . bg2f74) (call-with-port . bg2f73) (call-with-bytevector-output-port . bg2f72) (bytevector->string . bg2f71) (buffer-mode? . bg2f70) (binary-port? . bg2f6f) (&i/o-encoding . bg2e0d) (&i/o-decoding . bg2e0c) (&i/o-port . bg2e0b) (&i/o-file-does-not-exist . bg2e0a) (&i/o-file-already-exists . bg2e09) (&i/o-file-is-read-only . bg2e08) (&i/o-file-protection . bg2e07) (&i/o-filename . bg2e06) (&i/o-invalid-position . bg2e05) (&i/o-write . bg2e04) (&i/o-read . bg2e03) (&i/o . bg2e02) (error-handling-mode . bg2de7) (file-options . bg2de6) (buffer-mode . bg2de5) (eol-style . bg2de4)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30ee '(rnrs enums) '(6) '() '() '() '((make-enumeration . bg2f6b) (enum-set=? . bg2f6a) (enum-set-universe . bg2f69) (enum-set-union . bg2f68) (enum-set-subset? . bg2f67) (enum-set-projection . bg2f66) (enum-set-member? . bg2f65) (enum-set-intersection . bg2f64) (enum-set-indexer . bg2f63) (enum-set-difference . bg2f62) (enum-set-constructor . bg2f61) (enum-set-complement . bg2f60) (enum-set->list . bg2f5f) (define-enumeration . bg2df2)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30ef '(rnrs conditions) '(6) '() '() '() '((who-condition? . bg2970) (warning? . bg28e8) (violation? . bg2927) (undefined-violation? . bg29e7) (syntax-violation? . bg29ce) (syntax-violation-subform . bg29d2) (syntax-violation-form . bg29d0) (syntax-violation . bge40) (simple-conditions . bg2f5e) (serious-condition? . bg28fd) (non-continuable-violation? . bg2987) (message-condition? . bg28d1) (make-who-condition . bg296c) (make-warning . bg28e6) (make-violation . bg2925) (make-undefined-violation . bg29e5) (make-syntax-violation . bg29c8) (make-serious-condition . bg28fb) (make-non-continuable-violation . bg2985) (make-message-condition . bg28cd) (make-lexical-violation . bg29af) (make-irritants-condition . bg2951) (make-implementation-restriction-violation . bg299a) (make-error . bg2910) (make-assertion-violation . bg293a) (lexical-violation? . bg29b1) (irritants-condition? . bg2955) (implementation-restriction-violation? . bg299c) (error? . bg2912) (condition-who . bg2972) (condition-predicate . bg2f5d) (condition-message . bg28d3) (condition-irritants . bg2957) (condition-accessor . bg2f5c) (condition . bg2f5b) (assertion-violation? . bg293c) (condition? . bg2f5a) (&undefined . bg2e01) (&syntax . bg2e00) (&lexical . bg2dff) (&implementation-restriction . bg2dfe) (&non-continuable . bg2dfd) (&who . bg2dfc) (&irritants . bg2dfb) (&assertion . bg2dfa) (&violation . bg2df9) (&error . bg2df8) (&serious . bg2df7) (&warning . bg2df6) (&message . bg2df5) (&condition . bg2df4) (define-condition-type . bg2df3)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30f0 '(rnrs records inspection) '(6) '() '() '() '((record? . bg3007) (record-type-uid . bg3006) (record-type-sealed? . bg3005) (record-type-parent . bg3004) (record-type-opaque? . bg3003) (record-type-name . bg3002) (record-type-generative? . bg3001) (record-type-field-names . bg3000) (record-rtd . bg2fff) (record-field-mutable? . bg2ffe)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30f1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bg300e) (record-predicate . bg300d) (record-mutator . bg300c) (record-constructor . bg300b) (record-accessor . bg300a) (make-record-type-descriptor . bg3009) (make-record-constructor-descriptor . bg3008)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30f2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bg2df1) (parent-rtd . bg2df0) (nongenerative . bg2def) (opaque . bg2dee) (sealed . bg2ded) (protocol . bg2dec) (parent . bg2deb) (immutable . bg2dea) (mutable . bg2de9) (fields . bg2de8) (record-constructor-descriptor . bg2dc7) (record-type-descriptor . bg2dc6)) '() values values '#f '#f '#t '#f) (bg985@bg7d1@install-library 'bg30f3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bg2b29) (&no-nans-rtd . bg2b27) (&no-infinities-rcd . bg2b14) (&no-infinities-rtd . bg2b12) (&i/o-encoding-rcd . bg2aff) (&i/o-encoding-rtd . bg2afd) (&i/o-decoding-rcd . bg2ae4) (&i/o-decoding-rtd . bg2ae2) (&i/o-port-rcd . bg2acf) (&i/o-port-rtd . bg2acd) (&i/o-file-does-not-exist-rcd . bg2ab4) (&i/o-file-does-not-exist-rtd . bg2ab2) (&i/o-file-already-exists-rcd . bg2a9f) (&i/o-file-already-exists-rtd . bg2a9d) (&i/o-file-is-read-only-rcd . bg2a8a) (&i/o-file-is-read-only-rtd . bg2a88) (&i/o-file-protection-rcd . bg2a75) (&i/o-file-protection-rtd . bg2a73) (&i/o-filename-rcd . bg2a60) (&i/o-filename-rtd . bg2a5e) (&i/o-invalid-position-rcd . bg2a45) (&i/o-invalid-position-rtd . bg2a43) (&i/o-write-rcd . bg2a2a) (&i/o-write-rtd . bg2a28) (&i/o-read-rcd . bg2a15) (&i/o-read-rtd . bg2a13) (&i/o-rcd . bg2a00) (&i/o-rtd . bg29fe) (&undefined-rcd . bg29eb) (&undefined-rtd . bg29e9) (&syntax-rcd . bg29d6) (&syntax-rtd . bg29d4) (&lexical-rcd . bg29b5) (&lexical-rtd . bg29b3) (&implementation-restriction-rcd . bg29a0) (&implementation-restriction-rtd . bg299e) (&non-continuable-rcd . bg298b) (&non-continuable-rtd . bg2989) (&who-rcd . bg2976) (&who-rtd . bg2974) (&irritants-rcd . bg295b) (&irritants-rtd . bg2959) (&assertion-rcd . bg2940) (&assertion-rtd . bg293e) (&violation-rcd . bg292b) (&violation-rtd . bg2929) (&error-rcd . bg2916) (&error-rtd . bg2914) (&serious-rcd . bg2901) (&serious-rtd . bg28ff) (&warning-rcd . bg28ec) (&warning-rtd . bg28ea) (&message-rcd . bg28d7) (&message-rtd . bg28d5) (&condition-rcd . bg2878) (&condition-rtd . bg2876) (syntax-error . bge3c) (syntax-dispatch . bgd60) (pretty-print . bg30d3) (eval-core . bg30d2) (set-symbol-value! . bg30d1) (symbol-value . bg30d0) (gensym . bg30cf) (void . bg30ce) (load . bg2c36) (interaction-environment . bge4c) (char-ready? . bg30cd) (regexp? . bg30cc) (read-line . bg30cb) (gensym-prefix-set! . bg30ca) (ungensym . bg30c9) (alist->eq-hash-table . bg30c8) (assoc-ref . bg30c7) (print . bg30c6) (format . bg30c5) (host-os . bg30c4) (library-path . bg7b0) (standard-library-path . bg30c3) (file-newer? . bg30c2) (stat-mtime . bg30c1) (write-to-file . bg30c0) (file->list . bg30bf) (file->string . bg30be) (digit->integer . bg30bd) (call-with-string-input-port . bg30bc) (call-with-string-io . bg30bb) (string-split . bg30ba) (bytevector-for-each . bg30b9) (string->regexp . bg30b8) (rxmatch . bg30b7) (regexp-replace-all . bg30b6) (hashtable-for-each . bg30b5) (mosh-cache-dir . bg59b) (call-process . bg30b4) (local-tz-offset . bg30b3) (microseconds . bg30b2) (directory-list . bg30b1) (set-current-directory! . bg30b0) (expand-path . bg30af) (current-directory . bg30ae) (%spawn . bg30ad) (%waitpid . bg30ac) (simple-struct-name . bg30ab) (simple-struct-set! . bg30aa) (simple-struct-ref . bg30a9) (make-simple-struct . bg30a8) (simple-struct? . bg30a7) (pointer-ref-c-int64 . bg30a6) (pointer-ref-c-int32 . bg30a5) (pointer-ref-c-int16 . bg30a4) (pointer-ref-c-int8 . bg30a3) (pointer-ref-c-uint64 . bg30a2) (pointer-ref-c-uint32 . bg30a1) (pointer-ref-c-uint16 . bg30a0) (pointer-ref-c-uint8 . bg309f) (pointer-set-c-uint64! . bg309e) (pointer-set-c-uint32! . bg309d) (pointer-set-c-uint16! . bg309c) (pointer-set-c-uint8! . bg309b) (pointer-set-c-int64! . bg309a) (pointer-set-c-int32! . bg3099) (pointer-set-c-int16! . bg3098) (pointer-set-c-int8! . bg3097) (pointer-set-c-pointer! . bg3096) (pointer-set-c-double! . bg3095) (pointer-set-c-float! . bg3094) (pointer-set-c-long-long! . bg3093) (pointer-set-c-long! . bg3092) (pointer-set-c-int! . bg3091) (pointer-set-c-short! . bg3090) (pointer-set-c-char! . bg308f) (pointer-ref-c-pointer . bg308e) (pointer-ref-c-double . bg308d) (pointer-ref-c-float . bg308c) (pointer-ref-c-unsigned-long-long . bg308b) (pointer-ref-c-signed-long-long . bg308a) (pointer-ref-c-unsigned-long . bg3089) (pointer-ref-c-signed-long . bg3088) (pointer-ref-c-unsigned-int . bg3087) (pointer-ref-c-signed-int . bg3086) (pointer-ref-c-unsigned-short . bg3085) (pointer-ref-c-signed-short . bg3084) (pointer-ref-c-unsigned-char . bg3083) (pointer-ref-c-signed-char . bg3082) (pointer->integer . bg3081) (integer->pointer . bg3080) (pointer? . bg307f) (shared-errno . bg307e) (%ffi-free . bg307d) (%ffi-malloc . bg307c) (%ffi-supported? . bg307b) (%ffi-pointer->string . bg307a) (%ffi-call->string-or-zero . bg3079) (%ffi-call->double . bg3078) (%ffi-call->void* . bg3077) (%ffi-call->void . bg3076) (%ffi-call->char . bg3075) (%ffi-call->int . bg3074) (%ffi-lookup . bg3073) (%ffi-open . bg3072) (%fork . bg3071) (%pipe . bg3070) (p . bg306f) (open-output-string . bg306e) (get-output-string . bg306d) (file-stat-ctime . bg306c) (file-stat-atime . bg306b) (file-stat-mtime . bg306a) (file-size-in-bytes . bg3069) (file-writable? . bg3068) (file-executable? . bg3067) (file-readable? . bg3066) (file-regular? . bg3065) (file-symbolic-link? . bg3064) (file-directory? . bg3063) (create-symbolic-link . bg3062) (rename-file . bg3061) (delete-directory . bg3060) (create-directory . bg305f) (create-mosh-cache-dir . bg305e) (get-environment-variables . bg305d) (get-environment-variable . bg305c) (join-wraps . bg305b) (id->real-label . bg305a) (same-marks? . bg3059) (same-marks*? . bg3058) (get-timeofday . bg3057) (get-command-line . bg3056) (sys-display . bg3055) (whereis . bg3054) (register . bg3053) (vm-join! . bg3052) (vm-set-value! . bg3051) (vm? . bg3050) (main-vm? . bg304f) (vm-eval . bg304e) (vm-self . bg304d) (vm-start! . bg304c) (make-vm . bg304b) (mutex-try-lock! . bg304a) (mutex-unlock! . bg3049) (mutex-lock! . bg3048) (mutex? . bg3047) (make-mutex . bg3046) (condition-variable-notify-all! . bg3045) (condition-variable-notify! . bg3044) (condition-variable-wait! . bg3043) (make-condition-variable . bg3042) (mosh-executable-path . bg3041) (make-file-options . bg3040) (source-info . bg303f) (make-compiler-instruction . bg303e) (make-instruction . bg303d) (set-source-info! . bg303c) (bignum? . bg303b) (fast-equal? . bg303a) (fasl-read . bg3039) (fasl-write . bg3038) (time-usage . bg3037) (os-constant . bg3036) (make-parameter . bg599) (socket-port . bg3035) (socket-shutdown . bg3034) (socket-close . bg3033) (socket-send . bg3032) (socket-recv! . bg3031) (socket-recv . bg3030) (make-server-socket . bg302f) (make-client-socket . bg302e) (socket-accept . bg302d) (socket? . bg302c) (string-upcase . bg302b) (string-titlecase . bg302a) (string-normalize-nfkd . bg3029) (string-normalize-nfkc . bg3028) (string-normalize-nfd . bg3027) (string-normalize-nfc . bg3026) (string-foldcase . bg3025) (string-downcase . bg3024) (string-ci>? . bg3023) (string-ci>=? . bg3022) (string-ci=? . bg3021) (string-ci<? . bg3020) (string-ci<=? . bg301f) (char-whitespace? . bg301e) (char-upper-case? . bg301d) (char-title-case? . bg301c) (char-numeric? . bg301b) (char-lower-case? . bg301a) (char-general-category . bg3019) (char-upcase . bg3018) (char-titlecase . bg3017) (char-foldcase . bg3016) (char-downcase . bg3015) (char-ci>? . bg3014) (char-ci>=? . bg3013) (char-ci=? . bg3012) (char-ci<? . bg3011) (char-ci<=? . bg3010) (char-alphabetic? . bg300f) (make-variable-transformer . bgb8d) (identifier? . bge42) (generate-temporaries . bge2e) (free-identifier=? . bge30) (syntax->datum . bge46) (datum->syntax . bge44) (bound-identifier=? . bge32) (record-type-descriptor? . bg300e) (record-predicate . bg300d) (record-mutator . bg300c) (record-constructor . bg300b) (record-accessor . bg300a) (make-record-type-descriptor . bg3009) (make-record-constructor-descriptor . bg3008) (record? . bg3007) (record-type-uid . bg3006) (record-type-sealed? . bg3005) (record-type-parent . bg3004) (record-type-opaque? . bg3003) (record-type-name . bg3002) (record-type-generative? . bg3001) (record-type-field-names . bg3000) (record-rtd . bg2fff) (record-field-mutable? . bg2ffe) (delete-file . bg2ffd) (file-exists? . bg2ffc) (vector-sort! . bg2ffb) (vector-sort . bg2ffa) (list-sort . bg2ff9) (symbol-hash . bg2ff8) (string-ci-hash . bg2ff7) (string-hash . bg2ff6) (equal-hash . bg2ff5) (hashtable-equivalence-function . bg2ff4) (make-hashtable . bg2ff3) (hashtable-hash-function . bg2ff2) (make-eqv-hashtable . bg2ff1) (make-eq-hashtable . bg2ff0) (hashtable? . bg2fef) (hashtable-update! . bg2fee) (hashtable-size . bg2fed) (hashtable-set! . bg2fec) (hashtable-ref . bg2feb) (hashtable-mutable? . bg2fea) (hashtable-keys . bg2fe9) (hashtable-entries . bg2fe8) (hashtable-delete! . bg2fe7) (hashtable-copy . bg2fe6) (hashtable-contains? . bg2fe5) (hashtable-clear! . bg2fe4) (call-with-output-file . bg2fe3) (call-with-input-file . bg2fe2) (write-char . bg2fe1) (write . bg2fe0) (with-output-to-file . bg2fdf) (with-input-from-file . bg2fde) (read-char . bg2fdd) (read . bg2fdc) (peek-char . bg2fdb) (open-output-file . bg2fda) (open-input-file . bg2fd9) (newline . bg2fd8) (display . bg2fd7) (close-output-port . bg2fd6) (close-input-port . bg2fd5) (eof-object? . bg2fd4) (eof-object . bg2fd3) (current-error-port . bg2fd2) (current-output-port . bg2fd1) (current-input-port . bg2fd0) (output-port? . bg2fcf) (input-port? . bg2fce) (utf-8-codec . bg2fcd) (utf-16-codec . bg2fcc) (transcoder-error-handling-mode . bg2fcb) (transcoder-eol-style . bg2fca) (transcoder-codec . bg2fc9) (transcoded-port . bg2fc8) (textual-port? . bg2fc7) (string->bytevector . bg2fc6) (standard-output-port . bg2fc5) (standard-input-port . bg2fc4) (standard-error-port . bg2fc3) (set-port-position! . bg2fc2) (put-u8 . bg2fc1) (put-string . bg2fc0) (put-datum . bg2fbf) (put-char . bg2fbe) (put-bytevector . bg2fbd) (port? . bg2fbc) (port-transcoder . bg2fbb) (port-position . bg2fba) (port-has-set-port-position!? . bg2fb9) (port-has-port-position? . bg2fb8) (port-eof? . bg2fb7) (output-port-buffer-mode . bg2fb6) (open-string-output-port . bg2fb5) (open-string-input-port . bg2fb4) (open-file-output-port . bg2fb3) (open-file-input/output-port . bg2fb2) (open-file-input-port . bg2fb1) (open-bytevector-output-port . bg2fb0) (open-bytevector-input-port . bg2faf) (native-transcoder . bg2fae) (native-eol-style . bg2fad) (make-transcoder . bg2fac) (latin-1-codec . bg2fab) (make-i/o-write-error . bg2a24) (make-i/o-read-error . bg2a0f) (make-i/o-port-error . bg2ac5) (make-i/o-invalid-position-error . bg2a3b) (make-i/o-filename-error . bg2a56) (make-i/o-file-protection-error . bg2a6f) (make-i/o-file-is-read-only-error . bg2a84) (make-i/o-file-does-not-exist-error . bg2aae) (make-i/o-file-already-exists-error . bg2a99) (make-i/o-error . bg29fa) (make-i/o-encoding-error . bg2af5) (make-i/o-decoding-error . bg2ade) (make-custom-textual-output-port . bg2faa) (make-custom-textual-input/output-port . bg2fa9) (make-custom-textual-input-port . bg2fa8) (make-custom-binary-output-port . bg2fa7) (make-custom-binary-input/output-port . bg2fa6) (make-custom-binary-input-port . bg2fa5) (make-bytevector . bg2fa4) (lookahead-u8 . bg2fa3) (lookahead-char . bg2fa2) (i/o-write-error? . bg2a26) (i/o-read-error? . bg2a11) (i/o-port-error? . bg2ac9) (i/o-invalid-position-error? . bg2a3f) (i/o-filename-error? . bg2a5a) (i/o-file-protection-error? . bg2a71) (i/o-file-is-read-only-error? . bg2a86) (i/o-file-does-not-exist-error? . bg2ab0) (i/o-file-already-exists-error? . bg2a9b) (i/o-error? . bg29fc) (i/o-error-position . bg2a41) (i/o-error-port . bg2acb) (i/o-error-filename . bg2a5c) (i/o-encoding-error? . bg2af9) (i/o-encoding-error-char . bg2afb) (i/o-decoding-error? . bg2ae0) (get-u8 . bg2fa1) (get-string-n! . bg2fa0) (get-string-n . bg2f9f) (get-string-all . bg2f9e) (get-line . bg2f9d) (get-datum . bg2f9c) (get-char . bg2f9b) (get-bytevector-some . bg2f9a) (get-bytevector-n! . bg2f99) (get-bytevector-n . bg2f98) (get-bytevector-all . bg2f97) (flush-output-port . bg2f96) (close-port . bg2f95) (scheme-report-environment . bge1c) (quotient . bg2f94) (null-environment . bge1a) (remainder . bg2f93) (modulo . bg2f92) (inexact->exact . bg2f91) (force . bg2f90) (exact->inexact . bg2f8f) (make-promise . bg2f8e) (exit . bg2f8d) (command-line . bg2c30) (string-fill! . bg2f8c) (string-set! . bg2f8b) (set-cdr! . bg2f8a) (set-car! . bg2f89) (remove . bg2f88) (remv . bg2f87) (remp . bg2f86) (remq . bg2f85) (partition . bg2f84) (memv . bg2f83) (memq . bg2f82) (memp . bg2f81) (member . bg2f80) (exists . bg2f7f) (for-all . bg2f7e) (fold-right . bg2f7d) (fold-left . bg2f7c) (find . bg2f7b) (filter . bg2f7a) (cons* . bg2f79) (assv . bg2f78) (assq . bg2f77) (assp . bg2f76) (assoc . bg2f75) (call-with-string-output-port . bg2f74) (call-with-port . bg2f73) (call-with-bytevector-output-port . bg2f72) (bytevector->string . bg2f71) (buffer-mode? . bg2f70) (binary-port? . bg2f6f) (with-exception-handler . bg2f6e) (raise-continuable . bg2f6d) (raise . bg2f6c) (eval . bge20) (environment . bge18) (make-enumeration . bg2f6b) (enum-set=? . bg2f6a) (enum-set-universe . bg2f69) (enum-set-union . bg2f68) (enum-set-subset? . bg2f67) (enum-set-projection . bg2f66) (enum-set-member? . bg2f65) (enum-set-intersection . bg2f64) (enum-set-indexer . bg2f63) (enum-set-difference . bg2f62) (enum-set-constructor . bg2f61) (enum-set-complement . bg2f60) (enum-set->list . bg2f5f) (who-condition? . bg2970) (warning? . bg28e8) (violation? . bg2927) (undefined-violation? . bg29e7) (syntax-violation? . bg29ce) (syntax-violation-subform . bg29d2) (syntax-violation-form . bg29d0) (syntax-violation . bge40) (simple-conditions . bg2f5e) (serious-condition? . bg28fd) (non-continuable-violation? . bg2987) (message-condition? . bg28d1) (make-who-condition . bg296c) (make-warning . bg28e6) (make-violation . bg2925) (make-undefined-violation . bg29e5) (make-syntax-violation . bg29c8) (make-serious-condition . bg28fb) (make-non-continuable-violation . bg2985) (make-message-condition . bg28cd) (make-lexical-violation . bg29af) (make-irritants-condition . bg2951) (make-implementation-restriction-violation . bg299a) (make-error . bg2910) (make-assertion-violation . bg293a) (lexical-violation? . bg29b1) (irritants-condition? . bg2955) (implementation-restriction-violation? . bg299c) (error? . bg2912) (condition-who . bg2972) (condition-predicate . bg2f5d) (condition-message . bg28d3) (condition-irritants . bg2957) (condition-accessor . bg2f5c) (condition . bg2f5b) (assertion-violation? . bg293c) (condition? . bg2f5a) (utf32->string . bg2f59) (utf16->string . bg2f58) (utf8->string . bg2f57) (uint-list->bytevector . bg2f56) (u8-list->bytevector . bg2f55) (string->utf8 . bg2f54) (string->utf32 . bg2f53) (string->utf16 . bg2f52) (sint-list->bytevector . bg2f51) (native-endianness . bg2f50) (bytevector? . bg2f4f) (bytevector=? . bg2f4e) (bytevector-uint-set! . bg2f4d) (bytevector-uint-ref . bg2f4c) (bytevector-u8-set! . bg2f4b) (bytevector-u8-ref . bg2f4a) (bytevector-u64-set! . bg2f49) (bytevector-u64-ref . bg2f48) (bytevector-u64-native-set! . bg2f47) (bytevector-u64-native-ref . bg2f46) (bytevector-u32-set! . bg2f45) (bytevector-u32-ref . bg2f44) (bytevector-u32-native-set! . bg2f43) (bytevector-u32-native-ref . bg2f42) (bytevector-u16-set! . bg2f41) (bytevector-u16-ref . bg2f40) (bytevector-u16-native-set! . bg2f3f) (bytevector-u16-native-ref . bg2f3e) (bytevector-sint-set! . bg2f3d) (bytevector-sint-ref . bg2f3c) (bytevector-s8-set! . bg2f3b) (bytevector-s8-ref . bg2f3a) (bytevector-s64-set! . bg2f39) (bytevector-s64-ref . bg2f38) (bytevector-s64-native-set! . bg2f37) (bytevector-s64-native-ref . bg2f36) (bytevector-s32-set! . bg2f35) (bytevector-s32-ref . bg2f34) (bytevector-s32-native-set! . bg2f33) (bytevector-s32-native-ref . bg2f32) (bytevector-s16-set! . bg2f31) (bytevector-s16-ref . bg2f30) (bytevector-s16-native-set! . bg2f2f) (bytevector-s16-native-ref . bg2f2e) (bytevector-length . bg2f2d) (bytevector-ieee-single-ref . bg2f2c) (bytevector-ieee-single-set! . bg2f2b) (bytevector-ieee-single-native-set! . bg2f2a) (bytevector-ieee-single-native-ref . bg2f29) (bytevector-ieee-double-set! . bg2f28) (bytevector-ieee-double-ref . bg2f27) (bytevector-ieee-double-native-set! . bg2f26) (bytevector-ieee-double-native-ref . bg2f25) (bytevector-fill! . bg2f24) (bytevector-copy! . bg2f23) (bytevector-copy . bg2f22) (bytevector->uint-list . bg2f21) (bytevector->u8-list . bg2f20) (bytevector->sint-list . bg2f1f) (no-nans-violation? . bg2b25) (no-infinities-violation? . bg2b10) (make-no-nans-violation . bg2b23) (make-no-infinities-violation . bg2b0e) (real->flonum . bg2f1e) (flzero? . bg2f1d) (fltruncate . bg2f1c) (fltan . bg2f1b) (flsqrt . bg2f1a) (flsin . bg2f19) (flround . bg2f18) (flpositive? . bg2f17) (flonum? . bg2f16) (flodd? . bg2f15) (flnumerator . bg2f14) (flnegative? . bg2f13) (flnan? . bg2f12) (flmod0 . bg2f11) (flmod . bg2f10) (flmin . bg2f0f) (flmax . bg2f0e) (fllog . bg2f0d) (flinteger? . bg2f0c) (flinfinite? . bg2f0b) (flfloor . bg2f0a) (flfinite? . bg2f09) (flexpt . bg2f08) (flexp . bg2f07) (fleven? . bg2f06) (fldiv0-and-mod0 . bg2f05) (fldiv0 . bg2f04) (fldiv-and-mod . bg2f03) (fldiv . bg2f02) (fldenominator . bg2f01) (flcos . bg2f00) (flceiling . bg2eff) (flatan . bg2efe) (flasin . bg2efd) (flacos . bg2efc) (flabs . bg2efb) (fl>? . bg2efa) (fl>=? . bg2ef9) (fl=? . bg2ef8) (fl<? . bg2ef7) (fl<=? . bg2ef6) (fl/ . bg2ef5) (fl- . bg2ef4) (fl+ . bg2ef3) (fl* . bg2ef2) (fixnum->flonum . bg2ef1) (fxzero? . bg2ef0) (fxxor . bg2eef) (fxrotate-bit-field . bg2eee) (fxreverse-bit-field . bg2eed) (fxpositive? . bg2eec) (fxodd? . bg2eeb) (fxnot . bg2eea) (fxnegative? . bg2ee9) (fxmod0 . bg2ee8) (fxmod . bg2ee7) (fxmin . bg2ee6) (fxmax . bg2ee5) (fxlength . bg2ee4) (fxior . bg2ee3) (fxif . bg2ee2) (fxfirst-bit-set . bg2ee1) (fxeven? . bg2ee0) (fxdiv0-and-mod0 . bg2edf) (fxdiv0 . bg2ede) (fxdiv-and-mod . bg2edd) (fxdiv . bg2edc) (fxcopy-bit-field . bg2edb) (fxcopy-bit . bg2eda) (fxbit-set? . bg2ed9) (fxbit-field . bg2ed8) (fxbit-count . bg2ed7) (fxarithmetic-shift-right . bg2ed6) (fxarithmetic-shift-left . bg2ed5) (fxarithmetic-shift . bg2ed4) (fxand . bg2ed3) (fx>? . bg2ed2) (fx>=? . bg2ed1) (fx=? . bg2ed0) (fx<? . bg2ecf) (fx<=? . bg2ece) (fx-/carry . bg2ecd) (fx- . bg2ecc) (fx+/carry . bg2ecb) (fx+ . bg2eca) (fx*/carry . bg2ec9) (fx* . bg2ec8) (greatest-fixnum . bg2ec7) (least-fixnum . bg2ec6) (fixnum-width . bg2ec5) (fixnum? . bg2ec4) (bitwise-rotate-bit-field . bg2ec3) (bitwise-reverse-bit-field . bg2ec2) (bitwise-length . bg2ec1) (bitwise-if . bg2ec0) (bitwise-first-bit-set . bg2ebf) (bitwise-copy-bit-field . bg2ebe) (bitwise-copy-bit . bg2ebd) (bitwise-bit-set? . bg2ebc) (bitwise-bit-field . bg2ebb) (bitwise-bit-count . bg2eba) (bitwise-xor . bg2eb9) (bitwise-ior . bg2eb8) (bitwise-and . bg2eb7) (bitwise-not . bg2eb6) (bitwise-arithmetic-shift-right . bg2eb5) (bitwise-arithmetic-shift-left . bg2eb4) (bitwise-arithmetic-shift . bg2eb3) (zero? . bg2eb2) (vector? . bg2eb1) (vector-set! . bg2eb0) (vector-ref . bg2eaf) (vector-map . bg2eae) (vector-length . bg2ead) (vector-for-each . bg2eac) (vector-fill! . bg2eab) (vector->list . bg2eaa) (vector . bg2ea9) (values . bg2ea8) (truncate . bg2ea7) (tan . bg2ea6) (symbol? . bg2ea5) (symbol=? . bg2ea4) (symbol->string . bg2ea3) (substring . bg2ea2) (string? . bg2ea1) (string>? . bg2ea0) (string>=? . bg2e9f) (string=? . bg2e9e) (string<? . bg2e9d) (string<=? . bg2e9c) (string-ref . bg2e9b) (string-length . bg2e9a) (string-for-each . bg2e99) (string-copy . bg2e98) (string-append . bg2e97) (string->symbol . bg2e96) (string->number . bg2e95) (string->list . bg2e94) (string . bg2e93) (sqrt . bg2e92) (sin . bg2e91) (round . bg2e90) (reverse . bg2e8f) (real? . bg2e8e) (real-valued? . bg2e8d) (real-part . bg2e8c) (rationalize . bg2e8b) (rational? . bg2e8a) (rational-valued? . bg2e89) (procedure? . bg2e88) (positive? . bg2e87) (pair? . bg2e86) (odd? . bg2e85) (numerator . bg2e84) (number? . bg2e83) (number->string . bg2e82) (null? . bg2e81) (not . bg2e80) (negative? . bg2e7f) (nan? . bg2e7e) (min . bg2e7d) (max . bg2e7c) (map . bg2e7b) (make-vector . bg2e7a) (make-string . bg2e79) (make-rectangular . bg2e78) (make-polar . bg2e77) (magnitude . bg2e76) (log . bg2e75) (list? . bg2e74) (list-tail . bg2e73) (list-ref . bg2e72) (list->vector . bg2e71) (list->string . bg2e70) (list . bg2e6f) (length . bg2e6e) (lcm . bg2e6d) (integer? . bg2e6c) (integer-valued? . bg2e6b) (integer->char . bg2e6a) (infinite? . bg2e69) (inexact? . bg2e68) (inexact . bg2e67) (imag-part . bg2e66) (gcd . bg2e65) (for-each . bg2e64) (floor . bg2e63) (finite? . bg2e62) (expt . bg2e61) (exp . bg2e60) (exact? . bg2e5f) (exact-integer-sqrt . bg2e5e) (exact . bg2e5d) (even? . bg2e5c) (error . bg2e5b) (eqv? . bg2e5a) (equal? . bg2e59) (eq? . bg2e58) (dynamic-wind . bg2e57) (div0-and-mod0 . bg2e56) (mod0 . bg2e55) (div0 . bg2e54) (div-and-mod . bg2e53) (mod . bg2e52) (div . bg2e51) (denominator . bg2e50) (cos . bg2e4f) (cons . bg2e4e) (complex? . bg2e4d) (char? . bg2e4c) (char>? . bg2e4b) (char>=? . bg2e4a) (char=? . bg2e49) (char<? . bg2e48) (char<=? . bg2e47) (char->integer . bg2e46) (ceiling . bg2e45) (call-with-values . bg2e44) (call/cc . bg2e43) (call-with-current-continuation . bg2e42) (cddddr . bg2e41) (cdddar . bg2e40) (cddadr . bg2e3f) (cddaar . bg2e3e) (cdaddr . bg2e3d) (cdadar . bg2e3c) (cdaadr . bg2e3b) (cdaaar . bg2e3a) (cadddr . bg2e39) (caddar . bg2e38) (cadadr . bg2e37) (cadaar . bg2e36) (caaddr . bg2e35) (caadar . bg2e34) (caaadr . bg2e33) (caaaar . bg2e32) (cdddr . bg2e31) (cddar . bg2e30) (cdadr . bg2e2f) (cdaar . bg2e2e) (caddr . bg2e2d) (cadar . bg2e2c) (caadr . bg2e2b) (caaar . bg2e2a) (cddr . bg2e29) (cdar . bg2e28) (cadr . bg2e27) (caar . bg2e26) (cdr . bg2e25) (car . bg2e24) (boolean? . bg2e23) (boolean=? . bg2e22) (atan . bg2e21) (assertion-violation . bg2e20) (assertion-error . bge3a) (asin . bg2e1f) (apply . bg2e1e) (append . bg2e1d) (angle . bg2e1c) (acos . bg2e1b) (abs . bg2e1a) (/ . bg2e19) (* . bg2e18) (- . bg2e17) (+ . bg2e16) (>= . bg2e15) (> . bg2e14) (= . bg2e13) (<= . bg2e12) (< . bg2e11) (library . bg2e10) (&no-nans . bg2e0f) (&no-infinities . bg2e0e) (&i/o-encoding . bg2e0d) (&i/o-decoding . bg2e0c) (&i/o-port . bg2e0b) (&i/o-file-does-not-exist . bg2e0a) (&i/o-file-already-exists . bg2e09) (&i/o-file-is-read-only . bg2e08) (&i/o-file-protection . bg2e07) (&i/o-filename . bg2e06) (&i/o-invalid-position . bg2e05) (&i/o-write . bg2e04) (&i/o-read . bg2e03) (&i/o . bg2e02) (&undefined . bg2e01) (&syntax . bg2e00) (&lexical . bg2dff) (&implementation-restriction . bg2dfe) (&non-continuable . bg2dfd) (&who . bg2dfc) (&irritants . bg2dfb) (&assertion . bg2dfa) (&violation . bg2df9) (&error . bg2df8) (&serious . bg2df7) (&warning . bg2df6) (&message . bg2df5) (&condition . bg2df4) (define-condition-type . bg2df3) (define-enumeration . bg2df2) (define-record-type . bg2df1) (parent-rtd . bg2df0) (nongenerative . bg2def) (opaque . bg2dee) (sealed . bg2ded) (protocol . bg2dec) (parent . bg2deb) (immutable . bg2dea) (mutable . bg2de9) (fields . bg2de8) (error-handling-mode . bg2de7) (file-options . bg2de6) (buffer-mode . bg2de5) (eol-style . bg2de4) (guard . bg2de3) (trace-define . bg2de2) (trace-lambda . bg2de1) (unsyntax-splicing . bg2de0) (unsyntax . bg2ddf) (unquote-splicing . bg2dde) (unquote . bg2ddd) (_ . bg2ddc) (else . bg2ddb) (=> . bg2dda) (... . bg2dd9) (assert . bg2dd8) (endianness . bg2dd7) (delay . bg2dd6) (time . bg2dd5) (do . bg2dd4) (cond . bg2dd3) (let* . bg2dd2) (let . bg2dd1) (let*-values . bg2dd0) (let-values . bg2dcf) (identifier-syntax . bg2dce) (with-syntax . bg2dcd) (quasisyntax . bg2dcc) (quasiquote . bg2dcb) (syntax-rules . bg2dca) (include . bg2dc9) (define-struct . bg2dc8) (record-constructor-descriptor . bg2dc7) (record-type-descriptor . bg2dc6) (case . bg2dc5) (parameterize . bg2dc4) (unless . bg2dc3) (when . bg2dc2) (or . bg2dc1) (and . bg2dc0) (if . bg2dbf) (letrec* . bg2dbe) (letrec . bg2dbd) (type-descriptor . bg2dbc) (case-lambda . bg2dbb) (lambda . bg2dba) (syntax . bg2db9) (syntax-case . bg2db8) (quote . bg2db7) (foreign-call . bg2db6) (letrec-syntax . bg2db5) (let-syntax . bg2db4) (set! . bg2db3) (import . bg2db2) (begin . bg2db1) (module . bg2db0) (define-syntax . bg2daf) (define . bg2dae)) '((bg2b29 core-prim . &no-nans-rcd) (bg2b27 core-prim . &no-nans-rtd) (bg2b14 core-prim . &no-infinities-rcd) (bg2b12 core-prim . &no-infinities-rtd) (bg2aff core-prim . &i/o-encoding-rcd) (bg2afd core-prim . &i/o-encoding-rtd) (bg2ae4 core-prim . &i/o-decoding-rcd) (bg2ae2 core-prim . &i/o-decoding-rtd) (bg2acf core-prim . &i/o-port-rcd) (bg2acd core-prim . &i/o-port-rtd) (bg2ab4 core-prim . &i/o-file-does-not-exist-rcd) (bg2ab2 core-prim . &i/o-file-does-not-exist-rtd) (bg2a9f core-prim . &i/o-file-already-exists-rcd) (bg2a9d core-prim . &i/o-file-already-exists-rtd) (bg2a8a core-prim . &i/o-file-is-read-only-rcd) (bg2a88 core-prim . &i/o-file-is-read-only-rtd) (bg2a75 core-prim . &i/o-file-protection-rcd) (bg2a73 core-prim . &i/o-file-protection-rtd) (bg2a60 core-prim . &i/o-filename-rcd) (bg2a5e core-prim . &i/o-filename-rtd) (bg2a45 core-prim . &i/o-invalid-position-rcd) (bg2a43 core-prim . &i/o-invalid-position-rtd) (bg2a2a core-prim . &i/o-write-rcd) (bg2a28 core-prim . &i/o-write-rtd) (bg2a15 core-prim . &i/o-read-rcd) (bg2a13 core-prim . &i/o-read-rtd) (bg2a00 core-prim . &i/o-rcd) (bg29fe core-prim . &i/o-rtd) (bg29eb core-prim . &undefined-rcd) (bg29e9 core-prim . &undefined-rtd) (bg29d6 core-prim . &syntax-rcd) (bg29d4 core-prim . &syntax-rtd) (bg29b5 core-prim . &lexical-rcd) (bg29b3 core-prim . &lexical-rtd) (bg29a0 core-prim . &implementation-restriction-rcd) (bg299e core-prim . &implementation-restriction-rtd) (bg298b core-prim . &non-continuable-rcd) (bg2989 core-prim . &non-continuable-rtd) (bg2976 core-prim . &who-rcd) (bg2974 core-prim . &who-rtd) (bg295b core-prim . &irritants-rcd) (bg2959 core-prim . &irritants-rtd) (bg2940 core-prim . &assertion-rcd) (bg293e core-prim . &assertion-rtd) (bg292b core-prim . &violation-rcd) (bg2929 core-prim . &violation-rtd) (bg2916 core-prim . &error-rcd) (bg2914 core-prim . &error-rtd) (bg2901 core-prim . &serious-rcd) (bg28ff core-prim . &serious-rtd) (bg28ec core-prim . &warning-rcd) (bg28ea core-prim . &warning-rtd) (bg28d7 core-prim . &message-rcd) (bg28d5 core-prim . &message-rtd) (bg2878 core-prim . &condition-rcd) (bg2876 core-prim . &condition-rtd) (bge3c core-prim . syntax-error) (bgd60 core-prim . syntax-dispatch) (bg30d3 core-prim . pretty-print) (bg30d2 core-prim . eval-core) (bg30d1 core-prim . set-symbol-value!) (bg30d0 core-prim . symbol-value) (bg30cf core-prim . gensym) (bg30ce core-prim . void) (bg2c36 core-prim . load) (bge4c core-prim . interaction-environment) (bg30cd core-prim . char-ready?) (bg30cc core-prim . regexp?) (bg30cb core-prim . read-line) (bg30ca core-prim . gensym-prefix-set!) (bg30c9 core-prim . ungensym) (bg30c8 core-prim . alist->eq-hash-table) (bg30c7 core-prim . assoc-ref) (bg30c6 core-prim . print) (bg30c5 core-prim . format) (bg30c4 core-prim . host-os) (bg7b0 core-prim . library-path) (bg30c3 core-prim . standard-library-path) (bg30c2 core-prim . file-newer?) (bg30c1 core-prim . stat-mtime) (bg30c0 core-prim . write-to-file) (bg30bf core-prim . file->list) (bg30be core-prim . file->string) (bg30bd core-prim . digit->integer) (bg30bc core-prim . call-with-string-input-port) (bg30bb core-prim . call-with-string-io) (bg30ba core-prim . string-split) (bg30b9 core-prim . bytevector-for-each) (bg30b8 core-prim . string->regexp) (bg30b7 core-prim . rxmatch) (bg30b6 core-prim . regexp-replace-all) (bg30b5 core-prim . hashtable-for-each) (bg59b core-prim . mosh-cache-dir) (bg30b4 core-prim . call-process) (bg30b3 core-prim . local-tz-offset) (bg30b2 core-prim . microseconds) (bg30b1 core-prim . directory-list) (bg30b0 core-prim . set-current-directory!) (bg30af core-prim . expand-path) (bg30ae core-prim . current-directory) (bg30ad core-prim . %spawn) (bg30ac core-prim . %waitpid) (bg30ab core-prim . simple-struct-name) (bg30aa core-prim . simple-struct-set!) (bg30a9 core-prim . simple-struct-ref) (bg30a8 core-prim . make-simple-struct) (bg30a7 core-prim . simple-struct?) (bg30a6 core-prim . pointer-ref-c-int64) (bg30a5 core-prim . pointer-ref-c-int32) (bg30a4 core-prim . pointer-ref-c-int16) (bg30a3 core-prim . pointer-ref-c-int8) (bg30a2 core-prim . pointer-ref-c-uint64) (bg30a1 core-prim . pointer-ref-c-uint32) (bg30a0 core-prim . pointer-ref-c-uint16) (bg309f core-prim . pointer-ref-c-uint8) (bg309e core-prim . pointer-set-c-uint64!) (bg309d core-prim . pointer-set-c-uint32!) (bg309c core-prim . pointer-set-c-uint16!) (bg309b core-prim . pointer-set-c-uint8!) (bg309a core-prim . pointer-set-c-int64!) (bg3099 core-prim . pointer-set-c-int32!) (bg3098 core-prim . pointer-set-c-int16!) (bg3097 core-prim . pointer-set-c-int8!) (bg3096 core-prim . pointer-set-c-pointer!) (bg3095 core-prim . pointer-set-c-double!) (bg3094 core-prim . pointer-set-c-float!) (bg3093 core-prim . pointer-set-c-long-long!) (bg3092 core-prim . pointer-set-c-long!) (bg3091 core-prim . pointer-set-c-int!) (bg3090 core-prim . pointer-set-c-short!) (bg308f core-prim . pointer-set-c-char!) (bg308e core-prim . pointer-ref-c-pointer) (bg308d core-prim . pointer-ref-c-double) (bg308c core-prim . pointer-ref-c-float) (bg308b core-prim . pointer-ref-c-unsigned-long-long) (bg308a core-prim . pointer-ref-c-signed-long-long) (bg3089 core-prim . pointer-ref-c-unsigned-long) (bg3088 core-prim . pointer-ref-c-signed-long) (bg3087 core-prim . pointer-ref-c-unsigned-int) (bg3086 core-prim . pointer-ref-c-signed-int) (bg3085 core-prim . pointer-ref-c-unsigned-short) (bg3084 core-prim . pointer-ref-c-signed-short) (bg3083 core-prim . pointer-ref-c-unsigned-char) (bg3082 core-prim . pointer-ref-c-signed-char) (bg3081 core-prim . pointer->integer) (bg3080 core-prim . integer->pointer) (bg307f core-prim . pointer?) (bg307e core-prim . shared-errno) (bg307d core-prim . %ffi-free) (bg307c core-prim . %ffi-malloc) (bg307b core-prim . %ffi-supported?) (bg307a core-prim . %ffi-pointer->string) (bg3079 core-prim . %ffi-call->string-or-zero) (bg3078 core-prim . %ffi-call->double) (bg3077 core-prim . %ffi-call->void*) (bg3076 core-prim . %ffi-call->void) (bg3075 core-prim . %ffi-call->char) (bg3074 core-prim . %ffi-call->int) (bg3073 core-prim . %ffi-lookup) (bg3072 core-prim . %ffi-open) (bg3071 core-prim . %fork) (bg3070 core-prim . %pipe) (bg306f core-prim . p) (bg306e core-prim . open-output-string) (bg306d core-prim . get-output-string) (bg306c core-prim . file-stat-ctime) (bg306b core-prim . file-stat-atime) (bg306a core-prim . file-stat-mtime) (bg3069 core-prim . file-size-in-bytes) (bg3068 core-prim . file-writable?) (bg3067 core-prim . file-executable?) (bg3066 core-prim . file-readable?) (bg3065 core-prim . file-regular?) (bg3064 core-prim . file-symbolic-link?) (bg3063 core-prim . file-directory?) (bg3062 core-prim . create-symbolic-link) (bg3061 core-prim . rename-file) (bg3060 core-prim . delete-directory) (bg305f core-prim . create-directory) (bg305e core-prim . create-mosh-cache-dir) (bg305d core-prim . get-environment-variables) (bg305c core-prim . get-environment-variable) (bg305b core-prim . join-wraps) (bg305a core-prim . id->real-label) (bg3059 core-prim . same-marks?) (bg3058 core-prim . same-marks*?) (bg3057 core-prim . get-timeofday) (bg3056 core-prim . get-command-line) (bg3055 core-prim . sys-display) (bg3054 core-prim . whereis) (bg3053 core-prim . register) (bg3052 core-prim . vm-join!) (bg3051 core-prim . vm-set-value!) (bg3050 core-prim . vm?) (bg304f core-prim . main-vm?) (bg304e core-prim . vm-eval) (bg304d core-prim . vm-self) (bg304c core-prim . vm-start!) (bg304b core-prim . make-vm) (bg304a core-prim . mutex-try-lock!) (bg3049 core-prim . mutex-unlock!) (bg3048 core-prim . mutex-lock!) (bg3047 core-prim . mutex?) (bg3046 core-prim . make-mutex) (bg3045 core-prim . condition-variable-notify-all!) (bg3044 core-prim . condition-variable-notify!) (bg3043 core-prim . condition-variable-wait!) (bg3042 core-prim . make-condition-variable) (bg3041 core-prim . mosh-executable-path) (bg3040 core-prim . make-file-options) (bg303f core-prim . source-info) (bg303e core-prim . make-compiler-instruction) (bg303d core-prim . make-instruction) (bg303c core-prim . set-source-info!) (bg303b core-prim . bignum?) (bg303a core-prim . fast-equal?) (bg3039 core-prim . fasl-read) (bg3038 core-prim . fasl-write) (bg3037 core-prim . time-usage) (bg3036 core-prim . os-constant) (bg599 core-prim . make-parameter) (bg3035 core-prim . socket-port) (bg3034 core-prim . socket-shutdown) (bg3033 core-prim . socket-close) (bg3032 core-prim . socket-send) (bg3031 core-prim . socket-recv!) (bg3030 core-prim . socket-recv) (bg302f core-prim . make-server-socket) (bg302e core-prim . make-client-socket) (bg302d core-prim . socket-accept) (bg302c core-prim . socket?) (bg302b core-prim . string-upcase) (bg302a core-prim . string-titlecase) (bg3029 core-prim . string-normalize-nfkd) (bg3028 core-prim . string-normalize-nfkc) (bg3027 core-prim . string-normalize-nfd) (bg3026 core-prim . string-normalize-nfc) (bg3025 core-prim . string-foldcase) (bg3024 core-prim . string-downcase) (bg3023 core-prim . string-ci>?) (bg3022 core-prim . string-ci>=?) (bg3021 core-prim . string-ci=?) (bg3020 core-prim . string-ci<?) (bg301f core-prim . string-ci<=?) (bg301e core-prim . char-whitespace?) (bg301d core-prim . char-upper-case?) (bg301c core-prim . char-title-case?) (bg301b core-prim . char-numeric?) (bg301a core-prim . char-lower-case?) (bg3019 core-prim . char-general-category) (bg3018 core-prim . char-upcase) (bg3017 core-prim . char-titlecase) (bg3016 core-prim . char-foldcase) (bg3015 core-prim . char-downcase) (bg3014 core-prim . char-ci>?) (bg3013 core-prim . char-ci>=?) (bg3012 core-prim . char-ci=?) (bg3011 core-prim . char-ci<?) (bg3010 core-prim . char-ci<=?) (bg300f core-prim . char-alphabetic?) (bgb8d core-prim . make-variable-transformer) (bge42 core-prim . identifier?) (bge2e core-prim . generate-temporaries) (bge30 core-prim . free-identifier=?) (bge46 core-prim . syntax->datum) (bge44 core-prim . datum->syntax) (bge32 core-prim . bound-identifier=?) (bg300e core-prim . record-type-descriptor?) (bg300d core-prim . record-predicate) (bg300c core-prim . record-mutator) (bg300b core-prim . record-constructor) (bg300a core-prim . record-accessor) (bg3009 core-prim . make-record-type-descriptor) (bg3008 core-prim . make-record-constructor-descriptor) (bg3007 core-prim . record?) (bg3006 core-prim . record-type-uid) (bg3005 core-prim . record-type-sealed?) (bg3004 core-prim . record-type-parent) (bg3003 core-prim . record-type-opaque?) (bg3002 core-prim . record-type-name) (bg3001 core-prim . record-type-generative?) (bg3000 core-prim . record-type-field-names) (bg2fff core-prim . record-rtd) (bg2ffe core-prim . record-field-mutable?) (bg2ffd core-prim . delete-file) (bg2ffc core-prim . file-exists?) (bg2ffb core-prim . vector-sort!) (bg2ffa core-prim . vector-sort) (bg2ff9 core-prim . list-sort) (bg2ff8 core-prim . symbol-hash) (bg2ff7 core-prim . string-ci-hash) (bg2ff6 core-prim . string-hash) (bg2ff5 core-prim . equal-hash) (bg2ff4 core-prim . hashtable-equivalence-function) (bg2ff3 core-prim . make-hashtable) (bg2ff2 core-prim . hashtable-hash-function) (bg2ff1 core-prim . make-eqv-hashtable) (bg2ff0 core-prim . make-eq-hashtable) (bg2fef core-prim . hashtable?) (bg2fee core-prim . hashtable-update!) (bg2fed core-prim . hashtable-size) (bg2fec core-prim . hashtable-set!) (bg2feb core-prim . hashtable-ref) (bg2fea core-prim . hashtable-mutable?) (bg2fe9 core-prim . hashtable-keys) (bg2fe8 core-prim . hashtable-entries) (bg2fe7 core-prim . hashtable-delete!) (bg2fe6 core-prim . hashtable-copy) (bg2fe5 core-prim . hashtable-contains?) (bg2fe4 core-prim . hashtable-clear!) (bg2fe3 core-prim . call-with-output-file) (bg2fe2 core-prim . call-with-input-file) (bg2fe1 core-prim . write-char) (bg2fe0 core-prim . write) (bg2fdf core-prim . with-output-to-file) (bg2fde core-prim . with-input-from-file) (bg2fdd core-prim . read-char) (bg2fdc core-prim . read) (bg2fdb core-prim . peek-char) (bg2fda core-prim . open-output-file) (bg2fd9 core-prim . open-input-file) (bg2fd8 core-prim . newline) (bg2fd7 core-prim . display) (bg2fd6 core-prim . close-output-port) (bg2fd5 core-prim . close-input-port) (bg2fd4 core-prim . eof-object?) (bg2fd3 core-prim . eof-object) (bg2fd2 core-prim . current-error-port) (bg2fd1 core-prim . current-output-port) (bg2fd0 core-prim . current-input-port) (bg2fcf core-prim . output-port?) (bg2fce core-prim . input-port?) (bg2fcd core-prim . utf-8-codec) (bg2fcc core-prim . utf-16-codec) (bg2fcb core-prim . transcoder-error-handling-mode) (bg2fca core-prim . transcoder-eol-style) (bg2fc9 core-prim . transcoder-codec) (bg2fc8 core-prim . transcoded-port) (bg2fc7 core-prim . textual-port?) (bg2fc6 core-prim . string->bytevector) (bg2fc5 core-prim . standard-output-port) (bg2fc4 core-prim . standard-input-port) (bg2fc3 core-prim . standard-error-port) (bg2fc2 core-prim . set-port-position!) (bg2fc1 core-prim . put-u8) (bg2fc0 core-prim . put-string) (bg2fbf core-prim . put-datum) (bg2fbe core-prim . put-char) (bg2fbd core-prim . put-bytevector) (bg2fbc core-prim . port?) (bg2fbb core-prim . port-transcoder) (bg2fba core-prim . port-position) (bg2fb9 core-prim . port-has-set-port-position!?) (bg2fb8 core-prim . port-has-port-position?) (bg2fb7 core-prim . port-eof?) (bg2fb6 core-prim . output-port-buffer-mode) (bg2fb5 core-prim . open-string-output-port) (bg2fb4 core-prim . open-string-input-port) (bg2fb3 core-prim . open-file-output-port) (bg2fb2 core-prim . open-file-input/output-port) (bg2fb1 core-prim . open-file-input-port) (bg2fb0 core-prim . open-bytevector-output-port) (bg2faf core-prim . open-bytevector-input-port) (bg2fae core-prim . native-transcoder) (bg2fad core-prim . native-eol-style) (bg2fac core-prim . make-transcoder) (bg2fab core-prim . latin-1-codec) (bg2a24 core-prim . make-i/o-write-error) (bg2a0f core-prim . make-i/o-read-error) (bg2ac5 core-prim . make-i/o-port-error) (bg2a3b core-prim . make-i/o-invalid-position-error) (bg2a56 core-prim . make-i/o-filename-error) (bg2a6f core-prim . make-i/o-file-protection-error) (bg2a84 core-prim . make-i/o-file-is-read-only-error) (bg2aae core-prim . make-i/o-file-does-not-exist-error) (bg2a99 core-prim . make-i/o-file-already-exists-error) (bg29fa core-prim . make-i/o-error) (bg2af5 core-prim . make-i/o-encoding-error) (bg2ade core-prim . make-i/o-decoding-error) (bg2faa core-prim . make-custom-textual-output-port) (bg2fa9 core-prim . make-custom-textual-input/output-port) (bg2fa8 core-prim . make-custom-textual-input-port) (bg2fa7 core-prim . make-custom-binary-output-port) (bg2fa6 core-prim . make-custom-binary-input/output-port) (bg2fa5 core-prim . make-custom-binary-input-port) (bg2fa4 core-prim . make-bytevector) (bg2fa3 core-prim . lookahead-u8) (bg2fa2 core-prim . lookahead-char) (bg2a26 core-prim . i/o-write-error?) (bg2a11 core-prim . i/o-read-error?) (bg2ac9 core-prim . i/o-port-error?) (bg2a3f core-prim . i/o-invalid-position-error?) (bg2a5a core-prim . i/o-filename-error?) (bg2a71 core-prim . i/o-file-protection-error?) (bg2a86 core-prim . i/o-file-is-read-only-error?) (bg2ab0 core-prim . i/o-file-does-not-exist-error?) (bg2a9b core-prim . i/o-file-already-exists-error?) (bg29fc core-prim . i/o-error?) (bg2a41 core-prim . i/o-error-position) (bg2acb core-prim . i/o-error-port) (bg2a5c core-prim . i/o-error-filename) (bg2af9 core-prim . i/o-encoding-error?) (bg2afb core-prim . i/o-encoding-error-char) (bg2ae0 core-prim . i/o-decoding-error?) (bg2fa1 core-prim . get-u8) (bg2fa0 core-prim . get-string-n!) (bg2f9f core-prim . get-string-n) (bg2f9e core-prim . get-string-all) (bg2f9d core-prim . get-line) (bg2f9c core-prim . get-datum) (bg2f9b core-prim . get-char) (bg2f9a core-prim . get-bytevector-some) (bg2f99 core-prim . get-bytevector-n!) (bg2f98 core-prim . get-bytevector-n) (bg2f97 core-prim . get-bytevector-all) (bg2f96 core-prim . flush-output-port) (bg2f95 core-prim . close-port) (bge1c core-prim . scheme-report-environment) (bg2f94 core-prim . quotient) (bge1a core-prim . null-environment) (bg2f93 core-prim . remainder) (bg2f92 core-prim . modulo) (bg2f91 core-prim . inexact->exact) (bg2f90 core-prim . force) (bg2f8f core-prim . exact->inexact) (bg2f8e core-prim . make-promise) (bg2f8d core-prim . exit) (bg2c30 core-prim . command-line) (bg2f8c core-prim . string-fill!) (bg2f8b core-prim . string-set!) (bg2f8a core-prim . set-cdr!) (bg2f89 core-prim . set-car!) (bg2f88 core-prim . remove) (bg2f87 core-prim . remv) (bg2f86 core-prim . remp) (bg2f85 core-prim . remq) (bg2f84 core-prim . partition) (bg2f83 core-prim . memv) (bg2f82 core-prim . memq) (bg2f81 core-prim . memp) (bg2f80 core-prim . member) (bg2f7f core-prim . exists) (bg2f7e core-prim . for-all) (bg2f7d core-prim . fold-right) (bg2f7c core-prim . fold-left) (bg2f7b core-prim . find) (bg2f7a core-prim . filter) (bg2f79 core-prim . cons*) (bg2f78 core-prim . assv) (bg2f77 core-prim . assq) (bg2f76 core-prim . assp) (bg2f75 core-prim . assoc) (bg2f74 core-prim . call-with-string-output-port) (bg2f73 core-prim . call-with-port) (bg2f72 core-prim . call-with-bytevector-output-port) (bg2f71 core-prim . bytevector->string) (bg2f70 core-prim . buffer-mode?) (bg2f6f core-prim . binary-port?) (bg2f6e core-prim . with-exception-handler) (bg2f6d core-prim . raise-continuable) (bg2f6c core-prim . raise) (bge20 core-prim . eval) (bge18 core-prim . environment) (bg2f6b core-prim . make-enumeration) (bg2f6a core-prim . enum-set=?) (bg2f69 core-prim . enum-set-universe) (bg2f68 core-prim . enum-set-union) (bg2f67 core-prim . enum-set-subset?) (bg2f66 core-prim . enum-set-projection) (bg2f65 core-prim . enum-set-member?) (bg2f64 core-prim . enum-set-intersection) (bg2f63 core-prim . enum-set-indexer) (bg2f62 core-prim . enum-set-difference) (bg2f61 core-prim . enum-set-constructor) (bg2f60 core-prim . enum-set-complement) (bg2f5f core-prim . enum-set->list) (bg2970 core-prim . who-condition?) (bg28e8 core-prim . warning?) (bg2927 core-prim . violation?) (bg29e7 core-prim . undefined-violation?) (bg29ce core-prim . syntax-violation?) (bg29d2 core-prim . syntax-violation-subform) (bg29d0 core-prim . syntax-violation-form) (bge40 core-prim . syntax-violation) (bg2f5e core-prim . simple-conditions) (bg28fd core-prim . serious-condition?) (bg2987 core-prim . non-continuable-violation?) (bg28d1 core-prim . message-condition?) (bg296c core-prim . make-who-condition) (bg28e6 core-prim . make-warning) (bg2925 core-prim . make-violation) (bg29e5 core-prim . make-undefined-violation) (bg29c8 core-prim . make-syntax-violation) (bg28fb core-prim . make-serious-condition) (bg2985 core-prim . make-non-continuable-violation) (bg28cd core-prim . make-message-condition) (bg29af core-prim . make-lexical-violation) (bg2951 core-prim . make-irritants-condition) (bg299a core-prim . make-implementation-restriction-violation) (bg2910 core-prim . make-error) (bg293a core-prim . make-assertion-violation) (bg29b1 core-prim . lexical-violation?) (bg2955 core-prim . irritants-condition?) (bg299c core-prim . implementation-restriction-violation?) (bg2912 core-prim . error?) (bg2972 core-prim . condition-who) (bg2f5d core-prim . condition-predicate) (bg28d3 core-prim . condition-message) (bg2957 core-prim . condition-irritants) (bg2f5c core-prim . condition-accessor) (bg2f5b core-prim . condition) (bg293c core-prim . assertion-violation?) (bg2f5a core-prim . condition?) (bg2f59 core-prim . utf32->string) (bg2f58 core-prim . utf16->string) (bg2f57 core-prim . utf8->string) (bg2f56 core-prim . uint-list->bytevector) (bg2f55 core-prim . u8-list->bytevector) (bg2f54 core-prim . string->utf8) (bg2f53 core-prim . string->utf32) (bg2f52 core-prim . string->utf16) (bg2f51 core-prim . sint-list->bytevector) (bg2f50 core-prim . native-endianness) (bg2f4f core-prim . bytevector?) (bg2f4e core-prim . bytevector=?) (bg2f4d core-prim . bytevector-uint-set!) (bg2f4c core-prim . bytevector-uint-ref) (bg2f4b core-prim . bytevector-u8-set!) (bg2f4a core-prim . bytevector-u8-ref) (bg2f49 core-prim . bytevector-u64-set!) (bg2f48 core-prim . bytevector-u64-ref) (bg2f47 core-prim . bytevector-u64-native-set!) (bg2f46 core-prim . bytevector-u64-native-ref) (bg2f45 core-prim . bytevector-u32-set!) (bg2f44 core-prim . bytevector-u32-ref) (bg2f43 core-prim . bytevector-u32-native-set!) (bg2f42 core-prim . bytevector-u32-native-ref) (bg2f41 core-prim . bytevector-u16-set!) (bg2f40 core-prim . bytevector-u16-ref) (bg2f3f core-prim . bytevector-u16-native-set!) (bg2f3e core-prim . bytevector-u16-native-ref) (bg2f3d core-prim . bytevector-sint-set!) (bg2f3c core-prim . bytevector-sint-ref) (bg2f3b core-prim . bytevector-s8-set!) (bg2f3a core-prim . bytevector-s8-ref) (bg2f39 core-prim . bytevector-s64-set!) (bg2f38 core-prim . bytevector-s64-ref) (bg2f37 core-prim . bytevector-s64-native-set!) (bg2f36 core-prim . bytevector-s64-native-ref) (bg2f35 core-prim . bytevector-s32-set!) (bg2f34 core-prim . bytevector-s32-ref) (bg2f33 core-prim . bytevector-s32-native-set!) (bg2f32 core-prim . bytevector-s32-native-ref) (bg2f31 core-prim . bytevector-s16-set!) (bg2f30 core-prim . bytevector-s16-ref) (bg2f2f core-prim . bytevector-s16-native-set!) (bg2f2e core-prim . bytevector-s16-native-ref) (bg2f2d core-prim . bytevector-length) (bg2f2c core-prim . bytevector-ieee-single-ref) (bg2f2b core-prim . bytevector-ieee-single-set!) (bg2f2a core-prim . bytevector-ieee-single-native-set!) (bg2f29 core-prim . bytevector-ieee-single-native-ref) (bg2f28 core-prim . bytevector-ieee-double-set!) (bg2f27 core-prim . bytevector-ieee-double-ref) (bg2f26 core-prim . bytevector-ieee-double-native-set!) (bg2f25 core-prim . bytevector-ieee-double-native-ref) (bg2f24 core-prim . bytevector-fill!) (bg2f23 core-prim . bytevector-copy!) (bg2f22 core-prim . bytevector-copy) (bg2f21 core-prim . bytevector->uint-list) (bg2f20 core-prim . bytevector->u8-list) (bg2f1f core-prim . bytevector->sint-list) (bg2b25 core-prim . no-nans-violation?) (bg2b10 core-prim . no-infinities-violation?) (bg2b23 core-prim . make-no-nans-violation) (bg2b0e core-prim . make-no-infinities-violation) (bg2f1e core-prim . real->flonum) (bg2f1d core-prim . flzero?) (bg2f1c core-prim . fltruncate) (bg2f1b core-prim . fltan) (bg2f1a core-prim . flsqrt) (bg2f19 core-prim . flsin) (bg2f18 core-prim . flround) (bg2f17 core-prim . flpositive?) (bg2f16 core-prim . flonum?) (bg2f15 core-prim . flodd?) (bg2f14 core-prim . flnumerator) (bg2f13 core-prim . flnegative?) (bg2f12 core-prim . flnan?) (bg2f11 core-prim . flmod0) (bg2f10 core-prim . flmod) (bg2f0f core-prim . flmin) (bg2f0e core-prim . flmax) (bg2f0d core-prim . fllog) (bg2f0c core-prim . flinteger?) (bg2f0b core-prim . flinfinite?) (bg2f0a core-prim . flfloor) (bg2f09 core-prim . flfinite?) (bg2f08 core-prim . flexpt) (bg2f07 core-prim . flexp) (bg2f06 core-prim . fleven?) (bg2f05 core-prim . fldiv0-and-mod0) (bg2f04 core-prim . fldiv0) (bg2f03 core-prim . fldiv-and-mod) (bg2f02 core-prim . fldiv) (bg2f01 core-prim . fldenominator) (bg2f00 core-prim . flcos) (bg2eff core-prim . flceiling) (bg2efe core-prim . flatan) (bg2efd core-prim . flasin) (bg2efc core-prim . flacos) (bg2efb core-prim . flabs) (bg2efa core-prim . fl>?) (bg2ef9 core-prim . fl>=?) (bg2ef8 core-prim . fl=?) (bg2ef7 core-prim . fl<?) (bg2ef6 core-prim . fl<=?) (bg2ef5 core-prim . fl/) (bg2ef4 core-prim . fl-) (bg2ef3 core-prim . fl+) (bg2ef2 core-prim . fl*) (bg2ef1 core-prim . fixnum->flonum) (bg2ef0 core-prim . fxzero?) (bg2eef core-prim . fxxor) (bg2eee core-prim . fxrotate-bit-field) (bg2eed core-prim . fxreverse-bit-field) (bg2eec core-prim . fxpositive?) (bg2eeb core-prim . fxodd?) (bg2eea core-prim . fxnot) (bg2ee9 core-prim . fxnegative?) (bg2ee8 core-prim . fxmod0) (bg2ee7 core-prim . fxmod) (bg2ee6 core-prim . fxmin) (bg2ee5 core-prim . fxmax) (bg2ee4 core-prim . fxlength) (bg2ee3 core-prim . fxior) (bg2ee2 core-prim . fxif) (bg2ee1 core-prim . fxfirst-bit-set) (bg2ee0 core-prim . fxeven?) (bg2edf core-prim . fxdiv0-and-mod0) (bg2ede core-prim . fxdiv0) (bg2edd core-prim . fxdiv-and-mod) (bg2edc core-prim . fxdiv) (bg2edb core-prim . fxcopy-bit-field) (bg2eda core-prim . fxcopy-bit) (bg2ed9 core-prim . fxbit-set?) (bg2ed8 core-prim . fxbit-field) (bg2ed7 core-prim . fxbit-count) (bg2ed6 core-prim . fxarithmetic-shift-right) (bg2ed5 core-prim . fxarithmetic-shift-left) (bg2ed4 core-prim . fxarithmetic-shift) (bg2ed3 core-prim . fxand) (bg2ed2 core-prim . fx>?) (bg2ed1 core-prim . fx>=?) (bg2ed0 core-prim . fx=?) (bg2ecf core-prim . fx<?) (bg2ece core-prim . fx<=?) (bg2ecd core-prim . fx-/carry) (bg2ecc core-prim . fx-) (bg2ecb core-prim . fx+/carry) (bg2eca core-prim . fx+) (bg2ec9 core-prim . fx*/carry) (bg2ec8 core-prim . fx*) (bg2ec7 core-prim . greatest-fixnum) (bg2ec6 core-prim . least-fixnum) (bg2ec5 core-prim . fixnum-width) (bg2ec4 core-prim . fixnum?) (bg2ec3 core-prim . bitwise-rotate-bit-field) (bg2ec2 core-prim . bitwise-reverse-bit-field) (bg2ec1 core-prim . bitwise-length) (bg2ec0 core-prim . bitwise-if) (bg2ebf core-prim . bitwise-first-bit-set) (bg2ebe core-prim . bitwise-copy-bit-field) (bg2ebd core-prim . bitwise-copy-bit) (bg2ebc core-prim . bitwise-bit-set?) (bg2ebb core-prim . bitwise-bit-field) (bg2eba core-prim . bitwise-bit-count) (bg2eb9 core-prim . bitwise-xor) (bg2eb8 core-prim . bitwise-ior) (bg2eb7 core-prim . bitwise-and) (bg2eb6 core-prim . bitwise-not) (bg2eb5 core-prim . bitwise-arithmetic-shift-right) (bg2eb4 core-prim . bitwise-arithmetic-shift-left) (bg2eb3 core-prim . bitwise-arithmetic-shift) (bg2eb2 core-prim . zero?) (bg2eb1 core-prim . vector?) (bg2eb0 core-prim . vector-set!) (bg2eaf core-prim . vector-ref) (bg2eae core-prim . vector-map) (bg2ead core-prim . vector-length) (bg2eac core-prim . vector-for-each) (bg2eab core-prim . vector-fill!) (bg2eaa core-prim . vector->list) (bg2ea9 core-prim . vector) (bg2ea8 core-prim . values) (bg2ea7 core-prim . truncate) (bg2ea6 core-prim . tan) (bg2ea5 core-prim . symbol?) (bg2ea4 core-prim . symbol=?) (bg2ea3 core-prim . symbol->string) (bg2ea2 core-prim . substring) (bg2ea1 core-prim . string?) (bg2ea0 core-prim . string>?) (bg2e9f core-prim . string>=?) (bg2e9e core-prim . string=?) (bg2e9d core-prim . string<?) (bg2e9c core-prim . string<=?) (bg2e9b core-prim . string-ref) (bg2e9a core-prim . string-length) (bg2e99 core-prim . string-for-each) (bg2e98 core-prim . string-copy) (bg2e97 core-prim . string-append) (bg2e96 core-prim . string->symbol) (bg2e95 core-prim . string->number) (bg2e94 core-prim . string->list) (bg2e93 core-prim . string) (bg2e92 core-prim . sqrt) (bg2e91 core-prim . sin) (bg2e90 core-prim . round) (bg2e8f core-prim . reverse) (bg2e8e core-prim . real?) (bg2e8d core-prim . real-valued?) (bg2e8c core-prim . real-part) (bg2e8b core-prim . rationalize) (bg2e8a core-prim . rational?) (bg2e89 core-prim . rational-valued?) (bg2e88 core-prim . procedure?) (bg2e87 core-prim . positive?) (bg2e86 core-prim . pair?) (bg2e85 core-prim . odd?) (bg2e84 core-prim . numerator) (bg2e83 core-prim . number?) (bg2e82 core-prim . number->string) (bg2e81 core-prim . null?) (bg2e80 core-prim . not) (bg2e7f core-prim . negative?) (bg2e7e core-prim . nan?) (bg2e7d core-prim . min) (bg2e7c core-prim . max) (bg2e7b core-prim . map) (bg2e7a core-prim . make-vector) (bg2e79 core-prim . make-string) (bg2e78 core-prim . make-rectangular) (bg2e77 core-prim . make-polar) (bg2e76 core-prim . magnitude) (bg2e75 core-prim . log) (bg2e74 core-prim . list?) (bg2e73 core-prim . list-tail) (bg2e72 core-prim . list-ref) (bg2e71 core-prim . list->vector) (bg2e70 core-prim . list->string) (bg2e6f core-prim . list) (bg2e6e core-prim . length) (bg2e6d core-prim . lcm) (bg2e6c core-prim . integer?) (bg2e6b core-prim . integer-valued?) (bg2e6a core-prim . integer->char) (bg2e69 core-prim . infinite?) (bg2e68 core-prim . inexact?) (bg2e67 core-prim . inexact) (bg2e66 core-prim . imag-part) (bg2e65 core-prim . gcd) (bg2e64 core-prim . for-each) (bg2e63 core-prim . floor) (bg2e62 core-prim . finite?) (bg2e61 core-prim . expt) (bg2e60 core-prim . exp) (bg2e5f core-prim . exact?) (bg2e5e core-prim . exact-integer-sqrt) (bg2e5d core-prim . exact) (bg2e5c core-prim . even?) (bg2e5b core-prim . error) (bg2e5a core-prim . eqv?) (bg2e59 core-prim . equal?) (bg2e58 core-prim . eq?) (bg2e57 core-prim . dynamic-wind) (bg2e56 core-prim . div0-and-mod0) (bg2e55 core-prim . mod0) (bg2e54 core-prim . div0) (bg2e53 core-prim . div-and-mod) (bg2e52 core-prim . mod) (bg2e51 core-prim . div) (bg2e50 core-prim . denominator) (bg2e4f core-prim . cos) (bg2e4e core-prim . cons) (bg2e4d core-prim . complex?) (bg2e4c core-prim . char?) (bg2e4b core-prim . char>?) (bg2e4a core-prim . char>=?) (bg2e49 core-prim . char=?) (bg2e48 core-prim . char<?) (bg2e47 core-prim . char<=?) (bg2e46 core-prim . char->integer) (bg2e45 core-prim . ceiling) (bg2e44 core-prim . call-with-values) (bg2e43 core-prim . call/cc) (bg2e42 core-prim . call-with-current-continuation) (bg2e41 core-prim . cddddr) (bg2e40 core-prim . cdddar) (bg2e3f core-prim . cddadr) (bg2e3e core-prim . cddaar) (bg2e3d core-prim . cdaddr) (bg2e3c core-prim . cdadar) (bg2e3b core-prim . cdaadr) (bg2e3a core-prim . cdaaar) (bg2e39 core-prim . cadddr) (bg2e38 core-prim . caddar) (bg2e37 core-prim . cadadr) (bg2e36 core-prim . cadaar) (bg2e35 core-prim . caaddr) (bg2e34 core-prim . caadar) (bg2e33 core-prim . caaadr) (bg2e32 core-prim . caaaar) (bg2e31 core-prim . cdddr) (bg2e30 core-prim . cddar) (bg2e2f core-prim . cdadr) (bg2e2e core-prim . cdaar) (bg2e2d core-prim . caddr) (bg2e2c core-prim . cadar) (bg2e2b core-prim . caadr) (bg2e2a core-prim . caaar) (bg2e29 core-prim . cddr) (bg2e28 core-prim . cdar) (bg2e27 core-prim . cadr) (bg2e26 core-prim . caar) (bg2e25 core-prim . cdr) (bg2e24 core-prim . car) (bg2e23 core-prim . boolean?) (bg2e22 core-prim . boolean=?) (bg2e21 core-prim . atan) (bg2e20 core-prim . assertion-violation) (bge3a core-prim . assertion-error) (bg2e1f core-prim . asin) (bg2e1e core-prim . apply) (bg2e1d core-prim . append) (bg2e1c core-prim . angle) (bg2e1b core-prim . acos) (bg2e1a core-prim . abs) (bg2e19 core-prim . /) (bg2e18 core-prim . *) (bg2e17 core-prim . -) (bg2e16 core-prim . +) (bg2e15 core-prim . >=) (bg2e14 core-prim . >) (bg2e13 core-prim . =) (bg2e12 core-prim . <=) (bg2e11 core-prim . <) (bg2e10 core-prim . library) (bg2e0f $core-rtd &no-nans-rtd &no-nans-rcd) (bg2e0e $core-rtd &no-infinities-rtd &no-infinities-rcd) (bg2e0d $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bg2e0c $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bg2e0b $core-rtd &i/o-port-rtd &i/o-port-rcd) (bg2e0a $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bg2e09 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bg2e08 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bg2e07 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bg2e06 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bg2e05 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bg2e04 $core-rtd &i/o-write-rtd &i/o-write-rcd) (bg2e03 $core-rtd &i/o-read-rtd &i/o-read-rcd) (bg2e02 $core-rtd &i/o-rtd &i/o-rcd) (bg2e01 $core-rtd &undefined-rtd &undefined-rcd) (bg2e00 $core-rtd &syntax-rtd &syntax-rcd) (bg2dff $core-rtd &lexical-rtd &lexical-rcd) (bg2dfe $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bg2dfd $core-rtd &non-continuable-rtd &non-continuable-rcd) (bg2dfc $core-rtd &who-rtd &who-rcd) (bg2dfb $core-rtd &irritants-rtd &irritants-rcd) (bg2dfa $core-rtd &assertion-rtd &assertion-rcd) (bg2df9 $core-rtd &violation-rtd &violation-rcd) (bg2df8 $core-rtd &error-rtd &error-rcd) (bg2df7 $core-rtd &serious-rtd &serious-rcd) (bg2df6 $core-rtd &warning-rtd &warning-rcd) (bg2df5 $core-rtd &message-rtd &message-rcd) (bg2df4 $core-rtd &condition-rtd &condition-rcd) (bg2df3 macro . define-condition-type) (bg2df2 macro . define-enumeration) (bg2df1 macro . define-record-type) (bg2df0 macro . parent-rtd) (bg2def macro . nongenerative) (bg2dee macro . opaque) (bg2ded macro . sealed) (bg2dec macro . protocol) (bg2deb macro . parent) (bg2dea macro . immutable) (bg2de9 macro . mutable) (bg2de8 macro . fields) (bg2de7 macro . error-handling-mode) (bg2de6 macro . file-options) (bg2de5 macro . buffer-mode) (bg2de4 macro . eol-style) (bg2de3 macro . guard) (bg2de2 macro . trace-define) (bg2de1 macro . trace-lambda) (bg2de0 macro . unsyntax-splicing) (bg2ddf macro . unsyntax) (bg2dde macro . unquote-splicing) (bg2ddd macro . unquote) (bg2ddc macro . _) (bg2ddb macro . else) (bg2dda macro . =>) (bg2dd9 macro . ...) (bg2dd8 macro . assert) (bg2dd7 macro . endianness) (bg2dd6 macro . delay) (bg2dd5 macro . time) (bg2dd4 macro . do) (bg2dd3 macro . cond) (bg2dd2 macro . let*) (bg2dd1 macro . let) (bg2dd0 macro . let*-values) (bg2dcf macro . let-values) (bg2dce macro . identifier-syntax) (bg2dcd macro . with-syntax) (bg2dcc macro . quasisyntax) (bg2dcb macro . quasiquote) (bg2dca macro . syntax-rules) (bg2dc9 macro . include) (bg2dc8 macro . define-struct) (bg2dc7 core-macro . record-constructor-descriptor) (bg2dc6 core-macro . record-type-descriptor) (bg2dc5 macro . case) (bg2dc4 macro . parameterize) (bg2dc3 macro . unless) (bg2dc2 macro . when) (bg2dc1 core-macro . or) (bg2dc0 core-macro . and) (bg2dbf core-macro . if) (bg2dbe core-macro . letrec*) (bg2dbd core-macro . letrec) (bg2dbc core-macro . type-descriptor) (bg2dbb core-macro . case-lambda) (bg2dba core-macro . lambda) (bg2db9 core-macro . syntax) (bg2db8 core-macro . syntax-case) (bg2db7 core-macro . quote) (bg2db6 core-macro . foreign-call) (bg2db5 letrec-syntax) (bg2db4 let-syntax) (bg2db3 set!) (bg2db2 import) (bg2db1 begin) (bg2db0 module) (bg2daf define-syntax) (bg2dae define)) values values '#f '#f '#f '#f) (bg985@bg7d1@install-library 'bg30f4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bg30d3) (eval-core . bg30d2) (set-symbol-value! . bg30d1) (symbol-value . bg30d0) (gensym . bg30cf) (void . bg30ce)) '() values values '#f '#f '#f '#f) (bg985@bg7d1@install-library 'bg30f5 '(mosh) '() '() '() '() '((set-symbol-value! . bg30d1) (symbol-value . bg30d0) (regexp? . bg30cc) (read-line . bg30cb) (ungensym . bg30c9) (alist->eq-hash-table . bg30c8) (assoc-ref . bg30c7) (print . bg30c6) (format . bg30c5) (host-os . bg30c4) (library-path . bg7b0) (standard-library-path . bg30c3) (file-newer? . bg30c2) (stat-mtime . bg30c1) (digit->integer . bg30bd) (call-with-string-input-port . bg30bc) (call-with-string-io . bg30bb) (string-split . bg30ba) (bytevector-for-each . bg30b9) (string->regexp . bg30b8) (rxmatch . bg30b7) (regexp-replace-all . bg30b6) (hashtable-for-each . bg30b5) (set-current-directory! . bg30b0) (expand-path . bg30af) (current-directory . bg30ae) (p . bg306f) (get-timeofday . bg3057) (get-command-line . bg3056) (sys-display . bg3055) (whereis . bg3054) (register . bg3053) (vm-join! . bg3052) (vm-set-value! . bg3051) (vm? . bg3050) (main-vm? . bg304f) (vm-eval . bg304e) (vm-self . bg304d) (vm-start! . bg304c) (make-vm . bg304b) (mutex-try-lock! . bg304a) (mutex-unlock! . bg3049) (mutex-lock! . bg3048) (mutex? . bg3047) (make-mutex . bg3046) (condition-variable-notify-all! . bg3045) (condition-variable-notify! . bg3044) (condition-variable-wait! . bg3043) (make-condition-variable . bg3042) (mosh-executable-path . bg3041) (make-file-options . bg3040) (source-info . bg303f) (make-compiler-instruction . bg303e) (make-instruction . bg303d) (set-source-info! . bg303c) (bignum? . bg303b) (fast-equal? . bg303a) (fasl-read . bg3039) (fasl-write . bg3038) (time-usage . bg3037) (os-constant . bg3036) (time . bg2dd5) (include . bg2dc9)) '() values values '#f '#f '#f '#f) (bg985@bg7d1@install-library 'bg30f6 '(system) '() '() '() '() '((gensym-prefix-set! . bg30ca) (write-to-file . bg30c0) (file->list . bg30bf) (file->string . bg30be) (mosh-cache-dir . bg59b) (call-process . bg30b4) (local-tz-offset . bg30b3) (microseconds . bg30b2) (directory-list . bg30b1) (expand-path . bg30af) (%spawn . bg30ad) (%waitpid . bg30ac) (simple-struct-name . bg30ab) (simple-struct-set! . bg30aa) (simple-struct-ref . bg30a9) (make-simple-struct . bg30a8) (simple-struct? . bg30a7) (pointer-ref-c-int64 . bg30a6) (pointer-ref-c-int32 . bg30a5) (pointer-ref-c-int16 . bg30a4) (pointer-ref-c-int8 . bg30a3) (pointer-ref-c-uint64 . bg30a2) (pointer-ref-c-uint32 . bg30a1) (pointer-ref-c-uint16 . bg30a0) (pointer-ref-c-uint8 . bg309f) (pointer-set-c-uint64! . bg309e) (pointer-set-c-uint32! . bg309d) (pointer-set-c-uint16! . bg309c) (pointer-set-c-uint8! . bg309b) (pointer-set-c-int64! . bg309a) (pointer-set-c-int32! . bg3099) (pointer-set-c-int16! . bg3098) (pointer-set-c-int8! . bg3097) (pointer-set-c-pointer! . bg3096) (pointer-set-c-double! . bg3095) (pointer-set-c-float! . bg3094) (pointer-set-c-long-long! . bg3093) (pointer-set-c-long! . bg3092) (pointer-set-c-int! . bg3091) (pointer-set-c-short! . bg3090) (pointer-set-c-char! . bg308f) (pointer-ref-c-pointer . bg308e) (pointer-ref-c-double . bg308d) (pointer-ref-c-float . bg308c) (pointer-ref-c-unsigned-long-long . bg308b) (pointer-ref-c-signed-long-long . bg308a) (pointer-ref-c-unsigned-long . bg3089) (pointer-ref-c-signed-long . bg3088) (pointer-ref-c-unsigned-int . bg3087) (pointer-ref-c-signed-int . bg3086) (pointer-ref-c-unsigned-short . bg3085) (pointer-ref-c-signed-short . bg3084) (pointer-ref-c-unsigned-char . bg3083) (pointer-ref-c-signed-char . bg3082) (pointer->integer . bg3081) (integer->pointer . bg3080) (pointer? . bg307f) (shared-errno . bg307e) (%ffi-free . bg307d) (%ffi-malloc . bg307c) (%ffi-supported? . bg307b) (%ffi-pointer->string . bg307a) (%ffi-call->string-or-zero . bg3079) (%ffi-call->double . bg3078) (%ffi-call->void* . bg3077) (%ffi-call->void . bg3076) (%ffi-call->char . bg3075) (%ffi-call->int . bg3074) (%ffi-lookup . bg3073) (%ffi-open . bg3072) (%fork . bg3071) (%pipe . bg3070) (open-output-string . bg306e) (get-output-string . bg306d) (file-stat-ctime . bg306c) (file-stat-atime . bg306b) (file-stat-mtime . bg306a) (file-size-in-bytes . bg3069) (file-writable? . bg3068) (file-executable? . bg3067) (file-readable? . bg3066) (file-regular? . bg3065) (file-symbolic-link? . bg3064) (file-directory? . bg3063) (create-symbolic-link . bg3062) (rename-file . bg3061) (delete-directory . bg3060) (create-directory . bg305f) (create-mosh-cache-dir . bg305e) (get-environment-variables . bg305d) (get-environment-variable . bg305c) (join-wraps . bg305b) (id->real-label . bg305a) (same-marks? . bg3059) (same-marks*? . bg3058) (make-parameter . bg599) (socket-port . bg3035) (socket-shutdown . bg3034) (socket-close . bg3033) (socket-send . bg3032) (socket-recv! . bg3031) (socket-recv . bg3030) (make-server-socket . bg302f) (make-client-socket . bg302e) (socket-accept . bg302d) (socket? . bg302c) (parameterize . bg2dc4)) '() values values '#f '#f '#f '#f))
((lambda (bg2c1f@add-library-path! bg2c21@parse-and-add-library-path bg2c23@for-each-with-index bg2c25@rpad bg2c27@condition-printer bg2c29@record->field-alist bg2c2b@map-with-index bg2c2d@repl bg2c2f@trace-printer bg2c31@command-line bg2c33@local-library-path bg2c35@load/args bg2c37@load bg2c39@ironscheme-build bg2c3b@eval-top-level bg2c3d@compile-system-libraries bg2c3f@compile bg2c41@compile->closure bg2c43@pre-compile-r6rs-file bg2c45@load-r6rs-top-level bg2c47@load-r6rs-top-level-sexp bg2c49@prefix-inc bg2c4b@prefix-inc!) (begin (set! bg2c1f@add-library-path! (lambda (bg2c84@path) (bg975@bg7b1@library-path (append (bg975@bg7b1@library-path) (list bg2c84@path))))) (set! bg2c21@parse-and-add-library-path (lambda (bg2c86@paths bg2c87@message) ((lambda (bg2c8b@separator) (begin (set! bg2c8b@separator (if (string=? (host-os) '"win32") '#\; '#\:)) ((lambda (bg2c8c@t) (if bg2c8c@t ((lambda (bg2c8e@paths) (for-each (lambda (bg2c90@path) (if (file-exists? bg2c90@path) (bg2c1f@add-library-path! (expand-path bg2c90@path)) (format (current-error-port) bg2c87@message bg2c90@path))) (string-split bg2c8e@paths bg2c8b@separator))) bg2c8c@t) (void))) bg2c86@paths))) '#f))) (set! bg2c23@for-each-with-index (lambda (bg2c92@proc bg2c93@lst) (letrec ((bg2c96@loop (lambda (bg2c98@i bg2c99@lst) (if (null? bg2c99@lst) (if '#f '#f (void)) (begin (bg2c92@proc bg2c98@i (car bg2c99@lst)) (bg2c96@loop (+ bg2c98@i '1) (cdr bg2c99@lst))))))) (bg2c96@loop '1 bg2c93@lst)))) (set! bg2c25@rpad (lambda (bg2c9c@str bg2c9d@pad bg2c9e@n) ((lambda (bg2ca2@rest) ((letrec ((bg2ca4@loop (lambda (bg2ca6@rest bg2ca7@ret) (if (<= bg2ca6@rest '0) bg2ca7@ret (bg2ca4@loop (- bg2ca6@rest '1) (string-append bg2ca7@ret bg2c9d@pad)))))) bg2ca4@loop) bg2ca2@rest (format '"~a" bg2c9c@str))) (- bg2c9e@n (string-length (format '"~a" bg2c9c@str)))))) (set! bg2c27@condition-printer (lambda (bg2caa@e bg2cab@port) ((lambda (bg2caf@max-condition-len) (begin (set! bg2caf@max-condition-len (apply max (map (lambda (bg2cc0@c) (string-length (symbol->string (record-type-name (record-rtd bg2cc0@c))))) (simple-conditions bg2caa@e)))) (begin (display '" Condition components:\n" bg2cab@port) (bg2c23@for-each-with-index (lambda (bg2cb0@i bg2cb1@x) ((lambda (bg2cb4@rtd bg2cb5@fields-alist) (begin (format bg2cab@port '" ~d. ~a" bg2cb0@i (bg2c25@rpad (symbol->string (record-type-name bg2cb4@rtd)) '" " bg2caf@max-condition-len)) (if (null? bg2cb5@fields-alist) (newline bg2cab@port) (void)) ((letrec ((bg2cb8@loop (lambda (bg2cba@first bg2cbb@fields-alist) (if (null? bg2cbb@fields-alist) '() ((lambda (bg2cbe@field) (begin (if (not bg2cba@first) (display (bg2c25@rpad '"" '" " (+ '4 bg2caf@max-condition-len)) bg2cab@port) (void)) (display '"       " bg2cab@port) (display (car bg2cbe@field) bg2cab@port) (display '": " bg2cab@port) (write (cdr bg2cbe@field) bg2cab@port) (newline bg2cab@port) (bg2cb8@loop '#f (cdr bg2cbb@fields-alist)))) (car bg2cbb@fields-alist)))))) bg2cb8@loop) '#t bg2cb5@fields-alist))) (record-rtd bg2cb1@x) (bg2c29@record->field-alist bg2cb1@x))) (simple-conditions bg2caa@e))))) '#f))) (set! bg2c29@record->field-alist (lambda (bg2cc2@r) ((lambda (bg2cc5@ref) (begin (set! bg2cc5@ref (lambda (bg2cd0@rtd bg2cd1@i bg2cd2@x) ((lambda (bg2cd6@val) (if (symbol? bg2cd6@val) (ungensym bg2cd6@val) bg2cd6@val)) ((record-accessor bg2cd0@rtd bg2cd1@i) bg2cd2@x)))) ((letrec ((bg2cc6@loop (lambda (bg2cc8@ret bg2cc9@rtd) (if bg2cc9@rtd (bg2cc6@loop (append bg2cc8@ret (bg2c2b@map-with-index (lambda (bg2ccc@i bg2ccd@field) (cons bg2ccd@field (bg2cc5@ref bg2cc9@rtd bg2ccc@i bg2cc2@r))) (vector->list (record-type-field-names bg2cc9@rtd)))) (record-type-parent bg2cc9@rtd)) bg2cc8@ret)))) bg2cc6@loop) '() (record-rtd bg2cc2@r)))) '#f))) (set! bg2c2b@map-with-index (lambda (bg2cd8@proc bg2cd9@lst) ((letrec ((bg2cdc@loop (lambda (bg2cde@i bg2cdf@lst bg2ce0@ret) (if (null? bg2cdf@lst) (reverse bg2ce0@ret) (bg2cdc@loop (+ bg2cde@i '1) (cdr bg2cdf@lst) (cons (bg2cd8@proc bg2cde@i (car bg2cdf@lst)) bg2ce0@ret)))))) bg2cdc@loop) '0 bg2cd9@lst '()))) (set! bg2c2d@repl (lambda bg2ce4@x ((lambda (bg2ce7@rec) (begin (set! bg2ce7@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bg2cea@bg2ce8) (lambda () (with-exception-handler (lambda (bg2cec@e) ((call/cc (lambda (bg2cee@bg2ce9) (bg2cea@bg2ce8 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bg2cec@e) (bg2c27@condition-printer bg2cec@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bg2cec@e))) (bg2cee@bg2ce9 (lambda () (raise-continuable bg2cec@e)))))))))) (lambda () ((letrec ((bg2cf0@loop (lambda (bg2cf2@line bg2cf3@accum) ((lambda (bg2cf7@parentheses-ok? bg2cf9@eval-string-print) (begin (set! bg2cf7@parentheses-ok? (lambda (bg2cfe@text) ((letrec ((bg2d00@loop (lambda (bg2d02@chars bg2d03@p0 bg2d04@p1) (if (null? bg2d02@chars) (= '0 bg2d03@p0 bg2d04@p1) ((lambda (bg2d08@t) (if (memv bg2d08@t '(#\()) (bg2d00@loop (cdr bg2d02@chars) (+ bg2d03@p0 '1) bg2d04@p1) (if (memv bg2d08@t '(#\))) (bg2d00@loop (cdr bg2d02@chars) (- bg2d03@p0 '1) bg2d04@p1) (if (memv bg2d08@t '(#\[)) (bg2d00@loop (cdr bg2d02@chars) bg2d03@p0 (+ bg2d04@p1 '1)) (if (memv bg2d08@t '(#\])) (bg2d00@loop (cdr bg2d02@chars) bg2d03@p0 (- bg2d04@p1 '1)) (bg2d00@loop (cdr bg2d02@chars) bg2d03@p0 bg2d04@p1)))))) (car bg2d02@chars)))))) bg2d00@loop) (string->list bg2cfe@text) '0 '0))) (set! bg2cf9@eval-string-print (lambda (bg2cfc@text) (if (not (or (string=? '"\n" bg2cfc@text) (= '0 (string-length bg2cfc@text)))) (write (bg2c3b@eval-top-level (call-with-port (open-string-input-port bg2cfc@text) read))) (void)))) (if (eof-object? bg2cf2@line) (begin (bg2cf9@eval-string-print bg2cf3@accum) (exit)) ((lambda (bg2cfa@current) (if (bg2cf7@parentheses-ok? bg2cfa@current) (bg2cf9@eval-string-print bg2cfa@current) (bg2cf0@loop (get-line (current-input-port)) bg2cfa@current))) (string-append bg2cf3@accum bg2cf2@line))))) '#f '#f)))) bg2cf0@loop) (get-line (current-input-port)) '""))))))) (newline) (bg2ce7@rec)))) (bg2ce7@rec))) '#f))) (set! bg2c2f@trace-printer (bg6bb@bg59a@make-parameter write)) (set! bg2c31@command-line (bg6bb@bg59a@make-parameter (get-command-line))) (set! bg2c33@local-library-path (lambda (bg2d0a@filename) (bg975@bg7b1@library-path))) (set! bg2c35@load/args (lambda (bg2d0c@filename . bg2d0e@args) (begin (apply bg2c45@load-r6rs-top-level bg2d0c@filename 'load bg2d0e@args) (void)))) (set! bg2c37@load (lambda (bg2d10@filename) (begin (apply bg2c45@load-r6rs-top-level bg2d10@filename 'load (bg2c31@command-line)) (void)))) (set! bg2c39@ironscheme-build (lambda () (bg2c37@load '"ironscheme-buildscript.ss"))) (set! bg2c3b@eval-top-level (lambda (bg2d12@x) (bg2846@bge21@eval bg2d12@x (bg285c@bge4d@interaction-environment)))) (set! bg2c3d@compile-system-libraries (lambda () (bg2c3b@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bg2c3f@compile (lambda (bg2d14@filename) (bg2c45@load-r6rs-top-level bg2d14@filename 'compile))) (set! bg2c41@compile->closure (lambda (bg2d16@filename) (bg2c45@load-r6rs-top-level bg2d16@filename 'closure))) (set! bg2c43@pre-compile-r6rs-file (lambda (bg2d18@filename) (bg2c45@load-r6rs-top-level bg2d18@filename 'compile))) (set! bg2c45@load-r6rs-top-level (lambda (bg2d1a@filename bg2d1b@how . bg2d1e@args) ((lambda (bg2d24@bg2d21 bg2d25@bg2d23) ((lambda (bg2d28@swap) (dynamic-wind bg2d28@swap (lambda () ((lambda (bg2d2a@x*) ((lambda (bg2d2c@t) (if (memv bg2d2c@t '(closure)) (bg285b@bge4b@pre-compile-r6rs-top-level bg2d2a@x*) (if (memv bg2d2c@t '(load)) ((lambda (bg2d36@bg2d2f bg2d37@bg2d31 bg2d38@bg2d33 bg2d39@bg2d35) ((lambda (bg2d3e@swap) (dynamic-wind bg2d3e@swap (lambda () (begin (if (bg6bc@bg59c@mosh-cache-dir) (gensym-prefix-set! (bg2c4b@prefix-inc! (string-append (bg6bc@bg59c@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bg2d40@file) ((call/cc (lambda (bg2d44@bg2d42) (lambda () (with-exception-handler (lambda (bg2d46@c) ((call/cc (lambda (bg2d48@bg2d43) (bg2d44@bg2d42 (lambda () (if '#t '#t (bg2d48@bg2d43 (lambda () (raise-continuable bg2d46@c)))))))))) (lambda () (delete-file (string-append (bg6bc@bg59c@mosh-cache-dir) '"/" bg2d40@file))))))))) (directory-list (bg6bc@bg59c@mosh-cache-dir))) (void)) ((lambda (bg2d4a@compiled) (begin (if (and (bg6bc@bg59c@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bg979@bg7b9@serialize-all bg6b6@bg590@serialize-library bg712@bg6cb@compile-core-expr) (void)) (bg2d4a@compiled))) (bg285a@bge49@compile-r6rs-top-level bg2d2a@x*)))) bg2d3e@swap)) (lambda () (begin ((lambda (bg2d4c@t) (begin (bg2d36@bg2d2f bg2d38@bg2d33) (set! bg2d38@bg2d33 bg2d4c@t))) (bg2d36@bg2d2f)) ((lambda (bg2d4e@t) (begin (bg2d37@bg2d31 bg2d39@bg2d35) (set! bg2d39@bg2d35 bg2d4e@t))) (bg2d37@bg2d31)))))) bg2c31@command-line bg6bc@bg59c@mosh-cache-dir (cons bg2d1a@filename (car bg2d1e@args)) (create-mosh-cache-dir)) (if (memv bg2d2c@t '(compile)) (begin (bg285a@bge49@compile-r6rs-top-level bg2d2a@x*) (bg979@bg7b9@serialize-all bg6b6@bg590@serialize-library bg712@bg6cb@compile-core-expr)) (if '#f '#f (void)))))) bg2d1b@how)) (with-input-from-file bg2d1a@filename (lambda () ((letrec ((bg2d50@f (lambda () ((lambda (bg2d52@x) (if (eof-object? bg2d52@x) '() (cons bg2d52@x (bg2d50@f)))) (bg6ae@bg580@read-annotated))))) bg2d50@f)))))) bg2d28@swap)) (lambda () ((lambda (bg2d54@t) (begin (bg2d24@bg2d21 bg2d25@bg2d23) (set! bg2d25@bg2d23 bg2d54@t))) (bg2d24@bg2d21))))) bg975@bg7b1@library-path (bg2c33@local-library-path bg2d1a@filename)))) (set! bg2c47@load-r6rs-top-level-sexp (lambda (bg2d56@import-spec bg2d57@thunk) ((lambda (bg2d62@bg2d5b bg2d63@bg2d5d bg2d64@bg2d5f bg2d65@bg2d61) ((lambda (bg2d6a@swap) (dynamic-wind bg2d6a@swap (lambda () (begin (if (bg6bc@bg59c@mosh-cache-dir) (gensym-prefix-set! (bg2c4b@prefix-inc! (string-append (bg6bc@bg59c@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (bg2d70@bg2d6d bg2d71@bg2d6f) ((lambda (bg2d74@swap) (dynamic-wind bg2d74@swap (lambda () ((bg285a@bge49@compile-r6rs-top-level (list (cons 'import bg2d56@import-spec) (list bg2d57@thunk))))) bg2d74@swap)) (lambda () ((lambda (bg2d76@t) (begin (bg2d70@bg2d6d bg2d71@bg2d6f) (set! bg2d71@bg2d6f bg2d76@t))) (bg2d70@bg2d6d))))) bg2c31@command-line '()))) bg2d6a@swap)) (lambda () (begin ((lambda (bg2d78@t) (begin (bg2d62@bg2d5b bg2d64@bg2d5f) (set! bg2d64@bg2d5f bg2d78@t))) (bg2d62@bg2d5b)) ((lambda (bg2d7a@t) (begin (bg2d63@bg2d5d bg2d65@bg2d61) (set! bg2d65@bg2d61 bg2d7a@t))) (bg2d63@bg2d5d)))))) bg975@bg7b1@library-path bg6bc@bg59c@mosh-cache-dir (bg2c33@local-library-path '"") (create-mosh-cache-dir)))) (set! bg2c49@prefix-inc (lambda (bg2d7c@prefix-string) ((lambda (bg2d7e@prefix) ((lambda (bg2d80@len) ((lambda () ((letrec ((bg2d82@loop (lambda (bg2d84@i bg2d85@carry? bg2d86@accum) (if (< bg2d84@i '0) (string->symbol (list->string (if bg2d85@carry? (cons '#\a bg2d86@accum) bg2d86@accum))) (if bg2d85@carry? ((lambda (bg2d8a@next-integer) (if (= bg2d8a@next-integer '123) (bg2d82@loop (- bg2d84@i '1) '#f (cons '#\A bg2d86@accum)) (if (= bg2d8a@next-integer '91) (bg2d82@loop (- bg2d84@i '1) '#t (cons '#\a bg2d86@accum)) (bg2d82@loop (- bg2d84@i '1) '#f (cons (integer->char bg2d8a@next-integer) bg2d86@accum))))) (+ '1 (char->integer (string-ref bg2d7e@prefix bg2d84@i)))) (bg2d82@loop (- bg2d84@i '1) '#f (cons (string-ref bg2d7e@prefix bg2d84@i) bg2d86@accum))))))) bg2d82@loop) (- bg2d80@len '1) '#t '())))) (string-length bg2d7e@prefix))) (symbol->string bg2d7c@prefix-string)))) (set! bg2c4b@prefix-inc! (lambda (bg2d8c@file) (begin (if (not (file-exists? bg2d8c@file)) (call-with-output-file bg2d8c@file (lambda (bg2d8e@port) (write 'd bg2d8e@port))) (void)) ((lambda (bg2d90@prefix) ((lambda (bg2d92@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port bg2d8c@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bg2d94@port) (write bg2d92@next-prefix bg2d94@port))) bg2d90@prefix)))) (bg2c49@prefix-inc bg2d90@prefix))) (call-with-input-file bg2d8c@file read))))) (begin (set! bg2dac@bg2c4b@prefix-inc! bg2c4b@prefix-inc!) (set! bg2dab@bg2c49@prefix-inc bg2c49@prefix-inc) (set! bg2daa@bg2c47@load-r6rs-top-level-sexp bg2c47@load-r6rs-top-level-sexp) (set! bg2da9@bg2c45@load-r6rs-top-level bg2c45@load-r6rs-top-level) (set! bg2da8@bg2c43@pre-compile-r6rs-file bg2c43@pre-compile-r6rs-file) (set! bg2da7@bg2c41@compile->closure bg2c41@compile->closure) (set! bg2da6@bg2c3f@compile bg2c3f@compile) (set! bg2da5@bg2c3d@compile-system-libraries bg2c3d@compile-system-libraries) (set! bg2da4@bg2c3b@eval-top-level bg2c3b@eval-top-level) (set! bg2da3@bg2c39@ironscheme-build bg2c39@ironscheme-build) (set! bg2da2@bg2c37@load bg2c37@load) (set! bg2da1@bg2c35@load/args bg2c35@load/args) (set! bg2da0@bg2c33@local-library-path bg2c33@local-library-path) (set! bg2d9f@bg2c31@command-line bg2c31@command-line) (set! bg2d9e@bg2c2f@trace-printer bg2c2f@trace-printer) (set! bg2d9d@bg2c2d@repl bg2c2d@repl) (set! bg2d9c@bg2c2b@map-with-index bg2c2b@map-with-index) (set! bg2d9b@bg2c29@record->field-alist bg2c29@record->field-alist) (set! bg2d9a@bg2c27@condition-printer bg2c27@condition-printer) (set! bg2d99@bg2c25@rpad bg2c25@rpad) (set! bg2d98@bg2c23@for-each-with-index bg2c23@for-each-with-index) (set! bg2d97@bg2c21@parse-and-add-library-path bg2c21@parse-and-add-library-path) (set! bg2d96@bg2c1f@add-library-path! bg2c1f@add-library-path!) (bg97a@bg7bb@current-precompiled-library-loader bg6b7@bg592@load-serialized-library) (set-symbol-value! 'load bg2c37@load) (set-symbol-value! 'pre-compile-r6rs-file bg2c43@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bg2c3b@eval-top-level) (set-symbol-value! 'int-env-syms bg283d@bge0f@interaction-environment-symbols) (set-symbol-value! 'expanded2core bg711@bg6c9@expanded->core) (set-symbol-value! 'trace-printer bg2c2f@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bg2c4c@c) (condition (bg2b7c@bg2986@make-non-continuable-violation) (bg2b72@bg296d@make-who-condition 'raise) (bg2b36@bg28ce@make-message-condition '"returned from non-continuable exception") (bg2b68@bg2952@make-irritants-condition (list bg2c4c@c))))) (bg2c21@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bg2c21@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bg2c1f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bg2c1f@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bg2c1f@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (bg2c4e@prefix) (bg976@bg7b3@library-extensions (bg2c4e@prefix '".mosh" (bg976@bg7b3@library-extensions)))) (lambda (bg2c50@ext bg2c51@ls) (append (map (lambda (bg2c54@x) (string-append bg2c50@ext bg2c54@x)) bg2c51@ls) bg2c51@ls))) ((lambda (bg2c56@args bg2c57@port) ((lambda (bg2c5b@ref) (begin (set! bg2c5b@ref (lambda (bg2c7c@rtd bg2c7d@i bg2c7e@x) ((lambda (bg2c82@val) (if (symbol? bg2c82@val) (ungensym bg2c82@val) bg2c82@val)) ((record-accessor bg2c7c@rtd bg2c7d@i) bg2c7e@x)))) (with-exception-handler (lambda (bg2c5c@c) (if (condition? bg2c5c@c) (bg2c27@condition-printer bg2c5c@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bg2c5c@c))) (lambda () (if ((call/cc (lambda (bg2c60@bg2c5e) (lambda () (with-exception-handler (lambda (bg2c62@c) ((call/cc (lambda (bg2c64@bg2c5f) (bg2c60@bg2c5e (lambda () (if '#t '#f (bg2c64@bg2c5f (lambda () (raise-continuable bg2c62@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bg2c47@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? bg2c56@args) ((lambda (bg2c6e@bg2c67 bg2c6f@bg2c69 bg2c70@bg2c6b bg2c71@bg2c6d) ((lambda (bg2c76@swap) (dynamic-wind bg2c76@swap (lambda () (begin (if (bg6bc@bg59c@mosh-cache-dir) (gensym-prefix-set! (bg2c4b@prefix-inc! (string-append (bg6bc@bg59c@mosh-cache-dir) '"/prefix.txt"))) (void)) (bg2c2d@repl))) bg2c76@swap)) (lambda () (begin ((lambda (bg2c78@t) (begin (bg2c6e@bg2c67 bg2c70@bg2c6b) (set! bg2c70@bg2c6b bg2c78@t))) (bg2c6e@bg2c67)) ((lambda (bg2c7a@t) (begin (bg2c6f@bg2c69 bg2c71@bg2c6d) (set! bg2c71@bg2c6d bg2c7a@t))) (bg2c6f@bg2c69)))))) bg2c31@command-line bg6bc@bg59c@mosh-cache-dir '() (create-mosh-cache-dir)) (bg2c45@load-r6rs-top-level (car bg2c56@args) 'load (cdr bg2c56@args)))))))) '#f)) (bg2c31@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
