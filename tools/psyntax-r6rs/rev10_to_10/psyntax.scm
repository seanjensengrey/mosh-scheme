;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (C2864@library-file-path->cache-path C2866@read-annotated C2868@annotation-stripped C286a@annotation? C286c@annotation-source C286e@annotation-expression C2870@scm->fasl C2872@fasl-save C2874@fasl-load C2876@serialize-library C2878@load-serialized-library C287a@make-record-printer C287c@compile-core C287e@read-library-source-file C2880@make-parameter C2882@mosh-cache-dir C2918@file-options-spec) (begin (set! C2864@library-file-path->cache-path (lambda (C2919@x) (call-with-values (lambda () (open-string-output-port)) (lambda (C291f@C291c C2920@C291e) ((lambda (C2923@extract C2924@p) ((lambda (C2928@display-hex) (begin (set! C2928@display-hex (lambda (C2931@n) (if (<= '0 C2931@n '9) (display C2931@n C2924@p) (display (integer->char (+ (char->integer '#\a) (- C2931@n '10))) C2924@p)))) (begin ((letrec ((C2929@f (lambda (C292b@ls) (if (not (null? C292b@ls)) (begin (display '"_" C2924@p) (for-each (lambda (C292d@c) (if (or (char<=? '#\a C292d@c '#\z) (char<=? '#\A C292d@c '#\Z) (char<=? '#\0 C292d@c '#\9) (memv C292d@c '(#\- #\. #\_ #\~))) (display C292d@c C2924@p) (begin (display '"%" C2924@p) ((lambda (C292f@n) (begin (C2928@display-hex (quotient C292f@n '16)) (C2928@display-hex (remainder C292f@n '16)))) (char->integer C292d@c))))) (string->list (car C292b@ls))) (C2929@f (cdr C292b@ls))) (void))))) C2929@f) (string-split C2919@x '#\/)) (C2923@extract)))) '#f)) C2920@C291e C291f@C291c))))) (set! C2866@read-annotated read) (set! C2868@annotation-stripped (lambda (C2933@x) (C286e@annotation-expression C2933@x))) (set! C286a@annotation? (lambda (C2935@x) (source-info C2935@x))) (set! C286c@annotation-source (lambda (C2937@x) (source-info C2937@x))) (set! C286e@annotation-expression (lambda (C2939@x) (if (pair? C2939@x) (cons (car C2939@x) (cdr C2939@x)) (display '"line:46\n")))) (set! C2870@scm->fasl (lambda (C293b@filename) (string-append (C2882@mosh-cache-dir) '"/" (C2864@library-file-path->cache-path C293b@filename) '".mosh-fasl"))) (set! C2872@fasl-save (lambda (C293d@filename C293e@obj) (call-with-port (open-file-output-port C293d@filename) (lambda (C2941@port) ((symbol-value 'fasl-write!) C293e@obj C2941@port))))) (set! C2874@fasl-load (lambda (C2943@filename) (call-with-port (open-file-input-port C2943@filename) (symbol-value 'fasl-read!)))) (set! C2876@serialize-library (lambda (C2945@filename C2946@obj) (begin ((lambda (C2949@expanded2core) ((lambda (C294b@compile) ((lambda (C294d@code) ((lambda (C294f@pivot) ((lambda (C2951@visit) ((lambda () (begin (set-car! C294f@pivot C2951@visit) ((lambda (C2953@pivot) ((lambda (C2955@invoke) ((lambda () (set-car! C2953@pivot C2955@invoke)))) (C294b@compile (C2949@expanded2core (car C2953@pivot))))) (cdr C294f@pivot)))))) (C294b@compile (C2949@expanded2core (car C294f@pivot))))) (cddddr (cddddr C294d@code)))) C2946@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (C2957@fasl-file) (begin (if (file-exists? C2957@fasl-file) (delete-file C2957@fasl-file) (void)) ((call/cc (lambda (C295b@C2959) (lambda () (with-exception-handler (lambda (C295d@c) ((call/cc (lambda (C295f@C295a) (C295b@C2959 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " C2945@filename) (if (file-exists? C2957@fasl-file) (delete-file C2957@fasl-file) (void)) '#f) (C295f@C295a (lambda () (raise-continuable C295d@c)))))))))) (lambda () (C2872@fasl-save C2957@fasl-file C2946@obj))))))))) (C2870@scm->fasl C2945@filename))))) (set! C2878@load-serialized-library (lambda (C2961@filename C2962@obj) ((lambda (C2965@fasl-file) (if (and (file-exists? C2965@fasl-file) ((symbol-value 'file-newer?) C2965@fasl-file C2961@filename)) ((lambda (C2967@expanded2core) ((lambda (C2969@eval-compiled-core) ((lambda (C296b@code) ((lambda (C296d@pivot) ((lambda (C296f@visit) ((lambda (C2971@visit-proc) ((lambda () (begin (set-car! C296d@pivot C2971@visit-proc) ((lambda (C2973@pivot) ((lambda (C2975@invoke) ((lambda () (begin (set-car! C2973@pivot (lambda () (C2969@eval-compiled-core C2975@invoke))) (apply C2962@obj C296b@code))))) (car C2973@pivot))) (cdr C296d@pivot)))))) (lambda () (C2969@eval-compiled-core C296f@visit)))) (car C296d@pivot))) (cddddr (cddddr C296b@code)))) (C2874@fasl-load C2965@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (C2870@scm->fasl C2961@filename)))) (set! C287a@make-record-printer (lambda (C2977@name C2978@printer) (lambda C297b@x (begin (display '"record printer") (for-each display C297b@x))))) (set! C287c@compile-core (lambda C297d@x (apply error 'comile-core '"not implementated" C297d@x))) (set! C287e@read-library-source-file (lambda (C297f@file-name) (with-input-from-file C297f@file-name C2866@read-annotated))) (set! C2880@make-parameter (lambda C298f ((lambda (C2990) (if (= C2990 '1) (apply (lambda (C2981@x) (C2880@make-parameter C2981@x (lambda (C2983@x) C2983@x))) C298f) (if (= C2990 '2) (apply (lambda (C2985@x C2986@fender) ((lambda (C2989@x) (lambda C298d ((lambda (C298e) (if (= C298e '0) (apply (lambda () C2989@x) C298d) (if (= C298e '1) (apply (lambda (C298b@v) (set! C2989@x (C2986@fender C298b@v))) C298d) (error 'apply '"invalid arg count")))) (length C298d)))) (C2986@fender C2985@x))) C298f) (error 'apply '"invalid arg count")))) (length C298f)))) (set! C2882@mosh-cache-dir (C2880@make-parameter '#f)) (set! C2918@file-options-spec (lambda (C2991@x) C2991@x)) (begin (set! C29a3@C2918@file-options-spec C2918@file-options-spec) (set! C29a2@C2882@mosh-cache-dir C2882@mosh-cache-dir) (set! C29a1@C2880@make-parameter C2880@make-parameter) (set! C29a0@C287e@read-library-source-file C287e@read-library-source-file) (set! C299f@C287c@compile-core C287c@compile-core) (set! C299e@C287a@make-record-printer C287a@make-record-printer) (set! C299d@C2878@load-serialized-library C2878@load-serialized-library) (set! C299c@C2876@serialize-library C2876@serialize-library) (set! C299b@C2874@fasl-load C2874@fasl-load) (set! C299a@C2872@fasl-save C2872@fasl-save) (set! C2999@C2870@scm->fasl C2870@scm->fasl) (set! C2998@C286e@annotation-expression C286e@annotation-expression) (set! C2997@C286c@annotation-source C286c@annotation-source) (set! C2996@C286a@annotation? C286a@annotation?) (set! C2995@C2868@annotation-stripped C2868@annotation-stripped) (set! C2994@C2866@read-annotated C2866@read-annotated) (set! C2993@C2864@library-file-path->cache-path C2864@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (C29a9@current-primitive-locations C29ab@mutable? C29ad@rewriter C29af@expanded->core C29b1@compile-core-expr C29b3@pretty-print C29b5@compile-core-expr-to-port) (begin (set! C29a9@current-primitive-locations (C29a1@C2880@make-parameter (lambda (C29b6@x) '#f) (lambda (C29b8@p) C29b8@p))) (set! C29ab@mutable? (lambda (C29ba@x) (or (pair? C29ba@x) (vector? C29ba@x) (hashtable? C29ba@x)))) (set! C29ad@rewriter (lambda (C29bc@quote-hack?) ((lambda (C29bf@f) (begin (set! C29bf@f (lambda (C29c0@x) (if (pair? C29c0@x) ((lambda (C29c2@t) (if (memv C29c2@t '(quote)) (if (and C29bc@quote-hack? (C29ab@mutable? (cadr C29c0@x))) ((lambda (C29c4@g) (begin (set-symbol-value! C29c4@g (cadr C29c0@x)) C29c4@g)) (gensym)) C29c0@x) (if (memv C29c2@t '(case-lambda)) (cons 'case-lambda (map (lambda (C29c6@x) (cons (car C29c6@x) (map C29bf@f (cdr C29c6@x)))) (cdr C29c0@x))) (if (memv C29c2@t '(lambda)) (cons* 'lambda (cadr C29c0@x) (map C29bf@f (cddr C29c0@x))) (if (memv C29c2@t '(letrec)) ((lambda (C29c8@bindings C29c9@body*) ((lambda (C29cc@lhs* C29cd@rhs*) (cons* 'letrec (map list C29cc@lhs* (map C29bf@f C29cd@rhs*)) (map C29bf@f C29c9@body*))) (map car C29c8@bindings) (map cadr C29c8@bindings))) (cadr C29c0@x) (cddr C29c0@x)) (if (memv C29c2@t '(letrec*)) ((lambda (C29d0@bindings C29d1@body*) ((lambda (C29d4@lhs* C29d5@rhs*) (cons* 'letrec* (map list C29d4@lhs* (map C29bf@f C29d5@rhs*)) (map C29bf@f C29d1@body*))) (map car C29d0@bindings) (map cadr C29d0@bindings))) (cadr C29c0@x) (cddr C29c0@x)) (if (memv C29c2@t '(library-letrec*)) ((lambda (C29d8@name C29d9@x) ((lambda (C29dc@bindings C29dd@body*) ((lambda (C29e0@lhs* C29e1@lhs** C29e2@rhs*) (cons* 'library-letrec* C29d8@name (map list C29e0@lhs* C29e1@lhs** (map C29bf@f C29e2@rhs*)) (map C29bf@f C29dd@body*))) (map car C29dc@bindings) (map cadr C29dc@bindings) (map caddr C29dc@bindings))) (cadr C29d9@x) (cddr C29d9@x))) (cadr C29c0@x) (cdr C29c0@x)) (if (memv C29c2@t '(begin)) (cons 'begin (map C29bf@f (cdr C29c0@x))) (if (memv C29c2@t '(set!)) (list 'set! (cadr C29c0@x) (C29bf@f (caddr C29c0@x))) (if (memv C29c2@t '(primitive)) ((lambda (C29e6@op) ((lambda (C29e8@t) (if C29e8@t ((lambda (C29ea@loc) C29ea@loc) C29e8@t) C29e6@op)) ((C29a9@current-primitive-locations) C29e6@op))) (cadr C29c0@x)) (if (memv C29c2@t '(define)) C29c0@x (if (list? C29c0@x) (map C29bf@f C29c0@x) (error 'rewrite '"invalid form ~s ~s" C29c0@x (list? C29c0@x)))))))))))))) (car C29c0@x)) C29c0@x))) C29bf@f)) '#f))) (set! C29af@expanded->core (lambda (C29ec@x) ((C29ad@rewriter '#f) C29ec@x))) (set! C29b1@compile-core-expr (lambda (C29ee@x) ((C29ad@rewriter '#f) C29ee@x))) (set! C29b3@pretty-print write) (set! C29b5@compile-core-expr-to-port (lambda (C29f0@x C29f1@p) (C29b3@pretty-print ((C29ad@rewriter '#f) C29f0@x) C29f1@p))) (begin (set! C29fa@C29b5@compile-core-expr-to-port C29b5@compile-core-expr-to-port) (set! C29f9@C29b3@pretty-print C29b3@pretty-print) (set! C29f8@C29b1@compile-core-expr C29b1@compile-core-expr) (set! C29f7@C29af@expanded->core C29af@expanded->core) (set! C29f6@C29ad@rewriter C29ad@rewriter) (set! C29f5@C29ab@mutable? C29ab@mutable?) (set! C29f4@C29a9@current-primitive-locations C29a9@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (C2a49@make-collection C2a4b@current-library-collection C2a4d@rp C2a57@library? C2a59@library-id C2a5b@set-library-id! C2a5d@library-name C2a5f@set-library-name! C2a61@library-version C2a63@set-library-version! C2a65@library-imp* C2a67@set-library-imp*! C2a69@library-vis* C2a6b@set-library-vis*! C2a6d@library-inv* C2a6f@set-library-inv*! C2a71@library-subst C2a73@set-library-subst! C2a75@library-env C2a77@set-library-env! C2a79@library-visit-state C2a7b@set-library-visit-state! C2a7d@library-invoke-state C2a7f@set-library-invoke-state! C2a81@library-visit-code C2a83@set-library-visit-code! C2a85@library-invoke-code C2a87@set-library-invoke-code! C2a89@library-visible? C2a8b@set-library-visible?! C2a8d@library-source-file-name C2a8f@set-library-source-file-name! C2a91@dummy C2a93@find-dependencies C2a95@find-library-by C2a97@library-path C2a99@library-extensions C2a9b@library-name->file-name C2a9d@file-locator C2a9f@serialize-all C2aa1@current-precompiled-library-loader C2aa3@try-load-from-file C2aa5@library-loader C2aa7@current-library-expander C2aa9@external-pending-libraries C2aab@find-external-library C2aad@find-library-by-name C2aaf@library-exists? C2ab1@find-library-by-spec/die C2ab3@label->binding-table C2ab5@install-library-record C2ab7@install-library C2ab9@imported-label->binding C2abb@invoke-library C2abd@visit-library C2abf@invoke-library-by-spec C2ac1@installed-libraries C2ac3@library-spec) (begin (set! C2a49@make-collection (lambda () ((lambda (C2ac4@set) ((lambda (C2ac7@set-cons) (begin (set! C2ac7@set-cons (lambda (C2acc@x C2acd@ls) (if (memq C2acc@x C2acd@ls) C2acd@ls (cons C2acc@x C2acd@ls)))) (lambda C2aca ((lambda (C2acb) (if (= C2acb '0) (apply (lambda () C2ac4@set) C2aca) (if (= C2acb '1) (apply (lambda (C2ac8@x) (set! C2ac4@set (C2ac7@set-cons C2ac8@x C2ac4@set))) C2aca) (error 'apply '"invalid arg count")))) (length C2aca))))) '#f)) '()))) (set! C2a4b@current-library-collection (C29a1@C2880@make-parameter (C2a49@make-collection) (lambda (C2ad0@x) (begin (if (not (procedure? C2ad0@x)) (assertion-violation 'current-library-collection '"not a procedure" C2ad0@x) (void)) C2ad0@x)))) (set! C2a4d@rp (C299e@C287a@make-record-printer 'library (lambda (C2ad2@x C2ad3@p C2ad4@wr) (begin (if (not (C2a57@library? C2ad2@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (C2a61@library-version C2ad2@x)) (C2a5d@library-name C2ad2@x) (append (C2a5d@library-name C2ad2@x) (list (C2a61@library-version C2ad2@x))))) C2ad3@p))))) (set! C2a57@library? (lambda (C2ad8@x) (and (simple-struct? C2ad8@x) (eq? (simple-struct-name C2ad8@x) 'library)))) (set! C2a59@library-id (lambda (C2ada@x) (simple-struct-ref C2ada@x '0))) (set! C2a5b@set-library-id! (lambda (C2adc@x C2add@val) (simple-struct-set! C2adc@x '0 C2add@val))) (set! C2a5d@library-name (lambda (C2ae0@x) (simple-struct-ref C2ae0@x '1))) (set! C2a5f@set-library-name! (lambda (C2ae2@x C2ae3@val) (simple-struct-set! C2ae2@x '1 C2ae3@val))) (set! C2a61@library-version (lambda (C2ae6@x) (simple-struct-ref C2ae6@x '2))) (set! C2a63@set-library-version! (lambda (C2ae8@x C2ae9@val) (simple-struct-set! C2ae8@x '2 C2ae9@val))) (set! C2a65@library-imp* (lambda (C2aec@x) (simple-struct-ref C2aec@x '3))) (set! C2a67@set-library-imp*! (lambda (C2aee@x C2aef@val) (simple-struct-set! C2aee@x '3 C2aef@val))) (set! C2a69@library-vis* (lambda (C2af2@x) (simple-struct-ref C2af2@x '4))) (set! C2a6b@set-library-vis*! (lambda (C2af4@x C2af5@val) (simple-struct-set! C2af4@x '4 C2af5@val))) (set! C2a6d@library-inv* (lambda (C2af8@x) (simple-struct-ref C2af8@x '5))) (set! C2a6f@set-library-inv*! (lambda (C2afa@x C2afb@val) (simple-struct-set! C2afa@x '5 C2afb@val))) (set! C2a71@library-subst (lambda (C2afe@x) (simple-struct-ref C2afe@x '6))) (set! C2a73@set-library-subst! (lambda (C2b00@x C2b01@val) (simple-struct-set! C2b00@x '6 C2b01@val))) (set! C2a75@library-env (lambda (C2b04@x) (simple-struct-ref C2b04@x '7))) (set! C2a77@set-library-env! (lambda (C2b06@x C2b07@val) (simple-struct-set! C2b06@x '7 C2b07@val))) (set! C2a79@library-visit-state (lambda (C2b0a@x) (simple-struct-ref C2b0a@x '8))) (set! C2a7b@set-library-visit-state! (lambda (C2b0c@x C2b0d@val) (simple-struct-set! C2b0c@x '8 C2b0d@val))) (set! C2a7d@library-invoke-state (lambda (C2b10@x) (simple-struct-ref C2b10@x '9))) (set! C2a7f@set-library-invoke-state! (lambda (C2b12@x C2b13@val) (simple-struct-set! C2b12@x '9 C2b13@val))) (set! C2a81@library-visit-code (lambda (C2b16@x) (simple-struct-ref C2b16@x '10))) (set! C2a83@set-library-visit-code! (lambda (C2b18@x C2b19@val) (simple-struct-set! C2b18@x '10 C2b19@val))) (set! C2a85@library-invoke-code (lambda (C2b1c@x) (simple-struct-ref C2b1c@x '11))) (set! C2a87@set-library-invoke-code! (lambda (C2b1e@x C2b1f@val) (simple-struct-set! C2b1e@x '11 C2b1f@val))) (set! C2a89@library-visible? (lambda (C2b22@x) (simple-struct-ref C2b22@x '12))) (set! C2a8b@set-library-visible?! (lambda (C2b24@x C2b25@val) (simple-struct-set! C2b24@x '12 C2b25@val))) (set! C2a8d@library-source-file-name (lambda (C2b28@x) (simple-struct-ref C2b28@x '13))) (set! C2a8f@set-library-source-file-name! (lambda (C2b2a@x C2b2b@val) (simple-struct-set! C2b2a@x '13 C2b2b@val))) (set! C2a91@dummy '3) (set! C2a93@find-dependencies (lambda (C2b2e@ls) (if (null? C2b2e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! C2a95@find-library-by (lambda (C2b30@pred) ((letrec ((C2b32@f (lambda (C2b34@ls) (if (null? C2b34@ls) '#f (if (C2b30@pred (car C2b34@ls)) (car C2b34@ls) (C2b32@f (cdr C2b34@ls))))))) C2b32@f) ((C2a4b@current-library-collection))))) (set! C2a97@library-path (C29a1@C2880@make-parameter '(".") (lambda (C2b36@x) (if (and (list? C2b36@x) (for-all string? C2b36@x)) (map (lambda (C2b38@x) C2b38@x) C2b36@x) (assertion-violation 'library-path '"not a list of strings" C2b36@x))))) (set! C2a99@library-extensions (C29a1@C2880@make-parameter '(".sls" ".ss" ".scm") (lambda (C2b3a@x) (if (and (list? C2b3a@x) (for-all string? C2b3a@x)) (map (lambda (C2b3c@x) C2b3c@x) C2b3a@x) (assertion-violation 'library-extensions '"not a list of strings" C2b3a@x))))) (set! C2a9b@library-name->file-name (lambda (C2b3e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (C2b44@C2b41 C2b45@C2b43) ((lambda (C2b48@extract C2b49@p) ((lambda (C2b4d@display-hex) (begin (set! C2b4d@display-hex (lambda (C2b56@n) (if (<= '0 C2b56@n '9) (display C2b56@n C2b49@p) (display (integer->char (+ (char->integer '#\a) (- C2b56@n '10))) C2b49@p)))) (begin ((letrec ((C2b4e@f (lambda (C2b50@ls) (if (not (null? C2b50@ls)) (begin (display '"/" C2b49@p) (for-each (lambda (C2b52@c) (if (or (char<=? '#\a C2b52@c '#\z) (char<=? '#\A C2b52@c '#\Z) (char<=? '#\0 C2b52@c '#\9) (memv C2b52@c '(#\- #\. #\_ #\~))) (display C2b52@c C2b49@p) (begin (display '"%" C2b49@p) ((lambda (C2b54@n) (begin (C2b4d@display-hex (quotient C2b54@n '16)) (C2b4d@display-hex (remainder C2b54@n '16)))) (char->integer C2b52@c))))) (string->list (symbol->string (car C2b50@ls)))) (C2b4e@f (cdr C2b50@ls))) (void))))) C2b4e@f) C2b3e@x) (C2b48@extract)))) '#f)) C2b45@C2b43 C2b44@C2b41))))) (set! C2a9d@file-locator (C29a1@C2880@make-parameter (lambda (C2b58@x) ((lambda (C2b5a@str) ((letrec ((C2b5c@f (lambda (C2b5e@ls C2b5f@exts C2b60@failed-list) (if (null? C2b5e@ls) ((lambda () ((lambda (C2b6c@C2b67 C2b6e@C2b69 C2b70@C2b68 C2b73@C2b66 C2b75@make-library-resolution-condition C2b77@C2b64 C2b79@C2b65 C2b7b@library-resolution-condition? C2b7d@condition-library C2b7f@condition-files) (begin (set! C2b6c@C2b67 (make-record-type-descriptor '&library-resolution C4e16@C4b5d@&condition-rtd 'C2b6a '#f '#f '#((immutable library) (immutable files)))) (set! C2b6e@C2b69 '#f) (set! C2b70@C2b68 (make-record-constructor-descriptor C2b6c@C2b67 C4e17@C4b5f@&condition-rcd C2b6e@C2b69)) (set! C2b73@C2b66 (record-predicate C2b6c@C2b67)) (set! C2b75@make-library-resolution-condition (record-constructor C2b70@C2b68)) (set! C2b77@C2b64 (record-accessor C2b6c@C2b67 '0)) (set! C2b79@C2b65 (record-accessor C2b6c@C2b67 '1)) (set! C2b7b@library-resolution-condition? (condition-predicate C2b6c@C2b67)) (set! C2b7d@condition-library (condition-accessor C2b6c@C2b67 C2b77@C2b64)) (set! C2b7f@condition-files (condition-accessor C2b6c@C2b67 C2b79@C2b65)) (raise (condition (C4e36@C4bf7@make-error) (C4e58@C4c53@make-who-condition 'expander) (C4e1c@C4bb4@make-message-condition '"cannot locate library in library-path") (C2b75@make-library-resolution-condition C2b58@x (reverse C2b60@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? C2b5f@exts) (C2b5c@f (cdr C2b5e@ls) (C2a99@library-extensions) C2b60@failed-list) ((lambda (C2b80@name) (if (file-exists? C2b80@name) C2b80@name (C2b5c@f C2b5e@ls (cdr C2b5f@exts) (cons C2b80@name C2b60@failed-list)))) (string-append (car C2b5e@ls) C2b5a@str (car C2b5f@exts)))))))) C2b5c@f) (C2a97@library-path) (C2a99@library-extensions) '())) (C2a9b@library-name->file-name C2b58@x))) (lambda (C2b82@f) (if (procedure? C2b82@f) C2b82@f (assertion-violation 'file-locator '"not a procedure" C2b82@f))))) (set! C2a9f@serialize-all (lambda (C2b84@serialize C2b85@compile) ((lambda (C2b89@library-desc) (begin (set! C2b89@library-desc (lambda (C2b8c@x) (list (C2a59@library-id C2b8c@x) (C2a5d@library-name C2b8c@x)))) (for-each (lambda (C2b8a@x) (if (C2a8d@library-source-file-name C2b8a@x) (C2b84@serialize (C2a8d@library-source-file-name C2b8a@x) (list (C2a59@library-id C2b8a@x) (C2a5d@library-name C2b8a@x) (C2a61@library-version C2b8a@x) (map C2b89@library-desc (C2a65@library-imp* C2b8a@x)) (map C2b89@library-desc (C2a69@library-vis* C2b8a@x)) (map C2b89@library-desc (C2a6d@library-inv* C2b8a@x)) (C2a71@library-subst C2b8a@x) (C2a75@library-env C2b8a@x) (C2b85@compile (C2a81@library-visit-code C2b8a@x)) (C2b85@compile (C2a85@library-invoke-code C2b8a@x)) (C2a89@library-visible? C2b8a@x))) (void))) ((C2a4b@current-library-collection))))) '#f))) (set! C2aa1@current-precompiled-library-loader (C29a1@C2880@make-parameter (lambda (C2b8e@filename C2b8f@sk) '#f))) (set! C2aa3@try-load-from-file (lambda (C2b92@filename) ((C2aa1@current-precompiled-library-loader) C2b92@filename (lambda C2bb8 ((lambda (C2bb9) (if (= C2bb9 '11) (apply (lambda (C2b94@id C2b95@name C2b96@ver C2b97@imp* C2b98@vis* C2b99@inv* C2b9a@exp-subst C2b9b@exp-env C2b9c@visit-proc C2b9d@invoke-proc C2b9e@visible?) ((letrec ((C2baa@f (lambda (C2bac@deps) (if (null? C2bac@deps) (begin (C2ab7@install-library C2b94@id C2b95@name C2b96@ver C2b97@imp* C2b98@vis* C2b99@inv* C2b9a@exp-subst C2b9b@exp-env C2b9c@visit-proc C2b9d@invoke-proc '#f '#f C2b9e@visible? '#f) '#t) ((lambda (C2bae@d) ((lambda (C2bb0@label C2bb1@dname) ((lambda (C2bb4@l) (if (and (C2a57@library? C2bb4@l) (eq? C2bb0@label (C2a59@library-id C2bb4@l))) (C2baa@f (cdr C2bac@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" C2b95@name C2bb1@dname C2b92@filename C2bb4@l C2bb0@label (C2a59@library-id C2bb4@l)) '#f))) (C2aad@find-library-by-name C2bb1@dname))) (car C2bae@d) (cadr C2bae@d))) (car C2bac@deps)))))) C2baa@f) (append C2b97@imp* C2b98@vis* C2b99@inv*))) C2bb8) (if (>= C2bb9 '0) (apply (lambda C2bb6@others '#f) C2bb8) (error 'apply '"invalid arg count")))) (length C2bb8)))))) (set! C2aa5@library-loader (C29a1@C2880@make-parameter (lambda (C2bba@x) ((lambda (C2bbc@file-name) (if (not C2bbc@file-name) (assertion-violation '#f '"cannot file library" C2bba@x) (or (C2aa3@try-load-from-file C2bbc@file-name) ((C2aa7@current-library-expander) (C29a0@C287e@read-library-source-file C2bbc@file-name) C2bbc@file-name (lambda (C2bbe@name) (if (not (fast-equal? C2bbe@name C2bba@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (C2bc4@C2bc1 C2bc5@C2bc3) ((lambda (C2bc8@e C2bc9@p) (begin (display '"expected to find library " C2bc9@p) (write C2bba@x C2bc9@p) (display '" in file " C2bc9@p) (display C2bbc@file-name C2bc9@p) (display '", found " C2bc9@p) (write C2bbe@name C2bc9@p) (display '" instead" C2bc9@p) (C2bc8@e))) C2bc5@C2bc3 C2bc4@C2bc1)))) (void))))))) ((C2a9d@file-locator) C2bba@x))) (lambda (C2bcc@f) (if (procedure? C2bcc@f) C2bcc@f (assertion-violation 'library-locator '"not a procedure" C2bcc@f))))) (set! C2aa7@current-library-expander (C29a1@C2880@make-parameter (lambda (C2bce@x) (assertion-violation 'library-expander '"not initialized")) (lambda (C2bd0@f) (if (procedure? C2bd0@f) C2bd0@f (assertion-violation 'library-expander '"not a procedure" C2bd0@f))))) (set! C2aa9@external-pending-libraries (C29a1@C2880@make-parameter '())) (set! C2aab@find-external-library (lambda (C2bd2@name) (begin (if (member C2bd2@name (C2aa9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" C2bd2@name) (void)) ((lambda (C2bd8@C2bd5 C2bd9@C2bd7) ((lambda (C2bdc@swap) (dynamic-wind C2bdc@swap (lambda () (begin ((C2aa5@library-loader) C2bd2@name) (or (C2a95@find-library-by (lambda (C2bde@x) (fast-equal? (C2a5d@library-name C2bde@x) C2bd2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" C2bd2@name)))) C2bdc@swap)) (lambda () ((lambda (C2be0@t) (begin (C2bd8@C2bd5 C2bd9@C2bd7) (set! C2bd9@C2bd7 C2be0@t))) (C2bd8@C2bd5))))) C2aa9@external-pending-libraries (cons C2bd2@name (C2aa9@external-pending-libraries)))))) (set! C2aad@find-library-by-name (lambda (C2be2@name) (or (C2a95@find-library-by (lambda (C2be4@x) (fast-equal? (C2a5d@library-name C2be4@x) C2be2@name))) (C2aab@find-external-library C2be2@name)))) (set! C2aaf@library-exists? (lambda (C2be6@name) (and (C2a95@find-library-by (lambda (C2be8@x) (fast-equal? (C2a5d@library-name C2be8@x) C2be6@name))) '#t))) (set! C2ab1@find-library-by-spec/die (lambda (C2bea@spec) ((lambda (C2bec@id) (or (C2a95@find-library-by (lambda (C2bee@x) (eq? C2bec@id (C2a59@library-id C2bee@x)))) (assertion-violation '#f '"cannot find library with required spec" C2bea@spec))) (car C2bea@spec)))) (set! C2ab3@label->binding-table (make-eq-hashtable)) (set! C2ab5@install-library-record (lambda (C2bf0@lib) (begin ((lambda (C2bf2@exp-env) (for-each (lambda (C2bf4@x) ((lambda (C2bf6@label C2bf7@binding) ((lambda (C2bfa@binding) (begin (if (hashtable-ref C2ab3@label->binding-table C2bf6@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" C2bf6@label (hashtable-ref C2ab3@label->binding-table C2bf6@label '#f) C2bfa@binding) (exit)) (void)) (hashtable-set! C2ab3@label->binding-table C2bf6@label C2bfa@binding))) ((lambda (C2bfc@t) (if (memv C2bfc@t '(global)) (cons 'global (cons C2bf0@lib (cdr C2bf7@binding))) (if (memv C2bfc@t '(global-macro)) (cons 'global-macro (cons C2bf0@lib (cdr C2bf7@binding))) (if (memv C2bfc@t '(global-macro!)) (cons 'global-macro! (cons C2bf0@lib (cdr C2bf7@binding))) C2bf7@binding)))) (car C2bf7@binding)))) (car C2bf4@x) (cdr C2bf4@x))) C2bf2@exp-env)) (C2a75@library-env C2bf0@lib)) ((C2a4b@current-library-collection) C2bf0@lib)))) (set! C2ab7@install-library (lambda (C2bfe@id C2bff@name C2c00@ver C2c01@imp* C2c02@vis* C2c03@inv* C2c04@exp-subst C2c05@exp-env C2c06@visit-proc C2c07@invoke-proc C2c08@visit-code C2c09@invoke-code C2c0a@visible? C2c0b@source-file-name) ((lambda (C2c1a@imp-lib* C2c1b@vis-lib* C2c1c@inv-lib*) (begin (if (not (and (symbol? C2bfe@id) (list? C2bff@name) (list? C2c00@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" C2bfe@id C2bff@name C2c00@ver) (void)) (if (C2aaf@library-exists? C2bff@name) (assertion-violation 'install-library '"library is already installed" C2bff@name) (void)) ((lambda (C2c20@lib) (C2ab5@install-library-record C2c20@lib)) (make-simple-struct 'library '15 (list C2bfe@id C2bff@name C2c00@ver C2c1a@imp-lib* C2c1b@vis-lib* C2c1c@inv-lib* C2c04@exp-subst C2c05@exp-env C2c06@visit-proc C2c07@invoke-proc C2c08@visit-code C2c09@invoke-code C2c0a@visible? C2c0b@source-file-name))))) (map C2ab1@find-library-by-spec/die C2c01@imp*) (map C2ab1@find-library-by-spec/die C2c02@vis*) (map C2ab1@find-library-by-spec/die C2c03@inv*)))) (set! C2ab9@imported-label->binding (lambda (C2c22@lab) (hashtable-ref C2ab3@label->binding-table C2c22@lab '#f))) (set! C2abb@invoke-library (lambda (C2c24@lib) ((lambda (C2c26@invoke) (if (procedure? C2c26@invoke) (begin (C2a7f@set-library-invoke-state! C2c24@lib (lambda () (assertion-violation 'invoke '"circularity detected" C2c24@lib))) (for-each C2abb@invoke-library (C2a6d@library-inv* C2c24@lib)) (C2a7f@set-library-invoke-state! C2c24@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" C2c24@lib))) (C2c26@invoke) (C2a7f@set-library-invoke-state! C2c24@lib '#t)) (void))) (C2a7d@library-invoke-state C2c24@lib)))) (set! C2abd@visit-library (lambda (C2c28@lib) ((lambda (C2c2a@visit) (if (procedure? C2c2a@visit) (begin (C2a7b@set-library-visit-state! C2c28@lib (lambda () (assertion-violation 'visit '"circularity detected" C2c28@lib))) (for-each C2abb@invoke-library (C2a69@library-vis* C2c28@lib)) (C2a7b@set-library-visit-state! C2c28@lib (lambda () (assertion-violation 'invoke '"first visit did not return" C2c28@lib))) (C2c2a@visit) (C2a7b@set-library-visit-state! C2c28@lib '#t)) (void))) (C2a79@library-visit-state C2c28@lib)))) (set! C2abf@invoke-library-by-spec (lambda (C2c2c@spec) (C2abb@invoke-library (C2ab1@find-library-by-spec/die C2c2c@spec)))) (set! C2ac1@installed-libraries (lambda C2c34 ((lambda (C2c35) (if (= C2c35 '1) (apply (lambda (C2c2e@all?) ((letrec ((C2c30@f (lambda (C2c32@ls) (if (null? C2c32@ls) '() (if (or C2c2e@all? (C2a89@library-visible? (car C2c32@ls))) (cons (car C2c32@ls) (C2c30@f (cdr C2c32@ls))) (C2c30@f (cdr C2c32@ls))))))) C2c30@f) ((C2a4b@current-library-collection)))) C2c34) (if (= C2c35 '0) (apply (lambda () (C2ac1@installed-libraries '#f)) C2c34) (error 'apply '"invalid arg count")))) (length C2c34)))) (set! C2ac3@library-spec (lambda (C2c36@x) (begin (if (not (C2a57@library? C2c36@x)) (assertion-violation 'library-spec '"not a library" C2c36@x) (void)) (list (C2a59@library-id C2c36@x) (C2a5d@library-name C2c36@x) (C2a61@library-version C2c36@x))))) (begin (set! C2c71@C2ac3@library-spec C2ac3@library-spec) (set! C2c70@C2ac1@installed-libraries C2ac1@installed-libraries) (set! C2c6f@C2abf@invoke-library-by-spec C2abf@invoke-library-by-spec) (set! C2c6e@C2abd@visit-library C2abd@visit-library) (set! C2c6d@C2abb@invoke-library C2abb@invoke-library) (set! C2c6c@C2ab9@imported-label->binding C2ab9@imported-label->binding) (set! C2c6b@C2ab7@install-library C2ab7@install-library) (set! C2c6a@C2ab5@install-library-record C2ab5@install-library-record) (set! C2c69@C2ab3@label->binding-table C2ab3@label->binding-table) (set! C2c68@C2ab1@find-library-by-spec/die C2ab1@find-library-by-spec/die) (set! C2c67@C2aaf@library-exists? C2aaf@library-exists?) (set! C2c66@C2aad@find-library-by-name C2aad@find-library-by-name) (set! C2c65@C2aab@find-external-library C2aab@find-external-library) (set! C2c64@C2aa9@external-pending-libraries C2aa9@external-pending-libraries) (set! C2c63@C2aa7@current-library-expander C2aa7@current-library-expander) (set! C2c62@C2aa5@library-loader C2aa5@library-loader) (set! C2c61@C2aa3@try-load-from-file C2aa3@try-load-from-file) (set! C2c60@C2aa1@current-precompiled-library-loader C2aa1@current-precompiled-library-loader) (set! C2c5f@C2a9f@serialize-all C2a9f@serialize-all) (set! C2c5e@C2a9d@file-locator C2a9d@file-locator) (set! C2c5d@C2a9b@library-name->file-name C2a9b@library-name->file-name) (set! C2c5c@C2a99@library-extensions C2a99@library-extensions) (set! C2c5b@C2a97@library-path C2a97@library-path) (set! C2c5a@C2a95@find-library-by C2a95@find-library-by) (set! C2c59@C2a93@find-dependencies C2a93@find-dependencies) (set! C2c58@C2a91@dummy C2a91@dummy) (set! C2c57@C2a8f@set-library-source-file-name! C2a8f@set-library-source-file-name!) (set! C2c56@C2a8d@library-source-file-name C2a8d@library-source-file-name) (set! C2c55@C2a8b@set-library-visible?! C2a8b@set-library-visible?!) (set! C2c54@C2a89@library-visible? C2a89@library-visible?) (set! C2c53@C2a87@set-library-invoke-code! C2a87@set-library-invoke-code!) (set! C2c52@C2a85@library-invoke-code C2a85@library-invoke-code) (set! C2c51@C2a83@set-library-visit-code! C2a83@set-library-visit-code!) (set! C2c50@C2a81@library-visit-code C2a81@library-visit-code) (set! C2c4f@C2a7f@set-library-invoke-state! C2a7f@set-library-invoke-state!) (set! C2c4e@C2a7d@library-invoke-state C2a7d@library-invoke-state) (set! C2c4d@C2a7b@set-library-visit-state! C2a7b@set-library-visit-state!) (set! C2c4c@C2a79@library-visit-state C2a79@library-visit-state) (set! C2c4b@C2a77@set-library-env! C2a77@set-library-env!) (set! C2c4a@C2a75@library-env C2a75@library-env) (set! C2c49@C2a73@set-library-subst! C2a73@set-library-subst!) (set! C2c48@C2a71@library-subst C2a71@library-subst) (set! C2c47@C2a6f@set-library-inv*! C2a6f@set-library-inv*!) (set! C2c46@C2a6d@library-inv* C2a6d@library-inv*) (set! C2c45@C2a6b@set-library-vis*! C2a6b@set-library-vis*!) (set! C2c44@C2a69@library-vis* C2a69@library-vis*) (set! C2c43@C2a67@set-library-imp*! C2a67@set-library-imp*!) (set! C2c42@C2a65@library-imp* C2a65@library-imp*) (set! C2c41@C2a63@set-library-version! C2a63@set-library-version!) (set! C2c40@C2a61@library-version C2a61@library-version) (set! C2c3f@C2a5f@set-library-name! C2a5f@set-library-name!) (set! C2c3e@C2a5d@library-name C2a5d@library-name) (set! C2c3d@C2a5b@set-library-id! C2a5b@set-library-id!) (set! C2c3c@C2a59@library-id C2a59@library-id) (set! C2c3b@C2a57@library? C2a57@library?) (set! C2c3a@C2a4d@rp C2a4d@rp) (set! C2c39@C2a4b@current-library-collection C2a4b@current-library-collection) (set! C2c38@C2a49@make-collection C2a49@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (C2c75@build-global-define C2ce6@build-lambda C2ce8@build-case-lambda C2cea@build-let C2d18@build-sequence C2d1a@build-void C2d1c@build-letrec C2d1e@build-letrec* C2d20@build-library-letrec* C2d22@build-receive) (begin (set! C2c75@build-global-define (lambda (C2d23@x) (C2d1a@build-void))) (set! C2ce6@build-lambda (lambda (C2d25@ae C2d26@vars C2d27@exp) (list 'lambda C2d26@vars C2d27@exp))) (set! C2ce8@build-case-lambda (lambda (C2d2b@ae C2d2c@vars* C2d2d@exp*) ((lambda (C2d32@build-error C2d34@build-pred C2d36@build-apply C2d38@expand-case-lambda) (begin (set! C2d32@build-error (lambda (C2d69@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! C2d34@build-pred (lambda (C2d51@ae C2d52@n C2d53@vars) (call-with-values (lambda () ((letrec ((C2d5b@f (lambda (C2d5d@vars C2d5e@count) (if (pair? C2d5d@vars) (C2d5b@f (cdr C2d5d@vars) (+ C2d5e@count '1)) (if (null? C2d5d@vars) (values C2d5e@count '=) (values C2d5e@count '>=)))))) C2d5b@f) C2d53@vars '0)) (lambda (C2d61@C2d58 C2d62@C2d5a) ((lambda (C2d65@pred C2d66@count) (list (list 'primitive C2d65@pred) C2d52@n (list 'quote C2d66@count))) C2d62@C2d5a C2d61@C2d58))))) (set! C2d36@build-apply (lambda (C2d49@ae C2d4a@g C2d4b@vars C2d4c@exp) (list '(primitive apply) (C2ce6@build-lambda C2d49@ae C2d4b@vars C2d4c@exp) C2d4a@g))) (set! C2d38@expand-case-lambda (lambda (C2d39@ae C2d3a@vars C2d3b@exp*) ((lambda (C2d3f@g C2d40@n) (list 'lambda C2d3f@g (C2cea@build-let C2d39@ae (list C2d40@n) (list (list '(primitive length) C2d3f@g)) ((letrec ((C2d43@f (lambda (C2d45@vars* C2d46@exp*) (if (null? C2d45@vars*) (C2d32@build-error C2d39@ae) (list 'if (C2d34@build-pred C2d39@ae C2d40@n (car C2d45@vars*)) (C2d36@build-apply C2d39@ae C2d3f@g (car C2d45@vars*) (car C2d46@exp*)) (C2d43@f (cdr C2d45@vars*) (cdr C2d46@exp*))))))) C2d43@f) C2d2c@vars* C2d3b@exp*)))) (gensym) (gensym)))) (if (= (length C2d2d@exp*) '1) (C2ce6@build-lambda C2d2b@ae (car C2d2c@vars*) (car C2d2d@exp*)) (C2d38@expand-case-lambda C2d2b@ae C2d2c@vars* C2d2d@exp*)))) '#f '#f '#f '#f))) (set! C2cea@build-let (lambda (C2d6b@ae C2d6c@lhs* C2d6d@rhs* C2d6e@body) (cons (C2ce6@build-lambda C2d6b@ae C2d6c@lhs* C2d6e@body) C2d6d@rhs*))) (set! C2d18@build-sequence (lambda (C2d73@ae C2d74@exps) ((letrec ((C2d77@loop (lambda (C2d79@exps) (if (null? (cdr C2d79@exps)) (car C2d79@exps) (if (equal? (car C2d79@exps) (C2d1a@build-void)) (C2d77@loop (cdr C2d79@exps)) (cons 'begin C2d79@exps)))))) C2d77@loop) C2d74@exps))) (set! C2d1a@build-void (lambda () '((primitive void)))) (set! C2d1c@build-letrec (lambda (C2d7b@ae C2d7c@vars C2d7d@val-exps C2d7e@body-exp) (if (null? C2d7c@vars) C2d7e@body-exp (list 'letrec (map list C2d7c@vars C2d7d@val-exps) C2d7e@body-exp)))) (set! C2d1e@build-letrec* (lambda (C2d83@ae C2d84@vars C2d85@val-exps C2d86@body-exp) (if (null? C2d84@vars) C2d86@body-exp (C2cea@build-let C2d83@ae C2d84@vars (map (lambda (C2d8b@x) (list 'quote '#f)) C2d84@vars) (C2d18@build-sequence C2d83@ae (append (map (lambda (C2d8d@lhs C2d8e@rhs) (list 'set! C2d8d@lhs C2d8e@rhs)) C2d84@vars C2d85@val-exps) (list C2d86@body-exp))))))) (set! C2d20@build-library-letrec* (lambda (C2d91@ae C2d92@name C2d93@vars C2d94@locs C2d95@val-exps C2d96@body-exp) (list 'library-letrec* C2d92@name (map list C2d93@vars C2d94@locs C2d95@val-exps) C2d96@body-exp))) (set! C2d22@build-receive (lambda (C2d9d@ae C2d9e@vars C2d9f@producer C2da0@body*) (begin (display '"************** in ") (cons 'receive (cons C2d9e@vars (cons C2d9f@producer C2da0@body*)))))) (begin (set! C2dae@C2d22@build-receive C2d22@build-receive) (set! C2dad@C2d20@build-library-letrec* C2d20@build-library-letrec*) (set! C2dac@C2d1e@build-letrec* C2d1e@build-letrec*) (set! C2dab@C2d1c@build-letrec C2d1c@build-letrec) (set! C2daa@C2d1a@build-void C2d1a@build-void) (set! C2da9@C2d18@build-sequence C2d18@build-sequence) (set! C2da8@C2cea@build-let C2cea@build-let) (set! C2da7@C2ce8@build-case-lambda C2ce8@build-case-lambda) (set! C2da6@C2ce6@build-lambda C2ce6@build-lambda) (set! C2da5@C2c75@build-global-define C2c75@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (C2dbd@file-options-macro C2dbf@set-cons C2dc1@set-union C2dc6@top-mark* C2dc8@top-marked? C2dca@gen-lexical C2dcc@gen-global C2dce@gen-label C2dd0@gen-top-level-label C2dd2@gen-define-label+loc C2dd4@gen-define-label C2dde@rib? C2de0@rib-sym* C2de2@set-rib-sym*! C2de4@rib-mark** C2de6@set-rib-mark**! C2de8@rib-label* C2dea@set-rib-label*! C2dec@rib-sealed/freq C2dee@set-rib-sealed/freq! C2df0@rib-cache C2df2@set-rib-cache! C2df4@dummy C2df6@make-empty-rib C2df8@extend-rib! C2dfa@extend-rib/nc! C2dfc@make-rib-map C2dfe@seal-rib! C2e00@unseal-rib! C2e02@make-full-rib C2e04@rp C2e0e@stx? C2e10@stx-expr C2e12@set-stx-expr! C2e14@stx-mark* C2e16@set-stx-mark*! C2e18@stx-subst* C2e1a@set-stx-subst*! C2e1c@stx-ae* C2e1e@set-stx-ae*! C2e20@dummy C2e22@datum->stx C2e24@gen-mark C2e26@anti-mark C2e28@anti-mark? C2e2a@mkstx C2e2c@add-mark C2e2e@add-subst C2e30@syntax-kind? C2e32@syntax-vector->list C2e34@syntax-pair? C2e36@syntax-vector? C2e38@syntax-null? C2e3a@syntax-list? C2e3c@syntax-car C2e3e@syntax-cdr C2e40@syntax->list C2e42@id? C2e44@id->sym C2e46@bound-id=? C2e48@free-id=? C2e4a@valid-bound-ids? C2e4c@distinct-bound-ids? C2e4e@bound-id-member? C2e50@self-evaluating? C2e52@strip-annotations C2e54@strip C2e56@stx->datum C2e58@id->label C2e5a@label->binding C2e5c@make-binding C2e5e@binding-type C2e60@binding-value C2e62@raise-unbound-error C2e64@syntax-type C2e72@sanitize-binding C2e74@make-variable-transformer C2e76@variable-transformer? C2e78@variable-transformer-procedure C2e7a@make-eval-transformer C2fcb@parse-define C2fcd@parse-define-syntax C2fcf@scheme-stx-hashtable C2fd1@scheme-stx C2fd3@lexical-var C2fd5@lexical-mutable? C2fd7@set-lexical-mutable! C2fd9@add-lexical C2fdb@add-lexicals C2fdd@letrec-helper C2fdf@letrec-transformer C2fe1@letrec*-transformer C2fe3@fluid-let-syntax-transformer C2fe5@type-descriptor-transformer C2fe7@record-type-descriptor-transformer C2fe9@record-constructor-descriptor-transformer C2feb@when-macro C2fed@unless-macro C2fef@if-transformer C2ff1@and-transformer C2ff3@or-transformer C2ff5@case-macro C2ff7@quote-transformer C2ff9@case-lambda-transformer C2ffb@lambda-transformer C2ffd@bless C2fff@with-syntax-macro C3001@invalid-fmls-error C3003@let-macro C3005@let-values-macro C3007@let*-values-macro C3009@trace-lambda-macro C300b@trace-define-macro C300d@trace-define-syntax-macro C300f@trace-let/rec-syntax C3011@trace-let-syntax-macro C3013@trace-letrec-syntax-macro C3015@guard-macro C3017@define-enumeration-macro C3019@time-macro C301b@delay-macro C301d@assert-macro C301f@endianness-macro C3021@identifier-syntax-macro C3023@do-macro C3025@let*-macro C3027@or-macro C3029@and-macro C302b@cond-macro C302d@do-include C302f@include-macro C3031@include-into-macro C3033@syntax-rules-macro C3035@quasiquote-macro C3037@quasisyntax-macro C3039@define-struct-macro C303b@define-record-type-macro C303d@define-condition-type-macro C303f@incorrect-usage-macro C3041@parameterize-macro C3043@foreign-call-transformer C3045@convert-pattern C3047@syntax-dispatch C3049@ellipsis? C304b@underscore? C304d@verify-literals C304f@syntax-case-transformer C3051@ellipsis-map C3053@syntax-transformer C3055@core-macro-transformer C3057@symbol-macro C3059@macro-transformer C305b@local-macro-transformer C305d@do-macro-call C305f@chi-macro C3061@chi-local-macro C3063@chi-global-macro C3065@chi-expr* C3067@chi-application C3069@chi-expr C306b@chi-set! C306d@verify-formals C306f@chi-lambda-clause C3071@chi-lambda-clause* C3073@chi-defun C3075@chi-rhs C3077@expand-interaction-rhs*/init* C3079@chi-rhs* C307b@find-bound=? C307d@find-dups C307f@chi-internal C3081@parse-module C308b@module-interface? C308d@module-interface-first-mark C308f@set-module-interface-first-mark! C3091@module-interface-exp-id-vec C3093@set-module-interface-exp-id-vec! C3095@module-interface-exp-lab-vec C3097@set-module-interface-exp-lab-vec! C3099@dummy C309b@module-interface-exp-id* C309d@chi-internal-module C309f@chi-body* C30a1@expand-transformer C30a3@parse-exports C30a5@parse-library-name C30a7@parse-library C30a9@parse-import-spec* C30ab@make-top-rib C30ad@make-collector C30af@inv-collector C30b1@vis-collector C30b3@imp-collector C30b5@chi-library-internal C30b7@chi-interaction-expr C30b9@library-body-expander C30bb@core-library-expander C30bd@parse-top-level-program C30bf@top-level-expander C30c1@rp C30cb@env? C30cd@env-names C30cf@set-env-names! C30d1@env-labels C30d3@set-env-labels! C30d5@env-itc C30d7@set-env-itc! C30d9@dummy C30db@rp C30e5@interaction-env? C30e7@interaction-env-rib C30e9@set-interaction-env-rib! C30eb@interaction-env-r C30ed@set-interaction-env-r! C30ef@interaction-env-locs C30f1@set-interaction-env-locs! C30f3@dummy C30f5@interaction-environment-symbols C30f7@environment-bindings C30f9@parse-binding C30fb@environment? C30fd@environment-symbols C30ff@environment C3101@null-environment C3103@scheme-report-environment C3105@expand C3107@eval C3109@library-expander C310b@boot-library-expand C310d@rev-map-append C310f@build-exports C3111@make-export-subst C3113@make-export-env/macros C3115@generate-temporaries C3117@free-identifier=? C3119@bound-identifier=? C311b@make-source-condition C311d@extract-position-condition C311f@expression-position C3121@assertion-error C3123@syntax-error C3125@syntax-violation* C3127@syntax-violation C3129@identifier? C312b@datum->syntax C312d@syntax->datum C312f@compile-r6rs-top-level C3131@pre-compile-r6rs-top-level C3133@interaction-environment C3135@top-level-context) (begin (set! C2dbd@file-options-macro (lambda (C3136@x) ((lambda (C3139@valid-option?) (begin (set! C3139@valid-option? (lambda (C3142@x) (and (C2e42@id? C3142@x) (memq (C2e44@id->sym C3142@x) '(no-fail no-create no-truncate))))) ((lambda (C313a@t) ((lambda (C313c@ls/false) (if (and C313c@ls/false (apply (lambda (C313e@opt*) (for-all C3139@valid-option? C313e@opt*)) C313c@ls/false)) (apply (lambda (C3140@opt*) (C2ffd@bless (list 'make-file-options (list 'quote C3140@opt*)))) C313c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C313a@t))) (C3047@syntax-dispatch C313a@t '(_ . each-any)))) C3136@x))) '#f))) (set! C2dbf@set-cons (lambda (C3144@x C3145@ls) (if (memq C3144@x C3145@ls) C3145@ls (cons C3144@x C3145@ls)))) (set! C2dc1@set-union (lambda (C3148@ls1 C3149@ls2) (if (null? C3148@ls1) C3149@ls2 (if (memq (car C3148@ls1) C3149@ls2) (C2dc1@set-union (cdr C3148@ls1) C3149@ls2) (cons (car C3148@ls1) (C2dc1@set-union (cdr C3148@ls1) C3149@ls2)))))) (set! C2dc6@top-mark* '(top)) (set! C2dc8@top-marked? (lambda (C314c@m*) (memq 'top C314c@m*))) (set! C2dca@gen-lexical (lambda (C314e@sym) (if (symbol? C314e@sym) (gensym C314e@sym) (if (C2e0e@stx? C314e@sym) (C2dca@gen-lexical (C2e44@id->sym C314e@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" C314e@sym))))) (set! C2dcc@gen-global (lambda (C3150@x) (C2dca@gen-lexical C3150@x))) (set! C2dce@gen-label (lambda (C3152@_) (gensym))) (set! C2dd0@gen-top-level-label (lambda (C3154@id C3155@rib) ((lambda (C3159@find) (begin (set! C3159@find (lambda (C3164@sym C3165@mark* C3166@sym* C3167@mark** C3168@label*) (and (pair? C3166@sym*) (if (and (eq? C3164@sym (car C3166@sym*)) (same-marks? C3165@mark* (car C3167@mark**))) (car C3168@label*) (C3159@find C3164@sym C3165@mark* (cdr C3166@sym*) (cdr C3167@mark**) (cdr C3168@label*)))))) ((lambda (C315a@sym C315b@mark*) ((lambda (C315e@sym*) ((lambda (C3160@t) (if C3160@t ((lambda (C3162@label) (if (C2c6c@C2ab9@imported-label->binding C3162@label) (gensym) C3162@label)) C3160@t) (gensym))) (and (memq C315a@sym (C2de0@rib-sym* C3155@rib)) (C3159@find C315a@sym C315b@mark* C315e@sym* (C2de4@rib-mark** C3155@rib) (C2de8@rib-label* C3155@rib))))) (C2de0@rib-sym* C3155@rib))) (C2e44@id->sym C3154@id) (C2e14@stx-mark* C3154@id)))) '#f))) (set! C2dd2@gen-define-label+loc (lambda (C316e@id C316f@rib) ((lambda (C3172@t) (if C3172@t ((lambda (C3174@env) ((lambda (C3176@label C3177@locs) (values C3176@label ((lambda (C317a@t) (if C317a@t (cdr C317a@t) ((lambda (C317c@loc) (begin (C30f1@set-interaction-env-locs! C3174@env (cons (cons C3176@label C317c@loc) C3177@locs)) C317c@loc)) (C2dca@gen-lexical C316e@id)))) (assq C3176@label C3177@locs)))) (C2dd0@gen-top-level-label C316e@id C316f@rib) (C30ef@interaction-env-locs C3174@env))) C3172@t) (values (gensym) (C2dca@gen-lexical C316e@id)))) (C3135@top-level-context)))) (set! C2dd4@gen-define-label (lambda (C317e@id C317f@rib) (if (C3135@top-level-context) (C2dd0@gen-top-level-label C317e@id C317f@rib) (gensym)))) (set! C2dde@rib? (lambda (C3182@x) (and (simple-struct? C3182@x) (eq? (simple-struct-name C3182@x) 'rib)))) (set! C2de0@rib-sym* (lambda (C3184@x) (simple-struct-ref C3184@x '0))) (set! C2de2@set-rib-sym*! (lambda (C3186@x C3187@val) (simple-struct-set! C3186@x '0 C3187@val))) (set! C2de4@rib-mark** (lambda (C318a@x) (simple-struct-ref C318a@x '1))) (set! C2de6@set-rib-mark**! (lambda (C318c@x C318d@val) (simple-struct-set! C318c@x '1 C318d@val))) (set! C2de8@rib-label* (lambda (C3190@x) (simple-struct-ref C3190@x '2))) (set! C2dea@set-rib-label*! (lambda (C3192@x C3193@val) (simple-struct-set! C3192@x '2 C3193@val))) (set! C2dec@rib-sealed/freq (lambda (C3196@x) (simple-struct-ref C3196@x '3))) (set! C2dee@set-rib-sealed/freq! (lambda (C3198@x C3199@val) (simple-struct-set! C3198@x '3 C3199@val))) (set! C2df0@rib-cache (lambda (C319c@x) (simple-struct-ref C319c@x '4))) (set! C2df2@set-rib-cache! (lambda (C319e@x C319f@val) (simple-struct-set! C319e@x '4 C319f@val))) (set! C2df4@dummy '3) (set! C2df6@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! C2df8@extend-rib! (lambda (C31a2@rib C31a3@id C31a4@label) ((lambda (C31a9@find) (begin (set! C31a9@find (lambda (C31b6@sym C31b7@mark* C31b8@sym* C31b9@mark** C31ba@label*) (and (pair? C31b8@sym*) (if (and (eq? C31b6@sym (car C31b8@sym*)) (same-marks? C31b7@mark* (car C31b9@mark**))) C31ba@label* (C31a9@find C31b6@sym C31b7@mark* (cdr C31b8@sym*) (cdr C31b9@mark**) (cdr C31ba@label*)))))) (begin (if (C2dec@rib-sealed/freq C31a2@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" C31a2@rib) (void)) ((lambda (C31aa@sym C31ab@mark*) ((lambda (C31ae@sym*) ((lambda (C31b0@t) (if C31b0@t ((lambda (C31b2@p) (if (not (eq? C31a4@label (car C31b2@p))) (if (C3135@top-level-context) (set-car! C31b2@p C31a4@label) (C3127@syntax-violation '#f '"multiple definitions of identifier" C31a3@id)) (void))) C31b0@t) (begin (if (C2df0@rib-cache C31a2@rib) (hashtable-update! (C2df0@rib-cache C31a2@rib) C31aa@sym (lambda (C31b4@e) (cons (cons C31ab@mark* C31a4@label) C31b4@e)) '()) (void)) (C2de2@set-rib-sym*! C31a2@rib (cons C31aa@sym C31ae@sym*)) (C2de6@set-rib-mark**! C31a2@rib (cons C31ab@mark* (C2de4@rib-mark** C31a2@rib))) (C2dea@set-rib-label*! C31a2@rib (cons C31a4@label (C2de8@rib-label* C31a2@rib)))))) (and (memq C31aa@sym (C2de0@rib-sym* C31a2@rib)) (C31a9@find C31aa@sym C31ab@mark* C31ae@sym* (C2de4@rib-mark** C31a2@rib) (C2de8@rib-label* C31a2@rib))))) (C2de0@rib-sym* C31a2@rib))) (C2e44@id->sym C31a3@id) (C2e14@stx-mark* C31a3@id))))) '#f))) (set! C2dfa@extend-rib/nc! (lambda (C31c0@rib C31c1@id C31c2@label) ((lambda (C31c6@sym C31c7@mark*) ((lambda (C31ca@sym*) (begin (if (C2df0@rib-cache C31c0@rib) (hashtable-update! (C2df0@rib-cache C31c0@rib) C31c6@sym (lambda (C31cc@e) (cons (cons C31c7@mark* C31c2@label) C31cc@e)) '()) (void)) (C2de2@set-rib-sym*! C31c0@rib (cons C31c6@sym C31ca@sym*)) (C2de6@set-rib-mark**! C31c0@rib (cons C31c7@mark* (C2de4@rib-mark** C31c0@rib))) (C2dea@set-rib-label*! C31c0@rib (cons C31c2@label (C2de8@rib-label* C31c0@rib))))) (C2de0@rib-sym* C31c0@rib))) (C2e44@id->sym C31c1@id) (C2e14@stx-mark* C31c1@id)))) (set! C2dfc@make-rib-map (lambda (C31ce@sym*) ((lambda (C31d0@ht) ((letrec ((C31d2@f (lambda (C31d4@i C31d5@sym*) (if (null? C31d5@sym*) C31d0@ht (begin (hashtable-update! C31d0@ht (car C31d5@sym*) (lambda (C31d8@x) (cons C31d4@i C31d8@x)) '()) (C31d2@f (+ C31d4@i '1) (cdr C31d5@sym*))))))) C31d2@f) '0 C31ce@sym*)) (make-eq-hashtable)))) (set! C2dfe@seal-rib! (lambda (C31da@rib) ((lambda (C31dc@sym*) (if (not (null? C31dc@sym*)) (begin (C2de2@set-rib-sym*! C31da@rib (list->vector C31dc@sym*)) (C2de6@set-rib-mark**! C31da@rib (list->vector (C2de4@rib-mark** C31da@rib))) (C2dea@set-rib-label*! C31da@rib (list->vector (C2de8@rib-label* C31da@rib))) (C2dee@set-rib-sealed/freq! C31da@rib (C2dfc@make-rib-map C31dc@sym*))) (void))) (C2de0@rib-sym* C31da@rib)))) (set! C2e00@unseal-rib! (lambda (C31de@rib) (if (C2dec@rib-sealed/freq C31de@rib) (begin (C2dee@set-rib-sealed/freq! C31de@rib '#f) (C2de2@set-rib-sym*! C31de@rib (vector->list (C2de0@rib-sym* C31de@rib))) (C2de6@set-rib-mark**! C31de@rib (vector->list (C2de4@rib-mark** C31de@rib))) (C2dea@set-rib-label*! C31de@rib (vector->list (C2de8@rib-label* C31de@rib)))) (void)))) (set! C2e02@make-full-rib (lambda (C31e0@id* C31e1@label*) ((lambda (C31e4@r) (begin (C2dfe@seal-rib! C31e4@r) C31e4@r)) (make-simple-struct 'rib '6 (list (map C2e44@id->sym C31e0@id*) (map C2e14@stx-mark* C31e0@id*) C31e1@label* '#f '#f))))) (set! C2e04@rp (C299e@C287a@make-record-printer 'stx (lambda (C31e6@x C31e7@p C31e8@wr) (begin (display '"#<syntax " C31e7@p) (write (C2e56@stx->datum C31e6@x) C31e7@p) ((lambda (C31ec@expr) (if (C2996@C286a@annotation? C31ec@expr) ((lambda (C31ee@src) (if (pair? C31ee@src) (begin (display '" [" C31e7@p) (display (cdr C31ee@src) C31e7@p) (display '" of " C31e7@p) (display (car C31ee@src) C31e7@p) (display '"]" C31e7@p)) (void))) (C2997@C286c@annotation-source C31ec@expr)) (void))) (C2e10@stx-expr C31e6@x)) (display '">" C31e7@p))))) (set! C2e0e@stx? (lambda (C31f0@x) (and (simple-struct? C31f0@x) (eq? (simple-struct-name C31f0@x) 'stx)))) (set! C2e10@stx-expr (lambda (C31f2@x) (simple-struct-ref C31f2@x '0))) (set! C2e12@set-stx-expr! (lambda (C31f4@x C31f5@val) (simple-struct-set! C31f4@x '0 C31f5@val))) (set! C2e14@stx-mark* (lambda (C31f8@x) (simple-struct-ref C31f8@x '1))) (set! C2e16@set-stx-mark*! (lambda (C31fa@x C31fb@val) (simple-struct-set! C31fa@x '1 C31fb@val))) (set! C2e18@stx-subst* (lambda (C31fe@x) (simple-struct-ref C31fe@x '2))) (set! C2e1a@set-stx-subst*! (lambda (C3200@x C3201@val) (simple-struct-set! C3200@x '2 C3201@val))) (set! C2e1c@stx-ae* (lambda (C3204@x) (simple-struct-ref C3204@x '3))) (set! C2e1e@set-stx-ae*! (lambda (C3206@x C3207@val) (simple-struct-set! C3206@x '3 C3207@val))) (set! C2e20@dummy '3) (set! C2e22@datum->stx (lambda (C320a@id C320b@datum) (make-simple-struct 'stx '5 (list C320b@datum (C2e14@stx-mark* C320a@id) (C2e18@stx-subst* C320a@id) (C2e1c@stx-ae* C320a@id))))) (set! C2e24@gen-mark (lambda () (string '#\m))) (set! C2e26@anti-mark '#f) (set! C2e28@anti-mark? not) (set! C2e2a@mkstx (lambda (C320e@e C320f@m* C3210@s* C3211@ae*) (if (and (C2e0e@stx? C320e@e) (not (C2dc8@top-marked? C320f@m*))) (call-with-values (lambda () (join-wraps C320f@m* C3210@s* C3211@ae* C320e@e)) (lambda (C321c@C3217 C321d@C3219 C321e@C321b) ((lambda (C3222@ae* C3223@s* C3224@m*) (make-simple-struct 'stx '5 (list (C2e10@stx-expr C320e@e) C3224@m* C3223@s* C3222@ae*))) C321e@C321b C321d@C3219 C321c@C3217))) (make-simple-struct 'stx '5 (list C320e@e C320f@m* C3210@s* C3211@ae*))))) (set! C2e2c@add-mark (lambda (C3228@m C3229@e C322a@ae) (C2e2a@mkstx C3229@e (list C3228@m) '(shift) (list C322a@ae)))) (set! C2e2e@add-subst (lambda (C322e@subst C322f@e) (C2e2a@mkstx C322f@e '() (list C322e@subst) '()))) (set! C2e30@syntax-kind? (lambda (C3232@x C3233@p?) (if (C2e0e@stx? C3232@x) (C2e30@syntax-kind? (C2e10@stx-expr C3232@x) C3233@p?) (if (C2996@C286a@annotation? C3232@x) (C2e30@syntax-kind? (C2998@C286e@annotation-expression C3232@x) C3233@p?) (C3233@p? C3232@x))))) (set! C2e32@syntax-vector->list (lambda (C3236@x) (if (C2e0e@stx? C3236@x) ((lambda (C3238@ls C3239@m* C323a@s* C323b@ae*) (map (lambda (C3240@x) (C2e2a@mkstx C3240@x C3239@m* C323a@s* C323b@ae*)) C3238@ls)) (C2e32@syntax-vector->list (C2e10@stx-expr C3236@x)) (C2e14@stx-mark* C3236@x) (C2e18@stx-subst* C3236@x) (C2e1c@stx-ae* C3236@x)) (if (C2996@C286a@annotation? C3236@x) (C2e32@syntax-vector->list (C2998@C286e@annotation-expression C3236@x)) (if (vector? C3236@x) (vector->list C3236@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" C3236@x)))))) (set! C2e34@syntax-pair? (lambda (C3242@x) (C2e30@syntax-kind? C3242@x pair?))) (set! C2e36@syntax-vector? (lambda (C3244@x) (C2e30@syntax-kind? C3244@x vector?))) (set! C2e38@syntax-null? (lambda (C3246@x) (C2e30@syntax-kind? C3246@x null?))) (set! C2e3a@syntax-list? (lambda (C3248@x) (or (C2e38@syntax-null? C3248@x) (and (C2e34@syntax-pair? C3248@x) (C2e3a@syntax-list? (C2e3e@syntax-cdr C3248@x)))))) (set! C2e3c@syntax-car (lambda (C324a@x) (if (C2e0e@stx? C324a@x) (C2e2a@mkstx (C2e3c@syntax-car (C2e10@stx-expr C324a@x)) (C2e14@stx-mark* C324a@x) (C2e18@stx-subst* C324a@x) (C2e1c@stx-ae* C324a@x)) (if (C2996@C286a@annotation? C324a@x) (C2e3c@syntax-car (C2998@C286e@annotation-expression C324a@x)) (if (pair? C324a@x) (car C324a@x) (assertion-violation 'syntax-car '"BUG: not a pair" C324a@x)))))) (set! C2e3e@syntax-cdr (lambda (C324c@x) (if (C2e0e@stx? C324c@x) (C2e2a@mkstx (C2e3e@syntax-cdr (C2e10@stx-expr C324c@x)) (C2e14@stx-mark* C324c@x) (C2e18@stx-subst* C324c@x) (C2e1c@stx-ae* C324c@x)) (if (C2996@C286a@annotation? C324c@x) (C2e3e@syntax-cdr (C2998@C286e@annotation-expression C324c@x)) (if (pair? C324c@x) (cdr C324c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" C324c@x)))))) (set! C2e40@syntax->list (lambda (C324e@x) (if (C2e34@syntax-pair? C324e@x) (cons (C2e3c@syntax-car C324e@x) (C2e40@syntax->list (C2e3e@syntax-cdr C324e@x))) (if (C2e38@syntax-null? C324e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" C324e@x))))) (set! C2e42@id? (lambda (C3250@x) (and (C2e0e@stx? C3250@x) (symbol? (C2e10@stx-expr C3250@x))))) (set! C2e44@id->sym (lambda (C3252@x) (C2e10@stx-expr C3252@x))) (set! C2e46@bound-id=? (lambda (C3254@x C3255@y) (and (eq? (C2e44@id->sym C3254@x) (C2e44@id->sym C3255@y)) (same-marks? (C2e14@stx-mark* C3254@x) (C2e14@stx-mark* C3255@y))))) (set! C2e48@free-id=? (lambda (C3258@i C3259@j) ((lambda (C325c@t0 C325d@t1) (if (or C325c@t0 C325d@t1) (eq? C325c@t0 C325d@t1) (eq? (C2e44@id->sym C3258@i) (C2e44@id->sym C3259@j)))) (id->real-label C3258@i) (id->real-label C3259@j)))) (set! C2e4a@valid-bound-ids? (lambda (C3260@id*) (and (for-all C2e42@id? C3260@id*) (C2e4c@distinct-bound-ids? C3260@id*)))) (set! C2e4c@distinct-bound-ids? (lambda (C3262@id*) (or (null? C3262@id*) (and (not (C2e4e@bound-id-member? (car C3262@id*) (cdr C3262@id*))) (C2e4c@distinct-bound-ids? (cdr C3262@id*)))))) (set! C2e4e@bound-id-member? (lambda (C3264@id C3265@id*) (and (pair? C3265@id*) (or (C2e46@bound-id=? C3264@id (car C3265@id*)) (C2e4e@bound-id-member? C3264@id (cdr C3265@id*)))))) (set! C2e50@self-evaluating? (lambda (C3268@x) (or (number? C3268@x) (string? C3268@x) (char? C3268@x) (boolean? C3268@x) (regexp? C3268@x) (bytevector? C3268@x)))) (set! C2e52@strip-annotations (lambda (C326a@x) (if (pair? C326a@x) (cons (C2e52@strip-annotations (car C326a@x)) (C2e52@strip-annotations (cdr C326a@x))) (if (vector? C326a@x) (vector-map C2e52@strip-annotations C326a@x) (if (C2996@C286a@annotation? C326a@x) (C2995@C2868@annotation-stripped C326a@x) C326a@x))))) (set! C2e54@strip (lambda (C326c@x C326d@m*) (if (C2dc8@top-marked? C326d@m*) (if (or (C2996@C286a@annotation? C326c@x) (and (pair? C326c@x) (C2996@C286a@annotation? (car C326c@x))) (and (vector? C326c@x) (> (vector-length C326c@x) '0) (C2996@C286a@annotation? (vector-ref C326c@x '0)))) (C2e52@strip-annotations C326c@x) C326c@x) ((letrec ((C3270@f (lambda (C3272@x) (if (C2e0e@stx? C3272@x) (C2e54@strip (C2e10@stx-expr C3272@x) (C2e14@stx-mark* C3272@x)) (if (C2996@C286a@annotation? C3272@x) (C2995@C2868@annotation-stripped C3272@x) (if (pair? C3272@x) ((lambda (C3274@a C3275@d) (if (and (eq? C3274@a (car C3272@x)) (eq? C3275@d (cdr C3272@x))) C3272@x (cons C3274@a C3275@d))) (C3270@f (car C3272@x)) (C3270@f (cdr C3272@x))) (if (vector? C3272@x) ((lambda (C3278@old) ((lambda (C327a@new) (if (for-all eq? C3278@old C327a@new) C3272@x (list->vector C327a@new))) (map C3270@f C3278@old))) (vector->list C3272@x)) C3272@x))))))) C3270@f) C326c@x)))) (set! C2e56@stx->datum (lambda (C327c@x) (C2e54@strip C327c@x '()))) (set! C2e58@id->label (lambda (C327e@id) (or (id->real-label C327e@id) ((lambda (C3280@t) (if C3280@t ((lambda (C3282@env) ((lambda (C3284@rib) (call-with-values (lambda () (C2dd2@gen-define-label+loc C327e@id C3284@rib)) (lambda (C328a@C3287 C328b@C3289) ((lambda (C328e@loc_ C328f@lab) (begin (C2df8@extend-rib! C3284@rib C327e@id C328f@lab) C328f@lab)) C328b@C3289 C328a@C3287)))) (C30e7@interaction-env-rib C3282@env))) C3280@t) '#f)) (C3135@top-level-context))))) (set! C2e5a@label->binding (lambda (C3292@x C3293@r) ((lambda (C3296@t) (if C3296@t ((lambda (C3298@b) (if (and (pair? C3298@b) (eq? (car C3298@b) '$core-rtd)) (cons '$rtd (map C2ffd@bless (cdr C3298@b))) (if (and (pair? C3298@b) (eq? (car C3298@b) 'global-rtd)) ((lambda (C329a@lib C329b@loc) (cons '$rtd (symbol-value C329b@loc))) (cadr C3298@b) (cddr C3298@b)) C3298@b))) C3296@t) ((lambda (C329e@t) (if C329e@t (cdr C329e@t) ((lambda (C32a0@t) (if C32a0@t ((lambda (C32a2@env) ((lambda (C32a4@t) (if C32a4@t ((lambda (C32a6@p) (cons* 'lexical (cdr C32a6@p) '#f)) C32a4@t) '(displaced-lexical . #f))) (assq C3292@x (C30ef@interaction-env-locs C32a2@env)))) C32a0@t) '(displaced-lexical . #f))) (C3135@top-level-context)))) (assq C3292@x C3293@r)))) (C2c6c@C2ab9@imported-label->binding C3292@x)))) (set! C2e5c@make-binding cons) (set! C2e5e@binding-type car) (set! C2e60@binding-value cdr) (set! C2e62@raise-unbound-error (lambda (C32a8@id) (C3125@syntax-violation* '#f '"unbound identifier" C32a8@id (C4e86@C4ccc@make-undefined-violation)))) (set! C2e64@syntax-type (lambda (C32aa@e C32ab@r) (if (C2e42@id? C32aa@e) ((lambda (C32ae@id) ((lambda (C32b0@label) ((lambda (C32b2@b) ((lambda (C32b4@type) ((lambda () (begin (if (not C32b0@label) (C2e62@raise-unbound-error C32ae@id) (void)) ((lambda (C32b6@t) (if (memv C32b6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values C32b4@type (C2e60@binding-value C32b2@b) C32ae@id) (values 'other '#f '#f))) C32b4@type))))) (C2e5e@binding-type C32b2@b))) (C2e5a@label->binding C32b0@label C32ab@r))) (C2e58@id->label C32ae@id))) C32aa@e) (if (C2e34@syntax-pair? C32aa@e) ((lambda (C32b8@id) (if (C2e42@id? C32b8@id) ((lambda (C32ba@label) ((lambda (C32bc@b) ((lambda (C32be@type) ((lambda () (begin (if (not C32ba@label) (C2e62@raise-unbound-error C32b8@id) (void)) ((lambda (C32c0@t) (if (memv C32c0@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values C32be@type (C2e60@binding-value C32bc@b) C32b8@id) (values 'call '#f '#f))) C32be@type))))) (C2e5e@binding-type C32bc@b))) (C2e5a@label->binding C32ba@label C32ab@r))) (C2e58@id->label C32b8@id)) (values 'call '#f '#f))) (C2e3c@syntax-car C32aa@e)) ((lambda (C32c2@d) (if (C2e50@self-evaluating? C32c2@d) (values 'constant C32c2@d '#f) (values 'other '#f '#f))) (C2e56@stx->datum C32aa@e)))))) (set! C2e72@sanitize-binding (lambda (C32c4@x C32c5@src) (if (procedure? C32c4@x) (cons* 'local-macro C32c4@x C32c5@src) (if (and (pair? C32c4@x) (eq? (car C32c4@x) 'macro!) (procedure? (cdr C32c4@x))) (cons* 'local-macro! (cdr C32c4@x) C32c5@src) (if (and (pair? C32c4@x) (eq? (car C32c4@x) '$rtd)) C32c4@x (assertion-violation 'expand '"invalid transformer" C32c4@x)))))) (set! C2e74@make-variable-transformer (lambda (C32c8@x) (if (procedure? C32c8@x) (cons 'macro! C32c8@x) (assertion-violation 'make-variable-transformer '"not a procedure" C32c8@x)))) (set! C2e76@variable-transformer? (lambda (C32ca@x) (and (pair? C32ca@x) (eq? (car C32ca@x) 'macro!) (procedure? (cdr C32ca@x))))) (set! C2e78@variable-transformer-procedure (lambda (C32cc@x) (if (C2e76@variable-transformer? C32cc@x) (cdr C32cc@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" C32cc@x)))) (set! C2e7a@make-eval-transformer (lambda (C32ce@x) (C2e72@sanitize-binding (eval-core (C29f7@C29af@expanded->core C32ce@x)) C32ce@x))) (set! C2fcb@parse-define (lambda (C32d0@x) ((lambda (C32d2@t) ((lambda (C32d4@ls/false) (if (and C32d4@ls/false (apply (lambda (C32d6@id C32d7@fmls C32d8@b C32d9@b*) (C2e42@id? C32d6@id)) C32d4@ls/false)) (apply (lambda (C32de@id C32df@fmls C32e0@b C32e1@b*) (begin (C306d@verify-formals C32df@fmls C32d0@x) (values C32de@id (cons 'defun (cons C32df@fmls (cons C32e0@b C32e1@b*)))))) C32d4@ls/false) ((lambda (C32e6@t) ((lambda (C32e8@ls/false) (if (and C32e8@ls/false (apply (lambda (C32ea@id C32eb@val) (C2e42@id? C32ea@id)) C32e8@ls/false)) (apply (lambda (C32ee@id C32ef@val) (values C32ee@id (cons 'expr C32ef@val))) C32e8@ls/false) ((lambda (C32f2@t) ((lambda (C32f4@ls/false) (if (and C32f4@ls/false (apply (lambda (C32f6@id) (C2e42@id? C32f6@id)) C32f4@ls/false)) (apply (lambda (C32f8@id) (values C32f8@id (cons 'expr (C2ffd@bless '(void))))) C32f4@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C32f2@t))) (C3047@syntax-dispatch C32f2@t '(_ any)))) C32e6@t))) (C3047@syntax-dispatch C32e6@t '(_ any any)))) C32d2@t))) (C3047@syntax-dispatch C32d2@t '(_ (any . any) any . each-any)))) C32d0@x))) (set! C2fcd@parse-define-syntax (lambda (C32fa@x) ((lambda (C32fc@t) ((lambda (C32fe@ls/false) (if (and C32fe@ls/false (apply (lambda (C3300@id C3301@val) (C2e42@id? C3300@id)) C32fe@ls/false)) (apply (lambda (C3304@id C3305@val) (values C3304@id C3305@val)) C32fe@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C32fc@t))) (C3047@syntax-dispatch C32fc@t '(_ any any)))) C32fa@x))) (set! C2fcf@scheme-stx-hashtable (make-eq-hashtable)) (set! C2fd1@scheme-stx (lambda (C3308@sym) (or (hashtable-ref C2fcf@scheme-stx-hashtable C3308@sym '#f) ((lambda (C330a@subst) ((lambda (C330c@stx) ((lambda (C330e@stx) ((lambda () (begin (hashtable-set! C2fcf@scheme-stx-hashtable C3308@sym C330e@stx) C330e@stx)))) ((lambda (C3310@t) (if C3310@t ((lambda (C3312@x) ((lambda (C3314@name C3315@label) (C2e2e@add-subst (make-simple-struct 'rib '6 (list (list C3314@name) (list C2dc6@top-mark*) (list C3315@label) '#f '#f)) C330c@stx)) (car C3312@x) (cdr C3312@x))) C3310@t) C330c@stx)) (assq C3308@sym C330a@subst)))) (make-simple-struct 'stx '5 (list C3308@sym C2dc6@top-mark* '() '())))) (C2c48@C2a71@library-subst (C2c66@C2aad@find-library-by-name '(psyntax system $all))))))) (set! C2fd3@lexical-var car) (set! C2fd5@lexical-mutable? cdr) (set! C2fd7@set-lexical-mutable! set-cdr!) (set! C2fd9@add-lexical (lambda (C3318@lab C3319@lex C331a@r) (cons (cons* C3318@lab 'lexical C3319@lex '#f) C331a@r))) (set! C2fdb@add-lexicals (lambda (C331e@lab* C331f@lex* C3320@r) (if (null? C331e@lab*) C3320@r (C2fdb@add-lexicals (cdr C331e@lab*) (cdr C331f@lex*) (C2fd9@add-lexical (car C331e@lab*) (car C331f@lex*) C3320@r))))) (set! C2fdd@letrec-helper (lambda (C3324@e C3325@r C3326@mr C3327@build) ((lambda (C332c@t) ((lambda (C332e@ls/false) (if C332e@ls/false (apply (lambda (C3330@lhs* C3331@rhs* C3332@b C3333@b*) (if (not (C2e4a@valid-bound-ids? C3330@lhs*)) (C3001@invalid-fmls-error C3324@e C3330@lhs*) ((lambda (C3338@lex* C3339@lab*) ((lambda (C333c@rib C333d@r) ((lambda (C3340@body C3341@rhs*) (C3327@build '#f C3338@lex* C3341@rhs* C3340@body)) (C307f@chi-internal (C2e2e@add-subst C333c@rib (cons C3332@b C3333@b*)) C333d@r C3326@mr) (C3065@chi-expr* (map (lambda (C3344@x) (C2e2e@add-subst C333c@rib C3344@x)) C3331@rhs*) C333d@r C3326@mr))) (C2e02@make-full-rib C3330@lhs* C3339@lab*) (C2fdb@add-lexicals C3339@lab* C3338@lex* C3325@r))) (map C2dca@gen-lexical C3330@lhs*) (map C2dce@gen-label C3330@lhs*)))) C332e@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C332c@t))) (C3047@syntax-dispatch C332c@t '(_ #(each (any any)) any . each-any)))) C3324@e))) (set! C2fdf@letrec-transformer (lambda (C3346@e C3347@r C3348@mr) (C2fdd@letrec-helper C3346@e C3347@r C3348@mr C2dab@C2d1c@build-letrec))) (set! C2fe1@letrec*-transformer (lambda (C334c@e C334d@r C334e@mr) (C2fdd@letrec-helper C334c@e C334d@r C334e@mr C2dac@C2d1e@build-letrec*))) (set! C2fe3@fluid-let-syntax-transformer (lambda (C3352@e C3353@r C3354@mr) ((lambda (C3359@lookup) (begin (set! C3359@lookup (lambda (C336c@x) (or (C2e58@id->label C336c@x) (C3127@syntax-violation '#f '"unbound identifier" C3352@e C336c@x)))) ((lambda (C335a@t) ((lambda (C335c@ls/false) (if C335c@ls/false (apply (lambda (C335e@lhs* C335f@rhs* C3360@b C3361@b*) (if (not (C2e4a@valid-bound-ids? C335e@lhs*)) (C3001@invalid-fmls-error C3352@e C335e@lhs*) ((lambda (C3366@lab* C3367@rhs*) (C307f@chi-internal (cons C3360@b C3361@b*) (append (map cons C3366@lab* C3367@rhs*) C3353@r) (append (map cons C3366@lab* C3367@rhs*) C3354@mr))) (map C3359@lookup C335e@lhs*) (map (lambda (C336a@x) (C2e7a@make-eval-transformer (C30a1@expand-transformer C336a@x C3354@mr))) C335f@rhs*)))) C335c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C335a@t))) (C3047@syntax-dispatch C335a@t '(_ #(each (any any)) any . each-any)))) C3352@e))) '#f))) (set! C2fe5@type-descriptor-transformer (lambda (C336e@e C336f@r C3370@mr) ((lambda (C3374@t) ((lambda (C3376@ls/false) (if (and C3376@ls/false (apply (lambda (C3378@id) (C2e42@id? C3378@id)) C3376@ls/false)) (apply (lambda (C337a@id) ((lambda (C337c@lab) ((lambda (C337e@b) ((lambda (C3380@type) ((lambda () (begin (if (not C337c@lab) (C2e62@raise-unbound-error C337a@id) (void)) (if (not (and (eq? C3380@type '$rtd) (not (list? (C2e60@binding-value C337e@b))))) (C3127@syntax-violation '#f '"not a record type" C336e@e) (void)) (list 'quote (C2e60@binding-value C337e@b)))))) (C2e5e@binding-type C337e@b))) (C2e5a@label->binding C337c@lab C336f@r))) (C2e58@id->label C337a@id))) C3376@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3374@t))) (C3047@syntax-dispatch C3374@t '(_ any)))) C336e@e))) (set! C2fe7@record-type-descriptor-transformer (lambda (C3382@e C3383@r C3384@mr) ((lambda (C3388@t) ((lambda (C338a@ls/false) (if (and C338a@ls/false (apply (lambda (C338c@id) (C2e42@id? C338c@id)) C338a@ls/false)) (apply (lambda (C338e@id) ((lambda (C3390@lab) ((lambda (C3392@b) ((lambda (C3394@type) ((lambda () (begin (if (not C3390@lab) (C2e62@raise-unbound-error C338e@id) (void)) (if (not (and (eq? C3394@type '$rtd) (list? (C2e60@binding-value C3392@b)))) (C3127@syntax-violation '#f '"not a record type" C3382@e) (void)) (C3069@chi-expr (car (C2e60@binding-value C3392@b)) C3383@r C3384@mr))))) (C2e5e@binding-type C3392@b))) (C2e5a@label->binding C3390@lab C3383@r))) (C2e58@id->label C338e@id))) C338a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3388@t))) (C3047@syntax-dispatch C3388@t '(_ any)))) C3382@e))) (set! C2fe9@record-constructor-descriptor-transformer (lambda (C3396@e C3397@r C3398@mr) ((lambda (C339c@t) ((lambda (C339e@ls/false) (if (and C339e@ls/false (apply (lambda (C33a0@id) (C2e42@id? C33a0@id)) C339e@ls/false)) (apply (lambda (C33a2@id) ((lambda (C33a4@lab) ((lambda (C33a6@b) ((lambda (C33a8@type) ((lambda () (begin (if (not C33a4@lab) (C2e62@raise-unbound-error C33a2@id) (void)) (if (not (and (eq? C33a8@type '$rtd) (list? (C2e60@binding-value C33a6@b)))) (C3127@syntax-violation '#f '"invalid type" C3396@e) (void)) (C3069@chi-expr (cadr (C2e60@binding-value C33a6@b)) C3397@r C3398@mr))))) (C2e5e@binding-type C33a6@b))) (C2e5a@label->binding C33a4@lab C3397@r))) (C2e58@id->label C33a2@id))) C339e@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C339c@t))) (C3047@syntax-dispatch C339c@t '(_ any)))) C3396@e))) (set! C2feb@when-macro (lambda (C33aa@e) ((lambda (C33ac@t) ((lambda (C33ae@ls/false) (if C33ae@ls/false (apply (lambda (C33b0@test C33b1@e C33b2@e*) (C2ffd@bless (list 'if C33b0@test (cons 'begin (cons C33b1@e C33b2@e*))))) C33ae@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C33ac@t))) (C3047@syntax-dispatch C33ac@t '(_ any any . each-any)))) C33aa@e))) (set! C2fed@unless-macro (lambda (C33b6@e) ((lambda (C33b8@t) ((lambda (C33ba@ls/false) (if C33ba@ls/false (apply (lambda (C33bc@test C33bd@e C33be@e*) (C2ffd@bless (list 'if (list 'not C33bc@test) (cons 'begin (cons C33bd@e C33be@e*))))) C33ba@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C33b8@t))) (C3047@syntax-dispatch C33b8@t '(_ any any . each-any)))) C33b6@e))) (set! C2fef@if-transformer (lambda (C33c2@e C33c3@r C33c4@mr) ((lambda (C33c8@t) ((lambda (C33ca@ls/false) (if C33ca@ls/false (apply (lambda (C33cc@e0 C33cd@e1 C33ce@e2) (list 'if (C3069@chi-expr C33cc@e0 C33c3@r C33c4@mr) (C3069@chi-expr C33cd@e1 C33c3@r C33c4@mr) (C3069@chi-expr C33ce@e2 C33c3@r C33c4@mr))) C33ca@ls/false) ((lambda (C33d2@t) ((lambda (C33d4@ls/false) (if C33d4@ls/false (apply (lambda (C33d6@e0 C33d7@e1) (list 'if (C3069@chi-expr C33d6@e0 C33c3@r C33c4@mr) (C3069@chi-expr C33d7@e1 C33c3@r C33c4@mr) (C2daa@C2d1a@build-void))) C33d4@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C33d2@t))) (C3047@syntax-dispatch C33d2@t '(_ any any)))) C33c8@t))) (C3047@syntax-dispatch C33c8@t '(_ any any any)))) C33c2@e))) (set! C2ff1@and-transformer (lambda (C33da@e C33db@r C33dc@mr) ((lambda (C33e0@t) ((lambda (C33e2@ls/false) (if C33e2@ls/false (apply (lambda (C33e4@e*) (cons 'and (C3065@chi-expr* C33e4@e* C33db@r C33dc@mr))) C33e2@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C33e0@t))) (C3047@syntax-dispatch C33e0@t '(_ . each-any)))) C33da@e))) (set! C2ff3@or-transformer (lambda (C33e6@e C33e7@r C33e8@mr) ((lambda (C33ec@t) ((lambda (C33ee@ls/false) (if C33ee@ls/false (apply (lambda (C33f0@e*) (cons 'or (C3065@chi-expr* C33f0@e* C33e7@r C33e8@mr))) C33ee@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C33ec@t))) (C3047@syntax-dispatch C33ec@t '(_ . each-any)))) C33e6@e))) (set! C2ff5@case-macro (lambda (C33f2@e) ((lambda (C33f5@build-last C33f7@build-one) (begin (set! C33f5@build-last (lambda (C341c@cls) ((lambda (C341e@t) ((lambda (C3420@ls/false) (if C3420@ls/false (apply (lambda (C3422@e C3423@e*) (cons 'begin (cons C3422@e C3423@e*))) C3420@ls/false) ((lambda (C3426@t) ((lambda (C3428@ls/false) (if C3428@ls/false (apply (lambda () (C33f7@build-one C341c@cls '(if #f #f))) C3428@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3426@t))) (C3047@syntax-dispatch C3426@t '_))) C341e@t))) (C3047@syntax-dispatch C341e@t '(#(scheme-id else) any . each-any)))) C341c@cls))) (set! C33f7@build-one (lambda (C340e@cls C340f@k) ((lambda (C3412@t) ((lambda (C3414@ls/false) (if C3414@ls/false (apply (lambda (C3416@d* C3417@e C3418@e*) (list 'if (list 'memv 't (list 'quote C3416@d*)) (cons 'begin (cons C3417@e C3418@e*)) C340f@k)) C3414@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3412@t))) (C3047@syntax-dispatch C3412@t '(each-any any . each-any)))) C340e@cls))) ((lambda (C33f8@t) ((lambda (C33fa@ls/false) (if C33fa@ls/false (apply (lambda (C33fc@expr) (C2ffd@bless (cons 'let (cons (list (list 't C33fc@expr)) '((if #f #f)))))) C33fa@ls/false) ((lambda (C33fe@t) ((lambda (C3400@ls/false) (if C3400@ls/false (apply (lambda (C3402@expr C3403@cls C3404@cls*) (C2ffd@bless (list 'let (list (list 't C3402@expr)) ((letrec ((C3408@f (lambda (C340a@cls C340b@cls*) (if (null? C340b@cls*) (C33f5@build-last C340a@cls) (C33f7@build-one C340a@cls (C3408@f (car C340b@cls*) (cdr C340b@cls*))))))) C3408@f) C3403@cls C3404@cls*)))) C3400@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C33fe@t))) (C3047@syntax-dispatch C33fe@t '(_ any any . each-any)))) C33f8@t))) (C3047@syntax-dispatch C33f8@t '(_ any)))) C33f2@e))) '#f '#f))) (set! C2ff7@quote-transformer (lambda (C342a@e C342b@r C342c@mr) ((lambda (C3430@t) ((lambda (C3432@ls/false) (if C3432@ls/false (apply (lambda (C3434@datum) (list 'quote (C2e56@stx->datum C3434@datum))) C3432@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3430@t))) (C3047@syntax-dispatch C3430@t '(_ any)))) C342a@e))) (set! C2ff9@case-lambda-transformer (lambda (C3436@e C3437@r C3438@mr) ((lambda (C343c@t) ((lambda (C343e@ls/false) (if C343e@ls/false (apply (lambda (C3440@fmls* C3441@b* C3442@b**) (call-with-values (lambda () (C3071@chi-lambda-clause* C3436@e C3440@fmls* (map cons C3441@b* C3442@b**) C3437@r C3438@mr)) (lambda (C344a@C3447 C344b@C3449) ((lambda (C344e@body* C344f@fmls*) (C2da7@C2ce8@build-case-lambda '#f C344f@fmls* C344e@body*)) C344b@C3449 C344a@C3447)))) C343e@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C343c@t))) (C3047@syntax-dispatch C343c@t '(_ . #(each (any any . each-any)))))) C3436@e))) (set! C2ffb@lambda-transformer (lambda (C3452@e C3453@r C3454@mr) ((lambda (C3458@t) ((lambda (C345a@ls/false) (if C345a@ls/false (apply (lambda (C345c@fmls C345d@b C345e@b*) (call-with-values (lambda () (C306f@chi-lambda-clause C3452@e C345c@fmls (cons C345d@b C345e@b*) C3453@r C3454@mr)) (lambda (C3466@C3463 C3467@C3465) ((lambda (C346a@body C346b@fmls) (C2da6@C2ce6@build-lambda '#f C346b@fmls C346a@body)) C3467@C3465 C3466@C3463)))) C345a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3458@t))) (C3047@syntax-dispatch C3458@t '(_ any any . each-any)))) C3452@e))) (set! C2ffd@bless (lambda (C346e@x) (C2e2a@mkstx ((letrec ((C3470@f (lambda (C3472@x) (if (C2e0e@stx? C3472@x) C3472@x (if (pair? C3472@x) (cons (C3470@f (car C3472@x)) (C3470@f (cdr C3472@x))) (if (symbol? C3472@x) (C2fd1@scheme-stx C3472@x) (if (vector? C3472@x) (vector-map C3470@f C3472@x) C3472@x))))))) C3470@f) C346e@x) '() '() '()))) (set! C2fff@with-syntax-macro (lambda (C3474@e) ((lambda (C3476@t) ((lambda (C3478@ls/false) (if C3478@ls/false (apply (lambda (C347a@pat* C347b@expr* C347c@b C347d@b*) ((lambda (C3482@idn*) (begin (C306d@verify-formals (map car C3482@idn*) C3474@e) ((lambda (C3484@t*) (C2ffd@bless (list 'let (map list C3484@t* C347b@expr*) ((letrec ((C3486@f (lambda (C3488@pat* C3489@t*) (if (null? C3488@pat*) (cons 'begin (cons '#f (cons C347c@b C347d@b*))) (list 'syntax-case (car C3489@t*) '() (list (car C3488@pat*) (C3486@f (cdr C3488@pat*) (cdr C3489@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car C3488@pat*)) (car C3489@t*)))))))) C3486@f) C347a@pat* C3484@t*)))) (C3115@generate-temporaries C347b@expr*)))) ((letrec ((C348c@f (lambda (C348e@pat*) (if (null? C348e@pat*) '() (call-with-values (lambda () (C3045@convert-pattern (car C348e@pat*) '())) (lambda (C3494@C3491 C3495@C3493) ((lambda (C3498@idn* C3499@pat) (append C3498@idn* (C348c@f (cdr C348e@pat*)))) C3495@C3493 C3494@C3491))))))) C348c@f) C347a@pat*))) C3478@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3476@t))) (C3047@syntax-dispatch C3476@t '(_ #(each (any any)) any . each-any)))) C3474@e))) (set! C3001@invalid-fmls-error (lambda (C349c@stx C349d@fmls) ((lambda (C34a0@t) ((lambda (C34a2@ls/false) (if C34a2@ls/false (apply (lambda (C34a4@id* C34a5@last) ((letrec ((C34a8@f (lambda (C34aa@id*) (if (null? C34aa@id*) (values) (if (not (C2e42@id? (car C34aa@id*))) (C3127@syntax-violation '#f '"not an identifier" C349c@stx (car C34aa@id*)) (begin (C34a8@f (cdr C34aa@id*)) (if (C2e4e@bound-id-member? (car C34aa@id*) (cdr C34aa@id*)) (C3127@syntax-violation '#f '"duplicate binding" C349c@stx (car C34aa@id*)) (void)))))))) C34a8@f) (if (C2e42@id? C34a5@last) (cons C34a5@last C34a4@id*) (if (C2e38@syntax-null? C34a5@last) C34a4@id* (C3127@syntax-violation '#f '"not an identifier" C349c@stx C34a5@last))))) C34a2@ls/false) ((lambda (C34ac@t) ((lambda (C34ae@ls/false) (if C34ae@ls/false (apply (lambda () (C3127@syntax-violation '#f '"malformed binding form" C349c@stx C349d@fmls)) C34ae@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C34ac@t))) (C3047@syntax-dispatch C34ac@t '_))) C34a0@t))) (C3047@syntax-dispatch C34a0@t '#(each+ any () any)))) C349d@fmls))) (set! C3003@let-macro (lambda (C34b0@stx) ((lambda (C34b2@t) ((lambda (C34b4@ls/false) (if C34b4@ls/false (apply (lambda (C34b6@lhs* C34b7@rhs* C34b8@b C34b9@b*) (if (C2e4a@valid-bound-ids? C34b6@lhs*) (C2ffd@bless (cons (cons 'lambda (cons C34b6@lhs* (cons C34b8@b C34b9@b*))) C34b7@rhs*)) (C3001@invalid-fmls-error C34b0@stx C34b6@lhs*))) C34b4@ls/false) ((lambda (C34be@t) ((lambda (C34c0@ls/false) (if (and C34c0@ls/false (apply (lambda (C34c2@f C34c3@lhs* C34c4@rhs* C34c5@b C34c6@b*) (C2e42@id? C34c2@f)) C34c0@ls/false)) (apply (lambda (C34cc@f C34cd@lhs* C34ce@rhs* C34cf@b C34d0@b*) (if (C2e4a@valid-bound-ids? C34cd@lhs*) (C2ffd@bless (cons (list 'letrec (list (list C34cc@f (cons 'lambda (cons C34cd@lhs* (cons C34cf@b C34d0@b*))))) C34cc@f) C34ce@rhs*)) (C3001@invalid-fmls-error C34b0@stx C34cd@lhs*))) C34c0@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C34be@t))) (C3047@syntax-dispatch C34be@t '(_ any #(each (any any)) any . each-any)))) C34b2@t))) (C3047@syntax-dispatch C34b2@t '(_ #(each (any any)) any . each-any)))) C34b0@stx))) (set! C3005@let-values-macro (lambda (C34d6@stx) ((lambda (C34d9@rename C34db@rename*) (begin (set! C34d9@rename (lambda (C353e@x C353f@old* C3540@new*) (begin (if (not (C2e42@id? C353e@x)) (C3127@syntax-violation '#f '"not an indentifier" C34d6@stx C353e@x) (void)) (if (C2e4e@bound-id-member? C353e@x C353f@old*) (C3127@syntax-violation '#f '"duplicate binding" C34d6@stx C353e@x) (void)) ((lambda (C3544@y) (values C3544@y (cons C353e@x C353f@old*) (cons C3544@y C3540@new*))) (gensym (C312d@syntax->datum C353e@x)))))) (set! C34db@rename* (lambda (C352c@x* C352d@old* C352e@new*) (if (null? C352c@x*) (values '() C352d@old* C352e@new*) (call-with-values (lambda () (C34d9@rename (car C352c@x*) C352d@old* C352e@new*)) (lambda (C3532@x C3533@old* C3534@new*) (call-with-values (lambda () (C34db@rename* (cdr C352c@x*) C3533@old* C3534@new*)) (lambda (C3538@x* C3539@old* C353a@new*) (values (cons C3532@x C3538@x*) C3539@old* C353a@new*)))))))) ((lambda (C34dc@t) ((lambda (C34de@ls/false) (if C34de@ls/false (apply (lambda (C34e0@b C34e1@b*) (cons* (C2ffd@bless 'let) '() C34e0@b C34e1@b*)) C34de@ls/false) ((lambda (C34e4@t) ((lambda (C34e6@ls/false) (if C34e6@ls/false (apply (lambda (C34e8@lhs* C34e9@rhs* C34ea@b C34eb@b*) (C2ffd@bless ((letrec ((C34f0@f (lambda (C34f2@lhs* C34f3@rhs* C34f4@old* C34f5@new*) (if (null? C34f2@lhs*) (cons 'let (cons (map list C34f4@old* C34f5@new*) (cons C34ea@b C34eb@b*))) ((lambda (C34fa@t) ((lambda (C34fc@ls/false) (if C34fc@ls/false (apply (lambda (C34fe@x*) (call-with-values (lambda () (C34db@rename* C34fe@x* C34f4@old* C34f5@new*)) (lambda (C3506@C3501 C3507@C3503 C3508@C3505) ((lambda (C350c@new* C350d@old* C350e@y*) (list 'call-with-values (list 'lambda '() (car C34f3@rhs*)) (list 'lambda C350e@y* (C34f0@f (cdr C34f2@lhs*) (cdr C34f3@rhs*) C350d@old* C350c@new*)))) C3508@C3505 C3507@C3503 C3506@C3501)))) C34fc@ls/false) ((lambda (C3512@t) ((lambda (C3514@ls/false) (if C3514@ls/false (apply (lambda (C3516@x* C3517@x) (call-with-values (lambda () (C34d9@rename C3517@x C34f4@old* C34f5@new*)) (lambda (C351a@y C351b@old* C351c@new*) (call-with-values (lambda () (C34db@rename* C3516@x* C351b@old* C351c@new*)) (lambda (C3520@y* C3521@old* C3522@new*) (list 'call-with-values (list 'lambda '() (car C34f3@rhs*)) (list 'lambda (append C3520@y* C351a@y) (C34f0@f (cdr C34f2@lhs*) (cdr C34f3@rhs*) C3521@old* C3522@new*)))))))) C3514@ls/false) ((lambda (C3526@t) ((lambda (C3528@ls/false) (if C3528@ls/false (apply (lambda (C352a@others) (C3127@syntax-violation '#f '"malformed bindings" C34d6@stx C352a@others)) C3528@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3526@t))) (C3047@syntax-dispatch C3526@t 'any))) C3512@t))) (C3047@syntax-dispatch C3512@t '#(each+ any () any)))) C34fa@t))) (C3047@syntax-dispatch C34fa@t 'each-any))) (car C34f2@lhs*)))))) C34f0@f) C34e8@lhs* C34e9@rhs* '() '()))) C34e6@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C34e4@t))) (C3047@syntax-dispatch C34e4@t '(_ #(each (any any)) any . each-any)))) C34dc@t))) (C3047@syntax-dispatch C34dc@t '(_ () any . each-any)))) C34d6@stx))) '#f '#f))) (set! C3007@let*-values-macro (lambda (C3546@stx) ((lambda (C3549@check) (begin (set! C3549@check (lambda (C3578@x*) (if (not (null? C3578@x*)) ((lambda (C357a@x) (begin (if (not (C2e42@id? C357a@x)) (C3127@syntax-violation '#f '"not an identifier" C3546@stx C357a@x) (void)) (C3549@check (cdr C3578@x*)) (if (C2e4e@bound-id-member? C357a@x (cdr C3578@x*)) (C3127@syntax-violation '#f '"duplicate identifier" C3546@stx C357a@x) (void)))) (car C3578@x*)) (void)))) ((lambda (C354a@t) ((lambda (C354c@ls/false) (if C354c@ls/false (apply (lambda (C354e@b C354f@b*) (cons* (C2ffd@bless 'let) '() C354e@b C354f@b*)) C354c@ls/false) ((lambda (C3552@t) ((lambda (C3554@ls/false) (if C3554@ls/false (apply (lambda (C3556@lhs* C3557@rhs* C3558@b C3559@b*) (C2ffd@bless ((letrec ((C355e@f (lambda (C3560@lhs* C3561@rhs*) (if (null? C3560@lhs*) (cons 'begin (cons C3558@b C3559@b*)) ((lambda (C3564@t) ((lambda (C3566@ls/false) (if C3566@ls/false (apply (lambda (C3568@x*) (begin (C3549@check C3568@x*) (list 'call-with-values (list 'lambda '() (car C3561@rhs*)) (list 'lambda C3568@x* (C355e@f (cdr C3560@lhs*) (cdr C3561@rhs*)))))) C3566@ls/false) ((lambda (C356a@t) ((lambda (C356c@ls/false) (if C356c@ls/false (apply (lambda (C356e@x* C356f@x) (begin (C3549@check (cons C356f@x C356e@x*)) (list 'call-with-values (list 'lambda '() (car C3561@rhs*)) (list 'lambda (append C356e@x* C356f@x) (C355e@f (cdr C3560@lhs*) (cdr C3561@rhs*)))))) C356c@ls/false) ((lambda (C3572@t) ((lambda (C3574@ls/false) (if C3574@ls/false (apply (lambda (C3576@others) (C3127@syntax-violation '#f '"malformed bindings" C3546@stx C3576@others)) C3574@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3572@t))) (C3047@syntax-dispatch C3572@t 'any))) C356a@t))) (C3047@syntax-dispatch C356a@t '#(each+ any () any)))) C3564@t))) (C3047@syntax-dispatch C3564@t 'each-any))) (car C3560@lhs*)))))) C355e@f) C3556@lhs* C3557@rhs*))) C3554@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3552@t))) (C3047@syntax-dispatch C3552@t '(_ #(each (any any)) any . each-any)))) C354a@t))) (C3047@syntax-dispatch C354a@t '(_ () any . each-any)))) C3546@stx))) '#f))) (set! C3009@trace-lambda-macro (lambda (C357c@stx) ((lambda (C357e@t) ((lambda (C3580@ls/false) (if C3580@ls/false (apply (lambda (C3582@who C3583@fmls C3584@b C3585@b*) (if (C2e4a@valid-bound-ids? C3583@fmls) (C2ffd@bless (list 'make-traced-procedure (list 'quote C3582@who) (cons 'lambda (cons C3583@fmls (cons C3584@b C3585@b*))))) (C3001@invalid-fmls-error C357c@stx C3583@fmls))) C3580@ls/false) ((lambda (C358a@t) ((lambda (C358c@ls/false) (if C358c@ls/false (apply (lambda (C358e@who C358f@fmls C3590@last C3591@b C3592@b*) (if (C2e4a@valid-bound-ids? (cons C3590@last C358f@fmls)) (C2ffd@bless (list 'make-traced-procedure (list 'quote C358e@who) (cons 'lambda (cons (append C358f@fmls C3590@last) (cons C3591@b C3592@b*))))) (C3001@invalid-fmls-error C357c@stx (append C358f@fmls C3590@last)))) C358c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C358a@t))) (C3047@syntax-dispatch C358a@t '(_ any #(each+ any () any) any . each-any)))) C357e@t))) (C3047@syntax-dispatch C357e@t '(_ any each-any any . each-any)))) C357c@stx))) (set! C300b@trace-define-macro (lambda (C3598@stx) ((lambda (C359a@t) ((lambda (C359c@ls/false) (if C359c@ls/false (apply (lambda (C359e@who C359f@fmls C35a0@b C35a1@b*) (if (C2e4a@valid-bound-ids? C359f@fmls) (C2ffd@bless (list 'define C359e@who (list 'make-traced-procedure (list 'quote C359e@who) (cons 'lambda (cons C359f@fmls (cons C35a0@b C35a1@b*)))))) (C3001@invalid-fmls-error C3598@stx C359f@fmls))) C359c@ls/false) ((lambda (C35a6@t) ((lambda (C35a8@ls/false) (if C35a8@ls/false (apply (lambda (C35aa@who C35ab@fmls C35ac@last C35ad@b C35ae@b*) (if (C2e4a@valid-bound-ids? (cons C35ac@last C35ab@fmls)) (C2ffd@bless (list 'define C35aa@who (list 'make-traced-procedure (list 'quote C35aa@who) (cons 'lambda (cons (append C35ab@fmls C35ac@last) (cons C35ad@b C35ae@b*)))))) (C3001@invalid-fmls-error C3598@stx (append C35ab@fmls C35ac@last)))) C35a8@ls/false) ((lambda (C35b4@t) ((lambda (C35b6@ls/false) (if C35b6@ls/false (apply (lambda (C35b8@who C35b9@expr) (if (C2e42@id? C35b8@who) (C2ffd@bless (list 'define C35b8@who (list 'let (list (list 'v C35b9@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote C35b8@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (C3127@syntax-violation '#f '"invalid name" C3598@stx))) C35b6@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C35b4@t))) (C3047@syntax-dispatch C35b4@t '(_ any any)))) C35a6@t))) (C3047@syntax-dispatch C35a6@t '(_ (any . #(each+ any () any)) any . each-any)))) C359a@t))) (C3047@syntax-dispatch C359a@t '(_ (any . each-any) any . each-any)))) C3598@stx))) (set! C300d@trace-define-syntax-macro (lambda (C35bc@stx) ((lambda (C35be@t) ((lambda (C35c0@ls/false) (if C35c0@ls/false (apply (lambda (C35c2@who C35c3@expr) (if (C2e42@id? C35c2@who) (C2ffd@bless (list 'define-syntax C35c2@who (list 'make-traced-macro (list 'quote C35c2@who) C35c3@expr))) (C3127@syntax-violation '#f '"invalid name" C35bc@stx))) C35c0@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C35be@t))) (C3047@syntax-dispatch C35be@t '(_ any any)))) C35bc@stx))) (set! C300f@trace-let/rec-syntax (lambda (C35c6@who) (lambda (C35c8@stx) ((lambda (C35ca@t) ((lambda (C35cc@ls/false) (if C35cc@ls/false (apply (lambda (C35ce@lhs* C35cf@rhs* C35d0@b C35d1@b*) (if (C2e4a@valid-bound-ids? C35ce@lhs*) ((lambda (C35d6@rhs*) (C2ffd@bless (cons C35c6@who (cons (map list C35ce@lhs* C35d6@rhs*) (cons C35d0@b C35d1@b*))))) (map (lambda (C35d8@lhs C35d9@rhs) (list 'make-traced-macro (list 'quote C35d8@lhs) C35d9@rhs)) C35ce@lhs* C35cf@rhs*)) (C3001@invalid-fmls-error C35c8@stx C35ce@lhs*))) C35cc@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C35ca@t))) (C3047@syntax-dispatch C35ca@t '(_ #(each (any any)) any . each-any)))) C35c8@stx)))) (set! C3011@trace-let-syntax-macro (C300f@trace-let/rec-syntax 'let-syntax)) (set! C3013@trace-letrec-syntax-macro (C300f@trace-let/rec-syntax 'letrec-syntax)) (set! C3015@guard-macro (lambda (C35dc@x) ((lambda (C35df@gen-clauses) (begin (set! C35df@gen-clauses (lambda (C35f6@con C35f7@outerk C35f8@clause*) ((lambda (C35fd@f C35ff@f*) (begin (set! C35fd@f (lambda (C3636@x C3637@k) ((lambda (C363a@t) ((lambda (C363c@ls/false) (if C363c@ls/false (apply (lambda (C363e@e C363f@p) ((lambda (C3642@t) (list 'let (list (list C3642@t C363e@e)) (list 'if C3642@t (list C363f@p C3642@t) C3637@k))) (gensym))) C363c@ls/false) ((lambda (C3644@t) ((lambda (C3646@ls/false) (if C3646@ls/false (apply (lambda (C3648@e) ((lambda (C364a@t) (list 'let (list (list C364a@t C3648@e)) (list 'if C364a@t C364a@t C3637@k))) (gensym))) C3646@ls/false) ((lambda (C364c@t) ((lambda (C364e@ls/false) (if C364e@ls/false (apply (lambda (C3650@e C3651@v C3652@v*) (list 'if C3650@e (cons 'begin (cons C3651@v C3652@v*)) C3637@k)) C364e@ls/false) ((lambda (C3656@t) ((lambda (C3658@ls/false) (if C3658@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid guard clause" C3636@x)) C3658@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3656@t))) (C3047@syntax-dispatch C3656@t '_))) C364c@t))) (C3047@syntax-dispatch C364c@t '(any any . each-any)))) C3644@t))) (C3047@syntax-dispatch C3644@t '(any)))) C363a@t))) (C3047@syntax-dispatch C363a@t '(any #(scheme-id =>) any)))) C3636@x))) (set! C35ff@f* (lambda (C360c@x*) ((lambda (C360e@t) ((lambda (C3610@ls/false) (if C3610@ls/false (apply (lambda () ((lambda (C3612@g) (values (list C3612@g (list 'lambda '() (list 'raise-continuable C35f6@con))) C3612@g)) (gensym))) C3610@ls/false) ((lambda (C3614@t) ((lambda (C3616@ls/false) (if C3616@ls/false (apply (lambda (C3618@e C3619@e*) (values (cons 'begin (cons C3618@e C3619@e*)) '#f)) C3616@ls/false) ((lambda (C361c@t) ((lambda (C361e@ls/false) (if C361e@ls/false (apply (lambda (C3620@cls C3621@cls*) (call-with-values (lambda () (C35ff@f* C3621@cls*)) (lambda (C3628@C3625 C3629@C3627) ((lambda (C362c@g C362d@e) (values (C35fd@f C3620@cls C362d@e) C362c@g)) C3629@C3627 C3628@C3625)))) C361e@ls/false) ((lambda (C3630@t) ((lambda (C3632@ls/false) (if C3632@ls/false (apply (lambda (C3634@others) (C3127@syntax-violation '#f '"invalid guard clause" C3634@others)) C3632@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3630@t))) (C3047@syntax-dispatch C3630@t 'any))) C361c@t))) (C3047@syntax-dispatch C361c@t '(any . any)))) C3614@t))) (C3047@syntax-dispatch C3614@t '((#(scheme-id else) any . each-any))))) C360e@t))) (C3047@syntax-dispatch C360e@t '()))) C360c@x*))) (call-with-values (lambda () (C35ff@f* C35f8@clause*)) (lambda (C3604@C3601 C3605@C3603) ((lambda (C3608@raisek C3609@code) (if C3608@raisek (list (list 'call/cc (list 'lambda (list C3608@raisek) (list C35f7@outerk (list 'lambda '() C3609@code))))) (list C35f7@outerk (list 'lambda '() C3609@code)))) C3605@C3603 C3604@C3601))))) '#f '#f))) ((lambda (C35e0@t) ((lambda (C35e2@ls/false) (if (and C35e2@ls/false (apply (lambda (C35e4@con C35e5@clause* C35e6@b C35e7@b*) (C2e42@id? C35e4@con)) C35e2@ls/false)) (apply (lambda (C35ec@con C35ed@clause* C35ee@b C35ef@b*) ((lambda (C35f4@outerk) (C2ffd@bless (list (list 'call/cc (list 'lambda (list C35f4@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list C35ec@con) (C35df@gen-clauses C35ec@con C35f4@outerk C35ed@clause*)) (cons 'lambda (cons '() (cons C35ee@b C35ef@b*)))))))))) (gensym))) C35e2@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C35e0@t))) (C3047@syntax-dispatch C35e0@t '(_ (any . each-any) any . each-any)))) C35dc@x))) '#f))) (set! C3017@define-enumeration-macro (lambda (C365a@stx) ((lambda (C365d@set? C365f@remove-dups) (begin (set! C365d@set? (lambda (C3676@x) (or (null? C3676@x) (and (not (memq (car C3676@x) (cdr C3676@x))) (C365d@set? (cdr C3676@x)))))) (set! C365f@remove-dups (lambda (C3674@ls) (if (null? C3674@ls) '() (cons (car C3674@ls) (C365f@remove-dups (remq (car C3674@ls) (cdr C3674@ls))))))) ((lambda (C3660@t) ((lambda (C3662@ls/false) (if (and C3662@ls/false (apply (lambda (C3664@name C3665@id* C3666@maker) (and (C2e42@id? C3664@name) (C2e42@id? C3666@maker) (for-all C2e42@id? C3665@id*))) C3662@ls/false)) (apply (lambda (C366a@name C366b@id* C366c@maker) ((lambda (C3670@name* C3671@mk) (C2ffd@bless (list 'begin (list 'define C3671@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote C3670@name*)))) (list 'define-syntax C366a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote C3670@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote C366a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax C366c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote C366c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote C3670@name*)) (cons 'syntax-violation (cons (list 'quote C366c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons C3671@mk '('(n* ...)))))))))))) (C365f@remove-dups (C312d@syntax->datum C366b@id*)) (gensym))) C3662@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3660@t))) (C3047@syntax-dispatch C3660@t '(_ any each-any any)))) C365a@stx))) '#f '#f))) (set! C3019@time-macro (lambda (C3678@stx) ((lambda (C367a@t) ((lambda (C367c@ls/false) (if C367c@ls/false (apply (lambda (C367e@expr) (C2ffd@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() C367e@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) C367c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C367a@t))) (C3047@syntax-dispatch C367a@t '(_ any)))) C3678@stx))) (set! C301b@delay-macro (lambda (C3680@stx) ((lambda (C3682@t) ((lambda (C3684@ls/false) (if C3684@ls/false (apply (lambda (C3686@expr) (C2ffd@bless (list 'make-promise (list 'lambda '() C3686@expr)))) C3684@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3682@t))) (C3047@syntax-dispatch C3682@t '(_ any)))) C3680@stx))) (set! C301d@assert-macro (lambda (C3688@stx) ((lambda (C368a@t) ((lambda (C368c@ls/false) (if C368c@ls/false (apply (lambda (C368e@expr) ((lambda (C3690@pos) (C2ffd@bless (list 'unless C368e@expr (list 'assertion-error (list 'quote C368e@expr) (list 'quote C3690@pos))))) (or (C311f@expression-position C3688@stx) (C311f@expression-position C368e@expr)))) C368c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C368a@t))) (C3047@syntax-dispatch C368a@t '(_ any)))) C3688@stx))) (set! C301f@endianness-macro (lambda (C3692@stx) ((lambda (C3694@t) ((lambda (C3696@ls/false) (if C3696@ls/false (apply (lambda (C3698@e) ((lambda (C369a@t) (if (memv C369a@t '(little)) (C2ffd@bless ''little) (if (memv C369a@t '(big)) (C2ffd@bless ''big) (C3127@syntax-violation '#f '"endianness must be big or little" C3692@stx)))) (C312d@syntax->datum C3698@e))) C3696@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3694@t))) (C3047@syntax-dispatch C3694@t '(_ any)))) C3692@stx))) (set! C3021@identifier-syntax-macro (lambda (C369c@stx) ((lambda (C369e@t) ((lambda (C36a0@ls/false) (if C36a0@ls/false (apply (lambda (C36a2@expr) (C2ffd@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax C36a2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax C36a2@expr) '((syntax (e* ...)))))))))) C36a0@ls/false) ((lambda (C36a4@t) ((lambda (C36a6@ls/false) (if (and C36a6@ls/false (apply (lambda (C36a8@id1 C36a9@expr1 C36aa@id2 C36ab@expr2 C36ac@expr3) (and (C2e42@id? C36a8@id1) (C2e42@id? C36aa@id2) (C2e42@id? C36ab@expr2))) C36a6@ls/false)) (apply (lambda (C36b2@id1 C36b3@expr1 C36b4@id2 C36b5@expr2 C36b6@expr3) (C2ffd@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax C36b3@expr1)) (list (list 'set! 'id C36b5@expr2) (list 'syntax C36b6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons C36b3@expr1 '(e* ...))))))))) C36a6@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C36a4@t))) (C3047@syntax-dispatch C36a4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) C369e@t))) (C3047@syntax-dispatch C369e@t '(_ any)))) C369c@stx))) (set! C3023@do-macro (lambda (C36bc@stx) ((lambda (C36bf@bind) (begin (set! C36bf@bind (lambda (C36d6@x) ((lambda (C36d8@t) ((lambda (C36da@ls/false) (if C36da@ls/false (apply (lambda (C36dc@x C36dd@init) (list C36dc@x C36dd@init C36dc@x)) C36da@ls/false) ((lambda (C36e0@t) ((lambda (C36e2@ls/false) (if C36e2@ls/false (apply (lambda (C36e4@x C36e5@init C36e6@step) (list C36e4@x C36e5@init C36e6@step)) C36e2@ls/false) ((lambda (C36ea@t) ((lambda (C36ec@ls/false) (if C36ec@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid binding" C36bc@stx)) C36ec@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C36ea@t))) (C3047@syntax-dispatch C36ea@t '_))) C36e0@t))) (C3047@syntax-dispatch C36e0@t '(any any any)))) C36d8@t))) (C3047@syntax-dispatch C36d8@t '(any any)))) C36d6@x))) ((lambda (C36c0@t) ((lambda (C36c2@ls/false) (if C36c2@ls/false (apply (lambda (C36c4@binding* C36c5@test C36c6@expr* C36c7@command*) ((lambda (C36cc@t) ((lambda (C36ce@ls/false) (if C36ce@ls/false (apply (lambda (C36d0@x* C36d1@init* C36d2@step*) (if (C2e4a@valid-bound-ids? C36d0@x*) (C2ffd@bless (list 'letrec (list (list 'loop (list 'lambda C36d0@x* (list 'if C36c5@test (cons 'begin (cons '(if #f #f) C36c6@expr*)) (cons 'begin (append C36c7@command* (list (cons 'loop C36d2@step*)))))))) (cons 'loop C36d1@init*))) (C3127@syntax-violation '#f '"invalid bindings" C36bc@stx))) C36ce@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C36cc@t))) (C3047@syntax-dispatch C36cc@t '#(each (any any any))))) (map C36bf@bind C36c4@binding*))) C36c2@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C36c0@t))) (C3047@syntax-dispatch C36c0@t '(_ each-any (any . each-any) . each-any)))) C36bc@stx))) '#f))) (set! C3025@let*-macro (lambda (C36ee@stx) ((lambda (C36f0@t) ((lambda (C36f2@ls/false) (if (and C36f2@ls/false (apply (lambda (C36f4@lhs* C36f5@rhs* C36f6@b C36f7@b*) (for-all C2e42@id? C36f4@lhs*)) C36f2@ls/false)) (apply (lambda (C36fc@lhs* C36fd@rhs* C36fe@b C36ff@b*) (C2ffd@bless ((letrec ((C3704@f (lambda (C3706@x*) (if (null? C3706@x*) (cons 'let (cons '() (cons C36fe@b C36ff@b*))) (list 'let (list (car C3706@x*)) (C3704@f (cdr C3706@x*))))))) C3704@f) (map list C36fc@lhs* C36fd@rhs*)))) C36f2@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C36f0@t))) (C3047@syntax-dispatch C36f0@t '(_ #(each (any any)) any . each-any)))) C36ee@stx))) (set! C3027@or-macro (lambda (C3708@stx) ((lambda (C370a@t) ((lambda (C370c@ls/false) (if C370c@ls/false (apply (lambda () '#f) C370c@ls/false) ((lambda (C370e@t) ((lambda (C3710@ls/false) (if C3710@ls/false (apply (lambda (C3712@e C3713@e*) (C2ffd@bless ((letrec ((C3716@f (lambda (C3718@e C3719@e*) (if (null? C3719@e*) (list 'begin '#f C3718@e) (list 'let (list (list 't C3718@e)) (list 'if 't 't (C3716@f (car C3719@e*) (cdr C3719@e*)))))))) C3716@f) C3712@e C3713@e*))) C3710@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C370e@t))) (C3047@syntax-dispatch C370e@t '(_ any . each-any)))) C370a@t))) (C3047@syntax-dispatch C370a@t '(_)))) C3708@stx))) (set! C3029@and-macro (lambda (C371c@stx) ((lambda (C371e@t) ((lambda (C3720@ls/false) (if C3720@ls/false (apply (lambda () '#t) C3720@ls/false) ((lambda (C3722@t) ((lambda (C3724@ls/false) (if C3724@ls/false (apply (lambda (C3726@e C3727@e*) (C2ffd@bless ((letrec ((C372a@f (lambda (C372c@e C372d@e*) (if (null? C372d@e*) (list 'begin '#f C372c@e) (cons 'if (cons C372c@e (cons (C372a@f (car C372d@e*) (cdr C372d@e*)) '(#f)))))))) C372a@f) C3726@e C3727@e*))) C3724@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3722@t))) (C3047@syntax-dispatch C3722@t '(_ any . each-any)))) C371e@t))) (C3047@syntax-dispatch C371e@t '(_)))) C371c@stx))) (set! C302b@cond-macro (lambda (C3730@stx) ((lambda (C3732@t) ((lambda (C3734@ls/false) (if C3734@ls/false (apply (lambda (C3736@cls C3737@cls*) (C2ffd@bless ((letrec ((C373a@f (lambda (C373c@cls C373d@cls*) (if (null? C373d@cls*) ((lambda (C3740@t) ((lambda (C3742@ls/false) (if C3742@ls/false (apply (lambda (C3744@e C3745@e*) (cons 'begin (cons C3744@e C3745@e*))) C3742@ls/false) ((lambda (C3748@t) ((lambda (C374a@ls/false) (if C374a@ls/false (apply (lambda (C374c@e C374d@p) (list 'let (list (list 't C374c@e)) (list 'if 't (cons C374d@p '(t))))) C374a@ls/false) ((lambda (C3750@t) ((lambda (C3752@ls/false) (if C3752@ls/false (apply (lambda (C3754@e) (cons 'or (cons C3754@e '((if #f #f))))) C3752@ls/false) ((lambda (C3756@t) ((lambda (C3758@ls/false) (if C3758@ls/false (apply (lambda (C375a@e C375b@e*) (list 'if C375a@e (cons 'begin C375b@e*))) C3758@ls/false) ((lambda (C375e@t) ((lambda (C3760@ls/false) (if C3760@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid last clause" C3730@stx)) C3760@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C375e@t))) (C3047@syntax-dispatch C375e@t '_))) C3756@t))) (C3047@syntax-dispatch C3756@t '(any . each-any)))) C3750@t))) (C3047@syntax-dispatch C3750@t '(any)))) C3748@t))) (C3047@syntax-dispatch C3748@t '(any #(scheme-id =>) any)))) C3740@t))) (C3047@syntax-dispatch C3740@t '(#(scheme-id else) any . each-any)))) C373c@cls) ((lambda (C3762@t) ((lambda (C3764@ls/false) (if C3764@ls/false (apply (lambda (C3766@e C3767@e*) (C3127@syntax-violation '#f '"incorrect position of keyword else" C3730@stx)) C3764@ls/false) ((lambda (C376a@t) ((lambda (C376c@ls/false) (if C376c@ls/false (apply (lambda (C376e@e C376f@p) (list 'let (list (list 't C376e@e)) (list 'if 't (cons C376f@p '(t)) (C373a@f (car C373d@cls*) (cdr C373d@cls*))))) C376c@ls/false) ((lambda (C3772@t) ((lambda (C3774@ls/false) (if C3774@ls/false (apply (lambda (C3776@e) (list 'or C3776@e (C373a@f (car C373d@cls*) (cdr C373d@cls*)))) C3774@ls/false) ((lambda (C3778@t) ((lambda (C377a@ls/false) (if C377a@ls/false (apply (lambda (C377c@e C377d@e*) (list 'if C377c@e (cons 'begin C377d@e*) (C373a@f (car C373d@cls*) (cdr C373d@cls*)))) C377a@ls/false) ((lambda (C3780@t) ((lambda (C3782@ls/false) (if C3782@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid last clause" C3730@stx)) C3782@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3780@t))) (C3047@syntax-dispatch C3780@t '_))) C3778@t))) (C3047@syntax-dispatch C3778@t '(any . each-any)))) C3772@t))) (C3047@syntax-dispatch C3772@t '(any)))) C376a@t))) (C3047@syntax-dispatch C376a@t '(any #(scheme-id =>) any)))) C3762@t))) (C3047@syntax-dispatch C3762@t '(#(scheme-id else) any . each-any)))) C373c@cls))))) C373a@f) C3736@cls C3737@cls*))) C3734@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3732@t))) (C3047@syntax-dispatch C3732@t '(_ any . each-any)))) C3730@stx))) (set! C302d@do-include (lambda (C3784@stx C3785@id C3786@filename) ((lambda (C378a@filename) (begin (if (not (and (string? C378a@filename) (C2e42@id? C3785@id))) (C3127@syntax-violation '#f '"invalid syntax" C3784@stx) (void)) (cons (C2ffd@bless 'begin) (with-input-from-file C378a@filename (lambda () ((letrec ((C378c@f (lambda (C378e@ls) ((lambda (C3790@x) (if (eof-object? C3790@x) (reverse C378e@ls) (C378c@f (cons (C2e22@datum->stx C3785@id C3790@x) C378e@ls)))) (C2994@C2866@read-annotated))))) C378c@f) '())))))) (C2e56@stx->datum C3786@filename)))) (set! C302f@include-macro (lambda (C3792@e) ((lambda (C3794@t) ((lambda (C3796@ls/false) (if C3796@ls/false (apply (lambda (C3798@id C3799@filename) (C302d@do-include C3792@e C3798@id C3799@filename)) C3796@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3794@t))) (C3047@syntax-dispatch C3794@t '(any any)))) C3792@e))) (set! C3031@include-into-macro (lambda (C379c@e) ((lambda (C379e@t) ((lambda (C37a0@ls/false) (if C37a0@ls/false (apply (lambda (C37a2@id C37a3@filename) (C302d@do-include C379c@e C37a2@id C37a3@filename)) C37a0@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C379e@t))) (C3047@syntax-dispatch C379e@t '(_ any any)))) C379c@e))) (set! C3033@syntax-rules-macro (lambda (C37a6@e) ((lambda (C37a8@t) ((lambda (C37aa@ls/false) (if C37aa@ls/false (apply (lambda (C37ac@lits C37ad@pat* C37ae@tmp*) (begin (C304d@verify-literals C37ac@lits C37a6@e) (C2ffd@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons C37ac@lits (map (lambda (C37b2@pat C37b3@tmp) ((lambda (C37b6@t) ((lambda (C37b8@ls/false) (if C37b8@ls/false (apply (lambda (C37ba@rest) (list (cons 'g C37ba@rest) (list 'syntax C37b3@tmp))) C37b8@ls/false) ((lambda (C37bc@t) ((lambda (C37be@ls/false) (if C37be@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid syntax-rules pattern" C37a6@e C37b2@pat)) C37be@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C37bc@t))) (C3047@syntax-dispatch C37bc@t '_))) C37b6@t))) (C3047@syntax-dispatch C37b6@t '(_ . any)))) C37b2@pat)) C37ad@pat* C37ae@tmp*)))))))) C37aa@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C37a8@t))) (C3047@syntax-dispatch C37a8@t '(_ each-any . #(each (any any)))))) C37a6@e))) (set! C3035@quasiquote-macro ((lambda () ((lambda (C37c1@datum C37dd@quasicons* C37df@quasicons C37e1@quasiappend C37e3@quasivector C37e5@vquasi C37e7@quasi) (begin (set! C37c1@datum (lambda (C38c2@x) (list (C2fd1@scheme-stx 'quote) (C2e2a@mkstx C38c2@x '() '() '())))) (set! C37dd@quasicons* (lambda (C38ba@x C38bb@y) ((letrec ((C38be@f (lambda (C38c0@x) (if (null? C38c0@x) C38bb@y (C37df@quasicons (car C38c0@x) (C38be@f (cdr C38c0@x))))))) C38be@f) C38ba@x))) (set! C37df@quasicons (lambda (C3894@x C3895@y) ((lambda (C3898@t) ((lambda (C389a@ls/false) (if C389a@ls/false (apply (lambda (C389c@dy) ((lambda (C389e@t) ((lambda (C38a0@ls/false) (if C38a0@ls/false (apply (lambda (C38a2@dx) (list (C2fd1@scheme-stx 'quote) (cons C38a2@dx C389c@dy))) C38a0@ls/false) ((lambda (C38a4@t) ((lambda (C38a6@ls/false) (if C38a6@ls/false (apply (lambda () ((lambda (C38a8@t) ((lambda (C38aa@ls/false) (if C38aa@ls/false (apply (lambda () (list (C2fd1@scheme-stx 'list) C3894@x)) C38aa@ls/false) ((lambda (C38ac@t) ((lambda (C38ae@ls/false) (if C38ae@ls/false (apply (lambda () (list (C2fd1@scheme-stx 'cons) C3894@x C3895@y)) C38ae@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C38ac@t))) (C3047@syntax-dispatch C38ac@t '_))) C38a8@t))) (C3047@syntax-dispatch C38a8@t '()))) C389c@dy)) C38a6@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C38a4@t))) (C3047@syntax-dispatch C38a4@t '_))) C389e@t))) (C3047@syntax-dispatch C389e@t '(#(scheme-id quote) any)))) C3894@x)) C389a@ls/false) ((lambda (C38b0@t) ((lambda (C38b2@ls/false) (if C38b2@ls/false (apply (lambda (C38b4@stuff) (cons* (C2fd1@scheme-stx 'list) C3894@x C38b4@stuff)) C38b2@ls/false) ((lambda (C38b6@t) ((lambda (C38b8@ls/false) (if C38b8@ls/false (apply (lambda () (list (C2fd1@scheme-stx 'cons) C3894@x C3895@y)) C38b8@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C38b6@t))) (C3047@syntax-dispatch C38b6@t '_))) C38b0@t))) (C3047@syntax-dispatch C38b0@t '(#(scheme-id list) . each-any)))) C3898@t))) (C3047@syntax-dispatch C3898@t '(#(scheme-id quote) any)))) C3895@y))) (set! C37e1@quasiappend (lambda (C387a@x C387b@y) ((lambda (C387e@ls) (if (null? C387e@ls) (list (C2fd1@scheme-stx 'quote) '()) (if (null? (cdr C387e@ls)) (car C387e@ls) (cons* (C2fd1@scheme-stx 'append) C387e@ls)))) ((letrec ((C3880@f (lambda (C3882@x) (if (null? C3882@x) ((lambda (C3884@t) ((lambda (C3886@ls/false) (if C3886@ls/false (apply (lambda () '()) C3886@ls/false) ((lambda (C3888@t) ((lambda (C388a@ls/false) (if C388a@ls/false (apply (lambda () (list C387b@y)) C388a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3888@t))) (C3047@syntax-dispatch C3888@t '_))) C3884@t))) (C3047@syntax-dispatch C3884@t '(#(scheme-id quote) ())))) C387b@y) ((lambda (C388c@t) ((lambda (C388e@ls/false) (if C388e@ls/false (apply (lambda () (C3880@f (cdr C3882@x))) C388e@ls/false) ((lambda (C3890@t) ((lambda (C3892@ls/false) (if C3892@ls/false (apply (lambda () (cons (car C3882@x) (C3880@f (cdr C3882@x)))) C3892@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3890@t))) (C3047@syntax-dispatch C3890@t '_))) C388c@t))) (C3047@syntax-dispatch C388c@t '(#(scheme-id quote) ())))) (car C3882@x)))))) C3880@f) C387a@x)))) (set! C37e3@quasivector (lambda (C3848@x) ((lambda (C384a@pat-x) ((lambda (C384c@t) ((lambda (C384e@ls/false) (if C384e@ls/false (apply (lambda (C3850@x*) (list (C2fd1@scheme-stx 'quote) (list->vector C3850@x*))) C384e@ls/false) ((lambda (C3852@t) ((lambda (C3854@ls/false) (if C3854@ls/false (apply (lambda () ((letrec ((C3856@f (lambda (C3858@x C3859@k) ((lambda (C385c@t) ((lambda (C385e@ls/false) (if C385e@ls/false (apply (lambda (C3860@x*) (C3859@k (map (lambda (C3862@x) (list (C2fd1@scheme-stx 'quote) C3862@x)) C3860@x*))) C385e@ls/false) ((lambda (C3864@t) ((lambda (C3866@ls/false) (if C3866@ls/false (apply (lambda (C3868@x*) (C3859@k C3868@x*)) C3866@ls/false) ((lambda (C386a@t) ((lambda (C386c@ls/false) (if C386c@ls/false (apply (lambda (C386e@x C386f@y) (C3856@f C386f@y (lambda (C3872@ls) (C3859@k (cons C386e@x C3872@ls))))) C386c@ls/false) ((lambda (C3874@t) ((lambda (C3876@ls/false) (if C3876@ls/false (apply (lambda () (list (C2fd1@scheme-stx 'list->vector) C384a@pat-x)) C3876@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3874@t))) (C3047@syntax-dispatch C3874@t '_))) C386a@t))) (C3047@syntax-dispatch C386a@t '(#(scheme-id cons) any any)))) C3864@t))) (C3047@syntax-dispatch C3864@t '(#(scheme-id list) . each-any)))) C385c@t))) (C3047@syntax-dispatch C385c@t '(#(scheme-id quote) each-any)))) C3858@x)))) C3856@f) C3848@x (lambda (C3878@ls) (cons* (C2fd1@scheme-stx 'vector) C3878@ls)))) C3854@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3852@t))) (C3047@syntax-dispatch C3852@t '_))) C384c@t))) (C3047@syntax-dispatch C384c@t '(#(scheme-id quote) each-any)))) C384a@pat-x)) C3848@x))) (set! C37e5@vquasi (lambda (C3826@p C3827@lev) ((lambda (C382a@t) ((lambda (C382c@ls/false) (if C382c@ls/false (apply (lambda (C382e@p C382f@q) ((lambda (C3832@t) ((lambda (C3834@ls/false) (if C3834@ls/false (apply (lambda (C3836@p) (if (= C3827@lev '0) (C37dd@quasicons* C3836@p (C37e5@vquasi C382f@q C3827@lev)) (C37df@quasicons (C37df@quasicons (C37c1@datum 'unquote) (C37e7@quasi C3836@p (- C3827@lev '1))) (C37e5@vquasi C382f@q C3827@lev)))) C3834@ls/false) ((lambda (C3838@t) ((lambda (C383a@ls/false) (if C383a@ls/false (apply (lambda (C383c@p) (if (= C3827@lev '0) (C37e1@quasiappend C383c@p (C37e5@vquasi C382f@q C3827@lev)) (C37df@quasicons (C37df@quasicons (C37c1@datum 'unquote-splicing) (C37e7@quasi C383c@p (- C3827@lev '1))) (C37e5@vquasi C382f@q C3827@lev)))) C383a@ls/false) ((lambda (C383e@t) ((lambda (C3840@ls/false) (if C3840@ls/false (apply (lambda (C3842@p) (C37df@quasicons (C37e7@quasi C3842@p C3827@lev) (C37e5@vquasi C382f@q C3827@lev))) C3840@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C383e@t))) (C3047@syntax-dispatch C383e@t 'any))) C3838@t))) (C3047@syntax-dispatch C3838@t '(#(scheme-id unquote-splicing) . each-any)))) C3832@t))) (C3047@syntax-dispatch C3832@t '(#(scheme-id unquote) . each-any)))) C382e@p)) C382c@ls/false) ((lambda (C3844@t) ((lambda (C3846@ls/false) (if C3846@ls/false (apply (lambda () (list (C2fd1@scheme-stx 'quote) '())) C3846@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3844@t))) (C3047@syntax-dispatch C3844@t '()))) C382a@t))) (C3047@syntax-dispatch C382a@t '(any . any)))) C3826@p))) (set! C37e7@quasi (lambda (C37f0@p C37f1@lev) ((lambda (C37f4@t) ((lambda (C37f6@ls/false) (if C37f6@ls/false (apply (lambda (C37f8@p) (if (= C37f1@lev '0) C37f8@p (C37df@quasicons (C37c1@datum 'unquote) (C37e7@quasi (list C37f8@p) (- C37f1@lev '1))))) C37f6@ls/false) ((lambda (C37fa@t) ((lambda (C37fc@ls/false) (if C37fc@ls/false (apply (lambda (C37fe@p C37ff@q) (if (= C37f1@lev '0) (C37dd@quasicons* C37fe@p (C37e7@quasi C37ff@q C37f1@lev)) (C37df@quasicons (C37df@quasicons (C37c1@datum 'unquote) (C37e7@quasi C37fe@p (- C37f1@lev '1))) (C37e7@quasi C37ff@q C37f1@lev)))) C37fc@ls/false) ((lambda (C3802@t) ((lambda (C3804@ls/false) (if C3804@ls/false (apply (lambda (C3806@p C3807@q) (if (= C37f1@lev '0) (C37e1@quasiappend C3806@p (C37e7@quasi C3807@q C37f1@lev)) (C37df@quasicons (C37df@quasicons (C37c1@datum 'unquote-splicing) (C37e7@quasi C3806@p (- C37f1@lev '1))) (C37e7@quasi C3807@q C37f1@lev)))) C3804@ls/false) ((lambda (C380a@t) ((lambda (C380c@ls/false) (if C380c@ls/false (apply (lambda (C380e@p) (C37df@quasicons (C37c1@datum 'quasiquote) (C37e7@quasi (list C380e@p) (+ C37f1@lev '1)))) C380c@ls/false) ((lambda (C3810@t) ((lambda (C3812@ls/false) (if C3812@ls/false (apply (lambda (C3814@p C3815@q) (C37df@quasicons (C37e7@quasi C3814@p C37f1@lev) (C37e7@quasi C3815@q C37f1@lev))) C3812@ls/false) ((lambda (C3818@t) ((lambda (C381a@ls/false) (if (and C381a@ls/false (apply (lambda (C381c@x) (not (C2e0e@stx? C381c@x))) C381a@ls/false)) (apply (lambda (C381e@x) (C37e3@quasivector (C37e5@vquasi C381e@x C37f1@lev))) C381a@ls/false) ((lambda (C3820@t) ((lambda (C3822@ls/false) (if C3822@ls/false (apply (lambda (C3824@p) (list (C2fd1@scheme-stx 'quote) C3824@p)) C3822@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3820@t))) (C3047@syntax-dispatch C3820@t 'any))) C3818@t))) (C3047@syntax-dispatch C3818@t '#(vector each-any)))) C3810@t))) (C3047@syntax-dispatch C3810@t '(any . any)))) C380a@t))) (C3047@syntax-dispatch C380a@t '(#(scheme-id quasiquote) any)))) C3802@t))) (C3047@syntax-dispatch C3802@t '((#(scheme-id unquote-splicing) . each-any) . any)))) C37fa@t))) (C3047@syntax-dispatch C37fa@t '((#(scheme-id unquote) . each-any) . any)))) C37f4@t))) (C3047@syntax-dispatch C37f4@t '(#(scheme-id unquote) any)))) C37f0@p))) (lambda (C37e8@x) ((lambda (C37ea@t) ((lambda (C37ec@ls/false) (if C37ec@ls/false (apply (lambda (C37ee@e) (C37e7@quasi C37ee@e '0)) C37ec@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C37ea@t))) (C3047@syntax-dispatch C37ea@t '(_ any)))) C37e8@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! C3037@quasisyntax-macro ((lambda () ((lambda (C38c5@quasi) (begin (set! C38c5@quasi (lambda (C38e0@p C38e1@lev) ((lambda (C38e4@t) ((lambda (C38e6@ls/false) (if C38e6@ls/false (apply (lambda (C38e8@p) (if (= C38e1@lev '0) ((lambda (C38ea@g) (values (list C38ea@g) (list C38e8@p) C38ea@g)) (gensym)) (call-with-values (lambda () (C38c5@quasi C38e8@p (- C38e1@lev '1))) (lambda (C38f2@C38ed C38f3@C38ef C38f4@C38f1) ((lambda (C38f8@p C38f9@rhs* C38fa@lhs*) (values C38fa@lhs* C38f9@rhs* (list 'unsyntax C38f8@p))) C38f4@C38f1 C38f3@C38ef C38f2@C38ed))))) C38e6@ls/false) ((lambda (C38fe@t) ((lambda (C3900@ls/false) (if (and C3900@ls/false (apply (lambda () (= C38e1@lev '0)) C3900@ls/false)) (apply (lambda () (C3127@syntax-violation '#f '"incorrect use of unsyntax" C38e0@p)) C3900@ls/false) ((lambda (C3902@t) ((lambda (C3904@ls/false) (if C3904@ls/false (apply (lambda (C3906@p* C3907@q) (call-with-values (lambda () (C38c5@quasi C3907@q C38e1@lev)) (lambda (C3910@C390b C3911@C390d C3912@C390f) ((lambda (C3916@q C3917@rhs* C3918@lhs*) (if (= C38e1@lev '0) ((lambda (C391c@g*) (values (append C391c@g* C3918@lhs*) (append C3906@p* C3917@rhs*) (append C391c@g* C3916@q))) (map (lambda (C391e@x) (gensym)) C3906@p*)) (call-with-values (lambda () (C38c5@quasi C3906@p* (- C38e1@lev '1))) (lambda (C3926@C3921 C3927@C3923 C3928@C3925) ((lambda (C392c@p* C392d@rhs2* C392e@lhs2*) (values (append C392e@lhs2* C3918@lhs*) (append C392d@rhs2* C3917@rhs*) (cons (cons 'unsyntax C392c@p*) C3916@q))) C3928@C3925 C3927@C3923 C3926@C3921))))) C3912@C390f C3911@C390d C3910@C390b)))) C3904@ls/false) ((lambda (C3932@t) ((lambda (C3934@ls/false) (if C3934@ls/false (apply (lambda (C3936@p* C3937@q) (call-with-values (lambda () (C38c5@quasi C3937@q C38e1@lev)) (lambda (C3940@C393b C3941@C393d C3942@C393f) ((lambda (C3946@q C3947@rhs* C3948@lhs*) (if (= C38e1@lev '0) ((lambda (C394c@g*) (values (append (map (lambda (C394e@g) (cons C394e@g '(...))) C394c@g*) C3948@lhs*) (append C3936@p* C3947@rhs*) (append (apply append (map (lambda (C3950@g) (cons C3950@g '(...))) C394c@g*)) C3946@q))) (map (lambda (C3952@x) (gensym)) C3936@p*)) (call-with-values (lambda () (C38c5@quasi C3936@p* (- C38e1@lev '1))) (lambda (C395a@C3955 C395b@C3957 C395c@C3959) ((lambda (C3960@p* C3961@rhs2* C3962@lhs2*) (values (append C3962@lhs2* C3948@lhs*) (append C3961@rhs2* C3947@rhs*) (cons (cons 'unsyntax-splicing C3960@p*) C3946@q))) C395c@C3959 C395b@C3957 C395a@C3955))))) C3942@C393f C3941@C393d C3940@C393b)))) C3934@ls/false) ((lambda (C3966@t) ((lambda (C3968@ls/false) (if (and C3968@ls/false (apply (lambda () (= C38e1@lev '0)) C3968@ls/false)) (apply (lambda () (C3127@syntax-violation '#f '"incorrect use of unsyntax-splicing" C38e0@p)) C3968@ls/false) ((lambda (C396a@t) ((lambda (C396c@ls/false) (if C396c@ls/false (apply (lambda (C396e@p) (call-with-values (lambda () (C38c5@quasi C396e@p (+ C38e1@lev '1))) (lambda (C3976@C3971 C3977@C3973 C3978@C3975) ((lambda (C397c@p C397d@rhs* C397e@lhs*) (values C397e@lhs* C397d@rhs* (list 'quasisyntax C397c@p))) C3978@C3975 C3977@C3973 C3976@C3971)))) C396c@ls/false) ((lambda (C3982@t) ((lambda (C3984@ls/false) (if C3984@ls/false (apply (lambda (C3986@p C3987@q) (call-with-values (lambda () (C38c5@quasi C3986@p C38e1@lev)) (lambda (C3996@C398b C3997@C398d C3998@C398f) (call-with-values (lambda () (C38c5@quasi C3987@q C38e1@lev)) (lambda (C399c@C3991 C399d@C3993 C399e@C3995) ((lambda (C39a2@q C39a3@rhs2* C39a4@lhs2* C39a5@p C39a6@rhs* C39a7@lhs*) (values (append C39a4@lhs2* C39a7@lhs*) (append C39a3@rhs2* C39a6@rhs*) (cons C39a5@p C39a2@q))) C399e@C3995 C399d@C3993 C399c@C3991 C3998@C398f C3997@C398d C3996@C398b)))))) C3984@ls/false) ((lambda (C39ae@t) ((lambda (C39b0@ls/false) (if C39b0@ls/false (apply (lambda (C39b2@x*) (call-with-values (lambda () (C38c5@quasi C39b2@x* C38e1@lev)) (lambda (C39ba@C39b5 C39bb@C39b7 C39bc@C39b9) ((lambda (C39c0@x* C39c1@rhs* C39c2@lhs*) (values C39c2@lhs* C39c1@rhs* (list->vector C39c0@x*))) C39bc@C39b9 C39bb@C39b7 C39ba@C39b5)))) C39b0@ls/false) ((lambda (C39c6@t) ((lambda (C39c8@ls/false) (if C39c8@ls/false (apply (lambda () (values '() '() C38e0@p)) C39c8@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C39c6@t))) (C3047@syntax-dispatch C39c6@t '_))) C39ae@t))) (C3047@syntax-dispatch C39ae@t '#(vector each-any)))) C3982@t))) (C3047@syntax-dispatch C3982@t '(any . any)))) C396a@t))) (C3047@syntax-dispatch C396a@t '(#(scheme-id quasisyntax) any)))) C3966@t))) (C3047@syntax-dispatch C3966@t '#(scheme-id unsyntax-splicing)))) C3932@t))) (C3047@syntax-dispatch C3932@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) C3902@t))) (C3047@syntax-dispatch C3902@t '((#(scheme-id unsyntax) . each-any) . any)))) C38fe@t))) (C3047@syntax-dispatch C38fe@t '#(scheme-id unsyntax)))) C38e4@t))) (C3047@syntax-dispatch C38e4@t '(#(scheme-id unsyntax) any)))) C38e0@p))) (lambda (C38c6@x) ((lambda (C38c8@t) ((lambda (C38ca@ls/false) (if C38ca@ls/false (apply (lambda (C38cc@e) (call-with-values (lambda () (C38c5@quasi C38cc@e '0)) (lambda (C38d4@C38cf C38d5@C38d1 C38d6@C38d3) ((lambda (C38da@v C38db@rhs* C38dc@lhs*) (C2ffd@bless (list 'syntax-case (cons 'list C38db@rhs*) '() (list C38dc@lhs* (list 'syntax C38da@v))))) C38d6@C38d3 C38d5@C38d1 C38d4@C38cf)))) C38ca@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C38c8@t))) (C3047@syntax-dispatch C38c8@t '(_ any)))) C38c6@x)))) '#f)))) (set! C3039@define-struct-macro (lambda (C39ca@stx) (C3127@syntax-violation '#f '"define-struct not supported" C39ca@stx))) (set! C303b@define-record-type-macro (lambda (C39cc@x) ((lambda (C39cf@id C39d1@get-record-name C39d3@get-record-constructor-name C39d5@get-record-predicate-name C39d7@get-clause C39d9@foo-rtd-code C39db@parent-rtd-code C39dd@parent-rcd-code C39df@foo-rcd-code C39e1@get-protocol-code C39e3@get-fields C39e5@get-mutator-indices C39e7@get-mutators C39e9@get-accessors C39eb@enumerate C39ed@do-define-record C39ef@verify-clauses) (begin (set! C39cf@id (lambda (C3bc2@ctxt . C3bc4@str*) (C312b@datum->syntax C3bc2@ctxt (string->symbol (apply string-append (map (lambda (C3bc6@x) (if (symbol? C3bc6@x) (symbol->string C3bc6@x) (if (string? C3bc6@x) C3bc6@x (assertion-violation 'define-record-type '"BUG")))) C3bc4@str*)))))) (set! C39d1@get-record-name (lambda (C3bb0@spec) ((lambda (C3bb2@t) ((lambda (C3bb4@ls/false) (if C3bb4@ls/false (apply (lambda (C3bb6@foo C3bb7@make-foo C3bb8@foo?) C3bb6@foo) C3bb4@ls/false) ((lambda (C3bbc@t) ((lambda (C3bbe@ls/false) (if C3bbe@ls/false (apply (lambda (C3bc0@foo) C3bc0@foo) C3bbe@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3bbc@t))) (C3047@syntax-dispatch C3bbc@t 'any))) C3bb2@t))) (C3047@syntax-dispatch C3bb2@t '(any any any)))) C3bb0@spec))) (set! C39d3@get-record-constructor-name (lambda (C3b9c@spec) ((lambda (C3b9e@t) ((lambda (C3ba0@ls/false) (if C3ba0@ls/false (apply (lambda (C3ba2@foo C3ba3@make-foo C3ba4@foo?) C3ba3@make-foo) C3ba0@ls/false) ((lambda (C3ba8@t) ((lambda (C3baa@ls/false) (if (and C3baa@ls/false (apply (lambda (C3bac@foo) (C2e42@id? C3bac@foo)) C3baa@ls/false)) (apply (lambda (C3bae@foo) (C39cf@id C3bae@foo '"make-" (C2e56@stx->datum C3bae@foo))) C3baa@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3ba8@t))) (C3047@syntax-dispatch C3ba8@t 'any))) C3b9e@t))) (C3047@syntax-dispatch C3b9e@t '(any any any)))) C3b9c@spec))) (set! C39d5@get-record-predicate-name (lambda (C3b88@spec) ((lambda (C3b8a@t) ((lambda (C3b8c@ls/false) (if C3b8c@ls/false (apply (lambda (C3b8e@foo C3b8f@make-foo C3b90@foo?) C3b90@foo?) C3b8c@ls/false) ((lambda (C3b94@t) ((lambda (C3b96@ls/false) (if (and C3b96@ls/false (apply (lambda (C3b98@foo) (C2e42@id? C3b98@foo)) C3b96@ls/false)) (apply (lambda (C3b9a@foo) (C39cf@id C3b9a@foo (C2e56@stx->datum C3b9a@foo) '"?")) C3b96@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b94@t))) (C3047@syntax-dispatch C3b94@t 'any))) C3b8a@t))) (C3047@syntax-dispatch C3b8a@t '(any any any)))) C3b88@spec))) (set! C39d7@get-clause (lambda (C3b76@id C3b77@ls) ((lambda (C3b7a@t) ((lambda (C3b7c@ls/false) (if C3b7c@ls/false (apply (lambda () '#f) C3b7c@ls/false) ((lambda (C3b7e@t) ((lambda (C3b80@ls/false) (if C3b80@ls/false (apply (lambda (C3b82@x C3b83@rest C3b84@ls) (if (C2e48@free-id=? (C2ffd@bless C3b76@id) C3b82@x) (cons C3b82@x C3b83@rest) (C39d7@get-clause C3b76@id C3b84@ls))) C3b80@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b7e@t))) (C3047@syntax-dispatch C3b7e@t '((any . any) . any)))) C3b7a@t))) (C3047@syntax-dispatch C3b7a@t '()))) C3b77@ls))) (set! C39d9@foo-rtd-code (lambda (C3b24@name C3b25@clause* C3b26@parent-rtd-code) ((lambda (C3b2b@convert-field-spec*) (begin (set! C3b2b@convert-field-spec* (lambda (C3b5c@ls) (list->vector (map (lambda (C3b5e@x) ((lambda (C3b60@t) ((lambda (C3b62@ls/false) (if C3b62@ls/false (apply (lambda (C3b64@name C3b65@rest) (list 'mutable C3b64@name)) C3b62@ls/false) ((lambda (C3b68@t) ((lambda (C3b6a@ls/false) (if C3b6a@ls/false (apply (lambda (C3b6c@name C3b6d@rest) (list 'immutable C3b6c@name)) C3b6a@ls/false) ((lambda (C3b70@t) ((lambda (C3b72@ls/false) (if C3b72@ls/false (apply (lambda (C3b74@name) (list 'immutable C3b74@name)) C3b72@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b70@t))) (C3047@syntax-dispatch C3b70@t 'any))) C3b68@t))) (C3047@syntax-dispatch C3b68@t '(#(scheme-id immutable) any . any)))) C3b60@t))) (C3047@syntax-dispatch C3b60@t '(#(scheme-id mutable) any . any)))) C3b5e@x)) C3b5c@ls)))) ((lambda (C3b2c@uid-code C3b2d@sealed? C3b2e@opaque? C3b2f@fields) (C2ffd@bless (list 'make-record-type-descriptor (list 'quote C3b24@name) C3b26@parent-rtd-code C3b2c@uid-code C3b2d@sealed? C3b2e@opaque? C3b2f@fields))) ((lambda (C3b34@t) ((lambda (C3b36@ls/false) (if C3b36@ls/false (apply (lambda () (list 'quote (gensym))) C3b36@ls/false) ((lambda (C3b38@t) ((lambda (C3b3a@ls/false) (if C3b3a@ls/false (apply (lambda (C3b3c@uid) (list 'quote C3b3c@uid)) C3b3a@ls/false) ((lambda (C3b3e@t) ((lambda (C3b40@ls/false) (if C3b40@ls/false (apply (lambda () '#f) C3b40@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b3e@t))) (C3047@syntax-dispatch C3b3e@t '_))) C3b38@t))) (C3047@syntax-dispatch C3b38@t '(_ any)))) C3b34@t))) (C3047@syntax-dispatch C3b34@t '(_)))) (C39d7@get-clause 'nongenerative C3b25@clause*)) ((lambda (C3b42@t) ((lambda (C3b44@ls/false) (if C3b44@ls/false (apply (lambda () '#t) C3b44@ls/false) ((lambda (C3b46@t) ((lambda (C3b48@ls/false) (if C3b48@ls/false (apply (lambda () '#f) C3b48@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b46@t))) (C3047@syntax-dispatch C3b46@t '_))) C3b42@t))) (C3047@syntax-dispatch C3b42@t '(_ #(atom #t))))) (C39d7@get-clause 'sealed C3b25@clause*)) ((lambda (C3b4a@t) ((lambda (C3b4c@ls/false) (if C3b4c@ls/false (apply (lambda () '#t) C3b4c@ls/false) ((lambda (C3b4e@t) ((lambda (C3b50@ls/false) (if C3b50@ls/false (apply (lambda () '#f) C3b50@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b4e@t))) (C3047@syntax-dispatch C3b4e@t '_))) C3b4a@t))) (C3047@syntax-dispatch C3b4a@t '(_ #(atom #t))))) (C39d7@get-clause 'opaque C3b25@clause*)) ((lambda (C3b52@t) ((lambda (C3b54@ls/false) (if C3b54@ls/false (apply (lambda (C3b56@field-spec*) (list 'quote (C3b2b@convert-field-spec* C3b56@field-spec*))) C3b54@ls/false) ((lambda (C3b58@t) ((lambda (C3b5a@ls/false) (if C3b5a@ls/false (apply (lambda () ''#()) C3b5a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b58@t))) (C3047@syntax-dispatch C3b58@t '_))) C3b52@t))) (C3047@syntax-dispatch C3b52@t '(_ . each-any)))) (C39d7@get-clause 'fields C3b25@clause*))))) '#f))) (set! C39db@parent-rtd-code (lambda (C3b0c@clause*) ((lambda (C3b0e@t) ((lambda (C3b10@ls/false) (if C3b10@ls/false (apply (lambda (C3b12@name) (list 'record-type-descriptor C3b12@name)) C3b10@ls/false) ((lambda (C3b14@t) ((lambda (C3b16@ls/false) (if C3b16@ls/false (apply (lambda () ((lambda (C3b18@t) ((lambda (C3b1a@ls/false) (if C3b1a@ls/false (apply (lambda (C3b1c@rtd C3b1d@rcd) C3b1c@rtd) C3b1a@ls/false) ((lambda (C3b20@t) ((lambda (C3b22@ls/false) (if C3b22@ls/false (apply (lambda () '#f) C3b22@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b20@t))) (C3047@syntax-dispatch C3b20@t '#(atom #f)))) C3b18@t))) (C3047@syntax-dispatch C3b18@t '(_ any any)))) (C39d7@get-clause 'parent-rtd C3b0c@clause*))) C3b16@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b14@t))) (C3047@syntax-dispatch C3b14@t '#(atom #f)))) C3b0e@t))) (C3047@syntax-dispatch C3b0e@t '(_ any)))) (C39d7@get-clause 'parent C3b0c@clause*)))) (set! C39dd@parent-rcd-code (lambda (C3af4@clause*) ((lambda (C3af6@t) ((lambda (C3af8@ls/false) (if C3af8@ls/false (apply (lambda (C3afa@name) (list 'record-constructor-descriptor C3afa@name)) C3af8@ls/false) ((lambda (C3afc@t) ((lambda (C3afe@ls/false) (if C3afe@ls/false (apply (lambda () ((lambda (C3b00@t) ((lambda (C3b02@ls/false) (if C3b02@ls/false (apply (lambda (C3b04@rtd C3b05@rcd) C3b05@rcd) C3b02@ls/false) ((lambda (C3b08@t) ((lambda (C3b0a@ls/false) (if C3b0a@ls/false (apply (lambda () '#f) C3b0a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3b08@t))) (C3047@syntax-dispatch C3b08@t '#(atom #f)))) C3b00@t))) (C3047@syntax-dispatch C3b00@t '(_ any any)))) (C39d7@get-clause 'parent-rtd C3af4@clause*))) C3afe@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3afc@t))) (C3047@syntax-dispatch C3afc@t '#(atom #f)))) C3af6@t))) (C3047@syntax-dispatch C3af6@t '(_ any)))) (C39d7@get-clause 'parent C3af4@clause*)))) (set! C39df@foo-rcd-code (lambda (C3aec@clause* C3aed@foo-rtd C3aee@protocol C3aef@parent-rcd-code) (list 'make-record-constructor-descriptor C3aed@foo-rtd C3aef@parent-rcd-code C3aee@protocol))) (set! C39e1@get-protocol-code (lambda (C3ae0@clause*) ((lambda (C3ae2@t) ((lambda (C3ae4@ls/false) (if C3ae4@ls/false (apply (lambda (C3ae6@expr) C3ae6@expr) C3ae4@ls/false) ((lambda (C3ae8@t) ((lambda (C3aea@ls/false) (if C3aea@ls/false (apply (lambda () '#f) C3aea@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3ae8@t))) (C3047@syntax-dispatch C3ae8@t '_))) C3ae2@t))) (C3047@syntax-dispatch C3ae2@t '(_ any)))) (C39d7@get-clause 'protocol C3ae0@clause*)))) (set! C39e3@get-fields (lambda (C3ace@clause*) ((lambda (C3ad0@t) ((lambda (C3ad2@ls/false) (if C3ad2@ls/false (apply (lambda () '()) C3ad2@ls/false) ((lambda (C3ad4@t) ((lambda (C3ad6@ls/false) (if C3ad6@ls/false (apply (lambda (C3ad8@f*) C3ad8@f*) C3ad6@ls/false) ((lambda (C3ada@t) ((lambda (C3adc@ls/false) (if C3adc@ls/false (apply (lambda (C3ade@rest) (C39e3@get-fields C3ade@rest)) C3adc@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3ada@t))) (C3047@syntax-dispatch C3ada@t '(_ . any)))) C3ad4@t))) (C3047@syntax-dispatch C3ad4@t '((#(scheme-id fields) . each-any) . _)))) C3ad0@t))) (C3047@syntax-dispatch C3ad0@t '()))) C3ace@clause*))) (set! C39e5@get-mutator-indices (lambda (C3ab6@fields) ((letrec ((C3ab8@f (lambda (C3aba@fields C3abb@i) ((lambda (C3abe@t) ((lambda (C3ac0@ls/false) (if C3ac0@ls/false (apply (lambda () '()) C3ac0@ls/false) ((lambda (C3ac2@t) ((lambda (C3ac4@ls/false) (if C3ac4@ls/false (apply (lambda (C3ac6@rest) (cons C3abb@i (C3ab8@f C3ac6@rest (+ C3abb@i '1)))) C3ac4@ls/false) ((lambda (C3ac8@t) ((lambda (C3aca@ls/false) (if C3aca@ls/false (apply (lambda (C3acc@rest) (C3ab8@f C3acc@rest (+ C3abb@i '1))) C3aca@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3ac8@t))) (C3047@syntax-dispatch C3ac8@t '(_ . any)))) C3ac2@t))) (C3047@syntax-dispatch C3ac2@t '((#(scheme-id mutable) . _) . any)))) C3abe@t))) (C3047@syntax-dispatch C3abe@t '()))) C3aba@fields)))) C3ab8@f) C3ab6@fields '0))) (set! C39e7@get-mutators (lambda (C3a8c@foo C3a8d@fields) ((lambda (C3a91@gen-name) (begin (set! C3a91@gen-name (lambda (C3ab4@x) (C312b@datum->syntax C3a8c@foo (string->symbol (string-append (symbol->string (C312d@syntax->datum C3a8c@foo)) '"-" (symbol->string (C312d@syntax->datum C3ab4@x)) '"-set!"))))) ((letrec ((C3a92@f (lambda (C3a94@fields) ((lambda (C3a96@t) ((lambda (C3a98@ls/false) (if C3a98@ls/false (apply (lambda () '()) C3a98@ls/false) ((lambda (C3a9a@t) ((lambda (C3a9c@ls/false) (if C3a9c@ls/false (apply (lambda (C3a9e@name C3a9f@accessor C3aa0@mutator C3aa1@rest) (cons C3aa0@mutator (C3a92@f C3aa1@rest))) C3a9c@ls/false) ((lambda (C3aa6@t) ((lambda (C3aa8@ls/false) (if C3aa8@ls/false (apply (lambda (C3aaa@name C3aab@rest) (cons (C3a91@gen-name C3aaa@name) (C3a92@f C3aab@rest))) C3aa8@ls/false) ((lambda (C3aae@t) ((lambda (C3ab0@ls/false) (if C3ab0@ls/false (apply (lambda (C3ab2@rest) (C3a92@f C3ab2@rest)) C3ab0@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3aae@t))) (C3047@syntax-dispatch C3aae@t '(_ . any)))) C3aa6@t))) (C3047@syntax-dispatch C3aa6@t '((#(scheme-id mutable) any) . any)))) C3a9a@t))) (C3047@syntax-dispatch C3a9a@t '((#(scheme-id mutable) any any any) . any)))) C3a96@t))) (C3047@syntax-dispatch C3a96@t '()))) C3a94@fields)))) C3a92@f) C3a8d@fields))) '#f))) (set! C39e9@get-accessors (lambda (C3a48@foo C3a49@fields) ((lambda (C3a4d@gen-name) (begin (set! C3a4d@gen-name (lambda (C3a8a@x) (C312b@datum->syntax C3a48@foo (string->symbol (string-append (symbol->string (C312d@syntax->datum C3a48@foo)) '"-" (symbol->string (C312d@syntax->datum C3a8a@x))))))) (map (lambda (C3a4e@field) ((lambda (C3a50@t) ((lambda (C3a52@ls/false) (if (and C3a52@ls/false (apply (lambda (C3a54@name C3a55@accessor C3a56@mutator) (C2e42@id? C3a55@accessor)) C3a52@ls/false)) (apply (lambda (C3a5a@name C3a5b@accessor C3a5c@mutator) C3a5b@accessor) C3a52@ls/false) ((lambda (C3a60@t) ((lambda (C3a62@ls/false) (if (and C3a62@ls/false (apply (lambda (C3a64@name C3a65@accessor) (C2e42@id? C3a65@accessor)) C3a62@ls/false)) (apply (lambda (C3a68@name C3a69@accessor) C3a69@accessor) C3a62@ls/false) ((lambda (C3a6c@t) ((lambda (C3a6e@ls/false) (if (and C3a6e@ls/false (apply (lambda (C3a70@name) (C2e42@id? C3a70@name)) C3a6e@ls/false)) (apply (lambda (C3a72@name) (C3a4d@gen-name C3a72@name)) C3a6e@ls/false) ((lambda (C3a74@t) ((lambda (C3a76@ls/false) (if (and C3a76@ls/false (apply (lambda (C3a78@name) (C2e42@id? C3a78@name)) C3a76@ls/false)) (apply (lambda (C3a7a@name) (C3a4d@gen-name C3a7a@name)) C3a76@ls/false) ((lambda (C3a7c@t) ((lambda (C3a7e@ls/false) (if (and C3a7e@ls/false (apply (lambda (C3a80@name) (C2e42@id? C3a80@name)) C3a7e@ls/false)) (apply (lambda (C3a82@name) (C3a4d@gen-name C3a82@name)) C3a7e@ls/false) ((lambda (C3a84@t) ((lambda (C3a86@ls/false) (if C3a86@ls/false (apply (lambda (C3a88@others) (C3127@syntax-violation '#f '"invalid field spec" C3a4e@field)) C3a86@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3a84@t))) (C3047@syntax-dispatch C3a84@t 'any))) C3a7c@t))) (C3047@syntax-dispatch C3a7c@t 'any))) C3a74@t))) (C3047@syntax-dispatch C3a74@t '(#(scheme-id immutable) any)))) C3a6c@t))) (C3047@syntax-dispatch C3a6c@t '(#(scheme-id mutable) any)))) C3a60@t))) (C3047@syntax-dispatch C3a60@t '(#(scheme-id immutable) any any)))) C3a50@t))) (C3047@syntax-dispatch C3a50@t '(#(scheme-id mutable) any any any)))) C3a4e@field)) C3a49@fields))) '#f))) (set! C39eb@enumerate (lambda (C3a40@ls) ((letrec ((C3a42@f (lambda (C3a44@ls C3a45@i) (if (null? C3a44@ls) '() (cons C3a45@i (C3a42@f (cdr C3a44@ls) (+ C3a45@i '1))))))) C3a42@f) C3a40@ls '0))) (set! C39ed@do-define-record (lambda (C3a18@namespec C3a19@clause*) ((lambda (C3a1c@foo) ((lambda (C3a1e@foo-rtd) ((lambda (C3a20@foo-rcd) ((lambda (C3a22@protocol) ((lambda (C3a24@make-foo) ((lambda (C3a26@fields) ((lambda (C3a28@idx*) ((lambda (C3a2a@foo-x*) ((lambda (C3a2c@set-foo-x!*) ((lambda (C3a2e@set-foo-idx*) ((lambda (C3a30@foo?) ((lambda (C3a32@foo-rtd-code) ((lambda (C3a34@foo-rcd-code) ((lambda (C3a36@protocol-code) ((lambda () (C2ffd@bless (cons 'begin (cons (list 'define C3a1e@foo-rtd C3a32@foo-rtd-code) (cons (list 'define C3a22@protocol C3a36@protocol-code) (cons (list 'define C3a20@foo-rcd C3a34@foo-rcd-code) (cons (list 'define-syntax C3a1c@foo (list 'list ''$rtd (list 'syntax C3a1e@foo-rtd) (list 'syntax C3a20@foo-rcd))) (cons (list 'define C3a30@foo? (list 'record-predicate C3a1e@foo-rtd)) (cons (list 'define C3a24@make-foo (list 'record-constructor C3a20@foo-rcd)) (append (map (lambda (C3a38@foo-x C3a39@idx) (list 'define C3a38@foo-x (list 'record-accessor C3a1e@foo-rtd C3a39@idx))) C3a2a@foo-x* C3a28@idx*) (map (lambda (C3a3c@set-foo-x! C3a3d@idx) (list 'define C3a3c@set-foo-x! (list 'record-mutator C3a1e@foo-rtd C3a3d@idx))) C3a2c@set-foo-x!* C3a2e@set-foo-idx*))))))))))))) (C39e1@get-protocol-code C3a19@clause*))) (C39df@foo-rcd-code C3a19@clause* C3a1e@foo-rtd C3a22@protocol (C39dd@parent-rcd-code C3a19@clause*)))) (C39d9@foo-rtd-code C3a1c@foo C3a19@clause* (C39db@parent-rtd-code C3a19@clause*)))) (C39d5@get-record-predicate-name C3a18@namespec))) (C39e5@get-mutator-indices C3a26@fields))) (C39e7@get-mutators C3a1c@foo C3a26@fields))) (C39e9@get-accessors C3a1c@foo C3a26@fields))) (C39eb@enumerate C3a26@fields))) (C39e3@get-fields C3a19@clause*))) (C39d3@get-record-constructor-name C3a18@namespec))) (gensym))) (gensym))) (gensym))) (C39d1@get-record-name C3a18@namespec)))) (set! C39ef@verify-clauses (lambda (C39f8@x C39f9@cls*) ((lambda (C39fd@valid-kwds C39ff@free-id-member?) (begin (set! C39fd@valid-kwds (map C2ffd@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! C39ff@free-id-member? (lambda (C3a14@x C3a15@ls) (and (pair? C3a15@ls) (or (C2e48@free-id=? C3a14@x (car C3a15@ls)) (C39ff@free-id-member? C3a14@x (cdr C3a15@ls)))))) ((letrec ((C3a00@f (lambda (C3a02@cls* C3a03@seen*) (if (not (null? C3a02@cls*)) ((lambda (C3a06@t) ((lambda (C3a08@ls/false) (if C3a08@ls/false (apply (lambda (C3a0a@kwd C3a0b@rest) (if (or (not (C2e42@id? C3a0a@kwd)) (not (C39ff@free-id-member? C3a0a@kwd C39fd@valid-kwds))) (C3127@syntax-violation '#f '"not a valid define-record-type keyword" C3a0a@kwd) (if (C2e4e@bound-id-member? C3a0a@kwd C3a03@seen*) (C3127@syntax-violation '#f '"duplicate use of keyword " C39f8@x C3a0a@kwd) (C3a00@f (cdr C3a02@cls*) (cons C3a0a@kwd C3a03@seen*))))) C3a08@ls/false) ((lambda (C3a0e@t) ((lambda (C3a10@ls/false) (if C3a10@ls/false (apply (lambda (C3a12@cls) (C3127@syntax-violation '#f '"malformed define-record-type clause" C3a12@cls)) C3a10@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3a0e@t))) (C3047@syntax-dispatch C3a0e@t 'any))) C3a06@t))) (C3047@syntax-dispatch C3a06@t '(any . any)))) (car C3a02@cls*)) (void))))) C3a00@f) C39f9@cls* '()))) '#f '#f))) ((lambda (C39f0@t) ((lambda (C39f2@ls/false) (if C39f2@ls/false (apply (lambda (C39f4@namespec C39f5@clause*) (begin (C39ef@verify-clauses C39cc@x C39f5@clause*) (C39ed@do-define-record C39f4@namespec C39f5@clause*))) C39f2@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C39f0@t))) (C3047@syntax-dispatch C39f0@t '(_ any . each-any)))) C39cc@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! C303d@define-condition-type-macro (lambda (C3bc8@x) ((lambda (C3bcb@mkname) (begin (set! C3bcb@mkname (lambda (C3bf8@name C3bf9@suffix) (C312b@datum->syntax C3bf8@name (string->symbol (string-append (symbol->string (C312d@syntax->datum C3bf8@name)) C3bf9@suffix))))) ((lambda (C3bcc@t) ((lambda (C3bce@ls/false) (if (and C3bce@ls/false (apply (lambda (C3bd0@ctxt C3bd1@name C3bd2@super C3bd3@constructor C3bd4@predicate C3bd5@field* C3bd6@accessor*) (and (C2e42@id? C3bd1@name) (C2e42@id? C3bd2@super) (C2e42@id? C3bd3@constructor) (C2e42@id? C3bd4@predicate) (for-all C2e42@id? C3bd5@field*) (for-all C2e42@id? C3bd6@accessor*))) C3bce@ls/false)) (apply (lambda (C3bde@ctxt C3bdf@name C3be0@super C3be1@constructor C3be2@predicate C3be3@field* C3be4@accessor*) ((lambda (C3bec@aux-accessor*) (C2ffd@bless (cons 'begin (cons (cons 'define-record-type (cons (list C3bdf@name C3be1@constructor (gensym)) (cons (list 'parent C3be0@super) (cons (cons 'fields (map (lambda (C3bee@field C3bef@aux) (list 'immutable C3bee@field C3bef@aux)) C3be3@field* C3bec@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define C3be2@predicate (list 'condition-predicate (list 'record-type-descriptor C3bdf@name))) (map (lambda (C3bf2@accessor C3bf3@aux) (list 'define C3bf2@accessor (list 'condition-accessor (list 'record-type-descriptor C3bdf@name) C3bf3@aux))) C3be4@accessor* C3bec@aux-accessor*)))))) (map (lambda (C3bf6@x) (gensym)) C3be4@accessor*))) C3bce@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3bcc@t))) (C3047@syntax-dispatch C3bcc@t '(any any any any any . #(each (any any)))))) C3bc8@x))) '#f))) (set! C303f@incorrect-usage-macro (lambda (C3bfc@e) (C3127@syntax-violation '#f '"incorrect usage of auxiliary keyword" C3bfc@e))) (set! C3041@parameterize-macro (lambda (C3bfe@e) ((lambda (C3c00@t) ((lambda (C3c02@ls/false) (if C3c02@ls/false (apply (lambda (C3c04@b C3c05@b*) (C2ffd@bless (cons 'let (cons '() (cons C3c04@b C3c05@b*))))) C3c02@ls/false) ((lambda (C3c08@t) ((lambda (C3c0a@ls/false) (if C3c0a@ls/false (apply (lambda (C3c0c@olhs* C3c0d@orhs* C3c0e@b C3c0f@b*) ((lambda (C3c14@lhs* C3c15@rhs*) (C2ffd@bless (cons (list 'lambda (append C3c14@lhs* C3c15@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (C3c18@lhs C3c19@rhs) (list 'let (list (list 't (list C3c18@lhs))) (list C3c18@lhs C3c19@rhs) (cons 'set! (cons C3c19@rhs '(t))))) C3c14@lhs* C3c15@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons C3c0e@b C3c0f@b*))) '(swap)))))) (append C3c0c@olhs* C3c0d@orhs*)))) (C3115@generate-temporaries C3c0c@olhs*) (C3115@generate-temporaries C3c0d@orhs*))) C3c0a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3c08@t))) (C3047@syntax-dispatch C3c08@t '(_ #(each (any any)) any . each-any)))) C3c00@t))) (C3047@syntax-dispatch C3c00@t '(_ () any . each-any)))) C3bfe@e))) (set! C3043@foreign-call-transformer (lambda (C3c1c@e C3c1d@r C3c1e@mr) ((lambda (C3c22@t) ((lambda (C3c24@ls/false) (if C3c24@ls/false (apply (lambda (C3c26@name C3c27@arg*) (cons 'foreign-call (cons (C3069@chi-expr C3c26@name C3c1d@r C3c1e@mr) (C3065@chi-expr* C3c27@arg* C3c1d@r C3c1e@mr)))) C3c24@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3c22@t))) (C3047@syntax-dispatch C3c22@t '(_ any . each-any)))) C3c1c@e))) (set! C3045@convert-pattern (lambda (C3c2a@pattern C3c2b@keys) ((lambda (C3c2f@cvt* C3c31@cvt) (begin (set! C3c2f@cvt* (lambda (C3cce@p* C3ccf@n C3cd0@ids) (if (null? C3cce@p*) (values '() C3cd0@ids) (call-with-values (lambda () (C3c2f@cvt* (cdr C3cce@p*) C3ccf@n C3cd0@ids)) (lambda (C3cd8@C3cd5 C3cd9@C3cd7) ((lambda (C3cdc@ids C3cdd@y) (call-with-values (lambda () (C3c31@cvt (car C3cce@p*) C3ccf@n C3cdc@ids)) (lambda (C3ce4@C3ce1 C3ce5@C3ce3) ((lambda (C3ce8@ids C3ce9@x) (values (cons C3ce9@x C3cdd@y) C3ce8@ids)) C3ce5@C3ce3 C3ce4@C3ce1)))) C3cd9@C3cd7 C3cd8@C3cd5)))))) (set! C3c31@cvt (lambda (C3c32@p C3c33@n C3c34@ids) ((lambda (C3c38@t) ((lambda (C3c3a@ls/false) (if (and C3c3a@ls/false (apply (lambda (C3c3c@id) (C2e42@id? C3c3c@id)) C3c3a@ls/false)) (apply (lambda (C3c3e@id) (if (C2e4e@bound-id-member? C3c32@p C3c2b@keys) (values (vector 'free-id C3c32@p) C3c34@ids) (if (C2e48@free-id=? C3c32@p (C2fd1@scheme-stx '_)) (values '_ C3c34@ids) (values 'any (cons (cons C3c32@p C3c33@n) C3c34@ids))))) C3c3a@ls/false) ((lambda (C3c40@t) ((lambda (C3c42@ls/false) (if (and C3c42@ls/false (apply (lambda (C3c44@p C3c45@dots) (C3049@ellipsis? C3c45@dots)) C3c42@ls/false)) (apply (lambda (C3c48@p C3c49@dots) (call-with-values (lambda () (C3c31@cvt C3c48@p (+ C3c33@n '1) C3c34@ids)) (lambda (C3c50@C3c4d C3c51@C3c4f) ((lambda (C3c54@ids C3c55@p) (values (if (eq? C3c55@p 'any) 'each-any (vector 'each C3c55@p)) C3c54@ids)) C3c51@C3c4f C3c50@C3c4d)))) C3c42@ls/false) ((lambda (C3c58@t) ((lambda (C3c5a@ls/false) (if (and C3c5a@ls/false (apply (lambda (C3c5c@x C3c5d@dots C3c5e@ys C3c5f@z) (C3049@ellipsis? C3c5d@dots)) C3c5a@ls/false)) (apply (lambda (C3c64@x C3c65@dots C3c66@ys C3c67@z) (call-with-values (lambda () (C3c31@cvt C3c67@z C3c33@n C3c34@ids)) (lambda (C3c70@C3c6d C3c71@C3c6f) ((lambda (C3c74@ids C3c75@z) (call-with-values (lambda () (C3c2f@cvt* C3c66@ys C3c33@n C3c74@ids)) (lambda (C3c7c@C3c79 C3c7d@C3c7b) ((lambda (C3c80@ids C3c81@ys) (call-with-values (lambda () (C3c31@cvt C3c64@x (+ C3c33@n '1) C3c80@ids)) (lambda (C3c88@C3c85 C3c89@C3c87) ((lambda (C3c8c@ids C3c8d@x) (values (vector 'each+ C3c8d@x (reverse C3c81@ys) C3c75@z) C3c8c@ids)) C3c89@C3c87 C3c88@C3c85)))) C3c7d@C3c7b C3c7c@C3c79)))) C3c71@C3c6f C3c70@C3c6d)))) C3c5a@ls/false) ((lambda (C3c90@t) ((lambda (C3c92@ls/false) (if C3c92@ls/false (apply (lambda (C3c94@x C3c95@y) (call-with-values (lambda () (C3c31@cvt C3c95@y C3c33@n C3c34@ids)) (lambda (C3c9c@C3c99 C3c9d@C3c9b) ((lambda (C3ca0@ids C3ca1@y) (call-with-values (lambda () (C3c31@cvt C3c94@x C3c33@n C3ca0@ids)) (lambda (C3ca8@C3ca5 C3ca9@C3ca7) ((lambda (C3cac@ids C3cad@x) (values (cons C3cad@x C3ca1@y) C3cac@ids)) C3ca9@C3ca7 C3ca8@C3ca5)))) C3c9d@C3c9b C3c9c@C3c99)))) C3c92@ls/false) ((lambda (C3cb0@t) ((lambda (C3cb2@ls/false) (if C3cb2@ls/false (apply (lambda () (values '() C3c34@ids)) C3cb2@ls/false) ((lambda (C3cb4@t) ((lambda (C3cb6@ls/false) (if (and C3cb6@ls/false (apply (lambda (C3cb8@p) (not (C2e0e@stx? C3cb8@p))) C3cb6@ls/false)) (apply (lambda (C3cba@p) (call-with-values (lambda () (C3c31@cvt C3cba@p C3c33@n C3c34@ids)) (lambda (C3cc0@C3cbd C3cc1@C3cbf) ((lambda (C3cc4@ids C3cc5@p) (values (vector 'vector C3cc5@p) C3cc4@ids)) C3cc1@C3cbf C3cc0@C3cbd)))) C3cb6@ls/false) ((lambda (C3cc8@t) ((lambda (C3cca@ls/false) (if C3cca@ls/false (apply (lambda (C3ccc@datum) (values (vector 'atom (C2e56@stx->datum C3ccc@datum)) C3c34@ids)) C3cca@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3cc8@t))) (C3047@syntax-dispatch C3cc8@t 'any))) C3cb4@t))) (C3047@syntax-dispatch C3cb4@t '#(vector each-any)))) C3cb0@t))) (C3047@syntax-dispatch C3cb0@t '()))) C3c90@t))) (C3047@syntax-dispatch C3c90@t '(any . any)))) C3c58@t))) (C3047@syntax-dispatch C3c58@t '(any any . #(each+ any () any))))) C3c40@t))) (C3047@syntax-dispatch C3c40@t '(any any)))) C3c38@t))) (C3047@syntax-dispatch C3c38@t 'any))) C3c32@p))) (C3c31@cvt C3c2a@pattern '0 '()))) '#f '#f))) (set! C3047@syntax-dispatch ((lambda () ((lambda (C3ced@stx^ C3cef@match-each C3cf1@match-each+ C3cf3@match-each-any C3cf5@match-empty C3cf7@combine C3cf9@match* C3cfb@match) (begin (set! C3ced@stx^ (lambda (C3dc8@e C3dc9@m* C3dca@s* C3dcb@ae*) (if (and (null? C3dc9@m*) (null? C3dca@s*) (null? C3dcb@ae*)) C3dc8@e (C2e2a@mkstx C3dc8@e C3dc9@m* C3dca@s* C3dcb@ae*)))) (set! C3cef@match-each (lambda (C3da8@e C3da9@p C3daa@m* C3dab@s* C3dac@ae*) (if (pair? C3da8@e) ((lambda (C3db2@first) (and C3db2@first ((lambda (C3db4@rest) (and C3db4@rest (cons C3db2@first C3db4@rest))) (C3cef@match-each (cdr C3da8@e) C3da9@p C3daa@m* C3dab@s* C3dac@ae*)))) (C3cfb@match (car C3da8@e) C3da9@p C3daa@m* C3dab@s* C3dac@ae* '())) (if (null? C3da8@e) '() (if (C2e0e@stx? C3da8@e) (and (not (C2dc8@top-marked? C3daa@m*)) (call-with-values (lambda () (join-wraps C3daa@m* C3dab@s* C3dac@ae* C3da8@e)) (lambda (C3dbc@C3db7 C3dbd@C3db9 C3dbe@C3dbb) ((lambda (C3dc2@ae* C3dc3@s* C3dc4@m*) (C3cef@match-each (C2e10@stx-expr C3da8@e) C3da9@p C3dc4@m* C3dc3@s* C3dc2@ae*)) C3dbe@C3dbb C3dbd@C3db9 C3dbc@C3db7)))) (if (C2996@C286a@annotation? C3da8@e) (C3cef@match-each (C2998@C286e@annotation-expression C3da8@e) C3da9@p C3daa@m* C3dab@s* C3dac@ae*) '#f)))))) (set! C3cf1@match-each+ (lambda (C3d68@e C3d69@x-pat C3d6a@y-pat C3d6b@z-pat C3d6c@m* C3d6d@s* C3d6e@ae* C3d6f@r) ((letrec ((C3d78@f (lambda (C3d7a@e C3d7b@m* C3d7c@s* C3d7d@ae*) (if (pair? C3d7a@e) (call-with-values (lambda () (C3d78@f (cdr C3d7a@e) C3d7b@m* C3d7c@s* C3d7d@ae*)) (lambda (C3d88@C3d83 C3d89@C3d85 C3d8a@C3d87) ((lambda (C3d8e@r C3d8f@y-pat C3d90@xr*) (if C3d8e@r (if (null? C3d8f@y-pat) ((lambda (C3d94@xr) (if C3d94@xr (values (cons C3d94@xr C3d90@xr*) C3d8f@y-pat C3d8e@r) (values '#f '#f '#f))) (C3cfb@match (car C3d7a@e) C3d69@x-pat C3d7b@m* C3d7c@s* C3d7d@ae* '())) (values '() (cdr C3d8f@y-pat) (C3cfb@match (car C3d7a@e) (car C3d8f@y-pat) C3d7b@m* C3d7c@s* C3d7d@ae* C3d8e@r))) (values '#f '#f '#f))) C3d8a@C3d87 C3d89@C3d85 C3d88@C3d83))) (if (C2e0e@stx? C3d7a@e) (if (C2dc8@top-marked? C3d7b@m*) (values '() C3d6a@y-pat (C3cfb@match C3d7a@e C3d6b@z-pat C3d7b@m* C3d7c@s* C3d7d@ae* C3d6f@r)) (call-with-values (lambda () (join-wraps C3d7b@m* C3d7c@s* C3d7d@ae* C3d7a@e)) (lambda (C3d9c@C3d97 C3d9d@C3d99 C3d9e@C3d9b) ((lambda (C3da2@ae* C3da3@s* C3da4@m*) (C3d78@f (C2e10@stx-expr C3d7a@e) C3da4@m* C3da3@s* C3da2@ae*)) C3d9e@C3d9b C3d9d@C3d99 C3d9c@C3d97)))) (if (C2996@C286a@annotation? C3d7a@e) (C3d78@f (C2998@C286e@annotation-expression C3d7a@e) C3d7b@m* C3d7c@s* C3d7d@ae*) (values '() C3d6a@y-pat (C3cfb@match C3d7a@e C3d6b@z-pat C3d7b@m* C3d7c@s* C3d7d@ae* C3d6f@r)))))))) C3d78@f) C3d68@e C3d6c@m* C3d6d@s* C3d6e@ae*))) (set! C3cf3@match-each-any (lambda (C3d4c@e C3d4d@m* C3d4e@s* C3d4f@ae*) (if (pair? C3d4c@e) ((lambda (C3d54@l) (and C3d54@l (cons (C3ced@stx^ (car C3d4c@e) C3d4d@m* C3d4e@s* C3d4f@ae*) C3d54@l))) (C3cf3@match-each-any (cdr C3d4c@e) C3d4d@m* C3d4e@s* C3d4f@ae*)) (if (null? C3d4c@e) '() (if (C2e0e@stx? C3d4c@e) (and (not (C2dc8@top-marked? C3d4d@m*)) (call-with-values (lambda () (join-wraps C3d4d@m* C3d4e@s* C3d4f@ae* C3d4c@e)) (lambda (C3d5c@C3d57 C3d5d@C3d59 C3d5e@C3d5b) ((lambda (C3d62@ae* C3d63@s* C3d64@m*) (C3cf3@match-each-any (C2e10@stx-expr C3d4c@e) C3d64@m* C3d63@s* C3d62@ae*)) C3d5e@C3d5b C3d5d@C3d59 C3d5c@C3d57)))) (if (C2996@C286a@annotation? C3d4c@e) (C3cf3@match-each-any (C2998@C286e@annotation-expression C3d4c@e) C3d4d@m* C3d4e@s* C3d4f@ae*) '#f)))))) (set! C3cf5@match-empty (lambda (C3d46@p C3d47@r) (if (null? C3d46@p) C3d47@r (if (eq? C3d46@p '_) C3d47@r (if (eq? C3d46@p 'any) (cons '() C3d47@r) (if (pair? C3d46@p) (C3cf5@match-empty (car C3d46@p) (C3cf5@match-empty (cdr C3d46@p) C3d47@r)) (if (eq? C3d46@p 'each-any) (cons '() C3d47@r) ((lambda (C3d4a@t) (if (memv C3d4a@t '(each)) (C3cf5@match-empty (vector-ref C3d46@p '1) C3d47@r) (if (memv C3d4a@t '(each+)) (C3cf5@match-empty (vector-ref C3d46@p '1) (C3cf5@match-empty (reverse (vector-ref C3d46@p '2)) (C3cf5@match-empty (vector-ref C3d46@p '3) C3d47@r))) (if (memv C3d4a@t '(free-id atom)) C3d47@r (if (memv C3d4a@t '(scheme-id atom)) C3d47@r (if (memv C3d4a@t '(vector)) (C3cf5@match-empty (vector-ref C3d46@p '1) C3d47@r) (assertion-violation 'syntax-dispatch '"invalid pattern" C3d46@p))))))) (vector-ref C3d46@p '0))))))))) (set! C3cf7@combine (lambda (C3d42@r* C3d43@r) (if (null? (car C3d42@r*)) C3d43@r (cons (map car C3d42@r*) (C3cf7@combine (map cdr C3d42@r*) C3d43@r))))) (set! C3cf9@match* (lambda (C3d1e@e C3d1f@p C3d20@m* C3d21@s* C3d22@ae* C3d23@r) (if (null? C3d1f@p) (and (null? C3d1e@e) C3d23@r) (if (pair? C3d1f@p) (and (pair? C3d1e@e) (C3cfb@match (car C3d1e@e) (car C3d1f@p) C3d20@m* C3d21@s* C3d22@ae* (C3cfb@match (cdr C3d1e@e) (cdr C3d1f@p) C3d20@m* C3d21@s* C3d22@ae* C3d23@r))) (if (eq? C3d1f@p 'each-any) ((lambda (C3d2a@l) (and C3d2a@l (cons C3d2a@l C3d23@r))) (C3cf3@match-each-any C3d1e@e C3d20@m* C3d21@s* C3d22@ae*)) ((lambda (C3d2c@t) (if (memv C3d2c@t '(each)) (if (null? C3d1e@e) (C3cf5@match-empty (vector-ref C3d1f@p '1) C3d23@r) ((lambda (C3d2e@r*) (and C3d2e@r* (C3cf7@combine C3d2e@r* C3d23@r))) (C3cef@match-each C3d1e@e (vector-ref C3d1f@p '1) C3d20@m* C3d21@s* C3d22@ae*))) (if (memv C3d2c@t '(free-id)) (and (symbol? C3d1e@e) (C2dc8@top-marked? C3d20@m*) (C2e48@free-id=? (C3ced@stx^ C3d1e@e C3d20@m* C3d21@s* C3d22@ae*) (vector-ref C3d1f@p '1)) C3d23@r) (if (memv C3d2c@t '(scheme-id)) (and (symbol? C3d1e@e) (C2dc8@top-marked? C3d20@m*) (C2e48@free-id=? (C3ced@stx^ C3d1e@e C3d20@m* C3d21@s* C3d22@ae*) (C2fd1@scheme-stx (vector-ref C3d1f@p '1))) C3d23@r) (if (memv C3d2c@t '(each+)) (call-with-values (lambda () (C3cf1@match-each+ C3d1e@e (vector-ref C3d1f@p '1) (vector-ref C3d1f@p '2) (vector-ref C3d1f@p '3) C3d20@m* C3d21@s* C3d22@ae* C3d23@r)) (lambda (C3d36@C3d31 C3d37@C3d33 C3d38@C3d35) ((lambda (C3d3c@r C3d3d@y-pat C3d3e@xr*) (and C3d3c@r (null? C3d3d@y-pat) (if (null? C3d3e@xr*) (C3cf5@match-empty (vector-ref C3d1f@p '1) C3d3c@r) (C3cf7@combine C3d3e@xr* C3d3c@r)))) C3d38@C3d35 C3d37@C3d33 C3d36@C3d31))) (if (memv C3d2c@t '(atom)) (and (fast-equal? (vector-ref C3d1f@p '1) (C2e54@strip C3d1e@e C3d20@m*)) C3d23@r) (if (memv C3d2c@t '(vector)) (and (vector? C3d1e@e) (C3cfb@match (vector->list C3d1e@e) (vector-ref C3d1f@p '1) C3d20@m* C3d21@s* C3d22@ae* C3d23@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" C3d1f@p)))))))) (vector-ref C3d1f@p '0))))))) (set! C3cfb@match (lambda (C3d00@e C3d01@p C3d02@m* C3d03@s* C3d04@ae* C3d05@r) (if (not C3d05@r) '#f (if (eq? C3d01@p '_) C3d05@r (if (eq? C3d01@p 'any) (cons (C3ced@stx^ C3d00@e C3d02@m* C3d03@s* C3d04@ae*) C3d05@r) (if (C2e0e@stx? C3d00@e) (and (not (C2dc8@top-marked? C3d02@m*)) (call-with-values (lambda () (join-wraps C3d02@m* C3d03@s* C3d04@ae* C3d00@e)) (lambda (C3d12@C3d0d C3d13@C3d0f C3d14@C3d11) ((lambda (C3d18@ae* C3d19@s* C3d1a@m*) (C3cfb@match (C2e10@stx-expr C3d00@e) C3d01@p C3d1a@m* C3d19@s* C3d18@ae* C3d05@r)) C3d14@C3d11 C3d13@C3d0f C3d12@C3d0d)))) (if (C2996@C286a@annotation? C3d00@e) (C3cfb@match (C2998@C286e@annotation-expression C3d00@e) C3d01@p C3d02@m* C3d03@s* C3d04@ae* C3d05@r) (C3cf9@match* C3d00@e C3d01@p C3d02@m* C3d03@s* C3d04@ae* C3d05@r)))))))) (lambda (C3cfc@e C3cfd@p) (C3cfb@match C3cfc@e C3cfd@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! C3049@ellipsis? (lambda (C3dd0@x) (and (C2e42@id? C3dd0@x) (C2e48@free-id=? C3dd0@x (C2fd1@scheme-stx '...))))) (set! C304b@underscore? (lambda (C3dd2@x) (and (C2e42@id? C3dd2@x) (C2e48@free-id=? C3dd2@x (C2fd1@scheme-stx '_))))) (set! C304d@verify-literals (lambda (C3dd4@lits C3dd5@expr) (for-each (lambda (C3dd8@x) (if (or (not (C2e42@id? C3dd8@x)) (C3049@ellipsis? C3dd8@x) (C304b@underscore? C3dd8@x)) (C3127@syntax-violation '#f '"invalid literal" C3dd5@expr C3dd8@x) (void))) C3dd4@lits))) (set! C304f@syntax-case-transformer ((lambda () ((lambda (C3ddb@build-dispatch-call C3ddd@invalid-ids-error C3ddf@gen-clause C3de1@gen-syntax-case) (begin (set! C3ddb@build-dispatch-call (lambda (C3e4c@pvars C3e4d@expr C3e4e@y C3e4f@r C3e50@mr) ((lambda (C3e56@ids C3e57@levels) ((lambda (C3e5a@labels C3e5b@new-vars) ((lambda (C3e5e@body) (list '(primitive apply) (C2da6@C2ce6@build-lambda '#f C3e5b@new-vars C3e5e@body) C3e4e@y)) (C3069@chi-expr (C2e2e@add-subst (C2e02@make-full-rib C3e56@ids C3e5a@labels) C3e4d@expr) (append (map (lambda (C3e60@label C3e61@var C3e62@level) (cons C3e60@label (C2e5c@make-binding 'syntax (cons C3e61@var C3e62@level)))) C3e5a@labels C3e5b@new-vars (map cdr C3e4c@pvars)) C3e4f@r) C3e50@mr))) (map C2dce@gen-label C3e56@ids) (map C2dca@gen-lexical C3e56@ids))) (map car C3e4c@pvars) (map cdr C3e4c@pvars)))) (set! C3ddd@invalid-ids-error (lambda (C3e40@id* C3e41@e C3e42@class) ((letrec ((C3e46@find (lambda (C3e48@id* C3e49@ok*) (if (null? C3e48@id*) (C3127@syntax-violation '#f '"invalid syntax" C3e41@e) (if (C2e42@id? (car C3e48@id*)) (if (C2e4e@bound-id-member? (car C3e48@id*) C3e49@ok*) (C3123@syntax-error (car C3e48@id*) '"duplicate " C3e42@class) (C3e46@find (cdr C3e48@id*) (cons (car C3e48@id*) C3e49@ok*))) (C3123@syntax-error (car C3e48@id*) '"invalid " C3e42@class)))))) C3e46@find) C3e40@id* '()))) (set! C3ddf@gen-clause (lambda (C3e18@x C3e19@keys C3e1a@clauses C3e1b@r C3e1c@mr C3e1d@pat C3e1e@fender C3e1f@expr) (call-with-values (lambda () (C3045@convert-pattern C3e1d@pat C3e19@keys)) (lambda (C3e2c@C3e29 C3e2d@C3e2b) ((lambda (C3e30@pvars C3e31@p) (if (not (C2e4c@distinct-bound-ids? (map car C3e30@pvars))) (C3ddd@invalid-ids-error (map car C3e30@pvars) C3e1d@pat '"pattern variable") (if (not (for-all (lambda (C3e34@x) (not (C3049@ellipsis? (car C3e34@x)))) C3e30@pvars)) (C3127@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" C3e1d@pat) ((lambda (C3e36@y) ((lambda (C3e38@test) ((lambda (C3e3a@conseq) ((lambda (C3e3c@altern) (list (C2da6@C2ce6@build-lambda '#f (list C3e36@y) (list 'if C3e38@test C3e3a@conseq C3e3c@altern)) (list '(primitive syntax-dispatch) C3e18@x (list 'quote C3e31@p)))) (C3de1@gen-syntax-case C3e18@x C3e19@keys C3e1a@clauses C3e1b@r C3e1c@mr))) (C3ddb@build-dispatch-call C3e30@pvars C3e1f@expr C3e36@y C3e1b@r C3e1c@mr))) (if (eq? C3e1e@fender '#t) C3e36@y ((lambda (C3e3e@call) (list 'if C3e36@y C3e3e@call (list 'quote '#f))) (C3ddb@build-dispatch-call C3e30@pvars C3e1e@fender C3e36@y C3e1b@r C3e1c@mr))))) (C2dca@gen-lexical 'tmp))))) C3e2d@C3e2b C3e2c@C3e29))))) (set! C3de1@gen-syntax-case (lambda (C3df6@x C3df7@keys C3df8@clauses C3df9@r C3dfa@mr) (if (null? C3df8@clauses) (list '(primitive syntax-error) C3df6@x) ((lambda (C3e00@t) ((lambda (C3e02@ls/false) (if C3e02@ls/false (apply (lambda (C3e04@pat C3e05@expr) (if (and (C2e42@id? C3e04@pat) (not (C2e4e@bound-id-member? C3e04@pat C3df7@keys)) (not (C3049@ellipsis? C3e04@pat))) (if (C2e48@free-id=? C3e04@pat (C2fd1@scheme-stx '_)) (C3069@chi-expr C3e05@expr C3df9@r C3dfa@mr) ((lambda (C3e08@lab C3e09@lex) ((lambda (C3e0c@body) (list (C2da6@C2ce6@build-lambda '#f (list C3e09@lex) C3e0c@body) C3df6@x)) (C3069@chi-expr (C2e2e@add-subst (C2e02@make-full-rib (list C3e04@pat) (list C3e08@lab)) C3e05@expr) (cons (cons C3e08@lab (C2e5c@make-binding 'syntax (cons C3e09@lex '0))) C3df9@r) C3dfa@mr))) (C2dce@gen-label C3e04@pat) (C2dca@gen-lexical C3e04@pat))) (C3ddf@gen-clause C3df6@x C3df7@keys (cdr C3df8@clauses) C3df9@r C3dfa@mr C3e04@pat '#t C3e05@expr))) C3e02@ls/false) ((lambda (C3e0e@t) ((lambda (C3e10@ls/false) (if C3e10@ls/false (apply (lambda (C3e12@pat C3e13@fender C3e14@expr) (C3ddf@gen-clause C3df6@x C3df7@keys (cdr C3df8@clauses) C3df9@r C3dfa@mr C3e12@pat C3e13@fender C3e14@expr)) C3e10@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3e0e@t))) (C3047@syntax-dispatch C3e0e@t '(any any any)))) C3e00@t))) (C3047@syntax-dispatch C3e00@t '(any any)))) (car C3df8@clauses))))) (lambda (C3de2@e C3de3@r C3de4@mr) ((lambda (C3de8@t) ((lambda (C3dea@ls/false) (if C3dea@ls/false (apply (lambda (C3dec@expr C3ded@keys C3dee@clauses) (begin (C304d@verify-literals C3ded@keys C3de2@e) ((lambda (C3df2@x) ((lambda (C3df4@body) (list (C2da6@C2ce6@build-lambda '#f (list C3df2@x) C3df4@body) (C3069@chi-expr C3dec@expr C3de3@r C3de4@mr))) (C3de1@gen-syntax-case C3df2@x C3ded@keys C3dee@clauses C3de3@r C3de4@mr))) (C2dca@gen-lexical 'tmp)))) C3dea@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3de8@t))) (C3047@syntax-dispatch C3de8@t '(_ any each-any . each-any)))) C3de2@e)))) '#f '#f '#f '#f)))) (set! C3051@ellipsis-map (lambda (C3e66@proc C3e67@ls . C3e6a@ls*) ((lambda (C3e6d@who) (begin (set! C3e6d@who '...) (begin (if (not (list? C3e67@ls)) (assertion-violation C3e6d@who '"not a list" C3e67@ls) (void)) (if (not (null? C3e6a@ls*)) ((lambda (C3e6e@n) (for-each (lambda (C3e70@x) (begin (if (not (list? C3e70@x)) (assertion-violation C3e6d@who '"not a list" C3e70@x) (void)) (if (not (= (length C3e70@x) C3e6e@n)) (assertion-violation C3e6d@who '"length mismatch" C3e67@ls C3e70@x) (void)))) C3e6a@ls*)) (length C3e67@ls)) (void)) (apply map C3e66@proc C3e67@ls C3e6a@ls*)))) '#f))) (set! C3053@syntax-transformer ((lambda () ((lambda (C3e73@gen-syntax C3e75@gen-ref C3e77@gen-append C3e79@gen-mappend C3e7b@gen-map C3e7d@gen-cons C3e7f@gen-vector C3e81@regen) (begin (set! C3e73@gen-syntax (lambda (C3eea@src C3eeb@e C3eec@r C3eed@maps C3eee@ellipsis? C3eef@vec?) ((lambda (C3ef6@t) ((lambda (C3ef8@ls/false) (if (and C3ef8@ls/false (apply (lambda (C3efa@dots) (C3eee@ellipsis? C3efa@dots)) C3ef8@ls/false)) (apply (lambda (C3efc@dots) (C3127@syntax-violation '#f '"misplaced ellipsis in syntax form" C3eea@src)) C3ef8@ls/false) ((lambda (C3efe@t) ((lambda (C3f00@ls/false) (if (and C3f00@ls/false (apply (lambda (C3f02@id) (C2e42@id? C3f02@id)) C3f00@ls/false)) (apply (lambda (C3f04@id) ((lambda (C3f06@label) ((lambda (C3f08@b) ((lambda () (if (eq? (C2e5e@binding-type C3f08@b) 'syntax) (call-with-values (lambda () ((lambda (C3f0e@var.lev) (C3e75@gen-ref C3eea@src (car C3f0e@var.lev) (cdr C3f0e@var.lev) C3eed@maps)) (C2e60@binding-value C3f08@b))) (lambda (C3f10@C3f0b C3f11@C3f0d) ((lambda (C3f14@maps C3f15@var) (values (list 'ref C3f15@var) C3f14@maps)) C3f11@C3f0d C3f10@C3f0b))) (values (list 'quote C3eeb@e) C3eed@maps))))) (C2e5a@label->binding C3f06@label C3eec@r))) (C2e58@id->label C3eeb@e))) C3f00@ls/false) ((lambda (C3f18@t) ((lambda (C3f1a@ls/false) (if (and C3f1a@ls/false (apply (lambda (C3f1c@dots C3f1d@e) (C3eee@ellipsis? C3f1c@dots)) C3f1a@ls/false)) (apply (lambda (C3f20@dots C3f21@e) (if C3eef@vec? (C3127@syntax-violation '#f '"misplaced ellipsis in syntax form" C3eea@src) (C3e73@gen-syntax C3eea@src C3f21@e C3eec@r C3eed@maps (lambda (C3f24@x) '#f) '#f))) C3f1a@ls/false) ((lambda (C3f26@t) ((lambda (C3f28@ls/false) (if (and C3f28@ls/false (apply (lambda (C3f2a@x C3f2b@dots C3f2c@y) (C3eee@ellipsis? C3f2b@dots)) C3f28@ls/false)) (apply (lambda (C3f30@x C3f31@dots C3f32@y) ((letrec ((C3f36@f (lambda (C3f38@y C3f39@k) ((lambda (C3f3c@t) ((lambda (C3f3e@ls/false) (if C3f3e@ls/false (apply (lambda () (C3f39@k C3eed@maps)) C3f3e@ls/false) ((lambda (C3f40@t) ((lambda (C3f42@ls/false) (if (and C3f42@ls/false (apply (lambda (C3f44@dots C3f45@y) (C3eee@ellipsis? C3f44@dots)) C3f42@ls/false)) (apply (lambda (C3f48@dots C3f49@y) (C3f36@f C3f49@y (lambda (C3f4c@maps) (call-with-values (lambda () (C3f39@k (cons '() C3f4c@maps))) (lambda (C3f52@C3f4f C3f53@C3f51) ((lambda (C3f56@maps C3f57@x) (if (null? (car C3f56@maps)) (C3127@syntax-violation '#f '"extra ellipsis in syntax form" C3eea@src) (values (C3e79@gen-mappend C3f57@x (car C3f56@maps)) (cdr C3f56@maps)))) C3f53@C3f51 C3f52@C3f4f)))))) C3f42@ls/false) ((lambda (C3f5a@t) ((lambda (C3f5c@ls/false) (if C3f5c@ls/false (apply (lambda () (call-with-values (lambda () (C3e73@gen-syntax C3eea@src C3f38@y C3eec@r C3eed@maps C3eee@ellipsis? C3eef@vec?)) (lambda (C3f62@C3f5f C3f63@C3f61) ((lambda (C3f66@maps C3f67@y) (call-with-values (lambda () (C3f39@k C3f66@maps)) (lambda (C3f6e@C3f6b C3f6f@C3f6d) ((lambda (C3f72@maps C3f73@x) (values (C3e77@gen-append C3f73@x C3f67@y) C3f72@maps)) C3f6f@C3f6d C3f6e@C3f6b)))) C3f63@C3f61 C3f62@C3f5f)))) C3f5c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3f5a@t))) (C3047@syntax-dispatch C3f5a@t '_))) C3f40@t))) (C3047@syntax-dispatch C3f40@t '(any . any)))) C3f3c@t))) (C3047@syntax-dispatch C3f3c@t '()))) C3f38@y)))) C3f36@f) C3f32@y (lambda (C3f76@maps) (call-with-values (lambda () (C3e73@gen-syntax C3eea@src C3f30@x C3eec@r (cons '() C3f76@maps) C3eee@ellipsis? '#f)) (lambda (C3f7c@C3f79 C3f7d@C3f7b) ((lambda (C3f80@maps C3f81@x) (if (null? (car C3f80@maps)) (C3127@syntax-violation '#f '"extra ellipsis in syntax form" C3eea@src) (values (C3e7b@gen-map C3f81@x (car C3f80@maps)) (cdr C3f80@maps)))) C3f7d@C3f7b C3f7c@C3f79)))))) C3f28@ls/false) ((lambda (C3f84@t) ((lambda (C3f86@ls/false) (if C3f86@ls/false (apply (lambda (C3f88@x C3f89@y) (call-with-values (lambda () (C3e73@gen-syntax C3eea@src C3f88@x C3eec@r C3eed@maps C3eee@ellipsis? '#f)) (lambda (C3f90@C3f8d C3f91@C3f8f) ((lambda (C3f94@maps C3f95@xnew) (call-with-values (lambda () (C3e73@gen-syntax C3eea@src C3f89@y C3eec@r C3f94@maps C3eee@ellipsis? C3eef@vec?)) (lambda (C3f9c@C3f99 C3f9d@C3f9b) ((lambda (C3fa0@maps C3fa1@ynew) (values (C3e7d@gen-cons C3eeb@e C3f88@x C3f89@y C3f95@xnew C3fa1@ynew) C3fa0@maps)) C3f9d@C3f9b C3f9c@C3f99)))) C3f91@C3f8f C3f90@C3f8d)))) C3f86@ls/false) ((lambda (C3fa4@t) ((lambda (C3fa6@ls/false) (if C3fa6@ls/false (apply (lambda (C3fa8@ls) (call-with-values (lambda () (C3e73@gen-syntax C3eea@src C3fa8@ls C3eec@r C3eed@maps C3eee@ellipsis? '#t)) (lambda (C3fae@C3fab C3faf@C3fad) ((lambda (C3fb2@maps C3fb3@lsnew) (values (C3e7f@gen-vector C3eeb@e C3fa8@ls C3fb3@lsnew) C3fb2@maps)) C3faf@C3fad C3fae@C3fab)))) C3fa6@ls/false) ((lambda (C3fb6@t) ((lambda (C3fb8@ls/false) (if C3fb8@ls/false (apply (lambda () (values (list 'quote C3eeb@e) C3eed@maps)) C3fb8@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3fb6@t))) (C3047@syntax-dispatch C3fb6@t '_))) C3fa4@t))) (C3047@syntax-dispatch C3fa4@t '#(vector each-any)))) C3f84@t))) (C3047@syntax-dispatch C3f84@t '(any . any)))) C3f26@t))) (C3047@syntax-dispatch C3f26@t '(any any . any)))) C3f18@t))) (C3047@syntax-dispatch C3f18@t '(any any)))) C3efe@t))) (C3047@syntax-dispatch C3efe@t 'any))) C3ef6@t))) (C3047@syntax-dispatch C3ef6@t 'any))) C3eeb@e))) (set! C3e75@gen-ref (lambda (C3ed0@src C3ed1@var C3ed2@level C3ed3@maps) (if (= C3ed2@level '0) (values C3ed1@var C3ed3@maps) (if (null? C3ed3@maps) (C3127@syntax-violation '#f '"missing ellipsis in syntax form" C3ed0@src) (call-with-values (lambda () (C3e75@gen-ref C3ed0@src C3ed1@var (- C3ed2@level '1) (cdr C3ed3@maps))) (lambda (C3edc@C3ed9 C3edd@C3edb) ((lambda (C3ee0@outer-maps C3ee1@outer-var) ((lambda (C3ee4@t) (if C3ee4@t ((lambda (C3ee6@b) (values (cdr C3ee6@b) C3ed3@maps)) C3ee4@t) ((lambda (C3ee8@inner-var) (values C3ee8@inner-var (cons (cons (cons C3ee1@outer-var C3ee8@inner-var) (car C3ed3@maps)) C3ee0@outer-maps))) (C2dca@gen-lexical 'tmp)))) (assq C3ee1@outer-var (car C3ed3@maps)))) C3edd@C3edb C3edc@C3ed9))))))) (set! C3e77@gen-append (lambda (C3ecc@x C3ecd@y) (if (fast-equal? C3ecd@y ''()) C3ecc@x (list 'append C3ecc@x C3ecd@y)))) (set! C3e79@gen-mappend (lambda (C3ec8@e C3ec9@map-env) (list 'apply '(primitive append) (C3e7b@gen-map C3ec8@e C3ec9@map-env)))) (set! C3e7b@gen-map (lambda (C3eb6@e C3eb7@map-env) ((lambda (C3eba@formals C3ebb@actuals) (if (eq? (car C3eb6@e) 'ref) (car C3ebb@actuals) (if (for-all (lambda (C3ebe@x) (and (eq? (car C3ebe@x) 'ref) (memq (cadr C3ebe@x) C3eba@formals))) (cdr C3eb6@e)) ((lambda (C3ec0@args) (cons 'map (cons (list 'primitive (car C3eb6@e)) C3ec0@args))) (map ((lambda (C3ec2@r) (lambda (C3ec4@x) (cdr (assq (cadr C3ec4@x) C3ec2@r)))) (map cons C3eba@formals C3ebb@actuals)) (cdr C3eb6@e))) (cons* 'map (list 'lambda C3eba@formals C3eb6@e) C3ebb@actuals)))) (map cdr C3eb7@map-env) (map (lambda (C3ec6@x) (list 'ref (car C3ec6@x))) C3eb7@map-env)))) (set! C3e7d@gen-cons (lambda (C3ea6@e C3ea7@x C3ea8@y C3ea9@xnew C3eaa@ynew) ((lambda (C3eb0@t) (if (memv C3eb0@t '(quote)) (if (eq? (car C3ea9@xnew) 'quote) ((lambda (C3eb2@xnew C3eb3@ynew) (if (and (eq? C3eb2@xnew C3ea7@x) (eq? C3eb3@ynew C3ea8@y)) (list 'quote C3ea6@e) (list 'quote (cons C3eb2@xnew C3eb3@ynew)))) (cadr C3ea9@xnew) (cadr C3eaa@ynew)) (if (null? (cadr C3eaa@ynew)) (list 'list C3ea9@xnew) (list 'cons C3ea9@xnew C3eaa@ynew))) (if (memv C3eb0@t '(list)) (cons 'list (cons C3ea9@xnew (cdr C3eaa@ynew))) (list 'cons C3ea9@xnew C3eaa@ynew)))) (car C3eaa@ynew)))) (set! C3e7f@gen-vector (lambda (C3ea0@e C3ea1@ls C3ea2@lsnew) (if (eq? (car C3ea2@lsnew) 'quote) (if (eq? (cadr C3ea2@lsnew) C3ea1@ls) (list 'quote C3ea0@e) (list 'quote (list->vector (cadr C3ea2@lsnew)))) (if (eq? (car C3ea2@lsnew) 'list) (cons 'vector (cdr C3ea2@lsnew)) (list 'list->vector C3ea2@lsnew))))) (set! C3e81@regen (lambda (C3e9a@x) ((lambda (C3e9c@t) (if (memv C3e9c@t '(ref)) (cadr C3e9a@x) (if (memv C3e9c@t '(primitive)) (list 'primitive (cadr C3e9a@x)) (if (memv C3e9c@t '(quote)) (list 'quote (cadr C3e9a@x)) (if (memv C3e9c@t '(lambda)) (C2da6@C2ce6@build-lambda '#f (cadr C3e9a@x) (C3e81@regen (caddr C3e9a@x))) (if (memv C3e9c@t '(map)) ((lambda (C3e9e@ls) (cons '(primitive ellipsis-map) C3e9e@ls)) (map C3e81@regen (cdr C3e9a@x))) (cons (list 'primitive (car C3e9a@x)) (map C3e81@regen (cdr C3e9a@x))))))))) (car C3e9a@x)))) (lambda (C3e82@e C3e83@r C3e84@mr) ((lambda (C3e88@t) ((lambda (C3e8a@ls/false) (if C3e8a@ls/false (apply (lambda (C3e8c@x) (call-with-values (lambda () (C3e73@gen-syntax C3e82@e C3e8c@x C3e83@r '() C3049@ellipsis? '#f)) (lambda (C3e92@C3e8f C3e93@C3e91) ((lambda (C3e96@maps C3e97@e) (C3e81@regen C3e97@e)) C3e93@C3e91 C3e92@C3e8f)))) C3e8a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3e88@t))) (C3047@syntax-dispatch C3e88@t '(_ any)))) C3e82@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! C3055@core-macro-transformer (lambda (C3fba@name) ((lambda (C3fbc@t) (if (memv C3fbc@t '(quote)) C2ff7@quote-transformer (if (memv C3fbc@t '(lambda)) C2ffb@lambda-transformer (if (memv C3fbc@t '(case-lambda)) C2ff9@case-lambda-transformer (if (memv C3fbc@t '(letrec)) C2fdf@letrec-transformer (if (memv C3fbc@t '(letrec*)) C2fe1@letrec*-transformer (if (memv C3fbc@t '(if)) C2fef@if-transformer (if (memv C3fbc@t '(and)) C2ff1@and-transformer (if (memv C3fbc@t '(or)) C2ff3@or-transformer (if (memv C3fbc@t '(foreign-call)) C3043@foreign-call-transformer (if (memv C3fbc@t '(syntax-case)) C304f@syntax-case-transformer (if (memv C3fbc@t '(syntax)) C3053@syntax-transformer (if (memv C3fbc@t '(type-descriptor)) C2fe5@type-descriptor-transformer (if (memv C3fbc@t '(record-type-descriptor)) C2fe7@record-type-descriptor-transformer (if (memv C3fbc@t '(record-constructor-descriptor)) C2fe9@record-constructor-descriptor-transformer (if (memv C3fbc@t '(fluid-let-syntax)) C2fe3@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" C3fba@name))))))))))))))))) C3fba@name))) (set! C3057@symbol-macro (lambda (C3fbe@x C3fbf@set) ((lambda (C3fc2@t) ((lambda (C3fc4@ls/false) (if (and C3fc4@ls/false (apply (lambda (C3fc6@name) (and (C2e42@id? C3fc6@name) (memq (C2e44@id->sym C3fc6@name) C3fbf@set))) C3fc4@ls/false)) (apply (lambda (C3fc8@name) (C2ffd@bless (list 'quote C3fc8@name))) C3fc4@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C3fc2@t))) (C3047@syntax-dispatch C3fc2@t '(_ any)))) C3fbe@x))) (set! C3059@macro-transformer (lambda (C3fca@x) (if (procedure? C3fca@x) C3fca@x (if (symbol? C3fca@x) ((lambda (C3fcc@t) (if (memv C3fcc@t '(define-record-type)) C303b@define-record-type-macro (if (memv C3fcc@t '(define-struct)) C3039@define-struct-macro (if (memv C3fcc@t '(include)) C302f@include-macro (if (memv C3fcc@t '(cond)) C302b@cond-macro (if (memv C3fcc@t '(let)) C3003@let-macro (if (memv C3fcc@t '(do)) C3023@do-macro (if (memv C3fcc@t '(or)) C3027@or-macro (if (memv C3fcc@t '(and)) C3029@and-macro (if (memv C3fcc@t '(let*)) C3025@let*-macro (if (memv C3fcc@t '(let-values)) C3005@let-values-macro (if (memv C3fcc@t '(let*-values)) C3007@let*-values-macro (if (memv C3fcc@t '(syntax-rules)) C3033@syntax-rules-macro (if (memv C3fcc@t '(quasiquote)) C3035@quasiquote-macro (if (memv C3fcc@t '(quasisyntax)) C3037@quasisyntax-macro (if (memv C3fcc@t '(with-syntax)) C2fff@with-syntax-macro (if (memv C3fcc@t '(when)) C2feb@when-macro (if (memv C3fcc@t '(unless)) C2fed@unless-macro (if (memv C3fcc@t '(case)) C2ff5@case-macro (if (memv C3fcc@t '(identifier-syntax)) C3021@identifier-syntax-macro (if (memv C3fcc@t '(time)) C3019@time-macro (if (memv C3fcc@t '(delay)) C301b@delay-macro (if (memv C3fcc@t '(assert)) C301d@assert-macro (if (memv C3fcc@t '(endianness)) C301f@endianness-macro (if (memv C3fcc@t '(guard)) C3015@guard-macro (if (memv C3fcc@t '(define-enumeration)) C3017@define-enumeration-macro (if (memv C3fcc@t '(trace-lambda)) C3009@trace-lambda-macro (if (memv C3fcc@t '(trace-define)) C300b@trace-define-macro (if (memv C3fcc@t '(trace-define-syntax)) C300d@trace-define-syntax-macro (if (memv C3fcc@t '(trace-let-syntax)) C3011@trace-let-syntax-macro (if (memv C3fcc@t '(trace-letrec-syntax)) C3013@trace-letrec-syntax-macro (if (memv C3fcc@t '(define-condition-type)) C303d@define-condition-type-macro (if (memv C3fcc@t '(parameterize)) C3041@parameterize-macro (if (memv C3fcc@t '(include-into)) C3031@include-into-macro (if (memv C3fcc@t '(eol-style)) (lambda (C3fce@x) (C3057@symbol-macro C3fce@x '(none lf cr crlf nel crnel ls))) (if (memv C3fcc@t '(error-handling-mode)) (lambda (C3fd0@x) (C3057@symbol-macro C3fd0@x '(ignore raise replace))) (if (memv C3fcc@t '(buffer-mode)) (lambda (C3fd2@x) (C3057@symbol-macro C3fd2@x '(none line block))) (if (memv C3fcc@t '(file-options)) C2dbd@file-options-macro (if (memv C3fcc@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) C303f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" C3fca@x)))))))))))))))))))))))))))))))))))))))) C3fca@x) (error 'core-macro-transformer '"BUG: invalid macro" C3fca@x))))) (set! C305b@local-macro-transformer (lambda (C3fd4@x) (car C3fd4@x))) (set! C305d@do-macro-call (lambda (C3fd6@transformer C3fd7@expr) ((lambda (C3fda@out) (begin ((letrec ((C3fdc@f (lambda (C3fde@x) (if (not (C2e0e@stx? C3fde@x)) (if (pair? C3fde@x) (begin (C3fdc@f (car C3fde@x)) (C3fdc@f (cdr C3fde@x))) (if (vector? C3fde@x) (vector-for-each C3fdc@f C3fde@x) (if (symbol? C3fde@x) (C3127@syntax-violation '#f '"raw symbol encountered in output of macro" C3fd7@expr C3fde@x) (void)))) (void))))) C3fdc@f) C3fda@out) (C2e2c@add-mark (C2e24@gen-mark) C3fda@out C3fd7@expr))) (C3fd6@transformer (C2e2c@add-mark C2e26@anti-mark C3fd7@expr '#f))))) (set! C305f@chi-macro (lambda (C3fe0@p C3fe1@e) (C305d@do-macro-call (C3059@macro-transformer C3fe0@p) C3fe1@e))) (set! C3061@chi-local-macro (lambda (C3fe4@p C3fe5@e) (C305d@do-macro-call (C305b@local-macro-transformer C3fe4@p) C3fe5@e))) (set! C3063@chi-global-macro (lambda (C3fe8@p C3fe9@e) ((lambda (C3fec@lib C3fed@loc) (begin (C2c6e@C2abd@visit-library C3fec@lib) ((lambda (C3ff0@x) ((lambda (C3ff2@transformer) (C305d@do-macro-call C3ff2@transformer C3fe9@e)) (if (procedure? C3ff0@x) C3ff0@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" C3ff0@x)))) (symbol-value C3fed@loc)))) (car C3fe8@p) (cdr C3fe8@p)))) (set! C3065@chi-expr* (lambda (C3ff4@e* C3ff5@r C3ff6@mr) (if (null? C3ff4@e*) '() ((lambda (C3ffa@e) (cons C3ffa@e (C3065@chi-expr* (cdr C3ff4@e*) C3ff5@r C3ff6@mr))) (C3069@chi-expr (car C3ff4@e*) C3ff5@r C3ff6@mr))))) (set! C3067@chi-application (lambda (C3ffc@e C3ffd@r C3ffe@mr) ((lambda (C4002@t) ((lambda (C4004@ls/false) (if C4004@ls/false (apply (lambda (C4006@rator C4007@rands) ((lambda (C400a@rator) (cons C400a@rator (C3065@chi-expr* C4007@rands C3ffd@r C3ffe@mr))) (C3069@chi-expr C4006@rator C3ffd@r C3ffe@mr))) C4004@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4002@t))) (C3047@syntax-dispatch C4002@t '(any . each-any)))) C3ffc@e))) (set! C3069@chi-expr (lambda (C400c@e C400d@r C400e@mr) (call-with-values (lambda () (C2e64@syntax-type C400c@e C400d@r)) (lambda (C4018@C4013 C4019@C4015 C401a@C4017) ((lambda (C401e@kwd C401f@value C4020@type) ((lambda (C4024@t) (if (memv C4024@t '(core-macro)) ((lambda (C4026@transformer) (C4026@transformer C400c@e C400d@r C400e@mr)) (C3055@core-macro-transformer C401f@value)) (if (memv C4024@t '(global)) ((lambda (C4028@lib) ((lambda (C402a@loc) ((lambda () (begin ((C30af@inv-collector) C4028@lib) C402a@loc)))) (cdr C401f@value))) (car C401f@value)) (if (memv C4024@t '(core-prim)) ((lambda (C402c@name) (list 'primitive C402c@name)) C401f@value) (if (memv C4024@t '(call)) (C3067@chi-application C400c@e C400d@r C400e@mr) (if (memv C4024@t '(lexical)) ((lambda (C402e@lex) C402e@lex) (C2fd3@lexical-var C401f@value)) (if (memv C4024@t '(global-macro global-macro!)) (C3069@chi-expr (C3063@chi-global-macro C401f@value C400c@e) C400d@r C400e@mr) (if (memv C4024@t '(local-macro local-macro!)) (C3069@chi-expr (C3061@chi-local-macro C401f@value C400c@e) C400d@r C400e@mr) (if (memv C4024@t '(macro macro!)) (C3069@chi-expr (C305f@chi-macro C401f@value C400c@e) C400d@r C400e@mr) (if (memv C4024@t '(constant)) ((lambda (C4030@datum) (list 'quote C4030@datum)) C401f@value) (if (memv C4024@t '(set!)) (C306b@chi-set! C400c@e C400d@r C400e@mr) (if (memv C4024@t '(begin)) ((lambda (C4032@t) ((lambda (C4034@ls/false) (if C4034@ls/false (apply (lambda (C4036@x C4037@x*) (C2da9@C2d18@build-sequence '#f (C3065@chi-expr* (cons C4036@x C4037@x*) C400d@r C400e@mr))) C4034@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4032@t))) (C3047@syntax-dispatch C4032@t '(_ any . each-any)))) C400c@e) (if (memv C4024@t '(let-syntax letrec-syntax)) ((lambda (C403a@t) ((lambda (C403c@ls/false) (if (and C403c@ls/false (apply (lambda (C403e@xlhs* C403f@xrhs* C4040@xbody C4041@xbody*) (if (not (C2e4a@valid-bound-ids? C403e@xlhs*)) (C3127@syntax-violation '#f '"invalid identifiers" C400c@e) (void))) C403c@ls/false)) (apply (lambda (C4046@xlhs* C4047@xrhs* C4048@xbody C4049@xbody*) ((lambda (C404e@xlab*) ((lambda (C4050@xrib) ((lambda (C4052@xb*) ((lambda () (C2da9@C2d18@build-sequence '#f (C3065@chi-expr* (map (lambda (C4054@x) (C2e2e@add-subst C4050@xrib C4054@x)) (cons C4048@xbody C4049@xbody*)) (append (map cons C404e@xlab* C4052@xb*) C400d@r) (append (map cons C404e@xlab* C4052@xb*) C400e@mr)))))) (map (lambda (C4056@x) (C2e7a@make-eval-transformer (C30a1@expand-transformer (if (eq? C4020@type 'let-syntax) C4056@x (C2e2e@add-subst C4050@xrib C4056@x)) C400e@mr))) C4047@xrhs*))) (C2e02@make-full-rib C4046@xlhs* C404e@xlab*))) (map C2dce@gen-label C4046@xlhs*))) C403c@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C403a@t))) (C3047@syntax-dispatch C403a@t '(_ #(each (any any)) any . each-any)))) C400c@e) (if (memv C4024@t '(displaced-lexical)) (C3127@syntax-violation '#f '"identifier out of context" C400c@e) (if (memv C4024@t '(syntax)) (C3127@syntax-violation '#f '"reference to pattern variable outside a syntax form" C400c@e) (if (memv C4024@t '(define define-syntax module import library)) (C3127@syntax-violation '#f (string-append ((lambda (C4058@t) (if (memv C4058@t '(define)) '"a definition" (if (memv C4058@t '(define-syntax)) '"a define-syntax" (if (memv C4058@t '(module)) '"a module definition" (if (memv C4058@t '(library)) '"a library definition" (if (memv C4058@t '(import)) '"an import declaration" (if (memv C4058@t '(export)) '"an export declaration" '"a non-expression"))))))) C4020@type) '" was found where an expression was expected") C400c@e) (if (memv C4024@t '(mutable)) (C3127@syntax-violation '#f '"attempt to reference an unexportable variable" C400c@e) (C3127@syntax-violation '#f '"invalid expression" C400c@e)))))))))))))))))) C4020@type)) C401a@C4017 C4019@C4015 C4018@C4013))))) (set! C306b@chi-set! (lambda (C405a@e C405b@r C405c@mr) ((lambda (C4060@t) ((lambda (C4062@ls/false) (if (and C4062@ls/false (apply (lambda (C4064@x C4065@v) (C2e42@id? C4064@x)) C4062@ls/false)) (apply (lambda (C4068@x C4069@v) (call-with-values (lambda () (C2e64@syntax-type C4068@x C405b@r)) (lambda (C4072@C406d C4073@C406f C4074@C4071) ((lambda (C4078@kwd C4079@value C407a@type) ((lambda (C407e@t) (if (memv C407e@t '(lexical)) (begin (C2fd7@set-lexical-mutable! C4079@value '#t) (list 'set! (C2fd3@lexical-var C4079@value) (C3069@chi-expr C4069@v C405b@r C405c@mr))) (if (memv C407e@t '(core-prim)) (C3127@syntax-violation '#f '"cannot modify imported core primitive" C405a@e) (if (memv C407e@t '(global)) (C3127@syntax-violation '#f '"attempt to modify imported binding" C405a@e) (if (memv C407e@t '(global-macro!)) (C3069@chi-expr (C3063@chi-global-macro C4079@value C405a@e) C405b@r C405c@mr) (if (memv C407e@t '(local-macro!)) (C3069@chi-expr (C3061@chi-local-macro C4079@value C405a@e) C405b@r C405c@mr) (if (memv C407e@t '(mutable)) (C3127@syntax-violation '#f '"attempt to assign to an unexportable variable" C405a@e) (C3127@syntax-violation '#f '"invalid syntax" C405a@e)))))))) C407a@type)) C4074@C4071 C4073@C406f C4072@C406d)))) C4062@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4060@t))) (C3047@syntax-dispatch C4060@t '(_ any any)))) C405a@e))) (set! C306d@verify-formals (lambda (C4080@fmls C4081@stx) ((lambda (C4084@t) ((lambda (C4086@ls/false) (if C4086@ls/false (apply (lambda (C4088@x*) (if (not (C2e4a@valid-bound-ids? C4088@x*)) (C3001@invalid-fmls-error C4081@stx C4080@fmls) (void))) C4086@ls/false) ((lambda (C408a@t) ((lambda (C408c@ls/false) (if C408c@ls/false (apply (lambda (C408e@x* C408f@x) (if (not (C2e4a@valid-bound-ids? (cons C408f@x C408e@x*))) (C3001@invalid-fmls-error C4081@stx C4080@fmls) (void))) C408c@ls/false) ((lambda (C4092@t) ((lambda (C4094@ls/false) (if C4094@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid syntax" C4081@stx)) C4094@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4092@t))) (C3047@syntax-dispatch C4092@t '_))) C408a@t))) (C3047@syntax-dispatch C408a@t '#(each+ any () any)))) C4084@t))) (C3047@syntax-dispatch C4084@t 'each-any))) C4080@fmls))) (set! C306f@chi-lambda-clause (lambda (C4096@stx C4097@fmls C4098@body* C4099@r C409a@mr) ((lambda (C40a0@t) ((lambda (C40a2@ls/false) (if C40a2@ls/false (apply (lambda (C40a4@x*) (begin (C306d@verify-formals C4097@fmls C4096@stx) ((lambda (C40a6@lex* C40a7@lab*) (values C40a6@lex* (C307f@chi-internal (C2e2e@add-subst (C2e02@make-full-rib C40a4@x* C40a7@lab*) C4098@body*) (C2fdb@add-lexicals C40a7@lab* C40a6@lex* C4099@r) C409a@mr))) (map C2dca@gen-lexical C40a4@x*) (map C2dce@gen-label C40a4@x*)))) C40a2@ls/false) ((lambda (C40aa@t) ((lambda (C40ac@ls/false) (if C40ac@ls/false (apply (lambda (C40ae@x* C40af@x) (begin (C306d@verify-formals C4097@fmls C4096@stx) ((lambda (C40b2@lex* C40b3@lab* C40b4@lex C40b5@lab) (values (append C40b2@lex* C40b4@lex) (C307f@chi-internal (C2e2e@add-subst (C2e02@make-full-rib (cons C40af@x C40ae@x*) (cons C40b5@lab C40b3@lab*)) C4098@body*) (C2fdb@add-lexicals (cons C40b5@lab C40b3@lab*) (cons C40b4@lex C40b2@lex*) C4099@r) C409a@mr))) (map C2dca@gen-lexical C40ae@x*) (map C2dce@gen-label C40ae@x*) (C2dca@gen-lexical C40af@x) (C2dce@gen-label C40af@x)))) C40ac@ls/false) ((lambda (C40ba@t) ((lambda (C40bc@ls/false) (if C40bc@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid syntax" C4097@fmls)) C40bc@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C40ba@t))) (C3047@syntax-dispatch C40ba@t '_))) C40aa@t))) (C3047@syntax-dispatch C40aa@t '#(each+ any () any)))) C40a0@t))) (C3047@syntax-dispatch C40a0@t 'each-any))) C4097@fmls))) (set! C3071@chi-lambda-clause* (lambda (C40be@stx C40bf@fmls* C40c0@body** C40c1@r C40c2@mr) (if (null? C40bf@fmls*) (values '() '()) (call-with-values (lambda () (C306f@chi-lambda-clause C40be@stx (car C40bf@fmls*) (car C40c0@body**) C40c1@r C40c2@mr)) (lambda (C40cc@C40c9 C40cd@C40cb) ((lambda (C40d0@b C40d1@a) (call-with-values (lambda () (C3071@chi-lambda-clause* C40be@stx (cdr C40bf@fmls*) (cdr C40c0@body**) C40c1@r C40c2@mr)) (lambda (C40d8@C40d5 C40d9@C40d7) ((lambda (C40dc@b* C40dd@a*) (values (cons C40d1@a C40dd@a*) (cons C40d0@b C40dc@b*))) C40d9@C40d7 C40d8@C40d5)))) C40cd@C40cb C40cc@C40c9)))))) (set! C3073@chi-defun (lambda (C40e0@x C40e1@r C40e2@mr) ((lambda (C40e6@fmls C40e7@body*) (call-with-values (lambda () (C306f@chi-lambda-clause C40e6@fmls C40e6@fmls C40e7@body* C40e1@r C40e2@mr)) (lambda (C40ee@C40eb C40ef@C40ed) ((lambda (C40f2@body C40f3@fmls) (C2da6@C2ce6@build-lambda '#f C40f3@fmls C40f2@body)) C40ef@C40ed C40ee@C40eb)))) (car C40e0@x) (cdr C40e0@x)))) (set! C3075@chi-rhs (lambda (C40f6@rhs C40f7@r C40f8@mr) ((lambda (C40fc@t) (if (memv C40fc@t '(defun)) (C3073@chi-defun (cdr C40f6@rhs) C40f7@r C40f8@mr) (if (memv C40fc@t '(expr)) ((lambda (C40fe@expr) (C3069@chi-expr C40fe@expr C40f7@r C40f8@mr)) (cdr C40f6@rhs)) (if (memv C40fc@t '(top-expr)) ((lambda (C4100@expr) (C2da9@C2d18@build-sequence '#f (list (C3069@chi-expr C4100@expr C40f7@r C40f8@mr) (C2daa@C2d1a@build-void)))) (cdr C40f6@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" C40f6@rhs))))) (car C40f6@rhs)))) (set! C3077@expand-interaction-rhs*/init* (lambda (C4102@lhs* C4103@rhs* C4104@init* C4105@r C4106@mr) ((letrec ((C410c@f (lambda (C410e@lhs* C410f@rhs*) (if (null? C410e@lhs*) (map (lambda (C4112@x) (C3069@chi-expr C4112@x C4105@r C4106@mr)) C4104@init*) ((lambda (C4114@lhs C4115@rhs) ((lambda (C4118@t) (if (memv C4118@t '(defun)) ((lambda (C411a@rhs) (cons (list 'set! C4114@lhs C411a@rhs) (C410c@f (cdr C410e@lhs*) (cdr C410f@rhs*)))) (C3073@chi-defun (cdr C4115@rhs) C4105@r C4106@mr)) (if (memv C4118@t '(expr)) ((lambda (C411c@rhs) (cons (list 'set! C4114@lhs C411c@rhs) (C410c@f (cdr C410e@lhs*) (cdr C410f@rhs*)))) (C3069@chi-expr (cdr C4115@rhs) C4105@r C4106@mr)) (if (memv C4118@t '(top-expr)) ((lambda (C411e@e) (cons C411e@e (C410c@f (cdr C410e@lhs*) (cdr C410f@rhs*)))) (C3069@chi-expr (cdr C4115@rhs) C4105@r C4106@mr)) (error 'expand-interaction '"invallid" C4115@rhs))))) (car C4115@rhs))) (car C410e@lhs*) (car C410f@rhs*)))))) C410c@f) C4102@lhs* C4103@rhs*))) (set! C3079@chi-rhs* (lambda (C4120@rhs* C4121@r C4122@mr) ((letrec ((C4126@f (lambda (C4128@ls) (if (null? C4128@ls) '() ((lambda (C412a@a) (cons C412a@a (C4126@f (cdr C4128@ls)))) (C3075@chi-rhs (car C4128@ls) C4121@r C4122@mr)))))) C4126@f) C4120@rhs*))) (set! C307b@find-bound=? (lambda (C412c@x C412d@lhs* C412e@rhs*) (if (null? C412d@lhs*) '#f (if (C2e46@bound-id=? C412c@x (car C412d@lhs*)) (car C412e@rhs*) (C307b@find-bound=? C412c@x (cdr C412d@lhs*) (cdr C412e@rhs*)))))) (set! C307d@find-dups (lambda (C4132@ls) ((letrec ((C4134@f (lambda (C4136@ls C4137@dups) (if (null? C4136@ls) C4137@dups ((lambda (C413a@t) (if C413a@t ((lambda (C413c@x) (C4134@f (cdr C4136@ls) (cons (list (car C4136@ls) C413c@x) C4137@dups))) C413a@t) (C4134@f (cdr C4136@ls) C4137@dups))) (C307b@find-bound=? (car C4136@ls) (cdr C4136@ls) (cdr C4136@ls))))))) C4134@f) C4132@ls '()))) (set! C307f@chi-internal (lambda (C413e@e* C413f@r C4140@mr) ((lambda (C4144@rib) (call-with-values (lambda () (C309f@chi-body* (map (lambda (C4156@x) (C2e2e@add-subst C4144@rib C4156@x)) (C2e40@syntax->list C413e@e*)) C413f@r C4140@mr '() '() '() '() '() C4144@rib '#f)) (lambda (C4158@C4147 C4159@C4149 C415a@C414b C415b@C414d C415c@C414f C415d@C4151 C415e@C4153 C415f@C4155) ((lambda (C4168@_exp* C4169@kwd* C416a@mod** C416b@rhs* C416c@lex* C416d@mr C416e@r C416f@e*) (begin (if (null? C416f@e*) (C3127@syntax-violation '#f '"no expression in body" C416f@e*) (void)) ((lambda (C4178@init*) ((lambda (C417a@rhs*) ((lambda () (C2dac@C2d1e@build-letrec* '#f (reverse C416c@lex*) (reverse C417a@rhs*) (C2da9@C2d18@build-sequence '#f C4178@init*))))) (C3079@chi-rhs* C416b@rhs* C416e@r C416d@mr))) (C3065@chi-expr* (append (apply append (reverse C416a@mod**)) C416f@e*) C416e@r C416d@mr)))) C415f@C4155 C415e@C4153 C415d@C4151 C415c@C414f C415b@C414d C415a@C414b C4159@C4149 C4158@C4147)))) (C2df6@make-empty-rib)))) (set! C3081@parse-module (lambda (C417c@e) ((lambda (C417e@t) ((lambda (C4180@ls/false) (if C4180@ls/false (apply (lambda (C4182@export* C4183@b*) (begin (if (not (for-all C2e42@id? C4182@export*)) (C3127@syntax-violation '#f '"module exports must be identifiers" C417c@e) (void)) (values '#f (list->vector C4182@export*) C4183@b*))) C4180@ls/false) ((lambda (C4186@t) ((lambda (C4188@ls/false) (if C4188@ls/false (apply (lambda (C418a@name C418b@export* C418c@b*) (begin (if (not (C2e42@id? C418a@name)) (C3127@syntax-violation '#f '"module name must be an identifier" C417c@e) (void)) (if (not (for-all C2e42@id? C418b@export*)) (C3127@syntax-violation '#f '"module exports must be identifiers" C417c@e) (void)) (values C418a@name (list->vector C418b@export*) C418c@b*))) C4188@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4186@t))) (C3047@syntax-dispatch C4186@t '(_ any each-any . each-any)))) C417e@t))) (C3047@syntax-dispatch C417e@t '(_ each-any . each-any)))) C417c@e))) (set! C308b@module-interface? (lambda (C4190@x) (and (simple-struct? C4190@x) (eq? (simple-struct-name C4190@x) 'module-interface)))) (set! C308d@module-interface-first-mark (lambda (C4192@x) (simple-struct-ref C4192@x '0))) (set! C308f@set-module-interface-first-mark! (lambda (C4194@x C4195@val) (simple-struct-set! C4194@x '0 C4195@val))) (set! C3091@module-interface-exp-id-vec (lambda (C4198@x) (simple-struct-ref C4198@x '1))) (set! C3093@set-module-interface-exp-id-vec! (lambda (C419a@x C419b@val) (simple-struct-set! C419a@x '1 C419b@val))) (set! C3095@module-interface-exp-lab-vec (lambda (C419e@x) (simple-struct-ref C419e@x '2))) (set! C3097@set-module-interface-exp-lab-vec! (lambda (C41a0@x C41a1@val) (simple-struct-set! C41a0@x '2 C41a1@val))) (set! C3099@dummy '3) (set! C309b@module-interface-exp-id* (lambda (C41a4@iface C41a5@id) ((lambda (C41a9@diff-marks) (begin (set! C41a9@diff-marks (lambda (C41b0@ls C41b1@x) (begin (if (null? C41b0@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (C41b4@a) (if (eq? C41b4@a C41b1@x) '() (cons C41b4@a (C41a9@diff-marks (cdr C41b0@ls) C41b1@x)))) (car C41b0@ls))))) ((lambda (C41aa@diff C41ab@id-vec) (if (null? C41aa@diff) C41ab@id-vec (vector-map (lambda (C41ae@x) (make-simple-struct 'stx '5 (list (C2e10@stx-expr C41ae@x) (append C41aa@diff (C2e14@stx-mark* C41ae@x)) '() '()))) C41ab@id-vec))) (C41a9@diff-marks (C2e14@stx-mark* C41a5@id) (C308d@module-interface-first-mark C41a4@iface)) (C3091@module-interface-exp-id-vec C41a4@iface)))) '#f))) (set! C309d@chi-internal-module (lambda (C41b6@e C41b7@r C41b8@mr C41b9@lex* C41ba@rhs* C41bb@mod** C41bc@kwd*) (call-with-values (lambda () (C3081@parse-module C41b6@e)) (lambda (C41ca@C41c5 C41cb@C41c7 C41cc@C41c9) ((lambda (C41d0@e* C41d1@exp-id* C41d2@name) ((lambda (C41d6@rib) ((lambda (C41d8@e*) ((lambda () (call-with-values (lambda () (C309f@chi-body* C41d8@e* C41b7@r C41b8@mr C41b9@lex* C41ba@rhs* C41bb@mod** C41bc@kwd* '() C41d6@rib '#f)) (lambda (C41ea@C41db C41eb@C41dd C41ec@C41df C41ed@C41e1 C41ee@C41e3 C41ef@C41e5 C41f0@C41e7 C41f1@C41e9) ((lambda (C41fa@_exp* C41fb@kwd* C41fc@mod** C41fd@rhs* C41fe@lex* C41ff@mr C4200@r C4201@e*) ((lambda (C420a@exp-lab* C420b@mod**) (if (not C41d2@name) (values C41fe@lex* C41fd@rhs* C41d1@exp-id* C420a@exp-lab* C4200@r C41ff@mr C420b@mod** C41fb@kwd*) ((lambda (C420e@lab C420f@iface) (values C41fe@lex* C41fd@rhs* (vector C41d2@name) (vector C420e@lab) (cons (cons C420e@lab (cons '$module C420f@iface)) C4200@r) (cons (cons C420e@lab (cons '$module C420f@iface)) C41ff@mr) C420b@mod** C41fb@kwd*)) (C2dce@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (C2e14@stx-mark* C41d2@name)) (vector-map (lambda (C4212@x) (make-simple-struct 'stx '5 (list (C2e10@stx-expr C4212@x) (C2e14@stx-mark* C4212@x) '() '()))) C41d1@exp-id*) C420a@exp-lab*))))) (vector-map (lambda (C4214@x) (or (C2e58@id->label (make-simple-struct 'stx '5 (list (C2e44@id->sym C4214@x) (C2e14@stx-mark* C4214@x) (list C41d6@rib) '()))) (C3127@syntax-violation '#f '"cannot find module export" C4214@x))) C41d1@exp-id*) (cons C4201@e* C41fc@mod**))) C41f1@C41e9 C41f0@C41e7 C41ef@C41e5 C41ee@C41e3 C41ed@C41e1 C41ec@C41df C41eb@C41dd C41ea@C41db)))))) (map (lambda (C4216@x) (C2e2e@add-subst C41d6@rib C4216@x)) (C2e40@syntax->list C41d0@e*)))) (C2df6@make-empty-rib))) C41cc@C41c9 C41cb@C41c7 C41ca@C41c5))))) (set! C309f@chi-body* (lambda (C4218@e* C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C421e@kwd* C421f@exp* C4220@rib C4221@top?) (if (null? C4218@e*) (values C4218@e* C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C421e@kwd* C421f@exp*) ((lambda (C422c@e) (call-with-values (lambda () (C2e64@syntax-type C422c@e C4219@r)) (lambda (C4234@C422f C4235@C4231 C4236@C4233) ((lambda (C423a@kwd C423b@value C423c@type) ((lambda (C4240@kwd*) ((lambda (C4242@t) (if (memv C4242@t '(define)) (call-with-values (lambda () (C2fcb@parse-define C422c@e)) (lambda (C4248@C4245 C4249@C4247) ((lambda (C424c@rhs C424d@id) (begin (if (C2e4e@bound-id-member? C424d@id C4240@kwd*) (C3127@syntax-violation '#f '"cannot redefine keyword" C422c@e) (void)) (call-with-values (lambda () (C2dd2@gen-define-label+loc C424d@id C4220@rib)) (lambda (C4254@C4251 C4255@C4253) ((lambda (C4258@lex C4259@lab) (begin (C2df8@extend-rib! C4220@rib C424d@id C4259@lab) (C309f@chi-body* (cdr C4218@e*) (C2fd9@add-lexical C4259@lab C4258@lex C4219@r) C421a@mr (cons C4258@lex C421b@lex*) (cons C424c@rhs C421c@rhs*) C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?))) C4255@C4253 C4254@C4251))))) C4249@C4247 C4248@C4245))) (if (memv C4242@t '(define-syntax)) (call-with-values (lambda () (C2fcd@parse-define-syntax C422c@e)) (lambda (C4260@C425d C4261@C425f) ((lambda (C4264@rhs C4265@id) (begin (if (C2e4e@bound-id-member? C4265@id C4240@kwd*) (C3127@syntax-violation '#f '"cannot redefine keyword" C422c@e) (void)) ((lambda (C4268@lab C4269@expanded-rhs) (begin (C2df8@extend-rib! C4220@rib C4265@id C4268@lab) ((lambda (C426c@b) (C309f@chi-body* (cdr C4218@e*) (cons (cons C4268@lab C426c@b) C4219@r) (cons (cons C4268@lab C426c@b) C421a@mr) C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?)) (C2e7a@make-eval-transformer C4269@expanded-rhs)))) (C2dd4@gen-define-label C4265@id C4220@rib) (C30a1@expand-transformer C4264@rhs C421a@mr)))) C4261@C425f C4260@C425d))) (if (memv C4242@t '(let-syntax letrec-syntax)) ((lambda (C426e@t) ((lambda (C4270@ls/false) (if (and C4270@ls/false (apply (lambda (C4272@xlhs* C4273@xrhs* C4274@xbody*) (if (not (C2e4a@valid-bound-ids? C4272@xlhs*)) (C3127@syntax-violation '#f '"invalid identifiers" C422c@e) (void))) C4270@ls/false)) (apply (lambda (C4278@xlhs* C4279@xrhs* C427a@xbody*) ((lambda (C427e@xlab*) ((lambda (C4280@xrib) ((lambda (C4282@xb*) ((lambda () (C309f@chi-body* (append (map (lambda (C4284@x) (C2e2e@add-subst C4280@xrib C4284@x)) C427a@xbody*) (cdr C4218@e*)) (append (map cons C427e@xlab* C4282@xb*) C4219@r) (append (map cons C427e@xlab* C4282@xb*) C421a@mr) C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?)))) (map (lambda (C4286@x) (C2e7a@make-eval-transformer (C30a1@expand-transformer (if (eq? C423c@type 'let-syntax) C4286@x (C2e2e@add-subst C4280@xrib C4286@x)) C421a@mr))) C4279@xrhs*))) (C2e02@make-full-rib C4278@xlhs* C427e@xlab*))) (map C2dce@gen-label C4278@xlhs*))) C4270@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C426e@t))) (C3047@syntax-dispatch C426e@t '(_ #(each (any any)) . each-any)))) C422c@e) (if (memv C4242@t '(begin)) ((lambda (C4288@t) ((lambda (C428a@ls/false) (if C428a@ls/false (apply (lambda (C428c@x*) (C309f@chi-body* (append C428c@x* (cdr C4218@e*)) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?)) C428a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4288@t))) (C3047@syntax-dispatch C4288@t '(_ . each-any)))) C422c@e) (if (memv C4242@t '(global-macro global-macro!)) (C309f@chi-body* (cons (C2e2e@add-subst C4220@rib (C3063@chi-global-macro C423b@value C422c@e)) (cdr C4218@e*)) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?) (if (memv C4242@t '(local-macro local-macro!)) (C309f@chi-body* (cons (C2e2e@add-subst C4220@rib (C3061@chi-local-macro C423b@value C422c@e)) (cdr C4218@e*)) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?) (if (memv C4242@t '(macro macro!)) (C309f@chi-body* (cons (C2e2e@add-subst C4220@rib (C305f@chi-macro C423b@value C422c@e)) (cdr C4218@e*)) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?) (if (memv C4242@t '(module)) (call-with-values (lambda () (C309d@chi-internal-module C422c@e C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd*)) (lambda (C429e@C428f C429f@C4291 C42a0@C4293 C42a1@C4295 C42a2@C4297 C42a3@C4299 C42a4@C429b C42a5@C429d) ((lambda (C42ae@kwd* C42af@mod** C42b0@mr C42b1@r C42b2@m-exp-lab* C42b3@m-exp-id* C42b4@rhs* C42b5@lex*) (begin (vector-for-each (lambda (C42be@id C42bf@lab) (C2df8@extend-rib! C4220@rib C42be@id C42bf@lab)) C42b3@m-exp-id* C42b2@m-exp-lab*) (C309f@chi-body* (cdr C4218@e*) C42b1@r C42b0@mr C42b5@lex* C42b4@rhs* C42af@mod** C42ae@kwd* C421f@exp* C4220@rib C4221@top?))) C42a5@C429d C42a4@C429b C42a3@C4299 C42a2@C4297 C42a1@C4295 C42a0@C4293 C429f@C4291 C429e@C428f))) (if (memv C4242@t '(library)) (begin (C3109@library-expander (C2e56@stx->datum C422c@e)) (C309f@chi-body* (cdr C4218@e*) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?)) (if (memv C4242@t '(export)) ((lambda (C42c2@t) ((lambda (C42c4@ls/false) (if C42c4@ls/false (apply (lambda (C42c6@exp-decl*) (C309f@chi-body* (cdr C4218@e*) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* (append C42c6@exp-decl* C421f@exp*) C4220@rib C4221@top?)) C42c4@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C42c2@t))) (C3047@syntax-dispatch C42c2@t '(_ . each-any)))) C422c@e) (if (memv C4242@t '(import)) ((lambda () ((lambda (C42c9@module-import? C42cb@module-import C42cd@library-import) (begin (set! C42c9@module-import? (lambda (C431c@e) ((lambda (C431e@t) ((lambda (C4320@ls/false) (if (and C4320@ls/false (apply (lambda (C4322@id) (C2e42@id? C4322@id)) C4320@ls/false)) (apply (lambda (C4324@id) '#t) C4320@ls/false) ((lambda (C4326@t) ((lambda (C4328@ls/false) (if C4328@ls/false (apply (lambda (C432a@imp*) '#f) C4328@ls/false) ((lambda (C432c@t) ((lambda (C432e@ls/false) (if C432e@ls/false (apply (lambda () (C3127@syntax-violation '#f '"malformed import form" C431c@e)) C432e@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C432c@t))) (C3047@syntax-dispatch C432c@t '_))) C4326@t))) (C3047@syntax-dispatch C4326@t '(_ . each-any)))) C431e@t))) (C3047@syntax-dispatch C431e@t '(_ any)))) C431c@e))) (set! C42cb@module-import (lambda (C42fa@e C42fb@r) ((lambda (C42fe@t) ((lambda (C4300@ls/false) (if (and C4300@ls/false (apply (lambda (C4302@id) (C2e42@id? C4302@id)) C4300@ls/false)) (apply (lambda (C4304@id) (call-with-values (lambda () (C2e64@syntax-type C4304@id C42fb@r)) (lambda (C430c@C4307 C430d@C4309 C430e@C430b) ((lambda (C4312@kwd C4313@value C4314@type) ((lambda (C4318@t) (if (memv C4318@t '($module)) ((lambda (C431a@iface) (values (C309b@module-interface-exp-id* C431a@iface C4304@id) (C3095@module-interface-exp-lab-vec C431a@iface))) C4313@value) (C3127@syntax-violation '#f '"invalid import" C42fa@e))) C4314@type)) C430e@C430b C430d@C4309 C430c@C4307)))) C4300@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C42fe@t))) (C3047@syntax-dispatch C42fe@t '(_ any)))) C42fa@e))) (set! C42cd@library-import (lambda (C42de@e) ((lambda (C42e0@t) ((lambda (C42e2@ls/false) (if C42e2@ls/false (apply (lambda (C42e4@ctxt C42e5@imp*) (call-with-values (lambda () (C30a9@parse-import-spec* (C312d@syntax->datum C42e5@imp*))) (lambda (C42ec@C42e9 C42ed@C42eb) ((lambda (C42f0@subst-labels C42f1@subst-names) (values (vector-map (lambda (C42f4@name) (C2e22@datum->stx C42e4@ctxt C42f4@name)) C42f1@subst-names) C42f0@subst-labels)) C42ed@C42eb C42ec@C42e9)))) C42e2@ls/false) ((lambda (C42f6@t) ((lambda (C42f8@ls/false) (if C42f8@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid import form" C42de@e)) C42f8@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C42f6@t))) (C3047@syntax-dispatch C42f6@t '_))) C42e0@t))) (C3047@syntax-dispatch C42e0@t '(any . each-any)))) C42de@e))) (begin (call-with-values (lambda () (if (C42c9@module-import? C422c@e) (C42cb@module-import C422c@e C4219@r) (C42cd@library-import C422c@e))) (lambda (C42d2@C42cf C42d3@C42d1) ((lambda (C42d6@lab* C42d7@id*) (vector-for-each (lambda (C42da@id C42db@lab) (C2df8@extend-rib! C4220@rib C42da@id C42db@lab)) C42d7@id* C42d6@lab*)) C42d3@C42d1 C42d2@C42cf))) (C309f@chi-body* (cdr C4218@e*) C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?)))) '#f '#f '#f))) (if C4221@top? (C309f@chi-body* (cdr C4218@e*) C4219@r C421a@mr (cons (C2dca@gen-lexical 'dummy) C421b@lex*) (cons (cons 'top-expr C422c@e) C421c@rhs*) C421d@mod** C4240@kwd* C421f@exp* C4220@rib C4221@top?) (values C4218@e* C4219@r C421a@mr C421b@lex* C421c@rhs* C421d@mod** C4240@kwd* C421f@exp*)))))))))))))) C423c@type)) (if (C2e42@id? C423a@kwd) (cons C423a@kwd C421e@kwd*) C421e@kwd*))) C4236@C4233 C4235@C4231 C4234@C422f)))) (car C4218@e*))))) (set! C30a1@expand-transformer (lambda (C4330@expr C4331@r) ((lambda (C4334@rtc) ((lambda (C4336@expanded-rhs) (begin (for-each ((lambda (C4338@mark-visit) (lambda (C433a@x) (begin (C2c6d@C2abb@invoke-library C433a@x) (C4338@mark-visit C433a@x)))) (C30b1@vis-collector)) (C4334@rtc)) C4336@expanded-rhs)) ((lambda (C4344@C433d C4345@C433f C4346@C4341 C4347@C4343) ((lambda (C434c@swap) (dynamic-wind C434c@swap (lambda () (C3069@chi-expr C4330@expr C4331@r C4331@r)) C434c@swap)) (lambda () (begin ((lambda (C434e@t) (begin (C4344@C433d C4346@C4341) (set! C4346@C4341 C434e@t))) (C4344@C433d)) ((lambda (C4350@t) (begin (C4345@C433f C4347@C4343) (set! C4347@C4343 C4350@t))) (C4345@C433f)))))) C30af@inv-collector C30b1@vis-collector C4334@rtc (lambda (C4352@x) (values))))) (C30ad@make-collector)))) (set! C30a3@parse-exports (lambda (C4354@exp*) ((letrec ((C4356@f (lambda (C4358@exp* C4359@int* C435a@ext*) (if (null? C4358@exp*) (begin (if (not (C2e4a@valid-bound-ids? C435a@ext*)) (C3127@syntax-violation 'export '"invalid exports" (C307d@find-dups C435a@ext*)) (void)) (values (map C312d@syntax->datum C435a@ext*) C4359@int*)) ((lambda (C435e@t) ((lambda (C4360@ls/false) (if C4360@ls/false (apply (lambda (C4362@rename C4363@i* C4364@e*) (begin (if (not (and (eq? (C312d@syntax->datum C4362@rename) 'rename) (for-all C2e42@id? C4363@i*) (for-all C2e42@id? C4364@e*))) (C3127@syntax-violation 'export '"invalid export specifier" (car C4358@exp*)) (void)) (C4356@f (cdr C4358@exp*) (append C4363@i* C4359@int*) (append C4364@e* C435a@ext*)))) C4360@ls/false) ((lambda (C4368@t) ((lambda (C436a@ls/false) (if C436a@ls/false (apply (lambda (C436c@ie) (begin (if (not (C2e42@id? C436c@ie)) (C3127@syntax-violation 'export '"invalid export" C436c@ie) (void)) (C4356@f (cdr C4358@exp*) (cons C436c@ie C4359@int*) (cons C436c@ie C435a@ext*)))) C436a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4368@t))) (C3047@syntax-dispatch C4368@t 'any))) C435e@t))) (C3047@syntax-dispatch C435e@t '(any . #(each (any any)))))) (car C4358@exp*)))))) C4356@f) C4354@exp* '() '()))) (set! C30a5@parse-library-name (lambda (C436e@spec) ((lambda (C4371@parse) (begin (set! C4371@parse (lambda (C437e@x) ((lambda (C4380@t) ((lambda (C4382@ls/false) (if (and C4382@ls/false (apply (lambda (C4384@v*) (for-all (lambda (C4386@x) ((lambda (C4388@x) (and (integer? C4388@x) (exact? C4388@x))) (C312d@syntax->datum C4386@x))) C4384@v*)) C4382@ls/false)) (apply (lambda (C438a@v*) (values '() (map C312d@syntax->datum C438a@v*))) C4382@ls/false) ((lambda (C438c@t) ((lambda (C438e@ls/false) (if (and C438e@ls/false (apply (lambda (C4390@x C4391@rest) (symbol? (C312d@syntax->datum C4390@x))) C438e@ls/false)) (apply (lambda (C4394@x C4395@rest) (call-with-values (lambda () (C4371@parse C4395@rest)) (lambda (C439c@C4399 C439d@C439b) ((lambda (C43a0@v* C43a1@x*) (values (cons (C312d@syntax->datum C4394@x) C43a1@x*) C43a0@v*)) C439d@C439b C439c@C4399)))) C438e@ls/false) ((lambda (C43a4@t) ((lambda (C43a6@ls/false) (if C43a6@ls/false (apply (lambda () (values '() '())) C43a6@ls/false) ((lambda (C43a8@t) ((lambda (C43aa@ls/false) (if C43aa@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid library name" C436e@spec)) C43aa@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C43a8@t))) (C3047@syntax-dispatch C43a8@t '_))) C43a4@t))) (C3047@syntax-dispatch C43a4@t '()))) C438c@t))) (C3047@syntax-dispatch C438c@t '(any . any)))) C4380@t))) (C3047@syntax-dispatch C4380@t '(each-any)))) C437e@x))) (call-with-values (lambda () (C4371@parse C436e@spec)) (lambda (C4376@C4373 C4377@C4375) ((lambda (C437a@ver* C437b@name*) (begin (if (null? C437b@name*) (C3127@syntax-violation '#f '"empty library name" C436e@spec) (void)) (values C437b@name* C437a@ver*))) C4377@C4375 C4376@C4373))))) '#f))) (set! C30a7@parse-library (lambda (C43ac@e) ((lambda (C43ae@t) ((lambda (C43b0@ls/false) (if (and C43b0@ls/false (apply (lambda (C43b2@library C43b3@name* C43b4@export C43b5@exp* C43b6@import C43b7@imp* C43b8@b*) (and (eq? (C312d@syntax->datum C43b4@export) 'export) (eq? (C312d@syntax->datum C43b6@import) 'import) (eq? (C312d@syntax->datum C43b2@library) 'library))) C43b0@ls/false)) (apply (lambda (C43c0@library C43c1@name* C43c2@export C43c3@exp* C43c4@import C43c5@imp* C43c6@b*) (values C43c1@name* C43c3@exp* C43c5@imp* C43c6@b*)) C43b0@ls/false) ((lambda (C43ce@t) ((lambda (C43d0@ls/false) (if C43d0@ls/false (apply (lambda () (C3127@syntax-violation '#f '"malformed library" C43ac@e)) C43d0@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C43ce@t))) (C3047@syntax-dispatch C43ce@t '_))) C43ae@t))) (C3047@syntax-dispatch C43ae@t '(any each-any (any . each-any) (any . each-any) . each-any)))) C43ac@e))) (set! C30a9@parse-import-spec* ((lambda () ((lambda (C43d3@idsyn? C43d5@dup-error C43d7@merge-substs C43d9@exclude* C43db@find* C43dd@rem* C43df@remove-dups C43e1@parse-library-name C43e3@import-library C43e5@get-import C43e7@add-imports!) (begin (set! C43d3@idsyn? (lambda (C45dc@x) (symbol? (C312d@syntax->datum C45dc@x)))) (set! C43d5@dup-error (lambda (C45da@name) (C3127@syntax-violation 'import '"two imports with different bindings" C45da@name))) (set! C43d7@merge-substs (lambda (C45c8@s C45c9@subst) ((lambda (C45cd@insert-to-subst) (begin (set! C45cd@insert-to-subst (lambda (C45ce@a C45cf@subst) ((lambda (C45d2@name C45d3@label) ((lambda (C45d6@t) (if C45d6@t ((lambda (C45d8@x) (if (eq? (cdr C45d8@x) C45d3@label) C45cf@subst (C43d5@dup-error C45d2@name))) C45d6@t) (cons C45ce@a C45cf@subst))) (assq C45d2@name C45cf@subst))) (car C45ce@a) (cdr C45ce@a)))) (if (null? C45c8@s) C45c9@subst (C45cd@insert-to-subst (car C45c8@s) (C43d7@merge-substs (cdr C45c8@s) C45c9@subst))))) '#f))) (set! C43d9@exclude* (lambda (C4598@sym* C4599@subst) ((lambda (C459d@exclude) (begin (set! C459d@exclude (lambda (C45b6@sym C45b7@subst) (if (null? C45b7@subst) (C3127@syntax-violation 'import '"cannot rename unbound identifier" C45b6@sym) (if (eq? C45b6@sym (caar C45b7@subst)) (values (cdar C45b7@subst) (cdr C45b7@subst)) ((lambda (C45ba@a) (call-with-values (lambda () (C459d@exclude C45b6@sym (cdr C45b7@subst))) (lambda (C45c0@C45bd C45c1@C45bf) ((lambda (C45c4@subst C45c5@old) (values C45c5@old (cons C45ba@a C45c4@subst))) C45c1@C45bf C45c0@C45bd)))) (car C45b7@subst)))))) (if (null? C4598@sym*) (values '() C4599@subst) (call-with-values (lambda () (C459d@exclude (car C4598@sym*) C4599@subst)) (lambda (C45a2@C459f C45a3@C45a1) ((lambda (C45a6@subst C45a7@old) (call-with-values (lambda () (C43d9@exclude* (cdr C4598@sym*) C45a6@subst)) (lambda (C45ae@C45ab C45af@C45ad) ((lambda (C45b2@subst C45b3@old*) (values (cons C45a7@old C45b3@old*) C45b2@subst)) C45af@C45ad C45ae@C45ab)))) C45a3@C45a1 C45a2@C459f)))))) '#f))) (set! C43db@find* (lambda (C4590@sym* C4591@subst) (map (lambda (C4594@x) ((lambda (C4596@t) (if C4596@t (cdr C4596@t) (C3127@syntax-violation 'import '"cannot find identifier" C4594@x))) (assq C4594@x C4591@subst))) C4590@sym*))) (set! C43dd@rem* (lambda (C4588@sym* C4589@subst) ((letrec ((C458c@f (lambda (C458e@subst) (if (null? C458e@subst) '() (if (memq (caar C458e@subst) C4588@sym*) (C458c@f (cdr C458e@subst)) (cons (car C458e@subst) (C458c@f (cdr C458e@subst)))))))) C458c@f) C4589@subst))) (set! C43df@remove-dups (lambda (C4586@ls) (if (null? C4586@ls) '() (if (memq (car C4586@ls) (cdr C4586@ls)) (C43df@remove-dups (cdr C4586@ls)) (cons (car C4586@ls) (C43df@remove-dups (cdr C4586@ls))))))) (set! C43e1@parse-library-name (lambda (C449e@spec) ((lambda (C44a1@subversion? C44a3@subversion-pred C44a5@version-pred) (begin (set! C44a1@subversion? (lambda (C4582@x) ((lambda (C4584@x) (and (integer? C4584@x) (exact? C4584@x) (>= C4584@x '0))) (C312d@syntax->datum C4582@x)))) (set! C44a3@subversion-pred (lambda (C4522@x*) ((lambda (C4524@t) ((lambda (C4526@ls/false) (if (and C4526@ls/false (apply (lambda (C4528@n) (C44a1@subversion? C4528@n)) C4526@ls/false)) (apply (lambda (C452a@n) (lambda (C452c@x) (= C452c@x (C312d@syntax->datum C452a@n)))) C4526@ls/false) ((lambda (C452e@t) ((lambda (C4530@ls/false) (if (and C4530@ls/false (apply (lambda (C4532@p? C4533@sub*) (eq? (C312d@syntax->datum C4532@p?) 'and)) C4530@ls/false)) (apply (lambda (C4536@p? C4537@sub*) ((lambda (C453a@p*) (lambda (C453c@x) (for-all (lambda (C453e@p) (C453e@p C453c@x)) C453a@p*))) (map C44a3@subversion-pred C4537@sub*))) C4530@ls/false) ((lambda (C4540@t) ((lambda (C4542@ls/false) (if (and C4542@ls/false (apply (lambda (C4544@p? C4545@sub*) (eq? (C312d@syntax->datum C4544@p?) 'or)) C4542@ls/false)) (apply (lambda (C4548@p? C4549@sub*) ((lambda (C454c@p*) (lambda (C454e@x) (exists (lambda (C4550@p) (C4550@p C454e@x)) C454c@p*))) (map C44a3@subversion-pred C4549@sub*))) C4542@ls/false) ((lambda (C4552@t) ((lambda (C4554@ls/false) (if (and C4554@ls/false (apply (lambda (C4556@p? C4557@sub) (eq? (C312d@syntax->datum C4556@p?) 'not)) C4554@ls/false)) (apply (lambda (C455a@p? C455b@sub) ((lambda (C455e@p) (lambda (C4560@x) (not (C455e@p C4560@x)))) (C44a3@subversion-pred C455b@sub))) C4554@ls/false) ((lambda (C4562@t) ((lambda (C4564@ls/false) (if (and C4564@ls/false (apply (lambda (C4566@p? C4567@n) (and (eq? (C312d@syntax->datum C4566@p?) '<=) (C44a1@subversion? C4567@n))) C4564@ls/false)) (apply (lambda (C456a@p? C456b@n) (lambda (C456e@x) (<= C456e@x (C312d@syntax->datum C456b@n)))) C4564@ls/false) ((lambda (C4570@t) ((lambda (C4572@ls/false) (if (and C4572@ls/false (apply (lambda (C4574@p? C4575@n) (and (eq? (C312d@syntax->datum C4574@p?) '>=) (C44a1@subversion? C4575@n))) C4572@ls/false)) (apply (lambda (C4578@p? C4579@n) (lambda (C457c@x) (>= C457c@x (C312d@syntax->datum C4579@n)))) C4572@ls/false) ((lambda (C457e@t) ((lambda (C4580@ls/false) (if C4580@ls/false (apply (lambda () (C3127@syntax-violation 'import '"invalid sub-version spec" C449e@spec C4522@x*)) C4580@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C457e@t))) (C3047@syntax-dispatch C457e@t '_))) C4570@t))) (C3047@syntax-dispatch C4570@t '(any any)))) C4562@t))) (C3047@syntax-dispatch C4562@t '(any any)))) C4552@t))) (C3047@syntax-dispatch C4552@t '(any any)))) C4540@t))) (C3047@syntax-dispatch C4540@t '(any . each-any)))) C452e@t))) (C3047@syntax-dispatch C452e@t '(any . each-any)))) C4524@t))) (C3047@syntax-dispatch C4524@t 'any))) C4522@x*))) (set! C44a5@version-pred (lambda (C44d2@x*) ((lambda (C44d4@t) ((lambda (C44d6@ls/false) (if C44d6@ls/false (apply (lambda () (lambda (C44d8@x) '#t)) C44d6@ls/false) ((lambda (C44da@t) ((lambda (C44dc@ls/false) (if (and C44dc@ls/false (apply (lambda (C44de@c C44df@ver*) (eq? (C312d@syntax->datum C44de@c) 'and)) C44dc@ls/false)) (apply (lambda (C44e2@c C44e3@ver*) ((lambda (C44e6@p*) (lambda (C44e8@x) (for-all (lambda (C44ea@p) (C44ea@p C44e8@x)) C44e6@p*))) (map C44a5@version-pred C44e3@ver*))) C44dc@ls/false) ((lambda (C44ec@t) ((lambda (C44ee@ls/false) (if (and C44ee@ls/false (apply (lambda (C44f0@c C44f1@ver*) (eq? (C312d@syntax->datum C44f0@c) 'or)) C44ee@ls/false)) (apply (lambda (C44f4@c C44f5@ver*) ((lambda (C44f8@p*) (lambda (C44fa@x) (exists (lambda (C44fc@p) (C44fc@p C44fa@x)) C44f8@p*))) (map C44a5@version-pred C44f5@ver*))) C44ee@ls/false) ((lambda (C44fe@t) ((lambda (C4500@ls/false) (if (and C4500@ls/false (apply (lambda (C4502@c C4503@ver) (eq? (C312d@syntax->datum C4502@c) 'not)) C4500@ls/false)) (apply (lambda (C4506@c C4507@ver) ((lambda (C450a@p) (lambda (C450c@x) (not (C450a@p C450c@x)))) (C44a5@version-pred C4507@ver))) C4500@ls/false) ((lambda (C450e@t) ((lambda (C4510@ls/false) (if C4510@ls/false (apply (lambda (C4512@sub*) ((lambda (C4514@p*) (lambda (C4516@x) ((letrec ((C4518@f (lambda (C451a@p* C451b@x) (if (null? C451a@p*) '#t (if (null? C451b@x) '#f (and ((car C451a@p*) (car C451b@x)) (C4518@f (cdr C451a@p*) (cdr C451b@x)))))))) C4518@f) C4514@p* C4516@x))) (map C44a3@subversion-pred C4512@sub*))) C4510@ls/false) ((lambda (C451e@t) ((lambda (C4520@ls/false) (if C4520@ls/false (apply (lambda () (C3127@syntax-violation 'import '"invalid version spec" C449e@spec C44d2@x*)) C4520@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C451e@t))) (C3047@syntax-dispatch C451e@t '_))) C450e@t))) (C3047@syntax-dispatch C450e@t 'each-any))) C44fe@t))) (C3047@syntax-dispatch C44fe@t '(any any)))) C44ec@t))) (C3047@syntax-dispatch C44ec@t '(any . each-any)))) C44da@t))) (C3047@syntax-dispatch C44da@t '(any . each-any)))) C44d4@t))) (C3047@syntax-dispatch C44d4@t '()))) C44d2@x*))) ((letrec ((C44a6@f (lambda (C44a8@x) ((lambda (C44aa@t) ((lambda (C44ac@ls/false) (if C44ac@ls/false (apply (lambda (C44ae@version-spec*) (values '() (C44a5@version-pred C44ae@version-spec*))) C44ac@ls/false) ((lambda (C44b0@t) ((lambda (C44b2@ls/false) (if (and C44b2@ls/false (apply (lambda (C44b4@x C44b5@x*) (C43d3@idsyn? C44b4@x)) C44b2@ls/false)) (apply (lambda (C44b8@x C44b9@x*) (call-with-values (lambda () (C44a6@f C44b9@x*)) (lambda (C44c0@C44bd C44c1@C44bf) ((lambda (C44c4@pred C44c5@name) (values (cons (C312d@syntax->datum C44b8@x) C44c5@name) C44c4@pred)) C44c1@C44bf C44c0@C44bd)))) C44b2@ls/false) ((lambda (C44c8@t) ((lambda (C44ca@ls/false) (if C44ca@ls/false (apply (lambda () (values '() (lambda (C44cc@x) '#t))) C44ca@ls/false) ((lambda (C44ce@t) ((lambda (C44d0@ls/false) (if C44d0@ls/false (apply (lambda () (C3127@syntax-violation '#f '"invalid import spec" C449e@spec)) C44d0@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C44ce@t))) (C3047@syntax-dispatch C44ce@t '_))) C44c8@t))) (C3047@syntax-dispatch C44c8@t '()))) C44b0@t))) (C3047@syntax-dispatch C44b0@t '(any . any)))) C44aa@t))) (C3047@syntax-dispatch C44aa@t '(each-any)))) C44a8@x)))) C44a6@f) C449e@spec))) '#f '#f '#f))) (set! C43e3@import-library (lambda (C448e@spec*) (call-with-values (lambda () (C43e1@parse-library-name C448e@spec*)) (lambda (C4494@C4491 C4495@C4493) ((lambda (C4498@pred C4499@name) (begin (if (null? C4499@name) (C3127@syntax-violation 'import '"empty library name" C448e@spec*) (void)) ((lambda (C449c@lib) (begin (if (not C449c@lib) (C3127@syntax-violation 'import '"cannot find library with required name" C4499@name) (void)) (if (not (C4498@pred (C2c40@C2a61@library-version C449c@lib))) (C3127@syntax-violation 'import '"library does not satisfy version specification" C448e@spec* C449c@lib) (void)) ((C30b3@imp-collector) C449c@lib) (C2c48@C2a71@library-subst C449c@lib))) (C2c66@C2aad@find-library-by-name C4499@name)))) C4495@C4493 C4494@C4491))))) (set! C43e5@get-import (lambda (C4400@spec) ((lambda (C4402@t) ((lambda (C4404@ls/false) (if (and C4404@ls/false (apply (lambda (C4406@x C4407@x*) (not (memq (C312d@syntax->datum C4406@x) '(for rename except only prefix library)))) C4404@ls/false)) (apply (lambda (C440a@x C440b@x*) (C43e3@import-library (cons C440a@x C440b@x*))) C4404@ls/false) ((lambda (C440e@t) ((lambda (C4410@ls/false) (if (and C4410@ls/false (apply (lambda (C4412@rename C4413@isp C4414@old* C4415@new*) (and (eq? (C312d@syntax->datum C4412@rename) 'rename) (for-all C43d3@idsyn? C4414@old*) (for-all C43d3@idsyn? C4415@new*))) C4410@ls/false)) (apply (lambda (C441a@rename C441b@isp C441c@old* C441d@new*) ((lambda (C4422@subst C4423@old* C4424@new*) ((lambda (C4428@old-label*) ((lambda (C442a@subst) (C43d7@merge-substs (map cons C4424@new* C4428@old-label*) C442a@subst)) (C43dd@rem* C4423@old* C4422@subst))) (C43db@find* C4423@old* C4422@subst))) (C43e5@get-import C441b@isp) (map C312d@syntax->datum C441c@old*) (map C312d@syntax->datum C441d@new*))) C4410@ls/false) ((lambda (C442c@t) ((lambda (C442e@ls/false) (if (and C442e@ls/false (apply (lambda (C4430@except C4431@isp C4432@sym*) (and (eq? (C312d@syntax->datum C4430@except) 'except) (for-all C43d3@idsyn? C4432@sym*))) C442e@ls/false)) (apply (lambda (C4436@except C4437@isp C4438@sym*) ((lambda (C443c@subst) (C43dd@rem* (map C312d@syntax->datum C4438@sym*) C443c@subst)) (C43e5@get-import C4437@isp))) C442e@ls/false) ((lambda (C443e@t) ((lambda (C4440@ls/false) (if (and C4440@ls/false (apply (lambda (C4442@only C4443@isp C4444@sym*) (and (eq? (C312d@syntax->datum C4442@only) 'only) (for-all C43d3@idsyn? C4444@sym*))) C4440@ls/false)) (apply (lambda (C4448@only C4449@isp C444a@sym*) ((lambda (C444e@subst C444f@sym*) ((lambda (C4452@sym*) ((lambda (C4454@lab*) (map cons C4452@sym* C4454@lab*)) (C43db@find* C4452@sym* C444e@subst))) (C43df@remove-dups C444f@sym*))) (C43e5@get-import C4449@isp) (map C312d@syntax->datum C444a@sym*))) C4440@ls/false) ((lambda (C4456@t) ((lambda (C4458@ls/false) (if (and C4458@ls/false (apply (lambda (C445a@prefix C445b@isp C445c@p) (and (eq? (C312d@syntax->datum C445a@prefix) 'prefix) (C43d3@idsyn? C445c@p))) C4458@ls/false)) (apply (lambda (C4460@prefix C4461@isp C4462@p) ((lambda (C4466@subst C4467@prefix) (map (lambda (C446a@x) (cons (string->symbol (string-append C4467@prefix (symbol->string (car C446a@x)))) (cdr C446a@x))) C4466@subst)) (C43e5@get-import C4461@isp) (symbol->string (C312d@syntax->datum C4462@p)))) C4458@ls/false) ((lambda (C446c@t) ((lambda (C446e@ls/false) (if (and C446e@ls/false (apply (lambda (C4470@library C4471@spec*) (eq? (C312d@syntax->datum C4470@library) 'library)) C446e@ls/false)) (apply (lambda (C4474@library C4475@spec*) (C43e3@import-library C4475@spec*)) C446e@ls/false) ((lambda (C4478@t) ((lambda (C447a@ls/false) (if (and C447a@ls/false (apply (lambda (C447c@for C447d@isp C447e@rest) (eq? (C312d@syntax->datum C447c@for) 'for)) C447a@ls/false)) (apply (lambda (C4482@for C4483@isp C4484@rest) (C43e5@get-import C4483@isp)) C447a@ls/false) ((lambda (C4488@t) ((lambda (C448a@ls/false) (if C448a@ls/false (apply (lambda (C448c@spec) (C3127@syntax-violation 'import '"invalid import spec" C448c@spec)) C448a@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4488@t))) (C3047@syntax-dispatch C4488@t 'any))) C4478@t))) (C3047@syntax-dispatch C4478@t '(any any . any)))) C446c@t))) (C3047@syntax-dispatch C446c@t '(any each-any)))) C4456@t))) (C3047@syntax-dispatch C4456@t '(any any any)))) C443e@t))) (C3047@syntax-dispatch C443e@t '(any any . each-any)))) C442c@t))) (C3047@syntax-dispatch C442c@t '(any any . each-any)))) C440e@t))) (C3047@syntax-dispatch C440e@t '(any any . #(each (any any)))))) C4402@t))) (C3047@syntax-dispatch C4402@t '(any . each-any)))) C4400@spec))) (set! C43e7@add-imports! (lambda (C43f0@imp C43f1@h) ((lambda (C43f4@subst) (for-each (lambda (C43f6@x) ((lambda (C43f8@name C43f9@label) ((lambda (C43fc@t) (if C43fc@t ((lambda (C43fe@l) (if (not (eq? C43fe@l C43f9@label)) (C43d5@dup-error C43f8@name) (void))) C43fc@t) (hashtable-set! C43f1@h C43f8@name C43f9@label))) (hashtable-ref C43f1@h C43f8@name '#f))) (car C43f6@x) (cdr C43f6@x))) C43f4@subst)) (C43e5@get-import C43f0@imp)))) (lambda (C43e8@imp*) ((letrec ((C43ea@f (lambda (C43ec@imp* C43ed@h) (if (null? C43ec@imp*) (hashtable-entries C43ed@h) (begin (C43e7@add-imports! (car C43ec@imp*) C43ed@h) (C43ea@f (cdr C43ec@imp*) C43ed@h)))))) C43ea@f) C43e8@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! C30ab@make-top-rib (lambda (C45de@names C45df@labels) ((lambda (C45e2@rib) (begin (vector-for-each (lambda (C45e4@name C45e5@label) (begin (if (not (symbol? C45e4@name)) (error 'make-top-rib '"BUG: not a symbol" C45e4@name) (void)) (C2dfa@extend-rib/nc! C45e2@rib (make-simple-struct 'stx '5 (list C45e4@name C2dc6@top-mark* '() '())) C45e5@label))) C45de@names C45df@labels) C45e2@rib)) (C2df6@make-empty-rib)))) (set! C30ad@make-collector (lambda () ((lambda (C45e8@ls) (lambda C45ec ((lambda (C45ed) (if (= C45ed '0) (apply (lambda () C45e8@ls) C45ec) (if (= C45ed '1) (apply (lambda (C45ea@x) (set! C45e8@ls (C2dbf@set-cons C45ea@x C45e8@ls))) C45ec) (error 'apply '"invalid arg count")))) (length C45ec)))) '()))) (set! C30af@inv-collector (C29a1@C2880@make-parameter (lambda C45ee@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (C45f0@x) (begin (if (not (procedure? C45f0@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" C45f0@x) (void)) C45f0@x)))) (set! C30b1@vis-collector (C29a1@C2880@make-parameter (lambda C45f2@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (C45f4@x) (begin (if (not (procedure? C45f4@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" C45f4@x) (void)) C45f4@x)))) (set! C30b3@imp-collector (C29a1@C2880@make-parameter (lambda C45f6@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (C45f8@x) (begin (if (not (procedure? C45f8@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" C45f8@x) (void)) C45f8@x)))) (set! C30b5@chi-library-internal (lambda (C45fa@e* C45fb@rib C45fc@top?) (call-with-values (lambda () (C309f@chi-body* C45fa@e* '() '() '() '() '() '() '() C45fb@rib C45fc@top?)) (lambda (C4610@C4601 C4611@C4603 C4612@C4605 C4613@C4607 C4614@C4609 C4615@C460b C4616@C460d C4617@C460f) ((lambda (C4620@exp* C4621@_kwd* C4622@mod** C4623@rhs* C4624@lex* C4625@mr C4626@r C4627@e*) (values (append (apply append (reverse C4622@mod**)) C4627@e*) C4626@r C4625@mr (reverse C4624@lex*) (reverse C4623@rhs*) C4620@exp*)) C4617@C460f C4616@C460d C4615@C460b C4614@C4609 C4613@C4607 C4612@C4605 C4611@C4603 C4610@C4601))))) (set! C30b7@chi-interaction-expr (lambda (C4630@e C4631@rib C4632@r) (call-with-values (lambda () (C309f@chi-body* (list C4630@e) C4632@r C4632@r '() '() '() '() '() C4631@rib '#t)) (lambda (C4646@C4637 C4647@C4639 C4648@C463b C4649@C463d C464a@C463f C464b@C4641 C464c@C4643 C464d@C4645) ((lambda (C4656@_exp* C4657@_kwd* C4658@mod** C4659@rhs* C465a@lex* C465b@mr C465c@r C465d@e*) ((lambda (C4666@e*) ((lambda (C4668@e) (values C4668@e C465c@r)) (if (null? C4666@e*) (C2daa@C2d1a@build-void) (if (null? (cdr C4666@e*)) (car C4666@e*) (C2da9@C2d18@build-sequence '#f C4666@e*))))) (C3077@expand-interaction-rhs*/init* (reverse C465a@lex*) (reverse C4659@rhs*) (append (apply append (reverse C4658@mod**)) C465d@e*) C465c@r C465b@mr))) C464d@C4645 C464c@C4643 C464b@C4641 C464a@C463f C4649@C463d C4648@C463b C4647@C4639 C4646@C4637))))) (set! C30b9@library-body-expander (lambda (C466a@name C466b@main-exp* C466c@imp* C466d@b* C466e@top?) ((lambda (C4675@itc) (begin (set! C4675@itc (C30ad@make-collector)) ((lambda (C467e@C4677 C467f@C4679 C4680@C467b C4681@C467d) ((lambda (C4686@swap) (dynamic-wind C4686@swap (lambda () (call-with-values (lambda () (C30a9@parse-import-spec* C466c@imp*)) (lambda (C468c@C4689 C468d@C468b) ((lambda (C4690@subst-labels C4691@subst-names) ((lambda (C4694@rib) ((lambda (C4697@wrap) (begin (set! C4697@wrap (lambda (C4712@x) (make-simple-struct 'stx '5 (list C4712@x C2dc6@top-mark* (list C4694@rib) '())))) ((lambda (C4698@b* C4699@main-exp* C469a@rtc C469b@vtc) ((lambda (C46a8@C46a1 C46a9@C46a3 C46aa@C46a5 C46ab@C46a7) ((lambda (C46b0@swap) (dynamic-wind C46b0@swap (lambda () (call-with-values (lambda () (C30b5@chi-library-internal C4698@b* C4694@rib C466e@top?)) (lambda (C46be@C46b3 C46bf@C46b5 C46c0@C46b7 C46c1@C46b9 C46c2@C46bb C46c3@C46bd) ((lambda (C46ca@internal-exp* C46cb@rhs* C46cc@lex* C46cd@mr C46ce@r C46cf@init*) (call-with-values (lambda () (C30a3@parse-exports (append C4699@main-exp* C46ca@internal-exp*))) (lambda (C46da@C46d7 C46db@C46d9) ((lambda (C46de@exp-id* C46df@exp-name*) (begin (C2dfe@seal-rib! C4694@rib) ((lambda (C46e2@init*) ((lambda (C46e4@rhs*) ((lambda () (begin (C2e00@unseal-rib! C4694@rib) ((lambda (C46e6@loc* C46e7@export-subst) ((lambda (C46eb@errstr) (begin (set! C46eb@errstr '"attempt to export mutated variable") (call-with-values (lambda () (C3113@make-export-env/macros C46cc@lex* C46e6@loc* C46ce@r)) (lambda (C46f2@C46ed C46f3@C46ef C46f4@C46f1) ((lambda (C46f8@macro* C46f9@global* C46fa@export-env) (begin (for-each (lambda (C46fe@s) ((lambda (C4700@name C4701@label) ((lambda (C4704@p) (if C4704@p ((lambda (C4706@b) ((lambda (C4708@type) (if (eq? C4708@type 'mutable) (C3127@syntax-violation 'export C46eb@errstr C4700@name) (void))) (car C4706@b))) (cdr C4704@p)) (void))) (assq C4701@label C46fa@export-env))) (car C46fe@s) (cdr C46fe@s))) C46e7@export-subst) ((lambda (C470a@invoke-body C470b@invoke-definitions) (values (C4675@itc) (C469a@rtc) (C469b@vtc) (C2da9@C2d18@build-sequence '#f (append C470b@invoke-definitions (list C470a@invoke-body))) C46f8@macro* C46e7@export-subst C46fa@export-env)) (C2dac@C2d1e@build-letrec* '#f C46cc@lex* C46e4@rhs* (C310f@build-exports C46f9@global* C46e2@init*)) (map C2da5@C2c75@build-global-define (map cdr C46f9@global*))))) C46f4@C46f1 C46f3@C46ef C46f2@C46ed))))) '#f)) (map C2dcc@gen-global C46cc@lex*) (C3111@make-export-subst C46df@exp-name* C46de@exp-id*)))))) (C3079@chi-rhs* C46cb@rhs* C46ce@r C46cd@mr))) (C3065@chi-expr* C46cf@init* C46ce@r C46cd@mr)))) C46db@C46d9 C46da@C46d7)))) C46c3@C46bd C46c2@C46bb C46c1@C46b9 C46c0@C46b7 C46bf@C46b5 C46be@C46b3)))) C46b0@swap)) (lambda () (begin ((lambda (C470e@t) (begin (C46a8@C46a1 C46aa@C46a5) (set! C46aa@C46a5 C470e@t))) (C46a8@C46a1)) ((lambda (C4710@t) (begin (C46a9@C46a3 C46ab@C46a7) (set! C46ab@C46a7 C4710@t))) (C46a9@C46a3)))))) C30af@inv-collector C30b1@vis-collector C469a@rtc C469b@vtc)) (map C4697@wrap C466d@b*) (map C4697@wrap C466b@main-exp*) (C30ad@make-collector) (C30ad@make-collector)))) '#f)) (C30ab@make-top-rib C4691@subst-names C4690@subst-labels))) C468d@C468b C468c@C4689)))) C4686@swap)) (lambda () (begin ((lambda (C4714@t) (begin (C467e@C4677 C4680@C467b) (set! C4680@C467b C4714@t))) (C467e@C4677)) ((lambda (C4716@t) (begin (C467f@C4679 C4681@C467d) (set! C4681@C467d C4716@t))) (C467f@C4679)))))) C30b3@imp-collector C3135@top-level-context C4675@itc '#f))) '#f))) (set! C30bb@core-library-expander (lambda (C4718@e C4719@verify-name) (call-with-values (lambda () (C30a7@parse-library C4718@e)) (lambda (C4724@C471d C4725@C471f C4726@C4721 C4727@C4723) ((lambda (C472c@b* C472d@imp* C472e@exp* C472f@name*) (call-with-values (lambda () (C30a5@parse-library-name C472f@name*)) (lambda (C4738@C4735 C4739@C4737) ((lambda (C473c@ver C473d@name) (begin (C4719@verify-name C473d@name) (call-with-values (lambda () (C30b9@library-body-expander C473d@name C472e@exp* C472d@imp* C472c@b* '#f)) (lambda (C474e@C4741 C474f@C4743 C4750@C4745 C4751@C4747 C4752@C4749 C4753@C474b C4754@C474d) ((lambda (C475c@export-env C475d@export-subst C475e@visit-code C475f@invoke-code C4760@visit-req* C4761@invoke-req* C4762@imp*) (values C473d@name C473c@ver C4762@imp* C4761@invoke-req* C4760@visit-req* C475f@invoke-code C475e@visit-code C475d@export-subst C475c@export-env)) C4754@C474d C4753@C474b C4752@C4749 C4751@C4747 C4750@C4745 C474f@C4743 C474e@C4741))))) C4739@C4737 C4738@C4735)))) C4727@C4723 C4726@C4721 C4725@C471f C4724@C471d))))) (set! C30bd@parse-top-level-program (lambda (C476a@e*) ((lambda (C476c@t) ((lambda (C476e@ls/false) (if (and C476e@ls/false (apply (lambda (C4770@import C4771@imp* C4772@b*) (eq? (C312d@syntax->datum C4770@import) 'import)) C476e@ls/false)) (apply (lambda (C4776@import C4777@imp* C4778@b*) (values C4777@imp* C4778@b*)) C476e@ls/false) ((lambda (C477c@t) ((lambda (C477e@ls/false) (if (and C477e@ls/false (apply (lambda (C4780@import C4781@x C4782@y) (eq? (C312d@syntax->datum C4780@import) 'import)) C477e@ls/false)) (apply (lambda (C4786@import C4787@x C4788@y) (C3127@syntax-violation 'expander '"invalid syntax of top-level program" (C2e3c@syntax-car C476a@e*))) C477e@ls/false) ((lambda (C478c@t) ((lambda (C478e@ls/false) (if C478e@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) C478e@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C478c@t))) (C3047@syntax-dispatch C478c@t '_))) C477c@t))) (C3047@syntax-dispatch C477c@t '((any . any) . any)))) C476c@t))) (C3047@syntax-dispatch C476c@t '((any . each-any) . each-any)))) C476a@e*))) (set! C30bf@top-level-expander (lambda (C4790@e*) (call-with-values (lambda () (C30bd@parse-top-level-program C4790@e*)) (lambda (C4796@C4793 C4797@C4795) ((lambda (C479a@b* C479b@imp*) (call-with-values (lambda () (C30b9@library-body-expander '() '() C479b@imp* C479a@b* '#t)) (lambda (C47ac@C479f C47ad@C47a1 C47ae@C47a3 C47af@C47a5 C47b0@C47a7 C47b1@C47a9 C47b2@C47ab) ((lambda (C47ba@export-env C47bb@export-subst C47bc@visit-code C47bd@invoke-code C47be@visit-req* C47bf@invoke-req* C47c0@imp*) (values C47bf@invoke-req* C47bd@invoke-code)) C47b2@C47ab C47b1@C47a9 C47b0@C47a7 C47af@C47a5 C47ae@C47a3 C47ad@C47a1 C47ac@C479f)))) C4797@C4795 C4796@C4793))))) (set! C30c1@rp (C299e@C287a@make-record-printer 'env (lambda (C47c8@x C47c9@p C47ca@wr) (display '"#<environment>" C47c9@p)))) (set! C30cb@env? (lambda (C47ce@x) (and (simple-struct? C47ce@x) (eq? (simple-struct-name C47ce@x) 'env)))) (set! C30cd@env-names (lambda (C47d0@x) (simple-struct-ref C47d0@x '0))) (set! C30cf@set-env-names! (lambda (C47d2@x C47d3@val) (simple-struct-set! C47d2@x '0 C47d3@val))) (set! C30d1@env-labels (lambda (C47d6@x) (simple-struct-ref C47d6@x '1))) (set! C30d3@set-env-labels! (lambda (C47d8@x C47d9@val) (simple-struct-set! C47d8@x '1 C47d9@val))) (set! C30d5@env-itc (lambda (C47dc@x) (simple-struct-ref C47dc@x '2))) (set! C30d7@set-env-itc! (lambda (C47de@x C47df@val) (simple-struct-set! C47de@x '2 C47df@val))) (set! C30d9@dummy '3) (set! C30db@rp (C299e@C287a@make-record-printer 'interaction-env (lambda (C47e2@x C47e3@p C47e4@wr) (display '"#<environment>" C47e3@p)))) (set! C30e5@interaction-env? (lambda (C47e8@x) (and (simple-struct? C47e8@x) (eq? (simple-struct-name C47e8@x) 'interaction-env)))) (set! C30e7@interaction-env-rib (lambda (C47ea@x) (simple-struct-ref C47ea@x '0))) (set! C30e9@set-interaction-env-rib! (lambda (C47ec@x C47ed@val) (simple-struct-set! C47ec@x '0 C47ed@val))) (set! C30eb@interaction-env-r (lambda (C47f0@x) (simple-struct-ref C47f0@x '1))) (set! C30ed@set-interaction-env-r! (lambda (C47f2@x C47f3@val) (simple-struct-set! C47f2@x '1 C47f3@val))) (set! C30ef@interaction-env-locs (lambda (C47f6@x) (simple-struct-ref C47f6@x '2))) (set! C30f1@set-interaction-env-locs! (lambda (C47f8@x C47f9@val) (simple-struct-set! C47f8@x '2 C47f9@val))) (set! C30f3@dummy '3) (set! C30f5@interaction-environment-symbols (lambda () (C30fd@environment-symbols (C3133@interaction-environment)))) (set! C30f7@environment-bindings (lambda (C47fc@e) (vector->list (vector-map (lambda (C47fe@name C47ff@label) (C30f9@parse-binding (cons C47fe@name (C2c6c@C2ab9@imported-label->binding C47ff@label)))) (C30cd@env-names C47fc@e) (C30d1@env-labels C47fc@e))))) (set! C30f9@parse-binding (lambda (C4802@b) (cons (car C4802@b) ((lambda (C4804@t) (if (memv C4804@t '(core-prim global)) 'procedure (if (memv C4804@t '(core-macro macro global-macro)) 'syntax (if (memv C4804@t '($core-rtd)) 'record (if (eq? (car C4802@b) (cadr C4802@b)) 'syntax 'unknown))))) (cadr C4802@b))))) (set! C30fb@environment? (lambda (C4806@x) (or (C30cb@env? C4806@x) (C30e5@interaction-env? C4806@x)))) (set! C30fd@environment-symbols (lambda (C4808@x) (if (C30cb@env? C4808@x) (vector->list (C30cd@env-names C4808@x)) (if (C30e5@interaction-env? C4808@x) (map values (C2de0@rib-sym* (C30e7@interaction-env-rib C4808@x))) (assertion-violation 'environment-symbols '"not an environment" C4808@x))))) (set! C30ff@environment (lambda C480a@imp* ((lambda (C480c@itc) ((lambda (C4812@C480f C4813@C4811) ((lambda (C4816@swap) (dynamic-wind C4816@swap (lambda () (call-with-values (lambda () (C30a9@parse-import-spec* C480a@imp*)) (lambda (C481c@C4819 C481d@C481b) ((lambda (C4820@subst-labels C4821@subst-names) (make-simple-struct 'env '4 (list C4821@subst-names C4820@subst-labels C480c@itc))) C481d@C481b C481c@C4819)))) C4816@swap)) (lambda () ((lambda (C4824@t) (begin (C4812@C480f C4813@C4811) (set! C4813@C4811 C4824@t))) (C4812@C480f))))) C30b3@imp-collector C480c@itc)) (C30ad@make-collector)))) (set! C3101@null-environment (lambda (C4826@n) (begin (if (not (eqv? C4826@n '5)) (assertion-violation 'null-environment '"not 5" C4826@n) (void)) (C30ff@environment '(psyntax null-environment-5))))) (set! C3103@scheme-report-environment (lambda (C4828@n) (begin (if (not (eqv? C4828@n '5)) (assertion-violation 'scheme-report-environment '"not 5" C4828@n) (void)) (C30ff@environment '(psyntax scheme-report-environment-5))))) (set! C3105@expand (lambda (C482a@x C482b@env) (if (C30cb@env? C482b@env) ((lambda (C482e@rib) ((lambda (C4830@x C4831@itc C4832@rtc C4833@vtc) ((lambda (C4838@x) (begin (C2dfe@seal-rib! C482e@rib) (values C4838@x (C4832@rtc)))) ((lambda (C484a@C483b C484b@C483d C484c@C483f C484d@C4841 C484e@C4843 C484f@C4845 C4850@C4847 C4851@C4849) ((lambda (C485a@swap) (dynamic-wind C485a@swap (lambda () (C3069@chi-expr C4830@x '() '())) C485a@swap)) (lambda () (begin ((lambda (C485c@t) (begin (C484a@C483b C484e@C4843) (set! C484e@C4843 C485c@t))) (C484a@C483b)) ((lambda (C485e@t) (begin (C484b@C483d C484f@C4845) (set! C484f@C4845 C485e@t))) (C484b@C483d)) ((lambda (C4860@t) (begin (C484c@C483f C4850@C4847) (set! C4850@C4847 C4860@t))) (C484c@C483f)) ((lambda (C4862@t) (begin (C484d@C4841 C4851@C4849) (set! C4851@C4849 C4862@t))) (C484d@C4841)))))) C3135@top-level-context C30af@inv-collector C30b1@vis-collector C30b3@imp-collector '#f C4832@rtc C4833@vtc C4831@itc))) (make-simple-struct 'stx '5 (list C482a@x C2dc6@top-mark* (list C482e@rib) '())) (C30d5@env-itc C482b@env) (C30ad@make-collector) (C30ad@make-collector))) (C30ab@make-top-rib (C30cd@env-names C482b@env) (C30d1@env-labels C482b@env))) (if (C30e5@interaction-env? C482b@env) ((lambda (C4864@rib C4865@r C4866@rtc) ((lambda (C486a@x) (call-with-values (lambda () ((lambda (C4880@C4871 C4881@C4873 C4882@C4875 C4883@C4877 C4884@C4879 C4885@C487b C4886@C487d C4887@C487f) ((lambda (C4890@swap) (dynamic-wind C4890@swap (lambda () (C30b7@chi-interaction-expr C486a@x C4864@rib C4865@r)) C4890@swap)) (lambda () (begin ((lambda (C4892@t) (begin (C4880@C4871 C4884@C4879) (set! C4884@C4879 C4892@t))) (C4880@C4871)) ((lambda (C4894@t) (begin (C4881@C4873 C4885@C487b) (set! C4885@C487b C4894@t))) (C4881@C4873)) ((lambda (C4896@t) (begin (C4882@C4875 C4886@C487d) (set! C4886@C487d C4896@t))) (C4882@C4875)) ((lambda (C4898@t) (begin (C4883@C4877 C4887@C487f) (set! C4887@C487f C4898@t))) (C4883@C4877)))))) C3135@top-level-context C30af@inv-collector C30b1@vis-collector C30b3@imp-collector C482b@env C4866@rtc (C30ad@make-collector) (C30ad@make-collector))) (lambda (C489a@C486d C489b@C486f) ((lambda (C489e@r^ C489f@e) (begin (C30ed@set-interaction-env-r! C482b@env C489e@r^) (values C489f@e (C4866@rtc)))) C489b@C486f C489a@C486d)))) (make-simple-struct 'stx '5 (list C482a@x C2dc6@top-mark* (list C4864@rib) '())))) (C30e7@interaction-env-rib C482b@env) (C30eb@interaction-env-r C482b@env) (C30ad@make-collector)) (assertion-violation 'expand '"not an environment" C482b@env))))) (set! C3107@eval (lambda (C48a2@x C48a3@env) (begin (if (not (C30fb@environment? C48a3@env)) (error 'eval '"not an environment" C48a3@env) (void)) (call-with-values (lambda () (C3105@expand C48a2@x C48a3@env)) (lambda (C48aa@C48a7 C48ab@C48a9) ((lambda (C48ae@invoke-req* C48af@x) (begin (for-each C2c6d@C2abb@invoke-library C48ae@invoke-req*) (eval-core (C29f7@C29af@expanded->core C48af@x)))) C48ab@C48a9 C48aa@C48a7)))))) (set! C3109@library-expander (lambda C4920 ((lambda (C4921) (if (= C4921 '3) (apply (lambda (C48b2@x C48b3@filename C48b4@verify-name) ((lambda (C48b9@build-visit-code C48bb@visit!) (begin (set! C48b9@build-visit-code (lambda (C490e@macro*) (if (null? C490e@macro*) (C2daa@C2d1a@build-void) (C2da9@C2d18@build-sequence '#f (map (lambda (C4910@x) ((lambda (C4912@loc C4913@src) (list 'set! C4912@loc C4913@src)) (car C4910@x) (cddr C4910@x))) C490e@macro*))))) (set! C48bb@visit! (lambda (C4906@macro*) (for-each (lambda (C4908@x) ((lambda (C490a@loc C490b@proc) (set-symbol-value! C490a@loc C490b@proc)) (car C4908@x) (cadr C4908@x))) C4906@macro*))) (call-with-values (lambda () (C30bb@core-library-expander C48b2@x C48b4@verify-name)) (lambda (C48ce@C48bd C48cf@C48bf C48d0@C48c1 C48d1@C48c3 C48d2@C48c5 C48d3@C48c7 C48d4@C48c9 C48d5@C48cb C48d6@C48cd) ((lambda (C48e0@export-env C48e1@export-subst C48e2@macro* C48e3@invoke-code C48e4@vis* C48e5@inv* C48e6@imp* C48e7@ver C48e8@name) ((lambda (C48f2@id C48f3@name C48f4@ver C48f5@imp* C48f6@vis* C48f7@inv* C48f8@visit-proc C48f9@invoke-proc C48fa@visit-code C48fb@invoke-code) (begin (C2c6b@C2ab7@install-library C48f2@id C48f3@name C48f4@ver C48f5@imp* C48f6@vis* C48f7@inv* C48e1@export-subst C48e0@export-env C48f8@visit-proc C48f9@invoke-proc C48fa@visit-code C48fb@invoke-code '#t C48b3@filename) (values C48f2@id C48f3@name C48f4@ver C48f5@imp* C48f6@vis* C48f7@inv* C48fb@invoke-code C48fa@visit-code C48e1@export-subst C48e0@export-env))) (gensym) C48e8@name C48e7@ver (map C2c71@C2ac3@library-spec C48e6@imp*) (map C2c71@C2ac3@library-spec C48e4@vis*) (map C2c71@C2ac3@library-spec C48e5@inv*) (lambda () (C48bb@visit! C48e2@macro*)) (lambda () (eval-core (C29f7@C29af@expanded->core C48e3@invoke-code))) (C48b9@build-visit-code C48e2@macro*) C48e3@invoke-code)) C48d6@C48cd C48d5@C48cb C48d4@C48c9 C48d3@C48c7 C48d2@C48c5 C48d1@C48c3 C48d0@C48c1 C48cf@C48bf C48ce@C48bd))))) '#f '#f)) C4920) (if (= C4921 '2) (apply (lambda (C4916@x C4917@filename) (C3109@library-expander C4916@x C4917@filename (lambda (C491a@x) (values)))) C4920) (if (= C4921 '1) (apply (lambda (C491c@x) (C3109@library-expander C491c@x '#f (lambda (C491e@x) (values)))) C4920) (error 'apply '"invalid arg count"))))) (length C4920)))) (set! C310b@boot-library-expand (lambda (C4922@x) (call-with-values (lambda () (C3109@library-expander C4922@x)) (lambda (C4938@C4925 C4939@C4927 C493a@C4929 C493b@C492b C493c@C492d C493d@C492f C493e@C4931 C493f@C4933 C4940@C4935 C4941@C4937) ((lambda (C494c@export-env C494d@export-subst C494e@visit-code C494f@invoke-code C4950@inv* C4951@vis* C4952@imp* C4953@ver C4954@name C4955@id) (values C4954@name C494f@invoke-code C494d@export-subst C494c@export-env)) C4941@C4937 C4940@C4935 C493f@C4933 C493e@C4931 C493d@C492f C493c@C492d C493b@C492b C493a@C4929 C4939@C4927 C4938@C4925))))) (set! C310d@rev-map-append (lambda (C4960@f C4961@ls C4962@ac) (if (null? C4961@ls) C4962@ac (C310d@rev-map-append C4960@f (cdr C4961@ls) (cons (C4960@f (car C4961@ls)) C4962@ac))))) (set! C310f@build-exports (lambda (C4966@lex*+loc* C4967@init*) (C2da9@C2d18@build-sequence '#f (cons (C2daa@C2d1a@build-void) (C310d@rev-map-append (lambda (C496a@x) (list 'set! (cdr C496a@x) (car C496a@x))) C4966@lex*+loc* C4967@init*))))) (set! C3111@make-export-subst (lambda (C496c@name* C496d@id*) (map (lambda (C4970@name C4971@id) ((lambda (C4974@label) (begin (if (not C4974@label) (C3127@syntax-violation '#f '"cannot export unbound identifier" C4971@id) (void)) (cons C4970@name C4974@label))) (C2e58@id->label C4971@id))) C496c@name* C496d@id*))) (set! C3113@make-export-env/macros (lambda (C4976@lex* C4977@loc* C4978@r) ((lambda (C497d@lookup) (begin (set! C497d@lookup (lambda (C499a@x) ((letrec ((C499c@f (lambda (C499e@x C499f@lex* C49a0@loc*) (if (pair? C499f@lex*) (if (eq? C499e@x (car C499f@lex*)) (car C49a0@loc*) (C499c@f C499e@x (cdr C499f@lex*) (cdr C49a0@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) C499c@f) C499a@x C4976@lex* C4977@loc*))) ((letrec ((C497e@f (lambda (C4980@r C4981@env C4982@global* C4983@macro*) (if (null? C4980@r) (values C4981@env C4982@global* C4983@macro*) ((lambda (C4988@x) ((lambda (C498a@label C498b@b) ((lambda (C498e@t) (if (memv C498e@t '(lexical)) ((lambda (C4990@v) ((lambda (C4992@loc C4993@type) (C497e@f (cdr C4980@r) (cons (cons* C498a@label C4993@type C4992@loc) C4981@env) (cons (cons (C2fd3@lexical-var C4990@v) C4992@loc) C4982@global*) C4983@macro*)) (C497d@lookup (C2fd3@lexical-var C4990@v)) (if (C2fd5@lexical-mutable? C4990@v) 'mutable 'global))) (C2e60@binding-value C498b@b)) (if (memv C498e@t '(local-macro)) ((lambda (C4996@loc) (C497e@f (cdr C4980@r) (cons (cons* C498a@label 'global-macro C4996@loc) C4981@env) C4982@global* (cons (cons C4996@loc (C2e60@binding-value C498b@b)) C4983@macro*))) (gensym)) (if (memv C498e@t '(local-macro!)) ((lambda (C4998@loc) (C497e@f (cdr C4980@r) (cons (cons* C498a@label 'global-macro! C4998@loc) C4981@env) C4982@global* (cons (cons C4998@loc (C2e60@binding-value C498b@b)) C4983@macro*))) (gensym)) (if (memv C498e@t '($rtd $module)) (C497e@f (cdr C4980@r) (cons C4988@x C4981@env) C4982@global* C4983@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (C2e5e@binding-type C498b@b) (C2e60@binding-value C498b@b))))))) (C2e5e@binding-type C498b@b))) (car C4988@x) (cdr C4988@x))) (car C4980@r)))))) C497e@f) C4978@r '() '() '()))) '#f))) (set! C3115@generate-temporaries (lambda (C49a4@ls) ((lambda (C49a6@t) ((lambda (C49a8@ls/false) (if C49a8@ls/false (apply (lambda (C49aa@ls) (map (lambda (C49ac@x) (make-simple-struct 'stx '5 (list ((lambda (C49ae@x) (if (or (symbol? C49ae@x) (string? C49ae@x)) (gensym C49ae@x) (gensym 't))) (C312d@syntax->datum C49ac@x)) C2dc6@top-mark* '() '()))) C49aa@ls)) C49a8@ls/false) ((lambda (C49b0@t) ((lambda (C49b2@ls/false) (if C49b2@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) C49b2@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C49b0@t))) (C3047@syntax-dispatch C49b0@t '_))) C49a6@t))) (C3047@syntax-dispatch C49a6@t 'each-any))) C49a4@ls))) (set! C3117@free-identifier=? (lambda (C49b4@x C49b5@y) (if (C2e42@id? C49b4@x) (if (C2e42@id? C49b5@y) (C2e48@free-id=? C49b4@x C49b5@y) (assertion-violation 'free-identifier=? '"not an identifier" C49b5@y)) (assertion-violation 'free-identifier=? '"not an identifier" C49b4@x)))) (set! C3119@bound-identifier=? (lambda (C49b8@x C49b9@y) (if (C2e42@id? C49b8@x) (if (C2e42@id? C49b9@y) (C2e46@bound-id=? C49b8@x C49b9@y) (assertion-violation 'bound-identifier=? '"not an identifier" C49b9@y)) (assertion-violation 'bound-identifier=? '"not an identifier" C49b8@x)))) (set! C311b@make-source-condition (lambda (C49bc@x) ((lambda (C49c6@C49c1 C49c8@C49c3 C49ca@C49c2 C49cd@C49c0 C49cf@make-source-condition C49d1@C49be C49d3@C49bf C49d5@source-condition? C49d7@source-filename C49d9@source-character) (begin (set! C49c6@C49c1 (make-record-type-descriptor '&source-information C4e16@C4b5d@&condition-rtd 'C49c4 '#f '#f '#((immutable file-name) (immutable character)))) (set! C49c8@C49c3 '#f) (set! C49ca@C49c2 (make-record-constructor-descriptor C49c6@C49c1 C4e17@C4b5f@&condition-rcd C49c8@C49c3)) (set! C49cd@C49c0 (record-predicate C49c6@C49c1)) (set! C49cf@make-source-condition (record-constructor C49ca@C49c2)) (set! C49d1@C49be (record-accessor C49c6@C49c1 '0)) (set! C49d3@C49bf (record-accessor C49c6@C49c1 '1)) (set! C49d5@source-condition? (condition-predicate C49c6@C49c1)) (set! C49d7@source-filename (condition-accessor C49c6@C49c1 C49d1@C49be)) (set! C49d9@source-character (condition-accessor C49c6@C49c1 C49d3@C49bf)) (if (pair? C49bc@x) (C49cf@make-source-condition (car C49bc@x) (cdr C49bc@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! C311d@extract-position-condition (lambda (C49da@x) (C311b@make-source-condition (C311f@expression-position C49da@x)))) (set! C311f@expression-position (lambda (C49dc@x) (and (C2e0e@stx? C49dc@x) ((lambda (C49de@x) (and (C2996@C286a@annotation? C49de@x) (C2997@C286c@annotation-source C49de@x))) (C2e10@stx-expr C49dc@x))))) (set! C3121@assertion-error (lambda (C49e0@expr C49e1@pos) (raise (condition (C4e46@C4c21@make-assertion-violation) (C4e58@C4c53@make-who-condition 'assert) (C4e1c@C4bb4@make-message-condition '"assertion failed") (C4e4e@C4c38@make-irritants-condition (list C49e0@expr)) (C311b@make-source-condition C49e1@pos))))) (set! C3123@syntax-error (lambda (C49e4@x . C49e6@args) (begin (if (not (for-all string? C49e6@args)) (assertion-violation 'syntax-error '"invalid argument" C49e6@args) (void)) (raise (condition (C4e1c@C4bb4@make-message-condition (if (null? C49e6@args) '"invalid syntax" (apply string-append C49e6@args))) (C4e7a@C4caf@make-syntax-violation (C312d@syntax->datum C49e4@x) '#f) (C311d@extract-position-condition C49e4@x)))))) (set! C3125@syntax-violation* (lambda (C49e8@who C49e9@msg C49ea@form C49eb@condition-object) (begin (if (not (string? C49e9@msg)) (assertion-violation 'syntax-violation '"message is not a string" C49e9@msg) (void)) ((lambda (C49f0@who) (raise (condition (if C49f0@who (C4e58@C4c53@make-who-condition C49f0@who) (condition)) (C4e1c@C4bb4@make-message-condition C49e9@msg) C49eb@condition-object (C311d@extract-position-condition C49ea@form)))) (if (or (string? C49e8@who) (symbol? C49e8@who)) C49e8@who (if (not C49e8@who) ((lambda (C49f2@t) ((lambda (C49f4@ls/false) (if (and C49f4@ls/false (apply (lambda (C49f6@id) (C2e42@id? C49f6@id)) C49f4@ls/false)) (apply (lambda (C49f8@id) (C312d@syntax->datum C49f8@id)) C49f4@ls/false) ((lambda (C49fa@t) ((lambda (C49fc@ls/false) (if (and C49fc@ls/false (apply (lambda (C49fe@id C49ff@rest) (C2e42@id? C49fe@id)) C49fc@ls/false)) (apply (lambda (C4a02@id C4a03@rest) (C312d@syntax->datum C4a02@id)) C49fc@ls/false) ((lambda (C4a06@t) ((lambda (C4a08@ls/false) (if C4a08@ls/false (apply (lambda () '#f) C4a08@ls/false) (C3127@syntax-violation '#f '"invalid syntax" C4a06@t))) (C3047@syntax-dispatch C4a06@t '_))) C49fa@t))) (C3047@syntax-dispatch C49fa@t '(any . any)))) C49f2@t))) (C3047@syntax-dispatch C49f2@t 'any))) C49ea@form) (assertion-violation 'syntax-violation '"invalid who argument" C49e8@who))))))) (set! C3127@syntax-violation (lambda C4a18 ((lambda (C4a19) (if (= C4a19 '3) (apply (lambda (C4a0a@who C4a0b@msg C4a0c@form) (C3127@syntax-violation C4a0a@who C4a0b@msg C4a0c@form '#f)) C4a18) (if (= C4a19 '4) (apply (lambda (C4a10@who C4a11@msg C4a12@form C4a13@subform) (C3125@syntax-violation* C4a10@who C4a11@msg C4a12@form (C4e7a@C4caf@make-syntax-violation (C312d@syntax->datum C4a12@form) (C312d@syntax->datum C4a13@subform)))) C4a18) (error 'apply '"invalid arg count")))) (length C4a18)))) (set! C3129@identifier? (lambda (C4a1a@x) (C2e42@id? C4a1a@x))) (set! C312b@datum->syntax (lambda (C4a1c@id C4a1d@datum) (if (C2e42@id? C4a1c@id) (C2e22@datum->stx C4a1c@id C4a1d@datum) (assertion-violation 'datum->syntax '"not an identifier" C4a1c@id)))) (set! C312d@syntax->datum (lambda (C4a20@x) (C2e56@stx->datum C4a20@x))) (set! C312f@compile-r6rs-top-level (lambda (C4a22@x*) (call-with-values (lambda () (C30bf@top-level-expander C4a22@x*)) (lambda (C4a28@C4a25 C4a29@C4a27) ((lambda (C4a2c@invoke-code C4a2d@lib*) (lambda () (begin (for-each C2c6d@C2abb@invoke-library C4a2d@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (C29f7@C29af@expanded->core C4a2c@invoke-code)) (void)) (eval-core (C29f7@C29af@expanded->core C4a2c@invoke-code))))) C4a29@C4a27 C4a28@C4a25))))) (set! C3131@pre-compile-r6rs-top-level (lambda (C4a30@x*) (call-with-values (lambda () (C30bf@top-level-expander C4a30@x*)) (lambda (C4a36@C4a33 C4a37@C4a35) ((lambda (C4a3a@invoke-code C4a3b@lib*) (begin (for-each C2c6d@C2abb@invoke-library C4a3b@lib*) (C299f@C287c@compile-core (C29f7@C29af@expanded->core C4a3a@invoke-code)))) C4a37@C4a35 C4a36@C4a33))))) (set! C3133@interaction-environment ((lambda (C4a3e@the-env) (lambda () (or C4a3e@the-env ((lambda (C4a40@lib C4a41@rib) (begin ((lambda (C4a44@subst) (begin (C2de2@set-rib-sym*! C4a41@rib (map car C4a44@subst)) (C2de6@set-rib-mark**! C4a41@rib (map (lambda (C4a46@x) C2dc6@top-mark*) C4a44@subst)) (C2dea@set-rib-label*! C4a41@rib (map cdr C4a44@subst)))) (C2c48@C2a71@library-subst C4a40@lib)) ((lambda (C4a48@env) (begin (set! C4a3e@the-env C4a48@env) C4a48@env)) (make-simple-struct 'interaction-env '4 (list C4a41@rib '() '()))))) (C2c66@C2aad@find-library-by-name '(mosh interaction)) (C2df6@make-empty-rib))))) '#f)) (set! C3135@top-level-context (C29a1@C2880@make-parameter '#f)) (begin (set! C4b43@C3135@top-level-context C3135@top-level-context) (set! C4b42@C3133@interaction-environment C3133@interaction-environment) (set! C4b41@C3131@pre-compile-r6rs-top-level C3131@pre-compile-r6rs-top-level) (set! C4b40@C312f@compile-r6rs-top-level C312f@compile-r6rs-top-level) (set! C4b3f@C312d@syntax->datum C312d@syntax->datum) (set! C4b3e@C312b@datum->syntax C312b@datum->syntax) (set! C4b3d@C3129@identifier? C3129@identifier?) (set! C4b3c@C3127@syntax-violation C3127@syntax-violation) (set! C4b3b@C3125@syntax-violation* C3125@syntax-violation*) (set! C4b3a@C3123@syntax-error C3123@syntax-error) (set! C4b39@C3121@assertion-error C3121@assertion-error) (set! C4b38@C311f@expression-position C311f@expression-position) (set! C4b37@C311d@extract-position-condition C311d@extract-position-condition) (set! C4b36@C311b@make-source-condition C311b@make-source-condition) (set! C4b35@C3119@bound-identifier=? C3119@bound-identifier=?) (set! C4b34@C3117@free-identifier=? C3117@free-identifier=?) (set! C4b33@C3115@generate-temporaries C3115@generate-temporaries) (set! C4b32@C3113@make-export-env/macros C3113@make-export-env/macros) (set! C4b31@C3111@make-export-subst C3111@make-export-subst) (set! C4b30@C310f@build-exports C310f@build-exports) (set! C4b2f@C310d@rev-map-append C310d@rev-map-append) (set! C4b2e@C310b@boot-library-expand C310b@boot-library-expand) (set! C4b2d@C3109@library-expander C3109@library-expander) (set! C4b2c@C3107@eval C3107@eval) (set! C4b2b@C3105@expand C3105@expand) (set! C4b2a@C3103@scheme-report-environment C3103@scheme-report-environment) (set! C4b29@C3101@null-environment C3101@null-environment) (set! C4b28@C30ff@environment C30ff@environment) (set! C4b27@C30fd@environment-symbols C30fd@environment-symbols) (set! C4b26@C30fb@environment? C30fb@environment?) (set! C4b25@C30f9@parse-binding C30f9@parse-binding) (set! C4b24@C30f7@environment-bindings C30f7@environment-bindings) (set! C4b23@C30f5@interaction-environment-symbols C30f5@interaction-environment-symbols) (set! C4b22@C30f3@dummy C30f3@dummy) (set! C4b21@C30f1@set-interaction-env-locs! C30f1@set-interaction-env-locs!) (set! C4b20@C30ef@interaction-env-locs C30ef@interaction-env-locs) (set! C4b1f@C30ed@set-interaction-env-r! C30ed@set-interaction-env-r!) (set! C4b1e@C30eb@interaction-env-r C30eb@interaction-env-r) (set! C4b1d@C30e9@set-interaction-env-rib! C30e9@set-interaction-env-rib!) (set! C4b1c@C30e7@interaction-env-rib C30e7@interaction-env-rib) (set! C4b1b@C30e5@interaction-env? C30e5@interaction-env?) (set! C4b1a@C30db@rp C30db@rp) (set! C4b19@C30d9@dummy C30d9@dummy) (set! C4b18@C30d7@set-env-itc! C30d7@set-env-itc!) (set! C4b17@C30d5@env-itc C30d5@env-itc) (set! C4b16@C30d3@set-env-labels! C30d3@set-env-labels!) (set! C4b15@C30d1@env-labels C30d1@env-labels) (set! C4b14@C30cf@set-env-names! C30cf@set-env-names!) (set! C4b13@C30cd@env-names C30cd@env-names) (set! C4b12@C30cb@env? C30cb@env?) (set! C4b11@C30c1@rp C30c1@rp) (set! C4b10@C30bf@top-level-expander C30bf@top-level-expander) (set! C4b0f@C30bd@parse-top-level-program C30bd@parse-top-level-program) (set! C4b0e@C30bb@core-library-expander C30bb@core-library-expander) (set! C4b0d@C30b9@library-body-expander C30b9@library-body-expander) (set! C4b0c@C30b7@chi-interaction-expr C30b7@chi-interaction-expr) (set! C4b0b@C30b5@chi-library-internal C30b5@chi-library-internal) (set! C4b0a@C30b3@imp-collector C30b3@imp-collector) (set! C4b09@C30b1@vis-collector C30b1@vis-collector) (set! C4b08@C30af@inv-collector C30af@inv-collector) (set! C4b07@C30ad@make-collector C30ad@make-collector) (set! C4b06@C30ab@make-top-rib C30ab@make-top-rib) (set! C4b05@C30a9@parse-import-spec* C30a9@parse-import-spec*) (set! C4b04@C30a7@parse-library C30a7@parse-library) (set! C4b03@C30a5@parse-library-name C30a5@parse-library-name) (set! C4b02@C30a3@parse-exports C30a3@parse-exports) (set! C4b01@C30a1@expand-transformer C30a1@expand-transformer) (set! C4b00@C309f@chi-body* C309f@chi-body*) (set! C4aff@C309d@chi-internal-module C309d@chi-internal-module) (set! C4afe@C309b@module-interface-exp-id* C309b@module-interface-exp-id*) (set! C4afd@C3099@dummy C3099@dummy) (set! C4afc@C3097@set-module-interface-exp-lab-vec! C3097@set-module-interface-exp-lab-vec!) (set! C4afb@C3095@module-interface-exp-lab-vec C3095@module-interface-exp-lab-vec) (set! C4afa@C3093@set-module-interface-exp-id-vec! C3093@set-module-interface-exp-id-vec!) (set! C4af9@C3091@module-interface-exp-id-vec C3091@module-interface-exp-id-vec) (set! C4af8@C308f@set-module-interface-first-mark! C308f@set-module-interface-first-mark!) (set! C4af7@C308d@module-interface-first-mark C308d@module-interface-first-mark) (set! C4af6@C308b@module-interface? C308b@module-interface?) (set! C4af5@C3081@parse-module C3081@parse-module) (set! C4af4@C307f@chi-internal C307f@chi-internal) (set! C4af3@C307d@find-dups C307d@find-dups) (set! C4af2@C307b@find-bound=? C307b@find-bound=?) (set! C4af1@C3079@chi-rhs* C3079@chi-rhs*) (set! C4af0@C3077@expand-interaction-rhs*/init* C3077@expand-interaction-rhs*/init*) (set! C4aef@C3075@chi-rhs C3075@chi-rhs) (set! C4aee@C3073@chi-defun C3073@chi-defun) (set! C4aed@C3071@chi-lambda-clause* C3071@chi-lambda-clause*) (set! C4aec@C306f@chi-lambda-clause C306f@chi-lambda-clause) (set! C4aeb@C306d@verify-formals C306d@verify-formals) (set! C4aea@C306b@chi-set! C306b@chi-set!) (set! C4ae9@C3069@chi-expr C3069@chi-expr) (set! C4ae8@C3067@chi-application C3067@chi-application) (set! C4ae7@C3065@chi-expr* C3065@chi-expr*) (set! C4ae6@C3063@chi-global-macro C3063@chi-global-macro) (set! C4ae5@C3061@chi-local-macro C3061@chi-local-macro) (set! C4ae4@C305f@chi-macro C305f@chi-macro) (set! C4ae3@C305d@do-macro-call C305d@do-macro-call) (set! C4ae2@C305b@local-macro-transformer C305b@local-macro-transformer) (set! C4ae1@C3059@macro-transformer C3059@macro-transformer) (set! C4ae0@C3057@symbol-macro C3057@symbol-macro) (set! C4adf@C3055@core-macro-transformer C3055@core-macro-transformer) (set! C4ade@C3053@syntax-transformer C3053@syntax-transformer) (set! C4add@C3051@ellipsis-map C3051@ellipsis-map) (set! C4adc@C304f@syntax-case-transformer C304f@syntax-case-transformer) (set! C4adb@C304d@verify-literals C304d@verify-literals) (set! C4ada@C304b@underscore? C304b@underscore?) (set! C4ad9@C3049@ellipsis? C3049@ellipsis?) (set! C4ad8@C3047@syntax-dispatch C3047@syntax-dispatch) (set! C4ad7@C3045@convert-pattern C3045@convert-pattern) (set! C4ad6@C3043@foreign-call-transformer C3043@foreign-call-transformer) (set! C4ad5@C3041@parameterize-macro C3041@parameterize-macro) (set! C4ad4@C303f@incorrect-usage-macro C303f@incorrect-usage-macro) (set! C4ad3@C303d@define-condition-type-macro C303d@define-condition-type-macro) (set! C4ad2@C303b@define-record-type-macro C303b@define-record-type-macro) (set! C4ad1@C3039@define-struct-macro C3039@define-struct-macro) (set! C4ad0@C3037@quasisyntax-macro C3037@quasisyntax-macro) (set! C4acf@C3035@quasiquote-macro C3035@quasiquote-macro) (set! C4ace@C3033@syntax-rules-macro C3033@syntax-rules-macro) (set! C4acd@C3031@include-into-macro C3031@include-into-macro) (set! C4acc@C302f@include-macro C302f@include-macro) (set! C4acb@C302d@do-include C302d@do-include) (set! C4aca@C302b@cond-macro C302b@cond-macro) (set! C4ac9@C3029@and-macro C3029@and-macro) (set! C4ac8@C3027@or-macro C3027@or-macro) (set! C4ac7@C3025@let*-macro C3025@let*-macro) (set! C4ac6@C3023@do-macro C3023@do-macro) (set! C4ac5@C3021@identifier-syntax-macro C3021@identifier-syntax-macro) (set! C4ac4@C301f@endianness-macro C301f@endianness-macro) (set! C4ac3@C301d@assert-macro C301d@assert-macro) (set! C4ac2@C301b@delay-macro C301b@delay-macro) (set! C4ac1@C3019@time-macro C3019@time-macro) (set! C4ac0@C3017@define-enumeration-macro C3017@define-enumeration-macro) (set! C4abf@C3015@guard-macro C3015@guard-macro) (set! C4abe@C3013@trace-letrec-syntax-macro C3013@trace-letrec-syntax-macro) (set! C4abd@C3011@trace-let-syntax-macro C3011@trace-let-syntax-macro) (set! C4abc@C300f@trace-let/rec-syntax C300f@trace-let/rec-syntax) (set! C4abb@C300d@trace-define-syntax-macro C300d@trace-define-syntax-macro) (set! C4aba@C300b@trace-define-macro C300b@trace-define-macro) (set! C4ab9@C3009@trace-lambda-macro C3009@trace-lambda-macro) (set! C4ab8@C3007@let*-values-macro C3007@let*-values-macro) (set! C4ab7@C3005@let-values-macro C3005@let-values-macro) (set! C4ab6@C3003@let-macro C3003@let-macro) (set! C4ab5@C3001@invalid-fmls-error C3001@invalid-fmls-error) (set! C4ab4@C2fff@with-syntax-macro C2fff@with-syntax-macro) (set! C4ab3@C2ffd@bless C2ffd@bless) (set! C4ab2@C2ffb@lambda-transformer C2ffb@lambda-transformer) (set! C4ab1@C2ff9@case-lambda-transformer C2ff9@case-lambda-transformer) (set! C4ab0@C2ff7@quote-transformer C2ff7@quote-transformer) (set! C4aaf@C2ff5@case-macro C2ff5@case-macro) (set! C4aae@C2ff3@or-transformer C2ff3@or-transformer) (set! C4aad@C2ff1@and-transformer C2ff1@and-transformer) (set! C4aac@C2fef@if-transformer C2fef@if-transformer) (set! C4aab@C2fed@unless-macro C2fed@unless-macro) (set! C4aaa@C2feb@when-macro C2feb@when-macro) (set! C4aa9@C2fe9@record-constructor-descriptor-transformer C2fe9@record-constructor-descriptor-transformer) (set! C4aa8@C2fe7@record-type-descriptor-transformer C2fe7@record-type-descriptor-transformer) (set! C4aa7@C2fe5@type-descriptor-transformer C2fe5@type-descriptor-transformer) (set! C4aa6@C2fe3@fluid-let-syntax-transformer C2fe3@fluid-let-syntax-transformer) (set! C4aa5@C2fe1@letrec*-transformer C2fe1@letrec*-transformer) (set! C4aa4@C2fdf@letrec-transformer C2fdf@letrec-transformer) (set! C4aa3@C2fdd@letrec-helper C2fdd@letrec-helper) (set! C4aa2@C2fdb@add-lexicals C2fdb@add-lexicals) (set! C4aa1@C2fd9@add-lexical C2fd9@add-lexical) (set! C4aa0@C2fd7@set-lexical-mutable! C2fd7@set-lexical-mutable!) (set! C4a9f@C2fd5@lexical-mutable? C2fd5@lexical-mutable?) (set! C4a9e@C2fd3@lexical-var C2fd3@lexical-var) (set! C4a9d@C2fd1@scheme-stx C2fd1@scheme-stx) (set! C4a9c@C2fcf@scheme-stx-hashtable C2fcf@scheme-stx-hashtable) (set! C4a9b@C2fcd@parse-define-syntax C2fcd@parse-define-syntax) (set! C4a9a@C2fcb@parse-define C2fcb@parse-define) (set! C4a99@C2e7a@make-eval-transformer C2e7a@make-eval-transformer) (set! C4a98@C2e78@variable-transformer-procedure C2e78@variable-transformer-procedure) (set! C4a97@C2e76@variable-transformer? C2e76@variable-transformer?) (set! C4a96@C2e74@make-variable-transformer C2e74@make-variable-transformer) (set! C4a95@C2e72@sanitize-binding C2e72@sanitize-binding) (set! C4a94@C2e64@syntax-type C2e64@syntax-type) (set! C4a93@C2e62@raise-unbound-error C2e62@raise-unbound-error) (set! C4a92@C2e60@binding-value C2e60@binding-value) (set! C4a91@C2e5e@binding-type C2e5e@binding-type) (set! C4a90@C2e5c@make-binding C2e5c@make-binding) (set! C4a8f@C2e5a@label->binding C2e5a@label->binding) (set! C4a8e@C2e58@id->label C2e58@id->label) (set! C4a8d@C2e56@stx->datum C2e56@stx->datum) (set! C4a8c@C2e54@strip C2e54@strip) (set! C4a8b@C2e52@strip-annotations C2e52@strip-annotations) (set! C4a8a@C2e50@self-evaluating? C2e50@self-evaluating?) (set! C4a89@C2e4e@bound-id-member? C2e4e@bound-id-member?) (set! C4a88@C2e4c@distinct-bound-ids? C2e4c@distinct-bound-ids?) (set! C4a87@C2e4a@valid-bound-ids? C2e4a@valid-bound-ids?) (set! C4a86@C2e48@free-id=? C2e48@free-id=?) (set! C4a85@C2e46@bound-id=? C2e46@bound-id=?) (set! C4a84@C2e44@id->sym C2e44@id->sym) (set! C4a83@C2e42@id? C2e42@id?) (set! C4a82@C2e40@syntax->list C2e40@syntax->list) (set! C4a81@C2e3e@syntax-cdr C2e3e@syntax-cdr) (set! C4a80@C2e3c@syntax-car C2e3c@syntax-car) (set! C4a7f@C2e3a@syntax-list? C2e3a@syntax-list?) (set! C4a7e@C2e38@syntax-null? C2e38@syntax-null?) (set! C4a7d@C2e36@syntax-vector? C2e36@syntax-vector?) (set! C4a7c@C2e34@syntax-pair? C2e34@syntax-pair?) (set! C4a7b@C2e32@syntax-vector->list C2e32@syntax-vector->list) (set! C4a7a@C2e30@syntax-kind? C2e30@syntax-kind?) (set! C4a79@C2e2e@add-subst C2e2e@add-subst) (set! C4a78@C2e2c@add-mark C2e2c@add-mark) (set! C4a77@C2e2a@mkstx C2e2a@mkstx) (set! C4a76@C2e28@anti-mark? C2e28@anti-mark?) (set! C4a75@C2e26@anti-mark C2e26@anti-mark) (set! C4a74@C2e24@gen-mark C2e24@gen-mark) (set! C4a73@C2e22@datum->stx C2e22@datum->stx) (set! C4a72@C2e20@dummy C2e20@dummy) (set! C4a71@C2e1e@set-stx-ae*! C2e1e@set-stx-ae*!) (set! C4a70@C2e1c@stx-ae* C2e1c@stx-ae*) (set! C4a6f@C2e1a@set-stx-subst*! C2e1a@set-stx-subst*!) (set! C4a6e@C2e18@stx-subst* C2e18@stx-subst*) (set! C4a6d@C2e16@set-stx-mark*! C2e16@set-stx-mark*!) (set! C4a6c@C2e14@stx-mark* C2e14@stx-mark*) (set! C4a6b@C2e12@set-stx-expr! C2e12@set-stx-expr!) (set! C4a6a@C2e10@stx-expr C2e10@stx-expr) (set! C4a69@C2e0e@stx? C2e0e@stx?) (set! C4a68@C2e04@rp C2e04@rp) (set! C4a67@C2e02@make-full-rib C2e02@make-full-rib) (set! C4a66@C2e00@unseal-rib! C2e00@unseal-rib!) (set! C4a65@C2dfe@seal-rib! C2dfe@seal-rib!) (set! C4a64@C2dfc@make-rib-map C2dfc@make-rib-map) (set! C4a63@C2dfa@extend-rib/nc! C2dfa@extend-rib/nc!) (set! C4a62@C2df8@extend-rib! C2df8@extend-rib!) (set! C4a61@C2df6@make-empty-rib C2df6@make-empty-rib) (set! C4a60@C2df4@dummy C2df4@dummy) (set! C4a5f@C2df2@set-rib-cache! C2df2@set-rib-cache!) (set! C4a5e@C2df0@rib-cache C2df0@rib-cache) (set! C4a5d@C2dee@set-rib-sealed/freq! C2dee@set-rib-sealed/freq!) (set! C4a5c@C2dec@rib-sealed/freq C2dec@rib-sealed/freq) (set! C4a5b@C2dea@set-rib-label*! C2dea@set-rib-label*!) (set! C4a5a@C2de8@rib-label* C2de8@rib-label*) (set! C4a59@C2de6@set-rib-mark**! C2de6@set-rib-mark**!) (set! C4a58@C2de4@rib-mark** C2de4@rib-mark**) (set! C4a57@C2de2@set-rib-sym*! C2de2@set-rib-sym*!) (set! C4a56@C2de0@rib-sym* C2de0@rib-sym*) (set! C4a55@C2dde@rib? C2dde@rib?) (set! C4a54@C2dd4@gen-define-label C2dd4@gen-define-label) (set! C4a53@C2dd2@gen-define-label+loc C2dd2@gen-define-label+loc) (set! C4a52@C2dd0@gen-top-level-label C2dd0@gen-top-level-label) (set! C4a51@C2dce@gen-label C2dce@gen-label) (set! C4a50@C2dcc@gen-global C2dcc@gen-global) (set! C4a4f@C2dca@gen-lexical C2dca@gen-lexical) (set! C4a4e@C2dc8@top-marked? C2dc8@top-marked?) (set! C4a4d@C2dc6@top-mark* C2dc6@top-mark*) (set! C4a4c@C2dc1@set-union C2dc1@set-union) (set! C4a4b@C2dbf@set-cons C2dbf@set-cons) (set! C4a4a@C2dbd@file-options-macro C2dbd@file-options-macro) (C2c63@C2aa7@current-library-expander C3109@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (C4b52@C4b4d C4b54@C4b4f C4b56@C4b4e C4b59@&condition? C4b5b@make-&condition C4b5d@&condition-rtd C4b5f@&condition-rcd C4bab@C4ba6 C4bad@C4ba8 C4baf@C4ba7 C4bb2@p? C4bb4@make-message-condition C4bb6@C4ba5 C4bb8@message-condition? C4bba@condition-message C4bbc@&message-rtd C4bbe@&message-rcd C4bc4@C4bbf C4bc6@C4bc1 C4bc8@C4bc0 C4bcb@p? C4bcd@make-warning C4bcf@warning? C4bd1@&warning-rtd C4bd3@&warning-rcd C4bd9@C4bd4 C4bdb@C4bd6 C4bdd@C4bd5 C4be0@p? C4be2@make-serious-condition C4be4@serious-condition? C4be6@&serious-rtd C4be8@&serious-rcd C4bee@C4be9 C4bf0@C4beb C4bf2@C4bea C4bf5@p? C4bf7@make-error C4bf9@error? C4bfb@&error-rtd C4bfd@&error-rcd C4c03@C4bfe C4c05@C4c00 C4c07@C4bff C4c0a@p? C4c0c@make-violation C4c0e@violation? C4c10@&violation-rtd C4c12@&violation-rcd C4c18@C4c13 C4c1a@C4c15 C4c1c@C4c14 C4c1f@p? C4c21@make-assertion-violation C4c23@assertion-violation? C4c25@&assertion-rtd C4c27@&assertion-rcd C4c2f@C4c2a C4c31@C4c2c C4c33@C4c2b C4c36@p? C4c38@make-irritants-condition C4c3a@C4c29 C4c3c@irritants-condition? C4c3e@condition-irritants C4c40@&irritants-rtd C4c42@&irritants-rcd C4c4a@C4c45 C4c4c@C4c47 C4c4e@C4c46 C4c51@p? C4c53@make-who-condition C4c55@C4c44 C4c57@who-condition? C4c59@condition-who C4c5b@&who-rtd C4c5d@&who-rcd C4c63@C4c5e C4c65@C4c60 C4c67@C4c5f C4c6a@p? C4c6c@make-non-continuable-violation C4c6e@non-continuable-violation? C4c70@&non-continuable-rtd C4c72@&non-continuable-rcd C4c78@C4c73 C4c7a@C4c75 C4c7c@C4c74 C4c7f@p? C4c81@make-implementation-restriction-violation C4c83@implementation-restriction-violation? C4c85@&implementation-restriction-rtd C4c87@&implementation-restriction-rcd C4c8d@C4c88 C4c8f@C4c8a C4c91@C4c89 C4c94@p? C4c96@make-lexical-violation C4c98@lexical-violation? C4c9a@&lexical-rtd C4c9c@&lexical-rcd C4ca6@C4ca1 C4ca8@C4ca3 C4caa@C4ca2 C4cad@p? C4caf@make-syntax-violation C4cb1@C4c9e C4cb3@C4ca0 C4cb5@syntax-violation? C4cb7@syntax-violation-form C4cb9@syntax-violation-subform C4cbb@&syntax-rtd C4cbd@&syntax-rcd C4cc3@C4cbe C4cc5@C4cc0 C4cc7@C4cbf C4cca@p? C4ccc@make-undefined-violation C4cce@undefined-violation? C4cd0@&undefined-rtd C4cd2@&undefined-rcd C4cd8@C4cd3 C4cda@C4cd5 C4cdc@C4cd4 C4cdf@p? C4ce1@make-i/o-error C4ce3@i/o-error? C4ce5@&i/o-rtd C4ce7@&i/o-rcd C4ced@C4ce8 C4cef@C4cea C4cf1@C4ce9 C4cf4@p? C4cf6@make-i/o-read-error C4cf8@i/o-read-error? C4cfa@&i/o-read-rtd C4cfc@&i/o-read-rcd C4d02@C4cfd C4d04@C4cff C4d06@C4cfe C4d09@p? C4d0b@make-i/o-write-error C4d0d@i/o-write-error? C4d0f@&i/o-write-rtd C4d11@&i/o-write-rcd C4d19@C4d14 C4d1b@C4d16 C4d1d@C4d15 C4d20@p? C4d22@make-i/o-invalid-position-error C4d24@C4d13 C4d26@i/o-invalid-position-error? C4d28@i/o-error-position C4d2a@&i/o-invalid-position-rtd C4d2c@&i/o-invalid-position-rcd C4d34@C4d2f C4d36@C4d31 C4d38@C4d30 C4d3b@p? C4d3d@make-i/o-filename-error C4d3f@C4d2e C4d41@i/o-filename-error? C4d43@i/o-error-filename C4d45@&i/o-filename-rtd C4d47@&i/o-filename-rcd C4d4d@C4d48 C4d4f@C4d4a C4d51@C4d49 C4d54@p? C4d56@make-i/o-file-protection-error C4d58@i/o-file-protection-error? C4d5a@&i/o-file-protection-rtd C4d5c@&i/o-file-protection-rcd C4d62@C4d5d C4d64@C4d5f C4d66@C4d5e C4d69@p? C4d6b@make-i/o-file-is-read-only-error C4d6d@i/o-file-is-read-only-error? C4d6f@&i/o-file-is-read-only-rtd C4d71@&i/o-file-is-read-only-rcd C4d77@C4d72 C4d79@C4d74 C4d7b@C4d73 C4d7e@p? C4d80@make-i/o-file-already-exists-error C4d82@i/o-file-already-exists-error? C4d84@&i/o-file-already-exists-rtd C4d86@&i/o-file-already-exists-rcd C4d8c@C4d87 C4d8e@C4d89 C4d90@C4d88 C4d93@p? C4d95@make-i/o-file-does-not-exist-error C4d97@i/o-file-does-not-exist-error? C4d99@&i/o-file-does-not-exist-rtd C4d9b@&i/o-file-does-not-exist-rcd C4da3@C4d9e C4da5@C4da0 C4da7@C4d9f C4daa@p? C4dac@make-i/o-port-error C4dae@C4d9d C4db0@i/o-port-error? C4db2@i/o-error-port C4db4@&i/o-port-rtd C4db6@&i/o-port-rcd C4dbc@C4db7 C4dbe@C4db9 C4dc0@C4db8 C4dc3@p? C4dc5@make-i/o-decoding-error C4dc7@i/o-decoding-error? C4dc9@&i/o-decoding-rtd C4dcb@&i/o-decoding-rcd C4dd3@C4dce C4dd5@C4dd0 C4dd7@C4dcf C4dda@p? C4ddc@make-i/o-encoding-error C4dde@C4dcd C4de0@i/o-encoding-error? C4de2@i/o-encoding-error-char C4de4@&i/o-encoding-rtd C4de6@&i/o-encoding-rcd C4dec@C4de7 C4dee@C4de9 C4df0@C4de8 C4df3@p? C4df5@make-no-infinities-violation C4df7@no-infinities-violation? C4df9@&no-infinities-rtd C4dfb@&no-infinities-rcd C4e01@C4dfc C4e03@C4dfe C4e05@C4dfd C4e08@p? C4e0a@make-no-nans-violation C4e0c@no-nans-violation? C4e0e@&no-nans-rtd C4e10@&no-nans-rcd) (begin (set! C4b52@C4b4d (make-record-type-descriptor '&condition '#f 'C4b50 '#f '#f '#())) (set! C4b54@C4b4f '#f) (set! C4b56@C4b4e (make-record-constructor-descriptor C4b52@C4b4d '#f C4b54@C4b4f)) (set! C4b59@&condition? (record-predicate C4b52@C4b4d)) (set! C4b5b@make-&condition (record-constructor C4b56@C4b4e)) (set! C4b5d@&condition-rtd C4b52@C4b4d) (set! C4b5f@&condition-rcd C4b56@C4b4e) (set! C4bab@C4ba6 (make-record-type-descriptor '&message C4b52@C4b4d 'C4ba9 '#f '#f '#((immutable message)))) (set! C4bad@C4ba8 '#f) (set! C4baf@C4ba7 (make-record-constructor-descriptor C4bab@C4ba6 C4b56@C4b4e C4bad@C4ba8)) (set! C4bb2@p? (record-predicate C4bab@C4ba6)) (set! C4bb4@make-message-condition (record-constructor C4baf@C4ba7)) (set! C4bb6@C4ba5 (record-accessor C4bab@C4ba6 '0)) (set! C4bb8@message-condition? (condition-predicate C4bab@C4ba6)) (set! C4bba@condition-message (condition-accessor C4bab@C4ba6 C4bb6@C4ba5)) (set! C4bbc@&message-rtd C4bab@C4ba6) (set! C4bbe@&message-rcd C4baf@C4ba7) (set! C4bc4@C4bbf (make-record-type-descriptor '&warning C4b52@C4b4d 'C4bc2 '#f '#f '#())) (set! C4bc6@C4bc1 '#f) (set! C4bc8@C4bc0 (make-record-constructor-descriptor C4bc4@C4bbf C4b56@C4b4e C4bc6@C4bc1)) (set! C4bcb@p? (record-predicate C4bc4@C4bbf)) (set! C4bcd@make-warning (record-constructor C4bc8@C4bc0)) (set! C4bcf@warning? (condition-predicate C4bc4@C4bbf)) (set! C4bd1@&warning-rtd C4bc4@C4bbf) (set! C4bd3@&warning-rcd C4bc8@C4bc0) (set! C4bd9@C4bd4 (make-record-type-descriptor '&serious C4b52@C4b4d 'C4bd7 '#f '#f '#())) (set! C4bdb@C4bd6 '#f) (set! C4bdd@C4bd5 (make-record-constructor-descriptor C4bd9@C4bd4 C4b56@C4b4e C4bdb@C4bd6)) (set! C4be0@p? (record-predicate C4bd9@C4bd4)) (set! C4be2@make-serious-condition (record-constructor C4bdd@C4bd5)) (set! C4be4@serious-condition? (condition-predicate C4bd9@C4bd4)) (set! C4be6@&serious-rtd C4bd9@C4bd4) (set! C4be8@&serious-rcd C4bdd@C4bd5) (set! C4bee@C4be9 (make-record-type-descriptor '&error C4bd9@C4bd4 'C4bec '#f '#f '#())) (set! C4bf0@C4beb '#f) (set! C4bf2@C4bea (make-record-constructor-descriptor C4bee@C4be9 C4bdd@C4bd5 C4bf0@C4beb)) (set! C4bf5@p? (record-predicate C4bee@C4be9)) (set! C4bf7@make-error (record-constructor C4bf2@C4bea)) (set! C4bf9@error? (condition-predicate C4bee@C4be9)) (set! C4bfb@&error-rtd C4bee@C4be9) (set! C4bfd@&error-rcd C4bf2@C4bea) (set! C4c03@C4bfe (make-record-type-descriptor '&violation C4bd9@C4bd4 'C4c01 '#f '#f '#())) (set! C4c05@C4c00 '#f) (set! C4c07@C4bff (make-record-constructor-descriptor C4c03@C4bfe C4bdd@C4bd5 C4c05@C4c00)) (set! C4c0a@p? (record-predicate C4c03@C4bfe)) (set! C4c0c@make-violation (record-constructor C4c07@C4bff)) (set! C4c0e@violation? (condition-predicate C4c03@C4bfe)) (set! C4c10@&violation-rtd C4c03@C4bfe) (set! C4c12@&violation-rcd C4c07@C4bff) (set! C4c18@C4c13 (make-record-type-descriptor '&assertion C4c03@C4bfe 'C4c16 '#f '#f '#())) (set! C4c1a@C4c15 '#f) (set! C4c1c@C4c14 (make-record-constructor-descriptor C4c18@C4c13 C4c07@C4bff C4c1a@C4c15)) (set! C4c1f@p? (record-predicate C4c18@C4c13)) (set! C4c21@make-assertion-violation (record-constructor C4c1c@C4c14)) (set! C4c23@assertion-violation? (condition-predicate C4c18@C4c13)) (set! C4c25@&assertion-rtd C4c18@C4c13) (set! C4c27@&assertion-rcd C4c1c@C4c14) (set! C4c2f@C4c2a (make-record-type-descriptor '&irritants C4b52@C4b4d 'C4c2d '#f '#f '#((immutable irritants)))) (set! C4c31@C4c2c '#f) (set! C4c33@C4c2b (make-record-constructor-descriptor C4c2f@C4c2a C4b56@C4b4e C4c31@C4c2c)) (set! C4c36@p? (record-predicate C4c2f@C4c2a)) (set! C4c38@make-irritants-condition (record-constructor C4c33@C4c2b)) (set! C4c3a@C4c29 (record-accessor C4c2f@C4c2a '0)) (set! C4c3c@irritants-condition? (condition-predicate C4c2f@C4c2a)) (set! C4c3e@condition-irritants (condition-accessor C4c2f@C4c2a C4c3a@C4c29)) (set! C4c40@&irritants-rtd C4c2f@C4c2a) (set! C4c42@&irritants-rcd C4c33@C4c2b) (set! C4c4a@C4c45 (make-record-type-descriptor '&who C4b52@C4b4d 'C4c48 '#f '#f '#((immutable who)))) (set! C4c4c@C4c47 '#f) (set! C4c4e@C4c46 (make-record-constructor-descriptor C4c4a@C4c45 C4b56@C4b4e C4c4c@C4c47)) (set! C4c51@p? (record-predicate C4c4a@C4c45)) (set! C4c53@make-who-condition (record-constructor C4c4e@C4c46)) (set! C4c55@C4c44 (record-accessor C4c4a@C4c45 '0)) (set! C4c57@who-condition? (condition-predicate C4c4a@C4c45)) (set! C4c59@condition-who (condition-accessor C4c4a@C4c45 C4c55@C4c44)) (set! C4c5b@&who-rtd C4c4a@C4c45) (set! C4c5d@&who-rcd C4c4e@C4c46) (set! C4c63@C4c5e (make-record-type-descriptor '&non-continuable C4c03@C4bfe 'C4c61 '#f '#f '#())) (set! C4c65@C4c60 '#f) (set! C4c67@C4c5f (make-record-constructor-descriptor C4c63@C4c5e C4c07@C4bff C4c65@C4c60)) (set! C4c6a@p? (record-predicate C4c63@C4c5e)) (set! C4c6c@make-non-continuable-violation (record-constructor C4c67@C4c5f)) (set! C4c6e@non-continuable-violation? (condition-predicate C4c63@C4c5e)) (set! C4c70@&non-continuable-rtd C4c63@C4c5e) (set! C4c72@&non-continuable-rcd C4c67@C4c5f) (set! C4c78@C4c73 (make-record-type-descriptor '&implementation-restriction C4c03@C4bfe 'C4c76 '#f '#f '#())) (set! C4c7a@C4c75 '#f) (set! C4c7c@C4c74 (make-record-constructor-descriptor C4c78@C4c73 C4c07@C4bff C4c7a@C4c75)) (set! C4c7f@p? (record-predicate C4c78@C4c73)) (set! C4c81@make-implementation-restriction-violation (record-constructor C4c7c@C4c74)) (set! C4c83@implementation-restriction-violation? (condition-predicate C4c78@C4c73)) (set! C4c85@&implementation-restriction-rtd C4c78@C4c73) (set! C4c87@&implementation-restriction-rcd C4c7c@C4c74) (set! C4c8d@C4c88 (make-record-type-descriptor '&lexical C4c03@C4bfe 'C4c8b '#f '#f '#())) (set! C4c8f@C4c8a '#f) (set! C4c91@C4c89 (make-record-constructor-descriptor C4c8d@C4c88 C4c07@C4bff C4c8f@C4c8a)) (set! C4c94@p? (record-predicate C4c8d@C4c88)) (set! C4c96@make-lexical-violation (record-constructor C4c91@C4c89)) (set! C4c98@lexical-violation? (condition-predicate C4c8d@C4c88)) (set! C4c9a@&lexical-rtd C4c8d@C4c88) (set! C4c9c@&lexical-rcd C4c91@C4c89) (set! C4ca6@C4ca1 (make-record-type-descriptor '&syntax C4c03@C4bfe 'C4ca4 '#f '#f '#((immutable form) (immutable subform)))) (set! C4ca8@C4ca3 '#f) (set! C4caa@C4ca2 (make-record-constructor-descriptor C4ca6@C4ca1 C4c07@C4bff C4ca8@C4ca3)) (set! C4cad@p? (record-predicate C4ca6@C4ca1)) (set! C4caf@make-syntax-violation (record-constructor C4caa@C4ca2)) (set! C4cb1@C4c9e (record-accessor C4ca6@C4ca1 '0)) (set! C4cb3@C4ca0 (record-accessor C4ca6@C4ca1 '1)) (set! C4cb5@syntax-violation? (condition-predicate C4ca6@C4ca1)) (set! C4cb7@syntax-violation-form (condition-accessor C4ca6@C4ca1 C4cb1@C4c9e)) (set! C4cb9@syntax-violation-subform (condition-accessor C4ca6@C4ca1 C4cb3@C4ca0)) (set! C4cbb@&syntax-rtd C4ca6@C4ca1) (set! C4cbd@&syntax-rcd C4caa@C4ca2) (set! C4cc3@C4cbe (make-record-type-descriptor '&undefined C4c03@C4bfe 'C4cc1 '#f '#f '#())) (set! C4cc5@C4cc0 '#f) (set! C4cc7@C4cbf (make-record-constructor-descriptor C4cc3@C4cbe C4c07@C4bff C4cc5@C4cc0)) (set! C4cca@p? (record-predicate C4cc3@C4cbe)) (set! C4ccc@make-undefined-violation (record-constructor C4cc7@C4cbf)) (set! C4cce@undefined-violation? (condition-predicate C4cc3@C4cbe)) (set! C4cd0@&undefined-rtd C4cc3@C4cbe) (set! C4cd2@&undefined-rcd C4cc7@C4cbf) (set! C4cd8@C4cd3 (make-record-type-descriptor '&i/o C4bee@C4be9 'C4cd6 '#f '#f '#())) (set! C4cda@C4cd5 '#f) (set! C4cdc@C4cd4 (make-record-constructor-descriptor C4cd8@C4cd3 C4bf2@C4bea C4cda@C4cd5)) (set! C4cdf@p? (record-predicate C4cd8@C4cd3)) (set! C4ce1@make-i/o-error (record-constructor C4cdc@C4cd4)) (set! C4ce3@i/o-error? (condition-predicate C4cd8@C4cd3)) (set! C4ce5@&i/o-rtd C4cd8@C4cd3) (set! C4ce7@&i/o-rcd C4cdc@C4cd4) (set! C4ced@C4ce8 (make-record-type-descriptor '&i/o-read C4cd8@C4cd3 'C4ceb '#f '#f '#())) (set! C4cef@C4cea '#f) (set! C4cf1@C4ce9 (make-record-constructor-descriptor C4ced@C4ce8 C4cdc@C4cd4 C4cef@C4cea)) (set! C4cf4@p? (record-predicate C4ced@C4ce8)) (set! C4cf6@make-i/o-read-error (record-constructor C4cf1@C4ce9)) (set! C4cf8@i/o-read-error? (condition-predicate C4ced@C4ce8)) (set! C4cfa@&i/o-read-rtd C4ced@C4ce8) (set! C4cfc@&i/o-read-rcd C4cf1@C4ce9) (set! C4d02@C4cfd (make-record-type-descriptor '&i/o-write C4cd8@C4cd3 'C4d00 '#f '#f '#())) (set! C4d04@C4cff '#f) (set! C4d06@C4cfe (make-record-constructor-descriptor C4d02@C4cfd C4cdc@C4cd4 C4d04@C4cff)) (set! C4d09@p? (record-predicate C4d02@C4cfd)) (set! C4d0b@make-i/o-write-error (record-constructor C4d06@C4cfe)) (set! C4d0d@i/o-write-error? (condition-predicate C4d02@C4cfd)) (set! C4d0f@&i/o-write-rtd C4d02@C4cfd) (set! C4d11@&i/o-write-rcd C4d06@C4cfe) (set! C4d19@C4d14 (make-record-type-descriptor '&i/o-invalid-position C4cd8@C4cd3 'C4d17 '#f '#f '#((immutable position)))) (set! C4d1b@C4d16 '#f) (set! C4d1d@C4d15 (make-record-constructor-descriptor C4d19@C4d14 C4cdc@C4cd4 C4d1b@C4d16)) (set! C4d20@p? (record-predicate C4d19@C4d14)) (set! C4d22@make-i/o-invalid-position-error (record-constructor C4d1d@C4d15)) (set! C4d24@C4d13 (record-accessor C4d19@C4d14 '0)) (set! C4d26@i/o-invalid-position-error? (condition-predicate C4d19@C4d14)) (set! C4d28@i/o-error-position (condition-accessor C4d19@C4d14 C4d24@C4d13)) (set! C4d2a@&i/o-invalid-position-rtd C4d19@C4d14) (set! C4d2c@&i/o-invalid-position-rcd C4d1d@C4d15) (set! C4d34@C4d2f (make-record-type-descriptor '&i/o-filename C4cd8@C4cd3 'C4d32 '#f '#f '#((immutable filename)))) (set! C4d36@C4d31 '#f) (set! C4d38@C4d30 (make-record-constructor-descriptor C4d34@C4d2f C4cdc@C4cd4 C4d36@C4d31)) (set! C4d3b@p? (record-predicate C4d34@C4d2f)) (set! C4d3d@make-i/o-filename-error (record-constructor C4d38@C4d30)) (set! C4d3f@C4d2e (record-accessor C4d34@C4d2f '0)) (set! C4d41@i/o-filename-error? (condition-predicate C4d34@C4d2f)) (set! C4d43@i/o-error-filename (condition-accessor C4d34@C4d2f C4d3f@C4d2e)) (set! C4d45@&i/o-filename-rtd C4d34@C4d2f) (set! C4d47@&i/o-filename-rcd C4d38@C4d30) (set! C4d4d@C4d48 (make-record-type-descriptor '&i/o-file-protection C4d34@C4d2f 'C4d4b '#f '#f '#())) (set! C4d4f@C4d4a '#f) (set! C4d51@C4d49 (make-record-constructor-descriptor C4d4d@C4d48 C4d38@C4d30 C4d4f@C4d4a)) (set! C4d54@p? (record-predicate C4d4d@C4d48)) (set! C4d56@make-i/o-file-protection-error (record-constructor C4d51@C4d49)) (set! C4d58@i/o-file-protection-error? (condition-predicate C4d4d@C4d48)) (set! C4d5a@&i/o-file-protection-rtd C4d4d@C4d48) (set! C4d5c@&i/o-file-protection-rcd C4d51@C4d49) (set! C4d62@C4d5d (make-record-type-descriptor '&i/o-file-is-read-only C4d4d@C4d48 'C4d60 '#f '#f '#())) (set! C4d64@C4d5f '#f) (set! C4d66@C4d5e (make-record-constructor-descriptor C4d62@C4d5d C4d51@C4d49 C4d64@C4d5f)) (set! C4d69@p? (record-predicate C4d62@C4d5d)) (set! C4d6b@make-i/o-file-is-read-only-error (record-constructor C4d66@C4d5e)) (set! C4d6d@i/o-file-is-read-only-error? (condition-predicate C4d62@C4d5d)) (set! C4d6f@&i/o-file-is-read-only-rtd C4d62@C4d5d) (set! C4d71@&i/o-file-is-read-only-rcd C4d66@C4d5e) (set! C4d77@C4d72 (make-record-type-descriptor '&i/o-file-already-exists C4d34@C4d2f 'C4d75 '#f '#f '#())) (set! C4d79@C4d74 '#f) (set! C4d7b@C4d73 (make-record-constructor-descriptor C4d77@C4d72 C4d38@C4d30 C4d79@C4d74)) (set! C4d7e@p? (record-predicate C4d77@C4d72)) (set! C4d80@make-i/o-file-already-exists-error (record-constructor C4d7b@C4d73)) (set! C4d82@i/o-file-already-exists-error? (condition-predicate C4d77@C4d72)) (set! C4d84@&i/o-file-already-exists-rtd C4d77@C4d72) (set! C4d86@&i/o-file-already-exists-rcd C4d7b@C4d73) (set! C4d8c@C4d87 (make-record-type-descriptor '&i/o-file-does-not-exist C4d34@C4d2f 'C4d8a '#f '#f '#())) (set! C4d8e@C4d89 '#f) (set! C4d90@C4d88 (make-record-constructor-descriptor C4d8c@C4d87 C4d38@C4d30 C4d8e@C4d89)) (set! C4d93@p? (record-predicate C4d8c@C4d87)) (set! C4d95@make-i/o-file-does-not-exist-error (record-constructor C4d90@C4d88)) (set! C4d97@i/o-file-does-not-exist-error? (condition-predicate C4d8c@C4d87)) (set! C4d99@&i/o-file-does-not-exist-rtd C4d8c@C4d87) (set! C4d9b@&i/o-file-does-not-exist-rcd C4d90@C4d88) (set! C4da3@C4d9e (make-record-type-descriptor '&i/o-port C4cd8@C4cd3 'C4da1 '#f '#f '#((immutable port)))) (set! C4da5@C4da0 '#f) (set! C4da7@C4d9f (make-record-constructor-descriptor C4da3@C4d9e C4cdc@C4cd4 C4da5@C4da0)) (set! C4daa@p? (record-predicate C4da3@C4d9e)) (set! C4dac@make-i/o-port-error (record-constructor C4da7@C4d9f)) (set! C4dae@C4d9d (record-accessor C4da3@C4d9e '0)) (set! C4db0@i/o-port-error? (condition-predicate C4da3@C4d9e)) (set! C4db2@i/o-error-port (condition-accessor C4da3@C4d9e C4dae@C4d9d)) (set! C4db4@&i/o-port-rtd C4da3@C4d9e) (set! C4db6@&i/o-port-rcd C4da7@C4d9f) (set! C4dbc@C4db7 (make-record-type-descriptor '&i/o-decoding C4da3@C4d9e 'C4dba '#f '#f '#())) (set! C4dbe@C4db9 '#f) (set! C4dc0@C4db8 (make-record-constructor-descriptor C4dbc@C4db7 C4da7@C4d9f C4dbe@C4db9)) (set! C4dc3@p? (record-predicate C4dbc@C4db7)) (set! C4dc5@make-i/o-decoding-error (record-constructor C4dc0@C4db8)) (set! C4dc7@i/o-decoding-error? (condition-predicate C4dbc@C4db7)) (set! C4dc9@&i/o-decoding-rtd C4dbc@C4db7) (set! C4dcb@&i/o-decoding-rcd C4dc0@C4db8) (set! C4dd3@C4dce (make-record-type-descriptor '&i/o-encoding C4da3@C4d9e 'C4dd1 '#f '#f '#((immutable char)))) (set! C4dd5@C4dd0 '#f) (set! C4dd7@C4dcf (make-record-constructor-descriptor C4dd3@C4dce C4da7@C4d9f C4dd5@C4dd0)) (set! C4dda@p? (record-predicate C4dd3@C4dce)) (set! C4ddc@make-i/o-encoding-error (record-constructor C4dd7@C4dcf)) (set! C4dde@C4dcd (record-accessor C4dd3@C4dce '0)) (set! C4de0@i/o-encoding-error? (condition-predicate C4dd3@C4dce)) (set! C4de2@i/o-encoding-error-char (condition-accessor C4dd3@C4dce C4dde@C4dcd)) (set! C4de4@&i/o-encoding-rtd C4dd3@C4dce) (set! C4de6@&i/o-encoding-rcd C4dd7@C4dcf) (set! C4dec@C4de7 (make-record-type-descriptor '&no-infinities C4c78@C4c73 'C4dea '#f '#f '#())) (set! C4dee@C4de9 '#f) (set! C4df0@C4de8 (make-record-constructor-descriptor C4dec@C4de7 C4c7c@C4c74 C4dee@C4de9)) (set! C4df3@p? (record-predicate C4dec@C4de7)) (set! C4df5@make-no-infinities-violation (record-constructor C4df0@C4de8)) (set! C4df7@no-infinities-violation? (condition-predicate C4dec@C4de7)) (set! C4df9@&no-infinities-rtd C4dec@C4de7) (set! C4dfb@&no-infinities-rcd C4df0@C4de8) (set! C4e01@C4dfc (make-record-type-descriptor '&no-nans C4c78@C4c73 'C4dff '#f '#f '#())) (set! C4e03@C4dfe '#f) (set! C4e05@C4dfd (make-record-constructor-descriptor C4e01@C4dfc C4c7c@C4c74 C4e03@C4dfe)) (set! C4e08@p? (record-predicate C4e01@C4dfc)) (set! C4e0a@make-no-nans-violation (record-constructor C4e05@C4dfd)) (set! C4e0c@no-nans-violation? (condition-predicate C4e01@C4dfc)) (set! C4e0e@&no-nans-rtd C4e01@C4dfc) (set! C4e10@&no-nans-rcd C4e05@C4dfd) (begin (set! C4f01@C4e10@&no-nans-rcd C4e10@&no-nans-rcd) (set! C4f00@C4e0e@&no-nans-rtd C4e0e@&no-nans-rtd) (set! C4eff@C4e0c@no-nans-violation? C4e0c@no-nans-violation?) (set! C4efe@C4e0a@make-no-nans-violation C4e0a@make-no-nans-violation) (set! C4efd@C4e08@p? C4e08@p?) (set! C4efc@C4e05@C4dfd C4e05@C4dfd) (set! C4efb@C4e03@C4dfe C4e03@C4dfe) (set! C4efa@C4e01@C4dfc C4e01@C4dfc) (set! C4ef9@C4dfb@&no-infinities-rcd C4dfb@&no-infinities-rcd) (set! C4ef8@C4df9@&no-infinities-rtd C4df9@&no-infinities-rtd) (set! C4ef7@C4df7@no-infinities-violation? C4df7@no-infinities-violation?) (set! C4ef6@C4df5@make-no-infinities-violation C4df5@make-no-infinities-violation) (set! C4ef5@C4df3@p? C4df3@p?) (set! C4ef4@C4df0@C4de8 C4df0@C4de8) (set! C4ef3@C4dee@C4de9 C4dee@C4de9) (set! C4ef2@C4dec@C4de7 C4dec@C4de7) (set! C4ef1@C4de6@&i/o-encoding-rcd C4de6@&i/o-encoding-rcd) (set! C4ef0@C4de4@&i/o-encoding-rtd C4de4@&i/o-encoding-rtd) (set! C4eef@C4de2@i/o-encoding-error-char C4de2@i/o-encoding-error-char) (set! C4eee@C4de0@i/o-encoding-error? C4de0@i/o-encoding-error?) (set! C4eed@C4dde@C4dcd C4dde@C4dcd) (set! C4eec@C4ddc@make-i/o-encoding-error C4ddc@make-i/o-encoding-error) (set! C4eeb@C4dda@p? C4dda@p?) (set! C4eea@C4dd7@C4dcf C4dd7@C4dcf) (set! C4ee9@C4dd5@C4dd0 C4dd5@C4dd0) (set! C4ee8@C4dd3@C4dce C4dd3@C4dce) (set! C4ee7@C4dcb@&i/o-decoding-rcd C4dcb@&i/o-decoding-rcd) (set! C4ee6@C4dc9@&i/o-decoding-rtd C4dc9@&i/o-decoding-rtd) (set! C4ee5@C4dc7@i/o-decoding-error? C4dc7@i/o-decoding-error?) (set! C4ee4@C4dc5@make-i/o-decoding-error C4dc5@make-i/o-decoding-error) (set! C4ee3@C4dc3@p? C4dc3@p?) (set! C4ee2@C4dc0@C4db8 C4dc0@C4db8) (set! C4ee1@C4dbe@C4db9 C4dbe@C4db9) (set! C4ee0@C4dbc@C4db7 C4dbc@C4db7) (set! C4edf@C4db6@&i/o-port-rcd C4db6@&i/o-port-rcd) (set! C4ede@C4db4@&i/o-port-rtd C4db4@&i/o-port-rtd) (set! C4edd@C4db2@i/o-error-port C4db2@i/o-error-port) (set! C4edc@C4db0@i/o-port-error? C4db0@i/o-port-error?) (set! C4edb@C4dae@C4d9d C4dae@C4d9d) (set! C4eda@C4dac@make-i/o-port-error C4dac@make-i/o-port-error) (set! C4ed9@C4daa@p? C4daa@p?) (set! C4ed8@C4da7@C4d9f C4da7@C4d9f) (set! C4ed7@C4da5@C4da0 C4da5@C4da0) (set! C4ed6@C4da3@C4d9e C4da3@C4d9e) (set! C4ed5@C4d9b@&i/o-file-does-not-exist-rcd C4d9b@&i/o-file-does-not-exist-rcd) (set! C4ed4@C4d99@&i/o-file-does-not-exist-rtd C4d99@&i/o-file-does-not-exist-rtd) (set! C4ed3@C4d97@i/o-file-does-not-exist-error? C4d97@i/o-file-does-not-exist-error?) (set! C4ed2@C4d95@make-i/o-file-does-not-exist-error C4d95@make-i/o-file-does-not-exist-error) (set! C4ed1@C4d93@p? C4d93@p?) (set! C4ed0@C4d90@C4d88 C4d90@C4d88) (set! C4ecf@C4d8e@C4d89 C4d8e@C4d89) (set! C4ece@C4d8c@C4d87 C4d8c@C4d87) (set! C4ecd@C4d86@&i/o-file-already-exists-rcd C4d86@&i/o-file-already-exists-rcd) (set! C4ecc@C4d84@&i/o-file-already-exists-rtd C4d84@&i/o-file-already-exists-rtd) (set! C4ecb@C4d82@i/o-file-already-exists-error? C4d82@i/o-file-already-exists-error?) (set! C4eca@C4d80@make-i/o-file-already-exists-error C4d80@make-i/o-file-already-exists-error) (set! C4ec9@C4d7e@p? C4d7e@p?) (set! C4ec8@C4d7b@C4d73 C4d7b@C4d73) (set! C4ec7@C4d79@C4d74 C4d79@C4d74) (set! C4ec6@C4d77@C4d72 C4d77@C4d72) (set! C4ec5@C4d71@&i/o-file-is-read-only-rcd C4d71@&i/o-file-is-read-only-rcd) (set! C4ec4@C4d6f@&i/o-file-is-read-only-rtd C4d6f@&i/o-file-is-read-only-rtd) (set! C4ec3@C4d6d@i/o-file-is-read-only-error? C4d6d@i/o-file-is-read-only-error?) (set! C4ec2@C4d6b@make-i/o-file-is-read-only-error C4d6b@make-i/o-file-is-read-only-error) (set! C4ec1@C4d69@p? C4d69@p?) (set! C4ec0@C4d66@C4d5e C4d66@C4d5e) (set! C4ebf@C4d64@C4d5f C4d64@C4d5f) (set! C4ebe@C4d62@C4d5d C4d62@C4d5d) (set! C4ebd@C4d5c@&i/o-file-protection-rcd C4d5c@&i/o-file-protection-rcd) (set! C4ebc@C4d5a@&i/o-file-protection-rtd C4d5a@&i/o-file-protection-rtd) (set! C4ebb@C4d58@i/o-file-protection-error? C4d58@i/o-file-protection-error?) (set! C4eba@C4d56@make-i/o-file-protection-error C4d56@make-i/o-file-protection-error) (set! C4eb9@C4d54@p? C4d54@p?) (set! C4eb8@C4d51@C4d49 C4d51@C4d49) (set! C4eb7@C4d4f@C4d4a C4d4f@C4d4a) (set! C4eb6@C4d4d@C4d48 C4d4d@C4d48) (set! C4eb5@C4d47@&i/o-filename-rcd C4d47@&i/o-filename-rcd) (set! C4eb4@C4d45@&i/o-filename-rtd C4d45@&i/o-filename-rtd) (set! C4eb3@C4d43@i/o-error-filename C4d43@i/o-error-filename) (set! C4eb2@C4d41@i/o-filename-error? C4d41@i/o-filename-error?) (set! C4eb1@C4d3f@C4d2e C4d3f@C4d2e) (set! C4eb0@C4d3d@make-i/o-filename-error C4d3d@make-i/o-filename-error) (set! C4eaf@C4d3b@p? C4d3b@p?) (set! C4eae@C4d38@C4d30 C4d38@C4d30) (set! C4ead@C4d36@C4d31 C4d36@C4d31) (set! C4eac@C4d34@C4d2f C4d34@C4d2f) (set! C4eab@C4d2c@&i/o-invalid-position-rcd C4d2c@&i/o-invalid-position-rcd) (set! C4eaa@C4d2a@&i/o-invalid-position-rtd C4d2a@&i/o-invalid-position-rtd) (set! C4ea9@C4d28@i/o-error-position C4d28@i/o-error-position) (set! C4ea8@C4d26@i/o-invalid-position-error? C4d26@i/o-invalid-position-error?) (set! C4ea7@C4d24@C4d13 C4d24@C4d13) (set! C4ea6@C4d22@make-i/o-invalid-position-error C4d22@make-i/o-invalid-position-error) (set! C4ea5@C4d20@p? C4d20@p?) (set! C4ea4@C4d1d@C4d15 C4d1d@C4d15) (set! C4ea3@C4d1b@C4d16 C4d1b@C4d16) (set! C4ea2@C4d19@C4d14 C4d19@C4d14) (set! C4ea1@C4d11@&i/o-write-rcd C4d11@&i/o-write-rcd) (set! C4ea0@C4d0f@&i/o-write-rtd C4d0f@&i/o-write-rtd) (set! C4e9f@C4d0d@i/o-write-error? C4d0d@i/o-write-error?) (set! C4e9e@C4d0b@make-i/o-write-error C4d0b@make-i/o-write-error) (set! C4e9d@C4d09@p? C4d09@p?) (set! C4e9c@C4d06@C4cfe C4d06@C4cfe) (set! C4e9b@C4d04@C4cff C4d04@C4cff) (set! C4e9a@C4d02@C4cfd C4d02@C4cfd) (set! C4e99@C4cfc@&i/o-read-rcd C4cfc@&i/o-read-rcd) (set! C4e98@C4cfa@&i/o-read-rtd C4cfa@&i/o-read-rtd) (set! C4e97@C4cf8@i/o-read-error? C4cf8@i/o-read-error?) (set! C4e96@C4cf6@make-i/o-read-error C4cf6@make-i/o-read-error) (set! C4e95@C4cf4@p? C4cf4@p?) (set! C4e94@C4cf1@C4ce9 C4cf1@C4ce9) (set! C4e93@C4cef@C4cea C4cef@C4cea) (set! C4e92@C4ced@C4ce8 C4ced@C4ce8) (set! C4e91@C4ce7@&i/o-rcd C4ce7@&i/o-rcd) (set! C4e90@C4ce5@&i/o-rtd C4ce5@&i/o-rtd) (set! C4e8f@C4ce3@i/o-error? C4ce3@i/o-error?) (set! C4e8e@C4ce1@make-i/o-error C4ce1@make-i/o-error) (set! C4e8d@C4cdf@p? C4cdf@p?) (set! C4e8c@C4cdc@C4cd4 C4cdc@C4cd4) (set! C4e8b@C4cda@C4cd5 C4cda@C4cd5) (set! C4e8a@C4cd8@C4cd3 C4cd8@C4cd3) (set! C4e89@C4cd2@&undefined-rcd C4cd2@&undefined-rcd) (set! C4e88@C4cd0@&undefined-rtd C4cd0@&undefined-rtd) (set! C4e87@C4cce@undefined-violation? C4cce@undefined-violation?) (set! C4e86@C4ccc@make-undefined-violation C4ccc@make-undefined-violation) (set! C4e85@C4cca@p? C4cca@p?) (set! C4e84@C4cc7@C4cbf C4cc7@C4cbf) (set! C4e83@C4cc5@C4cc0 C4cc5@C4cc0) (set! C4e82@C4cc3@C4cbe C4cc3@C4cbe) (set! C4e81@C4cbd@&syntax-rcd C4cbd@&syntax-rcd) (set! C4e80@C4cbb@&syntax-rtd C4cbb@&syntax-rtd) (set! C4e7f@C4cb9@syntax-violation-subform C4cb9@syntax-violation-subform) (set! C4e7e@C4cb7@syntax-violation-form C4cb7@syntax-violation-form) (set! C4e7d@C4cb5@syntax-violation? C4cb5@syntax-violation?) (set! C4e7c@C4cb3@C4ca0 C4cb3@C4ca0) (set! C4e7b@C4cb1@C4c9e C4cb1@C4c9e) (set! C4e7a@C4caf@make-syntax-violation C4caf@make-syntax-violation) (set! C4e79@C4cad@p? C4cad@p?) (set! C4e78@C4caa@C4ca2 C4caa@C4ca2) (set! C4e77@C4ca8@C4ca3 C4ca8@C4ca3) (set! C4e76@C4ca6@C4ca1 C4ca6@C4ca1) (set! C4e75@C4c9c@&lexical-rcd C4c9c@&lexical-rcd) (set! C4e74@C4c9a@&lexical-rtd C4c9a@&lexical-rtd) (set! C4e73@C4c98@lexical-violation? C4c98@lexical-violation?) (set! C4e72@C4c96@make-lexical-violation C4c96@make-lexical-violation) (set! C4e71@C4c94@p? C4c94@p?) (set! C4e70@C4c91@C4c89 C4c91@C4c89) (set! C4e6f@C4c8f@C4c8a C4c8f@C4c8a) (set! C4e6e@C4c8d@C4c88 C4c8d@C4c88) (set! C4e6d@C4c87@&implementation-restriction-rcd C4c87@&implementation-restriction-rcd) (set! C4e6c@C4c85@&implementation-restriction-rtd C4c85@&implementation-restriction-rtd) (set! C4e6b@C4c83@implementation-restriction-violation? C4c83@implementation-restriction-violation?) (set! C4e6a@C4c81@make-implementation-restriction-violation C4c81@make-implementation-restriction-violation) (set! C4e69@C4c7f@p? C4c7f@p?) (set! C4e68@C4c7c@C4c74 C4c7c@C4c74) (set! C4e67@C4c7a@C4c75 C4c7a@C4c75) (set! C4e66@C4c78@C4c73 C4c78@C4c73) (set! C4e65@C4c72@&non-continuable-rcd C4c72@&non-continuable-rcd) (set! C4e64@C4c70@&non-continuable-rtd C4c70@&non-continuable-rtd) (set! C4e63@C4c6e@non-continuable-violation? C4c6e@non-continuable-violation?) (set! C4e62@C4c6c@make-non-continuable-violation C4c6c@make-non-continuable-violation) (set! C4e61@C4c6a@p? C4c6a@p?) (set! C4e60@C4c67@C4c5f C4c67@C4c5f) (set! C4e5f@C4c65@C4c60 C4c65@C4c60) (set! C4e5e@C4c63@C4c5e C4c63@C4c5e) (set! C4e5d@C4c5d@&who-rcd C4c5d@&who-rcd) (set! C4e5c@C4c5b@&who-rtd C4c5b@&who-rtd) (set! C4e5b@C4c59@condition-who C4c59@condition-who) (set! C4e5a@C4c57@who-condition? C4c57@who-condition?) (set! C4e59@C4c55@C4c44 C4c55@C4c44) (set! C4e58@C4c53@make-who-condition C4c53@make-who-condition) (set! C4e57@C4c51@p? C4c51@p?) (set! C4e56@C4c4e@C4c46 C4c4e@C4c46) (set! C4e55@C4c4c@C4c47 C4c4c@C4c47) (set! C4e54@C4c4a@C4c45 C4c4a@C4c45) (set! C4e53@C4c42@&irritants-rcd C4c42@&irritants-rcd) (set! C4e52@C4c40@&irritants-rtd C4c40@&irritants-rtd) (set! C4e51@C4c3e@condition-irritants C4c3e@condition-irritants) (set! C4e50@C4c3c@irritants-condition? C4c3c@irritants-condition?) (set! C4e4f@C4c3a@C4c29 C4c3a@C4c29) (set! C4e4e@C4c38@make-irritants-condition C4c38@make-irritants-condition) (set! C4e4d@C4c36@p? C4c36@p?) (set! C4e4c@C4c33@C4c2b C4c33@C4c2b) (set! C4e4b@C4c31@C4c2c C4c31@C4c2c) (set! C4e4a@C4c2f@C4c2a C4c2f@C4c2a) (set! C4e49@C4c27@&assertion-rcd C4c27@&assertion-rcd) (set! C4e48@C4c25@&assertion-rtd C4c25@&assertion-rtd) (set! C4e47@C4c23@assertion-violation? C4c23@assertion-violation?) (set! C4e46@C4c21@make-assertion-violation C4c21@make-assertion-violation) (set! C4e45@C4c1f@p? C4c1f@p?) (set! C4e44@C4c1c@C4c14 C4c1c@C4c14) (set! C4e43@C4c1a@C4c15 C4c1a@C4c15) (set! C4e42@C4c18@C4c13 C4c18@C4c13) (set! C4e41@C4c12@&violation-rcd C4c12@&violation-rcd) (set! C4e40@C4c10@&violation-rtd C4c10@&violation-rtd) (set! C4e3f@C4c0e@violation? C4c0e@violation?) (set! C4e3e@C4c0c@make-violation C4c0c@make-violation) (set! C4e3d@C4c0a@p? C4c0a@p?) (set! C4e3c@C4c07@C4bff C4c07@C4bff) (set! C4e3b@C4c05@C4c00 C4c05@C4c00) (set! C4e3a@C4c03@C4bfe C4c03@C4bfe) (set! C4e39@C4bfd@&error-rcd C4bfd@&error-rcd) (set! C4e38@C4bfb@&error-rtd C4bfb@&error-rtd) (set! C4e37@C4bf9@error? C4bf9@error?) (set! C4e36@C4bf7@make-error C4bf7@make-error) (set! C4e35@C4bf5@p? C4bf5@p?) (set! C4e34@C4bf2@C4bea C4bf2@C4bea) (set! C4e33@C4bf0@C4beb C4bf0@C4beb) (set! C4e32@C4bee@C4be9 C4bee@C4be9) (set! C4e31@C4be8@&serious-rcd C4be8@&serious-rcd) (set! C4e30@C4be6@&serious-rtd C4be6@&serious-rtd) (set! C4e2f@C4be4@serious-condition? C4be4@serious-condition?) (set! C4e2e@C4be2@make-serious-condition C4be2@make-serious-condition) (set! C4e2d@C4be0@p? C4be0@p?) (set! C4e2c@C4bdd@C4bd5 C4bdd@C4bd5) (set! C4e2b@C4bdb@C4bd6 C4bdb@C4bd6) (set! C4e2a@C4bd9@C4bd4 C4bd9@C4bd4) (set! C4e29@C4bd3@&warning-rcd C4bd3@&warning-rcd) (set! C4e28@C4bd1@&warning-rtd C4bd1@&warning-rtd) (set! C4e27@C4bcf@warning? C4bcf@warning?) (set! C4e26@C4bcd@make-warning C4bcd@make-warning) (set! C4e25@C4bcb@p? C4bcb@p?) (set! C4e24@C4bc8@C4bc0 C4bc8@C4bc0) (set! C4e23@C4bc6@C4bc1 C4bc6@C4bc1) (set! C4e22@C4bc4@C4bbf C4bc4@C4bbf) (set! C4e21@C4bbe@&message-rcd C4bbe@&message-rcd) (set! C4e20@C4bbc@&message-rtd C4bbc@&message-rtd) (set! C4e1f@C4bba@condition-message C4bba@condition-message) (set! C4e1e@C4bb8@message-condition? C4bb8@message-condition?) (set! C4e1d@C4bb6@C4ba5 C4bb6@C4ba5) (set! C4e1c@C4bb4@make-message-condition C4bb4@make-message-condition) (set! C4e1b@C4bb2@p? C4bb2@p?) (set! C4e1a@C4baf@C4ba7 C4baf@C4ba7) (set! C4e19@C4bad@C4ba8 C4bad@C4ba8) (set! C4e18@C4bab@C4ba6 C4bab@C4ba6) (set! C4e17@C4b5f@&condition-rcd C4b5f@&condition-rcd) (set! C4e16@C4b5d@&condition-rtd C4b5d@&condition-rtd) (set! C4e15@C4b5b@make-&condition C4b5b@make-&condition) (set! C4e14@C4b59@&condition? C4b59@&condition?) (set! C4e13@C4b56@C4b4e C4b56@C4b4e) (set! C4e12@C4b54@C4b4f C4b54@C4b4f) (set! C4e11@C4b52@C4b4d C4b52@C4b4d)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (C29f4@C29a9@current-primitive-locations (lambda (C5398@x) ((lambda (C539a@t) (if C539a@t (cdr C539a@t) '#f)) (assq C5398@x '((&no-nans-rcd . C4f01@C4e10@&no-nans-rcd) (&no-nans-rtd . C4f00@C4e0e@&no-nans-rtd) (&no-infinities-rcd . C4ef9@C4dfb@&no-infinities-rcd) (&no-infinities-rtd . C4ef8@C4df9@&no-infinities-rtd) (&i/o-encoding-rcd . C4ef1@C4de6@&i/o-encoding-rcd) (&i/o-encoding-rtd . C4ef0@C4de4@&i/o-encoding-rtd) (&i/o-decoding-rcd . C4ee7@C4dcb@&i/o-decoding-rcd) (&i/o-decoding-rtd . C4ee6@C4dc9@&i/o-decoding-rtd) (&i/o-port-rcd . C4edf@C4db6@&i/o-port-rcd) (&i/o-port-rtd . C4ede@C4db4@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . C4ed5@C4d9b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . C4ed4@C4d99@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . C4ecd@C4d86@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . C4ecc@C4d84@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . C4ec5@C4d71@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . C4ec4@C4d6f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . C4ebd@C4d5c@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . C4ebc@C4d5a@&i/o-file-protection-rtd) (&i/o-filename-rcd . C4eb5@C4d47@&i/o-filename-rcd) (&i/o-filename-rtd . C4eb4@C4d45@&i/o-filename-rtd) (&i/o-invalid-position-rcd . C4eab@C4d2c@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . C4eaa@C4d2a@&i/o-invalid-position-rtd) (&i/o-write-rcd . C4ea1@C4d11@&i/o-write-rcd) (&i/o-write-rtd . C4ea0@C4d0f@&i/o-write-rtd) (&i/o-read-rcd . C4e99@C4cfc@&i/o-read-rcd) (&i/o-read-rtd . C4e98@C4cfa@&i/o-read-rtd) (&i/o-rcd . C4e91@C4ce7@&i/o-rcd) (&i/o-rtd . C4e90@C4ce5@&i/o-rtd) (&undefined-rcd . C4e89@C4cd2@&undefined-rcd) (&undefined-rtd . C4e88@C4cd0@&undefined-rtd) (&syntax-rcd . C4e81@C4cbd@&syntax-rcd) (&syntax-rtd . C4e80@C4cbb@&syntax-rtd) (&lexical-rcd . C4e75@C4c9c@&lexical-rcd) (&lexical-rtd . C4e74@C4c9a@&lexical-rtd) (&implementation-restriction-rcd . C4e6d@C4c87@&implementation-restriction-rcd) (&implementation-restriction-rtd . C4e6c@C4c85@&implementation-restriction-rtd) (&non-continuable-rcd . C4e65@C4c72@&non-continuable-rcd) (&non-continuable-rtd . C4e64@C4c70@&non-continuable-rtd) (&who-rcd . C4e5d@C4c5d@&who-rcd) (&who-rtd . C4e5c@C4c5b@&who-rtd) (&irritants-rcd . C4e53@C4c42@&irritants-rcd) (&irritants-rtd . C4e52@C4c40@&irritants-rtd) (&assertion-rcd . C4e49@C4c27@&assertion-rcd) (&assertion-rtd . C4e48@C4c25@&assertion-rtd) (&violation-rcd . C4e41@C4c12@&violation-rcd) (&violation-rtd . C4e40@C4c10@&violation-rtd) (&error-rcd . C4e39@C4bfd@&error-rcd) (&error-rtd . C4e38@C4bfb@&error-rtd) (&serious-rcd . C4e31@C4be8@&serious-rcd) (&serious-rtd . C4e30@C4be6@&serious-rtd) (&warning-rcd . C4e29@C4bd3@&warning-rcd) (&warning-rtd . C4e28@C4bd1@&warning-rtd) (&message-rcd . C4e21@C4bbe@&message-rcd) (&message-rtd . C4e20@C4bbc@&message-rtd) (&condition-rcd . C4e17@C4b5f@&condition-rcd) (&condition-rtd . C4e16@C4b5d@&condition-rtd) (syntax-error . C4b3a@C3123@syntax-error) (syntax-dispatch . C4ad8@C3047@syntax-dispatch) (load . C5048@C4f1d@load) (interaction-environment . C4b42@C3133@interaction-environment) (library-path . C2c5b@C2a97@library-path) (make-parameter . C29a1@C2880@make-parameter) (make-variable-transformer . C4a96@C2e74@make-variable-transformer) (identifier? . C4b3d@C3129@identifier?) (generate-temporaries . C4b33@C3115@generate-temporaries) (free-identifier=? . C4b34@C3117@free-identifier=?) (syntax->datum . C4b3f@C312d@syntax->datum) (datum->syntax . C4b3e@C312b@datum->syntax) (bound-identifier=? . C4b35@C3119@bound-identifier=?) (make-i/o-write-error . C4e9e@C4d0b@make-i/o-write-error) (make-i/o-read-error . C4e96@C4cf6@make-i/o-read-error) (make-i/o-port-error . C4eda@C4dac@make-i/o-port-error) (make-i/o-invalid-position-error . C4ea6@C4d22@make-i/o-invalid-position-error) (make-i/o-filename-error . C4eb0@C4d3d@make-i/o-filename-error) (make-i/o-file-protection-error . C4eba@C4d56@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . C4ec2@C4d6b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . C4ed2@C4d95@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . C4eca@C4d80@make-i/o-file-already-exists-error) (make-i/o-error . C4e8e@C4ce1@make-i/o-error) (make-i/o-encoding-error . C4eec@C4ddc@make-i/o-encoding-error) (make-i/o-decoding-error . C4ee4@C4dc5@make-i/o-decoding-error) (i/o-write-error? . C4e9f@C4d0d@i/o-write-error?) (i/o-read-error? . C4e97@C4cf8@i/o-read-error?) (i/o-port-error? . C4edc@C4db0@i/o-port-error?) (i/o-invalid-position-error? . C4ea8@C4d26@i/o-invalid-position-error?) (i/o-filename-error? . C4eb2@C4d41@i/o-filename-error?) (i/o-file-protection-error? . C4ebb@C4d58@i/o-file-protection-error?) (i/o-file-is-read-only-error? . C4ec3@C4d6d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . C4ed3@C4d97@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . C4ecb@C4d82@i/o-file-already-exists-error?) (i/o-error? . C4e8f@C4ce3@i/o-error?) (i/o-error-position . C4ea9@C4d28@i/o-error-position) (i/o-error-port . C4edd@C4db2@i/o-error-port) (i/o-error-filename . C4eb3@C4d43@i/o-error-filename) (i/o-encoding-error? . C4eee@C4de0@i/o-encoding-error?) (i/o-encoding-error-char . C4eef@C4de2@i/o-encoding-error-char) (i/o-decoding-error? . C4ee5@C4dc7@i/o-decoding-error?) (scheme-report-environment . C4b2a@C3103@scheme-report-environment) (null-environment . C4b29@C3101@null-environment) (command-line . C5045@C4f17@command-line) (eval . C4b2c@C3107@eval) (environment . C4b28@C30ff@environment) (who-condition? . C4e5a@C4c57@who-condition?) (warning? . C4e27@C4bcf@warning?) (violation? . C4e3f@C4c0e@violation?) (undefined-violation? . C4e87@C4cce@undefined-violation?) (syntax-violation? . C4e7d@C4cb5@syntax-violation?) (syntax-violation-subform . C4e7f@C4cb9@syntax-violation-subform) (syntax-violation-form . C4e7e@C4cb7@syntax-violation-form) (syntax-violation . C4b3c@C3127@syntax-violation) (serious-condition? . C4e2f@C4be4@serious-condition?) (non-continuable-violation? . C4e63@C4c6e@non-continuable-violation?) (message-condition? . C4e1e@C4bb8@message-condition?) (make-who-condition . C4e58@C4c53@make-who-condition) (make-warning . C4e26@C4bcd@make-warning) (make-violation . C4e3e@C4c0c@make-violation) (make-undefined-violation . C4e86@C4ccc@make-undefined-violation) (make-syntax-violation . C4e7a@C4caf@make-syntax-violation) (make-serious-condition . C4e2e@C4be2@make-serious-condition) (make-non-continuable-violation . C4e62@C4c6c@make-non-continuable-violation) (make-message-condition . C4e1c@C4bb4@make-message-condition) (make-lexical-violation . C4e72@C4c96@make-lexical-violation) (make-irritants-condition . C4e4e@C4c38@make-irritants-condition) (make-implementation-restriction-violation . C4e6a@C4c81@make-implementation-restriction-violation) (make-error . C4e36@C4bf7@make-error) (make-assertion-violation . C4e46@C4c21@make-assertion-violation) (lexical-violation? . C4e73@C4c98@lexical-violation?) (irritants-condition? . C4e50@C4c3c@irritants-condition?) (implementation-restriction-violation? . C4e6b@C4c83@implementation-restriction-violation?) (error? . C4e37@C4bf9@error?) (condition-who . C4e5b@C4c59@condition-who) (condition-message . C4e1f@C4bba@condition-message) (condition-irritants . C4e51@C4c3e@condition-irritants) (assertion-violation? . C4e47@C4c23@assertion-violation?) (no-nans-violation? . C4eff@C4e0c@no-nans-violation?) (no-infinities-violation? . C4ef7@C4df7@no-infinities-violation?) (make-no-nans-violation . C4efe@C4e0a@make-no-nans-violation) (make-no-infinities-violation . C4ef6@C4df5@make-no-infinities-violation) (assertion-error . C4b39@C3121@assertion-error)))))) (C2c6b@C2ab7@install-library 'C5375 '(mosh interaction) '() '() '() '() '((regexp? . C536d) (alist->eq-hash-table . C536a) (format . C5367) (string-split . C535c) (call-process . C5356) (set-current-directory! . C5352) (expand-path . C5351) (current-directory . C5350) (%spawn . C534f) (%waitpid . C534e) (simple-struct-name . C534d) (simple-struct-set! . C534c) (simple-struct-ref . C534b) (make-simple-struct . C534a) (simple-struct? . C5349) (pointer-ref-c-int64 . C5348) (pointer-ref-c-int32 . C5347) (pointer-ref-c-int16 . C5346) (pointer-ref-c-int8 . C5345) (pointer-ref-c-uint64 . C5344) (pointer-ref-c-uint32 . C5343) (pointer-ref-c-uint16 . C5342) (pointer-ref-c-uint8 . C5341) (pointer-set-c-uint64! . C5340) (pointer-set-c-uint32! . C533f) (pointer-set-c-uint16! . C533e) (pointer-set-c-uint8! . C533d) (pointer-set-c-int64! . C533c) (pointer-set-c-int32! . C533b) (pointer-set-c-int16! . C533a) (pointer-set-c-int8! . C5339) (pointer-set-c-pointer! . C5338) (pointer-set-c-double! . C5337) (pointer-set-c-float! . C5336) (pointer-set-c-long-long! . C5335) (pointer-set-c-long! . C5334) (pointer-set-c-int! . C5333) (pointer-set-c-short! . C5332) (pointer-set-c-char! . C5331) (pointer-ref-c-pointer . C5330) (pointer-ref-c-double . C532f) (pointer-ref-c-float . C532e) (pointer-ref-c-unsigned-long-long . C532d) (pointer-ref-c-signed-long-long . C532c) (pointer-ref-c-unsigned-long . C532b) (pointer-ref-c-signed-long . C532a) (pointer-ref-c-unsigned-int . C5329) (pointer-ref-c-signed-int . C5328) (pointer-ref-c-unsigned-short . C5327) (pointer-ref-c-signed-short . C5326) (pointer-ref-c-unsigned-char . C5325) (pointer-ref-c-signed-char . C5324) (pointer->integer . C5323) (integer->pointer . C5322) (pointer? . C5321) (shared-errno . C5320) (%ffi-supported? . C531f) (%ffi-pointer->string . C531e) (%ffi-call->string-or-zero . C531d) (%ffi-call->double . C531c) (%ffi-call->void* . C531b) (%ffi-call->void . C531a) (%ffi-call->char . C5319) (%ffi-call->int . C5318) (%ffi-lookup . C5317) (%ffi-open . C5316) (%fork . C5315) (%pipe . C5314) (p . C5313) (whereis . C52f8) (register . C52f7) (vm-join! . C52f6) (vm-set-value! . C52f5) (vm? . C52f4) (main-vm? . C52f3) (vm-eval . C52f2) (vm-self . C52f1) (vm-start! . C52f0) (make-vm . C52ef) (mutex-try-lock! . C52ee) (mutex-unlock! . C52ed) (mutex-lock! . C52ec) (mutex? . C52eb) (make-mutex . C52ea) (condition-variable-notify-all! . C52e9) (condition-variable-notify! . C52e8) (condition-variable-wait! . C52e7) (make-condition-variable . C52e6) (string-upcase . C52cf) (string-titlecase . C52ce) (string-normalize-nfkd . C52cd) (string-normalize-nfkc . C52cc) (string-normalize-nfd . C52cb) (string-normalize-nfc . C52ca) (string-foldcase . C52c9) (string-downcase . C52c8) (string-ci>? . C52c7) (string-ci>=? . C52c6) (string-ci=? . C52c5) (string-ci<? . C52c4) (string-ci<=? . C52c3) (char-whitespace? . C52c2) (char-upper-case? . C52c1) (char-title-case? . C52c0) (char-numeric? . C52bf) (char-lower-case? . C52be) (char-general-category . C52bd) (char-upcase . C52bc) (char-titlecase . C52bb) (char-foldcase . C52ba) (char-downcase . C52b9) (char-ci>? . C52b8) (char-ci>=? . C52b7) (char-ci=? . C52b6) (char-ci<? . C52b5) (char-ci<=? . C52b4) (char-alphabetic? . C52b3) (make-variable-transformer . C2e73) (identifier? . C3128) (generate-temporaries . C3114) (free-identifier=? . C3116) (syntax->datum . C312c) (datum->syntax . C312a) (bound-identifier=? . C3118) (record-type-descriptor? . C52b2) (record-predicate . C52b1) (record-mutator . C52b0) (record-constructor . C52af) (record-accessor . C52ae) (make-record-type-descriptor . C52ad) (make-record-constructor-descriptor . C52ac) (record? . C52ab) (record-type-uid . C52aa) (record-type-sealed? . C52a9) (record-type-parent . C52a8) (record-type-opaque? . C52a7) (record-type-name . C52a6) (record-type-generative? . C52a5) (record-type-field-names . C52a4) (record-rtd . C52a3) (record-field-mutable? . C52a2) (delete-file . C52a1) (file-exists? . C52a0) (vector-sort! . C529f) (vector-sort . C529e) (list-sort . C529d) (symbol-hash . C529c) (string-ci-hash . C529b) (string-hash . C529a) (equal-hash . C5299) (hashtable-equivalence-function . C5298) (make-hashtable . C5297) (hashtable-hash-function . C5296) (make-eqv-hashtable . C5295) (make-eq-hashtable . C5294) (hashtable? . C5293) (hashtable-update! . C5292) (hashtable-size . C5291) (hashtable-set! . C5290) (hashtable-ref . C528f) (hashtable-mutable? . C528e) (hashtable-keys . C528d) (hashtable-entries . C528c) (hashtable-delete! . C528b) (hashtable-copy . C528a) (hashtable-contains? . C5289) (hashtable-clear! . C5288) (call-with-output-file . C5287) (call-with-input-file . C5286) (write-char . C5285) (write . C5284) (with-output-to-file . C5283) (with-input-from-file . C5282) (read-char . C5281) (read . C5280) (peek-char . C527f) (open-output-file . C527e) (open-input-file . C527d) (newline . C527c) (display . C527b) (close-output-port . C527a) (close-input-port . C5279) (eof-object? . C5278) (eof-object . C5277) (current-error-port . C5276) (current-output-port . C5275) (current-input-port . C5274) (output-port? . C5273) (input-port? . C5272) (utf-8-codec . C5271) (utf-16-codec . C5270) (transcoder-error-handling-mode . C526f) (transcoder-eol-style . C526e) (transcoder-codec . C526d) (transcoded-port . C526c) (textual-port? . C526b) (string->bytevector . C526a) (standard-output-port . C5269) (standard-input-port . C5268) (standard-error-port . C5267) (set-port-position! . C5266) (put-u8 . C5265) (put-string . C5264) (put-datum . C5263) (put-char . C5262) (put-bytevector . C5261) (port? . C5260) (port-transcoder . C525f) (port-position . C525e) (port-has-set-port-position!? . C525d) (port-has-port-position? . C525c) (port-eof? . C525b) (output-port-buffer-mode . C525a) (open-string-output-port . C5259) (open-string-input-port . C5258) (open-file-output-port . C5257) (open-file-input/output-port . C5256) (open-file-input-port . C5255) (open-bytevector-output-port . C5254) (open-bytevector-input-port . C5253) (native-transcoder . C5252) (native-eol-style . C5251) (make-transcoder . C5250) (latin-1-codec . C524f) (make-i/o-write-error . C4d0a) (make-i/o-read-error . C4cf5) (make-i/o-port-error . C4dab) (make-i/o-invalid-position-error . C4d21) (make-i/o-filename-error . C4d3c) (make-i/o-file-protection-error . C4d55) (make-i/o-file-is-read-only-error . C4d6a) (make-i/o-file-does-not-exist-error . C4d94) (make-i/o-file-already-exists-error . C4d7f) (make-i/o-error . C4ce0) (make-i/o-encoding-error . C4ddb) (make-i/o-decoding-error . C4dc4) (make-custom-textual-output-port . C524e) (make-custom-textual-input/output-port . C524d) (make-custom-textual-input-port . C524c) (make-custom-binary-output-port . C524b) (make-custom-binary-input/output-port . C524a) (make-custom-binary-input-port . C5249) (make-bytevector . C5248) (lookahead-u8 . C5247) (lookahead-char . C5246) (i/o-write-error? . C4d0c) (i/o-read-error? . C4cf7) (i/o-port-error? . C4daf) (i/o-invalid-position-error? . C4d25) (i/o-filename-error? . C4d40) (i/o-file-protection-error? . C4d57) (i/o-file-is-read-only-error? . C4d6c) (i/o-file-does-not-exist-error? . C4d96) (i/o-file-already-exists-error? . C4d81) (i/o-error? . C4ce2) (i/o-error-position . C4d27) (i/o-error-port . C4db1) (i/o-error-filename . C4d42) (i/o-encoding-error? . C4ddf) (i/o-encoding-error-char . C4de1) (i/o-decoding-error? . C4dc6) (get-u8 . C5245) (get-string-n! . C5244) (get-string-n . C5243) (get-string-all . C5242) (get-line . C5241) (get-datum . C5240) (get-char . C523f) (get-bytevector-some . C523e) (get-bytevector-n! . C523d) (get-bytevector-n . C523c) (get-bytevector-all . C523b) (flush-output-port . C523a) (close-port . C5239) (exit . C5231) (command-line . C4f16) (string-fill! . C5230) (string-set! . C522f) (set-cdr! . C522e) (set-car! . C522d) (remove . C522c) (remv . C522b) (remp . C522a) (remq . C5229) (partition . C5228) (memv . C5227) (memq . C5226) (memp . C5225) (member . C5224) (exists . C5223) (for-all . C5222) (fold-right . C5221) (fold-left . C5220) (find . C521f) (filter . C521e) (cons* . C521d) (assv . C521c) (assq . C521b) (assp . C521a) (assoc . C5219) (call-with-string-output-port . C5218) (call-with-port . C5217) (call-with-bytevector-output-port . C5216) (bytevector->string . C5215) (buffer-mode? . C5214) (binary-port? . C5213) (with-exception-handler . C5212) (raise-continuable . C5211) (raise . C5210) (eval . C3106) (environment . C30fe) (make-enumeration . C520f) (enum-set=? . C520e) (enum-set-universe . C520d) (enum-set-union . C520c) (enum-set-subset? . C520b) (enum-set-projection . C520a) (enum-set-member? . C5209) (enum-set-intersection . C5208) (enum-set-indexer . C5207) (enum-set-difference . C5206) (enum-set-constructor . C5205) (enum-set-complement . C5204) (enum-set->list . C5203) (who-condition? . C4c56) (warning? . C4bce) (violation? . C4c0d) (undefined-violation? . C4ccd) (syntax-violation? . C4cb4) (syntax-violation-subform . C4cb8) (syntax-violation-form . C4cb6) (syntax-violation . C3126) (simple-conditions . C5202) (serious-condition? . C4be3) (non-continuable-violation? . C4c6d) (message-condition? . C4bb7) (make-who-condition . C4c52) (make-warning . C4bcc) (make-violation . C4c0b) (make-undefined-violation . C4ccb) (make-syntax-violation . C4cae) (make-serious-condition . C4be1) (make-non-continuable-violation . C4c6b) (make-message-condition . C4bb3) (make-lexical-violation . C4c95) (make-irritants-condition . C4c37) (make-implementation-restriction-violation . C4c80) (make-error . C4bf6) (make-assertion-violation . C4c20) (lexical-violation? . C4c97) (irritants-condition? . C4c3b) (implementation-restriction-violation? . C4c82) (error? . C4bf8) (condition-who . C4c58) (condition-predicate . C5201) (condition-message . C4bb9) (condition-irritants . C4c3d) (condition-accessor . C5200) (condition . C51ff) (assertion-violation? . C4c22) (condition? . C51fe) (utf32->string . C51fd) (utf16->string . C51fc) (utf8->string . C51fb) (uint-list->bytevector . C51fa) (u8-list->bytevector . C51f9) (string->utf8 . C51f8) (string->utf32 . C51f7) (string->utf16 . C51f6) (sint-list->bytevector . C51f5) (native-endianness . C51f4) (bytevector? . C51f3) (bytevector=? . C51f2) (bytevector-uint-set! . C51f1) (bytevector-uint-ref . C51f0) (bytevector-u8-set! . C51ef) (bytevector-u8-ref . C51ee) (bytevector-u64-set! . C51ed) (bytevector-u64-ref . C51ec) (bytevector-u64-native-set! . C51eb) (bytevector-u64-native-ref . C51ea) (bytevector-u32-set! . C51e9) (bytevector-u32-ref . C51e8) (bytevector-u32-native-set! . C51e7) (bytevector-u32-native-ref . C51e6) (bytevector-u16-set! . C51e5) (bytevector-u16-ref . C51e4) (bytevector-u16-native-set! . C51e3) (bytevector-u16-native-ref . C51e2) (bytevector-sint-set! . C51e1) (bytevector-sint-ref . C51e0) (bytevector-s8-set! . C51df) (bytevector-s8-ref . C51de) (bytevector-s64-set! . C51dd) (bytevector-s64-ref . C51dc) (bytevector-s64-native-set! . C51db) (bytevector-s64-native-ref . C51da) (bytevector-s32-set! . C51d9) (bytevector-s32-ref . C51d8) (bytevector-s32-native-set! . C51d7) (bytevector-s32-native-ref . C51d6) (bytevector-s16-set! . C51d5) (bytevector-s16-ref . C51d4) (bytevector-s16-native-set! . C51d3) (bytevector-s16-native-ref . C51d2) (bytevector-length . C51d1) (bytevector-ieee-single-ref . C51d0) (bytevector-ieee-single-set! . C51cf) (bytevector-ieee-single-native-set! . C51ce) (bytevector-ieee-single-native-ref . C51cd) (bytevector-ieee-double-set! . C51cc) (bytevector-ieee-double-ref . C51cb) (bytevector-ieee-double-native-set! . C51ca) (bytevector-ieee-double-native-ref . C51c9) (bytevector-fill! . C51c8) (bytevector-copy! . C51c7) (bytevector-copy . C51c6) (bytevector->uint-list . C51c5) (bytevector->u8-list . C51c4) (bytevector->sint-list . C51c3) (no-nans-violation? . C4e0b) (no-infinities-violation? . C4df6) (make-no-nans-violation . C4e09) (make-no-infinities-violation . C4df4) (real->flonum . C51c2) (flzero? . C51c1) (fltruncate . C51c0) (fltan . C51bf) (flsqrt . C51be) (flsin . C51bd) (flround . C51bc) (flpositive? . C51bb) (flonum? . C51ba) (flodd? . C51b9) (flnumerator . C51b8) (flnegative? . C51b7) (flnan? . C51b6) (flmod0 . C51b5) (flmod . C51b4) (flmin . C51b3) (flmax . C51b2) (fllog . C51b1) (flinteger? . C51b0) (flinfinite? . C51af) (flfloor . C51ae) (flfinite? . C51ad) (flexpt . C51ac) (flexp . C51ab) (fleven? . C51aa) (fldiv0-and-mod0 . C51a9) (fldiv0 . C51a8) (fldiv-and-mod . C51a7) (fldiv . C51a6) (fldenominator . C51a5) (flcos . C51a4) (flceiling . C51a3) (flatan . C51a2) (flasin . C51a1) (flacos . C51a0) (flabs . C519f) (fl>? . C519e) (fl>=? . C519d) (fl=? . C519c) (fl<? . C519b) (fl<=? . C519a) (fl/ . C5199) (fl- . C5198) (fl+ . C5197) (fl* . C5196) (fixnum->flonum . C5195) (fxzero? . C5194) (fxxor . C5193) (fxrotate-bit-field . C5192) (fxreverse-bit-field . C5191) (fxpositive? . C5190) (fxodd? . C518f) (fxnot . C518e) (fxnegative? . C518d) (fxmod0 . C518c) (fxmod . C518b) (fxmin . C518a) (fxmax . C5189) (fxlength . C5188) (fxior . C5187) (fxif . C5186) (fxfirst-bit-set . C5185) (fxeven? . C5184) (fxdiv0-and-mod0 . C5183) (fxdiv0 . C5182) (fxdiv-and-mod . C5181) (fxdiv . C5180) (fxcopy-bit-field . C517f) (fxcopy-bit . C517e) (fxbit-set? . C517d) (fxbit-field . C517c) (fxbit-count . C517b) (fxarithmetic-shift-right . C517a) (fxarithmetic-shift-left . C5179) (fxarithmetic-shift . C5178) (fxand . C5177) (fx>? . C5176) (fx>=? . C5175) (fx=? . C5174) (fx<? . C5173) (fx<=? . C5172) (fx-/carry . C5171) (fx- . C5170) (fx+/carry . C516f) (fx+ . C516e) (fx*/carry . C516d) (fx* . C516c) (greatest-fixnum . C516b) (least-fixnum . C516a) (fixnum-width . C5169) (fixnum? . C5168) (bitwise-rotate-bit-field . C5167) (bitwise-reverse-bit-field . C5166) (bitwise-length . C5165) (bitwise-if . C5164) (bitwise-first-bit-set . C5163) (bitwise-copy-bit-field . C5162) (bitwise-copy-bit . C5161) (bitwise-bit-set? . C5160) (bitwise-bit-field . C515f) (bitwise-bit-count . C515e) (bitwise-xor . C515d) (bitwise-ior . C515c) (bitwise-and . C515b) (bitwise-not . C515a) (bitwise-arithmetic-shift-right . C5159) (bitwise-arithmetic-shift-left . C5158) (bitwise-arithmetic-shift . C5157) (zero? . C5156) (vector? . C5155) (vector-set! . C5154) (vector-ref . C5153) (vector-map . C5152) (vector-length . C5151) (vector-for-each . C5150) (vector-fill! . C514f) (vector->list . C514e) (vector . C514d) (values . C514c) (truncate . C514b) (tan . C514a) (symbol? . C5149) (symbol=? . C5148) (symbol->string . C5147) (substring . C5146) (string? . C5145) (string>? . C5144) (string>=? . C5143) (string=? . C5142) (string<? . C5141) (string<=? . C5140) (string-ref . C513f) (string-length . C513e) (string-for-each . C513d) (string-copy . C513c) (string-append . C513b) (string->symbol . C513a) (string->number . C5139) (string->list . C5138) (string . C5137) (sqrt . C5136) (sin . C5135) (round . C5134) (reverse . C5133) (real? . C5132) (real-valued? . C5131) (real-part . C5130) (rationalize . C512f) (rational? . C512e) (rational-valued? . C512d) (procedure? . C512c) (positive? . C512b) (pair? . C512a) (odd? . C5129) (numerator . C5128) (number? . C5127) (number->string . C5126) (null? . C5125) (not . C5124) (negative? . C5123) (nan? . C5122) (min . C5121) (max . C5120) (map . C511f) (make-vector . C511e) (make-string . C511d) (make-rectangular . C511c) (make-polar . C511b) (magnitude . C511a) (log . C5119) (list? . C5118) (list-tail . C5117) (list-ref . C5116) (list->vector . C5115) (list->string . C5114) (list . C5113) (length . C5112) (lcm . C5111) (integer? . C5110) (integer-valued? . C510f) (integer->char . C510e) (infinite? . C510d) (inexact? . C510c) (inexact . C510b) (imag-part . C510a) (gcd . C5109) (for-each . C5108) (floor . C5107) (finite? . C5106) (expt . C5105) (exp . C5104) (exact? . C5103) (exact-integer-sqrt . C5102) (exact . C5101) (even? . C5100) (error . C50ff) (eqv? . C50fe) (equal? . C50fd) (eq? . C50fc) (dynamic-wind . C50fb) (div0-and-mod0 . C50fa) (mod0 . C50f9) (div0 . C50f8) (div-and-mod . C50f7) (mod . C50f6) (div . C50f5) (denominator . C50f4) (cos . C50f3) (cons . C50f2) (complex? . C50f1) (char? . C50f0) (char>? . C50ef) (char>=? . C50ee) (char=? . C50ed) (char<? . C50ec) (char<=? . C50eb) (char->integer . C50ea) (ceiling . C50e9) (call-with-values . C50e8) (call/cc . C50e7) (call-with-current-continuation . C50e6) (cddddr . C50e5) (cdddar . C50e4) (cddadr . C50e3) (cddaar . C50e2) (cdaddr . C50e1) (cdadar . C50e0) (cdaadr . C50df) (cdaaar . C50de) (cadddr . C50dd) (caddar . C50dc) (cadadr . C50db) (cadaar . C50da) (caaddr . C50d9) (caadar . C50d8) (caaadr . C50d7) (caaaar . C50d6) (cdddr . C50d5) (cddar . C50d4) (cdadr . C50d3) (cdaar . C50d2) (caddr . C50d1) (cadar . C50d0) (caadr . C50cf) (caaar . C50ce) (cddr . C50cd) (cdar . C50cc) (cadr . C50cb) (caar . C50ca) (cdr . C50c9) (car . C50c8) (boolean? . C50c7) (boolean=? . C50c6) (atan . C50c5) (assertion-violation . C50c4) (asin . C50c3) (apply . C50c2) (append . C50c1) (angle . C50c0) (acos . C50bf) (abs . C50be) (/ . C50bd) (* . C50bc) (- . C50bb) (+ . C50ba) (>= . C50b9) (> . C50b8) (= . C50b7) (<= . C50b6) (< . C50b5) (library . C50b4) (&no-nans . C50b3) (&no-infinities . C50b2) (&i/o-encoding . C50b1) (&i/o-decoding . C50b0) (&i/o-port . C50af) (&i/o-file-does-not-exist . C50ae) (&i/o-file-already-exists . C50ad) (&i/o-file-is-read-only . C50ac) (&i/o-file-protection . C50ab) (&i/o-filename . C50aa) (&i/o-invalid-position . C50a9) (&i/o-write . C50a8) (&i/o-read . C50a7) (&i/o . C50a6) (&undefined . C50a5) (&syntax . C50a4) (&lexical . C50a3) (&implementation-restriction . C50a2) (&non-continuable . C50a1) (&who . C50a0) (&irritants . C509f) (&assertion . C509e) (&violation . C509d) (&error . C509c) (&serious . C509b) (&warning . C509a) (&message . C5099) (&condition . C5098) (define-condition-type . C5097) (define-enumeration . C5096) (define-record-type . C5095) (parent-rtd . C5094) (nongenerative . C5093) (opaque . C5092) (sealed . C5091) (protocol . C5090) (parent . C508f) (immutable . C508e) (mutable . C508d) (fields . C508c) (error-handling-mode . C508b) (file-options . C508a) (buffer-mode . C5089) (eol-style . C5088) (guard . C5087) (unsyntax-splicing . C5084) (unsyntax . C5083) (unquote-splicing . C5082) (unquote . C5081) (_ . C5080) (else . C507f) (=> . C507e) (... . C507d) (assert . C507c) (endianness . C507b) (time . C5079) (do . C5078) (cond . C5077) (let* . C5076) (let . C5075) (let*-values . C5074) (let-values . C5073) (identifier-syntax . C5072) (with-syntax . C5071) (quasisyntax . C5070) (quasiquote . C506f) (syntax-rules . C506e) (include . C506d) (record-constructor-descriptor . C506b) (record-type-descriptor . C506a) (case . C5069) (unless . C5067) (when . C5066) (or . C5065) (and . C5064) (if . C5063) (letrec* . C5062) (letrec . C5061) (case-lambda . C505f) (lambda . C505e) (syntax . C505d) (syntax-case . C505c) (quote . C505b) (letrec-syntax . C5059) (let-syntax . C5058) (set! . C5057) (import . C5056) (begin . C5055) (define-syntax . C5053) (define . C5052)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5376 '(psyntax null-environment-5) '() '() '() '() '((make-promise . C5232) (unquote-splicing . C5082) (unquote . C5081) (_ . C5080) (else . C507f) (=> . C507e) (... . C507d) (delay . C507a) (do . C5078) (cond . C5077) (let* . C5076) (let . C5075) (quasiquote . C506f) (syntax-rules . C506e) (case . C5069) (or . C5065) (and . C5064) (if . C5063) (letrec . C5061) (lambda . C505e) (quote . C505b) (letrec-syntax . C5059) (let-syntax . C5058) (set! . C5057) (begin . C5055) (define-syntax . C5053) (define . C5052)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5377 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . C52c7) (string-ci>=? . C52c6) (string-ci=? . C52c5) (string-ci<? . C52c4) (string-ci<=? . C52c3) (char-whitespace? . C52c2) (char-upper-case? . C52c1) (char-numeric? . C52bf) (char-lower-case? . C52be) (char-upcase . C52bc) (char-downcase . C52b9) (char-ci>? . C52b8) (char-ci>=? . C52b7) (char-ci=? . C52b6) (char-ci<? . C52b5) (char-ci<=? . C52b4) (char-alphabetic? . C52b3) (call-with-output-file . C5287) (call-with-input-file . C5286) (write-char . C5285) (write . C5284) (with-output-to-file . C5283) (with-input-from-file . C5282) (read-char . C5281) (read . C5280) (peek-char . C527f) (open-output-file . C527e) (open-input-file . C527d) (newline . C527c) (display . C527b) (close-output-port . C527a) (close-input-port . C5279) (eof-object . C5277) (current-output-port . C5275) (current-input-port . C5274) (output-port? . C5273) (input-port? . C5272) (scheme-report-environment . C3102) (quotient . C5238) (null-environment . C3100) (remainder . C5237) (modulo . C5236) (inexact->exact . C5235) (force . C5234) (exact->inexact . C5233) (make-promise . C5232) (string-fill! . C5230) (string-set! . C522f) (set-cdr! . C522e) (set-car! . C522d) (memv . C5227) (memq . C5226) (member . C5224) (assv . C521c) (assq . C521b) (assoc . C5219) (eval . C3106) (zero? . C5156) (vector? . C5155) (vector-set! . C5154) (vector-ref . C5153) (vector-length . C5151) (vector-fill! . C514f) (vector->list . C514e) (vector . C514d) (values . C514c) (truncate . C514b) (tan . C514a) (symbol? . C5149) (symbol->string . C5147) (substring . C5146) (string? . C5145) (string>? . C5144) (string>=? . C5143) (string=? . C5142) (string<? . C5141) (string<=? . C5140) (string-ref . C513f) (string-length . C513e) (string-copy . C513c) (string-append . C513b) (string->symbol . C513a) (string->number . C5139) (string->list . C5138) (string . C5137) (sqrt . C5136) (sin . C5135) (round . C5134) (reverse . C5133) (real? . C5132) (real-part . C5130) (rationalize . C512f) (rational? . C512e) (procedure? . C512c) (positive? . C512b) (pair? . C512a) (odd? . C5129) (numerator . C5128) (number? . C5127) (number->string . C5126) (not . C5124) (negative? . C5123) (min . C5121) (max . C5120) (map . C511f) (make-vector . C511e) (make-string . C511d) (make-rectangular . C511c) (make-polar . C511b) (magnitude . C511a) (log . C5119) (list? . C5118) (list-tail . C5117) (list-ref . C5116) (list->vector . C5115) (list->string . C5114) (list . C5113) (length . C5112) (lcm . C5111) (integer? . C5110) (integer->char . C510e) (inexact? . C510c) (imag-part . C510a) (gcd . C5109) (for-each . C5108) (floor . C5107) (expt . C5105) (exp . C5104) (exact? . C5103) (even? . C5100) (eqv? . C50fe) (equal? . C50fd) (eq? . C50fc) (dynamic-wind . C50fb) (denominator . C50f4) (cos . C50f3) (cons . C50f2) (complex? . C50f1) (char? . C50f0) (char>? . C50ef) (char>=? . C50ee) (char=? . C50ed) (char<? . C50ec) (char<=? . C50eb) (char->integer . C50ea) (ceiling . C50e9) (call-with-values . C50e8) (call-with-current-continuation . C50e6) (cddddr . C50e5) (cdddar . C50e4) (cddadr . C50e3) (cddaar . C50e2) (cdaddr . C50e1) (cdadar . C50e0) (cdaadr . C50df) (cdaaar . C50de) (cadddr . C50dd) (caddar . C50dc) (cadadr . C50db) (cadaar . C50da) (caaddr . C50d9) (caadar . C50d8) (caaadr . C50d7) (caaaar . C50d6) (cdddr . C50d5) (cddar . C50d4) (cdadr . C50d3) (cdaar . C50d2) (caddr . C50d1) (cadar . C50d0) (caadr . C50cf) (caaar . C50ce) (cddr . C50cd) (cdar . C50cc) (cadr . C50cb) (caar . C50ca) (cdr . C50c9) (car . C50c8) (boolean? . C50c7) (atan . C50c5) (asin . C50c3) (apply . C50c2) (append . C50c1) (angle . C50c0) (acos . C50bf) (abs . C50be) (/ . C50bd) (* . C50bc) (- . C50bb) (+ . C50ba) (>= . C50b9) (> . C50b8) (= . C50b7) (<= . C50b6) (< . C50b5) (unquote-splicing . C5082) (unquote . C5081) (else . C507f) (=> . C507e) (... . C507d) (delay . C507a) (do . C5078) (cond . C5077) (let* . C5076) (let . C5075) (quasiquote . C506f) (syntax-rules . C506e) (case . C5069) (or . C5065) (and . C5064) (if . C5063) (letrec . C5061) (lambda . C505e) (quote . C505b) (letrec-syntax . C5059) (let-syntax . C5058) (set! . C5057) (begin . C5055) (define-syntax . C5053) (define . C5052)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5378 '(psyntax modules) '() '() '() '() '((module . C5054)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5379 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C537a '(rnrs) '(6) '() '() '() '((regexp? . C536d) (string-upcase . C52cf) (string-titlecase . C52ce) (string-normalize-nfkd . C52cd) (string-normalize-nfkc . C52cc) (string-normalize-nfd . C52cb) (string-normalize-nfc . C52ca) (string-foldcase . C52c9) (string-downcase . C52c8) (string-ci>? . C52c7) (string-ci>=? . C52c6) (string-ci=? . C52c5) (string-ci<? . C52c4) (string-ci<=? . C52c3) (char-whitespace? . C52c2) (char-upper-case? . C52c1) (char-title-case? . C52c0) (char-numeric? . C52bf) (char-lower-case? . C52be) (char-general-category . C52bd) (char-upcase . C52bc) (char-titlecase . C52bb) (char-foldcase . C52ba) (char-downcase . C52b9) (char-ci>? . C52b8) (char-ci>=? . C52b7) (char-ci=? . C52b6) (char-ci<? . C52b5) (char-ci<=? . C52b4) (char-alphabetic? . C52b3) (make-variable-transformer . C2e73) (identifier? . C3128) (generate-temporaries . C3114) (free-identifier=? . C3116) (syntax->datum . C312c) (datum->syntax . C312a) (bound-identifier=? . C3118) (record-type-descriptor? . C52b2) (record-predicate . C52b1) (record-mutator . C52b0) (record-constructor . C52af) (record-accessor . C52ae) (make-record-type-descriptor . C52ad) (make-record-constructor-descriptor . C52ac) (record? . C52ab) (record-type-uid . C52aa) (record-type-sealed? . C52a9) (record-type-parent . C52a8) (record-type-opaque? . C52a7) (record-type-name . C52a6) (record-type-generative? . C52a5) (record-type-field-names . C52a4) (record-rtd . C52a3) (record-field-mutable? . C52a2) (delete-file . C52a1) (file-exists? . C52a0) (vector-sort! . C529f) (vector-sort . C529e) (list-sort . C529d) (symbol-hash . C529c) (string-ci-hash . C529b) (string-hash . C529a) (equal-hash . C5299) (hashtable-equivalence-function . C5298) (make-hashtable . C5297) (hashtable-hash-function . C5296) (make-eqv-hashtable . C5295) (make-eq-hashtable . C5294) (hashtable? . C5293) (hashtable-update! . C5292) (hashtable-size . C5291) (hashtable-set! . C5290) (hashtable-ref . C528f) (hashtable-mutable? . C528e) (hashtable-keys . C528d) (hashtable-entries . C528c) (hashtable-delete! . C528b) (hashtable-copy . C528a) (hashtable-contains? . C5289) (hashtable-clear! . C5288) (call-with-output-file . C5287) (call-with-input-file . C5286) (write-char . C5285) (write . C5284) (with-output-to-file . C5283) (with-input-from-file . C5282) (read-char . C5281) (read . C5280) (peek-char . C527f) (open-output-file . C527e) (open-input-file . C527d) (newline . C527c) (display . C527b) (close-output-port . C527a) (close-input-port . C5279) (eof-object? . C5278) (eof-object . C5277) (current-error-port . C5276) (current-output-port . C5275) (current-input-port . C5274) (output-port? . C5273) (input-port? . C5272) (utf-8-codec . C5271) (utf-16-codec . C5270) (transcoder-error-handling-mode . C526f) (transcoder-eol-style . C526e) (transcoder-codec . C526d) (transcoded-port . C526c) (textual-port? . C526b) (string->bytevector . C526a) (standard-output-port . C5269) (standard-input-port . C5268) (standard-error-port . C5267) (set-port-position! . C5266) (put-u8 . C5265) (put-string . C5264) (put-datum . C5263) (put-char . C5262) (put-bytevector . C5261) (port? . C5260) (port-transcoder . C525f) (port-position . C525e) (port-has-set-port-position!? . C525d) (port-has-port-position? . C525c) (port-eof? . C525b) (output-port-buffer-mode . C525a) (open-string-output-port . C5259) (open-string-input-port . C5258) (open-file-output-port . C5257) (open-file-input/output-port . C5256) (open-file-input-port . C5255) (open-bytevector-output-port . C5254) (open-bytevector-input-port . C5253) (native-transcoder . C5252) (native-eol-style . C5251) (make-transcoder . C5250) (latin-1-codec . C524f) (make-i/o-write-error . C4d0a) (make-i/o-read-error . C4cf5) (make-i/o-port-error . C4dab) (make-i/o-invalid-position-error . C4d21) (make-i/o-filename-error . C4d3c) (make-i/o-file-protection-error . C4d55) (make-i/o-file-is-read-only-error . C4d6a) (make-i/o-file-does-not-exist-error . C4d94) (make-i/o-file-already-exists-error . C4d7f) (make-i/o-error . C4ce0) (make-i/o-encoding-error . C4ddb) (make-i/o-decoding-error . C4dc4) (make-custom-textual-output-port . C524e) (make-custom-textual-input/output-port . C524d) (make-custom-textual-input-port . C524c) (make-custom-binary-output-port . C524b) (make-custom-binary-input/output-port . C524a) (make-custom-binary-input-port . C5249) (make-bytevector . C5248) (lookahead-u8 . C5247) (lookahead-char . C5246) (i/o-write-error? . C4d0c) (i/o-read-error? . C4cf7) (i/o-port-error? . C4daf) (i/o-invalid-position-error? . C4d25) (i/o-filename-error? . C4d40) (i/o-file-protection-error? . C4d57) (i/o-file-is-read-only-error? . C4d6c) (i/o-file-does-not-exist-error? . C4d96) (i/o-file-already-exists-error? . C4d81) (i/o-error? . C4ce2) (i/o-error-position . C4d27) (i/o-error-port . C4db1) (i/o-error-filename . C4d42) (i/o-encoding-error? . C4ddf) (i/o-encoding-error-char . C4de1) (i/o-decoding-error? . C4dc6) (get-u8 . C5245) (get-string-n! . C5244) (get-string-n . C5243) (get-string-all . C5242) (get-line . C5241) (get-datum . C5240) (get-char . C523f) (get-bytevector-some . C523e) (get-bytevector-n! . C523d) (get-bytevector-n . C523c) (get-bytevector-all . C523b) (flush-output-port . C523a) (close-port . C5239) (exit . C5231) (command-line . C4f16) (remove . C522c) (remv . C522b) (remp . C522a) (remq . C5229) (partition . C5228) (memv . C5227) (memq . C5226) (memp . C5225) (member . C5224) (exists . C5223) (for-all . C5222) (fold-right . C5221) (fold-left . C5220) (find . C521f) (filter . C521e) (cons* . C521d) (assv . C521c) (assq . C521b) (assp . C521a) (assoc . C5219) (call-with-string-output-port . C5218) (call-with-port . C5217) (call-with-bytevector-output-port . C5216) (bytevector->string . C5215) (buffer-mode? . C5214) (binary-port? . C5213) (with-exception-handler . C5212) (raise-continuable . C5211) (raise . C5210) (make-enumeration . C520f) (enum-set=? . C520e) (enum-set-universe . C520d) (enum-set-union . C520c) (enum-set-subset? . C520b) (enum-set-projection . C520a) (enum-set-member? . C5209) (enum-set-intersection . C5208) (enum-set-indexer . C5207) (enum-set-difference . C5206) (enum-set-constructor . C5205) (enum-set-complement . C5204) (enum-set->list . C5203) (who-condition? . C4c56) (warning? . C4bce) (violation? . C4c0d) (undefined-violation? . C4ccd) (syntax-violation? . C4cb4) (syntax-violation-subform . C4cb8) (syntax-violation-form . C4cb6) (syntax-violation . C3126) (simple-conditions . C5202) (serious-condition? . C4be3) (non-continuable-violation? . C4c6d) (message-condition? . C4bb7) (make-who-condition . C4c52) (make-warning . C4bcc) (make-violation . C4c0b) (make-undefined-violation . C4ccb) (make-syntax-violation . C4cae) (make-serious-condition . C4be1) (make-non-continuable-violation . C4c6b) (make-message-condition . C4bb3) (make-lexical-violation . C4c95) (make-irritants-condition . C4c37) (make-implementation-restriction-violation . C4c80) (make-error . C4bf6) (make-assertion-violation . C4c20) (lexical-violation? . C4c97) (irritants-condition? . C4c3b) (implementation-restriction-violation? . C4c82) (error? . C4bf8) (condition-who . C4c58) (condition-predicate . C5201) (condition-message . C4bb9) (condition-irritants . C4c3d) (condition-accessor . C5200) (condition . C51ff) (assertion-violation? . C4c22) (condition? . C51fe) (utf32->string . C51fd) (utf16->string . C51fc) (utf8->string . C51fb) (uint-list->bytevector . C51fa) (u8-list->bytevector . C51f9) (string->utf8 . C51f8) (string->utf32 . C51f7) (string->utf16 . C51f6) (sint-list->bytevector . C51f5) (native-endianness . C51f4) (bytevector? . C51f3) (bytevector=? . C51f2) (bytevector-uint-set! . C51f1) (bytevector-uint-ref . C51f0) (bytevector-u8-set! . C51ef) (bytevector-u8-ref . C51ee) (bytevector-u64-set! . C51ed) (bytevector-u64-ref . C51ec) (bytevector-u64-native-set! . C51eb) (bytevector-u64-native-ref . C51ea) (bytevector-u32-set! . C51e9) (bytevector-u32-ref . C51e8) (bytevector-u32-native-set! . C51e7) (bytevector-u32-native-ref . C51e6) (bytevector-u16-set! . C51e5) (bytevector-u16-ref . C51e4) (bytevector-u16-native-set! . C51e3) (bytevector-u16-native-ref . C51e2) (bytevector-sint-set! . C51e1) (bytevector-sint-ref . C51e0) (bytevector-s8-set! . C51df) (bytevector-s8-ref . C51de) (bytevector-s64-set! . C51dd) (bytevector-s64-ref . C51dc) (bytevector-s64-native-set! . C51db) (bytevector-s64-native-ref . C51da) (bytevector-s32-set! . C51d9) (bytevector-s32-ref . C51d8) (bytevector-s32-native-set! . C51d7) (bytevector-s32-native-ref . C51d6) (bytevector-s16-set! . C51d5) (bytevector-s16-ref . C51d4) (bytevector-s16-native-set! . C51d3) (bytevector-s16-native-ref . C51d2) (bytevector-length . C51d1) (bytevector-ieee-single-ref . C51d0) (bytevector-ieee-single-set! . C51cf) (bytevector-ieee-single-native-set! . C51ce) (bytevector-ieee-single-native-ref . C51cd) (bytevector-ieee-double-set! . C51cc) (bytevector-ieee-double-ref . C51cb) (bytevector-ieee-double-native-set! . C51ca) (bytevector-ieee-double-native-ref . C51c9) (bytevector-fill! . C51c8) (bytevector-copy! . C51c7) (bytevector-copy . C51c6) (bytevector->uint-list . C51c5) (bytevector->u8-list . C51c4) (bytevector->sint-list . C51c3) (no-nans-violation? . C4e0b) (no-infinities-violation? . C4df6) (make-no-nans-violation . C4e09) (make-no-infinities-violation . C4df4) (real->flonum . C51c2) (flzero? . C51c1) (fltruncate . C51c0) (fltan . C51bf) (flsqrt . C51be) (flsin . C51bd) (flround . C51bc) (flpositive? . C51bb) (flonum? . C51ba) (flodd? . C51b9) (flnumerator . C51b8) (flnegative? . C51b7) (flnan? . C51b6) (flmod0 . C51b5) (flmod . C51b4) (flmin . C51b3) (flmax . C51b2) (fllog . C51b1) (flinteger? . C51b0) (flinfinite? . C51af) (flfloor . C51ae) (flfinite? . C51ad) (flexpt . C51ac) (flexp . C51ab) (fleven? . C51aa) (fldiv0-and-mod0 . C51a9) (fldiv0 . C51a8) (fldiv-and-mod . C51a7) (fldiv . C51a6) (fldenominator . C51a5) (flcos . C51a4) (flceiling . C51a3) (flatan . C51a2) (flasin . C51a1) (flacos . C51a0) (flabs . C519f) (fl>? . C519e) (fl>=? . C519d) (fl=? . C519c) (fl<? . C519b) (fl<=? . C519a) (fl/ . C5199) (fl- . C5198) (fl+ . C5197) (fl* . C5196) (fixnum->flonum . C5195) (fxzero? . C5194) (fxxor . C5193) (fxrotate-bit-field . C5192) (fxreverse-bit-field . C5191) (fxpositive? . C5190) (fxodd? . C518f) (fxnot . C518e) (fxnegative? . C518d) (fxmod0 . C518c) (fxmod . C518b) (fxmin . C518a) (fxmax . C5189) (fxlength . C5188) (fxior . C5187) (fxif . C5186) (fxfirst-bit-set . C5185) (fxeven? . C5184) (fxdiv0-and-mod0 . C5183) (fxdiv0 . C5182) (fxdiv-and-mod . C5181) (fxdiv . C5180) (fxcopy-bit-field . C517f) (fxcopy-bit . C517e) (fxbit-set? . C517d) (fxbit-field . C517c) (fxbit-count . C517b) (fxarithmetic-shift-right . C517a) (fxarithmetic-shift-left . C5179) (fxarithmetic-shift . C5178) (fxand . C5177) (fx>? . C5176) (fx>=? . C5175) (fx=? . C5174) (fx<? . C5173) (fx<=? . C5172) (fx-/carry . C5171) (fx- . C5170) (fx+/carry . C516f) (fx+ . C516e) (fx*/carry . C516d) (fx* . C516c) (greatest-fixnum . C516b) (least-fixnum . C516a) (fixnum-width . C5169) (fixnum? . C5168) (bitwise-rotate-bit-field . C5167) (bitwise-reverse-bit-field . C5166) (bitwise-length . C5165) (bitwise-if . C5164) (bitwise-first-bit-set . C5163) (bitwise-copy-bit-field . C5162) (bitwise-copy-bit . C5161) (bitwise-bit-set? . C5160) (bitwise-bit-field . C515f) (bitwise-bit-count . C515e) (bitwise-xor . C515d) (bitwise-ior . C515c) (bitwise-and . C515b) (bitwise-not . C515a) (bitwise-arithmetic-shift-right . C5159) (bitwise-arithmetic-shift-left . C5158) (bitwise-arithmetic-shift . C5157) (zero? . C5156) (vector? . C5155) (vector-set! . C5154) (vector-ref . C5153) (vector-map . C5152) (vector-length . C5151) (vector-for-each . C5150) (vector-fill! . C514f) (vector->list . C514e) (vector . C514d) (values . C514c) (truncate . C514b) (tan . C514a) (symbol? . C5149) (symbol=? . C5148) (symbol->string . C5147) (substring . C5146) (string? . C5145) (string>? . C5144) (string>=? . C5143) (string=? . C5142) (string<? . C5141) (string<=? . C5140) (string-ref . C513f) (string-length . C513e) (string-for-each . C513d) (string-copy . C513c) (string-append . C513b) (string->symbol . C513a) (string->number . C5139) (string->list . C5138) (string . C5137) (sqrt . C5136) (sin . C5135) (round . C5134) (reverse . C5133) (real? . C5132) (real-valued? . C5131) (real-part . C5130) (rationalize . C512f) (rational? . C512e) (rational-valued? . C512d) (procedure? . C512c) (positive? . C512b) (pair? . C512a) (odd? . C5129) (numerator . C5128) (number? . C5127) (number->string . C5126) (null? . C5125) (not . C5124) (negative? . C5123) (nan? . C5122) (min . C5121) (max . C5120) (map . C511f) (make-vector . C511e) (make-string . C511d) (make-rectangular . C511c) (make-polar . C511b) (magnitude . C511a) (log . C5119) (list? . C5118) (list-tail . C5117) (list-ref . C5116) (list->vector . C5115) (list->string . C5114) (list . C5113) (length . C5112) (lcm . C5111) (integer? . C5110) (integer-valued? . C510f) (integer->char . C510e) (infinite? . C510d) (inexact? . C510c) (inexact . C510b) (imag-part . C510a) (gcd . C5109) (for-each . C5108) (floor . C5107) (finite? . C5106) (expt . C5105) (exp . C5104) (exact? . C5103) (exact-integer-sqrt . C5102) (exact . C5101) (even? . C5100) (error . C50ff) (eqv? . C50fe) (equal? . C50fd) (eq? . C50fc) (dynamic-wind . C50fb) (div0-and-mod0 . C50fa) (mod0 . C50f9) (div0 . C50f8) (div-and-mod . C50f7) (mod . C50f6) (div . C50f5) (denominator . C50f4) (cos . C50f3) (cons . C50f2) (complex? . C50f1) (char? . C50f0) (char>? . C50ef) (char>=? . C50ee) (char=? . C50ed) (char<? . C50ec) (char<=? . C50eb) (char->integer . C50ea) (ceiling . C50e9) (call-with-values . C50e8) (call/cc . C50e7) (call-with-current-continuation . C50e6) (cddddr . C50e5) (cdddar . C50e4) (cddadr . C50e3) (cddaar . C50e2) (cdaddr . C50e1) (cdadar . C50e0) (cdaadr . C50df) (cdaaar . C50de) (cadddr . C50dd) (caddar . C50dc) (cadadr . C50db) (cadaar . C50da) (caaddr . C50d9) (caadar . C50d8) (caaadr . C50d7) (caaaar . C50d6) (cdddr . C50d5) (cddar . C50d4) (cdadr . C50d3) (cdaar . C50d2) (caddr . C50d1) (cadar . C50d0) (caadr . C50cf) (caaar . C50ce) (cddr . C50cd) (cdar . C50cc) (cadr . C50cb) (caar . C50ca) (cdr . C50c9) (car . C50c8) (boolean? . C50c7) (boolean=? . C50c6) (atan . C50c5) (assertion-violation . C50c4) (asin . C50c3) (apply . C50c2) (append . C50c1) (angle . C50c0) (acos . C50bf) (abs . C50be) (/ . C50bd) (* . C50bc) (- . C50bb) (+ . C50ba) (>= . C50b9) (> . C50b8) (= . C50b7) (<= . C50b6) (< . C50b5) (&no-nans . C50b3) (&no-infinities . C50b2) (&i/o-encoding . C50b1) (&i/o-decoding . C50b0) (&i/o-port . C50af) (&i/o-file-does-not-exist . C50ae) (&i/o-file-already-exists . C50ad) (&i/o-file-is-read-only . C50ac) (&i/o-file-protection . C50ab) (&i/o-filename . C50aa) (&i/o-invalid-position . C50a9) (&i/o-write . C50a8) (&i/o-read . C50a7) (&i/o . C50a6) (&undefined . C50a5) (&syntax . C50a4) (&lexical . C50a3) (&implementation-restriction . C50a2) (&non-continuable . C50a1) (&who . C50a0) (&irritants . C509f) (&assertion . C509e) (&violation . C509d) (&error . C509c) (&serious . C509b) (&warning . C509a) (&message . C5099) (&condition . C5098) (define-condition-type . C5097) (define-enumeration . C5096) (define-record-type . C5095) (parent-rtd . C5094) (nongenerative . C5093) (opaque . C5092) (sealed . C5091) (protocol . C5090) (parent . C508f) (immutable . C508e) (mutable . C508d) (fields . C508c) (error-handling-mode . C508b) (file-options . C508a) (buffer-mode . C5089) (eol-style . C5088) (guard . C5087) (unsyntax-splicing . C5084) (unsyntax . C5083) (unquote-splicing . C5082) (unquote . C5081) (_ . C5080) (else . C507f) (=> . C507e) (... . C507d) (assert . C507c) (endianness . C507b) (do . C5078) (cond . C5077) (let* . C5076) (let . C5075) (let*-values . C5074) (let-values . C5073) (identifier-syntax . C5072) (with-syntax . C5071) (quasisyntax . C5070) (quasiquote . C506f) (syntax-rules . C506e) (record-constructor-descriptor . C506b) (record-type-descriptor . C506a) (case . C5069) (unless . C5067) (when . C5066) (or . C5065) (and . C5064) (if . C5063) (letrec* . C5062) (letrec . C5061) (case-lambda . C505f) (lambda . C505e) (syntax . C505d) (syntax-case . C505c) (quote . C505b) (letrec-syntax . C5059) (let-syntax . C5058) (set! . C5057) (begin . C5055) (define-syntax . C5053) (define . C5052)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C537b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . C3102) (quotient . C5238) (null-environment . C3100) (remainder . C5237) (modulo . C5236) (inexact->exact . C5235) (force . C5234) (exact->inexact . C5233) (make-promise . C5232) (delay . C507a)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C537c '(rnrs control) '(6) '() '() '() '((do . C5078) (unless . C5067) (when . C5066) (case-lambda . C505f)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C537d '(rnrs eval) '(6) '() '() '() '((eval . C3106) (environment . C30fe)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C537e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . C522e) (set-car! . C522d)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C537f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . C5230) (string-set! . C522f)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5380 '(rnrs programs) '(6) '() '() '() '((exit . C5231) (command-line . C4f16)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5381 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . C2e73) (identifier? . C3128) (generate-temporaries . C3114) (free-identifier=? . C3116) (syntax->datum . C312c) (datum->syntax . C312a) (bound-identifier=? . C3118) (syntax-violation . C3126) (unsyntax-splicing . C5084) (unsyntax . C5083) (_ . C5080) (... . C507d) (with-syntax . C5071) (quasisyntax . C5070) (syntax . C505d) (syntax-case . C505c)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5382 '(rnrs files) '(6) '() '() '() '((delete-file . C52a1) (file-exists? . C52a0) (make-i/o-write-error . C4d0a) (make-i/o-read-error . C4cf5) (make-i/o-port-error . C4dab) (make-i/o-invalid-position-error . C4d21) (make-i/o-filename-error . C4d3c) (make-i/o-file-protection-error . C4d55) (make-i/o-file-is-read-only-error . C4d6a) (make-i/o-file-does-not-exist-error . C4d94) (make-i/o-file-already-exists-error . C4d7f) (make-i/o-error . C4ce0) (i/o-write-error? . C4d0c) (i/o-read-error? . C4cf7) (i/o-port-error? . C4daf) (i/o-invalid-position-error? . C4d25) (i/o-filename-error? . C4d40) (i/o-file-protection-error? . C4d57) (i/o-file-is-read-only-error? . C4d6c) (i/o-file-does-not-exist-error? . C4d96) (i/o-file-already-exists-error? . C4d81) (i/o-error? . C4ce2) (i/o-error-position . C4d27) (i/o-error-port . C4db1) (i/o-error-filename . C4d42) (&i/o-port . C50af) (&i/o-file-does-not-exist . C50ae) (&i/o-file-already-exists . C50ad) (&i/o-file-is-read-only . C50ac) (&i/o-file-protection . C50ab) (&i/o-filename . C50aa) (&i/o-invalid-position . C50a9) (&i/o-write . C50a8) (&i/o-read . C50a7) (&i/o . C50a6)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5383 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . C529f) (vector-sort . C529e) (list-sort . C529d)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5384 '(rnrs base) '(6) '() '() '() '((zero? . C5156) (vector? . C5155) (vector-set! . C5154) (vector-ref . C5153) (vector-map . C5152) (vector-length . C5151) (vector-for-each . C5150) (vector-fill! . C514f) (vector->list . C514e) (vector . C514d) (values . C514c) (truncate . C514b) (tan . C514a) (symbol? . C5149) (symbol=? . C5148) (symbol->string . C5147) (substring . C5146) (string? . C5145) (string>? . C5144) (string>=? . C5143) (string=? . C5142) (string<? . C5141) (string<=? . C5140) (string-ref . C513f) (string-length . C513e) (string-for-each . C513d) (string-copy . C513c) (string-append . C513b) (string->symbol . C513a) (string->number . C5139) (string->list . C5138) (string . C5137) (sqrt . C5136) (sin . C5135) (round . C5134) (reverse . C5133) (real? . C5132) (real-valued? . C5131) (real-part . C5130) (rationalize . C512f) (rational? . C512e) (rational-valued? . C512d) (procedure? . C512c) (positive? . C512b) (pair? . C512a) (odd? . C5129) (numerator . C5128) (number? . C5127) (number->string . C5126) (null? . C5125) (not . C5124) (negative? . C5123) (nan? . C5122) (min . C5121) (max . C5120) (map . C511f) (make-vector . C511e) (make-string . C511d) (make-rectangular . C511c) (make-polar . C511b) (magnitude . C511a) (log . C5119) (list? . C5118) (list-tail . C5117) (list-ref . C5116) (list->vector . C5115) (list->string . C5114) (list . C5113) (length . C5112) (lcm . C5111) (integer? . C5110) (integer-valued? . C510f) (integer->char . C510e) (infinite? . C510d) (inexact? . C510c) (inexact . C510b) (imag-part . C510a) (gcd . C5109) (for-each . C5108) (floor . C5107) (finite? . C5106) (expt . C5105) (exp . C5104) (exact? . C5103) (exact-integer-sqrt . C5102) (exact . C5101) (even? . C5100) (error . C50ff) (eqv? . C50fe) (equal? . C50fd) (eq? . C50fc) (dynamic-wind . C50fb) (div0-and-mod0 . C50fa) (mod0 . C50f9) (div0 . C50f8) (div-and-mod . C50f7) (mod . C50f6) (div . C50f5) (denominator . C50f4) (cos . C50f3) (cons . C50f2) (complex? . C50f1) (char? . C50f0) (char>? . C50ef) (char>=? . C50ee) (char=? . C50ed) (char<? . C50ec) (char<=? . C50eb) (char->integer . C50ea) (ceiling . C50e9) (call-with-values . C50e8) (call/cc . C50e7) (call-with-current-continuation . C50e6) (cddddr . C50e5) (cdddar . C50e4) (cddadr . C50e3) (cddaar . C50e2) (cdaddr . C50e1) (cdadar . C50e0) (cdaadr . C50df) (cdaaar . C50de) (cadddr . C50dd) (caddar . C50dc) (cadadr . C50db) (cadaar . C50da) (caaddr . C50d9) (caadar . C50d8) (caaadr . C50d7) (caaaar . C50d6) (cdddr . C50d5) (cddar . C50d4) (cdadr . C50d3) (cdaar . C50d2) (caddr . C50d1) (cadar . C50d0) (caadr . C50cf) (caaar . C50ce) (cddr . C50cd) (cdar . C50cc) (cadr . C50cb) (caar . C50ca) (cdr . C50c9) (car . C50c8) (boolean? . C50c7) (boolean=? . C50c6) (atan . C50c5) (assertion-violation . C50c4) (asin . C50c3) (apply . C50c2) (append . C50c1) (angle . C50c0) (acos . C50bf) (abs . C50be) (/ . C50bd) (* . C50bc) (- . C50bb) (+ . C50ba) (>= . C50b9) (> . C50b8) (= . C50b7) (<= . C50b6) (< . C50b5) (unquote-splicing . C5082) (unquote . C5081) (_ . C5080) (else . C507f) (=> . C507e) (... . C507d) (assert . C507c) (cond . C5077) (let* . C5076) (let . C5075) (let*-values . C5074) (let-values . C5073) (identifier-syntax . C5072) (quasiquote . C506f) (syntax-rules . C506e) (case . C5069) (or . C5065) (and . C5064) (if . C5063) (letrec* . C5062) (letrec . C5061) (lambda . C505e) (quote . C505b) (letrec-syntax . C5059) (let-syntax . C5058) (set! . C5057) (begin . C5055) (define-syntax . C5053) (define . C5052)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5385 '(rnrs lists) '(6) '() '() '() '((remove . C522c) (remv . C522b) (remp . C522a) (remq . C5229) (partition . C5228) (memv . C5227) (memq . C5226) (memp . C5225) (member . C5224) (exists . C5223) (for-all . C5222) (fold-right . C5221) (fold-left . C5220) (find . C521f) (filter . C521e) (cons* . C521d) (assv . C521c) (assq . C521b) (assp . C521a) (assoc . C5219)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5386 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . C5287) (call-with-input-file . C5286) (write-char . C5285) (write . C5284) (with-output-to-file . C5283) (with-input-from-file . C5282) (read-char . C5281) (read . C5280) (peek-char . C527f) (open-output-file . C527e) (open-input-file . C527d) (newline . C527c) (display . C527b) (close-output-port . C527a) (close-input-port . C5279) (eof-object? . C5278) (eof-object . C5277) (current-error-port . C5276) (current-output-port . C5275) (current-input-port . C5274) (output-port? . C5273) (input-port? . C5272) (make-i/o-write-error . C4d0a) (make-i/o-read-error . C4cf5) (make-i/o-port-error . C4dab) (make-i/o-invalid-position-error . C4d21) (make-i/o-filename-error . C4d3c) (make-i/o-file-protection-error . C4d55) (make-i/o-file-is-read-only-error . C4d6a) (make-i/o-file-does-not-exist-error . C4d94) (make-i/o-file-already-exists-error . C4d7f) (make-i/o-error . C4ce0) (i/o-write-error? . C4d0c) (i/o-read-error? . C4cf7) (i/o-port-error? . C4daf) (i/o-invalid-position-error? . C4d25) (i/o-filename-error? . C4d40) (i/o-file-protection-error? . C4d57) (i/o-file-is-read-only-error? . C4d6c) (i/o-file-does-not-exist-error? . C4d96) (i/o-file-already-exists-error? . C4d81) (i/o-error? . C4ce2) (i/o-error-position . C4d27) (i/o-error-port . C4db1) (i/o-error-filename . C4d42) (&i/o-port . C50af) (&i/o-file-does-not-exist . C50ae) (&i/o-file-already-exists . C50ad) (&i/o-file-is-read-only . C50ac) (&i/o-file-protection . C50ab) (&i/o-filename . C50aa) (&i/o-invalid-position . C50a9) (&i/o-write . C50a8) (&i/o-read . C50a7) (&i/o . C50a6)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5387 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . C5248) (utf32->string . C51fd) (utf16->string . C51fc) (utf8->string . C51fb) (uint-list->bytevector . C51fa) (u8-list->bytevector . C51f9) (string->utf8 . C51f8) (string->utf32 . C51f7) (string->utf16 . C51f6) (sint-list->bytevector . C51f5) (native-endianness . C51f4) (bytevector? . C51f3) (bytevector=? . C51f2) (bytevector-uint-set! . C51f1) (bytevector-uint-ref . C51f0) (bytevector-u8-set! . C51ef) (bytevector-u8-ref . C51ee) (bytevector-u64-set! . C51ed) (bytevector-u64-ref . C51ec) (bytevector-u64-native-set! . C51eb) (bytevector-u64-native-ref . C51ea) (bytevector-u32-set! . C51e9) (bytevector-u32-ref . C51e8) (bytevector-u32-native-set! . C51e7) (bytevector-u32-native-ref . C51e6) (bytevector-u16-set! . C51e5) (bytevector-u16-ref . C51e4) (bytevector-u16-native-set! . C51e3) (bytevector-u16-native-ref . C51e2) (bytevector-sint-set! . C51e1) (bytevector-sint-ref . C51e0) (bytevector-s8-set! . C51df) (bytevector-s8-ref . C51de) (bytevector-s64-set! . C51dd) (bytevector-s64-ref . C51dc) (bytevector-s64-native-set! . C51db) (bytevector-s64-native-ref . C51da) (bytevector-s32-set! . C51d9) (bytevector-s32-ref . C51d8) (bytevector-s32-native-set! . C51d7) (bytevector-s32-native-ref . C51d6) (bytevector-s16-set! . C51d5) (bytevector-s16-ref . C51d4) (bytevector-s16-native-set! . C51d3) (bytevector-s16-native-ref . C51d2) (bytevector-length . C51d1) (bytevector-ieee-single-ref . C51d0) (bytevector-ieee-single-set! . C51cf) (bytevector-ieee-single-native-set! . C51ce) (bytevector-ieee-single-native-ref . C51cd) (bytevector-ieee-double-set! . C51cc) (bytevector-ieee-double-ref . C51cb) (bytevector-ieee-double-native-set! . C51ca) (bytevector-ieee-double-native-ref . C51c9) (bytevector-fill! . C51c8) (bytevector-copy! . C51c7) (bytevector-copy . C51c6) (bytevector->uint-list . C51c5) (bytevector->u8-list . C51c4) (bytevector->sint-list . C51c3) (endianness . C507b)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5388 '(rnrs unicode) '(6) '() '() '() '((string-upcase . C52cf) (string-titlecase . C52ce) (string-normalize-nfkd . C52cd) (string-normalize-nfkc . C52cc) (string-normalize-nfd . C52cb) (string-normalize-nfc . C52ca) (string-foldcase . C52c9) (string-downcase . C52c8) (string-ci>? . C52c7) (string-ci>=? . C52c6) (string-ci=? . C52c5) (string-ci<? . C52c4) (string-ci<=? . C52c3) (char-whitespace? . C52c2) (char-upper-case? . C52c1) (char-title-case? . C52c0) (char-numeric? . C52bf) (char-lower-case? . C52be) (char-general-category . C52bd) (char-upcase . C52bc) (char-titlecase . C52bb) (char-foldcase . C52ba) (char-downcase . C52b9) (char-ci>? . C52b8) (char-ci>=? . C52b7) (char-ci=? . C52b6) (char-ci<? . C52b5) (char-ci<=? . C52b4) (char-alphabetic? . C52b3)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5389 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . C5212) (raise-continuable . C5211) (raise . C5210) (guard . C5087) (else . C507f) (=> . C507e)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C538a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . C5167) (bitwise-reverse-bit-field . C5166) (bitwise-length . C5165) (bitwise-if . C5164) (bitwise-first-bit-set . C5163) (bitwise-copy-bit-field . C5162) (bitwise-copy-bit . C5161) (bitwise-bit-set? . C5160) (bitwise-bit-field . C515f) (bitwise-bit-count . C515e) (bitwise-xor . C515d) (bitwise-ior . C515c) (bitwise-and . C515b) (bitwise-not . C515a) (bitwise-arithmetic-shift-right . C5159) (bitwise-arithmetic-shift-left . C5158) (bitwise-arithmetic-shift . C5157)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C538b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . C5194) (fxxor . C5193) (fxrotate-bit-field . C5192) (fxreverse-bit-field . C5191) (fxpositive? . C5190) (fxodd? . C518f) (fxnot . C518e) (fxnegative? . C518d) (fxmod0 . C518c) (fxmod . C518b) (fxmin . C518a) (fxmax . C5189) (fxlength . C5188) (fxior . C5187) (fxif . C5186) (fxfirst-bit-set . C5185) (fxeven? . C5184) (fxdiv0-and-mod0 . C5183) (fxdiv0 . C5182) (fxdiv-and-mod . C5181) (fxdiv . C5180) (fxcopy-bit-field . C517f) (fxcopy-bit . C517e) (fxbit-set? . C517d) (fxbit-field . C517c) (fxbit-count . C517b) (fxarithmetic-shift-right . C517a) (fxarithmetic-shift-left . C5179) (fxarithmetic-shift . C5178) (fxand . C5177) (fx>? . C5176) (fx>=? . C5175) (fx=? . C5174) (fx<? . C5173) (fx<=? . C5172) (fx-/carry . C5171) (fx- . C5170) (fx+/carry . C516f) (fx+ . C516e) (fx*/carry . C516d) (fx* . C516c) (greatest-fixnum . C516b) (least-fixnum . C516a) (fixnum-width . C5169) (fixnum? . C5168)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C538c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . C4e0b) (no-infinities-violation? . C4df6) (make-no-nans-violation . C4e09) (make-no-infinities-violation . C4df4) (real->flonum . C51c2) (flzero? . C51c1) (fltruncate . C51c0) (fltan . C51bf) (flsqrt . C51be) (flsin . C51bd) (flround . C51bc) (flpositive? . C51bb) (flonum? . C51ba) (flodd? . C51b9) (flnumerator . C51b8) (flnegative? . C51b7) (flnan? . C51b6) (flmod0 . C51b5) (flmod . C51b4) (flmin . C51b3) (flmax . C51b2) (fllog . C51b1) (flinteger? . C51b0) (flinfinite? . C51af) (flfloor . C51ae) (flfinite? . C51ad) (flexpt . C51ac) (flexp . C51ab) (fleven? . C51aa) (fldiv0-and-mod0 . C51a9) (fldiv0 . C51a8) (fldiv-and-mod . C51a7) (fldiv . C51a6) (fldenominator . C51a5) (flcos . C51a4) (flceiling . C51a3) (flatan . C51a2) (flasin . C51a1) (flacos . C51a0) (flabs . C519f) (fl>? . C519e) (fl>=? . C519d) (fl=? . C519c) (fl<? . C519b) (fl<=? . C519a) (fl/ . C5199) (fl- . C5198) (fl+ . C5197) (fl* . C5196) (fixnum->flonum . C5195) (&no-nans . C50b3) (&no-infinities . C50b2)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C538d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . C529c) (string-ci-hash . C529b) (string-hash . C529a) (equal-hash . C5299) (hashtable-equivalence-function . C5298) (make-hashtable . C5297) (hashtable-hash-function . C5296) (make-eqv-hashtable . C5295) (make-eq-hashtable . C5294) (hashtable? . C5293) (hashtable-update! . C5292) (hashtable-size . C5291) (hashtable-set! . C5290) (hashtable-ref . C528f) (hashtable-mutable? . C528e) (hashtable-keys . C528d) (hashtable-entries . C528c) (hashtable-delete! . C528b) (hashtable-copy . C528a) (hashtable-contains? . C5289) (hashtable-clear! . C5288)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C538e '(rnrs io ports) '(6) '() '() '() '((eof-object? . C5278) (eof-object . C5277) (current-error-port . C5276) (current-output-port . C5275) (current-input-port . C5274) (output-port? . C5273) (input-port? . C5272) (utf-8-codec . C5271) (utf-16-codec . C5270) (transcoder-error-handling-mode . C526f) (transcoder-eol-style . C526e) (transcoder-codec . C526d) (transcoded-port . C526c) (textual-port? . C526b) (string->bytevector . C526a) (standard-output-port . C5269) (standard-input-port . C5268) (standard-error-port . C5267) (set-port-position! . C5266) (put-u8 . C5265) (put-string . C5264) (put-datum . C5263) (put-char . C5262) (put-bytevector . C5261) (port? . C5260) (port-transcoder . C525f) (port-position . C525e) (port-has-set-port-position!? . C525d) (port-has-port-position? . C525c) (port-eof? . C525b) (output-port-buffer-mode . C525a) (open-string-output-port . C5259) (open-string-input-port . C5258) (open-file-output-port . C5257) (open-file-input/output-port . C5256) (open-file-input-port . C5255) (open-bytevector-output-port . C5254) (open-bytevector-input-port . C5253) (native-transcoder . C5252) (native-eol-style . C5251) (make-transcoder . C5250) (latin-1-codec . C524f) (make-i/o-write-error . C4d0a) (make-i/o-read-error . C4cf5) (make-i/o-port-error . C4dab) (make-i/o-invalid-position-error . C4d21) (make-i/o-filename-error . C4d3c) (make-i/o-file-protection-error . C4d55) (make-i/o-file-is-read-only-error . C4d6a) (make-i/o-file-does-not-exist-error . C4d94) (make-i/o-file-already-exists-error . C4d7f) (make-i/o-error . C4ce0) (make-i/o-encoding-error . C4ddb) (make-i/o-decoding-error . C4dc4) (make-custom-textual-output-port . C524e) (make-custom-textual-input/output-port . C524d) (make-custom-textual-input-port . C524c) (make-custom-binary-output-port . C524b) (make-custom-binary-input/output-port . C524a) (make-custom-binary-input-port . C5249) (lookahead-u8 . C5247) (lookahead-char . C5246) (i/o-write-error? . C4d0c) (i/o-read-error? . C4cf7) (i/o-port-error? . C4daf) (i/o-invalid-position-error? . C4d25) (i/o-filename-error? . C4d40) (i/o-file-protection-error? . C4d57) (i/o-file-is-read-only-error? . C4d6c) (i/o-file-does-not-exist-error? . C4d96) (i/o-file-already-exists-error? . C4d81) (i/o-error? . C4ce2) (i/o-error-position . C4d27) (i/o-error-port . C4db1) (i/o-error-filename . C4d42) (i/o-encoding-error? . C4ddf) (i/o-encoding-error-char . C4de1) (i/o-decoding-error? . C4dc6) (get-u8 . C5245) (get-string-n! . C5244) (get-string-n . C5243) (get-string-all . C5242) (get-line . C5241) (get-datum . C5240) (get-char . C523f) (get-bytevector-some . C523e) (get-bytevector-n! . C523d) (get-bytevector-n . C523c) (get-bytevector-all . C523b) (flush-output-port . C523a) (close-port . C5239) (call-with-string-output-port . C5218) (call-with-port . C5217) (call-with-bytevector-output-port . C5216) (bytevector->string . C5215) (buffer-mode? . C5214) (binary-port? . C5213) (&i/o-encoding . C50b1) (&i/o-decoding . C50b0) (&i/o-port . C50af) (&i/o-file-does-not-exist . C50ae) (&i/o-file-already-exists . C50ad) (&i/o-file-is-read-only . C50ac) (&i/o-file-protection . C50ab) (&i/o-filename . C50aa) (&i/o-invalid-position . C50a9) (&i/o-write . C50a8) (&i/o-read . C50a7) (&i/o . C50a6) (error-handling-mode . C508b) (file-options . C508a) (buffer-mode . C5089) (eol-style . C5088)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C538f '(rnrs enums) '(6) '() '() '() '((make-enumeration . C520f) (enum-set=? . C520e) (enum-set-universe . C520d) (enum-set-union . C520c) (enum-set-subset? . C520b) (enum-set-projection . C520a) (enum-set-member? . C5209) (enum-set-intersection . C5208) (enum-set-indexer . C5207) (enum-set-difference . C5206) (enum-set-constructor . C5205) (enum-set-complement . C5204) (enum-set->list . C5203) (define-enumeration . C5096)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5390 '(rnrs conditions) '(6) '() '() '() '((who-condition? . C4c56) (warning? . C4bce) (violation? . C4c0d) (undefined-violation? . C4ccd) (syntax-violation? . C4cb4) (syntax-violation-subform . C4cb8) (syntax-violation-form . C4cb6) (syntax-violation . C3126) (simple-conditions . C5202) (serious-condition? . C4be3) (non-continuable-violation? . C4c6d) (message-condition? . C4bb7) (make-who-condition . C4c52) (make-warning . C4bcc) (make-violation . C4c0b) (make-undefined-violation . C4ccb) (make-syntax-violation . C4cae) (make-serious-condition . C4be1) (make-non-continuable-violation . C4c6b) (make-message-condition . C4bb3) (make-lexical-violation . C4c95) (make-irritants-condition . C4c37) (make-implementation-restriction-violation . C4c80) (make-error . C4bf6) (make-assertion-violation . C4c20) (lexical-violation? . C4c97) (irritants-condition? . C4c3b) (implementation-restriction-violation? . C4c82) (error? . C4bf8) (condition-who . C4c58) (condition-predicate . C5201) (condition-message . C4bb9) (condition-irritants . C4c3d) (condition-accessor . C5200) (condition . C51ff) (assertion-violation? . C4c22) (condition? . C51fe) (&undefined . C50a5) (&syntax . C50a4) (&lexical . C50a3) (&implementation-restriction . C50a2) (&non-continuable . C50a1) (&who . C50a0) (&irritants . C509f) (&assertion . C509e) (&violation . C509d) (&error . C509c) (&serious . C509b) (&warning . C509a) (&message . C5099) (&condition . C5098) (define-condition-type . C5097)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5391 '(rnrs records inspection) '(6) '() '() '() '((record? . C52ab) (record-type-uid . C52aa) (record-type-sealed? . C52a9) (record-type-parent . C52a8) (record-type-opaque? . C52a7) (record-type-name . C52a6) (record-type-generative? . C52a5) (record-type-field-names . C52a4) (record-rtd . C52a3) (record-field-mutable? . C52a2)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5392 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . C52b2) (record-predicate . C52b1) (record-mutator . C52b0) (record-constructor . C52af) (record-accessor . C52ae) (make-record-type-descriptor . C52ad) (make-record-constructor-descriptor . C52ac)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5393 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . C5095) (parent-rtd . C5094) (nongenerative . C5093) (opaque . C5092) (sealed . C5091) (protocol . C5090) (parent . C508f) (immutable . C508e) (mutable . C508d) (fields . C508c) (record-constructor-descriptor . C506b) (record-type-descriptor . C506a)) '() values values '#f '#f '#t '#f) (C2c6b@C2ab7@install-library 'C5394 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . C4e0f) (&no-nans-rtd . C4e0d) (&no-infinities-rcd . C4dfa) (&no-infinities-rtd . C4df8) (&i/o-encoding-rcd . C4de5) (&i/o-encoding-rtd . C4de3) (&i/o-decoding-rcd . C4dca) (&i/o-decoding-rtd . C4dc8) (&i/o-port-rcd . C4db5) (&i/o-port-rtd . C4db3) (&i/o-file-does-not-exist-rcd . C4d9a) (&i/o-file-does-not-exist-rtd . C4d98) (&i/o-file-already-exists-rcd . C4d85) (&i/o-file-already-exists-rtd . C4d83) (&i/o-file-is-read-only-rcd . C4d70) (&i/o-file-is-read-only-rtd . C4d6e) (&i/o-file-protection-rcd . C4d5b) (&i/o-file-protection-rtd . C4d59) (&i/o-filename-rcd . C4d46) (&i/o-filename-rtd . C4d44) (&i/o-invalid-position-rcd . C4d2b) (&i/o-invalid-position-rtd . C4d29) (&i/o-write-rcd . C4d10) (&i/o-write-rtd . C4d0e) (&i/o-read-rcd . C4cfb) (&i/o-read-rtd . C4cf9) (&i/o-rcd . C4ce6) (&i/o-rtd . C4ce4) (&undefined-rcd . C4cd1) (&undefined-rtd . C4ccf) (&syntax-rcd . C4cbc) (&syntax-rtd . C4cba) (&lexical-rcd . C4c9b) (&lexical-rtd . C4c99) (&implementation-restriction-rcd . C4c86) (&implementation-restriction-rtd . C4c84) (&non-continuable-rcd . C4c71) (&non-continuable-rtd . C4c6f) (&who-rcd . C4c5c) (&who-rtd . C4c5a) (&irritants-rcd . C4c41) (&irritants-rtd . C4c3f) (&assertion-rcd . C4c26) (&assertion-rtd . C4c24) (&violation-rcd . C4c11) (&violation-rtd . C4c0f) (&error-rcd . C4bfc) (&error-rtd . C4bfa) (&serious-rcd . C4be7) (&serious-rtd . C4be5) (&warning-rcd . C4bd2) (&warning-rtd . C4bd0) (&message-rcd . C4bbd) (&message-rtd . C4bbb) (&condition-rcd . C4b5e) (&condition-rtd . C4b5c) (syntax-error . C3122) (syntax-dispatch . C3046) (pretty-print . C5374) (eval-core . C5373) (set-symbol-value! . C5372) (symbol-value . C5371) (gensym . C5370) (void . C536f) (load . C4f1c) (interaction-environment . C3132) (char-ready? . C536e) (regexp? . C536d) (read-line . C536c) (ungensym . C536b) (alist->eq-hash-table . C536a) (assoc-ref . C5369) (print . C5368) (format . C5367) (host-os . C5366) (library-path . C2a96) (standard-library-path . C5365) (file-newer? . C5364) (stat-mtime . C5363) (write-to-file . C5362) (file->list . C5361) (file->string . C5360) (digit->integer . C535f) (call-with-string-input-port . C535e) (call-with-string-io . C535d) (string-split . C535c) (bytevector-for-each . C535b) (string->regexp . C535a) (rxmatch . C5359) (regexp-replace-all . C5358) (hashtable-for-each . C5357) (call-process . C5356) (local-tz-offset . C5355) (microseconds . C5354) (directory-list . C5353) (set-current-directory! . C5352) (expand-path . C5351) (current-directory . C5350) (%spawn . C534f) (%waitpid . C534e) (simple-struct-name . C534d) (simple-struct-set! . C534c) (simple-struct-ref . C534b) (make-simple-struct . C534a) (simple-struct? . C5349) (pointer-ref-c-int64 . C5348) (pointer-ref-c-int32 . C5347) (pointer-ref-c-int16 . C5346) (pointer-ref-c-int8 . C5345) (pointer-ref-c-uint64 . C5344) (pointer-ref-c-uint32 . C5343) (pointer-ref-c-uint16 . C5342) (pointer-ref-c-uint8 . C5341) (pointer-set-c-uint64! . C5340) (pointer-set-c-uint32! . C533f) (pointer-set-c-uint16! . C533e) (pointer-set-c-uint8! . C533d) (pointer-set-c-int64! . C533c) (pointer-set-c-int32! . C533b) (pointer-set-c-int16! . C533a) (pointer-set-c-int8! . C5339) (pointer-set-c-pointer! . C5338) (pointer-set-c-double! . C5337) (pointer-set-c-float! . C5336) (pointer-set-c-long-long! . C5335) (pointer-set-c-long! . C5334) (pointer-set-c-int! . C5333) (pointer-set-c-short! . C5332) (pointer-set-c-char! . C5331) (pointer-ref-c-pointer . C5330) (pointer-ref-c-double . C532f) (pointer-ref-c-float . C532e) (pointer-ref-c-unsigned-long-long . C532d) (pointer-ref-c-signed-long-long . C532c) (pointer-ref-c-unsigned-long . C532b) (pointer-ref-c-signed-long . C532a) (pointer-ref-c-unsigned-int . C5329) (pointer-ref-c-signed-int . C5328) (pointer-ref-c-unsigned-short . C5327) (pointer-ref-c-signed-short . C5326) (pointer-ref-c-unsigned-char . C5325) (pointer-ref-c-signed-char . C5324) (pointer->integer . C5323) (integer->pointer . C5322) (pointer? . C5321) (shared-errno . C5320) (%ffi-supported? . C531f) (%ffi-pointer->string . C531e) (%ffi-call->string-or-zero . C531d) (%ffi-call->double . C531c) (%ffi-call->void* . C531b) (%ffi-call->void . C531a) (%ffi-call->char . C5319) (%ffi-call->int . C5318) (%ffi-lookup . C5317) (%ffi-open . C5316) (%fork . C5315) (%pipe . C5314) (p . C5313) (open-output-string . C5312) (get-output-string . C5311) (file-stat-ctime . C5310) (file-stat-atime . C530f) (file-stat-mtime . C530e) (file-size-in-bytes . C530d) (file-writable? . C530c) (file-executable? . C530b) (file-readable? . C530a) (file-regular? . C5309) (file-symbolic-link? . C5308) (file-directory? . C5307) (create-symbolic-link . C5306) (rename-file . C5305) (delete-directory . C5304) (create-directory . C5303) (create-mosh-cache-dir . C5302) (get-environment-variables . C5301) (get-environment-variable . C5300) (join-wraps . C52ff) (id->real-label . C52fe) (same-marks? . C52fd) (same-marks*? . C52fc) (get-timeofday . C52fb) (get-command-line . C52fa) (sys-display . C52f9) (whereis . C52f8) (register . C52f7) (vm-join! . C52f6) (vm-set-value! . C52f5) (vm? . C52f4) (main-vm? . C52f3) (vm-eval . C52f2) (vm-self . C52f1) (vm-start! . C52f0) (make-vm . C52ef) (mutex-try-lock! . C52ee) (mutex-unlock! . C52ed) (mutex-lock! . C52ec) (mutex? . C52eb) (make-mutex . C52ea) (condition-variable-notify-all! . C52e9) (condition-variable-notify! . C52e8) (condition-variable-wait! . C52e7) (make-condition-variable . C52e6) (mosh-executable-path . C52e5) (make-file-options . C52e4) (source-info . C52e3) (make-compiler-instruction . C52e2) (make-instruction . C52e1) (set-source-info! . C52e0) (bignum? . C52df) (fast-equal? . C52de) (fasl-read . C52dd) (fasl-write . C52dc) (time-usage . C52db) (os-constant . C52da) (make-parameter . C287f) (socket-port . C52d9) (socket-shutdown . C52d8) (socket-close . C52d7) (socket-send . C52d6) (socket-recv! . C52d5) (socket-recv . C52d4) (make-server-socket . C52d3) (make-client-socket . C52d2) (socket-accept . C52d1) (socket? . C52d0) (string-upcase . C52cf) (string-titlecase . C52ce) (string-normalize-nfkd . C52cd) (string-normalize-nfkc . C52cc) (string-normalize-nfd . C52cb) (string-normalize-nfc . C52ca) (string-foldcase . C52c9) (string-downcase . C52c8) (string-ci>? . C52c7) (string-ci>=? . C52c6) (string-ci=? . C52c5) (string-ci<? . C52c4) (string-ci<=? . C52c3) (char-whitespace? . C52c2) (char-upper-case? . C52c1) (char-title-case? . C52c0) (char-numeric? . C52bf) (char-lower-case? . C52be) (char-general-category . C52bd) (char-upcase . C52bc) (char-titlecase . C52bb) (char-foldcase . C52ba) (char-downcase . C52b9) (char-ci>? . C52b8) (char-ci>=? . C52b7) (char-ci=? . C52b6) (char-ci<? . C52b5) (char-ci<=? . C52b4) (char-alphabetic? . C52b3) (make-variable-transformer . C2e73) (identifier? . C3128) (generate-temporaries . C3114) (free-identifier=? . C3116) (syntax->datum . C312c) (datum->syntax . C312a) (bound-identifier=? . C3118) (record-type-descriptor? . C52b2) (record-predicate . C52b1) (record-mutator . C52b0) (record-constructor . C52af) (record-accessor . C52ae) (make-record-type-descriptor . C52ad) (make-record-constructor-descriptor . C52ac) (record? . C52ab) (record-type-uid . C52aa) (record-type-sealed? . C52a9) (record-type-parent . C52a8) (record-type-opaque? . C52a7) (record-type-name . C52a6) (record-type-generative? . C52a5) (record-type-field-names . C52a4) (record-rtd . C52a3) (record-field-mutable? . C52a2) (delete-file . C52a1) (file-exists? . C52a0) (vector-sort! . C529f) (vector-sort . C529e) (list-sort . C529d) (symbol-hash . C529c) (string-ci-hash . C529b) (string-hash . C529a) (equal-hash . C5299) (hashtable-equivalence-function . C5298) (make-hashtable . C5297) (hashtable-hash-function . C5296) (make-eqv-hashtable . C5295) (make-eq-hashtable . C5294) (hashtable? . C5293) (hashtable-update! . C5292) (hashtable-size . C5291) (hashtable-set! . C5290) (hashtable-ref . C528f) (hashtable-mutable? . C528e) (hashtable-keys . C528d) (hashtable-entries . C528c) (hashtable-delete! . C528b) (hashtable-copy . C528a) (hashtable-contains? . C5289) (hashtable-clear! . C5288) (call-with-output-file . C5287) (call-with-input-file . C5286) (write-char . C5285) (write . C5284) (with-output-to-file . C5283) (with-input-from-file . C5282) (read-char . C5281) (read . C5280) (peek-char . C527f) (open-output-file . C527e) (open-input-file . C527d) (newline . C527c) (display . C527b) (close-output-port . C527a) (close-input-port . C5279) (eof-object? . C5278) (eof-object . C5277) (current-error-port . C5276) (current-output-port . C5275) (current-input-port . C5274) (output-port? . C5273) (input-port? . C5272) (utf-8-codec . C5271) (utf-16-codec . C5270) (transcoder-error-handling-mode . C526f) (transcoder-eol-style . C526e) (transcoder-codec . C526d) (transcoded-port . C526c) (textual-port? . C526b) (string->bytevector . C526a) (standard-output-port . C5269) (standard-input-port . C5268) (standard-error-port . C5267) (set-port-position! . C5266) (put-u8 . C5265) (put-string . C5264) (put-datum . C5263) (put-char . C5262) (put-bytevector . C5261) (port? . C5260) (port-transcoder . C525f) (port-position . C525e) (port-has-set-port-position!? . C525d) (port-has-port-position? . C525c) (port-eof? . C525b) (output-port-buffer-mode . C525a) (open-string-output-port . C5259) (open-string-input-port . C5258) (open-file-output-port . C5257) (open-file-input/output-port . C5256) (open-file-input-port . C5255) (open-bytevector-output-port . C5254) (open-bytevector-input-port . C5253) (native-transcoder . C5252) (native-eol-style . C5251) (make-transcoder . C5250) (latin-1-codec . C524f) (make-i/o-write-error . C4d0a) (make-i/o-read-error . C4cf5) (make-i/o-port-error . C4dab) (make-i/o-invalid-position-error . C4d21) (make-i/o-filename-error . C4d3c) (make-i/o-file-protection-error . C4d55) (make-i/o-file-is-read-only-error . C4d6a) (make-i/o-file-does-not-exist-error . C4d94) (make-i/o-file-already-exists-error . C4d7f) (make-i/o-error . C4ce0) (make-i/o-encoding-error . C4ddb) (make-i/o-decoding-error . C4dc4) (make-custom-textual-output-port . C524e) (make-custom-textual-input/output-port . C524d) (make-custom-textual-input-port . C524c) (make-custom-binary-output-port . C524b) (make-custom-binary-input/output-port . C524a) (make-custom-binary-input-port . C5249) (make-bytevector . C5248) (lookahead-u8 . C5247) (lookahead-char . C5246) (i/o-write-error? . C4d0c) (i/o-read-error? . C4cf7) (i/o-port-error? . C4daf) (i/o-invalid-position-error? . C4d25) (i/o-filename-error? . C4d40) (i/o-file-protection-error? . C4d57) (i/o-file-is-read-only-error? . C4d6c) (i/o-file-does-not-exist-error? . C4d96) (i/o-file-already-exists-error? . C4d81) (i/o-error? . C4ce2) (i/o-error-position . C4d27) (i/o-error-port . C4db1) (i/o-error-filename . C4d42) (i/o-encoding-error? . C4ddf) (i/o-encoding-error-char . C4de1) (i/o-decoding-error? . C4dc6) (get-u8 . C5245) (get-string-n! . C5244) (get-string-n . C5243) (get-string-all . C5242) (get-line . C5241) (get-datum . C5240) (get-char . C523f) (get-bytevector-some . C523e) (get-bytevector-n! . C523d) (get-bytevector-n . C523c) (get-bytevector-all . C523b) (flush-output-port . C523a) (close-port . C5239) (scheme-report-environment . C3102) (quotient . C5238) (null-environment . C3100) (remainder . C5237) (modulo . C5236) (inexact->exact . C5235) (force . C5234) (exact->inexact . C5233) (make-promise . C5232) (exit . C5231) (command-line . C4f16) (string-fill! . C5230) (string-set! . C522f) (set-cdr! . C522e) (set-car! . C522d) (remove . C522c) (remv . C522b) (remp . C522a) (remq . C5229) (partition . C5228) (memv . C5227) (memq . C5226) (memp . C5225) (member . C5224) (exists . C5223) (for-all . C5222) (fold-right . C5221) (fold-left . C5220) (find . C521f) (filter . C521e) (cons* . C521d) (assv . C521c) (assq . C521b) (assp . C521a) (assoc . C5219) (call-with-string-output-port . C5218) (call-with-port . C5217) (call-with-bytevector-output-port . C5216) (bytevector->string . C5215) (buffer-mode? . C5214) (binary-port? . C5213) (with-exception-handler . C5212) (raise-continuable . C5211) (raise . C5210) (eval . C3106) (environment . C30fe) (make-enumeration . C520f) (enum-set=? . C520e) (enum-set-universe . C520d) (enum-set-union . C520c) (enum-set-subset? . C520b) (enum-set-projection . C520a) (enum-set-member? . C5209) (enum-set-intersection . C5208) (enum-set-indexer . C5207) (enum-set-difference . C5206) (enum-set-constructor . C5205) (enum-set-complement . C5204) (enum-set->list . C5203) (who-condition? . C4c56) (warning? . C4bce) (violation? . C4c0d) (undefined-violation? . C4ccd) (syntax-violation? . C4cb4) (syntax-violation-subform . C4cb8) (syntax-violation-form . C4cb6) (syntax-violation . C3126) (simple-conditions . C5202) (serious-condition? . C4be3) (non-continuable-violation? . C4c6d) (message-condition? . C4bb7) (make-who-condition . C4c52) (make-warning . C4bcc) (make-violation . C4c0b) (make-undefined-violation . C4ccb) (make-syntax-violation . C4cae) (make-serious-condition . C4be1) (make-non-continuable-violation . C4c6b) (make-message-condition . C4bb3) (make-lexical-violation . C4c95) (make-irritants-condition . C4c37) (make-implementation-restriction-violation . C4c80) (make-error . C4bf6) (make-assertion-violation . C4c20) (lexical-violation? . C4c97) (irritants-condition? . C4c3b) (implementation-restriction-violation? . C4c82) (error? . C4bf8) (condition-who . C4c58) (condition-predicate . C5201) (condition-message . C4bb9) (condition-irritants . C4c3d) (condition-accessor . C5200) (condition . C51ff) (assertion-violation? . C4c22) (condition? . C51fe) (utf32->string . C51fd) (utf16->string . C51fc) (utf8->string . C51fb) (uint-list->bytevector . C51fa) (u8-list->bytevector . C51f9) (string->utf8 . C51f8) (string->utf32 . C51f7) (string->utf16 . C51f6) (sint-list->bytevector . C51f5) (native-endianness . C51f4) (bytevector? . C51f3) (bytevector=? . C51f2) (bytevector-uint-set! . C51f1) (bytevector-uint-ref . C51f0) (bytevector-u8-set! . C51ef) (bytevector-u8-ref . C51ee) (bytevector-u64-set! . C51ed) (bytevector-u64-ref . C51ec) (bytevector-u64-native-set! . C51eb) (bytevector-u64-native-ref . C51ea) (bytevector-u32-set! . C51e9) (bytevector-u32-ref . C51e8) (bytevector-u32-native-set! . C51e7) (bytevector-u32-native-ref . C51e6) (bytevector-u16-set! . C51e5) (bytevector-u16-ref . C51e4) (bytevector-u16-native-set! . C51e3) (bytevector-u16-native-ref . C51e2) (bytevector-sint-set! . C51e1) (bytevector-sint-ref . C51e0) (bytevector-s8-set! . C51df) (bytevector-s8-ref . C51de) (bytevector-s64-set! . C51dd) (bytevector-s64-ref . C51dc) (bytevector-s64-native-set! . C51db) (bytevector-s64-native-ref . C51da) (bytevector-s32-set! . C51d9) (bytevector-s32-ref . C51d8) (bytevector-s32-native-set! . C51d7) (bytevector-s32-native-ref . C51d6) (bytevector-s16-set! . C51d5) (bytevector-s16-ref . C51d4) (bytevector-s16-native-set! . C51d3) (bytevector-s16-native-ref . C51d2) (bytevector-length . C51d1) (bytevector-ieee-single-ref . C51d0) (bytevector-ieee-single-set! . C51cf) (bytevector-ieee-single-native-set! . C51ce) (bytevector-ieee-single-native-ref . C51cd) (bytevector-ieee-double-set! . C51cc) (bytevector-ieee-double-ref . C51cb) (bytevector-ieee-double-native-set! . C51ca) (bytevector-ieee-double-native-ref . C51c9) (bytevector-fill! . C51c8) (bytevector-copy! . C51c7) (bytevector-copy . C51c6) (bytevector->uint-list . C51c5) (bytevector->u8-list . C51c4) (bytevector->sint-list . C51c3) (no-nans-violation? . C4e0b) (no-infinities-violation? . C4df6) (make-no-nans-violation . C4e09) (make-no-infinities-violation . C4df4) (real->flonum . C51c2) (flzero? . C51c1) (fltruncate . C51c0) (fltan . C51bf) (flsqrt . C51be) (flsin . C51bd) (flround . C51bc) (flpositive? . C51bb) (flonum? . C51ba) (flodd? . C51b9) (flnumerator . C51b8) (flnegative? . C51b7) (flnan? . C51b6) (flmod0 . C51b5) (flmod . C51b4) (flmin . C51b3) (flmax . C51b2) (fllog . C51b1) (flinteger? . C51b0) (flinfinite? . C51af) (flfloor . C51ae) (flfinite? . C51ad) (flexpt . C51ac) (flexp . C51ab) (fleven? . C51aa) (fldiv0-and-mod0 . C51a9) (fldiv0 . C51a8) (fldiv-and-mod . C51a7) (fldiv . C51a6) (fldenominator . C51a5) (flcos . C51a4) (flceiling . C51a3) (flatan . C51a2) (flasin . C51a1) (flacos . C51a0) (flabs . C519f) (fl>? . C519e) (fl>=? . C519d) (fl=? . C519c) (fl<? . C519b) (fl<=? . C519a) (fl/ . C5199) (fl- . C5198) (fl+ . C5197) (fl* . C5196) (fixnum->flonum . C5195) (fxzero? . C5194) (fxxor . C5193) (fxrotate-bit-field . C5192) (fxreverse-bit-field . C5191) (fxpositive? . C5190) (fxodd? . C518f) (fxnot . C518e) (fxnegative? . C518d) (fxmod0 . C518c) (fxmod . C518b) (fxmin . C518a) (fxmax . C5189) (fxlength . C5188) (fxior . C5187) (fxif . C5186) (fxfirst-bit-set . C5185) (fxeven? . C5184) (fxdiv0-and-mod0 . C5183) (fxdiv0 . C5182) (fxdiv-and-mod . C5181) (fxdiv . C5180) (fxcopy-bit-field . C517f) (fxcopy-bit . C517e) (fxbit-set? . C517d) (fxbit-field . C517c) (fxbit-count . C517b) (fxarithmetic-shift-right . C517a) (fxarithmetic-shift-left . C5179) (fxarithmetic-shift . C5178) (fxand . C5177) (fx>? . C5176) (fx>=? . C5175) (fx=? . C5174) (fx<? . C5173) (fx<=? . C5172) (fx-/carry . C5171) (fx- . C5170) (fx+/carry . C516f) (fx+ . C516e) (fx*/carry . C516d) (fx* . C516c) (greatest-fixnum . C516b) (least-fixnum . C516a) (fixnum-width . C5169) (fixnum? . C5168) (bitwise-rotate-bit-field . C5167) (bitwise-reverse-bit-field . C5166) (bitwise-length . C5165) (bitwise-if . C5164) (bitwise-first-bit-set . C5163) (bitwise-copy-bit-field . C5162) (bitwise-copy-bit . C5161) (bitwise-bit-set? . C5160) (bitwise-bit-field . C515f) (bitwise-bit-count . C515e) (bitwise-xor . C515d) (bitwise-ior . C515c) (bitwise-and . C515b) (bitwise-not . C515a) (bitwise-arithmetic-shift-right . C5159) (bitwise-arithmetic-shift-left . C5158) (bitwise-arithmetic-shift . C5157) (zero? . C5156) (vector? . C5155) (vector-set! . C5154) (vector-ref . C5153) (vector-map . C5152) (vector-length . C5151) (vector-for-each . C5150) (vector-fill! . C514f) (vector->list . C514e) (vector . C514d) (values . C514c) (truncate . C514b) (tan . C514a) (symbol? . C5149) (symbol=? . C5148) (symbol->string . C5147) (substring . C5146) (string? . C5145) (string>? . C5144) (string>=? . C5143) (string=? . C5142) (string<? . C5141) (string<=? . C5140) (string-ref . C513f) (string-length . C513e) (string-for-each . C513d) (string-copy . C513c) (string-append . C513b) (string->symbol . C513a) (string->number . C5139) (string->list . C5138) (string . C5137) (sqrt . C5136) (sin . C5135) (round . C5134) (reverse . C5133) (real? . C5132) (real-valued? . C5131) (real-part . C5130) (rationalize . C512f) (rational? . C512e) (rational-valued? . C512d) (procedure? . C512c) (positive? . C512b) (pair? . C512a) (odd? . C5129) (numerator . C5128) (number? . C5127) (number->string . C5126) (null? . C5125) (not . C5124) (negative? . C5123) (nan? . C5122) (min . C5121) (max . C5120) (map . C511f) (make-vector . C511e) (make-string . C511d) (make-rectangular . C511c) (make-polar . C511b) (magnitude . C511a) (log . C5119) (list? . C5118) (list-tail . C5117) (list-ref . C5116) (list->vector . C5115) (list->string . C5114) (list . C5113) (length . C5112) (lcm . C5111) (integer? . C5110) (integer-valued? . C510f) (integer->char . C510e) (infinite? . C510d) (inexact? . C510c) (inexact . C510b) (imag-part . C510a) (gcd . C5109) (for-each . C5108) (floor . C5107) (finite? . C5106) (expt . C5105) (exp . C5104) (exact? . C5103) (exact-integer-sqrt . C5102) (exact . C5101) (even? . C5100) (error . C50ff) (eqv? . C50fe) (equal? . C50fd) (eq? . C50fc) (dynamic-wind . C50fb) (div0-and-mod0 . C50fa) (mod0 . C50f9) (div0 . C50f8) (div-and-mod . C50f7) (mod . C50f6) (div . C50f5) (denominator . C50f4) (cos . C50f3) (cons . C50f2) (complex? . C50f1) (char? . C50f0) (char>? . C50ef) (char>=? . C50ee) (char=? . C50ed) (char<? . C50ec) (char<=? . C50eb) (char->integer . C50ea) (ceiling . C50e9) (call-with-values . C50e8) (call/cc . C50e7) (call-with-current-continuation . C50e6) (cddddr . C50e5) (cdddar . C50e4) (cddadr . C50e3) (cddaar . C50e2) (cdaddr . C50e1) (cdadar . C50e0) (cdaadr . C50df) (cdaaar . C50de) (cadddr . C50dd) (caddar . C50dc) (cadadr . C50db) (cadaar . C50da) (caaddr . C50d9) (caadar . C50d8) (caaadr . C50d7) (caaaar . C50d6) (cdddr . C50d5) (cddar . C50d4) (cdadr . C50d3) (cdaar . C50d2) (caddr . C50d1) (cadar . C50d0) (caadr . C50cf) (caaar . C50ce) (cddr . C50cd) (cdar . C50cc) (cadr . C50cb) (caar . C50ca) (cdr . C50c9) (car . C50c8) (boolean? . C50c7) (boolean=? . C50c6) (atan . C50c5) (assertion-violation . C50c4) (assertion-error . C3120) (asin . C50c3) (apply . C50c2) (append . C50c1) (angle . C50c0) (acos . C50bf) (abs . C50be) (/ . C50bd) (* . C50bc) (- . C50bb) (+ . C50ba) (>= . C50b9) (> . C50b8) (= . C50b7) (<= . C50b6) (< . C50b5) (library . C50b4) (&no-nans . C50b3) (&no-infinities . C50b2) (&i/o-encoding . C50b1) (&i/o-decoding . C50b0) (&i/o-port . C50af) (&i/o-file-does-not-exist . C50ae) (&i/o-file-already-exists . C50ad) (&i/o-file-is-read-only . C50ac) (&i/o-file-protection . C50ab) (&i/o-filename . C50aa) (&i/o-invalid-position . C50a9) (&i/o-write . C50a8) (&i/o-read . C50a7) (&i/o . C50a6) (&undefined . C50a5) (&syntax . C50a4) (&lexical . C50a3) (&implementation-restriction . C50a2) (&non-continuable . C50a1) (&who . C50a0) (&irritants . C509f) (&assertion . C509e) (&violation . C509d) (&error . C509c) (&serious . C509b) (&warning . C509a) (&message . C5099) (&condition . C5098) (define-condition-type . C5097) (define-enumeration . C5096) (define-record-type . C5095) (parent-rtd . C5094) (nongenerative . C5093) (opaque . C5092) (sealed . C5091) (protocol . C5090) (parent . C508f) (immutable . C508e) (mutable . C508d) (fields . C508c) (error-handling-mode . C508b) (file-options . C508a) (buffer-mode . C5089) (eol-style . C5088) (guard . C5087) (trace-define . C5086) (trace-lambda . C5085) (unsyntax-splicing . C5084) (unsyntax . C5083) (unquote-splicing . C5082) (unquote . C5081) (_ . C5080) (else . C507f) (=> . C507e) (... . C507d) (assert . C507c) (endianness . C507b) (delay . C507a) (time . C5079) (do . C5078) (cond . C5077) (let* . C5076) (let . C5075) (let*-values . C5074) (let-values . C5073) (identifier-syntax . C5072) (with-syntax . C5071) (quasisyntax . C5070) (quasiquote . C506f) (syntax-rules . C506e) (include . C506d) (define-struct . C506c) (record-constructor-descriptor . C506b) (record-type-descriptor . C506a) (case . C5069) (parameterize . C5068) (unless . C5067) (when . C5066) (or . C5065) (and . C5064) (if . C5063) (letrec* . C5062) (letrec . C5061) (type-descriptor . C5060) (case-lambda . C505f) (lambda . C505e) (syntax . C505d) (syntax-case . C505c) (quote . C505b) (foreign-call . C505a) (letrec-syntax . C5059) (let-syntax . C5058) (set! . C5057) (import . C5056) (begin . C5055) (module . C5054) (define-syntax . C5053) (define . C5052)) '((C4e0f core-prim . &no-nans-rcd) (C4e0d core-prim . &no-nans-rtd) (C4dfa core-prim . &no-infinities-rcd) (C4df8 core-prim . &no-infinities-rtd) (C4de5 core-prim . &i/o-encoding-rcd) (C4de3 core-prim . &i/o-encoding-rtd) (C4dca core-prim . &i/o-decoding-rcd) (C4dc8 core-prim . &i/o-decoding-rtd) (C4db5 core-prim . &i/o-port-rcd) (C4db3 core-prim . &i/o-port-rtd) (C4d9a core-prim . &i/o-file-does-not-exist-rcd) (C4d98 core-prim . &i/o-file-does-not-exist-rtd) (C4d85 core-prim . &i/o-file-already-exists-rcd) (C4d83 core-prim . &i/o-file-already-exists-rtd) (C4d70 core-prim . &i/o-file-is-read-only-rcd) (C4d6e core-prim . &i/o-file-is-read-only-rtd) (C4d5b core-prim . &i/o-file-protection-rcd) (C4d59 core-prim . &i/o-file-protection-rtd) (C4d46 core-prim . &i/o-filename-rcd) (C4d44 core-prim . &i/o-filename-rtd) (C4d2b core-prim . &i/o-invalid-position-rcd) (C4d29 core-prim . &i/o-invalid-position-rtd) (C4d10 core-prim . &i/o-write-rcd) (C4d0e core-prim . &i/o-write-rtd) (C4cfb core-prim . &i/o-read-rcd) (C4cf9 core-prim . &i/o-read-rtd) (C4ce6 core-prim . &i/o-rcd) (C4ce4 core-prim . &i/o-rtd) (C4cd1 core-prim . &undefined-rcd) (C4ccf core-prim . &undefined-rtd) (C4cbc core-prim . &syntax-rcd) (C4cba core-prim . &syntax-rtd) (C4c9b core-prim . &lexical-rcd) (C4c99 core-prim . &lexical-rtd) (C4c86 core-prim . &implementation-restriction-rcd) (C4c84 core-prim . &implementation-restriction-rtd) (C4c71 core-prim . &non-continuable-rcd) (C4c6f core-prim . &non-continuable-rtd) (C4c5c core-prim . &who-rcd) (C4c5a core-prim . &who-rtd) (C4c41 core-prim . &irritants-rcd) (C4c3f core-prim . &irritants-rtd) (C4c26 core-prim . &assertion-rcd) (C4c24 core-prim . &assertion-rtd) (C4c11 core-prim . &violation-rcd) (C4c0f core-prim . &violation-rtd) (C4bfc core-prim . &error-rcd) (C4bfa core-prim . &error-rtd) (C4be7 core-prim . &serious-rcd) (C4be5 core-prim . &serious-rtd) (C4bd2 core-prim . &warning-rcd) (C4bd0 core-prim . &warning-rtd) (C4bbd core-prim . &message-rcd) (C4bbb core-prim . &message-rtd) (C4b5e core-prim . &condition-rcd) (C4b5c core-prim . &condition-rtd) (C3122 core-prim . syntax-error) (C3046 core-prim . syntax-dispatch) (C5374 core-prim . pretty-print) (C5373 core-prim . eval-core) (C5372 core-prim . set-symbol-value!) (C5371 core-prim . symbol-value) (C5370 core-prim . gensym) (C536f core-prim . void) (C4f1c core-prim . load) (C3132 core-prim . interaction-environment) (C536e core-prim . char-ready?) (C536d core-prim . regexp?) (C536c core-prim . read-line) (C536b core-prim . ungensym) (C536a core-prim . alist->eq-hash-table) (C5369 core-prim . assoc-ref) (C5368 core-prim . print) (C5367 core-prim . format) (C5366 core-prim . host-os) (C2a96 core-prim . library-path) (C5365 core-prim . standard-library-path) (C5364 core-prim . file-newer?) (C5363 core-prim . stat-mtime) (C5362 core-prim . write-to-file) (C5361 core-prim . file->list) (C5360 core-prim . file->string) (C535f core-prim . digit->integer) (C535e core-prim . call-with-string-input-port) (C535d core-prim . call-with-string-io) (C535c core-prim . string-split) (C535b core-prim . bytevector-for-each) (C535a core-prim . string->regexp) (C5359 core-prim . rxmatch) (C5358 core-prim . regexp-replace-all) (C5357 core-prim . hashtable-for-each) (C5356 core-prim . call-process) (C5355 core-prim . local-tz-offset) (C5354 core-prim . microseconds) (C5353 core-prim . directory-list) (C5352 core-prim . set-current-directory!) (C5351 core-prim . expand-path) (C5350 core-prim . current-directory) (C534f core-prim . %spawn) (C534e core-prim . %waitpid) (C534d core-prim . simple-struct-name) (C534c core-prim . simple-struct-set!) (C534b core-prim . simple-struct-ref) (C534a core-prim . make-simple-struct) (C5349 core-prim . simple-struct?) (C5348 core-prim . pointer-ref-c-int64) (C5347 core-prim . pointer-ref-c-int32) (C5346 core-prim . pointer-ref-c-int16) (C5345 core-prim . pointer-ref-c-int8) (C5344 core-prim . pointer-ref-c-uint64) (C5343 core-prim . pointer-ref-c-uint32) (C5342 core-prim . pointer-ref-c-uint16) (C5341 core-prim . pointer-ref-c-uint8) (C5340 core-prim . pointer-set-c-uint64!) (C533f core-prim . pointer-set-c-uint32!) (C533e core-prim . pointer-set-c-uint16!) (C533d core-prim . pointer-set-c-uint8!) (C533c core-prim . pointer-set-c-int64!) (C533b core-prim . pointer-set-c-int32!) (C533a core-prim . pointer-set-c-int16!) (C5339 core-prim . pointer-set-c-int8!) (C5338 core-prim . pointer-set-c-pointer!) (C5337 core-prim . pointer-set-c-double!) (C5336 core-prim . pointer-set-c-float!) (C5335 core-prim . pointer-set-c-long-long!) (C5334 core-prim . pointer-set-c-long!) (C5333 core-prim . pointer-set-c-int!) (C5332 core-prim . pointer-set-c-short!) (C5331 core-prim . pointer-set-c-char!) (C5330 core-prim . pointer-ref-c-pointer) (C532f core-prim . pointer-ref-c-double) (C532e core-prim . pointer-ref-c-float) (C532d core-prim . pointer-ref-c-unsigned-long-long) (C532c core-prim . pointer-ref-c-signed-long-long) (C532b core-prim . pointer-ref-c-unsigned-long) (C532a core-prim . pointer-ref-c-signed-long) (C5329 core-prim . pointer-ref-c-unsigned-int) (C5328 core-prim . pointer-ref-c-signed-int) (C5327 core-prim . pointer-ref-c-unsigned-short) (C5326 core-prim . pointer-ref-c-signed-short) (C5325 core-prim . pointer-ref-c-unsigned-char) (C5324 core-prim . pointer-ref-c-signed-char) (C5323 core-prim . pointer->integer) (C5322 core-prim . integer->pointer) (C5321 core-prim . pointer?) (C5320 core-prim . shared-errno) (C531f core-prim . %ffi-supported?) (C531e core-prim . %ffi-pointer->string) (C531d core-prim . %ffi-call->string-or-zero) (C531c core-prim . %ffi-call->double) (C531b core-prim . %ffi-call->void*) (C531a core-prim . %ffi-call->void) (C5319 core-prim . %ffi-call->char) (C5318 core-prim . %ffi-call->int) (C5317 core-prim . %ffi-lookup) (C5316 core-prim . %ffi-open) (C5315 core-prim . %fork) (C5314 core-prim . %pipe) (C5313 core-prim . p) (C5312 core-prim . open-output-string) (C5311 core-prim . get-output-string) (C5310 core-prim . file-stat-ctime) (C530f core-prim . file-stat-atime) (C530e core-prim . file-stat-mtime) (C530d core-prim . file-size-in-bytes) (C530c core-prim . file-writable?) (C530b core-prim . file-executable?) (C530a core-prim . file-readable?) (C5309 core-prim . file-regular?) (C5308 core-prim . file-symbolic-link?) (C5307 core-prim . file-directory?) (C5306 core-prim . create-symbolic-link) (C5305 core-prim . rename-file) (C5304 core-prim . delete-directory) (C5303 core-prim . create-directory) (C5302 core-prim . create-mosh-cache-dir) (C5301 core-prim . get-environment-variables) (C5300 core-prim . get-environment-variable) (C52ff core-prim . join-wraps) (C52fe core-prim . id->real-label) (C52fd core-prim . same-marks?) (C52fc core-prim . same-marks*?) (C52fb core-prim . get-timeofday) (C52fa core-prim . get-command-line) (C52f9 core-prim . sys-display) (C52f8 core-prim . whereis) (C52f7 core-prim . register) (C52f6 core-prim . vm-join!) (C52f5 core-prim . vm-set-value!) (C52f4 core-prim . vm?) (C52f3 core-prim . main-vm?) (C52f2 core-prim . vm-eval) (C52f1 core-prim . vm-self) (C52f0 core-prim . vm-start!) (C52ef core-prim . make-vm) (C52ee core-prim . mutex-try-lock!) (C52ed core-prim . mutex-unlock!) (C52ec core-prim . mutex-lock!) (C52eb core-prim . mutex?) (C52ea core-prim . make-mutex) (C52e9 core-prim . condition-variable-notify-all!) (C52e8 core-prim . condition-variable-notify!) (C52e7 core-prim . condition-variable-wait!) (C52e6 core-prim . make-condition-variable) (C52e5 core-prim . mosh-executable-path) (C52e4 core-prim . make-file-options) (C52e3 core-prim . source-info) (C52e2 core-prim . make-compiler-instruction) (C52e1 core-prim . make-instruction) (C52e0 core-prim . set-source-info!) (C52df core-prim . bignum?) (C52de core-prim . fast-equal?) (C52dd core-prim . fasl-read) (C52dc core-prim . fasl-write) (C52db core-prim . time-usage) (C52da core-prim . os-constant) (C287f core-prim . make-parameter) (C52d9 core-prim . socket-port) (C52d8 core-prim . socket-shutdown) (C52d7 core-prim . socket-close) (C52d6 core-prim . socket-send) (C52d5 core-prim . socket-recv!) (C52d4 core-prim . socket-recv) (C52d3 core-prim . make-server-socket) (C52d2 core-prim . make-client-socket) (C52d1 core-prim . socket-accept) (C52d0 core-prim . socket?) (C52cf core-prim . string-upcase) (C52ce core-prim . string-titlecase) (C52cd core-prim . string-normalize-nfkd) (C52cc core-prim . string-normalize-nfkc) (C52cb core-prim . string-normalize-nfd) (C52ca core-prim . string-normalize-nfc) (C52c9 core-prim . string-foldcase) (C52c8 core-prim . string-downcase) (C52c7 core-prim . string-ci>?) (C52c6 core-prim . string-ci>=?) (C52c5 core-prim . string-ci=?) (C52c4 core-prim . string-ci<?) (C52c3 core-prim . string-ci<=?) (C52c2 core-prim . char-whitespace?) (C52c1 core-prim . char-upper-case?) (C52c0 core-prim . char-title-case?) (C52bf core-prim . char-numeric?) (C52be core-prim . char-lower-case?) (C52bd core-prim . char-general-category) (C52bc core-prim . char-upcase) (C52bb core-prim . char-titlecase) (C52ba core-prim . char-foldcase) (C52b9 core-prim . char-downcase) (C52b8 core-prim . char-ci>?) (C52b7 core-prim . char-ci>=?) (C52b6 core-prim . char-ci=?) (C52b5 core-prim . char-ci<?) (C52b4 core-prim . char-ci<=?) (C52b3 core-prim . char-alphabetic?) (C2e73 core-prim . make-variable-transformer) (C3128 core-prim . identifier?) (C3114 core-prim . generate-temporaries) (C3116 core-prim . free-identifier=?) (C312c core-prim . syntax->datum) (C312a core-prim . datum->syntax) (C3118 core-prim . bound-identifier=?) (C52b2 core-prim . record-type-descriptor?) (C52b1 core-prim . record-predicate) (C52b0 core-prim . record-mutator) (C52af core-prim . record-constructor) (C52ae core-prim . record-accessor) (C52ad core-prim . make-record-type-descriptor) (C52ac core-prim . make-record-constructor-descriptor) (C52ab core-prim . record?) (C52aa core-prim . record-type-uid) (C52a9 core-prim . record-type-sealed?) (C52a8 core-prim . record-type-parent) (C52a7 core-prim . record-type-opaque?) (C52a6 core-prim . record-type-name) (C52a5 core-prim . record-type-generative?) (C52a4 core-prim . record-type-field-names) (C52a3 core-prim . record-rtd) (C52a2 core-prim . record-field-mutable?) (C52a1 core-prim . delete-file) (C52a0 core-prim . file-exists?) (C529f core-prim . vector-sort!) (C529e core-prim . vector-sort) (C529d core-prim . list-sort) (C529c core-prim . symbol-hash) (C529b core-prim . string-ci-hash) (C529a core-prim . string-hash) (C5299 core-prim . equal-hash) (C5298 core-prim . hashtable-equivalence-function) (C5297 core-prim . make-hashtable) (C5296 core-prim . hashtable-hash-function) (C5295 core-prim . make-eqv-hashtable) (C5294 core-prim . make-eq-hashtable) (C5293 core-prim . hashtable?) (C5292 core-prim . hashtable-update!) (C5291 core-prim . hashtable-size) (C5290 core-prim . hashtable-set!) (C528f core-prim . hashtable-ref) (C528e core-prim . hashtable-mutable?) (C528d core-prim . hashtable-keys) (C528c core-prim . hashtable-entries) (C528b core-prim . hashtable-delete!) (C528a core-prim . hashtable-copy) (C5289 core-prim . hashtable-contains?) (C5288 core-prim . hashtable-clear!) (C5287 core-prim . call-with-output-file) (C5286 core-prim . call-with-input-file) (C5285 core-prim . write-char) (C5284 core-prim . write) (C5283 core-prim . with-output-to-file) (C5282 core-prim . with-input-from-file) (C5281 core-prim . read-char) (C5280 core-prim . read) (C527f core-prim . peek-char) (C527e core-prim . open-output-file) (C527d core-prim . open-input-file) (C527c core-prim . newline) (C527b core-prim . display) (C527a core-prim . close-output-port) (C5279 core-prim . close-input-port) (C5278 core-prim . eof-object?) (C5277 core-prim . eof-object) (C5276 core-prim . current-error-port) (C5275 core-prim . current-output-port) (C5274 core-prim . current-input-port) (C5273 core-prim . output-port?) (C5272 core-prim . input-port?) (C5271 core-prim . utf-8-codec) (C5270 core-prim . utf-16-codec) (C526f core-prim . transcoder-error-handling-mode) (C526e core-prim . transcoder-eol-style) (C526d core-prim . transcoder-codec) (C526c core-prim . transcoded-port) (C526b core-prim . textual-port?) (C526a core-prim . string->bytevector) (C5269 core-prim . standard-output-port) (C5268 core-prim . standard-input-port) (C5267 core-prim . standard-error-port) (C5266 core-prim . set-port-position!) (C5265 core-prim . put-u8) (C5264 core-prim . put-string) (C5263 core-prim . put-datum) (C5262 core-prim . put-char) (C5261 core-prim . put-bytevector) (C5260 core-prim . port?) (C525f core-prim . port-transcoder) (C525e core-prim . port-position) (C525d core-prim . port-has-set-port-position!?) (C525c core-prim . port-has-port-position?) (C525b core-prim . port-eof?) (C525a core-prim . output-port-buffer-mode) (C5259 core-prim . open-string-output-port) (C5258 core-prim . open-string-input-port) (C5257 core-prim . open-file-output-port) (C5256 core-prim . open-file-input/output-port) (C5255 core-prim . open-file-input-port) (C5254 core-prim . open-bytevector-output-port) (C5253 core-prim . open-bytevector-input-port) (C5252 core-prim . native-transcoder) (C5251 core-prim . native-eol-style) (C5250 core-prim . make-transcoder) (C524f core-prim . latin-1-codec) (C4d0a core-prim . make-i/o-write-error) (C4cf5 core-prim . make-i/o-read-error) (C4dab core-prim . make-i/o-port-error) (C4d21 core-prim . make-i/o-invalid-position-error) (C4d3c core-prim . make-i/o-filename-error) (C4d55 core-prim . make-i/o-file-protection-error) (C4d6a core-prim . make-i/o-file-is-read-only-error) (C4d94 core-prim . make-i/o-file-does-not-exist-error) (C4d7f core-prim . make-i/o-file-already-exists-error) (C4ce0 core-prim . make-i/o-error) (C4ddb core-prim . make-i/o-encoding-error) (C4dc4 core-prim . make-i/o-decoding-error) (C524e core-prim . make-custom-textual-output-port) (C524d core-prim . make-custom-textual-input/output-port) (C524c core-prim . make-custom-textual-input-port) (C524b core-prim . make-custom-binary-output-port) (C524a core-prim . make-custom-binary-input/output-port) (C5249 core-prim . make-custom-binary-input-port) (C5248 core-prim . make-bytevector) (C5247 core-prim . lookahead-u8) (C5246 core-prim . lookahead-char) (C4d0c core-prim . i/o-write-error?) (C4cf7 core-prim . i/o-read-error?) (C4daf core-prim . i/o-port-error?) (C4d25 core-prim . i/o-invalid-position-error?) (C4d40 core-prim . i/o-filename-error?) (C4d57 core-prim . i/o-file-protection-error?) (C4d6c core-prim . i/o-file-is-read-only-error?) (C4d96 core-prim . i/o-file-does-not-exist-error?) (C4d81 core-prim . i/o-file-already-exists-error?) (C4ce2 core-prim . i/o-error?) (C4d27 core-prim . i/o-error-position) (C4db1 core-prim . i/o-error-port) (C4d42 core-prim . i/o-error-filename) (C4ddf core-prim . i/o-encoding-error?) (C4de1 core-prim . i/o-encoding-error-char) (C4dc6 core-prim . i/o-decoding-error?) (C5245 core-prim . get-u8) (C5244 core-prim . get-string-n!) (C5243 core-prim . get-string-n) (C5242 core-prim . get-string-all) (C5241 core-prim . get-line) (C5240 core-prim . get-datum) (C523f core-prim . get-char) (C523e core-prim . get-bytevector-some) (C523d core-prim . get-bytevector-n!) (C523c core-prim . get-bytevector-n) (C523b core-prim . get-bytevector-all) (C523a core-prim . flush-output-port) (C5239 core-prim . close-port) (C3102 core-prim . scheme-report-environment) (C5238 core-prim . quotient) (C3100 core-prim . null-environment) (C5237 core-prim . remainder) (C5236 core-prim . modulo) (C5235 core-prim . inexact->exact) (C5234 core-prim . force) (C5233 core-prim . exact->inexact) (C5232 core-prim . make-promise) (C5231 core-prim . exit) (C4f16 core-prim . command-line) (C5230 core-prim . string-fill!) (C522f core-prim . string-set!) (C522e core-prim . set-cdr!) (C522d core-prim . set-car!) (C522c core-prim . remove) (C522b core-prim . remv) (C522a core-prim . remp) (C5229 core-prim . remq) (C5228 core-prim . partition) (C5227 core-prim . memv) (C5226 core-prim . memq) (C5225 core-prim . memp) (C5224 core-prim . member) (C5223 core-prim . exists) (C5222 core-prim . for-all) (C5221 core-prim . fold-right) (C5220 core-prim . fold-left) (C521f core-prim . find) (C521e core-prim . filter) (C521d core-prim . cons*) (C521c core-prim . assv) (C521b core-prim . assq) (C521a core-prim . assp) (C5219 core-prim . assoc) (C5218 core-prim . call-with-string-output-port) (C5217 core-prim . call-with-port) (C5216 core-prim . call-with-bytevector-output-port) (C5215 core-prim . bytevector->string) (C5214 core-prim . buffer-mode?) (C5213 core-prim . binary-port?) (C5212 core-prim . with-exception-handler) (C5211 core-prim . raise-continuable) (C5210 core-prim . raise) (C3106 core-prim . eval) (C30fe core-prim . environment) (C520f core-prim . make-enumeration) (C520e core-prim . enum-set=?) (C520d core-prim . enum-set-universe) (C520c core-prim . enum-set-union) (C520b core-prim . enum-set-subset?) (C520a core-prim . enum-set-projection) (C5209 core-prim . enum-set-member?) (C5208 core-prim . enum-set-intersection) (C5207 core-prim . enum-set-indexer) (C5206 core-prim . enum-set-difference) (C5205 core-prim . enum-set-constructor) (C5204 core-prim . enum-set-complement) (C5203 core-prim . enum-set->list) (C4c56 core-prim . who-condition?) (C4bce core-prim . warning?) (C4c0d core-prim . violation?) (C4ccd core-prim . undefined-violation?) (C4cb4 core-prim . syntax-violation?) (C4cb8 core-prim . syntax-violation-subform) (C4cb6 core-prim . syntax-violation-form) (C3126 core-prim . syntax-violation) (C5202 core-prim . simple-conditions) (C4be3 core-prim . serious-condition?) (C4c6d core-prim . non-continuable-violation?) (C4bb7 core-prim . message-condition?) (C4c52 core-prim . make-who-condition) (C4bcc core-prim . make-warning) (C4c0b core-prim . make-violation) (C4ccb core-prim . make-undefined-violation) (C4cae core-prim . make-syntax-violation) (C4be1 core-prim . make-serious-condition) (C4c6b core-prim . make-non-continuable-violation) (C4bb3 core-prim . make-message-condition) (C4c95 core-prim . make-lexical-violation) (C4c37 core-prim . make-irritants-condition) (C4c80 core-prim . make-implementation-restriction-violation) (C4bf6 core-prim . make-error) (C4c20 core-prim . make-assertion-violation) (C4c97 core-prim . lexical-violation?) (C4c3b core-prim . irritants-condition?) (C4c82 core-prim . implementation-restriction-violation?) (C4bf8 core-prim . error?) (C4c58 core-prim . condition-who) (C5201 core-prim . condition-predicate) (C4bb9 core-prim . condition-message) (C4c3d core-prim . condition-irritants) (C5200 core-prim . condition-accessor) (C51ff core-prim . condition) (C4c22 core-prim . assertion-violation?) (C51fe core-prim . condition?) (C51fd core-prim . utf32->string) (C51fc core-prim . utf16->string) (C51fb core-prim . utf8->string) (C51fa core-prim . uint-list->bytevector) (C51f9 core-prim . u8-list->bytevector) (C51f8 core-prim . string->utf8) (C51f7 core-prim . string->utf32) (C51f6 core-prim . string->utf16) (C51f5 core-prim . sint-list->bytevector) (C51f4 core-prim . native-endianness) (C51f3 core-prim . bytevector?) (C51f2 core-prim . bytevector=?) (C51f1 core-prim . bytevector-uint-set!) (C51f0 core-prim . bytevector-uint-ref) (C51ef core-prim . bytevector-u8-set!) (C51ee core-prim . bytevector-u8-ref) (C51ed core-prim . bytevector-u64-set!) (C51ec core-prim . bytevector-u64-ref) (C51eb core-prim . bytevector-u64-native-set!) (C51ea core-prim . bytevector-u64-native-ref) (C51e9 core-prim . bytevector-u32-set!) (C51e8 core-prim . bytevector-u32-ref) (C51e7 core-prim . bytevector-u32-native-set!) (C51e6 core-prim . bytevector-u32-native-ref) (C51e5 core-prim . bytevector-u16-set!) (C51e4 core-prim . bytevector-u16-ref) (C51e3 core-prim . bytevector-u16-native-set!) (C51e2 core-prim . bytevector-u16-native-ref) (C51e1 core-prim . bytevector-sint-set!) (C51e0 core-prim . bytevector-sint-ref) (C51df core-prim . bytevector-s8-set!) (C51de core-prim . bytevector-s8-ref) (C51dd core-prim . bytevector-s64-set!) (C51dc core-prim . bytevector-s64-ref) (C51db core-prim . bytevector-s64-native-set!) (C51da core-prim . bytevector-s64-native-ref) (C51d9 core-prim . bytevector-s32-set!) (C51d8 core-prim . bytevector-s32-ref) (C51d7 core-prim . bytevector-s32-native-set!) (C51d6 core-prim . bytevector-s32-native-ref) (C51d5 core-prim . bytevector-s16-set!) (C51d4 core-prim . bytevector-s16-ref) (C51d3 core-prim . bytevector-s16-native-set!) (C51d2 core-prim . bytevector-s16-native-ref) (C51d1 core-prim . bytevector-length) (C51d0 core-prim . bytevector-ieee-single-ref) (C51cf core-prim . bytevector-ieee-single-set!) (C51ce core-prim . bytevector-ieee-single-native-set!) (C51cd core-prim . bytevector-ieee-single-native-ref) (C51cc core-prim . bytevector-ieee-double-set!) (C51cb core-prim . bytevector-ieee-double-ref) (C51ca core-prim . bytevector-ieee-double-native-set!) (C51c9 core-prim . bytevector-ieee-double-native-ref) (C51c8 core-prim . bytevector-fill!) (C51c7 core-prim . bytevector-copy!) (C51c6 core-prim . bytevector-copy) (C51c5 core-prim . bytevector->uint-list) (C51c4 core-prim . bytevector->u8-list) (C51c3 core-prim . bytevector->sint-list) (C4e0b core-prim . no-nans-violation?) (C4df6 core-prim . no-infinities-violation?) (C4e09 core-prim . make-no-nans-violation) (C4df4 core-prim . make-no-infinities-violation) (C51c2 core-prim . real->flonum) (C51c1 core-prim . flzero?) (C51c0 core-prim . fltruncate) (C51bf core-prim . fltan) (C51be core-prim . flsqrt) (C51bd core-prim . flsin) (C51bc core-prim . flround) (C51bb core-prim . flpositive?) (C51ba core-prim . flonum?) (C51b9 core-prim . flodd?) (C51b8 core-prim . flnumerator) (C51b7 core-prim . flnegative?) (C51b6 core-prim . flnan?) (C51b5 core-prim . flmod0) (C51b4 core-prim . flmod) (C51b3 core-prim . flmin) (C51b2 core-prim . flmax) (C51b1 core-prim . fllog) (C51b0 core-prim . flinteger?) (C51af core-prim . flinfinite?) (C51ae core-prim . flfloor) (C51ad core-prim . flfinite?) (C51ac core-prim . flexpt) (C51ab core-prim . flexp) (C51aa core-prim . fleven?) (C51a9 core-prim . fldiv0-and-mod0) (C51a8 core-prim . fldiv0) (C51a7 core-prim . fldiv-and-mod) (C51a6 core-prim . fldiv) (C51a5 core-prim . fldenominator) (C51a4 core-prim . flcos) (C51a3 core-prim . flceiling) (C51a2 core-prim . flatan) (C51a1 core-prim . flasin) (C51a0 core-prim . flacos) (C519f core-prim . flabs) (C519e core-prim . fl>?) (C519d core-prim . fl>=?) (C519c core-prim . fl=?) (C519b core-prim . fl<?) (C519a core-prim . fl<=?) (C5199 core-prim . fl/) (C5198 core-prim . fl-) (C5197 core-prim . fl+) (C5196 core-prim . fl*) (C5195 core-prim . fixnum->flonum) (C5194 core-prim . fxzero?) (C5193 core-prim . fxxor) (C5192 core-prim . fxrotate-bit-field) (C5191 core-prim . fxreverse-bit-field) (C5190 core-prim . fxpositive?) (C518f core-prim . fxodd?) (C518e core-prim . fxnot) (C518d core-prim . fxnegative?) (C518c core-prim . fxmod0) (C518b core-prim . fxmod) (C518a core-prim . fxmin) (C5189 core-prim . fxmax) (C5188 core-prim . fxlength) (C5187 core-prim . fxior) (C5186 core-prim . fxif) (C5185 core-prim . fxfirst-bit-set) (C5184 core-prim . fxeven?) (C5183 core-prim . fxdiv0-and-mod0) (C5182 core-prim . fxdiv0) (C5181 core-prim . fxdiv-and-mod) (C5180 core-prim . fxdiv) (C517f core-prim . fxcopy-bit-field) (C517e core-prim . fxcopy-bit) (C517d core-prim . fxbit-set?) (C517c core-prim . fxbit-field) (C517b core-prim . fxbit-count) (C517a core-prim . fxarithmetic-shift-right) (C5179 core-prim . fxarithmetic-shift-left) (C5178 core-prim . fxarithmetic-shift) (C5177 core-prim . fxand) (C5176 core-prim . fx>?) (C5175 core-prim . fx>=?) (C5174 core-prim . fx=?) (C5173 core-prim . fx<?) (C5172 core-prim . fx<=?) (C5171 core-prim . fx-/carry) (C5170 core-prim . fx-) (C516f core-prim . fx+/carry) (C516e core-prim . fx+) (C516d core-prim . fx*/carry) (C516c core-prim . fx*) (C516b core-prim . greatest-fixnum) (C516a core-prim . least-fixnum) (C5169 core-prim . fixnum-width) (C5168 core-prim . fixnum?) (C5167 core-prim . bitwise-rotate-bit-field) (C5166 core-prim . bitwise-reverse-bit-field) (C5165 core-prim . bitwise-length) (C5164 core-prim . bitwise-if) (C5163 core-prim . bitwise-first-bit-set) (C5162 core-prim . bitwise-copy-bit-field) (C5161 core-prim . bitwise-copy-bit) (C5160 core-prim . bitwise-bit-set?) (C515f core-prim . bitwise-bit-field) (C515e core-prim . bitwise-bit-count) (C515d core-prim . bitwise-xor) (C515c core-prim . bitwise-ior) (C515b core-prim . bitwise-and) (C515a core-prim . bitwise-not) (C5159 core-prim . bitwise-arithmetic-shift-right) (C5158 core-prim . bitwise-arithmetic-shift-left) (C5157 core-prim . bitwise-arithmetic-shift) (C5156 core-prim . zero?) (C5155 core-prim . vector?) (C5154 core-prim . vector-set!) (C5153 core-prim . vector-ref) (C5152 core-prim . vector-map) (C5151 core-prim . vector-length) (C5150 core-prim . vector-for-each) (C514f core-prim . vector-fill!) (C514e core-prim . vector->list) (C514d core-prim . vector) (C514c core-prim . values) (C514b core-prim . truncate) (C514a core-prim . tan) (C5149 core-prim . symbol?) (C5148 core-prim . symbol=?) (C5147 core-prim . symbol->string) (C5146 core-prim . substring) (C5145 core-prim . string?) (C5144 core-prim . string>?) (C5143 core-prim . string>=?) (C5142 core-prim . string=?) (C5141 core-prim . string<?) (C5140 core-prim . string<=?) (C513f core-prim . string-ref) (C513e core-prim . string-length) (C513d core-prim . string-for-each) (C513c core-prim . string-copy) (C513b core-prim . string-append) (C513a core-prim . string->symbol) (C5139 core-prim . string->number) (C5138 core-prim . string->list) (C5137 core-prim . string) (C5136 core-prim . sqrt) (C5135 core-prim . sin) (C5134 core-prim . round) (C5133 core-prim . reverse) (C5132 core-prim . real?) (C5131 core-prim . real-valued?) (C5130 core-prim . real-part) (C512f core-prim . rationalize) (C512e core-prim . rational?) (C512d core-prim . rational-valued?) (C512c core-prim . procedure?) (C512b core-prim . positive?) (C512a core-prim . pair?) (C5129 core-prim . odd?) (C5128 core-prim . numerator) (C5127 core-prim . number?) (C5126 core-prim . number->string) (C5125 core-prim . null?) (C5124 core-prim . not) (C5123 core-prim . negative?) (C5122 core-prim . nan?) (C5121 core-prim . min) (C5120 core-prim . max) (C511f core-prim . map) (C511e core-prim . make-vector) (C511d core-prim . make-string) (C511c core-prim . make-rectangular) (C511b core-prim . make-polar) (C511a core-prim . magnitude) (C5119 core-prim . log) (C5118 core-prim . list?) (C5117 core-prim . list-tail) (C5116 core-prim . list-ref) (C5115 core-prim . list->vector) (C5114 core-prim . list->string) (C5113 core-prim . list) (C5112 core-prim . length) (C5111 core-prim . lcm) (C5110 core-prim . integer?) (C510f core-prim . integer-valued?) (C510e core-prim . integer->char) (C510d core-prim . infinite?) (C510c core-prim . inexact?) (C510b core-prim . inexact) (C510a core-prim . imag-part) (C5109 core-prim . gcd) (C5108 core-prim . for-each) (C5107 core-prim . floor) (C5106 core-prim . finite?) (C5105 core-prim . expt) (C5104 core-prim . exp) (C5103 core-prim . exact?) (C5102 core-prim . exact-integer-sqrt) (C5101 core-prim . exact) (C5100 core-prim . even?) (C50ff core-prim . error) (C50fe core-prim . eqv?) (C50fd core-prim . equal?) (C50fc core-prim . eq?) (C50fb core-prim . dynamic-wind) (C50fa core-prim . div0-and-mod0) (C50f9 core-prim . mod0) (C50f8 core-prim . div0) (C50f7 core-prim . div-and-mod) (C50f6 core-prim . mod) (C50f5 core-prim . div) (C50f4 core-prim . denominator) (C50f3 core-prim . cos) (C50f2 core-prim . cons) (C50f1 core-prim . complex?) (C50f0 core-prim . char?) (C50ef core-prim . char>?) (C50ee core-prim . char>=?) (C50ed core-prim . char=?) (C50ec core-prim . char<?) (C50eb core-prim . char<=?) (C50ea core-prim . char->integer) (C50e9 core-prim . ceiling) (C50e8 core-prim . call-with-values) (C50e7 core-prim . call/cc) (C50e6 core-prim . call-with-current-continuation) (C50e5 core-prim . cddddr) (C50e4 core-prim . cdddar) (C50e3 core-prim . cddadr) (C50e2 core-prim . cddaar) (C50e1 core-prim . cdaddr) (C50e0 core-prim . cdadar) (C50df core-prim . cdaadr) (C50de core-prim . cdaaar) (C50dd core-prim . cadddr) (C50dc core-prim . caddar) (C50db core-prim . cadadr) (C50da core-prim . cadaar) (C50d9 core-prim . caaddr) (C50d8 core-prim . caadar) (C50d7 core-prim . caaadr) (C50d6 core-prim . caaaar) (C50d5 core-prim . cdddr) (C50d4 core-prim . cddar) (C50d3 core-prim . cdadr) (C50d2 core-prim . cdaar) (C50d1 core-prim . caddr) (C50d0 core-prim . cadar) (C50cf core-prim . caadr) (C50ce core-prim . caaar) (C50cd core-prim . cddr) (C50cc core-prim . cdar) (C50cb core-prim . cadr) (C50ca core-prim . caar) (C50c9 core-prim . cdr) (C50c8 core-prim . car) (C50c7 core-prim . boolean?) (C50c6 core-prim . boolean=?) (C50c5 core-prim . atan) (C50c4 core-prim . assertion-violation) (C3120 core-prim . assertion-error) (C50c3 core-prim . asin) (C50c2 core-prim . apply) (C50c1 core-prim . append) (C50c0 core-prim . angle) (C50bf core-prim . acos) (C50be core-prim . abs) (C50bd core-prim . /) (C50bc core-prim . *) (C50bb core-prim . -) (C50ba core-prim . +) (C50b9 core-prim . >=) (C50b8 core-prim . >) (C50b7 core-prim . =) (C50b6 core-prim . <=) (C50b5 core-prim . <) (C50b4 core-prim . library) (C50b3 $core-rtd &no-nans-rtd &no-nans-rcd) (C50b2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (C50b1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (C50b0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (C50af $core-rtd &i/o-port-rtd &i/o-port-rcd) (C50ae $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (C50ad $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (C50ac $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (C50ab $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (C50aa $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (C50a9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (C50a8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (C50a7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (C50a6 $core-rtd &i/o-rtd &i/o-rcd) (C50a5 $core-rtd &undefined-rtd &undefined-rcd) (C50a4 $core-rtd &syntax-rtd &syntax-rcd) (C50a3 $core-rtd &lexical-rtd &lexical-rcd) (C50a2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (C50a1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (C50a0 $core-rtd &who-rtd &who-rcd) (C509f $core-rtd &irritants-rtd &irritants-rcd) (C509e $core-rtd &assertion-rtd &assertion-rcd) (C509d $core-rtd &violation-rtd &violation-rcd) (C509c $core-rtd &error-rtd &error-rcd) (C509b $core-rtd &serious-rtd &serious-rcd) (C509a $core-rtd &warning-rtd &warning-rcd) (C5099 $core-rtd &message-rtd &message-rcd) (C5098 $core-rtd &condition-rtd &condition-rcd) (C5097 macro . define-condition-type) (C5096 macro . define-enumeration) (C5095 macro . define-record-type) (C5094 macro . parent-rtd) (C5093 macro . nongenerative) (C5092 macro . opaque) (C5091 macro . sealed) (C5090 macro . protocol) (C508f macro . parent) (C508e macro . immutable) (C508d macro . mutable) (C508c macro . fields) (C508b macro . error-handling-mode) (C508a macro . file-options) (C5089 macro . buffer-mode) (C5088 macro . eol-style) (C5087 macro . guard) (C5086 macro . trace-define) (C5085 macro . trace-lambda) (C5084 macro . unsyntax-splicing) (C5083 macro . unsyntax) (C5082 macro . unquote-splicing) (C5081 macro . unquote) (C5080 macro . _) (C507f macro . else) (C507e macro . =>) (C507d macro . ...) (C507c macro . assert) (C507b macro . endianness) (C507a macro . delay) (C5079 macro . time) (C5078 macro . do) (C5077 macro . cond) (C5076 macro . let*) (C5075 macro . let) (C5074 macro . let*-values) (C5073 macro . let-values) (C5072 macro . identifier-syntax) (C5071 macro . with-syntax) (C5070 macro . quasisyntax) (C506f macro . quasiquote) (C506e macro . syntax-rules) (C506d macro . include) (C506c macro . define-struct) (C506b core-macro . record-constructor-descriptor) (C506a core-macro . record-type-descriptor) (C5069 macro . case) (C5068 macro . parameterize) (C5067 macro . unless) (C5066 macro . when) (C5065 core-macro . or) (C5064 core-macro . and) (C5063 core-macro . if) (C5062 core-macro . letrec*) (C5061 core-macro . letrec) (C5060 core-macro . type-descriptor) (C505f core-macro . case-lambda) (C505e core-macro . lambda) (C505d core-macro . syntax) (C505c core-macro . syntax-case) (C505b core-macro . quote) (C505a core-macro . foreign-call) (C5059 letrec-syntax) (C5058 let-syntax) (C5057 set!) (C5056 import) (C5055 begin) (C5054 module) (C5053 define-syntax) (C5052 define)) values values '#f '#f '#f '#f) (C2c6b@C2ab7@install-library 'C5395 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . C5374) (eval-core . C5373) (set-symbol-value! . C5372) (symbol-value . C5371) (gensym . C5370) (void . C536f)) '() values values '#f '#f '#f '#f) (C2c6b@C2ab7@install-library 'C5396 '(mosh) '() '() '() '() '((set-symbol-value! . C5372) (symbol-value . C5371) (regexp? . C536d) (read-line . C536c) (ungensym . C536b) (alist->eq-hash-table . C536a) (assoc-ref . C5369) (print . C5368) (format . C5367) (host-os . C5366) (library-path . C2a96) (standard-library-path . C5365) (file-newer? . C5364) (stat-mtime . C5363) (digit->integer . C535f) (call-with-string-input-port . C535e) (call-with-string-io . C535d) (string-split . C535c) (bytevector-for-each . C535b) (string->regexp . C535a) (rxmatch . C5359) (regexp-replace-all . C5358) (hashtable-for-each . C5357) (set-current-directory! . C5352) (expand-path . C5351) (current-directory . C5350) (p . C5313) (get-timeofday . C52fb) (get-command-line . C52fa) (sys-display . C52f9) (whereis . C52f8) (register . C52f7) (vm-join! . C52f6) (vm-set-value! . C52f5) (vm? . C52f4) (main-vm? . C52f3) (vm-eval . C52f2) (vm-self . C52f1) (vm-start! . C52f0) (make-vm . C52ef) (mutex-try-lock! . C52ee) (mutex-unlock! . C52ed) (mutex-lock! . C52ec) (mutex? . C52eb) (make-mutex . C52ea) (condition-variable-notify-all! . C52e9) (condition-variable-notify! . C52e8) (condition-variable-wait! . C52e7) (make-condition-variable . C52e6) (mosh-executable-path . C52e5) (make-file-options . C52e4) (source-info . C52e3) (make-compiler-instruction . C52e2) (make-instruction . C52e1) (set-source-info! . C52e0) (bignum? . C52df) (fast-equal? . C52de) (fasl-read . C52dd) (fasl-write . C52dc) (time-usage . C52db) (os-constant . C52da) (time . C5079) (include . C506d)) '() values values '#f '#f '#f '#f) (C2c6b@C2ab7@install-library 'C5397 '(system) '() '() '() '() '((write-to-file . C5362) (file->list . C5361) (file->string . C5360) (call-process . C5356) (local-tz-offset . C5355) (microseconds . C5354) (directory-list . C5353) (expand-path . C5351) (%spawn . C534f) (%waitpid . C534e) (simple-struct-name . C534d) (simple-struct-set! . C534c) (simple-struct-ref . C534b) (make-simple-struct . C534a) (simple-struct? . C5349) (pointer-ref-c-int64 . C5348) (pointer-ref-c-int32 . C5347) (pointer-ref-c-int16 . C5346) (pointer-ref-c-int8 . C5345) (pointer-ref-c-uint64 . C5344) (pointer-ref-c-uint32 . C5343) (pointer-ref-c-uint16 . C5342) (pointer-ref-c-uint8 . C5341) (pointer-set-c-uint64! . C5340) (pointer-set-c-uint32! . C533f) (pointer-set-c-uint16! . C533e) (pointer-set-c-uint8! . C533d) (pointer-set-c-int64! . C533c) (pointer-set-c-int32! . C533b) (pointer-set-c-int16! . C533a) (pointer-set-c-int8! . C5339) (pointer-set-c-pointer! . C5338) (pointer-set-c-double! . C5337) (pointer-set-c-float! . C5336) (pointer-set-c-long-long! . C5335) (pointer-set-c-long! . C5334) (pointer-set-c-int! . C5333) (pointer-set-c-short! . C5332) (pointer-set-c-char! . C5331) (pointer-ref-c-pointer . C5330) (pointer-ref-c-double . C532f) (pointer-ref-c-float . C532e) (pointer-ref-c-unsigned-long-long . C532d) (pointer-ref-c-signed-long-long . C532c) (pointer-ref-c-unsigned-long . C532b) (pointer-ref-c-signed-long . C532a) (pointer-ref-c-unsigned-int . C5329) (pointer-ref-c-signed-int . C5328) (pointer-ref-c-unsigned-short . C5327) (pointer-ref-c-signed-short . C5326) (pointer-ref-c-unsigned-char . C5325) (pointer-ref-c-signed-char . C5324) (pointer->integer . C5323) (integer->pointer . C5322) (pointer? . C5321) (shared-errno . C5320) (%ffi-supported? . C531f) (%ffi-pointer->string . C531e) (%ffi-call->string-or-zero . C531d) (%ffi-call->double . C531c) (%ffi-call->void* . C531b) (%ffi-call->void . C531a) (%ffi-call->char . C5319) (%ffi-call->int . C5318) (%ffi-lookup . C5317) (%ffi-open . C5316) (%fork . C5315) (%pipe . C5314) (open-output-string . C5312) (get-output-string . C5311) (file-stat-ctime . C5310) (file-stat-atime . C530f) (file-stat-mtime . C530e) (file-size-in-bytes . C530d) (file-writable? . C530c) (file-executable? . C530b) (file-readable? . C530a) (file-regular? . C5309) (file-symbolic-link? . C5308) (file-directory? . C5307) (create-symbolic-link . C5306) (rename-file . C5305) (delete-directory . C5304) (create-directory . C5303) (create-mosh-cache-dir . C5302) (get-environment-variables . C5301) (get-environment-variable . C5300) (join-wraps . C52ff) (id->real-label . C52fe) (same-marks? . C52fd) (same-marks*? . C52fc) (make-parameter . C287f) (socket-port . C52d9) (socket-shutdown . C52d8) (socket-close . C52d7) (socket-send . C52d6) (socket-recv! . C52d5) (socket-recv . C52d4) (make-server-socket . C52d3) (make-client-socket . C52d2) (socket-accept . C52d1) (socket? . C52d0) (parameterize . C5068)) '() values values '#f '#f '#f '#f))
((lambda (C4f05@add-library-path! C4f07@parse-and-add-library-path C4f09@for-each-with-index C4f0b@rpad C4f0d@condition-printer C4f0f@record->field-alist C4f11@map-with-index C4f13@repl C4f15@trace-printer C4f17@command-line C4f19@local-library-path C4f1b@load/args C4f1d@load C4f1f@ironscheme-build C4f21@eval-top-level C4f23@compile-system-libraries C4f25@compile C4f27@compile->closure C4f29@pre-compile-r6rs-file C4f2b@load-r6rs-top-level C4f2d@load-r6rs-top-level-sexp) (begin (set! C4f05@add-library-path! (lambda (C4f50@path) (C2c5b@C2a97@library-path (append (C2c5b@C2a97@library-path) (list C4f50@path))))) (set! C4f07@parse-and-add-library-path (lambda (C4f52@paths C4f53@message) ((lambda (C4f56@t) (if C4f56@t ((lambda (C4f58@paths) (for-each (lambda (C4f5a@path) (if (file-exists? C4f5a@path) (C4f05@add-library-path! (expand-path C4f5a@path)) (format (current-error-port) C4f53@message C4f5a@path))) (string-split C4f58@paths '#\:))) C4f56@t) (void))) C4f52@paths))) (set! C4f09@for-each-with-index (lambda (C4f5c@proc C4f5d@lst) (letrec ((C4f60@loop (lambda (C4f62@i C4f63@lst) (if (null? C4f63@lst) (if '#f '#f (void)) (begin (C4f5c@proc C4f62@i (car C4f63@lst)) (C4f60@loop (+ C4f62@i '1) (cdr C4f63@lst))))))) (C4f60@loop '1 C4f5d@lst)))) (set! C4f0b@rpad (lambda (C4f66@str C4f67@pad C4f68@n) ((lambda (C4f6c@rest) ((letrec ((C4f6e@loop (lambda (C4f70@rest C4f71@ret) (if (<= C4f70@rest '0) C4f71@ret (C4f6e@loop (- C4f70@rest '1) (string-append C4f71@ret C4f67@pad)))))) C4f6e@loop) C4f6c@rest (format '"~a" C4f66@str))) (- C4f68@n (string-length (format '"~a" C4f66@str)))))) (set! C4f0d@condition-printer (lambda (C4f74@e C4f75@port) ((lambda (C4f79@max-condition-len) (begin (set! C4f79@max-condition-len (apply max (map (lambda (C4f8a@c) (string-length (symbol->string (record-type-name (record-rtd C4f8a@c))))) (simple-conditions C4f74@e)))) (begin (display '" Condition components:\n" C4f75@port) (C4f09@for-each-with-index (lambda (C4f7a@i C4f7b@x) ((lambda (C4f7e@rtd C4f7f@fields-alist) (begin (format C4f75@port '" ~d. ~a" C4f7a@i (C4f0b@rpad (symbol->string (record-type-name C4f7e@rtd)) '" " C4f79@max-condition-len)) (if (null? C4f7f@fields-alist) (newline C4f75@port) (void)) ((letrec ((C4f82@loop (lambda (C4f84@first C4f85@fields-alist) (if (null? C4f85@fields-alist) '() ((lambda (C4f88@field) (begin (if (not C4f84@first) (display (C4f0b@rpad '"" '" " (+ '4 C4f79@max-condition-len)) C4f75@port) (void)) (display '"       " C4f75@port) (display (car C4f88@field) C4f75@port) (display '": " C4f75@port) (write (cdr C4f88@field) C4f75@port) (newline C4f75@port) (C4f82@loop '#f (cdr C4f85@fields-alist)))) (car C4f85@fields-alist)))))) C4f82@loop) '#t C4f7f@fields-alist))) (record-rtd C4f7b@x) (C4f0f@record->field-alist C4f7b@x))) (simple-conditions C4f74@e))))) '#f))) (set! C4f0f@record->field-alist (lambda (C4f8c@r) ((lambda (C4f8f@ref) (begin (set! C4f8f@ref (lambda (C4f9a@rtd C4f9b@i C4f9c@x) ((lambda (C4fa0@val) (if (symbol? C4fa0@val) (ungensym C4fa0@val) C4fa0@val)) ((record-accessor C4f9a@rtd C4f9b@i) C4f9c@x)))) ((letrec ((C4f90@loop (lambda (C4f92@ret C4f93@rtd) (if C4f93@rtd (C4f90@loop (append C4f92@ret (C4f11@map-with-index (lambda (C4f96@i C4f97@field) (cons C4f97@field (C4f8f@ref C4f93@rtd C4f96@i C4f8c@r))) (vector->list (record-type-field-names C4f93@rtd)))) (record-type-parent C4f93@rtd)) C4f92@ret)))) C4f90@loop) '() (record-rtd C4f8c@r)))) '#f))) (set! C4f11@map-with-index (lambda (C4fa2@proc C4fa3@lst) ((letrec ((C4fa6@loop (lambda (C4fa8@i C4fa9@lst C4faa@ret) (if (null? C4fa9@lst) (reverse C4faa@ret) (C4fa6@loop (+ C4fa8@i '1) (cdr C4fa9@lst) (cons (C4fa2@proc C4fa8@i (car C4fa9@lst)) C4faa@ret)))))) C4fa6@loop) '0 C4fa3@lst '()))) (set! C4f13@repl (lambda C4fae@x ((lambda (C4fb1@rec) (begin (set! C4fb1@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (C4fb4@C4fb2) (lambda () (with-exception-handler (lambda (C4fb6@e) ((call/cc (lambda (C4fb8@C4fb3) (C4fb4@C4fb2 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? C4fb6@e) (C4f0d@condition-printer C4fb6@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" C4fb6@e))) (C4fb8@C4fb3 (lambda () (raise-continuable C4fb6@e)))))))))) (lambda () ((letrec ((C4fba@loop (lambda (C4fbc@line C4fbd@accum) ((lambda (C4fc1@parentheses-ok? C4fc3@eval-string-print) (begin (set! C4fc1@parentheses-ok? (lambda (C4fc8@text) ((letrec ((C4fca@loop (lambda (C4fcc@chars C4fcd@p0 C4fce@p1) (if (null? C4fcc@chars) (= '0 C4fcd@p0 C4fce@p1) ((lambda (C4fd2@t) (if (memv C4fd2@t '(#\()) (C4fca@loop (cdr C4fcc@chars) (+ C4fcd@p0 '1) C4fce@p1) (if (memv C4fd2@t '(#\))) (C4fca@loop (cdr C4fcc@chars) (- C4fcd@p0 '1) C4fce@p1) (if (memv C4fd2@t '(#\[)) (C4fca@loop (cdr C4fcc@chars) C4fcd@p0 (+ C4fce@p1 '1)) (if (memv C4fd2@t '(#\])) (C4fca@loop (cdr C4fcc@chars) C4fcd@p0 (- C4fce@p1 '1)) (C4fca@loop (cdr C4fcc@chars) C4fcd@p0 C4fce@p1)))))) (car C4fcc@chars)))))) C4fca@loop) (string->list C4fc8@text) '0 '0))) (set! C4fc3@eval-string-print (lambda (C4fc6@text) (if (not (or (string=? '"\n" C4fc6@text) (= '0 (string-length C4fc6@text)))) (write (C4f21@eval-top-level (call-with-port (open-string-input-port C4fc6@text) read))) (void)))) (if (eof-object? C4fbc@line) (begin (C4fc3@eval-string-print C4fbd@accum) (exit)) ((lambda (C4fc4@current) (if (C4fc1@parentheses-ok? C4fc4@current) (C4fc3@eval-string-print C4fc4@current) (C4fba@loop (get-line (current-input-port)) C4fc4@current))) (string-append C4fbd@accum C4fbc@line))))) '#f '#f)))) C4fba@loop) (get-line (current-input-port)) '""))))))) (newline) (C4fb1@rec)))) (C4fb1@rec))) '#f))) (set! C4f15@trace-printer (C29a1@C2880@make-parameter write)) (set! C4f17@command-line (C29a1@C2880@make-parameter (get-command-line))) (set! C4f19@local-library-path (lambda (C4fd4@filename) (C2c5b@C2a97@library-path))) (set! C4f1b@load/args (lambda (C4fd6@filename . C4fd8@args) (begin (apply C4f2b@load-r6rs-top-level C4fd6@filename 'load C4fd8@args) (void)))) (set! C4f1d@load (lambda (C4fda@filename) (begin (apply C4f2b@load-r6rs-top-level C4fda@filename 'load (C4f17@command-line)) (void)))) (set! C4f1f@ironscheme-build (lambda () (C4f1d@load '"ironscheme-buildscript.ss"))) (set! C4f21@eval-top-level (lambda (C4fdc@x) (C4b2c@C3107@eval C4fdc@x (C4b42@C3133@interaction-environment)))) (set! C4f23@compile-system-libraries (lambda () (C4f21@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! C4f25@compile (lambda (C4fde@filename) (C4f2b@load-r6rs-top-level C4fde@filename 'compile))) (set! C4f27@compile->closure (lambda (C4fe0@filename) (C4f2b@load-r6rs-top-level C4fe0@filename 'closure))) (set! C4f29@pre-compile-r6rs-file (lambda (C4fe2@filename) (C4f2b@load-r6rs-top-level C4fe2@filename 'compile))) (set! C4f2b@load-r6rs-top-level (lambda (C4fe4@filename C4fe5@how . C4fe8@args) ((lambda (C4fee@C4feb C4fef@C4fed) ((lambda (C4ff2@swap) (dynamic-wind C4ff2@swap (lambda () ((lambda (C4ff4@x*) ((lambda (C4ff6@t) (if (memv C4ff6@t '(closure)) (C4b41@C3131@pre-compile-r6rs-top-level C4ff4@x*) (if (memv C4ff6@t '(load)) ((lambda (C5000@C4ff9 C5001@C4ffb C5002@C4ffd C5003@C4fff) ((lambda (C5008@swap) (dynamic-wind C5008@swap (lambda () ((lambda (C500a@compiled) (begin (if (not (symbol-value '%disable-acc)) (C2c5f@C2a9f@serialize-all C299c@C2876@serialize-library C29f8@C29b1@compile-core-expr) (void)) (C500a@compiled))) (C4b40@C312f@compile-r6rs-top-level C4ff4@x*))) C5008@swap)) (lambda () (begin ((lambda (C500c@t) (begin (C5000@C4ff9 C5002@C4ffd) (set! C5002@C4ffd C500c@t))) (C5000@C4ff9)) ((lambda (C500e@t) (begin (C5001@C4ffb C5003@C4fff) (set! C5003@C4fff C500e@t))) (C5001@C4ffb)))))) C4f17@command-line C29a2@C2882@mosh-cache-dir (cons C4fe4@filename (car C4fe8@args)) (create-mosh-cache-dir)) (if (memv C4ff6@t '(compile)) (begin (C4b40@C312f@compile-r6rs-top-level C4ff4@x*) (C2c5f@C2a9f@serialize-all C299c@C2876@serialize-library C29f8@C29b1@compile-core-expr)) (if '#f '#f (void)))))) C4fe5@how)) (with-input-from-file C4fe4@filename (lambda () ((letrec ((C5010@f (lambda () ((lambda (C5012@x) (if (eof-object? C5012@x) '() (cons C5012@x (C5010@f)))) (C2994@C2866@read-annotated))))) C5010@f)))))) C4ff2@swap)) (lambda () ((lambda (C5014@t) (begin (C4fee@C4feb C4fef@C4fed) (set! C4fef@C4fed C5014@t))) (C4fee@C4feb))))) C2c5b@C2a97@library-path (C4f19@local-library-path C4fe4@filename)))) (set! C4f2d@load-r6rs-top-level-sexp (lambda (C5016@import-spec C5017@thunk) ((lambda (C5022@C501b C5023@C501d C5024@C501f C5025@C5021) ((lambda (C502a@swap) (dynamic-wind C502a@swap (lambda () ((lambda (C5030@C502d C5031@C502f) ((lambda (C5034@swap) (dynamic-wind C5034@swap (lambda () ((C4b40@C312f@compile-r6rs-top-level (list (cons 'import C5016@import-spec) (list C5017@thunk))))) C5034@swap)) (lambda () ((lambda (C5036@t) (begin (C5030@C502d C5031@C502f) (set! C5031@C502f C5036@t))) (C5030@C502d))))) C4f17@command-line '())) C502a@swap)) (lambda () (begin ((lambda (C5038@t) (begin (C5022@C501b C5024@C501f) (set! C5024@C501f C5038@t))) (C5022@C501b)) ((lambda (C503a@t) (begin (C5023@C501d C5025@C5021) (set! C5025@C5021 C503a@t))) (C5023@C501d)))))) C2c5b@C2a97@library-path C29a2@C2882@mosh-cache-dir (C4f19@local-library-path '"") (create-mosh-cache-dir)))) (begin (set! C5050@C4f2d@load-r6rs-top-level-sexp C4f2d@load-r6rs-top-level-sexp) (set! C504f@C4f2b@load-r6rs-top-level C4f2b@load-r6rs-top-level) (set! C504e@C4f29@pre-compile-r6rs-file C4f29@pre-compile-r6rs-file) (set! C504d@C4f27@compile->closure C4f27@compile->closure) (set! C504c@C4f25@compile C4f25@compile) (set! C504b@C4f23@compile-system-libraries C4f23@compile-system-libraries) (set! C504a@C4f21@eval-top-level C4f21@eval-top-level) (set! C5049@C4f1f@ironscheme-build C4f1f@ironscheme-build) (set! C5048@C4f1d@load C4f1d@load) (set! C5047@C4f1b@load/args C4f1b@load/args) (set! C5046@C4f19@local-library-path C4f19@local-library-path) (set! C5045@C4f17@command-line C4f17@command-line) (set! C5044@C4f15@trace-printer C4f15@trace-printer) (set! C5043@C4f13@repl C4f13@repl) (set! C5042@C4f11@map-with-index C4f11@map-with-index) (set! C5041@C4f0f@record->field-alist C4f0f@record->field-alist) (set! C5040@C4f0d@condition-printer C4f0d@condition-printer) (set! C503f@C4f0b@rpad C4f0b@rpad) (set! C503e@C4f09@for-each-with-index C4f09@for-each-with-index) (set! C503d@C4f07@parse-and-add-library-path C4f07@parse-and-add-library-path) (set! C503c@C4f05@add-library-path! C4f05@add-library-path!) (C2c60@C2aa1@current-precompiled-library-loader C299d@C2878@load-serialized-library) (set-symbol-value! 'load C4f1d@load) (set-symbol-value! 'pre-compile-r6rs-file C4f29@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs C4f21@eval-top-level) (set-symbol-value! 'int-env-syms C4b23@C30f5@interaction-environment-symbols) (set-symbol-value! 'expanded2core C29f7@C29af@expanded->core) (set-symbol-value! 'trace-printer C4f15@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (C4f2e@c) (condition (C4e62@C4c6c@make-non-continuable-violation) (C4e58@C4c53@make-who-condition 'raise) (C4e1c@C4bb4@make-message-condition '"returned from non-continuable exception") (C4e4e@C4c38@make-irritants-condition (list C4f2e@c))))) (C4f07@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (C4f07@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (C4f05@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (C4f05@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (C4f05@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (C4f30@prefix) (C2c5c@C2a99@library-extensions (C4f30@prefix '".mosh" (C2c5c@C2a99@library-extensions)))) (lambda (C4f32@ext C4f33@ls) (append (map (lambda (C4f36@x) (string-append C4f32@ext C4f36@x)) C4f33@ls) C4f33@ls))) ((lambda (C4f38@args C4f39@port) ((lambda (C4f3d@ref) (begin (set! C4f3d@ref (lambda (C4f48@rtd C4f49@i C4f4a@x) ((lambda (C4f4e@val) (if (symbol? C4f4e@val) (ungensym C4f4e@val) C4f4e@val)) ((record-accessor C4f48@rtd C4f49@i) C4f4a@x)))) (with-exception-handler (lambda (C4f3e@c) (if (condition? C4f3e@c) (C4f0d@condition-printer C4f3e@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" C4f3e@c))) (lambda () (if ((call/cc (lambda (C4f42@C4f40) (lambda () (with-exception-handler (lambda (C4f44@c) ((call/cc (lambda (C4f46@C4f41) (C4f42@C4f40 (lambda () (if '#t '#f (C4f46@C4f41 (lambda () (raise-continuable C4f44@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (C4f2d@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? C4f38@args) (C4f13@repl) (C4f2b@load-r6rs-top-level (car C4f38@args) 'load (cdr C4f38@args)))))))) '#f)) (C4f17@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
