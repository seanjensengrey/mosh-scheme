;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (z2847@read-annotated z2849@annotation-stripped z284b@annotation? z284d@annotation-source z284f@annotation-expression z2851@scm->fasl z2853@fasl-save z2855@fasl-load z2857@serialize-library z2859@load-serialized-library z285b@make-record-printer z285d@compile-core z285f@read-library-source-file z2861@make-parameter z28f7@file-options-spec) (begin (set! z2847@read-annotated read) (set! z2849@annotation-stripped (lambda (z28f8@x) (z284f@annotation-expression z28f8@x))) (set! z284b@annotation? (lambda (z28fa@x) (source-info z28fa@x))) (set! z284d@annotation-source (lambda (z28fc@x) (source-info z28fc@x))) (set! z284f@annotation-expression (lambda (z28fe@x) (if (pair? z28fe@x) (cons (car z28fe@x) (cdr z28fe@x)) (display '"line:46\n")))) (set! z2851@scm->fasl (lambda (z2900@filename) (string-append z2900@filename '".mosh-fasl"))) (set! z2853@fasl-save (lambda (z2902@filename z2903@obj) (call-with-port (open-file-output-port z2902@filename) (lambda (z2906@port) ((symbol-value 'fasl-write!) z2903@obj z2906@port))))) (set! z2855@fasl-load (lambda (z2908@filename) (call-with-port (open-file-input-port z2908@filename) (symbol-value 'fasl-read!)))) (set! z2857@serialize-library (lambda (z290a@filename z290b@obj) (begin (format '#t '"serialize-library ~a\n..." z290a@filename) ((lambda (z290e@expanded2core) ((lambda (z2910@compile) ((lambda (z2912@code) ((lambda (z2914@pivot) ((lambda (z2916@visit) ((lambda () (begin (set-car! z2914@pivot z2916@visit) ((lambda (z2918@pivot) ((lambda (z291a@invoke) ((lambda () (set-car! z2918@pivot z291a@invoke)))) (z2910@compile (z290e@expanded2core (car z2918@pivot))))) (cdr z2914@pivot)))))) (z2910@compile (z290e@expanded2core (car z2914@pivot))))) (cddddr (cddddr z2912@code)))) z290b@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (z291c@fasl-file) (begin (if (file-exists? z291c@fasl-file) (delete-file z291c@fasl-file) (void)) ((call/cc (lambda (z2920@z291e) (lambda () (with-exception-handler (lambda (z2922@c) ((call/cc (lambda (z2924@z291f) (z2920@z291e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " z290a@filename) (if (file-exists? z291c@fasl-file) (delete-file z291c@fasl-file) (void)) '#f) (z2924@z291f (lambda () (raise-continuable z2922@c)))))))))) (lambda () (begin (z2853@fasl-save z291c@fasl-file z290b@obj) (display '"OK\n")))))))))) (z2851@scm->fasl z290a@filename))))) (set! z2859@load-serialized-library (lambda (z2926@filename z2927@obj) ((lambda (z292a@fasl-file) (if (and (file-exists? z292a@fasl-file) ((symbol-value 'file-newer?) z292a@fasl-file z2926@filename)) ((lambda (z292c@expanded2core) ((lambda (z292e@eval-compiled-core) ((lambda (z2930@code) ((lambda (z2932@pivot) ((lambda (z2934@visit) ((lambda (z2936@visit-proc) ((lambda () (begin (set-car! z2932@pivot z2936@visit-proc) ((lambda (z2938@pivot) ((lambda (z293a@invoke) ((lambda () (begin (set-car! z2938@pivot (lambda () (z292e@eval-compiled-core z293a@invoke))) (apply z2927@obj z2930@code))))) (car z2938@pivot))) (cdr z2932@pivot)) '#t)))) (lambda () (z292e@eval-compiled-core z2934@visit)))) (car z2932@pivot))) (cddddr (cddddr z2930@code)))) (z2855@fasl-load z292a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (z2851@scm->fasl z2926@filename)))) (set! z285b@make-record-printer (lambda (z293c@name z293d@printer) (lambda z2940@x (begin (display '"record printer") (for-each display z2940@x))))) (set! z285d@compile-core (lambda z2942@x (apply error 'comile-core '"not implementated" z2942@x))) (set! z285f@read-library-source-file (lambda (z2944@file-name) (with-input-from-file z2944@file-name z2847@read-annotated))) (set! z2861@make-parameter (lambda z2954 ((lambda (z2955) (if (= z2955 '1) (apply (lambda (z2946@x) (z2861@make-parameter z2946@x (lambda (z2948@x) z2948@x))) z2954) (if (= z2955 '2) (apply (lambda (z294a@x z294b@fender) ((lambda (z294e@x) (lambda z2952 ((lambda (z2953) (if (= z2953 '0) (apply (lambda () z294e@x) z2952) (if (= z2953 '1) (apply (lambda (z2950@v) (set! z294e@x (z294b@fender z2950@v))) z2952) (error 'apply '"invalid arg count")))) (length z2952)))) (z294b@fender z294a@x))) z2954) (error 'apply '"invalid arg count")))) (length z2954)))) (set! z28f7@file-options-spec (lambda (z2956@x) z2956@x)) (begin (set! z2966@z28f7@file-options-spec z28f7@file-options-spec) (set! z2965@z2861@make-parameter z2861@make-parameter) (set! z2964@z285f@read-library-source-file z285f@read-library-source-file) (set! z2963@z285d@compile-core z285d@compile-core) (set! z2962@z285b@make-record-printer z285b@make-record-printer) (set! z2961@z2859@load-serialized-library z2859@load-serialized-library) (set! z2960@z2857@serialize-library z2857@serialize-library) (set! z295f@z2855@fasl-load z2855@fasl-load) (set! z295e@z2853@fasl-save z2853@fasl-save) (set! z295d@z2851@scm->fasl z2851@scm->fasl) (set! z295c@z284f@annotation-expression z284f@annotation-expression) (set! z295b@z284d@annotation-source z284d@annotation-source) (set! z295a@z284b@annotation? z284b@annotation?) (set! z2959@z2849@annotation-stripped z2849@annotation-stripped) (set! z2958@z2847@read-annotated z2847@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z296c@current-primitive-locations z296e@mutable? z2970@rewriter z2972@expanded->core z2974@compile-core-expr z2976@pretty-print z2978@compile-core-expr-to-port) (begin (set! z296c@current-primitive-locations (z2965@z2861@make-parameter (lambda (z2979@x) '#f) (lambda (z297b@p) z297b@p))) (set! z296e@mutable? (lambda (z297d@x) (or (pair? z297d@x) (vector? z297d@x) (hashtable? z297d@x)))) (set! z2970@rewriter (lambda (z297f@quote-hack?) ((lambda (z2982@f) (begin (set! z2982@f (lambda (z2983@x) (if (pair? z2983@x) ((lambda (z2985@t) (if (memv z2985@t '(quote)) (if (and z297f@quote-hack? (z296e@mutable? (cadr z2983@x))) ((lambda (z2987@g) (begin (set-symbol-value! z2987@g (cadr z2983@x)) z2987@g)) (gensym)) z2983@x) (if (memv z2985@t '(case-lambda)) (cons 'case-lambda (map (lambda (z2989@x) (cons (car z2989@x) (map z2982@f (cdr z2989@x)))) (cdr z2983@x))) (if (memv z2985@t '(lambda)) (cons* 'lambda (cadr z2983@x) (map z2982@f (cddr z2983@x))) (if (memv z2985@t '(letrec)) ((lambda (z298b@bindings z298c@body*) ((lambda (z298f@lhs* z2990@rhs*) (cons* 'letrec (map list z298f@lhs* (map z2982@f z2990@rhs*)) (map z2982@f z298c@body*))) (map car z298b@bindings) (map cadr z298b@bindings))) (cadr z2983@x) (cddr z2983@x)) (if (memv z2985@t '(letrec*)) ((lambda (z2993@bindings z2994@body*) ((lambda (z2997@lhs* z2998@rhs*) (cons* 'letrec* (map list z2997@lhs* (map z2982@f z2998@rhs*)) (map z2982@f z2994@body*))) (map car z2993@bindings) (map cadr z2993@bindings))) (cadr z2983@x) (cddr z2983@x)) (if (memv z2985@t '(library-letrec*)) ((lambda (z299b@name z299c@x) ((lambda (z299f@bindings z29a0@body*) ((lambda (z29a3@lhs* z29a4@lhs** z29a5@rhs*) (cons* 'library-letrec* z299b@name (map list z29a3@lhs* z29a4@lhs** (map z2982@f z29a5@rhs*)) (map z2982@f z29a0@body*))) (map car z299f@bindings) (map cadr z299f@bindings) (map caddr z299f@bindings))) (cadr z299c@x) (cddr z299c@x))) (cadr z2983@x) (cdr z2983@x)) (if (memv z2985@t '(begin)) (cons 'begin (map z2982@f (cdr z2983@x))) (if (memv z2985@t '(set!)) (list 'set! (cadr z2983@x) (z2982@f (caddr z2983@x))) (if (memv z2985@t '(primitive)) ((lambda (z29a9@op) ((lambda (z29ab@t) (if z29ab@t ((lambda (z29ad@loc) z29ad@loc) z29ab@t) z29a9@op)) ((z296c@current-primitive-locations) z29a9@op))) (cadr z2983@x)) (if (memv z2985@t '(define)) z2983@x (if (list? z2983@x) (map z2982@f z2983@x) (error 'rewrite '"invalid form ~s ~s" z2983@x (list? z2983@x)))))))))))))) (car z2983@x)) z2983@x))) z2982@f)) '#f))) (set! z2972@expanded->core (lambda (z29af@x) ((z2970@rewriter '#f) z29af@x))) (set! z2974@compile-core-expr (lambda (z29b1@x) ((z2970@rewriter '#f) z29b1@x))) (set! z2976@pretty-print write) (set! z2978@compile-core-expr-to-port (lambda (z29b3@x z29b4@p) (z2976@pretty-print ((z2970@rewriter '#f) z29b3@x) z29b4@p))) (begin (set! z29bd@z2978@compile-core-expr-to-port z2978@compile-core-expr-to-port) (set! z29bc@z2976@pretty-print z2976@pretty-print) (set! z29bb@z2974@compile-core-expr z2974@compile-core-expr) (set! z29ba@z2972@expanded->core z2972@expanded->core) (set! z29b9@z2970@rewriter z2970@rewriter) (set! z29b8@z296e@mutable? z296e@mutable?) (set! z29b7@z296c@current-primitive-locations z296c@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (z2a0c@make-collection z2a0e@current-library-collection z2a10@rp z2a12@make-library z2a14@library? z2a16@library-id z2a18@set-library-id! z2a1a@library-name z2a1c@set-library-name! z2a1e@library-version z2a20@set-library-version! z2a22@library-imp* z2a24@set-library-imp*! z2a26@library-vis* z2a28@set-library-vis*! z2a2a@library-inv* z2a2c@set-library-inv*! z2a2e@library-subst z2a30@set-library-subst! z2a32@library-env z2a34@set-library-env! z2a36@library-visit-state z2a38@set-library-visit-state! z2a3a@library-invoke-state z2a3c@set-library-invoke-state! z2a3e@library-visit-code z2a40@set-library-visit-code! z2a42@library-invoke-code z2a44@set-library-invoke-code! z2a46@library-visible? z2a48@set-library-visible?! z2a4a@library-source-file-name z2a4c@set-library-source-file-name! z2a4e@dummy z2a50@find-dependencies z2a52@find-library-by z2a54@library-path z2a56@library-extensions z2a58@library-name->file-name z2a5a@file-locator z2a5c@serialize-all z2a5e@current-precompiled-library-loader z2a60@try-load-from-file z2a62@library-loader z2a64@current-library-expander z2a66@external-pending-libraries z2a68@find-external-library z2a6a@find-library-by-name z2a6c@library-exists? z2a6e@find-library-by-spec/die z2a70@label->binding-table z2a72@install-library-record z2a74@install-library z2a76@imported-label->binding z2a78@invoke-library z2a7a@visit-library z2a7c@invoke-library-by-spec z2a7e@installed-libraries z2a80@library-spec) (begin (set! z2a0c@make-collection (lambda () ((lambda (z2a81@set) ((lambda (z2a84@set-cons) (begin (set! z2a84@set-cons (lambda (z2a89@x z2a8a@ls) (if (memq z2a89@x z2a8a@ls) z2a8a@ls (cons z2a89@x z2a8a@ls)))) (lambda z2a87 ((lambda (z2a88) (if (= z2a88 '0) (apply (lambda () z2a81@set) z2a87) (if (= z2a88 '1) (apply (lambda (z2a85@x) (set! z2a81@set (z2a84@set-cons z2a85@x z2a81@set))) z2a87) (error 'apply '"invalid arg count")))) (length z2a87))))) '#f)) '()))) (set! z2a0e@current-library-collection (z2965@z2861@make-parameter (z2a0c@make-collection) (lambda (z2a8d@x) (begin (if (not (procedure? z2a8d@x)) (assertion-violation 'current-library-collection '"not a procedure" z2a8d@x) (void)) z2a8d@x)))) (set! z2a10@rp (z2962@z285b@make-record-printer 'library (lambda (z2a8f@x z2a90@p z2a91@wr) (begin (if (not (z2a14@library? z2a8f@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (z2a1e@library-version z2a8f@x)) (z2a1a@library-name z2a8f@x) (append (z2a1a@library-name z2a8f@x) (list (z2a1e@library-version z2a8f@x))))) z2a90@p))))) (set! z2a12@make-library (lambda z2a95@args (make-simple-struct 'library '15 z2a95@args))) (set! z2a14@library? (lambda (z2a97@x) (and (simple-struct? z2a97@x) (eq? (simple-struct-name z2a97@x) 'library)))) (set! z2a16@library-id (lambda (z2a99@x) (simple-struct-ref z2a99@x '0))) (set! z2a18@set-library-id! (lambda (z2a9b@x z2a9c@val) (simple-struct-set! z2a9b@x '0 z2a9c@val))) (set! z2a1a@library-name (lambda (z2a9f@x) (simple-struct-ref z2a9f@x '1))) (set! z2a1c@set-library-name! (lambda (z2aa1@x z2aa2@val) (simple-struct-set! z2aa1@x '1 z2aa2@val))) (set! z2a1e@library-version (lambda (z2aa5@x) (simple-struct-ref z2aa5@x '2))) (set! z2a20@set-library-version! (lambda (z2aa7@x z2aa8@val) (simple-struct-set! z2aa7@x '2 z2aa8@val))) (set! z2a22@library-imp* (lambda (z2aab@x) (simple-struct-ref z2aab@x '3))) (set! z2a24@set-library-imp*! (lambda (z2aad@x z2aae@val) (simple-struct-set! z2aad@x '3 z2aae@val))) (set! z2a26@library-vis* (lambda (z2ab1@x) (simple-struct-ref z2ab1@x '4))) (set! z2a28@set-library-vis*! (lambda (z2ab3@x z2ab4@val) (simple-struct-set! z2ab3@x '4 z2ab4@val))) (set! z2a2a@library-inv* (lambda (z2ab7@x) (simple-struct-ref z2ab7@x '5))) (set! z2a2c@set-library-inv*! (lambda (z2ab9@x z2aba@val) (simple-struct-set! z2ab9@x '5 z2aba@val))) (set! z2a2e@library-subst (lambda (z2abd@x) (simple-struct-ref z2abd@x '6))) (set! z2a30@set-library-subst! (lambda (z2abf@x z2ac0@val) (simple-struct-set! z2abf@x '6 z2ac0@val))) (set! z2a32@library-env (lambda (z2ac3@x) (simple-struct-ref z2ac3@x '7))) (set! z2a34@set-library-env! (lambda (z2ac5@x z2ac6@val) (simple-struct-set! z2ac5@x '7 z2ac6@val))) (set! z2a36@library-visit-state (lambda (z2ac9@x) (simple-struct-ref z2ac9@x '8))) (set! z2a38@set-library-visit-state! (lambda (z2acb@x z2acc@val) (simple-struct-set! z2acb@x '8 z2acc@val))) (set! z2a3a@library-invoke-state (lambda (z2acf@x) (simple-struct-ref z2acf@x '9))) (set! z2a3c@set-library-invoke-state! (lambda (z2ad1@x z2ad2@val) (simple-struct-set! z2ad1@x '9 z2ad2@val))) (set! z2a3e@library-visit-code (lambda (z2ad5@x) (simple-struct-ref z2ad5@x '10))) (set! z2a40@set-library-visit-code! (lambda (z2ad7@x z2ad8@val) (simple-struct-set! z2ad7@x '10 z2ad8@val))) (set! z2a42@library-invoke-code (lambda (z2adb@x) (simple-struct-ref z2adb@x '11))) (set! z2a44@set-library-invoke-code! (lambda (z2add@x z2ade@val) (simple-struct-set! z2add@x '11 z2ade@val))) (set! z2a46@library-visible? (lambda (z2ae1@x) (simple-struct-ref z2ae1@x '12))) (set! z2a48@set-library-visible?! (lambda (z2ae3@x z2ae4@val) (simple-struct-set! z2ae3@x '12 z2ae4@val))) (set! z2a4a@library-source-file-name (lambda (z2ae7@x) (simple-struct-ref z2ae7@x '13))) (set! z2a4c@set-library-source-file-name! (lambda (z2ae9@x z2aea@val) (simple-struct-set! z2ae9@x '13 z2aea@val))) (set! z2a4e@dummy '3) (set! z2a50@find-dependencies (lambda (z2aed@ls) (if (null? z2aed@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! z2a52@find-library-by (lambda (z2aef@pred) ((letrec ((z2af1@f (lambda (z2af3@ls) (if (null? z2af3@ls) '#f (if (z2aef@pred (car z2af3@ls)) (car z2af3@ls) (z2af1@f (cdr z2af3@ls))))))) z2af1@f) ((z2a0e@current-library-collection))))) (set! z2a54@library-path (z2965@z2861@make-parameter '(".") (lambda (z2af5@x) (if (and (list? z2af5@x) (for-all string? z2af5@x)) (map (lambda (z2af7@x) z2af7@x) z2af5@x) (assertion-violation 'library-path '"not a list of strings" z2af5@x))))) (set! z2a56@library-extensions (z2965@z2861@make-parameter '(".sls" ".ss" ".scm") (lambda (z2af9@x) (if (and (list? z2af9@x) (for-all string? z2af9@x)) (map (lambda (z2afb@x) z2afb@x) z2af9@x) (assertion-violation 'library-extensions '"not a list of strings" z2af9@x))))) (set! z2a58@library-name->file-name (lambda (z2afd@x) (call-with-values (lambda () (open-string-output-port)) (lambda (z2b03@z2b00 z2b04@z2b02) ((lambda (z2b07@extract z2b08@p) ((lambda (z2b0c@display-hex) (begin (set! z2b0c@display-hex (lambda (z2b15@n) (if (<= '0 z2b15@n '9) (display z2b15@n z2b08@p) (display (integer->char (+ (char->integer '#\a) (- z2b15@n '10))) z2b08@p)))) (begin ((letrec ((z2b0d@f (lambda (z2b0f@ls) (if (not (null? z2b0f@ls)) (begin (display '"/" z2b08@p) (for-each (lambda (z2b11@c) (if (or (char<=? '#\a z2b11@c '#\z) (char<=? '#\A z2b11@c '#\Z) (char<=? '#\0 z2b11@c '#\9) (memv z2b11@c '(#\- #\. #\_ #\~))) (display z2b11@c z2b08@p) (begin (display '"%" z2b08@p) ((lambda (z2b13@n) (begin (z2b0c@display-hex (quotient z2b13@n '16)) (z2b0c@display-hex (remainder z2b13@n '16)))) (char->integer z2b11@c))))) (string->list (symbol->string (car z2b0f@ls)))) (z2b0d@f (cdr z2b0f@ls))) (void))))) z2b0d@f) z2afd@x) (z2b07@extract)))) '#f)) z2b04@z2b02 z2b03@z2b00))))) (set! z2a5a@file-locator (z2965@z2861@make-parameter (lambda (z2b17@x) ((lambda (z2b19@str) ((letrec ((z2b1b@f (lambda (z2b1d@ls z2b1e@exts z2b1f@failed-list) (if (null? z2b1d@ls) ((lambda () ((lambda (z2b2b@z2b26 z2b2d@z2b28 z2b2f@z2b27 z2b32@z2b25 z2b34@make-library-resolution-condition z2b36@z2b23 z2b38@z2b24 z2b3a@library-resolution-condition? z2b3c@condition-library z2b3e@condition-files) (begin (set! z2b2b@z2b26 (make-record-type-descriptor '&library-resolution z4dde@z4b25@&condition-rtd 'z2b29 '#f '#f '#((immutable library) (immutable files)))) (set! z2b2d@z2b28 '#f) (set! z2b2f@z2b27 (make-record-constructor-descriptor z2b2b@z2b26 z4ddf@z4b27@&condition-rcd z2b2d@z2b28)) (set! z2b32@z2b25 (record-predicate z2b2b@z2b26)) (set! z2b34@make-library-resolution-condition (record-constructor z2b2f@z2b27)) (set! z2b36@z2b23 (record-accessor z2b2b@z2b26 '0)) (set! z2b38@z2b24 (record-accessor z2b2b@z2b26 '1)) (set! z2b3a@library-resolution-condition? (condition-predicate z2b2b@z2b26)) (set! z2b3c@condition-library (condition-accessor z2b2b@z2b26 z2b36@z2b23)) (set! z2b3e@condition-files (condition-accessor z2b2b@z2b26 z2b38@z2b24)) (raise (condition (z4dfe@z4bbf@make-error) (z4e20@z4c1b@make-who-condition 'expander) (z4de4@z4b7c@make-message-condition '"cannot locate library in library-path") (z2b34@make-library-resolution-condition z2b17@x (reverse z2b1f@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? z2b1e@exts) (z2b1b@f (cdr z2b1d@ls) (z2a56@library-extensions) z2b1f@failed-list) ((lambda (z2b3f@name) (if (file-exists? z2b3f@name) z2b3f@name (z2b1b@f z2b1d@ls (cdr z2b1e@exts) (cons z2b3f@name z2b1f@failed-list)))) (string-append (car z2b1d@ls) z2b19@str (car z2b1e@exts)))))))) z2b1b@f) (z2a54@library-path) (z2a56@library-extensions) '())) (z2a58@library-name->file-name z2b17@x))) (lambda (z2b41@f) (if (procedure? z2b41@f) z2b41@f (assertion-violation 'file-locator '"not a procedure" z2b41@f))))) (set! z2a5c@serialize-all (lambda (z2b43@serialize z2b44@compile) ((lambda (z2b48@library-desc) (begin (set! z2b48@library-desc (lambda (z2b4b@x) (list (z2a16@library-id z2b4b@x) (z2a1a@library-name z2b4b@x)))) (for-each (lambda (z2b49@x) (if (z2a4a@library-source-file-name z2b49@x) (z2b43@serialize (z2a4a@library-source-file-name z2b49@x) (list (z2a16@library-id z2b49@x) (z2a1a@library-name z2b49@x) (z2a1e@library-version z2b49@x) (map z2b48@library-desc (z2a22@library-imp* z2b49@x)) (map z2b48@library-desc (z2a26@library-vis* z2b49@x)) (map z2b48@library-desc (z2a2a@library-inv* z2b49@x)) (z2a2e@library-subst z2b49@x) (z2a32@library-env z2b49@x) (z2b44@compile (z2a3e@library-visit-code z2b49@x)) (z2b44@compile (z2a42@library-invoke-code z2b49@x)) (z2a46@library-visible? z2b49@x))) (void))) ((z2a0e@current-library-collection))))) '#f))) (set! z2a5e@current-precompiled-library-loader (z2965@z2861@make-parameter (lambda (z2b4d@filename z2b4e@sk) '#f))) (set! z2a60@try-load-from-file (lambda (z2b51@filename) ((z2a5e@current-precompiled-library-loader) z2b51@filename (lambda z2b77 ((lambda (z2b78) (if (= z2b78 '11) (apply (lambda (z2b53@id z2b54@name z2b55@ver z2b56@imp* z2b57@vis* z2b58@inv* z2b59@exp-subst z2b5a@exp-env z2b5b@visit-proc z2b5c@invoke-proc z2b5d@visible?) ((letrec ((z2b69@f (lambda (z2b6b@deps) (if (null? z2b6b@deps) (begin (z2a74@install-library z2b53@id z2b54@name z2b55@ver z2b56@imp* z2b57@vis* z2b58@inv* z2b59@exp-subst z2b5a@exp-env z2b5b@visit-proc z2b5c@invoke-proc '#f '#f z2b5d@visible? '#f) '#t) ((lambda (z2b6d@d) ((lambda (z2b6f@label z2b70@dname) ((lambda (z2b73@l) (if (and (z2a14@library? z2b73@l) (eq? z2b6f@label (z2a16@library-id z2b73@l))) (z2b69@f (cdr z2b6b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" z2b54@name z2b70@dname z2b51@filename z2b73@l z2b6f@label (z2a16@library-id z2b73@l)) '#f))) (z2a6a@find-library-by-name z2b70@dname))) (car z2b6d@d) (cadr z2b6d@d))) (car z2b6b@deps)))))) z2b69@f) (append z2b56@imp* z2b57@vis* z2b58@inv*))) z2b77) (if (>= z2b78 '0) (apply (lambda z2b75@others '#f) z2b77) (error 'apply '"invalid arg count")))) (length z2b77)))))) (set! z2a62@library-loader (z2965@z2861@make-parameter (lambda (z2b79@x) ((lambda (z2b7b@file-name) (if (not z2b7b@file-name) (assertion-violation '#f '"cannot file library" z2b79@x) (or (z2a60@try-load-from-file z2b7b@file-name) ((z2a64@current-library-expander) (z2964@z285f@read-library-source-file z2b7b@file-name) z2b7b@file-name (lambda (z2b7d@name) (if (not (fast-equal? z2b7d@name z2b79@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (z2b83@z2b80 z2b84@z2b82) ((lambda (z2b87@e z2b88@p) (begin (display '"expected to find library " z2b88@p) (write z2b79@x z2b88@p) (display '" in file " z2b88@p) (display z2b7b@file-name z2b88@p) (display '", found " z2b88@p) (write z2b7d@name z2b88@p) (display '" instead" z2b88@p) (z2b87@e))) z2b84@z2b82 z2b83@z2b80)))) (void))))))) ((z2a5a@file-locator) z2b79@x))) (lambda (z2b8b@f) (if (procedure? z2b8b@f) z2b8b@f (assertion-violation 'library-locator '"not a procedure" z2b8b@f))))) (set! z2a64@current-library-expander (z2965@z2861@make-parameter (lambda (z2b8d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (z2b8f@f) (if (procedure? z2b8f@f) z2b8f@f (assertion-violation 'library-expander '"not a procedure" z2b8f@f))))) (set! z2a66@external-pending-libraries (z2965@z2861@make-parameter '())) (set! z2a68@find-external-library (lambda (z2b91@name) (begin (if (member z2b91@name (z2a66@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" z2b91@name) (void)) ((lambda (z2b97@z2b94 z2b98@z2b96) ((lambda (z2b9b@swap) (dynamic-wind z2b9b@swap (lambda () (begin ((z2a62@library-loader) z2b91@name) (or (z2a52@find-library-by (lambda (z2b9d@x) (fast-equal? (z2a1a@library-name z2b9d@x) z2b91@name))) (assertion-violation '#f '"handling external library did not yield the correct library" z2b91@name)))) z2b9b@swap)) (lambda () ((lambda (z2b9f@t) (begin (z2b97@z2b94 z2b98@z2b96) (set! z2b98@z2b96 z2b9f@t))) (z2b97@z2b94))))) z2a66@external-pending-libraries (cons z2b91@name (z2a66@external-pending-libraries)))))) (set! z2a6a@find-library-by-name (lambda (z2ba1@name) (or (z2a52@find-library-by (lambda (z2ba3@x) (fast-equal? (z2a1a@library-name z2ba3@x) z2ba1@name))) (z2a68@find-external-library z2ba1@name)))) (set! z2a6c@library-exists? (lambda (z2ba5@name) (and (z2a52@find-library-by (lambda (z2ba7@x) (fast-equal? (z2a1a@library-name z2ba7@x) z2ba5@name))) '#t))) (set! z2a6e@find-library-by-spec/die (lambda (z2ba9@spec) ((lambda (z2bab@id) (or (z2a52@find-library-by (lambda (z2bad@x) (eq? z2bab@id (z2a16@library-id z2bad@x)))) (assertion-violation '#f '"cannot find library with required spec" z2ba9@spec))) (car z2ba9@spec)))) (set! z2a70@label->binding-table (make-eq-hashtable)) (set! z2a72@install-library-record (lambda (z2baf@lib) (begin ((lambda (z2bb1@exp-env) (for-each (lambda (z2bb3@x) ((lambda (z2bb5@label z2bb6@binding) ((lambda (z2bb9@binding) (begin (if (hashtable-ref z2a70@label->binding-table z2bb5@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" z2bb5@label (hashtable-ref z2a70@label->binding-table z2bb5@label '#f) z2bb9@binding) (exit)) (void)) (hashtable-set! z2a70@label->binding-table z2bb5@label z2bb9@binding))) ((lambda (z2bbb@t) (if (memv z2bbb@t '(global)) (cons 'global (cons z2baf@lib (cdr z2bb6@binding))) (if (memv z2bbb@t '(global-macro)) (cons 'global-macro (cons z2baf@lib (cdr z2bb6@binding))) (if (memv z2bbb@t '(global-macro!)) (cons 'global-macro! (cons z2baf@lib (cdr z2bb6@binding))) z2bb6@binding)))) (car z2bb6@binding)))) (car z2bb3@x) (cdr z2bb3@x))) z2bb1@exp-env)) (z2a32@library-env z2baf@lib)) ((z2a0e@current-library-collection) z2baf@lib)))) (set! z2a74@install-library (lambda (z2bbd@id z2bbe@name z2bbf@ver z2bc0@imp* z2bc1@vis* z2bc2@inv* z2bc3@exp-subst z2bc4@exp-env z2bc5@visit-proc z2bc6@invoke-proc z2bc7@visit-code z2bc8@invoke-code z2bc9@visible? z2bca@source-file-name) ((lambda (z2bd9@imp-lib* z2bda@vis-lib* z2bdb@inv-lib*) (begin (if (not (and (symbol? z2bbd@id) (list? z2bbe@name) (list? z2bbf@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" z2bbd@id z2bbe@name z2bbf@ver) (void)) (if (z2a6c@library-exists? z2bbe@name) (assertion-violation 'install-library '"library is already installed" z2bbe@name) (void)) ((lambda (z2bdf@lib) (z2a72@install-library-record z2bdf@lib)) (z2a12@make-library z2bbd@id z2bbe@name z2bbf@ver z2bd9@imp-lib* z2bda@vis-lib* z2bdb@inv-lib* z2bc3@exp-subst z2bc4@exp-env z2bc5@visit-proc z2bc6@invoke-proc z2bc7@visit-code z2bc8@invoke-code z2bc9@visible? z2bca@source-file-name)))) (map z2a6e@find-library-by-spec/die z2bc0@imp*) (map z2a6e@find-library-by-spec/die z2bc1@vis*) (map z2a6e@find-library-by-spec/die z2bc2@inv*)))) (set! z2a76@imported-label->binding (lambda (z2be1@lab) (hashtable-ref z2a70@label->binding-table z2be1@lab '#f))) (set! z2a78@invoke-library (lambda (z2be3@lib) ((lambda (z2be5@invoke) (if (procedure? z2be5@invoke) (begin (z2a3c@set-library-invoke-state! z2be3@lib (lambda () (assertion-violation 'invoke '"circularity detected" z2be3@lib))) (for-each z2a78@invoke-library (z2a2a@library-inv* z2be3@lib)) (z2a3c@set-library-invoke-state! z2be3@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" z2be3@lib))) (z2be5@invoke) (z2a3c@set-library-invoke-state! z2be3@lib '#t)) (void))) (z2a3a@library-invoke-state z2be3@lib)))) (set! z2a7a@visit-library (lambda (z2be7@lib) ((lambda (z2be9@visit) (if (procedure? z2be9@visit) (begin (z2a38@set-library-visit-state! z2be7@lib (lambda () (assertion-violation 'visit '"circularity detected" z2be7@lib))) (for-each z2a78@invoke-library (z2a26@library-vis* z2be7@lib)) (z2a38@set-library-visit-state! z2be7@lib (lambda () (assertion-violation 'invoke '"first visit did not return" z2be7@lib))) (z2be9@visit) (z2a38@set-library-visit-state! z2be7@lib '#t)) (void))) (z2a36@library-visit-state z2be7@lib)))) (set! z2a7c@invoke-library-by-spec (lambda (z2beb@spec) (z2a78@invoke-library (z2a6e@find-library-by-spec/die z2beb@spec)))) (set! z2a7e@installed-libraries (lambda z2bf3 ((lambda (z2bf4) (if (= z2bf4 '1) (apply (lambda (z2bed@all?) ((letrec ((z2bef@f (lambda (z2bf1@ls) (if (null? z2bf1@ls) '() (if (or z2bed@all? (z2a46@library-visible? (car z2bf1@ls))) (cons (car z2bf1@ls) (z2bef@f (cdr z2bf1@ls))) (z2bef@f (cdr z2bf1@ls))))))) z2bef@f) ((z2a0e@current-library-collection)))) z2bf3) (if (= z2bf4 '0) (apply (lambda () (z2a7e@installed-libraries '#f)) z2bf3) (error 'apply '"invalid arg count")))) (length z2bf3)))) (set! z2a80@library-spec (lambda (z2bf5@x) (begin (if (not (z2a14@library? z2bf5@x)) (assertion-violation 'library-spec '"not a library" z2bf5@x) (void)) (list (z2a16@library-id z2bf5@x) (z2a1a@library-name z2bf5@x) (z2a1e@library-version z2bf5@x))))) (begin (set! z2c31@z2a80@library-spec z2a80@library-spec) (set! z2c30@z2a7e@installed-libraries z2a7e@installed-libraries) (set! z2c2f@z2a7c@invoke-library-by-spec z2a7c@invoke-library-by-spec) (set! z2c2e@z2a7a@visit-library z2a7a@visit-library) (set! z2c2d@z2a78@invoke-library z2a78@invoke-library) (set! z2c2c@z2a76@imported-label->binding z2a76@imported-label->binding) (set! z2c2b@z2a74@install-library z2a74@install-library) (set! z2c2a@z2a72@install-library-record z2a72@install-library-record) (set! z2c29@z2a70@label->binding-table z2a70@label->binding-table) (set! z2c28@z2a6e@find-library-by-spec/die z2a6e@find-library-by-spec/die) (set! z2c27@z2a6c@library-exists? z2a6c@library-exists?) (set! z2c26@z2a6a@find-library-by-name z2a6a@find-library-by-name) (set! z2c25@z2a68@find-external-library z2a68@find-external-library) (set! z2c24@z2a66@external-pending-libraries z2a66@external-pending-libraries) (set! z2c23@z2a64@current-library-expander z2a64@current-library-expander) (set! z2c22@z2a62@library-loader z2a62@library-loader) (set! z2c21@z2a60@try-load-from-file z2a60@try-load-from-file) (set! z2c20@z2a5e@current-precompiled-library-loader z2a5e@current-precompiled-library-loader) (set! z2c1f@z2a5c@serialize-all z2a5c@serialize-all) (set! z2c1e@z2a5a@file-locator z2a5a@file-locator) (set! z2c1d@z2a58@library-name->file-name z2a58@library-name->file-name) (set! z2c1c@z2a56@library-extensions z2a56@library-extensions) (set! z2c1b@z2a54@library-path z2a54@library-path) (set! z2c1a@z2a52@find-library-by z2a52@find-library-by) (set! z2c19@z2a50@find-dependencies z2a50@find-dependencies) (set! z2c18@z2a4e@dummy z2a4e@dummy) (set! z2c17@z2a4c@set-library-source-file-name! z2a4c@set-library-source-file-name!) (set! z2c16@z2a4a@library-source-file-name z2a4a@library-source-file-name) (set! z2c15@z2a48@set-library-visible?! z2a48@set-library-visible?!) (set! z2c14@z2a46@library-visible? z2a46@library-visible?) (set! z2c13@z2a44@set-library-invoke-code! z2a44@set-library-invoke-code!) (set! z2c12@z2a42@library-invoke-code z2a42@library-invoke-code) (set! z2c11@z2a40@set-library-visit-code! z2a40@set-library-visit-code!) (set! z2c10@z2a3e@library-visit-code z2a3e@library-visit-code) (set! z2c0f@z2a3c@set-library-invoke-state! z2a3c@set-library-invoke-state!) (set! z2c0e@z2a3a@library-invoke-state z2a3a@library-invoke-state) (set! z2c0d@z2a38@set-library-visit-state! z2a38@set-library-visit-state!) (set! z2c0c@z2a36@library-visit-state z2a36@library-visit-state) (set! z2c0b@z2a34@set-library-env! z2a34@set-library-env!) (set! z2c0a@z2a32@library-env z2a32@library-env) (set! z2c09@z2a30@set-library-subst! z2a30@set-library-subst!) (set! z2c08@z2a2e@library-subst z2a2e@library-subst) (set! z2c07@z2a2c@set-library-inv*! z2a2c@set-library-inv*!) (set! z2c06@z2a2a@library-inv* z2a2a@library-inv*) (set! z2c05@z2a28@set-library-vis*! z2a28@set-library-vis*!) (set! z2c04@z2a26@library-vis* z2a26@library-vis*) (set! z2c03@z2a24@set-library-imp*! z2a24@set-library-imp*!) (set! z2c02@z2a22@library-imp* z2a22@library-imp*) (set! z2c01@z2a20@set-library-version! z2a20@set-library-version!) (set! z2c00@z2a1e@library-version z2a1e@library-version) (set! z2bff@z2a1c@set-library-name! z2a1c@set-library-name!) (set! z2bfe@z2a1a@library-name z2a1a@library-name) (set! z2bfd@z2a18@set-library-id! z2a18@set-library-id!) (set! z2bfc@z2a16@library-id z2a16@library-id) (set! z2bfb@z2a14@library? z2a14@library?) (set! z2bfa@z2a12@make-library z2a12@make-library) (set! z2bf9@z2a10@rp z2a10@rp) (set! z2bf8@z2a0e@current-library-collection z2a0e@current-library-collection) (set! z2bf7@z2a0c@make-collection z2a0c@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z2c34@build-global-define z2ca5@build-lambda z2ca7@build-case-lambda z2ca9@build-let z2cd7@build-sequence z2cd9@build-void z2cdb@build-letrec z2cdd@build-letrec* z2cdf@build-library-letrec* z2ce1@build-receive) (begin (set! z2c34@build-global-define (lambda (z2ce2@x) (z2cd9@build-void))) (set! z2ca5@build-lambda (lambda (z2ce4@ae z2ce5@vars z2ce6@exp) (list 'lambda z2ce5@vars z2ce6@exp))) (set! z2ca7@build-case-lambda (lambda (z2cea@ae z2ceb@vars* z2cec@exp*) ((lambda (z2cf1@build-error z2cf3@build-pred z2cf5@build-apply z2cf7@expand-case-lambda) (begin (set! z2cf1@build-error (lambda (z2d28@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! z2cf3@build-pred (lambda (z2d10@ae z2d11@n z2d12@vars) (call-with-values (lambda () ((letrec ((z2d1a@f (lambda (z2d1c@vars z2d1d@count) (if (pair? z2d1c@vars) (z2d1a@f (cdr z2d1c@vars) (+ z2d1d@count '1)) (if (null? z2d1c@vars) (values z2d1d@count '=) (values z2d1d@count '>=)))))) z2d1a@f) z2d12@vars '0)) (lambda (z2d20@z2d17 z2d21@z2d19) ((lambda (z2d24@pred z2d25@count) (list (list 'primitive z2d24@pred) z2d11@n (list 'quote z2d25@count))) z2d21@z2d19 z2d20@z2d17))))) (set! z2cf5@build-apply (lambda (z2d08@ae z2d09@g z2d0a@vars z2d0b@exp) (list '(primitive apply) (z2ca5@build-lambda z2d08@ae z2d0a@vars z2d0b@exp) z2d09@g))) (set! z2cf7@expand-case-lambda (lambda (z2cf8@ae z2cf9@vars z2cfa@exp*) ((lambda (z2cfe@g z2cff@n) (list 'lambda z2cfe@g (z2ca9@build-let z2cf8@ae (list z2cff@n) (list (list '(primitive length) z2cfe@g)) ((letrec ((z2d02@f (lambda (z2d04@vars* z2d05@exp*) (if (null? z2d04@vars*) (z2cf1@build-error z2cf8@ae) (list 'if (z2cf3@build-pred z2cf8@ae z2cff@n (car z2d04@vars*)) (z2cf5@build-apply z2cf8@ae z2cfe@g (car z2d04@vars*) (car z2d05@exp*)) (z2d02@f (cdr z2d04@vars*) (cdr z2d05@exp*))))))) z2d02@f) z2ceb@vars* z2cfa@exp*)))) (gensym) (gensym)))) (if (= (length z2cec@exp*) '1) (z2ca5@build-lambda z2cea@ae (car z2ceb@vars*) (car z2cec@exp*)) (z2cf7@expand-case-lambda z2cea@ae z2ceb@vars* z2cec@exp*)))) '#f '#f '#f '#f))) (set! z2ca9@build-let (lambda (z2d2a@ae z2d2b@lhs* z2d2c@rhs* z2d2d@body) (cons (z2ca5@build-lambda z2d2a@ae z2d2b@lhs* z2d2d@body) z2d2c@rhs*))) (set! z2cd7@build-sequence (lambda (z2d32@ae z2d33@exps) ((letrec ((z2d36@loop (lambda (z2d38@exps) (if (null? (cdr z2d38@exps)) (car z2d38@exps) (if (equal? (car z2d38@exps) (z2cd9@build-void)) (z2d36@loop (cdr z2d38@exps)) (cons 'begin z2d38@exps)))))) z2d36@loop) z2d33@exps))) (set! z2cd9@build-void (lambda () '((primitive void)))) (set! z2cdb@build-letrec (lambda (z2d3a@ae z2d3b@vars z2d3c@val-exps z2d3d@body-exp) (if (null? z2d3b@vars) z2d3d@body-exp (list 'letrec (map list z2d3b@vars z2d3c@val-exps) z2d3d@body-exp)))) (set! z2cdd@build-letrec* (lambda (z2d42@ae z2d43@vars z2d44@val-exps z2d45@body-exp) (if (null? z2d43@vars) z2d45@body-exp (z2ca9@build-let z2d42@ae z2d43@vars (map (lambda (z2d4a@x) (list 'quote '#f)) z2d43@vars) (z2cd7@build-sequence z2d42@ae (append (map (lambda (z2d4c@lhs z2d4d@rhs) (list 'set! z2d4c@lhs z2d4d@rhs)) z2d43@vars z2d44@val-exps) (list z2d45@body-exp))))))) (set! z2cdf@build-library-letrec* (lambda (z2d50@ae z2d51@name z2d52@vars z2d53@locs z2d54@val-exps z2d55@body-exp) (list 'library-letrec* z2d51@name (map list z2d52@vars z2d53@locs z2d54@val-exps) z2d55@body-exp))) (set! z2ce1@build-receive (lambda (z2d5c@ae z2d5d@vars z2d5e@producer z2d5f@body*) (begin (display '"************** in ") (cons 'receive (cons z2d5d@vars (cons z2d5e@producer z2d5f@body*)))))) (begin (set! z2d6d@z2ce1@build-receive z2ce1@build-receive) (set! z2d6c@z2cdf@build-library-letrec* z2cdf@build-library-letrec*) (set! z2d6b@z2cdd@build-letrec* z2cdd@build-letrec*) (set! z2d6a@z2cdb@build-letrec z2cdb@build-letrec) (set! z2d69@z2cd9@build-void z2cd9@build-void) (set! z2d68@z2cd7@build-sequence z2cd7@build-sequence) (set! z2d67@z2ca9@build-let z2ca9@build-let) (set! z2d66@z2ca7@build-case-lambda z2ca7@build-case-lambda) (set! z2d65@z2ca5@build-lambda z2ca5@build-lambda) (set! z2d64@z2c34@build-global-define z2c34@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z2d7c@file-options-macro z2d7e@set-cons z2d80@set-union z2d85@top-mark* z2d87@top-marked? z2d89@gen-lexical z2d8b@gen-global z2d8d@gen-label z2d8f@gen-top-level-label z2d91@gen-define-label+loc z2d93@gen-define-label z2d95@make-rib z2d97@rib? z2d99@rib-sym* z2d9b@set-rib-sym*! z2d9d@rib-mark** z2d9f@set-rib-mark**! z2da1@rib-label* z2da3@set-rib-label*! z2da5@rib-sealed/freq z2da7@set-rib-sealed/freq! z2da9@rib-cache z2dab@set-rib-cache! z2dad@dummy z2daf@make-empty-rib z2db1@extend-rib! z2db3@extend-rib/nc! z2db5@make-rib-map z2db7@seal-rib! z2db9@unseal-rib! z2dbb@make-full-rib z2dbd@rp z2dbf@make-stx z2dc1@stx? z2dc3@stx-expr z2dc5@set-stx-expr! z2dc7@stx-mark* z2dc9@set-stx-mark*! z2dcb@stx-subst* z2dcd@set-stx-subst*! z2dcf@stx-ae* z2dd1@set-stx-ae*! z2dd3@dummy z2dd5@datum->stx z2dd7@gen-mark z2dd9@anti-mark z2ddb@anti-mark? z2ddd@join-wraps z2ddf@mkstx z2de1@add-mark z2de3@add-subst z2de5@syntax-kind? z2de7@syntax-vector->list z2de9@syntax-pair? z2deb@syntax-vector? z2ded@syntax-null? z2def@syntax-list? z2df1@syntax-car z2df3@syntax-cdr z2df5@syntax->list z2df7@id? z2df9@id->sym z2dfb@bound-id=? z2dfd@free-id=? z2dff@valid-bound-ids? z2e01@distinct-bound-ids? z2e03@bound-id-member? z2e05@self-evaluating? z2e07@strip-annotations z2e09@strip z2e0b@stx->datum z2e0d@id->label z2e0f@label->binding z2e11@make-binding z2e13@binding-type z2e15@binding-value z2e17@raise-unbound-error z2e19@syntax-type z2e27@sanitize-binding z2e29@make-variable-transformer z2e2b@variable-transformer? z2e2d@variable-transformer-procedure z2e2f@make-eval-transformer z2f80@parse-define z2f82@parse-define-syntax z2f84@scheme-stx-hashtable z2f86@scheme-stx z2f88@lexical-var z2f8a@lexical-mutable? z2f8c@set-lexical-mutable! z2f8e@add-lexical z2f90@add-lexicals z2f92@letrec-helper z2f94@letrec-transformer z2f96@letrec*-transformer z2f98@fluid-let-syntax-transformer z2f9a@type-descriptor-transformer z2f9c@record-type-descriptor-transformer z2f9e@record-constructor-descriptor-transformer z2fa0@when-macro z2fa2@unless-macro z2fa4@if-transformer z2fa6@and-transformer z2fa8@or-transformer z2faa@case-macro z2fac@quote-transformer z2fae@case-lambda-transformer z2fb0@lambda-transformer z2fb2@bless z2fb4@with-syntax-macro z2fb6@invalid-fmls-error z2fb8@let-macro z2fba@let-values-macro z2fbc@let*-values-macro z2fbe@trace-lambda-macro z2fc0@trace-define-macro z2fc2@trace-define-syntax-macro z2fc4@trace-let/rec-syntax z2fc6@trace-let-syntax-macro z2fc8@trace-letrec-syntax-macro z2fca@guard-macro z2fcc@define-enumeration-macro z2fce@time-macro z2fd0@delay-macro z2fd2@assert-macro z2fd4@endianness-macro z2fd6@identifier-syntax-macro z2fd8@do-macro z2fda@let*-macro z2fdc@or-macro z2fde@and-macro z2fe0@cond-macro z2fe2@do-include z2fe4@include-macro z2fe6@include-into-macro z2fe8@syntax-rules-macro z2fea@quasiquote-macro z2fec@quasisyntax-macro z2fee@define-struct-macro z2ff0@define-record-type-macro z2ff2@define-condition-type-macro z2ff4@incorrect-usage-macro z2ff6@parameterize-macro z2ff8@foreign-call-transformer z2ffa@convert-pattern z2ffc@syntax-dispatch z2ffe@ellipsis? z3000@underscore? z3002@verify-literals z3004@syntax-case-transformer z3006@ellipsis-map z3008@syntax-transformer z300a@core-macro-transformer z300c@symbol-macro z300e@macro-transformer z3010@local-macro-transformer z3012@do-macro-call z3014@chi-macro z3016@chi-local-macro z3018@chi-global-macro z301a@chi-expr* z301c@chi-application z301e@chi-expr z3020@chi-set! z3022@verify-formals z3024@chi-lambda-clause z3026@chi-lambda-clause* z3028@chi-defun z302a@chi-rhs z302c@expand-interaction-rhs*/init* z302e@chi-rhs* z3030@find-bound=? z3032@find-dups z3034@chi-internal z3036@parse-module z3038@make-module-interface z303a@module-interface? z303c@module-interface-first-mark z303e@set-module-interface-first-mark! z3040@module-interface-exp-id-vec z3042@set-module-interface-exp-id-vec! z3044@module-interface-exp-lab-vec z3046@set-module-interface-exp-lab-vec! z3048@dummy z304a@module-interface-exp-id* z304c@chi-internal-module z304e@chi-body* z3050@expand-transformer z3052@parse-exports z3054@parse-library-name z3056@parse-library z3058@parse-import-spec* z305a@make-top-rib z305c@make-collector z305e@inv-collector z3060@vis-collector z3062@imp-collector z3064@chi-library-internal z3066@chi-interaction-expr z3068@library-body-expander z306a@core-library-expander z306c@parse-top-level-program z306e@top-level-expander z3070@rp z3072@make-env z3074@env? z3076@env-names z3078@set-env-names! z307a@env-labels z307c@set-env-labels! z307e@env-itc z3080@set-env-itc! z3082@dummy z3084@rp z3086@make-interaction-env z3088@interaction-env? z308a@interaction-env-rib z308c@set-interaction-env-rib! z308e@interaction-env-r z3090@set-interaction-env-r! z3092@interaction-env-locs z3094@set-interaction-env-locs! z3096@dummy z3098@interaction-environment-symbols z309a@environment-bindings z309c@parse-binding z309e@environment? z30a0@environment-symbols z30a2@environment z30a4@null-environment z30a6@scheme-report-environment z30a8@expand z30aa@eval z30ac@library-expander z30ae@boot-library-expand z30b0@rev-map-append z30b2@build-exports z30b4@make-export-subst z30b6@make-export-env/macros z30b8@generate-temporaries z30ba@free-identifier=? z30bc@bound-identifier=? z30be@make-source-condition z30c0@extract-position-condition z30c2@expression-position z30c4@assertion-error z30c6@syntax-error z30c8@syntax-violation* z30ca@syntax-violation z30cc@identifier? z30ce@datum->syntax z30d0@syntax->datum z30d2@compile-r6rs-top-level z30d4@pre-compile-r6rs-top-level z30d6@interaction-environment z30d8@top-level-context) (begin (set! z2d7c@file-options-macro (lambda (z30d9@x) ((lambda (z30dc@valid-option?) (begin (set! z30dc@valid-option? (lambda (z30e5@x) (and (z2df7@id? z30e5@x) (memq (z2df9@id->sym z30e5@x) '(no-fail no-create no-truncate))))) ((lambda (z30dd@t) ((lambda (z30df@ls/false) (if (and z30df@ls/false (apply (lambda (z30e1@opt*) (for-all z30dc@valid-option? z30e1@opt*)) z30df@ls/false)) (apply (lambda (z30e3@opt*) (z2fb2@bless (list 'make-file-options (list 'quote z30e3@opt*)))) z30df@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z30dd@t))) (z2ffc@syntax-dispatch z30dd@t '(_ . each-any)))) z30d9@x))) '#f))) (set! z2d7e@set-cons (lambda (z30e7@x z30e8@ls) (if (memq z30e7@x z30e8@ls) z30e8@ls (cons z30e7@x z30e8@ls)))) (set! z2d80@set-union (lambda (z30eb@ls1 z30ec@ls2) (if (null? z30eb@ls1) z30ec@ls2 (if (memq (car z30eb@ls1) z30ec@ls2) (z2d80@set-union (cdr z30eb@ls1) z30ec@ls2) (cons (car z30eb@ls1) (z2d80@set-union (cdr z30eb@ls1) z30ec@ls2)))))) (set! z2d85@top-mark* '(top)) (set! z2d87@top-marked? (lambda (z30ef@m*) (memq 'top z30ef@m*))) (set! z2d89@gen-lexical (lambda (z30f1@sym) (if (symbol? z30f1@sym) (gensym z30f1@sym) (if (z2dc1@stx? z30f1@sym) (z2d89@gen-lexical (z2df9@id->sym z30f1@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" z30f1@sym))))) (set! z2d8b@gen-global (lambda (z30f3@x) (z2d89@gen-lexical z30f3@x))) (set! z2d8d@gen-label (lambda (z30f5@_) (gensym))) (set! z2d8f@gen-top-level-label (lambda (z30f7@id z30f8@rib) ((lambda (z30fc@find) (begin (set! z30fc@find (lambda (z3107@sym z3108@mark* z3109@sym* z310a@mark** z310b@label*) (and (pair? z3109@sym*) (if (and (eq? z3107@sym (car z3109@sym*)) (same-marks? z3108@mark* (car z310a@mark**))) (car z310b@label*) (z30fc@find z3107@sym z3108@mark* (cdr z3109@sym*) (cdr z310a@mark**) (cdr z310b@label*)))))) ((lambda (z30fd@sym z30fe@mark*) ((lambda (z3101@sym*) ((lambda (z3103@t) (if z3103@t ((lambda (z3105@label) (if (z2c2c@z2a76@imported-label->binding z3105@label) (gensym) z3105@label)) z3103@t) (gensym))) (and (memq z30fd@sym (z2d99@rib-sym* z30f8@rib)) (z30fc@find z30fd@sym z30fe@mark* z3101@sym* (z2d9d@rib-mark** z30f8@rib) (z2da1@rib-label* z30f8@rib))))) (z2d99@rib-sym* z30f8@rib))) (z2df9@id->sym z30f7@id) (z2dc7@stx-mark* z30f7@id)))) '#f))) (set! z2d91@gen-define-label+loc (lambda (z3111@id z3112@rib) ((lambda (z3115@t) (if z3115@t ((lambda (z3117@env) ((lambda (z3119@label z311a@locs) (values z3119@label ((lambda (z311d@t) (if z311d@t (cdr z311d@t) ((lambda (z311f@loc) (begin (z3094@set-interaction-env-locs! z3117@env (cons (cons z3119@label z311f@loc) z311a@locs)) z311f@loc)) (z2d89@gen-lexical z3111@id)))) (assq z3119@label z311a@locs)))) (z2d8f@gen-top-level-label z3111@id z3112@rib) (z3092@interaction-env-locs z3117@env))) z3115@t) (values (gensym) (z2d89@gen-lexical z3111@id)))) (z30d8@top-level-context)))) (set! z2d93@gen-define-label (lambda (z3121@id z3122@rib) (if (z30d8@top-level-context) (z2d8f@gen-top-level-label z3121@id z3122@rib) (gensym)))) (set! z2d95@make-rib (lambda z3125@args (make-simple-struct 'rib '6 z3125@args))) (set! z2d97@rib? (lambda (z3127@x) (and (simple-struct? z3127@x) (eq? (simple-struct-name z3127@x) 'rib)))) (set! z2d99@rib-sym* (lambda (z3129@x) (simple-struct-ref z3129@x '0))) (set! z2d9b@set-rib-sym*! (lambda (z312b@x z312c@val) (simple-struct-set! z312b@x '0 z312c@val))) (set! z2d9d@rib-mark** (lambda (z312f@x) (simple-struct-ref z312f@x '1))) (set! z2d9f@set-rib-mark**! (lambda (z3131@x z3132@val) (simple-struct-set! z3131@x '1 z3132@val))) (set! z2da1@rib-label* (lambda (z3135@x) (simple-struct-ref z3135@x '2))) (set! z2da3@set-rib-label*! (lambda (z3137@x z3138@val) (simple-struct-set! z3137@x '2 z3138@val))) (set! z2da5@rib-sealed/freq (lambda (z313b@x) (simple-struct-ref z313b@x '3))) (set! z2da7@set-rib-sealed/freq! (lambda (z313d@x z313e@val) (simple-struct-set! z313d@x '3 z313e@val))) (set! z2da9@rib-cache (lambda (z3141@x) (simple-struct-ref z3141@x '4))) (set! z2dab@set-rib-cache! (lambda (z3143@x z3144@val) (simple-struct-set! z3143@x '4 z3144@val))) (set! z2dad@dummy '3) (set! z2daf@make-empty-rib (lambda () (z2d95@make-rib '() '() '() '#f '#f))) (set! z2db1@extend-rib! (lambda (z3147@rib z3148@id z3149@label) ((lambda (z314e@find) (begin (set! z314e@find (lambda (z315b@sym z315c@mark* z315d@sym* z315e@mark** z315f@label*) (and (pair? z315d@sym*) (if (and (eq? z315b@sym (car z315d@sym*)) (same-marks? z315c@mark* (car z315e@mark**))) z315f@label* (z314e@find z315b@sym z315c@mark* (cdr z315d@sym*) (cdr z315e@mark**) (cdr z315f@label*)))))) (begin (if (z2da5@rib-sealed/freq z3147@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" z3147@rib) (void)) ((lambda (z314f@sym z3150@mark*) ((lambda (z3153@sym*) ((lambda (z3155@t) (if z3155@t ((lambda (z3157@p) (if (not (eq? z3149@label (car z3157@p))) (if (z30d8@top-level-context) (set-car! z3157@p z3149@label) (z30ca@syntax-violation '#f '"multiple definitions of identifier" z3148@id)) (void))) z3155@t) (begin (if (z2da9@rib-cache z3147@rib) (hashtable-update! (z2da9@rib-cache z3147@rib) z314f@sym (lambda (z3159@e) (cons (cons z3150@mark* z3149@label) z3159@e)) '()) (void)) (z2d9b@set-rib-sym*! z3147@rib (cons z314f@sym z3153@sym*)) (z2d9f@set-rib-mark**! z3147@rib (cons z3150@mark* (z2d9d@rib-mark** z3147@rib))) (z2da3@set-rib-label*! z3147@rib (cons z3149@label (z2da1@rib-label* z3147@rib)))))) (and (memq z314f@sym (z2d99@rib-sym* z3147@rib)) (z314e@find z314f@sym z3150@mark* z3153@sym* (z2d9d@rib-mark** z3147@rib) (z2da1@rib-label* z3147@rib))))) (z2d99@rib-sym* z3147@rib))) (z2df9@id->sym z3148@id) (z2dc7@stx-mark* z3148@id))))) '#f))) (set! z2db3@extend-rib/nc! (lambda (z3165@rib z3166@id z3167@label) ((lambda (z316b@sym z316c@mark*) ((lambda (z316f@sym*) (begin (if (z2da9@rib-cache z3165@rib) (hashtable-update! (z2da9@rib-cache z3165@rib) z316b@sym (lambda (z3171@e) (cons (cons z316c@mark* z3167@label) z3171@e)) '()) (void)) (z2d9b@set-rib-sym*! z3165@rib (cons z316b@sym z316f@sym*)) (z2d9f@set-rib-mark**! z3165@rib (cons z316c@mark* (z2d9d@rib-mark** z3165@rib))) (z2da3@set-rib-label*! z3165@rib (cons z3167@label (z2da1@rib-label* z3165@rib))))) (z2d99@rib-sym* z3165@rib))) (z2df9@id->sym z3166@id) (z2dc7@stx-mark* z3166@id)))) (set! z2db5@make-rib-map (lambda (z3173@sym*) ((lambda (z3175@ht) ((letrec ((z3177@f (lambda (z3179@i z317a@sym*) (if (null? z317a@sym*) z3175@ht (begin (hashtable-update! z3175@ht (car z317a@sym*) (lambda (z317d@x) (cons z3179@i z317d@x)) '()) (z3177@f (+ z3179@i '1) (cdr z317a@sym*))))))) z3177@f) '0 z3173@sym*)) (make-eq-hashtable)))) (set! z2db7@seal-rib! (lambda (z317f@rib) ((lambda (z3181@sym*) (if (not (null? z3181@sym*)) (begin (z2d9b@set-rib-sym*! z317f@rib (list->vector z3181@sym*)) (z2d9f@set-rib-mark**! z317f@rib (list->vector (z2d9d@rib-mark** z317f@rib))) (z2da3@set-rib-label*! z317f@rib (list->vector (z2da1@rib-label* z317f@rib))) (z2da7@set-rib-sealed/freq! z317f@rib (z2db5@make-rib-map z3181@sym*))) (void))) (z2d99@rib-sym* z317f@rib)))) (set! z2db9@unseal-rib! (lambda (z3183@rib) (if (z2da5@rib-sealed/freq z3183@rib) (begin (z2da7@set-rib-sealed/freq! z3183@rib '#f) (z2d9b@set-rib-sym*! z3183@rib (vector->list (z2d99@rib-sym* z3183@rib))) (z2d9f@set-rib-mark**! z3183@rib (vector->list (z2d9d@rib-mark** z3183@rib))) (z2da3@set-rib-label*! z3183@rib (vector->list (z2da1@rib-label* z3183@rib)))) (void)))) (set! z2dbb@make-full-rib (lambda (z3185@id* z3186@label*) ((lambda (z3189@r) (begin (z2db7@seal-rib! z3189@r) z3189@r)) (z2d95@make-rib (map z2df9@id->sym z3185@id*) (map z2dc7@stx-mark* z3185@id*) z3186@label* '#f '#f)))) (set! z2dbd@rp (z2962@z285b@make-record-printer 'stx (lambda (z318b@x z318c@p z318d@wr) (begin (display '"#<syntax " z318c@p) (write (z2e0b@stx->datum z318b@x) z318c@p) ((lambda (z3191@expr) (if (z295a@z284b@annotation? z3191@expr) ((lambda (z3193@src) (if (pair? z3193@src) (begin (display '" [" z318c@p) (display (cdr z3193@src) z318c@p) (display '" of " z318c@p) (display (car z3193@src) z318c@p) (display '"]" z318c@p)) (void))) (z295b@z284d@annotation-source z3191@expr)) (void))) (z2dc3@stx-expr z318b@x)) (display '">" z318c@p))))) (set! z2dbf@make-stx (lambda z3195@args (make-simple-struct 'stx '5 z3195@args))) (set! z2dc1@stx? (lambda (z3197@x) (and (simple-struct? z3197@x) (eq? (simple-struct-name z3197@x) 'stx)))) (set! z2dc3@stx-expr (lambda (z3199@x) (simple-struct-ref z3199@x '0))) (set! z2dc5@set-stx-expr! (lambda (z319b@x z319c@val) (simple-struct-set! z319b@x '0 z319c@val))) (set! z2dc7@stx-mark* (lambda (z319f@x) (simple-struct-ref z319f@x '1))) (set! z2dc9@set-stx-mark*! (lambda (z31a1@x z31a2@val) (simple-struct-set! z31a1@x '1 z31a2@val))) (set! z2dcb@stx-subst* (lambda (z31a5@x) (simple-struct-ref z31a5@x '2))) (set! z2dcd@set-stx-subst*! (lambda (z31a7@x z31a8@val) (simple-struct-set! z31a7@x '2 z31a8@val))) (set! z2dcf@stx-ae* (lambda (z31ab@x) (simple-struct-ref z31ab@x '3))) (set! z2dd1@set-stx-ae*! (lambda (z31ad@x z31ae@val) (simple-struct-set! z31ad@x '3 z31ae@val))) (set! z2dd3@dummy '3) (set! z2dd5@datum->stx (lambda (z31b1@id z31b2@datum) (z2dbf@make-stx z31b2@datum (z2dc7@stx-mark* z31b1@id) (z2dcb@stx-subst* z31b1@id) (z2dcf@stx-ae* z31b1@id)))) (set! z2dd7@gen-mark (lambda () (string '#\m))) (set! z2dd9@anti-mark '#f) (set! z2ddb@anti-mark? not) (set! z2ddd@join-wraps (lambda (z31b5@m1* z31b6@s1* z31b7@ae1* z31b8@e) ((lambda (z31be@cancel) (begin (set! z31be@cancel (lambda (z31c5@ls1 z31c6@ls2) ((letrec ((z31c9@f (lambda (z31cb@x z31cc@ls1) (if (null? z31cc@ls1) (cdr z31c6@ls2) (cons z31cb@x (z31c9@f (car z31cc@ls1) (cdr z31cc@ls1))))))) z31c9@f) (car z31c5@ls1) (cdr z31c5@ls1)))) ((lambda (z31bf@m2* z31c0@s2* z31c1@ae2*) (if (and (not (null? z31b5@m1*)) (not (null? z31bf@m2*)) (z2ddb@anti-mark? (car z31bf@m2*))) (values (z31be@cancel z31b5@m1* z31bf@m2*) (z31be@cancel z31b6@s1* z31c0@s2*) (z31be@cancel z31b7@ae1* z31c1@ae2*)) (values (append z31b5@m1* z31bf@m2*) (append z31b6@s1* z31c0@s2*) (append z31b7@ae1* z31c1@ae2*)))) (z2dc7@stx-mark* z31b8@e) (z2dcb@stx-subst* z31b8@e) (z2dcf@stx-ae* z31b8@e)))) '#f))) (set! z2ddf@mkstx (lambda (z31cf@e z31d0@m* z31d1@s* z31d2@ae*) (if (and (z2dc1@stx? z31cf@e) (not (z2d87@top-marked? z31d0@m*))) (call-with-values (lambda () (z2ddd@join-wraps z31d0@m* z31d1@s* z31d2@ae* z31cf@e)) (lambda (z31dd@z31d8 z31de@z31da z31df@z31dc) ((lambda (z31e3@ae* z31e4@s* z31e5@m*) (z2dbf@make-stx (z2dc3@stx-expr z31cf@e) z31e5@m* z31e4@s* z31e3@ae*)) z31df@z31dc z31de@z31da z31dd@z31d8))) (z2dbf@make-stx z31cf@e z31d0@m* z31d1@s* z31d2@ae*)))) (set! z2de1@add-mark (lambda (z31e9@m z31ea@e z31eb@ae) (z2ddf@mkstx z31ea@e (list z31e9@m) '(shift) (list z31eb@ae)))) (set! z2de3@add-subst (lambda (z31ef@subst z31f0@e) (z2ddf@mkstx z31f0@e '() (list z31ef@subst) '()))) (set! z2de5@syntax-kind? (lambda (z31f3@x z31f4@p?) (if (z2dc1@stx? z31f3@x) (z2de5@syntax-kind? (z2dc3@stx-expr z31f3@x) z31f4@p?) (if (z295a@z284b@annotation? z31f3@x) (z2de5@syntax-kind? (z295c@z284f@annotation-expression z31f3@x) z31f4@p?) (z31f4@p? z31f3@x))))) (set! z2de7@syntax-vector->list (lambda (z31f7@x) (if (z2dc1@stx? z31f7@x) ((lambda (z31f9@ls z31fa@m* z31fb@s* z31fc@ae*) (map (lambda (z3201@x) (z2ddf@mkstx z3201@x z31fa@m* z31fb@s* z31fc@ae*)) z31f9@ls)) (z2de7@syntax-vector->list (z2dc3@stx-expr z31f7@x)) (z2dc7@stx-mark* z31f7@x) (z2dcb@stx-subst* z31f7@x) (z2dcf@stx-ae* z31f7@x)) (if (z295a@z284b@annotation? z31f7@x) (z2de7@syntax-vector->list (z295c@z284f@annotation-expression z31f7@x)) (if (vector? z31f7@x) (vector->list z31f7@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" z31f7@x)))))) (set! z2de9@syntax-pair? (lambda (z3203@x) (z2de5@syntax-kind? z3203@x pair?))) (set! z2deb@syntax-vector? (lambda (z3205@x) (z2de5@syntax-kind? z3205@x vector?))) (set! z2ded@syntax-null? (lambda (z3207@x) (z2de5@syntax-kind? z3207@x null?))) (set! z2def@syntax-list? (lambda (z3209@x) (or (z2ded@syntax-null? z3209@x) (and (z2de9@syntax-pair? z3209@x) (z2def@syntax-list? (z2df3@syntax-cdr z3209@x)))))) (set! z2df1@syntax-car (lambda (z320b@x) (if (z2dc1@stx? z320b@x) (z2ddf@mkstx (z2df1@syntax-car (z2dc3@stx-expr z320b@x)) (z2dc7@stx-mark* z320b@x) (z2dcb@stx-subst* z320b@x) (z2dcf@stx-ae* z320b@x)) (if (z295a@z284b@annotation? z320b@x) (z2df1@syntax-car (z295c@z284f@annotation-expression z320b@x)) (if (pair? z320b@x) (car z320b@x) (assertion-violation 'syntax-car '"BUG: not a pair" z320b@x)))))) (set! z2df3@syntax-cdr (lambda (z320d@x) (if (z2dc1@stx? z320d@x) (z2ddf@mkstx (z2df3@syntax-cdr (z2dc3@stx-expr z320d@x)) (z2dc7@stx-mark* z320d@x) (z2dcb@stx-subst* z320d@x) (z2dcf@stx-ae* z320d@x)) (if (z295a@z284b@annotation? z320d@x) (z2df3@syntax-cdr (z295c@z284f@annotation-expression z320d@x)) (if (pair? z320d@x) (cdr z320d@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" z320d@x)))))) (set! z2df5@syntax->list (lambda (z320f@x) (if (z2de9@syntax-pair? z320f@x) (cons (z2df1@syntax-car z320f@x) (z2df5@syntax->list (z2df3@syntax-cdr z320f@x))) (if (z2ded@syntax-null? z320f@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" z320f@x))))) (set! z2df7@id? (lambda (z3211@x) (and (z2dc1@stx? z3211@x) (symbol? (z2dc3@stx-expr z3211@x))))) (set! z2df9@id->sym (lambda (z3213@x) (z2dc3@stx-expr z3213@x))) (set! z2dfb@bound-id=? (lambda (z3215@x z3216@y) (and (eq? (z2df9@id->sym z3215@x) (z2df9@id->sym z3216@y)) (same-marks? (z2dc7@stx-mark* z3215@x) (z2dc7@stx-mark* z3216@y))))) (set! z2dfd@free-id=? (lambda (z3219@i z321a@j) ((lambda (z321d@t0 z321e@t1) (if (or z321d@t0 z321e@t1) (eq? z321d@t0 z321e@t1) (eq? (z2df9@id->sym z3219@i) (z2df9@id->sym z321a@j)))) (id->real-label z3219@i) (id->real-label z321a@j)))) (set! z2dff@valid-bound-ids? (lambda (z3221@id*) (and (for-all z2df7@id? z3221@id*) (z2e01@distinct-bound-ids? z3221@id*)))) (set! z2e01@distinct-bound-ids? (lambda (z3223@id*) (or (null? z3223@id*) (and (not (z2e03@bound-id-member? (car z3223@id*) (cdr z3223@id*))) (z2e01@distinct-bound-ids? (cdr z3223@id*)))))) (set! z2e03@bound-id-member? (lambda (z3225@id z3226@id*) (and (pair? z3226@id*) (or (z2dfb@bound-id=? z3225@id (car z3226@id*)) (z2e03@bound-id-member? z3225@id (cdr z3226@id*)))))) (set! z2e05@self-evaluating? (lambda (z3229@x) (or (number? z3229@x) (string? z3229@x) (char? z3229@x) (boolean? z3229@x) (regexp? z3229@x) (bytevector? z3229@x)))) (set! z2e07@strip-annotations (lambda (z322b@x) (if (pair? z322b@x) (cons (z2e07@strip-annotations (car z322b@x)) (z2e07@strip-annotations (cdr z322b@x))) (if (vector? z322b@x) (vector-map z2e07@strip-annotations z322b@x) (if (z295a@z284b@annotation? z322b@x) (z2959@z2849@annotation-stripped z322b@x) z322b@x))))) (set! z2e09@strip (lambda (z322d@x z322e@m*) (if (z2d87@top-marked? z322e@m*) (if (or (z295a@z284b@annotation? z322d@x) (and (pair? z322d@x) (z295a@z284b@annotation? (car z322d@x))) (and (vector? z322d@x) (> (vector-length z322d@x) '0) (z295a@z284b@annotation? (vector-ref z322d@x '0)))) (z2e07@strip-annotations z322d@x) z322d@x) ((letrec ((z3231@f (lambda (z3233@x) (if (z2dc1@stx? z3233@x) (z2e09@strip (z2dc3@stx-expr z3233@x) (z2dc7@stx-mark* z3233@x)) (if (z295a@z284b@annotation? z3233@x) (z2959@z2849@annotation-stripped z3233@x) (if (pair? z3233@x) ((lambda (z3235@a z3236@d) (if (and (eq? z3235@a (car z3233@x)) (eq? z3236@d (cdr z3233@x))) z3233@x (cons z3235@a z3236@d))) (z3231@f (car z3233@x)) (z3231@f (cdr z3233@x))) (if (vector? z3233@x) ((lambda (z3239@old) ((lambda (z323b@new) (if (for-all eq? z3239@old z323b@new) z3233@x (list->vector z323b@new))) (map z3231@f z3239@old))) (vector->list z3233@x)) z3233@x))))))) z3231@f) z322d@x)))) (set! z2e0b@stx->datum (lambda (z323d@x) (z2e09@strip z323d@x '()))) (set! z2e0d@id->label (lambda (z323f@id) (or (id->real-label z323f@id) ((lambda (z3241@t) (if z3241@t ((lambda (z3243@env) ((lambda (z3245@rib) (call-with-values (lambda () (z2d91@gen-define-label+loc z323f@id z3245@rib)) (lambda (z324b@z3248 z324c@z324a) ((lambda (z324f@loc_ z3250@lab) (begin (z2db1@extend-rib! z3245@rib z323f@id z3250@lab) z3250@lab)) z324c@z324a z324b@z3248)))) (z308a@interaction-env-rib z3243@env))) z3241@t) '#f)) (z30d8@top-level-context))))) (set! z2e0f@label->binding (lambda (z3253@x z3254@r) ((lambda (z3257@t) (if z3257@t ((lambda (z3259@b) (if (and (pair? z3259@b) (eq? (car z3259@b) '$core-rtd)) (cons '$rtd (map z2fb2@bless (cdr z3259@b))) (if (and (pair? z3259@b) (eq? (car z3259@b) 'global-rtd)) ((lambda (z325b@lib z325c@loc) (cons '$rtd (symbol-value z325c@loc))) (cadr z3259@b) (cddr z3259@b)) z3259@b))) z3257@t) ((lambda (z325f@t) (if z325f@t (cdr z325f@t) ((lambda (z3261@t) (if z3261@t ((lambda (z3263@env) ((lambda (z3265@t) (if z3265@t ((lambda (z3267@p) (cons* 'lexical (cdr z3267@p) '#f)) z3265@t) '(displaced-lexical . #f))) (assq z3253@x (z3092@interaction-env-locs z3263@env)))) z3261@t) '(displaced-lexical . #f))) (z30d8@top-level-context)))) (assq z3253@x z3254@r)))) (z2c2c@z2a76@imported-label->binding z3253@x)))) (set! z2e11@make-binding cons) (set! z2e13@binding-type car) (set! z2e15@binding-value cdr) (set! z2e17@raise-unbound-error (lambda (z3269@id) (z30c8@syntax-violation* '#f '"unbound identifier" z3269@id (z4e4e@z4c94@make-undefined-violation)))) (set! z2e19@syntax-type (lambda (z326b@e z326c@r) (if (z2df7@id? z326b@e) ((lambda (z326f@id) ((lambda (z3271@label) ((lambda (z3273@b) ((lambda (z3275@type) ((lambda () (begin (if (not z3271@label) (z2e17@raise-unbound-error z326f@id) (void)) ((lambda (z3277@t) (if (memv z3277@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values z3275@type (z2e15@binding-value z3273@b) z326f@id) (values 'other '#f '#f))) z3275@type))))) (z2e13@binding-type z3273@b))) (z2e0f@label->binding z3271@label z326c@r))) (z2e0d@id->label z326f@id))) z326b@e) (if (z2de9@syntax-pair? z326b@e) ((lambda (z3279@id) (if (z2df7@id? z3279@id) ((lambda (z327b@label) ((lambda (z327d@b) ((lambda (z327f@type) ((lambda () (begin (if (not z327b@label) (z2e17@raise-unbound-error z3279@id) (void)) ((lambda (z3281@t) (if (memv z3281@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values z327f@type (z2e15@binding-value z327d@b) z3279@id) (values 'call '#f '#f))) z327f@type))))) (z2e13@binding-type z327d@b))) (z2e0f@label->binding z327b@label z326c@r))) (z2e0d@id->label z3279@id)) (values 'call '#f '#f))) (z2df1@syntax-car z326b@e)) ((lambda (z3283@d) (if (z2e05@self-evaluating? z3283@d) (values 'constant z3283@d '#f) (values 'other '#f '#f))) (z2e0b@stx->datum z326b@e)))))) (set! z2e27@sanitize-binding (lambda (z3285@x z3286@src) (if (procedure? z3285@x) (cons* 'local-macro z3285@x z3286@src) (if (and (pair? z3285@x) (eq? (car z3285@x) 'macro!) (procedure? (cdr z3285@x))) (cons* 'local-macro! (cdr z3285@x) z3286@src) (if (and (pair? z3285@x) (eq? (car z3285@x) '$rtd)) z3285@x (assertion-violation 'expand '"invalid transformer" z3285@x)))))) (set! z2e29@make-variable-transformer (lambda (z3289@x) (if (procedure? z3289@x) (cons 'macro! z3289@x) (assertion-violation 'make-variable-transformer '"not a procedure" z3289@x)))) (set! z2e2b@variable-transformer? (lambda (z328b@x) (and (pair? z328b@x) (eq? (car z328b@x) 'macro!) (procedure? (cdr z328b@x))))) (set! z2e2d@variable-transformer-procedure (lambda (z328d@x) (if (z2e2b@variable-transformer? z328d@x) (cdr z328d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" z328d@x)))) (set! z2e2f@make-eval-transformer (lambda (z328f@x) (z2e27@sanitize-binding (eval-core (z29ba@z2972@expanded->core z328f@x)) z328f@x))) (set! z2f80@parse-define (lambda (z3291@x) ((lambda (z3293@t) ((lambda (z3295@ls/false) (if (and z3295@ls/false (apply (lambda (z3297@id z3298@fmls z3299@b z329a@b*) (z2df7@id? z3297@id)) z3295@ls/false)) (apply (lambda (z329f@id z32a0@fmls z32a1@b z32a2@b*) (begin (z3022@verify-formals z32a0@fmls z3291@x) (values z329f@id (cons 'defun (cons z32a0@fmls (cons z32a1@b z32a2@b*)))))) z3295@ls/false) ((lambda (z32a7@t) ((lambda (z32a9@ls/false) (if (and z32a9@ls/false (apply (lambda (z32ab@id z32ac@val) (z2df7@id? z32ab@id)) z32a9@ls/false)) (apply (lambda (z32af@id z32b0@val) (values z32af@id (cons 'expr z32b0@val))) z32a9@ls/false) ((lambda (z32b3@t) ((lambda (z32b5@ls/false) (if (and z32b5@ls/false (apply (lambda (z32b7@id) (z2df7@id? z32b7@id)) z32b5@ls/false)) (apply (lambda (z32b9@id) (values z32b9@id (cons 'expr (z2fb2@bless '(void))))) z32b5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z32b3@t))) (z2ffc@syntax-dispatch z32b3@t '(_ any)))) z32a7@t))) (z2ffc@syntax-dispatch z32a7@t '(_ any any)))) z3293@t))) (z2ffc@syntax-dispatch z3293@t '(_ (any . any) any . each-any)))) z3291@x))) (set! z2f82@parse-define-syntax (lambda (z32bb@x) ((lambda (z32bd@t) ((lambda (z32bf@ls/false) (if (and z32bf@ls/false (apply (lambda (z32c1@id z32c2@val) (z2df7@id? z32c1@id)) z32bf@ls/false)) (apply (lambda (z32c5@id z32c6@val) (values z32c5@id z32c6@val)) z32bf@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z32bd@t))) (z2ffc@syntax-dispatch z32bd@t '(_ any any)))) z32bb@x))) (set! z2f84@scheme-stx-hashtable (make-eq-hashtable)) (set! z2f86@scheme-stx (lambda (z32c9@sym) (or (hashtable-ref z2f84@scheme-stx-hashtable z32c9@sym '#f) ((lambda (z32cb@subst) ((lambda (z32cd@stx) ((lambda (z32cf@stx) ((lambda () (begin (hashtable-set! z2f84@scheme-stx-hashtable z32c9@sym z32cf@stx) z32cf@stx)))) ((lambda (z32d1@t) (if z32d1@t ((lambda (z32d3@x) ((lambda (z32d5@name z32d6@label) (z2de3@add-subst (z2d95@make-rib (list z32d5@name) (list z2d85@top-mark*) (list z32d6@label) '#f '#f) z32cd@stx)) (car z32d3@x) (cdr z32d3@x))) z32d1@t) z32cd@stx)) (assq z32c9@sym z32cb@subst)))) (z2dbf@make-stx z32c9@sym z2d85@top-mark* '() '()))) (z2c08@z2a2e@library-subst (z2c26@z2a6a@find-library-by-name '(psyntax system $all))))))) (set! z2f88@lexical-var car) (set! z2f8a@lexical-mutable? cdr) (set! z2f8c@set-lexical-mutable! set-cdr!) (set! z2f8e@add-lexical (lambda (z32d9@lab z32da@lex z32db@r) (cons (cons* z32d9@lab 'lexical z32da@lex '#f) z32db@r))) (set! z2f90@add-lexicals (lambda (z32df@lab* z32e0@lex* z32e1@r) (if (null? z32df@lab*) z32e1@r (z2f90@add-lexicals (cdr z32df@lab*) (cdr z32e0@lex*) (z2f8e@add-lexical (car z32df@lab*) (car z32e0@lex*) z32e1@r))))) (set! z2f92@letrec-helper (lambda (z32e5@e z32e6@r z32e7@mr z32e8@build) ((lambda (z32ed@t) ((lambda (z32ef@ls/false) (if z32ef@ls/false (apply (lambda (z32f1@lhs* z32f2@rhs* z32f3@b z32f4@b*) (if (not (z2dff@valid-bound-ids? z32f1@lhs*)) (z2fb6@invalid-fmls-error z32e5@e z32f1@lhs*) ((lambda (z32f9@lex* z32fa@lab*) ((lambda (z32fd@rib z32fe@r) ((lambda (z3301@body z3302@rhs*) (z32e8@build '#f z32f9@lex* z3302@rhs* z3301@body)) (z3034@chi-internal (z2de3@add-subst z32fd@rib (cons z32f3@b z32f4@b*)) z32fe@r z32e7@mr) (z301a@chi-expr* (map (lambda (z3305@x) (z2de3@add-subst z32fd@rib z3305@x)) z32f2@rhs*) z32fe@r z32e7@mr))) (z2dbb@make-full-rib z32f1@lhs* z32fa@lab*) (z2f90@add-lexicals z32fa@lab* z32f9@lex* z32e6@r))) (map z2d89@gen-lexical z32f1@lhs*) (map z2d8d@gen-label z32f1@lhs*)))) z32ef@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z32ed@t))) (z2ffc@syntax-dispatch z32ed@t '(_ #(each (any any)) any . each-any)))) z32e5@e))) (set! z2f94@letrec-transformer (lambda (z3307@e z3308@r z3309@mr) (z2f92@letrec-helper z3307@e z3308@r z3309@mr z2d6a@z2cdb@build-letrec))) (set! z2f96@letrec*-transformer (lambda (z330d@e z330e@r z330f@mr) (z2f92@letrec-helper z330d@e z330e@r z330f@mr z2d6b@z2cdd@build-letrec*))) (set! z2f98@fluid-let-syntax-transformer (lambda (z3313@e z3314@r z3315@mr) ((lambda (z331a@lookup) (begin (set! z331a@lookup (lambda (z332d@x) (or (z2e0d@id->label z332d@x) (z30ca@syntax-violation '#f '"unbound identifier" z3313@e z332d@x)))) ((lambda (z331b@t) ((lambda (z331d@ls/false) (if z331d@ls/false (apply (lambda (z331f@lhs* z3320@rhs* z3321@b z3322@b*) (if (not (z2dff@valid-bound-ids? z331f@lhs*)) (z2fb6@invalid-fmls-error z3313@e z331f@lhs*) ((lambda (z3327@lab* z3328@rhs*) (z3034@chi-internal (cons z3321@b z3322@b*) (append (map cons z3327@lab* z3328@rhs*) z3314@r) (append (map cons z3327@lab* z3328@rhs*) z3315@mr))) (map z331a@lookup z331f@lhs*) (map (lambda (z332b@x) (z2e2f@make-eval-transformer (z3050@expand-transformer z332b@x z3315@mr))) z3320@rhs*)))) z331d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z331b@t))) (z2ffc@syntax-dispatch z331b@t '(_ #(each (any any)) any . each-any)))) z3313@e))) '#f))) (set! z2f9a@type-descriptor-transformer (lambda (z332f@e z3330@r z3331@mr) ((lambda (z3335@t) ((lambda (z3337@ls/false) (if (and z3337@ls/false (apply (lambda (z3339@id) (z2df7@id? z3339@id)) z3337@ls/false)) (apply (lambda (z333b@id) ((lambda (z333d@lab) ((lambda (z333f@b) ((lambda (z3341@type) ((lambda () (begin (if (not z333d@lab) (z2e17@raise-unbound-error z333b@id) (void)) (if (not (and (eq? z3341@type '$rtd) (not (list? (z2e15@binding-value z333f@b))))) (z30ca@syntax-violation '#f '"not a record type" z332f@e) (void)) (list 'quote (z2e15@binding-value z333f@b)))))) (z2e13@binding-type z333f@b))) (z2e0f@label->binding z333d@lab z3330@r))) (z2e0d@id->label z333b@id))) z3337@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3335@t))) (z2ffc@syntax-dispatch z3335@t '(_ any)))) z332f@e))) (set! z2f9c@record-type-descriptor-transformer (lambda (z3343@e z3344@r z3345@mr) ((lambda (z3349@t) ((lambda (z334b@ls/false) (if (and z334b@ls/false (apply (lambda (z334d@id) (z2df7@id? z334d@id)) z334b@ls/false)) (apply (lambda (z334f@id) ((lambda (z3351@lab) ((lambda (z3353@b) ((lambda (z3355@type) ((lambda () (begin (if (not z3351@lab) (z2e17@raise-unbound-error z334f@id) (void)) (if (not (and (eq? z3355@type '$rtd) (list? (z2e15@binding-value z3353@b)))) (z30ca@syntax-violation '#f '"not a record type" z3343@e) (void)) (z301e@chi-expr (car (z2e15@binding-value z3353@b)) z3344@r z3345@mr))))) (z2e13@binding-type z3353@b))) (z2e0f@label->binding z3351@lab z3344@r))) (z2e0d@id->label z334f@id))) z334b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3349@t))) (z2ffc@syntax-dispatch z3349@t '(_ any)))) z3343@e))) (set! z2f9e@record-constructor-descriptor-transformer (lambda (z3357@e z3358@r z3359@mr) ((lambda (z335d@t) ((lambda (z335f@ls/false) (if (and z335f@ls/false (apply (lambda (z3361@id) (z2df7@id? z3361@id)) z335f@ls/false)) (apply (lambda (z3363@id) ((lambda (z3365@lab) ((lambda (z3367@b) ((lambda (z3369@type) ((lambda () (begin (if (not z3365@lab) (z2e17@raise-unbound-error z3363@id) (void)) (if (not (and (eq? z3369@type '$rtd) (list? (z2e15@binding-value z3367@b)))) (z30ca@syntax-violation '#f '"invalid type" z3357@e) (void)) (z301e@chi-expr (cadr (z2e15@binding-value z3367@b)) z3358@r z3359@mr))))) (z2e13@binding-type z3367@b))) (z2e0f@label->binding z3365@lab z3358@r))) (z2e0d@id->label z3363@id))) z335f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z335d@t))) (z2ffc@syntax-dispatch z335d@t '(_ any)))) z3357@e))) (set! z2fa0@when-macro (lambda (z336b@e) ((lambda (z336d@t) ((lambda (z336f@ls/false) (if z336f@ls/false (apply (lambda (z3371@test z3372@e z3373@e*) (z2fb2@bless (list 'if z3371@test (cons 'begin (cons z3372@e z3373@e*))))) z336f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z336d@t))) (z2ffc@syntax-dispatch z336d@t '(_ any any . each-any)))) z336b@e))) (set! z2fa2@unless-macro (lambda (z3377@e) ((lambda (z3379@t) ((lambda (z337b@ls/false) (if z337b@ls/false (apply (lambda (z337d@test z337e@e z337f@e*) (z2fb2@bless (list 'if (list 'not z337d@test) (cons 'begin (cons z337e@e z337f@e*))))) z337b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3379@t))) (z2ffc@syntax-dispatch z3379@t '(_ any any . each-any)))) z3377@e))) (set! z2fa4@if-transformer (lambda (z3383@e z3384@r z3385@mr) ((lambda (z3389@t) ((lambda (z338b@ls/false) (if z338b@ls/false (apply (lambda (z338d@e0 z338e@e1 z338f@e2) (list 'if (z301e@chi-expr z338d@e0 z3384@r z3385@mr) (z301e@chi-expr z338e@e1 z3384@r z3385@mr) (z301e@chi-expr z338f@e2 z3384@r z3385@mr))) z338b@ls/false) ((lambda (z3393@t) ((lambda (z3395@ls/false) (if z3395@ls/false (apply (lambda (z3397@e0 z3398@e1) (list 'if (z301e@chi-expr z3397@e0 z3384@r z3385@mr) (z301e@chi-expr z3398@e1 z3384@r z3385@mr) (z2d69@z2cd9@build-void))) z3395@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3393@t))) (z2ffc@syntax-dispatch z3393@t '(_ any any)))) z3389@t))) (z2ffc@syntax-dispatch z3389@t '(_ any any any)))) z3383@e))) (set! z2fa6@and-transformer (lambda (z339b@e z339c@r z339d@mr) ((lambda (z33a1@t) ((lambda (z33a3@ls/false) (if z33a3@ls/false (apply (lambda (z33a5@e*) (cons 'and (z301a@chi-expr* z33a5@e* z339c@r z339d@mr))) z33a3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33a1@t))) (z2ffc@syntax-dispatch z33a1@t '(_ . each-any)))) z339b@e))) (set! z2fa8@or-transformer (lambda (z33a7@e z33a8@r z33a9@mr) ((lambda (z33ad@t) ((lambda (z33af@ls/false) (if z33af@ls/false (apply (lambda (z33b1@e*) (cons 'or (z301a@chi-expr* z33b1@e* z33a8@r z33a9@mr))) z33af@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33ad@t))) (z2ffc@syntax-dispatch z33ad@t '(_ . each-any)))) z33a7@e))) (set! z2faa@case-macro (lambda (z33b3@e) ((lambda (z33b6@build-last z33b8@build-one) (begin (set! z33b6@build-last (lambda (z33dd@cls) ((lambda (z33df@t) ((lambda (z33e1@ls/false) (if z33e1@ls/false (apply (lambda (z33e3@e z33e4@e*) (cons 'begin (cons z33e3@e z33e4@e*))) z33e1@ls/false) ((lambda (z33e7@t) ((lambda (z33e9@ls/false) (if z33e9@ls/false (apply (lambda () (z33b8@build-one z33dd@cls '(if #f #f))) z33e9@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33e7@t))) (z2ffc@syntax-dispatch z33e7@t '_))) z33df@t))) (z2ffc@syntax-dispatch z33df@t '(#(scheme-id else) any . each-any)))) z33dd@cls))) (set! z33b8@build-one (lambda (z33cf@cls z33d0@k) ((lambda (z33d3@t) ((lambda (z33d5@ls/false) (if z33d5@ls/false (apply (lambda (z33d7@d* z33d8@e z33d9@e*) (list 'if (list 'memv 't (list 'quote z33d7@d*)) (cons 'begin (cons z33d8@e z33d9@e*)) z33d0@k)) z33d5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33d3@t))) (z2ffc@syntax-dispatch z33d3@t '(each-any any . each-any)))) z33cf@cls))) ((lambda (z33b9@t) ((lambda (z33bb@ls/false) (if z33bb@ls/false (apply (lambda (z33bd@expr) (z2fb2@bless (cons 'let (cons (list (list 't z33bd@expr)) '((if #f #f)))))) z33bb@ls/false) ((lambda (z33bf@t) ((lambda (z33c1@ls/false) (if z33c1@ls/false (apply (lambda (z33c3@expr z33c4@cls z33c5@cls*) (z2fb2@bless (list 'let (list (list 't z33c3@expr)) ((letrec ((z33c9@f (lambda (z33cb@cls z33cc@cls*) (if (null? z33cc@cls*) (z33b6@build-last z33cb@cls) (z33b8@build-one z33cb@cls (z33c9@f (car z33cc@cls*) (cdr z33cc@cls*))))))) z33c9@f) z33c4@cls z33c5@cls*)))) z33c1@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33bf@t))) (z2ffc@syntax-dispatch z33bf@t '(_ any any . each-any)))) z33b9@t))) (z2ffc@syntax-dispatch z33b9@t '(_ any)))) z33b3@e))) '#f '#f))) (set! z2fac@quote-transformer (lambda (z33eb@e z33ec@r z33ed@mr) ((lambda (z33f1@t) ((lambda (z33f3@ls/false) (if z33f3@ls/false (apply (lambda (z33f5@datum) (list 'quote (z2e0b@stx->datum z33f5@datum))) z33f3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33f1@t))) (z2ffc@syntax-dispatch z33f1@t '(_ any)))) z33eb@e))) (set! z2fae@case-lambda-transformer (lambda (z33f7@e z33f8@r z33f9@mr) ((lambda (z33fd@t) ((lambda (z33ff@ls/false) (if z33ff@ls/false (apply (lambda (z3401@fmls* z3402@b* z3403@b**) (call-with-values (lambda () (z3026@chi-lambda-clause* z33f7@e z3401@fmls* (map cons z3402@b* z3403@b**) z33f8@r z33f9@mr)) (lambda (z340b@z3408 z340c@z340a) ((lambda (z340f@body* z3410@fmls*) (z2d66@z2ca7@build-case-lambda '#f z3410@fmls* z340f@body*)) z340c@z340a z340b@z3408)))) z33ff@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z33fd@t))) (z2ffc@syntax-dispatch z33fd@t '(_ . #(each (any any . each-any)))))) z33f7@e))) (set! z2fb0@lambda-transformer (lambda (z3413@e z3414@r z3415@mr) ((lambda (z3419@t) ((lambda (z341b@ls/false) (if z341b@ls/false (apply (lambda (z341d@fmls z341e@b z341f@b*) (call-with-values (lambda () (z3024@chi-lambda-clause z3413@e z341d@fmls (cons z341e@b z341f@b*) z3414@r z3415@mr)) (lambda (z3427@z3424 z3428@z3426) ((lambda (z342b@body z342c@fmls) (z2d65@z2ca5@build-lambda '#f z342c@fmls z342b@body)) z3428@z3426 z3427@z3424)))) z341b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3419@t))) (z2ffc@syntax-dispatch z3419@t '(_ any any . each-any)))) z3413@e))) (set! z2fb2@bless (lambda (z342f@x) (z2ddf@mkstx ((letrec ((z3431@f (lambda (z3433@x) (if (z2dc1@stx? z3433@x) z3433@x (if (pair? z3433@x) (cons (z3431@f (car z3433@x)) (z3431@f (cdr z3433@x))) (if (symbol? z3433@x) (z2f86@scheme-stx z3433@x) (if (vector? z3433@x) (vector-map z3431@f z3433@x) z3433@x))))))) z3431@f) z342f@x) '() '() '()))) (set! z2fb4@with-syntax-macro (lambda (z3435@e) ((lambda (z3437@t) ((lambda (z3439@ls/false) (if z3439@ls/false (apply (lambda (z343b@pat* z343c@expr* z343d@b z343e@b*) ((lambda (z3443@idn*) (begin (z3022@verify-formals (map car z3443@idn*) z3435@e) ((lambda (z3445@t*) (z2fb2@bless (list 'let (map list z3445@t* z343c@expr*) ((letrec ((z3447@f (lambda (z3449@pat* z344a@t*) (if (null? z3449@pat*) (cons 'begin (cons '#f (cons z343d@b z343e@b*))) (list 'syntax-case (car z344a@t*) '() (list (car z3449@pat*) (z3447@f (cdr z3449@pat*) (cdr z344a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car z3449@pat*)) (car z344a@t*)))))))) z3447@f) z343b@pat* z3445@t*)))) (z30b8@generate-temporaries z343c@expr*)))) ((letrec ((z344d@f (lambda (z344f@pat*) (if (null? z344f@pat*) '() (call-with-values (lambda () (z2ffa@convert-pattern (car z344f@pat*) '())) (lambda (z3455@z3452 z3456@z3454) ((lambda (z3459@idn* z345a@pat) (append z3459@idn* (z344d@f (cdr z344f@pat*)))) z3456@z3454 z3455@z3452))))))) z344d@f) z343b@pat*))) z3439@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3437@t))) (z2ffc@syntax-dispatch z3437@t '(_ #(each (any any)) any . each-any)))) z3435@e))) (set! z2fb6@invalid-fmls-error (lambda (z345d@stx z345e@fmls) ((lambda (z3461@t) ((lambda (z3463@ls/false) (if z3463@ls/false (apply (lambda (z3465@id* z3466@last) ((letrec ((z3469@f (lambda (z346b@id*) (if (null? z346b@id*) (values) (if (not (z2df7@id? (car z346b@id*))) (z30ca@syntax-violation '#f '"not an identifier" z345d@stx (car z346b@id*)) (begin (z3469@f (cdr z346b@id*)) (if (z2e03@bound-id-member? (car z346b@id*) (cdr z346b@id*)) (z30ca@syntax-violation '#f '"duplicate binding" z345d@stx (car z346b@id*)) (void)))))))) z3469@f) (if (z2df7@id? z3466@last) (cons z3466@last z3465@id*) (if (z2ded@syntax-null? z3466@last) z3465@id* (z30ca@syntax-violation '#f '"not an identifier" z345d@stx z3466@last))))) z3463@ls/false) ((lambda (z346d@t) ((lambda (z346f@ls/false) (if z346f@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"malformed binding form" z345d@stx z345e@fmls)) z346f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z346d@t))) (z2ffc@syntax-dispatch z346d@t '_))) z3461@t))) (z2ffc@syntax-dispatch z3461@t '#(each+ any () any)))) z345e@fmls))) (set! z2fb8@let-macro (lambda (z3471@stx) ((lambda (z3473@t) ((lambda (z3475@ls/false) (if z3475@ls/false (apply (lambda (z3477@lhs* z3478@rhs* z3479@b z347a@b*) (if (z2dff@valid-bound-ids? z3477@lhs*) (z2fb2@bless (cons (cons 'lambda (cons z3477@lhs* (cons z3479@b z347a@b*))) z3478@rhs*)) (z2fb6@invalid-fmls-error z3471@stx z3477@lhs*))) z3475@ls/false) ((lambda (z347f@t) ((lambda (z3481@ls/false) (if (and z3481@ls/false (apply (lambda (z3483@f z3484@lhs* z3485@rhs* z3486@b z3487@b*) (z2df7@id? z3483@f)) z3481@ls/false)) (apply (lambda (z348d@f z348e@lhs* z348f@rhs* z3490@b z3491@b*) (if (z2dff@valid-bound-ids? z348e@lhs*) (z2fb2@bless (cons (list 'letrec (list (list z348d@f (cons 'lambda (cons z348e@lhs* (cons z3490@b z3491@b*))))) z348d@f) z348f@rhs*)) (z2fb6@invalid-fmls-error z3471@stx z348e@lhs*))) z3481@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z347f@t))) (z2ffc@syntax-dispatch z347f@t '(_ any #(each (any any)) any . each-any)))) z3473@t))) (z2ffc@syntax-dispatch z3473@t '(_ #(each (any any)) any . each-any)))) z3471@stx))) (set! z2fba@let-values-macro (lambda (z3497@stx) ((lambda (z349a@rename z349c@rename*) (begin (set! z349a@rename (lambda (z34ff@x z3500@old* z3501@new*) (begin (if (not (z2df7@id? z34ff@x)) (z30ca@syntax-violation '#f '"not an indentifier" z3497@stx z34ff@x) (void)) (if (z2e03@bound-id-member? z34ff@x z3500@old*) (z30ca@syntax-violation '#f '"duplicate binding" z3497@stx z34ff@x) (void)) ((lambda (z3505@y) (values z3505@y (cons z34ff@x z3500@old*) (cons z3505@y z3501@new*))) (gensym (z30d0@syntax->datum z34ff@x)))))) (set! z349c@rename* (lambda (z34ed@x* z34ee@old* z34ef@new*) (if (null? z34ed@x*) (values '() z34ee@old* z34ef@new*) (call-with-values (lambda () (z349a@rename (car z34ed@x*) z34ee@old* z34ef@new*)) (lambda (z34f3@x z34f4@old* z34f5@new*) (call-with-values (lambda () (z349c@rename* (cdr z34ed@x*) z34f4@old* z34f5@new*)) (lambda (z34f9@x* z34fa@old* z34fb@new*) (values (cons z34f3@x z34f9@x*) z34fa@old* z34fb@new*)))))))) ((lambda (z349d@t) ((lambda (z349f@ls/false) (if z349f@ls/false (apply (lambda (z34a1@b z34a2@b*) (cons* (z2fb2@bless 'let) '() z34a1@b z34a2@b*)) z349f@ls/false) ((lambda (z34a5@t) ((lambda (z34a7@ls/false) (if z34a7@ls/false (apply (lambda (z34a9@lhs* z34aa@rhs* z34ab@b z34ac@b*) (z2fb2@bless ((letrec ((z34b1@f (lambda (z34b3@lhs* z34b4@rhs* z34b5@old* z34b6@new*) (if (null? z34b3@lhs*) (cons 'let (cons (map list z34b5@old* z34b6@new*) (cons z34ab@b z34ac@b*))) ((lambda (z34bb@t) ((lambda (z34bd@ls/false) (if z34bd@ls/false (apply (lambda (z34bf@x*) (call-with-values (lambda () (z349c@rename* z34bf@x* z34b5@old* z34b6@new*)) (lambda (z34c7@z34c2 z34c8@z34c4 z34c9@z34c6) ((lambda (z34cd@new* z34ce@old* z34cf@y*) (list 'call-with-values (list 'lambda '() (car z34b4@rhs*)) (list 'lambda z34cf@y* (z34b1@f (cdr z34b3@lhs*) (cdr z34b4@rhs*) z34ce@old* z34cd@new*)))) z34c9@z34c6 z34c8@z34c4 z34c7@z34c2)))) z34bd@ls/false) ((lambda (z34d3@t) ((lambda (z34d5@ls/false) (if z34d5@ls/false (apply (lambda (z34d7@x* z34d8@x) (call-with-values (lambda () (z349a@rename z34d8@x z34b5@old* z34b6@new*)) (lambda (z34db@y z34dc@old* z34dd@new*) (call-with-values (lambda () (z349c@rename* z34d7@x* z34dc@old* z34dd@new*)) (lambda (z34e1@y* z34e2@old* z34e3@new*) (list 'call-with-values (list 'lambda '() (car z34b4@rhs*)) (list 'lambda (append z34e1@y* z34db@y) (z34b1@f (cdr z34b3@lhs*) (cdr z34b4@rhs*) z34e2@old* z34e3@new*)))))))) z34d5@ls/false) ((lambda (z34e7@t) ((lambda (z34e9@ls/false) (if z34e9@ls/false (apply (lambda (z34eb@others) (z30ca@syntax-violation '#f '"malformed bindings" z3497@stx z34eb@others)) z34e9@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z34e7@t))) (z2ffc@syntax-dispatch z34e7@t 'any))) z34d3@t))) (z2ffc@syntax-dispatch z34d3@t '#(each+ any () any)))) z34bb@t))) (z2ffc@syntax-dispatch z34bb@t 'each-any))) (car z34b3@lhs*)))))) z34b1@f) z34a9@lhs* z34aa@rhs* '() '()))) z34a7@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z34a5@t))) (z2ffc@syntax-dispatch z34a5@t '(_ #(each (any any)) any . each-any)))) z349d@t))) (z2ffc@syntax-dispatch z349d@t '(_ () any . each-any)))) z3497@stx))) '#f '#f))) (set! z2fbc@let*-values-macro (lambda (z3507@stx) ((lambda (z350a@check) (begin (set! z350a@check (lambda (z3539@x*) (if (not (null? z3539@x*)) ((lambda (z353b@x) (begin (if (not (z2df7@id? z353b@x)) (z30ca@syntax-violation '#f '"not an identifier" z3507@stx z353b@x) (void)) (z350a@check (cdr z3539@x*)) (if (z2e03@bound-id-member? z353b@x (cdr z3539@x*)) (z30ca@syntax-violation '#f '"duplicate identifier" z3507@stx z353b@x) (void)))) (car z3539@x*)) (void)))) ((lambda (z350b@t) ((lambda (z350d@ls/false) (if z350d@ls/false (apply (lambda (z350f@b z3510@b*) (cons* (z2fb2@bless 'let) '() z350f@b z3510@b*)) z350d@ls/false) ((lambda (z3513@t) ((lambda (z3515@ls/false) (if z3515@ls/false (apply (lambda (z3517@lhs* z3518@rhs* z3519@b z351a@b*) (z2fb2@bless ((letrec ((z351f@f (lambda (z3521@lhs* z3522@rhs*) (if (null? z3521@lhs*) (cons 'begin (cons z3519@b z351a@b*)) ((lambda (z3525@t) ((lambda (z3527@ls/false) (if z3527@ls/false (apply (lambda (z3529@x*) (begin (z350a@check z3529@x*) (list 'call-with-values (list 'lambda '() (car z3522@rhs*)) (list 'lambda z3529@x* (z351f@f (cdr z3521@lhs*) (cdr z3522@rhs*)))))) z3527@ls/false) ((lambda (z352b@t) ((lambda (z352d@ls/false) (if z352d@ls/false (apply (lambda (z352f@x* z3530@x) (begin (z350a@check (cons z3530@x z352f@x*)) (list 'call-with-values (list 'lambda '() (car z3522@rhs*)) (list 'lambda (append z352f@x* z3530@x) (z351f@f (cdr z3521@lhs*) (cdr z3522@rhs*)))))) z352d@ls/false) ((lambda (z3533@t) ((lambda (z3535@ls/false) (if z3535@ls/false (apply (lambda (z3537@others) (z30ca@syntax-violation '#f '"malformed bindings" z3507@stx z3537@others)) z3535@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3533@t))) (z2ffc@syntax-dispatch z3533@t 'any))) z352b@t))) (z2ffc@syntax-dispatch z352b@t '#(each+ any () any)))) z3525@t))) (z2ffc@syntax-dispatch z3525@t 'each-any))) (car z3521@lhs*)))))) z351f@f) z3517@lhs* z3518@rhs*))) z3515@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3513@t))) (z2ffc@syntax-dispatch z3513@t '(_ #(each (any any)) any . each-any)))) z350b@t))) (z2ffc@syntax-dispatch z350b@t '(_ () any . each-any)))) z3507@stx))) '#f))) (set! z2fbe@trace-lambda-macro (lambda (z353d@stx) ((lambda (z353f@t) ((lambda (z3541@ls/false) (if z3541@ls/false (apply (lambda (z3543@who z3544@fmls z3545@b z3546@b*) (if (z2dff@valid-bound-ids? z3544@fmls) (z2fb2@bless (list 'make-traced-procedure (list 'quote z3543@who) (cons 'lambda (cons z3544@fmls (cons z3545@b z3546@b*))))) (z2fb6@invalid-fmls-error z353d@stx z3544@fmls))) z3541@ls/false) ((lambda (z354b@t) ((lambda (z354d@ls/false) (if z354d@ls/false (apply (lambda (z354f@who z3550@fmls z3551@last z3552@b z3553@b*) (if (z2dff@valid-bound-ids? (cons z3551@last z3550@fmls)) (z2fb2@bless (list 'make-traced-procedure (list 'quote z354f@who) (cons 'lambda (cons (append z3550@fmls z3551@last) (cons z3552@b z3553@b*))))) (z2fb6@invalid-fmls-error z353d@stx (append z3550@fmls z3551@last)))) z354d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z354b@t))) (z2ffc@syntax-dispatch z354b@t '(_ any #(each+ any () any) any . each-any)))) z353f@t))) (z2ffc@syntax-dispatch z353f@t '(_ any each-any any . each-any)))) z353d@stx))) (set! z2fc0@trace-define-macro (lambda (z3559@stx) ((lambda (z355b@t) ((lambda (z355d@ls/false) (if z355d@ls/false (apply (lambda (z355f@who z3560@fmls z3561@b z3562@b*) (if (z2dff@valid-bound-ids? z3560@fmls) (z2fb2@bless (list 'define z355f@who (list 'make-traced-procedure (list 'quote z355f@who) (cons 'lambda (cons z3560@fmls (cons z3561@b z3562@b*)))))) (z2fb6@invalid-fmls-error z3559@stx z3560@fmls))) z355d@ls/false) ((lambda (z3567@t) ((lambda (z3569@ls/false) (if z3569@ls/false (apply (lambda (z356b@who z356c@fmls z356d@last z356e@b z356f@b*) (if (z2dff@valid-bound-ids? (cons z356d@last z356c@fmls)) (z2fb2@bless (list 'define z356b@who (list 'make-traced-procedure (list 'quote z356b@who) (cons 'lambda (cons (append z356c@fmls z356d@last) (cons z356e@b z356f@b*)))))) (z2fb6@invalid-fmls-error z3559@stx (append z356c@fmls z356d@last)))) z3569@ls/false) ((lambda (z3575@t) ((lambda (z3577@ls/false) (if z3577@ls/false (apply (lambda (z3579@who z357a@expr) (if (z2df7@id? z3579@who) (z2fb2@bless (list 'define z3579@who (list 'let (list (list 'v z357a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote z3579@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (z30ca@syntax-violation '#f '"invalid name" z3559@stx))) z3577@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3575@t))) (z2ffc@syntax-dispatch z3575@t '(_ any any)))) z3567@t))) (z2ffc@syntax-dispatch z3567@t '(_ (any . #(each+ any () any)) any . each-any)))) z355b@t))) (z2ffc@syntax-dispatch z355b@t '(_ (any . each-any) any . each-any)))) z3559@stx))) (set! z2fc2@trace-define-syntax-macro (lambda (z357d@stx) ((lambda (z357f@t) ((lambda (z3581@ls/false) (if z3581@ls/false (apply (lambda (z3583@who z3584@expr) (if (z2df7@id? z3583@who) (z2fb2@bless (list 'define-syntax z3583@who (list 'make-traced-macro (list 'quote z3583@who) z3584@expr))) (z30ca@syntax-violation '#f '"invalid name" z357d@stx))) z3581@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z357f@t))) (z2ffc@syntax-dispatch z357f@t '(_ any any)))) z357d@stx))) (set! z2fc4@trace-let/rec-syntax (lambda (z3587@who) (lambda (z3589@stx) ((lambda (z358b@t) ((lambda (z358d@ls/false) (if z358d@ls/false (apply (lambda (z358f@lhs* z3590@rhs* z3591@b z3592@b*) (if (z2dff@valid-bound-ids? z358f@lhs*) ((lambda (z3597@rhs*) (z2fb2@bless (cons z3587@who (cons (map list z358f@lhs* z3597@rhs*) (cons z3591@b z3592@b*))))) (map (lambda (z3599@lhs z359a@rhs) (list 'make-traced-macro (list 'quote z3599@lhs) z359a@rhs)) z358f@lhs* z3590@rhs*)) (z2fb6@invalid-fmls-error z3589@stx z358f@lhs*))) z358d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z358b@t))) (z2ffc@syntax-dispatch z358b@t '(_ #(each (any any)) any . each-any)))) z3589@stx)))) (set! z2fc6@trace-let-syntax-macro (z2fc4@trace-let/rec-syntax 'let-syntax)) (set! z2fc8@trace-letrec-syntax-macro (z2fc4@trace-let/rec-syntax 'letrec-syntax)) (set! z2fca@guard-macro (lambda (z359d@x) ((lambda (z35a0@gen-clauses) (begin (set! z35a0@gen-clauses (lambda (z35b7@con z35b8@outerk z35b9@clause*) ((lambda (z35be@f z35c0@f*) (begin (set! z35be@f (lambda (z35f7@x z35f8@k) ((lambda (z35fb@t) ((lambda (z35fd@ls/false) (if z35fd@ls/false (apply (lambda (z35ff@e z3600@p) ((lambda (z3603@t) (list 'let (list (list z3603@t z35ff@e)) (list 'if z3603@t (list z3600@p z3603@t) z35f8@k))) (gensym))) z35fd@ls/false) ((lambda (z3605@t) ((lambda (z3607@ls/false) (if z3607@ls/false (apply (lambda (z3609@e) ((lambda (z360b@t) (list 'let (list (list z360b@t z3609@e)) (list 'if z360b@t z360b@t z35f8@k))) (gensym))) z3607@ls/false) ((lambda (z360d@t) ((lambda (z360f@ls/false) (if z360f@ls/false (apply (lambda (z3611@e z3612@v z3613@v*) (list 'if z3611@e (cons 'begin (cons z3612@v z3613@v*)) z35f8@k)) z360f@ls/false) ((lambda (z3617@t) ((lambda (z3619@ls/false) (if z3619@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid guard clause" z35f7@x)) z3619@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3617@t))) (z2ffc@syntax-dispatch z3617@t '_))) z360d@t))) (z2ffc@syntax-dispatch z360d@t '(any any . each-any)))) z3605@t))) (z2ffc@syntax-dispatch z3605@t '(any)))) z35fb@t))) (z2ffc@syntax-dispatch z35fb@t '(any #(scheme-id =>) any)))) z35f7@x))) (set! z35c0@f* (lambda (z35cd@x*) ((lambda (z35cf@t) ((lambda (z35d1@ls/false) (if z35d1@ls/false (apply (lambda () ((lambda (z35d3@g) (values (list z35d3@g (list 'lambda '() (list 'raise-continuable z35b7@con))) z35d3@g)) (gensym))) z35d1@ls/false) ((lambda (z35d5@t) ((lambda (z35d7@ls/false) (if z35d7@ls/false (apply (lambda (z35d9@e z35da@e*) (values (cons 'begin (cons z35d9@e z35da@e*)) '#f)) z35d7@ls/false) ((lambda (z35dd@t) ((lambda (z35df@ls/false) (if z35df@ls/false (apply (lambda (z35e1@cls z35e2@cls*) (call-with-values (lambda () (z35c0@f* z35e2@cls*)) (lambda (z35e9@z35e6 z35ea@z35e8) ((lambda (z35ed@g z35ee@e) (values (z35be@f z35e1@cls z35ee@e) z35ed@g)) z35ea@z35e8 z35e9@z35e6)))) z35df@ls/false) ((lambda (z35f1@t) ((lambda (z35f3@ls/false) (if z35f3@ls/false (apply (lambda (z35f5@others) (z30ca@syntax-violation '#f '"invalid guard clause" z35f5@others)) z35f3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z35f1@t))) (z2ffc@syntax-dispatch z35f1@t 'any))) z35dd@t))) (z2ffc@syntax-dispatch z35dd@t '(any . any)))) z35d5@t))) (z2ffc@syntax-dispatch z35d5@t '((#(scheme-id else) any . each-any))))) z35cf@t))) (z2ffc@syntax-dispatch z35cf@t '()))) z35cd@x*))) (call-with-values (lambda () (z35c0@f* z35b9@clause*)) (lambda (z35c5@z35c2 z35c6@z35c4) ((lambda (z35c9@raisek z35ca@code) (if z35c9@raisek (list (list 'call/cc (list 'lambda (list z35c9@raisek) (list z35b8@outerk (list 'lambda '() z35ca@code))))) (list z35b8@outerk (list 'lambda '() z35ca@code)))) z35c6@z35c4 z35c5@z35c2))))) '#f '#f))) ((lambda (z35a1@t) ((lambda (z35a3@ls/false) (if (and z35a3@ls/false (apply (lambda (z35a5@con z35a6@clause* z35a7@b z35a8@b*) (z2df7@id? z35a5@con)) z35a3@ls/false)) (apply (lambda (z35ad@con z35ae@clause* z35af@b z35b0@b*) ((lambda (z35b5@outerk) (z2fb2@bless (list (list 'call/cc (list 'lambda (list z35b5@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list z35ad@con) (z35a0@gen-clauses z35ad@con z35b5@outerk z35ae@clause*)) (cons 'lambda (cons '() (cons z35af@b z35b0@b*)))))))))) (gensym))) z35a3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z35a1@t))) (z2ffc@syntax-dispatch z35a1@t '(_ (any . each-any) any . each-any)))) z359d@x))) '#f))) (set! z2fcc@define-enumeration-macro (lambda (z361b@stx) ((lambda (z361e@set? z3620@remove-dups) (begin (set! z361e@set? (lambda (z3637@x) (or (null? z3637@x) (and (not (memq (car z3637@x) (cdr z3637@x))) (z361e@set? (cdr z3637@x)))))) (set! z3620@remove-dups (lambda (z3635@ls) (if (null? z3635@ls) '() (cons (car z3635@ls) (z3620@remove-dups (remq (car z3635@ls) (cdr z3635@ls))))))) ((lambda (z3621@t) ((lambda (z3623@ls/false) (if (and z3623@ls/false (apply (lambda (z3625@name z3626@id* z3627@maker) (and (z2df7@id? z3625@name) (z2df7@id? z3627@maker) (for-all z2df7@id? z3626@id*))) z3623@ls/false)) (apply (lambda (z362b@name z362c@id* z362d@maker) ((lambda (z3631@name* z3632@mk) (z2fb2@bless (list 'begin (list 'define z3632@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote z3631@name*)))) (list 'define-syntax z362b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote z3631@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote z362b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax z362d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote z362d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote z3631@name*)) (cons 'syntax-violation (cons (list 'quote z362d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons z3632@mk '('(n* ...)))))))))))) (z3620@remove-dups (z30d0@syntax->datum z362c@id*)) (gensym))) z3623@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3621@t))) (z2ffc@syntax-dispatch z3621@t '(_ any each-any any)))) z361b@stx))) '#f '#f))) (set! z2fce@time-macro (lambda (z3639@stx) ((lambda (z363b@t) ((lambda (z363d@ls/false) (if z363d@ls/false (apply (lambda (z363f@expr) (z2fb2@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() z363f@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) z363d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z363b@t))) (z2ffc@syntax-dispatch z363b@t '(_ any)))) z3639@stx))) (set! z2fd0@delay-macro (lambda (z3641@stx) ((lambda (z3643@t) ((lambda (z3645@ls/false) (if z3645@ls/false (apply (lambda (z3647@expr) (z2fb2@bless (list 'make-promise (list 'lambda '() z3647@expr)))) z3645@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3643@t))) (z2ffc@syntax-dispatch z3643@t '(_ any)))) z3641@stx))) (set! z2fd2@assert-macro (lambda (z3649@stx) ((lambda (z364b@t) ((lambda (z364d@ls/false) (if z364d@ls/false (apply (lambda (z364f@expr) ((lambda (z3651@pos) (z2fb2@bless (list 'unless z364f@expr (list 'assertion-error (list 'quote z364f@expr) (list 'quote z3651@pos))))) (or (z30c2@expression-position z3649@stx) (z30c2@expression-position z364f@expr)))) z364d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z364b@t))) (z2ffc@syntax-dispatch z364b@t '(_ any)))) z3649@stx))) (set! z2fd4@endianness-macro (lambda (z3653@stx) ((lambda (z3655@t) ((lambda (z3657@ls/false) (if z3657@ls/false (apply (lambda (z3659@e) ((lambda (z365b@t) (if (memv z365b@t '(little)) (z2fb2@bless ''little) (if (memv z365b@t '(big)) (z2fb2@bless ''big) (z30ca@syntax-violation '#f '"endianness must be big or little" z3653@stx)))) (z30d0@syntax->datum z3659@e))) z3657@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3655@t))) (z2ffc@syntax-dispatch z3655@t '(_ any)))) z3653@stx))) (set! z2fd6@identifier-syntax-macro (lambda (z365d@stx) ((lambda (z365f@t) ((lambda (z3661@ls/false) (if z3661@ls/false (apply (lambda (z3663@expr) (z2fb2@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax z3663@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax z3663@expr) '((syntax (e* ...)))))))))) z3661@ls/false) ((lambda (z3665@t) ((lambda (z3667@ls/false) (if (and z3667@ls/false (apply (lambda (z3669@id1 z366a@expr1 z366b@id2 z366c@expr2 z366d@expr3) (and (z2df7@id? z3669@id1) (z2df7@id? z366b@id2) (z2df7@id? z366c@expr2))) z3667@ls/false)) (apply (lambda (z3673@id1 z3674@expr1 z3675@id2 z3676@expr2 z3677@expr3) (z2fb2@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax z3674@expr1)) (list (list 'set! 'id z3676@expr2) (list 'syntax z3677@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons z3674@expr1 '(e* ...))))))))) z3667@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3665@t))) (z2ffc@syntax-dispatch z3665@t '(_ (any any) ((#(scheme-id set!) any any) any))))) z365f@t))) (z2ffc@syntax-dispatch z365f@t '(_ any)))) z365d@stx))) (set! z2fd8@do-macro (lambda (z367d@stx) ((lambda (z3680@bind) (begin (set! z3680@bind (lambda (z3697@x) ((lambda (z3699@t) ((lambda (z369b@ls/false) (if z369b@ls/false (apply (lambda (z369d@x z369e@init) (list z369d@x z369e@init z369d@x)) z369b@ls/false) ((lambda (z36a1@t) ((lambda (z36a3@ls/false) (if z36a3@ls/false (apply (lambda (z36a5@x z36a6@init z36a7@step) (list z36a5@x z36a6@init z36a7@step)) z36a3@ls/false) ((lambda (z36ab@t) ((lambda (z36ad@ls/false) (if z36ad@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid binding" z367d@stx)) z36ad@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z36ab@t))) (z2ffc@syntax-dispatch z36ab@t '_))) z36a1@t))) (z2ffc@syntax-dispatch z36a1@t '(any any any)))) z3699@t))) (z2ffc@syntax-dispatch z3699@t '(any any)))) z3697@x))) ((lambda (z3681@t) ((lambda (z3683@ls/false) (if z3683@ls/false (apply (lambda (z3685@binding* z3686@test z3687@expr* z3688@command*) ((lambda (z368d@t) ((lambda (z368f@ls/false) (if z368f@ls/false (apply (lambda (z3691@x* z3692@init* z3693@step*) (if (z2dff@valid-bound-ids? z3691@x*) (z2fb2@bless (list 'letrec (list (list 'loop (list 'lambda z3691@x* (list 'if z3686@test (cons 'begin (cons '(if #f #f) z3687@expr*)) (cons 'begin (append z3688@command* (list (cons 'loop z3693@step*)))))))) (cons 'loop z3692@init*))) (z30ca@syntax-violation '#f '"invalid bindings" z367d@stx))) z368f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z368d@t))) (z2ffc@syntax-dispatch z368d@t '#(each (any any any))))) (map z3680@bind z3685@binding*))) z3683@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3681@t))) (z2ffc@syntax-dispatch z3681@t '(_ each-any (any . each-any) . each-any)))) z367d@stx))) '#f))) (set! z2fda@let*-macro (lambda (z36af@stx) ((lambda (z36b1@t) ((lambda (z36b3@ls/false) (if (and z36b3@ls/false (apply (lambda (z36b5@lhs* z36b6@rhs* z36b7@b z36b8@b*) (for-all z2df7@id? z36b5@lhs*)) z36b3@ls/false)) (apply (lambda (z36bd@lhs* z36be@rhs* z36bf@b z36c0@b*) (z2fb2@bless ((letrec ((z36c5@f (lambda (z36c7@x*) (if (null? z36c7@x*) (cons 'let (cons '() (cons z36bf@b z36c0@b*))) (list 'let (list (car z36c7@x*)) (z36c5@f (cdr z36c7@x*))))))) z36c5@f) (map list z36bd@lhs* z36be@rhs*)))) z36b3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z36b1@t))) (z2ffc@syntax-dispatch z36b1@t '(_ #(each (any any)) any . each-any)))) z36af@stx))) (set! z2fdc@or-macro (lambda (z36c9@stx) ((lambda (z36cb@t) ((lambda (z36cd@ls/false) (if z36cd@ls/false (apply (lambda () '#f) z36cd@ls/false) ((lambda (z36cf@t) ((lambda (z36d1@ls/false) (if z36d1@ls/false (apply (lambda (z36d3@e z36d4@e*) (z2fb2@bless ((letrec ((z36d7@f (lambda (z36d9@e z36da@e*) (if (null? z36da@e*) (list 'begin '#f z36d9@e) (list 'let (list (list 't z36d9@e)) (list 'if 't 't (z36d7@f (car z36da@e*) (cdr z36da@e*)))))))) z36d7@f) z36d3@e z36d4@e*))) z36d1@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z36cf@t))) (z2ffc@syntax-dispatch z36cf@t '(_ any . each-any)))) z36cb@t))) (z2ffc@syntax-dispatch z36cb@t '(_)))) z36c9@stx))) (set! z2fde@and-macro (lambda (z36dd@stx) ((lambda (z36df@t) ((lambda (z36e1@ls/false) (if z36e1@ls/false (apply (lambda () '#t) z36e1@ls/false) ((lambda (z36e3@t) ((lambda (z36e5@ls/false) (if z36e5@ls/false (apply (lambda (z36e7@e z36e8@e*) (z2fb2@bless ((letrec ((z36eb@f (lambda (z36ed@e z36ee@e*) (if (null? z36ee@e*) (list 'begin '#f z36ed@e) (cons 'if (cons z36ed@e (cons (z36eb@f (car z36ee@e*) (cdr z36ee@e*)) '(#f)))))))) z36eb@f) z36e7@e z36e8@e*))) z36e5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z36e3@t))) (z2ffc@syntax-dispatch z36e3@t '(_ any . each-any)))) z36df@t))) (z2ffc@syntax-dispatch z36df@t '(_)))) z36dd@stx))) (set! z2fe0@cond-macro (lambda (z36f1@stx) ((lambda (z36f3@t) ((lambda (z36f5@ls/false) (if z36f5@ls/false (apply (lambda (z36f7@cls z36f8@cls*) (z2fb2@bless ((letrec ((z36fb@f (lambda (z36fd@cls z36fe@cls*) (if (null? z36fe@cls*) ((lambda (z3701@t) ((lambda (z3703@ls/false) (if z3703@ls/false (apply (lambda (z3705@e z3706@e*) (cons 'begin (cons z3705@e z3706@e*))) z3703@ls/false) ((lambda (z3709@t) ((lambda (z370b@ls/false) (if z370b@ls/false (apply (lambda (z370d@e z370e@p) (list 'let (list (list 't z370d@e)) (list 'if 't (cons z370e@p '(t))))) z370b@ls/false) ((lambda (z3711@t) ((lambda (z3713@ls/false) (if z3713@ls/false (apply (lambda (z3715@e) (cons 'or (cons z3715@e '((if #f #f))))) z3713@ls/false) ((lambda (z3717@t) ((lambda (z3719@ls/false) (if z3719@ls/false (apply (lambda (z371b@e z371c@e*) (list 'if z371b@e (cons 'begin z371c@e*))) z3719@ls/false) ((lambda (z371f@t) ((lambda (z3721@ls/false) (if z3721@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid last clause" z36f1@stx)) z3721@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z371f@t))) (z2ffc@syntax-dispatch z371f@t '_))) z3717@t))) (z2ffc@syntax-dispatch z3717@t '(any . each-any)))) z3711@t))) (z2ffc@syntax-dispatch z3711@t '(any)))) z3709@t))) (z2ffc@syntax-dispatch z3709@t '(any #(scheme-id =>) any)))) z3701@t))) (z2ffc@syntax-dispatch z3701@t '(#(scheme-id else) any . each-any)))) z36fd@cls) ((lambda (z3723@t) ((lambda (z3725@ls/false) (if z3725@ls/false (apply (lambda (z3727@e z3728@e*) (z30ca@syntax-violation '#f '"incorrect position of keyword else" z36f1@stx)) z3725@ls/false) ((lambda (z372b@t) ((lambda (z372d@ls/false) (if z372d@ls/false (apply (lambda (z372f@e z3730@p) (list 'let (list (list 't z372f@e)) (list 'if 't (cons z3730@p '(t)) (z36fb@f (car z36fe@cls*) (cdr z36fe@cls*))))) z372d@ls/false) ((lambda (z3733@t) ((lambda (z3735@ls/false) (if z3735@ls/false (apply (lambda (z3737@e) (list 'or z3737@e (z36fb@f (car z36fe@cls*) (cdr z36fe@cls*)))) z3735@ls/false) ((lambda (z3739@t) ((lambda (z373b@ls/false) (if z373b@ls/false (apply (lambda (z373d@e z373e@e*) (list 'if z373d@e (cons 'begin z373e@e*) (z36fb@f (car z36fe@cls*) (cdr z36fe@cls*)))) z373b@ls/false) ((lambda (z3741@t) ((lambda (z3743@ls/false) (if z3743@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid last clause" z36f1@stx)) z3743@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3741@t))) (z2ffc@syntax-dispatch z3741@t '_))) z3739@t))) (z2ffc@syntax-dispatch z3739@t '(any . each-any)))) z3733@t))) (z2ffc@syntax-dispatch z3733@t '(any)))) z372b@t))) (z2ffc@syntax-dispatch z372b@t '(any #(scheme-id =>) any)))) z3723@t))) (z2ffc@syntax-dispatch z3723@t '(#(scheme-id else) any . each-any)))) z36fd@cls))))) z36fb@f) z36f7@cls z36f8@cls*))) z36f5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z36f3@t))) (z2ffc@syntax-dispatch z36f3@t '(_ any . each-any)))) z36f1@stx))) (set! z2fe2@do-include (lambda (z3745@stx z3746@id z3747@filename) ((lambda (z374b@filename) (begin (if (not (and (string? z374b@filename) (z2df7@id? z3746@id))) (z30ca@syntax-violation '#f '"invalid syntax" z3745@stx) (void)) (cons (z2fb2@bless 'begin) (with-input-from-file z374b@filename (lambda () ((letrec ((z374d@f (lambda (z374f@ls) ((lambda (z3751@x) (if (eof-object? z3751@x) (reverse z374f@ls) (z374d@f (cons (z2dd5@datum->stx z3746@id z3751@x) z374f@ls)))) (z2958@z2847@read-annotated))))) z374d@f) '())))))) (z2e0b@stx->datum z3747@filename)))) (set! z2fe4@include-macro (lambda (z3753@e) ((lambda (z3755@t) ((lambda (z3757@ls/false) (if z3757@ls/false (apply (lambda (z3759@id z375a@filename) (z2fe2@do-include z3753@e z3759@id z375a@filename)) z3757@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3755@t))) (z2ffc@syntax-dispatch z3755@t '(any any)))) z3753@e))) (set! z2fe6@include-into-macro (lambda (z375d@e) ((lambda (z375f@t) ((lambda (z3761@ls/false) (if z3761@ls/false (apply (lambda (z3763@id z3764@filename) (z2fe2@do-include z375d@e z3763@id z3764@filename)) z3761@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z375f@t))) (z2ffc@syntax-dispatch z375f@t '(_ any any)))) z375d@e))) (set! z2fe8@syntax-rules-macro (lambda (z3767@e) ((lambda (z3769@t) ((lambda (z376b@ls/false) (if z376b@ls/false (apply (lambda (z376d@lits z376e@pat* z376f@tmp*) (begin (z3002@verify-literals z376d@lits z3767@e) (z2fb2@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons z376d@lits (map (lambda (z3773@pat z3774@tmp) ((lambda (z3777@t) ((lambda (z3779@ls/false) (if z3779@ls/false (apply (lambda (z377b@rest) (list (cons 'g z377b@rest) (list 'syntax z3774@tmp))) z3779@ls/false) ((lambda (z377d@t) ((lambda (z377f@ls/false) (if z377f@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid syntax-rules pattern" z3767@e z3773@pat)) z377f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z377d@t))) (z2ffc@syntax-dispatch z377d@t '_))) z3777@t))) (z2ffc@syntax-dispatch z3777@t '(_ . any)))) z3773@pat)) z376e@pat* z376f@tmp*)))))))) z376b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3769@t))) (z2ffc@syntax-dispatch z3769@t '(_ each-any . #(each (any any)))))) z3767@e))) (set! z2fea@quasiquote-macro ((lambda () ((lambda (z3782@datum z379e@quasicons* z37a0@quasicons z37a2@quasiappend z37a4@quasivector z37a6@vquasi z37a8@quasi) (begin (set! z3782@datum (lambda (z3883@x) (list (z2f86@scheme-stx 'quote) (z2ddf@mkstx z3883@x '() '() '())))) (set! z379e@quasicons* (lambda (z387b@x z387c@y) ((letrec ((z387f@f (lambda (z3881@x) (if (null? z3881@x) z387c@y (z37a0@quasicons (car z3881@x) (z387f@f (cdr z3881@x))))))) z387f@f) z387b@x))) (set! z37a0@quasicons (lambda (z3855@x z3856@y) ((lambda (z3859@t) ((lambda (z385b@ls/false) (if z385b@ls/false (apply (lambda (z385d@dy) ((lambda (z385f@t) ((lambda (z3861@ls/false) (if z3861@ls/false (apply (lambda (z3863@dx) (list (z2f86@scheme-stx 'quote) (cons z3863@dx z385d@dy))) z3861@ls/false) ((lambda (z3865@t) ((lambda (z3867@ls/false) (if z3867@ls/false (apply (lambda () ((lambda (z3869@t) ((lambda (z386b@ls/false) (if z386b@ls/false (apply (lambda () (list (z2f86@scheme-stx 'list) z3855@x)) z386b@ls/false) ((lambda (z386d@t) ((lambda (z386f@ls/false) (if z386f@ls/false (apply (lambda () (list (z2f86@scheme-stx 'cons) z3855@x z3856@y)) z386f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z386d@t))) (z2ffc@syntax-dispatch z386d@t '_))) z3869@t))) (z2ffc@syntax-dispatch z3869@t '()))) z385d@dy)) z3867@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3865@t))) (z2ffc@syntax-dispatch z3865@t '_))) z385f@t))) (z2ffc@syntax-dispatch z385f@t '(#(scheme-id quote) any)))) z3855@x)) z385b@ls/false) ((lambda (z3871@t) ((lambda (z3873@ls/false) (if z3873@ls/false (apply (lambda (z3875@stuff) (cons* (z2f86@scheme-stx 'list) z3855@x z3875@stuff)) z3873@ls/false) ((lambda (z3877@t) ((lambda (z3879@ls/false) (if z3879@ls/false (apply (lambda () (list (z2f86@scheme-stx 'cons) z3855@x z3856@y)) z3879@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3877@t))) (z2ffc@syntax-dispatch z3877@t '_))) z3871@t))) (z2ffc@syntax-dispatch z3871@t '(#(scheme-id list) . each-any)))) z3859@t))) (z2ffc@syntax-dispatch z3859@t '(#(scheme-id quote) any)))) z3856@y))) (set! z37a2@quasiappend (lambda (z383b@x z383c@y) ((lambda (z383f@ls) (if (null? z383f@ls) (list (z2f86@scheme-stx 'quote) '()) (if (null? (cdr z383f@ls)) (car z383f@ls) (cons* (z2f86@scheme-stx 'append) z383f@ls)))) ((letrec ((z3841@f (lambda (z3843@x) (if (null? z3843@x) ((lambda (z3845@t) ((lambda (z3847@ls/false) (if z3847@ls/false (apply (lambda () '()) z3847@ls/false) ((lambda (z3849@t) ((lambda (z384b@ls/false) (if z384b@ls/false (apply (lambda () (list z383c@y)) z384b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3849@t))) (z2ffc@syntax-dispatch z3849@t '_))) z3845@t))) (z2ffc@syntax-dispatch z3845@t '(#(scheme-id quote) ())))) z383c@y) ((lambda (z384d@t) ((lambda (z384f@ls/false) (if z384f@ls/false (apply (lambda () (z3841@f (cdr z3843@x))) z384f@ls/false) ((lambda (z3851@t) ((lambda (z3853@ls/false) (if z3853@ls/false (apply (lambda () (cons (car z3843@x) (z3841@f (cdr z3843@x)))) z3853@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3851@t))) (z2ffc@syntax-dispatch z3851@t '_))) z384d@t))) (z2ffc@syntax-dispatch z384d@t '(#(scheme-id quote) ())))) (car z3843@x)))))) z3841@f) z383b@x)))) (set! z37a4@quasivector (lambda (z3809@x) ((lambda (z380b@pat-x) ((lambda (z380d@t) ((lambda (z380f@ls/false) (if z380f@ls/false (apply (lambda (z3811@x*) (list (z2f86@scheme-stx 'quote) (list->vector z3811@x*))) z380f@ls/false) ((lambda (z3813@t) ((lambda (z3815@ls/false) (if z3815@ls/false (apply (lambda () ((letrec ((z3817@f (lambda (z3819@x z381a@k) ((lambda (z381d@t) ((lambda (z381f@ls/false) (if z381f@ls/false (apply (lambda (z3821@x*) (z381a@k (map (lambda (z3823@x) (list (z2f86@scheme-stx 'quote) z3823@x)) z3821@x*))) z381f@ls/false) ((lambda (z3825@t) ((lambda (z3827@ls/false) (if z3827@ls/false (apply (lambda (z3829@x*) (z381a@k z3829@x*)) z3827@ls/false) ((lambda (z382b@t) ((lambda (z382d@ls/false) (if z382d@ls/false (apply (lambda (z382f@x z3830@y) (z3817@f z3830@y (lambda (z3833@ls) (z381a@k (cons z382f@x z3833@ls))))) z382d@ls/false) ((lambda (z3835@t) ((lambda (z3837@ls/false) (if z3837@ls/false (apply (lambda () (list (z2f86@scheme-stx 'list->vector) z380b@pat-x)) z3837@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3835@t))) (z2ffc@syntax-dispatch z3835@t '_))) z382b@t))) (z2ffc@syntax-dispatch z382b@t '(#(scheme-id cons) any any)))) z3825@t))) (z2ffc@syntax-dispatch z3825@t '(#(scheme-id list) . each-any)))) z381d@t))) (z2ffc@syntax-dispatch z381d@t '(#(scheme-id quote) each-any)))) z3819@x)))) z3817@f) z3809@x (lambda (z3839@ls) (cons* (z2f86@scheme-stx 'vector) z3839@ls)))) z3815@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3813@t))) (z2ffc@syntax-dispatch z3813@t '_))) z380d@t))) (z2ffc@syntax-dispatch z380d@t '(#(scheme-id quote) each-any)))) z380b@pat-x)) z3809@x))) (set! z37a6@vquasi (lambda (z37e7@p z37e8@lev) ((lambda (z37eb@t) ((lambda (z37ed@ls/false) (if z37ed@ls/false (apply (lambda (z37ef@p z37f0@q) ((lambda (z37f3@t) ((lambda (z37f5@ls/false) (if z37f5@ls/false (apply (lambda (z37f7@p) (if (= z37e8@lev '0) (z379e@quasicons* z37f7@p (z37a6@vquasi z37f0@q z37e8@lev)) (z37a0@quasicons (z37a0@quasicons (z3782@datum 'unquote) (z37a8@quasi z37f7@p (- z37e8@lev '1))) (z37a6@vquasi z37f0@q z37e8@lev)))) z37f5@ls/false) ((lambda (z37f9@t) ((lambda (z37fb@ls/false) (if z37fb@ls/false (apply (lambda (z37fd@p) (if (= z37e8@lev '0) (z37a2@quasiappend z37fd@p (z37a6@vquasi z37f0@q z37e8@lev)) (z37a0@quasicons (z37a0@quasicons (z3782@datum 'unquote-splicing) (z37a8@quasi z37fd@p (- z37e8@lev '1))) (z37a6@vquasi z37f0@q z37e8@lev)))) z37fb@ls/false) ((lambda (z37ff@t) ((lambda (z3801@ls/false) (if z3801@ls/false (apply (lambda (z3803@p) (z37a0@quasicons (z37a8@quasi z3803@p z37e8@lev) (z37a6@vquasi z37f0@q z37e8@lev))) z3801@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z37ff@t))) (z2ffc@syntax-dispatch z37ff@t 'any))) z37f9@t))) (z2ffc@syntax-dispatch z37f9@t '(#(scheme-id unquote-splicing) . each-any)))) z37f3@t))) (z2ffc@syntax-dispatch z37f3@t '(#(scheme-id unquote) . each-any)))) z37ef@p)) z37ed@ls/false) ((lambda (z3805@t) ((lambda (z3807@ls/false) (if z3807@ls/false (apply (lambda () (list (z2f86@scheme-stx 'quote) '())) z3807@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3805@t))) (z2ffc@syntax-dispatch z3805@t '()))) z37eb@t))) (z2ffc@syntax-dispatch z37eb@t '(any . any)))) z37e7@p))) (set! z37a8@quasi (lambda (z37b1@p z37b2@lev) ((lambda (z37b5@t) ((lambda (z37b7@ls/false) (if z37b7@ls/false (apply (lambda (z37b9@p) (if (= z37b2@lev '0) z37b9@p (z37a0@quasicons (z3782@datum 'unquote) (z37a8@quasi (list z37b9@p) (- z37b2@lev '1))))) z37b7@ls/false) ((lambda (z37bb@t) ((lambda (z37bd@ls/false) (if z37bd@ls/false (apply (lambda (z37bf@p z37c0@q) (if (= z37b2@lev '0) (z379e@quasicons* z37bf@p (z37a8@quasi z37c0@q z37b2@lev)) (z37a0@quasicons (z37a0@quasicons (z3782@datum 'unquote) (z37a8@quasi z37bf@p (- z37b2@lev '1))) (z37a8@quasi z37c0@q z37b2@lev)))) z37bd@ls/false) ((lambda (z37c3@t) ((lambda (z37c5@ls/false) (if z37c5@ls/false (apply (lambda (z37c7@p z37c8@q) (if (= z37b2@lev '0) (z37a2@quasiappend z37c7@p (z37a8@quasi z37c8@q z37b2@lev)) (z37a0@quasicons (z37a0@quasicons (z3782@datum 'unquote-splicing) (z37a8@quasi z37c7@p (- z37b2@lev '1))) (z37a8@quasi z37c8@q z37b2@lev)))) z37c5@ls/false) ((lambda (z37cb@t) ((lambda (z37cd@ls/false) (if z37cd@ls/false (apply (lambda (z37cf@p) (z37a0@quasicons (z3782@datum 'quasiquote) (z37a8@quasi (list z37cf@p) (+ z37b2@lev '1)))) z37cd@ls/false) ((lambda (z37d1@t) ((lambda (z37d3@ls/false) (if z37d3@ls/false (apply (lambda (z37d5@p z37d6@q) (z37a0@quasicons (z37a8@quasi z37d5@p z37b2@lev) (z37a8@quasi z37d6@q z37b2@lev))) z37d3@ls/false) ((lambda (z37d9@t) ((lambda (z37db@ls/false) (if (and z37db@ls/false (apply (lambda (z37dd@x) (not (z2dc1@stx? z37dd@x))) z37db@ls/false)) (apply (lambda (z37df@x) (z37a4@quasivector (z37a6@vquasi z37df@x z37b2@lev))) z37db@ls/false) ((lambda (z37e1@t) ((lambda (z37e3@ls/false) (if z37e3@ls/false (apply (lambda (z37e5@p) (list (z2f86@scheme-stx 'quote) z37e5@p)) z37e3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z37e1@t))) (z2ffc@syntax-dispatch z37e1@t 'any))) z37d9@t))) (z2ffc@syntax-dispatch z37d9@t '#(vector each-any)))) z37d1@t))) (z2ffc@syntax-dispatch z37d1@t '(any . any)))) z37cb@t))) (z2ffc@syntax-dispatch z37cb@t '(#(scheme-id quasiquote) any)))) z37c3@t))) (z2ffc@syntax-dispatch z37c3@t '((#(scheme-id unquote-splicing) . each-any) . any)))) z37bb@t))) (z2ffc@syntax-dispatch z37bb@t '((#(scheme-id unquote) . each-any) . any)))) z37b5@t))) (z2ffc@syntax-dispatch z37b5@t '(#(scheme-id unquote) any)))) z37b1@p))) (lambda (z37a9@x) ((lambda (z37ab@t) ((lambda (z37ad@ls/false) (if z37ad@ls/false (apply (lambda (z37af@e) (z37a8@quasi z37af@e '0)) z37ad@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z37ab@t))) (z2ffc@syntax-dispatch z37ab@t '(_ any)))) z37a9@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! z2fec@quasisyntax-macro ((lambda () ((lambda (z3886@quasi) (begin (set! z3886@quasi (lambda (z38a1@p z38a2@lev) ((lambda (z38a5@t) ((lambda (z38a7@ls/false) (if z38a7@ls/false (apply (lambda (z38a9@p) (if (= z38a2@lev '0) ((lambda (z38ab@g) (values (list z38ab@g) (list z38a9@p) z38ab@g)) (gensym)) (call-with-values (lambda () (z3886@quasi z38a9@p (- z38a2@lev '1))) (lambda (z38b3@z38ae z38b4@z38b0 z38b5@z38b2) ((lambda (z38b9@p z38ba@rhs* z38bb@lhs*) (values z38bb@lhs* z38ba@rhs* (list 'unsyntax z38b9@p))) z38b5@z38b2 z38b4@z38b0 z38b3@z38ae))))) z38a7@ls/false) ((lambda (z38bf@t) ((lambda (z38c1@ls/false) (if (and z38c1@ls/false (apply (lambda () (= z38a2@lev '0)) z38c1@ls/false)) (apply (lambda () (z30ca@syntax-violation '#f '"incorrect use of unsyntax" z38a1@p)) z38c1@ls/false) ((lambda (z38c3@t) ((lambda (z38c5@ls/false) (if z38c5@ls/false (apply (lambda (z38c7@p* z38c8@q) (call-with-values (lambda () (z3886@quasi z38c8@q z38a2@lev)) (lambda (z38d1@z38cc z38d2@z38ce z38d3@z38d0) ((lambda (z38d7@q z38d8@rhs* z38d9@lhs*) (if (= z38a2@lev '0) ((lambda (z38dd@g*) (values (append z38dd@g* z38d9@lhs*) (append z38c7@p* z38d8@rhs*) (append z38dd@g* z38d7@q))) (map (lambda (z38df@x) (gensym)) z38c7@p*)) (call-with-values (lambda () (z3886@quasi z38c7@p* (- z38a2@lev '1))) (lambda (z38e7@z38e2 z38e8@z38e4 z38e9@z38e6) ((lambda (z38ed@p* z38ee@rhs2* z38ef@lhs2*) (values (append z38ef@lhs2* z38d9@lhs*) (append z38ee@rhs2* z38d8@rhs*) (cons (cons 'unsyntax z38ed@p*) z38d7@q))) z38e9@z38e6 z38e8@z38e4 z38e7@z38e2))))) z38d3@z38d0 z38d2@z38ce z38d1@z38cc)))) z38c5@ls/false) ((lambda (z38f3@t) ((lambda (z38f5@ls/false) (if z38f5@ls/false (apply (lambda (z38f7@p* z38f8@q) (call-with-values (lambda () (z3886@quasi z38f8@q z38a2@lev)) (lambda (z3901@z38fc z3902@z38fe z3903@z3900) ((lambda (z3907@q z3908@rhs* z3909@lhs*) (if (= z38a2@lev '0) ((lambda (z390d@g*) (values (append (map (lambda (z390f@g) (cons z390f@g '(...))) z390d@g*) z3909@lhs*) (append z38f7@p* z3908@rhs*) (append (apply append (map (lambda (z3911@g) (cons z3911@g '(...))) z390d@g*)) z3907@q))) (map (lambda (z3913@x) (gensym)) z38f7@p*)) (call-with-values (lambda () (z3886@quasi z38f7@p* (- z38a2@lev '1))) (lambda (z391b@z3916 z391c@z3918 z391d@z391a) ((lambda (z3921@p* z3922@rhs2* z3923@lhs2*) (values (append z3923@lhs2* z3909@lhs*) (append z3922@rhs2* z3908@rhs*) (cons (cons 'unsyntax-splicing z3921@p*) z3907@q))) z391d@z391a z391c@z3918 z391b@z3916))))) z3903@z3900 z3902@z38fe z3901@z38fc)))) z38f5@ls/false) ((lambda (z3927@t) ((lambda (z3929@ls/false) (if (and z3929@ls/false (apply (lambda () (= z38a2@lev '0)) z3929@ls/false)) (apply (lambda () (z30ca@syntax-violation '#f '"incorrect use of unsyntax-splicing" z38a1@p)) z3929@ls/false) ((lambda (z392b@t) ((lambda (z392d@ls/false) (if z392d@ls/false (apply (lambda (z392f@p) (call-with-values (lambda () (z3886@quasi z392f@p (+ z38a2@lev '1))) (lambda (z3937@z3932 z3938@z3934 z3939@z3936) ((lambda (z393d@p z393e@rhs* z393f@lhs*) (values z393f@lhs* z393e@rhs* (list 'quasisyntax z393d@p))) z3939@z3936 z3938@z3934 z3937@z3932)))) z392d@ls/false) ((lambda (z3943@t) ((lambda (z3945@ls/false) (if z3945@ls/false (apply (lambda (z3947@p z3948@q) (call-with-values (lambda () (z3886@quasi z3947@p z38a2@lev)) (lambda (z3957@z394c z3958@z394e z3959@z3950) (call-with-values (lambda () (z3886@quasi z3948@q z38a2@lev)) (lambda (z395d@z3952 z395e@z3954 z395f@z3956) ((lambda (z3963@q z3964@rhs2* z3965@lhs2* z3966@p z3967@rhs* z3968@lhs*) (values (append z3965@lhs2* z3968@lhs*) (append z3964@rhs2* z3967@rhs*) (cons z3966@p z3963@q))) z395f@z3956 z395e@z3954 z395d@z3952 z3959@z3950 z3958@z394e z3957@z394c)))))) z3945@ls/false) ((lambda (z396f@t) ((lambda (z3971@ls/false) (if z3971@ls/false (apply (lambda (z3973@x*) (call-with-values (lambda () (z3886@quasi z3973@x* z38a2@lev)) (lambda (z397b@z3976 z397c@z3978 z397d@z397a) ((lambda (z3981@x* z3982@rhs* z3983@lhs*) (values z3983@lhs* z3982@rhs* (list->vector z3981@x*))) z397d@z397a z397c@z3978 z397b@z3976)))) z3971@ls/false) ((lambda (z3987@t) ((lambda (z3989@ls/false) (if z3989@ls/false (apply (lambda () (values '() '() z38a1@p)) z3989@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3987@t))) (z2ffc@syntax-dispatch z3987@t '_))) z396f@t))) (z2ffc@syntax-dispatch z396f@t '#(vector each-any)))) z3943@t))) (z2ffc@syntax-dispatch z3943@t '(any . any)))) z392b@t))) (z2ffc@syntax-dispatch z392b@t '(#(scheme-id quasisyntax) any)))) z3927@t))) (z2ffc@syntax-dispatch z3927@t '#(scheme-id unsyntax-splicing)))) z38f3@t))) (z2ffc@syntax-dispatch z38f3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) z38c3@t))) (z2ffc@syntax-dispatch z38c3@t '((#(scheme-id unsyntax) . each-any) . any)))) z38bf@t))) (z2ffc@syntax-dispatch z38bf@t '#(scheme-id unsyntax)))) z38a5@t))) (z2ffc@syntax-dispatch z38a5@t '(#(scheme-id unsyntax) any)))) z38a1@p))) (lambda (z3887@x) ((lambda (z3889@t) ((lambda (z388b@ls/false) (if z388b@ls/false (apply (lambda (z388d@e) (call-with-values (lambda () (z3886@quasi z388d@e '0)) (lambda (z3895@z3890 z3896@z3892 z3897@z3894) ((lambda (z389b@v z389c@rhs* z389d@lhs*) (z2fb2@bless (list 'syntax-case (cons 'list z389c@rhs*) '() (list z389d@lhs* (list 'syntax z389b@v))))) z3897@z3894 z3896@z3892 z3895@z3890)))) z388b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3889@t))) (z2ffc@syntax-dispatch z3889@t '(_ any)))) z3887@x)))) '#f)))) (set! z2fee@define-struct-macro (lambda (z398b@stx) (z30ca@syntax-violation '#f '"define-struct not supported" z398b@stx))) (set! z2ff0@define-record-type-macro (lambda (z398d@x) ((lambda (z3990@id z3992@get-record-name z3994@get-record-constructor-name z3996@get-record-predicate-name z3998@get-clause z399a@foo-rtd-code z399c@parent-rtd-code z399e@parent-rcd-code z39a0@foo-rcd-code z39a2@get-protocol-code z39a4@get-fields z39a6@get-mutator-indices z39a8@get-mutators z39aa@get-accessors z39ac@enumerate z39ae@do-define-record z39b0@verify-clauses) (begin (set! z3990@id (lambda (z3b83@ctxt . z3b85@str*) (z30ce@datum->syntax z3b83@ctxt (string->symbol (apply string-append (map (lambda (z3b87@x) (if (symbol? z3b87@x) (symbol->string z3b87@x) (if (string? z3b87@x) z3b87@x (assertion-violation 'define-record-type '"BUG")))) z3b85@str*)))))) (set! z3992@get-record-name (lambda (z3b71@spec) ((lambda (z3b73@t) ((lambda (z3b75@ls/false) (if z3b75@ls/false (apply (lambda (z3b77@foo z3b78@make-foo z3b79@foo?) z3b77@foo) z3b75@ls/false) ((lambda (z3b7d@t) ((lambda (z3b7f@ls/false) (if z3b7f@ls/false (apply (lambda (z3b81@foo) z3b81@foo) z3b7f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b7d@t))) (z2ffc@syntax-dispatch z3b7d@t 'any))) z3b73@t))) (z2ffc@syntax-dispatch z3b73@t '(any any any)))) z3b71@spec))) (set! z3994@get-record-constructor-name (lambda (z3b5d@spec) ((lambda (z3b5f@t) ((lambda (z3b61@ls/false) (if z3b61@ls/false (apply (lambda (z3b63@foo z3b64@make-foo z3b65@foo?) z3b64@make-foo) z3b61@ls/false) ((lambda (z3b69@t) ((lambda (z3b6b@ls/false) (if (and z3b6b@ls/false (apply (lambda (z3b6d@foo) (z2df7@id? z3b6d@foo)) z3b6b@ls/false)) (apply (lambda (z3b6f@foo) (z3990@id z3b6f@foo '"make-" (z2e0b@stx->datum z3b6f@foo))) z3b6b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b69@t))) (z2ffc@syntax-dispatch z3b69@t 'any))) z3b5f@t))) (z2ffc@syntax-dispatch z3b5f@t '(any any any)))) z3b5d@spec))) (set! z3996@get-record-predicate-name (lambda (z3b49@spec) ((lambda (z3b4b@t) ((lambda (z3b4d@ls/false) (if z3b4d@ls/false (apply (lambda (z3b4f@foo z3b50@make-foo z3b51@foo?) z3b51@foo?) z3b4d@ls/false) ((lambda (z3b55@t) ((lambda (z3b57@ls/false) (if (and z3b57@ls/false (apply (lambda (z3b59@foo) (z2df7@id? z3b59@foo)) z3b57@ls/false)) (apply (lambda (z3b5b@foo) (z3990@id z3b5b@foo (z2e0b@stx->datum z3b5b@foo) '"?")) z3b57@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b55@t))) (z2ffc@syntax-dispatch z3b55@t 'any))) z3b4b@t))) (z2ffc@syntax-dispatch z3b4b@t '(any any any)))) z3b49@spec))) (set! z3998@get-clause (lambda (z3b37@id z3b38@ls) ((lambda (z3b3b@t) ((lambda (z3b3d@ls/false) (if z3b3d@ls/false (apply (lambda () '#f) z3b3d@ls/false) ((lambda (z3b3f@t) ((lambda (z3b41@ls/false) (if z3b41@ls/false (apply (lambda (z3b43@x z3b44@rest z3b45@ls) (if (z2dfd@free-id=? (z2fb2@bless z3b37@id) z3b43@x) (cons z3b43@x z3b44@rest) (z3998@get-clause z3b37@id z3b45@ls))) z3b41@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b3f@t))) (z2ffc@syntax-dispatch z3b3f@t '((any . any) . any)))) z3b3b@t))) (z2ffc@syntax-dispatch z3b3b@t '()))) z3b38@ls))) (set! z399a@foo-rtd-code (lambda (z3ae5@name z3ae6@clause* z3ae7@parent-rtd-code) ((lambda (z3aec@convert-field-spec*) (begin (set! z3aec@convert-field-spec* (lambda (z3b1d@ls) (list->vector (map (lambda (z3b1f@x) ((lambda (z3b21@t) ((lambda (z3b23@ls/false) (if z3b23@ls/false (apply (lambda (z3b25@name z3b26@rest) (list 'mutable z3b25@name)) z3b23@ls/false) ((lambda (z3b29@t) ((lambda (z3b2b@ls/false) (if z3b2b@ls/false (apply (lambda (z3b2d@name z3b2e@rest) (list 'immutable z3b2d@name)) z3b2b@ls/false) ((lambda (z3b31@t) ((lambda (z3b33@ls/false) (if z3b33@ls/false (apply (lambda (z3b35@name) (list 'immutable z3b35@name)) z3b33@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b31@t))) (z2ffc@syntax-dispatch z3b31@t 'any))) z3b29@t))) (z2ffc@syntax-dispatch z3b29@t '(#(scheme-id immutable) any . any)))) z3b21@t))) (z2ffc@syntax-dispatch z3b21@t '(#(scheme-id mutable) any . any)))) z3b1f@x)) z3b1d@ls)))) ((lambda (z3aed@uid-code z3aee@sealed? z3aef@opaque? z3af0@fields) (z2fb2@bless (list 'make-record-type-descriptor (list 'quote z3ae5@name) z3ae7@parent-rtd-code z3aed@uid-code z3aee@sealed? z3aef@opaque? z3af0@fields))) ((lambda (z3af5@t) ((lambda (z3af7@ls/false) (if z3af7@ls/false (apply (lambda () (list 'quote (gensym))) z3af7@ls/false) ((lambda (z3af9@t) ((lambda (z3afb@ls/false) (if z3afb@ls/false (apply (lambda (z3afd@uid) (list 'quote z3afd@uid)) z3afb@ls/false) ((lambda (z3aff@t) ((lambda (z3b01@ls/false) (if z3b01@ls/false (apply (lambda () '#f) z3b01@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3aff@t))) (z2ffc@syntax-dispatch z3aff@t '_))) z3af9@t))) (z2ffc@syntax-dispatch z3af9@t '(_ any)))) z3af5@t))) (z2ffc@syntax-dispatch z3af5@t '(_)))) (z3998@get-clause 'nongenerative z3ae6@clause*)) ((lambda (z3b03@t) ((lambda (z3b05@ls/false) (if z3b05@ls/false (apply (lambda () '#t) z3b05@ls/false) ((lambda (z3b07@t) ((lambda (z3b09@ls/false) (if z3b09@ls/false (apply (lambda () '#f) z3b09@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b07@t))) (z2ffc@syntax-dispatch z3b07@t '_))) z3b03@t))) (z2ffc@syntax-dispatch z3b03@t '(_ #(atom #t))))) (z3998@get-clause 'sealed z3ae6@clause*)) ((lambda (z3b0b@t) ((lambda (z3b0d@ls/false) (if z3b0d@ls/false (apply (lambda () '#t) z3b0d@ls/false) ((lambda (z3b0f@t) ((lambda (z3b11@ls/false) (if z3b11@ls/false (apply (lambda () '#f) z3b11@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b0f@t))) (z2ffc@syntax-dispatch z3b0f@t '_))) z3b0b@t))) (z2ffc@syntax-dispatch z3b0b@t '(_ #(atom #t))))) (z3998@get-clause 'opaque z3ae6@clause*)) ((lambda (z3b13@t) ((lambda (z3b15@ls/false) (if z3b15@ls/false (apply (lambda (z3b17@field-spec*) (list 'quote (z3aec@convert-field-spec* z3b17@field-spec*))) z3b15@ls/false) ((lambda (z3b19@t) ((lambda (z3b1b@ls/false) (if z3b1b@ls/false (apply (lambda () ''#()) z3b1b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b19@t))) (z2ffc@syntax-dispatch z3b19@t '_))) z3b13@t))) (z2ffc@syntax-dispatch z3b13@t '(_ . each-any)))) (z3998@get-clause 'fields z3ae6@clause*))))) '#f))) (set! z399c@parent-rtd-code (lambda (z3acd@clause*) ((lambda (z3acf@t) ((lambda (z3ad1@ls/false) (if z3ad1@ls/false (apply (lambda (z3ad3@name) (list 'record-type-descriptor z3ad3@name)) z3ad1@ls/false) ((lambda (z3ad5@t) ((lambda (z3ad7@ls/false) (if z3ad7@ls/false (apply (lambda () ((lambda (z3ad9@t) ((lambda (z3adb@ls/false) (if z3adb@ls/false (apply (lambda (z3add@rtd z3ade@rcd) z3add@rtd) z3adb@ls/false) ((lambda (z3ae1@t) ((lambda (z3ae3@ls/false) (if z3ae3@ls/false (apply (lambda () '#f) z3ae3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3ae1@t))) (z2ffc@syntax-dispatch z3ae1@t '#(atom #f)))) z3ad9@t))) (z2ffc@syntax-dispatch z3ad9@t '(_ any any)))) (z3998@get-clause 'parent-rtd z3acd@clause*))) z3ad7@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3ad5@t))) (z2ffc@syntax-dispatch z3ad5@t '#(atom #f)))) z3acf@t))) (z2ffc@syntax-dispatch z3acf@t '(_ any)))) (z3998@get-clause 'parent z3acd@clause*)))) (set! z399e@parent-rcd-code (lambda (z3ab5@clause*) ((lambda (z3ab7@t) ((lambda (z3ab9@ls/false) (if z3ab9@ls/false (apply (lambda (z3abb@name) (list 'record-constructor-descriptor z3abb@name)) z3ab9@ls/false) ((lambda (z3abd@t) ((lambda (z3abf@ls/false) (if z3abf@ls/false (apply (lambda () ((lambda (z3ac1@t) ((lambda (z3ac3@ls/false) (if z3ac3@ls/false (apply (lambda (z3ac5@rtd z3ac6@rcd) z3ac6@rcd) z3ac3@ls/false) ((lambda (z3ac9@t) ((lambda (z3acb@ls/false) (if z3acb@ls/false (apply (lambda () '#f) z3acb@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3ac9@t))) (z2ffc@syntax-dispatch z3ac9@t '#(atom #f)))) z3ac1@t))) (z2ffc@syntax-dispatch z3ac1@t '(_ any any)))) (z3998@get-clause 'parent-rtd z3ab5@clause*))) z3abf@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3abd@t))) (z2ffc@syntax-dispatch z3abd@t '#(atom #f)))) z3ab7@t))) (z2ffc@syntax-dispatch z3ab7@t '(_ any)))) (z3998@get-clause 'parent z3ab5@clause*)))) (set! z39a0@foo-rcd-code (lambda (z3aad@clause* z3aae@foo-rtd z3aaf@protocol z3ab0@parent-rcd-code) (list 'make-record-constructor-descriptor z3aae@foo-rtd z3ab0@parent-rcd-code z3aaf@protocol))) (set! z39a2@get-protocol-code (lambda (z3aa1@clause*) ((lambda (z3aa3@t) ((lambda (z3aa5@ls/false) (if z3aa5@ls/false (apply (lambda (z3aa7@expr) z3aa7@expr) z3aa5@ls/false) ((lambda (z3aa9@t) ((lambda (z3aab@ls/false) (if z3aab@ls/false (apply (lambda () '#f) z3aab@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3aa9@t))) (z2ffc@syntax-dispatch z3aa9@t '_))) z3aa3@t))) (z2ffc@syntax-dispatch z3aa3@t '(_ any)))) (z3998@get-clause 'protocol z3aa1@clause*)))) (set! z39a4@get-fields (lambda (z3a8f@clause*) ((lambda (z3a91@t) ((lambda (z3a93@ls/false) (if z3a93@ls/false (apply (lambda () '()) z3a93@ls/false) ((lambda (z3a95@t) ((lambda (z3a97@ls/false) (if z3a97@ls/false (apply (lambda (z3a99@f*) z3a99@f*) z3a97@ls/false) ((lambda (z3a9b@t) ((lambda (z3a9d@ls/false) (if z3a9d@ls/false (apply (lambda (z3a9f@rest) (z39a4@get-fields z3a9f@rest)) z3a9d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3a9b@t))) (z2ffc@syntax-dispatch z3a9b@t '(_ . any)))) z3a95@t))) (z2ffc@syntax-dispatch z3a95@t '((#(scheme-id fields) . each-any) . _)))) z3a91@t))) (z2ffc@syntax-dispatch z3a91@t '()))) z3a8f@clause*))) (set! z39a6@get-mutator-indices (lambda (z3a77@fields) ((letrec ((z3a79@f (lambda (z3a7b@fields z3a7c@i) ((lambda (z3a7f@t) ((lambda (z3a81@ls/false) (if z3a81@ls/false (apply (lambda () '()) z3a81@ls/false) ((lambda (z3a83@t) ((lambda (z3a85@ls/false) (if z3a85@ls/false (apply (lambda (z3a87@rest) (cons z3a7c@i (z3a79@f z3a87@rest (+ z3a7c@i '1)))) z3a85@ls/false) ((lambda (z3a89@t) ((lambda (z3a8b@ls/false) (if z3a8b@ls/false (apply (lambda (z3a8d@rest) (z3a79@f z3a8d@rest (+ z3a7c@i '1))) z3a8b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3a89@t))) (z2ffc@syntax-dispatch z3a89@t '(_ . any)))) z3a83@t))) (z2ffc@syntax-dispatch z3a83@t '((#(scheme-id mutable) . _) . any)))) z3a7f@t))) (z2ffc@syntax-dispatch z3a7f@t '()))) z3a7b@fields)))) z3a79@f) z3a77@fields '0))) (set! z39a8@get-mutators (lambda (z3a4d@foo z3a4e@fields) ((lambda (z3a52@gen-name) (begin (set! z3a52@gen-name (lambda (z3a75@x) (z30ce@datum->syntax z3a4d@foo (string->symbol (string-append (symbol->string (z30d0@syntax->datum z3a4d@foo)) '"-" (symbol->string (z30d0@syntax->datum z3a75@x)) '"-set!"))))) ((letrec ((z3a53@f (lambda (z3a55@fields) ((lambda (z3a57@t) ((lambda (z3a59@ls/false) (if z3a59@ls/false (apply (lambda () '()) z3a59@ls/false) ((lambda (z3a5b@t) ((lambda (z3a5d@ls/false) (if z3a5d@ls/false (apply (lambda (z3a5f@name z3a60@accessor z3a61@mutator z3a62@rest) (cons z3a61@mutator (z3a53@f z3a62@rest))) z3a5d@ls/false) ((lambda (z3a67@t) ((lambda (z3a69@ls/false) (if z3a69@ls/false (apply (lambda (z3a6b@name z3a6c@rest) (cons (z3a52@gen-name z3a6b@name) (z3a53@f z3a6c@rest))) z3a69@ls/false) ((lambda (z3a6f@t) ((lambda (z3a71@ls/false) (if z3a71@ls/false (apply (lambda (z3a73@rest) (z3a53@f z3a73@rest)) z3a71@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3a6f@t))) (z2ffc@syntax-dispatch z3a6f@t '(_ . any)))) z3a67@t))) (z2ffc@syntax-dispatch z3a67@t '((#(scheme-id mutable) any) . any)))) z3a5b@t))) (z2ffc@syntax-dispatch z3a5b@t '((#(scheme-id mutable) any any any) . any)))) z3a57@t))) (z2ffc@syntax-dispatch z3a57@t '()))) z3a55@fields)))) z3a53@f) z3a4e@fields))) '#f))) (set! z39aa@get-accessors (lambda (z3a09@foo z3a0a@fields) ((lambda (z3a0e@gen-name) (begin (set! z3a0e@gen-name (lambda (z3a4b@x) (z30ce@datum->syntax z3a09@foo (string->symbol (string-append (symbol->string (z30d0@syntax->datum z3a09@foo)) '"-" (symbol->string (z30d0@syntax->datum z3a4b@x))))))) (map (lambda (z3a0f@field) ((lambda (z3a11@t) ((lambda (z3a13@ls/false) (if (and z3a13@ls/false (apply (lambda (z3a15@name z3a16@accessor z3a17@mutator) (z2df7@id? z3a16@accessor)) z3a13@ls/false)) (apply (lambda (z3a1b@name z3a1c@accessor z3a1d@mutator) z3a1c@accessor) z3a13@ls/false) ((lambda (z3a21@t) ((lambda (z3a23@ls/false) (if (and z3a23@ls/false (apply (lambda (z3a25@name z3a26@accessor) (z2df7@id? z3a26@accessor)) z3a23@ls/false)) (apply (lambda (z3a29@name z3a2a@accessor) z3a2a@accessor) z3a23@ls/false) ((lambda (z3a2d@t) ((lambda (z3a2f@ls/false) (if (and z3a2f@ls/false (apply (lambda (z3a31@name) (z2df7@id? z3a31@name)) z3a2f@ls/false)) (apply (lambda (z3a33@name) (z3a0e@gen-name z3a33@name)) z3a2f@ls/false) ((lambda (z3a35@t) ((lambda (z3a37@ls/false) (if (and z3a37@ls/false (apply (lambda (z3a39@name) (z2df7@id? z3a39@name)) z3a37@ls/false)) (apply (lambda (z3a3b@name) (z3a0e@gen-name z3a3b@name)) z3a37@ls/false) ((lambda (z3a3d@t) ((lambda (z3a3f@ls/false) (if (and z3a3f@ls/false (apply (lambda (z3a41@name) (z2df7@id? z3a41@name)) z3a3f@ls/false)) (apply (lambda (z3a43@name) (z3a0e@gen-name z3a43@name)) z3a3f@ls/false) ((lambda (z3a45@t) ((lambda (z3a47@ls/false) (if z3a47@ls/false (apply (lambda (z3a49@others) (z30ca@syntax-violation '#f '"invalid field spec" z3a0f@field)) z3a47@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3a45@t))) (z2ffc@syntax-dispatch z3a45@t 'any))) z3a3d@t))) (z2ffc@syntax-dispatch z3a3d@t 'any))) z3a35@t))) (z2ffc@syntax-dispatch z3a35@t '(#(scheme-id immutable) any)))) z3a2d@t))) (z2ffc@syntax-dispatch z3a2d@t '(#(scheme-id mutable) any)))) z3a21@t))) (z2ffc@syntax-dispatch z3a21@t '(#(scheme-id immutable) any any)))) z3a11@t))) (z2ffc@syntax-dispatch z3a11@t '(#(scheme-id mutable) any any any)))) z3a0f@field)) z3a0a@fields))) '#f))) (set! z39ac@enumerate (lambda (z3a01@ls) ((letrec ((z3a03@f (lambda (z3a05@ls z3a06@i) (if (null? z3a05@ls) '() (cons z3a06@i (z3a03@f (cdr z3a05@ls) (+ z3a06@i '1))))))) z3a03@f) z3a01@ls '0))) (set! z39ae@do-define-record (lambda (z39d9@namespec z39da@clause*) ((lambda (z39dd@foo) ((lambda (z39df@foo-rtd) ((lambda (z39e1@foo-rcd) ((lambda (z39e3@protocol) ((lambda (z39e5@make-foo) ((lambda (z39e7@fields) ((lambda (z39e9@idx*) ((lambda (z39eb@foo-x*) ((lambda (z39ed@set-foo-x!*) ((lambda (z39ef@set-foo-idx*) ((lambda (z39f1@foo?) ((lambda (z39f3@foo-rtd-code) ((lambda (z39f5@foo-rcd-code) ((lambda (z39f7@protocol-code) ((lambda () (z2fb2@bless (cons 'begin (cons (list 'define z39df@foo-rtd z39f3@foo-rtd-code) (cons (list 'define z39e3@protocol z39f7@protocol-code) (cons (list 'define z39e1@foo-rcd z39f5@foo-rcd-code) (cons (list 'define-syntax z39dd@foo (list 'list ''$rtd (list 'syntax z39df@foo-rtd) (list 'syntax z39e1@foo-rcd))) (cons (list 'define z39f1@foo? (list 'record-predicate z39df@foo-rtd)) (cons (list 'define z39e5@make-foo (list 'record-constructor z39e1@foo-rcd)) (append (map (lambda (z39f9@foo-x z39fa@idx) (list 'define z39f9@foo-x (list 'record-accessor z39df@foo-rtd z39fa@idx))) z39eb@foo-x* z39e9@idx*) (map (lambda (z39fd@set-foo-x! z39fe@idx) (list 'define z39fd@set-foo-x! (list 'record-mutator z39df@foo-rtd z39fe@idx))) z39ed@set-foo-x!* z39ef@set-foo-idx*))))))))))))) (z39a2@get-protocol-code z39da@clause*))) (z39a0@foo-rcd-code z39da@clause* z39df@foo-rtd z39e3@protocol (z399e@parent-rcd-code z39da@clause*)))) (z399a@foo-rtd-code z39dd@foo z39da@clause* (z399c@parent-rtd-code z39da@clause*)))) (z3996@get-record-predicate-name z39d9@namespec))) (z39a6@get-mutator-indices z39e7@fields))) (z39a8@get-mutators z39dd@foo z39e7@fields))) (z39aa@get-accessors z39dd@foo z39e7@fields))) (z39ac@enumerate z39e7@fields))) (z39a4@get-fields z39da@clause*))) (z3994@get-record-constructor-name z39d9@namespec))) (gensym))) (gensym))) (gensym))) (z3992@get-record-name z39d9@namespec)))) (set! z39b0@verify-clauses (lambda (z39b9@x z39ba@cls*) ((lambda (z39be@valid-kwds z39c0@free-id-member?) (begin (set! z39be@valid-kwds (map z2fb2@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! z39c0@free-id-member? (lambda (z39d5@x z39d6@ls) (and (pair? z39d6@ls) (or (z2dfd@free-id=? z39d5@x (car z39d6@ls)) (z39c0@free-id-member? z39d5@x (cdr z39d6@ls)))))) ((letrec ((z39c1@f (lambda (z39c3@cls* z39c4@seen*) (if (not (null? z39c3@cls*)) ((lambda (z39c7@t) ((lambda (z39c9@ls/false) (if z39c9@ls/false (apply (lambda (z39cb@kwd z39cc@rest) (if (or (not (z2df7@id? z39cb@kwd)) (not (z39c0@free-id-member? z39cb@kwd z39be@valid-kwds))) (z30ca@syntax-violation '#f '"not a valid define-record-type keyword" z39cb@kwd) (if (z2e03@bound-id-member? z39cb@kwd z39c4@seen*) (z30ca@syntax-violation '#f '"duplicate use of keyword " z39b9@x z39cb@kwd) (z39c1@f (cdr z39c3@cls*) (cons z39cb@kwd z39c4@seen*))))) z39c9@ls/false) ((lambda (z39cf@t) ((lambda (z39d1@ls/false) (if z39d1@ls/false (apply (lambda (z39d3@cls) (z30ca@syntax-violation '#f '"malformed define-record-type clause" z39d3@cls)) z39d1@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z39cf@t))) (z2ffc@syntax-dispatch z39cf@t 'any))) z39c7@t))) (z2ffc@syntax-dispatch z39c7@t '(any . any)))) (car z39c3@cls*)) (void))))) z39c1@f) z39ba@cls* '()))) '#f '#f))) ((lambda (z39b1@t) ((lambda (z39b3@ls/false) (if z39b3@ls/false (apply (lambda (z39b5@namespec z39b6@clause*) (begin (z39b0@verify-clauses z398d@x z39b6@clause*) (z39ae@do-define-record z39b5@namespec z39b6@clause*))) z39b3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z39b1@t))) (z2ffc@syntax-dispatch z39b1@t '(_ any . each-any)))) z398d@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! z2ff2@define-condition-type-macro (lambda (z3b89@x) ((lambda (z3b8c@mkname) (begin (set! z3b8c@mkname (lambda (z3bb9@name z3bba@suffix) (z30ce@datum->syntax z3bb9@name (string->symbol (string-append (symbol->string (z30d0@syntax->datum z3bb9@name)) z3bba@suffix))))) ((lambda (z3b8d@t) ((lambda (z3b8f@ls/false) (if (and z3b8f@ls/false (apply (lambda (z3b91@ctxt z3b92@name z3b93@super z3b94@constructor z3b95@predicate z3b96@field* z3b97@accessor*) (and (z2df7@id? z3b92@name) (z2df7@id? z3b93@super) (z2df7@id? z3b94@constructor) (z2df7@id? z3b95@predicate) (for-all z2df7@id? z3b96@field*) (for-all z2df7@id? z3b97@accessor*))) z3b8f@ls/false)) (apply (lambda (z3b9f@ctxt z3ba0@name z3ba1@super z3ba2@constructor z3ba3@predicate z3ba4@field* z3ba5@accessor*) ((lambda (z3bad@aux-accessor*) (z2fb2@bless (cons 'begin (cons (cons 'define-record-type (cons (list z3ba0@name z3ba2@constructor (gensym)) (cons (list 'parent z3ba1@super) (cons (cons 'fields (map (lambda (z3baf@field z3bb0@aux) (list 'immutable z3baf@field z3bb0@aux)) z3ba4@field* z3bad@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define z3ba3@predicate (list 'condition-predicate (list 'record-type-descriptor z3ba0@name))) (map (lambda (z3bb3@accessor z3bb4@aux) (list 'define z3bb3@accessor (list 'condition-accessor (list 'record-type-descriptor z3ba0@name) z3bb4@aux))) z3ba5@accessor* z3bad@aux-accessor*)))))) (map (lambda (z3bb7@x) (gensym)) z3ba5@accessor*))) z3b8f@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3b8d@t))) (z2ffc@syntax-dispatch z3b8d@t '(any any any any any . #(each (any any)))))) z3b89@x))) '#f))) (set! z2ff4@incorrect-usage-macro (lambda (z3bbd@e) (z30ca@syntax-violation '#f '"incorrect usage of auxiliary keyword" z3bbd@e))) (set! z2ff6@parameterize-macro (lambda (z3bbf@e) ((lambda (z3bc1@t) ((lambda (z3bc3@ls/false) (if z3bc3@ls/false (apply (lambda (z3bc5@b z3bc6@b*) (z2fb2@bless (cons 'let (cons '() (cons z3bc5@b z3bc6@b*))))) z3bc3@ls/false) ((lambda (z3bc9@t) ((lambda (z3bcb@ls/false) (if z3bcb@ls/false (apply (lambda (z3bcd@olhs* z3bce@orhs* z3bcf@b z3bd0@b*) ((lambda (z3bd5@lhs* z3bd6@rhs*) (z2fb2@bless (cons (list 'lambda (append z3bd5@lhs* z3bd6@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (z3bd9@lhs z3bda@rhs) (list 'let (list (list 't (list z3bd9@lhs))) (list z3bd9@lhs z3bda@rhs) (cons 'set! (cons z3bda@rhs '(t))))) z3bd5@lhs* z3bd6@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons z3bcf@b z3bd0@b*))) '(swap)))))) (append z3bcd@olhs* z3bce@orhs*)))) (z30b8@generate-temporaries z3bcd@olhs*) (z30b8@generate-temporaries z3bce@orhs*))) z3bcb@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3bc9@t))) (z2ffc@syntax-dispatch z3bc9@t '(_ #(each (any any)) any . each-any)))) z3bc1@t))) (z2ffc@syntax-dispatch z3bc1@t '(_ () any . each-any)))) z3bbf@e))) (set! z2ff8@foreign-call-transformer (lambda (z3bdd@e z3bde@r z3bdf@mr) ((lambda (z3be3@t) ((lambda (z3be5@ls/false) (if z3be5@ls/false (apply (lambda (z3be7@name z3be8@arg*) (cons 'foreign-call (cons (z301e@chi-expr z3be7@name z3bde@r z3bdf@mr) (z301a@chi-expr* z3be8@arg* z3bde@r z3bdf@mr)))) z3be5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3be3@t))) (z2ffc@syntax-dispatch z3be3@t '(_ any . each-any)))) z3bdd@e))) (set! z2ffa@convert-pattern (lambda (z3beb@pattern z3bec@keys) ((lambda (z3bf0@cvt* z3bf2@cvt) (begin (set! z3bf0@cvt* (lambda (z3c8f@p* z3c90@n z3c91@ids) (if (null? z3c8f@p*) (values '() z3c91@ids) (call-with-values (lambda () (z3bf0@cvt* (cdr z3c8f@p*) z3c90@n z3c91@ids)) (lambda (z3c99@z3c96 z3c9a@z3c98) ((lambda (z3c9d@ids z3c9e@y) (call-with-values (lambda () (z3bf2@cvt (car z3c8f@p*) z3c90@n z3c9d@ids)) (lambda (z3ca5@z3ca2 z3ca6@z3ca4) ((lambda (z3ca9@ids z3caa@x) (values (cons z3caa@x z3c9e@y) z3ca9@ids)) z3ca6@z3ca4 z3ca5@z3ca2)))) z3c9a@z3c98 z3c99@z3c96)))))) (set! z3bf2@cvt (lambda (z3bf3@p z3bf4@n z3bf5@ids) ((lambda (z3bf9@t) ((lambda (z3bfb@ls/false) (if (and z3bfb@ls/false (apply (lambda (z3bfd@id) (z2df7@id? z3bfd@id)) z3bfb@ls/false)) (apply (lambda (z3bff@id) (if (z2e03@bound-id-member? z3bf3@p z3bec@keys) (values (vector 'free-id z3bf3@p) z3bf5@ids) (if (z2dfd@free-id=? z3bf3@p (z2f86@scheme-stx '_)) (values '_ z3bf5@ids) (values 'any (cons (cons z3bf3@p z3bf4@n) z3bf5@ids))))) z3bfb@ls/false) ((lambda (z3c01@t) ((lambda (z3c03@ls/false) (if (and z3c03@ls/false (apply (lambda (z3c05@p z3c06@dots) (z2ffe@ellipsis? z3c06@dots)) z3c03@ls/false)) (apply (lambda (z3c09@p z3c0a@dots) (call-with-values (lambda () (z3bf2@cvt z3c09@p (+ z3bf4@n '1) z3bf5@ids)) (lambda (z3c11@z3c0e z3c12@z3c10) ((lambda (z3c15@ids z3c16@p) (values (if (eq? z3c16@p 'any) 'each-any (vector 'each z3c16@p)) z3c15@ids)) z3c12@z3c10 z3c11@z3c0e)))) z3c03@ls/false) ((lambda (z3c19@t) ((lambda (z3c1b@ls/false) (if (and z3c1b@ls/false (apply (lambda (z3c1d@x z3c1e@dots z3c1f@ys z3c20@z) (z2ffe@ellipsis? z3c1e@dots)) z3c1b@ls/false)) (apply (lambda (z3c25@x z3c26@dots z3c27@ys z3c28@z) (call-with-values (lambda () (z3bf2@cvt z3c28@z z3bf4@n z3bf5@ids)) (lambda (z3c31@z3c2e z3c32@z3c30) ((lambda (z3c35@ids z3c36@z) (call-with-values (lambda () (z3bf0@cvt* z3c27@ys z3bf4@n z3c35@ids)) (lambda (z3c3d@z3c3a z3c3e@z3c3c) ((lambda (z3c41@ids z3c42@ys) (call-with-values (lambda () (z3bf2@cvt z3c25@x (+ z3bf4@n '1) z3c41@ids)) (lambda (z3c49@z3c46 z3c4a@z3c48) ((lambda (z3c4d@ids z3c4e@x) (values (vector 'each+ z3c4e@x (reverse z3c42@ys) z3c36@z) z3c4d@ids)) z3c4a@z3c48 z3c49@z3c46)))) z3c3e@z3c3c z3c3d@z3c3a)))) z3c32@z3c30 z3c31@z3c2e)))) z3c1b@ls/false) ((lambda (z3c51@t) ((lambda (z3c53@ls/false) (if z3c53@ls/false (apply (lambda (z3c55@x z3c56@y) (call-with-values (lambda () (z3bf2@cvt z3c56@y z3bf4@n z3bf5@ids)) (lambda (z3c5d@z3c5a z3c5e@z3c5c) ((lambda (z3c61@ids z3c62@y) (call-with-values (lambda () (z3bf2@cvt z3c55@x z3bf4@n z3c61@ids)) (lambda (z3c69@z3c66 z3c6a@z3c68) ((lambda (z3c6d@ids z3c6e@x) (values (cons z3c6e@x z3c62@y) z3c6d@ids)) z3c6a@z3c68 z3c69@z3c66)))) z3c5e@z3c5c z3c5d@z3c5a)))) z3c53@ls/false) ((lambda (z3c71@t) ((lambda (z3c73@ls/false) (if z3c73@ls/false (apply (lambda () (values '() z3bf5@ids)) z3c73@ls/false) ((lambda (z3c75@t) ((lambda (z3c77@ls/false) (if (and z3c77@ls/false (apply (lambda (z3c79@p) (not (z2dc1@stx? z3c79@p))) z3c77@ls/false)) (apply (lambda (z3c7b@p) (call-with-values (lambda () (z3bf2@cvt z3c7b@p z3bf4@n z3bf5@ids)) (lambda (z3c81@z3c7e z3c82@z3c80) ((lambda (z3c85@ids z3c86@p) (values (vector 'vector z3c86@p) z3c85@ids)) z3c82@z3c80 z3c81@z3c7e)))) z3c77@ls/false) ((lambda (z3c89@t) ((lambda (z3c8b@ls/false) (if z3c8b@ls/false (apply (lambda (z3c8d@datum) (values (vector 'atom (z2e0b@stx->datum z3c8d@datum)) z3bf5@ids)) z3c8b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3c89@t))) (z2ffc@syntax-dispatch z3c89@t 'any))) z3c75@t))) (z2ffc@syntax-dispatch z3c75@t '#(vector each-any)))) z3c71@t))) (z2ffc@syntax-dispatch z3c71@t '()))) z3c51@t))) (z2ffc@syntax-dispatch z3c51@t '(any . any)))) z3c19@t))) (z2ffc@syntax-dispatch z3c19@t '(any any . #(each+ any () any))))) z3c01@t))) (z2ffc@syntax-dispatch z3c01@t '(any any)))) z3bf9@t))) (z2ffc@syntax-dispatch z3bf9@t 'any))) z3bf3@p))) (z3bf2@cvt z3beb@pattern '0 '()))) '#f '#f))) (set! z2ffc@syntax-dispatch ((lambda () ((lambda (z3cae@stx^ z3cb0@match-each z3cb2@match-each+ z3cb4@match-each-any z3cb6@match-empty z3cb8@combine z3cba@match* z3cbc@match) (begin (set! z3cae@stx^ (lambda (z3d89@e z3d8a@m* z3d8b@s* z3d8c@ae*) (if (and (null? z3d8a@m*) (null? z3d8b@s*) (null? z3d8c@ae*)) z3d89@e (z2ddf@mkstx z3d89@e z3d8a@m* z3d8b@s* z3d8c@ae*)))) (set! z3cb0@match-each (lambda (z3d69@e z3d6a@p z3d6b@m* z3d6c@s* z3d6d@ae*) (if (pair? z3d69@e) ((lambda (z3d73@first) (and z3d73@first ((lambda (z3d75@rest) (and z3d75@rest (cons z3d73@first z3d75@rest))) (z3cb0@match-each (cdr z3d69@e) z3d6a@p z3d6b@m* z3d6c@s* z3d6d@ae*)))) (z3cbc@match (car z3d69@e) z3d6a@p z3d6b@m* z3d6c@s* z3d6d@ae* '())) (if (null? z3d69@e) '() (if (z2dc1@stx? z3d69@e) (and (not (z2d87@top-marked? z3d6b@m*)) (call-with-values (lambda () (z2ddd@join-wraps z3d6b@m* z3d6c@s* z3d6d@ae* z3d69@e)) (lambda (z3d7d@z3d78 z3d7e@z3d7a z3d7f@z3d7c) ((lambda (z3d83@ae* z3d84@s* z3d85@m*) (z3cb0@match-each (z2dc3@stx-expr z3d69@e) z3d6a@p z3d85@m* z3d84@s* z3d83@ae*)) z3d7f@z3d7c z3d7e@z3d7a z3d7d@z3d78)))) (if (z295a@z284b@annotation? z3d69@e) (z3cb0@match-each (z295c@z284f@annotation-expression z3d69@e) z3d6a@p z3d6b@m* z3d6c@s* z3d6d@ae*) '#f)))))) (set! z3cb2@match-each+ (lambda (z3d29@e z3d2a@x-pat z3d2b@y-pat z3d2c@z-pat z3d2d@m* z3d2e@s* z3d2f@ae* z3d30@r) ((letrec ((z3d39@f (lambda (z3d3b@e z3d3c@m* z3d3d@s* z3d3e@ae*) (if (pair? z3d3b@e) (call-with-values (lambda () (z3d39@f (cdr z3d3b@e) z3d3c@m* z3d3d@s* z3d3e@ae*)) (lambda (z3d49@z3d44 z3d4a@z3d46 z3d4b@z3d48) ((lambda (z3d4f@r z3d50@y-pat z3d51@xr*) (if z3d4f@r (if (null? z3d50@y-pat) ((lambda (z3d55@xr) (if z3d55@xr (values (cons z3d55@xr z3d51@xr*) z3d50@y-pat z3d4f@r) (values '#f '#f '#f))) (z3cbc@match (car z3d3b@e) z3d2a@x-pat z3d3c@m* z3d3d@s* z3d3e@ae* '())) (values '() (cdr z3d50@y-pat) (z3cbc@match (car z3d3b@e) (car z3d50@y-pat) z3d3c@m* z3d3d@s* z3d3e@ae* z3d4f@r))) (values '#f '#f '#f))) z3d4b@z3d48 z3d4a@z3d46 z3d49@z3d44))) (if (z2dc1@stx? z3d3b@e) (if (z2d87@top-marked? z3d3c@m*) (values '() z3d2b@y-pat (z3cbc@match z3d3b@e z3d2c@z-pat z3d3c@m* z3d3d@s* z3d3e@ae* z3d30@r)) (call-with-values (lambda () (z2ddd@join-wraps z3d3c@m* z3d3d@s* z3d3e@ae* z3d3b@e)) (lambda (z3d5d@z3d58 z3d5e@z3d5a z3d5f@z3d5c) ((lambda (z3d63@ae* z3d64@s* z3d65@m*) (z3d39@f (z2dc3@stx-expr z3d3b@e) z3d65@m* z3d64@s* z3d63@ae*)) z3d5f@z3d5c z3d5e@z3d5a z3d5d@z3d58)))) (if (z295a@z284b@annotation? z3d3b@e) (z3d39@f (z295c@z284f@annotation-expression z3d3b@e) z3d3c@m* z3d3d@s* z3d3e@ae*) (values '() z3d2b@y-pat (z3cbc@match z3d3b@e z3d2c@z-pat z3d3c@m* z3d3d@s* z3d3e@ae* z3d30@r)))))))) z3d39@f) z3d29@e z3d2d@m* z3d2e@s* z3d2f@ae*))) (set! z3cb4@match-each-any (lambda (z3d0d@e z3d0e@m* z3d0f@s* z3d10@ae*) (if (pair? z3d0d@e) ((lambda (z3d15@l) (and z3d15@l (cons (z3cae@stx^ (car z3d0d@e) z3d0e@m* z3d0f@s* z3d10@ae*) z3d15@l))) (z3cb4@match-each-any (cdr z3d0d@e) z3d0e@m* z3d0f@s* z3d10@ae*)) (if (null? z3d0d@e) '() (if (z2dc1@stx? z3d0d@e) (and (not (z2d87@top-marked? z3d0e@m*)) (call-with-values (lambda () (z2ddd@join-wraps z3d0e@m* z3d0f@s* z3d10@ae* z3d0d@e)) (lambda (z3d1d@z3d18 z3d1e@z3d1a z3d1f@z3d1c) ((lambda (z3d23@ae* z3d24@s* z3d25@m*) (z3cb4@match-each-any (z2dc3@stx-expr z3d0d@e) z3d25@m* z3d24@s* z3d23@ae*)) z3d1f@z3d1c z3d1e@z3d1a z3d1d@z3d18)))) (if (z295a@z284b@annotation? z3d0d@e) (z3cb4@match-each-any (z295c@z284f@annotation-expression z3d0d@e) z3d0e@m* z3d0f@s* z3d10@ae*) '#f)))))) (set! z3cb6@match-empty (lambda (z3d07@p z3d08@r) (if (null? z3d07@p) z3d08@r (if (eq? z3d07@p '_) z3d08@r (if (eq? z3d07@p 'any) (cons '() z3d08@r) (if (pair? z3d07@p) (z3cb6@match-empty (car z3d07@p) (z3cb6@match-empty (cdr z3d07@p) z3d08@r)) (if (eq? z3d07@p 'each-any) (cons '() z3d08@r) ((lambda (z3d0b@t) (if (memv z3d0b@t '(each)) (z3cb6@match-empty (vector-ref z3d07@p '1) z3d08@r) (if (memv z3d0b@t '(each+)) (z3cb6@match-empty (vector-ref z3d07@p '1) (z3cb6@match-empty (reverse (vector-ref z3d07@p '2)) (z3cb6@match-empty (vector-ref z3d07@p '3) z3d08@r))) (if (memv z3d0b@t '(free-id atom)) z3d08@r (if (memv z3d0b@t '(scheme-id atom)) z3d08@r (if (memv z3d0b@t '(vector)) (z3cb6@match-empty (vector-ref z3d07@p '1) z3d08@r) (assertion-violation 'syntax-dispatch '"invalid pattern" z3d07@p))))))) (vector-ref z3d07@p '0))))))))) (set! z3cb8@combine (lambda (z3d03@r* z3d04@r) (if (null? (car z3d03@r*)) z3d04@r (cons (map car z3d03@r*) (z3cb8@combine (map cdr z3d03@r*) z3d04@r))))) (set! z3cba@match* (lambda (z3cdf@e z3ce0@p z3ce1@m* z3ce2@s* z3ce3@ae* z3ce4@r) (if (null? z3ce0@p) (and (null? z3cdf@e) z3ce4@r) (if (pair? z3ce0@p) (and (pair? z3cdf@e) (z3cbc@match (car z3cdf@e) (car z3ce0@p) z3ce1@m* z3ce2@s* z3ce3@ae* (z3cbc@match (cdr z3cdf@e) (cdr z3ce0@p) z3ce1@m* z3ce2@s* z3ce3@ae* z3ce4@r))) (if (eq? z3ce0@p 'each-any) ((lambda (z3ceb@l) (and z3ceb@l (cons z3ceb@l z3ce4@r))) (z3cb4@match-each-any z3cdf@e z3ce1@m* z3ce2@s* z3ce3@ae*)) ((lambda (z3ced@t) (if (memv z3ced@t '(each)) (if (null? z3cdf@e) (z3cb6@match-empty (vector-ref z3ce0@p '1) z3ce4@r) ((lambda (z3cef@r*) (and z3cef@r* (z3cb8@combine z3cef@r* z3ce4@r))) (z3cb0@match-each z3cdf@e (vector-ref z3ce0@p '1) z3ce1@m* z3ce2@s* z3ce3@ae*))) (if (memv z3ced@t '(free-id)) (and (symbol? z3cdf@e) (z2d87@top-marked? z3ce1@m*) (z2dfd@free-id=? (z3cae@stx^ z3cdf@e z3ce1@m* z3ce2@s* z3ce3@ae*) (vector-ref z3ce0@p '1)) z3ce4@r) (if (memv z3ced@t '(scheme-id)) (and (symbol? z3cdf@e) (z2d87@top-marked? z3ce1@m*) (z2dfd@free-id=? (z3cae@stx^ z3cdf@e z3ce1@m* z3ce2@s* z3ce3@ae*) (z2f86@scheme-stx (vector-ref z3ce0@p '1))) z3ce4@r) (if (memv z3ced@t '(each+)) (call-with-values (lambda () (z3cb2@match-each+ z3cdf@e (vector-ref z3ce0@p '1) (vector-ref z3ce0@p '2) (vector-ref z3ce0@p '3) z3ce1@m* z3ce2@s* z3ce3@ae* z3ce4@r)) (lambda (z3cf7@z3cf2 z3cf8@z3cf4 z3cf9@z3cf6) ((lambda (z3cfd@r z3cfe@y-pat z3cff@xr*) (and z3cfd@r (null? z3cfe@y-pat) (if (null? z3cff@xr*) (z3cb6@match-empty (vector-ref z3ce0@p '1) z3cfd@r) (z3cb8@combine z3cff@xr* z3cfd@r)))) z3cf9@z3cf6 z3cf8@z3cf4 z3cf7@z3cf2))) (if (memv z3ced@t '(atom)) (and (fast-equal? (vector-ref z3ce0@p '1) (z2e09@strip z3cdf@e z3ce1@m*)) z3ce4@r) (if (memv z3ced@t '(vector)) (and (vector? z3cdf@e) (z3cbc@match (vector->list z3cdf@e) (vector-ref z3ce0@p '1) z3ce1@m* z3ce2@s* z3ce3@ae* z3ce4@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" z3ce0@p)))))))) (vector-ref z3ce0@p '0))))))) (set! z3cbc@match (lambda (z3cc1@e z3cc2@p z3cc3@m* z3cc4@s* z3cc5@ae* z3cc6@r) (if (not z3cc6@r) '#f (if (eq? z3cc2@p '_) z3cc6@r (if (eq? z3cc2@p 'any) (cons (z3cae@stx^ z3cc1@e z3cc3@m* z3cc4@s* z3cc5@ae*) z3cc6@r) (if (z2dc1@stx? z3cc1@e) (and (not (z2d87@top-marked? z3cc3@m*)) (call-with-values (lambda () (z2ddd@join-wraps z3cc3@m* z3cc4@s* z3cc5@ae* z3cc1@e)) (lambda (z3cd3@z3cce z3cd4@z3cd0 z3cd5@z3cd2) ((lambda (z3cd9@ae* z3cda@s* z3cdb@m*) (z3cbc@match (z2dc3@stx-expr z3cc1@e) z3cc2@p z3cdb@m* z3cda@s* z3cd9@ae* z3cc6@r)) z3cd5@z3cd2 z3cd4@z3cd0 z3cd3@z3cce)))) (if (z295a@z284b@annotation? z3cc1@e) (z3cbc@match (z295c@z284f@annotation-expression z3cc1@e) z3cc2@p z3cc3@m* z3cc4@s* z3cc5@ae* z3cc6@r) (z3cba@match* z3cc1@e z3cc2@p z3cc3@m* z3cc4@s* z3cc5@ae* z3cc6@r)))))))) (lambda (z3cbd@e z3cbe@p) (z3cbc@match z3cbd@e z3cbe@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! z2ffe@ellipsis? (lambda (z3d91@x) (and (z2df7@id? z3d91@x) (z2dfd@free-id=? z3d91@x (z2f86@scheme-stx '...))))) (set! z3000@underscore? (lambda (z3d93@x) (and (z2df7@id? z3d93@x) (z2dfd@free-id=? z3d93@x (z2f86@scheme-stx '_))))) (set! z3002@verify-literals (lambda (z3d95@lits z3d96@expr) (for-each (lambda (z3d99@x) (if (or (not (z2df7@id? z3d99@x)) (z2ffe@ellipsis? z3d99@x) (z3000@underscore? z3d99@x)) (z30ca@syntax-violation '#f '"invalid literal" z3d96@expr z3d99@x) (void))) z3d95@lits))) (set! z3004@syntax-case-transformer ((lambda () ((lambda (z3d9c@build-dispatch-call z3d9e@invalid-ids-error z3da0@gen-clause z3da2@gen-syntax-case) (begin (set! z3d9c@build-dispatch-call (lambda (z3e0d@pvars z3e0e@expr z3e0f@y z3e10@r z3e11@mr) ((lambda (z3e17@ids z3e18@levels) ((lambda (z3e1b@labels z3e1c@new-vars) ((lambda (z3e1f@body) (list '(primitive apply) (z2d65@z2ca5@build-lambda '#f z3e1c@new-vars z3e1f@body) z3e0f@y)) (z301e@chi-expr (z2de3@add-subst (z2dbb@make-full-rib z3e17@ids z3e1b@labels) z3e0e@expr) (append (map (lambda (z3e21@label z3e22@var z3e23@level) (cons z3e21@label (z2e11@make-binding 'syntax (cons z3e22@var z3e23@level)))) z3e1b@labels z3e1c@new-vars (map cdr z3e0d@pvars)) z3e10@r) z3e11@mr))) (map z2d8d@gen-label z3e17@ids) (map z2d89@gen-lexical z3e17@ids))) (map car z3e0d@pvars) (map cdr z3e0d@pvars)))) (set! z3d9e@invalid-ids-error (lambda (z3e01@id* z3e02@e z3e03@class) ((letrec ((z3e07@find (lambda (z3e09@id* z3e0a@ok*) (if (null? z3e09@id*) (z30ca@syntax-violation '#f '"invalid syntax" z3e02@e) (if (z2df7@id? (car z3e09@id*)) (if (z2e03@bound-id-member? (car z3e09@id*) z3e0a@ok*) (z30c6@syntax-error (car z3e09@id*) '"duplicate " z3e03@class) (z3e07@find (cdr z3e09@id*) (cons (car z3e09@id*) z3e0a@ok*))) (z30c6@syntax-error (car z3e09@id*) '"invalid " z3e03@class)))))) z3e07@find) z3e01@id* '()))) (set! z3da0@gen-clause (lambda (z3dd9@x z3dda@keys z3ddb@clauses z3ddc@r z3ddd@mr z3dde@pat z3ddf@fender z3de0@expr) (call-with-values (lambda () (z2ffa@convert-pattern z3dde@pat z3dda@keys)) (lambda (z3ded@z3dea z3dee@z3dec) ((lambda (z3df1@pvars z3df2@p) (if (not (z2e01@distinct-bound-ids? (map car z3df1@pvars))) (z3d9e@invalid-ids-error (map car z3df1@pvars) z3dde@pat '"pattern variable") (if (not (for-all (lambda (z3df5@x) (not (z2ffe@ellipsis? (car z3df5@x)))) z3df1@pvars)) (z30ca@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" z3dde@pat) ((lambda (z3df7@y) ((lambda (z3df9@test) ((lambda (z3dfb@conseq) ((lambda (z3dfd@altern) (list (z2d65@z2ca5@build-lambda '#f (list z3df7@y) (list 'if z3df9@test z3dfb@conseq z3dfd@altern)) (list '(primitive syntax-dispatch) z3dd9@x (list 'quote z3df2@p)))) (z3da2@gen-syntax-case z3dd9@x z3dda@keys z3ddb@clauses z3ddc@r z3ddd@mr))) (z3d9c@build-dispatch-call z3df1@pvars z3de0@expr z3df7@y z3ddc@r z3ddd@mr))) (if (eq? z3ddf@fender '#t) z3df7@y ((lambda (z3dff@call) (list 'if z3df7@y z3dff@call (list 'quote '#f))) (z3d9c@build-dispatch-call z3df1@pvars z3ddf@fender z3df7@y z3ddc@r z3ddd@mr))))) (z2d89@gen-lexical 'tmp))))) z3dee@z3dec z3ded@z3dea))))) (set! z3da2@gen-syntax-case (lambda (z3db7@x z3db8@keys z3db9@clauses z3dba@r z3dbb@mr) (if (null? z3db9@clauses) (list '(primitive syntax-error) z3db7@x) ((lambda (z3dc1@t) ((lambda (z3dc3@ls/false) (if z3dc3@ls/false (apply (lambda (z3dc5@pat z3dc6@expr) (if (and (z2df7@id? z3dc5@pat) (not (z2e03@bound-id-member? z3dc5@pat z3db8@keys)) (not (z2ffe@ellipsis? z3dc5@pat))) (if (z2dfd@free-id=? z3dc5@pat (z2f86@scheme-stx '_)) (z301e@chi-expr z3dc6@expr z3dba@r z3dbb@mr) ((lambda (z3dc9@lab z3dca@lex) ((lambda (z3dcd@body) (list (z2d65@z2ca5@build-lambda '#f (list z3dca@lex) z3dcd@body) z3db7@x)) (z301e@chi-expr (z2de3@add-subst (z2dbb@make-full-rib (list z3dc5@pat) (list z3dc9@lab)) z3dc6@expr) (cons (cons z3dc9@lab (z2e11@make-binding 'syntax (cons z3dca@lex '0))) z3dba@r) z3dbb@mr))) (z2d8d@gen-label z3dc5@pat) (z2d89@gen-lexical z3dc5@pat))) (z3da0@gen-clause z3db7@x z3db8@keys (cdr z3db9@clauses) z3dba@r z3dbb@mr z3dc5@pat '#t z3dc6@expr))) z3dc3@ls/false) ((lambda (z3dcf@t) ((lambda (z3dd1@ls/false) (if z3dd1@ls/false (apply (lambda (z3dd3@pat z3dd4@fender z3dd5@expr) (z3da0@gen-clause z3db7@x z3db8@keys (cdr z3db9@clauses) z3dba@r z3dbb@mr z3dd3@pat z3dd4@fender z3dd5@expr)) z3dd1@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3dcf@t))) (z2ffc@syntax-dispatch z3dcf@t '(any any any)))) z3dc1@t))) (z2ffc@syntax-dispatch z3dc1@t '(any any)))) (car z3db9@clauses))))) (lambda (z3da3@e z3da4@r z3da5@mr) ((lambda (z3da9@t) ((lambda (z3dab@ls/false) (if z3dab@ls/false (apply (lambda (z3dad@expr z3dae@keys z3daf@clauses) (begin (z3002@verify-literals z3dae@keys z3da3@e) ((lambda (z3db3@x) ((lambda (z3db5@body) (list (z2d65@z2ca5@build-lambda '#f (list z3db3@x) z3db5@body) (z301e@chi-expr z3dad@expr z3da4@r z3da5@mr))) (z3da2@gen-syntax-case z3db3@x z3dae@keys z3daf@clauses z3da4@r z3da5@mr))) (z2d89@gen-lexical 'tmp)))) z3dab@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3da9@t))) (z2ffc@syntax-dispatch z3da9@t '(_ any each-any . each-any)))) z3da3@e)))) '#f '#f '#f '#f)))) (set! z3006@ellipsis-map (lambda (z3e27@proc z3e28@ls . z3e2b@ls*) ((lambda (z3e2e@who) (begin (set! z3e2e@who '...) (begin (if (not (list? z3e28@ls)) (assertion-violation z3e2e@who '"not a list" z3e28@ls) (void)) (if (not (null? z3e2b@ls*)) ((lambda (z3e2f@n) (for-each (lambda (z3e31@x) (begin (if (not (list? z3e31@x)) (assertion-violation z3e2e@who '"not a list" z3e31@x) (void)) (if (not (= (length z3e31@x) z3e2f@n)) (assertion-violation z3e2e@who '"length mismatch" z3e28@ls z3e31@x) (void)))) z3e2b@ls*)) (length z3e28@ls)) (void)) (apply map z3e27@proc z3e28@ls z3e2b@ls*)))) '#f))) (set! z3008@syntax-transformer ((lambda () ((lambda (z3e34@gen-syntax z3e36@gen-ref z3e38@gen-append z3e3a@gen-mappend z3e3c@gen-map z3e3e@gen-cons z3e40@gen-vector z3e42@regen) (begin (set! z3e34@gen-syntax (lambda (z3eab@src z3eac@e z3ead@r z3eae@maps z3eaf@ellipsis? z3eb0@vec?) ((lambda (z3eb7@t) ((lambda (z3eb9@ls/false) (if (and z3eb9@ls/false (apply (lambda (z3ebb@dots) (z3eaf@ellipsis? z3ebb@dots)) z3eb9@ls/false)) (apply (lambda (z3ebd@dots) (z30ca@syntax-violation '#f '"misplaced ellipsis in syntax form" z3eab@src)) z3eb9@ls/false) ((lambda (z3ebf@t) ((lambda (z3ec1@ls/false) (if (and z3ec1@ls/false (apply (lambda (z3ec3@id) (z2df7@id? z3ec3@id)) z3ec1@ls/false)) (apply (lambda (z3ec5@id) ((lambda (z3ec7@label) ((lambda (z3ec9@b) ((lambda () (if (eq? (z2e13@binding-type z3ec9@b) 'syntax) (call-with-values (lambda () ((lambda (z3ecf@var.lev) (z3e36@gen-ref z3eab@src (car z3ecf@var.lev) (cdr z3ecf@var.lev) z3eae@maps)) (z2e15@binding-value z3ec9@b))) (lambda (z3ed1@z3ecc z3ed2@z3ece) ((lambda (z3ed5@maps z3ed6@var) (values (list 'ref z3ed6@var) z3ed5@maps)) z3ed2@z3ece z3ed1@z3ecc))) (values (list 'quote z3eac@e) z3eae@maps))))) (z2e0f@label->binding z3ec7@label z3ead@r))) (z2e0d@id->label z3eac@e))) z3ec1@ls/false) ((lambda (z3ed9@t) ((lambda (z3edb@ls/false) (if (and z3edb@ls/false (apply (lambda (z3edd@dots z3ede@e) (z3eaf@ellipsis? z3edd@dots)) z3edb@ls/false)) (apply (lambda (z3ee1@dots z3ee2@e) (if z3eb0@vec? (z30ca@syntax-violation '#f '"misplaced ellipsis in syntax form" z3eab@src) (z3e34@gen-syntax z3eab@src z3ee2@e z3ead@r z3eae@maps (lambda (z3ee5@x) '#f) '#f))) z3edb@ls/false) ((lambda (z3ee7@t) ((lambda (z3ee9@ls/false) (if (and z3ee9@ls/false (apply (lambda (z3eeb@x z3eec@dots z3eed@y) (z3eaf@ellipsis? z3eec@dots)) z3ee9@ls/false)) (apply (lambda (z3ef1@x z3ef2@dots z3ef3@y) ((letrec ((z3ef7@f (lambda (z3ef9@y z3efa@k) ((lambda (z3efd@t) ((lambda (z3eff@ls/false) (if z3eff@ls/false (apply (lambda () (z3efa@k z3eae@maps)) z3eff@ls/false) ((lambda (z3f01@t) ((lambda (z3f03@ls/false) (if (and z3f03@ls/false (apply (lambda (z3f05@dots z3f06@y) (z3eaf@ellipsis? z3f05@dots)) z3f03@ls/false)) (apply (lambda (z3f09@dots z3f0a@y) (z3ef7@f z3f0a@y (lambda (z3f0d@maps) (call-with-values (lambda () (z3efa@k (cons '() z3f0d@maps))) (lambda (z3f13@z3f10 z3f14@z3f12) ((lambda (z3f17@maps z3f18@x) (if (null? (car z3f17@maps)) (z30ca@syntax-violation '#f '"extra ellipsis in syntax form" z3eab@src) (values (z3e3a@gen-mappend z3f18@x (car z3f17@maps)) (cdr z3f17@maps)))) z3f14@z3f12 z3f13@z3f10)))))) z3f03@ls/false) ((lambda (z3f1b@t) ((lambda (z3f1d@ls/false) (if z3f1d@ls/false (apply (lambda () (call-with-values (lambda () (z3e34@gen-syntax z3eab@src z3ef9@y z3ead@r z3eae@maps z3eaf@ellipsis? z3eb0@vec?)) (lambda (z3f23@z3f20 z3f24@z3f22) ((lambda (z3f27@maps z3f28@y) (call-with-values (lambda () (z3efa@k z3f27@maps)) (lambda (z3f2f@z3f2c z3f30@z3f2e) ((lambda (z3f33@maps z3f34@x) (values (z3e38@gen-append z3f34@x z3f28@y) z3f33@maps)) z3f30@z3f2e z3f2f@z3f2c)))) z3f24@z3f22 z3f23@z3f20)))) z3f1d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3f1b@t))) (z2ffc@syntax-dispatch z3f1b@t '_))) z3f01@t))) (z2ffc@syntax-dispatch z3f01@t '(any . any)))) z3efd@t))) (z2ffc@syntax-dispatch z3efd@t '()))) z3ef9@y)))) z3ef7@f) z3ef3@y (lambda (z3f37@maps) (call-with-values (lambda () (z3e34@gen-syntax z3eab@src z3ef1@x z3ead@r (cons '() z3f37@maps) z3eaf@ellipsis? '#f)) (lambda (z3f3d@z3f3a z3f3e@z3f3c) ((lambda (z3f41@maps z3f42@x) (if (null? (car z3f41@maps)) (z30ca@syntax-violation '#f '"extra ellipsis in syntax form" z3eab@src) (values (z3e3c@gen-map z3f42@x (car z3f41@maps)) (cdr z3f41@maps)))) z3f3e@z3f3c z3f3d@z3f3a)))))) z3ee9@ls/false) ((lambda (z3f45@t) ((lambda (z3f47@ls/false) (if z3f47@ls/false (apply (lambda (z3f49@x z3f4a@y) (call-with-values (lambda () (z3e34@gen-syntax z3eab@src z3f49@x z3ead@r z3eae@maps z3eaf@ellipsis? '#f)) (lambda (z3f51@z3f4e z3f52@z3f50) ((lambda (z3f55@maps z3f56@xnew) (call-with-values (lambda () (z3e34@gen-syntax z3eab@src z3f4a@y z3ead@r z3f55@maps z3eaf@ellipsis? z3eb0@vec?)) (lambda (z3f5d@z3f5a z3f5e@z3f5c) ((lambda (z3f61@maps z3f62@ynew) (values (z3e3e@gen-cons z3eac@e z3f49@x z3f4a@y z3f56@xnew z3f62@ynew) z3f61@maps)) z3f5e@z3f5c z3f5d@z3f5a)))) z3f52@z3f50 z3f51@z3f4e)))) z3f47@ls/false) ((lambda (z3f65@t) ((lambda (z3f67@ls/false) (if z3f67@ls/false (apply (lambda (z3f69@ls) (call-with-values (lambda () (z3e34@gen-syntax z3eab@src z3f69@ls z3ead@r z3eae@maps z3eaf@ellipsis? '#t)) (lambda (z3f6f@z3f6c z3f70@z3f6e) ((lambda (z3f73@maps z3f74@lsnew) (values (z3e40@gen-vector z3eac@e z3f69@ls z3f74@lsnew) z3f73@maps)) z3f70@z3f6e z3f6f@z3f6c)))) z3f67@ls/false) ((lambda (z3f77@t) ((lambda (z3f79@ls/false) (if z3f79@ls/false (apply (lambda () (values (list 'quote z3eac@e) z3eae@maps)) z3f79@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3f77@t))) (z2ffc@syntax-dispatch z3f77@t '_))) z3f65@t))) (z2ffc@syntax-dispatch z3f65@t '#(vector each-any)))) z3f45@t))) (z2ffc@syntax-dispatch z3f45@t '(any . any)))) z3ee7@t))) (z2ffc@syntax-dispatch z3ee7@t '(any any . any)))) z3ed9@t))) (z2ffc@syntax-dispatch z3ed9@t '(any any)))) z3ebf@t))) (z2ffc@syntax-dispatch z3ebf@t 'any))) z3eb7@t))) (z2ffc@syntax-dispatch z3eb7@t 'any))) z3eac@e))) (set! z3e36@gen-ref (lambda (z3e91@src z3e92@var z3e93@level z3e94@maps) (if (= z3e93@level '0) (values z3e92@var z3e94@maps) (if (null? z3e94@maps) (z30ca@syntax-violation '#f '"missing ellipsis in syntax form" z3e91@src) (call-with-values (lambda () (z3e36@gen-ref z3e91@src z3e92@var (- z3e93@level '1) (cdr z3e94@maps))) (lambda (z3e9d@z3e9a z3e9e@z3e9c) ((lambda (z3ea1@outer-maps z3ea2@outer-var) ((lambda (z3ea5@t) (if z3ea5@t ((lambda (z3ea7@b) (values (cdr z3ea7@b) z3e94@maps)) z3ea5@t) ((lambda (z3ea9@inner-var) (values z3ea9@inner-var (cons (cons (cons z3ea2@outer-var z3ea9@inner-var) (car z3e94@maps)) z3ea1@outer-maps))) (z2d89@gen-lexical 'tmp)))) (assq z3ea2@outer-var (car z3e94@maps)))) z3e9e@z3e9c z3e9d@z3e9a))))))) (set! z3e38@gen-append (lambda (z3e8d@x z3e8e@y) (if (fast-equal? z3e8e@y ''()) z3e8d@x (list 'append z3e8d@x z3e8e@y)))) (set! z3e3a@gen-mappend (lambda (z3e89@e z3e8a@map-env) (list 'apply '(primitive append) (z3e3c@gen-map z3e89@e z3e8a@map-env)))) (set! z3e3c@gen-map (lambda (z3e77@e z3e78@map-env) ((lambda (z3e7b@formals z3e7c@actuals) (if (eq? (car z3e77@e) 'ref) (car z3e7c@actuals) (if (for-all (lambda (z3e7f@x) (and (eq? (car z3e7f@x) 'ref) (memq (cadr z3e7f@x) z3e7b@formals))) (cdr z3e77@e)) ((lambda (z3e81@args) (cons 'map (cons (list 'primitive (car z3e77@e)) z3e81@args))) (map ((lambda (z3e83@r) (lambda (z3e85@x) (cdr (assq (cadr z3e85@x) z3e83@r)))) (map cons z3e7b@formals z3e7c@actuals)) (cdr z3e77@e))) (cons* 'map (list 'lambda z3e7b@formals z3e77@e) z3e7c@actuals)))) (map cdr z3e78@map-env) (map (lambda (z3e87@x) (list 'ref (car z3e87@x))) z3e78@map-env)))) (set! z3e3e@gen-cons (lambda (z3e67@e z3e68@x z3e69@y z3e6a@xnew z3e6b@ynew) ((lambda (z3e71@t) (if (memv z3e71@t '(quote)) (if (eq? (car z3e6a@xnew) 'quote) ((lambda (z3e73@xnew z3e74@ynew) (if (and (eq? z3e73@xnew z3e68@x) (eq? z3e74@ynew z3e69@y)) (list 'quote z3e67@e) (list 'quote (cons z3e73@xnew z3e74@ynew)))) (cadr z3e6a@xnew) (cadr z3e6b@ynew)) (if (null? (cadr z3e6b@ynew)) (list 'list z3e6a@xnew) (list 'cons z3e6a@xnew z3e6b@ynew))) (if (memv z3e71@t '(list)) (cons 'list (cons z3e6a@xnew (cdr z3e6b@ynew))) (list 'cons z3e6a@xnew z3e6b@ynew)))) (car z3e6b@ynew)))) (set! z3e40@gen-vector (lambda (z3e61@e z3e62@ls z3e63@lsnew) (if (eq? (car z3e63@lsnew) 'quote) (if (eq? (cadr z3e63@lsnew) z3e62@ls) (list 'quote z3e61@e) (list 'quote (list->vector (cadr z3e63@lsnew)))) (if (eq? (car z3e63@lsnew) 'list) (cons 'vector (cdr z3e63@lsnew)) (list 'list->vector z3e63@lsnew))))) (set! z3e42@regen (lambda (z3e5b@x) ((lambda (z3e5d@t) (if (memv z3e5d@t '(ref)) (cadr z3e5b@x) (if (memv z3e5d@t '(primitive)) (list 'primitive (cadr z3e5b@x)) (if (memv z3e5d@t '(quote)) (list 'quote (cadr z3e5b@x)) (if (memv z3e5d@t '(lambda)) (z2d65@z2ca5@build-lambda '#f (cadr z3e5b@x) (z3e42@regen (caddr z3e5b@x))) (if (memv z3e5d@t '(map)) ((lambda (z3e5f@ls) (cons '(primitive ellipsis-map) z3e5f@ls)) (map z3e42@regen (cdr z3e5b@x))) (cons (list 'primitive (car z3e5b@x)) (map z3e42@regen (cdr z3e5b@x))))))))) (car z3e5b@x)))) (lambda (z3e43@e z3e44@r z3e45@mr) ((lambda (z3e49@t) ((lambda (z3e4b@ls/false) (if z3e4b@ls/false (apply (lambda (z3e4d@x) (call-with-values (lambda () (z3e34@gen-syntax z3e43@e z3e4d@x z3e44@r '() z2ffe@ellipsis? '#f)) (lambda (z3e53@z3e50 z3e54@z3e52) ((lambda (z3e57@maps z3e58@e) (z3e42@regen z3e58@e)) z3e54@z3e52 z3e53@z3e50)))) z3e4b@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3e49@t))) (z2ffc@syntax-dispatch z3e49@t '(_ any)))) z3e43@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! z300a@core-macro-transformer (lambda (z3f7b@name) ((lambda (z3f7d@t) (if (memv z3f7d@t '(quote)) z2fac@quote-transformer (if (memv z3f7d@t '(lambda)) z2fb0@lambda-transformer (if (memv z3f7d@t '(case-lambda)) z2fae@case-lambda-transformer (if (memv z3f7d@t '(letrec)) z2f94@letrec-transformer (if (memv z3f7d@t '(letrec*)) z2f96@letrec*-transformer (if (memv z3f7d@t '(if)) z2fa4@if-transformer (if (memv z3f7d@t '(and)) z2fa6@and-transformer (if (memv z3f7d@t '(or)) z2fa8@or-transformer (if (memv z3f7d@t '(foreign-call)) z2ff8@foreign-call-transformer (if (memv z3f7d@t '(syntax-case)) z3004@syntax-case-transformer (if (memv z3f7d@t '(syntax)) z3008@syntax-transformer (if (memv z3f7d@t '(type-descriptor)) z2f9a@type-descriptor-transformer (if (memv z3f7d@t '(record-type-descriptor)) z2f9c@record-type-descriptor-transformer (if (memv z3f7d@t '(record-constructor-descriptor)) z2f9e@record-constructor-descriptor-transformer (if (memv z3f7d@t '(fluid-let-syntax)) z2f98@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" z3f7b@name))))))))))))))))) z3f7b@name))) (set! z300c@symbol-macro (lambda (z3f7f@x z3f80@set) ((lambda (z3f83@t) ((lambda (z3f85@ls/false) (if (and z3f85@ls/false (apply (lambda (z3f87@name) (and (z2df7@id? z3f87@name) (memq (z2df9@id->sym z3f87@name) z3f80@set))) z3f85@ls/false)) (apply (lambda (z3f89@name) (z2fb2@bless (list 'quote z3f89@name))) z3f85@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3f83@t))) (z2ffc@syntax-dispatch z3f83@t '(_ any)))) z3f7f@x))) (set! z300e@macro-transformer (lambda (z3f8b@x) (if (procedure? z3f8b@x) z3f8b@x (if (symbol? z3f8b@x) ((lambda (z3f8d@t) (if (memv z3f8d@t '(define-record-type)) z2ff0@define-record-type-macro (if (memv z3f8d@t '(define-struct)) z2fee@define-struct-macro (if (memv z3f8d@t '(include)) z2fe4@include-macro (if (memv z3f8d@t '(cond)) z2fe0@cond-macro (if (memv z3f8d@t '(let)) z2fb8@let-macro (if (memv z3f8d@t '(do)) z2fd8@do-macro (if (memv z3f8d@t '(or)) z2fdc@or-macro (if (memv z3f8d@t '(and)) z2fde@and-macro (if (memv z3f8d@t '(let*)) z2fda@let*-macro (if (memv z3f8d@t '(let-values)) z2fba@let-values-macro (if (memv z3f8d@t '(let*-values)) z2fbc@let*-values-macro (if (memv z3f8d@t '(syntax-rules)) z2fe8@syntax-rules-macro (if (memv z3f8d@t '(quasiquote)) z2fea@quasiquote-macro (if (memv z3f8d@t '(quasisyntax)) z2fec@quasisyntax-macro (if (memv z3f8d@t '(with-syntax)) z2fb4@with-syntax-macro (if (memv z3f8d@t '(when)) z2fa0@when-macro (if (memv z3f8d@t '(unless)) z2fa2@unless-macro (if (memv z3f8d@t '(case)) z2faa@case-macro (if (memv z3f8d@t '(identifier-syntax)) z2fd6@identifier-syntax-macro (if (memv z3f8d@t '(time)) z2fce@time-macro (if (memv z3f8d@t '(delay)) z2fd0@delay-macro (if (memv z3f8d@t '(assert)) z2fd2@assert-macro (if (memv z3f8d@t '(endianness)) z2fd4@endianness-macro (if (memv z3f8d@t '(guard)) z2fca@guard-macro (if (memv z3f8d@t '(define-enumeration)) z2fcc@define-enumeration-macro (if (memv z3f8d@t '(trace-lambda)) z2fbe@trace-lambda-macro (if (memv z3f8d@t '(trace-define)) z2fc0@trace-define-macro (if (memv z3f8d@t '(trace-define-syntax)) z2fc2@trace-define-syntax-macro (if (memv z3f8d@t '(trace-let-syntax)) z2fc6@trace-let-syntax-macro (if (memv z3f8d@t '(trace-letrec-syntax)) z2fc8@trace-letrec-syntax-macro (if (memv z3f8d@t '(define-condition-type)) z2ff2@define-condition-type-macro (if (memv z3f8d@t '(parameterize)) z2ff6@parameterize-macro (if (memv z3f8d@t '(include-into)) z2fe6@include-into-macro (if (memv z3f8d@t '(eol-style)) (lambda (z3f8f@x) (z300c@symbol-macro z3f8f@x '(none lf cr crlf nel crnel ls))) (if (memv z3f8d@t '(error-handling-mode)) (lambda (z3f91@x) (z300c@symbol-macro z3f91@x '(ignore raise replace))) (if (memv z3f8d@t '(buffer-mode)) (lambda (z3f93@x) (z300c@symbol-macro z3f93@x '(none line block))) (if (memv z3f8d@t '(file-options)) z2d7c@file-options-macro (if (memv z3f8d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) z2ff4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" z3f8b@x)))))))))))))))))))))))))))))))))))))))) z3f8b@x) (error 'core-macro-transformer '"BUG: invalid macro" z3f8b@x))))) (set! z3010@local-macro-transformer (lambda (z3f95@x) (car z3f95@x))) (set! z3012@do-macro-call (lambda (z3f97@transformer z3f98@expr) ((lambda (z3f9b@out) (begin ((letrec ((z3f9d@f (lambda (z3f9f@x) (if (not (z2dc1@stx? z3f9f@x)) (if (pair? z3f9f@x) (begin (z3f9d@f (car z3f9f@x)) (z3f9d@f (cdr z3f9f@x))) (if (vector? z3f9f@x) (vector-for-each z3f9d@f z3f9f@x) (if (symbol? z3f9f@x) (z30ca@syntax-violation '#f '"raw symbol encountered in output of macro" z3f98@expr z3f9f@x) (void)))) (void))))) z3f9d@f) z3f9b@out) (z2de1@add-mark (z2dd7@gen-mark) z3f9b@out z3f98@expr))) (z3f97@transformer (z2de1@add-mark z2dd9@anti-mark z3f98@expr '#f))))) (set! z3014@chi-macro (lambda (z3fa1@p z3fa2@e) (z3012@do-macro-call (z300e@macro-transformer z3fa1@p) z3fa2@e))) (set! z3016@chi-local-macro (lambda (z3fa5@p z3fa6@e) (z3012@do-macro-call (z3010@local-macro-transformer z3fa5@p) z3fa6@e))) (set! z3018@chi-global-macro (lambda (z3fa9@p z3faa@e) ((lambda (z3fad@lib z3fae@loc) (begin (z2c2e@z2a7a@visit-library z3fad@lib) ((lambda (z3fb1@x) ((lambda (z3fb3@transformer) (z3012@do-macro-call z3fb3@transformer z3faa@e)) (if (procedure? z3fb1@x) z3fb1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" z3fb1@x)))) (symbol-value z3fae@loc)))) (car z3fa9@p) (cdr z3fa9@p)))) (set! z301a@chi-expr* (lambda (z3fb5@e* z3fb6@r z3fb7@mr) (if (null? z3fb5@e*) '() ((lambda (z3fbb@e) (cons z3fbb@e (z301a@chi-expr* (cdr z3fb5@e*) z3fb6@r z3fb7@mr))) (z301e@chi-expr (car z3fb5@e*) z3fb6@r z3fb7@mr))))) (set! z301c@chi-application (lambda (z3fbd@e z3fbe@r z3fbf@mr) ((lambda (z3fc3@t) ((lambda (z3fc5@ls/false) (if z3fc5@ls/false (apply (lambda (z3fc7@rator z3fc8@rands) ((lambda (z3fcb@rator) (cons z3fcb@rator (z301a@chi-expr* z3fc8@rands z3fbe@r z3fbf@mr))) (z301e@chi-expr z3fc7@rator z3fbe@r z3fbf@mr))) z3fc5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3fc3@t))) (z2ffc@syntax-dispatch z3fc3@t '(any . each-any)))) z3fbd@e))) (set! z301e@chi-expr (lambda (z3fcd@e z3fce@r z3fcf@mr) (call-with-values (lambda () (z2e19@syntax-type z3fcd@e z3fce@r)) (lambda (z3fd9@z3fd4 z3fda@z3fd6 z3fdb@z3fd8) ((lambda (z3fdf@kwd z3fe0@value z3fe1@type) ((lambda (z3fe5@t) (if (memv z3fe5@t '(core-macro)) ((lambda (z3fe7@transformer) (z3fe7@transformer z3fcd@e z3fce@r z3fcf@mr)) (z300a@core-macro-transformer z3fe0@value)) (if (memv z3fe5@t '(global)) ((lambda (z3fe9@lib) ((lambda (z3feb@loc) ((lambda () (begin ((z305e@inv-collector) z3fe9@lib) z3feb@loc)))) (cdr z3fe0@value))) (car z3fe0@value)) (if (memv z3fe5@t '(core-prim)) ((lambda (z3fed@name) (list 'primitive z3fed@name)) z3fe0@value) (if (memv z3fe5@t '(call)) (z301c@chi-application z3fcd@e z3fce@r z3fcf@mr) (if (memv z3fe5@t '(lexical)) ((lambda (z3fef@lex) z3fef@lex) (z2f88@lexical-var z3fe0@value)) (if (memv z3fe5@t '(global-macro global-macro!)) (z301e@chi-expr (z3018@chi-global-macro z3fe0@value z3fcd@e) z3fce@r z3fcf@mr) (if (memv z3fe5@t '(local-macro local-macro!)) (z301e@chi-expr (z3016@chi-local-macro z3fe0@value z3fcd@e) z3fce@r z3fcf@mr) (if (memv z3fe5@t '(macro macro!)) (z301e@chi-expr (z3014@chi-macro z3fe0@value z3fcd@e) z3fce@r z3fcf@mr) (if (memv z3fe5@t '(constant)) ((lambda (z3ff1@datum) (list 'quote z3ff1@datum)) z3fe0@value) (if (memv z3fe5@t '(set!)) (z3020@chi-set! z3fcd@e z3fce@r z3fcf@mr) (if (memv z3fe5@t '(begin)) ((lambda (z3ff3@t) ((lambda (z3ff5@ls/false) (if z3ff5@ls/false (apply (lambda (z3ff7@x z3ff8@x*) (z2d68@z2cd7@build-sequence '#f (z301a@chi-expr* (cons z3ff7@x z3ff8@x*) z3fce@r z3fcf@mr))) z3ff5@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3ff3@t))) (z2ffc@syntax-dispatch z3ff3@t '(_ any . each-any)))) z3fcd@e) (if (memv z3fe5@t '(let-syntax letrec-syntax)) ((lambda (z3ffb@t) ((lambda (z3ffd@ls/false) (if (and z3ffd@ls/false (apply (lambda (z3fff@xlhs* z4000@xrhs* z4001@xbody z4002@xbody*) (if (not (z2dff@valid-bound-ids? z3fff@xlhs*)) (z30ca@syntax-violation '#f '"invalid identifiers" z3fcd@e) (void))) z3ffd@ls/false)) (apply (lambda (z4007@xlhs* z4008@xrhs* z4009@xbody z400a@xbody*) ((lambda (z400f@xlab*) ((lambda (z4011@xrib) ((lambda (z4013@xb*) ((lambda () (z2d68@z2cd7@build-sequence '#f (z301a@chi-expr* (map (lambda (z4015@x) (z2de3@add-subst z4011@xrib z4015@x)) (cons z4009@xbody z400a@xbody*)) (append (map cons z400f@xlab* z4013@xb*) z3fce@r) (append (map cons z400f@xlab* z4013@xb*) z3fcf@mr)))))) (map (lambda (z4017@x) (z2e2f@make-eval-transformer (z3050@expand-transformer (if (eq? z3fe1@type 'let-syntax) z4017@x (z2de3@add-subst z4011@xrib z4017@x)) z3fcf@mr))) z4008@xrhs*))) (z2dbb@make-full-rib z4007@xlhs* z400f@xlab*))) (map z2d8d@gen-label z4007@xlhs*))) z3ffd@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z3ffb@t))) (z2ffc@syntax-dispatch z3ffb@t '(_ #(each (any any)) any . each-any)))) z3fcd@e) (if (memv z3fe5@t '(displaced-lexical)) (z30ca@syntax-violation '#f '"identifier out of context" z3fcd@e) (if (memv z3fe5@t '(syntax)) (z30ca@syntax-violation '#f '"reference to pattern variable outside a syntax form" z3fcd@e) (if (memv z3fe5@t '(define define-syntax module import library)) (z30ca@syntax-violation '#f (string-append ((lambda (z4019@t) (if (memv z4019@t '(define)) '"a definition" (if (memv z4019@t '(define-syntax)) '"a define-syntax" (if (memv z4019@t '(module)) '"a module definition" (if (memv z4019@t '(library)) '"a library definition" (if (memv z4019@t '(import)) '"an import declaration" (if (memv z4019@t '(export)) '"an export declaration" '"a non-expression"))))))) z3fe1@type) '" was found where an expression was expected") z3fcd@e) (if (memv z3fe5@t '(mutable)) (z30ca@syntax-violation '#f '"attempt to reference an unexportable variable" z3fcd@e) (z30ca@syntax-violation '#f '"invalid expression" z3fcd@e)))))))))))))))))) z3fe1@type)) z3fdb@z3fd8 z3fda@z3fd6 z3fd9@z3fd4))))) (set! z3020@chi-set! (lambda (z401b@e z401c@r z401d@mr) ((lambda (z4021@t) ((lambda (z4023@ls/false) (if (and z4023@ls/false (apply (lambda (z4025@x z4026@v) (z2df7@id? z4025@x)) z4023@ls/false)) (apply (lambda (z4029@x z402a@v) (call-with-values (lambda () (z2e19@syntax-type z4029@x z401c@r)) (lambda (z4033@z402e z4034@z4030 z4035@z4032) ((lambda (z4039@kwd z403a@value z403b@type) ((lambda (z403f@t) (if (memv z403f@t '(lexical)) (begin (z2f8c@set-lexical-mutable! z403a@value '#t) (list 'set! (z2f88@lexical-var z403a@value) (z301e@chi-expr z402a@v z401c@r z401d@mr))) (if (memv z403f@t '(core-prim)) (z30ca@syntax-violation '#f '"cannot modify imported core primitive" z401b@e) (if (memv z403f@t '(global)) (z30ca@syntax-violation '#f '"attempt to modify imported binding" z401b@e) (if (memv z403f@t '(global-macro!)) (z301e@chi-expr (z3018@chi-global-macro z403a@value z401b@e) z401c@r z401d@mr) (if (memv z403f@t '(local-macro!)) (z301e@chi-expr (z3016@chi-local-macro z403a@value z401b@e) z401c@r z401d@mr) (if (memv z403f@t '(mutable)) (z30ca@syntax-violation '#f '"attempt to assign to an unexportable variable" z401b@e) (z30ca@syntax-violation '#f '"invalid syntax" z401b@e)))))))) z403b@type)) z4035@z4032 z4034@z4030 z4033@z402e)))) z4023@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4021@t))) (z2ffc@syntax-dispatch z4021@t '(_ any any)))) z401b@e))) (set! z3022@verify-formals (lambda (z4041@fmls z4042@stx) ((lambda (z4045@t) ((lambda (z4047@ls/false) (if z4047@ls/false (apply (lambda (z4049@x*) (if (not (z2dff@valid-bound-ids? z4049@x*)) (z2fb6@invalid-fmls-error z4042@stx z4041@fmls) (void))) z4047@ls/false) ((lambda (z404b@t) ((lambda (z404d@ls/false) (if z404d@ls/false (apply (lambda (z404f@x* z4050@x) (if (not (z2dff@valid-bound-ids? (cons z4050@x z404f@x*))) (z2fb6@invalid-fmls-error z4042@stx z4041@fmls) (void))) z404d@ls/false) ((lambda (z4053@t) ((lambda (z4055@ls/false) (if z4055@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid syntax" z4042@stx)) z4055@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4053@t))) (z2ffc@syntax-dispatch z4053@t '_))) z404b@t))) (z2ffc@syntax-dispatch z404b@t '#(each+ any () any)))) z4045@t))) (z2ffc@syntax-dispatch z4045@t 'each-any))) z4041@fmls))) (set! z3024@chi-lambda-clause (lambda (z4057@stx z4058@fmls z4059@body* z405a@r z405b@mr) ((lambda (z4061@t) ((lambda (z4063@ls/false) (if z4063@ls/false (apply (lambda (z4065@x*) (begin (z3022@verify-formals z4058@fmls z4057@stx) ((lambda (z4067@lex* z4068@lab*) (values z4067@lex* (z3034@chi-internal (z2de3@add-subst (z2dbb@make-full-rib z4065@x* z4068@lab*) z4059@body*) (z2f90@add-lexicals z4068@lab* z4067@lex* z405a@r) z405b@mr))) (map z2d89@gen-lexical z4065@x*) (map z2d8d@gen-label z4065@x*)))) z4063@ls/false) ((lambda (z406b@t) ((lambda (z406d@ls/false) (if z406d@ls/false (apply (lambda (z406f@x* z4070@x) (begin (z3022@verify-formals z4058@fmls z4057@stx) ((lambda (z4073@lex* z4074@lab* z4075@lex z4076@lab) (values (append z4073@lex* z4075@lex) (z3034@chi-internal (z2de3@add-subst (z2dbb@make-full-rib (cons z4070@x z406f@x*) (cons z4076@lab z4074@lab*)) z4059@body*) (z2f90@add-lexicals (cons z4076@lab z4074@lab*) (cons z4075@lex z4073@lex*) z405a@r) z405b@mr))) (map z2d89@gen-lexical z406f@x*) (map z2d8d@gen-label z406f@x*) (z2d89@gen-lexical z4070@x) (z2d8d@gen-label z4070@x)))) z406d@ls/false) ((lambda (z407b@t) ((lambda (z407d@ls/false) (if z407d@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid syntax" z4058@fmls)) z407d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z407b@t))) (z2ffc@syntax-dispatch z407b@t '_))) z406b@t))) (z2ffc@syntax-dispatch z406b@t '#(each+ any () any)))) z4061@t))) (z2ffc@syntax-dispatch z4061@t 'each-any))) z4058@fmls))) (set! z3026@chi-lambda-clause* (lambda (z407f@stx z4080@fmls* z4081@body** z4082@r z4083@mr) (if (null? z4080@fmls*) (values '() '()) (call-with-values (lambda () (z3024@chi-lambda-clause z407f@stx (car z4080@fmls*) (car z4081@body**) z4082@r z4083@mr)) (lambda (z408d@z408a z408e@z408c) ((lambda (z4091@b z4092@a) (call-with-values (lambda () (z3026@chi-lambda-clause* z407f@stx (cdr z4080@fmls*) (cdr z4081@body**) z4082@r z4083@mr)) (lambda (z4099@z4096 z409a@z4098) ((lambda (z409d@b* z409e@a*) (values (cons z4092@a z409e@a*) (cons z4091@b z409d@b*))) z409a@z4098 z4099@z4096)))) z408e@z408c z408d@z408a)))))) (set! z3028@chi-defun (lambda (z40a1@x z40a2@r z40a3@mr) ((lambda (z40a7@fmls z40a8@body*) (call-with-values (lambda () (z3024@chi-lambda-clause z40a7@fmls z40a7@fmls z40a8@body* z40a2@r z40a3@mr)) (lambda (z40af@z40ac z40b0@z40ae) ((lambda (z40b3@body z40b4@fmls) (z2d65@z2ca5@build-lambda '#f z40b4@fmls z40b3@body)) z40b0@z40ae z40af@z40ac)))) (car z40a1@x) (cdr z40a1@x)))) (set! z302a@chi-rhs (lambda (z40b7@rhs z40b8@r z40b9@mr) ((lambda (z40bd@t) (if (memv z40bd@t '(defun)) (z3028@chi-defun (cdr z40b7@rhs) z40b8@r z40b9@mr) (if (memv z40bd@t '(expr)) ((lambda (z40bf@expr) (z301e@chi-expr z40bf@expr z40b8@r z40b9@mr)) (cdr z40b7@rhs)) (if (memv z40bd@t '(top-expr)) ((lambda (z40c1@expr) (z2d68@z2cd7@build-sequence '#f (list (z301e@chi-expr z40c1@expr z40b8@r z40b9@mr) (z2d69@z2cd9@build-void)))) (cdr z40b7@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" z40b7@rhs))))) (car z40b7@rhs)))) (set! z302c@expand-interaction-rhs*/init* (lambda (z40c3@lhs* z40c4@rhs* z40c5@init* z40c6@r z40c7@mr) ((letrec ((z40cd@f (lambda (z40cf@lhs* z40d0@rhs*) (if (null? z40cf@lhs*) (map (lambda (z40d3@x) (z301e@chi-expr z40d3@x z40c6@r z40c7@mr)) z40c5@init*) ((lambda (z40d5@lhs z40d6@rhs) ((lambda (z40d9@t) (if (memv z40d9@t '(defun)) ((lambda (z40db@rhs) (cons (list 'set! z40d5@lhs z40db@rhs) (z40cd@f (cdr z40cf@lhs*) (cdr z40d0@rhs*)))) (z3028@chi-defun (cdr z40d6@rhs) z40c6@r z40c7@mr)) (if (memv z40d9@t '(expr)) ((lambda (z40dd@rhs) (cons (list 'set! z40d5@lhs z40dd@rhs) (z40cd@f (cdr z40cf@lhs*) (cdr z40d0@rhs*)))) (z301e@chi-expr (cdr z40d6@rhs) z40c6@r z40c7@mr)) (if (memv z40d9@t '(top-expr)) ((lambda (z40df@e) (cons z40df@e (z40cd@f (cdr z40cf@lhs*) (cdr z40d0@rhs*)))) (z301e@chi-expr (cdr z40d6@rhs) z40c6@r z40c7@mr)) (error 'expand-interaction '"invallid" z40d6@rhs))))) (car z40d6@rhs))) (car z40cf@lhs*) (car z40d0@rhs*)))))) z40cd@f) z40c3@lhs* z40c4@rhs*))) (set! z302e@chi-rhs* (lambda (z40e1@rhs* z40e2@r z40e3@mr) ((letrec ((z40e7@f (lambda (z40e9@ls) (if (null? z40e9@ls) '() ((lambda (z40eb@a) (cons z40eb@a (z40e7@f (cdr z40e9@ls)))) (z302a@chi-rhs (car z40e9@ls) z40e2@r z40e3@mr)))))) z40e7@f) z40e1@rhs*))) (set! z3030@find-bound=? (lambda (z40ed@x z40ee@lhs* z40ef@rhs*) (if (null? z40ee@lhs*) '#f (if (z2dfb@bound-id=? z40ed@x (car z40ee@lhs*)) (car z40ef@rhs*) (z3030@find-bound=? z40ed@x (cdr z40ee@lhs*) (cdr z40ef@rhs*)))))) (set! z3032@find-dups (lambda (z40f3@ls) ((letrec ((z40f5@f (lambda (z40f7@ls z40f8@dups) (if (null? z40f7@ls) z40f8@dups ((lambda (z40fb@t) (if z40fb@t ((lambda (z40fd@x) (z40f5@f (cdr z40f7@ls) (cons (list (car z40f7@ls) z40fd@x) z40f8@dups))) z40fb@t) (z40f5@f (cdr z40f7@ls) z40f8@dups))) (z3030@find-bound=? (car z40f7@ls) (cdr z40f7@ls) (cdr z40f7@ls))))))) z40f5@f) z40f3@ls '()))) (set! z3034@chi-internal (lambda (z40ff@e* z4100@r z4101@mr) ((lambda (z4105@rib) (call-with-values (lambda () (z304e@chi-body* (map (lambda (z4117@x) (z2de3@add-subst z4105@rib z4117@x)) (z2df5@syntax->list z40ff@e*)) z4100@r z4101@mr '() '() '() '() '() z4105@rib '#f)) (lambda (z4119@z4108 z411a@z410a z411b@z410c z411c@z410e z411d@z4110 z411e@z4112 z411f@z4114 z4120@z4116) ((lambda (z4129@_exp* z412a@kwd* z412b@mod** z412c@rhs* z412d@lex* z412e@mr z412f@r z4130@e*) (begin (if (null? z4130@e*) (z30ca@syntax-violation '#f '"no expression in body" z4130@e*) (void)) ((lambda (z4139@init*) ((lambda (z413b@rhs*) ((lambda () (z2d6b@z2cdd@build-letrec* '#f (reverse z412d@lex*) (reverse z413b@rhs*) (z2d68@z2cd7@build-sequence '#f z4139@init*))))) (z302e@chi-rhs* z412c@rhs* z412f@r z412e@mr))) (z301a@chi-expr* (append (apply append (reverse z412b@mod**)) z4130@e*) z412f@r z412e@mr)))) z4120@z4116 z411f@z4114 z411e@z4112 z411d@z4110 z411c@z410e z411b@z410c z411a@z410a z4119@z4108)))) (z2daf@make-empty-rib)))) (set! z3036@parse-module (lambda (z413d@e) ((lambda (z413f@t) ((lambda (z4141@ls/false) (if z4141@ls/false (apply (lambda (z4143@export* z4144@b*) (begin (if (not (for-all z2df7@id? z4143@export*)) (z30ca@syntax-violation '#f '"module exports must be identifiers" z413d@e) (void)) (values '#f (list->vector z4143@export*) z4144@b*))) z4141@ls/false) ((lambda (z4147@t) ((lambda (z4149@ls/false) (if z4149@ls/false (apply (lambda (z414b@name z414c@export* z414d@b*) (begin (if (not (z2df7@id? z414b@name)) (z30ca@syntax-violation '#f '"module name must be an identifier" z413d@e) (void)) (if (not (for-all z2df7@id? z414c@export*)) (z30ca@syntax-violation '#f '"module exports must be identifiers" z413d@e) (void)) (values z414b@name (list->vector z414c@export*) z414d@b*))) z4149@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4147@t))) (z2ffc@syntax-dispatch z4147@t '(_ any each-any . each-any)))) z413f@t))) (z2ffc@syntax-dispatch z413f@t '(_ each-any . each-any)))) z413d@e))) (set! z3038@make-module-interface (lambda z4151@args (make-simple-struct 'module-interface '4 z4151@args))) (set! z303a@module-interface? (lambda (z4153@x) (and (simple-struct? z4153@x) (eq? (simple-struct-name z4153@x) 'module-interface)))) (set! z303c@module-interface-first-mark (lambda (z4155@x) (simple-struct-ref z4155@x '0))) (set! z303e@set-module-interface-first-mark! (lambda (z4157@x z4158@val) (simple-struct-set! z4157@x '0 z4158@val))) (set! z3040@module-interface-exp-id-vec (lambda (z415b@x) (simple-struct-ref z415b@x '1))) (set! z3042@set-module-interface-exp-id-vec! (lambda (z415d@x z415e@val) (simple-struct-set! z415d@x '1 z415e@val))) (set! z3044@module-interface-exp-lab-vec (lambda (z4161@x) (simple-struct-ref z4161@x '2))) (set! z3046@set-module-interface-exp-lab-vec! (lambda (z4163@x z4164@val) (simple-struct-set! z4163@x '2 z4164@val))) (set! z3048@dummy '3) (set! z304a@module-interface-exp-id* (lambda (z4167@iface z4168@id) ((lambda (z416c@diff-marks) (begin (set! z416c@diff-marks (lambda (z4173@ls z4174@x) (begin (if (null? z4173@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (z4177@a) (if (eq? z4177@a z4174@x) '() (cons z4177@a (z416c@diff-marks (cdr z4173@ls) z4174@x)))) (car z4173@ls))))) ((lambda (z416d@diff z416e@id-vec) (if (null? z416d@diff) z416e@id-vec (vector-map (lambda (z4171@x) (z2dbf@make-stx (z2dc3@stx-expr z4171@x) (append z416d@diff (z2dc7@stx-mark* z4171@x)) '() '())) z416e@id-vec))) (z416c@diff-marks (z2dc7@stx-mark* z4168@id) (z303c@module-interface-first-mark z4167@iface)) (z3040@module-interface-exp-id-vec z4167@iface)))) '#f))) (set! z304c@chi-internal-module (lambda (z4179@e z417a@r z417b@mr z417c@lex* z417d@rhs* z417e@mod** z417f@kwd*) (call-with-values (lambda () (z3036@parse-module z4179@e)) (lambda (z418d@z4188 z418e@z418a z418f@z418c) ((lambda (z4193@e* z4194@exp-id* z4195@name) ((lambda (z4199@rib) ((lambda (z419b@e*) ((lambda () (call-with-values (lambda () (z304e@chi-body* z419b@e* z417a@r z417b@mr z417c@lex* z417d@rhs* z417e@mod** z417f@kwd* '() z4199@rib '#f)) (lambda (z41ad@z419e z41ae@z41a0 z41af@z41a2 z41b0@z41a4 z41b1@z41a6 z41b2@z41a8 z41b3@z41aa z41b4@z41ac) ((lambda (z41bd@_exp* z41be@kwd* z41bf@mod** z41c0@rhs* z41c1@lex* z41c2@mr z41c3@r z41c4@e*) ((lambda (z41cd@exp-lab* z41ce@mod**) (if (not z4195@name) (values z41c1@lex* z41c0@rhs* z4194@exp-id* z41cd@exp-lab* z41c3@r z41c2@mr z41ce@mod** z41be@kwd*) ((lambda (z41d1@lab z41d2@iface) (values z41c1@lex* z41c0@rhs* (vector z4195@name) (vector z41d1@lab) (cons (cons z41d1@lab (cons '$module z41d2@iface)) z41c3@r) (cons (cons z41d1@lab (cons '$module z41d2@iface)) z41c2@mr) z41ce@mod** z41be@kwd*)) (z2d8d@gen-label 'module) (z3038@make-module-interface (car (z2dc7@stx-mark* z4195@name)) (vector-map (lambda (z41d5@x) (z2dbf@make-stx (z2dc3@stx-expr z41d5@x) (z2dc7@stx-mark* z41d5@x) '() '())) z4194@exp-id*) z41cd@exp-lab*)))) (vector-map (lambda (z41d7@x) (or (z2e0d@id->label (z2dbf@make-stx (z2df9@id->sym z41d7@x) (z2dc7@stx-mark* z41d7@x) (list z4199@rib) '())) (z30ca@syntax-violation '#f '"cannot find module export" z41d7@x))) z4194@exp-id*) (cons z41c4@e* z41bf@mod**))) z41b4@z41ac z41b3@z41aa z41b2@z41a8 z41b1@z41a6 z41b0@z41a4 z41af@z41a2 z41ae@z41a0 z41ad@z419e)))))) (map (lambda (z41d9@x) (z2de3@add-subst z4199@rib z41d9@x)) (z2df5@syntax->list z4193@e*)))) (z2daf@make-empty-rib))) z418f@z418c z418e@z418a z418d@z4188))))) (set! z304e@chi-body* (lambda (z41db@e* z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z41e1@kwd* z41e2@exp* z41e3@rib z41e4@top?) (if (null? z41db@e*) (values z41db@e* z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z41e1@kwd* z41e2@exp*) ((lambda (z41ef@e) (call-with-values (lambda () (z2e19@syntax-type z41ef@e z41dc@r)) (lambda (z41f7@z41f2 z41f8@z41f4 z41f9@z41f6) ((lambda (z41fd@kwd z41fe@value z41ff@type) ((lambda (z4203@kwd*) ((lambda (z4205@t) (if (memv z4205@t '(define)) (call-with-values (lambda () (z2f80@parse-define z41ef@e)) (lambda (z420b@z4208 z420c@z420a) ((lambda (z420f@rhs z4210@id) (begin (if (z2e03@bound-id-member? z4210@id z4203@kwd*) (z30ca@syntax-violation '#f '"cannot redefine keyword" z41ef@e) (void)) (call-with-values (lambda () (z2d91@gen-define-label+loc z4210@id z41e3@rib)) (lambda (z4217@z4214 z4218@z4216) ((lambda (z421b@lex z421c@lab) (begin (z2db1@extend-rib! z41e3@rib z4210@id z421c@lab) (z304e@chi-body* (cdr z41db@e*) (z2f8e@add-lexical z421c@lab z421b@lex z41dc@r) z41dd@mr (cons z421b@lex z41de@lex*) (cons z420f@rhs z41df@rhs*) z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?))) z4218@z4216 z4217@z4214))))) z420c@z420a z420b@z4208))) (if (memv z4205@t '(define-syntax)) (call-with-values (lambda () (z2f82@parse-define-syntax z41ef@e)) (lambda (z4223@z4220 z4224@z4222) ((lambda (z4227@rhs z4228@id) (begin (if (z2e03@bound-id-member? z4228@id z4203@kwd*) (z30ca@syntax-violation '#f '"cannot redefine keyword" z41ef@e) (void)) ((lambda (z422b@lab z422c@expanded-rhs) (begin (z2db1@extend-rib! z41e3@rib z4228@id z422b@lab) ((lambda (z422f@b) (z304e@chi-body* (cdr z41db@e*) (cons (cons z422b@lab z422f@b) z41dc@r) (cons (cons z422b@lab z422f@b) z41dd@mr) z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?)) (z2e2f@make-eval-transformer z422c@expanded-rhs)))) (z2d93@gen-define-label z4228@id z41e3@rib) (z3050@expand-transformer z4227@rhs z41dd@mr)))) z4224@z4222 z4223@z4220))) (if (memv z4205@t '(let-syntax letrec-syntax)) ((lambda (z4231@t) ((lambda (z4233@ls/false) (if (and z4233@ls/false (apply (lambda (z4235@xlhs* z4236@xrhs* z4237@xbody*) (if (not (z2dff@valid-bound-ids? z4235@xlhs*)) (z30ca@syntax-violation '#f '"invalid identifiers" z41ef@e) (void))) z4233@ls/false)) (apply (lambda (z423b@xlhs* z423c@xrhs* z423d@xbody*) ((lambda (z4241@xlab*) ((lambda (z4243@xrib) ((lambda (z4245@xb*) ((lambda () (z304e@chi-body* (append (map (lambda (z4247@x) (z2de3@add-subst z4243@xrib z4247@x)) z423d@xbody*) (cdr z41db@e*)) (append (map cons z4241@xlab* z4245@xb*) z41dc@r) (append (map cons z4241@xlab* z4245@xb*) z41dd@mr) z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?)))) (map (lambda (z4249@x) (z2e2f@make-eval-transformer (z3050@expand-transformer (if (eq? z41ff@type 'let-syntax) z4249@x (z2de3@add-subst z4243@xrib z4249@x)) z41dd@mr))) z423c@xrhs*))) (z2dbb@make-full-rib z423b@xlhs* z4241@xlab*))) (map z2d8d@gen-label z423b@xlhs*))) z4233@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4231@t))) (z2ffc@syntax-dispatch z4231@t '(_ #(each (any any)) . each-any)))) z41ef@e) (if (memv z4205@t '(begin)) ((lambda (z424b@t) ((lambda (z424d@ls/false) (if z424d@ls/false (apply (lambda (z424f@x*) (z304e@chi-body* (append z424f@x* (cdr z41db@e*)) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?)) z424d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z424b@t))) (z2ffc@syntax-dispatch z424b@t '(_ . each-any)))) z41ef@e) (if (memv z4205@t '(global-macro global-macro!)) (z304e@chi-body* (cons (z2de3@add-subst z41e3@rib (z3018@chi-global-macro z41fe@value z41ef@e)) (cdr z41db@e*)) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?) (if (memv z4205@t '(local-macro local-macro!)) (z304e@chi-body* (cons (z2de3@add-subst z41e3@rib (z3016@chi-local-macro z41fe@value z41ef@e)) (cdr z41db@e*)) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?) (if (memv z4205@t '(macro macro!)) (z304e@chi-body* (cons (z2de3@add-subst z41e3@rib (z3014@chi-macro z41fe@value z41ef@e)) (cdr z41db@e*)) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?) (if (memv z4205@t '(module)) (call-with-values (lambda () (z304c@chi-internal-module z41ef@e z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd*)) (lambda (z4261@z4252 z4262@z4254 z4263@z4256 z4264@z4258 z4265@z425a z4266@z425c z4267@z425e z4268@z4260) ((lambda (z4271@kwd* z4272@mod** z4273@mr z4274@r z4275@m-exp-lab* z4276@m-exp-id* z4277@rhs* z4278@lex*) (begin (vector-for-each (lambda (z4281@id z4282@lab) (z2db1@extend-rib! z41e3@rib z4281@id z4282@lab)) z4276@m-exp-id* z4275@m-exp-lab*) (z304e@chi-body* (cdr z41db@e*) z4274@r z4273@mr z4278@lex* z4277@rhs* z4272@mod** z4271@kwd* z41e2@exp* z41e3@rib z41e4@top?))) z4268@z4260 z4267@z425e z4266@z425c z4265@z425a z4264@z4258 z4263@z4256 z4262@z4254 z4261@z4252))) (if (memv z4205@t '(library)) (begin (z30ac@library-expander (z2e0b@stx->datum z41ef@e)) (z304e@chi-body* (cdr z41db@e*) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?)) (if (memv z4205@t '(export)) ((lambda (z4285@t) ((lambda (z4287@ls/false) (if z4287@ls/false (apply (lambda (z4289@exp-decl*) (z304e@chi-body* (cdr z41db@e*) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* (append z4289@exp-decl* z41e2@exp*) z41e3@rib z41e4@top?)) z4287@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4285@t))) (z2ffc@syntax-dispatch z4285@t '(_ . each-any)))) z41ef@e) (if (memv z4205@t '(import)) ((lambda () ((lambda (z428c@module-import? z428e@module-import z4290@library-import) (begin (set! z428c@module-import? (lambda (z42df@e) ((lambda (z42e1@t) ((lambda (z42e3@ls/false) (if (and z42e3@ls/false (apply (lambda (z42e5@id) (z2df7@id? z42e5@id)) z42e3@ls/false)) (apply (lambda (z42e7@id) '#t) z42e3@ls/false) ((lambda (z42e9@t) ((lambda (z42eb@ls/false) (if z42eb@ls/false (apply (lambda (z42ed@imp*) '#f) z42eb@ls/false) ((lambda (z42ef@t) ((lambda (z42f1@ls/false) (if z42f1@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"malformed import form" z42df@e)) z42f1@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z42ef@t))) (z2ffc@syntax-dispatch z42ef@t '_))) z42e9@t))) (z2ffc@syntax-dispatch z42e9@t '(_ . each-any)))) z42e1@t))) (z2ffc@syntax-dispatch z42e1@t '(_ any)))) z42df@e))) (set! z428e@module-import (lambda (z42bd@e z42be@r) ((lambda (z42c1@t) ((lambda (z42c3@ls/false) (if (and z42c3@ls/false (apply (lambda (z42c5@id) (z2df7@id? z42c5@id)) z42c3@ls/false)) (apply (lambda (z42c7@id) (call-with-values (lambda () (z2e19@syntax-type z42c7@id z42be@r)) (lambda (z42cf@z42ca z42d0@z42cc z42d1@z42ce) ((lambda (z42d5@kwd z42d6@value z42d7@type) ((lambda (z42db@t) (if (memv z42db@t '($module)) ((lambda (z42dd@iface) (values (z304a@module-interface-exp-id* z42dd@iface z42c7@id) (z3044@module-interface-exp-lab-vec z42dd@iface))) z42d6@value) (z30ca@syntax-violation '#f '"invalid import" z42bd@e))) z42d7@type)) z42d1@z42ce z42d0@z42cc z42cf@z42ca)))) z42c3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z42c1@t))) (z2ffc@syntax-dispatch z42c1@t '(_ any)))) z42bd@e))) (set! z4290@library-import (lambda (z42a1@e) ((lambda (z42a3@t) ((lambda (z42a5@ls/false) (if z42a5@ls/false (apply (lambda (z42a7@ctxt z42a8@imp*) (call-with-values (lambda () (z3058@parse-import-spec* (z30d0@syntax->datum z42a8@imp*))) (lambda (z42af@z42ac z42b0@z42ae) ((lambda (z42b3@subst-labels z42b4@subst-names) (values (vector-map (lambda (z42b7@name) (z2dd5@datum->stx z42a7@ctxt z42b7@name)) z42b4@subst-names) z42b3@subst-labels)) z42b0@z42ae z42af@z42ac)))) z42a5@ls/false) ((lambda (z42b9@t) ((lambda (z42bb@ls/false) (if z42bb@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid import form" z42a1@e)) z42bb@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z42b9@t))) (z2ffc@syntax-dispatch z42b9@t '_))) z42a3@t))) (z2ffc@syntax-dispatch z42a3@t '(any . each-any)))) z42a1@e))) (begin (call-with-values (lambda () (if (z428c@module-import? z41ef@e) (z428e@module-import z41ef@e z41dc@r) (z4290@library-import z41ef@e))) (lambda (z4295@z4292 z4296@z4294) ((lambda (z4299@lab* z429a@id*) (vector-for-each (lambda (z429d@id z429e@lab) (z2db1@extend-rib! z41e3@rib z429d@id z429e@lab)) z429a@id* z4299@lab*)) z4296@z4294 z4295@z4292))) (z304e@chi-body* (cdr z41db@e*) z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?)))) '#f '#f '#f))) (if z41e4@top? (z304e@chi-body* (cdr z41db@e*) z41dc@r z41dd@mr (cons (z2d89@gen-lexical 'dummy) z41de@lex*) (cons (cons 'top-expr z41ef@e) z41df@rhs*) z41e0@mod** z4203@kwd* z41e2@exp* z41e3@rib z41e4@top?) (values z41db@e* z41dc@r z41dd@mr z41de@lex* z41df@rhs* z41e0@mod** z4203@kwd* z41e2@exp*)))))))))))))) z41ff@type)) (if (z2df7@id? z41fd@kwd) (cons z41fd@kwd z41e1@kwd*) z41e1@kwd*))) z41f9@z41f6 z41f8@z41f4 z41f7@z41f2)))) (car z41db@e*))))) (set! z3050@expand-transformer (lambda (z42f3@expr z42f4@r) ((lambda (z42f7@rtc) ((lambda (z42f9@expanded-rhs) (begin (for-each ((lambda (z42fb@mark-visit) (lambda (z42fd@x) (begin (z2c2d@z2a78@invoke-library z42fd@x) (z42fb@mark-visit z42fd@x)))) (z3060@vis-collector)) (z42f7@rtc)) z42f9@expanded-rhs)) ((lambda (z4307@z4300 z4308@z4302 z4309@z4304 z430a@z4306) ((lambda (z430f@swap) (dynamic-wind z430f@swap (lambda () (z301e@chi-expr z42f3@expr z42f4@r z42f4@r)) z430f@swap)) (lambda () (begin ((lambda (z4311@t) (begin (z4307@z4300 z4309@z4304) (set! z4309@z4304 z4311@t))) (z4307@z4300)) ((lambda (z4313@t) (begin (z4308@z4302 z430a@z4306) (set! z430a@z4306 z4313@t))) (z4308@z4302)))))) z305e@inv-collector z3060@vis-collector z42f7@rtc (lambda (z4315@x) (values))))) (z305c@make-collector)))) (set! z3052@parse-exports (lambda (z4317@exp*) ((letrec ((z4319@f (lambda (z431b@exp* z431c@int* z431d@ext*) (if (null? z431b@exp*) (begin (if (not (z2dff@valid-bound-ids? z431d@ext*)) (z30ca@syntax-violation 'export '"invalid exports" (z3032@find-dups z431d@ext*)) (void)) (values (map z30d0@syntax->datum z431d@ext*) z431c@int*)) ((lambda (z4321@t) ((lambda (z4323@ls/false) (if z4323@ls/false (apply (lambda (z4325@rename z4326@i* z4327@e*) (begin (if (not (and (eq? (z30d0@syntax->datum z4325@rename) 'rename) (for-all z2df7@id? z4326@i*) (for-all z2df7@id? z4327@e*))) (z30ca@syntax-violation 'export '"invalid export specifier" (car z431b@exp*)) (void)) (z4319@f (cdr z431b@exp*) (append z4326@i* z431c@int*) (append z4327@e* z431d@ext*)))) z4323@ls/false) ((lambda (z432b@t) ((lambda (z432d@ls/false) (if z432d@ls/false (apply (lambda (z432f@ie) (begin (if (not (z2df7@id? z432f@ie)) (z30ca@syntax-violation 'export '"invalid export" z432f@ie) (void)) (z4319@f (cdr z431b@exp*) (cons z432f@ie z431c@int*) (cons z432f@ie z431d@ext*)))) z432d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z432b@t))) (z2ffc@syntax-dispatch z432b@t 'any))) z4321@t))) (z2ffc@syntax-dispatch z4321@t '(any . #(each (any any)))))) (car z431b@exp*)))))) z4319@f) z4317@exp* '() '()))) (set! z3054@parse-library-name (lambda (z4331@spec) ((lambda (z4334@parse) (begin (set! z4334@parse (lambda (z4341@x) ((lambda (z4343@t) ((lambda (z4345@ls/false) (if (and z4345@ls/false (apply (lambda (z4347@v*) (for-all (lambda (z4349@x) ((lambda (z434b@x) (and (integer? z434b@x) (exact? z434b@x))) (z30d0@syntax->datum z4349@x))) z4347@v*)) z4345@ls/false)) (apply (lambda (z434d@v*) (values '() (map z30d0@syntax->datum z434d@v*))) z4345@ls/false) ((lambda (z434f@t) ((lambda (z4351@ls/false) (if (and z4351@ls/false (apply (lambda (z4353@x z4354@rest) (symbol? (z30d0@syntax->datum z4353@x))) z4351@ls/false)) (apply (lambda (z4357@x z4358@rest) (call-with-values (lambda () (z4334@parse z4358@rest)) (lambda (z435f@z435c z4360@z435e) ((lambda (z4363@v* z4364@x*) (values (cons (z30d0@syntax->datum z4357@x) z4364@x*) z4363@v*)) z4360@z435e z435f@z435c)))) z4351@ls/false) ((lambda (z4367@t) ((lambda (z4369@ls/false) (if z4369@ls/false (apply (lambda () (values '() '())) z4369@ls/false) ((lambda (z436b@t) ((lambda (z436d@ls/false) (if z436d@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid library name" z4331@spec)) z436d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z436b@t))) (z2ffc@syntax-dispatch z436b@t '_))) z4367@t))) (z2ffc@syntax-dispatch z4367@t '()))) z434f@t))) (z2ffc@syntax-dispatch z434f@t '(any . any)))) z4343@t))) (z2ffc@syntax-dispatch z4343@t '(each-any)))) z4341@x))) (call-with-values (lambda () (z4334@parse z4331@spec)) (lambda (z4339@z4336 z433a@z4338) ((lambda (z433d@ver* z433e@name*) (begin (if (null? z433e@name*) (z30ca@syntax-violation '#f '"empty library name" z4331@spec) (void)) (values z433e@name* z433d@ver*))) z433a@z4338 z4339@z4336))))) '#f))) (set! z3056@parse-library (lambda (z436f@e) ((lambda (z4371@t) ((lambda (z4373@ls/false) (if (and z4373@ls/false (apply (lambda (z4375@library z4376@name* z4377@export z4378@exp* z4379@import z437a@imp* z437b@b*) (and (eq? (z30d0@syntax->datum z4377@export) 'export) (eq? (z30d0@syntax->datum z4379@import) 'import) (eq? (z30d0@syntax->datum z4375@library) 'library))) z4373@ls/false)) (apply (lambda (z4383@library z4384@name* z4385@export z4386@exp* z4387@import z4388@imp* z4389@b*) (values z4384@name* z4386@exp* z4388@imp* z4389@b*)) z4373@ls/false) ((lambda (z4391@t) ((lambda (z4393@ls/false) (if z4393@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"malformed library" z436f@e)) z4393@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4391@t))) (z2ffc@syntax-dispatch z4391@t '_))) z4371@t))) (z2ffc@syntax-dispatch z4371@t '(any each-any (any . each-any) (any . each-any) . each-any)))) z436f@e))) (set! z3058@parse-import-spec* ((lambda () ((lambda (z4396@idsyn? z4398@dup-error z439a@merge-substs z439c@exclude* z439e@find* z43a0@rem* z43a2@remove-dups z43a4@parse-library-name z43a6@import-library z43a8@get-import z43aa@add-imports!) (begin (set! z4396@idsyn? (lambda (z459f@x) (symbol? (z30d0@syntax->datum z459f@x)))) (set! z4398@dup-error (lambda (z459d@name) (z30ca@syntax-violation 'import '"two imports with different bindings" z459d@name))) (set! z439a@merge-substs (lambda (z458b@s z458c@subst) ((lambda (z4590@insert-to-subst) (begin (set! z4590@insert-to-subst (lambda (z4591@a z4592@subst) ((lambda (z4595@name z4596@label) ((lambda (z4599@t) (if z4599@t ((lambda (z459b@x) (if (eq? (cdr z459b@x) z4596@label) z4592@subst (z4398@dup-error z4595@name))) z4599@t) (cons z4591@a z4592@subst))) (assq z4595@name z4592@subst))) (car z4591@a) (cdr z4591@a)))) (if (null? z458b@s) z458c@subst (z4590@insert-to-subst (car z458b@s) (z439a@merge-substs (cdr z458b@s) z458c@subst))))) '#f))) (set! z439c@exclude* (lambda (z455b@sym* z455c@subst) ((lambda (z4560@exclude) (begin (set! z4560@exclude (lambda (z4579@sym z457a@subst) (if (null? z457a@subst) (z30ca@syntax-violation 'import '"cannot rename unbound identifier" z4579@sym) (if (eq? z4579@sym (caar z457a@subst)) (values (cdar z457a@subst) (cdr z457a@subst)) ((lambda (z457d@a) (call-with-values (lambda () (z4560@exclude z4579@sym (cdr z457a@subst))) (lambda (z4583@z4580 z4584@z4582) ((lambda (z4587@subst z4588@old) (values z4588@old (cons z457d@a z4587@subst))) z4584@z4582 z4583@z4580)))) (car z457a@subst)))))) (if (null? z455b@sym*) (values '() z455c@subst) (call-with-values (lambda () (z4560@exclude (car z455b@sym*) z455c@subst)) (lambda (z4565@z4562 z4566@z4564) ((lambda (z4569@subst z456a@old) (call-with-values (lambda () (z439c@exclude* (cdr z455b@sym*) z4569@subst)) (lambda (z4571@z456e z4572@z4570) ((lambda (z4575@subst z4576@old*) (values (cons z456a@old z4576@old*) z4575@subst)) z4572@z4570 z4571@z456e)))) z4566@z4564 z4565@z4562)))))) '#f))) (set! z439e@find* (lambda (z4553@sym* z4554@subst) (map (lambda (z4557@x) ((lambda (z4559@t) (if z4559@t (cdr z4559@t) (z30ca@syntax-violation 'import '"cannot find identifier" z4557@x))) (assq z4557@x z4554@subst))) z4553@sym*))) (set! z43a0@rem* (lambda (z454b@sym* z454c@subst) ((letrec ((z454f@f (lambda (z4551@subst) (if (null? z4551@subst) '() (if (memq (caar z4551@subst) z454b@sym*) (z454f@f (cdr z4551@subst)) (cons (car z4551@subst) (z454f@f (cdr z4551@subst)))))))) z454f@f) z454c@subst))) (set! z43a2@remove-dups (lambda (z4549@ls) (if (null? z4549@ls) '() (if (memq (car z4549@ls) (cdr z4549@ls)) (z43a2@remove-dups (cdr z4549@ls)) (cons (car z4549@ls) (z43a2@remove-dups (cdr z4549@ls))))))) (set! z43a4@parse-library-name (lambda (z4461@spec) ((lambda (z4464@subversion? z4466@subversion-pred z4468@version-pred) (begin (set! z4464@subversion? (lambda (z4545@x) ((lambda (z4547@x) (and (integer? z4547@x) (exact? z4547@x) (>= z4547@x '0))) (z30d0@syntax->datum z4545@x)))) (set! z4466@subversion-pred (lambda (z44e5@x*) ((lambda (z44e7@t) ((lambda (z44e9@ls/false) (if (and z44e9@ls/false (apply (lambda (z44eb@n) (z4464@subversion? z44eb@n)) z44e9@ls/false)) (apply (lambda (z44ed@n) (lambda (z44ef@x) (= z44ef@x (z30d0@syntax->datum z44ed@n)))) z44e9@ls/false) ((lambda (z44f1@t) ((lambda (z44f3@ls/false) (if (and z44f3@ls/false (apply (lambda (z44f5@p? z44f6@sub*) (eq? (z30d0@syntax->datum z44f5@p?) 'and)) z44f3@ls/false)) (apply (lambda (z44f9@p? z44fa@sub*) ((lambda (z44fd@p*) (lambda (z44ff@x) (for-all (lambda (z4501@p) (z4501@p z44ff@x)) z44fd@p*))) (map z4466@subversion-pred z44fa@sub*))) z44f3@ls/false) ((lambda (z4503@t) ((lambda (z4505@ls/false) (if (and z4505@ls/false (apply (lambda (z4507@p? z4508@sub*) (eq? (z30d0@syntax->datum z4507@p?) 'or)) z4505@ls/false)) (apply (lambda (z450b@p? z450c@sub*) ((lambda (z450f@p*) (lambda (z4511@x) (exists (lambda (z4513@p) (z4513@p z4511@x)) z450f@p*))) (map z4466@subversion-pred z450c@sub*))) z4505@ls/false) ((lambda (z4515@t) ((lambda (z4517@ls/false) (if (and z4517@ls/false (apply (lambda (z4519@p? z451a@sub) (eq? (z30d0@syntax->datum z4519@p?) 'not)) z4517@ls/false)) (apply (lambda (z451d@p? z451e@sub) ((lambda (z4521@p) (lambda (z4523@x) (not (z4521@p z4523@x)))) (z4466@subversion-pred z451e@sub))) z4517@ls/false) ((lambda (z4525@t) ((lambda (z4527@ls/false) (if (and z4527@ls/false (apply (lambda (z4529@p? z452a@n) (and (eq? (z30d0@syntax->datum z4529@p?) '<=) (z4464@subversion? z452a@n))) z4527@ls/false)) (apply (lambda (z452d@p? z452e@n) (lambda (z4531@x) (<= z4531@x (z30d0@syntax->datum z452e@n)))) z4527@ls/false) ((lambda (z4533@t) ((lambda (z4535@ls/false) (if (and z4535@ls/false (apply (lambda (z4537@p? z4538@n) (and (eq? (z30d0@syntax->datum z4537@p?) '>=) (z4464@subversion? z4538@n))) z4535@ls/false)) (apply (lambda (z453b@p? z453c@n) (lambda (z453f@x) (>= z453f@x (z30d0@syntax->datum z453c@n)))) z4535@ls/false) ((lambda (z4541@t) ((lambda (z4543@ls/false) (if z4543@ls/false (apply (lambda () (z30ca@syntax-violation 'import '"invalid sub-version spec" z4461@spec z44e5@x*)) z4543@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4541@t))) (z2ffc@syntax-dispatch z4541@t '_))) z4533@t))) (z2ffc@syntax-dispatch z4533@t '(any any)))) z4525@t))) (z2ffc@syntax-dispatch z4525@t '(any any)))) z4515@t))) (z2ffc@syntax-dispatch z4515@t '(any any)))) z4503@t))) (z2ffc@syntax-dispatch z4503@t '(any . each-any)))) z44f1@t))) (z2ffc@syntax-dispatch z44f1@t '(any . each-any)))) z44e7@t))) (z2ffc@syntax-dispatch z44e7@t 'any))) z44e5@x*))) (set! z4468@version-pred (lambda (z4495@x*) ((lambda (z4497@t) ((lambda (z4499@ls/false) (if z4499@ls/false (apply (lambda () (lambda (z449b@x) '#t)) z4499@ls/false) ((lambda (z449d@t) ((lambda (z449f@ls/false) (if (and z449f@ls/false (apply (lambda (z44a1@c z44a2@ver*) (eq? (z30d0@syntax->datum z44a1@c) 'and)) z449f@ls/false)) (apply (lambda (z44a5@c z44a6@ver*) ((lambda (z44a9@p*) (lambda (z44ab@x) (for-all (lambda (z44ad@p) (z44ad@p z44ab@x)) z44a9@p*))) (map z4468@version-pred z44a6@ver*))) z449f@ls/false) ((lambda (z44af@t) ((lambda (z44b1@ls/false) (if (and z44b1@ls/false (apply (lambda (z44b3@c z44b4@ver*) (eq? (z30d0@syntax->datum z44b3@c) 'or)) z44b1@ls/false)) (apply (lambda (z44b7@c z44b8@ver*) ((lambda (z44bb@p*) (lambda (z44bd@x) (exists (lambda (z44bf@p) (z44bf@p z44bd@x)) z44bb@p*))) (map z4468@version-pred z44b8@ver*))) z44b1@ls/false) ((lambda (z44c1@t) ((lambda (z44c3@ls/false) (if (and z44c3@ls/false (apply (lambda (z44c5@c z44c6@ver) (eq? (z30d0@syntax->datum z44c5@c) 'not)) z44c3@ls/false)) (apply (lambda (z44c9@c z44ca@ver) ((lambda (z44cd@p) (lambda (z44cf@x) (not (z44cd@p z44cf@x)))) (z4468@version-pred z44ca@ver))) z44c3@ls/false) ((lambda (z44d1@t) ((lambda (z44d3@ls/false) (if z44d3@ls/false (apply (lambda (z44d5@sub*) ((lambda (z44d7@p*) (lambda (z44d9@x) ((letrec ((z44db@f (lambda (z44dd@p* z44de@x) (if (null? z44dd@p*) '#t (if (null? z44de@x) '#f (and ((car z44dd@p*) (car z44de@x)) (z44db@f (cdr z44dd@p*) (cdr z44de@x)))))))) z44db@f) z44d7@p* z44d9@x))) (map z4466@subversion-pred z44d5@sub*))) z44d3@ls/false) ((lambda (z44e1@t) ((lambda (z44e3@ls/false) (if z44e3@ls/false (apply (lambda () (z30ca@syntax-violation 'import '"invalid version spec" z4461@spec z4495@x*)) z44e3@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z44e1@t))) (z2ffc@syntax-dispatch z44e1@t '_))) z44d1@t))) (z2ffc@syntax-dispatch z44d1@t 'each-any))) z44c1@t))) (z2ffc@syntax-dispatch z44c1@t '(any any)))) z44af@t))) (z2ffc@syntax-dispatch z44af@t '(any . each-any)))) z449d@t))) (z2ffc@syntax-dispatch z449d@t '(any . each-any)))) z4497@t))) (z2ffc@syntax-dispatch z4497@t '()))) z4495@x*))) ((letrec ((z4469@f (lambda (z446b@x) ((lambda (z446d@t) ((lambda (z446f@ls/false) (if z446f@ls/false (apply (lambda (z4471@version-spec*) (values '() (z4468@version-pred z4471@version-spec*))) z446f@ls/false) ((lambda (z4473@t) ((lambda (z4475@ls/false) (if (and z4475@ls/false (apply (lambda (z4477@x z4478@x*) (z4396@idsyn? z4477@x)) z4475@ls/false)) (apply (lambda (z447b@x z447c@x*) (call-with-values (lambda () (z4469@f z447c@x*)) (lambda (z4483@z4480 z4484@z4482) ((lambda (z4487@pred z4488@name) (values (cons (z30d0@syntax->datum z447b@x) z4488@name) z4487@pred)) z4484@z4482 z4483@z4480)))) z4475@ls/false) ((lambda (z448b@t) ((lambda (z448d@ls/false) (if z448d@ls/false (apply (lambda () (values '() (lambda (z448f@x) '#t))) z448d@ls/false) ((lambda (z4491@t) ((lambda (z4493@ls/false) (if z4493@ls/false (apply (lambda () (z30ca@syntax-violation '#f '"invalid import spec" z4461@spec)) z4493@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4491@t))) (z2ffc@syntax-dispatch z4491@t '_))) z448b@t))) (z2ffc@syntax-dispatch z448b@t '()))) z4473@t))) (z2ffc@syntax-dispatch z4473@t '(any . any)))) z446d@t))) (z2ffc@syntax-dispatch z446d@t '(each-any)))) z446b@x)))) z4469@f) z4461@spec))) '#f '#f '#f))) (set! z43a6@import-library (lambda (z4451@spec*) (call-with-values (lambda () (z43a4@parse-library-name z4451@spec*)) (lambda (z4457@z4454 z4458@z4456) ((lambda (z445b@pred z445c@name) (begin (if (null? z445c@name) (z30ca@syntax-violation 'import '"empty library name" z4451@spec*) (void)) ((lambda (z445f@lib) (begin (if (not z445f@lib) (z30ca@syntax-violation 'import '"cannot find library with required name" z445c@name) (void)) (if (not (z445b@pred (z2c00@z2a1e@library-version z445f@lib))) (z30ca@syntax-violation 'import '"library does not satisfy version specification" z4451@spec* z445f@lib) (void)) ((z3062@imp-collector) z445f@lib) (z2c08@z2a2e@library-subst z445f@lib))) (z2c26@z2a6a@find-library-by-name z445c@name)))) z4458@z4456 z4457@z4454))))) (set! z43a8@get-import (lambda (z43c3@spec) ((lambda (z43c5@t) ((lambda (z43c7@ls/false) (if (and z43c7@ls/false (apply (lambda (z43c9@x z43ca@x*) (not (memq (z30d0@syntax->datum z43c9@x) '(for rename except only prefix library)))) z43c7@ls/false)) (apply (lambda (z43cd@x z43ce@x*) (z43a6@import-library (cons z43cd@x z43ce@x*))) z43c7@ls/false) ((lambda (z43d1@t) ((lambda (z43d3@ls/false) (if (and z43d3@ls/false (apply (lambda (z43d5@rename z43d6@isp z43d7@old* z43d8@new*) (and (eq? (z30d0@syntax->datum z43d5@rename) 'rename) (for-all z4396@idsyn? z43d7@old*) (for-all z4396@idsyn? z43d8@new*))) z43d3@ls/false)) (apply (lambda (z43dd@rename z43de@isp z43df@old* z43e0@new*) ((lambda (z43e5@subst z43e6@old* z43e7@new*) ((lambda (z43eb@old-label*) ((lambda (z43ed@subst) (z439a@merge-substs (map cons z43e7@new* z43eb@old-label*) z43ed@subst)) (z43a0@rem* z43e6@old* z43e5@subst))) (z439e@find* z43e6@old* z43e5@subst))) (z43a8@get-import z43de@isp) (map z30d0@syntax->datum z43df@old*) (map z30d0@syntax->datum z43e0@new*))) z43d3@ls/false) ((lambda (z43ef@t) ((lambda (z43f1@ls/false) (if (and z43f1@ls/false (apply (lambda (z43f3@except z43f4@isp z43f5@sym*) (and (eq? (z30d0@syntax->datum z43f3@except) 'except) (for-all z4396@idsyn? z43f5@sym*))) z43f1@ls/false)) (apply (lambda (z43f9@except z43fa@isp z43fb@sym*) ((lambda (z43ff@subst) (z43a0@rem* (map z30d0@syntax->datum z43fb@sym*) z43ff@subst)) (z43a8@get-import z43fa@isp))) z43f1@ls/false) ((lambda (z4401@t) ((lambda (z4403@ls/false) (if (and z4403@ls/false (apply (lambda (z4405@only z4406@isp z4407@sym*) (and (eq? (z30d0@syntax->datum z4405@only) 'only) (for-all z4396@idsyn? z4407@sym*))) z4403@ls/false)) (apply (lambda (z440b@only z440c@isp z440d@sym*) ((lambda (z4411@subst z4412@sym*) ((lambda (z4415@sym*) ((lambda (z4417@lab*) (map cons z4415@sym* z4417@lab*)) (z439e@find* z4415@sym* z4411@subst))) (z43a2@remove-dups z4412@sym*))) (z43a8@get-import z440c@isp) (map z30d0@syntax->datum z440d@sym*))) z4403@ls/false) ((lambda (z4419@t) ((lambda (z441b@ls/false) (if (and z441b@ls/false (apply (lambda (z441d@prefix z441e@isp z441f@p) (and (eq? (z30d0@syntax->datum z441d@prefix) 'prefix) (z4396@idsyn? z441f@p))) z441b@ls/false)) (apply (lambda (z4423@prefix z4424@isp z4425@p) ((lambda (z4429@subst z442a@prefix) (map (lambda (z442d@x) (cons (string->symbol (string-append z442a@prefix (symbol->string (car z442d@x)))) (cdr z442d@x))) z4429@subst)) (z43a8@get-import z4424@isp) (symbol->string (z30d0@syntax->datum z4425@p)))) z441b@ls/false) ((lambda (z442f@t) ((lambda (z4431@ls/false) (if (and z4431@ls/false (apply (lambda (z4433@library z4434@spec*) (eq? (z30d0@syntax->datum z4433@library) 'library)) z4431@ls/false)) (apply (lambda (z4437@library z4438@spec*) (z43a6@import-library z4438@spec*)) z4431@ls/false) ((lambda (z443b@t) ((lambda (z443d@ls/false) (if (and z443d@ls/false (apply (lambda (z443f@for z4440@isp z4441@rest) (eq? (z30d0@syntax->datum z443f@for) 'for)) z443d@ls/false)) (apply (lambda (z4445@for z4446@isp z4447@rest) (z43a8@get-import z4446@isp)) z443d@ls/false) ((lambda (z444b@t) ((lambda (z444d@ls/false) (if z444d@ls/false (apply (lambda (z444f@spec) (z30ca@syntax-violation 'import '"invalid import spec" z444f@spec)) z444d@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z444b@t))) (z2ffc@syntax-dispatch z444b@t 'any))) z443b@t))) (z2ffc@syntax-dispatch z443b@t '(any any . any)))) z442f@t))) (z2ffc@syntax-dispatch z442f@t '(any each-any)))) z4419@t))) (z2ffc@syntax-dispatch z4419@t '(any any any)))) z4401@t))) (z2ffc@syntax-dispatch z4401@t '(any any . each-any)))) z43ef@t))) (z2ffc@syntax-dispatch z43ef@t '(any any . each-any)))) z43d1@t))) (z2ffc@syntax-dispatch z43d1@t '(any any . #(each (any any)))))) z43c5@t))) (z2ffc@syntax-dispatch z43c5@t '(any . each-any)))) z43c3@spec))) (set! z43aa@add-imports! (lambda (z43b3@imp z43b4@h) ((lambda (z43b7@subst) (for-each (lambda (z43b9@x) ((lambda (z43bb@name z43bc@label) ((lambda (z43bf@t) (if z43bf@t ((lambda (z43c1@l) (if (not (eq? z43c1@l z43bc@label)) (z4398@dup-error z43bb@name) (void))) z43bf@t) (hashtable-set! z43b4@h z43bb@name z43bc@label))) (hashtable-ref z43b4@h z43bb@name '#f))) (car z43b9@x) (cdr z43b9@x))) z43b7@subst)) (z43a8@get-import z43b3@imp)))) (lambda (z43ab@imp*) ((letrec ((z43ad@f (lambda (z43af@imp* z43b0@h) (if (null? z43af@imp*) (hashtable-entries z43b0@h) (begin (z43aa@add-imports! (car z43af@imp*) z43b0@h) (z43ad@f (cdr z43af@imp*) z43b0@h)))))) z43ad@f) z43ab@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! z305a@make-top-rib (lambda (z45a1@names z45a2@labels) ((lambda (z45a5@rib) (begin (vector-for-each (lambda (z45a7@name z45a8@label) (begin (if (not (symbol? z45a7@name)) (error 'make-top-rib '"BUG: not a symbol" z45a7@name) (void)) (z2db3@extend-rib/nc! z45a5@rib (z2dbf@make-stx z45a7@name z2d85@top-mark* '() '()) z45a8@label))) z45a1@names z45a2@labels) z45a5@rib)) (z2daf@make-empty-rib)))) (set! z305c@make-collector (lambda () ((lambda (z45ab@ls) (lambda z45af ((lambda (z45b0) (if (= z45b0 '0) (apply (lambda () z45ab@ls) z45af) (if (= z45b0 '1) (apply (lambda (z45ad@x) (set! z45ab@ls (z2d7e@set-cons z45ad@x z45ab@ls))) z45af) (error 'apply '"invalid arg count")))) (length z45af)))) '()))) (set! z305e@inv-collector (z2965@z2861@make-parameter (lambda z45b1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (z45b3@x) (begin (if (not (procedure? z45b3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" z45b3@x) (void)) z45b3@x)))) (set! z3060@vis-collector (z2965@z2861@make-parameter (lambda z45b5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (z45b7@x) (begin (if (not (procedure? z45b7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" z45b7@x) (void)) z45b7@x)))) (set! z3062@imp-collector (z2965@z2861@make-parameter (lambda z45b9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (z45bb@x) (begin (if (not (procedure? z45bb@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" z45bb@x) (void)) z45bb@x)))) (set! z3064@chi-library-internal (lambda (z45bd@e* z45be@rib z45bf@top?) (call-with-values (lambda () (z304e@chi-body* z45bd@e* '() '() '() '() '() '() '() z45be@rib z45bf@top?)) (lambda (z45d3@z45c4 z45d4@z45c6 z45d5@z45c8 z45d6@z45ca z45d7@z45cc z45d8@z45ce z45d9@z45d0 z45da@z45d2) ((lambda (z45e3@exp* z45e4@_kwd* z45e5@mod** z45e6@rhs* z45e7@lex* z45e8@mr z45e9@r z45ea@e*) (values (append (apply append (reverse z45e5@mod**)) z45ea@e*) z45e9@r z45e8@mr (reverse z45e7@lex*) (reverse z45e6@rhs*) z45e3@exp*)) z45da@z45d2 z45d9@z45d0 z45d8@z45ce z45d7@z45cc z45d6@z45ca z45d5@z45c8 z45d4@z45c6 z45d3@z45c4))))) (set! z3066@chi-interaction-expr (lambda (z45f3@e z45f4@rib z45f5@r) (call-with-values (lambda () (z304e@chi-body* (list z45f3@e) z45f5@r z45f5@r '() '() '() '() '() z45f4@rib '#t)) (lambda (z4609@z45fa z460a@z45fc z460b@z45fe z460c@z4600 z460d@z4602 z460e@z4604 z460f@z4606 z4610@z4608) ((lambda (z4619@_exp* z461a@_kwd* z461b@mod** z461c@rhs* z461d@lex* z461e@mr z461f@r z4620@e*) ((lambda (z4629@e*) ((lambda (z462b@e) (values z462b@e z461f@r)) (if (null? z4629@e*) (z2d69@z2cd9@build-void) (if (null? (cdr z4629@e*)) (car z4629@e*) (z2d68@z2cd7@build-sequence '#f z4629@e*))))) (z302c@expand-interaction-rhs*/init* (reverse z461d@lex*) (reverse z461c@rhs*) (append (apply append (reverse z461b@mod**)) z4620@e*) z461f@r z461e@mr))) z4610@z4608 z460f@z4606 z460e@z4604 z460d@z4602 z460c@z4600 z460b@z45fe z460a@z45fc z4609@z45fa))))) (set! z3068@library-body-expander (lambda (z462d@name z462e@main-exp* z462f@imp* z4630@b* z4631@top?) ((lambda (z4638@itc) (begin (set! z4638@itc (z305c@make-collector)) ((lambda (z4641@z463a z4642@z463c z4643@z463e z4644@z4640) ((lambda (z4649@swap) (dynamic-wind z4649@swap (lambda () (call-with-values (lambda () (z3058@parse-import-spec* z462f@imp*)) (lambda (z464f@z464c z4650@z464e) ((lambda (z4653@subst-labels z4654@subst-names) ((lambda (z4657@rib) ((lambda (z465a@wrap) (begin (set! z465a@wrap (lambda (z46d5@x) (z2dbf@make-stx z46d5@x z2d85@top-mark* (list z4657@rib) '()))) ((lambda (z465b@b* z465c@main-exp* z465d@rtc z465e@vtc) ((lambda (z466b@z4664 z466c@z4666 z466d@z4668 z466e@z466a) ((lambda (z4673@swap) (dynamic-wind z4673@swap (lambda () (call-with-values (lambda () (z3064@chi-library-internal z465b@b* z4657@rib z4631@top?)) (lambda (z4681@z4676 z4682@z4678 z4683@z467a z4684@z467c z4685@z467e z4686@z4680) ((lambda (z468d@internal-exp* z468e@rhs* z468f@lex* z4690@mr z4691@r z4692@init*) (call-with-values (lambda () (z3052@parse-exports (append z465c@main-exp* z468d@internal-exp*))) (lambda (z469d@z469a z469e@z469c) ((lambda (z46a1@exp-id* z46a2@exp-name*) (begin (z2db7@seal-rib! z4657@rib) ((lambda (z46a5@init*) ((lambda (z46a7@rhs*) ((lambda () (begin (z2db9@unseal-rib! z4657@rib) ((lambda (z46a9@loc* z46aa@export-subst) ((lambda (z46ae@errstr) (begin (set! z46ae@errstr '"attempt to export mutated variable") (call-with-values (lambda () (z30b6@make-export-env/macros z468f@lex* z46a9@loc* z4691@r)) (lambda (z46b5@z46b0 z46b6@z46b2 z46b7@z46b4) ((lambda (z46bb@macro* z46bc@global* z46bd@export-env) (begin (for-each (lambda (z46c1@s) ((lambda (z46c3@name z46c4@label) ((lambda (z46c7@p) (if z46c7@p ((lambda (z46c9@b) ((lambda (z46cb@type) (if (eq? z46cb@type 'mutable) (z30ca@syntax-violation 'export z46ae@errstr z46c3@name) (void))) (car z46c9@b))) (cdr z46c7@p)) (void))) (assq z46c4@label z46bd@export-env))) (car z46c1@s) (cdr z46c1@s))) z46aa@export-subst) ((lambda (z46cd@invoke-body z46ce@invoke-definitions) (values (z4638@itc) (z465d@rtc) (z465e@vtc) (z2d68@z2cd7@build-sequence '#f (append z46ce@invoke-definitions (list z46cd@invoke-body))) z46bb@macro* z46aa@export-subst z46bd@export-env)) (z2d6b@z2cdd@build-letrec* '#f z468f@lex* z46a7@rhs* (z30b2@build-exports z46bc@global* z46a5@init*)) (map z2d64@z2c34@build-global-define (map cdr z46bc@global*))))) z46b7@z46b4 z46b6@z46b2 z46b5@z46b0))))) '#f)) (map z2d8b@gen-global z468f@lex*) (z30b4@make-export-subst z46a2@exp-name* z46a1@exp-id*)))))) (z302e@chi-rhs* z468e@rhs* z4691@r z4690@mr))) (z301a@chi-expr* z4692@init* z4691@r z4690@mr)))) z469e@z469c z469d@z469a)))) z4686@z4680 z4685@z467e z4684@z467c z4683@z467a z4682@z4678 z4681@z4676)))) z4673@swap)) (lambda () (begin ((lambda (z46d1@t) (begin (z466b@z4664 z466d@z4668) (set! z466d@z4668 z46d1@t))) (z466b@z4664)) ((lambda (z46d3@t) (begin (z466c@z4666 z466e@z466a) (set! z466e@z466a z46d3@t))) (z466c@z4666)))))) z305e@inv-collector z3060@vis-collector z465d@rtc z465e@vtc)) (map z465a@wrap z4630@b*) (map z465a@wrap z462e@main-exp*) (z305c@make-collector) (z305c@make-collector)))) '#f)) (z305a@make-top-rib z4654@subst-names z4653@subst-labels))) z4650@z464e z464f@z464c)))) z4649@swap)) (lambda () (begin ((lambda (z46d7@t) (begin (z4641@z463a z4643@z463e) (set! z4643@z463e z46d7@t))) (z4641@z463a)) ((lambda (z46d9@t) (begin (z4642@z463c z4644@z4640) (set! z4644@z4640 z46d9@t))) (z4642@z463c)))))) z3062@imp-collector z30d8@top-level-context z4638@itc '#f))) '#f))) (set! z306a@core-library-expander (lambda (z46db@e z46dc@verify-name) (call-with-values (lambda () (z3056@parse-library z46db@e)) (lambda (z46e7@z46e0 z46e8@z46e2 z46e9@z46e4 z46ea@z46e6) ((lambda (z46ef@b* z46f0@imp* z46f1@exp* z46f2@name*) (call-with-values (lambda () (z3054@parse-library-name z46f2@name*)) (lambda (z46fb@z46f8 z46fc@z46fa) ((lambda (z46ff@ver z4700@name) (begin (z46dc@verify-name z4700@name) (call-with-values (lambda () (z3068@library-body-expander z4700@name z46f1@exp* z46f0@imp* z46ef@b* '#f)) (lambda (z4711@z4704 z4712@z4706 z4713@z4708 z4714@z470a z4715@z470c z4716@z470e z4717@z4710) ((lambda (z471f@export-env z4720@export-subst z4721@visit-code z4722@invoke-code z4723@visit-req* z4724@invoke-req* z4725@imp*) (values z4700@name z46ff@ver z4725@imp* z4724@invoke-req* z4723@visit-req* z4722@invoke-code z4721@visit-code z4720@export-subst z471f@export-env)) z4717@z4710 z4716@z470e z4715@z470c z4714@z470a z4713@z4708 z4712@z4706 z4711@z4704))))) z46fc@z46fa z46fb@z46f8)))) z46ea@z46e6 z46e9@z46e4 z46e8@z46e2 z46e7@z46e0))))) (set! z306c@parse-top-level-program (lambda (z472d@e*) ((lambda (z472f@t) ((lambda (z4731@ls/false) (if (and z4731@ls/false (apply (lambda (z4733@import z4734@imp* z4735@b*) (eq? (z30d0@syntax->datum z4733@import) 'import)) z4731@ls/false)) (apply (lambda (z4739@import z473a@imp* z473b@b*) (values z473a@imp* z473b@b*)) z4731@ls/false) ((lambda (z473f@t) ((lambda (z4741@ls/false) (if (and z4741@ls/false (apply (lambda (z4743@import z4744@x z4745@y) (eq? (z30d0@syntax->datum z4743@import) 'import)) z4741@ls/false)) (apply (lambda (z4749@import z474a@x z474b@y) (z30ca@syntax-violation 'expander '"invalid syntax of top-level program" (z2df1@syntax-car z472d@e*))) z4741@ls/false) ((lambda (z474f@t) ((lambda (z4751@ls/false) (if z4751@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) z4751@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z474f@t))) (z2ffc@syntax-dispatch z474f@t '_))) z473f@t))) (z2ffc@syntax-dispatch z473f@t '((any . any) . any)))) z472f@t))) (z2ffc@syntax-dispatch z472f@t '((any . each-any) . each-any)))) z472d@e*))) (set! z306e@top-level-expander (lambda (z4753@e*) (call-with-values (lambda () (z306c@parse-top-level-program z4753@e*)) (lambda (z4759@z4756 z475a@z4758) ((lambda (z475d@b* z475e@imp*) (call-with-values (lambda () (z3068@library-body-expander '() '() z475e@imp* z475d@b* '#t)) (lambda (z476f@z4762 z4770@z4764 z4771@z4766 z4772@z4768 z4773@z476a z4774@z476c z4775@z476e) ((lambda (z477d@export-env z477e@export-subst z477f@visit-code z4780@invoke-code z4781@visit-req* z4782@invoke-req* z4783@imp*) (values z4782@invoke-req* z4780@invoke-code)) z4775@z476e z4774@z476c z4773@z476a z4772@z4768 z4771@z4766 z4770@z4764 z476f@z4762)))) z475a@z4758 z4759@z4756))))) (set! z3070@rp (z2962@z285b@make-record-printer 'env (lambda (z478b@x z478c@p z478d@wr) (display '"#<environment>" z478c@p)))) (set! z3072@make-env (lambda z4791@args (make-simple-struct 'env '4 z4791@args))) (set! z3074@env? (lambda (z4793@x) (and (simple-struct? z4793@x) (eq? (simple-struct-name z4793@x) 'env)))) (set! z3076@env-names (lambda (z4795@x) (simple-struct-ref z4795@x '0))) (set! z3078@set-env-names! (lambda (z4797@x z4798@val) (simple-struct-set! z4797@x '0 z4798@val))) (set! z307a@env-labels (lambda (z479b@x) (simple-struct-ref z479b@x '1))) (set! z307c@set-env-labels! (lambda (z479d@x z479e@val) (simple-struct-set! z479d@x '1 z479e@val))) (set! z307e@env-itc (lambda (z47a1@x) (simple-struct-ref z47a1@x '2))) (set! z3080@set-env-itc! (lambda (z47a3@x z47a4@val) (simple-struct-set! z47a3@x '2 z47a4@val))) (set! z3082@dummy '3) (set! z3084@rp (z2962@z285b@make-record-printer 'interaction-env (lambda (z47a7@x z47a8@p z47a9@wr) (display '"#<environment>" z47a8@p)))) (set! z3086@make-interaction-env (lambda z47ad@args (make-simple-struct 'interaction-env '4 z47ad@args))) (set! z3088@interaction-env? (lambda (z47af@x) (and (simple-struct? z47af@x) (eq? (simple-struct-name z47af@x) 'interaction-env)))) (set! z308a@interaction-env-rib (lambda (z47b1@x) (simple-struct-ref z47b1@x '0))) (set! z308c@set-interaction-env-rib! (lambda (z47b3@x z47b4@val) (simple-struct-set! z47b3@x '0 z47b4@val))) (set! z308e@interaction-env-r (lambda (z47b7@x) (simple-struct-ref z47b7@x '1))) (set! z3090@set-interaction-env-r! (lambda (z47b9@x z47ba@val) (simple-struct-set! z47b9@x '1 z47ba@val))) (set! z3092@interaction-env-locs (lambda (z47bd@x) (simple-struct-ref z47bd@x '2))) (set! z3094@set-interaction-env-locs! (lambda (z47bf@x z47c0@val) (simple-struct-set! z47bf@x '2 z47c0@val))) (set! z3096@dummy '3) (set! z3098@interaction-environment-symbols (lambda () (z30a0@environment-symbols (z30d6@interaction-environment)))) (set! z309a@environment-bindings (lambda (z47c3@e) (vector->list (vector-map (lambda (z47c5@name z47c6@label) (z309c@parse-binding (cons z47c5@name (z2c2c@z2a76@imported-label->binding z47c6@label)))) (z3076@env-names z47c3@e) (z307a@env-labels z47c3@e))))) (set! z309c@parse-binding (lambda (z47c9@b) (cons (car z47c9@b) ((lambda (z47cb@t) (if (memv z47cb@t '(core-prim global)) 'procedure (if (memv z47cb@t '(core-macro macro global-macro)) 'syntax (if (memv z47cb@t '($core-rtd)) 'record (if (eq? (car z47c9@b) (cadr z47c9@b)) 'syntax 'unknown))))) (cadr z47c9@b))))) (set! z309e@environment? (lambda (z47cd@x) (or (z3074@env? z47cd@x) (z3088@interaction-env? z47cd@x)))) (set! z30a0@environment-symbols (lambda (z47cf@x) (if (z3074@env? z47cf@x) (vector->list (z3076@env-names z47cf@x)) (if (z3088@interaction-env? z47cf@x) (map values (z2d99@rib-sym* (z308a@interaction-env-rib z47cf@x))) (assertion-violation 'environment-symbols '"not an environment" z47cf@x))))) (set! z30a2@environment (lambda z47d1@imp* ((lambda (z47d3@itc) ((lambda (z47d9@z47d6 z47da@z47d8) ((lambda (z47dd@swap) (dynamic-wind z47dd@swap (lambda () (call-with-values (lambda () (z3058@parse-import-spec* z47d1@imp*)) (lambda (z47e3@z47e0 z47e4@z47e2) ((lambda (z47e7@subst-labels z47e8@subst-names) (z3072@make-env z47e8@subst-names z47e7@subst-labels z47d3@itc)) z47e4@z47e2 z47e3@z47e0)))) z47dd@swap)) (lambda () ((lambda (z47eb@t) (begin (z47d9@z47d6 z47da@z47d8) (set! z47da@z47d8 z47eb@t))) (z47d9@z47d6))))) z3062@imp-collector z47d3@itc)) (z305c@make-collector)))) (set! z30a4@null-environment (lambda (z47ed@n) (begin (if (not (eqv? z47ed@n '5)) (assertion-violation 'null-environment '"not 5" z47ed@n) (void)) (z30a2@environment '(psyntax null-environment-5))))) (set! z30a6@scheme-report-environment (lambda (z47ef@n) (begin (if (not (eqv? z47ef@n '5)) (assertion-violation 'scheme-report-environment '"not 5" z47ef@n) (void)) (z30a2@environment '(psyntax scheme-report-environment-5))))) (set! z30a8@expand (lambda (z47f1@x z47f2@env) (if (z3074@env? z47f2@env) ((lambda (z47f5@rib) ((lambda (z47f7@x z47f8@itc z47f9@rtc z47fa@vtc) ((lambda (z47ff@x) (begin (z2db7@seal-rib! z47f5@rib) (values z47ff@x (z47f9@rtc)))) ((lambda (z4811@z4802 z4812@z4804 z4813@z4806 z4814@z4808 z4815@z480a z4816@z480c z4817@z480e z4818@z4810) ((lambda (z4821@swap) (dynamic-wind z4821@swap (lambda () (z301e@chi-expr z47f7@x '() '())) z4821@swap)) (lambda () (begin ((lambda (z4823@t) (begin (z4811@z4802 z4815@z480a) (set! z4815@z480a z4823@t))) (z4811@z4802)) ((lambda (z4825@t) (begin (z4812@z4804 z4816@z480c) (set! z4816@z480c z4825@t))) (z4812@z4804)) ((lambda (z4827@t) (begin (z4813@z4806 z4817@z480e) (set! z4817@z480e z4827@t))) (z4813@z4806)) ((lambda (z4829@t) (begin (z4814@z4808 z4818@z4810) (set! z4818@z4810 z4829@t))) (z4814@z4808)))))) z30d8@top-level-context z305e@inv-collector z3060@vis-collector z3062@imp-collector '#f z47f9@rtc z47fa@vtc z47f8@itc))) (z2dbf@make-stx z47f1@x z2d85@top-mark* (list z47f5@rib) '()) (z307e@env-itc z47f2@env) (z305c@make-collector) (z305c@make-collector))) (z305a@make-top-rib (z3076@env-names z47f2@env) (z307a@env-labels z47f2@env))) (if (z3088@interaction-env? z47f2@env) ((lambda (z482b@rib z482c@r z482d@rtc) ((lambda (z4831@x) (call-with-values (lambda () ((lambda (z4847@z4838 z4848@z483a z4849@z483c z484a@z483e z484b@z4840 z484c@z4842 z484d@z4844 z484e@z4846) ((lambda (z4857@swap) (dynamic-wind z4857@swap (lambda () (z3066@chi-interaction-expr z4831@x z482b@rib z482c@r)) z4857@swap)) (lambda () (begin ((lambda (z4859@t) (begin (z4847@z4838 z484b@z4840) (set! z484b@z4840 z4859@t))) (z4847@z4838)) ((lambda (z485b@t) (begin (z4848@z483a z484c@z4842) (set! z484c@z4842 z485b@t))) (z4848@z483a)) ((lambda (z485d@t) (begin (z4849@z483c z484d@z4844) (set! z484d@z4844 z485d@t))) (z4849@z483c)) ((lambda (z485f@t) (begin (z484a@z483e z484e@z4846) (set! z484e@z4846 z485f@t))) (z484a@z483e)))))) z30d8@top-level-context z305e@inv-collector z3060@vis-collector z3062@imp-collector z47f2@env z482d@rtc (z305c@make-collector) (z305c@make-collector))) (lambda (z4861@z4834 z4862@z4836) ((lambda (z4865@r^ z4866@e) (begin (z3090@set-interaction-env-r! z47f2@env z4865@r^) (values z4866@e (z482d@rtc)))) z4862@z4836 z4861@z4834)))) (z2dbf@make-stx z47f1@x z2d85@top-mark* (list z482b@rib) '()))) (z308a@interaction-env-rib z47f2@env) (z308e@interaction-env-r z47f2@env) (z305c@make-collector)) (assertion-violation 'expand '"not an environment" z47f2@env))))) (set! z30aa@eval (lambda (z4869@x z486a@env) (begin (if (not (z309e@environment? z486a@env)) (error 'eval '"not an environment" z486a@env) (void)) (call-with-values (lambda () (z30a8@expand z4869@x z486a@env)) (lambda (z4871@z486e z4872@z4870) ((lambda (z4875@invoke-req* z4876@x) (begin (for-each z2c2d@z2a78@invoke-library z4875@invoke-req*) (eval-core (z29ba@z2972@expanded->core z4876@x)))) z4872@z4870 z4871@z486e)))))) (set! z30ac@library-expander (lambda z48e7 ((lambda (z48e8) (if (= z48e8 '3) (apply (lambda (z4879@x z487a@filename z487b@verify-name) ((lambda (z4880@build-visit-code z4882@visit!) (begin (set! z4880@build-visit-code (lambda (z48d5@macro*) (if (null? z48d5@macro*) (z2d69@z2cd9@build-void) (z2d68@z2cd7@build-sequence '#f (map (lambda (z48d7@x) ((lambda (z48d9@loc z48da@src) (list 'set! z48d9@loc z48da@src)) (car z48d7@x) (cddr z48d7@x))) z48d5@macro*))))) (set! z4882@visit! (lambda (z48cd@macro*) (for-each (lambda (z48cf@x) ((lambda (z48d1@loc z48d2@proc) (set-symbol-value! z48d1@loc z48d2@proc)) (car z48cf@x) (cadr z48cf@x))) z48cd@macro*))) (call-with-values (lambda () (z306a@core-library-expander z4879@x z487b@verify-name)) (lambda (z4895@z4884 z4896@z4886 z4897@z4888 z4898@z488a z4899@z488c z489a@z488e z489b@z4890 z489c@z4892 z489d@z4894) ((lambda (z48a7@export-env z48a8@export-subst z48a9@macro* z48aa@invoke-code z48ab@vis* z48ac@inv* z48ad@imp* z48ae@ver z48af@name) ((lambda (z48b9@id z48ba@name z48bb@ver z48bc@imp* z48bd@vis* z48be@inv* z48bf@visit-proc z48c0@invoke-proc z48c1@visit-code z48c2@invoke-code) (begin (z2c2b@z2a74@install-library z48b9@id z48ba@name z48bb@ver z48bc@imp* z48bd@vis* z48be@inv* z48a8@export-subst z48a7@export-env z48bf@visit-proc z48c0@invoke-proc z48c1@visit-code z48c2@invoke-code '#t z487a@filename) (values z48b9@id z48ba@name z48bb@ver z48bc@imp* z48bd@vis* z48be@inv* z48c2@invoke-code z48c1@visit-code z48a8@export-subst z48a7@export-env))) (gensym) z48af@name z48ae@ver (map z2c31@z2a80@library-spec z48ad@imp*) (map z2c31@z2a80@library-spec z48ab@vis*) (map z2c31@z2a80@library-spec z48ac@inv*) (lambda () (z4882@visit! z48a9@macro*)) (lambda () (eval-core (z29ba@z2972@expanded->core z48aa@invoke-code))) (z4880@build-visit-code z48a9@macro*) z48aa@invoke-code)) z489d@z4894 z489c@z4892 z489b@z4890 z489a@z488e z4899@z488c z4898@z488a z4897@z4888 z4896@z4886 z4895@z4884))))) '#f '#f)) z48e7) (if (= z48e8 '2) (apply (lambda (z48dd@x z48de@filename) (z30ac@library-expander z48dd@x z48de@filename (lambda (z48e1@x) (values)))) z48e7) (if (= z48e8 '1) (apply (lambda (z48e3@x) (z30ac@library-expander z48e3@x '#f (lambda (z48e5@x) (values)))) z48e7) (error 'apply '"invalid arg count"))))) (length z48e7)))) (set! z30ae@boot-library-expand (lambda (z48e9@x) (call-with-values (lambda () (z30ac@library-expander z48e9@x)) (lambda (z48ff@z48ec z4900@z48ee z4901@z48f0 z4902@z48f2 z4903@z48f4 z4904@z48f6 z4905@z48f8 z4906@z48fa z4907@z48fc z4908@z48fe) ((lambda (z4913@export-env z4914@export-subst z4915@visit-code z4916@invoke-code z4917@inv* z4918@vis* z4919@imp* z491a@ver z491b@name z491c@id) (values z491b@name z4916@invoke-code z4914@export-subst z4913@export-env)) z4908@z48fe z4907@z48fc z4906@z48fa z4905@z48f8 z4904@z48f6 z4903@z48f4 z4902@z48f2 z4901@z48f0 z4900@z48ee z48ff@z48ec))))) (set! z30b0@rev-map-append (lambda (z4927@f z4928@ls z4929@ac) (if (null? z4928@ls) z4929@ac (z30b0@rev-map-append z4927@f (cdr z4928@ls) (cons (z4927@f (car z4928@ls)) z4929@ac))))) (set! z30b2@build-exports (lambda (z492d@lex*+loc* z492e@init*) (z2d68@z2cd7@build-sequence '#f (cons (z2d69@z2cd9@build-void) (z30b0@rev-map-append (lambda (z4931@x) (list 'set! (cdr z4931@x) (car z4931@x))) z492d@lex*+loc* z492e@init*))))) (set! z30b4@make-export-subst (lambda (z4933@name* z4934@id*) (map (lambda (z4937@name z4938@id) ((lambda (z493b@label) (begin (if (not z493b@label) (z30ca@syntax-violation '#f '"cannot export unbound identifier" z4938@id) (void)) (cons z4937@name z493b@label))) (z2e0d@id->label z4938@id))) z4933@name* z4934@id*))) (set! z30b6@make-export-env/macros (lambda (z493d@lex* z493e@loc* z493f@r) ((lambda (z4944@lookup) (begin (set! z4944@lookup (lambda (z4961@x) ((letrec ((z4963@f (lambda (z4965@x z4966@lex* z4967@loc*) (if (pair? z4966@lex*) (if (eq? z4965@x (car z4966@lex*)) (car z4967@loc*) (z4963@f z4965@x (cdr z4966@lex*) (cdr z4967@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) z4963@f) z4961@x z493d@lex* z493e@loc*))) ((letrec ((z4945@f (lambda (z4947@r z4948@env z4949@global* z494a@macro*) (if (null? z4947@r) (values z4948@env z4949@global* z494a@macro*) ((lambda (z494f@x) ((lambda (z4951@label z4952@b) ((lambda (z4955@t) (if (memv z4955@t '(lexical)) ((lambda (z4957@v) ((lambda (z4959@loc z495a@type) (z4945@f (cdr z4947@r) (cons (cons* z4951@label z495a@type z4959@loc) z4948@env) (cons (cons (z2f88@lexical-var z4957@v) z4959@loc) z4949@global*) z494a@macro*)) (z4944@lookup (z2f88@lexical-var z4957@v)) (if (z2f8a@lexical-mutable? z4957@v) 'mutable 'global))) (z2e15@binding-value z4952@b)) (if (memv z4955@t '(local-macro)) ((lambda (z495d@loc) (z4945@f (cdr z4947@r) (cons (cons* z4951@label 'global-macro z495d@loc) z4948@env) z4949@global* (cons (cons z495d@loc (z2e15@binding-value z4952@b)) z494a@macro*))) (gensym)) (if (memv z4955@t '(local-macro!)) ((lambda (z495f@loc) (z4945@f (cdr z4947@r) (cons (cons* z4951@label 'global-macro! z495f@loc) z4948@env) z4949@global* (cons (cons z495f@loc (z2e15@binding-value z4952@b)) z494a@macro*))) (gensym)) (if (memv z4955@t '($rtd $module)) (z4945@f (cdr z4947@r) (cons z494f@x z4948@env) z4949@global* z494a@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (z2e13@binding-type z4952@b) (z2e15@binding-value z4952@b))))))) (z2e13@binding-type z4952@b))) (car z494f@x) (cdr z494f@x))) (car z4947@r)))))) z4945@f) z493f@r '() '() '()))) '#f))) (set! z30b8@generate-temporaries (lambda (z496b@ls) ((lambda (z496d@t) ((lambda (z496f@ls/false) (if z496f@ls/false (apply (lambda (z4971@ls) (map (lambda (z4973@x) (z2dbf@make-stx ((lambda (z4975@x) (if (or (symbol? z4975@x) (string? z4975@x)) (gensym z4975@x) (gensym 't))) (z30d0@syntax->datum z4973@x)) z2d85@top-mark* '() '())) z4971@ls)) z496f@ls/false) ((lambda (z4977@t) ((lambda (z4979@ls/false) (if z4979@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) z4979@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z4977@t))) (z2ffc@syntax-dispatch z4977@t '_))) z496d@t))) (z2ffc@syntax-dispatch z496d@t 'each-any))) z496b@ls))) (set! z30ba@free-identifier=? (lambda (z497b@x z497c@y) (if (z2df7@id? z497b@x) (if (z2df7@id? z497c@y) (z2dfd@free-id=? z497b@x z497c@y) (assertion-violation 'free-identifier=? '"not an identifier" z497c@y)) (assertion-violation 'free-identifier=? '"not an identifier" z497b@x)))) (set! z30bc@bound-identifier=? (lambda (z497f@x z4980@y) (if (z2df7@id? z497f@x) (if (z2df7@id? z4980@y) (z2dfb@bound-id=? z497f@x z4980@y) (assertion-violation 'bound-identifier=? '"not an identifier" z4980@y)) (assertion-violation 'bound-identifier=? '"not an identifier" z497f@x)))) (set! z30be@make-source-condition (lambda (z4983@x) ((lambda (z498d@z4988 z498f@z498a z4991@z4989 z4994@z4987 z4996@make-source-condition z4998@z4985 z499a@z4986 z499c@source-condition? z499e@source-filename z49a0@source-character) (begin (set! z498d@z4988 (make-record-type-descriptor '&source-information z4dde@z4b25@&condition-rtd 'z498b '#f '#f '#((immutable file-name) (immutable character)))) (set! z498f@z498a '#f) (set! z4991@z4989 (make-record-constructor-descriptor z498d@z4988 z4ddf@z4b27@&condition-rcd z498f@z498a)) (set! z4994@z4987 (record-predicate z498d@z4988)) (set! z4996@make-source-condition (record-constructor z4991@z4989)) (set! z4998@z4985 (record-accessor z498d@z4988 '0)) (set! z499a@z4986 (record-accessor z498d@z4988 '1)) (set! z499c@source-condition? (condition-predicate z498d@z4988)) (set! z499e@source-filename (condition-accessor z498d@z4988 z4998@z4985)) (set! z49a0@source-character (condition-accessor z498d@z4988 z499a@z4986)) (if (pair? z4983@x) (z4996@make-source-condition (car z4983@x) (cdr z4983@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! z30c0@extract-position-condition (lambda (z49a1@x) (z30be@make-source-condition (z30c2@expression-position z49a1@x)))) (set! z30c2@expression-position (lambda (z49a3@x) (and (z2dc1@stx? z49a3@x) ((lambda (z49a5@x) (and (z295a@z284b@annotation? z49a5@x) (z295b@z284d@annotation-source z49a5@x))) (z2dc3@stx-expr z49a3@x))))) (set! z30c4@assertion-error (lambda (z49a7@expr z49a8@pos) (raise (condition (z4e0e@z4be9@make-assertion-violation) (z4e20@z4c1b@make-who-condition 'assert) (z4de4@z4b7c@make-message-condition '"assertion failed") (z4e16@z4c00@make-irritants-condition (list z49a7@expr)) (z30be@make-source-condition z49a8@pos))))) (set! z30c6@syntax-error (lambda (z49ab@x . z49ad@args) (begin (if (not (for-all string? z49ad@args)) (assertion-violation 'syntax-error '"invalid argument" z49ad@args) (void)) (raise (condition (z4de4@z4b7c@make-message-condition (if (null? z49ad@args) '"invalid syntax" (apply string-append z49ad@args))) (z4e42@z4c77@make-syntax-violation (z30d0@syntax->datum z49ab@x) '#f) (z30c0@extract-position-condition z49ab@x)))))) (set! z30c8@syntax-violation* (lambda (z49af@who z49b0@msg z49b1@form z49b2@condition-object) (begin (if (not (string? z49b0@msg)) (assertion-violation 'syntax-violation '"message is not a string" z49b0@msg) (void)) ((lambda (z49b7@who) (raise (condition (if z49b7@who (z4e20@z4c1b@make-who-condition z49b7@who) (condition)) (z4de4@z4b7c@make-message-condition z49b0@msg) z49b2@condition-object (z30c0@extract-position-condition z49b1@form)))) (if (or (string? z49af@who) (symbol? z49af@who)) z49af@who (if (not z49af@who) ((lambda (z49b9@t) ((lambda (z49bb@ls/false) (if (and z49bb@ls/false (apply (lambda (z49bd@id) (z2df7@id? z49bd@id)) z49bb@ls/false)) (apply (lambda (z49bf@id) (z30d0@syntax->datum z49bf@id)) z49bb@ls/false) ((lambda (z49c1@t) ((lambda (z49c3@ls/false) (if (and z49c3@ls/false (apply (lambda (z49c5@id z49c6@rest) (z2df7@id? z49c5@id)) z49c3@ls/false)) (apply (lambda (z49c9@id z49ca@rest) (z30d0@syntax->datum z49c9@id)) z49c3@ls/false) ((lambda (z49cd@t) ((lambda (z49cf@ls/false) (if z49cf@ls/false (apply (lambda () '#f) z49cf@ls/false) (z30ca@syntax-violation '#f '"invalid syntax" z49cd@t))) (z2ffc@syntax-dispatch z49cd@t '_))) z49c1@t))) (z2ffc@syntax-dispatch z49c1@t '(any . any)))) z49b9@t))) (z2ffc@syntax-dispatch z49b9@t 'any))) z49b1@form) (assertion-violation 'syntax-violation '"invalid who argument" z49af@who))))))) (set! z30ca@syntax-violation (lambda z49df ((lambda (z49e0) (if (= z49e0 '3) (apply (lambda (z49d1@who z49d2@msg z49d3@form) (z30ca@syntax-violation z49d1@who z49d2@msg z49d3@form '#f)) z49df) (if (= z49e0 '4) (apply (lambda (z49d7@who z49d8@msg z49d9@form z49da@subform) (z30c8@syntax-violation* z49d7@who z49d8@msg z49d9@form (z4e42@z4c77@make-syntax-violation (z30d0@syntax->datum z49d9@form) (z30d0@syntax->datum z49da@subform)))) z49df) (error 'apply '"invalid arg count")))) (length z49df)))) (set! z30cc@identifier? (lambda (z49e1@x) (z2df7@id? z49e1@x))) (set! z30ce@datum->syntax (lambda (z49e3@id z49e4@datum) (if (z2df7@id? z49e3@id) (z2dd5@datum->stx z49e3@id z49e4@datum) (assertion-violation 'datum->syntax '"not an identifier" z49e3@id)))) (set! z30d0@syntax->datum (lambda (z49e7@x) (z2e0b@stx->datum z49e7@x))) (set! z30d2@compile-r6rs-top-level (lambda (z49e9@x*) (call-with-values (lambda () (z306e@top-level-expander z49e9@x*)) (lambda (z49ef@z49ec z49f0@z49ee) ((lambda (z49f3@invoke-code z49f4@lib*) (lambda () (begin (for-each z2c2d@z2a78@invoke-library z49f4@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (z29ba@z2972@expanded->core z49f3@invoke-code)) (void)) (eval-core (z29ba@z2972@expanded->core z49f3@invoke-code))))) z49f0@z49ee z49ef@z49ec))))) (set! z30d4@pre-compile-r6rs-top-level (lambda (z49f7@x*) (call-with-values (lambda () (z306e@top-level-expander z49f7@x*)) (lambda (z49fd@z49fa z49fe@z49fc) ((lambda (z4a01@invoke-code z4a02@lib*) (begin (for-each z2c2d@z2a78@invoke-library z4a02@lib*) (z2963@z285d@compile-core (z29ba@z2972@expanded->core z4a01@invoke-code)))) z49fe@z49fc z49fd@z49fa))))) (set! z30d6@interaction-environment ((lambda (z4a05@the-env) (lambda () (or z4a05@the-env ((lambda (z4a07@lib z4a08@rib) (begin ((lambda (z4a0b@subst) (begin (z2d9b@set-rib-sym*! z4a08@rib (map car z4a0b@subst)) (z2d9f@set-rib-mark**! z4a08@rib (map (lambda (z4a0d@x) z2d85@top-mark*) z4a0b@subst)) (z2da3@set-rib-label*! z4a08@rib (map cdr z4a0b@subst)))) (z2c08@z2a2e@library-subst z4a07@lib)) ((lambda (z4a0f@env) (begin (set! z4a05@the-env z4a0f@env) z4a0f@env)) (z3086@make-interaction-env z4a08@rib '() '())))) (z2c26@z2a6a@find-library-by-name '(mosh interaction)) (z2daf@make-empty-rib))))) '#f)) (set! z30d8@top-level-context (z2965@z2861@make-parameter '#f)) (begin (set! z4b10@z30d8@top-level-context z30d8@top-level-context) (set! z4b0f@z30d6@interaction-environment z30d6@interaction-environment) (set! z4b0e@z30d4@pre-compile-r6rs-top-level z30d4@pre-compile-r6rs-top-level) (set! z4b0d@z30d2@compile-r6rs-top-level z30d2@compile-r6rs-top-level) (set! z4b0c@z30d0@syntax->datum z30d0@syntax->datum) (set! z4b0b@z30ce@datum->syntax z30ce@datum->syntax) (set! z4b0a@z30cc@identifier? z30cc@identifier?) (set! z4b09@z30ca@syntax-violation z30ca@syntax-violation) (set! z4b08@z30c8@syntax-violation* z30c8@syntax-violation*) (set! z4b07@z30c6@syntax-error z30c6@syntax-error) (set! z4b06@z30c4@assertion-error z30c4@assertion-error) (set! z4b05@z30c2@expression-position z30c2@expression-position) (set! z4b04@z30c0@extract-position-condition z30c0@extract-position-condition) (set! z4b03@z30be@make-source-condition z30be@make-source-condition) (set! z4b02@z30bc@bound-identifier=? z30bc@bound-identifier=?) (set! z4b01@z30ba@free-identifier=? z30ba@free-identifier=?) (set! z4b00@z30b8@generate-temporaries z30b8@generate-temporaries) (set! z4aff@z30b6@make-export-env/macros z30b6@make-export-env/macros) (set! z4afe@z30b4@make-export-subst z30b4@make-export-subst) (set! z4afd@z30b2@build-exports z30b2@build-exports) (set! z4afc@z30b0@rev-map-append z30b0@rev-map-append) (set! z4afb@z30ae@boot-library-expand z30ae@boot-library-expand) (set! z4afa@z30ac@library-expander z30ac@library-expander) (set! z4af9@z30aa@eval z30aa@eval) (set! z4af8@z30a8@expand z30a8@expand) (set! z4af7@z30a6@scheme-report-environment z30a6@scheme-report-environment) (set! z4af6@z30a4@null-environment z30a4@null-environment) (set! z4af5@z30a2@environment z30a2@environment) (set! z4af4@z30a0@environment-symbols z30a0@environment-symbols) (set! z4af3@z309e@environment? z309e@environment?) (set! z4af2@z309c@parse-binding z309c@parse-binding) (set! z4af1@z309a@environment-bindings z309a@environment-bindings) (set! z4af0@z3098@interaction-environment-symbols z3098@interaction-environment-symbols) (set! z4aef@z3096@dummy z3096@dummy) (set! z4aee@z3094@set-interaction-env-locs! z3094@set-interaction-env-locs!) (set! z4aed@z3092@interaction-env-locs z3092@interaction-env-locs) (set! z4aec@z3090@set-interaction-env-r! z3090@set-interaction-env-r!) (set! z4aeb@z308e@interaction-env-r z308e@interaction-env-r) (set! z4aea@z308c@set-interaction-env-rib! z308c@set-interaction-env-rib!) (set! z4ae9@z308a@interaction-env-rib z308a@interaction-env-rib) (set! z4ae8@z3088@interaction-env? z3088@interaction-env?) (set! z4ae7@z3086@make-interaction-env z3086@make-interaction-env) (set! z4ae6@z3084@rp z3084@rp) (set! z4ae5@z3082@dummy z3082@dummy) (set! z4ae4@z3080@set-env-itc! z3080@set-env-itc!) (set! z4ae3@z307e@env-itc z307e@env-itc) (set! z4ae2@z307c@set-env-labels! z307c@set-env-labels!) (set! z4ae1@z307a@env-labels z307a@env-labels) (set! z4ae0@z3078@set-env-names! z3078@set-env-names!) (set! z4adf@z3076@env-names z3076@env-names) (set! z4ade@z3074@env? z3074@env?) (set! z4add@z3072@make-env z3072@make-env) (set! z4adc@z3070@rp z3070@rp) (set! z4adb@z306e@top-level-expander z306e@top-level-expander) (set! z4ada@z306c@parse-top-level-program z306c@parse-top-level-program) (set! z4ad9@z306a@core-library-expander z306a@core-library-expander) (set! z4ad8@z3068@library-body-expander z3068@library-body-expander) (set! z4ad7@z3066@chi-interaction-expr z3066@chi-interaction-expr) (set! z4ad6@z3064@chi-library-internal z3064@chi-library-internal) (set! z4ad5@z3062@imp-collector z3062@imp-collector) (set! z4ad4@z3060@vis-collector z3060@vis-collector) (set! z4ad3@z305e@inv-collector z305e@inv-collector) (set! z4ad2@z305c@make-collector z305c@make-collector) (set! z4ad1@z305a@make-top-rib z305a@make-top-rib) (set! z4ad0@z3058@parse-import-spec* z3058@parse-import-spec*) (set! z4acf@z3056@parse-library z3056@parse-library) (set! z4ace@z3054@parse-library-name z3054@parse-library-name) (set! z4acd@z3052@parse-exports z3052@parse-exports) (set! z4acc@z3050@expand-transformer z3050@expand-transformer) (set! z4acb@z304e@chi-body* z304e@chi-body*) (set! z4aca@z304c@chi-internal-module z304c@chi-internal-module) (set! z4ac9@z304a@module-interface-exp-id* z304a@module-interface-exp-id*) (set! z4ac8@z3048@dummy z3048@dummy) (set! z4ac7@z3046@set-module-interface-exp-lab-vec! z3046@set-module-interface-exp-lab-vec!) (set! z4ac6@z3044@module-interface-exp-lab-vec z3044@module-interface-exp-lab-vec) (set! z4ac5@z3042@set-module-interface-exp-id-vec! z3042@set-module-interface-exp-id-vec!) (set! z4ac4@z3040@module-interface-exp-id-vec z3040@module-interface-exp-id-vec) (set! z4ac3@z303e@set-module-interface-first-mark! z303e@set-module-interface-first-mark!) (set! z4ac2@z303c@module-interface-first-mark z303c@module-interface-first-mark) (set! z4ac1@z303a@module-interface? z303a@module-interface?) (set! z4ac0@z3038@make-module-interface z3038@make-module-interface) (set! z4abf@z3036@parse-module z3036@parse-module) (set! z4abe@z3034@chi-internal z3034@chi-internal) (set! z4abd@z3032@find-dups z3032@find-dups) (set! z4abc@z3030@find-bound=? z3030@find-bound=?) (set! z4abb@z302e@chi-rhs* z302e@chi-rhs*) (set! z4aba@z302c@expand-interaction-rhs*/init* z302c@expand-interaction-rhs*/init*) (set! z4ab9@z302a@chi-rhs z302a@chi-rhs) (set! z4ab8@z3028@chi-defun z3028@chi-defun) (set! z4ab7@z3026@chi-lambda-clause* z3026@chi-lambda-clause*) (set! z4ab6@z3024@chi-lambda-clause z3024@chi-lambda-clause) (set! z4ab5@z3022@verify-formals z3022@verify-formals) (set! z4ab4@z3020@chi-set! z3020@chi-set!) (set! z4ab3@z301e@chi-expr z301e@chi-expr) (set! z4ab2@z301c@chi-application z301c@chi-application) (set! z4ab1@z301a@chi-expr* z301a@chi-expr*) (set! z4ab0@z3018@chi-global-macro z3018@chi-global-macro) (set! z4aaf@z3016@chi-local-macro z3016@chi-local-macro) (set! z4aae@z3014@chi-macro z3014@chi-macro) (set! z4aad@z3012@do-macro-call z3012@do-macro-call) (set! z4aac@z3010@local-macro-transformer z3010@local-macro-transformer) (set! z4aab@z300e@macro-transformer z300e@macro-transformer) (set! z4aaa@z300c@symbol-macro z300c@symbol-macro) (set! z4aa9@z300a@core-macro-transformer z300a@core-macro-transformer) (set! z4aa8@z3008@syntax-transformer z3008@syntax-transformer) (set! z4aa7@z3006@ellipsis-map z3006@ellipsis-map) (set! z4aa6@z3004@syntax-case-transformer z3004@syntax-case-transformer) (set! z4aa5@z3002@verify-literals z3002@verify-literals) (set! z4aa4@z3000@underscore? z3000@underscore?) (set! z4aa3@z2ffe@ellipsis? z2ffe@ellipsis?) (set! z4aa2@z2ffc@syntax-dispatch z2ffc@syntax-dispatch) (set! z4aa1@z2ffa@convert-pattern z2ffa@convert-pattern) (set! z4aa0@z2ff8@foreign-call-transformer z2ff8@foreign-call-transformer) (set! z4a9f@z2ff6@parameterize-macro z2ff6@parameterize-macro) (set! z4a9e@z2ff4@incorrect-usage-macro z2ff4@incorrect-usage-macro) (set! z4a9d@z2ff2@define-condition-type-macro z2ff2@define-condition-type-macro) (set! z4a9c@z2ff0@define-record-type-macro z2ff0@define-record-type-macro) (set! z4a9b@z2fee@define-struct-macro z2fee@define-struct-macro) (set! z4a9a@z2fec@quasisyntax-macro z2fec@quasisyntax-macro) (set! z4a99@z2fea@quasiquote-macro z2fea@quasiquote-macro) (set! z4a98@z2fe8@syntax-rules-macro z2fe8@syntax-rules-macro) (set! z4a97@z2fe6@include-into-macro z2fe6@include-into-macro) (set! z4a96@z2fe4@include-macro z2fe4@include-macro) (set! z4a95@z2fe2@do-include z2fe2@do-include) (set! z4a94@z2fe0@cond-macro z2fe0@cond-macro) (set! z4a93@z2fde@and-macro z2fde@and-macro) (set! z4a92@z2fdc@or-macro z2fdc@or-macro) (set! z4a91@z2fda@let*-macro z2fda@let*-macro) (set! z4a90@z2fd8@do-macro z2fd8@do-macro) (set! z4a8f@z2fd6@identifier-syntax-macro z2fd6@identifier-syntax-macro) (set! z4a8e@z2fd4@endianness-macro z2fd4@endianness-macro) (set! z4a8d@z2fd2@assert-macro z2fd2@assert-macro) (set! z4a8c@z2fd0@delay-macro z2fd0@delay-macro) (set! z4a8b@z2fce@time-macro z2fce@time-macro) (set! z4a8a@z2fcc@define-enumeration-macro z2fcc@define-enumeration-macro) (set! z4a89@z2fca@guard-macro z2fca@guard-macro) (set! z4a88@z2fc8@trace-letrec-syntax-macro z2fc8@trace-letrec-syntax-macro) (set! z4a87@z2fc6@trace-let-syntax-macro z2fc6@trace-let-syntax-macro) (set! z4a86@z2fc4@trace-let/rec-syntax z2fc4@trace-let/rec-syntax) (set! z4a85@z2fc2@trace-define-syntax-macro z2fc2@trace-define-syntax-macro) (set! z4a84@z2fc0@trace-define-macro z2fc0@trace-define-macro) (set! z4a83@z2fbe@trace-lambda-macro z2fbe@trace-lambda-macro) (set! z4a82@z2fbc@let*-values-macro z2fbc@let*-values-macro) (set! z4a81@z2fba@let-values-macro z2fba@let-values-macro) (set! z4a80@z2fb8@let-macro z2fb8@let-macro) (set! z4a7f@z2fb6@invalid-fmls-error z2fb6@invalid-fmls-error) (set! z4a7e@z2fb4@with-syntax-macro z2fb4@with-syntax-macro) (set! z4a7d@z2fb2@bless z2fb2@bless) (set! z4a7c@z2fb0@lambda-transformer z2fb0@lambda-transformer) (set! z4a7b@z2fae@case-lambda-transformer z2fae@case-lambda-transformer) (set! z4a7a@z2fac@quote-transformer z2fac@quote-transformer) (set! z4a79@z2faa@case-macro z2faa@case-macro) (set! z4a78@z2fa8@or-transformer z2fa8@or-transformer) (set! z4a77@z2fa6@and-transformer z2fa6@and-transformer) (set! z4a76@z2fa4@if-transformer z2fa4@if-transformer) (set! z4a75@z2fa2@unless-macro z2fa2@unless-macro) (set! z4a74@z2fa0@when-macro z2fa0@when-macro) (set! z4a73@z2f9e@record-constructor-descriptor-transformer z2f9e@record-constructor-descriptor-transformer) (set! z4a72@z2f9c@record-type-descriptor-transformer z2f9c@record-type-descriptor-transformer) (set! z4a71@z2f9a@type-descriptor-transformer z2f9a@type-descriptor-transformer) (set! z4a70@z2f98@fluid-let-syntax-transformer z2f98@fluid-let-syntax-transformer) (set! z4a6f@z2f96@letrec*-transformer z2f96@letrec*-transformer) (set! z4a6e@z2f94@letrec-transformer z2f94@letrec-transformer) (set! z4a6d@z2f92@letrec-helper z2f92@letrec-helper) (set! z4a6c@z2f90@add-lexicals z2f90@add-lexicals) (set! z4a6b@z2f8e@add-lexical z2f8e@add-lexical) (set! z4a6a@z2f8c@set-lexical-mutable! z2f8c@set-lexical-mutable!) (set! z4a69@z2f8a@lexical-mutable? z2f8a@lexical-mutable?) (set! z4a68@z2f88@lexical-var z2f88@lexical-var) (set! z4a67@z2f86@scheme-stx z2f86@scheme-stx) (set! z4a66@z2f84@scheme-stx-hashtable z2f84@scheme-stx-hashtable) (set! z4a65@z2f82@parse-define-syntax z2f82@parse-define-syntax) (set! z4a64@z2f80@parse-define z2f80@parse-define) (set! z4a63@z2e2f@make-eval-transformer z2e2f@make-eval-transformer) (set! z4a62@z2e2d@variable-transformer-procedure z2e2d@variable-transformer-procedure) (set! z4a61@z2e2b@variable-transformer? z2e2b@variable-transformer?) (set! z4a60@z2e29@make-variable-transformer z2e29@make-variable-transformer) (set! z4a5f@z2e27@sanitize-binding z2e27@sanitize-binding) (set! z4a5e@z2e19@syntax-type z2e19@syntax-type) (set! z4a5d@z2e17@raise-unbound-error z2e17@raise-unbound-error) (set! z4a5c@z2e15@binding-value z2e15@binding-value) (set! z4a5b@z2e13@binding-type z2e13@binding-type) (set! z4a5a@z2e11@make-binding z2e11@make-binding) (set! z4a59@z2e0f@label->binding z2e0f@label->binding) (set! z4a58@z2e0d@id->label z2e0d@id->label) (set! z4a57@z2e0b@stx->datum z2e0b@stx->datum) (set! z4a56@z2e09@strip z2e09@strip) (set! z4a55@z2e07@strip-annotations z2e07@strip-annotations) (set! z4a54@z2e05@self-evaluating? z2e05@self-evaluating?) (set! z4a53@z2e03@bound-id-member? z2e03@bound-id-member?) (set! z4a52@z2e01@distinct-bound-ids? z2e01@distinct-bound-ids?) (set! z4a51@z2dff@valid-bound-ids? z2dff@valid-bound-ids?) (set! z4a50@z2dfd@free-id=? z2dfd@free-id=?) (set! z4a4f@z2dfb@bound-id=? z2dfb@bound-id=?) (set! z4a4e@z2df9@id->sym z2df9@id->sym) (set! z4a4d@z2df7@id? z2df7@id?) (set! z4a4c@z2df5@syntax->list z2df5@syntax->list) (set! z4a4b@z2df3@syntax-cdr z2df3@syntax-cdr) (set! z4a4a@z2df1@syntax-car z2df1@syntax-car) (set! z4a49@z2def@syntax-list? z2def@syntax-list?) (set! z4a48@z2ded@syntax-null? z2ded@syntax-null?) (set! z4a47@z2deb@syntax-vector? z2deb@syntax-vector?) (set! z4a46@z2de9@syntax-pair? z2de9@syntax-pair?) (set! z4a45@z2de7@syntax-vector->list z2de7@syntax-vector->list) (set! z4a44@z2de5@syntax-kind? z2de5@syntax-kind?) (set! z4a43@z2de3@add-subst z2de3@add-subst) (set! z4a42@z2de1@add-mark z2de1@add-mark) (set! z4a41@z2ddf@mkstx z2ddf@mkstx) (set! z4a40@z2ddd@join-wraps z2ddd@join-wraps) (set! z4a3f@z2ddb@anti-mark? z2ddb@anti-mark?) (set! z4a3e@z2dd9@anti-mark z2dd9@anti-mark) (set! z4a3d@z2dd7@gen-mark z2dd7@gen-mark) (set! z4a3c@z2dd5@datum->stx z2dd5@datum->stx) (set! z4a3b@z2dd3@dummy z2dd3@dummy) (set! z4a3a@z2dd1@set-stx-ae*! z2dd1@set-stx-ae*!) (set! z4a39@z2dcf@stx-ae* z2dcf@stx-ae*) (set! z4a38@z2dcd@set-stx-subst*! z2dcd@set-stx-subst*!) (set! z4a37@z2dcb@stx-subst* z2dcb@stx-subst*) (set! z4a36@z2dc9@set-stx-mark*! z2dc9@set-stx-mark*!) (set! z4a35@z2dc7@stx-mark* z2dc7@stx-mark*) (set! z4a34@z2dc5@set-stx-expr! z2dc5@set-stx-expr!) (set! z4a33@z2dc3@stx-expr z2dc3@stx-expr) (set! z4a32@z2dc1@stx? z2dc1@stx?) (set! z4a31@z2dbf@make-stx z2dbf@make-stx) (set! z4a30@z2dbd@rp z2dbd@rp) (set! z4a2f@z2dbb@make-full-rib z2dbb@make-full-rib) (set! z4a2e@z2db9@unseal-rib! z2db9@unseal-rib!) (set! z4a2d@z2db7@seal-rib! z2db7@seal-rib!) (set! z4a2c@z2db5@make-rib-map z2db5@make-rib-map) (set! z4a2b@z2db3@extend-rib/nc! z2db3@extend-rib/nc!) (set! z4a2a@z2db1@extend-rib! z2db1@extend-rib!) (set! z4a29@z2daf@make-empty-rib z2daf@make-empty-rib) (set! z4a28@z2dad@dummy z2dad@dummy) (set! z4a27@z2dab@set-rib-cache! z2dab@set-rib-cache!) (set! z4a26@z2da9@rib-cache z2da9@rib-cache) (set! z4a25@z2da7@set-rib-sealed/freq! z2da7@set-rib-sealed/freq!) (set! z4a24@z2da5@rib-sealed/freq z2da5@rib-sealed/freq) (set! z4a23@z2da3@set-rib-label*! z2da3@set-rib-label*!) (set! z4a22@z2da1@rib-label* z2da1@rib-label*) (set! z4a21@z2d9f@set-rib-mark**! z2d9f@set-rib-mark**!) (set! z4a20@z2d9d@rib-mark** z2d9d@rib-mark**) (set! z4a1f@z2d9b@set-rib-sym*! z2d9b@set-rib-sym*!) (set! z4a1e@z2d99@rib-sym* z2d99@rib-sym*) (set! z4a1d@z2d97@rib? z2d97@rib?) (set! z4a1c@z2d95@make-rib z2d95@make-rib) (set! z4a1b@z2d93@gen-define-label z2d93@gen-define-label) (set! z4a1a@z2d91@gen-define-label+loc z2d91@gen-define-label+loc) (set! z4a19@z2d8f@gen-top-level-label z2d8f@gen-top-level-label) (set! z4a18@z2d8d@gen-label z2d8d@gen-label) (set! z4a17@z2d8b@gen-global z2d8b@gen-global) (set! z4a16@z2d89@gen-lexical z2d89@gen-lexical) (set! z4a15@z2d87@top-marked? z2d87@top-marked?) (set! z4a14@z2d85@top-mark* z2d85@top-mark*) (set! z4a13@z2d80@set-union z2d80@set-union) (set! z4a12@z2d7e@set-cons z2d7e@set-cons) (set! z4a11@z2d7c@file-options-macro z2d7c@file-options-macro) (z2c23@z2a64@current-library-expander z30ac@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (z4b1a@z4b15 z4b1c@z4b17 z4b1e@z4b16 z4b21@&condition? z4b23@make-&condition z4b25@&condition-rtd z4b27@&condition-rcd z4b73@z4b6e z4b75@z4b70 z4b77@z4b6f z4b7a@p? z4b7c@make-message-condition z4b7e@z4b6d z4b80@message-condition? z4b82@condition-message z4b84@&message-rtd z4b86@&message-rcd z4b8c@z4b87 z4b8e@z4b89 z4b90@z4b88 z4b93@p? z4b95@make-warning z4b97@warning? z4b99@&warning-rtd z4b9b@&warning-rcd z4ba1@z4b9c z4ba3@z4b9e z4ba5@z4b9d z4ba8@p? z4baa@make-serious-condition z4bac@serious-condition? z4bae@&serious-rtd z4bb0@&serious-rcd z4bb6@z4bb1 z4bb8@z4bb3 z4bba@z4bb2 z4bbd@p? z4bbf@make-error z4bc1@error? z4bc3@&error-rtd z4bc5@&error-rcd z4bcb@z4bc6 z4bcd@z4bc8 z4bcf@z4bc7 z4bd2@p? z4bd4@make-violation z4bd6@violation? z4bd8@&violation-rtd z4bda@&violation-rcd z4be0@z4bdb z4be2@z4bdd z4be4@z4bdc z4be7@p? z4be9@make-assertion-violation z4beb@assertion-violation? z4bed@&assertion-rtd z4bef@&assertion-rcd z4bf7@z4bf2 z4bf9@z4bf4 z4bfb@z4bf3 z4bfe@p? z4c00@make-irritants-condition z4c02@z4bf1 z4c04@irritants-condition? z4c06@condition-irritants z4c08@&irritants-rtd z4c0a@&irritants-rcd z4c12@z4c0d z4c14@z4c0f z4c16@z4c0e z4c19@p? z4c1b@make-who-condition z4c1d@z4c0c z4c1f@who-condition? z4c21@condition-who z4c23@&who-rtd z4c25@&who-rcd z4c2b@z4c26 z4c2d@z4c28 z4c2f@z4c27 z4c32@p? z4c34@make-non-continuable-violation z4c36@non-continuable-violation? z4c38@&non-continuable-rtd z4c3a@&non-continuable-rcd z4c40@z4c3b z4c42@z4c3d z4c44@z4c3c z4c47@p? z4c49@make-implementation-restriction-violation z4c4b@implementation-restriction-violation? z4c4d@&implementation-restriction-rtd z4c4f@&implementation-restriction-rcd z4c55@z4c50 z4c57@z4c52 z4c59@z4c51 z4c5c@p? z4c5e@make-lexical-violation z4c60@lexical-violation? z4c62@&lexical-rtd z4c64@&lexical-rcd z4c6e@z4c69 z4c70@z4c6b z4c72@z4c6a z4c75@p? z4c77@make-syntax-violation z4c79@z4c66 z4c7b@z4c68 z4c7d@syntax-violation? z4c7f@syntax-violation-form z4c81@syntax-violation-subform z4c83@&syntax-rtd z4c85@&syntax-rcd z4c8b@z4c86 z4c8d@z4c88 z4c8f@z4c87 z4c92@p? z4c94@make-undefined-violation z4c96@undefined-violation? z4c98@&undefined-rtd z4c9a@&undefined-rcd z4ca0@z4c9b z4ca2@z4c9d z4ca4@z4c9c z4ca7@p? z4ca9@make-i/o-error z4cab@i/o-error? z4cad@&i/o-rtd z4caf@&i/o-rcd z4cb5@z4cb0 z4cb7@z4cb2 z4cb9@z4cb1 z4cbc@p? z4cbe@make-i/o-read-error z4cc0@i/o-read-error? z4cc2@&i/o-read-rtd z4cc4@&i/o-read-rcd z4cca@z4cc5 z4ccc@z4cc7 z4cce@z4cc6 z4cd1@p? z4cd3@make-i/o-write-error z4cd5@i/o-write-error? z4cd7@&i/o-write-rtd z4cd9@&i/o-write-rcd z4ce1@z4cdc z4ce3@z4cde z4ce5@z4cdd z4ce8@p? z4cea@make-i/o-invalid-position-error z4cec@z4cdb z4cee@i/o-invalid-position-error? z4cf0@i/o-error-position z4cf2@&i/o-invalid-position-rtd z4cf4@&i/o-invalid-position-rcd z4cfc@z4cf7 z4cfe@z4cf9 z4d00@z4cf8 z4d03@p? z4d05@make-i/o-filename-error z4d07@z4cf6 z4d09@i/o-filename-error? z4d0b@i/o-error-filename z4d0d@&i/o-filename-rtd z4d0f@&i/o-filename-rcd z4d15@z4d10 z4d17@z4d12 z4d19@z4d11 z4d1c@p? z4d1e@make-i/o-file-protection-error z4d20@i/o-file-protection-error? z4d22@&i/o-file-protection-rtd z4d24@&i/o-file-protection-rcd z4d2a@z4d25 z4d2c@z4d27 z4d2e@z4d26 z4d31@p? z4d33@make-i/o-file-is-read-only-error z4d35@i/o-file-is-read-only-error? z4d37@&i/o-file-is-read-only-rtd z4d39@&i/o-file-is-read-only-rcd z4d3f@z4d3a z4d41@z4d3c z4d43@z4d3b z4d46@p? z4d48@make-i/o-file-already-exists-error z4d4a@i/o-file-already-exists-error? z4d4c@&i/o-file-already-exists-rtd z4d4e@&i/o-file-already-exists-rcd z4d54@z4d4f z4d56@z4d51 z4d58@z4d50 z4d5b@p? z4d5d@make-i/o-file-does-not-exist-error z4d5f@i/o-file-does-not-exist-error? z4d61@&i/o-file-does-not-exist-rtd z4d63@&i/o-file-does-not-exist-rcd z4d6b@z4d66 z4d6d@z4d68 z4d6f@z4d67 z4d72@p? z4d74@make-i/o-port-error z4d76@z4d65 z4d78@i/o-port-error? z4d7a@i/o-error-port z4d7c@&i/o-port-rtd z4d7e@&i/o-port-rcd z4d84@z4d7f z4d86@z4d81 z4d88@z4d80 z4d8b@p? z4d8d@make-i/o-decoding-error z4d8f@i/o-decoding-error? z4d91@&i/o-decoding-rtd z4d93@&i/o-decoding-rcd z4d9b@z4d96 z4d9d@z4d98 z4d9f@z4d97 z4da2@p? z4da4@make-i/o-encoding-error z4da6@z4d95 z4da8@i/o-encoding-error? z4daa@i/o-encoding-error-char z4dac@&i/o-encoding-rtd z4dae@&i/o-encoding-rcd z4db4@z4daf z4db6@z4db1 z4db8@z4db0 z4dbb@p? z4dbd@make-no-infinities-violation z4dbf@no-infinities-violation? z4dc1@&no-infinities-rtd z4dc3@&no-infinities-rcd z4dc9@z4dc4 z4dcb@z4dc6 z4dcd@z4dc5 z4dd0@p? z4dd2@make-no-nans-violation z4dd4@no-nans-violation? z4dd6@&no-nans-rtd z4dd8@&no-nans-rcd) (begin (set! z4b1a@z4b15 (make-record-type-descriptor '&condition '#f 'z4b18 '#f '#f '#())) (set! z4b1c@z4b17 '#f) (set! z4b1e@z4b16 (make-record-constructor-descriptor z4b1a@z4b15 '#f z4b1c@z4b17)) (set! z4b21@&condition? (record-predicate z4b1a@z4b15)) (set! z4b23@make-&condition (record-constructor z4b1e@z4b16)) (set! z4b25@&condition-rtd z4b1a@z4b15) (set! z4b27@&condition-rcd z4b1e@z4b16) (set! z4b73@z4b6e (make-record-type-descriptor '&message z4b1a@z4b15 'z4b71 '#f '#f '#((immutable message)))) (set! z4b75@z4b70 '#f) (set! z4b77@z4b6f (make-record-constructor-descriptor z4b73@z4b6e z4b1e@z4b16 z4b75@z4b70)) (set! z4b7a@p? (record-predicate z4b73@z4b6e)) (set! z4b7c@make-message-condition (record-constructor z4b77@z4b6f)) (set! z4b7e@z4b6d (record-accessor z4b73@z4b6e '0)) (set! z4b80@message-condition? (condition-predicate z4b73@z4b6e)) (set! z4b82@condition-message (condition-accessor z4b73@z4b6e z4b7e@z4b6d)) (set! z4b84@&message-rtd z4b73@z4b6e) (set! z4b86@&message-rcd z4b77@z4b6f) (set! z4b8c@z4b87 (make-record-type-descriptor '&warning z4b1a@z4b15 'z4b8a '#f '#f '#())) (set! z4b8e@z4b89 '#f) (set! z4b90@z4b88 (make-record-constructor-descriptor z4b8c@z4b87 z4b1e@z4b16 z4b8e@z4b89)) (set! z4b93@p? (record-predicate z4b8c@z4b87)) (set! z4b95@make-warning (record-constructor z4b90@z4b88)) (set! z4b97@warning? (condition-predicate z4b8c@z4b87)) (set! z4b99@&warning-rtd z4b8c@z4b87) (set! z4b9b@&warning-rcd z4b90@z4b88) (set! z4ba1@z4b9c (make-record-type-descriptor '&serious z4b1a@z4b15 'z4b9f '#f '#f '#())) (set! z4ba3@z4b9e '#f) (set! z4ba5@z4b9d (make-record-constructor-descriptor z4ba1@z4b9c z4b1e@z4b16 z4ba3@z4b9e)) (set! z4ba8@p? (record-predicate z4ba1@z4b9c)) (set! z4baa@make-serious-condition (record-constructor z4ba5@z4b9d)) (set! z4bac@serious-condition? (condition-predicate z4ba1@z4b9c)) (set! z4bae@&serious-rtd z4ba1@z4b9c) (set! z4bb0@&serious-rcd z4ba5@z4b9d) (set! z4bb6@z4bb1 (make-record-type-descriptor '&error z4ba1@z4b9c 'z4bb4 '#f '#f '#())) (set! z4bb8@z4bb3 '#f) (set! z4bba@z4bb2 (make-record-constructor-descriptor z4bb6@z4bb1 z4ba5@z4b9d z4bb8@z4bb3)) (set! z4bbd@p? (record-predicate z4bb6@z4bb1)) (set! z4bbf@make-error (record-constructor z4bba@z4bb2)) (set! z4bc1@error? (condition-predicate z4bb6@z4bb1)) (set! z4bc3@&error-rtd z4bb6@z4bb1) (set! z4bc5@&error-rcd z4bba@z4bb2) (set! z4bcb@z4bc6 (make-record-type-descriptor '&violation z4ba1@z4b9c 'z4bc9 '#f '#f '#())) (set! z4bcd@z4bc8 '#f) (set! z4bcf@z4bc7 (make-record-constructor-descriptor z4bcb@z4bc6 z4ba5@z4b9d z4bcd@z4bc8)) (set! z4bd2@p? (record-predicate z4bcb@z4bc6)) (set! z4bd4@make-violation (record-constructor z4bcf@z4bc7)) (set! z4bd6@violation? (condition-predicate z4bcb@z4bc6)) (set! z4bd8@&violation-rtd z4bcb@z4bc6) (set! z4bda@&violation-rcd z4bcf@z4bc7) (set! z4be0@z4bdb (make-record-type-descriptor '&assertion z4bcb@z4bc6 'z4bde '#f '#f '#())) (set! z4be2@z4bdd '#f) (set! z4be4@z4bdc (make-record-constructor-descriptor z4be0@z4bdb z4bcf@z4bc7 z4be2@z4bdd)) (set! z4be7@p? (record-predicate z4be0@z4bdb)) (set! z4be9@make-assertion-violation (record-constructor z4be4@z4bdc)) (set! z4beb@assertion-violation? (condition-predicate z4be0@z4bdb)) (set! z4bed@&assertion-rtd z4be0@z4bdb) (set! z4bef@&assertion-rcd z4be4@z4bdc) (set! z4bf7@z4bf2 (make-record-type-descriptor '&irritants z4b1a@z4b15 'z4bf5 '#f '#f '#((immutable irritants)))) (set! z4bf9@z4bf4 '#f) (set! z4bfb@z4bf3 (make-record-constructor-descriptor z4bf7@z4bf2 z4b1e@z4b16 z4bf9@z4bf4)) (set! z4bfe@p? (record-predicate z4bf7@z4bf2)) (set! z4c00@make-irritants-condition (record-constructor z4bfb@z4bf3)) (set! z4c02@z4bf1 (record-accessor z4bf7@z4bf2 '0)) (set! z4c04@irritants-condition? (condition-predicate z4bf7@z4bf2)) (set! z4c06@condition-irritants (condition-accessor z4bf7@z4bf2 z4c02@z4bf1)) (set! z4c08@&irritants-rtd z4bf7@z4bf2) (set! z4c0a@&irritants-rcd z4bfb@z4bf3) (set! z4c12@z4c0d (make-record-type-descriptor '&who z4b1a@z4b15 'z4c10 '#f '#f '#((immutable who)))) (set! z4c14@z4c0f '#f) (set! z4c16@z4c0e (make-record-constructor-descriptor z4c12@z4c0d z4b1e@z4b16 z4c14@z4c0f)) (set! z4c19@p? (record-predicate z4c12@z4c0d)) (set! z4c1b@make-who-condition (record-constructor z4c16@z4c0e)) (set! z4c1d@z4c0c (record-accessor z4c12@z4c0d '0)) (set! z4c1f@who-condition? (condition-predicate z4c12@z4c0d)) (set! z4c21@condition-who (condition-accessor z4c12@z4c0d z4c1d@z4c0c)) (set! z4c23@&who-rtd z4c12@z4c0d) (set! z4c25@&who-rcd z4c16@z4c0e) (set! z4c2b@z4c26 (make-record-type-descriptor '&non-continuable z4bcb@z4bc6 'z4c29 '#f '#f '#())) (set! z4c2d@z4c28 '#f) (set! z4c2f@z4c27 (make-record-constructor-descriptor z4c2b@z4c26 z4bcf@z4bc7 z4c2d@z4c28)) (set! z4c32@p? (record-predicate z4c2b@z4c26)) (set! z4c34@make-non-continuable-violation (record-constructor z4c2f@z4c27)) (set! z4c36@non-continuable-violation? (condition-predicate z4c2b@z4c26)) (set! z4c38@&non-continuable-rtd z4c2b@z4c26) (set! z4c3a@&non-continuable-rcd z4c2f@z4c27) (set! z4c40@z4c3b (make-record-type-descriptor '&implementation-restriction z4bcb@z4bc6 'z4c3e '#f '#f '#())) (set! z4c42@z4c3d '#f) (set! z4c44@z4c3c (make-record-constructor-descriptor z4c40@z4c3b z4bcf@z4bc7 z4c42@z4c3d)) (set! z4c47@p? (record-predicate z4c40@z4c3b)) (set! z4c49@make-implementation-restriction-violation (record-constructor z4c44@z4c3c)) (set! z4c4b@implementation-restriction-violation? (condition-predicate z4c40@z4c3b)) (set! z4c4d@&implementation-restriction-rtd z4c40@z4c3b) (set! z4c4f@&implementation-restriction-rcd z4c44@z4c3c) (set! z4c55@z4c50 (make-record-type-descriptor '&lexical z4bcb@z4bc6 'z4c53 '#f '#f '#())) (set! z4c57@z4c52 '#f) (set! z4c59@z4c51 (make-record-constructor-descriptor z4c55@z4c50 z4bcf@z4bc7 z4c57@z4c52)) (set! z4c5c@p? (record-predicate z4c55@z4c50)) (set! z4c5e@make-lexical-violation (record-constructor z4c59@z4c51)) (set! z4c60@lexical-violation? (condition-predicate z4c55@z4c50)) (set! z4c62@&lexical-rtd z4c55@z4c50) (set! z4c64@&lexical-rcd z4c59@z4c51) (set! z4c6e@z4c69 (make-record-type-descriptor '&syntax z4bcb@z4bc6 'z4c6c '#f '#f '#((immutable form) (immutable subform)))) (set! z4c70@z4c6b '#f) (set! z4c72@z4c6a (make-record-constructor-descriptor z4c6e@z4c69 z4bcf@z4bc7 z4c70@z4c6b)) (set! z4c75@p? (record-predicate z4c6e@z4c69)) (set! z4c77@make-syntax-violation (record-constructor z4c72@z4c6a)) (set! z4c79@z4c66 (record-accessor z4c6e@z4c69 '0)) (set! z4c7b@z4c68 (record-accessor z4c6e@z4c69 '1)) (set! z4c7d@syntax-violation? (condition-predicate z4c6e@z4c69)) (set! z4c7f@syntax-violation-form (condition-accessor z4c6e@z4c69 z4c79@z4c66)) (set! z4c81@syntax-violation-subform (condition-accessor z4c6e@z4c69 z4c7b@z4c68)) (set! z4c83@&syntax-rtd z4c6e@z4c69) (set! z4c85@&syntax-rcd z4c72@z4c6a) (set! z4c8b@z4c86 (make-record-type-descriptor '&undefined z4bcb@z4bc6 'z4c89 '#f '#f '#())) (set! z4c8d@z4c88 '#f) (set! z4c8f@z4c87 (make-record-constructor-descriptor z4c8b@z4c86 z4bcf@z4bc7 z4c8d@z4c88)) (set! z4c92@p? (record-predicate z4c8b@z4c86)) (set! z4c94@make-undefined-violation (record-constructor z4c8f@z4c87)) (set! z4c96@undefined-violation? (condition-predicate z4c8b@z4c86)) (set! z4c98@&undefined-rtd z4c8b@z4c86) (set! z4c9a@&undefined-rcd z4c8f@z4c87) (set! z4ca0@z4c9b (make-record-type-descriptor '&i/o z4bb6@z4bb1 'z4c9e '#f '#f '#())) (set! z4ca2@z4c9d '#f) (set! z4ca4@z4c9c (make-record-constructor-descriptor z4ca0@z4c9b z4bba@z4bb2 z4ca2@z4c9d)) (set! z4ca7@p? (record-predicate z4ca0@z4c9b)) (set! z4ca9@make-i/o-error (record-constructor z4ca4@z4c9c)) (set! z4cab@i/o-error? (condition-predicate z4ca0@z4c9b)) (set! z4cad@&i/o-rtd z4ca0@z4c9b) (set! z4caf@&i/o-rcd z4ca4@z4c9c) (set! z4cb5@z4cb0 (make-record-type-descriptor '&i/o-read z4ca0@z4c9b 'z4cb3 '#f '#f '#())) (set! z4cb7@z4cb2 '#f) (set! z4cb9@z4cb1 (make-record-constructor-descriptor z4cb5@z4cb0 z4ca4@z4c9c z4cb7@z4cb2)) (set! z4cbc@p? (record-predicate z4cb5@z4cb0)) (set! z4cbe@make-i/o-read-error (record-constructor z4cb9@z4cb1)) (set! z4cc0@i/o-read-error? (condition-predicate z4cb5@z4cb0)) (set! z4cc2@&i/o-read-rtd z4cb5@z4cb0) (set! z4cc4@&i/o-read-rcd z4cb9@z4cb1) (set! z4cca@z4cc5 (make-record-type-descriptor '&i/o-write z4ca0@z4c9b 'z4cc8 '#f '#f '#())) (set! z4ccc@z4cc7 '#f) (set! z4cce@z4cc6 (make-record-constructor-descriptor z4cca@z4cc5 z4ca4@z4c9c z4ccc@z4cc7)) (set! z4cd1@p? (record-predicate z4cca@z4cc5)) (set! z4cd3@make-i/o-write-error (record-constructor z4cce@z4cc6)) (set! z4cd5@i/o-write-error? (condition-predicate z4cca@z4cc5)) (set! z4cd7@&i/o-write-rtd z4cca@z4cc5) (set! z4cd9@&i/o-write-rcd z4cce@z4cc6) (set! z4ce1@z4cdc (make-record-type-descriptor '&i/o-invalid-position z4ca0@z4c9b 'z4cdf '#f '#f '#((immutable position)))) (set! z4ce3@z4cde '#f) (set! z4ce5@z4cdd (make-record-constructor-descriptor z4ce1@z4cdc z4ca4@z4c9c z4ce3@z4cde)) (set! z4ce8@p? (record-predicate z4ce1@z4cdc)) (set! z4cea@make-i/o-invalid-position-error (record-constructor z4ce5@z4cdd)) (set! z4cec@z4cdb (record-accessor z4ce1@z4cdc '0)) (set! z4cee@i/o-invalid-position-error? (condition-predicate z4ce1@z4cdc)) (set! z4cf0@i/o-error-position (condition-accessor z4ce1@z4cdc z4cec@z4cdb)) (set! z4cf2@&i/o-invalid-position-rtd z4ce1@z4cdc) (set! z4cf4@&i/o-invalid-position-rcd z4ce5@z4cdd) (set! z4cfc@z4cf7 (make-record-type-descriptor '&i/o-filename z4ca0@z4c9b 'z4cfa '#f '#f '#((immutable filename)))) (set! z4cfe@z4cf9 '#f) (set! z4d00@z4cf8 (make-record-constructor-descriptor z4cfc@z4cf7 z4ca4@z4c9c z4cfe@z4cf9)) (set! z4d03@p? (record-predicate z4cfc@z4cf7)) (set! z4d05@make-i/o-filename-error (record-constructor z4d00@z4cf8)) (set! z4d07@z4cf6 (record-accessor z4cfc@z4cf7 '0)) (set! z4d09@i/o-filename-error? (condition-predicate z4cfc@z4cf7)) (set! z4d0b@i/o-error-filename (condition-accessor z4cfc@z4cf7 z4d07@z4cf6)) (set! z4d0d@&i/o-filename-rtd z4cfc@z4cf7) (set! z4d0f@&i/o-filename-rcd z4d00@z4cf8) (set! z4d15@z4d10 (make-record-type-descriptor '&i/o-file-protection z4cfc@z4cf7 'z4d13 '#f '#f '#())) (set! z4d17@z4d12 '#f) (set! z4d19@z4d11 (make-record-constructor-descriptor z4d15@z4d10 z4d00@z4cf8 z4d17@z4d12)) (set! z4d1c@p? (record-predicate z4d15@z4d10)) (set! z4d1e@make-i/o-file-protection-error (record-constructor z4d19@z4d11)) (set! z4d20@i/o-file-protection-error? (condition-predicate z4d15@z4d10)) (set! z4d22@&i/o-file-protection-rtd z4d15@z4d10) (set! z4d24@&i/o-file-protection-rcd z4d19@z4d11) (set! z4d2a@z4d25 (make-record-type-descriptor '&i/o-file-is-read-only z4d15@z4d10 'z4d28 '#f '#f '#())) (set! z4d2c@z4d27 '#f) (set! z4d2e@z4d26 (make-record-constructor-descriptor z4d2a@z4d25 z4d19@z4d11 z4d2c@z4d27)) (set! z4d31@p? (record-predicate z4d2a@z4d25)) (set! z4d33@make-i/o-file-is-read-only-error (record-constructor z4d2e@z4d26)) (set! z4d35@i/o-file-is-read-only-error? (condition-predicate z4d2a@z4d25)) (set! z4d37@&i/o-file-is-read-only-rtd z4d2a@z4d25) (set! z4d39@&i/o-file-is-read-only-rcd z4d2e@z4d26) (set! z4d3f@z4d3a (make-record-type-descriptor '&i/o-file-already-exists z4cfc@z4cf7 'z4d3d '#f '#f '#())) (set! z4d41@z4d3c '#f) (set! z4d43@z4d3b (make-record-constructor-descriptor z4d3f@z4d3a z4d00@z4cf8 z4d41@z4d3c)) (set! z4d46@p? (record-predicate z4d3f@z4d3a)) (set! z4d48@make-i/o-file-already-exists-error (record-constructor z4d43@z4d3b)) (set! z4d4a@i/o-file-already-exists-error? (condition-predicate z4d3f@z4d3a)) (set! z4d4c@&i/o-file-already-exists-rtd z4d3f@z4d3a) (set! z4d4e@&i/o-file-already-exists-rcd z4d43@z4d3b) (set! z4d54@z4d4f (make-record-type-descriptor '&i/o-file-does-not-exist z4cfc@z4cf7 'z4d52 '#f '#f '#())) (set! z4d56@z4d51 '#f) (set! z4d58@z4d50 (make-record-constructor-descriptor z4d54@z4d4f z4d00@z4cf8 z4d56@z4d51)) (set! z4d5b@p? (record-predicate z4d54@z4d4f)) (set! z4d5d@make-i/o-file-does-not-exist-error (record-constructor z4d58@z4d50)) (set! z4d5f@i/o-file-does-not-exist-error? (condition-predicate z4d54@z4d4f)) (set! z4d61@&i/o-file-does-not-exist-rtd z4d54@z4d4f) (set! z4d63@&i/o-file-does-not-exist-rcd z4d58@z4d50) (set! z4d6b@z4d66 (make-record-type-descriptor '&i/o-port z4ca0@z4c9b 'z4d69 '#f '#f '#((immutable port)))) (set! z4d6d@z4d68 '#f) (set! z4d6f@z4d67 (make-record-constructor-descriptor z4d6b@z4d66 z4ca4@z4c9c z4d6d@z4d68)) (set! z4d72@p? (record-predicate z4d6b@z4d66)) (set! z4d74@make-i/o-port-error (record-constructor z4d6f@z4d67)) (set! z4d76@z4d65 (record-accessor z4d6b@z4d66 '0)) (set! z4d78@i/o-port-error? (condition-predicate z4d6b@z4d66)) (set! z4d7a@i/o-error-port (condition-accessor z4d6b@z4d66 z4d76@z4d65)) (set! z4d7c@&i/o-port-rtd z4d6b@z4d66) (set! z4d7e@&i/o-port-rcd z4d6f@z4d67) (set! z4d84@z4d7f (make-record-type-descriptor '&i/o-decoding z4d6b@z4d66 'z4d82 '#f '#f '#())) (set! z4d86@z4d81 '#f) (set! z4d88@z4d80 (make-record-constructor-descriptor z4d84@z4d7f z4d6f@z4d67 z4d86@z4d81)) (set! z4d8b@p? (record-predicate z4d84@z4d7f)) (set! z4d8d@make-i/o-decoding-error (record-constructor z4d88@z4d80)) (set! z4d8f@i/o-decoding-error? (condition-predicate z4d84@z4d7f)) (set! z4d91@&i/o-decoding-rtd z4d84@z4d7f) (set! z4d93@&i/o-decoding-rcd z4d88@z4d80) (set! z4d9b@z4d96 (make-record-type-descriptor '&i/o-encoding z4d6b@z4d66 'z4d99 '#f '#f '#((immutable char)))) (set! z4d9d@z4d98 '#f) (set! z4d9f@z4d97 (make-record-constructor-descriptor z4d9b@z4d96 z4d6f@z4d67 z4d9d@z4d98)) (set! z4da2@p? (record-predicate z4d9b@z4d96)) (set! z4da4@make-i/o-encoding-error (record-constructor z4d9f@z4d97)) (set! z4da6@z4d95 (record-accessor z4d9b@z4d96 '0)) (set! z4da8@i/o-encoding-error? (condition-predicate z4d9b@z4d96)) (set! z4daa@i/o-encoding-error-char (condition-accessor z4d9b@z4d96 z4da6@z4d95)) (set! z4dac@&i/o-encoding-rtd z4d9b@z4d96) (set! z4dae@&i/o-encoding-rcd z4d9f@z4d97) (set! z4db4@z4daf (make-record-type-descriptor '&no-infinities z4c40@z4c3b 'z4db2 '#f '#f '#())) (set! z4db6@z4db1 '#f) (set! z4db8@z4db0 (make-record-constructor-descriptor z4db4@z4daf z4c44@z4c3c z4db6@z4db1)) (set! z4dbb@p? (record-predicate z4db4@z4daf)) (set! z4dbd@make-no-infinities-violation (record-constructor z4db8@z4db0)) (set! z4dbf@no-infinities-violation? (condition-predicate z4db4@z4daf)) (set! z4dc1@&no-infinities-rtd z4db4@z4daf) (set! z4dc3@&no-infinities-rcd z4db8@z4db0) (set! z4dc9@z4dc4 (make-record-type-descriptor '&no-nans z4c40@z4c3b 'z4dc7 '#f '#f '#())) (set! z4dcb@z4dc6 '#f) (set! z4dcd@z4dc5 (make-record-constructor-descriptor z4dc9@z4dc4 z4c44@z4c3c z4dcb@z4dc6)) (set! z4dd0@p? (record-predicate z4dc9@z4dc4)) (set! z4dd2@make-no-nans-violation (record-constructor z4dcd@z4dc5)) (set! z4dd4@no-nans-violation? (condition-predicate z4dc9@z4dc4)) (set! z4dd6@&no-nans-rtd z4dc9@z4dc4) (set! z4dd8@&no-nans-rcd z4dcd@z4dc5) (begin (set! z4ec9@z4dd8@&no-nans-rcd z4dd8@&no-nans-rcd) (set! z4ec8@z4dd6@&no-nans-rtd z4dd6@&no-nans-rtd) (set! z4ec7@z4dd4@no-nans-violation? z4dd4@no-nans-violation?) (set! z4ec6@z4dd2@make-no-nans-violation z4dd2@make-no-nans-violation) (set! z4ec5@z4dd0@p? z4dd0@p?) (set! z4ec4@z4dcd@z4dc5 z4dcd@z4dc5) (set! z4ec3@z4dcb@z4dc6 z4dcb@z4dc6) (set! z4ec2@z4dc9@z4dc4 z4dc9@z4dc4) (set! z4ec1@z4dc3@&no-infinities-rcd z4dc3@&no-infinities-rcd) (set! z4ec0@z4dc1@&no-infinities-rtd z4dc1@&no-infinities-rtd) (set! z4ebf@z4dbf@no-infinities-violation? z4dbf@no-infinities-violation?) (set! z4ebe@z4dbd@make-no-infinities-violation z4dbd@make-no-infinities-violation) (set! z4ebd@z4dbb@p? z4dbb@p?) (set! z4ebc@z4db8@z4db0 z4db8@z4db0) (set! z4ebb@z4db6@z4db1 z4db6@z4db1) (set! z4eba@z4db4@z4daf z4db4@z4daf) (set! z4eb9@z4dae@&i/o-encoding-rcd z4dae@&i/o-encoding-rcd) (set! z4eb8@z4dac@&i/o-encoding-rtd z4dac@&i/o-encoding-rtd) (set! z4eb7@z4daa@i/o-encoding-error-char z4daa@i/o-encoding-error-char) (set! z4eb6@z4da8@i/o-encoding-error? z4da8@i/o-encoding-error?) (set! z4eb5@z4da6@z4d95 z4da6@z4d95) (set! z4eb4@z4da4@make-i/o-encoding-error z4da4@make-i/o-encoding-error) (set! z4eb3@z4da2@p? z4da2@p?) (set! z4eb2@z4d9f@z4d97 z4d9f@z4d97) (set! z4eb1@z4d9d@z4d98 z4d9d@z4d98) (set! z4eb0@z4d9b@z4d96 z4d9b@z4d96) (set! z4eaf@z4d93@&i/o-decoding-rcd z4d93@&i/o-decoding-rcd) (set! z4eae@z4d91@&i/o-decoding-rtd z4d91@&i/o-decoding-rtd) (set! z4ead@z4d8f@i/o-decoding-error? z4d8f@i/o-decoding-error?) (set! z4eac@z4d8d@make-i/o-decoding-error z4d8d@make-i/o-decoding-error) (set! z4eab@z4d8b@p? z4d8b@p?) (set! z4eaa@z4d88@z4d80 z4d88@z4d80) (set! z4ea9@z4d86@z4d81 z4d86@z4d81) (set! z4ea8@z4d84@z4d7f z4d84@z4d7f) (set! z4ea7@z4d7e@&i/o-port-rcd z4d7e@&i/o-port-rcd) (set! z4ea6@z4d7c@&i/o-port-rtd z4d7c@&i/o-port-rtd) (set! z4ea5@z4d7a@i/o-error-port z4d7a@i/o-error-port) (set! z4ea4@z4d78@i/o-port-error? z4d78@i/o-port-error?) (set! z4ea3@z4d76@z4d65 z4d76@z4d65) (set! z4ea2@z4d74@make-i/o-port-error z4d74@make-i/o-port-error) (set! z4ea1@z4d72@p? z4d72@p?) (set! z4ea0@z4d6f@z4d67 z4d6f@z4d67) (set! z4e9f@z4d6d@z4d68 z4d6d@z4d68) (set! z4e9e@z4d6b@z4d66 z4d6b@z4d66) (set! z4e9d@z4d63@&i/o-file-does-not-exist-rcd z4d63@&i/o-file-does-not-exist-rcd) (set! z4e9c@z4d61@&i/o-file-does-not-exist-rtd z4d61@&i/o-file-does-not-exist-rtd) (set! z4e9b@z4d5f@i/o-file-does-not-exist-error? z4d5f@i/o-file-does-not-exist-error?) (set! z4e9a@z4d5d@make-i/o-file-does-not-exist-error z4d5d@make-i/o-file-does-not-exist-error) (set! z4e99@z4d5b@p? z4d5b@p?) (set! z4e98@z4d58@z4d50 z4d58@z4d50) (set! z4e97@z4d56@z4d51 z4d56@z4d51) (set! z4e96@z4d54@z4d4f z4d54@z4d4f) (set! z4e95@z4d4e@&i/o-file-already-exists-rcd z4d4e@&i/o-file-already-exists-rcd) (set! z4e94@z4d4c@&i/o-file-already-exists-rtd z4d4c@&i/o-file-already-exists-rtd) (set! z4e93@z4d4a@i/o-file-already-exists-error? z4d4a@i/o-file-already-exists-error?) (set! z4e92@z4d48@make-i/o-file-already-exists-error z4d48@make-i/o-file-already-exists-error) (set! z4e91@z4d46@p? z4d46@p?) (set! z4e90@z4d43@z4d3b z4d43@z4d3b) (set! z4e8f@z4d41@z4d3c z4d41@z4d3c) (set! z4e8e@z4d3f@z4d3a z4d3f@z4d3a) (set! z4e8d@z4d39@&i/o-file-is-read-only-rcd z4d39@&i/o-file-is-read-only-rcd) (set! z4e8c@z4d37@&i/o-file-is-read-only-rtd z4d37@&i/o-file-is-read-only-rtd) (set! z4e8b@z4d35@i/o-file-is-read-only-error? z4d35@i/o-file-is-read-only-error?) (set! z4e8a@z4d33@make-i/o-file-is-read-only-error z4d33@make-i/o-file-is-read-only-error) (set! z4e89@z4d31@p? z4d31@p?) (set! z4e88@z4d2e@z4d26 z4d2e@z4d26) (set! z4e87@z4d2c@z4d27 z4d2c@z4d27) (set! z4e86@z4d2a@z4d25 z4d2a@z4d25) (set! z4e85@z4d24@&i/o-file-protection-rcd z4d24@&i/o-file-protection-rcd) (set! z4e84@z4d22@&i/o-file-protection-rtd z4d22@&i/o-file-protection-rtd) (set! z4e83@z4d20@i/o-file-protection-error? z4d20@i/o-file-protection-error?) (set! z4e82@z4d1e@make-i/o-file-protection-error z4d1e@make-i/o-file-protection-error) (set! z4e81@z4d1c@p? z4d1c@p?) (set! z4e80@z4d19@z4d11 z4d19@z4d11) (set! z4e7f@z4d17@z4d12 z4d17@z4d12) (set! z4e7e@z4d15@z4d10 z4d15@z4d10) (set! z4e7d@z4d0f@&i/o-filename-rcd z4d0f@&i/o-filename-rcd) (set! z4e7c@z4d0d@&i/o-filename-rtd z4d0d@&i/o-filename-rtd) (set! z4e7b@z4d0b@i/o-error-filename z4d0b@i/o-error-filename) (set! z4e7a@z4d09@i/o-filename-error? z4d09@i/o-filename-error?) (set! z4e79@z4d07@z4cf6 z4d07@z4cf6) (set! z4e78@z4d05@make-i/o-filename-error z4d05@make-i/o-filename-error) (set! z4e77@z4d03@p? z4d03@p?) (set! z4e76@z4d00@z4cf8 z4d00@z4cf8) (set! z4e75@z4cfe@z4cf9 z4cfe@z4cf9) (set! z4e74@z4cfc@z4cf7 z4cfc@z4cf7) (set! z4e73@z4cf4@&i/o-invalid-position-rcd z4cf4@&i/o-invalid-position-rcd) (set! z4e72@z4cf2@&i/o-invalid-position-rtd z4cf2@&i/o-invalid-position-rtd) (set! z4e71@z4cf0@i/o-error-position z4cf0@i/o-error-position) (set! z4e70@z4cee@i/o-invalid-position-error? z4cee@i/o-invalid-position-error?) (set! z4e6f@z4cec@z4cdb z4cec@z4cdb) (set! z4e6e@z4cea@make-i/o-invalid-position-error z4cea@make-i/o-invalid-position-error) (set! z4e6d@z4ce8@p? z4ce8@p?) (set! z4e6c@z4ce5@z4cdd z4ce5@z4cdd) (set! z4e6b@z4ce3@z4cde z4ce3@z4cde) (set! z4e6a@z4ce1@z4cdc z4ce1@z4cdc) (set! z4e69@z4cd9@&i/o-write-rcd z4cd9@&i/o-write-rcd) (set! z4e68@z4cd7@&i/o-write-rtd z4cd7@&i/o-write-rtd) (set! z4e67@z4cd5@i/o-write-error? z4cd5@i/o-write-error?) (set! z4e66@z4cd3@make-i/o-write-error z4cd3@make-i/o-write-error) (set! z4e65@z4cd1@p? z4cd1@p?) (set! z4e64@z4cce@z4cc6 z4cce@z4cc6) (set! z4e63@z4ccc@z4cc7 z4ccc@z4cc7) (set! z4e62@z4cca@z4cc5 z4cca@z4cc5) (set! z4e61@z4cc4@&i/o-read-rcd z4cc4@&i/o-read-rcd) (set! z4e60@z4cc2@&i/o-read-rtd z4cc2@&i/o-read-rtd) (set! z4e5f@z4cc0@i/o-read-error? z4cc0@i/o-read-error?) (set! z4e5e@z4cbe@make-i/o-read-error z4cbe@make-i/o-read-error) (set! z4e5d@z4cbc@p? z4cbc@p?) (set! z4e5c@z4cb9@z4cb1 z4cb9@z4cb1) (set! z4e5b@z4cb7@z4cb2 z4cb7@z4cb2) (set! z4e5a@z4cb5@z4cb0 z4cb5@z4cb0) (set! z4e59@z4caf@&i/o-rcd z4caf@&i/o-rcd) (set! z4e58@z4cad@&i/o-rtd z4cad@&i/o-rtd) (set! z4e57@z4cab@i/o-error? z4cab@i/o-error?) (set! z4e56@z4ca9@make-i/o-error z4ca9@make-i/o-error) (set! z4e55@z4ca7@p? z4ca7@p?) (set! z4e54@z4ca4@z4c9c z4ca4@z4c9c) (set! z4e53@z4ca2@z4c9d z4ca2@z4c9d) (set! z4e52@z4ca0@z4c9b z4ca0@z4c9b) (set! z4e51@z4c9a@&undefined-rcd z4c9a@&undefined-rcd) (set! z4e50@z4c98@&undefined-rtd z4c98@&undefined-rtd) (set! z4e4f@z4c96@undefined-violation? z4c96@undefined-violation?) (set! z4e4e@z4c94@make-undefined-violation z4c94@make-undefined-violation) (set! z4e4d@z4c92@p? z4c92@p?) (set! z4e4c@z4c8f@z4c87 z4c8f@z4c87) (set! z4e4b@z4c8d@z4c88 z4c8d@z4c88) (set! z4e4a@z4c8b@z4c86 z4c8b@z4c86) (set! z4e49@z4c85@&syntax-rcd z4c85@&syntax-rcd) (set! z4e48@z4c83@&syntax-rtd z4c83@&syntax-rtd) (set! z4e47@z4c81@syntax-violation-subform z4c81@syntax-violation-subform) (set! z4e46@z4c7f@syntax-violation-form z4c7f@syntax-violation-form) (set! z4e45@z4c7d@syntax-violation? z4c7d@syntax-violation?) (set! z4e44@z4c7b@z4c68 z4c7b@z4c68) (set! z4e43@z4c79@z4c66 z4c79@z4c66) (set! z4e42@z4c77@make-syntax-violation z4c77@make-syntax-violation) (set! z4e41@z4c75@p? z4c75@p?) (set! z4e40@z4c72@z4c6a z4c72@z4c6a) (set! z4e3f@z4c70@z4c6b z4c70@z4c6b) (set! z4e3e@z4c6e@z4c69 z4c6e@z4c69) (set! z4e3d@z4c64@&lexical-rcd z4c64@&lexical-rcd) (set! z4e3c@z4c62@&lexical-rtd z4c62@&lexical-rtd) (set! z4e3b@z4c60@lexical-violation? z4c60@lexical-violation?) (set! z4e3a@z4c5e@make-lexical-violation z4c5e@make-lexical-violation) (set! z4e39@z4c5c@p? z4c5c@p?) (set! z4e38@z4c59@z4c51 z4c59@z4c51) (set! z4e37@z4c57@z4c52 z4c57@z4c52) (set! z4e36@z4c55@z4c50 z4c55@z4c50) (set! z4e35@z4c4f@&implementation-restriction-rcd z4c4f@&implementation-restriction-rcd) (set! z4e34@z4c4d@&implementation-restriction-rtd z4c4d@&implementation-restriction-rtd) (set! z4e33@z4c4b@implementation-restriction-violation? z4c4b@implementation-restriction-violation?) (set! z4e32@z4c49@make-implementation-restriction-violation z4c49@make-implementation-restriction-violation) (set! z4e31@z4c47@p? z4c47@p?) (set! z4e30@z4c44@z4c3c z4c44@z4c3c) (set! z4e2f@z4c42@z4c3d z4c42@z4c3d) (set! z4e2e@z4c40@z4c3b z4c40@z4c3b) (set! z4e2d@z4c3a@&non-continuable-rcd z4c3a@&non-continuable-rcd) (set! z4e2c@z4c38@&non-continuable-rtd z4c38@&non-continuable-rtd) (set! z4e2b@z4c36@non-continuable-violation? z4c36@non-continuable-violation?) (set! z4e2a@z4c34@make-non-continuable-violation z4c34@make-non-continuable-violation) (set! z4e29@z4c32@p? z4c32@p?) (set! z4e28@z4c2f@z4c27 z4c2f@z4c27) (set! z4e27@z4c2d@z4c28 z4c2d@z4c28) (set! z4e26@z4c2b@z4c26 z4c2b@z4c26) (set! z4e25@z4c25@&who-rcd z4c25@&who-rcd) (set! z4e24@z4c23@&who-rtd z4c23@&who-rtd) (set! z4e23@z4c21@condition-who z4c21@condition-who) (set! z4e22@z4c1f@who-condition? z4c1f@who-condition?) (set! z4e21@z4c1d@z4c0c z4c1d@z4c0c) (set! z4e20@z4c1b@make-who-condition z4c1b@make-who-condition) (set! z4e1f@z4c19@p? z4c19@p?) (set! z4e1e@z4c16@z4c0e z4c16@z4c0e) (set! z4e1d@z4c14@z4c0f z4c14@z4c0f) (set! z4e1c@z4c12@z4c0d z4c12@z4c0d) (set! z4e1b@z4c0a@&irritants-rcd z4c0a@&irritants-rcd) (set! z4e1a@z4c08@&irritants-rtd z4c08@&irritants-rtd) (set! z4e19@z4c06@condition-irritants z4c06@condition-irritants) (set! z4e18@z4c04@irritants-condition? z4c04@irritants-condition?) (set! z4e17@z4c02@z4bf1 z4c02@z4bf1) (set! z4e16@z4c00@make-irritants-condition z4c00@make-irritants-condition) (set! z4e15@z4bfe@p? z4bfe@p?) (set! z4e14@z4bfb@z4bf3 z4bfb@z4bf3) (set! z4e13@z4bf9@z4bf4 z4bf9@z4bf4) (set! z4e12@z4bf7@z4bf2 z4bf7@z4bf2) (set! z4e11@z4bef@&assertion-rcd z4bef@&assertion-rcd) (set! z4e10@z4bed@&assertion-rtd z4bed@&assertion-rtd) (set! z4e0f@z4beb@assertion-violation? z4beb@assertion-violation?) (set! z4e0e@z4be9@make-assertion-violation z4be9@make-assertion-violation) (set! z4e0d@z4be7@p? z4be7@p?) (set! z4e0c@z4be4@z4bdc z4be4@z4bdc) (set! z4e0b@z4be2@z4bdd z4be2@z4bdd) (set! z4e0a@z4be0@z4bdb z4be0@z4bdb) (set! z4e09@z4bda@&violation-rcd z4bda@&violation-rcd) (set! z4e08@z4bd8@&violation-rtd z4bd8@&violation-rtd) (set! z4e07@z4bd6@violation? z4bd6@violation?) (set! z4e06@z4bd4@make-violation z4bd4@make-violation) (set! z4e05@z4bd2@p? z4bd2@p?) (set! z4e04@z4bcf@z4bc7 z4bcf@z4bc7) (set! z4e03@z4bcd@z4bc8 z4bcd@z4bc8) (set! z4e02@z4bcb@z4bc6 z4bcb@z4bc6) (set! z4e01@z4bc5@&error-rcd z4bc5@&error-rcd) (set! z4e00@z4bc3@&error-rtd z4bc3@&error-rtd) (set! z4dff@z4bc1@error? z4bc1@error?) (set! z4dfe@z4bbf@make-error z4bbf@make-error) (set! z4dfd@z4bbd@p? z4bbd@p?) (set! z4dfc@z4bba@z4bb2 z4bba@z4bb2) (set! z4dfb@z4bb8@z4bb3 z4bb8@z4bb3) (set! z4dfa@z4bb6@z4bb1 z4bb6@z4bb1) (set! z4df9@z4bb0@&serious-rcd z4bb0@&serious-rcd) (set! z4df8@z4bae@&serious-rtd z4bae@&serious-rtd) (set! z4df7@z4bac@serious-condition? z4bac@serious-condition?) (set! z4df6@z4baa@make-serious-condition z4baa@make-serious-condition) (set! z4df5@z4ba8@p? z4ba8@p?) (set! z4df4@z4ba5@z4b9d z4ba5@z4b9d) (set! z4df3@z4ba3@z4b9e z4ba3@z4b9e) (set! z4df2@z4ba1@z4b9c z4ba1@z4b9c) (set! z4df1@z4b9b@&warning-rcd z4b9b@&warning-rcd) (set! z4df0@z4b99@&warning-rtd z4b99@&warning-rtd) (set! z4def@z4b97@warning? z4b97@warning?) (set! z4dee@z4b95@make-warning z4b95@make-warning) (set! z4ded@z4b93@p? z4b93@p?) (set! z4dec@z4b90@z4b88 z4b90@z4b88) (set! z4deb@z4b8e@z4b89 z4b8e@z4b89) (set! z4dea@z4b8c@z4b87 z4b8c@z4b87) (set! z4de9@z4b86@&message-rcd z4b86@&message-rcd) (set! z4de8@z4b84@&message-rtd z4b84@&message-rtd) (set! z4de7@z4b82@condition-message z4b82@condition-message) (set! z4de6@z4b80@message-condition? z4b80@message-condition?) (set! z4de5@z4b7e@z4b6d z4b7e@z4b6d) (set! z4de4@z4b7c@make-message-condition z4b7c@make-message-condition) (set! z4de3@z4b7a@p? z4b7a@p?) (set! z4de2@z4b77@z4b6f z4b77@z4b6f) (set! z4de1@z4b75@z4b70 z4b75@z4b70) (set! z4de0@z4b73@z4b6e z4b73@z4b6e) (set! z4ddf@z4b27@&condition-rcd z4b27@&condition-rcd) (set! z4dde@z4b25@&condition-rtd z4b25@&condition-rtd) (set! z4ddd@z4b23@make-&condition z4b23@make-&condition) (set! z4ddc@z4b21@&condition? z4b21@&condition?) (set! z4ddb@z4b1e@z4b16 z4b1e@z4b16) (set! z4dda@z4b1c@z4b17 z4b1c@z4b17) (set! z4dd9@z4b1a@z4b15 z4b1a@z4b15)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (z29b7@z296c@current-primitive-locations (lambda (z5348@x) ((lambda (z534a@t) (if z534a@t (cdr z534a@t) '#f)) (assq z5348@x '((&no-nans-rcd . z4ec9@z4dd8@&no-nans-rcd) (&no-nans-rtd . z4ec8@z4dd6@&no-nans-rtd) (&no-infinities-rcd . z4ec1@z4dc3@&no-infinities-rcd) (&no-infinities-rtd . z4ec0@z4dc1@&no-infinities-rtd) (&i/o-encoding-rcd . z4eb9@z4dae@&i/o-encoding-rcd) (&i/o-encoding-rtd . z4eb8@z4dac@&i/o-encoding-rtd) (&i/o-decoding-rcd . z4eaf@z4d93@&i/o-decoding-rcd) (&i/o-decoding-rtd . z4eae@z4d91@&i/o-decoding-rtd) (&i/o-port-rcd . z4ea7@z4d7e@&i/o-port-rcd) (&i/o-port-rtd . z4ea6@z4d7c@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . z4e9d@z4d63@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . z4e9c@z4d61@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . z4e95@z4d4e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . z4e94@z4d4c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . z4e8d@z4d39@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . z4e8c@z4d37@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . z4e85@z4d24@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . z4e84@z4d22@&i/o-file-protection-rtd) (&i/o-filename-rcd . z4e7d@z4d0f@&i/o-filename-rcd) (&i/o-filename-rtd . z4e7c@z4d0d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . z4e73@z4cf4@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . z4e72@z4cf2@&i/o-invalid-position-rtd) (&i/o-write-rcd . z4e69@z4cd9@&i/o-write-rcd) (&i/o-write-rtd . z4e68@z4cd7@&i/o-write-rtd) (&i/o-read-rcd . z4e61@z4cc4@&i/o-read-rcd) (&i/o-read-rtd . z4e60@z4cc2@&i/o-read-rtd) (&i/o-rcd . z4e59@z4caf@&i/o-rcd) (&i/o-rtd . z4e58@z4cad@&i/o-rtd) (&undefined-rcd . z4e51@z4c9a@&undefined-rcd) (&undefined-rtd . z4e50@z4c98@&undefined-rtd) (&syntax-rcd . z4e49@z4c85@&syntax-rcd) (&syntax-rtd . z4e48@z4c83@&syntax-rtd) (&lexical-rcd . z4e3d@z4c64@&lexical-rcd) (&lexical-rtd . z4e3c@z4c62@&lexical-rtd) (&implementation-restriction-rcd . z4e35@z4c4f@&implementation-restriction-rcd) (&implementation-restriction-rtd . z4e34@z4c4d@&implementation-restriction-rtd) (&non-continuable-rcd . z4e2d@z4c3a@&non-continuable-rcd) (&non-continuable-rtd . z4e2c@z4c38@&non-continuable-rtd) (&who-rcd . z4e25@z4c25@&who-rcd) (&who-rtd . z4e24@z4c23@&who-rtd) (&irritants-rcd . z4e1b@z4c0a@&irritants-rcd) (&irritants-rtd . z4e1a@z4c08@&irritants-rtd) (&assertion-rcd . z4e11@z4bef@&assertion-rcd) (&assertion-rtd . z4e10@z4bed@&assertion-rtd) (&violation-rcd . z4e09@z4bda@&violation-rcd) (&violation-rtd . z4e08@z4bd8@&violation-rtd) (&error-rcd . z4e01@z4bc5@&error-rcd) (&error-rtd . z4e00@z4bc3@&error-rtd) (&serious-rcd . z4df9@z4bb0@&serious-rcd) (&serious-rtd . z4df8@z4bae@&serious-rtd) (&warning-rcd . z4df1@z4b9b@&warning-rcd) (&warning-rtd . z4df0@z4b99@&warning-rtd) (&message-rcd . z4de9@z4b86@&message-rcd) (&message-rtd . z4de8@z4b84@&message-rtd) (&condition-rcd . z4ddf@z4b27@&condition-rcd) (&condition-rtd . z4dde@z4b25@&condition-rtd) (syntax-error . z4b07@z30c6@syntax-error) (syntax-dispatch . z4aa2@z2ffc@syntax-dispatch) (load . z4ffa@z4ee5@load) (interaction-environment . z4b0f@z30d6@interaction-environment) (library-path . z2c1b@z2a54@library-path) (make-parameter . z2965@z2861@make-parameter) (make-variable-transformer . z4a60@z2e29@make-variable-transformer) (identifier? . z4b0a@z30cc@identifier?) (generate-temporaries . z4b00@z30b8@generate-temporaries) (free-identifier=? . z4b01@z30ba@free-identifier=?) (syntax->datum . z4b0c@z30d0@syntax->datum) (datum->syntax . z4b0b@z30ce@datum->syntax) (bound-identifier=? . z4b02@z30bc@bound-identifier=?) (make-i/o-write-error . z4e66@z4cd3@make-i/o-write-error) (make-i/o-read-error . z4e5e@z4cbe@make-i/o-read-error) (make-i/o-port-error . z4ea2@z4d74@make-i/o-port-error) (make-i/o-invalid-position-error . z4e6e@z4cea@make-i/o-invalid-position-error) (make-i/o-filename-error . z4e78@z4d05@make-i/o-filename-error) (make-i/o-file-protection-error . z4e82@z4d1e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . z4e8a@z4d33@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . z4e9a@z4d5d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . z4e92@z4d48@make-i/o-file-already-exists-error) (make-i/o-error . z4e56@z4ca9@make-i/o-error) (make-i/o-encoding-error . z4eb4@z4da4@make-i/o-encoding-error) (make-i/o-decoding-error . z4eac@z4d8d@make-i/o-decoding-error) (i/o-write-error? . z4e67@z4cd5@i/o-write-error?) (i/o-read-error? . z4e5f@z4cc0@i/o-read-error?) (i/o-port-error? . z4ea4@z4d78@i/o-port-error?) (i/o-invalid-position-error? . z4e70@z4cee@i/o-invalid-position-error?) (i/o-filename-error? . z4e7a@z4d09@i/o-filename-error?) (i/o-file-protection-error? . z4e83@z4d20@i/o-file-protection-error?) (i/o-file-is-read-only-error? . z4e8b@z4d35@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . z4e9b@z4d5f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . z4e93@z4d4a@i/o-file-already-exists-error?) (i/o-error? . z4e57@z4cab@i/o-error?) (i/o-error-position . z4e71@z4cf0@i/o-error-position) (i/o-error-port . z4ea5@z4d7a@i/o-error-port) (i/o-error-filename . z4e7b@z4d0b@i/o-error-filename) (i/o-encoding-error? . z4eb6@z4da8@i/o-encoding-error?) (i/o-encoding-error-char . z4eb7@z4daa@i/o-encoding-error-char) (i/o-decoding-error? . z4ead@z4d8f@i/o-decoding-error?) (scheme-report-environment . z4af7@z30a6@scheme-report-environment) (null-environment . z4af6@z30a4@null-environment) (command-line . z4ff7@z4edf@command-line) (eval . z4af9@z30aa@eval) (environment . z4af5@z30a2@environment) (who-condition? . z4e22@z4c1f@who-condition?) (warning? . z4def@z4b97@warning?) (violation? . z4e07@z4bd6@violation?) (undefined-violation? . z4e4f@z4c96@undefined-violation?) (syntax-violation? . z4e45@z4c7d@syntax-violation?) (syntax-violation-subform . z4e47@z4c81@syntax-violation-subform) (syntax-violation-form . z4e46@z4c7f@syntax-violation-form) (syntax-violation . z4b09@z30ca@syntax-violation) (serious-condition? . z4df7@z4bac@serious-condition?) (non-continuable-violation? . z4e2b@z4c36@non-continuable-violation?) (message-condition? . z4de6@z4b80@message-condition?) (make-who-condition . z4e20@z4c1b@make-who-condition) (make-warning . z4dee@z4b95@make-warning) (make-violation . z4e06@z4bd4@make-violation) (make-undefined-violation . z4e4e@z4c94@make-undefined-violation) (make-syntax-violation . z4e42@z4c77@make-syntax-violation) (make-serious-condition . z4df6@z4baa@make-serious-condition) (make-non-continuable-violation . z4e2a@z4c34@make-non-continuable-violation) (make-message-condition . z4de4@z4b7c@make-message-condition) (make-lexical-violation . z4e3a@z4c5e@make-lexical-violation) (make-irritants-condition . z4e16@z4c00@make-irritants-condition) (make-implementation-restriction-violation . z4e32@z4c49@make-implementation-restriction-violation) (make-error . z4dfe@z4bbf@make-error) (make-assertion-violation . z4e0e@z4be9@make-assertion-violation) (lexical-violation? . z4e3b@z4c60@lexical-violation?) (irritants-condition? . z4e18@z4c04@irritants-condition?) (implementation-restriction-violation? . z4e33@z4c4b@implementation-restriction-violation?) (error? . z4dff@z4bc1@error?) (condition-who . z4e23@z4c21@condition-who) (condition-message . z4de7@z4b82@condition-message) (condition-irritants . z4e19@z4c06@condition-irritants) (assertion-violation? . z4e0f@z4beb@assertion-violation?) (no-nans-violation? . z4ec7@z4dd4@no-nans-violation?) (no-infinities-violation? . z4ebf@z4dbf@no-infinities-violation?) (make-no-nans-violation . z4ec6@z4dd2@make-no-nans-violation) (make-no-infinities-violation . z4ebe@z4dbd@make-no-infinities-violation) (assertion-error . z4b06@z30c4@assertion-error)))))) (z2c2b@z2a74@install-library 'z5325 '(mosh interaction) '() '() '() '() '((regexp? . z531d) (alist->eq-hash-table . z531a) (format . z5317) (string-split . z530c) (call-process . z5306) (set-current-directory! . z5302) (expand-path . z5301) (current-directory . z5300) (%spawn . z52ff) (%waitpid . z52fe) (simple-struct-name . z52fd) (simple-struct-set! . z52fc) (simple-struct-ref . z52fb) (make-simple-struct . z52fa) (simple-struct? . z52f9) (pointer-ref-c-int64 . z52f8) (pointer-ref-c-int32 . z52f7) (pointer-ref-c-int16 . z52f6) (pointer-ref-c-int8 . z52f5) (pointer-ref-c-uint64 . z52f4) (pointer-ref-c-uint32 . z52f3) (pointer-ref-c-uint16 . z52f2) (pointer-ref-c-uint8 . z52f1) (pointer-set-c-uint64! . z52f0) (pointer-set-c-uint32! . z52ef) (pointer-set-c-uint16! . z52ee) (pointer-set-c-uint8! . z52ed) (pointer-set-c-int64! . z52ec) (pointer-set-c-int32! . z52eb) (pointer-set-c-int16! . z52ea) (pointer-set-c-int8! . z52e9) (pointer-set-c-pointer! . z52e8) (pointer-set-c-double! . z52e7) (pointer-set-c-float! . z52e6) (pointer-set-c-long-long! . z52e5) (pointer-set-c-long! . z52e4) (pointer-set-c-int! . z52e3) (pointer-set-c-short! . z52e2) (pointer-set-c-char! . z52e1) (pointer-ref-c-pointer . z52e0) (pointer-ref-c-double . z52df) (pointer-ref-c-float . z52de) (pointer-ref-c-unsigned-long-long . z52dd) (pointer-ref-c-signed-long-long . z52dc) (pointer-ref-c-unsigned-long . z52db) (pointer-ref-c-signed-long . z52da) (pointer-ref-c-unsigned-int . z52d9) (pointer-ref-c-signed-int . z52d8) (pointer-ref-c-unsigned-short . z52d7) (pointer-ref-c-signed-short . z52d6) (pointer-ref-c-unsigned-char . z52d5) (pointer-ref-c-signed-char . z52d4) (pointer->integer . z52d3) (integer->pointer . z52d2) (pointer? . z52d1) (shared-errno . z52d0) (%ffi-supported? . z52cf) (%ffi-pointer->string . z52ce) (%ffi-call->string-or-zero . z52cd) (%ffi-call->double . z52cc) (%ffi-call->void* . z52cb) (%ffi-call->void . z52ca) (%ffi-call->char . z52c9) (%ffi-call->int . z52c8) (%ffi-lookup . z52c7) (%ffi-open . z52c6) (%fork . z52c5) (%pipe . z52c4) (p . z52c3) (whereis . z52aa) (register . z52a9) (vm-join! . z52a8) (vm-set-value! . z52a7) (vm? . z52a6) (main-vm? . z52a5) (vm-eval . z52a4) (vm-self . z52a3) (vm-start! . z52a2) (make-vm . z52a1) (mutex-try-lock! . z52a0) (mutex-unlock! . z529f) (mutex-lock! . z529e) (mutex? . z529d) (make-mutex . z529c) (condition-variable-notify-all! . z529b) (condition-variable-notify! . z529a) (condition-variable-wait! . z5299) (make-condition-variable . z5298) (string-upcase . z5281) (string-titlecase . z5280) (string-normalize-nfkd . z527f) (string-normalize-nfkc . z527e) (string-normalize-nfd . z527d) (string-normalize-nfc . z527c) (string-foldcase . z527b) (string-downcase . z527a) (string-ci>? . z5279) (string-ci>=? . z5278) (string-ci=? . z5277) (string-ci<? . z5276) (string-ci<=? . z5275) (char-whitespace? . z5274) (char-upper-case? . z5273) (char-title-case? . z5272) (char-numeric? . z5271) (char-lower-case? . z5270) (char-general-category . z526f) (char-upcase . z526e) (char-titlecase . z526d) (char-foldcase . z526c) (char-downcase . z526b) (char-ci>? . z526a) (char-ci>=? . z5269) (char-ci=? . z5268) (char-ci<? . z5267) (char-ci<=? . z5266) (char-alphabetic? . z5265) (make-variable-transformer . z2e28) (identifier? . z30cb) (generate-temporaries . z30b7) (free-identifier=? . z30b9) (syntax->datum . z30cf) (datum->syntax . z30cd) (bound-identifier=? . z30bb) (record-type-descriptor? . z5264) (record-predicate . z5263) (record-mutator . z5262) (record-constructor . z5261) (record-accessor . z5260) (make-record-type-descriptor . z525f) (make-record-constructor-descriptor . z525e) (record? . z525d) (record-type-uid . z525c) (record-type-sealed? . z525b) (record-type-parent . z525a) (record-type-opaque? . z5259) (record-type-name . z5258) (record-type-generative? . z5257) (record-type-field-names . z5256) (record-rtd . z5255) (record-field-mutable? . z5254) (delete-file . z5253) (file-exists? . z5252) (vector-sort! . z5251) (vector-sort . z5250) (list-sort . z524f) (symbol-hash . z524e) (string-ci-hash . z524d) (string-hash . z524c) (equal-hash . z524b) (hashtable-equivalence-function . z524a) (make-hashtable . z5249) (hashtable-hash-function . z5248) (make-eqv-hashtable . z5247) (make-eq-hashtable . z5246) (hashtable? . z5245) (hashtable-update! . z5244) (hashtable-size . z5243) (hashtable-set! . z5242) (hashtable-ref . z5241) (hashtable-mutable? . z5240) (hashtable-keys . z523f) (hashtable-entries . z523e) (hashtable-delete! . z523d) (hashtable-copy . z523c) (hashtable-contains? . z523b) (hashtable-clear! . z523a) (call-with-output-file . z5239) (call-with-input-file . z5238) (write-char . z5237) (write . z5236) (with-output-to-file . z5235) (with-input-from-file . z5234) (read-char . z5233) (read . z5232) (peek-char . z5231) (open-output-file . z5230) (open-input-file . z522f) (newline . z522e) (display . z522d) (close-output-port . z522c) (close-input-port . z522b) (eof-object? . z522a) (eof-object . z5229) (current-error-port . z5228) (current-output-port . z5227) (current-input-port . z5226) (output-port? . z5225) (input-port? . z5224) (utf-8-codec . z5223) (utf-16-codec . z5222) (transcoder-error-handling-mode . z5221) (transcoder-eol-style . z5220) (transcoder-codec . z521f) (transcoded-port . z521e) (textual-port? . z521d) (string->bytevector . z521c) (standard-output-port . z521b) (standard-input-port . z521a) (standard-error-port . z5219) (set-port-position! . z5218) (put-u8 . z5217) (put-string . z5216) (put-datum . z5215) (put-char . z5214) (put-bytevector . z5213) (port? . z5212) (port-transcoder . z5211) (port-position . z5210) (port-has-set-port-position!? . z520f) (port-has-port-position? . z520e) (port-eof? . z520d) (output-port-buffer-mode . z520c) (open-string-output-port . z520b) (open-string-input-port . z520a) (open-file-output-port . z5209) (open-file-input/output-port . z5208) (open-file-input-port . z5207) (open-bytevector-output-port . z5206) (open-bytevector-input-port . z5205) (native-transcoder . z5204) (native-eol-style . z5203) (make-transcoder . z5202) (latin-1-codec . z5201) (make-i/o-write-error . z4cd2) (make-i/o-read-error . z4cbd) (make-i/o-port-error . z4d73) (make-i/o-invalid-position-error . z4ce9) (make-i/o-filename-error . z4d04) (make-i/o-file-protection-error . z4d1d) (make-i/o-file-is-read-only-error . z4d32) (make-i/o-file-does-not-exist-error . z4d5c) (make-i/o-file-already-exists-error . z4d47) (make-i/o-error . z4ca8) (make-i/o-encoding-error . z4da3) (make-i/o-decoding-error . z4d8c) (make-custom-textual-output-port . z5200) (make-custom-textual-input/output-port . z51ff) (make-custom-textual-input-port . z51fe) (make-custom-binary-output-port . z51fd) (make-custom-binary-input/output-port . z51fc) (make-custom-binary-input-port . z51fb) (make-bytevector . z51fa) (lookahead-u8 . z51f9) (lookahead-char . z51f8) (i/o-write-error? . z4cd4) (i/o-read-error? . z4cbf) (i/o-port-error? . z4d77) (i/o-invalid-position-error? . z4ced) (i/o-filename-error? . z4d08) (i/o-file-protection-error? . z4d1f) (i/o-file-is-read-only-error? . z4d34) (i/o-file-does-not-exist-error? . z4d5e) (i/o-file-already-exists-error? . z4d49) (i/o-error? . z4caa) (i/o-error-position . z4cef) (i/o-error-port . z4d79) (i/o-error-filename . z4d0a) (i/o-encoding-error? . z4da7) (i/o-encoding-error-char . z4da9) (i/o-decoding-error? . z4d8e) (get-u8 . z51f7) (get-string-n! . z51f6) (get-string-n . z51f5) (get-string-all . z51f4) (get-line . z51f3) (get-datum . z51f2) (get-char . z51f1) (get-bytevector-some . z51f0) (get-bytevector-n! . z51ef) (get-bytevector-n . z51ee) (get-bytevector-all . z51ed) (flush-output-port . z51ec) (close-port . z51eb) (exit . z51e3) (command-line . z4ede) (string-fill! . z51e2) (string-set! . z51e1) (set-cdr! . z51e0) (set-car! . z51df) (remove . z51de) (remv . z51dd) (remp . z51dc) (remq . z51db) (partition . z51da) (memv . z51d9) (memq . z51d8) (memp . z51d7) (member . z51d6) (exists . z51d5) (for-all . z51d4) (fold-right . z51d3) (fold-left . z51d2) (find . z51d1) (filter . z51d0) (cons* . z51cf) (assv . z51ce) (assq . z51cd) (assp . z51cc) (assoc . z51cb) (call-with-string-output-port . z51ca) (call-with-port . z51c9) (call-with-bytevector-output-port . z51c8) (bytevector->string . z51c7) (buffer-mode? . z51c6) (binary-port? . z51c5) (with-exception-handler . z51c4) (raise-continuable . z51c3) (raise . z51c2) (eval . z30a9) (environment . z30a1) (make-enumeration . z51c1) (enum-set=? . z51c0) (enum-set-universe . z51bf) (enum-set-union . z51be) (enum-set-subset? . z51bd) (enum-set-projection . z51bc) (enum-set-member? . z51bb) (enum-set-intersection . z51ba) (enum-set-indexer . z51b9) (enum-set-difference . z51b8) (enum-set-constructor . z51b7) (enum-set-complement . z51b6) (enum-set->list . z51b5) (who-condition? . z4c1e) (warning? . z4b96) (violation? . z4bd5) (undefined-violation? . z4c95) (syntax-violation? . z4c7c) (syntax-violation-subform . z4c80) (syntax-violation-form . z4c7e) (syntax-violation . z30c9) (simple-conditions . z51b4) (serious-condition? . z4bab) (non-continuable-violation? . z4c35) (message-condition? . z4b7f) (make-who-condition . z4c1a) (make-warning . z4b94) (make-violation . z4bd3) (make-undefined-violation . z4c93) (make-syntax-violation . z4c76) (make-serious-condition . z4ba9) (make-non-continuable-violation . z4c33) (make-message-condition . z4b7b) (make-lexical-violation . z4c5d) (make-irritants-condition . z4bff) (make-implementation-restriction-violation . z4c48) (make-error . z4bbe) (make-assertion-violation . z4be8) (lexical-violation? . z4c5f) (irritants-condition? . z4c03) (implementation-restriction-violation? . z4c4a) (error? . z4bc0) (condition-who . z4c20) (condition-predicate . z51b3) (condition-message . z4b81) (condition-irritants . z4c05) (condition-accessor . z51b2) (condition . z51b1) (assertion-violation? . z4bea) (condition? . z51b0) (utf32->string . z51af) (utf16->string . z51ae) (utf8->string . z51ad) (uint-list->bytevector . z51ac) (u8-list->bytevector . z51ab) (string->utf8 . z51aa) (string->utf32 . z51a9) (string->utf16 . z51a8) (sint-list->bytevector . z51a7) (native-endianness . z51a6) (bytevector? . z51a5) (bytevector=? . z51a4) (bytevector-uint-set! . z51a3) (bytevector-uint-ref . z51a2) (bytevector-u8-set! . z51a1) (bytevector-u8-ref . z51a0) (bytevector-u64-set! . z519f) (bytevector-u64-ref . z519e) (bytevector-u64-native-set! . z519d) (bytevector-u64-native-ref . z519c) (bytevector-u32-set! . z519b) (bytevector-u32-ref . z519a) (bytevector-u32-native-set! . z5199) (bytevector-u32-native-ref . z5198) (bytevector-u16-set! . z5197) (bytevector-u16-ref . z5196) (bytevector-u16-native-set! . z5195) (bytevector-u16-native-ref . z5194) (bytevector-sint-set! . z5193) (bytevector-sint-ref . z5192) (bytevector-s8-set! . z5191) (bytevector-s8-ref . z5190) (bytevector-s64-set! . z518f) (bytevector-s64-ref . z518e) (bytevector-s64-native-set! . z518d) (bytevector-s64-native-ref . z518c) (bytevector-s32-set! . z518b) (bytevector-s32-ref . z518a) (bytevector-s32-native-set! . z5189) (bytevector-s32-native-ref . z5188) (bytevector-s16-set! . z5187) (bytevector-s16-ref . z5186) (bytevector-s16-native-set! . z5185) (bytevector-s16-native-ref . z5184) (bytevector-length . z5183) (bytevector-ieee-single-ref . z5182) (bytevector-ieee-single-set! . z5181) (bytevector-ieee-single-native-set! . z5180) (bytevector-ieee-single-native-ref . z517f) (bytevector-ieee-double-set! . z517e) (bytevector-ieee-double-ref . z517d) (bytevector-ieee-double-native-set! . z517c) (bytevector-ieee-double-native-ref . z517b) (bytevector-fill! . z517a) (bytevector-copy! . z5179) (bytevector-copy . z5178) (bytevector->uint-list . z5177) (bytevector->u8-list . z5176) (bytevector->sint-list . z5175) (no-nans-violation? . z4dd3) (no-infinities-violation? . z4dbe) (make-no-nans-violation . z4dd1) (make-no-infinities-violation . z4dbc) (real->flonum . z5174) (flzero? . z5173) (fltruncate . z5172) (fltan . z5171) (flsqrt . z5170) (flsin . z516f) (flround . z516e) (flpositive? . z516d) (flonum? . z516c) (flodd? . z516b) (flnumerator . z516a) (flnegative? . z5169) (flnan? . z5168) (flmod0 . z5167) (flmod . z5166) (flmin . z5165) (flmax . z5164) (fllog . z5163) (flinteger? . z5162) (flinfinite? . z5161) (flfloor . z5160) (flfinite? . z515f) (flexpt . z515e) (flexp . z515d) (fleven? . z515c) (fldiv0-and-mod0 . z515b) (fldiv0 . z515a) (fldiv-and-mod . z5159) (fldiv . z5158) (fldenominator . z5157) (flcos . z5156) (flceiling . z5155) (flatan . z5154) (flasin . z5153) (flacos . z5152) (flabs . z5151) (fl>? . z5150) (fl>=? . z514f) (fl=? . z514e) (fl<? . z514d) (fl<=? . z514c) (fl/ . z514b) (fl- . z514a) (fl+ . z5149) (fl* . z5148) (fixnum->flonum . z5147) (fxzero? . z5146) (fxxor . z5145) (fxrotate-bit-field . z5144) (fxreverse-bit-field . z5143) (fxpositive? . z5142) (fxodd? . z5141) (fxnot . z5140) (fxnegative? . z513f) (fxmod0 . z513e) (fxmod . z513d) (fxmin . z513c) (fxmax . z513b) (fxlength . z513a) (fxior . z5139) (fxif . z5138) (fxfirst-bit-set . z5137) (fxeven? . z5136) (fxdiv0-and-mod0 . z5135) (fxdiv0 . z5134) (fxdiv-and-mod . z5133) (fxdiv . z5132) (fxcopy-bit-field . z5131) (fxcopy-bit . z5130) (fxbit-set? . z512f) (fxbit-field . z512e) (fxbit-count . z512d) (fxarithmetic-shift-right . z512c) (fxarithmetic-shift-left . z512b) (fxarithmetic-shift . z512a) (fxand . z5129) (fx>? . z5128) (fx>=? . z5127) (fx=? . z5126) (fx<? . z5125) (fx<=? . z5124) (fx-/carry . z5123) (fx- . z5122) (fx+/carry . z5121) (fx+ . z5120) (fx*/carry . z511f) (fx* . z511e) (greatest-fixnum . z511d) (least-fixnum . z511c) (fixnum-width . z511b) (fixnum? . z511a) (bitwise-rotate-bit-field . z5119) (bitwise-reverse-bit-field . z5118) (bitwise-length . z5117) (bitwise-if . z5116) (bitwise-first-bit-set . z5115) (bitwise-copy-bit-field . z5114) (bitwise-copy-bit . z5113) (bitwise-bit-set? . z5112) (bitwise-bit-field . z5111) (bitwise-bit-count . z5110) (bitwise-xor . z510f) (bitwise-ior . z510e) (bitwise-and . z510d) (bitwise-not . z510c) (bitwise-arithmetic-shift-right . z510b) (bitwise-arithmetic-shift-left . z510a) (bitwise-arithmetic-shift . z5109) (zero? . z5108) (vector? . z5107) (vector-set! . z5106) (vector-ref . z5105) (vector-map . z5104) (vector-length . z5103) (vector-for-each . z5102) (vector-fill! . z5101) (vector->list . z5100) (vector . z50ff) (values . z50fe) (truncate . z50fd) (tan . z50fc) (symbol? . z50fb) (symbol=? . z50fa) (symbol->string . z50f9) (substring . z50f8) (string? . z50f7) (string>? . z50f6) (string>=? . z50f5) (string=? . z50f4) (string<? . z50f3) (string<=? . z50f2) (string-ref . z50f1) (string-length . z50f0) (string-for-each . z50ef) (string-copy . z50ee) (string-append . z50ed) (string->symbol . z50ec) (string->number . z50eb) (string->list . z50ea) (string . z50e9) (sqrt . z50e8) (sin . z50e7) (round . z50e6) (reverse . z50e5) (real? . z50e4) (real-valued? . z50e3) (real-part . z50e2) (rationalize . z50e1) (rational? . z50e0) (rational-valued? . z50df) (procedure? . z50de) (positive? . z50dd) (pair? . z50dc) (odd? . z50db) (numerator . z50da) (number? . z50d9) (number->string . z50d8) (null? . z50d7) (not . z50d6) (negative? . z50d5) (nan? . z50d4) (min . z50d3) (max . z50d2) (map . z50d1) (make-vector . z50d0) (make-string . z50cf) (make-rectangular . z50ce) (make-polar . z50cd) (magnitude . z50cc) (log . z50cb) (list? . z50ca) (list-tail . z50c9) (list-ref . z50c8) (list->vector . z50c7) (list->string . z50c6) (list . z50c5) (length . z50c4) (lcm . z50c3) (integer? . z50c2) (integer-valued? . z50c1) (integer->char . z50c0) (infinite? . z50bf) (inexact? . z50be) (inexact . z50bd) (imag-part . z50bc) (gcd . z50bb) (for-each . z50ba) (floor . z50b9) (finite? . z50b8) (expt . z50b7) (exp . z50b6) (exact? . z50b5) (exact-integer-sqrt . z50b4) (exact . z50b3) (even? . z50b2) (error . z50b1) (eqv? . z50b0) (equal? . z50af) (eq? . z50ae) (dynamic-wind . z50ad) (div0-and-mod0 . z50ac) (mod0 . z50ab) (div0 . z50aa) (div-and-mod . z50a9) (mod . z50a8) (div . z50a7) (denominator . z50a6) (cos . z50a5) (cons . z50a4) (complex? . z50a3) (char? . z50a2) (char>? . z50a1) (char>=? . z50a0) (char=? . z509f) (char<? . z509e) (char<=? . z509d) (char->integer . z509c) (ceiling . z509b) (call-with-values . z509a) (call/cc . z5099) (call-with-current-continuation . z5098) (cddddr . z5097) (cdddar . z5096) (cddadr . z5095) (cddaar . z5094) (cdaddr . z5093) (cdadar . z5092) (cdaadr . z5091) (cdaaar . z5090) (cadddr . z508f) (caddar . z508e) (cadadr . z508d) (cadaar . z508c) (caaddr . z508b) (caadar . z508a) (caaadr . z5089) (caaaar . z5088) (cdddr . z5087) (cddar . z5086) (cdadr . z5085) (cdaar . z5084) (caddr . z5083) (cadar . z5082) (caadr . z5081) (caaar . z5080) (cddr . z507f) (cdar . z507e) (cadr . z507d) (caar . z507c) (cdr . z507b) (car . z507a) (boolean? . z5079) (boolean=? . z5078) (atan . z5077) (assertion-violation . z5076) (asin . z5075) (apply . z5074) (append . z5073) (angle . z5072) (acos . z5071) (abs . z5070) (/ . z506f) (* . z506e) (- . z506d) (+ . z506c) (>= . z506b) (> . z506a) (= . z5069) (<= . z5068) (< . z5067) (library . z5066) (&no-nans . z5065) (&no-infinities . z5064) (&i/o-encoding . z5063) (&i/o-decoding . z5062) (&i/o-port . z5061) (&i/o-file-does-not-exist . z5060) (&i/o-file-already-exists . z505f) (&i/o-file-is-read-only . z505e) (&i/o-file-protection . z505d) (&i/o-filename . z505c) (&i/o-invalid-position . z505b) (&i/o-write . z505a) (&i/o-read . z5059) (&i/o . z5058) (&undefined . z5057) (&syntax . z5056) (&lexical . z5055) (&implementation-restriction . z5054) (&non-continuable . z5053) (&who . z5052) (&irritants . z5051) (&assertion . z5050) (&violation . z504f) (&error . z504e) (&serious . z504d) (&warning . z504c) (&message . z504b) (&condition . z504a) (define-condition-type . z5049) (define-enumeration . z5048) (define-record-type . z5047) (parent-rtd . z5046) (nongenerative . z5045) (opaque . z5044) (sealed . z5043) (protocol . z5042) (parent . z5041) (immutable . z5040) (mutable . z503f) (fields . z503e) (error-handling-mode . z503d) (file-options . z503c) (buffer-mode . z503b) (eol-style . z503a) (guard . z5039) (unsyntax-splicing . z5036) (unsyntax . z5035) (unquote-splicing . z5034) (unquote . z5033) (_ . z5032) (else . z5031) (=> . z5030) (... . z502f) (assert . z502e) (endianness . z502d) (time . z502b) (do . z502a) (cond . z5029) (let* . z5028) (let . z5027) (let*-values . z5026) (let-values . z5025) (identifier-syntax . z5024) (with-syntax . z5023) (quasisyntax . z5022) (quasiquote . z5021) (syntax-rules . z5020) (include . z501f) (record-constructor-descriptor . z501d) (record-type-descriptor . z501c) (case . z501b) (unless . z5019) (when . z5018) (or . z5017) (and . z5016) (if . z5015) (letrec* . z5014) (letrec . z5013) (case-lambda . z5011) (lambda . z5010) (syntax . z500f) (syntax-case . z500e) (quote . z500d) (letrec-syntax . z500b) (let-syntax . z500a) (set! . z5009) (import . z5008) (begin . z5007) (define-syntax . z5005) (define . z5004)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5326 '(psyntax null-environment-5) '() '() '() '() '((make-promise . z51e4) (unquote-splicing . z5034) (unquote . z5033) (_ . z5032) (else . z5031) (=> . z5030) (... . z502f) (delay . z502c) (do . z502a) (cond . z5029) (let* . z5028) (let . z5027) (quasiquote . z5021) (syntax-rules . z5020) (case . z501b) (or . z5017) (and . z5016) (if . z5015) (letrec . z5013) (lambda . z5010) (quote . z500d) (letrec-syntax . z500b) (let-syntax . z500a) (set! . z5009) (begin . z5007) (define-syntax . z5005) (define . z5004)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5327 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . z5279) (string-ci>=? . z5278) (string-ci=? . z5277) (string-ci<? . z5276) (string-ci<=? . z5275) (char-whitespace? . z5274) (char-upper-case? . z5273) (char-numeric? . z5271) (char-lower-case? . z5270) (char-upcase . z526e) (char-downcase . z526b) (char-ci>? . z526a) (char-ci>=? . z5269) (char-ci=? . z5268) (char-ci<? . z5267) (char-ci<=? . z5266) (char-alphabetic? . z5265) (call-with-output-file . z5239) (call-with-input-file . z5238) (write-char . z5237) (write . z5236) (with-output-to-file . z5235) (with-input-from-file . z5234) (read-char . z5233) (read . z5232) (peek-char . z5231) (open-output-file . z5230) (open-input-file . z522f) (newline . z522e) (display . z522d) (close-output-port . z522c) (close-input-port . z522b) (eof-object . z5229) (current-output-port . z5227) (current-input-port . z5226) (output-port? . z5225) (input-port? . z5224) (scheme-report-environment . z30a5) (quotient . z51ea) (null-environment . z30a3) (remainder . z51e9) (modulo . z51e8) (inexact->exact . z51e7) (force . z51e6) (exact->inexact . z51e5) (make-promise . z51e4) (string-fill! . z51e2) (string-set! . z51e1) (set-cdr! . z51e0) (set-car! . z51df) (memv . z51d9) (memq . z51d8) (member . z51d6) (assv . z51ce) (assq . z51cd) (assoc . z51cb) (eval . z30a9) (zero? . z5108) (vector? . z5107) (vector-set! . z5106) (vector-ref . z5105) (vector-length . z5103) (vector-fill! . z5101) (vector->list . z5100) (vector . z50ff) (values . z50fe) (truncate . z50fd) (tan . z50fc) (symbol? . z50fb) (symbol->string . z50f9) (substring . z50f8) (string? . z50f7) (string>? . z50f6) (string>=? . z50f5) (string=? . z50f4) (string<? . z50f3) (string<=? . z50f2) (string-ref . z50f1) (string-length . z50f0) (string-copy . z50ee) (string-append . z50ed) (string->symbol . z50ec) (string->number . z50eb) (string->list . z50ea) (string . z50e9) (sqrt . z50e8) (sin . z50e7) (round . z50e6) (reverse . z50e5) (real? . z50e4) (real-part . z50e2) (rationalize . z50e1) (rational? . z50e0) (procedure? . z50de) (positive? . z50dd) (pair? . z50dc) (odd? . z50db) (numerator . z50da) (number? . z50d9) (number->string . z50d8) (not . z50d6) (negative? . z50d5) (min . z50d3) (max . z50d2) (map . z50d1) (make-vector . z50d0) (make-string . z50cf) (make-rectangular . z50ce) (make-polar . z50cd) (magnitude . z50cc) (log . z50cb) (list? . z50ca) (list-tail . z50c9) (list-ref . z50c8) (list->vector . z50c7) (list->string . z50c6) (list . z50c5) (length . z50c4) (lcm . z50c3) (integer? . z50c2) (integer->char . z50c0) (inexact? . z50be) (imag-part . z50bc) (gcd . z50bb) (for-each . z50ba) (floor . z50b9) (expt . z50b7) (exp . z50b6) (exact? . z50b5) (even? . z50b2) (eqv? . z50b0) (equal? . z50af) (eq? . z50ae) (dynamic-wind . z50ad) (denominator . z50a6) (cos . z50a5) (cons . z50a4) (complex? . z50a3) (char? . z50a2) (char>? . z50a1) (char>=? . z50a0) (char=? . z509f) (char<? . z509e) (char<=? . z509d) (char->integer . z509c) (ceiling . z509b) (call-with-values . z509a) (call-with-current-continuation . z5098) (cddddr . z5097) (cdddar . z5096) (cddadr . z5095) (cddaar . z5094) (cdaddr . z5093) (cdadar . z5092) (cdaadr . z5091) (cdaaar . z5090) (cadddr . z508f) (caddar . z508e) (cadadr . z508d) (cadaar . z508c) (caaddr . z508b) (caadar . z508a) (caaadr . z5089) (caaaar . z5088) (cdddr . z5087) (cddar . z5086) (cdadr . z5085) (cdaar . z5084) (caddr . z5083) (cadar . z5082) (caadr . z5081) (caaar . z5080) (cddr . z507f) (cdar . z507e) (cadr . z507d) (caar . z507c) (cdr . z507b) (car . z507a) (boolean? . z5079) (atan . z5077) (asin . z5075) (apply . z5074) (append . z5073) (angle . z5072) (acos . z5071) (abs . z5070) (/ . z506f) (* . z506e) (- . z506d) (+ . z506c) (>= . z506b) (> . z506a) (= . z5069) (<= . z5068) (< . z5067) (unquote-splicing . z5034) (unquote . z5033) (else . z5031) (=> . z5030) (... . z502f) (delay . z502c) (do . z502a) (cond . z5029) (let* . z5028) (let . z5027) (quasiquote . z5021) (syntax-rules . z5020) (case . z501b) (or . z5017) (and . z5016) (if . z5015) (letrec . z5013) (lambda . z5010) (quote . z500d) (letrec-syntax . z500b) (let-syntax . z500a) (set! . z5009) (begin . z5007) (define-syntax . z5005) (define . z5004)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5328 '(psyntax modules) '() '() '() '() '((module . z5006)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5329 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z532a '(rnrs) '(6) '() '() '() '((regexp? . z531d) (string-upcase . z5281) (string-titlecase . z5280) (string-normalize-nfkd . z527f) (string-normalize-nfkc . z527e) (string-normalize-nfd . z527d) (string-normalize-nfc . z527c) (string-foldcase . z527b) (string-downcase . z527a) (string-ci>? . z5279) (string-ci>=? . z5278) (string-ci=? . z5277) (string-ci<? . z5276) (string-ci<=? . z5275) (char-whitespace? . z5274) (char-upper-case? . z5273) (char-title-case? . z5272) (char-numeric? . z5271) (char-lower-case? . z5270) (char-general-category . z526f) (char-upcase . z526e) (char-titlecase . z526d) (char-foldcase . z526c) (char-downcase . z526b) (char-ci>? . z526a) (char-ci>=? . z5269) (char-ci=? . z5268) (char-ci<? . z5267) (char-ci<=? . z5266) (char-alphabetic? . z5265) (make-variable-transformer . z2e28) (identifier? . z30cb) (generate-temporaries . z30b7) (free-identifier=? . z30b9) (syntax->datum . z30cf) (datum->syntax . z30cd) (bound-identifier=? . z30bb) (record-type-descriptor? . z5264) (record-predicate . z5263) (record-mutator . z5262) (record-constructor . z5261) (record-accessor . z5260) (make-record-type-descriptor . z525f) (make-record-constructor-descriptor . z525e) (record? . z525d) (record-type-uid . z525c) (record-type-sealed? . z525b) (record-type-parent . z525a) (record-type-opaque? . z5259) (record-type-name . z5258) (record-type-generative? . z5257) (record-type-field-names . z5256) (record-rtd . z5255) (record-field-mutable? . z5254) (delete-file . z5253) (file-exists? . z5252) (vector-sort! . z5251) (vector-sort . z5250) (list-sort . z524f) (symbol-hash . z524e) (string-ci-hash . z524d) (string-hash . z524c) (equal-hash . z524b) (hashtable-equivalence-function . z524a) (make-hashtable . z5249) (hashtable-hash-function . z5248) (make-eqv-hashtable . z5247) (make-eq-hashtable . z5246) (hashtable? . z5245) (hashtable-update! . z5244) (hashtable-size . z5243) (hashtable-set! . z5242) (hashtable-ref . z5241) (hashtable-mutable? . z5240) (hashtable-keys . z523f) (hashtable-entries . z523e) (hashtable-delete! . z523d) (hashtable-copy . z523c) (hashtable-contains? . z523b) (hashtable-clear! . z523a) (call-with-output-file . z5239) (call-with-input-file . z5238) (write-char . z5237) (write . z5236) (with-output-to-file . z5235) (with-input-from-file . z5234) (read-char . z5233) (read . z5232) (peek-char . z5231) (open-output-file . z5230) (open-input-file . z522f) (newline . z522e) (display . z522d) (close-output-port . z522c) (close-input-port . z522b) (eof-object? . z522a) (eof-object . z5229) (current-error-port . z5228) (current-output-port . z5227) (current-input-port . z5226) (output-port? . z5225) (input-port? . z5224) (utf-8-codec . z5223) (utf-16-codec . z5222) (transcoder-error-handling-mode . z5221) (transcoder-eol-style . z5220) (transcoder-codec . z521f) (transcoded-port . z521e) (textual-port? . z521d) (string->bytevector . z521c) (standard-output-port . z521b) (standard-input-port . z521a) (standard-error-port . z5219) (set-port-position! . z5218) (put-u8 . z5217) (put-string . z5216) (put-datum . z5215) (put-char . z5214) (put-bytevector . z5213) (port? . z5212) (port-transcoder . z5211) (port-position . z5210) (port-has-set-port-position!? . z520f) (port-has-port-position? . z520e) (port-eof? . z520d) (output-port-buffer-mode . z520c) (open-string-output-port . z520b) (open-string-input-port . z520a) (open-file-output-port . z5209) (open-file-input/output-port . z5208) (open-file-input-port . z5207) (open-bytevector-output-port . z5206) (open-bytevector-input-port . z5205) (native-transcoder . z5204) (native-eol-style . z5203) (make-transcoder . z5202) (latin-1-codec . z5201) (make-i/o-write-error . z4cd2) (make-i/o-read-error . z4cbd) (make-i/o-port-error . z4d73) (make-i/o-invalid-position-error . z4ce9) (make-i/o-filename-error . z4d04) (make-i/o-file-protection-error . z4d1d) (make-i/o-file-is-read-only-error . z4d32) (make-i/o-file-does-not-exist-error . z4d5c) (make-i/o-file-already-exists-error . z4d47) (make-i/o-error . z4ca8) (make-i/o-encoding-error . z4da3) (make-i/o-decoding-error . z4d8c) (make-custom-textual-output-port . z5200) (make-custom-textual-input/output-port . z51ff) (make-custom-textual-input-port . z51fe) (make-custom-binary-output-port . z51fd) (make-custom-binary-input/output-port . z51fc) (make-custom-binary-input-port . z51fb) (make-bytevector . z51fa) (lookahead-u8 . z51f9) (lookahead-char . z51f8) (i/o-write-error? . z4cd4) (i/o-read-error? . z4cbf) (i/o-port-error? . z4d77) (i/o-invalid-position-error? . z4ced) (i/o-filename-error? . z4d08) (i/o-file-protection-error? . z4d1f) (i/o-file-is-read-only-error? . z4d34) (i/o-file-does-not-exist-error? . z4d5e) (i/o-file-already-exists-error? . z4d49) (i/o-error? . z4caa) (i/o-error-position . z4cef) (i/o-error-port . z4d79) (i/o-error-filename . z4d0a) (i/o-encoding-error? . z4da7) (i/o-encoding-error-char . z4da9) (i/o-decoding-error? . z4d8e) (get-u8 . z51f7) (get-string-n! . z51f6) (get-string-n . z51f5) (get-string-all . z51f4) (get-line . z51f3) (get-datum . z51f2) (get-char . z51f1) (get-bytevector-some . z51f0) (get-bytevector-n! . z51ef) (get-bytevector-n . z51ee) (get-bytevector-all . z51ed) (flush-output-port . z51ec) (close-port . z51eb) (exit . z51e3) (command-line . z4ede) (remove . z51de) (remv . z51dd) (remp . z51dc) (remq . z51db) (partition . z51da) (memv . z51d9) (memq . z51d8) (memp . z51d7) (member . z51d6) (exists . z51d5) (for-all . z51d4) (fold-right . z51d3) (fold-left . z51d2) (find . z51d1) (filter . z51d0) (cons* . z51cf) (assv . z51ce) (assq . z51cd) (assp . z51cc) (assoc . z51cb) (call-with-string-output-port . z51ca) (call-with-port . z51c9) (call-with-bytevector-output-port . z51c8) (bytevector->string . z51c7) (buffer-mode? . z51c6) (binary-port? . z51c5) (with-exception-handler . z51c4) (raise-continuable . z51c3) (raise . z51c2) (make-enumeration . z51c1) (enum-set=? . z51c0) (enum-set-universe . z51bf) (enum-set-union . z51be) (enum-set-subset? . z51bd) (enum-set-projection . z51bc) (enum-set-member? . z51bb) (enum-set-intersection . z51ba) (enum-set-indexer . z51b9) (enum-set-difference . z51b8) (enum-set-constructor . z51b7) (enum-set-complement . z51b6) (enum-set->list . z51b5) (who-condition? . z4c1e) (warning? . z4b96) (violation? . z4bd5) (undefined-violation? . z4c95) (syntax-violation? . z4c7c) (syntax-violation-subform . z4c80) (syntax-violation-form . z4c7e) (syntax-violation . z30c9) (simple-conditions . z51b4) (serious-condition? . z4bab) (non-continuable-violation? . z4c35) (message-condition? . z4b7f) (make-who-condition . z4c1a) (make-warning . z4b94) (make-violation . z4bd3) (make-undefined-violation . z4c93) (make-syntax-violation . z4c76) (make-serious-condition . z4ba9) (make-non-continuable-violation . z4c33) (make-message-condition . z4b7b) (make-lexical-violation . z4c5d) (make-irritants-condition . z4bff) (make-implementation-restriction-violation . z4c48) (make-error . z4bbe) (make-assertion-violation . z4be8) (lexical-violation? . z4c5f) (irritants-condition? . z4c03) (implementation-restriction-violation? . z4c4a) (error? . z4bc0) (condition-who . z4c20) (condition-predicate . z51b3) (condition-message . z4b81) (condition-irritants . z4c05) (condition-accessor . z51b2) (condition . z51b1) (assertion-violation? . z4bea) (condition? . z51b0) (utf32->string . z51af) (utf16->string . z51ae) (utf8->string . z51ad) (uint-list->bytevector . z51ac) (u8-list->bytevector . z51ab) (string->utf8 . z51aa) (string->utf32 . z51a9) (string->utf16 . z51a8) (sint-list->bytevector . z51a7) (native-endianness . z51a6) (bytevector? . z51a5) (bytevector=? . z51a4) (bytevector-uint-set! . z51a3) (bytevector-uint-ref . z51a2) (bytevector-u8-set! . z51a1) (bytevector-u8-ref . z51a0) (bytevector-u64-set! . z519f) (bytevector-u64-ref . z519e) (bytevector-u64-native-set! . z519d) (bytevector-u64-native-ref . z519c) (bytevector-u32-set! . z519b) (bytevector-u32-ref . z519a) (bytevector-u32-native-set! . z5199) (bytevector-u32-native-ref . z5198) (bytevector-u16-set! . z5197) (bytevector-u16-ref . z5196) (bytevector-u16-native-set! . z5195) (bytevector-u16-native-ref . z5194) (bytevector-sint-set! . z5193) (bytevector-sint-ref . z5192) (bytevector-s8-set! . z5191) (bytevector-s8-ref . z5190) (bytevector-s64-set! . z518f) (bytevector-s64-ref . z518e) (bytevector-s64-native-set! . z518d) (bytevector-s64-native-ref . z518c) (bytevector-s32-set! . z518b) (bytevector-s32-ref . z518a) (bytevector-s32-native-set! . z5189) (bytevector-s32-native-ref . z5188) (bytevector-s16-set! . z5187) (bytevector-s16-ref . z5186) (bytevector-s16-native-set! . z5185) (bytevector-s16-native-ref . z5184) (bytevector-length . z5183) (bytevector-ieee-single-ref . z5182) (bytevector-ieee-single-set! . z5181) (bytevector-ieee-single-native-set! . z5180) (bytevector-ieee-single-native-ref . z517f) (bytevector-ieee-double-set! . z517e) (bytevector-ieee-double-ref . z517d) (bytevector-ieee-double-native-set! . z517c) (bytevector-ieee-double-native-ref . z517b) (bytevector-fill! . z517a) (bytevector-copy! . z5179) (bytevector-copy . z5178) (bytevector->uint-list . z5177) (bytevector->u8-list . z5176) (bytevector->sint-list . z5175) (no-nans-violation? . z4dd3) (no-infinities-violation? . z4dbe) (make-no-nans-violation . z4dd1) (make-no-infinities-violation . z4dbc) (real->flonum . z5174) (flzero? . z5173) (fltruncate . z5172) (fltan . z5171) (flsqrt . z5170) (flsin . z516f) (flround . z516e) (flpositive? . z516d) (flonum? . z516c) (flodd? . z516b) (flnumerator . z516a) (flnegative? . z5169) (flnan? . z5168) (flmod0 . z5167) (flmod . z5166) (flmin . z5165) (flmax . z5164) (fllog . z5163) (flinteger? . z5162) (flinfinite? . z5161) (flfloor . z5160) (flfinite? . z515f) (flexpt . z515e) (flexp . z515d) (fleven? . z515c) (fldiv0-and-mod0 . z515b) (fldiv0 . z515a) (fldiv-and-mod . z5159) (fldiv . z5158) (fldenominator . z5157) (flcos . z5156) (flceiling . z5155) (flatan . z5154) (flasin . z5153) (flacos . z5152) (flabs . z5151) (fl>? . z5150) (fl>=? . z514f) (fl=? . z514e) (fl<? . z514d) (fl<=? . z514c) (fl/ . z514b) (fl- . z514a) (fl+ . z5149) (fl* . z5148) (fixnum->flonum . z5147) (fxzero? . z5146) (fxxor . z5145) (fxrotate-bit-field . z5144) (fxreverse-bit-field . z5143) (fxpositive? . z5142) (fxodd? . z5141) (fxnot . z5140) (fxnegative? . z513f) (fxmod0 . z513e) (fxmod . z513d) (fxmin . z513c) (fxmax . z513b) (fxlength . z513a) (fxior . z5139) (fxif . z5138) (fxfirst-bit-set . z5137) (fxeven? . z5136) (fxdiv0-and-mod0 . z5135) (fxdiv0 . z5134) (fxdiv-and-mod . z5133) (fxdiv . z5132) (fxcopy-bit-field . z5131) (fxcopy-bit . z5130) (fxbit-set? . z512f) (fxbit-field . z512e) (fxbit-count . z512d) (fxarithmetic-shift-right . z512c) (fxarithmetic-shift-left . z512b) (fxarithmetic-shift . z512a) (fxand . z5129) (fx>? . z5128) (fx>=? . z5127) (fx=? . z5126) (fx<? . z5125) (fx<=? . z5124) (fx-/carry . z5123) (fx- . z5122) (fx+/carry . z5121) (fx+ . z5120) (fx*/carry . z511f) (fx* . z511e) (greatest-fixnum . z511d) (least-fixnum . z511c) (fixnum-width . z511b) (fixnum? . z511a) (bitwise-rotate-bit-field . z5119) (bitwise-reverse-bit-field . z5118) (bitwise-length . z5117) (bitwise-if . z5116) (bitwise-first-bit-set . z5115) (bitwise-copy-bit-field . z5114) (bitwise-copy-bit . z5113) (bitwise-bit-set? . z5112) (bitwise-bit-field . z5111) (bitwise-bit-count . z5110) (bitwise-xor . z510f) (bitwise-ior . z510e) (bitwise-and . z510d) (bitwise-not . z510c) (bitwise-arithmetic-shift-right . z510b) (bitwise-arithmetic-shift-left . z510a) (bitwise-arithmetic-shift . z5109) (zero? . z5108) (vector? . z5107) (vector-set! . z5106) (vector-ref . z5105) (vector-map . z5104) (vector-length . z5103) (vector-for-each . z5102) (vector-fill! . z5101) (vector->list . z5100) (vector . z50ff) (values . z50fe) (truncate . z50fd) (tan . z50fc) (symbol? . z50fb) (symbol=? . z50fa) (symbol->string . z50f9) (substring . z50f8) (string? . z50f7) (string>? . z50f6) (string>=? . z50f5) (string=? . z50f4) (string<? . z50f3) (string<=? . z50f2) (string-ref . z50f1) (string-length . z50f0) (string-for-each . z50ef) (string-copy . z50ee) (string-append . z50ed) (string->symbol . z50ec) (string->number . z50eb) (string->list . z50ea) (string . z50e9) (sqrt . z50e8) (sin . z50e7) (round . z50e6) (reverse . z50e5) (real? . z50e4) (real-valued? . z50e3) (real-part . z50e2) (rationalize . z50e1) (rational? . z50e0) (rational-valued? . z50df) (procedure? . z50de) (positive? . z50dd) (pair? . z50dc) (odd? . z50db) (numerator . z50da) (number? . z50d9) (number->string . z50d8) (null? . z50d7) (not . z50d6) (negative? . z50d5) (nan? . z50d4) (min . z50d3) (max . z50d2) (map . z50d1) (make-vector . z50d0) (make-string . z50cf) (make-rectangular . z50ce) (make-polar . z50cd) (magnitude . z50cc) (log . z50cb) (list? . z50ca) (list-tail . z50c9) (list-ref . z50c8) (list->vector . z50c7) (list->string . z50c6) (list . z50c5) (length . z50c4) (lcm . z50c3) (integer? . z50c2) (integer-valued? . z50c1) (integer->char . z50c0) (infinite? . z50bf) (inexact? . z50be) (inexact . z50bd) (imag-part . z50bc) (gcd . z50bb) (for-each . z50ba) (floor . z50b9) (finite? . z50b8) (expt . z50b7) (exp . z50b6) (exact? . z50b5) (exact-integer-sqrt . z50b4) (exact . z50b3) (even? . z50b2) (error . z50b1) (eqv? . z50b0) (equal? . z50af) (eq? . z50ae) (dynamic-wind . z50ad) (div0-and-mod0 . z50ac) (mod0 . z50ab) (div0 . z50aa) (div-and-mod . z50a9) (mod . z50a8) (div . z50a7) (denominator . z50a6) (cos . z50a5) (cons . z50a4) (complex? . z50a3) (char? . z50a2) (char>? . z50a1) (char>=? . z50a0) (char=? . z509f) (char<? . z509e) (char<=? . z509d) (char->integer . z509c) (ceiling . z509b) (call-with-values . z509a) (call/cc . z5099) (call-with-current-continuation . z5098) (cddddr . z5097) (cdddar . z5096) (cddadr . z5095) (cddaar . z5094) (cdaddr . z5093) (cdadar . z5092) (cdaadr . z5091) (cdaaar . z5090) (cadddr . z508f) (caddar . z508e) (cadadr . z508d) (cadaar . z508c) (caaddr . z508b) (caadar . z508a) (caaadr . z5089) (caaaar . z5088) (cdddr . z5087) (cddar . z5086) (cdadr . z5085) (cdaar . z5084) (caddr . z5083) (cadar . z5082) (caadr . z5081) (caaar . z5080) (cddr . z507f) (cdar . z507e) (cadr . z507d) (caar . z507c) (cdr . z507b) (car . z507a) (boolean? . z5079) (boolean=? . z5078) (atan . z5077) (assertion-violation . z5076) (asin . z5075) (apply . z5074) (append . z5073) (angle . z5072) (acos . z5071) (abs . z5070) (/ . z506f) (* . z506e) (- . z506d) (+ . z506c) (>= . z506b) (> . z506a) (= . z5069) (<= . z5068) (< . z5067) (&no-nans . z5065) (&no-infinities . z5064) (&i/o-encoding . z5063) (&i/o-decoding . z5062) (&i/o-port . z5061) (&i/o-file-does-not-exist . z5060) (&i/o-file-already-exists . z505f) (&i/o-file-is-read-only . z505e) (&i/o-file-protection . z505d) (&i/o-filename . z505c) (&i/o-invalid-position . z505b) (&i/o-write . z505a) (&i/o-read . z5059) (&i/o . z5058) (&undefined . z5057) (&syntax . z5056) (&lexical . z5055) (&implementation-restriction . z5054) (&non-continuable . z5053) (&who . z5052) (&irritants . z5051) (&assertion . z5050) (&violation . z504f) (&error . z504e) (&serious . z504d) (&warning . z504c) (&message . z504b) (&condition . z504a) (define-condition-type . z5049) (define-enumeration . z5048) (define-record-type . z5047) (parent-rtd . z5046) (nongenerative . z5045) (opaque . z5044) (sealed . z5043) (protocol . z5042) (parent . z5041) (immutable . z5040) (mutable . z503f) (fields . z503e) (error-handling-mode . z503d) (file-options . z503c) (buffer-mode . z503b) (eol-style . z503a) (guard . z5039) (unsyntax-splicing . z5036) (unsyntax . z5035) (unquote-splicing . z5034) (unquote . z5033) (_ . z5032) (else . z5031) (=> . z5030) (... . z502f) (assert . z502e) (endianness . z502d) (do . z502a) (cond . z5029) (let* . z5028) (let . z5027) (let*-values . z5026) (let-values . z5025) (identifier-syntax . z5024) (with-syntax . z5023) (quasisyntax . z5022) (quasiquote . z5021) (syntax-rules . z5020) (record-constructor-descriptor . z501d) (record-type-descriptor . z501c) (case . z501b) (unless . z5019) (when . z5018) (or . z5017) (and . z5016) (if . z5015) (letrec* . z5014) (letrec . z5013) (case-lambda . z5011) (lambda . z5010) (syntax . z500f) (syntax-case . z500e) (quote . z500d) (letrec-syntax . z500b) (let-syntax . z500a) (set! . z5009) (begin . z5007) (define-syntax . z5005) (define . z5004)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z532b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . z30a5) (quotient . z51ea) (null-environment . z30a3) (remainder . z51e9) (modulo . z51e8) (inexact->exact . z51e7) (force . z51e6) (exact->inexact . z51e5) (make-promise . z51e4) (delay . z502c)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z532c '(rnrs control) '(6) '() '() '() '((do . z502a) (unless . z5019) (when . z5018) (case-lambda . z5011)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z532d '(rnrs eval) '(6) '() '() '() '((eval . z30a9) (environment . z30a1)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z532e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . z51e0) (set-car! . z51df)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z532f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . z51e2) (string-set! . z51e1)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5330 '(rnrs programs) '(6) '() '() '() '((exit . z51e3) (command-line . z4ede)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5331 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . z2e28) (identifier? . z30cb) (generate-temporaries . z30b7) (free-identifier=? . z30b9) (syntax->datum . z30cf) (datum->syntax . z30cd) (bound-identifier=? . z30bb) (syntax-violation . z30c9) (unsyntax-splicing . z5036) (unsyntax . z5035) (_ . z5032) (... . z502f) (with-syntax . z5023) (quasisyntax . z5022) (syntax . z500f) (syntax-case . z500e)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5332 '(rnrs files) '(6) '() '() '() '((delete-file . z5253) (file-exists? . z5252) (make-i/o-write-error . z4cd2) (make-i/o-read-error . z4cbd) (make-i/o-port-error . z4d73) (make-i/o-invalid-position-error . z4ce9) (make-i/o-filename-error . z4d04) (make-i/o-file-protection-error . z4d1d) (make-i/o-file-is-read-only-error . z4d32) (make-i/o-file-does-not-exist-error . z4d5c) (make-i/o-file-already-exists-error . z4d47) (make-i/o-error . z4ca8) (i/o-write-error? . z4cd4) (i/o-read-error? . z4cbf) (i/o-port-error? . z4d77) (i/o-invalid-position-error? . z4ced) (i/o-filename-error? . z4d08) (i/o-file-protection-error? . z4d1f) (i/o-file-is-read-only-error? . z4d34) (i/o-file-does-not-exist-error? . z4d5e) (i/o-file-already-exists-error? . z4d49) (i/o-error? . z4caa) (i/o-error-position . z4cef) (i/o-error-port . z4d79) (i/o-error-filename . z4d0a) (&i/o-port . z5061) (&i/o-file-does-not-exist . z5060) (&i/o-file-already-exists . z505f) (&i/o-file-is-read-only . z505e) (&i/o-file-protection . z505d) (&i/o-filename . z505c) (&i/o-invalid-position . z505b) (&i/o-write . z505a) (&i/o-read . z5059) (&i/o . z5058)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5333 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . z5251) (vector-sort . z5250) (list-sort . z524f)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5334 '(rnrs base) '(6) '() '() '() '((zero? . z5108) (vector? . z5107) (vector-set! . z5106) (vector-ref . z5105) (vector-map . z5104) (vector-length . z5103) (vector-for-each . z5102) (vector-fill! . z5101) (vector->list . z5100) (vector . z50ff) (values . z50fe) (truncate . z50fd) (tan . z50fc) (symbol? . z50fb) (symbol=? . z50fa) (symbol->string . z50f9) (substring . z50f8) (string? . z50f7) (string>? . z50f6) (string>=? . z50f5) (string=? . z50f4) (string<? . z50f3) (string<=? . z50f2) (string-ref . z50f1) (string-length . z50f0) (string-for-each . z50ef) (string-copy . z50ee) (string-append . z50ed) (string->symbol . z50ec) (string->number . z50eb) (string->list . z50ea) (string . z50e9) (sqrt . z50e8) (sin . z50e7) (round . z50e6) (reverse . z50e5) (real? . z50e4) (real-valued? . z50e3) (real-part . z50e2) (rationalize . z50e1) (rational? . z50e0) (rational-valued? . z50df) (procedure? . z50de) (positive? . z50dd) (pair? . z50dc) (odd? . z50db) (numerator . z50da) (number? . z50d9) (number->string . z50d8) (null? . z50d7) (not . z50d6) (negative? . z50d5) (nan? . z50d4) (min . z50d3) (max . z50d2) (map . z50d1) (make-vector . z50d0) (make-string . z50cf) (make-rectangular . z50ce) (make-polar . z50cd) (magnitude . z50cc) (log . z50cb) (list? . z50ca) (list-tail . z50c9) (list-ref . z50c8) (list->vector . z50c7) (list->string . z50c6) (list . z50c5) (length . z50c4) (lcm . z50c3) (integer? . z50c2) (integer-valued? . z50c1) (integer->char . z50c0) (infinite? . z50bf) (inexact? . z50be) (inexact . z50bd) (imag-part . z50bc) (gcd . z50bb) (for-each . z50ba) (floor . z50b9) (finite? . z50b8) (expt . z50b7) (exp . z50b6) (exact? . z50b5) (exact-integer-sqrt . z50b4) (exact . z50b3) (even? . z50b2) (error . z50b1) (eqv? . z50b0) (equal? . z50af) (eq? . z50ae) (dynamic-wind . z50ad) (div0-and-mod0 . z50ac) (mod0 . z50ab) (div0 . z50aa) (div-and-mod . z50a9) (mod . z50a8) (div . z50a7) (denominator . z50a6) (cos . z50a5) (cons . z50a4) (complex? . z50a3) (char? . z50a2) (char>? . z50a1) (char>=? . z50a0) (char=? . z509f) (char<? . z509e) (char<=? . z509d) (char->integer . z509c) (ceiling . z509b) (call-with-values . z509a) (call/cc . z5099) (call-with-current-continuation . z5098) (cddddr . z5097) (cdddar . z5096) (cddadr . z5095) (cddaar . z5094) (cdaddr . z5093) (cdadar . z5092) (cdaadr . z5091) (cdaaar . z5090) (cadddr . z508f) (caddar . z508e) (cadadr . z508d) (cadaar . z508c) (caaddr . z508b) (caadar . z508a) (caaadr . z5089) (caaaar . z5088) (cdddr . z5087) (cddar . z5086) (cdadr . z5085) (cdaar . z5084) (caddr . z5083) (cadar . z5082) (caadr . z5081) (caaar . z5080) (cddr . z507f) (cdar . z507e) (cadr . z507d) (caar . z507c) (cdr . z507b) (car . z507a) (boolean? . z5079) (boolean=? . z5078) (atan . z5077) (assertion-violation . z5076) (asin . z5075) (apply . z5074) (append . z5073) (angle . z5072) (acos . z5071) (abs . z5070) (/ . z506f) (* . z506e) (- . z506d) (+ . z506c) (>= . z506b) (> . z506a) (= . z5069) (<= . z5068) (< . z5067) (unquote-splicing . z5034) (unquote . z5033) (_ . z5032) (else . z5031) (=> . z5030) (... . z502f) (assert . z502e) (cond . z5029) (let* . z5028) (let . z5027) (let*-values . z5026) (let-values . z5025) (identifier-syntax . z5024) (quasiquote . z5021) (syntax-rules . z5020) (case . z501b) (or . z5017) (and . z5016) (if . z5015) (letrec* . z5014) (letrec . z5013) (lambda . z5010) (quote . z500d) (letrec-syntax . z500b) (let-syntax . z500a) (set! . z5009) (begin . z5007) (define-syntax . z5005) (define . z5004)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5335 '(rnrs lists) '(6) '() '() '() '((remove . z51de) (remv . z51dd) (remp . z51dc) (remq . z51db) (partition . z51da) (memv . z51d9) (memq . z51d8) (memp . z51d7) (member . z51d6) (exists . z51d5) (for-all . z51d4) (fold-right . z51d3) (fold-left . z51d2) (find . z51d1) (filter . z51d0) (cons* . z51cf) (assv . z51ce) (assq . z51cd) (assp . z51cc) (assoc . z51cb)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5336 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . z5239) (call-with-input-file . z5238) (write-char . z5237) (write . z5236) (with-output-to-file . z5235) (with-input-from-file . z5234) (read-char . z5233) (read . z5232) (peek-char . z5231) (open-output-file . z5230) (open-input-file . z522f) (newline . z522e) (display . z522d) (close-output-port . z522c) (close-input-port . z522b) (eof-object? . z522a) (eof-object . z5229) (current-error-port . z5228) (current-output-port . z5227) (current-input-port . z5226) (output-port? . z5225) (input-port? . z5224) (make-i/o-write-error . z4cd2) (make-i/o-read-error . z4cbd) (make-i/o-port-error . z4d73) (make-i/o-invalid-position-error . z4ce9) (make-i/o-filename-error . z4d04) (make-i/o-file-protection-error . z4d1d) (make-i/o-file-is-read-only-error . z4d32) (make-i/o-file-does-not-exist-error . z4d5c) (make-i/o-file-already-exists-error . z4d47) (make-i/o-error . z4ca8) (i/o-write-error? . z4cd4) (i/o-read-error? . z4cbf) (i/o-port-error? . z4d77) (i/o-invalid-position-error? . z4ced) (i/o-filename-error? . z4d08) (i/o-file-protection-error? . z4d1f) (i/o-file-is-read-only-error? . z4d34) (i/o-file-does-not-exist-error? . z4d5e) (i/o-file-already-exists-error? . z4d49) (i/o-error? . z4caa) (i/o-error-position . z4cef) (i/o-error-port . z4d79) (i/o-error-filename . z4d0a) (&i/o-port . z5061) (&i/o-file-does-not-exist . z5060) (&i/o-file-already-exists . z505f) (&i/o-file-is-read-only . z505e) (&i/o-file-protection . z505d) (&i/o-filename . z505c) (&i/o-invalid-position . z505b) (&i/o-write . z505a) (&i/o-read . z5059) (&i/o . z5058)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5337 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . z51fa) (utf32->string . z51af) (utf16->string . z51ae) (utf8->string . z51ad) (uint-list->bytevector . z51ac) (u8-list->bytevector . z51ab) (string->utf8 . z51aa) (string->utf32 . z51a9) (string->utf16 . z51a8) (sint-list->bytevector . z51a7) (native-endianness . z51a6) (bytevector? . z51a5) (bytevector=? . z51a4) (bytevector-uint-set! . z51a3) (bytevector-uint-ref . z51a2) (bytevector-u8-set! . z51a1) (bytevector-u8-ref . z51a0) (bytevector-u64-set! . z519f) (bytevector-u64-ref . z519e) (bytevector-u64-native-set! . z519d) (bytevector-u64-native-ref . z519c) (bytevector-u32-set! . z519b) (bytevector-u32-ref . z519a) (bytevector-u32-native-set! . z5199) (bytevector-u32-native-ref . z5198) (bytevector-u16-set! . z5197) (bytevector-u16-ref . z5196) (bytevector-u16-native-set! . z5195) (bytevector-u16-native-ref . z5194) (bytevector-sint-set! . z5193) (bytevector-sint-ref . z5192) (bytevector-s8-set! . z5191) (bytevector-s8-ref . z5190) (bytevector-s64-set! . z518f) (bytevector-s64-ref . z518e) (bytevector-s64-native-set! . z518d) (bytevector-s64-native-ref . z518c) (bytevector-s32-set! . z518b) (bytevector-s32-ref . z518a) (bytevector-s32-native-set! . z5189) (bytevector-s32-native-ref . z5188) (bytevector-s16-set! . z5187) (bytevector-s16-ref . z5186) (bytevector-s16-native-set! . z5185) (bytevector-s16-native-ref . z5184) (bytevector-length . z5183) (bytevector-ieee-single-ref . z5182) (bytevector-ieee-single-set! . z5181) (bytevector-ieee-single-native-set! . z5180) (bytevector-ieee-single-native-ref . z517f) (bytevector-ieee-double-set! . z517e) (bytevector-ieee-double-ref . z517d) (bytevector-ieee-double-native-set! . z517c) (bytevector-ieee-double-native-ref . z517b) (bytevector-fill! . z517a) (bytevector-copy! . z5179) (bytevector-copy . z5178) (bytevector->uint-list . z5177) (bytevector->u8-list . z5176) (bytevector->sint-list . z5175) (endianness . z502d)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5338 '(rnrs unicode) '(6) '() '() '() '((string-upcase . z5281) (string-titlecase . z5280) (string-normalize-nfkd . z527f) (string-normalize-nfkc . z527e) (string-normalize-nfd . z527d) (string-normalize-nfc . z527c) (string-foldcase . z527b) (string-downcase . z527a) (string-ci>? . z5279) (string-ci>=? . z5278) (string-ci=? . z5277) (string-ci<? . z5276) (string-ci<=? . z5275) (char-whitespace? . z5274) (char-upper-case? . z5273) (char-title-case? . z5272) (char-numeric? . z5271) (char-lower-case? . z5270) (char-general-category . z526f) (char-upcase . z526e) (char-titlecase . z526d) (char-foldcase . z526c) (char-downcase . z526b) (char-ci>? . z526a) (char-ci>=? . z5269) (char-ci=? . z5268) (char-ci<? . z5267) (char-ci<=? . z5266) (char-alphabetic? . z5265)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5339 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . z51c4) (raise-continuable . z51c3) (raise . z51c2) (guard . z5039) (else . z5031) (=> . z5030)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z533a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . z5119) (bitwise-reverse-bit-field . z5118) (bitwise-length . z5117) (bitwise-if . z5116) (bitwise-first-bit-set . z5115) (bitwise-copy-bit-field . z5114) (bitwise-copy-bit . z5113) (bitwise-bit-set? . z5112) (bitwise-bit-field . z5111) (bitwise-bit-count . z5110) (bitwise-xor . z510f) (bitwise-ior . z510e) (bitwise-and . z510d) (bitwise-not . z510c) (bitwise-arithmetic-shift-right . z510b) (bitwise-arithmetic-shift-left . z510a) (bitwise-arithmetic-shift . z5109)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z533b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . z5146) (fxxor . z5145) (fxrotate-bit-field . z5144) (fxreverse-bit-field . z5143) (fxpositive? . z5142) (fxodd? . z5141) (fxnot . z5140) (fxnegative? . z513f) (fxmod0 . z513e) (fxmod . z513d) (fxmin . z513c) (fxmax . z513b) (fxlength . z513a) (fxior . z5139) (fxif . z5138) (fxfirst-bit-set . z5137) (fxeven? . z5136) (fxdiv0-and-mod0 . z5135) (fxdiv0 . z5134) (fxdiv-and-mod . z5133) (fxdiv . z5132) (fxcopy-bit-field . z5131) (fxcopy-bit . z5130) (fxbit-set? . z512f) (fxbit-field . z512e) (fxbit-count . z512d) (fxarithmetic-shift-right . z512c) (fxarithmetic-shift-left . z512b) (fxarithmetic-shift . z512a) (fxand . z5129) (fx>? . z5128) (fx>=? . z5127) (fx=? . z5126) (fx<? . z5125) (fx<=? . z5124) (fx-/carry . z5123) (fx- . z5122) (fx+/carry . z5121) (fx+ . z5120) (fx*/carry . z511f) (fx* . z511e) (greatest-fixnum . z511d) (least-fixnum . z511c) (fixnum-width . z511b) (fixnum? . z511a)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z533c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . z4dd3) (no-infinities-violation? . z4dbe) (make-no-nans-violation . z4dd1) (make-no-infinities-violation . z4dbc) (real->flonum . z5174) (flzero? . z5173) (fltruncate . z5172) (fltan . z5171) (flsqrt . z5170) (flsin . z516f) (flround . z516e) (flpositive? . z516d) (flonum? . z516c) (flodd? . z516b) (flnumerator . z516a) (flnegative? . z5169) (flnan? . z5168) (flmod0 . z5167) (flmod . z5166) (flmin . z5165) (flmax . z5164) (fllog . z5163) (flinteger? . z5162) (flinfinite? . z5161) (flfloor . z5160) (flfinite? . z515f) (flexpt . z515e) (flexp . z515d) (fleven? . z515c) (fldiv0-and-mod0 . z515b) (fldiv0 . z515a) (fldiv-and-mod . z5159) (fldiv . z5158) (fldenominator . z5157) (flcos . z5156) (flceiling . z5155) (flatan . z5154) (flasin . z5153) (flacos . z5152) (flabs . z5151) (fl>? . z5150) (fl>=? . z514f) (fl=? . z514e) (fl<? . z514d) (fl<=? . z514c) (fl/ . z514b) (fl- . z514a) (fl+ . z5149) (fl* . z5148) (fixnum->flonum . z5147) (&no-nans . z5065) (&no-infinities . z5064)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z533d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . z524e) (string-ci-hash . z524d) (string-hash . z524c) (equal-hash . z524b) (hashtable-equivalence-function . z524a) (make-hashtable . z5249) (hashtable-hash-function . z5248) (make-eqv-hashtable . z5247) (make-eq-hashtable . z5246) (hashtable? . z5245) (hashtable-update! . z5244) (hashtable-size . z5243) (hashtable-set! . z5242) (hashtable-ref . z5241) (hashtable-mutable? . z5240) (hashtable-keys . z523f) (hashtable-entries . z523e) (hashtable-delete! . z523d) (hashtable-copy . z523c) (hashtable-contains? . z523b) (hashtable-clear! . z523a)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z533e '(rnrs io ports) '(6) '() '() '() '((eof-object? . z522a) (eof-object . z5229) (current-error-port . z5228) (current-output-port . z5227) (current-input-port . z5226) (output-port? . z5225) (input-port? . z5224) (utf-8-codec . z5223) (utf-16-codec . z5222) (transcoder-error-handling-mode . z5221) (transcoder-eol-style . z5220) (transcoder-codec . z521f) (transcoded-port . z521e) (textual-port? . z521d) (string->bytevector . z521c) (standard-output-port . z521b) (standard-input-port . z521a) (standard-error-port . z5219) (set-port-position! . z5218) (put-u8 . z5217) (put-string . z5216) (put-datum . z5215) (put-char . z5214) (put-bytevector . z5213) (port? . z5212) (port-transcoder . z5211) (port-position . z5210) (port-has-set-port-position!? . z520f) (port-has-port-position? . z520e) (port-eof? . z520d) (output-port-buffer-mode . z520c) (open-string-output-port . z520b) (open-string-input-port . z520a) (open-file-output-port . z5209) (open-file-input/output-port . z5208) (open-file-input-port . z5207) (open-bytevector-output-port . z5206) (open-bytevector-input-port . z5205) (native-transcoder . z5204) (native-eol-style . z5203) (make-transcoder . z5202) (latin-1-codec . z5201) (make-i/o-write-error . z4cd2) (make-i/o-read-error . z4cbd) (make-i/o-port-error . z4d73) (make-i/o-invalid-position-error . z4ce9) (make-i/o-filename-error . z4d04) (make-i/o-file-protection-error . z4d1d) (make-i/o-file-is-read-only-error . z4d32) (make-i/o-file-does-not-exist-error . z4d5c) (make-i/o-file-already-exists-error . z4d47) (make-i/o-error . z4ca8) (make-i/o-encoding-error . z4da3) (make-i/o-decoding-error . z4d8c) (make-custom-textual-output-port . z5200) (make-custom-textual-input/output-port . z51ff) (make-custom-textual-input-port . z51fe) (make-custom-binary-output-port . z51fd) (make-custom-binary-input/output-port . z51fc) (make-custom-binary-input-port . z51fb) (lookahead-u8 . z51f9) (lookahead-char . z51f8) (i/o-write-error? . z4cd4) (i/o-read-error? . z4cbf) (i/o-port-error? . z4d77) (i/o-invalid-position-error? . z4ced) (i/o-filename-error? . z4d08) (i/o-file-protection-error? . z4d1f) (i/o-file-is-read-only-error? . z4d34) (i/o-file-does-not-exist-error? . z4d5e) (i/o-file-already-exists-error? . z4d49) (i/o-error? . z4caa) (i/o-error-position . z4cef) (i/o-error-port . z4d79) (i/o-error-filename . z4d0a) (i/o-encoding-error? . z4da7) (i/o-encoding-error-char . z4da9) (i/o-decoding-error? . z4d8e) (get-u8 . z51f7) (get-string-n! . z51f6) (get-string-n . z51f5) (get-string-all . z51f4) (get-line . z51f3) (get-datum . z51f2) (get-char . z51f1) (get-bytevector-some . z51f0) (get-bytevector-n! . z51ef) (get-bytevector-n . z51ee) (get-bytevector-all . z51ed) (flush-output-port . z51ec) (close-port . z51eb) (call-with-string-output-port . z51ca) (call-with-port . z51c9) (call-with-bytevector-output-port . z51c8) (bytevector->string . z51c7) (buffer-mode? . z51c6) (binary-port? . z51c5) (&i/o-encoding . z5063) (&i/o-decoding . z5062) (&i/o-port . z5061) (&i/o-file-does-not-exist . z5060) (&i/o-file-already-exists . z505f) (&i/o-file-is-read-only . z505e) (&i/o-file-protection . z505d) (&i/o-filename . z505c) (&i/o-invalid-position . z505b) (&i/o-write . z505a) (&i/o-read . z5059) (&i/o . z5058) (error-handling-mode . z503d) (file-options . z503c) (buffer-mode . z503b) (eol-style . z503a)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z533f '(rnrs enums) '(6) '() '() '() '((make-enumeration . z51c1) (enum-set=? . z51c0) (enum-set-universe . z51bf) (enum-set-union . z51be) (enum-set-subset? . z51bd) (enum-set-projection . z51bc) (enum-set-member? . z51bb) (enum-set-intersection . z51ba) (enum-set-indexer . z51b9) (enum-set-difference . z51b8) (enum-set-constructor . z51b7) (enum-set-complement . z51b6) (enum-set->list . z51b5) (define-enumeration . z5048)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5340 '(rnrs conditions) '(6) '() '() '() '((who-condition? . z4c1e) (warning? . z4b96) (violation? . z4bd5) (undefined-violation? . z4c95) (syntax-violation? . z4c7c) (syntax-violation-subform . z4c80) (syntax-violation-form . z4c7e) (syntax-violation . z30c9) (simple-conditions . z51b4) (serious-condition? . z4bab) (non-continuable-violation? . z4c35) (message-condition? . z4b7f) (make-who-condition . z4c1a) (make-warning . z4b94) (make-violation . z4bd3) (make-undefined-violation . z4c93) (make-syntax-violation . z4c76) (make-serious-condition . z4ba9) (make-non-continuable-violation . z4c33) (make-message-condition . z4b7b) (make-lexical-violation . z4c5d) (make-irritants-condition . z4bff) (make-implementation-restriction-violation . z4c48) (make-error . z4bbe) (make-assertion-violation . z4be8) (lexical-violation? . z4c5f) (irritants-condition? . z4c03) (implementation-restriction-violation? . z4c4a) (error? . z4bc0) (condition-who . z4c20) (condition-predicate . z51b3) (condition-message . z4b81) (condition-irritants . z4c05) (condition-accessor . z51b2) (condition . z51b1) (assertion-violation? . z4bea) (condition? . z51b0) (&undefined . z5057) (&syntax . z5056) (&lexical . z5055) (&implementation-restriction . z5054) (&non-continuable . z5053) (&who . z5052) (&irritants . z5051) (&assertion . z5050) (&violation . z504f) (&error . z504e) (&serious . z504d) (&warning . z504c) (&message . z504b) (&condition . z504a) (define-condition-type . z5049)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5341 '(rnrs records inspection) '(6) '() '() '() '((record? . z525d) (record-type-uid . z525c) (record-type-sealed? . z525b) (record-type-parent . z525a) (record-type-opaque? . z5259) (record-type-name . z5258) (record-type-generative? . z5257) (record-type-field-names . z5256) (record-rtd . z5255) (record-field-mutable? . z5254)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5342 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . z5264) (record-predicate . z5263) (record-mutator . z5262) (record-constructor . z5261) (record-accessor . z5260) (make-record-type-descriptor . z525f) (make-record-constructor-descriptor . z525e)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5343 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . z5047) (parent-rtd . z5046) (nongenerative . z5045) (opaque . z5044) (sealed . z5043) (protocol . z5042) (parent . z5041) (immutable . z5040) (mutable . z503f) (fields . z503e) (record-constructor-descriptor . z501d) (record-type-descriptor . z501c)) '() values values '#f '#f '#t '#f) (z2c2b@z2a74@install-library 'z5344 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . z4dd7) (&no-nans-rtd . z4dd5) (&no-infinities-rcd . z4dc2) (&no-infinities-rtd . z4dc0) (&i/o-encoding-rcd . z4dad) (&i/o-encoding-rtd . z4dab) (&i/o-decoding-rcd . z4d92) (&i/o-decoding-rtd . z4d90) (&i/o-port-rcd . z4d7d) (&i/o-port-rtd . z4d7b) (&i/o-file-does-not-exist-rcd . z4d62) (&i/o-file-does-not-exist-rtd . z4d60) (&i/o-file-already-exists-rcd . z4d4d) (&i/o-file-already-exists-rtd . z4d4b) (&i/o-file-is-read-only-rcd . z4d38) (&i/o-file-is-read-only-rtd . z4d36) (&i/o-file-protection-rcd . z4d23) (&i/o-file-protection-rtd . z4d21) (&i/o-filename-rcd . z4d0e) (&i/o-filename-rtd . z4d0c) (&i/o-invalid-position-rcd . z4cf3) (&i/o-invalid-position-rtd . z4cf1) (&i/o-write-rcd . z4cd8) (&i/o-write-rtd . z4cd6) (&i/o-read-rcd . z4cc3) (&i/o-read-rtd . z4cc1) (&i/o-rcd . z4cae) (&i/o-rtd . z4cac) (&undefined-rcd . z4c99) (&undefined-rtd . z4c97) (&syntax-rcd . z4c84) (&syntax-rtd . z4c82) (&lexical-rcd . z4c63) (&lexical-rtd . z4c61) (&implementation-restriction-rcd . z4c4e) (&implementation-restriction-rtd . z4c4c) (&non-continuable-rcd . z4c39) (&non-continuable-rtd . z4c37) (&who-rcd . z4c24) (&who-rtd . z4c22) (&irritants-rcd . z4c09) (&irritants-rtd . z4c07) (&assertion-rcd . z4bee) (&assertion-rtd . z4bec) (&violation-rcd . z4bd9) (&violation-rtd . z4bd7) (&error-rcd . z4bc4) (&error-rtd . z4bc2) (&serious-rcd . z4baf) (&serious-rtd . z4bad) (&warning-rcd . z4b9a) (&warning-rtd . z4b98) (&message-rcd . z4b85) (&message-rtd . z4b83) (&condition-rcd . z4b26) (&condition-rtd . z4b24) (syntax-error . z30c5) (syntax-dispatch . z2ffb) (pretty-print . z5324) (eval-core . z5323) (set-symbol-value! . z5322) (symbol-value . z5321) (gensym . z5320) (void . z531f) (load . z4ee4) (interaction-environment . z30d5) (char-ready? . z531e) (regexp? . z531d) (read-line . z531c) (ungensym . z531b) (alist->eq-hash-table . z531a) (assoc-ref . z5319) (print . z5318) (format . z5317) (host-os . z5316) (library-path . z2a53) (standard-library-path . z5315) (file-newer? . z5314) (stat-mtime . z5313) (write-to-file . z5312) (file->list . z5311) (file->string . z5310) (digit->integer . z530f) (call-with-string-input-port . z530e) (call-with-string-io . z530d) (string-split . z530c) (bytevector-for-each . z530b) (string->regexp . z530a) (rxmatch . z5309) (regexp-replace-all . z5308) (hashtable-for-each . z5307) (call-process . z5306) (local-tz-offset . z5305) (microseconds . z5304) (directory-list . z5303) (set-current-directory! . z5302) (expand-path . z5301) (current-directory . z5300) (%spawn . z52ff) (%waitpid . z52fe) (simple-struct-name . z52fd) (simple-struct-set! . z52fc) (simple-struct-ref . z52fb) (make-simple-struct . z52fa) (simple-struct? . z52f9) (pointer-ref-c-int64 . z52f8) (pointer-ref-c-int32 . z52f7) (pointer-ref-c-int16 . z52f6) (pointer-ref-c-int8 . z52f5) (pointer-ref-c-uint64 . z52f4) (pointer-ref-c-uint32 . z52f3) (pointer-ref-c-uint16 . z52f2) (pointer-ref-c-uint8 . z52f1) (pointer-set-c-uint64! . z52f0) (pointer-set-c-uint32! . z52ef) (pointer-set-c-uint16! . z52ee) (pointer-set-c-uint8! . z52ed) (pointer-set-c-int64! . z52ec) (pointer-set-c-int32! . z52eb) (pointer-set-c-int16! . z52ea) (pointer-set-c-int8! . z52e9) (pointer-set-c-pointer! . z52e8) (pointer-set-c-double! . z52e7) (pointer-set-c-float! . z52e6) (pointer-set-c-long-long! . z52e5) (pointer-set-c-long! . z52e4) (pointer-set-c-int! . z52e3) (pointer-set-c-short! . z52e2) (pointer-set-c-char! . z52e1) (pointer-ref-c-pointer . z52e0) (pointer-ref-c-double . z52df) (pointer-ref-c-float . z52de) (pointer-ref-c-unsigned-long-long . z52dd) (pointer-ref-c-signed-long-long . z52dc) (pointer-ref-c-unsigned-long . z52db) (pointer-ref-c-signed-long . z52da) (pointer-ref-c-unsigned-int . z52d9) (pointer-ref-c-signed-int . z52d8) (pointer-ref-c-unsigned-short . z52d7) (pointer-ref-c-signed-short . z52d6) (pointer-ref-c-unsigned-char . z52d5) (pointer-ref-c-signed-char . z52d4) (pointer->integer . z52d3) (integer->pointer . z52d2) (pointer? . z52d1) (shared-errno . z52d0) (%ffi-supported? . z52cf) (%ffi-pointer->string . z52ce) (%ffi-call->string-or-zero . z52cd) (%ffi-call->double . z52cc) (%ffi-call->void* . z52cb) (%ffi-call->void . z52ca) (%ffi-call->char . z52c9) (%ffi-call->int . z52c8) (%ffi-lookup . z52c7) (%ffi-open . z52c6) (%fork . z52c5) (%pipe . z52c4) (p . z52c3) (open-output-string . z52c2) (get-output-string . z52c1) (file-stat-ctime . z52c0) (file-stat-atime . z52bf) (file-stat-mtime . z52be) (file-size-in-bytes . z52bd) (file-writable? . z52bc) (file-executable? . z52bb) (file-readable? . z52ba) (file-regular? . z52b9) (file-symbolic-link? . z52b8) (file-directory? . z52b7) (create-symbolic-link . z52b6) (rename-file . z52b5) (delete-directory . z52b4) (create-directory . z52b3) (get-environment-variables . z52b2) (get-environment-variable . z52b1) (id->real-label . z52b0) (same-marks? . z52af) (same-marks*? . z52ae) (get-timeofday . z52ad) (get-command-line . z52ac) (sys-display . z52ab) (whereis . z52aa) (register . z52a9) (vm-join! . z52a8) (vm-set-value! . z52a7) (vm? . z52a6) (main-vm? . z52a5) (vm-eval . z52a4) (vm-self . z52a3) (vm-start! . z52a2) (make-vm . z52a1) (mutex-try-lock! . z52a0) (mutex-unlock! . z529f) (mutex-lock! . z529e) (mutex? . z529d) (make-mutex . z529c) (condition-variable-notify-all! . z529b) (condition-variable-notify! . z529a) (condition-variable-wait! . z5299) (make-condition-variable . z5298) (mosh-executable-path . z5297) (make-file-options . z5296) (source-info . z5295) (make-compiler-instruction . z5294) (make-instruction . z5293) (set-source-info! . z5292) (bignum? . z5291) (fast-equal? . z5290) (fasl-read . z528f) (fasl-write . z528e) (time-usage . z528d) (os-constant . z528c) (make-parameter . z2860) (socket-port . z528b) (socket-shutdown . z528a) (socket-close . z5289) (socket-send . z5288) (socket-recv! . z5287) (socket-recv . z5286) (make-server-socket . z5285) (make-client-socket . z5284) (socket-accept . z5283) (socket? . z5282) (string-upcase . z5281) (string-titlecase . z5280) (string-normalize-nfkd . z527f) (string-normalize-nfkc . z527e) (string-normalize-nfd . z527d) (string-normalize-nfc . z527c) (string-foldcase . z527b) (string-downcase . z527a) (string-ci>? . z5279) (string-ci>=? . z5278) (string-ci=? . z5277) (string-ci<? . z5276) (string-ci<=? . z5275) (char-whitespace? . z5274) (char-upper-case? . z5273) (char-title-case? . z5272) (char-numeric? . z5271) (char-lower-case? . z5270) (char-general-category . z526f) (char-upcase . z526e) (char-titlecase . z526d) (char-foldcase . z526c) (char-downcase . z526b) (char-ci>? . z526a) (char-ci>=? . z5269) (char-ci=? . z5268) (char-ci<? . z5267) (char-ci<=? . z5266) (char-alphabetic? . z5265) (make-variable-transformer . z2e28) (identifier? . z30cb) (generate-temporaries . z30b7) (free-identifier=? . z30b9) (syntax->datum . z30cf) (datum->syntax . z30cd) (bound-identifier=? . z30bb) (record-type-descriptor? . z5264) (record-predicate . z5263) (record-mutator . z5262) (record-constructor . z5261) (record-accessor . z5260) (make-record-type-descriptor . z525f) (make-record-constructor-descriptor . z525e) (record? . z525d) (record-type-uid . z525c) (record-type-sealed? . z525b) (record-type-parent . z525a) (record-type-opaque? . z5259) (record-type-name . z5258) (record-type-generative? . z5257) (record-type-field-names . z5256) (record-rtd . z5255) (record-field-mutable? . z5254) (delete-file . z5253) (file-exists? . z5252) (vector-sort! . z5251) (vector-sort . z5250) (list-sort . z524f) (symbol-hash . z524e) (string-ci-hash . z524d) (string-hash . z524c) (equal-hash . z524b) (hashtable-equivalence-function . z524a) (make-hashtable . z5249) (hashtable-hash-function . z5248) (make-eqv-hashtable . z5247) (make-eq-hashtable . z5246) (hashtable? . z5245) (hashtable-update! . z5244) (hashtable-size . z5243) (hashtable-set! . z5242) (hashtable-ref . z5241) (hashtable-mutable? . z5240) (hashtable-keys . z523f) (hashtable-entries . z523e) (hashtable-delete! . z523d) (hashtable-copy . z523c) (hashtable-contains? . z523b) (hashtable-clear! . z523a) (call-with-output-file . z5239) (call-with-input-file . z5238) (write-char . z5237) (write . z5236) (with-output-to-file . z5235) (with-input-from-file . z5234) (read-char . z5233) (read . z5232) (peek-char . z5231) (open-output-file . z5230) (open-input-file . z522f) (newline . z522e) (display . z522d) (close-output-port . z522c) (close-input-port . z522b) (eof-object? . z522a) (eof-object . z5229) (current-error-port . z5228) (current-output-port . z5227) (current-input-port . z5226) (output-port? . z5225) (input-port? . z5224) (utf-8-codec . z5223) (utf-16-codec . z5222) (transcoder-error-handling-mode . z5221) (transcoder-eol-style . z5220) (transcoder-codec . z521f) (transcoded-port . z521e) (textual-port? . z521d) (string->bytevector . z521c) (standard-output-port . z521b) (standard-input-port . z521a) (standard-error-port . z5219) (set-port-position! . z5218) (put-u8 . z5217) (put-string . z5216) (put-datum . z5215) (put-char . z5214) (put-bytevector . z5213) (port? . z5212) (port-transcoder . z5211) (port-position . z5210) (port-has-set-port-position!? . z520f) (port-has-port-position? . z520e) (port-eof? . z520d) (output-port-buffer-mode . z520c) (open-string-output-port . z520b) (open-string-input-port . z520a) (open-file-output-port . z5209) (open-file-input/output-port . z5208) (open-file-input-port . z5207) (open-bytevector-output-port . z5206) (open-bytevector-input-port . z5205) (native-transcoder . z5204) (native-eol-style . z5203) (make-transcoder . z5202) (latin-1-codec . z5201) (make-i/o-write-error . z4cd2) (make-i/o-read-error . z4cbd) (make-i/o-port-error . z4d73) (make-i/o-invalid-position-error . z4ce9) (make-i/o-filename-error . z4d04) (make-i/o-file-protection-error . z4d1d) (make-i/o-file-is-read-only-error . z4d32) (make-i/o-file-does-not-exist-error . z4d5c) (make-i/o-file-already-exists-error . z4d47) (make-i/o-error . z4ca8) (make-i/o-encoding-error . z4da3) (make-i/o-decoding-error . z4d8c) (make-custom-textual-output-port . z5200) (make-custom-textual-input/output-port . z51ff) (make-custom-textual-input-port . z51fe) (make-custom-binary-output-port . z51fd) (make-custom-binary-input/output-port . z51fc) (make-custom-binary-input-port . z51fb) (make-bytevector . z51fa) (lookahead-u8 . z51f9) (lookahead-char . z51f8) (i/o-write-error? . z4cd4) (i/o-read-error? . z4cbf) (i/o-port-error? . z4d77) (i/o-invalid-position-error? . z4ced) (i/o-filename-error? . z4d08) (i/o-file-protection-error? . z4d1f) (i/o-file-is-read-only-error? . z4d34) (i/o-file-does-not-exist-error? . z4d5e) (i/o-file-already-exists-error? . z4d49) (i/o-error? . z4caa) (i/o-error-position . z4cef) (i/o-error-port . z4d79) (i/o-error-filename . z4d0a) (i/o-encoding-error? . z4da7) (i/o-encoding-error-char . z4da9) (i/o-decoding-error? . z4d8e) (get-u8 . z51f7) (get-string-n! . z51f6) (get-string-n . z51f5) (get-string-all . z51f4) (get-line . z51f3) (get-datum . z51f2) (get-char . z51f1) (get-bytevector-some . z51f0) (get-bytevector-n! . z51ef) (get-bytevector-n . z51ee) (get-bytevector-all . z51ed) (flush-output-port . z51ec) (close-port . z51eb) (scheme-report-environment . z30a5) (quotient . z51ea) (null-environment . z30a3) (remainder . z51e9) (modulo . z51e8) (inexact->exact . z51e7) (force . z51e6) (exact->inexact . z51e5) (make-promise . z51e4) (exit . z51e3) (command-line . z4ede) (string-fill! . z51e2) (string-set! . z51e1) (set-cdr! . z51e0) (set-car! . z51df) (remove . z51de) (remv . z51dd) (remp . z51dc) (remq . z51db) (partition . z51da) (memv . z51d9) (memq . z51d8) (memp . z51d7) (member . z51d6) (exists . z51d5) (for-all . z51d4) (fold-right . z51d3) (fold-left . z51d2) (find . z51d1) (filter . z51d0) (cons* . z51cf) (assv . z51ce) (assq . z51cd) (assp . z51cc) (assoc . z51cb) (call-with-string-output-port . z51ca) (call-with-port . z51c9) (call-with-bytevector-output-port . z51c8) (bytevector->string . z51c7) (buffer-mode? . z51c6) (binary-port? . z51c5) (with-exception-handler . z51c4) (raise-continuable . z51c3) (raise . z51c2) (eval . z30a9) (environment . z30a1) (make-enumeration . z51c1) (enum-set=? . z51c0) (enum-set-universe . z51bf) (enum-set-union . z51be) (enum-set-subset? . z51bd) (enum-set-projection . z51bc) (enum-set-member? . z51bb) (enum-set-intersection . z51ba) (enum-set-indexer . z51b9) (enum-set-difference . z51b8) (enum-set-constructor . z51b7) (enum-set-complement . z51b6) (enum-set->list . z51b5) (who-condition? . z4c1e) (warning? . z4b96) (violation? . z4bd5) (undefined-violation? . z4c95) (syntax-violation? . z4c7c) (syntax-violation-subform . z4c80) (syntax-violation-form . z4c7e) (syntax-violation . z30c9) (simple-conditions . z51b4) (serious-condition? . z4bab) (non-continuable-violation? . z4c35) (message-condition? . z4b7f) (make-who-condition . z4c1a) (make-warning . z4b94) (make-violation . z4bd3) (make-undefined-violation . z4c93) (make-syntax-violation . z4c76) (make-serious-condition . z4ba9) (make-non-continuable-violation . z4c33) (make-message-condition . z4b7b) (make-lexical-violation . z4c5d) (make-irritants-condition . z4bff) (make-implementation-restriction-violation . z4c48) (make-error . z4bbe) (make-assertion-violation . z4be8) (lexical-violation? . z4c5f) (irritants-condition? . z4c03) (implementation-restriction-violation? . z4c4a) (error? . z4bc0) (condition-who . z4c20) (condition-predicate . z51b3) (condition-message . z4b81) (condition-irritants . z4c05) (condition-accessor . z51b2) (condition . z51b1) (assertion-violation? . z4bea) (condition? . z51b0) (utf32->string . z51af) (utf16->string . z51ae) (utf8->string . z51ad) (uint-list->bytevector . z51ac) (u8-list->bytevector . z51ab) (string->utf8 . z51aa) (string->utf32 . z51a9) (string->utf16 . z51a8) (sint-list->bytevector . z51a7) (native-endianness . z51a6) (bytevector? . z51a5) (bytevector=? . z51a4) (bytevector-uint-set! . z51a3) (bytevector-uint-ref . z51a2) (bytevector-u8-set! . z51a1) (bytevector-u8-ref . z51a0) (bytevector-u64-set! . z519f) (bytevector-u64-ref . z519e) (bytevector-u64-native-set! . z519d) (bytevector-u64-native-ref . z519c) (bytevector-u32-set! . z519b) (bytevector-u32-ref . z519a) (bytevector-u32-native-set! . z5199) (bytevector-u32-native-ref . z5198) (bytevector-u16-set! . z5197) (bytevector-u16-ref . z5196) (bytevector-u16-native-set! . z5195) (bytevector-u16-native-ref . z5194) (bytevector-sint-set! . z5193) (bytevector-sint-ref . z5192) (bytevector-s8-set! . z5191) (bytevector-s8-ref . z5190) (bytevector-s64-set! . z518f) (bytevector-s64-ref . z518e) (bytevector-s64-native-set! . z518d) (bytevector-s64-native-ref . z518c) (bytevector-s32-set! . z518b) (bytevector-s32-ref . z518a) (bytevector-s32-native-set! . z5189) (bytevector-s32-native-ref . z5188) (bytevector-s16-set! . z5187) (bytevector-s16-ref . z5186) (bytevector-s16-native-set! . z5185) (bytevector-s16-native-ref . z5184) (bytevector-length . z5183) (bytevector-ieee-single-ref . z5182) (bytevector-ieee-single-set! . z5181) (bytevector-ieee-single-native-set! . z5180) (bytevector-ieee-single-native-ref . z517f) (bytevector-ieee-double-set! . z517e) (bytevector-ieee-double-ref . z517d) (bytevector-ieee-double-native-set! . z517c) (bytevector-ieee-double-native-ref . z517b) (bytevector-fill! . z517a) (bytevector-copy! . z5179) (bytevector-copy . z5178) (bytevector->uint-list . z5177) (bytevector->u8-list . z5176) (bytevector->sint-list . z5175) (no-nans-violation? . z4dd3) (no-infinities-violation? . z4dbe) (make-no-nans-violation . z4dd1) (make-no-infinities-violation . z4dbc) (real->flonum . z5174) (flzero? . z5173) (fltruncate . z5172) (fltan . z5171) (flsqrt . z5170) (flsin . z516f) (flround . z516e) (flpositive? . z516d) (flonum? . z516c) (flodd? . z516b) (flnumerator . z516a) (flnegative? . z5169) (flnan? . z5168) (flmod0 . z5167) (flmod . z5166) (flmin . z5165) (flmax . z5164) (fllog . z5163) (flinteger? . z5162) (flinfinite? . z5161) (flfloor . z5160) (flfinite? . z515f) (flexpt . z515e) (flexp . z515d) (fleven? . z515c) (fldiv0-and-mod0 . z515b) (fldiv0 . z515a) (fldiv-and-mod . z5159) (fldiv . z5158) (fldenominator . z5157) (flcos . z5156) (flceiling . z5155) (flatan . z5154) (flasin . z5153) (flacos . z5152) (flabs . z5151) (fl>? . z5150) (fl>=? . z514f) (fl=? . z514e) (fl<? . z514d) (fl<=? . z514c) (fl/ . z514b) (fl- . z514a) (fl+ . z5149) (fl* . z5148) (fixnum->flonum . z5147) (fxzero? . z5146) (fxxor . z5145) (fxrotate-bit-field . z5144) (fxreverse-bit-field . z5143) (fxpositive? . z5142) (fxodd? . z5141) (fxnot . z5140) (fxnegative? . z513f) (fxmod0 . z513e) (fxmod . z513d) (fxmin . z513c) (fxmax . z513b) (fxlength . z513a) (fxior . z5139) (fxif . z5138) (fxfirst-bit-set . z5137) (fxeven? . z5136) (fxdiv0-and-mod0 . z5135) (fxdiv0 . z5134) (fxdiv-and-mod . z5133) (fxdiv . z5132) (fxcopy-bit-field . z5131) (fxcopy-bit . z5130) (fxbit-set? . z512f) (fxbit-field . z512e) (fxbit-count . z512d) (fxarithmetic-shift-right . z512c) (fxarithmetic-shift-left . z512b) (fxarithmetic-shift . z512a) (fxand . z5129) (fx>? . z5128) (fx>=? . z5127) (fx=? . z5126) (fx<? . z5125) (fx<=? . z5124) (fx-/carry . z5123) (fx- . z5122) (fx+/carry . z5121) (fx+ . z5120) (fx*/carry . z511f) (fx* . z511e) (greatest-fixnum . z511d) (least-fixnum . z511c) (fixnum-width . z511b) (fixnum? . z511a) (bitwise-rotate-bit-field . z5119) (bitwise-reverse-bit-field . z5118) (bitwise-length . z5117) (bitwise-if . z5116) (bitwise-first-bit-set . z5115) (bitwise-copy-bit-field . z5114) (bitwise-copy-bit . z5113) (bitwise-bit-set? . z5112) (bitwise-bit-field . z5111) (bitwise-bit-count . z5110) (bitwise-xor . z510f) (bitwise-ior . z510e) (bitwise-and . z510d) (bitwise-not . z510c) (bitwise-arithmetic-shift-right . z510b) (bitwise-arithmetic-shift-left . z510a) (bitwise-arithmetic-shift . z5109) (zero? . z5108) (vector? . z5107) (vector-set! . z5106) (vector-ref . z5105) (vector-map . z5104) (vector-length . z5103) (vector-for-each . z5102) (vector-fill! . z5101) (vector->list . z5100) (vector . z50ff) (values . z50fe) (truncate . z50fd) (tan . z50fc) (symbol? . z50fb) (symbol=? . z50fa) (symbol->string . z50f9) (substring . z50f8) (string? . z50f7) (string>? . z50f6) (string>=? . z50f5) (string=? . z50f4) (string<? . z50f3) (string<=? . z50f2) (string-ref . z50f1) (string-length . z50f0) (string-for-each . z50ef) (string-copy . z50ee) (string-append . z50ed) (string->symbol . z50ec) (string->number . z50eb) (string->list . z50ea) (string . z50e9) (sqrt . z50e8) (sin . z50e7) (round . z50e6) (reverse . z50e5) (real? . z50e4) (real-valued? . z50e3) (real-part . z50e2) (rationalize . z50e1) (rational? . z50e0) (rational-valued? . z50df) (procedure? . z50de) (positive? . z50dd) (pair? . z50dc) (odd? . z50db) (numerator . z50da) (number? . z50d9) (number->string . z50d8) (null? . z50d7) (not . z50d6) (negative? . z50d5) (nan? . z50d4) (min . z50d3) (max . z50d2) (map . z50d1) (make-vector . z50d0) (make-string . z50cf) (make-rectangular . z50ce) (make-polar . z50cd) (magnitude . z50cc) (log . z50cb) (list? . z50ca) (list-tail . z50c9) (list-ref . z50c8) (list->vector . z50c7) (list->string . z50c6) (list . z50c5) (length . z50c4) (lcm . z50c3) (integer? . z50c2) (integer-valued? . z50c1) (integer->char . z50c0) (infinite? . z50bf) (inexact? . z50be) (inexact . z50bd) (imag-part . z50bc) (gcd . z50bb) (for-each . z50ba) (floor . z50b9) (finite? . z50b8) (expt . z50b7) (exp . z50b6) (exact? . z50b5) (exact-integer-sqrt . z50b4) (exact . z50b3) (even? . z50b2) (error . z50b1) (eqv? . z50b0) (equal? . z50af) (eq? . z50ae) (dynamic-wind . z50ad) (div0-and-mod0 . z50ac) (mod0 . z50ab) (div0 . z50aa) (div-and-mod . z50a9) (mod . z50a8) (div . z50a7) (denominator . z50a6) (cos . z50a5) (cons . z50a4) (complex? . z50a3) (char? . z50a2) (char>? . z50a1) (char>=? . z50a0) (char=? . z509f) (char<? . z509e) (char<=? . z509d) (char->integer . z509c) (ceiling . z509b) (call-with-values . z509a) (call/cc . z5099) (call-with-current-continuation . z5098) (cddddr . z5097) (cdddar . z5096) (cddadr . z5095) (cddaar . z5094) (cdaddr . z5093) (cdadar . z5092) (cdaadr . z5091) (cdaaar . z5090) (cadddr . z508f) (caddar . z508e) (cadadr . z508d) (cadaar . z508c) (caaddr . z508b) (caadar . z508a) (caaadr . z5089) (caaaar . z5088) (cdddr . z5087) (cddar . z5086) (cdadr . z5085) (cdaar . z5084) (caddr . z5083) (cadar . z5082) (caadr . z5081) (caaar . z5080) (cddr . z507f) (cdar . z507e) (cadr . z507d) (caar . z507c) (cdr . z507b) (car . z507a) (boolean? . z5079) (boolean=? . z5078) (atan . z5077) (assertion-violation . z5076) (assertion-error . z30c3) (asin . z5075) (apply . z5074) (append . z5073) (angle . z5072) (acos . z5071) (abs . z5070) (/ . z506f) (* . z506e) (- . z506d) (+ . z506c) (>= . z506b) (> . z506a) (= . z5069) (<= . z5068) (< . z5067) (library . z5066) (&no-nans . z5065) (&no-infinities . z5064) (&i/o-encoding . z5063) (&i/o-decoding . z5062) (&i/o-port . z5061) (&i/o-file-does-not-exist . z5060) (&i/o-file-already-exists . z505f) (&i/o-file-is-read-only . z505e) (&i/o-file-protection . z505d) (&i/o-filename . z505c) (&i/o-invalid-position . z505b) (&i/o-write . z505a) (&i/o-read . z5059) (&i/o . z5058) (&undefined . z5057) (&syntax . z5056) (&lexical . z5055) (&implementation-restriction . z5054) (&non-continuable . z5053) (&who . z5052) (&irritants . z5051) (&assertion . z5050) (&violation . z504f) (&error . z504e) (&serious . z504d) (&warning . z504c) (&message . z504b) (&condition . z504a) (define-condition-type . z5049) (define-enumeration . z5048) (define-record-type . z5047) (parent-rtd . z5046) (nongenerative . z5045) (opaque . z5044) (sealed . z5043) (protocol . z5042) (parent . z5041) (immutable . z5040) (mutable . z503f) (fields . z503e) (error-handling-mode . z503d) (file-options . z503c) (buffer-mode . z503b) (eol-style . z503a) (guard . z5039) (trace-define . z5038) (trace-lambda . z5037) (unsyntax-splicing . z5036) (unsyntax . z5035) (unquote-splicing . z5034) (unquote . z5033) (_ . z5032) (else . z5031) (=> . z5030) (... . z502f) (assert . z502e) (endianness . z502d) (delay . z502c) (time . z502b) (do . z502a) (cond . z5029) (let* . z5028) (let . z5027) (let*-values . z5026) (let-values . z5025) (identifier-syntax . z5024) (with-syntax . z5023) (quasisyntax . z5022) (quasiquote . z5021) (syntax-rules . z5020) (include . z501f) (define-struct . z501e) (record-constructor-descriptor . z501d) (record-type-descriptor . z501c) (case . z501b) (parameterize . z501a) (unless . z5019) (when . z5018) (or . z5017) (and . z5016) (if . z5015) (letrec* . z5014) (letrec . z5013) (type-descriptor . z5012) (case-lambda . z5011) (lambda . z5010) (syntax . z500f) (syntax-case . z500e) (quote . z500d) (foreign-call . z500c) (letrec-syntax . z500b) (let-syntax . z500a) (set! . z5009) (import . z5008) (begin . z5007) (module . z5006) (define-syntax . z5005) (define . z5004)) '((z4dd7 core-prim . &no-nans-rcd) (z4dd5 core-prim . &no-nans-rtd) (z4dc2 core-prim . &no-infinities-rcd) (z4dc0 core-prim . &no-infinities-rtd) (z4dad core-prim . &i/o-encoding-rcd) (z4dab core-prim . &i/o-encoding-rtd) (z4d92 core-prim . &i/o-decoding-rcd) (z4d90 core-prim . &i/o-decoding-rtd) (z4d7d core-prim . &i/o-port-rcd) (z4d7b core-prim . &i/o-port-rtd) (z4d62 core-prim . &i/o-file-does-not-exist-rcd) (z4d60 core-prim . &i/o-file-does-not-exist-rtd) (z4d4d core-prim . &i/o-file-already-exists-rcd) (z4d4b core-prim . &i/o-file-already-exists-rtd) (z4d38 core-prim . &i/o-file-is-read-only-rcd) (z4d36 core-prim . &i/o-file-is-read-only-rtd) (z4d23 core-prim . &i/o-file-protection-rcd) (z4d21 core-prim . &i/o-file-protection-rtd) (z4d0e core-prim . &i/o-filename-rcd) (z4d0c core-prim . &i/o-filename-rtd) (z4cf3 core-prim . &i/o-invalid-position-rcd) (z4cf1 core-prim . &i/o-invalid-position-rtd) (z4cd8 core-prim . &i/o-write-rcd) (z4cd6 core-prim . &i/o-write-rtd) (z4cc3 core-prim . &i/o-read-rcd) (z4cc1 core-prim . &i/o-read-rtd) (z4cae core-prim . &i/o-rcd) (z4cac core-prim . &i/o-rtd) (z4c99 core-prim . &undefined-rcd) (z4c97 core-prim . &undefined-rtd) (z4c84 core-prim . &syntax-rcd) (z4c82 core-prim . &syntax-rtd) (z4c63 core-prim . &lexical-rcd) (z4c61 core-prim . &lexical-rtd) (z4c4e core-prim . &implementation-restriction-rcd) (z4c4c core-prim . &implementation-restriction-rtd) (z4c39 core-prim . &non-continuable-rcd) (z4c37 core-prim . &non-continuable-rtd) (z4c24 core-prim . &who-rcd) (z4c22 core-prim . &who-rtd) (z4c09 core-prim . &irritants-rcd) (z4c07 core-prim . &irritants-rtd) (z4bee core-prim . &assertion-rcd) (z4bec core-prim . &assertion-rtd) (z4bd9 core-prim . &violation-rcd) (z4bd7 core-prim . &violation-rtd) (z4bc4 core-prim . &error-rcd) (z4bc2 core-prim . &error-rtd) (z4baf core-prim . &serious-rcd) (z4bad core-prim . &serious-rtd) (z4b9a core-prim . &warning-rcd) (z4b98 core-prim . &warning-rtd) (z4b85 core-prim . &message-rcd) (z4b83 core-prim . &message-rtd) (z4b26 core-prim . &condition-rcd) (z4b24 core-prim . &condition-rtd) (z30c5 core-prim . syntax-error) (z2ffb core-prim . syntax-dispatch) (z5324 core-prim . pretty-print) (z5323 core-prim . eval-core) (z5322 core-prim . set-symbol-value!) (z5321 core-prim . symbol-value) (z5320 core-prim . gensym) (z531f core-prim . void) (z4ee4 core-prim . load) (z30d5 core-prim . interaction-environment) (z531e core-prim . char-ready?) (z531d core-prim . regexp?) (z531c core-prim . read-line) (z531b core-prim . ungensym) (z531a core-prim . alist->eq-hash-table) (z5319 core-prim . assoc-ref) (z5318 core-prim . print) (z5317 core-prim . format) (z5316 core-prim . host-os) (z2a53 core-prim . library-path) (z5315 core-prim . standard-library-path) (z5314 core-prim . file-newer?) (z5313 core-prim . stat-mtime) (z5312 core-prim . write-to-file) (z5311 core-prim . file->list) (z5310 core-prim . file->string) (z530f core-prim . digit->integer) (z530e core-prim . call-with-string-input-port) (z530d core-prim . call-with-string-io) (z530c core-prim . string-split) (z530b core-prim . bytevector-for-each) (z530a core-prim . string->regexp) (z5309 core-prim . rxmatch) (z5308 core-prim . regexp-replace-all) (z5307 core-prim . hashtable-for-each) (z5306 core-prim . call-process) (z5305 core-prim . local-tz-offset) (z5304 core-prim . microseconds) (z5303 core-prim . directory-list) (z5302 core-prim . set-current-directory!) (z5301 core-prim . expand-path) (z5300 core-prim . current-directory) (z52ff core-prim . %spawn) (z52fe core-prim . %waitpid) (z52fd core-prim . simple-struct-name) (z52fc core-prim . simple-struct-set!) (z52fb core-prim . simple-struct-ref) (z52fa core-prim . make-simple-struct) (z52f9 core-prim . simple-struct?) (z52f8 core-prim . pointer-ref-c-int64) (z52f7 core-prim . pointer-ref-c-int32) (z52f6 core-prim . pointer-ref-c-int16) (z52f5 core-prim . pointer-ref-c-int8) (z52f4 core-prim . pointer-ref-c-uint64) (z52f3 core-prim . pointer-ref-c-uint32) (z52f2 core-prim . pointer-ref-c-uint16) (z52f1 core-prim . pointer-ref-c-uint8) (z52f0 core-prim . pointer-set-c-uint64!) (z52ef core-prim . pointer-set-c-uint32!) (z52ee core-prim . pointer-set-c-uint16!) (z52ed core-prim . pointer-set-c-uint8!) (z52ec core-prim . pointer-set-c-int64!) (z52eb core-prim . pointer-set-c-int32!) (z52ea core-prim . pointer-set-c-int16!) (z52e9 core-prim . pointer-set-c-int8!) (z52e8 core-prim . pointer-set-c-pointer!) (z52e7 core-prim . pointer-set-c-double!) (z52e6 core-prim . pointer-set-c-float!) (z52e5 core-prim . pointer-set-c-long-long!) (z52e4 core-prim . pointer-set-c-long!) (z52e3 core-prim . pointer-set-c-int!) (z52e2 core-prim . pointer-set-c-short!) (z52e1 core-prim . pointer-set-c-char!) (z52e0 core-prim . pointer-ref-c-pointer) (z52df core-prim . pointer-ref-c-double) (z52de core-prim . pointer-ref-c-float) (z52dd core-prim . pointer-ref-c-unsigned-long-long) (z52dc core-prim . pointer-ref-c-signed-long-long) (z52db core-prim . pointer-ref-c-unsigned-long) (z52da core-prim . pointer-ref-c-signed-long) (z52d9 core-prim . pointer-ref-c-unsigned-int) (z52d8 core-prim . pointer-ref-c-signed-int) (z52d7 core-prim . pointer-ref-c-unsigned-short) (z52d6 core-prim . pointer-ref-c-signed-short) (z52d5 core-prim . pointer-ref-c-unsigned-char) (z52d4 core-prim . pointer-ref-c-signed-char) (z52d3 core-prim . pointer->integer) (z52d2 core-prim . integer->pointer) (z52d1 core-prim . pointer?) (z52d0 core-prim . shared-errno) (z52cf core-prim . %ffi-supported?) (z52ce core-prim . %ffi-pointer->string) (z52cd core-prim . %ffi-call->string-or-zero) (z52cc core-prim . %ffi-call->double) (z52cb core-prim . %ffi-call->void*) (z52ca core-prim . %ffi-call->void) (z52c9 core-prim . %ffi-call->char) (z52c8 core-prim . %ffi-call->int) (z52c7 core-prim . %ffi-lookup) (z52c6 core-prim . %ffi-open) (z52c5 core-prim . %fork) (z52c4 core-prim . %pipe) (z52c3 core-prim . p) (z52c2 core-prim . open-output-string) (z52c1 core-prim . get-output-string) (z52c0 core-prim . file-stat-ctime) (z52bf core-prim . file-stat-atime) (z52be core-prim . file-stat-mtime) (z52bd core-prim . file-size-in-bytes) (z52bc core-prim . file-writable?) (z52bb core-prim . file-executable?) (z52ba core-prim . file-readable?) (z52b9 core-prim . file-regular?) (z52b8 core-prim . file-symbolic-link?) (z52b7 core-prim . file-directory?) (z52b6 core-prim . create-symbolic-link) (z52b5 core-prim . rename-file) (z52b4 core-prim . delete-directory) (z52b3 core-prim . create-directory) (z52b2 core-prim . get-environment-variables) (z52b1 core-prim . get-environment-variable) (z52b0 core-prim . id->real-label) (z52af core-prim . same-marks?) (z52ae core-prim . same-marks*?) (z52ad core-prim . get-timeofday) (z52ac core-prim . get-command-line) (z52ab core-prim . sys-display) (z52aa core-prim . whereis) (z52a9 core-prim . register) (z52a8 core-prim . vm-join!) (z52a7 core-prim . vm-set-value!) (z52a6 core-prim . vm?) (z52a5 core-prim . main-vm?) (z52a4 core-prim . vm-eval) (z52a3 core-prim . vm-self) (z52a2 core-prim . vm-start!) (z52a1 core-prim . make-vm) (z52a0 core-prim . mutex-try-lock!) (z529f core-prim . mutex-unlock!) (z529e core-prim . mutex-lock!) (z529d core-prim . mutex?) (z529c core-prim . make-mutex) (z529b core-prim . condition-variable-notify-all!) (z529a core-prim . condition-variable-notify!) (z5299 core-prim . condition-variable-wait!) (z5298 core-prim . make-condition-variable) (z5297 core-prim . mosh-executable-path) (z5296 core-prim . make-file-options) (z5295 core-prim . source-info) (z5294 core-prim . make-compiler-instruction) (z5293 core-prim . make-instruction) (z5292 core-prim . set-source-info!) (z5291 core-prim . bignum?) (z5290 core-prim . fast-equal?) (z528f core-prim . fasl-read) (z528e core-prim . fasl-write) (z528d core-prim . time-usage) (z528c core-prim . os-constant) (z2860 core-prim . make-parameter) (z528b core-prim . socket-port) (z528a core-prim . socket-shutdown) (z5289 core-prim . socket-close) (z5288 core-prim . socket-send) (z5287 core-prim . socket-recv!) (z5286 core-prim . socket-recv) (z5285 core-prim . make-server-socket) (z5284 core-prim . make-client-socket) (z5283 core-prim . socket-accept) (z5282 core-prim . socket?) (z5281 core-prim . string-upcase) (z5280 core-prim . string-titlecase) (z527f core-prim . string-normalize-nfkd) (z527e core-prim . string-normalize-nfkc) (z527d core-prim . string-normalize-nfd) (z527c core-prim . string-normalize-nfc) (z527b core-prim . string-foldcase) (z527a core-prim . string-downcase) (z5279 core-prim . string-ci>?) (z5278 core-prim . string-ci>=?) (z5277 core-prim . string-ci=?) (z5276 core-prim . string-ci<?) (z5275 core-prim . string-ci<=?) (z5274 core-prim . char-whitespace?) (z5273 core-prim . char-upper-case?) (z5272 core-prim . char-title-case?) (z5271 core-prim . char-numeric?) (z5270 core-prim . char-lower-case?) (z526f core-prim . char-general-category) (z526e core-prim . char-upcase) (z526d core-prim . char-titlecase) (z526c core-prim . char-foldcase) (z526b core-prim . char-downcase) (z526a core-prim . char-ci>?) (z5269 core-prim . char-ci>=?) (z5268 core-prim . char-ci=?) (z5267 core-prim . char-ci<?) (z5266 core-prim . char-ci<=?) (z5265 core-prim . char-alphabetic?) (z2e28 core-prim . make-variable-transformer) (z30cb core-prim . identifier?) (z30b7 core-prim . generate-temporaries) (z30b9 core-prim . free-identifier=?) (z30cf core-prim . syntax->datum) (z30cd core-prim . datum->syntax) (z30bb core-prim . bound-identifier=?) (z5264 core-prim . record-type-descriptor?) (z5263 core-prim . record-predicate) (z5262 core-prim . record-mutator) (z5261 core-prim . record-constructor) (z5260 core-prim . record-accessor) (z525f core-prim . make-record-type-descriptor) (z525e core-prim . make-record-constructor-descriptor) (z525d core-prim . record?) (z525c core-prim . record-type-uid) (z525b core-prim . record-type-sealed?) (z525a core-prim . record-type-parent) (z5259 core-prim . record-type-opaque?) (z5258 core-prim . record-type-name) (z5257 core-prim . record-type-generative?) (z5256 core-prim . record-type-field-names) (z5255 core-prim . record-rtd) (z5254 core-prim . record-field-mutable?) (z5253 core-prim . delete-file) (z5252 core-prim . file-exists?) (z5251 core-prim . vector-sort!) (z5250 core-prim . vector-sort) (z524f core-prim . list-sort) (z524e core-prim . symbol-hash) (z524d core-prim . string-ci-hash) (z524c core-prim . string-hash) (z524b core-prim . equal-hash) (z524a core-prim . hashtable-equivalence-function) (z5249 core-prim . make-hashtable) (z5248 core-prim . hashtable-hash-function) (z5247 core-prim . make-eqv-hashtable) (z5246 core-prim . make-eq-hashtable) (z5245 core-prim . hashtable?) (z5244 core-prim . hashtable-update!) (z5243 core-prim . hashtable-size) (z5242 core-prim . hashtable-set!) (z5241 core-prim . hashtable-ref) (z5240 core-prim . hashtable-mutable?) (z523f core-prim . hashtable-keys) (z523e core-prim . hashtable-entries) (z523d core-prim . hashtable-delete!) (z523c core-prim . hashtable-copy) (z523b core-prim . hashtable-contains?) (z523a core-prim . hashtable-clear!) (z5239 core-prim . call-with-output-file) (z5238 core-prim . call-with-input-file) (z5237 core-prim . write-char) (z5236 core-prim . write) (z5235 core-prim . with-output-to-file) (z5234 core-prim . with-input-from-file) (z5233 core-prim . read-char) (z5232 core-prim . read) (z5231 core-prim . peek-char) (z5230 core-prim . open-output-file) (z522f core-prim . open-input-file) (z522e core-prim . newline) (z522d core-prim . display) (z522c core-prim . close-output-port) (z522b core-prim . close-input-port) (z522a core-prim . eof-object?) (z5229 core-prim . eof-object) (z5228 core-prim . current-error-port) (z5227 core-prim . current-output-port) (z5226 core-prim . current-input-port) (z5225 core-prim . output-port?) (z5224 core-prim . input-port?) (z5223 core-prim . utf-8-codec) (z5222 core-prim . utf-16-codec) (z5221 core-prim . transcoder-error-handling-mode) (z5220 core-prim . transcoder-eol-style) (z521f core-prim . transcoder-codec) (z521e core-prim . transcoded-port) (z521d core-prim . textual-port?) (z521c core-prim . string->bytevector) (z521b core-prim . standard-output-port) (z521a core-prim . standard-input-port) (z5219 core-prim . standard-error-port) (z5218 core-prim . set-port-position!) (z5217 core-prim . put-u8) (z5216 core-prim . put-string) (z5215 core-prim . put-datum) (z5214 core-prim . put-char) (z5213 core-prim . put-bytevector) (z5212 core-prim . port?) (z5211 core-prim . port-transcoder) (z5210 core-prim . port-position) (z520f core-prim . port-has-set-port-position!?) (z520e core-prim . port-has-port-position?) (z520d core-prim . port-eof?) (z520c core-prim . output-port-buffer-mode) (z520b core-prim . open-string-output-port) (z520a core-prim . open-string-input-port) (z5209 core-prim . open-file-output-port) (z5208 core-prim . open-file-input/output-port) (z5207 core-prim . open-file-input-port) (z5206 core-prim . open-bytevector-output-port) (z5205 core-prim . open-bytevector-input-port) (z5204 core-prim . native-transcoder) (z5203 core-prim . native-eol-style) (z5202 core-prim . make-transcoder) (z5201 core-prim . latin-1-codec) (z4cd2 core-prim . make-i/o-write-error) (z4cbd core-prim . make-i/o-read-error) (z4d73 core-prim . make-i/o-port-error) (z4ce9 core-prim . make-i/o-invalid-position-error) (z4d04 core-prim . make-i/o-filename-error) (z4d1d core-prim . make-i/o-file-protection-error) (z4d32 core-prim . make-i/o-file-is-read-only-error) (z4d5c core-prim . make-i/o-file-does-not-exist-error) (z4d47 core-prim . make-i/o-file-already-exists-error) (z4ca8 core-prim . make-i/o-error) (z4da3 core-prim . make-i/o-encoding-error) (z4d8c core-prim . make-i/o-decoding-error) (z5200 core-prim . make-custom-textual-output-port) (z51ff core-prim . make-custom-textual-input/output-port) (z51fe core-prim . make-custom-textual-input-port) (z51fd core-prim . make-custom-binary-output-port) (z51fc core-prim . make-custom-binary-input/output-port) (z51fb core-prim . make-custom-binary-input-port) (z51fa core-prim . make-bytevector) (z51f9 core-prim . lookahead-u8) (z51f8 core-prim . lookahead-char) (z4cd4 core-prim . i/o-write-error?) (z4cbf core-prim . i/o-read-error?) (z4d77 core-prim . i/o-port-error?) (z4ced core-prim . i/o-invalid-position-error?) (z4d08 core-prim . i/o-filename-error?) (z4d1f core-prim . i/o-file-protection-error?) (z4d34 core-prim . i/o-file-is-read-only-error?) (z4d5e core-prim . i/o-file-does-not-exist-error?) (z4d49 core-prim . i/o-file-already-exists-error?) (z4caa core-prim . i/o-error?) (z4cef core-prim . i/o-error-position) (z4d79 core-prim . i/o-error-port) (z4d0a core-prim . i/o-error-filename) (z4da7 core-prim . i/o-encoding-error?) (z4da9 core-prim . i/o-encoding-error-char) (z4d8e core-prim . i/o-decoding-error?) (z51f7 core-prim . get-u8) (z51f6 core-prim . get-string-n!) (z51f5 core-prim . get-string-n) (z51f4 core-prim . get-string-all) (z51f3 core-prim . get-line) (z51f2 core-prim . get-datum) (z51f1 core-prim . get-char) (z51f0 core-prim . get-bytevector-some) (z51ef core-prim . get-bytevector-n!) (z51ee core-prim . get-bytevector-n) (z51ed core-prim . get-bytevector-all) (z51ec core-prim . flush-output-port) (z51eb core-prim . close-port) (z30a5 core-prim . scheme-report-environment) (z51ea core-prim . quotient) (z30a3 core-prim . null-environment) (z51e9 core-prim . remainder) (z51e8 core-prim . modulo) (z51e7 core-prim . inexact->exact) (z51e6 core-prim . force) (z51e5 core-prim . exact->inexact) (z51e4 core-prim . make-promise) (z51e3 core-prim . exit) (z4ede core-prim . command-line) (z51e2 core-prim . string-fill!) (z51e1 core-prim . string-set!) (z51e0 core-prim . set-cdr!) (z51df core-prim . set-car!) (z51de core-prim . remove) (z51dd core-prim . remv) (z51dc core-prim . remp) (z51db core-prim . remq) (z51da core-prim . partition) (z51d9 core-prim . memv) (z51d8 core-prim . memq) (z51d7 core-prim . memp) (z51d6 core-prim . member) (z51d5 core-prim . exists) (z51d4 core-prim . for-all) (z51d3 core-prim . fold-right) (z51d2 core-prim . fold-left) (z51d1 core-prim . find) (z51d0 core-prim . filter) (z51cf core-prim . cons*) (z51ce core-prim . assv) (z51cd core-prim . assq) (z51cc core-prim . assp) (z51cb core-prim . assoc) (z51ca core-prim . call-with-string-output-port) (z51c9 core-prim . call-with-port) (z51c8 core-prim . call-with-bytevector-output-port) (z51c7 core-prim . bytevector->string) (z51c6 core-prim . buffer-mode?) (z51c5 core-prim . binary-port?) (z51c4 core-prim . with-exception-handler) (z51c3 core-prim . raise-continuable) (z51c2 core-prim . raise) (z30a9 core-prim . eval) (z30a1 core-prim . environment) (z51c1 core-prim . make-enumeration) (z51c0 core-prim . enum-set=?) (z51bf core-prim . enum-set-universe) (z51be core-prim . enum-set-union) (z51bd core-prim . enum-set-subset?) (z51bc core-prim . enum-set-projection) (z51bb core-prim . enum-set-member?) (z51ba core-prim . enum-set-intersection) (z51b9 core-prim . enum-set-indexer) (z51b8 core-prim . enum-set-difference) (z51b7 core-prim . enum-set-constructor) (z51b6 core-prim . enum-set-complement) (z51b5 core-prim . enum-set->list) (z4c1e core-prim . who-condition?) (z4b96 core-prim . warning?) (z4bd5 core-prim . violation?) (z4c95 core-prim . undefined-violation?) (z4c7c core-prim . syntax-violation?) (z4c80 core-prim . syntax-violation-subform) (z4c7e core-prim . syntax-violation-form) (z30c9 core-prim . syntax-violation) (z51b4 core-prim . simple-conditions) (z4bab core-prim . serious-condition?) (z4c35 core-prim . non-continuable-violation?) (z4b7f core-prim . message-condition?) (z4c1a core-prim . make-who-condition) (z4b94 core-prim . make-warning) (z4bd3 core-prim . make-violation) (z4c93 core-prim . make-undefined-violation) (z4c76 core-prim . make-syntax-violation) (z4ba9 core-prim . make-serious-condition) (z4c33 core-prim . make-non-continuable-violation) (z4b7b core-prim . make-message-condition) (z4c5d core-prim . make-lexical-violation) (z4bff core-prim . make-irritants-condition) (z4c48 core-prim . make-implementation-restriction-violation) (z4bbe core-prim . make-error) (z4be8 core-prim . make-assertion-violation) (z4c5f core-prim . lexical-violation?) (z4c03 core-prim . irritants-condition?) (z4c4a core-prim . implementation-restriction-violation?) (z4bc0 core-prim . error?) (z4c20 core-prim . condition-who) (z51b3 core-prim . condition-predicate) (z4b81 core-prim . condition-message) (z4c05 core-prim . condition-irritants) (z51b2 core-prim . condition-accessor) (z51b1 core-prim . condition) (z4bea core-prim . assertion-violation?) (z51b0 core-prim . condition?) (z51af core-prim . utf32->string) (z51ae core-prim . utf16->string) (z51ad core-prim . utf8->string) (z51ac core-prim . uint-list->bytevector) (z51ab core-prim . u8-list->bytevector) (z51aa core-prim . string->utf8) (z51a9 core-prim . string->utf32) (z51a8 core-prim . string->utf16) (z51a7 core-prim . sint-list->bytevector) (z51a6 core-prim . native-endianness) (z51a5 core-prim . bytevector?) (z51a4 core-prim . bytevector=?) (z51a3 core-prim . bytevector-uint-set!) (z51a2 core-prim . bytevector-uint-ref) (z51a1 core-prim . bytevector-u8-set!) (z51a0 core-prim . bytevector-u8-ref) (z519f core-prim . bytevector-u64-set!) (z519e core-prim . bytevector-u64-ref) (z519d core-prim . bytevector-u64-native-set!) (z519c core-prim . bytevector-u64-native-ref) (z519b core-prim . bytevector-u32-set!) (z519a core-prim . bytevector-u32-ref) (z5199 core-prim . bytevector-u32-native-set!) (z5198 core-prim . bytevector-u32-native-ref) (z5197 core-prim . bytevector-u16-set!) (z5196 core-prim . bytevector-u16-ref) (z5195 core-prim . bytevector-u16-native-set!) (z5194 core-prim . bytevector-u16-native-ref) (z5193 core-prim . bytevector-sint-set!) (z5192 core-prim . bytevector-sint-ref) (z5191 core-prim . bytevector-s8-set!) (z5190 core-prim . bytevector-s8-ref) (z518f core-prim . bytevector-s64-set!) (z518e core-prim . bytevector-s64-ref) (z518d core-prim . bytevector-s64-native-set!) (z518c core-prim . bytevector-s64-native-ref) (z518b core-prim . bytevector-s32-set!) (z518a core-prim . bytevector-s32-ref) (z5189 core-prim . bytevector-s32-native-set!) (z5188 core-prim . bytevector-s32-native-ref) (z5187 core-prim . bytevector-s16-set!) (z5186 core-prim . bytevector-s16-ref) (z5185 core-prim . bytevector-s16-native-set!) (z5184 core-prim . bytevector-s16-native-ref) (z5183 core-prim . bytevector-length) (z5182 core-prim . bytevector-ieee-single-ref) (z5181 core-prim . bytevector-ieee-single-set!) (z5180 core-prim . bytevector-ieee-single-native-set!) (z517f core-prim . bytevector-ieee-single-native-ref) (z517e core-prim . bytevector-ieee-double-set!) (z517d core-prim . bytevector-ieee-double-ref) (z517c core-prim . bytevector-ieee-double-native-set!) (z517b core-prim . bytevector-ieee-double-native-ref) (z517a core-prim . bytevector-fill!) (z5179 core-prim . bytevector-copy!) (z5178 core-prim . bytevector-copy) (z5177 core-prim . bytevector->uint-list) (z5176 core-prim . bytevector->u8-list) (z5175 core-prim . bytevector->sint-list) (z4dd3 core-prim . no-nans-violation?) (z4dbe core-prim . no-infinities-violation?) (z4dd1 core-prim . make-no-nans-violation) (z4dbc core-prim . make-no-infinities-violation) (z5174 core-prim . real->flonum) (z5173 core-prim . flzero?) (z5172 core-prim . fltruncate) (z5171 core-prim . fltan) (z5170 core-prim . flsqrt) (z516f core-prim . flsin) (z516e core-prim . flround) (z516d core-prim . flpositive?) (z516c core-prim . flonum?) (z516b core-prim . flodd?) (z516a core-prim . flnumerator) (z5169 core-prim . flnegative?) (z5168 core-prim . flnan?) (z5167 core-prim . flmod0) (z5166 core-prim . flmod) (z5165 core-prim . flmin) (z5164 core-prim . flmax) (z5163 core-prim . fllog) (z5162 core-prim . flinteger?) (z5161 core-prim . flinfinite?) (z5160 core-prim . flfloor) (z515f core-prim . flfinite?) (z515e core-prim . flexpt) (z515d core-prim . flexp) (z515c core-prim . fleven?) (z515b core-prim . fldiv0-and-mod0) (z515a core-prim . fldiv0) (z5159 core-prim . fldiv-and-mod) (z5158 core-prim . fldiv) (z5157 core-prim . fldenominator) (z5156 core-prim . flcos) (z5155 core-prim . flceiling) (z5154 core-prim . flatan) (z5153 core-prim . flasin) (z5152 core-prim . flacos) (z5151 core-prim . flabs) (z5150 core-prim . fl>?) (z514f core-prim . fl>=?) (z514e core-prim . fl=?) (z514d core-prim . fl<?) (z514c core-prim . fl<=?) (z514b core-prim . fl/) (z514a core-prim . fl-) (z5149 core-prim . fl+) (z5148 core-prim . fl*) (z5147 core-prim . fixnum->flonum) (z5146 core-prim . fxzero?) (z5145 core-prim . fxxor) (z5144 core-prim . fxrotate-bit-field) (z5143 core-prim . fxreverse-bit-field) (z5142 core-prim . fxpositive?) (z5141 core-prim . fxodd?) (z5140 core-prim . fxnot) (z513f core-prim . fxnegative?) (z513e core-prim . fxmod0) (z513d core-prim . fxmod) (z513c core-prim . fxmin) (z513b core-prim . fxmax) (z513a core-prim . fxlength) (z5139 core-prim . fxior) (z5138 core-prim . fxif) (z5137 core-prim . fxfirst-bit-set) (z5136 core-prim . fxeven?) (z5135 core-prim . fxdiv0-and-mod0) (z5134 core-prim . fxdiv0) (z5133 core-prim . fxdiv-and-mod) (z5132 core-prim . fxdiv) (z5131 core-prim . fxcopy-bit-field) (z5130 core-prim . fxcopy-bit) (z512f core-prim . fxbit-set?) (z512e core-prim . fxbit-field) (z512d core-prim . fxbit-count) (z512c core-prim . fxarithmetic-shift-right) (z512b core-prim . fxarithmetic-shift-left) (z512a core-prim . fxarithmetic-shift) (z5129 core-prim . fxand) (z5128 core-prim . fx>?) (z5127 core-prim . fx>=?) (z5126 core-prim . fx=?) (z5125 core-prim . fx<?) (z5124 core-prim . fx<=?) (z5123 core-prim . fx-/carry) (z5122 core-prim . fx-) (z5121 core-prim . fx+/carry) (z5120 core-prim . fx+) (z511f core-prim . fx*/carry) (z511e core-prim . fx*) (z511d core-prim . greatest-fixnum) (z511c core-prim . least-fixnum) (z511b core-prim . fixnum-width) (z511a core-prim . fixnum?) (z5119 core-prim . bitwise-rotate-bit-field) (z5118 core-prim . bitwise-reverse-bit-field) (z5117 core-prim . bitwise-length) (z5116 core-prim . bitwise-if) (z5115 core-prim . bitwise-first-bit-set) (z5114 core-prim . bitwise-copy-bit-field) (z5113 core-prim . bitwise-copy-bit) (z5112 core-prim . bitwise-bit-set?) (z5111 core-prim . bitwise-bit-field) (z5110 core-prim . bitwise-bit-count) (z510f core-prim . bitwise-xor) (z510e core-prim . bitwise-ior) (z510d core-prim . bitwise-and) (z510c core-prim . bitwise-not) (z510b core-prim . bitwise-arithmetic-shift-right) (z510a core-prim . bitwise-arithmetic-shift-left) (z5109 core-prim . bitwise-arithmetic-shift) (z5108 core-prim . zero?) (z5107 core-prim . vector?) (z5106 core-prim . vector-set!) (z5105 core-prim . vector-ref) (z5104 core-prim . vector-map) (z5103 core-prim . vector-length) (z5102 core-prim . vector-for-each) (z5101 core-prim . vector-fill!) (z5100 core-prim . vector->list) (z50ff core-prim . vector) (z50fe core-prim . values) (z50fd core-prim . truncate) (z50fc core-prim . tan) (z50fb core-prim . symbol?) (z50fa core-prim . symbol=?) (z50f9 core-prim . symbol->string) (z50f8 core-prim . substring) (z50f7 core-prim . string?) (z50f6 core-prim . string>?) (z50f5 core-prim . string>=?) (z50f4 core-prim . string=?) (z50f3 core-prim . string<?) (z50f2 core-prim . string<=?) (z50f1 core-prim . string-ref) (z50f0 core-prim . string-length) (z50ef core-prim . string-for-each) (z50ee core-prim . string-copy) (z50ed core-prim . string-append) (z50ec core-prim . string->symbol) (z50eb core-prim . string->number) (z50ea core-prim . string->list) (z50e9 core-prim . string) (z50e8 core-prim . sqrt) (z50e7 core-prim . sin) (z50e6 core-prim . round) (z50e5 core-prim . reverse) (z50e4 core-prim . real?) (z50e3 core-prim . real-valued?) (z50e2 core-prim . real-part) (z50e1 core-prim . rationalize) (z50e0 core-prim . rational?) (z50df core-prim . rational-valued?) (z50de core-prim . procedure?) (z50dd core-prim . positive?) (z50dc core-prim . pair?) (z50db core-prim . odd?) (z50da core-prim . numerator) (z50d9 core-prim . number?) (z50d8 core-prim . number->string) (z50d7 core-prim . null?) (z50d6 core-prim . not) (z50d5 core-prim . negative?) (z50d4 core-prim . nan?) (z50d3 core-prim . min) (z50d2 core-prim . max) (z50d1 core-prim . map) (z50d0 core-prim . make-vector) (z50cf core-prim . make-string) (z50ce core-prim . make-rectangular) (z50cd core-prim . make-polar) (z50cc core-prim . magnitude) (z50cb core-prim . log) (z50ca core-prim . list?) (z50c9 core-prim . list-tail) (z50c8 core-prim . list-ref) (z50c7 core-prim . list->vector) (z50c6 core-prim . list->string) (z50c5 core-prim . list) (z50c4 core-prim . length) (z50c3 core-prim . lcm) (z50c2 core-prim . integer?) (z50c1 core-prim . integer-valued?) (z50c0 core-prim . integer->char) (z50bf core-prim . infinite?) (z50be core-prim . inexact?) (z50bd core-prim . inexact) (z50bc core-prim . imag-part) (z50bb core-prim . gcd) (z50ba core-prim . for-each) (z50b9 core-prim . floor) (z50b8 core-prim . finite?) (z50b7 core-prim . expt) (z50b6 core-prim . exp) (z50b5 core-prim . exact?) (z50b4 core-prim . exact-integer-sqrt) (z50b3 core-prim . exact) (z50b2 core-prim . even?) (z50b1 core-prim . error) (z50b0 core-prim . eqv?) (z50af core-prim . equal?) (z50ae core-prim . eq?) (z50ad core-prim . dynamic-wind) (z50ac core-prim . div0-and-mod0) (z50ab core-prim . mod0) (z50aa core-prim . div0) (z50a9 core-prim . div-and-mod) (z50a8 core-prim . mod) (z50a7 core-prim . div) (z50a6 core-prim . denominator) (z50a5 core-prim . cos) (z50a4 core-prim . cons) (z50a3 core-prim . complex?) (z50a2 core-prim . char?) (z50a1 core-prim . char>?) (z50a0 core-prim . char>=?) (z509f core-prim . char=?) (z509e core-prim . char<?) (z509d core-prim . char<=?) (z509c core-prim . char->integer) (z509b core-prim . ceiling) (z509a core-prim . call-with-values) (z5099 core-prim . call/cc) (z5098 core-prim . call-with-current-continuation) (z5097 core-prim . cddddr) (z5096 core-prim . cdddar) (z5095 core-prim . cddadr) (z5094 core-prim . cddaar) (z5093 core-prim . cdaddr) (z5092 core-prim . cdadar) (z5091 core-prim . cdaadr) (z5090 core-prim . cdaaar) (z508f core-prim . cadddr) (z508e core-prim . caddar) (z508d core-prim . cadadr) (z508c core-prim . cadaar) (z508b core-prim . caaddr) (z508a core-prim . caadar) (z5089 core-prim . caaadr) (z5088 core-prim . caaaar) (z5087 core-prim . cdddr) (z5086 core-prim . cddar) (z5085 core-prim . cdadr) (z5084 core-prim . cdaar) (z5083 core-prim . caddr) (z5082 core-prim . cadar) (z5081 core-prim . caadr) (z5080 core-prim . caaar) (z507f core-prim . cddr) (z507e core-prim . cdar) (z507d core-prim . cadr) (z507c core-prim . caar) (z507b core-prim . cdr) (z507a core-prim . car) (z5079 core-prim . boolean?) (z5078 core-prim . boolean=?) (z5077 core-prim . atan) (z5076 core-prim . assertion-violation) (z30c3 core-prim . assertion-error) (z5075 core-prim . asin) (z5074 core-prim . apply) (z5073 core-prim . append) (z5072 core-prim . angle) (z5071 core-prim . acos) (z5070 core-prim . abs) (z506f core-prim . /) (z506e core-prim . *) (z506d core-prim . -) (z506c core-prim . +) (z506b core-prim . >=) (z506a core-prim . >) (z5069 core-prim . =) (z5068 core-prim . <=) (z5067 core-prim . <) (z5066 core-prim . library) (z5065 $core-rtd &no-nans-rtd &no-nans-rcd) (z5064 $core-rtd &no-infinities-rtd &no-infinities-rcd) (z5063 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (z5062 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (z5061 $core-rtd &i/o-port-rtd &i/o-port-rcd) (z5060 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (z505f $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (z505e $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (z505d $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (z505c $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (z505b $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (z505a $core-rtd &i/o-write-rtd &i/o-write-rcd) (z5059 $core-rtd &i/o-read-rtd &i/o-read-rcd) (z5058 $core-rtd &i/o-rtd &i/o-rcd) (z5057 $core-rtd &undefined-rtd &undefined-rcd) (z5056 $core-rtd &syntax-rtd &syntax-rcd) (z5055 $core-rtd &lexical-rtd &lexical-rcd) (z5054 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (z5053 $core-rtd &non-continuable-rtd &non-continuable-rcd) (z5052 $core-rtd &who-rtd &who-rcd) (z5051 $core-rtd &irritants-rtd &irritants-rcd) (z5050 $core-rtd &assertion-rtd &assertion-rcd) (z504f $core-rtd &violation-rtd &violation-rcd) (z504e $core-rtd &error-rtd &error-rcd) (z504d $core-rtd &serious-rtd &serious-rcd) (z504c $core-rtd &warning-rtd &warning-rcd) (z504b $core-rtd &message-rtd &message-rcd) (z504a $core-rtd &condition-rtd &condition-rcd) (z5049 macro . define-condition-type) (z5048 macro . define-enumeration) (z5047 macro . define-record-type) (z5046 macro . parent-rtd) (z5045 macro . nongenerative) (z5044 macro . opaque) (z5043 macro . sealed) (z5042 macro . protocol) (z5041 macro . parent) (z5040 macro . immutable) (z503f macro . mutable) (z503e macro . fields) (z503d macro . error-handling-mode) (z503c macro . file-options) (z503b macro . buffer-mode) (z503a macro . eol-style) (z5039 macro . guard) (z5038 macro . trace-define) (z5037 macro . trace-lambda) (z5036 macro . unsyntax-splicing) (z5035 macro . unsyntax) (z5034 macro . unquote-splicing) (z5033 macro . unquote) (z5032 macro . _) (z5031 macro . else) (z5030 macro . =>) (z502f macro . ...) (z502e macro . assert) (z502d macro . endianness) (z502c macro . delay) (z502b macro . time) (z502a macro . do) (z5029 macro . cond) (z5028 macro . let*) (z5027 macro . let) (z5026 macro . let*-values) (z5025 macro . let-values) (z5024 macro . identifier-syntax) (z5023 macro . with-syntax) (z5022 macro . quasisyntax) (z5021 macro . quasiquote) (z5020 macro . syntax-rules) (z501f macro . include) (z501e macro . define-struct) (z501d core-macro . record-constructor-descriptor) (z501c core-macro . record-type-descriptor) (z501b macro . case) (z501a macro . parameterize) (z5019 macro . unless) (z5018 macro . when) (z5017 core-macro . or) (z5016 core-macro . and) (z5015 core-macro . if) (z5014 core-macro . letrec*) (z5013 core-macro . letrec) (z5012 core-macro . type-descriptor) (z5011 core-macro . case-lambda) (z5010 core-macro . lambda) (z500f core-macro . syntax) (z500e core-macro . syntax-case) (z500d core-macro . quote) (z500c core-macro . foreign-call) (z500b letrec-syntax) (z500a let-syntax) (z5009 set!) (z5008 import) (z5007 begin) (z5006 module) (z5005 define-syntax) (z5004 define)) values values '#f '#f '#f '#f) (z2c2b@z2a74@install-library 'z5345 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . z5324) (eval-core . z5323) (set-symbol-value! . z5322) (symbol-value . z5321) (gensym . z5320) (void . z531f)) '() values values '#f '#f '#f '#f) (z2c2b@z2a74@install-library 'z5346 '(mosh) '() '() '() '() '((set-symbol-value! . z5322) (symbol-value . z5321) (regexp? . z531d) (read-line . z531c) (ungensym . z531b) (alist->eq-hash-table . z531a) (assoc-ref . z5319) (print . z5318) (format . z5317) (host-os . z5316) (library-path . z2a53) (standard-library-path . z5315) (file-newer? . z5314) (stat-mtime . z5313) (digit->integer . z530f) (call-with-string-input-port . z530e) (call-with-string-io . z530d) (string-split . z530c) (bytevector-for-each . z530b) (string->regexp . z530a) (rxmatch . z5309) (regexp-replace-all . z5308) (hashtable-for-each . z5307) (set-current-directory! . z5302) (expand-path . z5301) (current-directory . z5300) (p . z52c3) (get-timeofday . z52ad) (get-command-line . z52ac) (sys-display . z52ab) (whereis . z52aa) (register . z52a9) (vm-join! . z52a8) (vm-set-value! . z52a7) (vm? . z52a6) (main-vm? . z52a5) (vm-eval . z52a4) (vm-self . z52a3) (vm-start! . z52a2) (make-vm . z52a1) (mutex-try-lock! . z52a0) (mutex-unlock! . z529f) (mutex-lock! . z529e) (mutex? . z529d) (make-mutex . z529c) (condition-variable-notify-all! . z529b) (condition-variable-notify! . z529a) (condition-variable-wait! . z5299) (make-condition-variable . z5298) (mosh-executable-path . z5297) (make-file-options . z5296) (source-info . z5295) (make-compiler-instruction . z5294) (make-instruction . z5293) (set-source-info! . z5292) (bignum? . z5291) (fast-equal? . z5290) (fasl-read . z528f) (fasl-write . z528e) (time-usage . z528d) (os-constant . z528c) (time . z502b) (include . z501f)) '() values values '#f '#f '#f '#f) (z2c2b@z2a74@install-library 'z5347 '(system) '() '() '() '() '((write-to-file . z5312) (file->list . z5311) (file->string . z5310) (call-process . z5306) (local-tz-offset . z5305) (microseconds . z5304) (directory-list . z5303) (expand-path . z5301) (%spawn . z52ff) (%waitpid . z52fe) (simple-struct-name . z52fd) (simple-struct-set! . z52fc) (simple-struct-ref . z52fb) (make-simple-struct . z52fa) (simple-struct? . z52f9) (pointer-ref-c-int64 . z52f8) (pointer-ref-c-int32 . z52f7) (pointer-ref-c-int16 . z52f6) (pointer-ref-c-int8 . z52f5) (pointer-ref-c-uint64 . z52f4) (pointer-ref-c-uint32 . z52f3) (pointer-ref-c-uint16 . z52f2) (pointer-ref-c-uint8 . z52f1) (pointer-set-c-uint64! . z52f0) (pointer-set-c-uint32! . z52ef) (pointer-set-c-uint16! . z52ee) (pointer-set-c-uint8! . z52ed) (pointer-set-c-int64! . z52ec) (pointer-set-c-int32! . z52eb) (pointer-set-c-int16! . z52ea) (pointer-set-c-int8! . z52e9) (pointer-set-c-pointer! . z52e8) (pointer-set-c-double! . z52e7) (pointer-set-c-float! . z52e6) (pointer-set-c-long-long! . z52e5) (pointer-set-c-long! . z52e4) (pointer-set-c-int! . z52e3) (pointer-set-c-short! . z52e2) (pointer-set-c-char! . z52e1) (pointer-ref-c-pointer . z52e0) (pointer-ref-c-double . z52df) (pointer-ref-c-float . z52de) (pointer-ref-c-unsigned-long-long . z52dd) (pointer-ref-c-signed-long-long . z52dc) (pointer-ref-c-unsigned-long . z52db) (pointer-ref-c-signed-long . z52da) (pointer-ref-c-unsigned-int . z52d9) (pointer-ref-c-signed-int . z52d8) (pointer-ref-c-unsigned-short . z52d7) (pointer-ref-c-signed-short . z52d6) (pointer-ref-c-unsigned-char . z52d5) (pointer-ref-c-signed-char . z52d4) (pointer->integer . z52d3) (integer->pointer . z52d2) (pointer? . z52d1) (shared-errno . z52d0) (%ffi-supported? . z52cf) (%ffi-pointer->string . z52ce) (%ffi-call->string-or-zero . z52cd) (%ffi-call->double . z52cc) (%ffi-call->void* . z52cb) (%ffi-call->void . z52ca) (%ffi-call->char . z52c9) (%ffi-call->int . z52c8) (%ffi-lookup . z52c7) (%ffi-open . z52c6) (%fork . z52c5) (%pipe . z52c4) (open-output-string . z52c2) (get-output-string . z52c1) (file-stat-ctime . z52c0) (file-stat-atime . z52bf) (file-stat-mtime . z52be) (file-size-in-bytes . z52bd) (file-writable? . z52bc) (file-executable? . z52bb) (file-readable? . z52ba) (file-regular? . z52b9) (file-symbolic-link? . z52b8) (file-directory? . z52b7) (create-symbolic-link . z52b6) (rename-file . z52b5) (delete-directory . z52b4) (create-directory . z52b3) (get-environment-variables . z52b2) (get-environment-variable . z52b1) (id->real-label . z52b0) (same-marks? . z52af) (same-marks*? . z52ae) (make-parameter . z2860) (socket-port . z528b) (socket-shutdown . z528a) (socket-close . z5289) (socket-send . z5288) (socket-recv! . z5287) (socket-recv . z5286) (make-server-socket . z5285) (make-client-socket . z5284) (socket-accept . z5283) (socket? . z5282) (parameterize . z501a)) '() values values '#f '#f '#f '#f))
((lambda (z4ecd@add-library-path! z4ecf@parse-and-add-library-path z4ed1@for-each-with-index z4ed3@rpad z4ed5@condition-printer z4ed7@record->field-alist z4ed9@map-with-index z4edb@repl z4edd@trace-printer z4edf@command-line z4ee1@local-library-path z4ee3@load/args z4ee5@load z4ee7@ironscheme-build z4ee9@eval-top-level z4eeb@compile-system-libraries z4eed@compile z4eef@compile->closure z4ef1@pre-compile-r6rs-file z4ef3@load-r6rs-top-level z4ef5@load-r6rs-top-level-sexp) (begin (set! z4ecd@add-library-path! (lambda (z4f18@path) (z2c1b@z2a54@library-path (append (z2c1b@z2a54@library-path) (list z4f18@path))))) (set! z4ecf@parse-and-add-library-path (lambda (z4f1a@paths z4f1b@message) ((lambda (z4f1e@t) (if z4f1e@t ((lambda (z4f20@paths) (for-each (lambda (z4f22@path) (if (file-exists? z4f22@path) (z4ecd@add-library-path! (expand-path z4f22@path)) (format (current-error-port) z4f1b@message z4f22@path))) (string-split z4f20@paths '#\:))) z4f1e@t) (void))) z4f1a@paths))) (set! z4ed1@for-each-with-index (lambda (z4f24@proc z4f25@lst) (letrec ((z4f28@loop (lambda (z4f2a@i z4f2b@lst) (if (null? z4f2b@lst) (if '#f '#f (void)) (begin (z4f24@proc z4f2a@i (car z4f2b@lst)) (z4f28@loop (+ z4f2a@i '1) (cdr z4f2b@lst))))))) (z4f28@loop '1 z4f25@lst)))) (set! z4ed3@rpad (lambda (z4f2e@str z4f2f@pad z4f30@n) ((lambda (z4f34@rest) ((letrec ((z4f36@loop (lambda (z4f38@rest z4f39@ret) (if (<= z4f38@rest '0) z4f39@ret (z4f36@loop (- z4f38@rest '1) (string-append z4f39@ret z4f2f@pad)))))) z4f36@loop) z4f34@rest (format '"~a" z4f2e@str))) (- z4f30@n (string-length (format '"~a" z4f2e@str)))))) (set! z4ed5@condition-printer (lambda (z4f3c@e z4f3d@port) ((lambda (z4f41@max-condition-len) (begin (set! z4f41@max-condition-len (apply max (map (lambda (z4f52@c) (string-length (symbol->string (record-type-name (record-rtd z4f52@c))))) (simple-conditions z4f3c@e)))) (begin (display '" Condition components:\n" z4f3d@port) (z4ed1@for-each-with-index (lambda (z4f42@i z4f43@x) ((lambda (z4f46@rtd z4f47@fields-alist) (begin (format z4f3d@port '" ~d. ~a" z4f42@i (z4ed3@rpad (symbol->string (record-type-name z4f46@rtd)) '" " z4f41@max-condition-len)) (if (null? z4f47@fields-alist) (newline z4f3d@port) (void)) ((letrec ((z4f4a@loop (lambda (z4f4c@first z4f4d@fields-alist) (if (null? z4f4d@fields-alist) '() ((lambda (z4f50@field) (begin (if (not z4f4c@first) (display (z4ed3@rpad '"" '" " (+ '4 z4f41@max-condition-len)) z4f3d@port) (void)) (display '"       " z4f3d@port) (display (car z4f50@field) z4f3d@port) (display '": " z4f3d@port) (write (cdr z4f50@field) z4f3d@port) (newline z4f3d@port) (z4f4a@loop '#f (cdr z4f4d@fields-alist)))) (car z4f4d@fields-alist)))))) z4f4a@loop) '#t z4f47@fields-alist))) (record-rtd z4f43@x) (z4ed7@record->field-alist z4f43@x))) (simple-conditions z4f3c@e))))) '#f))) (set! z4ed7@record->field-alist (lambda (z4f54@r) ((lambda (z4f57@ref) (begin (set! z4f57@ref (lambda (z4f62@rtd z4f63@i z4f64@x) ((lambda (z4f68@val) (if (symbol? z4f68@val) (ungensym z4f68@val) z4f68@val)) ((record-accessor z4f62@rtd z4f63@i) z4f64@x)))) ((letrec ((z4f58@loop (lambda (z4f5a@ret z4f5b@rtd) (if z4f5b@rtd (z4f58@loop (append z4f5a@ret (z4ed9@map-with-index (lambda (z4f5e@i z4f5f@field) (cons z4f5f@field (z4f57@ref z4f5b@rtd z4f5e@i z4f54@r))) (vector->list (record-type-field-names z4f5b@rtd)))) (record-type-parent z4f5b@rtd)) z4f5a@ret)))) z4f58@loop) '() (record-rtd z4f54@r)))) '#f))) (set! z4ed9@map-with-index (lambda (z4f6a@proc z4f6b@lst) ((letrec ((z4f6e@loop (lambda (z4f70@i z4f71@lst z4f72@ret) (if (null? z4f71@lst) (reverse z4f72@ret) (z4f6e@loop (+ z4f70@i '1) (cdr z4f71@lst) (cons (z4f6a@proc z4f70@i (car z4f71@lst)) z4f72@ret)))))) z4f6e@loop) '0 z4f6b@lst '()))) (set! z4edb@repl (lambda z4f76@x ((lambda (z4f79@rec) (begin (set! z4f79@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (z4f7c@z4f7a) (lambda () (with-exception-handler (lambda (z4f7e@e) ((call/cc (lambda (z4f80@z4f7b) (z4f7c@z4f7a (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? z4f7e@e) (z4ed5@condition-printer z4f7e@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" z4f7e@e))) (z4f80@z4f7b (lambda () (raise-continuable z4f7e@e)))))))))) (lambda () ((letrec ((z4f82@loop (lambda (z4f84@line z4f85@accum) ((lambda (z4f89@parentheses-ok? z4f8b@eval-string-print) (begin (set! z4f89@parentheses-ok? (lambda (z4f90@text) ((letrec ((z4f92@loop (lambda (z4f94@chars z4f95@p0 z4f96@p1) (if (null? z4f94@chars) (= '0 z4f95@p0 z4f96@p1) ((lambda (z4f9a@t) (if (memv z4f9a@t '(#\()) (z4f92@loop (cdr z4f94@chars) (+ z4f95@p0 '1) z4f96@p1) (if (memv z4f9a@t '(#\))) (z4f92@loop (cdr z4f94@chars) (- z4f95@p0 '1) z4f96@p1) (if (memv z4f9a@t '(#\[)) (z4f92@loop (cdr z4f94@chars) z4f95@p0 (+ z4f96@p1 '1)) (if (memv z4f9a@t '(#\])) (z4f92@loop (cdr z4f94@chars) z4f95@p0 (- z4f96@p1 '1)) (z4f92@loop (cdr z4f94@chars) z4f95@p0 z4f96@p1)))))) (car z4f94@chars)))))) z4f92@loop) (string->list z4f90@text) '0 '0))) (set! z4f8b@eval-string-print (lambda (z4f8e@text) (if (not (or (string=? '"\n" z4f8e@text) (= '0 (string-length z4f8e@text)))) (write (z4ee9@eval-top-level (call-with-port (open-string-input-port z4f8e@text) read))) (void)))) (if (eof-object? z4f84@line) (begin (z4f8b@eval-string-print z4f85@accum) (exit)) ((lambda (z4f8c@current) (if (z4f89@parentheses-ok? z4f8c@current) (z4f8b@eval-string-print z4f8c@current) (z4f82@loop (get-line (current-input-port)) z4f8c@current))) (string-append z4f85@accum z4f84@line))))) '#f '#f)))) z4f82@loop) (get-line (current-input-port)) '""))))))) (newline) (z4f79@rec)))) (z4f79@rec))) '#f))) (set! z4edd@trace-printer (z2965@z2861@make-parameter write)) (set! z4edf@command-line (z2965@z2861@make-parameter (get-command-line))) (set! z4ee1@local-library-path (lambda (z4f9c@filename) (z2c1b@z2a54@library-path))) (set! z4ee3@load/args (lambda (z4f9e@filename . z4fa0@args) (begin (apply z4ef3@load-r6rs-top-level z4f9e@filename 'load z4fa0@args) (void)))) (set! z4ee5@load (lambda (z4fa2@filename) (begin (apply z4ef3@load-r6rs-top-level z4fa2@filename 'load (z4edf@command-line)) (void)))) (set! z4ee7@ironscheme-build (lambda () (z4ee5@load '"ironscheme-buildscript.ss"))) (set! z4ee9@eval-top-level (lambda (z4fa4@x) (z4af9@z30aa@eval z4fa4@x (z4b0f@z30d6@interaction-environment)))) (set! z4eeb@compile-system-libraries (lambda () (z4ee9@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! z4eed@compile (lambda (z4fa6@filename) (z4ef3@load-r6rs-top-level z4fa6@filename 'compile))) (set! z4eef@compile->closure (lambda (z4fa8@filename) (z4ef3@load-r6rs-top-level z4fa8@filename 'closure))) (set! z4ef1@pre-compile-r6rs-file (lambda (z4faa@filename) (z4ef3@load-r6rs-top-level z4faa@filename 'compile))) (set! z4ef3@load-r6rs-top-level (lambda (z4fac@filename z4fad@how . z4fb0@args) ((lambda (z4fb6@z4fb3 z4fb7@z4fb5) ((lambda (z4fba@swap) (dynamic-wind z4fba@swap (lambda () ((lambda (z4fbc@x*) ((lambda (z4fbe@t) (if (memv z4fbe@t '(closure)) (z4b0e@z30d4@pre-compile-r6rs-top-level z4fbc@x*) (if (memv z4fbe@t '(load)) ((lambda (z4fc4@z4fc1 z4fc5@z4fc3) ((lambda (z4fc8@swap) (dynamic-wind z4fc8@swap (lambda () ((z4b0d@z30d2@compile-r6rs-top-level z4fbc@x*))) z4fc8@swap)) (lambda () ((lambda (z4fca@t) (begin (z4fc4@z4fc1 z4fc5@z4fc3) (set! z4fc5@z4fc3 z4fca@t))) (z4fc4@z4fc1))))) z4edf@command-line (cons z4fac@filename (car z4fb0@args))) (if (memv z4fbe@t '(compile)) (begin (z4b0d@z30d2@compile-r6rs-top-level z4fbc@x*) (z2c1f@z2a5c@serialize-all z2960@z2857@serialize-library z29bb@z2974@compile-core-expr)) (if '#f '#f (void)))))) z4fad@how)) (with-input-from-file z4fac@filename (lambda () ((letrec ((z4fcc@f (lambda () ((lambda (z4fce@x) (if (eof-object? z4fce@x) '() (cons z4fce@x (z4fcc@f)))) (z2958@z2847@read-annotated))))) z4fcc@f)))))) z4fba@swap)) (lambda () ((lambda (z4fd0@t) (begin (z4fb6@z4fb3 z4fb7@z4fb5) (set! z4fb7@z4fb5 z4fd0@t))) (z4fb6@z4fb3))))) z2c1b@z2a54@library-path (z4ee1@local-library-path z4fac@filename)))) (set! z4ef5@load-r6rs-top-level-sexp (lambda (z4fd2@import-spec z4fd3@thunk) ((lambda (z4fda@z4fd7 z4fdb@z4fd9) ((lambda (z4fde@swap) (dynamic-wind z4fde@swap (lambda () ((lambda (z4fe4@z4fe1 z4fe5@z4fe3) ((lambda (z4fe8@swap) (dynamic-wind z4fe8@swap (lambda () ((z4b0d@z30d2@compile-r6rs-top-level (list (cons 'import z4fd2@import-spec) (list z4fd3@thunk))))) z4fe8@swap)) (lambda () ((lambda (z4fea@t) (begin (z4fe4@z4fe1 z4fe5@z4fe3) (set! z4fe5@z4fe3 z4fea@t))) (z4fe4@z4fe1))))) z4edf@command-line '())) z4fde@swap)) (lambda () ((lambda (z4fec@t) (begin (z4fda@z4fd7 z4fdb@z4fd9) (set! z4fdb@z4fd9 z4fec@t))) (z4fda@z4fd7))))) z2c1b@z2a54@library-path (z4ee1@local-library-path '"")))) (begin (set! z5002@z4ef5@load-r6rs-top-level-sexp z4ef5@load-r6rs-top-level-sexp) (set! z5001@z4ef3@load-r6rs-top-level z4ef3@load-r6rs-top-level) (set! z5000@z4ef1@pre-compile-r6rs-file z4ef1@pre-compile-r6rs-file) (set! z4fff@z4eef@compile->closure z4eef@compile->closure) (set! z4ffe@z4eed@compile z4eed@compile) (set! z4ffd@z4eeb@compile-system-libraries z4eeb@compile-system-libraries) (set! z4ffc@z4ee9@eval-top-level z4ee9@eval-top-level) (set! z4ffb@z4ee7@ironscheme-build z4ee7@ironscheme-build) (set! z4ffa@z4ee5@load z4ee5@load) (set! z4ff9@z4ee3@load/args z4ee3@load/args) (set! z4ff8@z4ee1@local-library-path z4ee1@local-library-path) (set! z4ff7@z4edf@command-line z4edf@command-line) (set! z4ff6@z4edd@trace-printer z4edd@trace-printer) (set! z4ff5@z4edb@repl z4edb@repl) (set! z4ff4@z4ed9@map-with-index z4ed9@map-with-index) (set! z4ff3@z4ed7@record->field-alist z4ed7@record->field-alist) (set! z4ff2@z4ed5@condition-printer z4ed5@condition-printer) (set! z4ff1@z4ed3@rpad z4ed3@rpad) (set! z4ff0@z4ed1@for-each-with-index z4ed1@for-each-with-index) (set! z4fef@z4ecf@parse-and-add-library-path z4ecf@parse-and-add-library-path) (set! z4fee@z4ecd@add-library-path! z4ecd@add-library-path!) (z2c20@z2a5e@current-precompiled-library-loader z2961@z2859@load-serialized-library) (set-symbol-value! 'load z4ee5@load) (set-symbol-value! 'pre-compile-r6rs-file z4ef1@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs z4ee9@eval-top-level) (set-symbol-value! 'int-env-syms z4af0@z3098@interaction-environment-symbols) (set-symbol-value! 'expanded2core z29ba@z2972@expanded->core) (set-symbol-value! 'trace-printer z4edd@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (z4ef6@c) (condition (z4e2a@z4c34@make-non-continuable-violation) (z4e20@z4c1b@make-who-condition 'raise) (z4de4@z4b7c@make-message-condition '"returned from non-continuable exception") (z4e16@z4c00@make-irritants-condition (list z4ef6@c))))) (z4ecf@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (z4ecf@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (z4ecd@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (z4ecd@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (z4ecd@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (z4ef8@prefix) (z2c1c@z2a56@library-extensions (z4ef8@prefix '".mosh" (z2c1c@z2a56@library-extensions)))) (lambda (z4efa@ext z4efb@ls) (append (map (lambda (z4efe@x) (string-append z4efa@ext z4efe@x)) z4efb@ls) z4efb@ls))) ((lambda (z4f00@args z4f01@port) ((lambda (z4f05@ref) (begin (set! z4f05@ref (lambda (z4f10@rtd z4f11@i z4f12@x) ((lambda (z4f16@val) (if (symbol? z4f16@val) (ungensym z4f16@val) z4f16@val)) ((record-accessor z4f10@rtd z4f11@i) z4f12@x)))) (with-exception-handler (lambda (z4f06@c) (if (condition? z4f06@c) (z4ed5@condition-printer z4f06@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" z4f06@c))) (lambda () (if ((call/cc (lambda (z4f0a@z4f08) (lambda () (with-exception-handler (lambda (z4f0c@c) ((call/cc (lambda (z4f0e@z4f09) (z4f0a@z4f08 (lambda () (if '#t '#f (z4f0e@z4f09 (lambda () (raise-continuable z4f0c@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (z4ef5@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? z4f00@args) (z4edb@repl) (z4ef3@load-r6rs-top-level (car z4f00@args) 'load (cdr z4f00@args)))))))) '#f)) (z4edf@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
