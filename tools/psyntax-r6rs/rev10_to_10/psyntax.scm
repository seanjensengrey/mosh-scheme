;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (A57c@library-file-path->cache-path A57e@read-annotated A580@annotation-stripped A582@annotation? A584@annotation-source A586@annotation-expression A588@scm->fasl A58a@fasl-save A58c@fasl-load A58e@serialize-library A590@load-serialized-library A592@make-record-printer A594@compile-core A596@read-library-source-file A598@make-parameter A59a@mosh-cache-dir A630@file-options-spec) (begin (set! A57c@library-file-path->cache-path (lambda (A631@x) (call-with-values (lambda () (open-string-output-port)) (lambda (A637@A634 A638@A636) ((lambda (A63b@extract A63c@p) ((lambda (A640@display-hex) (begin (set! A640@display-hex (lambda (A649@n) (if (<= '0 A649@n '9) (display A649@n A63c@p) (display (integer->char (+ (char->integer '#\a) (- A649@n '10))) A63c@p)))) (begin ((letrec ((A641@f (lambda (A643@ls) (if (not (null? A643@ls)) (begin (display '"_" A63c@p) (for-each (lambda (A645@c) (if (or (char<=? '#\a A645@c '#\z) (char<=? '#\A A645@c '#\Z) (char<=? '#\0 A645@c '#\9) (memv A645@c '(#\- #\. #\_ #\~))) (display A645@c A63c@p) (begin (display '"%" A63c@p) ((lambda (A647@n) (begin (A640@display-hex (quotient A647@n '16)) (A640@display-hex (remainder A647@n '16)))) (char->integer A645@c))))) (string->list (car A643@ls))) (A641@f (cdr A643@ls))) (void))))) A641@f) (string-split A631@x '#\/)) (A63b@extract)))) '#f)) A638@A636 A637@A634))))) (set! A57e@read-annotated read) (set! A580@annotation-stripped (lambda (A64b@x) (A586@annotation-expression A64b@x))) (set! A582@annotation? (lambda (A64d@x) (source-info A64d@x))) (set! A584@annotation-source (lambda (A64f@x) (source-info A64f@x))) (set! A586@annotation-expression (lambda (A651@x) (if (pair? A651@x) (cons (car A651@x) (cdr A651@x)) (display '"line:46\n")))) (set! A588@scm->fasl (lambda (A653@filename) (string-append (A59a@mosh-cache-dir) '"/" (A57c@library-file-path->cache-path A653@filename) '".mosh-fasl"))) (set! A58a@fasl-save (lambda (A655@filename A656@obj) (call-with-port (open-file-output-port A655@filename) (lambda (A659@port) ((symbol-value 'fasl-write!) A656@obj A659@port))))) (set! A58c@fasl-load (lambda (A65b@filename) (call-with-port (open-file-input-port A65b@filename) (symbol-value 'fasl-read!)))) (set! A58e@serialize-library (lambda (A65d@filename A65e@obj) (begin ((lambda (A661@expanded2core) ((lambda (A663@compile) ((lambda (A665@code) ((lambda (A667@pivot) ((lambda (A669@visit) ((lambda () (begin (set-car! A667@pivot A669@visit) ((lambda (A66b@pivot) ((lambda (A66d@invoke) ((lambda () (set-car! A66b@pivot A66d@invoke)))) (A663@compile (A661@expanded2core (car A66b@pivot))))) (cdr A667@pivot)))))) (A663@compile (A661@expanded2core (car A667@pivot))))) (cddddr (cddddr A665@code)))) A65e@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (A66f@fasl-file) (begin (if (file-exists? A66f@fasl-file) (delete-file A66f@fasl-file) (void)) ((call/cc (lambda (A673@A671) (lambda () (with-exception-handler (lambda (A675@c) ((call/cc (lambda (A677@A672) (A673@A671 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " A65d@filename) (if (file-exists? A66f@fasl-file) (delete-file A66f@fasl-file) (void)) '#f) (A677@A672 (lambda () (raise-continuable A675@c)))))))))) (lambda () (A58a@fasl-save A66f@fasl-file A65e@obj))))))))) (A588@scm->fasl A65d@filename))))) (set! A590@load-serialized-library (lambda (A679@filename A67a@obj) (and (A59a@mosh-cache-dir) ((lambda (A67d@fasl-file) (if (and (file-exists? A67d@fasl-file) ((symbol-value 'file-newer?) A67d@fasl-file A679@filename)) ((lambda (A67f@expanded2core) ((lambda (A681@eval-compiled-core) ((lambda (A683@code) ((lambda (A685@pivot) ((lambda (A687@visit) ((lambda (A689@visit-proc) ((lambda () (begin (set-car! A685@pivot A689@visit-proc) ((lambda (A68b@pivot) ((lambda (A68d@invoke) ((lambda () (begin (set-car! A68b@pivot (lambda () (A681@eval-compiled-core A68d@invoke))) (apply A67a@obj A683@code))))) (car A68b@pivot))) (cdr A685@pivot)))))) (lambda () (A681@eval-compiled-core A687@visit)))) (car A685@pivot))) (cddddr (cddddr A683@code)))) (A58c@fasl-load A67d@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (A588@scm->fasl A679@filename))))) (set! A592@make-record-printer (lambda (A68f@name A690@printer) (lambda A693@x (begin (display '"record printer") (for-each display A693@x))))) (set! A594@compile-core (lambda A695@x (apply error 'comile-core '"not implementated" A695@x))) (set! A596@read-library-source-file (lambda (A697@file-name) (with-input-from-file A697@file-name A57e@read-annotated))) (set! A598@make-parameter (lambda A6a7 ((lambda (A6a8) (if (= A6a8 '1) (apply (lambda (A699@x) (A598@make-parameter A699@x (lambda (A69b@x) A69b@x))) A6a7) (if (= A6a8 '2) (apply (lambda (A69d@x A69e@fender) ((lambda (A6a1@x) (lambda A6a5 ((lambda (A6a6) (if (= A6a6 '0) (apply (lambda () A6a1@x) A6a5) (if (= A6a6 '1) (apply (lambda (A6a3@v) (set! A6a1@x (A69e@fender A6a3@v))) A6a5) (error 'apply '"invalid arg count")))) (length A6a5)))) (A69e@fender A69d@x))) A6a7) (error 'apply '"invalid arg count")))) (length A6a7)))) (set! A59a@mosh-cache-dir (A598@make-parameter '#f)) (set! A630@file-options-spec (lambda (A6a9@x) A6a9@x)) (begin (set! A6bb@A630@file-options-spec A630@file-options-spec) (set! A6ba@A59a@mosh-cache-dir A59a@mosh-cache-dir) (set! A6b9@A598@make-parameter A598@make-parameter) (set! A6b8@A596@read-library-source-file A596@read-library-source-file) (set! A6b7@A594@compile-core A594@compile-core) (set! A6b6@A592@make-record-printer A592@make-record-printer) (set! A6b5@A590@load-serialized-library A590@load-serialized-library) (set! A6b4@A58e@serialize-library A58e@serialize-library) (set! A6b3@A58c@fasl-load A58c@fasl-load) (set! A6b2@A58a@fasl-save A58a@fasl-save) (set! A6b1@A588@scm->fasl A588@scm->fasl) (set! A6b0@A586@annotation-expression A586@annotation-expression) (set! A6af@A584@annotation-source A584@annotation-source) (set! A6ae@A582@annotation? A582@annotation?) (set! A6ad@A580@annotation-stripped A580@annotation-stripped) (set! A6ac@A57e@read-annotated A57e@read-annotated) (set! A6ab@A57c@library-file-path->cache-path A57c@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (A6c1@current-primitive-locations A6c3@mutable? A6c5@rewriter A6c7@expanded->core A6c9@compile-core-expr A6cb@pretty-print A6cd@compile-core-expr-to-port) (begin (set! A6c1@current-primitive-locations (A6b9@A598@make-parameter (lambda (A6ce@x) '#f) (lambda (A6d0@p) A6d0@p))) (set! A6c3@mutable? (lambda (A6d2@x) (or (pair? A6d2@x) (vector? A6d2@x) (hashtable? A6d2@x)))) (set! A6c5@rewriter (lambda (A6d4@quote-hack?) ((lambda (A6d7@f) (begin (set! A6d7@f (lambda (A6d8@x) (if (pair? A6d8@x) ((lambda (A6da@t) (if (memv A6da@t '(quote)) (if (and A6d4@quote-hack? (A6c3@mutable? (cadr A6d8@x))) ((lambda (A6dc@g) (begin (set-symbol-value! A6dc@g (cadr A6d8@x)) A6dc@g)) (gensym)) A6d8@x) (if (memv A6da@t '(case-lambda)) (cons 'case-lambda (map (lambda (A6de@x) (cons (car A6de@x) (map A6d7@f (cdr A6de@x)))) (cdr A6d8@x))) (if (memv A6da@t '(lambda)) (cons* 'lambda (cadr A6d8@x) (map A6d7@f (cddr A6d8@x))) (if (memv A6da@t '(letrec)) ((lambda (A6e0@bindings A6e1@body*) ((lambda (A6e4@lhs* A6e5@rhs*) (cons* 'letrec (map list A6e4@lhs* (map A6d7@f A6e5@rhs*)) (map A6d7@f A6e1@body*))) (map car A6e0@bindings) (map cadr A6e0@bindings))) (cadr A6d8@x) (cddr A6d8@x)) (if (memv A6da@t '(letrec*)) ((lambda (A6e8@bindings A6e9@body*) ((lambda (A6ec@lhs* A6ed@rhs*) (cons* 'letrec* (map list A6ec@lhs* (map A6d7@f A6ed@rhs*)) (map A6d7@f A6e9@body*))) (map car A6e8@bindings) (map cadr A6e8@bindings))) (cadr A6d8@x) (cddr A6d8@x)) (if (memv A6da@t '(library-letrec*)) ((lambda (A6f0@name A6f1@x) ((lambda (A6f4@bindings A6f5@body*) ((lambda (A6f8@lhs* A6f9@lhs** A6fa@rhs*) (cons* 'library-letrec* A6f0@name (map list A6f8@lhs* A6f9@lhs** (map A6d7@f A6fa@rhs*)) (map A6d7@f A6f5@body*))) (map car A6f4@bindings) (map cadr A6f4@bindings) (map caddr A6f4@bindings))) (cadr A6f1@x) (cddr A6f1@x))) (cadr A6d8@x) (cdr A6d8@x)) (if (memv A6da@t '(begin)) (cons 'begin (map A6d7@f (cdr A6d8@x))) (if (memv A6da@t '(set!)) (list 'set! (cadr A6d8@x) (A6d7@f (caddr A6d8@x))) (if (memv A6da@t '(primitive)) ((lambda (A6fe@op) ((lambda (A700@t) (if A700@t ((lambda (A702@loc) A702@loc) A700@t) A6fe@op)) ((A6c1@current-primitive-locations) A6fe@op))) (cadr A6d8@x)) (if (memv A6da@t '(define)) A6d8@x (if (list? A6d8@x) (map A6d7@f A6d8@x) (error 'rewrite '"invalid form ~s ~s" A6d8@x (list? A6d8@x)))))))))))))) (car A6d8@x)) A6d8@x))) A6d7@f)) '#f))) (set! A6c7@expanded->core (lambda (A704@x) ((A6c5@rewriter '#f) A704@x))) (set! A6c9@compile-core-expr (lambda (A706@x) ((A6c5@rewriter '#f) A706@x))) (set! A6cb@pretty-print write) (set! A6cd@compile-core-expr-to-port (lambda (A708@x A709@p) (A6cb@pretty-print ((A6c5@rewriter '#f) A708@x) A709@p))) (begin (set! A712@A6cd@compile-core-expr-to-port A6cd@compile-core-expr-to-port) (set! A711@A6cb@pretty-print A6cb@pretty-print) (set! A710@A6c9@compile-core-expr A6c9@compile-core-expr) (set! A70f@A6c7@expanded->core A6c7@expanded->core) (set! A70e@A6c5@rewriter A6c5@rewriter) (set! A70d@A6c3@mutable? A6c3@mutable?) (set! A70c@A6c1@current-primitive-locations A6c1@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (A761@make-collection A763@current-library-collection A765@rp A76f@library? A771@library-id A773@set-library-id! A775@library-name A777@set-library-name! A779@library-version A77b@set-library-version! A77d@library-imp* A77f@set-library-imp*! A781@library-vis* A783@set-library-vis*! A785@library-inv* A787@set-library-inv*! A789@library-subst A78b@set-library-subst! A78d@library-env A78f@set-library-env! A791@library-visit-state A793@set-library-visit-state! A795@library-invoke-state A797@set-library-invoke-state! A799@library-visit-code A79b@set-library-visit-code! A79d@library-invoke-code A79f@set-library-invoke-code! A7a1@library-visible? A7a3@set-library-visible?! A7a5@library-source-file-name A7a7@set-library-source-file-name! A7a9@dummy A7ab@find-dependencies A7ad@find-library-by A7af@library-path A7b1@library-extensions A7b3@library-name->file-name A7b5@file-locator A7b7@serialize-all A7b9@current-precompiled-library-loader A7bb@try-load-from-file A7bd@library-loader A7bf@current-library-expander A7c1@external-pending-libraries A7c3@find-external-library A7c5@find-library-by-name A7c7@library-exists? A7c9@find-library-by-spec/die A7cb@label->binding-table A7cd@install-library-record A7cf@install-library A7d1@imported-label->binding A7d3@invoke-library A7d5@visit-library A7d7@invoke-library-by-spec A7d9@installed-libraries A7db@library-spec) (begin (set! A761@make-collection (lambda () ((lambda (A7dc@set) ((lambda (A7df@set-cons) (begin (set! A7df@set-cons (lambda (A7e4@x A7e5@ls) (if (memq A7e4@x A7e5@ls) A7e5@ls (cons A7e4@x A7e5@ls)))) (lambda A7e2 ((lambda (A7e3) (if (= A7e3 '0) (apply (lambda () A7dc@set) A7e2) (if (= A7e3 '1) (apply (lambda (A7e0@x) (set! A7dc@set (A7df@set-cons A7e0@x A7dc@set))) A7e2) (error 'apply '"invalid arg count")))) (length A7e2))))) '#f)) '()))) (set! A763@current-library-collection (A6b9@A598@make-parameter (A761@make-collection) (lambda (A7e8@x) (begin (if (not (procedure? A7e8@x)) (assertion-violation 'current-library-collection '"not a procedure" A7e8@x) (void)) A7e8@x)))) (set! A765@rp (A6b6@A592@make-record-printer 'library (lambda (A7ea@x A7eb@p A7ec@wr) (begin (if (not (A76f@library? A7ea@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (A779@library-version A7ea@x)) (A775@library-name A7ea@x) (append (A775@library-name A7ea@x) (list (A779@library-version A7ea@x))))) A7eb@p))))) (set! A76f@library? (lambda (A7f0@x) (and (simple-struct? A7f0@x) (eq? (simple-struct-name A7f0@x) 'library)))) (set! A771@library-id (lambda (A7f2@x) (simple-struct-ref A7f2@x '0))) (set! A773@set-library-id! (lambda (A7f4@x A7f5@val) (simple-struct-set! A7f4@x '0 A7f5@val))) (set! A775@library-name (lambda (A7f8@x) (simple-struct-ref A7f8@x '1))) (set! A777@set-library-name! (lambda (A7fa@x A7fb@val) (simple-struct-set! A7fa@x '1 A7fb@val))) (set! A779@library-version (lambda (A7fe@x) (simple-struct-ref A7fe@x '2))) (set! A77b@set-library-version! (lambda (A800@x A801@val) (simple-struct-set! A800@x '2 A801@val))) (set! A77d@library-imp* (lambda (A804@x) (simple-struct-ref A804@x '3))) (set! A77f@set-library-imp*! (lambda (A806@x A807@val) (simple-struct-set! A806@x '3 A807@val))) (set! A781@library-vis* (lambda (A80a@x) (simple-struct-ref A80a@x '4))) (set! A783@set-library-vis*! (lambda (A80c@x A80d@val) (simple-struct-set! A80c@x '4 A80d@val))) (set! A785@library-inv* (lambda (A810@x) (simple-struct-ref A810@x '5))) (set! A787@set-library-inv*! (lambda (A812@x A813@val) (simple-struct-set! A812@x '5 A813@val))) (set! A789@library-subst (lambda (A816@x) (simple-struct-ref A816@x '6))) (set! A78b@set-library-subst! (lambda (A818@x A819@val) (simple-struct-set! A818@x '6 A819@val))) (set! A78d@library-env (lambda (A81c@x) (simple-struct-ref A81c@x '7))) (set! A78f@set-library-env! (lambda (A81e@x A81f@val) (simple-struct-set! A81e@x '7 A81f@val))) (set! A791@library-visit-state (lambda (A822@x) (simple-struct-ref A822@x '8))) (set! A793@set-library-visit-state! (lambda (A824@x A825@val) (simple-struct-set! A824@x '8 A825@val))) (set! A795@library-invoke-state (lambda (A828@x) (simple-struct-ref A828@x '9))) (set! A797@set-library-invoke-state! (lambda (A82a@x A82b@val) (simple-struct-set! A82a@x '9 A82b@val))) (set! A799@library-visit-code (lambda (A82e@x) (simple-struct-ref A82e@x '10))) (set! A79b@set-library-visit-code! (lambda (A830@x A831@val) (simple-struct-set! A830@x '10 A831@val))) (set! A79d@library-invoke-code (lambda (A834@x) (simple-struct-ref A834@x '11))) (set! A79f@set-library-invoke-code! (lambda (A836@x A837@val) (simple-struct-set! A836@x '11 A837@val))) (set! A7a1@library-visible? (lambda (A83a@x) (simple-struct-ref A83a@x '12))) (set! A7a3@set-library-visible?! (lambda (A83c@x A83d@val) (simple-struct-set! A83c@x '12 A83d@val))) (set! A7a5@library-source-file-name (lambda (A840@x) (simple-struct-ref A840@x '13))) (set! A7a7@set-library-source-file-name! (lambda (A842@x A843@val) (simple-struct-set! A842@x '13 A843@val))) (set! A7a9@dummy '3) (set! A7ab@find-dependencies (lambda (A846@ls) (if (null? A846@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! A7ad@find-library-by (lambda (A848@pred) ((letrec ((A84a@f (lambda (A84c@ls) (if (null? A84c@ls) '#f (if (A848@pred (car A84c@ls)) (car A84c@ls) (A84a@f (cdr A84c@ls))))))) A84a@f) ((A763@current-library-collection))))) (set! A7af@library-path (A6b9@A598@make-parameter '(".") (lambda (A84e@x) (if (and (list? A84e@x) (for-all string? A84e@x)) (map (lambda (A850@x) A850@x) A84e@x) (assertion-violation 'library-path '"not a list of strings" A84e@x))))) (set! A7b1@library-extensions (A6b9@A598@make-parameter '(".sls" ".ss" ".scm") (lambda (A852@x) (if (and (list? A852@x) (for-all string? A852@x)) (map (lambda (A854@x) A854@x) A852@x) (assertion-violation 'library-extensions '"not a list of strings" A852@x))))) (set! A7b3@library-name->file-name (lambda (A856@x) (call-with-values (lambda () (open-string-output-port)) (lambda (A85c@A859 A85d@A85b) ((lambda (A860@extract A861@p) ((lambda (A865@display-hex) (begin (set! A865@display-hex (lambda (A86e@n) (if (<= '0 A86e@n '9) (display A86e@n A861@p) (display (integer->char (+ (char->integer '#\a) (- A86e@n '10))) A861@p)))) (begin ((letrec ((A866@f (lambda (A868@ls) (if (not (null? A868@ls)) (begin (display '"/" A861@p) (for-each (lambda (A86a@c) (if (or (char<=? '#\a A86a@c '#\z) (char<=? '#\A A86a@c '#\Z) (char<=? '#\0 A86a@c '#\9) (memv A86a@c '(#\- #\. #\_ #\~))) (display A86a@c A861@p) (begin (display '"%" A861@p) ((lambda (A86c@n) (begin (A865@display-hex (quotient A86c@n '16)) (A865@display-hex (remainder A86c@n '16)))) (char->integer A86a@c))))) (string->list (symbol->string (car A868@ls)))) (A866@f (cdr A868@ls))) (void))))) A866@f) A856@x) (A860@extract)))) '#f)) A85d@A85b A85c@A859))))) (set! A7b5@file-locator (A6b9@A598@make-parameter (lambda (A870@x) ((lambda (A872@str) ((letrec ((A874@f (lambda (A876@ls A877@exts A878@failed-list) (if (null? A876@ls) ((lambda () ((lambda (A884@A87f A886@A881 A888@A880 A88b@A87e A88d@make-library-resolution-condition A88f@A87c A891@A87d A893@library-resolution-condition? A895@condition-library A897@condition-files) (begin (set! A884@A87f (make-record-type-descriptor '&library-resolution A2b2e@A2875@&condition-rtd 'A882 '#f '#f '#((immutable library) (immutable files)))) (set! A886@A881 '#f) (set! A888@A880 (make-record-constructor-descriptor A884@A87f A2b2f@A2877@&condition-rcd A886@A881)) (set! A88b@A87e (record-predicate A884@A87f)) (set! A88d@make-library-resolution-condition (record-constructor A888@A880)) (set! A88f@A87c (record-accessor A884@A87f '0)) (set! A891@A87d (record-accessor A884@A87f '1)) (set! A893@library-resolution-condition? (condition-predicate A884@A87f)) (set! A895@condition-library (condition-accessor A884@A87f A88f@A87c)) (set! A897@condition-files (condition-accessor A884@A87f A891@A87d)) (raise (condition (A2b4e@A290f@make-error) (A2b70@A296b@make-who-condition 'expander) (A2b34@A28cc@make-message-condition '"cannot locate library in library-path") (A88d@make-library-resolution-condition A870@x (reverse A878@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? A877@exts) (A874@f (cdr A876@ls) (A7b1@library-extensions) A878@failed-list) ((lambda (A898@name) (if (file-exists? A898@name) A898@name (A874@f A876@ls (cdr A877@exts) (cons A898@name A878@failed-list)))) (string-append (car A876@ls) A872@str (car A877@exts)))))))) A874@f) (A7af@library-path) (A7b1@library-extensions) '())) (A7b3@library-name->file-name A870@x))) (lambda (A89a@f) (if (procedure? A89a@f) A89a@f (assertion-violation 'file-locator '"not a procedure" A89a@f))))) (set! A7b7@serialize-all (lambda (A89c@serialize A89d@compile) ((lambda (A8a1@library-desc) (begin (set! A8a1@library-desc (lambda (A8a4@x) (list (A771@library-id A8a4@x) (A775@library-name A8a4@x)))) (for-each (lambda (A8a2@x) (if (A7a5@library-source-file-name A8a2@x) (A89c@serialize (A7a5@library-source-file-name A8a2@x) (list (A771@library-id A8a2@x) (A775@library-name A8a2@x) (A779@library-version A8a2@x) (map A8a1@library-desc (A77d@library-imp* A8a2@x)) (map A8a1@library-desc (A781@library-vis* A8a2@x)) (map A8a1@library-desc (A785@library-inv* A8a2@x)) (A789@library-subst A8a2@x) (A78d@library-env A8a2@x) (A89d@compile (A799@library-visit-code A8a2@x)) (A89d@compile (A79d@library-invoke-code A8a2@x)) (A7a1@library-visible? A8a2@x))) (void))) ((A763@current-library-collection))))) '#f))) (set! A7b9@current-precompiled-library-loader (A6b9@A598@make-parameter (lambda (A8a6@filename A8a7@sk) '#f))) (set! A7bb@try-load-from-file (lambda (A8aa@filename) ((A7b9@current-precompiled-library-loader) A8aa@filename (lambda A8d0 ((lambda (A8d1) (if (= A8d1 '11) (apply (lambda (A8ac@id A8ad@name A8ae@ver A8af@imp* A8b0@vis* A8b1@inv* A8b2@exp-subst A8b3@exp-env A8b4@visit-proc A8b5@invoke-proc A8b6@visible?) ((letrec ((A8c2@f (lambda (A8c4@deps) (if (null? A8c4@deps) (begin (A7cf@install-library A8ac@id A8ad@name A8ae@ver A8af@imp* A8b0@vis* A8b1@inv* A8b2@exp-subst A8b3@exp-env A8b4@visit-proc A8b5@invoke-proc '#f '#f A8b6@visible? '#f) '#t) ((lambda (A8c6@d) ((lambda (A8c8@label A8c9@dname) ((lambda (A8cc@l) (if (and (A76f@library? A8cc@l) (eq? A8c8@label (A771@library-id A8cc@l))) (A8c2@f (cdr A8c4@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" A8ad@name A8c9@dname A8aa@filename A8cc@l A8c8@label (A771@library-id A8cc@l)) '#f))) (A7c5@find-library-by-name A8c9@dname))) (car A8c6@d) (cadr A8c6@d))) (car A8c4@deps)))))) A8c2@f) (append A8af@imp* A8b0@vis* A8b1@inv*))) A8d0) (if (>= A8d1 '0) (apply (lambda A8ce@others '#f) A8d0) (error 'apply '"invalid arg count")))) (length A8d0)))))) (set! A7bd@library-loader (A6b9@A598@make-parameter (lambda (A8d2@x) ((lambda (A8d4@file-name) (if (not A8d4@file-name) (assertion-violation '#f '"cannot file library" A8d2@x) (or (A7bb@try-load-from-file A8d4@file-name) ((A7bf@current-library-expander) (A6b8@A596@read-library-source-file A8d4@file-name) A8d4@file-name (lambda (A8d6@name) (if (not (fast-equal? A8d6@name A8d2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (A8dc@A8d9 A8dd@A8db) ((lambda (A8e0@e A8e1@p) (begin (display '"expected to find library " A8e1@p) (write A8d2@x A8e1@p) (display '" in file " A8e1@p) (display A8d4@file-name A8e1@p) (display '", found " A8e1@p) (write A8d6@name A8e1@p) (display '" instead" A8e1@p) (A8e0@e))) A8dd@A8db A8dc@A8d9)))) (void))))))) ((A7b5@file-locator) A8d2@x))) (lambda (A8e4@f) (if (procedure? A8e4@f) A8e4@f (assertion-violation 'library-locator '"not a procedure" A8e4@f))))) (set! A7bf@current-library-expander (A6b9@A598@make-parameter (lambda (A8e6@x) (assertion-violation 'library-expander '"not initialized")) (lambda (A8e8@f) (if (procedure? A8e8@f) A8e8@f (assertion-violation 'library-expander '"not a procedure" A8e8@f))))) (set! A7c1@external-pending-libraries (A6b9@A598@make-parameter '())) (set! A7c3@find-external-library (lambda (A8ea@name) (begin (if (member A8ea@name (A7c1@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" A8ea@name) (void)) ((lambda (A8f0@A8ed A8f1@A8ef) ((lambda (A8f4@swap) (dynamic-wind A8f4@swap (lambda () (begin ((A7bd@library-loader) A8ea@name) (or (A7ad@find-library-by (lambda (A8f6@x) (fast-equal? (A775@library-name A8f6@x) A8ea@name))) (assertion-violation '#f '"handling external library did not yield the correct library" A8ea@name)))) A8f4@swap)) (lambda () ((lambda (A8f8@t) (begin (A8f0@A8ed A8f1@A8ef) (set! A8f1@A8ef A8f8@t))) (A8f0@A8ed))))) A7c1@external-pending-libraries (cons A8ea@name (A7c1@external-pending-libraries)))))) (set! A7c5@find-library-by-name (lambda (A8fa@name) (or (A7ad@find-library-by (lambda (A8fc@x) (fast-equal? (A775@library-name A8fc@x) A8fa@name))) (A7c3@find-external-library A8fa@name)))) (set! A7c7@library-exists? (lambda (A8fe@name) (and (A7ad@find-library-by (lambda (A900@x) (fast-equal? (A775@library-name A900@x) A8fe@name))) '#t))) (set! A7c9@find-library-by-spec/die (lambda (A902@spec) ((lambda (A904@id) (or (A7ad@find-library-by (lambda (A906@x) (eq? A904@id (A771@library-id A906@x)))) (assertion-violation '#f '"cannot find library with required spec" A902@spec))) (car A902@spec)))) (set! A7cb@label->binding-table (make-eq-hashtable)) (set! A7cd@install-library-record (lambda (A908@lib) (begin ((lambda (A90a@exp-env) (for-each (lambda (A90c@x) ((lambda (A90e@label A90f@binding) ((lambda (A912@binding) (begin (if (hashtable-ref A7cb@label->binding-table A90e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" A90e@label (hashtable-ref A7cb@label->binding-table A90e@label '#f) A912@binding) (exit)) (void)) (hashtable-set! A7cb@label->binding-table A90e@label A912@binding))) ((lambda (A914@t) (if (memv A914@t '(global)) (cons 'global (cons A908@lib (cdr A90f@binding))) (if (memv A914@t '(global-macro)) (cons 'global-macro (cons A908@lib (cdr A90f@binding))) (if (memv A914@t '(global-macro!)) (cons 'global-macro! (cons A908@lib (cdr A90f@binding))) A90f@binding)))) (car A90f@binding)))) (car A90c@x) (cdr A90c@x))) A90a@exp-env)) (A78d@library-env A908@lib)) ((A763@current-library-collection) A908@lib)))) (set! A7cf@install-library (lambda (A916@id A917@name A918@ver A919@imp* A91a@vis* A91b@inv* A91c@exp-subst A91d@exp-env A91e@visit-proc A91f@invoke-proc A920@visit-code A921@invoke-code A922@visible? A923@source-file-name) ((lambda (A932@imp-lib* A933@vis-lib* A934@inv-lib*) (begin (if (not (and (symbol? A916@id) (list? A917@name) (list? A918@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" A916@id A917@name A918@ver) (void)) (if (A7c7@library-exists? A917@name) (assertion-violation 'install-library '"library is already installed" A917@name) (void)) ((lambda (A938@lib) (A7cd@install-library-record A938@lib)) (make-simple-struct 'library '15 (list A916@id A917@name A918@ver A932@imp-lib* A933@vis-lib* A934@inv-lib* A91c@exp-subst A91d@exp-env A91e@visit-proc A91f@invoke-proc A920@visit-code A921@invoke-code A922@visible? A923@source-file-name))))) (map A7c9@find-library-by-spec/die A919@imp*) (map A7c9@find-library-by-spec/die A91a@vis*) (map A7c9@find-library-by-spec/die A91b@inv*)))) (set! A7d1@imported-label->binding (lambda (A93a@lab) (hashtable-ref A7cb@label->binding-table A93a@lab '#f))) (set! A7d3@invoke-library (lambda (A93c@lib) ((lambda (A93e@invoke) (if (procedure? A93e@invoke) (begin (A797@set-library-invoke-state! A93c@lib (lambda () (assertion-violation 'invoke '"circularity detected" A93c@lib))) (for-each A7d3@invoke-library (A785@library-inv* A93c@lib)) (A797@set-library-invoke-state! A93c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" A93c@lib))) (A93e@invoke) (A797@set-library-invoke-state! A93c@lib '#t)) (void))) (A795@library-invoke-state A93c@lib)))) (set! A7d5@visit-library (lambda (A940@lib) ((lambda (A942@visit) (if (procedure? A942@visit) (begin (A793@set-library-visit-state! A940@lib (lambda () (assertion-violation 'visit '"circularity detected" A940@lib))) (for-each A7d3@invoke-library (A781@library-vis* A940@lib)) (A793@set-library-visit-state! A940@lib (lambda () (assertion-violation 'invoke '"first visit did not return" A940@lib))) (A942@visit) (A793@set-library-visit-state! A940@lib '#t)) (void))) (A791@library-visit-state A940@lib)))) (set! A7d7@invoke-library-by-spec (lambda (A944@spec) (A7d3@invoke-library (A7c9@find-library-by-spec/die A944@spec)))) (set! A7d9@installed-libraries (lambda A94c ((lambda (A94d) (if (= A94d '1) (apply (lambda (A946@all?) ((letrec ((A948@f (lambda (A94a@ls) (if (null? A94a@ls) '() (if (or A946@all? (A7a1@library-visible? (car A94a@ls))) (cons (car A94a@ls) (A948@f (cdr A94a@ls))) (A948@f (cdr A94a@ls))))))) A948@f) ((A763@current-library-collection)))) A94c) (if (= A94d '0) (apply (lambda () (A7d9@installed-libraries '#f)) A94c) (error 'apply '"invalid arg count")))) (length A94c)))) (set! A7db@library-spec (lambda (A94e@x) (begin (if (not (A76f@library? A94e@x)) (assertion-violation 'library-spec '"not a library" A94e@x) (void)) (list (A771@library-id A94e@x) (A775@library-name A94e@x) (A779@library-version A94e@x))))) (begin (set! A989@A7db@library-spec A7db@library-spec) (set! A988@A7d9@installed-libraries A7d9@installed-libraries) (set! A987@A7d7@invoke-library-by-spec A7d7@invoke-library-by-spec) (set! A986@A7d5@visit-library A7d5@visit-library) (set! A985@A7d3@invoke-library A7d3@invoke-library) (set! A984@A7d1@imported-label->binding A7d1@imported-label->binding) (set! A983@A7cf@install-library A7cf@install-library) (set! A982@A7cd@install-library-record A7cd@install-library-record) (set! A981@A7cb@label->binding-table A7cb@label->binding-table) (set! A980@A7c9@find-library-by-spec/die A7c9@find-library-by-spec/die) (set! A97f@A7c7@library-exists? A7c7@library-exists?) (set! A97e@A7c5@find-library-by-name A7c5@find-library-by-name) (set! A97d@A7c3@find-external-library A7c3@find-external-library) (set! A97c@A7c1@external-pending-libraries A7c1@external-pending-libraries) (set! A97b@A7bf@current-library-expander A7bf@current-library-expander) (set! A97a@A7bd@library-loader A7bd@library-loader) (set! A979@A7bb@try-load-from-file A7bb@try-load-from-file) (set! A978@A7b9@current-precompiled-library-loader A7b9@current-precompiled-library-loader) (set! A977@A7b7@serialize-all A7b7@serialize-all) (set! A976@A7b5@file-locator A7b5@file-locator) (set! A975@A7b3@library-name->file-name A7b3@library-name->file-name) (set! A974@A7b1@library-extensions A7b1@library-extensions) (set! A973@A7af@library-path A7af@library-path) (set! A972@A7ad@find-library-by A7ad@find-library-by) (set! A971@A7ab@find-dependencies A7ab@find-dependencies) (set! A970@A7a9@dummy A7a9@dummy) (set! A96f@A7a7@set-library-source-file-name! A7a7@set-library-source-file-name!) (set! A96e@A7a5@library-source-file-name A7a5@library-source-file-name) (set! A96d@A7a3@set-library-visible?! A7a3@set-library-visible?!) (set! A96c@A7a1@library-visible? A7a1@library-visible?) (set! A96b@A79f@set-library-invoke-code! A79f@set-library-invoke-code!) (set! A96a@A79d@library-invoke-code A79d@library-invoke-code) (set! A969@A79b@set-library-visit-code! A79b@set-library-visit-code!) (set! A968@A799@library-visit-code A799@library-visit-code) (set! A967@A797@set-library-invoke-state! A797@set-library-invoke-state!) (set! A966@A795@library-invoke-state A795@library-invoke-state) (set! A965@A793@set-library-visit-state! A793@set-library-visit-state!) (set! A964@A791@library-visit-state A791@library-visit-state) (set! A963@A78f@set-library-env! A78f@set-library-env!) (set! A962@A78d@library-env A78d@library-env) (set! A961@A78b@set-library-subst! A78b@set-library-subst!) (set! A960@A789@library-subst A789@library-subst) (set! A95f@A787@set-library-inv*! A787@set-library-inv*!) (set! A95e@A785@library-inv* A785@library-inv*) (set! A95d@A783@set-library-vis*! A783@set-library-vis*!) (set! A95c@A781@library-vis* A781@library-vis*) (set! A95b@A77f@set-library-imp*! A77f@set-library-imp*!) (set! A95a@A77d@library-imp* A77d@library-imp*) (set! A959@A77b@set-library-version! A77b@set-library-version!) (set! A958@A779@library-version A779@library-version) (set! A957@A777@set-library-name! A777@set-library-name!) (set! A956@A775@library-name A775@library-name) (set! A955@A773@set-library-id! A773@set-library-id!) (set! A954@A771@library-id A771@library-id) (set! A953@A76f@library? A76f@library?) (set! A952@A765@rp A765@rp) (set! A951@A763@current-library-collection A763@current-library-collection) (set! A950@A761@make-collection A761@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (A98d@build-global-define A9fe@build-lambda Aa00@build-case-lambda Aa02@build-let Aa30@build-sequence Aa32@build-void Aa34@build-letrec Aa36@build-letrec* Aa38@build-library-letrec* Aa3a@build-receive) (begin (set! A98d@build-global-define (lambda (Aa3b@x) (Aa32@build-void))) (set! A9fe@build-lambda (lambda (Aa3d@ae Aa3e@vars Aa3f@exp) (list 'lambda Aa3e@vars Aa3f@exp))) (set! Aa00@build-case-lambda (lambda (Aa43@ae Aa44@vars* Aa45@exp*) ((lambda (Aa4a@build-error Aa4c@build-pred Aa4e@build-apply Aa50@expand-case-lambda) (begin (set! Aa4a@build-error (lambda (Aa81@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! Aa4c@build-pred (lambda (Aa69@ae Aa6a@n Aa6b@vars) (call-with-values (lambda () ((letrec ((Aa73@f (lambda (Aa75@vars Aa76@count) (if (pair? Aa75@vars) (Aa73@f (cdr Aa75@vars) (+ Aa76@count '1)) (if (null? Aa75@vars) (values Aa76@count '=) (values Aa76@count '>=)))))) Aa73@f) Aa6b@vars '0)) (lambda (Aa79@Aa70 Aa7a@Aa72) ((lambda (Aa7d@pred Aa7e@count) (list (list 'primitive Aa7d@pred) Aa6a@n (list 'quote Aa7e@count))) Aa7a@Aa72 Aa79@Aa70))))) (set! Aa4e@build-apply (lambda (Aa61@ae Aa62@g Aa63@vars Aa64@exp) (list '(primitive apply) (A9fe@build-lambda Aa61@ae Aa63@vars Aa64@exp) Aa62@g))) (set! Aa50@expand-case-lambda (lambda (Aa51@ae Aa52@vars Aa53@exp*) ((lambda (Aa57@g Aa58@n) (list 'lambda Aa57@g (Aa02@build-let Aa51@ae (list Aa58@n) (list (list '(primitive length) Aa57@g)) ((letrec ((Aa5b@f (lambda (Aa5d@vars* Aa5e@exp*) (if (null? Aa5d@vars*) (Aa4a@build-error Aa51@ae) (list 'if (Aa4c@build-pred Aa51@ae Aa58@n (car Aa5d@vars*)) (Aa4e@build-apply Aa51@ae Aa57@g (car Aa5d@vars*) (car Aa5e@exp*)) (Aa5b@f (cdr Aa5d@vars*) (cdr Aa5e@exp*))))))) Aa5b@f) Aa44@vars* Aa53@exp*)))) (gensym) (gensym)))) (if (= (length Aa45@exp*) '1) (A9fe@build-lambda Aa43@ae (car Aa44@vars*) (car Aa45@exp*)) (Aa50@expand-case-lambda Aa43@ae Aa44@vars* Aa45@exp*)))) '#f '#f '#f '#f))) (set! Aa02@build-let (lambda (Aa83@ae Aa84@lhs* Aa85@rhs* Aa86@body) (cons (A9fe@build-lambda Aa83@ae Aa84@lhs* Aa86@body) Aa85@rhs*))) (set! Aa30@build-sequence (lambda (Aa8b@ae Aa8c@exps) ((letrec ((Aa8f@loop (lambda (Aa91@exps) (if (null? (cdr Aa91@exps)) (car Aa91@exps) (if (equal? (car Aa91@exps) (Aa32@build-void)) (Aa8f@loop (cdr Aa91@exps)) (cons 'begin Aa91@exps)))))) Aa8f@loop) Aa8c@exps))) (set! Aa32@build-void (lambda () '((primitive void)))) (set! Aa34@build-letrec (lambda (Aa93@ae Aa94@vars Aa95@val-exps Aa96@body-exp) (if (null? Aa94@vars) Aa96@body-exp (list 'letrec (map list Aa94@vars Aa95@val-exps) Aa96@body-exp)))) (set! Aa36@build-letrec* (lambda (Aa9b@ae Aa9c@vars Aa9d@val-exps Aa9e@body-exp) (if (null? Aa9c@vars) Aa9e@body-exp (Aa02@build-let Aa9b@ae Aa9c@vars (map (lambda (Aaa3@x) (list 'quote '#f)) Aa9c@vars) (Aa30@build-sequence Aa9b@ae (append (map (lambda (Aaa5@lhs Aaa6@rhs) (list 'set! Aaa5@lhs Aaa6@rhs)) Aa9c@vars Aa9d@val-exps) (list Aa9e@body-exp))))))) (set! Aa38@build-library-letrec* (lambda (Aaa9@ae Aaaa@name Aaab@vars Aaac@locs Aaad@val-exps Aaae@body-exp) (list 'library-letrec* Aaaa@name (map list Aaab@vars Aaac@locs Aaad@val-exps) Aaae@body-exp))) (set! Aa3a@build-receive (lambda (Aab5@ae Aab6@vars Aab7@producer Aab8@body*) (begin (display '"************** in ") (cons 'receive (cons Aab6@vars (cons Aab7@producer Aab8@body*)))))) (begin (set! Aac6@Aa3a@build-receive Aa3a@build-receive) (set! Aac5@Aa38@build-library-letrec* Aa38@build-library-letrec*) (set! Aac4@Aa36@build-letrec* Aa36@build-letrec*) (set! Aac3@Aa34@build-letrec Aa34@build-letrec) (set! Aac2@Aa32@build-void Aa32@build-void) (set! Aac1@Aa30@build-sequence Aa30@build-sequence) (set! Aac0@Aa02@build-let Aa02@build-let) (set! Aabf@Aa00@build-case-lambda Aa00@build-case-lambda) (set! Aabe@A9fe@build-lambda A9fe@build-lambda) (set! Aabd@A98d@build-global-define A98d@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (Aad5@file-options-macro Aad7@set-cons Aad9@set-union Aade@top-mark* Aae0@top-marked? Aae2@gen-lexical Aae4@gen-global Aae6@gen-label Aae8@gen-top-level-label Aaea@gen-define-label+loc Aaec@gen-define-label Aaf6@rib? Aaf8@rib-sym* Aafa@set-rib-sym*! Aafc@rib-mark** Aafe@set-rib-mark**! Ab00@rib-label* Ab02@set-rib-label*! Ab04@rib-sealed/freq Ab06@set-rib-sealed/freq! Ab08@rib-cache Ab0a@set-rib-cache! Ab0c@dummy Ab0e@make-empty-rib Ab10@extend-rib! Ab12@extend-rib/nc! Ab14@make-rib-map Ab16@seal-rib! Ab18@unseal-rib! Ab1a@make-full-rib Ab1c@rp Ab26@stx? Ab28@stx-expr Ab2a@set-stx-expr! Ab2c@stx-mark* Ab2e@set-stx-mark*! Ab30@stx-subst* Ab32@set-stx-subst*! Ab34@stx-ae* Ab36@set-stx-ae*! Ab38@dummy Ab3a@datum->stx Ab3c@gen-mark Ab3e@anti-mark Ab40@anti-mark? Ab42@mkstx Ab44@add-mark Ab46@add-subst Ab48@syntax-kind? Ab4a@syntax-vector->list Ab4c@syntax-pair? Ab4e@syntax-vector? Ab50@syntax-null? Ab52@syntax-list? Ab54@syntax-car Ab56@syntax-cdr Ab58@syntax->list Ab5a@id? Ab5c@id->sym Ab5e@bound-id=? Ab60@free-id=? Ab62@valid-bound-ids? Ab64@distinct-bound-ids? Ab66@bound-id-member? Ab68@self-evaluating? Ab6a@strip-annotations Ab6c@strip Ab6e@stx->datum Ab70@id->label Ab72@label->binding Ab74@make-binding Ab76@binding-type Ab78@binding-value Ab7a@raise-unbound-error Ab7c@syntax-type Ab8a@sanitize-binding Ab8c@make-variable-transformer Ab8e@variable-transformer? Ab90@variable-transformer-procedure Ab92@make-eval-transformer Ace3@parse-define Ace5@parse-define-syntax Ace7@scheme-stx-hashtable Ace9@scheme-stx Aceb@lexical-var Aced@lexical-mutable? Acef@set-lexical-mutable! Acf1@add-lexical Acf3@add-lexicals Acf5@letrec-helper Acf7@letrec-transformer Acf9@letrec*-transformer Acfb@fluid-let-syntax-transformer Acfd@type-descriptor-transformer Acff@record-type-descriptor-transformer Ad01@record-constructor-descriptor-transformer Ad03@when-macro Ad05@unless-macro Ad07@if-transformer Ad09@and-transformer Ad0b@or-transformer Ad0d@case-macro Ad0f@quote-transformer Ad11@case-lambda-transformer Ad13@lambda-transformer Ad15@bless Ad17@with-syntax-macro Ad19@invalid-fmls-error Ad1b@let-macro Ad1d@let-values-macro Ad1f@let*-values-macro Ad21@trace-lambda-macro Ad23@trace-define-macro Ad25@trace-define-syntax-macro Ad27@trace-let/rec-syntax Ad29@trace-let-syntax-macro Ad2b@trace-letrec-syntax-macro Ad2d@guard-macro Ad2f@define-enumeration-macro Ad31@time-macro Ad33@delay-macro Ad35@assert-macro Ad37@endianness-macro Ad39@identifier-syntax-macro Ad3b@do-macro Ad3d@let*-macro Ad3f@or-macro Ad41@and-macro Ad43@cond-macro Ad45@do-include Ad47@include-macro Ad49@include-into-macro Ad4b@syntax-rules-macro Ad4d@quasiquote-macro Ad4f@quasisyntax-macro Ad51@define-struct-macro Ad53@define-record-type-macro Ad55@define-condition-type-macro Ad57@incorrect-usage-macro Ad59@parameterize-macro Ad5b@foreign-call-transformer Ad5d@convert-pattern Ad5f@syntax-dispatch Ad61@ellipsis? Ad63@underscore? Ad65@verify-literals Ad67@syntax-case-transformer Ad69@ellipsis-map Ad6b@syntax-transformer Ad6d@core-macro-transformer Ad6f@symbol-macro Ad71@macro-transformer Ad73@local-macro-transformer Ad75@do-macro-call Ad77@chi-macro Ad79@chi-local-macro Ad7b@chi-global-macro Ad7d@chi-expr* Ad7f@chi-application Ad81@chi-expr Ad83@chi-set! Ad85@verify-formals Ad87@chi-lambda-clause Ad89@chi-lambda-clause* Ad8b@chi-defun Ad8d@chi-rhs Ad8f@expand-interaction-rhs*/init* Ad91@chi-rhs* Ad93@find-bound=? Ad95@find-dups Ad97@chi-internal Ad99@parse-module Ada3@module-interface? Ada5@module-interface-first-mark Ada7@set-module-interface-first-mark! Ada9@module-interface-exp-id-vec Adab@set-module-interface-exp-id-vec! Adad@module-interface-exp-lab-vec Adaf@set-module-interface-exp-lab-vec! Adb1@dummy Adb3@module-interface-exp-id* Adb5@chi-internal-module Adb7@chi-body* Adb9@expand-transformer Adbb@parse-exports Adbd@parse-library-name Adbf@parse-library Adc1@parse-import-spec* Adc3@make-top-rib Adc5@make-collector Adc7@inv-collector Adc9@vis-collector Adcb@imp-collector Adcd@chi-library-internal Adcf@chi-interaction-expr Add1@library-body-expander Add3@core-library-expander Add5@parse-top-level-program Add7@top-level-expander Add9@rp Ade3@env? Ade5@env-names Ade7@set-env-names! Ade9@env-labels Adeb@set-env-labels! Aded@env-itc Adef@set-env-itc! Adf1@dummy Adf3@rp Adfd@interaction-env? Adff@interaction-env-rib Ae01@set-interaction-env-rib! Ae03@interaction-env-r Ae05@set-interaction-env-r! Ae07@interaction-env-locs Ae09@set-interaction-env-locs! Ae0b@dummy Ae0d@interaction-environment-symbols Ae0f@environment-bindings Ae11@parse-binding Ae13@environment? Ae15@environment-symbols Ae17@environment Ae19@null-environment Ae1b@scheme-report-environment Ae1d@expand Ae1f@eval Ae21@library-expander Ae23@boot-library-expand Ae25@rev-map-append Ae27@build-exports Ae29@make-export-subst Ae2b@make-export-env/macros Ae2d@generate-temporaries Ae2f@free-identifier=? Ae31@bound-identifier=? Ae33@make-source-condition Ae35@extract-position-condition Ae37@expression-position Ae39@assertion-error Ae3b@syntax-error Ae3d@syntax-violation* Ae3f@syntax-violation Ae41@identifier? Ae43@datum->syntax Ae45@syntax->datum Ae47@compile-r6rs-top-level Ae49@pre-compile-r6rs-top-level Ae4b@interaction-environment Ae4d@top-level-context) (begin (set! Aad5@file-options-macro (lambda (Ae4e@x) ((lambda (Ae51@valid-option?) (begin (set! Ae51@valid-option? (lambda (Ae5a@x) (and (Ab5a@id? Ae5a@x) (memq (Ab5c@id->sym Ae5a@x) '(no-fail no-create no-truncate))))) ((lambda (Ae52@t) ((lambda (Ae54@ls/false) (if (and Ae54@ls/false (apply (lambda (Ae56@opt*) (for-all Ae51@valid-option? Ae56@opt*)) Ae54@ls/false)) (apply (lambda (Ae58@opt*) (Ad15@bless (list 'make-file-options (list 'quote Ae58@opt*)))) Ae54@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" Ae52@t))) (Ad5f@syntax-dispatch Ae52@t '(_ . each-any)))) Ae4e@x))) '#f))) (set! Aad7@set-cons (lambda (Ae5c@x Ae5d@ls) (if (memq Ae5c@x Ae5d@ls) Ae5d@ls (cons Ae5c@x Ae5d@ls)))) (set! Aad9@set-union (lambda (Ae60@ls1 Ae61@ls2) (if (null? Ae60@ls1) Ae61@ls2 (if (memq (car Ae60@ls1) Ae61@ls2) (Aad9@set-union (cdr Ae60@ls1) Ae61@ls2) (cons (car Ae60@ls1) (Aad9@set-union (cdr Ae60@ls1) Ae61@ls2)))))) (set! Aade@top-mark* '(top)) (set! Aae0@top-marked? (lambda (Ae64@m*) (memq 'top Ae64@m*))) (set! Aae2@gen-lexical (lambda (Ae66@sym) (if (symbol? Ae66@sym) (gensym Ae66@sym) (if (Ab26@stx? Ae66@sym) (Aae2@gen-lexical (Ab5c@id->sym Ae66@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" Ae66@sym))))) (set! Aae4@gen-global (lambda (Ae68@x) (Aae2@gen-lexical Ae68@x))) (set! Aae6@gen-label (lambda (Ae6a@_) (gensym))) (set! Aae8@gen-top-level-label (lambda (Ae6c@id Ae6d@rib) ((lambda (Ae71@find) (begin (set! Ae71@find (lambda (Ae7c@sym Ae7d@mark* Ae7e@sym* Ae7f@mark** Ae80@label*) (and (pair? Ae7e@sym*) (if (and (eq? Ae7c@sym (car Ae7e@sym*)) (same-marks? Ae7d@mark* (car Ae7f@mark**))) (car Ae80@label*) (Ae71@find Ae7c@sym Ae7d@mark* (cdr Ae7e@sym*) (cdr Ae7f@mark**) (cdr Ae80@label*)))))) ((lambda (Ae72@sym Ae73@mark*) ((lambda (Ae76@sym*) ((lambda (Ae78@t) (if Ae78@t ((lambda (Ae7a@label) (if (A984@A7d1@imported-label->binding Ae7a@label) (gensym) Ae7a@label)) Ae78@t) (gensym))) (and (memq Ae72@sym (Aaf8@rib-sym* Ae6d@rib)) (Ae71@find Ae72@sym Ae73@mark* Ae76@sym* (Aafc@rib-mark** Ae6d@rib) (Ab00@rib-label* Ae6d@rib))))) (Aaf8@rib-sym* Ae6d@rib))) (Ab5c@id->sym Ae6c@id) (Ab2c@stx-mark* Ae6c@id)))) '#f))) (set! Aaea@gen-define-label+loc (lambda (Ae86@id Ae87@rib) ((lambda (Ae8a@t) (if Ae8a@t ((lambda (Ae8c@env) ((lambda (Ae8e@label Ae8f@locs) (values Ae8e@label ((lambda (Ae92@t) (if Ae92@t (cdr Ae92@t) ((lambda (Ae94@loc) (begin (Ae09@set-interaction-env-locs! Ae8c@env (cons (cons Ae8e@label Ae94@loc) Ae8f@locs)) Ae94@loc)) (Aae2@gen-lexical Ae86@id)))) (assq Ae8e@label Ae8f@locs)))) (Aae8@gen-top-level-label Ae86@id Ae87@rib) (Ae07@interaction-env-locs Ae8c@env))) Ae8a@t) (values (gensym) (Aae2@gen-lexical Ae86@id)))) (Ae4d@top-level-context)))) (set! Aaec@gen-define-label (lambda (Ae96@id Ae97@rib) (if (Ae4d@top-level-context) (Aae8@gen-top-level-label Ae96@id Ae97@rib) (gensym)))) (set! Aaf6@rib? (lambda (Ae9a@x) (and (simple-struct? Ae9a@x) (eq? (simple-struct-name Ae9a@x) 'rib)))) (set! Aaf8@rib-sym* (lambda (Ae9c@x) (simple-struct-ref Ae9c@x '0))) (set! Aafa@set-rib-sym*! (lambda (Ae9e@x Ae9f@val) (simple-struct-set! Ae9e@x '0 Ae9f@val))) (set! Aafc@rib-mark** (lambda (Aea2@x) (simple-struct-ref Aea2@x '1))) (set! Aafe@set-rib-mark**! (lambda (Aea4@x Aea5@val) (simple-struct-set! Aea4@x '1 Aea5@val))) (set! Ab00@rib-label* (lambda (Aea8@x) (simple-struct-ref Aea8@x '2))) (set! Ab02@set-rib-label*! (lambda (Aeaa@x Aeab@val) (simple-struct-set! Aeaa@x '2 Aeab@val))) (set! Ab04@rib-sealed/freq (lambda (Aeae@x) (simple-struct-ref Aeae@x '3))) (set! Ab06@set-rib-sealed/freq! (lambda (Aeb0@x Aeb1@val) (simple-struct-set! Aeb0@x '3 Aeb1@val))) (set! Ab08@rib-cache (lambda (Aeb4@x) (simple-struct-ref Aeb4@x '4))) (set! Ab0a@set-rib-cache! (lambda (Aeb6@x Aeb7@val) (simple-struct-set! Aeb6@x '4 Aeb7@val))) (set! Ab0c@dummy '3) (set! Ab0e@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! Ab10@extend-rib! (lambda (Aeba@rib Aebb@id Aebc@label) ((lambda (Aec1@find) (begin (set! Aec1@find (lambda (Aece@sym Aecf@mark* Aed0@sym* Aed1@mark** Aed2@label*) (and (pair? Aed0@sym*) (if (and (eq? Aece@sym (car Aed0@sym*)) (same-marks? Aecf@mark* (car Aed1@mark**))) Aed2@label* (Aec1@find Aece@sym Aecf@mark* (cdr Aed0@sym*) (cdr Aed1@mark**) (cdr Aed2@label*)))))) (begin (if (Ab04@rib-sealed/freq Aeba@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" Aeba@rib) (void)) ((lambda (Aec2@sym Aec3@mark*) ((lambda (Aec6@sym*) ((lambda (Aec8@t) (if Aec8@t ((lambda (Aeca@p) (if (not (eq? Aebc@label (car Aeca@p))) (if (Ae4d@top-level-context) (set-car! Aeca@p Aebc@label) (Ae3f@syntax-violation '#f '"multiple definitions of identifier" Aebb@id)) (void))) Aec8@t) (begin (if (Ab08@rib-cache Aeba@rib) (hashtable-update! (Ab08@rib-cache Aeba@rib) Aec2@sym (lambda (Aecc@e) (cons (cons Aec3@mark* Aebc@label) Aecc@e)) '()) (void)) (Aafa@set-rib-sym*! Aeba@rib (cons Aec2@sym Aec6@sym*)) (Aafe@set-rib-mark**! Aeba@rib (cons Aec3@mark* (Aafc@rib-mark** Aeba@rib))) (Ab02@set-rib-label*! Aeba@rib (cons Aebc@label (Ab00@rib-label* Aeba@rib)))))) (and (memq Aec2@sym (Aaf8@rib-sym* Aeba@rib)) (Aec1@find Aec2@sym Aec3@mark* Aec6@sym* (Aafc@rib-mark** Aeba@rib) (Ab00@rib-label* Aeba@rib))))) (Aaf8@rib-sym* Aeba@rib))) (Ab5c@id->sym Aebb@id) (Ab2c@stx-mark* Aebb@id))))) '#f))) (set! Ab12@extend-rib/nc! (lambda (Aed8@rib Aed9@id Aeda@label) ((lambda (Aede@sym Aedf@mark*) ((lambda (Aee2@sym*) (begin (if (Ab08@rib-cache Aed8@rib) (hashtable-update! (Ab08@rib-cache Aed8@rib) Aede@sym (lambda (Aee4@e) (cons (cons Aedf@mark* Aeda@label) Aee4@e)) '()) (void)) (Aafa@set-rib-sym*! Aed8@rib (cons Aede@sym Aee2@sym*)) (Aafe@set-rib-mark**! Aed8@rib (cons Aedf@mark* (Aafc@rib-mark** Aed8@rib))) (Ab02@set-rib-label*! Aed8@rib (cons Aeda@label (Ab00@rib-label* Aed8@rib))))) (Aaf8@rib-sym* Aed8@rib))) (Ab5c@id->sym Aed9@id) (Ab2c@stx-mark* Aed9@id)))) (set! Ab14@make-rib-map (lambda (Aee6@sym*) ((lambda (Aee8@ht) ((letrec ((Aeea@f (lambda (Aeec@i Aeed@sym*) (if (null? Aeed@sym*) Aee8@ht (begin (hashtable-update! Aee8@ht (car Aeed@sym*) (lambda (Aef0@x) (cons Aeec@i Aef0@x)) '()) (Aeea@f (+ Aeec@i '1) (cdr Aeed@sym*))))))) Aeea@f) '0 Aee6@sym*)) (make-eq-hashtable)))) (set! Ab16@seal-rib! (lambda (Aef2@rib) ((lambda (Aef4@sym*) (if (not (null? Aef4@sym*)) (begin (Aafa@set-rib-sym*! Aef2@rib (list->vector Aef4@sym*)) (Aafe@set-rib-mark**! Aef2@rib (list->vector (Aafc@rib-mark** Aef2@rib))) (Ab02@set-rib-label*! Aef2@rib (list->vector (Ab00@rib-label* Aef2@rib))) (Ab06@set-rib-sealed/freq! Aef2@rib (Ab14@make-rib-map Aef4@sym*))) (void))) (Aaf8@rib-sym* Aef2@rib)))) (set! Ab18@unseal-rib! (lambda (Aef6@rib) (if (Ab04@rib-sealed/freq Aef6@rib) (begin (Ab06@set-rib-sealed/freq! Aef6@rib '#f) (Aafa@set-rib-sym*! Aef6@rib (vector->list (Aaf8@rib-sym* Aef6@rib))) (Aafe@set-rib-mark**! Aef6@rib (vector->list (Aafc@rib-mark** Aef6@rib))) (Ab02@set-rib-label*! Aef6@rib (vector->list (Ab00@rib-label* Aef6@rib)))) (void)))) (set! Ab1a@make-full-rib (lambda (Aef8@id* Aef9@label*) ((lambda (Aefc@r) (begin (Ab16@seal-rib! Aefc@r) Aefc@r)) (make-simple-struct 'rib '6 (list (map Ab5c@id->sym Aef8@id*) (map Ab2c@stx-mark* Aef8@id*) Aef9@label* '#f '#f))))) (set! Ab1c@rp (A6b6@A592@make-record-printer 'stx (lambda (Aefe@x Aeff@p Af00@wr) (begin (display '"#<syntax " Aeff@p) (write (Ab6e@stx->datum Aefe@x) Aeff@p) ((lambda (Af04@expr) (if (A6ae@A582@annotation? Af04@expr) ((lambda (Af06@src) (if (pair? Af06@src) (begin (display '" [" Aeff@p) (display (cdr Af06@src) Aeff@p) (display '" of " Aeff@p) (display (car Af06@src) Aeff@p) (display '"]" Aeff@p)) (void))) (A6af@A584@annotation-source Af04@expr)) (void))) (Ab28@stx-expr Aefe@x)) (display '">" Aeff@p))))) (set! Ab26@stx? (lambda (Af08@x) (and (simple-struct? Af08@x) (eq? (simple-struct-name Af08@x) 'stx)))) (set! Ab28@stx-expr (lambda (Af0a@x) (simple-struct-ref Af0a@x '0))) (set! Ab2a@set-stx-expr! (lambda (Af0c@x Af0d@val) (simple-struct-set! Af0c@x '0 Af0d@val))) (set! Ab2c@stx-mark* (lambda (Af10@x) (simple-struct-ref Af10@x '1))) (set! Ab2e@set-stx-mark*! (lambda (Af12@x Af13@val) (simple-struct-set! Af12@x '1 Af13@val))) (set! Ab30@stx-subst* (lambda (Af16@x) (simple-struct-ref Af16@x '2))) (set! Ab32@set-stx-subst*! (lambda (Af18@x Af19@val) (simple-struct-set! Af18@x '2 Af19@val))) (set! Ab34@stx-ae* (lambda (Af1c@x) (simple-struct-ref Af1c@x '3))) (set! Ab36@set-stx-ae*! (lambda (Af1e@x Af1f@val) (simple-struct-set! Af1e@x '3 Af1f@val))) (set! Ab38@dummy '3) (set! Ab3a@datum->stx (lambda (Af22@id Af23@datum) (make-simple-struct 'stx '5 (list Af23@datum (Ab2c@stx-mark* Af22@id) (Ab30@stx-subst* Af22@id) (Ab34@stx-ae* Af22@id))))) (set! Ab3c@gen-mark (lambda () (string '#\m))) (set! Ab3e@anti-mark '#f) (set! Ab40@anti-mark? not) (set! Ab42@mkstx (lambda (Af26@e Af27@m* Af28@s* Af29@ae*) (if (and (Ab26@stx? Af26@e) (not (Aae0@top-marked? Af27@m*))) (call-with-values (lambda () (join-wraps Af27@m* Af28@s* Af29@ae* Af26@e)) (lambda (Af34@Af2f Af35@Af31 Af36@Af33) ((lambda (Af3a@ae* Af3b@s* Af3c@m*) (make-simple-struct 'stx '5 (list (Ab28@stx-expr Af26@e) Af3c@m* Af3b@s* Af3a@ae*))) Af36@Af33 Af35@Af31 Af34@Af2f))) (make-simple-struct 'stx '5 (list Af26@e Af27@m* Af28@s* Af29@ae*))))) (set! Ab44@add-mark (lambda (Af40@m Af41@e Af42@ae) (Ab42@mkstx Af41@e (list Af40@m) '(shift) (list Af42@ae)))) (set! Ab46@add-subst (lambda (Af46@subst Af47@e) (Ab42@mkstx Af47@e '() (list Af46@subst) '()))) (set! Ab48@syntax-kind? (lambda (Af4a@x Af4b@p?) (if (Ab26@stx? Af4a@x) (Ab48@syntax-kind? (Ab28@stx-expr Af4a@x) Af4b@p?) (if (A6ae@A582@annotation? Af4a@x) (Ab48@syntax-kind? (A6b0@A586@annotation-expression Af4a@x) Af4b@p?) (Af4b@p? Af4a@x))))) (set! Ab4a@syntax-vector->list (lambda (Af4e@x) (if (Ab26@stx? Af4e@x) ((lambda (Af50@ls Af51@m* Af52@s* Af53@ae*) (map (lambda (Af58@x) (Ab42@mkstx Af58@x Af51@m* Af52@s* Af53@ae*)) Af50@ls)) (Ab4a@syntax-vector->list (Ab28@stx-expr Af4e@x)) (Ab2c@stx-mark* Af4e@x) (Ab30@stx-subst* Af4e@x) (Ab34@stx-ae* Af4e@x)) (if (A6ae@A582@annotation? Af4e@x) (Ab4a@syntax-vector->list (A6b0@A586@annotation-expression Af4e@x)) (if (vector? Af4e@x) (vector->list Af4e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" Af4e@x)))))) (set! Ab4c@syntax-pair? (lambda (Af5a@x) (Ab48@syntax-kind? Af5a@x pair?))) (set! Ab4e@syntax-vector? (lambda (Af5c@x) (Ab48@syntax-kind? Af5c@x vector?))) (set! Ab50@syntax-null? (lambda (Af5e@x) (Ab48@syntax-kind? Af5e@x null?))) (set! Ab52@syntax-list? (lambda (Af60@x) (or (Ab50@syntax-null? Af60@x) (and (Ab4c@syntax-pair? Af60@x) (Ab52@syntax-list? (Ab56@syntax-cdr Af60@x)))))) (set! Ab54@syntax-car (lambda (Af62@x) (if (Ab26@stx? Af62@x) (Ab42@mkstx (Ab54@syntax-car (Ab28@stx-expr Af62@x)) (Ab2c@stx-mark* Af62@x) (Ab30@stx-subst* Af62@x) (Ab34@stx-ae* Af62@x)) (if (A6ae@A582@annotation? Af62@x) (Ab54@syntax-car (A6b0@A586@annotation-expression Af62@x)) (if (pair? Af62@x) (car Af62@x) (assertion-violation 'syntax-car '"BUG: not a pair" Af62@x)))))) (set! Ab56@syntax-cdr (lambda (Af64@x) (if (Ab26@stx? Af64@x) (Ab42@mkstx (Ab56@syntax-cdr (Ab28@stx-expr Af64@x)) (Ab2c@stx-mark* Af64@x) (Ab30@stx-subst* Af64@x) (Ab34@stx-ae* Af64@x)) (if (A6ae@A582@annotation? Af64@x) (Ab56@syntax-cdr (A6b0@A586@annotation-expression Af64@x)) (if (pair? Af64@x) (cdr Af64@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" Af64@x)))))) (set! Ab58@syntax->list (lambda (Af66@x) (if (Ab4c@syntax-pair? Af66@x) (cons (Ab54@syntax-car Af66@x) (Ab58@syntax->list (Ab56@syntax-cdr Af66@x))) (if (Ab50@syntax-null? Af66@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" Af66@x))))) (set! Ab5a@id? (lambda (Af68@x) (and (Ab26@stx? Af68@x) (symbol? (Ab28@stx-expr Af68@x))))) (set! Ab5c@id->sym (lambda (Af6a@x) (Ab28@stx-expr Af6a@x))) (set! Ab5e@bound-id=? (lambda (Af6c@x Af6d@y) (and (eq? (Ab5c@id->sym Af6c@x) (Ab5c@id->sym Af6d@y)) (same-marks? (Ab2c@stx-mark* Af6c@x) (Ab2c@stx-mark* Af6d@y))))) (set! Ab60@free-id=? (lambda (Af70@i Af71@j) ((lambda (Af74@t0 Af75@t1) (if (or Af74@t0 Af75@t1) (eq? Af74@t0 Af75@t1) (eq? (Ab5c@id->sym Af70@i) (Ab5c@id->sym Af71@j)))) (id->real-label Af70@i) (id->real-label Af71@j)))) (set! Ab62@valid-bound-ids? (lambda (Af78@id*) (and (for-all Ab5a@id? Af78@id*) (Ab64@distinct-bound-ids? Af78@id*)))) (set! Ab64@distinct-bound-ids? (lambda (Af7a@id*) (or (null? Af7a@id*) (and (not (Ab66@bound-id-member? (car Af7a@id*) (cdr Af7a@id*))) (Ab64@distinct-bound-ids? (cdr Af7a@id*)))))) (set! Ab66@bound-id-member? (lambda (Af7c@id Af7d@id*) (and (pair? Af7d@id*) (or (Ab5e@bound-id=? Af7c@id (car Af7d@id*)) (Ab66@bound-id-member? Af7c@id (cdr Af7d@id*)))))) (set! Ab68@self-evaluating? (lambda (Af80@x) (or (number? Af80@x) (string? Af80@x) (char? Af80@x) (boolean? Af80@x) (regexp? Af80@x) (bytevector? Af80@x)))) (set! Ab6a@strip-annotations (lambda (Af82@x) (if (pair? Af82@x) (cons (Ab6a@strip-annotations (car Af82@x)) (Ab6a@strip-annotations (cdr Af82@x))) (if (vector? Af82@x) (vector-map Ab6a@strip-annotations Af82@x) (if (A6ae@A582@annotation? Af82@x) (A6ad@A580@annotation-stripped Af82@x) Af82@x))))) (set! Ab6c@strip (lambda (Af84@x Af85@m*) (if (Aae0@top-marked? Af85@m*) (if (or (A6ae@A582@annotation? Af84@x) (and (pair? Af84@x) (A6ae@A582@annotation? (car Af84@x))) (and (vector? Af84@x) (> (vector-length Af84@x) '0) (A6ae@A582@annotation? (vector-ref Af84@x '0)))) (Ab6a@strip-annotations Af84@x) Af84@x) ((letrec ((Af88@f (lambda (Af8a@x) (if (Ab26@stx? Af8a@x) (Ab6c@strip (Ab28@stx-expr Af8a@x) (Ab2c@stx-mark* Af8a@x)) (if (A6ae@A582@annotation? Af8a@x) (A6ad@A580@annotation-stripped Af8a@x) (if (pair? Af8a@x) ((lambda (Af8c@a Af8d@d) (if (and (eq? Af8c@a (car Af8a@x)) (eq? Af8d@d (cdr Af8a@x))) Af8a@x (cons Af8c@a Af8d@d))) (Af88@f (car Af8a@x)) (Af88@f (cdr Af8a@x))) (if (vector? Af8a@x) ((lambda (Af90@old) ((lambda (Af92@new) (if (for-all eq? Af90@old Af92@new) Af8a@x (list->vector Af92@new))) (map Af88@f Af90@old))) (vector->list Af8a@x)) Af8a@x))))))) Af88@f) Af84@x)))) (set! Ab6e@stx->datum (lambda (Af94@x) (Ab6c@strip Af94@x '()))) (set! Ab70@id->label (lambda (Af96@id) (or (id->real-label Af96@id) ((lambda (Af98@t) (if Af98@t ((lambda (Af9a@env) ((lambda (Af9c@rib) (call-with-values (lambda () (Aaea@gen-define-label+loc Af96@id Af9c@rib)) (lambda (Afa2@Af9f Afa3@Afa1) ((lambda (Afa6@loc_ Afa7@lab) (begin (Ab10@extend-rib! Af9c@rib Af96@id Afa7@lab) Afa7@lab)) Afa3@Afa1 Afa2@Af9f)))) (Adff@interaction-env-rib Af9a@env))) Af98@t) '#f)) (Ae4d@top-level-context))))) (set! Ab72@label->binding (lambda (Afaa@x Afab@r) ((lambda (Afae@t) (if Afae@t ((lambda (Afb0@b) (if (and (pair? Afb0@b) (eq? (car Afb0@b) '$core-rtd)) (cons '$rtd (map Ad15@bless (cdr Afb0@b))) (if (and (pair? Afb0@b) (eq? (car Afb0@b) 'global-rtd)) ((lambda (Afb2@lib Afb3@loc) (cons '$rtd (symbol-value Afb3@loc))) (cadr Afb0@b) (cddr Afb0@b)) Afb0@b))) Afae@t) ((lambda (Afb6@t) (if Afb6@t (cdr Afb6@t) ((lambda (Afb8@t) (if Afb8@t ((lambda (Afba@env) ((lambda (Afbc@t) (if Afbc@t ((lambda (Afbe@p) (cons* 'lexical (cdr Afbe@p) '#f)) Afbc@t) '(displaced-lexical . #f))) (assq Afaa@x (Ae07@interaction-env-locs Afba@env)))) Afb8@t) '(displaced-lexical . #f))) (Ae4d@top-level-context)))) (assq Afaa@x Afab@r)))) (A984@A7d1@imported-label->binding Afaa@x)))) (set! Ab74@make-binding cons) (set! Ab76@binding-type car) (set! Ab78@binding-value cdr) (set! Ab7a@raise-unbound-error (lambda (Afc0@id) (Ae3d@syntax-violation* '#f '"unbound identifier" Afc0@id (A2b9e@A29e4@make-undefined-violation)))) (set! Ab7c@syntax-type (lambda (Afc2@e Afc3@r) (if (Ab5a@id? Afc2@e) ((lambda (Afc6@id) ((lambda (Afc8@label) ((lambda (Afca@b) ((lambda (Afcc@type) ((lambda () (begin (if (not Afc8@label) (Ab7a@raise-unbound-error Afc6@id) (void)) ((lambda (Afce@t) (if (memv Afce@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values Afcc@type (Ab78@binding-value Afca@b) Afc6@id) (values 'other '#f '#f))) Afcc@type))))) (Ab76@binding-type Afca@b))) (Ab72@label->binding Afc8@label Afc3@r))) (Ab70@id->label Afc6@id))) Afc2@e) (if (Ab4c@syntax-pair? Afc2@e) ((lambda (Afd0@id) (if (Ab5a@id? Afd0@id) ((lambda (Afd2@label) ((lambda (Afd4@b) ((lambda (Afd6@type) ((lambda () (begin (if (not Afd2@label) (Ab7a@raise-unbound-error Afd0@id) (void)) ((lambda (Afd8@t) (if (memv Afd8@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values Afd6@type (Ab78@binding-value Afd4@b) Afd0@id) (values 'call '#f '#f))) Afd6@type))))) (Ab76@binding-type Afd4@b))) (Ab72@label->binding Afd2@label Afc3@r))) (Ab70@id->label Afd0@id)) (values 'call '#f '#f))) (Ab54@syntax-car Afc2@e)) ((lambda (Afda@d) (if (Ab68@self-evaluating? Afda@d) (values 'constant Afda@d '#f) (values 'other '#f '#f))) (Ab6e@stx->datum Afc2@e)))))) (set! Ab8a@sanitize-binding (lambda (Afdc@x Afdd@src) (if (procedure? Afdc@x) (cons* 'local-macro Afdc@x Afdd@src) (if (and (pair? Afdc@x) (eq? (car Afdc@x) 'macro!) (procedure? (cdr Afdc@x))) (cons* 'local-macro! (cdr Afdc@x) Afdd@src) (if (and (pair? Afdc@x) (eq? (car Afdc@x) '$rtd)) Afdc@x (assertion-violation 'expand '"invalid transformer" Afdc@x)))))) (set! Ab8c@make-variable-transformer (lambda (Afe0@x) (if (procedure? Afe0@x) (cons 'macro! Afe0@x) (assertion-violation 'make-variable-transformer '"not a procedure" Afe0@x)))) (set! Ab8e@variable-transformer? (lambda (Afe2@x) (and (pair? Afe2@x) (eq? (car Afe2@x) 'macro!) (procedure? (cdr Afe2@x))))) (set! Ab90@variable-transformer-procedure (lambda (Afe4@x) (if (Ab8e@variable-transformer? Afe4@x) (cdr Afe4@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" Afe4@x)))) (set! Ab92@make-eval-transformer (lambda (Afe6@x) (Ab8a@sanitize-binding (eval-core (A70f@A6c7@expanded->core Afe6@x)) Afe6@x))) (set! Ace3@parse-define (lambda (Afe8@x) ((lambda (Afea@t) ((lambda (Afec@ls/false) (if (and Afec@ls/false (apply (lambda (Afee@id Afef@fmls Aff0@b Aff1@b*) (Ab5a@id? Afee@id)) Afec@ls/false)) (apply (lambda (Aff6@id Aff7@fmls Aff8@b Aff9@b*) (begin (Ad85@verify-formals Aff7@fmls Afe8@x) (values Aff6@id (cons 'defun (cons Aff7@fmls (cons Aff8@b Aff9@b*)))))) Afec@ls/false) ((lambda (Affe@t) ((lambda (A1000@ls/false) (if (and A1000@ls/false (apply (lambda (A1002@id A1003@val) (Ab5a@id? A1002@id)) A1000@ls/false)) (apply (lambda (A1006@id A1007@val) (values A1006@id (cons 'expr A1007@val))) A1000@ls/false) ((lambda (A100a@t) ((lambda (A100c@ls/false) (if (and A100c@ls/false (apply (lambda (A100e@id) (Ab5a@id? A100e@id)) A100c@ls/false)) (apply (lambda (A1010@id) (values A1010@id (cons 'expr (Ad15@bless '(void))))) A100c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A100a@t))) (Ad5f@syntax-dispatch A100a@t '(_ any)))) Affe@t))) (Ad5f@syntax-dispatch Affe@t '(_ any any)))) Afea@t))) (Ad5f@syntax-dispatch Afea@t '(_ (any . any) any . each-any)))) Afe8@x))) (set! Ace5@parse-define-syntax (lambda (A1012@x) ((lambda (A1014@t) ((lambda (A1016@ls/false) (if (and A1016@ls/false (apply (lambda (A1018@id A1019@val) (Ab5a@id? A1018@id)) A1016@ls/false)) (apply (lambda (A101c@id A101d@val) (values A101c@id A101d@val)) A1016@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1014@t))) (Ad5f@syntax-dispatch A1014@t '(_ any any)))) A1012@x))) (set! Ace7@scheme-stx-hashtable (make-eq-hashtable)) (set! Ace9@scheme-stx (lambda (A1020@sym) (or (hashtable-ref Ace7@scheme-stx-hashtable A1020@sym '#f) ((lambda (A1022@subst) ((lambda (A1024@stx) ((lambda (A1026@stx) ((lambda () (begin (hashtable-set! Ace7@scheme-stx-hashtable A1020@sym A1026@stx) A1026@stx)))) ((lambda (A1028@t) (if A1028@t ((lambda (A102a@x) ((lambda (A102c@name A102d@label) (Ab46@add-subst (make-simple-struct 'rib '6 (list (list A102c@name) (list Aade@top-mark*) (list A102d@label) '#f '#f)) A1024@stx)) (car A102a@x) (cdr A102a@x))) A1028@t) A1024@stx)) (assq A1020@sym A1022@subst)))) (make-simple-struct 'stx '5 (list A1020@sym Aade@top-mark* '() '())))) (A960@A789@library-subst (A97e@A7c5@find-library-by-name '(psyntax system $all))))))) (set! Aceb@lexical-var car) (set! Aced@lexical-mutable? cdr) (set! Acef@set-lexical-mutable! set-cdr!) (set! Acf1@add-lexical (lambda (A1030@lab A1031@lex A1032@r) (cons (cons* A1030@lab 'lexical A1031@lex '#f) A1032@r))) (set! Acf3@add-lexicals (lambda (A1036@lab* A1037@lex* A1038@r) (if (null? A1036@lab*) A1038@r (Acf3@add-lexicals (cdr A1036@lab*) (cdr A1037@lex*) (Acf1@add-lexical (car A1036@lab*) (car A1037@lex*) A1038@r))))) (set! Acf5@letrec-helper (lambda (A103c@e A103d@r A103e@mr A103f@build) ((lambda (A1044@t) ((lambda (A1046@ls/false) (if A1046@ls/false (apply (lambda (A1048@lhs* A1049@rhs* A104a@b A104b@b*) (if (not (Ab62@valid-bound-ids? A1048@lhs*)) (Ad19@invalid-fmls-error A103c@e A1048@lhs*) ((lambda (A1050@lex* A1051@lab*) ((lambda (A1054@rib A1055@r) ((lambda (A1058@body A1059@rhs*) (A103f@build '#f A1050@lex* A1059@rhs* A1058@body)) (Ad97@chi-internal (Ab46@add-subst A1054@rib (cons A104a@b A104b@b*)) A1055@r A103e@mr) (Ad7d@chi-expr* (map (lambda (A105c@x) (Ab46@add-subst A1054@rib A105c@x)) A1049@rhs*) A1055@r A103e@mr))) (Ab1a@make-full-rib A1048@lhs* A1051@lab*) (Acf3@add-lexicals A1051@lab* A1050@lex* A103d@r))) (map Aae2@gen-lexical A1048@lhs*) (map Aae6@gen-label A1048@lhs*)))) A1046@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1044@t))) (Ad5f@syntax-dispatch A1044@t '(_ #(each (any any)) any . each-any)))) A103c@e))) (set! Acf7@letrec-transformer (lambda (A105e@e A105f@r A1060@mr) (Acf5@letrec-helper A105e@e A105f@r A1060@mr Aac3@Aa34@build-letrec))) (set! Acf9@letrec*-transformer (lambda (A1064@e A1065@r A1066@mr) (Acf5@letrec-helper A1064@e A1065@r A1066@mr Aac4@Aa36@build-letrec*))) (set! Acfb@fluid-let-syntax-transformer (lambda (A106a@e A106b@r A106c@mr) ((lambda (A1071@lookup) (begin (set! A1071@lookup (lambda (A1084@x) (or (Ab70@id->label A1084@x) (Ae3f@syntax-violation '#f '"unbound identifier" A106a@e A1084@x)))) ((lambda (A1072@t) ((lambda (A1074@ls/false) (if A1074@ls/false (apply (lambda (A1076@lhs* A1077@rhs* A1078@b A1079@b*) (if (not (Ab62@valid-bound-ids? A1076@lhs*)) (Ad19@invalid-fmls-error A106a@e A1076@lhs*) ((lambda (A107e@lab* A107f@rhs*) (Ad97@chi-internal (cons A1078@b A1079@b*) (append (map cons A107e@lab* A107f@rhs*) A106b@r) (append (map cons A107e@lab* A107f@rhs*) A106c@mr))) (map A1071@lookup A1076@lhs*) (map (lambda (A1082@x) (Ab92@make-eval-transformer (Adb9@expand-transformer A1082@x A106c@mr))) A1077@rhs*)))) A1074@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1072@t))) (Ad5f@syntax-dispatch A1072@t '(_ #(each (any any)) any . each-any)))) A106a@e))) '#f))) (set! Acfd@type-descriptor-transformer (lambda (A1086@e A1087@r A1088@mr) ((lambda (A108c@t) ((lambda (A108e@ls/false) (if (and A108e@ls/false (apply (lambda (A1090@id) (Ab5a@id? A1090@id)) A108e@ls/false)) (apply (lambda (A1092@id) ((lambda (A1094@lab) ((lambda (A1096@b) ((lambda (A1098@type) ((lambda () (begin (if (not A1094@lab) (Ab7a@raise-unbound-error A1092@id) (void)) (if (not (and (eq? A1098@type '$rtd) (not (list? (Ab78@binding-value A1096@b))))) (Ae3f@syntax-violation '#f '"not a record type" A1086@e) (void)) (list 'quote (Ab78@binding-value A1096@b)))))) (Ab76@binding-type A1096@b))) (Ab72@label->binding A1094@lab A1087@r))) (Ab70@id->label A1092@id))) A108e@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A108c@t))) (Ad5f@syntax-dispatch A108c@t '(_ any)))) A1086@e))) (set! Acff@record-type-descriptor-transformer (lambda (A109a@e A109b@r A109c@mr) ((lambda (A10a0@t) ((lambda (A10a2@ls/false) (if (and A10a2@ls/false (apply (lambda (A10a4@id) (Ab5a@id? A10a4@id)) A10a2@ls/false)) (apply (lambda (A10a6@id) ((lambda (A10a8@lab) ((lambda (A10aa@b) ((lambda (A10ac@type) ((lambda () (begin (if (not A10a8@lab) (Ab7a@raise-unbound-error A10a6@id) (void)) (if (not (and (eq? A10ac@type '$rtd) (list? (Ab78@binding-value A10aa@b)))) (Ae3f@syntax-violation '#f '"not a record type" A109a@e) (void)) (Ad81@chi-expr (car (Ab78@binding-value A10aa@b)) A109b@r A109c@mr))))) (Ab76@binding-type A10aa@b))) (Ab72@label->binding A10a8@lab A109b@r))) (Ab70@id->label A10a6@id))) A10a2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A10a0@t))) (Ad5f@syntax-dispatch A10a0@t '(_ any)))) A109a@e))) (set! Ad01@record-constructor-descriptor-transformer (lambda (A10ae@e A10af@r A10b0@mr) ((lambda (A10b4@t) ((lambda (A10b6@ls/false) (if (and A10b6@ls/false (apply (lambda (A10b8@id) (Ab5a@id? A10b8@id)) A10b6@ls/false)) (apply (lambda (A10ba@id) ((lambda (A10bc@lab) ((lambda (A10be@b) ((lambda (A10c0@type) ((lambda () (begin (if (not A10bc@lab) (Ab7a@raise-unbound-error A10ba@id) (void)) (if (not (and (eq? A10c0@type '$rtd) (list? (Ab78@binding-value A10be@b)))) (Ae3f@syntax-violation '#f '"invalid type" A10ae@e) (void)) (Ad81@chi-expr (cadr (Ab78@binding-value A10be@b)) A10af@r A10b0@mr))))) (Ab76@binding-type A10be@b))) (Ab72@label->binding A10bc@lab A10af@r))) (Ab70@id->label A10ba@id))) A10b6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A10b4@t))) (Ad5f@syntax-dispatch A10b4@t '(_ any)))) A10ae@e))) (set! Ad03@when-macro (lambda (A10c2@e) ((lambda (A10c4@t) ((lambda (A10c6@ls/false) (if A10c6@ls/false (apply (lambda (A10c8@test A10c9@e A10ca@e*) (Ad15@bless (list 'if A10c8@test (cons 'begin (cons A10c9@e A10ca@e*))))) A10c6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A10c4@t))) (Ad5f@syntax-dispatch A10c4@t '(_ any any . each-any)))) A10c2@e))) (set! Ad05@unless-macro (lambda (A10ce@e) ((lambda (A10d0@t) ((lambda (A10d2@ls/false) (if A10d2@ls/false (apply (lambda (A10d4@test A10d5@e A10d6@e*) (Ad15@bless (list 'if (list 'not A10d4@test) (cons 'begin (cons A10d5@e A10d6@e*))))) A10d2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A10d0@t))) (Ad5f@syntax-dispatch A10d0@t '(_ any any . each-any)))) A10ce@e))) (set! Ad07@if-transformer (lambda (A10da@e A10db@r A10dc@mr) ((lambda (A10e0@t) ((lambda (A10e2@ls/false) (if A10e2@ls/false (apply (lambda (A10e4@e0 A10e5@e1 A10e6@e2) (list 'if (Ad81@chi-expr A10e4@e0 A10db@r A10dc@mr) (Ad81@chi-expr A10e5@e1 A10db@r A10dc@mr) (Ad81@chi-expr A10e6@e2 A10db@r A10dc@mr))) A10e2@ls/false) ((lambda (A10ea@t) ((lambda (A10ec@ls/false) (if A10ec@ls/false (apply (lambda (A10ee@e0 A10ef@e1) (list 'if (Ad81@chi-expr A10ee@e0 A10db@r A10dc@mr) (Ad81@chi-expr A10ef@e1 A10db@r A10dc@mr) (Aac2@Aa32@build-void))) A10ec@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A10ea@t))) (Ad5f@syntax-dispatch A10ea@t '(_ any any)))) A10e0@t))) (Ad5f@syntax-dispatch A10e0@t '(_ any any any)))) A10da@e))) (set! Ad09@and-transformer (lambda (A10f2@e A10f3@r A10f4@mr) ((lambda (A10f8@t) ((lambda (A10fa@ls/false) (if A10fa@ls/false (apply (lambda (A10fc@e*) (cons 'and (Ad7d@chi-expr* A10fc@e* A10f3@r A10f4@mr))) A10fa@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A10f8@t))) (Ad5f@syntax-dispatch A10f8@t '(_ . each-any)))) A10f2@e))) (set! Ad0b@or-transformer (lambda (A10fe@e A10ff@r A1100@mr) ((lambda (A1104@t) ((lambda (A1106@ls/false) (if A1106@ls/false (apply (lambda (A1108@e*) (cons 'or (Ad7d@chi-expr* A1108@e* A10ff@r A1100@mr))) A1106@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1104@t))) (Ad5f@syntax-dispatch A1104@t '(_ . each-any)))) A10fe@e))) (set! Ad0d@case-macro (lambda (A110a@e) ((lambda (A110d@build-last A110f@build-one) (begin (set! A110d@build-last (lambda (A1134@cls) ((lambda (A1136@t) ((lambda (A1138@ls/false) (if A1138@ls/false (apply (lambda (A113a@e A113b@e*) (cons 'begin (cons A113a@e A113b@e*))) A1138@ls/false) ((lambda (A113e@t) ((lambda (A1140@ls/false) (if A1140@ls/false (apply (lambda () (A110f@build-one A1134@cls '(if #f #f))) A1140@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A113e@t))) (Ad5f@syntax-dispatch A113e@t '_))) A1136@t))) (Ad5f@syntax-dispatch A1136@t '(#(scheme-id else) any . each-any)))) A1134@cls))) (set! A110f@build-one (lambda (A1126@cls A1127@k) ((lambda (A112a@t) ((lambda (A112c@ls/false) (if A112c@ls/false (apply (lambda (A112e@d* A112f@e A1130@e*) (list 'if (list 'memv 't (list 'quote A112e@d*)) (cons 'begin (cons A112f@e A1130@e*)) A1127@k)) A112c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A112a@t))) (Ad5f@syntax-dispatch A112a@t '(each-any any . each-any)))) A1126@cls))) ((lambda (A1110@t) ((lambda (A1112@ls/false) (if A1112@ls/false (apply (lambda (A1114@expr) (Ad15@bless (cons 'let (cons (list (list 't A1114@expr)) '((if #f #f)))))) A1112@ls/false) ((lambda (A1116@t) ((lambda (A1118@ls/false) (if A1118@ls/false (apply (lambda (A111a@expr A111b@cls A111c@cls*) (Ad15@bless (list 'let (list (list 't A111a@expr)) ((letrec ((A1120@f (lambda (A1122@cls A1123@cls*) (if (null? A1123@cls*) (A110d@build-last A1122@cls) (A110f@build-one A1122@cls (A1120@f (car A1123@cls*) (cdr A1123@cls*))))))) A1120@f) A111b@cls A111c@cls*)))) A1118@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1116@t))) (Ad5f@syntax-dispatch A1116@t '(_ any any . each-any)))) A1110@t))) (Ad5f@syntax-dispatch A1110@t '(_ any)))) A110a@e))) '#f '#f))) (set! Ad0f@quote-transformer (lambda (A1142@e A1143@r A1144@mr) ((lambda (A1148@t) ((lambda (A114a@ls/false) (if A114a@ls/false (apply (lambda (A114c@datum) (list 'quote (Ab6e@stx->datum A114c@datum))) A114a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1148@t))) (Ad5f@syntax-dispatch A1148@t '(_ any)))) A1142@e))) (set! Ad11@case-lambda-transformer (lambda (A114e@e A114f@r A1150@mr) ((lambda (A1154@t) ((lambda (A1156@ls/false) (if A1156@ls/false (apply (lambda (A1158@fmls* A1159@b* A115a@b**) (call-with-values (lambda () (Ad89@chi-lambda-clause* A114e@e A1158@fmls* (map cons A1159@b* A115a@b**) A114f@r A1150@mr)) (lambda (A1162@A115f A1163@A1161) ((lambda (A1166@body* A1167@fmls*) (Aabf@Aa00@build-case-lambda '#f A1167@fmls* A1166@body*)) A1163@A1161 A1162@A115f)))) A1156@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1154@t))) (Ad5f@syntax-dispatch A1154@t '(_ . #(each (any any . each-any)))))) A114e@e))) (set! Ad13@lambda-transformer (lambda (A116a@e A116b@r A116c@mr) ((lambda (A1170@t) ((lambda (A1172@ls/false) (if A1172@ls/false (apply (lambda (A1174@fmls A1175@b A1176@b*) (call-with-values (lambda () (Ad87@chi-lambda-clause A116a@e A1174@fmls (cons A1175@b A1176@b*) A116b@r A116c@mr)) (lambda (A117e@A117b A117f@A117d) ((lambda (A1182@body A1183@fmls) (Aabe@A9fe@build-lambda '#f A1183@fmls A1182@body)) A117f@A117d A117e@A117b)))) A1172@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1170@t))) (Ad5f@syntax-dispatch A1170@t '(_ any any . each-any)))) A116a@e))) (set! Ad15@bless (lambda (A1186@x) (Ab42@mkstx ((letrec ((A1188@f (lambda (A118a@x) (if (Ab26@stx? A118a@x) A118a@x (if (pair? A118a@x) (cons (A1188@f (car A118a@x)) (A1188@f (cdr A118a@x))) (if (symbol? A118a@x) (Ace9@scheme-stx A118a@x) (if (vector? A118a@x) (vector-map A1188@f A118a@x) A118a@x))))))) A1188@f) A1186@x) '() '() '()))) (set! Ad17@with-syntax-macro (lambda (A118c@e) ((lambda (A118e@t) ((lambda (A1190@ls/false) (if A1190@ls/false (apply (lambda (A1192@pat* A1193@expr* A1194@b A1195@b*) ((lambda (A119a@idn*) (begin (Ad85@verify-formals (map car A119a@idn*) A118c@e) ((lambda (A119c@t*) (Ad15@bless (list 'let (map list A119c@t* A1193@expr*) ((letrec ((A119e@f (lambda (A11a0@pat* A11a1@t*) (if (null? A11a0@pat*) (cons 'begin (cons '#f (cons A1194@b A1195@b*))) (list 'syntax-case (car A11a1@t*) '() (list (car A11a0@pat*) (A119e@f (cdr A11a0@pat*) (cdr A11a1@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car A11a0@pat*)) (car A11a1@t*)))))))) A119e@f) A1192@pat* A119c@t*)))) (Ae2d@generate-temporaries A1193@expr*)))) ((letrec ((A11a4@f (lambda (A11a6@pat*) (if (null? A11a6@pat*) '() (call-with-values (lambda () (Ad5d@convert-pattern (car A11a6@pat*) '())) (lambda (A11ac@A11a9 A11ad@A11ab) ((lambda (A11b0@idn* A11b1@pat) (append A11b0@idn* (A11a4@f (cdr A11a6@pat*)))) A11ad@A11ab A11ac@A11a9))))))) A11a4@f) A1192@pat*))) A1190@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A118e@t))) (Ad5f@syntax-dispatch A118e@t '(_ #(each (any any)) any . each-any)))) A118c@e))) (set! Ad19@invalid-fmls-error (lambda (A11b4@stx A11b5@fmls) ((lambda (A11b8@t) ((lambda (A11ba@ls/false) (if A11ba@ls/false (apply (lambda (A11bc@id* A11bd@last) ((letrec ((A11c0@f (lambda (A11c2@id*) (if (null? A11c2@id*) (values) (if (not (Ab5a@id? (car A11c2@id*))) (Ae3f@syntax-violation '#f '"not an identifier" A11b4@stx (car A11c2@id*)) (begin (A11c0@f (cdr A11c2@id*)) (if (Ab66@bound-id-member? (car A11c2@id*) (cdr A11c2@id*)) (Ae3f@syntax-violation '#f '"duplicate binding" A11b4@stx (car A11c2@id*)) (void)))))))) A11c0@f) (if (Ab5a@id? A11bd@last) (cons A11bd@last A11bc@id*) (if (Ab50@syntax-null? A11bd@last) A11bc@id* (Ae3f@syntax-violation '#f '"not an identifier" A11b4@stx A11bd@last))))) A11ba@ls/false) ((lambda (A11c4@t) ((lambda (A11c6@ls/false) (if A11c6@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"malformed binding form" A11b4@stx A11b5@fmls)) A11c6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A11c4@t))) (Ad5f@syntax-dispatch A11c4@t '_))) A11b8@t))) (Ad5f@syntax-dispatch A11b8@t '#(each+ any () any)))) A11b5@fmls))) (set! Ad1b@let-macro (lambda (A11c8@stx) ((lambda (A11ca@t) ((lambda (A11cc@ls/false) (if A11cc@ls/false (apply (lambda (A11ce@lhs* A11cf@rhs* A11d0@b A11d1@b*) (if (Ab62@valid-bound-ids? A11ce@lhs*) (Ad15@bless (cons (cons 'lambda (cons A11ce@lhs* (cons A11d0@b A11d1@b*))) A11cf@rhs*)) (Ad19@invalid-fmls-error A11c8@stx A11ce@lhs*))) A11cc@ls/false) ((lambda (A11d6@t) ((lambda (A11d8@ls/false) (if (and A11d8@ls/false (apply (lambda (A11da@f A11db@lhs* A11dc@rhs* A11dd@b A11de@b*) (Ab5a@id? A11da@f)) A11d8@ls/false)) (apply (lambda (A11e4@f A11e5@lhs* A11e6@rhs* A11e7@b A11e8@b*) (if (Ab62@valid-bound-ids? A11e5@lhs*) (Ad15@bless (cons (list 'letrec (list (list A11e4@f (cons 'lambda (cons A11e5@lhs* (cons A11e7@b A11e8@b*))))) A11e4@f) A11e6@rhs*)) (Ad19@invalid-fmls-error A11c8@stx A11e5@lhs*))) A11d8@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A11d6@t))) (Ad5f@syntax-dispatch A11d6@t '(_ any #(each (any any)) any . each-any)))) A11ca@t))) (Ad5f@syntax-dispatch A11ca@t '(_ #(each (any any)) any . each-any)))) A11c8@stx))) (set! Ad1d@let-values-macro (lambda (A11ee@stx) ((lambda (A11f1@rename A11f3@rename*) (begin (set! A11f1@rename (lambda (A1256@x A1257@old* A1258@new*) (begin (if (not (Ab5a@id? A1256@x)) (Ae3f@syntax-violation '#f '"not an indentifier" A11ee@stx A1256@x) (void)) (if (Ab66@bound-id-member? A1256@x A1257@old*) (Ae3f@syntax-violation '#f '"duplicate binding" A11ee@stx A1256@x) (void)) ((lambda (A125c@y) (values A125c@y (cons A1256@x A1257@old*) (cons A125c@y A1258@new*))) (gensym (Ae45@syntax->datum A1256@x)))))) (set! A11f3@rename* (lambda (A1244@x* A1245@old* A1246@new*) (if (null? A1244@x*) (values '() A1245@old* A1246@new*) (call-with-values (lambda () (A11f1@rename (car A1244@x*) A1245@old* A1246@new*)) (lambda (A124a@x A124b@old* A124c@new*) (call-with-values (lambda () (A11f3@rename* (cdr A1244@x*) A124b@old* A124c@new*)) (lambda (A1250@x* A1251@old* A1252@new*) (values (cons A124a@x A1250@x*) A1251@old* A1252@new*)))))))) ((lambda (A11f4@t) ((lambda (A11f6@ls/false) (if A11f6@ls/false (apply (lambda (A11f8@b A11f9@b*) (cons* (Ad15@bless 'let) '() A11f8@b A11f9@b*)) A11f6@ls/false) ((lambda (A11fc@t) ((lambda (A11fe@ls/false) (if A11fe@ls/false (apply (lambda (A1200@lhs* A1201@rhs* A1202@b A1203@b*) (Ad15@bless ((letrec ((A1208@f (lambda (A120a@lhs* A120b@rhs* A120c@old* A120d@new*) (if (null? A120a@lhs*) (cons 'let (cons (map list A120c@old* A120d@new*) (cons A1202@b A1203@b*))) ((lambda (A1212@t) ((lambda (A1214@ls/false) (if A1214@ls/false (apply (lambda (A1216@x*) (call-with-values (lambda () (A11f3@rename* A1216@x* A120c@old* A120d@new*)) (lambda (A121e@A1219 A121f@A121b A1220@A121d) ((lambda (A1224@new* A1225@old* A1226@y*) (list 'call-with-values (list 'lambda '() (car A120b@rhs*)) (list 'lambda A1226@y* (A1208@f (cdr A120a@lhs*) (cdr A120b@rhs*) A1225@old* A1224@new*)))) A1220@A121d A121f@A121b A121e@A1219)))) A1214@ls/false) ((lambda (A122a@t) ((lambda (A122c@ls/false) (if A122c@ls/false (apply (lambda (A122e@x* A122f@x) (call-with-values (lambda () (A11f1@rename A122f@x A120c@old* A120d@new*)) (lambda (A1232@y A1233@old* A1234@new*) (call-with-values (lambda () (A11f3@rename* A122e@x* A1233@old* A1234@new*)) (lambda (A1238@y* A1239@old* A123a@new*) (list 'call-with-values (list 'lambda '() (car A120b@rhs*)) (list 'lambda (append A1238@y* A1232@y) (A1208@f (cdr A120a@lhs*) (cdr A120b@rhs*) A1239@old* A123a@new*)))))))) A122c@ls/false) ((lambda (A123e@t) ((lambda (A1240@ls/false) (if A1240@ls/false (apply (lambda (A1242@others) (Ae3f@syntax-violation '#f '"malformed bindings" A11ee@stx A1242@others)) A1240@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A123e@t))) (Ad5f@syntax-dispatch A123e@t 'any))) A122a@t))) (Ad5f@syntax-dispatch A122a@t '#(each+ any () any)))) A1212@t))) (Ad5f@syntax-dispatch A1212@t 'each-any))) (car A120a@lhs*)))))) A1208@f) A1200@lhs* A1201@rhs* '() '()))) A11fe@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A11fc@t))) (Ad5f@syntax-dispatch A11fc@t '(_ #(each (any any)) any . each-any)))) A11f4@t))) (Ad5f@syntax-dispatch A11f4@t '(_ () any . each-any)))) A11ee@stx))) '#f '#f))) (set! Ad1f@let*-values-macro (lambda (A125e@stx) ((lambda (A1261@check) (begin (set! A1261@check (lambda (A1290@x*) (if (not (null? A1290@x*)) ((lambda (A1292@x) (begin (if (not (Ab5a@id? A1292@x)) (Ae3f@syntax-violation '#f '"not an identifier" A125e@stx A1292@x) (void)) (A1261@check (cdr A1290@x*)) (if (Ab66@bound-id-member? A1292@x (cdr A1290@x*)) (Ae3f@syntax-violation '#f '"duplicate identifier" A125e@stx A1292@x) (void)))) (car A1290@x*)) (void)))) ((lambda (A1262@t) ((lambda (A1264@ls/false) (if A1264@ls/false (apply (lambda (A1266@b A1267@b*) (cons* (Ad15@bless 'let) '() A1266@b A1267@b*)) A1264@ls/false) ((lambda (A126a@t) ((lambda (A126c@ls/false) (if A126c@ls/false (apply (lambda (A126e@lhs* A126f@rhs* A1270@b A1271@b*) (Ad15@bless ((letrec ((A1276@f (lambda (A1278@lhs* A1279@rhs*) (if (null? A1278@lhs*) (cons 'begin (cons A1270@b A1271@b*)) ((lambda (A127c@t) ((lambda (A127e@ls/false) (if A127e@ls/false (apply (lambda (A1280@x*) (begin (A1261@check A1280@x*) (list 'call-with-values (list 'lambda '() (car A1279@rhs*)) (list 'lambda A1280@x* (A1276@f (cdr A1278@lhs*) (cdr A1279@rhs*)))))) A127e@ls/false) ((lambda (A1282@t) ((lambda (A1284@ls/false) (if A1284@ls/false (apply (lambda (A1286@x* A1287@x) (begin (A1261@check (cons A1287@x A1286@x*)) (list 'call-with-values (list 'lambda '() (car A1279@rhs*)) (list 'lambda (append A1286@x* A1287@x) (A1276@f (cdr A1278@lhs*) (cdr A1279@rhs*)))))) A1284@ls/false) ((lambda (A128a@t) ((lambda (A128c@ls/false) (if A128c@ls/false (apply (lambda (A128e@others) (Ae3f@syntax-violation '#f '"malformed bindings" A125e@stx A128e@others)) A128c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A128a@t))) (Ad5f@syntax-dispatch A128a@t 'any))) A1282@t))) (Ad5f@syntax-dispatch A1282@t '#(each+ any () any)))) A127c@t))) (Ad5f@syntax-dispatch A127c@t 'each-any))) (car A1278@lhs*)))))) A1276@f) A126e@lhs* A126f@rhs*))) A126c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A126a@t))) (Ad5f@syntax-dispatch A126a@t '(_ #(each (any any)) any . each-any)))) A1262@t))) (Ad5f@syntax-dispatch A1262@t '(_ () any . each-any)))) A125e@stx))) '#f))) (set! Ad21@trace-lambda-macro (lambda (A1294@stx) ((lambda (A1296@t) ((lambda (A1298@ls/false) (if A1298@ls/false (apply (lambda (A129a@who A129b@fmls A129c@b A129d@b*) (if (Ab62@valid-bound-ids? A129b@fmls) (Ad15@bless (list 'make-traced-procedure (list 'quote A129a@who) (cons 'lambda (cons A129b@fmls (cons A129c@b A129d@b*))))) (Ad19@invalid-fmls-error A1294@stx A129b@fmls))) A1298@ls/false) ((lambda (A12a2@t) ((lambda (A12a4@ls/false) (if A12a4@ls/false (apply (lambda (A12a6@who A12a7@fmls A12a8@last A12a9@b A12aa@b*) (if (Ab62@valid-bound-ids? (cons A12a8@last A12a7@fmls)) (Ad15@bless (list 'make-traced-procedure (list 'quote A12a6@who) (cons 'lambda (cons (append A12a7@fmls A12a8@last) (cons A12a9@b A12aa@b*))))) (Ad19@invalid-fmls-error A1294@stx (append A12a7@fmls A12a8@last)))) A12a4@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A12a2@t))) (Ad5f@syntax-dispatch A12a2@t '(_ any #(each+ any () any) any . each-any)))) A1296@t))) (Ad5f@syntax-dispatch A1296@t '(_ any each-any any . each-any)))) A1294@stx))) (set! Ad23@trace-define-macro (lambda (A12b0@stx) ((lambda (A12b2@t) ((lambda (A12b4@ls/false) (if A12b4@ls/false (apply (lambda (A12b6@who A12b7@fmls A12b8@b A12b9@b*) (if (Ab62@valid-bound-ids? A12b7@fmls) (Ad15@bless (list 'define A12b6@who (list 'make-traced-procedure (list 'quote A12b6@who) (cons 'lambda (cons A12b7@fmls (cons A12b8@b A12b9@b*)))))) (Ad19@invalid-fmls-error A12b0@stx A12b7@fmls))) A12b4@ls/false) ((lambda (A12be@t) ((lambda (A12c0@ls/false) (if A12c0@ls/false (apply (lambda (A12c2@who A12c3@fmls A12c4@last A12c5@b A12c6@b*) (if (Ab62@valid-bound-ids? (cons A12c4@last A12c3@fmls)) (Ad15@bless (list 'define A12c2@who (list 'make-traced-procedure (list 'quote A12c2@who) (cons 'lambda (cons (append A12c3@fmls A12c4@last) (cons A12c5@b A12c6@b*)))))) (Ad19@invalid-fmls-error A12b0@stx (append A12c3@fmls A12c4@last)))) A12c0@ls/false) ((lambda (A12cc@t) ((lambda (A12ce@ls/false) (if A12ce@ls/false (apply (lambda (A12d0@who A12d1@expr) (if (Ab5a@id? A12d0@who) (Ad15@bless (list 'define A12d0@who (list 'let (list (list 'v A12d1@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote A12d0@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (Ae3f@syntax-violation '#f '"invalid name" A12b0@stx))) A12ce@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A12cc@t))) (Ad5f@syntax-dispatch A12cc@t '(_ any any)))) A12be@t))) (Ad5f@syntax-dispatch A12be@t '(_ (any . #(each+ any () any)) any . each-any)))) A12b2@t))) (Ad5f@syntax-dispatch A12b2@t '(_ (any . each-any) any . each-any)))) A12b0@stx))) (set! Ad25@trace-define-syntax-macro (lambda (A12d4@stx) ((lambda (A12d6@t) ((lambda (A12d8@ls/false) (if A12d8@ls/false (apply (lambda (A12da@who A12db@expr) (if (Ab5a@id? A12da@who) (Ad15@bless (list 'define-syntax A12da@who (list 'make-traced-macro (list 'quote A12da@who) A12db@expr))) (Ae3f@syntax-violation '#f '"invalid name" A12d4@stx))) A12d8@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A12d6@t))) (Ad5f@syntax-dispatch A12d6@t '(_ any any)))) A12d4@stx))) (set! Ad27@trace-let/rec-syntax (lambda (A12de@who) (lambda (A12e0@stx) ((lambda (A12e2@t) ((lambda (A12e4@ls/false) (if A12e4@ls/false (apply (lambda (A12e6@lhs* A12e7@rhs* A12e8@b A12e9@b*) (if (Ab62@valid-bound-ids? A12e6@lhs*) ((lambda (A12ee@rhs*) (Ad15@bless (cons A12de@who (cons (map list A12e6@lhs* A12ee@rhs*) (cons A12e8@b A12e9@b*))))) (map (lambda (A12f0@lhs A12f1@rhs) (list 'make-traced-macro (list 'quote A12f0@lhs) A12f1@rhs)) A12e6@lhs* A12e7@rhs*)) (Ad19@invalid-fmls-error A12e0@stx A12e6@lhs*))) A12e4@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A12e2@t))) (Ad5f@syntax-dispatch A12e2@t '(_ #(each (any any)) any . each-any)))) A12e0@stx)))) (set! Ad29@trace-let-syntax-macro (Ad27@trace-let/rec-syntax 'let-syntax)) (set! Ad2b@trace-letrec-syntax-macro (Ad27@trace-let/rec-syntax 'letrec-syntax)) (set! Ad2d@guard-macro (lambda (A12f4@x) ((lambda (A12f7@gen-clauses) (begin (set! A12f7@gen-clauses (lambda (A130e@con A130f@outerk A1310@clause*) ((lambda (A1315@f A1317@f*) (begin (set! A1315@f (lambda (A134e@x A134f@k) ((lambda (A1352@t) ((lambda (A1354@ls/false) (if A1354@ls/false (apply (lambda (A1356@e A1357@p) ((lambda (A135a@t) (list 'let (list (list A135a@t A1356@e)) (list 'if A135a@t (list A1357@p A135a@t) A134f@k))) (gensym))) A1354@ls/false) ((lambda (A135c@t) ((lambda (A135e@ls/false) (if A135e@ls/false (apply (lambda (A1360@e) ((lambda (A1362@t) (list 'let (list (list A1362@t A1360@e)) (list 'if A1362@t A1362@t A134f@k))) (gensym))) A135e@ls/false) ((lambda (A1364@t) ((lambda (A1366@ls/false) (if A1366@ls/false (apply (lambda (A1368@e A1369@v A136a@v*) (list 'if A1368@e (cons 'begin (cons A1369@v A136a@v*)) A134f@k)) A1366@ls/false) ((lambda (A136e@t) ((lambda (A1370@ls/false) (if A1370@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid guard clause" A134e@x)) A1370@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A136e@t))) (Ad5f@syntax-dispatch A136e@t '_))) A1364@t))) (Ad5f@syntax-dispatch A1364@t '(any any . each-any)))) A135c@t))) (Ad5f@syntax-dispatch A135c@t '(any)))) A1352@t))) (Ad5f@syntax-dispatch A1352@t '(any #(scheme-id =>) any)))) A134e@x))) (set! A1317@f* (lambda (A1324@x*) ((lambda (A1326@t) ((lambda (A1328@ls/false) (if A1328@ls/false (apply (lambda () ((lambda (A132a@g) (values (list A132a@g (list 'lambda '() (list 'raise-continuable A130e@con))) A132a@g)) (gensym))) A1328@ls/false) ((lambda (A132c@t) ((lambda (A132e@ls/false) (if A132e@ls/false (apply (lambda (A1330@e A1331@e*) (values (cons 'begin (cons A1330@e A1331@e*)) '#f)) A132e@ls/false) ((lambda (A1334@t) ((lambda (A1336@ls/false) (if A1336@ls/false (apply (lambda (A1338@cls A1339@cls*) (call-with-values (lambda () (A1317@f* A1339@cls*)) (lambda (A1340@A133d A1341@A133f) ((lambda (A1344@g A1345@e) (values (A1315@f A1338@cls A1345@e) A1344@g)) A1341@A133f A1340@A133d)))) A1336@ls/false) ((lambda (A1348@t) ((lambda (A134a@ls/false) (if A134a@ls/false (apply (lambda (A134c@others) (Ae3f@syntax-violation '#f '"invalid guard clause" A134c@others)) A134a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1348@t))) (Ad5f@syntax-dispatch A1348@t 'any))) A1334@t))) (Ad5f@syntax-dispatch A1334@t '(any . any)))) A132c@t))) (Ad5f@syntax-dispatch A132c@t '((#(scheme-id else) any . each-any))))) A1326@t))) (Ad5f@syntax-dispatch A1326@t '()))) A1324@x*))) (call-with-values (lambda () (A1317@f* A1310@clause*)) (lambda (A131c@A1319 A131d@A131b) ((lambda (A1320@raisek A1321@code) (if A1320@raisek (list (list 'call/cc (list 'lambda (list A1320@raisek) (list A130f@outerk (list 'lambda '() A1321@code))))) (list A130f@outerk (list 'lambda '() A1321@code)))) A131d@A131b A131c@A1319))))) '#f '#f))) ((lambda (A12f8@t) ((lambda (A12fa@ls/false) (if (and A12fa@ls/false (apply (lambda (A12fc@con A12fd@clause* A12fe@b A12ff@b*) (Ab5a@id? A12fc@con)) A12fa@ls/false)) (apply (lambda (A1304@con A1305@clause* A1306@b A1307@b*) ((lambda (A130c@outerk) (Ad15@bless (list (list 'call/cc (list 'lambda (list A130c@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list A1304@con) (A12f7@gen-clauses A1304@con A130c@outerk A1305@clause*)) (cons 'lambda (cons '() (cons A1306@b A1307@b*)))))))))) (gensym))) A12fa@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A12f8@t))) (Ad5f@syntax-dispatch A12f8@t '(_ (any . each-any) any . each-any)))) A12f4@x))) '#f))) (set! Ad2f@define-enumeration-macro (lambda (A1372@stx) ((lambda (A1375@set? A1377@remove-dups) (begin (set! A1375@set? (lambda (A138e@x) (or (null? A138e@x) (and (not (memq (car A138e@x) (cdr A138e@x))) (A1375@set? (cdr A138e@x)))))) (set! A1377@remove-dups (lambda (A138c@ls) (if (null? A138c@ls) '() (cons (car A138c@ls) (A1377@remove-dups (remq (car A138c@ls) (cdr A138c@ls))))))) ((lambda (A1378@t) ((lambda (A137a@ls/false) (if (and A137a@ls/false (apply (lambda (A137c@name A137d@id* A137e@maker) (and (Ab5a@id? A137c@name) (Ab5a@id? A137e@maker) (for-all Ab5a@id? A137d@id*))) A137a@ls/false)) (apply (lambda (A1382@name A1383@id* A1384@maker) ((lambda (A1388@name* A1389@mk) (Ad15@bless (list 'begin (list 'define A1389@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote A1388@name*)))) (list 'define-syntax A1382@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote A1388@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote A1382@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax A1384@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote A1384@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote A1388@name*)) (cons 'syntax-violation (cons (list 'quote A1384@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons A1389@mk '('(n* ...)))))))))))) (A1377@remove-dups (Ae45@syntax->datum A1383@id*)) (gensym))) A137a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1378@t))) (Ad5f@syntax-dispatch A1378@t '(_ any each-any any)))) A1372@stx))) '#f '#f))) (set! Ad31@time-macro (lambda (A1390@stx) ((lambda (A1392@t) ((lambda (A1394@ls/false) (if A1394@ls/false (apply (lambda (A1396@expr) (Ad15@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() A1396@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) A1394@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1392@t))) (Ad5f@syntax-dispatch A1392@t '(_ any)))) A1390@stx))) (set! Ad33@delay-macro (lambda (A1398@stx) ((lambda (A139a@t) ((lambda (A139c@ls/false) (if A139c@ls/false (apply (lambda (A139e@expr) (Ad15@bless (list 'make-promise (list 'lambda '() A139e@expr)))) A139c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A139a@t))) (Ad5f@syntax-dispatch A139a@t '(_ any)))) A1398@stx))) (set! Ad35@assert-macro (lambda (A13a0@stx) ((lambda (A13a2@t) ((lambda (A13a4@ls/false) (if A13a4@ls/false (apply (lambda (A13a6@expr) ((lambda (A13a8@pos) (Ad15@bless (list 'unless A13a6@expr (list 'assertion-error (list 'quote A13a6@expr) (list 'quote A13a8@pos))))) (or (Ae37@expression-position A13a0@stx) (Ae37@expression-position A13a6@expr)))) A13a4@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A13a2@t))) (Ad5f@syntax-dispatch A13a2@t '(_ any)))) A13a0@stx))) (set! Ad37@endianness-macro (lambda (A13aa@stx) ((lambda (A13ac@t) ((lambda (A13ae@ls/false) (if A13ae@ls/false (apply (lambda (A13b0@e) ((lambda (A13b2@t) (if (memv A13b2@t '(little)) (Ad15@bless ''little) (if (memv A13b2@t '(big)) (Ad15@bless ''big) (Ae3f@syntax-violation '#f '"endianness must be big or little" A13aa@stx)))) (Ae45@syntax->datum A13b0@e))) A13ae@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A13ac@t))) (Ad5f@syntax-dispatch A13ac@t '(_ any)))) A13aa@stx))) (set! Ad39@identifier-syntax-macro (lambda (A13b4@stx) ((lambda (A13b6@t) ((lambda (A13b8@ls/false) (if A13b8@ls/false (apply (lambda (A13ba@expr) (Ad15@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax A13ba@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax A13ba@expr) '((syntax (e* ...)))))))))) A13b8@ls/false) ((lambda (A13bc@t) ((lambda (A13be@ls/false) (if (and A13be@ls/false (apply (lambda (A13c0@id1 A13c1@expr1 A13c2@id2 A13c3@expr2 A13c4@expr3) (and (Ab5a@id? A13c0@id1) (Ab5a@id? A13c2@id2) (Ab5a@id? A13c3@expr2))) A13be@ls/false)) (apply (lambda (A13ca@id1 A13cb@expr1 A13cc@id2 A13cd@expr2 A13ce@expr3) (Ad15@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax A13cb@expr1)) (list (list 'set! 'id A13cd@expr2) (list 'syntax A13ce@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons A13cb@expr1 '(e* ...))))))))) A13be@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A13bc@t))) (Ad5f@syntax-dispatch A13bc@t '(_ (any any) ((#(scheme-id set!) any any) any))))) A13b6@t))) (Ad5f@syntax-dispatch A13b6@t '(_ any)))) A13b4@stx))) (set! Ad3b@do-macro (lambda (A13d4@stx) ((lambda (A13d7@bind) (begin (set! A13d7@bind (lambda (A13ee@x) ((lambda (A13f0@t) ((lambda (A13f2@ls/false) (if A13f2@ls/false (apply (lambda (A13f4@x A13f5@init) (list A13f4@x A13f5@init A13f4@x)) A13f2@ls/false) ((lambda (A13f8@t) ((lambda (A13fa@ls/false) (if A13fa@ls/false (apply (lambda (A13fc@x A13fd@init A13fe@step) (list A13fc@x A13fd@init A13fe@step)) A13fa@ls/false) ((lambda (A1402@t) ((lambda (A1404@ls/false) (if A1404@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid binding" A13d4@stx)) A1404@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1402@t))) (Ad5f@syntax-dispatch A1402@t '_))) A13f8@t))) (Ad5f@syntax-dispatch A13f8@t '(any any any)))) A13f0@t))) (Ad5f@syntax-dispatch A13f0@t '(any any)))) A13ee@x))) ((lambda (A13d8@t) ((lambda (A13da@ls/false) (if A13da@ls/false (apply (lambda (A13dc@binding* A13dd@test A13de@expr* A13df@command*) ((lambda (A13e4@t) ((lambda (A13e6@ls/false) (if A13e6@ls/false (apply (lambda (A13e8@x* A13e9@init* A13ea@step*) (if (Ab62@valid-bound-ids? A13e8@x*) (Ad15@bless (list 'letrec (list (list 'loop (list 'lambda A13e8@x* (list 'if A13dd@test (cons 'begin (cons '(if #f #f) A13de@expr*)) (cons 'begin (append A13df@command* (list (cons 'loop A13ea@step*)))))))) (cons 'loop A13e9@init*))) (Ae3f@syntax-violation '#f '"invalid bindings" A13d4@stx))) A13e6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A13e4@t))) (Ad5f@syntax-dispatch A13e4@t '#(each (any any any))))) (map A13d7@bind A13dc@binding*))) A13da@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A13d8@t))) (Ad5f@syntax-dispatch A13d8@t '(_ each-any (any . each-any) . each-any)))) A13d4@stx))) '#f))) (set! Ad3d@let*-macro (lambda (A1406@stx) ((lambda (A1408@t) ((lambda (A140a@ls/false) (if (and A140a@ls/false (apply (lambda (A140c@lhs* A140d@rhs* A140e@b A140f@b*) (for-all Ab5a@id? A140c@lhs*)) A140a@ls/false)) (apply (lambda (A1414@lhs* A1415@rhs* A1416@b A1417@b*) (Ad15@bless ((letrec ((A141c@f (lambda (A141e@x*) (if (null? A141e@x*) (cons 'let (cons '() (cons A1416@b A1417@b*))) (list 'let (list (car A141e@x*)) (A141c@f (cdr A141e@x*))))))) A141c@f) (map list A1414@lhs* A1415@rhs*)))) A140a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1408@t))) (Ad5f@syntax-dispatch A1408@t '(_ #(each (any any)) any . each-any)))) A1406@stx))) (set! Ad3f@or-macro (lambda (A1420@stx) ((lambda (A1422@t) ((lambda (A1424@ls/false) (if A1424@ls/false (apply (lambda () '#f) A1424@ls/false) ((lambda (A1426@t) ((lambda (A1428@ls/false) (if A1428@ls/false (apply (lambda (A142a@e A142b@e*) (Ad15@bless ((letrec ((A142e@f (lambda (A1430@e A1431@e*) (if (null? A1431@e*) (list 'begin '#f A1430@e) (list 'let (list (list 't A1430@e)) (list 'if 't 't (A142e@f (car A1431@e*) (cdr A1431@e*)))))))) A142e@f) A142a@e A142b@e*))) A1428@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1426@t))) (Ad5f@syntax-dispatch A1426@t '(_ any . each-any)))) A1422@t))) (Ad5f@syntax-dispatch A1422@t '(_)))) A1420@stx))) (set! Ad41@and-macro (lambda (A1434@stx) ((lambda (A1436@t) ((lambda (A1438@ls/false) (if A1438@ls/false (apply (lambda () '#t) A1438@ls/false) ((lambda (A143a@t) ((lambda (A143c@ls/false) (if A143c@ls/false (apply (lambda (A143e@e A143f@e*) (Ad15@bless ((letrec ((A1442@f (lambda (A1444@e A1445@e*) (if (null? A1445@e*) (list 'begin '#f A1444@e) (cons 'if (cons A1444@e (cons (A1442@f (car A1445@e*) (cdr A1445@e*)) '(#f)))))))) A1442@f) A143e@e A143f@e*))) A143c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A143a@t))) (Ad5f@syntax-dispatch A143a@t '(_ any . each-any)))) A1436@t))) (Ad5f@syntax-dispatch A1436@t '(_)))) A1434@stx))) (set! Ad43@cond-macro (lambda (A1448@stx) ((lambda (A144a@t) ((lambda (A144c@ls/false) (if A144c@ls/false (apply (lambda (A144e@cls A144f@cls*) (Ad15@bless ((letrec ((A1452@f (lambda (A1454@cls A1455@cls*) (if (null? A1455@cls*) ((lambda (A1458@t) ((lambda (A145a@ls/false) (if A145a@ls/false (apply (lambda (A145c@e A145d@e*) (cons 'begin (cons A145c@e A145d@e*))) A145a@ls/false) ((lambda (A1460@t) ((lambda (A1462@ls/false) (if A1462@ls/false (apply (lambda (A1464@e A1465@p) (list 'let (list (list 't A1464@e)) (list 'if 't (cons A1465@p '(t))))) A1462@ls/false) ((lambda (A1468@t) ((lambda (A146a@ls/false) (if A146a@ls/false (apply (lambda (A146c@e) (cons 'or (cons A146c@e '((if #f #f))))) A146a@ls/false) ((lambda (A146e@t) ((lambda (A1470@ls/false) (if A1470@ls/false (apply (lambda (A1472@e A1473@e*) (list 'if A1472@e (cons 'begin A1473@e*))) A1470@ls/false) ((lambda (A1476@t) ((lambda (A1478@ls/false) (if A1478@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid last clause" A1448@stx)) A1478@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1476@t))) (Ad5f@syntax-dispatch A1476@t '_))) A146e@t))) (Ad5f@syntax-dispatch A146e@t '(any . each-any)))) A1468@t))) (Ad5f@syntax-dispatch A1468@t '(any)))) A1460@t))) (Ad5f@syntax-dispatch A1460@t '(any #(scheme-id =>) any)))) A1458@t))) (Ad5f@syntax-dispatch A1458@t '(#(scheme-id else) any . each-any)))) A1454@cls) ((lambda (A147a@t) ((lambda (A147c@ls/false) (if A147c@ls/false (apply (lambda (A147e@e A147f@e*) (Ae3f@syntax-violation '#f '"incorrect position of keyword else" A1448@stx)) A147c@ls/false) ((lambda (A1482@t) ((lambda (A1484@ls/false) (if A1484@ls/false (apply (lambda (A1486@e A1487@p) (list 'let (list (list 't A1486@e)) (list 'if 't (cons A1487@p '(t)) (A1452@f (car A1455@cls*) (cdr A1455@cls*))))) A1484@ls/false) ((lambda (A148a@t) ((lambda (A148c@ls/false) (if A148c@ls/false (apply (lambda (A148e@e) (list 'or A148e@e (A1452@f (car A1455@cls*) (cdr A1455@cls*)))) A148c@ls/false) ((lambda (A1490@t) ((lambda (A1492@ls/false) (if A1492@ls/false (apply (lambda (A1494@e A1495@e*) (list 'if A1494@e (cons 'begin A1495@e*) (A1452@f (car A1455@cls*) (cdr A1455@cls*)))) A1492@ls/false) ((lambda (A1498@t) ((lambda (A149a@ls/false) (if A149a@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid last clause" A1448@stx)) A149a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1498@t))) (Ad5f@syntax-dispatch A1498@t '_))) A1490@t))) (Ad5f@syntax-dispatch A1490@t '(any . each-any)))) A148a@t))) (Ad5f@syntax-dispatch A148a@t '(any)))) A1482@t))) (Ad5f@syntax-dispatch A1482@t '(any #(scheme-id =>) any)))) A147a@t))) (Ad5f@syntax-dispatch A147a@t '(#(scheme-id else) any . each-any)))) A1454@cls))))) A1452@f) A144e@cls A144f@cls*))) A144c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A144a@t))) (Ad5f@syntax-dispatch A144a@t '(_ any . each-any)))) A1448@stx))) (set! Ad45@do-include (lambda (A149c@stx A149d@id A149e@filename) ((lambda (A14a2@filename) (begin (if (not (and (string? A14a2@filename) (Ab5a@id? A149d@id))) (Ae3f@syntax-violation '#f '"invalid syntax" A149c@stx) (void)) (cons (Ad15@bless 'begin) (with-input-from-file A14a2@filename (lambda () ((letrec ((A14a4@f (lambda (A14a6@ls) ((lambda (A14a8@x) (if (eof-object? A14a8@x) (reverse A14a6@ls) (A14a4@f (cons (Ab3a@datum->stx A149d@id A14a8@x) A14a6@ls)))) (A6ac@A57e@read-annotated))))) A14a4@f) '())))))) (Ab6e@stx->datum A149e@filename)))) (set! Ad47@include-macro (lambda (A14aa@e) ((lambda (A14ac@t) ((lambda (A14ae@ls/false) (if A14ae@ls/false (apply (lambda (A14b0@id A14b1@filename) (Ad45@do-include A14aa@e A14b0@id A14b1@filename)) A14ae@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A14ac@t))) (Ad5f@syntax-dispatch A14ac@t '(any any)))) A14aa@e))) (set! Ad49@include-into-macro (lambda (A14b4@e) ((lambda (A14b6@t) ((lambda (A14b8@ls/false) (if A14b8@ls/false (apply (lambda (A14ba@id A14bb@filename) (Ad45@do-include A14b4@e A14ba@id A14bb@filename)) A14b8@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A14b6@t))) (Ad5f@syntax-dispatch A14b6@t '(_ any any)))) A14b4@e))) (set! Ad4b@syntax-rules-macro (lambda (A14be@e) ((lambda (A14c0@t) ((lambda (A14c2@ls/false) (if A14c2@ls/false (apply (lambda (A14c4@lits A14c5@pat* A14c6@tmp*) (begin (Ad65@verify-literals A14c4@lits A14be@e) (Ad15@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons A14c4@lits (map (lambda (A14ca@pat A14cb@tmp) ((lambda (A14ce@t) ((lambda (A14d0@ls/false) (if A14d0@ls/false (apply (lambda (A14d2@rest) (list (cons 'g A14d2@rest) (list 'syntax A14cb@tmp))) A14d0@ls/false) ((lambda (A14d4@t) ((lambda (A14d6@ls/false) (if A14d6@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid syntax-rules pattern" A14be@e A14ca@pat)) A14d6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A14d4@t))) (Ad5f@syntax-dispatch A14d4@t '_))) A14ce@t))) (Ad5f@syntax-dispatch A14ce@t '(_ . any)))) A14ca@pat)) A14c5@pat* A14c6@tmp*)))))))) A14c2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A14c0@t))) (Ad5f@syntax-dispatch A14c0@t '(_ each-any . #(each (any any)))))) A14be@e))) (set! Ad4d@quasiquote-macro ((lambda () ((lambda (A14d9@datum A14f5@quasicons* A14f7@quasicons A14f9@quasiappend A14fb@quasivector A14fd@vquasi A14ff@quasi) (begin (set! A14d9@datum (lambda (A15da@x) (list (Ace9@scheme-stx 'quote) (Ab42@mkstx A15da@x '() '() '())))) (set! A14f5@quasicons* (lambda (A15d2@x A15d3@y) ((letrec ((A15d6@f (lambda (A15d8@x) (if (null? A15d8@x) A15d3@y (A14f7@quasicons (car A15d8@x) (A15d6@f (cdr A15d8@x))))))) A15d6@f) A15d2@x))) (set! A14f7@quasicons (lambda (A15ac@x A15ad@y) ((lambda (A15b0@t) ((lambda (A15b2@ls/false) (if A15b2@ls/false (apply (lambda (A15b4@dy) ((lambda (A15b6@t) ((lambda (A15b8@ls/false) (if A15b8@ls/false (apply (lambda (A15ba@dx) (list (Ace9@scheme-stx 'quote) (cons A15ba@dx A15b4@dy))) A15b8@ls/false) ((lambda (A15bc@t) ((lambda (A15be@ls/false) (if A15be@ls/false (apply (lambda () ((lambda (A15c0@t) ((lambda (A15c2@ls/false) (if A15c2@ls/false (apply (lambda () (list (Ace9@scheme-stx 'list) A15ac@x)) A15c2@ls/false) ((lambda (A15c4@t) ((lambda (A15c6@ls/false) (if A15c6@ls/false (apply (lambda () (list (Ace9@scheme-stx 'cons) A15ac@x A15ad@y)) A15c6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A15c4@t))) (Ad5f@syntax-dispatch A15c4@t '_))) A15c0@t))) (Ad5f@syntax-dispatch A15c0@t '()))) A15b4@dy)) A15be@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A15bc@t))) (Ad5f@syntax-dispatch A15bc@t '_))) A15b6@t))) (Ad5f@syntax-dispatch A15b6@t '(#(scheme-id quote) any)))) A15ac@x)) A15b2@ls/false) ((lambda (A15c8@t) ((lambda (A15ca@ls/false) (if A15ca@ls/false (apply (lambda (A15cc@stuff) (cons* (Ace9@scheme-stx 'list) A15ac@x A15cc@stuff)) A15ca@ls/false) ((lambda (A15ce@t) ((lambda (A15d0@ls/false) (if A15d0@ls/false (apply (lambda () (list (Ace9@scheme-stx 'cons) A15ac@x A15ad@y)) A15d0@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A15ce@t))) (Ad5f@syntax-dispatch A15ce@t '_))) A15c8@t))) (Ad5f@syntax-dispatch A15c8@t '(#(scheme-id list) . each-any)))) A15b0@t))) (Ad5f@syntax-dispatch A15b0@t '(#(scheme-id quote) any)))) A15ad@y))) (set! A14f9@quasiappend (lambda (A1592@x A1593@y) ((lambda (A1596@ls) (if (null? A1596@ls) (list (Ace9@scheme-stx 'quote) '()) (if (null? (cdr A1596@ls)) (car A1596@ls) (cons* (Ace9@scheme-stx 'append) A1596@ls)))) ((letrec ((A1598@f (lambda (A159a@x) (if (null? A159a@x) ((lambda (A159c@t) ((lambda (A159e@ls/false) (if A159e@ls/false (apply (lambda () '()) A159e@ls/false) ((lambda (A15a0@t) ((lambda (A15a2@ls/false) (if A15a2@ls/false (apply (lambda () (list A1593@y)) A15a2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A15a0@t))) (Ad5f@syntax-dispatch A15a0@t '_))) A159c@t))) (Ad5f@syntax-dispatch A159c@t '(#(scheme-id quote) ())))) A1593@y) ((lambda (A15a4@t) ((lambda (A15a6@ls/false) (if A15a6@ls/false (apply (lambda () (A1598@f (cdr A159a@x))) A15a6@ls/false) ((lambda (A15a8@t) ((lambda (A15aa@ls/false) (if A15aa@ls/false (apply (lambda () (cons (car A159a@x) (A1598@f (cdr A159a@x)))) A15aa@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A15a8@t))) (Ad5f@syntax-dispatch A15a8@t '_))) A15a4@t))) (Ad5f@syntax-dispatch A15a4@t '(#(scheme-id quote) ())))) (car A159a@x)))))) A1598@f) A1592@x)))) (set! A14fb@quasivector (lambda (A1560@x) ((lambda (A1562@pat-x) ((lambda (A1564@t) ((lambda (A1566@ls/false) (if A1566@ls/false (apply (lambda (A1568@x*) (list (Ace9@scheme-stx 'quote) (list->vector A1568@x*))) A1566@ls/false) ((lambda (A156a@t) ((lambda (A156c@ls/false) (if A156c@ls/false (apply (lambda () ((letrec ((A156e@f (lambda (A1570@x A1571@k) ((lambda (A1574@t) ((lambda (A1576@ls/false) (if A1576@ls/false (apply (lambda (A1578@x*) (A1571@k (map (lambda (A157a@x) (list (Ace9@scheme-stx 'quote) A157a@x)) A1578@x*))) A1576@ls/false) ((lambda (A157c@t) ((lambda (A157e@ls/false) (if A157e@ls/false (apply (lambda (A1580@x*) (A1571@k A1580@x*)) A157e@ls/false) ((lambda (A1582@t) ((lambda (A1584@ls/false) (if A1584@ls/false (apply (lambda (A1586@x A1587@y) (A156e@f A1587@y (lambda (A158a@ls) (A1571@k (cons A1586@x A158a@ls))))) A1584@ls/false) ((lambda (A158c@t) ((lambda (A158e@ls/false) (if A158e@ls/false (apply (lambda () (list (Ace9@scheme-stx 'list->vector) A1562@pat-x)) A158e@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A158c@t))) (Ad5f@syntax-dispatch A158c@t '_))) A1582@t))) (Ad5f@syntax-dispatch A1582@t '(#(scheme-id cons) any any)))) A157c@t))) (Ad5f@syntax-dispatch A157c@t '(#(scheme-id list) . each-any)))) A1574@t))) (Ad5f@syntax-dispatch A1574@t '(#(scheme-id quote) each-any)))) A1570@x)))) A156e@f) A1560@x (lambda (A1590@ls) (cons* (Ace9@scheme-stx 'vector) A1590@ls)))) A156c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A156a@t))) (Ad5f@syntax-dispatch A156a@t '_))) A1564@t))) (Ad5f@syntax-dispatch A1564@t '(#(scheme-id quote) each-any)))) A1562@pat-x)) A1560@x))) (set! A14fd@vquasi (lambda (A153e@p A153f@lev) ((lambda (A1542@t) ((lambda (A1544@ls/false) (if A1544@ls/false (apply (lambda (A1546@p A1547@q) ((lambda (A154a@t) ((lambda (A154c@ls/false) (if A154c@ls/false (apply (lambda (A154e@p) (if (= A153f@lev '0) (A14f5@quasicons* A154e@p (A14fd@vquasi A1547@q A153f@lev)) (A14f7@quasicons (A14f7@quasicons (A14d9@datum 'unquote) (A14ff@quasi A154e@p (- A153f@lev '1))) (A14fd@vquasi A1547@q A153f@lev)))) A154c@ls/false) ((lambda (A1550@t) ((lambda (A1552@ls/false) (if A1552@ls/false (apply (lambda (A1554@p) (if (= A153f@lev '0) (A14f9@quasiappend A1554@p (A14fd@vquasi A1547@q A153f@lev)) (A14f7@quasicons (A14f7@quasicons (A14d9@datum 'unquote-splicing) (A14ff@quasi A1554@p (- A153f@lev '1))) (A14fd@vquasi A1547@q A153f@lev)))) A1552@ls/false) ((lambda (A1556@t) ((lambda (A1558@ls/false) (if A1558@ls/false (apply (lambda (A155a@p) (A14f7@quasicons (A14ff@quasi A155a@p A153f@lev) (A14fd@vquasi A1547@q A153f@lev))) A1558@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1556@t))) (Ad5f@syntax-dispatch A1556@t 'any))) A1550@t))) (Ad5f@syntax-dispatch A1550@t '(#(scheme-id unquote-splicing) . each-any)))) A154a@t))) (Ad5f@syntax-dispatch A154a@t '(#(scheme-id unquote) . each-any)))) A1546@p)) A1544@ls/false) ((lambda (A155c@t) ((lambda (A155e@ls/false) (if A155e@ls/false (apply (lambda () (list (Ace9@scheme-stx 'quote) '())) A155e@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A155c@t))) (Ad5f@syntax-dispatch A155c@t '()))) A1542@t))) (Ad5f@syntax-dispatch A1542@t '(any . any)))) A153e@p))) (set! A14ff@quasi (lambda (A1508@p A1509@lev) ((lambda (A150c@t) ((lambda (A150e@ls/false) (if A150e@ls/false (apply (lambda (A1510@p) (if (= A1509@lev '0) A1510@p (A14f7@quasicons (A14d9@datum 'unquote) (A14ff@quasi (list A1510@p) (- A1509@lev '1))))) A150e@ls/false) ((lambda (A1512@t) ((lambda (A1514@ls/false) (if A1514@ls/false (apply (lambda (A1516@p A1517@q) (if (= A1509@lev '0) (A14f5@quasicons* A1516@p (A14ff@quasi A1517@q A1509@lev)) (A14f7@quasicons (A14f7@quasicons (A14d9@datum 'unquote) (A14ff@quasi A1516@p (- A1509@lev '1))) (A14ff@quasi A1517@q A1509@lev)))) A1514@ls/false) ((lambda (A151a@t) ((lambda (A151c@ls/false) (if A151c@ls/false (apply (lambda (A151e@p A151f@q) (if (= A1509@lev '0) (A14f9@quasiappend A151e@p (A14ff@quasi A151f@q A1509@lev)) (A14f7@quasicons (A14f7@quasicons (A14d9@datum 'unquote-splicing) (A14ff@quasi A151e@p (- A1509@lev '1))) (A14ff@quasi A151f@q A1509@lev)))) A151c@ls/false) ((lambda (A1522@t) ((lambda (A1524@ls/false) (if A1524@ls/false (apply (lambda (A1526@p) (A14f7@quasicons (A14d9@datum 'quasiquote) (A14ff@quasi (list A1526@p) (+ A1509@lev '1)))) A1524@ls/false) ((lambda (A1528@t) ((lambda (A152a@ls/false) (if A152a@ls/false (apply (lambda (A152c@p A152d@q) (A14f7@quasicons (A14ff@quasi A152c@p A1509@lev) (A14ff@quasi A152d@q A1509@lev))) A152a@ls/false) ((lambda (A1530@t) ((lambda (A1532@ls/false) (if (and A1532@ls/false (apply (lambda (A1534@x) (not (Ab26@stx? A1534@x))) A1532@ls/false)) (apply (lambda (A1536@x) (A14fb@quasivector (A14fd@vquasi A1536@x A1509@lev))) A1532@ls/false) ((lambda (A1538@t) ((lambda (A153a@ls/false) (if A153a@ls/false (apply (lambda (A153c@p) (list (Ace9@scheme-stx 'quote) A153c@p)) A153a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1538@t))) (Ad5f@syntax-dispatch A1538@t 'any))) A1530@t))) (Ad5f@syntax-dispatch A1530@t '#(vector each-any)))) A1528@t))) (Ad5f@syntax-dispatch A1528@t '(any . any)))) A1522@t))) (Ad5f@syntax-dispatch A1522@t '(#(scheme-id quasiquote) any)))) A151a@t))) (Ad5f@syntax-dispatch A151a@t '((#(scheme-id unquote-splicing) . each-any) . any)))) A1512@t))) (Ad5f@syntax-dispatch A1512@t '((#(scheme-id unquote) . each-any) . any)))) A150c@t))) (Ad5f@syntax-dispatch A150c@t '(#(scheme-id unquote) any)))) A1508@p))) (lambda (A1500@x) ((lambda (A1502@t) ((lambda (A1504@ls/false) (if A1504@ls/false (apply (lambda (A1506@e) (A14ff@quasi A1506@e '0)) A1504@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1502@t))) (Ad5f@syntax-dispatch A1502@t '(_ any)))) A1500@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! Ad4f@quasisyntax-macro ((lambda () ((lambda (A15dd@quasi) (begin (set! A15dd@quasi (lambda (A15f8@p A15f9@lev) ((lambda (A15fc@t) ((lambda (A15fe@ls/false) (if A15fe@ls/false (apply (lambda (A1600@p) (if (= A15f9@lev '0) ((lambda (A1602@g) (values (list A1602@g) (list A1600@p) A1602@g)) (gensym)) (call-with-values (lambda () (A15dd@quasi A1600@p (- A15f9@lev '1))) (lambda (A160a@A1605 A160b@A1607 A160c@A1609) ((lambda (A1610@p A1611@rhs* A1612@lhs*) (values A1612@lhs* A1611@rhs* (list 'unsyntax A1610@p))) A160c@A1609 A160b@A1607 A160a@A1605))))) A15fe@ls/false) ((lambda (A1616@t) ((lambda (A1618@ls/false) (if (and A1618@ls/false (apply (lambda () (= A15f9@lev '0)) A1618@ls/false)) (apply (lambda () (Ae3f@syntax-violation '#f '"incorrect use of unsyntax" A15f8@p)) A1618@ls/false) ((lambda (A161a@t) ((lambda (A161c@ls/false) (if A161c@ls/false (apply (lambda (A161e@p* A161f@q) (call-with-values (lambda () (A15dd@quasi A161f@q A15f9@lev)) (lambda (A1628@A1623 A1629@A1625 A162a@A1627) ((lambda (A162e@q A162f@rhs* A1630@lhs*) (if (= A15f9@lev '0) ((lambda (A1634@g*) (values (append A1634@g* A1630@lhs*) (append A161e@p* A162f@rhs*) (append A1634@g* A162e@q))) (map (lambda (A1636@x) (gensym)) A161e@p*)) (call-with-values (lambda () (A15dd@quasi A161e@p* (- A15f9@lev '1))) (lambda (A163e@A1639 A163f@A163b A1640@A163d) ((lambda (A1644@p* A1645@rhs2* A1646@lhs2*) (values (append A1646@lhs2* A1630@lhs*) (append A1645@rhs2* A162f@rhs*) (cons (cons 'unsyntax A1644@p*) A162e@q))) A1640@A163d A163f@A163b A163e@A1639))))) A162a@A1627 A1629@A1625 A1628@A1623)))) A161c@ls/false) ((lambda (A164a@t) ((lambda (A164c@ls/false) (if A164c@ls/false (apply (lambda (A164e@p* A164f@q) (call-with-values (lambda () (A15dd@quasi A164f@q A15f9@lev)) (lambda (A1658@A1653 A1659@A1655 A165a@A1657) ((lambda (A165e@q A165f@rhs* A1660@lhs*) (if (= A15f9@lev '0) ((lambda (A1664@g*) (values (append (map (lambda (A1666@g) (cons A1666@g '(...))) A1664@g*) A1660@lhs*) (append A164e@p* A165f@rhs*) (append (apply append (map (lambda (A1668@g) (cons A1668@g '(...))) A1664@g*)) A165e@q))) (map (lambda (A166a@x) (gensym)) A164e@p*)) (call-with-values (lambda () (A15dd@quasi A164e@p* (- A15f9@lev '1))) (lambda (A1672@A166d A1673@A166f A1674@A1671) ((lambda (A1678@p* A1679@rhs2* A167a@lhs2*) (values (append A167a@lhs2* A1660@lhs*) (append A1679@rhs2* A165f@rhs*) (cons (cons 'unsyntax-splicing A1678@p*) A165e@q))) A1674@A1671 A1673@A166f A1672@A166d))))) A165a@A1657 A1659@A1655 A1658@A1653)))) A164c@ls/false) ((lambda (A167e@t) ((lambda (A1680@ls/false) (if (and A1680@ls/false (apply (lambda () (= A15f9@lev '0)) A1680@ls/false)) (apply (lambda () (Ae3f@syntax-violation '#f '"incorrect use of unsyntax-splicing" A15f8@p)) A1680@ls/false) ((lambda (A1682@t) ((lambda (A1684@ls/false) (if A1684@ls/false (apply (lambda (A1686@p) (call-with-values (lambda () (A15dd@quasi A1686@p (+ A15f9@lev '1))) (lambda (A168e@A1689 A168f@A168b A1690@A168d) ((lambda (A1694@p A1695@rhs* A1696@lhs*) (values A1696@lhs* A1695@rhs* (list 'quasisyntax A1694@p))) A1690@A168d A168f@A168b A168e@A1689)))) A1684@ls/false) ((lambda (A169a@t) ((lambda (A169c@ls/false) (if A169c@ls/false (apply (lambda (A169e@p A169f@q) (call-with-values (lambda () (A15dd@quasi A169e@p A15f9@lev)) (lambda (A16ae@A16a3 A16af@A16a5 A16b0@A16a7) (call-with-values (lambda () (A15dd@quasi A169f@q A15f9@lev)) (lambda (A16b4@A16a9 A16b5@A16ab A16b6@A16ad) ((lambda (A16ba@q A16bb@rhs2* A16bc@lhs2* A16bd@p A16be@rhs* A16bf@lhs*) (values (append A16bc@lhs2* A16bf@lhs*) (append A16bb@rhs2* A16be@rhs*) (cons A16bd@p A16ba@q))) A16b6@A16ad A16b5@A16ab A16b4@A16a9 A16b0@A16a7 A16af@A16a5 A16ae@A16a3)))))) A169c@ls/false) ((lambda (A16c6@t) ((lambda (A16c8@ls/false) (if A16c8@ls/false (apply (lambda (A16ca@x*) (call-with-values (lambda () (A15dd@quasi A16ca@x* A15f9@lev)) (lambda (A16d2@A16cd A16d3@A16cf A16d4@A16d1) ((lambda (A16d8@x* A16d9@rhs* A16da@lhs*) (values A16da@lhs* A16d9@rhs* (list->vector A16d8@x*))) A16d4@A16d1 A16d3@A16cf A16d2@A16cd)))) A16c8@ls/false) ((lambda (A16de@t) ((lambda (A16e0@ls/false) (if A16e0@ls/false (apply (lambda () (values '() '() A15f8@p)) A16e0@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A16de@t))) (Ad5f@syntax-dispatch A16de@t '_))) A16c6@t))) (Ad5f@syntax-dispatch A16c6@t '#(vector each-any)))) A169a@t))) (Ad5f@syntax-dispatch A169a@t '(any . any)))) A1682@t))) (Ad5f@syntax-dispatch A1682@t '(#(scheme-id quasisyntax) any)))) A167e@t))) (Ad5f@syntax-dispatch A167e@t '#(scheme-id unsyntax-splicing)))) A164a@t))) (Ad5f@syntax-dispatch A164a@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) A161a@t))) (Ad5f@syntax-dispatch A161a@t '((#(scheme-id unsyntax) . each-any) . any)))) A1616@t))) (Ad5f@syntax-dispatch A1616@t '#(scheme-id unsyntax)))) A15fc@t))) (Ad5f@syntax-dispatch A15fc@t '(#(scheme-id unsyntax) any)))) A15f8@p))) (lambda (A15de@x) ((lambda (A15e0@t) ((lambda (A15e2@ls/false) (if A15e2@ls/false (apply (lambda (A15e4@e) (call-with-values (lambda () (A15dd@quasi A15e4@e '0)) (lambda (A15ec@A15e7 A15ed@A15e9 A15ee@A15eb) ((lambda (A15f2@v A15f3@rhs* A15f4@lhs*) (Ad15@bless (list 'syntax-case (cons 'list A15f3@rhs*) '() (list A15f4@lhs* (list 'syntax A15f2@v))))) A15ee@A15eb A15ed@A15e9 A15ec@A15e7)))) A15e2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A15e0@t))) (Ad5f@syntax-dispatch A15e0@t '(_ any)))) A15de@x)))) '#f)))) (set! Ad51@define-struct-macro (lambda (A16e2@stx) (Ae3f@syntax-violation '#f '"define-struct not supported" A16e2@stx))) (set! Ad53@define-record-type-macro (lambda (A16e4@x) ((lambda (A16e7@id A16e9@get-record-name A16eb@get-record-constructor-name A16ed@get-record-predicate-name A16ef@get-clause A16f1@foo-rtd-code A16f3@parent-rtd-code A16f5@parent-rcd-code A16f7@foo-rcd-code A16f9@get-protocol-code A16fb@get-fields A16fd@get-mutator-indices A16ff@get-mutators A1701@get-accessors A1703@enumerate A1705@do-define-record A1707@verify-clauses) (begin (set! A16e7@id (lambda (A18da@ctxt . A18dc@str*) (Ae43@datum->syntax A18da@ctxt (string->symbol (apply string-append (map (lambda (A18de@x) (if (symbol? A18de@x) (symbol->string A18de@x) (if (string? A18de@x) A18de@x (assertion-violation 'define-record-type '"BUG")))) A18dc@str*)))))) (set! A16e9@get-record-name (lambda (A18c8@spec) ((lambda (A18ca@t) ((lambda (A18cc@ls/false) (if A18cc@ls/false (apply (lambda (A18ce@foo A18cf@make-foo A18d0@foo?) A18ce@foo) A18cc@ls/false) ((lambda (A18d4@t) ((lambda (A18d6@ls/false) (if A18d6@ls/false (apply (lambda (A18d8@foo) A18d8@foo) A18d6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A18d4@t))) (Ad5f@syntax-dispatch A18d4@t 'any))) A18ca@t))) (Ad5f@syntax-dispatch A18ca@t '(any any any)))) A18c8@spec))) (set! A16eb@get-record-constructor-name (lambda (A18b4@spec) ((lambda (A18b6@t) ((lambda (A18b8@ls/false) (if A18b8@ls/false (apply (lambda (A18ba@foo A18bb@make-foo A18bc@foo?) A18bb@make-foo) A18b8@ls/false) ((lambda (A18c0@t) ((lambda (A18c2@ls/false) (if (and A18c2@ls/false (apply (lambda (A18c4@foo) (Ab5a@id? A18c4@foo)) A18c2@ls/false)) (apply (lambda (A18c6@foo) (A16e7@id A18c6@foo '"make-" (Ab6e@stx->datum A18c6@foo))) A18c2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A18c0@t))) (Ad5f@syntax-dispatch A18c0@t 'any))) A18b6@t))) (Ad5f@syntax-dispatch A18b6@t '(any any any)))) A18b4@spec))) (set! A16ed@get-record-predicate-name (lambda (A18a0@spec) ((lambda (A18a2@t) ((lambda (A18a4@ls/false) (if A18a4@ls/false (apply (lambda (A18a6@foo A18a7@make-foo A18a8@foo?) A18a8@foo?) A18a4@ls/false) ((lambda (A18ac@t) ((lambda (A18ae@ls/false) (if (and A18ae@ls/false (apply (lambda (A18b0@foo) (Ab5a@id? A18b0@foo)) A18ae@ls/false)) (apply (lambda (A18b2@foo) (A16e7@id A18b2@foo (Ab6e@stx->datum A18b2@foo) '"?")) A18ae@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A18ac@t))) (Ad5f@syntax-dispatch A18ac@t 'any))) A18a2@t))) (Ad5f@syntax-dispatch A18a2@t '(any any any)))) A18a0@spec))) (set! A16ef@get-clause (lambda (A188e@id A188f@ls) ((lambda (A1892@t) ((lambda (A1894@ls/false) (if A1894@ls/false (apply (lambda () '#f) A1894@ls/false) ((lambda (A1896@t) ((lambda (A1898@ls/false) (if A1898@ls/false (apply (lambda (A189a@x A189b@rest A189c@ls) (if (Ab60@free-id=? (Ad15@bless A188e@id) A189a@x) (cons A189a@x A189b@rest) (A16ef@get-clause A188e@id A189c@ls))) A1898@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1896@t))) (Ad5f@syntax-dispatch A1896@t '((any . any) . any)))) A1892@t))) (Ad5f@syntax-dispatch A1892@t '()))) A188f@ls))) (set! A16f1@foo-rtd-code (lambda (A183c@name A183d@clause* A183e@parent-rtd-code) ((lambda (A1843@convert-field-spec*) (begin (set! A1843@convert-field-spec* (lambda (A1874@ls) (list->vector (map (lambda (A1876@x) ((lambda (A1878@t) ((lambda (A187a@ls/false) (if A187a@ls/false (apply (lambda (A187c@name A187d@rest) (list 'mutable A187c@name)) A187a@ls/false) ((lambda (A1880@t) ((lambda (A1882@ls/false) (if A1882@ls/false (apply (lambda (A1884@name A1885@rest) (list 'immutable A1884@name)) A1882@ls/false) ((lambda (A1888@t) ((lambda (A188a@ls/false) (if A188a@ls/false (apply (lambda (A188c@name) (list 'immutable A188c@name)) A188a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1888@t))) (Ad5f@syntax-dispatch A1888@t 'any))) A1880@t))) (Ad5f@syntax-dispatch A1880@t '(#(scheme-id immutable) any . any)))) A1878@t))) (Ad5f@syntax-dispatch A1878@t '(#(scheme-id mutable) any . any)))) A1876@x)) A1874@ls)))) ((lambda (A1844@uid-code A1845@sealed? A1846@opaque? A1847@fields) (Ad15@bless (list 'make-record-type-descriptor (list 'quote A183c@name) A183e@parent-rtd-code A1844@uid-code A1845@sealed? A1846@opaque? A1847@fields))) ((lambda (A184c@t) ((lambda (A184e@ls/false) (if A184e@ls/false (apply (lambda () (list 'quote (gensym))) A184e@ls/false) ((lambda (A1850@t) ((lambda (A1852@ls/false) (if A1852@ls/false (apply (lambda (A1854@uid) (list 'quote A1854@uid)) A1852@ls/false) ((lambda (A1856@t) ((lambda (A1858@ls/false) (if A1858@ls/false (apply (lambda () '#f) A1858@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1856@t))) (Ad5f@syntax-dispatch A1856@t '_))) A1850@t))) (Ad5f@syntax-dispatch A1850@t '(_ any)))) A184c@t))) (Ad5f@syntax-dispatch A184c@t '(_)))) (A16ef@get-clause 'nongenerative A183d@clause*)) ((lambda (A185a@t) ((lambda (A185c@ls/false) (if A185c@ls/false (apply (lambda () '#t) A185c@ls/false) ((lambda (A185e@t) ((lambda (A1860@ls/false) (if A1860@ls/false (apply (lambda () '#f) A1860@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A185e@t))) (Ad5f@syntax-dispatch A185e@t '_))) A185a@t))) (Ad5f@syntax-dispatch A185a@t '(_ #(atom #t))))) (A16ef@get-clause 'sealed A183d@clause*)) ((lambda (A1862@t) ((lambda (A1864@ls/false) (if A1864@ls/false (apply (lambda () '#t) A1864@ls/false) ((lambda (A1866@t) ((lambda (A1868@ls/false) (if A1868@ls/false (apply (lambda () '#f) A1868@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1866@t))) (Ad5f@syntax-dispatch A1866@t '_))) A1862@t))) (Ad5f@syntax-dispatch A1862@t '(_ #(atom #t))))) (A16ef@get-clause 'opaque A183d@clause*)) ((lambda (A186a@t) ((lambda (A186c@ls/false) (if A186c@ls/false (apply (lambda (A186e@field-spec*) (list 'quote (A1843@convert-field-spec* A186e@field-spec*))) A186c@ls/false) ((lambda (A1870@t) ((lambda (A1872@ls/false) (if A1872@ls/false (apply (lambda () ''#()) A1872@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1870@t))) (Ad5f@syntax-dispatch A1870@t '_))) A186a@t))) (Ad5f@syntax-dispatch A186a@t '(_ . each-any)))) (A16ef@get-clause 'fields A183d@clause*))))) '#f))) (set! A16f3@parent-rtd-code (lambda (A1824@clause*) ((lambda (A1826@t) ((lambda (A1828@ls/false) (if A1828@ls/false (apply (lambda (A182a@name) (list 'record-type-descriptor A182a@name)) A1828@ls/false) ((lambda (A182c@t) ((lambda (A182e@ls/false) (if A182e@ls/false (apply (lambda () ((lambda (A1830@t) ((lambda (A1832@ls/false) (if A1832@ls/false (apply (lambda (A1834@rtd A1835@rcd) A1834@rtd) A1832@ls/false) ((lambda (A1838@t) ((lambda (A183a@ls/false) (if A183a@ls/false (apply (lambda () '#f) A183a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1838@t))) (Ad5f@syntax-dispatch A1838@t '#(atom #f)))) A1830@t))) (Ad5f@syntax-dispatch A1830@t '(_ any any)))) (A16ef@get-clause 'parent-rtd A1824@clause*))) A182e@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A182c@t))) (Ad5f@syntax-dispatch A182c@t '#(atom #f)))) A1826@t))) (Ad5f@syntax-dispatch A1826@t '(_ any)))) (A16ef@get-clause 'parent A1824@clause*)))) (set! A16f5@parent-rcd-code (lambda (A180c@clause*) ((lambda (A180e@t) ((lambda (A1810@ls/false) (if A1810@ls/false (apply (lambda (A1812@name) (list 'record-constructor-descriptor A1812@name)) A1810@ls/false) ((lambda (A1814@t) ((lambda (A1816@ls/false) (if A1816@ls/false (apply (lambda () ((lambda (A1818@t) ((lambda (A181a@ls/false) (if A181a@ls/false (apply (lambda (A181c@rtd A181d@rcd) A181d@rcd) A181a@ls/false) ((lambda (A1820@t) ((lambda (A1822@ls/false) (if A1822@ls/false (apply (lambda () '#f) A1822@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1820@t))) (Ad5f@syntax-dispatch A1820@t '#(atom #f)))) A1818@t))) (Ad5f@syntax-dispatch A1818@t '(_ any any)))) (A16ef@get-clause 'parent-rtd A180c@clause*))) A1816@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1814@t))) (Ad5f@syntax-dispatch A1814@t '#(atom #f)))) A180e@t))) (Ad5f@syntax-dispatch A180e@t '(_ any)))) (A16ef@get-clause 'parent A180c@clause*)))) (set! A16f7@foo-rcd-code (lambda (A1804@clause* A1805@foo-rtd A1806@protocol A1807@parent-rcd-code) (list 'make-record-constructor-descriptor A1805@foo-rtd A1807@parent-rcd-code A1806@protocol))) (set! A16f9@get-protocol-code (lambda (A17f8@clause*) ((lambda (A17fa@t) ((lambda (A17fc@ls/false) (if A17fc@ls/false (apply (lambda (A17fe@expr) A17fe@expr) A17fc@ls/false) ((lambda (A1800@t) ((lambda (A1802@ls/false) (if A1802@ls/false (apply (lambda () '#f) A1802@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1800@t))) (Ad5f@syntax-dispatch A1800@t '_))) A17fa@t))) (Ad5f@syntax-dispatch A17fa@t '(_ any)))) (A16ef@get-clause 'protocol A17f8@clause*)))) (set! A16fb@get-fields (lambda (A17e6@clause*) ((lambda (A17e8@t) ((lambda (A17ea@ls/false) (if A17ea@ls/false (apply (lambda () '()) A17ea@ls/false) ((lambda (A17ec@t) ((lambda (A17ee@ls/false) (if A17ee@ls/false (apply (lambda (A17f0@f*) A17f0@f*) A17ee@ls/false) ((lambda (A17f2@t) ((lambda (A17f4@ls/false) (if A17f4@ls/false (apply (lambda (A17f6@rest) (A16fb@get-fields A17f6@rest)) A17f4@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A17f2@t))) (Ad5f@syntax-dispatch A17f2@t '(_ . any)))) A17ec@t))) (Ad5f@syntax-dispatch A17ec@t '((#(scheme-id fields) . each-any) . _)))) A17e8@t))) (Ad5f@syntax-dispatch A17e8@t '()))) A17e6@clause*))) (set! A16fd@get-mutator-indices (lambda (A17ce@fields) ((letrec ((A17d0@f (lambda (A17d2@fields A17d3@i) ((lambda (A17d6@t) ((lambda (A17d8@ls/false) (if A17d8@ls/false (apply (lambda () '()) A17d8@ls/false) ((lambda (A17da@t) ((lambda (A17dc@ls/false) (if A17dc@ls/false (apply (lambda (A17de@rest) (cons A17d3@i (A17d0@f A17de@rest (+ A17d3@i '1)))) A17dc@ls/false) ((lambda (A17e0@t) ((lambda (A17e2@ls/false) (if A17e2@ls/false (apply (lambda (A17e4@rest) (A17d0@f A17e4@rest (+ A17d3@i '1))) A17e2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A17e0@t))) (Ad5f@syntax-dispatch A17e0@t '(_ . any)))) A17da@t))) (Ad5f@syntax-dispatch A17da@t '((#(scheme-id mutable) . _) . any)))) A17d6@t))) (Ad5f@syntax-dispatch A17d6@t '()))) A17d2@fields)))) A17d0@f) A17ce@fields '0))) (set! A16ff@get-mutators (lambda (A17a4@foo A17a5@fields) ((lambda (A17a9@gen-name) (begin (set! A17a9@gen-name (lambda (A17cc@x) (Ae43@datum->syntax A17a4@foo (string->symbol (string-append (symbol->string (Ae45@syntax->datum A17a4@foo)) '"-" (symbol->string (Ae45@syntax->datum A17cc@x)) '"-set!"))))) ((letrec ((A17aa@f (lambda (A17ac@fields) ((lambda (A17ae@t) ((lambda (A17b0@ls/false) (if A17b0@ls/false (apply (lambda () '()) A17b0@ls/false) ((lambda (A17b2@t) ((lambda (A17b4@ls/false) (if A17b4@ls/false (apply (lambda (A17b6@name A17b7@accessor A17b8@mutator A17b9@rest) (cons A17b8@mutator (A17aa@f A17b9@rest))) A17b4@ls/false) ((lambda (A17be@t) ((lambda (A17c0@ls/false) (if A17c0@ls/false (apply (lambda (A17c2@name A17c3@rest) (cons (A17a9@gen-name A17c2@name) (A17aa@f A17c3@rest))) A17c0@ls/false) ((lambda (A17c6@t) ((lambda (A17c8@ls/false) (if A17c8@ls/false (apply (lambda (A17ca@rest) (A17aa@f A17ca@rest)) A17c8@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A17c6@t))) (Ad5f@syntax-dispatch A17c6@t '(_ . any)))) A17be@t))) (Ad5f@syntax-dispatch A17be@t '((#(scheme-id mutable) any) . any)))) A17b2@t))) (Ad5f@syntax-dispatch A17b2@t '((#(scheme-id mutable) any any any) . any)))) A17ae@t))) (Ad5f@syntax-dispatch A17ae@t '()))) A17ac@fields)))) A17aa@f) A17a5@fields))) '#f))) (set! A1701@get-accessors (lambda (A1760@foo A1761@fields) ((lambda (A1765@gen-name) (begin (set! A1765@gen-name (lambda (A17a2@x) (Ae43@datum->syntax A1760@foo (string->symbol (string-append (symbol->string (Ae45@syntax->datum A1760@foo)) '"-" (symbol->string (Ae45@syntax->datum A17a2@x))))))) (map (lambda (A1766@field) ((lambda (A1768@t) ((lambda (A176a@ls/false) (if (and A176a@ls/false (apply (lambda (A176c@name A176d@accessor A176e@mutator) (Ab5a@id? A176d@accessor)) A176a@ls/false)) (apply (lambda (A1772@name A1773@accessor A1774@mutator) A1773@accessor) A176a@ls/false) ((lambda (A1778@t) ((lambda (A177a@ls/false) (if (and A177a@ls/false (apply (lambda (A177c@name A177d@accessor) (Ab5a@id? A177d@accessor)) A177a@ls/false)) (apply (lambda (A1780@name A1781@accessor) A1781@accessor) A177a@ls/false) ((lambda (A1784@t) ((lambda (A1786@ls/false) (if (and A1786@ls/false (apply (lambda (A1788@name) (Ab5a@id? A1788@name)) A1786@ls/false)) (apply (lambda (A178a@name) (A1765@gen-name A178a@name)) A1786@ls/false) ((lambda (A178c@t) ((lambda (A178e@ls/false) (if (and A178e@ls/false (apply (lambda (A1790@name) (Ab5a@id? A1790@name)) A178e@ls/false)) (apply (lambda (A1792@name) (A1765@gen-name A1792@name)) A178e@ls/false) ((lambda (A1794@t) ((lambda (A1796@ls/false) (if (and A1796@ls/false (apply (lambda (A1798@name) (Ab5a@id? A1798@name)) A1796@ls/false)) (apply (lambda (A179a@name) (A1765@gen-name A179a@name)) A1796@ls/false) ((lambda (A179c@t) ((lambda (A179e@ls/false) (if A179e@ls/false (apply (lambda (A17a0@others) (Ae3f@syntax-violation '#f '"invalid field spec" A1766@field)) A179e@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A179c@t))) (Ad5f@syntax-dispatch A179c@t 'any))) A1794@t))) (Ad5f@syntax-dispatch A1794@t 'any))) A178c@t))) (Ad5f@syntax-dispatch A178c@t '(#(scheme-id immutable) any)))) A1784@t))) (Ad5f@syntax-dispatch A1784@t '(#(scheme-id mutable) any)))) A1778@t))) (Ad5f@syntax-dispatch A1778@t '(#(scheme-id immutable) any any)))) A1768@t))) (Ad5f@syntax-dispatch A1768@t '(#(scheme-id mutable) any any any)))) A1766@field)) A1761@fields))) '#f))) (set! A1703@enumerate (lambda (A1758@ls) ((letrec ((A175a@f (lambda (A175c@ls A175d@i) (if (null? A175c@ls) '() (cons A175d@i (A175a@f (cdr A175c@ls) (+ A175d@i '1))))))) A175a@f) A1758@ls '0))) (set! A1705@do-define-record (lambda (A1730@namespec A1731@clause*) ((lambda (A1734@foo) ((lambda (A1736@foo-rtd) ((lambda (A1738@foo-rcd) ((lambda (A173a@protocol) ((lambda (A173c@make-foo) ((lambda (A173e@fields) ((lambda (A1740@idx*) ((lambda (A1742@foo-x*) ((lambda (A1744@set-foo-x!*) ((lambda (A1746@set-foo-idx*) ((lambda (A1748@foo?) ((lambda (A174a@foo-rtd-code) ((lambda (A174c@foo-rcd-code) ((lambda (A174e@protocol-code) ((lambda () (Ad15@bless (cons 'begin (cons (list 'define A1736@foo-rtd A174a@foo-rtd-code) (cons (list 'define A173a@protocol A174e@protocol-code) (cons (list 'define A1738@foo-rcd A174c@foo-rcd-code) (cons (list 'define-syntax A1734@foo (list 'list ''$rtd (list 'syntax A1736@foo-rtd) (list 'syntax A1738@foo-rcd))) (cons (list 'define A1748@foo? (list 'record-predicate A1736@foo-rtd)) (cons (list 'define A173c@make-foo (list 'record-constructor A1738@foo-rcd)) (append (map (lambda (A1750@foo-x A1751@idx) (list 'define A1750@foo-x (list 'record-accessor A1736@foo-rtd A1751@idx))) A1742@foo-x* A1740@idx*) (map (lambda (A1754@set-foo-x! A1755@idx) (list 'define A1754@set-foo-x! (list 'record-mutator A1736@foo-rtd A1755@idx))) A1744@set-foo-x!* A1746@set-foo-idx*))))))))))))) (A16f9@get-protocol-code A1731@clause*))) (A16f7@foo-rcd-code A1731@clause* A1736@foo-rtd A173a@protocol (A16f5@parent-rcd-code A1731@clause*)))) (A16f1@foo-rtd-code A1734@foo A1731@clause* (A16f3@parent-rtd-code A1731@clause*)))) (A16ed@get-record-predicate-name A1730@namespec))) (A16fd@get-mutator-indices A173e@fields))) (A16ff@get-mutators A1734@foo A173e@fields))) (A1701@get-accessors A1734@foo A173e@fields))) (A1703@enumerate A173e@fields))) (A16fb@get-fields A1731@clause*))) (A16eb@get-record-constructor-name A1730@namespec))) (gensym))) (gensym))) (gensym))) (A16e9@get-record-name A1730@namespec)))) (set! A1707@verify-clauses (lambda (A1710@x A1711@cls*) ((lambda (A1715@valid-kwds A1717@free-id-member?) (begin (set! A1715@valid-kwds (map Ad15@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! A1717@free-id-member? (lambda (A172c@x A172d@ls) (and (pair? A172d@ls) (or (Ab60@free-id=? A172c@x (car A172d@ls)) (A1717@free-id-member? A172c@x (cdr A172d@ls)))))) ((letrec ((A1718@f (lambda (A171a@cls* A171b@seen*) (if (not (null? A171a@cls*)) ((lambda (A171e@t) ((lambda (A1720@ls/false) (if A1720@ls/false (apply (lambda (A1722@kwd A1723@rest) (if (or (not (Ab5a@id? A1722@kwd)) (not (A1717@free-id-member? A1722@kwd A1715@valid-kwds))) (Ae3f@syntax-violation '#f '"not a valid define-record-type keyword" A1722@kwd) (if (Ab66@bound-id-member? A1722@kwd A171b@seen*) (Ae3f@syntax-violation '#f '"duplicate use of keyword " A1710@x A1722@kwd) (A1718@f (cdr A171a@cls*) (cons A1722@kwd A171b@seen*))))) A1720@ls/false) ((lambda (A1726@t) ((lambda (A1728@ls/false) (if A1728@ls/false (apply (lambda (A172a@cls) (Ae3f@syntax-violation '#f '"malformed define-record-type clause" A172a@cls)) A1728@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1726@t))) (Ad5f@syntax-dispatch A1726@t 'any))) A171e@t))) (Ad5f@syntax-dispatch A171e@t '(any . any)))) (car A171a@cls*)) (void))))) A1718@f) A1711@cls* '()))) '#f '#f))) ((lambda (A1708@t) ((lambda (A170a@ls/false) (if A170a@ls/false (apply (lambda (A170c@namespec A170d@clause*) (begin (A1707@verify-clauses A16e4@x A170d@clause*) (A1705@do-define-record A170c@namespec A170d@clause*))) A170a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1708@t))) (Ad5f@syntax-dispatch A1708@t '(_ any . each-any)))) A16e4@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! Ad55@define-condition-type-macro (lambda (A18e0@x) ((lambda (A18e3@mkname) (begin (set! A18e3@mkname (lambda (A1910@name A1911@suffix) (Ae43@datum->syntax A1910@name (string->symbol (string-append (symbol->string (Ae45@syntax->datum A1910@name)) A1911@suffix))))) ((lambda (A18e4@t) ((lambda (A18e6@ls/false) (if (and A18e6@ls/false (apply (lambda (A18e8@ctxt A18e9@name A18ea@super A18eb@constructor A18ec@predicate A18ed@field* A18ee@accessor*) (and (Ab5a@id? A18e9@name) (Ab5a@id? A18ea@super) (Ab5a@id? A18eb@constructor) (Ab5a@id? A18ec@predicate) (for-all Ab5a@id? A18ed@field*) (for-all Ab5a@id? A18ee@accessor*))) A18e6@ls/false)) (apply (lambda (A18f6@ctxt A18f7@name A18f8@super A18f9@constructor A18fa@predicate A18fb@field* A18fc@accessor*) ((lambda (A1904@aux-accessor*) (Ad15@bless (cons 'begin (cons (cons 'define-record-type (cons (list A18f7@name A18f9@constructor (gensym)) (cons (list 'parent A18f8@super) (cons (cons 'fields (map (lambda (A1906@field A1907@aux) (list 'immutable A1906@field A1907@aux)) A18fb@field* A1904@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define A18fa@predicate (list 'condition-predicate (list 'record-type-descriptor A18f7@name))) (map (lambda (A190a@accessor A190b@aux) (list 'define A190a@accessor (list 'condition-accessor (list 'record-type-descriptor A18f7@name) A190b@aux))) A18fc@accessor* A1904@aux-accessor*)))))) (map (lambda (A190e@x) (gensym)) A18fc@accessor*))) A18e6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A18e4@t))) (Ad5f@syntax-dispatch A18e4@t '(any any any any any . #(each (any any)))))) A18e0@x))) '#f))) (set! Ad57@incorrect-usage-macro (lambda (A1914@e) (Ae3f@syntax-violation '#f '"incorrect usage of auxiliary keyword" A1914@e))) (set! Ad59@parameterize-macro (lambda (A1916@e) ((lambda (A1918@t) ((lambda (A191a@ls/false) (if A191a@ls/false (apply (lambda (A191c@b A191d@b*) (Ad15@bless (cons 'let (cons '() (cons A191c@b A191d@b*))))) A191a@ls/false) ((lambda (A1920@t) ((lambda (A1922@ls/false) (if A1922@ls/false (apply (lambda (A1924@olhs* A1925@orhs* A1926@b A1927@b*) ((lambda (A192c@lhs* A192d@rhs*) (Ad15@bless (cons (list 'lambda (append A192c@lhs* A192d@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (A1930@lhs A1931@rhs) (list 'let (list (list 't (list A1930@lhs))) (list A1930@lhs A1931@rhs) (cons 'set! (cons A1931@rhs '(t))))) A192c@lhs* A192d@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons A1926@b A1927@b*))) '(swap)))))) (append A1924@olhs* A1925@orhs*)))) (Ae2d@generate-temporaries A1924@olhs*) (Ae2d@generate-temporaries A1925@orhs*))) A1922@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1920@t))) (Ad5f@syntax-dispatch A1920@t '(_ #(each (any any)) any . each-any)))) A1918@t))) (Ad5f@syntax-dispatch A1918@t '(_ () any . each-any)))) A1916@e))) (set! Ad5b@foreign-call-transformer (lambda (A1934@e A1935@r A1936@mr) ((lambda (A193a@t) ((lambda (A193c@ls/false) (if A193c@ls/false (apply (lambda (A193e@name A193f@arg*) (cons 'foreign-call (cons (Ad81@chi-expr A193e@name A1935@r A1936@mr) (Ad7d@chi-expr* A193f@arg* A1935@r A1936@mr)))) A193c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A193a@t))) (Ad5f@syntax-dispatch A193a@t '(_ any . each-any)))) A1934@e))) (set! Ad5d@convert-pattern (lambda (A1942@pattern A1943@keys) ((lambda (A1947@cvt* A1949@cvt) (begin (set! A1947@cvt* (lambda (A19e6@p* A19e7@n A19e8@ids) (if (null? A19e6@p*) (values '() A19e8@ids) (call-with-values (lambda () (A1947@cvt* (cdr A19e6@p*) A19e7@n A19e8@ids)) (lambda (A19f0@A19ed A19f1@A19ef) ((lambda (A19f4@ids A19f5@y) (call-with-values (lambda () (A1949@cvt (car A19e6@p*) A19e7@n A19f4@ids)) (lambda (A19fc@A19f9 A19fd@A19fb) ((lambda (A1a00@ids A1a01@x) (values (cons A1a01@x A19f5@y) A1a00@ids)) A19fd@A19fb A19fc@A19f9)))) A19f1@A19ef A19f0@A19ed)))))) (set! A1949@cvt (lambda (A194a@p A194b@n A194c@ids) ((lambda (A1950@t) ((lambda (A1952@ls/false) (if (and A1952@ls/false (apply (lambda (A1954@id) (Ab5a@id? A1954@id)) A1952@ls/false)) (apply (lambda (A1956@id) (if (Ab66@bound-id-member? A194a@p A1943@keys) (values (vector 'free-id A194a@p) A194c@ids) (if (Ab60@free-id=? A194a@p (Ace9@scheme-stx '_)) (values '_ A194c@ids) (values 'any (cons (cons A194a@p A194b@n) A194c@ids))))) A1952@ls/false) ((lambda (A1958@t) ((lambda (A195a@ls/false) (if (and A195a@ls/false (apply (lambda (A195c@p A195d@dots) (Ad61@ellipsis? A195d@dots)) A195a@ls/false)) (apply (lambda (A1960@p A1961@dots) (call-with-values (lambda () (A1949@cvt A1960@p (+ A194b@n '1) A194c@ids)) (lambda (A1968@A1965 A1969@A1967) ((lambda (A196c@ids A196d@p) (values (if (eq? A196d@p 'any) 'each-any (vector 'each A196d@p)) A196c@ids)) A1969@A1967 A1968@A1965)))) A195a@ls/false) ((lambda (A1970@t) ((lambda (A1972@ls/false) (if (and A1972@ls/false (apply (lambda (A1974@x A1975@dots A1976@ys A1977@z) (Ad61@ellipsis? A1975@dots)) A1972@ls/false)) (apply (lambda (A197c@x A197d@dots A197e@ys A197f@z) (call-with-values (lambda () (A1949@cvt A197f@z A194b@n A194c@ids)) (lambda (A1988@A1985 A1989@A1987) ((lambda (A198c@ids A198d@z) (call-with-values (lambda () (A1947@cvt* A197e@ys A194b@n A198c@ids)) (lambda (A1994@A1991 A1995@A1993) ((lambda (A1998@ids A1999@ys) (call-with-values (lambda () (A1949@cvt A197c@x (+ A194b@n '1) A1998@ids)) (lambda (A19a0@A199d A19a1@A199f) ((lambda (A19a4@ids A19a5@x) (values (vector 'each+ A19a5@x (reverse A1999@ys) A198d@z) A19a4@ids)) A19a1@A199f A19a0@A199d)))) A1995@A1993 A1994@A1991)))) A1989@A1987 A1988@A1985)))) A1972@ls/false) ((lambda (A19a8@t) ((lambda (A19aa@ls/false) (if A19aa@ls/false (apply (lambda (A19ac@x A19ad@y) (call-with-values (lambda () (A1949@cvt A19ad@y A194b@n A194c@ids)) (lambda (A19b4@A19b1 A19b5@A19b3) ((lambda (A19b8@ids A19b9@y) (call-with-values (lambda () (A1949@cvt A19ac@x A194b@n A19b8@ids)) (lambda (A19c0@A19bd A19c1@A19bf) ((lambda (A19c4@ids A19c5@x) (values (cons A19c5@x A19b9@y) A19c4@ids)) A19c1@A19bf A19c0@A19bd)))) A19b5@A19b3 A19b4@A19b1)))) A19aa@ls/false) ((lambda (A19c8@t) ((lambda (A19ca@ls/false) (if A19ca@ls/false (apply (lambda () (values '() A194c@ids)) A19ca@ls/false) ((lambda (A19cc@t) ((lambda (A19ce@ls/false) (if (and A19ce@ls/false (apply (lambda (A19d0@p) (not (Ab26@stx? A19d0@p))) A19ce@ls/false)) (apply (lambda (A19d2@p) (call-with-values (lambda () (A1949@cvt A19d2@p A194b@n A194c@ids)) (lambda (A19d8@A19d5 A19d9@A19d7) ((lambda (A19dc@ids A19dd@p) (values (vector 'vector A19dd@p) A19dc@ids)) A19d9@A19d7 A19d8@A19d5)))) A19ce@ls/false) ((lambda (A19e0@t) ((lambda (A19e2@ls/false) (if A19e2@ls/false (apply (lambda (A19e4@datum) (values (vector 'atom (Ab6e@stx->datum A19e4@datum)) A194c@ids)) A19e2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A19e0@t))) (Ad5f@syntax-dispatch A19e0@t 'any))) A19cc@t))) (Ad5f@syntax-dispatch A19cc@t '#(vector each-any)))) A19c8@t))) (Ad5f@syntax-dispatch A19c8@t '()))) A19a8@t))) (Ad5f@syntax-dispatch A19a8@t '(any . any)))) A1970@t))) (Ad5f@syntax-dispatch A1970@t '(any any . #(each+ any () any))))) A1958@t))) (Ad5f@syntax-dispatch A1958@t '(any any)))) A1950@t))) (Ad5f@syntax-dispatch A1950@t 'any))) A194a@p))) (A1949@cvt A1942@pattern '0 '()))) '#f '#f))) (set! Ad5f@syntax-dispatch ((lambda () ((lambda (A1a05@stx^ A1a07@match-each A1a09@match-each+ A1a0b@match-each-any A1a0d@match-empty A1a0f@combine A1a11@match* A1a13@match) (begin (set! A1a05@stx^ (lambda (A1ae0@e A1ae1@m* A1ae2@s* A1ae3@ae*) (if (and (null? A1ae1@m*) (null? A1ae2@s*) (null? A1ae3@ae*)) A1ae0@e (Ab42@mkstx A1ae0@e A1ae1@m* A1ae2@s* A1ae3@ae*)))) (set! A1a07@match-each (lambda (A1ac0@e A1ac1@p A1ac2@m* A1ac3@s* A1ac4@ae*) (if (pair? A1ac0@e) ((lambda (A1aca@first) (and A1aca@first ((lambda (A1acc@rest) (and A1acc@rest (cons A1aca@first A1acc@rest))) (A1a07@match-each (cdr A1ac0@e) A1ac1@p A1ac2@m* A1ac3@s* A1ac4@ae*)))) (A1a13@match (car A1ac0@e) A1ac1@p A1ac2@m* A1ac3@s* A1ac4@ae* '())) (if (null? A1ac0@e) '() (if (Ab26@stx? A1ac0@e) (and (not (Aae0@top-marked? A1ac2@m*)) (call-with-values (lambda () (join-wraps A1ac2@m* A1ac3@s* A1ac4@ae* A1ac0@e)) (lambda (A1ad4@A1acf A1ad5@A1ad1 A1ad6@A1ad3) ((lambda (A1ada@ae* A1adb@s* A1adc@m*) (A1a07@match-each (Ab28@stx-expr A1ac0@e) A1ac1@p A1adc@m* A1adb@s* A1ada@ae*)) A1ad6@A1ad3 A1ad5@A1ad1 A1ad4@A1acf)))) (if (A6ae@A582@annotation? A1ac0@e) (A1a07@match-each (A6b0@A586@annotation-expression A1ac0@e) A1ac1@p A1ac2@m* A1ac3@s* A1ac4@ae*) '#f)))))) (set! A1a09@match-each+ (lambda (A1a80@e A1a81@x-pat A1a82@y-pat A1a83@z-pat A1a84@m* A1a85@s* A1a86@ae* A1a87@r) ((letrec ((A1a90@f (lambda (A1a92@e A1a93@m* A1a94@s* A1a95@ae*) (if (pair? A1a92@e) (call-with-values (lambda () (A1a90@f (cdr A1a92@e) A1a93@m* A1a94@s* A1a95@ae*)) (lambda (A1aa0@A1a9b A1aa1@A1a9d A1aa2@A1a9f) ((lambda (A1aa6@r A1aa7@y-pat A1aa8@xr*) (if A1aa6@r (if (null? A1aa7@y-pat) ((lambda (A1aac@xr) (if A1aac@xr (values (cons A1aac@xr A1aa8@xr*) A1aa7@y-pat A1aa6@r) (values '#f '#f '#f))) (A1a13@match (car A1a92@e) A1a81@x-pat A1a93@m* A1a94@s* A1a95@ae* '())) (values '() (cdr A1aa7@y-pat) (A1a13@match (car A1a92@e) (car A1aa7@y-pat) A1a93@m* A1a94@s* A1a95@ae* A1aa6@r))) (values '#f '#f '#f))) A1aa2@A1a9f A1aa1@A1a9d A1aa0@A1a9b))) (if (Ab26@stx? A1a92@e) (if (Aae0@top-marked? A1a93@m*) (values '() A1a82@y-pat (A1a13@match A1a92@e A1a83@z-pat A1a93@m* A1a94@s* A1a95@ae* A1a87@r)) (call-with-values (lambda () (join-wraps A1a93@m* A1a94@s* A1a95@ae* A1a92@e)) (lambda (A1ab4@A1aaf A1ab5@A1ab1 A1ab6@A1ab3) ((lambda (A1aba@ae* A1abb@s* A1abc@m*) (A1a90@f (Ab28@stx-expr A1a92@e) A1abc@m* A1abb@s* A1aba@ae*)) A1ab6@A1ab3 A1ab5@A1ab1 A1ab4@A1aaf)))) (if (A6ae@A582@annotation? A1a92@e) (A1a90@f (A6b0@A586@annotation-expression A1a92@e) A1a93@m* A1a94@s* A1a95@ae*) (values '() A1a82@y-pat (A1a13@match A1a92@e A1a83@z-pat A1a93@m* A1a94@s* A1a95@ae* A1a87@r)))))))) A1a90@f) A1a80@e A1a84@m* A1a85@s* A1a86@ae*))) (set! A1a0b@match-each-any (lambda (A1a64@e A1a65@m* A1a66@s* A1a67@ae*) (if (pair? A1a64@e) ((lambda (A1a6c@l) (and A1a6c@l (cons (A1a05@stx^ (car A1a64@e) A1a65@m* A1a66@s* A1a67@ae*) A1a6c@l))) (A1a0b@match-each-any (cdr A1a64@e) A1a65@m* A1a66@s* A1a67@ae*)) (if (null? A1a64@e) '() (if (Ab26@stx? A1a64@e) (and (not (Aae0@top-marked? A1a65@m*)) (call-with-values (lambda () (join-wraps A1a65@m* A1a66@s* A1a67@ae* A1a64@e)) (lambda (A1a74@A1a6f A1a75@A1a71 A1a76@A1a73) ((lambda (A1a7a@ae* A1a7b@s* A1a7c@m*) (A1a0b@match-each-any (Ab28@stx-expr A1a64@e) A1a7c@m* A1a7b@s* A1a7a@ae*)) A1a76@A1a73 A1a75@A1a71 A1a74@A1a6f)))) (if (A6ae@A582@annotation? A1a64@e) (A1a0b@match-each-any (A6b0@A586@annotation-expression A1a64@e) A1a65@m* A1a66@s* A1a67@ae*) '#f)))))) (set! A1a0d@match-empty (lambda (A1a5e@p A1a5f@r) (if (null? A1a5e@p) A1a5f@r (if (eq? A1a5e@p '_) A1a5f@r (if (eq? A1a5e@p 'any) (cons '() A1a5f@r) (if (pair? A1a5e@p) (A1a0d@match-empty (car A1a5e@p) (A1a0d@match-empty (cdr A1a5e@p) A1a5f@r)) (if (eq? A1a5e@p 'each-any) (cons '() A1a5f@r) ((lambda (A1a62@t) (if (memv A1a62@t '(each)) (A1a0d@match-empty (vector-ref A1a5e@p '1) A1a5f@r) (if (memv A1a62@t '(each+)) (A1a0d@match-empty (vector-ref A1a5e@p '1) (A1a0d@match-empty (reverse (vector-ref A1a5e@p '2)) (A1a0d@match-empty (vector-ref A1a5e@p '3) A1a5f@r))) (if (memv A1a62@t '(free-id atom)) A1a5f@r (if (memv A1a62@t '(scheme-id atom)) A1a5f@r (if (memv A1a62@t '(vector)) (A1a0d@match-empty (vector-ref A1a5e@p '1) A1a5f@r) (assertion-violation 'syntax-dispatch '"invalid pattern" A1a5e@p))))))) (vector-ref A1a5e@p '0))))))))) (set! A1a0f@combine (lambda (A1a5a@r* A1a5b@r) (if (null? (car A1a5a@r*)) A1a5b@r (cons (map car A1a5a@r*) (A1a0f@combine (map cdr A1a5a@r*) A1a5b@r))))) (set! A1a11@match* (lambda (A1a36@e A1a37@p A1a38@m* A1a39@s* A1a3a@ae* A1a3b@r) (if (null? A1a37@p) (and (null? A1a36@e) A1a3b@r) (if (pair? A1a37@p) (and (pair? A1a36@e) (A1a13@match (car A1a36@e) (car A1a37@p) A1a38@m* A1a39@s* A1a3a@ae* (A1a13@match (cdr A1a36@e) (cdr A1a37@p) A1a38@m* A1a39@s* A1a3a@ae* A1a3b@r))) (if (eq? A1a37@p 'each-any) ((lambda (A1a42@l) (and A1a42@l (cons A1a42@l A1a3b@r))) (A1a0b@match-each-any A1a36@e A1a38@m* A1a39@s* A1a3a@ae*)) ((lambda (A1a44@t) (if (memv A1a44@t '(each)) (if (null? A1a36@e) (A1a0d@match-empty (vector-ref A1a37@p '1) A1a3b@r) ((lambda (A1a46@r*) (and A1a46@r* (A1a0f@combine A1a46@r* A1a3b@r))) (A1a07@match-each A1a36@e (vector-ref A1a37@p '1) A1a38@m* A1a39@s* A1a3a@ae*))) (if (memv A1a44@t '(free-id)) (and (symbol? A1a36@e) (Aae0@top-marked? A1a38@m*) (Ab60@free-id=? (A1a05@stx^ A1a36@e A1a38@m* A1a39@s* A1a3a@ae*) (vector-ref A1a37@p '1)) A1a3b@r) (if (memv A1a44@t '(scheme-id)) (and (symbol? A1a36@e) (Aae0@top-marked? A1a38@m*) (Ab60@free-id=? (A1a05@stx^ A1a36@e A1a38@m* A1a39@s* A1a3a@ae*) (Ace9@scheme-stx (vector-ref A1a37@p '1))) A1a3b@r) (if (memv A1a44@t '(each+)) (call-with-values (lambda () (A1a09@match-each+ A1a36@e (vector-ref A1a37@p '1) (vector-ref A1a37@p '2) (vector-ref A1a37@p '3) A1a38@m* A1a39@s* A1a3a@ae* A1a3b@r)) (lambda (A1a4e@A1a49 A1a4f@A1a4b A1a50@A1a4d) ((lambda (A1a54@r A1a55@y-pat A1a56@xr*) (and A1a54@r (null? A1a55@y-pat) (if (null? A1a56@xr*) (A1a0d@match-empty (vector-ref A1a37@p '1) A1a54@r) (A1a0f@combine A1a56@xr* A1a54@r)))) A1a50@A1a4d A1a4f@A1a4b A1a4e@A1a49))) (if (memv A1a44@t '(atom)) (and (fast-equal? (vector-ref A1a37@p '1) (Ab6c@strip A1a36@e A1a38@m*)) A1a3b@r) (if (memv A1a44@t '(vector)) (and (vector? A1a36@e) (A1a13@match (vector->list A1a36@e) (vector-ref A1a37@p '1) A1a38@m* A1a39@s* A1a3a@ae* A1a3b@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" A1a37@p)))))))) (vector-ref A1a37@p '0))))))) (set! A1a13@match (lambda (A1a18@e A1a19@p A1a1a@m* A1a1b@s* A1a1c@ae* A1a1d@r) (if (not A1a1d@r) '#f (if (eq? A1a19@p '_) A1a1d@r (if (eq? A1a19@p 'any) (cons (A1a05@stx^ A1a18@e A1a1a@m* A1a1b@s* A1a1c@ae*) A1a1d@r) (if (Ab26@stx? A1a18@e) (and (not (Aae0@top-marked? A1a1a@m*)) (call-with-values (lambda () (join-wraps A1a1a@m* A1a1b@s* A1a1c@ae* A1a18@e)) (lambda (A1a2a@A1a25 A1a2b@A1a27 A1a2c@A1a29) ((lambda (A1a30@ae* A1a31@s* A1a32@m*) (A1a13@match (Ab28@stx-expr A1a18@e) A1a19@p A1a32@m* A1a31@s* A1a30@ae* A1a1d@r)) A1a2c@A1a29 A1a2b@A1a27 A1a2a@A1a25)))) (if (A6ae@A582@annotation? A1a18@e) (A1a13@match (A6b0@A586@annotation-expression A1a18@e) A1a19@p A1a1a@m* A1a1b@s* A1a1c@ae* A1a1d@r) (A1a11@match* A1a18@e A1a19@p A1a1a@m* A1a1b@s* A1a1c@ae* A1a1d@r)))))))) (lambda (A1a14@e A1a15@p) (A1a13@match A1a14@e A1a15@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! Ad61@ellipsis? (lambda (A1ae8@x) (and (Ab5a@id? A1ae8@x) (Ab60@free-id=? A1ae8@x (Ace9@scheme-stx '...))))) (set! Ad63@underscore? (lambda (A1aea@x) (and (Ab5a@id? A1aea@x) (Ab60@free-id=? A1aea@x (Ace9@scheme-stx '_))))) (set! Ad65@verify-literals (lambda (A1aec@lits A1aed@expr) (for-each (lambda (A1af0@x) (if (or (not (Ab5a@id? A1af0@x)) (Ad61@ellipsis? A1af0@x) (Ad63@underscore? A1af0@x)) (Ae3f@syntax-violation '#f '"invalid literal" A1aed@expr A1af0@x) (void))) A1aec@lits))) (set! Ad67@syntax-case-transformer ((lambda () ((lambda (A1af3@build-dispatch-call A1af5@invalid-ids-error A1af7@gen-clause A1af9@gen-syntax-case) (begin (set! A1af3@build-dispatch-call (lambda (A1b64@pvars A1b65@expr A1b66@y A1b67@r A1b68@mr) ((lambda (A1b6e@ids A1b6f@levels) ((lambda (A1b72@labels A1b73@new-vars) ((lambda (A1b76@body) (list '(primitive apply) (Aabe@A9fe@build-lambda '#f A1b73@new-vars A1b76@body) A1b66@y)) (Ad81@chi-expr (Ab46@add-subst (Ab1a@make-full-rib A1b6e@ids A1b72@labels) A1b65@expr) (append (map (lambda (A1b78@label A1b79@var A1b7a@level) (cons A1b78@label (Ab74@make-binding 'syntax (cons A1b79@var A1b7a@level)))) A1b72@labels A1b73@new-vars (map cdr A1b64@pvars)) A1b67@r) A1b68@mr))) (map Aae6@gen-label A1b6e@ids) (map Aae2@gen-lexical A1b6e@ids))) (map car A1b64@pvars) (map cdr A1b64@pvars)))) (set! A1af5@invalid-ids-error (lambda (A1b58@id* A1b59@e A1b5a@class) ((letrec ((A1b5e@find (lambda (A1b60@id* A1b61@ok*) (if (null? A1b60@id*) (Ae3f@syntax-violation '#f '"invalid syntax" A1b59@e) (if (Ab5a@id? (car A1b60@id*)) (if (Ab66@bound-id-member? (car A1b60@id*) A1b61@ok*) (Ae3b@syntax-error (car A1b60@id*) '"duplicate " A1b5a@class) (A1b5e@find (cdr A1b60@id*) (cons (car A1b60@id*) A1b61@ok*))) (Ae3b@syntax-error (car A1b60@id*) '"invalid " A1b5a@class)))))) A1b5e@find) A1b58@id* '()))) (set! A1af7@gen-clause (lambda (A1b30@x A1b31@keys A1b32@clauses A1b33@r A1b34@mr A1b35@pat A1b36@fender A1b37@expr) (call-with-values (lambda () (Ad5d@convert-pattern A1b35@pat A1b31@keys)) (lambda (A1b44@A1b41 A1b45@A1b43) ((lambda (A1b48@pvars A1b49@p) (if (not (Ab64@distinct-bound-ids? (map car A1b48@pvars))) (A1af5@invalid-ids-error (map car A1b48@pvars) A1b35@pat '"pattern variable") (if (not (for-all (lambda (A1b4c@x) (not (Ad61@ellipsis? (car A1b4c@x)))) A1b48@pvars)) (Ae3f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" A1b35@pat) ((lambda (A1b4e@y) ((lambda (A1b50@test) ((lambda (A1b52@conseq) ((lambda (A1b54@altern) (list (Aabe@A9fe@build-lambda '#f (list A1b4e@y) (list 'if A1b50@test A1b52@conseq A1b54@altern)) (list '(primitive syntax-dispatch) A1b30@x (list 'quote A1b49@p)))) (A1af9@gen-syntax-case A1b30@x A1b31@keys A1b32@clauses A1b33@r A1b34@mr))) (A1af3@build-dispatch-call A1b48@pvars A1b37@expr A1b4e@y A1b33@r A1b34@mr))) (if (eq? A1b36@fender '#t) A1b4e@y ((lambda (A1b56@call) (list 'if A1b4e@y A1b56@call (list 'quote '#f))) (A1af3@build-dispatch-call A1b48@pvars A1b36@fender A1b4e@y A1b33@r A1b34@mr))))) (Aae2@gen-lexical 'tmp))))) A1b45@A1b43 A1b44@A1b41))))) (set! A1af9@gen-syntax-case (lambda (A1b0e@x A1b0f@keys A1b10@clauses A1b11@r A1b12@mr) (if (null? A1b10@clauses) (list '(primitive syntax-error) A1b0e@x) ((lambda (A1b18@t) ((lambda (A1b1a@ls/false) (if A1b1a@ls/false (apply (lambda (A1b1c@pat A1b1d@expr) (if (and (Ab5a@id? A1b1c@pat) (not (Ab66@bound-id-member? A1b1c@pat A1b0f@keys)) (not (Ad61@ellipsis? A1b1c@pat))) (if (Ab60@free-id=? A1b1c@pat (Ace9@scheme-stx '_)) (Ad81@chi-expr A1b1d@expr A1b11@r A1b12@mr) ((lambda (A1b20@lab A1b21@lex) ((lambda (A1b24@body) (list (Aabe@A9fe@build-lambda '#f (list A1b21@lex) A1b24@body) A1b0e@x)) (Ad81@chi-expr (Ab46@add-subst (Ab1a@make-full-rib (list A1b1c@pat) (list A1b20@lab)) A1b1d@expr) (cons (cons A1b20@lab (Ab74@make-binding 'syntax (cons A1b21@lex '0))) A1b11@r) A1b12@mr))) (Aae6@gen-label A1b1c@pat) (Aae2@gen-lexical A1b1c@pat))) (A1af7@gen-clause A1b0e@x A1b0f@keys (cdr A1b10@clauses) A1b11@r A1b12@mr A1b1c@pat '#t A1b1d@expr))) A1b1a@ls/false) ((lambda (A1b26@t) ((lambda (A1b28@ls/false) (if A1b28@ls/false (apply (lambda (A1b2a@pat A1b2b@fender A1b2c@expr) (A1af7@gen-clause A1b0e@x A1b0f@keys (cdr A1b10@clauses) A1b11@r A1b12@mr A1b2a@pat A1b2b@fender A1b2c@expr)) A1b28@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1b26@t))) (Ad5f@syntax-dispatch A1b26@t '(any any any)))) A1b18@t))) (Ad5f@syntax-dispatch A1b18@t '(any any)))) (car A1b10@clauses))))) (lambda (A1afa@e A1afb@r A1afc@mr) ((lambda (A1b00@t) ((lambda (A1b02@ls/false) (if A1b02@ls/false (apply (lambda (A1b04@expr A1b05@keys A1b06@clauses) (begin (Ad65@verify-literals A1b05@keys A1afa@e) ((lambda (A1b0a@x) ((lambda (A1b0c@body) (list (Aabe@A9fe@build-lambda '#f (list A1b0a@x) A1b0c@body) (Ad81@chi-expr A1b04@expr A1afb@r A1afc@mr))) (A1af9@gen-syntax-case A1b0a@x A1b05@keys A1b06@clauses A1afb@r A1afc@mr))) (Aae2@gen-lexical 'tmp)))) A1b02@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1b00@t))) (Ad5f@syntax-dispatch A1b00@t '(_ any each-any . each-any)))) A1afa@e)))) '#f '#f '#f '#f)))) (set! Ad69@ellipsis-map (lambda (A1b7e@proc A1b7f@ls . A1b82@ls*) ((lambda (A1b85@who) (begin (set! A1b85@who '...) (begin (if (not (list? A1b7f@ls)) (assertion-violation A1b85@who '"not a list" A1b7f@ls) (void)) (if (not (null? A1b82@ls*)) ((lambda (A1b86@n) (for-each (lambda (A1b88@x) (begin (if (not (list? A1b88@x)) (assertion-violation A1b85@who '"not a list" A1b88@x) (void)) (if (not (= (length A1b88@x) A1b86@n)) (assertion-violation A1b85@who '"length mismatch" A1b7f@ls A1b88@x) (void)))) A1b82@ls*)) (length A1b7f@ls)) (void)) (apply map A1b7e@proc A1b7f@ls A1b82@ls*)))) '#f))) (set! Ad6b@syntax-transformer ((lambda () ((lambda (A1b8b@gen-syntax A1b8d@gen-ref A1b8f@gen-append A1b91@gen-mappend A1b93@gen-map A1b95@gen-cons A1b97@gen-vector A1b99@regen) (begin (set! A1b8b@gen-syntax (lambda (A1c02@src A1c03@e A1c04@r A1c05@maps A1c06@ellipsis? A1c07@vec?) ((lambda (A1c0e@t) ((lambda (A1c10@ls/false) (if (and A1c10@ls/false (apply (lambda (A1c12@dots) (A1c06@ellipsis? A1c12@dots)) A1c10@ls/false)) (apply (lambda (A1c14@dots) (Ae3f@syntax-violation '#f '"misplaced ellipsis in syntax form" A1c02@src)) A1c10@ls/false) ((lambda (A1c16@t) ((lambda (A1c18@ls/false) (if (and A1c18@ls/false (apply (lambda (A1c1a@id) (Ab5a@id? A1c1a@id)) A1c18@ls/false)) (apply (lambda (A1c1c@id) ((lambda (A1c1e@label) ((lambda (A1c20@b) ((lambda () (if (eq? (Ab76@binding-type A1c20@b) 'syntax) (call-with-values (lambda () ((lambda (A1c26@var.lev) (A1b8d@gen-ref A1c02@src (car A1c26@var.lev) (cdr A1c26@var.lev) A1c05@maps)) (Ab78@binding-value A1c20@b))) (lambda (A1c28@A1c23 A1c29@A1c25) ((lambda (A1c2c@maps A1c2d@var) (values (list 'ref A1c2d@var) A1c2c@maps)) A1c29@A1c25 A1c28@A1c23))) (values (list 'quote A1c03@e) A1c05@maps))))) (Ab72@label->binding A1c1e@label A1c04@r))) (Ab70@id->label A1c03@e))) A1c18@ls/false) ((lambda (A1c30@t) ((lambda (A1c32@ls/false) (if (and A1c32@ls/false (apply (lambda (A1c34@dots A1c35@e) (A1c06@ellipsis? A1c34@dots)) A1c32@ls/false)) (apply (lambda (A1c38@dots A1c39@e) (if A1c07@vec? (Ae3f@syntax-violation '#f '"misplaced ellipsis in syntax form" A1c02@src) (A1b8b@gen-syntax A1c02@src A1c39@e A1c04@r A1c05@maps (lambda (A1c3c@x) '#f) '#f))) A1c32@ls/false) ((lambda (A1c3e@t) ((lambda (A1c40@ls/false) (if (and A1c40@ls/false (apply (lambda (A1c42@x A1c43@dots A1c44@y) (A1c06@ellipsis? A1c43@dots)) A1c40@ls/false)) (apply (lambda (A1c48@x A1c49@dots A1c4a@y) ((letrec ((A1c4e@f (lambda (A1c50@y A1c51@k) ((lambda (A1c54@t) ((lambda (A1c56@ls/false) (if A1c56@ls/false (apply (lambda () (A1c51@k A1c05@maps)) A1c56@ls/false) ((lambda (A1c58@t) ((lambda (A1c5a@ls/false) (if (and A1c5a@ls/false (apply (lambda (A1c5c@dots A1c5d@y) (A1c06@ellipsis? A1c5c@dots)) A1c5a@ls/false)) (apply (lambda (A1c60@dots A1c61@y) (A1c4e@f A1c61@y (lambda (A1c64@maps) (call-with-values (lambda () (A1c51@k (cons '() A1c64@maps))) (lambda (A1c6a@A1c67 A1c6b@A1c69) ((lambda (A1c6e@maps A1c6f@x) (if (null? (car A1c6e@maps)) (Ae3f@syntax-violation '#f '"extra ellipsis in syntax form" A1c02@src) (values (A1b91@gen-mappend A1c6f@x (car A1c6e@maps)) (cdr A1c6e@maps)))) A1c6b@A1c69 A1c6a@A1c67)))))) A1c5a@ls/false) ((lambda (A1c72@t) ((lambda (A1c74@ls/false) (if A1c74@ls/false (apply (lambda () (call-with-values (lambda () (A1b8b@gen-syntax A1c02@src A1c50@y A1c04@r A1c05@maps A1c06@ellipsis? A1c07@vec?)) (lambda (A1c7a@A1c77 A1c7b@A1c79) ((lambda (A1c7e@maps A1c7f@y) (call-with-values (lambda () (A1c51@k A1c7e@maps)) (lambda (A1c86@A1c83 A1c87@A1c85) ((lambda (A1c8a@maps A1c8b@x) (values (A1b8f@gen-append A1c8b@x A1c7f@y) A1c8a@maps)) A1c87@A1c85 A1c86@A1c83)))) A1c7b@A1c79 A1c7a@A1c77)))) A1c74@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1c72@t))) (Ad5f@syntax-dispatch A1c72@t '_))) A1c58@t))) (Ad5f@syntax-dispatch A1c58@t '(any . any)))) A1c54@t))) (Ad5f@syntax-dispatch A1c54@t '()))) A1c50@y)))) A1c4e@f) A1c4a@y (lambda (A1c8e@maps) (call-with-values (lambda () (A1b8b@gen-syntax A1c02@src A1c48@x A1c04@r (cons '() A1c8e@maps) A1c06@ellipsis? '#f)) (lambda (A1c94@A1c91 A1c95@A1c93) ((lambda (A1c98@maps A1c99@x) (if (null? (car A1c98@maps)) (Ae3f@syntax-violation '#f '"extra ellipsis in syntax form" A1c02@src) (values (A1b93@gen-map A1c99@x (car A1c98@maps)) (cdr A1c98@maps)))) A1c95@A1c93 A1c94@A1c91)))))) A1c40@ls/false) ((lambda (A1c9c@t) ((lambda (A1c9e@ls/false) (if A1c9e@ls/false (apply (lambda (A1ca0@x A1ca1@y) (call-with-values (lambda () (A1b8b@gen-syntax A1c02@src A1ca0@x A1c04@r A1c05@maps A1c06@ellipsis? '#f)) (lambda (A1ca8@A1ca5 A1ca9@A1ca7) ((lambda (A1cac@maps A1cad@xnew) (call-with-values (lambda () (A1b8b@gen-syntax A1c02@src A1ca1@y A1c04@r A1cac@maps A1c06@ellipsis? A1c07@vec?)) (lambda (A1cb4@A1cb1 A1cb5@A1cb3) ((lambda (A1cb8@maps A1cb9@ynew) (values (A1b95@gen-cons A1c03@e A1ca0@x A1ca1@y A1cad@xnew A1cb9@ynew) A1cb8@maps)) A1cb5@A1cb3 A1cb4@A1cb1)))) A1ca9@A1ca7 A1ca8@A1ca5)))) A1c9e@ls/false) ((lambda (A1cbc@t) ((lambda (A1cbe@ls/false) (if A1cbe@ls/false (apply (lambda (A1cc0@ls) (call-with-values (lambda () (A1b8b@gen-syntax A1c02@src A1cc0@ls A1c04@r A1c05@maps A1c06@ellipsis? '#t)) (lambda (A1cc6@A1cc3 A1cc7@A1cc5) ((lambda (A1cca@maps A1ccb@lsnew) (values (A1b97@gen-vector A1c03@e A1cc0@ls A1ccb@lsnew) A1cca@maps)) A1cc7@A1cc5 A1cc6@A1cc3)))) A1cbe@ls/false) ((lambda (A1cce@t) ((lambda (A1cd0@ls/false) (if A1cd0@ls/false (apply (lambda () (values (list 'quote A1c03@e) A1c05@maps)) A1cd0@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1cce@t))) (Ad5f@syntax-dispatch A1cce@t '_))) A1cbc@t))) (Ad5f@syntax-dispatch A1cbc@t '#(vector each-any)))) A1c9c@t))) (Ad5f@syntax-dispatch A1c9c@t '(any . any)))) A1c3e@t))) (Ad5f@syntax-dispatch A1c3e@t '(any any . any)))) A1c30@t))) (Ad5f@syntax-dispatch A1c30@t '(any any)))) A1c16@t))) (Ad5f@syntax-dispatch A1c16@t 'any))) A1c0e@t))) (Ad5f@syntax-dispatch A1c0e@t 'any))) A1c03@e))) (set! A1b8d@gen-ref (lambda (A1be8@src A1be9@var A1bea@level A1beb@maps) (if (= A1bea@level '0) (values A1be9@var A1beb@maps) (if (null? A1beb@maps) (Ae3f@syntax-violation '#f '"missing ellipsis in syntax form" A1be8@src) (call-with-values (lambda () (A1b8d@gen-ref A1be8@src A1be9@var (- A1bea@level '1) (cdr A1beb@maps))) (lambda (A1bf4@A1bf1 A1bf5@A1bf3) ((lambda (A1bf8@outer-maps A1bf9@outer-var) ((lambda (A1bfc@t) (if A1bfc@t ((lambda (A1bfe@b) (values (cdr A1bfe@b) A1beb@maps)) A1bfc@t) ((lambda (A1c00@inner-var) (values A1c00@inner-var (cons (cons (cons A1bf9@outer-var A1c00@inner-var) (car A1beb@maps)) A1bf8@outer-maps))) (Aae2@gen-lexical 'tmp)))) (assq A1bf9@outer-var (car A1beb@maps)))) A1bf5@A1bf3 A1bf4@A1bf1))))))) (set! A1b8f@gen-append (lambda (A1be4@x A1be5@y) (if (fast-equal? A1be5@y ''()) A1be4@x (list 'append A1be4@x A1be5@y)))) (set! A1b91@gen-mappend (lambda (A1be0@e A1be1@map-env) (list 'apply '(primitive append) (A1b93@gen-map A1be0@e A1be1@map-env)))) (set! A1b93@gen-map (lambda (A1bce@e A1bcf@map-env) ((lambda (A1bd2@formals A1bd3@actuals) (if (eq? (car A1bce@e) 'ref) (car A1bd3@actuals) (if (for-all (lambda (A1bd6@x) (and (eq? (car A1bd6@x) 'ref) (memq (cadr A1bd6@x) A1bd2@formals))) (cdr A1bce@e)) ((lambda (A1bd8@args) (cons 'map (cons (list 'primitive (car A1bce@e)) A1bd8@args))) (map ((lambda (A1bda@r) (lambda (A1bdc@x) (cdr (assq (cadr A1bdc@x) A1bda@r)))) (map cons A1bd2@formals A1bd3@actuals)) (cdr A1bce@e))) (cons* 'map (list 'lambda A1bd2@formals A1bce@e) A1bd3@actuals)))) (map cdr A1bcf@map-env) (map (lambda (A1bde@x) (list 'ref (car A1bde@x))) A1bcf@map-env)))) (set! A1b95@gen-cons (lambda (A1bbe@e A1bbf@x A1bc0@y A1bc1@xnew A1bc2@ynew) ((lambda (A1bc8@t) (if (memv A1bc8@t '(quote)) (if (eq? (car A1bc1@xnew) 'quote) ((lambda (A1bca@xnew A1bcb@ynew) (if (and (eq? A1bca@xnew A1bbf@x) (eq? A1bcb@ynew A1bc0@y)) (list 'quote A1bbe@e) (list 'quote (cons A1bca@xnew A1bcb@ynew)))) (cadr A1bc1@xnew) (cadr A1bc2@ynew)) (if (null? (cadr A1bc2@ynew)) (list 'list A1bc1@xnew) (list 'cons A1bc1@xnew A1bc2@ynew))) (if (memv A1bc8@t '(list)) (cons 'list (cons A1bc1@xnew (cdr A1bc2@ynew))) (list 'cons A1bc1@xnew A1bc2@ynew)))) (car A1bc2@ynew)))) (set! A1b97@gen-vector (lambda (A1bb8@e A1bb9@ls A1bba@lsnew) (if (eq? (car A1bba@lsnew) 'quote) (if (eq? (cadr A1bba@lsnew) A1bb9@ls) (list 'quote A1bb8@e) (list 'quote (list->vector (cadr A1bba@lsnew)))) (if (eq? (car A1bba@lsnew) 'list) (cons 'vector (cdr A1bba@lsnew)) (list 'list->vector A1bba@lsnew))))) (set! A1b99@regen (lambda (A1bb2@x) ((lambda (A1bb4@t) (if (memv A1bb4@t '(ref)) (cadr A1bb2@x) (if (memv A1bb4@t '(primitive)) (list 'primitive (cadr A1bb2@x)) (if (memv A1bb4@t '(quote)) (list 'quote (cadr A1bb2@x)) (if (memv A1bb4@t '(lambda)) (Aabe@A9fe@build-lambda '#f (cadr A1bb2@x) (A1b99@regen (caddr A1bb2@x))) (if (memv A1bb4@t '(map)) ((lambda (A1bb6@ls) (cons '(primitive ellipsis-map) A1bb6@ls)) (map A1b99@regen (cdr A1bb2@x))) (cons (list 'primitive (car A1bb2@x)) (map A1b99@regen (cdr A1bb2@x))))))))) (car A1bb2@x)))) (lambda (A1b9a@e A1b9b@r A1b9c@mr) ((lambda (A1ba0@t) ((lambda (A1ba2@ls/false) (if A1ba2@ls/false (apply (lambda (A1ba4@x) (call-with-values (lambda () (A1b8b@gen-syntax A1b9a@e A1ba4@x A1b9b@r '() Ad61@ellipsis? '#f)) (lambda (A1baa@A1ba7 A1bab@A1ba9) ((lambda (A1bae@maps A1baf@e) (A1b99@regen A1baf@e)) A1bab@A1ba9 A1baa@A1ba7)))) A1ba2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1ba0@t))) (Ad5f@syntax-dispatch A1ba0@t '(_ any)))) A1b9a@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! Ad6d@core-macro-transformer (lambda (A1cd2@name) ((lambda (A1cd4@t) (if (memv A1cd4@t '(quote)) Ad0f@quote-transformer (if (memv A1cd4@t '(lambda)) Ad13@lambda-transformer (if (memv A1cd4@t '(case-lambda)) Ad11@case-lambda-transformer (if (memv A1cd4@t '(letrec)) Acf7@letrec-transformer (if (memv A1cd4@t '(letrec*)) Acf9@letrec*-transformer (if (memv A1cd4@t '(if)) Ad07@if-transformer (if (memv A1cd4@t '(and)) Ad09@and-transformer (if (memv A1cd4@t '(or)) Ad0b@or-transformer (if (memv A1cd4@t '(foreign-call)) Ad5b@foreign-call-transformer (if (memv A1cd4@t '(syntax-case)) Ad67@syntax-case-transformer (if (memv A1cd4@t '(syntax)) Ad6b@syntax-transformer (if (memv A1cd4@t '(type-descriptor)) Acfd@type-descriptor-transformer (if (memv A1cd4@t '(record-type-descriptor)) Acff@record-type-descriptor-transformer (if (memv A1cd4@t '(record-constructor-descriptor)) Ad01@record-constructor-descriptor-transformer (if (memv A1cd4@t '(fluid-let-syntax)) Acfb@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" A1cd2@name))))))))))))))))) A1cd2@name))) (set! Ad6f@symbol-macro (lambda (A1cd6@x A1cd7@set) ((lambda (A1cda@t) ((lambda (A1cdc@ls/false) (if (and A1cdc@ls/false (apply (lambda (A1cde@name) (and (Ab5a@id? A1cde@name) (memq (Ab5c@id->sym A1cde@name) A1cd7@set))) A1cdc@ls/false)) (apply (lambda (A1ce0@name) (Ad15@bless (list 'quote A1ce0@name))) A1cdc@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1cda@t))) (Ad5f@syntax-dispatch A1cda@t '(_ any)))) A1cd6@x))) (set! Ad71@macro-transformer (lambda (A1ce2@x) (if (procedure? A1ce2@x) A1ce2@x (if (symbol? A1ce2@x) ((lambda (A1ce4@t) (if (memv A1ce4@t '(define-record-type)) Ad53@define-record-type-macro (if (memv A1ce4@t '(define-struct)) Ad51@define-struct-macro (if (memv A1ce4@t '(include)) Ad47@include-macro (if (memv A1ce4@t '(cond)) Ad43@cond-macro (if (memv A1ce4@t '(let)) Ad1b@let-macro (if (memv A1ce4@t '(do)) Ad3b@do-macro (if (memv A1ce4@t '(or)) Ad3f@or-macro (if (memv A1ce4@t '(and)) Ad41@and-macro (if (memv A1ce4@t '(let*)) Ad3d@let*-macro (if (memv A1ce4@t '(let-values)) Ad1d@let-values-macro (if (memv A1ce4@t '(let*-values)) Ad1f@let*-values-macro (if (memv A1ce4@t '(syntax-rules)) Ad4b@syntax-rules-macro (if (memv A1ce4@t '(quasiquote)) Ad4d@quasiquote-macro (if (memv A1ce4@t '(quasisyntax)) Ad4f@quasisyntax-macro (if (memv A1ce4@t '(with-syntax)) Ad17@with-syntax-macro (if (memv A1ce4@t '(when)) Ad03@when-macro (if (memv A1ce4@t '(unless)) Ad05@unless-macro (if (memv A1ce4@t '(case)) Ad0d@case-macro (if (memv A1ce4@t '(identifier-syntax)) Ad39@identifier-syntax-macro (if (memv A1ce4@t '(time)) Ad31@time-macro (if (memv A1ce4@t '(delay)) Ad33@delay-macro (if (memv A1ce4@t '(assert)) Ad35@assert-macro (if (memv A1ce4@t '(endianness)) Ad37@endianness-macro (if (memv A1ce4@t '(guard)) Ad2d@guard-macro (if (memv A1ce4@t '(define-enumeration)) Ad2f@define-enumeration-macro (if (memv A1ce4@t '(trace-lambda)) Ad21@trace-lambda-macro (if (memv A1ce4@t '(trace-define)) Ad23@trace-define-macro (if (memv A1ce4@t '(trace-define-syntax)) Ad25@trace-define-syntax-macro (if (memv A1ce4@t '(trace-let-syntax)) Ad29@trace-let-syntax-macro (if (memv A1ce4@t '(trace-letrec-syntax)) Ad2b@trace-letrec-syntax-macro (if (memv A1ce4@t '(define-condition-type)) Ad55@define-condition-type-macro (if (memv A1ce4@t '(parameterize)) Ad59@parameterize-macro (if (memv A1ce4@t '(include-into)) Ad49@include-into-macro (if (memv A1ce4@t '(eol-style)) (lambda (A1ce6@x) (Ad6f@symbol-macro A1ce6@x '(none lf cr crlf nel crnel ls))) (if (memv A1ce4@t '(error-handling-mode)) (lambda (A1ce8@x) (Ad6f@symbol-macro A1ce8@x '(ignore raise replace))) (if (memv A1ce4@t '(buffer-mode)) (lambda (A1cea@x) (Ad6f@symbol-macro A1cea@x '(none line block))) (if (memv A1ce4@t '(file-options)) Aad5@file-options-macro (if (memv A1ce4@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) Ad57@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" A1ce2@x)))))))))))))))))))))))))))))))))))))))) A1ce2@x) (error 'core-macro-transformer '"BUG: invalid macro" A1ce2@x))))) (set! Ad73@local-macro-transformer (lambda (A1cec@x) (car A1cec@x))) (set! Ad75@do-macro-call (lambda (A1cee@transformer A1cef@expr) ((lambda (A1cf2@out) (begin ((letrec ((A1cf4@f (lambda (A1cf6@x) (if (not (Ab26@stx? A1cf6@x)) (if (pair? A1cf6@x) (begin (A1cf4@f (car A1cf6@x)) (A1cf4@f (cdr A1cf6@x))) (if (vector? A1cf6@x) (vector-for-each A1cf4@f A1cf6@x) (if (symbol? A1cf6@x) (Ae3f@syntax-violation '#f '"raw symbol encountered in output of macro" A1cef@expr A1cf6@x) (void)))) (void))))) A1cf4@f) A1cf2@out) (Ab44@add-mark (Ab3c@gen-mark) A1cf2@out A1cef@expr))) (A1cee@transformer (Ab44@add-mark Ab3e@anti-mark A1cef@expr '#f))))) (set! Ad77@chi-macro (lambda (A1cf8@p A1cf9@e) (Ad75@do-macro-call (Ad71@macro-transformer A1cf8@p) A1cf9@e))) (set! Ad79@chi-local-macro (lambda (A1cfc@p A1cfd@e) (Ad75@do-macro-call (Ad73@local-macro-transformer A1cfc@p) A1cfd@e))) (set! Ad7b@chi-global-macro (lambda (A1d00@p A1d01@e) ((lambda (A1d04@lib A1d05@loc) (begin (A986@A7d5@visit-library A1d04@lib) ((lambda (A1d08@x) ((lambda (A1d0a@transformer) (Ad75@do-macro-call A1d0a@transformer A1d01@e)) (if (procedure? A1d08@x) A1d08@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" A1d08@x)))) (symbol-value A1d05@loc)))) (car A1d00@p) (cdr A1d00@p)))) (set! Ad7d@chi-expr* (lambda (A1d0c@e* A1d0d@r A1d0e@mr) (if (null? A1d0c@e*) '() ((lambda (A1d12@e) (cons A1d12@e (Ad7d@chi-expr* (cdr A1d0c@e*) A1d0d@r A1d0e@mr))) (Ad81@chi-expr (car A1d0c@e*) A1d0d@r A1d0e@mr))))) (set! Ad7f@chi-application (lambda (A1d14@e A1d15@r A1d16@mr) ((lambda (A1d1a@t) ((lambda (A1d1c@ls/false) (if A1d1c@ls/false (apply (lambda (A1d1e@rator A1d1f@rands) ((lambda (A1d22@rator) (cons A1d22@rator (Ad7d@chi-expr* A1d1f@rands A1d15@r A1d16@mr))) (Ad81@chi-expr A1d1e@rator A1d15@r A1d16@mr))) A1d1c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1d1a@t))) (Ad5f@syntax-dispatch A1d1a@t '(any . each-any)))) A1d14@e))) (set! Ad81@chi-expr (lambda (A1d24@e A1d25@r A1d26@mr) (call-with-values (lambda () (Ab7c@syntax-type A1d24@e A1d25@r)) (lambda (A1d30@A1d2b A1d31@A1d2d A1d32@A1d2f) ((lambda (A1d36@kwd A1d37@value A1d38@type) ((lambda (A1d3c@t) (if (memv A1d3c@t '(core-macro)) ((lambda (A1d3e@transformer) (A1d3e@transformer A1d24@e A1d25@r A1d26@mr)) (Ad6d@core-macro-transformer A1d37@value)) (if (memv A1d3c@t '(global)) ((lambda (A1d40@lib) ((lambda (A1d42@loc) ((lambda () (begin ((Adc7@inv-collector) A1d40@lib) A1d42@loc)))) (cdr A1d37@value))) (car A1d37@value)) (if (memv A1d3c@t '(core-prim)) ((lambda (A1d44@name) (list 'primitive A1d44@name)) A1d37@value) (if (memv A1d3c@t '(call)) (Ad7f@chi-application A1d24@e A1d25@r A1d26@mr) (if (memv A1d3c@t '(lexical)) ((lambda (A1d46@lex) A1d46@lex) (Aceb@lexical-var A1d37@value)) (if (memv A1d3c@t '(global-macro global-macro!)) (Ad81@chi-expr (Ad7b@chi-global-macro A1d37@value A1d24@e) A1d25@r A1d26@mr) (if (memv A1d3c@t '(local-macro local-macro!)) (Ad81@chi-expr (Ad79@chi-local-macro A1d37@value A1d24@e) A1d25@r A1d26@mr) (if (memv A1d3c@t '(macro macro!)) (Ad81@chi-expr (Ad77@chi-macro A1d37@value A1d24@e) A1d25@r A1d26@mr) (if (memv A1d3c@t '(constant)) ((lambda (A1d48@datum) (list 'quote A1d48@datum)) A1d37@value) (if (memv A1d3c@t '(set!)) (Ad83@chi-set! A1d24@e A1d25@r A1d26@mr) (if (memv A1d3c@t '(begin)) ((lambda (A1d4a@t) ((lambda (A1d4c@ls/false) (if A1d4c@ls/false (apply (lambda (A1d4e@x A1d4f@x*) (Aac1@Aa30@build-sequence '#f (Ad7d@chi-expr* (cons A1d4e@x A1d4f@x*) A1d25@r A1d26@mr))) A1d4c@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1d4a@t))) (Ad5f@syntax-dispatch A1d4a@t '(_ any . each-any)))) A1d24@e) (if (memv A1d3c@t '(let-syntax letrec-syntax)) ((lambda (A1d52@t) ((lambda (A1d54@ls/false) (if (and A1d54@ls/false (apply (lambda (A1d56@xlhs* A1d57@xrhs* A1d58@xbody A1d59@xbody*) (if (not (Ab62@valid-bound-ids? A1d56@xlhs*)) (Ae3f@syntax-violation '#f '"invalid identifiers" A1d24@e) (void))) A1d54@ls/false)) (apply (lambda (A1d5e@xlhs* A1d5f@xrhs* A1d60@xbody A1d61@xbody*) ((lambda (A1d66@xlab*) ((lambda (A1d68@xrib) ((lambda (A1d6a@xb*) ((lambda () (Aac1@Aa30@build-sequence '#f (Ad7d@chi-expr* (map (lambda (A1d6c@x) (Ab46@add-subst A1d68@xrib A1d6c@x)) (cons A1d60@xbody A1d61@xbody*)) (append (map cons A1d66@xlab* A1d6a@xb*) A1d25@r) (append (map cons A1d66@xlab* A1d6a@xb*) A1d26@mr)))))) (map (lambda (A1d6e@x) (Ab92@make-eval-transformer (Adb9@expand-transformer (if (eq? A1d38@type 'let-syntax) A1d6e@x (Ab46@add-subst A1d68@xrib A1d6e@x)) A1d26@mr))) A1d5f@xrhs*))) (Ab1a@make-full-rib A1d5e@xlhs* A1d66@xlab*))) (map Aae6@gen-label A1d5e@xlhs*))) A1d54@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1d52@t))) (Ad5f@syntax-dispatch A1d52@t '(_ #(each (any any)) any . each-any)))) A1d24@e) (if (memv A1d3c@t '(displaced-lexical)) (Ae3f@syntax-violation '#f '"identifier out of context" A1d24@e) (if (memv A1d3c@t '(syntax)) (Ae3f@syntax-violation '#f '"reference to pattern variable outside a syntax form" A1d24@e) (if (memv A1d3c@t '(define define-syntax module import library)) (Ae3f@syntax-violation '#f (string-append ((lambda (A1d70@t) (if (memv A1d70@t '(define)) '"a definition" (if (memv A1d70@t '(define-syntax)) '"a define-syntax" (if (memv A1d70@t '(module)) '"a module definition" (if (memv A1d70@t '(library)) '"a library definition" (if (memv A1d70@t '(import)) '"an import declaration" (if (memv A1d70@t '(export)) '"an export declaration" '"a non-expression"))))))) A1d38@type) '" was found where an expression was expected") A1d24@e) (if (memv A1d3c@t '(mutable)) (Ae3f@syntax-violation '#f '"attempt to reference an unexportable variable" A1d24@e) (Ae3f@syntax-violation '#f '"invalid expression" A1d24@e)))))))))))))))))) A1d38@type)) A1d32@A1d2f A1d31@A1d2d A1d30@A1d2b))))) (set! Ad83@chi-set! (lambda (A1d72@e A1d73@r A1d74@mr) ((lambda (A1d78@t) ((lambda (A1d7a@ls/false) (if (and A1d7a@ls/false (apply (lambda (A1d7c@x A1d7d@v) (Ab5a@id? A1d7c@x)) A1d7a@ls/false)) (apply (lambda (A1d80@x A1d81@v) (call-with-values (lambda () (Ab7c@syntax-type A1d80@x A1d73@r)) (lambda (A1d8a@A1d85 A1d8b@A1d87 A1d8c@A1d89) ((lambda (A1d90@kwd A1d91@value A1d92@type) ((lambda (A1d96@t) (if (memv A1d96@t '(lexical)) (begin (Acef@set-lexical-mutable! A1d91@value '#t) (list 'set! (Aceb@lexical-var A1d91@value) (Ad81@chi-expr A1d81@v A1d73@r A1d74@mr))) (if (memv A1d96@t '(core-prim)) (Ae3f@syntax-violation '#f '"cannot modify imported core primitive" A1d72@e) (if (memv A1d96@t '(global)) (Ae3f@syntax-violation '#f '"attempt to modify imported binding" A1d72@e) (if (memv A1d96@t '(global-macro!)) (Ad81@chi-expr (Ad7b@chi-global-macro A1d91@value A1d72@e) A1d73@r A1d74@mr) (if (memv A1d96@t '(local-macro!)) (Ad81@chi-expr (Ad79@chi-local-macro A1d91@value A1d72@e) A1d73@r A1d74@mr) (if (memv A1d96@t '(mutable)) (Ae3f@syntax-violation '#f '"attempt to assign to an unexportable variable" A1d72@e) (Ae3f@syntax-violation '#f '"invalid syntax" A1d72@e)))))))) A1d92@type)) A1d8c@A1d89 A1d8b@A1d87 A1d8a@A1d85)))) A1d7a@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1d78@t))) (Ad5f@syntax-dispatch A1d78@t '(_ any any)))) A1d72@e))) (set! Ad85@verify-formals (lambda (A1d98@fmls A1d99@stx) ((lambda (A1d9c@t) ((lambda (A1d9e@ls/false) (if A1d9e@ls/false (apply (lambda (A1da0@x*) (if (not (Ab62@valid-bound-ids? A1da0@x*)) (Ad19@invalid-fmls-error A1d99@stx A1d98@fmls) (void))) A1d9e@ls/false) ((lambda (A1da2@t) ((lambda (A1da4@ls/false) (if A1da4@ls/false (apply (lambda (A1da6@x* A1da7@x) (if (not (Ab62@valid-bound-ids? (cons A1da7@x A1da6@x*))) (Ad19@invalid-fmls-error A1d99@stx A1d98@fmls) (void))) A1da4@ls/false) ((lambda (A1daa@t) ((lambda (A1dac@ls/false) (if A1dac@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid syntax" A1d99@stx)) A1dac@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1daa@t))) (Ad5f@syntax-dispatch A1daa@t '_))) A1da2@t))) (Ad5f@syntax-dispatch A1da2@t '#(each+ any () any)))) A1d9c@t))) (Ad5f@syntax-dispatch A1d9c@t 'each-any))) A1d98@fmls))) (set! Ad87@chi-lambda-clause (lambda (A1dae@stx A1daf@fmls A1db0@body* A1db1@r A1db2@mr) ((lambda (A1db8@t) ((lambda (A1dba@ls/false) (if A1dba@ls/false (apply (lambda (A1dbc@x*) (begin (Ad85@verify-formals A1daf@fmls A1dae@stx) ((lambda (A1dbe@lex* A1dbf@lab*) (values A1dbe@lex* (Ad97@chi-internal (Ab46@add-subst (Ab1a@make-full-rib A1dbc@x* A1dbf@lab*) A1db0@body*) (Acf3@add-lexicals A1dbf@lab* A1dbe@lex* A1db1@r) A1db2@mr))) (map Aae2@gen-lexical A1dbc@x*) (map Aae6@gen-label A1dbc@x*)))) A1dba@ls/false) ((lambda (A1dc2@t) ((lambda (A1dc4@ls/false) (if A1dc4@ls/false (apply (lambda (A1dc6@x* A1dc7@x) (begin (Ad85@verify-formals A1daf@fmls A1dae@stx) ((lambda (A1dca@lex* A1dcb@lab* A1dcc@lex A1dcd@lab) (values (append A1dca@lex* A1dcc@lex) (Ad97@chi-internal (Ab46@add-subst (Ab1a@make-full-rib (cons A1dc7@x A1dc6@x*) (cons A1dcd@lab A1dcb@lab*)) A1db0@body*) (Acf3@add-lexicals (cons A1dcd@lab A1dcb@lab*) (cons A1dcc@lex A1dca@lex*) A1db1@r) A1db2@mr))) (map Aae2@gen-lexical A1dc6@x*) (map Aae6@gen-label A1dc6@x*) (Aae2@gen-lexical A1dc7@x) (Aae6@gen-label A1dc7@x)))) A1dc4@ls/false) ((lambda (A1dd2@t) ((lambda (A1dd4@ls/false) (if A1dd4@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid syntax" A1daf@fmls)) A1dd4@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1dd2@t))) (Ad5f@syntax-dispatch A1dd2@t '_))) A1dc2@t))) (Ad5f@syntax-dispatch A1dc2@t '#(each+ any () any)))) A1db8@t))) (Ad5f@syntax-dispatch A1db8@t 'each-any))) A1daf@fmls))) (set! Ad89@chi-lambda-clause* (lambda (A1dd6@stx A1dd7@fmls* A1dd8@body** A1dd9@r A1dda@mr) (if (null? A1dd7@fmls*) (values '() '()) (call-with-values (lambda () (Ad87@chi-lambda-clause A1dd6@stx (car A1dd7@fmls*) (car A1dd8@body**) A1dd9@r A1dda@mr)) (lambda (A1de4@A1de1 A1de5@A1de3) ((lambda (A1de8@b A1de9@a) (call-with-values (lambda () (Ad89@chi-lambda-clause* A1dd6@stx (cdr A1dd7@fmls*) (cdr A1dd8@body**) A1dd9@r A1dda@mr)) (lambda (A1df0@A1ded A1df1@A1def) ((lambda (A1df4@b* A1df5@a*) (values (cons A1de9@a A1df5@a*) (cons A1de8@b A1df4@b*))) A1df1@A1def A1df0@A1ded)))) A1de5@A1de3 A1de4@A1de1)))))) (set! Ad8b@chi-defun (lambda (A1df8@x A1df9@r A1dfa@mr) ((lambda (A1dfe@fmls A1dff@body*) (call-with-values (lambda () (Ad87@chi-lambda-clause A1dfe@fmls A1dfe@fmls A1dff@body* A1df9@r A1dfa@mr)) (lambda (A1e06@A1e03 A1e07@A1e05) ((lambda (A1e0a@body A1e0b@fmls) (Aabe@A9fe@build-lambda '#f A1e0b@fmls A1e0a@body)) A1e07@A1e05 A1e06@A1e03)))) (car A1df8@x) (cdr A1df8@x)))) (set! Ad8d@chi-rhs (lambda (A1e0e@rhs A1e0f@r A1e10@mr) ((lambda (A1e14@t) (if (memv A1e14@t '(defun)) (Ad8b@chi-defun (cdr A1e0e@rhs) A1e0f@r A1e10@mr) (if (memv A1e14@t '(expr)) ((lambda (A1e16@expr) (Ad81@chi-expr A1e16@expr A1e0f@r A1e10@mr)) (cdr A1e0e@rhs)) (if (memv A1e14@t '(top-expr)) ((lambda (A1e18@expr) (Aac1@Aa30@build-sequence '#f (list (Ad81@chi-expr A1e18@expr A1e0f@r A1e10@mr) (Aac2@Aa32@build-void)))) (cdr A1e0e@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" A1e0e@rhs))))) (car A1e0e@rhs)))) (set! Ad8f@expand-interaction-rhs*/init* (lambda (A1e1a@lhs* A1e1b@rhs* A1e1c@init* A1e1d@r A1e1e@mr) ((letrec ((A1e24@f (lambda (A1e26@lhs* A1e27@rhs*) (if (null? A1e26@lhs*) (map (lambda (A1e2a@x) (Ad81@chi-expr A1e2a@x A1e1d@r A1e1e@mr)) A1e1c@init*) ((lambda (A1e2c@lhs A1e2d@rhs) ((lambda (A1e30@t) (if (memv A1e30@t '(defun)) ((lambda (A1e32@rhs) (cons (list 'set! A1e2c@lhs A1e32@rhs) (A1e24@f (cdr A1e26@lhs*) (cdr A1e27@rhs*)))) (Ad8b@chi-defun (cdr A1e2d@rhs) A1e1d@r A1e1e@mr)) (if (memv A1e30@t '(expr)) ((lambda (A1e34@rhs) (cons (list 'set! A1e2c@lhs A1e34@rhs) (A1e24@f (cdr A1e26@lhs*) (cdr A1e27@rhs*)))) (Ad81@chi-expr (cdr A1e2d@rhs) A1e1d@r A1e1e@mr)) (if (memv A1e30@t '(top-expr)) ((lambda (A1e36@e) (cons A1e36@e (A1e24@f (cdr A1e26@lhs*) (cdr A1e27@rhs*)))) (Ad81@chi-expr (cdr A1e2d@rhs) A1e1d@r A1e1e@mr)) (error 'expand-interaction '"invallid" A1e2d@rhs))))) (car A1e2d@rhs))) (car A1e26@lhs*) (car A1e27@rhs*)))))) A1e24@f) A1e1a@lhs* A1e1b@rhs*))) (set! Ad91@chi-rhs* (lambda (A1e38@rhs* A1e39@r A1e3a@mr) ((letrec ((A1e3e@f (lambda (A1e40@ls) (if (null? A1e40@ls) '() ((lambda (A1e42@a) (cons A1e42@a (A1e3e@f (cdr A1e40@ls)))) (Ad8d@chi-rhs (car A1e40@ls) A1e39@r A1e3a@mr)))))) A1e3e@f) A1e38@rhs*))) (set! Ad93@find-bound=? (lambda (A1e44@x A1e45@lhs* A1e46@rhs*) (if (null? A1e45@lhs*) '#f (if (Ab5e@bound-id=? A1e44@x (car A1e45@lhs*)) (car A1e46@rhs*) (Ad93@find-bound=? A1e44@x (cdr A1e45@lhs*) (cdr A1e46@rhs*)))))) (set! Ad95@find-dups (lambda (A1e4a@ls) ((letrec ((A1e4c@f (lambda (A1e4e@ls A1e4f@dups) (if (null? A1e4e@ls) A1e4f@dups ((lambda (A1e52@t) (if A1e52@t ((lambda (A1e54@x) (A1e4c@f (cdr A1e4e@ls) (cons (list (car A1e4e@ls) A1e54@x) A1e4f@dups))) A1e52@t) (A1e4c@f (cdr A1e4e@ls) A1e4f@dups))) (Ad93@find-bound=? (car A1e4e@ls) (cdr A1e4e@ls) (cdr A1e4e@ls))))))) A1e4c@f) A1e4a@ls '()))) (set! Ad97@chi-internal (lambda (A1e56@e* A1e57@r A1e58@mr) ((lambda (A1e5c@rib) (call-with-values (lambda () (Adb7@chi-body* (map (lambda (A1e6e@x) (Ab46@add-subst A1e5c@rib A1e6e@x)) (Ab58@syntax->list A1e56@e*)) A1e57@r A1e58@mr '() '() '() '() '() A1e5c@rib '#f)) (lambda (A1e70@A1e5f A1e71@A1e61 A1e72@A1e63 A1e73@A1e65 A1e74@A1e67 A1e75@A1e69 A1e76@A1e6b A1e77@A1e6d) ((lambda (A1e80@_exp* A1e81@kwd* A1e82@mod** A1e83@rhs* A1e84@lex* A1e85@mr A1e86@r A1e87@e*) (begin (if (null? A1e87@e*) (Ae3f@syntax-violation '#f '"no expression in body" A1e87@e*) (void)) ((lambda (A1e90@init*) ((lambda (A1e92@rhs*) ((lambda () (Aac4@Aa36@build-letrec* '#f (reverse A1e84@lex*) (reverse A1e92@rhs*) (Aac1@Aa30@build-sequence '#f A1e90@init*))))) (Ad91@chi-rhs* A1e83@rhs* A1e86@r A1e85@mr))) (Ad7d@chi-expr* (append (apply append (reverse A1e82@mod**)) A1e87@e*) A1e86@r A1e85@mr)))) A1e77@A1e6d A1e76@A1e6b A1e75@A1e69 A1e74@A1e67 A1e73@A1e65 A1e72@A1e63 A1e71@A1e61 A1e70@A1e5f)))) (Ab0e@make-empty-rib)))) (set! Ad99@parse-module (lambda (A1e94@e) ((lambda (A1e96@t) ((lambda (A1e98@ls/false) (if A1e98@ls/false (apply (lambda (A1e9a@export* A1e9b@b*) (begin (if (not (for-all Ab5a@id? A1e9a@export*)) (Ae3f@syntax-violation '#f '"module exports must be identifiers" A1e94@e) (void)) (values '#f (list->vector A1e9a@export*) A1e9b@b*))) A1e98@ls/false) ((lambda (A1e9e@t) ((lambda (A1ea0@ls/false) (if A1ea0@ls/false (apply (lambda (A1ea2@name A1ea3@export* A1ea4@b*) (begin (if (not (Ab5a@id? A1ea2@name)) (Ae3f@syntax-violation '#f '"module name must be an identifier" A1e94@e) (void)) (if (not (for-all Ab5a@id? A1ea3@export*)) (Ae3f@syntax-violation '#f '"module exports must be identifiers" A1e94@e) (void)) (values A1ea2@name (list->vector A1ea3@export*) A1ea4@b*))) A1ea0@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1e9e@t))) (Ad5f@syntax-dispatch A1e9e@t '(_ any each-any . each-any)))) A1e96@t))) (Ad5f@syntax-dispatch A1e96@t '(_ each-any . each-any)))) A1e94@e))) (set! Ada3@module-interface? (lambda (A1ea8@x) (and (simple-struct? A1ea8@x) (eq? (simple-struct-name A1ea8@x) 'module-interface)))) (set! Ada5@module-interface-first-mark (lambda (A1eaa@x) (simple-struct-ref A1eaa@x '0))) (set! Ada7@set-module-interface-first-mark! (lambda (A1eac@x A1ead@val) (simple-struct-set! A1eac@x '0 A1ead@val))) (set! Ada9@module-interface-exp-id-vec (lambda (A1eb0@x) (simple-struct-ref A1eb0@x '1))) (set! Adab@set-module-interface-exp-id-vec! (lambda (A1eb2@x A1eb3@val) (simple-struct-set! A1eb2@x '1 A1eb3@val))) (set! Adad@module-interface-exp-lab-vec (lambda (A1eb6@x) (simple-struct-ref A1eb6@x '2))) (set! Adaf@set-module-interface-exp-lab-vec! (lambda (A1eb8@x A1eb9@val) (simple-struct-set! A1eb8@x '2 A1eb9@val))) (set! Adb1@dummy '3) (set! Adb3@module-interface-exp-id* (lambda (A1ebc@iface A1ebd@id) ((lambda (A1ec1@diff-marks) (begin (set! A1ec1@diff-marks (lambda (A1ec8@ls A1ec9@x) (begin (if (null? A1ec8@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (A1ecc@a) (if (eq? A1ecc@a A1ec9@x) '() (cons A1ecc@a (A1ec1@diff-marks (cdr A1ec8@ls) A1ec9@x)))) (car A1ec8@ls))))) ((lambda (A1ec2@diff A1ec3@id-vec) (if (null? A1ec2@diff) A1ec3@id-vec (vector-map (lambda (A1ec6@x) (make-simple-struct 'stx '5 (list (Ab28@stx-expr A1ec6@x) (append A1ec2@diff (Ab2c@stx-mark* A1ec6@x)) '() '()))) A1ec3@id-vec))) (A1ec1@diff-marks (Ab2c@stx-mark* A1ebd@id) (Ada5@module-interface-first-mark A1ebc@iface)) (Ada9@module-interface-exp-id-vec A1ebc@iface)))) '#f))) (set! Adb5@chi-internal-module (lambda (A1ece@e A1ecf@r A1ed0@mr A1ed1@lex* A1ed2@rhs* A1ed3@mod** A1ed4@kwd*) (call-with-values (lambda () (Ad99@parse-module A1ece@e)) (lambda (A1ee2@A1edd A1ee3@A1edf A1ee4@A1ee1) ((lambda (A1ee8@e* A1ee9@exp-id* A1eea@name) ((lambda (A1eee@rib) ((lambda (A1ef0@e*) ((lambda () (call-with-values (lambda () (Adb7@chi-body* A1ef0@e* A1ecf@r A1ed0@mr A1ed1@lex* A1ed2@rhs* A1ed3@mod** A1ed4@kwd* '() A1eee@rib '#f)) (lambda (A1f02@A1ef3 A1f03@A1ef5 A1f04@A1ef7 A1f05@A1ef9 A1f06@A1efb A1f07@A1efd A1f08@A1eff A1f09@A1f01) ((lambda (A1f12@_exp* A1f13@kwd* A1f14@mod** A1f15@rhs* A1f16@lex* A1f17@mr A1f18@r A1f19@e*) ((lambda (A1f22@exp-lab* A1f23@mod**) (if (not A1eea@name) (values A1f16@lex* A1f15@rhs* A1ee9@exp-id* A1f22@exp-lab* A1f18@r A1f17@mr A1f23@mod** A1f13@kwd*) ((lambda (A1f26@lab A1f27@iface) (values A1f16@lex* A1f15@rhs* (vector A1eea@name) (vector A1f26@lab) (cons (cons A1f26@lab (cons '$module A1f27@iface)) A1f18@r) (cons (cons A1f26@lab (cons '$module A1f27@iface)) A1f17@mr) A1f23@mod** A1f13@kwd*)) (Aae6@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (Ab2c@stx-mark* A1eea@name)) (vector-map (lambda (A1f2a@x) (make-simple-struct 'stx '5 (list (Ab28@stx-expr A1f2a@x) (Ab2c@stx-mark* A1f2a@x) '() '()))) A1ee9@exp-id*) A1f22@exp-lab*))))) (vector-map (lambda (A1f2c@x) (or (Ab70@id->label (make-simple-struct 'stx '5 (list (Ab5c@id->sym A1f2c@x) (Ab2c@stx-mark* A1f2c@x) (list A1eee@rib) '()))) (Ae3f@syntax-violation '#f '"cannot find module export" A1f2c@x))) A1ee9@exp-id*) (cons A1f19@e* A1f14@mod**))) A1f09@A1f01 A1f08@A1eff A1f07@A1efd A1f06@A1efb A1f05@A1ef9 A1f04@A1ef7 A1f03@A1ef5 A1f02@A1ef3)))))) (map (lambda (A1f2e@x) (Ab46@add-subst A1eee@rib A1f2e@x)) (Ab58@syntax->list A1ee8@e*)))) (Ab0e@make-empty-rib))) A1ee4@A1ee1 A1ee3@A1edf A1ee2@A1edd))))) (set! Adb7@chi-body* (lambda (A1f30@e* A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f36@kwd* A1f37@exp* A1f38@rib A1f39@top?) (if (null? A1f30@e*) (values A1f30@e* A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f36@kwd* A1f37@exp*) ((lambda (A1f44@e) (call-with-values (lambda () (Ab7c@syntax-type A1f44@e A1f31@r)) (lambda (A1f4c@A1f47 A1f4d@A1f49 A1f4e@A1f4b) ((lambda (A1f52@kwd A1f53@value A1f54@type) ((lambda (A1f58@kwd*) ((lambda (A1f5a@t) (if (memv A1f5a@t '(define)) (call-with-values (lambda () (Ace3@parse-define A1f44@e)) (lambda (A1f60@A1f5d A1f61@A1f5f) ((lambda (A1f64@rhs A1f65@id) (begin (if (Ab66@bound-id-member? A1f65@id A1f58@kwd*) (Ae3f@syntax-violation '#f '"cannot redefine keyword" A1f44@e) (void)) (call-with-values (lambda () (Aaea@gen-define-label+loc A1f65@id A1f38@rib)) (lambda (A1f6c@A1f69 A1f6d@A1f6b) ((lambda (A1f70@lex A1f71@lab) (begin (Ab10@extend-rib! A1f38@rib A1f65@id A1f71@lab) (Adb7@chi-body* (cdr A1f30@e*) (Acf1@add-lexical A1f71@lab A1f70@lex A1f31@r) A1f32@mr (cons A1f70@lex A1f33@lex*) (cons A1f64@rhs A1f34@rhs*) A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?))) A1f6d@A1f6b A1f6c@A1f69))))) A1f61@A1f5f A1f60@A1f5d))) (if (memv A1f5a@t '(define-syntax)) (call-with-values (lambda () (Ace5@parse-define-syntax A1f44@e)) (lambda (A1f78@A1f75 A1f79@A1f77) ((lambda (A1f7c@rhs A1f7d@id) (begin (if (Ab66@bound-id-member? A1f7d@id A1f58@kwd*) (Ae3f@syntax-violation '#f '"cannot redefine keyword" A1f44@e) (void)) ((lambda (A1f80@lab A1f81@expanded-rhs) (begin (Ab10@extend-rib! A1f38@rib A1f7d@id A1f80@lab) ((lambda (A1f84@b) (Adb7@chi-body* (cdr A1f30@e*) (cons (cons A1f80@lab A1f84@b) A1f31@r) (cons (cons A1f80@lab A1f84@b) A1f32@mr) A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?)) (Ab92@make-eval-transformer A1f81@expanded-rhs)))) (Aaec@gen-define-label A1f7d@id A1f38@rib) (Adb9@expand-transformer A1f7c@rhs A1f32@mr)))) A1f79@A1f77 A1f78@A1f75))) (if (memv A1f5a@t '(let-syntax letrec-syntax)) ((lambda (A1f86@t) ((lambda (A1f88@ls/false) (if (and A1f88@ls/false (apply (lambda (A1f8a@xlhs* A1f8b@xrhs* A1f8c@xbody*) (if (not (Ab62@valid-bound-ids? A1f8a@xlhs*)) (Ae3f@syntax-violation '#f '"invalid identifiers" A1f44@e) (void))) A1f88@ls/false)) (apply (lambda (A1f90@xlhs* A1f91@xrhs* A1f92@xbody*) ((lambda (A1f96@xlab*) ((lambda (A1f98@xrib) ((lambda (A1f9a@xb*) ((lambda () (Adb7@chi-body* (append (map (lambda (A1f9c@x) (Ab46@add-subst A1f98@xrib A1f9c@x)) A1f92@xbody*) (cdr A1f30@e*)) (append (map cons A1f96@xlab* A1f9a@xb*) A1f31@r) (append (map cons A1f96@xlab* A1f9a@xb*) A1f32@mr) A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?)))) (map (lambda (A1f9e@x) (Ab92@make-eval-transformer (Adb9@expand-transformer (if (eq? A1f54@type 'let-syntax) A1f9e@x (Ab46@add-subst A1f98@xrib A1f9e@x)) A1f32@mr))) A1f91@xrhs*))) (Ab1a@make-full-rib A1f90@xlhs* A1f96@xlab*))) (map Aae6@gen-label A1f90@xlhs*))) A1f88@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1f86@t))) (Ad5f@syntax-dispatch A1f86@t '(_ #(each (any any)) . each-any)))) A1f44@e) (if (memv A1f5a@t '(begin)) ((lambda (A1fa0@t) ((lambda (A1fa2@ls/false) (if A1fa2@ls/false (apply (lambda (A1fa4@x*) (Adb7@chi-body* (append A1fa4@x* (cdr A1f30@e*)) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?)) A1fa2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1fa0@t))) (Ad5f@syntax-dispatch A1fa0@t '(_ . each-any)))) A1f44@e) (if (memv A1f5a@t '(global-macro global-macro!)) (Adb7@chi-body* (cons (Ab46@add-subst A1f38@rib (Ad7b@chi-global-macro A1f53@value A1f44@e)) (cdr A1f30@e*)) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?) (if (memv A1f5a@t '(local-macro local-macro!)) (Adb7@chi-body* (cons (Ab46@add-subst A1f38@rib (Ad79@chi-local-macro A1f53@value A1f44@e)) (cdr A1f30@e*)) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?) (if (memv A1f5a@t '(macro macro!)) (Adb7@chi-body* (cons (Ab46@add-subst A1f38@rib (Ad77@chi-macro A1f53@value A1f44@e)) (cdr A1f30@e*)) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?) (if (memv A1f5a@t '(module)) (call-with-values (lambda () (Adb5@chi-internal-module A1f44@e A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd*)) (lambda (A1fb6@A1fa7 A1fb7@A1fa9 A1fb8@A1fab A1fb9@A1fad A1fba@A1faf A1fbb@A1fb1 A1fbc@A1fb3 A1fbd@A1fb5) ((lambda (A1fc6@kwd* A1fc7@mod** A1fc8@mr A1fc9@r A1fca@m-exp-lab* A1fcb@m-exp-id* A1fcc@rhs* A1fcd@lex*) (begin (vector-for-each (lambda (A1fd6@id A1fd7@lab) (Ab10@extend-rib! A1f38@rib A1fd6@id A1fd7@lab)) A1fcb@m-exp-id* A1fca@m-exp-lab*) (Adb7@chi-body* (cdr A1f30@e*) A1fc9@r A1fc8@mr A1fcd@lex* A1fcc@rhs* A1fc7@mod** A1fc6@kwd* A1f37@exp* A1f38@rib A1f39@top?))) A1fbd@A1fb5 A1fbc@A1fb3 A1fbb@A1fb1 A1fba@A1faf A1fb9@A1fad A1fb8@A1fab A1fb7@A1fa9 A1fb6@A1fa7))) (if (memv A1f5a@t '(library)) (begin (Ae21@library-expander (Ab6e@stx->datum A1f44@e)) (Adb7@chi-body* (cdr A1f30@e*) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?)) (if (memv A1f5a@t '(export)) ((lambda (A1fda@t) ((lambda (A1fdc@ls/false) (if A1fdc@ls/false (apply (lambda (A1fde@exp-decl*) (Adb7@chi-body* (cdr A1f30@e*) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* (append A1fde@exp-decl* A1f37@exp*) A1f38@rib A1f39@top?)) A1fdc@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A1fda@t))) (Ad5f@syntax-dispatch A1fda@t '(_ . each-any)))) A1f44@e) (if (memv A1f5a@t '(import)) ((lambda () ((lambda (A1fe1@module-import? A1fe3@module-import A1fe5@library-import) (begin (set! A1fe1@module-import? (lambda (A2034@e) ((lambda (A2036@t) ((lambda (A2038@ls/false) (if (and A2038@ls/false (apply (lambda (A203a@id) (Ab5a@id? A203a@id)) A2038@ls/false)) (apply (lambda (A203c@id) '#t) A2038@ls/false) ((lambda (A203e@t) ((lambda (A2040@ls/false) (if A2040@ls/false (apply (lambda (A2042@imp*) '#f) A2040@ls/false) ((lambda (A2044@t) ((lambda (A2046@ls/false) (if A2046@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"malformed import form" A2034@e)) A2046@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A2044@t))) (Ad5f@syntax-dispatch A2044@t '_))) A203e@t))) (Ad5f@syntax-dispatch A203e@t '(_ . each-any)))) A2036@t))) (Ad5f@syntax-dispatch A2036@t '(_ any)))) A2034@e))) (set! A1fe3@module-import (lambda (A2012@e A2013@r) ((lambda (A2016@t) ((lambda (A2018@ls/false) (if (and A2018@ls/false (apply (lambda (A201a@id) (Ab5a@id? A201a@id)) A2018@ls/false)) (apply (lambda (A201c@id) (call-with-values (lambda () (Ab7c@syntax-type A201c@id A2013@r)) (lambda (A2024@A201f A2025@A2021 A2026@A2023) ((lambda (A202a@kwd A202b@value A202c@type) ((lambda (A2030@t) (if (memv A2030@t '($module)) ((lambda (A2032@iface) (values (Adb3@module-interface-exp-id* A2032@iface A201c@id) (Adad@module-interface-exp-lab-vec A2032@iface))) A202b@value) (Ae3f@syntax-violation '#f '"invalid import" A2012@e))) A202c@type)) A2026@A2023 A2025@A2021 A2024@A201f)))) A2018@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A2016@t))) (Ad5f@syntax-dispatch A2016@t '(_ any)))) A2012@e))) (set! A1fe5@library-import (lambda (A1ff6@e) ((lambda (A1ff8@t) ((lambda (A1ffa@ls/false) (if A1ffa@ls/false (apply (lambda (A1ffc@ctxt A1ffd@imp*) (call-with-values (lambda () (Adc1@parse-import-spec* (Ae45@syntax->datum A1ffd@imp*))) (lambda (A2004@A2001 A2005@A2003) ((lambda (A2008@subst-labels A2009@subst-names) (values (vector-map (lambda (A200c@name) (Ab3a@datum->stx A1ffc@ctxt A200c@name)) A2009@subst-names) A2008@subst-labels)) A2005@A2003 A2004@A2001)))) A1ffa@ls/false) ((lambda (A200e@t) ((lambda (A2010@ls/false) (if A2010@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid import form" A1ff6@e)) A2010@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A200e@t))) (Ad5f@syntax-dispatch A200e@t '_))) A1ff8@t))) (Ad5f@syntax-dispatch A1ff8@t '(any . each-any)))) A1ff6@e))) (begin (call-with-values (lambda () (if (A1fe1@module-import? A1f44@e) (A1fe3@module-import A1f44@e A1f31@r) (A1fe5@library-import A1f44@e))) (lambda (A1fea@A1fe7 A1feb@A1fe9) ((lambda (A1fee@lab* A1fef@id*) (vector-for-each (lambda (A1ff2@id A1ff3@lab) (Ab10@extend-rib! A1f38@rib A1ff2@id A1ff3@lab)) A1fef@id* A1fee@lab*)) A1feb@A1fe9 A1fea@A1fe7))) (Adb7@chi-body* (cdr A1f30@e*) A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?)))) '#f '#f '#f))) (if A1f39@top? (Adb7@chi-body* (cdr A1f30@e*) A1f31@r A1f32@mr (cons (Aae2@gen-lexical 'dummy) A1f33@lex*) (cons (cons 'top-expr A1f44@e) A1f34@rhs*) A1f35@mod** A1f58@kwd* A1f37@exp* A1f38@rib A1f39@top?) (values A1f30@e* A1f31@r A1f32@mr A1f33@lex* A1f34@rhs* A1f35@mod** A1f58@kwd* A1f37@exp*)))))))))))))) A1f54@type)) (if (Ab5a@id? A1f52@kwd) (cons A1f52@kwd A1f36@kwd*) A1f36@kwd*))) A1f4e@A1f4b A1f4d@A1f49 A1f4c@A1f47)))) (car A1f30@e*))))) (set! Adb9@expand-transformer (lambda (A2048@expr A2049@r) ((lambda (A204c@rtc) ((lambda (A204e@expanded-rhs) (begin (for-each ((lambda (A2050@mark-visit) (lambda (A2052@x) (begin (A985@A7d3@invoke-library A2052@x) (A2050@mark-visit A2052@x)))) (Adc9@vis-collector)) (A204c@rtc)) A204e@expanded-rhs)) ((lambda (A205c@A2055 A205d@A2057 A205e@A2059 A205f@A205b) ((lambda (A2064@swap) (dynamic-wind A2064@swap (lambda () (Ad81@chi-expr A2048@expr A2049@r A2049@r)) A2064@swap)) (lambda () (begin ((lambda (A2066@t) (begin (A205c@A2055 A205e@A2059) (set! A205e@A2059 A2066@t))) (A205c@A2055)) ((lambda (A2068@t) (begin (A205d@A2057 A205f@A205b) (set! A205f@A205b A2068@t))) (A205d@A2057)))))) Adc7@inv-collector Adc9@vis-collector A204c@rtc (lambda (A206a@x) (values))))) (Adc5@make-collector)))) (set! Adbb@parse-exports (lambda (A206c@exp*) ((letrec ((A206e@f (lambda (A2070@exp* A2071@int* A2072@ext*) (if (null? A2070@exp*) (begin (if (not (Ab62@valid-bound-ids? A2072@ext*)) (Ae3f@syntax-violation 'export '"invalid exports" (Ad95@find-dups A2072@ext*)) (void)) (values (map Ae45@syntax->datum A2072@ext*) A2071@int*)) ((lambda (A2076@t) ((lambda (A2078@ls/false) (if A2078@ls/false (apply (lambda (A207a@rename A207b@i* A207c@e*) (begin (if (not (and (eq? (Ae45@syntax->datum A207a@rename) 'rename) (for-all Ab5a@id? A207b@i*) (for-all Ab5a@id? A207c@e*))) (Ae3f@syntax-violation 'export '"invalid export specifier" (car A2070@exp*)) (void)) (A206e@f (cdr A2070@exp*) (append A207b@i* A2071@int*) (append A207c@e* A2072@ext*)))) A2078@ls/false) ((lambda (A2080@t) ((lambda (A2082@ls/false) (if A2082@ls/false (apply (lambda (A2084@ie) (begin (if (not (Ab5a@id? A2084@ie)) (Ae3f@syntax-violation 'export '"invalid export" A2084@ie) (void)) (A206e@f (cdr A2070@exp*) (cons A2084@ie A2071@int*) (cons A2084@ie A2072@ext*)))) A2082@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A2080@t))) (Ad5f@syntax-dispatch A2080@t 'any))) A2076@t))) (Ad5f@syntax-dispatch A2076@t '(any . #(each (any any)))))) (car A2070@exp*)))))) A206e@f) A206c@exp* '() '()))) (set! Adbd@parse-library-name (lambda (A2086@spec) ((lambda (A2089@parse) (begin (set! A2089@parse (lambda (A2096@x) ((lambda (A2098@t) ((lambda (A209a@ls/false) (if (and A209a@ls/false (apply (lambda (A209c@v*) (for-all (lambda (A209e@x) ((lambda (A20a0@x) (and (integer? A20a0@x) (exact? A20a0@x))) (Ae45@syntax->datum A209e@x))) A209c@v*)) A209a@ls/false)) (apply (lambda (A20a2@v*) (values '() (map Ae45@syntax->datum A20a2@v*))) A209a@ls/false) ((lambda (A20a4@t) ((lambda (A20a6@ls/false) (if (and A20a6@ls/false (apply (lambda (A20a8@x A20a9@rest) (symbol? (Ae45@syntax->datum A20a8@x))) A20a6@ls/false)) (apply (lambda (A20ac@x A20ad@rest) (call-with-values (lambda () (A2089@parse A20ad@rest)) (lambda (A20b4@A20b1 A20b5@A20b3) ((lambda (A20b8@v* A20b9@x*) (values (cons (Ae45@syntax->datum A20ac@x) A20b9@x*) A20b8@v*)) A20b5@A20b3 A20b4@A20b1)))) A20a6@ls/false) ((lambda (A20bc@t) ((lambda (A20be@ls/false) (if A20be@ls/false (apply (lambda () (values '() '())) A20be@ls/false) ((lambda (A20c0@t) ((lambda (A20c2@ls/false) (if A20c2@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid library name" A2086@spec)) A20c2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A20c0@t))) (Ad5f@syntax-dispatch A20c0@t '_))) A20bc@t))) (Ad5f@syntax-dispatch A20bc@t '()))) A20a4@t))) (Ad5f@syntax-dispatch A20a4@t '(any . any)))) A2098@t))) (Ad5f@syntax-dispatch A2098@t '(each-any)))) A2096@x))) (call-with-values (lambda () (A2089@parse A2086@spec)) (lambda (A208e@A208b A208f@A208d) ((lambda (A2092@ver* A2093@name*) (begin (if (null? A2093@name*) (Ae3f@syntax-violation '#f '"empty library name" A2086@spec) (void)) (values A2093@name* A2092@ver*))) A208f@A208d A208e@A208b))))) '#f))) (set! Adbf@parse-library (lambda (A20c4@e) ((lambda (A20c6@t) ((lambda (A20c8@ls/false) (if (and A20c8@ls/false (apply (lambda (A20ca@library A20cb@name* A20cc@export A20cd@exp* A20ce@import A20cf@imp* A20d0@b*) (and (eq? (Ae45@syntax->datum A20cc@export) 'export) (eq? (Ae45@syntax->datum A20ce@import) 'import) (eq? (Ae45@syntax->datum A20ca@library) 'library))) A20c8@ls/false)) (apply (lambda (A20d8@library A20d9@name* A20da@export A20db@exp* A20dc@import A20dd@imp* A20de@b*) (values A20d9@name* A20db@exp* A20dd@imp* A20de@b*)) A20c8@ls/false) ((lambda (A20e6@t) ((lambda (A20e8@ls/false) (if A20e8@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"malformed library" A20c4@e)) A20e8@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A20e6@t))) (Ad5f@syntax-dispatch A20e6@t '_))) A20c6@t))) (Ad5f@syntax-dispatch A20c6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) A20c4@e))) (set! Adc1@parse-import-spec* ((lambda () ((lambda (A20eb@idsyn? A20ed@dup-error A20ef@merge-substs A20f1@exclude* A20f3@find* A20f5@rem* A20f7@remove-dups A20f9@parse-library-name A20fb@import-library A20fd@get-import A20ff@add-imports!) (begin (set! A20eb@idsyn? (lambda (A22f4@x) (symbol? (Ae45@syntax->datum A22f4@x)))) (set! A20ed@dup-error (lambda (A22f2@name) (Ae3f@syntax-violation 'import '"two imports with different bindings" A22f2@name))) (set! A20ef@merge-substs (lambda (A22e0@s A22e1@subst) ((lambda (A22e5@insert-to-subst) (begin (set! A22e5@insert-to-subst (lambda (A22e6@a A22e7@subst) ((lambda (A22ea@name A22eb@label) ((lambda (A22ee@t) (if A22ee@t ((lambda (A22f0@x) (if (eq? (cdr A22f0@x) A22eb@label) A22e7@subst (A20ed@dup-error A22ea@name))) A22ee@t) (cons A22e6@a A22e7@subst))) (assq A22ea@name A22e7@subst))) (car A22e6@a) (cdr A22e6@a)))) (if (null? A22e0@s) A22e1@subst (A22e5@insert-to-subst (car A22e0@s) (A20ef@merge-substs (cdr A22e0@s) A22e1@subst))))) '#f))) (set! A20f1@exclude* (lambda (A22b0@sym* A22b1@subst) ((lambda (A22b5@exclude) (begin (set! A22b5@exclude (lambda (A22ce@sym A22cf@subst) (if (null? A22cf@subst) (Ae3f@syntax-violation 'import '"cannot rename unbound identifier" A22ce@sym) (if (eq? A22ce@sym (caar A22cf@subst)) (values (cdar A22cf@subst) (cdr A22cf@subst)) ((lambda (A22d2@a) (call-with-values (lambda () (A22b5@exclude A22ce@sym (cdr A22cf@subst))) (lambda (A22d8@A22d5 A22d9@A22d7) ((lambda (A22dc@subst A22dd@old) (values A22dd@old (cons A22d2@a A22dc@subst))) A22d9@A22d7 A22d8@A22d5)))) (car A22cf@subst)))))) (if (null? A22b0@sym*) (values '() A22b1@subst) (call-with-values (lambda () (A22b5@exclude (car A22b0@sym*) A22b1@subst)) (lambda (A22ba@A22b7 A22bb@A22b9) ((lambda (A22be@subst A22bf@old) (call-with-values (lambda () (A20f1@exclude* (cdr A22b0@sym*) A22be@subst)) (lambda (A22c6@A22c3 A22c7@A22c5) ((lambda (A22ca@subst A22cb@old*) (values (cons A22bf@old A22cb@old*) A22ca@subst)) A22c7@A22c5 A22c6@A22c3)))) A22bb@A22b9 A22ba@A22b7)))))) '#f))) (set! A20f3@find* (lambda (A22a8@sym* A22a9@subst) (map (lambda (A22ac@x) ((lambda (A22ae@t) (if A22ae@t (cdr A22ae@t) (Ae3f@syntax-violation 'import '"cannot find identifier" A22ac@x))) (assq A22ac@x A22a9@subst))) A22a8@sym*))) (set! A20f5@rem* (lambda (A22a0@sym* A22a1@subst) ((letrec ((A22a4@f (lambda (A22a6@subst) (if (null? A22a6@subst) '() (if (memq (caar A22a6@subst) A22a0@sym*) (A22a4@f (cdr A22a6@subst)) (cons (car A22a6@subst) (A22a4@f (cdr A22a6@subst)))))))) A22a4@f) A22a1@subst))) (set! A20f7@remove-dups (lambda (A229e@ls) (if (null? A229e@ls) '() (if (memq (car A229e@ls) (cdr A229e@ls)) (A20f7@remove-dups (cdr A229e@ls)) (cons (car A229e@ls) (A20f7@remove-dups (cdr A229e@ls))))))) (set! A20f9@parse-library-name (lambda (A21b6@spec) ((lambda (A21b9@subversion? A21bb@subversion-pred A21bd@version-pred) (begin (set! A21b9@subversion? (lambda (A229a@x) ((lambda (A229c@x) (and (integer? A229c@x) (exact? A229c@x) (>= A229c@x '0))) (Ae45@syntax->datum A229a@x)))) (set! A21bb@subversion-pred (lambda (A223a@x*) ((lambda (A223c@t) ((lambda (A223e@ls/false) (if (and A223e@ls/false (apply (lambda (A2240@n) (A21b9@subversion? A2240@n)) A223e@ls/false)) (apply (lambda (A2242@n) (lambda (A2244@x) (= A2244@x (Ae45@syntax->datum A2242@n)))) A223e@ls/false) ((lambda (A2246@t) ((lambda (A2248@ls/false) (if (and A2248@ls/false (apply (lambda (A224a@p? A224b@sub*) (eq? (Ae45@syntax->datum A224a@p?) 'and)) A2248@ls/false)) (apply (lambda (A224e@p? A224f@sub*) ((lambda (A2252@p*) (lambda (A2254@x) (for-all (lambda (A2256@p) (A2256@p A2254@x)) A2252@p*))) (map A21bb@subversion-pred A224f@sub*))) A2248@ls/false) ((lambda (A2258@t) ((lambda (A225a@ls/false) (if (and A225a@ls/false (apply (lambda (A225c@p? A225d@sub*) (eq? (Ae45@syntax->datum A225c@p?) 'or)) A225a@ls/false)) (apply (lambda (A2260@p? A2261@sub*) ((lambda (A2264@p*) (lambda (A2266@x) (exists (lambda (A2268@p) (A2268@p A2266@x)) A2264@p*))) (map A21bb@subversion-pred A2261@sub*))) A225a@ls/false) ((lambda (A226a@t) ((lambda (A226c@ls/false) (if (and A226c@ls/false (apply (lambda (A226e@p? A226f@sub) (eq? (Ae45@syntax->datum A226e@p?) 'not)) A226c@ls/false)) (apply (lambda (A2272@p? A2273@sub) ((lambda (A2276@p) (lambda (A2278@x) (not (A2276@p A2278@x)))) (A21bb@subversion-pred A2273@sub))) A226c@ls/false) ((lambda (A227a@t) ((lambda (A227c@ls/false) (if (and A227c@ls/false (apply (lambda (A227e@p? A227f@n) (and (eq? (Ae45@syntax->datum A227e@p?) '<=) (A21b9@subversion? A227f@n))) A227c@ls/false)) (apply (lambda (A2282@p? A2283@n) (lambda (A2286@x) (<= A2286@x (Ae45@syntax->datum A2283@n)))) A227c@ls/false) ((lambda (A2288@t) ((lambda (A228a@ls/false) (if (and A228a@ls/false (apply (lambda (A228c@p? A228d@n) (and (eq? (Ae45@syntax->datum A228c@p?) '>=) (A21b9@subversion? A228d@n))) A228a@ls/false)) (apply (lambda (A2290@p? A2291@n) (lambda (A2294@x) (>= A2294@x (Ae45@syntax->datum A2291@n)))) A228a@ls/false) ((lambda (A2296@t) ((lambda (A2298@ls/false) (if A2298@ls/false (apply (lambda () (Ae3f@syntax-violation 'import '"invalid sub-version spec" A21b6@spec A223a@x*)) A2298@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A2296@t))) (Ad5f@syntax-dispatch A2296@t '_))) A2288@t))) (Ad5f@syntax-dispatch A2288@t '(any any)))) A227a@t))) (Ad5f@syntax-dispatch A227a@t '(any any)))) A226a@t))) (Ad5f@syntax-dispatch A226a@t '(any any)))) A2258@t))) (Ad5f@syntax-dispatch A2258@t '(any . each-any)))) A2246@t))) (Ad5f@syntax-dispatch A2246@t '(any . each-any)))) A223c@t))) (Ad5f@syntax-dispatch A223c@t 'any))) A223a@x*))) (set! A21bd@version-pred (lambda (A21ea@x*) ((lambda (A21ec@t) ((lambda (A21ee@ls/false) (if A21ee@ls/false (apply (lambda () (lambda (A21f0@x) '#t)) A21ee@ls/false) ((lambda (A21f2@t) ((lambda (A21f4@ls/false) (if (and A21f4@ls/false (apply (lambda (A21f6@c A21f7@ver*) (eq? (Ae45@syntax->datum A21f6@c) 'and)) A21f4@ls/false)) (apply (lambda (A21fa@c A21fb@ver*) ((lambda (A21fe@p*) (lambda (A2200@x) (for-all (lambda (A2202@p) (A2202@p A2200@x)) A21fe@p*))) (map A21bd@version-pred A21fb@ver*))) A21f4@ls/false) ((lambda (A2204@t) ((lambda (A2206@ls/false) (if (and A2206@ls/false (apply (lambda (A2208@c A2209@ver*) (eq? (Ae45@syntax->datum A2208@c) 'or)) A2206@ls/false)) (apply (lambda (A220c@c A220d@ver*) ((lambda (A2210@p*) (lambda (A2212@x) (exists (lambda (A2214@p) (A2214@p A2212@x)) A2210@p*))) (map A21bd@version-pred A220d@ver*))) A2206@ls/false) ((lambda (A2216@t) ((lambda (A2218@ls/false) (if (and A2218@ls/false (apply (lambda (A221a@c A221b@ver) (eq? (Ae45@syntax->datum A221a@c) 'not)) A2218@ls/false)) (apply (lambda (A221e@c A221f@ver) ((lambda (A2222@p) (lambda (A2224@x) (not (A2222@p A2224@x)))) (A21bd@version-pred A221f@ver))) A2218@ls/false) ((lambda (A2226@t) ((lambda (A2228@ls/false) (if A2228@ls/false (apply (lambda (A222a@sub*) ((lambda (A222c@p*) (lambda (A222e@x) ((letrec ((A2230@f (lambda (A2232@p* A2233@x) (if (null? A2232@p*) '#t (if (null? A2233@x) '#f (and ((car A2232@p*) (car A2233@x)) (A2230@f (cdr A2232@p*) (cdr A2233@x)))))))) A2230@f) A222c@p* A222e@x))) (map A21bb@subversion-pred A222a@sub*))) A2228@ls/false) ((lambda (A2236@t) ((lambda (A2238@ls/false) (if A2238@ls/false (apply (lambda () (Ae3f@syntax-violation 'import '"invalid version spec" A21b6@spec A21ea@x*)) A2238@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A2236@t))) (Ad5f@syntax-dispatch A2236@t '_))) A2226@t))) (Ad5f@syntax-dispatch A2226@t 'each-any))) A2216@t))) (Ad5f@syntax-dispatch A2216@t '(any any)))) A2204@t))) (Ad5f@syntax-dispatch A2204@t '(any . each-any)))) A21f2@t))) (Ad5f@syntax-dispatch A21f2@t '(any . each-any)))) A21ec@t))) (Ad5f@syntax-dispatch A21ec@t '()))) A21ea@x*))) ((letrec ((A21be@f (lambda (A21c0@x) ((lambda (A21c2@t) ((lambda (A21c4@ls/false) (if A21c4@ls/false (apply (lambda (A21c6@version-spec*) (values '() (A21bd@version-pred A21c6@version-spec*))) A21c4@ls/false) ((lambda (A21c8@t) ((lambda (A21ca@ls/false) (if (and A21ca@ls/false (apply (lambda (A21cc@x A21cd@x*) (A20eb@idsyn? A21cc@x)) A21ca@ls/false)) (apply (lambda (A21d0@x A21d1@x*) (call-with-values (lambda () (A21be@f A21d1@x*)) (lambda (A21d8@A21d5 A21d9@A21d7) ((lambda (A21dc@pred A21dd@name) (values (cons (Ae45@syntax->datum A21d0@x) A21dd@name) A21dc@pred)) A21d9@A21d7 A21d8@A21d5)))) A21ca@ls/false) ((lambda (A21e0@t) ((lambda (A21e2@ls/false) (if A21e2@ls/false (apply (lambda () (values '() (lambda (A21e4@x) '#t))) A21e2@ls/false) ((lambda (A21e6@t) ((lambda (A21e8@ls/false) (if A21e8@ls/false (apply (lambda () (Ae3f@syntax-violation '#f '"invalid import spec" A21b6@spec)) A21e8@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A21e6@t))) (Ad5f@syntax-dispatch A21e6@t '_))) A21e0@t))) (Ad5f@syntax-dispatch A21e0@t '()))) A21c8@t))) (Ad5f@syntax-dispatch A21c8@t '(any . any)))) A21c2@t))) (Ad5f@syntax-dispatch A21c2@t '(each-any)))) A21c0@x)))) A21be@f) A21b6@spec))) '#f '#f '#f))) (set! A20fb@import-library (lambda (A21a6@spec*) (call-with-values (lambda () (A20f9@parse-library-name A21a6@spec*)) (lambda (A21ac@A21a9 A21ad@A21ab) ((lambda (A21b0@pred A21b1@name) (begin (if (null? A21b1@name) (Ae3f@syntax-violation 'import '"empty library name" A21a6@spec*) (void)) ((lambda (A21b4@lib) (begin (if (not A21b4@lib) (Ae3f@syntax-violation 'import '"cannot find library with required name" A21b1@name) (void)) (if (not (A21b0@pred (A958@A779@library-version A21b4@lib))) (Ae3f@syntax-violation 'import '"library does not satisfy version specification" A21a6@spec* A21b4@lib) (void)) ((Adcb@imp-collector) A21b4@lib) (A960@A789@library-subst A21b4@lib))) (A97e@A7c5@find-library-by-name A21b1@name)))) A21ad@A21ab A21ac@A21a9))))) (set! A20fd@get-import (lambda (A2118@spec) ((lambda (A211a@t) ((lambda (A211c@ls/false) (if (and A211c@ls/false (apply (lambda (A211e@x A211f@x*) (not (memq (Ae45@syntax->datum A211e@x) '(for rename except only prefix library)))) A211c@ls/false)) (apply (lambda (A2122@x A2123@x*) (A20fb@import-library (cons A2122@x A2123@x*))) A211c@ls/false) ((lambda (A2126@t) ((lambda (A2128@ls/false) (if (and A2128@ls/false (apply (lambda (A212a@rename A212b@isp A212c@old* A212d@new*) (and (eq? (Ae45@syntax->datum A212a@rename) 'rename) (for-all A20eb@idsyn? A212c@old*) (for-all A20eb@idsyn? A212d@new*))) A2128@ls/false)) (apply (lambda (A2132@rename A2133@isp A2134@old* A2135@new*) ((lambda (A213a@subst A213b@old* A213c@new*) ((lambda (A2140@old-label*) ((lambda (A2142@subst) (A20ef@merge-substs (map cons A213c@new* A2140@old-label*) A2142@subst)) (A20f5@rem* A213b@old* A213a@subst))) (A20f3@find* A213b@old* A213a@subst))) (A20fd@get-import A2133@isp) (map Ae45@syntax->datum A2134@old*) (map Ae45@syntax->datum A2135@new*))) A2128@ls/false) ((lambda (A2144@t) ((lambda (A2146@ls/false) (if (and A2146@ls/false (apply (lambda (A2148@except A2149@isp A214a@sym*) (and (eq? (Ae45@syntax->datum A2148@except) 'except) (for-all A20eb@idsyn? A214a@sym*))) A2146@ls/false)) (apply (lambda (A214e@except A214f@isp A2150@sym*) ((lambda (A2154@subst) (A20f5@rem* (map Ae45@syntax->datum A2150@sym*) A2154@subst)) (A20fd@get-import A214f@isp))) A2146@ls/false) ((lambda (A2156@t) ((lambda (A2158@ls/false) (if (and A2158@ls/false (apply (lambda (A215a@only A215b@isp A215c@sym*) (and (eq? (Ae45@syntax->datum A215a@only) 'only) (for-all A20eb@idsyn? A215c@sym*))) A2158@ls/false)) (apply (lambda (A2160@only A2161@isp A2162@sym*) ((lambda (A2166@subst A2167@sym*) ((lambda (A216a@sym*) ((lambda (A216c@lab*) (map cons A216a@sym* A216c@lab*)) (A20f3@find* A216a@sym* A2166@subst))) (A20f7@remove-dups A2167@sym*))) (A20fd@get-import A2161@isp) (map Ae45@syntax->datum A2162@sym*))) A2158@ls/false) ((lambda (A216e@t) ((lambda (A2170@ls/false) (if (and A2170@ls/false (apply (lambda (A2172@prefix A2173@isp A2174@p) (and (eq? (Ae45@syntax->datum A2172@prefix) 'prefix) (A20eb@idsyn? A2174@p))) A2170@ls/false)) (apply (lambda (A2178@prefix A2179@isp A217a@p) ((lambda (A217e@subst A217f@prefix) (map (lambda (A2182@x) (cons (string->symbol (string-append A217f@prefix (symbol->string (car A2182@x)))) (cdr A2182@x))) A217e@subst)) (A20fd@get-import A2179@isp) (symbol->string (Ae45@syntax->datum A217a@p)))) A2170@ls/false) ((lambda (A2184@t) ((lambda (A2186@ls/false) (if (and A2186@ls/false (apply (lambda (A2188@library A2189@spec*) (eq? (Ae45@syntax->datum A2188@library) 'library)) A2186@ls/false)) (apply (lambda (A218c@library A218d@spec*) (A20fb@import-library A218d@spec*)) A2186@ls/false) ((lambda (A2190@t) ((lambda (A2192@ls/false) (if (and A2192@ls/false (apply (lambda (A2194@for A2195@isp A2196@rest) (eq? (Ae45@syntax->datum A2194@for) 'for)) A2192@ls/false)) (apply (lambda (A219a@for A219b@isp A219c@rest) (A20fd@get-import A219b@isp)) A2192@ls/false) ((lambda (A21a0@t) ((lambda (A21a2@ls/false) (if A21a2@ls/false (apply (lambda (A21a4@spec) (Ae3f@syntax-violation 'import '"invalid import spec" A21a4@spec)) A21a2@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A21a0@t))) (Ad5f@syntax-dispatch A21a0@t 'any))) A2190@t))) (Ad5f@syntax-dispatch A2190@t '(any any . any)))) A2184@t))) (Ad5f@syntax-dispatch A2184@t '(any each-any)))) A216e@t))) (Ad5f@syntax-dispatch A216e@t '(any any any)))) A2156@t))) (Ad5f@syntax-dispatch A2156@t '(any any . each-any)))) A2144@t))) (Ad5f@syntax-dispatch A2144@t '(any any . each-any)))) A2126@t))) (Ad5f@syntax-dispatch A2126@t '(any any . #(each (any any)))))) A211a@t))) (Ad5f@syntax-dispatch A211a@t '(any . each-any)))) A2118@spec))) (set! A20ff@add-imports! (lambda (A2108@imp A2109@h) ((lambda (A210c@subst) (for-each (lambda (A210e@x) ((lambda (A2110@name A2111@label) ((lambda (A2114@t) (if A2114@t ((lambda (A2116@l) (if (not (eq? A2116@l A2111@label)) (A20ed@dup-error A2110@name) (void))) A2114@t) (hashtable-set! A2109@h A2110@name A2111@label))) (hashtable-ref A2109@h A2110@name '#f))) (car A210e@x) (cdr A210e@x))) A210c@subst)) (A20fd@get-import A2108@imp)))) (lambda (A2100@imp*) ((letrec ((A2102@f (lambda (A2104@imp* A2105@h) (if (null? A2104@imp*) (hashtable-entries A2105@h) (begin (A20ff@add-imports! (car A2104@imp*) A2105@h) (A2102@f (cdr A2104@imp*) A2105@h)))))) A2102@f) A2100@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! Adc3@make-top-rib (lambda (A22f6@names A22f7@labels) ((lambda (A22fa@rib) (begin (vector-for-each (lambda (A22fc@name A22fd@label) (begin (if (not (symbol? A22fc@name)) (error 'make-top-rib '"BUG: not a symbol" A22fc@name) (void)) (Ab12@extend-rib/nc! A22fa@rib (make-simple-struct 'stx '5 (list A22fc@name Aade@top-mark* '() '())) A22fd@label))) A22f6@names A22f7@labels) A22fa@rib)) (Ab0e@make-empty-rib)))) (set! Adc5@make-collector (lambda () ((lambda (A2300@ls) (lambda A2304 ((lambda (A2305) (if (= A2305 '0) (apply (lambda () A2300@ls) A2304) (if (= A2305 '1) (apply (lambda (A2302@x) (set! A2300@ls (Aad7@set-cons A2302@x A2300@ls))) A2304) (error 'apply '"invalid arg count")))) (length A2304)))) '()))) (set! Adc7@inv-collector (A6b9@A598@make-parameter (lambda A2306@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (A2308@x) (begin (if (not (procedure? A2308@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" A2308@x) (void)) A2308@x)))) (set! Adc9@vis-collector (A6b9@A598@make-parameter (lambda A230a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (A230c@x) (begin (if (not (procedure? A230c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" A230c@x) (void)) A230c@x)))) (set! Adcb@imp-collector (A6b9@A598@make-parameter (lambda A230e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (A2310@x) (begin (if (not (procedure? A2310@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" A2310@x) (void)) A2310@x)))) (set! Adcd@chi-library-internal (lambda (A2312@e* A2313@rib A2314@top?) (call-with-values (lambda () (Adb7@chi-body* A2312@e* '() '() '() '() '() '() '() A2313@rib A2314@top?)) (lambda (A2328@A2319 A2329@A231b A232a@A231d A232b@A231f A232c@A2321 A232d@A2323 A232e@A2325 A232f@A2327) ((lambda (A2338@exp* A2339@_kwd* A233a@mod** A233b@rhs* A233c@lex* A233d@mr A233e@r A233f@e*) (values (append (apply append (reverse A233a@mod**)) A233f@e*) A233e@r A233d@mr (reverse A233c@lex*) (reverse A233b@rhs*) A2338@exp*)) A232f@A2327 A232e@A2325 A232d@A2323 A232c@A2321 A232b@A231f A232a@A231d A2329@A231b A2328@A2319))))) (set! Adcf@chi-interaction-expr (lambda (A2348@e A2349@rib A234a@r) (call-with-values (lambda () (Adb7@chi-body* (list A2348@e) A234a@r A234a@r '() '() '() '() '() A2349@rib '#t)) (lambda (A235e@A234f A235f@A2351 A2360@A2353 A2361@A2355 A2362@A2357 A2363@A2359 A2364@A235b A2365@A235d) ((lambda (A236e@_exp* A236f@_kwd* A2370@mod** A2371@rhs* A2372@lex* A2373@mr A2374@r A2375@e*) ((lambda (A237e@e*) ((lambda (A2380@e) (values A2380@e A2374@r)) (if (null? A237e@e*) (Aac2@Aa32@build-void) (if (null? (cdr A237e@e*)) (car A237e@e*) (Aac1@Aa30@build-sequence '#f A237e@e*))))) (Ad8f@expand-interaction-rhs*/init* (reverse A2372@lex*) (reverse A2371@rhs*) (append (apply append (reverse A2370@mod**)) A2375@e*) A2374@r A2373@mr))) A2365@A235d A2364@A235b A2363@A2359 A2362@A2357 A2361@A2355 A2360@A2353 A235f@A2351 A235e@A234f))))) (set! Add1@library-body-expander (lambda (A2382@name A2383@main-exp* A2384@imp* A2385@b* A2386@top?) ((lambda (A238d@itc) (begin (set! A238d@itc (Adc5@make-collector)) ((lambda (A2396@A238f A2397@A2391 A2398@A2393 A2399@A2395) ((lambda (A239e@swap) (dynamic-wind A239e@swap (lambda () (call-with-values (lambda () (Adc1@parse-import-spec* A2384@imp*)) (lambda (A23a4@A23a1 A23a5@A23a3) ((lambda (A23a8@subst-labels A23a9@subst-names) ((lambda (A23ac@rib) ((lambda (A23af@wrap) (begin (set! A23af@wrap (lambda (A242a@x) (make-simple-struct 'stx '5 (list A242a@x Aade@top-mark* (list A23ac@rib) '())))) ((lambda (A23b0@b* A23b1@main-exp* A23b2@rtc A23b3@vtc) ((lambda (A23c0@A23b9 A23c1@A23bb A23c2@A23bd A23c3@A23bf) ((lambda (A23c8@swap) (dynamic-wind A23c8@swap (lambda () (call-with-values (lambda () (Adcd@chi-library-internal A23b0@b* A23ac@rib A2386@top?)) (lambda (A23d6@A23cb A23d7@A23cd A23d8@A23cf A23d9@A23d1 A23da@A23d3 A23db@A23d5) ((lambda (A23e2@internal-exp* A23e3@rhs* A23e4@lex* A23e5@mr A23e6@r A23e7@init*) (call-with-values (lambda () (Adbb@parse-exports (append A23b1@main-exp* A23e2@internal-exp*))) (lambda (A23f2@A23ef A23f3@A23f1) ((lambda (A23f6@exp-id* A23f7@exp-name*) (begin (Ab16@seal-rib! A23ac@rib) ((lambda (A23fa@init*) ((lambda (A23fc@rhs*) ((lambda () (begin (Ab18@unseal-rib! A23ac@rib) ((lambda (A23fe@loc* A23ff@export-subst) ((lambda (A2403@errstr) (begin (set! A2403@errstr '"attempt to export mutated variable") (call-with-values (lambda () (Ae2b@make-export-env/macros A23e4@lex* A23fe@loc* A23e6@r)) (lambda (A240a@A2405 A240b@A2407 A240c@A2409) ((lambda (A2410@macro* A2411@global* A2412@export-env) (begin (for-each (lambda (A2416@s) ((lambda (A2418@name A2419@label) ((lambda (A241c@p) (if A241c@p ((lambda (A241e@b) ((lambda (A2420@type) (if (eq? A2420@type 'mutable) (Ae3f@syntax-violation 'export A2403@errstr A2418@name) (void))) (car A241e@b))) (cdr A241c@p)) (void))) (assq A2419@label A2412@export-env))) (car A2416@s) (cdr A2416@s))) A23ff@export-subst) ((lambda (A2422@invoke-body A2423@invoke-definitions) (values (A238d@itc) (A23b2@rtc) (A23b3@vtc) (Aac1@Aa30@build-sequence '#f (append A2423@invoke-definitions (list A2422@invoke-body))) A2410@macro* A23ff@export-subst A2412@export-env)) (Aac4@Aa36@build-letrec* '#f A23e4@lex* A23fc@rhs* (Ae27@build-exports A2411@global* A23fa@init*)) (map Aabd@A98d@build-global-define (map cdr A2411@global*))))) A240c@A2409 A240b@A2407 A240a@A2405))))) '#f)) (map Aae4@gen-global A23e4@lex*) (Ae29@make-export-subst A23f7@exp-name* A23f6@exp-id*)))))) (Ad91@chi-rhs* A23e3@rhs* A23e6@r A23e5@mr))) (Ad7d@chi-expr* A23e7@init* A23e6@r A23e5@mr)))) A23f3@A23f1 A23f2@A23ef)))) A23db@A23d5 A23da@A23d3 A23d9@A23d1 A23d8@A23cf A23d7@A23cd A23d6@A23cb)))) A23c8@swap)) (lambda () (begin ((lambda (A2426@t) (begin (A23c0@A23b9 A23c2@A23bd) (set! A23c2@A23bd A2426@t))) (A23c0@A23b9)) ((lambda (A2428@t) (begin (A23c1@A23bb A23c3@A23bf) (set! A23c3@A23bf A2428@t))) (A23c1@A23bb)))))) Adc7@inv-collector Adc9@vis-collector A23b2@rtc A23b3@vtc)) (map A23af@wrap A2385@b*) (map A23af@wrap A2383@main-exp*) (Adc5@make-collector) (Adc5@make-collector)))) '#f)) (Adc3@make-top-rib A23a9@subst-names A23a8@subst-labels))) A23a5@A23a3 A23a4@A23a1)))) A239e@swap)) (lambda () (begin ((lambda (A242c@t) (begin (A2396@A238f A2398@A2393) (set! A2398@A2393 A242c@t))) (A2396@A238f)) ((lambda (A242e@t) (begin (A2397@A2391 A2399@A2395) (set! A2399@A2395 A242e@t))) (A2397@A2391)))))) Adcb@imp-collector Ae4d@top-level-context A238d@itc '#f))) '#f))) (set! Add3@core-library-expander (lambda (A2430@e A2431@verify-name) (call-with-values (lambda () (Adbf@parse-library A2430@e)) (lambda (A243c@A2435 A243d@A2437 A243e@A2439 A243f@A243b) ((lambda (A2444@b* A2445@imp* A2446@exp* A2447@name*) (call-with-values (lambda () (Adbd@parse-library-name A2447@name*)) (lambda (A2450@A244d A2451@A244f) ((lambda (A2454@ver A2455@name) (begin (A2431@verify-name A2455@name) (call-with-values (lambda () (Add1@library-body-expander A2455@name A2446@exp* A2445@imp* A2444@b* '#f)) (lambda (A2466@A2459 A2467@A245b A2468@A245d A2469@A245f A246a@A2461 A246b@A2463 A246c@A2465) ((lambda (A2474@export-env A2475@export-subst A2476@visit-code A2477@invoke-code A2478@visit-req* A2479@invoke-req* A247a@imp*) (values A2455@name A2454@ver A247a@imp* A2479@invoke-req* A2478@visit-req* A2477@invoke-code A2476@visit-code A2475@export-subst A2474@export-env)) A246c@A2465 A246b@A2463 A246a@A2461 A2469@A245f A2468@A245d A2467@A245b A2466@A2459))))) A2451@A244f A2450@A244d)))) A243f@A243b A243e@A2439 A243d@A2437 A243c@A2435))))) (set! Add5@parse-top-level-program (lambda (A2482@e*) ((lambda (A2484@t) ((lambda (A2486@ls/false) (if (and A2486@ls/false (apply (lambda (A2488@import A2489@imp* A248a@b*) (eq? (Ae45@syntax->datum A2488@import) 'import)) A2486@ls/false)) (apply (lambda (A248e@import A248f@imp* A2490@b*) (values A248f@imp* A2490@b*)) A2486@ls/false) ((lambda (A2494@t) ((lambda (A2496@ls/false) (if (and A2496@ls/false (apply (lambda (A2498@import A2499@x A249a@y) (eq? (Ae45@syntax->datum A2498@import) 'import)) A2496@ls/false)) (apply (lambda (A249e@import A249f@x A24a0@y) (Ae3f@syntax-violation 'expander '"invalid syntax of top-level program" (Ab54@syntax-car A2482@e*))) A2496@ls/false) ((lambda (A24a4@t) ((lambda (A24a6@ls/false) (if A24a6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) A24a6@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A24a4@t))) (Ad5f@syntax-dispatch A24a4@t '_))) A2494@t))) (Ad5f@syntax-dispatch A2494@t '((any . any) . any)))) A2484@t))) (Ad5f@syntax-dispatch A2484@t '((any . each-any) . each-any)))) A2482@e*))) (set! Add7@top-level-expander (lambda (A24a8@e*) (call-with-values (lambda () (Add5@parse-top-level-program A24a8@e*)) (lambda (A24ae@A24ab A24af@A24ad) ((lambda (A24b2@b* A24b3@imp*) (call-with-values (lambda () (Add1@library-body-expander '() '() A24b3@imp* A24b2@b* '#t)) (lambda (A24c4@A24b7 A24c5@A24b9 A24c6@A24bb A24c7@A24bd A24c8@A24bf A24c9@A24c1 A24ca@A24c3) ((lambda (A24d2@export-env A24d3@export-subst A24d4@visit-code A24d5@invoke-code A24d6@visit-req* A24d7@invoke-req* A24d8@imp*) (values A24d7@invoke-req* A24d5@invoke-code)) A24ca@A24c3 A24c9@A24c1 A24c8@A24bf A24c7@A24bd A24c6@A24bb A24c5@A24b9 A24c4@A24b7)))) A24af@A24ad A24ae@A24ab))))) (set! Add9@rp (A6b6@A592@make-record-printer 'env (lambda (A24e0@x A24e1@p A24e2@wr) (display '"#<environment>" A24e1@p)))) (set! Ade3@env? (lambda (A24e6@x) (and (simple-struct? A24e6@x) (eq? (simple-struct-name A24e6@x) 'env)))) (set! Ade5@env-names (lambda (A24e8@x) (simple-struct-ref A24e8@x '0))) (set! Ade7@set-env-names! (lambda (A24ea@x A24eb@val) (simple-struct-set! A24ea@x '0 A24eb@val))) (set! Ade9@env-labels (lambda (A24ee@x) (simple-struct-ref A24ee@x '1))) (set! Adeb@set-env-labels! (lambda (A24f0@x A24f1@val) (simple-struct-set! A24f0@x '1 A24f1@val))) (set! Aded@env-itc (lambda (A24f4@x) (simple-struct-ref A24f4@x '2))) (set! Adef@set-env-itc! (lambda (A24f6@x A24f7@val) (simple-struct-set! A24f6@x '2 A24f7@val))) (set! Adf1@dummy '3) (set! Adf3@rp (A6b6@A592@make-record-printer 'interaction-env (lambda (A24fa@x A24fb@p A24fc@wr) (display '"#<environment>" A24fb@p)))) (set! Adfd@interaction-env? (lambda (A2500@x) (and (simple-struct? A2500@x) (eq? (simple-struct-name A2500@x) 'interaction-env)))) (set! Adff@interaction-env-rib (lambda (A2502@x) (simple-struct-ref A2502@x '0))) (set! Ae01@set-interaction-env-rib! (lambda (A2504@x A2505@val) (simple-struct-set! A2504@x '0 A2505@val))) (set! Ae03@interaction-env-r (lambda (A2508@x) (simple-struct-ref A2508@x '1))) (set! Ae05@set-interaction-env-r! (lambda (A250a@x A250b@val) (simple-struct-set! A250a@x '1 A250b@val))) (set! Ae07@interaction-env-locs (lambda (A250e@x) (simple-struct-ref A250e@x '2))) (set! Ae09@set-interaction-env-locs! (lambda (A2510@x A2511@val) (simple-struct-set! A2510@x '2 A2511@val))) (set! Ae0b@dummy '3) (set! Ae0d@interaction-environment-symbols (lambda () (Ae15@environment-symbols (Ae4b@interaction-environment)))) (set! Ae0f@environment-bindings (lambda (A2514@e) (vector->list (vector-map (lambda (A2516@name A2517@label) (Ae11@parse-binding (cons A2516@name (A984@A7d1@imported-label->binding A2517@label)))) (Ade5@env-names A2514@e) (Ade9@env-labels A2514@e))))) (set! Ae11@parse-binding (lambda (A251a@b) (cons (car A251a@b) ((lambda (A251c@t) (if (memv A251c@t '(core-prim global)) 'procedure (if (memv A251c@t '(core-macro macro global-macro)) 'syntax (if (memv A251c@t '($core-rtd)) 'record (if (eq? (car A251a@b) (cadr A251a@b)) 'syntax 'unknown))))) (cadr A251a@b))))) (set! Ae13@environment? (lambda (A251e@x) (or (Ade3@env? A251e@x) (Adfd@interaction-env? A251e@x)))) (set! Ae15@environment-symbols (lambda (A2520@x) (if (Ade3@env? A2520@x) (vector->list (Ade5@env-names A2520@x)) (if (Adfd@interaction-env? A2520@x) (map values (Aaf8@rib-sym* (Adff@interaction-env-rib A2520@x))) (assertion-violation 'environment-symbols '"not an environment" A2520@x))))) (set! Ae17@environment (lambda A2522@imp* ((lambda (A2524@itc) ((lambda (A252a@A2527 A252b@A2529) ((lambda (A252e@swap) (dynamic-wind A252e@swap (lambda () (call-with-values (lambda () (Adc1@parse-import-spec* A2522@imp*)) (lambda (A2534@A2531 A2535@A2533) ((lambda (A2538@subst-labels A2539@subst-names) (make-simple-struct 'env '4 (list A2539@subst-names A2538@subst-labels A2524@itc))) A2535@A2533 A2534@A2531)))) A252e@swap)) (lambda () ((lambda (A253c@t) (begin (A252a@A2527 A252b@A2529) (set! A252b@A2529 A253c@t))) (A252a@A2527))))) Adcb@imp-collector A2524@itc)) (Adc5@make-collector)))) (set! Ae19@null-environment (lambda (A253e@n) (begin (if (not (eqv? A253e@n '5)) (assertion-violation 'null-environment '"not 5" A253e@n) (void)) (Ae17@environment '(psyntax null-environment-5))))) (set! Ae1b@scheme-report-environment (lambda (A2540@n) (begin (if (not (eqv? A2540@n '5)) (assertion-violation 'scheme-report-environment '"not 5" A2540@n) (void)) (Ae17@environment '(psyntax scheme-report-environment-5))))) (set! Ae1d@expand (lambda (A2542@x A2543@env) (if (Ade3@env? A2543@env) ((lambda (A2546@rib) ((lambda (A2548@x A2549@itc A254a@rtc A254b@vtc) ((lambda (A2550@x) (begin (Ab16@seal-rib! A2546@rib) (values A2550@x (A254a@rtc)))) ((lambda (A2562@A2553 A2563@A2555 A2564@A2557 A2565@A2559 A2566@A255b A2567@A255d A2568@A255f A2569@A2561) ((lambda (A2572@swap) (dynamic-wind A2572@swap (lambda () (Ad81@chi-expr A2548@x '() '())) A2572@swap)) (lambda () (begin ((lambda (A2574@t) (begin (A2562@A2553 A2566@A255b) (set! A2566@A255b A2574@t))) (A2562@A2553)) ((lambda (A2576@t) (begin (A2563@A2555 A2567@A255d) (set! A2567@A255d A2576@t))) (A2563@A2555)) ((lambda (A2578@t) (begin (A2564@A2557 A2568@A255f) (set! A2568@A255f A2578@t))) (A2564@A2557)) ((lambda (A257a@t) (begin (A2565@A2559 A2569@A2561) (set! A2569@A2561 A257a@t))) (A2565@A2559)))))) Ae4d@top-level-context Adc7@inv-collector Adc9@vis-collector Adcb@imp-collector '#f A254a@rtc A254b@vtc A2549@itc))) (make-simple-struct 'stx '5 (list A2542@x Aade@top-mark* (list A2546@rib) '())) (Aded@env-itc A2543@env) (Adc5@make-collector) (Adc5@make-collector))) (Adc3@make-top-rib (Ade5@env-names A2543@env) (Ade9@env-labels A2543@env))) (if (Adfd@interaction-env? A2543@env) ((lambda (A257c@rib A257d@r A257e@rtc) ((lambda (A2582@x) (call-with-values (lambda () ((lambda (A2598@A2589 A2599@A258b A259a@A258d A259b@A258f A259c@A2591 A259d@A2593 A259e@A2595 A259f@A2597) ((lambda (A25a8@swap) (dynamic-wind A25a8@swap (lambda () (Adcf@chi-interaction-expr A2582@x A257c@rib A257d@r)) A25a8@swap)) (lambda () (begin ((lambda (A25aa@t) (begin (A2598@A2589 A259c@A2591) (set! A259c@A2591 A25aa@t))) (A2598@A2589)) ((lambda (A25ac@t) (begin (A2599@A258b A259d@A2593) (set! A259d@A2593 A25ac@t))) (A2599@A258b)) ((lambda (A25ae@t) (begin (A259a@A258d A259e@A2595) (set! A259e@A2595 A25ae@t))) (A259a@A258d)) ((lambda (A25b0@t) (begin (A259b@A258f A259f@A2597) (set! A259f@A2597 A25b0@t))) (A259b@A258f)))))) Ae4d@top-level-context Adc7@inv-collector Adc9@vis-collector Adcb@imp-collector A2543@env A257e@rtc (Adc5@make-collector) (Adc5@make-collector))) (lambda (A25b2@A2585 A25b3@A2587) ((lambda (A25b6@r^ A25b7@e) (begin (Ae05@set-interaction-env-r! A2543@env A25b6@r^) (values A25b7@e (A257e@rtc)))) A25b3@A2587 A25b2@A2585)))) (make-simple-struct 'stx '5 (list A2542@x Aade@top-mark* (list A257c@rib) '())))) (Adff@interaction-env-rib A2543@env) (Ae03@interaction-env-r A2543@env) (Adc5@make-collector)) (assertion-violation 'expand '"not an environment" A2543@env))))) (set! Ae1f@eval (lambda (A25ba@x A25bb@env) (begin (if (not (Ae13@environment? A25bb@env)) (error 'eval '"not an environment" A25bb@env) (void)) (call-with-values (lambda () (Ae1d@expand A25ba@x A25bb@env)) (lambda (A25c2@A25bf A25c3@A25c1) ((lambda (A25c6@invoke-req* A25c7@x) (begin (for-each A985@A7d3@invoke-library A25c6@invoke-req*) (eval-core (A70f@A6c7@expanded->core A25c7@x)))) A25c3@A25c1 A25c2@A25bf)))))) (set! Ae21@library-expander (lambda A2638 ((lambda (A2639) (if (= A2639 '3) (apply (lambda (A25ca@x A25cb@filename A25cc@verify-name) ((lambda (A25d1@build-visit-code A25d3@visit!) (begin (set! A25d1@build-visit-code (lambda (A2626@macro*) (if (null? A2626@macro*) (Aac2@Aa32@build-void) (Aac1@Aa30@build-sequence '#f (map (lambda (A2628@x) ((lambda (A262a@loc A262b@src) (list 'set! A262a@loc A262b@src)) (car A2628@x) (cddr A2628@x))) A2626@macro*))))) (set! A25d3@visit! (lambda (A261e@macro*) (for-each (lambda (A2620@x) ((lambda (A2622@loc A2623@proc) (set-symbol-value! A2622@loc A2623@proc)) (car A2620@x) (cadr A2620@x))) A261e@macro*))) (call-with-values (lambda () (Add3@core-library-expander A25ca@x A25cc@verify-name)) (lambda (A25e6@A25d5 A25e7@A25d7 A25e8@A25d9 A25e9@A25db A25ea@A25dd A25eb@A25df A25ec@A25e1 A25ed@A25e3 A25ee@A25e5) ((lambda (A25f8@export-env A25f9@export-subst A25fa@macro* A25fb@invoke-code A25fc@vis* A25fd@inv* A25fe@imp* A25ff@ver A2600@name) ((lambda (A260a@id A260b@name A260c@ver A260d@imp* A260e@vis* A260f@inv* A2610@visit-proc A2611@invoke-proc A2612@visit-code A2613@invoke-code) (begin (A983@A7cf@install-library A260a@id A260b@name A260c@ver A260d@imp* A260e@vis* A260f@inv* A25f9@export-subst A25f8@export-env A2610@visit-proc A2611@invoke-proc A2612@visit-code A2613@invoke-code '#t A25cb@filename) (values A260a@id A260b@name A260c@ver A260d@imp* A260e@vis* A260f@inv* A2613@invoke-code A2612@visit-code A25f9@export-subst A25f8@export-env))) (gensym) A2600@name A25ff@ver (map A989@A7db@library-spec A25fe@imp*) (map A989@A7db@library-spec A25fc@vis*) (map A989@A7db@library-spec A25fd@inv*) (lambda () (A25d3@visit! A25fa@macro*)) (lambda () (eval-core (A70f@A6c7@expanded->core A25fb@invoke-code))) (A25d1@build-visit-code A25fa@macro*) A25fb@invoke-code)) A25ee@A25e5 A25ed@A25e3 A25ec@A25e1 A25eb@A25df A25ea@A25dd A25e9@A25db A25e8@A25d9 A25e7@A25d7 A25e6@A25d5))))) '#f '#f)) A2638) (if (= A2639 '2) (apply (lambda (A262e@x A262f@filename) (Ae21@library-expander A262e@x A262f@filename (lambda (A2632@x) (values)))) A2638) (if (= A2639 '1) (apply (lambda (A2634@x) (Ae21@library-expander A2634@x '#f (lambda (A2636@x) (values)))) A2638) (error 'apply '"invalid arg count"))))) (length A2638)))) (set! Ae23@boot-library-expand (lambda (A263a@x) (call-with-values (lambda () (Ae21@library-expander A263a@x)) (lambda (A2650@A263d A2651@A263f A2652@A2641 A2653@A2643 A2654@A2645 A2655@A2647 A2656@A2649 A2657@A264b A2658@A264d A2659@A264f) ((lambda (A2664@export-env A2665@export-subst A2666@visit-code A2667@invoke-code A2668@inv* A2669@vis* A266a@imp* A266b@ver A266c@name A266d@id) (values A266c@name A2667@invoke-code A2665@export-subst A2664@export-env)) A2659@A264f A2658@A264d A2657@A264b A2656@A2649 A2655@A2647 A2654@A2645 A2653@A2643 A2652@A2641 A2651@A263f A2650@A263d))))) (set! Ae25@rev-map-append (lambda (A2678@f A2679@ls A267a@ac) (if (null? A2679@ls) A267a@ac (Ae25@rev-map-append A2678@f (cdr A2679@ls) (cons (A2678@f (car A2679@ls)) A267a@ac))))) (set! Ae27@build-exports (lambda (A267e@lex*+loc* A267f@init*) (Aac1@Aa30@build-sequence '#f (cons (Aac2@Aa32@build-void) (Ae25@rev-map-append (lambda (A2682@x) (list 'set! (cdr A2682@x) (car A2682@x))) A267e@lex*+loc* A267f@init*))))) (set! Ae29@make-export-subst (lambda (A2684@name* A2685@id*) (map (lambda (A2688@name A2689@id) ((lambda (A268c@label) (begin (if (not A268c@label) (Ae3f@syntax-violation '#f '"cannot export unbound identifier" A2689@id) (void)) (cons A2688@name A268c@label))) (Ab70@id->label A2689@id))) A2684@name* A2685@id*))) (set! Ae2b@make-export-env/macros (lambda (A268e@lex* A268f@loc* A2690@r) ((lambda (A2695@lookup) (begin (set! A2695@lookup (lambda (A26b2@x) ((letrec ((A26b4@f (lambda (A26b6@x A26b7@lex* A26b8@loc*) (if (pair? A26b7@lex*) (if (eq? A26b6@x (car A26b7@lex*)) (car A26b8@loc*) (A26b4@f A26b6@x (cdr A26b7@lex*) (cdr A26b8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) A26b4@f) A26b2@x A268e@lex* A268f@loc*))) ((letrec ((A2696@f (lambda (A2698@r A2699@env A269a@global* A269b@macro*) (if (null? A2698@r) (values A2699@env A269a@global* A269b@macro*) ((lambda (A26a0@x) ((lambda (A26a2@label A26a3@b) ((lambda (A26a6@t) (if (memv A26a6@t '(lexical)) ((lambda (A26a8@v) ((lambda (A26aa@loc A26ab@type) (A2696@f (cdr A2698@r) (cons (cons* A26a2@label A26ab@type A26aa@loc) A2699@env) (cons (cons (Aceb@lexical-var A26a8@v) A26aa@loc) A269a@global*) A269b@macro*)) (A2695@lookup (Aceb@lexical-var A26a8@v)) (if (Aced@lexical-mutable? A26a8@v) 'mutable 'global))) (Ab78@binding-value A26a3@b)) (if (memv A26a6@t '(local-macro)) ((lambda (A26ae@loc) (A2696@f (cdr A2698@r) (cons (cons* A26a2@label 'global-macro A26ae@loc) A2699@env) A269a@global* (cons (cons A26ae@loc (Ab78@binding-value A26a3@b)) A269b@macro*))) (gensym)) (if (memv A26a6@t '(local-macro!)) ((lambda (A26b0@loc) (A2696@f (cdr A2698@r) (cons (cons* A26a2@label 'global-macro! A26b0@loc) A2699@env) A269a@global* (cons (cons A26b0@loc (Ab78@binding-value A26a3@b)) A269b@macro*))) (gensym)) (if (memv A26a6@t '($rtd $module)) (A2696@f (cdr A2698@r) (cons A26a0@x A2699@env) A269a@global* A269b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (Ab76@binding-type A26a3@b) (Ab78@binding-value A26a3@b))))))) (Ab76@binding-type A26a3@b))) (car A26a0@x) (cdr A26a0@x))) (car A2698@r)))))) A2696@f) A2690@r '() '() '()))) '#f))) (set! Ae2d@generate-temporaries (lambda (A26bc@ls) ((lambda (A26be@t) ((lambda (A26c0@ls/false) (if A26c0@ls/false (apply (lambda (A26c2@ls) (map (lambda (A26c4@x) (make-simple-struct 'stx '5 (list ((lambda (A26c6@x) (if (or (symbol? A26c6@x) (string? A26c6@x)) (gensym A26c6@x) (gensym 't))) (Ae45@syntax->datum A26c4@x)) Aade@top-mark* '() '()))) A26c2@ls)) A26c0@ls/false) ((lambda (A26c8@t) ((lambda (A26ca@ls/false) (if A26ca@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) A26ca@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A26c8@t))) (Ad5f@syntax-dispatch A26c8@t '_))) A26be@t))) (Ad5f@syntax-dispatch A26be@t 'each-any))) A26bc@ls))) (set! Ae2f@free-identifier=? (lambda (A26cc@x A26cd@y) (if (Ab5a@id? A26cc@x) (if (Ab5a@id? A26cd@y) (Ab60@free-id=? A26cc@x A26cd@y) (assertion-violation 'free-identifier=? '"not an identifier" A26cd@y)) (assertion-violation 'free-identifier=? '"not an identifier" A26cc@x)))) (set! Ae31@bound-identifier=? (lambda (A26d0@x A26d1@y) (if (Ab5a@id? A26d0@x) (if (Ab5a@id? A26d1@y) (Ab5e@bound-id=? A26d0@x A26d1@y) (assertion-violation 'bound-identifier=? '"not an identifier" A26d1@y)) (assertion-violation 'bound-identifier=? '"not an identifier" A26d0@x)))) (set! Ae33@make-source-condition (lambda (A26d4@x) ((lambda (A26de@A26d9 A26e0@A26db A26e2@A26da A26e5@A26d8 A26e7@make-source-condition A26e9@A26d6 A26eb@A26d7 A26ed@source-condition? A26ef@source-filename A26f1@source-character) (begin (set! A26de@A26d9 (make-record-type-descriptor '&source-information A2b2e@A2875@&condition-rtd 'A26dc '#f '#f '#((immutable file-name) (immutable character)))) (set! A26e0@A26db '#f) (set! A26e2@A26da (make-record-constructor-descriptor A26de@A26d9 A2b2f@A2877@&condition-rcd A26e0@A26db)) (set! A26e5@A26d8 (record-predicate A26de@A26d9)) (set! A26e7@make-source-condition (record-constructor A26e2@A26da)) (set! A26e9@A26d6 (record-accessor A26de@A26d9 '0)) (set! A26eb@A26d7 (record-accessor A26de@A26d9 '1)) (set! A26ed@source-condition? (condition-predicate A26de@A26d9)) (set! A26ef@source-filename (condition-accessor A26de@A26d9 A26e9@A26d6)) (set! A26f1@source-character (condition-accessor A26de@A26d9 A26eb@A26d7)) (if (pair? A26d4@x) (A26e7@make-source-condition (car A26d4@x) (cdr A26d4@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! Ae35@extract-position-condition (lambda (A26f2@x) (Ae33@make-source-condition (Ae37@expression-position A26f2@x)))) (set! Ae37@expression-position (lambda (A26f4@x) (and (Ab26@stx? A26f4@x) ((lambda (A26f6@x) (and (A6ae@A582@annotation? A26f6@x) (A6af@A584@annotation-source A26f6@x))) (Ab28@stx-expr A26f4@x))))) (set! Ae39@assertion-error (lambda (A26f8@expr A26f9@pos) (raise (condition (A2b5e@A2939@make-assertion-violation) (A2b70@A296b@make-who-condition 'assert) (A2b34@A28cc@make-message-condition '"assertion failed") (A2b66@A2950@make-irritants-condition (list A26f8@expr)) (Ae33@make-source-condition A26f9@pos))))) (set! Ae3b@syntax-error (lambda (A26fc@x . A26fe@args) (begin (if (not (for-all string? A26fe@args)) (assertion-violation 'syntax-error '"invalid argument" A26fe@args) (void)) (raise (condition (A2b34@A28cc@make-message-condition (if (null? A26fe@args) '"invalid syntax" (apply string-append A26fe@args))) (A2b92@A29c7@make-syntax-violation (Ae45@syntax->datum A26fc@x) '#f) (Ae35@extract-position-condition A26fc@x)))))) (set! Ae3d@syntax-violation* (lambda (A2700@who A2701@msg A2702@form A2703@condition-object) (begin (if (not (string? A2701@msg)) (assertion-violation 'syntax-violation '"message is not a string" A2701@msg) (void)) ((lambda (A2708@who) (raise (condition (if A2708@who (A2b70@A296b@make-who-condition A2708@who) (condition)) (A2b34@A28cc@make-message-condition A2701@msg) A2703@condition-object (Ae35@extract-position-condition A2702@form)))) (if (or (string? A2700@who) (symbol? A2700@who)) A2700@who (if (not A2700@who) ((lambda (A270a@t) ((lambda (A270c@ls/false) (if (and A270c@ls/false (apply (lambda (A270e@id) (Ab5a@id? A270e@id)) A270c@ls/false)) (apply (lambda (A2710@id) (Ae45@syntax->datum A2710@id)) A270c@ls/false) ((lambda (A2712@t) ((lambda (A2714@ls/false) (if (and A2714@ls/false (apply (lambda (A2716@id A2717@rest) (Ab5a@id? A2716@id)) A2714@ls/false)) (apply (lambda (A271a@id A271b@rest) (Ae45@syntax->datum A271a@id)) A2714@ls/false) ((lambda (A271e@t) ((lambda (A2720@ls/false) (if A2720@ls/false (apply (lambda () '#f) A2720@ls/false) (Ae3f@syntax-violation '#f '"invalid syntax" A271e@t))) (Ad5f@syntax-dispatch A271e@t '_))) A2712@t))) (Ad5f@syntax-dispatch A2712@t '(any . any)))) A270a@t))) (Ad5f@syntax-dispatch A270a@t 'any))) A2702@form) (assertion-violation 'syntax-violation '"invalid who argument" A2700@who))))))) (set! Ae3f@syntax-violation (lambda A2730 ((lambda (A2731) (if (= A2731 '3) (apply (lambda (A2722@who A2723@msg A2724@form) (Ae3f@syntax-violation A2722@who A2723@msg A2724@form '#f)) A2730) (if (= A2731 '4) (apply (lambda (A2728@who A2729@msg A272a@form A272b@subform) (Ae3d@syntax-violation* A2728@who A2729@msg A272a@form (A2b92@A29c7@make-syntax-violation (Ae45@syntax->datum A272a@form) (Ae45@syntax->datum A272b@subform)))) A2730) (error 'apply '"invalid arg count")))) (length A2730)))) (set! Ae41@identifier? (lambda (A2732@x) (Ab5a@id? A2732@x))) (set! Ae43@datum->syntax (lambda (A2734@id A2735@datum) (if (Ab5a@id? A2734@id) (Ab3a@datum->stx A2734@id A2735@datum) (assertion-violation 'datum->syntax '"not an identifier" A2734@id)))) (set! Ae45@syntax->datum (lambda (A2738@x) (Ab6e@stx->datum A2738@x))) (set! Ae47@compile-r6rs-top-level (lambda (A273a@x*) (call-with-values (lambda () (Add7@top-level-expander A273a@x*)) (lambda (A2740@A273d A2741@A273f) ((lambda (A2744@invoke-code A2745@lib*) (lambda () (begin (for-each A985@A7d3@invoke-library A2745@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (A70f@A6c7@expanded->core A2744@invoke-code)) (void)) (eval-core (A70f@A6c7@expanded->core A2744@invoke-code))))) A2741@A273f A2740@A273d))))) (set! Ae49@pre-compile-r6rs-top-level (lambda (A2748@x*) (call-with-values (lambda () (Add7@top-level-expander A2748@x*)) (lambda (A274e@A274b A274f@A274d) ((lambda (A2752@invoke-code A2753@lib*) (begin (for-each A985@A7d3@invoke-library A2753@lib*) (A6b7@A594@compile-core (A70f@A6c7@expanded->core A2752@invoke-code)))) A274f@A274d A274e@A274b))))) (set! Ae4b@interaction-environment ((lambda (A2756@the-env) (lambda () (or A2756@the-env ((lambda (A2758@lib A2759@rib) (begin ((lambda (A275c@subst) (begin (Aafa@set-rib-sym*! A2759@rib (map car A275c@subst)) (Aafe@set-rib-mark**! A2759@rib (map (lambda (A275e@x) Aade@top-mark*) A275c@subst)) (Ab02@set-rib-label*! A2759@rib (map cdr A275c@subst)))) (A960@A789@library-subst A2758@lib)) ((lambda (A2760@env) (begin (set! A2756@the-env A2760@env) A2760@env)) (make-simple-struct 'interaction-env '4 (list A2759@rib '() '()))))) (A97e@A7c5@find-library-by-name '(mosh interaction)) (Ab0e@make-empty-rib))))) '#f)) (set! Ae4d@top-level-context (A6b9@A598@make-parameter '#f)) (begin (set! A285b@Ae4d@top-level-context Ae4d@top-level-context) (set! A285a@Ae4b@interaction-environment Ae4b@interaction-environment) (set! A2859@Ae49@pre-compile-r6rs-top-level Ae49@pre-compile-r6rs-top-level) (set! A2858@Ae47@compile-r6rs-top-level Ae47@compile-r6rs-top-level) (set! A2857@Ae45@syntax->datum Ae45@syntax->datum) (set! A2856@Ae43@datum->syntax Ae43@datum->syntax) (set! A2855@Ae41@identifier? Ae41@identifier?) (set! A2854@Ae3f@syntax-violation Ae3f@syntax-violation) (set! A2853@Ae3d@syntax-violation* Ae3d@syntax-violation*) (set! A2852@Ae3b@syntax-error Ae3b@syntax-error) (set! A2851@Ae39@assertion-error Ae39@assertion-error) (set! A2850@Ae37@expression-position Ae37@expression-position) (set! A284f@Ae35@extract-position-condition Ae35@extract-position-condition) (set! A284e@Ae33@make-source-condition Ae33@make-source-condition) (set! A284d@Ae31@bound-identifier=? Ae31@bound-identifier=?) (set! A284c@Ae2f@free-identifier=? Ae2f@free-identifier=?) (set! A284b@Ae2d@generate-temporaries Ae2d@generate-temporaries) (set! A284a@Ae2b@make-export-env/macros Ae2b@make-export-env/macros) (set! A2849@Ae29@make-export-subst Ae29@make-export-subst) (set! A2848@Ae27@build-exports Ae27@build-exports) (set! A2847@Ae25@rev-map-append Ae25@rev-map-append) (set! A2846@Ae23@boot-library-expand Ae23@boot-library-expand) (set! A2845@Ae21@library-expander Ae21@library-expander) (set! A2844@Ae1f@eval Ae1f@eval) (set! A2843@Ae1d@expand Ae1d@expand) (set! A2842@Ae1b@scheme-report-environment Ae1b@scheme-report-environment) (set! A2841@Ae19@null-environment Ae19@null-environment) (set! A2840@Ae17@environment Ae17@environment) (set! A283f@Ae15@environment-symbols Ae15@environment-symbols) (set! A283e@Ae13@environment? Ae13@environment?) (set! A283d@Ae11@parse-binding Ae11@parse-binding) (set! A283c@Ae0f@environment-bindings Ae0f@environment-bindings) (set! A283b@Ae0d@interaction-environment-symbols Ae0d@interaction-environment-symbols) (set! A283a@Ae0b@dummy Ae0b@dummy) (set! A2839@Ae09@set-interaction-env-locs! Ae09@set-interaction-env-locs!) (set! A2838@Ae07@interaction-env-locs Ae07@interaction-env-locs) (set! A2837@Ae05@set-interaction-env-r! Ae05@set-interaction-env-r!) (set! A2836@Ae03@interaction-env-r Ae03@interaction-env-r) (set! A2835@Ae01@set-interaction-env-rib! Ae01@set-interaction-env-rib!) (set! A2834@Adff@interaction-env-rib Adff@interaction-env-rib) (set! A2833@Adfd@interaction-env? Adfd@interaction-env?) (set! A2832@Adf3@rp Adf3@rp) (set! A2831@Adf1@dummy Adf1@dummy) (set! A2830@Adef@set-env-itc! Adef@set-env-itc!) (set! A282f@Aded@env-itc Aded@env-itc) (set! A282e@Adeb@set-env-labels! Adeb@set-env-labels!) (set! A282d@Ade9@env-labels Ade9@env-labels) (set! A282c@Ade7@set-env-names! Ade7@set-env-names!) (set! A282b@Ade5@env-names Ade5@env-names) (set! A282a@Ade3@env? Ade3@env?) (set! A2829@Add9@rp Add9@rp) (set! A2828@Add7@top-level-expander Add7@top-level-expander) (set! A2827@Add5@parse-top-level-program Add5@parse-top-level-program) (set! A2826@Add3@core-library-expander Add3@core-library-expander) (set! A2825@Add1@library-body-expander Add1@library-body-expander) (set! A2824@Adcf@chi-interaction-expr Adcf@chi-interaction-expr) (set! A2823@Adcd@chi-library-internal Adcd@chi-library-internal) (set! A2822@Adcb@imp-collector Adcb@imp-collector) (set! A2821@Adc9@vis-collector Adc9@vis-collector) (set! A2820@Adc7@inv-collector Adc7@inv-collector) (set! A281f@Adc5@make-collector Adc5@make-collector) (set! A281e@Adc3@make-top-rib Adc3@make-top-rib) (set! A281d@Adc1@parse-import-spec* Adc1@parse-import-spec*) (set! A281c@Adbf@parse-library Adbf@parse-library) (set! A281b@Adbd@parse-library-name Adbd@parse-library-name) (set! A281a@Adbb@parse-exports Adbb@parse-exports) (set! A2819@Adb9@expand-transformer Adb9@expand-transformer) (set! A2818@Adb7@chi-body* Adb7@chi-body*) (set! A2817@Adb5@chi-internal-module Adb5@chi-internal-module) (set! A2816@Adb3@module-interface-exp-id* Adb3@module-interface-exp-id*) (set! A2815@Adb1@dummy Adb1@dummy) (set! A2814@Adaf@set-module-interface-exp-lab-vec! Adaf@set-module-interface-exp-lab-vec!) (set! A2813@Adad@module-interface-exp-lab-vec Adad@module-interface-exp-lab-vec) (set! A2812@Adab@set-module-interface-exp-id-vec! Adab@set-module-interface-exp-id-vec!) (set! A2811@Ada9@module-interface-exp-id-vec Ada9@module-interface-exp-id-vec) (set! A2810@Ada7@set-module-interface-first-mark! Ada7@set-module-interface-first-mark!) (set! A280f@Ada5@module-interface-first-mark Ada5@module-interface-first-mark) (set! A280e@Ada3@module-interface? Ada3@module-interface?) (set! A280d@Ad99@parse-module Ad99@parse-module) (set! A280c@Ad97@chi-internal Ad97@chi-internal) (set! A280b@Ad95@find-dups Ad95@find-dups) (set! A280a@Ad93@find-bound=? Ad93@find-bound=?) (set! A2809@Ad91@chi-rhs* Ad91@chi-rhs*) (set! A2808@Ad8f@expand-interaction-rhs*/init* Ad8f@expand-interaction-rhs*/init*) (set! A2807@Ad8d@chi-rhs Ad8d@chi-rhs) (set! A2806@Ad8b@chi-defun Ad8b@chi-defun) (set! A2805@Ad89@chi-lambda-clause* Ad89@chi-lambda-clause*) (set! A2804@Ad87@chi-lambda-clause Ad87@chi-lambda-clause) (set! A2803@Ad85@verify-formals Ad85@verify-formals) (set! A2802@Ad83@chi-set! Ad83@chi-set!) (set! A2801@Ad81@chi-expr Ad81@chi-expr) (set! A2800@Ad7f@chi-application Ad7f@chi-application) (set! A27ff@Ad7d@chi-expr* Ad7d@chi-expr*) (set! A27fe@Ad7b@chi-global-macro Ad7b@chi-global-macro) (set! A27fd@Ad79@chi-local-macro Ad79@chi-local-macro) (set! A27fc@Ad77@chi-macro Ad77@chi-macro) (set! A27fb@Ad75@do-macro-call Ad75@do-macro-call) (set! A27fa@Ad73@local-macro-transformer Ad73@local-macro-transformer) (set! A27f9@Ad71@macro-transformer Ad71@macro-transformer) (set! A27f8@Ad6f@symbol-macro Ad6f@symbol-macro) (set! A27f7@Ad6d@core-macro-transformer Ad6d@core-macro-transformer) (set! A27f6@Ad6b@syntax-transformer Ad6b@syntax-transformer) (set! A27f5@Ad69@ellipsis-map Ad69@ellipsis-map) (set! A27f4@Ad67@syntax-case-transformer Ad67@syntax-case-transformer) (set! A27f3@Ad65@verify-literals Ad65@verify-literals) (set! A27f2@Ad63@underscore? Ad63@underscore?) (set! A27f1@Ad61@ellipsis? Ad61@ellipsis?) (set! A27f0@Ad5f@syntax-dispatch Ad5f@syntax-dispatch) (set! A27ef@Ad5d@convert-pattern Ad5d@convert-pattern) (set! A27ee@Ad5b@foreign-call-transformer Ad5b@foreign-call-transformer) (set! A27ed@Ad59@parameterize-macro Ad59@parameterize-macro) (set! A27ec@Ad57@incorrect-usage-macro Ad57@incorrect-usage-macro) (set! A27eb@Ad55@define-condition-type-macro Ad55@define-condition-type-macro) (set! A27ea@Ad53@define-record-type-macro Ad53@define-record-type-macro) (set! A27e9@Ad51@define-struct-macro Ad51@define-struct-macro) (set! A27e8@Ad4f@quasisyntax-macro Ad4f@quasisyntax-macro) (set! A27e7@Ad4d@quasiquote-macro Ad4d@quasiquote-macro) (set! A27e6@Ad4b@syntax-rules-macro Ad4b@syntax-rules-macro) (set! A27e5@Ad49@include-into-macro Ad49@include-into-macro) (set! A27e4@Ad47@include-macro Ad47@include-macro) (set! A27e3@Ad45@do-include Ad45@do-include) (set! A27e2@Ad43@cond-macro Ad43@cond-macro) (set! A27e1@Ad41@and-macro Ad41@and-macro) (set! A27e0@Ad3f@or-macro Ad3f@or-macro) (set! A27df@Ad3d@let*-macro Ad3d@let*-macro) (set! A27de@Ad3b@do-macro Ad3b@do-macro) (set! A27dd@Ad39@identifier-syntax-macro Ad39@identifier-syntax-macro) (set! A27dc@Ad37@endianness-macro Ad37@endianness-macro) (set! A27db@Ad35@assert-macro Ad35@assert-macro) (set! A27da@Ad33@delay-macro Ad33@delay-macro) (set! A27d9@Ad31@time-macro Ad31@time-macro) (set! A27d8@Ad2f@define-enumeration-macro Ad2f@define-enumeration-macro) (set! A27d7@Ad2d@guard-macro Ad2d@guard-macro) (set! A27d6@Ad2b@trace-letrec-syntax-macro Ad2b@trace-letrec-syntax-macro) (set! A27d5@Ad29@trace-let-syntax-macro Ad29@trace-let-syntax-macro) (set! A27d4@Ad27@trace-let/rec-syntax Ad27@trace-let/rec-syntax) (set! A27d3@Ad25@trace-define-syntax-macro Ad25@trace-define-syntax-macro) (set! A27d2@Ad23@trace-define-macro Ad23@trace-define-macro) (set! A27d1@Ad21@trace-lambda-macro Ad21@trace-lambda-macro) (set! A27d0@Ad1f@let*-values-macro Ad1f@let*-values-macro) (set! A27cf@Ad1d@let-values-macro Ad1d@let-values-macro) (set! A27ce@Ad1b@let-macro Ad1b@let-macro) (set! A27cd@Ad19@invalid-fmls-error Ad19@invalid-fmls-error) (set! A27cc@Ad17@with-syntax-macro Ad17@with-syntax-macro) (set! A27cb@Ad15@bless Ad15@bless) (set! A27ca@Ad13@lambda-transformer Ad13@lambda-transformer) (set! A27c9@Ad11@case-lambda-transformer Ad11@case-lambda-transformer) (set! A27c8@Ad0f@quote-transformer Ad0f@quote-transformer) (set! A27c7@Ad0d@case-macro Ad0d@case-macro) (set! A27c6@Ad0b@or-transformer Ad0b@or-transformer) (set! A27c5@Ad09@and-transformer Ad09@and-transformer) (set! A27c4@Ad07@if-transformer Ad07@if-transformer) (set! A27c3@Ad05@unless-macro Ad05@unless-macro) (set! A27c2@Ad03@when-macro Ad03@when-macro) (set! A27c1@Ad01@record-constructor-descriptor-transformer Ad01@record-constructor-descriptor-transformer) (set! A27c0@Acff@record-type-descriptor-transformer Acff@record-type-descriptor-transformer) (set! A27bf@Acfd@type-descriptor-transformer Acfd@type-descriptor-transformer) (set! A27be@Acfb@fluid-let-syntax-transformer Acfb@fluid-let-syntax-transformer) (set! A27bd@Acf9@letrec*-transformer Acf9@letrec*-transformer) (set! A27bc@Acf7@letrec-transformer Acf7@letrec-transformer) (set! A27bb@Acf5@letrec-helper Acf5@letrec-helper) (set! A27ba@Acf3@add-lexicals Acf3@add-lexicals) (set! A27b9@Acf1@add-lexical Acf1@add-lexical) (set! A27b8@Acef@set-lexical-mutable! Acef@set-lexical-mutable!) (set! A27b7@Aced@lexical-mutable? Aced@lexical-mutable?) (set! A27b6@Aceb@lexical-var Aceb@lexical-var) (set! A27b5@Ace9@scheme-stx Ace9@scheme-stx) (set! A27b4@Ace7@scheme-stx-hashtable Ace7@scheme-stx-hashtable) (set! A27b3@Ace5@parse-define-syntax Ace5@parse-define-syntax) (set! A27b2@Ace3@parse-define Ace3@parse-define) (set! A27b1@Ab92@make-eval-transformer Ab92@make-eval-transformer) (set! A27b0@Ab90@variable-transformer-procedure Ab90@variable-transformer-procedure) (set! A27af@Ab8e@variable-transformer? Ab8e@variable-transformer?) (set! A27ae@Ab8c@make-variable-transformer Ab8c@make-variable-transformer) (set! A27ad@Ab8a@sanitize-binding Ab8a@sanitize-binding) (set! A27ac@Ab7c@syntax-type Ab7c@syntax-type) (set! A27ab@Ab7a@raise-unbound-error Ab7a@raise-unbound-error) (set! A27aa@Ab78@binding-value Ab78@binding-value) (set! A27a9@Ab76@binding-type Ab76@binding-type) (set! A27a8@Ab74@make-binding Ab74@make-binding) (set! A27a7@Ab72@label->binding Ab72@label->binding) (set! A27a6@Ab70@id->label Ab70@id->label) (set! A27a5@Ab6e@stx->datum Ab6e@stx->datum) (set! A27a4@Ab6c@strip Ab6c@strip) (set! A27a3@Ab6a@strip-annotations Ab6a@strip-annotations) (set! A27a2@Ab68@self-evaluating? Ab68@self-evaluating?) (set! A27a1@Ab66@bound-id-member? Ab66@bound-id-member?) (set! A27a0@Ab64@distinct-bound-ids? Ab64@distinct-bound-ids?) (set! A279f@Ab62@valid-bound-ids? Ab62@valid-bound-ids?) (set! A279e@Ab60@free-id=? Ab60@free-id=?) (set! A279d@Ab5e@bound-id=? Ab5e@bound-id=?) (set! A279c@Ab5c@id->sym Ab5c@id->sym) (set! A279b@Ab5a@id? Ab5a@id?) (set! A279a@Ab58@syntax->list Ab58@syntax->list) (set! A2799@Ab56@syntax-cdr Ab56@syntax-cdr) (set! A2798@Ab54@syntax-car Ab54@syntax-car) (set! A2797@Ab52@syntax-list? Ab52@syntax-list?) (set! A2796@Ab50@syntax-null? Ab50@syntax-null?) (set! A2795@Ab4e@syntax-vector? Ab4e@syntax-vector?) (set! A2794@Ab4c@syntax-pair? Ab4c@syntax-pair?) (set! A2793@Ab4a@syntax-vector->list Ab4a@syntax-vector->list) (set! A2792@Ab48@syntax-kind? Ab48@syntax-kind?) (set! A2791@Ab46@add-subst Ab46@add-subst) (set! A2790@Ab44@add-mark Ab44@add-mark) (set! A278f@Ab42@mkstx Ab42@mkstx) (set! A278e@Ab40@anti-mark? Ab40@anti-mark?) (set! A278d@Ab3e@anti-mark Ab3e@anti-mark) (set! A278c@Ab3c@gen-mark Ab3c@gen-mark) (set! A278b@Ab3a@datum->stx Ab3a@datum->stx) (set! A278a@Ab38@dummy Ab38@dummy) (set! A2789@Ab36@set-stx-ae*! Ab36@set-stx-ae*!) (set! A2788@Ab34@stx-ae* Ab34@stx-ae*) (set! A2787@Ab32@set-stx-subst*! Ab32@set-stx-subst*!) (set! A2786@Ab30@stx-subst* Ab30@stx-subst*) (set! A2785@Ab2e@set-stx-mark*! Ab2e@set-stx-mark*!) (set! A2784@Ab2c@stx-mark* Ab2c@stx-mark*) (set! A2783@Ab2a@set-stx-expr! Ab2a@set-stx-expr!) (set! A2782@Ab28@stx-expr Ab28@stx-expr) (set! A2781@Ab26@stx? Ab26@stx?) (set! A2780@Ab1c@rp Ab1c@rp) (set! A277f@Ab1a@make-full-rib Ab1a@make-full-rib) (set! A277e@Ab18@unseal-rib! Ab18@unseal-rib!) (set! A277d@Ab16@seal-rib! Ab16@seal-rib!) (set! A277c@Ab14@make-rib-map Ab14@make-rib-map) (set! A277b@Ab12@extend-rib/nc! Ab12@extend-rib/nc!) (set! A277a@Ab10@extend-rib! Ab10@extend-rib!) (set! A2779@Ab0e@make-empty-rib Ab0e@make-empty-rib) (set! A2778@Ab0c@dummy Ab0c@dummy) (set! A2777@Ab0a@set-rib-cache! Ab0a@set-rib-cache!) (set! A2776@Ab08@rib-cache Ab08@rib-cache) (set! A2775@Ab06@set-rib-sealed/freq! Ab06@set-rib-sealed/freq!) (set! A2774@Ab04@rib-sealed/freq Ab04@rib-sealed/freq) (set! A2773@Ab02@set-rib-label*! Ab02@set-rib-label*!) (set! A2772@Ab00@rib-label* Ab00@rib-label*) (set! A2771@Aafe@set-rib-mark**! Aafe@set-rib-mark**!) (set! A2770@Aafc@rib-mark** Aafc@rib-mark**) (set! A276f@Aafa@set-rib-sym*! Aafa@set-rib-sym*!) (set! A276e@Aaf8@rib-sym* Aaf8@rib-sym*) (set! A276d@Aaf6@rib? Aaf6@rib?) (set! A276c@Aaec@gen-define-label Aaec@gen-define-label) (set! A276b@Aaea@gen-define-label+loc Aaea@gen-define-label+loc) (set! A276a@Aae8@gen-top-level-label Aae8@gen-top-level-label) (set! A2769@Aae6@gen-label Aae6@gen-label) (set! A2768@Aae4@gen-global Aae4@gen-global) (set! A2767@Aae2@gen-lexical Aae2@gen-lexical) (set! A2766@Aae0@top-marked? Aae0@top-marked?) (set! A2765@Aade@top-mark* Aade@top-mark*) (set! A2764@Aad9@set-union Aad9@set-union) (set! A2763@Aad7@set-cons Aad7@set-cons) (set! A2762@Aad5@file-options-macro Aad5@file-options-macro) (A97b@A7bf@current-library-expander Ae21@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (A286a@A2865 A286c@A2867 A286e@A2866 A2871@&condition? A2873@make-&condition A2875@&condition-rtd A2877@&condition-rcd A28c3@A28be A28c5@A28c0 A28c7@A28bf A28ca@p? A28cc@make-message-condition A28ce@A28bd A28d0@message-condition? A28d2@condition-message A28d4@&message-rtd A28d6@&message-rcd A28dc@A28d7 A28de@A28d9 A28e0@A28d8 A28e3@p? A28e5@make-warning A28e7@warning? A28e9@&warning-rtd A28eb@&warning-rcd A28f1@A28ec A28f3@A28ee A28f5@A28ed A28f8@p? A28fa@make-serious-condition A28fc@serious-condition? A28fe@&serious-rtd A2900@&serious-rcd A2906@A2901 A2908@A2903 A290a@A2902 A290d@p? A290f@make-error A2911@error? A2913@&error-rtd A2915@&error-rcd A291b@A2916 A291d@A2918 A291f@A2917 A2922@p? A2924@make-violation A2926@violation? A2928@&violation-rtd A292a@&violation-rcd A2930@A292b A2932@A292d A2934@A292c A2937@p? A2939@make-assertion-violation A293b@assertion-violation? A293d@&assertion-rtd A293f@&assertion-rcd A2947@A2942 A2949@A2944 A294b@A2943 A294e@p? A2950@make-irritants-condition A2952@A2941 A2954@irritants-condition? A2956@condition-irritants A2958@&irritants-rtd A295a@&irritants-rcd A2962@A295d A2964@A295f A2966@A295e A2969@p? A296b@make-who-condition A296d@A295c A296f@who-condition? A2971@condition-who A2973@&who-rtd A2975@&who-rcd A297b@A2976 A297d@A2978 A297f@A2977 A2982@p? A2984@make-non-continuable-violation A2986@non-continuable-violation? A2988@&non-continuable-rtd A298a@&non-continuable-rcd A2990@A298b A2992@A298d A2994@A298c A2997@p? A2999@make-implementation-restriction-violation A299b@implementation-restriction-violation? A299d@&implementation-restriction-rtd A299f@&implementation-restriction-rcd A29a5@A29a0 A29a7@A29a2 A29a9@A29a1 A29ac@p? A29ae@make-lexical-violation A29b0@lexical-violation? A29b2@&lexical-rtd A29b4@&lexical-rcd A29be@A29b9 A29c0@A29bb A29c2@A29ba A29c5@p? A29c7@make-syntax-violation A29c9@A29b6 A29cb@A29b8 A29cd@syntax-violation? A29cf@syntax-violation-form A29d1@syntax-violation-subform A29d3@&syntax-rtd A29d5@&syntax-rcd A29db@A29d6 A29dd@A29d8 A29df@A29d7 A29e2@p? A29e4@make-undefined-violation A29e6@undefined-violation? A29e8@&undefined-rtd A29ea@&undefined-rcd A29f0@A29eb A29f2@A29ed A29f4@A29ec A29f7@p? A29f9@make-i/o-error A29fb@i/o-error? A29fd@&i/o-rtd A29ff@&i/o-rcd A2a05@A2a00 A2a07@A2a02 A2a09@A2a01 A2a0c@p? A2a0e@make-i/o-read-error A2a10@i/o-read-error? A2a12@&i/o-read-rtd A2a14@&i/o-read-rcd A2a1a@A2a15 A2a1c@A2a17 A2a1e@A2a16 A2a21@p? A2a23@make-i/o-write-error A2a25@i/o-write-error? A2a27@&i/o-write-rtd A2a29@&i/o-write-rcd A2a31@A2a2c A2a33@A2a2e A2a35@A2a2d A2a38@p? A2a3a@make-i/o-invalid-position-error A2a3c@A2a2b A2a3e@i/o-invalid-position-error? A2a40@i/o-error-position A2a42@&i/o-invalid-position-rtd A2a44@&i/o-invalid-position-rcd A2a4c@A2a47 A2a4e@A2a49 A2a50@A2a48 A2a53@p? A2a55@make-i/o-filename-error A2a57@A2a46 A2a59@i/o-filename-error? A2a5b@i/o-error-filename A2a5d@&i/o-filename-rtd A2a5f@&i/o-filename-rcd A2a65@A2a60 A2a67@A2a62 A2a69@A2a61 A2a6c@p? A2a6e@make-i/o-file-protection-error A2a70@i/o-file-protection-error? A2a72@&i/o-file-protection-rtd A2a74@&i/o-file-protection-rcd A2a7a@A2a75 A2a7c@A2a77 A2a7e@A2a76 A2a81@p? A2a83@make-i/o-file-is-read-only-error A2a85@i/o-file-is-read-only-error? A2a87@&i/o-file-is-read-only-rtd A2a89@&i/o-file-is-read-only-rcd A2a8f@A2a8a A2a91@A2a8c A2a93@A2a8b A2a96@p? A2a98@make-i/o-file-already-exists-error A2a9a@i/o-file-already-exists-error? A2a9c@&i/o-file-already-exists-rtd A2a9e@&i/o-file-already-exists-rcd A2aa4@A2a9f A2aa6@A2aa1 A2aa8@A2aa0 A2aab@p? A2aad@make-i/o-file-does-not-exist-error A2aaf@i/o-file-does-not-exist-error? A2ab1@&i/o-file-does-not-exist-rtd A2ab3@&i/o-file-does-not-exist-rcd A2abb@A2ab6 A2abd@A2ab8 A2abf@A2ab7 A2ac2@p? A2ac4@make-i/o-port-error A2ac6@A2ab5 A2ac8@i/o-port-error? A2aca@i/o-error-port A2acc@&i/o-port-rtd A2ace@&i/o-port-rcd A2ad4@A2acf A2ad6@A2ad1 A2ad8@A2ad0 A2adb@p? A2add@make-i/o-decoding-error A2adf@i/o-decoding-error? A2ae1@&i/o-decoding-rtd A2ae3@&i/o-decoding-rcd A2aeb@A2ae6 A2aed@A2ae8 A2aef@A2ae7 A2af2@p? A2af4@make-i/o-encoding-error A2af6@A2ae5 A2af8@i/o-encoding-error? A2afa@i/o-encoding-error-char A2afc@&i/o-encoding-rtd A2afe@&i/o-encoding-rcd A2b04@A2aff A2b06@A2b01 A2b08@A2b00 A2b0b@p? A2b0d@make-no-infinities-violation A2b0f@no-infinities-violation? A2b11@&no-infinities-rtd A2b13@&no-infinities-rcd A2b19@A2b14 A2b1b@A2b16 A2b1d@A2b15 A2b20@p? A2b22@make-no-nans-violation A2b24@no-nans-violation? A2b26@&no-nans-rtd A2b28@&no-nans-rcd) (begin (set! A286a@A2865 (make-record-type-descriptor '&condition '#f 'A2868 '#f '#f '#())) (set! A286c@A2867 '#f) (set! A286e@A2866 (make-record-constructor-descriptor A286a@A2865 '#f A286c@A2867)) (set! A2871@&condition? (record-predicate A286a@A2865)) (set! A2873@make-&condition (record-constructor A286e@A2866)) (set! A2875@&condition-rtd A286a@A2865) (set! A2877@&condition-rcd A286e@A2866) (set! A28c3@A28be (make-record-type-descriptor '&message A286a@A2865 'A28c1 '#f '#f '#((immutable message)))) (set! A28c5@A28c0 '#f) (set! A28c7@A28bf (make-record-constructor-descriptor A28c3@A28be A286e@A2866 A28c5@A28c0)) (set! A28ca@p? (record-predicate A28c3@A28be)) (set! A28cc@make-message-condition (record-constructor A28c7@A28bf)) (set! A28ce@A28bd (record-accessor A28c3@A28be '0)) (set! A28d0@message-condition? (condition-predicate A28c3@A28be)) (set! A28d2@condition-message (condition-accessor A28c3@A28be A28ce@A28bd)) (set! A28d4@&message-rtd A28c3@A28be) (set! A28d6@&message-rcd A28c7@A28bf) (set! A28dc@A28d7 (make-record-type-descriptor '&warning A286a@A2865 'A28da '#f '#f '#())) (set! A28de@A28d9 '#f) (set! A28e0@A28d8 (make-record-constructor-descriptor A28dc@A28d7 A286e@A2866 A28de@A28d9)) (set! A28e3@p? (record-predicate A28dc@A28d7)) (set! A28e5@make-warning (record-constructor A28e0@A28d8)) (set! A28e7@warning? (condition-predicate A28dc@A28d7)) (set! A28e9@&warning-rtd A28dc@A28d7) (set! A28eb@&warning-rcd A28e0@A28d8) (set! A28f1@A28ec (make-record-type-descriptor '&serious A286a@A2865 'A28ef '#f '#f '#())) (set! A28f3@A28ee '#f) (set! A28f5@A28ed (make-record-constructor-descriptor A28f1@A28ec A286e@A2866 A28f3@A28ee)) (set! A28f8@p? (record-predicate A28f1@A28ec)) (set! A28fa@make-serious-condition (record-constructor A28f5@A28ed)) (set! A28fc@serious-condition? (condition-predicate A28f1@A28ec)) (set! A28fe@&serious-rtd A28f1@A28ec) (set! A2900@&serious-rcd A28f5@A28ed) (set! A2906@A2901 (make-record-type-descriptor '&error A28f1@A28ec 'A2904 '#f '#f '#())) (set! A2908@A2903 '#f) (set! A290a@A2902 (make-record-constructor-descriptor A2906@A2901 A28f5@A28ed A2908@A2903)) (set! A290d@p? (record-predicate A2906@A2901)) (set! A290f@make-error (record-constructor A290a@A2902)) (set! A2911@error? (condition-predicate A2906@A2901)) (set! A2913@&error-rtd A2906@A2901) (set! A2915@&error-rcd A290a@A2902) (set! A291b@A2916 (make-record-type-descriptor '&violation A28f1@A28ec 'A2919 '#f '#f '#())) (set! A291d@A2918 '#f) (set! A291f@A2917 (make-record-constructor-descriptor A291b@A2916 A28f5@A28ed A291d@A2918)) (set! A2922@p? (record-predicate A291b@A2916)) (set! A2924@make-violation (record-constructor A291f@A2917)) (set! A2926@violation? (condition-predicate A291b@A2916)) (set! A2928@&violation-rtd A291b@A2916) (set! A292a@&violation-rcd A291f@A2917) (set! A2930@A292b (make-record-type-descriptor '&assertion A291b@A2916 'A292e '#f '#f '#())) (set! A2932@A292d '#f) (set! A2934@A292c (make-record-constructor-descriptor A2930@A292b A291f@A2917 A2932@A292d)) (set! A2937@p? (record-predicate A2930@A292b)) (set! A2939@make-assertion-violation (record-constructor A2934@A292c)) (set! A293b@assertion-violation? (condition-predicate A2930@A292b)) (set! A293d@&assertion-rtd A2930@A292b) (set! A293f@&assertion-rcd A2934@A292c) (set! A2947@A2942 (make-record-type-descriptor '&irritants A286a@A2865 'A2945 '#f '#f '#((immutable irritants)))) (set! A2949@A2944 '#f) (set! A294b@A2943 (make-record-constructor-descriptor A2947@A2942 A286e@A2866 A2949@A2944)) (set! A294e@p? (record-predicate A2947@A2942)) (set! A2950@make-irritants-condition (record-constructor A294b@A2943)) (set! A2952@A2941 (record-accessor A2947@A2942 '0)) (set! A2954@irritants-condition? (condition-predicate A2947@A2942)) (set! A2956@condition-irritants (condition-accessor A2947@A2942 A2952@A2941)) (set! A2958@&irritants-rtd A2947@A2942) (set! A295a@&irritants-rcd A294b@A2943) (set! A2962@A295d (make-record-type-descriptor '&who A286a@A2865 'A2960 '#f '#f '#((immutable who)))) (set! A2964@A295f '#f) (set! A2966@A295e (make-record-constructor-descriptor A2962@A295d A286e@A2866 A2964@A295f)) (set! A2969@p? (record-predicate A2962@A295d)) (set! A296b@make-who-condition (record-constructor A2966@A295e)) (set! A296d@A295c (record-accessor A2962@A295d '0)) (set! A296f@who-condition? (condition-predicate A2962@A295d)) (set! A2971@condition-who (condition-accessor A2962@A295d A296d@A295c)) (set! A2973@&who-rtd A2962@A295d) (set! A2975@&who-rcd A2966@A295e) (set! A297b@A2976 (make-record-type-descriptor '&non-continuable A291b@A2916 'A2979 '#f '#f '#())) (set! A297d@A2978 '#f) (set! A297f@A2977 (make-record-constructor-descriptor A297b@A2976 A291f@A2917 A297d@A2978)) (set! A2982@p? (record-predicate A297b@A2976)) (set! A2984@make-non-continuable-violation (record-constructor A297f@A2977)) (set! A2986@non-continuable-violation? (condition-predicate A297b@A2976)) (set! A2988@&non-continuable-rtd A297b@A2976) (set! A298a@&non-continuable-rcd A297f@A2977) (set! A2990@A298b (make-record-type-descriptor '&implementation-restriction A291b@A2916 'A298e '#f '#f '#())) (set! A2992@A298d '#f) (set! A2994@A298c (make-record-constructor-descriptor A2990@A298b A291f@A2917 A2992@A298d)) (set! A2997@p? (record-predicate A2990@A298b)) (set! A2999@make-implementation-restriction-violation (record-constructor A2994@A298c)) (set! A299b@implementation-restriction-violation? (condition-predicate A2990@A298b)) (set! A299d@&implementation-restriction-rtd A2990@A298b) (set! A299f@&implementation-restriction-rcd A2994@A298c) (set! A29a5@A29a0 (make-record-type-descriptor '&lexical A291b@A2916 'A29a3 '#f '#f '#())) (set! A29a7@A29a2 '#f) (set! A29a9@A29a1 (make-record-constructor-descriptor A29a5@A29a0 A291f@A2917 A29a7@A29a2)) (set! A29ac@p? (record-predicate A29a5@A29a0)) (set! A29ae@make-lexical-violation (record-constructor A29a9@A29a1)) (set! A29b0@lexical-violation? (condition-predicate A29a5@A29a0)) (set! A29b2@&lexical-rtd A29a5@A29a0) (set! A29b4@&lexical-rcd A29a9@A29a1) (set! A29be@A29b9 (make-record-type-descriptor '&syntax A291b@A2916 'A29bc '#f '#f '#((immutable form) (immutable subform)))) (set! A29c0@A29bb '#f) (set! A29c2@A29ba (make-record-constructor-descriptor A29be@A29b9 A291f@A2917 A29c0@A29bb)) (set! A29c5@p? (record-predicate A29be@A29b9)) (set! A29c7@make-syntax-violation (record-constructor A29c2@A29ba)) (set! A29c9@A29b6 (record-accessor A29be@A29b9 '0)) (set! A29cb@A29b8 (record-accessor A29be@A29b9 '1)) (set! A29cd@syntax-violation? (condition-predicate A29be@A29b9)) (set! A29cf@syntax-violation-form (condition-accessor A29be@A29b9 A29c9@A29b6)) (set! A29d1@syntax-violation-subform (condition-accessor A29be@A29b9 A29cb@A29b8)) (set! A29d3@&syntax-rtd A29be@A29b9) (set! A29d5@&syntax-rcd A29c2@A29ba) (set! A29db@A29d6 (make-record-type-descriptor '&undefined A291b@A2916 'A29d9 '#f '#f '#())) (set! A29dd@A29d8 '#f) (set! A29df@A29d7 (make-record-constructor-descriptor A29db@A29d6 A291f@A2917 A29dd@A29d8)) (set! A29e2@p? (record-predicate A29db@A29d6)) (set! A29e4@make-undefined-violation (record-constructor A29df@A29d7)) (set! A29e6@undefined-violation? (condition-predicate A29db@A29d6)) (set! A29e8@&undefined-rtd A29db@A29d6) (set! A29ea@&undefined-rcd A29df@A29d7) (set! A29f0@A29eb (make-record-type-descriptor '&i/o A2906@A2901 'A29ee '#f '#f '#())) (set! A29f2@A29ed '#f) (set! A29f4@A29ec (make-record-constructor-descriptor A29f0@A29eb A290a@A2902 A29f2@A29ed)) (set! A29f7@p? (record-predicate A29f0@A29eb)) (set! A29f9@make-i/o-error (record-constructor A29f4@A29ec)) (set! A29fb@i/o-error? (condition-predicate A29f0@A29eb)) (set! A29fd@&i/o-rtd A29f0@A29eb) (set! A29ff@&i/o-rcd A29f4@A29ec) (set! A2a05@A2a00 (make-record-type-descriptor '&i/o-read A29f0@A29eb 'A2a03 '#f '#f '#())) (set! A2a07@A2a02 '#f) (set! A2a09@A2a01 (make-record-constructor-descriptor A2a05@A2a00 A29f4@A29ec A2a07@A2a02)) (set! A2a0c@p? (record-predicate A2a05@A2a00)) (set! A2a0e@make-i/o-read-error (record-constructor A2a09@A2a01)) (set! A2a10@i/o-read-error? (condition-predicate A2a05@A2a00)) (set! A2a12@&i/o-read-rtd A2a05@A2a00) (set! A2a14@&i/o-read-rcd A2a09@A2a01) (set! A2a1a@A2a15 (make-record-type-descriptor '&i/o-write A29f0@A29eb 'A2a18 '#f '#f '#())) (set! A2a1c@A2a17 '#f) (set! A2a1e@A2a16 (make-record-constructor-descriptor A2a1a@A2a15 A29f4@A29ec A2a1c@A2a17)) (set! A2a21@p? (record-predicate A2a1a@A2a15)) (set! A2a23@make-i/o-write-error (record-constructor A2a1e@A2a16)) (set! A2a25@i/o-write-error? (condition-predicate A2a1a@A2a15)) (set! A2a27@&i/o-write-rtd A2a1a@A2a15) (set! A2a29@&i/o-write-rcd A2a1e@A2a16) (set! A2a31@A2a2c (make-record-type-descriptor '&i/o-invalid-position A29f0@A29eb 'A2a2f '#f '#f '#((immutable position)))) (set! A2a33@A2a2e '#f) (set! A2a35@A2a2d (make-record-constructor-descriptor A2a31@A2a2c A29f4@A29ec A2a33@A2a2e)) (set! A2a38@p? (record-predicate A2a31@A2a2c)) (set! A2a3a@make-i/o-invalid-position-error (record-constructor A2a35@A2a2d)) (set! A2a3c@A2a2b (record-accessor A2a31@A2a2c '0)) (set! A2a3e@i/o-invalid-position-error? (condition-predicate A2a31@A2a2c)) (set! A2a40@i/o-error-position (condition-accessor A2a31@A2a2c A2a3c@A2a2b)) (set! A2a42@&i/o-invalid-position-rtd A2a31@A2a2c) (set! A2a44@&i/o-invalid-position-rcd A2a35@A2a2d) (set! A2a4c@A2a47 (make-record-type-descriptor '&i/o-filename A29f0@A29eb 'A2a4a '#f '#f '#((immutable filename)))) (set! A2a4e@A2a49 '#f) (set! A2a50@A2a48 (make-record-constructor-descriptor A2a4c@A2a47 A29f4@A29ec A2a4e@A2a49)) (set! A2a53@p? (record-predicate A2a4c@A2a47)) (set! A2a55@make-i/o-filename-error (record-constructor A2a50@A2a48)) (set! A2a57@A2a46 (record-accessor A2a4c@A2a47 '0)) (set! A2a59@i/o-filename-error? (condition-predicate A2a4c@A2a47)) (set! A2a5b@i/o-error-filename (condition-accessor A2a4c@A2a47 A2a57@A2a46)) (set! A2a5d@&i/o-filename-rtd A2a4c@A2a47) (set! A2a5f@&i/o-filename-rcd A2a50@A2a48) (set! A2a65@A2a60 (make-record-type-descriptor '&i/o-file-protection A2a4c@A2a47 'A2a63 '#f '#f '#())) (set! A2a67@A2a62 '#f) (set! A2a69@A2a61 (make-record-constructor-descriptor A2a65@A2a60 A2a50@A2a48 A2a67@A2a62)) (set! A2a6c@p? (record-predicate A2a65@A2a60)) (set! A2a6e@make-i/o-file-protection-error (record-constructor A2a69@A2a61)) (set! A2a70@i/o-file-protection-error? (condition-predicate A2a65@A2a60)) (set! A2a72@&i/o-file-protection-rtd A2a65@A2a60) (set! A2a74@&i/o-file-protection-rcd A2a69@A2a61) (set! A2a7a@A2a75 (make-record-type-descriptor '&i/o-file-is-read-only A2a65@A2a60 'A2a78 '#f '#f '#())) (set! A2a7c@A2a77 '#f) (set! A2a7e@A2a76 (make-record-constructor-descriptor A2a7a@A2a75 A2a69@A2a61 A2a7c@A2a77)) (set! A2a81@p? (record-predicate A2a7a@A2a75)) (set! A2a83@make-i/o-file-is-read-only-error (record-constructor A2a7e@A2a76)) (set! A2a85@i/o-file-is-read-only-error? (condition-predicate A2a7a@A2a75)) (set! A2a87@&i/o-file-is-read-only-rtd A2a7a@A2a75) (set! A2a89@&i/o-file-is-read-only-rcd A2a7e@A2a76) (set! A2a8f@A2a8a (make-record-type-descriptor '&i/o-file-already-exists A2a4c@A2a47 'A2a8d '#f '#f '#())) (set! A2a91@A2a8c '#f) (set! A2a93@A2a8b (make-record-constructor-descriptor A2a8f@A2a8a A2a50@A2a48 A2a91@A2a8c)) (set! A2a96@p? (record-predicate A2a8f@A2a8a)) (set! A2a98@make-i/o-file-already-exists-error (record-constructor A2a93@A2a8b)) (set! A2a9a@i/o-file-already-exists-error? (condition-predicate A2a8f@A2a8a)) (set! A2a9c@&i/o-file-already-exists-rtd A2a8f@A2a8a) (set! A2a9e@&i/o-file-already-exists-rcd A2a93@A2a8b) (set! A2aa4@A2a9f (make-record-type-descriptor '&i/o-file-does-not-exist A2a4c@A2a47 'A2aa2 '#f '#f '#())) (set! A2aa6@A2aa1 '#f) (set! A2aa8@A2aa0 (make-record-constructor-descriptor A2aa4@A2a9f A2a50@A2a48 A2aa6@A2aa1)) (set! A2aab@p? (record-predicate A2aa4@A2a9f)) (set! A2aad@make-i/o-file-does-not-exist-error (record-constructor A2aa8@A2aa0)) (set! A2aaf@i/o-file-does-not-exist-error? (condition-predicate A2aa4@A2a9f)) (set! A2ab1@&i/o-file-does-not-exist-rtd A2aa4@A2a9f) (set! A2ab3@&i/o-file-does-not-exist-rcd A2aa8@A2aa0) (set! A2abb@A2ab6 (make-record-type-descriptor '&i/o-port A29f0@A29eb 'A2ab9 '#f '#f '#((immutable port)))) (set! A2abd@A2ab8 '#f) (set! A2abf@A2ab7 (make-record-constructor-descriptor A2abb@A2ab6 A29f4@A29ec A2abd@A2ab8)) (set! A2ac2@p? (record-predicate A2abb@A2ab6)) (set! A2ac4@make-i/o-port-error (record-constructor A2abf@A2ab7)) (set! A2ac6@A2ab5 (record-accessor A2abb@A2ab6 '0)) (set! A2ac8@i/o-port-error? (condition-predicate A2abb@A2ab6)) (set! A2aca@i/o-error-port (condition-accessor A2abb@A2ab6 A2ac6@A2ab5)) (set! A2acc@&i/o-port-rtd A2abb@A2ab6) (set! A2ace@&i/o-port-rcd A2abf@A2ab7) (set! A2ad4@A2acf (make-record-type-descriptor '&i/o-decoding A2abb@A2ab6 'A2ad2 '#f '#f '#())) (set! A2ad6@A2ad1 '#f) (set! A2ad8@A2ad0 (make-record-constructor-descriptor A2ad4@A2acf A2abf@A2ab7 A2ad6@A2ad1)) (set! A2adb@p? (record-predicate A2ad4@A2acf)) (set! A2add@make-i/o-decoding-error (record-constructor A2ad8@A2ad0)) (set! A2adf@i/o-decoding-error? (condition-predicate A2ad4@A2acf)) (set! A2ae1@&i/o-decoding-rtd A2ad4@A2acf) (set! A2ae3@&i/o-decoding-rcd A2ad8@A2ad0) (set! A2aeb@A2ae6 (make-record-type-descriptor '&i/o-encoding A2abb@A2ab6 'A2ae9 '#f '#f '#((immutable char)))) (set! A2aed@A2ae8 '#f) (set! A2aef@A2ae7 (make-record-constructor-descriptor A2aeb@A2ae6 A2abf@A2ab7 A2aed@A2ae8)) (set! A2af2@p? (record-predicate A2aeb@A2ae6)) (set! A2af4@make-i/o-encoding-error (record-constructor A2aef@A2ae7)) (set! A2af6@A2ae5 (record-accessor A2aeb@A2ae6 '0)) (set! A2af8@i/o-encoding-error? (condition-predicate A2aeb@A2ae6)) (set! A2afa@i/o-encoding-error-char (condition-accessor A2aeb@A2ae6 A2af6@A2ae5)) (set! A2afc@&i/o-encoding-rtd A2aeb@A2ae6) (set! A2afe@&i/o-encoding-rcd A2aef@A2ae7) (set! A2b04@A2aff (make-record-type-descriptor '&no-infinities A2990@A298b 'A2b02 '#f '#f '#())) (set! A2b06@A2b01 '#f) (set! A2b08@A2b00 (make-record-constructor-descriptor A2b04@A2aff A2994@A298c A2b06@A2b01)) (set! A2b0b@p? (record-predicate A2b04@A2aff)) (set! A2b0d@make-no-infinities-violation (record-constructor A2b08@A2b00)) (set! A2b0f@no-infinities-violation? (condition-predicate A2b04@A2aff)) (set! A2b11@&no-infinities-rtd A2b04@A2aff) (set! A2b13@&no-infinities-rcd A2b08@A2b00) (set! A2b19@A2b14 (make-record-type-descriptor '&no-nans A2990@A298b 'A2b17 '#f '#f '#())) (set! A2b1b@A2b16 '#f) (set! A2b1d@A2b15 (make-record-constructor-descriptor A2b19@A2b14 A2994@A298c A2b1b@A2b16)) (set! A2b20@p? (record-predicate A2b19@A2b14)) (set! A2b22@make-no-nans-violation (record-constructor A2b1d@A2b15)) (set! A2b24@no-nans-violation? (condition-predicate A2b19@A2b14)) (set! A2b26@&no-nans-rtd A2b19@A2b14) (set! A2b28@&no-nans-rcd A2b1d@A2b15) (begin (set! A2c19@A2b28@&no-nans-rcd A2b28@&no-nans-rcd) (set! A2c18@A2b26@&no-nans-rtd A2b26@&no-nans-rtd) (set! A2c17@A2b24@no-nans-violation? A2b24@no-nans-violation?) (set! A2c16@A2b22@make-no-nans-violation A2b22@make-no-nans-violation) (set! A2c15@A2b20@p? A2b20@p?) (set! A2c14@A2b1d@A2b15 A2b1d@A2b15) (set! A2c13@A2b1b@A2b16 A2b1b@A2b16) (set! A2c12@A2b19@A2b14 A2b19@A2b14) (set! A2c11@A2b13@&no-infinities-rcd A2b13@&no-infinities-rcd) (set! A2c10@A2b11@&no-infinities-rtd A2b11@&no-infinities-rtd) (set! A2c0f@A2b0f@no-infinities-violation? A2b0f@no-infinities-violation?) (set! A2c0e@A2b0d@make-no-infinities-violation A2b0d@make-no-infinities-violation) (set! A2c0d@A2b0b@p? A2b0b@p?) (set! A2c0c@A2b08@A2b00 A2b08@A2b00) (set! A2c0b@A2b06@A2b01 A2b06@A2b01) (set! A2c0a@A2b04@A2aff A2b04@A2aff) (set! A2c09@A2afe@&i/o-encoding-rcd A2afe@&i/o-encoding-rcd) (set! A2c08@A2afc@&i/o-encoding-rtd A2afc@&i/o-encoding-rtd) (set! A2c07@A2afa@i/o-encoding-error-char A2afa@i/o-encoding-error-char) (set! A2c06@A2af8@i/o-encoding-error? A2af8@i/o-encoding-error?) (set! A2c05@A2af6@A2ae5 A2af6@A2ae5) (set! A2c04@A2af4@make-i/o-encoding-error A2af4@make-i/o-encoding-error) (set! A2c03@A2af2@p? A2af2@p?) (set! A2c02@A2aef@A2ae7 A2aef@A2ae7) (set! A2c01@A2aed@A2ae8 A2aed@A2ae8) (set! A2c00@A2aeb@A2ae6 A2aeb@A2ae6) (set! A2bff@A2ae3@&i/o-decoding-rcd A2ae3@&i/o-decoding-rcd) (set! A2bfe@A2ae1@&i/o-decoding-rtd A2ae1@&i/o-decoding-rtd) (set! A2bfd@A2adf@i/o-decoding-error? A2adf@i/o-decoding-error?) (set! A2bfc@A2add@make-i/o-decoding-error A2add@make-i/o-decoding-error) (set! A2bfb@A2adb@p? A2adb@p?) (set! A2bfa@A2ad8@A2ad0 A2ad8@A2ad0) (set! A2bf9@A2ad6@A2ad1 A2ad6@A2ad1) (set! A2bf8@A2ad4@A2acf A2ad4@A2acf) (set! A2bf7@A2ace@&i/o-port-rcd A2ace@&i/o-port-rcd) (set! A2bf6@A2acc@&i/o-port-rtd A2acc@&i/o-port-rtd) (set! A2bf5@A2aca@i/o-error-port A2aca@i/o-error-port) (set! A2bf4@A2ac8@i/o-port-error? A2ac8@i/o-port-error?) (set! A2bf3@A2ac6@A2ab5 A2ac6@A2ab5) (set! A2bf2@A2ac4@make-i/o-port-error A2ac4@make-i/o-port-error) (set! A2bf1@A2ac2@p? A2ac2@p?) (set! A2bf0@A2abf@A2ab7 A2abf@A2ab7) (set! A2bef@A2abd@A2ab8 A2abd@A2ab8) (set! A2bee@A2abb@A2ab6 A2abb@A2ab6) (set! A2bed@A2ab3@&i/o-file-does-not-exist-rcd A2ab3@&i/o-file-does-not-exist-rcd) (set! A2bec@A2ab1@&i/o-file-does-not-exist-rtd A2ab1@&i/o-file-does-not-exist-rtd) (set! A2beb@A2aaf@i/o-file-does-not-exist-error? A2aaf@i/o-file-does-not-exist-error?) (set! A2bea@A2aad@make-i/o-file-does-not-exist-error A2aad@make-i/o-file-does-not-exist-error) (set! A2be9@A2aab@p? A2aab@p?) (set! A2be8@A2aa8@A2aa0 A2aa8@A2aa0) (set! A2be7@A2aa6@A2aa1 A2aa6@A2aa1) (set! A2be6@A2aa4@A2a9f A2aa4@A2a9f) (set! A2be5@A2a9e@&i/o-file-already-exists-rcd A2a9e@&i/o-file-already-exists-rcd) (set! A2be4@A2a9c@&i/o-file-already-exists-rtd A2a9c@&i/o-file-already-exists-rtd) (set! A2be3@A2a9a@i/o-file-already-exists-error? A2a9a@i/o-file-already-exists-error?) (set! A2be2@A2a98@make-i/o-file-already-exists-error A2a98@make-i/o-file-already-exists-error) (set! A2be1@A2a96@p? A2a96@p?) (set! A2be0@A2a93@A2a8b A2a93@A2a8b) (set! A2bdf@A2a91@A2a8c A2a91@A2a8c) (set! A2bde@A2a8f@A2a8a A2a8f@A2a8a) (set! A2bdd@A2a89@&i/o-file-is-read-only-rcd A2a89@&i/o-file-is-read-only-rcd) (set! A2bdc@A2a87@&i/o-file-is-read-only-rtd A2a87@&i/o-file-is-read-only-rtd) (set! A2bdb@A2a85@i/o-file-is-read-only-error? A2a85@i/o-file-is-read-only-error?) (set! A2bda@A2a83@make-i/o-file-is-read-only-error A2a83@make-i/o-file-is-read-only-error) (set! A2bd9@A2a81@p? A2a81@p?) (set! A2bd8@A2a7e@A2a76 A2a7e@A2a76) (set! A2bd7@A2a7c@A2a77 A2a7c@A2a77) (set! A2bd6@A2a7a@A2a75 A2a7a@A2a75) (set! A2bd5@A2a74@&i/o-file-protection-rcd A2a74@&i/o-file-protection-rcd) (set! A2bd4@A2a72@&i/o-file-protection-rtd A2a72@&i/o-file-protection-rtd) (set! A2bd3@A2a70@i/o-file-protection-error? A2a70@i/o-file-protection-error?) (set! A2bd2@A2a6e@make-i/o-file-protection-error A2a6e@make-i/o-file-protection-error) (set! A2bd1@A2a6c@p? A2a6c@p?) (set! A2bd0@A2a69@A2a61 A2a69@A2a61) (set! A2bcf@A2a67@A2a62 A2a67@A2a62) (set! A2bce@A2a65@A2a60 A2a65@A2a60) (set! A2bcd@A2a5f@&i/o-filename-rcd A2a5f@&i/o-filename-rcd) (set! A2bcc@A2a5d@&i/o-filename-rtd A2a5d@&i/o-filename-rtd) (set! A2bcb@A2a5b@i/o-error-filename A2a5b@i/o-error-filename) (set! A2bca@A2a59@i/o-filename-error? A2a59@i/o-filename-error?) (set! A2bc9@A2a57@A2a46 A2a57@A2a46) (set! A2bc8@A2a55@make-i/o-filename-error A2a55@make-i/o-filename-error) (set! A2bc7@A2a53@p? A2a53@p?) (set! A2bc6@A2a50@A2a48 A2a50@A2a48) (set! A2bc5@A2a4e@A2a49 A2a4e@A2a49) (set! A2bc4@A2a4c@A2a47 A2a4c@A2a47) (set! A2bc3@A2a44@&i/o-invalid-position-rcd A2a44@&i/o-invalid-position-rcd) (set! A2bc2@A2a42@&i/o-invalid-position-rtd A2a42@&i/o-invalid-position-rtd) (set! A2bc1@A2a40@i/o-error-position A2a40@i/o-error-position) (set! A2bc0@A2a3e@i/o-invalid-position-error? A2a3e@i/o-invalid-position-error?) (set! A2bbf@A2a3c@A2a2b A2a3c@A2a2b) (set! A2bbe@A2a3a@make-i/o-invalid-position-error A2a3a@make-i/o-invalid-position-error) (set! A2bbd@A2a38@p? A2a38@p?) (set! A2bbc@A2a35@A2a2d A2a35@A2a2d) (set! A2bbb@A2a33@A2a2e A2a33@A2a2e) (set! A2bba@A2a31@A2a2c A2a31@A2a2c) (set! A2bb9@A2a29@&i/o-write-rcd A2a29@&i/o-write-rcd) (set! A2bb8@A2a27@&i/o-write-rtd A2a27@&i/o-write-rtd) (set! A2bb7@A2a25@i/o-write-error? A2a25@i/o-write-error?) (set! A2bb6@A2a23@make-i/o-write-error A2a23@make-i/o-write-error) (set! A2bb5@A2a21@p? A2a21@p?) (set! A2bb4@A2a1e@A2a16 A2a1e@A2a16) (set! A2bb3@A2a1c@A2a17 A2a1c@A2a17) (set! A2bb2@A2a1a@A2a15 A2a1a@A2a15) (set! A2bb1@A2a14@&i/o-read-rcd A2a14@&i/o-read-rcd) (set! A2bb0@A2a12@&i/o-read-rtd A2a12@&i/o-read-rtd) (set! A2baf@A2a10@i/o-read-error? A2a10@i/o-read-error?) (set! A2bae@A2a0e@make-i/o-read-error A2a0e@make-i/o-read-error) (set! A2bad@A2a0c@p? A2a0c@p?) (set! A2bac@A2a09@A2a01 A2a09@A2a01) (set! A2bab@A2a07@A2a02 A2a07@A2a02) (set! A2baa@A2a05@A2a00 A2a05@A2a00) (set! A2ba9@A29ff@&i/o-rcd A29ff@&i/o-rcd) (set! A2ba8@A29fd@&i/o-rtd A29fd@&i/o-rtd) (set! A2ba7@A29fb@i/o-error? A29fb@i/o-error?) (set! A2ba6@A29f9@make-i/o-error A29f9@make-i/o-error) (set! A2ba5@A29f7@p? A29f7@p?) (set! A2ba4@A29f4@A29ec A29f4@A29ec) (set! A2ba3@A29f2@A29ed A29f2@A29ed) (set! A2ba2@A29f0@A29eb A29f0@A29eb) (set! A2ba1@A29ea@&undefined-rcd A29ea@&undefined-rcd) (set! A2ba0@A29e8@&undefined-rtd A29e8@&undefined-rtd) (set! A2b9f@A29e6@undefined-violation? A29e6@undefined-violation?) (set! A2b9e@A29e4@make-undefined-violation A29e4@make-undefined-violation) (set! A2b9d@A29e2@p? A29e2@p?) (set! A2b9c@A29df@A29d7 A29df@A29d7) (set! A2b9b@A29dd@A29d8 A29dd@A29d8) (set! A2b9a@A29db@A29d6 A29db@A29d6) (set! A2b99@A29d5@&syntax-rcd A29d5@&syntax-rcd) (set! A2b98@A29d3@&syntax-rtd A29d3@&syntax-rtd) (set! A2b97@A29d1@syntax-violation-subform A29d1@syntax-violation-subform) (set! A2b96@A29cf@syntax-violation-form A29cf@syntax-violation-form) (set! A2b95@A29cd@syntax-violation? A29cd@syntax-violation?) (set! A2b94@A29cb@A29b8 A29cb@A29b8) (set! A2b93@A29c9@A29b6 A29c9@A29b6) (set! A2b92@A29c7@make-syntax-violation A29c7@make-syntax-violation) (set! A2b91@A29c5@p? A29c5@p?) (set! A2b90@A29c2@A29ba A29c2@A29ba) (set! A2b8f@A29c0@A29bb A29c0@A29bb) (set! A2b8e@A29be@A29b9 A29be@A29b9) (set! A2b8d@A29b4@&lexical-rcd A29b4@&lexical-rcd) (set! A2b8c@A29b2@&lexical-rtd A29b2@&lexical-rtd) (set! A2b8b@A29b0@lexical-violation? A29b0@lexical-violation?) (set! A2b8a@A29ae@make-lexical-violation A29ae@make-lexical-violation) (set! A2b89@A29ac@p? A29ac@p?) (set! A2b88@A29a9@A29a1 A29a9@A29a1) (set! A2b87@A29a7@A29a2 A29a7@A29a2) (set! A2b86@A29a5@A29a0 A29a5@A29a0) (set! A2b85@A299f@&implementation-restriction-rcd A299f@&implementation-restriction-rcd) (set! A2b84@A299d@&implementation-restriction-rtd A299d@&implementation-restriction-rtd) (set! A2b83@A299b@implementation-restriction-violation? A299b@implementation-restriction-violation?) (set! A2b82@A2999@make-implementation-restriction-violation A2999@make-implementation-restriction-violation) (set! A2b81@A2997@p? A2997@p?) (set! A2b80@A2994@A298c A2994@A298c) (set! A2b7f@A2992@A298d A2992@A298d) (set! A2b7e@A2990@A298b A2990@A298b) (set! A2b7d@A298a@&non-continuable-rcd A298a@&non-continuable-rcd) (set! A2b7c@A2988@&non-continuable-rtd A2988@&non-continuable-rtd) (set! A2b7b@A2986@non-continuable-violation? A2986@non-continuable-violation?) (set! A2b7a@A2984@make-non-continuable-violation A2984@make-non-continuable-violation) (set! A2b79@A2982@p? A2982@p?) (set! A2b78@A297f@A2977 A297f@A2977) (set! A2b77@A297d@A2978 A297d@A2978) (set! A2b76@A297b@A2976 A297b@A2976) (set! A2b75@A2975@&who-rcd A2975@&who-rcd) (set! A2b74@A2973@&who-rtd A2973@&who-rtd) (set! A2b73@A2971@condition-who A2971@condition-who) (set! A2b72@A296f@who-condition? A296f@who-condition?) (set! A2b71@A296d@A295c A296d@A295c) (set! A2b70@A296b@make-who-condition A296b@make-who-condition) (set! A2b6f@A2969@p? A2969@p?) (set! A2b6e@A2966@A295e A2966@A295e) (set! A2b6d@A2964@A295f A2964@A295f) (set! A2b6c@A2962@A295d A2962@A295d) (set! A2b6b@A295a@&irritants-rcd A295a@&irritants-rcd) (set! A2b6a@A2958@&irritants-rtd A2958@&irritants-rtd) (set! A2b69@A2956@condition-irritants A2956@condition-irritants) (set! A2b68@A2954@irritants-condition? A2954@irritants-condition?) (set! A2b67@A2952@A2941 A2952@A2941) (set! A2b66@A2950@make-irritants-condition A2950@make-irritants-condition) (set! A2b65@A294e@p? A294e@p?) (set! A2b64@A294b@A2943 A294b@A2943) (set! A2b63@A2949@A2944 A2949@A2944) (set! A2b62@A2947@A2942 A2947@A2942) (set! A2b61@A293f@&assertion-rcd A293f@&assertion-rcd) (set! A2b60@A293d@&assertion-rtd A293d@&assertion-rtd) (set! A2b5f@A293b@assertion-violation? A293b@assertion-violation?) (set! A2b5e@A2939@make-assertion-violation A2939@make-assertion-violation) (set! A2b5d@A2937@p? A2937@p?) (set! A2b5c@A2934@A292c A2934@A292c) (set! A2b5b@A2932@A292d A2932@A292d) (set! A2b5a@A2930@A292b A2930@A292b) (set! A2b59@A292a@&violation-rcd A292a@&violation-rcd) (set! A2b58@A2928@&violation-rtd A2928@&violation-rtd) (set! A2b57@A2926@violation? A2926@violation?) (set! A2b56@A2924@make-violation A2924@make-violation) (set! A2b55@A2922@p? A2922@p?) (set! A2b54@A291f@A2917 A291f@A2917) (set! A2b53@A291d@A2918 A291d@A2918) (set! A2b52@A291b@A2916 A291b@A2916) (set! A2b51@A2915@&error-rcd A2915@&error-rcd) (set! A2b50@A2913@&error-rtd A2913@&error-rtd) (set! A2b4f@A2911@error? A2911@error?) (set! A2b4e@A290f@make-error A290f@make-error) (set! A2b4d@A290d@p? A290d@p?) (set! A2b4c@A290a@A2902 A290a@A2902) (set! A2b4b@A2908@A2903 A2908@A2903) (set! A2b4a@A2906@A2901 A2906@A2901) (set! A2b49@A2900@&serious-rcd A2900@&serious-rcd) (set! A2b48@A28fe@&serious-rtd A28fe@&serious-rtd) (set! A2b47@A28fc@serious-condition? A28fc@serious-condition?) (set! A2b46@A28fa@make-serious-condition A28fa@make-serious-condition) (set! A2b45@A28f8@p? A28f8@p?) (set! A2b44@A28f5@A28ed A28f5@A28ed) (set! A2b43@A28f3@A28ee A28f3@A28ee) (set! A2b42@A28f1@A28ec A28f1@A28ec) (set! A2b41@A28eb@&warning-rcd A28eb@&warning-rcd) (set! A2b40@A28e9@&warning-rtd A28e9@&warning-rtd) (set! A2b3f@A28e7@warning? A28e7@warning?) (set! A2b3e@A28e5@make-warning A28e5@make-warning) (set! A2b3d@A28e3@p? A28e3@p?) (set! A2b3c@A28e0@A28d8 A28e0@A28d8) (set! A2b3b@A28de@A28d9 A28de@A28d9) (set! A2b3a@A28dc@A28d7 A28dc@A28d7) (set! A2b39@A28d6@&message-rcd A28d6@&message-rcd) (set! A2b38@A28d4@&message-rtd A28d4@&message-rtd) (set! A2b37@A28d2@condition-message A28d2@condition-message) (set! A2b36@A28d0@message-condition? A28d0@message-condition?) (set! A2b35@A28ce@A28bd A28ce@A28bd) (set! A2b34@A28cc@make-message-condition A28cc@make-message-condition) (set! A2b33@A28ca@p? A28ca@p?) (set! A2b32@A28c7@A28bf A28c7@A28bf) (set! A2b31@A28c5@A28c0 A28c5@A28c0) (set! A2b30@A28c3@A28be A28c3@A28be) (set! A2b2f@A2877@&condition-rcd A2877@&condition-rcd) (set! A2b2e@A2875@&condition-rtd A2875@&condition-rtd) (set! A2b2d@A2873@make-&condition A2873@make-&condition) (set! A2b2c@A2871@&condition? A2871@&condition?) (set! A2b2b@A286e@A2866 A286e@A2866) (set! A2b2a@A286c@A2867 A286c@A2867) (set! A2b29@A286a@A2865 A286a@A2865)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (A70c@A6c1@current-primitive-locations (lambda (A30f1@x) ((lambda (A30f3@t) (if A30f3@t (cdr A30f3@t) '#f)) (assq A30f1@x '((&no-nans-rcd . A2c19@A2b28@&no-nans-rcd) (&no-nans-rtd . A2c18@A2b26@&no-nans-rtd) (&no-infinities-rcd . A2c11@A2b13@&no-infinities-rcd) (&no-infinities-rtd . A2c10@A2b11@&no-infinities-rtd) (&i/o-encoding-rcd . A2c09@A2afe@&i/o-encoding-rcd) (&i/o-encoding-rtd . A2c08@A2afc@&i/o-encoding-rtd) (&i/o-decoding-rcd . A2bff@A2ae3@&i/o-decoding-rcd) (&i/o-decoding-rtd . A2bfe@A2ae1@&i/o-decoding-rtd) (&i/o-port-rcd . A2bf7@A2ace@&i/o-port-rcd) (&i/o-port-rtd . A2bf6@A2acc@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . A2bed@A2ab3@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . A2bec@A2ab1@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . A2be5@A2a9e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . A2be4@A2a9c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . A2bdd@A2a89@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . A2bdc@A2a87@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . A2bd5@A2a74@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . A2bd4@A2a72@&i/o-file-protection-rtd) (&i/o-filename-rcd . A2bcd@A2a5f@&i/o-filename-rcd) (&i/o-filename-rtd . A2bcc@A2a5d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . A2bc3@A2a44@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . A2bc2@A2a42@&i/o-invalid-position-rtd) (&i/o-write-rcd . A2bb9@A2a29@&i/o-write-rcd) (&i/o-write-rtd . A2bb8@A2a27@&i/o-write-rtd) (&i/o-read-rcd . A2bb1@A2a14@&i/o-read-rcd) (&i/o-read-rtd . A2bb0@A2a12@&i/o-read-rtd) (&i/o-rcd . A2ba9@A29ff@&i/o-rcd) (&i/o-rtd . A2ba8@A29fd@&i/o-rtd) (&undefined-rcd . A2ba1@A29ea@&undefined-rcd) (&undefined-rtd . A2ba0@A29e8@&undefined-rtd) (&syntax-rcd . A2b99@A29d5@&syntax-rcd) (&syntax-rtd . A2b98@A29d3@&syntax-rtd) (&lexical-rcd . A2b8d@A29b4@&lexical-rcd) (&lexical-rtd . A2b8c@A29b2@&lexical-rtd) (&implementation-restriction-rcd . A2b85@A299f@&implementation-restriction-rcd) (&implementation-restriction-rtd . A2b84@A299d@&implementation-restriction-rtd) (&non-continuable-rcd . A2b7d@A298a@&non-continuable-rcd) (&non-continuable-rtd . A2b7c@A2988@&non-continuable-rtd) (&who-rcd . A2b75@A2975@&who-rcd) (&who-rtd . A2b74@A2973@&who-rtd) (&irritants-rcd . A2b6b@A295a@&irritants-rcd) (&irritants-rtd . A2b6a@A2958@&irritants-rtd) (&assertion-rcd . A2b61@A293f@&assertion-rcd) (&assertion-rtd . A2b60@A293d@&assertion-rtd) (&violation-rcd . A2b59@A292a@&violation-rcd) (&violation-rtd . A2b58@A2928@&violation-rtd) (&error-rcd . A2b51@A2915@&error-rcd) (&error-rtd . A2b50@A2913@&error-rtd) (&serious-rcd . A2b49@A2900@&serious-rcd) (&serious-rtd . A2b48@A28fe@&serious-rtd) (&warning-rcd . A2b41@A28eb@&warning-rcd) (&warning-rtd . A2b40@A28e9@&warning-rtd) (&message-rcd . A2b39@A28d6@&message-rcd) (&message-rtd . A2b38@A28d4@&message-rtd) (&condition-rcd . A2b2f@A2877@&condition-rcd) (&condition-rtd . A2b2e@A2875@&condition-rtd) (syntax-error . A2852@Ae3b@syntax-error) (syntax-dispatch . A27f0@Ad5f@syntax-dispatch) (load . A2d9e@A2c35@load) (interaction-environment . A285a@Ae4b@interaction-environment) (library-path . A973@A7af@library-path) (mosh-cache-dir . A6ba@A59a@mosh-cache-dir) (make-parameter . A6b9@A598@make-parameter) (make-variable-transformer . A27ae@Ab8c@make-variable-transformer) (identifier? . A2855@Ae41@identifier?) (generate-temporaries . A284b@Ae2d@generate-temporaries) (free-identifier=? . A284c@Ae2f@free-identifier=?) (syntax->datum . A2857@Ae45@syntax->datum) (datum->syntax . A2856@Ae43@datum->syntax) (bound-identifier=? . A284d@Ae31@bound-identifier=?) (make-i/o-write-error . A2bb6@A2a23@make-i/o-write-error) (make-i/o-read-error . A2bae@A2a0e@make-i/o-read-error) (make-i/o-port-error . A2bf2@A2ac4@make-i/o-port-error) (make-i/o-invalid-position-error . A2bbe@A2a3a@make-i/o-invalid-position-error) (make-i/o-filename-error . A2bc8@A2a55@make-i/o-filename-error) (make-i/o-file-protection-error . A2bd2@A2a6e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . A2bda@A2a83@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . A2bea@A2aad@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . A2be2@A2a98@make-i/o-file-already-exists-error) (make-i/o-error . A2ba6@A29f9@make-i/o-error) (make-i/o-encoding-error . A2c04@A2af4@make-i/o-encoding-error) (make-i/o-decoding-error . A2bfc@A2add@make-i/o-decoding-error) (i/o-write-error? . A2bb7@A2a25@i/o-write-error?) (i/o-read-error? . A2baf@A2a10@i/o-read-error?) (i/o-port-error? . A2bf4@A2ac8@i/o-port-error?) (i/o-invalid-position-error? . A2bc0@A2a3e@i/o-invalid-position-error?) (i/o-filename-error? . A2bca@A2a59@i/o-filename-error?) (i/o-file-protection-error? . A2bd3@A2a70@i/o-file-protection-error?) (i/o-file-is-read-only-error? . A2bdb@A2a85@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . A2beb@A2aaf@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . A2be3@A2a9a@i/o-file-already-exists-error?) (i/o-error? . A2ba7@A29fb@i/o-error?) (i/o-error-position . A2bc1@A2a40@i/o-error-position) (i/o-error-port . A2bf5@A2aca@i/o-error-port) (i/o-error-filename . A2bcb@A2a5b@i/o-error-filename) (i/o-encoding-error? . A2c06@A2af8@i/o-encoding-error?) (i/o-encoding-error-char . A2c07@A2afa@i/o-encoding-error-char) (i/o-decoding-error? . A2bfd@A2adf@i/o-decoding-error?) (scheme-report-environment . A2842@Ae1b@scheme-report-environment) (null-environment . A2841@Ae19@null-environment) (command-line . A2d9b@A2c2f@command-line) (eval . A2844@Ae1f@eval) (environment . A2840@Ae17@environment) (who-condition? . A2b72@A296f@who-condition?) (warning? . A2b3f@A28e7@warning?) (violation? . A2b57@A2926@violation?) (undefined-violation? . A2b9f@A29e6@undefined-violation?) (syntax-violation? . A2b95@A29cd@syntax-violation?) (syntax-violation-subform . A2b97@A29d1@syntax-violation-subform) (syntax-violation-form . A2b96@A29cf@syntax-violation-form) (syntax-violation . A2854@Ae3f@syntax-violation) (serious-condition? . A2b47@A28fc@serious-condition?) (non-continuable-violation? . A2b7b@A2986@non-continuable-violation?) (message-condition? . A2b36@A28d0@message-condition?) (make-who-condition . A2b70@A296b@make-who-condition) (make-warning . A2b3e@A28e5@make-warning) (make-violation . A2b56@A2924@make-violation) (make-undefined-violation . A2b9e@A29e4@make-undefined-violation) (make-syntax-violation . A2b92@A29c7@make-syntax-violation) (make-serious-condition . A2b46@A28fa@make-serious-condition) (make-non-continuable-violation . A2b7a@A2984@make-non-continuable-violation) (make-message-condition . A2b34@A28cc@make-message-condition) (make-lexical-violation . A2b8a@A29ae@make-lexical-violation) (make-irritants-condition . A2b66@A2950@make-irritants-condition) (make-implementation-restriction-violation . A2b82@A2999@make-implementation-restriction-violation) (make-error . A2b4e@A290f@make-error) (make-assertion-violation . A2b5e@A2939@make-assertion-violation) (lexical-violation? . A2b8b@A29b0@lexical-violation?) (irritants-condition? . A2b68@A2954@irritants-condition?) (implementation-restriction-violation? . A2b83@A299b@implementation-restriction-violation?) (error? . A2b4f@A2911@error?) (condition-who . A2b73@A2971@condition-who) (condition-message . A2b37@A28d2@condition-message) (condition-irritants . A2b69@A2956@condition-irritants) (assertion-violation? . A2b5f@A293b@assertion-violation?) (no-nans-violation? . A2c17@A2b24@no-nans-violation?) (no-infinities-violation? . A2c0f@A2b0f@no-infinities-violation?) (make-no-nans-violation . A2c16@A2b22@make-no-nans-violation) (make-no-infinities-violation . A2c0e@A2b0d@make-no-infinities-violation) (assertion-error . A2851@Ae39@assertion-error)))))) (A983@A7cf@install-library 'A30ce '(mosh interaction) '() '() '() '() '((regexp? . A30c6) (alist->eq-hash-table . A30c2) (format . A30bf) (string-split . A30b4) (call-process . A30ae) (set-current-directory! . A30aa) (expand-path . A30a9) (current-directory . A30a8) (%spawn . A30a7) (%waitpid . A30a6) (simple-struct-name . A30a5) (simple-struct-set! . A30a4) (simple-struct-ref . A30a3) (make-simple-struct . A30a2) (simple-struct? . A30a1) (pointer-ref-c-int64 . A30a0) (pointer-ref-c-int32 . A309f) (pointer-ref-c-int16 . A309e) (pointer-ref-c-int8 . A309d) (pointer-ref-c-uint64 . A309c) (pointer-ref-c-uint32 . A309b) (pointer-ref-c-uint16 . A309a) (pointer-ref-c-uint8 . A3099) (pointer-set-c-uint64! . A3098) (pointer-set-c-uint32! . A3097) (pointer-set-c-uint16! . A3096) (pointer-set-c-uint8! . A3095) (pointer-set-c-int64! . A3094) (pointer-set-c-int32! . A3093) (pointer-set-c-int16! . A3092) (pointer-set-c-int8! . A3091) (pointer-set-c-pointer! . A3090) (pointer-set-c-double! . A308f) (pointer-set-c-float! . A308e) (pointer-set-c-long-long! . A308d) (pointer-set-c-long! . A308c) (pointer-set-c-int! . A308b) (pointer-set-c-short! . A308a) (pointer-set-c-char! . A3089) (pointer-ref-c-pointer . A3088) (pointer-ref-c-double . A3087) (pointer-ref-c-float . A3086) (pointer-ref-c-unsigned-long-long . A3085) (pointer-ref-c-signed-long-long . A3084) (pointer-ref-c-unsigned-long . A3083) (pointer-ref-c-signed-long . A3082) (pointer-ref-c-unsigned-int . A3081) (pointer-ref-c-signed-int . A3080) (pointer-ref-c-unsigned-short . A307f) (pointer-ref-c-signed-short . A307e) (pointer-ref-c-unsigned-char . A307d) (pointer-ref-c-signed-char . A307c) (pointer->integer . A307b) (integer->pointer . A307a) (pointer? . A3079) (shared-errno . A3078) (%ffi-supported? . A3077) (%ffi-pointer->string . A3076) (%ffi-call->string-or-zero . A3075) (%ffi-call->double . A3074) (%ffi-call->void* . A3073) (%ffi-call->void . A3072) (%ffi-call->char . A3071) (%ffi-call->int . A3070) (%ffi-lookup . A306f) (%ffi-open . A306e) (%fork . A306d) (%pipe . A306c) (p . A306b) (whereis . A3050) (register . A304f) (vm-join! . A304e) (vm-set-value! . A304d) (vm? . A304c) (main-vm? . A304b) (vm-eval . A304a) (vm-self . A3049) (vm-start! . A3048) (make-vm . A3047) (mutex-try-lock! . A3046) (mutex-unlock! . A3045) (mutex-lock! . A3044) (mutex? . A3043) (make-mutex . A3042) (condition-variable-notify-all! . A3041) (condition-variable-notify! . A3040) (condition-variable-wait! . A303f) (make-condition-variable . A303e) (string-upcase . A3027) (string-titlecase . A3026) (string-normalize-nfkd . A3025) (string-normalize-nfkc . A3024) (string-normalize-nfd . A3023) (string-normalize-nfc . A3022) (string-foldcase . A3021) (string-downcase . A3020) (string-ci>? . A301f) (string-ci>=? . A301e) (string-ci=? . A301d) (string-ci<? . A301c) (string-ci<=? . A301b) (char-whitespace? . A301a) (char-upper-case? . A3019) (char-title-case? . A3018) (char-numeric? . A3017) (char-lower-case? . A3016) (char-general-category . A3015) (char-upcase . A3014) (char-titlecase . A3013) (char-foldcase . A3012) (char-downcase . A3011) (char-ci>? . A3010) (char-ci>=? . A300f) (char-ci=? . A300e) (char-ci<? . A300d) (char-ci<=? . A300c) (char-alphabetic? . A300b) (make-variable-transformer . Ab8b) (identifier? . Ae40) (generate-temporaries . Ae2c) (free-identifier=? . Ae2e) (syntax->datum . Ae44) (datum->syntax . Ae42) (bound-identifier=? . Ae30) (record-type-descriptor? . A300a) (record-predicate . A3009) (record-mutator . A3008) (record-constructor . A3007) (record-accessor . A3006) (make-record-type-descriptor . A3005) (make-record-constructor-descriptor . A3004) (record? . A3003) (record-type-uid . A3002) (record-type-sealed? . A3001) (record-type-parent . A3000) (record-type-opaque? . A2fff) (record-type-name . A2ffe) (record-type-generative? . A2ffd) (record-type-field-names . A2ffc) (record-rtd . A2ffb) (record-field-mutable? . A2ffa) (delete-file . A2ff9) (file-exists? . A2ff8) (vector-sort! . A2ff7) (vector-sort . A2ff6) (list-sort . A2ff5) (symbol-hash . A2ff4) (string-ci-hash . A2ff3) (string-hash . A2ff2) (equal-hash . A2ff1) (hashtable-equivalence-function . A2ff0) (make-hashtable . A2fef) (hashtable-hash-function . A2fee) (make-eqv-hashtable . A2fed) (make-eq-hashtable . A2fec) (hashtable? . A2feb) (hashtable-update! . A2fea) (hashtable-size . A2fe9) (hashtable-set! . A2fe8) (hashtable-ref . A2fe7) (hashtable-mutable? . A2fe6) (hashtable-keys . A2fe5) (hashtable-entries . A2fe4) (hashtable-delete! . A2fe3) (hashtable-copy . A2fe2) (hashtable-contains? . A2fe1) (hashtable-clear! . A2fe0) (call-with-output-file . A2fdf) (call-with-input-file . A2fde) (write-char . A2fdd) (write . A2fdc) (with-output-to-file . A2fdb) (with-input-from-file . A2fda) (read-char . A2fd9) (read . A2fd8) (peek-char . A2fd7) (open-output-file . A2fd6) (open-input-file . A2fd5) (newline . A2fd4) (display . A2fd3) (close-output-port . A2fd2) (close-input-port . A2fd1) (eof-object? . A2fd0) (eof-object . A2fcf) (current-error-port . A2fce) (current-output-port . A2fcd) (current-input-port . A2fcc) (output-port? . A2fcb) (input-port? . A2fca) (utf-8-codec . A2fc9) (utf-16-codec . A2fc8) (transcoder-error-handling-mode . A2fc7) (transcoder-eol-style . A2fc6) (transcoder-codec . A2fc5) (transcoded-port . A2fc4) (textual-port? . A2fc3) (string->bytevector . A2fc2) (standard-output-port . A2fc1) (standard-input-port . A2fc0) (standard-error-port . A2fbf) (set-port-position! . A2fbe) (put-u8 . A2fbd) (put-string . A2fbc) (put-datum . A2fbb) (put-char . A2fba) (put-bytevector . A2fb9) (port? . A2fb8) (port-transcoder . A2fb7) (port-position . A2fb6) (port-has-set-port-position!? . A2fb5) (port-has-port-position? . A2fb4) (port-eof? . A2fb3) (output-port-buffer-mode . A2fb2) (open-string-output-port . A2fb1) (open-string-input-port . A2fb0) (open-file-output-port . A2faf) (open-file-input/output-port . A2fae) (open-file-input-port . A2fad) (open-bytevector-output-port . A2fac) (open-bytevector-input-port . A2fab) (native-transcoder . A2faa) (native-eol-style . A2fa9) (make-transcoder . A2fa8) (latin-1-codec . A2fa7) (make-i/o-write-error . A2a22) (make-i/o-read-error . A2a0d) (make-i/o-port-error . A2ac3) (make-i/o-invalid-position-error . A2a39) (make-i/o-filename-error . A2a54) (make-i/o-file-protection-error . A2a6d) (make-i/o-file-is-read-only-error . A2a82) (make-i/o-file-does-not-exist-error . A2aac) (make-i/o-file-already-exists-error . A2a97) (make-i/o-error . A29f8) (make-i/o-encoding-error . A2af3) (make-i/o-decoding-error . A2adc) (make-custom-textual-output-port . A2fa6) (make-custom-textual-input/output-port . A2fa5) (make-custom-textual-input-port . A2fa4) (make-custom-binary-output-port . A2fa3) (make-custom-binary-input/output-port . A2fa2) (make-custom-binary-input-port . A2fa1) (make-bytevector . A2fa0) (lookahead-u8 . A2f9f) (lookahead-char . A2f9e) (i/o-write-error? . A2a24) (i/o-read-error? . A2a0f) (i/o-port-error? . A2ac7) (i/o-invalid-position-error? . A2a3d) (i/o-filename-error? . A2a58) (i/o-file-protection-error? . A2a6f) (i/o-file-is-read-only-error? . A2a84) (i/o-file-does-not-exist-error? . A2aae) (i/o-file-already-exists-error? . A2a99) (i/o-error? . A29fa) (i/o-error-position . A2a3f) (i/o-error-port . A2ac9) (i/o-error-filename . A2a5a) (i/o-encoding-error? . A2af7) (i/o-encoding-error-char . A2af9) (i/o-decoding-error? . A2ade) (get-u8 . A2f9d) (get-string-n! . A2f9c) (get-string-n . A2f9b) (get-string-all . A2f9a) (get-line . A2f99) (get-datum . A2f98) (get-char . A2f97) (get-bytevector-some . A2f96) (get-bytevector-n! . A2f95) (get-bytevector-n . A2f94) (get-bytevector-all . A2f93) (flush-output-port . A2f92) (close-port . A2f91) (exit . A2f89) (command-line . A2c2e) (string-fill! . A2f88) (string-set! . A2f87) (set-cdr! . A2f86) (set-car! . A2f85) (remove . A2f84) (remv . A2f83) (remp . A2f82) (remq . A2f81) (partition . A2f80) (memv . A2f7f) (memq . A2f7e) (memp . A2f7d) (member . A2f7c) (exists . A2f7b) (for-all . A2f7a) (fold-right . A2f79) (fold-left . A2f78) (find . A2f77) (filter . A2f76) (cons* . A2f75) (assv . A2f74) (assq . A2f73) (assp . A2f72) (assoc . A2f71) (call-with-string-output-port . A2f70) (call-with-port . A2f6f) (call-with-bytevector-output-port . A2f6e) (bytevector->string . A2f6d) (buffer-mode? . A2f6c) (binary-port? . A2f6b) (with-exception-handler . A2f6a) (raise-continuable . A2f69) (raise . A2f68) (eval . Ae1e) (environment . Ae16) (make-enumeration . A2f67) (enum-set=? . A2f66) (enum-set-universe . A2f65) (enum-set-union . A2f64) (enum-set-subset? . A2f63) (enum-set-projection . A2f62) (enum-set-member? . A2f61) (enum-set-intersection . A2f60) (enum-set-indexer . A2f5f) (enum-set-difference . A2f5e) (enum-set-constructor . A2f5d) (enum-set-complement . A2f5c) (enum-set->list . A2f5b) (who-condition? . A296e) (warning? . A28e6) (violation? . A2925) (undefined-violation? . A29e5) (syntax-violation? . A29cc) (syntax-violation-subform . A29d0) (syntax-violation-form . A29ce) (syntax-violation . Ae3e) (simple-conditions . A2f5a) (serious-condition? . A28fb) (non-continuable-violation? . A2985) (message-condition? . A28cf) (make-who-condition . A296a) (make-warning . A28e4) (make-violation . A2923) (make-undefined-violation . A29e3) (make-syntax-violation . A29c6) (make-serious-condition . A28f9) (make-non-continuable-violation . A2983) (make-message-condition . A28cb) (make-lexical-violation . A29ad) (make-irritants-condition . A294f) (make-implementation-restriction-violation . A2998) (make-error . A290e) (make-assertion-violation . A2938) (lexical-violation? . A29af) (irritants-condition? . A2953) (implementation-restriction-violation? . A299a) (error? . A2910) (condition-who . A2970) (condition-predicate . A2f59) (condition-message . A28d1) (condition-irritants . A2955) (condition-accessor . A2f58) (condition . A2f57) (assertion-violation? . A293a) (condition? . A2f56) (utf32->string . A2f55) (utf16->string . A2f54) (utf8->string . A2f53) (uint-list->bytevector . A2f52) (u8-list->bytevector . A2f51) (string->utf8 . A2f50) (string->utf32 . A2f4f) (string->utf16 . A2f4e) (sint-list->bytevector . A2f4d) (native-endianness . A2f4c) (bytevector? . A2f4b) (bytevector=? . A2f4a) (bytevector-uint-set! . A2f49) (bytevector-uint-ref . A2f48) (bytevector-u8-set! . A2f47) (bytevector-u8-ref . A2f46) (bytevector-u64-set! . A2f45) (bytevector-u64-ref . A2f44) (bytevector-u64-native-set! . A2f43) (bytevector-u64-native-ref . A2f42) (bytevector-u32-set! . A2f41) (bytevector-u32-ref . A2f40) (bytevector-u32-native-set! . A2f3f) (bytevector-u32-native-ref . A2f3e) (bytevector-u16-set! . A2f3d) (bytevector-u16-ref . A2f3c) (bytevector-u16-native-set! . A2f3b) (bytevector-u16-native-ref . A2f3a) (bytevector-sint-set! . A2f39) (bytevector-sint-ref . A2f38) (bytevector-s8-set! . A2f37) (bytevector-s8-ref . A2f36) (bytevector-s64-set! . A2f35) (bytevector-s64-ref . A2f34) (bytevector-s64-native-set! . A2f33) (bytevector-s64-native-ref . A2f32) (bytevector-s32-set! . A2f31) (bytevector-s32-ref . A2f30) (bytevector-s32-native-set! . A2f2f) (bytevector-s32-native-ref . A2f2e) (bytevector-s16-set! . A2f2d) (bytevector-s16-ref . A2f2c) (bytevector-s16-native-set! . A2f2b) (bytevector-s16-native-ref . A2f2a) (bytevector-length . A2f29) (bytevector-ieee-single-ref . A2f28) (bytevector-ieee-single-set! . A2f27) (bytevector-ieee-single-native-set! . A2f26) (bytevector-ieee-single-native-ref . A2f25) (bytevector-ieee-double-set! . A2f24) (bytevector-ieee-double-ref . A2f23) (bytevector-ieee-double-native-set! . A2f22) (bytevector-ieee-double-native-ref . A2f21) (bytevector-fill! . A2f20) (bytevector-copy! . A2f1f) (bytevector-copy . A2f1e) (bytevector->uint-list . A2f1d) (bytevector->u8-list . A2f1c) (bytevector->sint-list . A2f1b) (no-nans-violation? . A2b23) (no-infinities-violation? . A2b0e) (make-no-nans-violation . A2b21) (make-no-infinities-violation . A2b0c) (real->flonum . A2f1a) (flzero? . A2f19) (fltruncate . A2f18) (fltan . A2f17) (flsqrt . A2f16) (flsin . A2f15) (flround . A2f14) (flpositive? . A2f13) (flonum? . A2f12) (flodd? . A2f11) (flnumerator . A2f10) (flnegative? . A2f0f) (flnan? . A2f0e) (flmod0 . A2f0d) (flmod . A2f0c) (flmin . A2f0b) (flmax . A2f0a) (fllog . A2f09) (flinteger? . A2f08) (flinfinite? . A2f07) (flfloor . A2f06) (flfinite? . A2f05) (flexpt . A2f04) (flexp . A2f03) (fleven? . A2f02) (fldiv0-and-mod0 . A2f01) (fldiv0 . A2f00) (fldiv-and-mod . A2eff) (fldiv . A2efe) (fldenominator . A2efd) (flcos . A2efc) (flceiling . A2efb) (flatan . A2efa) (flasin . A2ef9) (flacos . A2ef8) (flabs . A2ef7) (fl>? . A2ef6) (fl>=? . A2ef5) (fl=? . A2ef4) (fl<? . A2ef3) (fl<=? . A2ef2) (fl/ . A2ef1) (fl- . A2ef0) (fl+ . A2eef) (fl* . A2eee) (fixnum->flonum . A2eed) (fxzero? . A2eec) (fxxor . A2eeb) (fxrotate-bit-field . A2eea) (fxreverse-bit-field . A2ee9) (fxpositive? . A2ee8) (fxodd? . A2ee7) (fxnot . A2ee6) (fxnegative? . A2ee5) (fxmod0 . A2ee4) (fxmod . A2ee3) (fxmin . A2ee2) (fxmax . A2ee1) (fxlength . A2ee0) (fxior . A2edf) (fxif . A2ede) (fxfirst-bit-set . A2edd) (fxeven? . A2edc) (fxdiv0-and-mod0 . A2edb) (fxdiv0 . A2eda) (fxdiv-and-mod . A2ed9) (fxdiv . A2ed8) (fxcopy-bit-field . A2ed7) (fxcopy-bit . A2ed6) (fxbit-set? . A2ed5) (fxbit-field . A2ed4) (fxbit-count . A2ed3) (fxarithmetic-shift-right . A2ed2) (fxarithmetic-shift-left . A2ed1) (fxarithmetic-shift . A2ed0) (fxand . A2ecf) (fx>? . A2ece) (fx>=? . A2ecd) (fx=? . A2ecc) (fx<? . A2ecb) (fx<=? . A2eca) (fx-/carry . A2ec9) (fx- . A2ec8) (fx+/carry . A2ec7) (fx+ . A2ec6) (fx*/carry . A2ec5) (fx* . A2ec4) (greatest-fixnum . A2ec3) (least-fixnum . A2ec2) (fixnum-width . A2ec1) (fixnum? . A2ec0) (bitwise-rotate-bit-field . A2ebf) (bitwise-reverse-bit-field . A2ebe) (bitwise-length . A2ebd) (bitwise-if . A2ebc) (bitwise-first-bit-set . A2ebb) (bitwise-copy-bit-field . A2eba) (bitwise-copy-bit . A2eb9) (bitwise-bit-set? . A2eb8) (bitwise-bit-field . A2eb7) (bitwise-bit-count . A2eb6) (bitwise-xor . A2eb5) (bitwise-ior . A2eb4) (bitwise-and . A2eb3) (bitwise-not . A2eb2) (bitwise-arithmetic-shift-right . A2eb1) (bitwise-arithmetic-shift-left . A2eb0) (bitwise-arithmetic-shift . A2eaf) (zero? . A2eae) (vector? . A2ead) (vector-set! . A2eac) (vector-ref . A2eab) (vector-map . A2eaa) (vector-length . A2ea9) (vector-for-each . A2ea8) (vector-fill! . A2ea7) (vector->list . A2ea6) (vector . A2ea5) (values . A2ea4) (truncate . A2ea3) (tan . A2ea2) (symbol? . A2ea1) (symbol=? . A2ea0) (symbol->string . A2e9f) (substring . A2e9e) (string? . A2e9d) (string>? . A2e9c) (string>=? . A2e9b) (string=? . A2e9a) (string<? . A2e99) (string<=? . A2e98) (string-ref . A2e97) (string-length . A2e96) (string-for-each . A2e95) (string-copy . A2e94) (string-append . A2e93) (string->symbol . A2e92) (string->number . A2e91) (string->list . A2e90) (string . A2e8f) (sqrt . A2e8e) (sin . A2e8d) (round . A2e8c) (reverse . A2e8b) (real? . A2e8a) (real-valued? . A2e89) (real-part . A2e88) (rationalize . A2e87) (rational? . A2e86) (rational-valued? . A2e85) (procedure? . A2e84) (positive? . A2e83) (pair? . A2e82) (odd? . A2e81) (numerator . A2e80) (number? . A2e7f) (number->string . A2e7e) (null? . A2e7d) (not . A2e7c) (negative? . A2e7b) (nan? . A2e7a) (min . A2e79) (max . A2e78) (map . A2e77) (make-vector . A2e76) (make-string . A2e75) (make-rectangular . A2e74) (make-polar . A2e73) (magnitude . A2e72) (log . A2e71) (list? . A2e70) (list-tail . A2e6f) (list-ref . A2e6e) (list->vector . A2e6d) (list->string . A2e6c) (list . A2e6b) (length . A2e6a) (lcm . A2e69) (integer? . A2e68) (integer-valued? . A2e67) (integer->char . A2e66) (infinite? . A2e65) (inexact? . A2e64) (inexact . A2e63) (imag-part . A2e62) (gcd . A2e61) (for-each . A2e60) (floor . A2e5f) (finite? . A2e5e) (expt . A2e5d) (exp . A2e5c) (exact? . A2e5b) (exact-integer-sqrt . A2e5a) (exact . A2e59) (even? . A2e58) (error . A2e57) (eqv? . A2e56) (equal? . A2e55) (eq? . A2e54) (dynamic-wind . A2e53) (div0-and-mod0 . A2e52) (mod0 . A2e51) (div0 . A2e50) (div-and-mod . A2e4f) (mod . A2e4e) (div . A2e4d) (denominator . A2e4c) (cos . A2e4b) (cons . A2e4a) (complex? . A2e49) (char? . A2e48) (char>? . A2e47) (char>=? . A2e46) (char=? . A2e45) (char<? . A2e44) (char<=? . A2e43) (char->integer . A2e42) (ceiling . A2e41) (call-with-values . A2e40) (call/cc . A2e3f) (call-with-current-continuation . A2e3e) (cddddr . A2e3d) (cdddar . A2e3c) (cddadr . A2e3b) (cddaar . A2e3a) (cdaddr . A2e39) (cdadar . A2e38) (cdaadr . A2e37) (cdaaar . A2e36) (cadddr . A2e35) (caddar . A2e34) (cadadr . A2e33) (cadaar . A2e32) (caaddr . A2e31) (caadar . A2e30) (caaadr . A2e2f) (caaaar . A2e2e) (cdddr . A2e2d) (cddar . A2e2c) (cdadr . A2e2b) (cdaar . A2e2a) (caddr . A2e29) (cadar . A2e28) (caadr . A2e27) (caaar . A2e26) (cddr . A2e25) (cdar . A2e24) (cadr . A2e23) (caar . A2e22) (cdr . A2e21) (car . A2e20) (boolean? . A2e1f) (boolean=? . A2e1e) (atan . A2e1d) (assertion-violation . A2e1c) (asin . A2e1b) (apply . A2e1a) (append . A2e19) (angle . A2e18) (acos . A2e17) (abs . A2e16) (/ . A2e15) (* . A2e14) (- . A2e13) (+ . A2e12) (>= . A2e11) (> . A2e10) (= . A2e0f) (<= . A2e0e) (< . A2e0d) (library . A2e0c) (&no-nans . A2e0b) (&no-infinities . A2e0a) (&i/o-encoding . A2e09) (&i/o-decoding . A2e08) (&i/o-port . A2e07) (&i/o-file-does-not-exist . A2e06) (&i/o-file-already-exists . A2e05) (&i/o-file-is-read-only . A2e04) (&i/o-file-protection . A2e03) (&i/o-filename . A2e02) (&i/o-invalid-position . A2e01) (&i/o-write . A2e00) (&i/o-read . A2dff) (&i/o . A2dfe) (&undefined . A2dfd) (&syntax . A2dfc) (&lexical . A2dfb) (&implementation-restriction . A2dfa) (&non-continuable . A2df9) (&who . A2df8) (&irritants . A2df7) (&assertion . A2df6) (&violation . A2df5) (&error . A2df4) (&serious . A2df3) (&warning . A2df2) (&message . A2df1) (&condition . A2df0) (define-condition-type . A2def) (define-enumeration . A2dee) (define-record-type . A2ded) (parent-rtd . A2dec) (nongenerative . A2deb) (opaque . A2dea) (sealed . A2de9) (protocol . A2de8) (parent . A2de7) (immutable . A2de6) (mutable . A2de5) (fields . A2de4) (error-handling-mode . A2de3) (file-options . A2de2) (buffer-mode . A2de1) (eol-style . A2de0) (guard . A2ddf) (unsyntax-splicing . A2ddc) (unsyntax . A2ddb) (unquote-splicing . A2dda) (unquote . A2dd9) (_ . A2dd8) (else . A2dd7) (=> . A2dd6) (... . A2dd5) (assert . A2dd4) (endianness . A2dd3) (time . A2dd1) (do . A2dd0) (cond . A2dcf) (let* . A2dce) (let . A2dcd) (let*-values . A2dcc) (let-values . A2dcb) (identifier-syntax . A2dca) (with-syntax . A2dc9) (quasisyntax . A2dc8) (quasiquote . A2dc7) (syntax-rules . A2dc6) (include . A2dc5) (record-constructor-descriptor . A2dc3) (record-type-descriptor . A2dc2) (case . A2dc1) (unless . A2dbf) (when . A2dbe) (or . A2dbd) (and . A2dbc) (if . A2dbb) (letrec* . A2dba) (letrec . A2db9) (case-lambda . A2db7) (lambda . A2db6) (syntax . A2db5) (syntax-case . A2db4) (quote . A2db3) (letrec-syntax . A2db1) (let-syntax . A2db0) (set! . A2daf) (import . A2dae) (begin . A2dad) (define-syntax . A2dab) (define . A2daa)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30cf '(psyntax null-environment-5) '() '() '() '() '((make-promise . A2f8a) (unquote-splicing . A2dda) (unquote . A2dd9) (_ . A2dd8) (else . A2dd7) (=> . A2dd6) (... . A2dd5) (delay . A2dd2) (do . A2dd0) (cond . A2dcf) (let* . A2dce) (let . A2dcd) (quasiquote . A2dc7) (syntax-rules . A2dc6) (case . A2dc1) (or . A2dbd) (and . A2dbc) (if . A2dbb) (letrec . A2db9) (lambda . A2db6) (quote . A2db3) (letrec-syntax . A2db1) (let-syntax . A2db0) (set! . A2daf) (begin . A2dad) (define-syntax . A2dab) (define . A2daa)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d0 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . A301f) (string-ci>=? . A301e) (string-ci=? . A301d) (string-ci<? . A301c) (string-ci<=? . A301b) (char-whitespace? . A301a) (char-upper-case? . A3019) (char-numeric? . A3017) (char-lower-case? . A3016) (char-upcase . A3014) (char-downcase . A3011) (char-ci>? . A3010) (char-ci>=? . A300f) (char-ci=? . A300e) (char-ci<? . A300d) (char-ci<=? . A300c) (char-alphabetic? . A300b) (call-with-output-file . A2fdf) (call-with-input-file . A2fde) (write-char . A2fdd) (write . A2fdc) (with-output-to-file . A2fdb) (with-input-from-file . A2fda) (read-char . A2fd9) (read . A2fd8) (peek-char . A2fd7) (open-output-file . A2fd6) (open-input-file . A2fd5) (newline . A2fd4) (display . A2fd3) (close-output-port . A2fd2) (close-input-port . A2fd1) (eof-object . A2fcf) (current-output-port . A2fcd) (current-input-port . A2fcc) (output-port? . A2fcb) (input-port? . A2fca) (scheme-report-environment . Ae1a) (quotient . A2f90) (null-environment . Ae18) (remainder . A2f8f) (modulo . A2f8e) (inexact->exact . A2f8d) (force . A2f8c) (exact->inexact . A2f8b) (make-promise . A2f8a) (string-fill! . A2f88) (string-set! . A2f87) (set-cdr! . A2f86) (set-car! . A2f85) (memv . A2f7f) (memq . A2f7e) (member . A2f7c) (assv . A2f74) (assq . A2f73) (assoc . A2f71) (eval . Ae1e) (zero? . A2eae) (vector? . A2ead) (vector-set! . A2eac) (vector-ref . A2eab) (vector-length . A2ea9) (vector-fill! . A2ea7) (vector->list . A2ea6) (vector . A2ea5) (values . A2ea4) (truncate . A2ea3) (tan . A2ea2) (symbol? . A2ea1) (symbol->string . A2e9f) (substring . A2e9e) (string? . A2e9d) (string>? . A2e9c) (string>=? . A2e9b) (string=? . A2e9a) (string<? . A2e99) (string<=? . A2e98) (string-ref . A2e97) (string-length . A2e96) (string-copy . A2e94) (string-append . A2e93) (string->symbol . A2e92) (string->number . A2e91) (string->list . A2e90) (string . A2e8f) (sqrt . A2e8e) (sin . A2e8d) (round . A2e8c) (reverse . A2e8b) (real? . A2e8a) (real-part . A2e88) (rationalize . A2e87) (rational? . A2e86) (procedure? . A2e84) (positive? . A2e83) (pair? . A2e82) (odd? . A2e81) (numerator . A2e80) (number? . A2e7f) (number->string . A2e7e) (not . A2e7c) (negative? . A2e7b) (min . A2e79) (max . A2e78) (map . A2e77) (make-vector . A2e76) (make-string . A2e75) (make-rectangular . A2e74) (make-polar . A2e73) (magnitude . A2e72) (log . A2e71) (list? . A2e70) (list-tail . A2e6f) (list-ref . A2e6e) (list->vector . A2e6d) (list->string . A2e6c) (list . A2e6b) (length . A2e6a) (lcm . A2e69) (integer? . A2e68) (integer->char . A2e66) (inexact? . A2e64) (imag-part . A2e62) (gcd . A2e61) (for-each . A2e60) (floor . A2e5f) (expt . A2e5d) (exp . A2e5c) (exact? . A2e5b) (even? . A2e58) (eqv? . A2e56) (equal? . A2e55) (eq? . A2e54) (dynamic-wind . A2e53) (denominator . A2e4c) (cos . A2e4b) (cons . A2e4a) (complex? . A2e49) (char? . A2e48) (char>? . A2e47) (char>=? . A2e46) (char=? . A2e45) (char<? . A2e44) (char<=? . A2e43) (char->integer . A2e42) (ceiling . A2e41) (call-with-values . A2e40) (call-with-current-continuation . A2e3e) (cddddr . A2e3d) (cdddar . A2e3c) (cddadr . A2e3b) (cddaar . A2e3a) (cdaddr . A2e39) (cdadar . A2e38) (cdaadr . A2e37) (cdaaar . A2e36) (cadddr . A2e35) (caddar . A2e34) (cadadr . A2e33) (cadaar . A2e32) (caaddr . A2e31) (caadar . A2e30) (caaadr . A2e2f) (caaaar . A2e2e) (cdddr . A2e2d) (cddar . A2e2c) (cdadr . A2e2b) (cdaar . A2e2a) (caddr . A2e29) (cadar . A2e28) (caadr . A2e27) (caaar . A2e26) (cddr . A2e25) (cdar . A2e24) (cadr . A2e23) (caar . A2e22) (cdr . A2e21) (car . A2e20) (boolean? . A2e1f) (atan . A2e1d) (asin . A2e1b) (apply . A2e1a) (append . A2e19) (angle . A2e18) (acos . A2e17) (abs . A2e16) (/ . A2e15) (* . A2e14) (- . A2e13) (+ . A2e12) (>= . A2e11) (> . A2e10) (= . A2e0f) (<= . A2e0e) (< . A2e0d) (unquote-splicing . A2dda) (unquote . A2dd9) (else . A2dd7) (=> . A2dd6) (... . A2dd5) (delay . A2dd2) (do . A2dd0) (cond . A2dcf) (let* . A2dce) (let . A2dcd) (quasiquote . A2dc7) (syntax-rules . A2dc6) (case . A2dc1) (or . A2dbd) (and . A2dbc) (if . A2dbb) (letrec . A2db9) (lambda . A2db6) (quote . A2db3) (letrec-syntax . A2db1) (let-syntax . A2db0) (set! . A2daf) (begin . A2dad) (define-syntax . A2dab) (define . A2daa)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d1 '(psyntax modules) '() '() '() '() '((module . A2dac)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d2 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d3 '(rnrs) '(6) '() '() '() '((regexp? . A30c6) (string-upcase . A3027) (string-titlecase . A3026) (string-normalize-nfkd . A3025) (string-normalize-nfkc . A3024) (string-normalize-nfd . A3023) (string-normalize-nfc . A3022) (string-foldcase . A3021) (string-downcase . A3020) (string-ci>? . A301f) (string-ci>=? . A301e) (string-ci=? . A301d) (string-ci<? . A301c) (string-ci<=? . A301b) (char-whitespace? . A301a) (char-upper-case? . A3019) (char-title-case? . A3018) (char-numeric? . A3017) (char-lower-case? . A3016) (char-general-category . A3015) (char-upcase . A3014) (char-titlecase . A3013) (char-foldcase . A3012) (char-downcase . A3011) (char-ci>? . A3010) (char-ci>=? . A300f) (char-ci=? . A300e) (char-ci<? . A300d) (char-ci<=? . A300c) (char-alphabetic? . A300b) (make-variable-transformer . Ab8b) (identifier? . Ae40) (generate-temporaries . Ae2c) (free-identifier=? . Ae2e) (syntax->datum . Ae44) (datum->syntax . Ae42) (bound-identifier=? . Ae30) (record-type-descriptor? . A300a) (record-predicate . A3009) (record-mutator . A3008) (record-constructor . A3007) (record-accessor . A3006) (make-record-type-descriptor . A3005) (make-record-constructor-descriptor . A3004) (record? . A3003) (record-type-uid . A3002) (record-type-sealed? . A3001) (record-type-parent . A3000) (record-type-opaque? . A2fff) (record-type-name . A2ffe) (record-type-generative? . A2ffd) (record-type-field-names . A2ffc) (record-rtd . A2ffb) (record-field-mutable? . A2ffa) (delete-file . A2ff9) (file-exists? . A2ff8) (vector-sort! . A2ff7) (vector-sort . A2ff6) (list-sort . A2ff5) (symbol-hash . A2ff4) (string-ci-hash . A2ff3) (string-hash . A2ff2) (equal-hash . A2ff1) (hashtable-equivalence-function . A2ff0) (make-hashtable . A2fef) (hashtable-hash-function . A2fee) (make-eqv-hashtable . A2fed) (make-eq-hashtable . A2fec) (hashtable? . A2feb) (hashtable-update! . A2fea) (hashtable-size . A2fe9) (hashtable-set! . A2fe8) (hashtable-ref . A2fe7) (hashtable-mutable? . A2fe6) (hashtable-keys . A2fe5) (hashtable-entries . A2fe4) (hashtable-delete! . A2fe3) (hashtable-copy . A2fe2) (hashtable-contains? . A2fe1) (hashtable-clear! . A2fe0) (call-with-output-file . A2fdf) (call-with-input-file . A2fde) (write-char . A2fdd) (write . A2fdc) (with-output-to-file . A2fdb) (with-input-from-file . A2fda) (read-char . A2fd9) (read . A2fd8) (peek-char . A2fd7) (open-output-file . A2fd6) (open-input-file . A2fd5) (newline . A2fd4) (display . A2fd3) (close-output-port . A2fd2) (close-input-port . A2fd1) (eof-object? . A2fd0) (eof-object . A2fcf) (current-error-port . A2fce) (current-output-port . A2fcd) (current-input-port . A2fcc) (output-port? . A2fcb) (input-port? . A2fca) (utf-8-codec . A2fc9) (utf-16-codec . A2fc8) (transcoder-error-handling-mode . A2fc7) (transcoder-eol-style . A2fc6) (transcoder-codec . A2fc5) (transcoded-port . A2fc4) (textual-port? . A2fc3) (string->bytevector . A2fc2) (standard-output-port . A2fc1) (standard-input-port . A2fc0) (standard-error-port . A2fbf) (set-port-position! . A2fbe) (put-u8 . A2fbd) (put-string . A2fbc) (put-datum . A2fbb) (put-char . A2fba) (put-bytevector . A2fb9) (port? . A2fb8) (port-transcoder . A2fb7) (port-position . A2fb6) (port-has-set-port-position!? . A2fb5) (port-has-port-position? . A2fb4) (port-eof? . A2fb3) (output-port-buffer-mode . A2fb2) (open-string-output-port . A2fb1) (open-string-input-port . A2fb0) (open-file-output-port . A2faf) (open-file-input/output-port . A2fae) (open-file-input-port . A2fad) (open-bytevector-output-port . A2fac) (open-bytevector-input-port . A2fab) (native-transcoder . A2faa) (native-eol-style . A2fa9) (make-transcoder . A2fa8) (latin-1-codec . A2fa7) (make-i/o-write-error . A2a22) (make-i/o-read-error . A2a0d) (make-i/o-port-error . A2ac3) (make-i/o-invalid-position-error . A2a39) (make-i/o-filename-error . A2a54) (make-i/o-file-protection-error . A2a6d) (make-i/o-file-is-read-only-error . A2a82) (make-i/o-file-does-not-exist-error . A2aac) (make-i/o-file-already-exists-error . A2a97) (make-i/o-error . A29f8) (make-i/o-encoding-error . A2af3) (make-i/o-decoding-error . A2adc) (make-custom-textual-output-port . A2fa6) (make-custom-textual-input/output-port . A2fa5) (make-custom-textual-input-port . A2fa4) (make-custom-binary-output-port . A2fa3) (make-custom-binary-input/output-port . A2fa2) (make-custom-binary-input-port . A2fa1) (make-bytevector . A2fa0) (lookahead-u8 . A2f9f) (lookahead-char . A2f9e) (i/o-write-error? . A2a24) (i/o-read-error? . A2a0f) (i/o-port-error? . A2ac7) (i/o-invalid-position-error? . A2a3d) (i/o-filename-error? . A2a58) (i/o-file-protection-error? . A2a6f) (i/o-file-is-read-only-error? . A2a84) (i/o-file-does-not-exist-error? . A2aae) (i/o-file-already-exists-error? . A2a99) (i/o-error? . A29fa) (i/o-error-position . A2a3f) (i/o-error-port . A2ac9) (i/o-error-filename . A2a5a) (i/o-encoding-error? . A2af7) (i/o-encoding-error-char . A2af9) (i/o-decoding-error? . A2ade) (get-u8 . A2f9d) (get-string-n! . A2f9c) (get-string-n . A2f9b) (get-string-all . A2f9a) (get-line . A2f99) (get-datum . A2f98) (get-char . A2f97) (get-bytevector-some . A2f96) (get-bytevector-n! . A2f95) (get-bytevector-n . A2f94) (get-bytevector-all . A2f93) (flush-output-port . A2f92) (close-port . A2f91) (exit . A2f89) (command-line . A2c2e) (remove . A2f84) (remv . A2f83) (remp . A2f82) (remq . A2f81) (partition . A2f80) (memv . A2f7f) (memq . A2f7e) (memp . A2f7d) (member . A2f7c) (exists . A2f7b) (for-all . A2f7a) (fold-right . A2f79) (fold-left . A2f78) (find . A2f77) (filter . A2f76) (cons* . A2f75) (assv . A2f74) (assq . A2f73) (assp . A2f72) (assoc . A2f71) (call-with-string-output-port . A2f70) (call-with-port . A2f6f) (call-with-bytevector-output-port . A2f6e) (bytevector->string . A2f6d) (buffer-mode? . A2f6c) (binary-port? . A2f6b) (with-exception-handler . A2f6a) (raise-continuable . A2f69) (raise . A2f68) (make-enumeration . A2f67) (enum-set=? . A2f66) (enum-set-universe . A2f65) (enum-set-union . A2f64) (enum-set-subset? . A2f63) (enum-set-projection . A2f62) (enum-set-member? . A2f61) (enum-set-intersection . A2f60) (enum-set-indexer . A2f5f) (enum-set-difference . A2f5e) (enum-set-constructor . A2f5d) (enum-set-complement . A2f5c) (enum-set->list . A2f5b) (who-condition? . A296e) (warning? . A28e6) (violation? . A2925) (undefined-violation? . A29e5) (syntax-violation? . A29cc) (syntax-violation-subform . A29d0) (syntax-violation-form . A29ce) (syntax-violation . Ae3e) (simple-conditions . A2f5a) (serious-condition? . A28fb) (non-continuable-violation? . A2985) (message-condition? . A28cf) (make-who-condition . A296a) (make-warning . A28e4) (make-violation . A2923) (make-undefined-violation . A29e3) (make-syntax-violation . A29c6) (make-serious-condition . A28f9) (make-non-continuable-violation . A2983) (make-message-condition . A28cb) (make-lexical-violation . A29ad) (make-irritants-condition . A294f) (make-implementation-restriction-violation . A2998) (make-error . A290e) (make-assertion-violation . A2938) (lexical-violation? . A29af) (irritants-condition? . A2953) (implementation-restriction-violation? . A299a) (error? . A2910) (condition-who . A2970) (condition-predicate . A2f59) (condition-message . A28d1) (condition-irritants . A2955) (condition-accessor . A2f58) (condition . A2f57) (assertion-violation? . A293a) (condition? . A2f56) (utf32->string . A2f55) (utf16->string . A2f54) (utf8->string . A2f53) (uint-list->bytevector . A2f52) (u8-list->bytevector . A2f51) (string->utf8 . A2f50) (string->utf32 . A2f4f) (string->utf16 . A2f4e) (sint-list->bytevector . A2f4d) (native-endianness . A2f4c) (bytevector? . A2f4b) (bytevector=? . A2f4a) (bytevector-uint-set! . A2f49) (bytevector-uint-ref . A2f48) (bytevector-u8-set! . A2f47) (bytevector-u8-ref . A2f46) (bytevector-u64-set! . A2f45) (bytevector-u64-ref . A2f44) (bytevector-u64-native-set! . A2f43) (bytevector-u64-native-ref . A2f42) (bytevector-u32-set! . A2f41) (bytevector-u32-ref . A2f40) (bytevector-u32-native-set! . A2f3f) (bytevector-u32-native-ref . A2f3e) (bytevector-u16-set! . A2f3d) (bytevector-u16-ref . A2f3c) (bytevector-u16-native-set! . A2f3b) (bytevector-u16-native-ref . A2f3a) (bytevector-sint-set! . A2f39) (bytevector-sint-ref . A2f38) (bytevector-s8-set! . A2f37) (bytevector-s8-ref . A2f36) (bytevector-s64-set! . A2f35) (bytevector-s64-ref . A2f34) (bytevector-s64-native-set! . A2f33) (bytevector-s64-native-ref . A2f32) (bytevector-s32-set! . A2f31) (bytevector-s32-ref . A2f30) (bytevector-s32-native-set! . A2f2f) (bytevector-s32-native-ref . A2f2e) (bytevector-s16-set! . A2f2d) (bytevector-s16-ref . A2f2c) (bytevector-s16-native-set! . A2f2b) (bytevector-s16-native-ref . A2f2a) (bytevector-length . A2f29) (bytevector-ieee-single-ref . A2f28) (bytevector-ieee-single-set! . A2f27) (bytevector-ieee-single-native-set! . A2f26) (bytevector-ieee-single-native-ref . A2f25) (bytevector-ieee-double-set! . A2f24) (bytevector-ieee-double-ref . A2f23) (bytevector-ieee-double-native-set! . A2f22) (bytevector-ieee-double-native-ref . A2f21) (bytevector-fill! . A2f20) (bytevector-copy! . A2f1f) (bytevector-copy . A2f1e) (bytevector->uint-list . A2f1d) (bytevector->u8-list . A2f1c) (bytevector->sint-list . A2f1b) (no-nans-violation? . A2b23) (no-infinities-violation? . A2b0e) (make-no-nans-violation . A2b21) (make-no-infinities-violation . A2b0c) (real->flonum . A2f1a) (flzero? . A2f19) (fltruncate . A2f18) (fltan . A2f17) (flsqrt . A2f16) (flsin . A2f15) (flround . A2f14) (flpositive? . A2f13) (flonum? . A2f12) (flodd? . A2f11) (flnumerator . A2f10) (flnegative? . A2f0f) (flnan? . A2f0e) (flmod0 . A2f0d) (flmod . A2f0c) (flmin . A2f0b) (flmax . A2f0a) (fllog . A2f09) (flinteger? . A2f08) (flinfinite? . A2f07) (flfloor . A2f06) (flfinite? . A2f05) (flexpt . A2f04) (flexp . A2f03) (fleven? . A2f02) (fldiv0-and-mod0 . A2f01) (fldiv0 . A2f00) (fldiv-and-mod . A2eff) (fldiv . A2efe) (fldenominator . A2efd) (flcos . A2efc) (flceiling . A2efb) (flatan . A2efa) (flasin . A2ef9) (flacos . A2ef8) (flabs . A2ef7) (fl>? . A2ef6) (fl>=? . A2ef5) (fl=? . A2ef4) (fl<? . A2ef3) (fl<=? . A2ef2) (fl/ . A2ef1) (fl- . A2ef0) (fl+ . A2eef) (fl* . A2eee) (fixnum->flonum . A2eed) (fxzero? . A2eec) (fxxor . A2eeb) (fxrotate-bit-field . A2eea) (fxreverse-bit-field . A2ee9) (fxpositive? . A2ee8) (fxodd? . A2ee7) (fxnot . A2ee6) (fxnegative? . A2ee5) (fxmod0 . A2ee4) (fxmod . A2ee3) (fxmin . A2ee2) (fxmax . A2ee1) (fxlength . A2ee0) (fxior . A2edf) (fxif . A2ede) (fxfirst-bit-set . A2edd) (fxeven? . A2edc) (fxdiv0-and-mod0 . A2edb) (fxdiv0 . A2eda) (fxdiv-and-mod . A2ed9) (fxdiv . A2ed8) (fxcopy-bit-field . A2ed7) (fxcopy-bit . A2ed6) (fxbit-set? . A2ed5) (fxbit-field . A2ed4) (fxbit-count . A2ed3) (fxarithmetic-shift-right . A2ed2) (fxarithmetic-shift-left . A2ed1) (fxarithmetic-shift . A2ed0) (fxand . A2ecf) (fx>? . A2ece) (fx>=? . A2ecd) (fx=? . A2ecc) (fx<? . A2ecb) (fx<=? . A2eca) (fx-/carry . A2ec9) (fx- . A2ec8) (fx+/carry . A2ec7) (fx+ . A2ec6) (fx*/carry . A2ec5) (fx* . A2ec4) (greatest-fixnum . A2ec3) (least-fixnum . A2ec2) (fixnum-width . A2ec1) (fixnum? . A2ec0) (bitwise-rotate-bit-field . A2ebf) (bitwise-reverse-bit-field . A2ebe) (bitwise-length . A2ebd) (bitwise-if . A2ebc) (bitwise-first-bit-set . A2ebb) (bitwise-copy-bit-field . A2eba) (bitwise-copy-bit . A2eb9) (bitwise-bit-set? . A2eb8) (bitwise-bit-field . A2eb7) (bitwise-bit-count . A2eb6) (bitwise-xor . A2eb5) (bitwise-ior . A2eb4) (bitwise-and . A2eb3) (bitwise-not . A2eb2) (bitwise-arithmetic-shift-right . A2eb1) (bitwise-arithmetic-shift-left . A2eb0) (bitwise-arithmetic-shift . A2eaf) (zero? . A2eae) (vector? . A2ead) (vector-set! . A2eac) (vector-ref . A2eab) (vector-map . A2eaa) (vector-length . A2ea9) (vector-for-each . A2ea8) (vector-fill! . A2ea7) (vector->list . A2ea6) (vector . A2ea5) (values . A2ea4) (truncate . A2ea3) (tan . A2ea2) (symbol? . A2ea1) (symbol=? . A2ea0) (symbol->string . A2e9f) (substring . A2e9e) (string? . A2e9d) (string>? . A2e9c) (string>=? . A2e9b) (string=? . A2e9a) (string<? . A2e99) (string<=? . A2e98) (string-ref . A2e97) (string-length . A2e96) (string-for-each . A2e95) (string-copy . A2e94) (string-append . A2e93) (string->symbol . A2e92) (string->number . A2e91) (string->list . A2e90) (string . A2e8f) (sqrt . A2e8e) (sin . A2e8d) (round . A2e8c) (reverse . A2e8b) (real? . A2e8a) (real-valued? . A2e89) (real-part . A2e88) (rationalize . A2e87) (rational? . A2e86) (rational-valued? . A2e85) (procedure? . A2e84) (positive? . A2e83) (pair? . A2e82) (odd? . A2e81) (numerator . A2e80) (number? . A2e7f) (number->string . A2e7e) (null? . A2e7d) (not . A2e7c) (negative? . A2e7b) (nan? . A2e7a) (min . A2e79) (max . A2e78) (map . A2e77) (make-vector . A2e76) (make-string . A2e75) (make-rectangular . A2e74) (make-polar . A2e73) (magnitude . A2e72) (log . A2e71) (list? . A2e70) (list-tail . A2e6f) (list-ref . A2e6e) (list->vector . A2e6d) (list->string . A2e6c) (list . A2e6b) (length . A2e6a) (lcm . A2e69) (integer? . A2e68) (integer-valued? . A2e67) (integer->char . A2e66) (infinite? . A2e65) (inexact? . A2e64) (inexact . A2e63) (imag-part . A2e62) (gcd . A2e61) (for-each . A2e60) (floor . A2e5f) (finite? . A2e5e) (expt . A2e5d) (exp . A2e5c) (exact? . A2e5b) (exact-integer-sqrt . A2e5a) (exact . A2e59) (even? . A2e58) (error . A2e57) (eqv? . A2e56) (equal? . A2e55) (eq? . A2e54) (dynamic-wind . A2e53) (div0-and-mod0 . A2e52) (mod0 . A2e51) (div0 . A2e50) (div-and-mod . A2e4f) (mod . A2e4e) (div . A2e4d) (denominator . A2e4c) (cos . A2e4b) (cons . A2e4a) (complex? . A2e49) (char? . A2e48) (char>? . A2e47) (char>=? . A2e46) (char=? . A2e45) (char<? . A2e44) (char<=? . A2e43) (char->integer . A2e42) (ceiling . A2e41) (call-with-values . A2e40) (call/cc . A2e3f) (call-with-current-continuation . A2e3e) (cddddr . A2e3d) (cdddar . A2e3c) (cddadr . A2e3b) (cddaar . A2e3a) (cdaddr . A2e39) (cdadar . A2e38) (cdaadr . A2e37) (cdaaar . A2e36) (cadddr . A2e35) (caddar . A2e34) (cadadr . A2e33) (cadaar . A2e32) (caaddr . A2e31) (caadar . A2e30) (caaadr . A2e2f) (caaaar . A2e2e) (cdddr . A2e2d) (cddar . A2e2c) (cdadr . A2e2b) (cdaar . A2e2a) (caddr . A2e29) (cadar . A2e28) (caadr . A2e27) (caaar . A2e26) (cddr . A2e25) (cdar . A2e24) (cadr . A2e23) (caar . A2e22) (cdr . A2e21) (car . A2e20) (boolean? . A2e1f) (boolean=? . A2e1e) (atan . A2e1d) (assertion-violation . A2e1c) (asin . A2e1b) (apply . A2e1a) (append . A2e19) (angle . A2e18) (acos . A2e17) (abs . A2e16) (/ . A2e15) (* . A2e14) (- . A2e13) (+ . A2e12) (>= . A2e11) (> . A2e10) (= . A2e0f) (<= . A2e0e) (< . A2e0d) (&no-nans . A2e0b) (&no-infinities . A2e0a) (&i/o-encoding . A2e09) (&i/o-decoding . A2e08) (&i/o-port . A2e07) (&i/o-file-does-not-exist . A2e06) (&i/o-file-already-exists . A2e05) (&i/o-file-is-read-only . A2e04) (&i/o-file-protection . A2e03) (&i/o-filename . A2e02) (&i/o-invalid-position . A2e01) (&i/o-write . A2e00) (&i/o-read . A2dff) (&i/o . A2dfe) (&undefined . A2dfd) (&syntax . A2dfc) (&lexical . A2dfb) (&implementation-restriction . A2dfa) (&non-continuable . A2df9) (&who . A2df8) (&irritants . A2df7) (&assertion . A2df6) (&violation . A2df5) (&error . A2df4) (&serious . A2df3) (&warning . A2df2) (&message . A2df1) (&condition . A2df0) (define-condition-type . A2def) (define-enumeration . A2dee) (define-record-type . A2ded) (parent-rtd . A2dec) (nongenerative . A2deb) (opaque . A2dea) (sealed . A2de9) (protocol . A2de8) (parent . A2de7) (immutable . A2de6) (mutable . A2de5) (fields . A2de4) (error-handling-mode . A2de3) (file-options . A2de2) (buffer-mode . A2de1) (eol-style . A2de0) (guard . A2ddf) (unsyntax-splicing . A2ddc) (unsyntax . A2ddb) (unquote-splicing . A2dda) (unquote . A2dd9) (_ . A2dd8) (else . A2dd7) (=> . A2dd6) (... . A2dd5) (assert . A2dd4) (endianness . A2dd3) (do . A2dd0) (cond . A2dcf) (let* . A2dce) (let . A2dcd) (let*-values . A2dcc) (let-values . A2dcb) (identifier-syntax . A2dca) (with-syntax . A2dc9) (quasisyntax . A2dc8) (quasiquote . A2dc7) (syntax-rules . A2dc6) (record-constructor-descriptor . A2dc3) (record-type-descriptor . A2dc2) (case . A2dc1) (unless . A2dbf) (when . A2dbe) (or . A2dbd) (and . A2dbc) (if . A2dbb) (letrec* . A2dba) (letrec . A2db9) (case-lambda . A2db7) (lambda . A2db6) (syntax . A2db5) (syntax-case . A2db4) (quote . A2db3) (letrec-syntax . A2db1) (let-syntax . A2db0) (set! . A2daf) (begin . A2dad) (define-syntax . A2dab) (define . A2daa)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d4 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . Ae1a) (quotient . A2f90) (null-environment . Ae18) (remainder . A2f8f) (modulo . A2f8e) (inexact->exact . A2f8d) (force . A2f8c) (exact->inexact . A2f8b) (make-promise . A2f8a) (delay . A2dd2)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d5 '(rnrs control) '(6) '() '() '() '((do . A2dd0) (unless . A2dbf) (when . A2dbe) (case-lambda . A2db7)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d6 '(rnrs eval) '(6) '() '() '() '((eval . Ae1e) (environment . Ae16)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d7 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . A2f86) (set-car! . A2f85)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d8 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . A2f88) (string-set! . A2f87)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30d9 '(rnrs programs) '(6) '() '() '() '((exit . A2f89) (command-line . A2c2e)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30da '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . Ab8b) (identifier? . Ae40) (generate-temporaries . Ae2c) (free-identifier=? . Ae2e) (syntax->datum . Ae44) (datum->syntax . Ae42) (bound-identifier=? . Ae30) (syntax-violation . Ae3e) (unsyntax-splicing . A2ddc) (unsyntax . A2ddb) (_ . A2dd8) (... . A2dd5) (with-syntax . A2dc9) (quasisyntax . A2dc8) (syntax . A2db5) (syntax-case . A2db4)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30db '(rnrs files) '(6) '() '() '() '((delete-file . A2ff9) (file-exists? . A2ff8) (make-i/o-write-error . A2a22) (make-i/o-read-error . A2a0d) (make-i/o-port-error . A2ac3) (make-i/o-invalid-position-error . A2a39) (make-i/o-filename-error . A2a54) (make-i/o-file-protection-error . A2a6d) (make-i/o-file-is-read-only-error . A2a82) (make-i/o-file-does-not-exist-error . A2aac) (make-i/o-file-already-exists-error . A2a97) (make-i/o-error . A29f8) (i/o-write-error? . A2a24) (i/o-read-error? . A2a0f) (i/o-port-error? . A2ac7) (i/o-invalid-position-error? . A2a3d) (i/o-filename-error? . A2a58) (i/o-file-protection-error? . A2a6f) (i/o-file-is-read-only-error? . A2a84) (i/o-file-does-not-exist-error? . A2aae) (i/o-file-already-exists-error? . A2a99) (i/o-error? . A29fa) (i/o-error-position . A2a3f) (i/o-error-port . A2ac9) (i/o-error-filename . A2a5a) (&i/o-port . A2e07) (&i/o-file-does-not-exist . A2e06) (&i/o-file-already-exists . A2e05) (&i/o-file-is-read-only . A2e04) (&i/o-file-protection . A2e03) (&i/o-filename . A2e02) (&i/o-invalid-position . A2e01) (&i/o-write . A2e00) (&i/o-read . A2dff) (&i/o . A2dfe)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30dc '(rnrs sorting) '(6) '() '() '() '((vector-sort! . A2ff7) (vector-sort . A2ff6) (list-sort . A2ff5)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30dd '(rnrs base) '(6) '() '() '() '((zero? . A2eae) (vector? . A2ead) (vector-set! . A2eac) (vector-ref . A2eab) (vector-map . A2eaa) (vector-length . A2ea9) (vector-for-each . A2ea8) (vector-fill! . A2ea7) (vector->list . A2ea6) (vector . A2ea5) (values . A2ea4) (truncate . A2ea3) (tan . A2ea2) (symbol? . A2ea1) (symbol=? . A2ea0) (symbol->string . A2e9f) (substring . A2e9e) (string? . A2e9d) (string>? . A2e9c) (string>=? . A2e9b) (string=? . A2e9a) (string<? . A2e99) (string<=? . A2e98) (string-ref . A2e97) (string-length . A2e96) (string-for-each . A2e95) (string-copy . A2e94) (string-append . A2e93) (string->symbol . A2e92) (string->number . A2e91) (string->list . A2e90) (string . A2e8f) (sqrt . A2e8e) (sin . A2e8d) (round . A2e8c) (reverse . A2e8b) (real? . A2e8a) (real-valued? . A2e89) (real-part . A2e88) (rationalize . A2e87) (rational? . A2e86) (rational-valued? . A2e85) (procedure? . A2e84) (positive? . A2e83) (pair? . A2e82) (odd? . A2e81) (numerator . A2e80) (number? . A2e7f) (number->string . A2e7e) (null? . A2e7d) (not . A2e7c) (negative? . A2e7b) (nan? . A2e7a) (min . A2e79) (max . A2e78) (map . A2e77) (make-vector . A2e76) (make-string . A2e75) (make-rectangular . A2e74) (make-polar . A2e73) (magnitude . A2e72) (log . A2e71) (list? . A2e70) (list-tail . A2e6f) (list-ref . A2e6e) (list->vector . A2e6d) (list->string . A2e6c) (list . A2e6b) (length . A2e6a) (lcm . A2e69) (integer? . A2e68) (integer-valued? . A2e67) (integer->char . A2e66) (infinite? . A2e65) (inexact? . A2e64) (inexact . A2e63) (imag-part . A2e62) (gcd . A2e61) (for-each . A2e60) (floor . A2e5f) (finite? . A2e5e) (expt . A2e5d) (exp . A2e5c) (exact? . A2e5b) (exact-integer-sqrt . A2e5a) (exact . A2e59) (even? . A2e58) (error . A2e57) (eqv? . A2e56) (equal? . A2e55) (eq? . A2e54) (dynamic-wind . A2e53) (div0-and-mod0 . A2e52) (mod0 . A2e51) (div0 . A2e50) (div-and-mod . A2e4f) (mod . A2e4e) (div . A2e4d) (denominator . A2e4c) (cos . A2e4b) (cons . A2e4a) (complex? . A2e49) (char? . A2e48) (char>? . A2e47) (char>=? . A2e46) (char=? . A2e45) (char<? . A2e44) (char<=? . A2e43) (char->integer . A2e42) (ceiling . A2e41) (call-with-values . A2e40) (call/cc . A2e3f) (call-with-current-continuation . A2e3e) (cddddr . A2e3d) (cdddar . A2e3c) (cddadr . A2e3b) (cddaar . A2e3a) (cdaddr . A2e39) (cdadar . A2e38) (cdaadr . A2e37) (cdaaar . A2e36) (cadddr . A2e35) (caddar . A2e34) (cadadr . A2e33) (cadaar . A2e32) (caaddr . A2e31) (caadar . A2e30) (caaadr . A2e2f) (caaaar . A2e2e) (cdddr . A2e2d) (cddar . A2e2c) (cdadr . A2e2b) (cdaar . A2e2a) (caddr . A2e29) (cadar . A2e28) (caadr . A2e27) (caaar . A2e26) (cddr . A2e25) (cdar . A2e24) (cadr . A2e23) (caar . A2e22) (cdr . A2e21) (car . A2e20) (boolean? . A2e1f) (boolean=? . A2e1e) (atan . A2e1d) (assertion-violation . A2e1c) (asin . A2e1b) (apply . A2e1a) (append . A2e19) (angle . A2e18) (acos . A2e17) (abs . A2e16) (/ . A2e15) (* . A2e14) (- . A2e13) (+ . A2e12) (>= . A2e11) (> . A2e10) (= . A2e0f) (<= . A2e0e) (< . A2e0d) (unquote-splicing . A2dda) (unquote . A2dd9) (_ . A2dd8) (else . A2dd7) (=> . A2dd6) (... . A2dd5) (assert . A2dd4) (cond . A2dcf) (let* . A2dce) (let . A2dcd) (let*-values . A2dcc) (let-values . A2dcb) (identifier-syntax . A2dca) (quasiquote . A2dc7) (syntax-rules . A2dc6) (case . A2dc1) (or . A2dbd) (and . A2dbc) (if . A2dbb) (letrec* . A2dba) (letrec . A2db9) (lambda . A2db6) (quote . A2db3) (letrec-syntax . A2db1) (let-syntax . A2db0) (set! . A2daf) (begin . A2dad) (define-syntax . A2dab) (define . A2daa)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30de '(rnrs lists) '(6) '() '() '() '((remove . A2f84) (remv . A2f83) (remp . A2f82) (remq . A2f81) (partition . A2f80) (memv . A2f7f) (memq . A2f7e) (memp . A2f7d) (member . A2f7c) (exists . A2f7b) (for-all . A2f7a) (fold-right . A2f79) (fold-left . A2f78) (find . A2f77) (filter . A2f76) (cons* . A2f75) (assv . A2f74) (assq . A2f73) (assp . A2f72) (assoc . A2f71)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30df '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . A2fdf) (call-with-input-file . A2fde) (write-char . A2fdd) (write . A2fdc) (with-output-to-file . A2fdb) (with-input-from-file . A2fda) (read-char . A2fd9) (read . A2fd8) (peek-char . A2fd7) (open-output-file . A2fd6) (open-input-file . A2fd5) (newline . A2fd4) (display . A2fd3) (close-output-port . A2fd2) (close-input-port . A2fd1) (eof-object? . A2fd0) (eof-object . A2fcf) (current-error-port . A2fce) (current-output-port . A2fcd) (current-input-port . A2fcc) (output-port? . A2fcb) (input-port? . A2fca) (make-i/o-write-error . A2a22) (make-i/o-read-error . A2a0d) (make-i/o-port-error . A2ac3) (make-i/o-invalid-position-error . A2a39) (make-i/o-filename-error . A2a54) (make-i/o-file-protection-error . A2a6d) (make-i/o-file-is-read-only-error . A2a82) (make-i/o-file-does-not-exist-error . A2aac) (make-i/o-file-already-exists-error . A2a97) (make-i/o-error . A29f8) (i/o-write-error? . A2a24) (i/o-read-error? . A2a0f) (i/o-port-error? . A2ac7) (i/o-invalid-position-error? . A2a3d) (i/o-filename-error? . A2a58) (i/o-file-protection-error? . A2a6f) (i/o-file-is-read-only-error? . A2a84) (i/o-file-does-not-exist-error? . A2aae) (i/o-file-already-exists-error? . A2a99) (i/o-error? . A29fa) (i/o-error-position . A2a3f) (i/o-error-port . A2ac9) (i/o-error-filename . A2a5a) (&i/o-port . A2e07) (&i/o-file-does-not-exist . A2e06) (&i/o-file-already-exists . A2e05) (&i/o-file-is-read-only . A2e04) (&i/o-file-protection . A2e03) (&i/o-filename . A2e02) (&i/o-invalid-position . A2e01) (&i/o-write . A2e00) (&i/o-read . A2dff) (&i/o . A2dfe)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e0 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . A2fa0) (utf32->string . A2f55) (utf16->string . A2f54) (utf8->string . A2f53) (uint-list->bytevector . A2f52) (u8-list->bytevector . A2f51) (string->utf8 . A2f50) (string->utf32 . A2f4f) (string->utf16 . A2f4e) (sint-list->bytevector . A2f4d) (native-endianness . A2f4c) (bytevector? . A2f4b) (bytevector=? . A2f4a) (bytevector-uint-set! . A2f49) (bytevector-uint-ref . A2f48) (bytevector-u8-set! . A2f47) (bytevector-u8-ref . A2f46) (bytevector-u64-set! . A2f45) (bytevector-u64-ref . A2f44) (bytevector-u64-native-set! . A2f43) (bytevector-u64-native-ref . A2f42) (bytevector-u32-set! . A2f41) (bytevector-u32-ref . A2f40) (bytevector-u32-native-set! . A2f3f) (bytevector-u32-native-ref . A2f3e) (bytevector-u16-set! . A2f3d) (bytevector-u16-ref . A2f3c) (bytevector-u16-native-set! . A2f3b) (bytevector-u16-native-ref . A2f3a) (bytevector-sint-set! . A2f39) (bytevector-sint-ref . A2f38) (bytevector-s8-set! . A2f37) (bytevector-s8-ref . A2f36) (bytevector-s64-set! . A2f35) (bytevector-s64-ref . A2f34) (bytevector-s64-native-set! . A2f33) (bytevector-s64-native-ref . A2f32) (bytevector-s32-set! . A2f31) (bytevector-s32-ref . A2f30) (bytevector-s32-native-set! . A2f2f) (bytevector-s32-native-ref . A2f2e) (bytevector-s16-set! . A2f2d) (bytevector-s16-ref . A2f2c) (bytevector-s16-native-set! . A2f2b) (bytevector-s16-native-ref . A2f2a) (bytevector-length . A2f29) (bytevector-ieee-single-ref . A2f28) (bytevector-ieee-single-set! . A2f27) (bytevector-ieee-single-native-set! . A2f26) (bytevector-ieee-single-native-ref . A2f25) (bytevector-ieee-double-set! . A2f24) (bytevector-ieee-double-ref . A2f23) (bytevector-ieee-double-native-set! . A2f22) (bytevector-ieee-double-native-ref . A2f21) (bytevector-fill! . A2f20) (bytevector-copy! . A2f1f) (bytevector-copy . A2f1e) (bytevector->uint-list . A2f1d) (bytevector->u8-list . A2f1c) (bytevector->sint-list . A2f1b) (endianness . A2dd3)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e1 '(rnrs unicode) '(6) '() '() '() '((string-upcase . A3027) (string-titlecase . A3026) (string-normalize-nfkd . A3025) (string-normalize-nfkc . A3024) (string-normalize-nfd . A3023) (string-normalize-nfc . A3022) (string-foldcase . A3021) (string-downcase . A3020) (string-ci>? . A301f) (string-ci>=? . A301e) (string-ci=? . A301d) (string-ci<? . A301c) (string-ci<=? . A301b) (char-whitespace? . A301a) (char-upper-case? . A3019) (char-title-case? . A3018) (char-numeric? . A3017) (char-lower-case? . A3016) (char-general-category . A3015) (char-upcase . A3014) (char-titlecase . A3013) (char-foldcase . A3012) (char-downcase . A3011) (char-ci>? . A3010) (char-ci>=? . A300f) (char-ci=? . A300e) (char-ci<? . A300d) (char-ci<=? . A300c) (char-alphabetic? . A300b)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e2 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . A2f6a) (raise-continuable . A2f69) (raise . A2f68) (guard . A2ddf) (else . A2dd7) (=> . A2dd6)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e3 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . A2ebf) (bitwise-reverse-bit-field . A2ebe) (bitwise-length . A2ebd) (bitwise-if . A2ebc) (bitwise-first-bit-set . A2ebb) (bitwise-copy-bit-field . A2eba) (bitwise-copy-bit . A2eb9) (bitwise-bit-set? . A2eb8) (bitwise-bit-field . A2eb7) (bitwise-bit-count . A2eb6) (bitwise-xor . A2eb5) (bitwise-ior . A2eb4) (bitwise-and . A2eb3) (bitwise-not . A2eb2) (bitwise-arithmetic-shift-right . A2eb1) (bitwise-arithmetic-shift-left . A2eb0) (bitwise-arithmetic-shift . A2eaf)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e4 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . A2eec) (fxxor . A2eeb) (fxrotate-bit-field . A2eea) (fxreverse-bit-field . A2ee9) (fxpositive? . A2ee8) (fxodd? . A2ee7) (fxnot . A2ee6) (fxnegative? . A2ee5) (fxmod0 . A2ee4) (fxmod . A2ee3) (fxmin . A2ee2) (fxmax . A2ee1) (fxlength . A2ee0) (fxior . A2edf) (fxif . A2ede) (fxfirst-bit-set . A2edd) (fxeven? . A2edc) (fxdiv0-and-mod0 . A2edb) (fxdiv0 . A2eda) (fxdiv-and-mod . A2ed9) (fxdiv . A2ed8) (fxcopy-bit-field . A2ed7) (fxcopy-bit . A2ed6) (fxbit-set? . A2ed5) (fxbit-field . A2ed4) (fxbit-count . A2ed3) (fxarithmetic-shift-right . A2ed2) (fxarithmetic-shift-left . A2ed1) (fxarithmetic-shift . A2ed0) (fxand . A2ecf) (fx>? . A2ece) (fx>=? . A2ecd) (fx=? . A2ecc) (fx<? . A2ecb) (fx<=? . A2eca) (fx-/carry . A2ec9) (fx- . A2ec8) (fx+/carry . A2ec7) (fx+ . A2ec6) (fx*/carry . A2ec5) (fx* . A2ec4) (greatest-fixnum . A2ec3) (least-fixnum . A2ec2) (fixnum-width . A2ec1) (fixnum? . A2ec0)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e5 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . A2b23) (no-infinities-violation? . A2b0e) (make-no-nans-violation . A2b21) (make-no-infinities-violation . A2b0c) (real->flonum . A2f1a) (flzero? . A2f19) (fltruncate . A2f18) (fltan . A2f17) (flsqrt . A2f16) (flsin . A2f15) (flround . A2f14) (flpositive? . A2f13) (flonum? . A2f12) (flodd? . A2f11) (flnumerator . A2f10) (flnegative? . A2f0f) (flnan? . A2f0e) (flmod0 . A2f0d) (flmod . A2f0c) (flmin . A2f0b) (flmax . A2f0a) (fllog . A2f09) (flinteger? . A2f08) (flinfinite? . A2f07) (flfloor . A2f06) (flfinite? . A2f05) (flexpt . A2f04) (flexp . A2f03) (fleven? . A2f02) (fldiv0-and-mod0 . A2f01) (fldiv0 . A2f00) (fldiv-and-mod . A2eff) (fldiv . A2efe) (fldenominator . A2efd) (flcos . A2efc) (flceiling . A2efb) (flatan . A2efa) (flasin . A2ef9) (flacos . A2ef8) (flabs . A2ef7) (fl>? . A2ef6) (fl>=? . A2ef5) (fl=? . A2ef4) (fl<? . A2ef3) (fl<=? . A2ef2) (fl/ . A2ef1) (fl- . A2ef0) (fl+ . A2eef) (fl* . A2eee) (fixnum->flonum . A2eed) (&no-nans . A2e0b) (&no-infinities . A2e0a)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e6 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . A2ff4) (string-ci-hash . A2ff3) (string-hash . A2ff2) (equal-hash . A2ff1) (hashtable-equivalence-function . A2ff0) (make-hashtable . A2fef) (hashtable-hash-function . A2fee) (make-eqv-hashtable . A2fed) (make-eq-hashtable . A2fec) (hashtable? . A2feb) (hashtable-update! . A2fea) (hashtable-size . A2fe9) (hashtable-set! . A2fe8) (hashtable-ref . A2fe7) (hashtable-mutable? . A2fe6) (hashtable-keys . A2fe5) (hashtable-entries . A2fe4) (hashtable-delete! . A2fe3) (hashtable-copy . A2fe2) (hashtable-contains? . A2fe1) (hashtable-clear! . A2fe0)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e7 '(rnrs io ports) '(6) '() '() '() '((eof-object? . A2fd0) (eof-object . A2fcf) (current-error-port . A2fce) (current-output-port . A2fcd) (current-input-port . A2fcc) (output-port? . A2fcb) (input-port? . A2fca) (utf-8-codec . A2fc9) (utf-16-codec . A2fc8) (transcoder-error-handling-mode . A2fc7) (transcoder-eol-style . A2fc6) (transcoder-codec . A2fc5) (transcoded-port . A2fc4) (textual-port? . A2fc3) (string->bytevector . A2fc2) (standard-output-port . A2fc1) (standard-input-port . A2fc0) (standard-error-port . A2fbf) (set-port-position! . A2fbe) (put-u8 . A2fbd) (put-string . A2fbc) (put-datum . A2fbb) (put-char . A2fba) (put-bytevector . A2fb9) (port? . A2fb8) (port-transcoder . A2fb7) (port-position . A2fb6) (port-has-set-port-position!? . A2fb5) (port-has-port-position? . A2fb4) (port-eof? . A2fb3) (output-port-buffer-mode . A2fb2) (open-string-output-port . A2fb1) (open-string-input-port . A2fb0) (open-file-output-port . A2faf) (open-file-input/output-port . A2fae) (open-file-input-port . A2fad) (open-bytevector-output-port . A2fac) (open-bytevector-input-port . A2fab) (native-transcoder . A2faa) (native-eol-style . A2fa9) (make-transcoder . A2fa8) (latin-1-codec . A2fa7) (make-i/o-write-error . A2a22) (make-i/o-read-error . A2a0d) (make-i/o-port-error . A2ac3) (make-i/o-invalid-position-error . A2a39) (make-i/o-filename-error . A2a54) (make-i/o-file-protection-error . A2a6d) (make-i/o-file-is-read-only-error . A2a82) (make-i/o-file-does-not-exist-error . A2aac) (make-i/o-file-already-exists-error . A2a97) (make-i/o-error . A29f8) (make-i/o-encoding-error . A2af3) (make-i/o-decoding-error . A2adc) (make-custom-textual-output-port . A2fa6) (make-custom-textual-input/output-port . A2fa5) (make-custom-textual-input-port . A2fa4) (make-custom-binary-output-port . A2fa3) (make-custom-binary-input/output-port . A2fa2) (make-custom-binary-input-port . A2fa1) (lookahead-u8 . A2f9f) (lookahead-char . A2f9e) (i/o-write-error? . A2a24) (i/o-read-error? . A2a0f) (i/o-port-error? . A2ac7) (i/o-invalid-position-error? . A2a3d) (i/o-filename-error? . A2a58) (i/o-file-protection-error? . A2a6f) (i/o-file-is-read-only-error? . A2a84) (i/o-file-does-not-exist-error? . A2aae) (i/o-file-already-exists-error? . A2a99) (i/o-error? . A29fa) (i/o-error-position . A2a3f) (i/o-error-port . A2ac9) (i/o-error-filename . A2a5a) (i/o-encoding-error? . A2af7) (i/o-encoding-error-char . A2af9) (i/o-decoding-error? . A2ade) (get-u8 . A2f9d) (get-string-n! . A2f9c) (get-string-n . A2f9b) (get-string-all . A2f9a) (get-line . A2f99) (get-datum . A2f98) (get-char . A2f97) (get-bytevector-some . A2f96) (get-bytevector-n! . A2f95) (get-bytevector-n . A2f94) (get-bytevector-all . A2f93) (flush-output-port . A2f92) (close-port . A2f91) (call-with-string-output-port . A2f70) (call-with-port . A2f6f) (call-with-bytevector-output-port . A2f6e) (bytevector->string . A2f6d) (buffer-mode? . A2f6c) (binary-port? . A2f6b) (&i/o-encoding . A2e09) (&i/o-decoding . A2e08) (&i/o-port . A2e07) (&i/o-file-does-not-exist . A2e06) (&i/o-file-already-exists . A2e05) (&i/o-file-is-read-only . A2e04) (&i/o-file-protection . A2e03) (&i/o-filename . A2e02) (&i/o-invalid-position . A2e01) (&i/o-write . A2e00) (&i/o-read . A2dff) (&i/o . A2dfe) (error-handling-mode . A2de3) (file-options . A2de2) (buffer-mode . A2de1) (eol-style . A2de0)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e8 '(rnrs enums) '(6) '() '() '() '((make-enumeration . A2f67) (enum-set=? . A2f66) (enum-set-universe . A2f65) (enum-set-union . A2f64) (enum-set-subset? . A2f63) (enum-set-projection . A2f62) (enum-set-member? . A2f61) (enum-set-intersection . A2f60) (enum-set-indexer . A2f5f) (enum-set-difference . A2f5e) (enum-set-constructor . A2f5d) (enum-set-complement . A2f5c) (enum-set->list . A2f5b) (define-enumeration . A2dee)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30e9 '(rnrs conditions) '(6) '() '() '() '((who-condition? . A296e) (warning? . A28e6) (violation? . A2925) (undefined-violation? . A29e5) (syntax-violation? . A29cc) (syntax-violation-subform . A29d0) (syntax-violation-form . A29ce) (syntax-violation . Ae3e) (simple-conditions . A2f5a) (serious-condition? . A28fb) (non-continuable-violation? . A2985) (message-condition? . A28cf) (make-who-condition . A296a) (make-warning . A28e4) (make-violation . A2923) (make-undefined-violation . A29e3) (make-syntax-violation . A29c6) (make-serious-condition . A28f9) (make-non-continuable-violation . A2983) (make-message-condition . A28cb) (make-lexical-violation . A29ad) (make-irritants-condition . A294f) (make-implementation-restriction-violation . A2998) (make-error . A290e) (make-assertion-violation . A2938) (lexical-violation? . A29af) (irritants-condition? . A2953) (implementation-restriction-violation? . A299a) (error? . A2910) (condition-who . A2970) (condition-predicate . A2f59) (condition-message . A28d1) (condition-irritants . A2955) (condition-accessor . A2f58) (condition . A2f57) (assertion-violation? . A293a) (condition? . A2f56) (&undefined . A2dfd) (&syntax . A2dfc) (&lexical . A2dfb) (&implementation-restriction . A2dfa) (&non-continuable . A2df9) (&who . A2df8) (&irritants . A2df7) (&assertion . A2df6) (&violation . A2df5) (&error . A2df4) (&serious . A2df3) (&warning . A2df2) (&message . A2df1) (&condition . A2df0) (define-condition-type . A2def)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30ea '(rnrs records inspection) '(6) '() '() '() '((record? . A3003) (record-type-uid . A3002) (record-type-sealed? . A3001) (record-type-parent . A3000) (record-type-opaque? . A2fff) (record-type-name . A2ffe) (record-type-generative? . A2ffd) (record-type-field-names . A2ffc) (record-rtd . A2ffb) (record-field-mutable? . A2ffa)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30eb '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . A300a) (record-predicate . A3009) (record-mutator . A3008) (record-constructor . A3007) (record-accessor . A3006) (make-record-type-descriptor . A3005) (make-record-constructor-descriptor . A3004)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30ec '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . A2ded) (parent-rtd . A2dec) (nongenerative . A2deb) (opaque . A2dea) (sealed . A2de9) (protocol . A2de8) (parent . A2de7) (immutable . A2de6) (mutable . A2de5) (fields . A2de4) (record-constructor-descriptor . A2dc3) (record-type-descriptor . A2dc2)) '() values values '#f '#f '#t '#f) (A983@A7cf@install-library 'A30ed '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . A2b27) (&no-nans-rtd . A2b25) (&no-infinities-rcd . A2b12) (&no-infinities-rtd . A2b10) (&i/o-encoding-rcd . A2afd) (&i/o-encoding-rtd . A2afb) (&i/o-decoding-rcd . A2ae2) (&i/o-decoding-rtd . A2ae0) (&i/o-port-rcd . A2acd) (&i/o-port-rtd . A2acb) (&i/o-file-does-not-exist-rcd . A2ab2) (&i/o-file-does-not-exist-rtd . A2ab0) (&i/o-file-already-exists-rcd . A2a9d) (&i/o-file-already-exists-rtd . A2a9b) (&i/o-file-is-read-only-rcd . A2a88) (&i/o-file-is-read-only-rtd . A2a86) (&i/o-file-protection-rcd . A2a73) (&i/o-file-protection-rtd . A2a71) (&i/o-filename-rcd . A2a5e) (&i/o-filename-rtd . A2a5c) (&i/o-invalid-position-rcd . A2a43) (&i/o-invalid-position-rtd . A2a41) (&i/o-write-rcd . A2a28) (&i/o-write-rtd . A2a26) (&i/o-read-rcd . A2a13) (&i/o-read-rtd . A2a11) (&i/o-rcd . A29fe) (&i/o-rtd . A29fc) (&undefined-rcd . A29e9) (&undefined-rtd . A29e7) (&syntax-rcd . A29d4) (&syntax-rtd . A29d2) (&lexical-rcd . A29b3) (&lexical-rtd . A29b1) (&implementation-restriction-rcd . A299e) (&implementation-restriction-rtd . A299c) (&non-continuable-rcd . A2989) (&non-continuable-rtd . A2987) (&who-rcd . A2974) (&who-rtd . A2972) (&irritants-rcd . A2959) (&irritants-rtd . A2957) (&assertion-rcd . A293e) (&assertion-rtd . A293c) (&violation-rcd . A2929) (&violation-rtd . A2927) (&error-rcd . A2914) (&error-rtd . A2912) (&serious-rcd . A28ff) (&serious-rtd . A28fd) (&warning-rcd . A28ea) (&warning-rtd . A28e8) (&message-rcd . A28d5) (&message-rtd . A28d3) (&condition-rcd . A2876) (&condition-rtd . A2874) (syntax-error . Ae3a) (syntax-dispatch . Ad5e) (pretty-print . A30cd) (eval-core . A30cc) (set-symbol-value! . A30cb) (symbol-value . A30ca) (gensym . A30c9) (void . A30c8) (load . A2c34) (interaction-environment . Ae4a) (char-ready? . A30c7) (regexp? . A30c6) (read-line . A30c5) (gensym-prefix-set! . A30c4) (ungensym . A30c3) (alist->eq-hash-table . A30c2) (assoc-ref . A30c1) (print . A30c0) (format . A30bf) (host-os . A30be) (library-path . A7ae) (standard-library-path . A30bd) (file-newer? . A30bc) (stat-mtime . A30bb) (write-to-file . A30ba) (file->list . A30b9) (file->string . A30b8) (digit->integer . A30b7) (call-with-string-input-port . A30b6) (call-with-string-io . A30b5) (string-split . A30b4) (bytevector-for-each . A30b3) (string->regexp . A30b2) (rxmatch . A30b1) (regexp-replace-all . A30b0) (hashtable-for-each . A30af) (mosh-cache-dir . A599) (call-process . A30ae) (local-tz-offset . A30ad) (microseconds . A30ac) (directory-list . A30ab) (set-current-directory! . A30aa) (expand-path . A30a9) (current-directory . A30a8) (%spawn . A30a7) (%waitpid . A30a6) (simple-struct-name . A30a5) (simple-struct-set! . A30a4) (simple-struct-ref . A30a3) (make-simple-struct . A30a2) (simple-struct? . A30a1) (pointer-ref-c-int64 . A30a0) (pointer-ref-c-int32 . A309f) (pointer-ref-c-int16 . A309e) (pointer-ref-c-int8 . A309d) (pointer-ref-c-uint64 . A309c) (pointer-ref-c-uint32 . A309b) (pointer-ref-c-uint16 . A309a) (pointer-ref-c-uint8 . A3099) (pointer-set-c-uint64! . A3098) (pointer-set-c-uint32! . A3097) (pointer-set-c-uint16! . A3096) (pointer-set-c-uint8! . A3095) (pointer-set-c-int64! . A3094) (pointer-set-c-int32! . A3093) (pointer-set-c-int16! . A3092) (pointer-set-c-int8! . A3091) (pointer-set-c-pointer! . A3090) (pointer-set-c-double! . A308f) (pointer-set-c-float! . A308e) (pointer-set-c-long-long! . A308d) (pointer-set-c-long! . A308c) (pointer-set-c-int! . A308b) (pointer-set-c-short! . A308a) (pointer-set-c-char! . A3089) (pointer-ref-c-pointer . A3088) (pointer-ref-c-double . A3087) (pointer-ref-c-float . A3086) (pointer-ref-c-unsigned-long-long . A3085) (pointer-ref-c-signed-long-long . A3084) (pointer-ref-c-unsigned-long . A3083) (pointer-ref-c-signed-long . A3082) (pointer-ref-c-unsigned-int . A3081) (pointer-ref-c-signed-int . A3080) (pointer-ref-c-unsigned-short . A307f) (pointer-ref-c-signed-short . A307e) (pointer-ref-c-unsigned-char . A307d) (pointer-ref-c-signed-char . A307c) (pointer->integer . A307b) (integer->pointer . A307a) (pointer? . A3079) (shared-errno . A3078) (%ffi-supported? . A3077) (%ffi-pointer->string . A3076) (%ffi-call->string-or-zero . A3075) (%ffi-call->double . A3074) (%ffi-call->void* . A3073) (%ffi-call->void . A3072) (%ffi-call->char . A3071) (%ffi-call->int . A3070) (%ffi-lookup . A306f) (%ffi-open . A306e) (%fork . A306d) (%pipe . A306c) (p . A306b) (open-output-string . A306a) (get-output-string . A3069) (file-stat-ctime . A3068) (file-stat-atime . A3067) (file-stat-mtime . A3066) (file-size-in-bytes . A3065) (file-writable? . A3064) (file-executable? . A3063) (file-readable? . A3062) (file-regular? . A3061) (file-symbolic-link? . A3060) (file-directory? . A305f) (create-symbolic-link . A305e) (rename-file . A305d) (delete-directory . A305c) (create-directory . A305b) (create-mosh-cache-dir . A305a) (get-environment-variables . A3059) (get-environment-variable . A3058) (join-wraps . A3057) (id->real-label . A3056) (same-marks? . A3055) (same-marks*? . A3054) (get-timeofday . A3053) (get-command-line . A3052) (sys-display . A3051) (whereis . A3050) (register . A304f) (vm-join! . A304e) (vm-set-value! . A304d) (vm? . A304c) (main-vm? . A304b) (vm-eval . A304a) (vm-self . A3049) (vm-start! . A3048) (make-vm . A3047) (mutex-try-lock! . A3046) (mutex-unlock! . A3045) (mutex-lock! . A3044) (mutex? . A3043) (make-mutex . A3042) (condition-variable-notify-all! . A3041) (condition-variable-notify! . A3040) (condition-variable-wait! . A303f) (make-condition-variable . A303e) (mosh-executable-path . A303d) (make-file-options . A303c) (source-info . A303b) (make-compiler-instruction . A303a) (make-instruction . A3039) (set-source-info! . A3038) (bignum? . A3037) (fast-equal? . A3036) (fasl-read . A3035) (fasl-write . A3034) (time-usage . A3033) (os-constant . A3032) (make-parameter . A597) (socket-port . A3031) (socket-shutdown . A3030) (socket-close . A302f) (socket-send . A302e) (socket-recv! . A302d) (socket-recv . A302c) (make-server-socket . A302b) (make-client-socket . A302a) (socket-accept . A3029) (socket? . A3028) (string-upcase . A3027) (string-titlecase . A3026) (string-normalize-nfkd . A3025) (string-normalize-nfkc . A3024) (string-normalize-nfd . A3023) (string-normalize-nfc . A3022) (string-foldcase . A3021) (string-downcase . A3020) (string-ci>? . A301f) (string-ci>=? . A301e) (string-ci=? . A301d) (string-ci<? . A301c) (string-ci<=? . A301b) (char-whitespace? . A301a) (char-upper-case? . A3019) (char-title-case? . A3018) (char-numeric? . A3017) (char-lower-case? . A3016) (char-general-category . A3015) (char-upcase . A3014) (char-titlecase . A3013) (char-foldcase . A3012) (char-downcase . A3011) (char-ci>? . A3010) (char-ci>=? . A300f) (char-ci=? . A300e) (char-ci<? . A300d) (char-ci<=? . A300c) (char-alphabetic? . A300b) (make-variable-transformer . Ab8b) (identifier? . Ae40) (generate-temporaries . Ae2c) (free-identifier=? . Ae2e) (syntax->datum . Ae44) (datum->syntax . Ae42) (bound-identifier=? . Ae30) (record-type-descriptor? . A300a) (record-predicate . A3009) (record-mutator . A3008) (record-constructor . A3007) (record-accessor . A3006) (make-record-type-descriptor . A3005) (make-record-constructor-descriptor . A3004) (record? . A3003) (record-type-uid . A3002) (record-type-sealed? . A3001) (record-type-parent . A3000) (record-type-opaque? . A2fff) (record-type-name . A2ffe) (record-type-generative? . A2ffd) (record-type-field-names . A2ffc) (record-rtd . A2ffb) (record-field-mutable? . A2ffa) (delete-file . A2ff9) (file-exists? . A2ff8) (vector-sort! . A2ff7) (vector-sort . A2ff6) (list-sort . A2ff5) (symbol-hash . A2ff4) (string-ci-hash . A2ff3) (string-hash . A2ff2) (equal-hash . A2ff1) (hashtable-equivalence-function . A2ff0) (make-hashtable . A2fef) (hashtable-hash-function . A2fee) (make-eqv-hashtable . A2fed) (make-eq-hashtable . A2fec) (hashtable? . A2feb) (hashtable-update! . A2fea) (hashtable-size . A2fe9) (hashtable-set! . A2fe8) (hashtable-ref . A2fe7) (hashtable-mutable? . A2fe6) (hashtable-keys . A2fe5) (hashtable-entries . A2fe4) (hashtable-delete! . A2fe3) (hashtable-copy . A2fe2) (hashtable-contains? . A2fe1) (hashtable-clear! . A2fe0) (call-with-output-file . A2fdf) (call-with-input-file . A2fde) (write-char . A2fdd) (write . A2fdc) (with-output-to-file . A2fdb) (with-input-from-file . A2fda) (read-char . A2fd9) (read . A2fd8) (peek-char . A2fd7) (open-output-file . A2fd6) (open-input-file . A2fd5) (newline . A2fd4) (display . A2fd3) (close-output-port . A2fd2) (close-input-port . A2fd1) (eof-object? . A2fd0) (eof-object . A2fcf) (current-error-port . A2fce) (current-output-port . A2fcd) (current-input-port . A2fcc) (output-port? . A2fcb) (input-port? . A2fca) (utf-8-codec . A2fc9) (utf-16-codec . A2fc8) (transcoder-error-handling-mode . A2fc7) (transcoder-eol-style . A2fc6) (transcoder-codec . A2fc5) (transcoded-port . A2fc4) (textual-port? . A2fc3) (string->bytevector . A2fc2) (standard-output-port . A2fc1) (standard-input-port . A2fc0) (standard-error-port . A2fbf) (set-port-position! . A2fbe) (put-u8 . A2fbd) (put-string . A2fbc) (put-datum . A2fbb) (put-char . A2fba) (put-bytevector . A2fb9) (port? . A2fb8) (port-transcoder . A2fb7) (port-position . A2fb6) (port-has-set-port-position!? . A2fb5) (port-has-port-position? . A2fb4) (port-eof? . A2fb3) (output-port-buffer-mode . A2fb2) (open-string-output-port . A2fb1) (open-string-input-port . A2fb0) (open-file-output-port . A2faf) (open-file-input/output-port . A2fae) (open-file-input-port . A2fad) (open-bytevector-output-port . A2fac) (open-bytevector-input-port . A2fab) (native-transcoder . A2faa) (native-eol-style . A2fa9) (make-transcoder . A2fa8) (latin-1-codec . A2fa7) (make-i/o-write-error . A2a22) (make-i/o-read-error . A2a0d) (make-i/o-port-error . A2ac3) (make-i/o-invalid-position-error . A2a39) (make-i/o-filename-error . A2a54) (make-i/o-file-protection-error . A2a6d) (make-i/o-file-is-read-only-error . A2a82) (make-i/o-file-does-not-exist-error . A2aac) (make-i/o-file-already-exists-error . A2a97) (make-i/o-error . A29f8) (make-i/o-encoding-error . A2af3) (make-i/o-decoding-error . A2adc) (make-custom-textual-output-port . A2fa6) (make-custom-textual-input/output-port . A2fa5) (make-custom-textual-input-port . A2fa4) (make-custom-binary-output-port . A2fa3) (make-custom-binary-input/output-port . A2fa2) (make-custom-binary-input-port . A2fa1) (make-bytevector . A2fa0) (lookahead-u8 . A2f9f) (lookahead-char . A2f9e) (i/o-write-error? . A2a24) (i/o-read-error? . A2a0f) (i/o-port-error? . A2ac7) (i/o-invalid-position-error? . A2a3d) (i/o-filename-error? . A2a58) (i/o-file-protection-error? . A2a6f) (i/o-file-is-read-only-error? . A2a84) (i/o-file-does-not-exist-error? . A2aae) (i/o-file-already-exists-error? . A2a99) (i/o-error? . A29fa) (i/o-error-position . A2a3f) (i/o-error-port . A2ac9) (i/o-error-filename . A2a5a) (i/o-encoding-error? . A2af7) (i/o-encoding-error-char . A2af9) (i/o-decoding-error? . A2ade) (get-u8 . A2f9d) (get-string-n! . A2f9c) (get-string-n . A2f9b) (get-string-all . A2f9a) (get-line . A2f99) (get-datum . A2f98) (get-char . A2f97) (get-bytevector-some . A2f96) (get-bytevector-n! . A2f95) (get-bytevector-n . A2f94) (get-bytevector-all . A2f93) (flush-output-port . A2f92) (close-port . A2f91) (scheme-report-environment . Ae1a) (quotient . A2f90) (null-environment . Ae18) (remainder . A2f8f) (modulo . A2f8e) (inexact->exact . A2f8d) (force . A2f8c) (exact->inexact . A2f8b) (make-promise . A2f8a) (exit . A2f89) (command-line . A2c2e) (string-fill! . A2f88) (string-set! . A2f87) (set-cdr! . A2f86) (set-car! . A2f85) (remove . A2f84) (remv . A2f83) (remp . A2f82) (remq . A2f81) (partition . A2f80) (memv . A2f7f) (memq . A2f7e) (memp . A2f7d) (member . A2f7c) (exists . A2f7b) (for-all . A2f7a) (fold-right . A2f79) (fold-left . A2f78) (find . A2f77) (filter . A2f76) (cons* . A2f75) (assv . A2f74) (assq . A2f73) (assp . A2f72) (assoc . A2f71) (call-with-string-output-port . A2f70) (call-with-port . A2f6f) (call-with-bytevector-output-port . A2f6e) (bytevector->string . A2f6d) (buffer-mode? . A2f6c) (binary-port? . A2f6b) (with-exception-handler . A2f6a) (raise-continuable . A2f69) (raise . A2f68) (eval . Ae1e) (environment . Ae16) (make-enumeration . A2f67) (enum-set=? . A2f66) (enum-set-universe . A2f65) (enum-set-union . A2f64) (enum-set-subset? . A2f63) (enum-set-projection . A2f62) (enum-set-member? . A2f61) (enum-set-intersection . A2f60) (enum-set-indexer . A2f5f) (enum-set-difference . A2f5e) (enum-set-constructor . A2f5d) (enum-set-complement . A2f5c) (enum-set->list . A2f5b) (who-condition? . A296e) (warning? . A28e6) (violation? . A2925) (undefined-violation? . A29e5) (syntax-violation? . A29cc) (syntax-violation-subform . A29d0) (syntax-violation-form . A29ce) (syntax-violation . Ae3e) (simple-conditions . A2f5a) (serious-condition? . A28fb) (non-continuable-violation? . A2985) (message-condition? . A28cf) (make-who-condition . A296a) (make-warning . A28e4) (make-violation . A2923) (make-undefined-violation . A29e3) (make-syntax-violation . A29c6) (make-serious-condition . A28f9) (make-non-continuable-violation . A2983) (make-message-condition . A28cb) (make-lexical-violation . A29ad) (make-irritants-condition . A294f) (make-implementation-restriction-violation . A2998) (make-error . A290e) (make-assertion-violation . A2938) (lexical-violation? . A29af) (irritants-condition? . A2953) (implementation-restriction-violation? . A299a) (error? . A2910) (condition-who . A2970) (condition-predicate . A2f59) (condition-message . A28d1) (condition-irritants . A2955) (condition-accessor . A2f58) (condition . A2f57) (assertion-violation? . A293a) (condition? . A2f56) (utf32->string . A2f55) (utf16->string . A2f54) (utf8->string . A2f53) (uint-list->bytevector . A2f52) (u8-list->bytevector . A2f51) (string->utf8 . A2f50) (string->utf32 . A2f4f) (string->utf16 . A2f4e) (sint-list->bytevector . A2f4d) (native-endianness . A2f4c) (bytevector? . A2f4b) (bytevector=? . A2f4a) (bytevector-uint-set! . A2f49) (bytevector-uint-ref . A2f48) (bytevector-u8-set! . A2f47) (bytevector-u8-ref . A2f46) (bytevector-u64-set! . A2f45) (bytevector-u64-ref . A2f44) (bytevector-u64-native-set! . A2f43) (bytevector-u64-native-ref . A2f42) (bytevector-u32-set! . A2f41) (bytevector-u32-ref . A2f40) (bytevector-u32-native-set! . A2f3f) (bytevector-u32-native-ref . A2f3e) (bytevector-u16-set! . A2f3d) (bytevector-u16-ref . A2f3c) (bytevector-u16-native-set! . A2f3b) (bytevector-u16-native-ref . A2f3a) (bytevector-sint-set! . A2f39) (bytevector-sint-ref . A2f38) (bytevector-s8-set! . A2f37) (bytevector-s8-ref . A2f36) (bytevector-s64-set! . A2f35) (bytevector-s64-ref . A2f34) (bytevector-s64-native-set! . A2f33) (bytevector-s64-native-ref . A2f32) (bytevector-s32-set! . A2f31) (bytevector-s32-ref . A2f30) (bytevector-s32-native-set! . A2f2f) (bytevector-s32-native-ref . A2f2e) (bytevector-s16-set! . A2f2d) (bytevector-s16-ref . A2f2c) (bytevector-s16-native-set! . A2f2b) (bytevector-s16-native-ref . A2f2a) (bytevector-length . A2f29) (bytevector-ieee-single-ref . A2f28) (bytevector-ieee-single-set! . A2f27) (bytevector-ieee-single-native-set! . A2f26) (bytevector-ieee-single-native-ref . A2f25) (bytevector-ieee-double-set! . A2f24) (bytevector-ieee-double-ref . A2f23) (bytevector-ieee-double-native-set! . A2f22) (bytevector-ieee-double-native-ref . A2f21) (bytevector-fill! . A2f20) (bytevector-copy! . A2f1f) (bytevector-copy . A2f1e) (bytevector->uint-list . A2f1d) (bytevector->u8-list . A2f1c) (bytevector->sint-list . A2f1b) (no-nans-violation? . A2b23) (no-infinities-violation? . A2b0e) (make-no-nans-violation . A2b21) (make-no-infinities-violation . A2b0c) (real->flonum . A2f1a) (flzero? . A2f19) (fltruncate . A2f18) (fltan . A2f17) (flsqrt . A2f16) (flsin . A2f15) (flround . A2f14) (flpositive? . A2f13) (flonum? . A2f12) (flodd? . A2f11) (flnumerator . A2f10) (flnegative? . A2f0f) (flnan? . A2f0e) (flmod0 . A2f0d) (flmod . A2f0c) (flmin . A2f0b) (flmax . A2f0a) (fllog . A2f09) (flinteger? . A2f08) (flinfinite? . A2f07) (flfloor . A2f06) (flfinite? . A2f05) (flexpt . A2f04) (flexp . A2f03) (fleven? . A2f02) (fldiv0-and-mod0 . A2f01) (fldiv0 . A2f00) (fldiv-and-mod . A2eff) (fldiv . A2efe) (fldenominator . A2efd) (flcos . A2efc) (flceiling . A2efb) (flatan . A2efa) (flasin . A2ef9) (flacos . A2ef8) (flabs . A2ef7) (fl>? . A2ef6) (fl>=? . A2ef5) (fl=? . A2ef4) (fl<? . A2ef3) (fl<=? . A2ef2) (fl/ . A2ef1) (fl- . A2ef0) (fl+ . A2eef) (fl* . A2eee) (fixnum->flonum . A2eed) (fxzero? . A2eec) (fxxor . A2eeb) (fxrotate-bit-field . A2eea) (fxreverse-bit-field . A2ee9) (fxpositive? . A2ee8) (fxodd? . A2ee7) (fxnot . A2ee6) (fxnegative? . A2ee5) (fxmod0 . A2ee4) (fxmod . A2ee3) (fxmin . A2ee2) (fxmax . A2ee1) (fxlength . A2ee0) (fxior . A2edf) (fxif . A2ede) (fxfirst-bit-set . A2edd) (fxeven? . A2edc) (fxdiv0-and-mod0 . A2edb) (fxdiv0 . A2eda) (fxdiv-and-mod . A2ed9) (fxdiv . A2ed8) (fxcopy-bit-field . A2ed7) (fxcopy-bit . A2ed6) (fxbit-set? . A2ed5) (fxbit-field . A2ed4) (fxbit-count . A2ed3) (fxarithmetic-shift-right . A2ed2) (fxarithmetic-shift-left . A2ed1) (fxarithmetic-shift . A2ed0) (fxand . A2ecf) (fx>? . A2ece) (fx>=? . A2ecd) (fx=? . A2ecc) (fx<? . A2ecb) (fx<=? . A2eca) (fx-/carry . A2ec9) (fx- . A2ec8) (fx+/carry . A2ec7) (fx+ . A2ec6) (fx*/carry . A2ec5) (fx* . A2ec4) (greatest-fixnum . A2ec3) (least-fixnum . A2ec2) (fixnum-width . A2ec1) (fixnum? . A2ec0) (bitwise-rotate-bit-field . A2ebf) (bitwise-reverse-bit-field . A2ebe) (bitwise-length . A2ebd) (bitwise-if . A2ebc) (bitwise-first-bit-set . A2ebb) (bitwise-copy-bit-field . A2eba) (bitwise-copy-bit . A2eb9) (bitwise-bit-set? . A2eb8) (bitwise-bit-field . A2eb7) (bitwise-bit-count . A2eb6) (bitwise-xor . A2eb5) (bitwise-ior . A2eb4) (bitwise-and . A2eb3) (bitwise-not . A2eb2) (bitwise-arithmetic-shift-right . A2eb1) (bitwise-arithmetic-shift-left . A2eb0) (bitwise-arithmetic-shift . A2eaf) (zero? . A2eae) (vector? . A2ead) (vector-set! . A2eac) (vector-ref . A2eab) (vector-map . A2eaa) (vector-length . A2ea9) (vector-for-each . A2ea8) (vector-fill! . A2ea7) (vector->list . A2ea6) (vector . A2ea5) (values . A2ea4) (truncate . A2ea3) (tan . A2ea2) (symbol? . A2ea1) (symbol=? . A2ea0) (symbol->string . A2e9f) (substring . A2e9e) (string? . A2e9d) (string>? . A2e9c) (string>=? . A2e9b) (string=? . A2e9a) (string<? . A2e99) (string<=? . A2e98) (string-ref . A2e97) (string-length . A2e96) (string-for-each . A2e95) (string-copy . A2e94) (string-append . A2e93) (string->symbol . A2e92) (string->number . A2e91) (string->list . A2e90) (string . A2e8f) (sqrt . A2e8e) (sin . A2e8d) (round . A2e8c) (reverse . A2e8b) (real? . A2e8a) (real-valued? . A2e89) (real-part . A2e88) (rationalize . A2e87) (rational? . A2e86) (rational-valued? . A2e85) (procedure? . A2e84) (positive? . A2e83) (pair? . A2e82) (odd? . A2e81) (numerator . A2e80) (number? . A2e7f) (number->string . A2e7e) (null? . A2e7d) (not . A2e7c) (negative? . A2e7b) (nan? . A2e7a) (min . A2e79) (max . A2e78) (map . A2e77) (make-vector . A2e76) (make-string . A2e75) (make-rectangular . A2e74) (make-polar . A2e73) (magnitude . A2e72) (log . A2e71) (list? . A2e70) (list-tail . A2e6f) (list-ref . A2e6e) (list->vector . A2e6d) (list->string . A2e6c) (list . A2e6b) (length . A2e6a) (lcm . A2e69) (integer? . A2e68) (integer-valued? . A2e67) (integer->char . A2e66) (infinite? . A2e65) (inexact? . A2e64) (inexact . A2e63) (imag-part . A2e62) (gcd . A2e61) (for-each . A2e60) (floor . A2e5f) (finite? . A2e5e) (expt . A2e5d) (exp . A2e5c) (exact? . A2e5b) (exact-integer-sqrt . A2e5a) (exact . A2e59) (even? . A2e58) (error . A2e57) (eqv? . A2e56) (equal? . A2e55) (eq? . A2e54) (dynamic-wind . A2e53) (div0-and-mod0 . A2e52) (mod0 . A2e51) (div0 . A2e50) (div-and-mod . A2e4f) (mod . A2e4e) (div . A2e4d) (denominator . A2e4c) (cos . A2e4b) (cons . A2e4a) (complex? . A2e49) (char? . A2e48) (char>? . A2e47) (char>=? . A2e46) (char=? . A2e45) (char<? . A2e44) (char<=? . A2e43) (char->integer . A2e42) (ceiling . A2e41) (call-with-values . A2e40) (call/cc . A2e3f) (call-with-current-continuation . A2e3e) (cddddr . A2e3d) (cdddar . A2e3c) (cddadr . A2e3b) (cddaar . A2e3a) (cdaddr . A2e39) (cdadar . A2e38) (cdaadr . A2e37) (cdaaar . A2e36) (cadddr . A2e35) (caddar . A2e34) (cadadr . A2e33) (cadaar . A2e32) (caaddr . A2e31) (caadar . A2e30) (caaadr . A2e2f) (caaaar . A2e2e) (cdddr . A2e2d) (cddar . A2e2c) (cdadr . A2e2b) (cdaar . A2e2a) (caddr . A2e29) (cadar . A2e28) (caadr . A2e27) (caaar . A2e26) (cddr . A2e25) (cdar . A2e24) (cadr . A2e23) (caar . A2e22) (cdr . A2e21) (car . A2e20) (boolean? . A2e1f) (boolean=? . A2e1e) (atan . A2e1d) (assertion-violation . A2e1c) (assertion-error . Ae38) (asin . A2e1b) (apply . A2e1a) (append . A2e19) (angle . A2e18) (acos . A2e17) (abs . A2e16) (/ . A2e15) (* . A2e14) (- . A2e13) (+ . A2e12) (>= . A2e11) (> . A2e10) (= . A2e0f) (<= . A2e0e) (< . A2e0d) (library . A2e0c) (&no-nans . A2e0b) (&no-infinities . A2e0a) (&i/o-encoding . A2e09) (&i/o-decoding . A2e08) (&i/o-port . A2e07) (&i/o-file-does-not-exist . A2e06) (&i/o-file-already-exists . A2e05) (&i/o-file-is-read-only . A2e04) (&i/o-file-protection . A2e03) (&i/o-filename . A2e02) (&i/o-invalid-position . A2e01) (&i/o-write . A2e00) (&i/o-read . A2dff) (&i/o . A2dfe) (&undefined . A2dfd) (&syntax . A2dfc) (&lexical . A2dfb) (&implementation-restriction . A2dfa) (&non-continuable . A2df9) (&who . A2df8) (&irritants . A2df7) (&assertion . A2df6) (&violation . A2df5) (&error . A2df4) (&serious . A2df3) (&warning . A2df2) (&message . A2df1) (&condition . A2df0) (define-condition-type . A2def) (define-enumeration . A2dee) (define-record-type . A2ded) (parent-rtd . A2dec) (nongenerative . A2deb) (opaque . A2dea) (sealed . A2de9) (protocol . A2de8) (parent . A2de7) (immutable . A2de6) (mutable . A2de5) (fields . A2de4) (error-handling-mode . A2de3) (file-options . A2de2) (buffer-mode . A2de1) (eol-style . A2de0) (guard . A2ddf) (trace-define . A2dde) (trace-lambda . A2ddd) (unsyntax-splicing . A2ddc) (unsyntax . A2ddb) (unquote-splicing . A2dda) (unquote . A2dd9) (_ . A2dd8) (else . A2dd7) (=> . A2dd6) (... . A2dd5) (assert . A2dd4) (endianness . A2dd3) (delay . A2dd2) (time . A2dd1) (do . A2dd0) (cond . A2dcf) (let* . A2dce) (let . A2dcd) (let*-values . A2dcc) (let-values . A2dcb) (identifier-syntax . A2dca) (with-syntax . A2dc9) (quasisyntax . A2dc8) (quasiquote . A2dc7) (syntax-rules . A2dc6) (include . A2dc5) (define-struct . A2dc4) (record-constructor-descriptor . A2dc3) (record-type-descriptor . A2dc2) (case . A2dc1) (parameterize . A2dc0) (unless . A2dbf) (when . A2dbe) (or . A2dbd) (and . A2dbc) (if . A2dbb) (letrec* . A2dba) (letrec . A2db9) (type-descriptor . A2db8) (case-lambda . A2db7) (lambda . A2db6) (syntax . A2db5) (syntax-case . A2db4) (quote . A2db3) (foreign-call . A2db2) (letrec-syntax . A2db1) (let-syntax . A2db0) (set! . A2daf) (import . A2dae) (begin . A2dad) (module . A2dac) (define-syntax . A2dab) (define . A2daa)) '((A2b27 core-prim . &no-nans-rcd) (A2b25 core-prim . &no-nans-rtd) (A2b12 core-prim . &no-infinities-rcd) (A2b10 core-prim . &no-infinities-rtd) (A2afd core-prim . &i/o-encoding-rcd) (A2afb core-prim . &i/o-encoding-rtd) (A2ae2 core-prim . &i/o-decoding-rcd) (A2ae0 core-prim . &i/o-decoding-rtd) (A2acd core-prim . &i/o-port-rcd) (A2acb core-prim . &i/o-port-rtd) (A2ab2 core-prim . &i/o-file-does-not-exist-rcd) (A2ab0 core-prim . &i/o-file-does-not-exist-rtd) (A2a9d core-prim . &i/o-file-already-exists-rcd) (A2a9b core-prim . &i/o-file-already-exists-rtd) (A2a88 core-prim . &i/o-file-is-read-only-rcd) (A2a86 core-prim . &i/o-file-is-read-only-rtd) (A2a73 core-prim . &i/o-file-protection-rcd) (A2a71 core-prim . &i/o-file-protection-rtd) (A2a5e core-prim . &i/o-filename-rcd) (A2a5c core-prim . &i/o-filename-rtd) (A2a43 core-prim . &i/o-invalid-position-rcd) (A2a41 core-prim . &i/o-invalid-position-rtd) (A2a28 core-prim . &i/o-write-rcd) (A2a26 core-prim . &i/o-write-rtd) (A2a13 core-prim . &i/o-read-rcd) (A2a11 core-prim . &i/o-read-rtd) (A29fe core-prim . &i/o-rcd) (A29fc core-prim . &i/o-rtd) (A29e9 core-prim . &undefined-rcd) (A29e7 core-prim . &undefined-rtd) (A29d4 core-prim . &syntax-rcd) (A29d2 core-prim . &syntax-rtd) (A29b3 core-prim . &lexical-rcd) (A29b1 core-prim . &lexical-rtd) (A299e core-prim . &implementation-restriction-rcd) (A299c core-prim . &implementation-restriction-rtd) (A2989 core-prim . &non-continuable-rcd) (A2987 core-prim . &non-continuable-rtd) (A2974 core-prim . &who-rcd) (A2972 core-prim . &who-rtd) (A2959 core-prim . &irritants-rcd) (A2957 core-prim . &irritants-rtd) (A293e core-prim . &assertion-rcd) (A293c core-prim . &assertion-rtd) (A2929 core-prim . &violation-rcd) (A2927 core-prim . &violation-rtd) (A2914 core-prim . &error-rcd) (A2912 core-prim . &error-rtd) (A28ff core-prim . &serious-rcd) (A28fd core-prim . &serious-rtd) (A28ea core-prim . &warning-rcd) (A28e8 core-prim . &warning-rtd) (A28d5 core-prim . &message-rcd) (A28d3 core-prim . &message-rtd) (A2876 core-prim . &condition-rcd) (A2874 core-prim . &condition-rtd) (Ae3a core-prim . syntax-error) (Ad5e core-prim . syntax-dispatch) (A30cd core-prim . pretty-print) (A30cc core-prim . eval-core) (A30cb core-prim . set-symbol-value!) (A30ca core-prim . symbol-value) (A30c9 core-prim . gensym) (A30c8 core-prim . void) (A2c34 core-prim . load) (Ae4a core-prim . interaction-environment) (A30c7 core-prim . char-ready?) (A30c6 core-prim . regexp?) (A30c5 core-prim . read-line) (A30c4 core-prim . gensym-prefix-set!) (A30c3 core-prim . ungensym) (A30c2 core-prim . alist->eq-hash-table) (A30c1 core-prim . assoc-ref) (A30c0 core-prim . print) (A30bf core-prim . format) (A30be core-prim . host-os) (A7ae core-prim . library-path) (A30bd core-prim . standard-library-path) (A30bc core-prim . file-newer?) (A30bb core-prim . stat-mtime) (A30ba core-prim . write-to-file) (A30b9 core-prim . file->list) (A30b8 core-prim . file->string) (A30b7 core-prim . digit->integer) (A30b6 core-prim . call-with-string-input-port) (A30b5 core-prim . call-with-string-io) (A30b4 core-prim . string-split) (A30b3 core-prim . bytevector-for-each) (A30b2 core-prim . string->regexp) (A30b1 core-prim . rxmatch) (A30b0 core-prim . regexp-replace-all) (A30af core-prim . hashtable-for-each) (A599 core-prim . mosh-cache-dir) (A30ae core-prim . call-process) (A30ad core-prim . local-tz-offset) (A30ac core-prim . microseconds) (A30ab core-prim . directory-list) (A30aa core-prim . set-current-directory!) (A30a9 core-prim . expand-path) (A30a8 core-prim . current-directory) (A30a7 core-prim . %spawn) (A30a6 core-prim . %waitpid) (A30a5 core-prim . simple-struct-name) (A30a4 core-prim . simple-struct-set!) (A30a3 core-prim . simple-struct-ref) (A30a2 core-prim . make-simple-struct) (A30a1 core-prim . simple-struct?) (A30a0 core-prim . pointer-ref-c-int64) (A309f core-prim . pointer-ref-c-int32) (A309e core-prim . pointer-ref-c-int16) (A309d core-prim . pointer-ref-c-int8) (A309c core-prim . pointer-ref-c-uint64) (A309b core-prim . pointer-ref-c-uint32) (A309a core-prim . pointer-ref-c-uint16) (A3099 core-prim . pointer-ref-c-uint8) (A3098 core-prim . pointer-set-c-uint64!) (A3097 core-prim . pointer-set-c-uint32!) (A3096 core-prim . pointer-set-c-uint16!) (A3095 core-prim . pointer-set-c-uint8!) (A3094 core-prim . pointer-set-c-int64!) (A3093 core-prim . pointer-set-c-int32!) (A3092 core-prim . pointer-set-c-int16!) (A3091 core-prim . pointer-set-c-int8!) (A3090 core-prim . pointer-set-c-pointer!) (A308f core-prim . pointer-set-c-double!) (A308e core-prim . pointer-set-c-float!) (A308d core-prim . pointer-set-c-long-long!) (A308c core-prim . pointer-set-c-long!) (A308b core-prim . pointer-set-c-int!) (A308a core-prim . pointer-set-c-short!) (A3089 core-prim . pointer-set-c-char!) (A3088 core-prim . pointer-ref-c-pointer) (A3087 core-prim . pointer-ref-c-double) (A3086 core-prim . pointer-ref-c-float) (A3085 core-prim . pointer-ref-c-unsigned-long-long) (A3084 core-prim . pointer-ref-c-signed-long-long) (A3083 core-prim . pointer-ref-c-unsigned-long) (A3082 core-prim . pointer-ref-c-signed-long) (A3081 core-prim . pointer-ref-c-unsigned-int) (A3080 core-prim . pointer-ref-c-signed-int) (A307f core-prim . pointer-ref-c-unsigned-short) (A307e core-prim . pointer-ref-c-signed-short) (A307d core-prim . pointer-ref-c-unsigned-char) (A307c core-prim . pointer-ref-c-signed-char) (A307b core-prim . pointer->integer) (A307a core-prim . integer->pointer) (A3079 core-prim . pointer?) (A3078 core-prim . shared-errno) (A3077 core-prim . %ffi-supported?) (A3076 core-prim . %ffi-pointer->string) (A3075 core-prim . %ffi-call->string-or-zero) (A3074 core-prim . %ffi-call->double) (A3073 core-prim . %ffi-call->void*) (A3072 core-prim . %ffi-call->void) (A3071 core-prim . %ffi-call->char) (A3070 core-prim . %ffi-call->int) (A306f core-prim . %ffi-lookup) (A306e core-prim . %ffi-open) (A306d core-prim . %fork) (A306c core-prim . %pipe) (A306b core-prim . p) (A306a core-prim . open-output-string) (A3069 core-prim . get-output-string) (A3068 core-prim . file-stat-ctime) (A3067 core-prim . file-stat-atime) (A3066 core-prim . file-stat-mtime) (A3065 core-prim . file-size-in-bytes) (A3064 core-prim . file-writable?) (A3063 core-prim . file-executable?) (A3062 core-prim . file-readable?) (A3061 core-prim . file-regular?) (A3060 core-prim . file-symbolic-link?) (A305f core-prim . file-directory?) (A305e core-prim . create-symbolic-link) (A305d core-prim . rename-file) (A305c core-prim . delete-directory) (A305b core-prim . create-directory) (A305a core-prim . create-mosh-cache-dir) (A3059 core-prim . get-environment-variables) (A3058 core-prim . get-environment-variable) (A3057 core-prim . join-wraps) (A3056 core-prim . id->real-label) (A3055 core-prim . same-marks?) (A3054 core-prim . same-marks*?) (A3053 core-prim . get-timeofday) (A3052 core-prim . get-command-line) (A3051 core-prim . sys-display) (A3050 core-prim . whereis) (A304f core-prim . register) (A304e core-prim . vm-join!) (A304d core-prim . vm-set-value!) (A304c core-prim . vm?) (A304b core-prim . main-vm?) (A304a core-prim . vm-eval) (A3049 core-prim . vm-self) (A3048 core-prim . vm-start!) (A3047 core-prim . make-vm) (A3046 core-prim . mutex-try-lock!) (A3045 core-prim . mutex-unlock!) (A3044 core-prim . mutex-lock!) (A3043 core-prim . mutex?) (A3042 core-prim . make-mutex) (A3041 core-prim . condition-variable-notify-all!) (A3040 core-prim . condition-variable-notify!) (A303f core-prim . condition-variable-wait!) (A303e core-prim . make-condition-variable) (A303d core-prim . mosh-executable-path) (A303c core-prim . make-file-options) (A303b core-prim . source-info) (A303a core-prim . make-compiler-instruction) (A3039 core-prim . make-instruction) (A3038 core-prim . set-source-info!) (A3037 core-prim . bignum?) (A3036 core-prim . fast-equal?) (A3035 core-prim . fasl-read) (A3034 core-prim . fasl-write) (A3033 core-prim . time-usage) (A3032 core-prim . os-constant) (A597 core-prim . make-parameter) (A3031 core-prim . socket-port) (A3030 core-prim . socket-shutdown) (A302f core-prim . socket-close) (A302e core-prim . socket-send) (A302d core-prim . socket-recv!) (A302c core-prim . socket-recv) (A302b core-prim . make-server-socket) (A302a core-prim . make-client-socket) (A3029 core-prim . socket-accept) (A3028 core-prim . socket?) (A3027 core-prim . string-upcase) (A3026 core-prim . string-titlecase) (A3025 core-prim . string-normalize-nfkd) (A3024 core-prim . string-normalize-nfkc) (A3023 core-prim . string-normalize-nfd) (A3022 core-prim . string-normalize-nfc) (A3021 core-prim . string-foldcase) (A3020 core-prim . string-downcase) (A301f core-prim . string-ci>?) (A301e core-prim . string-ci>=?) (A301d core-prim . string-ci=?) (A301c core-prim . string-ci<?) (A301b core-prim . string-ci<=?) (A301a core-prim . char-whitespace?) (A3019 core-prim . char-upper-case?) (A3018 core-prim . char-title-case?) (A3017 core-prim . char-numeric?) (A3016 core-prim . char-lower-case?) (A3015 core-prim . char-general-category) (A3014 core-prim . char-upcase) (A3013 core-prim . char-titlecase) (A3012 core-prim . char-foldcase) (A3011 core-prim . char-downcase) (A3010 core-prim . char-ci>?) (A300f core-prim . char-ci>=?) (A300e core-prim . char-ci=?) (A300d core-prim . char-ci<?) (A300c core-prim . char-ci<=?) (A300b core-prim . char-alphabetic?) (Ab8b core-prim . make-variable-transformer) (Ae40 core-prim . identifier?) (Ae2c core-prim . generate-temporaries) (Ae2e core-prim . free-identifier=?) (Ae44 core-prim . syntax->datum) (Ae42 core-prim . datum->syntax) (Ae30 core-prim . bound-identifier=?) (A300a core-prim . record-type-descriptor?) (A3009 core-prim . record-predicate) (A3008 core-prim . record-mutator) (A3007 core-prim . record-constructor) (A3006 core-prim . record-accessor) (A3005 core-prim . make-record-type-descriptor) (A3004 core-prim . make-record-constructor-descriptor) (A3003 core-prim . record?) (A3002 core-prim . record-type-uid) (A3001 core-prim . record-type-sealed?) (A3000 core-prim . record-type-parent) (A2fff core-prim . record-type-opaque?) (A2ffe core-prim . record-type-name) (A2ffd core-prim . record-type-generative?) (A2ffc core-prim . record-type-field-names) (A2ffb core-prim . record-rtd) (A2ffa core-prim . record-field-mutable?) (A2ff9 core-prim . delete-file) (A2ff8 core-prim . file-exists?) (A2ff7 core-prim . vector-sort!) (A2ff6 core-prim . vector-sort) (A2ff5 core-prim . list-sort) (A2ff4 core-prim . symbol-hash) (A2ff3 core-prim . string-ci-hash) (A2ff2 core-prim . string-hash) (A2ff1 core-prim . equal-hash) (A2ff0 core-prim . hashtable-equivalence-function) (A2fef core-prim . make-hashtable) (A2fee core-prim . hashtable-hash-function) (A2fed core-prim . make-eqv-hashtable) (A2fec core-prim . make-eq-hashtable) (A2feb core-prim . hashtable?) (A2fea core-prim . hashtable-update!) (A2fe9 core-prim . hashtable-size) (A2fe8 core-prim . hashtable-set!) (A2fe7 core-prim . hashtable-ref) (A2fe6 core-prim . hashtable-mutable?) (A2fe5 core-prim . hashtable-keys) (A2fe4 core-prim . hashtable-entries) (A2fe3 core-prim . hashtable-delete!) (A2fe2 core-prim . hashtable-copy) (A2fe1 core-prim . hashtable-contains?) (A2fe0 core-prim . hashtable-clear!) (A2fdf core-prim . call-with-output-file) (A2fde core-prim . call-with-input-file) (A2fdd core-prim . write-char) (A2fdc core-prim . write) (A2fdb core-prim . with-output-to-file) (A2fda core-prim . with-input-from-file) (A2fd9 core-prim . read-char) (A2fd8 core-prim . read) (A2fd7 core-prim . peek-char) (A2fd6 core-prim . open-output-file) (A2fd5 core-prim . open-input-file) (A2fd4 core-prim . newline) (A2fd3 core-prim . display) (A2fd2 core-prim . close-output-port) (A2fd1 core-prim . close-input-port) (A2fd0 core-prim . eof-object?) (A2fcf core-prim . eof-object) (A2fce core-prim . current-error-port) (A2fcd core-prim . current-output-port) (A2fcc core-prim . current-input-port) (A2fcb core-prim . output-port?) (A2fca core-prim . input-port?) (A2fc9 core-prim . utf-8-codec) (A2fc8 core-prim . utf-16-codec) (A2fc7 core-prim . transcoder-error-handling-mode) (A2fc6 core-prim . transcoder-eol-style) (A2fc5 core-prim . transcoder-codec) (A2fc4 core-prim . transcoded-port) (A2fc3 core-prim . textual-port?) (A2fc2 core-prim . string->bytevector) (A2fc1 core-prim . standard-output-port) (A2fc0 core-prim . standard-input-port) (A2fbf core-prim . standard-error-port) (A2fbe core-prim . set-port-position!) (A2fbd core-prim . put-u8) (A2fbc core-prim . put-string) (A2fbb core-prim . put-datum) (A2fba core-prim . put-char) (A2fb9 core-prim . put-bytevector) (A2fb8 core-prim . port?) (A2fb7 core-prim . port-transcoder) (A2fb6 core-prim . port-position) (A2fb5 core-prim . port-has-set-port-position!?) (A2fb4 core-prim . port-has-port-position?) (A2fb3 core-prim . port-eof?) (A2fb2 core-prim . output-port-buffer-mode) (A2fb1 core-prim . open-string-output-port) (A2fb0 core-prim . open-string-input-port) (A2faf core-prim . open-file-output-port) (A2fae core-prim . open-file-input/output-port) (A2fad core-prim . open-file-input-port) (A2fac core-prim . open-bytevector-output-port) (A2fab core-prim . open-bytevector-input-port) (A2faa core-prim . native-transcoder) (A2fa9 core-prim . native-eol-style) (A2fa8 core-prim . make-transcoder) (A2fa7 core-prim . latin-1-codec) (A2a22 core-prim . make-i/o-write-error) (A2a0d core-prim . make-i/o-read-error) (A2ac3 core-prim . make-i/o-port-error) (A2a39 core-prim . make-i/o-invalid-position-error) (A2a54 core-prim . make-i/o-filename-error) (A2a6d core-prim . make-i/o-file-protection-error) (A2a82 core-prim . make-i/o-file-is-read-only-error) (A2aac core-prim . make-i/o-file-does-not-exist-error) (A2a97 core-prim . make-i/o-file-already-exists-error) (A29f8 core-prim . make-i/o-error) (A2af3 core-prim . make-i/o-encoding-error) (A2adc core-prim . make-i/o-decoding-error) (A2fa6 core-prim . make-custom-textual-output-port) (A2fa5 core-prim . make-custom-textual-input/output-port) (A2fa4 core-prim . make-custom-textual-input-port) (A2fa3 core-prim . make-custom-binary-output-port) (A2fa2 core-prim . make-custom-binary-input/output-port) (A2fa1 core-prim . make-custom-binary-input-port) (A2fa0 core-prim . make-bytevector) (A2f9f core-prim . lookahead-u8) (A2f9e core-prim . lookahead-char) (A2a24 core-prim . i/o-write-error?) (A2a0f core-prim . i/o-read-error?) (A2ac7 core-prim . i/o-port-error?) (A2a3d core-prim . i/o-invalid-position-error?) (A2a58 core-prim . i/o-filename-error?) (A2a6f core-prim . i/o-file-protection-error?) (A2a84 core-prim . i/o-file-is-read-only-error?) (A2aae core-prim . i/o-file-does-not-exist-error?) (A2a99 core-prim . i/o-file-already-exists-error?) (A29fa core-prim . i/o-error?) (A2a3f core-prim . i/o-error-position) (A2ac9 core-prim . i/o-error-port) (A2a5a core-prim . i/o-error-filename) (A2af7 core-prim . i/o-encoding-error?) (A2af9 core-prim . i/o-encoding-error-char) (A2ade core-prim . i/o-decoding-error?) (A2f9d core-prim . get-u8) (A2f9c core-prim . get-string-n!) (A2f9b core-prim . get-string-n) (A2f9a core-prim . get-string-all) (A2f99 core-prim . get-line) (A2f98 core-prim . get-datum) (A2f97 core-prim . get-char) (A2f96 core-prim . get-bytevector-some) (A2f95 core-prim . get-bytevector-n!) (A2f94 core-prim . get-bytevector-n) (A2f93 core-prim . get-bytevector-all) (A2f92 core-prim . flush-output-port) (A2f91 core-prim . close-port) (Ae1a core-prim . scheme-report-environment) (A2f90 core-prim . quotient) (Ae18 core-prim . null-environment) (A2f8f core-prim . remainder) (A2f8e core-prim . modulo) (A2f8d core-prim . inexact->exact) (A2f8c core-prim . force) (A2f8b core-prim . exact->inexact) (A2f8a core-prim . make-promise) (A2f89 core-prim . exit) (A2c2e core-prim . command-line) (A2f88 core-prim . string-fill!) (A2f87 core-prim . string-set!) (A2f86 core-prim . set-cdr!) (A2f85 core-prim . set-car!) (A2f84 core-prim . remove) (A2f83 core-prim . remv) (A2f82 core-prim . remp) (A2f81 core-prim . remq) (A2f80 core-prim . partition) (A2f7f core-prim . memv) (A2f7e core-prim . memq) (A2f7d core-prim . memp) (A2f7c core-prim . member) (A2f7b core-prim . exists) (A2f7a core-prim . for-all) (A2f79 core-prim . fold-right) (A2f78 core-prim . fold-left) (A2f77 core-prim . find) (A2f76 core-prim . filter) (A2f75 core-prim . cons*) (A2f74 core-prim . assv) (A2f73 core-prim . assq) (A2f72 core-prim . assp) (A2f71 core-prim . assoc) (A2f70 core-prim . call-with-string-output-port) (A2f6f core-prim . call-with-port) (A2f6e core-prim . call-with-bytevector-output-port) (A2f6d core-prim . bytevector->string) (A2f6c core-prim . buffer-mode?) (A2f6b core-prim . binary-port?) (A2f6a core-prim . with-exception-handler) (A2f69 core-prim . raise-continuable) (A2f68 core-prim . raise) (Ae1e core-prim . eval) (Ae16 core-prim . environment) (A2f67 core-prim . make-enumeration) (A2f66 core-prim . enum-set=?) (A2f65 core-prim . enum-set-universe) (A2f64 core-prim . enum-set-union) (A2f63 core-prim . enum-set-subset?) (A2f62 core-prim . enum-set-projection) (A2f61 core-prim . enum-set-member?) (A2f60 core-prim . enum-set-intersection) (A2f5f core-prim . enum-set-indexer) (A2f5e core-prim . enum-set-difference) (A2f5d core-prim . enum-set-constructor) (A2f5c core-prim . enum-set-complement) (A2f5b core-prim . enum-set->list) (A296e core-prim . who-condition?) (A28e6 core-prim . warning?) (A2925 core-prim . violation?) (A29e5 core-prim . undefined-violation?) (A29cc core-prim . syntax-violation?) (A29d0 core-prim . syntax-violation-subform) (A29ce core-prim . syntax-violation-form) (Ae3e core-prim . syntax-violation) (A2f5a core-prim . simple-conditions) (A28fb core-prim . serious-condition?) (A2985 core-prim . non-continuable-violation?) (A28cf core-prim . message-condition?) (A296a core-prim . make-who-condition) (A28e4 core-prim . make-warning) (A2923 core-prim . make-violation) (A29e3 core-prim . make-undefined-violation) (A29c6 core-prim . make-syntax-violation) (A28f9 core-prim . make-serious-condition) (A2983 core-prim . make-non-continuable-violation) (A28cb core-prim . make-message-condition) (A29ad core-prim . make-lexical-violation) (A294f core-prim . make-irritants-condition) (A2998 core-prim . make-implementation-restriction-violation) (A290e core-prim . make-error) (A2938 core-prim . make-assertion-violation) (A29af core-prim . lexical-violation?) (A2953 core-prim . irritants-condition?) (A299a core-prim . implementation-restriction-violation?) (A2910 core-prim . error?) (A2970 core-prim . condition-who) (A2f59 core-prim . condition-predicate) (A28d1 core-prim . condition-message) (A2955 core-prim . condition-irritants) (A2f58 core-prim . condition-accessor) (A2f57 core-prim . condition) (A293a core-prim . assertion-violation?) (A2f56 core-prim . condition?) (A2f55 core-prim . utf32->string) (A2f54 core-prim . utf16->string) (A2f53 core-prim . utf8->string) (A2f52 core-prim . uint-list->bytevector) (A2f51 core-prim . u8-list->bytevector) (A2f50 core-prim . string->utf8) (A2f4f core-prim . string->utf32) (A2f4e core-prim . string->utf16) (A2f4d core-prim . sint-list->bytevector) (A2f4c core-prim . native-endianness) (A2f4b core-prim . bytevector?) (A2f4a core-prim . bytevector=?) (A2f49 core-prim . bytevector-uint-set!) (A2f48 core-prim . bytevector-uint-ref) (A2f47 core-prim . bytevector-u8-set!) (A2f46 core-prim . bytevector-u8-ref) (A2f45 core-prim . bytevector-u64-set!) (A2f44 core-prim . bytevector-u64-ref) (A2f43 core-prim . bytevector-u64-native-set!) (A2f42 core-prim . bytevector-u64-native-ref) (A2f41 core-prim . bytevector-u32-set!) (A2f40 core-prim . bytevector-u32-ref) (A2f3f core-prim . bytevector-u32-native-set!) (A2f3e core-prim . bytevector-u32-native-ref) (A2f3d core-prim . bytevector-u16-set!) (A2f3c core-prim . bytevector-u16-ref) (A2f3b core-prim . bytevector-u16-native-set!) (A2f3a core-prim . bytevector-u16-native-ref) (A2f39 core-prim . bytevector-sint-set!) (A2f38 core-prim . bytevector-sint-ref) (A2f37 core-prim . bytevector-s8-set!) (A2f36 core-prim . bytevector-s8-ref) (A2f35 core-prim . bytevector-s64-set!) (A2f34 core-prim . bytevector-s64-ref) (A2f33 core-prim . bytevector-s64-native-set!) (A2f32 core-prim . bytevector-s64-native-ref) (A2f31 core-prim . bytevector-s32-set!) (A2f30 core-prim . bytevector-s32-ref) (A2f2f core-prim . bytevector-s32-native-set!) (A2f2e core-prim . bytevector-s32-native-ref) (A2f2d core-prim . bytevector-s16-set!) (A2f2c core-prim . bytevector-s16-ref) (A2f2b core-prim . bytevector-s16-native-set!) (A2f2a core-prim . bytevector-s16-native-ref) (A2f29 core-prim . bytevector-length) (A2f28 core-prim . bytevector-ieee-single-ref) (A2f27 core-prim . bytevector-ieee-single-set!) (A2f26 core-prim . bytevector-ieee-single-native-set!) (A2f25 core-prim . bytevector-ieee-single-native-ref) (A2f24 core-prim . bytevector-ieee-double-set!) (A2f23 core-prim . bytevector-ieee-double-ref) (A2f22 core-prim . bytevector-ieee-double-native-set!) (A2f21 core-prim . bytevector-ieee-double-native-ref) (A2f20 core-prim . bytevector-fill!) (A2f1f core-prim . bytevector-copy!) (A2f1e core-prim . bytevector-copy) (A2f1d core-prim . bytevector->uint-list) (A2f1c core-prim . bytevector->u8-list) (A2f1b core-prim . bytevector->sint-list) (A2b23 core-prim . no-nans-violation?) (A2b0e core-prim . no-infinities-violation?) (A2b21 core-prim . make-no-nans-violation) (A2b0c core-prim . make-no-infinities-violation) (A2f1a core-prim . real->flonum) (A2f19 core-prim . flzero?) (A2f18 core-prim . fltruncate) (A2f17 core-prim . fltan) (A2f16 core-prim . flsqrt) (A2f15 core-prim . flsin) (A2f14 core-prim . flround) (A2f13 core-prim . flpositive?) (A2f12 core-prim . flonum?) (A2f11 core-prim . flodd?) (A2f10 core-prim . flnumerator) (A2f0f core-prim . flnegative?) (A2f0e core-prim . flnan?) (A2f0d core-prim . flmod0) (A2f0c core-prim . flmod) (A2f0b core-prim . flmin) (A2f0a core-prim . flmax) (A2f09 core-prim . fllog) (A2f08 core-prim . flinteger?) (A2f07 core-prim . flinfinite?) (A2f06 core-prim . flfloor) (A2f05 core-prim . flfinite?) (A2f04 core-prim . flexpt) (A2f03 core-prim . flexp) (A2f02 core-prim . fleven?) (A2f01 core-prim . fldiv0-and-mod0) (A2f00 core-prim . fldiv0) (A2eff core-prim . fldiv-and-mod) (A2efe core-prim . fldiv) (A2efd core-prim . fldenominator) (A2efc core-prim . flcos) (A2efb core-prim . flceiling) (A2efa core-prim . flatan) (A2ef9 core-prim . flasin) (A2ef8 core-prim . flacos) (A2ef7 core-prim . flabs) (A2ef6 core-prim . fl>?) (A2ef5 core-prim . fl>=?) (A2ef4 core-prim . fl=?) (A2ef3 core-prim . fl<?) (A2ef2 core-prim . fl<=?) (A2ef1 core-prim . fl/) (A2ef0 core-prim . fl-) (A2eef core-prim . fl+) (A2eee core-prim . fl*) (A2eed core-prim . fixnum->flonum) (A2eec core-prim . fxzero?) (A2eeb core-prim . fxxor) (A2eea core-prim . fxrotate-bit-field) (A2ee9 core-prim . fxreverse-bit-field) (A2ee8 core-prim . fxpositive?) (A2ee7 core-prim . fxodd?) (A2ee6 core-prim . fxnot) (A2ee5 core-prim . fxnegative?) (A2ee4 core-prim . fxmod0) (A2ee3 core-prim . fxmod) (A2ee2 core-prim . fxmin) (A2ee1 core-prim . fxmax) (A2ee0 core-prim . fxlength) (A2edf core-prim . fxior) (A2ede core-prim . fxif) (A2edd core-prim . fxfirst-bit-set) (A2edc core-prim . fxeven?) (A2edb core-prim . fxdiv0-and-mod0) (A2eda core-prim . fxdiv0) (A2ed9 core-prim . fxdiv-and-mod) (A2ed8 core-prim . fxdiv) (A2ed7 core-prim . fxcopy-bit-field) (A2ed6 core-prim . fxcopy-bit) (A2ed5 core-prim . fxbit-set?) (A2ed4 core-prim . fxbit-field) (A2ed3 core-prim . fxbit-count) (A2ed2 core-prim . fxarithmetic-shift-right) (A2ed1 core-prim . fxarithmetic-shift-left) (A2ed0 core-prim . fxarithmetic-shift) (A2ecf core-prim . fxand) (A2ece core-prim . fx>?) (A2ecd core-prim . fx>=?) (A2ecc core-prim . fx=?) (A2ecb core-prim . fx<?) (A2eca core-prim . fx<=?) (A2ec9 core-prim . fx-/carry) (A2ec8 core-prim . fx-) (A2ec7 core-prim . fx+/carry) (A2ec6 core-prim . fx+) (A2ec5 core-prim . fx*/carry) (A2ec4 core-prim . fx*) (A2ec3 core-prim . greatest-fixnum) (A2ec2 core-prim . least-fixnum) (A2ec1 core-prim . fixnum-width) (A2ec0 core-prim . fixnum?) (A2ebf core-prim . bitwise-rotate-bit-field) (A2ebe core-prim . bitwise-reverse-bit-field) (A2ebd core-prim . bitwise-length) (A2ebc core-prim . bitwise-if) (A2ebb core-prim . bitwise-first-bit-set) (A2eba core-prim . bitwise-copy-bit-field) (A2eb9 core-prim . bitwise-copy-bit) (A2eb8 core-prim . bitwise-bit-set?) (A2eb7 core-prim . bitwise-bit-field) (A2eb6 core-prim . bitwise-bit-count) (A2eb5 core-prim . bitwise-xor) (A2eb4 core-prim . bitwise-ior) (A2eb3 core-prim . bitwise-and) (A2eb2 core-prim . bitwise-not) (A2eb1 core-prim . bitwise-arithmetic-shift-right) (A2eb0 core-prim . bitwise-arithmetic-shift-left) (A2eaf core-prim . bitwise-arithmetic-shift) (A2eae core-prim . zero?) (A2ead core-prim . vector?) (A2eac core-prim . vector-set!) (A2eab core-prim . vector-ref) (A2eaa core-prim . vector-map) (A2ea9 core-prim . vector-length) (A2ea8 core-prim . vector-for-each) (A2ea7 core-prim . vector-fill!) (A2ea6 core-prim . vector->list) (A2ea5 core-prim . vector) (A2ea4 core-prim . values) (A2ea3 core-prim . truncate) (A2ea2 core-prim . tan) (A2ea1 core-prim . symbol?) (A2ea0 core-prim . symbol=?) (A2e9f core-prim . symbol->string) (A2e9e core-prim . substring) (A2e9d core-prim . string?) (A2e9c core-prim . string>?) (A2e9b core-prim . string>=?) (A2e9a core-prim . string=?) (A2e99 core-prim . string<?) (A2e98 core-prim . string<=?) (A2e97 core-prim . string-ref) (A2e96 core-prim . string-length) (A2e95 core-prim . string-for-each) (A2e94 core-prim . string-copy) (A2e93 core-prim . string-append) (A2e92 core-prim . string->symbol) (A2e91 core-prim . string->number) (A2e90 core-prim . string->list) (A2e8f core-prim . string) (A2e8e core-prim . sqrt) (A2e8d core-prim . sin) (A2e8c core-prim . round) (A2e8b core-prim . reverse) (A2e8a core-prim . real?) (A2e89 core-prim . real-valued?) (A2e88 core-prim . real-part) (A2e87 core-prim . rationalize) (A2e86 core-prim . rational?) (A2e85 core-prim . rational-valued?) (A2e84 core-prim . procedure?) (A2e83 core-prim . positive?) (A2e82 core-prim . pair?) (A2e81 core-prim . odd?) (A2e80 core-prim . numerator) (A2e7f core-prim . number?) (A2e7e core-prim . number->string) (A2e7d core-prim . null?) (A2e7c core-prim . not) (A2e7b core-prim . negative?) (A2e7a core-prim . nan?) (A2e79 core-prim . min) (A2e78 core-prim . max) (A2e77 core-prim . map) (A2e76 core-prim . make-vector) (A2e75 core-prim . make-string) (A2e74 core-prim . make-rectangular) (A2e73 core-prim . make-polar) (A2e72 core-prim . magnitude) (A2e71 core-prim . log) (A2e70 core-prim . list?) (A2e6f core-prim . list-tail) (A2e6e core-prim . list-ref) (A2e6d core-prim . list->vector) (A2e6c core-prim . list->string) (A2e6b core-prim . list) (A2e6a core-prim . length) (A2e69 core-prim . lcm) (A2e68 core-prim . integer?) (A2e67 core-prim . integer-valued?) (A2e66 core-prim . integer->char) (A2e65 core-prim . infinite?) (A2e64 core-prim . inexact?) (A2e63 core-prim . inexact) (A2e62 core-prim . imag-part) (A2e61 core-prim . gcd) (A2e60 core-prim . for-each) (A2e5f core-prim . floor) (A2e5e core-prim . finite?) (A2e5d core-prim . expt) (A2e5c core-prim . exp) (A2e5b core-prim . exact?) (A2e5a core-prim . exact-integer-sqrt) (A2e59 core-prim . exact) (A2e58 core-prim . even?) (A2e57 core-prim . error) (A2e56 core-prim . eqv?) (A2e55 core-prim . equal?) (A2e54 core-prim . eq?) (A2e53 core-prim . dynamic-wind) (A2e52 core-prim . div0-and-mod0) (A2e51 core-prim . mod0) (A2e50 core-prim . div0) (A2e4f core-prim . div-and-mod) (A2e4e core-prim . mod) (A2e4d core-prim . div) (A2e4c core-prim . denominator) (A2e4b core-prim . cos) (A2e4a core-prim . cons) (A2e49 core-prim . complex?) (A2e48 core-prim . char?) (A2e47 core-prim . char>?) (A2e46 core-prim . char>=?) (A2e45 core-prim . char=?) (A2e44 core-prim . char<?) (A2e43 core-prim . char<=?) (A2e42 core-prim . char->integer) (A2e41 core-prim . ceiling) (A2e40 core-prim . call-with-values) (A2e3f core-prim . call/cc) (A2e3e core-prim . call-with-current-continuation) (A2e3d core-prim . cddddr) (A2e3c core-prim . cdddar) (A2e3b core-prim . cddadr) (A2e3a core-prim . cddaar) (A2e39 core-prim . cdaddr) (A2e38 core-prim . cdadar) (A2e37 core-prim . cdaadr) (A2e36 core-prim . cdaaar) (A2e35 core-prim . cadddr) (A2e34 core-prim . caddar) (A2e33 core-prim . cadadr) (A2e32 core-prim . cadaar) (A2e31 core-prim . caaddr) (A2e30 core-prim . caadar) (A2e2f core-prim . caaadr) (A2e2e core-prim . caaaar) (A2e2d core-prim . cdddr) (A2e2c core-prim . cddar) (A2e2b core-prim . cdadr) (A2e2a core-prim . cdaar) (A2e29 core-prim . caddr) (A2e28 core-prim . cadar) (A2e27 core-prim . caadr) (A2e26 core-prim . caaar) (A2e25 core-prim . cddr) (A2e24 core-prim . cdar) (A2e23 core-prim . cadr) (A2e22 core-prim . caar) (A2e21 core-prim . cdr) (A2e20 core-prim . car) (A2e1f core-prim . boolean?) (A2e1e core-prim . boolean=?) (A2e1d core-prim . atan) (A2e1c core-prim . assertion-violation) (Ae38 core-prim . assertion-error) (A2e1b core-prim . asin) (A2e1a core-prim . apply) (A2e19 core-prim . append) (A2e18 core-prim . angle) (A2e17 core-prim . acos) (A2e16 core-prim . abs) (A2e15 core-prim . /) (A2e14 core-prim . *) (A2e13 core-prim . -) (A2e12 core-prim . +) (A2e11 core-prim . >=) (A2e10 core-prim . >) (A2e0f core-prim . =) (A2e0e core-prim . <=) (A2e0d core-prim . <) (A2e0c core-prim . library) (A2e0b $core-rtd &no-nans-rtd &no-nans-rcd) (A2e0a $core-rtd &no-infinities-rtd &no-infinities-rcd) (A2e09 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (A2e08 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (A2e07 $core-rtd &i/o-port-rtd &i/o-port-rcd) (A2e06 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (A2e05 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (A2e04 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (A2e03 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (A2e02 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (A2e01 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (A2e00 $core-rtd &i/o-write-rtd &i/o-write-rcd) (A2dff $core-rtd &i/o-read-rtd &i/o-read-rcd) (A2dfe $core-rtd &i/o-rtd &i/o-rcd) (A2dfd $core-rtd &undefined-rtd &undefined-rcd) (A2dfc $core-rtd &syntax-rtd &syntax-rcd) (A2dfb $core-rtd &lexical-rtd &lexical-rcd) (A2dfa $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (A2df9 $core-rtd &non-continuable-rtd &non-continuable-rcd) (A2df8 $core-rtd &who-rtd &who-rcd) (A2df7 $core-rtd &irritants-rtd &irritants-rcd) (A2df6 $core-rtd &assertion-rtd &assertion-rcd) (A2df5 $core-rtd &violation-rtd &violation-rcd) (A2df4 $core-rtd &error-rtd &error-rcd) (A2df3 $core-rtd &serious-rtd &serious-rcd) (A2df2 $core-rtd &warning-rtd &warning-rcd) (A2df1 $core-rtd &message-rtd &message-rcd) (A2df0 $core-rtd &condition-rtd &condition-rcd) (A2def macro . define-condition-type) (A2dee macro . define-enumeration) (A2ded macro . define-record-type) (A2dec macro . parent-rtd) (A2deb macro . nongenerative) (A2dea macro . opaque) (A2de9 macro . sealed) (A2de8 macro . protocol) (A2de7 macro . parent) (A2de6 macro . immutable) (A2de5 macro . mutable) (A2de4 macro . fields) (A2de3 macro . error-handling-mode) (A2de2 macro . file-options) (A2de1 macro . buffer-mode) (A2de0 macro . eol-style) (A2ddf macro . guard) (A2dde macro . trace-define) (A2ddd macro . trace-lambda) (A2ddc macro . unsyntax-splicing) (A2ddb macro . unsyntax) (A2dda macro . unquote-splicing) (A2dd9 macro . unquote) (A2dd8 macro . _) (A2dd7 macro . else) (A2dd6 macro . =>) (A2dd5 macro . ...) (A2dd4 macro . assert) (A2dd3 macro . endianness) (A2dd2 macro . delay) (A2dd1 macro . time) (A2dd0 macro . do) (A2dcf macro . cond) (A2dce macro . let*) (A2dcd macro . let) (A2dcc macro . let*-values) (A2dcb macro . let-values) (A2dca macro . identifier-syntax) (A2dc9 macro . with-syntax) (A2dc8 macro . quasisyntax) (A2dc7 macro . quasiquote) (A2dc6 macro . syntax-rules) (A2dc5 macro . include) (A2dc4 macro . define-struct) (A2dc3 core-macro . record-constructor-descriptor) (A2dc2 core-macro . record-type-descriptor) (A2dc1 macro . case) (A2dc0 macro . parameterize) (A2dbf macro . unless) (A2dbe macro . when) (A2dbd core-macro . or) (A2dbc core-macro . and) (A2dbb core-macro . if) (A2dba core-macro . letrec*) (A2db9 core-macro . letrec) (A2db8 core-macro . type-descriptor) (A2db7 core-macro . case-lambda) (A2db6 core-macro . lambda) (A2db5 core-macro . syntax) (A2db4 core-macro . syntax-case) (A2db3 core-macro . quote) (A2db2 core-macro . foreign-call) (A2db1 letrec-syntax) (A2db0 let-syntax) (A2daf set!) (A2dae import) (A2dad begin) (A2dac module) (A2dab define-syntax) (A2daa define)) values values '#f '#f '#f '#f) (A983@A7cf@install-library 'A30ee '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . A30cd) (eval-core . A30cc) (set-symbol-value! . A30cb) (symbol-value . A30ca) (gensym . A30c9) (void . A30c8)) '() values values '#f '#f '#f '#f) (A983@A7cf@install-library 'A30ef '(mosh) '() '() '() '() '((set-symbol-value! . A30cb) (symbol-value . A30ca) (regexp? . A30c6) (read-line . A30c5) (ungensym . A30c3) (alist->eq-hash-table . A30c2) (assoc-ref . A30c1) (print . A30c0) (format . A30bf) (host-os . A30be) (library-path . A7ae) (standard-library-path . A30bd) (file-newer? . A30bc) (stat-mtime . A30bb) (digit->integer . A30b7) (call-with-string-input-port . A30b6) (call-with-string-io . A30b5) (string-split . A30b4) (bytevector-for-each . A30b3) (string->regexp . A30b2) (rxmatch . A30b1) (regexp-replace-all . A30b0) (hashtable-for-each . A30af) (set-current-directory! . A30aa) (expand-path . A30a9) (current-directory . A30a8) (p . A306b) (get-timeofday . A3053) (get-command-line . A3052) (sys-display . A3051) (whereis . A3050) (register . A304f) (vm-join! . A304e) (vm-set-value! . A304d) (vm? . A304c) (main-vm? . A304b) (vm-eval . A304a) (vm-self . A3049) (vm-start! . A3048) (make-vm . A3047) (mutex-try-lock! . A3046) (mutex-unlock! . A3045) (mutex-lock! . A3044) (mutex? . A3043) (make-mutex . A3042) (condition-variable-notify-all! . A3041) (condition-variable-notify! . A3040) (condition-variable-wait! . A303f) (make-condition-variable . A303e) (mosh-executable-path . A303d) (make-file-options . A303c) (source-info . A303b) (make-compiler-instruction . A303a) (make-instruction . A3039) (set-source-info! . A3038) (bignum? . A3037) (fast-equal? . A3036) (fasl-read . A3035) (fasl-write . A3034) (time-usage . A3033) (os-constant . A3032) (time . A2dd1) (include . A2dc5)) '() values values '#f '#f '#f '#f) (A983@A7cf@install-library 'A30f0 '(system) '() '() '() '() '((gensym-prefix-set! . A30c4) (write-to-file . A30ba) (file->list . A30b9) (file->string . A30b8) (mosh-cache-dir . A599) (call-process . A30ae) (local-tz-offset . A30ad) (microseconds . A30ac) (directory-list . A30ab) (expand-path . A30a9) (%spawn . A30a7) (%waitpid . A30a6) (simple-struct-name . A30a5) (simple-struct-set! . A30a4) (simple-struct-ref . A30a3) (make-simple-struct . A30a2) (simple-struct? . A30a1) (pointer-ref-c-int64 . A30a0) (pointer-ref-c-int32 . A309f) (pointer-ref-c-int16 . A309e) (pointer-ref-c-int8 . A309d) (pointer-ref-c-uint64 . A309c) (pointer-ref-c-uint32 . A309b) (pointer-ref-c-uint16 . A309a) (pointer-ref-c-uint8 . A3099) (pointer-set-c-uint64! . A3098) (pointer-set-c-uint32! . A3097) (pointer-set-c-uint16! . A3096) (pointer-set-c-uint8! . A3095) (pointer-set-c-int64! . A3094) (pointer-set-c-int32! . A3093) (pointer-set-c-int16! . A3092) (pointer-set-c-int8! . A3091) (pointer-set-c-pointer! . A3090) (pointer-set-c-double! . A308f) (pointer-set-c-float! . A308e) (pointer-set-c-long-long! . A308d) (pointer-set-c-long! . A308c) (pointer-set-c-int! . A308b) (pointer-set-c-short! . A308a) (pointer-set-c-char! . A3089) (pointer-ref-c-pointer . A3088) (pointer-ref-c-double . A3087) (pointer-ref-c-float . A3086) (pointer-ref-c-unsigned-long-long . A3085) (pointer-ref-c-signed-long-long . A3084) (pointer-ref-c-unsigned-long . A3083) (pointer-ref-c-signed-long . A3082) (pointer-ref-c-unsigned-int . A3081) (pointer-ref-c-signed-int . A3080) (pointer-ref-c-unsigned-short . A307f) (pointer-ref-c-signed-short . A307e) (pointer-ref-c-unsigned-char . A307d) (pointer-ref-c-signed-char . A307c) (pointer->integer . A307b) (integer->pointer . A307a) (pointer? . A3079) (shared-errno . A3078) (%ffi-supported? . A3077) (%ffi-pointer->string . A3076) (%ffi-call->string-or-zero . A3075) (%ffi-call->double . A3074) (%ffi-call->void* . A3073) (%ffi-call->void . A3072) (%ffi-call->char . A3071) (%ffi-call->int . A3070) (%ffi-lookup . A306f) (%ffi-open . A306e) (%fork . A306d) (%pipe . A306c) (open-output-string . A306a) (get-output-string . A3069) (file-stat-ctime . A3068) (file-stat-atime . A3067) (file-stat-mtime . A3066) (file-size-in-bytes . A3065) (file-writable? . A3064) (file-executable? . A3063) (file-readable? . A3062) (file-regular? . A3061) (file-symbolic-link? . A3060) (file-directory? . A305f) (create-symbolic-link . A305e) (rename-file . A305d) (delete-directory . A305c) (create-directory . A305b) (create-mosh-cache-dir . A305a) (get-environment-variables . A3059) (get-environment-variable . A3058) (join-wraps . A3057) (id->real-label . A3056) (same-marks? . A3055) (same-marks*? . A3054) (make-parameter . A597) (socket-port . A3031) (socket-shutdown . A3030) (socket-close . A302f) (socket-send . A302e) (socket-recv! . A302d) (socket-recv . A302c) (make-server-socket . A302b) (make-client-socket . A302a) (socket-accept . A3029) (socket? . A3028) (parameterize . A2dc0)) '() values values '#f '#f '#f '#f))
((lambda (A2c1d@add-library-path! A2c1f@parse-and-add-library-path A2c21@for-each-with-index A2c23@rpad A2c25@condition-printer A2c27@record->field-alist A2c29@map-with-index A2c2b@repl A2c2d@trace-printer A2c2f@command-line A2c31@local-library-path A2c33@load/args A2c35@load A2c37@ironscheme-build A2c39@eval-top-level A2c3b@compile-system-libraries A2c3d@compile A2c3f@compile->closure A2c41@pre-compile-r6rs-file A2c43@load-r6rs-top-level A2c45@load-r6rs-top-level-sexp A2c47@prefix-inc A2c49@prefix-inc!) (begin (set! A2c1d@add-library-path! (lambda (A2c82@path) (A973@A7af@library-path (append (A973@A7af@library-path) (list A2c82@path))))) (set! A2c1f@parse-and-add-library-path (lambda (A2c84@paths A2c85@message) ((lambda (A2c88@t) (if A2c88@t ((lambda (A2c8a@paths) (for-each (lambda (A2c8c@path) (if (file-exists? A2c8c@path) (A2c1d@add-library-path! (expand-path A2c8c@path)) (format (current-error-port) A2c85@message A2c8c@path))) (string-split A2c8a@paths '#\:))) A2c88@t) (void))) A2c84@paths))) (set! A2c21@for-each-with-index (lambda (A2c8e@proc A2c8f@lst) (letrec ((A2c92@loop (lambda (A2c94@i A2c95@lst) (if (null? A2c95@lst) (if '#f '#f (void)) (begin (A2c8e@proc A2c94@i (car A2c95@lst)) (A2c92@loop (+ A2c94@i '1) (cdr A2c95@lst))))))) (A2c92@loop '1 A2c8f@lst)))) (set! A2c23@rpad (lambda (A2c98@str A2c99@pad A2c9a@n) ((lambda (A2c9e@rest) ((letrec ((A2ca0@loop (lambda (A2ca2@rest A2ca3@ret) (if (<= A2ca2@rest '0) A2ca3@ret (A2ca0@loop (- A2ca2@rest '1) (string-append A2ca3@ret A2c99@pad)))))) A2ca0@loop) A2c9e@rest (format '"~a" A2c98@str))) (- A2c9a@n (string-length (format '"~a" A2c98@str)))))) (set! A2c25@condition-printer (lambda (A2ca6@e A2ca7@port) ((lambda (A2cab@max-condition-len) (begin (set! A2cab@max-condition-len (apply max (map (lambda (A2cbc@c) (string-length (symbol->string (record-type-name (record-rtd A2cbc@c))))) (simple-conditions A2ca6@e)))) (begin (display '" Condition components:\n" A2ca7@port) (A2c21@for-each-with-index (lambda (A2cac@i A2cad@x) ((lambda (A2cb0@rtd A2cb1@fields-alist) (begin (format A2ca7@port '" ~d. ~a" A2cac@i (A2c23@rpad (symbol->string (record-type-name A2cb0@rtd)) '" " A2cab@max-condition-len)) (if (null? A2cb1@fields-alist) (newline A2ca7@port) (void)) ((letrec ((A2cb4@loop (lambda (A2cb6@first A2cb7@fields-alist) (if (null? A2cb7@fields-alist) '() ((lambda (A2cba@field) (begin (if (not A2cb6@first) (display (A2c23@rpad '"" '" " (+ '4 A2cab@max-condition-len)) A2ca7@port) (void)) (display '"       " A2ca7@port) (display (car A2cba@field) A2ca7@port) (display '": " A2ca7@port) (write (cdr A2cba@field) A2ca7@port) (newline A2ca7@port) (A2cb4@loop '#f (cdr A2cb7@fields-alist)))) (car A2cb7@fields-alist)))))) A2cb4@loop) '#t A2cb1@fields-alist))) (record-rtd A2cad@x) (A2c27@record->field-alist A2cad@x))) (simple-conditions A2ca6@e))))) '#f))) (set! A2c27@record->field-alist (lambda (A2cbe@r) ((lambda (A2cc1@ref) (begin (set! A2cc1@ref (lambda (A2ccc@rtd A2ccd@i A2cce@x) ((lambda (A2cd2@val) (if (symbol? A2cd2@val) (ungensym A2cd2@val) A2cd2@val)) ((record-accessor A2ccc@rtd A2ccd@i) A2cce@x)))) ((letrec ((A2cc2@loop (lambda (A2cc4@ret A2cc5@rtd) (if A2cc5@rtd (A2cc2@loop (append A2cc4@ret (A2c29@map-with-index (lambda (A2cc8@i A2cc9@field) (cons A2cc9@field (A2cc1@ref A2cc5@rtd A2cc8@i A2cbe@r))) (vector->list (record-type-field-names A2cc5@rtd)))) (record-type-parent A2cc5@rtd)) A2cc4@ret)))) A2cc2@loop) '() (record-rtd A2cbe@r)))) '#f))) (set! A2c29@map-with-index (lambda (A2cd4@proc A2cd5@lst) ((letrec ((A2cd8@loop (lambda (A2cda@i A2cdb@lst A2cdc@ret) (if (null? A2cdb@lst) (reverse A2cdc@ret) (A2cd8@loop (+ A2cda@i '1) (cdr A2cdb@lst) (cons (A2cd4@proc A2cda@i (car A2cdb@lst)) A2cdc@ret)))))) A2cd8@loop) '0 A2cd5@lst '()))) (set! A2c2b@repl (lambda A2ce0@x ((lambda (A2ce3@rec) (begin (set! A2ce3@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (A2ce6@A2ce4) (lambda () (with-exception-handler (lambda (A2ce8@e) ((call/cc (lambda (A2cea@A2ce5) (A2ce6@A2ce4 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? A2ce8@e) (A2c25@condition-printer A2ce8@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" A2ce8@e))) (A2cea@A2ce5 (lambda () (raise-continuable A2ce8@e)))))))))) (lambda () ((letrec ((A2cec@loop (lambda (A2cee@line A2cef@accum) ((lambda (A2cf3@parentheses-ok? A2cf5@eval-string-print) (begin (set! A2cf3@parentheses-ok? (lambda (A2cfa@text) ((letrec ((A2cfc@loop (lambda (A2cfe@chars A2cff@p0 A2d00@p1) (if (null? A2cfe@chars) (= '0 A2cff@p0 A2d00@p1) ((lambda (A2d04@t) (if (memv A2d04@t '(#\()) (A2cfc@loop (cdr A2cfe@chars) (+ A2cff@p0 '1) A2d00@p1) (if (memv A2d04@t '(#\))) (A2cfc@loop (cdr A2cfe@chars) (- A2cff@p0 '1) A2d00@p1) (if (memv A2d04@t '(#\[)) (A2cfc@loop (cdr A2cfe@chars) A2cff@p0 (+ A2d00@p1 '1)) (if (memv A2d04@t '(#\])) (A2cfc@loop (cdr A2cfe@chars) A2cff@p0 (- A2d00@p1 '1)) (A2cfc@loop (cdr A2cfe@chars) A2cff@p0 A2d00@p1)))))) (car A2cfe@chars)))))) A2cfc@loop) (string->list A2cfa@text) '0 '0))) (set! A2cf5@eval-string-print (lambda (A2cf8@text) (if (not (or (string=? '"\n" A2cf8@text) (= '0 (string-length A2cf8@text)))) (write (A2c39@eval-top-level (call-with-port (open-string-input-port A2cf8@text) read))) (void)))) (if (eof-object? A2cee@line) (begin (A2cf5@eval-string-print A2cef@accum) (exit)) ((lambda (A2cf6@current) (if (A2cf3@parentheses-ok? A2cf6@current) (A2cf5@eval-string-print A2cf6@current) (A2cec@loop (get-line (current-input-port)) A2cf6@current))) (string-append A2cef@accum A2cee@line))))) '#f '#f)))) A2cec@loop) (get-line (current-input-port)) '""))))))) (newline) (A2ce3@rec)))) (A2ce3@rec))) '#f))) (set! A2c2d@trace-printer (A6b9@A598@make-parameter write)) (set! A2c2f@command-line (A6b9@A598@make-parameter (get-command-line))) (set! A2c31@local-library-path (lambda (A2d06@filename) (A973@A7af@library-path))) (set! A2c33@load/args (lambda (A2d08@filename . A2d0a@args) (begin (apply A2c43@load-r6rs-top-level A2d08@filename 'load A2d0a@args) (void)))) (set! A2c35@load (lambda (A2d0c@filename) (begin (apply A2c43@load-r6rs-top-level A2d0c@filename 'load (A2c2f@command-line)) (void)))) (set! A2c37@ironscheme-build (lambda () (A2c35@load '"ironscheme-buildscript.ss"))) (set! A2c39@eval-top-level (lambda (A2d0e@x) (A2844@Ae1f@eval A2d0e@x (A285a@Ae4b@interaction-environment)))) (set! A2c3b@compile-system-libraries (lambda () (A2c39@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! A2c3d@compile (lambda (A2d10@filename) (A2c43@load-r6rs-top-level A2d10@filename 'compile))) (set! A2c3f@compile->closure (lambda (A2d12@filename) (A2c43@load-r6rs-top-level A2d12@filename 'closure))) (set! A2c41@pre-compile-r6rs-file (lambda (A2d14@filename) (A2c43@load-r6rs-top-level A2d14@filename 'compile))) (set! A2c43@load-r6rs-top-level (lambda (A2d16@filename A2d17@how . A2d1a@args) ((lambda (A2d20@A2d1d A2d21@A2d1f) ((lambda (A2d24@swap) (dynamic-wind A2d24@swap (lambda () ((lambda (A2d26@x*) ((lambda (A2d28@t) (if (memv A2d28@t '(closure)) (A2859@Ae49@pre-compile-r6rs-top-level A2d26@x*) (if (memv A2d28@t '(load)) ((lambda (A2d32@A2d2b A2d33@A2d2d A2d34@A2d2f A2d35@A2d31) ((lambda (A2d3a@swap) (dynamic-wind A2d3a@swap (lambda () (begin (if (A6ba@A59a@mosh-cache-dir) (gensym-prefix-set! (A2c49@prefix-inc! (string-append (A6ba@A59a@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (A2d3c@file) ((call/cc (lambda (A2d40@A2d3e) (lambda () (with-exception-handler (lambda (A2d42@c) ((call/cc (lambda (A2d44@A2d3f) (A2d40@A2d3e (lambda () (if '#t '#t (A2d44@A2d3f (lambda () (raise-continuable A2d42@c)))))))))) (lambda () (delete-file (string-append (A6ba@A59a@mosh-cache-dir) '"/" A2d3c@file))))))))) (directory-list (A6ba@A59a@mosh-cache-dir))) (void)) ((lambda (A2d46@compiled) (begin (if (and (A6ba@A59a@mosh-cache-dir) (not (symbol-value '%disable-acc))) (A977@A7b7@serialize-all A6b4@A58e@serialize-library A710@A6c9@compile-core-expr) (void)) (A2d46@compiled))) (A2858@Ae47@compile-r6rs-top-level A2d26@x*)))) A2d3a@swap)) (lambda () (begin ((lambda (A2d48@t) (begin (A2d32@A2d2b A2d34@A2d2f) (set! A2d34@A2d2f A2d48@t))) (A2d32@A2d2b)) ((lambda (A2d4a@t) (begin (A2d33@A2d2d A2d35@A2d31) (set! A2d35@A2d31 A2d4a@t))) (A2d33@A2d2d)))))) A2c2f@command-line A6ba@A59a@mosh-cache-dir (cons A2d16@filename (car A2d1a@args)) (create-mosh-cache-dir)) (if (memv A2d28@t '(compile)) (begin (A2858@Ae47@compile-r6rs-top-level A2d26@x*) (A977@A7b7@serialize-all A6b4@A58e@serialize-library A710@A6c9@compile-core-expr)) (if '#f '#f (void)))))) A2d17@how)) (with-input-from-file A2d16@filename (lambda () ((letrec ((A2d4c@f (lambda () ((lambda (A2d4e@x) (if (eof-object? A2d4e@x) '() (cons A2d4e@x (A2d4c@f)))) (A6ac@A57e@read-annotated))))) A2d4c@f)))))) A2d24@swap)) (lambda () ((lambda (A2d50@t) (begin (A2d20@A2d1d A2d21@A2d1f) (set! A2d21@A2d1f A2d50@t))) (A2d20@A2d1d))))) A973@A7af@library-path (A2c31@local-library-path A2d16@filename)))) (set! A2c45@load-r6rs-top-level-sexp (lambda (A2d52@import-spec A2d53@thunk) ((lambda (A2d5e@A2d57 A2d5f@A2d59 A2d60@A2d5b A2d61@A2d5d) ((lambda (A2d66@swap) (dynamic-wind A2d66@swap (lambda () (begin (if (A6ba@A59a@mosh-cache-dir) (gensym-prefix-set! (A2c49@prefix-inc! (string-append (A6ba@A59a@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (A2d6c@A2d69 A2d6d@A2d6b) ((lambda (A2d70@swap) (dynamic-wind A2d70@swap (lambda () ((A2858@Ae47@compile-r6rs-top-level (list (cons 'import A2d52@import-spec) (list A2d53@thunk))))) A2d70@swap)) (lambda () ((lambda (A2d72@t) (begin (A2d6c@A2d69 A2d6d@A2d6b) (set! A2d6d@A2d6b A2d72@t))) (A2d6c@A2d69))))) A2c2f@command-line '()))) A2d66@swap)) (lambda () (begin ((lambda (A2d74@t) (begin (A2d5e@A2d57 A2d60@A2d5b) (set! A2d60@A2d5b A2d74@t))) (A2d5e@A2d57)) ((lambda (A2d76@t) (begin (A2d5f@A2d59 A2d61@A2d5d) (set! A2d61@A2d5d A2d76@t))) (A2d5f@A2d59)))))) A973@A7af@library-path A6ba@A59a@mosh-cache-dir (A2c31@local-library-path '"") (create-mosh-cache-dir)))) (set! A2c47@prefix-inc (lambda (A2d78@prefix-string) ((lambda (A2d7a@prefix) ((lambda (A2d7c@len) ((lambda () ((letrec ((A2d7e@loop (lambda (A2d80@i A2d81@carry? A2d82@accum) (if (< A2d80@i '0) (string->symbol (list->string (if A2d81@carry? (cons '#\a A2d82@accum) A2d82@accum))) (if A2d81@carry? ((lambda (A2d86@next-integer) (if (= A2d86@next-integer '123) (A2d7e@loop (- A2d80@i '1) '#f (cons '#\A A2d82@accum)) (if (= A2d86@next-integer '91) (A2d7e@loop (- A2d80@i '1) '#t (cons '#\a A2d82@accum)) (A2d7e@loop (- A2d80@i '1) '#f (cons (integer->char A2d86@next-integer) A2d82@accum))))) (+ '1 (char->integer (string-ref A2d7a@prefix A2d80@i)))) (A2d7e@loop (- A2d80@i '1) '#f (cons (string-ref A2d7a@prefix A2d80@i) A2d82@accum))))))) A2d7e@loop) (- A2d7c@len '1) '#t '())))) (string-length A2d7a@prefix))) (symbol->string A2d78@prefix-string)))) (set! A2c49@prefix-inc! (lambda (A2d88@file) (begin (if (not (file-exists? A2d88@file)) (call-with-output-file A2d88@file (lambda (A2d8a@port) (write 'd A2d8a@port))) (void)) ((lambda (A2d8c@prefix) ((lambda (A2d8e@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port A2d88@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (A2d90@port) (write A2d8e@next-prefix A2d90@port))) A2d8c@prefix)))) (A2c47@prefix-inc A2d8c@prefix))) (call-with-input-file A2d88@file read))))) (begin (set! A2da8@A2c49@prefix-inc! A2c49@prefix-inc!) (set! A2da7@A2c47@prefix-inc A2c47@prefix-inc) (set! A2da6@A2c45@load-r6rs-top-level-sexp A2c45@load-r6rs-top-level-sexp) (set! A2da5@A2c43@load-r6rs-top-level A2c43@load-r6rs-top-level) (set! A2da4@A2c41@pre-compile-r6rs-file A2c41@pre-compile-r6rs-file) (set! A2da3@A2c3f@compile->closure A2c3f@compile->closure) (set! A2da2@A2c3d@compile A2c3d@compile) (set! A2da1@A2c3b@compile-system-libraries A2c3b@compile-system-libraries) (set! A2da0@A2c39@eval-top-level A2c39@eval-top-level) (set! A2d9f@A2c37@ironscheme-build A2c37@ironscheme-build) (set! A2d9e@A2c35@load A2c35@load) (set! A2d9d@A2c33@load/args A2c33@load/args) (set! A2d9c@A2c31@local-library-path A2c31@local-library-path) (set! A2d9b@A2c2f@command-line A2c2f@command-line) (set! A2d9a@A2c2d@trace-printer A2c2d@trace-printer) (set! A2d99@A2c2b@repl A2c2b@repl) (set! A2d98@A2c29@map-with-index A2c29@map-with-index) (set! A2d97@A2c27@record->field-alist A2c27@record->field-alist) (set! A2d96@A2c25@condition-printer A2c25@condition-printer) (set! A2d95@A2c23@rpad A2c23@rpad) (set! A2d94@A2c21@for-each-with-index A2c21@for-each-with-index) (set! A2d93@A2c1f@parse-and-add-library-path A2c1f@parse-and-add-library-path) (set! A2d92@A2c1d@add-library-path! A2c1d@add-library-path!) (A978@A7b9@current-precompiled-library-loader A6b5@A590@load-serialized-library) (set-symbol-value! 'load A2c35@load) (set-symbol-value! 'pre-compile-r6rs-file A2c41@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs A2c39@eval-top-level) (set-symbol-value! 'int-env-syms A283b@Ae0d@interaction-environment-symbols) (set-symbol-value! 'expanded2core A70f@A6c7@expanded->core) (set-symbol-value! 'trace-printer A2c2d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (A2c4a@c) (condition (A2b7a@A2984@make-non-continuable-violation) (A2b70@A296b@make-who-condition 'raise) (A2b34@A28cc@make-message-condition '"returned from non-continuable exception") (A2b66@A2950@make-irritants-condition (list A2c4a@c))))) (A2c1f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (A2c1f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (A2c1d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (A2c1d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (A2c1d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (A2c4c@prefix) (A974@A7b1@library-extensions (A2c4c@prefix '".mosh" (A974@A7b1@library-extensions)))) (lambda (A2c4e@ext A2c4f@ls) (append (map (lambda (A2c52@x) (string-append A2c4e@ext A2c52@x)) A2c4f@ls) A2c4f@ls))) ((lambda (A2c54@args A2c55@port) ((lambda (A2c59@ref) (begin (set! A2c59@ref (lambda (A2c7a@rtd A2c7b@i A2c7c@x) ((lambda (A2c80@val) (if (symbol? A2c80@val) (ungensym A2c80@val) A2c80@val)) ((record-accessor A2c7a@rtd A2c7b@i) A2c7c@x)))) (with-exception-handler (lambda (A2c5a@c) (if (condition? A2c5a@c) (A2c25@condition-printer A2c5a@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" A2c5a@c))) (lambda () (if ((call/cc (lambda (A2c5e@A2c5c) (lambda () (with-exception-handler (lambda (A2c60@c) ((call/cc (lambda (A2c62@A2c5d) (A2c5e@A2c5c (lambda () (if '#t '#f (A2c62@A2c5d (lambda () (raise-continuable A2c60@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (A2c45@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? A2c54@args) ((lambda (A2c6c@A2c65 A2c6d@A2c67 A2c6e@A2c69 A2c6f@A2c6b) ((lambda (A2c74@swap) (dynamic-wind A2c74@swap (lambda () (begin (if (A6ba@A59a@mosh-cache-dir) (gensym-prefix-set! (A2c49@prefix-inc! (string-append (A6ba@A59a@mosh-cache-dir) '"/prefix.txt"))) (void)) (A2c2b@repl))) A2c74@swap)) (lambda () (begin ((lambda (A2c76@t) (begin (A2c6c@A2c65 A2c6e@A2c69) (set! A2c6e@A2c69 A2c76@t))) (A2c6c@A2c65)) ((lambda (A2c78@t) (begin (A2c6d@A2c67 A2c6f@A2c6b) (set! A2c6f@A2c6b A2c78@t))) (A2c6d@A2c67)))))) A2c2f@command-line A6ba@A59a@mosh-cache-dir '() (create-mosh-cache-dir)) (A2c43@load-r6rs-top-level (car A2c54@args) 'load (cdr A2c54@args)))))))) '#f)) (A2c2f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
