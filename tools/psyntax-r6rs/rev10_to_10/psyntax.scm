;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (h27a9@read-annotated h27ab@annotation-stripped h27ad@annotation? h27af@annotation-source h27b1@annotation-expression h27b3@scm->fasl h27b5@fasl-save h27b7@fasl-load h27b9@serialize-library h27bb@load-serialized-library h27bd@make-record-printer h27bf@compile-core h27c1@read-library-source-file h27c3@make-parameter h282b@file-options-spec) (begin (set! h27a9@read-annotated read) (set! h27ab@annotation-stripped (lambda (h282c@x) (h27b1@annotation-expression h282c@x))) (set! h27ad@annotation? (lambda (h282e@x) (source-info h282e@x))) (set! h27af@annotation-source (lambda (h2830@x) (source-info h2830@x))) (set! h27b1@annotation-expression (lambda (h2832@x) (if (pair? h2832@x) (cons (car h2832@x) (cdr h2832@x)) (display '"line:46\n")))) (set! h27b3@scm->fasl (lambda (h2834@filename) (string-append h2834@filename '".mosh-fasl"))) (set! h27b5@fasl-save (lambda (h2836@filename h2837@obj) (call-with-port (open-file-output-port h2836@filename) (lambda (h283a@port) ((symbol-value 'fasl-write!) h2837@obj h283a@port))))) (set! h27b7@fasl-load (lambda (h283c@filename) (call-with-port (open-file-input-port h283c@filename) (symbol-value 'fasl-read!)))) (set! h27b9@serialize-library (lambda (h283e@filename h283f@obj) (begin (format '#t '"serialize-library ~a\n..." h283e@filename) ((lambda (h2842@expanded2core) ((lambda (h2844@compile) ((lambda (h2846@code) ((lambda (h2848@pivot) ((lambda (h284a@visit) ((lambda () (begin (set-car! h2848@pivot h284a@visit) ((lambda (h284c@pivot) ((lambda (h284e@invoke) ((lambda () (set-car! h284c@pivot h284e@invoke)))) (h2844@compile (h2842@expanded2core (car h284c@pivot))))) (cdr h2848@pivot)))))) (h2844@compile (h2842@expanded2core (car h2848@pivot))))) (cddddr (cddddr h2846@code)))) h283f@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (h2850@fasl-file) (begin (if (file-exists? h2850@fasl-file) (delete-file h2850@fasl-file) (void)) ((call/cc (lambda (h2854@h2852) (lambda () (with-exception-handler (lambda (h2856@c) ((call/cc (lambda (h2858@h2853) (h2854@h2852 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " h283e@filename) (if (file-exists? h2850@fasl-file) (delete-file h2850@fasl-file) (void)) '#f) (h2858@h2853 (lambda () (raise-continuable h2856@c)))))))))) (lambda () (begin (h27b5@fasl-save h2850@fasl-file h283f@obj) (display '"OK\n")))))))))) (h27b3@scm->fasl h283e@filename))))) (set! h27bb@load-serialized-library (lambda (h285a@filename h285b@obj) ((lambda (h285e@fasl-file) (if (and (file-exists? h285e@fasl-file) ((symbol-value 'file-newer?) h285e@fasl-file h285a@filename)) ((lambda (h2860@expanded2core) ((lambda (h2862@eval-compiled-core) ((lambda (h2864@code) ((lambda (h2866@pivot) ((lambda (h2868@visit) ((lambda (h286a@visit-proc) ((lambda () (begin (set-car! h2866@pivot h286a@visit-proc) ((lambda (h286c@pivot) ((lambda (h286e@invoke) ((lambda () (begin (set-car! h286c@pivot (lambda () (h2862@eval-compiled-core h286e@invoke))) (apply h285b@obj h2864@code))))) (car h286c@pivot))) (cdr h2866@pivot)) '#t)))) (lambda () (h2862@eval-compiled-core h2868@visit)))) (car h2866@pivot))) (cddddr (cddddr h2864@code)))) (h27b7@fasl-load h285e@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (h27b3@scm->fasl h285a@filename)))) (set! h27bd@make-record-printer (lambda (h2870@name h2871@printer) (lambda h2874@x (begin (display '"record printer") (for-each display h2874@x))))) (set! h27bf@compile-core (lambda h2876@x (apply error 'comile-core '"not implementated" h2876@x))) (set! h27c1@read-library-source-file (lambda (h2878@file-name) (with-input-from-file h2878@file-name h27a9@read-annotated))) (set! h27c3@make-parameter (lambda h2888 ((lambda (h2889) (if (= h2889 '1) (apply (lambda (h287a@x) (h27c3@make-parameter h287a@x (lambda (h287c@x) h287c@x))) h2888) (if (= h2889 '2) (apply (lambda (h287e@x h287f@fender) ((lambda (h2882@x) (lambda h2886 ((lambda (h2887) (if (= h2887 '0) (apply (lambda () h2882@x) h2886) (if (= h2887 '1) (apply (lambda (h2884@v) (set! h2882@x (h287f@fender h2884@v))) h2886) (error 'apply '"invalid arg count")))) (length h2886)))) (h287f@fender h287e@x))) h2888) (error 'apply '"invalid arg count")))) (length h2888)))) (set! h282b@file-options-spec (lambda (h288a@x) h288a@x)) (begin (set! h289a@h282b@file-options-spec h282b@file-options-spec) (set! h2899@h27c3@make-parameter h27c3@make-parameter) (set! h2898@h27c1@read-library-source-file h27c1@read-library-source-file) (set! h2897@h27bf@compile-core h27bf@compile-core) (set! h2896@h27bd@make-record-printer h27bd@make-record-printer) (set! h2895@h27bb@load-serialized-library h27bb@load-serialized-library) (set! h2894@h27b9@serialize-library h27b9@serialize-library) (set! h2893@h27b7@fasl-load h27b7@fasl-load) (set! h2892@h27b5@fasl-save h27b5@fasl-save) (set! h2891@h27b3@scm->fasl h27b3@scm->fasl) (set! h2890@h27b1@annotation-expression h27b1@annotation-expression) (set! h288f@h27af@annotation-source h27af@annotation-source) (set! h288e@h27ad@annotation? h27ad@annotation?) (set! h288d@h27ab@annotation-stripped h27ab@annotation-stripped) (set! h288c@h27a9@read-annotated h27a9@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h289f@current-primitive-locations h28a1@mutable? h28a3@rewriter h28a5@expanded->core h28a7@compile-core-expr h28a9@pretty-print h28ab@compile-core-expr-to-port) (begin (set! h289f@current-primitive-locations (h2899@h27c3@make-parameter (lambda (h28ac@x) '#f) (lambda (h28ae@p) h28ae@p))) (set! h28a1@mutable? (lambda (h28b0@x) (or (pair? h28b0@x) (vector? h28b0@x) (hashtable? h28b0@x)))) (set! h28a3@rewriter (lambda (h28b2@quote-hack?) ((lambda (h28b5@f) (begin (set! h28b5@f (lambda (h28b6@x) (if (pair? h28b6@x) ((lambda (h28b8@t) (if (memv h28b8@t '(quote)) (if (and h28b2@quote-hack? (h28a1@mutable? (cadr h28b6@x))) ((lambda (h28ba@g) (begin (set-symbol-value! h28ba@g (cadr h28b6@x)) h28ba@g)) (gensym)) h28b6@x) (if (memv h28b8@t '(case-lambda)) (cons 'case-lambda (map (lambda (h28bc@x) (cons (car h28bc@x) (map h28b5@f (cdr h28bc@x)))) (cdr h28b6@x))) (if (memv h28b8@t '(lambda)) (cons* 'lambda (cadr h28b6@x) (map h28b5@f (cddr h28b6@x))) (if (memv h28b8@t '(letrec)) ((lambda (h28be@bindings h28bf@body*) ((lambda (h28c2@lhs* h28c3@rhs*) (cons* 'letrec (map list h28c2@lhs* (map h28b5@f h28c3@rhs*)) (map h28b5@f h28bf@body*))) (map car h28be@bindings) (map cadr h28be@bindings))) (cadr h28b6@x) (cddr h28b6@x)) (if (memv h28b8@t '(letrec*)) ((lambda (h28c6@bindings h28c7@body*) ((lambda (h28ca@lhs* h28cb@rhs*) (cons* 'letrec* (map list h28ca@lhs* (map h28b5@f h28cb@rhs*)) (map h28b5@f h28c7@body*))) (map car h28c6@bindings) (map cadr h28c6@bindings))) (cadr h28b6@x) (cddr h28b6@x)) (if (memv h28b8@t '(library-letrec*)) ((lambda (h28ce@name h28cf@x) ((lambda (h28d2@bindings h28d3@body*) ((lambda (h28d6@lhs* h28d7@lhs** h28d8@rhs*) (cons* 'library-letrec* h28ce@name (map list h28d6@lhs* h28d7@lhs** (map h28b5@f h28d8@rhs*)) (map h28b5@f h28d3@body*))) (map car h28d2@bindings) (map cadr h28d2@bindings) (map caddr h28d2@bindings))) (cadr h28cf@x) (cddr h28cf@x))) (cadr h28b6@x) (cdr h28b6@x)) (if (memv h28b8@t '(begin)) (cons 'begin (map h28b5@f (cdr h28b6@x))) (if (memv h28b8@t '(set!)) (list 'set! (cadr h28b6@x) (h28b5@f (caddr h28b6@x))) (if (memv h28b8@t '(primitive)) ((lambda (h28dc@op) ((lambda (h28de@t) (if h28de@t ((lambda (h28e0@loc) h28e0@loc) h28de@t) h28dc@op)) ((h289f@current-primitive-locations) h28dc@op))) (cadr h28b6@x)) (if (memv h28b8@t '(define)) h28b6@x (if (list? h28b6@x) (map h28b5@f h28b6@x) (error 'rewrite '"invalid form ~s ~s" h28b6@x (list? h28b6@x)))))))))))))) (car h28b6@x)) h28b6@x))) h28b5@f)) '#f))) (set! h28a5@expanded->core (lambda (h28e2@x) ((h28a3@rewriter '#f) h28e2@x))) (set! h28a7@compile-core-expr (lambda (h28e4@x) ((h28a3@rewriter '#f) h28e4@x))) (set! h28a9@pretty-print write) (set! h28ab@compile-core-expr-to-port (lambda (h28e6@x h28e7@p) (h28a9@pretty-print ((h28a3@rewriter '#f) h28e6@x) h28e7@p))) (begin (set! h28f0@h28ab@compile-core-expr-to-port h28ab@compile-core-expr-to-port) (set! h28ef@h28a9@pretty-print h28a9@pretty-print) (set! h28ee@h28a7@compile-core-expr h28a7@compile-core-expr) (set! h28ed@h28a5@expanded->core h28a5@expanded->core) (set! h28ec@h28a3@rewriter h28a3@rewriter) (set! h28eb@h28a1@mutable? h28a1@mutable?) (set! h28ea@h289f@current-primitive-locations h289f@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (h293f@make-collection h2941@current-library-collection h2947@h2942 h2949@h2944 h294b@h2943 h294e@library? h2950@make-library h2952@library-id h2954@library-name h2956@library-version h2958@library-imp* h295a@library-vis* h295c@library-inv* h295e@library-subst h2960@library-env h2962@library-visit-state h2964@library-invoke-state h2966@library-visit-code h2968@library-invoke-code h296a@library-visible? h296c@library-source-file-name h296e@set-library-id! h2970@set-library-name! h2972@set-library-version! h2974@set-library-imp*! h2976@set-library-vis*! h2978@set-library-inv*! h297a@set-library-subst! h297c@set-library-env! h297e@set-library-visit-state! h2980@set-library-invoke-state! h2982@set-library-visit-code! h2984@set-library-invoke-code! h2986@set-library-visible?! h2988@set-library-source-file-name! h298a@rp h298c@find-dependencies h298e@find-library-by h2990@library-path h2992@library-extensions h2994@library-name->file-name h2996@file-locator h2998@serialize-all h299a@current-precompiled-library-loader h299c@try-load-from-file h299e@library-loader h29a0@current-library-expander h29a2@external-pending-libraries h29a4@find-external-library h29a6@find-library-by-name h29a8@library-exists? h29aa@find-library-by-spec/die h29ac@label->binding-table h29ae@install-library-record h29b0@install-library h29b2@imported-label->binding h29b4@invoke-library h29b6@visit-library h29b8@invoke-library-by-spec h29ba@installed-libraries h29bc@library-spec) (begin (set! h293f@make-collection (lambda () ((lambda (h29bd@set) ((lambda (h29c0@set-cons) (begin (set! h29c0@set-cons (lambda (h29c5@x h29c6@ls) (if (memq h29c5@x h29c6@ls) h29c6@ls (cons h29c5@x h29c6@ls)))) (lambda h29c3 ((lambda (h29c4) (if (= h29c4 '0) (apply (lambda () h29bd@set) h29c3) (if (= h29c4 '1) (apply (lambda (h29c1@x) (set! h29bd@set (h29c0@set-cons h29c1@x h29bd@set))) h29c3) (error 'apply '"invalid arg count")))) (length h29c3))))) '#f)) '()))) (set! h2941@current-library-collection (h2899@h27c3@make-parameter (h293f@make-collection) (lambda (h29c9@x) (begin (if (not (procedure? h29c9@x)) (assertion-violation 'current-library-collection '"not a procedure" h29c9@x) (void)) h29c9@x)))) (set! h2947@h2942 (make-record-type-descriptor 'library '#f 'h2945 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! h2949@h2944 '#f) (set! h294b@h2943 (make-record-constructor-descriptor h2947@h2942 '#f h2949@h2944)) (set! h294e@library? (record-predicate h2947@h2942)) (set! h2950@make-library (record-constructor h294b@h2943)) (set! h2952@library-id (record-accessor h2947@h2942 '0)) (set! h2954@library-name (record-accessor h2947@h2942 '1)) (set! h2956@library-version (record-accessor h2947@h2942 '2)) (set! h2958@library-imp* (record-accessor h2947@h2942 '3)) (set! h295a@library-vis* (record-accessor h2947@h2942 '4)) (set! h295c@library-inv* (record-accessor h2947@h2942 '5)) (set! h295e@library-subst (record-accessor h2947@h2942 '6)) (set! h2960@library-env (record-accessor h2947@h2942 '7)) (set! h2962@library-visit-state (record-accessor h2947@h2942 '8)) (set! h2964@library-invoke-state (record-accessor h2947@h2942 '9)) (set! h2966@library-visit-code (record-accessor h2947@h2942 '10)) (set! h2968@library-invoke-code (record-accessor h2947@h2942 '11)) (set! h296a@library-visible? (record-accessor h2947@h2942 '12)) (set! h296c@library-source-file-name (record-accessor h2947@h2942 '13)) (set! h296e@set-library-id! (record-mutator h2947@h2942 '0)) (set! h2970@set-library-name! (record-mutator h2947@h2942 '1)) (set! h2972@set-library-version! (record-mutator h2947@h2942 '2)) (set! h2974@set-library-imp*! (record-mutator h2947@h2942 '3)) (set! h2976@set-library-vis*! (record-mutator h2947@h2942 '4)) (set! h2978@set-library-inv*! (record-mutator h2947@h2942 '5)) (set! h297a@set-library-subst! (record-mutator h2947@h2942 '6)) (set! h297c@set-library-env! (record-mutator h2947@h2942 '7)) (set! h297e@set-library-visit-state! (record-mutator h2947@h2942 '8)) (set! h2980@set-library-invoke-state! (record-mutator h2947@h2942 '9)) (set! h2982@set-library-visit-code! (record-mutator h2947@h2942 '10)) (set! h2984@set-library-invoke-code! (record-mutator h2947@h2942 '11)) (set! h2986@set-library-visible?! (record-mutator h2947@h2942 '12)) (set! h2988@set-library-source-file-name! (record-mutator h2947@h2942 '13)) (set! h298a@rp (h2896@h27bd@make-record-printer 'library (lambda (h29cb@x h29cc@p h29cd@wr) (begin (if (not (h294e@library? h29cb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (h2956@library-version h29cb@x)) (h2954@library-name h29cb@x) (append (h2954@library-name h29cb@x) (list (h2956@library-version h29cb@x))))) h29cc@p))))) (set! h298c@find-dependencies (lambda (h29d1@ls) (if (null? h29d1@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! h298e@find-library-by (lambda (h29d3@pred) ((letrec ((h29d5@f (lambda (h29d7@ls) (if (null? h29d7@ls) '#f (if (h29d3@pred (car h29d7@ls)) (car h29d7@ls) (h29d5@f (cdr h29d7@ls))))))) h29d5@f) ((h2941@current-library-collection))))) (set! h2990@library-path (h2899@h27c3@make-parameter '(".") (lambda (h29d9@x) (if (and (list? h29d9@x) (for-all string? h29d9@x)) (map (lambda (h29db@x) h29db@x) h29d9@x) (assertion-violation 'library-path '"not a list of strings" h29d9@x))))) (set! h2992@library-extensions (h2899@h27c3@make-parameter '(".sls" ".ss" ".scm") (lambda (h29dd@x) (if (and (list? h29dd@x) (for-all string? h29dd@x)) (map (lambda (h29df@x) h29df@x) h29dd@x) (assertion-violation 'library-extensions '"not a list of strings" h29dd@x))))) (set! h2994@library-name->file-name (lambda (h29e1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (h29e7@h29e4 h29e8@h29e6) ((lambda (h29eb@extract h29ec@p) ((lambda (h29f0@display-hex) (begin (set! h29f0@display-hex (lambda (h29f9@n) (if (<= '0 h29f9@n '9) (display h29f9@n h29ec@p) (display (integer->char (+ (char->integer '#\a) (- h29f9@n '10))) h29ec@p)))) (begin ((letrec ((h29f1@f (lambda (h29f3@ls) (if (not (null? h29f3@ls)) (begin (display '"/" h29ec@p) (for-each (lambda (h29f5@c) (if (or (char<=? '#\a h29f5@c '#\z) (char<=? '#\A h29f5@c '#\Z) (char<=? '#\0 h29f5@c '#\9) (memv h29f5@c '(#\- #\. #\_ #\~))) (display h29f5@c h29ec@p) (begin (display '"%" h29ec@p) ((lambda (h29f7@n) (begin (h29f0@display-hex (quotient h29f7@n '16)) (h29f0@display-hex (remainder h29f7@n '16)))) (char->integer h29f5@c))))) (string->list (symbol->string (car h29f3@ls)))) (h29f1@f (cdr h29f3@ls))) (void))))) h29f1@f) h29e1@x) (h29eb@extract)))) '#f)) h29e8@h29e6 h29e7@h29e4))))) (set! h2996@file-locator (h2899@h27c3@make-parameter (lambda (h29fb@x) ((lambda (h29fd@str) ((letrec ((h29ff@f (lambda (h2a01@ls h2a02@exts h2a03@failed-list) (if (null? h2a01@ls) ((lambda () ((lambda (h2a0f@h2a0a h2a11@h2a0c h2a13@h2a0b h2a16@h2a09 h2a18@make-library-resolution-condition h2a1a@h2a07 h2a1c@h2a08 h2a1e@library-resolution-condition? h2a20@condition-library h2a22@condition-files) (begin (set! h2a0f@h2a0a (make-record-type-descriptor '&library-resolution h4caa@h49f1@&condition-rtd 'h2a0d '#f '#f '#((immutable library) (immutable files)))) (set! h2a11@h2a0c '#f) (set! h2a13@h2a0b (make-record-constructor-descriptor h2a0f@h2a0a h4cab@h49f3@&condition-rcd h2a11@h2a0c)) (set! h2a16@h2a09 (record-predicate h2a0f@h2a0a)) (set! h2a18@make-library-resolution-condition (record-constructor h2a13@h2a0b)) (set! h2a1a@h2a07 (record-accessor h2a0f@h2a0a '0)) (set! h2a1c@h2a08 (record-accessor h2a0f@h2a0a '1)) (set! h2a1e@library-resolution-condition? (condition-predicate h2a0f@h2a0a)) (set! h2a20@condition-library (condition-accessor h2a0f@h2a0a h2a1a@h2a07)) (set! h2a22@condition-files (condition-accessor h2a0f@h2a0a h2a1c@h2a08)) (raise (condition (h4cca@h4a8b@make-error) (h4cec@h4ae7@make-who-condition 'expander) (h4cb0@h4a48@make-message-condition '"cannot locate library in library-path") (h2a18@make-library-resolution-condition h29fb@x (reverse h2a03@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? h2a02@exts) (h29ff@f (cdr h2a01@ls) (h2992@library-extensions) h2a03@failed-list) ((lambda (h2a23@name) (if (file-exists? h2a23@name) h2a23@name (h29ff@f h2a01@ls (cdr h2a02@exts) (cons h2a23@name h2a03@failed-list)))) (string-append (car h2a01@ls) h29fd@str (car h2a02@exts)))))))) h29ff@f) (h2990@library-path) (h2992@library-extensions) '())) (h2994@library-name->file-name h29fb@x))) (lambda (h2a25@f) (if (procedure? h2a25@f) h2a25@f (assertion-violation 'file-locator '"not a procedure" h2a25@f))))) (set! h2998@serialize-all (lambda (h2a27@serialize h2a28@compile) ((lambda (h2a2c@library-desc) (begin (set! h2a2c@library-desc (lambda (h2a2f@x) (list (h2952@library-id h2a2f@x) (h2954@library-name h2a2f@x)))) (for-each (lambda (h2a2d@x) (if (h296c@library-source-file-name h2a2d@x) (h2a27@serialize (h296c@library-source-file-name h2a2d@x) (list (h2952@library-id h2a2d@x) (h2954@library-name h2a2d@x) (h2956@library-version h2a2d@x) (map h2a2c@library-desc (h2958@library-imp* h2a2d@x)) (map h2a2c@library-desc (h295a@library-vis* h2a2d@x)) (map h2a2c@library-desc (h295c@library-inv* h2a2d@x)) (h295e@library-subst h2a2d@x) (h2960@library-env h2a2d@x) (h2a28@compile (h2966@library-visit-code h2a2d@x)) (h2a28@compile (h2968@library-invoke-code h2a2d@x)) (h296a@library-visible? h2a2d@x))) (void))) ((h2941@current-library-collection))))) '#f))) (set! h299a@current-precompiled-library-loader (h2899@h27c3@make-parameter (lambda (h2a31@filename h2a32@sk) '#f))) (set! h299c@try-load-from-file (lambda (h2a35@filename) ((h299a@current-precompiled-library-loader) h2a35@filename (lambda h2a5b ((lambda (h2a5c) (if (= h2a5c '11) (apply (lambda (h2a37@id h2a38@name h2a39@ver h2a3a@imp* h2a3b@vis* h2a3c@inv* h2a3d@exp-subst h2a3e@exp-env h2a3f@visit-proc h2a40@invoke-proc h2a41@visible?) ((letrec ((h2a4d@f (lambda (h2a4f@deps) (if (null? h2a4f@deps) (begin (h29b0@install-library h2a37@id h2a38@name h2a39@ver h2a3a@imp* h2a3b@vis* h2a3c@inv* h2a3d@exp-subst h2a3e@exp-env h2a3f@visit-proc h2a40@invoke-proc '#f '#f h2a41@visible? '#f) '#t) ((lambda (h2a51@d) ((lambda (h2a53@label h2a54@dname) ((lambda (h2a57@l) (if (and (h294e@library? h2a57@l) (eq? h2a53@label (h2952@library-id h2a57@l))) (h2a4d@f (cdr h2a4f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" h2a38@name h2a54@dname h2a35@filename h2a57@l h2a53@label (h2952@library-id h2a57@l)) '#f))) (h29a6@find-library-by-name h2a54@dname))) (car h2a51@d) (cadr h2a51@d))) (car h2a4f@deps)))))) h2a4d@f) (append h2a3a@imp* h2a3b@vis* h2a3c@inv*))) h2a5b) (if (>= h2a5c '0) (apply (lambda h2a59@others '#f) h2a5b) (error 'apply '"invalid arg count")))) (length h2a5b)))))) (set! h299e@library-loader (h2899@h27c3@make-parameter (lambda (h2a5d@x) ((lambda (h2a5f@file-name) (if (not h2a5f@file-name) (assertion-violation '#f '"cannot file library" h2a5d@x) (or (h299c@try-load-from-file h2a5f@file-name) ((h29a0@current-library-expander) (h2898@h27c1@read-library-source-file h2a5f@file-name) h2a5f@file-name (lambda (h2a61@name) (if (not (fast-equal? h2a61@name h2a5d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (h2a67@h2a64 h2a68@h2a66) ((lambda (h2a6b@e h2a6c@p) (begin (display '"expected to find library " h2a6c@p) (write h2a5d@x h2a6c@p) (display '" in file " h2a6c@p) (display h2a5f@file-name h2a6c@p) (display '", found " h2a6c@p) (write h2a61@name h2a6c@p) (display '" instead" h2a6c@p) (h2a6b@e))) h2a68@h2a66 h2a67@h2a64)))) (void))))))) ((h2996@file-locator) h2a5d@x))) (lambda (h2a6f@f) (if (procedure? h2a6f@f) h2a6f@f (assertion-violation 'library-locator '"not a procedure" h2a6f@f))))) (set! h29a0@current-library-expander (h2899@h27c3@make-parameter (lambda (h2a71@x) (assertion-violation 'library-expander '"not initialized")) (lambda (h2a73@f) (if (procedure? h2a73@f) h2a73@f (assertion-violation 'library-expander '"not a procedure" h2a73@f))))) (set! h29a2@external-pending-libraries (h2899@h27c3@make-parameter '())) (set! h29a4@find-external-library (lambda (h2a75@name) (begin (if (member h2a75@name (h29a2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" h2a75@name) (void)) ((lambda (h2a7b@h2a78 h2a7c@h2a7a) ((lambda (h2a7f@swap) (dynamic-wind h2a7f@swap (lambda () (begin ((h299e@library-loader) h2a75@name) (or (h298e@find-library-by (lambda (h2a81@x) (fast-equal? (h2954@library-name h2a81@x) h2a75@name))) (assertion-violation '#f '"handling external library did not yield the correct library" h2a75@name)))) h2a7f@swap)) (lambda () ((lambda (h2a83@t) (begin (h2a7b@h2a78 h2a7c@h2a7a) (set! h2a7c@h2a7a h2a83@t))) (h2a7b@h2a78))))) h29a2@external-pending-libraries (cons h2a75@name (h29a2@external-pending-libraries)))))) (set! h29a6@find-library-by-name (lambda (h2a85@name) (or (h298e@find-library-by (lambda (h2a87@x) (fast-equal? (h2954@library-name h2a87@x) h2a85@name))) (h29a4@find-external-library h2a85@name)))) (set! h29a8@library-exists? (lambda (h2a89@name) (and (h298e@find-library-by (lambda (h2a8b@x) (fast-equal? (h2954@library-name h2a8b@x) h2a89@name))) '#t))) (set! h29aa@find-library-by-spec/die (lambda (h2a8d@spec) ((lambda (h2a8f@id) (or (h298e@find-library-by (lambda (h2a91@x) (eq? h2a8f@id (h2952@library-id h2a91@x)))) (assertion-violation '#f '"cannot find library with required spec" h2a8d@spec))) (car h2a8d@spec)))) (set! h29ac@label->binding-table (make-eq-hashtable)) (set! h29ae@install-library-record (lambda (h2a93@lib) (begin ((lambda (h2a95@exp-env) (for-each (lambda (h2a97@x) ((lambda (h2a99@label h2a9a@binding) ((lambda (h2a9d@binding) (begin (if (hashtable-ref h29ac@label->binding-table h2a99@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" h2a99@label (hashtable-ref h29ac@label->binding-table h2a99@label '#f) h2a9d@binding) (exit)) (void)) (hashtable-set! h29ac@label->binding-table h2a99@label h2a9d@binding))) ((lambda (h2a9f@t) (if (memv h2a9f@t '(global)) (cons 'global (cons h2a93@lib (cdr h2a9a@binding))) (if (memv h2a9f@t '(global-macro)) (cons 'global-macro (cons h2a93@lib (cdr h2a9a@binding))) (if (memv h2a9f@t '(global-macro!)) (cons 'global-macro! (cons h2a93@lib (cdr h2a9a@binding))) h2a9a@binding)))) (car h2a9a@binding)))) (car h2a97@x) (cdr h2a97@x))) h2a95@exp-env)) (h2960@library-env h2a93@lib)) ((h2941@current-library-collection) h2a93@lib)))) (set! h29b0@install-library (lambda (h2aa1@id h2aa2@name h2aa3@ver h2aa4@imp* h2aa5@vis* h2aa6@inv* h2aa7@exp-subst h2aa8@exp-env h2aa9@visit-proc h2aaa@invoke-proc h2aab@visit-code h2aac@invoke-code h2aad@visible? h2aae@source-file-name) ((lambda (h2abd@imp-lib* h2abe@vis-lib* h2abf@inv-lib*) (begin (if (not (and (symbol? h2aa1@id) (list? h2aa2@name) (list? h2aa3@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" h2aa1@id h2aa2@name h2aa3@ver) (void)) (if (h29a8@library-exists? h2aa2@name) (assertion-violation 'install-library '"library is already installed" h2aa2@name) (void)) ((lambda (h2ac3@lib) (h29ae@install-library-record h2ac3@lib)) (h2950@make-library h2aa1@id h2aa2@name h2aa3@ver h2abd@imp-lib* h2abe@vis-lib* h2abf@inv-lib* h2aa7@exp-subst h2aa8@exp-env h2aa9@visit-proc h2aaa@invoke-proc h2aab@visit-code h2aac@invoke-code h2aad@visible? h2aae@source-file-name)))) (map h29aa@find-library-by-spec/die h2aa4@imp*) (map h29aa@find-library-by-spec/die h2aa5@vis*) (map h29aa@find-library-by-spec/die h2aa6@inv*)))) (set! h29b2@imported-label->binding (lambda (h2ac5@lab) (hashtable-ref h29ac@label->binding-table h2ac5@lab '#f))) (set! h29b4@invoke-library (lambda (h2ac7@lib) ((lambda (h2ac9@invoke) (if (procedure? h2ac9@invoke) (begin (h2980@set-library-invoke-state! h2ac7@lib (lambda () (assertion-violation 'invoke '"circularity detected" h2ac7@lib))) (for-each h29b4@invoke-library (h295c@library-inv* h2ac7@lib)) (h2980@set-library-invoke-state! h2ac7@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" h2ac7@lib))) (h2ac9@invoke) (h2980@set-library-invoke-state! h2ac7@lib '#t)) (void))) (h2964@library-invoke-state h2ac7@lib)))) (set! h29b6@visit-library (lambda (h2acb@lib) ((lambda (h2acd@visit) (if (procedure? h2acd@visit) (begin (h297e@set-library-visit-state! h2acb@lib (lambda () (assertion-violation 'visit '"circularity detected" h2acb@lib))) (for-each h29b4@invoke-library (h295a@library-vis* h2acb@lib)) (h297e@set-library-visit-state! h2acb@lib (lambda () (assertion-violation 'invoke '"first visit did not return" h2acb@lib))) (h2acd@visit) (h297e@set-library-visit-state! h2acb@lib '#t)) (void))) (h2962@library-visit-state h2acb@lib)))) (set! h29b8@invoke-library-by-spec (lambda (h2acf@spec) (h29b4@invoke-library (h29aa@find-library-by-spec/die h2acf@spec)))) (set! h29ba@installed-libraries (lambda h2ad7 ((lambda (h2ad8) (if (= h2ad8 '1) (apply (lambda (h2ad1@all?) ((letrec ((h2ad3@f (lambda (h2ad5@ls) (if (null? h2ad5@ls) '() (if (or h2ad1@all? (h296a@library-visible? (car h2ad5@ls))) (cons (car h2ad5@ls) (h2ad3@f (cdr h2ad5@ls))) (h2ad3@f (cdr h2ad5@ls))))))) h2ad3@f) ((h2941@current-library-collection)))) h2ad7) (if (= h2ad8 '0) (apply (lambda () (h29ba@installed-libraries '#f)) h2ad7) (error 'apply '"invalid arg count")))) (length h2ad7)))) (set! h29bc@library-spec (lambda (h2ad9@x) (begin (if (not (h294e@library? h2ad9@x)) (assertion-violation 'library-spec '"not a library" h2ad9@x) (void)) (list (h2952@library-id h2ad9@x) (h2954@library-name h2ad9@x) (h2956@library-version h2ad9@x))))) (begin (set! h2b17@h29bc@library-spec h29bc@library-spec) (set! h2b16@h29ba@installed-libraries h29ba@installed-libraries) (set! h2b15@h29b8@invoke-library-by-spec h29b8@invoke-library-by-spec) (set! h2b14@h29b6@visit-library h29b6@visit-library) (set! h2b13@h29b4@invoke-library h29b4@invoke-library) (set! h2b12@h29b2@imported-label->binding h29b2@imported-label->binding) (set! h2b11@h29b0@install-library h29b0@install-library) (set! h2b10@h29ae@install-library-record h29ae@install-library-record) (set! h2b0f@h29ac@label->binding-table h29ac@label->binding-table) (set! h2b0e@h29aa@find-library-by-spec/die h29aa@find-library-by-spec/die) (set! h2b0d@h29a8@library-exists? h29a8@library-exists?) (set! h2b0c@h29a6@find-library-by-name h29a6@find-library-by-name) (set! h2b0b@h29a4@find-external-library h29a4@find-external-library) (set! h2b0a@h29a2@external-pending-libraries h29a2@external-pending-libraries) (set! h2b09@h29a0@current-library-expander h29a0@current-library-expander) (set! h2b08@h299e@library-loader h299e@library-loader) (set! h2b07@h299c@try-load-from-file h299c@try-load-from-file) (set! h2b06@h299a@current-precompiled-library-loader h299a@current-precompiled-library-loader) (set! h2b05@h2998@serialize-all h2998@serialize-all) (set! h2b04@h2996@file-locator h2996@file-locator) (set! h2b03@h2994@library-name->file-name h2994@library-name->file-name) (set! h2b02@h2992@library-extensions h2992@library-extensions) (set! h2b01@h2990@library-path h2990@library-path) (set! h2b00@h298e@find-library-by h298e@find-library-by) (set! h2aff@h298c@find-dependencies h298c@find-dependencies) (set! h2afe@h298a@rp h298a@rp) (set! h2afd@h2988@set-library-source-file-name! h2988@set-library-source-file-name!) (set! h2afc@h2986@set-library-visible?! h2986@set-library-visible?!) (set! h2afb@h2984@set-library-invoke-code! h2984@set-library-invoke-code!) (set! h2afa@h2982@set-library-visit-code! h2982@set-library-visit-code!) (set! h2af9@h2980@set-library-invoke-state! h2980@set-library-invoke-state!) (set! h2af8@h297e@set-library-visit-state! h297e@set-library-visit-state!) (set! h2af7@h297c@set-library-env! h297c@set-library-env!) (set! h2af6@h297a@set-library-subst! h297a@set-library-subst!) (set! h2af5@h2978@set-library-inv*! h2978@set-library-inv*!) (set! h2af4@h2976@set-library-vis*! h2976@set-library-vis*!) (set! h2af3@h2974@set-library-imp*! h2974@set-library-imp*!) (set! h2af2@h2972@set-library-version! h2972@set-library-version!) (set! h2af1@h2970@set-library-name! h2970@set-library-name!) (set! h2af0@h296e@set-library-id! h296e@set-library-id!) (set! h2aef@h296c@library-source-file-name h296c@library-source-file-name) (set! h2aee@h296a@library-visible? h296a@library-visible?) (set! h2aed@h2968@library-invoke-code h2968@library-invoke-code) (set! h2aec@h2966@library-visit-code h2966@library-visit-code) (set! h2aeb@h2964@library-invoke-state h2964@library-invoke-state) (set! h2aea@h2962@library-visit-state h2962@library-visit-state) (set! h2ae9@h2960@library-env h2960@library-env) (set! h2ae8@h295e@library-subst h295e@library-subst) (set! h2ae7@h295c@library-inv* h295c@library-inv*) (set! h2ae6@h295a@library-vis* h295a@library-vis*) (set! h2ae5@h2958@library-imp* h2958@library-imp*) (set! h2ae4@h2956@library-version h2956@library-version) (set! h2ae3@h2954@library-name h2954@library-name) (set! h2ae2@h2952@library-id h2952@library-id) (set! h2ae1@h2950@make-library h2950@make-library) (set! h2ae0@h294e@library? h294e@library?) (set! h2adf@h294b@h2943 h294b@h2943) (set! h2ade@h2949@h2944 h2949@h2944) (set! h2add@h2947@h2942 h2947@h2942) (set! h2adc@h2941@current-library-collection h2941@current-library-collection) (set! h2adb@h293f@make-collection h293f@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h2b1a@build-global-define h2b8b@build-lambda h2b8d@build-case-lambda h2b8f@build-let h2bbd@build-sequence h2bbf@build-void h2bc1@build-letrec h2bc3@build-letrec* h2bc5@build-library-letrec* h2bc7@build-receive) (begin (set! h2b1a@build-global-define (lambda (h2bc8@x) (h2bbf@build-void))) (set! h2b8b@build-lambda (lambda (h2bca@ae h2bcb@vars h2bcc@exp) (list 'lambda h2bcb@vars h2bcc@exp))) (set! h2b8d@build-case-lambda (lambda (h2bd0@ae h2bd1@vars* h2bd2@exp*) ((lambda (h2bd7@build-error h2bd9@build-pred h2bdb@build-apply h2bdd@expand-case-lambda) (begin (set! h2bd7@build-error (lambda (h2c0e@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! h2bd9@build-pred (lambda (h2bf6@ae h2bf7@n h2bf8@vars) (call-with-values (lambda () ((letrec ((h2c00@f (lambda (h2c02@vars h2c03@count) (if (pair? h2c02@vars) (h2c00@f (cdr h2c02@vars) (+ h2c03@count '1)) (if (null? h2c02@vars) (values h2c03@count '=) (values h2c03@count '>=)))))) h2c00@f) h2bf8@vars '0)) (lambda (h2c06@h2bfd h2c07@h2bff) ((lambda (h2c0a@pred h2c0b@count) (list (list 'primitive h2c0a@pred) h2bf7@n (list 'quote h2c0b@count))) h2c07@h2bff h2c06@h2bfd))))) (set! h2bdb@build-apply (lambda (h2bee@ae h2bef@g h2bf0@vars h2bf1@exp) (list '(primitive apply) (h2b8b@build-lambda h2bee@ae h2bf0@vars h2bf1@exp) h2bef@g))) (set! h2bdd@expand-case-lambda (lambda (h2bde@ae h2bdf@vars h2be0@exp*) ((lambda (h2be4@g h2be5@n) (list 'lambda h2be4@g (h2b8f@build-let h2bde@ae (list h2be5@n) (list (list '(primitive length) h2be4@g)) ((letrec ((h2be8@f (lambda (h2bea@vars* h2beb@exp*) (if (null? h2bea@vars*) (h2bd7@build-error h2bde@ae) (list 'if (h2bd9@build-pred h2bde@ae h2be5@n (car h2bea@vars*)) (h2bdb@build-apply h2bde@ae h2be4@g (car h2bea@vars*) (car h2beb@exp*)) (h2be8@f (cdr h2bea@vars*) (cdr h2beb@exp*))))))) h2be8@f) h2bd1@vars* h2be0@exp*)))) (gensym) (gensym)))) (if (= (length h2bd2@exp*) '1) (h2b8b@build-lambda h2bd0@ae (car h2bd1@vars*) (car h2bd2@exp*)) (h2bdd@expand-case-lambda h2bd0@ae h2bd1@vars* h2bd2@exp*)))) '#f '#f '#f '#f))) (set! h2b8f@build-let (lambda (h2c10@ae h2c11@lhs* h2c12@rhs* h2c13@body) (cons (h2b8b@build-lambda h2c10@ae h2c11@lhs* h2c13@body) h2c12@rhs*))) (set! h2bbd@build-sequence (lambda (h2c18@ae h2c19@exps) ((letrec ((h2c1c@loop (lambda (h2c1e@exps) (if (null? (cdr h2c1e@exps)) (car h2c1e@exps) (if (equal? (car h2c1e@exps) (h2bbf@build-void)) (h2c1c@loop (cdr h2c1e@exps)) (cons 'begin h2c1e@exps)))))) h2c1c@loop) h2c19@exps))) (set! h2bbf@build-void (lambda () '((primitive void)))) (set! h2bc1@build-letrec (lambda (h2c20@ae h2c21@vars h2c22@val-exps h2c23@body-exp) (if (null? h2c21@vars) h2c23@body-exp (list 'letrec (map list h2c21@vars h2c22@val-exps) h2c23@body-exp)))) (set! h2bc3@build-letrec* (lambda (h2c28@ae h2c29@vars h2c2a@val-exps h2c2b@body-exp) (if (null? h2c29@vars) h2c2b@body-exp (h2b8f@build-let h2c28@ae h2c29@vars (map (lambda (h2c30@x) (list 'quote '#f)) h2c29@vars) (h2bbd@build-sequence h2c28@ae (append (map (lambda (h2c32@lhs h2c33@rhs) (list 'set! h2c32@lhs h2c33@rhs)) h2c29@vars h2c2a@val-exps) (list h2c2b@body-exp))))))) (set! h2bc5@build-library-letrec* (lambda (h2c36@ae h2c37@name h2c38@vars h2c39@locs h2c3a@val-exps h2c3b@body-exp) (list 'library-letrec* h2c37@name (map list h2c38@vars h2c39@locs h2c3a@val-exps) h2c3b@body-exp))) (set! h2bc7@build-receive (lambda (h2c42@ae h2c43@vars h2c44@producer h2c45@body*) (begin (display '"************** in ") (cons 'receive (cons h2c43@vars (cons h2c44@producer h2c45@body*)))))) (begin (set! h2c53@h2bc7@build-receive h2bc7@build-receive) (set! h2c52@h2bc5@build-library-letrec* h2bc5@build-library-letrec*) (set! h2c51@h2bc3@build-letrec* h2bc3@build-letrec*) (set! h2c50@h2bc1@build-letrec h2bc1@build-letrec) (set! h2c4f@h2bbf@build-void h2bbf@build-void) (set! h2c4e@h2bbd@build-sequence h2bbd@build-sequence) (set! h2c4d@h2b8f@build-let h2b8f@build-let) (set! h2c4c@h2b8d@build-case-lambda h2b8d@build-case-lambda) (set! h2c4b@h2b8b@build-lambda h2b8b@build-lambda) (set! h2c4a@h2b1a@build-global-define h2b1a@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h2c62@file-options-macro h2c64@set-cons h2c66@set-union h2c6b@top-mark* h2c6d@top-marked? h2c6f@gen-lexical h2c71@gen-global h2c73@gen-label h2c75@gen-top-level-label h2c77@gen-define-label+loc h2c79@gen-define-label h2c7f@h2c7a h2c81@h2c7c h2c83@h2c7b h2c86@rib? h2c88@make-rib h2c8a@rib-sym* h2c8c@rib-mark** h2c8e@rib-label* h2c90@rib-sealed/freq h2c92@rib-cache h2c94@set-rib-sym*! h2c96@set-rib-mark**! h2c98@set-rib-label*! h2c9a@set-rib-sealed/freq! h2c9c@set-rib-cache! h2c9e@make-empty-rib h2ca0@extend-rib! h2ca2@extend-rib/nc! h2ca4@make-rib-map h2ca6@seal-rib! h2ca8@unseal-rib! h2caa@make-full-rib h2cb0@h2cab h2cb2@h2cad h2cb4@h2cac h2cb7@stx? h2cb9@make-stx h2cbb@stx-expr h2cbd@stx-mark* h2cbf@stx-subst* h2cc1@stx-ae* h2cc3@set-stx-expr! h2cc5@set-stx-mark*! h2cc7@set-stx-subst*! h2cc9@set-stx-ae*! h2ccb@rp h2ccd@datum->stx h2ccf@gen-mark h2cd1@anti-mark h2cd3@anti-mark? h2cd5@join-wraps h2cd7@mkstx h2cd9@add-mark h2cdb@add-subst h2cdd@syntax-kind? h2cdf@syntax-vector->list h2ce1@syntax-pair? h2ce3@syntax-vector? h2ce5@syntax-null? h2ce7@syntax-list? h2ce9@syntax-car h2ceb@syntax-cdr h2ced@syntax->list h2cef@id? h2cf1@id->sym h2cf3@same-marks? h2cf5@bound-id=? h2cf7@free-id=? h2cf9@valid-bound-ids? h2cfb@distinct-bound-ids? h2cfd@bound-id-member? h2cff@self-evaluating? h2d01@strip-annotations h2d03@strip h2d05@stx->datum h2d07@same-marks*? h2d09@id->label h2d0b@id->real-label h2d0d@label->binding h2d0f@make-binding h2d11@binding-type h2d13@binding-value h2d15@raise-unbound-error h2d17@syntax-type h2d25@sanitize-binding h2d27@make-variable-transformer h2d29@variable-transformer? h2d2b@variable-transformer-procedure h2d2d@make-eval-transformer h2e7e@parse-define h2e80@parse-define-syntax h2e82@scheme-stx-hashtable h2e84@scheme-stx h2e86@lexical-var h2e88@lexical-mutable? h2e8a@set-lexical-mutable! h2e8c@add-lexical h2e8e@add-lexicals h2e90@letrec-helper h2e92@letrec-transformer h2e94@letrec*-transformer h2e96@fluid-let-syntax-transformer h2e98@type-descriptor-transformer h2e9a@record-type-descriptor-transformer h2e9c@record-constructor-descriptor-transformer h2e9e@when-macro h2ea0@unless-macro h2ea2@if-transformer h2ea4@and-transformer h2ea6@or-transformer h2ea8@case-macro h2eaa@quote-transformer h2eac@case-lambda-transformer h2eae@lambda-transformer h2eb0@bless h2eb2@with-syntax-macro h2eb4@invalid-fmls-error h2eb6@let-macro h2eb8@let-values-macro h2eba@let*-values-macro h2ebc@trace-lambda-macro h2ebe@trace-define-macro h2ec0@trace-define-syntax-macro h2ec2@trace-let/rec-syntax h2ec4@trace-let-syntax-macro h2ec6@trace-letrec-syntax-macro h2ec8@guard-macro h2eca@define-enumeration-macro h2ecc@time-macro h2ece@delay-macro h2ed0@assert-macro h2ed2@endianness-macro h2ed4@identifier-syntax-macro h2ed6@do-macro h2ed8@let*-macro h2eda@or-macro h2edc@and-macro h2ede@cond-macro h2ee0@do-include h2ee2@include-macro h2ee4@include-into-macro h2ee6@syntax-rules-macro h2ee8@quasiquote-macro h2eea@quasisyntax-macro h2eec@define-struct-macro h2eee@define-record-type-macro h2ef0@define-condition-type-macro h2ef2@incorrect-usage-macro h2ef4@parameterize-macro h2ef6@foreign-call-transformer h2ef8@convert-pattern h2efa@syntax-dispatch h2efc@ellipsis? h2efe@underscore? h2f00@verify-literals h2f02@syntax-case-transformer h2f04@ellipsis-map h2f06@syntax-transformer h2f08@core-macro-transformer h2f0a@symbol-macro h2f0c@macro-transformer h2f0e@local-macro-transformer h2f10@do-macro-call h2f12@chi-macro h2f14@chi-local-macro h2f16@chi-global-macro h2f18@chi-expr* h2f1a@chi-application h2f1c@chi-expr h2f1e@chi-set! h2f20@verify-formals h2f22@chi-lambda-clause h2f24@chi-lambda-clause* h2f26@chi-defun h2f28@chi-rhs h2f2a@expand-interaction-rhs*/init* h2f2c@chi-rhs* h2f2e@find-bound=? h2f30@find-dups h2f32@chi-internal h2f34@parse-module h2f3a@h2f35 h2f3c@h2f37 h2f3e@h2f36 h2f41@module-interface? h2f43@make-module-interface h2f45@module-interface-first-mark h2f47@module-interface-exp-id-vec h2f49@module-interface-exp-lab-vec h2f4b@set-module-interface-first-mark! h2f4d@set-module-interface-exp-id-vec! h2f4f@set-module-interface-exp-lab-vec! h2f51@module-interface-exp-id* h2f53@chi-internal-module h2f55@chi-body* h2f57@expand-transformer h2f59@parse-exports h2f5b@parse-library-name h2f5d@parse-library h2f5f@parse-import-spec* h2f61@make-top-rib h2f63@make-collector h2f65@inv-collector h2f67@vis-collector h2f69@imp-collector h2f6b@chi-library-internal h2f6d@chi-interaction-expr h2f6f@library-body-expander h2f71@core-library-expander h2f73@parse-top-level-program h2f75@top-level-expander h2f7b@h2f76 h2f7d@h2f78 h2f7f@h2f77 h2f82@env? h2f84@make-env h2f86@env-names h2f88@env-labels h2f8a@env-itc h2f8c@set-env-names! h2f8e@set-env-labels! h2f90@set-env-itc! h2f92@rp h2f98@h2f93 h2f9a@h2f95 h2f9c@h2f94 h2f9f@interaction-env? h2fa1@make-interaction-env h2fa3@interaction-env-rib h2fa5@interaction-env-r h2fa7@interaction-env-locs h2fa9@set-interaction-env-rib! h2fab@set-interaction-env-r! h2fad@set-interaction-env-locs! h2faf@rp h2fb1@interaction-environment-symbols h2fb3@environment-bindings h2fb5@parse-binding h2fb7@environment? h2fb9@environment-symbols h2fbb@environment h2fbd@null-environment h2fbf@scheme-report-environment h2fc1@expand h2fc3@eval h2fc5@library-expander h2fc7@boot-library-expand h2fc9@rev-map-append h2fcb@build-exports h2fcd@make-export-subst h2fcf@make-export-env/macros h2fd1@generate-temporaries h2fd3@free-identifier=? h2fd5@bound-identifier=? h2fd7@make-source-condition h2fd9@extract-position-condition h2fdb@expression-position h2fdd@assertion-error h2fdf@syntax-error h2fe1@syntax-violation* h2fe3@syntax-violation h2fe5@identifier? h2fe7@datum->syntax h2fe9@syntax->datum h2feb@compile-r6rs-top-level h2fed@pre-compile-r6rs-top-level h2fef@interaction-environment h2ff1@top-level-context) (begin (set! h2c62@file-options-macro (lambda (h2ff2@x) ((lambda (h2ff5@valid-option?) (begin (set! h2ff5@valid-option? (lambda (h2ffe@x) (and (h2cef@id? h2ffe@x) (memq (h2cf1@id->sym h2ffe@x) '(no-fail no-create no-truncate))))) ((lambda (h2ff6@t) ((lambda (h2ff8@ls/false) (if (and h2ff8@ls/false (apply (lambda (h2ffa@opt*) (for-all h2ff5@valid-option? h2ffa@opt*)) h2ff8@ls/false)) (apply (lambda (h2ffc@opt*) (h2eb0@bless (list 'make-file-options (list 'quote h2ffc@opt*)))) h2ff8@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h2ff6@t))) (h2efa@syntax-dispatch h2ff6@t '(_ . each-any)))) h2ff2@x))) '#f))) (set! h2c64@set-cons (lambda (h3000@x h3001@ls) (if (memq h3000@x h3001@ls) h3001@ls (cons h3000@x h3001@ls)))) (set! h2c66@set-union (lambda (h3004@ls1 h3005@ls2) (if (null? h3004@ls1) h3005@ls2 (if (memq (car h3004@ls1) h3005@ls2) (h2c66@set-union (cdr h3004@ls1) h3005@ls2) (cons (car h3004@ls1) (h2c66@set-union (cdr h3004@ls1) h3005@ls2)))))) (set! h2c6b@top-mark* '(top)) (set! h2c6d@top-marked? (lambda (h3008@m*) (memq 'top h3008@m*))) (set! h2c6f@gen-lexical (lambda (h300a@sym) (if (symbol? h300a@sym) (gensym h300a@sym) (if (h2cb7@stx? h300a@sym) (h2c6f@gen-lexical (h2cf1@id->sym h300a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" h300a@sym))))) (set! h2c71@gen-global (lambda (h300c@x) (h2c6f@gen-lexical h300c@x))) (set! h2c73@gen-label (lambda (h300e@_) (gensym))) (set! h2c75@gen-top-level-label (lambda (h3010@id h3011@rib) ((lambda (h3015@find) (begin (set! h3015@find (lambda (h3020@sym h3021@mark* h3022@sym* h3023@mark** h3024@label*) (and (pair? h3022@sym*) (if (and (eq? h3020@sym (car h3022@sym*)) (h2cf3@same-marks? h3021@mark* (car h3023@mark**))) (car h3024@label*) (h3015@find h3020@sym h3021@mark* (cdr h3022@sym*) (cdr h3023@mark**) (cdr h3024@label*)))))) ((lambda (h3016@sym h3017@mark*) ((lambda (h301a@sym*) ((lambda (h301c@t) (if h301c@t ((lambda (h301e@label) (if (h2b12@h29b2@imported-label->binding h301e@label) (gensym) h301e@label)) h301c@t) (gensym))) (and (memq h3016@sym (h2c8a@rib-sym* h3011@rib)) (h3015@find h3016@sym h3017@mark* h301a@sym* (h2c8c@rib-mark** h3011@rib) (h2c8e@rib-label* h3011@rib))))) (h2c8a@rib-sym* h3011@rib))) (h2cf1@id->sym h3010@id) (h2cbd@stx-mark* h3010@id)))) '#f))) (set! h2c77@gen-define-label+loc (lambda (h302a@id h302b@rib) ((lambda (h302e@t) (if h302e@t ((lambda (h3030@env) ((lambda (h3032@label h3033@locs) (values h3032@label ((lambda (h3036@t) (if h3036@t (cdr h3036@t) ((lambda (h3038@loc) (begin (h2fad@set-interaction-env-locs! h3030@env (cons (cons h3032@label h3038@loc) h3033@locs)) h3038@loc)) (h2c6f@gen-lexical h302a@id)))) (assq h3032@label h3033@locs)))) (h2c75@gen-top-level-label h302a@id h302b@rib) (h2fa7@interaction-env-locs h3030@env))) h302e@t) (values (gensym) (h2c6f@gen-lexical h302a@id)))) (h2ff1@top-level-context)))) (set! h2c79@gen-define-label (lambda (h303a@id h303b@rib) (if (h2ff1@top-level-context) (h2c75@gen-top-level-label h303a@id h303b@rib) (gensym)))) (set! h2c7f@h2c7a (make-record-type-descriptor 'rib '#f 'h2c7d '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! h2c81@h2c7c '#f) (set! h2c83@h2c7b (make-record-constructor-descriptor h2c7f@h2c7a '#f h2c81@h2c7c)) (set! h2c86@rib? (record-predicate h2c7f@h2c7a)) (set! h2c88@make-rib (record-constructor h2c83@h2c7b)) (set! h2c8a@rib-sym* (record-accessor h2c7f@h2c7a '0)) (set! h2c8c@rib-mark** (record-accessor h2c7f@h2c7a '1)) (set! h2c8e@rib-label* (record-accessor h2c7f@h2c7a '2)) (set! h2c90@rib-sealed/freq (record-accessor h2c7f@h2c7a '3)) (set! h2c92@rib-cache (record-accessor h2c7f@h2c7a '4)) (set! h2c94@set-rib-sym*! (record-mutator h2c7f@h2c7a '0)) (set! h2c96@set-rib-mark**! (record-mutator h2c7f@h2c7a '1)) (set! h2c98@set-rib-label*! (record-mutator h2c7f@h2c7a '2)) (set! h2c9a@set-rib-sealed/freq! (record-mutator h2c7f@h2c7a '3)) (set! h2c9c@set-rib-cache! (record-mutator h2c7f@h2c7a '4)) (set! h2c9e@make-empty-rib (lambda () (h2c88@make-rib '() '() '() '#f '#f))) (set! h2ca0@extend-rib! (lambda (h303e@rib h303f@id h3040@label) ((lambda (h3045@find) (begin (set! h3045@find (lambda (h3052@sym h3053@mark* h3054@sym* h3055@mark** h3056@label*) (and (pair? h3054@sym*) (if (and (eq? h3052@sym (car h3054@sym*)) (h2cf3@same-marks? h3053@mark* (car h3055@mark**))) h3056@label* (h3045@find h3052@sym h3053@mark* (cdr h3054@sym*) (cdr h3055@mark**) (cdr h3056@label*)))))) (begin (if (h2c90@rib-sealed/freq h303e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" h303e@rib) (void)) ((lambda (h3046@sym h3047@mark*) ((lambda (h304a@sym*) ((lambda (h304c@t) (if h304c@t ((lambda (h304e@p) (if (not (eq? h3040@label (car h304e@p))) (if (h2ff1@top-level-context) (set-car! h304e@p h3040@label) (h2fe3@syntax-violation '#f '"multiple definitions of identifier" h303f@id)) (void))) h304c@t) (begin (if (h2c92@rib-cache h303e@rib) (hashtable-update! (h2c92@rib-cache h303e@rib) h3046@sym (lambda (h3050@e) (cons (cons h3047@mark* h3040@label) h3050@e)) '()) (void)) (h2c94@set-rib-sym*! h303e@rib (cons h3046@sym h304a@sym*)) (h2c96@set-rib-mark**! h303e@rib (cons h3047@mark* (h2c8c@rib-mark** h303e@rib))) (h2c98@set-rib-label*! h303e@rib (cons h3040@label (h2c8e@rib-label* h303e@rib)))))) (and (memq h3046@sym (h2c8a@rib-sym* h303e@rib)) (h3045@find h3046@sym h3047@mark* h304a@sym* (h2c8c@rib-mark** h303e@rib) (h2c8e@rib-label* h303e@rib))))) (h2c8a@rib-sym* h303e@rib))) (h2cf1@id->sym h303f@id) (h2cbd@stx-mark* h303f@id))))) '#f))) (set! h2ca2@extend-rib/nc! (lambda (h305c@rib h305d@id h305e@label) ((lambda (h3062@sym h3063@mark*) ((lambda (h3066@sym*) (begin (if (h2c92@rib-cache h305c@rib) (hashtable-update! (h2c92@rib-cache h305c@rib) h3062@sym (lambda (h3068@e) (cons (cons h3063@mark* h305e@label) h3068@e)) '()) (void)) (h2c94@set-rib-sym*! h305c@rib (cons h3062@sym h3066@sym*)) (h2c96@set-rib-mark**! h305c@rib (cons h3063@mark* (h2c8c@rib-mark** h305c@rib))) (h2c98@set-rib-label*! h305c@rib (cons h305e@label (h2c8e@rib-label* h305c@rib))))) (h2c8a@rib-sym* h305c@rib))) (h2cf1@id->sym h305d@id) (h2cbd@stx-mark* h305d@id)))) (set! h2ca4@make-rib-map (lambda (h306a@sym*) ((lambda (h306c@ht) ((letrec ((h306e@f (lambda (h3070@i h3071@sym*) (if (null? h3071@sym*) h306c@ht (begin (hashtable-update! h306c@ht (car h3071@sym*) (lambda (h3074@x) (cons h3070@i h3074@x)) '()) (h306e@f (+ h3070@i '1) (cdr h3071@sym*))))))) h306e@f) '0 h306a@sym*)) (make-eq-hashtable)))) (set! h2ca6@seal-rib! (lambda (h3076@rib) ((lambda (h3078@sym*) (if (not (null? h3078@sym*)) (begin (h2c94@set-rib-sym*! h3076@rib (list->vector h3078@sym*)) (h2c96@set-rib-mark**! h3076@rib (list->vector (h2c8c@rib-mark** h3076@rib))) (h2c98@set-rib-label*! h3076@rib (list->vector (h2c8e@rib-label* h3076@rib))) (h2c9a@set-rib-sealed/freq! h3076@rib (h2ca4@make-rib-map h3078@sym*))) (void))) (h2c8a@rib-sym* h3076@rib)))) (set! h2ca8@unseal-rib! (lambda (h307a@rib) (if (h2c90@rib-sealed/freq h307a@rib) (begin (h2c9a@set-rib-sealed/freq! h307a@rib '#f) (h2c94@set-rib-sym*! h307a@rib (vector->list (h2c8a@rib-sym* h307a@rib))) (h2c96@set-rib-mark**! h307a@rib (vector->list (h2c8c@rib-mark** h307a@rib))) (h2c98@set-rib-label*! h307a@rib (vector->list (h2c8e@rib-label* h307a@rib)))) (void)))) (set! h2caa@make-full-rib (lambda (h307c@id* h307d@label*) ((lambda (h3080@r) (begin (h2ca6@seal-rib! h3080@r) h3080@r)) (h2c88@make-rib (map h2cf1@id->sym h307c@id*) (map h2cbd@stx-mark* h307c@id*) h307d@label* '#f '#f)))) (set! h2cb0@h2cab (make-record-type-descriptor 'stx '#f 'h2cae '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! h2cb2@h2cad '#f) (set! h2cb4@h2cac (make-record-constructor-descriptor h2cb0@h2cab '#f h2cb2@h2cad)) (set! h2cb7@stx? (record-predicate h2cb0@h2cab)) (set! h2cb9@make-stx (record-constructor h2cb4@h2cac)) (set! h2cbb@stx-expr (record-accessor h2cb0@h2cab '0)) (set! h2cbd@stx-mark* (record-accessor h2cb0@h2cab '1)) (set! h2cbf@stx-subst* (record-accessor h2cb0@h2cab '2)) (set! h2cc1@stx-ae* (record-accessor h2cb0@h2cab '3)) (set! h2cc3@set-stx-expr! (record-mutator h2cb0@h2cab '0)) (set! h2cc5@set-stx-mark*! (record-mutator h2cb0@h2cab '1)) (set! h2cc7@set-stx-subst*! (record-mutator h2cb0@h2cab '2)) (set! h2cc9@set-stx-ae*! (record-mutator h2cb0@h2cab '3)) (set! h2ccb@rp (h2896@h27bd@make-record-printer 'stx (lambda (h3082@x h3083@p h3084@wr) (begin (display '"#<syntax " h3083@p) (write (h2d05@stx->datum h3082@x) h3083@p) ((lambda (h3088@expr) (if (h288e@h27ad@annotation? h3088@expr) ((lambda (h308a@src) (if (pair? h308a@src) (begin (display '" [" h3083@p) (display (cdr h308a@src) h3083@p) (display '" of " h3083@p) (display (car h308a@src) h3083@p) (display '"]" h3083@p)) (void))) (h288f@h27af@annotation-source h3088@expr)) (void))) (h2cbb@stx-expr h3082@x)) (display '">" h3083@p))))) (set! h2ccd@datum->stx (lambda (h308c@id h308d@datum) (h2cb9@make-stx h308d@datum (h2cbd@stx-mark* h308c@id) (h2cbf@stx-subst* h308c@id) (h2cc1@stx-ae* h308c@id)))) (set! h2ccf@gen-mark (lambda () (string '#\m))) (set! h2cd1@anti-mark '#f) (set! h2cd3@anti-mark? not) (set! h2cd5@join-wraps (lambda (h3090@m1* h3091@s1* h3092@ae1* h3093@e) ((lambda (h3099@cancel) (begin (set! h3099@cancel (lambda (h30a0@ls1 h30a1@ls2) ((letrec ((h30a4@f (lambda (h30a6@x h30a7@ls1) (if (null? h30a7@ls1) (cdr h30a1@ls2) (cons h30a6@x (h30a4@f (car h30a7@ls1) (cdr h30a7@ls1))))))) h30a4@f) (car h30a0@ls1) (cdr h30a0@ls1)))) ((lambda (h309a@m2* h309b@s2* h309c@ae2*) (if (and (not (null? h3090@m1*)) (not (null? h309a@m2*)) (h2cd3@anti-mark? (car h309a@m2*))) (values (h3099@cancel h3090@m1* h309a@m2*) (h3099@cancel h3091@s1* h309b@s2*) (h3099@cancel h3092@ae1* h309c@ae2*)) (values (append h3090@m1* h309a@m2*) (append h3091@s1* h309b@s2*) (append h3092@ae1* h309c@ae2*)))) (h2cbd@stx-mark* h3093@e) (h2cbf@stx-subst* h3093@e) (h2cc1@stx-ae* h3093@e)))) '#f))) (set! h2cd7@mkstx (lambda (h30aa@e h30ab@m* h30ac@s* h30ad@ae*) (if (and (h2cb7@stx? h30aa@e) (not (h2c6d@top-marked? h30ab@m*))) (call-with-values (lambda () (h2cd5@join-wraps h30ab@m* h30ac@s* h30ad@ae* h30aa@e)) (lambda (h30b8@h30b3 h30b9@h30b5 h30ba@h30b7) ((lambda (h30be@ae* h30bf@s* h30c0@m*) (h2cb9@make-stx (h2cbb@stx-expr h30aa@e) h30c0@m* h30bf@s* h30be@ae*)) h30ba@h30b7 h30b9@h30b5 h30b8@h30b3))) (h2cb9@make-stx h30aa@e h30ab@m* h30ac@s* h30ad@ae*)))) (set! h2cd9@add-mark (lambda (h30c4@m h30c5@e h30c6@ae) (h2cd7@mkstx h30c5@e (list h30c4@m) '(shift) (list h30c6@ae)))) (set! h2cdb@add-subst (lambda (h30ca@subst h30cb@e) (h2cd7@mkstx h30cb@e '() (list h30ca@subst) '()))) (set! h2cdd@syntax-kind? (lambda (h30ce@x h30cf@p?) (if (h2cb7@stx? h30ce@x) (h2cdd@syntax-kind? (h2cbb@stx-expr h30ce@x) h30cf@p?) (if (h288e@h27ad@annotation? h30ce@x) (h2cdd@syntax-kind? (h2890@h27b1@annotation-expression h30ce@x) h30cf@p?) (h30cf@p? h30ce@x))))) (set! h2cdf@syntax-vector->list (lambda (h30d2@x) (if (h2cb7@stx? h30d2@x) ((lambda (h30d4@ls h30d5@m* h30d6@s* h30d7@ae*) (map (lambda (h30dc@x) (h2cd7@mkstx h30dc@x h30d5@m* h30d6@s* h30d7@ae*)) h30d4@ls)) (h2cdf@syntax-vector->list (h2cbb@stx-expr h30d2@x)) (h2cbd@stx-mark* h30d2@x) (h2cbf@stx-subst* h30d2@x) (h2cc1@stx-ae* h30d2@x)) (if (h288e@h27ad@annotation? h30d2@x) (h2cdf@syntax-vector->list (h2890@h27b1@annotation-expression h30d2@x)) (if (vector? h30d2@x) (vector->list h30d2@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" h30d2@x)))))) (set! h2ce1@syntax-pair? (lambda (h30de@x) (h2cdd@syntax-kind? h30de@x pair?))) (set! h2ce3@syntax-vector? (lambda (h30e0@x) (h2cdd@syntax-kind? h30e0@x vector?))) (set! h2ce5@syntax-null? (lambda (h30e2@x) (h2cdd@syntax-kind? h30e2@x null?))) (set! h2ce7@syntax-list? (lambda (h30e4@x) (or (h2ce5@syntax-null? h30e4@x) (and (h2ce1@syntax-pair? h30e4@x) (h2ce7@syntax-list? (h2ceb@syntax-cdr h30e4@x)))))) (set! h2ce9@syntax-car (lambda (h30e6@x) (if (h2cb7@stx? h30e6@x) (h2cd7@mkstx (h2ce9@syntax-car (h2cbb@stx-expr h30e6@x)) (h2cbd@stx-mark* h30e6@x) (h2cbf@stx-subst* h30e6@x) (h2cc1@stx-ae* h30e6@x)) (if (h288e@h27ad@annotation? h30e6@x) (h2ce9@syntax-car (h2890@h27b1@annotation-expression h30e6@x)) (if (pair? h30e6@x) (car h30e6@x) (assertion-violation 'syntax-car '"BUG: not a pair" h30e6@x)))))) (set! h2ceb@syntax-cdr (lambda (h30e8@x) (if (h2cb7@stx? h30e8@x) (h2cd7@mkstx (h2ceb@syntax-cdr (h2cbb@stx-expr h30e8@x)) (h2cbd@stx-mark* h30e8@x) (h2cbf@stx-subst* h30e8@x) (h2cc1@stx-ae* h30e8@x)) (if (h288e@h27ad@annotation? h30e8@x) (h2ceb@syntax-cdr (h2890@h27b1@annotation-expression h30e8@x)) (if (pair? h30e8@x) (cdr h30e8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" h30e8@x)))))) (set! h2ced@syntax->list (lambda (h30ea@x) (if (h2ce1@syntax-pair? h30ea@x) (cons (h2ce9@syntax-car h30ea@x) (h2ced@syntax->list (h2ceb@syntax-cdr h30ea@x))) (if (h2ce5@syntax-null? h30ea@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" h30ea@x))))) (set! h2cef@id? (lambda (h30ec@x) (and (h2cb7@stx? h30ec@x) (symbol? (h2cbb@stx-expr h30ec@x))))) (set! h2cf1@id->sym (lambda (h30ee@x) (h2cbb@stx-expr h30ee@x))) (set! h2cf3@same-marks? (lambda (h30f0@x h30f1@y) (or (and (null? h30f0@x) (null? h30f1@y)) (and (pair? h30f0@x) (pair? h30f1@y) (eq? (car h30f0@x) (car h30f1@y)) (h2cf3@same-marks? (cdr h30f0@x) (cdr h30f1@y)))))) (set! h2cf5@bound-id=? (lambda (h30f4@x h30f5@y) (and (eq? (h2cf1@id->sym h30f4@x) (h2cf1@id->sym h30f5@y)) (h2cf3@same-marks? (h2cbd@stx-mark* h30f4@x) (h2cbd@stx-mark* h30f5@y))))) (set! h2cf7@free-id=? (lambda (h30f8@i h30f9@j) ((lambda (h30fc@t0 h30fd@t1) (if (or h30fc@t0 h30fd@t1) (eq? h30fc@t0 h30fd@t1) (eq? (h2cf1@id->sym h30f8@i) (h2cf1@id->sym h30f9@j)))) (h2d0b@id->real-label h30f8@i) (h2d0b@id->real-label h30f9@j)))) (set! h2cf9@valid-bound-ids? (lambda (h3100@id*) (and (for-all h2cef@id? h3100@id*) (h2cfb@distinct-bound-ids? h3100@id*)))) (set! h2cfb@distinct-bound-ids? (lambda (h3102@id*) (or (null? h3102@id*) (and (not (h2cfd@bound-id-member? (car h3102@id*) (cdr h3102@id*))) (h2cfb@distinct-bound-ids? (cdr h3102@id*)))))) (set! h2cfd@bound-id-member? (lambda (h3104@id h3105@id*) (and (pair? h3105@id*) (or (h2cf5@bound-id=? h3104@id (car h3105@id*)) (h2cfd@bound-id-member? h3104@id (cdr h3105@id*)))))) (set! h2cff@self-evaluating? (lambda (h3108@x) (or (number? h3108@x) (string? h3108@x) (char? h3108@x) (boolean? h3108@x) (regexp? h3108@x) (bytevector? h3108@x)))) (set! h2d01@strip-annotations (lambda (h310a@x) (if (pair? h310a@x) (cons (h2d01@strip-annotations (car h310a@x)) (h2d01@strip-annotations (cdr h310a@x))) (if (vector? h310a@x) (vector-map h2d01@strip-annotations h310a@x) (if (h288e@h27ad@annotation? h310a@x) (h288d@h27ab@annotation-stripped h310a@x) h310a@x))))) (set! h2d03@strip (lambda (h310c@x h310d@m*) (if (h2c6d@top-marked? h310d@m*) (if (or (h288e@h27ad@annotation? h310c@x) (and (pair? h310c@x) (h288e@h27ad@annotation? (car h310c@x))) (and (vector? h310c@x) (> (vector-length h310c@x) '0) (h288e@h27ad@annotation? (vector-ref h310c@x '0)))) (h2d01@strip-annotations h310c@x) h310c@x) ((letrec ((h3110@f (lambda (h3112@x) (if (h2cb7@stx? h3112@x) (h2d03@strip (h2cbb@stx-expr h3112@x) (h2cbd@stx-mark* h3112@x)) (if (h288e@h27ad@annotation? h3112@x) (h288d@h27ab@annotation-stripped h3112@x) (if (pair? h3112@x) ((lambda (h3114@a h3115@d) (if (and (eq? h3114@a (car h3112@x)) (eq? h3115@d (cdr h3112@x))) h3112@x (cons h3114@a h3115@d))) (h3110@f (car h3112@x)) (h3110@f (cdr h3112@x))) (if (vector? h3112@x) ((lambda (h3118@old) ((lambda (h311a@new) (if (for-all eq? h3118@old h311a@new) h3112@x (list->vector h311a@new))) (map h3110@f h3118@old))) (vector->list h3112@x)) h3112@x))))))) h3110@f) h310c@x)))) (set! h2d05@stx->datum (lambda (h311c@x) (h2d03@strip h311c@x '()))) (set! h2d07@same-marks*? (lambda (h311e@mark* h311f@mark** h3120@si) (if (null? h3120@si) '#f (if (h2cf3@same-marks? h311e@mark* (vector-ref h311f@mark** (car h3120@si))) (car h3120@si) (h2d07@same-marks*? h311e@mark* h311f@mark** (cdr h3120@si)))))) (set! h2d09@id->label (lambda (h3124@id) (or (h2d0b@id->real-label h3124@id) ((lambda (h3126@t) (if h3126@t ((lambda (h3128@env) ((lambda (h312a@rib) (call-with-values (lambda () (h2c77@gen-define-label+loc h3124@id h312a@rib)) (lambda (h3130@h312d h3131@h312f) ((lambda (h3134@loc_ h3135@lab) (begin (h2ca0@extend-rib! h312a@rib h3124@id h3135@lab) h3135@lab)) h3131@h312f h3130@h312d)))) (h2fa3@interaction-env-rib h3128@env))) h3126@t) '#f)) (h2ff1@top-level-context))))) (set! h2d0b@id->real-label (lambda (h3138@id) ((lambda (h313a@sym) ((letrec ((h313c@search (lambda (h313e@subst* h313f@mark*) (if (null? h313e@subst*) '#f (if (eq? (car h313e@subst*) 'shift) (h313c@search (cdr h313e@subst*) (cdr h313f@mark*)) ((lambda (h3142@rib) ((lambda (h3144@t) (if h3144@t ((lambda (h3146@ht) ((lambda (h3148@si) ((lambda (h314a@i) (if h314a@i (vector-ref (h2c8e@rib-label* h3142@rib) h314a@i) (h313c@search (cdr h313e@subst*) h313f@mark*))) (and h3148@si (h2d07@same-marks*? h313f@mark* (h2c8c@rib-mark** h3142@rib) (reverse h3148@si))))) (hashtable-ref h3146@ht h313a@sym '#f))) h3144@t) ((letrec ((h314c@f (lambda (h314e@sym* h314f@mark** h3150@label*) (if (null? h314e@sym*) (h313c@search (cdr h313e@subst*) h313f@mark*) (if (and (eq? (car h314e@sym*) h313a@sym) (h2cf3@same-marks? (car h314f@mark**) h313f@mark*)) (car h3150@label*) (h314c@f (cdr h314e@sym*) (cdr h314f@mark**) (cdr h3150@label*))))))) h314c@f) (h2c8a@rib-sym* h3142@rib) (h2c8c@rib-mark** h3142@rib) (h2c8e@rib-label* h3142@rib)))) (h2c90@rib-sealed/freq h3142@rib))) (car h313e@subst*))))))) h313c@search) (h2cbf@stx-subst* h3138@id) (h2cbd@stx-mark* h3138@id))) (h2cf1@id->sym h3138@id)))) (set! h2d0d@label->binding (lambda (h3154@x h3155@r) ((lambda (h3158@t) (if h3158@t ((lambda (h315a@b) (if (and (pair? h315a@b) (eq? (car h315a@b) '$core-rtd)) (cons '$rtd (map h2eb0@bless (cdr h315a@b))) (if (and (pair? h315a@b) (eq? (car h315a@b) 'global-rtd)) ((lambda (h315c@lib h315d@loc) (cons '$rtd (symbol-value h315d@loc))) (cadr h315a@b) (cddr h315a@b)) h315a@b))) h3158@t) ((lambda (h3160@t) (if h3160@t (cdr h3160@t) ((lambda (h3162@t) (if h3162@t ((lambda (h3164@env) ((lambda (h3166@t) (if h3166@t ((lambda (h3168@p) (cons* 'lexical (cdr h3168@p) '#f)) h3166@t) '(displaced-lexical . #f))) (assq h3154@x (h2fa7@interaction-env-locs h3164@env)))) h3162@t) '(displaced-lexical . #f))) (h2ff1@top-level-context)))) (assq h3154@x h3155@r)))) (h2b12@h29b2@imported-label->binding h3154@x)))) (set! h2d0f@make-binding cons) (set! h2d11@binding-type car) (set! h2d13@binding-value cdr) (set! h2d15@raise-unbound-error (lambda (h316a@id) (h2fe1@syntax-violation* '#f '"unbound identifier" h316a@id (h4d1a@h4b60@make-undefined-violation)))) (set! h2d17@syntax-type (lambda (h316c@e h316d@r) (if (h2cef@id? h316c@e) ((lambda (h3170@id) ((lambda (h3172@label) ((lambda (h3174@b) ((lambda (h3176@type) ((lambda () (begin (if (not h3172@label) (h2d15@raise-unbound-error h3170@id) (void)) ((lambda (h3178@t) (if (memv h3178@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values h3176@type (h2d13@binding-value h3174@b) h3170@id) (values 'other '#f '#f))) h3176@type))))) (h2d11@binding-type h3174@b))) (h2d0d@label->binding h3172@label h316d@r))) (h2d09@id->label h3170@id))) h316c@e) (if (h2ce1@syntax-pair? h316c@e) ((lambda (h317a@id) (if (h2cef@id? h317a@id) ((lambda (h317c@label) ((lambda (h317e@b) ((lambda (h3180@type) ((lambda () (begin (if (not h317c@label) (h2d15@raise-unbound-error h317a@id) (void)) ((lambda (h3182@t) (if (memv h3182@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values h3180@type (h2d13@binding-value h317e@b) h317a@id) (values 'call '#f '#f))) h3180@type))))) (h2d11@binding-type h317e@b))) (h2d0d@label->binding h317c@label h316d@r))) (h2d09@id->label h317a@id)) (values 'call '#f '#f))) (h2ce9@syntax-car h316c@e)) ((lambda (h3184@d) (if (h2cff@self-evaluating? h3184@d) (values 'constant h3184@d '#f) (values 'other '#f '#f))) (h2d05@stx->datum h316c@e)))))) (set! h2d25@sanitize-binding (lambda (h3186@x h3187@src) (if (procedure? h3186@x) (cons* 'local-macro h3186@x h3187@src) (if (and (pair? h3186@x) (eq? (car h3186@x) 'macro!) (procedure? (cdr h3186@x))) (cons* 'local-macro! (cdr h3186@x) h3187@src) (if (and (pair? h3186@x) (eq? (car h3186@x) '$rtd)) h3186@x (assertion-violation 'expand '"invalid transformer" h3186@x)))))) (set! h2d27@make-variable-transformer (lambda (h318a@x) (if (procedure? h318a@x) (cons 'macro! h318a@x) (assertion-violation 'make-variable-transformer '"not a procedure" h318a@x)))) (set! h2d29@variable-transformer? (lambda (h318c@x) (and (pair? h318c@x) (eq? (car h318c@x) 'macro!) (procedure? (cdr h318c@x))))) (set! h2d2b@variable-transformer-procedure (lambda (h318e@x) (if (h2d29@variable-transformer? h318e@x) (cdr h318e@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" h318e@x)))) (set! h2d2d@make-eval-transformer (lambda (h3190@x) (h2d25@sanitize-binding (eval-core (h28ed@h28a5@expanded->core h3190@x)) h3190@x))) (set! h2e7e@parse-define (lambda (h3192@x) ((lambda (h3194@t) ((lambda (h3196@ls/false) (if (and h3196@ls/false (apply (lambda (h3198@id h3199@fmls h319a@b h319b@b*) (h2cef@id? h3198@id)) h3196@ls/false)) (apply (lambda (h31a0@id h31a1@fmls h31a2@b h31a3@b*) (begin (h2f20@verify-formals h31a1@fmls h3192@x) (values h31a0@id (cons 'defun (cons h31a1@fmls (cons h31a2@b h31a3@b*)))))) h3196@ls/false) ((lambda (h31a8@t) ((lambda (h31aa@ls/false) (if (and h31aa@ls/false (apply (lambda (h31ac@id h31ad@val) (h2cef@id? h31ac@id)) h31aa@ls/false)) (apply (lambda (h31b0@id h31b1@val) (values h31b0@id (cons 'expr h31b1@val))) h31aa@ls/false) ((lambda (h31b4@t) ((lambda (h31b6@ls/false) (if (and h31b6@ls/false (apply (lambda (h31b8@id) (h2cef@id? h31b8@id)) h31b6@ls/false)) (apply (lambda (h31ba@id) (values h31ba@id (cons 'expr (h2eb0@bless '(void))))) h31b6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h31b4@t))) (h2efa@syntax-dispatch h31b4@t '(_ any)))) h31a8@t))) (h2efa@syntax-dispatch h31a8@t '(_ any any)))) h3194@t))) (h2efa@syntax-dispatch h3194@t '(_ (any . any) any . each-any)))) h3192@x))) (set! h2e80@parse-define-syntax (lambda (h31bc@x) ((lambda (h31be@t) ((lambda (h31c0@ls/false) (if (and h31c0@ls/false (apply (lambda (h31c2@id h31c3@val) (h2cef@id? h31c2@id)) h31c0@ls/false)) (apply (lambda (h31c6@id h31c7@val) (values h31c6@id h31c7@val)) h31c0@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h31be@t))) (h2efa@syntax-dispatch h31be@t '(_ any any)))) h31bc@x))) (set! h2e82@scheme-stx-hashtable (make-eq-hashtable)) (set! h2e84@scheme-stx (lambda (h31ca@sym) (or (hashtable-ref h2e82@scheme-stx-hashtable h31ca@sym '#f) ((lambda (h31cc@subst) ((lambda (h31ce@stx) ((lambda (h31d0@stx) ((lambda () (begin (hashtable-set! h2e82@scheme-stx-hashtable h31ca@sym h31d0@stx) h31d0@stx)))) ((lambda (h31d2@t) (if h31d2@t ((lambda (h31d4@x) ((lambda (h31d6@name h31d7@label) (h2cdb@add-subst (h2c88@make-rib (list h31d6@name) (list h2c6b@top-mark*) (list h31d7@label) '#f '#f) h31ce@stx)) (car h31d4@x) (cdr h31d4@x))) h31d2@t) h31ce@stx)) (assq h31ca@sym h31cc@subst)))) (h2cb9@make-stx h31ca@sym h2c6b@top-mark* '() '()))) (h2ae8@h295e@library-subst (h2b0c@h29a6@find-library-by-name '(psyntax system $all))))))) (set! h2e86@lexical-var car) (set! h2e88@lexical-mutable? cdr) (set! h2e8a@set-lexical-mutable! set-cdr!) (set! h2e8c@add-lexical (lambda (h31da@lab h31db@lex h31dc@r) (cons (cons* h31da@lab 'lexical h31db@lex '#f) h31dc@r))) (set! h2e8e@add-lexicals (lambda (h31e0@lab* h31e1@lex* h31e2@r) (if (null? h31e0@lab*) h31e2@r (h2e8e@add-lexicals (cdr h31e0@lab*) (cdr h31e1@lex*) (h2e8c@add-lexical (car h31e0@lab*) (car h31e1@lex*) h31e2@r))))) (set! h2e90@letrec-helper (lambda (h31e6@e h31e7@r h31e8@mr h31e9@build) ((lambda (h31ee@t) ((lambda (h31f0@ls/false) (if h31f0@ls/false (apply (lambda (h31f2@lhs* h31f3@rhs* h31f4@b h31f5@b*) (if (not (h2cf9@valid-bound-ids? h31f2@lhs*)) (h2eb4@invalid-fmls-error h31e6@e h31f2@lhs*) ((lambda (h31fa@lex* h31fb@lab*) ((lambda (h31fe@rib h31ff@r) ((lambda (h3202@body h3203@rhs*) (h31e9@build '#f h31fa@lex* h3203@rhs* h3202@body)) (h2f32@chi-internal (h2cdb@add-subst h31fe@rib (cons h31f4@b h31f5@b*)) h31ff@r h31e8@mr) (h2f18@chi-expr* (map (lambda (h3206@x) (h2cdb@add-subst h31fe@rib h3206@x)) h31f3@rhs*) h31ff@r h31e8@mr))) (h2caa@make-full-rib h31f2@lhs* h31fb@lab*) (h2e8e@add-lexicals h31fb@lab* h31fa@lex* h31e7@r))) (map h2c6f@gen-lexical h31f2@lhs*) (map h2c73@gen-label h31f2@lhs*)))) h31f0@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h31ee@t))) (h2efa@syntax-dispatch h31ee@t '(_ #(each (any any)) any . each-any)))) h31e6@e))) (set! h2e92@letrec-transformer (lambda (h3208@e h3209@r h320a@mr) (h2e90@letrec-helper h3208@e h3209@r h320a@mr h2c50@h2bc1@build-letrec))) (set! h2e94@letrec*-transformer (lambda (h320e@e h320f@r h3210@mr) (h2e90@letrec-helper h320e@e h320f@r h3210@mr h2c51@h2bc3@build-letrec*))) (set! h2e96@fluid-let-syntax-transformer (lambda (h3214@e h3215@r h3216@mr) ((lambda (h321b@lookup) (begin (set! h321b@lookup (lambda (h322e@x) (or (h2d09@id->label h322e@x) (h2fe3@syntax-violation '#f '"unbound identifier" h3214@e h322e@x)))) ((lambda (h321c@t) ((lambda (h321e@ls/false) (if h321e@ls/false (apply (lambda (h3220@lhs* h3221@rhs* h3222@b h3223@b*) (if (not (h2cf9@valid-bound-ids? h3220@lhs*)) (h2eb4@invalid-fmls-error h3214@e h3220@lhs*) ((lambda (h3228@lab* h3229@rhs*) (h2f32@chi-internal (cons h3222@b h3223@b*) (append (map cons h3228@lab* h3229@rhs*) h3215@r) (append (map cons h3228@lab* h3229@rhs*) h3216@mr))) (map h321b@lookup h3220@lhs*) (map (lambda (h322c@x) (h2d2d@make-eval-transformer (h2f57@expand-transformer h322c@x h3216@mr))) h3221@rhs*)))) h321e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h321c@t))) (h2efa@syntax-dispatch h321c@t '(_ #(each (any any)) any . each-any)))) h3214@e))) '#f))) (set! h2e98@type-descriptor-transformer (lambda (h3230@e h3231@r h3232@mr) ((lambda (h3236@t) ((lambda (h3238@ls/false) (if (and h3238@ls/false (apply (lambda (h323a@id) (h2cef@id? h323a@id)) h3238@ls/false)) (apply (lambda (h323c@id) ((lambda (h323e@lab) ((lambda (h3240@b) ((lambda (h3242@type) ((lambda () (begin (if (not h323e@lab) (h2d15@raise-unbound-error h323c@id) (void)) (if (not (and (eq? h3242@type '$rtd) (not (list? (h2d13@binding-value h3240@b))))) (h2fe3@syntax-violation '#f '"not a record type" h3230@e) (void)) (list 'quote (h2d13@binding-value h3240@b)))))) (h2d11@binding-type h3240@b))) (h2d0d@label->binding h323e@lab h3231@r))) (h2d09@id->label h323c@id))) h3238@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3236@t))) (h2efa@syntax-dispatch h3236@t '(_ any)))) h3230@e))) (set! h2e9a@record-type-descriptor-transformer (lambda (h3244@e h3245@r h3246@mr) ((lambda (h324a@t) ((lambda (h324c@ls/false) (if (and h324c@ls/false (apply (lambda (h324e@id) (h2cef@id? h324e@id)) h324c@ls/false)) (apply (lambda (h3250@id) ((lambda (h3252@lab) ((lambda (h3254@b) ((lambda (h3256@type) ((lambda () (begin (if (not h3252@lab) (h2d15@raise-unbound-error h3250@id) (void)) (if (not (and (eq? h3256@type '$rtd) (list? (h2d13@binding-value h3254@b)))) (h2fe3@syntax-violation '#f '"not a record type" h3244@e) (void)) (h2f1c@chi-expr (car (h2d13@binding-value h3254@b)) h3245@r h3246@mr))))) (h2d11@binding-type h3254@b))) (h2d0d@label->binding h3252@lab h3245@r))) (h2d09@id->label h3250@id))) h324c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h324a@t))) (h2efa@syntax-dispatch h324a@t '(_ any)))) h3244@e))) (set! h2e9c@record-constructor-descriptor-transformer (lambda (h3258@e h3259@r h325a@mr) ((lambda (h325e@t) ((lambda (h3260@ls/false) (if (and h3260@ls/false (apply (lambda (h3262@id) (h2cef@id? h3262@id)) h3260@ls/false)) (apply (lambda (h3264@id) ((lambda (h3266@lab) ((lambda (h3268@b) ((lambda (h326a@type) ((lambda () (begin (if (not h3266@lab) (h2d15@raise-unbound-error h3264@id) (void)) (if (not (and (eq? h326a@type '$rtd) (list? (h2d13@binding-value h3268@b)))) (h2fe3@syntax-violation '#f '"invalid type" h3258@e) (void)) (h2f1c@chi-expr (cadr (h2d13@binding-value h3268@b)) h3259@r h325a@mr))))) (h2d11@binding-type h3268@b))) (h2d0d@label->binding h3266@lab h3259@r))) (h2d09@id->label h3264@id))) h3260@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h325e@t))) (h2efa@syntax-dispatch h325e@t '(_ any)))) h3258@e))) (set! h2e9e@when-macro (lambda (h326c@e) ((lambda (h326e@t) ((lambda (h3270@ls/false) (if h3270@ls/false (apply (lambda (h3272@test h3273@e h3274@e*) (h2eb0@bless (list 'if h3272@test (cons 'begin (cons h3273@e h3274@e*))))) h3270@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h326e@t))) (h2efa@syntax-dispatch h326e@t '(_ any any . each-any)))) h326c@e))) (set! h2ea0@unless-macro (lambda (h3278@e) ((lambda (h327a@t) ((lambda (h327c@ls/false) (if h327c@ls/false (apply (lambda (h327e@test h327f@e h3280@e*) (h2eb0@bless (list 'if (list 'not h327e@test) (cons 'begin (cons h327f@e h3280@e*))))) h327c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h327a@t))) (h2efa@syntax-dispatch h327a@t '(_ any any . each-any)))) h3278@e))) (set! h2ea2@if-transformer (lambda (h3284@e h3285@r h3286@mr) ((lambda (h328a@t) ((lambda (h328c@ls/false) (if h328c@ls/false (apply (lambda (h328e@e0 h328f@e1 h3290@e2) (list 'if (h2f1c@chi-expr h328e@e0 h3285@r h3286@mr) (h2f1c@chi-expr h328f@e1 h3285@r h3286@mr) (h2f1c@chi-expr h3290@e2 h3285@r h3286@mr))) h328c@ls/false) ((lambda (h3294@t) ((lambda (h3296@ls/false) (if h3296@ls/false (apply (lambda (h3298@e0 h3299@e1) (list 'if (h2f1c@chi-expr h3298@e0 h3285@r h3286@mr) (h2f1c@chi-expr h3299@e1 h3285@r h3286@mr) (h2c4f@h2bbf@build-void))) h3296@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3294@t))) (h2efa@syntax-dispatch h3294@t '(_ any any)))) h328a@t))) (h2efa@syntax-dispatch h328a@t '(_ any any any)))) h3284@e))) (set! h2ea4@and-transformer (lambda (h329c@e h329d@r h329e@mr) ((lambda (h32a2@t) ((lambda (h32a4@ls/false) (if h32a4@ls/false (apply (lambda (h32a6@e*) (cons 'and (h2f18@chi-expr* h32a6@e* h329d@r h329e@mr))) h32a4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32a2@t))) (h2efa@syntax-dispatch h32a2@t '(_ . each-any)))) h329c@e))) (set! h2ea6@or-transformer (lambda (h32a8@e h32a9@r h32aa@mr) ((lambda (h32ae@t) ((lambda (h32b0@ls/false) (if h32b0@ls/false (apply (lambda (h32b2@e*) (cons 'or (h2f18@chi-expr* h32b2@e* h32a9@r h32aa@mr))) h32b0@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32ae@t))) (h2efa@syntax-dispatch h32ae@t '(_ . each-any)))) h32a8@e))) (set! h2ea8@case-macro (lambda (h32b4@e) ((lambda (h32b7@build-last h32b9@build-one) (begin (set! h32b7@build-last (lambda (h32de@cls) ((lambda (h32e0@t) ((lambda (h32e2@ls/false) (if h32e2@ls/false (apply (lambda (h32e4@e h32e5@e*) (cons 'begin (cons h32e4@e h32e5@e*))) h32e2@ls/false) ((lambda (h32e8@t) ((lambda (h32ea@ls/false) (if h32ea@ls/false (apply (lambda () (h32b9@build-one h32de@cls '(if #f #f))) h32ea@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32e8@t))) (h2efa@syntax-dispatch h32e8@t '_))) h32e0@t))) (h2efa@syntax-dispatch h32e0@t '(#(scheme-id else) any . each-any)))) h32de@cls))) (set! h32b9@build-one (lambda (h32d0@cls h32d1@k) ((lambda (h32d4@t) ((lambda (h32d6@ls/false) (if h32d6@ls/false (apply (lambda (h32d8@d* h32d9@e h32da@e*) (list 'if (list 'memv 't (list 'quote h32d8@d*)) (cons 'begin (cons h32d9@e h32da@e*)) h32d1@k)) h32d6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32d4@t))) (h2efa@syntax-dispatch h32d4@t '(each-any any . each-any)))) h32d0@cls))) ((lambda (h32ba@t) ((lambda (h32bc@ls/false) (if h32bc@ls/false (apply (lambda (h32be@expr) (h2eb0@bless (cons 'let (cons (list (list 't h32be@expr)) '((if #f #f)))))) h32bc@ls/false) ((lambda (h32c0@t) ((lambda (h32c2@ls/false) (if h32c2@ls/false (apply (lambda (h32c4@expr h32c5@cls h32c6@cls*) (h2eb0@bless (list 'let (list (list 't h32c4@expr)) ((letrec ((h32ca@f (lambda (h32cc@cls h32cd@cls*) (if (null? h32cd@cls*) (h32b7@build-last h32cc@cls) (h32b9@build-one h32cc@cls (h32ca@f (car h32cd@cls*) (cdr h32cd@cls*))))))) h32ca@f) h32c5@cls h32c6@cls*)))) h32c2@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32c0@t))) (h2efa@syntax-dispatch h32c0@t '(_ any any . each-any)))) h32ba@t))) (h2efa@syntax-dispatch h32ba@t '(_ any)))) h32b4@e))) '#f '#f))) (set! h2eaa@quote-transformer (lambda (h32ec@e h32ed@r h32ee@mr) ((lambda (h32f2@t) ((lambda (h32f4@ls/false) (if h32f4@ls/false (apply (lambda (h32f6@datum) (list 'quote (h2d05@stx->datum h32f6@datum))) h32f4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32f2@t))) (h2efa@syntax-dispatch h32f2@t '(_ any)))) h32ec@e))) (set! h2eac@case-lambda-transformer (lambda (h32f8@e h32f9@r h32fa@mr) ((lambda (h32fe@t) ((lambda (h3300@ls/false) (if h3300@ls/false (apply (lambda (h3302@fmls* h3303@b* h3304@b**) (call-with-values (lambda () (h2f24@chi-lambda-clause* h32f8@e h3302@fmls* (map cons h3303@b* h3304@b**) h32f9@r h32fa@mr)) (lambda (h330c@h3309 h330d@h330b) ((lambda (h3310@body* h3311@fmls*) (h2c4c@h2b8d@build-case-lambda '#f h3311@fmls* h3310@body*)) h330d@h330b h330c@h3309)))) h3300@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h32fe@t))) (h2efa@syntax-dispatch h32fe@t '(_ . #(each (any any . each-any)))))) h32f8@e))) (set! h2eae@lambda-transformer (lambda (h3314@e h3315@r h3316@mr) ((lambda (h331a@t) ((lambda (h331c@ls/false) (if h331c@ls/false (apply (lambda (h331e@fmls h331f@b h3320@b*) (call-with-values (lambda () (h2f22@chi-lambda-clause h3314@e h331e@fmls (cons h331f@b h3320@b*) h3315@r h3316@mr)) (lambda (h3328@h3325 h3329@h3327) ((lambda (h332c@body h332d@fmls) (h2c4b@h2b8b@build-lambda '#f h332d@fmls h332c@body)) h3329@h3327 h3328@h3325)))) h331c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h331a@t))) (h2efa@syntax-dispatch h331a@t '(_ any any . each-any)))) h3314@e))) (set! h2eb0@bless (lambda (h3330@x) (h2cd7@mkstx ((letrec ((h3332@f (lambda (h3334@x) (if (h2cb7@stx? h3334@x) h3334@x (if (pair? h3334@x) (cons (h3332@f (car h3334@x)) (h3332@f (cdr h3334@x))) (if (symbol? h3334@x) (h2e84@scheme-stx h3334@x) (if (vector? h3334@x) (vector-map h3332@f h3334@x) h3334@x))))))) h3332@f) h3330@x) '() '() '()))) (set! h2eb2@with-syntax-macro (lambda (h3336@e) ((lambda (h3338@t) ((lambda (h333a@ls/false) (if h333a@ls/false (apply (lambda (h333c@pat* h333d@expr* h333e@b h333f@b*) ((lambda (h3344@idn*) (begin (h2f20@verify-formals (map car h3344@idn*) h3336@e) ((lambda (h3346@t*) (h2eb0@bless (list 'let (map list h3346@t* h333d@expr*) ((letrec ((h3348@f (lambda (h334a@pat* h334b@t*) (if (null? h334a@pat*) (cons 'begin (cons '#f (cons h333e@b h333f@b*))) (list 'syntax-case (car h334b@t*) '() (list (car h334a@pat*) (h3348@f (cdr h334a@pat*) (cdr h334b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car h334a@pat*)) (car h334b@t*)))))))) h3348@f) h333c@pat* h3346@t*)))) (h2fd1@generate-temporaries h333d@expr*)))) ((letrec ((h334e@f (lambda (h3350@pat*) (if (null? h3350@pat*) '() (call-with-values (lambda () (h2ef8@convert-pattern (car h3350@pat*) '())) (lambda (h3356@h3353 h3357@h3355) ((lambda (h335a@idn* h335b@pat) (append h335a@idn* (h334e@f (cdr h3350@pat*)))) h3357@h3355 h3356@h3353))))))) h334e@f) h333c@pat*))) h333a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3338@t))) (h2efa@syntax-dispatch h3338@t '(_ #(each (any any)) any . each-any)))) h3336@e))) (set! h2eb4@invalid-fmls-error (lambda (h335e@stx h335f@fmls) ((lambda (h3362@t) ((lambda (h3364@ls/false) (if h3364@ls/false (apply (lambda (h3366@id* h3367@last) ((letrec ((h336a@f (lambda (h336c@id*) (if (null? h336c@id*) (values) (if (not (h2cef@id? (car h336c@id*))) (h2fe3@syntax-violation '#f '"not an identifier" h335e@stx (car h336c@id*)) (begin (h336a@f (cdr h336c@id*)) (if (h2cfd@bound-id-member? (car h336c@id*) (cdr h336c@id*)) (h2fe3@syntax-violation '#f '"duplicate binding" h335e@stx (car h336c@id*)) (void)))))))) h336a@f) (if (h2cef@id? h3367@last) (cons h3367@last h3366@id*) (if (h2ce5@syntax-null? h3367@last) h3366@id* (h2fe3@syntax-violation '#f '"not an identifier" h335e@stx h3367@last))))) h3364@ls/false) ((lambda (h336e@t) ((lambda (h3370@ls/false) (if h3370@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"malformed binding form" h335e@stx h335f@fmls)) h3370@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h336e@t))) (h2efa@syntax-dispatch h336e@t '_))) h3362@t))) (h2efa@syntax-dispatch h3362@t '#(each+ any () any)))) h335f@fmls))) (set! h2eb6@let-macro (lambda (h3372@stx) ((lambda (h3374@t) ((lambda (h3376@ls/false) (if h3376@ls/false (apply (lambda (h3378@lhs* h3379@rhs* h337a@b h337b@b*) (if (h2cf9@valid-bound-ids? h3378@lhs*) (h2eb0@bless (cons (cons 'lambda (cons h3378@lhs* (cons h337a@b h337b@b*))) h3379@rhs*)) (h2eb4@invalid-fmls-error h3372@stx h3378@lhs*))) h3376@ls/false) ((lambda (h3380@t) ((lambda (h3382@ls/false) (if (and h3382@ls/false (apply (lambda (h3384@f h3385@lhs* h3386@rhs* h3387@b h3388@b*) (h2cef@id? h3384@f)) h3382@ls/false)) (apply (lambda (h338e@f h338f@lhs* h3390@rhs* h3391@b h3392@b*) (if (h2cf9@valid-bound-ids? h338f@lhs*) (h2eb0@bless (cons (list 'letrec (list (list h338e@f (cons 'lambda (cons h338f@lhs* (cons h3391@b h3392@b*))))) h338e@f) h3390@rhs*)) (h2eb4@invalid-fmls-error h3372@stx h338f@lhs*))) h3382@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3380@t))) (h2efa@syntax-dispatch h3380@t '(_ any #(each (any any)) any . each-any)))) h3374@t))) (h2efa@syntax-dispatch h3374@t '(_ #(each (any any)) any . each-any)))) h3372@stx))) (set! h2eb8@let-values-macro (lambda (h3398@stx) ((lambda (h339b@rename h339d@rename*) (begin (set! h339b@rename (lambda (h3400@x h3401@old* h3402@new*) (begin (if (not (h2cef@id? h3400@x)) (h2fe3@syntax-violation '#f '"not an indentifier" h3398@stx h3400@x) (void)) (if (h2cfd@bound-id-member? h3400@x h3401@old*) (h2fe3@syntax-violation '#f '"duplicate binding" h3398@stx h3400@x) (void)) ((lambda (h3406@y) (values h3406@y (cons h3400@x h3401@old*) (cons h3406@y h3402@new*))) (gensym (h2fe9@syntax->datum h3400@x)))))) (set! h339d@rename* (lambda (h33ee@x* h33ef@old* h33f0@new*) (if (null? h33ee@x*) (values '() h33ef@old* h33f0@new*) (call-with-values (lambda () (h339b@rename (car h33ee@x*) h33ef@old* h33f0@new*)) (lambda (h33f4@x h33f5@old* h33f6@new*) (call-with-values (lambda () (h339d@rename* (cdr h33ee@x*) h33f5@old* h33f6@new*)) (lambda (h33fa@x* h33fb@old* h33fc@new*) (values (cons h33f4@x h33fa@x*) h33fb@old* h33fc@new*)))))))) ((lambda (h339e@t) ((lambda (h33a0@ls/false) (if h33a0@ls/false (apply (lambda (h33a2@b h33a3@b*) (cons* (h2eb0@bless 'let) '() h33a2@b h33a3@b*)) h33a0@ls/false) ((lambda (h33a6@t) ((lambda (h33a8@ls/false) (if h33a8@ls/false (apply (lambda (h33aa@lhs* h33ab@rhs* h33ac@b h33ad@b*) (h2eb0@bless ((letrec ((h33b2@f (lambda (h33b4@lhs* h33b5@rhs* h33b6@old* h33b7@new*) (if (null? h33b4@lhs*) (cons 'let (cons (map list h33b6@old* h33b7@new*) (cons h33ac@b h33ad@b*))) ((lambda (h33bc@t) ((lambda (h33be@ls/false) (if h33be@ls/false (apply (lambda (h33c0@x*) (call-with-values (lambda () (h339d@rename* h33c0@x* h33b6@old* h33b7@new*)) (lambda (h33c8@h33c3 h33c9@h33c5 h33ca@h33c7) ((lambda (h33ce@new* h33cf@old* h33d0@y*) (list 'call-with-values (list 'lambda '() (car h33b5@rhs*)) (list 'lambda h33d0@y* (h33b2@f (cdr h33b4@lhs*) (cdr h33b5@rhs*) h33cf@old* h33ce@new*)))) h33ca@h33c7 h33c9@h33c5 h33c8@h33c3)))) h33be@ls/false) ((lambda (h33d4@t) ((lambda (h33d6@ls/false) (if h33d6@ls/false (apply (lambda (h33d8@x* h33d9@x) (call-with-values (lambda () (h339b@rename h33d9@x h33b6@old* h33b7@new*)) (lambda (h33dc@y h33dd@old* h33de@new*) (call-with-values (lambda () (h339d@rename* h33d8@x* h33dd@old* h33de@new*)) (lambda (h33e2@y* h33e3@old* h33e4@new*) (list 'call-with-values (list 'lambda '() (car h33b5@rhs*)) (list 'lambda (append h33e2@y* h33dc@y) (h33b2@f (cdr h33b4@lhs*) (cdr h33b5@rhs*) h33e3@old* h33e4@new*)))))))) h33d6@ls/false) ((lambda (h33e8@t) ((lambda (h33ea@ls/false) (if h33ea@ls/false (apply (lambda (h33ec@others) (h2fe3@syntax-violation '#f '"malformed bindings" h3398@stx h33ec@others)) h33ea@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h33e8@t))) (h2efa@syntax-dispatch h33e8@t 'any))) h33d4@t))) (h2efa@syntax-dispatch h33d4@t '#(each+ any () any)))) h33bc@t))) (h2efa@syntax-dispatch h33bc@t 'each-any))) (car h33b4@lhs*)))))) h33b2@f) h33aa@lhs* h33ab@rhs* '() '()))) h33a8@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h33a6@t))) (h2efa@syntax-dispatch h33a6@t '(_ #(each (any any)) any . each-any)))) h339e@t))) (h2efa@syntax-dispatch h339e@t '(_ () any . each-any)))) h3398@stx))) '#f '#f))) (set! h2eba@let*-values-macro (lambda (h3408@stx) ((lambda (h340b@check) (begin (set! h340b@check (lambda (h343a@x*) (if (not (null? h343a@x*)) ((lambda (h343c@x) (begin (if (not (h2cef@id? h343c@x)) (h2fe3@syntax-violation '#f '"not an identifier" h3408@stx h343c@x) (void)) (h340b@check (cdr h343a@x*)) (if (h2cfd@bound-id-member? h343c@x (cdr h343a@x*)) (h2fe3@syntax-violation '#f '"duplicate identifier" h3408@stx h343c@x) (void)))) (car h343a@x*)) (void)))) ((lambda (h340c@t) ((lambda (h340e@ls/false) (if h340e@ls/false (apply (lambda (h3410@b h3411@b*) (cons* (h2eb0@bless 'let) '() h3410@b h3411@b*)) h340e@ls/false) ((lambda (h3414@t) ((lambda (h3416@ls/false) (if h3416@ls/false (apply (lambda (h3418@lhs* h3419@rhs* h341a@b h341b@b*) (h2eb0@bless ((letrec ((h3420@f (lambda (h3422@lhs* h3423@rhs*) (if (null? h3422@lhs*) (cons 'begin (cons h341a@b h341b@b*)) ((lambda (h3426@t) ((lambda (h3428@ls/false) (if h3428@ls/false (apply (lambda (h342a@x*) (begin (h340b@check h342a@x*) (list 'call-with-values (list 'lambda '() (car h3423@rhs*)) (list 'lambda h342a@x* (h3420@f (cdr h3422@lhs*) (cdr h3423@rhs*)))))) h3428@ls/false) ((lambda (h342c@t) ((lambda (h342e@ls/false) (if h342e@ls/false (apply (lambda (h3430@x* h3431@x) (begin (h340b@check (cons h3431@x h3430@x*)) (list 'call-with-values (list 'lambda '() (car h3423@rhs*)) (list 'lambda (append h3430@x* h3431@x) (h3420@f (cdr h3422@lhs*) (cdr h3423@rhs*)))))) h342e@ls/false) ((lambda (h3434@t) ((lambda (h3436@ls/false) (if h3436@ls/false (apply (lambda (h3438@others) (h2fe3@syntax-violation '#f '"malformed bindings" h3408@stx h3438@others)) h3436@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3434@t))) (h2efa@syntax-dispatch h3434@t 'any))) h342c@t))) (h2efa@syntax-dispatch h342c@t '#(each+ any () any)))) h3426@t))) (h2efa@syntax-dispatch h3426@t 'each-any))) (car h3422@lhs*)))))) h3420@f) h3418@lhs* h3419@rhs*))) h3416@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3414@t))) (h2efa@syntax-dispatch h3414@t '(_ #(each (any any)) any . each-any)))) h340c@t))) (h2efa@syntax-dispatch h340c@t '(_ () any . each-any)))) h3408@stx))) '#f))) (set! h2ebc@trace-lambda-macro (lambda (h343e@stx) ((lambda (h3440@t) ((lambda (h3442@ls/false) (if h3442@ls/false (apply (lambda (h3444@who h3445@fmls h3446@b h3447@b*) (if (h2cf9@valid-bound-ids? h3445@fmls) (h2eb0@bless (list 'make-traced-procedure (list 'quote h3444@who) (cons 'lambda (cons h3445@fmls (cons h3446@b h3447@b*))))) (h2eb4@invalid-fmls-error h343e@stx h3445@fmls))) h3442@ls/false) ((lambda (h344c@t) ((lambda (h344e@ls/false) (if h344e@ls/false (apply (lambda (h3450@who h3451@fmls h3452@last h3453@b h3454@b*) (if (h2cf9@valid-bound-ids? (cons h3452@last h3451@fmls)) (h2eb0@bless (list 'make-traced-procedure (list 'quote h3450@who) (cons 'lambda (cons (append h3451@fmls h3452@last) (cons h3453@b h3454@b*))))) (h2eb4@invalid-fmls-error h343e@stx (append h3451@fmls h3452@last)))) h344e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h344c@t))) (h2efa@syntax-dispatch h344c@t '(_ any #(each+ any () any) any . each-any)))) h3440@t))) (h2efa@syntax-dispatch h3440@t '(_ any each-any any . each-any)))) h343e@stx))) (set! h2ebe@trace-define-macro (lambda (h345a@stx) ((lambda (h345c@t) ((lambda (h345e@ls/false) (if h345e@ls/false (apply (lambda (h3460@who h3461@fmls h3462@b h3463@b*) (if (h2cf9@valid-bound-ids? h3461@fmls) (h2eb0@bless (list 'define h3460@who (list 'make-traced-procedure (list 'quote h3460@who) (cons 'lambda (cons h3461@fmls (cons h3462@b h3463@b*)))))) (h2eb4@invalid-fmls-error h345a@stx h3461@fmls))) h345e@ls/false) ((lambda (h3468@t) ((lambda (h346a@ls/false) (if h346a@ls/false (apply (lambda (h346c@who h346d@fmls h346e@last h346f@b h3470@b*) (if (h2cf9@valid-bound-ids? (cons h346e@last h346d@fmls)) (h2eb0@bless (list 'define h346c@who (list 'make-traced-procedure (list 'quote h346c@who) (cons 'lambda (cons (append h346d@fmls h346e@last) (cons h346f@b h3470@b*)))))) (h2eb4@invalid-fmls-error h345a@stx (append h346d@fmls h346e@last)))) h346a@ls/false) ((lambda (h3476@t) ((lambda (h3478@ls/false) (if h3478@ls/false (apply (lambda (h347a@who h347b@expr) (if (h2cef@id? h347a@who) (h2eb0@bless (list 'define h347a@who (list 'let (list (list 'v h347b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote h347a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (h2fe3@syntax-violation '#f '"invalid name" h345a@stx))) h3478@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3476@t))) (h2efa@syntax-dispatch h3476@t '(_ any any)))) h3468@t))) (h2efa@syntax-dispatch h3468@t '(_ (any . #(each+ any () any)) any . each-any)))) h345c@t))) (h2efa@syntax-dispatch h345c@t '(_ (any . each-any) any . each-any)))) h345a@stx))) (set! h2ec0@trace-define-syntax-macro (lambda (h347e@stx) ((lambda (h3480@t) ((lambda (h3482@ls/false) (if h3482@ls/false (apply (lambda (h3484@who h3485@expr) (if (h2cef@id? h3484@who) (h2eb0@bless (list 'define-syntax h3484@who (list 'make-traced-macro (list 'quote h3484@who) h3485@expr))) (h2fe3@syntax-violation '#f '"invalid name" h347e@stx))) h3482@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3480@t))) (h2efa@syntax-dispatch h3480@t '(_ any any)))) h347e@stx))) (set! h2ec2@trace-let/rec-syntax (lambda (h3488@who) (lambda (h348a@stx) ((lambda (h348c@t) ((lambda (h348e@ls/false) (if h348e@ls/false (apply (lambda (h3490@lhs* h3491@rhs* h3492@b h3493@b*) (if (h2cf9@valid-bound-ids? h3490@lhs*) ((lambda (h3498@rhs*) (h2eb0@bless (cons h3488@who (cons (map list h3490@lhs* h3498@rhs*) (cons h3492@b h3493@b*))))) (map (lambda (h349a@lhs h349b@rhs) (list 'make-traced-macro (list 'quote h349a@lhs) h349b@rhs)) h3490@lhs* h3491@rhs*)) (h2eb4@invalid-fmls-error h348a@stx h3490@lhs*))) h348e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h348c@t))) (h2efa@syntax-dispatch h348c@t '(_ #(each (any any)) any . each-any)))) h348a@stx)))) (set! h2ec4@trace-let-syntax-macro (h2ec2@trace-let/rec-syntax 'let-syntax)) (set! h2ec6@trace-letrec-syntax-macro (h2ec2@trace-let/rec-syntax 'letrec-syntax)) (set! h2ec8@guard-macro (lambda (h349e@x) ((lambda (h34a1@gen-clauses) (begin (set! h34a1@gen-clauses (lambda (h34b8@con h34b9@outerk h34ba@clause*) ((lambda (h34bf@f h34c1@f*) (begin (set! h34bf@f (lambda (h34f8@x h34f9@k) ((lambda (h34fc@t) ((lambda (h34fe@ls/false) (if h34fe@ls/false (apply (lambda (h3500@e h3501@p) ((lambda (h3504@t) (list 'let (list (list h3504@t h3500@e)) (list 'if h3504@t (list h3501@p h3504@t) h34f9@k))) (gensym))) h34fe@ls/false) ((lambda (h3506@t) ((lambda (h3508@ls/false) (if h3508@ls/false (apply (lambda (h350a@e) ((lambda (h350c@t) (list 'let (list (list h350c@t h350a@e)) (list 'if h350c@t h350c@t h34f9@k))) (gensym))) h3508@ls/false) ((lambda (h350e@t) ((lambda (h3510@ls/false) (if h3510@ls/false (apply (lambda (h3512@e h3513@v h3514@v*) (list 'if h3512@e (cons 'begin (cons h3513@v h3514@v*)) h34f9@k)) h3510@ls/false) ((lambda (h3518@t) ((lambda (h351a@ls/false) (if h351a@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid guard clause" h34f8@x)) h351a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3518@t))) (h2efa@syntax-dispatch h3518@t '_))) h350e@t))) (h2efa@syntax-dispatch h350e@t '(any any . each-any)))) h3506@t))) (h2efa@syntax-dispatch h3506@t '(any)))) h34fc@t))) (h2efa@syntax-dispatch h34fc@t '(any #(scheme-id =>) any)))) h34f8@x))) (set! h34c1@f* (lambda (h34ce@x*) ((lambda (h34d0@t) ((lambda (h34d2@ls/false) (if h34d2@ls/false (apply (lambda () ((lambda (h34d4@g) (values (list h34d4@g (list 'lambda '() (list 'raise-continuable h34b8@con))) h34d4@g)) (gensym))) h34d2@ls/false) ((lambda (h34d6@t) ((lambda (h34d8@ls/false) (if h34d8@ls/false (apply (lambda (h34da@e h34db@e*) (values (cons 'begin (cons h34da@e h34db@e*)) '#f)) h34d8@ls/false) ((lambda (h34de@t) ((lambda (h34e0@ls/false) (if h34e0@ls/false (apply (lambda (h34e2@cls h34e3@cls*) (call-with-values (lambda () (h34c1@f* h34e3@cls*)) (lambda (h34ea@h34e7 h34eb@h34e9) ((lambda (h34ee@g h34ef@e) (values (h34bf@f h34e2@cls h34ef@e) h34ee@g)) h34eb@h34e9 h34ea@h34e7)))) h34e0@ls/false) ((lambda (h34f2@t) ((lambda (h34f4@ls/false) (if h34f4@ls/false (apply (lambda (h34f6@others) (h2fe3@syntax-violation '#f '"invalid guard clause" h34f6@others)) h34f4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h34f2@t))) (h2efa@syntax-dispatch h34f2@t 'any))) h34de@t))) (h2efa@syntax-dispatch h34de@t '(any . any)))) h34d6@t))) (h2efa@syntax-dispatch h34d6@t '((#(scheme-id else) any . each-any))))) h34d0@t))) (h2efa@syntax-dispatch h34d0@t '()))) h34ce@x*))) (call-with-values (lambda () (h34c1@f* h34ba@clause*)) (lambda (h34c6@h34c3 h34c7@h34c5) ((lambda (h34ca@raisek h34cb@code) (if h34ca@raisek (list (list 'call/cc (list 'lambda (list h34ca@raisek) (list h34b9@outerk (list 'lambda '() h34cb@code))))) (list h34b9@outerk (list 'lambda '() h34cb@code)))) h34c7@h34c5 h34c6@h34c3))))) '#f '#f))) ((lambda (h34a2@t) ((lambda (h34a4@ls/false) (if (and h34a4@ls/false (apply (lambda (h34a6@con h34a7@clause* h34a8@b h34a9@b*) (h2cef@id? h34a6@con)) h34a4@ls/false)) (apply (lambda (h34ae@con h34af@clause* h34b0@b h34b1@b*) ((lambda (h34b6@outerk) (h2eb0@bless (list (list 'call/cc (list 'lambda (list h34b6@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list h34ae@con) (h34a1@gen-clauses h34ae@con h34b6@outerk h34af@clause*)) (cons 'lambda (cons '() (cons h34b0@b h34b1@b*)))))))))) (gensym))) h34a4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h34a2@t))) (h2efa@syntax-dispatch h34a2@t '(_ (any . each-any) any . each-any)))) h349e@x))) '#f))) (set! h2eca@define-enumeration-macro (lambda (h351c@stx) ((lambda (h351f@set? h3521@remove-dups) (begin (set! h351f@set? (lambda (h3538@x) (or (null? h3538@x) (and (not (memq (car h3538@x) (cdr h3538@x))) (h351f@set? (cdr h3538@x)))))) (set! h3521@remove-dups (lambda (h3536@ls) (if (null? h3536@ls) '() (cons (car h3536@ls) (h3521@remove-dups (remq (car h3536@ls) (cdr h3536@ls))))))) ((lambda (h3522@t) ((lambda (h3524@ls/false) (if (and h3524@ls/false (apply (lambda (h3526@name h3527@id* h3528@maker) (and (h2cef@id? h3526@name) (h2cef@id? h3528@maker) (for-all h2cef@id? h3527@id*))) h3524@ls/false)) (apply (lambda (h352c@name h352d@id* h352e@maker) ((lambda (h3532@name* h3533@mk) (h2eb0@bless (list 'begin (list 'define h3533@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote h3532@name*)))) (list 'define-syntax h352c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote h3532@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote h352c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax h352e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote h352e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote h3532@name*)) (cons 'syntax-violation (cons (list 'quote h352e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons h3533@mk '('(n* ...)))))))))))) (h3521@remove-dups (h2fe9@syntax->datum h352d@id*)) (gensym))) h3524@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3522@t))) (h2efa@syntax-dispatch h3522@t '(_ any each-any any)))) h351c@stx))) '#f '#f))) (set! h2ecc@time-macro (lambda (h353a@stx) ((lambda (h353c@t) ((lambda (h353e@ls/false) (if h353e@ls/false (apply (lambda (h3540@expr) (h2eb0@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() h3540@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) h353e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h353c@t))) (h2efa@syntax-dispatch h353c@t '(_ any)))) h353a@stx))) (set! h2ece@delay-macro (lambda (h3542@stx) ((lambda (h3544@t) ((lambda (h3546@ls/false) (if h3546@ls/false (apply (lambda (h3548@expr) (h2eb0@bless (list 'make-promise (list 'lambda '() h3548@expr)))) h3546@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3544@t))) (h2efa@syntax-dispatch h3544@t '(_ any)))) h3542@stx))) (set! h2ed0@assert-macro (lambda (h354a@stx) ((lambda (h354c@t) ((lambda (h354e@ls/false) (if h354e@ls/false (apply (lambda (h3550@expr) ((lambda (h3552@pos) (h2eb0@bless (list 'unless h3550@expr (list 'assertion-error (list 'quote h3550@expr) (list 'quote h3552@pos))))) (or (h2fdb@expression-position h354a@stx) (h2fdb@expression-position h3550@expr)))) h354e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h354c@t))) (h2efa@syntax-dispatch h354c@t '(_ any)))) h354a@stx))) (set! h2ed2@endianness-macro (lambda (h3554@stx) ((lambda (h3556@t) ((lambda (h3558@ls/false) (if h3558@ls/false (apply (lambda (h355a@e) ((lambda (h355c@t) (if (memv h355c@t '(little)) (h2eb0@bless ''little) (if (memv h355c@t '(big)) (h2eb0@bless ''big) (h2fe3@syntax-violation '#f '"endianness must be big or little" h3554@stx)))) (h2fe9@syntax->datum h355a@e))) h3558@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3556@t))) (h2efa@syntax-dispatch h3556@t '(_ any)))) h3554@stx))) (set! h2ed4@identifier-syntax-macro (lambda (h355e@stx) ((lambda (h3560@t) ((lambda (h3562@ls/false) (if h3562@ls/false (apply (lambda (h3564@expr) (h2eb0@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax h3564@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax h3564@expr) '((syntax (e* ...)))))))))) h3562@ls/false) ((lambda (h3566@t) ((lambda (h3568@ls/false) (if (and h3568@ls/false (apply (lambda (h356a@id1 h356b@expr1 h356c@id2 h356d@expr2 h356e@expr3) (and (h2cef@id? h356a@id1) (h2cef@id? h356c@id2) (h2cef@id? h356d@expr2))) h3568@ls/false)) (apply (lambda (h3574@id1 h3575@expr1 h3576@id2 h3577@expr2 h3578@expr3) (h2eb0@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax h3575@expr1)) (list (list 'set! 'id h3577@expr2) (list 'syntax h3578@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons h3575@expr1 '(e* ...))))))))) h3568@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3566@t))) (h2efa@syntax-dispatch h3566@t '(_ (any any) ((#(scheme-id set!) any any) any))))) h3560@t))) (h2efa@syntax-dispatch h3560@t '(_ any)))) h355e@stx))) (set! h2ed6@do-macro (lambda (h357e@stx) ((lambda (h3581@bind) (begin (set! h3581@bind (lambda (h3598@x) ((lambda (h359a@t) ((lambda (h359c@ls/false) (if h359c@ls/false (apply (lambda (h359e@x h359f@init) (list h359e@x h359f@init h359e@x)) h359c@ls/false) ((lambda (h35a2@t) ((lambda (h35a4@ls/false) (if h35a4@ls/false (apply (lambda (h35a6@x h35a7@init h35a8@step) (list h35a6@x h35a7@init h35a8@step)) h35a4@ls/false) ((lambda (h35ac@t) ((lambda (h35ae@ls/false) (if h35ae@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid binding" h357e@stx)) h35ae@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h35ac@t))) (h2efa@syntax-dispatch h35ac@t '_))) h35a2@t))) (h2efa@syntax-dispatch h35a2@t '(any any any)))) h359a@t))) (h2efa@syntax-dispatch h359a@t '(any any)))) h3598@x))) ((lambda (h3582@t) ((lambda (h3584@ls/false) (if h3584@ls/false (apply (lambda (h3586@binding* h3587@test h3588@expr* h3589@command*) ((lambda (h358e@t) ((lambda (h3590@ls/false) (if h3590@ls/false (apply (lambda (h3592@x* h3593@init* h3594@step*) (if (h2cf9@valid-bound-ids? h3592@x*) (h2eb0@bless (list 'letrec (list (list 'loop (list 'lambda h3592@x* (list 'if h3587@test (cons 'begin (cons '(if #f #f) h3588@expr*)) (cons 'begin (append h3589@command* (list (cons 'loop h3594@step*)))))))) (cons 'loop h3593@init*))) (h2fe3@syntax-violation '#f '"invalid bindings" h357e@stx))) h3590@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h358e@t))) (h2efa@syntax-dispatch h358e@t '#(each (any any any))))) (map h3581@bind h3586@binding*))) h3584@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3582@t))) (h2efa@syntax-dispatch h3582@t '(_ each-any (any . each-any) . each-any)))) h357e@stx))) '#f))) (set! h2ed8@let*-macro (lambda (h35b0@stx) ((lambda (h35b2@t) ((lambda (h35b4@ls/false) (if (and h35b4@ls/false (apply (lambda (h35b6@lhs* h35b7@rhs* h35b8@b h35b9@b*) (for-all h2cef@id? h35b6@lhs*)) h35b4@ls/false)) (apply (lambda (h35be@lhs* h35bf@rhs* h35c0@b h35c1@b*) (h2eb0@bless ((letrec ((h35c6@f (lambda (h35c8@x*) (if (null? h35c8@x*) (cons 'let (cons '() (cons h35c0@b h35c1@b*))) (list 'let (list (car h35c8@x*)) (h35c6@f (cdr h35c8@x*))))))) h35c6@f) (map list h35be@lhs* h35bf@rhs*)))) h35b4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h35b2@t))) (h2efa@syntax-dispatch h35b2@t '(_ #(each (any any)) any . each-any)))) h35b0@stx))) (set! h2eda@or-macro (lambda (h35ca@stx) ((lambda (h35cc@t) ((lambda (h35ce@ls/false) (if h35ce@ls/false (apply (lambda () '#f) h35ce@ls/false) ((lambda (h35d0@t) ((lambda (h35d2@ls/false) (if h35d2@ls/false (apply (lambda (h35d4@e h35d5@e*) (h2eb0@bless ((letrec ((h35d8@f (lambda (h35da@e h35db@e*) (if (null? h35db@e*) (list 'begin '#f h35da@e) (list 'let (list (list 't h35da@e)) (list 'if 't 't (h35d8@f (car h35db@e*) (cdr h35db@e*)))))))) h35d8@f) h35d4@e h35d5@e*))) h35d2@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h35d0@t))) (h2efa@syntax-dispatch h35d0@t '(_ any . each-any)))) h35cc@t))) (h2efa@syntax-dispatch h35cc@t '(_)))) h35ca@stx))) (set! h2edc@and-macro (lambda (h35de@stx) ((lambda (h35e0@t) ((lambda (h35e2@ls/false) (if h35e2@ls/false (apply (lambda () '#t) h35e2@ls/false) ((lambda (h35e4@t) ((lambda (h35e6@ls/false) (if h35e6@ls/false (apply (lambda (h35e8@e h35e9@e*) (h2eb0@bless ((letrec ((h35ec@f (lambda (h35ee@e h35ef@e*) (if (null? h35ef@e*) (list 'begin '#f h35ee@e) (cons 'if (cons h35ee@e (cons (h35ec@f (car h35ef@e*) (cdr h35ef@e*)) '(#f)))))))) h35ec@f) h35e8@e h35e9@e*))) h35e6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h35e4@t))) (h2efa@syntax-dispatch h35e4@t '(_ any . each-any)))) h35e0@t))) (h2efa@syntax-dispatch h35e0@t '(_)))) h35de@stx))) (set! h2ede@cond-macro (lambda (h35f2@stx) ((lambda (h35f4@t) ((lambda (h35f6@ls/false) (if h35f6@ls/false (apply (lambda (h35f8@cls h35f9@cls*) (h2eb0@bless ((letrec ((h35fc@f (lambda (h35fe@cls h35ff@cls*) (if (null? h35ff@cls*) ((lambda (h3602@t) ((lambda (h3604@ls/false) (if h3604@ls/false (apply (lambda (h3606@e h3607@e*) (cons 'begin (cons h3606@e h3607@e*))) h3604@ls/false) ((lambda (h360a@t) ((lambda (h360c@ls/false) (if h360c@ls/false (apply (lambda (h360e@e h360f@p) (list 'let (list (list 't h360e@e)) (list 'if 't (cons h360f@p '(t))))) h360c@ls/false) ((lambda (h3612@t) ((lambda (h3614@ls/false) (if h3614@ls/false (apply (lambda (h3616@e) (cons 'or (cons h3616@e '((if #f #f))))) h3614@ls/false) ((lambda (h3618@t) ((lambda (h361a@ls/false) (if h361a@ls/false (apply (lambda (h361c@e h361d@e*) (list 'if h361c@e (cons 'begin h361d@e*))) h361a@ls/false) ((lambda (h3620@t) ((lambda (h3622@ls/false) (if h3622@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid last clause" h35f2@stx)) h3622@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3620@t))) (h2efa@syntax-dispatch h3620@t '_))) h3618@t))) (h2efa@syntax-dispatch h3618@t '(any . each-any)))) h3612@t))) (h2efa@syntax-dispatch h3612@t '(any)))) h360a@t))) (h2efa@syntax-dispatch h360a@t '(any #(scheme-id =>) any)))) h3602@t))) (h2efa@syntax-dispatch h3602@t '(#(scheme-id else) any . each-any)))) h35fe@cls) ((lambda (h3624@t) ((lambda (h3626@ls/false) (if h3626@ls/false (apply (lambda (h3628@e h3629@e*) (h2fe3@syntax-violation '#f '"incorrect position of keyword else" h35f2@stx)) h3626@ls/false) ((lambda (h362c@t) ((lambda (h362e@ls/false) (if h362e@ls/false (apply (lambda (h3630@e h3631@p) (list 'let (list (list 't h3630@e)) (list 'if 't (cons h3631@p '(t)) (h35fc@f (car h35ff@cls*) (cdr h35ff@cls*))))) h362e@ls/false) ((lambda (h3634@t) ((lambda (h3636@ls/false) (if h3636@ls/false (apply (lambda (h3638@e) (list 'or h3638@e (h35fc@f (car h35ff@cls*) (cdr h35ff@cls*)))) h3636@ls/false) ((lambda (h363a@t) ((lambda (h363c@ls/false) (if h363c@ls/false (apply (lambda (h363e@e h363f@e*) (list 'if h363e@e (cons 'begin h363f@e*) (h35fc@f (car h35ff@cls*) (cdr h35ff@cls*)))) h363c@ls/false) ((lambda (h3642@t) ((lambda (h3644@ls/false) (if h3644@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid last clause" h35f2@stx)) h3644@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3642@t))) (h2efa@syntax-dispatch h3642@t '_))) h363a@t))) (h2efa@syntax-dispatch h363a@t '(any . each-any)))) h3634@t))) (h2efa@syntax-dispatch h3634@t '(any)))) h362c@t))) (h2efa@syntax-dispatch h362c@t '(any #(scheme-id =>) any)))) h3624@t))) (h2efa@syntax-dispatch h3624@t '(#(scheme-id else) any . each-any)))) h35fe@cls))))) h35fc@f) h35f8@cls h35f9@cls*))) h35f6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h35f4@t))) (h2efa@syntax-dispatch h35f4@t '(_ any . each-any)))) h35f2@stx))) (set! h2ee0@do-include (lambda (h3646@stx h3647@id h3648@filename) ((lambda (h364c@filename) (begin (if (not (and (string? h364c@filename) (h2cef@id? h3647@id))) (h2fe3@syntax-violation '#f '"invalid syntax" h3646@stx) (void)) (cons (h2eb0@bless 'begin) (with-input-from-file h364c@filename (lambda () ((letrec ((h364e@f (lambda (h3650@ls) ((lambda (h3652@x) (if (eof-object? h3652@x) (reverse h3650@ls) (h364e@f (cons (h2ccd@datum->stx h3647@id h3652@x) h3650@ls)))) (h288c@h27a9@read-annotated))))) h364e@f) '())))))) (h2d05@stx->datum h3648@filename)))) (set! h2ee2@include-macro (lambda (h3654@e) ((lambda (h3656@t) ((lambda (h3658@ls/false) (if h3658@ls/false (apply (lambda (h365a@id h365b@filename) (h2ee0@do-include h3654@e h365a@id h365b@filename)) h3658@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3656@t))) (h2efa@syntax-dispatch h3656@t '(any any)))) h3654@e))) (set! h2ee4@include-into-macro (lambda (h365e@e) ((lambda (h3660@t) ((lambda (h3662@ls/false) (if h3662@ls/false (apply (lambda (h3664@id h3665@filename) (h2ee0@do-include h365e@e h3664@id h3665@filename)) h3662@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3660@t))) (h2efa@syntax-dispatch h3660@t '(_ any any)))) h365e@e))) (set! h2ee6@syntax-rules-macro (lambda (h3668@e) ((lambda (h366a@t) ((lambda (h366c@ls/false) (if h366c@ls/false (apply (lambda (h366e@lits h366f@pat* h3670@tmp*) (begin (h2f00@verify-literals h366e@lits h3668@e) (h2eb0@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons h366e@lits (map (lambda (h3674@pat h3675@tmp) ((lambda (h3678@t) ((lambda (h367a@ls/false) (if h367a@ls/false (apply (lambda (h367c@rest) (list (cons 'g h367c@rest) (list 'syntax h3675@tmp))) h367a@ls/false) ((lambda (h367e@t) ((lambda (h3680@ls/false) (if h3680@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid syntax-rules pattern" h3668@e h3674@pat)) h3680@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h367e@t))) (h2efa@syntax-dispatch h367e@t '_))) h3678@t))) (h2efa@syntax-dispatch h3678@t '(_ . any)))) h3674@pat)) h366f@pat* h3670@tmp*)))))))) h366c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h366a@t))) (h2efa@syntax-dispatch h366a@t '(_ each-any . #(each (any any)))))) h3668@e))) (set! h2ee8@quasiquote-macro ((lambda () ((lambda (h3683@datum h369f@quasicons* h36a1@quasicons h36a3@quasiappend h36a5@quasivector h36a7@vquasi h36a9@quasi) (begin (set! h3683@datum (lambda (h3784@x) (list (h2e84@scheme-stx 'quote) (h2cd7@mkstx h3784@x '() '() '())))) (set! h369f@quasicons* (lambda (h377c@x h377d@y) ((letrec ((h3780@f (lambda (h3782@x) (if (null? h3782@x) h377d@y (h36a1@quasicons (car h3782@x) (h3780@f (cdr h3782@x))))))) h3780@f) h377c@x))) (set! h36a1@quasicons (lambda (h3756@x h3757@y) ((lambda (h375a@t) ((lambda (h375c@ls/false) (if h375c@ls/false (apply (lambda (h375e@dy) ((lambda (h3760@t) ((lambda (h3762@ls/false) (if h3762@ls/false (apply (lambda (h3764@dx) (list (h2e84@scheme-stx 'quote) (cons h3764@dx h375e@dy))) h3762@ls/false) ((lambda (h3766@t) ((lambda (h3768@ls/false) (if h3768@ls/false (apply (lambda () ((lambda (h376a@t) ((lambda (h376c@ls/false) (if h376c@ls/false (apply (lambda () (list (h2e84@scheme-stx 'list) h3756@x)) h376c@ls/false) ((lambda (h376e@t) ((lambda (h3770@ls/false) (if h3770@ls/false (apply (lambda () (list (h2e84@scheme-stx 'cons) h3756@x h3757@y)) h3770@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h376e@t))) (h2efa@syntax-dispatch h376e@t '_))) h376a@t))) (h2efa@syntax-dispatch h376a@t '()))) h375e@dy)) h3768@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3766@t))) (h2efa@syntax-dispatch h3766@t '_))) h3760@t))) (h2efa@syntax-dispatch h3760@t '(#(scheme-id quote) any)))) h3756@x)) h375c@ls/false) ((lambda (h3772@t) ((lambda (h3774@ls/false) (if h3774@ls/false (apply (lambda (h3776@stuff) (cons* (h2e84@scheme-stx 'list) h3756@x h3776@stuff)) h3774@ls/false) ((lambda (h3778@t) ((lambda (h377a@ls/false) (if h377a@ls/false (apply (lambda () (list (h2e84@scheme-stx 'cons) h3756@x h3757@y)) h377a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3778@t))) (h2efa@syntax-dispatch h3778@t '_))) h3772@t))) (h2efa@syntax-dispatch h3772@t '(#(scheme-id list) . each-any)))) h375a@t))) (h2efa@syntax-dispatch h375a@t '(#(scheme-id quote) any)))) h3757@y))) (set! h36a3@quasiappend (lambda (h373c@x h373d@y) ((lambda (h3740@ls) (if (null? h3740@ls) (list (h2e84@scheme-stx 'quote) '()) (if (null? (cdr h3740@ls)) (car h3740@ls) (cons* (h2e84@scheme-stx 'append) h3740@ls)))) ((letrec ((h3742@f (lambda (h3744@x) (if (null? h3744@x) ((lambda (h3746@t) ((lambda (h3748@ls/false) (if h3748@ls/false (apply (lambda () '()) h3748@ls/false) ((lambda (h374a@t) ((lambda (h374c@ls/false) (if h374c@ls/false (apply (lambda () (list h373d@y)) h374c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h374a@t))) (h2efa@syntax-dispatch h374a@t '_))) h3746@t))) (h2efa@syntax-dispatch h3746@t '(#(scheme-id quote) ())))) h373d@y) ((lambda (h374e@t) ((lambda (h3750@ls/false) (if h3750@ls/false (apply (lambda () (h3742@f (cdr h3744@x))) h3750@ls/false) ((lambda (h3752@t) ((lambda (h3754@ls/false) (if h3754@ls/false (apply (lambda () (cons (car h3744@x) (h3742@f (cdr h3744@x)))) h3754@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3752@t))) (h2efa@syntax-dispatch h3752@t '_))) h374e@t))) (h2efa@syntax-dispatch h374e@t '(#(scheme-id quote) ())))) (car h3744@x)))))) h3742@f) h373c@x)))) (set! h36a5@quasivector (lambda (h370a@x) ((lambda (h370c@pat-x) ((lambda (h370e@t) ((lambda (h3710@ls/false) (if h3710@ls/false (apply (lambda (h3712@x*) (list (h2e84@scheme-stx 'quote) (list->vector h3712@x*))) h3710@ls/false) ((lambda (h3714@t) ((lambda (h3716@ls/false) (if h3716@ls/false (apply (lambda () ((letrec ((h3718@f (lambda (h371a@x h371b@k) ((lambda (h371e@t) ((lambda (h3720@ls/false) (if h3720@ls/false (apply (lambda (h3722@x*) (h371b@k (map (lambda (h3724@x) (list (h2e84@scheme-stx 'quote) h3724@x)) h3722@x*))) h3720@ls/false) ((lambda (h3726@t) ((lambda (h3728@ls/false) (if h3728@ls/false (apply (lambda (h372a@x*) (h371b@k h372a@x*)) h3728@ls/false) ((lambda (h372c@t) ((lambda (h372e@ls/false) (if h372e@ls/false (apply (lambda (h3730@x h3731@y) (h3718@f h3731@y (lambda (h3734@ls) (h371b@k (cons h3730@x h3734@ls))))) h372e@ls/false) ((lambda (h3736@t) ((lambda (h3738@ls/false) (if h3738@ls/false (apply (lambda () (list (h2e84@scheme-stx 'list->vector) h370c@pat-x)) h3738@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3736@t))) (h2efa@syntax-dispatch h3736@t '_))) h372c@t))) (h2efa@syntax-dispatch h372c@t '(#(scheme-id cons) any any)))) h3726@t))) (h2efa@syntax-dispatch h3726@t '(#(scheme-id list) . each-any)))) h371e@t))) (h2efa@syntax-dispatch h371e@t '(#(scheme-id quote) each-any)))) h371a@x)))) h3718@f) h370a@x (lambda (h373a@ls) (cons* (h2e84@scheme-stx 'vector) h373a@ls)))) h3716@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3714@t))) (h2efa@syntax-dispatch h3714@t '_))) h370e@t))) (h2efa@syntax-dispatch h370e@t '(#(scheme-id quote) each-any)))) h370c@pat-x)) h370a@x))) (set! h36a7@vquasi (lambda (h36e8@p h36e9@lev) ((lambda (h36ec@t) ((lambda (h36ee@ls/false) (if h36ee@ls/false (apply (lambda (h36f0@p h36f1@q) ((lambda (h36f4@t) ((lambda (h36f6@ls/false) (if h36f6@ls/false (apply (lambda (h36f8@p) (if (= h36e9@lev '0) (h369f@quasicons* h36f8@p (h36a7@vquasi h36f1@q h36e9@lev)) (h36a1@quasicons (h36a1@quasicons (h3683@datum 'unquote) (h36a9@quasi h36f8@p (- h36e9@lev '1))) (h36a7@vquasi h36f1@q h36e9@lev)))) h36f6@ls/false) ((lambda (h36fa@t) ((lambda (h36fc@ls/false) (if h36fc@ls/false (apply (lambda (h36fe@p) (if (= h36e9@lev '0) (h36a3@quasiappend h36fe@p (h36a7@vquasi h36f1@q h36e9@lev)) (h36a1@quasicons (h36a1@quasicons (h3683@datum 'unquote-splicing) (h36a9@quasi h36fe@p (- h36e9@lev '1))) (h36a7@vquasi h36f1@q h36e9@lev)))) h36fc@ls/false) ((lambda (h3700@t) ((lambda (h3702@ls/false) (if h3702@ls/false (apply (lambda (h3704@p) (h36a1@quasicons (h36a9@quasi h3704@p h36e9@lev) (h36a7@vquasi h36f1@q h36e9@lev))) h3702@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3700@t))) (h2efa@syntax-dispatch h3700@t 'any))) h36fa@t))) (h2efa@syntax-dispatch h36fa@t '(#(scheme-id unquote-splicing) . each-any)))) h36f4@t))) (h2efa@syntax-dispatch h36f4@t '(#(scheme-id unquote) . each-any)))) h36f0@p)) h36ee@ls/false) ((lambda (h3706@t) ((lambda (h3708@ls/false) (if h3708@ls/false (apply (lambda () (list (h2e84@scheme-stx 'quote) '())) h3708@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3706@t))) (h2efa@syntax-dispatch h3706@t '()))) h36ec@t))) (h2efa@syntax-dispatch h36ec@t '(any . any)))) h36e8@p))) (set! h36a9@quasi (lambda (h36b2@p h36b3@lev) ((lambda (h36b6@t) ((lambda (h36b8@ls/false) (if h36b8@ls/false (apply (lambda (h36ba@p) (if (= h36b3@lev '0) h36ba@p (h36a1@quasicons (h3683@datum 'unquote) (h36a9@quasi (list h36ba@p) (- h36b3@lev '1))))) h36b8@ls/false) ((lambda (h36bc@t) ((lambda (h36be@ls/false) (if h36be@ls/false (apply (lambda (h36c0@p h36c1@q) (if (= h36b3@lev '0) (h369f@quasicons* h36c0@p (h36a9@quasi h36c1@q h36b3@lev)) (h36a1@quasicons (h36a1@quasicons (h3683@datum 'unquote) (h36a9@quasi h36c0@p (- h36b3@lev '1))) (h36a9@quasi h36c1@q h36b3@lev)))) h36be@ls/false) ((lambda (h36c4@t) ((lambda (h36c6@ls/false) (if h36c6@ls/false (apply (lambda (h36c8@p h36c9@q) (if (= h36b3@lev '0) (h36a3@quasiappend h36c8@p (h36a9@quasi h36c9@q h36b3@lev)) (h36a1@quasicons (h36a1@quasicons (h3683@datum 'unquote-splicing) (h36a9@quasi h36c8@p (- h36b3@lev '1))) (h36a9@quasi h36c9@q h36b3@lev)))) h36c6@ls/false) ((lambda (h36cc@t) ((lambda (h36ce@ls/false) (if h36ce@ls/false (apply (lambda (h36d0@p) (h36a1@quasicons (h3683@datum 'quasiquote) (h36a9@quasi (list h36d0@p) (+ h36b3@lev '1)))) h36ce@ls/false) ((lambda (h36d2@t) ((lambda (h36d4@ls/false) (if h36d4@ls/false (apply (lambda (h36d6@p h36d7@q) (h36a1@quasicons (h36a9@quasi h36d6@p h36b3@lev) (h36a9@quasi h36d7@q h36b3@lev))) h36d4@ls/false) ((lambda (h36da@t) ((lambda (h36dc@ls/false) (if (and h36dc@ls/false (apply (lambda (h36de@x) (not (h2cb7@stx? h36de@x))) h36dc@ls/false)) (apply (lambda (h36e0@x) (h36a5@quasivector (h36a7@vquasi h36e0@x h36b3@lev))) h36dc@ls/false) ((lambda (h36e2@t) ((lambda (h36e4@ls/false) (if h36e4@ls/false (apply (lambda (h36e6@p) (list (h2e84@scheme-stx 'quote) h36e6@p)) h36e4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h36e2@t))) (h2efa@syntax-dispatch h36e2@t 'any))) h36da@t))) (h2efa@syntax-dispatch h36da@t '#(vector each-any)))) h36d2@t))) (h2efa@syntax-dispatch h36d2@t '(any . any)))) h36cc@t))) (h2efa@syntax-dispatch h36cc@t '(#(scheme-id quasiquote) any)))) h36c4@t))) (h2efa@syntax-dispatch h36c4@t '((#(scheme-id unquote-splicing) . each-any) . any)))) h36bc@t))) (h2efa@syntax-dispatch h36bc@t '((#(scheme-id unquote) . each-any) . any)))) h36b6@t))) (h2efa@syntax-dispatch h36b6@t '(#(scheme-id unquote) any)))) h36b2@p))) (lambda (h36aa@x) ((lambda (h36ac@t) ((lambda (h36ae@ls/false) (if h36ae@ls/false (apply (lambda (h36b0@e) (h36a9@quasi h36b0@e '0)) h36ae@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h36ac@t))) (h2efa@syntax-dispatch h36ac@t '(_ any)))) h36aa@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! h2eea@quasisyntax-macro ((lambda () ((lambda (h3787@quasi) (begin (set! h3787@quasi (lambda (h37a2@p h37a3@lev) ((lambda (h37a6@t) ((lambda (h37a8@ls/false) (if h37a8@ls/false (apply (lambda (h37aa@p) (if (= h37a3@lev '0) ((lambda (h37ac@g) (values (list h37ac@g) (list h37aa@p) h37ac@g)) (gensym)) (call-with-values (lambda () (h3787@quasi h37aa@p (- h37a3@lev '1))) (lambda (h37b4@h37af h37b5@h37b1 h37b6@h37b3) ((lambda (h37ba@p h37bb@rhs* h37bc@lhs*) (values h37bc@lhs* h37bb@rhs* (list 'unsyntax h37ba@p))) h37b6@h37b3 h37b5@h37b1 h37b4@h37af))))) h37a8@ls/false) ((lambda (h37c0@t) ((lambda (h37c2@ls/false) (if (and h37c2@ls/false (apply (lambda () (= h37a3@lev '0)) h37c2@ls/false)) (apply (lambda () (h2fe3@syntax-violation '#f '"incorrect use of unsyntax" h37a2@p)) h37c2@ls/false) ((lambda (h37c4@t) ((lambda (h37c6@ls/false) (if h37c6@ls/false (apply (lambda (h37c8@p* h37c9@q) (call-with-values (lambda () (h3787@quasi h37c9@q h37a3@lev)) (lambda (h37d2@h37cd h37d3@h37cf h37d4@h37d1) ((lambda (h37d8@q h37d9@rhs* h37da@lhs*) (if (= h37a3@lev '0) ((lambda (h37de@g*) (values (append h37de@g* h37da@lhs*) (append h37c8@p* h37d9@rhs*) (append h37de@g* h37d8@q))) (map (lambda (h37e0@x) (gensym)) h37c8@p*)) (call-with-values (lambda () (h3787@quasi h37c8@p* (- h37a3@lev '1))) (lambda (h37e8@h37e3 h37e9@h37e5 h37ea@h37e7) ((lambda (h37ee@p* h37ef@rhs2* h37f0@lhs2*) (values (append h37f0@lhs2* h37da@lhs*) (append h37ef@rhs2* h37d9@rhs*) (cons (cons 'unsyntax h37ee@p*) h37d8@q))) h37ea@h37e7 h37e9@h37e5 h37e8@h37e3))))) h37d4@h37d1 h37d3@h37cf h37d2@h37cd)))) h37c6@ls/false) ((lambda (h37f4@t) ((lambda (h37f6@ls/false) (if h37f6@ls/false (apply (lambda (h37f8@p* h37f9@q) (call-with-values (lambda () (h3787@quasi h37f9@q h37a3@lev)) (lambda (h3802@h37fd h3803@h37ff h3804@h3801) ((lambda (h3808@q h3809@rhs* h380a@lhs*) (if (= h37a3@lev '0) ((lambda (h380e@g*) (values (append (map (lambda (h3810@g) (cons h3810@g '(...))) h380e@g*) h380a@lhs*) (append h37f8@p* h3809@rhs*) (append (apply append (map (lambda (h3812@g) (cons h3812@g '(...))) h380e@g*)) h3808@q))) (map (lambda (h3814@x) (gensym)) h37f8@p*)) (call-with-values (lambda () (h3787@quasi h37f8@p* (- h37a3@lev '1))) (lambda (h381c@h3817 h381d@h3819 h381e@h381b) ((lambda (h3822@p* h3823@rhs2* h3824@lhs2*) (values (append h3824@lhs2* h380a@lhs*) (append h3823@rhs2* h3809@rhs*) (cons (cons 'unsyntax-splicing h3822@p*) h3808@q))) h381e@h381b h381d@h3819 h381c@h3817))))) h3804@h3801 h3803@h37ff h3802@h37fd)))) h37f6@ls/false) ((lambda (h3828@t) ((lambda (h382a@ls/false) (if (and h382a@ls/false (apply (lambda () (= h37a3@lev '0)) h382a@ls/false)) (apply (lambda () (h2fe3@syntax-violation '#f '"incorrect use of unsyntax-splicing" h37a2@p)) h382a@ls/false) ((lambda (h382c@t) ((lambda (h382e@ls/false) (if h382e@ls/false (apply (lambda (h3830@p) (call-with-values (lambda () (h3787@quasi h3830@p (+ h37a3@lev '1))) (lambda (h3838@h3833 h3839@h3835 h383a@h3837) ((lambda (h383e@p h383f@rhs* h3840@lhs*) (values h3840@lhs* h383f@rhs* (list 'quasisyntax h383e@p))) h383a@h3837 h3839@h3835 h3838@h3833)))) h382e@ls/false) ((lambda (h3844@t) ((lambda (h3846@ls/false) (if h3846@ls/false (apply (lambda (h3848@p h3849@q) (call-with-values (lambda () (h3787@quasi h3848@p h37a3@lev)) (lambda (h3858@h384d h3859@h384f h385a@h3851) (call-with-values (lambda () (h3787@quasi h3849@q h37a3@lev)) (lambda (h385e@h3853 h385f@h3855 h3860@h3857) ((lambda (h3864@q h3865@rhs2* h3866@lhs2* h3867@p h3868@rhs* h3869@lhs*) (values (append h3866@lhs2* h3869@lhs*) (append h3865@rhs2* h3868@rhs*) (cons h3867@p h3864@q))) h3860@h3857 h385f@h3855 h385e@h3853 h385a@h3851 h3859@h384f h3858@h384d)))))) h3846@ls/false) ((lambda (h3870@t) ((lambda (h3872@ls/false) (if h3872@ls/false (apply (lambda (h3874@x*) (call-with-values (lambda () (h3787@quasi h3874@x* h37a3@lev)) (lambda (h387c@h3877 h387d@h3879 h387e@h387b) ((lambda (h3882@x* h3883@rhs* h3884@lhs*) (values h3884@lhs* h3883@rhs* (list->vector h3882@x*))) h387e@h387b h387d@h3879 h387c@h3877)))) h3872@ls/false) ((lambda (h3888@t) ((lambda (h388a@ls/false) (if h388a@ls/false (apply (lambda () (values '() '() h37a2@p)) h388a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3888@t))) (h2efa@syntax-dispatch h3888@t '_))) h3870@t))) (h2efa@syntax-dispatch h3870@t '#(vector each-any)))) h3844@t))) (h2efa@syntax-dispatch h3844@t '(any . any)))) h382c@t))) (h2efa@syntax-dispatch h382c@t '(#(scheme-id quasisyntax) any)))) h3828@t))) (h2efa@syntax-dispatch h3828@t '#(scheme-id unsyntax-splicing)))) h37f4@t))) (h2efa@syntax-dispatch h37f4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) h37c4@t))) (h2efa@syntax-dispatch h37c4@t '((#(scheme-id unsyntax) . each-any) . any)))) h37c0@t))) (h2efa@syntax-dispatch h37c0@t '#(scheme-id unsyntax)))) h37a6@t))) (h2efa@syntax-dispatch h37a6@t '(#(scheme-id unsyntax) any)))) h37a2@p))) (lambda (h3788@x) ((lambda (h378a@t) ((lambda (h378c@ls/false) (if h378c@ls/false (apply (lambda (h378e@e) (call-with-values (lambda () (h3787@quasi h378e@e '0)) (lambda (h3796@h3791 h3797@h3793 h3798@h3795) ((lambda (h379c@v h379d@rhs* h379e@lhs*) (h2eb0@bless (list 'syntax-case (cons 'list h379d@rhs*) '() (list h379e@lhs* (list 'syntax h379c@v))))) h3798@h3795 h3797@h3793 h3796@h3791)))) h378c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h378a@t))) (h2efa@syntax-dispatch h378a@t '(_ any)))) h3788@x)))) '#f)))) (set! h2eec@define-struct-macro (lambda (h388c@stx) (h2fe3@syntax-violation '#f '"define-struct not supported" h388c@stx))) (set! h2eee@define-record-type-macro (lambda (h388e@x) ((lambda (h3891@id h3893@get-record-name h3895@get-record-constructor-name h3897@get-record-predicate-name h3899@get-clause h389b@foo-rtd-code h389d@parent-rtd-code h389f@parent-rcd-code h38a1@foo-rcd-code h38a3@get-protocol-code h38a5@get-fields h38a7@get-mutator-indices h38a9@get-mutators h38ab@get-accessors h38ad@enumerate h38af@do-define-record h38b1@verify-clauses) (begin (set! h3891@id (lambda (h3a84@ctxt . h3a86@str*) (h2fe7@datum->syntax h3a84@ctxt (string->symbol (apply string-append (map (lambda (h3a88@x) (if (symbol? h3a88@x) (symbol->string h3a88@x) (if (string? h3a88@x) h3a88@x (assertion-violation 'define-record-type '"BUG")))) h3a86@str*)))))) (set! h3893@get-record-name (lambda (h3a72@spec) ((lambda (h3a74@t) ((lambda (h3a76@ls/false) (if h3a76@ls/false (apply (lambda (h3a78@foo h3a79@make-foo h3a7a@foo?) h3a78@foo) h3a76@ls/false) ((lambda (h3a7e@t) ((lambda (h3a80@ls/false) (if h3a80@ls/false (apply (lambda (h3a82@foo) h3a82@foo) h3a80@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a7e@t))) (h2efa@syntax-dispatch h3a7e@t 'any))) h3a74@t))) (h2efa@syntax-dispatch h3a74@t '(any any any)))) h3a72@spec))) (set! h3895@get-record-constructor-name (lambda (h3a5e@spec) ((lambda (h3a60@t) ((lambda (h3a62@ls/false) (if h3a62@ls/false (apply (lambda (h3a64@foo h3a65@make-foo h3a66@foo?) h3a65@make-foo) h3a62@ls/false) ((lambda (h3a6a@t) ((lambda (h3a6c@ls/false) (if (and h3a6c@ls/false (apply (lambda (h3a6e@foo) (h2cef@id? h3a6e@foo)) h3a6c@ls/false)) (apply (lambda (h3a70@foo) (h3891@id h3a70@foo '"make-" (h2d05@stx->datum h3a70@foo))) h3a6c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a6a@t))) (h2efa@syntax-dispatch h3a6a@t 'any))) h3a60@t))) (h2efa@syntax-dispatch h3a60@t '(any any any)))) h3a5e@spec))) (set! h3897@get-record-predicate-name (lambda (h3a4a@spec) ((lambda (h3a4c@t) ((lambda (h3a4e@ls/false) (if h3a4e@ls/false (apply (lambda (h3a50@foo h3a51@make-foo h3a52@foo?) h3a52@foo?) h3a4e@ls/false) ((lambda (h3a56@t) ((lambda (h3a58@ls/false) (if (and h3a58@ls/false (apply (lambda (h3a5a@foo) (h2cef@id? h3a5a@foo)) h3a58@ls/false)) (apply (lambda (h3a5c@foo) (h3891@id h3a5c@foo (h2d05@stx->datum h3a5c@foo) '"?")) h3a58@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a56@t))) (h2efa@syntax-dispatch h3a56@t 'any))) h3a4c@t))) (h2efa@syntax-dispatch h3a4c@t '(any any any)))) h3a4a@spec))) (set! h3899@get-clause (lambda (h3a38@id h3a39@ls) ((lambda (h3a3c@t) ((lambda (h3a3e@ls/false) (if h3a3e@ls/false (apply (lambda () '#f) h3a3e@ls/false) ((lambda (h3a40@t) ((lambda (h3a42@ls/false) (if h3a42@ls/false (apply (lambda (h3a44@x h3a45@rest h3a46@ls) (if (h2cf7@free-id=? (h2eb0@bless h3a38@id) h3a44@x) (cons h3a44@x h3a45@rest) (h3899@get-clause h3a38@id h3a46@ls))) h3a42@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a40@t))) (h2efa@syntax-dispatch h3a40@t '((any . any) . any)))) h3a3c@t))) (h2efa@syntax-dispatch h3a3c@t '()))) h3a39@ls))) (set! h389b@foo-rtd-code (lambda (h39e6@name h39e7@clause* h39e8@parent-rtd-code) ((lambda (h39ed@convert-field-spec*) (begin (set! h39ed@convert-field-spec* (lambda (h3a1e@ls) (list->vector (map (lambda (h3a20@x) ((lambda (h3a22@t) ((lambda (h3a24@ls/false) (if h3a24@ls/false (apply (lambda (h3a26@name h3a27@rest) (list 'mutable h3a26@name)) h3a24@ls/false) ((lambda (h3a2a@t) ((lambda (h3a2c@ls/false) (if h3a2c@ls/false (apply (lambda (h3a2e@name h3a2f@rest) (list 'immutable h3a2e@name)) h3a2c@ls/false) ((lambda (h3a32@t) ((lambda (h3a34@ls/false) (if h3a34@ls/false (apply (lambda (h3a36@name) (list 'immutable h3a36@name)) h3a34@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a32@t))) (h2efa@syntax-dispatch h3a32@t 'any))) h3a2a@t))) (h2efa@syntax-dispatch h3a2a@t '(#(scheme-id immutable) any . any)))) h3a22@t))) (h2efa@syntax-dispatch h3a22@t '(#(scheme-id mutable) any . any)))) h3a20@x)) h3a1e@ls)))) ((lambda (h39ee@uid-code h39ef@sealed? h39f0@opaque? h39f1@fields) (h2eb0@bless (list 'make-record-type-descriptor (list 'quote h39e6@name) h39e8@parent-rtd-code h39ee@uid-code h39ef@sealed? h39f0@opaque? h39f1@fields))) ((lambda (h39f6@t) ((lambda (h39f8@ls/false) (if h39f8@ls/false (apply (lambda () (list 'quote (gensym))) h39f8@ls/false) ((lambda (h39fa@t) ((lambda (h39fc@ls/false) (if h39fc@ls/false (apply (lambda (h39fe@uid) (list 'quote h39fe@uid)) h39fc@ls/false) ((lambda (h3a00@t) ((lambda (h3a02@ls/false) (if h3a02@ls/false (apply (lambda () '#f) h3a02@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a00@t))) (h2efa@syntax-dispatch h3a00@t '_))) h39fa@t))) (h2efa@syntax-dispatch h39fa@t '(_ any)))) h39f6@t))) (h2efa@syntax-dispatch h39f6@t '(_)))) (h3899@get-clause 'nongenerative h39e7@clause*)) ((lambda (h3a04@t) ((lambda (h3a06@ls/false) (if h3a06@ls/false (apply (lambda () '#t) h3a06@ls/false) ((lambda (h3a08@t) ((lambda (h3a0a@ls/false) (if h3a0a@ls/false (apply (lambda () '#f) h3a0a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a08@t))) (h2efa@syntax-dispatch h3a08@t '_))) h3a04@t))) (h2efa@syntax-dispatch h3a04@t '(_ #(atom #t))))) (h3899@get-clause 'sealed h39e7@clause*)) ((lambda (h3a0c@t) ((lambda (h3a0e@ls/false) (if h3a0e@ls/false (apply (lambda () '#t) h3a0e@ls/false) ((lambda (h3a10@t) ((lambda (h3a12@ls/false) (if h3a12@ls/false (apply (lambda () '#f) h3a12@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a10@t))) (h2efa@syntax-dispatch h3a10@t '_))) h3a0c@t))) (h2efa@syntax-dispatch h3a0c@t '(_ #(atom #t))))) (h3899@get-clause 'opaque h39e7@clause*)) ((lambda (h3a14@t) ((lambda (h3a16@ls/false) (if h3a16@ls/false (apply (lambda (h3a18@field-spec*) (list 'quote (h39ed@convert-field-spec* h3a18@field-spec*))) h3a16@ls/false) ((lambda (h3a1a@t) ((lambda (h3a1c@ls/false) (if h3a1c@ls/false (apply (lambda () ''#()) h3a1c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a1a@t))) (h2efa@syntax-dispatch h3a1a@t '_))) h3a14@t))) (h2efa@syntax-dispatch h3a14@t '(_ . each-any)))) (h3899@get-clause 'fields h39e7@clause*))))) '#f))) (set! h389d@parent-rtd-code (lambda (h39ce@clause*) ((lambda (h39d0@t) ((lambda (h39d2@ls/false) (if h39d2@ls/false (apply (lambda (h39d4@name) (list 'record-type-descriptor h39d4@name)) h39d2@ls/false) ((lambda (h39d6@t) ((lambda (h39d8@ls/false) (if h39d8@ls/false (apply (lambda () ((lambda (h39da@t) ((lambda (h39dc@ls/false) (if h39dc@ls/false (apply (lambda (h39de@rtd h39df@rcd) h39de@rtd) h39dc@ls/false) ((lambda (h39e2@t) ((lambda (h39e4@ls/false) (if h39e4@ls/false (apply (lambda () '#f) h39e4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h39e2@t))) (h2efa@syntax-dispatch h39e2@t '#(atom #f)))) h39da@t))) (h2efa@syntax-dispatch h39da@t '(_ any any)))) (h3899@get-clause 'parent-rtd h39ce@clause*))) h39d8@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h39d6@t))) (h2efa@syntax-dispatch h39d6@t '#(atom #f)))) h39d0@t))) (h2efa@syntax-dispatch h39d0@t '(_ any)))) (h3899@get-clause 'parent h39ce@clause*)))) (set! h389f@parent-rcd-code (lambda (h39b6@clause*) ((lambda (h39b8@t) ((lambda (h39ba@ls/false) (if h39ba@ls/false (apply (lambda (h39bc@name) (list 'record-constructor-descriptor h39bc@name)) h39ba@ls/false) ((lambda (h39be@t) ((lambda (h39c0@ls/false) (if h39c0@ls/false (apply (lambda () ((lambda (h39c2@t) ((lambda (h39c4@ls/false) (if h39c4@ls/false (apply (lambda (h39c6@rtd h39c7@rcd) h39c7@rcd) h39c4@ls/false) ((lambda (h39ca@t) ((lambda (h39cc@ls/false) (if h39cc@ls/false (apply (lambda () '#f) h39cc@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h39ca@t))) (h2efa@syntax-dispatch h39ca@t '#(atom #f)))) h39c2@t))) (h2efa@syntax-dispatch h39c2@t '(_ any any)))) (h3899@get-clause 'parent-rtd h39b6@clause*))) h39c0@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h39be@t))) (h2efa@syntax-dispatch h39be@t '#(atom #f)))) h39b8@t))) (h2efa@syntax-dispatch h39b8@t '(_ any)))) (h3899@get-clause 'parent h39b6@clause*)))) (set! h38a1@foo-rcd-code (lambda (h39ae@clause* h39af@foo-rtd h39b0@protocol h39b1@parent-rcd-code) (list 'make-record-constructor-descriptor h39af@foo-rtd h39b1@parent-rcd-code h39b0@protocol))) (set! h38a3@get-protocol-code (lambda (h39a2@clause*) ((lambda (h39a4@t) ((lambda (h39a6@ls/false) (if h39a6@ls/false (apply (lambda (h39a8@expr) h39a8@expr) h39a6@ls/false) ((lambda (h39aa@t) ((lambda (h39ac@ls/false) (if h39ac@ls/false (apply (lambda () '#f) h39ac@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h39aa@t))) (h2efa@syntax-dispatch h39aa@t '_))) h39a4@t))) (h2efa@syntax-dispatch h39a4@t '(_ any)))) (h3899@get-clause 'protocol h39a2@clause*)))) (set! h38a5@get-fields (lambda (h3990@clause*) ((lambda (h3992@t) ((lambda (h3994@ls/false) (if h3994@ls/false (apply (lambda () '()) h3994@ls/false) ((lambda (h3996@t) ((lambda (h3998@ls/false) (if h3998@ls/false (apply (lambda (h399a@f*) h399a@f*) h3998@ls/false) ((lambda (h399c@t) ((lambda (h399e@ls/false) (if h399e@ls/false (apply (lambda (h39a0@rest) (h38a5@get-fields h39a0@rest)) h399e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h399c@t))) (h2efa@syntax-dispatch h399c@t '(_ . any)))) h3996@t))) (h2efa@syntax-dispatch h3996@t '((#(scheme-id fields) . each-any) . _)))) h3992@t))) (h2efa@syntax-dispatch h3992@t '()))) h3990@clause*))) (set! h38a7@get-mutator-indices (lambda (h3978@fields) ((letrec ((h397a@f (lambda (h397c@fields h397d@i) ((lambda (h3980@t) ((lambda (h3982@ls/false) (if h3982@ls/false (apply (lambda () '()) h3982@ls/false) ((lambda (h3984@t) ((lambda (h3986@ls/false) (if h3986@ls/false (apply (lambda (h3988@rest) (cons h397d@i (h397a@f h3988@rest (+ h397d@i '1)))) h3986@ls/false) ((lambda (h398a@t) ((lambda (h398c@ls/false) (if h398c@ls/false (apply (lambda (h398e@rest) (h397a@f h398e@rest (+ h397d@i '1))) h398c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h398a@t))) (h2efa@syntax-dispatch h398a@t '(_ . any)))) h3984@t))) (h2efa@syntax-dispatch h3984@t '((#(scheme-id mutable) . _) . any)))) h3980@t))) (h2efa@syntax-dispatch h3980@t '()))) h397c@fields)))) h397a@f) h3978@fields '0))) (set! h38a9@get-mutators (lambda (h394e@foo h394f@fields) ((lambda (h3953@gen-name) (begin (set! h3953@gen-name (lambda (h3976@x) (h2fe7@datum->syntax h394e@foo (string->symbol (string-append (symbol->string (h2fe9@syntax->datum h394e@foo)) '"-" (symbol->string (h2fe9@syntax->datum h3976@x)) '"-set!"))))) ((letrec ((h3954@f (lambda (h3956@fields) ((lambda (h3958@t) ((lambda (h395a@ls/false) (if h395a@ls/false (apply (lambda () '()) h395a@ls/false) ((lambda (h395c@t) ((lambda (h395e@ls/false) (if h395e@ls/false (apply (lambda (h3960@name h3961@accessor h3962@mutator h3963@rest) (cons h3962@mutator (h3954@f h3963@rest))) h395e@ls/false) ((lambda (h3968@t) ((lambda (h396a@ls/false) (if h396a@ls/false (apply (lambda (h396c@name h396d@rest) (cons (h3953@gen-name h396c@name) (h3954@f h396d@rest))) h396a@ls/false) ((lambda (h3970@t) ((lambda (h3972@ls/false) (if h3972@ls/false (apply (lambda (h3974@rest) (h3954@f h3974@rest)) h3972@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3970@t))) (h2efa@syntax-dispatch h3970@t '(_ . any)))) h3968@t))) (h2efa@syntax-dispatch h3968@t '((#(scheme-id mutable) any) . any)))) h395c@t))) (h2efa@syntax-dispatch h395c@t '((#(scheme-id mutable) any any any) . any)))) h3958@t))) (h2efa@syntax-dispatch h3958@t '()))) h3956@fields)))) h3954@f) h394f@fields))) '#f))) (set! h38ab@get-accessors (lambda (h390a@foo h390b@fields) ((lambda (h390f@gen-name) (begin (set! h390f@gen-name (lambda (h394c@x) (h2fe7@datum->syntax h390a@foo (string->symbol (string-append (symbol->string (h2fe9@syntax->datum h390a@foo)) '"-" (symbol->string (h2fe9@syntax->datum h394c@x))))))) (map (lambda (h3910@field) ((lambda (h3912@t) ((lambda (h3914@ls/false) (if (and h3914@ls/false (apply (lambda (h3916@name h3917@accessor h3918@mutator) (h2cef@id? h3917@accessor)) h3914@ls/false)) (apply (lambda (h391c@name h391d@accessor h391e@mutator) h391d@accessor) h3914@ls/false) ((lambda (h3922@t) ((lambda (h3924@ls/false) (if (and h3924@ls/false (apply (lambda (h3926@name h3927@accessor) (h2cef@id? h3927@accessor)) h3924@ls/false)) (apply (lambda (h392a@name h392b@accessor) h392b@accessor) h3924@ls/false) ((lambda (h392e@t) ((lambda (h3930@ls/false) (if (and h3930@ls/false (apply (lambda (h3932@name) (h2cef@id? h3932@name)) h3930@ls/false)) (apply (lambda (h3934@name) (h390f@gen-name h3934@name)) h3930@ls/false) ((lambda (h3936@t) ((lambda (h3938@ls/false) (if (and h3938@ls/false (apply (lambda (h393a@name) (h2cef@id? h393a@name)) h3938@ls/false)) (apply (lambda (h393c@name) (h390f@gen-name h393c@name)) h3938@ls/false) ((lambda (h393e@t) ((lambda (h3940@ls/false) (if (and h3940@ls/false (apply (lambda (h3942@name) (h2cef@id? h3942@name)) h3940@ls/false)) (apply (lambda (h3944@name) (h390f@gen-name h3944@name)) h3940@ls/false) ((lambda (h3946@t) ((lambda (h3948@ls/false) (if h3948@ls/false (apply (lambda (h394a@others) (h2fe3@syntax-violation '#f '"invalid field spec" h3910@field)) h3948@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3946@t))) (h2efa@syntax-dispatch h3946@t 'any))) h393e@t))) (h2efa@syntax-dispatch h393e@t 'any))) h3936@t))) (h2efa@syntax-dispatch h3936@t '(#(scheme-id immutable) any)))) h392e@t))) (h2efa@syntax-dispatch h392e@t '(#(scheme-id mutable) any)))) h3922@t))) (h2efa@syntax-dispatch h3922@t '(#(scheme-id immutable) any any)))) h3912@t))) (h2efa@syntax-dispatch h3912@t '(#(scheme-id mutable) any any any)))) h3910@field)) h390b@fields))) '#f))) (set! h38ad@enumerate (lambda (h3902@ls) ((letrec ((h3904@f (lambda (h3906@ls h3907@i) (if (null? h3906@ls) '() (cons h3907@i (h3904@f (cdr h3906@ls) (+ h3907@i '1))))))) h3904@f) h3902@ls '0))) (set! h38af@do-define-record (lambda (h38da@namespec h38db@clause*) ((lambda (h38de@foo) ((lambda (h38e0@foo-rtd) ((lambda (h38e2@foo-rcd) ((lambda (h38e4@protocol) ((lambda (h38e6@make-foo) ((lambda (h38e8@fields) ((lambda (h38ea@idx*) ((lambda (h38ec@foo-x*) ((lambda (h38ee@set-foo-x!*) ((lambda (h38f0@set-foo-idx*) ((lambda (h38f2@foo?) ((lambda (h38f4@foo-rtd-code) ((lambda (h38f6@foo-rcd-code) ((lambda (h38f8@protocol-code) ((lambda () (h2eb0@bless (cons 'begin (cons (list 'define h38e0@foo-rtd h38f4@foo-rtd-code) (cons (list 'define h38e4@protocol h38f8@protocol-code) (cons (list 'define h38e2@foo-rcd h38f6@foo-rcd-code) (cons (list 'define-syntax h38de@foo (list 'list ''$rtd (list 'syntax h38e0@foo-rtd) (list 'syntax h38e2@foo-rcd))) (cons (list 'define h38f2@foo? (list 'record-predicate h38e0@foo-rtd)) (cons (list 'define h38e6@make-foo (list 'record-constructor h38e2@foo-rcd)) (append (map (lambda (h38fa@foo-x h38fb@idx) (list 'define h38fa@foo-x (list 'record-accessor h38e0@foo-rtd h38fb@idx))) h38ec@foo-x* h38ea@idx*) (map (lambda (h38fe@set-foo-x! h38ff@idx) (list 'define h38fe@set-foo-x! (list 'record-mutator h38e0@foo-rtd h38ff@idx))) h38ee@set-foo-x!* h38f0@set-foo-idx*))))))))))))) (h38a3@get-protocol-code h38db@clause*))) (h38a1@foo-rcd-code h38db@clause* h38e0@foo-rtd h38e4@protocol (h389f@parent-rcd-code h38db@clause*)))) (h389b@foo-rtd-code h38de@foo h38db@clause* (h389d@parent-rtd-code h38db@clause*)))) (h3897@get-record-predicate-name h38da@namespec))) (h38a7@get-mutator-indices h38e8@fields))) (h38a9@get-mutators h38de@foo h38e8@fields))) (h38ab@get-accessors h38de@foo h38e8@fields))) (h38ad@enumerate h38e8@fields))) (h38a5@get-fields h38db@clause*))) (h3895@get-record-constructor-name h38da@namespec))) (gensym))) (gensym))) (gensym))) (h3893@get-record-name h38da@namespec)))) (set! h38b1@verify-clauses (lambda (h38ba@x h38bb@cls*) ((lambda (h38bf@valid-kwds h38c1@free-id-member?) (begin (set! h38bf@valid-kwds (map h2eb0@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! h38c1@free-id-member? (lambda (h38d6@x h38d7@ls) (and (pair? h38d7@ls) (or (h2cf7@free-id=? h38d6@x (car h38d7@ls)) (h38c1@free-id-member? h38d6@x (cdr h38d7@ls)))))) ((letrec ((h38c2@f (lambda (h38c4@cls* h38c5@seen*) (if (not (null? h38c4@cls*)) ((lambda (h38c8@t) ((lambda (h38ca@ls/false) (if h38ca@ls/false (apply (lambda (h38cc@kwd h38cd@rest) (if (or (not (h2cef@id? h38cc@kwd)) (not (h38c1@free-id-member? h38cc@kwd h38bf@valid-kwds))) (h2fe3@syntax-violation '#f '"not a valid define-record-type keyword" h38cc@kwd) (if (h2cfd@bound-id-member? h38cc@kwd h38c5@seen*) (h2fe3@syntax-violation '#f '"duplicate use of keyword " h38ba@x h38cc@kwd) (h38c2@f (cdr h38c4@cls*) (cons h38cc@kwd h38c5@seen*))))) h38ca@ls/false) ((lambda (h38d0@t) ((lambda (h38d2@ls/false) (if h38d2@ls/false (apply (lambda (h38d4@cls) (h2fe3@syntax-violation '#f '"malformed define-record-type clause" h38d4@cls)) h38d2@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h38d0@t))) (h2efa@syntax-dispatch h38d0@t 'any))) h38c8@t))) (h2efa@syntax-dispatch h38c8@t '(any . any)))) (car h38c4@cls*)) (void))))) h38c2@f) h38bb@cls* '()))) '#f '#f))) ((lambda (h38b2@t) ((lambda (h38b4@ls/false) (if h38b4@ls/false (apply (lambda (h38b6@namespec h38b7@clause*) (begin (h38b1@verify-clauses h388e@x h38b7@clause*) (h38af@do-define-record h38b6@namespec h38b7@clause*))) h38b4@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h38b2@t))) (h2efa@syntax-dispatch h38b2@t '(_ any . each-any)))) h388e@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! h2ef0@define-condition-type-macro (lambda (h3a8a@x) ((lambda (h3a8d@mkname) (begin (set! h3a8d@mkname (lambda (h3aba@name h3abb@suffix) (h2fe7@datum->syntax h3aba@name (string->symbol (string-append (symbol->string (h2fe9@syntax->datum h3aba@name)) h3abb@suffix))))) ((lambda (h3a8e@t) ((lambda (h3a90@ls/false) (if (and h3a90@ls/false (apply (lambda (h3a92@ctxt h3a93@name h3a94@super h3a95@constructor h3a96@predicate h3a97@field* h3a98@accessor*) (and (h2cef@id? h3a93@name) (h2cef@id? h3a94@super) (h2cef@id? h3a95@constructor) (h2cef@id? h3a96@predicate) (for-all h2cef@id? h3a97@field*) (for-all h2cef@id? h3a98@accessor*))) h3a90@ls/false)) (apply (lambda (h3aa0@ctxt h3aa1@name h3aa2@super h3aa3@constructor h3aa4@predicate h3aa5@field* h3aa6@accessor*) ((lambda (h3aae@aux-accessor*) (h2eb0@bless (cons 'begin (cons (cons 'define-record-type (cons (list h3aa1@name h3aa3@constructor (gensym)) (cons (list 'parent h3aa2@super) (cons (cons 'fields (map (lambda (h3ab0@field h3ab1@aux) (list 'immutable h3ab0@field h3ab1@aux)) h3aa5@field* h3aae@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define h3aa4@predicate (list 'condition-predicate (list 'record-type-descriptor h3aa1@name))) (map (lambda (h3ab4@accessor h3ab5@aux) (list 'define h3ab4@accessor (list 'condition-accessor (list 'record-type-descriptor h3aa1@name) h3ab5@aux))) h3aa6@accessor* h3aae@aux-accessor*)))))) (map (lambda (h3ab8@x) (gensym)) h3aa6@accessor*))) h3a90@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3a8e@t))) (h2efa@syntax-dispatch h3a8e@t '(any any any any any . #(each (any any)))))) h3a8a@x))) '#f))) (set! h2ef2@incorrect-usage-macro (lambda (h3abe@e) (h2fe3@syntax-violation '#f '"incorrect usage of auxiliary keyword" h3abe@e))) (set! h2ef4@parameterize-macro (lambda (h3ac0@e) ((lambda (h3ac2@t) ((lambda (h3ac4@ls/false) (if h3ac4@ls/false (apply (lambda (h3ac6@b h3ac7@b*) (h2eb0@bless (cons 'let (cons '() (cons h3ac6@b h3ac7@b*))))) h3ac4@ls/false) ((lambda (h3aca@t) ((lambda (h3acc@ls/false) (if h3acc@ls/false (apply (lambda (h3ace@olhs* h3acf@orhs* h3ad0@b h3ad1@b*) ((lambda (h3ad6@lhs* h3ad7@rhs*) (h2eb0@bless (cons (list 'lambda (append h3ad6@lhs* h3ad7@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (h3ada@lhs h3adb@rhs) (list 'let (list (list 't (list h3ada@lhs))) (list h3ada@lhs h3adb@rhs) (cons 'set! (cons h3adb@rhs '(t))))) h3ad6@lhs* h3ad7@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons h3ad0@b h3ad1@b*))) '(swap)))))) (append h3ace@olhs* h3acf@orhs*)))) (h2fd1@generate-temporaries h3ace@olhs*) (h2fd1@generate-temporaries h3acf@orhs*))) h3acc@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3aca@t))) (h2efa@syntax-dispatch h3aca@t '(_ #(each (any any)) any . each-any)))) h3ac2@t))) (h2efa@syntax-dispatch h3ac2@t '(_ () any . each-any)))) h3ac0@e))) (set! h2ef6@foreign-call-transformer (lambda (h3ade@e h3adf@r h3ae0@mr) ((lambda (h3ae4@t) ((lambda (h3ae6@ls/false) (if h3ae6@ls/false (apply (lambda (h3ae8@name h3ae9@arg*) (cons 'foreign-call (cons (h2f1c@chi-expr h3ae8@name h3adf@r h3ae0@mr) (h2f18@chi-expr* h3ae9@arg* h3adf@r h3ae0@mr)))) h3ae6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3ae4@t))) (h2efa@syntax-dispatch h3ae4@t '(_ any . each-any)))) h3ade@e))) (set! h2ef8@convert-pattern (lambda (h3aec@pattern h3aed@keys) ((lambda (h3af1@cvt* h3af3@cvt) (begin (set! h3af1@cvt* (lambda (h3b90@p* h3b91@n h3b92@ids) (if (null? h3b90@p*) (values '() h3b92@ids) (call-with-values (lambda () (h3af1@cvt* (cdr h3b90@p*) h3b91@n h3b92@ids)) (lambda (h3b9a@h3b97 h3b9b@h3b99) ((lambda (h3b9e@ids h3b9f@y) (call-with-values (lambda () (h3af3@cvt (car h3b90@p*) h3b91@n h3b9e@ids)) (lambda (h3ba6@h3ba3 h3ba7@h3ba5) ((lambda (h3baa@ids h3bab@x) (values (cons h3bab@x h3b9f@y) h3baa@ids)) h3ba7@h3ba5 h3ba6@h3ba3)))) h3b9b@h3b99 h3b9a@h3b97)))))) (set! h3af3@cvt (lambda (h3af4@p h3af5@n h3af6@ids) ((lambda (h3afa@t) ((lambda (h3afc@ls/false) (if (and h3afc@ls/false (apply (lambda (h3afe@id) (h2cef@id? h3afe@id)) h3afc@ls/false)) (apply (lambda (h3b00@id) (if (h2cfd@bound-id-member? h3af4@p h3aed@keys) (values (vector 'free-id h3af4@p) h3af6@ids) (if (h2cf7@free-id=? h3af4@p (h2e84@scheme-stx '_)) (values '_ h3af6@ids) (values 'any (cons (cons h3af4@p h3af5@n) h3af6@ids))))) h3afc@ls/false) ((lambda (h3b02@t) ((lambda (h3b04@ls/false) (if (and h3b04@ls/false (apply (lambda (h3b06@p h3b07@dots) (h2efc@ellipsis? h3b07@dots)) h3b04@ls/false)) (apply (lambda (h3b0a@p h3b0b@dots) (call-with-values (lambda () (h3af3@cvt h3b0a@p (+ h3af5@n '1) h3af6@ids)) (lambda (h3b12@h3b0f h3b13@h3b11) ((lambda (h3b16@ids h3b17@p) (values (if (eq? h3b17@p 'any) 'each-any (vector 'each h3b17@p)) h3b16@ids)) h3b13@h3b11 h3b12@h3b0f)))) h3b04@ls/false) ((lambda (h3b1a@t) ((lambda (h3b1c@ls/false) (if (and h3b1c@ls/false (apply (lambda (h3b1e@x h3b1f@dots h3b20@ys h3b21@z) (h2efc@ellipsis? h3b1f@dots)) h3b1c@ls/false)) (apply (lambda (h3b26@x h3b27@dots h3b28@ys h3b29@z) (call-with-values (lambda () (h3af3@cvt h3b29@z h3af5@n h3af6@ids)) (lambda (h3b32@h3b2f h3b33@h3b31) ((lambda (h3b36@ids h3b37@z) (call-with-values (lambda () (h3af1@cvt* h3b28@ys h3af5@n h3b36@ids)) (lambda (h3b3e@h3b3b h3b3f@h3b3d) ((lambda (h3b42@ids h3b43@ys) (call-with-values (lambda () (h3af3@cvt h3b26@x (+ h3af5@n '1) h3b42@ids)) (lambda (h3b4a@h3b47 h3b4b@h3b49) ((lambda (h3b4e@ids h3b4f@x) (values (vector 'each+ h3b4f@x (reverse h3b43@ys) h3b37@z) h3b4e@ids)) h3b4b@h3b49 h3b4a@h3b47)))) h3b3f@h3b3d h3b3e@h3b3b)))) h3b33@h3b31 h3b32@h3b2f)))) h3b1c@ls/false) ((lambda (h3b52@t) ((lambda (h3b54@ls/false) (if h3b54@ls/false (apply (lambda (h3b56@x h3b57@y) (call-with-values (lambda () (h3af3@cvt h3b57@y h3af5@n h3af6@ids)) (lambda (h3b5e@h3b5b h3b5f@h3b5d) ((lambda (h3b62@ids h3b63@y) (call-with-values (lambda () (h3af3@cvt h3b56@x h3af5@n h3b62@ids)) (lambda (h3b6a@h3b67 h3b6b@h3b69) ((lambda (h3b6e@ids h3b6f@x) (values (cons h3b6f@x h3b63@y) h3b6e@ids)) h3b6b@h3b69 h3b6a@h3b67)))) h3b5f@h3b5d h3b5e@h3b5b)))) h3b54@ls/false) ((lambda (h3b72@t) ((lambda (h3b74@ls/false) (if h3b74@ls/false (apply (lambda () (values '() h3af6@ids)) h3b74@ls/false) ((lambda (h3b76@t) ((lambda (h3b78@ls/false) (if (and h3b78@ls/false (apply (lambda (h3b7a@p) (not (h2cb7@stx? h3b7a@p))) h3b78@ls/false)) (apply (lambda (h3b7c@p) (call-with-values (lambda () (h3af3@cvt h3b7c@p h3af5@n h3af6@ids)) (lambda (h3b82@h3b7f h3b83@h3b81) ((lambda (h3b86@ids h3b87@p) (values (vector 'vector h3b87@p) h3b86@ids)) h3b83@h3b81 h3b82@h3b7f)))) h3b78@ls/false) ((lambda (h3b8a@t) ((lambda (h3b8c@ls/false) (if h3b8c@ls/false (apply (lambda (h3b8e@datum) (values (vector 'atom (h2d05@stx->datum h3b8e@datum)) h3af6@ids)) h3b8c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3b8a@t))) (h2efa@syntax-dispatch h3b8a@t 'any))) h3b76@t))) (h2efa@syntax-dispatch h3b76@t '#(vector each-any)))) h3b72@t))) (h2efa@syntax-dispatch h3b72@t '()))) h3b52@t))) (h2efa@syntax-dispatch h3b52@t '(any . any)))) h3b1a@t))) (h2efa@syntax-dispatch h3b1a@t '(any any . #(each+ any () any))))) h3b02@t))) (h2efa@syntax-dispatch h3b02@t '(any any)))) h3afa@t))) (h2efa@syntax-dispatch h3afa@t 'any))) h3af4@p))) (h3af3@cvt h3aec@pattern '0 '()))) '#f '#f))) (set! h2efa@syntax-dispatch ((lambda () ((lambda (h3baf@stx^ h3bb1@match-each h3bb3@match-each+ h3bb5@match-each-any h3bb7@match-empty h3bb9@combine h3bbb@match* h3bbd@match) (begin (set! h3baf@stx^ (lambda (h3c8a@e h3c8b@m* h3c8c@s* h3c8d@ae*) (if (and (null? h3c8b@m*) (null? h3c8c@s*) (null? h3c8d@ae*)) h3c8a@e (h2cd7@mkstx h3c8a@e h3c8b@m* h3c8c@s* h3c8d@ae*)))) (set! h3bb1@match-each (lambda (h3c6a@e h3c6b@p h3c6c@m* h3c6d@s* h3c6e@ae*) (if (pair? h3c6a@e) ((lambda (h3c74@first) (and h3c74@first ((lambda (h3c76@rest) (and h3c76@rest (cons h3c74@first h3c76@rest))) (h3bb1@match-each (cdr h3c6a@e) h3c6b@p h3c6c@m* h3c6d@s* h3c6e@ae*)))) (h3bbd@match (car h3c6a@e) h3c6b@p h3c6c@m* h3c6d@s* h3c6e@ae* '())) (if (null? h3c6a@e) '() (if (h2cb7@stx? h3c6a@e) (and (not (h2c6d@top-marked? h3c6c@m*)) (call-with-values (lambda () (h2cd5@join-wraps h3c6c@m* h3c6d@s* h3c6e@ae* h3c6a@e)) (lambda (h3c7e@h3c79 h3c7f@h3c7b h3c80@h3c7d) ((lambda (h3c84@ae* h3c85@s* h3c86@m*) (h3bb1@match-each (h2cbb@stx-expr h3c6a@e) h3c6b@p h3c86@m* h3c85@s* h3c84@ae*)) h3c80@h3c7d h3c7f@h3c7b h3c7e@h3c79)))) (if (h288e@h27ad@annotation? h3c6a@e) (h3bb1@match-each (h2890@h27b1@annotation-expression h3c6a@e) h3c6b@p h3c6c@m* h3c6d@s* h3c6e@ae*) '#f)))))) (set! h3bb3@match-each+ (lambda (h3c2a@e h3c2b@x-pat h3c2c@y-pat h3c2d@z-pat h3c2e@m* h3c2f@s* h3c30@ae* h3c31@r) ((letrec ((h3c3a@f (lambda (h3c3c@e h3c3d@m* h3c3e@s* h3c3f@ae*) (if (pair? h3c3c@e) (call-with-values (lambda () (h3c3a@f (cdr h3c3c@e) h3c3d@m* h3c3e@s* h3c3f@ae*)) (lambda (h3c4a@h3c45 h3c4b@h3c47 h3c4c@h3c49) ((lambda (h3c50@r h3c51@y-pat h3c52@xr*) (if h3c50@r (if (null? h3c51@y-pat) ((lambda (h3c56@xr) (if h3c56@xr (values (cons h3c56@xr h3c52@xr*) h3c51@y-pat h3c50@r) (values '#f '#f '#f))) (h3bbd@match (car h3c3c@e) h3c2b@x-pat h3c3d@m* h3c3e@s* h3c3f@ae* '())) (values '() (cdr h3c51@y-pat) (h3bbd@match (car h3c3c@e) (car h3c51@y-pat) h3c3d@m* h3c3e@s* h3c3f@ae* h3c50@r))) (values '#f '#f '#f))) h3c4c@h3c49 h3c4b@h3c47 h3c4a@h3c45))) (if (h2cb7@stx? h3c3c@e) (if (h2c6d@top-marked? h3c3d@m*) (values '() h3c2c@y-pat (h3bbd@match h3c3c@e h3c2d@z-pat h3c3d@m* h3c3e@s* h3c3f@ae* h3c31@r)) (call-with-values (lambda () (h2cd5@join-wraps h3c3d@m* h3c3e@s* h3c3f@ae* h3c3c@e)) (lambda (h3c5e@h3c59 h3c5f@h3c5b h3c60@h3c5d) ((lambda (h3c64@ae* h3c65@s* h3c66@m*) (h3c3a@f (h2cbb@stx-expr h3c3c@e) h3c66@m* h3c65@s* h3c64@ae*)) h3c60@h3c5d h3c5f@h3c5b h3c5e@h3c59)))) (if (h288e@h27ad@annotation? h3c3c@e) (h3c3a@f (h2890@h27b1@annotation-expression h3c3c@e) h3c3d@m* h3c3e@s* h3c3f@ae*) (values '() h3c2c@y-pat (h3bbd@match h3c3c@e h3c2d@z-pat h3c3d@m* h3c3e@s* h3c3f@ae* h3c31@r)))))))) h3c3a@f) h3c2a@e h3c2e@m* h3c2f@s* h3c30@ae*))) (set! h3bb5@match-each-any (lambda (h3c0e@e h3c0f@m* h3c10@s* h3c11@ae*) (if (pair? h3c0e@e) ((lambda (h3c16@l) (and h3c16@l (cons (h3baf@stx^ (car h3c0e@e) h3c0f@m* h3c10@s* h3c11@ae*) h3c16@l))) (h3bb5@match-each-any (cdr h3c0e@e) h3c0f@m* h3c10@s* h3c11@ae*)) (if (null? h3c0e@e) '() (if (h2cb7@stx? h3c0e@e) (and (not (h2c6d@top-marked? h3c0f@m*)) (call-with-values (lambda () (h2cd5@join-wraps h3c0f@m* h3c10@s* h3c11@ae* h3c0e@e)) (lambda (h3c1e@h3c19 h3c1f@h3c1b h3c20@h3c1d) ((lambda (h3c24@ae* h3c25@s* h3c26@m*) (h3bb5@match-each-any (h2cbb@stx-expr h3c0e@e) h3c26@m* h3c25@s* h3c24@ae*)) h3c20@h3c1d h3c1f@h3c1b h3c1e@h3c19)))) (if (h288e@h27ad@annotation? h3c0e@e) (h3bb5@match-each-any (h2890@h27b1@annotation-expression h3c0e@e) h3c0f@m* h3c10@s* h3c11@ae*) '#f)))))) (set! h3bb7@match-empty (lambda (h3c08@p h3c09@r) (if (null? h3c08@p) h3c09@r (if (eq? h3c08@p '_) h3c09@r (if (eq? h3c08@p 'any) (cons '() h3c09@r) (if (pair? h3c08@p) (h3bb7@match-empty (car h3c08@p) (h3bb7@match-empty (cdr h3c08@p) h3c09@r)) (if (eq? h3c08@p 'each-any) (cons '() h3c09@r) ((lambda (h3c0c@t) (if (memv h3c0c@t '(each)) (h3bb7@match-empty (vector-ref h3c08@p '1) h3c09@r) (if (memv h3c0c@t '(each+)) (h3bb7@match-empty (vector-ref h3c08@p '1) (h3bb7@match-empty (reverse (vector-ref h3c08@p '2)) (h3bb7@match-empty (vector-ref h3c08@p '3) h3c09@r))) (if (memv h3c0c@t '(free-id atom)) h3c09@r (if (memv h3c0c@t '(scheme-id atom)) h3c09@r (if (memv h3c0c@t '(vector)) (h3bb7@match-empty (vector-ref h3c08@p '1) h3c09@r) (assertion-violation 'syntax-dispatch '"invalid pattern" h3c08@p))))))) (vector-ref h3c08@p '0))))))))) (set! h3bb9@combine (lambda (h3c04@r* h3c05@r) (if (null? (car h3c04@r*)) h3c05@r (cons (map car h3c04@r*) (h3bb9@combine (map cdr h3c04@r*) h3c05@r))))) (set! h3bbb@match* (lambda (h3be0@e h3be1@p h3be2@m* h3be3@s* h3be4@ae* h3be5@r) (if (null? h3be1@p) (and (null? h3be0@e) h3be5@r) (if (pair? h3be1@p) (and (pair? h3be0@e) (h3bbd@match (car h3be0@e) (car h3be1@p) h3be2@m* h3be3@s* h3be4@ae* (h3bbd@match (cdr h3be0@e) (cdr h3be1@p) h3be2@m* h3be3@s* h3be4@ae* h3be5@r))) (if (eq? h3be1@p 'each-any) ((lambda (h3bec@l) (and h3bec@l (cons h3bec@l h3be5@r))) (h3bb5@match-each-any h3be0@e h3be2@m* h3be3@s* h3be4@ae*)) ((lambda (h3bee@t) (if (memv h3bee@t '(each)) (if (null? h3be0@e) (h3bb7@match-empty (vector-ref h3be1@p '1) h3be5@r) ((lambda (h3bf0@r*) (and h3bf0@r* (h3bb9@combine h3bf0@r* h3be5@r))) (h3bb1@match-each h3be0@e (vector-ref h3be1@p '1) h3be2@m* h3be3@s* h3be4@ae*))) (if (memv h3bee@t '(free-id)) (and (symbol? h3be0@e) (h2c6d@top-marked? h3be2@m*) (h2cf7@free-id=? (h3baf@stx^ h3be0@e h3be2@m* h3be3@s* h3be4@ae*) (vector-ref h3be1@p '1)) h3be5@r) (if (memv h3bee@t '(scheme-id)) (and (symbol? h3be0@e) (h2c6d@top-marked? h3be2@m*) (h2cf7@free-id=? (h3baf@stx^ h3be0@e h3be2@m* h3be3@s* h3be4@ae*) (h2e84@scheme-stx (vector-ref h3be1@p '1))) h3be5@r) (if (memv h3bee@t '(each+)) (call-with-values (lambda () (h3bb3@match-each+ h3be0@e (vector-ref h3be1@p '1) (vector-ref h3be1@p '2) (vector-ref h3be1@p '3) h3be2@m* h3be3@s* h3be4@ae* h3be5@r)) (lambda (h3bf8@h3bf3 h3bf9@h3bf5 h3bfa@h3bf7) ((lambda (h3bfe@r h3bff@y-pat h3c00@xr*) (and h3bfe@r (null? h3bff@y-pat) (if (null? h3c00@xr*) (h3bb7@match-empty (vector-ref h3be1@p '1) h3bfe@r) (h3bb9@combine h3c00@xr* h3bfe@r)))) h3bfa@h3bf7 h3bf9@h3bf5 h3bf8@h3bf3))) (if (memv h3bee@t '(atom)) (and (fast-equal? (vector-ref h3be1@p '1) (h2d03@strip h3be0@e h3be2@m*)) h3be5@r) (if (memv h3bee@t '(vector)) (and (vector? h3be0@e) (h3bbd@match (vector->list h3be0@e) (vector-ref h3be1@p '1) h3be2@m* h3be3@s* h3be4@ae* h3be5@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" h3be1@p)))))))) (vector-ref h3be1@p '0))))))) (set! h3bbd@match (lambda (h3bc2@e h3bc3@p h3bc4@m* h3bc5@s* h3bc6@ae* h3bc7@r) (if (not h3bc7@r) '#f (if (eq? h3bc3@p '_) h3bc7@r (if (eq? h3bc3@p 'any) (cons (h3baf@stx^ h3bc2@e h3bc4@m* h3bc5@s* h3bc6@ae*) h3bc7@r) (if (h2cb7@stx? h3bc2@e) (and (not (h2c6d@top-marked? h3bc4@m*)) (call-with-values (lambda () (h2cd5@join-wraps h3bc4@m* h3bc5@s* h3bc6@ae* h3bc2@e)) (lambda (h3bd4@h3bcf h3bd5@h3bd1 h3bd6@h3bd3) ((lambda (h3bda@ae* h3bdb@s* h3bdc@m*) (h3bbd@match (h2cbb@stx-expr h3bc2@e) h3bc3@p h3bdc@m* h3bdb@s* h3bda@ae* h3bc7@r)) h3bd6@h3bd3 h3bd5@h3bd1 h3bd4@h3bcf)))) (if (h288e@h27ad@annotation? h3bc2@e) (h3bbd@match (h2890@h27b1@annotation-expression h3bc2@e) h3bc3@p h3bc4@m* h3bc5@s* h3bc6@ae* h3bc7@r) (h3bbb@match* h3bc2@e h3bc3@p h3bc4@m* h3bc5@s* h3bc6@ae* h3bc7@r)))))))) (lambda (h3bbe@e h3bbf@p) (h3bbd@match h3bbe@e h3bbf@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! h2efc@ellipsis? (lambda (h3c92@x) (and (h2cef@id? h3c92@x) (h2cf7@free-id=? h3c92@x (h2e84@scheme-stx '...))))) (set! h2efe@underscore? (lambda (h3c94@x) (and (h2cef@id? h3c94@x) (h2cf7@free-id=? h3c94@x (h2e84@scheme-stx '_))))) (set! h2f00@verify-literals (lambda (h3c96@lits h3c97@expr) (for-each (lambda (h3c9a@x) (if (or (not (h2cef@id? h3c9a@x)) (h2efc@ellipsis? h3c9a@x) (h2efe@underscore? h3c9a@x)) (h2fe3@syntax-violation '#f '"invalid literal" h3c97@expr h3c9a@x) (void))) h3c96@lits))) (set! h2f02@syntax-case-transformer ((lambda () ((lambda (h3c9d@build-dispatch-call h3c9f@invalid-ids-error h3ca1@gen-clause h3ca3@gen-syntax-case) (begin (set! h3c9d@build-dispatch-call (lambda (h3d0e@pvars h3d0f@expr h3d10@y h3d11@r h3d12@mr) ((lambda (h3d18@ids h3d19@levels) ((lambda (h3d1c@labels h3d1d@new-vars) ((lambda (h3d20@body) (list '(primitive apply) (h2c4b@h2b8b@build-lambda '#f h3d1d@new-vars h3d20@body) h3d10@y)) (h2f1c@chi-expr (h2cdb@add-subst (h2caa@make-full-rib h3d18@ids h3d1c@labels) h3d0f@expr) (append (map (lambda (h3d22@label h3d23@var h3d24@level) (cons h3d22@label (h2d0f@make-binding 'syntax (cons h3d23@var h3d24@level)))) h3d1c@labels h3d1d@new-vars (map cdr h3d0e@pvars)) h3d11@r) h3d12@mr))) (map h2c73@gen-label h3d18@ids) (map h2c6f@gen-lexical h3d18@ids))) (map car h3d0e@pvars) (map cdr h3d0e@pvars)))) (set! h3c9f@invalid-ids-error (lambda (h3d02@id* h3d03@e h3d04@class) ((letrec ((h3d08@find (lambda (h3d0a@id* h3d0b@ok*) (if (null? h3d0a@id*) (h2fe3@syntax-violation '#f '"invalid syntax" h3d03@e) (if (h2cef@id? (car h3d0a@id*)) (if (h2cfd@bound-id-member? (car h3d0a@id*) h3d0b@ok*) (h2fdf@syntax-error (car h3d0a@id*) '"duplicate " h3d04@class) (h3d08@find (cdr h3d0a@id*) (cons (car h3d0a@id*) h3d0b@ok*))) (h2fdf@syntax-error (car h3d0a@id*) '"invalid " h3d04@class)))))) h3d08@find) h3d02@id* '()))) (set! h3ca1@gen-clause (lambda (h3cda@x h3cdb@keys h3cdc@clauses h3cdd@r h3cde@mr h3cdf@pat h3ce0@fender h3ce1@expr) (call-with-values (lambda () (h2ef8@convert-pattern h3cdf@pat h3cdb@keys)) (lambda (h3cee@h3ceb h3cef@h3ced) ((lambda (h3cf2@pvars h3cf3@p) (if (not (h2cfb@distinct-bound-ids? (map car h3cf2@pvars))) (h3c9f@invalid-ids-error (map car h3cf2@pvars) h3cdf@pat '"pattern variable") (if (not (for-all (lambda (h3cf6@x) (not (h2efc@ellipsis? (car h3cf6@x)))) h3cf2@pvars)) (h2fe3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" h3cdf@pat) ((lambda (h3cf8@y) ((lambda (h3cfa@test) ((lambda (h3cfc@conseq) ((lambda (h3cfe@altern) (list (h2c4b@h2b8b@build-lambda '#f (list h3cf8@y) (list 'if h3cfa@test h3cfc@conseq h3cfe@altern)) (list '(primitive syntax-dispatch) h3cda@x (list 'quote h3cf3@p)))) (h3ca3@gen-syntax-case h3cda@x h3cdb@keys h3cdc@clauses h3cdd@r h3cde@mr))) (h3c9d@build-dispatch-call h3cf2@pvars h3ce1@expr h3cf8@y h3cdd@r h3cde@mr))) (if (eq? h3ce0@fender '#t) h3cf8@y ((lambda (h3d00@call) (list 'if h3cf8@y h3d00@call (list 'quote '#f))) (h3c9d@build-dispatch-call h3cf2@pvars h3ce0@fender h3cf8@y h3cdd@r h3cde@mr))))) (h2c6f@gen-lexical 'tmp))))) h3cef@h3ced h3cee@h3ceb))))) (set! h3ca3@gen-syntax-case (lambda (h3cb8@x h3cb9@keys h3cba@clauses h3cbb@r h3cbc@mr) (if (null? h3cba@clauses) (list '(primitive syntax-error) h3cb8@x) ((lambda (h3cc2@t) ((lambda (h3cc4@ls/false) (if h3cc4@ls/false (apply (lambda (h3cc6@pat h3cc7@expr) (if (and (h2cef@id? h3cc6@pat) (not (h2cfd@bound-id-member? h3cc6@pat h3cb9@keys)) (not (h2efc@ellipsis? h3cc6@pat))) (if (h2cf7@free-id=? h3cc6@pat (h2e84@scheme-stx '_)) (h2f1c@chi-expr h3cc7@expr h3cbb@r h3cbc@mr) ((lambda (h3cca@lab h3ccb@lex) ((lambda (h3cce@body) (list (h2c4b@h2b8b@build-lambda '#f (list h3ccb@lex) h3cce@body) h3cb8@x)) (h2f1c@chi-expr (h2cdb@add-subst (h2caa@make-full-rib (list h3cc6@pat) (list h3cca@lab)) h3cc7@expr) (cons (cons h3cca@lab (h2d0f@make-binding 'syntax (cons h3ccb@lex '0))) h3cbb@r) h3cbc@mr))) (h2c73@gen-label h3cc6@pat) (h2c6f@gen-lexical h3cc6@pat))) (h3ca1@gen-clause h3cb8@x h3cb9@keys (cdr h3cba@clauses) h3cbb@r h3cbc@mr h3cc6@pat '#t h3cc7@expr))) h3cc4@ls/false) ((lambda (h3cd0@t) ((lambda (h3cd2@ls/false) (if h3cd2@ls/false (apply (lambda (h3cd4@pat h3cd5@fender h3cd6@expr) (h3ca1@gen-clause h3cb8@x h3cb9@keys (cdr h3cba@clauses) h3cbb@r h3cbc@mr h3cd4@pat h3cd5@fender h3cd6@expr)) h3cd2@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3cd0@t))) (h2efa@syntax-dispatch h3cd0@t '(any any any)))) h3cc2@t))) (h2efa@syntax-dispatch h3cc2@t '(any any)))) (car h3cba@clauses))))) (lambda (h3ca4@e h3ca5@r h3ca6@mr) ((lambda (h3caa@t) ((lambda (h3cac@ls/false) (if h3cac@ls/false (apply (lambda (h3cae@expr h3caf@keys h3cb0@clauses) (begin (h2f00@verify-literals h3caf@keys h3ca4@e) ((lambda (h3cb4@x) ((lambda (h3cb6@body) (list (h2c4b@h2b8b@build-lambda '#f (list h3cb4@x) h3cb6@body) (h2f1c@chi-expr h3cae@expr h3ca5@r h3ca6@mr))) (h3ca3@gen-syntax-case h3cb4@x h3caf@keys h3cb0@clauses h3ca5@r h3ca6@mr))) (h2c6f@gen-lexical 'tmp)))) h3cac@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3caa@t))) (h2efa@syntax-dispatch h3caa@t '(_ any each-any . each-any)))) h3ca4@e)))) '#f '#f '#f '#f)))) (set! h2f04@ellipsis-map (lambda (h3d28@proc h3d29@ls . h3d2c@ls*) ((lambda (h3d2f@who) (begin (set! h3d2f@who '...) (begin (if (not (list? h3d29@ls)) (assertion-violation h3d2f@who '"not a list" h3d29@ls) (void)) (if (not (null? h3d2c@ls*)) ((lambda (h3d30@n) (for-each (lambda (h3d32@x) (begin (if (not (list? h3d32@x)) (assertion-violation h3d2f@who '"not a list" h3d32@x) (void)) (if (not (= (length h3d32@x) h3d30@n)) (assertion-violation h3d2f@who '"length mismatch" h3d29@ls h3d32@x) (void)))) h3d2c@ls*)) (length h3d29@ls)) (void)) (apply map h3d28@proc h3d29@ls h3d2c@ls*)))) '#f))) (set! h2f06@syntax-transformer ((lambda () ((lambda (h3d35@gen-syntax h3d37@gen-ref h3d39@gen-append h3d3b@gen-mappend h3d3d@gen-map h3d3f@gen-cons h3d41@gen-vector h3d43@regen) (begin (set! h3d35@gen-syntax (lambda (h3dac@src h3dad@e h3dae@r h3daf@maps h3db0@ellipsis? h3db1@vec?) ((lambda (h3db8@t) ((lambda (h3dba@ls/false) (if (and h3dba@ls/false (apply (lambda (h3dbc@dots) (h3db0@ellipsis? h3dbc@dots)) h3dba@ls/false)) (apply (lambda (h3dbe@dots) (h2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" h3dac@src)) h3dba@ls/false) ((lambda (h3dc0@t) ((lambda (h3dc2@ls/false) (if (and h3dc2@ls/false (apply (lambda (h3dc4@id) (h2cef@id? h3dc4@id)) h3dc2@ls/false)) (apply (lambda (h3dc6@id) ((lambda (h3dc8@label) ((lambda (h3dca@b) ((lambda () (if (eq? (h2d11@binding-type h3dca@b) 'syntax) (call-with-values (lambda () ((lambda (h3dd0@var.lev) (h3d37@gen-ref h3dac@src (car h3dd0@var.lev) (cdr h3dd0@var.lev) h3daf@maps)) (h2d13@binding-value h3dca@b))) (lambda (h3dd2@h3dcd h3dd3@h3dcf) ((lambda (h3dd6@maps h3dd7@var) (values (list 'ref h3dd7@var) h3dd6@maps)) h3dd3@h3dcf h3dd2@h3dcd))) (values (list 'quote h3dad@e) h3daf@maps))))) (h2d0d@label->binding h3dc8@label h3dae@r))) (h2d09@id->label h3dad@e))) h3dc2@ls/false) ((lambda (h3dda@t) ((lambda (h3ddc@ls/false) (if (and h3ddc@ls/false (apply (lambda (h3dde@dots h3ddf@e) (h3db0@ellipsis? h3dde@dots)) h3ddc@ls/false)) (apply (lambda (h3de2@dots h3de3@e) (if h3db1@vec? (h2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" h3dac@src) (h3d35@gen-syntax h3dac@src h3de3@e h3dae@r h3daf@maps (lambda (h3de6@x) '#f) '#f))) h3ddc@ls/false) ((lambda (h3de8@t) ((lambda (h3dea@ls/false) (if (and h3dea@ls/false (apply (lambda (h3dec@x h3ded@dots h3dee@y) (h3db0@ellipsis? h3ded@dots)) h3dea@ls/false)) (apply (lambda (h3df2@x h3df3@dots h3df4@y) ((letrec ((h3df8@f (lambda (h3dfa@y h3dfb@k) ((lambda (h3dfe@t) ((lambda (h3e00@ls/false) (if h3e00@ls/false (apply (lambda () (h3dfb@k h3daf@maps)) h3e00@ls/false) ((lambda (h3e02@t) ((lambda (h3e04@ls/false) (if (and h3e04@ls/false (apply (lambda (h3e06@dots h3e07@y) (h3db0@ellipsis? h3e06@dots)) h3e04@ls/false)) (apply (lambda (h3e0a@dots h3e0b@y) (h3df8@f h3e0b@y (lambda (h3e0e@maps) (call-with-values (lambda () (h3dfb@k (cons '() h3e0e@maps))) (lambda (h3e14@h3e11 h3e15@h3e13) ((lambda (h3e18@maps h3e19@x) (if (null? (car h3e18@maps)) (h2fe3@syntax-violation '#f '"extra ellipsis in syntax form" h3dac@src) (values (h3d3b@gen-mappend h3e19@x (car h3e18@maps)) (cdr h3e18@maps)))) h3e15@h3e13 h3e14@h3e11)))))) h3e04@ls/false) ((lambda (h3e1c@t) ((lambda (h3e1e@ls/false) (if h3e1e@ls/false (apply (lambda () (call-with-values (lambda () (h3d35@gen-syntax h3dac@src h3dfa@y h3dae@r h3daf@maps h3db0@ellipsis? h3db1@vec?)) (lambda (h3e24@h3e21 h3e25@h3e23) ((lambda (h3e28@maps h3e29@y) (call-with-values (lambda () (h3dfb@k h3e28@maps)) (lambda (h3e30@h3e2d h3e31@h3e2f) ((lambda (h3e34@maps h3e35@x) (values (h3d39@gen-append h3e35@x h3e29@y) h3e34@maps)) h3e31@h3e2f h3e30@h3e2d)))) h3e25@h3e23 h3e24@h3e21)))) h3e1e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3e1c@t))) (h2efa@syntax-dispatch h3e1c@t '_))) h3e02@t))) (h2efa@syntax-dispatch h3e02@t '(any . any)))) h3dfe@t))) (h2efa@syntax-dispatch h3dfe@t '()))) h3dfa@y)))) h3df8@f) h3df4@y (lambda (h3e38@maps) (call-with-values (lambda () (h3d35@gen-syntax h3dac@src h3df2@x h3dae@r (cons '() h3e38@maps) h3db0@ellipsis? '#f)) (lambda (h3e3e@h3e3b h3e3f@h3e3d) ((lambda (h3e42@maps h3e43@x) (if (null? (car h3e42@maps)) (h2fe3@syntax-violation '#f '"extra ellipsis in syntax form" h3dac@src) (values (h3d3d@gen-map h3e43@x (car h3e42@maps)) (cdr h3e42@maps)))) h3e3f@h3e3d h3e3e@h3e3b)))))) h3dea@ls/false) ((lambda (h3e46@t) ((lambda (h3e48@ls/false) (if h3e48@ls/false (apply (lambda (h3e4a@x h3e4b@y) (call-with-values (lambda () (h3d35@gen-syntax h3dac@src h3e4a@x h3dae@r h3daf@maps h3db0@ellipsis? '#f)) (lambda (h3e52@h3e4f h3e53@h3e51) ((lambda (h3e56@maps h3e57@xnew) (call-with-values (lambda () (h3d35@gen-syntax h3dac@src h3e4b@y h3dae@r h3e56@maps h3db0@ellipsis? h3db1@vec?)) (lambda (h3e5e@h3e5b h3e5f@h3e5d) ((lambda (h3e62@maps h3e63@ynew) (values (h3d3f@gen-cons h3dad@e h3e4a@x h3e4b@y h3e57@xnew h3e63@ynew) h3e62@maps)) h3e5f@h3e5d h3e5e@h3e5b)))) h3e53@h3e51 h3e52@h3e4f)))) h3e48@ls/false) ((lambda (h3e66@t) ((lambda (h3e68@ls/false) (if h3e68@ls/false (apply (lambda (h3e6a@ls) (call-with-values (lambda () (h3d35@gen-syntax h3dac@src h3e6a@ls h3dae@r h3daf@maps h3db0@ellipsis? '#t)) (lambda (h3e70@h3e6d h3e71@h3e6f) ((lambda (h3e74@maps h3e75@lsnew) (values (h3d41@gen-vector h3dad@e h3e6a@ls h3e75@lsnew) h3e74@maps)) h3e71@h3e6f h3e70@h3e6d)))) h3e68@ls/false) ((lambda (h3e78@t) ((lambda (h3e7a@ls/false) (if h3e7a@ls/false (apply (lambda () (values (list 'quote h3dad@e) h3daf@maps)) h3e7a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3e78@t))) (h2efa@syntax-dispatch h3e78@t '_))) h3e66@t))) (h2efa@syntax-dispatch h3e66@t '#(vector each-any)))) h3e46@t))) (h2efa@syntax-dispatch h3e46@t '(any . any)))) h3de8@t))) (h2efa@syntax-dispatch h3de8@t '(any any . any)))) h3dda@t))) (h2efa@syntax-dispatch h3dda@t '(any any)))) h3dc0@t))) (h2efa@syntax-dispatch h3dc0@t 'any))) h3db8@t))) (h2efa@syntax-dispatch h3db8@t 'any))) h3dad@e))) (set! h3d37@gen-ref (lambda (h3d92@src h3d93@var h3d94@level h3d95@maps) (if (= h3d94@level '0) (values h3d93@var h3d95@maps) (if (null? h3d95@maps) (h2fe3@syntax-violation '#f '"missing ellipsis in syntax form" h3d92@src) (call-with-values (lambda () (h3d37@gen-ref h3d92@src h3d93@var (- h3d94@level '1) (cdr h3d95@maps))) (lambda (h3d9e@h3d9b h3d9f@h3d9d) ((lambda (h3da2@outer-maps h3da3@outer-var) ((lambda (h3da6@t) (if h3da6@t ((lambda (h3da8@b) (values (cdr h3da8@b) h3d95@maps)) h3da6@t) ((lambda (h3daa@inner-var) (values h3daa@inner-var (cons (cons (cons h3da3@outer-var h3daa@inner-var) (car h3d95@maps)) h3da2@outer-maps))) (h2c6f@gen-lexical 'tmp)))) (assq h3da3@outer-var (car h3d95@maps)))) h3d9f@h3d9d h3d9e@h3d9b))))))) (set! h3d39@gen-append (lambda (h3d8e@x h3d8f@y) (if (fast-equal? h3d8f@y ''()) h3d8e@x (list 'append h3d8e@x h3d8f@y)))) (set! h3d3b@gen-mappend (lambda (h3d8a@e h3d8b@map-env) (list 'apply '(primitive append) (h3d3d@gen-map h3d8a@e h3d8b@map-env)))) (set! h3d3d@gen-map (lambda (h3d78@e h3d79@map-env) ((lambda (h3d7c@formals h3d7d@actuals) (if (eq? (car h3d78@e) 'ref) (car h3d7d@actuals) (if (for-all (lambda (h3d80@x) (and (eq? (car h3d80@x) 'ref) (memq (cadr h3d80@x) h3d7c@formals))) (cdr h3d78@e)) ((lambda (h3d82@args) (cons 'map (cons (list 'primitive (car h3d78@e)) h3d82@args))) (map ((lambda (h3d84@r) (lambda (h3d86@x) (cdr (assq (cadr h3d86@x) h3d84@r)))) (map cons h3d7c@formals h3d7d@actuals)) (cdr h3d78@e))) (cons* 'map (list 'lambda h3d7c@formals h3d78@e) h3d7d@actuals)))) (map cdr h3d79@map-env) (map (lambda (h3d88@x) (list 'ref (car h3d88@x))) h3d79@map-env)))) (set! h3d3f@gen-cons (lambda (h3d68@e h3d69@x h3d6a@y h3d6b@xnew h3d6c@ynew) ((lambda (h3d72@t) (if (memv h3d72@t '(quote)) (if (eq? (car h3d6b@xnew) 'quote) ((lambda (h3d74@xnew h3d75@ynew) (if (and (eq? h3d74@xnew h3d69@x) (eq? h3d75@ynew h3d6a@y)) (list 'quote h3d68@e) (list 'quote (cons h3d74@xnew h3d75@ynew)))) (cadr h3d6b@xnew) (cadr h3d6c@ynew)) (if (null? (cadr h3d6c@ynew)) (list 'list h3d6b@xnew) (list 'cons h3d6b@xnew h3d6c@ynew))) (if (memv h3d72@t '(list)) (cons 'list (cons h3d6b@xnew (cdr h3d6c@ynew))) (list 'cons h3d6b@xnew h3d6c@ynew)))) (car h3d6c@ynew)))) (set! h3d41@gen-vector (lambda (h3d62@e h3d63@ls h3d64@lsnew) (if (eq? (car h3d64@lsnew) 'quote) (if (eq? (cadr h3d64@lsnew) h3d63@ls) (list 'quote h3d62@e) (list 'quote (list->vector (cadr h3d64@lsnew)))) (if (eq? (car h3d64@lsnew) 'list) (cons 'vector (cdr h3d64@lsnew)) (list 'list->vector h3d64@lsnew))))) (set! h3d43@regen (lambda (h3d5c@x) ((lambda (h3d5e@t) (if (memv h3d5e@t '(ref)) (cadr h3d5c@x) (if (memv h3d5e@t '(primitive)) (list 'primitive (cadr h3d5c@x)) (if (memv h3d5e@t '(quote)) (list 'quote (cadr h3d5c@x)) (if (memv h3d5e@t '(lambda)) (h2c4b@h2b8b@build-lambda '#f (cadr h3d5c@x) (h3d43@regen (caddr h3d5c@x))) (if (memv h3d5e@t '(map)) ((lambda (h3d60@ls) (cons '(primitive ellipsis-map) h3d60@ls)) (map h3d43@regen (cdr h3d5c@x))) (cons (list 'primitive (car h3d5c@x)) (map h3d43@regen (cdr h3d5c@x))))))))) (car h3d5c@x)))) (lambda (h3d44@e h3d45@r h3d46@mr) ((lambda (h3d4a@t) ((lambda (h3d4c@ls/false) (if h3d4c@ls/false (apply (lambda (h3d4e@x) (call-with-values (lambda () (h3d35@gen-syntax h3d44@e h3d4e@x h3d45@r '() h2efc@ellipsis? '#f)) (lambda (h3d54@h3d51 h3d55@h3d53) ((lambda (h3d58@maps h3d59@e) (h3d43@regen h3d59@e)) h3d55@h3d53 h3d54@h3d51)))) h3d4c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3d4a@t))) (h2efa@syntax-dispatch h3d4a@t '(_ any)))) h3d44@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! h2f08@core-macro-transformer (lambda (h3e7c@name) ((lambda (h3e7e@t) (if (memv h3e7e@t '(quote)) h2eaa@quote-transformer (if (memv h3e7e@t '(lambda)) h2eae@lambda-transformer (if (memv h3e7e@t '(case-lambda)) h2eac@case-lambda-transformer (if (memv h3e7e@t '(letrec)) h2e92@letrec-transformer (if (memv h3e7e@t '(letrec*)) h2e94@letrec*-transformer (if (memv h3e7e@t '(if)) h2ea2@if-transformer (if (memv h3e7e@t '(and)) h2ea4@and-transformer (if (memv h3e7e@t '(or)) h2ea6@or-transformer (if (memv h3e7e@t '(foreign-call)) h2ef6@foreign-call-transformer (if (memv h3e7e@t '(syntax-case)) h2f02@syntax-case-transformer (if (memv h3e7e@t '(syntax)) h2f06@syntax-transformer (if (memv h3e7e@t '(type-descriptor)) h2e98@type-descriptor-transformer (if (memv h3e7e@t '(record-type-descriptor)) h2e9a@record-type-descriptor-transformer (if (memv h3e7e@t '(record-constructor-descriptor)) h2e9c@record-constructor-descriptor-transformer (if (memv h3e7e@t '(fluid-let-syntax)) h2e96@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" h3e7c@name))))))))))))))))) h3e7c@name))) (set! h2f0a@symbol-macro (lambda (h3e80@x h3e81@set) ((lambda (h3e84@t) ((lambda (h3e86@ls/false) (if (and h3e86@ls/false (apply (lambda (h3e88@name) (and (h2cef@id? h3e88@name) (memq (h2cf1@id->sym h3e88@name) h3e81@set))) h3e86@ls/false)) (apply (lambda (h3e8a@name) (h2eb0@bless (list 'quote h3e8a@name))) h3e86@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3e84@t))) (h2efa@syntax-dispatch h3e84@t '(_ any)))) h3e80@x))) (set! h2f0c@macro-transformer (lambda (h3e8c@x) (if (procedure? h3e8c@x) h3e8c@x (if (symbol? h3e8c@x) ((lambda (h3e8e@t) (if (memv h3e8e@t '(define-record-type)) h2eee@define-record-type-macro (if (memv h3e8e@t '(define-struct)) h2eec@define-struct-macro (if (memv h3e8e@t '(include)) h2ee2@include-macro (if (memv h3e8e@t '(cond)) h2ede@cond-macro (if (memv h3e8e@t '(let)) h2eb6@let-macro (if (memv h3e8e@t '(do)) h2ed6@do-macro (if (memv h3e8e@t '(or)) h2eda@or-macro (if (memv h3e8e@t '(and)) h2edc@and-macro (if (memv h3e8e@t '(let*)) h2ed8@let*-macro (if (memv h3e8e@t '(let-values)) h2eb8@let-values-macro (if (memv h3e8e@t '(let*-values)) h2eba@let*-values-macro (if (memv h3e8e@t '(syntax-rules)) h2ee6@syntax-rules-macro (if (memv h3e8e@t '(quasiquote)) h2ee8@quasiquote-macro (if (memv h3e8e@t '(quasisyntax)) h2eea@quasisyntax-macro (if (memv h3e8e@t '(with-syntax)) h2eb2@with-syntax-macro (if (memv h3e8e@t '(when)) h2e9e@when-macro (if (memv h3e8e@t '(unless)) h2ea0@unless-macro (if (memv h3e8e@t '(case)) h2ea8@case-macro (if (memv h3e8e@t '(identifier-syntax)) h2ed4@identifier-syntax-macro (if (memv h3e8e@t '(time)) h2ecc@time-macro (if (memv h3e8e@t '(delay)) h2ece@delay-macro (if (memv h3e8e@t '(assert)) h2ed0@assert-macro (if (memv h3e8e@t '(endianness)) h2ed2@endianness-macro (if (memv h3e8e@t '(guard)) h2ec8@guard-macro (if (memv h3e8e@t '(define-enumeration)) h2eca@define-enumeration-macro (if (memv h3e8e@t '(trace-lambda)) h2ebc@trace-lambda-macro (if (memv h3e8e@t '(trace-define)) h2ebe@trace-define-macro (if (memv h3e8e@t '(trace-define-syntax)) h2ec0@trace-define-syntax-macro (if (memv h3e8e@t '(trace-let-syntax)) h2ec4@trace-let-syntax-macro (if (memv h3e8e@t '(trace-letrec-syntax)) h2ec6@trace-letrec-syntax-macro (if (memv h3e8e@t '(define-condition-type)) h2ef0@define-condition-type-macro (if (memv h3e8e@t '(parameterize)) h2ef4@parameterize-macro (if (memv h3e8e@t '(include-into)) h2ee4@include-into-macro (if (memv h3e8e@t '(eol-style)) (lambda (h3e90@x) (h2f0a@symbol-macro h3e90@x '(none lf cr crlf nel crnel ls))) (if (memv h3e8e@t '(error-handling-mode)) (lambda (h3e92@x) (h2f0a@symbol-macro h3e92@x '(ignore raise replace))) (if (memv h3e8e@t '(buffer-mode)) (lambda (h3e94@x) (h2f0a@symbol-macro h3e94@x '(none line block))) (if (memv h3e8e@t '(file-options)) h2c62@file-options-macro (if (memv h3e8e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) h2ef2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" h3e8c@x)))))))))))))))))))))))))))))))))))))))) h3e8c@x) (error 'core-macro-transformer '"BUG: invalid macro" h3e8c@x))))) (set! h2f0e@local-macro-transformer (lambda (h3e96@x) (car h3e96@x))) (set! h2f10@do-macro-call (lambda (h3e98@transformer h3e99@expr) ((lambda (h3e9c@out) (begin ((letrec ((h3e9e@f (lambda (h3ea0@x) (if (not (h2cb7@stx? h3ea0@x)) (if (pair? h3ea0@x) (begin (h3e9e@f (car h3ea0@x)) (h3e9e@f (cdr h3ea0@x))) (if (vector? h3ea0@x) (vector-for-each h3e9e@f h3ea0@x) (if (symbol? h3ea0@x) (h2fe3@syntax-violation '#f '"raw symbol encountered in output of macro" h3e99@expr h3ea0@x) (void)))) (void))))) h3e9e@f) h3e9c@out) (h2cd9@add-mark (h2ccf@gen-mark) h3e9c@out h3e99@expr))) (h3e98@transformer (h2cd9@add-mark h2cd1@anti-mark h3e99@expr '#f))))) (set! h2f12@chi-macro (lambda (h3ea2@p h3ea3@e) (h2f10@do-macro-call (h2f0c@macro-transformer h3ea2@p) h3ea3@e))) (set! h2f14@chi-local-macro (lambda (h3ea6@p h3ea7@e) (h2f10@do-macro-call (h2f0e@local-macro-transformer h3ea6@p) h3ea7@e))) (set! h2f16@chi-global-macro (lambda (h3eaa@p h3eab@e) ((lambda (h3eae@lib h3eaf@loc) (begin (h2b14@h29b6@visit-library h3eae@lib) ((lambda (h3eb2@x) ((lambda (h3eb4@transformer) (h2f10@do-macro-call h3eb4@transformer h3eab@e)) (if (procedure? h3eb2@x) h3eb2@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" h3eb2@x)))) (symbol-value h3eaf@loc)))) (car h3eaa@p) (cdr h3eaa@p)))) (set! h2f18@chi-expr* (lambda (h3eb6@e* h3eb7@r h3eb8@mr) (if (null? h3eb6@e*) '() ((lambda (h3ebc@e) (cons h3ebc@e (h2f18@chi-expr* (cdr h3eb6@e*) h3eb7@r h3eb8@mr))) (h2f1c@chi-expr (car h3eb6@e*) h3eb7@r h3eb8@mr))))) (set! h2f1a@chi-application (lambda (h3ebe@e h3ebf@r h3ec0@mr) ((lambda (h3ec4@t) ((lambda (h3ec6@ls/false) (if h3ec6@ls/false (apply (lambda (h3ec8@rator h3ec9@rands) ((lambda (h3ecc@rator) (cons h3ecc@rator (h2f18@chi-expr* h3ec9@rands h3ebf@r h3ec0@mr))) (h2f1c@chi-expr h3ec8@rator h3ebf@r h3ec0@mr))) h3ec6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3ec4@t))) (h2efa@syntax-dispatch h3ec4@t '(any . each-any)))) h3ebe@e))) (set! h2f1c@chi-expr (lambda (h3ece@e h3ecf@r h3ed0@mr) (call-with-values (lambda () (h2d17@syntax-type h3ece@e h3ecf@r)) (lambda (h3eda@h3ed5 h3edb@h3ed7 h3edc@h3ed9) ((lambda (h3ee0@kwd h3ee1@value h3ee2@type) ((lambda (h3ee6@t) (if (memv h3ee6@t '(core-macro)) ((lambda (h3ee8@transformer) (h3ee8@transformer h3ece@e h3ecf@r h3ed0@mr)) (h2f08@core-macro-transformer h3ee1@value)) (if (memv h3ee6@t '(global)) ((lambda (h3eea@lib) ((lambda (h3eec@loc) ((lambda () (begin ((h2f65@inv-collector) h3eea@lib) h3eec@loc)))) (cdr h3ee1@value))) (car h3ee1@value)) (if (memv h3ee6@t '(core-prim)) ((lambda (h3eee@name) (list 'primitive h3eee@name)) h3ee1@value) (if (memv h3ee6@t '(call)) (h2f1a@chi-application h3ece@e h3ecf@r h3ed0@mr) (if (memv h3ee6@t '(lexical)) ((lambda (h3ef0@lex) h3ef0@lex) (h2e86@lexical-var h3ee1@value)) (if (memv h3ee6@t '(global-macro global-macro!)) (h2f1c@chi-expr (h2f16@chi-global-macro h3ee1@value h3ece@e) h3ecf@r h3ed0@mr) (if (memv h3ee6@t '(local-macro local-macro!)) (h2f1c@chi-expr (h2f14@chi-local-macro h3ee1@value h3ece@e) h3ecf@r h3ed0@mr) (if (memv h3ee6@t '(macro macro!)) (h2f1c@chi-expr (h2f12@chi-macro h3ee1@value h3ece@e) h3ecf@r h3ed0@mr) (if (memv h3ee6@t '(constant)) ((lambda (h3ef2@datum) (list 'quote h3ef2@datum)) h3ee1@value) (if (memv h3ee6@t '(set!)) (h2f1e@chi-set! h3ece@e h3ecf@r h3ed0@mr) (if (memv h3ee6@t '(begin)) ((lambda (h3ef4@t) ((lambda (h3ef6@ls/false) (if h3ef6@ls/false (apply (lambda (h3ef8@x h3ef9@x*) (h2c4e@h2bbd@build-sequence '#f (h2f18@chi-expr* (cons h3ef8@x h3ef9@x*) h3ecf@r h3ed0@mr))) h3ef6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3ef4@t))) (h2efa@syntax-dispatch h3ef4@t '(_ any . each-any)))) h3ece@e) (if (memv h3ee6@t '(let-syntax letrec-syntax)) ((lambda (h3efc@t) ((lambda (h3efe@ls/false) (if (and h3efe@ls/false (apply (lambda (h3f00@xlhs* h3f01@xrhs* h3f02@xbody h3f03@xbody*) (if (not (h2cf9@valid-bound-ids? h3f00@xlhs*)) (h2fe3@syntax-violation '#f '"invalid identifiers" h3ece@e) (void))) h3efe@ls/false)) (apply (lambda (h3f08@xlhs* h3f09@xrhs* h3f0a@xbody h3f0b@xbody*) ((lambda (h3f10@xlab*) ((lambda (h3f12@xrib) ((lambda (h3f14@xb*) ((lambda () (h2c4e@h2bbd@build-sequence '#f (h2f18@chi-expr* (map (lambda (h3f16@x) (h2cdb@add-subst h3f12@xrib h3f16@x)) (cons h3f0a@xbody h3f0b@xbody*)) (append (map cons h3f10@xlab* h3f14@xb*) h3ecf@r) (append (map cons h3f10@xlab* h3f14@xb*) h3ed0@mr)))))) (map (lambda (h3f18@x) (h2d2d@make-eval-transformer (h2f57@expand-transformer (if (eq? h3ee2@type 'let-syntax) h3f18@x (h2cdb@add-subst h3f12@xrib h3f18@x)) h3ed0@mr))) h3f09@xrhs*))) (h2caa@make-full-rib h3f08@xlhs* h3f10@xlab*))) (map h2c73@gen-label h3f08@xlhs*))) h3efe@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3efc@t))) (h2efa@syntax-dispatch h3efc@t '(_ #(each (any any)) any . each-any)))) h3ece@e) (if (memv h3ee6@t '(displaced-lexical)) (h2fe3@syntax-violation '#f '"identifier out of context" h3ece@e) (if (memv h3ee6@t '(syntax)) (h2fe3@syntax-violation '#f '"reference to pattern variable outside a syntax form" h3ece@e) (if (memv h3ee6@t '(define define-syntax module import library)) (h2fe3@syntax-violation '#f (string-append ((lambda (h3f1a@t) (if (memv h3f1a@t '(define)) '"a definition" (if (memv h3f1a@t '(define-syntax)) '"a define-syntax" (if (memv h3f1a@t '(module)) '"a module definition" (if (memv h3f1a@t '(library)) '"a library definition" (if (memv h3f1a@t '(import)) '"an import declaration" (if (memv h3f1a@t '(export)) '"an export declaration" '"a non-expression"))))))) h3ee2@type) '" was found where an expression was expected") h3ece@e) (if (memv h3ee6@t '(mutable)) (h2fe3@syntax-violation '#f '"attempt to reference an unexportable variable" h3ece@e) (h2fe3@syntax-violation '#f '"invalid expression" h3ece@e)))))))))))))))))) h3ee2@type)) h3edc@h3ed9 h3edb@h3ed7 h3eda@h3ed5))))) (set! h2f1e@chi-set! (lambda (h3f1c@e h3f1d@r h3f1e@mr) ((lambda (h3f22@t) ((lambda (h3f24@ls/false) (if (and h3f24@ls/false (apply (lambda (h3f26@x h3f27@v) (h2cef@id? h3f26@x)) h3f24@ls/false)) (apply (lambda (h3f2a@x h3f2b@v) (call-with-values (lambda () (h2d17@syntax-type h3f2a@x h3f1d@r)) (lambda (h3f34@h3f2f h3f35@h3f31 h3f36@h3f33) ((lambda (h3f3a@kwd h3f3b@value h3f3c@type) ((lambda (h3f40@t) (if (memv h3f40@t '(lexical)) (begin (h2e8a@set-lexical-mutable! h3f3b@value '#t) (list 'set! (h2e86@lexical-var h3f3b@value) (h2f1c@chi-expr h3f2b@v h3f1d@r h3f1e@mr))) (if (memv h3f40@t '(core-prim)) (h2fe3@syntax-violation '#f '"cannot modify imported core primitive" h3f1c@e) (if (memv h3f40@t '(global)) (h2fe3@syntax-violation '#f '"attempt to modify imported binding" h3f1c@e) (if (memv h3f40@t '(global-macro!)) (h2f1c@chi-expr (h2f16@chi-global-macro h3f3b@value h3f1c@e) h3f1d@r h3f1e@mr) (if (memv h3f40@t '(local-macro!)) (h2f1c@chi-expr (h2f14@chi-local-macro h3f3b@value h3f1c@e) h3f1d@r h3f1e@mr) (if (memv h3f40@t '(mutable)) (h2fe3@syntax-violation '#f '"attempt to assign to an unexportable variable" h3f1c@e) (h2fe3@syntax-violation '#f '"invalid syntax" h3f1c@e)))))))) h3f3c@type)) h3f36@h3f33 h3f35@h3f31 h3f34@h3f2f)))) h3f24@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3f22@t))) (h2efa@syntax-dispatch h3f22@t '(_ any any)))) h3f1c@e))) (set! h2f20@verify-formals (lambda (h3f42@fmls h3f43@stx) ((lambda (h3f46@t) ((lambda (h3f48@ls/false) (if h3f48@ls/false (apply (lambda (h3f4a@x*) (if (not (h2cf9@valid-bound-ids? h3f4a@x*)) (h2eb4@invalid-fmls-error h3f43@stx h3f42@fmls) (void))) h3f48@ls/false) ((lambda (h3f4c@t) ((lambda (h3f4e@ls/false) (if h3f4e@ls/false (apply (lambda (h3f50@x* h3f51@x) (if (not (h2cf9@valid-bound-ids? (cons h3f51@x h3f50@x*))) (h2eb4@invalid-fmls-error h3f43@stx h3f42@fmls) (void))) h3f4e@ls/false) ((lambda (h3f54@t) ((lambda (h3f56@ls/false) (if h3f56@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid syntax" h3f43@stx)) h3f56@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3f54@t))) (h2efa@syntax-dispatch h3f54@t '_))) h3f4c@t))) (h2efa@syntax-dispatch h3f4c@t '#(each+ any () any)))) h3f46@t))) (h2efa@syntax-dispatch h3f46@t 'each-any))) h3f42@fmls))) (set! h2f22@chi-lambda-clause (lambda (h3f58@stx h3f59@fmls h3f5a@body* h3f5b@r h3f5c@mr) ((lambda (h3f62@t) ((lambda (h3f64@ls/false) (if h3f64@ls/false (apply (lambda (h3f66@x*) (begin (h2f20@verify-formals h3f59@fmls h3f58@stx) ((lambda (h3f68@lex* h3f69@lab*) (values h3f68@lex* (h2f32@chi-internal (h2cdb@add-subst (h2caa@make-full-rib h3f66@x* h3f69@lab*) h3f5a@body*) (h2e8e@add-lexicals h3f69@lab* h3f68@lex* h3f5b@r) h3f5c@mr))) (map h2c6f@gen-lexical h3f66@x*) (map h2c73@gen-label h3f66@x*)))) h3f64@ls/false) ((lambda (h3f6c@t) ((lambda (h3f6e@ls/false) (if h3f6e@ls/false (apply (lambda (h3f70@x* h3f71@x) (begin (h2f20@verify-formals h3f59@fmls h3f58@stx) ((lambda (h3f74@lex* h3f75@lab* h3f76@lex h3f77@lab) (values (append h3f74@lex* h3f76@lex) (h2f32@chi-internal (h2cdb@add-subst (h2caa@make-full-rib (cons h3f71@x h3f70@x*) (cons h3f77@lab h3f75@lab*)) h3f5a@body*) (h2e8e@add-lexicals (cons h3f77@lab h3f75@lab*) (cons h3f76@lex h3f74@lex*) h3f5b@r) h3f5c@mr))) (map h2c6f@gen-lexical h3f70@x*) (map h2c73@gen-label h3f70@x*) (h2c6f@gen-lexical h3f71@x) (h2c73@gen-label h3f71@x)))) h3f6e@ls/false) ((lambda (h3f7c@t) ((lambda (h3f7e@ls/false) (if h3f7e@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid syntax" h3f59@fmls)) h3f7e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h3f7c@t))) (h2efa@syntax-dispatch h3f7c@t '_))) h3f6c@t))) (h2efa@syntax-dispatch h3f6c@t '#(each+ any () any)))) h3f62@t))) (h2efa@syntax-dispatch h3f62@t 'each-any))) h3f59@fmls))) (set! h2f24@chi-lambda-clause* (lambda (h3f80@stx h3f81@fmls* h3f82@body** h3f83@r h3f84@mr) (if (null? h3f81@fmls*) (values '() '()) (call-with-values (lambda () (h2f22@chi-lambda-clause h3f80@stx (car h3f81@fmls*) (car h3f82@body**) h3f83@r h3f84@mr)) (lambda (h3f8e@h3f8b h3f8f@h3f8d) ((lambda (h3f92@b h3f93@a) (call-with-values (lambda () (h2f24@chi-lambda-clause* h3f80@stx (cdr h3f81@fmls*) (cdr h3f82@body**) h3f83@r h3f84@mr)) (lambda (h3f9a@h3f97 h3f9b@h3f99) ((lambda (h3f9e@b* h3f9f@a*) (values (cons h3f93@a h3f9f@a*) (cons h3f92@b h3f9e@b*))) h3f9b@h3f99 h3f9a@h3f97)))) h3f8f@h3f8d h3f8e@h3f8b)))))) (set! h2f26@chi-defun (lambda (h3fa2@x h3fa3@r h3fa4@mr) ((lambda (h3fa8@fmls h3fa9@body*) (call-with-values (lambda () (h2f22@chi-lambda-clause h3fa8@fmls h3fa8@fmls h3fa9@body* h3fa3@r h3fa4@mr)) (lambda (h3fb0@h3fad h3fb1@h3faf) ((lambda (h3fb4@body h3fb5@fmls) (h2c4b@h2b8b@build-lambda '#f h3fb5@fmls h3fb4@body)) h3fb1@h3faf h3fb0@h3fad)))) (car h3fa2@x) (cdr h3fa2@x)))) (set! h2f28@chi-rhs (lambda (h3fb8@rhs h3fb9@r h3fba@mr) ((lambda (h3fbe@t) (if (memv h3fbe@t '(defun)) (h2f26@chi-defun (cdr h3fb8@rhs) h3fb9@r h3fba@mr) (if (memv h3fbe@t '(expr)) ((lambda (h3fc0@expr) (h2f1c@chi-expr h3fc0@expr h3fb9@r h3fba@mr)) (cdr h3fb8@rhs)) (if (memv h3fbe@t '(top-expr)) ((lambda (h3fc2@expr) (h2c4e@h2bbd@build-sequence '#f (list (h2f1c@chi-expr h3fc2@expr h3fb9@r h3fba@mr) (h2c4f@h2bbf@build-void)))) (cdr h3fb8@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" h3fb8@rhs))))) (car h3fb8@rhs)))) (set! h2f2a@expand-interaction-rhs*/init* (lambda (h3fc4@lhs* h3fc5@rhs* h3fc6@init* h3fc7@r h3fc8@mr) ((letrec ((h3fce@f (lambda (h3fd0@lhs* h3fd1@rhs*) (if (null? h3fd0@lhs*) (map (lambda (h3fd4@x) (h2f1c@chi-expr h3fd4@x h3fc7@r h3fc8@mr)) h3fc6@init*) ((lambda (h3fd6@lhs h3fd7@rhs) ((lambda (h3fda@t) (if (memv h3fda@t '(defun)) ((lambda (h3fdc@rhs) (cons (list 'set! h3fd6@lhs h3fdc@rhs) (h3fce@f (cdr h3fd0@lhs*) (cdr h3fd1@rhs*)))) (h2f26@chi-defun (cdr h3fd7@rhs) h3fc7@r h3fc8@mr)) (if (memv h3fda@t '(expr)) ((lambda (h3fde@rhs) (cons (list 'set! h3fd6@lhs h3fde@rhs) (h3fce@f (cdr h3fd0@lhs*) (cdr h3fd1@rhs*)))) (h2f1c@chi-expr (cdr h3fd7@rhs) h3fc7@r h3fc8@mr)) (if (memv h3fda@t '(top-expr)) ((lambda (h3fe0@e) (cons h3fe0@e (h3fce@f (cdr h3fd0@lhs*) (cdr h3fd1@rhs*)))) (h2f1c@chi-expr (cdr h3fd7@rhs) h3fc7@r h3fc8@mr)) (error 'expand-interaction '"invallid" h3fd7@rhs))))) (car h3fd7@rhs))) (car h3fd0@lhs*) (car h3fd1@rhs*)))))) h3fce@f) h3fc4@lhs* h3fc5@rhs*))) (set! h2f2c@chi-rhs* (lambda (h3fe2@rhs* h3fe3@r h3fe4@mr) ((letrec ((h3fe8@f (lambda (h3fea@ls) (if (null? h3fea@ls) '() ((lambda (h3fec@a) (cons h3fec@a (h3fe8@f (cdr h3fea@ls)))) (h2f28@chi-rhs (car h3fea@ls) h3fe3@r h3fe4@mr)))))) h3fe8@f) h3fe2@rhs*))) (set! h2f2e@find-bound=? (lambda (h3fee@x h3fef@lhs* h3ff0@rhs*) (if (null? h3fef@lhs*) '#f (if (h2cf5@bound-id=? h3fee@x (car h3fef@lhs*)) (car h3ff0@rhs*) (h2f2e@find-bound=? h3fee@x (cdr h3fef@lhs*) (cdr h3ff0@rhs*)))))) (set! h2f30@find-dups (lambda (h3ff4@ls) ((letrec ((h3ff6@f (lambda (h3ff8@ls h3ff9@dups) (if (null? h3ff8@ls) h3ff9@dups ((lambda (h3ffc@t) (if h3ffc@t ((lambda (h3ffe@x) (h3ff6@f (cdr h3ff8@ls) (cons (list (car h3ff8@ls) h3ffe@x) h3ff9@dups))) h3ffc@t) (h3ff6@f (cdr h3ff8@ls) h3ff9@dups))) (h2f2e@find-bound=? (car h3ff8@ls) (cdr h3ff8@ls) (cdr h3ff8@ls))))))) h3ff6@f) h3ff4@ls '()))) (set! h2f32@chi-internal (lambda (h4000@e* h4001@r h4002@mr) ((lambda (h4006@rib) (call-with-values (lambda () (h2f55@chi-body* (map (lambda (h4018@x) (h2cdb@add-subst h4006@rib h4018@x)) (h2ced@syntax->list h4000@e*)) h4001@r h4002@mr '() '() '() '() '() h4006@rib '#f)) (lambda (h401a@h4009 h401b@h400b h401c@h400d h401d@h400f h401e@h4011 h401f@h4013 h4020@h4015 h4021@h4017) ((lambda (h402a@_exp* h402b@kwd* h402c@mod** h402d@rhs* h402e@lex* h402f@mr h4030@r h4031@e*) (begin (if (null? h4031@e*) (h2fe3@syntax-violation '#f '"no expression in body" h4031@e*) (void)) ((lambda (h403a@init*) ((lambda (h403c@rhs*) ((lambda () (h2c51@h2bc3@build-letrec* '#f (reverse h402e@lex*) (reverse h403c@rhs*) (h2c4e@h2bbd@build-sequence '#f h403a@init*))))) (h2f2c@chi-rhs* h402d@rhs* h4030@r h402f@mr))) (h2f18@chi-expr* (append (apply append (reverse h402c@mod**)) h4031@e*) h4030@r h402f@mr)))) h4021@h4017 h4020@h4015 h401f@h4013 h401e@h4011 h401d@h400f h401c@h400d h401b@h400b h401a@h4009)))) (h2c9e@make-empty-rib)))) (set! h2f34@parse-module (lambda (h403e@e) ((lambda (h4040@t) ((lambda (h4042@ls/false) (if h4042@ls/false (apply (lambda (h4044@export* h4045@b*) (begin (if (not (for-all h2cef@id? h4044@export*)) (h2fe3@syntax-violation '#f '"module exports must be identifiers" h403e@e) (void)) (values '#f (list->vector h4044@export*) h4045@b*))) h4042@ls/false) ((lambda (h4048@t) ((lambda (h404a@ls/false) (if h404a@ls/false (apply (lambda (h404c@name h404d@export* h404e@b*) (begin (if (not (h2cef@id? h404c@name)) (h2fe3@syntax-violation '#f '"module name must be an identifier" h403e@e) (void)) (if (not (for-all h2cef@id? h404d@export*)) (h2fe3@syntax-violation '#f '"module exports must be identifiers" h403e@e) (void)) (values h404c@name (list->vector h404d@export*) h404e@b*))) h404a@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4048@t))) (h2efa@syntax-dispatch h4048@t '(_ any each-any . each-any)))) h4040@t))) (h2efa@syntax-dispatch h4040@t '(_ each-any . each-any)))) h403e@e))) (set! h2f3a@h2f35 (make-record-type-descriptor 'module-interface '#f 'h2f38 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! h2f3c@h2f37 '#f) (set! h2f3e@h2f36 (make-record-constructor-descriptor h2f3a@h2f35 '#f h2f3c@h2f37)) (set! h2f41@module-interface? (record-predicate h2f3a@h2f35)) (set! h2f43@make-module-interface (record-constructor h2f3e@h2f36)) (set! h2f45@module-interface-first-mark (record-accessor h2f3a@h2f35 '0)) (set! h2f47@module-interface-exp-id-vec (record-accessor h2f3a@h2f35 '1)) (set! h2f49@module-interface-exp-lab-vec (record-accessor h2f3a@h2f35 '2)) (set! h2f4b@set-module-interface-first-mark! (record-mutator h2f3a@h2f35 '0)) (set! h2f4d@set-module-interface-exp-id-vec! (record-mutator h2f3a@h2f35 '1)) (set! h2f4f@set-module-interface-exp-lab-vec! (record-mutator h2f3a@h2f35 '2)) (set! h2f51@module-interface-exp-id* (lambda (h4052@iface h4053@id) ((lambda (h4057@diff-marks) (begin (set! h4057@diff-marks (lambda (h405e@ls h405f@x) (begin (if (null? h405e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (h4062@a) (if (eq? h4062@a h405f@x) '() (cons h4062@a (h4057@diff-marks (cdr h405e@ls) h405f@x)))) (car h405e@ls))))) ((lambda (h4058@diff h4059@id-vec) (if (null? h4058@diff) h4059@id-vec (vector-map (lambda (h405c@x) (h2cb9@make-stx (h2cbb@stx-expr h405c@x) (append h4058@diff (h2cbd@stx-mark* h405c@x)) '() '())) h4059@id-vec))) (h4057@diff-marks (h2cbd@stx-mark* h4053@id) (h2f45@module-interface-first-mark h4052@iface)) (h2f47@module-interface-exp-id-vec h4052@iface)))) '#f))) (set! h2f53@chi-internal-module (lambda (h4064@e h4065@r h4066@mr h4067@lex* h4068@rhs* h4069@mod** h406a@kwd*) (call-with-values (lambda () (h2f34@parse-module h4064@e)) (lambda (h4078@h4073 h4079@h4075 h407a@h4077) ((lambda (h407e@e* h407f@exp-id* h4080@name) ((lambda (h4084@rib) ((lambda (h4086@e*) ((lambda () (call-with-values (lambda () (h2f55@chi-body* h4086@e* h4065@r h4066@mr h4067@lex* h4068@rhs* h4069@mod** h406a@kwd* '() h4084@rib '#f)) (lambda (h4098@h4089 h4099@h408b h409a@h408d h409b@h408f h409c@h4091 h409d@h4093 h409e@h4095 h409f@h4097) ((lambda (h40a8@_exp* h40a9@kwd* h40aa@mod** h40ab@rhs* h40ac@lex* h40ad@mr h40ae@r h40af@e*) ((lambda (h40b8@exp-lab* h40b9@mod**) (if (not h4080@name) (values h40ac@lex* h40ab@rhs* h407f@exp-id* h40b8@exp-lab* h40ae@r h40ad@mr h40b9@mod** h40a9@kwd*) ((lambda (h40bc@lab h40bd@iface) (values h40ac@lex* h40ab@rhs* (vector h4080@name) (vector h40bc@lab) (cons (cons h40bc@lab (cons '$module h40bd@iface)) h40ae@r) (cons (cons h40bc@lab (cons '$module h40bd@iface)) h40ad@mr) h40b9@mod** h40a9@kwd*)) (h2c73@gen-label 'module) (h2f43@make-module-interface (car (h2cbd@stx-mark* h4080@name)) (vector-map (lambda (h40c0@x) (h2cb9@make-stx (h2cbb@stx-expr h40c0@x) (h2cbd@stx-mark* h40c0@x) '() '())) h407f@exp-id*) h40b8@exp-lab*)))) (vector-map (lambda (h40c2@x) (or (h2d09@id->label (h2cb9@make-stx (h2cf1@id->sym h40c2@x) (h2cbd@stx-mark* h40c2@x) (list h4084@rib) '())) (h2fe3@syntax-violation '#f '"cannot find module export" h40c2@x))) h407f@exp-id*) (cons h40af@e* h40aa@mod**))) h409f@h4097 h409e@h4095 h409d@h4093 h409c@h4091 h409b@h408f h409a@h408d h4099@h408b h4098@h4089)))))) (map (lambda (h40c4@x) (h2cdb@add-subst h4084@rib h40c4@x)) (h2ced@syntax->list h407e@e*)))) (h2c9e@make-empty-rib))) h407a@h4077 h4079@h4075 h4078@h4073))))) (set! h2f55@chi-body* (lambda (h40c6@e* h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40cc@kwd* h40cd@exp* h40ce@rib h40cf@top?) (if (null? h40c6@e*) (values h40c6@e* h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40cc@kwd* h40cd@exp*) ((lambda (h40da@e) (call-with-values (lambda () (h2d17@syntax-type h40da@e h40c7@r)) (lambda (h40e2@h40dd h40e3@h40df h40e4@h40e1) ((lambda (h40e8@kwd h40e9@value h40ea@type) ((lambda (h40ee@kwd*) ((lambda (h40f0@t) (if (memv h40f0@t '(define)) (call-with-values (lambda () (h2e7e@parse-define h40da@e)) (lambda (h40f6@h40f3 h40f7@h40f5) ((lambda (h40fa@rhs h40fb@id) (begin (if (h2cfd@bound-id-member? h40fb@id h40ee@kwd*) (h2fe3@syntax-violation '#f '"cannot redefine keyword" h40da@e) (void)) (call-with-values (lambda () (h2c77@gen-define-label+loc h40fb@id h40ce@rib)) (lambda (h4102@h40ff h4103@h4101) ((lambda (h4106@lex h4107@lab) (begin (h2ca0@extend-rib! h40ce@rib h40fb@id h4107@lab) (h2f55@chi-body* (cdr h40c6@e*) (h2e8c@add-lexical h4107@lab h4106@lex h40c7@r) h40c8@mr (cons h4106@lex h40c9@lex*) (cons h40fa@rhs h40ca@rhs*) h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?))) h4103@h4101 h4102@h40ff))))) h40f7@h40f5 h40f6@h40f3))) (if (memv h40f0@t '(define-syntax)) (call-with-values (lambda () (h2e80@parse-define-syntax h40da@e)) (lambda (h410e@h410b h410f@h410d) ((lambda (h4112@rhs h4113@id) (begin (if (h2cfd@bound-id-member? h4113@id h40ee@kwd*) (h2fe3@syntax-violation '#f '"cannot redefine keyword" h40da@e) (void)) ((lambda (h4116@lab h4117@expanded-rhs) (begin (h2ca0@extend-rib! h40ce@rib h4113@id h4116@lab) ((lambda (h411a@b) (h2f55@chi-body* (cdr h40c6@e*) (cons (cons h4116@lab h411a@b) h40c7@r) (cons (cons h4116@lab h411a@b) h40c8@mr) h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?)) (h2d2d@make-eval-transformer h4117@expanded-rhs)))) (h2c79@gen-define-label h4113@id h40ce@rib) (h2f57@expand-transformer h4112@rhs h40c8@mr)))) h410f@h410d h410e@h410b))) (if (memv h40f0@t '(let-syntax letrec-syntax)) ((lambda (h411c@t) ((lambda (h411e@ls/false) (if (and h411e@ls/false (apply (lambda (h4120@xlhs* h4121@xrhs* h4122@xbody*) (if (not (h2cf9@valid-bound-ids? h4120@xlhs*)) (h2fe3@syntax-violation '#f '"invalid identifiers" h40da@e) (void))) h411e@ls/false)) (apply (lambda (h4126@xlhs* h4127@xrhs* h4128@xbody*) ((lambda (h412c@xlab*) ((lambda (h412e@xrib) ((lambda (h4130@xb*) ((lambda () (h2f55@chi-body* (append (map (lambda (h4132@x) (h2cdb@add-subst h412e@xrib h4132@x)) h4128@xbody*) (cdr h40c6@e*)) (append (map cons h412c@xlab* h4130@xb*) h40c7@r) (append (map cons h412c@xlab* h4130@xb*) h40c8@mr) h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?)))) (map (lambda (h4134@x) (h2d2d@make-eval-transformer (h2f57@expand-transformer (if (eq? h40ea@type 'let-syntax) h4134@x (h2cdb@add-subst h412e@xrib h4134@x)) h40c8@mr))) h4127@xrhs*))) (h2caa@make-full-rib h4126@xlhs* h412c@xlab*))) (map h2c73@gen-label h4126@xlhs*))) h411e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h411c@t))) (h2efa@syntax-dispatch h411c@t '(_ #(each (any any)) . each-any)))) h40da@e) (if (memv h40f0@t '(begin)) ((lambda (h4136@t) ((lambda (h4138@ls/false) (if h4138@ls/false (apply (lambda (h413a@x*) (h2f55@chi-body* (append h413a@x* (cdr h40c6@e*)) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?)) h4138@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4136@t))) (h2efa@syntax-dispatch h4136@t '(_ . each-any)))) h40da@e) (if (memv h40f0@t '(global-macro global-macro!)) (h2f55@chi-body* (cons (h2cdb@add-subst h40ce@rib (h2f16@chi-global-macro h40e9@value h40da@e)) (cdr h40c6@e*)) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?) (if (memv h40f0@t '(local-macro local-macro!)) (h2f55@chi-body* (cons (h2cdb@add-subst h40ce@rib (h2f14@chi-local-macro h40e9@value h40da@e)) (cdr h40c6@e*)) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?) (if (memv h40f0@t '(macro macro!)) (h2f55@chi-body* (cons (h2cdb@add-subst h40ce@rib (h2f12@chi-macro h40e9@value h40da@e)) (cdr h40c6@e*)) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?) (if (memv h40f0@t '(module)) (call-with-values (lambda () (h2f53@chi-internal-module h40da@e h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd*)) (lambda (h414c@h413d h414d@h413f h414e@h4141 h414f@h4143 h4150@h4145 h4151@h4147 h4152@h4149 h4153@h414b) ((lambda (h415c@kwd* h415d@mod** h415e@mr h415f@r h4160@m-exp-lab* h4161@m-exp-id* h4162@rhs* h4163@lex*) (begin (vector-for-each (lambda (h416c@id h416d@lab) (h2ca0@extend-rib! h40ce@rib h416c@id h416d@lab)) h4161@m-exp-id* h4160@m-exp-lab*) (h2f55@chi-body* (cdr h40c6@e*) h415f@r h415e@mr h4163@lex* h4162@rhs* h415d@mod** h415c@kwd* h40cd@exp* h40ce@rib h40cf@top?))) h4153@h414b h4152@h4149 h4151@h4147 h4150@h4145 h414f@h4143 h414e@h4141 h414d@h413f h414c@h413d))) (if (memv h40f0@t '(library)) (begin (h2fc5@library-expander (h2d05@stx->datum h40da@e)) (h2f55@chi-body* (cdr h40c6@e*) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?)) (if (memv h40f0@t '(export)) ((lambda (h4170@t) ((lambda (h4172@ls/false) (if h4172@ls/false (apply (lambda (h4174@exp-decl*) (h2f55@chi-body* (cdr h40c6@e*) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* (append h4174@exp-decl* h40cd@exp*) h40ce@rib h40cf@top?)) h4172@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4170@t))) (h2efa@syntax-dispatch h4170@t '(_ . each-any)))) h40da@e) (if (memv h40f0@t '(import)) ((lambda () ((lambda (h4177@module-import? h4179@module-import h417b@library-import) (begin (set! h4177@module-import? (lambda (h41ca@e) ((lambda (h41cc@t) ((lambda (h41ce@ls/false) (if (and h41ce@ls/false (apply (lambda (h41d0@id) (h2cef@id? h41d0@id)) h41ce@ls/false)) (apply (lambda (h41d2@id) '#t) h41ce@ls/false) ((lambda (h41d4@t) ((lambda (h41d6@ls/false) (if h41d6@ls/false (apply (lambda (h41d8@imp*) '#f) h41d6@ls/false) ((lambda (h41da@t) ((lambda (h41dc@ls/false) (if h41dc@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"malformed import form" h41ca@e)) h41dc@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h41da@t))) (h2efa@syntax-dispatch h41da@t '_))) h41d4@t))) (h2efa@syntax-dispatch h41d4@t '(_ . each-any)))) h41cc@t))) (h2efa@syntax-dispatch h41cc@t '(_ any)))) h41ca@e))) (set! h4179@module-import (lambda (h41a8@e h41a9@r) ((lambda (h41ac@t) ((lambda (h41ae@ls/false) (if (and h41ae@ls/false (apply (lambda (h41b0@id) (h2cef@id? h41b0@id)) h41ae@ls/false)) (apply (lambda (h41b2@id) (call-with-values (lambda () (h2d17@syntax-type h41b2@id h41a9@r)) (lambda (h41ba@h41b5 h41bb@h41b7 h41bc@h41b9) ((lambda (h41c0@kwd h41c1@value h41c2@type) ((lambda (h41c6@t) (if (memv h41c6@t '($module)) ((lambda (h41c8@iface) (values (h2f51@module-interface-exp-id* h41c8@iface h41b2@id) (h2f49@module-interface-exp-lab-vec h41c8@iface))) h41c1@value) (h2fe3@syntax-violation '#f '"invalid import" h41a8@e))) h41c2@type)) h41bc@h41b9 h41bb@h41b7 h41ba@h41b5)))) h41ae@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h41ac@t))) (h2efa@syntax-dispatch h41ac@t '(_ any)))) h41a8@e))) (set! h417b@library-import (lambda (h418c@e) ((lambda (h418e@t) ((lambda (h4190@ls/false) (if h4190@ls/false (apply (lambda (h4192@ctxt h4193@imp*) (call-with-values (lambda () (h2f5f@parse-import-spec* (h2fe9@syntax->datum h4193@imp*))) (lambda (h419a@h4197 h419b@h4199) ((lambda (h419e@subst-labels h419f@subst-names) (values (vector-map (lambda (h41a2@name) (h2ccd@datum->stx h4192@ctxt h41a2@name)) h419f@subst-names) h419e@subst-labels)) h419b@h4199 h419a@h4197)))) h4190@ls/false) ((lambda (h41a4@t) ((lambda (h41a6@ls/false) (if h41a6@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid import form" h418c@e)) h41a6@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h41a4@t))) (h2efa@syntax-dispatch h41a4@t '_))) h418e@t))) (h2efa@syntax-dispatch h418e@t '(any . each-any)))) h418c@e))) (begin (call-with-values (lambda () (if (h4177@module-import? h40da@e) (h4179@module-import h40da@e h40c7@r) (h417b@library-import h40da@e))) (lambda (h4180@h417d h4181@h417f) ((lambda (h4184@lab* h4185@id*) (vector-for-each (lambda (h4188@id h4189@lab) (h2ca0@extend-rib! h40ce@rib h4188@id h4189@lab)) h4185@id* h4184@lab*)) h4181@h417f h4180@h417d))) (h2f55@chi-body* (cdr h40c6@e*) h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?)))) '#f '#f '#f))) (if h40cf@top? (h2f55@chi-body* (cdr h40c6@e*) h40c7@r h40c8@mr (cons (h2c6f@gen-lexical 'dummy) h40c9@lex*) (cons (cons 'top-expr h40da@e) h40ca@rhs*) h40cb@mod** h40ee@kwd* h40cd@exp* h40ce@rib h40cf@top?) (values h40c6@e* h40c7@r h40c8@mr h40c9@lex* h40ca@rhs* h40cb@mod** h40ee@kwd* h40cd@exp*)))))))))))))) h40ea@type)) (if (h2cef@id? h40e8@kwd) (cons h40e8@kwd h40cc@kwd*) h40cc@kwd*))) h40e4@h40e1 h40e3@h40df h40e2@h40dd)))) (car h40c6@e*))))) (set! h2f57@expand-transformer (lambda (h41de@expr h41df@r) ((lambda (h41e2@rtc) ((lambda (h41e4@expanded-rhs) (begin (for-each ((lambda (h41e6@mark-visit) (lambda (h41e8@x) (begin (h2b13@h29b4@invoke-library h41e8@x) (h41e6@mark-visit h41e8@x)))) (h2f67@vis-collector)) (h41e2@rtc)) h41e4@expanded-rhs)) ((lambda (h41f2@h41eb h41f3@h41ed h41f4@h41ef h41f5@h41f1) ((lambda (h41fa@swap) (dynamic-wind h41fa@swap (lambda () (h2f1c@chi-expr h41de@expr h41df@r h41df@r)) h41fa@swap)) (lambda () (begin ((lambda (h41fc@t) (begin (h41f2@h41eb h41f4@h41ef) (set! h41f4@h41ef h41fc@t))) (h41f2@h41eb)) ((lambda (h41fe@t) (begin (h41f3@h41ed h41f5@h41f1) (set! h41f5@h41f1 h41fe@t))) (h41f3@h41ed)))))) h2f65@inv-collector h2f67@vis-collector h41e2@rtc (lambda (h4200@x) (values))))) (h2f63@make-collector)))) (set! h2f59@parse-exports (lambda (h4202@exp*) ((letrec ((h4204@f (lambda (h4206@exp* h4207@int* h4208@ext*) (if (null? h4206@exp*) (begin (if (not (h2cf9@valid-bound-ids? h4208@ext*)) (h2fe3@syntax-violation 'export '"invalid exports" (h2f30@find-dups h4208@ext*)) (void)) (values (map h2fe9@syntax->datum h4208@ext*) h4207@int*)) ((lambda (h420c@t) ((lambda (h420e@ls/false) (if h420e@ls/false (apply (lambda (h4210@rename h4211@i* h4212@e*) (begin (if (not (and (eq? (h2fe9@syntax->datum h4210@rename) 'rename) (for-all h2cef@id? h4211@i*) (for-all h2cef@id? h4212@e*))) (h2fe3@syntax-violation 'export '"invalid export specifier" (car h4206@exp*)) (void)) (h4204@f (cdr h4206@exp*) (append h4211@i* h4207@int*) (append h4212@e* h4208@ext*)))) h420e@ls/false) ((lambda (h4216@t) ((lambda (h4218@ls/false) (if h4218@ls/false (apply (lambda (h421a@ie) (begin (if (not (h2cef@id? h421a@ie)) (h2fe3@syntax-violation 'export '"invalid export" h421a@ie) (void)) (h4204@f (cdr h4206@exp*) (cons h421a@ie h4207@int*) (cons h421a@ie h4208@ext*)))) h4218@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4216@t))) (h2efa@syntax-dispatch h4216@t 'any))) h420c@t))) (h2efa@syntax-dispatch h420c@t '(any . #(each (any any)))))) (car h4206@exp*)))))) h4204@f) h4202@exp* '() '()))) (set! h2f5b@parse-library-name (lambda (h421c@spec) ((lambda (h421f@parse) (begin (set! h421f@parse (lambda (h422c@x) ((lambda (h422e@t) ((lambda (h4230@ls/false) (if (and h4230@ls/false (apply (lambda (h4232@v*) (for-all (lambda (h4234@x) ((lambda (h4236@x) (and (integer? h4236@x) (exact? h4236@x))) (h2fe9@syntax->datum h4234@x))) h4232@v*)) h4230@ls/false)) (apply (lambda (h4238@v*) (values '() (map h2fe9@syntax->datum h4238@v*))) h4230@ls/false) ((lambda (h423a@t) ((lambda (h423c@ls/false) (if (and h423c@ls/false (apply (lambda (h423e@x h423f@rest) (symbol? (h2fe9@syntax->datum h423e@x))) h423c@ls/false)) (apply (lambda (h4242@x h4243@rest) (call-with-values (lambda () (h421f@parse h4243@rest)) (lambda (h424a@h4247 h424b@h4249) ((lambda (h424e@v* h424f@x*) (values (cons (h2fe9@syntax->datum h4242@x) h424f@x*) h424e@v*)) h424b@h4249 h424a@h4247)))) h423c@ls/false) ((lambda (h4252@t) ((lambda (h4254@ls/false) (if h4254@ls/false (apply (lambda () (values '() '())) h4254@ls/false) ((lambda (h4256@t) ((lambda (h4258@ls/false) (if h4258@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid library name" h421c@spec)) h4258@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4256@t))) (h2efa@syntax-dispatch h4256@t '_))) h4252@t))) (h2efa@syntax-dispatch h4252@t '()))) h423a@t))) (h2efa@syntax-dispatch h423a@t '(any . any)))) h422e@t))) (h2efa@syntax-dispatch h422e@t '(each-any)))) h422c@x))) (call-with-values (lambda () (h421f@parse h421c@spec)) (lambda (h4224@h4221 h4225@h4223) ((lambda (h4228@ver* h4229@name*) (begin (if (null? h4229@name*) (h2fe3@syntax-violation '#f '"empty library name" h421c@spec) (void)) (values h4229@name* h4228@ver*))) h4225@h4223 h4224@h4221))))) '#f))) (set! h2f5d@parse-library (lambda (h425a@e) ((lambda (h425c@t) ((lambda (h425e@ls/false) (if (and h425e@ls/false (apply (lambda (h4260@library h4261@name* h4262@export h4263@exp* h4264@import h4265@imp* h4266@b*) (and (eq? (h2fe9@syntax->datum h4262@export) 'export) (eq? (h2fe9@syntax->datum h4264@import) 'import) (eq? (h2fe9@syntax->datum h4260@library) 'library))) h425e@ls/false)) (apply (lambda (h426e@library h426f@name* h4270@export h4271@exp* h4272@import h4273@imp* h4274@b*) (values h426f@name* h4271@exp* h4273@imp* h4274@b*)) h425e@ls/false) ((lambda (h427c@t) ((lambda (h427e@ls/false) (if h427e@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"malformed library" h425a@e)) h427e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h427c@t))) (h2efa@syntax-dispatch h427c@t '_))) h425c@t))) (h2efa@syntax-dispatch h425c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) h425a@e))) (set! h2f5f@parse-import-spec* ((lambda () ((lambda (h4281@idsyn? h4283@dup-error h4285@merge-substs h4287@exclude* h4289@find* h428b@rem* h428d@remove-dups h428f@parse-library-name h4291@import-library h4293@get-import h4295@add-imports!) (begin (set! h4281@idsyn? (lambda (h448a@x) (symbol? (h2fe9@syntax->datum h448a@x)))) (set! h4283@dup-error (lambda (h4488@name) (h2fe3@syntax-violation 'import '"two imports with different bindings" h4488@name))) (set! h4285@merge-substs (lambda (h4476@s h4477@subst) ((lambda (h447b@insert-to-subst) (begin (set! h447b@insert-to-subst (lambda (h447c@a h447d@subst) ((lambda (h4480@name h4481@label) ((lambda (h4484@t) (if h4484@t ((lambda (h4486@x) (if (eq? (cdr h4486@x) h4481@label) h447d@subst (h4283@dup-error h4480@name))) h4484@t) (cons h447c@a h447d@subst))) (assq h4480@name h447d@subst))) (car h447c@a) (cdr h447c@a)))) (if (null? h4476@s) h4477@subst (h447b@insert-to-subst (car h4476@s) (h4285@merge-substs (cdr h4476@s) h4477@subst))))) '#f))) (set! h4287@exclude* (lambda (h4446@sym* h4447@subst) ((lambda (h444b@exclude) (begin (set! h444b@exclude (lambda (h4464@sym h4465@subst) (if (null? h4465@subst) (h2fe3@syntax-violation 'import '"cannot rename unbound identifier" h4464@sym) (if (eq? h4464@sym (caar h4465@subst)) (values (cdar h4465@subst) (cdr h4465@subst)) ((lambda (h4468@a) (call-with-values (lambda () (h444b@exclude h4464@sym (cdr h4465@subst))) (lambda (h446e@h446b h446f@h446d) ((lambda (h4472@subst h4473@old) (values h4473@old (cons h4468@a h4472@subst))) h446f@h446d h446e@h446b)))) (car h4465@subst)))))) (if (null? h4446@sym*) (values '() h4447@subst) (call-with-values (lambda () (h444b@exclude (car h4446@sym*) h4447@subst)) (lambda (h4450@h444d h4451@h444f) ((lambda (h4454@subst h4455@old) (call-with-values (lambda () (h4287@exclude* (cdr h4446@sym*) h4454@subst)) (lambda (h445c@h4459 h445d@h445b) ((lambda (h4460@subst h4461@old*) (values (cons h4455@old h4461@old*) h4460@subst)) h445d@h445b h445c@h4459)))) h4451@h444f h4450@h444d)))))) '#f))) (set! h4289@find* (lambda (h443e@sym* h443f@subst) (map (lambda (h4442@x) ((lambda (h4444@t) (if h4444@t (cdr h4444@t) (h2fe3@syntax-violation 'import '"cannot find identifier" h4442@x))) (assq h4442@x h443f@subst))) h443e@sym*))) (set! h428b@rem* (lambda (h4436@sym* h4437@subst) ((letrec ((h443a@f (lambda (h443c@subst) (if (null? h443c@subst) '() (if (memq (caar h443c@subst) h4436@sym*) (h443a@f (cdr h443c@subst)) (cons (car h443c@subst) (h443a@f (cdr h443c@subst)))))))) h443a@f) h4437@subst))) (set! h428d@remove-dups (lambda (h4434@ls) (if (null? h4434@ls) '() (if (memq (car h4434@ls) (cdr h4434@ls)) (h428d@remove-dups (cdr h4434@ls)) (cons (car h4434@ls) (h428d@remove-dups (cdr h4434@ls))))))) (set! h428f@parse-library-name (lambda (h434c@spec) ((lambda (h434f@subversion? h4351@subversion-pred h4353@version-pred) (begin (set! h434f@subversion? (lambda (h4430@x) ((lambda (h4432@x) (and (integer? h4432@x) (exact? h4432@x) (>= h4432@x '0))) (h2fe9@syntax->datum h4430@x)))) (set! h4351@subversion-pred (lambda (h43d0@x*) ((lambda (h43d2@t) ((lambda (h43d4@ls/false) (if (and h43d4@ls/false (apply (lambda (h43d6@n) (h434f@subversion? h43d6@n)) h43d4@ls/false)) (apply (lambda (h43d8@n) (lambda (h43da@x) (= h43da@x (h2fe9@syntax->datum h43d8@n)))) h43d4@ls/false) ((lambda (h43dc@t) ((lambda (h43de@ls/false) (if (and h43de@ls/false (apply (lambda (h43e0@p? h43e1@sub*) (eq? (h2fe9@syntax->datum h43e0@p?) 'and)) h43de@ls/false)) (apply (lambda (h43e4@p? h43e5@sub*) ((lambda (h43e8@p*) (lambda (h43ea@x) (for-all (lambda (h43ec@p) (h43ec@p h43ea@x)) h43e8@p*))) (map h4351@subversion-pred h43e5@sub*))) h43de@ls/false) ((lambda (h43ee@t) ((lambda (h43f0@ls/false) (if (and h43f0@ls/false (apply (lambda (h43f2@p? h43f3@sub*) (eq? (h2fe9@syntax->datum h43f2@p?) 'or)) h43f0@ls/false)) (apply (lambda (h43f6@p? h43f7@sub*) ((lambda (h43fa@p*) (lambda (h43fc@x) (exists (lambda (h43fe@p) (h43fe@p h43fc@x)) h43fa@p*))) (map h4351@subversion-pred h43f7@sub*))) h43f0@ls/false) ((lambda (h4400@t) ((lambda (h4402@ls/false) (if (and h4402@ls/false (apply (lambda (h4404@p? h4405@sub) (eq? (h2fe9@syntax->datum h4404@p?) 'not)) h4402@ls/false)) (apply (lambda (h4408@p? h4409@sub) ((lambda (h440c@p) (lambda (h440e@x) (not (h440c@p h440e@x)))) (h4351@subversion-pred h4409@sub))) h4402@ls/false) ((lambda (h4410@t) ((lambda (h4412@ls/false) (if (and h4412@ls/false (apply (lambda (h4414@p? h4415@n) (and (eq? (h2fe9@syntax->datum h4414@p?) '<=) (h434f@subversion? h4415@n))) h4412@ls/false)) (apply (lambda (h4418@p? h4419@n) (lambda (h441c@x) (<= h441c@x (h2fe9@syntax->datum h4419@n)))) h4412@ls/false) ((lambda (h441e@t) ((lambda (h4420@ls/false) (if (and h4420@ls/false (apply (lambda (h4422@p? h4423@n) (and (eq? (h2fe9@syntax->datum h4422@p?) '>=) (h434f@subversion? h4423@n))) h4420@ls/false)) (apply (lambda (h4426@p? h4427@n) (lambda (h442a@x) (>= h442a@x (h2fe9@syntax->datum h4427@n)))) h4420@ls/false) ((lambda (h442c@t) ((lambda (h442e@ls/false) (if h442e@ls/false (apply (lambda () (h2fe3@syntax-violation 'import '"invalid sub-version spec" h434c@spec h43d0@x*)) h442e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h442c@t))) (h2efa@syntax-dispatch h442c@t '_))) h441e@t))) (h2efa@syntax-dispatch h441e@t '(any any)))) h4410@t))) (h2efa@syntax-dispatch h4410@t '(any any)))) h4400@t))) (h2efa@syntax-dispatch h4400@t '(any any)))) h43ee@t))) (h2efa@syntax-dispatch h43ee@t '(any . each-any)))) h43dc@t))) (h2efa@syntax-dispatch h43dc@t '(any . each-any)))) h43d2@t))) (h2efa@syntax-dispatch h43d2@t 'any))) h43d0@x*))) (set! h4353@version-pred (lambda (h4380@x*) ((lambda (h4382@t) ((lambda (h4384@ls/false) (if h4384@ls/false (apply (lambda () (lambda (h4386@x) '#t)) h4384@ls/false) ((lambda (h4388@t) ((lambda (h438a@ls/false) (if (and h438a@ls/false (apply (lambda (h438c@c h438d@ver*) (eq? (h2fe9@syntax->datum h438c@c) 'and)) h438a@ls/false)) (apply (lambda (h4390@c h4391@ver*) ((lambda (h4394@p*) (lambda (h4396@x) (for-all (lambda (h4398@p) (h4398@p h4396@x)) h4394@p*))) (map h4353@version-pred h4391@ver*))) h438a@ls/false) ((lambda (h439a@t) ((lambda (h439c@ls/false) (if (and h439c@ls/false (apply (lambda (h439e@c h439f@ver*) (eq? (h2fe9@syntax->datum h439e@c) 'or)) h439c@ls/false)) (apply (lambda (h43a2@c h43a3@ver*) ((lambda (h43a6@p*) (lambda (h43a8@x) (exists (lambda (h43aa@p) (h43aa@p h43a8@x)) h43a6@p*))) (map h4353@version-pred h43a3@ver*))) h439c@ls/false) ((lambda (h43ac@t) ((lambda (h43ae@ls/false) (if (and h43ae@ls/false (apply (lambda (h43b0@c h43b1@ver) (eq? (h2fe9@syntax->datum h43b0@c) 'not)) h43ae@ls/false)) (apply (lambda (h43b4@c h43b5@ver) ((lambda (h43b8@p) (lambda (h43ba@x) (not (h43b8@p h43ba@x)))) (h4353@version-pred h43b5@ver))) h43ae@ls/false) ((lambda (h43bc@t) ((lambda (h43be@ls/false) (if h43be@ls/false (apply (lambda (h43c0@sub*) ((lambda (h43c2@p*) (lambda (h43c4@x) ((letrec ((h43c6@f (lambda (h43c8@p* h43c9@x) (if (null? h43c8@p*) '#t (if (null? h43c9@x) '#f (and ((car h43c8@p*) (car h43c9@x)) (h43c6@f (cdr h43c8@p*) (cdr h43c9@x)))))))) h43c6@f) h43c2@p* h43c4@x))) (map h4351@subversion-pred h43c0@sub*))) h43be@ls/false) ((lambda (h43cc@t) ((lambda (h43ce@ls/false) (if h43ce@ls/false (apply (lambda () (h2fe3@syntax-violation 'import '"invalid version spec" h434c@spec h4380@x*)) h43ce@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h43cc@t))) (h2efa@syntax-dispatch h43cc@t '_))) h43bc@t))) (h2efa@syntax-dispatch h43bc@t 'each-any))) h43ac@t))) (h2efa@syntax-dispatch h43ac@t '(any any)))) h439a@t))) (h2efa@syntax-dispatch h439a@t '(any . each-any)))) h4388@t))) (h2efa@syntax-dispatch h4388@t '(any . each-any)))) h4382@t))) (h2efa@syntax-dispatch h4382@t '()))) h4380@x*))) ((letrec ((h4354@f (lambda (h4356@x) ((lambda (h4358@t) ((lambda (h435a@ls/false) (if h435a@ls/false (apply (lambda (h435c@version-spec*) (values '() (h4353@version-pred h435c@version-spec*))) h435a@ls/false) ((lambda (h435e@t) ((lambda (h4360@ls/false) (if (and h4360@ls/false (apply (lambda (h4362@x h4363@x*) (h4281@idsyn? h4362@x)) h4360@ls/false)) (apply (lambda (h4366@x h4367@x*) (call-with-values (lambda () (h4354@f h4367@x*)) (lambda (h436e@h436b h436f@h436d) ((lambda (h4372@pred h4373@name) (values (cons (h2fe9@syntax->datum h4366@x) h4373@name) h4372@pred)) h436f@h436d h436e@h436b)))) h4360@ls/false) ((lambda (h4376@t) ((lambda (h4378@ls/false) (if h4378@ls/false (apply (lambda () (values '() (lambda (h437a@x) '#t))) h4378@ls/false) ((lambda (h437c@t) ((lambda (h437e@ls/false) (if h437e@ls/false (apply (lambda () (h2fe3@syntax-violation '#f '"invalid import spec" h434c@spec)) h437e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h437c@t))) (h2efa@syntax-dispatch h437c@t '_))) h4376@t))) (h2efa@syntax-dispatch h4376@t '()))) h435e@t))) (h2efa@syntax-dispatch h435e@t '(any . any)))) h4358@t))) (h2efa@syntax-dispatch h4358@t '(each-any)))) h4356@x)))) h4354@f) h434c@spec))) '#f '#f '#f))) (set! h4291@import-library (lambda (h433c@spec*) (call-with-values (lambda () (h428f@parse-library-name h433c@spec*)) (lambda (h4342@h433f h4343@h4341) ((lambda (h4346@pred h4347@name) (begin (if (null? h4347@name) (h2fe3@syntax-violation 'import '"empty library name" h433c@spec*) (void)) ((lambda (h434a@lib) (begin (if (not h434a@lib) (h2fe3@syntax-violation 'import '"cannot find library with required name" h4347@name) (void)) (if (not (h4346@pred (h2ae4@h2956@library-version h434a@lib))) (h2fe3@syntax-violation 'import '"library does not satisfy version specification" h433c@spec* h434a@lib) (void)) ((h2f69@imp-collector) h434a@lib) (h2ae8@h295e@library-subst h434a@lib))) (h2b0c@h29a6@find-library-by-name h4347@name)))) h4343@h4341 h4342@h433f))))) (set! h4293@get-import (lambda (h42ae@spec) ((lambda (h42b0@t) ((lambda (h42b2@ls/false) (if (and h42b2@ls/false (apply (lambda (h42b4@x h42b5@x*) (not (memq (h2fe9@syntax->datum h42b4@x) '(for rename except only prefix library)))) h42b2@ls/false)) (apply (lambda (h42b8@x h42b9@x*) (h4291@import-library (cons h42b8@x h42b9@x*))) h42b2@ls/false) ((lambda (h42bc@t) ((lambda (h42be@ls/false) (if (and h42be@ls/false (apply (lambda (h42c0@rename h42c1@isp h42c2@old* h42c3@new*) (and (eq? (h2fe9@syntax->datum h42c0@rename) 'rename) (for-all h4281@idsyn? h42c2@old*) (for-all h4281@idsyn? h42c3@new*))) h42be@ls/false)) (apply (lambda (h42c8@rename h42c9@isp h42ca@old* h42cb@new*) ((lambda (h42d0@subst h42d1@old* h42d2@new*) ((lambda (h42d6@old-label*) ((lambda (h42d8@subst) (h4285@merge-substs (map cons h42d2@new* h42d6@old-label*) h42d8@subst)) (h428b@rem* h42d1@old* h42d0@subst))) (h4289@find* h42d1@old* h42d0@subst))) (h4293@get-import h42c9@isp) (map h2fe9@syntax->datum h42ca@old*) (map h2fe9@syntax->datum h42cb@new*))) h42be@ls/false) ((lambda (h42da@t) ((lambda (h42dc@ls/false) (if (and h42dc@ls/false (apply (lambda (h42de@except h42df@isp h42e0@sym*) (and (eq? (h2fe9@syntax->datum h42de@except) 'except) (for-all h4281@idsyn? h42e0@sym*))) h42dc@ls/false)) (apply (lambda (h42e4@except h42e5@isp h42e6@sym*) ((lambda (h42ea@subst) (h428b@rem* (map h2fe9@syntax->datum h42e6@sym*) h42ea@subst)) (h4293@get-import h42e5@isp))) h42dc@ls/false) ((lambda (h42ec@t) ((lambda (h42ee@ls/false) (if (and h42ee@ls/false (apply (lambda (h42f0@only h42f1@isp h42f2@sym*) (and (eq? (h2fe9@syntax->datum h42f0@only) 'only) (for-all h4281@idsyn? h42f2@sym*))) h42ee@ls/false)) (apply (lambda (h42f6@only h42f7@isp h42f8@sym*) ((lambda (h42fc@subst h42fd@sym*) ((lambda (h4300@sym*) ((lambda (h4302@lab*) (map cons h4300@sym* h4302@lab*)) (h4289@find* h4300@sym* h42fc@subst))) (h428d@remove-dups h42fd@sym*))) (h4293@get-import h42f7@isp) (map h2fe9@syntax->datum h42f8@sym*))) h42ee@ls/false) ((lambda (h4304@t) ((lambda (h4306@ls/false) (if (and h4306@ls/false (apply (lambda (h4308@prefix h4309@isp h430a@p) (and (eq? (h2fe9@syntax->datum h4308@prefix) 'prefix) (h4281@idsyn? h430a@p))) h4306@ls/false)) (apply (lambda (h430e@prefix h430f@isp h4310@p) ((lambda (h4314@subst h4315@prefix) (map (lambda (h4318@x) (cons (string->symbol (string-append h4315@prefix (symbol->string (car h4318@x)))) (cdr h4318@x))) h4314@subst)) (h4293@get-import h430f@isp) (symbol->string (h2fe9@syntax->datum h4310@p)))) h4306@ls/false) ((lambda (h431a@t) ((lambda (h431c@ls/false) (if (and h431c@ls/false (apply (lambda (h431e@library h431f@spec*) (eq? (h2fe9@syntax->datum h431e@library) 'library)) h431c@ls/false)) (apply (lambda (h4322@library h4323@spec*) (h4291@import-library h4323@spec*)) h431c@ls/false) ((lambda (h4326@t) ((lambda (h4328@ls/false) (if (and h4328@ls/false (apply (lambda (h432a@for h432b@isp h432c@rest) (eq? (h2fe9@syntax->datum h432a@for) 'for)) h4328@ls/false)) (apply (lambda (h4330@for h4331@isp h4332@rest) (h4293@get-import h4331@isp)) h4328@ls/false) ((lambda (h4336@t) ((lambda (h4338@ls/false) (if h4338@ls/false (apply (lambda (h433a@spec) (h2fe3@syntax-violation 'import '"invalid import spec" h433a@spec)) h4338@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4336@t))) (h2efa@syntax-dispatch h4336@t 'any))) h4326@t))) (h2efa@syntax-dispatch h4326@t '(any any . any)))) h431a@t))) (h2efa@syntax-dispatch h431a@t '(any each-any)))) h4304@t))) (h2efa@syntax-dispatch h4304@t '(any any any)))) h42ec@t))) (h2efa@syntax-dispatch h42ec@t '(any any . each-any)))) h42da@t))) (h2efa@syntax-dispatch h42da@t '(any any . each-any)))) h42bc@t))) (h2efa@syntax-dispatch h42bc@t '(any any . #(each (any any)))))) h42b0@t))) (h2efa@syntax-dispatch h42b0@t '(any . each-any)))) h42ae@spec))) (set! h4295@add-imports! (lambda (h429e@imp h429f@h) ((lambda (h42a2@subst) (for-each (lambda (h42a4@x) ((lambda (h42a6@name h42a7@label) ((lambda (h42aa@t) (if h42aa@t ((lambda (h42ac@l) (if (not (eq? h42ac@l h42a7@label)) (h4283@dup-error h42a6@name) (void))) h42aa@t) (hashtable-set! h429f@h h42a6@name h42a7@label))) (hashtable-ref h429f@h h42a6@name '#f))) (car h42a4@x) (cdr h42a4@x))) h42a2@subst)) (h4293@get-import h429e@imp)))) (lambda (h4296@imp*) ((letrec ((h4298@f (lambda (h429a@imp* h429b@h) (if (null? h429a@imp*) (hashtable-entries h429b@h) (begin (h4295@add-imports! (car h429a@imp*) h429b@h) (h4298@f (cdr h429a@imp*) h429b@h)))))) h4298@f) h4296@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! h2f61@make-top-rib (lambda (h448c@names h448d@labels) ((lambda (h4490@rib) (begin (vector-for-each (lambda (h4492@name h4493@label) (begin (if (not (symbol? h4492@name)) (error 'make-top-rib '"BUG: not a symbol" h4492@name) (void)) (h2ca2@extend-rib/nc! h4490@rib (h2cb9@make-stx h4492@name h2c6b@top-mark* '() '()) h4493@label))) h448c@names h448d@labels) h4490@rib)) (h2c9e@make-empty-rib)))) (set! h2f63@make-collector (lambda () ((lambda (h4496@ls) (lambda h449a ((lambda (h449b) (if (= h449b '0) (apply (lambda () h4496@ls) h449a) (if (= h449b '1) (apply (lambda (h4498@x) (set! h4496@ls (h2c64@set-cons h4498@x h4496@ls))) h449a) (error 'apply '"invalid arg count")))) (length h449a)))) '()))) (set! h2f65@inv-collector (h2899@h27c3@make-parameter (lambda h449c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (h449e@x) (begin (if (not (procedure? h449e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" h449e@x) (void)) h449e@x)))) (set! h2f67@vis-collector (h2899@h27c3@make-parameter (lambda h44a0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (h44a2@x) (begin (if (not (procedure? h44a2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" h44a2@x) (void)) h44a2@x)))) (set! h2f69@imp-collector (h2899@h27c3@make-parameter (lambda h44a4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (h44a6@x) (begin (if (not (procedure? h44a6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" h44a6@x) (void)) h44a6@x)))) (set! h2f6b@chi-library-internal (lambda (h44a8@e* h44a9@rib h44aa@top?) (call-with-values (lambda () (h2f55@chi-body* h44a8@e* '() '() '() '() '() '() '() h44a9@rib h44aa@top?)) (lambda (h44be@h44af h44bf@h44b1 h44c0@h44b3 h44c1@h44b5 h44c2@h44b7 h44c3@h44b9 h44c4@h44bb h44c5@h44bd) ((lambda (h44ce@exp* h44cf@_kwd* h44d0@mod** h44d1@rhs* h44d2@lex* h44d3@mr h44d4@r h44d5@e*) (values (append (apply append (reverse h44d0@mod**)) h44d5@e*) h44d4@r h44d3@mr (reverse h44d2@lex*) (reverse h44d1@rhs*) h44ce@exp*)) h44c5@h44bd h44c4@h44bb h44c3@h44b9 h44c2@h44b7 h44c1@h44b5 h44c0@h44b3 h44bf@h44b1 h44be@h44af))))) (set! h2f6d@chi-interaction-expr (lambda (h44de@e h44df@rib h44e0@r) (call-with-values (lambda () (h2f55@chi-body* (list h44de@e) h44e0@r h44e0@r '() '() '() '() '() h44df@rib '#t)) (lambda (h44f4@h44e5 h44f5@h44e7 h44f6@h44e9 h44f7@h44eb h44f8@h44ed h44f9@h44ef h44fa@h44f1 h44fb@h44f3) ((lambda (h4504@_exp* h4505@_kwd* h4506@mod** h4507@rhs* h4508@lex* h4509@mr h450a@r h450b@e*) ((lambda (h4514@e*) ((lambda (h4516@e) (values h4516@e h450a@r)) (if (null? h4514@e*) (h2c4f@h2bbf@build-void) (if (null? (cdr h4514@e*)) (car h4514@e*) (h2c4e@h2bbd@build-sequence '#f h4514@e*))))) (h2f2a@expand-interaction-rhs*/init* (reverse h4508@lex*) (reverse h4507@rhs*) (append (apply append (reverse h4506@mod**)) h450b@e*) h450a@r h4509@mr))) h44fb@h44f3 h44fa@h44f1 h44f9@h44ef h44f8@h44ed h44f7@h44eb h44f6@h44e9 h44f5@h44e7 h44f4@h44e5))))) (set! h2f6f@library-body-expander (lambda (h4518@name h4519@main-exp* h451a@imp* h451b@b* h451c@top?) ((lambda (h4523@itc) (begin (set! h4523@itc (h2f63@make-collector)) ((lambda (h452c@h4525 h452d@h4527 h452e@h4529 h452f@h452b) ((lambda (h4534@swap) (dynamic-wind h4534@swap (lambda () (call-with-values (lambda () (h2f5f@parse-import-spec* h451a@imp*)) (lambda (h453a@h4537 h453b@h4539) ((lambda (h453e@subst-labels h453f@subst-names) ((lambda (h4542@rib) ((lambda (h4545@wrap) (begin (set! h4545@wrap (lambda (h45c0@x) (h2cb9@make-stx h45c0@x h2c6b@top-mark* (list h4542@rib) '()))) ((lambda (h4546@b* h4547@main-exp* h4548@rtc h4549@vtc) ((lambda (h4556@h454f h4557@h4551 h4558@h4553 h4559@h4555) ((lambda (h455e@swap) (dynamic-wind h455e@swap (lambda () (call-with-values (lambda () (h2f6b@chi-library-internal h4546@b* h4542@rib h451c@top?)) (lambda (h456c@h4561 h456d@h4563 h456e@h4565 h456f@h4567 h4570@h4569 h4571@h456b) ((lambda (h4578@internal-exp* h4579@rhs* h457a@lex* h457b@mr h457c@r h457d@init*) (call-with-values (lambda () (h2f59@parse-exports (append h4547@main-exp* h4578@internal-exp*))) (lambda (h4588@h4585 h4589@h4587) ((lambda (h458c@exp-id* h458d@exp-name*) (begin (h2ca6@seal-rib! h4542@rib) ((lambda (h4590@init*) ((lambda (h4592@rhs*) ((lambda () (begin (h2ca8@unseal-rib! h4542@rib) ((lambda (h4594@loc* h4595@export-subst) ((lambda (h4599@errstr) (begin (set! h4599@errstr '"attempt to export mutated variable") (call-with-values (lambda () (h2fcf@make-export-env/macros h457a@lex* h4594@loc* h457c@r)) (lambda (h45a0@h459b h45a1@h459d h45a2@h459f) ((lambda (h45a6@macro* h45a7@global* h45a8@export-env) (begin (for-each (lambda (h45ac@s) ((lambda (h45ae@name h45af@label) ((lambda (h45b2@p) (if h45b2@p ((lambda (h45b4@b) ((lambda (h45b6@type) (if (eq? h45b6@type 'mutable) (h2fe3@syntax-violation 'export h4599@errstr h45ae@name) (void))) (car h45b4@b))) (cdr h45b2@p)) (void))) (assq h45af@label h45a8@export-env))) (car h45ac@s) (cdr h45ac@s))) h4595@export-subst) ((lambda (h45b8@invoke-body h45b9@invoke-definitions) (values (h4523@itc) (h4548@rtc) (h4549@vtc) (h2c4e@h2bbd@build-sequence '#f (append h45b9@invoke-definitions (list h45b8@invoke-body))) h45a6@macro* h4595@export-subst h45a8@export-env)) (h2c51@h2bc3@build-letrec* '#f h457a@lex* h4592@rhs* (h2fcb@build-exports h45a7@global* h4590@init*)) (map h2c4a@h2b1a@build-global-define (map cdr h45a7@global*))))) h45a2@h459f h45a1@h459d h45a0@h459b))))) '#f)) (map h2c71@gen-global h457a@lex*) (h2fcd@make-export-subst h458d@exp-name* h458c@exp-id*)))))) (h2f2c@chi-rhs* h4579@rhs* h457c@r h457b@mr))) (h2f18@chi-expr* h457d@init* h457c@r h457b@mr)))) h4589@h4587 h4588@h4585)))) h4571@h456b h4570@h4569 h456f@h4567 h456e@h4565 h456d@h4563 h456c@h4561)))) h455e@swap)) (lambda () (begin ((lambda (h45bc@t) (begin (h4556@h454f h4558@h4553) (set! h4558@h4553 h45bc@t))) (h4556@h454f)) ((lambda (h45be@t) (begin (h4557@h4551 h4559@h4555) (set! h4559@h4555 h45be@t))) (h4557@h4551)))))) h2f65@inv-collector h2f67@vis-collector h4548@rtc h4549@vtc)) (map h4545@wrap h451b@b*) (map h4545@wrap h4519@main-exp*) (h2f63@make-collector) (h2f63@make-collector)))) '#f)) (h2f61@make-top-rib h453f@subst-names h453e@subst-labels))) h453b@h4539 h453a@h4537)))) h4534@swap)) (lambda () (begin ((lambda (h45c2@t) (begin (h452c@h4525 h452e@h4529) (set! h452e@h4529 h45c2@t))) (h452c@h4525)) ((lambda (h45c4@t) (begin (h452d@h4527 h452f@h452b) (set! h452f@h452b h45c4@t))) (h452d@h4527)))))) h2f69@imp-collector h2ff1@top-level-context h4523@itc '#f))) '#f))) (set! h2f71@core-library-expander (lambda (h45c6@e h45c7@verify-name) (call-with-values (lambda () (h2f5d@parse-library h45c6@e)) (lambda (h45d2@h45cb h45d3@h45cd h45d4@h45cf h45d5@h45d1) ((lambda (h45da@b* h45db@imp* h45dc@exp* h45dd@name*) (call-with-values (lambda () (h2f5b@parse-library-name h45dd@name*)) (lambda (h45e6@h45e3 h45e7@h45e5) ((lambda (h45ea@ver h45eb@name) (begin (h45c7@verify-name h45eb@name) (call-with-values (lambda () (h2f6f@library-body-expander h45eb@name h45dc@exp* h45db@imp* h45da@b* '#f)) (lambda (h45fc@h45ef h45fd@h45f1 h45fe@h45f3 h45ff@h45f5 h4600@h45f7 h4601@h45f9 h4602@h45fb) ((lambda (h460a@export-env h460b@export-subst h460c@visit-code h460d@invoke-code h460e@visit-req* h460f@invoke-req* h4610@imp*) (values h45eb@name h45ea@ver h4610@imp* h460f@invoke-req* h460e@visit-req* h460d@invoke-code h460c@visit-code h460b@export-subst h460a@export-env)) h4602@h45fb h4601@h45f9 h4600@h45f7 h45ff@h45f5 h45fe@h45f3 h45fd@h45f1 h45fc@h45ef))))) h45e7@h45e5 h45e6@h45e3)))) h45d5@h45d1 h45d4@h45cf h45d3@h45cd h45d2@h45cb))))) (set! h2f73@parse-top-level-program (lambda (h4618@e*) ((lambda (h461a@t) ((lambda (h461c@ls/false) (if (and h461c@ls/false (apply (lambda (h461e@import h461f@imp* h4620@b*) (eq? (h2fe9@syntax->datum h461e@import) 'import)) h461c@ls/false)) (apply (lambda (h4624@import h4625@imp* h4626@b*) (values h4625@imp* h4626@b*)) h461c@ls/false) ((lambda (h462a@t) ((lambda (h462c@ls/false) (if (and h462c@ls/false (apply (lambda (h462e@import h462f@x h4630@y) (eq? (h2fe9@syntax->datum h462e@import) 'import)) h462c@ls/false)) (apply (lambda (h4634@import h4635@x h4636@y) (h2fe3@syntax-violation 'expander '"invalid syntax of top-level program" (h2ce9@syntax-car h4618@e*))) h462c@ls/false) ((lambda (h463a@t) ((lambda (h463c@ls/false) (if h463c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) h463c@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h463a@t))) (h2efa@syntax-dispatch h463a@t '_))) h462a@t))) (h2efa@syntax-dispatch h462a@t '((any . any) . any)))) h461a@t))) (h2efa@syntax-dispatch h461a@t '((any . each-any) . each-any)))) h4618@e*))) (set! h2f75@top-level-expander (lambda (h463e@e*) (call-with-values (lambda () (h2f73@parse-top-level-program h463e@e*)) (lambda (h4644@h4641 h4645@h4643) ((lambda (h4648@b* h4649@imp*) (call-with-values (lambda () (h2f6f@library-body-expander '() '() h4649@imp* h4648@b* '#t)) (lambda (h465a@h464d h465b@h464f h465c@h4651 h465d@h4653 h465e@h4655 h465f@h4657 h4660@h4659) ((lambda (h4668@export-env h4669@export-subst h466a@visit-code h466b@invoke-code h466c@visit-req* h466d@invoke-req* h466e@imp*) (values h466d@invoke-req* h466b@invoke-code)) h4660@h4659 h465f@h4657 h465e@h4655 h465d@h4653 h465c@h4651 h465b@h464f h465a@h464d)))) h4645@h4643 h4644@h4641))))) (set! h2f7b@h2f76 (make-record-type-descriptor 'env '#f 'h2f79 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! h2f7d@h2f78 '#f) (set! h2f7f@h2f77 (make-record-constructor-descriptor h2f7b@h2f76 '#f h2f7d@h2f78)) (set! h2f82@env? (record-predicate h2f7b@h2f76)) (set! h2f84@make-env (record-constructor h2f7f@h2f77)) (set! h2f86@env-names (record-accessor h2f7b@h2f76 '0)) (set! h2f88@env-labels (record-accessor h2f7b@h2f76 '1)) (set! h2f8a@env-itc (record-accessor h2f7b@h2f76 '2)) (set! h2f8c@set-env-names! (record-mutator h2f7b@h2f76 '0)) (set! h2f8e@set-env-labels! (record-mutator h2f7b@h2f76 '1)) (set! h2f90@set-env-itc! (record-mutator h2f7b@h2f76 '2)) (set! h2f92@rp (h2896@h27bd@make-record-printer 'env (lambda (h4676@x h4677@p h4678@wr) (display '"#<environment>" h4677@p)))) (set! h2f98@h2f93 (make-record-type-descriptor 'interaction-env '#f 'h2f96 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! h2f9a@h2f95 '#f) (set! h2f9c@h2f94 (make-record-constructor-descriptor h2f98@h2f93 '#f h2f9a@h2f95)) (set! h2f9f@interaction-env? (record-predicate h2f98@h2f93)) (set! h2fa1@make-interaction-env (record-constructor h2f9c@h2f94)) (set! h2fa3@interaction-env-rib (record-accessor h2f98@h2f93 '0)) (set! h2fa5@interaction-env-r (record-accessor h2f98@h2f93 '1)) (set! h2fa7@interaction-env-locs (record-accessor h2f98@h2f93 '2)) (set! h2fa9@set-interaction-env-rib! (record-mutator h2f98@h2f93 '0)) (set! h2fab@set-interaction-env-r! (record-mutator h2f98@h2f93 '1)) (set! h2fad@set-interaction-env-locs! (record-mutator h2f98@h2f93 '2)) (set! h2faf@rp (h2896@h27bd@make-record-printer 'interaction-env (lambda (h467c@x h467d@p h467e@wr) (display '"#<environment>" h467d@p)))) (set! h2fb1@interaction-environment-symbols (lambda () (h2fb9@environment-symbols (h2fef@interaction-environment)))) (set! h2fb3@environment-bindings (lambda (h4682@e) (vector->list (vector-map (lambda (h4684@name h4685@label) (h2fb5@parse-binding (cons h4684@name (h2b12@h29b2@imported-label->binding h4685@label)))) (h2f86@env-names h4682@e) (h2f88@env-labels h4682@e))))) (set! h2fb5@parse-binding (lambda (h4688@b) (cons (car h4688@b) ((lambda (h468a@t) (if (memv h468a@t '(core-prim global)) 'procedure (if (memv h468a@t '(core-macro macro global-macro)) 'syntax (if (memv h468a@t '($core-rtd)) 'record (if (eq? (car h4688@b) (cadr h4688@b)) 'syntax 'unknown))))) (cadr h4688@b))))) (set! h2fb7@environment? (lambda (h468c@x) (or (h2f82@env? h468c@x) (h2f9f@interaction-env? h468c@x)))) (set! h2fb9@environment-symbols (lambda (h468e@x) (if (h2f82@env? h468e@x) (vector->list (h2f86@env-names h468e@x)) (if (h2f9f@interaction-env? h468e@x) (map values (h2c8a@rib-sym* (h2fa3@interaction-env-rib h468e@x))) (assertion-violation 'environment-symbols '"not an environment" h468e@x))))) (set! h2fbb@environment (lambda h4690@imp* ((lambda (h4692@itc) ((lambda (h4698@h4695 h4699@h4697) ((lambda (h469c@swap) (dynamic-wind h469c@swap (lambda () (call-with-values (lambda () (h2f5f@parse-import-spec* h4690@imp*)) (lambda (h46a2@h469f h46a3@h46a1) ((lambda (h46a6@subst-labels h46a7@subst-names) (h2f84@make-env h46a7@subst-names h46a6@subst-labels h4692@itc)) h46a3@h46a1 h46a2@h469f)))) h469c@swap)) (lambda () ((lambda (h46aa@t) (begin (h4698@h4695 h4699@h4697) (set! h4699@h4697 h46aa@t))) (h4698@h4695))))) h2f69@imp-collector h4692@itc)) (h2f63@make-collector)))) (set! h2fbd@null-environment (lambda (h46ac@n) (begin (if (not (eqv? h46ac@n '5)) (assertion-violation 'null-environment '"not 5" h46ac@n) (void)) (h2fbb@environment '(psyntax null-environment-5))))) (set! h2fbf@scheme-report-environment (lambda (h46ae@n) (begin (if (not (eqv? h46ae@n '5)) (assertion-violation 'scheme-report-environment '"not 5" h46ae@n) (void)) (h2fbb@environment '(psyntax scheme-report-environment-5))))) (set! h2fc1@expand (lambda (h46b0@x h46b1@env) (if (h2f82@env? h46b1@env) ((lambda (h46b4@rib) ((lambda (h46b6@x h46b7@itc h46b8@rtc h46b9@vtc) ((lambda (h46be@x) (begin (h2ca6@seal-rib! h46b4@rib) (values h46be@x (h46b8@rtc)))) ((lambda (h46d0@h46c1 h46d1@h46c3 h46d2@h46c5 h46d3@h46c7 h46d4@h46c9 h46d5@h46cb h46d6@h46cd h46d7@h46cf) ((lambda (h46e0@swap) (dynamic-wind h46e0@swap (lambda () (h2f1c@chi-expr h46b6@x '() '())) h46e0@swap)) (lambda () (begin ((lambda (h46e2@t) (begin (h46d0@h46c1 h46d4@h46c9) (set! h46d4@h46c9 h46e2@t))) (h46d0@h46c1)) ((lambda (h46e4@t) (begin (h46d1@h46c3 h46d5@h46cb) (set! h46d5@h46cb h46e4@t))) (h46d1@h46c3)) ((lambda (h46e6@t) (begin (h46d2@h46c5 h46d6@h46cd) (set! h46d6@h46cd h46e6@t))) (h46d2@h46c5)) ((lambda (h46e8@t) (begin (h46d3@h46c7 h46d7@h46cf) (set! h46d7@h46cf h46e8@t))) (h46d3@h46c7)))))) h2ff1@top-level-context h2f65@inv-collector h2f67@vis-collector h2f69@imp-collector '#f h46b8@rtc h46b9@vtc h46b7@itc))) (h2cb9@make-stx h46b0@x h2c6b@top-mark* (list h46b4@rib) '()) (h2f8a@env-itc h46b1@env) (h2f63@make-collector) (h2f63@make-collector))) (h2f61@make-top-rib (h2f86@env-names h46b1@env) (h2f88@env-labels h46b1@env))) (if (h2f9f@interaction-env? h46b1@env) ((lambda (h46ea@rib h46eb@r h46ec@rtc) ((lambda (h46f0@x) (call-with-values (lambda () ((lambda (h4706@h46f7 h4707@h46f9 h4708@h46fb h4709@h46fd h470a@h46ff h470b@h4701 h470c@h4703 h470d@h4705) ((lambda (h4716@swap) (dynamic-wind h4716@swap (lambda () (h2f6d@chi-interaction-expr h46f0@x h46ea@rib h46eb@r)) h4716@swap)) (lambda () (begin ((lambda (h4718@t) (begin (h4706@h46f7 h470a@h46ff) (set! h470a@h46ff h4718@t))) (h4706@h46f7)) ((lambda (h471a@t) (begin (h4707@h46f9 h470b@h4701) (set! h470b@h4701 h471a@t))) (h4707@h46f9)) ((lambda (h471c@t) (begin (h4708@h46fb h470c@h4703) (set! h470c@h4703 h471c@t))) (h4708@h46fb)) ((lambda (h471e@t) (begin (h4709@h46fd h470d@h4705) (set! h470d@h4705 h471e@t))) (h4709@h46fd)))))) h2ff1@top-level-context h2f65@inv-collector h2f67@vis-collector h2f69@imp-collector h46b1@env h46ec@rtc (h2f63@make-collector) (h2f63@make-collector))) (lambda (h4720@h46f3 h4721@h46f5) ((lambda (h4724@r^ h4725@e) (begin (h2fab@set-interaction-env-r! h46b1@env h4724@r^) (values h4725@e (h46ec@rtc)))) h4721@h46f5 h4720@h46f3)))) (h2cb9@make-stx h46b0@x h2c6b@top-mark* (list h46ea@rib) '()))) (h2fa3@interaction-env-rib h46b1@env) (h2fa5@interaction-env-r h46b1@env) (h2f63@make-collector)) (assertion-violation 'expand '"not an environment" h46b1@env))))) (set! h2fc3@eval (lambda (h4728@x h4729@env) (begin (if (not (h2fb7@environment? h4729@env)) (error 'eval '"not an environment" h4729@env) (void)) (call-with-values (lambda () (h2fc1@expand h4728@x h4729@env)) (lambda (h4730@h472d h4731@h472f) ((lambda (h4734@invoke-req* h4735@x) (begin (for-each h2b13@h29b4@invoke-library h4734@invoke-req*) (eval-core (h28ed@h28a5@expanded->core h4735@x)))) h4731@h472f h4730@h472d)))))) (set! h2fc5@library-expander (lambda h47a6 ((lambda (h47a7) (if (= h47a7 '3) (apply (lambda (h4738@x h4739@filename h473a@verify-name) ((lambda (h473f@build-visit-code h4741@visit!) (begin (set! h473f@build-visit-code (lambda (h4794@macro*) (if (null? h4794@macro*) (h2c4f@h2bbf@build-void) (h2c4e@h2bbd@build-sequence '#f (map (lambda (h4796@x) ((lambda (h4798@loc h4799@src) (list 'set! h4798@loc h4799@src)) (car h4796@x) (cddr h4796@x))) h4794@macro*))))) (set! h4741@visit! (lambda (h478c@macro*) (for-each (lambda (h478e@x) ((lambda (h4790@loc h4791@proc) (set-symbol-value! h4790@loc h4791@proc)) (car h478e@x) (cadr h478e@x))) h478c@macro*))) (call-with-values (lambda () (h2f71@core-library-expander h4738@x h473a@verify-name)) (lambda (h4754@h4743 h4755@h4745 h4756@h4747 h4757@h4749 h4758@h474b h4759@h474d h475a@h474f h475b@h4751 h475c@h4753) ((lambda (h4766@export-env h4767@export-subst h4768@macro* h4769@invoke-code h476a@vis* h476b@inv* h476c@imp* h476d@ver h476e@name) ((lambda (h4778@id h4779@name h477a@ver h477b@imp* h477c@vis* h477d@inv* h477e@visit-proc h477f@invoke-proc h4780@visit-code h4781@invoke-code) (begin (h2b11@h29b0@install-library h4778@id h4779@name h477a@ver h477b@imp* h477c@vis* h477d@inv* h4767@export-subst h4766@export-env h477e@visit-proc h477f@invoke-proc h4780@visit-code h4781@invoke-code '#t h4739@filename) (values h4778@id h4779@name h477a@ver h477b@imp* h477c@vis* h477d@inv* h4781@invoke-code h4780@visit-code h4767@export-subst h4766@export-env))) (gensym) h476e@name h476d@ver (map h2b17@h29bc@library-spec h476c@imp*) (map h2b17@h29bc@library-spec h476a@vis*) (map h2b17@h29bc@library-spec h476b@inv*) (lambda () (h4741@visit! h4768@macro*)) (lambda () (eval-core (h28ed@h28a5@expanded->core h4769@invoke-code))) (h473f@build-visit-code h4768@macro*) h4769@invoke-code)) h475c@h4753 h475b@h4751 h475a@h474f h4759@h474d h4758@h474b h4757@h4749 h4756@h4747 h4755@h4745 h4754@h4743))))) '#f '#f)) h47a6) (if (= h47a7 '2) (apply (lambda (h479c@x h479d@filename) (h2fc5@library-expander h479c@x h479d@filename (lambda (h47a0@x) (values)))) h47a6) (if (= h47a7 '1) (apply (lambda (h47a2@x) (h2fc5@library-expander h47a2@x '#f (lambda (h47a4@x) (values)))) h47a6) (error 'apply '"invalid arg count"))))) (length h47a6)))) (set! h2fc7@boot-library-expand (lambda (h47a8@x) (call-with-values (lambda () (h2fc5@library-expander h47a8@x)) (lambda (h47be@h47ab h47bf@h47ad h47c0@h47af h47c1@h47b1 h47c2@h47b3 h47c3@h47b5 h47c4@h47b7 h47c5@h47b9 h47c6@h47bb h47c7@h47bd) ((lambda (h47d2@export-env h47d3@export-subst h47d4@visit-code h47d5@invoke-code h47d6@inv* h47d7@vis* h47d8@imp* h47d9@ver h47da@name h47db@id) (values h47da@name h47d5@invoke-code h47d3@export-subst h47d2@export-env)) h47c7@h47bd h47c6@h47bb h47c5@h47b9 h47c4@h47b7 h47c3@h47b5 h47c2@h47b3 h47c1@h47b1 h47c0@h47af h47bf@h47ad h47be@h47ab))))) (set! h2fc9@rev-map-append (lambda (h47e6@f h47e7@ls h47e8@ac) (if (null? h47e7@ls) h47e8@ac (h2fc9@rev-map-append h47e6@f (cdr h47e7@ls) (cons (h47e6@f (car h47e7@ls)) h47e8@ac))))) (set! h2fcb@build-exports (lambda (h47ec@lex*+loc* h47ed@init*) (h2c4e@h2bbd@build-sequence '#f (cons (h2c4f@h2bbf@build-void) (h2fc9@rev-map-append (lambda (h47f0@x) (list 'set! (cdr h47f0@x) (car h47f0@x))) h47ec@lex*+loc* h47ed@init*))))) (set! h2fcd@make-export-subst (lambda (h47f2@name* h47f3@id*) (map (lambda (h47f6@name h47f7@id) ((lambda (h47fa@label) (begin (if (not h47fa@label) (h2fe3@syntax-violation '#f '"cannot export unbound identifier" h47f7@id) (void)) (cons h47f6@name h47fa@label))) (h2d09@id->label h47f7@id))) h47f2@name* h47f3@id*))) (set! h2fcf@make-export-env/macros (lambda (h47fc@lex* h47fd@loc* h47fe@r) ((lambda (h4803@lookup) (begin (set! h4803@lookup (lambda (h4820@x) ((letrec ((h4822@f (lambda (h4824@x h4825@lex* h4826@loc*) (if (pair? h4825@lex*) (if (eq? h4824@x (car h4825@lex*)) (car h4826@loc*) (h4822@f h4824@x (cdr h4825@lex*) (cdr h4826@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) h4822@f) h4820@x h47fc@lex* h47fd@loc*))) ((letrec ((h4804@f (lambda (h4806@r h4807@env h4808@global* h4809@macro*) (if (null? h4806@r) (values h4807@env h4808@global* h4809@macro*) ((lambda (h480e@x) ((lambda (h4810@label h4811@b) ((lambda (h4814@t) (if (memv h4814@t '(lexical)) ((lambda (h4816@v) ((lambda (h4818@loc h4819@type) (h4804@f (cdr h4806@r) (cons (cons* h4810@label h4819@type h4818@loc) h4807@env) (cons (cons (h2e86@lexical-var h4816@v) h4818@loc) h4808@global*) h4809@macro*)) (h4803@lookup (h2e86@lexical-var h4816@v)) (if (h2e88@lexical-mutable? h4816@v) 'mutable 'global))) (h2d13@binding-value h4811@b)) (if (memv h4814@t '(local-macro)) ((lambda (h481c@loc) (h4804@f (cdr h4806@r) (cons (cons* h4810@label 'global-macro h481c@loc) h4807@env) h4808@global* (cons (cons h481c@loc (h2d13@binding-value h4811@b)) h4809@macro*))) (gensym)) (if (memv h4814@t '(local-macro!)) ((lambda (h481e@loc) (h4804@f (cdr h4806@r) (cons (cons* h4810@label 'global-macro! h481e@loc) h4807@env) h4808@global* (cons (cons h481e@loc (h2d13@binding-value h4811@b)) h4809@macro*))) (gensym)) (if (memv h4814@t '($rtd $module)) (h4804@f (cdr h4806@r) (cons h480e@x h4807@env) h4808@global* h4809@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (h2d11@binding-type h4811@b) (h2d13@binding-value h4811@b))))))) (h2d11@binding-type h4811@b))) (car h480e@x) (cdr h480e@x))) (car h4806@r)))))) h4804@f) h47fe@r '() '() '()))) '#f))) (set! h2fd1@generate-temporaries (lambda (h482a@ls) ((lambda (h482c@t) ((lambda (h482e@ls/false) (if h482e@ls/false (apply (lambda (h4830@ls) (map (lambda (h4832@x) (h2cb9@make-stx ((lambda (h4834@x) (if (or (symbol? h4834@x) (string? h4834@x)) (gensym h4834@x) (gensym 't))) (h2fe9@syntax->datum h4832@x)) h2c6b@top-mark* '() '())) h4830@ls)) h482e@ls/false) ((lambda (h4836@t) ((lambda (h4838@ls/false) (if h4838@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) h4838@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h4836@t))) (h2efa@syntax-dispatch h4836@t '_))) h482c@t))) (h2efa@syntax-dispatch h482c@t 'each-any))) h482a@ls))) (set! h2fd3@free-identifier=? (lambda (h483a@x h483b@y) (if (h2cef@id? h483a@x) (if (h2cef@id? h483b@y) (h2cf7@free-id=? h483a@x h483b@y) (assertion-violation 'free-identifier=? '"not an identifier" h483b@y)) (assertion-violation 'free-identifier=? '"not an identifier" h483a@x)))) (set! h2fd5@bound-identifier=? (lambda (h483e@x h483f@y) (if (h2cef@id? h483e@x) (if (h2cef@id? h483f@y) (h2cf5@bound-id=? h483e@x h483f@y) (assertion-violation 'bound-identifier=? '"not an identifier" h483f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" h483e@x)))) (set! h2fd7@make-source-condition (lambda (h4842@x) ((lambda (h484c@h4847 h484e@h4849 h4850@h4848 h4853@h4846 h4855@make-source-condition h4857@h4844 h4859@h4845 h485b@source-condition? h485d@source-filename h485f@source-character) (begin (set! h484c@h4847 (make-record-type-descriptor '&source-information h4caa@h49f1@&condition-rtd 'h484a '#f '#f '#((immutable file-name) (immutable character)))) (set! h484e@h4849 '#f) (set! h4850@h4848 (make-record-constructor-descriptor h484c@h4847 h4cab@h49f3@&condition-rcd h484e@h4849)) (set! h4853@h4846 (record-predicate h484c@h4847)) (set! h4855@make-source-condition (record-constructor h4850@h4848)) (set! h4857@h4844 (record-accessor h484c@h4847 '0)) (set! h4859@h4845 (record-accessor h484c@h4847 '1)) (set! h485b@source-condition? (condition-predicate h484c@h4847)) (set! h485d@source-filename (condition-accessor h484c@h4847 h4857@h4844)) (set! h485f@source-character (condition-accessor h484c@h4847 h4859@h4845)) (if (pair? h4842@x) (h4855@make-source-condition (car h4842@x) (cdr h4842@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! h2fd9@extract-position-condition (lambda (h4860@x) (h2fd7@make-source-condition (h2fdb@expression-position h4860@x)))) (set! h2fdb@expression-position (lambda (h4862@x) (and (h2cb7@stx? h4862@x) ((lambda (h4864@x) (and (h288e@h27ad@annotation? h4864@x) (h288f@h27af@annotation-source h4864@x))) (h2cbb@stx-expr h4862@x))))) (set! h2fdd@assertion-error (lambda (h4866@expr h4867@pos) (raise (condition (h4cda@h4ab5@make-assertion-violation) (h4cec@h4ae7@make-who-condition 'assert) (h4cb0@h4a48@make-message-condition '"assertion failed") (h4ce2@h4acc@make-irritants-condition (list h4866@expr)) (h2fd7@make-source-condition h4867@pos))))) (set! h2fdf@syntax-error (lambda (h486a@x . h486c@args) (begin (if (not (for-all string? h486c@args)) (assertion-violation 'syntax-error '"invalid argument" h486c@args) (void)) (raise (condition (h4cb0@h4a48@make-message-condition (if (null? h486c@args) '"invalid syntax" (apply string-append h486c@args))) (h4d0e@h4b43@make-syntax-violation (h2fe9@syntax->datum h486a@x) '#f) (h2fd9@extract-position-condition h486a@x)))))) (set! h2fe1@syntax-violation* (lambda (h486e@who h486f@msg h4870@form h4871@condition-object) (begin (if (not (string? h486f@msg)) (assertion-violation 'syntax-violation '"message is not a string" h486f@msg) (void)) ((lambda (h4876@who) (raise (condition (if h4876@who (h4cec@h4ae7@make-who-condition h4876@who) (condition)) (h4cb0@h4a48@make-message-condition h486f@msg) h4871@condition-object (h2fd9@extract-position-condition h4870@form)))) (if (or (string? h486e@who) (symbol? h486e@who)) h486e@who (if (not h486e@who) ((lambda (h4878@t) ((lambda (h487a@ls/false) (if (and h487a@ls/false (apply (lambda (h487c@id) (h2cef@id? h487c@id)) h487a@ls/false)) (apply (lambda (h487e@id) (h2fe9@syntax->datum h487e@id)) h487a@ls/false) ((lambda (h4880@t) ((lambda (h4882@ls/false) (if (and h4882@ls/false (apply (lambda (h4884@id h4885@rest) (h2cef@id? h4884@id)) h4882@ls/false)) (apply (lambda (h4888@id h4889@rest) (h2fe9@syntax->datum h4888@id)) h4882@ls/false) ((lambda (h488c@t) ((lambda (h488e@ls/false) (if h488e@ls/false (apply (lambda () '#f) h488e@ls/false) (h2fe3@syntax-violation '#f '"invalid syntax" h488c@t))) (h2efa@syntax-dispatch h488c@t '_))) h4880@t))) (h2efa@syntax-dispatch h4880@t '(any . any)))) h4878@t))) (h2efa@syntax-dispatch h4878@t 'any))) h4870@form) (assertion-violation 'syntax-violation '"invalid who argument" h486e@who))))))) (set! h2fe3@syntax-violation (lambda h489e ((lambda (h489f) (if (= h489f '3) (apply (lambda (h4890@who h4891@msg h4892@form) (h2fe3@syntax-violation h4890@who h4891@msg h4892@form '#f)) h489e) (if (= h489f '4) (apply (lambda (h4896@who h4897@msg h4898@form h4899@subform) (h2fe1@syntax-violation* h4896@who h4897@msg h4898@form (h4d0e@h4b43@make-syntax-violation (h2fe9@syntax->datum h4898@form) (h2fe9@syntax->datum h4899@subform)))) h489e) (error 'apply '"invalid arg count")))) (length h489e)))) (set! h2fe5@identifier? (lambda (h48a0@x) (h2cef@id? h48a0@x))) (set! h2fe7@datum->syntax (lambda (h48a2@id h48a3@datum) (if (h2cef@id? h48a2@id) (h2ccd@datum->stx h48a2@id h48a3@datum) (assertion-violation 'datum->syntax '"not an identifier" h48a2@id)))) (set! h2fe9@syntax->datum (lambda (h48a6@x) (h2d05@stx->datum h48a6@x))) (set! h2feb@compile-r6rs-top-level (lambda (h48a8@x*) (call-with-values (lambda () (h2f75@top-level-expander h48a8@x*)) (lambda (h48ae@h48ab h48af@h48ad) ((lambda (h48b2@invoke-code h48b3@lib*) (lambda () (begin (for-each h2b13@h29b4@invoke-library h48b3@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (h28ed@h28a5@expanded->core h48b2@invoke-code)) (void)) (eval-core (h28ed@h28a5@expanded->core h48b2@invoke-code))))) h48af@h48ad h48ae@h48ab))))) (set! h2fed@pre-compile-r6rs-top-level (lambda (h48b6@x*) (call-with-values (lambda () (h2f75@top-level-expander h48b6@x*)) (lambda (h48bc@h48b9 h48bd@h48bb) ((lambda (h48c0@invoke-code h48c1@lib*) (begin (for-each h2b13@h29b4@invoke-library h48c1@lib*) (h2897@h27bf@compile-core (h28ed@h28a5@expanded->core h48c0@invoke-code)))) h48bd@h48bb h48bc@h48b9))))) (set! h2fef@interaction-environment ((lambda (h48c4@the-env) (lambda () (or h48c4@the-env ((lambda (h48c6@lib h48c7@rib) (begin ((lambda (h48ca@subst) (begin (h2c94@set-rib-sym*! h48c7@rib (map car h48ca@subst)) (h2c96@set-rib-mark**! h48c7@rib (map (lambda (h48cc@x) h2c6b@top-mark*) h48ca@subst)) (h2c98@set-rib-label*! h48c7@rib (map cdr h48ca@subst)))) (h2ae8@h295e@library-subst h48c6@lib)) ((lambda (h48ce@env) (begin (set! h48c4@the-env h48ce@env) h48ce@env)) (h2fa1@make-interaction-env h48c7@rib '() '())))) (h2b0c@h29a6@find-library-by-name '(mosh interaction)) (h2c9e@make-empty-rib))))) '#f)) (set! h2ff1@top-level-context (h2899@h27c3@make-parameter '#f)) (begin (set! h49dc@h2ff1@top-level-context h2ff1@top-level-context) (set! h49db@h2fef@interaction-environment h2fef@interaction-environment) (set! h49da@h2fed@pre-compile-r6rs-top-level h2fed@pre-compile-r6rs-top-level) (set! h49d9@h2feb@compile-r6rs-top-level h2feb@compile-r6rs-top-level) (set! h49d8@h2fe9@syntax->datum h2fe9@syntax->datum) (set! h49d7@h2fe7@datum->syntax h2fe7@datum->syntax) (set! h49d6@h2fe5@identifier? h2fe5@identifier?) (set! h49d5@h2fe3@syntax-violation h2fe3@syntax-violation) (set! h49d4@h2fe1@syntax-violation* h2fe1@syntax-violation*) (set! h49d3@h2fdf@syntax-error h2fdf@syntax-error) (set! h49d2@h2fdd@assertion-error h2fdd@assertion-error) (set! h49d1@h2fdb@expression-position h2fdb@expression-position) (set! h49d0@h2fd9@extract-position-condition h2fd9@extract-position-condition) (set! h49cf@h2fd7@make-source-condition h2fd7@make-source-condition) (set! h49ce@h2fd5@bound-identifier=? h2fd5@bound-identifier=?) (set! h49cd@h2fd3@free-identifier=? h2fd3@free-identifier=?) (set! h49cc@h2fd1@generate-temporaries h2fd1@generate-temporaries) (set! h49cb@h2fcf@make-export-env/macros h2fcf@make-export-env/macros) (set! h49ca@h2fcd@make-export-subst h2fcd@make-export-subst) (set! h49c9@h2fcb@build-exports h2fcb@build-exports) (set! h49c8@h2fc9@rev-map-append h2fc9@rev-map-append) (set! h49c7@h2fc7@boot-library-expand h2fc7@boot-library-expand) (set! h49c6@h2fc5@library-expander h2fc5@library-expander) (set! h49c5@h2fc3@eval h2fc3@eval) (set! h49c4@h2fc1@expand h2fc1@expand) (set! h49c3@h2fbf@scheme-report-environment h2fbf@scheme-report-environment) (set! h49c2@h2fbd@null-environment h2fbd@null-environment) (set! h49c1@h2fbb@environment h2fbb@environment) (set! h49c0@h2fb9@environment-symbols h2fb9@environment-symbols) (set! h49bf@h2fb7@environment? h2fb7@environment?) (set! h49be@h2fb5@parse-binding h2fb5@parse-binding) (set! h49bd@h2fb3@environment-bindings h2fb3@environment-bindings) (set! h49bc@h2fb1@interaction-environment-symbols h2fb1@interaction-environment-symbols) (set! h49bb@h2faf@rp h2faf@rp) (set! h49ba@h2fad@set-interaction-env-locs! h2fad@set-interaction-env-locs!) (set! h49b9@h2fab@set-interaction-env-r! h2fab@set-interaction-env-r!) (set! h49b8@h2fa9@set-interaction-env-rib! h2fa9@set-interaction-env-rib!) (set! h49b7@h2fa7@interaction-env-locs h2fa7@interaction-env-locs) (set! h49b6@h2fa5@interaction-env-r h2fa5@interaction-env-r) (set! h49b5@h2fa3@interaction-env-rib h2fa3@interaction-env-rib) (set! h49b4@h2fa1@make-interaction-env h2fa1@make-interaction-env) (set! h49b3@h2f9f@interaction-env? h2f9f@interaction-env?) (set! h49b2@h2f9c@h2f94 h2f9c@h2f94) (set! h49b1@h2f9a@h2f95 h2f9a@h2f95) (set! h49b0@h2f98@h2f93 h2f98@h2f93) (set! h49af@h2f92@rp h2f92@rp) (set! h49ae@h2f90@set-env-itc! h2f90@set-env-itc!) (set! h49ad@h2f8e@set-env-labels! h2f8e@set-env-labels!) (set! h49ac@h2f8c@set-env-names! h2f8c@set-env-names!) (set! h49ab@h2f8a@env-itc h2f8a@env-itc) (set! h49aa@h2f88@env-labels h2f88@env-labels) (set! h49a9@h2f86@env-names h2f86@env-names) (set! h49a8@h2f84@make-env h2f84@make-env) (set! h49a7@h2f82@env? h2f82@env?) (set! h49a6@h2f7f@h2f77 h2f7f@h2f77) (set! h49a5@h2f7d@h2f78 h2f7d@h2f78) (set! h49a4@h2f7b@h2f76 h2f7b@h2f76) (set! h49a3@h2f75@top-level-expander h2f75@top-level-expander) (set! h49a2@h2f73@parse-top-level-program h2f73@parse-top-level-program) (set! h49a1@h2f71@core-library-expander h2f71@core-library-expander) (set! h49a0@h2f6f@library-body-expander h2f6f@library-body-expander) (set! h499f@h2f6d@chi-interaction-expr h2f6d@chi-interaction-expr) (set! h499e@h2f6b@chi-library-internal h2f6b@chi-library-internal) (set! h499d@h2f69@imp-collector h2f69@imp-collector) (set! h499c@h2f67@vis-collector h2f67@vis-collector) (set! h499b@h2f65@inv-collector h2f65@inv-collector) (set! h499a@h2f63@make-collector h2f63@make-collector) (set! h4999@h2f61@make-top-rib h2f61@make-top-rib) (set! h4998@h2f5f@parse-import-spec* h2f5f@parse-import-spec*) (set! h4997@h2f5d@parse-library h2f5d@parse-library) (set! h4996@h2f5b@parse-library-name h2f5b@parse-library-name) (set! h4995@h2f59@parse-exports h2f59@parse-exports) (set! h4994@h2f57@expand-transformer h2f57@expand-transformer) (set! h4993@h2f55@chi-body* h2f55@chi-body*) (set! h4992@h2f53@chi-internal-module h2f53@chi-internal-module) (set! h4991@h2f51@module-interface-exp-id* h2f51@module-interface-exp-id*) (set! h4990@h2f4f@set-module-interface-exp-lab-vec! h2f4f@set-module-interface-exp-lab-vec!) (set! h498f@h2f4d@set-module-interface-exp-id-vec! h2f4d@set-module-interface-exp-id-vec!) (set! h498e@h2f4b@set-module-interface-first-mark! h2f4b@set-module-interface-first-mark!) (set! h498d@h2f49@module-interface-exp-lab-vec h2f49@module-interface-exp-lab-vec) (set! h498c@h2f47@module-interface-exp-id-vec h2f47@module-interface-exp-id-vec) (set! h498b@h2f45@module-interface-first-mark h2f45@module-interface-first-mark) (set! h498a@h2f43@make-module-interface h2f43@make-module-interface) (set! h4989@h2f41@module-interface? h2f41@module-interface?) (set! h4988@h2f3e@h2f36 h2f3e@h2f36) (set! h4987@h2f3c@h2f37 h2f3c@h2f37) (set! h4986@h2f3a@h2f35 h2f3a@h2f35) (set! h4985@h2f34@parse-module h2f34@parse-module) (set! h4984@h2f32@chi-internal h2f32@chi-internal) (set! h4983@h2f30@find-dups h2f30@find-dups) (set! h4982@h2f2e@find-bound=? h2f2e@find-bound=?) (set! h4981@h2f2c@chi-rhs* h2f2c@chi-rhs*) (set! h4980@h2f2a@expand-interaction-rhs*/init* h2f2a@expand-interaction-rhs*/init*) (set! h497f@h2f28@chi-rhs h2f28@chi-rhs) (set! h497e@h2f26@chi-defun h2f26@chi-defun) (set! h497d@h2f24@chi-lambda-clause* h2f24@chi-lambda-clause*) (set! h497c@h2f22@chi-lambda-clause h2f22@chi-lambda-clause) (set! h497b@h2f20@verify-formals h2f20@verify-formals) (set! h497a@h2f1e@chi-set! h2f1e@chi-set!) (set! h4979@h2f1c@chi-expr h2f1c@chi-expr) (set! h4978@h2f1a@chi-application h2f1a@chi-application) (set! h4977@h2f18@chi-expr* h2f18@chi-expr*) (set! h4976@h2f16@chi-global-macro h2f16@chi-global-macro) (set! h4975@h2f14@chi-local-macro h2f14@chi-local-macro) (set! h4974@h2f12@chi-macro h2f12@chi-macro) (set! h4973@h2f10@do-macro-call h2f10@do-macro-call) (set! h4972@h2f0e@local-macro-transformer h2f0e@local-macro-transformer) (set! h4971@h2f0c@macro-transformer h2f0c@macro-transformer) (set! h4970@h2f0a@symbol-macro h2f0a@symbol-macro) (set! h496f@h2f08@core-macro-transformer h2f08@core-macro-transformer) (set! h496e@h2f06@syntax-transformer h2f06@syntax-transformer) (set! h496d@h2f04@ellipsis-map h2f04@ellipsis-map) (set! h496c@h2f02@syntax-case-transformer h2f02@syntax-case-transformer) (set! h496b@h2f00@verify-literals h2f00@verify-literals) (set! h496a@h2efe@underscore? h2efe@underscore?) (set! h4969@h2efc@ellipsis? h2efc@ellipsis?) (set! h4968@h2efa@syntax-dispatch h2efa@syntax-dispatch) (set! h4967@h2ef8@convert-pattern h2ef8@convert-pattern) (set! h4966@h2ef6@foreign-call-transformer h2ef6@foreign-call-transformer) (set! h4965@h2ef4@parameterize-macro h2ef4@parameterize-macro) (set! h4964@h2ef2@incorrect-usage-macro h2ef2@incorrect-usage-macro) (set! h4963@h2ef0@define-condition-type-macro h2ef0@define-condition-type-macro) (set! h4962@h2eee@define-record-type-macro h2eee@define-record-type-macro) (set! h4961@h2eec@define-struct-macro h2eec@define-struct-macro) (set! h4960@h2eea@quasisyntax-macro h2eea@quasisyntax-macro) (set! h495f@h2ee8@quasiquote-macro h2ee8@quasiquote-macro) (set! h495e@h2ee6@syntax-rules-macro h2ee6@syntax-rules-macro) (set! h495d@h2ee4@include-into-macro h2ee4@include-into-macro) (set! h495c@h2ee2@include-macro h2ee2@include-macro) (set! h495b@h2ee0@do-include h2ee0@do-include) (set! h495a@h2ede@cond-macro h2ede@cond-macro) (set! h4959@h2edc@and-macro h2edc@and-macro) (set! h4958@h2eda@or-macro h2eda@or-macro) (set! h4957@h2ed8@let*-macro h2ed8@let*-macro) (set! h4956@h2ed6@do-macro h2ed6@do-macro) (set! h4955@h2ed4@identifier-syntax-macro h2ed4@identifier-syntax-macro) (set! h4954@h2ed2@endianness-macro h2ed2@endianness-macro) (set! h4953@h2ed0@assert-macro h2ed0@assert-macro) (set! h4952@h2ece@delay-macro h2ece@delay-macro) (set! h4951@h2ecc@time-macro h2ecc@time-macro) (set! h4950@h2eca@define-enumeration-macro h2eca@define-enumeration-macro) (set! h494f@h2ec8@guard-macro h2ec8@guard-macro) (set! h494e@h2ec6@trace-letrec-syntax-macro h2ec6@trace-letrec-syntax-macro) (set! h494d@h2ec4@trace-let-syntax-macro h2ec4@trace-let-syntax-macro) (set! h494c@h2ec2@trace-let/rec-syntax h2ec2@trace-let/rec-syntax) (set! h494b@h2ec0@trace-define-syntax-macro h2ec0@trace-define-syntax-macro) (set! h494a@h2ebe@trace-define-macro h2ebe@trace-define-macro) (set! h4949@h2ebc@trace-lambda-macro h2ebc@trace-lambda-macro) (set! h4948@h2eba@let*-values-macro h2eba@let*-values-macro) (set! h4947@h2eb8@let-values-macro h2eb8@let-values-macro) (set! h4946@h2eb6@let-macro h2eb6@let-macro) (set! h4945@h2eb4@invalid-fmls-error h2eb4@invalid-fmls-error) (set! h4944@h2eb2@with-syntax-macro h2eb2@with-syntax-macro) (set! h4943@h2eb0@bless h2eb0@bless) (set! h4942@h2eae@lambda-transformer h2eae@lambda-transformer) (set! h4941@h2eac@case-lambda-transformer h2eac@case-lambda-transformer) (set! h4940@h2eaa@quote-transformer h2eaa@quote-transformer) (set! h493f@h2ea8@case-macro h2ea8@case-macro) (set! h493e@h2ea6@or-transformer h2ea6@or-transformer) (set! h493d@h2ea4@and-transformer h2ea4@and-transformer) (set! h493c@h2ea2@if-transformer h2ea2@if-transformer) (set! h493b@h2ea0@unless-macro h2ea0@unless-macro) (set! h493a@h2e9e@when-macro h2e9e@when-macro) (set! h4939@h2e9c@record-constructor-descriptor-transformer h2e9c@record-constructor-descriptor-transformer) (set! h4938@h2e9a@record-type-descriptor-transformer h2e9a@record-type-descriptor-transformer) (set! h4937@h2e98@type-descriptor-transformer h2e98@type-descriptor-transformer) (set! h4936@h2e96@fluid-let-syntax-transformer h2e96@fluid-let-syntax-transformer) (set! h4935@h2e94@letrec*-transformer h2e94@letrec*-transformer) (set! h4934@h2e92@letrec-transformer h2e92@letrec-transformer) (set! h4933@h2e90@letrec-helper h2e90@letrec-helper) (set! h4932@h2e8e@add-lexicals h2e8e@add-lexicals) (set! h4931@h2e8c@add-lexical h2e8c@add-lexical) (set! h4930@h2e8a@set-lexical-mutable! h2e8a@set-lexical-mutable!) (set! h492f@h2e88@lexical-mutable? h2e88@lexical-mutable?) (set! h492e@h2e86@lexical-var h2e86@lexical-var) (set! h492d@h2e84@scheme-stx h2e84@scheme-stx) (set! h492c@h2e82@scheme-stx-hashtable h2e82@scheme-stx-hashtable) (set! h492b@h2e80@parse-define-syntax h2e80@parse-define-syntax) (set! h492a@h2e7e@parse-define h2e7e@parse-define) (set! h4929@h2d2d@make-eval-transformer h2d2d@make-eval-transformer) (set! h4928@h2d2b@variable-transformer-procedure h2d2b@variable-transformer-procedure) (set! h4927@h2d29@variable-transformer? h2d29@variable-transformer?) (set! h4926@h2d27@make-variable-transformer h2d27@make-variable-transformer) (set! h4925@h2d25@sanitize-binding h2d25@sanitize-binding) (set! h4924@h2d17@syntax-type h2d17@syntax-type) (set! h4923@h2d15@raise-unbound-error h2d15@raise-unbound-error) (set! h4922@h2d13@binding-value h2d13@binding-value) (set! h4921@h2d11@binding-type h2d11@binding-type) (set! h4920@h2d0f@make-binding h2d0f@make-binding) (set! h491f@h2d0d@label->binding h2d0d@label->binding) (set! h491e@h2d0b@id->real-label h2d0b@id->real-label) (set! h491d@h2d09@id->label h2d09@id->label) (set! h491c@h2d07@same-marks*? h2d07@same-marks*?) (set! h491b@h2d05@stx->datum h2d05@stx->datum) (set! h491a@h2d03@strip h2d03@strip) (set! h4919@h2d01@strip-annotations h2d01@strip-annotations) (set! h4918@h2cff@self-evaluating? h2cff@self-evaluating?) (set! h4917@h2cfd@bound-id-member? h2cfd@bound-id-member?) (set! h4916@h2cfb@distinct-bound-ids? h2cfb@distinct-bound-ids?) (set! h4915@h2cf9@valid-bound-ids? h2cf9@valid-bound-ids?) (set! h4914@h2cf7@free-id=? h2cf7@free-id=?) (set! h4913@h2cf5@bound-id=? h2cf5@bound-id=?) (set! h4912@h2cf3@same-marks? h2cf3@same-marks?) (set! h4911@h2cf1@id->sym h2cf1@id->sym) (set! h4910@h2cef@id? h2cef@id?) (set! h490f@h2ced@syntax->list h2ced@syntax->list) (set! h490e@h2ceb@syntax-cdr h2ceb@syntax-cdr) (set! h490d@h2ce9@syntax-car h2ce9@syntax-car) (set! h490c@h2ce7@syntax-list? h2ce7@syntax-list?) (set! h490b@h2ce5@syntax-null? h2ce5@syntax-null?) (set! h490a@h2ce3@syntax-vector? h2ce3@syntax-vector?) (set! h4909@h2ce1@syntax-pair? h2ce1@syntax-pair?) (set! h4908@h2cdf@syntax-vector->list h2cdf@syntax-vector->list) (set! h4907@h2cdd@syntax-kind? h2cdd@syntax-kind?) (set! h4906@h2cdb@add-subst h2cdb@add-subst) (set! h4905@h2cd9@add-mark h2cd9@add-mark) (set! h4904@h2cd7@mkstx h2cd7@mkstx) (set! h4903@h2cd5@join-wraps h2cd5@join-wraps) (set! h4902@h2cd3@anti-mark? h2cd3@anti-mark?) (set! h4901@h2cd1@anti-mark h2cd1@anti-mark) (set! h4900@h2ccf@gen-mark h2ccf@gen-mark) (set! h48ff@h2ccd@datum->stx h2ccd@datum->stx) (set! h48fe@h2ccb@rp h2ccb@rp) (set! h48fd@h2cc9@set-stx-ae*! h2cc9@set-stx-ae*!) (set! h48fc@h2cc7@set-stx-subst*! h2cc7@set-stx-subst*!) (set! h48fb@h2cc5@set-stx-mark*! h2cc5@set-stx-mark*!) (set! h48fa@h2cc3@set-stx-expr! h2cc3@set-stx-expr!) (set! h48f9@h2cc1@stx-ae* h2cc1@stx-ae*) (set! h48f8@h2cbf@stx-subst* h2cbf@stx-subst*) (set! h48f7@h2cbd@stx-mark* h2cbd@stx-mark*) (set! h48f6@h2cbb@stx-expr h2cbb@stx-expr) (set! h48f5@h2cb9@make-stx h2cb9@make-stx) (set! h48f4@h2cb7@stx? h2cb7@stx?) (set! h48f3@h2cb4@h2cac h2cb4@h2cac) (set! h48f2@h2cb2@h2cad h2cb2@h2cad) (set! h48f1@h2cb0@h2cab h2cb0@h2cab) (set! h48f0@h2caa@make-full-rib h2caa@make-full-rib) (set! h48ef@h2ca8@unseal-rib! h2ca8@unseal-rib!) (set! h48ee@h2ca6@seal-rib! h2ca6@seal-rib!) (set! h48ed@h2ca4@make-rib-map h2ca4@make-rib-map) (set! h48ec@h2ca2@extend-rib/nc! h2ca2@extend-rib/nc!) (set! h48eb@h2ca0@extend-rib! h2ca0@extend-rib!) (set! h48ea@h2c9e@make-empty-rib h2c9e@make-empty-rib) (set! h48e9@h2c9c@set-rib-cache! h2c9c@set-rib-cache!) (set! h48e8@h2c9a@set-rib-sealed/freq! h2c9a@set-rib-sealed/freq!) (set! h48e7@h2c98@set-rib-label*! h2c98@set-rib-label*!) (set! h48e6@h2c96@set-rib-mark**! h2c96@set-rib-mark**!) (set! h48e5@h2c94@set-rib-sym*! h2c94@set-rib-sym*!) (set! h48e4@h2c92@rib-cache h2c92@rib-cache) (set! h48e3@h2c90@rib-sealed/freq h2c90@rib-sealed/freq) (set! h48e2@h2c8e@rib-label* h2c8e@rib-label*) (set! h48e1@h2c8c@rib-mark** h2c8c@rib-mark**) (set! h48e0@h2c8a@rib-sym* h2c8a@rib-sym*) (set! h48df@h2c88@make-rib h2c88@make-rib) (set! h48de@h2c86@rib? h2c86@rib?) (set! h48dd@h2c83@h2c7b h2c83@h2c7b) (set! h48dc@h2c81@h2c7c h2c81@h2c7c) (set! h48db@h2c7f@h2c7a h2c7f@h2c7a) (set! h48da@h2c79@gen-define-label h2c79@gen-define-label) (set! h48d9@h2c77@gen-define-label+loc h2c77@gen-define-label+loc) (set! h48d8@h2c75@gen-top-level-label h2c75@gen-top-level-label) (set! h48d7@h2c73@gen-label h2c73@gen-label) (set! h48d6@h2c71@gen-global h2c71@gen-global) (set! h48d5@h2c6f@gen-lexical h2c6f@gen-lexical) (set! h48d4@h2c6d@top-marked? h2c6d@top-marked?) (set! h48d3@h2c6b@top-mark* h2c6b@top-mark*) (set! h48d2@h2c66@set-union h2c66@set-union) (set! h48d1@h2c64@set-cons h2c64@set-cons) (set! h48d0@h2c62@file-options-macro h2c62@file-options-macro) (h2b09@h29a0@current-library-expander h2fc5@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h49e6@h49e1 h49e8@h49e3 h49ea@h49e2 h49ed@&condition? h49ef@make-&condition h49f1@&condition-rtd h49f3@&condition-rcd h4a3f@h4a3a h4a41@h4a3c h4a43@h4a3b h4a46@p? h4a48@make-message-condition h4a4a@h4a39 h4a4c@message-condition? h4a4e@condition-message h4a50@&message-rtd h4a52@&message-rcd h4a58@h4a53 h4a5a@h4a55 h4a5c@h4a54 h4a5f@p? h4a61@make-warning h4a63@warning? h4a65@&warning-rtd h4a67@&warning-rcd h4a6d@h4a68 h4a6f@h4a6a h4a71@h4a69 h4a74@p? h4a76@make-serious-condition h4a78@serious-condition? h4a7a@&serious-rtd h4a7c@&serious-rcd h4a82@h4a7d h4a84@h4a7f h4a86@h4a7e h4a89@p? h4a8b@make-error h4a8d@error? h4a8f@&error-rtd h4a91@&error-rcd h4a97@h4a92 h4a99@h4a94 h4a9b@h4a93 h4a9e@p? h4aa0@make-violation h4aa2@violation? h4aa4@&violation-rtd h4aa6@&violation-rcd h4aac@h4aa7 h4aae@h4aa9 h4ab0@h4aa8 h4ab3@p? h4ab5@make-assertion-violation h4ab7@assertion-violation? h4ab9@&assertion-rtd h4abb@&assertion-rcd h4ac3@h4abe h4ac5@h4ac0 h4ac7@h4abf h4aca@p? h4acc@make-irritants-condition h4ace@h4abd h4ad0@irritants-condition? h4ad2@condition-irritants h4ad4@&irritants-rtd h4ad6@&irritants-rcd h4ade@h4ad9 h4ae0@h4adb h4ae2@h4ada h4ae5@p? h4ae7@make-who-condition h4ae9@h4ad8 h4aeb@who-condition? h4aed@condition-who h4aef@&who-rtd h4af1@&who-rcd h4af7@h4af2 h4af9@h4af4 h4afb@h4af3 h4afe@p? h4b00@make-non-continuable-violation h4b02@non-continuable-violation? h4b04@&non-continuable-rtd h4b06@&non-continuable-rcd h4b0c@h4b07 h4b0e@h4b09 h4b10@h4b08 h4b13@p? h4b15@make-implementation-restriction-violation h4b17@implementation-restriction-violation? h4b19@&implementation-restriction-rtd h4b1b@&implementation-restriction-rcd h4b21@h4b1c h4b23@h4b1e h4b25@h4b1d h4b28@p? h4b2a@make-lexical-violation h4b2c@lexical-violation? h4b2e@&lexical-rtd h4b30@&lexical-rcd h4b3a@h4b35 h4b3c@h4b37 h4b3e@h4b36 h4b41@p? h4b43@make-syntax-violation h4b45@h4b32 h4b47@h4b34 h4b49@syntax-violation? h4b4b@syntax-violation-form h4b4d@syntax-violation-subform h4b4f@&syntax-rtd h4b51@&syntax-rcd h4b57@h4b52 h4b59@h4b54 h4b5b@h4b53 h4b5e@p? h4b60@make-undefined-violation h4b62@undefined-violation? h4b64@&undefined-rtd h4b66@&undefined-rcd h4b6c@h4b67 h4b6e@h4b69 h4b70@h4b68 h4b73@p? h4b75@make-i/o-error h4b77@i/o-error? h4b79@&i/o-rtd h4b7b@&i/o-rcd h4b81@h4b7c h4b83@h4b7e h4b85@h4b7d h4b88@p? h4b8a@make-i/o-read-error h4b8c@i/o-read-error? h4b8e@&i/o-read-rtd h4b90@&i/o-read-rcd h4b96@h4b91 h4b98@h4b93 h4b9a@h4b92 h4b9d@p? h4b9f@make-i/o-write-error h4ba1@i/o-write-error? h4ba3@&i/o-write-rtd h4ba5@&i/o-write-rcd h4bad@h4ba8 h4baf@h4baa h4bb1@h4ba9 h4bb4@p? h4bb6@make-i/o-invalid-position-error h4bb8@h4ba7 h4bba@i/o-invalid-position-error? h4bbc@i/o-error-position h4bbe@&i/o-invalid-position-rtd h4bc0@&i/o-invalid-position-rcd h4bc8@h4bc3 h4bca@h4bc5 h4bcc@h4bc4 h4bcf@p? h4bd1@make-i/o-filename-error h4bd3@h4bc2 h4bd5@i/o-filename-error? h4bd7@i/o-error-filename h4bd9@&i/o-filename-rtd h4bdb@&i/o-filename-rcd h4be1@h4bdc h4be3@h4bde h4be5@h4bdd h4be8@p? h4bea@make-i/o-file-protection-error h4bec@i/o-file-protection-error? h4bee@&i/o-file-protection-rtd h4bf0@&i/o-file-protection-rcd h4bf6@h4bf1 h4bf8@h4bf3 h4bfa@h4bf2 h4bfd@p? h4bff@make-i/o-file-is-read-only-error h4c01@i/o-file-is-read-only-error? h4c03@&i/o-file-is-read-only-rtd h4c05@&i/o-file-is-read-only-rcd h4c0b@h4c06 h4c0d@h4c08 h4c0f@h4c07 h4c12@p? h4c14@make-i/o-file-already-exists-error h4c16@i/o-file-already-exists-error? h4c18@&i/o-file-already-exists-rtd h4c1a@&i/o-file-already-exists-rcd h4c20@h4c1b h4c22@h4c1d h4c24@h4c1c h4c27@p? h4c29@make-i/o-file-does-not-exist-error h4c2b@i/o-file-does-not-exist-error? h4c2d@&i/o-file-does-not-exist-rtd h4c2f@&i/o-file-does-not-exist-rcd h4c37@h4c32 h4c39@h4c34 h4c3b@h4c33 h4c3e@p? h4c40@make-i/o-port-error h4c42@h4c31 h4c44@i/o-port-error? h4c46@i/o-error-port h4c48@&i/o-port-rtd h4c4a@&i/o-port-rcd h4c50@h4c4b h4c52@h4c4d h4c54@h4c4c h4c57@p? h4c59@make-i/o-decoding-error h4c5b@i/o-decoding-error? h4c5d@&i/o-decoding-rtd h4c5f@&i/o-decoding-rcd h4c67@h4c62 h4c69@h4c64 h4c6b@h4c63 h4c6e@p? h4c70@make-i/o-encoding-error h4c72@h4c61 h4c74@i/o-encoding-error? h4c76@i/o-encoding-error-char h4c78@&i/o-encoding-rtd h4c7a@&i/o-encoding-rcd h4c80@h4c7b h4c82@h4c7d h4c84@h4c7c h4c87@p? h4c89@make-no-infinities-violation h4c8b@no-infinities-violation? h4c8d@&no-infinities-rtd h4c8f@&no-infinities-rcd h4c95@h4c90 h4c97@h4c92 h4c99@h4c91 h4c9c@p? h4c9e@make-no-nans-violation h4ca0@no-nans-violation? h4ca2@&no-nans-rtd h4ca4@&no-nans-rcd) (begin (set! h49e6@h49e1 (make-record-type-descriptor '&condition '#f 'h49e4 '#f '#f '#())) (set! h49e8@h49e3 '#f) (set! h49ea@h49e2 (make-record-constructor-descriptor h49e6@h49e1 '#f h49e8@h49e3)) (set! h49ed@&condition? (record-predicate h49e6@h49e1)) (set! h49ef@make-&condition (record-constructor h49ea@h49e2)) (set! h49f1@&condition-rtd h49e6@h49e1) (set! h49f3@&condition-rcd h49ea@h49e2) (set! h4a3f@h4a3a (make-record-type-descriptor '&message h49e6@h49e1 'h4a3d '#f '#f '#((immutable message)))) (set! h4a41@h4a3c '#f) (set! h4a43@h4a3b (make-record-constructor-descriptor h4a3f@h4a3a h49ea@h49e2 h4a41@h4a3c)) (set! h4a46@p? (record-predicate h4a3f@h4a3a)) (set! h4a48@make-message-condition (record-constructor h4a43@h4a3b)) (set! h4a4a@h4a39 (record-accessor h4a3f@h4a3a '0)) (set! h4a4c@message-condition? (condition-predicate h4a3f@h4a3a)) (set! h4a4e@condition-message (condition-accessor h4a3f@h4a3a h4a4a@h4a39)) (set! h4a50@&message-rtd h4a3f@h4a3a) (set! h4a52@&message-rcd h4a43@h4a3b) (set! h4a58@h4a53 (make-record-type-descriptor '&warning h49e6@h49e1 'h4a56 '#f '#f '#())) (set! h4a5a@h4a55 '#f) (set! h4a5c@h4a54 (make-record-constructor-descriptor h4a58@h4a53 h49ea@h49e2 h4a5a@h4a55)) (set! h4a5f@p? (record-predicate h4a58@h4a53)) (set! h4a61@make-warning (record-constructor h4a5c@h4a54)) (set! h4a63@warning? (condition-predicate h4a58@h4a53)) (set! h4a65@&warning-rtd h4a58@h4a53) (set! h4a67@&warning-rcd h4a5c@h4a54) (set! h4a6d@h4a68 (make-record-type-descriptor '&serious h49e6@h49e1 'h4a6b '#f '#f '#())) (set! h4a6f@h4a6a '#f) (set! h4a71@h4a69 (make-record-constructor-descriptor h4a6d@h4a68 h49ea@h49e2 h4a6f@h4a6a)) (set! h4a74@p? (record-predicate h4a6d@h4a68)) (set! h4a76@make-serious-condition (record-constructor h4a71@h4a69)) (set! h4a78@serious-condition? (condition-predicate h4a6d@h4a68)) (set! h4a7a@&serious-rtd h4a6d@h4a68) (set! h4a7c@&serious-rcd h4a71@h4a69) (set! h4a82@h4a7d (make-record-type-descriptor '&error h4a6d@h4a68 'h4a80 '#f '#f '#())) (set! h4a84@h4a7f '#f) (set! h4a86@h4a7e (make-record-constructor-descriptor h4a82@h4a7d h4a71@h4a69 h4a84@h4a7f)) (set! h4a89@p? (record-predicate h4a82@h4a7d)) (set! h4a8b@make-error (record-constructor h4a86@h4a7e)) (set! h4a8d@error? (condition-predicate h4a82@h4a7d)) (set! h4a8f@&error-rtd h4a82@h4a7d) (set! h4a91@&error-rcd h4a86@h4a7e) (set! h4a97@h4a92 (make-record-type-descriptor '&violation h4a6d@h4a68 'h4a95 '#f '#f '#())) (set! h4a99@h4a94 '#f) (set! h4a9b@h4a93 (make-record-constructor-descriptor h4a97@h4a92 h4a71@h4a69 h4a99@h4a94)) (set! h4a9e@p? (record-predicate h4a97@h4a92)) (set! h4aa0@make-violation (record-constructor h4a9b@h4a93)) (set! h4aa2@violation? (condition-predicate h4a97@h4a92)) (set! h4aa4@&violation-rtd h4a97@h4a92) (set! h4aa6@&violation-rcd h4a9b@h4a93) (set! h4aac@h4aa7 (make-record-type-descriptor '&assertion h4a97@h4a92 'h4aaa '#f '#f '#())) (set! h4aae@h4aa9 '#f) (set! h4ab0@h4aa8 (make-record-constructor-descriptor h4aac@h4aa7 h4a9b@h4a93 h4aae@h4aa9)) (set! h4ab3@p? (record-predicate h4aac@h4aa7)) (set! h4ab5@make-assertion-violation (record-constructor h4ab0@h4aa8)) (set! h4ab7@assertion-violation? (condition-predicate h4aac@h4aa7)) (set! h4ab9@&assertion-rtd h4aac@h4aa7) (set! h4abb@&assertion-rcd h4ab0@h4aa8) (set! h4ac3@h4abe (make-record-type-descriptor '&irritants h49e6@h49e1 'h4ac1 '#f '#f '#((immutable irritants)))) (set! h4ac5@h4ac0 '#f) (set! h4ac7@h4abf (make-record-constructor-descriptor h4ac3@h4abe h49ea@h49e2 h4ac5@h4ac0)) (set! h4aca@p? (record-predicate h4ac3@h4abe)) (set! h4acc@make-irritants-condition (record-constructor h4ac7@h4abf)) (set! h4ace@h4abd (record-accessor h4ac3@h4abe '0)) (set! h4ad0@irritants-condition? (condition-predicate h4ac3@h4abe)) (set! h4ad2@condition-irritants (condition-accessor h4ac3@h4abe h4ace@h4abd)) (set! h4ad4@&irritants-rtd h4ac3@h4abe) (set! h4ad6@&irritants-rcd h4ac7@h4abf) (set! h4ade@h4ad9 (make-record-type-descriptor '&who h49e6@h49e1 'h4adc '#f '#f '#((immutable who)))) (set! h4ae0@h4adb '#f) (set! h4ae2@h4ada (make-record-constructor-descriptor h4ade@h4ad9 h49ea@h49e2 h4ae0@h4adb)) (set! h4ae5@p? (record-predicate h4ade@h4ad9)) (set! h4ae7@make-who-condition (record-constructor h4ae2@h4ada)) (set! h4ae9@h4ad8 (record-accessor h4ade@h4ad9 '0)) (set! h4aeb@who-condition? (condition-predicate h4ade@h4ad9)) (set! h4aed@condition-who (condition-accessor h4ade@h4ad9 h4ae9@h4ad8)) (set! h4aef@&who-rtd h4ade@h4ad9) (set! h4af1@&who-rcd h4ae2@h4ada) (set! h4af7@h4af2 (make-record-type-descriptor '&non-continuable h4a97@h4a92 'h4af5 '#f '#f '#())) (set! h4af9@h4af4 '#f) (set! h4afb@h4af3 (make-record-constructor-descriptor h4af7@h4af2 h4a9b@h4a93 h4af9@h4af4)) (set! h4afe@p? (record-predicate h4af7@h4af2)) (set! h4b00@make-non-continuable-violation (record-constructor h4afb@h4af3)) (set! h4b02@non-continuable-violation? (condition-predicate h4af7@h4af2)) (set! h4b04@&non-continuable-rtd h4af7@h4af2) (set! h4b06@&non-continuable-rcd h4afb@h4af3) (set! h4b0c@h4b07 (make-record-type-descriptor '&implementation-restriction h4a97@h4a92 'h4b0a '#f '#f '#())) (set! h4b0e@h4b09 '#f) (set! h4b10@h4b08 (make-record-constructor-descriptor h4b0c@h4b07 h4a9b@h4a93 h4b0e@h4b09)) (set! h4b13@p? (record-predicate h4b0c@h4b07)) (set! h4b15@make-implementation-restriction-violation (record-constructor h4b10@h4b08)) (set! h4b17@implementation-restriction-violation? (condition-predicate h4b0c@h4b07)) (set! h4b19@&implementation-restriction-rtd h4b0c@h4b07) (set! h4b1b@&implementation-restriction-rcd h4b10@h4b08) (set! h4b21@h4b1c (make-record-type-descriptor '&lexical h4a97@h4a92 'h4b1f '#f '#f '#())) (set! h4b23@h4b1e '#f) (set! h4b25@h4b1d (make-record-constructor-descriptor h4b21@h4b1c h4a9b@h4a93 h4b23@h4b1e)) (set! h4b28@p? (record-predicate h4b21@h4b1c)) (set! h4b2a@make-lexical-violation (record-constructor h4b25@h4b1d)) (set! h4b2c@lexical-violation? (condition-predicate h4b21@h4b1c)) (set! h4b2e@&lexical-rtd h4b21@h4b1c) (set! h4b30@&lexical-rcd h4b25@h4b1d) (set! h4b3a@h4b35 (make-record-type-descriptor '&syntax h4a97@h4a92 'h4b38 '#f '#f '#((immutable form) (immutable subform)))) (set! h4b3c@h4b37 '#f) (set! h4b3e@h4b36 (make-record-constructor-descriptor h4b3a@h4b35 h4a9b@h4a93 h4b3c@h4b37)) (set! h4b41@p? (record-predicate h4b3a@h4b35)) (set! h4b43@make-syntax-violation (record-constructor h4b3e@h4b36)) (set! h4b45@h4b32 (record-accessor h4b3a@h4b35 '0)) (set! h4b47@h4b34 (record-accessor h4b3a@h4b35 '1)) (set! h4b49@syntax-violation? (condition-predicate h4b3a@h4b35)) (set! h4b4b@syntax-violation-form (condition-accessor h4b3a@h4b35 h4b45@h4b32)) (set! h4b4d@syntax-violation-subform (condition-accessor h4b3a@h4b35 h4b47@h4b34)) (set! h4b4f@&syntax-rtd h4b3a@h4b35) (set! h4b51@&syntax-rcd h4b3e@h4b36) (set! h4b57@h4b52 (make-record-type-descriptor '&undefined h4a97@h4a92 'h4b55 '#f '#f '#())) (set! h4b59@h4b54 '#f) (set! h4b5b@h4b53 (make-record-constructor-descriptor h4b57@h4b52 h4a9b@h4a93 h4b59@h4b54)) (set! h4b5e@p? (record-predicate h4b57@h4b52)) (set! h4b60@make-undefined-violation (record-constructor h4b5b@h4b53)) (set! h4b62@undefined-violation? (condition-predicate h4b57@h4b52)) (set! h4b64@&undefined-rtd h4b57@h4b52) (set! h4b66@&undefined-rcd h4b5b@h4b53) (set! h4b6c@h4b67 (make-record-type-descriptor '&i/o h4a82@h4a7d 'h4b6a '#f '#f '#())) (set! h4b6e@h4b69 '#f) (set! h4b70@h4b68 (make-record-constructor-descriptor h4b6c@h4b67 h4a86@h4a7e h4b6e@h4b69)) (set! h4b73@p? (record-predicate h4b6c@h4b67)) (set! h4b75@make-i/o-error (record-constructor h4b70@h4b68)) (set! h4b77@i/o-error? (condition-predicate h4b6c@h4b67)) (set! h4b79@&i/o-rtd h4b6c@h4b67) (set! h4b7b@&i/o-rcd h4b70@h4b68) (set! h4b81@h4b7c (make-record-type-descriptor '&i/o-read h4b6c@h4b67 'h4b7f '#f '#f '#())) (set! h4b83@h4b7e '#f) (set! h4b85@h4b7d (make-record-constructor-descriptor h4b81@h4b7c h4b70@h4b68 h4b83@h4b7e)) (set! h4b88@p? (record-predicate h4b81@h4b7c)) (set! h4b8a@make-i/o-read-error (record-constructor h4b85@h4b7d)) (set! h4b8c@i/o-read-error? (condition-predicate h4b81@h4b7c)) (set! h4b8e@&i/o-read-rtd h4b81@h4b7c) (set! h4b90@&i/o-read-rcd h4b85@h4b7d) (set! h4b96@h4b91 (make-record-type-descriptor '&i/o-write h4b6c@h4b67 'h4b94 '#f '#f '#())) (set! h4b98@h4b93 '#f) (set! h4b9a@h4b92 (make-record-constructor-descriptor h4b96@h4b91 h4b70@h4b68 h4b98@h4b93)) (set! h4b9d@p? (record-predicate h4b96@h4b91)) (set! h4b9f@make-i/o-write-error (record-constructor h4b9a@h4b92)) (set! h4ba1@i/o-write-error? (condition-predicate h4b96@h4b91)) (set! h4ba3@&i/o-write-rtd h4b96@h4b91) (set! h4ba5@&i/o-write-rcd h4b9a@h4b92) (set! h4bad@h4ba8 (make-record-type-descriptor '&i/o-invalid-position h4b6c@h4b67 'h4bab '#f '#f '#((immutable position)))) (set! h4baf@h4baa '#f) (set! h4bb1@h4ba9 (make-record-constructor-descriptor h4bad@h4ba8 h4b70@h4b68 h4baf@h4baa)) (set! h4bb4@p? (record-predicate h4bad@h4ba8)) (set! h4bb6@make-i/o-invalid-position-error (record-constructor h4bb1@h4ba9)) (set! h4bb8@h4ba7 (record-accessor h4bad@h4ba8 '0)) (set! h4bba@i/o-invalid-position-error? (condition-predicate h4bad@h4ba8)) (set! h4bbc@i/o-error-position (condition-accessor h4bad@h4ba8 h4bb8@h4ba7)) (set! h4bbe@&i/o-invalid-position-rtd h4bad@h4ba8) (set! h4bc0@&i/o-invalid-position-rcd h4bb1@h4ba9) (set! h4bc8@h4bc3 (make-record-type-descriptor '&i/o-filename h4b6c@h4b67 'h4bc6 '#f '#f '#((immutable filename)))) (set! h4bca@h4bc5 '#f) (set! h4bcc@h4bc4 (make-record-constructor-descriptor h4bc8@h4bc3 h4b70@h4b68 h4bca@h4bc5)) (set! h4bcf@p? (record-predicate h4bc8@h4bc3)) (set! h4bd1@make-i/o-filename-error (record-constructor h4bcc@h4bc4)) (set! h4bd3@h4bc2 (record-accessor h4bc8@h4bc3 '0)) (set! h4bd5@i/o-filename-error? (condition-predicate h4bc8@h4bc3)) (set! h4bd7@i/o-error-filename (condition-accessor h4bc8@h4bc3 h4bd3@h4bc2)) (set! h4bd9@&i/o-filename-rtd h4bc8@h4bc3) (set! h4bdb@&i/o-filename-rcd h4bcc@h4bc4) (set! h4be1@h4bdc (make-record-type-descriptor '&i/o-file-protection h4bc8@h4bc3 'h4bdf '#f '#f '#())) (set! h4be3@h4bde '#f) (set! h4be5@h4bdd (make-record-constructor-descriptor h4be1@h4bdc h4bcc@h4bc4 h4be3@h4bde)) (set! h4be8@p? (record-predicate h4be1@h4bdc)) (set! h4bea@make-i/o-file-protection-error (record-constructor h4be5@h4bdd)) (set! h4bec@i/o-file-protection-error? (condition-predicate h4be1@h4bdc)) (set! h4bee@&i/o-file-protection-rtd h4be1@h4bdc) (set! h4bf0@&i/o-file-protection-rcd h4be5@h4bdd) (set! h4bf6@h4bf1 (make-record-type-descriptor '&i/o-file-is-read-only h4be1@h4bdc 'h4bf4 '#f '#f '#())) (set! h4bf8@h4bf3 '#f) (set! h4bfa@h4bf2 (make-record-constructor-descriptor h4bf6@h4bf1 h4be5@h4bdd h4bf8@h4bf3)) (set! h4bfd@p? (record-predicate h4bf6@h4bf1)) (set! h4bff@make-i/o-file-is-read-only-error (record-constructor h4bfa@h4bf2)) (set! h4c01@i/o-file-is-read-only-error? (condition-predicate h4bf6@h4bf1)) (set! h4c03@&i/o-file-is-read-only-rtd h4bf6@h4bf1) (set! h4c05@&i/o-file-is-read-only-rcd h4bfa@h4bf2) (set! h4c0b@h4c06 (make-record-type-descriptor '&i/o-file-already-exists h4bc8@h4bc3 'h4c09 '#f '#f '#())) (set! h4c0d@h4c08 '#f) (set! h4c0f@h4c07 (make-record-constructor-descriptor h4c0b@h4c06 h4bcc@h4bc4 h4c0d@h4c08)) (set! h4c12@p? (record-predicate h4c0b@h4c06)) (set! h4c14@make-i/o-file-already-exists-error (record-constructor h4c0f@h4c07)) (set! h4c16@i/o-file-already-exists-error? (condition-predicate h4c0b@h4c06)) (set! h4c18@&i/o-file-already-exists-rtd h4c0b@h4c06) (set! h4c1a@&i/o-file-already-exists-rcd h4c0f@h4c07) (set! h4c20@h4c1b (make-record-type-descriptor '&i/o-file-does-not-exist h4bc8@h4bc3 'h4c1e '#f '#f '#())) (set! h4c22@h4c1d '#f) (set! h4c24@h4c1c (make-record-constructor-descriptor h4c20@h4c1b h4bcc@h4bc4 h4c22@h4c1d)) (set! h4c27@p? (record-predicate h4c20@h4c1b)) (set! h4c29@make-i/o-file-does-not-exist-error (record-constructor h4c24@h4c1c)) (set! h4c2b@i/o-file-does-not-exist-error? (condition-predicate h4c20@h4c1b)) (set! h4c2d@&i/o-file-does-not-exist-rtd h4c20@h4c1b) (set! h4c2f@&i/o-file-does-not-exist-rcd h4c24@h4c1c) (set! h4c37@h4c32 (make-record-type-descriptor '&i/o-port h4b6c@h4b67 'h4c35 '#f '#f '#((immutable port)))) (set! h4c39@h4c34 '#f) (set! h4c3b@h4c33 (make-record-constructor-descriptor h4c37@h4c32 h4b70@h4b68 h4c39@h4c34)) (set! h4c3e@p? (record-predicate h4c37@h4c32)) (set! h4c40@make-i/o-port-error (record-constructor h4c3b@h4c33)) (set! h4c42@h4c31 (record-accessor h4c37@h4c32 '0)) (set! h4c44@i/o-port-error? (condition-predicate h4c37@h4c32)) (set! h4c46@i/o-error-port (condition-accessor h4c37@h4c32 h4c42@h4c31)) (set! h4c48@&i/o-port-rtd h4c37@h4c32) (set! h4c4a@&i/o-port-rcd h4c3b@h4c33) (set! h4c50@h4c4b (make-record-type-descriptor '&i/o-decoding h4c37@h4c32 'h4c4e '#f '#f '#())) (set! h4c52@h4c4d '#f) (set! h4c54@h4c4c (make-record-constructor-descriptor h4c50@h4c4b h4c3b@h4c33 h4c52@h4c4d)) (set! h4c57@p? (record-predicate h4c50@h4c4b)) (set! h4c59@make-i/o-decoding-error (record-constructor h4c54@h4c4c)) (set! h4c5b@i/o-decoding-error? (condition-predicate h4c50@h4c4b)) (set! h4c5d@&i/o-decoding-rtd h4c50@h4c4b) (set! h4c5f@&i/o-decoding-rcd h4c54@h4c4c) (set! h4c67@h4c62 (make-record-type-descriptor '&i/o-encoding h4c37@h4c32 'h4c65 '#f '#f '#((immutable char)))) (set! h4c69@h4c64 '#f) (set! h4c6b@h4c63 (make-record-constructor-descriptor h4c67@h4c62 h4c3b@h4c33 h4c69@h4c64)) (set! h4c6e@p? (record-predicate h4c67@h4c62)) (set! h4c70@make-i/o-encoding-error (record-constructor h4c6b@h4c63)) (set! h4c72@h4c61 (record-accessor h4c67@h4c62 '0)) (set! h4c74@i/o-encoding-error? (condition-predicate h4c67@h4c62)) (set! h4c76@i/o-encoding-error-char (condition-accessor h4c67@h4c62 h4c72@h4c61)) (set! h4c78@&i/o-encoding-rtd h4c67@h4c62) (set! h4c7a@&i/o-encoding-rcd h4c6b@h4c63) (set! h4c80@h4c7b (make-record-type-descriptor '&no-infinities h4b0c@h4b07 'h4c7e '#f '#f '#())) (set! h4c82@h4c7d '#f) (set! h4c84@h4c7c (make-record-constructor-descriptor h4c80@h4c7b h4b10@h4b08 h4c82@h4c7d)) (set! h4c87@p? (record-predicate h4c80@h4c7b)) (set! h4c89@make-no-infinities-violation (record-constructor h4c84@h4c7c)) (set! h4c8b@no-infinities-violation? (condition-predicate h4c80@h4c7b)) (set! h4c8d@&no-infinities-rtd h4c80@h4c7b) (set! h4c8f@&no-infinities-rcd h4c84@h4c7c) (set! h4c95@h4c90 (make-record-type-descriptor '&no-nans h4b0c@h4b07 'h4c93 '#f '#f '#())) (set! h4c97@h4c92 '#f) (set! h4c99@h4c91 (make-record-constructor-descriptor h4c95@h4c90 h4b10@h4b08 h4c97@h4c92)) (set! h4c9c@p? (record-predicate h4c95@h4c90)) (set! h4c9e@make-no-nans-violation (record-constructor h4c99@h4c91)) (set! h4ca0@no-nans-violation? (condition-predicate h4c95@h4c90)) (set! h4ca2@&no-nans-rtd h4c95@h4c90) (set! h4ca4@&no-nans-rcd h4c99@h4c91) (begin (set! h4d95@h4ca4@&no-nans-rcd h4ca4@&no-nans-rcd) (set! h4d94@h4ca2@&no-nans-rtd h4ca2@&no-nans-rtd) (set! h4d93@h4ca0@no-nans-violation? h4ca0@no-nans-violation?) (set! h4d92@h4c9e@make-no-nans-violation h4c9e@make-no-nans-violation) (set! h4d91@h4c9c@p? h4c9c@p?) (set! h4d90@h4c99@h4c91 h4c99@h4c91) (set! h4d8f@h4c97@h4c92 h4c97@h4c92) (set! h4d8e@h4c95@h4c90 h4c95@h4c90) (set! h4d8d@h4c8f@&no-infinities-rcd h4c8f@&no-infinities-rcd) (set! h4d8c@h4c8d@&no-infinities-rtd h4c8d@&no-infinities-rtd) (set! h4d8b@h4c8b@no-infinities-violation? h4c8b@no-infinities-violation?) (set! h4d8a@h4c89@make-no-infinities-violation h4c89@make-no-infinities-violation) (set! h4d89@h4c87@p? h4c87@p?) (set! h4d88@h4c84@h4c7c h4c84@h4c7c) (set! h4d87@h4c82@h4c7d h4c82@h4c7d) (set! h4d86@h4c80@h4c7b h4c80@h4c7b) (set! h4d85@h4c7a@&i/o-encoding-rcd h4c7a@&i/o-encoding-rcd) (set! h4d84@h4c78@&i/o-encoding-rtd h4c78@&i/o-encoding-rtd) (set! h4d83@h4c76@i/o-encoding-error-char h4c76@i/o-encoding-error-char) (set! h4d82@h4c74@i/o-encoding-error? h4c74@i/o-encoding-error?) (set! h4d81@h4c72@h4c61 h4c72@h4c61) (set! h4d80@h4c70@make-i/o-encoding-error h4c70@make-i/o-encoding-error) (set! h4d7f@h4c6e@p? h4c6e@p?) (set! h4d7e@h4c6b@h4c63 h4c6b@h4c63) (set! h4d7d@h4c69@h4c64 h4c69@h4c64) (set! h4d7c@h4c67@h4c62 h4c67@h4c62) (set! h4d7b@h4c5f@&i/o-decoding-rcd h4c5f@&i/o-decoding-rcd) (set! h4d7a@h4c5d@&i/o-decoding-rtd h4c5d@&i/o-decoding-rtd) (set! h4d79@h4c5b@i/o-decoding-error? h4c5b@i/o-decoding-error?) (set! h4d78@h4c59@make-i/o-decoding-error h4c59@make-i/o-decoding-error) (set! h4d77@h4c57@p? h4c57@p?) (set! h4d76@h4c54@h4c4c h4c54@h4c4c) (set! h4d75@h4c52@h4c4d h4c52@h4c4d) (set! h4d74@h4c50@h4c4b h4c50@h4c4b) (set! h4d73@h4c4a@&i/o-port-rcd h4c4a@&i/o-port-rcd) (set! h4d72@h4c48@&i/o-port-rtd h4c48@&i/o-port-rtd) (set! h4d71@h4c46@i/o-error-port h4c46@i/o-error-port) (set! h4d70@h4c44@i/o-port-error? h4c44@i/o-port-error?) (set! h4d6f@h4c42@h4c31 h4c42@h4c31) (set! h4d6e@h4c40@make-i/o-port-error h4c40@make-i/o-port-error) (set! h4d6d@h4c3e@p? h4c3e@p?) (set! h4d6c@h4c3b@h4c33 h4c3b@h4c33) (set! h4d6b@h4c39@h4c34 h4c39@h4c34) (set! h4d6a@h4c37@h4c32 h4c37@h4c32) (set! h4d69@h4c2f@&i/o-file-does-not-exist-rcd h4c2f@&i/o-file-does-not-exist-rcd) (set! h4d68@h4c2d@&i/o-file-does-not-exist-rtd h4c2d@&i/o-file-does-not-exist-rtd) (set! h4d67@h4c2b@i/o-file-does-not-exist-error? h4c2b@i/o-file-does-not-exist-error?) (set! h4d66@h4c29@make-i/o-file-does-not-exist-error h4c29@make-i/o-file-does-not-exist-error) (set! h4d65@h4c27@p? h4c27@p?) (set! h4d64@h4c24@h4c1c h4c24@h4c1c) (set! h4d63@h4c22@h4c1d h4c22@h4c1d) (set! h4d62@h4c20@h4c1b h4c20@h4c1b) (set! h4d61@h4c1a@&i/o-file-already-exists-rcd h4c1a@&i/o-file-already-exists-rcd) (set! h4d60@h4c18@&i/o-file-already-exists-rtd h4c18@&i/o-file-already-exists-rtd) (set! h4d5f@h4c16@i/o-file-already-exists-error? h4c16@i/o-file-already-exists-error?) (set! h4d5e@h4c14@make-i/o-file-already-exists-error h4c14@make-i/o-file-already-exists-error) (set! h4d5d@h4c12@p? h4c12@p?) (set! h4d5c@h4c0f@h4c07 h4c0f@h4c07) (set! h4d5b@h4c0d@h4c08 h4c0d@h4c08) (set! h4d5a@h4c0b@h4c06 h4c0b@h4c06) (set! h4d59@h4c05@&i/o-file-is-read-only-rcd h4c05@&i/o-file-is-read-only-rcd) (set! h4d58@h4c03@&i/o-file-is-read-only-rtd h4c03@&i/o-file-is-read-only-rtd) (set! h4d57@h4c01@i/o-file-is-read-only-error? h4c01@i/o-file-is-read-only-error?) (set! h4d56@h4bff@make-i/o-file-is-read-only-error h4bff@make-i/o-file-is-read-only-error) (set! h4d55@h4bfd@p? h4bfd@p?) (set! h4d54@h4bfa@h4bf2 h4bfa@h4bf2) (set! h4d53@h4bf8@h4bf3 h4bf8@h4bf3) (set! h4d52@h4bf6@h4bf1 h4bf6@h4bf1) (set! h4d51@h4bf0@&i/o-file-protection-rcd h4bf0@&i/o-file-protection-rcd) (set! h4d50@h4bee@&i/o-file-protection-rtd h4bee@&i/o-file-protection-rtd) (set! h4d4f@h4bec@i/o-file-protection-error? h4bec@i/o-file-protection-error?) (set! h4d4e@h4bea@make-i/o-file-protection-error h4bea@make-i/o-file-protection-error) (set! h4d4d@h4be8@p? h4be8@p?) (set! h4d4c@h4be5@h4bdd h4be5@h4bdd) (set! h4d4b@h4be3@h4bde h4be3@h4bde) (set! h4d4a@h4be1@h4bdc h4be1@h4bdc) (set! h4d49@h4bdb@&i/o-filename-rcd h4bdb@&i/o-filename-rcd) (set! h4d48@h4bd9@&i/o-filename-rtd h4bd9@&i/o-filename-rtd) (set! h4d47@h4bd7@i/o-error-filename h4bd7@i/o-error-filename) (set! h4d46@h4bd5@i/o-filename-error? h4bd5@i/o-filename-error?) (set! h4d45@h4bd3@h4bc2 h4bd3@h4bc2) (set! h4d44@h4bd1@make-i/o-filename-error h4bd1@make-i/o-filename-error) (set! h4d43@h4bcf@p? h4bcf@p?) (set! h4d42@h4bcc@h4bc4 h4bcc@h4bc4) (set! h4d41@h4bca@h4bc5 h4bca@h4bc5) (set! h4d40@h4bc8@h4bc3 h4bc8@h4bc3) (set! h4d3f@h4bc0@&i/o-invalid-position-rcd h4bc0@&i/o-invalid-position-rcd) (set! h4d3e@h4bbe@&i/o-invalid-position-rtd h4bbe@&i/o-invalid-position-rtd) (set! h4d3d@h4bbc@i/o-error-position h4bbc@i/o-error-position) (set! h4d3c@h4bba@i/o-invalid-position-error? h4bba@i/o-invalid-position-error?) (set! h4d3b@h4bb8@h4ba7 h4bb8@h4ba7) (set! h4d3a@h4bb6@make-i/o-invalid-position-error h4bb6@make-i/o-invalid-position-error) (set! h4d39@h4bb4@p? h4bb4@p?) (set! h4d38@h4bb1@h4ba9 h4bb1@h4ba9) (set! h4d37@h4baf@h4baa h4baf@h4baa) (set! h4d36@h4bad@h4ba8 h4bad@h4ba8) (set! h4d35@h4ba5@&i/o-write-rcd h4ba5@&i/o-write-rcd) (set! h4d34@h4ba3@&i/o-write-rtd h4ba3@&i/o-write-rtd) (set! h4d33@h4ba1@i/o-write-error? h4ba1@i/o-write-error?) (set! h4d32@h4b9f@make-i/o-write-error h4b9f@make-i/o-write-error) (set! h4d31@h4b9d@p? h4b9d@p?) (set! h4d30@h4b9a@h4b92 h4b9a@h4b92) (set! h4d2f@h4b98@h4b93 h4b98@h4b93) (set! h4d2e@h4b96@h4b91 h4b96@h4b91) (set! h4d2d@h4b90@&i/o-read-rcd h4b90@&i/o-read-rcd) (set! h4d2c@h4b8e@&i/o-read-rtd h4b8e@&i/o-read-rtd) (set! h4d2b@h4b8c@i/o-read-error? h4b8c@i/o-read-error?) (set! h4d2a@h4b8a@make-i/o-read-error h4b8a@make-i/o-read-error) (set! h4d29@h4b88@p? h4b88@p?) (set! h4d28@h4b85@h4b7d h4b85@h4b7d) (set! h4d27@h4b83@h4b7e h4b83@h4b7e) (set! h4d26@h4b81@h4b7c h4b81@h4b7c) (set! h4d25@h4b7b@&i/o-rcd h4b7b@&i/o-rcd) (set! h4d24@h4b79@&i/o-rtd h4b79@&i/o-rtd) (set! h4d23@h4b77@i/o-error? h4b77@i/o-error?) (set! h4d22@h4b75@make-i/o-error h4b75@make-i/o-error) (set! h4d21@h4b73@p? h4b73@p?) (set! h4d20@h4b70@h4b68 h4b70@h4b68) (set! h4d1f@h4b6e@h4b69 h4b6e@h4b69) (set! h4d1e@h4b6c@h4b67 h4b6c@h4b67) (set! h4d1d@h4b66@&undefined-rcd h4b66@&undefined-rcd) (set! h4d1c@h4b64@&undefined-rtd h4b64@&undefined-rtd) (set! h4d1b@h4b62@undefined-violation? h4b62@undefined-violation?) (set! h4d1a@h4b60@make-undefined-violation h4b60@make-undefined-violation) (set! h4d19@h4b5e@p? h4b5e@p?) (set! h4d18@h4b5b@h4b53 h4b5b@h4b53) (set! h4d17@h4b59@h4b54 h4b59@h4b54) (set! h4d16@h4b57@h4b52 h4b57@h4b52) (set! h4d15@h4b51@&syntax-rcd h4b51@&syntax-rcd) (set! h4d14@h4b4f@&syntax-rtd h4b4f@&syntax-rtd) (set! h4d13@h4b4d@syntax-violation-subform h4b4d@syntax-violation-subform) (set! h4d12@h4b4b@syntax-violation-form h4b4b@syntax-violation-form) (set! h4d11@h4b49@syntax-violation? h4b49@syntax-violation?) (set! h4d10@h4b47@h4b34 h4b47@h4b34) (set! h4d0f@h4b45@h4b32 h4b45@h4b32) (set! h4d0e@h4b43@make-syntax-violation h4b43@make-syntax-violation) (set! h4d0d@h4b41@p? h4b41@p?) (set! h4d0c@h4b3e@h4b36 h4b3e@h4b36) (set! h4d0b@h4b3c@h4b37 h4b3c@h4b37) (set! h4d0a@h4b3a@h4b35 h4b3a@h4b35) (set! h4d09@h4b30@&lexical-rcd h4b30@&lexical-rcd) (set! h4d08@h4b2e@&lexical-rtd h4b2e@&lexical-rtd) (set! h4d07@h4b2c@lexical-violation? h4b2c@lexical-violation?) (set! h4d06@h4b2a@make-lexical-violation h4b2a@make-lexical-violation) (set! h4d05@h4b28@p? h4b28@p?) (set! h4d04@h4b25@h4b1d h4b25@h4b1d) (set! h4d03@h4b23@h4b1e h4b23@h4b1e) (set! h4d02@h4b21@h4b1c h4b21@h4b1c) (set! h4d01@h4b1b@&implementation-restriction-rcd h4b1b@&implementation-restriction-rcd) (set! h4d00@h4b19@&implementation-restriction-rtd h4b19@&implementation-restriction-rtd) (set! h4cff@h4b17@implementation-restriction-violation? h4b17@implementation-restriction-violation?) (set! h4cfe@h4b15@make-implementation-restriction-violation h4b15@make-implementation-restriction-violation) (set! h4cfd@h4b13@p? h4b13@p?) (set! h4cfc@h4b10@h4b08 h4b10@h4b08) (set! h4cfb@h4b0e@h4b09 h4b0e@h4b09) (set! h4cfa@h4b0c@h4b07 h4b0c@h4b07) (set! h4cf9@h4b06@&non-continuable-rcd h4b06@&non-continuable-rcd) (set! h4cf8@h4b04@&non-continuable-rtd h4b04@&non-continuable-rtd) (set! h4cf7@h4b02@non-continuable-violation? h4b02@non-continuable-violation?) (set! h4cf6@h4b00@make-non-continuable-violation h4b00@make-non-continuable-violation) (set! h4cf5@h4afe@p? h4afe@p?) (set! h4cf4@h4afb@h4af3 h4afb@h4af3) (set! h4cf3@h4af9@h4af4 h4af9@h4af4) (set! h4cf2@h4af7@h4af2 h4af7@h4af2) (set! h4cf1@h4af1@&who-rcd h4af1@&who-rcd) (set! h4cf0@h4aef@&who-rtd h4aef@&who-rtd) (set! h4cef@h4aed@condition-who h4aed@condition-who) (set! h4cee@h4aeb@who-condition? h4aeb@who-condition?) (set! h4ced@h4ae9@h4ad8 h4ae9@h4ad8) (set! h4cec@h4ae7@make-who-condition h4ae7@make-who-condition) (set! h4ceb@h4ae5@p? h4ae5@p?) (set! h4cea@h4ae2@h4ada h4ae2@h4ada) (set! h4ce9@h4ae0@h4adb h4ae0@h4adb) (set! h4ce8@h4ade@h4ad9 h4ade@h4ad9) (set! h4ce7@h4ad6@&irritants-rcd h4ad6@&irritants-rcd) (set! h4ce6@h4ad4@&irritants-rtd h4ad4@&irritants-rtd) (set! h4ce5@h4ad2@condition-irritants h4ad2@condition-irritants) (set! h4ce4@h4ad0@irritants-condition? h4ad0@irritants-condition?) (set! h4ce3@h4ace@h4abd h4ace@h4abd) (set! h4ce2@h4acc@make-irritants-condition h4acc@make-irritants-condition) (set! h4ce1@h4aca@p? h4aca@p?) (set! h4ce0@h4ac7@h4abf h4ac7@h4abf) (set! h4cdf@h4ac5@h4ac0 h4ac5@h4ac0) (set! h4cde@h4ac3@h4abe h4ac3@h4abe) (set! h4cdd@h4abb@&assertion-rcd h4abb@&assertion-rcd) (set! h4cdc@h4ab9@&assertion-rtd h4ab9@&assertion-rtd) (set! h4cdb@h4ab7@assertion-violation? h4ab7@assertion-violation?) (set! h4cda@h4ab5@make-assertion-violation h4ab5@make-assertion-violation) (set! h4cd9@h4ab3@p? h4ab3@p?) (set! h4cd8@h4ab0@h4aa8 h4ab0@h4aa8) (set! h4cd7@h4aae@h4aa9 h4aae@h4aa9) (set! h4cd6@h4aac@h4aa7 h4aac@h4aa7) (set! h4cd5@h4aa6@&violation-rcd h4aa6@&violation-rcd) (set! h4cd4@h4aa4@&violation-rtd h4aa4@&violation-rtd) (set! h4cd3@h4aa2@violation? h4aa2@violation?) (set! h4cd2@h4aa0@make-violation h4aa0@make-violation) (set! h4cd1@h4a9e@p? h4a9e@p?) (set! h4cd0@h4a9b@h4a93 h4a9b@h4a93) (set! h4ccf@h4a99@h4a94 h4a99@h4a94) (set! h4cce@h4a97@h4a92 h4a97@h4a92) (set! h4ccd@h4a91@&error-rcd h4a91@&error-rcd) (set! h4ccc@h4a8f@&error-rtd h4a8f@&error-rtd) (set! h4ccb@h4a8d@error? h4a8d@error?) (set! h4cca@h4a8b@make-error h4a8b@make-error) (set! h4cc9@h4a89@p? h4a89@p?) (set! h4cc8@h4a86@h4a7e h4a86@h4a7e) (set! h4cc7@h4a84@h4a7f h4a84@h4a7f) (set! h4cc6@h4a82@h4a7d h4a82@h4a7d) (set! h4cc5@h4a7c@&serious-rcd h4a7c@&serious-rcd) (set! h4cc4@h4a7a@&serious-rtd h4a7a@&serious-rtd) (set! h4cc3@h4a78@serious-condition? h4a78@serious-condition?) (set! h4cc2@h4a76@make-serious-condition h4a76@make-serious-condition) (set! h4cc1@h4a74@p? h4a74@p?) (set! h4cc0@h4a71@h4a69 h4a71@h4a69) (set! h4cbf@h4a6f@h4a6a h4a6f@h4a6a) (set! h4cbe@h4a6d@h4a68 h4a6d@h4a68) (set! h4cbd@h4a67@&warning-rcd h4a67@&warning-rcd) (set! h4cbc@h4a65@&warning-rtd h4a65@&warning-rtd) (set! h4cbb@h4a63@warning? h4a63@warning?) (set! h4cba@h4a61@make-warning h4a61@make-warning) (set! h4cb9@h4a5f@p? h4a5f@p?) (set! h4cb8@h4a5c@h4a54 h4a5c@h4a54) (set! h4cb7@h4a5a@h4a55 h4a5a@h4a55) (set! h4cb6@h4a58@h4a53 h4a58@h4a53) (set! h4cb5@h4a52@&message-rcd h4a52@&message-rcd) (set! h4cb4@h4a50@&message-rtd h4a50@&message-rtd) (set! h4cb3@h4a4e@condition-message h4a4e@condition-message) (set! h4cb2@h4a4c@message-condition? h4a4c@message-condition?) (set! h4cb1@h4a4a@h4a39 h4a4a@h4a39) (set! h4cb0@h4a48@make-message-condition h4a48@make-message-condition) (set! h4caf@h4a46@p? h4a46@p?) (set! h4cae@h4a43@h4a3b h4a43@h4a3b) (set! h4cad@h4a41@h4a3c h4a41@h4a3c) (set! h4cac@h4a3f@h4a3a h4a3f@h4a3a) (set! h4cab@h49f3@&condition-rcd h49f3@&condition-rcd) (set! h4caa@h49f1@&condition-rtd h49f1@&condition-rtd) (set! h4ca9@h49ef@make-&condition h49ef@make-&condition) (set! h4ca8@h49ed@&condition? h49ed@&condition?) (set! h4ca7@h49ea@h49e2 h49ea@h49e2) (set! h4ca6@h49e8@h49e3 h49e8@h49e3) (set! h4ca5@h49e6@h49e1 h49e6@h49e1)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (h28ea@h289f@current-primitive-locations (lambda (h520c@x) ((lambda (h520e@t) (if h520e@t (cdr h520e@t) '#f)) (assq h520c@x '((&no-nans-rcd . h4d95@h4ca4@&no-nans-rcd) (&no-nans-rtd . h4d94@h4ca2@&no-nans-rtd) (&no-infinities-rcd . h4d8d@h4c8f@&no-infinities-rcd) (&no-infinities-rtd . h4d8c@h4c8d@&no-infinities-rtd) (&i/o-encoding-rcd . h4d85@h4c7a@&i/o-encoding-rcd) (&i/o-encoding-rtd . h4d84@h4c78@&i/o-encoding-rtd) (&i/o-decoding-rcd . h4d7b@h4c5f@&i/o-decoding-rcd) (&i/o-decoding-rtd . h4d7a@h4c5d@&i/o-decoding-rtd) (&i/o-port-rcd . h4d73@h4c4a@&i/o-port-rcd) (&i/o-port-rtd . h4d72@h4c48@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . h4d69@h4c2f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . h4d68@h4c2d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . h4d61@h4c1a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . h4d60@h4c18@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . h4d59@h4c05@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . h4d58@h4c03@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . h4d51@h4bf0@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . h4d50@h4bee@&i/o-file-protection-rtd) (&i/o-filename-rcd . h4d49@h4bdb@&i/o-filename-rcd) (&i/o-filename-rtd . h4d48@h4bd9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . h4d3f@h4bc0@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . h4d3e@h4bbe@&i/o-invalid-position-rtd) (&i/o-write-rcd . h4d35@h4ba5@&i/o-write-rcd) (&i/o-write-rtd . h4d34@h4ba3@&i/o-write-rtd) (&i/o-read-rcd . h4d2d@h4b90@&i/o-read-rcd) (&i/o-read-rtd . h4d2c@h4b8e@&i/o-read-rtd) (&i/o-rcd . h4d25@h4b7b@&i/o-rcd) (&i/o-rtd . h4d24@h4b79@&i/o-rtd) (&undefined-rcd . h4d1d@h4b66@&undefined-rcd) (&undefined-rtd . h4d1c@h4b64@&undefined-rtd) (&syntax-rcd . h4d15@h4b51@&syntax-rcd) (&syntax-rtd . h4d14@h4b4f@&syntax-rtd) (&lexical-rcd . h4d09@h4b30@&lexical-rcd) (&lexical-rtd . h4d08@h4b2e@&lexical-rtd) (&implementation-restriction-rcd . h4d01@h4b1b@&implementation-restriction-rcd) (&implementation-restriction-rtd . h4d00@h4b19@&implementation-restriction-rtd) (&non-continuable-rcd . h4cf9@h4b06@&non-continuable-rcd) (&non-continuable-rtd . h4cf8@h4b04@&non-continuable-rtd) (&who-rcd . h4cf1@h4af1@&who-rcd) (&who-rtd . h4cf0@h4aef@&who-rtd) (&irritants-rcd . h4ce7@h4ad6@&irritants-rcd) (&irritants-rtd . h4ce6@h4ad4@&irritants-rtd) (&assertion-rcd . h4cdd@h4abb@&assertion-rcd) (&assertion-rtd . h4cdc@h4ab9@&assertion-rtd) (&violation-rcd . h4cd5@h4aa6@&violation-rcd) (&violation-rtd . h4cd4@h4aa4@&violation-rtd) (&error-rcd . h4ccd@h4a91@&error-rcd) (&error-rtd . h4ccc@h4a8f@&error-rtd) (&serious-rcd . h4cc5@h4a7c@&serious-rcd) (&serious-rtd . h4cc4@h4a7a@&serious-rtd) (&warning-rcd . h4cbd@h4a67@&warning-rcd) (&warning-rtd . h4cbc@h4a65@&warning-rtd) (&message-rcd . h4cb5@h4a52@&message-rcd) (&message-rtd . h4cb4@h4a50@&message-rtd) (&condition-rcd . h4cab@h49f3@&condition-rcd) (&condition-rtd . h4caa@h49f1@&condition-rtd) (syntax-error . h49d3@h2fdf@syntax-error) (syntax-dispatch . h4968@h2efa@syntax-dispatch) (load . h4ec6@h4db1@load) (interaction-environment . h49db@h2fef@interaction-environment) (library-path . h2b01@h2990@library-path) (make-parameter . h2899@h27c3@make-parameter) (make-variable-transformer . h4926@h2d27@make-variable-transformer) (identifier? . h49d6@h2fe5@identifier?) (generate-temporaries . h49cc@h2fd1@generate-temporaries) (free-identifier=? . h49cd@h2fd3@free-identifier=?) (syntax->datum . h49d8@h2fe9@syntax->datum) (datum->syntax . h49d7@h2fe7@datum->syntax) (bound-identifier=? . h49ce@h2fd5@bound-identifier=?) (make-i/o-write-error . h4d32@h4b9f@make-i/o-write-error) (make-i/o-read-error . h4d2a@h4b8a@make-i/o-read-error) (make-i/o-port-error . h4d6e@h4c40@make-i/o-port-error) (make-i/o-invalid-position-error . h4d3a@h4bb6@make-i/o-invalid-position-error) (make-i/o-filename-error . h4d44@h4bd1@make-i/o-filename-error) (make-i/o-file-protection-error . h4d4e@h4bea@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . h4d56@h4bff@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . h4d66@h4c29@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . h4d5e@h4c14@make-i/o-file-already-exists-error) (make-i/o-error . h4d22@h4b75@make-i/o-error) (make-i/o-encoding-error . h4d80@h4c70@make-i/o-encoding-error) (make-i/o-decoding-error . h4d78@h4c59@make-i/o-decoding-error) (i/o-write-error? . h4d33@h4ba1@i/o-write-error?) (i/o-read-error? . h4d2b@h4b8c@i/o-read-error?) (i/o-port-error? . h4d70@h4c44@i/o-port-error?) (i/o-invalid-position-error? . h4d3c@h4bba@i/o-invalid-position-error?) (i/o-filename-error? . h4d46@h4bd5@i/o-filename-error?) (i/o-file-protection-error? . h4d4f@h4bec@i/o-file-protection-error?) (i/o-file-is-read-only-error? . h4d57@h4c01@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . h4d67@h4c2b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . h4d5f@h4c16@i/o-file-already-exists-error?) (i/o-error? . h4d23@h4b77@i/o-error?) (i/o-error-position . h4d3d@h4bbc@i/o-error-position) (i/o-error-port . h4d71@h4c46@i/o-error-port) (i/o-error-filename . h4d47@h4bd7@i/o-error-filename) (i/o-encoding-error? . h4d82@h4c74@i/o-encoding-error?) (i/o-encoding-error-char . h4d83@h4c76@i/o-encoding-error-char) (i/o-decoding-error? . h4d79@h4c5b@i/o-decoding-error?) (scheme-report-environment . h49c3@h2fbf@scheme-report-environment) (null-environment . h49c2@h2fbd@null-environment) (command-line . h4ec3@h4dab@command-line) (eval . h49c5@h2fc3@eval) (environment . h49c1@h2fbb@environment) (who-condition? . h4cee@h4aeb@who-condition?) (warning? . h4cbb@h4a63@warning?) (violation? . h4cd3@h4aa2@violation?) (undefined-violation? . h4d1b@h4b62@undefined-violation?) (syntax-violation? . h4d11@h4b49@syntax-violation?) (syntax-violation-subform . h4d13@h4b4d@syntax-violation-subform) (syntax-violation-form . h4d12@h4b4b@syntax-violation-form) (syntax-violation . h49d5@h2fe3@syntax-violation) (serious-condition? . h4cc3@h4a78@serious-condition?) (non-continuable-violation? . h4cf7@h4b02@non-continuable-violation?) (message-condition? . h4cb2@h4a4c@message-condition?) (make-who-condition . h4cec@h4ae7@make-who-condition) (make-warning . h4cba@h4a61@make-warning) (make-violation . h4cd2@h4aa0@make-violation) (make-undefined-violation . h4d1a@h4b60@make-undefined-violation) (make-syntax-violation . h4d0e@h4b43@make-syntax-violation) (make-serious-condition . h4cc2@h4a76@make-serious-condition) (make-non-continuable-violation . h4cf6@h4b00@make-non-continuable-violation) (make-message-condition . h4cb0@h4a48@make-message-condition) (make-lexical-violation . h4d06@h4b2a@make-lexical-violation) (make-irritants-condition . h4ce2@h4acc@make-irritants-condition) (make-implementation-restriction-violation . h4cfe@h4b15@make-implementation-restriction-violation) (make-error . h4cca@h4a8b@make-error) (make-assertion-violation . h4cda@h4ab5@make-assertion-violation) (lexical-violation? . h4d07@h4b2c@lexical-violation?) (irritants-condition? . h4ce4@h4ad0@irritants-condition?) (implementation-restriction-violation? . h4cff@h4b17@implementation-restriction-violation?) (error? . h4ccb@h4a8d@error?) (condition-who . h4cef@h4aed@condition-who) (condition-message . h4cb3@h4a4e@condition-message) (condition-irritants . h4ce5@h4ad2@condition-irritants) (assertion-violation? . h4cdb@h4ab7@assertion-violation?) (no-nans-violation? . h4d93@h4ca0@no-nans-violation?) (no-infinities-violation? . h4d8b@h4c8b@no-infinities-violation?) (make-no-nans-violation . h4d92@h4c9e@make-no-nans-violation) (make-no-infinities-violation . h4d8a@h4c89@make-no-infinities-violation) (assertion-error . h49d2@h2fdd@assertion-error)))))) (h2b11@h29b0@install-library 'h51e9 '(mosh interaction) '() '() '() '() '((regexp? . h51e1) (alist->eq-hash-table . h51de) (format . h51db) (string-split . h51d0) (call-process . h51ca) (set-current-directory! . h51c6) (expand-path . h51c5) (current-directory . h51c4) (%spawn . h51c3) (%waitpid . h51c2) (pointer-ref-c-int64 . h51c1) (pointer-ref-c-int32 . h51c0) (pointer-ref-c-int16 . h51bf) (pointer-ref-c-int8 . h51be) (pointer-ref-c-uint64 . h51bd) (pointer-ref-c-uint32 . h51bc) (pointer-ref-c-uint16 . h51bb) (pointer-ref-c-uint8 . h51ba) (pointer-set-c-uint64! . h51b9) (pointer-set-c-uint32! . h51b8) (pointer-set-c-uint16! . h51b7) (pointer-set-c-uint8! . h51b6) (pointer-set-c-int64! . h51b5) (pointer-set-c-int32! . h51b4) (pointer-set-c-int16! . h51b3) (pointer-set-c-int8! . h51b2) (pointer-set-c-pointer! . h51b1) (pointer-set-c-double! . h51b0) (pointer-set-c-float! . h51af) (pointer-set-c-long-long! . h51ae) (pointer-set-c-long! . h51ad) (pointer-set-c-int! . h51ac) (pointer-set-c-short! . h51ab) (pointer-set-c-char! . h51aa) (pointer-ref-c-pointer . h51a9) (pointer-ref-c-double . h51a8) (pointer-ref-c-float . h51a7) (pointer-ref-c-unsigned-long-long . h51a6) (pointer-ref-c-signed-long-long . h51a5) (pointer-ref-c-unsigned-long . h51a4) (pointer-ref-c-signed-long . h51a3) (pointer-ref-c-unsigned-int . h51a2) (pointer-ref-c-signed-int . h51a1) (pointer-ref-c-unsigned-short . h51a0) (pointer-ref-c-signed-short . h519f) (pointer-ref-c-unsigned-char . h519e) (pointer-ref-c-signed-char . h519d) (pointer->integer . h519c) (integer->pointer . h519b) (pointer? . h519a) (shared-errno . h5199) (%ffi-supported? . h5198) (%ffi-pointer->string . h5197) (%ffi-call->string-or-zero . h5196) (%ffi-call->double . h5195) (%ffi-call->void* . h5194) (%ffi-call->void . h5193) (%ffi-call->char . h5192) (%ffi-call->int . h5191) (%ffi-lookup . h5190) (%ffi-open . h518f) (%fork . h518e) (%pipe . h518d) (p . h518c) (whereis . h5176) (register . h5175) (vm-join! . h5174) (vm-set-value! . h5173) (vm? . h5172) (main-vm? . h5171) (vm-eval . h5170) (vm-self . h516f) (vm-start! . h516e) (make-vm . h516d) (mutex-try-lock! . h516c) (mutex-unlock! . h516b) (mutex-lock! . h516a) (mutex? . h5169) (make-mutex . h5168) (condition-variable-notify-all! . h5167) (condition-variable-notify! . h5166) (condition-variable-wait! . h5165) (make-condition-variable . h5164) (string-upcase . h514d) (string-titlecase . h514c) (string-normalize-nfkd . h514b) (string-normalize-nfkc . h514a) (string-normalize-nfd . h5149) (string-normalize-nfc . h5148) (string-foldcase . h5147) (string-downcase . h5146) (string-ci>? . h5145) (string-ci>=? . h5144) (string-ci=? . h5143) (string-ci<? . h5142) (string-ci<=? . h5141) (char-whitespace? . h5140) (char-upper-case? . h513f) (char-title-case? . h513e) (char-numeric? . h513d) (char-lower-case? . h513c) (char-general-category . h513b) (char-upcase . h513a) (char-titlecase . h5139) (char-foldcase . h5138) (char-downcase . h5137) (char-ci>? . h5136) (char-ci>=? . h5135) (char-ci=? . h5134) (char-ci<? . h5133) (char-ci<=? . h5132) (char-alphabetic? . h5131) (make-variable-transformer . h2d26) (identifier? . h2fe4) (generate-temporaries . h2fd0) (free-identifier=? . h2fd2) (syntax->datum . h2fe8) (datum->syntax . h2fe6) (bound-identifier=? . h2fd4) (record-type-descriptor? . h5130) (record-predicate . h512f) (record-mutator . h512e) (record-constructor . h512d) (record-accessor . h512c) (make-record-type-descriptor . h512b) (make-record-constructor-descriptor . h512a) (record? . h5129) (record-type-uid . h5128) (record-type-sealed? . h5127) (record-type-parent . h5126) (record-type-opaque? . h5125) (record-type-name . h5124) (record-type-generative? . h5123) (record-type-field-names . h5122) (record-rtd . h5121) (record-field-mutable? . h5120) (delete-file . h511f) (file-exists? . h511e) (vector-sort! . h511d) (vector-sort . h511c) (list-sort . h511b) (symbol-hash . h511a) (string-ci-hash . h5119) (string-hash . h5118) (equal-hash . h5117) (hashtable-equivalence-function . h5116) (make-hashtable . h5115) (hashtable-hash-function . h5114) (make-eqv-hashtable . h5113) (make-eq-hashtable . h5112) (hashtable? . h5111) (hashtable-update! . h5110) (hashtable-size . h510f) (hashtable-set! . h510e) (hashtable-ref . h510d) (hashtable-mutable? . h510c) (hashtable-keys . h510b) (hashtable-entries . h510a) (hashtable-delete! . h5109) (hashtable-copy . h5108) (hashtable-contains? . h5107) (hashtable-clear! . h5106) (call-with-output-file . h5105) (call-with-input-file . h5104) (write-char . h5103) (write . h5102) (with-output-to-file . h5101) (with-input-from-file . h5100) (read-char . h50ff) (read . h50fe) (peek-char . h50fd) (open-output-file . h50fc) (open-input-file . h50fb) (newline . h50fa) (display . h50f9) (close-output-port . h50f8) (close-input-port . h50f7) (eof-object? . h50f6) (eof-object . h50f5) (current-error-port . h50f4) (current-output-port . h50f3) (current-input-port . h50f2) (output-port? . h50f1) (input-port? . h50f0) (utf-8-codec . h50ef) (utf-16-codec . h50ee) (transcoder-error-handling-mode . h50ed) (transcoder-eol-style . h50ec) (transcoder-codec . h50eb) (transcoded-port . h50ea) (textual-port? . h50e9) (string->bytevector . h50e8) (standard-output-port . h50e7) (standard-input-port . h50e6) (standard-error-port . h50e5) (set-port-position! . h50e4) (put-u8 . h50e3) (put-string . h50e2) (put-datum . h50e1) (put-char . h50e0) (put-bytevector . h50df) (port? . h50de) (port-transcoder . h50dd) (port-position . h50dc) (port-has-set-port-position!? . h50db) (port-has-port-position? . h50da) (port-eof? . h50d9) (output-port-buffer-mode . h50d8) (open-string-output-port . h50d7) (open-string-input-port . h50d6) (open-file-output-port . h50d5) (open-file-input/output-port . h50d4) (open-file-input-port . h50d3) (open-bytevector-output-port . h50d2) (open-bytevector-input-port . h50d1) (native-transcoder . h50d0) (native-eol-style . h50cf) (make-transcoder . h50ce) (latin-1-codec . h50cd) (make-i/o-write-error . h4b9e) (make-i/o-read-error . h4b89) (make-i/o-port-error . h4c3f) (make-i/o-invalid-position-error . h4bb5) (make-i/o-filename-error . h4bd0) (make-i/o-file-protection-error . h4be9) (make-i/o-file-is-read-only-error . h4bfe) (make-i/o-file-does-not-exist-error . h4c28) (make-i/o-file-already-exists-error . h4c13) (make-i/o-error . h4b74) (make-i/o-encoding-error . h4c6f) (make-i/o-decoding-error . h4c58) (make-custom-textual-output-port . h50cc) (make-custom-textual-input/output-port . h50cb) (make-custom-textual-input-port . h50ca) (make-custom-binary-output-port . h50c9) (make-custom-binary-input/output-port . h50c8) (make-custom-binary-input-port . h50c7) (make-bytevector . h50c6) (lookahead-u8 . h50c5) (lookahead-char . h50c4) (i/o-write-error? . h4ba0) (i/o-read-error? . h4b8b) (i/o-port-error? . h4c43) (i/o-invalid-position-error? . h4bb9) (i/o-filename-error? . h4bd4) (i/o-file-protection-error? . h4beb) (i/o-file-is-read-only-error? . h4c00) (i/o-file-does-not-exist-error? . h4c2a) (i/o-file-already-exists-error? . h4c15) (i/o-error? . h4b76) (i/o-error-position . h4bbb) (i/o-error-port . h4c45) (i/o-error-filename . h4bd6) (i/o-encoding-error? . h4c73) (i/o-encoding-error-char . h4c75) (i/o-decoding-error? . h4c5a) (get-u8 . h50c3) (get-string-n! . h50c2) (get-string-n . h50c1) (get-string-all . h50c0) (get-line . h50bf) (get-datum . h50be) (get-char . h50bd) (get-bytevector-some . h50bc) (get-bytevector-n! . h50bb) (get-bytevector-n . h50ba) (get-bytevector-all . h50b9) (flush-output-port . h50b8) (close-port . h50b7) (exit . h50af) (command-line . h4daa) (string-fill! . h50ae) (string-set! . h50ad) (set-cdr! . h50ac) (set-car! . h50ab) (remove . h50aa) (remv . h50a9) (remp . h50a8) (remq . h50a7) (partition . h50a6) (memv . h50a5) (memq . h50a4) (memp . h50a3) (member . h50a2) (exists . h50a1) (for-all . h50a0) (fold-right . h509f) (fold-left . h509e) (find . h509d) (filter . h509c) (cons* . h509b) (assv . h509a) (assq . h5099) (assp . h5098) (assoc . h5097) (call-with-string-output-port . h5096) (call-with-port . h5095) (call-with-bytevector-output-port . h5094) (bytevector->string . h5093) (buffer-mode? . h5092) (binary-port? . h5091) (with-exception-handler . h5090) (raise-continuable . h508f) (raise . h508e) (eval . h2fc2) (environment . h2fba) (make-enumeration . h508d) (enum-set=? . h508c) (enum-set-universe . h508b) (enum-set-union . h508a) (enum-set-subset? . h5089) (enum-set-projection . h5088) (enum-set-member? . h5087) (enum-set-intersection . h5086) (enum-set-indexer . h5085) (enum-set-difference . h5084) (enum-set-constructor . h5083) (enum-set-complement . h5082) (enum-set->list . h5081) (who-condition? . h4aea) (warning? . h4a62) (violation? . h4aa1) (undefined-violation? . h4b61) (syntax-violation? . h4b48) (syntax-violation-subform . h4b4c) (syntax-violation-form . h4b4a) (syntax-violation . h2fe2) (simple-conditions . h5080) (serious-condition? . h4a77) (non-continuable-violation? . h4b01) (message-condition? . h4a4b) (make-who-condition . h4ae6) (make-warning . h4a60) (make-violation . h4a9f) (make-undefined-violation . h4b5f) (make-syntax-violation . h4b42) (make-serious-condition . h4a75) (make-non-continuable-violation . h4aff) (make-message-condition . h4a47) (make-lexical-violation . h4b29) (make-irritants-condition . h4acb) (make-implementation-restriction-violation . h4b14) (make-error . h4a8a) (make-assertion-violation . h4ab4) (lexical-violation? . h4b2b) (irritants-condition? . h4acf) (implementation-restriction-violation? . h4b16) (error? . h4a8c) (condition-who . h4aec) (condition-predicate . h507f) (condition-message . h4a4d) (condition-irritants . h4ad1) (condition-accessor . h507e) (condition . h507d) (assertion-violation? . h4ab6) (condition? . h507c) (utf32->string . h507b) (utf16->string . h507a) (utf8->string . h5079) (uint-list->bytevector . h5078) (u8-list->bytevector . h5077) (string->utf8 . h5076) (string->utf32 . h5075) (string->utf16 . h5074) (sint-list->bytevector . h5073) (native-endianness . h5072) (bytevector? . h5071) (bytevector=? . h5070) (bytevector-uint-set! . h506f) (bytevector-uint-ref . h506e) (bytevector-u8-set! . h506d) (bytevector-u8-ref . h506c) (bytevector-u64-set! . h506b) (bytevector-u64-ref . h506a) (bytevector-u64-native-set! . h5069) (bytevector-u64-native-ref . h5068) (bytevector-u32-set! . h5067) (bytevector-u32-ref . h5066) (bytevector-u32-native-set! . h5065) (bytevector-u32-native-ref . h5064) (bytevector-u16-set! . h5063) (bytevector-u16-ref . h5062) (bytevector-u16-native-set! . h5061) (bytevector-u16-native-ref . h5060) (bytevector-sint-set! . h505f) (bytevector-sint-ref . h505e) (bytevector-s8-set! . h505d) (bytevector-s8-ref . h505c) (bytevector-s64-set! . h505b) (bytevector-s64-ref . h505a) (bytevector-s64-native-set! . h5059) (bytevector-s64-native-ref . h5058) (bytevector-s32-set! . h5057) (bytevector-s32-ref . h5056) (bytevector-s32-native-set! . h5055) (bytevector-s32-native-ref . h5054) (bytevector-s16-set! . h5053) (bytevector-s16-ref . h5052) (bytevector-s16-native-set! . h5051) (bytevector-s16-native-ref . h5050) (bytevector-length . h504f) (bytevector-ieee-single-ref . h504e) (bytevector-ieee-single-set! . h504d) (bytevector-ieee-single-native-set! . h504c) (bytevector-ieee-single-native-ref . h504b) (bytevector-ieee-double-set! . h504a) (bytevector-ieee-double-ref . h5049) (bytevector-ieee-double-native-set! . h5048) (bytevector-ieee-double-native-ref . h5047) (bytevector-fill! . h5046) (bytevector-copy! . h5045) (bytevector-copy . h5044) (bytevector->uint-list . h5043) (bytevector->u8-list . h5042) (bytevector->sint-list . h5041) (no-nans-violation? . h4c9f) (no-infinities-violation? . h4c8a) (make-no-nans-violation . h4c9d) (make-no-infinities-violation . h4c88) (real->flonum . h5040) (flzero? . h503f) (fltruncate . h503e) (fltan . h503d) (flsqrt . h503c) (flsin . h503b) (flround . h503a) (flpositive? . h5039) (flonum? . h5038) (flodd? . h5037) (flnumerator . h5036) (flnegative? . h5035) (flnan? . h5034) (flmod0 . h5033) (flmod . h5032) (flmin . h5031) (flmax . h5030) (fllog . h502f) (flinteger? . h502e) (flinfinite? . h502d) (flfloor . h502c) (flfinite? . h502b) (flexpt . h502a) (flexp . h5029) (fleven? . h5028) (fldiv0-and-mod0 . h5027) (fldiv0 . h5026) (fldiv-and-mod . h5025) (fldiv . h5024) (fldenominator . h5023) (flcos . h5022) (flceiling . h5021) (flatan . h5020) (flasin . h501f) (flacos . h501e) (flabs . h501d) (fl>? . h501c) (fl>=? . h501b) (fl=? . h501a) (fl<? . h5019) (fl<=? . h5018) (fl/ . h5017) (fl- . h5016) (fl+ . h5015) (fl* . h5014) (fixnum->flonum . h5013) (fxzero? . h5012) (fxxor . h5011) (fxrotate-bit-field . h5010) (fxreverse-bit-field . h500f) (fxpositive? . h500e) (fxodd? . h500d) (fxnot . h500c) (fxnegative? . h500b) (fxmod0 . h500a) (fxmod . h5009) (fxmin . h5008) (fxmax . h5007) (fxlength . h5006) (fxior . h5005) (fxif . h5004) (fxfirst-bit-set . h5003) (fxeven? . h5002) (fxdiv0-and-mod0 . h5001) (fxdiv0 . h5000) (fxdiv-and-mod . h4fff) (fxdiv . h4ffe) (fxcopy-bit-field . h4ffd) (fxcopy-bit . h4ffc) (fxbit-set? . h4ffb) (fxbit-field . h4ffa) (fxbit-count . h4ff9) (fxarithmetic-shift-right . h4ff8) (fxarithmetic-shift-left . h4ff7) (fxarithmetic-shift . h4ff6) (fxand . h4ff5) (fx>? . h4ff4) (fx>=? . h4ff3) (fx=? . h4ff2) (fx<? . h4ff1) (fx<=? . h4ff0) (fx-/carry . h4fef) (fx- . h4fee) (fx+/carry . h4fed) (fx+ . h4fec) (fx*/carry . h4feb) (fx* . h4fea) (greatest-fixnum . h4fe9) (least-fixnum . h4fe8) (fixnum-width . h4fe7) (fixnum? . h4fe6) (bitwise-rotate-bit-field . h4fe5) (bitwise-reverse-bit-field . h4fe4) (bitwise-length . h4fe3) (bitwise-if . h4fe2) (bitwise-first-bit-set . h4fe1) (bitwise-copy-bit-field . h4fe0) (bitwise-copy-bit . h4fdf) (bitwise-bit-set? . h4fde) (bitwise-bit-field . h4fdd) (bitwise-bit-count . h4fdc) (bitwise-xor . h4fdb) (bitwise-ior . h4fda) (bitwise-and . h4fd9) (bitwise-not . h4fd8) (bitwise-arithmetic-shift-right . h4fd7) (bitwise-arithmetic-shift-left . h4fd6) (bitwise-arithmetic-shift . h4fd5) (zero? . h4fd4) (vector? . h4fd3) (vector-set! . h4fd2) (vector-ref . h4fd1) (vector-map . h4fd0) (vector-length . h4fcf) (vector-for-each . h4fce) (vector-fill! . h4fcd) (vector->list . h4fcc) (vector . h4fcb) (values . h4fca) (truncate . h4fc9) (tan . h4fc8) (symbol? . h4fc7) (symbol=? . h4fc6) (symbol->string . h4fc5) (substring . h4fc4) (string? . h4fc3) (string>? . h4fc2) (string>=? . h4fc1) (string=? . h4fc0) (string<? . h4fbf) (string<=? . h4fbe) (string-ref . h4fbd) (string-length . h4fbc) (string-for-each . h4fbb) (string-copy . h4fba) (string-append . h4fb9) (string->symbol . h4fb8) (string->number . h4fb7) (string->list . h4fb6) (string . h4fb5) (sqrt . h4fb4) (sin . h4fb3) (round . h4fb2) (reverse . h4fb1) (real? . h4fb0) (real-valued? . h4faf) (real-part . h4fae) (rationalize . h4fad) (rational? . h4fac) (rational-valued? . h4fab) (procedure? . h4faa) (positive? . h4fa9) (pair? . h4fa8) (odd? . h4fa7) (numerator . h4fa6) (number? . h4fa5) (number->string . h4fa4) (null? . h4fa3) (not . h4fa2) (negative? . h4fa1) (nan? . h4fa0) (min . h4f9f) (max . h4f9e) (map . h4f9d) (make-vector . h4f9c) (make-string . h4f9b) (make-rectangular . h4f9a) (make-polar . h4f99) (magnitude . h4f98) (log . h4f97) (list? . h4f96) (list-tail . h4f95) (list-ref . h4f94) (list->vector . h4f93) (list->string . h4f92) (list . h4f91) (length . h4f90) (lcm . h4f8f) (integer? . h4f8e) (integer-valued? . h4f8d) (integer->char . h4f8c) (infinite? . h4f8b) (inexact? . h4f8a) (inexact . h4f89) (imag-part . h4f88) (gcd . h4f87) (for-each . h4f86) (floor . h4f85) (finite? . h4f84) (expt . h4f83) (exp . h4f82) (exact? . h4f81) (exact-integer-sqrt . h4f80) (exact . h4f7f) (even? . h4f7e) (error . h4f7d) (eqv? . h4f7c) (equal? . h4f7b) (eq? . h4f7a) (dynamic-wind . h4f79) (div0-and-mod0 . h4f78) (mod0 . h4f77) (div0 . h4f76) (div-and-mod . h4f75) (mod . h4f74) (div . h4f73) (denominator . h4f72) (cos . h4f71) (cons . h4f70) (complex? . h4f6f) (char? . h4f6e) (char>? . h4f6d) (char>=? . h4f6c) (char=? . h4f6b) (char<? . h4f6a) (char<=? . h4f69) (char->integer . h4f68) (ceiling . h4f67) (call-with-values . h4f66) (call/cc . h4f65) (call-with-current-continuation . h4f64) (cddddr . h4f63) (cdddar . h4f62) (cddadr . h4f61) (cddaar . h4f60) (cdaddr . h4f5f) (cdadar . h4f5e) (cdaadr . h4f5d) (cdaaar . h4f5c) (cadddr . h4f5b) (caddar . h4f5a) (cadadr . h4f59) (cadaar . h4f58) (caaddr . h4f57) (caadar . h4f56) (caaadr . h4f55) (caaaar . h4f54) (cdddr . h4f53) (cddar . h4f52) (cdadr . h4f51) (cdaar . h4f50) (caddr . h4f4f) (cadar . h4f4e) (caadr . h4f4d) (caaar . h4f4c) (cddr . h4f4b) (cdar . h4f4a) (cadr . h4f49) (caar . h4f48) (cdr . h4f47) (car . h4f46) (boolean? . h4f45) (boolean=? . h4f44) (atan . h4f43) (assertion-violation . h4f42) (asin . h4f41) (apply . h4f40) (append . h4f3f) (angle . h4f3e) (acos . h4f3d) (abs . h4f3c) (/ . h4f3b) (* . h4f3a) (- . h4f39) (+ . h4f38) (>= . h4f37) (> . h4f36) (= . h4f35) (<= . h4f34) (< . h4f33) (library . h4f32) (&no-nans . h4f31) (&no-infinities . h4f30) (&i/o-encoding . h4f2f) (&i/o-decoding . h4f2e) (&i/o-port . h4f2d) (&i/o-file-does-not-exist . h4f2c) (&i/o-file-already-exists . h4f2b) (&i/o-file-is-read-only . h4f2a) (&i/o-file-protection . h4f29) (&i/o-filename . h4f28) (&i/o-invalid-position . h4f27) (&i/o-write . h4f26) (&i/o-read . h4f25) (&i/o . h4f24) (&undefined . h4f23) (&syntax . h4f22) (&lexical . h4f21) (&implementation-restriction . h4f20) (&non-continuable . h4f1f) (&who . h4f1e) (&irritants . h4f1d) (&assertion . h4f1c) (&violation . h4f1b) (&error . h4f1a) (&serious . h4f19) (&warning . h4f18) (&message . h4f17) (&condition . h4f16) (define-condition-type . h4f15) (define-enumeration . h4f14) (define-record-type . h4f13) (parent-rtd . h4f12) (nongenerative . h4f11) (opaque . h4f10) (sealed . h4f0f) (protocol . h4f0e) (parent . h4f0d) (immutable . h4f0c) (mutable . h4f0b) (fields . h4f0a) (error-handling-mode . h4f09) (file-options . h4f08) (buffer-mode . h4f07) (eol-style . h4f06) (guard . h4f05) (unsyntax-splicing . h4f02) (unsyntax . h4f01) (unquote-splicing . h4f00) (unquote . h4eff) (_ . h4efe) (else . h4efd) (=> . h4efc) (... . h4efb) (assert . h4efa) (endianness . h4ef9) (time . h4ef7) (do . h4ef6) (cond . h4ef5) (let* . h4ef4) (let . h4ef3) (let*-values . h4ef2) (let-values . h4ef1) (identifier-syntax . h4ef0) (with-syntax . h4eef) (quasisyntax . h4eee) (quasiquote . h4eed) (syntax-rules . h4eec) (include . h4eeb) (record-constructor-descriptor . h4ee9) (record-type-descriptor . h4ee8) (case . h4ee7) (unless . h4ee5) (when . h4ee4) (or . h4ee3) (and . h4ee2) (if . h4ee1) (letrec* . h4ee0) (letrec . h4edf) (case-lambda . h4edd) (lambda . h4edc) (syntax . h4edb) (syntax-case . h4eda) (quote . h4ed9) (letrec-syntax . h4ed7) (let-syntax . h4ed6) (set! . h4ed5) (import . h4ed4) (begin . h4ed3) (define-syntax . h4ed1) (define . h4ed0)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51ea '(psyntax null-environment-5) '() '() '() '() '((make-promise . h50b0) (unquote-splicing . h4f00) (unquote . h4eff) (_ . h4efe) (else . h4efd) (=> . h4efc) (... . h4efb) (delay . h4ef8) (do . h4ef6) (cond . h4ef5) (let* . h4ef4) (let . h4ef3) (quasiquote . h4eed) (syntax-rules . h4eec) (case . h4ee7) (or . h4ee3) (and . h4ee2) (if . h4ee1) (letrec . h4edf) (lambda . h4edc) (quote . h4ed9) (letrec-syntax . h4ed7) (let-syntax . h4ed6) (set! . h4ed5) (begin . h4ed3) (define-syntax . h4ed1) (define . h4ed0)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51eb '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . h5145) (string-ci>=? . h5144) (string-ci=? . h5143) (string-ci<? . h5142) (string-ci<=? . h5141) (char-whitespace? . h5140) (char-upper-case? . h513f) (char-numeric? . h513d) (char-lower-case? . h513c) (char-upcase . h513a) (char-downcase . h5137) (char-ci>? . h5136) (char-ci>=? . h5135) (char-ci=? . h5134) (char-ci<? . h5133) (char-ci<=? . h5132) (char-alphabetic? . h5131) (call-with-output-file . h5105) (call-with-input-file . h5104) (write-char . h5103) (write . h5102) (with-output-to-file . h5101) (with-input-from-file . h5100) (read-char . h50ff) (read . h50fe) (peek-char . h50fd) (open-output-file . h50fc) (open-input-file . h50fb) (newline . h50fa) (display . h50f9) (close-output-port . h50f8) (close-input-port . h50f7) (eof-object . h50f5) (current-output-port . h50f3) (current-input-port . h50f2) (output-port? . h50f1) (input-port? . h50f0) (scheme-report-environment . h2fbe) (quotient . h50b6) (null-environment . h2fbc) (remainder . h50b5) (modulo . h50b4) (inexact->exact . h50b3) (force . h50b2) (exact->inexact . h50b1) (make-promise . h50b0) (string-fill! . h50ae) (string-set! . h50ad) (set-cdr! . h50ac) (set-car! . h50ab) (memv . h50a5) (memq . h50a4) (member . h50a2) (assv . h509a) (assq . h5099) (assoc . h5097) (eval . h2fc2) (zero? . h4fd4) (vector? . h4fd3) (vector-set! . h4fd2) (vector-ref . h4fd1) (vector-length . h4fcf) (vector-fill! . h4fcd) (vector->list . h4fcc) (vector . h4fcb) (values . h4fca) (truncate . h4fc9) (tan . h4fc8) (symbol? . h4fc7) (symbol->string . h4fc5) (substring . h4fc4) (string? . h4fc3) (string>? . h4fc2) (string>=? . h4fc1) (string=? . h4fc0) (string<? . h4fbf) (string<=? . h4fbe) (string-ref . h4fbd) (string-length . h4fbc) (string-copy . h4fba) (string-append . h4fb9) (string->symbol . h4fb8) (string->number . h4fb7) (string->list . h4fb6) (string . h4fb5) (sqrt . h4fb4) (sin . h4fb3) (round . h4fb2) (reverse . h4fb1) (real? . h4fb0) (real-part . h4fae) (rationalize . h4fad) (rational? . h4fac) (procedure? . h4faa) (positive? . h4fa9) (pair? . h4fa8) (odd? . h4fa7) (numerator . h4fa6) (number? . h4fa5) (number->string . h4fa4) (not . h4fa2) (negative? . h4fa1) (min . h4f9f) (max . h4f9e) (map . h4f9d) (make-vector . h4f9c) (make-string . h4f9b) (make-rectangular . h4f9a) (make-polar . h4f99) (magnitude . h4f98) (log . h4f97) (list? . h4f96) (list-tail . h4f95) (list-ref . h4f94) (list->vector . h4f93) (list->string . h4f92) (list . h4f91) (length . h4f90) (lcm . h4f8f) (integer? . h4f8e) (integer->char . h4f8c) (inexact? . h4f8a) (imag-part . h4f88) (gcd . h4f87) (for-each . h4f86) (floor . h4f85) (expt . h4f83) (exp . h4f82) (exact? . h4f81) (even? . h4f7e) (eqv? . h4f7c) (equal? . h4f7b) (eq? . h4f7a) (dynamic-wind . h4f79) (denominator . h4f72) (cos . h4f71) (cons . h4f70) (complex? . h4f6f) (char? . h4f6e) (char>? . h4f6d) (char>=? . h4f6c) (char=? . h4f6b) (char<? . h4f6a) (char<=? . h4f69) (char->integer . h4f68) (ceiling . h4f67) (call-with-values . h4f66) (call-with-current-continuation . h4f64) (cddddr . h4f63) (cdddar . h4f62) (cddadr . h4f61) (cddaar . h4f60) (cdaddr . h4f5f) (cdadar . h4f5e) (cdaadr . h4f5d) (cdaaar . h4f5c) (cadddr . h4f5b) (caddar . h4f5a) (cadadr . h4f59) (cadaar . h4f58) (caaddr . h4f57) (caadar . h4f56) (caaadr . h4f55) (caaaar . h4f54) (cdddr . h4f53) (cddar . h4f52) (cdadr . h4f51) (cdaar . h4f50) (caddr . h4f4f) (cadar . h4f4e) (caadr . h4f4d) (caaar . h4f4c) (cddr . h4f4b) (cdar . h4f4a) (cadr . h4f49) (caar . h4f48) (cdr . h4f47) (car . h4f46) (boolean? . h4f45) (atan . h4f43) (asin . h4f41) (apply . h4f40) (append . h4f3f) (angle . h4f3e) (acos . h4f3d) (abs . h4f3c) (/ . h4f3b) (* . h4f3a) (- . h4f39) (+ . h4f38) (>= . h4f37) (> . h4f36) (= . h4f35) (<= . h4f34) (< . h4f33) (unquote-splicing . h4f00) (unquote . h4eff) (else . h4efd) (=> . h4efc) (... . h4efb) (delay . h4ef8) (do . h4ef6) (cond . h4ef5) (let* . h4ef4) (let . h4ef3) (quasiquote . h4eed) (syntax-rules . h4eec) (case . h4ee7) (or . h4ee3) (and . h4ee2) (if . h4ee1) (letrec . h4edf) (lambda . h4edc) (quote . h4ed9) (letrec-syntax . h4ed7) (let-syntax . h4ed6) (set! . h4ed5) (begin . h4ed3) (define-syntax . h4ed1) (define . h4ed0)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51ec '(psyntax modules) '() '() '() '() '((module . h4ed2)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51ed '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51ee '(rnrs) '(6) '() '() '() '((regexp? . h51e1) (string-upcase . h514d) (string-titlecase . h514c) (string-normalize-nfkd . h514b) (string-normalize-nfkc . h514a) (string-normalize-nfd . h5149) (string-normalize-nfc . h5148) (string-foldcase . h5147) (string-downcase . h5146) (string-ci>? . h5145) (string-ci>=? . h5144) (string-ci=? . h5143) (string-ci<? . h5142) (string-ci<=? . h5141) (char-whitespace? . h5140) (char-upper-case? . h513f) (char-title-case? . h513e) (char-numeric? . h513d) (char-lower-case? . h513c) (char-general-category . h513b) (char-upcase . h513a) (char-titlecase . h5139) (char-foldcase . h5138) (char-downcase . h5137) (char-ci>? . h5136) (char-ci>=? . h5135) (char-ci=? . h5134) (char-ci<? . h5133) (char-ci<=? . h5132) (char-alphabetic? . h5131) (make-variable-transformer . h2d26) (identifier? . h2fe4) (generate-temporaries . h2fd0) (free-identifier=? . h2fd2) (syntax->datum . h2fe8) (datum->syntax . h2fe6) (bound-identifier=? . h2fd4) (record-type-descriptor? . h5130) (record-predicate . h512f) (record-mutator . h512e) (record-constructor . h512d) (record-accessor . h512c) (make-record-type-descriptor . h512b) (make-record-constructor-descriptor . h512a) (record? . h5129) (record-type-uid . h5128) (record-type-sealed? . h5127) (record-type-parent . h5126) (record-type-opaque? . h5125) (record-type-name . h5124) (record-type-generative? . h5123) (record-type-field-names . h5122) (record-rtd . h5121) (record-field-mutable? . h5120) (delete-file . h511f) (file-exists? . h511e) (vector-sort! . h511d) (vector-sort . h511c) (list-sort . h511b) (symbol-hash . h511a) (string-ci-hash . h5119) (string-hash . h5118) (equal-hash . h5117) (hashtable-equivalence-function . h5116) (make-hashtable . h5115) (hashtable-hash-function . h5114) (make-eqv-hashtable . h5113) (make-eq-hashtable . h5112) (hashtable? . h5111) (hashtable-update! . h5110) (hashtable-size . h510f) (hashtable-set! . h510e) (hashtable-ref . h510d) (hashtable-mutable? . h510c) (hashtable-keys . h510b) (hashtable-entries . h510a) (hashtable-delete! . h5109) (hashtable-copy . h5108) (hashtable-contains? . h5107) (hashtable-clear! . h5106) (call-with-output-file . h5105) (call-with-input-file . h5104) (write-char . h5103) (write . h5102) (with-output-to-file . h5101) (with-input-from-file . h5100) (read-char . h50ff) (read . h50fe) (peek-char . h50fd) (open-output-file . h50fc) (open-input-file . h50fb) (newline . h50fa) (display . h50f9) (close-output-port . h50f8) (close-input-port . h50f7) (eof-object? . h50f6) (eof-object . h50f5) (current-error-port . h50f4) (current-output-port . h50f3) (current-input-port . h50f2) (output-port? . h50f1) (input-port? . h50f0) (utf-8-codec . h50ef) (utf-16-codec . h50ee) (transcoder-error-handling-mode . h50ed) (transcoder-eol-style . h50ec) (transcoder-codec . h50eb) (transcoded-port . h50ea) (textual-port? . h50e9) (string->bytevector . h50e8) (standard-output-port . h50e7) (standard-input-port . h50e6) (standard-error-port . h50e5) (set-port-position! . h50e4) (put-u8 . h50e3) (put-string . h50e2) (put-datum . h50e1) (put-char . h50e0) (put-bytevector . h50df) (port? . h50de) (port-transcoder . h50dd) (port-position . h50dc) (port-has-set-port-position!? . h50db) (port-has-port-position? . h50da) (port-eof? . h50d9) (output-port-buffer-mode . h50d8) (open-string-output-port . h50d7) (open-string-input-port . h50d6) (open-file-output-port . h50d5) (open-file-input/output-port . h50d4) (open-file-input-port . h50d3) (open-bytevector-output-port . h50d2) (open-bytevector-input-port . h50d1) (native-transcoder . h50d0) (native-eol-style . h50cf) (make-transcoder . h50ce) (latin-1-codec . h50cd) (make-i/o-write-error . h4b9e) (make-i/o-read-error . h4b89) (make-i/o-port-error . h4c3f) (make-i/o-invalid-position-error . h4bb5) (make-i/o-filename-error . h4bd0) (make-i/o-file-protection-error . h4be9) (make-i/o-file-is-read-only-error . h4bfe) (make-i/o-file-does-not-exist-error . h4c28) (make-i/o-file-already-exists-error . h4c13) (make-i/o-error . h4b74) (make-i/o-encoding-error . h4c6f) (make-i/o-decoding-error . h4c58) (make-custom-textual-output-port . h50cc) (make-custom-textual-input/output-port . h50cb) (make-custom-textual-input-port . h50ca) (make-custom-binary-output-port . h50c9) (make-custom-binary-input/output-port . h50c8) (make-custom-binary-input-port . h50c7) (make-bytevector . h50c6) (lookahead-u8 . h50c5) (lookahead-char . h50c4) (i/o-write-error? . h4ba0) (i/o-read-error? . h4b8b) (i/o-port-error? . h4c43) (i/o-invalid-position-error? . h4bb9) (i/o-filename-error? . h4bd4) (i/o-file-protection-error? . h4beb) (i/o-file-is-read-only-error? . h4c00) (i/o-file-does-not-exist-error? . h4c2a) (i/o-file-already-exists-error? . h4c15) (i/o-error? . h4b76) (i/o-error-position . h4bbb) (i/o-error-port . h4c45) (i/o-error-filename . h4bd6) (i/o-encoding-error? . h4c73) (i/o-encoding-error-char . h4c75) (i/o-decoding-error? . h4c5a) (get-u8 . h50c3) (get-string-n! . h50c2) (get-string-n . h50c1) (get-string-all . h50c0) (get-line . h50bf) (get-datum . h50be) (get-char . h50bd) (get-bytevector-some . h50bc) (get-bytevector-n! . h50bb) (get-bytevector-n . h50ba) (get-bytevector-all . h50b9) (flush-output-port . h50b8) (close-port . h50b7) (exit . h50af) (command-line . h4daa) (remove . h50aa) (remv . h50a9) (remp . h50a8) (remq . h50a7) (partition . h50a6) (memv . h50a5) (memq . h50a4) (memp . h50a3) (member . h50a2) (exists . h50a1) (for-all . h50a0) (fold-right . h509f) (fold-left . h509e) (find . h509d) (filter . h509c) (cons* . h509b) (assv . h509a) (assq . h5099) (assp . h5098) (assoc . h5097) (call-with-string-output-port . h5096) (call-with-port . h5095) (call-with-bytevector-output-port . h5094) (bytevector->string . h5093) (buffer-mode? . h5092) (binary-port? . h5091) (with-exception-handler . h5090) (raise-continuable . h508f) (raise . h508e) (make-enumeration . h508d) (enum-set=? . h508c) (enum-set-universe . h508b) (enum-set-union . h508a) (enum-set-subset? . h5089) (enum-set-projection . h5088) (enum-set-member? . h5087) (enum-set-intersection . h5086) (enum-set-indexer . h5085) (enum-set-difference . h5084) (enum-set-constructor . h5083) (enum-set-complement . h5082) (enum-set->list . h5081) (who-condition? . h4aea) (warning? . h4a62) (violation? . h4aa1) (undefined-violation? . h4b61) (syntax-violation? . h4b48) (syntax-violation-subform . h4b4c) (syntax-violation-form . h4b4a) (syntax-violation . h2fe2) (simple-conditions . h5080) (serious-condition? . h4a77) (non-continuable-violation? . h4b01) (message-condition? . h4a4b) (make-who-condition . h4ae6) (make-warning . h4a60) (make-violation . h4a9f) (make-undefined-violation . h4b5f) (make-syntax-violation . h4b42) (make-serious-condition . h4a75) (make-non-continuable-violation . h4aff) (make-message-condition . h4a47) (make-lexical-violation . h4b29) (make-irritants-condition . h4acb) (make-implementation-restriction-violation . h4b14) (make-error . h4a8a) (make-assertion-violation . h4ab4) (lexical-violation? . h4b2b) (irritants-condition? . h4acf) (implementation-restriction-violation? . h4b16) (error? . h4a8c) (condition-who . h4aec) (condition-predicate . h507f) (condition-message . h4a4d) (condition-irritants . h4ad1) (condition-accessor . h507e) (condition . h507d) (assertion-violation? . h4ab6) (condition? . h507c) (utf32->string . h507b) (utf16->string . h507a) (utf8->string . h5079) (uint-list->bytevector . h5078) (u8-list->bytevector . h5077) (string->utf8 . h5076) (string->utf32 . h5075) (string->utf16 . h5074) (sint-list->bytevector . h5073) (native-endianness . h5072) (bytevector? . h5071) (bytevector=? . h5070) (bytevector-uint-set! . h506f) (bytevector-uint-ref . h506e) (bytevector-u8-set! . h506d) (bytevector-u8-ref . h506c) (bytevector-u64-set! . h506b) (bytevector-u64-ref . h506a) (bytevector-u64-native-set! . h5069) (bytevector-u64-native-ref . h5068) (bytevector-u32-set! . h5067) (bytevector-u32-ref . h5066) (bytevector-u32-native-set! . h5065) (bytevector-u32-native-ref . h5064) (bytevector-u16-set! . h5063) (bytevector-u16-ref . h5062) (bytevector-u16-native-set! . h5061) (bytevector-u16-native-ref . h5060) (bytevector-sint-set! . h505f) (bytevector-sint-ref . h505e) (bytevector-s8-set! . h505d) (bytevector-s8-ref . h505c) (bytevector-s64-set! . h505b) (bytevector-s64-ref . h505a) (bytevector-s64-native-set! . h5059) (bytevector-s64-native-ref . h5058) (bytevector-s32-set! . h5057) (bytevector-s32-ref . h5056) (bytevector-s32-native-set! . h5055) (bytevector-s32-native-ref . h5054) (bytevector-s16-set! . h5053) (bytevector-s16-ref . h5052) (bytevector-s16-native-set! . h5051) (bytevector-s16-native-ref . h5050) (bytevector-length . h504f) (bytevector-ieee-single-ref . h504e) (bytevector-ieee-single-set! . h504d) (bytevector-ieee-single-native-set! . h504c) (bytevector-ieee-single-native-ref . h504b) (bytevector-ieee-double-set! . h504a) (bytevector-ieee-double-ref . h5049) (bytevector-ieee-double-native-set! . h5048) (bytevector-ieee-double-native-ref . h5047) (bytevector-fill! . h5046) (bytevector-copy! . h5045) (bytevector-copy . h5044) (bytevector->uint-list . h5043) (bytevector->u8-list . h5042) (bytevector->sint-list . h5041) (no-nans-violation? . h4c9f) (no-infinities-violation? . h4c8a) (make-no-nans-violation . h4c9d) (make-no-infinities-violation . h4c88) (real->flonum . h5040) (flzero? . h503f) (fltruncate . h503e) (fltan . h503d) (flsqrt . h503c) (flsin . h503b) (flround . h503a) (flpositive? . h5039) (flonum? . h5038) (flodd? . h5037) (flnumerator . h5036) (flnegative? . h5035) (flnan? . h5034) (flmod0 . h5033) (flmod . h5032) (flmin . h5031) (flmax . h5030) (fllog . h502f) (flinteger? . h502e) (flinfinite? . h502d) (flfloor . h502c) (flfinite? . h502b) (flexpt . h502a) (flexp . h5029) (fleven? . h5028) (fldiv0-and-mod0 . h5027) (fldiv0 . h5026) (fldiv-and-mod . h5025) (fldiv . h5024) (fldenominator . h5023) (flcos . h5022) (flceiling . h5021) (flatan . h5020) (flasin . h501f) (flacos . h501e) (flabs . h501d) (fl>? . h501c) (fl>=? . h501b) (fl=? . h501a) (fl<? . h5019) (fl<=? . h5018) (fl/ . h5017) (fl- . h5016) (fl+ . h5015) (fl* . h5014) (fixnum->flonum . h5013) (fxzero? . h5012) (fxxor . h5011) (fxrotate-bit-field . h5010) (fxreverse-bit-field . h500f) (fxpositive? . h500e) (fxodd? . h500d) (fxnot . h500c) (fxnegative? . h500b) (fxmod0 . h500a) (fxmod . h5009) (fxmin . h5008) (fxmax . h5007) (fxlength . h5006) (fxior . h5005) (fxif . h5004) (fxfirst-bit-set . h5003) (fxeven? . h5002) (fxdiv0-and-mod0 . h5001) (fxdiv0 . h5000) (fxdiv-and-mod . h4fff) (fxdiv . h4ffe) (fxcopy-bit-field . h4ffd) (fxcopy-bit . h4ffc) (fxbit-set? . h4ffb) (fxbit-field . h4ffa) (fxbit-count . h4ff9) (fxarithmetic-shift-right . h4ff8) (fxarithmetic-shift-left . h4ff7) (fxarithmetic-shift . h4ff6) (fxand . h4ff5) (fx>? . h4ff4) (fx>=? . h4ff3) (fx=? . h4ff2) (fx<? . h4ff1) (fx<=? . h4ff0) (fx-/carry . h4fef) (fx- . h4fee) (fx+/carry . h4fed) (fx+ . h4fec) (fx*/carry . h4feb) (fx* . h4fea) (greatest-fixnum . h4fe9) (least-fixnum . h4fe8) (fixnum-width . h4fe7) (fixnum? . h4fe6) (bitwise-rotate-bit-field . h4fe5) (bitwise-reverse-bit-field . h4fe4) (bitwise-length . h4fe3) (bitwise-if . h4fe2) (bitwise-first-bit-set . h4fe1) (bitwise-copy-bit-field . h4fe0) (bitwise-copy-bit . h4fdf) (bitwise-bit-set? . h4fde) (bitwise-bit-field . h4fdd) (bitwise-bit-count . h4fdc) (bitwise-xor . h4fdb) (bitwise-ior . h4fda) (bitwise-and . h4fd9) (bitwise-not . h4fd8) (bitwise-arithmetic-shift-right . h4fd7) (bitwise-arithmetic-shift-left . h4fd6) (bitwise-arithmetic-shift . h4fd5) (zero? . h4fd4) (vector? . h4fd3) (vector-set! . h4fd2) (vector-ref . h4fd1) (vector-map . h4fd0) (vector-length . h4fcf) (vector-for-each . h4fce) (vector-fill! . h4fcd) (vector->list . h4fcc) (vector . h4fcb) (values . h4fca) (truncate . h4fc9) (tan . h4fc8) (symbol? . h4fc7) (symbol=? . h4fc6) (symbol->string . h4fc5) (substring . h4fc4) (string? . h4fc3) (string>? . h4fc2) (string>=? . h4fc1) (string=? . h4fc0) (string<? . h4fbf) (string<=? . h4fbe) (string-ref . h4fbd) (string-length . h4fbc) (string-for-each . h4fbb) (string-copy . h4fba) (string-append . h4fb9) (string->symbol . h4fb8) (string->number . h4fb7) (string->list . h4fb6) (string . h4fb5) (sqrt . h4fb4) (sin . h4fb3) (round . h4fb2) (reverse . h4fb1) (real? . h4fb0) (real-valued? . h4faf) (real-part . h4fae) (rationalize . h4fad) (rational? . h4fac) (rational-valued? . h4fab) (procedure? . h4faa) (positive? . h4fa9) (pair? . h4fa8) (odd? . h4fa7) (numerator . h4fa6) (number? . h4fa5) (number->string . h4fa4) (null? . h4fa3) (not . h4fa2) (negative? . h4fa1) (nan? . h4fa0) (min . h4f9f) (max . h4f9e) (map . h4f9d) (make-vector . h4f9c) (make-string . h4f9b) (make-rectangular . h4f9a) (make-polar . h4f99) (magnitude . h4f98) (log . h4f97) (list? . h4f96) (list-tail . h4f95) (list-ref . h4f94) (list->vector . h4f93) (list->string . h4f92) (list . h4f91) (length . h4f90) (lcm . h4f8f) (integer? . h4f8e) (integer-valued? . h4f8d) (integer->char . h4f8c) (infinite? . h4f8b) (inexact? . h4f8a) (inexact . h4f89) (imag-part . h4f88) (gcd . h4f87) (for-each . h4f86) (floor . h4f85) (finite? . h4f84) (expt . h4f83) (exp . h4f82) (exact? . h4f81) (exact-integer-sqrt . h4f80) (exact . h4f7f) (even? . h4f7e) (error . h4f7d) (eqv? . h4f7c) (equal? . h4f7b) (eq? . h4f7a) (dynamic-wind . h4f79) (div0-and-mod0 . h4f78) (mod0 . h4f77) (div0 . h4f76) (div-and-mod . h4f75) (mod . h4f74) (div . h4f73) (denominator . h4f72) (cos . h4f71) (cons . h4f70) (complex? . h4f6f) (char? . h4f6e) (char>? . h4f6d) (char>=? . h4f6c) (char=? . h4f6b) (char<? . h4f6a) (char<=? . h4f69) (char->integer . h4f68) (ceiling . h4f67) (call-with-values . h4f66) (call/cc . h4f65) (call-with-current-continuation . h4f64) (cddddr . h4f63) (cdddar . h4f62) (cddadr . h4f61) (cddaar . h4f60) (cdaddr . h4f5f) (cdadar . h4f5e) (cdaadr . h4f5d) (cdaaar . h4f5c) (cadddr . h4f5b) (caddar . h4f5a) (cadadr . h4f59) (cadaar . h4f58) (caaddr . h4f57) (caadar . h4f56) (caaadr . h4f55) (caaaar . h4f54) (cdddr . h4f53) (cddar . h4f52) (cdadr . h4f51) (cdaar . h4f50) (caddr . h4f4f) (cadar . h4f4e) (caadr . h4f4d) (caaar . h4f4c) (cddr . h4f4b) (cdar . h4f4a) (cadr . h4f49) (caar . h4f48) (cdr . h4f47) (car . h4f46) (boolean? . h4f45) (boolean=? . h4f44) (atan . h4f43) (assertion-violation . h4f42) (asin . h4f41) (apply . h4f40) (append . h4f3f) (angle . h4f3e) (acos . h4f3d) (abs . h4f3c) (/ . h4f3b) (* . h4f3a) (- . h4f39) (+ . h4f38) (>= . h4f37) (> . h4f36) (= . h4f35) (<= . h4f34) (< . h4f33) (&no-nans . h4f31) (&no-infinities . h4f30) (&i/o-encoding . h4f2f) (&i/o-decoding . h4f2e) (&i/o-port . h4f2d) (&i/o-file-does-not-exist . h4f2c) (&i/o-file-already-exists . h4f2b) (&i/o-file-is-read-only . h4f2a) (&i/o-file-protection . h4f29) (&i/o-filename . h4f28) (&i/o-invalid-position . h4f27) (&i/o-write . h4f26) (&i/o-read . h4f25) (&i/o . h4f24) (&undefined . h4f23) (&syntax . h4f22) (&lexical . h4f21) (&implementation-restriction . h4f20) (&non-continuable . h4f1f) (&who . h4f1e) (&irritants . h4f1d) (&assertion . h4f1c) (&violation . h4f1b) (&error . h4f1a) (&serious . h4f19) (&warning . h4f18) (&message . h4f17) (&condition . h4f16) (define-condition-type . h4f15) (define-enumeration . h4f14) (define-record-type . h4f13) (parent-rtd . h4f12) (nongenerative . h4f11) (opaque . h4f10) (sealed . h4f0f) (protocol . h4f0e) (parent . h4f0d) (immutable . h4f0c) (mutable . h4f0b) (fields . h4f0a) (error-handling-mode . h4f09) (file-options . h4f08) (buffer-mode . h4f07) (eol-style . h4f06) (guard . h4f05) (unsyntax-splicing . h4f02) (unsyntax . h4f01) (unquote-splicing . h4f00) (unquote . h4eff) (_ . h4efe) (else . h4efd) (=> . h4efc) (... . h4efb) (assert . h4efa) (endianness . h4ef9) (do . h4ef6) (cond . h4ef5) (let* . h4ef4) (let . h4ef3) (let*-values . h4ef2) (let-values . h4ef1) (identifier-syntax . h4ef0) (with-syntax . h4eef) (quasisyntax . h4eee) (quasiquote . h4eed) (syntax-rules . h4eec) (record-constructor-descriptor . h4ee9) (record-type-descriptor . h4ee8) (case . h4ee7) (unless . h4ee5) (when . h4ee4) (or . h4ee3) (and . h4ee2) (if . h4ee1) (letrec* . h4ee0) (letrec . h4edf) (case-lambda . h4edd) (lambda . h4edc) (syntax . h4edb) (syntax-case . h4eda) (quote . h4ed9) (letrec-syntax . h4ed7) (let-syntax . h4ed6) (set! . h4ed5) (begin . h4ed3) (define-syntax . h4ed1) (define . h4ed0)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51ef '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . h2fbe) (quotient . h50b6) (null-environment . h2fbc) (remainder . h50b5) (modulo . h50b4) (inexact->exact . h50b3) (force . h50b2) (exact->inexact . h50b1) (make-promise . h50b0) (delay . h4ef8)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f0 '(rnrs control) '(6) '() '() '() '((do . h4ef6) (unless . h4ee5) (when . h4ee4) (case-lambda . h4edd)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f1 '(rnrs eval) '(6) '() '() '() '((eval . h2fc2) (environment . h2fba)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f2 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . h50ac) (set-car! . h50ab)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f3 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . h50ae) (string-set! . h50ad)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f4 '(rnrs programs) '(6) '() '() '() '((exit . h50af) (command-line . h4daa)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f5 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . h2d26) (identifier? . h2fe4) (generate-temporaries . h2fd0) (free-identifier=? . h2fd2) (syntax->datum . h2fe8) (datum->syntax . h2fe6) (bound-identifier=? . h2fd4) (syntax-violation . h2fe2) (unsyntax-splicing . h4f02) (unsyntax . h4f01) (_ . h4efe) (... . h4efb) (with-syntax . h4eef) (quasisyntax . h4eee) (syntax . h4edb) (syntax-case . h4eda)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f6 '(rnrs files) '(6) '() '() '() '((delete-file . h511f) (file-exists? . h511e) (make-i/o-write-error . h4b9e) (make-i/o-read-error . h4b89) (make-i/o-port-error . h4c3f) (make-i/o-invalid-position-error . h4bb5) (make-i/o-filename-error . h4bd0) (make-i/o-file-protection-error . h4be9) (make-i/o-file-is-read-only-error . h4bfe) (make-i/o-file-does-not-exist-error . h4c28) (make-i/o-file-already-exists-error . h4c13) (make-i/o-error . h4b74) (i/o-write-error? . h4ba0) (i/o-read-error? . h4b8b) (i/o-port-error? . h4c43) (i/o-invalid-position-error? . h4bb9) (i/o-filename-error? . h4bd4) (i/o-file-protection-error? . h4beb) (i/o-file-is-read-only-error? . h4c00) (i/o-file-does-not-exist-error? . h4c2a) (i/o-file-already-exists-error? . h4c15) (i/o-error? . h4b76) (i/o-error-position . h4bbb) (i/o-error-port . h4c45) (i/o-error-filename . h4bd6) (&i/o-port . h4f2d) (&i/o-file-does-not-exist . h4f2c) (&i/o-file-already-exists . h4f2b) (&i/o-file-is-read-only . h4f2a) (&i/o-file-protection . h4f29) (&i/o-filename . h4f28) (&i/o-invalid-position . h4f27) (&i/o-write . h4f26) (&i/o-read . h4f25) (&i/o . h4f24)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f7 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . h511d) (vector-sort . h511c) (list-sort . h511b)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f8 '(rnrs base) '(6) '() '() '() '((zero? . h4fd4) (vector? . h4fd3) (vector-set! . h4fd2) (vector-ref . h4fd1) (vector-map . h4fd0) (vector-length . h4fcf) (vector-for-each . h4fce) (vector-fill! . h4fcd) (vector->list . h4fcc) (vector . h4fcb) (values . h4fca) (truncate . h4fc9) (tan . h4fc8) (symbol? . h4fc7) (symbol=? . h4fc6) (symbol->string . h4fc5) (substring . h4fc4) (string? . h4fc3) (string>? . h4fc2) (string>=? . h4fc1) (string=? . h4fc0) (string<? . h4fbf) (string<=? . h4fbe) (string-ref . h4fbd) (string-length . h4fbc) (string-for-each . h4fbb) (string-copy . h4fba) (string-append . h4fb9) (string->symbol . h4fb8) (string->number . h4fb7) (string->list . h4fb6) (string . h4fb5) (sqrt . h4fb4) (sin . h4fb3) (round . h4fb2) (reverse . h4fb1) (real? . h4fb0) (real-valued? . h4faf) (real-part . h4fae) (rationalize . h4fad) (rational? . h4fac) (rational-valued? . h4fab) (procedure? . h4faa) (positive? . h4fa9) (pair? . h4fa8) (odd? . h4fa7) (numerator . h4fa6) (number? . h4fa5) (number->string . h4fa4) (null? . h4fa3) (not . h4fa2) (negative? . h4fa1) (nan? . h4fa0) (min . h4f9f) (max . h4f9e) (map . h4f9d) (make-vector . h4f9c) (make-string . h4f9b) (make-rectangular . h4f9a) (make-polar . h4f99) (magnitude . h4f98) (log . h4f97) (list? . h4f96) (list-tail . h4f95) (list-ref . h4f94) (list->vector . h4f93) (list->string . h4f92) (list . h4f91) (length . h4f90) (lcm . h4f8f) (integer? . h4f8e) (integer-valued? . h4f8d) (integer->char . h4f8c) (infinite? . h4f8b) (inexact? . h4f8a) (inexact . h4f89) (imag-part . h4f88) (gcd . h4f87) (for-each . h4f86) (floor . h4f85) (finite? . h4f84) (expt . h4f83) (exp . h4f82) (exact? . h4f81) (exact-integer-sqrt . h4f80) (exact . h4f7f) (even? . h4f7e) (error . h4f7d) (eqv? . h4f7c) (equal? . h4f7b) (eq? . h4f7a) (dynamic-wind . h4f79) (div0-and-mod0 . h4f78) (mod0 . h4f77) (div0 . h4f76) (div-and-mod . h4f75) (mod . h4f74) (div . h4f73) (denominator . h4f72) (cos . h4f71) (cons . h4f70) (complex? . h4f6f) (char? . h4f6e) (char>? . h4f6d) (char>=? . h4f6c) (char=? . h4f6b) (char<? . h4f6a) (char<=? . h4f69) (char->integer . h4f68) (ceiling . h4f67) (call-with-values . h4f66) (call/cc . h4f65) (call-with-current-continuation . h4f64) (cddddr . h4f63) (cdddar . h4f62) (cddadr . h4f61) (cddaar . h4f60) (cdaddr . h4f5f) (cdadar . h4f5e) (cdaadr . h4f5d) (cdaaar . h4f5c) (cadddr . h4f5b) (caddar . h4f5a) (cadadr . h4f59) (cadaar . h4f58) (caaddr . h4f57) (caadar . h4f56) (caaadr . h4f55) (caaaar . h4f54) (cdddr . h4f53) (cddar . h4f52) (cdadr . h4f51) (cdaar . h4f50) (caddr . h4f4f) (cadar . h4f4e) (caadr . h4f4d) (caaar . h4f4c) (cddr . h4f4b) (cdar . h4f4a) (cadr . h4f49) (caar . h4f48) (cdr . h4f47) (car . h4f46) (boolean? . h4f45) (boolean=? . h4f44) (atan . h4f43) (assertion-violation . h4f42) (asin . h4f41) (apply . h4f40) (append . h4f3f) (angle . h4f3e) (acos . h4f3d) (abs . h4f3c) (/ . h4f3b) (* . h4f3a) (- . h4f39) (+ . h4f38) (>= . h4f37) (> . h4f36) (= . h4f35) (<= . h4f34) (< . h4f33) (unquote-splicing . h4f00) (unquote . h4eff) (_ . h4efe) (else . h4efd) (=> . h4efc) (... . h4efb) (assert . h4efa) (cond . h4ef5) (let* . h4ef4) (let . h4ef3) (let*-values . h4ef2) (let-values . h4ef1) (identifier-syntax . h4ef0) (quasiquote . h4eed) (syntax-rules . h4eec) (case . h4ee7) (or . h4ee3) (and . h4ee2) (if . h4ee1) (letrec* . h4ee0) (letrec . h4edf) (lambda . h4edc) (quote . h4ed9) (letrec-syntax . h4ed7) (let-syntax . h4ed6) (set! . h4ed5) (begin . h4ed3) (define-syntax . h4ed1) (define . h4ed0)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51f9 '(rnrs lists) '(6) '() '() '() '((remove . h50aa) (remv . h50a9) (remp . h50a8) (remq . h50a7) (partition . h50a6) (memv . h50a5) (memq . h50a4) (memp . h50a3) (member . h50a2) (exists . h50a1) (for-all . h50a0) (fold-right . h509f) (fold-left . h509e) (find . h509d) (filter . h509c) (cons* . h509b) (assv . h509a) (assq . h5099) (assp . h5098) (assoc . h5097)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51fa '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . h5105) (call-with-input-file . h5104) (write-char . h5103) (write . h5102) (with-output-to-file . h5101) (with-input-from-file . h5100) (read-char . h50ff) (read . h50fe) (peek-char . h50fd) (open-output-file . h50fc) (open-input-file . h50fb) (newline . h50fa) (display . h50f9) (close-output-port . h50f8) (close-input-port . h50f7) (eof-object? . h50f6) (eof-object . h50f5) (current-error-port . h50f4) (current-output-port . h50f3) (current-input-port . h50f2) (output-port? . h50f1) (input-port? . h50f0) (make-i/o-write-error . h4b9e) (make-i/o-read-error . h4b89) (make-i/o-port-error . h4c3f) (make-i/o-invalid-position-error . h4bb5) (make-i/o-filename-error . h4bd0) (make-i/o-file-protection-error . h4be9) (make-i/o-file-is-read-only-error . h4bfe) (make-i/o-file-does-not-exist-error . h4c28) (make-i/o-file-already-exists-error . h4c13) (make-i/o-error . h4b74) (i/o-write-error? . h4ba0) (i/o-read-error? . h4b8b) (i/o-port-error? . h4c43) (i/o-invalid-position-error? . h4bb9) (i/o-filename-error? . h4bd4) (i/o-file-protection-error? . h4beb) (i/o-file-is-read-only-error? . h4c00) (i/o-file-does-not-exist-error? . h4c2a) (i/o-file-already-exists-error? . h4c15) (i/o-error? . h4b76) (i/o-error-position . h4bbb) (i/o-error-port . h4c45) (i/o-error-filename . h4bd6) (&i/o-port . h4f2d) (&i/o-file-does-not-exist . h4f2c) (&i/o-file-already-exists . h4f2b) (&i/o-file-is-read-only . h4f2a) (&i/o-file-protection . h4f29) (&i/o-filename . h4f28) (&i/o-invalid-position . h4f27) (&i/o-write . h4f26) (&i/o-read . h4f25) (&i/o . h4f24)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51fb '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . h50c6) (utf32->string . h507b) (utf16->string . h507a) (utf8->string . h5079) (uint-list->bytevector . h5078) (u8-list->bytevector . h5077) (string->utf8 . h5076) (string->utf32 . h5075) (string->utf16 . h5074) (sint-list->bytevector . h5073) (native-endianness . h5072) (bytevector? . h5071) (bytevector=? . h5070) (bytevector-uint-set! . h506f) (bytevector-uint-ref . h506e) (bytevector-u8-set! . h506d) (bytevector-u8-ref . h506c) (bytevector-u64-set! . h506b) (bytevector-u64-ref . h506a) (bytevector-u64-native-set! . h5069) (bytevector-u64-native-ref . h5068) (bytevector-u32-set! . h5067) (bytevector-u32-ref . h5066) (bytevector-u32-native-set! . h5065) (bytevector-u32-native-ref . h5064) (bytevector-u16-set! . h5063) (bytevector-u16-ref . h5062) (bytevector-u16-native-set! . h5061) (bytevector-u16-native-ref . h5060) (bytevector-sint-set! . h505f) (bytevector-sint-ref . h505e) (bytevector-s8-set! . h505d) (bytevector-s8-ref . h505c) (bytevector-s64-set! . h505b) (bytevector-s64-ref . h505a) (bytevector-s64-native-set! . h5059) (bytevector-s64-native-ref . h5058) (bytevector-s32-set! . h5057) (bytevector-s32-ref . h5056) (bytevector-s32-native-set! . h5055) (bytevector-s32-native-ref . h5054) (bytevector-s16-set! . h5053) (bytevector-s16-ref . h5052) (bytevector-s16-native-set! . h5051) (bytevector-s16-native-ref . h5050) (bytevector-length . h504f) (bytevector-ieee-single-ref . h504e) (bytevector-ieee-single-set! . h504d) (bytevector-ieee-single-native-set! . h504c) (bytevector-ieee-single-native-ref . h504b) (bytevector-ieee-double-set! . h504a) (bytevector-ieee-double-ref . h5049) (bytevector-ieee-double-native-set! . h5048) (bytevector-ieee-double-native-ref . h5047) (bytevector-fill! . h5046) (bytevector-copy! . h5045) (bytevector-copy . h5044) (bytevector->uint-list . h5043) (bytevector->u8-list . h5042) (bytevector->sint-list . h5041) (endianness . h4ef9)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51fc '(rnrs unicode) '(6) '() '() '() '((string-upcase . h514d) (string-titlecase . h514c) (string-normalize-nfkd . h514b) (string-normalize-nfkc . h514a) (string-normalize-nfd . h5149) (string-normalize-nfc . h5148) (string-foldcase . h5147) (string-downcase . h5146) (string-ci>? . h5145) (string-ci>=? . h5144) (string-ci=? . h5143) (string-ci<? . h5142) (string-ci<=? . h5141) (char-whitespace? . h5140) (char-upper-case? . h513f) (char-title-case? . h513e) (char-numeric? . h513d) (char-lower-case? . h513c) (char-general-category . h513b) (char-upcase . h513a) (char-titlecase . h5139) (char-foldcase . h5138) (char-downcase . h5137) (char-ci>? . h5136) (char-ci>=? . h5135) (char-ci=? . h5134) (char-ci<? . h5133) (char-ci<=? . h5132) (char-alphabetic? . h5131)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51fd '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . h5090) (raise-continuable . h508f) (raise . h508e) (guard . h4f05) (else . h4efd) (=> . h4efc)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51fe '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . h4fe5) (bitwise-reverse-bit-field . h4fe4) (bitwise-length . h4fe3) (bitwise-if . h4fe2) (bitwise-first-bit-set . h4fe1) (bitwise-copy-bit-field . h4fe0) (bitwise-copy-bit . h4fdf) (bitwise-bit-set? . h4fde) (bitwise-bit-field . h4fdd) (bitwise-bit-count . h4fdc) (bitwise-xor . h4fdb) (bitwise-ior . h4fda) (bitwise-and . h4fd9) (bitwise-not . h4fd8) (bitwise-arithmetic-shift-right . h4fd7) (bitwise-arithmetic-shift-left . h4fd6) (bitwise-arithmetic-shift . h4fd5)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h51ff '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . h5012) (fxxor . h5011) (fxrotate-bit-field . h5010) (fxreverse-bit-field . h500f) (fxpositive? . h500e) (fxodd? . h500d) (fxnot . h500c) (fxnegative? . h500b) (fxmod0 . h500a) (fxmod . h5009) (fxmin . h5008) (fxmax . h5007) (fxlength . h5006) (fxior . h5005) (fxif . h5004) (fxfirst-bit-set . h5003) (fxeven? . h5002) (fxdiv0-and-mod0 . h5001) (fxdiv0 . h5000) (fxdiv-and-mod . h4fff) (fxdiv . h4ffe) (fxcopy-bit-field . h4ffd) (fxcopy-bit . h4ffc) (fxbit-set? . h4ffb) (fxbit-field . h4ffa) (fxbit-count . h4ff9) (fxarithmetic-shift-right . h4ff8) (fxarithmetic-shift-left . h4ff7) (fxarithmetic-shift . h4ff6) (fxand . h4ff5) (fx>? . h4ff4) (fx>=? . h4ff3) (fx=? . h4ff2) (fx<? . h4ff1) (fx<=? . h4ff0) (fx-/carry . h4fef) (fx- . h4fee) (fx+/carry . h4fed) (fx+ . h4fec) (fx*/carry . h4feb) (fx* . h4fea) (greatest-fixnum . h4fe9) (least-fixnum . h4fe8) (fixnum-width . h4fe7) (fixnum? . h4fe6)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5200 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . h4c9f) (no-infinities-violation? . h4c8a) (make-no-nans-violation . h4c9d) (make-no-infinities-violation . h4c88) (real->flonum . h5040) (flzero? . h503f) (fltruncate . h503e) (fltan . h503d) (flsqrt . h503c) (flsin . h503b) (flround . h503a) (flpositive? . h5039) (flonum? . h5038) (flodd? . h5037) (flnumerator . h5036) (flnegative? . h5035) (flnan? . h5034) (flmod0 . h5033) (flmod . h5032) (flmin . h5031) (flmax . h5030) (fllog . h502f) (flinteger? . h502e) (flinfinite? . h502d) (flfloor . h502c) (flfinite? . h502b) (flexpt . h502a) (flexp . h5029) (fleven? . h5028) (fldiv0-and-mod0 . h5027) (fldiv0 . h5026) (fldiv-and-mod . h5025) (fldiv . h5024) (fldenominator . h5023) (flcos . h5022) (flceiling . h5021) (flatan . h5020) (flasin . h501f) (flacos . h501e) (flabs . h501d) (fl>? . h501c) (fl>=? . h501b) (fl=? . h501a) (fl<? . h5019) (fl<=? . h5018) (fl/ . h5017) (fl- . h5016) (fl+ . h5015) (fl* . h5014) (fixnum->flonum . h5013) (&no-nans . h4f31) (&no-infinities . h4f30)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5201 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . h511a) (string-ci-hash . h5119) (string-hash . h5118) (equal-hash . h5117) (hashtable-equivalence-function . h5116) (make-hashtable . h5115) (hashtable-hash-function . h5114) (make-eqv-hashtable . h5113) (make-eq-hashtable . h5112) (hashtable? . h5111) (hashtable-update! . h5110) (hashtable-size . h510f) (hashtable-set! . h510e) (hashtable-ref . h510d) (hashtable-mutable? . h510c) (hashtable-keys . h510b) (hashtable-entries . h510a) (hashtable-delete! . h5109) (hashtable-copy . h5108) (hashtable-contains? . h5107) (hashtable-clear! . h5106)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5202 '(rnrs io ports) '(6) '() '() '() '((eof-object? . h50f6) (eof-object . h50f5) (current-error-port . h50f4) (current-output-port . h50f3) (current-input-port . h50f2) (output-port? . h50f1) (input-port? . h50f0) (utf-8-codec . h50ef) (utf-16-codec . h50ee) (transcoder-error-handling-mode . h50ed) (transcoder-eol-style . h50ec) (transcoder-codec . h50eb) (transcoded-port . h50ea) (textual-port? . h50e9) (string->bytevector . h50e8) (standard-output-port . h50e7) (standard-input-port . h50e6) (standard-error-port . h50e5) (set-port-position! . h50e4) (put-u8 . h50e3) (put-string . h50e2) (put-datum . h50e1) (put-char . h50e0) (put-bytevector . h50df) (port? . h50de) (port-transcoder . h50dd) (port-position . h50dc) (port-has-set-port-position!? . h50db) (port-has-port-position? . h50da) (port-eof? . h50d9) (output-port-buffer-mode . h50d8) (open-string-output-port . h50d7) (open-string-input-port . h50d6) (open-file-output-port . h50d5) (open-file-input/output-port . h50d4) (open-file-input-port . h50d3) (open-bytevector-output-port . h50d2) (open-bytevector-input-port . h50d1) (native-transcoder . h50d0) (native-eol-style . h50cf) (make-transcoder . h50ce) (latin-1-codec . h50cd) (make-i/o-write-error . h4b9e) (make-i/o-read-error . h4b89) (make-i/o-port-error . h4c3f) (make-i/o-invalid-position-error . h4bb5) (make-i/o-filename-error . h4bd0) (make-i/o-file-protection-error . h4be9) (make-i/o-file-is-read-only-error . h4bfe) (make-i/o-file-does-not-exist-error . h4c28) (make-i/o-file-already-exists-error . h4c13) (make-i/o-error . h4b74) (make-i/o-encoding-error . h4c6f) (make-i/o-decoding-error . h4c58) (make-custom-textual-output-port . h50cc) (make-custom-textual-input/output-port . h50cb) (make-custom-textual-input-port . h50ca) (make-custom-binary-output-port . h50c9) (make-custom-binary-input/output-port . h50c8) (make-custom-binary-input-port . h50c7) (lookahead-u8 . h50c5) (lookahead-char . h50c4) (i/o-write-error? . h4ba0) (i/o-read-error? . h4b8b) (i/o-port-error? . h4c43) (i/o-invalid-position-error? . h4bb9) (i/o-filename-error? . h4bd4) (i/o-file-protection-error? . h4beb) (i/o-file-is-read-only-error? . h4c00) (i/o-file-does-not-exist-error? . h4c2a) (i/o-file-already-exists-error? . h4c15) (i/o-error? . h4b76) (i/o-error-position . h4bbb) (i/o-error-port . h4c45) (i/o-error-filename . h4bd6) (i/o-encoding-error? . h4c73) (i/o-encoding-error-char . h4c75) (i/o-decoding-error? . h4c5a) (get-u8 . h50c3) (get-string-n! . h50c2) (get-string-n . h50c1) (get-string-all . h50c0) (get-line . h50bf) (get-datum . h50be) (get-char . h50bd) (get-bytevector-some . h50bc) (get-bytevector-n! . h50bb) (get-bytevector-n . h50ba) (get-bytevector-all . h50b9) (flush-output-port . h50b8) (close-port . h50b7) (call-with-string-output-port . h5096) (call-with-port . h5095) (call-with-bytevector-output-port . h5094) (bytevector->string . h5093) (buffer-mode? . h5092) (binary-port? . h5091) (&i/o-encoding . h4f2f) (&i/o-decoding . h4f2e) (&i/o-port . h4f2d) (&i/o-file-does-not-exist . h4f2c) (&i/o-file-already-exists . h4f2b) (&i/o-file-is-read-only . h4f2a) (&i/o-file-protection . h4f29) (&i/o-filename . h4f28) (&i/o-invalid-position . h4f27) (&i/o-write . h4f26) (&i/o-read . h4f25) (&i/o . h4f24) (error-handling-mode . h4f09) (file-options . h4f08) (buffer-mode . h4f07) (eol-style . h4f06)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5203 '(rnrs enums) '(6) '() '() '() '((make-enumeration . h508d) (enum-set=? . h508c) (enum-set-universe . h508b) (enum-set-union . h508a) (enum-set-subset? . h5089) (enum-set-projection . h5088) (enum-set-member? . h5087) (enum-set-intersection . h5086) (enum-set-indexer . h5085) (enum-set-difference . h5084) (enum-set-constructor . h5083) (enum-set-complement . h5082) (enum-set->list . h5081) (define-enumeration . h4f14)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5204 '(rnrs conditions) '(6) '() '() '() '((who-condition? . h4aea) (warning? . h4a62) (violation? . h4aa1) (undefined-violation? . h4b61) (syntax-violation? . h4b48) (syntax-violation-subform . h4b4c) (syntax-violation-form . h4b4a) (syntax-violation . h2fe2) (simple-conditions . h5080) (serious-condition? . h4a77) (non-continuable-violation? . h4b01) (message-condition? . h4a4b) (make-who-condition . h4ae6) (make-warning . h4a60) (make-violation . h4a9f) (make-undefined-violation . h4b5f) (make-syntax-violation . h4b42) (make-serious-condition . h4a75) (make-non-continuable-violation . h4aff) (make-message-condition . h4a47) (make-lexical-violation . h4b29) (make-irritants-condition . h4acb) (make-implementation-restriction-violation . h4b14) (make-error . h4a8a) (make-assertion-violation . h4ab4) (lexical-violation? . h4b2b) (irritants-condition? . h4acf) (implementation-restriction-violation? . h4b16) (error? . h4a8c) (condition-who . h4aec) (condition-predicate . h507f) (condition-message . h4a4d) (condition-irritants . h4ad1) (condition-accessor . h507e) (condition . h507d) (assertion-violation? . h4ab6) (condition? . h507c) (&undefined . h4f23) (&syntax . h4f22) (&lexical . h4f21) (&implementation-restriction . h4f20) (&non-continuable . h4f1f) (&who . h4f1e) (&irritants . h4f1d) (&assertion . h4f1c) (&violation . h4f1b) (&error . h4f1a) (&serious . h4f19) (&warning . h4f18) (&message . h4f17) (&condition . h4f16) (define-condition-type . h4f15)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5205 '(rnrs records inspection) '(6) '() '() '() '((record? . h5129) (record-type-uid . h5128) (record-type-sealed? . h5127) (record-type-parent . h5126) (record-type-opaque? . h5125) (record-type-name . h5124) (record-type-generative? . h5123) (record-type-field-names . h5122) (record-rtd . h5121) (record-field-mutable? . h5120)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5206 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . h5130) (record-predicate . h512f) (record-mutator . h512e) (record-constructor . h512d) (record-accessor . h512c) (make-record-type-descriptor . h512b) (make-record-constructor-descriptor . h512a)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5207 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . h4f13) (parent-rtd . h4f12) (nongenerative . h4f11) (opaque . h4f10) (sealed . h4f0f) (protocol . h4f0e) (parent . h4f0d) (immutable . h4f0c) (mutable . h4f0b) (fields . h4f0a) (record-constructor-descriptor . h4ee9) (record-type-descriptor . h4ee8)) '() values values '#f '#f '#t '#f) (h2b11@h29b0@install-library 'h5208 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . h4ca3) (&no-nans-rtd . h4ca1) (&no-infinities-rcd . h4c8e) (&no-infinities-rtd . h4c8c) (&i/o-encoding-rcd . h4c79) (&i/o-encoding-rtd . h4c77) (&i/o-decoding-rcd . h4c5e) (&i/o-decoding-rtd . h4c5c) (&i/o-port-rcd . h4c49) (&i/o-port-rtd . h4c47) (&i/o-file-does-not-exist-rcd . h4c2e) (&i/o-file-does-not-exist-rtd . h4c2c) (&i/o-file-already-exists-rcd . h4c19) (&i/o-file-already-exists-rtd . h4c17) (&i/o-file-is-read-only-rcd . h4c04) (&i/o-file-is-read-only-rtd . h4c02) (&i/o-file-protection-rcd . h4bef) (&i/o-file-protection-rtd . h4bed) (&i/o-filename-rcd . h4bda) (&i/o-filename-rtd . h4bd8) (&i/o-invalid-position-rcd . h4bbf) (&i/o-invalid-position-rtd . h4bbd) (&i/o-write-rcd . h4ba4) (&i/o-write-rtd . h4ba2) (&i/o-read-rcd . h4b8f) (&i/o-read-rtd . h4b8d) (&i/o-rcd . h4b7a) (&i/o-rtd . h4b78) (&undefined-rcd . h4b65) (&undefined-rtd . h4b63) (&syntax-rcd . h4b50) (&syntax-rtd . h4b4e) (&lexical-rcd . h4b2f) (&lexical-rtd . h4b2d) (&implementation-restriction-rcd . h4b1a) (&implementation-restriction-rtd . h4b18) (&non-continuable-rcd . h4b05) (&non-continuable-rtd . h4b03) (&who-rcd . h4af0) (&who-rtd . h4aee) (&irritants-rcd . h4ad5) (&irritants-rtd . h4ad3) (&assertion-rcd . h4aba) (&assertion-rtd . h4ab8) (&violation-rcd . h4aa5) (&violation-rtd . h4aa3) (&error-rcd . h4a90) (&error-rtd . h4a8e) (&serious-rcd . h4a7b) (&serious-rtd . h4a79) (&warning-rcd . h4a66) (&warning-rtd . h4a64) (&message-rcd . h4a51) (&message-rtd . h4a4f) (&condition-rcd . h49f2) (&condition-rtd . h49f0) (syntax-error . h2fde) (syntax-dispatch . h2ef9) (pretty-print . h51e8) (eval-core . h51e7) (set-symbol-value! . h51e6) (symbol-value . h51e5) (gensym . h51e4) (void . h51e3) (load . h4db0) (interaction-environment . h2fee) (char-ready? . h51e2) (regexp? . h51e1) (read-line . h51e0) (ungensym . h51df) (alist->eq-hash-table . h51de) (assoc-ref . h51dd) (print . h51dc) (format . h51db) (host-os . h51da) (library-path . h298f) (standard-library-path . h51d9) (file-newer? . h51d8) (stat-mtime . h51d7) (write-to-file . h51d6) (file->list . h51d5) (file->string . h51d4) (digit->integer . h51d3) (call-with-string-input-port . h51d2) (call-with-string-io . h51d1) (string-split . h51d0) (bytevector-for-each . h51cf) (string->regexp . h51ce) (rxmatch . h51cd) (regexp-replace-all . h51cc) (hashtable-for-each . h51cb) (call-process . h51ca) (local-tz-offset . h51c9) (microseconds . h51c8) (directory-list . h51c7) (set-current-directory! . h51c6) (expand-path . h51c5) (current-directory . h51c4) (%spawn . h51c3) (%waitpid . h51c2) (pointer-ref-c-int64 . h51c1) (pointer-ref-c-int32 . h51c0) (pointer-ref-c-int16 . h51bf) (pointer-ref-c-int8 . h51be) (pointer-ref-c-uint64 . h51bd) (pointer-ref-c-uint32 . h51bc) (pointer-ref-c-uint16 . h51bb) (pointer-ref-c-uint8 . h51ba) (pointer-set-c-uint64! . h51b9) (pointer-set-c-uint32! . h51b8) (pointer-set-c-uint16! . h51b7) (pointer-set-c-uint8! . h51b6) (pointer-set-c-int64! . h51b5) (pointer-set-c-int32! . h51b4) (pointer-set-c-int16! . h51b3) (pointer-set-c-int8! . h51b2) (pointer-set-c-pointer! . h51b1) (pointer-set-c-double! . h51b0) (pointer-set-c-float! . h51af) (pointer-set-c-long-long! . h51ae) (pointer-set-c-long! . h51ad) (pointer-set-c-int! . h51ac) (pointer-set-c-short! . h51ab) (pointer-set-c-char! . h51aa) (pointer-ref-c-pointer . h51a9) (pointer-ref-c-double . h51a8) (pointer-ref-c-float . h51a7) (pointer-ref-c-unsigned-long-long . h51a6) (pointer-ref-c-signed-long-long . h51a5) (pointer-ref-c-unsigned-long . h51a4) (pointer-ref-c-signed-long . h51a3) (pointer-ref-c-unsigned-int . h51a2) (pointer-ref-c-signed-int . h51a1) (pointer-ref-c-unsigned-short . h51a0) (pointer-ref-c-signed-short . h519f) (pointer-ref-c-unsigned-char . h519e) (pointer-ref-c-signed-char . h519d) (pointer->integer . h519c) (integer->pointer . h519b) (pointer? . h519a) (shared-errno . h5199) (%ffi-supported? . h5198) (%ffi-pointer->string . h5197) (%ffi-call->string-or-zero . h5196) (%ffi-call->double . h5195) (%ffi-call->void* . h5194) (%ffi-call->void . h5193) (%ffi-call->char . h5192) (%ffi-call->int . h5191) (%ffi-lookup . h5190) (%ffi-open . h518f) (%fork . h518e) (%pipe . h518d) (p . h518c) (open-output-string . h518b) (get-output-string . h518a) (file-stat-ctime . h5189) (file-stat-atime . h5188) (file-stat-mtime . h5187) (file-size-in-bytes . h5186) (file-writable? . h5185) (file-executable? . h5184) (file-readable? . h5183) (file-regular? . h5182) (file-symbolic-link? . h5181) (file-directory? . h5180) (create-symbolic-link . h517f) (rename-file . h517e) (delete-directory . h517d) (create-directory . h517c) (get-environment-variables . h517b) (get-environment-variable . h517a) (get-timeofday . h5179) (get-command-line . h5178) (sys-display . h5177) (whereis . h5176) (register . h5175) (vm-join! . h5174) (vm-set-value! . h5173) (vm? . h5172) (main-vm? . h5171) (vm-eval . h5170) (vm-self . h516f) (vm-start! . h516e) (make-vm . h516d) (mutex-try-lock! . h516c) (mutex-unlock! . h516b) (mutex-lock! . h516a) (mutex? . h5169) (make-mutex . h5168) (condition-variable-notify-all! . h5167) (condition-variable-notify! . h5166) (condition-variable-wait! . h5165) (make-condition-variable . h5164) (mosh-executable-path . h5163) (make-file-options . h5162) (source-info . h5161) (make-compiler-instruction . h5160) (make-instruction . h515f) (set-source-info! . h515e) (bignum? . h515d) (fast-equal? . h515c) (fasl-read . h515b) (fasl-write . h515a) (time-usage . h5159) (os-constant . h5158) (make-parameter . h27c2) (socket-port . h5157) (socket-shutdown . h5156) (socket-close . h5155) (socket-send . h5154) (socket-recv! . h5153) (socket-recv . h5152) (make-server-socket . h5151) (make-client-socket . h5150) (socket-accept . h514f) (socket? . h514e) (string-upcase . h514d) (string-titlecase . h514c) (string-normalize-nfkd . h514b) (string-normalize-nfkc . h514a) (string-normalize-nfd . h5149) (string-normalize-nfc . h5148) (string-foldcase . h5147) (string-downcase . h5146) (string-ci>? . h5145) (string-ci>=? . h5144) (string-ci=? . h5143) (string-ci<? . h5142) (string-ci<=? . h5141) (char-whitespace? . h5140) (char-upper-case? . h513f) (char-title-case? . h513e) (char-numeric? . h513d) (char-lower-case? . h513c) (char-general-category . h513b) (char-upcase . h513a) (char-titlecase . h5139) (char-foldcase . h5138) (char-downcase . h5137) (char-ci>? . h5136) (char-ci>=? . h5135) (char-ci=? . h5134) (char-ci<? . h5133) (char-ci<=? . h5132) (char-alphabetic? . h5131) (make-variable-transformer . h2d26) (identifier? . h2fe4) (generate-temporaries . h2fd0) (free-identifier=? . h2fd2) (syntax->datum . h2fe8) (datum->syntax . h2fe6) (bound-identifier=? . h2fd4) (record-type-descriptor? . h5130) (record-predicate . h512f) (record-mutator . h512e) (record-constructor . h512d) (record-accessor . h512c) (make-record-type-descriptor . h512b) (make-record-constructor-descriptor . h512a) (record? . h5129) (record-type-uid . h5128) (record-type-sealed? . h5127) (record-type-parent . h5126) (record-type-opaque? . h5125) (record-type-name . h5124) (record-type-generative? . h5123) (record-type-field-names . h5122) (record-rtd . h5121) (record-field-mutable? . h5120) (delete-file . h511f) (file-exists? . h511e) (vector-sort! . h511d) (vector-sort . h511c) (list-sort . h511b) (symbol-hash . h511a) (string-ci-hash . h5119) (string-hash . h5118) (equal-hash . h5117) (hashtable-equivalence-function . h5116) (make-hashtable . h5115) (hashtable-hash-function . h5114) (make-eqv-hashtable . h5113) (make-eq-hashtable . h5112) (hashtable? . h5111) (hashtable-update! . h5110) (hashtable-size . h510f) (hashtable-set! . h510e) (hashtable-ref . h510d) (hashtable-mutable? . h510c) (hashtable-keys . h510b) (hashtable-entries . h510a) (hashtable-delete! . h5109) (hashtable-copy . h5108) (hashtable-contains? . h5107) (hashtable-clear! . h5106) (call-with-output-file . h5105) (call-with-input-file . h5104) (write-char . h5103) (write . h5102) (with-output-to-file . h5101) (with-input-from-file . h5100) (read-char . h50ff) (read . h50fe) (peek-char . h50fd) (open-output-file . h50fc) (open-input-file . h50fb) (newline . h50fa) (display . h50f9) (close-output-port . h50f8) (close-input-port . h50f7) (eof-object? . h50f6) (eof-object . h50f5) (current-error-port . h50f4) (current-output-port . h50f3) (current-input-port . h50f2) (output-port? . h50f1) (input-port? . h50f0) (utf-8-codec . h50ef) (utf-16-codec . h50ee) (transcoder-error-handling-mode . h50ed) (transcoder-eol-style . h50ec) (transcoder-codec . h50eb) (transcoded-port . h50ea) (textual-port? . h50e9) (string->bytevector . h50e8) (standard-output-port . h50e7) (standard-input-port . h50e6) (standard-error-port . h50e5) (set-port-position! . h50e4) (put-u8 . h50e3) (put-string . h50e2) (put-datum . h50e1) (put-char . h50e0) (put-bytevector . h50df) (port? . h50de) (port-transcoder . h50dd) (port-position . h50dc) (port-has-set-port-position!? . h50db) (port-has-port-position? . h50da) (port-eof? . h50d9) (output-port-buffer-mode . h50d8) (open-string-output-port . h50d7) (open-string-input-port . h50d6) (open-file-output-port . h50d5) (open-file-input/output-port . h50d4) (open-file-input-port . h50d3) (open-bytevector-output-port . h50d2) (open-bytevector-input-port . h50d1) (native-transcoder . h50d0) (native-eol-style . h50cf) (make-transcoder . h50ce) (latin-1-codec . h50cd) (make-i/o-write-error . h4b9e) (make-i/o-read-error . h4b89) (make-i/o-port-error . h4c3f) (make-i/o-invalid-position-error . h4bb5) (make-i/o-filename-error . h4bd0) (make-i/o-file-protection-error . h4be9) (make-i/o-file-is-read-only-error . h4bfe) (make-i/o-file-does-not-exist-error . h4c28) (make-i/o-file-already-exists-error . h4c13) (make-i/o-error . h4b74) (make-i/o-encoding-error . h4c6f) (make-i/o-decoding-error . h4c58) (make-custom-textual-output-port . h50cc) (make-custom-textual-input/output-port . h50cb) (make-custom-textual-input-port . h50ca) (make-custom-binary-output-port . h50c9) (make-custom-binary-input/output-port . h50c8) (make-custom-binary-input-port . h50c7) (make-bytevector . h50c6) (lookahead-u8 . h50c5) (lookahead-char . h50c4) (i/o-write-error? . h4ba0) (i/o-read-error? . h4b8b) (i/o-port-error? . h4c43) (i/o-invalid-position-error? . h4bb9) (i/o-filename-error? . h4bd4) (i/o-file-protection-error? . h4beb) (i/o-file-is-read-only-error? . h4c00) (i/o-file-does-not-exist-error? . h4c2a) (i/o-file-already-exists-error? . h4c15) (i/o-error? . h4b76) (i/o-error-position . h4bbb) (i/o-error-port . h4c45) (i/o-error-filename . h4bd6) (i/o-encoding-error? . h4c73) (i/o-encoding-error-char . h4c75) (i/o-decoding-error? . h4c5a) (get-u8 . h50c3) (get-string-n! . h50c2) (get-string-n . h50c1) (get-string-all . h50c0) (get-line . h50bf) (get-datum . h50be) (get-char . h50bd) (get-bytevector-some . h50bc) (get-bytevector-n! . h50bb) (get-bytevector-n . h50ba) (get-bytevector-all . h50b9) (flush-output-port . h50b8) (close-port . h50b7) (scheme-report-environment . h2fbe) (quotient . h50b6) (null-environment . h2fbc) (remainder . h50b5) (modulo . h50b4) (inexact->exact . h50b3) (force . h50b2) (exact->inexact . h50b1) (make-promise . h50b0) (exit . h50af) (command-line . h4daa) (string-fill! . h50ae) (string-set! . h50ad) (set-cdr! . h50ac) (set-car! . h50ab) (remove . h50aa) (remv . h50a9) (remp . h50a8) (remq . h50a7) (partition . h50a6) (memv . h50a5) (memq . h50a4) (memp . h50a3) (member . h50a2) (exists . h50a1) (for-all . h50a0) (fold-right . h509f) (fold-left . h509e) (find . h509d) (filter . h509c) (cons* . h509b) (assv . h509a) (assq . h5099) (assp . h5098) (assoc . h5097) (call-with-string-output-port . h5096) (call-with-port . h5095) (call-with-bytevector-output-port . h5094) (bytevector->string . h5093) (buffer-mode? . h5092) (binary-port? . h5091) (with-exception-handler . h5090) (raise-continuable . h508f) (raise . h508e) (eval . h2fc2) (environment . h2fba) (make-enumeration . h508d) (enum-set=? . h508c) (enum-set-universe . h508b) (enum-set-union . h508a) (enum-set-subset? . h5089) (enum-set-projection . h5088) (enum-set-member? . h5087) (enum-set-intersection . h5086) (enum-set-indexer . h5085) (enum-set-difference . h5084) (enum-set-constructor . h5083) (enum-set-complement . h5082) (enum-set->list . h5081) (who-condition? . h4aea) (warning? . h4a62) (violation? . h4aa1) (undefined-violation? . h4b61) (syntax-violation? . h4b48) (syntax-violation-subform . h4b4c) (syntax-violation-form . h4b4a) (syntax-violation . h2fe2) (simple-conditions . h5080) (serious-condition? . h4a77) (non-continuable-violation? . h4b01) (message-condition? . h4a4b) (make-who-condition . h4ae6) (make-warning . h4a60) (make-violation . h4a9f) (make-undefined-violation . h4b5f) (make-syntax-violation . h4b42) (make-serious-condition . h4a75) (make-non-continuable-violation . h4aff) (make-message-condition . h4a47) (make-lexical-violation . h4b29) (make-irritants-condition . h4acb) (make-implementation-restriction-violation . h4b14) (make-error . h4a8a) (make-assertion-violation . h4ab4) (lexical-violation? . h4b2b) (irritants-condition? . h4acf) (implementation-restriction-violation? . h4b16) (error? . h4a8c) (condition-who . h4aec) (condition-predicate . h507f) (condition-message . h4a4d) (condition-irritants . h4ad1) (condition-accessor . h507e) (condition . h507d) (assertion-violation? . h4ab6) (condition? . h507c) (utf32->string . h507b) (utf16->string . h507a) (utf8->string . h5079) (uint-list->bytevector . h5078) (u8-list->bytevector . h5077) (string->utf8 . h5076) (string->utf32 . h5075) (string->utf16 . h5074) (sint-list->bytevector . h5073) (native-endianness . h5072) (bytevector? . h5071) (bytevector=? . h5070) (bytevector-uint-set! . h506f) (bytevector-uint-ref . h506e) (bytevector-u8-set! . h506d) (bytevector-u8-ref . h506c) (bytevector-u64-set! . h506b) (bytevector-u64-ref . h506a) (bytevector-u64-native-set! . h5069) (bytevector-u64-native-ref . h5068) (bytevector-u32-set! . h5067) (bytevector-u32-ref . h5066) (bytevector-u32-native-set! . h5065) (bytevector-u32-native-ref . h5064) (bytevector-u16-set! . h5063) (bytevector-u16-ref . h5062) (bytevector-u16-native-set! . h5061) (bytevector-u16-native-ref . h5060) (bytevector-sint-set! . h505f) (bytevector-sint-ref . h505e) (bytevector-s8-set! . h505d) (bytevector-s8-ref . h505c) (bytevector-s64-set! . h505b) (bytevector-s64-ref . h505a) (bytevector-s64-native-set! . h5059) (bytevector-s64-native-ref . h5058) (bytevector-s32-set! . h5057) (bytevector-s32-ref . h5056) (bytevector-s32-native-set! . h5055) (bytevector-s32-native-ref . h5054) (bytevector-s16-set! . h5053) (bytevector-s16-ref . h5052) (bytevector-s16-native-set! . h5051) (bytevector-s16-native-ref . h5050) (bytevector-length . h504f) (bytevector-ieee-single-ref . h504e) (bytevector-ieee-single-set! . h504d) (bytevector-ieee-single-native-set! . h504c) (bytevector-ieee-single-native-ref . h504b) (bytevector-ieee-double-set! . h504a) (bytevector-ieee-double-ref . h5049) (bytevector-ieee-double-native-set! . h5048) (bytevector-ieee-double-native-ref . h5047) (bytevector-fill! . h5046) (bytevector-copy! . h5045) (bytevector-copy . h5044) (bytevector->uint-list . h5043) (bytevector->u8-list . h5042) (bytevector->sint-list . h5041) (no-nans-violation? . h4c9f) (no-infinities-violation? . h4c8a) (make-no-nans-violation . h4c9d) (make-no-infinities-violation . h4c88) (real->flonum . h5040) (flzero? . h503f) (fltruncate . h503e) (fltan . h503d) (flsqrt . h503c) (flsin . h503b) (flround . h503a) (flpositive? . h5039) (flonum? . h5038) (flodd? . h5037) (flnumerator . h5036) (flnegative? . h5035) (flnan? . h5034) (flmod0 . h5033) (flmod . h5032) (flmin . h5031) (flmax . h5030) (fllog . h502f) (flinteger? . h502e) (flinfinite? . h502d) (flfloor . h502c) (flfinite? . h502b) (flexpt . h502a) (flexp . h5029) (fleven? . h5028) (fldiv0-and-mod0 . h5027) (fldiv0 . h5026) (fldiv-and-mod . h5025) (fldiv . h5024) (fldenominator . h5023) (flcos . h5022) (flceiling . h5021) (flatan . h5020) (flasin . h501f) (flacos . h501e) (flabs . h501d) (fl>? . h501c) (fl>=? . h501b) (fl=? . h501a) (fl<? . h5019) (fl<=? . h5018) (fl/ . h5017) (fl- . h5016) (fl+ . h5015) (fl* . h5014) (fixnum->flonum . h5013) (fxzero? . h5012) (fxxor . h5011) (fxrotate-bit-field . h5010) (fxreverse-bit-field . h500f) (fxpositive? . h500e) (fxodd? . h500d) (fxnot . h500c) (fxnegative? . h500b) (fxmod0 . h500a) (fxmod . h5009) (fxmin . h5008) (fxmax . h5007) (fxlength . h5006) (fxior . h5005) (fxif . h5004) (fxfirst-bit-set . h5003) (fxeven? . h5002) (fxdiv0-and-mod0 . h5001) (fxdiv0 . h5000) (fxdiv-and-mod . h4fff) (fxdiv . h4ffe) (fxcopy-bit-field . h4ffd) (fxcopy-bit . h4ffc) (fxbit-set? . h4ffb) (fxbit-field . h4ffa) (fxbit-count . h4ff9) (fxarithmetic-shift-right . h4ff8) (fxarithmetic-shift-left . h4ff7) (fxarithmetic-shift . h4ff6) (fxand . h4ff5) (fx>? . h4ff4) (fx>=? . h4ff3) (fx=? . h4ff2) (fx<? . h4ff1) (fx<=? . h4ff0) (fx-/carry . h4fef) (fx- . h4fee) (fx+/carry . h4fed) (fx+ . h4fec) (fx*/carry . h4feb) (fx* . h4fea) (greatest-fixnum . h4fe9) (least-fixnum . h4fe8) (fixnum-width . h4fe7) (fixnum? . h4fe6) (bitwise-rotate-bit-field . h4fe5) (bitwise-reverse-bit-field . h4fe4) (bitwise-length . h4fe3) (bitwise-if . h4fe2) (bitwise-first-bit-set . h4fe1) (bitwise-copy-bit-field . h4fe0) (bitwise-copy-bit . h4fdf) (bitwise-bit-set? . h4fde) (bitwise-bit-field . h4fdd) (bitwise-bit-count . h4fdc) (bitwise-xor . h4fdb) (bitwise-ior . h4fda) (bitwise-and . h4fd9) (bitwise-not . h4fd8) (bitwise-arithmetic-shift-right . h4fd7) (bitwise-arithmetic-shift-left . h4fd6) (bitwise-arithmetic-shift . h4fd5) (zero? . h4fd4) (vector? . h4fd3) (vector-set! . h4fd2) (vector-ref . h4fd1) (vector-map . h4fd0) (vector-length . h4fcf) (vector-for-each . h4fce) (vector-fill! . h4fcd) (vector->list . h4fcc) (vector . h4fcb) (values . h4fca) (truncate . h4fc9) (tan . h4fc8) (symbol? . h4fc7) (symbol=? . h4fc6) (symbol->string . h4fc5) (substring . h4fc4) (string? . h4fc3) (string>? . h4fc2) (string>=? . h4fc1) (string=? . h4fc0) (string<? . h4fbf) (string<=? . h4fbe) (string-ref . h4fbd) (string-length . h4fbc) (string-for-each . h4fbb) (string-copy . h4fba) (string-append . h4fb9) (string->symbol . h4fb8) (string->number . h4fb7) (string->list . h4fb6) (string . h4fb5) (sqrt . h4fb4) (sin . h4fb3) (round . h4fb2) (reverse . h4fb1) (real? . h4fb0) (real-valued? . h4faf) (real-part . h4fae) (rationalize . h4fad) (rational? . h4fac) (rational-valued? . h4fab) (procedure? . h4faa) (positive? . h4fa9) (pair? . h4fa8) (odd? . h4fa7) (numerator . h4fa6) (number? . h4fa5) (number->string . h4fa4) (null? . h4fa3) (not . h4fa2) (negative? . h4fa1) (nan? . h4fa0) (min . h4f9f) (max . h4f9e) (map . h4f9d) (make-vector . h4f9c) (make-string . h4f9b) (make-rectangular . h4f9a) (make-polar . h4f99) (magnitude . h4f98) (log . h4f97) (list? . h4f96) (list-tail . h4f95) (list-ref . h4f94) (list->vector . h4f93) (list->string . h4f92) (list . h4f91) (length . h4f90) (lcm . h4f8f) (integer? . h4f8e) (integer-valued? . h4f8d) (integer->char . h4f8c) (infinite? . h4f8b) (inexact? . h4f8a) (inexact . h4f89) (imag-part . h4f88) (gcd . h4f87) (for-each . h4f86) (floor . h4f85) (finite? . h4f84) (expt . h4f83) (exp . h4f82) (exact? . h4f81) (exact-integer-sqrt . h4f80) (exact . h4f7f) (even? . h4f7e) (error . h4f7d) (eqv? . h4f7c) (equal? . h4f7b) (eq? . h4f7a) (dynamic-wind . h4f79) (div0-and-mod0 . h4f78) (mod0 . h4f77) (div0 . h4f76) (div-and-mod . h4f75) (mod . h4f74) (div . h4f73) (denominator . h4f72) (cos . h4f71) (cons . h4f70) (complex? . h4f6f) (char? . h4f6e) (char>? . h4f6d) (char>=? . h4f6c) (char=? . h4f6b) (char<? . h4f6a) (char<=? . h4f69) (char->integer . h4f68) (ceiling . h4f67) (call-with-values . h4f66) (call/cc . h4f65) (call-with-current-continuation . h4f64) (cddddr . h4f63) (cdddar . h4f62) (cddadr . h4f61) (cddaar . h4f60) (cdaddr . h4f5f) (cdadar . h4f5e) (cdaadr . h4f5d) (cdaaar . h4f5c) (cadddr . h4f5b) (caddar . h4f5a) (cadadr . h4f59) (cadaar . h4f58) (caaddr . h4f57) (caadar . h4f56) (caaadr . h4f55) (caaaar . h4f54) (cdddr . h4f53) (cddar . h4f52) (cdadr . h4f51) (cdaar . h4f50) (caddr . h4f4f) (cadar . h4f4e) (caadr . h4f4d) (caaar . h4f4c) (cddr . h4f4b) (cdar . h4f4a) (cadr . h4f49) (caar . h4f48) (cdr . h4f47) (car . h4f46) (boolean? . h4f45) (boolean=? . h4f44) (atan . h4f43) (assertion-violation . h4f42) (assertion-error . h2fdc) (asin . h4f41) (apply . h4f40) (append . h4f3f) (angle . h4f3e) (acos . h4f3d) (abs . h4f3c) (/ . h4f3b) (* . h4f3a) (- . h4f39) (+ . h4f38) (>= . h4f37) (> . h4f36) (= . h4f35) (<= . h4f34) (< . h4f33) (library . h4f32) (&no-nans . h4f31) (&no-infinities . h4f30) (&i/o-encoding . h4f2f) (&i/o-decoding . h4f2e) (&i/o-port . h4f2d) (&i/o-file-does-not-exist . h4f2c) (&i/o-file-already-exists . h4f2b) (&i/o-file-is-read-only . h4f2a) (&i/o-file-protection . h4f29) (&i/o-filename . h4f28) (&i/o-invalid-position . h4f27) (&i/o-write . h4f26) (&i/o-read . h4f25) (&i/o . h4f24) (&undefined . h4f23) (&syntax . h4f22) (&lexical . h4f21) (&implementation-restriction . h4f20) (&non-continuable . h4f1f) (&who . h4f1e) (&irritants . h4f1d) (&assertion . h4f1c) (&violation . h4f1b) (&error . h4f1a) (&serious . h4f19) (&warning . h4f18) (&message . h4f17) (&condition . h4f16) (define-condition-type . h4f15) (define-enumeration . h4f14) (define-record-type . h4f13) (parent-rtd . h4f12) (nongenerative . h4f11) (opaque . h4f10) (sealed . h4f0f) (protocol . h4f0e) (parent . h4f0d) (immutable . h4f0c) (mutable . h4f0b) (fields . h4f0a) (error-handling-mode . h4f09) (file-options . h4f08) (buffer-mode . h4f07) (eol-style . h4f06) (guard . h4f05) (trace-define . h4f04) (trace-lambda . h4f03) (unsyntax-splicing . h4f02) (unsyntax . h4f01) (unquote-splicing . h4f00) (unquote . h4eff) (_ . h4efe) (else . h4efd) (=> . h4efc) (... . h4efb) (assert . h4efa) (endianness . h4ef9) (delay . h4ef8) (time . h4ef7) (do . h4ef6) (cond . h4ef5) (let* . h4ef4) (let . h4ef3) (let*-values . h4ef2) (let-values . h4ef1) (identifier-syntax . h4ef0) (with-syntax . h4eef) (quasisyntax . h4eee) (quasiquote . h4eed) (syntax-rules . h4eec) (include . h4eeb) (define-struct . h4eea) (record-constructor-descriptor . h4ee9) (record-type-descriptor . h4ee8) (case . h4ee7) (parameterize . h4ee6) (unless . h4ee5) (when . h4ee4) (or . h4ee3) (and . h4ee2) (if . h4ee1) (letrec* . h4ee0) (letrec . h4edf) (type-descriptor . h4ede) (case-lambda . h4edd) (lambda . h4edc) (syntax . h4edb) (syntax-case . h4eda) (quote . h4ed9) (foreign-call . h4ed8) (letrec-syntax . h4ed7) (let-syntax . h4ed6) (set! . h4ed5) (import . h4ed4) (begin . h4ed3) (module . h4ed2) (define-syntax . h4ed1) (define . h4ed0)) '((h4ca3 core-prim . &no-nans-rcd) (h4ca1 core-prim . &no-nans-rtd) (h4c8e core-prim . &no-infinities-rcd) (h4c8c core-prim . &no-infinities-rtd) (h4c79 core-prim . &i/o-encoding-rcd) (h4c77 core-prim . &i/o-encoding-rtd) (h4c5e core-prim . &i/o-decoding-rcd) (h4c5c core-prim . &i/o-decoding-rtd) (h4c49 core-prim . &i/o-port-rcd) (h4c47 core-prim . &i/o-port-rtd) (h4c2e core-prim . &i/o-file-does-not-exist-rcd) (h4c2c core-prim . &i/o-file-does-not-exist-rtd) (h4c19 core-prim . &i/o-file-already-exists-rcd) (h4c17 core-prim . &i/o-file-already-exists-rtd) (h4c04 core-prim . &i/o-file-is-read-only-rcd) (h4c02 core-prim . &i/o-file-is-read-only-rtd) (h4bef core-prim . &i/o-file-protection-rcd) (h4bed core-prim . &i/o-file-protection-rtd) (h4bda core-prim . &i/o-filename-rcd) (h4bd8 core-prim . &i/o-filename-rtd) (h4bbf core-prim . &i/o-invalid-position-rcd) (h4bbd core-prim . &i/o-invalid-position-rtd) (h4ba4 core-prim . &i/o-write-rcd) (h4ba2 core-prim . &i/o-write-rtd) (h4b8f core-prim . &i/o-read-rcd) (h4b8d core-prim . &i/o-read-rtd) (h4b7a core-prim . &i/o-rcd) (h4b78 core-prim . &i/o-rtd) (h4b65 core-prim . &undefined-rcd) (h4b63 core-prim . &undefined-rtd) (h4b50 core-prim . &syntax-rcd) (h4b4e core-prim . &syntax-rtd) (h4b2f core-prim . &lexical-rcd) (h4b2d core-prim . &lexical-rtd) (h4b1a core-prim . &implementation-restriction-rcd) (h4b18 core-prim . &implementation-restriction-rtd) (h4b05 core-prim . &non-continuable-rcd) (h4b03 core-prim . &non-continuable-rtd) (h4af0 core-prim . &who-rcd) (h4aee core-prim . &who-rtd) (h4ad5 core-prim . &irritants-rcd) (h4ad3 core-prim . &irritants-rtd) (h4aba core-prim . &assertion-rcd) (h4ab8 core-prim . &assertion-rtd) (h4aa5 core-prim . &violation-rcd) (h4aa3 core-prim . &violation-rtd) (h4a90 core-prim . &error-rcd) (h4a8e core-prim . &error-rtd) (h4a7b core-prim . &serious-rcd) (h4a79 core-prim . &serious-rtd) (h4a66 core-prim . &warning-rcd) (h4a64 core-prim . &warning-rtd) (h4a51 core-prim . &message-rcd) (h4a4f core-prim . &message-rtd) (h49f2 core-prim . &condition-rcd) (h49f0 core-prim . &condition-rtd) (h2fde core-prim . syntax-error) (h2ef9 core-prim . syntax-dispatch) (h51e8 core-prim . pretty-print) (h51e7 core-prim . eval-core) (h51e6 core-prim . set-symbol-value!) (h51e5 core-prim . symbol-value) (h51e4 core-prim . gensym) (h51e3 core-prim . void) (h4db0 core-prim . load) (h2fee core-prim . interaction-environment) (h51e2 core-prim . char-ready?) (h51e1 core-prim . regexp?) (h51e0 core-prim . read-line) (h51df core-prim . ungensym) (h51de core-prim . alist->eq-hash-table) (h51dd core-prim . assoc-ref) (h51dc core-prim . print) (h51db core-prim . format) (h51da core-prim . host-os) (h298f core-prim . library-path) (h51d9 core-prim . standard-library-path) (h51d8 core-prim . file-newer?) (h51d7 core-prim . stat-mtime) (h51d6 core-prim . write-to-file) (h51d5 core-prim . file->list) (h51d4 core-prim . file->string) (h51d3 core-prim . digit->integer) (h51d2 core-prim . call-with-string-input-port) (h51d1 core-prim . call-with-string-io) (h51d0 core-prim . string-split) (h51cf core-prim . bytevector-for-each) (h51ce core-prim . string->regexp) (h51cd core-prim . rxmatch) (h51cc core-prim . regexp-replace-all) (h51cb core-prim . hashtable-for-each) (h51ca core-prim . call-process) (h51c9 core-prim . local-tz-offset) (h51c8 core-prim . microseconds) (h51c7 core-prim . directory-list) (h51c6 core-prim . set-current-directory!) (h51c5 core-prim . expand-path) (h51c4 core-prim . current-directory) (h51c3 core-prim . %spawn) (h51c2 core-prim . %waitpid) (h51c1 core-prim . pointer-ref-c-int64) (h51c0 core-prim . pointer-ref-c-int32) (h51bf core-prim . pointer-ref-c-int16) (h51be core-prim . pointer-ref-c-int8) (h51bd core-prim . pointer-ref-c-uint64) (h51bc core-prim . pointer-ref-c-uint32) (h51bb core-prim . pointer-ref-c-uint16) (h51ba core-prim . pointer-ref-c-uint8) (h51b9 core-prim . pointer-set-c-uint64!) (h51b8 core-prim . pointer-set-c-uint32!) (h51b7 core-prim . pointer-set-c-uint16!) (h51b6 core-prim . pointer-set-c-uint8!) (h51b5 core-prim . pointer-set-c-int64!) (h51b4 core-prim . pointer-set-c-int32!) (h51b3 core-prim . pointer-set-c-int16!) (h51b2 core-prim . pointer-set-c-int8!) (h51b1 core-prim . pointer-set-c-pointer!) (h51b0 core-prim . pointer-set-c-double!) (h51af core-prim . pointer-set-c-float!) (h51ae core-prim . pointer-set-c-long-long!) (h51ad core-prim . pointer-set-c-long!) (h51ac core-prim . pointer-set-c-int!) (h51ab core-prim . pointer-set-c-short!) (h51aa core-prim . pointer-set-c-char!) (h51a9 core-prim . pointer-ref-c-pointer) (h51a8 core-prim . pointer-ref-c-double) (h51a7 core-prim . pointer-ref-c-float) (h51a6 core-prim . pointer-ref-c-unsigned-long-long) (h51a5 core-prim . pointer-ref-c-signed-long-long) (h51a4 core-prim . pointer-ref-c-unsigned-long) (h51a3 core-prim . pointer-ref-c-signed-long) (h51a2 core-prim . pointer-ref-c-unsigned-int) (h51a1 core-prim . pointer-ref-c-signed-int) (h51a0 core-prim . pointer-ref-c-unsigned-short) (h519f core-prim . pointer-ref-c-signed-short) (h519e core-prim . pointer-ref-c-unsigned-char) (h519d core-prim . pointer-ref-c-signed-char) (h519c core-prim . pointer->integer) (h519b core-prim . integer->pointer) (h519a core-prim . pointer?) (h5199 core-prim . shared-errno) (h5198 core-prim . %ffi-supported?) (h5197 core-prim . %ffi-pointer->string) (h5196 core-prim . %ffi-call->string-or-zero) (h5195 core-prim . %ffi-call->double) (h5194 core-prim . %ffi-call->void*) (h5193 core-prim . %ffi-call->void) (h5192 core-prim . %ffi-call->char) (h5191 core-prim . %ffi-call->int) (h5190 core-prim . %ffi-lookup) (h518f core-prim . %ffi-open) (h518e core-prim . %fork) (h518d core-prim . %pipe) (h518c core-prim . p) (h518b core-prim . open-output-string) (h518a core-prim . get-output-string) (h5189 core-prim . file-stat-ctime) (h5188 core-prim . file-stat-atime) (h5187 core-prim . file-stat-mtime) (h5186 core-prim . file-size-in-bytes) (h5185 core-prim . file-writable?) (h5184 core-prim . file-executable?) (h5183 core-prim . file-readable?) (h5182 core-prim . file-regular?) (h5181 core-prim . file-symbolic-link?) (h5180 core-prim . file-directory?) (h517f core-prim . create-symbolic-link) (h517e core-prim . rename-file) (h517d core-prim . delete-directory) (h517c core-prim . create-directory) (h517b core-prim . get-environment-variables) (h517a core-prim . get-environment-variable) (h5179 core-prim . get-timeofday) (h5178 core-prim . get-command-line) (h5177 core-prim . sys-display) (h5176 core-prim . whereis) (h5175 core-prim . register) (h5174 core-prim . vm-join!) (h5173 core-prim . vm-set-value!) (h5172 core-prim . vm?) (h5171 core-prim . main-vm?) (h5170 core-prim . vm-eval) (h516f core-prim . vm-self) (h516e core-prim . vm-start!) (h516d core-prim . make-vm) (h516c core-prim . mutex-try-lock!) (h516b core-prim . mutex-unlock!) (h516a core-prim . mutex-lock!) (h5169 core-prim . mutex?) (h5168 core-prim . make-mutex) (h5167 core-prim . condition-variable-notify-all!) (h5166 core-prim . condition-variable-notify!) (h5165 core-prim . condition-variable-wait!) (h5164 core-prim . make-condition-variable) (h5163 core-prim . mosh-executable-path) (h5162 core-prim . make-file-options) (h5161 core-prim . source-info) (h5160 core-prim . make-compiler-instruction) (h515f core-prim . make-instruction) (h515e core-prim . set-source-info!) (h515d core-prim . bignum?) (h515c core-prim . fast-equal?) (h515b core-prim . fasl-read) (h515a core-prim . fasl-write) (h5159 core-prim . time-usage) (h5158 core-prim . os-constant) (h27c2 core-prim . make-parameter) (h5157 core-prim . socket-port) (h5156 core-prim . socket-shutdown) (h5155 core-prim . socket-close) (h5154 core-prim . socket-send) (h5153 core-prim . socket-recv!) (h5152 core-prim . socket-recv) (h5151 core-prim . make-server-socket) (h5150 core-prim . make-client-socket) (h514f core-prim . socket-accept) (h514e core-prim . socket?) (h514d core-prim . string-upcase) (h514c core-prim . string-titlecase) (h514b core-prim . string-normalize-nfkd) (h514a core-prim . string-normalize-nfkc) (h5149 core-prim . string-normalize-nfd) (h5148 core-prim . string-normalize-nfc) (h5147 core-prim . string-foldcase) (h5146 core-prim . string-downcase) (h5145 core-prim . string-ci>?) (h5144 core-prim . string-ci>=?) (h5143 core-prim . string-ci=?) (h5142 core-prim . string-ci<?) (h5141 core-prim . string-ci<=?) (h5140 core-prim . char-whitespace?) (h513f core-prim . char-upper-case?) (h513e core-prim . char-title-case?) (h513d core-prim . char-numeric?) (h513c core-prim . char-lower-case?) (h513b core-prim . char-general-category) (h513a core-prim . char-upcase) (h5139 core-prim . char-titlecase) (h5138 core-prim . char-foldcase) (h5137 core-prim . char-downcase) (h5136 core-prim . char-ci>?) (h5135 core-prim . char-ci>=?) (h5134 core-prim . char-ci=?) (h5133 core-prim . char-ci<?) (h5132 core-prim . char-ci<=?) (h5131 core-prim . char-alphabetic?) (h2d26 core-prim . make-variable-transformer) (h2fe4 core-prim . identifier?) (h2fd0 core-prim . generate-temporaries) (h2fd2 core-prim . free-identifier=?) (h2fe8 core-prim . syntax->datum) (h2fe6 core-prim . datum->syntax) (h2fd4 core-prim . bound-identifier=?) (h5130 core-prim . record-type-descriptor?) (h512f core-prim . record-predicate) (h512e core-prim . record-mutator) (h512d core-prim . record-constructor) (h512c core-prim . record-accessor) (h512b core-prim . make-record-type-descriptor) (h512a core-prim . make-record-constructor-descriptor) (h5129 core-prim . record?) (h5128 core-prim . record-type-uid) (h5127 core-prim . record-type-sealed?) (h5126 core-prim . record-type-parent) (h5125 core-prim . record-type-opaque?) (h5124 core-prim . record-type-name) (h5123 core-prim . record-type-generative?) (h5122 core-prim . record-type-field-names) (h5121 core-prim . record-rtd) (h5120 core-prim . record-field-mutable?) (h511f core-prim . delete-file) (h511e core-prim . file-exists?) (h511d core-prim . vector-sort!) (h511c core-prim . vector-sort) (h511b core-prim . list-sort) (h511a core-prim . symbol-hash) (h5119 core-prim . string-ci-hash) (h5118 core-prim . string-hash) (h5117 core-prim . equal-hash) (h5116 core-prim . hashtable-equivalence-function) (h5115 core-prim . make-hashtable) (h5114 core-prim . hashtable-hash-function) (h5113 core-prim . make-eqv-hashtable) (h5112 core-prim . make-eq-hashtable) (h5111 core-prim . hashtable?) (h5110 core-prim . hashtable-update!) (h510f core-prim . hashtable-size) (h510e core-prim . hashtable-set!) (h510d core-prim . hashtable-ref) (h510c core-prim . hashtable-mutable?) (h510b core-prim . hashtable-keys) (h510a core-prim . hashtable-entries) (h5109 core-prim . hashtable-delete!) (h5108 core-prim . hashtable-copy) (h5107 core-prim . hashtable-contains?) (h5106 core-prim . hashtable-clear!) (h5105 core-prim . call-with-output-file) (h5104 core-prim . call-with-input-file) (h5103 core-prim . write-char) (h5102 core-prim . write) (h5101 core-prim . with-output-to-file) (h5100 core-prim . with-input-from-file) (h50ff core-prim . read-char) (h50fe core-prim . read) (h50fd core-prim . peek-char) (h50fc core-prim . open-output-file) (h50fb core-prim . open-input-file) (h50fa core-prim . newline) (h50f9 core-prim . display) (h50f8 core-prim . close-output-port) (h50f7 core-prim . close-input-port) (h50f6 core-prim . eof-object?) (h50f5 core-prim . eof-object) (h50f4 core-prim . current-error-port) (h50f3 core-prim . current-output-port) (h50f2 core-prim . current-input-port) (h50f1 core-prim . output-port?) (h50f0 core-prim . input-port?) (h50ef core-prim . utf-8-codec) (h50ee core-prim . utf-16-codec) (h50ed core-prim . transcoder-error-handling-mode) (h50ec core-prim . transcoder-eol-style) (h50eb core-prim . transcoder-codec) (h50ea core-prim . transcoded-port) (h50e9 core-prim . textual-port?) (h50e8 core-prim . string->bytevector) (h50e7 core-prim . standard-output-port) (h50e6 core-prim . standard-input-port) (h50e5 core-prim . standard-error-port) (h50e4 core-prim . set-port-position!) (h50e3 core-prim . put-u8) (h50e2 core-prim . put-string) (h50e1 core-prim . put-datum) (h50e0 core-prim . put-char) (h50df core-prim . put-bytevector) (h50de core-prim . port?) (h50dd core-prim . port-transcoder) (h50dc core-prim . port-position) (h50db core-prim . port-has-set-port-position!?) (h50da core-prim . port-has-port-position?) (h50d9 core-prim . port-eof?) (h50d8 core-prim . output-port-buffer-mode) (h50d7 core-prim . open-string-output-port) (h50d6 core-prim . open-string-input-port) (h50d5 core-prim . open-file-output-port) (h50d4 core-prim . open-file-input/output-port) (h50d3 core-prim . open-file-input-port) (h50d2 core-prim . open-bytevector-output-port) (h50d1 core-prim . open-bytevector-input-port) (h50d0 core-prim . native-transcoder) (h50cf core-prim . native-eol-style) (h50ce core-prim . make-transcoder) (h50cd core-prim . latin-1-codec) (h4b9e core-prim . make-i/o-write-error) (h4b89 core-prim . make-i/o-read-error) (h4c3f core-prim . make-i/o-port-error) (h4bb5 core-prim . make-i/o-invalid-position-error) (h4bd0 core-prim . make-i/o-filename-error) (h4be9 core-prim . make-i/o-file-protection-error) (h4bfe core-prim . make-i/o-file-is-read-only-error) (h4c28 core-prim . make-i/o-file-does-not-exist-error) (h4c13 core-prim . make-i/o-file-already-exists-error) (h4b74 core-prim . make-i/o-error) (h4c6f core-prim . make-i/o-encoding-error) (h4c58 core-prim . make-i/o-decoding-error) (h50cc core-prim . make-custom-textual-output-port) (h50cb core-prim . make-custom-textual-input/output-port) (h50ca core-prim . make-custom-textual-input-port) (h50c9 core-prim . make-custom-binary-output-port) (h50c8 core-prim . make-custom-binary-input/output-port) (h50c7 core-prim . make-custom-binary-input-port) (h50c6 core-prim . make-bytevector) (h50c5 core-prim . lookahead-u8) (h50c4 core-prim . lookahead-char) (h4ba0 core-prim . i/o-write-error?) (h4b8b core-prim . i/o-read-error?) (h4c43 core-prim . i/o-port-error?) (h4bb9 core-prim . i/o-invalid-position-error?) (h4bd4 core-prim . i/o-filename-error?) (h4beb core-prim . i/o-file-protection-error?) (h4c00 core-prim . i/o-file-is-read-only-error?) (h4c2a core-prim . i/o-file-does-not-exist-error?) (h4c15 core-prim . i/o-file-already-exists-error?) (h4b76 core-prim . i/o-error?) (h4bbb core-prim . i/o-error-position) (h4c45 core-prim . i/o-error-port) (h4bd6 core-prim . i/o-error-filename) (h4c73 core-prim . i/o-encoding-error?) (h4c75 core-prim . i/o-encoding-error-char) (h4c5a core-prim . i/o-decoding-error?) (h50c3 core-prim . get-u8) (h50c2 core-prim . get-string-n!) (h50c1 core-prim . get-string-n) (h50c0 core-prim . get-string-all) (h50bf core-prim . get-line) (h50be core-prim . get-datum) (h50bd core-prim . get-char) (h50bc core-prim . get-bytevector-some) (h50bb core-prim . get-bytevector-n!) (h50ba core-prim . get-bytevector-n) (h50b9 core-prim . get-bytevector-all) (h50b8 core-prim . flush-output-port) (h50b7 core-prim . close-port) (h2fbe core-prim . scheme-report-environment) (h50b6 core-prim . quotient) (h2fbc core-prim . null-environment) (h50b5 core-prim . remainder) (h50b4 core-prim . modulo) (h50b3 core-prim . inexact->exact) (h50b2 core-prim . force) (h50b1 core-prim . exact->inexact) (h50b0 core-prim . make-promise) (h50af core-prim . exit) (h4daa core-prim . command-line) (h50ae core-prim . string-fill!) (h50ad core-prim . string-set!) (h50ac core-prim . set-cdr!) (h50ab core-prim . set-car!) (h50aa core-prim . remove) (h50a9 core-prim . remv) (h50a8 core-prim . remp) (h50a7 core-prim . remq) (h50a6 core-prim . partition) (h50a5 core-prim . memv) (h50a4 core-prim . memq) (h50a3 core-prim . memp) (h50a2 core-prim . member) (h50a1 core-prim . exists) (h50a0 core-prim . for-all) (h509f core-prim . fold-right) (h509e core-prim . fold-left) (h509d core-prim . find) (h509c core-prim . filter) (h509b core-prim . cons*) (h509a core-prim . assv) (h5099 core-prim . assq) (h5098 core-prim . assp) (h5097 core-prim . assoc) (h5096 core-prim . call-with-string-output-port) (h5095 core-prim . call-with-port) (h5094 core-prim . call-with-bytevector-output-port) (h5093 core-prim . bytevector->string) (h5092 core-prim . buffer-mode?) (h5091 core-prim . binary-port?) (h5090 core-prim . with-exception-handler) (h508f core-prim . raise-continuable) (h508e core-prim . raise) (h2fc2 core-prim . eval) (h2fba core-prim . environment) (h508d core-prim . make-enumeration) (h508c core-prim . enum-set=?) (h508b core-prim . enum-set-universe) (h508a core-prim . enum-set-union) (h5089 core-prim . enum-set-subset?) (h5088 core-prim . enum-set-projection) (h5087 core-prim . enum-set-member?) (h5086 core-prim . enum-set-intersection) (h5085 core-prim . enum-set-indexer) (h5084 core-prim . enum-set-difference) (h5083 core-prim . enum-set-constructor) (h5082 core-prim . enum-set-complement) (h5081 core-prim . enum-set->list) (h4aea core-prim . who-condition?) (h4a62 core-prim . warning?) (h4aa1 core-prim . violation?) (h4b61 core-prim . undefined-violation?) (h4b48 core-prim . syntax-violation?) (h4b4c core-prim . syntax-violation-subform) (h4b4a core-prim . syntax-violation-form) (h2fe2 core-prim . syntax-violation) (h5080 core-prim . simple-conditions) (h4a77 core-prim . serious-condition?) (h4b01 core-prim . non-continuable-violation?) (h4a4b core-prim . message-condition?) (h4ae6 core-prim . make-who-condition) (h4a60 core-prim . make-warning) (h4a9f core-prim . make-violation) (h4b5f core-prim . make-undefined-violation) (h4b42 core-prim . make-syntax-violation) (h4a75 core-prim . make-serious-condition) (h4aff core-prim . make-non-continuable-violation) (h4a47 core-prim . make-message-condition) (h4b29 core-prim . make-lexical-violation) (h4acb core-prim . make-irritants-condition) (h4b14 core-prim . make-implementation-restriction-violation) (h4a8a core-prim . make-error) (h4ab4 core-prim . make-assertion-violation) (h4b2b core-prim . lexical-violation?) (h4acf core-prim . irritants-condition?) (h4b16 core-prim . implementation-restriction-violation?) (h4a8c core-prim . error?) (h4aec core-prim . condition-who) (h507f core-prim . condition-predicate) (h4a4d core-prim . condition-message) (h4ad1 core-prim . condition-irritants) (h507e core-prim . condition-accessor) (h507d core-prim . condition) (h4ab6 core-prim . assertion-violation?) (h507c core-prim . condition?) (h507b core-prim . utf32->string) (h507a core-prim . utf16->string) (h5079 core-prim . utf8->string) (h5078 core-prim . uint-list->bytevector) (h5077 core-prim . u8-list->bytevector) (h5076 core-prim . string->utf8) (h5075 core-prim . string->utf32) (h5074 core-prim . string->utf16) (h5073 core-prim . sint-list->bytevector) (h5072 core-prim . native-endianness) (h5071 core-prim . bytevector?) (h5070 core-prim . bytevector=?) (h506f core-prim . bytevector-uint-set!) (h506e core-prim . bytevector-uint-ref) (h506d core-prim . bytevector-u8-set!) (h506c core-prim . bytevector-u8-ref) (h506b core-prim . bytevector-u64-set!) (h506a core-prim . bytevector-u64-ref) (h5069 core-prim . bytevector-u64-native-set!) (h5068 core-prim . bytevector-u64-native-ref) (h5067 core-prim . bytevector-u32-set!) (h5066 core-prim . bytevector-u32-ref) (h5065 core-prim . bytevector-u32-native-set!) (h5064 core-prim . bytevector-u32-native-ref) (h5063 core-prim . bytevector-u16-set!) (h5062 core-prim . bytevector-u16-ref) (h5061 core-prim . bytevector-u16-native-set!) (h5060 core-prim . bytevector-u16-native-ref) (h505f core-prim . bytevector-sint-set!) (h505e core-prim . bytevector-sint-ref) (h505d core-prim . bytevector-s8-set!) (h505c core-prim . bytevector-s8-ref) (h505b core-prim . bytevector-s64-set!) (h505a core-prim . bytevector-s64-ref) (h5059 core-prim . bytevector-s64-native-set!) (h5058 core-prim . bytevector-s64-native-ref) (h5057 core-prim . bytevector-s32-set!) (h5056 core-prim . bytevector-s32-ref) (h5055 core-prim . bytevector-s32-native-set!) (h5054 core-prim . bytevector-s32-native-ref) (h5053 core-prim . bytevector-s16-set!) (h5052 core-prim . bytevector-s16-ref) (h5051 core-prim . bytevector-s16-native-set!) (h5050 core-prim . bytevector-s16-native-ref) (h504f core-prim . bytevector-length) (h504e core-prim . bytevector-ieee-single-ref) (h504d core-prim . bytevector-ieee-single-set!) (h504c core-prim . bytevector-ieee-single-native-set!) (h504b core-prim . bytevector-ieee-single-native-ref) (h504a core-prim . bytevector-ieee-double-set!) (h5049 core-prim . bytevector-ieee-double-ref) (h5048 core-prim . bytevector-ieee-double-native-set!) (h5047 core-prim . bytevector-ieee-double-native-ref) (h5046 core-prim . bytevector-fill!) (h5045 core-prim . bytevector-copy!) (h5044 core-prim . bytevector-copy) (h5043 core-prim . bytevector->uint-list) (h5042 core-prim . bytevector->u8-list) (h5041 core-prim . bytevector->sint-list) (h4c9f core-prim . no-nans-violation?) (h4c8a core-prim . no-infinities-violation?) (h4c9d core-prim . make-no-nans-violation) (h4c88 core-prim . make-no-infinities-violation) (h5040 core-prim . real->flonum) (h503f core-prim . flzero?) (h503e core-prim . fltruncate) (h503d core-prim . fltan) (h503c core-prim . flsqrt) (h503b core-prim . flsin) (h503a core-prim . flround) (h5039 core-prim . flpositive?) (h5038 core-prim . flonum?) (h5037 core-prim . flodd?) (h5036 core-prim . flnumerator) (h5035 core-prim . flnegative?) (h5034 core-prim . flnan?) (h5033 core-prim . flmod0) (h5032 core-prim . flmod) (h5031 core-prim . flmin) (h5030 core-prim . flmax) (h502f core-prim . fllog) (h502e core-prim . flinteger?) (h502d core-prim . flinfinite?) (h502c core-prim . flfloor) (h502b core-prim . flfinite?) (h502a core-prim . flexpt) (h5029 core-prim . flexp) (h5028 core-prim . fleven?) (h5027 core-prim . fldiv0-and-mod0) (h5026 core-prim . fldiv0) (h5025 core-prim . fldiv-and-mod) (h5024 core-prim . fldiv) (h5023 core-prim . fldenominator) (h5022 core-prim . flcos) (h5021 core-prim . flceiling) (h5020 core-prim . flatan) (h501f core-prim . flasin) (h501e core-prim . flacos) (h501d core-prim . flabs) (h501c core-prim . fl>?) (h501b core-prim . fl>=?) (h501a core-prim . fl=?) (h5019 core-prim . fl<?) (h5018 core-prim . fl<=?) (h5017 core-prim . fl/) (h5016 core-prim . fl-) (h5015 core-prim . fl+) (h5014 core-prim . fl*) (h5013 core-prim . fixnum->flonum) (h5012 core-prim . fxzero?) (h5011 core-prim . fxxor) (h5010 core-prim . fxrotate-bit-field) (h500f core-prim . fxreverse-bit-field) (h500e core-prim . fxpositive?) (h500d core-prim . fxodd?) (h500c core-prim . fxnot) (h500b core-prim . fxnegative?) (h500a core-prim . fxmod0) (h5009 core-prim . fxmod) (h5008 core-prim . fxmin) (h5007 core-prim . fxmax) (h5006 core-prim . fxlength) (h5005 core-prim . fxior) (h5004 core-prim . fxif) (h5003 core-prim . fxfirst-bit-set) (h5002 core-prim . fxeven?) (h5001 core-prim . fxdiv0-and-mod0) (h5000 core-prim . fxdiv0) (h4fff core-prim . fxdiv-and-mod) (h4ffe core-prim . fxdiv) (h4ffd core-prim . fxcopy-bit-field) (h4ffc core-prim . fxcopy-bit) (h4ffb core-prim . fxbit-set?) (h4ffa core-prim . fxbit-field) (h4ff9 core-prim . fxbit-count) (h4ff8 core-prim . fxarithmetic-shift-right) (h4ff7 core-prim . fxarithmetic-shift-left) (h4ff6 core-prim . fxarithmetic-shift) (h4ff5 core-prim . fxand) (h4ff4 core-prim . fx>?) (h4ff3 core-prim . fx>=?) (h4ff2 core-prim . fx=?) (h4ff1 core-prim . fx<?) (h4ff0 core-prim . fx<=?) (h4fef core-prim . fx-/carry) (h4fee core-prim . fx-) (h4fed core-prim . fx+/carry) (h4fec core-prim . fx+) (h4feb core-prim . fx*/carry) (h4fea core-prim . fx*) (h4fe9 core-prim . greatest-fixnum) (h4fe8 core-prim . least-fixnum) (h4fe7 core-prim . fixnum-width) (h4fe6 core-prim . fixnum?) (h4fe5 core-prim . bitwise-rotate-bit-field) (h4fe4 core-prim . bitwise-reverse-bit-field) (h4fe3 core-prim . bitwise-length) (h4fe2 core-prim . bitwise-if) (h4fe1 core-prim . bitwise-first-bit-set) (h4fe0 core-prim . bitwise-copy-bit-field) (h4fdf core-prim . bitwise-copy-bit) (h4fde core-prim . bitwise-bit-set?) (h4fdd core-prim . bitwise-bit-field) (h4fdc core-prim . bitwise-bit-count) (h4fdb core-prim . bitwise-xor) (h4fda core-prim . bitwise-ior) (h4fd9 core-prim . bitwise-and) (h4fd8 core-prim . bitwise-not) (h4fd7 core-prim . bitwise-arithmetic-shift-right) (h4fd6 core-prim . bitwise-arithmetic-shift-left) (h4fd5 core-prim . bitwise-arithmetic-shift) (h4fd4 core-prim . zero?) (h4fd3 core-prim . vector?) (h4fd2 core-prim . vector-set!) (h4fd1 core-prim . vector-ref) (h4fd0 core-prim . vector-map) (h4fcf core-prim . vector-length) (h4fce core-prim . vector-for-each) (h4fcd core-prim . vector-fill!) (h4fcc core-prim . vector->list) (h4fcb core-prim . vector) (h4fca core-prim . values) (h4fc9 core-prim . truncate) (h4fc8 core-prim . tan) (h4fc7 core-prim . symbol?) (h4fc6 core-prim . symbol=?) (h4fc5 core-prim . symbol->string) (h4fc4 core-prim . substring) (h4fc3 core-prim . string?) (h4fc2 core-prim . string>?) (h4fc1 core-prim . string>=?) (h4fc0 core-prim . string=?) (h4fbf core-prim . string<?) (h4fbe core-prim . string<=?) (h4fbd core-prim . string-ref) (h4fbc core-prim . string-length) (h4fbb core-prim . string-for-each) (h4fba core-prim . string-copy) (h4fb9 core-prim . string-append) (h4fb8 core-prim . string->symbol) (h4fb7 core-prim . string->number) (h4fb6 core-prim . string->list) (h4fb5 core-prim . string) (h4fb4 core-prim . sqrt) (h4fb3 core-prim . sin) (h4fb2 core-prim . round) (h4fb1 core-prim . reverse) (h4fb0 core-prim . real?) (h4faf core-prim . real-valued?) (h4fae core-prim . real-part) (h4fad core-prim . rationalize) (h4fac core-prim . rational?) (h4fab core-prim . rational-valued?) (h4faa core-prim . procedure?) (h4fa9 core-prim . positive?) (h4fa8 core-prim . pair?) (h4fa7 core-prim . odd?) (h4fa6 core-prim . numerator) (h4fa5 core-prim . number?) (h4fa4 core-prim . number->string) (h4fa3 core-prim . null?) (h4fa2 core-prim . not) (h4fa1 core-prim . negative?) (h4fa0 core-prim . nan?) (h4f9f core-prim . min) (h4f9e core-prim . max) (h4f9d core-prim . map) (h4f9c core-prim . make-vector) (h4f9b core-prim . make-string) (h4f9a core-prim . make-rectangular) (h4f99 core-prim . make-polar) (h4f98 core-prim . magnitude) (h4f97 core-prim . log) (h4f96 core-prim . list?) (h4f95 core-prim . list-tail) (h4f94 core-prim . list-ref) (h4f93 core-prim . list->vector) (h4f92 core-prim . list->string) (h4f91 core-prim . list) (h4f90 core-prim . length) (h4f8f core-prim . lcm) (h4f8e core-prim . integer?) (h4f8d core-prim . integer-valued?) (h4f8c core-prim . integer->char) (h4f8b core-prim . infinite?) (h4f8a core-prim . inexact?) (h4f89 core-prim . inexact) (h4f88 core-prim . imag-part) (h4f87 core-prim . gcd) (h4f86 core-prim . for-each) (h4f85 core-prim . floor) (h4f84 core-prim . finite?) (h4f83 core-prim . expt) (h4f82 core-prim . exp) (h4f81 core-prim . exact?) (h4f80 core-prim . exact-integer-sqrt) (h4f7f core-prim . exact) (h4f7e core-prim . even?) (h4f7d core-prim . error) (h4f7c core-prim . eqv?) (h4f7b core-prim . equal?) (h4f7a core-prim . eq?) (h4f79 core-prim . dynamic-wind) (h4f78 core-prim . div0-and-mod0) (h4f77 core-prim . mod0) (h4f76 core-prim . div0) (h4f75 core-prim . div-and-mod) (h4f74 core-prim . mod) (h4f73 core-prim . div) (h4f72 core-prim . denominator) (h4f71 core-prim . cos) (h4f70 core-prim . cons) (h4f6f core-prim . complex?) (h4f6e core-prim . char?) (h4f6d core-prim . char>?) (h4f6c core-prim . char>=?) (h4f6b core-prim . char=?) (h4f6a core-prim . char<?) (h4f69 core-prim . char<=?) (h4f68 core-prim . char->integer) (h4f67 core-prim . ceiling) (h4f66 core-prim . call-with-values) (h4f65 core-prim . call/cc) (h4f64 core-prim . call-with-current-continuation) (h4f63 core-prim . cddddr) (h4f62 core-prim . cdddar) (h4f61 core-prim . cddadr) (h4f60 core-prim . cddaar) (h4f5f core-prim . cdaddr) (h4f5e core-prim . cdadar) (h4f5d core-prim . cdaadr) (h4f5c core-prim . cdaaar) (h4f5b core-prim . cadddr) (h4f5a core-prim . caddar) (h4f59 core-prim . cadadr) (h4f58 core-prim . cadaar) (h4f57 core-prim . caaddr) (h4f56 core-prim . caadar) (h4f55 core-prim . caaadr) (h4f54 core-prim . caaaar) (h4f53 core-prim . cdddr) (h4f52 core-prim . cddar) (h4f51 core-prim . cdadr) (h4f50 core-prim . cdaar) (h4f4f core-prim . caddr) (h4f4e core-prim . cadar) (h4f4d core-prim . caadr) (h4f4c core-prim . caaar) (h4f4b core-prim . cddr) (h4f4a core-prim . cdar) (h4f49 core-prim . cadr) (h4f48 core-prim . caar) (h4f47 core-prim . cdr) (h4f46 core-prim . car) (h4f45 core-prim . boolean?) (h4f44 core-prim . boolean=?) (h4f43 core-prim . atan) (h4f42 core-prim . assertion-violation) (h2fdc core-prim . assertion-error) (h4f41 core-prim . asin) (h4f40 core-prim . apply) (h4f3f core-prim . append) (h4f3e core-prim . angle) (h4f3d core-prim . acos) (h4f3c core-prim . abs) (h4f3b core-prim . /) (h4f3a core-prim . *) (h4f39 core-prim . -) (h4f38 core-prim . +) (h4f37 core-prim . >=) (h4f36 core-prim . >) (h4f35 core-prim . =) (h4f34 core-prim . <=) (h4f33 core-prim . <) (h4f32 core-prim . library) (h4f31 $core-rtd &no-nans-rtd &no-nans-rcd) (h4f30 $core-rtd &no-infinities-rtd &no-infinities-rcd) (h4f2f $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (h4f2e $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (h4f2d $core-rtd &i/o-port-rtd &i/o-port-rcd) (h4f2c $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (h4f2b $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (h4f2a $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (h4f29 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (h4f28 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (h4f27 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (h4f26 $core-rtd &i/o-write-rtd &i/o-write-rcd) (h4f25 $core-rtd &i/o-read-rtd &i/o-read-rcd) (h4f24 $core-rtd &i/o-rtd &i/o-rcd) (h4f23 $core-rtd &undefined-rtd &undefined-rcd) (h4f22 $core-rtd &syntax-rtd &syntax-rcd) (h4f21 $core-rtd &lexical-rtd &lexical-rcd) (h4f20 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (h4f1f $core-rtd &non-continuable-rtd &non-continuable-rcd) (h4f1e $core-rtd &who-rtd &who-rcd) (h4f1d $core-rtd &irritants-rtd &irritants-rcd) (h4f1c $core-rtd &assertion-rtd &assertion-rcd) (h4f1b $core-rtd &violation-rtd &violation-rcd) (h4f1a $core-rtd &error-rtd &error-rcd) (h4f19 $core-rtd &serious-rtd &serious-rcd) (h4f18 $core-rtd &warning-rtd &warning-rcd) (h4f17 $core-rtd &message-rtd &message-rcd) (h4f16 $core-rtd &condition-rtd &condition-rcd) (h4f15 macro . define-condition-type) (h4f14 macro . define-enumeration) (h4f13 macro . define-record-type) (h4f12 macro . parent-rtd) (h4f11 macro . nongenerative) (h4f10 macro . opaque) (h4f0f macro . sealed) (h4f0e macro . protocol) (h4f0d macro . parent) (h4f0c macro . immutable) (h4f0b macro . mutable) (h4f0a macro . fields) (h4f09 macro . error-handling-mode) (h4f08 macro . file-options) (h4f07 macro . buffer-mode) (h4f06 macro . eol-style) (h4f05 macro . guard) (h4f04 macro . trace-define) (h4f03 macro . trace-lambda) (h4f02 macro . unsyntax-splicing) (h4f01 macro . unsyntax) (h4f00 macro . unquote-splicing) (h4eff macro . unquote) (h4efe macro . _) (h4efd macro . else) (h4efc macro . =>) (h4efb macro . ...) (h4efa macro . assert) (h4ef9 macro . endianness) (h4ef8 macro . delay) (h4ef7 macro . time) (h4ef6 macro . do) (h4ef5 macro . cond) (h4ef4 macro . let*) (h4ef3 macro . let) (h4ef2 macro . let*-values) (h4ef1 macro . let-values) (h4ef0 macro . identifier-syntax) (h4eef macro . with-syntax) (h4eee macro . quasisyntax) (h4eed macro . quasiquote) (h4eec macro . syntax-rules) (h4eeb macro . include) (h4eea macro . define-struct) (h4ee9 core-macro . record-constructor-descriptor) (h4ee8 core-macro . record-type-descriptor) (h4ee7 macro . case) (h4ee6 macro . parameterize) (h4ee5 macro . unless) (h4ee4 macro . when) (h4ee3 core-macro . or) (h4ee2 core-macro . and) (h4ee1 core-macro . if) (h4ee0 core-macro . letrec*) (h4edf core-macro . letrec) (h4ede core-macro . type-descriptor) (h4edd core-macro . case-lambda) (h4edc core-macro . lambda) (h4edb core-macro . syntax) (h4eda core-macro . syntax-case) (h4ed9 core-macro . quote) (h4ed8 core-macro . foreign-call) (h4ed7 letrec-syntax) (h4ed6 let-syntax) (h4ed5 set!) (h4ed4 import) (h4ed3 begin) (h4ed2 module) (h4ed1 define-syntax) (h4ed0 define)) values values '#f '#f '#f '#f) (h2b11@h29b0@install-library 'h5209 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . h51e8) (eval-core . h51e7) (set-symbol-value! . h51e6) (symbol-value . h51e5) (gensym . h51e4) (void . h51e3)) '() values values '#f '#f '#f '#f) (h2b11@h29b0@install-library 'h520a '(mosh) '() '() '() '() '((set-symbol-value! . h51e6) (symbol-value . h51e5) (regexp? . h51e1) (read-line . h51e0) (ungensym . h51df) (alist->eq-hash-table . h51de) (assoc-ref . h51dd) (print . h51dc) (format . h51db) (host-os . h51da) (library-path . h298f) (standard-library-path . h51d9) (file-newer? . h51d8) (stat-mtime . h51d7) (digit->integer . h51d3) (call-with-string-input-port . h51d2) (call-with-string-io . h51d1) (string-split . h51d0) (bytevector-for-each . h51cf) (string->regexp . h51ce) (rxmatch . h51cd) (regexp-replace-all . h51cc) (hashtable-for-each . h51cb) (set-current-directory! . h51c6) (expand-path . h51c5) (current-directory . h51c4) (p . h518c) (get-timeofday . h5179) (get-command-line . h5178) (sys-display . h5177) (whereis . h5176) (register . h5175) (vm-join! . h5174) (vm-set-value! . h5173) (vm? . h5172) (main-vm? . h5171) (vm-eval . h5170) (vm-self . h516f) (vm-start! . h516e) (make-vm . h516d) (mutex-try-lock! . h516c) (mutex-unlock! . h516b) (mutex-lock! . h516a) (mutex? . h5169) (make-mutex . h5168) (condition-variable-notify-all! . h5167) (condition-variable-notify! . h5166) (condition-variable-wait! . h5165) (make-condition-variable . h5164) (mosh-executable-path . h5163) (make-file-options . h5162) (source-info . h5161) (make-compiler-instruction . h5160) (make-instruction . h515f) (set-source-info! . h515e) (bignum? . h515d) (fast-equal? . h515c) (fasl-read . h515b) (fasl-write . h515a) (time-usage . h5159) (os-constant . h5158) (time . h4ef7) (include . h4eeb)) '() values values '#f '#f '#f '#f) (h2b11@h29b0@install-library 'h520b '(system) '() '() '() '() '((write-to-file . h51d6) (file->list . h51d5) (file->string . h51d4) (call-process . h51ca) (local-tz-offset . h51c9) (microseconds . h51c8) (directory-list . h51c7) (expand-path . h51c5) (%spawn . h51c3) (%waitpid . h51c2) (pointer-ref-c-int64 . h51c1) (pointer-ref-c-int32 . h51c0) (pointer-ref-c-int16 . h51bf) (pointer-ref-c-int8 . h51be) (pointer-ref-c-uint64 . h51bd) (pointer-ref-c-uint32 . h51bc) (pointer-ref-c-uint16 . h51bb) (pointer-ref-c-uint8 . h51ba) (pointer-set-c-uint64! . h51b9) (pointer-set-c-uint32! . h51b8) (pointer-set-c-uint16! . h51b7) (pointer-set-c-uint8! . h51b6) (pointer-set-c-int64! . h51b5) (pointer-set-c-int32! . h51b4) (pointer-set-c-int16! . h51b3) (pointer-set-c-int8! . h51b2) (pointer-set-c-pointer! . h51b1) (pointer-set-c-double! . h51b0) (pointer-set-c-float! . h51af) (pointer-set-c-long-long! . h51ae) (pointer-set-c-long! . h51ad) (pointer-set-c-int! . h51ac) (pointer-set-c-short! . h51ab) (pointer-set-c-char! . h51aa) (pointer-ref-c-pointer . h51a9) (pointer-ref-c-double . h51a8) (pointer-ref-c-float . h51a7) (pointer-ref-c-unsigned-long-long . h51a6) (pointer-ref-c-signed-long-long . h51a5) (pointer-ref-c-unsigned-long . h51a4) (pointer-ref-c-signed-long . h51a3) (pointer-ref-c-unsigned-int . h51a2) (pointer-ref-c-signed-int . h51a1) (pointer-ref-c-unsigned-short . h51a0) (pointer-ref-c-signed-short . h519f) (pointer-ref-c-unsigned-char . h519e) (pointer-ref-c-signed-char . h519d) (pointer->integer . h519c) (integer->pointer . h519b) (pointer? . h519a) (shared-errno . h5199) (%ffi-supported? . h5198) (%ffi-pointer->string . h5197) (%ffi-call->string-or-zero . h5196) (%ffi-call->double . h5195) (%ffi-call->void* . h5194) (%ffi-call->void . h5193) (%ffi-call->char . h5192) (%ffi-call->int . h5191) (%ffi-lookup . h5190) (%ffi-open . h518f) (%fork . h518e) (%pipe . h518d) (open-output-string . h518b) (get-output-string . h518a) (file-stat-ctime . h5189) (file-stat-atime . h5188) (file-stat-mtime . h5187) (file-size-in-bytes . h5186) (file-writable? . h5185) (file-executable? . h5184) (file-readable? . h5183) (file-regular? . h5182) (file-symbolic-link? . h5181) (file-directory? . h5180) (create-symbolic-link . h517f) (rename-file . h517e) (delete-directory . h517d) (create-directory . h517c) (get-environment-variables . h517b) (get-environment-variable . h517a) (make-parameter . h27c2) (socket-port . h5157) (socket-shutdown . h5156) (socket-close . h5155) (socket-send . h5154) (socket-recv! . h5153) (socket-recv . h5152) (make-server-socket . h5151) (make-client-socket . h5150) (socket-accept . h514f) (socket? . h514e) (parameterize . h4ee6)) '() values values '#f '#f '#f '#f))
((lambda (h4d99@add-library-path! h4d9b@parse-and-add-library-path h4d9d@for-each-with-index h4d9f@rpad h4da1@condition-printer h4da3@record->field-alist h4da5@map-with-index h4da7@repl h4da9@trace-printer h4dab@command-line h4dad@local-library-path h4daf@load/args h4db1@load h4db3@ironscheme-build h4db5@eval-top-level h4db7@compile-system-libraries h4db9@compile h4dbb@compile->closure h4dbd@pre-compile-r6rs-file h4dbf@load-r6rs-top-level h4dc1@load-r6rs-top-level-sexp) (begin (set! h4d99@add-library-path! (lambda (h4de4@path) (h2b01@h2990@library-path (append (h2b01@h2990@library-path) (list h4de4@path))))) (set! h4d9b@parse-and-add-library-path (lambda (h4de6@paths h4de7@message) ((lambda (h4dea@t) (if h4dea@t ((lambda (h4dec@paths) (for-each (lambda (h4dee@path) (if (file-exists? h4dee@path) (h4d99@add-library-path! (expand-path h4dee@path)) (format (current-error-port) h4de7@message h4dee@path))) (string-split h4dec@paths '#\:))) h4dea@t) (void))) h4de6@paths))) (set! h4d9d@for-each-with-index (lambda (h4df0@proc h4df1@lst) (letrec ((h4df4@loop (lambda (h4df6@i h4df7@lst) (if (null? h4df7@lst) (if '#f '#f (void)) (begin (h4df0@proc h4df6@i (car h4df7@lst)) (h4df4@loop (+ h4df6@i '1) (cdr h4df7@lst))))))) (h4df4@loop '1 h4df1@lst)))) (set! h4d9f@rpad (lambda (h4dfa@str h4dfb@pad h4dfc@n) ((lambda (h4e00@rest) ((letrec ((h4e02@loop (lambda (h4e04@rest h4e05@ret) (if (<= h4e04@rest '0) h4e05@ret (h4e02@loop (- h4e04@rest '1) (string-append h4e05@ret h4dfb@pad)))))) h4e02@loop) h4e00@rest (format '"~a" h4dfa@str))) (- h4dfc@n (string-length (format '"~a" h4dfa@str)))))) (set! h4da1@condition-printer (lambda (h4e08@e h4e09@port) ((lambda (h4e0d@max-condition-len) (begin (set! h4e0d@max-condition-len (apply max (map (lambda (h4e1e@c) (string-length (symbol->string (record-type-name (record-rtd h4e1e@c))))) (simple-conditions h4e08@e)))) (begin (display '" Condition components:\n" h4e09@port) (h4d9d@for-each-with-index (lambda (h4e0e@i h4e0f@x) ((lambda (h4e12@rtd h4e13@fields-alist) (begin (format h4e09@port '" ~d. ~a" h4e0e@i (h4d9f@rpad (symbol->string (record-type-name h4e12@rtd)) '" " h4e0d@max-condition-len)) (if (null? h4e13@fields-alist) (newline h4e09@port) (void)) ((letrec ((h4e16@loop (lambda (h4e18@first h4e19@fields-alist) (if (null? h4e19@fields-alist) '() ((lambda (h4e1c@field) (begin (if (not h4e18@first) (display (h4d9f@rpad '"" '" " (+ '4 h4e0d@max-condition-len)) h4e09@port) (void)) (display '"       " h4e09@port) (display (car h4e1c@field) h4e09@port) (display '": " h4e09@port) (write (cdr h4e1c@field) h4e09@port) (newline h4e09@port) (h4e16@loop '#f (cdr h4e19@fields-alist)))) (car h4e19@fields-alist)))))) h4e16@loop) '#t h4e13@fields-alist))) (record-rtd h4e0f@x) (h4da3@record->field-alist h4e0f@x))) (simple-conditions h4e08@e))))) '#f))) (set! h4da3@record->field-alist (lambda (h4e20@r) ((lambda (h4e23@ref) (begin (set! h4e23@ref (lambda (h4e2e@rtd h4e2f@i h4e30@x) ((lambda (h4e34@val) (if (symbol? h4e34@val) (ungensym h4e34@val) h4e34@val)) ((record-accessor h4e2e@rtd h4e2f@i) h4e30@x)))) ((letrec ((h4e24@loop (lambda (h4e26@ret h4e27@rtd) (if h4e27@rtd (h4e24@loop (append h4e26@ret (h4da5@map-with-index (lambda (h4e2a@i h4e2b@field) (cons h4e2b@field (h4e23@ref h4e27@rtd h4e2a@i h4e20@r))) (vector->list (record-type-field-names h4e27@rtd)))) (record-type-parent h4e27@rtd)) h4e26@ret)))) h4e24@loop) '() (record-rtd h4e20@r)))) '#f))) (set! h4da5@map-with-index (lambda (h4e36@proc h4e37@lst) ((letrec ((h4e3a@loop (lambda (h4e3c@i h4e3d@lst h4e3e@ret) (if (null? h4e3d@lst) (reverse h4e3e@ret) (h4e3a@loop (+ h4e3c@i '1) (cdr h4e3d@lst) (cons (h4e36@proc h4e3c@i (car h4e3d@lst)) h4e3e@ret)))))) h4e3a@loop) '0 h4e37@lst '()))) (set! h4da7@repl (lambda h4e42@x ((lambda (h4e45@rec) (begin (set! h4e45@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (h4e48@h4e46) (lambda () (with-exception-handler (lambda (h4e4a@e) ((call/cc (lambda (h4e4c@h4e47) (h4e48@h4e46 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? h4e4a@e) (h4da1@condition-printer h4e4a@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" h4e4a@e))) (h4e4c@h4e47 (lambda () (raise-continuable h4e4a@e)))))))))) (lambda () ((letrec ((h4e4e@loop (lambda (h4e50@line h4e51@accum) ((lambda (h4e55@parentheses-ok? h4e57@eval-string-print) (begin (set! h4e55@parentheses-ok? (lambda (h4e5c@text) ((letrec ((h4e5e@loop (lambda (h4e60@chars h4e61@p0 h4e62@p1) (if (null? h4e60@chars) (= '0 h4e61@p0 h4e62@p1) ((lambda (h4e66@t) (if (memv h4e66@t '(#\()) (h4e5e@loop (cdr h4e60@chars) (+ h4e61@p0 '1) h4e62@p1) (if (memv h4e66@t '(#\))) (h4e5e@loop (cdr h4e60@chars) (- h4e61@p0 '1) h4e62@p1) (if (memv h4e66@t '(#\[)) (h4e5e@loop (cdr h4e60@chars) h4e61@p0 (+ h4e62@p1 '1)) (if (memv h4e66@t '(#\])) (h4e5e@loop (cdr h4e60@chars) h4e61@p0 (- h4e62@p1 '1)) (h4e5e@loop (cdr h4e60@chars) h4e61@p0 h4e62@p1)))))) (car h4e60@chars)))))) h4e5e@loop) (string->list h4e5c@text) '0 '0))) (set! h4e57@eval-string-print (lambda (h4e5a@text) (if (not (or (string=? '"\n" h4e5a@text) (= '0 (string-length h4e5a@text)))) (write (h4db5@eval-top-level (call-with-port (open-string-input-port h4e5a@text) read))) (void)))) (if (eof-object? h4e50@line) (begin (h4e57@eval-string-print h4e51@accum) (exit)) ((lambda (h4e58@current) (if (h4e55@parentheses-ok? h4e58@current) (h4e57@eval-string-print h4e58@current) (h4e4e@loop (get-line (current-input-port)) h4e58@current))) (string-append h4e51@accum h4e50@line))))) '#f '#f)))) h4e4e@loop) (get-line (current-input-port)) '""))))))) (newline) (h4e45@rec)))) (h4e45@rec))) '#f))) (set! h4da9@trace-printer (h2899@h27c3@make-parameter write)) (set! h4dab@command-line (h2899@h27c3@make-parameter (get-command-line))) (set! h4dad@local-library-path (lambda (h4e68@filename) (h2b01@h2990@library-path))) (set! h4daf@load/args (lambda (h4e6a@filename . h4e6c@args) (begin (apply h4dbf@load-r6rs-top-level h4e6a@filename 'load h4e6c@args) (void)))) (set! h4db1@load (lambda (h4e6e@filename) (begin (apply h4dbf@load-r6rs-top-level h4e6e@filename 'load (h4dab@command-line)) (void)))) (set! h4db3@ironscheme-build (lambda () (h4db1@load '"ironscheme-buildscript.ss"))) (set! h4db5@eval-top-level (lambda (h4e70@x) (h49c5@h2fc3@eval h4e70@x (h49db@h2fef@interaction-environment)))) (set! h4db7@compile-system-libraries (lambda () (h4db5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! h4db9@compile (lambda (h4e72@filename) (h4dbf@load-r6rs-top-level h4e72@filename 'compile))) (set! h4dbb@compile->closure (lambda (h4e74@filename) (h4dbf@load-r6rs-top-level h4e74@filename 'closure))) (set! h4dbd@pre-compile-r6rs-file (lambda (h4e76@filename) (h4dbf@load-r6rs-top-level h4e76@filename 'compile))) (set! h4dbf@load-r6rs-top-level (lambda (h4e78@filename h4e79@how . h4e7c@args) ((lambda (h4e82@h4e7f h4e83@h4e81) ((lambda (h4e86@swap) (dynamic-wind h4e86@swap (lambda () ((lambda (h4e88@x*) ((lambda (h4e8a@t) (if (memv h4e8a@t '(closure)) (h49da@h2fed@pre-compile-r6rs-top-level h4e88@x*) (if (memv h4e8a@t '(load)) ((lambda (h4e90@h4e8d h4e91@h4e8f) ((lambda (h4e94@swap) (dynamic-wind h4e94@swap (lambda () ((h49d9@h2feb@compile-r6rs-top-level h4e88@x*))) h4e94@swap)) (lambda () ((lambda (h4e96@t) (begin (h4e90@h4e8d h4e91@h4e8f) (set! h4e91@h4e8f h4e96@t))) (h4e90@h4e8d))))) h4dab@command-line (cons h4e78@filename (car h4e7c@args))) (if (memv h4e8a@t '(compile)) (begin (h49d9@h2feb@compile-r6rs-top-level h4e88@x*) (h2b05@h2998@serialize-all h2894@h27b9@serialize-library h28ee@h28a7@compile-core-expr)) (if '#f '#f (void)))))) h4e79@how)) (with-input-from-file h4e78@filename (lambda () ((letrec ((h4e98@f (lambda () ((lambda (h4e9a@x) (if (eof-object? h4e9a@x) '() (cons h4e9a@x (h4e98@f)))) (h288c@h27a9@read-annotated))))) h4e98@f)))))) h4e86@swap)) (lambda () ((lambda (h4e9c@t) (begin (h4e82@h4e7f h4e83@h4e81) (set! h4e83@h4e81 h4e9c@t))) (h4e82@h4e7f))))) h2b01@h2990@library-path (h4dad@local-library-path h4e78@filename)))) (set! h4dc1@load-r6rs-top-level-sexp (lambda (h4e9e@import-spec h4e9f@thunk) ((lambda (h4ea6@h4ea3 h4ea7@h4ea5) ((lambda (h4eaa@swap) (dynamic-wind h4eaa@swap (lambda () ((lambda (h4eb0@h4ead h4eb1@h4eaf) ((lambda (h4eb4@swap) (dynamic-wind h4eb4@swap (lambda () ((h49d9@h2feb@compile-r6rs-top-level (list (cons 'import h4e9e@import-spec) (list h4e9f@thunk))))) h4eb4@swap)) (lambda () ((lambda (h4eb6@t) (begin (h4eb0@h4ead h4eb1@h4eaf) (set! h4eb1@h4eaf h4eb6@t))) (h4eb0@h4ead))))) h4dab@command-line '())) h4eaa@swap)) (lambda () ((lambda (h4eb8@t) (begin (h4ea6@h4ea3 h4ea7@h4ea5) (set! h4ea7@h4ea5 h4eb8@t))) (h4ea6@h4ea3))))) h2b01@h2990@library-path (h4dad@local-library-path '"")))) (begin (set! h4ece@h4dc1@load-r6rs-top-level-sexp h4dc1@load-r6rs-top-level-sexp) (set! h4ecd@h4dbf@load-r6rs-top-level h4dbf@load-r6rs-top-level) (set! h4ecc@h4dbd@pre-compile-r6rs-file h4dbd@pre-compile-r6rs-file) (set! h4ecb@h4dbb@compile->closure h4dbb@compile->closure) (set! h4eca@h4db9@compile h4db9@compile) (set! h4ec9@h4db7@compile-system-libraries h4db7@compile-system-libraries) (set! h4ec8@h4db5@eval-top-level h4db5@eval-top-level) (set! h4ec7@h4db3@ironscheme-build h4db3@ironscheme-build) (set! h4ec6@h4db1@load h4db1@load) (set! h4ec5@h4daf@load/args h4daf@load/args) (set! h4ec4@h4dad@local-library-path h4dad@local-library-path) (set! h4ec3@h4dab@command-line h4dab@command-line) (set! h4ec2@h4da9@trace-printer h4da9@trace-printer) (set! h4ec1@h4da7@repl h4da7@repl) (set! h4ec0@h4da5@map-with-index h4da5@map-with-index) (set! h4ebf@h4da3@record->field-alist h4da3@record->field-alist) (set! h4ebe@h4da1@condition-printer h4da1@condition-printer) (set! h4ebd@h4d9f@rpad h4d9f@rpad) (set! h4ebc@h4d9d@for-each-with-index h4d9d@for-each-with-index) (set! h4ebb@h4d9b@parse-and-add-library-path h4d9b@parse-and-add-library-path) (set! h4eba@h4d99@add-library-path! h4d99@add-library-path!) (h2b06@h299a@current-precompiled-library-loader h2895@h27bb@load-serialized-library) (set-symbol-value! 'load h4db1@load) (set-symbol-value! 'pre-compile-r6rs-file h4dbd@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs h4db5@eval-top-level) (set-symbol-value! 'int-env-syms h49bc@h2fb1@interaction-environment-symbols) (set-symbol-value! 'expanded2core h28ed@h28a5@expanded->core) (set-symbol-value! 'trace-printer h4da9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (h4dc2@c) (condition (h4cf6@h4b00@make-non-continuable-violation) (h4cec@h4ae7@make-who-condition 'raise) (h4cb0@h4a48@make-message-condition '"returned from non-continuable exception") (h4ce2@h4acc@make-irritants-condition (list h4dc2@c))))) (h4d9b@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (h4d9b@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (h4d99@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (h4d99@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (h4d99@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (h4dc4@prefix) (h2b02@h2992@library-extensions (h4dc4@prefix '".mosh" (h2b02@h2992@library-extensions)))) (lambda (h4dc6@ext h4dc7@ls) (append (map (lambda (h4dca@x) (string-append h4dc6@ext h4dca@x)) h4dc7@ls) h4dc7@ls))) ((lambda (h4dcc@args h4dcd@port) ((lambda (h4dd1@ref) (begin (set! h4dd1@ref (lambda (h4ddc@rtd h4ddd@i h4dde@x) ((lambda (h4de2@val) (if (symbol? h4de2@val) (ungensym h4de2@val) h4de2@val)) ((record-accessor h4ddc@rtd h4ddd@i) h4dde@x)))) (with-exception-handler (lambda (h4dd2@c) (if (condition? h4dd2@c) (h4da1@condition-printer h4dd2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" h4dd2@c))) (lambda () (if ((call/cc (lambda (h4dd6@h4dd4) (lambda () (with-exception-handler (lambda (h4dd8@c) ((call/cc (lambda (h4dda@h4dd5) (h4dd6@h4dd4 (lambda () (if '#t '#f (h4dda@h4dd5 (lambda () (raise-continuable h4dd8@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (h4dc1@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? h4dcc@args) (h4da7@repl) (h4dbf@load-r6rs-top-level (car h4dcc@args) 'load (cdr h4dcc@args)))))))) '#f)) (h4dab@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
