;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (a27ab@read-annotated a27ad@annotation-stripped a27af@annotation? a27b1@annotation-source a27b3@annotation-expression a27b5@scm->fasl a27b7@fasl-save a27b9@fasl-load a27bb@serialize-library a27bd@load-serialized-library a27bf@make-record-printer a27c1@compile-core a27c3@read-library-source-file a27c5@make-parameter a282d@file-options-spec) (begin (set! a27ab@read-annotated read) (set! a27ad@annotation-stripped (lambda (a282e@x) (a27b3@annotation-expression a282e@x))) (set! a27af@annotation? (lambda (a2830@x) (source-info a2830@x))) (set! a27b1@annotation-source (lambda (a2832@x) (source-info a2832@x))) (set! a27b3@annotation-expression (lambda (a2834@x) (if (pair? a2834@x) (cons (car a2834@x) (cdr a2834@x)) (display '"line:46\n")))) (set! a27b5@scm->fasl (lambda (a2836@filename) (string-append a2836@filename '".mosh-fasl"))) (set! a27b7@fasl-save (lambda (a2838@filename a2839@obj) (call-with-port (open-file-output-port a2838@filename) (lambda (a283c@port) ((symbol-value 'fasl-write!) a2839@obj a283c@port))))) (set! a27b9@fasl-load (lambda (a283e@filename) (call-with-port (open-file-input-port a283e@filename) (symbol-value 'fasl-read!)))) (set! a27bb@serialize-library (lambda (a2840@filename a2841@obj) (begin (format '#t '"serialize-library ~a\n..." a2840@filename) ((lambda (a2844@expanded2core) ((lambda (a2846@compile) ((lambda (a2848@code) ((lambda (a284a@pivot) ((lambda (a284c@visit) ((lambda () (begin (set-car! a284a@pivot a284c@visit) ((lambda (a284e@pivot) ((lambda (a2850@invoke) ((lambda () (set-car! a284e@pivot a2850@invoke)))) (a2846@compile (a2844@expanded2core (car a284e@pivot))))) (cdr a284a@pivot)))))) (a2846@compile (a2844@expanded2core (car a284a@pivot))))) (cddddr (cddddr a2848@code)))) a2841@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (a2852@fasl-file) (begin (if (file-exists? a2852@fasl-file) (delete-file a2852@fasl-file) (void)) ((call/cc (lambda (a2856@a2854) (lambda () (with-exception-handler (lambda (a2858@c) ((call/cc (lambda (a285a@a2855) (a2856@a2854 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " a2840@filename) (if (file-exists? a2852@fasl-file) (delete-file a2852@fasl-file) (void)) '#f) (a285a@a2855 (lambda () (raise-continuable a2858@c)))))))))) (lambda () (begin (a27b7@fasl-save a2852@fasl-file a2841@obj) (display '"OK\n")))))))))) (a27b5@scm->fasl a2840@filename))))) (set! a27bd@load-serialized-library (lambda (a285c@filename a285d@obj) ((lambda (a2860@fasl-file) (if (and (file-exists? a2860@fasl-file) ((symbol-value 'file-newer?) a2860@fasl-file a285c@filename)) ((lambda (a2862@expanded2core) ((lambda (a2864@eval-compiled-core) ((lambda (a2866@code) ((lambda (a2868@pivot) ((lambda (a286a@visit) ((lambda (a286c@visit-proc) ((lambda () (begin (set-car! a2868@pivot a286c@visit-proc) ((lambda (a286e@pivot) ((lambda (a2870@invoke) ((lambda () (begin (set-car! a286e@pivot (lambda () (a2864@eval-compiled-core a2870@invoke))) (apply a285d@obj a2866@code))))) (car a286e@pivot))) (cdr a2868@pivot)) '#t)))) (lambda () (a2864@eval-compiled-core a286a@visit)))) (car a2868@pivot))) (cddddr (cddddr a2866@code)))) (a27b9@fasl-load a2860@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (a27b5@scm->fasl a285c@filename)))) (set! a27bf@make-record-printer (lambda (a2872@name a2873@printer) (lambda a2876@x (begin (display '"record printer") (for-each display a2876@x))))) (set! a27c1@compile-core (lambda a2878@x (apply error 'comile-core '"not implementated" a2878@x))) (set! a27c3@read-library-source-file (lambda (a287a@file-name) (with-input-from-file a287a@file-name a27ab@read-annotated))) (set! a27c5@make-parameter (lambda a288a ((lambda (a288b) (if (= a288b '1) (apply (lambda (a287c@x) (a27c5@make-parameter a287c@x (lambda (a287e@x) a287e@x))) a288a) (if (= a288b '2) (apply (lambda (a2880@x a2881@fender) ((lambda (a2884@x) (lambda a2888 ((lambda (a2889) (if (= a2889 '0) (apply (lambda () a2884@x) a2888) (if (= a2889 '1) (apply (lambda (a2886@v) (set! a2884@x (a2881@fender a2886@v))) a2888) (error 'apply '"invalid arg count")))) (length a2888)))) (a2881@fender a2880@x))) a288a) (error 'apply '"invalid arg count")))) (length a288a)))) (set! a282d@file-options-spec (lambda (a288c@x) a288c@x)) (begin (set! a289c@a282d@file-options-spec a282d@file-options-spec) (set! a289b@a27c5@make-parameter a27c5@make-parameter) (set! a289a@a27c3@read-library-source-file a27c3@read-library-source-file) (set! a2899@a27c1@compile-core a27c1@compile-core) (set! a2898@a27bf@make-record-printer a27bf@make-record-printer) (set! a2897@a27bd@load-serialized-library a27bd@load-serialized-library) (set! a2896@a27bb@serialize-library a27bb@serialize-library) (set! a2895@a27b9@fasl-load a27b9@fasl-load) (set! a2894@a27b7@fasl-save a27b7@fasl-save) (set! a2893@a27b5@scm->fasl a27b5@scm->fasl) (set! a2892@a27b3@annotation-expression a27b3@annotation-expression) (set! a2891@a27b1@annotation-source a27b1@annotation-source) (set! a2890@a27af@annotation? a27af@annotation?) (set! a288f@a27ad@annotation-stripped a27ad@annotation-stripped) (set! a288e@a27ab@read-annotated a27ab@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a28a1@current-primitive-locations a28a3@mutable? a28a5@rewriter a28a7@expanded->core a28a9@compile-core-expr a28ab@pretty-print a28ad@compile-core-expr-to-port) (begin (set! a28a1@current-primitive-locations (a289b@a27c5@make-parameter (lambda (a28ae@x) '#f) (lambda (a28b0@p) a28b0@p))) (set! a28a3@mutable? (lambda (a28b2@x) (or (pair? a28b2@x) (vector? a28b2@x) (hashtable? a28b2@x)))) (set! a28a5@rewriter (lambda (a28b4@quote-hack?) ((lambda (a28b7@f) (begin (set! a28b7@f (lambda (a28b8@x) (if (pair? a28b8@x) ((lambda (a28ba@t) (if (memv a28ba@t '(quote)) (if (and a28b4@quote-hack? (a28a3@mutable? (cadr a28b8@x))) ((lambda (a28bc@g) (begin (set-symbol-value! a28bc@g (cadr a28b8@x)) a28bc@g)) (gensym)) a28b8@x) (if (memv a28ba@t '(case-lambda)) (cons 'case-lambda (map (lambda (a28be@x) (cons (car a28be@x) (map a28b7@f (cdr a28be@x)))) (cdr a28b8@x))) (if (memv a28ba@t '(lambda)) (cons* 'lambda (cadr a28b8@x) (map a28b7@f (cddr a28b8@x))) (if (memv a28ba@t '(letrec)) ((lambda (a28c0@bindings a28c1@body*) ((lambda (a28c4@lhs* a28c5@rhs*) (cons* 'letrec (map list a28c4@lhs* (map a28b7@f a28c5@rhs*)) (map a28b7@f a28c1@body*))) (map car a28c0@bindings) (map cadr a28c0@bindings))) (cadr a28b8@x) (cddr a28b8@x)) (if (memv a28ba@t '(letrec*)) ((lambda (a28c8@bindings a28c9@body*) ((lambda (a28cc@lhs* a28cd@rhs*) (cons* 'letrec* (map list a28cc@lhs* (map a28b7@f a28cd@rhs*)) (map a28b7@f a28c9@body*))) (map car a28c8@bindings) (map cadr a28c8@bindings))) (cadr a28b8@x) (cddr a28b8@x)) (if (memv a28ba@t '(library-letrec*)) ((lambda (a28d0@name a28d1@x) ((lambda (a28d4@bindings a28d5@body*) ((lambda (a28d8@lhs* a28d9@lhs** a28da@rhs*) (cons* 'library-letrec* a28d0@name (map list a28d8@lhs* a28d9@lhs** (map a28b7@f a28da@rhs*)) (map a28b7@f a28d5@body*))) (map car a28d4@bindings) (map cadr a28d4@bindings) (map caddr a28d4@bindings))) (cadr a28d1@x) (cddr a28d1@x))) (cadr a28b8@x) (cdr a28b8@x)) (if (memv a28ba@t '(begin)) (cons 'begin (map a28b7@f (cdr a28b8@x))) (if (memv a28ba@t '(set!)) (list 'set! (cadr a28b8@x) (a28b7@f (caddr a28b8@x))) (if (memv a28ba@t '(primitive)) ((lambda (a28de@op) ((lambda (a28e0@t) (if a28e0@t ((lambda (a28e2@loc) a28e2@loc) a28e0@t) a28de@op)) ((a28a1@current-primitive-locations) a28de@op))) (cadr a28b8@x)) (if (memv a28ba@t '(define)) a28b8@x (if (list? a28b8@x) (map a28b7@f a28b8@x) (error 'rewrite '"invalid form ~s ~s" a28b8@x (list? a28b8@x)))))))))))))) (car a28b8@x)) a28b8@x))) a28b7@f)) '#f))) (set! a28a7@expanded->core (lambda (a28e4@x) ((a28a5@rewriter '#f) a28e4@x))) (set! a28a9@compile-core-expr (lambda (a28e6@x) ((a28a5@rewriter '#f) a28e6@x))) (set! a28ab@pretty-print write) (set! a28ad@compile-core-expr-to-port (lambda (a28e8@x a28e9@p) (a28ab@pretty-print ((a28a5@rewriter '#f) a28e8@x) a28e9@p))) (begin (set! a28f2@a28ad@compile-core-expr-to-port a28ad@compile-core-expr-to-port) (set! a28f1@a28ab@pretty-print a28ab@pretty-print) (set! a28f0@a28a9@compile-core-expr a28a9@compile-core-expr) (set! a28ef@a28a7@expanded->core a28a7@expanded->core) (set! a28ee@a28a5@rewriter a28a5@rewriter) (set! a28ed@a28a3@mutable? a28a3@mutable?) (set! a28ec@a28a1@current-primitive-locations a28a1@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (a2941@make-collection a2943@current-library-collection a2949@a2944 a294b@a2946 a294d@a2945 a2950@library? a2952@make-library a2954@library-id a2956@library-name a2958@library-version a295a@library-imp* a295c@library-vis* a295e@library-inv* a2960@library-subst a2962@library-env a2964@library-visit-state a2966@library-invoke-state a2968@library-visit-code a296a@library-invoke-code a296c@library-visible? a296e@library-source-file-name a2970@set-library-id! a2972@set-library-name! a2974@set-library-version! a2976@set-library-imp*! a2978@set-library-vis*! a297a@set-library-inv*! a297c@set-library-subst! a297e@set-library-env! a2980@set-library-visit-state! a2982@set-library-invoke-state! a2984@set-library-visit-code! a2986@set-library-invoke-code! a2988@set-library-visible?! a298a@set-library-source-file-name! a298c@rp a298e@find-dependencies a2990@find-library-by a2992@library-path a2994@library-extensions a2996@library-name->file-name a2998@file-locator a299a@serialize-all a299c@current-precompiled-library-loader a299e@try-load-from-file a29a0@library-loader a29a2@current-library-expander a29a4@external-pending-libraries a29a6@find-external-library a29a8@find-library-by-name a29aa@library-exists? a29ac@find-library-by-spec/die a29ae@label->binding-table a29b0@install-library-record a29b2@install-library a29b4@imported-label->binding a29b6@invoke-library a29b8@visit-library a29ba@invoke-library-by-spec a29bc@installed-libraries a29be@library-spec) (begin (set! a2941@make-collection (lambda () ((lambda (a29bf@set) ((lambda (a29c2@set-cons) (begin (set! a29c2@set-cons (lambda (a29c7@x a29c8@ls) (if (memq a29c7@x a29c8@ls) a29c8@ls (cons a29c7@x a29c8@ls)))) (lambda a29c5 ((lambda (a29c6) (if (= a29c6 '0) (apply (lambda () a29bf@set) a29c5) (if (= a29c6 '1) (apply (lambda (a29c3@x) (set! a29bf@set (a29c2@set-cons a29c3@x a29bf@set))) a29c5) (error 'apply '"invalid arg count")))) (length a29c5))))) '#f)) '()))) (set! a2943@current-library-collection (a289b@a27c5@make-parameter (a2941@make-collection) (lambda (a29cb@x) (begin (if (not (procedure? a29cb@x)) (assertion-violation 'current-library-collection '"not a procedure" a29cb@x) (void)) a29cb@x)))) (set! a2949@a2944 (make-record-type-descriptor 'library '#f 'a2947 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! a294b@a2946 '#f) (set! a294d@a2945 (make-record-constructor-descriptor a2949@a2944 '#f a294b@a2946)) (set! a2950@library? (record-predicate a2949@a2944)) (set! a2952@make-library (record-constructor a294d@a2945)) (set! a2954@library-id (record-accessor a2949@a2944 '0)) (set! a2956@library-name (record-accessor a2949@a2944 '1)) (set! a2958@library-version (record-accessor a2949@a2944 '2)) (set! a295a@library-imp* (record-accessor a2949@a2944 '3)) (set! a295c@library-vis* (record-accessor a2949@a2944 '4)) (set! a295e@library-inv* (record-accessor a2949@a2944 '5)) (set! a2960@library-subst (record-accessor a2949@a2944 '6)) (set! a2962@library-env (record-accessor a2949@a2944 '7)) (set! a2964@library-visit-state (record-accessor a2949@a2944 '8)) (set! a2966@library-invoke-state (record-accessor a2949@a2944 '9)) (set! a2968@library-visit-code (record-accessor a2949@a2944 '10)) (set! a296a@library-invoke-code (record-accessor a2949@a2944 '11)) (set! a296c@library-visible? (record-accessor a2949@a2944 '12)) (set! a296e@library-source-file-name (record-accessor a2949@a2944 '13)) (set! a2970@set-library-id! (record-mutator a2949@a2944 '0)) (set! a2972@set-library-name! (record-mutator a2949@a2944 '1)) (set! a2974@set-library-version! (record-mutator a2949@a2944 '2)) (set! a2976@set-library-imp*! (record-mutator a2949@a2944 '3)) (set! a2978@set-library-vis*! (record-mutator a2949@a2944 '4)) (set! a297a@set-library-inv*! (record-mutator a2949@a2944 '5)) (set! a297c@set-library-subst! (record-mutator a2949@a2944 '6)) (set! a297e@set-library-env! (record-mutator a2949@a2944 '7)) (set! a2980@set-library-visit-state! (record-mutator a2949@a2944 '8)) (set! a2982@set-library-invoke-state! (record-mutator a2949@a2944 '9)) (set! a2984@set-library-visit-code! (record-mutator a2949@a2944 '10)) (set! a2986@set-library-invoke-code! (record-mutator a2949@a2944 '11)) (set! a2988@set-library-visible?! (record-mutator a2949@a2944 '12)) (set! a298a@set-library-source-file-name! (record-mutator a2949@a2944 '13)) (set! a298c@rp (a2898@a27bf@make-record-printer 'library (lambda (a29cd@x a29ce@p a29cf@wr) (begin (if (not (a2950@library? a29cd@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (a2958@library-version a29cd@x)) (a2956@library-name a29cd@x) (append (a2956@library-name a29cd@x) (list (a2958@library-version a29cd@x))))) a29ce@p))))) (set! a298e@find-dependencies (lambda (a29d3@ls) (if (null? a29d3@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! a2990@find-library-by (lambda (a29d5@pred) ((letrec ((a29d7@f (lambda (a29d9@ls) (if (null? a29d9@ls) '#f (if (a29d5@pred (car a29d9@ls)) (car a29d9@ls) (a29d7@f (cdr a29d9@ls))))))) a29d7@f) ((a2943@current-library-collection))))) (set! a2992@library-path (a289b@a27c5@make-parameter '(".") (lambda (a29db@x) (if (and (list? a29db@x) (for-all string? a29db@x)) (map (lambda (a29dd@x) a29dd@x) a29db@x) (assertion-violation 'library-path '"not a list of strings" a29db@x))))) (set! a2994@library-extensions (a289b@a27c5@make-parameter '(".sls" ".ss" ".scm") (lambda (a29df@x) (if (and (list? a29df@x) (for-all string? a29df@x)) (map (lambda (a29e1@x) a29e1@x) a29df@x) (assertion-violation 'library-extensions '"not a list of strings" a29df@x))))) (set! a2996@library-name->file-name (lambda (a29e3@x) (call-with-values (lambda () (open-string-output-port)) (lambda (a29e9@a29e6 a29ea@a29e8) ((lambda (a29ed@extract a29ee@p) ((lambda (a29f2@display-hex) (begin (set! a29f2@display-hex (lambda (a29fb@n) (if (<= '0 a29fb@n '9) (display a29fb@n a29ee@p) (display (integer->char (+ (char->integer '#\a) (- a29fb@n '10))) a29ee@p)))) (begin ((letrec ((a29f3@f (lambda (a29f5@ls) (if (not (null? a29f5@ls)) (begin (display '"/" a29ee@p) (for-each (lambda (a29f7@c) (if (or (char<=? '#\a a29f7@c '#\z) (char<=? '#\A a29f7@c '#\Z) (char<=? '#\0 a29f7@c '#\9) (memv a29f7@c '(#\- #\. #\_ #\~))) (display a29f7@c a29ee@p) (begin (display '"%" a29ee@p) ((lambda (a29f9@n) (begin (a29f2@display-hex (quotient a29f9@n '16)) (a29f2@display-hex (remainder a29f9@n '16)))) (char->integer a29f7@c))))) (string->list (symbol->string (car a29f5@ls)))) (a29f3@f (cdr a29f5@ls))) (void))))) a29f3@f) a29e3@x) (a29ed@extract)))) '#f)) a29ea@a29e8 a29e9@a29e6))))) (set! a2998@file-locator (a289b@a27c5@make-parameter (lambda (a29fd@x) ((lambda (a29ff@str) ((letrec ((a2a01@f (lambda (a2a03@ls a2a04@exts a2a05@failed-list) (if (null? a2a03@ls) ((lambda () ((lambda (a2a11@a2a0c a2a13@a2a0e a2a15@a2a0d a2a18@a2a0b a2a1a@make-library-resolution-condition a2a1c@a2a09 a2a1e@a2a0a a2a20@library-resolution-condition? a2a22@condition-library a2a24@condition-files) (begin (set! a2a11@a2a0c (make-record-type-descriptor '&library-resolution a4cb2@a49f9@&condition-rtd 'a2a0f '#f '#f '#((immutable library) (immutable files)))) (set! a2a13@a2a0e '#f) (set! a2a15@a2a0d (make-record-constructor-descriptor a2a11@a2a0c a4cb3@a49fb@&condition-rcd a2a13@a2a0e)) (set! a2a18@a2a0b (record-predicate a2a11@a2a0c)) (set! a2a1a@make-library-resolution-condition (record-constructor a2a15@a2a0d)) (set! a2a1c@a2a09 (record-accessor a2a11@a2a0c '0)) (set! a2a1e@a2a0a (record-accessor a2a11@a2a0c '1)) (set! a2a20@library-resolution-condition? (condition-predicate a2a11@a2a0c)) (set! a2a22@condition-library (condition-accessor a2a11@a2a0c a2a1c@a2a09)) (set! a2a24@condition-files (condition-accessor a2a11@a2a0c a2a1e@a2a0a)) (raise (condition (a4cd2@a4a93@make-error) (a4cf4@a4aef@make-who-condition 'expander) (a4cb8@a4a50@make-message-condition '"cannot locate library in library-path") (a2a1a@make-library-resolution-condition a29fd@x (reverse a2a05@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? a2a04@exts) (a2a01@f (cdr a2a03@ls) (a2994@library-extensions) a2a05@failed-list) ((lambda (a2a25@name) (if (file-exists? a2a25@name) a2a25@name (a2a01@f a2a03@ls (cdr a2a04@exts) (cons a2a25@name a2a05@failed-list)))) (string-append (car a2a03@ls) a29ff@str (car a2a04@exts)))))))) a2a01@f) (a2992@library-path) (a2994@library-extensions) '())) (a2996@library-name->file-name a29fd@x))) (lambda (a2a27@f) (if (procedure? a2a27@f) a2a27@f (assertion-violation 'file-locator '"not a procedure" a2a27@f))))) (set! a299a@serialize-all (lambda (a2a29@serialize a2a2a@compile) ((lambda (a2a2e@library-desc) (begin (set! a2a2e@library-desc (lambda (a2a31@x) (list (a2954@library-id a2a31@x) (a2956@library-name a2a31@x)))) (for-each (lambda (a2a2f@x) (if (a296e@library-source-file-name a2a2f@x) (a2a29@serialize (a296e@library-source-file-name a2a2f@x) (list (a2954@library-id a2a2f@x) (a2956@library-name a2a2f@x) (a2958@library-version a2a2f@x) (map a2a2e@library-desc (a295a@library-imp* a2a2f@x)) (map a2a2e@library-desc (a295c@library-vis* a2a2f@x)) (map a2a2e@library-desc (a295e@library-inv* a2a2f@x)) (a2960@library-subst a2a2f@x) (a2962@library-env a2a2f@x) (a2a2a@compile (a2968@library-visit-code a2a2f@x)) (a2a2a@compile (a296a@library-invoke-code a2a2f@x)) (a296c@library-visible? a2a2f@x))) (void))) ((a2943@current-library-collection))))) '#f))) (set! a299c@current-precompiled-library-loader (a289b@a27c5@make-parameter (lambda (a2a33@filename a2a34@sk) '#f))) (set! a299e@try-load-from-file (lambda (a2a37@filename) ((a299c@current-precompiled-library-loader) a2a37@filename (lambda a2a5d ((lambda (a2a5e) (if (= a2a5e '11) (apply (lambda (a2a39@id a2a3a@name a2a3b@ver a2a3c@imp* a2a3d@vis* a2a3e@inv* a2a3f@exp-subst a2a40@exp-env a2a41@visit-proc a2a42@invoke-proc a2a43@visible?) ((letrec ((a2a4f@f (lambda (a2a51@deps) (if (null? a2a51@deps) (begin (a29b2@install-library a2a39@id a2a3a@name a2a3b@ver a2a3c@imp* a2a3d@vis* a2a3e@inv* a2a3f@exp-subst a2a40@exp-env a2a41@visit-proc a2a42@invoke-proc '#f '#f a2a43@visible? '#f) '#t) ((lambda (a2a53@d) ((lambda (a2a55@label a2a56@dname) ((lambda (a2a59@l) (if (and (a2950@library? a2a59@l) (eq? a2a55@label (a2954@library-id a2a59@l))) (a2a4f@f (cdr a2a51@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" a2a3a@name a2a56@dname a2a37@filename a2a59@l a2a55@label (a2954@library-id a2a59@l)) '#f))) (a29a8@find-library-by-name a2a56@dname))) (car a2a53@d) (cadr a2a53@d))) (car a2a51@deps)))))) a2a4f@f) (append a2a3c@imp* a2a3d@vis* a2a3e@inv*))) a2a5d) (if (>= a2a5e '0) (apply (lambda a2a5b@others '#f) a2a5d) (error 'apply '"invalid arg count")))) (length a2a5d)))))) (set! a29a0@library-loader (a289b@a27c5@make-parameter (lambda (a2a5f@x) ((lambda (a2a61@file-name) (if (not a2a61@file-name) (assertion-violation '#f '"cannot file library" a2a5f@x) (or (a299e@try-load-from-file a2a61@file-name) ((a29a2@current-library-expander) (a289a@a27c3@read-library-source-file a2a61@file-name) a2a61@file-name (lambda (a2a63@name) (if (not (fast-equal? a2a63@name a2a5f@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (a2a69@a2a66 a2a6a@a2a68) ((lambda (a2a6d@e a2a6e@p) (begin (display '"expected to find library " a2a6e@p) (write a2a5f@x a2a6e@p) (display '" in file " a2a6e@p) (display a2a61@file-name a2a6e@p) (display '", found " a2a6e@p) (write a2a63@name a2a6e@p) (display '" instead" a2a6e@p) (a2a6d@e))) a2a6a@a2a68 a2a69@a2a66)))) (void))))))) ((a2998@file-locator) a2a5f@x))) (lambda (a2a71@f) (if (procedure? a2a71@f) a2a71@f (assertion-violation 'library-locator '"not a procedure" a2a71@f))))) (set! a29a2@current-library-expander (a289b@a27c5@make-parameter (lambda (a2a73@x) (assertion-violation 'library-expander '"not initialized")) (lambda (a2a75@f) (if (procedure? a2a75@f) a2a75@f (assertion-violation 'library-expander '"not a procedure" a2a75@f))))) (set! a29a4@external-pending-libraries (a289b@a27c5@make-parameter '())) (set! a29a6@find-external-library (lambda (a2a77@name) (begin (if (member a2a77@name (a29a4@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" a2a77@name) (void)) ((lambda (a2a7d@a2a7a a2a7e@a2a7c) ((lambda (a2a81@swap) (dynamic-wind a2a81@swap (lambda () (begin ((a29a0@library-loader) a2a77@name) (or (a2990@find-library-by (lambda (a2a83@x) (fast-equal? (a2956@library-name a2a83@x) a2a77@name))) (assertion-violation '#f '"handling external library did not yield the correct library" a2a77@name)))) a2a81@swap)) (lambda () ((lambda (a2a85@t) (begin (a2a7d@a2a7a a2a7e@a2a7c) (set! a2a7e@a2a7c a2a85@t))) (a2a7d@a2a7a))))) a29a4@external-pending-libraries (cons a2a77@name (a29a4@external-pending-libraries)))))) (set! a29a8@find-library-by-name (lambda (a2a87@name) (or (a2990@find-library-by (lambda (a2a89@x) (fast-equal? (a2956@library-name a2a89@x) a2a87@name))) (a29a6@find-external-library a2a87@name)))) (set! a29aa@library-exists? (lambda (a2a8b@name) (and (a2990@find-library-by (lambda (a2a8d@x) (fast-equal? (a2956@library-name a2a8d@x) a2a8b@name))) '#t))) (set! a29ac@find-library-by-spec/die (lambda (a2a8f@spec) ((lambda (a2a91@id) (or (a2990@find-library-by (lambda (a2a93@x) (eq? a2a91@id (a2954@library-id a2a93@x)))) (assertion-violation '#f '"cannot find library with required spec" a2a8f@spec))) (car a2a8f@spec)))) (set! a29ae@label->binding-table (make-eq-hashtable)) (set! a29b0@install-library-record (lambda (a2a95@lib) (begin ((lambda (a2a97@exp-env) (for-each (lambda (a2a99@x) ((lambda (a2a9b@label a2a9c@binding) ((lambda (a2a9f@binding) (begin (if (hashtable-ref a29ae@label->binding-table a2a9b@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" a2a9b@label (hashtable-ref a29ae@label->binding-table a2a9b@label '#f) a2a9f@binding) (exit)) (void)) (hashtable-set! a29ae@label->binding-table a2a9b@label a2a9f@binding))) ((lambda (a2aa1@t) (if (memv a2aa1@t '(global)) (cons 'global (cons a2a95@lib (cdr a2a9c@binding))) (if (memv a2aa1@t '(global-macro)) (cons 'global-macro (cons a2a95@lib (cdr a2a9c@binding))) (if (memv a2aa1@t '(global-macro!)) (cons 'global-macro! (cons a2a95@lib (cdr a2a9c@binding))) a2a9c@binding)))) (car a2a9c@binding)))) (car a2a99@x) (cdr a2a99@x))) a2a97@exp-env)) (a2962@library-env a2a95@lib)) ((a2943@current-library-collection) a2a95@lib)))) (set! a29b2@install-library (lambda (a2aa3@id a2aa4@name a2aa5@ver a2aa6@imp* a2aa7@vis* a2aa8@inv* a2aa9@exp-subst a2aaa@exp-env a2aab@visit-proc a2aac@invoke-proc a2aad@visit-code a2aae@invoke-code a2aaf@visible? a2ab0@source-file-name) ((lambda (a2abf@imp-lib* a2ac0@vis-lib* a2ac1@inv-lib*) (begin (if (not (and (symbol? a2aa3@id) (list? a2aa4@name) (list? a2aa5@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" a2aa3@id a2aa4@name a2aa5@ver) (void)) (if (a29aa@library-exists? a2aa4@name) (assertion-violation 'install-library '"library is already installed" a2aa4@name) (void)) ((lambda (a2ac5@lib) (a29b0@install-library-record a2ac5@lib)) (a2952@make-library a2aa3@id a2aa4@name a2aa5@ver a2abf@imp-lib* a2ac0@vis-lib* a2ac1@inv-lib* a2aa9@exp-subst a2aaa@exp-env a2aab@visit-proc a2aac@invoke-proc a2aad@visit-code a2aae@invoke-code a2aaf@visible? a2ab0@source-file-name)))) (map a29ac@find-library-by-spec/die a2aa6@imp*) (map a29ac@find-library-by-spec/die a2aa7@vis*) (map a29ac@find-library-by-spec/die a2aa8@inv*)))) (set! a29b4@imported-label->binding (lambda (a2ac7@lab) (hashtable-ref a29ae@label->binding-table a2ac7@lab '#f))) (set! a29b6@invoke-library (lambda (a2ac9@lib) ((lambda (a2acb@invoke) (if (procedure? a2acb@invoke) (begin (a2982@set-library-invoke-state! a2ac9@lib (lambda () (assertion-violation 'invoke '"circularity detected" a2ac9@lib))) (for-each a29b6@invoke-library (a295e@library-inv* a2ac9@lib)) (a2982@set-library-invoke-state! a2ac9@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" a2ac9@lib))) (a2acb@invoke) (a2982@set-library-invoke-state! a2ac9@lib '#t)) (void))) (a2966@library-invoke-state a2ac9@lib)))) (set! a29b8@visit-library (lambda (a2acd@lib) ((lambda (a2acf@visit) (if (procedure? a2acf@visit) (begin (a2980@set-library-visit-state! a2acd@lib (lambda () (assertion-violation 'visit '"circularity detected" a2acd@lib))) (for-each a29b6@invoke-library (a295c@library-vis* a2acd@lib)) (a2980@set-library-visit-state! a2acd@lib (lambda () (assertion-violation 'invoke '"first visit did not return" a2acd@lib))) (a2acf@visit) (a2980@set-library-visit-state! a2acd@lib '#t)) (void))) (a2964@library-visit-state a2acd@lib)))) (set! a29ba@invoke-library-by-spec (lambda (a2ad1@spec) (a29b6@invoke-library (a29ac@find-library-by-spec/die a2ad1@spec)))) (set! a29bc@installed-libraries (lambda a2ad9 ((lambda (a2ada) (if (= a2ada '1) (apply (lambda (a2ad3@all?) ((letrec ((a2ad5@f (lambda (a2ad7@ls) (if (null? a2ad7@ls) '() (if (or a2ad3@all? (a296c@library-visible? (car a2ad7@ls))) (cons (car a2ad7@ls) (a2ad5@f (cdr a2ad7@ls))) (a2ad5@f (cdr a2ad7@ls))))))) a2ad5@f) ((a2943@current-library-collection)))) a2ad9) (if (= a2ada '0) (apply (lambda () (a29bc@installed-libraries '#f)) a2ad9) (error 'apply '"invalid arg count")))) (length a2ad9)))) (set! a29be@library-spec (lambda (a2adb@x) (begin (if (not (a2950@library? a2adb@x)) (assertion-violation 'library-spec '"not a library" a2adb@x) (void)) (list (a2954@library-id a2adb@x) (a2956@library-name a2adb@x) (a2958@library-version a2adb@x))))) (begin (set! a2b19@a29be@library-spec a29be@library-spec) (set! a2b18@a29bc@installed-libraries a29bc@installed-libraries) (set! a2b17@a29ba@invoke-library-by-spec a29ba@invoke-library-by-spec) (set! a2b16@a29b8@visit-library a29b8@visit-library) (set! a2b15@a29b6@invoke-library a29b6@invoke-library) (set! a2b14@a29b4@imported-label->binding a29b4@imported-label->binding) (set! a2b13@a29b2@install-library a29b2@install-library) (set! a2b12@a29b0@install-library-record a29b0@install-library-record) (set! a2b11@a29ae@label->binding-table a29ae@label->binding-table) (set! a2b10@a29ac@find-library-by-spec/die a29ac@find-library-by-spec/die) (set! a2b0f@a29aa@library-exists? a29aa@library-exists?) (set! a2b0e@a29a8@find-library-by-name a29a8@find-library-by-name) (set! a2b0d@a29a6@find-external-library a29a6@find-external-library) (set! a2b0c@a29a4@external-pending-libraries a29a4@external-pending-libraries) (set! a2b0b@a29a2@current-library-expander a29a2@current-library-expander) (set! a2b0a@a29a0@library-loader a29a0@library-loader) (set! a2b09@a299e@try-load-from-file a299e@try-load-from-file) (set! a2b08@a299c@current-precompiled-library-loader a299c@current-precompiled-library-loader) (set! a2b07@a299a@serialize-all a299a@serialize-all) (set! a2b06@a2998@file-locator a2998@file-locator) (set! a2b05@a2996@library-name->file-name a2996@library-name->file-name) (set! a2b04@a2994@library-extensions a2994@library-extensions) (set! a2b03@a2992@library-path a2992@library-path) (set! a2b02@a2990@find-library-by a2990@find-library-by) (set! a2b01@a298e@find-dependencies a298e@find-dependencies) (set! a2b00@a298c@rp a298c@rp) (set! a2aff@a298a@set-library-source-file-name! a298a@set-library-source-file-name!) (set! a2afe@a2988@set-library-visible?! a2988@set-library-visible?!) (set! a2afd@a2986@set-library-invoke-code! a2986@set-library-invoke-code!) (set! a2afc@a2984@set-library-visit-code! a2984@set-library-visit-code!) (set! a2afb@a2982@set-library-invoke-state! a2982@set-library-invoke-state!) (set! a2afa@a2980@set-library-visit-state! a2980@set-library-visit-state!) (set! a2af9@a297e@set-library-env! a297e@set-library-env!) (set! a2af8@a297c@set-library-subst! a297c@set-library-subst!) (set! a2af7@a297a@set-library-inv*! a297a@set-library-inv*!) (set! a2af6@a2978@set-library-vis*! a2978@set-library-vis*!) (set! a2af5@a2976@set-library-imp*! a2976@set-library-imp*!) (set! a2af4@a2974@set-library-version! a2974@set-library-version!) (set! a2af3@a2972@set-library-name! a2972@set-library-name!) (set! a2af2@a2970@set-library-id! a2970@set-library-id!) (set! a2af1@a296e@library-source-file-name a296e@library-source-file-name) (set! a2af0@a296c@library-visible? a296c@library-visible?) (set! a2aef@a296a@library-invoke-code a296a@library-invoke-code) (set! a2aee@a2968@library-visit-code a2968@library-visit-code) (set! a2aed@a2966@library-invoke-state a2966@library-invoke-state) (set! a2aec@a2964@library-visit-state a2964@library-visit-state) (set! a2aeb@a2962@library-env a2962@library-env) (set! a2aea@a2960@library-subst a2960@library-subst) (set! a2ae9@a295e@library-inv* a295e@library-inv*) (set! a2ae8@a295c@library-vis* a295c@library-vis*) (set! a2ae7@a295a@library-imp* a295a@library-imp*) (set! a2ae6@a2958@library-version a2958@library-version) (set! a2ae5@a2956@library-name a2956@library-name) (set! a2ae4@a2954@library-id a2954@library-id) (set! a2ae3@a2952@make-library a2952@make-library) (set! a2ae2@a2950@library? a2950@library?) (set! a2ae1@a294d@a2945 a294d@a2945) (set! a2ae0@a294b@a2946 a294b@a2946) (set! a2adf@a2949@a2944 a2949@a2944) (set! a2ade@a2943@current-library-collection a2943@current-library-collection) (set! a2add@a2941@make-collection a2941@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a2b1c@build-global-define a2b8d@build-lambda a2b8f@build-case-lambda a2b91@build-let a2bbf@build-sequence a2bc1@build-void a2bc3@build-letrec a2bc5@build-letrec* a2bc7@build-library-letrec* a2bc9@build-receive) (begin (set! a2b1c@build-global-define (lambda (a2bca@x) (a2bc1@build-void))) (set! a2b8d@build-lambda (lambda (a2bcc@ae a2bcd@vars a2bce@exp) (list 'lambda a2bcd@vars a2bce@exp))) (set! a2b8f@build-case-lambda (lambda (a2bd2@ae a2bd3@vars* a2bd4@exp*) ((lambda (a2bd9@build-error a2bdb@build-pred a2bdd@build-apply a2bdf@expand-case-lambda) (begin (set! a2bd9@build-error (lambda (a2c10@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! a2bdb@build-pred (lambda (a2bf8@ae a2bf9@n a2bfa@vars) (call-with-values (lambda () ((letrec ((a2c02@f (lambda (a2c04@vars a2c05@count) (if (pair? a2c04@vars) (a2c02@f (cdr a2c04@vars) (+ a2c05@count '1)) (if (null? a2c04@vars) (values a2c05@count '=) (values a2c05@count '>=)))))) a2c02@f) a2bfa@vars '0)) (lambda (a2c08@a2bff a2c09@a2c01) ((lambda (a2c0c@pred a2c0d@count) (list (list 'primitive a2c0c@pred) a2bf9@n (list 'quote a2c0d@count))) a2c09@a2c01 a2c08@a2bff))))) (set! a2bdd@build-apply (lambda (a2bf0@ae a2bf1@g a2bf2@vars a2bf3@exp) (list '(primitive apply) (a2b8d@build-lambda a2bf0@ae a2bf2@vars a2bf3@exp) a2bf1@g))) (set! a2bdf@expand-case-lambda (lambda (a2be0@ae a2be1@vars a2be2@exp*) ((lambda (a2be6@g a2be7@n) (list 'lambda a2be6@g (a2b91@build-let a2be0@ae (list a2be7@n) (list (list '(primitive length) a2be6@g)) ((letrec ((a2bea@f (lambda (a2bec@vars* a2bed@exp*) (if (null? a2bec@vars*) (a2bd9@build-error a2be0@ae) (list 'if (a2bdb@build-pred a2be0@ae a2be7@n (car a2bec@vars*)) (a2bdd@build-apply a2be0@ae a2be6@g (car a2bec@vars*) (car a2bed@exp*)) (a2bea@f (cdr a2bec@vars*) (cdr a2bed@exp*))))))) a2bea@f) a2bd3@vars* a2be2@exp*)))) (gensym) (gensym)))) (if (= (length a2bd4@exp*) '1) (a2b8d@build-lambda a2bd2@ae (car a2bd3@vars*) (car a2bd4@exp*)) (a2bdf@expand-case-lambda a2bd2@ae a2bd3@vars* a2bd4@exp*)))) '#f '#f '#f '#f))) (set! a2b91@build-let (lambda (a2c12@ae a2c13@lhs* a2c14@rhs* a2c15@body) (cons (a2b8d@build-lambda a2c12@ae a2c13@lhs* a2c15@body) a2c14@rhs*))) (set! a2bbf@build-sequence (lambda (a2c1a@ae a2c1b@exps) ((letrec ((a2c1e@loop (lambda (a2c20@exps) (if (null? (cdr a2c20@exps)) (car a2c20@exps) (if (equal? (car a2c20@exps) (a2bc1@build-void)) (a2c1e@loop (cdr a2c20@exps)) (cons 'begin a2c20@exps)))))) a2c1e@loop) a2c1b@exps))) (set! a2bc1@build-void (lambda () '((primitive void)))) (set! a2bc3@build-letrec (lambda (a2c22@ae a2c23@vars a2c24@val-exps a2c25@body-exp) (if (null? a2c23@vars) a2c25@body-exp (list 'letrec (map list a2c23@vars a2c24@val-exps) a2c25@body-exp)))) (set! a2bc5@build-letrec* (lambda (a2c2a@ae a2c2b@vars a2c2c@val-exps a2c2d@body-exp) (if (null? a2c2b@vars) a2c2d@body-exp (a2b91@build-let a2c2a@ae a2c2b@vars (map (lambda (a2c32@x) (list 'quote '#f)) a2c2b@vars) (a2bbf@build-sequence a2c2a@ae (append (map (lambda (a2c34@lhs a2c35@rhs) (list 'set! a2c34@lhs a2c35@rhs)) a2c2b@vars a2c2c@val-exps) (list a2c2d@body-exp))))))) (set! a2bc7@build-library-letrec* (lambda (a2c38@ae a2c39@name a2c3a@vars a2c3b@locs a2c3c@val-exps a2c3d@body-exp) (list 'library-letrec* a2c39@name (map list a2c3a@vars a2c3b@locs a2c3c@val-exps) a2c3d@body-exp))) (set! a2bc9@build-receive (lambda (a2c44@ae a2c45@vars a2c46@producer a2c47@body*) (begin (display '"************** in ") (cons 'receive (cons a2c45@vars (cons a2c46@producer a2c47@body*)))))) (begin (set! a2c55@a2bc9@build-receive a2bc9@build-receive) (set! a2c54@a2bc7@build-library-letrec* a2bc7@build-library-letrec*) (set! a2c53@a2bc5@build-letrec* a2bc5@build-letrec*) (set! a2c52@a2bc3@build-letrec a2bc3@build-letrec) (set! a2c51@a2bc1@build-void a2bc1@build-void) (set! a2c50@a2bbf@build-sequence a2bbf@build-sequence) (set! a2c4f@a2b91@build-let a2b91@build-let) (set! a2c4e@a2b8f@build-case-lambda a2b8f@build-case-lambda) (set! a2c4d@a2b8d@build-lambda a2b8d@build-lambda) (set! a2c4c@a2b1c@build-global-define a2b1c@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a2c64@file-options-macro a2c66@set-cons a2c68@set-union a2c6d@top-mark* a2c6f@top-marked? a2c71@gen-lexical a2c73@gen-global a2c75@gen-label a2c77@gen-top-level-label a2c79@gen-define-label+loc a2c7b@gen-define-label a2c81@a2c7c a2c83@a2c7e a2c85@a2c7d a2c88@rib? a2c8a@make-rib a2c8c@rib-sym* a2c8e@rib-mark** a2c90@rib-label* a2c92@rib-sealed/freq a2c94@rib-cache a2c96@set-rib-sym*! a2c98@set-rib-mark**! a2c9a@set-rib-label*! a2c9c@set-rib-sealed/freq! a2c9e@set-rib-cache! a2ca0@make-empty-rib a2ca2@extend-rib! a2ca4@extend-rib/nc! a2ca6@make-rib-map a2ca8@seal-rib! a2caa@unseal-rib! a2cac@make-full-rib a2cb2@a2cad a2cb4@a2caf a2cb6@a2cae a2cb9@stx? a2cbb@make-stx a2cbd@stx-expr a2cbf@stx-mark* a2cc1@stx-subst* a2cc3@stx-ae* a2cc5@set-stx-expr! a2cc7@set-stx-mark*! a2cc9@set-stx-subst*! a2ccb@set-stx-ae*! a2ccd@rp a2ccf@datum->stx a2cd1@gen-mark a2cd3@anti-mark a2cd5@anti-mark? a2cd7@join-wraps a2cd9@mkstx a2cdb@add-mark a2cdd@add-subst a2cdf@syntax-kind? a2ce1@syntax-vector->list a2ce3@syntax-pair? a2ce5@syntax-vector? a2ce7@syntax-null? a2ce9@syntax-list? a2ceb@syntax-car a2ced@syntax-cdr a2cef@syntax->list a2cf1@id? a2cf3@id->sym a2cf5@same-marks? a2cf7@bound-id=? a2cf9@free-id=? a2cfb@valid-bound-ids? a2cfd@distinct-bound-ids? a2cff@bound-id-member? a2d01@self-evaluating? a2d03@strip-annotations a2d05@strip a2d07@stx->datum a2d09@same-marks*? a2d0b@id->label a2d0d@id->real-label a2d0f@label->binding a2d11@make-binding a2d13@binding-type a2d15@binding-value a2d17@raise-unbound-error a2d19@syntax-type a2d27@sanitize-binding a2d29@make-variable-transformer a2d2b@variable-transformer? a2d2d@variable-transformer-procedure a2d2f@make-eval-transformer a2e80@parse-define a2e82@parse-define-syntax a2e84@scheme-stx-hashtable a2e86@scheme-stx a2e88@lexical-var a2e8a@lexical-mutable? a2e8c@set-lexical-mutable! a2e8e@add-lexical a2e90@add-lexicals a2e92@letrec-helper a2e94@letrec-transformer a2e96@letrec*-transformer a2e98@fluid-let-syntax-transformer a2e9a@type-descriptor-transformer a2e9c@record-type-descriptor-transformer a2e9e@record-constructor-descriptor-transformer a2ea0@when-macro a2ea2@unless-macro a2ea4@if-transformer a2ea6@and-transformer a2ea8@or-transformer a2eaa@case-macro a2eac@quote-transformer a2eae@case-lambda-transformer a2eb0@lambda-transformer a2eb2@bless a2eb4@with-syntax-macro a2eb6@invalid-fmls-error a2eb8@let-macro a2eba@let-values-macro a2ebc@let*-values-macro a2ebe@trace-lambda-macro a2ec0@trace-define-macro a2ec2@trace-define-syntax-macro a2ec4@trace-let/rec-syntax a2ec6@trace-let-syntax-macro a2ec8@trace-letrec-syntax-macro a2eca@guard-macro a2ecc@define-enumeration-macro a2ece@time-macro a2ed0@delay-macro a2ed2@assert-macro a2ed4@endianness-macro a2ed6@identifier-syntax-macro a2ed8@do-macro a2eda@let*-macro a2edc@or-macro a2ede@and-macro a2ee0@cond-macro a2ee2@do-include a2ee4@include-macro a2ee6@include-into-macro a2ee8@syntax-rules-macro a2eea@quasiquote-macro a2eec@quasisyntax-macro a2eee@define-struct-macro a2ef0@define-record-type-macro a2ef2@define-condition-type-macro a2ef4@incorrect-usage-macro a2ef6@parameterize-macro a2ef8@foreign-call-transformer a2efa@convert-pattern a2efc@syntax-dispatch a2efe@ellipsis? a2f00@underscore? a2f02@verify-literals a2f04@syntax-case-transformer a2f06@ellipsis-map a2f08@syntax-transformer a2f0a@core-macro-transformer a2f0c@symbol-macro a2f0e@macro-transformer a2f10@local-macro-transformer a2f12@do-macro-call a2f14@chi-macro a2f16@chi-local-macro a2f18@chi-global-macro a2f1a@chi-expr* a2f1c@chi-application a2f1e@chi-expr a2f20@chi-set! a2f22@verify-formals a2f24@chi-lambda-clause a2f26@chi-lambda-clause* a2f28@chi-defun a2f2a@chi-rhs a2f2c@expand-interaction-rhs*/init* a2f2e@chi-rhs* a2f30@find-bound=? a2f32@find-dups a2f34@chi-internal a2f36@parse-module a2f3c@a2f37 a2f3e@a2f39 a2f40@a2f38 a2f43@module-interface? a2f45@make-module-interface a2f47@module-interface-first-mark a2f49@module-interface-exp-id-vec a2f4b@module-interface-exp-lab-vec a2f4d@set-module-interface-first-mark! a2f4f@set-module-interface-exp-id-vec! a2f51@set-module-interface-exp-lab-vec! a2f53@module-interface-exp-id* a2f55@chi-internal-module a2f57@chi-body* a2f59@expand-transformer a2f5b@parse-exports a2f5d@parse-library-name a2f5f@parse-library a2f61@parse-import-spec* a2f63@make-top-rib a2f65@make-collector a2f67@inv-collector a2f69@vis-collector a2f6b@imp-collector a2f6d@chi-library-internal a2f6f@chi-interaction-expr a2f71@library-body-expander a2f73@core-library-expander a2f75@parse-top-level-program a2f77@top-level-expander a2f7d@a2f78 a2f7f@a2f7a a2f81@a2f79 a2f84@env? a2f86@make-env a2f88@env-names a2f8a@env-labels a2f8c@env-itc a2f8e@set-env-names! a2f90@set-env-labels! a2f92@set-env-itc! a2f94@rp a2f9a@a2f95 a2f9c@a2f97 a2f9e@a2f96 a2fa1@interaction-env? a2fa3@make-interaction-env a2fa5@interaction-env-rib a2fa7@interaction-env-r a2fa9@interaction-env-locs a2fab@set-interaction-env-rib! a2fad@set-interaction-env-r! a2faf@set-interaction-env-locs! a2fb1@rp a2fb3@interaction-environment-symbols a2fb5@environment-bindings a2fb7@parse-binding a2fb9@environment? a2fbb@environment-symbols a2fbd@environment a2fbf@null-environment a2fc1@scheme-report-environment a2fc3@expand a2fc5@eval a2fc7@library-expander a2fc9@boot-library-expand a2fcb@rev-map-append a2fcd@build-exports a2fcf@make-export-subst a2fd1@make-export-env/macros a2fd3@generate-temporaries a2fd5@free-identifier=? a2fd7@bound-identifier=? a2fd9@make-source-condition a2fdb@extract-position-condition a2fdd@expression-position a2fdf@assertion-error a2fe1@syntax-error a2fe3@syntax-violation* a2fe5@syntax-violation a2fe7@identifier? a2fe9@datum->syntax a2feb@syntax->datum a2fed@compile-r6rs-top-level a2fef@pre-compile-r6rs-top-level a2ff1@interaction-environment a2ff3@top-level-context) (begin (set! a2c64@file-options-macro (lambda (a2ff4@x) ((lambda (a2ff7@valid-option?) (begin (set! a2ff7@valid-option? (lambda (a3000@x) (and (a2cf1@id? a3000@x) (memq (a2cf3@id->sym a3000@x) '(no-fail no-create no-truncate))))) ((lambda (a2ff8@t) ((lambda (a2ffa@ls/false) (if (and a2ffa@ls/false (apply (lambda (a2ffc@opt*) (for-all a2ff7@valid-option? a2ffc@opt*)) a2ffa@ls/false)) (apply (lambda (a2ffe@opt*) (a2eb2@bless (list 'make-file-options (list 'quote a2ffe@opt*)))) a2ffa@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a2ff8@t))) (a2efc@syntax-dispatch a2ff8@t '(_ . each-any)))) a2ff4@x))) '#f))) (set! a2c66@set-cons (lambda (a3002@x a3003@ls) (if (memq a3002@x a3003@ls) a3003@ls (cons a3002@x a3003@ls)))) (set! a2c68@set-union (lambda (a3006@ls1 a3007@ls2) (if (null? a3006@ls1) a3007@ls2 (if (memq (car a3006@ls1) a3007@ls2) (a2c68@set-union (cdr a3006@ls1) a3007@ls2) (cons (car a3006@ls1) (a2c68@set-union (cdr a3006@ls1) a3007@ls2)))))) (set! a2c6d@top-mark* '(top)) (set! a2c6f@top-marked? (lambda (a300a@m*) (memq 'top a300a@m*))) (set! a2c71@gen-lexical (lambda (a300c@sym) (if (symbol? a300c@sym) (gensym a300c@sym) (if (a2cb9@stx? a300c@sym) (a2c71@gen-lexical (a2cf3@id->sym a300c@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" a300c@sym))))) (set! a2c73@gen-global (lambda (a300e@x) (a2c71@gen-lexical a300e@x))) (set! a2c75@gen-label (lambda (a3010@_) (gensym))) (set! a2c77@gen-top-level-label (lambda (a3012@id a3013@rib) ((lambda (a3017@find) (begin (set! a3017@find (lambda (a3022@sym a3023@mark* a3024@sym* a3025@mark** a3026@label*) (and (pair? a3024@sym*) (if (and (eq? a3022@sym (car a3024@sym*)) (a2cf5@same-marks? a3023@mark* (car a3025@mark**))) (car a3026@label*) (a3017@find a3022@sym a3023@mark* (cdr a3024@sym*) (cdr a3025@mark**) (cdr a3026@label*)))))) ((lambda (a3018@sym a3019@mark*) ((lambda (a301c@sym*) ((lambda (a301e@t) (if a301e@t ((lambda (a3020@label) (if (a2b14@a29b4@imported-label->binding a3020@label) (gensym) a3020@label)) a301e@t) (gensym))) (and (memq a3018@sym (a2c8c@rib-sym* a3013@rib)) (a3017@find a3018@sym a3019@mark* a301c@sym* (a2c8e@rib-mark** a3013@rib) (a2c90@rib-label* a3013@rib))))) (a2c8c@rib-sym* a3013@rib))) (a2cf3@id->sym a3012@id) (a2cbf@stx-mark* a3012@id)))) '#f))) (set! a2c79@gen-define-label+loc (lambda (a302c@id a302d@rib) ((lambda (a3030@t) (if a3030@t ((lambda (a3032@env) ((lambda (a3034@label a3035@locs) (values a3034@label ((lambda (a3038@t) (if a3038@t (cdr a3038@t) ((lambda (a303a@loc) (begin (a2faf@set-interaction-env-locs! a3032@env (cons (cons a3034@label a303a@loc) a3035@locs)) a303a@loc)) (a2c71@gen-lexical a302c@id)))) (assq a3034@label a3035@locs)))) (a2c77@gen-top-level-label a302c@id a302d@rib) (a2fa9@interaction-env-locs a3032@env))) a3030@t) (values (gensym) (a2c71@gen-lexical a302c@id)))) (a2ff3@top-level-context)))) (set! a2c7b@gen-define-label (lambda (a303c@id a303d@rib) (if (a2ff3@top-level-context) (a2c77@gen-top-level-label a303c@id a303d@rib) (gensym)))) (set! a2c81@a2c7c (make-record-type-descriptor 'rib '#f 'a2c7f '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! a2c83@a2c7e '#f) (set! a2c85@a2c7d (make-record-constructor-descriptor a2c81@a2c7c '#f a2c83@a2c7e)) (set! a2c88@rib? (record-predicate a2c81@a2c7c)) (set! a2c8a@make-rib (record-constructor a2c85@a2c7d)) (set! a2c8c@rib-sym* (record-accessor a2c81@a2c7c '0)) (set! a2c8e@rib-mark** (record-accessor a2c81@a2c7c '1)) (set! a2c90@rib-label* (record-accessor a2c81@a2c7c '2)) (set! a2c92@rib-sealed/freq (record-accessor a2c81@a2c7c '3)) (set! a2c94@rib-cache (record-accessor a2c81@a2c7c '4)) (set! a2c96@set-rib-sym*! (record-mutator a2c81@a2c7c '0)) (set! a2c98@set-rib-mark**! (record-mutator a2c81@a2c7c '1)) (set! a2c9a@set-rib-label*! (record-mutator a2c81@a2c7c '2)) (set! a2c9c@set-rib-sealed/freq! (record-mutator a2c81@a2c7c '3)) (set! a2c9e@set-rib-cache! (record-mutator a2c81@a2c7c '4)) (set! a2ca0@make-empty-rib (lambda () (a2c8a@make-rib '() '() '() '#f '#f))) (set! a2ca2@extend-rib! (lambda (a3040@rib a3041@id a3042@label) ((lambda (a3047@find) (begin (set! a3047@find (lambda (a3054@sym a3055@mark* a3056@sym* a3057@mark** a3058@label*) (and (pair? a3056@sym*) (if (and (eq? a3054@sym (car a3056@sym*)) (a2cf5@same-marks? a3055@mark* (car a3057@mark**))) a3058@label* (a3047@find a3054@sym a3055@mark* (cdr a3056@sym*) (cdr a3057@mark**) (cdr a3058@label*)))))) (begin (if (a2c92@rib-sealed/freq a3040@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" a3040@rib) (void)) ((lambda (a3048@sym a3049@mark*) ((lambda (a304c@sym*) ((lambda (a304e@t) (if a304e@t ((lambda (a3050@p) (if (not (eq? a3042@label (car a3050@p))) (if (a2ff3@top-level-context) (set-car! a3050@p a3042@label) (a2fe5@syntax-violation '#f '"multiple definitions of identifier" a3041@id)) (void))) a304e@t) (begin (if (a2c94@rib-cache a3040@rib) (hashtable-update! (a2c94@rib-cache a3040@rib) a3048@sym (lambda (a3052@e) (cons (cons a3049@mark* a3042@label) a3052@e)) '()) (void)) (a2c96@set-rib-sym*! a3040@rib (cons a3048@sym a304c@sym*)) (a2c98@set-rib-mark**! a3040@rib (cons a3049@mark* (a2c8e@rib-mark** a3040@rib))) (a2c9a@set-rib-label*! a3040@rib (cons a3042@label (a2c90@rib-label* a3040@rib)))))) (and (memq a3048@sym (a2c8c@rib-sym* a3040@rib)) (a3047@find a3048@sym a3049@mark* a304c@sym* (a2c8e@rib-mark** a3040@rib) (a2c90@rib-label* a3040@rib))))) (a2c8c@rib-sym* a3040@rib))) (a2cf3@id->sym a3041@id) (a2cbf@stx-mark* a3041@id))))) '#f))) (set! a2ca4@extend-rib/nc! (lambda (a305e@rib a305f@id a3060@label) ((lambda (a3064@sym a3065@mark*) ((lambda (a3068@sym*) (begin (if (a2c94@rib-cache a305e@rib) (hashtable-update! (a2c94@rib-cache a305e@rib) a3064@sym (lambda (a306a@e) (cons (cons a3065@mark* a3060@label) a306a@e)) '()) (void)) (a2c96@set-rib-sym*! a305e@rib (cons a3064@sym a3068@sym*)) (a2c98@set-rib-mark**! a305e@rib (cons a3065@mark* (a2c8e@rib-mark** a305e@rib))) (a2c9a@set-rib-label*! a305e@rib (cons a3060@label (a2c90@rib-label* a305e@rib))))) (a2c8c@rib-sym* a305e@rib))) (a2cf3@id->sym a305f@id) (a2cbf@stx-mark* a305f@id)))) (set! a2ca6@make-rib-map (lambda (a306c@sym*) ((lambda (a306e@ht) ((letrec ((a3070@f (lambda (a3072@i a3073@sym*) (if (null? a3073@sym*) a306e@ht (begin (hashtable-update! a306e@ht (car a3073@sym*) (lambda (a3076@x) (cons a3072@i a3076@x)) '()) (a3070@f (+ a3072@i '1) (cdr a3073@sym*))))))) a3070@f) '0 a306c@sym*)) (make-eq-hashtable)))) (set! a2ca8@seal-rib! (lambda (a3078@rib) ((lambda (a307a@sym*) (if (not (null? a307a@sym*)) (begin (a2c96@set-rib-sym*! a3078@rib (list->vector a307a@sym*)) (a2c98@set-rib-mark**! a3078@rib (list->vector (a2c8e@rib-mark** a3078@rib))) (a2c9a@set-rib-label*! a3078@rib (list->vector (a2c90@rib-label* a3078@rib))) (a2c9c@set-rib-sealed/freq! a3078@rib (a2ca6@make-rib-map a307a@sym*))) (void))) (a2c8c@rib-sym* a3078@rib)))) (set! a2caa@unseal-rib! (lambda (a307c@rib) (if (a2c92@rib-sealed/freq a307c@rib) (begin (a2c9c@set-rib-sealed/freq! a307c@rib '#f) (a2c96@set-rib-sym*! a307c@rib (vector->list (a2c8c@rib-sym* a307c@rib))) (a2c98@set-rib-mark**! a307c@rib (vector->list (a2c8e@rib-mark** a307c@rib))) (a2c9a@set-rib-label*! a307c@rib (vector->list (a2c90@rib-label* a307c@rib)))) (void)))) (set! a2cac@make-full-rib (lambda (a307e@id* a307f@label*) ((lambda (a3082@r) (begin (a2ca8@seal-rib! a3082@r) a3082@r)) (a2c8a@make-rib (map a2cf3@id->sym a307e@id*) (map a2cbf@stx-mark* a307e@id*) a307f@label* '#f '#f)))) (set! a2cb2@a2cad (make-record-type-descriptor 'stx '#f 'a2cb0 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! a2cb4@a2caf '#f) (set! a2cb6@a2cae (make-record-constructor-descriptor a2cb2@a2cad '#f a2cb4@a2caf)) (set! a2cb9@stx? (record-predicate a2cb2@a2cad)) (set! a2cbb@make-stx (record-constructor a2cb6@a2cae)) (set! a2cbd@stx-expr (record-accessor a2cb2@a2cad '0)) (set! a2cbf@stx-mark* (record-accessor a2cb2@a2cad '1)) (set! a2cc1@stx-subst* (record-accessor a2cb2@a2cad '2)) (set! a2cc3@stx-ae* (record-accessor a2cb2@a2cad '3)) (set! a2cc5@set-stx-expr! (record-mutator a2cb2@a2cad '0)) (set! a2cc7@set-stx-mark*! (record-mutator a2cb2@a2cad '1)) (set! a2cc9@set-stx-subst*! (record-mutator a2cb2@a2cad '2)) (set! a2ccb@set-stx-ae*! (record-mutator a2cb2@a2cad '3)) (set! a2ccd@rp (a2898@a27bf@make-record-printer 'stx (lambda (a3084@x a3085@p a3086@wr) (begin (display '"#<syntax " a3085@p) (write (a2d07@stx->datum a3084@x) a3085@p) ((lambda (a308a@expr) (if (a2890@a27af@annotation? a308a@expr) ((lambda (a308c@src) (if (pair? a308c@src) (begin (display '" [" a3085@p) (display (cdr a308c@src) a3085@p) (display '" of " a3085@p) (display (car a308c@src) a3085@p) (display '"]" a3085@p)) (void))) (a2891@a27b1@annotation-source a308a@expr)) (void))) (a2cbd@stx-expr a3084@x)) (display '">" a3085@p))))) (set! a2ccf@datum->stx (lambda (a308e@id a308f@datum) (a2cbb@make-stx a308f@datum (a2cbf@stx-mark* a308e@id) (a2cc1@stx-subst* a308e@id) (a2cc3@stx-ae* a308e@id)))) (set! a2cd1@gen-mark (lambda () (string '#\m))) (set! a2cd3@anti-mark '#f) (set! a2cd5@anti-mark? not) (set! a2cd7@join-wraps (lambda (a3092@m1* a3093@s1* a3094@ae1* a3095@e) ((lambda (a309b@cancel) (begin (set! a309b@cancel (lambda (a30a2@ls1 a30a3@ls2) ((letrec ((a30a6@f (lambda (a30a8@x a30a9@ls1) (if (null? a30a9@ls1) (cdr a30a3@ls2) (cons a30a8@x (a30a6@f (car a30a9@ls1) (cdr a30a9@ls1))))))) a30a6@f) (car a30a2@ls1) (cdr a30a2@ls1)))) ((lambda (a309c@m2* a309d@s2* a309e@ae2*) (if (and (not (null? a3092@m1*)) (not (null? a309c@m2*)) (a2cd5@anti-mark? (car a309c@m2*))) (values (a309b@cancel a3092@m1* a309c@m2*) (a309b@cancel a3093@s1* a309d@s2*) (a309b@cancel a3094@ae1* a309e@ae2*)) (values (append a3092@m1* a309c@m2*) (append a3093@s1* a309d@s2*) (append a3094@ae1* a309e@ae2*)))) (a2cbf@stx-mark* a3095@e) (a2cc1@stx-subst* a3095@e) (a2cc3@stx-ae* a3095@e)))) '#f))) (set! a2cd9@mkstx (lambda (a30ac@e a30ad@m* a30ae@s* a30af@ae*) (if (and (a2cb9@stx? a30ac@e) (not (a2c6f@top-marked? a30ad@m*))) (call-with-values (lambda () (a2cd7@join-wraps a30ad@m* a30ae@s* a30af@ae* a30ac@e)) (lambda (a30ba@a30b5 a30bb@a30b7 a30bc@a30b9) ((lambda (a30c0@ae* a30c1@s* a30c2@m*) (a2cbb@make-stx (a2cbd@stx-expr a30ac@e) a30c2@m* a30c1@s* a30c0@ae*)) a30bc@a30b9 a30bb@a30b7 a30ba@a30b5))) (a2cbb@make-stx a30ac@e a30ad@m* a30ae@s* a30af@ae*)))) (set! a2cdb@add-mark (lambda (a30c6@m a30c7@e a30c8@ae) (a2cd9@mkstx a30c7@e (list a30c6@m) '(shift) (list a30c8@ae)))) (set! a2cdd@add-subst (lambda (a30cc@subst a30cd@e) (a2cd9@mkstx a30cd@e '() (list a30cc@subst) '()))) (set! a2cdf@syntax-kind? (lambda (a30d0@x a30d1@p?) (if (a2cb9@stx? a30d0@x) (a2cdf@syntax-kind? (a2cbd@stx-expr a30d0@x) a30d1@p?) (if (a2890@a27af@annotation? a30d0@x) (a2cdf@syntax-kind? (a2892@a27b3@annotation-expression a30d0@x) a30d1@p?) (a30d1@p? a30d0@x))))) (set! a2ce1@syntax-vector->list (lambda (a30d4@x) (if (a2cb9@stx? a30d4@x) ((lambda (a30d6@ls a30d7@m* a30d8@s* a30d9@ae*) (map (lambda (a30de@x) (a2cd9@mkstx a30de@x a30d7@m* a30d8@s* a30d9@ae*)) a30d6@ls)) (a2ce1@syntax-vector->list (a2cbd@stx-expr a30d4@x)) (a2cbf@stx-mark* a30d4@x) (a2cc1@stx-subst* a30d4@x) (a2cc3@stx-ae* a30d4@x)) (if (a2890@a27af@annotation? a30d4@x) (a2ce1@syntax-vector->list (a2892@a27b3@annotation-expression a30d4@x)) (if (vector? a30d4@x) (vector->list a30d4@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" a30d4@x)))))) (set! a2ce3@syntax-pair? (lambda (a30e0@x) (a2cdf@syntax-kind? a30e0@x pair?))) (set! a2ce5@syntax-vector? (lambda (a30e2@x) (a2cdf@syntax-kind? a30e2@x vector?))) (set! a2ce7@syntax-null? (lambda (a30e4@x) (a2cdf@syntax-kind? a30e4@x null?))) (set! a2ce9@syntax-list? (lambda (a30e6@x) (or (a2ce7@syntax-null? a30e6@x) (and (a2ce3@syntax-pair? a30e6@x) (a2ce9@syntax-list? (a2ced@syntax-cdr a30e6@x)))))) (set! a2ceb@syntax-car (lambda (a30e8@x) (if (a2cb9@stx? a30e8@x) (a2cd9@mkstx (a2ceb@syntax-car (a2cbd@stx-expr a30e8@x)) (a2cbf@stx-mark* a30e8@x) (a2cc1@stx-subst* a30e8@x) (a2cc3@stx-ae* a30e8@x)) (if (a2890@a27af@annotation? a30e8@x) (a2ceb@syntax-car (a2892@a27b3@annotation-expression a30e8@x)) (if (pair? a30e8@x) (car a30e8@x) (assertion-violation 'syntax-car '"BUG: not a pair" a30e8@x)))))) (set! a2ced@syntax-cdr (lambda (a30ea@x) (if (a2cb9@stx? a30ea@x) (a2cd9@mkstx (a2ced@syntax-cdr (a2cbd@stx-expr a30ea@x)) (a2cbf@stx-mark* a30ea@x) (a2cc1@stx-subst* a30ea@x) (a2cc3@stx-ae* a30ea@x)) (if (a2890@a27af@annotation? a30ea@x) (a2ced@syntax-cdr (a2892@a27b3@annotation-expression a30ea@x)) (if (pair? a30ea@x) (cdr a30ea@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" a30ea@x)))))) (set! a2cef@syntax->list (lambda (a30ec@x) (if (a2ce3@syntax-pair? a30ec@x) (cons (a2ceb@syntax-car a30ec@x) (a2cef@syntax->list (a2ced@syntax-cdr a30ec@x))) (if (a2ce7@syntax-null? a30ec@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" a30ec@x))))) (set! a2cf1@id? (lambda (a30ee@x) (and (a2cb9@stx? a30ee@x) ((lambda (a30f0@expr) (symbol? (if (a2890@a27af@annotation? a30f0@expr) (a288f@a27ad@annotation-stripped a30f0@expr) a30f0@expr))) (a2cbd@stx-expr a30ee@x))))) (set! a2cf3@id->sym (lambda (a30f2@x) (begin (if (not (a2cb9@stx? a30f2@x)) (error 'id->sym '"BUG in ikarus: not an id" a30f2@x) (void)) ((lambda (a30f4@expr) ((lambda (a30f6@sym) (if (symbol? a30f6@sym) a30f6@sym (error 'id->sym '"BUG in ikarus: not an id" a30f2@x))) (if (a2890@a27af@annotation? a30f4@expr) (a288f@a27ad@annotation-stripped a30f4@expr) a30f4@expr))) (a2cbd@stx-expr a30f2@x))))) (set! a2cf5@same-marks? (lambda (a30f8@x a30f9@y) (or (and (null? a30f8@x) (null? a30f9@y)) (and (pair? a30f8@x) (pair? a30f9@y) (eq? (car a30f8@x) (car a30f9@y)) (a2cf5@same-marks? (cdr a30f8@x) (cdr a30f9@y)))))) (set! a2cf7@bound-id=? (lambda (a30fc@x a30fd@y) (and (eq? (a2cf3@id->sym a30fc@x) (a2cf3@id->sym a30fd@y)) (a2cf5@same-marks? (a2cbf@stx-mark* a30fc@x) (a2cbf@stx-mark* a30fd@y))))) (set! a2cf9@free-id=? (lambda (a3100@i a3101@j) ((lambda (a3104@t0 a3105@t1) (if (or a3104@t0 a3105@t1) (eq? a3104@t0 a3105@t1) (eq? (a2cf3@id->sym a3100@i) (a2cf3@id->sym a3101@j)))) (a2d0d@id->real-label a3100@i) (a2d0d@id->real-label a3101@j)))) (set! a2cfb@valid-bound-ids? (lambda (a3108@id*) (and (for-all a2cf1@id? a3108@id*) (a2cfd@distinct-bound-ids? a3108@id*)))) (set! a2cfd@distinct-bound-ids? (lambda (a310a@id*) (or (null? a310a@id*) (and (not (a2cff@bound-id-member? (car a310a@id*) (cdr a310a@id*))) (a2cfd@distinct-bound-ids? (cdr a310a@id*)))))) (set! a2cff@bound-id-member? (lambda (a310c@id a310d@id*) (and (pair? a310d@id*) (or (a2cf7@bound-id=? a310c@id (car a310d@id*)) (a2cff@bound-id-member? a310c@id (cdr a310d@id*)))))) (set! a2d01@self-evaluating? (lambda (a3110@x) (or (number? a3110@x) (string? a3110@x) (char? a3110@x) (boolean? a3110@x) (regexp? a3110@x) (bytevector? a3110@x)))) (set! a2d03@strip-annotations (lambda (a3112@x) (if (pair? a3112@x) (cons (a2d03@strip-annotations (car a3112@x)) (a2d03@strip-annotations (cdr a3112@x))) (if (vector? a3112@x) (vector-map a2d03@strip-annotations a3112@x) (if (a2890@a27af@annotation? a3112@x) (a288f@a27ad@annotation-stripped a3112@x) a3112@x))))) (set! a2d05@strip (lambda (a3114@x a3115@m*) (if (a2c6f@top-marked? a3115@m*) (if (or (a2890@a27af@annotation? a3114@x) (and (pair? a3114@x) (a2890@a27af@annotation? (car a3114@x))) (and (vector? a3114@x) (> (vector-length a3114@x) '0) (a2890@a27af@annotation? (vector-ref a3114@x '0)))) (a2d03@strip-annotations a3114@x) a3114@x) ((letrec ((a3118@f (lambda (a311a@x) (if (a2cb9@stx? a311a@x) (a2d05@strip (a2cbd@stx-expr a311a@x) (a2cbf@stx-mark* a311a@x)) (if (a2890@a27af@annotation? a311a@x) (a288f@a27ad@annotation-stripped a311a@x) (if (pair? a311a@x) ((lambda (a311c@a a311d@d) (if (and (eq? a311c@a (car a311a@x)) (eq? a311d@d (cdr a311a@x))) a311a@x (cons a311c@a a311d@d))) (a3118@f (car a311a@x)) (a3118@f (cdr a311a@x))) (if (vector? a311a@x) ((lambda (a3120@old) ((lambda (a3122@new) (if (for-all eq? a3120@old a3122@new) a311a@x (list->vector a3122@new))) (map a3118@f a3120@old))) (vector->list a311a@x)) a311a@x))))))) a3118@f) a3114@x)))) (set! a2d07@stx->datum (lambda (a3124@x) (a2d05@strip a3124@x '()))) (set! a2d09@same-marks*? (lambda (a3126@mark* a3127@mark** a3128@si) (if (null? a3128@si) '#f (if (a2cf5@same-marks? a3126@mark* (vector-ref a3127@mark** (car a3128@si))) (car a3128@si) (a2d09@same-marks*? a3126@mark* a3127@mark** (cdr a3128@si)))))) (set! a2d0b@id->label (lambda (a312c@id) (or (a2d0d@id->real-label a312c@id) ((lambda (a312e@t) (if a312e@t ((lambda (a3130@env) ((lambda (a3132@rib) (call-with-values (lambda () (a2c79@gen-define-label+loc a312c@id a3132@rib)) (lambda (a3138@a3135 a3139@a3137) ((lambda (a313c@loc_ a313d@lab) (begin (a2ca2@extend-rib! a3132@rib a312c@id a313d@lab) a313d@lab)) a3139@a3137 a3138@a3135)))) (a2fa5@interaction-env-rib a3130@env))) a312e@t) '#f)) (a2ff3@top-level-context))))) (set! a2d0d@id->real-label (lambda (a3140@id) ((lambda (a3142@sym) ((letrec ((a3144@search (lambda (a3146@subst* a3147@mark*) (if (null? a3146@subst*) '#f (if (eq? (car a3146@subst*) 'shift) (a3144@search (cdr a3146@subst*) (cdr a3147@mark*)) ((lambda (a314a@rib) ((lambda (a314c@t) (if a314c@t ((lambda (a314e@ht) ((lambda (a3150@si) ((lambda (a3152@i) (if a3152@i (vector-ref (a2c90@rib-label* a314a@rib) a3152@i) (a3144@search (cdr a3146@subst*) a3147@mark*))) (and a3150@si (a2d09@same-marks*? a3147@mark* (a2c8e@rib-mark** a314a@rib) (reverse a3150@si))))) (hashtable-ref a314e@ht a3142@sym '#f))) a314c@t) ((letrec ((a3154@f (lambda (a3156@sym* a3157@mark** a3158@label*) (if (null? a3156@sym*) (a3144@search (cdr a3146@subst*) a3147@mark*) (if (and (eq? (car a3156@sym*) a3142@sym) (a2cf5@same-marks? (car a3157@mark**) a3147@mark*)) (car a3158@label*) (a3154@f (cdr a3156@sym*) (cdr a3157@mark**) (cdr a3158@label*))))))) a3154@f) (a2c8c@rib-sym* a314a@rib) (a2c8e@rib-mark** a314a@rib) (a2c90@rib-label* a314a@rib)))) (a2c92@rib-sealed/freq a314a@rib))) (car a3146@subst*))))))) a3144@search) (a2cc1@stx-subst* a3140@id) (a2cbf@stx-mark* a3140@id))) (a2cf3@id->sym a3140@id)))) (set! a2d0f@label->binding (lambda (a315c@x a315d@r) ((lambda (a3160@t) (if a3160@t ((lambda (a3162@b) (if (and (pair? a3162@b) (eq? (car a3162@b) '$core-rtd)) (cons '$rtd (map a2eb2@bless (cdr a3162@b))) (if (and (pair? a3162@b) (eq? (car a3162@b) 'global-rtd)) ((lambda (a3164@lib a3165@loc) (cons '$rtd (symbol-value a3165@loc))) (cadr a3162@b) (cddr a3162@b)) a3162@b))) a3160@t) ((lambda (a3168@t) (if a3168@t (cdr a3168@t) ((lambda (a316a@t) (if a316a@t ((lambda (a316c@env) ((lambda (a316e@t) (if a316e@t ((lambda (a3170@p) (cons* 'lexical (cdr a3170@p) '#f)) a316e@t) '(displaced-lexical . #f))) (assq a315c@x (a2fa9@interaction-env-locs a316c@env)))) a316a@t) '(displaced-lexical . #f))) (a2ff3@top-level-context)))) (assq a315c@x a315d@r)))) (a2b14@a29b4@imported-label->binding a315c@x)))) (set! a2d11@make-binding cons) (set! a2d13@binding-type car) (set! a2d15@binding-value cdr) (set! a2d17@raise-unbound-error (lambda (a3172@id) (a2fe3@syntax-violation* '#f '"unbound identifier" a3172@id (a4d22@a4b68@make-undefined-violation)))) (set! a2d19@syntax-type (lambda (a3174@e a3175@r) (if (a2cf1@id? a3174@e) ((lambda (a3178@id) ((lambda (a317a@label) ((lambda (a317c@b) ((lambda (a317e@type) ((lambda () (begin (if (not a317a@label) (a2d17@raise-unbound-error a3178@id) (void)) ((lambda (a3180@t) (if (memv a3180@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values a317e@type (a2d15@binding-value a317c@b) a3178@id) (values 'other '#f '#f))) a317e@type))))) (a2d13@binding-type a317c@b))) (a2d0f@label->binding a317a@label a3175@r))) (a2d0b@id->label a3178@id))) a3174@e) (if (a2ce3@syntax-pair? a3174@e) ((lambda (a3182@id) (if (a2cf1@id? a3182@id) ((lambda (a3184@label) ((lambda (a3186@b) ((lambda (a3188@type) ((lambda () (begin (if (not a3184@label) (a2d17@raise-unbound-error a3182@id) (void)) ((lambda (a318a@t) (if (memv a318a@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values a3188@type (a2d15@binding-value a3186@b) a3182@id) (values 'call '#f '#f))) a3188@type))))) (a2d13@binding-type a3186@b))) (a2d0f@label->binding a3184@label a3175@r))) (a2d0b@id->label a3182@id)) (values 'call '#f '#f))) (a2ceb@syntax-car a3174@e)) ((lambda (a318c@d) (if (a2d01@self-evaluating? a318c@d) (values 'constant a318c@d '#f) (values 'other '#f '#f))) (a2d07@stx->datum a3174@e)))))) (set! a2d27@sanitize-binding (lambda (a318e@x a318f@src) (if (procedure? a318e@x) (cons* 'local-macro a318e@x a318f@src) (if (and (pair? a318e@x) (eq? (car a318e@x) 'macro!) (procedure? (cdr a318e@x))) (cons* 'local-macro! (cdr a318e@x) a318f@src) (if (and (pair? a318e@x) (eq? (car a318e@x) '$rtd)) a318e@x (assertion-violation 'expand '"invalid transformer" a318e@x)))))) (set! a2d29@make-variable-transformer (lambda (a3192@x) (if (procedure? a3192@x) (cons 'macro! a3192@x) (assertion-violation 'make-variable-transformer '"not a procedure" a3192@x)))) (set! a2d2b@variable-transformer? (lambda (a3194@x) (and (pair? a3194@x) (eq? (car a3194@x) 'macro!) (procedure? (cdr a3194@x))))) (set! a2d2d@variable-transformer-procedure (lambda (a3196@x) (if (a2d2b@variable-transformer? a3196@x) (cdr a3196@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" a3196@x)))) (set! a2d2f@make-eval-transformer (lambda (a3198@x) (a2d27@sanitize-binding (eval-core (a28ef@a28a7@expanded->core a3198@x)) a3198@x))) (set! a2e80@parse-define (lambda (a319a@x) ((lambda (a319c@t) ((lambda (a319e@ls/false) (if (and a319e@ls/false (apply (lambda (a31a0@id a31a1@fmls a31a2@b a31a3@b*) (a2cf1@id? a31a0@id)) a319e@ls/false)) (apply (lambda (a31a8@id a31a9@fmls a31aa@b a31ab@b*) (begin (a2f22@verify-formals a31a9@fmls a319a@x) (values a31a8@id (cons 'defun (cons a31a9@fmls (cons a31aa@b a31ab@b*)))))) a319e@ls/false) ((lambda (a31b0@t) ((lambda (a31b2@ls/false) (if (and a31b2@ls/false (apply (lambda (a31b4@id a31b5@val) (a2cf1@id? a31b4@id)) a31b2@ls/false)) (apply (lambda (a31b8@id a31b9@val) (values a31b8@id (cons 'expr a31b9@val))) a31b2@ls/false) ((lambda (a31bc@t) ((lambda (a31be@ls/false) (if (and a31be@ls/false (apply (lambda (a31c0@id) (a2cf1@id? a31c0@id)) a31be@ls/false)) (apply (lambda (a31c2@id) (values a31c2@id (cons 'expr (a2eb2@bless '(void))))) a31be@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a31bc@t))) (a2efc@syntax-dispatch a31bc@t '(_ any)))) a31b0@t))) (a2efc@syntax-dispatch a31b0@t '(_ any any)))) a319c@t))) (a2efc@syntax-dispatch a319c@t '(_ (any . any) any . each-any)))) a319a@x))) (set! a2e82@parse-define-syntax (lambda (a31c4@x) ((lambda (a31c6@t) ((lambda (a31c8@ls/false) (if (and a31c8@ls/false (apply (lambda (a31ca@id a31cb@val) (a2cf1@id? a31ca@id)) a31c8@ls/false)) (apply (lambda (a31ce@id a31cf@val) (values a31ce@id a31cf@val)) a31c8@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a31c6@t))) (a2efc@syntax-dispatch a31c6@t '(_ any any)))) a31c4@x))) (set! a2e84@scheme-stx-hashtable (make-eq-hashtable)) (set! a2e86@scheme-stx (lambda (a31d2@sym) (or (hashtable-ref a2e84@scheme-stx-hashtable a31d2@sym '#f) ((lambda (a31d4@subst) ((lambda (a31d6@stx) ((lambda (a31d8@stx) ((lambda () (begin (hashtable-set! a2e84@scheme-stx-hashtable a31d2@sym a31d8@stx) a31d8@stx)))) ((lambda (a31da@t) (if a31da@t ((lambda (a31dc@x) ((lambda (a31de@name a31df@label) (a2cdd@add-subst (a2c8a@make-rib (list a31de@name) (list a2c6d@top-mark*) (list a31df@label) '#f '#f) a31d6@stx)) (car a31dc@x) (cdr a31dc@x))) a31da@t) a31d6@stx)) (assq a31d2@sym a31d4@subst)))) (a2cbb@make-stx a31d2@sym a2c6d@top-mark* '() '()))) (a2aea@a2960@library-subst (a2b0e@a29a8@find-library-by-name '(psyntax system $all))))))) (set! a2e88@lexical-var car) (set! a2e8a@lexical-mutable? cdr) (set! a2e8c@set-lexical-mutable! set-cdr!) (set! a2e8e@add-lexical (lambda (a31e2@lab a31e3@lex a31e4@r) (cons (cons* a31e2@lab 'lexical a31e3@lex '#f) a31e4@r))) (set! a2e90@add-lexicals (lambda (a31e8@lab* a31e9@lex* a31ea@r) (if (null? a31e8@lab*) a31ea@r (a2e90@add-lexicals (cdr a31e8@lab*) (cdr a31e9@lex*) (a2e8e@add-lexical (car a31e8@lab*) (car a31e9@lex*) a31ea@r))))) (set! a2e92@letrec-helper (lambda (a31ee@e a31ef@r a31f0@mr a31f1@build) ((lambda (a31f6@t) ((lambda (a31f8@ls/false) (if a31f8@ls/false (apply (lambda (a31fa@lhs* a31fb@rhs* a31fc@b a31fd@b*) (if (not (a2cfb@valid-bound-ids? a31fa@lhs*)) (a2eb6@invalid-fmls-error a31ee@e a31fa@lhs*) ((lambda (a3202@lex* a3203@lab*) ((lambda (a3206@rib a3207@r) ((lambda (a320a@body a320b@rhs*) (a31f1@build '#f a3202@lex* a320b@rhs* a320a@body)) (a2f34@chi-internal (a2cdd@add-subst a3206@rib (cons a31fc@b a31fd@b*)) a3207@r a31f0@mr) (a2f1a@chi-expr* (map (lambda (a320e@x) (a2cdd@add-subst a3206@rib a320e@x)) a31fb@rhs*) a3207@r a31f0@mr))) (a2cac@make-full-rib a31fa@lhs* a3203@lab*) (a2e90@add-lexicals a3203@lab* a3202@lex* a31ef@r))) (map a2c71@gen-lexical a31fa@lhs*) (map a2c75@gen-label a31fa@lhs*)))) a31f8@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a31f6@t))) (a2efc@syntax-dispatch a31f6@t '(_ #(each (any any)) any . each-any)))) a31ee@e))) (set! a2e94@letrec-transformer (lambda (a3210@e a3211@r a3212@mr) (a2e92@letrec-helper a3210@e a3211@r a3212@mr a2c52@a2bc3@build-letrec))) (set! a2e96@letrec*-transformer (lambda (a3216@e a3217@r a3218@mr) (a2e92@letrec-helper a3216@e a3217@r a3218@mr a2c53@a2bc5@build-letrec*))) (set! a2e98@fluid-let-syntax-transformer (lambda (a321c@e a321d@r a321e@mr) ((lambda (a3223@lookup) (begin (set! a3223@lookup (lambda (a3236@x) (or (a2d0b@id->label a3236@x) (a2fe5@syntax-violation '#f '"unbound identifier" a321c@e a3236@x)))) ((lambda (a3224@t) ((lambda (a3226@ls/false) (if a3226@ls/false (apply (lambda (a3228@lhs* a3229@rhs* a322a@b a322b@b*) (if (not (a2cfb@valid-bound-ids? a3228@lhs*)) (a2eb6@invalid-fmls-error a321c@e a3228@lhs*) ((lambda (a3230@lab* a3231@rhs*) (a2f34@chi-internal (cons a322a@b a322b@b*) (append (map cons a3230@lab* a3231@rhs*) a321d@r) (append (map cons a3230@lab* a3231@rhs*) a321e@mr))) (map a3223@lookup a3228@lhs*) (map (lambda (a3234@x) (a2d2f@make-eval-transformer (a2f59@expand-transformer a3234@x a321e@mr))) a3229@rhs*)))) a3226@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3224@t))) (a2efc@syntax-dispatch a3224@t '(_ #(each (any any)) any . each-any)))) a321c@e))) '#f))) (set! a2e9a@type-descriptor-transformer (lambda (a3238@e a3239@r a323a@mr) ((lambda (a323e@t) ((lambda (a3240@ls/false) (if (and a3240@ls/false (apply (lambda (a3242@id) (a2cf1@id? a3242@id)) a3240@ls/false)) (apply (lambda (a3244@id) ((lambda (a3246@lab) ((lambda (a3248@b) ((lambda (a324a@type) ((lambda () (begin (if (not a3246@lab) (a2d17@raise-unbound-error a3244@id) (void)) (if (not (and (eq? a324a@type '$rtd) (not (list? (a2d15@binding-value a3248@b))))) (a2fe5@syntax-violation '#f '"not a record type" a3238@e) (void)) (list 'quote (a2d15@binding-value a3248@b)))))) (a2d13@binding-type a3248@b))) (a2d0f@label->binding a3246@lab a3239@r))) (a2d0b@id->label a3244@id))) a3240@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a323e@t))) (a2efc@syntax-dispatch a323e@t '(_ any)))) a3238@e))) (set! a2e9c@record-type-descriptor-transformer (lambda (a324c@e a324d@r a324e@mr) ((lambda (a3252@t) ((lambda (a3254@ls/false) (if (and a3254@ls/false (apply (lambda (a3256@id) (a2cf1@id? a3256@id)) a3254@ls/false)) (apply (lambda (a3258@id) ((lambda (a325a@lab) ((lambda (a325c@b) ((lambda (a325e@type) ((lambda () (begin (if (not a325a@lab) (a2d17@raise-unbound-error a3258@id) (void)) (if (not (and (eq? a325e@type '$rtd) (list? (a2d15@binding-value a325c@b)))) (a2fe5@syntax-violation '#f '"not a record type" a324c@e) (void)) (a2f1e@chi-expr (car (a2d15@binding-value a325c@b)) a324d@r a324e@mr))))) (a2d13@binding-type a325c@b))) (a2d0f@label->binding a325a@lab a324d@r))) (a2d0b@id->label a3258@id))) a3254@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3252@t))) (a2efc@syntax-dispatch a3252@t '(_ any)))) a324c@e))) (set! a2e9e@record-constructor-descriptor-transformer (lambda (a3260@e a3261@r a3262@mr) ((lambda (a3266@t) ((lambda (a3268@ls/false) (if (and a3268@ls/false (apply (lambda (a326a@id) (a2cf1@id? a326a@id)) a3268@ls/false)) (apply (lambda (a326c@id) ((lambda (a326e@lab) ((lambda (a3270@b) ((lambda (a3272@type) ((lambda () (begin (if (not a326e@lab) (a2d17@raise-unbound-error a326c@id) (void)) (if (not (and (eq? a3272@type '$rtd) (list? (a2d15@binding-value a3270@b)))) (a2fe5@syntax-violation '#f '"invalid type" a3260@e) (void)) (a2f1e@chi-expr (cadr (a2d15@binding-value a3270@b)) a3261@r a3262@mr))))) (a2d13@binding-type a3270@b))) (a2d0f@label->binding a326e@lab a3261@r))) (a2d0b@id->label a326c@id))) a3268@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3266@t))) (a2efc@syntax-dispatch a3266@t '(_ any)))) a3260@e))) (set! a2ea0@when-macro (lambda (a3274@e) ((lambda (a3276@t) ((lambda (a3278@ls/false) (if a3278@ls/false (apply (lambda (a327a@test a327b@e a327c@e*) (a2eb2@bless (list 'if a327a@test (cons 'begin (cons a327b@e a327c@e*))))) a3278@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3276@t))) (a2efc@syntax-dispatch a3276@t '(_ any any . each-any)))) a3274@e))) (set! a2ea2@unless-macro (lambda (a3280@e) ((lambda (a3282@t) ((lambda (a3284@ls/false) (if a3284@ls/false (apply (lambda (a3286@test a3287@e a3288@e*) (a2eb2@bless (list 'if (list 'not a3286@test) (cons 'begin (cons a3287@e a3288@e*))))) a3284@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3282@t))) (a2efc@syntax-dispatch a3282@t '(_ any any . each-any)))) a3280@e))) (set! a2ea4@if-transformer (lambda (a328c@e a328d@r a328e@mr) ((lambda (a3292@t) ((lambda (a3294@ls/false) (if a3294@ls/false (apply (lambda (a3296@e0 a3297@e1 a3298@e2) (list 'if (a2f1e@chi-expr a3296@e0 a328d@r a328e@mr) (a2f1e@chi-expr a3297@e1 a328d@r a328e@mr) (a2f1e@chi-expr a3298@e2 a328d@r a328e@mr))) a3294@ls/false) ((lambda (a329c@t) ((lambda (a329e@ls/false) (if a329e@ls/false (apply (lambda (a32a0@e0 a32a1@e1) (list 'if (a2f1e@chi-expr a32a0@e0 a328d@r a328e@mr) (a2f1e@chi-expr a32a1@e1 a328d@r a328e@mr) (a2c51@a2bc1@build-void))) a329e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a329c@t))) (a2efc@syntax-dispatch a329c@t '(_ any any)))) a3292@t))) (a2efc@syntax-dispatch a3292@t '(_ any any any)))) a328c@e))) (set! a2ea6@and-transformer (lambda (a32a4@e a32a5@r a32a6@mr) ((lambda (a32aa@t) ((lambda (a32ac@ls/false) (if a32ac@ls/false (apply (lambda (a32ae@e*) (cons 'and (a2f1a@chi-expr* a32ae@e* a32a5@r a32a6@mr))) a32ac@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a32aa@t))) (a2efc@syntax-dispatch a32aa@t '(_ . each-any)))) a32a4@e))) (set! a2ea8@or-transformer (lambda (a32b0@e a32b1@r a32b2@mr) ((lambda (a32b6@t) ((lambda (a32b8@ls/false) (if a32b8@ls/false (apply (lambda (a32ba@e*) (cons 'or (a2f1a@chi-expr* a32ba@e* a32b1@r a32b2@mr))) a32b8@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a32b6@t))) (a2efc@syntax-dispatch a32b6@t '(_ . each-any)))) a32b0@e))) (set! a2eaa@case-macro (lambda (a32bc@e) ((lambda (a32bf@build-last a32c1@build-one) (begin (set! a32bf@build-last (lambda (a32e6@cls) ((lambda (a32e8@t) ((lambda (a32ea@ls/false) (if a32ea@ls/false (apply (lambda (a32ec@e a32ed@e*) (cons 'begin (cons a32ec@e a32ed@e*))) a32ea@ls/false) ((lambda (a32f0@t) ((lambda (a32f2@ls/false) (if a32f2@ls/false (apply (lambda () (a32c1@build-one a32e6@cls '(if #f #f))) a32f2@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a32f0@t))) (a2efc@syntax-dispatch a32f0@t '_))) a32e8@t))) (a2efc@syntax-dispatch a32e8@t '(#(scheme-id else) any . each-any)))) a32e6@cls))) (set! a32c1@build-one (lambda (a32d8@cls a32d9@k) ((lambda (a32dc@t) ((lambda (a32de@ls/false) (if a32de@ls/false (apply (lambda (a32e0@d* a32e1@e a32e2@e*) (list 'if (list 'memv 't (list 'quote a32e0@d*)) (cons 'begin (cons a32e1@e a32e2@e*)) a32d9@k)) a32de@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a32dc@t))) (a2efc@syntax-dispatch a32dc@t '(each-any any . each-any)))) a32d8@cls))) ((lambda (a32c2@t) ((lambda (a32c4@ls/false) (if a32c4@ls/false (apply (lambda (a32c6@expr) (a2eb2@bless (cons 'let (cons (list (list 't a32c6@expr)) '((if #f #f)))))) a32c4@ls/false) ((lambda (a32c8@t) ((lambda (a32ca@ls/false) (if a32ca@ls/false (apply (lambda (a32cc@expr a32cd@cls a32ce@cls*) (a2eb2@bless (list 'let (list (list 't a32cc@expr)) ((letrec ((a32d2@f (lambda (a32d4@cls a32d5@cls*) (if (null? a32d5@cls*) (a32bf@build-last a32d4@cls) (a32c1@build-one a32d4@cls (a32d2@f (car a32d5@cls*) (cdr a32d5@cls*))))))) a32d2@f) a32cd@cls a32ce@cls*)))) a32ca@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a32c8@t))) (a2efc@syntax-dispatch a32c8@t '(_ any any . each-any)))) a32c2@t))) (a2efc@syntax-dispatch a32c2@t '(_ any)))) a32bc@e))) '#f '#f))) (set! a2eac@quote-transformer (lambda (a32f4@e a32f5@r a32f6@mr) ((lambda (a32fa@t) ((lambda (a32fc@ls/false) (if a32fc@ls/false (apply (lambda (a32fe@datum) (list 'quote (a2d07@stx->datum a32fe@datum))) a32fc@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a32fa@t))) (a2efc@syntax-dispatch a32fa@t '(_ any)))) a32f4@e))) (set! a2eae@case-lambda-transformer (lambda (a3300@e a3301@r a3302@mr) ((lambda (a3306@t) ((lambda (a3308@ls/false) (if a3308@ls/false (apply (lambda (a330a@fmls* a330b@b* a330c@b**) (call-with-values (lambda () (a2f26@chi-lambda-clause* a3300@e a330a@fmls* (map cons a330b@b* a330c@b**) a3301@r a3302@mr)) (lambda (a3314@a3311 a3315@a3313) ((lambda (a3318@body* a3319@fmls*) (a2c4e@a2b8f@build-case-lambda '#f a3319@fmls* a3318@body*)) a3315@a3313 a3314@a3311)))) a3308@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3306@t))) (a2efc@syntax-dispatch a3306@t '(_ . #(each (any any . each-any)))))) a3300@e))) (set! a2eb0@lambda-transformer (lambda (a331c@e a331d@r a331e@mr) ((lambda (a3322@t) ((lambda (a3324@ls/false) (if a3324@ls/false (apply (lambda (a3326@fmls a3327@b a3328@b*) (call-with-values (lambda () (a2f24@chi-lambda-clause a331c@e a3326@fmls (cons a3327@b a3328@b*) a331d@r a331e@mr)) (lambda (a3330@a332d a3331@a332f) ((lambda (a3334@body a3335@fmls) (a2c4d@a2b8d@build-lambda '#f a3335@fmls a3334@body)) a3331@a332f a3330@a332d)))) a3324@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3322@t))) (a2efc@syntax-dispatch a3322@t '(_ any any . each-any)))) a331c@e))) (set! a2eb2@bless (lambda (a3338@x) (a2cd9@mkstx ((letrec ((a333a@f (lambda (a333c@x) (if (a2cb9@stx? a333c@x) a333c@x (if (pair? a333c@x) (cons (a333a@f (car a333c@x)) (a333a@f (cdr a333c@x))) (if (symbol? a333c@x) (a2e86@scheme-stx a333c@x) (if (vector? a333c@x) (vector-map a333a@f a333c@x) a333c@x))))))) a333a@f) a3338@x) '() '() '()))) (set! a2eb4@with-syntax-macro (lambda (a333e@e) ((lambda (a3340@t) ((lambda (a3342@ls/false) (if a3342@ls/false (apply (lambda (a3344@pat* a3345@expr* a3346@b a3347@b*) ((lambda (a334c@idn*) (begin (a2f22@verify-formals (map car a334c@idn*) a333e@e) ((lambda (a334e@t*) (a2eb2@bless (list 'let (map list a334e@t* a3345@expr*) ((letrec ((a3350@f (lambda (a3352@pat* a3353@t*) (if (null? a3352@pat*) (cons 'begin (cons '#f (cons a3346@b a3347@b*))) (list 'syntax-case (car a3353@t*) '() (list (car a3352@pat*) (a3350@f (cdr a3352@pat*) (cdr a3353@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car a3352@pat*)) (car a3353@t*)))))))) a3350@f) a3344@pat* a334e@t*)))) (a2fd3@generate-temporaries a3345@expr*)))) ((letrec ((a3356@f (lambda (a3358@pat*) (if (null? a3358@pat*) '() (call-with-values (lambda () (a2efa@convert-pattern (car a3358@pat*) '())) (lambda (a335e@a335b a335f@a335d) ((lambda (a3362@idn* a3363@pat) (append a3362@idn* (a3356@f (cdr a3358@pat*)))) a335f@a335d a335e@a335b))))))) a3356@f) a3344@pat*))) a3342@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3340@t))) (a2efc@syntax-dispatch a3340@t '(_ #(each (any any)) any . each-any)))) a333e@e))) (set! a2eb6@invalid-fmls-error (lambda (a3366@stx a3367@fmls) ((lambda (a336a@t) ((lambda (a336c@ls/false) (if a336c@ls/false (apply (lambda (a336e@id* a336f@last) ((letrec ((a3372@f (lambda (a3374@id*) (if (null? a3374@id*) (values) (if (not (a2cf1@id? (car a3374@id*))) (a2fe5@syntax-violation '#f '"not an identifier" a3366@stx (car a3374@id*)) (begin (a3372@f (cdr a3374@id*)) (if (a2cff@bound-id-member? (car a3374@id*) (cdr a3374@id*)) (a2fe5@syntax-violation '#f '"duplicate binding" a3366@stx (car a3374@id*)) (void)))))))) a3372@f) (if (a2cf1@id? a336f@last) (cons a336f@last a336e@id*) (if (a2ce7@syntax-null? a336f@last) a336e@id* (a2fe5@syntax-violation '#f '"not an identifier" a3366@stx a336f@last))))) a336c@ls/false) ((lambda (a3376@t) ((lambda (a3378@ls/false) (if a3378@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"malformed binding form" a3366@stx a3367@fmls)) a3378@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3376@t))) (a2efc@syntax-dispatch a3376@t '_))) a336a@t))) (a2efc@syntax-dispatch a336a@t '#(each+ any () any)))) a3367@fmls))) (set! a2eb8@let-macro (lambda (a337a@stx) ((lambda (a337c@t) ((lambda (a337e@ls/false) (if a337e@ls/false (apply (lambda (a3380@lhs* a3381@rhs* a3382@b a3383@b*) (if (a2cfb@valid-bound-ids? a3380@lhs*) (a2eb2@bless (cons (cons 'lambda (cons a3380@lhs* (cons a3382@b a3383@b*))) a3381@rhs*)) (a2eb6@invalid-fmls-error a337a@stx a3380@lhs*))) a337e@ls/false) ((lambda (a3388@t) ((lambda (a338a@ls/false) (if (and a338a@ls/false (apply (lambda (a338c@f a338d@lhs* a338e@rhs* a338f@b a3390@b*) (a2cf1@id? a338c@f)) a338a@ls/false)) (apply (lambda (a3396@f a3397@lhs* a3398@rhs* a3399@b a339a@b*) (if (a2cfb@valid-bound-ids? a3397@lhs*) (a2eb2@bless (cons (list 'letrec (list (list a3396@f (cons 'lambda (cons a3397@lhs* (cons a3399@b a339a@b*))))) a3396@f) a3398@rhs*)) (a2eb6@invalid-fmls-error a337a@stx a3397@lhs*))) a338a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3388@t))) (a2efc@syntax-dispatch a3388@t '(_ any #(each (any any)) any . each-any)))) a337c@t))) (a2efc@syntax-dispatch a337c@t '(_ #(each (any any)) any . each-any)))) a337a@stx))) (set! a2eba@let-values-macro (lambda (a33a0@stx) ((lambda (a33a3@rename a33a5@rename*) (begin (set! a33a3@rename (lambda (a3408@x a3409@old* a340a@new*) (begin (if (not (a2cf1@id? a3408@x)) (a2fe5@syntax-violation '#f '"not an indentifier" a33a0@stx a3408@x) (void)) (if (a2cff@bound-id-member? a3408@x a3409@old*) (a2fe5@syntax-violation '#f '"duplicate binding" a33a0@stx a3408@x) (void)) ((lambda (a340e@y) (values a340e@y (cons a3408@x a3409@old*) (cons a340e@y a340a@new*))) (gensym (a2feb@syntax->datum a3408@x)))))) (set! a33a5@rename* (lambda (a33f6@x* a33f7@old* a33f8@new*) (if (null? a33f6@x*) (values '() a33f7@old* a33f8@new*) (call-with-values (lambda () (a33a3@rename (car a33f6@x*) a33f7@old* a33f8@new*)) (lambda (a33fc@x a33fd@old* a33fe@new*) (call-with-values (lambda () (a33a5@rename* (cdr a33f6@x*) a33fd@old* a33fe@new*)) (lambda (a3402@x* a3403@old* a3404@new*) (values (cons a33fc@x a3402@x*) a3403@old* a3404@new*)))))))) ((lambda (a33a6@t) ((lambda (a33a8@ls/false) (if a33a8@ls/false (apply (lambda (a33aa@b a33ab@b*) (cons* (a2eb2@bless 'let) '() a33aa@b a33ab@b*)) a33a8@ls/false) ((lambda (a33ae@t) ((lambda (a33b0@ls/false) (if a33b0@ls/false (apply (lambda (a33b2@lhs* a33b3@rhs* a33b4@b a33b5@b*) (a2eb2@bless ((letrec ((a33ba@f (lambda (a33bc@lhs* a33bd@rhs* a33be@old* a33bf@new*) (if (null? a33bc@lhs*) (cons 'let (cons (map list a33be@old* a33bf@new*) (cons a33b4@b a33b5@b*))) ((lambda (a33c4@t) ((lambda (a33c6@ls/false) (if a33c6@ls/false (apply (lambda (a33c8@x*) (call-with-values (lambda () (a33a5@rename* a33c8@x* a33be@old* a33bf@new*)) (lambda (a33d0@a33cb a33d1@a33cd a33d2@a33cf) ((lambda (a33d6@new* a33d7@old* a33d8@y*) (list 'call-with-values (list 'lambda '() (car a33bd@rhs*)) (list 'lambda a33d8@y* (a33ba@f (cdr a33bc@lhs*) (cdr a33bd@rhs*) a33d7@old* a33d6@new*)))) a33d2@a33cf a33d1@a33cd a33d0@a33cb)))) a33c6@ls/false) ((lambda (a33dc@t) ((lambda (a33de@ls/false) (if a33de@ls/false (apply (lambda (a33e0@x* a33e1@x) (call-with-values (lambda () (a33a3@rename a33e1@x a33be@old* a33bf@new*)) (lambda (a33e4@y a33e5@old* a33e6@new*) (call-with-values (lambda () (a33a5@rename* a33e0@x* a33e5@old* a33e6@new*)) (lambda (a33ea@y* a33eb@old* a33ec@new*) (list 'call-with-values (list 'lambda '() (car a33bd@rhs*)) (list 'lambda (append a33ea@y* a33e4@y) (a33ba@f (cdr a33bc@lhs*) (cdr a33bd@rhs*) a33eb@old* a33ec@new*)))))))) a33de@ls/false) ((lambda (a33f0@t) ((lambda (a33f2@ls/false) (if a33f2@ls/false (apply (lambda (a33f4@others) (a2fe5@syntax-violation '#f '"malformed bindings" a33a0@stx a33f4@others)) a33f2@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a33f0@t))) (a2efc@syntax-dispatch a33f0@t 'any))) a33dc@t))) (a2efc@syntax-dispatch a33dc@t '#(each+ any () any)))) a33c4@t))) (a2efc@syntax-dispatch a33c4@t 'each-any))) (car a33bc@lhs*)))))) a33ba@f) a33b2@lhs* a33b3@rhs* '() '()))) a33b0@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a33ae@t))) (a2efc@syntax-dispatch a33ae@t '(_ #(each (any any)) any . each-any)))) a33a6@t))) (a2efc@syntax-dispatch a33a6@t '(_ () any . each-any)))) a33a0@stx))) '#f '#f))) (set! a2ebc@let*-values-macro (lambda (a3410@stx) ((lambda (a3413@check) (begin (set! a3413@check (lambda (a3442@x*) (if (not (null? a3442@x*)) ((lambda (a3444@x) (begin (if (not (a2cf1@id? a3444@x)) (a2fe5@syntax-violation '#f '"not an identifier" a3410@stx a3444@x) (void)) (a3413@check (cdr a3442@x*)) (if (a2cff@bound-id-member? a3444@x (cdr a3442@x*)) (a2fe5@syntax-violation '#f '"duplicate identifier" a3410@stx a3444@x) (void)))) (car a3442@x*)) (void)))) ((lambda (a3414@t) ((lambda (a3416@ls/false) (if a3416@ls/false (apply (lambda (a3418@b a3419@b*) (cons* (a2eb2@bless 'let) '() a3418@b a3419@b*)) a3416@ls/false) ((lambda (a341c@t) ((lambda (a341e@ls/false) (if a341e@ls/false (apply (lambda (a3420@lhs* a3421@rhs* a3422@b a3423@b*) (a2eb2@bless ((letrec ((a3428@f (lambda (a342a@lhs* a342b@rhs*) (if (null? a342a@lhs*) (cons 'begin (cons a3422@b a3423@b*)) ((lambda (a342e@t) ((lambda (a3430@ls/false) (if a3430@ls/false (apply (lambda (a3432@x*) (begin (a3413@check a3432@x*) (list 'call-with-values (list 'lambda '() (car a342b@rhs*)) (list 'lambda a3432@x* (a3428@f (cdr a342a@lhs*) (cdr a342b@rhs*)))))) a3430@ls/false) ((lambda (a3434@t) ((lambda (a3436@ls/false) (if a3436@ls/false (apply (lambda (a3438@x* a3439@x) (begin (a3413@check (cons a3439@x a3438@x*)) (list 'call-with-values (list 'lambda '() (car a342b@rhs*)) (list 'lambda (append a3438@x* a3439@x) (a3428@f (cdr a342a@lhs*) (cdr a342b@rhs*)))))) a3436@ls/false) ((lambda (a343c@t) ((lambda (a343e@ls/false) (if a343e@ls/false (apply (lambda (a3440@others) (a2fe5@syntax-violation '#f '"malformed bindings" a3410@stx a3440@others)) a343e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a343c@t))) (a2efc@syntax-dispatch a343c@t 'any))) a3434@t))) (a2efc@syntax-dispatch a3434@t '#(each+ any () any)))) a342e@t))) (a2efc@syntax-dispatch a342e@t 'each-any))) (car a342a@lhs*)))))) a3428@f) a3420@lhs* a3421@rhs*))) a341e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a341c@t))) (a2efc@syntax-dispatch a341c@t '(_ #(each (any any)) any . each-any)))) a3414@t))) (a2efc@syntax-dispatch a3414@t '(_ () any . each-any)))) a3410@stx))) '#f))) (set! a2ebe@trace-lambda-macro (lambda (a3446@stx) ((lambda (a3448@t) ((lambda (a344a@ls/false) (if a344a@ls/false (apply (lambda (a344c@who a344d@fmls a344e@b a344f@b*) (if (a2cfb@valid-bound-ids? a344d@fmls) (a2eb2@bless (list 'make-traced-procedure (list 'quote a344c@who) (cons 'lambda (cons a344d@fmls (cons a344e@b a344f@b*))))) (a2eb6@invalid-fmls-error a3446@stx a344d@fmls))) a344a@ls/false) ((lambda (a3454@t) ((lambda (a3456@ls/false) (if a3456@ls/false (apply (lambda (a3458@who a3459@fmls a345a@last a345b@b a345c@b*) (if (a2cfb@valid-bound-ids? (cons a345a@last a3459@fmls)) (a2eb2@bless (list 'make-traced-procedure (list 'quote a3458@who) (cons 'lambda (cons (append a3459@fmls a345a@last) (cons a345b@b a345c@b*))))) (a2eb6@invalid-fmls-error a3446@stx (append a3459@fmls a345a@last)))) a3456@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3454@t))) (a2efc@syntax-dispatch a3454@t '(_ any #(each+ any () any) any . each-any)))) a3448@t))) (a2efc@syntax-dispatch a3448@t '(_ any each-any any . each-any)))) a3446@stx))) (set! a2ec0@trace-define-macro (lambda (a3462@stx) ((lambda (a3464@t) ((lambda (a3466@ls/false) (if a3466@ls/false (apply (lambda (a3468@who a3469@fmls a346a@b a346b@b*) (if (a2cfb@valid-bound-ids? a3469@fmls) (a2eb2@bless (list 'define a3468@who (list 'make-traced-procedure (list 'quote a3468@who) (cons 'lambda (cons a3469@fmls (cons a346a@b a346b@b*)))))) (a2eb6@invalid-fmls-error a3462@stx a3469@fmls))) a3466@ls/false) ((lambda (a3470@t) ((lambda (a3472@ls/false) (if a3472@ls/false (apply (lambda (a3474@who a3475@fmls a3476@last a3477@b a3478@b*) (if (a2cfb@valid-bound-ids? (cons a3476@last a3475@fmls)) (a2eb2@bless (list 'define a3474@who (list 'make-traced-procedure (list 'quote a3474@who) (cons 'lambda (cons (append a3475@fmls a3476@last) (cons a3477@b a3478@b*)))))) (a2eb6@invalid-fmls-error a3462@stx (append a3475@fmls a3476@last)))) a3472@ls/false) ((lambda (a347e@t) ((lambda (a3480@ls/false) (if a3480@ls/false (apply (lambda (a3482@who a3483@expr) (if (a2cf1@id? a3482@who) (a2eb2@bless (list 'define a3482@who (list 'let (list (list 'v a3483@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote a3482@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (a2fe5@syntax-violation '#f '"invalid name" a3462@stx))) a3480@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a347e@t))) (a2efc@syntax-dispatch a347e@t '(_ any any)))) a3470@t))) (a2efc@syntax-dispatch a3470@t '(_ (any . #(each+ any () any)) any . each-any)))) a3464@t))) (a2efc@syntax-dispatch a3464@t '(_ (any . each-any) any . each-any)))) a3462@stx))) (set! a2ec2@trace-define-syntax-macro (lambda (a3486@stx) ((lambda (a3488@t) ((lambda (a348a@ls/false) (if a348a@ls/false (apply (lambda (a348c@who a348d@expr) (if (a2cf1@id? a348c@who) (a2eb2@bless (list 'define-syntax a348c@who (list 'make-traced-macro (list 'quote a348c@who) a348d@expr))) (a2fe5@syntax-violation '#f '"invalid name" a3486@stx))) a348a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3488@t))) (a2efc@syntax-dispatch a3488@t '(_ any any)))) a3486@stx))) (set! a2ec4@trace-let/rec-syntax (lambda (a3490@who) (lambda (a3492@stx) ((lambda (a3494@t) ((lambda (a3496@ls/false) (if a3496@ls/false (apply (lambda (a3498@lhs* a3499@rhs* a349a@b a349b@b*) (if (a2cfb@valid-bound-ids? a3498@lhs*) ((lambda (a34a0@rhs*) (a2eb2@bless (cons a3490@who (cons (map list a3498@lhs* a34a0@rhs*) (cons a349a@b a349b@b*))))) (map (lambda (a34a2@lhs a34a3@rhs) (list 'make-traced-macro (list 'quote a34a2@lhs) a34a3@rhs)) a3498@lhs* a3499@rhs*)) (a2eb6@invalid-fmls-error a3492@stx a3498@lhs*))) a3496@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3494@t))) (a2efc@syntax-dispatch a3494@t '(_ #(each (any any)) any . each-any)))) a3492@stx)))) (set! a2ec6@trace-let-syntax-macro (a2ec4@trace-let/rec-syntax 'let-syntax)) (set! a2ec8@trace-letrec-syntax-macro (a2ec4@trace-let/rec-syntax 'letrec-syntax)) (set! a2eca@guard-macro (lambda (a34a6@x) ((lambda (a34a9@gen-clauses) (begin (set! a34a9@gen-clauses (lambda (a34c0@con a34c1@outerk a34c2@clause*) ((lambda (a34c7@f a34c9@f*) (begin (set! a34c7@f (lambda (a3500@x a3501@k) ((lambda (a3504@t) ((lambda (a3506@ls/false) (if a3506@ls/false (apply (lambda (a3508@e a3509@p) ((lambda (a350c@t) (list 'let (list (list a350c@t a3508@e)) (list 'if a350c@t (list a3509@p a350c@t) a3501@k))) (gensym))) a3506@ls/false) ((lambda (a350e@t) ((lambda (a3510@ls/false) (if a3510@ls/false (apply (lambda (a3512@e) ((lambda (a3514@t) (list 'let (list (list a3514@t a3512@e)) (list 'if a3514@t a3514@t a3501@k))) (gensym))) a3510@ls/false) ((lambda (a3516@t) ((lambda (a3518@ls/false) (if a3518@ls/false (apply (lambda (a351a@e a351b@v a351c@v*) (list 'if a351a@e (cons 'begin (cons a351b@v a351c@v*)) a3501@k)) a3518@ls/false) ((lambda (a3520@t) ((lambda (a3522@ls/false) (if a3522@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid guard clause" a3500@x)) a3522@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3520@t))) (a2efc@syntax-dispatch a3520@t '_))) a3516@t))) (a2efc@syntax-dispatch a3516@t '(any any . each-any)))) a350e@t))) (a2efc@syntax-dispatch a350e@t '(any)))) a3504@t))) (a2efc@syntax-dispatch a3504@t '(any #(scheme-id =>) any)))) a3500@x))) (set! a34c9@f* (lambda (a34d6@x*) ((lambda (a34d8@t) ((lambda (a34da@ls/false) (if a34da@ls/false (apply (lambda () ((lambda (a34dc@g) (values (list a34dc@g (list 'lambda '() (list 'raise-continuable a34c0@con))) a34dc@g)) (gensym))) a34da@ls/false) ((lambda (a34de@t) ((lambda (a34e0@ls/false) (if a34e0@ls/false (apply (lambda (a34e2@e a34e3@e*) (values (cons 'begin (cons a34e2@e a34e3@e*)) '#f)) a34e0@ls/false) ((lambda (a34e6@t) ((lambda (a34e8@ls/false) (if a34e8@ls/false (apply (lambda (a34ea@cls a34eb@cls*) (call-with-values (lambda () (a34c9@f* a34eb@cls*)) (lambda (a34f2@a34ef a34f3@a34f1) ((lambda (a34f6@g a34f7@e) (values (a34c7@f a34ea@cls a34f7@e) a34f6@g)) a34f3@a34f1 a34f2@a34ef)))) a34e8@ls/false) ((lambda (a34fa@t) ((lambda (a34fc@ls/false) (if a34fc@ls/false (apply (lambda (a34fe@others) (a2fe5@syntax-violation '#f '"invalid guard clause" a34fe@others)) a34fc@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a34fa@t))) (a2efc@syntax-dispatch a34fa@t 'any))) a34e6@t))) (a2efc@syntax-dispatch a34e6@t '(any . any)))) a34de@t))) (a2efc@syntax-dispatch a34de@t '((#(scheme-id else) any . each-any))))) a34d8@t))) (a2efc@syntax-dispatch a34d8@t '()))) a34d6@x*))) (call-with-values (lambda () (a34c9@f* a34c2@clause*)) (lambda (a34ce@a34cb a34cf@a34cd) ((lambda (a34d2@raisek a34d3@code) (if a34d2@raisek (list (list 'call/cc (list 'lambda (list a34d2@raisek) (list a34c1@outerk (list 'lambda '() a34d3@code))))) (list a34c1@outerk (list 'lambda '() a34d3@code)))) a34cf@a34cd a34ce@a34cb))))) '#f '#f))) ((lambda (a34aa@t) ((lambda (a34ac@ls/false) (if (and a34ac@ls/false (apply (lambda (a34ae@con a34af@clause* a34b0@b a34b1@b*) (a2cf1@id? a34ae@con)) a34ac@ls/false)) (apply (lambda (a34b6@con a34b7@clause* a34b8@b a34b9@b*) ((lambda (a34be@outerk) (a2eb2@bless (list (list 'call/cc (list 'lambda (list a34be@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list a34b6@con) (a34a9@gen-clauses a34b6@con a34be@outerk a34b7@clause*)) (cons 'lambda (cons '() (cons a34b8@b a34b9@b*)))))))))) (gensym))) a34ac@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a34aa@t))) (a2efc@syntax-dispatch a34aa@t '(_ (any . each-any) any . each-any)))) a34a6@x))) '#f))) (set! a2ecc@define-enumeration-macro (lambda (a3524@stx) ((lambda (a3527@set? a3529@remove-dups) (begin (set! a3527@set? (lambda (a3540@x) (or (null? a3540@x) (and (not (memq (car a3540@x) (cdr a3540@x))) (a3527@set? (cdr a3540@x)))))) (set! a3529@remove-dups (lambda (a353e@ls) (if (null? a353e@ls) '() (cons (car a353e@ls) (a3529@remove-dups (remq (car a353e@ls) (cdr a353e@ls))))))) ((lambda (a352a@t) ((lambda (a352c@ls/false) (if (and a352c@ls/false (apply (lambda (a352e@name a352f@id* a3530@maker) (and (a2cf1@id? a352e@name) (a2cf1@id? a3530@maker) (for-all a2cf1@id? a352f@id*))) a352c@ls/false)) (apply (lambda (a3534@name a3535@id* a3536@maker) ((lambda (a353a@name* a353b@mk) (a2eb2@bless (list 'begin (list 'define a353b@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote a353a@name*)))) (list 'define-syntax a3534@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote a353a@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote a3534@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax a3536@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote a3536@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote a353a@name*)) (cons 'syntax-violation (cons (list 'quote a3536@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons a353b@mk '('(n* ...)))))))))))) (a3529@remove-dups (a2feb@syntax->datum a3535@id*)) (gensym))) a352c@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a352a@t))) (a2efc@syntax-dispatch a352a@t '(_ any each-any any)))) a3524@stx))) '#f '#f))) (set! a2ece@time-macro (lambda (a3542@stx) ((lambda (a3544@t) ((lambda (a3546@ls/false) (if a3546@ls/false (apply (lambda (a3548@expr) (a2eb2@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() a3548@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) a3546@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3544@t))) (a2efc@syntax-dispatch a3544@t '(_ any)))) a3542@stx))) (set! a2ed0@delay-macro (lambda (a354a@stx) ((lambda (a354c@t) ((lambda (a354e@ls/false) (if a354e@ls/false (apply (lambda (a3550@expr) (a2eb2@bless (list 'make-promise (list 'lambda '() a3550@expr)))) a354e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a354c@t))) (a2efc@syntax-dispatch a354c@t '(_ any)))) a354a@stx))) (set! a2ed2@assert-macro (lambda (a3552@stx) ((lambda (a3554@t) ((lambda (a3556@ls/false) (if a3556@ls/false (apply (lambda (a3558@expr) ((lambda (a355a@pos) (a2eb2@bless (list 'unless a3558@expr (list 'assertion-error (list 'quote a3558@expr) (list 'quote a355a@pos))))) (or (a2fdd@expression-position a3552@stx) (a2fdd@expression-position a3558@expr)))) a3556@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3554@t))) (a2efc@syntax-dispatch a3554@t '(_ any)))) a3552@stx))) (set! a2ed4@endianness-macro (lambda (a355c@stx) ((lambda (a355e@t) ((lambda (a3560@ls/false) (if a3560@ls/false (apply (lambda (a3562@e) ((lambda (a3564@t) (if (memv a3564@t '(little)) (a2eb2@bless ''little) (if (memv a3564@t '(big)) (a2eb2@bless ''big) (a2fe5@syntax-violation '#f '"endianness must be big or little" a355c@stx)))) (a2feb@syntax->datum a3562@e))) a3560@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a355e@t))) (a2efc@syntax-dispatch a355e@t '(_ any)))) a355c@stx))) (set! a2ed6@identifier-syntax-macro (lambda (a3566@stx) ((lambda (a3568@t) ((lambda (a356a@ls/false) (if a356a@ls/false (apply (lambda (a356c@expr) (a2eb2@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax a356c@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax a356c@expr) '((syntax (e* ...)))))))))) a356a@ls/false) ((lambda (a356e@t) ((lambda (a3570@ls/false) (if (and a3570@ls/false (apply (lambda (a3572@id1 a3573@expr1 a3574@id2 a3575@expr2 a3576@expr3) (and (a2cf1@id? a3572@id1) (a2cf1@id? a3574@id2) (a2cf1@id? a3575@expr2))) a3570@ls/false)) (apply (lambda (a357c@id1 a357d@expr1 a357e@id2 a357f@expr2 a3580@expr3) (a2eb2@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax a357d@expr1)) (list (list 'set! 'id a357f@expr2) (list 'syntax a3580@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons a357d@expr1 '(e* ...))))))))) a3570@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a356e@t))) (a2efc@syntax-dispatch a356e@t '(_ (any any) ((#(scheme-id set!) any any) any))))) a3568@t))) (a2efc@syntax-dispatch a3568@t '(_ any)))) a3566@stx))) (set! a2ed8@do-macro (lambda (a3586@stx) ((lambda (a3589@bind) (begin (set! a3589@bind (lambda (a35a0@x) ((lambda (a35a2@t) ((lambda (a35a4@ls/false) (if a35a4@ls/false (apply (lambda (a35a6@x a35a7@init) (list a35a6@x a35a7@init a35a6@x)) a35a4@ls/false) ((lambda (a35aa@t) ((lambda (a35ac@ls/false) (if a35ac@ls/false (apply (lambda (a35ae@x a35af@init a35b0@step) (list a35ae@x a35af@init a35b0@step)) a35ac@ls/false) ((lambda (a35b4@t) ((lambda (a35b6@ls/false) (if a35b6@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid binding" a3586@stx)) a35b6@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a35b4@t))) (a2efc@syntax-dispatch a35b4@t '_))) a35aa@t))) (a2efc@syntax-dispatch a35aa@t '(any any any)))) a35a2@t))) (a2efc@syntax-dispatch a35a2@t '(any any)))) a35a0@x))) ((lambda (a358a@t) ((lambda (a358c@ls/false) (if a358c@ls/false (apply (lambda (a358e@binding* a358f@test a3590@expr* a3591@command*) ((lambda (a3596@t) ((lambda (a3598@ls/false) (if a3598@ls/false (apply (lambda (a359a@x* a359b@init* a359c@step*) (if (a2cfb@valid-bound-ids? a359a@x*) (a2eb2@bless (list 'letrec (list (list 'loop (list 'lambda a359a@x* (list 'if a358f@test (cons 'begin (cons '(if #f #f) a3590@expr*)) (cons 'begin (append a3591@command* (list (cons 'loop a359c@step*)))))))) (cons 'loop a359b@init*))) (a2fe5@syntax-violation '#f '"invalid bindings" a3586@stx))) a3598@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3596@t))) (a2efc@syntax-dispatch a3596@t '#(each (any any any))))) (map a3589@bind a358e@binding*))) a358c@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a358a@t))) (a2efc@syntax-dispatch a358a@t '(_ each-any (any . each-any) . each-any)))) a3586@stx))) '#f))) (set! a2eda@let*-macro (lambda (a35b8@stx) ((lambda (a35ba@t) ((lambda (a35bc@ls/false) (if (and a35bc@ls/false (apply (lambda (a35be@lhs* a35bf@rhs* a35c0@b a35c1@b*) (for-all a2cf1@id? a35be@lhs*)) a35bc@ls/false)) (apply (lambda (a35c6@lhs* a35c7@rhs* a35c8@b a35c9@b*) (a2eb2@bless ((letrec ((a35ce@f (lambda (a35d0@x*) (if (null? a35d0@x*) (cons 'let (cons '() (cons a35c8@b a35c9@b*))) (list 'let (list (car a35d0@x*)) (a35ce@f (cdr a35d0@x*))))))) a35ce@f) (map list a35c6@lhs* a35c7@rhs*)))) a35bc@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a35ba@t))) (a2efc@syntax-dispatch a35ba@t '(_ #(each (any any)) any . each-any)))) a35b8@stx))) (set! a2edc@or-macro (lambda (a35d2@stx) ((lambda (a35d4@t) ((lambda (a35d6@ls/false) (if a35d6@ls/false (apply (lambda () '#f) a35d6@ls/false) ((lambda (a35d8@t) ((lambda (a35da@ls/false) (if a35da@ls/false (apply (lambda (a35dc@e a35dd@e*) (a2eb2@bless ((letrec ((a35e0@f (lambda (a35e2@e a35e3@e*) (if (null? a35e3@e*) (list 'begin '#f a35e2@e) (list 'let (list (list 't a35e2@e)) (list 'if 't 't (a35e0@f (car a35e3@e*) (cdr a35e3@e*)))))))) a35e0@f) a35dc@e a35dd@e*))) a35da@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a35d8@t))) (a2efc@syntax-dispatch a35d8@t '(_ any . each-any)))) a35d4@t))) (a2efc@syntax-dispatch a35d4@t '(_)))) a35d2@stx))) (set! a2ede@and-macro (lambda (a35e6@stx) ((lambda (a35e8@t) ((lambda (a35ea@ls/false) (if a35ea@ls/false (apply (lambda () '#t) a35ea@ls/false) ((lambda (a35ec@t) ((lambda (a35ee@ls/false) (if a35ee@ls/false (apply (lambda (a35f0@e a35f1@e*) (a2eb2@bless ((letrec ((a35f4@f (lambda (a35f6@e a35f7@e*) (if (null? a35f7@e*) (list 'begin '#f a35f6@e) (cons 'if (cons a35f6@e (cons (a35f4@f (car a35f7@e*) (cdr a35f7@e*)) '(#f)))))))) a35f4@f) a35f0@e a35f1@e*))) a35ee@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a35ec@t))) (a2efc@syntax-dispatch a35ec@t '(_ any . each-any)))) a35e8@t))) (a2efc@syntax-dispatch a35e8@t '(_)))) a35e6@stx))) (set! a2ee0@cond-macro (lambda (a35fa@stx) ((lambda (a35fc@t) ((lambda (a35fe@ls/false) (if a35fe@ls/false (apply (lambda (a3600@cls a3601@cls*) (a2eb2@bless ((letrec ((a3604@f (lambda (a3606@cls a3607@cls*) (if (null? a3607@cls*) ((lambda (a360a@t) ((lambda (a360c@ls/false) (if a360c@ls/false (apply (lambda (a360e@e a360f@e*) (cons 'begin (cons a360e@e a360f@e*))) a360c@ls/false) ((lambda (a3612@t) ((lambda (a3614@ls/false) (if a3614@ls/false (apply (lambda (a3616@e a3617@p) (list 'let (list (list 't a3616@e)) (list 'if 't (cons a3617@p '(t))))) a3614@ls/false) ((lambda (a361a@t) ((lambda (a361c@ls/false) (if a361c@ls/false (apply (lambda (a361e@e) (cons 'or (cons a361e@e '((if #f #f))))) a361c@ls/false) ((lambda (a3620@t) ((lambda (a3622@ls/false) (if a3622@ls/false (apply (lambda (a3624@e a3625@e*) (list 'if a3624@e (cons 'begin a3625@e*))) a3622@ls/false) ((lambda (a3628@t) ((lambda (a362a@ls/false) (if a362a@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid last clause" a35fa@stx)) a362a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3628@t))) (a2efc@syntax-dispatch a3628@t '_))) a3620@t))) (a2efc@syntax-dispatch a3620@t '(any . each-any)))) a361a@t))) (a2efc@syntax-dispatch a361a@t '(any)))) a3612@t))) (a2efc@syntax-dispatch a3612@t '(any #(scheme-id =>) any)))) a360a@t))) (a2efc@syntax-dispatch a360a@t '(#(scheme-id else) any . each-any)))) a3606@cls) ((lambda (a362c@t) ((lambda (a362e@ls/false) (if a362e@ls/false (apply (lambda (a3630@e a3631@e*) (a2fe5@syntax-violation '#f '"incorrect position of keyword else" a35fa@stx)) a362e@ls/false) ((lambda (a3634@t) ((lambda (a3636@ls/false) (if a3636@ls/false (apply (lambda (a3638@e a3639@p) (list 'let (list (list 't a3638@e)) (list 'if 't (cons a3639@p '(t)) (a3604@f (car a3607@cls*) (cdr a3607@cls*))))) a3636@ls/false) ((lambda (a363c@t) ((lambda (a363e@ls/false) (if a363e@ls/false (apply (lambda (a3640@e) (list 'or a3640@e (a3604@f (car a3607@cls*) (cdr a3607@cls*)))) a363e@ls/false) ((lambda (a3642@t) ((lambda (a3644@ls/false) (if a3644@ls/false (apply (lambda (a3646@e a3647@e*) (list 'if a3646@e (cons 'begin a3647@e*) (a3604@f (car a3607@cls*) (cdr a3607@cls*)))) a3644@ls/false) ((lambda (a364a@t) ((lambda (a364c@ls/false) (if a364c@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid last clause" a35fa@stx)) a364c@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a364a@t))) (a2efc@syntax-dispatch a364a@t '_))) a3642@t))) (a2efc@syntax-dispatch a3642@t '(any . each-any)))) a363c@t))) (a2efc@syntax-dispatch a363c@t '(any)))) a3634@t))) (a2efc@syntax-dispatch a3634@t '(any #(scheme-id =>) any)))) a362c@t))) (a2efc@syntax-dispatch a362c@t '(#(scheme-id else) any . each-any)))) a3606@cls))))) a3604@f) a3600@cls a3601@cls*))) a35fe@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a35fc@t))) (a2efc@syntax-dispatch a35fc@t '(_ any . each-any)))) a35fa@stx))) (set! a2ee2@do-include (lambda (a364e@stx a364f@id a3650@filename) ((lambda (a3654@filename) (begin (if (not (and (string? a3654@filename) (a2cf1@id? a364f@id))) (a2fe5@syntax-violation '#f '"invalid syntax" a364e@stx) (void)) (cons (a2eb2@bless 'begin) (with-input-from-file a3654@filename (lambda () ((letrec ((a3656@f (lambda (a3658@ls) ((lambda (a365a@x) (if (eof-object? a365a@x) (reverse a3658@ls) (a3656@f (cons (a2ccf@datum->stx a364f@id a365a@x) a3658@ls)))) (a288e@a27ab@read-annotated))))) a3656@f) '())))))) (a2d07@stx->datum a3650@filename)))) (set! a2ee4@include-macro (lambda (a365c@e) ((lambda (a365e@t) ((lambda (a3660@ls/false) (if a3660@ls/false (apply (lambda (a3662@id a3663@filename) (a2ee2@do-include a365c@e a3662@id a3663@filename)) a3660@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a365e@t))) (a2efc@syntax-dispatch a365e@t '(any any)))) a365c@e))) (set! a2ee6@include-into-macro (lambda (a3666@e) ((lambda (a3668@t) ((lambda (a366a@ls/false) (if a366a@ls/false (apply (lambda (a366c@id a366d@filename) (a2ee2@do-include a3666@e a366c@id a366d@filename)) a366a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3668@t))) (a2efc@syntax-dispatch a3668@t '(_ any any)))) a3666@e))) (set! a2ee8@syntax-rules-macro (lambda (a3670@e) ((lambda (a3672@t) ((lambda (a3674@ls/false) (if a3674@ls/false (apply (lambda (a3676@lits a3677@pat* a3678@tmp*) (begin (a2f02@verify-literals a3676@lits a3670@e) (a2eb2@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons a3676@lits (map (lambda (a367c@pat a367d@tmp) ((lambda (a3680@t) ((lambda (a3682@ls/false) (if a3682@ls/false (apply (lambda (a3684@rest) (list (cons 'g a3684@rest) (list 'syntax a367d@tmp))) a3682@ls/false) ((lambda (a3686@t) ((lambda (a3688@ls/false) (if a3688@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid syntax-rules pattern" a3670@e a367c@pat)) a3688@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3686@t))) (a2efc@syntax-dispatch a3686@t '_))) a3680@t))) (a2efc@syntax-dispatch a3680@t '(_ . any)))) a367c@pat)) a3677@pat* a3678@tmp*)))))))) a3674@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3672@t))) (a2efc@syntax-dispatch a3672@t '(_ each-any . #(each (any any)))))) a3670@e))) (set! a2eea@quasiquote-macro ((lambda () ((lambda (a368b@datum a36a7@quasicons* a36a9@quasicons a36ab@quasiappend a36ad@quasivector a36af@vquasi a36b1@quasi) (begin (set! a368b@datum (lambda (a378c@x) (list (a2e86@scheme-stx 'quote) (a2cd9@mkstx a378c@x '() '() '())))) (set! a36a7@quasicons* (lambda (a3784@x a3785@y) ((letrec ((a3788@f (lambda (a378a@x) (if (null? a378a@x) a3785@y (a36a9@quasicons (car a378a@x) (a3788@f (cdr a378a@x))))))) a3788@f) a3784@x))) (set! a36a9@quasicons (lambda (a375e@x a375f@y) ((lambda (a3762@t) ((lambda (a3764@ls/false) (if a3764@ls/false (apply (lambda (a3766@dy) ((lambda (a3768@t) ((lambda (a376a@ls/false) (if a376a@ls/false (apply (lambda (a376c@dx) (list (a2e86@scheme-stx 'quote) (cons a376c@dx a3766@dy))) a376a@ls/false) ((lambda (a376e@t) ((lambda (a3770@ls/false) (if a3770@ls/false (apply (lambda () ((lambda (a3772@t) ((lambda (a3774@ls/false) (if a3774@ls/false (apply (lambda () (list (a2e86@scheme-stx 'list) a375e@x)) a3774@ls/false) ((lambda (a3776@t) ((lambda (a3778@ls/false) (if a3778@ls/false (apply (lambda () (list (a2e86@scheme-stx 'cons) a375e@x a375f@y)) a3778@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3776@t))) (a2efc@syntax-dispatch a3776@t '_))) a3772@t))) (a2efc@syntax-dispatch a3772@t '()))) a3766@dy)) a3770@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a376e@t))) (a2efc@syntax-dispatch a376e@t '_))) a3768@t))) (a2efc@syntax-dispatch a3768@t '(#(scheme-id quote) any)))) a375e@x)) a3764@ls/false) ((lambda (a377a@t) ((lambda (a377c@ls/false) (if a377c@ls/false (apply (lambda (a377e@stuff) (cons* (a2e86@scheme-stx 'list) a375e@x a377e@stuff)) a377c@ls/false) ((lambda (a3780@t) ((lambda (a3782@ls/false) (if a3782@ls/false (apply (lambda () (list (a2e86@scheme-stx 'cons) a375e@x a375f@y)) a3782@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3780@t))) (a2efc@syntax-dispatch a3780@t '_))) a377a@t))) (a2efc@syntax-dispatch a377a@t '(#(scheme-id list) . each-any)))) a3762@t))) (a2efc@syntax-dispatch a3762@t '(#(scheme-id quote) any)))) a375f@y))) (set! a36ab@quasiappend (lambda (a3744@x a3745@y) ((lambda (a3748@ls) (if (null? a3748@ls) (list (a2e86@scheme-stx 'quote) '()) (if (null? (cdr a3748@ls)) (car a3748@ls) (cons* (a2e86@scheme-stx 'append) a3748@ls)))) ((letrec ((a374a@f (lambda (a374c@x) (if (null? a374c@x) ((lambda (a374e@t) ((lambda (a3750@ls/false) (if a3750@ls/false (apply (lambda () '()) a3750@ls/false) ((lambda (a3752@t) ((lambda (a3754@ls/false) (if a3754@ls/false (apply (lambda () (list a3745@y)) a3754@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3752@t))) (a2efc@syntax-dispatch a3752@t '_))) a374e@t))) (a2efc@syntax-dispatch a374e@t '(#(scheme-id quote) ())))) a3745@y) ((lambda (a3756@t) ((lambda (a3758@ls/false) (if a3758@ls/false (apply (lambda () (a374a@f (cdr a374c@x))) a3758@ls/false) ((lambda (a375a@t) ((lambda (a375c@ls/false) (if a375c@ls/false (apply (lambda () (cons (car a374c@x) (a374a@f (cdr a374c@x)))) a375c@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a375a@t))) (a2efc@syntax-dispatch a375a@t '_))) a3756@t))) (a2efc@syntax-dispatch a3756@t '(#(scheme-id quote) ())))) (car a374c@x)))))) a374a@f) a3744@x)))) (set! a36ad@quasivector (lambda (a3712@x) ((lambda (a3714@pat-x) ((lambda (a3716@t) ((lambda (a3718@ls/false) (if a3718@ls/false (apply (lambda (a371a@x*) (list (a2e86@scheme-stx 'quote) (list->vector a371a@x*))) a3718@ls/false) ((lambda (a371c@t) ((lambda (a371e@ls/false) (if a371e@ls/false (apply (lambda () ((letrec ((a3720@f (lambda (a3722@x a3723@k) ((lambda (a3726@t) ((lambda (a3728@ls/false) (if a3728@ls/false (apply (lambda (a372a@x*) (a3723@k (map (lambda (a372c@x) (list (a2e86@scheme-stx 'quote) a372c@x)) a372a@x*))) a3728@ls/false) ((lambda (a372e@t) ((lambda (a3730@ls/false) (if a3730@ls/false (apply (lambda (a3732@x*) (a3723@k a3732@x*)) a3730@ls/false) ((lambda (a3734@t) ((lambda (a3736@ls/false) (if a3736@ls/false (apply (lambda (a3738@x a3739@y) (a3720@f a3739@y (lambda (a373c@ls) (a3723@k (cons a3738@x a373c@ls))))) a3736@ls/false) ((lambda (a373e@t) ((lambda (a3740@ls/false) (if a3740@ls/false (apply (lambda () (list (a2e86@scheme-stx 'list->vector) a3714@pat-x)) a3740@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a373e@t))) (a2efc@syntax-dispatch a373e@t '_))) a3734@t))) (a2efc@syntax-dispatch a3734@t '(#(scheme-id cons) any any)))) a372e@t))) (a2efc@syntax-dispatch a372e@t '(#(scheme-id list) . each-any)))) a3726@t))) (a2efc@syntax-dispatch a3726@t '(#(scheme-id quote) each-any)))) a3722@x)))) a3720@f) a3712@x (lambda (a3742@ls) (cons* (a2e86@scheme-stx 'vector) a3742@ls)))) a371e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a371c@t))) (a2efc@syntax-dispatch a371c@t '_))) a3716@t))) (a2efc@syntax-dispatch a3716@t '(#(scheme-id quote) each-any)))) a3714@pat-x)) a3712@x))) (set! a36af@vquasi (lambda (a36f0@p a36f1@lev) ((lambda (a36f4@t) ((lambda (a36f6@ls/false) (if a36f6@ls/false (apply (lambda (a36f8@p a36f9@q) ((lambda (a36fc@t) ((lambda (a36fe@ls/false) (if a36fe@ls/false (apply (lambda (a3700@p) (if (= a36f1@lev '0) (a36a7@quasicons* a3700@p (a36af@vquasi a36f9@q a36f1@lev)) (a36a9@quasicons (a36a9@quasicons (a368b@datum 'unquote) (a36b1@quasi a3700@p (- a36f1@lev '1))) (a36af@vquasi a36f9@q a36f1@lev)))) a36fe@ls/false) ((lambda (a3702@t) ((lambda (a3704@ls/false) (if a3704@ls/false (apply (lambda (a3706@p) (if (= a36f1@lev '0) (a36ab@quasiappend a3706@p (a36af@vquasi a36f9@q a36f1@lev)) (a36a9@quasicons (a36a9@quasicons (a368b@datum 'unquote-splicing) (a36b1@quasi a3706@p (- a36f1@lev '1))) (a36af@vquasi a36f9@q a36f1@lev)))) a3704@ls/false) ((lambda (a3708@t) ((lambda (a370a@ls/false) (if a370a@ls/false (apply (lambda (a370c@p) (a36a9@quasicons (a36b1@quasi a370c@p a36f1@lev) (a36af@vquasi a36f9@q a36f1@lev))) a370a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3708@t))) (a2efc@syntax-dispatch a3708@t 'any))) a3702@t))) (a2efc@syntax-dispatch a3702@t '(#(scheme-id unquote-splicing) . each-any)))) a36fc@t))) (a2efc@syntax-dispatch a36fc@t '(#(scheme-id unquote) . each-any)))) a36f8@p)) a36f6@ls/false) ((lambda (a370e@t) ((lambda (a3710@ls/false) (if a3710@ls/false (apply (lambda () (list (a2e86@scheme-stx 'quote) '())) a3710@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a370e@t))) (a2efc@syntax-dispatch a370e@t '()))) a36f4@t))) (a2efc@syntax-dispatch a36f4@t '(any . any)))) a36f0@p))) (set! a36b1@quasi (lambda (a36ba@p a36bb@lev) ((lambda (a36be@t) ((lambda (a36c0@ls/false) (if a36c0@ls/false (apply (lambda (a36c2@p) (if (= a36bb@lev '0) a36c2@p (a36a9@quasicons (a368b@datum 'unquote) (a36b1@quasi (list a36c2@p) (- a36bb@lev '1))))) a36c0@ls/false) ((lambda (a36c4@t) ((lambda (a36c6@ls/false) (if a36c6@ls/false (apply (lambda (a36c8@p a36c9@q) (if (= a36bb@lev '0) (a36a7@quasicons* a36c8@p (a36b1@quasi a36c9@q a36bb@lev)) (a36a9@quasicons (a36a9@quasicons (a368b@datum 'unquote) (a36b1@quasi a36c8@p (- a36bb@lev '1))) (a36b1@quasi a36c9@q a36bb@lev)))) a36c6@ls/false) ((lambda (a36cc@t) ((lambda (a36ce@ls/false) (if a36ce@ls/false (apply (lambda (a36d0@p a36d1@q) (if (= a36bb@lev '0) (a36ab@quasiappend a36d0@p (a36b1@quasi a36d1@q a36bb@lev)) (a36a9@quasicons (a36a9@quasicons (a368b@datum 'unquote-splicing) (a36b1@quasi a36d0@p (- a36bb@lev '1))) (a36b1@quasi a36d1@q a36bb@lev)))) a36ce@ls/false) ((lambda (a36d4@t) ((lambda (a36d6@ls/false) (if a36d6@ls/false (apply (lambda (a36d8@p) (a36a9@quasicons (a368b@datum 'quasiquote) (a36b1@quasi (list a36d8@p) (+ a36bb@lev '1)))) a36d6@ls/false) ((lambda (a36da@t) ((lambda (a36dc@ls/false) (if a36dc@ls/false (apply (lambda (a36de@p a36df@q) (a36a9@quasicons (a36b1@quasi a36de@p a36bb@lev) (a36b1@quasi a36df@q a36bb@lev))) a36dc@ls/false) ((lambda (a36e2@t) ((lambda (a36e4@ls/false) (if (and a36e4@ls/false (apply (lambda (a36e6@x) (not (a2cb9@stx? a36e6@x))) a36e4@ls/false)) (apply (lambda (a36e8@x) (a36ad@quasivector (a36af@vquasi a36e8@x a36bb@lev))) a36e4@ls/false) ((lambda (a36ea@t) ((lambda (a36ec@ls/false) (if a36ec@ls/false (apply (lambda (a36ee@p) (list (a2e86@scheme-stx 'quote) a36ee@p)) a36ec@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a36ea@t))) (a2efc@syntax-dispatch a36ea@t 'any))) a36e2@t))) (a2efc@syntax-dispatch a36e2@t '#(vector each-any)))) a36da@t))) (a2efc@syntax-dispatch a36da@t '(any . any)))) a36d4@t))) (a2efc@syntax-dispatch a36d4@t '(#(scheme-id quasiquote) any)))) a36cc@t))) (a2efc@syntax-dispatch a36cc@t '((#(scheme-id unquote-splicing) . each-any) . any)))) a36c4@t))) (a2efc@syntax-dispatch a36c4@t '((#(scheme-id unquote) . each-any) . any)))) a36be@t))) (a2efc@syntax-dispatch a36be@t '(#(scheme-id unquote) any)))) a36ba@p))) (lambda (a36b2@x) ((lambda (a36b4@t) ((lambda (a36b6@ls/false) (if a36b6@ls/false (apply (lambda (a36b8@e) (a36b1@quasi a36b8@e '0)) a36b6@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a36b4@t))) (a2efc@syntax-dispatch a36b4@t '(_ any)))) a36b2@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! a2eec@quasisyntax-macro ((lambda () ((lambda (a378f@quasi) (begin (set! a378f@quasi (lambda (a37aa@p a37ab@lev) ((lambda (a37ae@t) ((lambda (a37b0@ls/false) (if a37b0@ls/false (apply (lambda (a37b2@p) (if (= a37ab@lev '0) ((lambda (a37b4@g) (values (list a37b4@g) (list a37b2@p) a37b4@g)) (gensym)) (call-with-values (lambda () (a378f@quasi a37b2@p (- a37ab@lev '1))) (lambda (a37bc@a37b7 a37bd@a37b9 a37be@a37bb) ((lambda (a37c2@p a37c3@rhs* a37c4@lhs*) (values a37c4@lhs* a37c3@rhs* (list 'unsyntax a37c2@p))) a37be@a37bb a37bd@a37b9 a37bc@a37b7))))) a37b0@ls/false) ((lambda (a37c8@t) ((lambda (a37ca@ls/false) (if (and a37ca@ls/false (apply (lambda () (= a37ab@lev '0)) a37ca@ls/false)) (apply (lambda () (a2fe5@syntax-violation '#f '"incorrect use of unsyntax" a37aa@p)) a37ca@ls/false) ((lambda (a37cc@t) ((lambda (a37ce@ls/false) (if a37ce@ls/false (apply (lambda (a37d0@p* a37d1@q) (call-with-values (lambda () (a378f@quasi a37d1@q a37ab@lev)) (lambda (a37da@a37d5 a37db@a37d7 a37dc@a37d9) ((lambda (a37e0@q a37e1@rhs* a37e2@lhs*) (if (= a37ab@lev '0) ((lambda (a37e6@g*) (values (append a37e6@g* a37e2@lhs*) (append a37d0@p* a37e1@rhs*) (append a37e6@g* a37e0@q))) (map (lambda (a37e8@x) (gensym)) a37d0@p*)) (call-with-values (lambda () (a378f@quasi a37d0@p* (- a37ab@lev '1))) (lambda (a37f0@a37eb a37f1@a37ed a37f2@a37ef) ((lambda (a37f6@p* a37f7@rhs2* a37f8@lhs2*) (values (append a37f8@lhs2* a37e2@lhs*) (append a37f7@rhs2* a37e1@rhs*) (cons (cons 'unsyntax a37f6@p*) a37e0@q))) a37f2@a37ef a37f1@a37ed a37f0@a37eb))))) a37dc@a37d9 a37db@a37d7 a37da@a37d5)))) a37ce@ls/false) ((lambda (a37fc@t) ((lambda (a37fe@ls/false) (if a37fe@ls/false (apply (lambda (a3800@p* a3801@q) (call-with-values (lambda () (a378f@quasi a3801@q a37ab@lev)) (lambda (a380a@a3805 a380b@a3807 a380c@a3809) ((lambda (a3810@q a3811@rhs* a3812@lhs*) (if (= a37ab@lev '0) ((lambda (a3816@g*) (values (append (map (lambda (a3818@g) (cons a3818@g '(...))) a3816@g*) a3812@lhs*) (append a3800@p* a3811@rhs*) (append (apply append (map (lambda (a381a@g) (cons a381a@g '(...))) a3816@g*)) a3810@q))) (map (lambda (a381c@x) (gensym)) a3800@p*)) (call-with-values (lambda () (a378f@quasi a3800@p* (- a37ab@lev '1))) (lambda (a3824@a381f a3825@a3821 a3826@a3823) ((lambda (a382a@p* a382b@rhs2* a382c@lhs2*) (values (append a382c@lhs2* a3812@lhs*) (append a382b@rhs2* a3811@rhs*) (cons (cons 'unsyntax-splicing a382a@p*) a3810@q))) a3826@a3823 a3825@a3821 a3824@a381f))))) a380c@a3809 a380b@a3807 a380a@a3805)))) a37fe@ls/false) ((lambda (a3830@t) ((lambda (a3832@ls/false) (if (and a3832@ls/false (apply (lambda () (= a37ab@lev '0)) a3832@ls/false)) (apply (lambda () (a2fe5@syntax-violation '#f '"incorrect use of unsyntax-splicing" a37aa@p)) a3832@ls/false) ((lambda (a3834@t) ((lambda (a3836@ls/false) (if a3836@ls/false (apply (lambda (a3838@p) (call-with-values (lambda () (a378f@quasi a3838@p (+ a37ab@lev '1))) (lambda (a3840@a383b a3841@a383d a3842@a383f) ((lambda (a3846@p a3847@rhs* a3848@lhs*) (values a3848@lhs* a3847@rhs* (list 'quasisyntax a3846@p))) a3842@a383f a3841@a383d a3840@a383b)))) a3836@ls/false) ((lambda (a384c@t) ((lambda (a384e@ls/false) (if a384e@ls/false (apply (lambda (a3850@p a3851@q) (call-with-values (lambda () (a378f@quasi a3850@p a37ab@lev)) (lambda (a3860@a3855 a3861@a3857 a3862@a3859) (call-with-values (lambda () (a378f@quasi a3851@q a37ab@lev)) (lambda (a3866@a385b a3867@a385d a3868@a385f) ((lambda (a386c@q a386d@rhs2* a386e@lhs2* a386f@p a3870@rhs* a3871@lhs*) (values (append a386e@lhs2* a3871@lhs*) (append a386d@rhs2* a3870@rhs*) (cons a386f@p a386c@q))) a3868@a385f a3867@a385d a3866@a385b a3862@a3859 a3861@a3857 a3860@a3855)))))) a384e@ls/false) ((lambda (a3878@t) ((lambda (a387a@ls/false) (if a387a@ls/false (apply (lambda (a387c@x*) (call-with-values (lambda () (a378f@quasi a387c@x* a37ab@lev)) (lambda (a3884@a387f a3885@a3881 a3886@a3883) ((lambda (a388a@x* a388b@rhs* a388c@lhs*) (values a388c@lhs* a388b@rhs* (list->vector a388a@x*))) a3886@a3883 a3885@a3881 a3884@a387f)))) a387a@ls/false) ((lambda (a3890@t) ((lambda (a3892@ls/false) (if a3892@ls/false (apply (lambda () (values '() '() a37aa@p)) a3892@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3890@t))) (a2efc@syntax-dispatch a3890@t '_))) a3878@t))) (a2efc@syntax-dispatch a3878@t '#(vector each-any)))) a384c@t))) (a2efc@syntax-dispatch a384c@t '(any . any)))) a3834@t))) (a2efc@syntax-dispatch a3834@t '(#(scheme-id quasisyntax) any)))) a3830@t))) (a2efc@syntax-dispatch a3830@t '#(scheme-id unsyntax-splicing)))) a37fc@t))) (a2efc@syntax-dispatch a37fc@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) a37cc@t))) (a2efc@syntax-dispatch a37cc@t '((#(scheme-id unsyntax) . each-any) . any)))) a37c8@t))) (a2efc@syntax-dispatch a37c8@t '#(scheme-id unsyntax)))) a37ae@t))) (a2efc@syntax-dispatch a37ae@t '(#(scheme-id unsyntax) any)))) a37aa@p))) (lambda (a3790@x) ((lambda (a3792@t) ((lambda (a3794@ls/false) (if a3794@ls/false (apply (lambda (a3796@e) (call-with-values (lambda () (a378f@quasi a3796@e '0)) (lambda (a379e@a3799 a379f@a379b a37a0@a379d) ((lambda (a37a4@v a37a5@rhs* a37a6@lhs*) (a2eb2@bless (list 'syntax-case (cons 'list a37a5@rhs*) '() (list a37a6@lhs* (list 'syntax a37a4@v))))) a37a0@a379d a379f@a379b a379e@a3799)))) a3794@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3792@t))) (a2efc@syntax-dispatch a3792@t '(_ any)))) a3790@x)))) '#f)))) (set! a2eee@define-struct-macro (lambda (a3894@stx) (a2fe5@syntax-violation '#f '"define-struct not supported" a3894@stx))) (set! a2ef0@define-record-type-macro (lambda (a3896@x) ((lambda (a3899@id a389b@get-record-name a389d@get-record-constructor-name a389f@get-record-predicate-name a38a1@get-clause a38a3@foo-rtd-code a38a5@parent-rtd-code a38a7@parent-rcd-code a38a9@foo-rcd-code a38ab@get-protocol-code a38ad@get-fields a38af@get-mutator-indices a38b1@get-mutators a38b3@get-accessors a38b5@enumerate a38b7@do-define-record a38b9@verify-clauses) (begin (set! a3899@id (lambda (a3a8c@ctxt . a3a8e@str*) (a2fe9@datum->syntax a3a8c@ctxt (string->symbol (apply string-append (map (lambda (a3a90@x) (if (symbol? a3a90@x) (symbol->string a3a90@x) (if (string? a3a90@x) a3a90@x (assertion-violation 'define-record-type '"BUG")))) a3a8e@str*)))))) (set! a389b@get-record-name (lambda (a3a7a@spec) ((lambda (a3a7c@t) ((lambda (a3a7e@ls/false) (if a3a7e@ls/false (apply (lambda (a3a80@foo a3a81@make-foo a3a82@foo?) a3a80@foo) a3a7e@ls/false) ((lambda (a3a86@t) ((lambda (a3a88@ls/false) (if a3a88@ls/false (apply (lambda (a3a8a@foo) a3a8a@foo) a3a88@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a86@t))) (a2efc@syntax-dispatch a3a86@t 'any))) a3a7c@t))) (a2efc@syntax-dispatch a3a7c@t '(any any any)))) a3a7a@spec))) (set! a389d@get-record-constructor-name (lambda (a3a66@spec) ((lambda (a3a68@t) ((lambda (a3a6a@ls/false) (if a3a6a@ls/false (apply (lambda (a3a6c@foo a3a6d@make-foo a3a6e@foo?) a3a6d@make-foo) a3a6a@ls/false) ((lambda (a3a72@t) ((lambda (a3a74@ls/false) (if (and a3a74@ls/false (apply (lambda (a3a76@foo) (a2cf1@id? a3a76@foo)) a3a74@ls/false)) (apply (lambda (a3a78@foo) (a3899@id a3a78@foo '"make-" (a2d07@stx->datum a3a78@foo))) a3a74@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a72@t))) (a2efc@syntax-dispatch a3a72@t 'any))) a3a68@t))) (a2efc@syntax-dispatch a3a68@t '(any any any)))) a3a66@spec))) (set! a389f@get-record-predicate-name (lambda (a3a52@spec) ((lambda (a3a54@t) ((lambda (a3a56@ls/false) (if a3a56@ls/false (apply (lambda (a3a58@foo a3a59@make-foo a3a5a@foo?) a3a5a@foo?) a3a56@ls/false) ((lambda (a3a5e@t) ((lambda (a3a60@ls/false) (if (and a3a60@ls/false (apply (lambda (a3a62@foo) (a2cf1@id? a3a62@foo)) a3a60@ls/false)) (apply (lambda (a3a64@foo) (a3899@id a3a64@foo (a2d07@stx->datum a3a64@foo) '"?")) a3a60@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a5e@t))) (a2efc@syntax-dispatch a3a5e@t 'any))) a3a54@t))) (a2efc@syntax-dispatch a3a54@t '(any any any)))) a3a52@spec))) (set! a38a1@get-clause (lambda (a3a40@id a3a41@ls) ((lambda (a3a44@t) ((lambda (a3a46@ls/false) (if a3a46@ls/false (apply (lambda () '#f) a3a46@ls/false) ((lambda (a3a48@t) ((lambda (a3a4a@ls/false) (if a3a4a@ls/false (apply (lambda (a3a4c@x a3a4d@rest a3a4e@ls) (if (a2cf9@free-id=? (a2eb2@bless a3a40@id) a3a4c@x) (cons a3a4c@x a3a4d@rest) (a38a1@get-clause a3a40@id a3a4e@ls))) a3a4a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a48@t))) (a2efc@syntax-dispatch a3a48@t '((any . any) . any)))) a3a44@t))) (a2efc@syntax-dispatch a3a44@t '()))) a3a41@ls))) (set! a38a3@foo-rtd-code (lambda (a39ee@name a39ef@clause* a39f0@parent-rtd-code) ((lambda (a39f5@convert-field-spec*) (begin (set! a39f5@convert-field-spec* (lambda (a3a26@ls) (list->vector (map (lambda (a3a28@x) ((lambda (a3a2a@t) ((lambda (a3a2c@ls/false) (if a3a2c@ls/false (apply (lambda (a3a2e@name a3a2f@rest) (list 'mutable a3a2e@name)) a3a2c@ls/false) ((lambda (a3a32@t) ((lambda (a3a34@ls/false) (if a3a34@ls/false (apply (lambda (a3a36@name a3a37@rest) (list 'immutable a3a36@name)) a3a34@ls/false) ((lambda (a3a3a@t) ((lambda (a3a3c@ls/false) (if a3a3c@ls/false (apply (lambda (a3a3e@name) (list 'immutable a3a3e@name)) a3a3c@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a3a@t))) (a2efc@syntax-dispatch a3a3a@t 'any))) a3a32@t))) (a2efc@syntax-dispatch a3a32@t '(#(scheme-id immutable) any . any)))) a3a2a@t))) (a2efc@syntax-dispatch a3a2a@t '(#(scheme-id mutable) any . any)))) a3a28@x)) a3a26@ls)))) ((lambda (a39f6@uid-code a39f7@sealed? a39f8@opaque? a39f9@fields) (a2eb2@bless (list 'make-record-type-descriptor (list 'quote a39ee@name) a39f0@parent-rtd-code a39f6@uid-code a39f7@sealed? a39f8@opaque? a39f9@fields))) ((lambda (a39fe@t) ((lambda (a3a00@ls/false) (if a3a00@ls/false (apply (lambda () (list 'quote (gensym))) a3a00@ls/false) ((lambda (a3a02@t) ((lambda (a3a04@ls/false) (if a3a04@ls/false (apply (lambda (a3a06@uid) (list 'quote a3a06@uid)) a3a04@ls/false) ((lambda (a3a08@t) ((lambda (a3a0a@ls/false) (if a3a0a@ls/false (apply (lambda () '#f) a3a0a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a08@t))) (a2efc@syntax-dispatch a3a08@t '_))) a3a02@t))) (a2efc@syntax-dispatch a3a02@t '(_ any)))) a39fe@t))) (a2efc@syntax-dispatch a39fe@t '(_)))) (a38a1@get-clause 'nongenerative a39ef@clause*)) ((lambda (a3a0c@t) ((lambda (a3a0e@ls/false) (if a3a0e@ls/false (apply (lambda () '#t) a3a0e@ls/false) ((lambda (a3a10@t) ((lambda (a3a12@ls/false) (if a3a12@ls/false (apply (lambda () '#f) a3a12@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a10@t))) (a2efc@syntax-dispatch a3a10@t '_))) a3a0c@t))) (a2efc@syntax-dispatch a3a0c@t '(_ #(atom #t))))) (a38a1@get-clause 'sealed a39ef@clause*)) ((lambda (a3a14@t) ((lambda (a3a16@ls/false) (if a3a16@ls/false (apply (lambda () '#t) a3a16@ls/false) ((lambda (a3a18@t) ((lambda (a3a1a@ls/false) (if a3a1a@ls/false (apply (lambda () '#f) a3a1a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a18@t))) (a2efc@syntax-dispatch a3a18@t '_))) a3a14@t))) (a2efc@syntax-dispatch a3a14@t '(_ #(atom #t))))) (a38a1@get-clause 'opaque a39ef@clause*)) ((lambda (a3a1c@t) ((lambda (a3a1e@ls/false) (if a3a1e@ls/false (apply (lambda (a3a20@field-spec*) (list 'quote (a39f5@convert-field-spec* a3a20@field-spec*))) a3a1e@ls/false) ((lambda (a3a22@t) ((lambda (a3a24@ls/false) (if a3a24@ls/false (apply (lambda () ''#()) a3a24@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a22@t))) (a2efc@syntax-dispatch a3a22@t '_))) a3a1c@t))) (a2efc@syntax-dispatch a3a1c@t '(_ . each-any)))) (a38a1@get-clause 'fields a39ef@clause*))))) '#f))) (set! a38a5@parent-rtd-code (lambda (a39d6@clause*) ((lambda (a39d8@t) ((lambda (a39da@ls/false) (if a39da@ls/false (apply (lambda (a39dc@name) (list 'record-type-descriptor a39dc@name)) a39da@ls/false) ((lambda (a39de@t) ((lambda (a39e0@ls/false) (if a39e0@ls/false (apply (lambda () ((lambda (a39e2@t) ((lambda (a39e4@ls/false) (if a39e4@ls/false (apply (lambda (a39e6@rtd a39e7@rcd) a39e6@rtd) a39e4@ls/false) ((lambda (a39ea@t) ((lambda (a39ec@ls/false) (if a39ec@ls/false (apply (lambda () '#f) a39ec@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a39ea@t))) (a2efc@syntax-dispatch a39ea@t '#(atom #f)))) a39e2@t))) (a2efc@syntax-dispatch a39e2@t '(_ any any)))) (a38a1@get-clause 'parent-rtd a39d6@clause*))) a39e0@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a39de@t))) (a2efc@syntax-dispatch a39de@t '#(atom #f)))) a39d8@t))) (a2efc@syntax-dispatch a39d8@t '(_ any)))) (a38a1@get-clause 'parent a39d6@clause*)))) (set! a38a7@parent-rcd-code (lambda (a39be@clause*) ((lambda (a39c0@t) ((lambda (a39c2@ls/false) (if a39c2@ls/false (apply (lambda (a39c4@name) (list 'record-constructor-descriptor a39c4@name)) a39c2@ls/false) ((lambda (a39c6@t) ((lambda (a39c8@ls/false) (if a39c8@ls/false (apply (lambda () ((lambda (a39ca@t) ((lambda (a39cc@ls/false) (if a39cc@ls/false (apply (lambda (a39ce@rtd a39cf@rcd) a39cf@rcd) a39cc@ls/false) ((lambda (a39d2@t) ((lambda (a39d4@ls/false) (if a39d4@ls/false (apply (lambda () '#f) a39d4@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a39d2@t))) (a2efc@syntax-dispatch a39d2@t '#(atom #f)))) a39ca@t))) (a2efc@syntax-dispatch a39ca@t '(_ any any)))) (a38a1@get-clause 'parent-rtd a39be@clause*))) a39c8@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a39c6@t))) (a2efc@syntax-dispatch a39c6@t '#(atom #f)))) a39c0@t))) (a2efc@syntax-dispatch a39c0@t '(_ any)))) (a38a1@get-clause 'parent a39be@clause*)))) (set! a38a9@foo-rcd-code (lambda (a39b6@clause* a39b7@foo-rtd a39b8@protocol a39b9@parent-rcd-code) (list 'make-record-constructor-descriptor a39b7@foo-rtd a39b9@parent-rcd-code a39b8@protocol))) (set! a38ab@get-protocol-code (lambda (a39aa@clause*) ((lambda (a39ac@t) ((lambda (a39ae@ls/false) (if a39ae@ls/false (apply (lambda (a39b0@expr) a39b0@expr) a39ae@ls/false) ((lambda (a39b2@t) ((lambda (a39b4@ls/false) (if a39b4@ls/false (apply (lambda () '#f) a39b4@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a39b2@t))) (a2efc@syntax-dispatch a39b2@t '_))) a39ac@t))) (a2efc@syntax-dispatch a39ac@t '(_ any)))) (a38a1@get-clause 'protocol a39aa@clause*)))) (set! a38ad@get-fields (lambda (a3998@clause*) ((lambda (a399a@t) ((lambda (a399c@ls/false) (if a399c@ls/false (apply (lambda () '()) a399c@ls/false) ((lambda (a399e@t) ((lambda (a39a0@ls/false) (if a39a0@ls/false (apply (lambda (a39a2@f*) a39a2@f*) a39a0@ls/false) ((lambda (a39a4@t) ((lambda (a39a6@ls/false) (if a39a6@ls/false (apply (lambda (a39a8@rest) (a38ad@get-fields a39a8@rest)) a39a6@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a39a4@t))) (a2efc@syntax-dispatch a39a4@t '(_ . any)))) a399e@t))) (a2efc@syntax-dispatch a399e@t '((#(scheme-id fields) . each-any) . _)))) a399a@t))) (a2efc@syntax-dispatch a399a@t '()))) a3998@clause*))) (set! a38af@get-mutator-indices (lambda (a3980@fields) ((letrec ((a3982@f (lambda (a3984@fields a3985@i) ((lambda (a3988@t) ((lambda (a398a@ls/false) (if a398a@ls/false (apply (lambda () '()) a398a@ls/false) ((lambda (a398c@t) ((lambda (a398e@ls/false) (if a398e@ls/false (apply (lambda (a3990@rest) (cons a3985@i (a3982@f a3990@rest (+ a3985@i '1)))) a398e@ls/false) ((lambda (a3992@t) ((lambda (a3994@ls/false) (if a3994@ls/false (apply (lambda (a3996@rest) (a3982@f a3996@rest (+ a3985@i '1))) a3994@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3992@t))) (a2efc@syntax-dispatch a3992@t '(_ . any)))) a398c@t))) (a2efc@syntax-dispatch a398c@t '((#(scheme-id mutable) . _) . any)))) a3988@t))) (a2efc@syntax-dispatch a3988@t '()))) a3984@fields)))) a3982@f) a3980@fields '0))) (set! a38b1@get-mutators (lambda (a3956@foo a3957@fields) ((lambda (a395b@gen-name) (begin (set! a395b@gen-name (lambda (a397e@x) (a2fe9@datum->syntax a3956@foo (string->symbol (string-append (symbol->string (a2feb@syntax->datum a3956@foo)) '"-" (symbol->string (a2feb@syntax->datum a397e@x)) '"-set!"))))) ((letrec ((a395c@f (lambda (a395e@fields) ((lambda (a3960@t) ((lambda (a3962@ls/false) (if a3962@ls/false (apply (lambda () '()) a3962@ls/false) ((lambda (a3964@t) ((lambda (a3966@ls/false) (if a3966@ls/false (apply (lambda (a3968@name a3969@accessor a396a@mutator a396b@rest) (cons a396a@mutator (a395c@f a396b@rest))) a3966@ls/false) ((lambda (a3970@t) ((lambda (a3972@ls/false) (if a3972@ls/false (apply (lambda (a3974@name a3975@rest) (cons (a395b@gen-name a3974@name) (a395c@f a3975@rest))) a3972@ls/false) ((lambda (a3978@t) ((lambda (a397a@ls/false) (if a397a@ls/false (apply (lambda (a397c@rest) (a395c@f a397c@rest)) a397a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3978@t))) (a2efc@syntax-dispatch a3978@t '(_ . any)))) a3970@t))) (a2efc@syntax-dispatch a3970@t '((#(scheme-id mutable) any) . any)))) a3964@t))) (a2efc@syntax-dispatch a3964@t '((#(scheme-id mutable) any any any) . any)))) a3960@t))) (a2efc@syntax-dispatch a3960@t '()))) a395e@fields)))) a395c@f) a3957@fields))) '#f))) (set! a38b3@get-accessors (lambda (a3912@foo a3913@fields) ((lambda (a3917@gen-name) (begin (set! a3917@gen-name (lambda (a3954@x) (a2fe9@datum->syntax a3912@foo (string->symbol (string-append (symbol->string (a2feb@syntax->datum a3912@foo)) '"-" (symbol->string (a2feb@syntax->datum a3954@x))))))) (map (lambda (a3918@field) ((lambda (a391a@t) ((lambda (a391c@ls/false) (if (and a391c@ls/false (apply (lambda (a391e@name a391f@accessor a3920@mutator) (a2cf1@id? a391f@accessor)) a391c@ls/false)) (apply (lambda (a3924@name a3925@accessor a3926@mutator) a3925@accessor) a391c@ls/false) ((lambda (a392a@t) ((lambda (a392c@ls/false) (if (and a392c@ls/false (apply (lambda (a392e@name a392f@accessor) (a2cf1@id? a392f@accessor)) a392c@ls/false)) (apply (lambda (a3932@name a3933@accessor) a3933@accessor) a392c@ls/false) ((lambda (a3936@t) ((lambda (a3938@ls/false) (if (and a3938@ls/false (apply (lambda (a393a@name) (a2cf1@id? a393a@name)) a3938@ls/false)) (apply (lambda (a393c@name) (a3917@gen-name a393c@name)) a3938@ls/false) ((lambda (a393e@t) ((lambda (a3940@ls/false) (if (and a3940@ls/false (apply (lambda (a3942@name) (a2cf1@id? a3942@name)) a3940@ls/false)) (apply (lambda (a3944@name) (a3917@gen-name a3944@name)) a3940@ls/false) ((lambda (a3946@t) ((lambda (a3948@ls/false) (if (and a3948@ls/false (apply (lambda (a394a@name) (a2cf1@id? a394a@name)) a3948@ls/false)) (apply (lambda (a394c@name) (a3917@gen-name a394c@name)) a3948@ls/false) ((lambda (a394e@t) ((lambda (a3950@ls/false) (if a3950@ls/false (apply (lambda (a3952@others) (a2fe5@syntax-violation '#f '"invalid field spec" a3918@field)) a3950@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a394e@t))) (a2efc@syntax-dispatch a394e@t 'any))) a3946@t))) (a2efc@syntax-dispatch a3946@t 'any))) a393e@t))) (a2efc@syntax-dispatch a393e@t '(#(scheme-id immutable) any)))) a3936@t))) (a2efc@syntax-dispatch a3936@t '(#(scheme-id mutable) any)))) a392a@t))) (a2efc@syntax-dispatch a392a@t '(#(scheme-id immutable) any any)))) a391a@t))) (a2efc@syntax-dispatch a391a@t '(#(scheme-id mutable) any any any)))) a3918@field)) a3913@fields))) '#f))) (set! a38b5@enumerate (lambda (a390a@ls) ((letrec ((a390c@f (lambda (a390e@ls a390f@i) (if (null? a390e@ls) '() (cons a390f@i (a390c@f (cdr a390e@ls) (+ a390f@i '1))))))) a390c@f) a390a@ls '0))) (set! a38b7@do-define-record (lambda (a38e2@namespec a38e3@clause*) ((lambda (a38e6@foo) ((lambda (a38e8@foo-rtd) ((lambda (a38ea@foo-rcd) ((lambda (a38ec@protocol) ((lambda (a38ee@make-foo) ((lambda (a38f0@fields) ((lambda (a38f2@idx*) ((lambda (a38f4@foo-x*) ((lambda (a38f6@set-foo-x!*) ((lambda (a38f8@set-foo-idx*) ((lambda (a38fa@foo?) ((lambda (a38fc@foo-rtd-code) ((lambda (a38fe@foo-rcd-code) ((lambda (a3900@protocol-code) ((lambda () (a2eb2@bless (cons 'begin (cons (list 'define a38e8@foo-rtd a38fc@foo-rtd-code) (cons (list 'define a38ec@protocol a3900@protocol-code) (cons (list 'define a38ea@foo-rcd a38fe@foo-rcd-code) (cons (list 'define-syntax a38e6@foo (list 'list ''$rtd (list 'syntax a38e8@foo-rtd) (list 'syntax a38ea@foo-rcd))) (cons (list 'define a38fa@foo? (list 'record-predicate a38e8@foo-rtd)) (cons (list 'define a38ee@make-foo (list 'record-constructor a38ea@foo-rcd)) (append (map (lambda (a3902@foo-x a3903@idx) (list 'define a3902@foo-x (list 'record-accessor a38e8@foo-rtd a3903@idx))) a38f4@foo-x* a38f2@idx*) (map (lambda (a3906@set-foo-x! a3907@idx) (list 'define a3906@set-foo-x! (list 'record-mutator a38e8@foo-rtd a3907@idx))) a38f6@set-foo-x!* a38f8@set-foo-idx*))))))))))))) (a38ab@get-protocol-code a38e3@clause*))) (a38a9@foo-rcd-code a38e3@clause* a38e8@foo-rtd a38ec@protocol (a38a7@parent-rcd-code a38e3@clause*)))) (a38a3@foo-rtd-code a38e6@foo a38e3@clause* (a38a5@parent-rtd-code a38e3@clause*)))) (a389f@get-record-predicate-name a38e2@namespec))) (a38af@get-mutator-indices a38f0@fields))) (a38b1@get-mutators a38e6@foo a38f0@fields))) (a38b3@get-accessors a38e6@foo a38f0@fields))) (a38b5@enumerate a38f0@fields))) (a38ad@get-fields a38e3@clause*))) (a389d@get-record-constructor-name a38e2@namespec))) (gensym))) (gensym))) (gensym))) (a389b@get-record-name a38e2@namespec)))) (set! a38b9@verify-clauses (lambda (a38c2@x a38c3@cls*) ((lambda (a38c7@valid-kwds a38c9@free-id-member?) (begin (set! a38c7@valid-kwds (map a2eb2@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! a38c9@free-id-member? (lambda (a38de@x a38df@ls) (and (pair? a38df@ls) (or (a2cf9@free-id=? a38de@x (car a38df@ls)) (a38c9@free-id-member? a38de@x (cdr a38df@ls)))))) ((letrec ((a38ca@f (lambda (a38cc@cls* a38cd@seen*) (if (not (null? a38cc@cls*)) ((lambda (a38d0@t) ((lambda (a38d2@ls/false) (if a38d2@ls/false (apply (lambda (a38d4@kwd a38d5@rest) (if (or (not (a2cf1@id? a38d4@kwd)) (not (a38c9@free-id-member? a38d4@kwd a38c7@valid-kwds))) (a2fe5@syntax-violation '#f '"not a valid define-record-type keyword" a38d4@kwd) (if (a2cff@bound-id-member? a38d4@kwd a38cd@seen*) (a2fe5@syntax-violation '#f '"duplicate use of keyword " a38c2@x a38d4@kwd) (a38ca@f (cdr a38cc@cls*) (cons a38d4@kwd a38cd@seen*))))) a38d2@ls/false) ((lambda (a38d8@t) ((lambda (a38da@ls/false) (if a38da@ls/false (apply (lambda (a38dc@cls) (a2fe5@syntax-violation '#f '"malformed define-record-type clause" a38dc@cls)) a38da@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a38d8@t))) (a2efc@syntax-dispatch a38d8@t 'any))) a38d0@t))) (a2efc@syntax-dispatch a38d0@t '(any . any)))) (car a38cc@cls*)) (void))))) a38ca@f) a38c3@cls* '()))) '#f '#f))) ((lambda (a38ba@t) ((lambda (a38bc@ls/false) (if a38bc@ls/false (apply (lambda (a38be@namespec a38bf@clause*) (begin (a38b9@verify-clauses a3896@x a38bf@clause*) (a38b7@do-define-record a38be@namespec a38bf@clause*))) a38bc@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a38ba@t))) (a2efc@syntax-dispatch a38ba@t '(_ any . each-any)))) a3896@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a2ef2@define-condition-type-macro (lambda (a3a92@x) ((lambda (a3a95@mkname) (begin (set! a3a95@mkname (lambda (a3ac2@name a3ac3@suffix) (a2fe9@datum->syntax a3ac2@name (string->symbol (string-append (symbol->string (a2feb@syntax->datum a3ac2@name)) a3ac3@suffix))))) ((lambda (a3a96@t) ((lambda (a3a98@ls/false) (if (and a3a98@ls/false (apply (lambda (a3a9a@ctxt a3a9b@name a3a9c@super a3a9d@constructor a3a9e@predicate a3a9f@field* a3aa0@accessor*) (and (a2cf1@id? a3a9b@name) (a2cf1@id? a3a9c@super) (a2cf1@id? a3a9d@constructor) (a2cf1@id? a3a9e@predicate) (for-all a2cf1@id? a3a9f@field*) (for-all a2cf1@id? a3aa0@accessor*))) a3a98@ls/false)) (apply (lambda (a3aa8@ctxt a3aa9@name a3aaa@super a3aab@constructor a3aac@predicate a3aad@field* a3aae@accessor*) ((lambda (a3ab6@aux-accessor*) (a2eb2@bless (cons 'begin (cons (cons 'define-record-type (cons (list a3aa9@name a3aab@constructor (gensym)) (cons (list 'parent a3aaa@super) (cons (cons 'fields (map (lambda (a3ab8@field a3ab9@aux) (list 'immutable a3ab8@field a3ab9@aux)) a3aad@field* a3ab6@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define a3aac@predicate (list 'condition-predicate (list 'record-type-descriptor a3aa9@name))) (map (lambda (a3abc@accessor a3abd@aux) (list 'define a3abc@accessor (list 'condition-accessor (list 'record-type-descriptor a3aa9@name) a3abd@aux))) a3aae@accessor* a3ab6@aux-accessor*)))))) (map (lambda (a3ac0@x) (gensym)) a3aae@accessor*))) a3a98@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3a96@t))) (a2efc@syntax-dispatch a3a96@t '(any any any any any . #(each (any any)))))) a3a92@x))) '#f))) (set! a2ef4@incorrect-usage-macro (lambda (a3ac6@e) (a2fe5@syntax-violation '#f '"incorrect usage of auxiliary keyword" a3ac6@e))) (set! a2ef6@parameterize-macro (lambda (a3ac8@e) ((lambda (a3aca@t) ((lambda (a3acc@ls/false) (if a3acc@ls/false (apply (lambda (a3ace@b a3acf@b*) (a2eb2@bless (cons 'let (cons '() (cons a3ace@b a3acf@b*))))) a3acc@ls/false) ((lambda (a3ad2@t) ((lambda (a3ad4@ls/false) (if a3ad4@ls/false (apply (lambda (a3ad6@olhs* a3ad7@orhs* a3ad8@b a3ad9@b*) ((lambda (a3ade@lhs* a3adf@rhs*) (a2eb2@bless (cons (list 'lambda (append a3ade@lhs* a3adf@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (a3ae2@lhs a3ae3@rhs) (list 'let (list (list 't (list a3ae2@lhs))) (list a3ae2@lhs a3ae3@rhs) (cons 'set! (cons a3ae3@rhs '(t))))) a3ade@lhs* a3adf@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons a3ad8@b a3ad9@b*))) '(swap)))))) (append a3ad6@olhs* a3ad7@orhs*)))) (a2fd3@generate-temporaries a3ad6@olhs*) (a2fd3@generate-temporaries a3ad7@orhs*))) a3ad4@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3ad2@t))) (a2efc@syntax-dispatch a3ad2@t '(_ #(each (any any)) any . each-any)))) a3aca@t))) (a2efc@syntax-dispatch a3aca@t '(_ () any . each-any)))) a3ac8@e))) (set! a2ef8@foreign-call-transformer (lambda (a3ae6@e a3ae7@r a3ae8@mr) ((lambda (a3aec@t) ((lambda (a3aee@ls/false) (if a3aee@ls/false (apply (lambda (a3af0@name a3af1@arg*) (cons 'foreign-call (cons (a2f1e@chi-expr a3af0@name a3ae7@r a3ae8@mr) (a2f1a@chi-expr* a3af1@arg* a3ae7@r a3ae8@mr)))) a3aee@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3aec@t))) (a2efc@syntax-dispatch a3aec@t '(_ any . each-any)))) a3ae6@e))) (set! a2efa@convert-pattern (lambda (a3af4@pattern a3af5@keys) ((lambda (a3af9@cvt* a3afb@cvt) (begin (set! a3af9@cvt* (lambda (a3b98@p* a3b99@n a3b9a@ids) (if (null? a3b98@p*) (values '() a3b9a@ids) (call-with-values (lambda () (a3af9@cvt* (cdr a3b98@p*) a3b99@n a3b9a@ids)) (lambda (a3ba2@a3b9f a3ba3@a3ba1) ((lambda (a3ba6@ids a3ba7@y) (call-with-values (lambda () (a3afb@cvt (car a3b98@p*) a3b99@n a3ba6@ids)) (lambda (a3bae@a3bab a3baf@a3bad) ((lambda (a3bb2@ids a3bb3@x) (values (cons a3bb3@x a3ba7@y) a3bb2@ids)) a3baf@a3bad a3bae@a3bab)))) a3ba3@a3ba1 a3ba2@a3b9f)))))) (set! a3afb@cvt (lambda (a3afc@p a3afd@n a3afe@ids) ((lambda (a3b02@t) ((lambda (a3b04@ls/false) (if (and a3b04@ls/false (apply (lambda (a3b06@id) (a2cf1@id? a3b06@id)) a3b04@ls/false)) (apply (lambda (a3b08@id) (if (a2cff@bound-id-member? a3afc@p a3af5@keys) (values (vector 'free-id a3afc@p) a3afe@ids) (if (a2cf9@free-id=? a3afc@p (a2e86@scheme-stx '_)) (values '_ a3afe@ids) (values 'any (cons (cons a3afc@p a3afd@n) a3afe@ids))))) a3b04@ls/false) ((lambda (a3b0a@t) ((lambda (a3b0c@ls/false) (if (and a3b0c@ls/false (apply (lambda (a3b0e@p a3b0f@dots) (a2efe@ellipsis? a3b0f@dots)) a3b0c@ls/false)) (apply (lambda (a3b12@p a3b13@dots) (call-with-values (lambda () (a3afb@cvt a3b12@p (+ a3afd@n '1) a3afe@ids)) (lambda (a3b1a@a3b17 a3b1b@a3b19) ((lambda (a3b1e@ids a3b1f@p) (values (if (eq? a3b1f@p 'any) 'each-any (vector 'each a3b1f@p)) a3b1e@ids)) a3b1b@a3b19 a3b1a@a3b17)))) a3b0c@ls/false) ((lambda (a3b22@t) ((lambda (a3b24@ls/false) (if (and a3b24@ls/false (apply (lambda (a3b26@x a3b27@dots a3b28@ys a3b29@z) (a2efe@ellipsis? a3b27@dots)) a3b24@ls/false)) (apply (lambda (a3b2e@x a3b2f@dots a3b30@ys a3b31@z) (call-with-values (lambda () (a3afb@cvt a3b31@z a3afd@n a3afe@ids)) (lambda (a3b3a@a3b37 a3b3b@a3b39) ((lambda (a3b3e@ids a3b3f@z) (call-with-values (lambda () (a3af9@cvt* a3b30@ys a3afd@n a3b3e@ids)) (lambda (a3b46@a3b43 a3b47@a3b45) ((lambda (a3b4a@ids a3b4b@ys) (call-with-values (lambda () (a3afb@cvt a3b2e@x (+ a3afd@n '1) a3b4a@ids)) (lambda (a3b52@a3b4f a3b53@a3b51) ((lambda (a3b56@ids a3b57@x) (values (vector 'each+ a3b57@x (reverse a3b4b@ys) a3b3f@z) a3b56@ids)) a3b53@a3b51 a3b52@a3b4f)))) a3b47@a3b45 a3b46@a3b43)))) a3b3b@a3b39 a3b3a@a3b37)))) a3b24@ls/false) ((lambda (a3b5a@t) ((lambda (a3b5c@ls/false) (if a3b5c@ls/false (apply (lambda (a3b5e@x a3b5f@y) (call-with-values (lambda () (a3afb@cvt a3b5f@y a3afd@n a3afe@ids)) (lambda (a3b66@a3b63 a3b67@a3b65) ((lambda (a3b6a@ids a3b6b@y) (call-with-values (lambda () (a3afb@cvt a3b5e@x a3afd@n a3b6a@ids)) (lambda (a3b72@a3b6f a3b73@a3b71) ((lambda (a3b76@ids a3b77@x) (values (cons a3b77@x a3b6b@y) a3b76@ids)) a3b73@a3b71 a3b72@a3b6f)))) a3b67@a3b65 a3b66@a3b63)))) a3b5c@ls/false) ((lambda (a3b7a@t) ((lambda (a3b7c@ls/false) (if a3b7c@ls/false (apply (lambda () (values '() a3afe@ids)) a3b7c@ls/false) ((lambda (a3b7e@t) ((lambda (a3b80@ls/false) (if (and a3b80@ls/false (apply (lambda (a3b82@p) (not (a2cb9@stx? a3b82@p))) a3b80@ls/false)) (apply (lambda (a3b84@p) (call-with-values (lambda () (a3afb@cvt a3b84@p a3afd@n a3afe@ids)) (lambda (a3b8a@a3b87 a3b8b@a3b89) ((lambda (a3b8e@ids a3b8f@p) (values (vector 'vector a3b8f@p) a3b8e@ids)) a3b8b@a3b89 a3b8a@a3b87)))) a3b80@ls/false) ((lambda (a3b92@t) ((lambda (a3b94@ls/false) (if a3b94@ls/false (apply (lambda (a3b96@datum) (values (vector 'atom (a2d07@stx->datum a3b96@datum)) a3afe@ids)) a3b94@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3b92@t))) (a2efc@syntax-dispatch a3b92@t 'any))) a3b7e@t))) (a2efc@syntax-dispatch a3b7e@t '#(vector each-any)))) a3b7a@t))) (a2efc@syntax-dispatch a3b7a@t '()))) a3b5a@t))) (a2efc@syntax-dispatch a3b5a@t '(any . any)))) a3b22@t))) (a2efc@syntax-dispatch a3b22@t '(any any . #(each+ any () any))))) a3b0a@t))) (a2efc@syntax-dispatch a3b0a@t '(any any)))) a3b02@t))) (a2efc@syntax-dispatch a3b02@t 'any))) a3afc@p))) (a3afb@cvt a3af4@pattern '0 '()))) '#f '#f))) (set! a2efc@syntax-dispatch ((lambda () ((lambda (a3bb7@stx^ a3bb9@match-each a3bbb@match-each+ a3bbd@match-each-any a3bbf@match-empty a3bc1@combine a3bc3@match* a3bc5@match) (begin (set! a3bb7@stx^ (lambda (a3c92@e a3c93@m* a3c94@s* a3c95@ae*) (if (and (null? a3c93@m*) (null? a3c94@s*) (null? a3c95@ae*)) a3c92@e (a2cd9@mkstx a3c92@e a3c93@m* a3c94@s* a3c95@ae*)))) (set! a3bb9@match-each (lambda (a3c72@e a3c73@p a3c74@m* a3c75@s* a3c76@ae*) (if (pair? a3c72@e) ((lambda (a3c7c@first) (and a3c7c@first ((lambda (a3c7e@rest) (and a3c7e@rest (cons a3c7c@first a3c7e@rest))) (a3bb9@match-each (cdr a3c72@e) a3c73@p a3c74@m* a3c75@s* a3c76@ae*)))) (a3bc5@match (car a3c72@e) a3c73@p a3c74@m* a3c75@s* a3c76@ae* '())) (if (null? a3c72@e) '() (if (a2cb9@stx? a3c72@e) (and (not (a2c6f@top-marked? a3c74@m*)) (call-with-values (lambda () (a2cd7@join-wraps a3c74@m* a3c75@s* a3c76@ae* a3c72@e)) (lambda (a3c86@a3c81 a3c87@a3c83 a3c88@a3c85) ((lambda (a3c8c@ae* a3c8d@s* a3c8e@m*) (a3bb9@match-each (a2cbd@stx-expr a3c72@e) a3c73@p a3c8e@m* a3c8d@s* a3c8c@ae*)) a3c88@a3c85 a3c87@a3c83 a3c86@a3c81)))) (if (a2890@a27af@annotation? a3c72@e) (a3bb9@match-each (a2892@a27b3@annotation-expression a3c72@e) a3c73@p a3c74@m* a3c75@s* a3c76@ae*) '#f)))))) (set! a3bbb@match-each+ (lambda (a3c32@e a3c33@x-pat a3c34@y-pat a3c35@z-pat a3c36@m* a3c37@s* a3c38@ae* a3c39@r) ((letrec ((a3c42@f (lambda (a3c44@e a3c45@m* a3c46@s* a3c47@ae*) (if (pair? a3c44@e) (call-with-values (lambda () (a3c42@f (cdr a3c44@e) a3c45@m* a3c46@s* a3c47@ae*)) (lambda (a3c52@a3c4d a3c53@a3c4f a3c54@a3c51) ((lambda (a3c58@r a3c59@y-pat a3c5a@xr*) (if a3c58@r (if (null? a3c59@y-pat) ((lambda (a3c5e@xr) (if a3c5e@xr (values (cons a3c5e@xr a3c5a@xr*) a3c59@y-pat a3c58@r) (values '#f '#f '#f))) (a3bc5@match (car a3c44@e) a3c33@x-pat a3c45@m* a3c46@s* a3c47@ae* '())) (values '() (cdr a3c59@y-pat) (a3bc5@match (car a3c44@e) (car a3c59@y-pat) a3c45@m* a3c46@s* a3c47@ae* a3c58@r))) (values '#f '#f '#f))) a3c54@a3c51 a3c53@a3c4f a3c52@a3c4d))) (if (a2cb9@stx? a3c44@e) (if (a2c6f@top-marked? a3c45@m*) (values '() a3c34@y-pat (a3bc5@match a3c44@e a3c35@z-pat a3c45@m* a3c46@s* a3c47@ae* a3c39@r)) (call-with-values (lambda () (a2cd7@join-wraps a3c45@m* a3c46@s* a3c47@ae* a3c44@e)) (lambda (a3c66@a3c61 a3c67@a3c63 a3c68@a3c65) ((lambda (a3c6c@ae* a3c6d@s* a3c6e@m*) (a3c42@f (a2cbd@stx-expr a3c44@e) a3c6e@m* a3c6d@s* a3c6c@ae*)) a3c68@a3c65 a3c67@a3c63 a3c66@a3c61)))) (if (a2890@a27af@annotation? a3c44@e) (a3c42@f (a2892@a27b3@annotation-expression a3c44@e) a3c45@m* a3c46@s* a3c47@ae*) (values '() a3c34@y-pat (a3bc5@match a3c44@e a3c35@z-pat a3c45@m* a3c46@s* a3c47@ae* a3c39@r)))))))) a3c42@f) a3c32@e a3c36@m* a3c37@s* a3c38@ae*))) (set! a3bbd@match-each-any (lambda (a3c16@e a3c17@m* a3c18@s* a3c19@ae*) (if (pair? a3c16@e) ((lambda (a3c1e@l) (and a3c1e@l (cons (a3bb7@stx^ (car a3c16@e) a3c17@m* a3c18@s* a3c19@ae*) a3c1e@l))) (a3bbd@match-each-any (cdr a3c16@e) a3c17@m* a3c18@s* a3c19@ae*)) (if (null? a3c16@e) '() (if (a2cb9@stx? a3c16@e) (and (not (a2c6f@top-marked? a3c17@m*)) (call-with-values (lambda () (a2cd7@join-wraps a3c17@m* a3c18@s* a3c19@ae* a3c16@e)) (lambda (a3c26@a3c21 a3c27@a3c23 a3c28@a3c25) ((lambda (a3c2c@ae* a3c2d@s* a3c2e@m*) (a3bbd@match-each-any (a2cbd@stx-expr a3c16@e) a3c2e@m* a3c2d@s* a3c2c@ae*)) a3c28@a3c25 a3c27@a3c23 a3c26@a3c21)))) (if (a2890@a27af@annotation? a3c16@e) (a3bbd@match-each-any (a2892@a27b3@annotation-expression a3c16@e) a3c17@m* a3c18@s* a3c19@ae*) '#f)))))) (set! a3bbf@match-empty (lambda (a3c10@p a3c11@r) (if (null? a3c10@p) a3c11@r (if (eq? a3c10@p '_) a3c11@r (if (eq? a3c10@p 'any) (cons '() a3c11@r) (if (pair? a3c10@p) (a3bbf@match-empty (car a3c10@p) (a3bbf@match-empty (cdr a3c10@p) a3c11@r)) (if (eq? a3c10@p 'each-any) (cons '() a3c11@r) ((lambda (a3c14@t) (if (memv a3c14@t '(each)) (a3bbf@match-empty (vector-ref a3c10@p '1) a3c11@r) (if (memv a3c14@t '(each+)) (a3bbf@match-empty (vector-ref a3c10@p '1) (a3bbf@match-empty (reverse (vector-ref a3c10@p '2)) (a3bbf@match-empty (vector-ref a3c10@p '3) a3c11@r))) (if (memv a3c14@t '(free-id atom)) a3c11@r (if (memv a3c14@t '(scheme-id atom)) a3c11@r (if (memv a3c14@t '(vector)) (a3bbf@match-empty (vector-ref a3c10@p '1) a3c11@r) (assertion-violation 'syntax-dispatch '"invalid pattern" a3c10@p))))))) (vector-ref a3c10@p '0))))))))) (set! a3bc1@combine (lambda (a3c0c@r* a3c0d@r) (if (null? (car a3c0c@r*)) a3c0d@r (cons (map car a3c0c@r*) (a3bc1@combine (map cdr a3c0c@r*) a3c0d@r))))) (set! a3bc3@match* (lambda (a3be8@e a3be9@p a3bea@m* a3beb@s* a3bec@ae* a3bed@r) (if (null? a3be9@p) (and (null? a3be8@e) a3bed@r) (if (pair? a3be9@p) (and (pair? a3be8@e) (a3bc5@match (car a3be8@e) (car a3be9@p) a3bea@m* a3beb@s* a3bec@ae* (a3bc5@match (cdr a3be8@e) (cdr a3be9@p) a3bea@m* a3beb@s* a3bec@ae* a3bed@r))) (if (eq? a3be9@p 'each-any) ((lambda (a3bf4@l) (and a3bf4@l (cons a3bf4@l a3bed@r))) (a3bbd@match-each-any a3be8@e a3bea@m* a3beb@s* a3bec@ae*)) ((lambda (a3bf6@t) (if (memv a3bf6@t '(each)) (if (null? a3be8@e) (a3bbf@match-empty (vector-ref a3be9@p '1) a3bed@r) ((lambda (a3bf8@r*) (and a3bf8@r* (a3bc1@combine a3bf8@r* a3bed@r))) (a3bb9@match-each a3be8@e (vector-ref a3be9@p '1) a3bea@m* a3beb@s* a3bec@ae*))) (if (memv a3bf6@t '(free-id)) (and (symbol? a3be8@e) (a2c6f@top-marked? a3bea@m*) (a2cf9@free-id=? (a3bb7@stx^ a3be8@e a3bea@m* a3beb@s* a3bec@ae*) (vector-ref a3be9@p '1)) a3bed@r) (if (memv a3bf6@t '(scheme-id)) (and (symbol? a3be8@e) (a2c6f@top-marked? a3bea@m*) (a2cf9@free-id=? (a3bb7@stx^ a3be8@e a3bea@m* a3beb@s* a3bec@ae*) (a2e86@scheme-stx (vector-ref a3be9@p '1))) a3bed@r) (if (memv a3bf6@t '(each+)) (call-with-values (lambda () (a3bbb@match-each+ a3be8@e (vector-ref a3be9@p '1) (vector-ref a3be9@p '2) (vector-ref a3be9@p '3) a3bea@m* a3beb@s* a3bec@ae* a3bed@r)) (lambda (a3c00@a3bfb a3c01@a3bfd a3c02@a3bff) ((lambda (a3c06@r a3c07@y-pat a3c08@xr*) (and a3c06@r (null? a3c07@y-pat) (if (null? a3c08@xr*) (a3bbf@match-empty (vector-ref a3be9@p '1) a3c06@r) (a3bc1@combine a3c08@xr* a3c06@r)))) a3c02@a3bff a3c01@a3bfd a3c00@a3bfb))) (if (memv a3bf6@t '(atom)) (and (fast-equal? (vector-ref a3be9@p '1) (a2d05@strip a3be8@e a3bea@m*)) a3bed@r) (if (memv a3bf6@t '(vector)) (and (vector? a3be8@e) (a3bc5@match (vector->list a3be8@e) (vector-ref a3be9@p '1) a3bea@m* a3beb@s* a3bec@ae* a3bed@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" a3be9@p)))))))) (vector-ref a3be9@p '0))))))) (set! a3bc5@match (lambda (a3bca@e a3bcb@p a3bcc@m* a3bcd@s* a3bce@ae* a3bcf@r) (if (not a3bcf@r) '#f (if (eq? a3bcb@p '_) a3bcf@r (if (eq? a3bcb@p 'any) (cons (a3bb7@stx^ a3bca@e a3bcc@m* a3bcd@s* a3bce@ae*) a3bcf@r) (if (a2cb9@stx? a3bca@e) (and (not (a2c6f@top-marked? a3bcc@m*)) (call-with-values (lambda () (a2cd7@join-wraps a3bcc@m* a3bcd@s* a3bce@ae* a3bca@e)) (lambda (a3bdc@a3bd7 a3bdd@a3bd9 a3bde@a3bdb) ((lambda (a3be2@ae* a3be3@s* a3be4@m*) (a3bc5@match (a2cbd@stx-expr a3bca@e) a3bcb@p a3be4@m* a3be3@s* a3be2@ae* a3bcf@r)) a3bde@a3bdb a3bdd@a3bd9 a3bdc@a3bd7)))) (if (a2890@a27af@annotation? a3bca@e) (a3bc5@match (a2892@a27b3@annotation-expression a3bca@e) a3bcb@p a3bcc@m* a3bcd@s* a3bce@ae* a3bcf@r) (a3bc3@match* a3bca@e a3bcb@p a3bcc@m* a3bcd@s* a3bce@ae* a3bcf@r)))))))) (lambda (a3bc6@e a3bc7@p) (a3bc5@match a3bc6@e a3bc7@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! a2efe@ellipsis? (lambda (a3c9a@x) (and (a2cf1@id? a3c9a@x) (a2cf9@free-id=? a3c9a@x (a2e86@scheme-stx '...))))) (set! a2f00@underscore? (lambda (a3c9c@x) (and (a2cf1@id? a3c9c@x) (a2cf9@free-id=? a3c9c@x (a2e86@scheme-stx '_))))) (set! a2f02@verify-literals (lambda (a3c9e@lits a3c9f@expr) (for-each (lambda (a3ca2@x) (if (or (not (a2cf1@id? a3ca2@x)) (a2efe@ellipsis? a3ca2@x) (a2f00@underscore? a3ca2@x)) (a2fe5@syntax-violation '#f '"invalid literal" a3c9f@expr a3ca2@x) (void))) a3c9e@lits))) (set! a2f04@syntax-case-transformer ((lambda () ((lambda (a3ca5@build-dispatch-call a3ca7@invalid-ids-error a3ca9@gen-clause a3cab@gen-syntax-case) (begin (set! a3ca5@build-dispatch-call (lambda (a3d16@pvars a3d17@expr a3d18@y a3d19@r a3d1a@mr) ((lambda (a3d20@ids a3d21@levels) ((lambda (a3d24@labels a3d25@new-vars) ((lambda (a3d28@body) (list '(primitive apply) (a2c4d@a2b8d@build-lambda '#f a3d25@new-vars a3d28@body) a3d18@y)) (a2f1e@chi-expr (a2cdd@add-subst (a2cac@make-full-rib a3d20@ids a3d24@labels) a3d17@expr) (append (map (lambda (a3d2a@label a3d2b@var a3d2c@level) (cons a3d2a@label (a2d11@make-binding 'syntax (cons a3d2b@var a3d2c@level)))) a3d24@labels a3d25@new-vars (map cdr a3d16@pvars)) a3d19@r) a3d1a@mr))) (map a2c75@gen-label a3d20@ids) (map a2c71@gen-lexical a3d20@ids))) (map car a3d16@pvars) (map cdr a3d16@pvars)))) (set! a3ca7@invalid-ids-error (lambda (a3d0a@id* a3d0b@e a3d0c@class) ((letrec ((a3d10@find (lambda (a3d12@id* a3d13@ok*) (if (null? a3d12@id*) (a2fe5@syntax-violation '#f '"invalid syntax" a3d0b@e) (if (a2cf1@id? (car a3d12@id*)) (if (a2cff@bound-id-member? (car a3d12@id*) a3d13@ok*) (a2fe1@syntax-error (car a3d12@id*) '"duplicate " a3d0c@class) (a3d10@find (cdr a3d12@id*) (cons (car a3d12@id*) a3d13@ok*))) (a2fe1@syntax-error (car a3d12@id*) '"invalid " a3d0c@class)))))) a3d10@find) a3d0a@id* '()))) (set! a3ca9@gen-clause (lambda (a3ce2@x a3ce3@keys a3ce4@clauses a3ce5@r a3ce6@mr a3ce7@pat a3ce8@fender a3ce9@expr) (call-with-values (lambda () (a2efa@convert-pattern a3ce7@pat a3ce3@keys)) (lambda (a3cf6@a3cf3 a3cf7@a3cf5) ((lambda (a3cfa@pvars a3cfb@p) (if (not (a2cfd@distinct-bound-ids? (map car a3cfa@pvars))) (a3ca7@invalid-ids-error (map car a3cfa@pvars) a3ce7@pat '"pattern variable") (if (not (for-all (lambda (a3cfe@x) (not (a2efe@ellipsis? (car a3cfe@x)))) a3cfa@pvars)) (a2fe5@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" a3ce7@pat) ((lambda (a3d00@y) ((lambda (a3d02@test) ((lambda (a3d04@conseq) ((lambda (a3d06@altern) (list (a2c4d@a2b8d@build-lambda '#f (list a3d00@y) (list 'if a3d02@test a3d04@conseq a3d06@altern)) (list '(primitive syntax-dispatch) a3ce2@x (list 'quote a3cfb@p)))) (a3cab@gen-syntax-case a3ce2@x a3ce3@keys a3ce4@clauses a3ce5@r a3ce6@mr))) (a3ca5@build-dispatch-call a3cfa@pvars a3ce9@expr a3d00@y a3ce5@r a3ce6@mr))) (if (eq? a3ce8@fender '#t) a3d00@y ((lambda (a3d08@call) (list 'if a3d00@y a3d08@call (list 'quote '#f))) (a3ca5@build-dispatch-call a3cfa@pvars a3ce8@fender a3d00@y a3ce5@r a3ce6@mr))))) (a2c71@gen-lexical 'tmp))))) a3cf7@a3cf5 a3cf6@a3cf3))))) (set! a3cab@gen-syntax-case (lambda (a3cc0@x a3cc1@keys a3cc2@clauses a3cc3@r a3cc4@mr) (if (null? a3cc2@clauses) (list '(primitive syntax-error) a3cc0@x) ((lambda (a3cca@t) ((lambda (a3ccc@ls/false) (if a3ccc@ls/false (apply (lambda (a3cce@pat a3ccf@expr) (if (and (a2cf1@id? a3cce@pat) (not (a2cff@bound-id-member? a3cce@pat a3cc1@keys)) (not (a2efe@ellipsis? a3cce@pat))) (if (a2cf9@free-id=? a3cce@pat (a2e86@scheme-stx '_)) (a2f1e@chi-expr a3ccf@expr a3cc3@r a3cc4@mr) ((lambda (a3cd2@lab a3cd3@lex) ((lambda (a3cd6@body) (list (a2c4d@a2b8d@build-lambda '#f (list a3cd3@lex) a3cd6@body) a3cc0@x)) (a2f1e@chi-expr (a2cdd@add-subst (a2cac@make-full-rib (list a3cce@pat) (list a3cd2@lab)) a3ccf@expr) (cons (cons a3cd2@lab (a2d11@make-binding 'syntax (cons a3cd3@lex '0))) a3cc3@r) a3cc4@mr))) (a2c75@gen-label a3cce@pat) (a2c71@gen-lexical a3cce@pat))) (a3ca9@gen-clause a3cc0@x a3cc1@keys (cdr a3cc2@clauses) a3cc3@r a3cc4@mr a3cce@pat '#t a3ccf@expr))) a3ccc@ls/false) ((lambda (a3cd8@t) ((lambda (a3cda@ls/false) (if a3cda@ls/false (apply (lambda (a3cdc@pat a3cdd@fender a3cde@expr) (a3ca9@gen-clause a3cc0@x a3cc1@keys (cdr a3cc2@clauses) a3cc3@r a3cc4@mr a3cdc@pat a3cdd@fender a3cde@expr)) a3cda@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3cd8@t))) (a2efc@syntax-dispatch a3cd8@t '(any any any)))) a3cca@t))) (a2efc@syntax-dispatch a3cca@t '(any any)))) (car a3cc2@clauses))))) (lambda (a3cac@e a3cad@r a3cae@mr) ((lambda (a3cb2@t) ((lambda (a3cb4@ls/false) (if a3cb4@ls/false (apply (lambda (a3cb6@expr a3cb7@keys a3cb8@clauses) (begin (a2f02@verify-literals a3cb7@keys a3cac@e) ((lambda (a3cbc@x) ((lambda (a3cbe@body) (list (a2c4d@a2b8d@build-lambda '#f (list a3cbc@x) a3cbe@body) (a2f1e@chi-expr a3cb6@expr a3cad@r a3cae@mr))) (a3cab@gen-syntax-case a3cbc@x a3cb7@keys a3cb8@clauses a3cad@r a3cae@mr))) (a2c71@gen-lexical 'tmp)))) a3cb4@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3cb2@t))) (a2efc@syntax-dispatch a3cb2@t '(_ any each-any . each-any)))) a3cac@e)))) '#f '#f '#f '#f)))) (set! a2f06@ellipsis-map (lambda (a3d30@proc a3d31@ls . a3d34@ls*) ((lambda (a3d37@who) (begin (set! a3d37@who '...) (begin (if (not (list? a3d31@ls)) (assertion-violation a3d37@who '"not a list" a3d31@ls) (void)) (if (not (null? a3d34@ls*)) ((lambda (a3d38@n) (for-each (lambda (a3d3a@x) (begin (if (not (list? a3d3a@x)) (assertion-violation a3d37@who '"not a list" a3d3a@x) (void)) (if (not (= (length a3d3a@x) a3d38@n)) (assertion-violation a3d37@who '"length mismatch" a3d31@ls a3d3a@x) (void)))) a3d34@ls*)) (length a3d31@ls)) (void)) (apply map a3d30@proc a3d31@ls a3d34@ls*)))) '#f))) (set! a2f08@syntax-transformer ((lambda () ((lambda (a3d3d@gen-syntax a3d3f@gen-ref a3d41@gen-append a3d43@gen-mappend a3d45@gen-map a3d47@gen-cons a3d49@gen-vector a3d4b@regen) (begin (set! a3d3d@gen-syntax (lambda (a3db4@src a3db5@e a3db6@r a3db7@maps a3db8@ellipsis? a3db9@vec?) ((lambda (a3dc0@t) ((lambda (a3dc2@ls/false) (if (and a3dc2@ls/false (apply (lambda (a3dc4@dots) (a3db8@ellipsis? a3dc4@dots)) a3dc2@ls/false)) (apply (lambda (a3dc6@dots) (a2fe5@syntax-violation '#f '"misplaced ellipsis in syntax form" a3db4@src)) a3dc2@ls/false) ((lambda (a3dc8@t) ((lambda (a3dca@ls/false) (if (and a3dca@ls/false (apply (lambda (a3dcc@id) (a2cf1@id? a3dcc@id)) a3dca@ls/false)) (apply (lambda (a3dce@id) ((lambda (a3dd0@label) ((lambda (a3dd2@b) ((lambda () (if (eq? (a2d13@binding-type a3dd2@b) 'syntax) (call-with-values (lambda () ((lambda (a3dd8@var.lev) (a3d3f@gen-ref a3db4@src (car a3dd8@var.lev) (cdr a3dd8@var.lev) a3db7@maps)) (a2d15@binding-value a3dd2@b))) (lambda (a3dda@a3dd5 a3ddb@a3dd7) ((lambda (a3dde@maps a3ddf@var) (values (list 'ref a3ddf@var) a3dde@maps)) a3ddb@a3dd7 a3dda@a3dd5))) (values (list 'quote a3db5@e) a3db7@maps))))) (a2d0f@label->binding a3dd0@label a3db6@r))) (a2d0b@id->label a3db5@e))) a3dca@ls/false) ((lambda (a3de2@t) ((lambda (a3de4@ls/false) (if (and a3de4@ls/false (apply (lambda (a3de6@dots a3de7@e) (a3db8@ellipsis? a3de6@dots)) a3de4@ls/false)) (apply (lambda (a3dea@dots a3deb@e) (if a3db9@vec? (a2fe5@syntax-violation '#f '"misplaced ellipsis in syntax form" a3db4@src) (a3d3d@gen-syntax a3db4@src a3deb@e a3db6@r a3db7@maps (lambda (a3dee@x) '#f) '#f))) a3de4@ls/false) ((lambda (a3df0@t) ((lambda (a3df2@ls/false) (if (and a3df2@ls/false (apply (lambda (a3df4@x a3df5@dots a3df6@y) (a3db8@ellipsis? a3df5@dots)) a3df2@ls/false)) (apply (lambda (a3dfa@x a3dfb@dots a3dfc@y) ((letrec ((a3e00@f (lambda (a3e02@y a3e03@k) ((lambda (a3e06@t) ((lambda (a3e08@ls/false) (if a3e08@ls/false (apply (lambda () (a3e03@k a3db7@maps)) a3e08@ls/false) ((lambda (a3e0a@t) ((lambda (a3e0c@ls/false) (if (and a3e0c@ls/false (apply (lambda (a3e0e@dots a3e0f@y) (a3db8@ellipsis? a3e0e@dots)) a3e0c@ls/false)) (apply (lambda (a3e12@dots a3e13@y) (a3e00@f a3e13@y (lambda (a3e16@maps) (call-with-values (lambda () (a3e03@k (cons '() a3e16@maps))) (lambda (a3e1c@a3e19 a3e1d@a3e1b) ((lambda (a3e20@maps a3e21@x) (if (null? (car a3e20@maps)) (a2fe5@syntax-violation '#f '"extra ellipsis in syntax form" a3db4@src) (values (a3d43@gen-mappend a3e21@x (car a3e20@maps)) (cdr a3e20@maps)))) a3e1d@a3e1b a3e1c@a3e19)))))) a3e0c@ls/false) ((lambda (a3e24@t) ((lambda (a3e26@ls/false) (if a3e26@ls/false (apply (lambda () (call-with-values (lambda () (a3d3d@gen-syntax a3db4@src a3e02@y a3db6@r a3db7@maps a3db8@ellipsis? a3db9@vec?)) (lambda (a3e2c@a3e29 a3e2d@a3e2b) ((lambda (a3e30@maps a3e31@y) (call-with-values (lambda () (a3e03@k a3e30@maps)) (lambda (a3e38@a3e35 a3e39@a3e37) ((lambda (a3e3c@maps a3e3d@x) (values (a3d41@gen-append a3e3d@x a3e31@y) a3e3c@maps)) a3e39@a3e37 a3e38@a3e35)))) a3e2d@a3e2b a3e2c@a3e29)))) a3e26@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3e24@t))) (a2efc@syntax-dispatch a3e24@t '_))) a3e0a@t))) (a2efc@syntax-dispatch a3e0a@t '(any . any)))) a3e06@t))) (a2efc@syntax-dispatch a3e06@t '()))) a3e02@y)))) a3e00@f) a3dfc@y (lambda (a3e40@maps) (call-with-values (lambda () (a3d3d@gen-syntax a3db4@src a3dfa@x a3db6@r (cons '() a3e40@maps) a3db8@ellipsis? '#f)) (lambda (a3e46@a3e43 a3e47@a3e45) ((lambda (a3e4a@maps a3e4b@x) (if (null? (car a3e4a@maps)) (a2fe5@syntax-violation '#f '"extra ellipsis in syntax form" a3db4@src) (values (a3d45@gen-map a3e4b@x (car a3e4a@maps)) (cdr a3e4a@maps)))) a3e47@a3e45 a3e46@a3e43)))))) a3df2@ls/false) ((lambda (a3e4e@t) ((lambda (a3e50@ls/false) (if a3e50@ls/false (apply (lambda (a3e52@x a3e53@y) (call-with-values (lambda () (a3d3d@gen-syntax a3db4@src a3e52@x a3db6@r a3db7@maps a3db8@ellipsis? '#f)) (lambda (a3e5a@a3e57 a3e5b@a3e59) ((lambda (a3e5e@maps a3e5f@xnew) (call-with-values (lambda () (a3d3d@gen-syntax a3db4@src a3e53@y a3db6@r a3e5e@maps a3db8@ellipsis? a3db9@vec?)) (lambda (a3e66@a3e63 a3e67@a3e65) ((lambda (a3e6a@maps a3e6b@ynew) (values (a3d47@gen-cons a3db5@e a3e52@x a3e53@y a3e5f@xnew a3e6b@ynew) a3e6a@maps)) a3e67@a3e65 a3e66@a3e63)))) a3e5b@a3e59 a3e5a@a3e57)))) a3e50@ls/false) ((lambda (a3e6e@t) ((lambda (a3e70@ls/false) (if a3e70@ls/false (apply (lambda (a3e72@ls) (call-with-values (lambda () (a3d3d@gen-syntax a3db4@src a3e72@ls a3db6@r a3db7@maps a3db8@ellipsis? '#t)) (lambda (a3e78@a3e75 a3e79@a3e77) ((lambda (a3e7c@maps a3e7d@lsnew) (values (a3d49@gen-vector a3db5@e a3e72@ls a3e7d@lsnew) a3e7c@maps)) a3e79@a3e77 a3e78@a3e75)))) a3e70@ls/false) ((lambda (a3e80@t) ((lambda (a3e82@ls/false) (if a3e82@ls/false (apply (lambda () (values (list 'quote a3db5@e) a3db7@maps)) a3e82@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3e80@t))) (a2efc@syntax-dispatch a3e80@t '_))) a3e6e@t))) (a2efc@syntax-dispatch a3e6e@t '#(vector each-any)))) a3e4e@t))) (a2efc@syntax-dispatch a3e4e@t '(any . any)))) a3df0@t))) (a2efc@syntax-dispatch a3df0@t '(any any . any)))) a3de2@t))) (a2efc@syntax-dispatch a3de2@t '(any any)))) a3dc8@t))) (a2efc@syntax-dispatch a3dc8@t 'any))) a3dc0@t))) (a2efc@syntax-dispatch a3dc0@t 'any))) a3db5@e))) (set! a3d3f@gen-ref (lambda (a3d9a@src a3d9b@var a3d9c@level a3d9d@maps) (if (= a3d9c@level '0) (values a3d9b@var a3d9d@maps) (if (null? a3d9d@maps) (a2fe5@syntax-violation '#f '"missing ellipsis in syntax form" a3d9a@src) (call-with-values (lambda () (a3d3f@gen-ref a3d9a@src a3d9b@var (- a3d9c@level '1) (cdr a3d9d@maps))) (lambda (a3da6@a3da3 a3da7@a3da5) ((lambda (a3daa@outer-maps a3dab@outer-var) ((lambda (a3dae@t) (if a3dae@t ((lambda (a3db0@b) (values (cdr a3db0@b) a3d9d@maps)) a3dae@t) ((lambda (a3db2@inner-var) (values a3db2@inner-var (cons (cons (cons a3dab@outer-var a3db2@inner-var) (car a3d9d@maps)) a3daa@outer-maps))) (a2c71@gen-lexical 'tmp)))) (assq a3dab@outer-var (car a3d9d@maps)))) a3da7@a3da5 a3da6@a3da3))))))) (set! a3d41@gen-append (lambda (a3d96@x a3d97@y) (if (fast-equal? a3d97@y ''()) a3d96@x (list 'append a3d96@x a3d97@y)))) (set! a3d43@gen-mappend (lambda (a3d92@e a3d93@map-env) (list 'apply '(primitive append) (a3d45@gen-map a3d92@e a3d93@map-env)))) (set! a3d45@gen-map (lambda (a3d80@e a3d81@map-env) ((lambda (a3d84@formals a3d85@actuals) (if (eq? (car a3d80@e) 'ref) (car a3d85@actuals) (if (for-all (lambda (a3d88@x) (and (eq? (car a3d88@x) 'ref) (memq (cadr a3d88@x) a3d84@formals))) (cdr a3d80@e)) ((lambda (a3d8a@args) (cons 'map (cons (list 'primitive (car a3d80@e)) a3d8a@args))) (map ((lambda (a3d8c@r) (lambda (a3d8e@x) (cdr (assq (cadr a3d8e@x) a3d8c@r)))) (map cons a3d84@formals a3d85@actuals)) (cdr a3d80@e))) (cons* 'map (list 'lambda a3d84@formals a3d80@e) a3d85@actuals)))) (map cdr a3d81@map-env) (map (lambda (a3d90@x) (list 'ref (car a3d90@x))) a3d81@map-env)))) (set! a3d47@gen-cons (lambda (a3d70@e a3d71@x a3d72@y a3d73@xnew a3d74@ynew) ((lambda (a3d7a@t) (if (memv a3d7a@t '(quote)) (if (eq? (car a3d73@xnew) 'quote) ((lambda (a3d7c@xnew a3d7d@ynew) (if (and (eq? a3d7c@xnew a3d71@x) (eq? a3d7d@ynew a3d72@y)) (list 'quote a3d70@e) (list 'quote (cons a3d7c@xnew a3d7d@ynew)))) (cadr a3d73@xnew) (cadr a3d74@ynew)) (if (null? (cadr a3d74@ynew)) (list 'list a3d73@xnew) (list 'cons a3d73@xnew a3d74@ynew))) (if (memv a3d7a@t '(list)) (cons 'list (cons a3d73@xnew (cdr a3d74@ynew))) (list 'cons a3d73@xnew a3d74@ynew)))) (car a3d74@ynew)))) (set! a3d49@gen-vector (lambda (a3d6a@e a3d6b@ls a3d6c@lsnew) (if (eq? (car a3d6c@lsnew) 'quote) (if (eq? (cadr a3d6c@lsnew) a3d6b@ls) (list 'quote a3d6a@e) (list 'quote (list->vector (cadr a3d6c@lsnew)))) (if (eq? (car a3d6c@lsnew) 'list) (cons 'vector (cdr a3d6c@lsnew)) (list 'list->vector a3d6c@lsnew))))) (set! a3d4b@regen (lambda (a3d64@x) ((lambda (a3d66@t) (if (memv a3d66@t '(ref)) (cadr a3d64@x) (if (memv a3d66@t '(primitive)) (list 'primitive (cadr a3d64@x)) (if (memv a3d66@t '(quote)) (list 'quote (cadr a3d64@x)) (if (memv a3d66@t '(lambda)) (a2c4d@a2b8d@build-lambda '#f (cadr a3d64@x) (a3d4b@regen (caddr a3d64@x))) (if (memv a3d66@t '(map)) ((lambda (a3d68@ls) (cons '(primitive ellipsis-map) a3d68@ls)) (map a3d4b@regen (cdr a3d64@x))) (cons (list 'primitive (car a3d64@x)) (map a3d4b@regen (cdr a3d64@x))))))))) (car a3d64@x)))) (lambda (a3d4c@e a3d4d@r a3d4e@mr) ((lambda (a3d52@t) ((lambda (a3d54@ls/false) (if a3d54@ls/false (apply (lambda (a3d56@x) (call-with-values (lambda () (a3d3d@gen-syntax a3d4c@e a3d56@x a3d4d@r '() a2efe@ellipsis? '#f)) (lambda (a3d5c@a3d59 a3d5d@a3d5b) ((lambda (a3d60@maps a3d61@e) (a3d4b@regen a3d61@e)) a3d5d@a3d5b a3d5c@a3d59)))) a3d54@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3d52@t))) (a2efc@syntax-dispatch a3d52@t '(_ any)))) a3d4c@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! a2f0a@core-macro-transformer (lambda (a3e84@name) ((lambda (a3e86@t) (if (memv a3e86@t '(quote)) a2eac@quote-transformer (if (memv a3e86@t '(lambda)) a2eb0@lambda-transformer (if (memv a3e86@t '(case-lambda)) a2eae@case-lambda-transformer (if (memv a3e86@t '(letrec)) a2e94@letrec-transformer (if (memv a3e86@t '(letrec*)) a2e96@letrec*-transformer (if (memv a3e86@t '(if)) a2ea4@if-transformer (if (memv a3e86@t '(and)) a2ea6@and-transformer (if (memv a3e86@t '(or)) a2ea8@or-transformer (if (memv a3e86@t '(foreign-call)) a2ef8@foreign-call-transformer (if (memv a3e86@t '(syntax-case)) a2f04@syntax-case-transformer (if (memv a3e86@t '(syntax)) a2f08@syntax-transformer (if (memv a3e86@t '(type-descriptor)) a2e9a@type-descriptor-transformer (if (memv a3e86@t '(record-type-descriptor)) a2e9c@record-type-descriptor-transformer (if (memv a3e86@t '(record-constructor-descriptor)) a2e9e@record-constructor-descriptor-transformer (if (memv a3e86@t '(fluid-let-syntax)) a2e98@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" a3e84@name))))))))))))))))) a3e84@name))) (set! a2f0c@symbol-macro (lambda (a3e88@x a3e89@set) ((lambda (a3e8c@t) ((lambda (a3e8e@ls/false) (if (and a3e8e@ls/false (apply (lambda (a3e90@name) (and (a2cf1@id? a3e90@name) (memq (a2cf3@id->sym a3e90@name) a3e89@set))) a3e8e@ls/false)) (apply (lambda (a3e92@name) (a2eb2@bless (list 'quote a3e92@name))) a3e8e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3e8c@t))) (a2efc@syntax-dispatch a3e8c@t '(_ any)))) a3e88@x))) (set! a2f0e@macro-transformer (lambda (a3e94@x) (if (procedure? a3e94@x) a3e94@x (if (symbol? a3e94@x) ((lambda (a3e96@t) (if (memv a3e96@t '(define-record-type)) a2ef0@define-record-type-macro (if (memv a3e96@t '(define-struct)) a2eee@define-struct-macro (if (memv a3e96@t '(include)) a2ee4@include-macro (if (memv a3e96@t '(cond)) a2ee0@cond-macro (if (memv a3e96@t '(let)) a2eb8@let-macro (if (memv a3e96@t '(do)) a2ed8@do-macro (if (memv a3e96@t '(or)) a2edc@or-macro (if (memv a3e96@t '(and)) a2ede@and-macro (if (memv a3e96@t '(let*)) a2eda@let*-macro (if (memv a3e96@t '(let-values)) a2eba@let-values-macro (if (memv a3e96@t '(let*-values)) a2ebc@let*-values-macro (if (memv a3e96@t '(syntax-rules)) a2ee8@syntax-rules-macro (if (memv a3e96@t '(quasiquote)) a2eea@quasiquote-macro (if (memv a3e96@t '(quasisyntax)) a2eec@quasisyntax-macro (if (memv a3e96@t '(with-syntax)) a2eb4@with-syntax-macro (if (memv a3e96@t '(when)) a2ea0@when-macro (if (memv a3e96@t '(unless)) a2ea2@unless-macro (if (memv a3e96@t '(case)) a2eaa@case-macro (if (memv a3e96@t '(identifier-syntax)) a2ed6@identifier-syntax-macro (if (memv a3e96@t '(time)) a2ece@time-macro (if (memv a3e96@t '(delay)) a2ed0@delay-macro (if (memv a3e96@t '(assert)) a2ed2@assert-macro (if (memv a3e96@t '(endianness)) a2ed4@endianness-macro (if (memv a3e96@t '(guard)) a2eca@guard-macro (if (memv a3e96@t '(define-enumeration)) a2ecc@define-enumeration-macro (if (memv a3e96@t '(trace-lambda)) a2ebe@trace-lambda-macro (if (memv a3e96@t '(trace-define)) a2ec0@trace-define-macro (if (memv a3e96@t '(trace-define-syntax)) a2ec2@trace-define-syntax-macro (if (memv a3e96@t '(trace-let-syntax)) a2ec6@trace-let-syntax-macro (if (memv a3e96@t '(trace-letrec-syntax)) a2ec8@trace-letrec-syntax-macro (if (memv a3e96@t '(define-condition-type)) a2ef2@define-condition-type-macro (if (memv a3e96@t '(parameterize)) a2ef6@parameterize-macro (if (memv a3e96@t '(include-into)) a2ee6@include-into-macro (if (memv a3e96@t '(eol-style)) (lambda (a3e98@x) (a2f0c@symbol-macro a3e98@x '(none lf cr crlf nel crnel ls))) (if (memv a3e96@t '(error-handling-mode)) (lambda (a3e9a@x) (a2f0c@symbol-macro a3e9a@x '(ignore raise replace))) (if (memv a3e96@t '(buffer-mode)) (lambda (a3e9c@x) (a2f0c@symbol-macro a3e9c@x '(none line block))) (if (memv a3e96@t '(file-options)) a2c64@file-options-macro (if (memv a3e96@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) a2ef4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" a3e94@x)))))))))))))))))))))))))))))))))))))))) a3e94@x) (error 'core-macro-transformer '"BUG: invalid macro" a3e94@x))))) (set! a2f10@local-macro-transformer (lambda (a3e9e@x) (car a3e9e@x))) (set! a2f12@do-macro-call (lambda (a3ea0@transformer a3ea1@expr) ((lambda (a3ea4@out) (begin ((letrec ((a3ea6@f (lambda (a3ea8@x) (if (not (a2cb9@stx? a3ea8@x)) (if (pair? a3ea8@x) (begin (a3ea6@f (car a3ea8@x)) (a3ea6@f (cdr a3ea8@x))) (if (vector? a3ea8@x) (vector-for-each a3ea6@f a3ea8@x) (if (symbol? a3ea8@x) (a2fe5@syntax-violation '#f '"raw symbol encountered in output of macro" a3ea1@expr a3ea8@x) (void)))) (void))))) a3ea6@f) a3ea4@out) (a2cdb@add-mark (a2cd1@gen-mark) a3ea4@out a3ea1@expr))) (a3ea0@transformer (a2cdb@add-mark a2cd3@anti-mark a3ea1@expr '#f))))) (set! a2f14@chi-macro (lambda (a3eaa@p a3eab@e) (a2f12@do-macro-call (a2f0e@macro-transformer a3eaa@p) a3eab@e))) (set! a2f16@chi-local-macro (lambda (a3eae@p a3eaf@e) (a2f12@do-macro-call (a2f10@local-macro-transformer a3eae@p) a3eaf@e))) (set! a2f18@chi-global-macro (lambda (a3eb2@p a3eb3@e) ((lambda (a3eb6@lib a3eb7@loc) (begin (a2b16@a29b8@visit-library a3eb6@lib) ((lambda (a3eba@x) ((lambda (a3ebc@transformer) (a2f12@do-macro-call a3ebc@transformer a3eb3@e)) (if (procedure? a3eba@x) a3eba@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" a3eba@x)))) (symbol-value a3eb7@loc)))) (car a3eb2@p) (cdr a3eb2@p)))) (set! a2f1a@chi-expr* (lambda (a3ebe@e* a3ebf@r a3ec0@mr) (if (null? a3ebe@e*) '() ((lambda (a3ec4@e) (cons a3ec4@e (a2f1a@chi-expr* (cdr a3ebe@e*) a3ebf@r a3ec0@mr))) (a2f1e@chi-expr (car a3ebe@e*) a3ebf@r a3ec0@mr))))) (set! a2f1c@chi-application (lambda (a3ec6@e a3ec7@r a3ec8@mr) ((lambda (a3ecc@t) ((lambda (a3ece@ls/false) (if a3ece@ls/false (apply (lambda (a3ed0@rator a3ed1@rands) ((lambda (a3ed4@rator) (cons a3ed4@rator (a2f1a@chi-expr* a3ed1@rands a3ec7@r a3ec8@mr))) (a2f1e@chi-expr a3ed0@rator a3ec7@r a3ec8@mr))) a3ece@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3ecc@t))) (a2efc@syntax-dispatch a3ecc@t '(any . each-any)))) a3ec6@e))) (set! a2f1e@chi-expr (lambda (a3ed6@e a3ed7@r a3ed8@mr) (call-with-values (lambda () (a2d19@syntax-type a3ed6@e a3ed7@r)) (lambda (a3ee2@a3edd a3ee3@a3edf a3ee4@a3ee1) ((lambda (a3ee8@kwd a3ee9@value a3eea@type) ((lambda (a3eee@t) (if (memv a3eee@t '(core-macro)) ((lambda (a3ef0@transformer) (a3ef0@transformer a3ed6@e a3ed7@r a3ed8@mr)) (a2f0a@core-macro-transformer a3ee9@value)) (if (memv a3eee@t '(global)) ((lambda (a3ef2@lib) ((lambda (a3ef4@loc) ((lambda () (begin ((a2f67@inv-collector) a3ef2@lib) a3ef4@loc)))) (cdr a3ee9@value))) (car a3ee9@value)) (if (memv a3eee@t '(core-prim)) ((lambda (a3ef6@name) (list 'primitive a3ef6@name)) a3ee9@value) (if (memv a3eee@t '(call)) (a2f1c@chi-application a3ed6@e a3ed7@r a3ed8@mr) (if (memv a3eee@t '(lexical)) ((lambda (a3ef8@lex) a3ef8@lex) (a2e88@lexical-var a3ee9@value)) (if (memv a3eee@t '(global-macro global-macro!)) (a2f1e@chi-expr (a2f18@chi-global-macro a3ee9@value a3ed6@e) a3ed7@r a3ed8@mr) (if (memv a3eee@t '(local-macro local-macro!)) (a2f1e@chi-expr (a2f16@chi-local-macro a3ee9@value a3ed6@e) a3ed7@r a3ed8@mr) (if (memv a3eee@t '(macro macro!)) (a2f1e@chi-expr (a2f14@chi-macro a3ee9@value a3ed6@e) a3ed7@r a3ed8@mr) (if (memv a3eee@t '(constant)) ((lambda (a3efa@datum) (list 'quote a3efa@datum)) a3ee9@value) (if (memv a3eee@t '(set!)) (a2f20@chi-set! a3ed6@e a3ed7@r a3ed8@mr) (if (memv a3eee@t '(begin)) ((lambda (a3efc@t) ((lambda (a3efe@ls/false) (if a3efe@ls/false (apply (lambda (a3f00@x a3f01@x*) (a2c50@a2bbf@build-sequence '#f (a2f1a@chi-expr* (cons a3f00@x a3f01@x*) a3ed7@r a3ed8@mr))) a3efe@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3efc@t))) (a2efc@syntax-dispatch a3efc@t '(_ any . each-any)))) a3ed6@e) (if (memv a3eee@t '(let-syntax letrec-syntax)) ((lambda (a3f04@t) ((lambda (a3f06@ls/false) (if (and a3f06@ls/false (apply (lambda (a3f08@xlhs* a3f09@xrhs* a3f0a@xbody a3f0b@xbody*) (if (not (a2cfb@valid-bound-ids? a3f08@xlhs*)) (a2fe5@syntax-violation '#f '"invalid identifiers" a3ed6@e) (void))) a3f06@ls/false)) (apply (lambda (a3f10@xlhs* a3f11@xrhs* a3f12@xbody a3f13@xbody*) ((lambda (a3f18@xlab*) ((lambda (a3f1a@xrib) ((lambda (a3f1c@xb*) ((lambda () (a2c50@a2bbf@build-sequence '#f (a2f1a@chi-expr* (map (lambda (a3f1e@x) (a2cdd@add-subst a3f1a@xrib a3f1e@x)) (cons a3f12@xbody a3f13@xbody*)) (append (map cons a3f18@xlab* a3f1c@xb*) a3ed7@r) (append (map cons a3f18@xlab* a3f1c@xb*) a3ed8@mr)))))) (map (lambda (a3f20@x) (a2d2f@make-eval-transformer (a2f59@expand-transformer (if (eq? a3eea@type 'let-syntax) a3f20@x (a2cdd@add-subst a3f1a@xrib a3f20@x)) a3ed8@mr))) a3f11@xrhs*))) (a2cac@make-full-rib a3f10@xlhs* a3f18@xlab*))) (map a2c75@gen-label a3f10@xlhs*))) a3f06@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3f04@t))) (a2efc@syntax-dispatch a3f04@t '(_ #(each (any any)) any . each-any)))) a3ed6@e) (if (memv a3eee@t '(displaced-lexical)) (a2fe5@syntax-violation '#f '"identifier out of context" a3ed6@e) (if (memv a3eee@t '(syntax)) (a2fe5@syntax-violation '#f '"reference to pattern variable outside a syntax form" a3ed6@e) (if (memv a3eee@t '(define define-syntax module import library)) (a2fe5@syntax-violation '#f (string-append ((lambda (a3f22@t) (if (memv a3f22@t '(define)) '"a definition" (if (memv a3f22@t '(define-syntax)) '"a define-syntax" (if (memv a3f22@t '(module)) '"a module definition" (if (memv a3f22@t '(library)) '"a library definition" (if (memv a3f22@t '(import)) '"an import declaration" (if (memv a3f22@t '(export)) '"an export declaration" '"a non-expression"))))))) a3eea@type) '" was found where an expression was expected") a3ed6@e) (if (memv a3eee@t '(mutable)) (a2fe5@syntax-violation '#f '"attempt to reference an unexportable variable" a3ed6@e) (a2fe5@syntax-violation '#f '"invalid expression" a3ed6@e)))))))))))))))))) a3eea@type)) a3ee4@a3ee1 a3ee3@a3edf a3ee2@a3edd))))) (set! a2f20@chi-set! (lambda (a3f24@e a3f25@r a3f26@mr) ((lambda (a3f2a@t) ((lambda (a3f2c@ls/false) (if (and a3f2c@ls/false (apply (lambda (a3f2e@x a3f2f@v) (a2cf1@id? a3f2e@x)) a3f2c@ls/false)) (apply (lambda (a3f32@x a3f33@v) (call-with-values (lambda () (a2d19@syntax-type a3f32@x a3f25@r)) (lambda (a3f3c@a3f37 a3f3d@a3f39 a3f3e@a3f3b) ((lambda (a3f42@kwd a3f43@value a3f44@type) ((lambda (a3f48@t) (if (memv a3f48@t '(lexical)) (begin (a2e8c@set-lexical-mutable! a3f43@value '#t) (list 'set! (a2e88@lexical-var a3f43@value) (a2f1e@chi-expr a3f33@v a3f25@r a3f26@mr))) (if (memv a3f48@t '(core-prim)) (a2fe5@syntax-violation '#f '"cannot modify imported core primitive" a3f24@e) (if (memv a3f48@t '(global)) (a2fe5@syntax-violation '#f '"attempt to modify imported binding" a3f24@e) (if (memv a3f48@t '(global-macro!)) (a2f1e@chi-expr (a2f18@chi-global-macro a3f43@value a3f24@e) a3f25@r a3f26@mr) (if (memv a3f48@t '(local-macro!)) (a2f1e@chi-expr (a2f16@chi-local-macro a3f43@value a3f24@e) a3f25@r a3f26@mr) (if (memv a3f48@t '(mutable)) (a2fe5@syntax-violation '#f '"attempt to assign to an unexportable variable" a3f24@e) (a2fe5@syntax-violation '#f '"invalid syntax" a3f24@e)))))))) a3f44@type)) a3f3e@a3f3b a3f3d@a3f39 a3f3c@a3f37)))) a3f2c@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3f2a@t))) (a2efc@syntax-dispatch a3f2a@t '(_ any any)))) a3f24@e))) (set! a2f22@verify-formals (lambda (a3f4a@fmls a3f4b@stx) ((lambda (a3f4e@t) ((lambda (a3f50@ls/false) (if a3f50@ls/false (apply (lambda (a3f52@x*) (if (not (a2cfb@valid-bound-ids? a3f52@x*)) (a2eb6@invalid-fmls-error a3f4b@stx a3f4a@fmls) (void))) a3f50@ls/false) ((lambda (a3f54@t) ((lambda (a3f56@ls/false) (if a3f56@ls/false (apply (lambda (a3f58@x* a3f59@x) (if (not (a2cfb@valid-bound-ids? (cons a3f59@x a3f58@x*))) (a2eb6@invalid-fmls-error a3f4b@stx a3f4a@fmls) (void))) a3f56@ls/false) ((lambda (a3f5c@t) ((lambda (a3f5e@ls/false) (if a3f5e@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid syntax" a3f4b@stx)) a3f5e@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3f5c@t))) (a2efc@syntax-dispatch a3f5c@t '_))) a3f54@t))) (a2efc@syntax-dispatch a3f54@t '#(each+ any () any)))) a3f4e@t))) (a2efc@syntax-dispatch a3f4e@t 'each-any))) a3f4a@fmls))) (set! a2f24@chi-lambda-clause (lambda (a3f60@stx a3f61@fmls a3f62@body* a3f63@r a3f64@mr) ((lambda (a3f6a@t) ((lambda (a3f6c@ls/false) (if a3f6c@ls/false (apply (lambda (a3f6e@x*) (begin (a2f22@verify-formals a3f61@fmls a3f60@stx) ((lambda (a3f70@lex* a3f71@lab*) (values a3f70@lex* (a2f34@chi-internal (a2cdd@add-subst (a2cac@make-full-rib a3f6e@x* a3f71@lab*) a3f62@body*) (a2e90@add-lexicals a3f71@lab* a3f70@lex* a3f63@r) a3f64@mr))) (map a2c71@gen-lexical a3f6e@x*) (map a2c75@gen-label a3f6e@x*)))) a3f6c@ls/false) ((lambda (a3f74@t) ((lambda (a3f76@ls/false) (if a3f76@ls/false (apply (lambda (a3f78@x* a3f79@x) (begin (a2f22@verify-formals a3f61@fmls a3f60@stx) ((lambda (a3f7c@lex* a3f7d@lab* a3f7e@lex a3f7f@lab) (values (append a3f7c@lex* a3f7e@lex) (a2f34@chi-internal (a2cdd@add-subst (a2cac@make-full-rib (cons a3f79@x a3f78@x*) (cons a3f7f@lab a3f7d@lab*)) a3f62@body*) (a2e90@add-lexicals (cons a3f7f@lab a3f7d@lab*) (cons a3f7e@lex a3f7c@lex*) a3f63@r) a3f64@mr))) (map a2c71@gen-lexical a3f78@x*) (map a2c75@gen-label a3f78@x*) (a2c71@gen-lexical a3f79@x) (a2c75@gen-label a3f79@x)))) a3f76@ls/false) ((lambda (a3f84@t) ((lambda (a3f86@ls/false) (if a3f86@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid syntax" a3f61@fmls)) a3f86@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a3f84@t))) (a2efc@syntax-dispatch a3f84@t '_))) a3f74@t))) (a2efc@syntax-dispatch a3f74@t '#(each+ any () any)))) a3f6a@t))) (a2efc@syntax-dispatch a3f6a@t 'each-any))) a3f61@fmls))) (set! a2f26@chi-lambda-clause* (lambda (a3f88@stx a3f89@fmls* a3f8a@body** a3f8b@r a3f8c@mr) (if (null? a3f89@fmls*) (values '() '()) (call-with-values (lambda () (a2f24@chi-lambda-clause a3f88@stx (car a3f89@fmls*) (car a3f8a@body**) a3f8b@r a3f8c@mr)) (lambda (a3f96@a3f93 a3f97@a3f95) ((lambda (a3f9a@b a3f9b@a) (call-with-values (lambda () (a2f26@chi-lambda-clause* a3f88@stx (cdr a3f89@fmls*) (cdr a3f8a@body**) a3f8b@r a3f8c@mr)) (lambda (a3fa2@a3f9f a3fa3@a3fa1) ((lambda (a3fa6@b* a3fa7@a*) (values (cons a3f9b@a a3fa7@a*) (cons a3f9a@b a3fa6@b*))) a3fa3@a3fa1 a3fa2@a3f9f)))) a3f97@a3f95 a3f96@a3f93)))))) (set! a2f28@chi-defun (lambda (a3faa@x a3fab@r a3fac@mr) ((lambda (a3fb0@fmls a3fb1@body*) (call-with-values (lambda () (a2f24@chi-lambda-clause a3fb0@fmls a3fb0@fmls a3fb1@body* a3fab@r a3fac@mr)) (lambda (a3fb8@a3fb5 a3fb9@a3fb7) ((lambda (a3fbc@body a3fbd@fmls) (a2c4d@a2b8d@build-lambda '#f a3fbd@fmls a3fbc@body)) a3fb9@a3fb7 a3fb8@a3fb5)))) (car a3faa@x) (cdr a3faa@x)))) (set! a2f2a@chi-rhs (lambda (a3fc0@rhs a3fc1@r a3fc2@mr) ((lambda (a3fc6@t) (if (memv a3fc6@t '(defun)) (a2f28@chi-defun (cdr a3fc0@rhs) a3fc1@r a3fc2@mr) (if (memv a3fc6@t '(expr)) ((lambda (a3fc8@expr) (a2f1e@chi-expr a3fc8@expr a3fc1@r a3fc2@mr)) (cdr a3fc0@rhs)) (if (memv a3fc6@t '(top-expr)) ((lambda (a3fca@expr) (a2c50@a2bbf@build-sequence '#f (list (a2f1e@chi-expr a3fca@expr a3fc1@r a3fc2@mr) (a2c51@a2bc1@build-void)))) (cdr a3fc0@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" a3fc0@rhs))))) (car a3fc0@rhs)))) (set! a2f2c@expand-interaction-rhs*/init* (lambda (a3fcc@lhs* a3fcd@rhs* a3fce@init* a3fcf@r a3fd0@mr) ((letrec ((a3fd6@f (lambda (a3fd8@lhs* a3fd9@rhs*) (if (null? a3fd8@lhs*) (map (lambda (a3fdc@x) (a2f1e@chi-expr a3fdc@x a3fcf@r a3fd0@mr)) a3fce@init*) ((lambda (a3fde@lhs a3fdf@rhs) ((lambda (a3fe2@t) (if (memv a3fe2@t '(defun)) ((lambda (a3fe4@rhs) (cons (list 'set! a3fde@lhs a3fe4@rhs) (a3fd6@f (cdr a3fd8@lhs*) (cdr a3fd9@rhs*)))) (a2f28@chi-defun (cdr a3fdf@rhs) a3fcf@r a3fd0@mr)) (if (memv a3fe2@t '(expr)) ((lambda (a3fe6@rhs) (cons (list 'set! a3fde@lhs a3fe6@rhs) (a3fd6@f (cdr a3fd8@lhs*) (cdr a3fd9@rhs*)))) (a2f1e@chi-expr (cdr a3fdf@rhs) a3fcf@r a3fd0@mr)) (if (memv a3fe2@t '(top-expr)) ((lambda (a3fe8@e) (cons a3fe8@e (a3fd6@f (cdr a3fd8@lhs*) (cdr a3fd9@rhs*)))) (a2f1e@chi-expr (cdr a3fdf@rhs) a3fcf@r a3fd0@mr)) (error 'expand-interaction '"invallid" a3fdf@rhs))))) (car a3fdf@rhs))) (car a3fd8@lhs*) (car a3fd9@rhs*)))))) a3fd6@f) a3fcc@lhs* a3fcd@rhs*))) (set! a2f2e@chi-rhs* (lambda (a3fea@rhs* a3feb@r a3fec@mr) ((letrec ((a3ff0@f (lambda (a3ff2@ls) (if (null? a3ff2@ls) '() ((lambda (a3ff4@a) (cons a3ff4@a (a3ff0@f (cdr a3ff2@ls)))) (a2f2a@chi-rhs (car a3ff2@ls) a3feb@r a3fec@mr)))))) a3ff0@f) a3fea@rhs*))) (set! a2f30@find-bound=? (lambda (a3ff6@x a3ff7@lhs* a3ff8@rhs*) (if (null? a3ff7@lhs*) '#f (if (a2cf7@bound-id=? a3ff6@x (car a3ff7@lhs*)) (car a3ff8@rhs*) (a2f30@find-bound=? a3ff6@x (cdr a3ff7@lhs*) (cdr a3ff8@rhs*)))))) (set! a2f32@find-dups (lambda (a3ffc@ls) ((letrec ((a3ffe@f (lambda (a4000@ls a4001@dups) (if (null? a4000@ls) a4001@dups ((lambda (a4004@t) (if a4004@t ((lambda (a4006@x) (a3ffe@f (cdr a4000@ls) (cons (list (car a4000@ls) a4006@x) a4001@dups))) a4004@t) (a3ffe@f (cdr a4000@ls) a4001@dups))) (a2f30@find-bound=? (car a4000@ls) (cdr a4000@ls) (cdr a4000@ls))))))) a3ffe@f) a3ffc@ls '()))) (set! a2f34@chi-internal (lambda (a4008@e* a4009@r a400a@mr) ((lambda (a400e@rib) (call-with-values (lambda () (a2f57@chi-body* (map (lambda (a4020@x) (a2cdd@add-subst a400e@rib a4020@x)) (a2cef@syntax->list a4008@e*)) a4009@r a400a@mr '() '() '() '() '() a400e@rib '#f)) (lambda (a4022@a4011 a4023@a4013 a4024@a4015 a4025@a4017 a4026@a4019 a4027@a401b a4028@a401d a4029@a401f) ((lambda (a4032@_exp* a4033@kwd* a4034@mod** a4035@rhs* a4036@lex* a4037@mr a4038@r a4039@e*) (begin (if (null? a4039@e*) (a2fe5@syntax-violation '#f '"no expression in body" a4039@e*) (void)) ((lambda (a4042@init*) ((lambda (a4044@rhs*) ((lambda () (a2c53@a2bc5@build-letrec* '#f (reverse a4036@lex*) (reverse a4044@rhs*) (a2c50@a2bbf@build-sequence '#f a4042@init*))))) (a2f2e@chi-rhs* a4035@rhs* a4038@r a4037@mr))) (a2f1a@chi-expr* (append (apply append (reverse a4034@mod**)) a4039@e*) a4038@r a4037@mr)))) a4029@a401f a4028@a401d a4027@a401b a4026@a4019 a4025@a4017 a4024@a4015 a4023@a4013 a4022@a4011)))) (a2ca0@make-empty-rib)))) (set! a2f36@parse-module (lambda (a4046@e) ((lambda (a4048@t) ((lambda (a404a@ls/false) (if a404a@ls/false (apply (lambda (a404c@export* a404d@b*) (begin (if (not (for-all a2cf1@id? a404c@export*)) (a2fe5@syntax-violation '#f '"module exports must be identifiers" a4046@e) (void)) (values '#f (list->vector a404c@export*) a404d@b*))) a404a@ls/false) ((lambda (a4050@t) ((lambda (a4052@ls/false) (if a4052@ls/false (apply (lambda (a4054@name a4055@export* a4056@b*) (begin (if (not (a2cf1@id? a4054@name)) (a2fe5@syntax-violation '#f '"module name must be an identifier" a4046@e) (void)) (if (not (for-all a2cf1@id? a4055@export*)) (a2fe5@syntax-violation '#f '"module exports must be identifiers" a4046@e) (void)) (values a4054@name (list->vector a4055@export*) a4056@b*))) a4052@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4050@t))) (a2efc@syntax-dispatch a4050@t '(_ any each-any . each-any)))) a4048@t))) (a2efc@syntax-dispatch a4048@t '(_ each-any . each-any)))) a4046@e))) (set! a2f3c@a2f37 (make-record-type-descriptor 'module-interface '#f 'a2f3a '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! a2f3e@a2f39 '#f) (set! a2f40@a2f38 (make-record-constructor-descriptor a2f3c@a2f37 '#f a2f3e@a2f39)) (set! a2f43@module-interface? (record-predicate a2f3c@a2f37)) (set! a2f45@make-module-interface (record-constructor a2f40@a2f38)) (set! a2f47@module-interface-first-mark (record-accessor a2f3c@a2f37 '0)) (set! a2f49@module-interface-exp-id-vec (record-accessor a2f3c@a2f37 '1)) (set! a2f4b@module-interface-exp-lab-vec (record-accessor a2f3c@a2f37 '2)) (set! a2f4d@set-module-interface-first-mark! (record-mutator a2f3c@a2f37 '0)) (set! a2f4f@set-module-interface-exp-id-vec! (record-mutator a2f3c@a2f37 '1)) (set! a2f51@set-module-interface-exp-lab-vec! (record-mutator a2f3c@a2f37 '2)) (set! a2f53@module-interface-exp-id* (lambda (a405a@iface a405b@id) ((lambda (a405f@diff-marks) (begin (set! a405f@diff-marks (lambda (a4066@ls a4067@x) (begin (if (null? a4066@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (a406a@a) (if (eq? a406a@a a4067@x) '() (cons a406a@a (a405f@diff-marks (cdr a4066@ls) a4067@x)))) (car a4066@ls))))) ((lambda (a4060@diff a4061@id-vec) (if (null? a4060@diff) a4061@id-vec (vector-map (lambda (a4064@x) (a2cbb@make-stx (a2cbd@stx-expr a4064@x) (append a4060@diff (a2cbf@stx-mark* a4064@x)) '() '())) a4061@id-vec))) (a405f@diff-marks (a2cbf@stx-mark* a405b@id) (a2f47@module-interface-first-mark a405a@iface)) (a2f49@module-interface-exp-id-vec a405a@iface)))) '#f))) (set! a2f55@chi-internal-module (lambda (a406c@e a406d@r a406e@mr a406f@lex* a4070@rhs* a4071@mod** a4072@kwd*) (call-with-values (lambda () (a2f36@parse-module a406c@e)) (lambda (a4080@a407b a4081@a407d a4082@a407f) ((lambda (a4086@e* a4087@exp-id* a4088@name) ((lambda (a408c@rib) ((lambda (a408e@e*) ((lambda () (call-with-values (lambda () (a2f57@chi-body* a408e@e* a406d@r a406e@mr a406f@lex* a4070@rhs* a4071@mod** a4072@kwd* '() a408c@rib '#f)) (lambda (a40a0@a4091 a40a1@a4093 a40a2@a4095 a40a3@a4097 a40a4@a4099 a40a5@a409b a40a6@a409d a40a7@a409f) ((lambda (a40b0@_exp* a40b1@kwd* a40b2@mod** a40b3@rhs* a40b4@lex* a40b5@mr a40b6@r a40b7@e*) ((lambda (a40c0@exp-lab* a40c1@mod**) (if (not a4088@name) (values a40b4@lex* a40b3@rhs* a4087@exp-id* a40c0@exp-lab* a40b6@r a40b5@mr a40c1@mod** a40b1@kwd*) ((lambda (a40c4@lab a40c5@iface) (values a40b4@lex* a40b3@rhs* (vector a4088@name) (vector a40c4@lab) (cons (cons a40c4@lab (cons '$module a40c5@iface)) a40b6@r) (cons (cons a40c4@lab (cons '$module a40c5@iface)) a40b5@mr) a40c1@mod** a40b1@kwd*)) (a2c75@gen-label 'module) (a2f45@make-module-interface (car (a2cbf@stx-mark* a4088@name)) (vector-map (lambda (a40c8@x) (a2cbb@make-stx (a2cbd@stx-expr a40c8@x) (a2cbf@stx-mark* a40c8@x) '() '())) a4087@exp-id*) a40c0@exp-lab*)))) (vector-map (lambda (a40ca@x) (or (a2d0b@id->label (a2cbb@make-stx (a2cf3@id->sym a40ca@x) (a2cbf@stx-mark* a40ca@x) (list a408c@rib) '())) (a2fe5@syntax-violation '#f '"cannot find module export" a40ca@x))) a4087@exp-id*) (cons a40b7@e* a40b2@mod**))) a40a7@a409f a40a6@a409d a40a5@a409b a40a4@a4099 a40a3@a4097 a40a2@a4095 a40a1@a4093 a40a0@a4091)))))) (map (lambda (a40cc@x) (a2cdd@add-subst a408c@rib a40cc@x)) (a2cef@syntax->list a4086@e*)))) (a2ca0@make-empty-rib))) a4082@a407f a4081@a407d a4080@a407b))))) (set! a2f57@chi-body* (lambda (a40ce@e* a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40d4@kwd* a40d5@exp* a40d6@rib a40d7@top?) (if (null? a40ce@e*) (values a40ce@e* a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40d4@kwd* a40d5@exp*) ((lambda (a40e2@e) (call-with-values (lambda () (a2d19@syntax-type a40e2@e a40cf@r)) (lambda (a40ea@a40e5 a40eb@a40e7 a40ec@a40e9) ((lambda (a40f0@kwd a40f1@value a40f2@type) ((lambda (a40f6@kwd*) ((lambda (a40f8@t) (if (memv a40f8@t '(define)) (call-with-values (lambda () (a2e80@parse-define a40e2@e)) (lambda (a40fe@a40fb a40ff@a40fd) ((lambda (a4102@rhs a4103@id) (begin (if (a2cff@bound-id-member? a4103@id a40f6@kwd*) (a2fe5@syntax-violation '#f '"cannot redefine keyword" a40e2@e) (void)) (call-with-values (lambda () (a2c79@gen-define-label+loc a4103@id a40d6@rib)) (lambda (a410a@a4107 a410b@a4109) ((lambda (a410e@lex a410f@lab) (begin (a2ca2@extend-rib! a40d6@rib a4103@id a410f@lab) (a2f57@chi-body* (cdr a40ce@e*) (a2e8e@add-lexical a410f@lab a410e@lex a40cf@r) a40d0@mr (cons a410e@lex a40d1@lex*) (cons a4102@rhs a40d2@rhs*) a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?))) a410b@a4109 a410a@a4107))))) a40ff@a40fd a40fe@a40fb))) (if (memv a40f8@t '(define-syntax)) (call-with-values (lambda () (a2e82@parse-define-syntax a40e2@e)) (lambda (a4116@a4113 a4117@a4115) ((lambda (a411a@rhs a411b@id) (begin (if (a2cff@bound-id-member? a411b@id a40f6@kwd*) (a2fe5@syntax-violation '#f '"cannot redefine keyword" a40e2@e) (void)) ((lambda (a411e@lab a411f@expanded-rhs) (begin (a2ca2@extend-rib! a40d6@rib a411b@id a411e@lab) ((lambda (a4122@b) (a2f57@chi-body* (cdr a40ce@e*) (cons (cons a411e@lab a4122@b) a40cf@r) (cons (cons a411e@lab a4122@b) a40d0@mr) a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?)) (a2d2f@make-eval-transformer a411f@expanded-rhs)))) (a2c7b@gen-define-label a411b@id a40d6@rib) (a2f59@expand-transformer a411a@rhs a40d0@mr)))) a4117@a4115 a4116@a4113))) (if (memv a40f8@t '(let-syntax letrec-syntax)) ((lambda (a4124@t) ((lambda (a4126@ls/false) (if (and a4126@ls/false (apply (lambda (a4128@xlhs* a4129@xrhs* a412a@xbody*) (if (not (a2cfb@valid-bound-ids? a4128@xlhs*)) (a2fe5@syntax-violation '#f '"invalid identifiers" a40e2@e) (void))) a4126@ls/false)) (apply (lambda (a412e@xlhs* a412f@xrhs* a4130@xbody*) ((lambda (a4134@xlab*) ((lambda (a4136@xrib) ((lambda (a4138@xb*) ((lambda () (a2f57@chi-body* (append (map (lambda (a413a@x) (a2cdd@add-subst a4136@xrib a413a@x)) a4130@xbody*) (cdr a40ce@e*)) (append (map cons a4134@xlab* a4138@xb*) a40cf@r) (append (map cons a4134@xlab* a4138@xb*) a40d0@mr) a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?)))) (map (lambda (a413c@x) (a2d2f@make-eval-transformer (a2f59@expand-transformer (if (eq? a40f2@type 'let-syntax) a413c@x (a2cdd@add-subst a4136@xrib a413c@x)) a40d0@mr))) a412f@xrhs*))) (a2cac@make-full-rib a412e@xlhs* a4134@xlab*))) (map a2c75@gen-label a412e@xlhs*))) a4126@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4124@t))) (a2efc@syntax-dispatch a4124@t '(_ #(each (any any)) . each-any)))) a40e2@e) (if (memv a40f8@t '(begin)) ((lambda (a413e@t) ((lambda (a4140@ls/false) (if a4140@ls/false (apply (lambda (a4142@x*) (a2f57@chi-body* (append a4142@x* (cdr a40ce@e*)) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?)) a4140@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a413e@t))) (a2efc@syntax-dispatch a413e@t '(_ . each-any)))) a40e2@e) (if (memv a40f8@t '(global-macro global-macro!)) (a2f57@chi-body* (cons (a2cdd@add-subst a40d6@rib (a2f18@chi-global-macro a40f1@value a40e2@e)) (cdr a40ce@e*)) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?) (if (memv a40f8@t '(local-macro local-macro!)) (a2f57@chi-body* (cons (a2cdd@add-subst a40d6@rib (a2f16@chi-local-macro a40f1@value a40e2@e)) (cdr a40ce@e*)) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?) (if (memv a40f8@t '(macro macro!)) (a2f57@chi-body* (cons (a2cdd@add-subst a40d6@rib (a2f14@chi-macro a40f1@value a40e2@e)) (cdr a40ce@e*)) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?) (if (memv a40f8@t '(module)) (call-with-values (lambda () (a2f55@chi-internal-module a40e2@e a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd*)) (lambda (a4154@a4145 a4155@a4147 a4156@a4149 a4157@a414b a4158@a414d a4159@a414f a415a@a4151 a415b@a4153) ((lambda (a4164@kwd* a4165@mod** a4166@mr a4167@r a4168@m-exp-lab* a4169@m-exp-id* a416a@rhs* a416b@lex*) (begin (vector-for-each (lambda (a4174@id a4175@lab) (a2ca2@extend-rib! a40d6@rib a4174@id a4175@lab)) a4169@m-exp-id* a4168@m-exp-lab*) (a2f57@chi-body* (cdr a40ce@e*) a4167@r a4166@mr a416b@lex* a416a@rhs* a4165@mod** a4164@kwd* a40d5@exp* a40d6@rib a40d7@top?))) a415b@a4153 a415a@a4151 a4159@a414f a4158@a414d a4157@a414b a4156@a4149 a4155@a4147 a4154@a4145))) (if (memv a40f8@t '(library)) (begin (a2fc7@library-expander (a2d07@stx->datum a40e2@e)) (a2f57@chi-body* (cdr a40ce@e*) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?)) (if (memv a40f8@t '(export)) ((lambda (a4178@t) ((lambda (a417a@ls/false) (if a417a@ls/false (apply (lambda (a417c@exp-decl*) (a2f57@chi-body* (cdr a40ce@e*) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* (append a417c@exp-decl* a40d5@exp*) a40d6@rib a40d7@top?)) a417a@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4178@t))) (a2efc@syntax-dispatch a4178@t '(_ . each-any)))) a40e2@e) (if (memv a40f8@t '(import)) ((lambda () ((lambda (a417f@module-import? a4181@module-import a4183@library-import) (begin (set! a417f@module-import? (lambda (a41d2@e) ((lambda (a41d4@t) ((lambda (a41d6@ls/false) (if (and a41d6@ls/false (apply (lambda (a41d8@id) (a2cf1@id? a41d8@id)) a41d6@ls/false)) (apply (lambda (a41da@id) '#t) a41d6@ls/false) ((lambda (a41dc@t) ((lambda (a41de@ls/false) (if a41de@ls/false (apply (lambda (a41e0@imp*) '#f) a41de@ls/false) ((lambda (a41e2@t) ((lambda (a41e4@ls/false) (if a41e4@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"malformed import form" a41d2@e)) a41e4@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a41e2@t))) (a2efc@syntax-dispatch a41e2@t '_))) a41dc@t))) (a2efc@syntax-dispatch a41dc@t '(_ . each-any)))) a41d4@t))) (a2efc@syntax-dispatch a41d4@t '(_ any)))) a41d2@e))) (set! a4181@module-import (lambda (a41b0@e a41b1@r) ((lambda (a41b4@t) ((lambda (a41b6@ls/false) (if (and a41b6@ls/false (apply (lambda (a41b8@id) (a2cf1@id? a41b8@id)) a41b6@ls/false)) (apply (lambda (a41ba@id) (call-with-values (lambda () (a2d19@syntax-type a41ba@id a41b1@r)) (lambda (a41c2@a41bd a41c3@a41bf a41c4@a41c1) ((lambda (a41c8@kwd a41c9@value a41ca@type) ((lambda (a41ce@t) (if (memv a41ce@t '($module)) ((lambda (a41d0@iface) (values (a2f53@module-interface-exp-id* a41d0@iface a41ba@id) (a2f4b@module-interface-exp-lab-vec a41d0@iface))) a41c9@value) (a2fe5@syntax-violation '#f '"invalid import" a41b0@e))) a41ca@type)) a41c4@a41c1 a41c3@a41bf a41c2@a41bd)))) a41b6@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a41b4@t))) (a2efc@syntax-dispatch a41b4@t '(_ any)))) a41b0@e))) (set! a4183@library-import (lambda (a4194@e) ((lambda (a4196@t) ((lambda (a4198@ls/false) (if a4198@ls/false (apply (lambda (a419a@ctxt a419b@imp*) (call-with-values (lambda () (a2f61@parse-import-spec* (a2feb@syntax->datum a419b@imp*))) (lambda (a41a2@a419f a41a3@a41a1) ((lambda (a41a6@subst-labels a41a7@subst-names) (values (vector-map (lambda (a41aa@name) (a2ccf@datum->stx a419a@ctxt a41aa@name)) a41a7@subst-names) a41a6@subst-labels)) a41a3@a41a1 a41a2@a419f)))) a4198@ls/false) ((lambda (a41ac@t) ((lambda (a41ae@ls/false) (if a41ae@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid import form" a4194@e)) a41ae@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a41ac@t))) (a2efc@syntax-dispatch a41ac@t '_))) a4196@t))) (a2efc@syntax-dispatch a4196@t '(any . each-any)))) a4194@e))) (begin (call-with-values (lambda () (if (a417f@module-import? a40e2@e) (a4181@module-import a40e2@e a40cf@r) (a4183@library-import a40e2@e))) (lambda (a4188@a4185 a4189@a4187) ((lambda (a418c@lab* a418d@id*) (vector-for-each (lambda (a4190@id a4191@lab) (a2ca2@extend-rib! a40d6@rib a4190@id a4191@lab)) a418d@id* a418c@lab*)) a4189@a4187 a4188@a4185))) (a2f57@chi-body* (cdr a40ce@e*) a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?)))) '#f '#f '#f))) (if a40d7@top? (a2f57@chi-body* (cdr a40ce@e*) a40cf@r a40d0@mr (cons (a2c71@gen-lexical 'dummy) a40d1@lex*) (cons (cons 'top-expr a40e2@e) a40d2@rhs*) a40d3@mod** a40f6@kwd* a40d5@exp* a40d6@rib a40d7@top?) (values a40ce@e* a40cf@r a40d0@mr a40d1@lex* a40d2@rhs* a40d3@mod** a40f6@kwd* a40d5@exp*)))))))))))))) a40f2@type)) (if (a2cf1@id? a40f0@kwd) (cons a40f0@kwd a40d4@kwd*) a40d4@kwd*))) a40ec@a40e9 a40eb@a40e7 a40ea@a40e5)))) (car a40ce@e*))))) (set! a2f59@expand-transformer (lambda (a41e6@expr a41e7@r) ((lambda (a41ea@rtc) ((lambda (a41ec@expanded-rhs) (begin (for-each ((lambda (a41ee@mark-visit) (lambda (a41f0@x) (begin (a2b15@a29b6@invoke-library a41f0@x) (a41ee@mark-visit a41f0@x)))) (a2f69@vis-collector)) (a41ea@rtc)) a41ec@expanded-rhs)) ((lambda (a41fa@a41f3 a41fb@a41f5 a41fc@a41f7 a41fd@a41f9) ((lambda (a4202@swap) (dynamic-wind a4202@swap (lambda () (a2f1e@chi-expr a41e6@expr a41e7@r a41e7@r)) a4202@swap)) (lambda () (begin ((lambda (a4204@t) (begin (a41fa@a41f3 a41fc@a41f7) (set! a41fc@a41f7 a4204@t))) (a41fa@a41f3)) ((lambda (a4206@t) (begin (a41fb@a41f5 a41fd@a41f9) (set! a41fd@a41f9 a4206@t))) (a41fb@a41f5)))))) a2f67@inv-collector a2f69@vis-collector a41ea@rtc (lambda (a4208@x) (values))))) (a2f65@make-collector)))) (set! a2f5b@parse-exports (lambda (a420a@exp*) ((letrec ((a420c@f (lambda (a420e@exp* a420f@int* a4210@ext*) (if (null? a420e@exp*) (begin (if (not (a2cfb@valid-bound-ids? a4210@ext*)) (a2fe5@syntax-violation 'export '"invalid exports" (a2f32@find-dups a4210@ext*)) (void)) (values (map a2feb@syntax->datum a4210@ext*) a420f@int*)) ((lambda (a4214@t) ((lambda (a4216@ls/false) (if a4216@ls/false (apply (lambda (a4218@rename a4219@i* a421a@e*) (begin (if (not (and (eq? (a2feb@syntax->datum a4218@rename) 'rename) (for-all a2cf1@id? a4219@i*) (for-all a2cf1@id? a421a@e*))) (a2fe5@syntax-violation 'export '"invalid export specifier" (car a420e@exp*)) (void)) (a420c@f (cdr a420e@exp*) (append a4219@i* a420f@int*) (append a421a@e* a4210@ext*)))) a4216@ls/false) ((lambda (a421e@t) ((lambda (a4220@ls/false) (if a4220@ls/false (apply (lambda (a4222@ie) (begin (if (not (a2cf1@id? a4222@ie)) (a2fe5@syntax-violation 'export '"invalid export" a4222@ie) (void)) (a420c@f (cdr a420e@exp*) (cons a4222@ie a420f@int*) (cons a4222@ie a4210@ext*)))) a4220@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a421e@t))) (a2efc@syntax-dispatch a421e@t 'any))) a4214@t))) (a2efc@syntax-dispatch a4214@t '(any . #(each (any any)))))) (car a420e@exp*)))))) a420c@f) a420a@exp* '() '()))) (set! a2f5d@parse-library-name (lambda (a4224@spec) ((lambda (a4227@parse) (begin (set! a4227@parse (lambda (a4234@x) ((lambda (a4236@t) ((lambda (a4238@ls/false) (if (and a4238@ls/false (apply (lambda (a423a@v*) (for-all (lambda (a423c@x) ((lambda (a423e@x) (and (integer? a423e@x) (exact? a423e@x))) (a2feb@syntax->datum a423c@x))) a423a@v*)) a4238@ls/false)) (apply (lambda (a4240@v*) (values '() (map a2feb@syntax->datum a4240@v*))) a4238@ls/false) ((lambda (a4242@t) ((lambda (a4244@ls/false) (if (and a4244@ls/false (apply (lambda (a4246@x a4247@rest) (symbol? (a2feb@syntax->datum a4246@x))) a4244@ls/false)) (apply (lambda (a424a@x a424b@rest) (call-with-values (lambda () (a4227@parse a424b@rest)) (lambda (a4252@a424f a4253@a4251) ((lambda (a4256@v* a4257@x*) (values (cons (a2feb@syntax->datum a424a@x) a4257@x*) a4256@v*)) a4253@a4251 a4252@a424f)))) a4244@ls/false) ((lambda (a425a@t) ((lambda (a425c@ls/false) (if a425c@ls/false (apply (lambda () (values '() '())) a425c@ls/false) ((lambda (a425e@t) ((lambda (a4260@ls/false) (if a4260@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid library name" a4224@spec)) a4260@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a425e@t))) (a2efc@syntax-dispatch a425e@t '_))) a425a@t))) (a2efc@syntax-dispatch a425a@t '()))) a4242@t))) (a2efc@syntax-dispatch a4242@t '(any . any)))) a4236@t))) (a2efc@syntax-dispatch a4236@t '(each-any)))) a4234@x))) (call-with-values (lambda () (a4227@parse a4224@spec)) (lambda (a422c@a4229 a422d@a422b) ((lambda (a4230@ver* a4231@name*) (begin (if (null? a4231@name*) (a2fe5@syntax-violation '#f '"empty library name" a4224@spec) (void)) (values a4231@name* a4230@ver*))) a422d@a422b a422c@a4229))))) '#f))) (set! a2f5f@parse-library (lambda (a4262@e) ((lambda (a4264@t) ((lambda (a4266@ls/false) (if (and a4266@ls/false (apply (lambda (a4268@library a4269@name* a426a@export a426b@exp* a426c@import a426d@imp* a426e@b*) (and (eq? (a2feb@syntax->datum a426a@export) 'export) (eq? (a2feb@syntax->datum a426c@import) 'import) (eq? (a2feb@syntax->datum a4268@library) 'library))) a4266@ls/false)) (apply (lambda (a4276@library a4277@name* a4278@export a4279@exp* a427a@import a427b@imp* a427c@b*) (values a4277@name* a4279@exp* a427b@imp* a427c@b*)) a4266@ls/false) ((lambda (a4284@t) ((lambda (a4286@ls/false) (if a4286@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"malformed library" a4262@e)) a4286@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4284@t))) (a2efc@syntax-dispatch a4284@t '_))) a4264@t))) (a2efc@syntax-dispatch a4264@t '(any each-any (any . each-any) (any . each-any) . each-any)))) a4262@e))) (set! a2f61@parse-import-spec* ((lambda () ((lambda (a4289@idsyn? a428b@dup-error a428d@merge-substs a428f@exclude* a4291@find* a4293@rem* a4295@remove-dups a4297@parse-library-name a4299@import-library a429b@get-import a429d@add-imports!) (begin (set! a4289@idsyn? (lambda (a4492@x) (symbol? (a2feb@syntax->datum a4492@x)))) (set! a428b@dup-error (lambda (a4490@name) (a2fe5@syntax-violation 'import '"two imports with different bindings" a4490@name))) (set! a428d@merge-substs (lambda (a447e@s a447f@subst) ((lambda (a4483@insert-to-subst) (begin (set! a4483@insert-to-subst (lambda (a4484@a a4485@subst) ((lambda (a4488@name a4489@label) ((lambda (a448c@t) (if a448c@t ((lambda (a448e@x) (if (eq? (cdr a448e@x) a4489@label) a4485@subst (a428b@dup-error a4488@name))) a448c@t) (cons a4484@a a4485@subst))) (assq a4488@name a4485@subst))) (car a4484@a) (cdr a4484@a)))) (if (null? a447e@s) a447f@subst (a4483@insert-to-subst (car a447e@s) (a428d@merge-substs (cdr a447e@s) a447f@subst))))) '#f))) (set! a428f@exclude* (lambda (a444e@sym* a444f@subst) ((lambda (a4453@exclude) (begin (set! a4453@exclude (lambda (a446c@sym a446d@subst) (if (null? a446d@subst) (a2fe5@syntax-violation 'import '"cannot rename unbound identifier" a446c@sym) (if (eq? a446c@sym (caar a446d@subst)) (values (cdar a446d@subst) (cdr a446d@subst)) ((lambda (a4470@a) (call-with-values (lambda () (a4453@exclude a446c@sym (cdr a446d@subst))) (lambda (a4476@a4473 a4477@a4475) ((lambda (a447a@subst a447b@old) (values a447b@old (cons a4470@a a447a@subst))) a4477@a4475 a4476@a4473)))) (car a446d@subst)))))) (if (null? a444e@sym*) (values '() a444f@subst) (call-with-values (lambda () (a4453@exclude (car a444e@sym*) a444f@subst)) (lambda (a4458@a4455 a4459@a4457) ((lambda (a445c@subst a445d@old) (call-with-values (lambda () (a428f@exclude* (cdr a444e@sym*) a445c@subst)) (lambda (a4464@a4461 a4465@a4463) ((lambda (a4468@subst a4469@old*) (values (cons a445d@old a4469@old*) a4468@subst)) a4465@a4463 a4464@a4461)))) a4459@a4457 a4458@a4455)))))) '#f))) (set! a4291@find* (lambda (a4446@sym* a4447@subst) (map (lambda (a444a@x) ((lambda (a444c@t) (if a444c@t (cdr a444c@t) (a2fe5@syntax-violation 'import '"cannot find identifier" a444a@x))) (assq a444a@x a4447@subst))) a4446@sym*))) (set! a4293@rem* (lambda (a443e@sym* a443f@subst) ((letrec ((a4442@f (lambda (a4444@subst) (if (null? a4444@subst) '() (if (memq (caar a4444@subst) a443e@sym*) (a4442@f (cdr a4444@subst)) (cons (car a4444@subst) (a4442@f (cdr a4444@subst)))))))) a4442@f) a443f@subst))) (set! a4295@remove-dups (lambda (a443c@ls) (if (null? a443c@ls) '() (if (memq (car a443c@ls) (cdr a443c@ls)) (a4295@remove-dups (cdr a443c@ls)) (cons (car a443c@ls) (a4295@remove-dups (cdr a443c@ls))))))) (set! a4297@parse-library-name (lambda (a4354@spec) ((lambda (a4357@subversion? a4359@subversion-pred a435b@version-pred) (begin (set! a4357@subversion? (lambda (a4438@x) ((lambda (a443a@x) (and (integer? a443a@x) (exact? a443a@x) (>= a443a@x '0))) (a2feb@syntax->datum a4438@x)))) (set! a4359@subversion-pred (lambda (a43d8@x*) ((lambda (a43da@t) ((lambda (a43dc@ls/false) (if (and a43dc@ls/false (apply (lambda (a43de@n) (a4357@subversion? a43de@n)) a43dc@ls/false)) (apply (lambda (a43e0@n) (lambda (a43e2@x) (= a43e2@x (a2feb@syntax->datum a43e0@n)))) a43dc@ls/false) ((lambda (a43e4@t) ((lambda (a43e6@ls/false) (if (and a43e6@ls/false (apply (lambda (a43e8@p? a43e9@sub*) (eq? (a2feb@syntax->datum a43e8@p?) 'and)) a43e6@ls/false)) (apply (lambda (a43ec@p? a43ed@sub*) ((lambda (a43f0@p*) (lambda (a43f2@x) (for-all (lambda (a43f4@p) (a43f4@p a43f2@x)) a43f0@p*))) (map a4359@subversion-pred a43ed@sub*))) a43e6@ls/false) ((lambda (a43f6@t) ((lambda (a43f8@ls/false) (if (and a43f8@ls/false (apply (lambda (a43fa@p? a43fb@sub*) (eq? (a2feb@syntax->datum a43fa@p?) 'or)) a43f8@ls/false)) (apply (lambda (a43fe@p? a43ff@sub*) ((lambda (a4402@p*) (lambda (a4404@x) (exists (lambda (a4406@p) (a4406@p a4404@x)) a4402@p*))) (map a4359@subversion-pred a43ff@sub*))) a43f8@ls/false) ((lambda (a4408@t) ((lambda (a440a@ls/false) (if (and a440a@ls/false (apply (lambda (a440c@p? a440d@sub) (eq? (a2feb@syntax->datum a440c@p?) 'not)) a440a@ls/false)) (apply (lambda (a4410@p? a4411@sub) ((lambda (a4414@p) (lambda (a4416@x) (not (a4414@p a4416@x)))) (a4359@subversion-pred a4411@sub))) a440a@ls/false) ((lambda (a4418@t) ((lambda (a441a@ls/false) (if (and a441a@ls/false (apply (lambda (a441c@p? a441d@n) (and (eq? (a2feb@syntax->datum a441c@p?) '<=) (a4357@subversion? a441d@n))) a441a@ls/false)) (apply (lambda (a4420@p? a4421@n) (lambda (a4424@x) (<= a4424@x (a2feb@syntax->datum a4421@n)))) a441a@ls/false) ((lambda (a4426@t) ((lambda (a4428@ls/false) (if (and a4428@ls/false (apply (lambda (a442a@p? a442b@n) (and (eq? (a2feb@syntax->datum a442a@p?) '>=) (a4357@subversion? a442b@n))) a4428@ls/false)) (apply (lambda (a442e@p? a442f@n) (lambda (a4432@x) (>= a4432@x (a2feb@syntax->datum a442f@n)))) a4428@ls/false) ((lambda (a4434@t) ((lambda (a4436@ls/false) (if a4436@ls/false (apply (lambda () (a2fe5@syntax-violation 'import '"invalid sub-version spec" a4354@spec a43d8@x*)) a4436@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4434@t))) (a2efc@syntax-dispatch a4434@t '_))) a4426@t))) (a2efc@syntax-dispatch a4426@t '(any any)))) a4418@t))) (a2efc@syntax-dispatch a4418@t '(any any)))) a4408@t))) (a2efc@syntax-dispatch a4408@t '(any any)))) a43f6@t))) (a2efc@syntax-dispatch a43f6@t '(any . each-any)))) a43e4@t))) (a2efc@syntax-dispatch a43e4@t '(any . each-any)))) a43da@t))) (a2efc@syntax-dispatch a43da@t 'any))) a43d8@x*))) (set! a435b@version-pred (lambda (a4388@x*) ((lambda (a438a@t) ((lambda (a438c@ls/false) (if a438c@ls/false (apply (lambda () (lambda (a438e@x) '#t)) a438c@ls/false) ((lambda (a4390@t) ((lambda (a4392@ls/false) (if (and a4392@ls/false (apply (lambda (a4394@c a4395@ver*) (eq? (a2feb@syntax->datum a4394@c) 'and)) a4392@ls/false)) (apply (lambda (a4398@c a4399@ver*) ((lambda (a439c@p*) (lambda (a439e@x) (for-all (lambda (a43a0@p) (a43a0@p a439e@x)) a439c@p*))) (map a435b@version-pred a4399@ver*))) a4392@ls/false) ((lambda (a43a2@t) ((lambda (a43a4@ls/false) (if (and a43a4@ls/false (apply (lambda (a43a6@c a43a7@ver*) (eq? (a2feb@syntax->datum a43a6@c) 'or)) a43a4@ls/false)) (apply (lambda (a43aa@c a43ab@ver*) ((lambda (a43ae@p*) (lambda (a43b0@x) (exists (lambda (a43b2@p) (a43b2@p a43b0@x)) a43ae@p*))) (map a435b@version-pred a43ab@ver*))) a43a4@ls/false) ((lambda (a43b4@t) ((lambda (a43b6@ls/false) (if (and a43b6@ls/false (apply (lambda (a43b8@c a43b9@ver) (eq? (a2feb@syntax->datum a43b8@c) 'not)) a43b6@ls/false)) (apply (lambda (a43bc@c a43bd@ver) ((lambda (a43c0@p) (lambda (a43c2@x) (not (a43c0@p a43c2@x)))) (a435b@version-pred a43bd@ver))) a43b6@ls/false) ((lambda (a43c4@t) ((lambda (a43c6@ls/false) (if a43c6@ls/false (apply (lambda (a43c8@sub*) ((lambda (a43ca@p*) (lambda (a43cc@x) ((letrec ((a43ce@f (lambda (a43d0@p* a43d1@x) (if (null? a43d0@p*) '#t (if (null? a43d1@x) '#f (and ((car a43d0@p*) (car a43d1@x)) (a43ce@f (cdr a43d0@p*) (cdr a43d1@x)))))))) a43ce@f) a43ca@p* a43cc@x))) (map a4359@subversion-pred a43c8@sub*))) a43c6@ls/false) ((lambda (a43d4@t) ((lambda (a43d6@ls/false) (if a43d6@ls/false (apply (lambda () (a2fe5@syntax-violation 'import '"invalid version spec" a4354@spec a4388@x*)) a43d6@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a43d4@t))) (a2efc@syntax-dispatch a43d4@t '_))) a43c4@t))) (a2efc@syntax-dispatch a43c4@t 'each-any))) a43b4@t))) (a2efc@syntax-dispatch a43b4@t '(any any)))) a43a2@t))) (a2efc@syntax-dispatch a43a2@t '(any . each-any)))) a4390@t))) (a2efc@syntax-dispatch a4390@t '(any . each-any)))) a438a@t))) (a2efc@syntax-dispatch a438a@t '()))) a4388@x*))) ((letrec ((a435c@f (lambda (a435e@x) ((lambda (a4360@t) ((lambda (a4362@ls/false) (if a4362@ls/false (apply (lambda (a4364@version-spec*) (values '() (a435b@version-pred a4364@version-spec*))) a4362@ls/false) ((lambda (a4366@t) ((lambda (a4368@ls/false) (if (and a4368@ls/false (apply (lambda (a436a@x a436b@x*) (a4289@idsyn? a436a@x)) a4368@ls/false)) (apply (lambda (a436e@x a436f@x*) (call-with-values (lambda () (a435c@f a436f@x*)) (lambda (a4376@a4373 a4377@a4375) ((lambda (a437a@pred a437b@name) (values (cons (a2feb@syntax->datum a436e@x) a437b@name) a437a@pred)) a4377@a4375 a4376@a4373)))) a4368@ls/false) ((lambda (a437e@t) ((lambda (a4380@ls/false) (if a4380@ls/false (apply (lambda () (values '() (lambda (a4382@x) '#t))) a4380@ls/false) ((lambda (a4384@t) ((lambda (a4386@ls/false) (if a4386@ls/false (apply (lambda () (a2fe5@syntax-violation '#f '"invalid import spec" a4354@spec)) a4386@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4384@t))) (a2efc@syntax-dispatch a4384@t '_))) a437e@t))) (a2efc@syntax-dispatch a437e@t '()))) a4366@t))) (a2efc@syntax-dispatch a4366@t '(any . any)))) a4360@t))) (a2efc@syntax-dispatch a4360@t '(each-any)))) a435e@x)))) a435c@f) a4354@spec))) '#f '#f '#f))) (set! a4299@import-library (lambda (a4344@spec*) (call-with-values (lambda () (a4297@parse-library-name a4344@spec*)) (lambda (a434a@a4347 a434b@a4349) ((lambda (a434e@pred a434f@name) (begin (if (null? a434f@name) (a2fe5@syntax-violation 'import '"empty library name" a4344@spec*) (void)) ((lambda (a4352@lib) (begin (if (not a4352@lib) (a2fe5@syntax-violation 'import '"cannot find library with required name" a434f@name) (void)) (if (not (a434e@pred (a2ae6@a2958@library-version a4352@lib))) (a2fe5@syntax-violation 'import '"library does not satisfy version specification" a4344@spec* a4352@lib) (void)) ((a2f6b@imp-collector) a4352@lib) (a2aea@a2960@library-subst a4352@lib))) (a2b0e@a29a8@find-library-by-name a434f@name)))) a434b@a4349 a434a@a4347))))) (set! a429b@get-import (lambda (a42b6@spec) ((lambda (a42b8@t) ((lambda (a42ba@ls/false) (if (and a42ba@ls/false (apply (lambda (a42bc@x a42bd@x*) (not (memq (a2feb@syntax->datum a42bc@x) '(for rename except only prefix library)))) a42ba@ls/false)) (apply (lambda (a42c0@x a42c1@x*) (a4299@import-library (cons a42c0@x a42c1@x*))) a42ba@ls/false) ((lambda (a42c4@t) ((lambda (a42c6@ls/false) (if (and a42c6@ls/false (apply (lambda (a42c8@rename a42c9@isp a42ca@old* a42cb@new*) (and (eq? (a2feb@syntax->datum a42c8@rename) 'rename) (for-all a4289@idsyn? a42ca@old*) (for-all a4289@idsyn? a42cb@new*))) a42c6@ls/false)) (apply (lambda (a42d0@rename a42d1@isp a42d2@old* a42d3@new*) ((lambda (a42d8@subst a42d9@old* a42da@new*) ((lambda (a42de@old-label*) ((lambda (a42e0@subst) (a428d@merge-substs (map cons a42da@new* a42de@old-label*) a42e0@subst)) (a4293@rem* a42d9@old* a42d8@subst))) (a4291@find* a42d9@old* a42d8@subst))) (a429b@get-import a42d1@isp) (map a2feb@syntax->datum a42d2@old*) (map a2feb@syntax->datum a42d3@new*))) a42c6@ls/false) ((lambda (a42e2@t) ((lambda (a42e4@ls/false) (if (and a42e4@ls/false (apply (lambda (a42e6@except a42e7@isp a42e8@sym*) (and (eq? (a2feb@syntax->datum a42e6@except) 'except) (for-all a4289@idsyn? a42e8@sym*))) a42e4@ls/false)) (apply (lambda (a42ec@except a42ed@isp a42ee@sym*) ((lambda (a42f2@subst) (a4293@rem* (map a2feb@syntax->datum a42ee@sym*) a42f2@subst)) (a429b@get-import a42ed@isp))) a42e4@ls/false) ((lambda (a42f4@t) ((lambda (a42f6@ls/false) (if (and a42f6@ls/false (apply (lambda (a42f8@only a42f9@isp a42fa@sym*) (and (eq? (a2feb@syntax->datum a42f8@only) 'only) (for-all a4289@idsyn? a42fa@sym*))) a42f6@ls/false)) (apply (lambda (a42fe@only a42ff@isp a4300@sym*) ((lambda (a4304@subst a4305@sym*) ((lambda (a4308@sym*) ((lambda (a430a@lab*) (map cons a4308@sym* a430a@lab*)) (a4291@find* a4308@sym* a4304@subst))) (a4295@remove-dups a4305@sym*))) (a429b@get-import a42ff@isp) (map a2feb@syntax->datum a4300@sym*))) a42f6@ls/false) ((lambda (a430c@t) ((lambda (a430e@ls/false) (if (and a430e@ls/false (apply (lambda (a4310@prefix a4311@isp a4312@p) (and (eq? (a2feb@syntax->datum a4310@prefix) 'prefix) (a4289@idsyn? a4312@p))) a430e@ls/false)) (apply (lambda (a4316@prefix a4317@isp a4318@p) ((lambda (a431c@subst a431d@prefix) (map (lambda (a4320@x) (cons (string->symbol (string-append a431d@prefix (symbol->string (car a4320@x)))) (cdr a4320@x))) a431c@subst)) (a429b@get-import a4317@isp) (symbol->string (a2feb@syntax->datum a4318@p)))) a430e@ls/false) ((lambda (a4322@t) ((lambda (a4324@ls/false) (if (and a4324@ls/false (apply (lambda (a4326@library a4327@spec*) (eq? (a2feb@syntax->datum a4326@library) 'library)) a4324@ls/false)) (apply (lambda (a432a@library a432b@spec*) (a4299@import-library a432b@spec*)) a4324@ls/false) ((lambda (a432e@t) ((lambda (a4330@ls/false) (if (and a4330@ls/false (apply (lambda (a4332@for a4333@isp a4334@rest) (eq? (a2feb@syntax->datum a4332@for) 'for)) a4330@ls/false)) (apply (lambda (a4338@for a4339@isp a433a@rest) (a429b@get-import a4339@isp)) a4330@ls/false) ((lambda (a433e@t) ((lambda (a4340@ls/false) (if a4340@ls/false (apply (lambda (a4342@spec) (a2fe5@syntax-violation 'import '"invalid import spec" a4342@spec)) a4340@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a433e@t))) (a2efc@syntax-dispatch a433e@t 'any))) a432e@t))) (a2efc@syntax-dispatch a432e@t '(any any . any)))) a4322@t))) (a2efc@syntax-dispatch a4322@t '(any each-any)))) a430c@t))) (a2efc@syntax-dispatch a430c@t '(any any any)))) a42f4@t))) (a2efc@syntax-dispatch a42f4@t '(any any . each-any)))) a42e2@t))) (a2efc@syntax-dispatch a42e2@t '(any any . each-any)))) a42c4@t))) (a2efc@syntax-dispatch a42c4@t '(any any . #(each (any any)))))) a42b8@t))) (a2efc@syntax-dispatch a42b8@t '(any . each-any)))) a42b6@spec))) (set! a429d@add-imports! (lambda (a42a6@imp a42a7@h) ((lambda (a42aa@subst) (for-each (lambda (a42ac@x) ((lambda (a42ae@name a42af@label) ((lambda (a42b2@t) (if a42b2@t ((lambda (a42b4@l) (if (not (eq? a42b4@l a42af@label)) (a428b@dup-error a42ae@name) (void))) a42b2@t) (hashtable-set! a42a7@h a42ae@name a42af@label))) (hashtable-ref a42a7@h a42ae@name '#f))) (car a42ac@x) (cdr a42ac@x))) a42aa@subst)) (a429b@get-import a42a6@imp)))) (lambda (a429e@imp*) ((letrec ((a42a0@f (lambda (a42a2@imp* a42a3@h) (if (null? a42a2@imp*) (hashtable-entries a42a3@h) (begin (a429d@add-imports! (car a42a2@imp*) a42a3@h) (a42a0@f (cdr a42a2@imp*) a42a3@h)))))) a42a0@f) a429e@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! a2f63@make-top-rib (lambda (a4494@names a4495@labels) ((lambda (a4498@rib) (begin (vector-for-each (lambda (a449a@name a449b@label) (begin (if (not (symbol? a449a@name)) (error 'make-top-rib '"BUG: not a symbol" a449a@name) (void)) (a2ca4@extend-rib/nc! a4498@rib (a2cbb@make-stx a449a@name a2c6d@top-mark* '() '()) a449b@label))) a4494@names a4495@labels) a4498@rib)) (a2ca0@make-empty-rib)))) (set! a2f65@make-collector (lambda () ((lambda (a449e@ls) (lambda a44a2 ((lambda (a44a3) (if (= a44a3 '0) (apply (lambda () a449e@ls) a44a2) (if (= a44a3 '1) (apply (lambda (a44a0@x) (set! a449e@ls (a2c66@set-cons a44a0@x a449e@ls))) a44a2) (error 'apply '"invalid arg count")))) (length a44a2)))) '()))) (set! a2f67@inv-collector (a289b@a27c5@make-parameter (lambda a44a4@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (a44a6@x) (begin (if (not (procedure? a44a6@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" a44a6@x) (void)) a44a6@x)))) (set! a2f69@vis-collector (a289b@a27c5@make-parameter (lambda a44a8@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (a44aa@x) (begin (if (not (procedure? a44aa@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" a44aa@x) (void)) a44aa@x)))) (set! a2f6b@imp-collector (a289b@a27c5@make-parameter (lambda a44ac@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (a44ae@x) (begin (if (not (procedure? a44ae@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" a44ae@x) (void)) a44ae@x)))) (set! a2f6d@chi-library-internal (lambda (a44b0@e* a44b1@rib a44b2@top?) (call-with-values (lambda () (a2f57@chi-body* a44b0@e* '() '() '() '() '() '() '() a44b1@rib a44b2@top?)) (lambda (a44c6@a44b7 a44c7@a44b9 a44c8@a44bb a44c9@a44bd a44ca@a44bf a44cb@a44c1 a44cc@a44c3 a44cd@a44c5) ((lambda (a44d6@exp* a44d7@_kwd* a44d8@mod** a44d9@rhs* a44da@lex* a44db@mr a44dc@r a44dd@e*) (values (append (apply append (reverse a44d8@mod**)) a44dd@e*) a44dc@r a44db@mr (reverse a44da@lex*) (reverse a44d9@rhs*) a44d6@exp*)) a44cd@a44c5 a44cc@a44c3 a44cb@a44c1 a44ca@a44bf a44c9@a44bd a44c8@a44bb a44c7@a44b9 a44c6@a44b7))))) (set! a2f6f@chi-interaction-expr (lambda (a44e6@e a44e7@rib a44e8@r) (call-with-values (lambda () (a2f57@chi-body* (list a44e6@e) a44e8@r a44e8@r '() '() '() '() '() a44e7@rib '#t)) (lambda (a44fc@a44ed a44fd@a44ef a44fe@a44f1 a44ff@a44f3 a4500@a44f5 a4501@a44f7 a4502@a44f9 a4503@a44fb) ((lambda (a450c@_exp* a450d@_kwd* a450e@mod** a450f@rhs* a4510@lex* a4511@mr a4512@r a4513@e*) ((lambda (a451c@e*) ((lambda (a451e@e) (values a451e@e a4512@r)) (if (null? a451c@e*) (a2c51@a2bc1@build-void) (if (null? (cdr a451c@e*)) (car a451c@e*) (a2c50@a2bbf@build-sequence '#f a451c@e*))))) (a2f2c@expand-interaction-rhs*/init* (reverse a4510@lex*) (reverse a450f@rhs*) (append (apply append (reverse a450e@mod**)) a4513@e*) a4512@r a4511@mr))) a4503@a44fb a4502@a44f9 a4501@a44f7 a4500@a44f5 a44ff@a44f3 a44fe@a44f1 a44fd@a44ef a44fc@a44ed))))) (set! a2f71@library-body-expander (lambda (a4520@name a4521@main-exp* a4522@imp* a4523@b* a4524@top?) ((lambda (a452b@itc) (begin (set! a452b@itc (a2f65@make-collector)) ((lambda (a4534@a452d a4535@a452f a4536@a4531 a4537@a4533) ((lambda (a453c@swap) (dynamic-wind a453c@swap (lambda () (call-with-values (lambda () (a2f61@parse-import-spec* a4522@imp*)) (lambda (a4542@a453f a4543@a4541) ((lambda (a4546@subst-labels a4547@subst-names) ((lambda (a454a@rib) ((lambda (a454d@wrap) (begin (set! a454d@wrap (lambda (a45c8@x) (a2cbb@make-stx a45c8@x a2c6d@top-mark* (list a454a@rib) '()))) ((lambda (a454e@b* a454f@main-exp* a4550@rtc a4551@vtc) ((lambda (a455e@a4557 a455f@a4559 a4560@a455b a4561@a455d) ((lambda (a4566@swap) (dynamic-wind a4566@swap (lambda () (call-with-values (lambda () (a2f6d@chi-library-internal a454e@b* a454a@rib a4524@top?)) (lambda (a4574@a4569 a4575@a456b a4576@a456d a4577@a456f a4578@a4571 a4579@a4573) ((lambda (a4580@internal-exp* a4581@rhs* a4582@lex* a4583@mr a4584@r a4585@init*) (call-with-values (lambda () (a2f5b@parse-exports (append a454f@main-exp* a4580@internal-exp*))) (lambda (a4590@a458d a4591@a458f) ((lambda (a4594@exp-id* a4595@exp-name*) (begin (a2ca8@seal-rib! a454a@rib) ((lambda (a4598@init*) ((lambda (a459a@rhs*) ((lambda () (begin (a2caa@unseal-rib! a454a@rib) ((lambda (a459c@loc* a459d@export-subst) ((lambda (a45a1@errstr) (begin (set! a45a1@errstr '"attempt to export mutated variable") (call-with-values (lambda () (a2fd1@make-export-env/macros a4582@lex* a459c@loc* a4584@r)) (lambda (a45a8@a45a3 a45a9@a45a5 a45aa@a45a7) ((lambda (a45ae@macro* a45af@global* a45b0@export-env) (begin (for-each (lambda (a45b4@s) ((lambda (a45b6@name a45b7@label) ((lambda (a45ba@p) (if a45ba@p ((lambda (a45bc@b) ((lambda (a45be@type) (if (eq? a45be@type 'mutable) (a2fe5@syntax-violation 'export a45a1@errstr a45b6@name) (void))) (car a45bc@b))) (cdr a45ba@p)) (void))) (assq a45b7@label a45b0@export-env))) (car a45b4@s) (cdr a45b4@s))) a459d@export-subst) ((lambda (a45c0@invoke-body a45c1@invoke-definitions) (values (a452b@itc) (a4550@rtc) (a4551@vtc) (a2c50@a2bbf@build-sequence '#f (append a45c1@invoke-definitions (list a45c0@invoke-body))) a45ae@macro* a459d@export-subst a45b0@export-env)) (a2c53@a2bc5@build-letrec* '#f a4582@lex* a459a@rhs* (a2fcd@build-exports a45af@global* a4598@init*)) (map a2c4c@a2b1c@build-global-define (map cdr a45af@global*))))) a45aa@a45a7 a45a9@a45a5 a45a8@a45a3))))) '#f)) (map a2c73@gen-global a4582@lex*) (a2fcf@make-export-subst a4595@exp-name* a4594@exp-id*)))))) (a2f2e@chi-rhs* a4581@rhs* a4584@r a4583@mr))) (a2f1a@chi-expr* a4585@init* a4584@r a4583@mr)))) a4591@a458f a4590@a458d)))) a4579@a4573 a4578@a4571 a4577@a456f a4576@a456d a4575@a456b a4574@a4569)))) a4566@swap)) (lambda () (begin ((lambda (a45c4@t) (begin (a455e@a4557 a4560@a455b) (set! a4560@a455b a45c4@t))) (a455e@a4557)) ((lambda (a45c6@t) (begin (a455f@a4559 a4561@a455d) (set! a4561@a455d a45c6@t))) (a455f@a4559)))))) a2f67@inv-collector a2f69@vis-collector a4550@rtc a4551@vtc)) (map a454d@wrap a4523@b*) (map a454d@wrap a4521@main-exp*) (a2f65@make-collector) (a2f65@make-collector)))) '#f)) (a2f63@make-top-rib a4547@subst-names a4546@subst-labels))) a4543@a4541 a4542@a453f)))) a453c@swap)) (lambda () (begin ((lambda (a45ca@t) (begin (a4534@a452d a4536@a4531) (set! a4536@a4531 a45ca@t))) (a4534@a452d)) ((lambda (a45cc@t) (begin (a4535@a452f a4537@a4533) (set! a4537@a4533 a45cc@t))) (a4535@a452f)))))) a2f6b@imp-collector a2ff3@top-level-context a452b@itc '#f))) '#f))) (set! a2f73@core-library-expander (lambda (a45ce@e a45cf@verify-name) (call-with-values (lambda () (a2f5f@parse-library a45ce@e)) (lambda (a45da@a45d3 a45db@a45d5 a45dc@a45d7 a45dd@a45d9) ((lambda (a45e2@b* a45e3@imp* a45e4@exp* a45e5@name*) (call-with-values (lambda () (a2f5d@parse-library-name a45e5@name*)) (lambda (a45ee@a45eb a45ef@a45ed) ((lambda (a45f2@ver a45f3@name) (begin (a45cf@verify-name a45f3@name) (call-with-values (lambda () (a2f71@library-body-expander a45f3@name a45e4@exp* a45e3@imp* a45e2@b* '#f)) (lambda (a4604@a45f7 a4605@a45f9 a4606@a45fb a4607@a45fd a4608@a45ff a4609@a4601 a460a@a4603) ((lambda (a4612@export-env a4613@export-subst a4614@visit-code a4615@invoke-code a4616@visit-req* a4617@invoke-req* a4618@imp*) (values a45f3@name a45f2@ver a4618@imp* a4617@invoke-req* a4616@visit-req* a4615@invoke-code a4614@visit-code a4613@export-subst a4612@export-env)) a460a@a4603 a4609@a4601 a4608@a45ff a4607@a45fd a4606@a45fb a4605@a45f9 a4604@a45f7))))) a45ef@a45ed a45ee@a45eb)))) a45dd@a45d9 a45dc@a45d7 a45db@a45d5 a45da@a45d3))))) (set! a2f75@parse-top-level-program (lambda (a4620@e*) ((lambda (a4622@t) ((lambda (a4624@ls/false) (if (and a4624@ls/false (apply (lambda (a4626@import a4627@imp* a4628@b*) (eq? (a2feb@syntax->datum a4626@import) 'import)) a4624@ls/false)) (apply (lambda (a462c@import a462d@imp* a462e@b*) (values a462d@imp* a462e@b*)) a4624@ls/false) ((lambda (a4632@t) ((lambda (a4634@ls/false) (if (and a4634@ls/false (apply (lambda (a4636@import a4637@x a4638@y) (eq? (a2feb@syntax->datum a4636@import) 'import)) a4634@ls/false)) (apply (lambda (a463c@import a463d@x a463e@y) (a2fe5@syntax-violation 'expander '"invalid syntax of top-level program" (a2ceb@syntax-car a4620@e*))) a4634@ls/false) ((lambda (a4642@t) ((lambda (a4644@ls/false) (if a4644@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) a4644@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4642@t))) (a2efc@syntax-dispatch a4642@t '_))) a4632@t))) (a2efc@syntax-dispatch a4632@t '((any . any) . any)))) a4622@t))) (a2efc@syntax-dispatch a4622@t '((any . each-any) . each-any)))) a4620@e*))) (set! a2f77@top-level-expander (lambda (a4646@e*) (call-with-values (lambda () (a2f75@parse-top-level-program a4646@e*)) (lambda (a464c@a4649 a464d@a464b) ((lambda (a4650@b* a4651@imp*) (call-with-values (lambda () (a2f71@library-body-expander '() '() a4651@imp* a4650@b* '#t)) (lambda (a4662@a4655 a4663@a4657 a4664@a4659 a4665@a465b a4666@a465d a4667@a465f a4668@a4661) ((lambda (a4670@export-env a4671@export-subst a4672@visit-code a4673@invoke-code a4674@visit-req* a4675@invoke-req* a4676@imp*) (values a4675@invoke-req* a4673@invoke-code)) a4668@a4661 a4667@a465f a4666@a465d a4665@a465b a4664@a4659 a4663@a4657 a4662@a4655)))) a464d@a464b a464c@a4649))))) (set! a2f7d@a2f78 (make-record-type-descriptor 'env '#f 'a2f7b '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! a2f7f@a2f7a '#f) (set! a2f81@a2f79 (make-record-constructor-descriptor a2f7d@a2f78 '#f a2f7f@a2f7a)) (set! a2f84@env? (record-predicate a2f7d@a2f78)) (set! a2f86@make-env (record-constructor a2f81@a2f79)) (set! a2f88@env-names (record-accessor a2f7d@a2f78 '0)) (set! a2f8a@env-labels (record-accessor a2f7d@a2f78 '1)) (set! a2f8c@env-itc (record-accessor a2f7d@a2f78 '2)) (set! a2f8e@set-env-names! (record-mutator a2f7d@a2f78 '0)) (set! a2f90@set-env-labels! (record-mutator a2f7d@a2f78 '1)) (set! a2f92@set-env-itc! (record-mutator a2f7d@a2f78 '2)) (set! a2f94@rp (a2898@a27bf@make-record-printer 'env (lambda (a467e@x a467f@p a4680@wr) (display '"#<environment>" a467f@p)))) (set! a2f9a@a2f95 (make-record-type-descriptor 'interaction-env '#f 'a2f98 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! a2f9c@a2f97 '#f) (set! a2f9e@a2f96 (make-record-constructor-descriptor a2f9a@a2f95 '#f a2f9c@a2f97)) (set! a2fa1@interaction-env? (record-predicate a2f9a@a2f95)) (set! a2fa3@make-interaction-env (record-constructor a2f9e@a2f96)) (set! a2fa5@interaction-env-rib (record-accessor a2f9a@a2f95 '0)) (set! a2fa7@interaction-env-r (record-accessor a2f9a@a2f95 '1)) (set! a2fa9@interaction-env-locs (record-accessor a2f9a@a2f95 '2)) (set! a2fab@set-interaction-env-rib! (record-mutator a2f9a@a2f95 '0)) (set! a2fad@set-interaction-env-r! (record-mutator a2f9a@a2f95 '1)) (set! a2faf@set-interaction-env-locs! (record-mutator a2f9a@a2f95 '2)) (set! a2fb1@rp (a2898@a27bf@make-record-printer 'interaction-env (lambda (a4684@x a4685@p a4686@wr) (display '"#<environment>" a4685@p)))) (set! a2fb3@interaction-environment-symbols (lambda () (a2fbb@environment-symbols (a2ff1@interaction-environment)))) (set! a2fb5@environment-bindings (lambda (a468a@e) (vector->list (vector-map (lambda (a468c@name a468d@label) (a2fb7@parse-binding (cons a468c@name (a2b14@a29b4@imported-label->binding a468d@label)))) (a2f88@env-names a468a@e) (a2f8a@env-labels a468a@e))))) (set! a2fb7@parse-binding (lambda (a4690@b) (cons (car a4690@b) ((lambda (a4692@t) (if (memv a4692@t '(core-prim global)) 'procedure (if (memv a4692@t '(core-macro macro global-macro)) 'syntax (if (memv a4692@t '($core-rtd)) 'record (if (eq? (car a4690@b) (cadr a4690@b)) 'syntax 'unknown))))) (cadr a4690@b))))) (set! a2fb9@environment? (lambda (a4694@x) (or (a2f84@env? a4694@x) (a2fa1@interaction-env? a4694@x)))) (set! a2fbb@environment-symbols (lambda (a4696@x) (if (a2f84@env? a4696@x) (vector->list (a2f88@env-names a4696@x)) (if (a2fa1@interaction-env? a4696@x) (map values (a2c8c@rib-sym* (a2fa5@interaction-env-rib a4696@x))) (assertion-violation 'environment-symbols '"not an environment" a4696@x))))) (set! a2fbd@environment (lambda a4698@imp* ((lambda (a469a@itc) ((lambda (a46a0@a469d a46a1@a469f) ((lambda (a46a4@swap) (dynamic-wind a46a4@swap (lambda () (call-with-values (lambda () (a2f61@parse-import-spec* a4698@imp*)) (lambda (a46aa@a46a7 a46ab@a46a9) ((lambda (a46ae@subst-labels a46af@subst-names) (a2f86@make-env a46af@subst-names a46ae@subst-labels a469a@itc)) a46ab@a46a9 a46aa@a46a7)))) a46a4@swap)) (lambda () ((lambda (a46b2@t) (begin (a46a0@a469d a46a1@a469f) (set! a46a1@a469f a46b2@t))) (a46a0@a469d))))) a2f6b@imp-collector a469a@itc)) (a2f65@make-collector)))) (set! a2fbf@null-environment (lambda (a46b4@n) (begin (if (not (eqv? a46b4@n '5)) (assertion-violation 'null-environment '"not 5" a46b4@n) (void)) (a2fbd@environment '(psyntax null-environment-5))))) (set! a2fc1@scheme-report-environment (lambda (a46b6@n) (begin (if (not (eqv? a46b6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" a46b6@n) (void)) (a2fbd@environment '(psyntax scheme-report-environment-5))))) (set! a2fc3@expand (lambda (a46b8@x a46b9@env) (if (a2f84@env? a46b9@env) ((lambda (a46bc@rib) ((lambda (a46be@x a46bf@itc a46c0@rtc a46c1@vtc) ((lambda (a46c6@x) (begin (a2ca8@seal-rib! a46bc@rib) (values a46c6@x (a46c0@rtc)))) ((lambda (a46d8@a46c9 a46d9@a46cb a46da@a46cd a46db@a46cf a46dc@a46d1 a46dd@a46d3 a46de@a46d5 a46df@a46d7) ((lambda (a46e8@swap) (dynamic-wind a46e8@swap (lambda () (a2f1e@chi-expr a46be@x '() '())) a46e8@swap)) (lambda () (begin ((lambda (a46ea@t) (begin (a46d8@a46c9 a46dc@a46d1) (set! a46dc@a46d1 a46ea@t))) (a46d8@a46c9)) ((lambda (a46ec@t) (begin (a46d9@a46cb a46dd@a46d3) (set! a46dd@a46d3 a46ec@t))) (a46d9@a46cb)) ((lambda (a46ee@t) (begin (a46da@a46cd a46de@a46d5) (set! a46de@a46d5 a46ee@t))) (a46da@a46cd)) ((lambda (a46f0@t) (begin (a46db@a46cf a46df@a46d7) (set! a46df@a46d7 a46f0@t))) (a46db@a46cf)))))) a2ff3@top-level-context a2f67@inv-collector a2f69@vis-collector a2f6b@imp-collector '#f a46c0@rtc a46c1@vtc a46bf@itc))) (a2cbb@make-stx a46b8@x a2c6d@top-mark* (list a46bc@rib) '()) (a2f8c@env-itc a46b9@env) (a2f65@make-collector) (a2f65@make-collector))) (a2f63@make-top-rib (a2f88@env-names a46b9@env) (a2f8a@env-labels a46b9@env))) (if (a2fa1@interaction-env? a46b9@env) ((lambda (a46f2@rib a46f3@r a46f4@rtc) ((lambda (a46f8@x) (call-with-values (lambda () ((lambda (a470e@a46ff a470f@a4701 a4710@a4703 a4711@a4705 a4712@a4707 a4713@a4709 a4714@a470b a4715@a470d) ((lambda (a471e@swap) (dynamic-wind a471e@swap (lambda () (a2f6f@chi-interaction-expr a46f8@x a46f2@rib a46f3@r)) a471e@swap)) (lambda () (begin ((lambda (a4720@t) (begin (a470e@a46ff a4712@a4707) (set! a4712@a4707 a4720@t))) (a470e@a46ff)) ((lambda (a4722@t) (begin (a470f@a4701 a4713@a4709) (set! a4713@a4709 a4722@t))) (a470f@a4701)) ((lambda (a4724@t) (begin (a4710@a4703 a4714@a470b) (set! a4714@a470b a4724@t))) (a4710@a4703)) ((lambda (a4726@t) (begin (a4711@a4705 a4715@a470d) (set! a4715@a470d a4726@t))) (a4711@a4705)))))) a2ff3@top-level-context a2f67@inv-collector a2f69@vis-collector a2f6b@imp-collector a46b9@env a46f4@rtc (a2f65@make-collector) (a2f65@make-collector))) (lambda (a4728@a46fb a4729@a46fd) ((lambda (a472c@r^ a472d@e) (begin (a2fad@set-interaction-env-r! a46b9@env a472c@r^) (values a472d@e (a46f4@rtc)))) a4729@a46fd a4728@a46fb)))) (a2cbb@make-stx a46b8@x a2c6d@top-mark* (list a46f2@rib) '()))) (a2fa5@interaction-env-rib a46b9@env) (a2fa7@interaction-env-r a46b9@env) (a2f65@make-collector)) (assertion-violation 'expand '"not an environment" a46b9@env))))) (set! a2fc5@eval (lambda (a4730@x a4731@env) (begin (if (not (a2fb9@environment? a4731@env)) (error 'eval '"not an environment" a4731@env) (void)) (call-with-values (lambda () (a2fc3@expand a4730@x a4731@env)) (lambda (a4738@a4735 a4739@a4737) ((lambda (a473c@invoke-req* a473d@x) (begin (for-each a2b15@a29b6@invoke-library a473c@invoke-req*) (eval-core (a28ef@a28a7@expanded->core a473d@x)))) a4739@a4737 a4738@a4735)))))) (set! a2fc7@library-expander (lambda a47ae ((lambda (a47af) (if (= a47af '3) (apply (lambda (a4740@x a4741@filename a4742@verify-name) ((lambda (a4747@build-visit-code a4749@visit!) (begin (set! a4747@build-visit-code (lambda (a479c@macro*) (if (null? a479c@macro*) (a2c51@a2bc1@build-void) (a2c50@a2bbf@build-sequence '#f (map (lambda (a479e@x) ((lambda (a47a0@loc a47a1@src) (list 'set! a47a0@loc a47a1@src)) (car a479e@x) (cddr a479e@x))) a479c@macro*))))) (set! a4749@visit! (lambda (a4794@macro*) (for-each (lambda (a4796@x) ((lambda (a4798@loc a4799@proc) (set-symbol-value! a4798@loc a4799@proc)) (car a4796@x) (cadr a4796@x))) a4794@macro*))) (call-with-values (lambda () (a2f73@core-library-expander a4740@x a4742@verify-name)) (lambda (a475c@a474b a475d@a474d a475e@a474f a475f@a4751 a4760@a4753 a4761@a4755 a4762@a4757 a4763@a4759 a4764@a475b) ((lambda (a476e@export-env a476f@export-subst a4770@macro* a4771@invoke-code a4772@vis* a4773@inv* a4774@imp* a4775@ver a4776@name) ((lambda (a4780@id a4781@name a4782@ver a4783@imp* a4784@vis* a4785@inv* a4786@visit-proc a4787@invoke-proc a4788@visit-code a4789@invoke-code) (begin (a2b13@a29b2@install-library a4780@id a4781@name a4782@ver a4783@imp* a4784@vis* a4785@inv* a476f@export-subst a476e@export-env a4786@visit-proc a4787@invoke-proc a4788@visit-code a4789@invoke-code '#t a4741@filename) (values a4780@id a4781@name a4782@ver a4783@imp* a4784@vis* a4785@inv* a4789@invoke-code a4788@visit-code a476f@export-subst a476e@export-env))) (gensym) a4776@name a4775@ver (map a2b19@a29be@library-spec a4774@imp*) (map a2b19@a29be@library-spec a4772@vis*) (map a2b19@a29be@library-spec a4773@inv*) (lambda () (a4749@visit! a4770@macro*)) (lambda () (eval-core (a28ef@a28a7@expanded->core a4771@invoke-code))) (a4747@build-visit-code a4770@macro*) a4771@invoke-code)) a4764@a475b a4763@a4759 a4762@a4757 a4761@a4755 a4760@a4753 a475f@a4751 a475e@a474f a475d@a474d a475c@a474b))))) '#f '#f)) a47ae) (if (= a47af '2) (apply (lambda (a47a4@x a47a5@filename) (a2fc7@library-expander a47a4@x a47a5@filename (lambda (a47a8@x) (values)))) a47ae) (if (= a47af '1) (apply (lambda (a47aa@x) (a2fc7@library-expander a47aa@x '#f (lambda (a47ac@x) (values)))) a47ae) (error 'apply '"invalid arg count"))))) (length a47ae)))) (set! a2fc9@boot-library-expand (lambda (a47b0@x) (call-with-values (lambda () (a2fc7@library-expander a47b0@x)) (lambda (a47c6@a47b3 a47c7@a47b5 a47c8@a47b7 a47c9@a47b9 a47ca@a47bb a47cb@a47bd a47cc@a47bf a47cd@a47c1 a47ce@a47c3 a47cf@a47c5) ((lambda (a47da@export-env a47db@export-subst a47dc@visit-code a47dd@invoke-code a47de@inv* a47df@vis* a47e0@imp* a47e1@ver a47e2@name a47e3@id) (values a47e2@name a47dd@invoke-code a47db@export-subst a47da@export-env)) a47cf@a47c5 a47ce@a47c3 a47cd@a47c1 a47cc@a47bf a47cb@a47bd a47ca@a47bb a47c9@a47b9 a47c8@a47b7 a47c7@a47b5 a47c6@a47b3))))) (set! a2fcb@rev-map-append (lambda (a47ee@f a47ef@ls a47f0@ac) (if (null? a47ef@ls) a47f0@ac (a2fcb@rev-map-append a47ee@f (cdr a47ef@ls) (cons (a47ee@f (car a47ef@ls)) a47f0@ac))))) (set! a2fcd@build-exports (lambda (a47f4@lex*+loc* a47f5@init*) (a2c50@a2bbf@build-sequence '#f (cons (a2c51@a2bc1@build-void) (a2fcb@rev-map-append (lambda (a47f8@x) (list 'set! (cdr a47f8@x) (car a47f8@x))) a47f4@lex*+loc* a47f5@init*))))) (set! a2fcf@make-export-subst (lambda (a47fa@name* a47fb@id*) (map (lambda (a47fe@name a47ff@id) ((lambda (a4802@label) (begin (if (not a4802@label) (a2fe5@syntax-violation '#f '"cannot export unbound identifier" a47ff@id) (void)) (cons a47fe@name a4802@label))) (a2d0b@id->label a47ff@id))) a47fa@name* a47fb@id*))) (set! a2fd1@make-export-env/macros (lambda (a4804@lex* a4805@loc* a4806@r) ((lambda (a480b@lookup) (begin (set! a480b@lookup (lambda (a4828@x) ((letrec ((a482a@f (lambda (a482c@x a482d@lex* a482e@loc*) (if (pair? a482d@lex*) (if (eq? a482c@x (car a482d@lex*)) (car a482e@loc*) (a482a@f a482c@x (cdr a482d@lex*) (cdr a482e@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) a482a@f) a4828@x a4804@lex* a4805@loc*))) ((letrec ((a480c@f (lambda (a480e@r a480f@env a4810@global* a4811@macro*) (if (null? a480e@r) (values a480f@env a4810@global* a4811@macro*) ((lambda (a4816@x) ((lambda (a4818@label a4819@b) ((lambda (a481c@t) (if (memv a481c@t '(lexical)) ((lambda (a481e@v) ((lambda (a4820@loc a4821@type) (a480c@f (cdr a480e@r) (cons (cons* a4818@label a4821@type a4820@loc) a480f@env) (cons (cons (a2e88@lexical-var a481e@v) a4820@loc) a4810@global*) a4811@macro*)) (a480b@lookup (a2e88@lexical-var a481e@v)) (if (a2e8a@lexical-mutable? a481e@v) 'mutable 'global))) (a2d15@binding-value a4819@b)) (if (memv a481c@t '(local-macro)) ((lambda (a4824@loc) (a480c@f (cdr a480e@r) (cons (cons* a4818@label 'global-macro a4824@loc) a480f@env) a4810@global* (cons (cons a4824@loc (a2d15@binding-value a4819@b)) a4811@macro*))) (gensym)) (if (memv a481c@t '(local-macro!)) ((lambda (a4826@loc) (a480c@f (cdr a480e@r) (cons (cons* a4818@label 'global-macro! a4826@loc) a480f@env) a4810@global* (cons (cons a4826@loc (a2d15@binding-value a4819@b)) a4811@macro*))) (gensym)) (if (memv a481c@t '($rtd $module)) (a480c@f (cdr a480e@r) (cons a4816@x a480f@env) a4810@global* a4811@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (a2d13@binding-type a4819@b) (a2d15@binding-value a4819@b))))))) (a2d13@binding-type a4819@b))) (car a4816@x) (cdr a4816@x))) (car a480e@r)))))) a480c@f) a4806@r '() '() '()))) '#f))) (set! a2fd3@generate-temporaries (lambda (a4832@ls) ((lambda (a4834@t) ((lambda (a4836@ls/false) (if a4836@ls/false (apply (lambda (a4838@ls) (map (lambda (a483a@x) (a2cbb@make-stx ((lambda (a483c@x) (if (or (symbol? a483c@x) (string? a483c@x)) (gensym a483c@x) (gensym 't))) (a2feb@syntax->datum a483a@x)) a2c6d@top-mark* '() '())) a4838@ls)) a4836@ls/false) ((lambda (a483e@t) ((lambda (a4840@ls/false) (if a4840@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) a4840@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a483e@t))) (a2efc@syntax-dispatch a483e@t '_))) a4834@t))) (a2efc@syntax-dispatch a4834@t 'each-any))) a4832@ls))) (set! a2fd5@free-identifier=? (lambda (a4842@x a4843@y) (if (a2cf1@id? a4842@x) (if (a2cf1@id? a4843@y) (a2cf9@free-id=? a4842@x a4843@y) (assertion-violation 'free-identifier=? '"not an identifier" a4843@y)) (assertion-violation 'free-identifier=? '"not an identifier" a4842@x)))) (set! a2fd7@bound-identifier=? (lambda (a4846@x a4847@y) (if (a2cf1@id? a4846@x) (if (a2cf1@id? a4847@y) (a2cf7@bound-id=? a4846@x a4847@y) (assertion-violation 'bound-identifier=? '"not an identifier" a4847@y)) (assertion-violation 'bound-identifier=? '"not an identifier" a4846@x)))) (set! a2fd9@make-source-condition (lambda (a484a@x) ((lambda (a4854@a484f a4856@a4851 a4858@a4850 a485b@a484e a485d@make-source-condition a485f@a484c a4861@a484d a4863@source-condition? a4865@source-filename a4867@source-character) (begin (set! a4854@a484f (make-record-type-descriptor '&source-information a4cb2@a49f9@&condition-rtd 'a4852 '#f '#f '#((immutable file-name) (immutable character)))) (set! a4856@a4851 '#f) (set! a4858@a4850 (make-record-constructor-descriptor a4854@a484f a4cb3@a49fb@&condition-rcd a4856@a4851)) (set! a485b@a484e (record-predicate a4854@a484f)) (set! a485d@make-source-condition (record-constructor a4858@a4850)) (set! a485f@a484c (record-accessor a4854@a484f '0)) (set! a4861@a484d (record-accessor a4854@a484f '1)) (set! a4863@source-condition? (condition-predicate a4854@a484f)) (set! a4865@source-filename (condition-accessor a4854@a484f a485f@a484c)) (set! a4867@source-character (condition-accessor a4854@a484f a4861@a484d)) (if (pair? a484a@x) (a485d@make-source-condition (car a484a@x) (cdr a484a@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! a2fdb@extract-position-condition (lambda (a4868@x) (a2fd9@make-source-condition (a2fdd@expression-position a4868@x)))) (set! a2fdd@expression-position (lambda (a486a@x) (and (a2cb9@stx? a486a@x) ((lambda (a486c@x) (and (a2890@a27af@annotation? a486c@x) (a2891@a27b1@annotation-source a486c@x))) (a2cbd@stx-expr a486a@x))))) (set! a2fdf@assertion-error (lambda (a486e@expr a486f@pos) (raise (condition (a4ce2@a4abd@make-assertion-violation) (a4cf4@a4aef@make-who-condition 'assert) (a4cb8@a4a50@make-message-condition '"assertion failed") (a4cea@a4ad4@make-irritants-condition (list a486e@expr)) (a2fd9@make-source-condition a486f@pos))))) (set! a2fe1@syntax-error (lambda (a4872@x . a4874@args) (begin (if (not (for-all string? a4874@args)) (assertion-violation 'syntax-error '"invalid argument" a4874@args) (void)) (raise (condition (a4cb8@a4a50@make-message-condition (if (null? a4874@args) '"invalid syntax" (apply string-append a4874@args))) (a4d16@a4b4b@make-syntax-violation (a2feb@syntax->datum a4872@x) '#f) (a2fdb@extract-position-condition a4872@x)))))) (set! a2fe3@syntax-violation* (lambda (a4876@who a4877@msg a4878@form a4879@condition-object) (begin (if (not (string? a4877@msg)) (assertion-violation 'syntax-violation '"message is not a string" a4877@msg) (void)) ((lambda (a487e@who) (raise (condition (if a487e@who (a4cf4@a4aef@make-who-condition a487e@who) (condition)) (a4cb8@a4a50@make-message-condition a4877@msg) a4879@condition-object (a2fdb@extract-position-condition a4878@form)))) (if (or (string? a4876@who) (symbol? a4876@who)) a4876@who (if (not a4876@who) ((lambda (a4880@t) ((lambda (a4882@ls/false) (if (and a4882@ls/false (apply (lambda (a4884@id) (a2cf1@id? a4884@id)) a4882@ls/false)) (apply (lambda (a4886@id) (a2feb@syntax->datum a4886@id)) a4882@ls/false) ((lambda (a4888@t) ((lambda (a488a@ls/false) (if (and a488a@ls/false (apply (lambda (a488c@id a488d@rest) (a2cf1@id? a488c@id)) a488a@ls/false)) (apply (lambda (a4890@id a4891@rest) (a2feb@syntax->datum a4890@id)) a488a@ls/false) ((lambda (a4894@t) ((lambda (a4896@ls/false) (if a4896@ls/false (apply (lambda () '#f) a4896@ls/false) (a2fe5@syntax-violation '#f '"invalid syntax" a4894@t))) (a2efc@syntax-dispatch a4894@t '_))) a4888@t))) (a2efc@syntax-dispatch a4888@t '(any . any)))) a4880@t))) (a2efc@syntax-dispatch a4880@t 'any))) a4878@form) (assertion-violation 'syntax-violation '"invalid who argument" a4876@who))))))) (set! a2fe5@syntax-violation (lambda a48a6 ((lambda (a48a7) (if (= a48a7 '3) (apply (lambda (a4898@who a4899@msg a489a@form) (a2fe5@syntax-violation a4898@who a4899@msg a489a@form '#f)) a48a6) (if (= a48a7 '4) (apply (lambda (a489e@who a489f@msg a48a0@form a48a1@subform) (a2fe3@syntax-violation* a489e@who a489f@msg a48a0@form (a4d16@a4b4b@make-syntax-violation (a2feb@syntax->datum a48a0@form) (a2feb@syntax->datum a48a1@subform)))) a48a6) (error 'apply '"invalid arg count")))) (length a48a6)))) (set! a2fe7@identifier? (lambda (a48a8@x) (a2cf1@id? a48a8@x))) (set! a2fe9@datum->syntax (lambda (a48aa@id a48ab@datum) (if (a2cf1@id? a48aa@id) (a2ccf@datum->stx a48aa@id a48ab@datum) (assertion-violation 'datum->syntax '"not an identifier" a48aa@id)))) (set! a2feb@syntax->datum (lambda (a48ae@x) (a2d07@stx->datum a48ae@x))) (set! a2fed@compile-r6rs-top-level (lambda (a48b0@x*) (call-with-values (lambda () (a2f77@top-level-expander a48b0@x*)) (lambda (a48b6@a48b3 a48b7@a48b5) ((lambda (a48ba@invoke-code a48bb@lib*) (lambda () (begin (for-each a2b15@a29b6@invoke-library a48bb@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (a28ef@a28a7@expanded->core a48ba@invoke-code)) (void)) (eval-core (a28ef@a28a7@expanded->core a48ba@invoke-code))))) a48b7@a48b5 a48b6@a48b3))))) (set! a2fef@pre-compile-r6rs-top-level (lambda (a48be@x*) (call-with-values (lambda () (a2f77@top-level-expander a48be@x*)) (lambda (a48c4@a48c1 a48c5@a48c3) ((lambda (a48c8@invoke-code a48c9@lib*) (begin (for-each a2b15@a29b6@invoke-library a48c9@lib*) (a2899@a27c1@compile-core (a28ef@a28a7@expanded->core a48c8@invoke-code)))) a48c5@a48c3 a48c4@a48c1))))) (set! a2ff1@interaction-environment ((lambda (a48cc@the-env) (lambda () (or a48cc@the-env ((lambda (a48ce@lib a48cf@rib) (begin ((lambda (a48d2@subst) (begin (a2c96@set-rib-sym*! a48cf@rib (map car a48d2@subst)) (a2c98@set-rib-mark**! a48cf@rib (map (lambda (a48d4@x) a2c6d@top-mark*) a48d2@subst)) (a2c9a@set-rib-label*! a48cf@rib (map cdr a48d2@subst)))) (a2aea@a2960@library-subst a48ce@lib)) ((lambda (a48d6@env) (begin (set! a48cc@the-env a48d6@env) a48d6@env)) (a2fa3@make-interaction-env a48cf@rib '() '())))) (a2b0e@a29a8@find-library-by-name '(mosh interaction)) (a2ca0@make-empty-rib))))) '#f)) (set! a2ff3@top-level-context (a289b@a27c5@make-parameter '#f)) (begin (set! a49e4@a2ff3@top-level-context a2ff3@top-level-context) (set! a49e3@a2ff1@interaction-environment a2ff1@interaction-environment) (set! a49e2@a2fef@pre-compile-r6rs-top-level a2fef@pre-compile-r6rs-top-level) (set! a49e1@a2fed@compile-r6rs-top-level a2fed@compile-r6rs-top-level) (set! a49e0@a2feb@syntax->datum a2feb@syntax->datum) (set! a49df@a2fe9@datum->syntax a2fe9@datum->syntax) (set! a49de@a2fe7@identifier? a2fe7@identifier?) (set! a49dd@a2fe5@syntax-violation a2fe5@syntax-violation) (set! a49dc@a2fe3@syntax-violation* a2fe3@syntax-violation*) (set! a49db@a2fe1@syntax-error a2fe1@syntax-error) (set! a49da@a2fdf@assertion-error a2fdf@assertion-error) (set! a49d9@a2fdd@expression-position a2fdd@expression-position) (set! a49d8@a2fdb@extract-position-condition a2fdb@extract-position-condition) (set! a49d7@a2fd9@make-source-condition a2fd9@make-source-condition) (set! a49d6@a2fd7@bound-identifier=? a2fd7@bound-identifier=?) (set! a49d5@a2fd5@free-identifier=? a2fd5@free-identifier=?) (set! a49d4@a2fd3@generate-temporaries a2fd3@generate-temporaries) (set! a49d3@a2fd1@make-export-env/macros a2fd1@make-export-env/macros) (set! a49d2@a2fcf@make-export-subst a2fcf@make-export-subst) (set! a49d1@a2fcd@build-exports a2fcd@build-exports) (set! a49d0@a2fcb@rev-map-append a2fcb@rev-map-append) (set! a49cf@a2fc9@boot-library-expand a2fc9@boot-library-expand) (set! a49ce@a2fc7@library-expander a2fc7@library-expander) (set! a49cd@a2fc5@eval a2fc5@eval) (set! a49cc@a2fc3@expand a2fc3@expand) (set! a49cb@a2fc1@scheme-report-environment a2fc1@scheme-report-environment) (set! a49ca@a2fbf@null-environment a2fbf@null-environment) (set! a49c9@a2fbd@environment a2fbd@environment) (set! a49c8@a2fbb@environment-symbols a2fbb@environment-symbols) (set! a49c7@a2fb9@environment? a2fb9@environment?) (set! a49c6@a2fb7@parse-binding a2fb7@parse-binding) (set! a49c5@a2fb5@environment-bindings a2fb5@environment-bindings) (set! a49c4@a2fb3@interaction-environment-symbols a2fb3@interaction-environment-symbols) (set! a49c3@a2fb1@rp a2fb1@rp) (set! a49c2@a2faf@set-interaction-env-locs! a2faf@set-interaction-env-locs!) (set! a49c1@a2fad@set-interaction-env-r! a2fad@set-interaction-env-r!) (set! a49c0@a2fab@set-interaction-env-rib! a2fab@set-interaction-env-rib!) (set! a49bf@a2fa9@interaction-env-locs a2fa9@interaction-env-locs) (set! a49be@a2fa7@interaction-env-r a2fa7@interaction-env-r) (set! a49bd@a2fa5@interaction-env-rib a2fa5@interaction-env-rib) (set! a49bc@a2fa3@make-interaction-env a2fa3@make-interaction-env) (set! a49bb@a2fa1@interaction-env? a2fa1@interaction-env?) (set! a49ba@a2f9e@a2f96 a2f9e@a2f96) (set! a49b9@a2f9c@a2f97 a2f9c@a2f97) (set! a49b8@a2f9a@a2f95 a2f9a@a2f95) (set! a49b7@a2f94@rp a2f94@rp) (set! a49b6@a2f92@set-env-itc! a2f92@set-env-itc!) (set! a49b5@a2f90@set-env-labels! a2f90@set-env-labels!) (set! a49b4@a2f8e@set-env-names! a2f8e@set-env-names!) (set! a49b3@a2f8c@env-itc a2f8c@env-itc) (set! a49b2@a2f8a@env-labels a2f8a@env-labels) (set! a49b1@a2f88@env-names a2f88@env-names) (set! a49b0@a2f86@make-env a2f86@make-env) (set! a49af@a2f84@env? a2f84@env?) (set! a49ae@a2f81@a2f79 a2f81@a2f79) (set! a49ad@a2f7f@a2f7a a2f7f@a2f7a) (set! a49ac@a2f7d@a2f78 a2f7d@a2f78) (set! a49ab@a2f77@top-level-expander a2f77@top-level-expander) (set! a49aa@a2f75@parse-top-level-program a2f75@parse-top-level-program) (set! a49a9@a2f73@core-library-expander a2f73@core-library-expander) (set! a49a8@a2f71@library-body-expander a2f71@library-body-expander) (set! a49a7@a2f6f@chi-interaction-expr a2f6f@chi-interaction-expr) (set! a49a6@a2f6d@chi-library-internal a2f6d@chi-library-internal) (set! a49a5@a2f6b@imp-collector a2f6b@imp-collector) (set! a49a4@a2f69@vis-collector a2f69@vis-collector) (set! a49a3@a2f67@inv-collector a2f67@inv-collector) (set! a49a2@a2f65@make-collector a2f65@make-collector) (set! a49a1@a2f63@make-top-rib a2f63@make-top-rib) (set! a49a0@a2f61@parse-import-spec* a2f61@parse-import-spec*) (set! a499f@a2f5f@parse-library a2f5f@parse-library) (set! a499e@a2f5d@parse-library-name a2f5d@parse-library-name) (set! a499d@a2f5b@parse-exports a2f5b@parse-exports) (set! a499c@a2f59@expand-transformer a2f59@expand-transformer) (set! a499b@a2f57@chi-body* a2f57@chi-body*) (set! a499a@a2f55@chi-internal-module a2f55@chi-internal-module) (set! a4999@a2f53@module-interface-exp-id* a2f53@module-interface-exp-id*) (set! a4998@a2f51@set-module-interface-exp-lab-vec! a2f51@set-module-interface-exp-lab-vec!) (set! a4997@a2f4f@set-module-interface-exp-id-vec! a2f4f@set-module-interface-exp-id-vec!) (set! a4996@a2f4d@set-module-interface-first-mark! a2f4d@set-module-interface-first-mark!) (set! a4995@a2f4b@module-interface-exp-lab-vec a2f4b@module-interface-exp-lab-vec) (set! a4994@a2f49@module-interface-exp-id-vec a2f49@module-interface-exp-id-vec) (set! a4993@a2f47@module-interface-first-mark a2f47@module-interface-first-mark) (set! a4992@a2f45@make-module-interface a2f45@make-module-interface) (set! a4991@a2f43@module-interface? a2f43@module-interface?) (set! a4990@a2f40@a2f38 a2f40@a2f38) (set! a498f@a2f3e@a2f39 a2f3e@a2f39) (set! a498e@a2f3c@a2f37 a2f3c@a2f37) (set! a498d@a2f36@parse-module a2f36@parse-module) (set! a498c@a2f34@chi-internal a2f34@chi-internal) (set! a498b@a2f32@find-dups a2f32@find-dups) (set! a498a@a2f30@find-bound=? a2f30@find-bound=?) (set! a4989@a2f2e@chi-rhs* a2f2e@chi-rhs*) (set! a4988@a2f2c@expand-interaction-rhs*/init* a2f2c@expand-interaction-rhs*/init*) (set! a4987@a2f2a@chi-rhs a2f2a@chi-rhs) (set! a4986@a2f28@chi-defun a2f28@chi-defun) (set! a4985@a2f26@chi-lambda-clause* a2f26@chi-lambda-clause*) (set! a4984@a2f24@chi-lambda-clause a2f24@chi-lambda-clause) (set! a4983@a2f22@verify-formals a2f22@verify-formals) (set! a4982@a2f20@chi-set! a2f20@chi-set!) (set! a4981@a2f1e@chi-expr a2f1e@chi-expr) (set! a4980@a2f1c@chi-application a2f1c@chi-application) (set! a497f@a2f1a@chi-expr* a2f1a@chi-expr*) (set! a497e@a2f18@chi-global-macro a2f18@chi-global-macro) (set! a497d@a2f16@chi-local-macro a2f16@chi-local-macro) (set! a497c@a2f14@chi-macro a2f14@chi-macro) (set! a497b@a2f12@do-macro-call a2f12@do-macro-call) (set! a497a@a2f10@local-macro-transformer a2f10@local-macro-transformer) (set! a4979@a2f0e@macro-transformer a2f0e@macro-transformer) (set! a4978@a2f0c@symbol-macro a2f0c@symbol-macro) (set! a4977@a2f0a@core-macro-transformer a2f0a@core-macro-transformer) (set! a4976@a2f08@syntax-transformer a2f08@syntax-transformer) (set! a4975@a2f06@ellipsis-map a2f06@ellipsis-map) (set! a4974@a2f04@syntax-case-transformer a2f04@syntax-case-transformer) (set! a4973@a2f02@verify-literals a2f02@verify-literals) (set! a4972@a2f00@underscore? a2f00@underscore?) (set! a4971@a2efe@ellipsis? a2efe@ellipsis?) (set! a4970@a2efc@syntax-dispatch a2efc@syntax-dispatch) (set! a496f@a2efa@convert-pattern a2efa@convert-pattern) (set! a496e@a2ef8@foreign-call-transformer a2ef8@foreign-call-transformer) (set! a496d@a2ef6@parameterize-macro a2ef6@parameterize-macro) (set! a496c@a2ef4@incorrect-usage-macro a2ef4@incorrect-usage-macro) (set! a496b@a2ef2@define-condition-type-macro a2ef2@define-condition-type-macro) (set! a496a@a2ef0@define-record-type-macro a2ef0@define-record-type-macro) (set! a4969@a2eee@define-struct-macro a2eee@define-struct-macro) (set! a4968@a2eec@quasisyntax-macro a2eec@quasisyntax-macro) (set! a4967@a2eea@quasiquote-macro a2eea@quasiquote-macro) (set! a4966@a2ee8@syntax-rules-macro a2ee8@syntax-rules-macro) (set! a4965@a2ee6@include-into-macro a2ee6@include-into-macro) (set! a4964@a2ee4@include-macro a2ee4@include-macro) (set! a4963@a2ee2@do-include a2ee2@do-include) (set! a4962@a2ee0@cond-macro a2ee0@cond-macro) (set! a4961@a2ede@and-macro a2ede@and-macro) (set! a4960@a2edc@or-macro a2edc@or-macro) (set! a495f@a2eda@let*-macro a2eda@let*-macro) (set! a495e@a2ed8@do-macro a2ed8@do-macro) (set! a495d@a2ed6@identifier-syntax-macro a2ed6@identifier-syntax-macro) (set! a495c@a2ed4@endianness-macro a2ed4@endianness-macro) (set! a495b@a2ed2@assert-macro a2ed2@assert-macro) (set! a495a@a2ed0@delay-macro a2ed0@delay-macro) (set! a4959@a2ece@time-macro a2ece@time-macro) (set! a4958@a2ecc@define-enumeration-macro a2ecc@define-enumeration-macro) (set! a4957@a2eca@guard-macro a2eca@guard-macro) (set! a4956@a2ec8@trace-letrec-syntax-macro a2ec8@trace-letrec-syntax-macro) (set! a4955@a2ec6@trace-let-syntax-macro a2ec6@trace-let-syntax-macro) (set! a4954@a2ec4@trace-let/rec-syntax a2ec4@trace-let/rec-syntax) (set! a4953@a2ec2@trace-define-syntax-macro a2ec2@trace-define-syntax-macro) (set! a4952@a2ec0@trace-define-macro a2ec0@trace-define-macro) (set! a4951@a2ebe@trace-lambda-macro a2ebe@trace-lambda-macro) (set! a4950@a2ebc@let*-values-macro a2ebc@let*-values-macro) (set! a494f@a2eba@let-values-macro a2eba@let-values-macro) (set! a494e@a2eb8@let-macro a2eb8@let-macro) (set! a494d@a2eb6@invalid-fmls-error a2eb6@invalid-fmls-error) (set! a494c@a2eb4@with-syntax-macro a2eb4@with-syntax-macro) (set! a494b@a2eb2@bless a2eb2@bless) (set! a494a@a2eb0@lambda-transformer a2eb0@lambda-transformer) (set! a4949@a2eae@case-lambda-transformer a2eae@case-lambda-transformer) (set! a4948@a2eac@quote-transformer a2eac@quote-transformer) (set! a4947@a2eaa@case-macro a2eaa@case-macro) (set! a4946@a2ea8@or-transformer a2ea8@or-transformer) (set! a4945@a2ea6@and-transformer a2ea6@and-transformer) (set! a4944@a2ea4@if-transformer a2ea4@if-transformer) (set! a4943@a2ea2@unless-macro a2ea2@unless-macro) (set! a4942@a2ea0@when-macro a2ea0@when-macro) (set! a4941@a2e9e@record-constructor-descriptor-transformer a2e9e@record-constructor-descriptor-transformer) (set! a4940@a2e9c@record-type-descriptor-transformer a2e9c@record-type-descriptor-transformer) (set! a493f@a2e9a@type-descriptor-transformer a2e9a@type-descriptor-transformer) (set! a493e@a2e98@fluid-let-syntax-transformer a2e98@fluid-let-syntax-transformer) (set! a493d@a2e96@letrec*-transformer a2e96@letrec*-transformer) (set! a493c@a2e94@letrec-transformer a2e94@letrec-transformer) (set! a493b@a2e92@letrec-helper a2e92@letrec-helper) (set! a493a@a2e90@add-lexicals a2e90@add-lexicals) (set! a4939@a2e8e@add-lexical a2e8e@add-lexical) (set! a4938@a2e8c@set-lexical-mutable! a2e8c@set-lexical-mutable!) (set! a4937@a2e8a@lexical-mutable? a2e8a@lexical-mutable?) (set! a4936@a2e88@lexical-var a2e88@lexical-var) (set! a4935@a2e86@scheme-stx a2e86@scheme-stx) (set! a4934@a2e84@scheme-stx-hashtable a2e84@scheme-stx-hashtable) (set! a4933@a2e82@parse-define-syntax a2e82@parse-define-syntax) (set! a4932@a2e80@parse-define a2e80@parse-define) (set! a4931@a2d2f@make-eval-transformer a2d2f@make-eval-transformer) (set! a4930@a2d2d@variable-transformer-procedure a2d2d@variable-transformer-procedure) (set! a492f@a2d2b@variable-transformer? a2d2b@variable-transformer?) (set! a492e@a2d29@make-variable-transformer a2d29@make-variable-transformer) (set! a492d@a2d27@sanitize-binding a2d27@sanitize-binding) (set! a492c@a2d19@syntax-type a2d19@syntax-type) (set! a492b@a2d17@raise-unbound-error a2d17@raise-unbound-error) (set! a492a@a2d15@binding-value a2d15@binding-value) (set! a4929@a2d13@binding-type a2d13@binding-type) (set! a4928@a2d11@make-binding a2d11@make-binding) (set! a4927@a2d0f@label->binding a2d0f@label->binding) (set! a4926@a2d0d@id->real-label a2d0d@id->real-label) (set! a4925@a2d0b@id->label a2d0b@id->label) (set! a4924@a2d09@same-marks*? a2d09@same-marks*?) (set! a4923@a2d07@stx->datum a2d07@stx->datum) (set! a4922@a2d05@strip a2d05@strip) (set! a4921@a2d03@strip-annotations a2d03@strip-annotations) (set! a4920@a2d01@self-evaluating? a2d01@self-evaluating?) (set! a491f@a2cff@bound-id-member? a2cff@bound-id-member?) (set! a491e@a2cfd@distinct-bound-ids? a2cfd@distinct-bound-ids?) (set! a491d@a2cfb@valid-bound-ids? a2cfb@valid-bound-ids?) (set! a491c@a2cf9@free-id=? a2cf9@free-id=?) (set! a491b@a2cf7@bound-id=? a2cf7@bound-id=?) (set! a491a@a2cf5@same-marks? a2cf5@same-marks?) (set! a4919@a2cf3@id->sym a2cf3@id->sym) (set! a4918@a2cf1@id? a2cf1@id?) (set! a4917@a2cef@syntax->list a2cef@syntax->list) (set! a4916@a2ced@syntax-cdr a2ced@syntax-cdr) (set! a4915@a2ceb@syntax-car a2ceb@syntax-car) (set! a4914@a2ce9@syntax-list? a2ce9@syntax-list?) (set! a4913@a2ce7@syntax-null? a2ce7@syntax-null?) (set! a4912@a2ce5@syntax-vector? a2ce5@syntax-vector?) (set! a4911@a2ce3@syntax-pair? a2ce3@syntax-pair?) (set! a4910@a2ce1@syntax-vector->list a2ce1@syntax-vector->list) (set! a490f@a2cdf@syntax-kind? a2cdf@syntax-kind?) (set! a490e@a2cdd@add-subst a2cdd@add-subst) (set! a490d@a2cdb@add-mark a2cdb@add-mark) (set! a490c@a2cd9@mkstx a2cd9@mkstx) (set! a490b@a2cd7@join-wraps a2cd7@join-wraps) (set! a490a@a2cd5@anti-mark? a2cd5@anti-mark?) (set! a4909@a2cd3@anti-mark a2cd3@anti-mark) (set! a4908@a2cd1@gen-mark a2cd1@gen-mark) (set! a4907@a2ccf@datum->stx a2ccf@datum->stx) (set! a4906@a2ccd@rp a2ccd@rp) (set! a4905@a2ccb@set-stx-ae*! a2ccb@set-stx-ae*!) (set! a4904@a2cc9@set-stx-subst*! a2cc9@set-stx-subst*!) (set! a4903@a2cc7@set-stx-mark*! a2cc7@set-stx-mark*!) (set! a4902@a2cc5@set-stx-expr! a2cc5@set-stx-expr!) (set! a4901@a2cc3@stx-ae* a2cc3@stx-ae*) (set! a4900@a2cc1@stx-subst* a2cc1@stx-subst*) (set! a48ff@a2cbf@stx-mark* a2cbf@stx-mark*) (set! a48fe@a2cbd@stx-expr a2cbd@stx-expr) (set! a48fd@a2cbb@make-stx a2cbb@make-stx) (set! a48fc@a2cb9@stx? a2cb9@stx?) (set! a48fb@a2cb6@a2cae a2cb6@a2cae) (set! a48fa@a2cb4@a2caf a2cb4@a2caf) (set! a48f9@a2cb2@a2cad a2cb2@a2cad) (set! a48f8@a2cac@make-full-rib a2cac@make-full-rib) (set! a48f7@a2caa@unseal-rib! a2caa@unseal-rib!) (set! a48f6@a2ca8@seal-rib! a2ca8@seal-rib!) (set! a48f5@a2ca6@make-rib-map a2ca6@make-rib-map) (set! a48f4@a2ca4@extend-rib/nc! a2ca4@extend-rib/nc!) (set! a48f3@a2ca2@extend-rib! a2ca2@extend-rib!) (set! a48f2@a2ca0@make-empty-rib a2ca0@make-empty-rib) (set! a48f1@a2c9e@set-rib-cache! a2c9e@set-rib-cache!) (set! a48f0@a2c9c@set-rib-sealed/freq! a2c9c@set-rib-sealed/freq!) (set! a48ef@a2c9a@set-rib-label*! a2c9a@set-rib-label*!) (set! a48ee@a2c98@set-rib-mark**! a2c98@set-rib-mark**!) (set! a48ed@a2c96@set-rib-sym*! a2c96@set-rib-sym*!) (set! a48ec@a2c94@rib-cache a2c94@rib-cache) (set! a48eb@a2c92@rib-sealed/freq a2c92@rib-sealed/freq) (set! a48ea@a2c90@rib-label* a2c90@rib-label*) (set! a48e9@a2c8e@rib-mark** a2c8e@rib-mark**) (set! a48e8@a2c8c@rib-sym* a2c8c@rib-sym*) (set! a48e7@a2c8a@make-rib a2c8a@make-rib) (set! a48e6@a2c88@rib? a2c88@rib?) (set! a48e5@a2c85@a2c7d a2c85@a2c7d) (set! a48e4@a2c83@a2c7e a2c83@a2c7e) (set! a48e3@a2c81@a2c7c a2c81@a2c7c) (set! a48e2@a2c7b@gen-define-label a2c7b@gen-define-label) (set! a48e1@a2c79@gen-define-label+loc a2c79@gen-define-label+loc) (set! a48e0@a2c77@gen-top-level-label a2c77@gen-top-level-label) (set! a48df@a2c75@gen-label a2c75@gen-label) (set! a48de@a2c73@gen-global a2c73@gen-global) (set! a48dd@a2c71@gen-lexical a2c71@gen-lexical) (set! a48dc@a2c6f@top-marked? a2c6f@top-marked?) (set! a48db@a2c6d@top-mark* a2c6d@top-mark*) (set! a48da@a2c68@set-union a2c68@set-union) (set! a48d9@a2c66@set-cons a2c66@set-cons) (set! a48d8@a2c64@file-options-macro a2c64@file-options-macro) (a2b0b@a29a2@current-library-expander a2fc7@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (a49ee@a49e9 a49f0@a49eb a49f2@a49ea a49f5@&condition? a49f7@make-&condition a49f9@&condition-rtd a49fb@&condition-rcd a4a47@a4a42 a4a49@a4a44 a4a4b@a4a43 a4a4e@p? a4a50@make-message-condition a4a52@a4a41 a4a54@message-condition? a4a56@condition-message a4a58@&message-rtd a4a5a@&message-rcd a4a60@a4a5b a4a62@a4a5d a4a64@a4a5c a4a67@p? a4a69@make-warning a4a6b@warning? a4a6d@&warning-rtd a4a6f@&warning-rcd a4a75@a4a70 a4a77@a4a72 a4a79@a4a71 a4a7c@p? a4a7e@make-serious-condition a4a80@serious-condition? a4a82@&serious-rtd a4a84@&serious-rcd a4a8a@a4a85 a4a8c@a4a87 a4a8e@a4a86 a4a91@p? a4a93@make-error a4a95@error? a4a97@&error-rtd a4a99@&error-rcd a4a9f@a4a9a a4aa1@a4a9c a4aa3@a4a9b a4aa6@p? a4aa8@make-violation a4aaa@violation? a4aac@&violation-rtd a4aae@&violation-rcd a4ab4@a4aaf a4ab6@a4ab1 a4ab8@a4ab0 a4abb@p? a4abd@make-assertion-violation a4abf@assertion-violation? a4ac1@&assertion-rtd a4ac3@&assertion-rcd a4acb@a4ac6 a4acd@a4ac8 a4acf@a4ac7 a4ad2@p? a4ad4@make-irritants-condition a4ad6@a4ac5 a4ad8@irritants-condition? a4ada@condition-irritants a4adc@&irritants-rtd a4ade@&irritants-rcd a4ae6@a4ae1 a4ae8@a4ae3 a4aea@a4ae2 a4aed@p? a4aef@make-who-condition a4af1@a4ae0 a4af3@who-condition? a4af5@condition-who a4af7@&who-rtd a4af9@&who-rcd a4aff@a4afa a4b01@a4afc a4b03@a4afb a4b06@p? a4b08@make-non-continuable-violation a4b0a@non-continuable-violation? a4b0c@&non-continuable-rtd a4b0e@&non-continuable-rcd a4b14@a4b0f a4b16@a4b11 a4b18@a4b10 a4b1b@p? a4b1d@make-implementation-restriction-violation a4b1f@implementation-restriction-violation? a4b21@&implementation-restriction-rtd a4b23@&implementation-restriction-rcd a4b29@a4b24 a4b2b@a4b26 a4b2d@a4b25 a4b30@p? a4b32@make-lexical-violation a4b34@lexical-violation? a4b36@&lexical-rtd a4b38@&lexical-rcd a4b42@a4b3d a4b44@a4b3f a4b46@a4b3e a4b49@p? a4b4b@make-syntax-violation a4b4d@a4b3a a4b4f@a4b3c a4b51@syntax-violation? a4b53@syntax-violation-form a4b55@syntax-violation-subform a4b57@&syntax-rtd a4b59@&syntax-rcd a4b5f@a4b5a a4b61@a4b5c a4b63@a4b5b a4b66@p? a4b68@make-undefined-violation a4b6a@undefined-violation? a4b6c@&undefined-rtd a4b6e@&undefined-rcd a4b74@a4b6f a4b76@a4b71 a4b78@a4b70 a4b7b@p? a4b7d@make-i/o-error a4b7f@i/o-error? a4b81@&i/o-rtd a4b83@&i/o-rcd a4b89@a4b84 a4b8b@a4b86 a4b8d@a4b85 a4b90@p? a4b92@make-i/o-read-error a4b94@i/o-read-error? a4b96@&i/o-read-rtd a4b98@&i/o-read-rcd a4b9e@a4b99 a4ba0@a4b9b a4ba2@a4b9a a4ba5@p? a4ba7@make-i/o-write-error a4ba9@i/o-write-error? a4bab@&i/o-write-rtd a4bad@&i/o-write-rcd a4bb5@a4bb0 a4bb7@a4bb2 a4bb9@a4bb1 a4bbc@p? a4bbe@make-i/o-invalid-position-error a4bc0@a4baf a4bc2@i/o-invalid-position-error? a4bc4@i/o-error-position a4bc6@&i/o-invalid-position-rtd a4bc8@&i/o-invalid-position-rcd a4bd0@a4bcb a4bd2@a4bcd a4bd4@a4bcc a4bd7@p? a4bd9@make-i/o-filename-error a4bdb@a4bca a4bdd@i/o-filename-error? a4bdf@i/o-error-filename a4be1@&i/o-filename-rtd a4be3@&i/o-filename-rcd a4be9@a4be4 a4beb@a4be6 a4bed@a4be5 a4bf0@p? a4bf2@make-i/o-file-protection-error a4bf4@i/o-file-protection-error? a4bf6@&i/o-file-protection-rtd a4bf8@&i/o-file-protection-rcd a4bfe@a4bf9 a4c00@a4bfb a4c02@a4bfa a4c05@p? a4c07@make-i/o-file-is-read-only-error a4c09@i/o-file-is-read-only-error? a4c0b@&i/o-file-is-read-only-rtd a4c0d@&i/o-file-is-read-only-rcd a4c13@a4c0e a4c15@a4c10 a4c17@a4c0f a4c1a@p? a4c1c@make-i/o-file-already-exists-error a4c1e@i/o-file-already-exists-error? a4c20@&i/o-file-already-exists-rtd a4c22@&i/o-file-already-exists-rcd a4c28@a4c23 a4c2a@a4c25 a4c2c@a4c24 a4c2f@p? a4c31@make-i/o-file-does-not-exist-error a4c33@i/o-file-does-not-exist-error? a4c35@&i/o-file-does-not-exist-rtd a4c37@&i/o-file-does-not-exist-rcd a4c3f@a4c3a a4c41@a4c3c a4c43@a4c3b a4c46@p? a4c48@make-i/o-port-error a4c4a@a4c39 a4c4c@i/o-port-error? a4c4e@i/o-error-port a4c50@&i/o-port-rtd a4c52@&i/o-port-rcd a4c58@a4c53 a4c5a@a4c55 a4c5c@a4c54 a4c5f@p? a4c61@make-i/o-decoding-error a4c63@i/o-decoding-error? a4c65@&i/o-decoding-rtd a4c67@&i/o-decoding-rcd a4c6f@a4c6a a4c71@a4c6c a4c73@a4c6b a4c76@p? a4c78@make-i/o-encoding-error a4c7a@a4c69 a4c7c@i/o-encoding-error? a4c7e@i/o-encoding-error-char a4c80@&i/o-encoding-rtd a4c82@&i/o-encoding-rcd a4c88@a4c83 a4c8a@a4c85 a4c8c@a4c84 a4c8f@p? a4c91@make-no-infinities-violation a4c93@no-infinities-violation? a4c95@&no-infinities-rtd a4c97@&no-infinities-rcd a4c9d@a4c98 a4c9f@a4c9a a4ca1@a4c99 a4ca4@p? a4ca6@make-no-nans-violation a4ca8@no-nans-violation? a4caa@&no-nans-rtd a4cac@&no-nans-rcd) (begin (set! a49ee@a49e9 (make-record-type-descriptor '&condition '#f 'a49ec '#f '#f '#())) (set! a49f0@a49eb '#f) (set! a49f2@a49ea (make-record-constructor-descriptor a49ee@a49e9 '#f a49f0@a49eb)) (set! a49f5@&condition? (record-predicate a49ee@a49e9)) (set! a49f7@make-&condition (record-constructor a49f2@a49ea)) (set! a49f9@&condition-rtd a49ee@a49e9) (set! a49fb@&condition-rcd a49f2@a49ea) (set! a4a47@a4a42 (make-record-type-descriptor '&message a49ee@a49e9 'a4a45 '#f '#f '#((immutable message)))) (set! a4a49@a4a44 '#f) (set! a4a4b@a4a43 (make-record-constructor-descriptor a4a47@a4a42 a49f2@a49ea a4a49@a4a44)) (set! a4a4e@p? (record-predicate a4a47@a4a42)) (set! a4a50@make-message-condition (record-constructor a4a4b@a4a43)) (set! a4a52@a4a41 (record-accessor a4a47@a4a42 '0)) (set! a4a54@message-condition? (condition-predicate a4a47@a4a42)) (set! a4a56@condition-message (condition-accessor a4a47@a4a42 a4a52@a4a41)) (set! a4a58@&message-rtd a4a47@a4a42) (set! a4a5a@&message-rcd a4a4b@a4a43) (set! a4a60@a4a5b (make-record-type-descriptor '&warning a49ee@a49e9 'a4a5e '#f '#f '#())) (set! a4a62@a4a5d '#f) (set! a4a64@a4a5c (make-record-constructor-descriptor a4a60@a4a5b a49f2@a49ea a4a62@a4a5d)) (set! a4a67@p? (record-predicate a4a60@a4a5b)) (set! a4a69@make-warning (record-constructor a4a64@a4a5c)) (set! a4a6b@warning? (condition-predicate a4a60@a4a5b)) (set! a4a6d@&warning-rtd a4a60@a4a5b) (set! a4a6f@&warning-rcd a4a64@a4a5c) (set! a4a75@a4a70 (make-record-type-descriptor '&serious a49ee@a49e9 'a4a73 '#f '#f '#())) (set! a4a77@a4a72 '#f) (set! a4a79@a4a71 (make-record-constructor-descriptor a4a75@a4a70 a49f2@a49ea a4a77@a4a72)) (set! a4a7c@p? (record-predicate a4a75@a4a70)) (set! a4a7e@make-serious-condition (record-constructor a4a79@a4a71)) (set! a4a80@serious-condition? (condition-predicate a4a75@a4a70)) (set! a4a82@&serious-rtd a4a75@a4a70) (set! a4a84@&serious-rcd a4a79@a4a71) (set! a4a8a@a4a85 (make-record-type-descriptor '&error a4a75@a4a70 'a4a88 '#f '#f '#())) (set! a4a8c@a4a87 '#f) (set! a4a8e@a4a86 (make-record-constructor-descriptor a4a8a@a4a85 a4a79@a4a71 a4a8c@a4a87)) (set! a4a91@p? (record-predicate a4a8a@a4a85)) (set! a4a93@make-error (record-constructor a4a8e@a4a86)) (set! a4a95@error? (condition-predicate a4a8a@a4a85)) (set! a4a97@&error-rtd a4a8a@a4a85) (set! a4a99@&error-rcd a4a8e@a4a86) (set! a4a9f@a4a9a (make-record-type-descriptor '&violation a4a75@a4a70 'a4a9d '#f '#f '#())) (set! a4aa1@a4a9c '#f) (set! a4aa3@a4a9b (make-record-constructor-descriptor a4a9f@a4a9a a4a79@a4a71 a4aa1@a4a9c)) (set! a4aa6@p? (record-predicate a4a9f@a4a9a)) (set! a4aa8@make-violation (record-constructor a4aa3@a4a9b)) (set! a4aaa@violation? (condition-predicate a4a9f@a4a9a)) (set! a4aac@&violation-rtd a4a9f@a4a9a) (set! a4aae@&violation-rcd a4aa3@a4a9b) (set! a4ab4@a4aaf (make-record-type-descriptor '&assertion a4a9f@a4a9a 'a4ab2 '#f '#f '#())) (set! a4ab6@a4ab1 '#f) (set! a4ab8@a4ab0 (make-record-constructor-descriptor a4ab4@a4aaf a4aa3@a4a9b a4ab6@a4ab1)) (set! a4abb@p? (record-predicate a4ab4@a4aaf)) (set! a4abd@make-assertion-violation (record-constructor a4ab8@a4ab0)) (set! a4abf@assertion-violation? (condition-predicate a4ab4@a4aaf)) (set! a4ac1@&assertion-rtd a4ab4@a4aaf) (set! a4ac3@&assertion-rcd a4ab8@a4ab0) (set! a4acb@a4ac6 (make-record-type-descriptor '&irritants a49ee@a49e9 'a4ac9 '#f '#f '#((immutable irritants)))) (set! a4acd@a4ac8 '#f) (set! a4acf@a4ac7 (make-record-constructor-descriptor a4acb@a4ac6 a49f2@a49ea a4acd@a4ac8)) (set! a4ad2@p? (record-predicate a4acb@a4ac6)) (set! a4ad4@make-irritants-condition (record-constructor a4acf@a4ac7)) (set! a4ad6@a4ac5 (record-accessor a4acb@a4ac6 '0)) (set! a4ad8@irritants-condition? (condition-predicate a4acb@a4ac6)) (set! a4ada@condition-irritants (condition-accessor a4acb@a4ac6 a4ad6@a4ac5)) (set! a4adc@&irritants-rtd a4acb@a4ac6) (set! a4ade@&irritants-rcd a4acf@a4ac7) (set! a4ae6@a4ae1 (make-record-type-descriptor '&who a49ee@a49e9 'a4ae4 '#f '#f '#((immutable who)))) (set! a4ae8@a4ae3 '#f) (set! a4aea@a4ae2 (make-record-constructor-descriptor a4ae6@a4ae1 a49f2@a49ea a4ae8@a4ae3)) (set! a4aed@p? (record-predicate a4ae6@a4ae1)) (set! a4aef@make-who-condition (record-constructor a4aea@a4ae2)) (set! a4af1@a4ae0 (record-accessor a4ae6@a4ae1 '0)) (set! a4af3@who-condition? (condition-predicate a4ae6@a4ae1)) (set! a4af5@condition-who (condition-accessor a4ae6@a4ae1 a4af1@a4ae0)) (set! a4af7@&who-rtd a4ae6@a4ae1) (set! a4af9@&who-rcd a4aea@a4ae2) (set! a4aff@a4afa (make-record-type-descriptor '&non-continuable a4a9f@a4a9a 'a4afd '#f '#f '#())) (set! a4b01@a4afc '#f) (set! a4b03@a4afb (make-record-constructor-descriptor a4aff@a4afa a4aa3@a4a9b a4b01@a4afc)) (set! a4b06@p? (record-predicate a4aff@a4afa)) (set! a4b08@make-non-continuable-violation (record-constructor a4b03@a4afb)) (set! a4b0a@non-continuable-violation? (condition-predicate a4aff@a4afa)) (set! a4b0c@&non-continuable-rtd a4aff@a4afa) (set! a4b0e@&non-continuable-rcd a4b03@a4afb) (set! a4b14@a4b0f (make-record-type-descriptor '&implementation-restriction a4a9f@a4a9a 'a4b12 '#f '#f '#())) (set! a4b16@a4b11 '#f) (set! a4b18@a4b10 (make-record-constructor-descriptor a4b14@a4b0f a4aa3@a4a9b a4b16@a4b11)) (set! a4b1b@p? (record-predicate a4b14@a4b0f)) (set! a4b1d@make-implementation-restriction-violation (record-constructor a4b18@a4b10)) (set! a4b1f@implementation-restriction-violation? (condition-predicate a4b14@a4b0f)) (set! a4b21@&implementation-restriction-rtd a4b14@a4b0f) (set! a4b23@&implementation-restriction-rcd a4b18@a4b10) (set! a4b29@a4b24 (make-record-type-descriptor '&lexical a4a9f@a4a9a 'a4b27 '#f '#f '#())) (set! a4b2b@a4b26 '#f) (set! a4b2d@a4b25 (make-record-constructor-descriptor a4b29@a4b24 a4aa3@a4a9b a4b2b@a4b26)) (set! a4b30@p? (record-predicate a4b29@a4b24)) (set! a4b32@make-lexical-violation (record-constructor a4b2d@a4b25)) (set! a4b34@lexical-violation? (condition-predicate a4b29@a4b24)) (set! a4b36@&lexical-rtd a4b29@a4b24) (set! a4b38@&lexical-rcd a4b2d@a4b25) (set! a4b42@a4b3d (make-record-type-descriptor '&syntax a4a9f@a4a9a 'a4b40 '#f '#f '#((immutable form) (immutable subform)))) (set! a4b44@a4b3f '#f) (set! a4b46@a4b3e (make-record-constructor-descriptor a4b42@a4b3d a4aa3@a4a9b a4b44@a4b3f)) (set! a4b49@p? (record-predicate a4b42@a4b3d)) (set! a4b4b@make-syntax-violation (record-constructor a4b46@a4b3e)) (set! a4b4d@a4b3a (record-accessor a4b42@a4b3d '0)) (set! a4b4f@a4b3c (record-accessor a4b42@a4b3d '1)) (set! a4b51@syntax-violation? (condition-predicate a4b42@a4b3d)) (set! a4b53@syntax-violation-form (condition-accessor a4b42@a4b3d a4b4d@a4b3a)) (set! a4b55@syntax-violation-subform (condition-accessor a4b42@a4b3d a4b4f@a4b3c)) (set! a4b57@&syntax-rtd a4b42@a4b3d) (set! a4b59@&syntax-rcd a4b46@a4b3e) (set! a4b5f@a4b5a (make-record-type-descriptor '&undefined a4a9f@a4a9a 'a4b5d '#f '#f '#())) (set! a4b61@a4b5c '#f) (set! a4b63@a4b5b (make-record-constructor-descriptor a4b5f@a4b5a a4aa3@a4a9b a4b61@a4b5c)) (set! a4b66@p? (record-predicate a4b5f@a4b5a)) (set! a4b68@make-undefined-violation (record-constructor a4b63@a4b5b)) (set! a4b6a@undefined-violation? (condition-predicate a4b5f@a4b5a)) (set! a4b6c@&undefined-rtd a4b5f@a4b5a) (set! a4b6e@&undefined-rcd a4b63@a4b5b) (set! a4b74@a4b6f (make-record-type-descriptor '&i/o a4a8a@a4a85 'a4b72 '#f '#f '#())) (set! a4b76@a4b71 '#f) (set! a4b78@a4b70 (make-record-constructor-descriptor a4b74@a4b6f a4a8e@a4a86 a4b76@a4b71)) (set! a4b7b@p? (record-predicate a4b74@a4b6f)) (set! a4b7d@make-i/o-error (record-constructor a4b78@a4b70)) (set! a4b7f@i/o-error? (condition-predicate a4b74@a4b6f)) (set! a4b81@&i/o-rtd a4b74@a4b6f) (set! a4b83@&i/o-rcd a4b78@a4b70) (set! a4b89@a4b84 (make-record-type-descriptor '&i/o-read a4b74@a4b6f 'a4b87 '#f '#f '#())) (set! a4b8b@a4b86 '#f) (set! a4b8d@a4b85 (make-record-constructor-descriptor a4b89@a4b84 a4b78@a4b70 a4b8b@a4b86)) (set! a4b90@p? (record-predicate a4b89@a4b84)) (set! a4b92@make-i/o-read-error (record-constructor a4b8d@a4b85)) (set! a4b94@i/o-read-error? (condition-predicate a4b89@a4b84)) (set! a4b96@&i/o-read-rtd a4b89@a4b84) (set! a4b98@&i/o-read-rcd a4b8d@a4b85) (set! a4b9e@a4b99 (make-record-type-descriptor '&i/o-write a4b74@a4b6f 'a4b9c '#f '#f '#())) (set! a4ba0@a4b9b '#f) (set! a4ba2@a4b9a (make-record-constructor-descriptor a4b9e@a4b99 a4b78@a4b70 a4ba0@a4b9b)) (set! a4ba5@p? (record-predicate a4b9e@a4b99)) (set! a4ba7@make-i/o-write-error (record-constructor a4ba2@a4b9a)) (set! a4ba9@i/o-write-error? (condition-predicate a4b9e@a4b99)) (set! a4bab@&i/o-write-rtd a4b9e@a4b99) (set! a4bad@&i/o-write-rcd a4ba2@a4b9a) (set! a4bb5@a4bb0 (make-record-type-descriptor '&i/o-invalid-position a4b74@a4b6f 'a4bb3 '#f '#f '#((immutable position)))) (set! a4bb7@a4bb2 '#f) (set! a4bb9@a4bb1 (make-record-constructor-descriptor a4bb5@a4bb0 a4b78@a4b70 a4bb7@a4bb2)) (set! a4bbc@p? (record-predicate a4bb5@a4bb0)) (set! a4bbe@make-i/o-invalid-position-error (record-constructor a4bb9@a4bb1)) (set! a4bc0@a4baf (record-accessor a4bb5@a4bb0 '0)) (set! a4bc2@i/o-invalid-position-error? (condition-predicate a4bb5@a4bb0)) (set! a4bc4@i/o-error-position (condition-accessor a4bb5@a4bb0 a4bc0@a4baf)) (set! a4bc6@&i/o-invalid-position-rtd a4bb5@a4bb0) (set! a4bc8@&i/o-invalid-position-rcd a4bb9@a4bb1) (set! a4bd0@a4bcb (make-record-type-descriptor '&i/o-filename a4b74@a4b6f 'a4bce '#f '#f '#((immutable filename)))) (set! a4bd2@a4bcd '#f) (set! a4bd4@a4bcc (make-record-constructor-descriptor a4bd0@a4bcb a4b78@a4b70 a4bd2@a4bcd)) (set! a4bd7@p? (record-predicate a4bd0@a4bcb)) (set! a4bd9@make-i/o-filename-error (record-constructor a4bd4@a4bcc)) (set! a4bdb@a4bca (record-accessor a4bd0@a4bcb '0)) (set! a4bdd@i/o-filename-error? (condition-predicate a4bd0@a4bcb)) (set! a4bdf@i/o-error-filename (condition-accessor a4bd0@a4bcb a4bdb@a4bca)) (set! a4be1@&i/o-filename-rtd a4bd0@a4bcb) (set! a4be3@&i/o-filename-rcd a4bd4@a4bcc) (set! a4be9@a4be4 (make-record-type-descriptor '&i/o-file-protection a4bd0@a4bcb 'a4be7 '#f '#f '#())) (set! a4beb@a4be6 '#f) (set! a4bed@a4be5 (make-record-constructor-descriptor a4be9@a4be4 a4bd4@a4bcc a4beb@a4be6)) (set! a4bf0@p? (record-predicate a4be9@a4be4)) (set! a4bf2@make-i/o-file-protection-error (record-constructor a4bed@a4be5)) (set! a4bf4@i/o-file-protection-error? (condition-predicate a4be9@a4be4)) (set! a4bf6@&i/o-file-protection-rtd a4be9@a4be4) (set! a4bf8@&i/o-file-protection-rcd a4bed@a4be5) (set! a4bfe@a4bf9 (make-record-type-descriptor '&i/o-file-is-read-only a4be9@a4be4 'a4bfc '#f '#f '#())) (set! a4c00@a4bfb '#f) (set! a4c02@a4bfa (make-record-constructor-descriptor a4bfe@a4bf9 a4bed@a4be5 a4c00@a4bfb)) (set! a4c05@p? (record-predicate a4bfe@a4bf9)) (set! a4c07@make-i/o-file-is-read-only-error (record-constructor a4c02@a4bfa)) (set! a4c09@i/o-file-is-read-only-error? (condition-predicate a4bfe@a4bf9)) (set! a4c0b@&i/o-file-is-read-only-rtd a4bfe@a4bf9) (set! a4c0d@&i/o-file-is-read-only-rcd a4c02@a4bfa) (set! a4c13@a4c0e (make-record-type-descriptor '&i/o-file-already-exists a4bd0@a4bcb 'a4c11 '#f '#f '#())) (set! a4c15@a4c10 '#f) (set! a4c17@a4c0f (make-record-constructor-descriptor a4c13@a4c0e a4bd4@a4bcc a4c15@a4c10)) (set! a4c1a@p? (record-predicate a4c13@a4c0e)) (set! a4c1c@make-i/o-file-already-exists-error (record-constructor a4c17@a4c0f)) (set! a4c1e@i/o-file-already-exists-error? (condition-predicate a4c13@a4c0e)) (set! a4c20@&i/o-file-already-exists-rtd a4c13@a4c0e) (set! a4c22@&i/o-file-already-exists-rcd a4c17@a4c0f) (set! a4c28@a4c23 (make-record-type-descriptor '&i/o-file-does-not-exist a4bd0@a4bcb 'a4c26 '#f '#f '#())) (set! a4c2a@a4c25 '#f) (set! a4c2c@a4c24 (make-record-constructor-descriptor a4c28@a4c23 a4bd4@a4bcc a4c2a@a4c25)) (set! a4c2f@p? (record-predicate a4c28@a4c23)) (set! a4c31@make-i/o-file-does-not-exist-error (record-constructor a4c2c@a4c24)) (set! a4c33@i/o-file-does-not-exist-error? (condition-predicate a4c28@a4c23)) (set! a4c35@&i/o-file-does-not-exist-rtd a4c28@a4c23) (set! a4c37@&i/o-file-does-not-exist-rcd a4c2c@a4c24) (set! a4c3f@a4c3a (make-record-type-descriptor '&i/o-port a4b74@a4b6f 'a4c3d '#f '#f '#((immutable port)))) (set! a4c41@a4c3c '#f) (set! a4c43@a4c3b (make-record-constructor-descriptor a4c3f@a4c3a a4b78@a4b70 a4c41@a4c3c)) (set! a4c46@p? (record-predicate a4c3f@a4c3a)) (set! a4c48@make-i/o-port-error (record-constructor a4c43@a4c3b)) (set! a4c4a@a4c39 (record-accessor a4c3f@a4c3a '0)) (set! a4c4c@i/o-port-error? (condition-predicate a4c3f@a4c3a)) (set! a4c4e@i/o-error-port (condition-accessor a4c3f@a4c3a a4c4a@a4c39)) (set! a4c50@&i/o-port-rtd a4c3f@a4c3a) (set! a4c52@&i/o-port-rcd a4c43@a4c3b) (set! a4c58@a4c53 (make-record-type-descriptor '&i/o-decoding a4c3f@a4c3a 'a4c56 '#f '#f '#())) (set! a4c5a@a4c55 '#f) (set! a4c5c@a4c54 (make-record-constructor-descriptor a4c58@a4c53 a4c43@a4c3b a4c5a@a4c55)) (set! a4c5f@p? (record-predicate a4c58@a4c53)) (set! a4c61@make-i/o-decoding-error (record-constructor a4c5c@a4c54)) (set! a4c63@i/o-decoding-error? (condition-predicate a4c58@a4c53)) (set! a4c65@&i/o-decoding-rtd a4c58@a4c53) (set! a4c67@&i/o-decoding-rcd a4c5c@a4c54) (set! a4c6f@a4c6a (make-record-type-descriptor '&i/o-encoding a4c3f@a4c3a 'a4c6d '#f '#f '#((immutable char)))) (set! a4c71@a4c6c '#f) (set! a4c73@a4c6b (make-record-constructor-descriptor a4c6f@a4c6a a4c43@a4c3b a4c71@a4c6c)) (set! a4c76@p? (record-predicate a4c6f@a4c6a)) (set! a4c78@make-i/o-encoding-error (record-constructor a4c73@a4c6b)) (set! a4c7a@a4c69 (record-accessor a4c6f@a4c6a '0)) (set! a4c7c@i/o-encoding-error? (condition-predicate a4c6f@a4c6a)) (set! a4c7e@i/o-encoding-error-char (condition-accessor a4c6f@a4c6a a4c7a@a4c69)) (set! a4c80@&i/o-encoding-rtd a4c6f@a4c6a) (set! a4c82@&i/o-encoding-rcd a4c73@a4c6b) (set! a4c88@a4c83 (make-record-type-descriptor '&no-infinities a4b14@a4b0f 'a4c86 '#f '#f '#())) (set! a4c8a@a4c85 '#f) (set! a4c8c@a4c84 (make-record-constructor-descriptor a4c88@a4c83 a4b18@a4b10 a4c8a@a4c85)) (set! a4c8f@p? (record-predicate a4c88@a4c83)) (set! a4c91@make-no-infinities-violation (record-constructor a4c8c@a4c84)) (set! a4c93@no-infinities-violation? (condition-predicate a4c88@a4c83)) (set! a4c95@&no-infinities-rtd a4c88@a4c83) (set! a4c97@&no-infinities-rcd a4c8c@a4c84) (set! a4c9d@a4c98 (make-record-type-descriptor '&no-nans a4b14@a4b0f 'a4c9b '#f '#f '#())) (set! a4c9f@a4c9a '#f) (set! a4ca1@a4c99 (make-record-constructor-descriptor a4c9d@a4c98 a4b18@a4b10 a4c9f@a4c9a)) (set! a4ca4@p? (record-predicate a4c9d@a4c98)) (set! a4ca6@make-no-nans-violation (record-constructor a4ca1@a4c99)) (set! a4ca8@no-nans-violation? (condition-predicate a4c9d@a4c98)) (set! a4caa@&no-nans-rtd a4c9d@a4c98) (set! a4cac@&no-nans-rcd a4ca1@a4c99) (begin (set! a4d9d@a4cac@&no-nans-rcd a4cac@&no-nans-rcd) (set! a4d9c@a4caa@&no-nans-rtd a4caa@&no-nans-rtd) (set! a4d9b@a4ca8@no-nans-violation? a4ca8@no-nans-violation?) (set! a4d9a@a4ca6@make-no-nans-violation a4ca6@make-no-nans-violation) (set! a4d99@a4ca4@p? a4ca4@p?) (set! a4d98@a4ca1@a4c99 a4ca1@a4c99) (set! a4d97@a4c9f@a4c9a a4c9f@a4c9a) (set! a4d96@a4c9d@a4c98 a4c9d@a4c98) (set! a4d95@a4c97@&no-infinities-rcd a4c97@&no-infinities-rcd) (set! a4d94@a4c95@&no-infinities-rtd a4c95@&no-infinities-rtd) (set! a4d93@a4c93@no-infinities-violation? a4c93@no-infinities-violation?) (set! a4d92@a4c91@make-no-infinities-violation a4c91@make-no-infinities-violation) (set! a4d91@a4c8f@p? a4c8f@p?) (set! a4d90@a4c8c@a4c84 a4c8c@a4c84) (set! a4d8f@a4c8a@a4c85 a4c8a@a4c85) (set! a4d8e@a4c88@a4c83 a4c88@a4c83) (set! a4d8d@a4c82@&i/o-encoding-rcd a4c82@&i/o-encoding-rcd) (set! a4d8c@a4c80@&i/o-encoding-rtd a4c80@&i/o-encoding-rtd) (set! a4d8b@a4c7e@i/o-encoding-error-char a4c7e@i/o-encoding-error-char) (set! a4d8a@a4c7c@i/o-encoding-error? a4c7c@i/o-encoding-error?) (set! a4d89@a4c7a@a4c69 a4c7a@a4c69) (set! a4d88@a4c78@make-i/o-encoding-error a4c78@make-i/o-encoding-error) (set! a4d87@a4c76@p? a4c76@p?) (set! a4d86@a4c73@a4c6b a4c73@a4c6b) (set! a4d85@a4c71@a4c6c a4c71@a4c6c) (set! a4d84@a4c6f@a4c6a a4c6f@a4c6a) (set! a4d83@a4c67@&i/o-decoding-rcd a4c67@&i/o-decoding-rcd) (set! a4d82@a4c65@&i/o-decoding-rtd a4c65@&i/o-decoding-rtd) (set! a4d81@a4c63@i/o-decoding-error? a4c63@i/o-decoding-error?) (set! a4d80@a4c61@make-i/o-decoding-error a4c61@make-i/o-decoding-error) (set! a4d7f@a4c5f@p? a4c5f@p?) (set! a4d7e@a4c5c@a4c54 a4c5c@a4c54) (set! a4d7d@a4c5a@a4c55 a4c5a@a4c55) (set! a4d7c@a4c58@a4c53 a4c58@a4c53) (set! a4d7b@a4c52@&i/o-port-rcd a4c52@&i/o-port-rcd) (set! a4d7a@a4c50@&i/o-port-rtd a4c50@&i/o-port-rtd) (set! a4d79@a4c4e@i/o-error-port a4c4e@i/o-error-port) (set! a4d78@a4c4c@i/o-port-error? a4c4c@i/o-port-error?) (set! a4d77@a4c4a@a4c39 a4c4a@a4c39) (set! a4d76@a4c48@make-i/o-port-error a4c48@make-i/o-port-error) (set! a4d75@a4c46@p? a4c46@p?) (set! a4d74@a4c43@a4c3b a4c43@a4c3b) (set! a4d73@a4c41@a4c3c a4c41@a4c3c) (set! a4d72@a4c3f@a4c3a a4c3f@a4c3a) (set! a4d71@a4c37@&i/o-file-does-not-exist-rcd a4c37@&i/o-file-does-not-exist-rcd) (set! a4d70@a4c35@&i/o-file-does-not-exist-rtd a4c35@&i/o-file-does-not-exist-rtd) (set! a4d6f@a4c33@i/o-file-does-not-exist-error? a4c33@i/o-file-does-not-exist-error?) (set! a4d6e@a4c31@make-i/o-file-does-not-exist-error a4c31@make-i/o-file-does-not-exist-error) (set! a4d6d@a4c2f@p? a4c2f@p?) (set! a4d6c@a4c2c@a4c24 a4c2c@a4c24) (set! a4d6b@a4c2a@a4c25 a4c2a@a4c25) (set! a4d6a@a4c28@a4c23 a4c28@a4c23) (set! a4d69@a4c22@&i/o-file-already-exists-rcd a4c22@&i/o-file-already-exists-rcd) (set! a4d68@a4c20@&i/o-file-already-exists-rtd a4c20@&i/o-file-already-exists-rtd) (set! a4d67@a4c1e@i/o-file-already-exists-error? a4c1e@i/o-file-already-exists-error?) (set! a4d66@a4c1c@make-i/o-file-already-exists-error a4c1c@make-i/o-file-already-exists-error) (set! a4d65@a4c1a@p? a4c1a@p?) (set! a4d64@a4c17@a4c0f a4c17@a4c0f) (set! a4d63@a4c15@a4c10 a4c15@a4c10) (set! a4d62@a4c13@a4c0e a4c13@a4c0e) (set! a4d61@a4c0d@&i/o-file-is-read-only-rcd a4c0d@&i/o-file-is-read-only-rcd) (set! a4d60@a4c0b@&i/o-file-is-read-only-rtd a4c0b@&i/o-file-is-read-only-rtd) (set! a4d5f@a4c09@i/o-file-is-read-only-error? a4c09@i/o-file-is-read-only-error?) (set! a4d5e@a4c07@make-i/o-file-is-read-only-error a4c07@make-i/o-file-is-read-only-error) (set! a4d5d@a4c05@p? a4c05@p?) (set! a4d5c@a4c02@a4bfa a4c02@a4bfa) (set! a4d5b@a4c00@a4bfb a4c00@a4bfb) (set! a4d5a@a4bfe@a4bf9 a4bfe@a4bf9) (set! a4d59@a4bf8@&i/o-file-protection-rcd a4bf8@&i/o-file-protection-rcd) (set! a4d58@a4bf6@&i/o-file-protection-rtd a4bf6@&i/o-file-protection-rtd) (set! a4d57@a4bf4@i/o-file-protection-error? a4bf4@i/o-file-protection-error?) (set! a4d56@a4bf2@make-i/o-file-protection-error a4bf2@make-i/o-file-protection-error) (set! a4d55@a4bf0@p? a4bf0@p?) (set! a4d54@a4bed@a4be5 a4bed@a4be5) (set! a4d53@a4beb@a4be6 a4beb@a4be6) (set! a4d52@a4be9@a4be4 a4be9@a4be4) (set! a4d51@a4be3@&i/o-filename-rcd a4be3@&i/o-filename-rcd) (set! a4d50@a4be1@&i/o-filename-rtd a4be1@&i/o-filename-rtd) (set! a4d4f@a4bdf@i/o-error-filename a4bdf@i/o-error-filename) (set! a4d4e@a4bdd@i/o-filename-error? a4bdd@i/o-filename-error?) (set! a4d4d@a4bdb@a4bca a4bdb@a4bca) (set! a4d4c@a4bd9@make-i/o-filename-error a4bd9@make-i/o-filename-error) (set! a4d4b@a4bd7@p? a4bd7@p?) (set! a4d4a@a4bd4@a4bcc a4bd4@a4bcc) (set! a4d49@a4bd2@a4bcd a4bd2@a4bcd) (set! a4d48@a4bd0@a4bcb a4bd0@a4bcb) (set! a4d47@a4bc8@&i/o-invalid-position-rcd a4bc8@&i/o-invalid-position-rcd) (set! a4d46@a4bc6@&i/o-invalid-position-rtd a4bc6@&i/o-invalid-position-rtd) (set! a4d45@a4bc4@i/o-error-position a4bc4@i/o-error-position) (set! a4d44@a4bc2@i/o-invalid-position-error? a4bc2@i/o-invalid-position-error?) (set! a4d43@a4bc0@a4baf a4bc0@a4baf) (set! a4d42@a4bbe@make-i/o-invalid-position-error a4bbe@make-i/o-invalid-position-error) (set! a4d41@a4bbc@p? a4bbc@p?) (set! a4d40@a4bb9@a4bb1 a4bb9@a4bb1) (set! a4d3f@a4bb7@a4bb2 a4bb7@a4bb2) (set! a4d3e@a4bb5@a4bb0 a4bb5@a4bb0) (set! a4d3d@a4bad@&i/o-write-rcd a4bad@&i/o-write-rcd) (set! a4d3c@a4bab@&i/o-write-rtd a4bab@&i/o-write-rtd) (set! a4d3b@a4ba9@i/o-write-error? a4ba9@i/o-write-error?) (set! a4d3a@a4ba7@make-i/o-write-error a4ba7@make-i/o-write-error) (set! a4d39@a4ba5@p? a4ba5@p?) (set! a4d38@a4ba2@a4b9a a4ba2@a4b9a) (set! a4d37@a4ba0@a4b9b a4ba0@a4b9b) (set! a4d36@a4b9e@a4b99 a4b9e@a4b99) (set! a4d35@a4b98@&i/o-read-rcd a4b98@&i/o-read-rcd) (set! a4d34@a4b96@&i/o-read-rtd a4b96@&i/o-read-rtd) (set! a4d33@a4b94@i/o-read-error? a4b94@i/o-read-error?) (set! a4d32@a4b92@make-i/o-read-error a4b92@make-i/o-read-error) (set! a4d31@a4b90@p? a4b90@p?) (set! a4d30@a4b8d@a4b85 a4b8d@a4b85) (set! a4d2f@a4b8b@a4b86 a4b8b@a4b86) (set! a4d2e@a4b89@a4b84 a4b89@a4b84) (set! a4d2d@a4b83@&i/o-rcd a4b83@&i/o-rcd) (set! a4d2c@a4b81@&i/o-rtd a4b81@&i/o-rtd) (set! a4d2b@a4b7f@i/o-error? a4b7f@i/o-error?) (set! a4d2a@a4b7d@make-i/o-error a4b7d@make-i/o-error) (set! a4d29@a4b7b@p? a4b7b@p?) (set! a4d28@a4b78@a4b70 a4b78@a4b70) (set! a4d27@a4b76@a4b71 a4b76@a4b71) (set! a4d26@a4b74@a4b6f a4b74@a4b6f) (set! a4d25@a4b6e@&undefined-rcd a4b6e@&undefined-rcd) (set! a4d24@a4b6c@&undefined-rtd a4b6c@&undefined-rtd) (set! a4d23@a4b6a@undefined-violation? a4b6a@undefined-violation?) (set! a4d22@a4b68@make-undefined-violation a4b68@make-undefined-violation) (set! a4d21@a4b66@p? a4b66@p?) (set! a4d20@a4b63@a4b5b a4b63@a4b5b) (set! a4d1f@a4b61@a4b5c a4b61@a4b5c) (set! a4d1e@a4b5f@a4b5a a4b5f@a4b5a) (set! a4d1d@a4b59@&syntax-rcd a4b59@&syntax-rcd) (set! a4d1c@a4b57@&syntax-rtd a4b57@&syntax-rtd) (set! a4d1b@a4b55@syntax-violation-subform a4b55@syntax-violation-subform) (set! a4d1a@a4b53@syntax-violation-form a4b53@syntax-violation-form) (set! a4d19@a4b51@syntax-violation? a4b51@syntax-violation?) (set! a4d18@a4b4f@a4b3c a4b4f@a4b3c) (set! a4d17@a4b4d@a4b3a a4b4d@a4b3a) (set! a4d16@a4b4b@make-syntax-violation a4b4b@make-syntax-violation) (set! a4d15@a4b49@p? a4b49@p?) (set! a4d14@a4b46@a4b3e a4b46@a4b3e) (set! a4d13@a4b44@a4b3f a4b44@a4b3f) (set! a4d12@a4b42@a4b3d a4b42@a4b3d) (set! a4d11@a4b38@&lexical-rcd a4b38@&lexical-rcd) (set! a4d10@a4b36@&lexical-rtd a4b36@&lexical-rtd) (set! a4d0f@a4b34@lexical-violation? a4b34@lexical-violation?) (set! a4d0e@a4b32@make-lexical-violation a4b32@make-lexical-violation) (set! a4d0d@a4b30@p? a4b30@p?) (set! a4d0c@a4b2d@a4b25 a4b2d@a4b25) (set! a4d0b@a4b2b@a4b26 a4b2b@a4b26) (set! a4d0a@a4b29@a4b24 a4b29@a4b24) (set! a4d09@a4b23@&implementation-restriction-rcd a4b23@&implementation-restriction-rcd) (set! a4d08@a4b21@&implementation-restriction-rtd a4b21@&implementation-restriction-rtd) (set! a4d07@a4b1f@implementation-restriction-violation? a4b1f@implementation-restriction-violation?) (set! a4d06@a4b1d@make-implementation-restriction-violation a4b1d@make-implementation-restriction-violation) (set! a4d05@a4b1b@p? a4b1b@p?) (set! a4d04@a4b18@a4b10 a4b18@a4b10) (set! a4d03@a4b16@a4b11 a4b16@a4b11) (set! a4d02@a4b14@a4b0f a4b14@a4b0f) (set! a4d01@a4b0e@&non-continuable-rcd a4b0e@&non-continuable-rcd) (set! a4d00@a4b0c@&non-continuable-rtd a4b0c@&non-continuable-rtd) (set! a4cff@a4b0a@non-continuable-violation? a4b0a@non-continuable-violation?) (set! a4cfe@a4b08@make-non-continuable-violation a4b08@make-non-continuable-violation) (set! a4cfd@a4b06@p? a4b06@p?) (set! a4cfc@a4b03@a4afb a4b03@a4afb) (set! a4cfb@a4b01@a4afc a4b01@a4afc) (set! a4cfa@a4aff@a4afa a4aff@a4afa) (set! a4cf9@a4af9@&who-rcd a4af9@&who-rcd) (set! a4cf8@a4af7@&who-rtd a4af7@&who-rtd) (set! a4cf7@a4af5@condition-who a4af5@condition-who) (set! a4cf6@a4af3@who-condition? a4af3@who-condition?) (set! a4cf5@a4af1@a4ae0 a4af1@a4ae0) (set! a4cf4@a4aef@make-who-condition a4aef@make-who-condition) (set! a4cf3@a4aed@p? a4aed@p?) (set! a4cf2@a4aea@a4ae2 a4aea@a4ae2) (set! a4cf1@a4ae8@a4ae3 a4ae8@a4ae3) (set! a4cf0@a4ae6@a4ae1 a4ae6@a4ae1) (set! a4cef@a4ade@&irritants-rcd a4ade@&irritants-rcd) (set! a4cee@a4adc@&irritants-rtd a4adc@&irritants-rtd) (set! a4ced@a4ada@condition-irritants a4ada@condition-irritants) (set! a4cec@a4ad8@irritants-condition? a4ad8@irritants-condition?) (set! a4ceb@a4ad6@a4ac5 a4ad6@a4ac5) (set! a4cea@a4ad4@make-irritants-condition a4ad4@make-irritants-condition) (set! a4ce9@a4ad2@p? a4ad2@p?) (set! a4ce8@a4acf@a4ac7 a4acf@a4ac7) (set! a4ce7@a4acd@a4ac8 a4acd@a4ac8) (set! a4ce6@a4acb@a4ac6 a4acb@a4ac6) (set! a4ce5@a4ac3@&assertion-rcd a4ac3@&assertion-rcd) (set! a4ce4@a4ac1@&assertion-rtd a4ac1@&assertion-rtd) (set! a4ce3@a4abf@assertion-violation? a4abf@assertion-violation?) (set! a4ce2@a4abd@make-assertion-violation a4abd@make-assertion-violation) (set! a4ce1@a4abb@p? a4abb@p?) (set! a4ce0@a4ab8@a4ab0 a4ab8@a4ab0) (set! a4cdf@a4ab6@a4ab1 a4ab6@a4ab1) (set! a4cde@a4ab4@a4aaf a4ab4@a4aaf) (set! a4cdd@a4aae@&violation-rcd a4aae@&violation-rcd) (set! a4cdc@a4aac@&violation-rtd a4aac@&violation-rtd) (set! a4cdb@a4aaa@violation? a4aaa@violation?) (set! a4cda@a4aa8@make-violation a4aa8@make-violation) (set! a4cd9@a4aa6@p? a4aa6@p?) (set! a4cd8@a4aa3@a4a9b a4aa3@a4a9b) (set! a4cd7@a4aa1@a4a9c a4aa1@a4a9c) (set! a4cd6@a4a9f@a4a9a a4a9f@a4a9a) (set! a4cd5@a4a99@&error-rcd a4a99@&error-rcd) (set! a4cd4@a4a97@&error-rtd a4a97@&error-rtd) (set! a4cd3@a4a95@error? a4a95@error?) (set! a4cd2@a4a93@make-error a4a93@make-error) (set! a4cd1@a4a91@p? a4a91@p?) (set! a4cd0@a4a8e@a4a86 a4a8e@a4a86) (set! a4ccf@a4a8c@a4a87 a4a8c@a4a87) (set! a4cce@a4a8a@a4a85 a4a8a@a4a85) (set! a4ccd@a4a84@&serious-rcd a4a84@&serious-rcd) (set! a4ccc@a4a82@&serious-rtd a4a82@&serious-rtd) (set! a4ccb@a4a80@serious-condition? a4a80@serious-condition?) (set! a4cca@a4a7e@make-serious-condition a4a7e@make-serious-condition) (set! a4cc9@a4a7c@p? a4a7c@p?) (set! a4cc8@a4a79@a4a71 a4a79@a4a71) (set! a4cc7@a4a77@a4a72 a4a77@a4a72) (set! a4cc6@a4a75@a4a70 a4a75@a4a70) (set! a4cc5@a4a6f@&warning-rcd a4a6f@&warning-rcd) (set! a4cc4@a4a6d@&warning-rtd a4a6d@&warning-rtd) (set! a4cc3@a4a6b@warning? a4a6b@warning?) (set! a4cc2@a4a69@make-warning a4a69@make-warning) (set! a4cc1@a4a67@p? a4a67@p?) (set! a4cc0@a4a64@a4a5c a4a64@a4a5c) (set! a4cbf@a4a62@a4a5d a4a62@a4a5d) (set! a4cbe@a4a60@a4a5b a4a60@a4a5b) (set! a4cbd@a4a5a@&message-rcd a4a5a@&message-rcd) (set! a4cbc@a4a58@&message-rtd a4a58@&message-rtd) (set! a4cbb@a4a56@condition-message a4a56@condition-message) (set! a4cba@a4a54@message-condition? a4a54@message-condition?) (set! a4cb9@a4a52@a4a41 a4a52@a4a41) (set! a4cb8@a4a50@make-message-condition a4a50@make-message-condition) (set! a4cb7@a4a4e@p? a4a4e@p?) (set! a4cb6@a4a4b@a4a43 a4a4b@a4a43) (set! a4cb5@a4a49@a4a44 a4a49@a4a44) (set! a4cb4@a4a47@a4a42 a4a47@a4a42) (set! a4cb3@a49fb@&condition-rcd a49fb@&condition-rcd) (set! a4cb2@a49f9@&condition-rtd a49f9@&condition-rtd) (set! a4cb1@a49f7@make-&condition a49f7@make-&condition) (set! a4cb0@a49f5@&condition? a49f5@&condition?) (set! a4caf@a49f2@a49ea a49f2@a49ea) (set! a4cae@a49f0@a49eb a49f0@a49eb) (set! a4cad@a49ee@a49e9 a49ee@a49e9)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (a28ec@a28a1@current-primitive-locations (lambda (a5210@x) ((lambda (a5212@t) (if a5212@t (cdr a5212@t) '#f)) (assq a5210@x '((&no-nans-rcd . a4d9d@a4cac@&no-nans-rcd) (&no-nans-rtd . a4d9c@a4caa@&no-nans-rtd) (&no-infinities-rcd . a4d95@a4c97@&no-infinities-rcd) (&no-infinities-rtd . a4d94@a4c95@&no-infinities-rtd) (&i/o-encoding-rcd . a4d8d@a4c82@&i/o-encoding-rcd) (&i/o-encoding-rtd . a4d8c@a4c80@&i/o-encoding-rtd) (&i/o-decoding-rcd . a4d83@a4c67@&i/o-decoding-rcd) (&i/o-decoding-rtd . a4d82@a4c65@&i/o-decoding-rtd) (&i/o-port-rcd . a4d7b@a4c52@&i/o-port-rcd) (&i/o-port-rtd . a4d7a@a4c50@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . a4d71@a4c37@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . a4d70@a4c35@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . a4d69@a4c22@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . a4d68@a4c20@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . a4d61@a4c0d@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . a4d60@a4c0b@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . a4d59@a4bf8@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . a4d58@a4bf6@&i/o-file-protection-rtd) (&i/o-filename-rcd . a4d51@a4be3@&i/o-filename-rcd) (&i/o-filename-rtd . a4d50@a4be1@&i/o-filename-rtd) (&i/o-invalid-position-rcd . a4d47@a4bc8@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . a4d46@a4bc6@&i/o-invalid-position-rtd) (&i/o-write-rcd . a4d3d@a4bad@&i/o-write-rcd) (&i/o-write-rtd . a4d3c@a4bab@&i/o-write-rtd) (&i/o-read-rcd . a4d35@a4b98@&i/o-read-rcd) (&i/o-read-rtd . a4d34@a4b96@&i/o-read-rtd) (&i/o-rcd . a4d2d@a4b83@&i/o-rcd) (&i/o-rtd . a4d2c@a4b81@&i/o-rtd) (&undefined-rcd . a4d25@a4b6e@&undefined-rcd) (&undefined-rtd . a4d24@a4b6c@&undefined-rtd) (&syntax-rcd . a4d1d@a4b59@&syntax-rcd) (&syntax-rtd . a4d1c@a4b57@&syntax-rtd) (&lexical-rcd . a4d11@a4b38@&lexical-rcd) (&lexical-rtd . a4d10@a4b36@&lexical-rtd) (&implementation-restriction-rcd . a4d09@a4b23@&implementation-restriction-rcd) (&implementation-restriction-rtd . a4d08@a4b21@&implementation-restriction-rtd) (&non-continuable-rcd . a4d01@a4b0e@&non-continuable-rcd) (&non-continuable-rtd . a4d00@a4b0c@&non-continuable-rtd) (&who-rcd . a4cf9@a4af9@&who-rcd) (&who-rtd . a4cf8@a4af7@&who-rtd) (&irritants-rcd . a4cef@a4ade@&irritants-rcd) (&irritants-rtd . a4cee@a4adc@&irritants-rtd) (&assertion-rcd . a4ce5@a4ac3@&assertion-rcd) (&assertion-rtd . a4ce4@a4ac1@&assertion-rtd) (&violation-rcd . a4cdd@a4aae@&violation-rcd) (&violation-rtd . a4cdc@a4aac@&violation-rtd) (&error-rcd . a4cd5@a4a99@&error-rcd) (&error-rtd . a4cd4@a4a97@&error-rtd) (&serious-rcd . a4ccd@a4a84@&serious-rcd) (&serious-rtd . a4ccc@a4a82@&serious-rtd) (&warning-rcd . a4cc5@a4a6f@&warning-rcd) (&warning-rtd . a4cc4@a4a6d@&warning-rtd) (&message-rcd . a4cbd@a4a5a@&message-rcd) (&message-rtd . a4cbc@a4a58@&message-rtd) (&condition-rcd . a4cb3@a49fb@&condition-rcd) (&condition-rtd . a4cb2@a49f9@&condition-rtd) (syntax-error . a49db@a2fe1@syntax-error) (syntax-dispatch . a4970@a2efc@syntax-dispatch) (load . a4ece@a4db9@load) (interaction-environment . a49e3@a2ff1@interaction-environment) (library-path . a2b03@a2992@library-path) (make-parameter . a289b@a27c5@make-parameter) (make-variable-transformer . a492e@a2d29@make-variable-transformer) (identifier? . a49de@a2fe7@identifier?) (generate-temporaries . a49d4@a2fd3@generate-temporaries) (free-identifier=? . a49d5@a2fd5@free-identifier=?) (syntax->datum . a49e0@a2feb@syntax->datum) (datum->syntax . a49df@a2fe9@datum->syntax) (bound-identifier=? . a49d6@a2fd7@bound-identifier=?) (make-i/o-write-error . a4d3a@a4ba7@make-i/o-write-error) (make-i/o-read-error . a4d32@a4b92@make-i/o-read-error) (make-i/o-port-error . a4d76@a4c48@make-i/o-port-error) (make-i/o-invalid-position-error . a4d42@a4bbe@make-i/o-invalid-position-error) (make-i/o-filename-error . a4d4c@a4bd9@make-i/o-filename-error) (make-i/o-file-protection-error . a4d56@a4bf2@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . a4d5e@a4c07@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . a4d6e@a4c31@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . a4d66@a4c1c@make-i/o-file-already-exists-error) (make-i/o-error . a4d2a@a4b7d@make-i/o-error) (make-i/o-encoding-error . a4d88@a4c78@make-i/o-encoding-error) (make-i/o-decoding-error . a4d80@a4c61@make-i/o-decoding-error) (i/o-write-error? . a4d3b@a4ba9@i/o-write-error?) (i/o-read-error? . a4d33@a4b94@i/o-read-error?) (i/o-port-error? . a4d78@a4c4c@i/o-port-error?) (i/o-invalid-position-error? . a4d44@a4bc2@i/o-invalid-position-error?) (i/o-filename-error? . a4d4e@a4bdd@i/o-filename-error?) (i/o-file-protection-error? . a4d57@a4bf4@i/o-file-protection-error?) (i/o-file-is-read-only-error? . a4d5f@a4c09@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . a4d6f@a4c33@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . a4d67@a4c1e@i/o-file-already-exists-error?) (i/o-error? . a4d2b@a4b7f@i/o-error?) (i/o-error-position . a4d45@a4bc4@i/o-error-position) (i/o-error-port . a4d79@a4c4e@i/o-error-port) (i/o-error-filename . a4d4f@a4bdf@i/o-error-filename) (i/o-encoding-error? . a4d8a@a4c7c@i/o-encoding-error?) (i/o-encoding-error-char . a4d8b@a4c7e@i/o-encoding-error-char) (i/o-decoding-error? . a4d81@a4c63@i/o-decoding-error?) (scheme-report-environment . a49cb@a2fc1@scheme-report-environment) (null-environment . a49ca@a2fbf@null-environment) (command-line . a4ecb@a4db3@command-line) (eval . a49cd@a2fc5@eval) (environment . a49c9@a2fbd@environment) (who-condition? . a4cf6@a4af3@who-condition?) (warning? . a4cc3@a4a6b@warning?) (violation? . a4cdb@a4aaa@violation?) (undefined-violation? . a4d23@a4b6a@undefined-violation?) (syntax-violation? . a4d19@a4b51@syntax-violation?) (syntax-violation-subform . a4d1b@a4b55@syntax-violation-subform) (syntax-violation-form . a4d1a@a4b53@syntax-violation-form) (syntax-violation . a49dd@a2fe5@syntax-violation) (serious-condition? . a4ccb@a4a80@serious-condition?) (non-continuable-violation? . a4cff@a4b0a@non-continuable-violation?) (message-condition? . a4cba@a4a54@message-condition?) (make-who-condition . a4cf4@a4aef@make-who-condition) (make-warning . a4cc2@a4a69@make-warning) (make-violation . a4cda@a4aa8@make-violation) (make-undefined-violation . a4d22@a4b68@make-undefined-violation) (make-syntax-violation . a4d16@a4b4b@make-syntax-violation) (make-serious-condition . a4cca@a4a7e@make-serious-condition) (make-non-continuable-violation . a4cfe@a4b08@make-non-continuable-violation) (make-message-condition . a4cb8@a4a50@make-message-condition) (make-lexical-violation . a4d0e@a4b32@make-lexical-violation) (make-irritants-condition . a4cea@a4ad4@make-irritants-condition) (make-implementation-restriction-violation . a4d06@a4b1d@make-implementation-restriction-violation) (make-error . a4cd2@a4a93@make-error) (make-assertion-violation . a4ce2@a4abd@make-assertion-violation) (lexical-violation? . a4d0f@a4b34@lexical-violation?) (irritants-condition? . a4cec@a4ad8@irritants-condition?) (implementation-restriction-violation? . a4d07@a4b1f@implementation-restriction-violation?) (error? . a4cd3@a4a95@error?) (condition-who . a4cf7@a4af5@condition-who) (condition-message . a4cbb@a4a56@condition-message) (condition-irritants . a4ced@a4ada@condition-irritants) (assertion-violation? . a4ce3@a4abf@assertion-violation?) (no-nans-violation? . a4d9b@a4ca8@no-nans-violation?) (no-infinities-violation? . a4d93@a4c93@no-infinities-violation?) (make-no-nans-violation . a4d9a@a4ca6@make-no-nans-violation) (make-no-infinities-violation . a4d92@a4c91@make-no-infinities-violation) (assertion-error . a49da@a2fdf@assertion-error)))))) (a2b13@a29b2@install-library 'a51ed '(mosh interaction) '() '() '() '() '((regexp? . a51e5) (alist->eq-hash-table . a51e2) (format . a51df) (string-split . a51d4) (call-process . a51ce) (set-current-directory! . a51ca) (expand-path . a51c9) (current-directory . a51c8) (%spawn . a51c7) (%waitpid . a51c6) (pointer-ref-c-int64 . a51c5) (pointer-ref-c-int32 . a51c4) (pointer-ref-c-int16 . a51c3) (pointer-ref-c-int8 . a51c2) (pointer-ref-c-uint64 . a51c1) (pointer-ref-c-uint32 . a51c0) (pointer-ref-c-uint16 . a51bf) (pointer-ref-c-uint8 . a51be) (pointer-set-c-int64! . a51bd) (pointer-set-c-int32! . a51bc) (pointer-set-c-int16! . a51bb) (pointer-set-c-int8! . a51ba) (pointer-set-c-pointer! . a51b9) (pointer-set-c-double! . a51b8) (pointer-set-c-float! . a51b7) (pointer-set-c-long-long! . a51b6) (pointer-set-c-long! . a51b5) (pointer-set-c-int! . a51b4) (pointer-set-c-short! . a51b3) (pointer-set-c-char! . a51b2) (pointer-ref-c-pointer . a51b1) (pointer-ref-c-double . a51b0) (pointer-ref-c-float . a51af) (pointer-ref-c-unsigned-long-long . a51ae) (pointer-ref-c-signed-long-long . a51ad) (pointer-ref-c-unsigned-long . a51ac) (pointer-ref-c-signed-long . a51ab) (pointer-ref-c-unsigned-int . a51aa) (pointer-ref-c-signed-int . a51a9) (pointer-ref-c-unsigned-short . a51a8) (pointer-ref-c-signed-short . a51a7) (pointer-ref-c-unsigned-char . a51a6) (pointer-ref-c-signed-char . a51a5) (pointer->integer . a51a4) (integer->pointer . a51a3) (pointer? . a51a2) (shared-errno . a51a1) (%ffi-supported? . a51a0) (%ffi-pointer->string . a519f) (%ffi-call->string-or-zero . a519e) (%ffi-call->double . a519d) (%ffi-call->void* . a519c) (%ffi-call->void . a519b) (%ffi-call->char . a519a) (%ffi-call->int . a5199) (%ffi-lookup . a5198) (%ffi-open . a5197) (%fork . a5196) (%pipe . a5195) (p . a5194) (whereis . a517e) (register . a517d) (vm-join! . a517c) (vm-set-value! . a517b) (vm? . a517a) (main-vm? . a5179) (vm-eval . a5178) (vm-self . a5177) (vm-start! . a5176) (make-vm . a5175) (mutex-try-lock! . a5174) (mutex-unlock! . a5173) (mutex-lock! . a5172) (mutex? . a5171) (make-mutex . a5170) (condition-variable-notify-all! . a516f) (condition-variable-notify! . a516e) (condition-variable-wait! . a516d) (make-condition-variable . a516c) (string-upcase . a5155) (string-titlecase . a5154) (string-normalize-nfkd . a5153) (string-normalize-nfkc . a5152) (string-normalize-nfd . a5151) (string-normalize-nfc . a5150) (string-foldcase . a514f) (string-downcase . a514e) (string-ci>? . a514d) (string-ci>=? . a514c) (string-ci=? . a514b) (string-ci<? . a514a) (string-ci<=? . a5149) (char-whitespace? . a5148) (char-upper-case? . a5147) (char-title-case? . a5146) (char-numeric? . a5145) (char-lower-case? . a5144) (char-general-category . a5143) (char-upcase . a5142) (char-titlecase . a5141) (char-foldcase . a5140) (char-downcase . a513f) (char-ci>? . a513e) (char-ci>=? . a513d) (char-ci=? . a513c) (char-ci<? . a513b) (char-ci<=? . a513a) (char-alphabetic? . a5139) (make-variable-transformer . a2d28) (identifier? . a2fe6) (generate-temporaries . a2fd2) (free-identifier=? . a2fd4) (syntax->datum . a2fea) (datum->syntax . a2fe8) (bound-identifier=? . a2fd6) (record-type-descriptor? . a5138) (record-predicate . a5137) (record-mutator . a5136) (record-constructor . a5135) (record-accessor . a5134) (make-record-type-descriptor . a5133) (make-record-constructor-descriptor . a5132) (record? . a5131) (record-type-uid . a5130) (record-type-sealed? . a512f) (record-type-parent . a512e) (record-type-opaque? . a512d) (record-type-name . a512c) (record-type-generative? . a512b) (record-type-field-names . a512a) (record-rtd . a5129) (record-field-mutable? . a5128) (delete-file . a5127) (file-exists? . a5126) (vector-sort! . a5125) (vector-sort . a5124) (list-sort . a5123) (symbol-hash . a5122) (string-ci-hash . a5121) (string-hash . a5120) (equal-hash . a511f) (hashtable-equivalence-function . a511e) (make-hashtable . a511d) (hashtable-hash-function . a511c) (make-eqv-hashtable . a511b) (make-eq-hashtable . a511a) (hashtable? . a5119) (hashtable-update! . a5118) (hashtable-size . a5117) (hashtable-set! . a5116) (hashtable-ref . a5115) (hashtable-mutable? . a5114) (hashtable-keys . a5113) (hashtable-entries . a5112) (hashtable-delete! . a5111) (hashtable-copy . a5110) (hashtable-contains? . a510f) (hashtable-clear! . a510e) (call-with-output-file . a510d) (call-with-input-file . a510c) (write-char . a510b) (write . a510a) (with-output-to-file . a5109) (with-input-from-file . a5108) (read-char . a5107) (read . a5106) (peek-char . a5105) (open-output-file . a5104) (open-input-file . a5103) (newline . a5102) (display . a5101) (close-output-port . a5100) (close-input-port . a50ff) (eof-object? . a50fe) (eof-object . a50fd) (current-error-port . a50fc) (current-output-port . a50fb) (current-input-port . a50fa) (output-port? . a50f9) (input-port? . a50f8) (utf-8-codec . a50f7) (utf-16-codec . a50f6) (transcoder-error-handling-mode . a50f5) (transcoder-eol-style . a50f4) (transcoder-codec . a50f3) (transcoded-port . a50f2) (textual-port? . a50f1) (string->bytevector . a50f0) (standard-output-port . a50ef) (standard-input-port . a50ee) (standard-error-port . a50ed) (set-port-position! . a50ec) (put-u8 . a50eb) (put-string . a50ea) (put-datum . a50e9) (put-char . a50e8) (put-bytevector . a50e7) (port? . a50e6) (port-transcoder . a50e5) (port-position . a50e4) (port-has-set-port-position!? . a50e3) (port-has-port-position? . a50e2) (port-eof? . a50e1) (output-port-buffer-mode . a50e0) (open-string-output-port . a50df) (open-string-input-port . a50de) (open-file-output-port . a50dd) (open-file-input/output-port . a50dc) (open-file-input-port . a50db) (open-bytevector-output-port . a50da) (open-bytevector-input-port . a50d9) (native-transcoder . a50d8) (native-eol-style . a50d7) (make-transcoder . a50d6) (latin-1-codec . a50d5) (make-i/o-write-error . a4ba6) (make-i/o-read-error . a4b91) (make-i/o-port-error . a4c47) (make-i/o-invalid-position-error . a4bbd) (make-i/o-filename-error . a4bd8) (make-i/o-file-protection-error . a4bf1) (make-i/o-file-is-read-only-error . a4c06) (make-i/o-file-does-not-exist-error . a4c30) (make-i/o-file-already-exists-error . a4c1b) (make-i/o-error . a4b7c) (make-i/o-encoding-error . a4c77) (make-i/o-decoding-error . a4c60) (make-custom-textual-output-port . a50d4) (make-custom-textual-input/output-port . a50d3) (make-custom-textual-input-port . a50d2) (make-custom-binary-output-port . a50d1) (make-custom-binary-input/output-port . a50d0) (make-custom-binary-input-port . a50cf) (make-bytevector . a50ce) (lookahead-u8 . a50cd) (lookahead-char . a50cc) (i/o-write-error? . a4ba8) (i/o-read-error? . a4b93) (i/o-port-error? . a4c4b) (i/o-invalid-position-error? . a4bc1) (i/o-filename-error? . a4bdc) (i/o-file-protection-error? . a4bf3) (i/o-file-is-read-only-error? . a4c08) (i/o-file-does-not-exist-error? . a4c32) (i/o-file-already-exists-error? . a4c1d) (i/o-error? . a4b7e) (i/o-error-position . a4bc3) (i/o-error-port . a4c4d) (i/o-error-filename . a4bde) (i/o-encoding-error? . a4c7b) (i/o-encoding-error-char . a4c7d) (i/o-decoding-error? . a4c62) (get-u8 . a50cb) (get-string-n! . a50ca) (get-string-n . a50c9) (get-string-all . a50c8) (get-line . a50c7) (get-datum . a50c6) (get-char . a50c5) (get-bytevector-some . a50c4) (get-bytevector-n! . a50c3) (get-bytevector-n . a50c2) (get-bytevector-all . a50c1) (flush-output-port . a50c0) (close-port . a50bf) (exit . a50b7) (command-line . a4db2) (string-fill! . a50b6) (string-set! . a50b5) (set-cdr! . a50b4) (set-car! . a50b3) (remove . a50b2) (remv . a50b1) (remp . a50b0) (remq . a50af) (partition . a50ae) (memv . a50ad) (memq . a50ac) (memp . a50ab) (member . a50aa) (exists . a50a9) (for-all . a50a8) (fold-right . a50a7) (fold-left . a50a6) (find . a50a5) (filter . a50a4) (cons* . a50a3) (assv . a50a2) (assq . a50a1) (assp . a50a0) (assoc . a509f) (call-with-string-output-port . a509e) (call-with-port . a509d) (call-with-bytevector-output-port . a509c) (bytevector->string . a509b) (buffer-mode? . a509a) (binary-port? . a5099) (with-exception-handler . a5098) (raise-continuable . a5097) (raise . a5096) (eval . a2fc4) (environment . a2fbc) (make-enumeration . a5095) (enum-set=? . a5094) (enum-set-universe . a5093) (enum-set-union . a5092) (enum-set-subset? . a5091) (enum-set-projection . a5090) (enum-set-member? . a508f) (enum-set-intersection . a508e) (enum-set-indexer . a508d) (enum-set-difference . a508c) (enum-set-constructor . a508b) (enum-set-complement . a508a) (enum-set->list . a5089) (who-condition? . a4af2) (warning? . a4a6a) (violation? . a4aa9) (undefined-violation? . a4b69) (syntax-violation? . a4b50) (syntax-violation-subform . a4b54) (syntax-violation-form . a4b52) (syntax-violation . a2fe4) (simple-conditions . a5088) (serious-condition? . a4a7f) (non-continuable-violation? . a4b09) (message-condition? . a4a53) (make-who-condition . a4aee) (make-warning . a4a68) (make-violation . a4aa7) (make-undefined-violation . a4b67) (make-syntax-violation . a4b4a) (make-serious-condition . a4a7d) (make-non-continuable-violation . a4b07) (make-message-condition . a4a4f) (make-lexical-violation . a4b31) (make-irritants-condition . a4ad3) (make-implementation-restriction-violation . a4b1c) (make-error . a4a92) (make-assertion-violation . a4abc) (lexical-violation? . a4b33) (irritants-condition? . a4ad7) (implementation-restriction-violation? . a4b1e) (error? . a4a94) (condition-who . a4af4) (condition-predicate . a5087) (condition-message . a4a55) (condition-irritants . a4ad9) (condition-accessor . a5086) (condition . a5085) (assertion-violation? . a4abe) (condition? . a5084) (utf32->string . a5083) (utf16->string . a5082) (utf8->string . a5081) (uint-list->bytevector . a5080) (u8-list->bytevector . a507f) (string->utf8 . a507e) (string->utf32 . a507d) (string->utf16 . a507c) (sint-list->bytevector . a507b) (native-endianness . a507a) (bytevector? . a5079) (bytevector=? . a5078) (bytevector-uint-set! . a5077) (bytevector-uint-ref . a5076) (bytevector-u8-set! . a5075) (bytevector-u8-ref . a5074) (bytevector-u64-set! . a5073) (bytevector-u64-ref . a5072) (bytevector-u64-native-set! . a5071) (bytevector-u64-native-ref . a5070) (bytevector-u32-set! . a506f) (bytevector-u32-ref . a506e) (bytevector-u32-native-set! . a506d) (bytevector-u32-native-ref . a506c) (bytevector-u16-set! . a506b) (bytevector-u16-ref . a506a) (bytevector-u16-native-set! . a5069) (bytevector-u16-native-ref . a5068) (bytevector-sint-set! . a5067) (bytevector-sint-ref . a5066) (bytevector-s8-set! . a5065) (bytevector-s8-ref . a5064) (bytevector-s64-set! . a5063) (bytevector-s64-ref . a5062) (bytevector-s64-native-set! . a5061) (bytevector-s64-native-ref . a5060) (bytevector-s32-set! . a505f) (bytevector-s32-ref . a505e) (bytevector-s32-native-set! . a505d) (bytevector-s32-native-ref . a505c) (bytevector-s16-set! . a505b) (bytevector-s16-ref . a505a) (bytevector-s16-native-set! . a5059) (bytevector-s16-native-ref . a5058) (bytevector-length . a5057) (bytevector-ieee-single-ref . a5056) (bytevector-ieee-single-set! . a5055) (bytevector-ieee-single-native-set! . a5054) (bytevector-ieee-single-native-ref . a5053) (bytevector-ieee-double-set! . a5052) (bytevector-ieee-double-ref . a5051) (bytevector-ieee-double-native-set! . a5050) (bytevector-ieee-double-native-ref . a504f) (bytevector-fill! . a504e) (bytevector-copy! . a504d) (bytevector-copy . a504c) (bytevector->uint-list . a504b) (bytevector->u8-list . a504a) (bytevector->sint-list . a5049) (no-nans-violation? . a4ca7) (no-infinities-violation? . a4c92) (make-no-nans-violation . a4ca5) (make-no-infinities-violation . a4c90) (real->flonum . a5048) (flzero? . a5047) (fltruncate . a5046) (fltan . a5045) (flsqrt . a5044) (flsin . a5043) (flround . a5042) (flpositive? . a5041) (flonum? . a5040) (flodd? . a503f) (flnumerator . a503e) (flnegative? . a503d) (flnan? . a503c) (flmod0 . a503b) (flmod . a503a) (flmin . a5039) (flmax . a5038) (fllog . a5037) (flinteger? . a5036) (flinfinite? . a5035) (flfloor . a5034) (flfinite? . a5033) (flexpt . a5032) (flexp . a5031) (fleven? . a5030) (fldiv0-and-mod0 . a502f) (fldiv0 . a502e) (fldiv-and-mod . a502d) (fldiv . a502c) (fldenominator . a502b) (flcos . a502a) (flceiling . a5029) (flatan . a5028) (flasin . a5027) (flacos . a5026) (flabs . a5025) (fl>? . a5024) (fl>=? . a5023) (fl=? . a5022) (fl<? . a5021) (fl<=? . a5020) (fl/ . a501f) (fl- . a501e) (fl+ . a501d) (fl* . a501c) (fixnum->flonum . a501b) (fxzero? . a501a) (fxxor . a5019) (fxrotate-bit-field . a5018) (fxreverse-bit-field . a5017) (fxpositive? . a5016) (fxodd? . a5015) (fxnot . a5014) (fxnegative? . a5013) (fxmod0 . a5012) (fxmod . a5011) (fxmin . a5010) (fxmax . a500f) (fxlength . a500e) (fxior . a500d) (fxif . a500c) (fxfirst-bit-set . a500b) (fxeven? . a500a) (fxdiv0-and-mod0 . a5009) (fxdiv0 . a5008) (fxdiv-and-mod . a5007) (fxdiv . a5006) (fxcopy-bit-field . a5005) (fxcopy-bit . a5004) (fxbit-set? . a5003) (fxbit-field . a5002) (fxbit-count . a5001) (fxarithmetic-shift-right . a5000) (fxarithmetic-shift-left . a4fff) (fxarithmetic-shift . a4ffe) (fxand . a4ffd) (fx>? . a4ffc) (fx>=? . a4ffb) (fx=? . a4ffa) (fx<? . a4ff9) (fx<=? . a4ff8) (fx-/carry . a4ff7) (fx- . a4ff6) (fx+/carry . a4ff5) (fx+ . a4ff4) (fx*/carry . a4ff3) (fx* . a4ff2) (greatest-fixnum . a4ff1) (least-fixnum . a4ff0) (fixnum-width . a4fef) (fixnum? . a4fee) (bitwise-rotate-bit-field . a4fed) (bitwise-reverse-bit-field . a4fec) (bitwise-length . a4feb) (bitwise-if . a4fea) (bitwise-first-bit-set . a4fe9) (bitwise-copy-bit-field . a4fe8) (bitwise-copy-bit . a4fe7) (bitwise-bit-set? . a4fe6) (bitwise-bit-field . a4fe5) (bitwise-bit-count . a4fe4) (bitwise-xor . a4fe3) (bitwise-ior . a4fe2) (bitwise-and . a4fe1) (bitwise-not . a4fe0) (bitwise-arithmetic-shift-right . a4fdf) (bitwise-arithmetic-shift-left . a4fde) (bitwise-arithmetic-shift . a4fdd) (zero? . a4fdc) (vector? . a4fdb) (vector-set! . a4fda) (vector-ref . a4fd9) (vector-map . a4fd8) (vector-length . a4fd7) (vector-for-each . a4fd6) (vector-fill! . a4fd5) (vector->list . a4fd4) (vector . a4fd3) (values . a4fd2) (truncate . a4fd1) (tan . a4fd0) (symbol? . a4fcf) (symbol=? . a4fce) (symbol->string . a4fcd) (substring . a4fcc) (string? . a4fcb) (string>? . a4fca) (string>=? . a4fc9) (string=? . a4fc8) (string<? . a4fc7) (string<=? . a4fc6) (string-ref . a4fc5) (string-length . a4fc4) (string-for-each . a4fc3) (string-copy . a4fc2) (string-append . a4fc1) (string->symbol . a4fc0) (string->number . a4fbf) (string->list . a4fbe) (string . a4fbd) (sqrt . a4fbc) (sin . a4fbb) (round . a4fba) (reverse . a4fb9) (real? . a4fb8) (real-valued? . a4fb7) (real-part . a4fb6) (rationalize . a4fb5) (rational? . a4fb4) (rational-valued? . a4fb3) (procedure? . a4fb2) (positive? . a4fb1) (pair? . a4fb0) (odd? . a4faf) (numerator . a4fae) (number? . a4fad) (number->string . a4fac) (null? . a4fab) (not . a4faa) (negative? . a4fa9) (nan? . a4fa8) (min . a4fa7) (max . a4fa6) (map . a4fa5) (make-vector . a4fa4) (make-string . a4fa3) (make-rectangular . a4fa2) (make-polar . a4fa1) (magnitude . a4fa0) (log . a4f9f) (list? . a4f9e) (list-tail . a4f9d) (list-ref . a4f9c) (list->vector . a4f9b) (list->string . a4f9a) (list . a4f99) (length . a4f98) (lcm . a4f97) (integer? . a4f96) (integer-valued? . a4f95) (integer->char . a4f94) (infinite? . a4f93) (inexact? . a4f92) (inexact . a4f91) (imag-part . a4f90) (gcd . a4f8f) (for-each . a4f8e) (floor . a4f8d) (finite? . a4f8c) (expt . a4f8b) (exp . a4f8a) (exact? . a4f89) (exact-integer-sqrt . a4f88) (exact . a4f87) (even? . a4f86) (error . a4f85) (eqv? . a4f84) (equal? . a4f83) (eq? . a4f82) (dynamic-wind . a4f81) (div0-and-mod0 . a4f80) (mod0 . a4f7f) (div0 . a4f7e) (div-and-mod . a4f7d) (mod . a4f7c) (div . a4f7b) (denominator . a4f7a) (cos . a4f79) (cons . a4f78) (complex? . a4f77) (char? . a4f76) (char>? . a4f75) (char>=? . a4f74) (char=? . a4f73) (char<? . a4f72) (char<=? . a4f71) (char->integer . a4f70) (ceiling . a4f6f) (call-with-values . a4f6e) (call/cc . a4f6d) (call-with-current-continuation . a4f6c) (cddddr . a4f6b) (cdddar . a4f6a) (cddadr . a4f69) (cddaar . a4f68) (cdaddr . a4f67) (cdadar . a4f66) (cdaadr . a4f65) (cdaaar . a4f64) (cadddr . a4f63) (caddar . a4f62) (cadadr . a4f61) (cadaar . a4f60) (caaddr . a4f5f) (caadar . a4f5e) (caaadr . a4f5d) (caaaar . a4f5c) (cdddr . a4f5b) (cddar . a4f5a) (cdadr . a4f59) (cdaar . a4f58) (caddr . a4f57) (cadar . a4f56) (caadr . a4f55) (caaar . a4f54) (cddr . a4f53) (cdar . a4f52) (cadr . a4f51) (caar . a4f50) (cdr . a4f4f) (car . a4f4e) (boolean? . a4f4d) (boolean=? . a4f4c) (atan . a4f4b) (assertion-violation . a4f4a) (asin . a4f49) (apply . a4f48) (append . a4f47) (angle . a4f46) (acos . a4f45) (abs . a4f44) (/ . a4f43) (* . a4f42) (- . a4f41) (+ . a4f40) (>= . a4f3f) (> . a4f3e) (= . a4f3d) (<= . a4f3c) (< . a4f3b) (library . a4f3a) (&no-nans . a4f39) (&no-infinities . a4f38) (&i/o-encoding . a4f37) (&i/o-decoding . a4f36) (&i/o-port . a4f35) (&i/o-file-does-not-exist . a4f34) (&i/o-file-already-exists . a4f33) (&i/o-file-is-read-only . a4f32) (&i/o-file-protection . a4f31) (&i/o-filename . a4f30) (&i/o-invalid-position . a4f2f) (&i/o-write . a4f2e) (&i/o-read . a4f2d) (&i/o . a4f2c) (&undefined . a4f2b) (&syntax . a4f2a) (&lexical . a4f29) (&implementation-restriction . a4f28) (&non-continuable . a4f27) (&who . a4f26) (&irritants . a4f25) (&assertion . a4f24) (&violation . a4f23) (&error . a4f22) (&serious . a4f21) (&warning . a4f20) (&message . a4f1f) (&condition . a4f1e) (define-condition-type . a4f1d) (define-enumeration . a4f1c) (define-record-type . a4f1b) (parent-rtd . a4f1a) (nongenerative . a4f19) (opaque . a4f18) (sealed . a4f17) (protocol . a4f16) (parent . a4f15) (immutable . a4f14) (mutable . a4f13) (fields . a4f12) (error-handling-mode . a4f11) (file-options . a4f10) (buffer-mode . a4f0f) (eol-style . a4f0e) (guard . a4f0d) (unsyntax-splicing . a4f0a) (unsyntax . a4f09) (unquote-splicing . a4f08) (unquote . a4f07) (_ . a4f06) (else . a4f05) (=> . a4f04) (... . a4f03) (assert . a4f02) (endianness . a4f01) (time . a4eff) (do . a4efe) (cond . a4efd) (let* . a4efc) (let . a4efb) (let*-values . a4efa) (let-values . a4ef9) (identifier-syntax . a4ef8) (with-syntax . a4ef7) (quasisyntax . a4ef6) (quasiquote . a4ef5) (syntax-rules . a4ef4) (include . a4ef3) (record-constructor-descriptor . a4ef1) (record-type-descriptor . a4ef0) (case . a4eef) (unless . a4eed) (when . a4eec) (or . a4eeb) (and . a4eea) (if . a4ee9) (letrec* . a4ee8) (letrec . a4ee7) (case-lambda . a4ee5) (lambda . a4ee4) (syntax . a4ee3) (syntax-case . a4ee2) (quote . a4ee1) (letrec-syntax . a4edf) (let-syntax . a4ede) (set! . a4edd) (import . a4edc) (begin . a4edb) (define-syntax . a4ed9) (define . a4ed8)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51ee '(psyntax null-environment-5) '() '() '() '() '((make-promise . a50b8) (unquote-splicing . a4f08) (unquote . a4f07) (_ . a4f06) (else . a4f05) (=> . a4f04) (... . a4f03) (delay . a4f00) (do . a4efe) (cond . a4efd) (let* . a4efc) (let . a4efb) (quasiquote . a4ef5) (syntax-rules . a4ef4) (case . a4eef) (or . a4eeb) (and . a4eea) (if . a4ee9) (letrec . a4ee7) (lambda . a4ee4) (quote . a4ee1) (letrec-syntax . a4edf) (let-syntax . a4ede) (set! . a4edd) (begin . a4edb) (define-syntax . a4ed9) (define . a4ed8)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51ef '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . a514d) (string-ci>=? . a514c) (string-ci=? . a514b) (string-ci<? . a514a) (string-ci<=? . a5149) (char-whitespace? . a5148) (char-upper-case? . a5147) (char-numeric? . a5145) (char-lower-case? . a5144) (char-upcase . a5142) (char-downcase . a513f) (char-ci>? . a513e) (char-ci>=? . a513d) (char-ci=? . a513c) (char-ci<? . a513b) (char-ci<=? . a513a) (char-alphabetic? . a5139) (call-with-output-file . a510d) (call-with-input-file . a510c) (write-char . a510b) (write . a510a) (with-output-to-file . a5109) (with-input-from-file . a5108) (read-char . a5107) (read . a5106) (peek-char . a5105) (open-output-file . a5104) (open-input-file . a5103) (newline . a5102) (display . a5101) (close-output-port . a5100) (close-input-port . a50ff) (eof-object . a50fd) (current-output-port . a50fb) (current-input-port . a50fa) (output-port? . a50f9) (input-port? . a50f8) (scheme-report-environment . a2fc0) (quotient . a50be) (null-environment . a2fbe) (remainder . a50bd) (modulo . a50bc) (inexact->exact . a50bb) (force . a50ba) (exact->inexact . a50b9) (make-promise . a50b8) (string-fill! . a50b6) (string-set! . a50b5) (set-cdr! . a50b4) (set-car! . a50b3) (memv . a50ad) (memq . a50ac) (member . a50aa) (assv . a50a2) (assq . a50a1) (assoc . a509f) (eval . a2fc4) (zero? . a4fdc) (vector? . a4fdb) (vector-set! . a4fda) (vector-ref . a4fd9) (vector-length . a4fd7) (vector-fill! . a4fd5) (vector->list . a4fd4) (vector . a4fd3) (values . a4fd2) (truncate . a4fd1) (tan . a4fd0) (symbol? . a4fcf) (symbol->string . a4fcd) (substring . a4fcc) (string? . a4fcb) (string>? . a4fca) (string>=? . a4fc9) (string=? . a4fc8) (string<? . a4fc7) (string<=? . a4fc6) (string-ref . a4fc5) (string-length . a4fc4) (string-copy . a4fc2) (string-append . a4fc1) (string->symbol . a4fc0) (string->number . a4fbf) (string->list . a4fbe) (string . a4fbd) (sqrt . a4fbc) (sin . a4fbb) (round . a4fba) (reverse . a4fb9) (real? . a4fb8) (real-part . a4fb6) (rationalize . a4fb5) (rational? . a4fb4) (procedure? . a4fb2) (positive? . a4fb1) (pair? . a4fb0) (odd? . a4faf) (numerator . a4fae) (number? . a4fad) (number->string . a4fac) (not . a4faa) (negative? . a4fa9) (min . a4fa7) (max . a4fa6) (map . a4fa5) (make-vector . a4fa4) (make-string . a4fa3) (make-rectangular . a4fa2) (make-polar . a4fa1) (magnitude . a4fa0) (log . a4f9f) (list? . a4f9e) (list-tail . a4f9d) (list-ref . a4f9c) (list->vector . a4f9b) (list->string . a4f9a) (list . a4f99) (length . a4f98) (lcm . a4f97) (integer? . a4f96) (integer->char . a4f94) (inexact? . a4f92) (imag-part . a4f90) (gcd . a4f8f) (for-each . a4f8e) (floor . a4f8d) (expt . a4f8b) (exp . a4f8a) (exact? . a4f89) (even? . a4f86) (eqv? . a4f84) (equal? . a4f83) (eq? . a4f82) (dynamic-wind . a4f81) (denominator . a4f7a) (cos . a4f79) (cons . a4f78) (complex? . a4f77) (char? . a4f76) (char>? . a4f75) (char>=? . a4f74) (char=? . a4f73) (char<? . a4f72) (char<=? . a4f71) (char->integer . a4f70) (ceiling . a4f6f) (call-with-values . a4f6e) (call-with-current-continuation . a4f6c) (cddddr . a4f6b) (cdddar . a4f6a) (cddadr . a4f69) (cddaar . a4f68) (cdaddr . a4f67) (cdadar . a4f66) (cdaadr . a4f65) (cdaaar . a4f64) (cadddr . a4f63) (caddar . a4f62) (cadadr . a4f61) (cadaar . a4f60) (caaddr . a4f5f) (caadar . a4f5e) (caaadr . a4f5d) (caaaar . a4f5c) (cdddr . a4f5b) (cddar . a4f5a) (cdadr . a4f59) (cdaar . a4f58) (caddr . a4f57) (cadar . a4f56) (caadr . a4f55) (caaar . a4f54) (cddr . a4f53) (cdar . a4f52) (cadr . a4f51) (caar . a4f50) (cdr . a4f4f) (car . a4f4e) (boolean? . a4f4d) (atan . a4f4b) (asin . a4f49) (apply . a4f48) (append . a4f47) (angle . a4f46) (acos . a4f45) (abs . a4f44) (/ . a4f43) (* . a4f42) (- . a4f41) (+ . a4f40) (>= . a4f3f) (> . a4f3e) (= . a4f3d) (<= . a4f3c) (< . a4f3b) (unquote-splicing . a4f08) (unquote . a4f07) (else . a4f05) (=> . a4f04) (... . a4f03) (delay . a4f00) (do . a4efe) (cond . a4efd) (let* . a4efc) (let . a4efb) (quasiquote . a4ef5) (syntax-rules . a4ef4) (case . a4eef) (or . a4eeb) (and . a4eea) (if . a4ee9) (letrec . a4ee7) (lambda . a4ee4) (quote . a4ee1) (letrec-syntax . a4edf) (let-syntax . a4ede) (set! . a4edd) (begin . a4edb) (define-syntax . a4ed9) (define . a4ed8)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f0 '(psyntax modules) '() '() '() '() '((module . a4eda)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f1 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f2 '(rnrs) '(6) '() '() '() '((regexp? . a51e5) (string-upcase . a5155) (string-titlecase . a5154) (string-normalize-nfkd . a5153) (string-normalize-nfkc . a5152) (string-normalize-nfd . a5151) (string-normalize-nfc . a5150) (string-foldcase . a514f) (string-downcase . a514e) (string-ci>? . a514d) (string-ci>=? . a514c) (string-ci=? . a514b) (string-ci<? . a514a) (string-ci<=? . a5149) (char-whitespace? . a5148) (char-upper-case? . a5147) (char-title-case? . a5146) (char-numeric? . a5145) (char-lower-case? . a5144) (char-general-category . a5143) (char-upcase . a5142) (char-titlecase . a5141) (char-foldcase . a5140) (char-downcase . a513f) (char-ci>? . a513e) (char-ci>=? . a513d) (char-ci=? . a513c) (char-ci<? . a513b) (char-ci<=? . a513a) (char-alphabetic? . a5139) (make-variable-transformer . a2d28) (identifier? . a2fe6) (generate-temporaries . a2fd2) (free-identifier=? . a2fd4) (syntax->datum . a2fea) (datum->syntax . a2fe8) (bound-identifier=? . a2fd6) (record-type-descriptor? . a5138) (record-predicate . a5137) (record-mutator . a5136) (record-constructor . a5135) (record-accessor . a5134) (make-record-type-descriptor . a5133) (make-record-constructor-descriptor . a5132) (record? . a5131) (record-type-uid . a5130) (record-type-sealed? . a512f) (record-type-parent . a512e) (record-type-opaque? . a512d) (record-type-name . a512c) (record-type-generative? . a512b) (record-type-field-names . a512a) (record-rtd . a5129) (record-field-mutable? . a5128) (delete-file . a5127) (file-exists? . a5126) (vector-sort! . a5125) (vector-sort . a5124) (list-sort . a5123) (symbol-hash . a5122) (string-ci-hash . a5121) (string-hash . a5120) (equal-hash . a511f) (hashtable-equivalence-function . a511e) (make-hashtable . a511d) (hashtable-hash-function . a511c) (make-eqv-hashtable . a511b) (make-eq-hashtable . a511a) (hashtable? . a5119) (hashtable-update! . a5118) (hashtable-size . a5117) (hashtable-set! . a5116) (hashtable-ref . a5115) (hashtable-mutable? . a5114) (hashtable-keys . a5113) (hashtable-entries . a5112) (hashtable-delete! . a5111) (hashtable-copy . a5110) (hashtable-contains? . a510f) (hashtable-clear! . a510e) (call-with-output-file . a510d) (call-with-input-file . a510c) (write-char . a510b) (write . a510a) (with-output-to-file . a5109) (with-input-from-file . a5108) (read-char . a5107) (read . a5106) (peek-char . a5105) (open-output-file . a5104) (open-input-file . a5103) (newline . a5102) (display . a5101) (close-output-port . a5100) (close-input-port . a50ff) (eof-object? . a50fe) (eof-object . a50fd) (current-error-port . a50fc) (current-output-port . a50fb) (current-input-port . a50fa) (output-port? . a50f9) (input-port? . a50f8) (utf-8-codec . a50f7) (utf-16-codec . a50f6) (transcoder-error-handling-mode . a50f5) (transcoder-eol-style . a50f4) (transcoder-codec . a50f3) (transcoded-port . a50f2) (textual-port? . a50f1) (string->bytevector . a50f0) (standard-output-port . a50ef) (standard-input-port . a50ee) (standard-error-port . a50ed) (set-port-position! . a50ec) (put-u8 . a50eb) (put-string . a50ea) (put-datum . a50e9) (put-char . a50e8) (put-bytevector . a50e7) (port? . a50e6) (port-transcoder . a50e5) (port-position . a50e4) (port-has-set-port-position!? . a50e3) (port-has-port-position? . a50e2) (port-eof? . a50e1) (output-port-buffer-mode . a50e0) (open-string-output-port . a50df) (open-string-input-port . a50de) (open-file-output-port . a50dd) (open-file-input/output-port . a50dc) (open-file-input-port . a50db) (open-bytevector-output-port . a50da) (open-bytevector-input-port . a50d9) (native-transcoder . a50d8) (native-eol-style . a50d7) (make-transcoder . a50d6) (latin-1-codec . a50d5) (make-i/o-write-error . a4ba6) (make-i/o-read-error . a4b91) (make-i/o-port-error . a4c47) (make-i/o-invalid-position-error . a4bbd) (make-i/o-filename-error . a4bd8) (make-i/o-file-protection-error . a4bf1) (make-i/o-file-is-read-only-error . a4c06) (make-i/o-file-does-not-exist-error . a4c30) (make-i/o-file-already-exists-error . a4c1b) (make-i/o-error . a4b7c) (make-i/o-encoding-error . a4c77) (make-i/o-decoding-error . a4c60) (make-custom-textual-output-port . a50d4) (make-custom-textual-input/output-port . a50d3) (make-custom-textual-input-port . a50d2) (make-custom-binary-output-port . a50d1) (make-custom-binary-input/output-port . a50d0) (make-custom-binary-input-port . a50cf) (make-bytevector . a50ce) (lookahead-u8 . a50cd) (lookahead-char . a50cc) (i/o-write-error? . a4ba8) (i/o-read-error? . a4b93) (i/o-port-error? . a4c4b) (i/o-invalid-position-error? . a4bc1) (i/o-filename-error? . a4bdc) (i/o-file-protection-error? . a4bf3) (i/o-file-is-read-only-error? . a4c08) (i/o-file-does-not-exist-error? . a4c32) (i/o-file-already-exists-error? . a4c1d) (i/o-error? . a4b7e) (i/o-error-position . a4bc3) (i/o-error-port . a4c4d) (i/o-error-filename . a4bde) (i/o-encoding-error? . a4c7b) (i/o-encoding-error-char . a4c7d) (i/o-decoding-error? . a4c62) (get-u8 . a50cb) (get-string-n! . a50ca) (get-string-n . a50c9) (get-string-all . a50c8) (get-line . a50c7) (get-datum . a50c6) (get-char . a50c5) (get-bytevector-some . a50c4) (get-bytevector-n! . a50c3) (get-bytevector-n . a50c2) (get-bytevector-all . a50c1) (flush-output-port . a50c0) (close-port . a50bf) (exit . a50b7) (command-line . a4db2) (remove . a50b2) (remv . a50b1) (remp . a50b0) (remq . a50af) (partition . a50ae) (memv . a50ad) (memq . a50ac) (memp . a50ab) (member . a50aa) (exists . a50a9) (for-all . a50a8) (fold-right . a50a7) (fold-left . a50a6) (find . a50a5) (filter . a50a4) (cons* . a50a3) (assv . a50a2) (assq . a50a1) (assp . a50a0) (assoc . a509f) (call-with-string-output-port . a509e) (call-with-port . a509d) (call-with-bytevector-output-port . a509c) (bytevector->string . a509b) (buffer-mode? . a509a) (binary-port? . a5099) (with-exception-handler . a5098) (raise-continuable . a5097) (raise . a5096) (make-enumeration . a5095) (enum-set=? . a5094) (enum-set-universe . a5093) (enum-set-union . a5092) (enum-set-subset? . a5091) (enum-set-projection . a5090) (enum-set-member? . a508f) (enum-set-intersection . a508e) (enum-set-indexer . a508d) (enum-set-difference . a508c) (enum-set-constructor . a508b) (enum-set-complement . a508a) (enum-set->list . a5089) (who-condition? . a4af2) (warning? . a4a6a) (violation? . a4aa9) (undefined-violation? . a4b69) (syntax-violation? . a4b50) (syntax-violation-subform . a4b54) (syntax-violation-form . a4b52) (syntax-violation . a2fe4) (simple-conditions . a5088) (serious-condition? . a4a7f) (non-continuable-violation? . a4b09) (message-condition? . a4a53) (make-who-condition . a4aee) (make-warning . a4a68) (make-violation . a4aa7) (make-undefined-violation . a4b67) (make-syntax-violation . a4b4a) (make-serious-condition . a4a7d) (make-non-continuable-violation . a4b07) (make-message-condition . a4a4f) (make-lexical-violation . a4b31) (make-irritants-condition . a4ad3) (make-implementation-restriction-violation . a4b1c) (make-error . a4a92) (make-assertion-violation . a4abc) (lexical-violation? . a4b33) (irritants-condition? . a4ad7) (implementation-restriction-violation? . a4b1e) (error? . a4a94) (condition-who . a4af4) (condition-predicate . a5087) (condition-message . a4a55) (condition-irritants . a4ad9) (condition-accessor . a5086) (condition . a5085) (assertion-violation? . a4abe) (condition? . a5084) (utf32->string . a5083) (utf16->string . a5082) (utf8->string . a5081) (uint-list->bytevector . a5080) (u8-list->bytevector . a507f) (string->utf8 . a507e) (string->utf32 . a507d) (string->utf16 . a507c) (sint-list->bytevector . a507b) (native-endianness . a507a) (bytevector? . a5079) (bytevector=? . a5078) (bytevector-uint-set! . a5077) (bytevector-uint-ref . a5076) (bytevector-u8-set! . a5075) (bytevector-u8-ref . a5074) (bytevector-u64-set! . a5073) (bytevector-u64-ref . a5072) (bytevector-u64-native-set! . a5071) (bytevector-u64-native-ref . a5070) (bytevector-u32-set! . a506f) (bytevector-u32-ref . a506e) (bytevector-u32-native-set! . a506d) (bytevector-u32-native-ref . a506c) (bytevector-u16-set! . a506b) (bytevector-u16-ref . a506a) (bytevector-u16-native-set! . a5069) (bytevector-u16-native-ref . a5068) (bytevector-sint-set! . a5067) (bytevector-sint-ref . a5066) (bytevector-s8-set! . a5065) (bytevector-s8-ref . a5064) (bytevector-s64-set! . a5063) (bytevector-s64-ref . a5062) (bytevector-s64-native-set! . a5061) (bytevector-s64-native-ref . a5060) (bytevector-s32-set! . a505f) (bytevector-s32-ref . a505e) (bytevector-s32-native-set! . a505d) (bytevector-s32-native-ref . a505c) (bytevector-s16-set! . a505b) (bytevector-s16-ref . a505a) (bytevector-s16-native-set! . a5059) (bytevector-s16-native-ref . a5058) (bytevector-length . a5057) (bytevector-ieee-single-ref . a5056) (bytevector-ieee-single-set! . a5055) (bytevector-ieee-single-native-set! . a5054) (bytevector-ieee-single-native-ref . a5053) (bytevector-ieee-double-set! . a5052) (bytevector-ieee-double-ref . a5051) (bytevector-ieee-double-native-set! . a5050) (bytevector-ieee-double-native-ref . a504f) (bytevector-fill! . a504e) (bytevector-copy! . a504d) (bytevector-copy . a504c) (bytevector->uint-list . a504b) (bytevector->u8-list . a504a) (bytevector->sint-list . a5049) (no-nans-violation? . a4ca7) (no-infinities-violation? . a4c92) (make-no-nans-violation . a4ca5) (make-no-infinities-violation . a4c90) (real->flonum . a5048) (flzero? . a5047) (fltruncate . a5046) (fltan . a5045) (flsqrt . a5044) (flsin . a5043) (flround . a5042) (flpositive? . a5041) (flonum? . a5040) (flodd? . a503f) (flnumerator . a503e) (flnegative? . a503d) (flnan? . a503c) (flmod0 . a503b) (flmod . a503a) (flmin . a5039) (flmax . a5038) (fllog . a5037) (flinteger? . a5036) (flinfinite? . a5035) (flfloor . a5034) (flfinite? . a5033) (flexpt . a5032) (flexp . a5031) (fleven? . a5030) (fldiv0-and-mod0 . a502f) (fldiv0 . a502e) (fldiv-and-mod . a502d) (fldiv . a502c) (fldenominator . a502b) (flcos . a502a) (flceiling . a5029) (flatan . a5028) (flasin . a5027) (flacos . a5026) (flabs . a5025) (fl>? . a5024) (fl>=? . a5023) (fl=? . a5022) (fl<? . a5021) (fl<=? . a5020) (fl/ . a501f) (fl- . a501e) (fl+ . a501d) (fl* . a501c) (fixnum->flonum . a501b) (fxzero? . a501a) (fxxor . a5019) (fxrotate-bit-field . a5018) (fxreverse-bit-field . a5017) (fxpositive? . a5016) (fxodd? . a5015) (fxnot . a5014) (fxnegative? . a5013) (fxmod0 . a5012) (fxmod . a5011) (fxmin . a5010) (fxmax . a500f) (fxlength . a500e) (fxior . a500d) (fxif . a500c) (fxfirst-bit-set . a500b) (fxeven? . a500a) (fxdiv0-and-mod0 . a5009) (fxdiv0 . a5008) (fxdiv-and-mod . a5007) (fxdiv . a5006) (fxcopy-bit-field . a5005) (fxcopy-bit . a5004) (fxbit-set? . a5003) (fxbit-field . a5002) (fxbit-count . a5001) (fxarithmetic-shift-right . a5000) (fxarithmetic-shift-left . a4fff) (fxarithmetic-shift . a4ffe) (fxand . a4ffd) (fx>? . a4ffc) (fx>=? . a4ffb) (fx=? . a4ffa) (fx<? . a4ff9) (fx<=? . a4ff8) (fx-/carry . a4ff7) (fx- . a4ff6) (fx+/carry . a4ff5) (fx+ . a4ff4) (fx*/carry . a4ff3) (fx* . a4ff2) (greatest-fixnum . a4ff1) (least-fixnum . a4ff0) (fixnum-width . a4fef) (fixnum? . a4fee) (bitwise-rotate-bit-field . a4fed) (bitwise-reverse-bit-field . a4fec) (bitwise-length . a4feb) (bitwise-if . a4fea) (bitwise-first-bit-set . a4fe9) (bitwise-copy-bit-field . a4fe8) (bitwise-copy-bit . a4fe7) (bitwise-bit-set? . a4fe6) (bitwise-bit-field . a4fe5) (bitwise-bit-count . a4fe4) (bitwise-xor . a4fe3) (bitwise-ior . a4fe2) (bitwise-and . a4fe1) (bitwise-not . a4fe0) (bitwise-arithmetic-shift-right . a4fdf) (bitwise-arithmetic-shift-left . a4fde) (bitwise-arithmetic-shift . a4fdd) (zero? . a4fdc) (vector? . a4fdb) (vector-set! . a4fda) (vector-ref . a4fd9) (vector-map . a4fd8) (vector-length . a4fd7) (vector-for-each . a4fd6) (vector-fill! . a4fd5) (vector->list . a4fd4) (vector . a4fd3) (values . a4fd2) (truncate . a4fd1) (tan . a4fd0) (symbol? . a4fcf) (symbol=? . a4fce) (symbol->string . a4fcd) (substring . a4fcc) (string? . a4fcb) (string>? . a4fca) (string>=? . a4fc9) (string=? . a4fc8) (string<? . a4fc7) (string<=? . a4fc6) (string-ref . a4fc5) (string-length . a4fc4) (string-for-each . a4fc3) (string-copy . a4fc2) (string-append . a4fc1) (string->symbol . a4fc0) (string->number . a4fbf) (string->list . a4fbe) (string . a4fbd) (sqrt . a4fbc) (sin . a4fbb) (round . a4fba) (reverse . a4fb9) (real? . a4fb8) (real-valued? . a4fb7) (real-part . a4fb6) (rationalize . a4fb5) (rational? . a4fb4) (rational-valued? . a4fb3) (procedure? . a4fb2) (positive? . a4fb1) (pair? . a4fb0) (odd? . a4faf) (numerator . a4fae) (number? . a4fad) (number->string . a4fac) (null? . a4fab) (not . a4faa) (negative? . a4fa9) (nan? . a4fa8) (min . a4fa7) (max . a4fa6) (map . a4fa5) (make-vector . a4fa4) (make-string . a4fa3) (make-rectangular . a4fa2) (make-polar . a4fa1) (magnitude . a4fa0) (log . a4f9f) (list? . a4f9e) (list-tail . a4f9d) (list-ref . a4f9c) (list->vector . a4f9b) (list->string . a4f9a) (list . a4f99) (length . a4f98) (lcm . a4f97) (integer? . a4f96) (integer-valued? . a4f95) (integer->char . a4f94) (infinite? . a4f93) (inexact? . a4f92) (inexact . a4f91) (imag-part . a4f90) (gcd . a4f8f) (for-each . a4f8e) (floor . a4f8d) (finite? . a4f8c) (expt . a4f8b) (exp . a4f8a) (exact? . a4f89) (exact-integer-sqrt . a4f88) (exact . a4f87) (even? . a4f86) (error . a4f85) (eqv? . a4f84) (equal? . a4f83) (eq? . a4f82) (dynamic-wind . a4f81) (div0-and-mod0 . a4f80) (mod0 . a4f7f) (div0 . a4f7e) (div-and-mod . a4f7d) (mod . a4f7c) (div . a4f7b) (denominator . a4f7a) (cos . a4f79) (cons . a4f78) (complex? . a4f77) (char? . a4f76) (char>? . a4f75) (char>=? . a4f74) (char=? . a4f73) (char<? . a4f72) (char<=? . a4f71) (char->integer . a4f70) (ceiling . a4f6f) (call-with-values . a4f6e) (call/cc . a4f6d) (call-with-current-continuation . a4f6c) (cddddr . a4f6b) (cdddar . a4f6a) (cddadr . a4f69) (cddaar . a4f68) (cdaddr . a4f67) (cdadar . a4f66) (cdaadr . a4f65) (cdaaar . a4f64) (cadddr . a4f63) (caddar . a4f62) (cadadr . a4f61) (cadaar . a4f60) (caaddr . a4f5f) (caadar . a4f5e) (caaadr . a4f5d) (caaaar . a4f5c) (cdddr . a4f5b) (cddar . a4f5a) (cdadr . a4f59) (cdaar . a4f58) (caddr . a4f57) (cadar . a4f56) (caadr . a4f55) (caaar . a4f54) (cddr . a4f53) (cdar . a4f52) (cadr . a4f51) (caar . a4f50) (cdr . a4f4f) (car . a4f4e) (boolean? . a4f4d) (boolean=? . a4f4c) (atan . a4f4b) (assertion-violation . a4f4a) (asin . a4f49) (apply . a4f48) (append . a4f47) (angle . a4f46) (acos . a4f45) (abs . a4f44) (/ . a4f43) (* . a4f42) (- . a4f41) (+ . a4f40) (>= . a4f3f) (> . a4f3e) (= . a4f3d) (<= . a4f3c) (< . a4f3b) (&no-nans . a4f39) (&no-infinities . a4f38) (&i/o-encoding . a4f37) (&i/o-decoding . a4f36) (&i/o-port . a4f35) (&i/o-file-does-not-exist . a4f34) (&i/o-file-already-exists . a4f33) (&i/o-file-is-read-only . a4f32) (&i/o-file-protection . a4f31) (&i/o-filename . a4f30) (&i/o-invalid-position . a4f2f) (&i/o-write . a4f2e) (&i/o-read . a4f2d) (&i/o . a4f2c) (&undefined . a4f2b) (&syntax . a4f2a) (&lexical . a4f29) (&implementation-restriction . a4f28) (&non-continuable . a4f27) (&who . a4f26) (&irritants . a4f25) (&assertion . a4f24) (&violation . a4f23) (&error . a4f22) (&serious . a4f21) (&warning . a4f20) (&message . a4f1f) (&condition . a4f1e) (define-condition-type . a4f1d) (define-enumeration . a4f1c) (define-record-type . a4f1b) (parent-rtd . a4f1a) (nongenerative . a4f19) (opaque . a4f18) (sealed . a4f17) (protocol . a4f16) (parent . a4f15) (immutable . a4f14) (mutable . a4f13) (fields . a4f12) (error-handling-mode . a4f11) (file-options . a4f10) (buffer-mode . a4f0f) (eol-style . a4f0e) (guard . a4f0d) (unsyntax-splicing . a4f0a) (unsyntax . a4f09) (unquote-splicing . a4f08) (unquote . a4f07) (_ . a4f06) (else . a4f05) (=> . a4f04) (... . a4f03) (assert . a4f02) (endianness . a4f01) (do . a4efe) (cond . a4efd) (let* . a4efc) (let . a4efb) (let*-values . a4efa) (let-values . a4ef9) (identifier-syntax . a4ef8) (with-syntax . a4ef7) (quasisyntax . a4ef6) (quasiquote . a4ef5) (syntax-rules . a4ef4) (record-constructor-descriptor . a4ef1) (record-type-descriptor . a4ef0) (case . a4eef) (unless . a4eed) (when . a4eec) (or . a4eeb) (and . a4eea) (if . a4ee9) (letrec* . a4ee8) (letrec . a4ee7) (case-lambda . a4ee5) (lambda . a4ee4) (syntax . a4ee3) (syntax-case . a4ee2) (quote . a4ee1) (letrec-syntax . a4edf) (let-syntax . a4ede) (set! . a4edd) (begin . a4edb) (define-syntax . a4ed9) (define . a4ed8)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f3 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . a2fc0) (quotient . a50be) (null-environment . a2fbe) (remainder . a50bd) (modulo . a50bc) (inexact->exact . a50bb) (force . a50ba) (exact->inexact . a50b9) (make-promise . a50b8) (delay . a4f00)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f4 '(rnrs control) '(6) '() '() '() '((do . a4efe) (unless . a4eed) (when . a4eec) (case-lambda . a4ee5)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f5 '(rnrs eval) '(6) '() '() '() '((eval . a2fc4) (environment . a2fbc)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f6 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . a50b4) (set-car! . a50b3)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f7 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . a50b6) (string-set! . a50b5)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f8 '(rnrs programs) '(6) '() '() '() '((exit . a50b7) (command-line . a4db2)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51f9 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . a2d28) (identifier? . a2fe6) (generate-temporaries . a2fd2) (free-identifier=? . a2fd4) (syntax->datum . a2fea) (datum->syntax . a2fe8) (bound-identifier=? . a2fd6) (syntax-violation . a2fe4) (unsyntax-splicing . a4f0a) (unsyntax . a4f09) (_ . a4f06) (... . a4f03) (with-syntax . a4ef7) (quasisyntax . a4ef6) (syntax . a4ee3) (syntax-case . a4ee2)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51fa '(rnrs files) '(6) '() '() '() '((delete-file . a5127) (file-exists? . a5126) (make-i/o-write-error . a4ba6) (make-i/o-read-error . a4b91) (make-i/o-port-error . a4c47) (make-i/o-invalid-position-error . a4bbd) (make-i/o-filename-error . a4bd8) (make-i/o-file-protection-error . a4bf1) (make-i/o-file-is-read-only-error . a4c06) (make-i/o-file-does-not-exist-error . a4c30) (make-i/o-file-already-exists-error . a4c1b) (make-i/o-error . a4b7c) (i/o-write-error? . a4ba8) (i/o-read-error? . a4b93) (i/o-port-error? . a4c4b) (i/o-invalid-position-error? . a4bc1) (i/o-filename-error? . a4bdc) (i/o-file-protection-error? . a4bf3) (i/o-file-is-read-only-error? . a4c08) (i/o-file-does-not-exist-error? . a4c32) (i/o-file-already-exists-error? . a4c1d) (i/o-error? . a4b7e) (i/o-error-position . a4bc3) (i/o-error-port . a4c4d) (i/o-error-filename . a4bde) (&i/o-port . a4f35) (&i/o-file-does-not-exist . a4f34) (&i/o-file-already-exists . a4f33) (&i/o-file-is-read-only . a4f32) (&i/o-file-protection . a4f31) (&i/o-filename . a4f30) (&i/o-invalid-position . a4f2f) (&i/o-write . a4f2e) (&i/o-read . a4f2d) (&i/o . a4f2c)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51fb '(rnrs sorting) '(6) '() '() '() '((vector-sort! . a5125) (vector-sort . a5124) (list-sort . a5123)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51fc '(rnrs base) '(6) '() '() '() '((zero? . a4fdc) (vector? . a4fdb) (vector-set! . a4fda) (vector-ref . a4fd9) (vector-map . a4fd8) (vector-length . a4fd7) (vector-for-each . a4fd6) (vector-fill! . a4fd5) (vector->list . a4fd4) (vector . a4fd3) (values . a4fd2) (truncate . a4fd1) (tan . a4fd0) (symbol? . a4fcf) (symbol=? . a4fce) (symbol->string . a4fcd) (substring . a4fcc) (string? . a4fcb) (string>? . a4fca) (string>=? . a4fc9) (string=? . a4fc8) (string<? . a4fc7) (string<=? . a4fc6) (string-ref . a4fc5) (string-length . a4fc4) (string-for-each . a4fc3) (string-copy . a4fc2) (string-append . a4fc1) (string->symbol . a4fc0) (string->number . a4fbf) (string->list . a4fbe) (string . a4fbd) (sqrt . a4fbc) (sin . a4fbb) (round . a4fba) (reverse . a4fb9) (real? . a4fb8) (real-valued? . a4fb7) (real-part . a4fb6) (rationalize . a4fb5) (rational? . a4fb4) (rational-valued? . a4fb3) (procedure? . a4fb2) (positive? . a4fb1) (pair? . a4fb0) (odd? . a4faf) (numerator . a4fae) (number? . a4fad) (number->string . a4fac) (null? . a4fab) (not . a4faa) (negative? . a4fa9) (nan? . a4fa8) (min . a4fa7) (max . a4fa6) (map . a4fa5) (make-vector . a4fa4) (make-string . a4fa3) (make-rectangular . a4fa2) (make-polar . a4fa1) (magnitude . a4fa0) (log . a4f9f) (list? . a4f9e) (list-tail . a4f9d) (list-ref . a4f9c) (list->vector . a4f9b) (list->string . a4f9a) (list . a4f99) (length . a4f98) (lcm . a4f97) (integer? . a4f96) (integer-valued? . a4f95) (integer->char . a4f94) (infinite? . a4f93) (inexact? . a4f92) (inexact . a4f91) (imag-part . a4f90) (gcd . a4f8f) (for-each . a4f8e) (floor . a4f8d) (finite? . a4f8c) (expt . a4f8b) (exp . a4f8a) (exact? . a4f89) (exact-integer-sqrt . a4f88) (exact . a4f87) (even? . a4f86) (error . a4f85) (eqv? . a4f84) (equal? . a4f83) (eq? . a4f82) (dynamic-wind . a4f81) (div0-and-mod0 . a4f80) (mod0 . a4f7f) (div0 . a4f7e) (div-and-mod . a4f7d) (mod . a4f7c) (div . a4f7b) (denominator . a4f7a) (cos . a4f79) (cons . a4f78) (complex? . a4f77) (char? . a4f76) (char>? . a4f75) (char>=? . a4f74) (char=? . a4f73) (char<? . a4f72) (char<=? . a4f71) (char->integer . a4f70) (ceiling . a4f6f) (call-with-values . a4f6e) (call/cc . a4f6d) (call-with-current-continuation . a4f6c) (cddddr . a4f6b) (cdddar . a4f6a) (cddadr . a4f69) (cddaar . a4f68) (cdaddr . a4f67) (cdadar . a4f66) (cdaadr . a4f65) (cdaaar . a4f64) (cadddr . a4f63) (caddar . a4f62) (cadadr . a4f61) (cadaar . a4f60) (caaddr . a4f5f) (caadar . a4f5e) (caaadr . a4f5d) (caaaar . a4f5c) (cdddr . a4f5b) (cddar . a4f5a) (cdadr . a4f59) (cdaar . a4f58) (caddr . a4f57) (cadar . a4f56) (caadr . a4f55) (caaar . a4f54) (cddr . a4f53) (cdar . a4f52) (cadr . a4f51) (caar . a4f50) (cdr . a4f4f) (car . a4f4e) (boolean? . a4f4d) (boolean=? . a4f4c) (atan . a4f4b) (assertion-violation . a4f4a) (asin . a4f49) (apply . a4f48) (append . a4f47) (angle . a4f46) (acos . a4f45) (abs . a4f44) (/ . a4f43) (* . a4f42) (- . a4f41) (+ . a4f40) (>= . a4f3f) (> . a4f3e) (= . a4f3d) (<= . a4f3c) (< . a4f3b) (unquote-splicing . a4f08) (unquote . a4f07) (_ . a4f06) (else . a4f05) (=> . a4f04) (... . a4f03) (assert . a4f02) (cond . a4efd) (let* . a4efc) (let . a4efb) (let*-values . a4efa) (let-values . a4ef9) (identifier-syntax . a4ef8) (quasiquote . a4ef5) (syntax-rules . a4ef4) (case . a4eef) (or . a4eeb) (and . a4eea) (if . a4ee9) (letrec* . a4ee8) (letrec . a4ee7) (lambda . a4ee4) (quote . a4ee1) (letrec-syntax . a4edf) (let-syntax . a4ede) (set! . a4edd) (begin . a4edb) (define-syntax . a4ed9) (define . a4ed8)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51fd '(rnrs lists) '(6) '() '() '() '((remove . a50b2) (remv . a50b1) (remp . a50b0) (remq . a50af) (partition . a50ae) (memv . a50ad) (memq . a50ac) (memp . a50ab) (member . a50aa) (exists . a50a9) (for-all . a50a8) (fold-right . a50a7) (fold-left . a50a6) (find . a50a5) (filter . a50a4) (cons* . a50a3) (assv . a50a2) (assq . a50a1) (assp . a50a0) (assoc . a509f)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51fe '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . a510d) (call-with-input-file . a510c) (write-char . a510b) (write . a510a) (with-output-to-file . a5109) (with-input-from-file . a5108) (read-char . a5107) (read . a5106) (peek-char . a5105) (open-output-file . a5104) (open-input-file . a5103) (newline . a5102) (display . a5101) (close-output-port . a5100) (close-input-port . a50ff) (eof-object? . a50fe) (eof-object . a50fd) (current-error-port . a50fc) (current-output-port . a50fb) (current-input-port . a50fa) (output-port? . a50f9) (input-port? . a50f8) (make-i/o-write-error . a4ba6) (make-i/o-read-error . a4b91) (make-i/o-port-error . a4c47) (make-i/o-invalid-position-error . a4bbd) (make-i/o-filename-error . a4bd8) (make-i/o-file-protection-error . a4bf1) (make-i/o-file-is-read-only-error . a4c06) (make-i/o-file-does-not-exist-error . a4c30) (make-i/o-file-already-exists-error . a4c1b) (make-i/o-error . a4b7c) (i/o-write-error? . a4ba8) (i/o-read-error? . a4b93) (i/o-port-error? . a4c4b) (i/o-invalid-position-error? . a4bc1) (i/o-filename-error? . a4bdc) (i/o-file-protection-error? . a4bf3) (i/o-file-is-read-only-error? . a4c08) (i/o-file-does-not-exist-error? . a4c32) (i/o-file-already-exists-error? . a4c1d) (i/o-error? . a4b7e) (i/o-error-position . a4bc3) (i/o-error-port . a4c4d) (i/o-error-filename . a4bde) (&i/o-port . a4f35) (&i/o-file-does-not-exist . a4f34) (&i/o-file-already-exists . a4f33) (&i/o-file-is-read-only . a4f32) (&i/o-file-protection . a4f31) (&i/o-filename . a4f30) (&i/o-invalid-position . a4f2f) (&i/o-write . a4f2e) (&i/o-read . a4f2d) (&i/o . a4f2c)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a51ff '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . a50ce) (utf32->string . a5083) (utf16->string . a5082) (utf8->string . a5081) (uint-list->bytevector . a5080) (u8-list->bytevector . a507f) (string->utf8 . a507e) (string->utf32 . a507d) (string->utf16 . a507c) (sint-list->bytevector . a507b) (native-endianness . a507a) (bytevector? . a5079) (bytevector=? . a5078) (bytevector-uint-set! . a5077) (bytevector-uint-ref . a5076) (bytevector-u8-set! . a5075) (bytevector-u8-ref . a5074) (bytevector-u64-set! . a5073) (bytevector-u64-ref . a5072) (bytevector-u64-native-set! . a5071) (bytevector-u64-native-ref . a5070) (bytevector-u32-set! . a506f) (bytevector-u32-ref . a506e) (bytevector-u32-native-set! . a506d) (bytevector-u32-native-ref . a506c) (bytevector-u16-set! . a506b) (bytevector-u16-ref . a506a) (bytevector-u16-native-set! . a5069) (bytevector-u16-native-ref . a5068) (bytevector-sint-set! . a5067) (bytevector-sint-ref . a5066) (bytevector-s8-set! . a5065) (bytevector-s8-ref . a5064) (bytevector-s64-set! . a5063) (bytevector-s64-ref . a5062) (bytevector-s64-native-set! . a5061) (bytevector-s64-native-ref . a5060) (bytevector-s32-set! . a505f) (bytevector-s32-ref . a505e) (bytevector-s32-native-set! . a505d) (bytevector-s32-native-ref . a505c) (bytevector-s16-set! . a505b) (bytevector-s16-ref . a505a) (bytevector-s16-native-set! . a5059) (bytevector-s16-native-ref . a5058) (bytevector-length . a5057) (bytevector-ieee-single-ref . a5056) (bytevector-ieee-single-set! . a5055) (bytevector-ieee-single-native-set! . a5054) (bytevector-ieee-single-native-ref . a5053) (bytevector-ieee-double-set! . a5052) (bytevector-ieee-double-ref . a5051) (bytevector-ieee-double-native-set! . a5050) (bytevector-ieee-double-native-ref . a504f) (bytevector-fill! . a504e) (bytevector-copy! . a504d) (bytevector-copy . a504c) (bytevector->uint-list . a504b) (bytevector->u8-list . a504a) (bytevector->sint-list . a5049) (endianness . a4f01)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5200 '(rnrs unicode) '(6) '() '() '() '((string-upcase . a5155) (string-titlecase . a5154) (string-normalize-nfkd . a5153) (string-normalize-nfkc . a5152) (string-normalize-nfd . a5151) (string-normalize-nfc . a5150) (string-foldcase . a514f) (string-downcase . a514e) (string-ci>? . a514d) (string-ci>=? . a514c) (string-ci=? . a514b) (string-ci<? . a514a) (string-ci<=? . a5149) (char-whitespace? . a5148) (char-upper-case? . a5147) (char-title-case? . a5146) (char-numeric? . a5145) (char-lower-case? . a5144) (char-general-category . a5143) (char-upcase . a5142) (char-titlecase . a5141) (char-foldcase . a5140) (char-downcase . a513f) (char-ci>? . a513e) (char-ci>=? . a513d) (char-ci=? . a513c) (char-ci<? . a513b) (char-ci<=? . a513a) (char-alphabetic? . a5139)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5201 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . a5098) (raise-continuable . a5097) (raise . a5096) (guard . a4f0d) (else . a4f05) (=> . a4f04)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5202 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . a4fed) (bitwise-reverse-bit-field . a4fec) (bitwise-length . a4feb) (bitwise-if . a4fea) (bitwise-first-bit-set . a4fe9) (bitwise-copy-bit-field . a4fe8) (bitwise-copy-bit . a4fe7) (bitwise-bit-set? . a4fe6) (bitwise-bit-field . a4fe5) (bitwise-bit-count . a4fe4) (bitwise-xor . a4fe3) (bitwise-ior . a4fe2) (bitwise-and . a4fe1) (bitwise-not . a4fe0) (bitwise-arithmetic-shift-right . a4fdf) (bitwise-arithmetic-shift-left . a4fde) (bitwise-arithmetic-shift . a4fdd)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5203 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . a501a) (fxxor . a5019) (fxrotate-bit-field . a5018) (fxreverse-bit-field . a5017) (fxpositive? . a5016) (fxodd? . a5015) (fxnot . a5014) (fxnegative? . a5013) (fxmod0 . a5012) (fxmod . a5011) (fxmin . a5010) (fxmax . a500f) (fxlength . a500e) (fxior . a500d) (fxif . a500c) (fxfirst-bit-set . a500b) (fxeven? . a500a) (fxdiv0-and-mod0 . a5009) (fxdiv0 . a5008) (fxdiv-and-mod . a5007) (fxdiv . a5006) (fxcopy-bit-field . a5005) (fxcopy-bit . a5004) (fxbit-set? . a5003) (fxbit-field . a5002) (fxbit-count . a5001) (fxarithmetic-shift-right . a5000) (fxarithmetic-shift-left . a4fff) (fxarithmetic-shift . a4ffe) (fxand . a4ffd) (fx>? . a4ffc) (fx>=? . a4ffb) (fx=? . a4ffa) (fx<? . a4ff9) (fx<=? . a4ff8) (fx-/carry . a4ff7) (fx- . a4ff6) (fx+/carry . a4ff5) (fx+ . a4ff4) (fx*/carry . a4ff3) (fx* . a4ff2) (greatest-fixnum . a4ff1) (least-fixnum . a4ff0) (fixnum-width . a4fef) (fixnum? . a4fee)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5204 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . a4ca7) (no-infinities-violation? . a4c92) (make-no-nans-violation . a4ca5) (make-no-infinities-violation . a4c90) (real->flonum . a5048) (flzero? . a5047) (fltruncate . a5046) (fltan . a5045) (flsqrt . a5044) (flsin . a5043) (flround . a5042) (flpositive? . a5041) (flonum? . a5040) (flodd? . a503f) (flnumerator . a503e) (flnegative? . a503d) (flnan? . a503c) (flmod0 . a503b) (flmod . a503a) (flmin . a5039) (flmax . a5038) (fllog . a5037) (flinteger? . a5036) (flinfinite? . a5035) (flfloor . a5034) (flfinite? . a5033) (flexpt . a5032) (flexp . a5031) (fleven? . a5030) (fldiv0-and-mod0 . a502f) (fldiv0 . a502e) (fldiv-and-mod . a502d) (fldiv . a502c) (fldenominator . a502b) (flcos . a502a) (flceiling . a5029) (flatan . a5028) (flasin . a5027) (flacos . a5026) (flabs . a5025) (fl>? . a5024) (fl>=? . a5023) (fl=? . a5022) (fl<? . a5021) (fl<=? . a5020) (fl/ . a501f) (fl- . a501e) (fl+ . a501d) (fl* . a501c) (fixnum->flonum . a501b) (&no-nans . a4f39) (&no-infinities . a4f38)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5205 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . a5122) (string-ci-hash . a5121) (string-hash . a5120) (equal-hash . a511f) (hashtable-equivalence-function . a511e) (make-hashtable . a511d) (hashtable-hash-function . a511c) (make-eqv-hashtable . a511b) (make-eq-hashtable . a511a) (hashtable? . a5119) (hashtable-update! . a5118) (hashtable-size . a5117) (hashtable-set! . a5116) (hashtable-ref . a5115) (hashtable-mutable? . a5114) (hashtable-keys . a5113) (hashtable-entries . a5112) (hashtable-delete! . a5111) (hashtable-copy . a5110) (hashtable-contains? . a510f) (hashtable-clear! . a510e)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5206 '(rnrs io ports) '(6) '() '() '() '((eof-object? . a50fe) (eof-object . a50fd) (current-error-port . a50fc) (current-output-port . a50fb) (current-input-port . a50fa) (output-port? . a50f9) (input-port? . a50f8) (utf-8-codec . a50f7) (utf-16-codec . a50f6) (transcoder-error-handling-mode . a50f5) (transcoder-eol-style . a50f4) (transcoder-codec . a50f3) (transcoded-port . a50f2) (textual-port? . a50f1) (string->bytevector . a50f0) (standard-output-port . a50ef) (standard-input-port . a50ee) (standard-error-port . a50ed) (set-port-position! . a50ec) (put-u8 . a50eb) (put-string . a50ea) (put-datum . a50e9) (put-char . a50e8) (put-bytevector . a50e7) (port? . a50e6) (port-transcoder . a50e5) (port-position . a50e4) (port-has-set-port-position!? . a50e3) (port-has-port-position? . a50e2) (port-eof? . a50e1) (output-port-buffer-mode . a50e0) (open-string-output-port . a50df) (open-string-input-port . a50de) (open-file-output-port . a50dd) (open-file-input/output-port . a50dc) (open-file-input-port . a50db) (open-bytevector-output-port . a50da) (open-bytevector-input-port . a50d9) (native-transcoder . a50d8) (native-eol-style . a50d7) (make-transcoder . a50d6) (latin-1-codec . a50d5) (make-i/o-write-error . a4ba6) (make-i/o-read-error . a4b91) (make-i/o-port-error . a4c47) (make-i/o-invalid-position-error . a4bbd) (make-i/o-filename-error . a4bd8) (make-i/o-file-protection-error . a4bf1) (make-i/o-file-is-read-only-error . a4c06) (make-i/o-file-does-not-exist-error . a4c30) (make-i/o-file-already-exists-error . a4c1b) (make-i/o-error . a4b7c) (make-i/o-encoding-error . a4c77) (make-i/o-decoding-error . a4c60) (make-custom-textual-output-port . a50d4) (make-custom-textual-input/output-port . a50d3) (make-custom-textual-input-port . a50d2) (make-custom-binary-output-port . a50d1) (make-custom-binary-input/output-port . a50d0) (make-custom-binary-input-port . a50cf) (lookahead-u8 . a50cd) (lookahead-char . a50cc) (i/o-write-error? . a4ba8) (i/o-read-error? . a4b93) (i/o-port-error? . a4c4b) (i/o-invalid-position-error? . a4bc1) (i/o-filename-error? . a4bdc) (i/o-file-protection-error? . a4bf3) (i/o-file-is-read-only-error? . a4c08) (i/o-file-does-not-exist-error? . a4c32) (i/o-file-already-exists-error? . a4c1d) (i/o-error? . a4b7e) (i/o-error-position . a4bc3) (i/o-error-port . a4c4d) (i/o-error-filename . a4bde) (i/o-encoding-error? . a4c7b) (i/o-encoding-error-char . a4c7d) (i/o-decoding-error? . a4c62) (get-u8 . a50cb) (get-string-n! . a50ca) (get-string-n . a50c9) (get-string-all . a50c8) (get-line . a50c7) (get-datum . a50c6) (get-char . a50c5) (get-bytevector-some . a50c4) (get-bytevector-n! . a50c3) (get-bytevector-n . a50c2) (get-bytevector-all . a50c1) (flush-output-port . a50c0) (close-port . a50bf) (call-with-string-output-port . a509e) (call-with-port . a509d) (call-with-bytevector-output-port . a509c) (bytevector->string . a509b) (buffer-mode? . a509a) (binary-port? . a5099) (&i/o-encoding . a4f37) (&i/o-decoding . a4f36) (&i/o-port . a4f35) (&i/o-file-does-not-exist . a4f34) (&i/o-file-already-exists . a4f33) (&i/o-file-is-read-only . a4f32) (&i/o-file-protection . a4f31) (&i/o-filename . a4f30) (&i/o-invalid-position . a4f2f) (&i/o-write . a4f2e) (&i/o-read . a4f2d) (&i/o . a4f2c) (error-handling-mode . a4f11) (file-options . a4f10) (buffer-mode . a4f0f) (eol-style . a4f0e)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5207 '(rnrs enums) '(6) '() '() '() '((make-enumeration . a5095) (enum-set=? . a5094) (enum-set-universe . a5093) (enum-set-union . a5092) (enum-set-subset? . a5091) (enum-set-projection . a5090) (enum-set-member? . a508f) (enum-set-intersection . a508e) (enum-set-indexer . a508d) (enum-set-difference . a508c) (enum-set-constructor . a508b) (enum-set-complement . a508a) (enum-set->list . a5089) (define-enumeration . a4f1c)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5208 '(rnrs conditions) '(6) '() '() '() '((who-condition? . a4af2) (warning? . a4a6a) (violation? . a4aa9) (undefined-violation? . a4b69) (syntax-violation? . a4b50) (syntax-violation-subform . a4b54) (syntax-violation-form . a4b52) (syntax-violation . a2fe4) (simple-conditions . a5088) (serious-condition? . a4a7f) (non-continuable-violation? . a4b09) (message-condition? . a4a53) (make-who-condition . a4aee) (make-warning . a4a68) (make-violation . a4aa7) (make-undefined-violation . a4b67) (make-syntax-violation . a4b4a) (make-serious-condition . a4a7d) (make-non-continuable-violation . a4b07) (make-message-condition . a4a4f) (make-lexical-violation . a4b31) (make-irritants-condition . a4ad3) (make-implementation-restriction-violation . a4b1c) (make-error . a4a92) (make-assertion-violation . a4abc) (lexical-violation? . a4b33) (irritants-condition? . a4ad7) (implementation-restriction-violation? . a4b1e) (error? . a4a94) (condition-who . a4af4) (condition-predicate . a5087) (condition-message . a4a55) (condition-irritants . a4ad9) (condition-accessor . a5086) (condition . a5085) (assertion-violation? . a4abe) (condition? . a5084) (&undefined . a4f2b) (&syntax . a4f2a) (&lexical . a4f29) (&implementation-restriction . a4f28) (&non-continuable . a4f27) (&who . a4f26) (&irritants . a4f25) (&assertion . a4f24) (&violation . a4f23) (&error . a4f22) (&serious . a4f21) (&warning . a4f20) (&message . a4f1f) (&condition . a4f1e) (define-condition-type . a4f1d)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a5209 '(rnrs records inspection) '(6) '() '() '() '((record? . a5131) (record-type-uid . a5130) (record-type-sealed? . a512f) (record-type-parent . a512e) (record-type-opaque? . a512d) (record-type-name . a512c) (record-type-generative? . a512b) (record-type-field-names . a512a) (record-rtd . a5129) (record-field-mutable? . a5128)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a520a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . a5138) (record-predicate . a5137) (record-mutator . a5136) (record-constructor . a5135) (record-accessor . a5134) (make-record-type-descriptor . a5133) (make-record-constructor-descriptor . a5132)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a520b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . a4f1b) (parent-rtd . a4f1a) (nongenerative . a4f19) (opaque . a4f18) (sealed . a4f17) (protocol . a4f16) (parent . a4f15) (immutable . a4f14) (mutable . a4f13) (fields . a4f12) (record-constructor-descriptor . a4ef1) (record-type-descriptor . a4ef0)) '() values values '#f '#f '#t '#f) (a2b13@a29b2@install-library 'a520c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . a4cab) (&no-nans-rtd . a4ca9) (&no-infinities-rcd . a4c96) (&no-infinities-rtd . a4c94) (&i/o-encoding-rcd . a4c81) (&i/o-encoding-rtd . a4c7f) (&i/o-decoding-rcd . a4c66) (&i/o-decoding-rtd . a4c64) (&i/o-port-rcd . a4c51) (&i/o-port-rtd . a4c4f) (&i/o-file-does-not-exist-rcd . a4c36) (&i/o-file-does-not-exist-rtd . a4c34) (&i/o-file-already-exists-rcd . a4c21) (&i/o-file-already-exists-rtd . a4c1f) (&i/o-file-is-read-only-rcd . a4c0c) (&i/o-file-is-read-only-rtd . a4c0a) (&i/o-file-protection-rcd . a4bf7) (&i/o-file-protection-rtd . a4bf5) (&i/o-filename-rcd . a4be2) (&i/o-filename-rtd . a4be0) (&i/o-invalid-position-rcd . a4bc7) (&i/o-invalid-position-rtd . a4bc5) (&i/o-write-rcd . a4bac) (&i/o-write-rtd . a4baa) (&i/o-read-rcd . a4b97) (&i/o-read-rtd . a4b95) (&i/o-rcd . a4b82) (&i/o-rtd . a4b80) (&undefined-rcd . a4b6d) (&undefined-rtd . a4b6b) (&syntax-rcd . a4b58) (&syntax-rtd . a4b56) (&lexical-rcd . a4b37) (&lexical-rtd . a4b35) (&implementation-restriction-rcd . a4b22) (&implementation-restriction-rtd . a4b20) (&non-continuable-rcd . a4b0d) (&non-continuable-rtd . a4b0b) (&who-rcd . a4af8) (&who-rtd . a4af6) (&irritants-rcd . a4add) (&irritants-rtd . a4adb) (&assertion-rcd . a4ac2) (&assertion-rtd . a4ac0) (&violation-rcd . a4aad) (&violation-rtd . a4aab) (&error-rcd . a4a98) (&error-rtd . a4a96) (&serious-rcd . a4a83) (&serious-rtd . a4a81) (&warning-rcd . a4a6e) (&warning-rtd . a4a6c) (&message-rcd . a4a59) (&message-rtd . a4a57) (&condition-rcd . a49fa) (&condition-rtd . a49f8) (syntax-error . a2fe0) (syntax-dispatch . a2efb) (pretty-print . a51ec) (eval-core . a51eb) (set-symbol-value! . a51ea) (symbol-value . a51e9) (gensym . a51e8) (void . a51e7) (load . a4db8) (interaction-environment . a2ff0) (char-ready? . a51e6) (regexp? . a51e5) (read-line . a51e4) (ungensym . a51e3) (alist->eq-hash-table . a51e2) (assoc-ref . a51e1) (print . a51e0) (format . a51df) (host-os . a51de) (library-path . a2991) (standard-library-path . a51dd) (file-newer? . a51dc) (stat-mtime . a51db) (write-to-file . a51da) (file->list . a51d9) (file->string . a51d8) (digit->integer . a51d7) (call-with-string-input-port . a51d6) (call-with-string-io . a51d5) (string-split . a51d4) (bytevector-for-each . a51d3) (string->regexp . a51d2) (rxmatch . a51d1) (regexp-replace-all . a51d0) (hashtable-for-each . a51cf) (call-process . a51ce) (local-tz-offset . a51cd) (microseconds . a51cc) (directory-list . a51cb) (set-current-directory! . a51ca) (expand-path . a51c9) (current-directory . a51c8) (%spawn . a51c7) (%waitpid . a51c6) (pointer-ref-c-int64 . a51c5) (pointer-ref-c-int32 . a51c4) (pointer-ref-c-int16 . a51c3) (pointer-ref-c-int8 . a51c2) (pointer-ref-c-uint64 . a51c1) (pointer-ref-c-uint32 . a51c0) (pointer-ref-c-uint16 . a51bf) (pointer-ref-c-uint8 . a51be) (pointer-set-c-int64! . a51bd) (pointer-set-c-int32! . a51bc) (pointer-set-c-int16! . a51bb) (pointer-set-c-int8! . a51ba) (pointer-set-c-pointer! . a51b9) (pointer-set-c-double! . a51b8) (pointer-set-c-float! . a51b7) (pointer-set-c-long-long! . a51b6) (pointer-set-c-long! . a51b5) (pointer-set-c-int! . a51b4) (pointer-set-c-short! . a51b3) (pointer-set-c-char! . a51b2) (pointer-ref-c-pointer . a51b1) (pointer-ref-c-double . a51b0) (pointer-ref-c-float . a51af) (pointer-ref-c-unsigned-long-long . a51ae) (pointer-ref-c-signed-long-long . a51ad) (pointer-ref-c-unsigned-long . a51ac) (pointer-ref-c-signed-long . a51ab) (pointer-ref-c-unsigned-int . a51aa) (pointer-ref-c-signed-int . a51a9) (pointer-ref-c-unsigned-short . a51a8) (pointer-ref-c-signed-short . a51a7) (pointer-ref-c-unsigned-char . a51a6) (pointer-ref-c-signed-char . a51a5) (pointer->integer . a51a4) (integer->pointer . a51a3) (pointer? . a51a2) (shared-errno . a51a1) (%ffi-supported? . a51a0) (%ffi-pointer->string . a519f) (%ffi-call->string-or-zero . a519e) (%ffi-call->double . a519d) (%ffi-call->void* . a519c) (%ffi-call->void . a519b) (%ffi-call->char . a519a) (%ffi-call->int . a5199) (%ffi-lookup . a5198) (%ffi-open . a5197) (%fork . a5196) (%pipe . a5195) (p . a5194) (open-output-string . a5193) (get-output-string . a5192) (file-stat-ctime . a5191) (file-stat-atime . a5190) (file-stat-mtime . a518f) (file-size-in-bytes . a518e) (file-writable? . a518d) (file-executable? . a518c) (file-readable? . a518b) (file-regular? . a518a) (file-symbolic-link? . a5189) (file-directory? . a5188) (create-symbolic-link . a5187) (rename-file . a5186) (delete-directory . a5185) (create-directory . a5184) (get-environment-variables . a5183) (get-environment-variable . a5182) (get-timeofday . a5181) (get-command-line . a5180) (sys-display . a517f) (whereis . a517e) (register . a517d) (vm-join! . a517c) (vm-set-value! . a517b) (vm? . a517a) (main-vm? . a5179) (vm-eval . a5178) (vm-self . a5177) (vm-start! . a5176) (make-vm . a5175) (mutex-try-lock! . a5174) (mutex-unlock! . a5173) (mutex-lock! . a5172) (mutex? . a5171) (make-mutex . a5170) (condition-variable-notify-all! . a516f) (condition-variable-notify! . a516e) (condition-variable-wait! . a516d) (make-condition-variable . a516c) (mosh-executable-path . a516b) (make-file-options . a516a) (source-info . a5169) (make-compiler-instruction . a5168) (make-instruction . a5167) (set-source-info! . a5166) (bignum? . a5165) (fast-equal? . a5164) (fasl-read . a5163) (fasl-write . a5162) (time-usage . a5161) (os-constant . a5160) (make-parameter . a27c4) (socket-port . a515f) (socket-shutdown . a515e) (socket-close . a515d) (socket-send . a515c) (socket-recv! . a515b) (socket-recv . a515a) (make-server-socket . a5159) (make-client-socket . a5158) (socket-accept . a5157) (socket? . a5156) (string-upcase . a5155) (string-titlecase . a5154) (string-normalize-nfkd . a5153) (string-normalize-nfkc . a5152) (string-normalize-nfd . a5151) (string-normalize-nfc . a5150) (string-foldcase . a514f) (string-downcase . a514e) (string-ci>? . a514d) (string-ci>=? . a514c) (string-ci=? . a514b) (string-ci<? . a514a) (string-ci<=? . a5149) (char-whitespace? . a5148) (char-upper-case? . a5147) (char-title-case? . a5146) (char-numeric? . a5145) (char-lower-case? . a5144) (char-general-category . a5143) (char-upcase . a5142) (char-titlecase . a5141) (char-foldcase . a5140) (char-downcase . a513f) (char-ci>? . a513e) (char-ci>=? . a513d) (char-ci=? . a513c) (char-ci<? . a513b) (char-ci<=? . a513a) (char-alphabetic? . a5139) (make-variable-transformer . a2d28) (identifier? . a2fe6) (generate-temporaries . a2fd2) (free-identifier=? . a2fd4) (syntax->datum . a2fea) (datum->syntax . a2fe8) (bound-identifier=? . a2fd6) (record-type-descriptor? . a5138) (record-predicate . a5137) (record-mutator . a5136) (record-constructor . a5135) (record-accessor . a5134) (make-record-type-descriptor . a5133) (make-record-constructor-descriptor . a5132) (record? . a5131) (record-type-uid . a5130) (record-type-sealed? . a512f) (record-type-parent . a512e) (record-type-opaque? . a512d) (record-type-name . a512c) (record-type-generative? . a512b) (record-type-field-names . a512a) (record-rtd . a5129) (record-field-mutable? . a5128) (delete-file . a5127) (file-exists? . a5126) (vector-sort! . a5125) (vector-sort . a5124) (list-sort . a5123) (symbol-hash . a5122) (string-ci-hash . a5121) (string-hash . a5120) (equal-hash . a511f) (hashtable-equivalence-function . a511e) (make-hashtable . a511d) (hashtable-hash-function . a511c) (make-eqv-hashtable . a511b) (make-eq-hashtable . a511a) (hashtable? . a5119) (hashtable-update! . a5118) (hashtable-size . a5117) (hashtable-set! . a5116) (hashtable-ref . a5115) (hashtable-mutable? . a5114) (hashtable-keys . a5113) (hashtable-entries . a5112) (hashtable-delete! . a5111) (hashtable-copy . a5110) (hashtable-contains? . a510f) (hashtable-clear! . a510e) (call-with-output-file . a510d) (call-with-input-file . a510c) (write-char . a510b) (write . a510a) (with-output-to-file . a5109) (with-input-from-file . a5108) (read-char . a5107) (read . a5106) (peek-char . a5105) (open-output-file . a5104) (open-input-file . a5103) (newline . a5102) (display . a5101) (close-output-port . a5100) (close-input-port . a50ff) (eof-object? . a50fe) (eof-object . a50fd) (current-error-port . a50fc) (current-output-port . a50fb) (current-input-port . a50fa) (output-port? . a50f9) (input-port? . a50f8) (utf-8-codec . a50f7) (utf-16-codec . a50f6) (transcoder-error-handling-mode . a50f5) (transcoder-eol-style . a50f4) (transcoder-codec . a50f3) (transcoded-port . a50f2) (textual-port? . a50f1) (string->bytevector . a50f0) (standard-output-port . a50ef) (standard-input-port . a50ee) (standard-error-port . a50ed) (set-port-position! . a50ec) (put-u8 . a50eb) (put-string . a50ea) (put-datum . a50e9) (put-char . a50e8) (put-bytevector . a50e7) (port? . a50e6) (port-transcoder . a50e5) (port-position . a50e4) (port-has-set-port-position!? . a50e3) (port-has-port-position? . a50e2) (port-eof? . a50e1) (output-port-buffer-mode . a50e0) (open-string-output-port . a50df) (open-string-input-port . a50de) (open-file-output-port . a50dd) (open-file-input/output-port . a50dc) (open-file-input-port . a50db) (open-bytevector-output-port . a50da) (open-bytevector-input-port . a50d9) (native-transcoder . a50d8) (native-eol-style . a50d7) (make-transcoder . a50d6) (latin-1-codec . a50d5) (make-i/o-write-error . a4ba6) (make-i/o-read-error . a4b91) (make-i/o-port-error . a4c47) (make-i/o-invalid-position-error . a4bbd) (make-i/o-filename-error . a4bd8) (make-i/o-file-protection-error . a4bf1) (make-i/o-file-is-read-only-error . a4c06) (make-i/o-file-does-not-exist-error . a4c30) (make-i/o-file-already-exists-error . a4c1b) (make-i/o-error . a4b7c) (make-i/o-encoding-error . a4c77) (make-i/o-decoding-error . a4c60) (make-custom-textual-output-port . a50d4) (make-custom-textual-input/output-port . a50d3) (make-custom-textual-input-port . a50d2) (make-custom-binary-output-port . a50d1) (make-custom-binary-input/output-port . a50d0) (make-custom-binary-input-port . a50cf) (make-bytevector . a50ce) (lookahead-u8 . a50cd) (lookahead-char . a50cc) (i/o-write-error? . a4ba8) (i/o-read-error? . a4b93) (i/o-port-error? . a4c4b) (i/o-invalid-position-error? . a4bc1) (i/o-filename-error? . a4bdc) (i/o-file-protection-error? . a4bf3) (i/o-file-is-read-only-error? . a4c08) (i/o-file-does-not-exist-error? . a4c32) (i/o-file-already-exists-error? . a4c1d) (i/o-error? . a4b7e) (i/o-error-position . a4bc3) (i/o-error-port . a4c4d) (i/o-error-filename . a4bde) (i/o-encoding-error? . a4c7b) (i/o-encoding-error-char . a4c7d) (i/o-decoding-error? . a4c62) (get-u8 . a50cb) (get-string-n! . a50ca) (get-string-n . a50c9) (get-string-all . a50c8) (get-line . a50c7) (get-datum . a50c6) (get-char . a50c5) (get-bytevector-some . a50c4) (get-bytevector-n! . a50c3) (get-bytevector-n . a50c2) (get-bytevector-all . a50c1) (flush-output-port . a50c0) (close-port . a50bf) (scheme-report-environment . a2fc0) (quotient . a50be) (null-environment . a2fbe) (remainder . a50bd) (modulo . a50bc) (inexact->exact . a50bb) (force . a50ba) (exact->inexact . a50b9) (make-promise . a50b8) (exit . a50b7) (command-line . a4db2) (string-fill! . a50b6) (string-set! . a50b5) (set-cdr! . a50b4) (set-car! . a50b3) (remove . a50b2) (remv . a50b1) (remp . a50b0) (remq . a50af) (partition . a50ae) (memv . a50ad) (memq . a50ac) (memp . a50ab) (member . a50aa) (exists . a50a9) (for-all . a50a8) (fold-right . a50a7) (fold-left . a50a6) (find . a50a5) (filter . a50a4) (cons* . a50a3) (assv . a50a2) (assq . a50a1) (assp . a50a0) (assoc . a509f) (call-with-string-output-port . a509e) (call-with-port . a509d) (call-with-bytevector-output-port . a509c) (bytevector->string . a509b) (buffer-mode? . a509a) (binary-port? . a5099) (with-exception-handler . a5098) (raise-continuable . a5097) (raise . a5096) (eval . a2fc4) (environment . a2fbc) (make-enumeration . a5095) (enum-set=? . a5094) (enum-set-universe . a5093) (enum-set-union . a5092) (enum-set-subset? . a5091) (enum-set-projection . a5090) (enum-set-member? . a508f) (enum-set-intersection . a508e) (enum-set-indexer . a508d) (enum-set-difference . a508c) (enum-set-constructor . a508b) (enum-set-complement . a508a) (enum-set->list . a5089) (who-condition? . a4af2) (warning? . a4a6a) (violation? . a4aa9) (undefined-violation? . a4b69) (syntax-violation? . a4b50) (syntax-violation-subform . a4b54) (syntax-violation-form . a4b52) (syntax-violation . a2fe4) (simple-conditions . a5088) (serious-condition? . a4a7f) (non-continuable-violation? . a4b09) (message-condition? . a4a53) (make-who-condition . a4aee) (make-warning . a4a68) (make-violation . a4aa7) (make-undefined-violation . a4b67) (make-syntax-violation . a4b4a) (make-serious-condition . a4a7d) (make-non-continuable-violation . a4b07) (make-message-condition . a4a4f) (make-lexical-violation . a4b31) (make-irritants-condition . a4ad3) (make-implementation-restriction-violation . a4b1c) (make-error . a4a92) (make-assertion-violation . a4abc) (lexical-violation? . a4b33) (irritants-condition? . a4ad7) (implementation-restriction-violation? . a4b1e) (error? . a4a94) (condition-who . a4af4) (condition-predicate . a5087) (condition-message . a4a55) (condition-irritants . a4ad9) (condition-accessor . a5086) (condition . a5085) (assertion-violation? . a4abe) (condition? . a5084) (utf32->string . a5083) (utf16->string . a5082) (utf8->string . a5081) (uint-list->bytevector . a5080) (u8-list->bytevector . a507f) (string->utf8 . a507e) (string->utf32 . a507d) (string->utf16 . a507c) (sint-list->bytevector . a507b) (native-endianness . a507a) (bytevector? . a5079) (bytevector=? . a5078) (bytevector-uint-set! . a5077) (bytevector-uint-ref . a5076) (bytevector-u8-set! . a5075) (bytevector-u8-ref . a5074) (bytevector-u64-set! . a5073) (bytevector-u64-ref . a5072) (bytevector-u64-native-set! . a5071) (bytevector-u64-native-ref . a5070) (bytevector-u32-set! . a506f) (bytevector-u32-ref . a506e) (bytevector-u32-native-set! . a506d) (bytevector-u32-native-ref . a506c) (bytevector-u16-set! . a506b) (bytevector-u16-ref . a506a) (bytevector-u16-native-set! . a5069) (bytevector-u16-native-ref . a5068) (bytevector-sint-set! . a5067) (bytevector-sint-ref . a5066) (bytevector-s8-set! . a5065) (bytevector-s8-ref . a5064) (bytevector-s64-set! . a5063) (bytevector-s64-ref . a5062) (bytevector-s64-native-set! . a5061) (bytevector-s64-native-ref . a5060) (bytevector-s32-set! . a505f) (bytevector-s32-ref . a505e) (bytevector-s32-native-set! . a505d) (bytevector-s32-native-ref . a505c) (bytevector-s16-set! . a505b) (bytevector-s16-ref . a505a) (bytevector-s16-native-set! . a5059) (bytevector-s16-native-ref . a5058) (bytevector-length . a5057) (bytevector-ieee-single-ref . a5056) (bytevector-ieee-single-set! . a5055) (bytevector-ieee-single-native-set! . a5054) (bytevector-ieee-single-native-ref . a5053) (bytevector-ieee-double-set! . a5052) (bytevector-ieee-double-ref . a5051) (bytevector-ieee-double-native-set! . a5050) (bytevector-ieee-double-native-ref . a504f) (bytevector-fill! . a504e) (bytevector-copy! . a504d) (bytevector-copy . a504c) (bytevector->uint-list . a504b) (bytevector->u8-list . a504a) (bytevector->sint-list . a5049) (no-nans-violation? . a4ca7) (no-infinities-violation? . a4c92) (make-no-nans-violation . a4ca5) (make-no-infinities-violation . a4c90) (real->flonum . a5048) (flzero? . a5047) (fltruncate . a5046) (fltan . a5045) (flsqrt . a5044) (flsin . a5043) (flround . a5042) (flpositive? . a5041) (flonum? . a5040) (flodd? . a503f) (flnumerator . a503e) (flnegative? . a503d) (flnan? . a503c) (flmod0 . a503b) (flmod . a503a) (flmin . a5039) (flmax . a5038) (fllog . a5037) (flinteger? . a5036) (flinfinite? . a5035) (flfloor . a5034) (flfinite? . a5033) (flexpt . a5032) (flexp . a5031) (fleven? . a5030) (fldiv0-and-mod0 . a502f) (fldiv0 . a502e) (fldiv-and-mod . a502d) (fldiv . a502c) (fldenominator . a502b) (flcos . a502a) (flceiling . a5029) (flatan . a5028) (flasin . a5027) (flacos . a5026) (flabs . a5025) (fl>? . a5024) (fl>=? . a5023) (fl=? . a5022) (fl<? . a5021) (fl<=? . a5020) (fl/ . a501f) (fl- . a501e) (fl+ . a501d) (fl* . a501c) (fixnum->flonum . a501b) (fxzero? . a501a) (fxxor . a5019) (fxrotate-bit-field . a5018) (fxreverse-bit-field . a5017) (fxpositive? . a5016) (fxodd? . a5015) (fxnot . a5014) (fxnegative? . a5013) (fxmod0 . a5012) (fxmod . a5011) (fxmin . a5010) (fxmax . a500f) (fxlength . a500e) (fxior . a500d) (fxif . a500c) (fxfirst-bit-set . a500b) (fxeven? . a500a) (fxdiv0-and-mod0 . a5009) (fxdiv0 . a5008) (fxdiv-and-mod . a5007) (fxdiv . a5006) (fxcopy-bit-field . a5005) (fxcopy-bit . a5004) (fxbit-set? . a5003) (fxbit-field . a5002) (fxbit-count . a5001) (fxarithmetic-shift-right . a5000) (fxarithmetic-shift-left . a4fff) (fxarithmetic-shift . a4ffe) (fxand . a4ffd) (fx>? . a4ffc) (fx>=? . a4ffb) (fx=? . a4ffa) (fx<? . a4ff9) (fx<=? . a4ff8) (fx-/carry . a4ff7) (fx- . a4ff6) (fx+/carry . a4ff5) (fx+ . a4ff4) (fx*/carry . a4ff3) (fx* . a4ff2) (greatest-fixnum . a4ff1) (least-fixnum . a4ff0) (fixnum-width . a4fef) (fixnum? . a4fee) (bitwise-rotate-bit-field . a4fed) (bitwise-reverse-bit-field . a4fec) (bitwise-length . a4feb) (bitwise-if . a4fea) (bitwise-first-bit-set . a4fe9) (bitwise-copy-bit-field . a4fe8) (bitwise-copy-bit . a4fe7) (bitwise-bit-set? . a4fe6) (bitwise-bit-field . a4fe5) (bitwise-bit-count . a4fe4) (bitwise-xor . a4fe3) (bitwise-ior . a4fe2) (bitwise-and . a4fe1) (bitwise-not . a4fe0) (bitwise-arithmetic-shift-right . a4fdf) (bitwise-arithmetic-shift-left . a4fde) (bitwise-arithmetic-shift . a4fdd) (zero? . a4fdc) (vector? . a4fdb) (vector-set! . a4fda) (vector-ref . a4fd9) (vector-map . a4fd8) (vector-length . a4fd7) (vector-for-each . a4fd6) (vector-fill! . a4fd5) (vector->list . a4fd4) (vector . a4fd3) (values . a4fd2) (truncate . a4fd1) (tan . a4fd0) (symbol? . a4fcf) (symbol=? . a4fce) (symbol->string . a4fcd) (substring . a4fcc) (string? . a4fcb) (string>? . a4fca) (string>=? . a4fc9) (string=? . a4fc8) (string<? . a4fc7) (string<=? . a4fc6) (string-ref . a4fc5) (string-length . a4fc4) (string-for-each . a4fc3) (string-copy . a4fc2) (string-append . a4fc1) (string->symbol . a4fc0) (string->number . a4fbf) (string->list . a4fbe) (string . a4fbd) (sqrt . a4fbc) (sin . a4fbb) (round . a4fba) (reverse . a4fb9) (real? . a4fb8) (real-valued? . a4fb7) (real-part . a4fb6) (rationalize . a4fb5) (rational? . a4fb4) (rational-valued? . a4fb3) (procedure? . a4fb2) (positive? . a4fb1) (pair? . a4fb0) (odd? . a4faf) (numerator . a4fae) (number? . a4fad) (number->string . a4fac) (null? . a4fab) (not . a4faa) (negative? . a4fa9) (nan? . a4fa8) (min . a4fa7) (max . a4fa6) (map . a4fa5) (make-vector . a4fa4) (make-string . a4fa3) (make-rectangular . a4fa2) (make-polar . a4fa1) (magnitude . a4fa0) (log . a4f9f) (list? . a4f9e) (list-tail . a4f9d) (list-ref . a4f9c) (list->vector . a4f9b) (list->string . a4f9a) (list . a4f99) (length . a4f98) (lcm . a4f97) (integer? . a4f96) (integer-valued? . a4f95) (integer->char . a4f94) (infinite? . a4f93) (inexact? . a4f92) (inexact . a4f91) (imag-part . a4f90) (gcd . a4f8f) (for-each . a4f8e) (floor . a4f8d) (finite? . a4f8c) (expt . a4f8b) (exp . a4f8a) (exact? . a4f89) (exact-integer-sqrt . a4f88) (exact . a4f87) (even? . a4f86) (error . a4f85) (eqv? . a4f84) (equal? . a4f83) (eq? . a4f82) (dynamic-wind . a4f81) (div0-and-mod0 . a4f80) (mod0 . a4f7f) (div0 . a4f7e) (div-and-mod . a4f7d) (mod . a4f7c) (div . a4f7b) (denominator . a4f7a) (cos . a4f79) (cons . a4f78) (complex? . a4f77) (char? . a4f76) (char>? . a4f75) (char>=? . a4f74) (char=? . a4f73) (char<? . a4f72) (char<=? . a4f71) (char->integer . a4f70) (ceiling . a4f6f) (call-with-values . a4f6e) (call/cc . a4f6d) (call-with-current-continuation . a4f6c) (cddddr . a4f6b) (cdddar . a4f6a) (cddadr . a4f69) (cddaar . a4f68) (cdaddr . a4f67) (cdadar . a4f66) (cdaadr . a4f65) (cdaaar . a4f64) (cadddr . a4f63) (caddar . a4f62) (cadadr . a4f61) (cadaar . a4f60) (caaddr . a4f5f) (caadar . a4f5e) (caaadr . a4f5d) (caaaar . a4f5c) (cdddr . a4f5b) (cddar . a4f5a) (cdadr . a4f59) (cdaar . a4f58) (caddr . a4f57) (cadar . a4f56) (caadr . a4f55) (caaar . a4f54) (cddr . a4f53) (cdar . a4f52) (cadr . a4f51) (caar . a4f50) (cdr . a4f4f) (car . a4f4e) (boolean? . a4f4d) (boolean=? . a4f4c) (atan . a4f4b) (assertion-violation . a4f4a) (assertion-error . a2fde) (asin . a4f49) (apply . a4f48) (append . a4f47) (angle . a4f46) (acos . a4f45) (abs . a4f44) (/ . a4f43) (* . a4f42) (- . a4f41) (+ . a4f40) (>= . a4f3f) (> . a4f3e) (= . a4f3d) (<= . a4f3c) (< . a4f3b) (library . a4f3a) (&no-nans . a4f39) (&no-infinities . a4f38) (&i/o-encoding . a4f37) (&i/o-decoding . a4f36) (&i/o-port . a4f35) (&i/o-file-does-not-exist . a4f34) (&i/o-file-already-exists . a4f33) (&i/o-file-is-read-only . a4f32) (&i/o-file-protection . a4f31) (&i/o-filename . a4f30) (&i/o-invalid-position . a4f2f) (&i/o-write . a4f2e) (&i/o-read . a4f2d) (&i/o . a4f2c) (&undefined . a4f2b) (&syntax . a4f2a) (&lexical . a4f29) (&implementation-restriction . a4f28) (&non-continuable . a4f27) (&who . a4f26) (&irritants . a4f25) (&assertion . a4f24) (&violation . a4f23) (&error . a4f22) (&serious . a4f21) (&warning . a4f20) (&message . a4f1f) (&condition . a4f1e) (define-condition-type . a4f1d) (define-enumeration . a4f1c) (define-record-type . a4f1b) (parent-rtd . a4f1a) (nongenerative . a4f19) (opaque . a4f18) (sealed . a4f17) (protocol . a4f16) (parent . a4f15) (immutable . a4f14) (mutable . a4f13) (fields . a4f12) (error-handling-mode . a4f11) (file-options . a4f10) (buffer-mode . a4f0f) (eol-style . a4f0e) (guard . a4f0d) (trace-define . a4f0c) (trace-lambda . a4f0b) (unsyntax-splicing . a4f0a) (unsyntax . a4f09) (unquote-splicing . a4f08) (unquote . a4f07) (_ . a4f06) (else . a4f05) (=> . a4f04) (... . a4f03) (assert . a4f02) (endianness . a4f01) (delay . a4f00) (time . a4eff) (do . a4efe) (cond . a4efd) (let* . a4efc) (let . a4efb) (let*-values . a4efa) (let-values . a4ef9) (identifier-syntax . a4ef8) (with-syntax . a4ef7) (quasisyntax . a4ef6) (quasiquote . a4ef5) (syntax-rules . a4ef4) (include . a4ef3) (define-struct . a4ef2) (record-constructor-descriptor . a4ef1) (record-type-descriptor . a4ef0) (case . a4eef) (parameterize . a4eee) (unless . a4eed) (when . a4eec) (or . a4eeb) (and . a4eea) (if . a4ee9) (letrec* . a4ee8) (letrec . a4ee7) (type-descriptor . a4ee6) (case-lambda . a4ee5) (lambda . a4ee4) (syntax . a4ee3) (syntax-case . a4ee2) (quote . a4ee1) (foreign-call . a4ee0) (letrec-syntax . a4edf) (let-syntax . a4ede) (set! . a4edd) (import . a4edc) (begin . a4edb) (module . a4eda) (define-syntax . a4ed9) (define . a4ed8)) '((a4cab core-prim . &no-nans-rcd) (a4ca9 core-prim . &no-nans-rtd) (a4c96 core-prim . &no-infinities-rcd) (a4c94 core-prim . &no-infinities-rtd) (a4c81 core-prim . &i/o-encoding-rcd) (a4c7f core-prim . &i/o-encoding-rtd) (a4c66 core-prim . &i/o-decoding-rcd) (a4c64 core-prim . &i/o-decoding-rtd) (a4c51 core-prim . &i/o-port-rcd) (a4c4f core-prim . &i/o-port-rtd) (a4c36 core-prim . &i/o-file-does-not-exist-rcd) (a4c34 core-prim . &i/o-file-does-not-exist-rtd) (a4c21 core-prim . &i/o-file-already-exists-rcd) (a4c1f core-prim . &i/o-file-already-exists-rtd) (a4c0c core-prim . &i/o-file-is-read-only-rcd) (a4c0a core-prim . &i/o-file-is-read-only-rtd) (a4bf7 core-prim . &i/o-file-protection-rcd) (a4bf5 core-prim . &i/o-file-protection-rtd) (a4be2 core-prim . &i/o-filename-rcd) (a4be0 core-prim . &i/o-filename-rtd) (a4bc7 core-prim . &i/o-invalid-position-rcd) (a4bc5 core-prim . &i/o-invalid-position-rtd) (a4bac core-prim . &i/o-write-rcd) (a4baa core-prim . &i/o-write-rtd) (a4b97 core-prim . &i/o-read-rcd) (a4b95 core-prim . &i/o-read-rtd) (a4b82 core-prim . &i/o-rcd) (a4b80 core-prim . &i/o-rtd) (a4b6d core-prim . &undefined-rcd) (a4b6b core-prim . &undefined-rtd) (a4b58 core-prim . &syntax-rcd) (a4b56 core-prim . &syntax-rtd) (a4b37 core-prim . &lexical-rcd) (a4b35 core-prim . &lexical-rtd) (a4b22 core-prim . &implementation-restriction-rcd) (a4b20 core-prim . &implementation-restriction-rtd) (a4b0d core-prim . &non-continuable-rcd) (a4b0b core-prim . &non-continuable-rtd) (a4af8 core-prim . &who-rcd) (a4af6 core-prim . &who-rtd) (a4add core-prim . &irritants-rcd) (a4adb core-prim . &irritants-rtd) (a4ac2 core-prim . &assertion-rcd) (a4ac0 core-prim . &assertion-rtd) (a4aad core-prim . &violation-rcd) (a4aab core-prim . &violation-rtd) (a4a98 core-prim . &error-rcd) (a4a96 core-prim . &error-rtd) (a4a83 core-prim . &serious-rcd) (a4a81 core-prim . &serious-rtd) (a4a6e core-prim . &warning-rcd) (a4a6c core-prim . &warning-rtd) (a4a59 core-prim . &message-rcd) (a4a57 core-prim . &message-rtd) (a49fa core-prim . &condition-rcd) (a49f8 core-prim . &condition-rtd) (a2fe0 core-prim . syntax-error) (a2efb core-prim . syntax-dispatch) (a51ec core-prim . pretty-print) (a51eb core-prim . eval-core) (a51ea core-prim . set-symbol-value!) (a51e9 core-prim . symbol-value) (a51e8 core-prim . gensym) (a51e7 core-prim . void) (a4db8 core-prim . load) (a2ff0 core-prim . interaction-environment) (a51e6 core-prim . char-ready?) (a51e5 core-prim . regexp?) (a51e4 core-prim . read-line) (a51e3 core-prim . ungensym) (a51e2 core-prim . alist->eq-hash-table) (a51e1 core-prim . assoc-ref) (a51e0 core-prim . print) (a51df core-prim . format) (a51de core-prim . host-os) (a2991 core-prim . library-path) (a51dd core-prim . standard-library-path) (a51dc core-prim . file-newer?) (a51db core-prim . stat-mtime) (a51da core-prim . write-to-file) (a51d9 core-prim . file->list) (a51d8 core-prim . file->string) (a51d7 core-prim . digit->integer) (a51d6 core-prim . call-with-string-input-port) (a51d5 core-prim . call-with-string-io) (a51d4 core-prim . string-split) (a51d3 core-prim . bytevector-for-each) (a51d2 core-prim . string->regexp) (a51d1 core-prim . rxmatch) (a51d0 core-prim . regexp-replace-all) (a51cf core-prim . hashtable-for-each) (a51ce core-prim . call-process) (a51cd core-prim . local-tz-offset) (a51cc core-prim . microseconds) (a51cb core-prim . directory-list) (a51ca core-prim . set-current-directory!) (a51c9 core-prim . expand-path) (a51c8 core-prim . current-directory) (a51c7 core-prim . %spawn) (a51c6 core-prim . %waitpid) (a51c5 core-prim . pointer-ref-c-int64) (a51c4 core-prim . pointer-ref-c-int32) (a51c3 core-prim . pointer-ref-c-int16) (a51c2 core-prim . pointer-ref-c-int8) (a51c1 core-prim . pointer-ref-c-uint64) (a51c0 core-prim . pointer-ref-c-uint32) (a51bf core-prim . pointer-ref-c-uint16) (a51be core-prim . pointer-ref-c-uint8) (a51bd core-prim . pointer-set-c-int64!) (a51bc core-prim . pointer-set-c-int32!) (a51bb core-prim . pointer-set-c-int16!) (a51ba core-prim . pointer-set-c-int8!) (a51b9 core-prim . pointer-set-c-pointer!) (a51b8 core-prim . pointer-set-c-double!) (a51b7 core-prim . pointer-set-c-float!) (a51b6 core-prim . pointer-set-c-long-long!) (a51b5 core-prim . pointer-set-c-long!) (a51b4 core-prim . pointer-set-c-int!) (a51b3 core-prim . pointer-set-c-short!) (a51b2 core-prim . pointer-set-c-char!) (a51b1 core-prim . pointer-ref-c-pointer) (a51b0 core-prim . pointer-ref-c-double) (a51af core-prim . pointer-ref-c-float) (a51ae core-prim . pointer-ref-c-unsigned-long-long) (a51ad core-prim . pointer-ref-c-signed-long-long) (a51ac core-prim . pointer-ref-c-unsigned-long) (a51ab core-prim . pointer-ref-c-signed-long) (a51aa core-prim . pointer-ref-c-unsigned-int) (a51a9 core-prim . pointer-ref-c-signed-int) (a51a8 core-prim . pointer-ref-c-unsigned-short) (a51a7 core-prim . pointer-ref-c-signed-short) (a51a6 core-prim . pointer-ref-c-unsigned-char) (a51a5 core-prim . pointer-ref-c-signed-char) (a51a4 core-prim . pointer->integer) (a51a3 core-prim . integer->pointer) (a51a2 core-prim . pointer?) (a51a1 core-prim . shared-errno) (a51a0 core-prim . %ffi-supported?) (a519f core-prim . %ffi-pointer->string) (a519e core-prim . %ffi-call->string-or-zero) (a519d core-prim . %ffi-call->double) (a519c core-prim . %ffi-call->void*) (a519b core-prim . %ffi-call->void) (a519a core-prim . %ffi-call->char) (a5199 core-prim . %ffi-call->int) (a5198 core-prim . %ffi-lookup) (a5197 core-prim . %ffi-open) (a5196 core-prim . %fork) (a5195 core-prim . %pipe) (a5194 core-prim . p) (a5193 core-prim . open-output-string) (a5192 core-prim . get-output-string) (a5191 core-prim . file-stat-ctime) (a5190 core-prim . file-stat-atime) (a518f core-prim . file-stat-mtime) (a518e core-prim . file-size-in-bytes) (a518d core-prim . file-writable?) (a518c core-prim . file-executable?) (a518b core-prim . file-readable?) (a518a core-prim . file-regular?) (a5189 core-prim . file-symbolic-link?) (a5188 core-prim . file-directory?) (a5187 core-prim . create-symbolic-link) (a5186 core-prim . rename-file) (a5185 core-prim . delete-directory) (a5184 core-prim . create-directory) (a5183 core-prim . get-environment-variables) (a5182 core-prim . get-environment-variable) (a5181 core-prim . get-timeofday) (a5180 core-prim . get-command-line) (a517f core-prim . sys-display) (a517e core-prim . whereis) (a517d core-prim . register) (a517c core-prim . vm-join!) (a517b core-prim . vm-set-value!) (a517a core-prim . vm?) (a5179 core-prim . main-vm?) (a5178 core-prim . vm-eval) (a5177 core-prim . vm-self) (a5176 core-prim . vm-start!) (a5175 core-prim . make-vm) (a5174 core-prim . mutex-try-lock!) (a5173 core-prim . mutex-unlock!) (a5172 core-prim . mutex-lock!) (a5171 core-prim . mutex?) (a5170 core-prim . make-mutex) (a516f core-prim . condition-variable-notify-all!) (a516e core-prim . condition-variable-notify!) (a516d core-prim . condition-variable-wait!) (a516c core-prim . make-condition-variable) (a516b core-prim . mosh-executable-path) (a516a core-prim . make-file-options) (a5169 core-prim . source-info) (a5168 core-prim . make-compiler-instruction) (a5167 core-prim . make-instruction) (a5166 core-prim . set-source-info!) (a5165 core-prim . bignum?) (a5164 core-prim . fast-equal?) (a5163 core-prim . fasl-read) (a5162 core-prim . fasl-write) (a5161 core-prim . time-usage) (a5160 core-prim . os-constant) (a27c4 core-prim . make-parameter) (a515f core-prim . socket-port) (a515e core-prim . socket-shutdown) (a515d core-prim . socket-close) (a515c core-prim . socket-send) (a515b core-prim . socket-recv!) (a515a core-prim . socket-recv) (a5159 core-prim . make-server-socket) (a5158 core-prim . make-client-socket) (a5157 core-prim . socket-accept) (a5156 core-prim . socket?) (a5155 core-prim . string-upcase) (a5154 core-prim . string-titlecase) (a5153 core-prim . string-normalize-nfkd) (a5152 core-prim . string-normalize-nfkc) (a5151 core-prim . string-normalize-nfd) (a5150 core-prim . string-normalize-nfc) (a514f core-prim . string-foldcase) (a514e core-prim . string-downcase) (a514d core-prim . string-ci>?) (a514c core-prim . string-ci>=?) (a514b core-prim . string-ci=?) (a514a core-prim . string-ci<?) (a5149 core-prim . string-ci<=?) (a5148 core-prim . char-whitespace?) (a5147 core-prim . char-upper-case?) (a5146 core-prim . char-title-case?) (a5145 core-prim . char-numeric?) (a5144 core-prim . char-lower-case?) (a5143 core-prim . char-general-category) (a5142 core-prim . char-upcase) (a5141 core-prim . char-titlecase) (a5140 core-prim . char-foldcase) (a513f core-prim . char-downcase) (a513e core-prim . char-ci>?) (a513d core-prim . char-ci>=?) (a513c core-prim . char-ci=?) (a513b core-prim . char-ci<?) (a513a core-prim . char-ci<=?) (a5139 core-prim . char-alphabetic?) (a2d28 core-prim . make-variable-transformer) (a2fe6 core-prim . identifier?) (a2fd2 core-prim . generate-temporaries) (a2fd4 core-prim . free-identifier=?) (a2fea core-prim . syntax->datum) (a2fe8 core-prim . datum->syntax) (a2fd6 core-prim . bound-identifier=?) (a5138 core-prim . record-type-descriptor?) (a5137 core-prim . record-predicate) (a5136 core-prim . record-mutator) (a5135 core-prim . record-constructor) (a5134 core-prim . record-accessor) (a5133 core-prim . make-record-type-descriptor) (a5132 core-prim . make-record-constructor-descriptor) (a5131 core-prim . record?) (a5130 core-prim . record-type-uid) (a512f core-prim . record-type-sealed?) (a512e core-prim . record-type-parent) (a512d core-prim . record-type-opaque?) (a512c core-prim . record-type-name) (a512b core-prim . record-type-generative?) (a512a core-prim . record-type-field-names) (a5129 core-prim . record-rtd) (a5128 core-prim . record-field-mutable?) (a5127 core-prim . delete-file) (a5126 core-prim . file-exists?) (a5125 core-prim . vector-sort!) (a5124 core-prim . vector-sort) (a5123 core-prim . list-sort) (a5122 core-prim . symbol-hash) (a5121 core-prim . string-ci-hash) (a5120 core-prim . string-hash) (a511f core-prim . equal-hash) (a511e core-prim . hashtable-equivalence-function) (a511d core-prim . make-hashtable) (a511c core-prim . hashtable-hash-function) (a511b core-prim . make-eqv-hashtable) (a511a core-prim . make-eq-hashtable) (a5119 core-prim . hashtable?) (a5118 core-prim . hashtable-update!) (a5117 core-prim . hashtable-size) (a5116 core-prim . hashtable-set!) (a5115 core-prim . hashtable-ref) (a5114 core-prim . hashtable-mutable?) (a5113 core-prim . hashtable-keys) (a5112 core-prim . hashtable-entries) (a5111 core-prim . hashtable-delete!) (a5110 core-prim . hashtable-copy) (a510f core-prim . hashtable-contains?) (a510e core-prim . hashtable-clear!) (a510d core-prim . call-with-output-file) (a510c core-prim . call-with-input-file) (a510b core-prim . write-char) (a510a core-prim . write) (a5109 core-prim . with-output-to-file) (a5108 core-prim . with-input-from-file) (a5107 core-prim . read-char) (a5106 core-prim . read) (a5105 core-prim . peek-char) (a5104 core-prim . open-output-file) (a5103 core-prim . open-input-file) (a5102 core-prim . newline) (a5101 core-prim . display) (a5100 core-prim . close-output-port) (a50ff core-prim . close-input-port) (a50fe core-prim . eof-object?) (a50fd core-prim . eof-object) (a50fc core-prim . current-error-port) (a50fb core-prim . current-output-port) (a50fa core-prim . current-input-port) (a50f9 core-prim . output-port?) (a50f8 core-prim . input-port?) (a50f7 core-prim . utf-8-codec) (a50f6 core-prim . utf-16-codec) (a50f5 core-prim . transcoder-error-handling-mode) (a50f4 core-prim . transcoder-eol-style) (a50f3 core-prim . transcoder-codec) (a50f2 core-prim . transcoded-port) (a50f1 core-prim . textual-port?) (a50f0 core-prim . string->bytevector) (a50ef core-prim . standard-output-port) (a50ee core-prim . standard-input-port) (a50ed core-prim . standard-error-port) (a50ec core-prim . set-port-position!) (a50eb core-prim . put-u8) (a50ea core-prim . put-string) (a50e9 core-prim . put-datum) (a50e8 core-prim . put-char) (a50e7 core-prim . put-bytevector) (a50e6 core-prim . port?) (a50e5 core-prim . port-transcoder) (a50e4 core-prim . port-position) (a50e3 core-prim . port-has-set-port-position!?) (a50e2 core-prim . port-has-port-position?) (a50e1 core-prim . port-eof?) (a50e0 core-prim . output-port-buffer-mode) (a50df core-prim . open-string-output-port) (a50de core-prim . open-string-input-port) (a50dd core-prim . open-file-output-port) (a50dc core-prim . open-file-input/output-port) (a50db core-prim . open-file-input-port) (a50da core-prim . open-bytevector-output-port) (a50d9 core-prim . open-bytevector-input-port) (a50d8 core-prim . native-transcoder) (a50d7 core-prim . native-eol-style) (a50d6 core-prim . make-transcoder) (a50d5 core-prim . latin-1-codec) (a4ba6 core-prim . make-i/o-write-error) (a4b91 core-prim . make-i/o-read-error) (a4c47 core-prim . make-i/o-port-error) (a4bbd core-prim . make-i/o-invalid-position-error) (a4bd8 core-prim . make-i/o-filename-error) (a4bf1 core-prim . make-i/o-file-protection-error) (a4c06 core-prim . make-i/o-file-is-read-only-error) (a4c30 core-prim . make-i/o-file-does-not-exist-error) (a4c1b core-prim . make-i/o-file-already-exists-error) (a4b7c core-prim . make-i/o-error) (a4c77 core-prim . make-i/o-encoding-error) (a4c60 core-prim . make-i/o-decoding-error) (a50d4 core-prim . make-custom-textual-output-port) (a50d3 core-prim . make-custom-textual-input/output-port) (a50d2 core-prim . make-custom-textual-input-port) (a50d1 core-prim . make-custom-binary-output-port) (a50d0 core-prim . make-custom-binary-input/output-port) (a50cf core-prim . make-custom-binary-input-port) (a50ce core-prim . make-bytevector) (a50cd core-prim . lookahead-u8) (a50cc core-prim . lookahead-char) (a4ba8 core-prim . i/o-write-error?) (a4b93 core-prim . i/o-read-error?) (a4c4b core-prim . i/o-port-error?) (a4bc1 core-prim . i/o-invalid-position-error?) (a4bdc core-prim . i/o-filename-error?) (a4bf3 core-prim . i/o-file-protection-error?) (a4c08 core-prim . i/o-file-is-read-only-error?) (a4c32 core-prim . i/o-file-does-not-exist-error?) (a4c1d core-prim . i/o-file-already-exists-error?) (a4b7e core-prim . i/o-error?) (a4bc3 core-prim . i/o-error-position) (a4c4d core-prim . i/o-error-port) (a4bde core-prim . i/o-error-filename) (a4c7b core-prim . i/o-encoding-error?) (a4c7d core-prim . i/o-encoding-error-char) (a4c62 core-prim . i/o-decoding-error?) (a50cb core-prim . get-u8) (a50ca core-prim . get-string-n!) (a50c9 core-prim . get-string-n) (a50c8 core-prim . get-string-all) (a50c7 core-prim . get-line) (a50c6 core-prim . get-datum) (a50c5 core-prim . get-char) (a50c4 core-prim . get-bytevector-some) (a50c3 core-prim . get-bytevector-n!) (a50c2 core-prim . get-bytevector-n) (a50c1 core-prim . get-bytevector-all) (a50c0 core-prim . flush-output-port) (a50bf core-prim . close-port) (a2fc0 core-prim . scheme-report-environment) (a50be core-prim . quotient) (a2fbe core-prim . null-environment) (a50bd core-prim . remainder) (a50bc core-prim . modulo) (a50bb core-prim . inexact->exact) (a50ba core-prim . force) (a50b9 core-prim . exact->inexact) (a50b8 core-prim . make-promise) (a50b7 core-prim . exit) (a4db2 core-prim . command-line) (a50b6 core-prim . string-fill!) (a50b5 core-prim . string-set!) (a50b4 core-prim . set-cdr!) (a50b3 core-prim . set-car!) (a50b2 core-prim . remove) (a50b1 core-prim . remv) (a50b0 core-prim . remp) (a50af core-prim . remq) (a50ae core-prim . partition) (a50ad core-prim . memv) (a50ac core-prim . memq) (a50ab core-prim . memp) (a50aa core-prim . member) (a50a9 core-prim . exists) (a50a8 core-prim . for-all) (a50a7 core-prim . fold-right) (a50a6 core-prim . fold-left) (a50a5 core-prim . find) (a50a4 core-prim . filter) (a50a3 core-prim . cons*) (a50a2 core-prim . assv) (a50a1 core-prim . assq) (a50a0 core-prim . assp) (a509f core-prim . assoc) (a509e core-prim . call-with-string-output-port) (a509d core-prim . call-with-port) (a509c core-prim . call-with-bytevector-output-port) (a509b core-prim . bytevector->string) (a509a core-prim . buffer-mode?) (a5099 core-prim . binary-port?) (a5098 core-prim . with-exception-handler) (a5097 core-prim . raise-continuable) (a5096 core-prim . raise) (a2fc4 core-prim . eval) (a2fbc core-prim . environment) (a5095 core-prim . make-enumeration) (a5094 core-prim . enum-set=?) (a5093 core-prim . enum-set-universe) (a5092 core-prim . enum-set-union) (a5091 core-prim . enum-set-subset?) (a5090 core-prim . enum-set-projection) (a508f core-prim . enum-set-member?) (a508e core-prim . enum-set-intersection) (a508d core-prim . enum-set-indexer) (a508c core-prim . enum-set-difference) (a508b core-prim . enum-set-constructor) (a508a core-prim . enum-set-complement) (a5089 core-prim . enum-set->list) (a4af2 core-prim . who-condition?) (a4a6a core-prim . warning?) (a4aa9 core-prim . violation?) (a4b69 core-prim . undefined-violation?) (a4b50 core-prim . syntax-violation?) (a4b54 core-prim . syntax-violation-subform) (a4b52 core-prim . syntax-violation-form) (a2fe4 core-prim . syntax-violation) (a5088 core-prim . simple-conditions) (a4a7f core-prim . serious-condition?) (a4b09 core-prim . non-continuable-violation?) (a4a53 core-prim . message-condition?) (a4aee core-prim . make-who-condition) (a4a68 core-prim . make-warning) (a4aa7 core-prim . make-violation) (a4b67 core-prim . make-undefined-violation) (a4b4a core-prim . make-syntax-violation) (a4a7d core-prim . make-serious-condition) (a4b07 core-prim . make-non-continuable-violation) (a4a4f core-prim . make-message-condition) (a4b31 core-prim . make-lexical-violation) (a4ad3 core-prim . make-irritants-condition) (a4b1c core-prim . make-implementation-restriction-violation) (a4a92 core-prim . make-error) (a4abc core-prim . make-assertion-violation) (a4b33 core-prim . lexical-violation?) (a4ad7 core-prim . irritants-condition?) (a4b1e core-prim . implementation-restriction-violation?) (a4a94 core-prim . error?) (a4af4 core-prim . condition-who) (a5087 core-prim . condition-predicate) (a4a55 core-prim . condition-message) (a4ad9 core-prim . condition-irritants) (a5086 core-prim . condition-accessor) (a5085 core-prim . condition) (a4abe core-prim . assertion-violation?) (a5084 core-prim . condition?) (a5083 core-prim . utf32->string) (a5082 core-prim . utf16->string) (a5081 core-prim . utf8->string) (a5080 core-prim . uint-list->bytevector) (a507f core-prim . u8-list->bytevector) (a507e core-prim . string->utf8) (a507d core-prim . string->utf32) (a507c core-prim . string->utf16) (a507b core-prim . sint-list->bytevector) (a507a core-prim . native-endianness) (a5079 core-prim . bytevector?) (a5078 core-prim . bytevector=?) (a5077 core-prim . bytevector-uint-set!) (a5076 core-prim . bytevector-uint-ref) (a5075 core-prim . bytevector-u8-set!) (a5074 core-prim . bytevector-u8-ref) (a5073 core-prim . bytevector-u64-set!) (a5072 core-prim . bytevector-u64-ref) (a5071 core-prim . bytevector-u64-native-set!) (a5070 core-prim . bytevector-u64-native-ref) (a506f core-prim . bytevector-u32-set!) (a506e core-prim . bytevector-u32-ref) (a506d core-prim . bytevector-u32-native-set!) (a506c core-prim . bytevector-u32-native-ref) (a506b core-prim . bytevector-u16-set!) (a506a core-prim . bytevector-u16-ref) (a5069 core-prim . bytevector-u16-native-set!) (a5068 core-prim . bytevector-u16-native-ref) (a5067 core-prim . bytevector-sint-set!) (a5066 core-prim . bytevector-sint-ref) (a5065 core-prim . bytevector-s8-set!) (a5064 core-prim . bytevector-s8-ref) (a5063 core-prim . bytevector-s64-set!) (a5062 core-prim . bytevector-s64-ref) (a5061 core-prim . bytevector-s64-native-set!) (a5060 core-prim . bytevector-s64-native-ref) (a505f core-prim . bytevector-s32-set!) (a505e core-prim . bytevector-s32-ref) (a505d core-prim . bytevector-s32-native-set!) (a505c core-prim . bytevector-s32-native-ref) (a505b core-prim . bytevector-s16-set!) (a505a core-prim . bytevector-s16-ref) (a5059 core-prim . bytevector-s16-native-set!) (a5058 core-prim . bytevector-s16-native-ref) (a5057 core-prim . bytevector-length) (a5056 core-prim . bytevector-ieee-single-ref) (a5055 core-prim . bytevector-ieee-single-set!) (a5054 core-prim . bytevector-ieee-single-native-set!) (a5053 core-prim . bytevector-ieee-single-native-ref) (a5052 core-prim . bytevector-ieee-double-set!) (a5051 core-prim . bytevector-ieee-double-ref) (a5050 core-prim . bytevector-ieee-double-native-set!) (a504f core-prim . bytevector-ieee-double-native-ref) (a504e core-prim . bytevector-fill!) (a504d core-prim . bytevector-copy!) (a504c core-prim . bytevector-copy) (a504b core-prim . bytevector->uint-list) (a504a core-prim . bytevector->u8-list) (a5049 core-prim . bytevector->sint-list) (a4ca7 core-prim . no-nans-violation?) (a4c92 core-prim . no-infinities-violation?) (a4ca5 core-prim . make-no-nans-violation) (a4c90 core-prim . make-no-infinities-violation) (a5048 core-prim . real->flonum) (a5047 core-prim . flzero?) (a5046 core-prim . fltruncate) (a5045 core-prim . fltan) (a5044 core-prim . flsqrt) (a5043 core-prim . flsin) (a5042 core-prim . flround) (a5041 core-prim . flpositive?) (a5040 core-prim . flonum?) (a503f core-prim . flodd?) (a503e core-prim . flnumerator) (a503d core-prim . flnegative?) (a503c core-prim . flnan?) (a503b core-prim . flmod0) (a503a core-prim . flmod) (a5039 core-prim . flmin) (a5038 core-prim . flmax) (a5037 core-prim . fllog) (a5036 core-prim . flinteger?) (a5035 core-prim . flinfinite?) (a5034 core-prim . flfloor) (a5033 core-prim . flfinite?) (a5032 core-prim . flexpt) (a5031 core-prim . flexp) (a5030 core-prim . fleven?) (a502f core-prim . fldiv0-and-mod0) (a502e core-prim . fldiv0) (a502d core-prim . fldiv-and-mod) (a502c core-prim . fldiv) (a502b core-prim . fldenominator) (a502a core-prim . flcos) (a5029 core-prim . flceiling) (a5028 core-prim . flatan) (a5027 core-prim . flasin) (a5026 core-prim . flacos) (a5025 core-prim . flabs) (a5024 core-prim . fl>?) (a5023 core-prim . fl>=?) (a5022 core-prim . fl=?) (a5021 core-prim . fl<?) (a5020 core-prim . fl<=?) (a501f core-prim . fl/) (a501e core-prim . fl-) (a501d core-prim . fl+) (a501c core-prim . fl*) (a501b core-prim . fixnum->flonum) (a501a core-prim . fxzero?) (a5019 core-prim . fxxor) (a5018 core-prim . fxrotate-bit-field) (a5017 core-prim . fxreverse-bit-field) (a5016 core-prim . fxpositive?) (a5015 core-prim . fxodd?) (a5014 core-prim . fxnot) (a5013 core-prim . fxnegative?) (a5012 core-prim . fxmod0) (a5011 core-prim . fxmod) (a5010 core-prim . fxmin) (a500f core-prim . fxmax) (a500e core-prim . fxlength) (a500d core-prim . fxior) (a500c core-prim . fxif) (a500b core-prim . fxfirst-bit-set) (a500a core-prim . fxeven?) (a5009 core-prim . fxdiv0-and-mod0) (a5008 core-prim . fxdiv0) (a5007 core-prim . fxdiv-and-mod) (a5006 core-prim . fxdiv) (a5005 core-prim . fxcopy-bit-field) (a5004 core-prim . fxcopy-bit) (a5003 core-prim . fxbit-set?) (a5002 core-prim . fxbit-field) (a5001 core-prim . fxbit-count) (a5000 core-prim . fxarithmetic-shift-right) (a4fff core-prim . fxarithmetic-shift-left) (a4ffe core-prim . fxarithmetic-shift) (a4ffd core-prim . fxand) (a4ffc core-prim . fx>?) (a4ffb core-prim . fx>=?) (a4ffa core-prim . fx=?) (a4ff9 core-prim . fx<?) (a4ff8 core-prim . fx<=?) (a4ff7 core-prim . fx-/carry) (a4ff6 core-prim . fx-) (a4ff5 core-prim . fx+/carry) (a4ff4 core-prim . fx+) (a4ff3 core-prim . fx*/carry) (a4ff2 core-prim . fx*) (a4ff1 core-prim . greatest-fixnum) (a4ff0 core-prim . least-fixnum) (a4fef core-prim . fixnum-width) (a4fee core-prim . fixnum?) (a4fed core-prim . bitwise-rotate-bit-field) (a4fec core-prim . bitwise-reverse-bit-field) (a4feb core-prim . bitwise-length) (a4fea core-prim . bitwise-if) (a4fe9 core-prim . bitwise-first-bit-set) (a4fe8 core-prim . bitwise-copy-bit-field) (a4fe7 core-prim . bitwise-copy-bit) (a4fe6 core-prim . bitwise-bit-set?) (a4fe5 core-prim . bitwise-bit-field) (a4fe4 core-prim . bitwise-bit-count) (a4fe3 core-prim . bitwise-xor) (a4fe2 core-prim . bitwise-ior) (a4fe1 core-prim . bitwise-and) (a4fe0 core-prim . bitwise-not) (a4fdf core-prim . bitwise-arithmetic-shift-right) (a4fde core-prim . bitwise-arithmetic-shift-left) (a4fdd core-prim . bitwise-arithmetic-shift) (a4fdc core-prim . zero?) (a4fdb core-prim . vector?) (a4fda core-prim . vector-set!) (a4fd9 core-prim . vector-ref) (a4fd8 core-prim . vector-map) (a4fd7 core-prim . vector-length) (a4fd6 core-prim . vector-for-each) (a4fd5 core-prim . vector-fill!) (a4fd4 core-prim . vector->list) (a4fd3 core-prim . vector) (a4fd2 core-prim . values) (a4fd1 core-prim . truncate) (a4fd0 core-prim . tan) (a4fcf core-prim . symbol?) (a4fce core-prim . symbol=?) (a4fcd core-prim . symbol->string) (a4fcc core-prim . substring) (a4fcb core-prim . string?) (a4fca core-prim . string>?) (a4fc9 core-prim . string>=?) (a4fc8 core-prim . string=?) (a4fc7 core-prim . string<?) (a4fc6 core-prim . string<=?) (a4fc5 core-prim . string-ref) (a4fc4 core-prim . string-length) (a4fc3 core-prim . string-for-each) (a4fc2 core-prim . string-copy) (a4fc1 core-prim . string-append) (a4fc0 core-prim . string->symbol) (a4fbf core-prim . string->number) (a4fbe core-prim . string->list) (a4fbd core-prim . string) (a4fbc core-prim . sqrt) (a4fbb core-prim . sin) (a4fba core-prim . round) (a4fb9 core-prim . reverse) (a4fb8 core-prim . real?) (a4fb7 core-prim . real-valued?) (a4fb6 core-prim . real-part) (a4fb5 core-prim . rationalize) (a4fb4 core-prim . rational?) (a4fb3 core-prim . rational-valued?) (a4fb2 core-prim . procedure?) (a4fb1 core-prim . positive?) (a4fb0 core-prim . pair?) (a4faf core-prim . odd?) (a4fae core-prim . numerator) (a4fad core-prim . number?) (a4fac core-prim . number->string) (a4fab core-prim . null?) (a4faa core-prim . not) (a4fa9 core-prim . negative?) (a4fa8 core-prim . nan?) (a4fa7 core-prim . min) (a4fa6 core-prim . max) (a4fa5 core-prim . map) (a4fa4 core-prim . make-vector) (a4fa3 core-prim . make-string) (a4fa2 core-prim . make-rectangular) (a4fa1 core-prim . make-polar) (a4fa0 core-prim . magnitude) (a4f9f core-prim . log) (a4f9e core-prim . list?) (a4f9d core-prim . list-tail) (a4f9c core-prim . list-ref) (a4f9b core-prim . list->vector) (a4f9a core-prim . list->string) (a4f99 core-prim . list) (a4f98 core-prim . length) (a4f97 core-prim . lcm) (a4f96 core-prim . integer?) (a4f95 core-prim . integer-valued?) (a4f94 core-prim . integer->char) (a4f93 core-prim . infinite?) (a4f92 core-prim . inexact?) (a4f91 core-prim . inexact) (a4f90 core-prim . imag-part) (a4f8f core-prim . gcd) (a4f8e core-prim . for-each) (a4f8d core-prim . floor) (a4f8c core-prim . finite?) (a4f8b core-prim . expt) (a4f8a core-prim . exp) (a4f89 core-prim . exact?) (a4f88 core-prim . exact-integer-sqrt) (a4f87 core-prim . exact) (a4f86 core-prim . even?) (a4f85 core-prim . error) (a4f84 core-prim . eqv?) (a4f83 core-prim . equal?) (a4f82 core-prim . eq?) (a4f81 core-prim . dynamic-wind) (a4f80 core-prim . div0-and-mod0) (a4f7f core-prim . mod0) (a4f7e core-prim . div0) (a4f7d core-prim . div-and-mod) (a4f7c core-prim . mod) (a4f7b core-prim . div) (a4f7a core-prim . denominator) (a4f79 core-prim . cos) (a4f78 core-prim . cons) (a4f77 core-prim . complex?) (a4f76 core-prim . char?) (a4f75 core-prim . char>?) (a4f74 core-prim . char>=?) (a4f73 core-prim . char=?) (a4f72 core-prim . char<?) (a4f71 core-prim . char<=?) (a4f70 core-prim . char->integer) (a4f6f core-prim . ceiling) (a4f6e core-prim . call-with-values) (a4f6d core-prim . call/cc) (a4f6c core-prim . call-with-current-continuation) (a4f6b core-prim . cddddr) (a4f6a core-prim . cdddar) (a4f69 core-prim . cddadr) (a4f68 core-prim . cddaar) (a4f67 core-prim . cdaddr) (a4f66 core-prim . cdadar) (a4f65 core-prim . cdaadr) (a4f64 core-prim . cdaaar) (a4f63 core-prim . cadddr) (a4f62 core-prim . caddar) (a4f61 core-prim . cadadr) (a4f60 core-prim . cadaar) (a4f5f core-prim . caaddr) (a4f5e core-prim . caadar) (a4f5d core-prim . caaadr) (a4f5c core-prim . caaaar) (a4f5b core-prim . cdddr) (a4f5a core-prim . cddar) (a4f59 core-prim . cdadr) (a4f58 core-prim . cdaar) (a4f57 core-prim . caddr) (a4f56 core-prim . cadar) (a4f55 core-prim . caadr) (a4f54 core-prim . caaar) (a4f53 core-prim . cddr) (a4f52 core-prim . cdar) (a4f51 core-prim . cadr) (a4f50 core-prim . caar) (a4f4f core-prim . cdr) (a4f4e core-prim . car) (a4f4d core-prim . boolean?) (a4f4c core-prim . boolean=?) (a4f4b core-prim . atan) (a4f4a core-prim . assertion-violation) (a2fde core-prim . assertion-error) (a4f49 core-prim . asin) (a4f48 core-prim . apply) (a4f47 core-prim . append) (a4f46 core-prim . angle) (a4f45 core-prim . acos) (a4f44 core-prim . abs) (a4f43 core-prim . /) (a4f42 core-prim . *) (a4f41 core-prim . -) (a4f40 core-prim . +) (a4f3f core-prim . >=) (a4f3e core-prim . >) (a4f3d core-prim . =) (a4f3c core-prim . <=) (a4f3b core-prim . <) (a4f3a core-prim . library) (a4f39 $core-rtd &no-nans-rtd &no-nans-rcd) (a4f38 $core-rtd &no-infinities-rtd &no-infinities-rcd) (a4f37 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (a4f36 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (a4f35 $core-rtd &i/o-port-rtd &i/o-port-rcd) (a4f34 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (a4f33 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (a4f32 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (a4f31 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (a4f30 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (a4f2f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (a4f2e $core-rtd &i/o-write-rtd &i/o-write-rcd) (a4f2d $core-rtd &i/o-read-rtd &i/o-read-rcd) (a4f2c $core-rtd &i/o-rtd &i/o-rcd) (a4f2b $core-rtd &undefined-rtd &undefined-rcd) (a4f2a $core-rtd &syntax-rtd &syntax-rcd) (a4f29 $core-rtd &lexical-rtd &lexical-rcd) (a4f28 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (a4f27 $core-rtd &non-continuable-rtd &non-continuable-rcd) (a4f26 $core-rtd &who-rtd &who-rcd) (a4f25 $core-rtd &irritants-rtd &irritants-rcd) (a4f24 $core-rtd &assertion-rtd &assertion-rcd) (a4f23 $core-rtd &violation-rtd &violation-rcd) (a4f22 $core-rtd &error-rtd &error-rcd) (a4f21 $core-rtd &serious-rtd &serious-rcd) (a4f20 $core-rtd &warning-rtd &warning-rcd) (a4f1f $core-rtd &message-rtd &message-rcd) (a4f1e $core-rtd &condition-rtd &condition-rcd) (a4f1d macro . define-condition-type) (a4f1c macro . define-enumeration) (a4f1b macro . define-record-type) (a4f1a macro . parent-rtd) (a4f19 macro . nongenerative) (a4f18 macro . opaque) (a4f17 macro . sealed) (a4f16 macro . protocol) (a4f15 macro . parent) (a4f14 macro . immutable) (a4f13 macro . mutable) (a4f12 macro . fields) (a4f11 macro . error-handling-mode) (a4f10 macro . file-options) (a4f0f macro . buffer-mode) (a4f0e macro . eol-style) (a4f0d macro . guard) (a4f0c macro . trace-define) (a4f0b macro . trace-lambda) (a4f0a macro . unsyntax-splicing) (a4f09 macro . unsyntax) (a4f08 macro . unquote-splicing) (a4f07 macro . unquote) (a4f06 macro . _) (a4f05 macro . else) (a4f04 macro . =>) (a4f03 macro . ...) (a4f02 macro . assert) (a4f01 macro . endianness) (a4f00 macro . delay) (a4eff macro . time) (a4efe macro . do) (a4efd macro . cond) (a4efc macro . let*) (a4efb macro . let) (a4efa macro . let*-values) (a4ef9 macro . let-values) (a4ef8 macro . identifier-syntax) (a4ef7 macro . with-syntax) (a4ef6 macro . quasisyntax) (a4ef5 macro . quasiquote) (a4ef4 macro . syntax-rules) (a4ef3 macro . include) (a4ef2 macro . define-struct) (a4ef1 core-macro . record-constructor-descriptor) (a4ef0 core-macro . record-type-descriptor) (a4eef macro . case) (a4eee macro . parameterize) (a4eed macro . unless) (a4eec macro . when) (a4eeb core-macro . or) (a4eea core-macro . and) (a4ee9 core-macro . if) (a4ee8 core-macro . letrec*) (a4ee7 core-macro . letrec) (a4ee6 core-macro . type-descriptor) (a4ee5 core-macro . case-lambda) (a4ee4 core-macro . lambda) (a4ee3 core-macro . syntax) (a4ee2 core-macro . syntax-case) (a4ee1 core-macro . quote) (a4ee0 core-macro . foreign-call) (a4edf letrec-syntax) (a4ede let-syntax) (a4edd set!) (a4edc import) (a4edb begin) (a4eda module) (a4ed9 define-syntax) (a4ed8 define)) values values '#f '#f '#f '#f) (a2b13@a29b2@install-library 'a520d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . a51ec) (eval-core . a51eb) (set-symbol-value! . a51ea) (symbol-value . a51e9) (gensym . a51e8) (void . a51e7)) '() values values '#f '#f '#f '#f) (a2b13@a29b2@install-library 'a520e '(mosh) '() '() '() '() '((set-symbol-value! . a51ea) (symbol-value . a51e9) (regexp? . a51e5) (read-line . a51e4) (ungensym . a51e3) (alist->eq-hash-table . a51e2) (assoc-ref . a51e1) (print . a51e0) (format . a51df) (host-os . a51de) (library-path . a2991) (standard-library-path . a51dd) (file-newer? . a51dc) (stat-mtime . a51db) (digit->integer . a51d7) (call-with-string-input-port . a51d6) (call-with-string-io . a51d5) (string-split . a51d4) (bytevector-for-each . a51d3) (string->regexp . a51d2) (rxmatch . a51d1) (regexp-replace-all . a51d0) (hashtable-for-each . a51cf) (set-current-directory! . a51ca) (expand-path . a51c9) (current-directory . a51c8) (p . a5194) (get-timeofday . a5181) (get-command-line . a5180) (sys-display . a517f) (whereis . a517e) (register . a517d) (vm-join! . a517c) (vm-set-value! . a517b) (vm? . a517a) (main-vm? . a5179) (vm-eval . a5178) (vm-self . a5177) (vm-start! . a5176) (make-vm . a5175) (mutex-try-lock! . a5174) (mutex-unlock! . a5173) (mutex-lock! . a5172) (mutex? . a5171) (make-mutex . a5170) (condition-variable-notify-all! . a516f) (condition-variable-notify! . a516e) (condition-variable-wait! . a516d) (make-condition-variable . a516c) (mosh-executable-path . a516b) (make-file-options . a516a) (source-info . a5169) (make-compiler-instruction . a5168) (make-instruction . a5167) (set-source-info! . a5166) (bignum? . a5165) (fast-equal? . a5164) (fasl-read . a5163) (fasl-write . a5162) (time-usage . a5161) (os-constant . a5160) (time . a4eff) (include . a4ef3)) '() values values '#f '#f '#f '#f) (a2b13@a29b2@install-library 'a520f '(system) '() '() '() '() '((write-to-file . a51da) (file->list . a51d9) (file->string . a51d8) (call-process . a51ce) (local-tz-offset . a51cd) (microseconds . a51cc) (directory-list . a51cb) (expand-path . a51c9) (%spawn . a51c7) (%waitpid . a51c6) (pointer-ref-c-int64 . a51c5) (pointer-ref-c-int32 . a51c4) (pointer-ref-c-int16 . a51c3) (pointer-ref-c-int8 . a51c2) (pointer-ref-c-uint64 . a51c1) (pointer-ref-c-uint32 . a51c0) (pointer-ref-c-uint16 . a51bf) (pointer-ref-c-uint8 . a51be) (pointer-set-c-int64! . a51bd) (pointer-set-c-int32! . a51bc) (pointer-set-c-int16! . a51bb) (pointer-set-c-int8! . a51ba) (pointer-set-c-pointer! . a51b9) (pointer-set-c-double! . a51b8) (pointer-set-c-float! . a51b7) (pointer-set-c-long-long! . a51b6) (pointer-set-c-long! . a51b5) (pointer-set-c-int! . a51b4) (pointer-set-c-short! . a51b3) (pointer-set-c-char! . a51b2) (pointer-ref-c-pointer . a51b1) (pointer-ref-c-double . a51b0) (pointer-ref-c-float . a51af) (pointer-ref-c-unsigned-long-long . a51ae) (pointer-ref-c-signed-long-long . a51ad) (pointer-ref-c-unsigned-long . a51ac) (pointer-ref-c-signed-long . a51ab) (pointer-ref-c-unsigned-int . a51aa) (pointer-ref-c-signed-int . a51a9) (pointer-ref-c-unsigned-short . a51a8) (pointer-ref-c-signed-short . a51a7) (pointer-ref-c-unsigned-char . a51a6) (pointer-ref-c-signed-char . a51a5) (pointer->integer . a51a4) (integer->pointer . a51a3) (pointer? . a51a2) (shared-errno . a51a1) (%ffi-supported? . a51a0) (%ffi-pointer->string . a519f) (%ffi-call->string-or-zero . a519e) (%ffi-call->double . a519d) (%ffi-call->void* . a519c) (%ffi-call->void . a519b) (%ffi-call->char . a519a) (%ffi-call->int . a5199) (%ffi-lookup . a5198) (%ffi-open . a5197) (%fork . a5196) (%pipe . a5195) (open-output-string . a5193) (get-output-string . a5192) (file-stat-ctime . a5191) (file-stat-atime . a5190) (file-stat-mtime . a518f) (file-size-in-bytes . a518e) (file-writable? . a518d) (file-executable? . a518c) (file-readable? . a518b) (file-regular? . a518a) (file-symbolic-link? . a5189) (file-directory? . a5188) (create-symbolic-link . a5187) (rename-file . a5186) (delete-directory . a5185) (create-directory . a5184) (get-environment-variables . a5183) (get-environment-variable . a5182) (make-parameter . a27c4) (socket-port . a515f) (socket-shutdown . a515e) (socket-close . a515d) (socket-send . a515c) (socket-recv! . a515b) (socket-recv . a515a) (make-server-socket . a5159) (make-client-socket . a5158) (socket-accept . a5157) (socket? . a5156) (parameterize . a4eee)) '() values values '#f '#f '#f '#f))
((lambda (a4da1@add-library-path! a4da3@parse-and-add-library-path a4da5@for-each-with-index a4da7@rpad a4da9@condition-printer a4dab@record->field-alist a4dad@map-with-index a4daf@repl a4db1@trace-printer a4db3@command-line a4db5@local-library-path a4db7@load/args a4db9@load a4dbb@ironscheme-build a4dbd@eval-top-level a4dbf@compile-system-libraries a4dc1@compile a4dc3@compile->closure a4dc5@pre-compile-r6rs-file a4dc7@load-r6rs-top-level a4dc9@load-r6rs-top-level-sexp) (begin (set! a4da1@add-library-path! (lambda (a4dec@path) (a2b03@a2992@library-path (append (a2b03@a2992@library-path) (list a4dec@path))))) (set! a4da3@parse-and-add-library-path (lambda (a4dee@paths a4def@message) ((lambda (a4df2@t) (if a4df2@t ((lambda (a4df4@paths) (for-each (lambda (a4df6@path) (if (file-exists? a4df6@path) (a4da1@add-library-path! (expand-path a4df6@path)) (format (current-error-port) a4def@message a4df6@path))) (string-split a4df4@paths '#\:))) a4df2@t) (void))) a4dee@paths))) (set! a4da5@for-each-with-index (lambda (a4df8@proc a4df9@lst) (letrec ((a4dfc@loop (lambda (a4dfe@i a4dff@lst) (if (null? a4dff@lst) (if '#f '#f (void)) (begin (a4df8@proc a4dfe@i (car a4dff@lst)) (a4dfc@loop (+ a4dfe@i '1) (cdr a4dff@lst))))))) (a4dfc@loop '1 a4df9@lst)))) (set! a4da7@rpad (lambda (a4e02@str a4e03@pad a4e04@n) ((lambda (a4e08@rest) ((letrec ((a4e0a@loop (lambda (a4e0c@rest a4e0d@ret) (if (<= a4e0c@rest '0) a4e0d@ret (a4e0a@loop (- a4e0c@rest '1) (string-append a4e0d@ret a4e03@pad)))))) a4e0a@loop) a4e08@rest (format '"~a" a4e02@str))) (- a4e04@n (string-length (format '"~a" a4e02@str)))))) (set! a4da9@condition-printer (lambda (a4e10@e a4e11@port) ((lambda (a4e15@max-condition-len) (begin (set! a4e15@max-condition-len (apply max (map (lambda (a4e26@c) (string-length (symbol->string (record-type-name (record-rtd a4e26@c))))) (simple-conditions a4e10@e)))) (begin (display '" Condition components:\n" a4e11@port) (a4da5@for-each-with-index (lambda (a4e16@i a4e17@x) ((lambda (a4e1a@rtd a4e1b@fields-alist) (begin (format a4e11@port '" ~d. ~a" a4e16@i (a4da7@rpad (symbol->string (record-type-name a4e1a@rtd)) '" " a4e15@max-condition-len)) (if (null? a4e1b@fields-alist) (newline a4e11@port) (void)) ((letrec ((a4e1e@loop (lambda (a4e20@first a4e21@fields-alist) (if (null? a4e21@fields-alist) '() ((lambda (a4e24@field) (begin (if (not a4e20@first) (display (a4da7@rpad '"" '" " (+ '4 a4e15@max-condition-len)) a4e11@port) (void)) (display '"       " a4e11@port) (display (car a4e24@field) a4e11@port) (display '": " a4e11@port) (write (cdr a4e24@field) a4e11@port) (newline a4e11@port) (a4e1e@loop '#f (cdr a4e21@fields-alist)))) (car a4e21@fields-alist)))))) a4e1e@loop) '#t a4e1b@fields-alist))) (record-rtd a4e17@x) (a4dab@record->field-alist a4e17@x))) (simple-conditions a4e10@e))))) '#f))) (set! a4dab@record->field-alist (lambda (a4e28@r) ((lambda (a4e2b@ref) (begin (set! a4e2b@ref (lambda (a4e36@rtd a4e37@i a4e38@x) ((lambda (a4e3c@val) (if (symbol? a4e3c@val) (ungensym a4e3c@val) a4e3c@val)) ((record-accessor a4e36@rtd a4e37@i) a4e38@x)))) ((letrec ((a4e2c@loop (lambda (a4e2e@ret a4e2f@rtd) (if a4e2f@rtd (a4e2c@loop (append a4e2e@ret (a4dad@map-with-index (lambda (a4e32@i a4e33@field) (cons a4e33@field (a4e2b@ref a4e2f@rtd a4e32@i a4e28@r))) (vector->list (record-type-field-names a4e2f@rtd)))) (record-type-parent a4e2f@rtd)) a4e2e@ret)))) a4e2c@loop) '() (record-rtd a4e28@r)))) '#f))) (set! a4dad@map-with-index (lambda (a4e3e@proc a4e3f@lst) ((letrec ((a4e42@loop (lambda (a4e44@i a4e45@lst a4e46@ret) (if (null? a4e45@lst) (reverse a4e46@ret) (a4e42@loop (+ a4e44@i '1) (cdr a4e45@lst) (cons (a4e3e@proc a4e44@i (car a4e45@lst)) a4e46@ret)))))) a4e42@loop) '0 a4e3f@lst '()))) (set! a4daf@repl (lambda a4e4a@x ((lambda (a4e4d@rec) (begin (set! a4e4d@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (a4e50@a4e4e) (lambda () (with-exception-handler (lambda (a4e52@e) ((call/cc (lambda (a4e54@a4e4f) (a4e50@a4e4e (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? a4e52@e) (a4da9@condition-printer a4e52@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" a4e52@e))) (a4e54@a4e4f (lambda () (raise-continuable a4e52@e)))))))))) (lambda () ((letrec ((a4e56@loop (lambda (a4e58@line a4e59@accum) ((lambda (a4e5d@parentheses-ok? a4e5f@eval-string-print) (begin (set! a4e5d@parentheses-ok? (lambda (a4e64@text) ((letrec ((a4e66@loop (lambda (a4e68@chars a4e69@p0 a4e6a@p1) (if (null? a4e68@chars) (= '0 a4e69@p0 a4e6a@p1) ((lambda (a4e6e@t) (if (memv a4e6e@t '(#\()) (a4e66@loop (cdr a4e68@chars) (+ a4e69@p0 '1) a4e6a@p1) (if (memv a4e6e@t '(#\))) (a4e66@loop (cdr a4e68@chars) (- a4e69@p0 '1) a4e6a@p1) (if (memv a4e6e@t '(#\[)) (a4e66@loop (cdr a4e68@chars) a4e69@p0 (+ a4e6a@p1 '1)) (if (memv a4e6e@t '(#\])) (a4e66@loop (cdr a4e68@chars) a4e69@p0 (- a4e6a@p1 '1)) (a4e66@loop (cdr a4e68@chars) a4e69@p0 a4e6a@p1)))))) (car a4e68@chars)))))) a4e66@loop) (string->list a4e64@text) '0 '0))) (set! a4e5f@eval-string-print (lambda (a4e62@text) (if (not (or (string=? '"\n" a4e62@text) (= '0 (string-length a4e62@text)))) (write (a4dbd@eval-top-level (call-with-port (open-string-input-port a4e62@text) read))) (void)))) (if (eof-object? a4e58@line) (begin (a4e5f@eval-string-print a4e59@accum) (exit)) ((lambda (a4e60@current) (if (a4e5d@parentheses-ok? a4e60@current) (a4e5f@eval-string-print a4e60@current) (a4e56@loop (get-line (current-input-port)) a4e60@current))) (string-append a4e59@accum a4e58@line))))) '#f '#f)))) a4e56@loop) (get-line (current-input-port)) '""))))))) (newline) (a4e4d@rec)))) (a4e4d@rec))) '#f))) (set! a4db1@trace-printer (a289b@a27c5@make-parameter write)) (set! a4db3@command-line (a289b@a27c5@make-parameter (get-command-line))) (set! a4db5@local-library-path (lambda (a4e70@filename) (a2b03@a2992@library-path))) (set! a4db7@load/args (lambda (a4e72@filename . a4e74@args) (begin (apply a4dc7@load-r6rs-top-level a4e72@filename 'load a4e74@args) (void)))) (set! a4db9@load (lambda (a4e76@filename) (begin (apply a4dc7@load-r6rs-top-level a4e76@filename 'load (a4db3@command-line)) (void)))) (set! a4dbb@ironscheme-build (lambda () (a4db9@load '"ironscheme-buildscript.ss"))) (set! a4dbd@eval-top-level (lambda (a4e78@x) (a49cd@a2fc5@eval a4e78@x (a49e3@a2ff1@interaction-environment)))) (set! a4dbf@compile-system-libraries (lambda () (a4dbd@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! a4dc1@compile (lambda (a4e7a@filename) (a4dc7@load-r6rs-top-level a4e7a@filename 'compile))) (set! a4dc3@compile->closure (lambda (a4e7c@filename) (a4dc7@load-r6rs-top-level a4e7c@filename 'closure))) (set! a4dc5@pre-compile-r6rs-file (lambda (a4e7e@filename) (a4dc7@load-r6rs-top-level a4e7e@filename 'compile))) (set! a4dc7@load-r6rs-top-level (lambda (a4e80@filename a4e81@how . a4e84@args) ((lambda (a4e8a@a4e87 a4e8b@a4e89) ((lambda (a4e8e@swap) (dynamic-wind a4e8e@swap (lambda () ((lambda (a4e90@x*) ((lambda (a4e92@t) (if (memv a4e92@t '(closure)) (a49e2@a2fef@pre-compile-r6rs-top-level a4e90@x*) (if (memv a4e92@t '(load)) ((lambda (a4e98@a4e95 a4e99@a4e97) ((lambda (a4e9c@swap) (dynamic-wind a4e9c@swap (lambda () ((a49e1@a2fed@compile-r6rs-top-level a4e90@x*))) a4e9c@swap)) (lambda () ((lambda (a4e9e@t) (begin (a4e98@a4e95 a4e99@a4e97) (set! a4e99@a4e97 a4e9e@t))) (a4e98@a4e95))))) a4db3@command-line (cons a4e80@filename (car a4e84@args))) (if (memv a4e92@t '(compile)) (begin (a49e1@a2fed@compile-r6rs-top-level a4e90@x*) (a2b07@a299a@serialize-all a2896@a27bb@serialize-library a28f0@a28a9@compile-core-expr)) (if '#f '#f (void)))))) a4e81@how)) (with-input-from-file a4e80@filename (lambda () ((letrec ((a4ea0@f (lambda () ((lambda (a4ea2@x) (if (eof-object? a4ea2@x) '() (cons a4ea2@x (a4ea0@f)))) (a288e@a27ab@read-annotated))))) a4ea0@f)))))) a4e8e@swap)) (lambda () ((lambda (a4ea4@t) (begin (a4e8a@a4e87 a4e8b@a4e89) (set! a4e8b@a4e89 a4ea4@t))) (a4e8a@a4e87))))) a2b03@a2992@library-path (a4db5@local-library-path a4e80@filename)))) (set! a4dc9@load-r6rs-top-level-sexp (lambda (a4ea6@import-spec a4ea7@thunk) ((lambda (a4eae@a4eab a4eaf@a4ead) ((lambda (a4eb2@swap) (dynamic-wind a4eb2@swap (lambda () ((lambda (a4eb8@a4eb5 a4eb9@a4eb7) ((lambda (a4ebc@swap) (dynamic-wind a4ebc@swap (lambda () ((a49e1@a2fed@compile-r6rs-top-level (list (cons 'import a4ea6@import-spec) (list a4ea7@thunk))))) a4ebc@swap)) (lambda () ((lambda (a4ebe@t) (begin (a4eb8@a4eb5 a4eb9@a4eb7) (set! a4eb9@a4eb7 a4ebe@t))) (a4eb8@a4eb5))))) a4db3@command-line '())) a4eb2@swap)) (lambda () ((lambda (a4ec0@t) (begin (a4eae@a4eab a4eaf@a4ead) (set! a4eaf@a4ead a4ec0@t))) (a4eae@a4eab))))) a2b03@a2992@library-path (a4db5@local-library-path '"")))) (begin (set! a4ed6@a4dc9@load-r6rs-top-level-sexp a4dc9@load-r6rs-top-level-sexp) (set! a4ed5@a4dc7@load-r6rs-top-level a4dc7@load-r6rs-top-level) (set! a4ed4@a4dc5@pre-compile-r6rs-file a4dc5@pre-compile-r6rs-file) (set! a4ed3@a4dc3@compile->closure a4dc3@compile->closure) (set! a4ed2@a4dc1@compile a4dc1@compile) (set! a4ed1@a4dbf@compile-system-libraries a4dbf@compile-system-libraries) (set! a4ed0@a4dbd@eval-top-level a4dbd@eval-top-level) (set! a4ecf@a4dbb@ironscheme-build a4dbb@ironscheme-build) (set! a4ece@a4db9@load a4db9@load) (set! a4ecd@a4db7@load/args a4db7@load/args) (set! a4ecc@a4db5@local-library-path a4db5@local-library-path) (set! a4ecb@a4db3@command-line a4db3@command-line) (set! a4eca@a4db1@trace-printer a4db1@trace-printer) (set! a4ec9@a4daf@repl a4daf@repl) (set! a4ec8@a4dad@map-with-index a4dad@map-with-index) (set! a4ec7@a4dab@record->field-alist a4dab@record->field-alist) (set! a4ec6@a4da9@condition-printer a4da9@condition-printer) (set! a4ec5@a4da7@rpad a4da7@rpad) (set! a4ec4@a4da5@for-each-with-index a4da5@for-each-with-index) (set! a4ec3@a4da3@parse-and-add-library-path a4da3@parse-and-add-library-path) (set! a4ec2@a4da1@add-library-path! a4da1@add-library-path!) (a2b08@a299c@current-precompiled-library-loader a2897@a27bd@load-serialized-library) (set-symbol-value! 'load a4db9@load) (set-symbol-value! 'pre-compile-r6rs-file a4dc5@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs a4dbd@eval-top-level) (set-symbol-value! 'int-env-syms a49c4@a2fb3@interaction-environment-symbols) (set-symbol-value! 'expanded2core a28ef@a28a7@expanded->core) (set-symbol-value! 'trace-printer a4db1@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (a4dca@c) (condition (a4cfe@a4b08@make-non-continuable-violation) (a4cf4@a4aef@make-who-condition 'raise) (a4cb8@a4a50@make-message-condition '"returned from non-continuable exception") (a4cea@a4ad4@make-irritants-condition (list a4dca@c))))) (a4da3@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (a4da3@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (a4da1@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (a4da1@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (a4da1@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (a4dcc@prefix) (a2b04@a2994@library-extensions (a4dcc@prefix '".mosh" (a2b04@a2994@library-extensions)))) (lambda (a4dce@ext a4dcf@ls) (append (map (lambda (a4dd2@x) (string-append a4dce@ext a4dd2@x)) a4dcf@ls) a4dcf@ls))) ((lambda (a4dd4@args a4dd5@port) ((lambda (a4dd9@ref) (begin (set! a4dd9@ref (lambda (a4de4@rtd a4de5@i a4de6@x) ((lambda (a4dea@val) (if (symbol? a4dea@val) (ungensym a4dea@val) a4dea@val)) ((record-accessor a4de4@rtd a4de5@i) a4de6@x)))) (with-exception-handler (lambda (a4dda@c) (if (condition? a4dda@c) (a4da9@condition-printer a4dda@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" a4dda@c))) (lambda () (if ((call/cc (lambda (a4dde@a4ddc) (lambda () (with-exception-handler (lambda (a4de0@c) ((call/cc (lambda (a4de2@a4ddd) (a4dde@a4ddc (lambda () (if '#t '#f (a4de2@a4ddd (lambda () (raise-continuable a4de0@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (a4dc9@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? a4dd4@args) (a4daf@repl) (a4dc7@load-r6rs-top-level (car a4dd4@args) 'load (cdr a4dd4@args)))))))) '#f)) (a4db3@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
