;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (q2866@library-file-path->cache-path q2868@read-annotated q286a@annotation-stripped q286c@annotation? q286e@annotation-source q2870@annotation-expression q2872@scm->fasl q2874@fasl-save q2876@fasl-load q2878@serialize-library q287a@load-serialized-library q287c@make-record-printer q287e@compile-core q2880@read-library-source-file q2882@make-parameter q2884@mosh-cache-dir q291a@file-options-spec) (begin (set! q2866@library-file-path->cache-path (lambda (q291b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q2921@q291e q2922@q2920) ((lambda (q2925@extract q2926@p) ((lambda (q292a@display-hex) (begin (set! q292a@display-hex (lambda (q2933@n) (if (<= '0 q2933@n '9) (display q2933@n q2926@p) (display (integer->char (+ (char->integer '#\a) (- q2933@n '10))) q2926@p)))) (begin ((letrec ((q292b@f (lambda (q292d@ls) (if (not (null? q292d@ls)) (begin (display '"_" q2926@p) (for-each (lambda (q292f@c) (if (or (char<=? '#\a q292f@c '#\z) (char<=? '#\A q292f@c '#\Z) (char<=? '#\0 q292f@c '#\9) (memv q292f@c '(#\- #\. #\_ #\~))) (display q292f@c q2926@p) (begin (display '"%" q2926@p) ((lambda (q2931@n) (begin (q292a@display-hex (quotient q2931@n '16)) (q292a@display-hex (remainder q2931@n '16)))) (char->integer q292f@c))))) (string->list (car q292d@ls))) (q292b@f (cdr q292d@ls))) (void))))) q292b@f) (string-split q291b@x '#\/)) (q2925@extract)))) '#f)) q2922@q2920 q2921@q291e))))) (set! q2868@read-annotated read) (set! q286a@annotation-stripped (lambda (q2935@x) (q2870@annotation-expression q2935@x))) (set! q286c@annotation? (lambda (q2937@x) (source-info q2937@x))) (set! q286e@annotation-source (lambda (q2939@x) (source-info q2939@x))) (set! q2870@annotation-expression (lambda (q293b@x) (if (pair? q293b@x) (cons (car q293b@x) (cdr q293b@x)) (display '"line:46\n")))) (set! q2872@scm->fasl (lambda (q293d@filename) (string-append (q2884@mosh-cache-dir) '"/" (q2866@library-file-path->cache-path q293d@filename) '".mosh-fasl"))) (set! q2874@fasl-save (lambda (q293f@filename q2940@obj) (call-with-port (open-file-output-port q293f@filename) (lambda (q2943@port) ((symbol-value 'fasl-write!) q2940@obj q2943@port))))) (set! q2876@fasl-load (lambda (q2945@filename) (call-with-port (open-file-input-port q2945@filename) (symbol-value 'fasl-read!)))) (set! q2878@serialize-library (lambda (q2947@filename q2948@obj) (begin ((lambda (q294b@expanded2core) ((lambda (q294d@compile) ((lambda (q294f@code) ((lambda (q2951@pivot) ((lambda (q2953@visit) ((lambda () (begin (set-car! q2951@pivot q2953@visit) ((lambda (q2955@pivot) ((lambda (q2957@invoke) ((lambda () (set-car! q2955@pivot q2957@invoke)))) (q294d@compile (q294b@expanded2core (car q2955@pivot))))) (cdr q2951@pivot)))))) (q294d@compile (q294b@expanded2core (car q2951@pivot))))) (cddddr (cddddr q294f@code)))) q2948@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (q2959@fasl-file) (begin (if (file-exists? q2959@fasl-file) (delete-file q2959@fasl-file) (void)) ((call/cc (lambda (q295d@q295b) (lambda () (with-exception-handler (lambda (q295f@c) ((call/cc (lambda (q2961@q295c) (q295d@q295b (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " q2947@filename) (if (file-exists? q2959@fasl-file) (delete-file q2959@fasl-file) (void)) '#f) (q2961@q295c (lambda () (raise-continuable q295f@c)))))))))) (lambda () (q2874@fasl-save q2959@fasl-file q2948@obj))))))))) (q2872@scm->fasl q2947@filename))))) (set! q287a@load-serialized-library (lambda (q2963@filename q2964@obj) (and (q2884@mosh-cache-dir) ((lambda (q2967@fasl-file) (if (and (file-exists? q2967@fasl-file) ((symbol-value 'file-newer?) q2967@fasl-file q2963@filename)) ((lambda (q2969@expanded2core) ((lambda (q296b@eval-compiled-core) ((lambda (q296d@code) ((lambda (q296f@pivot) ((lambda (q2971@visit) ((lambda (q2973@visit-proc) ((lambda () (begin (set-car! q296f@pivot q2973@visit-proc) ((lambda (q2975@pivot) ((lambda (q2977@invoke) ((lambda () (begin (set-car! q2975@pivot (lambda () (q296b@eval-compiled-core q2977@invoke))) (apply q2964@obj q296d@code))))) (car q2975@pivot))) (cdr q296f@pivot)))))) (lambda () (q296b@eval-compiled-core q2971@visit)))) (car q296f@pivot))) (cddddr (cddddr q296d@code)))) (q2876@fasl-load q2967@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (q2872@scm->fasl q2963@filename))))) (set! q287c@make-record-printer (lambda (q2979@name q297a@printer) (lambda q297d@x (begin (display '"record printer") (for-each display q297d@x))))) (set! q287e@compile-core (lambda q297f@x (apply error 'comile-core '"not implementated" q297f@x))) (set! q2880@read-library-source-file (lambda (q2981@file-name) (with-input-from-file q2981@file-name q2868@read-annotated))) (set! q2882@make-parameter (lambda q2991 ((lambda (q2992) (if (= q2992 '1) (apply (lambda (q2983@x) (q2882@make-parameter q2983@x (lambda (q2985@x) q2985@x))) q2991) (if (= q2992 '2) (apply (lambda (q2987@x q2988@fender) ((lambda (q298b@x) (lambda q298f ((lambda (q2990) (if (= q2990 '0) (apply (lambda () q298b@x) q298f) (if (= q2990 '1) (apply (lambda (q298d@v) (set! q298b@x (q2988@fender q298d@v))) q298f) (error 'apply '"invalid arg count")))) (length q298f)))) (q2988@fender q2987@x))) q2991) (error 'apply '"invalid arg count")))) (length q2991)))) (set! q2884@mosh-cache-dir (q2882@make-parameter '#f)) (set! q291a@file-options-spec (lambda (q2993@x) q2993@x)) (begin (set! q29a5@q291a@file-options-spec q291a@file-options-spec) (set! q29a4@q2884@mosh-cache-dir q2884@mosh-cache-dir) (set! q29a3@q2882@make-parameter q2882@make-parameter) (set! q29a2@q2880@read-library-source-file q2880@read-library-source-file) (set! q29a1@q287e@compile-core q287e@compile-core) (set! q29a0@q287c@make-record-printer q287c@make-record-printer) (set! q299f@q287a@load-serialized-library q287a@load-serialized-library) (set! q299e@q2878@serialize-library q2878@serialize-library) (set! q299d@q2876@fasl-load q2876@fasl-load) (set! q299c@q2874@fasl-save q2874@fasl-save) (set! q299b@q2872@scm->fasl q2872@scm->fasl) (set! q299a@q2870@annotation-expression q2870@annotation-expression) (set! q2999@q286e@annotation-source q286e@annotation-source) (set! q2998@q286c@annotation? q286c@annotation?) (set! q2997@q286a@annotation-stripped q286a@annotation-stripped) (set! q2996@q2868@read-annotated q2868@read-annotated) (set! q2995@q2866@library-file-path->cache-path q2866@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q29ab@current-primitive-locations q29ad@mutable? q29af@rewriter q29b1@expanded->core q29b3@compile-core-expr q29b5@pretty-print q29b7@compile-core-expr-to-port) (begin (set! q29ab@current-primitive-locations (q29a3@q2882@make-parameter (lambda (q29b8@x) '#f) (lambda (q29ba@p) q29ba@p))) (set! q29ad@mutable? (lambda (q29bc@x) (or (pair? q29bc@x) (vector? q29bc@x) (hashtable? q29bc@x)))) (set! q29af@rewriter (lambda (q29be@quote-hack?) ((lambda (q29c1@f) (begin (set! q29c1@f (lambda (q29c2@x) (if (pair? q29c2@x) ((lambda (q29c4@t) (if (memv q29c4@t '(quote)) (if (and q29be@quote-hack? (q29ad@mutable? (cadr q29c2@x))) ((lambda (q29c6@g) (begin (set-symbol-value! q29c6@g (cadr q29c2@x)) q29c6@g)) (gensym)) q29c2@x) (if (memv q29c4@t '(case-lambda)) (cons 'case-lambda (map (lambda (q29c8@x) (cons (car q29c8@x) (map q29c1@f (cdr q29c8@x)))) (cdr q29c2@x))) (if (memv q29c4@t '(lambda)) (cons* 'lambda (cadr q29c2@x) (map q29c1@f (cddr q29c2@x))) (if (memv q29c4@t '(letrec)) ((lambda (q29ca@bindings q29cb@body*) ((lambda (q29ce@lhs* q29cf@rhs*) (cons* 'letrec (map list q29ce@lhs* (map q29c1@f q29cf@rhs*)) (map q29c1@f q29cb@body*))) (map car q29ca@bindings) (map cadr q29ca@bindings))) (cadr q29c2@x) (cddr q29c2@x)) (if (memv q29c4@t '(letrec*)) ((lambda (q29d2@bindings q29d3@body*) ((lambda (q29d6@lhs* q29d7@rhs*) (cons* 'letrec* (map list q29d6@lhs* (map q29c1@f q29d7@rhs*)) (map q29c1@f q29d3@body*))) (map car q29d2@bindings) (map cadr q29d2@bindings))) (cadr q29c2@x) (cddr q29c2@x)) (if (memv q29c4@t '(library-letrec*)) ((lambda (q29da@name q29db@x) ((lambda (q29de@bindings q29df@body*) ((lambda (q29e2@lhs* q29e3@lhs** q29e4@rhs*) (cons* 'library-letrec* q29da@name (map list q29e2@lhs* q29e3@lhs** (map q29c1@f q29e4@rhs*)) (map q29c1@f q29df@body*))) (map car q29de@bindings) (map cadr q29de@bindings) (map caddr q29de@bindings))) (cadr q29db@x) (cddr q29db@x))) (cadr q29c2@x) (cdr q29c2@x)) (if (memv q29c4@t '(begin)) (cons 'begin (map q29c1@f (cdr q29c2@x))) (if (memv q29c4@t '(set!)) (list 'set! (cadr q29c2@x) (q29c1@f (caddr q29c2@x))) (if (memv q29c4@t '(primitive)) ((lambda (q29e8@op) ((lambda (q29ea@t) (if q29ea@t ((lambda (q29ec@loc) q29ec@loc) q29ea@t) q29e8@op)) ((q29ab@current-primitive-locations) q29e8@op))) (cadr q29c2@x)) (if (memv q29c4@t '(define)) q29c2@x (if (list? q29c2@x) (map q29c1@f q29c2@x) (error 'rewrite '"invalid form ~s ~s" q29c2@x (list? q29c2@x)))))))))))))) (car q29c2@x)) q29c2@x))) q29c1@f)) '#f))) (set! q29b1@expanded->core (lambda (q29ee@x) ((q29af@rewriter '#f) q29ee@x))) (set! q29b3@compile-core-expr (lambda (q29f0@x) ((q29af@rewriter '#f) q29f0@x))) (set! q29b5@pretty-print write) (set! q29b7@compile-core-expr-to-port (lambda (q29f2@x q29f3@p) (q29b5@pretty-print ((q29af@rewriter '#f) q29f2@x) q29f3@p))) (begin (set! q29fc@q29b7@compile-core-expr-to-port q29b7@compile-core-expr-to-port) (set! q29fb@q29b5@pretty-print q29b5@pretty-print) (set! q29fa@q29b3@compile-core-expr q29b3@compile-core-expr) (set! q29f9@q29b1@expanded->core q29b1@expanded->core) (set! q29f8@q29af@rewriter q29af@rewriter) (set! q29f7@q29ad@mutable? q29ad@mutable?) (set! q29f6@q29ab@current-primitive-locations q29ab@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (q2a4b@make-collection q2a4d@current-library-collection q2a4f@rp q2a59@library? q2a5b@library-id q2a5d@set-library-id! q2a5f@library-name q2a61@set-library-name! q2a63@library-version q2a65@set-library-version! q2a67@library-imp* q2a69@set-library-imp*! q2a6b@library-vis* q2a6d@set-library-vis*! q2a6f@library-inv* q2a71@set-library-inv*! q2a73@library-subst q2a75@set-library-subst! q2a77@library-env q2a79@set-library-env! q2a7b@library-visit-state q2a7d@set-library-visit-state! q2a7f@library-invoke-state q2a81@set-library-invoke-state! q2a83@library-visit-code q2a85@set-library-visit-code! q2a87@library-invoke-code q2a89@set-library-invoke-code! q2a8b@library-visible? q2a8d@set-library-visible?! q2a8f@library-source-file-name q2a91@set-library-source-file-name! q2a93@dummy q2a95@find-dependencies q2a97@find-library-by q2a99@library-path q2a9b@library-extensions q2a9d@library-name->file-name q2a9f@file-locator q2aa1@serialize-all q2aa3@current-precompiled-library-loader q2aa5@try-load-from-file q2aa7@library-loader q2aa9@current-library-expander q2aab@external-pending-libraries q2aad@find-external-library q2aaf@find-library-by-name q2ab1@library-exists? q2ab3@find-library-by-spec/die q2ab5@label->binding-table q2ab7@install-library-record q2ab9@install-library q2abb@imported-label->binding q2abd@invoke-library q2abf@visit-library q2ac1@invoke-library-by-spec q2ac3@installed-libraries q2ac5@library-spec) (begin (set! q2a4b@make-collection (lambda () ((lambda (q2ac6@set) ((lambda (q2ac9@set-cons) (begin (set! q2ac9@set-cons (lambda (q2ace@x q2acf@ls) (if (memq q2ace@x q2acf@ls) q2acf@ls (cons q2ace@x q2acf@ls)))) (lambda q2acc ((lambda (q2acd) (if (= q2acd '0) (apply (lambda () q2ac6@set) q2acc) (if (= q2acd '1) (apply (lambda (q2aca@x) (set! q2ac6@set (q2ac9@set-cons q2aca@x q2ac6@set))) q2acc) (error 'apply '"invalid arg count")))) (length q2acc))))) '#f)) '()))) (set! q2a4d@current-library-collection (q29a3@q2882@make-parameter (q2a4b@make-collection) (lambda (q2ad2@x) (begin (if (not (procedure? q2ad2@x)) (assertion-violation 'current-library-collection '"not a procedure" q2ad2@x) (void)) q2ad2@x)))) (set! q2a4f@rp (q29a0@q287c@make-record-printer 'library (lambda (q2ad4@x q2ad5@p q2ad6@wr) (begin (if (not (q2a59@library? q2ad4@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (q2a63@library-version q2ad4@x)) (q2a5f@library-name q2ad4@x) (append (q2a5f@library-name q2ad4@x) (list (q2a63@library-version q2ad4@x))))) q2ad5@p))))) (set! q2a59@library? (lambda (q2ada@x) (and (simple-struct? q2ada@x) (eq? (simple-struct-name q2ada@x) 'library)))) (set! q2a5b@library-id (lambda (q2adc@x) (simple-struct-ref q2adc@x '0))) (set! q2a5d@set-library-id! (lambda (q2ade@x q2adf@val) (simple-struct-set! q2ade@x '0 q2adf@val))) (set! q2a5f@library-name (lambda (q2ae2@x) (simple-struct-ref q2ae2@x '1))) (set! q2a61@set-library-name! (lambda (q2ae4@x q2ae5@val) (simple-struct-set! q2ae4@x '1 q2ae5@val))) (set! q2a63@library-version (lambda (q2ae8@x) (simple-struct-ref q2ae8@x '2))) (set! q2a65@set-library-version! (lambda (q2aea@x q2aeb@val) (simple-struct-set! q2aea@x '2 q2aeb@val))) (set! q2a67@library-imp* (lambda (q2aee@x) (simple-struct-ref q2aee@x '3))) (set! q2a69@set-library-imp*! (lambda (q2af0@x q2af1@val) (simple-struct-set! q2af0@x '3 q2af1@val))) (set! q2a6b@library-vis* (lambda (q2af4@x) (simple-struct-ref q2af4@x '4))) (set! q2a6d@set-library-vis*! (lambda (q2af6@x q2af7@val) (simple-struct-set! q2af6@x '4 q2af7@val))) (set! q2a6f@library-inv* (lambda (q2afa@x) (simple-struct-ref q2afa@x '5))) (set! q2a71@set-library-inv*! (lambda (q2afc@x q2afd@val) (simple-struct-set! q2afc@x '5 q2afd@val))) (set! q2a73@library-subst (lambda (q2b00@x) (simple-struct-ref q2b00@x '6))) (set! q2a75@set-library-subst! (lambda (q2b02@x q2b03@val) (simple-struct-set! q2b02@x '6 q2b03@val))) (set! q2a77@library-env (lambda (q2b06@x) (simple-struct-ref q2b06@x '7))) (set! q2a79@set-library-env! (lambda (q2b08@x q2b09@val) (simple-struct-set! q2b08@x '7 q2b09@val))) (set! q2a7b@library-visit-state (lambda (q2b0c@x) (simple-struct-ref q2b0c@x '8))) (set! q2a7d@set-library-visit-state! (lambda (q2b0e@x q2b0f@val) (simple-struct-set! q2b0e@x '8 q2b0f@val))) (set! q2a7f@library-invoke-state (lambda (q2b12@x) (simple-struct-ref q2b12@x '9))) (set! q2a81@set-library-invoke-state! (lambda (q2b14@x q2b15@val) (simple-struct-set! q2b14@x '9 q2b15@val))) (set! q2a83@library-visit-code (lambda (q2b18@x) (simple-struct-ref q2b18@x '10))) (set! q2a85@set-library-visit-code! (lambda (q2b1a@x q2b1b@val) (simple-struct-set! q2b1a@x '10 q2b1b@val))) (set! q2a87@library-invoke-code (lambda (q2b1e@x) (simple-struct-ref q2b1e@x '11))) (set! q2a89@set-library-invoke-code! (lambda (q2b20@x q2b21@val) (simple-struct-set! q2b20@x '11 q2b21@val))) (set! q2a8b@library-visible? (lambda (q2b24@x) (simple-struct-ref q2b24@x '12))) (set! q2a8d@set-library-visible?! (lambda (q2b26@x q2b27@val) (simple-struct-set! q2b26@x '12 q2b27@val))) (set! q2a8f@library-source-file-name (lambda (q2b2a@x) (simple-struct-ref q2b2a@x '13))) (set! q2a91@set-library-source-file-name! (lambda (q2b2c@x q2b2d@val) (simple-struct-set! q2b2c@x '13 q2b2d@val))) (set! q2a93@dummy '3) (set! q2a95@find-dependencies (lambda (q2b30@ls) (if (null? q2b30@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! q2a97@find-library-by (lambda (q2b32@pred) ((letrec ((q2b34@f (lambda (q2b36@ls) (if (null? q2b36@ls) '#f (if (q2b32@pred (car q2b36@ls)) (car q2b36@ls) (q2b34@f (cdr q2b36@ls))))))) q2b34@f) ((q2a4d@current-library-collection))))) (set! q2a99@library-path (q29a3@q2882@make-parameter '(".") (lambda (q2b38@x) (if (and (list? q2b38@x) (for-all string? q2b38@x)) (map (lambda (q2b3a@x) q2b3a@x) q2b38@x) (assertion-violation 'library-path '"not a list of strings" q2b38@x))))) (set! q2a9b@library-extensions (q29a3@q2882@make-parameter '(".sls" ".ss" ".scm") (lambda (q2b3c@x) (if (and (list? q2b3c@x) (for-all string? q2b3c@x)) (map (lambda (q2b3e@x) q2b3e@x) q2b3c@x) (assertion-violation 'library-extensions '"not a list of strings" q2b3c@x))))) (set! q2a9d@library-name->file-name (lambda (q2b40@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q2b46@q2b43 q2b47@q2b45) ((lambda (q2b4a@extract q2b4b@p) ((lambda (q2b4f@display-hex) (begin (set! q2b4f@display-hex (lambda (q2b58@n) (if (<= '0 q2b58@n '9) (display q2b58@n q2b4b@p) (display (integer->char (+ (char->integer '#\a) (- q2b58@n '10))) q2b4b@p)))) (begin ((letrec ((q2b50@f (lambda (q2b52@ls) (if (not (null? q2b52@ls)) (begin (display '"/" q2b4b@p) (for-each (lambda (q2b54@c) (if (or (char<=? '#\a q2b54@c '#\z) (char<=? '#\A q2b54@c '#\Z) (char<=? '#\0 q2b54@c '#\9) (memv q2b54@c '(#\- #\. #\_ #\~))) (display q2b54@c q2b4b@p) (begin (display '"%" q2b4b@p) ((lambda (q2b56@n) (begin (q2b4f@display-hex (quotient q2b56@n '16)) (q2b4f@display-hex (remainder q2b56@n '16)))) (char->integer q2b54@c))))) (string->list (symbol->string (car q2b52@ls)))) (q2b50@f (cdr q2b52@ls))) (void))))) q2b50@f) q2b40@x) (q2b4a@extract)))) '#f)) q2b47@q2b45 q2b46@q2b43))))) (set! q2a9f@file-locator (q29a3@q2882@make-parameter (lambda (q2b5a@x) ((lambda (q2b5c@str) ((letrec ((q2b5e@f (lambda (q2b60@ls q2b61@exts q2b62@failed-list) (if (null? q2b60@ls) ((lambda () ((lambda (q2b6e@q2b69 q2b70@q2b6b q2b72@q2b6a q2b75@q2b68 q2b77@make-library-resolution-condition q2b79@q2b66 q2b7b@q2b67 q2b7d@library-resolution-condition? q2b7f@condition-library q2b81@condition-files) (begin (set! q2b6e@q2b69 (make-record-type-descriptor '&library-resolution q4e18@q4b5f@&condition-rtd 'q2b6c '#f '#f '#((immutable library) (immutable files)))) (set! q2b70@q2b6b '#f) (set! q2b72@q2b6a (make-record-constructor-descriptor q2b6e@q2b69 q4e19@q4b61@&condition-rcd q2b70@q2b6b)) (set! q2b75@q2b68 (record-predicate q2b6e@q2b69)) (set! q2b77@make-library-resolution-condition (record-constructor q2b72@q2b6a)) (set! q2b79@q2b66 (record-accessor q2b6e@q2b69 '0)) (set! q2b7b@q2b67 (record-accessor q2b6e@q2b69 '1)) (set! q2b7d@library-resolution-condition? (condition-predicate q2b6e@q2b69)) (set! q2b7f@condition-library (condition-accessor q2b6e@q2b69 q2b79@q2b66)) (set! q2b81@condition-files (condition-accessor q2b6e@q2b69 q2b7b@q2b67)) (raise (condition (q4e38@q4bf9@make-error) (q4e5a@q4c55@make-who-condition 'expander) (q4e1e@q4bb6@make-message-condition '"cannot locate library in library-path") (q2b77@make-library-resolution-condition q2b5a@x (reverse q2b62@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? q2b61@exts) (q2b5e@f (cdr q2b60@ls) (q2a9b@library-extensions) q2b62@failed-list) ((lambda (q2b82@name) (if (file-exists? q2b82@name) q2b82@name (q2b5e@f q2b60@ls (cdr q2b61@exts) (cons q2b82@name q2b62@failed-list)))) (string-append (car q2b60@ls) q2b5c@str (car q2b61@exts)))))))) q2b5e@f) (q2a99@library-path) (q2a9b@library-extensions) '())) (q2a9d@library-name->file-name q2b5a@x))) (lambda (q2b84@f) (if (procedure? q2b84@f) q2b84@f (assertion-violation 'file-locator '"not a procedure" q2b84@f))))) (set! q2aa1@serialize-all (lambda (q2b86@serialize q2b87@compile) ((lambda (q2b8b@library-desc) (begin (set! q2b8b@library-desc (lambda (q2b8e@x) (list (q2a5b@library-id q2b8e@x) (q2a5f@library-name q2b8e@x)))) (for-each (lambda (q2b8c@x) (if (q2a8f@library-source-file-name q2b8c@x) (q2b86@serialize (q2a8f@library-source-file-name q2b8c@x) (list (q2a5b@library-id q2b8c@x) (q2a5f@library-name q2b8c@x) (q2a63@library-version q2b8c@x) (map q2b8b@library-desc (q2a67@library-imp* q2b8c@x)) (map q2b8b@library-desc (q2a6b@library-vis* q2b8c@x)) (map q2b8b@library-desc (q2a6f@library-inv* q2b8c@x)) (q2a73@library-subst q2b8c@x) (q2a77@library-env q2b8c@x) (q2b87@compile (q2a83@library-visit-code q2b8c@x)) (q2b87@compile (q2a87@library-invoke-code q2b8c@x)) (q2a8b@library-visible? q2b8c@x))) (void))) ((q2a4d@current-library-collection))))) '#f))) (set! q2aa3@current-precompiled-library-loader (q29a3@q2882@make-parameter (lambda (q2b90@filename q2b91@sk) '#f))) (set! q2aa5@try-load-from-file (lambda (q2b94@filename) ((q2aa3@current-precompiled-library-loader) q2b94@filename (lambda q2bba ((lambda (q2bbb) (if (= q2bbb '11) (apply (lambda (q2b96@id q2b97@name q2b98@ver q2b99@imp* q2b9a@vis* q2b9b@inv* q2b9c@exp-subst q2b9d@exp-env q2b9e@visit-proc q2b9f@invoke-proc q2ba0@visible?) ((letrec ((q2bac@f (lambda (q2bae@deps) (if (null? q2bae@deps) (begin (q2ab9@install-library q2b96@id q2b97@name q2b98@ver q2b99@imp* q2b9a@vis* q2b9b@inv* q2b9c@exp-subst q2b9d@exp-env q2b9e@visit-proc q2b9f@invoke-proc '#f '#f q2ba0@visible? '#f) '#t) ((lambda (q2bb0@d) ((lambda (q2bb2@label q2bb3@dname) ((lambda (q2bb6@l) (if (and (q2a59@library? q2bb6@l) (eq? q2bb2@label (q2a5b@library-id q2bb6@l))) (q2bac@f (cdr q2bae@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" q2b97@name q2bb3@dname q2b94@filename q2bb6@l q2bb2@label (q2a5b@library-id q2bb6@l)) '#f))) (q2aaf@find-library-by-name q2bb3@dname))) (car q2bb0@d) (cadr q2bb0@d))) (car q2bae@deps)))))) q2bac@f) (append q2b99@imp* q2b9a@vis* q2b9b@inv*))) q2bba) (if (>= q2bbb '0) (apply (lambda q2bb8@others '#f) q2bba) (error 'apply '"invalid arg count")))) (length q2bba)))))) (set! q2aa7@library-loader (q29a3@q2882@make-parameter (lambda (q2bbc@x) ((lambda (q2bbe@file-name) (if (not q2bbe@file-name) (assertion-violation '#f '"cannot file library" q2bbc@x) (or (q2aa5@try-load-from-file q2bbe@file-name) ((q2aa9@current-library-expander) (q29a2@q2880@read-library-source-file q2bbe@file-name) q2bbe@file-name (lambda (q2bc0@name) (if (not (fast-equal? q2bc0@name q2bbc@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (q2bc6@q2bc3 q2bc7@q2bc5) ((lambda (q2bca@e q2bcb@p) (begin (display '"expected to find library " q2bcb@p) (write q2bbc@x q2bcb@p) (display '" in file " q2bcb@p) (display q2bbe@file-name q2bcb@p) (display '", found " q2bcb@p) (write q2bc0@name q2bcb@p) (display '" instead" q2bcb@p) (q2bca@e))) q2bc7@q2bc5 q2bc6@q2bc3)))) (void))))))) ((q2a9f@file-locator) q2bbc@x))) (lambda (q2bce@f) (if (procedure? q2bce@f) q2bce@f (assertion-violation 'library-locator '"not a procedure" q2bce@f))))) (set! q2aa9@current-library-expander (q29a3@q2882@make-parameter (lambda (q2bd0@x) (assertion-violation 'library-expander '"not initialized")) (lambda (q2bd2@f) (if (procedure? q2bd2@f) q2bd2@f (assertion-violation 'library-expander '"not a procedure" q2bd2@f))))) (set! q2aab@external-pending-libraries (q29a3@q2882@make-parameter '())) (set! q2aad@find-external-library (lambda (q2bd4@name) (begin (if (member q2bd4@name (q2aab@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" q2bd4@name) (void)) ((lambda (q2bda@q2bd7 q2bdb@q2bd9) ((lambda (q2bde@swap) (dynamic-wind q2bde@swap (lambda () (begin ((q2aa7@library-loader) q2bd4@name) (or (q2a97@find-library-by (lambda (q2be0@x) (fast-equal? (q2a5f@library-name q2be0@x) q2bd4@name))) (assertion-violation '#f '"handling external library did not yield the correct library" q2bd4@name)))) q2bde@swap)) (lambda () ((lambda (q2be2@t) (begin (q2bda@q2bd7 q2bdb@q2bd9) (set! q2bdb@q2bd9 q2be2@t))) (q2bda@q2bd7))))) q2aab@external-pending-libraries (cons q2bd4@name (q2aab@external-pending-libraries)))))) (set! q2aaf@find-library-by-name (lambda (q2be4@name) (or (q2a97@find-library-by (lambda (q2be6@x) (fast-equal? (q2a5f@library-name q2be6@x) q2be4@name))) (q2aad@find-external-library q2be4@name)))) (set! q2ab1@library-exists? (lambda (q2be8@name) (and (q2a97@find-library-by (lambda (q2bea@x) (fast-equal? (q2a5f@library-name q2bea@x) q2be8@name))) '#t))) (set! q2ab3@find-library-by-spec/die (lambda (q2bec@spec) ((lambda (q2bee@id) (or (q2a97@find-library-by (lambda (q2bf0@x) (eq? q2bee@id (q2a5b@library-id q2bf0@x)))) (assertion-violation '#f '"cannot find library with required spec" q2bec@spec))) (car q2bec@spec)))) (set! q2ab5@label->binding-table (make-eq-hashtable)) (set! q2ab7@install-library-record (lambda (q2bf2@lib) (begin ((lambda (q2bf4@exp-env) (for-each (lambda (q2bf6@x) ((lambda (q2bf8@label q2bf9@binding) ((lambda (q2bfc@binding) (begin (if (hashtable-ref q2ab5@label->binding-table q2bf8@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" q2bf8@label (hashtable-ref q2ab5@label->binding-table q2bf8@label '#f) q2bfc@binding) (exit)) (void)) (hashtable-set! q2ab5@label->binding-table q2bf8@label q2bfc@binding))) ((lambda (q2bfe@t) (if (memv q2bfe@t '(global)) (cons 'global (cons q2bf2@lib (cdr q2bf9@binding))) (if (memv q2bfe@t '(global-macro)) (cons 'global-macro (cons q2bf2@lib (cdr q2bf9@binding))) (if (memv q2bfe@t '(global-macro!)) (cons 'global-macro! (cons q2bf2@lib (cdr q2bf9@binding))) q2bf9@binding)))) (car q2bf9@binding)))) (car q2bf6@x) (cdr q2bf6@x))) q2bf4@exp-env)) (q2a77@library-env q2bf2@lib)) ((q2a4d@current-library-collection) q2bf2@lib)))) (set! q2ab9@install-library (lambda (q2c00@id q2c01@name q2c02@ver q2c03@imp* q2c04@vis* q2c05@inv* q2c06@exp-subst q2c07@exp-env q2c08@visit-proc q2c09@invoke-proc q2c0a@visit-code q2c0b@invoke-code q2c0c@visible? q2c0d@source-file-name) ((lambda (q2c1c@imp-lib* q2c1d@vis-lib* q2c1e@inv-lib*) (begin (if (not (and (symbol? q2c00@id) (list? q2c01@name) (list? q2c02@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" q2c00@id q2c01@name q2c02@ver) (void)) (if (q2ab1@library-exists? q2c01@name) (assertion-violation 'install-library '"library is already installed" q2c01@name) (void)) ((lambda (q2c22@lib) (q2ab7@install-library-record q2c22@lib)) (make-simple-struct 'library '15 (list q2c00@id q2c01@name q2c02@ver q2c1c@imp-lib* q2c1d@vis-lib* q2c1e@inv-lib* q2c06@exp-subst q2c07@exp-env q2c08@visit-proc q2c09@invoke-proc q2c0a@visit-code q2c0b@invoke-code q2c0c@visible? q2c0d@source-file-name))))) (map q2ab3@find-library-by-spec/die q2c03@imp*) (map q2ab3@find-library-by-spec/die q2c04@vis*) (map q2ab3@find-library-by-spec/die q2c05@inv*)))) (set! q2abb@imported-label->binding (lambda (q2c24@lab) (hashtable-ref q2ab5@label->binding-table q2c24@lab '#f))) (set! q2abd@invoke-library (lambda (q2c26@lib) ((lambda (q2c28@invoke) (if (procedure? q2c28@invoke) (begin (q2a81@set-library-invoke-state! q2c26@lib (lambda () (assertion-violation 'invoke '"circularity detected" q2c26@lib))) (for-each q2abd@invoke-library (q2a6f@library-inv* q2c26@lib)) (q2a81@set-library-invoke-state! q2c26@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" q2c26@lib))) (q2c28@invoke) (q2a81@set-library-invoke-state! q2c26@lib '#t)) (void))) (q2a7f@library-invoke-state q2c26@lib)))) (set! q2abf@visit-library (lambda (q2c2a@lib) ((lambda (q2c2c@visit) (if (procedure? q2c2c@visit) (begin (q2a7d@set-library-visit-state! q2c2a@lib (lambda () (assertion-violation 'visit '"circularity detected" q2c2a@lib))) (for-each q2abd@invoke-library (q2a6b@library-vis* q2c2a@lib)) (q2a7d@set-library-visit-state! q2c2a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" q2c2a@lib))) (q2c2c@visit) (q2a7d@set-library-visit-state! q2c2a@lib '#t)) (void))) (q2a7b@library-visit-state q2c2a@lib)))) (set! q2ac1@invoke-library-by-spec (lambda (q2c2e@spec) (q2abd@invoke-library (q2ab3@find-library-by-spec/die q2c2e@spec)))) (set! q2ac3@installed-libraries (lambda q2c36 ((lambda (q2c37) (if (= q2c37 '1) (apply (lambda (q2c30@all?) ((letrec ((q2c32@f (lambda (q2c34@ls) (if (null? q2c34@ls) '() (if (or q2c30@all? (q2a8b@library-visible? (car q2c34@ls))) (cons (car q2c34@ls) (q2c32@f (cdr q2c34@ls))) (q2c32@f (cdr q2c34@ls))))))) q2c32@f) ((q2a4d@current-library-collection)))) q2c36) (if (= q2c37 '0) (apply (lambda () (q2ac3@installed-libraries '#f)) q2c36) (error 'apply '"invalid arg count")))) (length q2c36)))) (set! q2ac5@library-spec (lambda (q2c38@x) (begin (if (not (q2a59@library? q2c38@x)) (assertion-violation 'library-spec '"not a library" q2c38@x) (void)) (list (q2a5b@library-id q2c38@x) (q2a5f@library-name q2c38@x) (q2a63@library-version q2c38@x))))) (begin (set! q2c73@q2ac5@library-spec q2ac5@library-spec) (set! q2c72@q2ac3@installed-libraries q2ac3@installed-libraries) (set! q2c71@q2ac1@invoke-library-by-spec q2ac1@invoke-library-by-spec) (set! q2c70@q2abf@visit-library q2abf@visit-library) (set! q2c6f@q2abd@invoke-library q2abd@invoke-library) (set! q2c6e@q2abb@imported-label->binding q2abb@imported-label->binding) (set! q2c6d@q2ab9@install-library q2ab9@install-library) (set! q2c6c@q2ab7@install-library-record q2ab7@install-library-record) (set! q2c6b@q2ab5@label->binding-table q2ab5@label->binding-table) (set! q2c6a@q2ab3@find-library-by-spec/die q2ab3@find-library-by-spec/die) (set! q2c69@q2ab1@library-exists? q2ab1@library-exists?) (set! q2c68@q2aaf@find-library-by-name q2aaf@find-library-by-name) (set! q2c67@q2aad@find-external-library q2aad@find-external-library) (set! q2c66@q2aab@external-pending-libraries q2aab@external-pending-libraries) (set! q2c65@q2aa9@current-library-expander q2aa9@current-library-expander) (set! q2c64@q2aa7@library-loader q2aa7@library-loader) (set! q2c63@q2aa5@try-load-from-file q2aa5@try-load-from-file) (set! q2c62@q2aa3@current-precompiled-library-loader q2aa3@current-precompiled-library-loader) (set! q2c61@q2aa1@serialize-all q2aa1@serialize-all) (set! q2c60@q2a9f@file-locator q2a9f@file-locator) (set! q2c5f@q2a9d@library-name->file-name q2a9d@library-name->file-name) (set! q2c5e@q2a9b@library-extensions q2a9b@library-extensions) (set! q2c5d@q2a99@library-path q2a99@library-path) (set! q2c5c@q2a97@find-library-by q2a97@find-library-by) (set! q2c5b@q2a95@find-dependencies q2a95@find-dependencies) (set! q2c5a@q2a93@dummy q2a93@dummy) (set! q2c59@q2a91@set-library-source-file-name! q2a91@set-library-source-file-name!) (set! q2c58@q2a8f@library-source-file-name q2a8f@library-source-file-name) (set! q2c57@q2a8d@set-library-visible?! q2a8d@set-library-visible?!) (set! q2c56@q2a8b@library-visible? q2a8b@library-visible?) (set! q2c55@q2a89@set-library-invoke-code! q2a89@set-library-invoke-code!) (set! q2c54@q2a87@library-invoke-code q2a87@library-invoke-code) (set! q2c53@q2a85@set-library-visit-code! q2a85@set-library-visit-code!) (set! q2c52@q2a83@library-visit-code q2a83@library-visit-code) (set! q2c51@q2a81@set-library-invoke-state! q2a81@set-library-invoke-state!) (set! q2c50@q2a7f@library-invoke-state q2a7f@library-invoke-state) (set! q2c4f@q2a7d@set-library-visit-state! q2a7d@set-library-visit-state!) (set! q2c4e@q2a7b@library-visit-state q2a7b@library-visit-state) (set! q2c4d@q2a79@set-library-env! q2a79@set-library-env!) (set! q2c4c@q2a77@library-env q2a77@library-env) (set! q2c4b@q2a75@set-library-subst! q2a75@set-library-subst!) (set! q2c4a@q2a73@library-subst q2a73@library-subst) (set! q2c49@q2a71@set-library-inv*! q2a71@set-library-inv*!) (set! q2c48@q2a6f@library-inv* q2a6f@library-inv*) (set! q2c47@q2a6d@set-library-vis*! q2a6d@set-library-vis*!) (set! q2c46@q2a6b@library-vis* q2a6b@library-vis*) (set! q2c45@q2a69@set-library-imp*! q2a69@set-library-imp*!) (set! q2c44@q2a67@library-imp* q2a67@library-imp*) (set! q2c43@q2a65@set-library-version! q2a65@set-library-version!) (set! q2c42@q2a63@library-version q2a63@library-version) (set! q2c41@q2a61@set-library-name! q2a61@set-library-name!) (set! q2c40@q2a5f@library-name q2a5f@library-name) (set! q2c3f@q2a5d@set-library-id! q2a5d@set-library-id!) (set! q2c3e@q2a5b@library-id q2a5b@library-id) (set! q2c3d@q2a59@library? q2a59@library?) (set! q2c3c@q2a4f@rp q2a4f@rp) (set! q2c3b@q2a4d@current-library-collection q2a4d@current-library-collection) (set! q2c3a@q2a4b@make-collection q2a4b@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2c77@build-global-define q2ce8@build-lambda q2cea@build-case-lambda q2cec@build-let q2d1a@build-sequence q2d1c@build-void q2d1e@build-letrec q2d20@build-letrec* q2d22@build-library-letrec* q2d24@build-receive) (begin (set! q2c77@build-global-define (lambda (q2d25@x) (q2d1c@build-void))) (set! q2ce8@build-lambda (lambda (q2d27@ae q2d28@vars q2d29@exp) (list 'lambda q2d28@vars q2d29@exp))) (set! q2cea@build-case-lambda (lambda (q2d2d@ae q2d2e@vars* q2d2f@exp*) ((lambda (q2d34@build-error q2d36@build-pred q2d38@build-apply q2d3a@expand-case-lambda) (begin (set! q2d34@build-error (lambda (q2d6b@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! q2d36@build-pred (lambda (q2d53@ae q2d54@n q2d55@vars) (call-with-values (lambda () ((letrec ((q2d5d@f (lambda (q2d5f@vars q2d60@count) (if (pair? q2d5f@vars) (q2d5d@f (cdr q2d5f@vars) (+ q2d60@count '1)) (if (null? q2d5f@vars) (values q2d60@count '=) (values q2d60@count '>=)))))) q2d5d@f) q2d55@vars '0)) (lambda (q2d63@q2d5a q2d64@q2d5c) ((lambda (q2d67@pred q2d68@count) (list (list 'primitive q2d67@pred) q2d54@n (list 'quote q2d68@count))) q2d64@q2d5c q2d63@q2d5a))))) (set! q2d38@build-apply (lambda (q2d4b@ae q2d4c@g q2d4d@vars q2d4e@exp) (list '(primitive apply) (q2ce8@build-lambda q2d4b@ae q2d4d@vars q2d4e@exp) q2d4c@g))) (set! q2d3a@expand-case-lambda (lambda (q2d3b@ae q2d3c@vars q2d3d@exp*) ((lambda (q2d41@g q2d42@n) (list 'lambda q2d41@g (q2cec@build-let q2d3b@ae (list q2d42@n) (list (list '(primitive length) q2d41@g)) ((letrec ((q2d45@f (lambda (q2d47@vars* q2d48@exp*) (if (null? q2d47@vars*) (q2d34@build-error q2d3b@ae) (list 'if (q2d36@build-pred q2d3b@ae q2d42@n (car q2d47@vars*)) (q2d38@build-apply q2d3b@ae q2d41@g (car q2d47@vars*) (car q2d48@exp*)) (q2d45@f (cdr q2d47@vars*) (cdr q2d48@exp*))))))) q2d45@f) q2d2e@vars* q2d3d@exp*)))) (gensym) (gensym)))) (if (= (length q2d2f@exp*) '1) (q2ce8@build-lambda q2d2d@ae (car q2d2e@vars*) (car q2d2f@exp*)) (q2d3a@expand-case-lambda q2d2d@ae q2d2e@vars* q2d2f@exp*)))) '#f '#f '#f '#f))) (set! q2cec@build-let (lambda (q2d6d@ae q2d6e@lhs* q2d6f@rhs* q2d70@body) (cons (q2ce8@build-lambda q2d6d@ae q2d6e@lhs* q2d70@body) q2d6f@rhs*))) (set! q2d1a@build-sequence (lambda (q2d75@ae q2d76@exps) ((letrec ((q2d79@loop (lambda (q2d7b@exps) (if (null? (cdr q2d7b@exps)) (car q2d7b@exps) (if (equal? (car q2d7b@exps) (q2d1c@build-void)) (q2d79@loop (cdr q2d7b@exps)) (cons 'begin q2d7b@exps)))))) q2d79@loop) q2d76@exps))) (set! q2d1c@build-void (lambda () '((primitive void)))) (set! q2d1e@build-letrec (lambda (q2d7d@ae q2d7e@vars q2d7f@val-exps q2d80@body-exp) (if (null? q2d7e@vars) q2d80@body-exp (list 'letrec (map list q2d7e@vars q2d7f@val-exps) q2d80@body-exp)))) (set! q2d20@build-letrec* (lambda (q2d85@ae q2d86@vars q2d87@val-exps q2d88@body-exp) (if (null? q2d86@vars) q2d88@body-exp (q2cec@build-let q2d85@ae q2d86@vars (map (lambda (q2d8d@x) (list 'quote '#f)) q2d86@vars) (q2d1a@build-sequence q2d85@ae (append (map (lambda (q2d8f@lhs q2d90@rhs) (list 'set! q2d8f@lhs q2d90@rhs)) q2d86@vars q2d87@val-exps) (list q2d88@body-exp))))))) (set! q2d22@build-library-letrec* (lambda (q2d93@ae q2d94@name q2d95@vars q2d96@locs q2d97@val-exps q2d98@body-exp) (list 'library-letrec* q2d94@name (map list q2d95@vars q2d96@locs q2d97@val-exps) q2d98@body-exp))) (set! q2d24@build-receive (lambda (q2d9f@ae q2da0@vars q2da1@producer q2da2@body*) (begin (display '"************** in ") (cons 'receive (cons q2da0@vars (cons q2da1@producer q2da2@body*)))))) (begin (set! q2db0@q2d24@build-receive q2d24@build-receive) (set! q2daf@q2d22@build-library-letrec* q2d22@build-library-letrec*) (set! q2dae@q2d20@build-letrec* q2d20@build-letrec*) (set! q2dad@q2d1e@build-letrec q2d1e@build-letrec) (set! q2dac@q2d1c@build-void q2d1c@build-void) (set! q2dab@q2d1a@build-sequence q2d1a@build-sequence) (set! q2daa@q2cec@build-let q2cec@build-let) (set! q2da9@q2cea@build-case-lambda q2cea@build-case-lambda) (set! q2da8@q2ce8@build-lambda q2ce8@build-lambda) (set! q2da7@q2c77@build-global-define q2c77@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2dbf@file-options-macro q2dc1@set-cons q2dc3@set-union q2dc8@top-mark* q2dca@top-marked? q2dcc@gen-lexical q2dce@gen-global q2dd0@gen-label q2dd2@gen-top-level-label q2dd4@gen-define-label+loc q2dd6@gen-define-label q2de0@rib? q2de2@rib-sym* q2de4@set-rib-sym*! q2de6@rib-mark** q2de8@set-rib-mark**! q2dea@rib-label* q2dec@set-rib-label*! q2dee@rib-sealed/freq q2df0@set-rib-sealed/freq! q2df2@rib-cache q2df4@set-rib-cache! q2df6@dummy q2df8@make-empty-rib q2dfa@extend-rib! q2dfc@extend-rib/nc! q2dfe@make-rib-map q2e00@seal-rib! q2e02@unseal-rib! q2e04@make-full-rib q2e06@rp q2e10@stx? q2e12@stx-expr q2e14@set-stx-expr! q2e16@stx-mark* q2e18@set-stx-mark*! q2e1a@stx-subst* q2e1c@set-stx-subst*! q2e1e@stx-ae* q2e20@set-stx-ae*! q2e22@dummy q2e24@datum->stx q2e26@gen-mark q2e28@anti-mark q2e2a@anti-mark? q2e2c@mkstx q2e2e@add-mark q2e30@add-subst q2e32@syntax-kind? q2e34@syntax-vector->list q2e36@syntax-pair? q2e38@syntax-vector? q2e3a@syntax-null? q2e3c@syntax-list? q2e3e@syntax-car q2e40@syntax-cdr q2e42@syntax->list q2e44@id? q2e46@id->sym q2e48@bound-id=? q2e4a@free-id=? q2e4c@valid-bound-ids? q2e4e@distinct-bound-ids? q2e50@bound-id-member? q2e52@self-evaluating? q2e54@strip-annotations q2e56@strip q2e58@stx->datum q2e5a@id->label q2e5c@label->binding q2e5e@make-binding q2e60@binding-type q2e62@binding-value q2e64@raise-unbound-error q2e66@syntax-type q2e74@sanitize-binding q2e76@make-variable-transformer q2e78@variable-transformer? q2e7a@variable-transformer-procedure q2e7c@make-eval-transformer q2fcd@parse-define q2fcf@parse-define-syntax q2fd1@scheme-stx-hashtable q2fd3@scheme-stx q2fd5@lexical-var q2fd7@lexical-mutable? q2fd9@set-lexical-mutable! q2fdb@add-lexical q2fdd@add-lexicals q2fdf@letrec-helper q2fe1@letrec-transformer q2fe3@letrec*-transformer q2fe5@fluid-let-syntax-transformer q2fe7@type-descriptor-transformer q2fe9@record-type-descriptor-transformer q2feb@record-constructor-descriptor-transformer q2fed@when-macro q2fef@unless-macro q2ff1@if-transformer q2ff3@and-transformer q2ff5@or-transformer q2ff7@case-macro q2ff9@quote-transformer q2ffb@case-lambda-transformer q2ffd@lambda-transformer q2fff@bless q3001@with-syntax-macro q3003@invalid-fmls-error q3005@let-macro q3007@let-values-macro q3009@let*-values-macro q300b@trace-lambda-macro q300d@trace-define-macro q300f@trace-define-syntax-macro q3011@trace-let/rec-syntax q3013@trace-let-syntax-macro q3015@trace-letrec-syntax-macro q3017@guard-macro q3019@define-enumeration-macro q301b@time-macro q301d@delay-macro q301f@assert-macro q3021@endianness-macro q3023@identifier-syntax-macro q3025@do-macro q3027@let*-macro q3029@or-macro q302b@and-macro q302d@cond-macro q302f@do-include q3031@include-macro q3033@include-into-macro q3035@syntax-rules-macro q3037@quasiquote-macro q3039@quasisyntax-macro q303b@define-struct-macro q303d@define-record-type-macro q303f@define-condition-type-macro q3041@incorrect-usage-macro q3043@parameterize-macro q3045@foreign-call-transformer q3047@convert-pattern q3049@syntax-dispatch q304b@ellipsis? q304d@underscore? q304f@verify-literals q3051@syntax-case-transformer q3053@ellipsis-map q3055@syntax-transformer q3057@core-macro-transformer q3059@symbol-macro q305b@macro-transformer q305d@local-macro-transformer q305f@do-macro-call q3061@chi-macro q3063@chi-local-macro q3065@chi-global-macro q3067@chi-expr* q3069@chi-application q306b@chi-expr q306d@chi-set! q306f@verify-formals q3071@chi-lambda-clause q3073@chi-lambda-clause* q3075@chi-defun q3077@chi-rhs q3079@expand-interaction-rhs*/init* q307b@chi-rhs* q307d@find-bound=? q307f@find-dups q3081@chi-internal q3083@parse-module q308d@module-interface? q308f@module-interface-first-mark q3091@set-module-interface-first-mark! q3093@module-interface-exp-id-vec q3095@set-module-interface-exp-id-vec! q3097@module-interface-exp-lab-vec q3099@set-module-interface-exp-lab-vec! q309b@dummy q309d@module-interface-exp-id* q309f@chi-internal-module q30a1@chi-body* q30a3@expand-transformer q30a5@parse-exports q30a7@parse-library-name q30a9@parse-library q30ab@parse-import-spec* q30ad@make-top-rib q30af@make-collector q30b1@inv-collector q30b3@vis-collector q30b5@imp-collector q30b7@chi-library-internal q30b9@chi-interaction-expr q30bb@library-body-expander q30bd@core-library-expander q30bf@parse-top-level-program q30c1@top-level-expander q30c3@rp q30cd@env? q30cf@env-names q30d1@set-env-names! q30d3@env-labels q30d5@set-env-labels! q30d7@env-itc q30d9@set-env-itc! q30db@dummy q30dd@rp q30e7@interaction-env? q30e9@interaction-env-rib q30eb@set-interaction-env-rib! q30ed@interaction-env-r q30ef@set-interaction-env-r! q30f1@interaction-env-locs q30f3@set-interaction-env-locs! q30f5@dummy q30f7@interaction-environment-symbols q30f9@environment-bindings q30fb@parse-binding q30fd@environment? q30ff@environment-symbols q3101@environment q3103@null-environment q3105@scheme-report-environment q3107@expand q3109@eval q310b@library-expander q310d@boot-library-expand q310f@rev-map-append q3111@build-exports q3113@make-export-subst q3115@make-export-env/macros q3117@generate-temporaries q3119@free-identifier=? q311b@bound-identifier=? q311d@make-source-condition q311f@extract-position-condition q3121@expression-position q3123@assertion-error q3125@syntax-error q3127@syntax-violation* q3129@syntax-violation q312b@identifier? q312d@datum->syntax q312f@syntax->datum q3131@compile-r6rs-top-level q3133@pre-compile-r6rs-top-level q3135@interaction-environment q3137@top-level-context) (begin (set! q2dbf@file-options-macro (lambda (q3138@x) ((lambda (q313b@valid-option?) (begin (set! q313b@valid-option? (lambda (q3144@x) (and (q2e44@id? q3144@x) (memq (q2e46@id->sym q3144@x) '(no-fail no-create no-truncate))))) ((lambda (q313c@t) ((lambda (q313e@ls/false) (if (and q313e@ls/false (apply (lambda (q3140@opt*) (for-all q313b@valid-option? q3140@opt*)) q313e@ls/false)) (apply (lambda (q3142@opt*) (q2fff@bless (list 'make-file-options (list 'quote q3142@opt*)))) q313e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q313c@t))) (q3049@syntax-dispatch q313c@t '(_ . each-any)))) q3138@x))) '#f))) (set! q2dc1@set-cons (lambda (q3146@x q3147@ls) (if (memq q3146@x q3147@ls) q3147@ls (cons q3146@x q3147@ls)))) (set! q2dc3@set-union (lambda (q314a@ls1 q314b@ls2) (if (null? q314a@ls1) q314b@ls2 (if (memq (car q314a@ls1) q314b@ls2) (q2dc3@set-union (cdr q314a@ls1) q314b@ls2) (cons (car q314a@ls1) (q2dc3@set-union (cdr q314a@ls1) q314b@ls2)))))) (set! q2dc8@top-mark* '(top)) (set! q2dca@top-marked? (lambda (q314e@m*) (memq 'top q314e@m*))) (set! q2dcc@gen-lexical (lambda (q3150@sym) (if (symbol? q3150@sym) (gensym q3150@sym) (if (q2e10@stx? q3150@sym) (q2dcc@gen-lexical (q2e46@id->sym q3150@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" q3150@sym))))) (set! q2dce@gen-global (lambda (q3152@x) (q2dcc@gen-lexical q3152@x))) (set! q2dd0@gen-label (lambda (q3154@_) (gensym))) (set! q2dd2@gen-top-level-label (lambda (q3156@id q3157@rib) ((lambda (q315b@find) (begin (set! q315b@find (lambda (q3166@sym q3167@mark* q3168@sym* q3169@mark** q316a@label*) (and (pair? q3168@sym*) (if (and (eq? q3166@sym (car q3168@sym*)) (same-marks? q3167@mark* (car q3169@mark**))) (car q316a@label*) (q315b@find q3166@sym q3167@mark* (cdr q3168@sym*) (cdr q3169@mark**) (cdr q316a@label*)))))) ((lambda (q315c@sym q315d@mark*) ((lambda (q3160@sym*) ((lambda (q3162@t) (if q3162@t ((lambda (q3164@label) (if (q2c6e@q2abb@imported-label->binding q3164@label) (gensym) q3164@label)) q3162@t) (gensym))) (and (memq q315c@sym (q2de2@rib-sym* q3157@rib)) (q315b@find q315c@sym q315d@mark* q3160@sym* (q2de6@rib-mark** q3157@rib) (q2dea@rib-label* q3157@rib))))) (q2de2@rib-sym* q3157@rib))) (q2e46@id->sym q3156@id) (q2e16@stx-mark* q3156@id)))) '#f))) (set! q2dd4@gen-define-label+loc (lambda (q3170@id q3171@rib) ((lambda (q3174@t) (if q3174@t ((lambda (q3176@env) ((lambda (q3178@label q3179@locs) (values q3178@label ((lambda (q317c@t) (if q317c@t (cdr q317c@t) ((lambda (q317e@loc) (begin (q30f3@set-interaction-env-locs! q3176@env (cons (cons q3178@label q317e@loc) q3179@locs)) q317e@loc)) (q2dcc@gen-lexical q3170@id)))) (assq q3178@label q3179@locs)))) (q2dd2@gen-top-level-label q3170@id q3171@rib) (q30f1@interaction-env-locs q3176@env))) q3174@t) (values (gensym) (q2dcc@gen-lexical q3170@id)))) (q3137@top-level-context)))) (set! q2dd6@gen-define-label (lambda (q3180@id q3181@rib) (if (q3137@top-level-context) (q2dd2@gen-top-level-label q3180@id q3181@rib) (gensym)))) (set! q2de0@rib? (lambda (q3184@x) (and (simple-struct? q3184@x) (eq? (simple-struct-name q3184@x) 'rib)))) (set! q2de2@rib-sym* (lambda (q3186@x) (simple-struct-ref q3186@x '0))) (set! q2de4@set-rib-sym*! (lambda (q3188@x q3189@val) (simple-struct-set! q3188@x '0 q3189@val))) (set! q2de6@rib-mark** (lambda (q318c@x) (simple-struct-ref q318c@x '1))) (set! q2de8@set-rib-mark**! (lambda (q318e@x q318f@val) (simple-struct-set! q318e@x '1 q318f@val))) (set! q2dea@rib-label* (lambda (q3192@x) (simple-struct-ref q3192@x '2))) (set! q2dec@set-rib-label*! (lambda (q3194@x q3195@val) (simple-struct-set! q3194@x '2 q3195@val))) (set! q2dee@rib-sealed/freq (lambda (q3198@x) (simple-struct-ref q3198@x '3))) (set! q2df0@set-rib-sealed/freq! (lambda (q319a@x q319b@val) (simple-struct-set! q319a@x '3 q319b@val))) (set! q2df2@rib-cache (lambda (q319e@x) (simple-struct-ref q319e@x '4))) (set! q2df4@set-rib-cache! (lambda (q31a0@x q31a1@val) (simple-struct-set! q31a0@x '4 q31a1@val))) (set! q2df6@dummy '3) (set! q2df8@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! q2dfa@extend-rib! (lambda (q31a4@rib q31a5@id q31a6@label) ((lambda (q31ab@find) (begin (set! q31ab@find (lambda (q31b8@sym q31b9@mark* q31ba@sym* q31bb@mark** q31bc@label*) (and (pair? q31ba@sym*) (if (and (eq? q31b8@sym (car q31ba@sym*)) (same-marks? q31b9@mark* (car q31bb@mark**))) q31bc@label* (q31ab@find q31b8@sym q31b9@mark* (cdr q31ba@sym*) (cdr q31bb@mark**) (cdr q31bc@label*)))))) (begin (if (q2dee@rib-sealed/freq q31a4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" q31a4@rib) (void)) ((lambda (q31ac@sym q31ad@mark*) ((lambda (q31b0@sym*) ((lambda (q31b2@t) (if q31b2@t ((lambda (q31b4@p) (if (not (eq? q31a6@label (car q31b4@p))) (if (q3137@top-level-context) (set-car! q31b4@p q31a6@label) (q3129@syntax-violation '#f '"multiple definitions of identifier" q31a5@id)) (void))) q31b2@t) (begin (if (q2df2@rib-cache q31a4@rib) (hashtable-update! (q2df2@rib-cache q31a4@rib) q31ac@sym (lambda (q31b6@e) (cons (cons q31ad@mark* q31a6@label) q31b6@e)) '()) (void)) (q2de4@set-rib-sym*! q31a4@rib (cons q31ac@sym q31b0@sym*)) (q2de8@set-rib-mark**! q31a4@rib (cons q31ad@mark* (q2de6@rib-mark** q31a4@rib))) (q2dec@set-rib-label*! q31a4@rib (cons q31a6@label (q2dea@rib-label* q31a4@rib)))))) (and (memq q31ac@sym (q2de2@rib-sym* q31a4@rib)) (q31ab@find q31ac@sym q31ad@mark* q31b0@sym* (q2de6@rib-mark** q31a4@rib) (q2dea@rib-label* q31a4@rib))))) (q2de2@rib-sym* q31a4@rib))) (q2e46@id->sym q31a5@id) (q2e16@stx-mark* q31a5@id))))) '#f))) (set! q2dfc@extend-rib/nc! (lambda (q31c2@rib q31c3@id q31c4@label) ((lambda (q31c8@sym q31c9@mark*) ((lambda (q31cc@sym*) (begin (if (q2df2@rib-cache q31c2@rib) (hashtable-update! (q2df2@rib-cache q31c2@rib) q31c8@sym (lambda (q31ce@e) (cons (cons q31c9@mark* q31c4@label) q31ce@e)) '()) (void)) (q2de4@set-rib-sym*! q31c2@rib (cons q31c8@sym q31cc@sym*)) (q2de8@set-rib-mark**! q31c2@rib (cons q31c9@mark* (q2de6@rib-mark** q31c2@rib))) (q2dec@set-rib-label*! q31c2@rib (cons q31c4@label (q2dea@rib-label* q31c2@rib))))) (q2de2@rib-sym* q31c2@rib))) (q2e46@id->sym q31c3@id) (q2e16@stx-mark* q31c3@id)))) (set! q2dfe@make-rib-map (lambda (q31d0@sym*) ((lambda (q31d2@ht) ((letrec ((q31d4@f (lambda (q31d6@i q31d7@sym*) (if (null? q31d7@sym*) q31d2@ht (begin (hashtable-update! q31d2@ht (car q31d7@sym*) (lambda (q31da@x) (cons q31d6@i q31da@x)) '()) (q31d4@f (+ q31d6@i '1) (cdr q31d7@sym*))))))) q31d4@f) '0 q31d0@sym*)) (make-eq-hashtable)))) (set! q2e00@seal-rib! (lambda (q31dc@rib) ((lambda (q31de@sym*) (if (not (null? q31de@sym*)) (begin (q2de4@set-rib-sym*! q31dc@rib (list->vector q31de@sym*)) (q2de8@set-rib-mark**! q31dc@rib (list->vector (q2de6@rib-mark** q31dc@rib))) (q2dec@set-rib-label*! q31dc@rib (list->vector (q2dea@rib-label* q31dc@rib))) (q2df0@set-rib-sealed/freq! q31dc@rib (q2dfe@make-rib-map q31de@sym*))) (void))) (q2de2@rib-sym* q31dc@rib)))) (set! q2e02@unseal-rib! (lambda (q31e0@rib) (if (q2dee@rib-sealed/freq q31e0@rib) (begin (q2df0@set-rib-sealed/freq! q31e0@rib '#f) (q2de4@set-rib-sym*! q31e0@rib (vector->list (q2de2@rib-sym* q31e0@rib))) (q2de8@set-rib-mark**! q31e0@rib (vector->list (q2de6@rib-mark** q31e0@rib))) (q2dec@set-rib-label*! q31e0@rib (vector->list (q2dea@rib-label* q31e0@rib)))) (void)))) (set! q2e04@make-full-rib (lambda (q31e2@id* q31e3@label*) ((lambda (q31e6@r) (begin (q2e00@seal-rib! q31e6@r) q31e6@r)) (make-simple-struct 'rib '6 (list (map q2e46@id->sym q31e2@id*) (map q2e16@stx-mark* q31e2@id*) q31e3@label* '#f '#f))))) (set! q2e06@rp (q29a0@q287c@make-record-printer 'stx (lambda (q31e8@x q31e9@p q31ea@wr) (begin (display '"#<syntax " q31e9@p) (write (q2e58@stx->datum q31e8@x) q31e9@p) ((lambda (q31ee@expr) (if (q2998@q286c@annotation? q31ee@expr) ((lambda (q31f0@src) (if (pair? q31f0@src) (begin (display '" [" q31e9@p) (display (cdr q31f0@src) q31e9@p) (display '" of " q31e9@p) (display (car q31f0@src) q31e9@p) (display '"]" q31e9@p)) (void))) (q2999@q286e@annotation-source q31ee@expr)) (void))) (q2e12@stx-expr q31e8@x)) (display '">" q31e9@p))))) (set! q2e10@stx? (lambda (q31f2@x) (and (simple-struct? q31f2@x) (eq? (simple-struct-name q31f2@x) 'stx)))) (set! q2e12@stx-expr (lambda (q31f4@x) (simple-struct-ref q31f4@x '0))) (set! q2e14@set-stx-expr! (lambda (q31f6@x q31f7@val) (simple-struct-set! q31f6@x '0 q31f7@val))) (set! q2e16@stx-mark* (lambda (q31fa@x) (simple-struct-ref q31fa@x '1))) (set! q2e18@set-stx-mark*! (lambda (q31fc@x q31fd@val) (simple-struct-set! q31fc@x '1 q31fd@val))) (set! q2e1a@stx-subst* (lambda (q3200@x) (simple-struct-ref q3200@x '2))) (set! q2e1c@set-stx-subst*! (lambda (q3202@x q3203@val) (simple-struct-set! q3202@x '2 q3203@val))) (set! q2e1e@stx-ae* (lambda (q3206@x) (simple-struct-ref q3206@x '3))) (set! q2e20@set-stx-ae*! (lambda (q3208@x q3209@val) (simple-struct-set! q3208@x '3 q3209@val))) (set! q2e22@dummy '3) (set! q2e24@datum->stx (lambda (q320c@id q320d@datum) (make-simple-struct 'stx '5 (list q320d@datum (q2e16@stx-mark* q320c@id) (q2e1a@stx-subst* q320c@id) (q2e1e@stx-ae* q320c@id))))) (set! q2e26@gen-mark (lambda () (string '#\m))) (set! q2e28@anti-mark '#f) (set! q2e2a@anti-mark? not) (set! q2e2c@mkstx (lambda (q3210@e q3211@m* q3212@s* q3213@ae*) (if (and (q2e10@stx? q3210@e) (not (q2dca@top-marked? q3211@m*))) (call-with-values (lambda () (join-wraps q3211@m* q3212@s* q3213@ae* q3210@e)) (lambda (q321e@q3219 q321f@q321b q3220@q321d) ((lambda (q3224@ae* q3225@s* q3226@m*) (make-simple-struct 'stx '5 (list (q2e12@stx-expr q3210@e) q3226@m* q3225@s* q3224@ae*))) q3220@q321d q321f@q321b q321e@q3219))) (make-simple-struct 'stx '5 (list q3210@e q3211@m* q3212@s* q3213@ae*))))) (set! q2e2e@add-mark (lambda (q322a@m q322b@e q322c@ae) (q2e2c@mkstx q322b@e (list q322a@m) '(shift) (list q322c@ae)))) (set! q2e30@add-subst (lambda (q3230@subst q3231@e) (q2e2c@mkstx q3231@e '() (list q3230@subst) '()))) (set! q2e32@syntax-kind? (lambda (q3234@x q3235@p?) (if (q2e10@stx? q3234@x) (q2e32@syntax-kind? (q2e12@stx-expr q3234@x) q3235@p?) (if (q2998@q286c@annotation? q3234@x) (q2e32@syntax-kind? (q299a@q2870@annotation-expression q3234@x) q3235@p?) (q3235@p? q3234@x))))) (set! q2e34@syntax-vector->list (lambda (q3238@x) (if (q2e10@stx? q3238@x) ((lambda (q323a@ls q323b@m* q323c@s* q323d@ae*) (map (lambda (q3242@x) (q2e2c@mkstx q3242@x q323b@m* q323c@s* q323d@ae*)) q323a@ls)) (q2e34@syntax-vector->list (q2e12@stx-expr q3238@x)) (q2e16@stx-mark* q3238@x) (q2e1a@stx-subst* q3238@x) (q2e1e@stx-ae* q3238@x)) (if (q2998@q286c@annotation? q3238@x) (q2e34@syntax-vector->list (q299a@q2870@annotation-expression q3238@x)) (if (vector? q3238@x) (vector->list q3238@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" q3238@x)))))) (set! q2e36@syntax-pair? (lambda (q3244@x) (q2e32@syntax-kind? q3244@x pair?))) (set! q2e38@syntax-vector? (lambda (q3246@x) (q2e32@syntax-kind? q3246@x vector?))) (set! q2e3a@syntax-null? (lambda (q3248@x) (q2e32@syntax-kind? q3248@x null?))) (set! q2e3c@syntax-list? (lambda (q324a@x) (or (q2e3a@syntax-null? q324a@x) (and (q2e36@syntax-pair? q324a@x) (q2e3c@syntax-list? (q2e40@syntax-cdr q324a@x)))))) (set! q2e3e@syntax-car (lambda (q324c@x) (if (q2e10@stx? q324c@x) (q2e2c@mkstx (q2e3e@syntax-car (q2e12@stx-expr q324c@x)) (q2e16@stx-mark* q324c@x) (q2e1a@stx-subst* q324c@x) (q2e1e@stx-ae* q324c@x)) (if (q2998@q286c@annotation? q324c@x) (q2e3e@syntax-car (q299a@q2870@annotation-expression q324c@x)) (if (pair? q324c@x) (car q324c@x) (assertion-violation 'syntax-car '"BUG: not a pair" q324c@x)))))) (set! q2e40@syntax-cdr (lambda (q324e@x) (if (q2e10@stx? q324e@x) (q2e2c@mkstx (q2e40@syntax-cdr (q2e12@stx-expr q324e@x)) (q2e16@stx-mark* q324e@x) (q2e1a@stx-subst* q324e@x) (q2e1e@stx-ae* q324e@x)) (if (q2998@q286c@annotation? q324e@x) (q2e40@syntax-cdr (q299a@q2870@annotation-expression q324e@x)) (if (pair? q324e@x) (cdr q324e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" q324e@x)))))) (set! q2e42@syntax->list (lambda (q3250@x) (if (q2e36@syntax-pair? q3250@x) (cons (q2e3e@syntax-car q3250@x) (q2e42@syntax->list (q2e40@syntax-cdr q3250@x))) (if (q2e3a@syntax-null? q3250@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" q3250@x))))) (set! q2e44@id? (lambda (q3252@x) (and (q2e10@stx? q3252@x) (symbol? (q2e12@stx-expr q3252@x))))) (set! q2e46@id->sym (lambda (q3254@x) (q2e12@stx-expr q3254@x))) (set! q2e48@bound-id=? (lambda (q3256@x q3257@y) (and (eq? (q2e46@id->sym q3256@x) (q2e46@id->sym q3257@y)) (same-marks? (q2e16@stx-mark* q3256@x) (q2e16@stx-mark* q3257@y))))) (set! q2e4a@free-id=? (lambda (q325a@i q325b@j) ((lambda (q325e@t0 q325f@t1) (if (or q325e@t0 q325f@t1) (eq? q325e@t0 q325f@t1) (eq? (q2e46@id->sym q325a@i) (q2e46@id->sym q325b@j)))) (id->real-label q325a@i) (id->real-label q325b@j)))) (set! q2e4c@valid-bound-ids? (lambda (q3262@id*) (and (for-all q2e44@id? q3262@id*) (q2e4e@distinct-bound-ids? q3262@id*)))) (set! q2e4e@distinct-bound-ids? (lambda (q3264@id*) (or (null? q3264@id*) (and (not (q2e50@bound-id-member? (car q3264@id*) (cdr q3264@id*))) (q2e4e@distinct-bound-ids? (cdr q3264@id*)))))) (set! q2e50@bound-id-member? (lambda (q3266@id q3267@id*) (and (pair? q3267@id*) (or (q2e48@bound-id=? q3266@id (car q3267@id*)) (q2e50@bound-id-member? q3266@id (cdr q3267@id*)))))) (set! q2e52@self-evaluating? (lambda (q326a@x) (or (number? q326a@x) (string? q326a@x) (char? q326a@x) (boolean? q326a@x) (regexp? q326a@x) (bytevector? q326a@x)))) (set! q2e54@strip-annotations (lambda (q326c@x) (if (pair? q326c@x) (cons (q2e54@strip-annotations (car q326c@x)) (q2e54@strip-annotations (cdr q326c@x))) (if (vector? q326c@x) (vector-map q2e54@strip-annotations q326c@x) (if (q2998@q286c@annotation? q326c@x) (q2997@q286a@annotation-stripped q326c@x) q326c@x))))) (set! q2e56@strip (lambda (q326e@x q326f@m*) (if (q2dca@top-marked? q326f@m*) (if (or (q2998@q286c@annotation? q326e@x) (and (pair? q326e@x) (q2998@q286c@annotation? (car q326e@x))) (and (vector? q326e@x) (> (vector-length q326e@x) '0) (q2998@q286c@annotation? (vector-ref q326e@x '0)))) (q2e54@strip-annotations q326e@x) q326e@x) ((letrec ((q3272@f (lambda (q3274@x) (if (q2e10@stx? q3274@x) (q2e56@strip (q2e12@stx-expr q3274@x) (q2e16@stx-mark* q3274@x)) (if (q2998@q286c@annotation? q3274@x) (q2997@q286a@annotation-stripped q3274@x) (if (pair? q3274@x) ((lambda (q3276@a q3277@d) (if (and (eq? q3276@a (car q3274@x)) (eq? q3277@d (cdr q3274@x))) q3274@x (cons q3276@a q3277@d))) (q3272@f (car q3274@x)) (q3272@f (cdr q3274@x))) (if (vector? q3274@x) ((lambda (q327a@old) ((lambda (q327c@new) (if (for-all eq? q327a@old q327c@new) q3274@x (list->vector q327c@new))) (map q3272@f q327a@old))) (vector->list q3274@x)) q3274@x))))))) q3272@f) q326e@x)))) (set! q2e58@stx->datum (lambda (q327e@x) (q2e56@strip q327e@x '()))) (set! q2e5a@id->label (lambda (q3280@id) (or (id->real-label q3280@id) ((lambda (q3282@t) (if q3282@t ((lambda (q3284@env) ((lambda (q3286@rib) (call-with-values (lambda () (q2dd4@gen-define-label+loc q3280@id q3286@rib)) (lambda (q328c@q3289 q328d@q328b) ((lambda (q3290@loc_ q3291@lab) (begin (q2dfa@extend-rib! q3286@rib q3280@id q3291@lab) q3291@lab)) q328d@q328b q328c@q3289)))) (q30e9@interaction-env-rib q3284@env))) q3282@t) '#f)) (q3137@top-level-context))))) (set! q2e5c@label->binding (lambda (q3294@x q3295@r) ((lambda (q3298@t) (if q3298@t ((lambda (q329a@b) (if (and (pair? q329a@b) (eq? (car q329a@b) '$core-rtd)) (cons '$rtd (map q2fff@bless (cdr q329a@b))) (if (and (pair? q329a@b) (eq? (car q329a@b) 'global-rtd)) ((lambda (q329c@lib q329d@loc) (cons '$rtd (symbol-value q329d@loc))) (cadr q329a@b) (cddr q329a@b)) q329a@b))) q3298@t) ((lambda (q32a0@t) (if q32a0@t (cdr q32a0@t) ((lambda (q32a2@t) (if q32a2@t ((lambda (q32a4@env) ((lambda (q32a6@t) (if q32a6@t ((lambda (q32a8@p) (cons* 'lexical (cdr q32a8@p) '#f)) q32a6@t) '(displaced-lexical . #f))) (assq q3294@x (q30f1@interaction-env-locs q32a4@env)))) q32a2@t) '(displaced-lexical . #f))) (q3137@top-level-context)))) (assq q3294@x q3295@r)))) (q2c6e@q2abb@imported-label->binding q3294@x)))) (set! q2e5e@make-binding cons) (set! q2e60@binding-type car) (set! q2e62@binding-value cdr) (set! q2e64@raise-unbound-error (lambda (q32aa@id) (q3127@syntax-violation* '#f '"unbound identifier" q32aa@id (q4e88@q4cce@make-undefined-violation)))) (set! q2e66@syntax-type (lambda (q32ac@e q32ad@r) (if (q2e44@id? q32ac@e) ((lambda (q32b0@id) ((lambda (q32b2@label) ((lambda (q32b4@b) ((lambda (q32b6@type) ((lambda () (begin (if (not q32b2@label) (q2e64@raise-unbound-error q32b0@id) (void)) ((lambda (q32b8@t) (if (memv q32b8@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values q32b6@type (q2e62@binding-value q32b4@b) q32b0@id) (values 'other '#f '#f))) q32b6@type))))) (q2e60@binding-type q32b4@b))) (q2e5c@label->binding q32b2@label q32ad@r))) (q2e5a@id->label q32b0@id))) q32ac@e) (if (q2e36@syntax-pair? q32ac@e) ((lambda (q32ba@id) (if (q2e44@id? q32ba@id) ((lambda (q32bc@label) ((lambda (q32be@b) ((lambda (q32c0@type) ((lambda () (begin (if (not q32bc@label) (q2e64@raise-unbound-error q32ba@id) (void)) ((lambda (q32c2@t) (if (memv q32c2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values q32c0@type (q2e62@binding-value q32be@b) q32ba@id) (values 'call '#f '#f))) q32c0@type))))) (q2e60@binding-type q32be@b))) (q2e5c@label->binding q32bc@label q32ad@r))) (q2e5a@id->label q32ba@id)) (values 'call '#f '#f))) (q2e3e@syntax-car q32ac@e)) ((lambda (q32c4@d) (if (q2e52@self-evaluating? q32c4@d) (values 'constant q32c4@d '#f) (values 'other '#f '#f))) (q2e58@stx->datum q32ac@e)))))) (set! q2e74@sanitize-binding (lambda (q32c6@x q32c7@src) (if (procedure? q32c6@x) (cons* 'local-macro q32c6@x q32c7@src) (if (and (pair? q32c6@x) (eq? (car q32c6@x) 'macro!) (procedure? (cdr q32c6@x))) (cons* 'local-macro! (cdr q32c6@x) q32c7@src) (if (and (pair? q32c6@x) (eq? (car q32c6@x) '$rtd)) q32c6@x (assertion-violation 'expand '"invalid transformer" q32c6@x)))))) (set! q2e76@make-variable-transformer (lambda (q32ca@x) (if (procedure? q32ca@x) (cons 'macro! q32ca@x) (assertion-violation 'make-variable-transformer '"not a procedure" q32ca@x)))) (set! q2e78@variable-transformer? (lambda (q32cc@x) (and (pair? q32cc@x) (eq? (car q32cc@x) 'macro!) (procedure? (cdr q32cc@x))))) (set! q2e7a@variable-transformer-procedure (lambda (q32ce@x) (if (q2e78@variable-transformer? q32ce@x) (cdr q32ce@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" q32ce@x)))) (set! q2e7c@make-eval-transformer (lambda (q32d0@x) (q2e74@sanitize-binding (eval-core (q29f9@q29b1@expanded->core q32d0@x)) q32d0@x))) (set! q2fcd@parse-define (lambda (q32d2@x) ((lambda (q32d4@t) ((lambda (q32d6@ls/false) (if (and q32d6@ls/false (apply (lambda (q32d8@id q32d9@fmls q32da@b q32db@b*) (q2e44@id? q32d8@id)) q32d6@ls/false)) (apply (lambda (q32e0@id q32e1@fmls q32e2@b q32e3@b*) (begin (q306f@verify-formals q32e1@fmls q32d2@x) (values q32e0@id (cons 'defun (cons q32e1@fmls (cons q32e2@b q32e3@b*)))))) q32d6@ls/false) ((lambda (q32e8@t) ((lambda (q32ea@ls/false) (if (and q32ea@ls/false (apply (lambda (q32ec@id q32ed@val) (q2e44@id? q32ec@id)) q32ea@ls/false)) (apply (lambda (q32f0@id q32f1@val) (values q32f0@id (cons 'expr q32f1@val))) q32ea@ls/false) ((lambda (q32f4@t) ((lambda (q32f6@ls/false) (if (and q32f6@ls/false (apply (lambda (q32f8@id) (q2e44@id? q32f8@id)) q32f6@ls/false)) (apply (lambda (q32fa@id) (values q32fa@id (cons 'expr (q2fff@bless '(void))))) q32f6@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q32f4@t))) (q3049@syntax-dispatch q32f4@t '(_ any)))) q32e8@t))) (q3049@syntax-dispatch q32e8@t '(_ any any)))) q32d4@t))) (q3049@syntax-dispatch q32d4@t '(_ (any . any) any . each-any)))) q32d2@x))) (set! q2fcf@parse-define-syntax (lambda (q32fc@x) ((lambda (q32fe@t) ((lambda (q3300@ls/false) (if (and q3300@ls/false (apply (lambda (q3302@id q3303@val) (q2e44@id? q3302@id)) q3300@ls/false)) (apply (lambda (q3306@id q3307@val) (values q3306@id q3307@val)) q3300@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q32fe@t))) (q3049@syntax-dispatch q32fe@t '(_ any any)))) q32fc@x))) (set! q2fd1@scheme-stx-hashtable (make-eq-hashtable)) (set! q2fd3@scheme-stx (lambda (q330a@sym) (or (hashtable-ref q2fd1@scheme-stx-hashtable q330a@sym '#f) ((lambda (q330c@subst) ((lambda (q330e@stx) ((lambda (q3310@stx) ((lambda () (begin (hashtable-set! q2fd1@scheme-stx-hashtable q330a@sym q3310@stx) q3310@stx)))) ((lambda (q3312@t) (if q3312@t ((lambda (q3314@x) ((lambda (q3316@name q3317@label) (q2e30@add-subst (make-simple-struct 'rib '6 (list (list q3316@name) (list q2dc8@top-mark*) (list q3317@label) '#f '#f)) q330e@stx)) (car q3314@x) (cdr q3314@x))) q3312@t) q330e@stx)) (assq q330a@sym q330c@subst)))) (make-simple-struct 'stx '5 (list q330a@sym q2dc8@top-mark* '() '())))) (q2c4a@q2a73@library-subst (q2c68@q2aaf@find-library-by-name '(psyntax system $all))))))) (set! q2fd5@lexical-var car) (set! q2fd7@lexical-mutable? cdr) (set! q2fd9@set-lexical-mutable! set-cdr!) (set! q2fdb@add-lexical (lambda (q331a@lab q331b@lex q331c@r) (cons (cons* q331a@lab 'lexical q331b@lex '#f) q331c@r))) (set! q2fdd@add-lexicals (lambda (q3320@lab* q3321@lex* q3322@r) (if (null? q3320@lab*) q3322@r (q2fdd@add-lexicals (cdr q3320@lab*) (cdr q3321@lex*) (q2fdb@add-lexical (car q3320@lab*) (car q3321@lex*) q3322@r))))) (set! q2fdf@letrec-helper (lambda (q3326@e q3327@r q3328@mr q3329@build) ((lambda (q332e@t) ((lambda (q3330@ls/false) (if q3330@ls/false (apply (lambda (q3332@lhs* q3333@rhs* q3334@b q3335@b*) (if (not (q2e4c@valid-bound-ids? q3332@lhs*)) (q3003@invalid-fmls-error q3326@e q3332@lhs*) ((lambda (q333a@lex* q333b@lab*) ((lambda (q333e@rib q333f@r) ((lambda (q3342@body q3343@rhs*) (q3329@build '#f q333a@lex* q3343@rhs* q3342@body)) (q3081@chi-internal (q2e30@add-subst q333e@rib (cons q3334@b q3335@b*)) q333f@r q3328@mr) (q3067@chi-expr* (map (lambda (q3346@x) (q2e30@add-subst q333e@rib q3346@x)) q3333@rhs*) q333f@r q3328@mr))) (q2e04@make-full-rib q3332@lhs* q333b@lab*) (q2fdd@add-lexicals q333b@lab* q333a@lex* q3327@r))) (map q2dcc@gen-lexical q3332@lhs*) (map q2dd0@gen-label q3332@lhs*)))) q3330@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q332e@t))) (q3049@syntax-dispatch q332e@t '(_ #(each (any any)) any . each-any)))) q3326@e))) (set! q2fe1@letrec-transformer (lambda (q3348@e q3349@r q334a@mr) (q2fdf@letrec-helper q3348@e q3349@r q334a@mr q2dad@q2d1e@build-letrec))) (set! q2fe3@letrec*-transformer (lambda (q334e@e q334f@r q3350@mr) (q2fdf@letrec-helper q334e@e q334f@r q3350@mr q2dae@q2d20@build-letrec*))) (set! q2fe5@fluid-let-syntax-transformer (lambda (q3354@e q3355@r q3356@mr) ((lambda (q335b@lookup) (begin (set! q335b@lookup (lambda (q336e@x) (or (q2e5a@id->label q336e@x) (q3129@syntax-violation '#f '"unbound identifier" q3354@e q336e@x)))) ((lambda (q335c@t) ((lambda (q335e@ls/false) (if q335e@ls/false (apply (lambda (q3360@lhs* q3361@rhs* q3362@b q3363@b*) (if (not (q2e4c@valid-bound-ids? q3360@lhs*)) (q3003@invalid-fmls-error q3354@e q3360@lhs*) ((lambda (q3368@lab* q3369@rhs*) (q3081@chi-internal (cons q3362@b q3363@b*) (append (map cons q3368@lab* q3369@rhs*) q3355@r) (append (map cons q3368@lab* q3369@rhs*) q3356@mr))) (map q335b@lookup q3360@lhs*) (map (lambda (q336c@x) (q2e7c@make-eval-transformer (q30a3@expand-transformer q336c@x q3356@mr))) q3361@rhs*)))) q335e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q335c@t))) (q3049@syntax-dispatch q335c@t '(_ #(each (any any)) any . each-any)))) q3354@e))) '#f))) (set! q2fe7@type-descriptor-transformer (lambda (q3370@e q3371@r q3372@mr) ((lambda (q3376@t) ((lambda (q3378@ls/false) (if (and q3378@ls/false (apply (lambda (q337a@id) (q2e44@id? q337a@id)) q3378@ls/false)) (apply (lambda (q337c@id) ((lambda (q337e@lab) ((lambda (q3380@b) ((lambda (q3382@type) ((lambda () (begin (if (not q337e@lab) (q2e64@raise-unbound-error q337c@id) (void)) (if (not (and (eq? q3382@type '$rtd) (not (list? (q2e62@binding-value q3380@b))))) (q3129@syntax-violation '#f '"not a record type" q3370@e) (void)) (list 'quote (q2e62@binding-value q3380@b)))))) (q2e60@binding-type q3380@b))) (q2e5c@label->binding q337e@lab q3371@r))) (q2e5a@id->label q337c@id))) q3378@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3376@t))) (q3049@syntax-dispatch q3376@t '(_ any)))) q3370@e))) (set! q2fe9@record-type-descriptor-transformer (lambda (q3384@e q3385@r q3386@mr) ((lambda (q338a@t) ((lambda (q338c@ls/false) (if (and q338c@ls/false (apply (lambda (q338e@id) (q2e44@id? q338e@id)) q338c@ls/false)) (apply (lambda (q3390@id) ((lambda (q3392@lab) ((lambda (q3394@b) ((lambda (q3396@type) ((lambda () (begin (if (not q3392@lab) (q2e64@raise-unbound-error q3390@id) (void)) (if (not (and (eq? q3396@type '$rtd) (list? (q2e62@binding-value q3394@b)))) (q3129@syntax-violation '#f '"not a record type" q3384@e) (void)) (q306b@chi-expr (car (q2e62@binding-value q3394@b)) q3385@r q3386@mr))))) (q2e60@binding-type q3394@b))) (q2e5c@label->binding q3392@lab q3385@r))) (q2e5a@id->label q3390@id))) q338c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q338a@t))) (q3049@syntax-dispatch q338a@t '(_ any)))) q3384@e))) (set! q2feb@record-constructor-descriptor-transformer (lambda (q3398@e q3399@r q339a@mr) ((lambda (q339e@t) ((lambda (q33a0@ls/false) (if (and q33a0@ls/false (apply (lambda (q33a2@id) (q2e44@id? q33a2@id)) q33a0@ls/false)) (apply (lambda (q33a4@id) ((lambda (q33a6@lab) ((lambda (q33a8@b) ((lambda (q33aa@type) ((lambda () (begin (if (not q33a6@lab) (q2e64@raise-unbound-error q33a4@id) (void)) (if (not (and (eq? q33aa@type '$rtd) (list? (q2e62@binding-value q33a8@b)))) (q3129@syntax-violation '#f '"invalid type" q3398@e) (void)) (q306b@chi-expr (cadr (q2e62@binding-value q33a8@b)) q3399@r q339a@mr))))) (q2e60@binding-type q33a8@b))) (q2e5c@label->binding q33a6@lab q3399@r))) (q2e5a@id->label q33a4@id))) q33a0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q339e@t))) (q3049@syntax-dispatch q339e@t '(_ any)))) q3398@e))) (set! q2fed@when-macro (lambda (q33ac@e) ((lambda (q33ae@t) ((lambda (q33b0@ls/false) (if q33b0@ls/false (apply (lambda (q33b2@test q33b3@e q33b4@e*) (q2fff@bless (list 'if q33b2@test (cons 'begin (cons q33b3@e q33b4@e*))))) q33b0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q33ae@t))) (q3049@syntax-dispatch q33ae@t '(_ any any . each-any)))) q33ac@e))) (set! q2fef@unless-macro (lambda (q33b8@e) ((lambda (q33ba@t) ((lambda (q33bc@ls/false) (if q33bc@ls/false (apply (lambda (q33be@test q33bf@e q33c0@e*) (q2fff@bless (list 'if (list 'not q33be@test) (cons 'begin (cons q33bf@e q33c0@e*))))) q33bc@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q33ba@t))) (q3049@syntax-dispatch q33ba@t '(_ any any . each-any)))) q33b8@e))) (set! q2ff1@if-transformer (lambda (q33c4@e q33c5@r q33c6@mr) ((lambda (q33ca@t) ((lambda (q33cc@ls/false) (if q33cc@ls/false (apply (lambda (q33ce@e0 q33cf@e1 q33d0@e2) (list 'if (q306b@chi-expr q33ce@e0 q33c5@r q33c6@mr) (q306b@chi-expr q33cf@e1 q33c5@r q33c6@mr) (q306b@chi-expr q33d0@e2 q33c5@r q33c6@mr))) q33cc@ls/false) ((lambda (q33d4@t) ((lambda (q33d6@ls/false) (if q33d6@ls/false (apply (lambda (q33d8@e0 q33d9@e1) (list 'if (q306b@chi-expr q33d8@e0 q33c5@r q33c6@mr) (q306b@chi-expr q33d9@e1 q33c5@r q33c6@mr) (q2dac@q2d1c@build-void))) q33d6@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q33d4@t))) (q3049@syntax-dispatch q33d4@t '(_ any any)))) q33ca@t))) (q3049@syntax-dispatch q33ca@t '(_ any any any)))) q33c4@e))) (set! q2ff3@and-transformer (lambda (q33dc@e q33dd@r q33de@mr) ((lambda (q33e2@t) ((lambda (q33e4@ls/false) (if q33e4@ls/false (apply (lambda (q33e6@e*) (cons 'and (q3067@chi-expr* q33e6@e* q33dd@r q33de@mr))) q33e4@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q33e2@t))) (q3049@syntax-dispatch q33e2@t '(_ . each-any)))) q33dc@e))) (set! q2ff5@or-transformer (lambda (q33e8@e q33e9@r q33ea@mr) ((lambda (q33ee@t) ((lambda (q33f0@ls/false) (if q33f0@ls/false (apply (lambda (q33f2@e*) (cons 'or (q3067@chi-expr* q33f2@e* q33e9@r q33ea@mr))) q33f0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q33ee@t))) (q3049@syntax-dispatch q33ee@t '(_ . each-any)))) q33e8@e))) (set! q2ff7@case-macro (lambda (q33f4@e) ((lambda (q33f7@build-last q33f9@build-one) (begin (set! q33f7@build-last (lambda (q341e@cls) ((lambda (q3420@t) ((lambda (q3422@ls/false) (if q3422@ls/false (apply (lambda (q3424@e q3425@e*) (cons 'begin (cons q3424@e q3425@e*))) q3422@ls/false) ((lambda (q3428@t) ((lambda (q342a@ls/false) (if q342a@ls/false (apply (lambda () (q33f9@build-one q341e@cls '(if #f #f))) q342a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3428@t))) (q3049@syntax-dispatch q3428@t '_))) q3420@t))) (q3049@syntax-dispatch q3420@t '(#(scheme-id else) any . each-any)))) q341e@cls))) (set! q33f9@build-one (lambda (q3410@cls q3411@k) ((lambda (q3414@t) ((lambda (q3416@ls/false) (if q3416@ls/false (apply (lambda (q3418@d* q3419@e q341a@e*) (list 'if (list 'memv 't (list 'quote q3418@d*)) (cons 'begin (cons q3419@e q341a@e*)) q3411@k)) q3416@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3414@t))) (q3049@syntax-dispatch q3414@t '(each-any any . each-any)))) q3410@cls))) ((lambda (q33fa@t) ((lambda (q33fc@ls/false) (if q33fc@ls/false (apply (lambda (q33fe@expr) (q2fff@bless (cons 'let (cons (list (list 't q33fe@expr)) '((if #f #f)))))) q33fc@ls/false) ((lambda (q3400@t) ((lambda (q3402@ls/false) (if q3402@ls/false (apply (lambda (q3404@expr q3405@cls q3406@cls*) (q2fff@bless (list 'let (list (list 't q3404@expr)) ((letrec ((q340a@f (lambda (q340c@cls q340d@cls*) (if (null? q340d@cls*) (q33f7@build-last q340c@cls) (q33f9@build-one q340c@cls (q340a@f (car q340d@cls*) (cdr q340d@cls*))))))) q340a@f) q3405@cls q3406@cls*)))) q3402@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3400@t))) (q3049@syntax-dispatch q3400@t '(_ any any . each-any)))) q33fa@t))) (q3049@syntax-dispatch q33fa@t '(_ any)))) q33f4@e))) '#f '#f))) (set! q2ff9@quote-transformer (lambda (q342c@e q342d@r q342e@mr) ((lambda (q3432@t) ((lambda (q3434@ls/false) (if q3434@ls/false (apply (lambda (q3436@datum) (list 'quote (q2e58@stx->datum q3436@datum))) q3434@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3432@t))) (q3049@syntax-dispatch q3432@t '(_ any)))) q342c@e))) (set! q2ffb@case-lambda-transformer (lambda (q3438@e q3439@r q343a@mr) ((lambda (q343e@t) ((lambda (q3440@ls/false) (if q3440@ls/false (apply (lambda (q3442@fmls* q3443@b* q3444@b**) (call-with-values (lambda () (q3073@chi-lambda-clause* q3438@e q3442@fmls* (map cons q3443@b* q3444@b**) q3439@r q343a@mr)) (lambda (q344c@q3449 q344d@q344b) ((lambda (q3450@body* q3451@fmls*) (q2da9@q2cea@build-case-lambda '#f q3451@fmls* q3450@body*)) q344d@q344b q344c@q3449)))) q3440@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q343e@t))) (q3049@syntax-dispatch q343e@t '(_ . #(each (any any . each-any)))))) q3438@e))) (set! q2ffd@lambda-transformer (lambda (q3454@e q3455@r q3456@mr) ((lambda (q345a@t) ((lambda (q345c@ls/false) (if q345c@ls/false (apply (lambda (q345e@fmls q345f@b q3460@b*) (call-with-values (lambda () (q3071@chi-lambda-clause q3454@e q345e@fmls (cons q345f@b q3460@b*) q3455@r q3456@mr)) (lambda (q3468@q3465 q3469@q3467) ((lambda (q346c@body q346d@fmls) (q2da8@q2ce8@build-lambda '#f q346d@fmls q346c@body)) q3469@q3467 q3468@q3465)))) q345c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q345a@t))) (q3049@syntax-dispatch q345a@t '(_ any any . each-any)))) q3454@e))) (set! q2fff@bless (lambda (q3470@x) (q2e2c@mkstx ((letrec ((q3472@f (lambda (q3474@x) (if (q2e10@stx? q3474@x) q3474@x (if (pair? q3474@x) (cons (q3472@f (car q3474@x)) (q3472@f (cdr q3474@x))) (if (symbol? q3474@x) (q2fd3@scheme-stx q3474@x) (if (vector? q3474@x) (vector-map q3472@f q3474@x) q3474@x))))))) q3472@f) q3470@x) '() '() '()))) (set! q3001@with-syntax-macro (lambda (q3476@e) ((lambda (q3478@t) ((lambda (q347a@ls/false) (if q347a@ls/false (apply (lambda (q347c@pat* q347d@expr* q347e@b q347f@b*) ((lambda (q3484@idn*) (begin (q306f@verify-formals (map car q3484@idn*) q3476@e) ((lambda (q3486@t*) (q2fff@bless (list 'let (map list q3486@t* q347d@expr*) ((letrec ((q3488@f (lambda (q348a@pat* q348b@t*) (if (null? q348a@pat*) (cons 'begin (cons '#f (cons q347e@b q347f@b*))) (list 'syntax-case (car q348b@t*) '() (list (car q348a@pat*) (q3488@f (cdr q348a@pat*) (cdr q348b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car q348a@pat*)) (car q348b@t*)))))))) q3488@f) q347c@pat* q3486@t*)))) (q3117@generate-temporaries q347d@expr*)))) ((letrec ((q348e@f (lambda (q3490@pat*) (if (null? q3490@pat*) '() (call-with-values (lambda () (q3047@convert-pattern (car q3490@pat*) '())) (lambda (q3496@q3493 q3497@q3495) ((lambda (q349a@idn* q349b@pat) (append q349a@idn* (q348e@f (cdr q3490@pat*)))) q3497@q3495 q3496@q3493))))))) q348e@f) q347c@pat*))) q347a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3478@t))) (q3049@syntax-dispatch q3478@t '(_ #(each (any any)) any . each-any)))) q3476@e))) (set! q3003@invalid-fmls-error (lambda (q349e@stx q349f@fmls) ((lambda (q34a2@t) ((lambda (q34a4@ls/false) (if q34a4@ls/false (apply (lambda (q34a6@id* q34a7@last) ((letrec ((q34aa@f (lambda (q34ac@id*) (if (null? q34ac@id*) (values) (if (not (q2e44@id? (car q34ac@id*))) (q3129@syntax-violation '#f '"not an identifier" q349e@stx (car q34ac@id*)) (begin (q34aa@f (cdr q34ac@id*)) (if (q2e50@bound-id-member? (car q34ac@id*) (cdr q34ac@id*)) (q3129@syntax-violation '#f '"duplicate binding" q349e@stx (car q34ac@id*)) (void)))))))) q34aa@f) (if (q2e44@id? q34a7@last) (cons q34a7@last q34a6@id*) (if (q2e3a@syntax-null? q34a7@last) q34a6@id* (q3129@syntax-violation '#f '"not an identifier" q349e@stx q34a7@last))))) q34a4@ls/false) ((lambda (q34ae@t) ((lambda (q34b0@ls/false) (if q34b0@ls/false (apply (lambda () (q3129@syntax-violation '#f '"malformed binding form" q349e@stx q349f@fmls)) q34b0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q34ae@t))) (q3049@syntax-dispatch q34ae@t '_))) q34a2@t))) (q3049@syntax-dispatch q34a2@t '#(each+ any () any)))) q349f@fmls))) (set! q3005@let-macro (lambda (q34b2@stx) ((lambda (q34b4@t) ((lambda (q34b6@ls/false) (if q34b6@ls/false (apply (lambda (q34b8@lhs* q34b9@rhs* q34ba@b q34bb@b*) (if (q2e4c@valid-bound-ids? q34b8@lhs*) (q2fff@bless (cons (cons 'lambda (cons q34b8@lhs* (cons q34ba@b q34bb@b*))) q34b9@rhs*)) (q3003@invalid-fmls-error q34b2@stx q34b8@lhs*))) q34b6@ls/false) ((lambda (q34c0@t) ((lambda (q34c2@ls/false) (if (and q34c2@ls/false (apply (lambda (q34c4@f q34c5@lhs* q34c6@rhs* q34c7@b q34c8@b*) (q2e44@id? q34c4@f)) q34c2@ls/false)) (apply (lambda (q34ce@f q34cf@lhs* q34d0@rhs* q34d1@b q34d2@b*) (if (q2e4c@valid-bound-ids? q34cf@lhs*) (q2fff@bless (cons (list 'letrec (list (list q34ce@f (cons 'lambda (cons q34cf@lhs* (cons q34d1@b q34d2@b*))))) q34ce@f) q34d0@rhs*)) (q3003@invalid-fmls-error q34b2@stx q34cf@lhs*))) q34c2@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q34c0@t))) (q3049@syntax-dispatch q34c0@t '(_ any #(each (any any)) any . each-any)))) q34b4@t))) (q3049@syntax-dispatch q34b4@t '(_ #(each (any any)) any . each-any)))) q34b2@stx))) (set! q3007@let-values-macro (lambda (q34d8@stx) ((lambda (q34db@rename q34dd@rename*) (begin (set! q34db@rename (lambda (q3540@x q3541@old* q3542@new*) (begin (if (not (q2e44@id? q3540@x)) (q3129@syntax-violation '#f '"not an indentifier" q34d8@stx q3540@x) (void)) (if (q2e50@bound-id-member? q3540@x q3541@old*) (q3129@syntax-violation '#f '"duplicate binding" q34d8@stx q3540@x) (void)) ((lambda (q3546@y) (values q3546@y (cons q3540@x q3541@old*) (cons q3546@y q3542@new*))) (gensym (q312f@syntax->datum q3540@x)))))) (set! q34dd@rename* (lambda (q352e@x* q352f@old* q3530@new*) (if (null? q352e@x*) (values '() q352f@old* q3530@new*) (call-with-values (lambda () (q34db@rename (car q352e@x*) q352f@old* q3530@new*)) (lambda (q3534@x q3535@old* q3536@new*) (call-with-values (lambda () (q34dd@rename* (cdr q352e@x*) q3535@old* q3536@new*)) (lambda (q353a@x* q353b@old* q353c@new*) (values (cons q3534@x q353a@x*) q353b@old* q353c@new*)))))))) ((lambda (q34de@t) ((lambda (q34e0@ls/false) (if q34e0@ls/false (apply (lambda (q34e2@b q34e3@b*) (cons* (q2fff@bless 'let) '() q34e2@b q34e3@b*)) q34e0@ls/false) ((lambda (q34e6@t) ((lambda (q34e8@ls/false) (if q34e8@ls/false (apply (lambda (q34ea@lhs* q34eb@rhs* q34ec@b q34ed@b*) (q2fff@bless ((letrec ((q34f2@f (lambda (q34f4@lhs* q34f5@rhs* q34f6@old* q34f7@new*) (if (null? q34f4@lhs*) (cons 'let (cons (map list q34f6@old* q34f7@new*) (cons q34ec@b q34ed@b*))) ((lambda (q34fc@t) ((lambda (q34fe@ls/false) (if q34fe@ls/false (apply (lambda (q3500@x*) (call-with-values (lambda () (q34dd@rename* q3500@x* q34f6@old* q34f7@new*)) (lambda (q3508@q3503 q3509@q3505 q350a@q3507) ((lambda (q350e@new* q350f@old* q3510@y*) (list 'call-with-values (list 'lambda '() (car q34f5@rhs*)) (list 'lambda q3510@y* (q34f2@f (cdr q34f4@lhs*) (cdr q34f5@rhs*) q350f@old* q350e@new*)))) q350a@q3507 q3509@q3505 q3508@q3503)))) q34fe@ls/false) ((lambda (q3514@t) ((lambda (q3516@ls/false) (if q3516@ls/false (apply (lambda (q3518@x* q3519@x) (call-with-values (lambda () (q34db@rename q3519@x q34f6@old* q34f7@new*)) (lambda (q351c@y q351d@old* q351e@new*) (call-with-values (lambda () (q34dd@rename* q3518@x* q351d@old* q351e@new*)) (lambda (q3522@y* q3523@old* q3524@new*) (list 'call-with-values (list 'lambda '() (car q34f5@rhs*)) (list 'lambda (append q3522@y* q351c@y) (q34f2@f (cdr q34f4@lhs*) (cdr q34f5@rhs*) q3523@old* q3524@new*)))))))) q3516@ls/false) ((lambda (q3528@t) ((lambda (q352a@ls/false) (if q352a@ls/false (apply (lambda (q352c@others) (q3129@syntax-violation '#f '"malformed bindings" q34d8@stx q352c@others)) q352a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3528@t))) (q3049@syntax-dispatch q3528@t 'any))) q3514@t))) (q3049@syntax-dispatch q3514@t '#(each+ any () any)))) q34fc@t))) (q3049@syntax-dispatch q34fc@t 'each-any))) (car q34f4@lhs*)))))) q34f2@f) q34ea@lhs* q34eb@rhs* '() '()))) q34e8@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q34e6@t))) (q3049@syntax-dispatch q34e6@t '(_ #(each (any any)) any . each-any)))) q34de@t))) (q3049@syntax-dispatch q34de@t '(_ () any . each-any)))) q34d8@stx))) '#f '#f))) (set! q3009@let*-values-macro (lambda (q3548@stx) ((lambda (q354b@check) (begin (set! q354b@check (lambda (q357a@x*) (if (not (null? q357a@x*)) ((lambda (q357c@x) (begin (if (not (q2e44@id? q357c@x)) (q3129@syntax-violation '#f '"not an identifier" q3548@stx q357c@x) (void)) (q354b@check (cdr q357a@x*)) (if (q2e50@bound-id-member? q357c@x (cdr q357a@x*)) (q3129@syntax-violation '#f '"duplicate identifier" q3548@stx q357c@x) (void)))) (car q357a@x*)) (void)))) ((lambda (q354c@t) ((lambda (q354e@ls/false) (if q354e@ls/false (apply (lambda (q3550@b q3551@b*) (cons* (q2fff@bless 'let) '() q3550@b q3551@b*)) q354e@ls/false) ((lambda (q3554@t) ((lambda (q3556@ls/false) (if q3556@ls/false (apply (lambda (q3558@lhs* q3559@rhs* q355a@b q355b@b*) (q2fff@bless ((letrec ((q3560@f (lambda (q3562@lhs* q3563@rhs*) (if (null? q3562@lhs*) (cons 'begin (cons q355a@b q355b@b*)) ((lambda (q3566@t) ((lambda (q3568@ls/false) (if q3568@ls/false (apply (lambda (q356a@x*) (begin (q354b@check q356a@x*) (list 'call-with-values (list 'lambda '() (car q3563@rhs*)) (list 'lambda q356a@x* (q3560@f (cdr q3562@lhs*) (cdr q3563@rhs*)))))) q3568@ls/false) ((lambda (q356c@t) ((lambda (q356e@ls/false) (if q356e@ls/false (apply (lambda (q3570@x* q3571@x) (begin (q354b@check (cons q3571@x q3570@x*)) (list 'call-with-values (list 'lambda '() (car q3563@rhs*)) (list 'lambda (append q3570@x* q3571@x) (q3560@f (cdr q3562@lhs*) (cdr q3563@rhs*)))))) q356e@ls/false) ((lambda (q3574@t) ((lambda (q3576@ls/false) (if q3576@ls/false (apply (lambda (q3578@others) (q3129@syntax-violation '#f '"malformed bindings" q3548@stx q3578@others)) q3576@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3574@t))) (q3049@syntax-dispatch q3574@t 'any))) q356c@t))) (q3049@syntax-dispatch q356c@t '#(each+ any () any)))) q3566@t))) (q3049@syntax-dispatch q3566@t 'each-any))) (car q3562@lhs*)))))) q3560@f) q3558@lhs* q3559@rhs*))) q3556@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3554@t))) (q3049@syntax-dispatch q3554@t '(_ #(each (any any)) any . each-any)))) q354c@t))) (q3049@syntax-dispatch q354c@t '(_ () any . each-any)))) q3548@stx))) '#f))) (set! q300b@trace-lambda-macro (lambda (q357e@stx) ((lambda (q3580@t) ((lambda (q3582@ls/false) (if q3582@ls/false (apply (lambda (q3584@who q3585@fmls q3586@b q3587@b*) (if (q2e4c@valid-bound-ids? q3585@fmls) (q2fff@bless (list 'make-traced-procedure (list 'quote q3584@who) (cons 'lambda (cons q3585@fmls (cons q3586@b q3587@b*))))) (q3003@invalid-fmls-error q357e@stx q3585@fmls))) q3582@ls/false) ((lambda (q358c@t) ((lambda (q358e@ls/false) (if q358e@ls/false (apply (lambda (q3590@who q3591@fmls q3592@last q3593@b q3594@b*) (if (q2e4c@valid-bound-ids? (cons q3592@last q3591@fmls)) (q2fff@bless (list 'make-traced-procedure (list 'quote q3590@who) (cons 'lambda (cons (append q3591@fmls q3592@last) (cons q3593@b q3594@b*))))) (q3003@invalid-fmls-error q357e@stx (append q3591@fmls q3592@last)))) q358e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q358c@t))) (q3049@syntax-dispatch q358c@t '(_ any #(each+ any () any) any . each-any)))) q3580@t))) (q3049@syntax-dispatch q3580@t '(_ any each-any any . each-any)))) q357e@stx))) (set! q300d@trace-define-macro (lambda (q359a@stx) ((lambda (q359c@t) ((lambda (q359e@ls/false) (if q359e@ls/false (apply (lambda (q35a0@who q35a1@fmls q35a2@b q35a3@b*) (if (q2e4c@valid-bound-ids? q35a1@fmls) (q2fff@bless (list 'define q35a0@who (list 'make-traced-procedure (list 'quote q35a0@who) (cons 'lambda (cons q35a1@fmls (cons q35a2@b q35a3@b*)))))) (q3003@invalid-fmls-error q359a@stx q35a1@fmls))) q359e@ls/false) ((lambda (q35a8@t) ((lambda (q35aa@ls/false) (if q35aa@ls/false (apply (lambda (q35ac@who q35ad@fmls q35ae@last q35af@b q35b0@b*) (if (q2e4c@valid-bound-ids? (cons q35ae@last q35ad@fmls)) (q2fff@bless (list 'define q35ac@who (list 'make-traced-procedure (list 'quote q35ac@who) (cons 'lambda (cons (append q35ad@fmls q35ae@last) (cons q35af@b q35b0@b*)))))) (q3003@invalid-fmls-error q359a@stx (append q35ad@fmls q35ae@last)))) q35aa@ls/false) ((lambda (q35b6@t) ((lambda (q35b8@ls/false) (if q35b8@ls/false (apply (lambda (q35ba@who q35bb@expr) (if (q2e44@id? q35ba@who) (q2fff@bless (list 'define q35ba@who (list 'let (list (list 'v q35bb@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote q35ba@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (q3129@syntax-violation '#f '"invalid name" q359a@stx))) q35b8@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q35b6@t))) (q3049@syntax-dispatch q35b6@t '(_ any any)))) q35a8@t))) (q3049@syntax-dispatch q35a8@t '(_ (any . #(each+ any () any)) any . each-any)))) q359c@t))) (q3049@syntax-dispatch q359c@t '(_ (any . each-any) any . each-any)))) q359a@stx))) (set! q300f@trace-define-syntax-macro (lambda (q35be@stx) ((lambda (q35c0@t) ((lambda (q35c2@ls/false) (if q35c2@ls/false (apply (lambda (q35c4@who q35c5@expr) (if (q2e44@id? q35c4@who) (q2fff@bless (list 'define-syntax q35c4@who (list 'make-traced-macro (list 'quote q35c4@who) q35c5@expr))) (q3129@syntax-violation '#f '"invalid name" q35be@stx))) q35c2@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q35c0@t))) (q3049@syntax-dispatch q35c0@t '(_ any any)))) q35be@stx))) (set! q3011@trace-let/rec-syntax (lambda (q35c8@who) (lambda (q35ca@stx) ((lambda (q35cc@t) ((lambda (q35ce@ls/false) (if q35ce@ls/false (apply (lambda (q35d0@lhs* q35d1@rhs* q35d2@b q35d3@b*) (if (q2e4c@valid-bound-ids? q35d0@lhs*) ((lambda (q35d8@rhs*) (q2fff@bless (cons q35c8@who (cons (map list q35d0@lhs* q35d8@rhs*) (cons q35d2@b q35d3@b*))))) (map (lambda (q35da@lhs q35db@rhs) (list 'make-traced-macro (list 'quote q35da@lhs) q35db@rhs)) q35d0@lhs* q35d1@rhs*)) (q3003@invalid-fmls-error q35ca@stx q35d0@lhs*))) q35ce@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q35cc@t))) (q3049@syntax-dispatch q35cc@t '(_ #(each (any any)) any . each-any)))) q35ca@stx)))) (set! q3013@trace-let-syntax-macro (q3011@trace-let/rec-syntax 'let-syntax)) (set! q3015@trace-letrec-syntax-macro (q3011@trace-let/rec-syntax 'letrec-syntax)) (set! q3017@guard-macro (lambda (q35de@x) ((lambda (q35e1@gen-clauses) (begin (set! q35e1@gen-clauses (lambda (q35f8@con q35f9@outerk q35fa@clause*) ((lambda (q35ff@f q3601@f*) (begin (set! q35ff@f (lambda (q3638@x q3639@k) ((lambda (q363c@t) ((lambda (q363e@ls/false) (if q363e@ls/false (apply (lambda (q3640@e q3641@p) ((lambda (q3644@t) (list 'let (list (list q3644@t q3640@e)) (list 'if q3644@t (list q3641@p q3644@t) q3639@k))) (gensym))) q363e@ls/false) ((lambda (q3646@t) ((lambda (q3648@ls/false) (if q3648@ls/false (apply (lambda (q364a@e) ((lambda (q364c@t) (list 'let (list (list q364c@t q364a@e)) (list 'if q364c@t q364c@t q3639@k))) (gensym))) q3648@ls/false) ((lambda (q364e@t) ((lambda (q3650@ls/false) (if q3650@ls/false (apply (lambda (q3652@e q3653@v q3654@v*) (list 'if q3652@e (cons 'begin (cons q3653@v q3654@v*)) q3639@k)) q3650@ls/false) ((lambda (q3658@t) ((lambda (q365a@ls/false) (if q365a@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid guard clause" q3638@x)) q365a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3658@t))) (q3049@syntax-dispatch q3658@t '_))) q364e@t))) (q3049@syntax-dispatch q364e@t '(any any . each-any)))) q3646@t))) (q3049@syntax-dispatch q3646@t '(any)))) q363c@t))) (q3049@syntax-dispatch q363c@t '(any #(scheme-id =>) any)))) q3638@x))) (set! q3601@f* (lambda (q360e@x*) ((lambda (q3610@t) ((lambda (q3612@ls/false) (if q3612@ls/false (apply (lambda () ((lambda (q3614@g) (values (list q3614@g (list 'lambda '() (list 'raise-continuable q35f8@con))) q3614@g)) (gensym))) q3612@ls/false) ((lambda (q3616@t) ((lambda (q3618@ls/false) (if q3618@ls/false (apply (lambda (q361a@e q361b@e*) (values (cons 'begin (cons q361a@e q361b@e*)) '#f)) q3618@ls/false) ((lambda (q361e@t) ((lambda (q3620@ls/false) (if q3620@ls/false (apply (lambda (q3622@cls q3623@cls*) (call-with-values (lambda () (q3601@f* q3623@cls*)) (lambda (q362a@q3627 q362b@q3629) ((lambda (q362e@g q362f@e) (values (q35ff@f q3622@cls q362f@e) q362e@g)) q362b@q3629 q362a@q3627)))) q3620@ls/false) ((lambda (q3632@t) ((lambda (q3634@ls/false) (if q3634@ls/false (apply (lambda (q3636@others) (q3129@syntax-violation '#f '"invalid guard clause" q3636@others)) q3634@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3632@t))) (q3049@syntax-dispatch q3632@t 'any))) q361e@t))) (q3049@syntax-dispatch q361e@t '(any . any)))) q3616@t))) (q3049@syntax-dispatch q3616@t '((#(scheme-id else) any . each-any))))) q3610@t))) (q3049@syntax-dispatch q3610@t '()))) q360e@x*))) (call-with-values (lambda () (q3601@f* q35fa@clause*)) (lambda (q3606@q3603 q3607@q3605) ((lambda (q360a@raisek q360b@code) (if q360a@raisek (list (list 'call/cc (list 'lambda (list q360a@raisek) (list q35f9@outerk (list 'lambda '() q360b@code))))) (list q35f9@outerk (list 'lambda '() q360b@code)))) q3607@q3605 q3606@q3603))))) '#f '#f))) ((lambda (q35e2@t) ((lambda (q35e4@ls/false) (if (and q35e4@ls/false (apply (lambda (q35e6@con q35e7@clause* q35e8@b q35e9@b*) (q2e44@id? q35e6@con)) q35e4@ls/false)) (apply (lambda (q35ee@con q35ef@clause* q35f0@b q35f1@b*) ((lambda (q35f6@outerk) (q2fff@bless (list (list 'call/cc (list 'lambda (list q35f6@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list q35ee@con) (q35e1@gen-clauses q35ee@con q35f6@outerk q35ef@clause*)) (cons 'lambda (cons '() (cons q35f0@b q35f1@b*)))))))))) (gensym))) q35e4@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q35e2@t))) (q3049@syntax-dispatch q35e2@t '(_ (any . each-any) any . each-any)))) q35de@x))) '#f))) (set! q3019@define-enumeration-macro (lambda (q365c@stx) ((lambda (q365f@set? q3661@remove-dups) (begin (set! q365f@set? (lambda (q3678@x) (or (null? q3678@x) (and (not (memq (car q3678@x) (cdr q3678@x))) (q365f@set? (cdr q3678@x)))))) (set! q3661@remove-dups (lambda (q3676@ls) (if (null? q3676@ls) '() (cons (car q3676@ls) (q3661@remove-dups (remq (car q3676@ls) (cdr q3676@ls))))))) ((lambda (q3662@t) ((lambda (q3664@ls/false) (if (and q3664@ls/false (apply (lambda (q3666@name q3667@id* q3668@maker) (and (q2e44@id? q3666@name) (q2e44@id? q3668@maker) (for-all q2e44@id? q3667@id*))) q3664@ls/false)) (apply (lambda (q366c@name q366d@id* q366e@maker) ((lambda (q3672@name* q3673@mk) (q2fff@bless (list 'begin (list 'define q3673@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote q3672@name*)))) (list 'define-syntax q366c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote q3672@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote q366c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax q366e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote q366e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote q3672@name*)) (cons 'syntax-violation (cons (list 'quote q366e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons q3673@mk '('(n* ...)))))))))))) (q3661@remove-dups (q312f@syntax->datum q366d@id*)) (gensym))) q3664@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3662@t))) (q3049@syntax-dispatch q3662@t '(_ any each-any any)))) q365c@stx))) '#f '#f))) (set! q301b@time-macro (lambda (q367a@stx) ((lambda (q367c@t) ((lambda (q367e@ls/false) (if q367e@ls/false (apply (lambda (q3680@expr) (q2fff@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() q3680@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) q367e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q367c@t))) (q3049@syntax-dispatch q367c@t '(_ any)))) q367a@stx))) (set! q301d@delay-macro (lambda (q3682@stx) ((lambda (q3684@t) ((lambda (q3686@ls/false) (if q3686@ls/false (apply (lambda (q3688@expr) (q2fff@bless (list 'make-promise (list 'lambda '() q3688@expr)))) q3686@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3684@t))) (q3049@syntax-dispatch q3684@t '(_ any)))) q3682@stx))) (set! q301f@assert-macro (lambda (q368a@stx) ((lambda (q368c@t) ((lambda (q368e@ls/false) (if q368e@ls/false (apply (lambda (q3690@expr) ((lambda (q3692@pos) (q2fff@bless (list 'unless q3690@expr (list 'assertion-error (list 'quote q3690@expr) (list 'quote q3692@pos))))) (or (q3121@expression-position q368a@stx) (q3121@expression-position q3690@expr)))) q368e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q368c@t))) (q3049@syntax-dispatch q368c@t '(_ any)))) q368a@stx))) (set! q3021@endianness-macro (lambda (q3694@stx) ((lambda (q3696@t) ((lambda (q3698@ls/false) (if q3698@ls/false (apply (lambda (q369a@e) ((lambda (q369c@t) (if (memv q369c@t '(little)) (q2fff@bless ''little) (if (memv q369c@t '(big)) (q2fff@bless ''big) (q3129@syntax-violation '#f '"endianness must be big or little" q3694@stx)))) (q312f@syntax->datum q369a@e))) q3698@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3696@t))) (q3049@syntax-dispatch q3696@t '(_ any)))) q3694@stx))) (set! q3023@identifier-syntax-macro (lambda (q369e@stx) ((lambda (q36a0@t) ((lambda (q36a2@ls/false) (if q36a2@ls/false (apply (lambda (q36a4@expr) (q2fff@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax q36a4@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax q36a4@expr) '((syntax (e* ...)))))))))) q36a2@ls/false) ((lambda (q36a6@t) ((lambda (q36a8@ls/false) (if (and q36a8@ls/false (apply (lambda (q36aa@id1 q36ab@expr1 q36ac@id2 q36ad@expr2 q36ae@expr3) (and (q2e44@id? q36aa@id1) (q2e44@id? q36ac@id2) (q2e44@id? q36ad@expr2))) q36a8@ls/false)) (apply (lambda (q36b4@id1 q36b5@expr1 q36b6@id2 q36b7@expr2 q36b8@expr3) (q2fff@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax q36b5@expr1)) (list (list 'set! 'id q36b7@expr2) (list 'syntax q36b8@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons q36b5@expr1 '(e* ...))))))))) q36a8@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q36a6@t))) (q3049@syntax-dispatch q36a6@t '(_ (any any) ((#(scheme-id set!) any any) any))))) q36a0@t))) (q3049@syntax-dispatch q36a0@t '(_ any)))) q369e@stx))) (set! q3025@do-macro (lambda (q36be@stx) ((lambda (q36c1@bind) (begin (set! q36c1@bind (lambda (q36d8@x) ((lambda (q36da@t) ((lambda (q36dc@ls/false) (if q36dc@ls/false (apply (lambda (q36de@x q36df@init) (list q36de@x q36df@init q36de@x)) q36dc@ls/false) ((lambda (q36e2@t) ((lambda (q36e4@ls/false) (if q36e4@ls/false (apply (lambda (q36e6@x q36e7@init q36e8@step) (list q36e6@x q36e7@init q36e8@step)) q36e4@ls/false) ((lambda (q36ec@t) ((lambda (q36ee@ls/false) (if q36ee@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid binding" q36be@stx)) q36ee@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q36ec@t))) (q3049@syntax-dispatch q36ec@t '_))) q36e2@t))) (q3049@syntax-dispatch q36e2@t '(any any any)))) q36da@t))) (q3049@syntax-dispatch q36da@t '(any any)))) q36d8@x))) ((lambda (q36c2@t) ((lambda (q36c4@ls/false) (if q36c4@ls/false (apply (lambda (q36c6@binding* q36c7@test q36c8@expr* q36c9@command*) ((lambda (q36ce@t) ((lambda (q36d0@ls/false) (if q36d0@ls/false (apply (lambda (q36d2@x* q36d3@init* q36d4@step*) (if (q2e4c@valid-bound-ids? q36d2@x*) (q2fff@bless (list 'letrec (list (list 'loop (list 'lambda q36d2@x* (list 'if q36c7@test (cons 'begin (cons '(if #f #f) q36c8@expr*)) (cons 'begin (append q36c9@command* (list (cons 'loop q36d4@step*)))))))) (cons 'loop q36d3@init*))) (q3129@syntax-violation '#f '"invalid bindings" q36be@stx))) q36d0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q36ce@t))) (q3049@syntax-dispatch q36ce@t '#(each (any any any))))) (map q36c1@bind q36c6@binding*))) q36c4@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q36c2@t))) (q3049@syntax-dispatch q36c2@t '(_ each-any (any . each-any) . each-any)))) q36be@stx))) '#f))) (set! q3027@let*-macro (lambda (q36f0@stx) ((lambda (q36f2@t) ((lambda (q36f4@ls/false) (if (and q36f4@ls/false (apply (lambda (q36f6@lhs* q36f7@rhs* q36f8@b q36f9@b*) (for-all q2e44@id? q36f6@lhs*)) q36f4@ls/false)) (apply (lambda (q36fe@lhs* q36ff@rhs* q3700@b q3701@b*) (q2fff@bless ((letrec ((q3706@f (lambda (q3708@x*) (if (null? q3708@x*) (cons 'let (cons '() (cons q3700@b q3701@b*))) (list 'let (list (car q3708@x*)) (q3706@f (cdr q3708@x*))))))) q3706@f) (map list q36fe@lhs* q36ff@rhs*)))) q36f4@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q36f2@t))) (q3049@syntax-dispatch q36f2@t '(_ #(each (any any)) any . each-any)))) q36f0@stx))) (set! q3029@or-macro (lambda (q370a@stx) ((lambda (q370c@t) ((lambda (q370e@ls/false) (if q370e@ls/false (apply (lambda () '#f) q370e@ls/false) ((lambda (q3710@t) ((lambda (q3712@ls/false) (if q3712@ls/false (apply (lambda (q3714@e q3715@e*) (q2fff@bless ((letrec ((q3718@f (lambda (q371a@e q371b@e*) (if (null? q371b@e*) (list 'begin '#f q371a@e) (list 'let (list (list 't q371a@e)) (list 'if 't 't (q3718@f (car q371b@e*) (cdr q371b@e*)))))))) q3718@f) q3714@e q3715@e*))) q3712@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3710@t))) (q3049@syntax-dispatch q3710@t '(_ any . each-any)))) q370c@t))) (q3049@syntax-dispatch q370c@t '(_)))) q370a@stx))) (set! q302b@and-macro (lambda (q371e@stx) ((lambda (q3720@t) ((lambda (q3722@ls/false) (if q3722@ls/false (apply (lambda () '#t) q3722@ls/false) ((lambda (q3724@t) ((lambda (q3726@ls/false) (if q3726@ls/false (apply (lambda (q3728@e q3729@e*) (q2fff@bless ((letrec ((q372c@f (lambda (q372e@e q372f@e*) (if (null? q372f@e*) (list 'begin '#f q372e@e) (cons 'if (cons q372e@e (cons (q372c@f (car q372f@e*) (cdr q372f@e*)) '(#f)))))))) q372c@f) q3728@e q3729@e*))) q3726@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3724@t))) (q3049@syntax-dispatch q3724@t '(_ any . each-any)))) q3720@t))) (q3049@syntax-dispatch q3720@t '(_)))) q371e@stx))) (set! q302d@cond-macro (lambda (q3732@stx) ((lambda (q3734@t) ((lambda (q3736@ls/false) (if q3736@ls/false (apply (lambda (q3738@cls q3739@cls*) (q2fff@bless ((letrec ((q373c@f (lambda (q373e@cls q373f@cls*) (if (null? q373f@cls*) ((lambda (q3742@t) ((lambda (q3744@ls/false) (if q3744@ls/false (apply (lambda (q3746@e q3747@e*) (cons 'begin (cons q3746@e q3747@e*))) q3744@ls/false) ((lambda (q374a@t) ((lambda (q374c@ls/false) (if q374c@ls/false (apply (lambda (q374e@e q374f@p) (list 'let (list (list 't q374e@e)) (list 'if 't (cons q374f@p '(t))))) q374c@ls/false) ((lambda (q3752@t) ((lambda (q3754@ls/false) (if q3754@ls/false (apply (lambda (q3756@e) (cons 'or (cons q3756@e '((if #f #f))))) q3754@ls/false) ((lambda (q3758@t) ((lambda (q375a@ls/false) (if q375a@ls/false (apply (lambda (q375c@e q375d@e*) (list 'if q375c@e (cons 'begin q375d@e*))) q375a@ls/false) ((lambda (q3760@t) ((lambda (q3762@ls/false) (if q3762@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid last clause" q3732@stx)) q3762@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3760@t))) (q3049@syntax-dispatch q3760@t '_))) q3758@t))) (q3049@syntax-dispatch q3758@t '(any . each-any)))) q3752@t))) (q3049@syntax-dispatch q3752@t '(any)))) q374a@t))) (q3049@syntax-dispatch q374a@t '(any #(scheme-id =>) any)))) q3742@t))) (q3049@syntax-dispatch q3742@t '(#(scheme-id else) any . each-any)))) q373e@cls) ((lambda (q3764@t) ((lambda (q3766@ls/false) (if q3766@ls/false (apply (lambda (q3768@e q3769@e*) (q3129@syntax-violation '#f '"incorrect position of keyword else" q3732@stx)) q3766@ls/false) ((lambda (q376c@t) ((lambda (q376e@ls/false) (if q376e@ls/false (apply (lambda (q3770@e q3771@p) (list 'let (list (list 't q3770@e)) (list 'if 't (cons q3771@p '(t)) (q373c@f (car q373f@cls*) (cdr q373f@cls*))))) q376e@ls/false) ((lambda (q3774@t) ((lambda (q3776@ls/false) (if q3776@ls/false (apply (lambda (q3778@e) (list 'or q3778@e (q373c@f (car q373f@cls*) (cdr q373f@cls*)))) q3776@ls/false) ((lambda (q377a@t) ((lambda (q377c@ls/false) (if q377c@ls/false (apply (lambda (q377e@e q377f@e*) (list 'if q377e@e (cons 'begin q377f@e*) (q373c@f (car q373f@cls*) (cdr q373f@cls*)))) q377c@ls/false) ((lambda (q3782@t) ((lambda (q3784@ls/false) (if q3784@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid last clause" q3732@stx)) q3784@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3782@t))) (q3049@syntax-dispatch q3782@t '_))) q377a@t))) (q3049@syntax-dispatch q377a@t '(any . each-any)))) q3774@t))) (q3049@syntax-dispatch q3774@t '(any)))) q376c@t))) (q3049@syntax-dispatch q376c@t '(any #(scheme-id =>) any)))) q3764@t))) (q3049@syntax-dispatch q3764@t '(#(scheme-id else) any . each-any)))) q373e@cls))))) q373c@f) q3738@cls q3739@cls*))) q3736@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3734@t))) (q3049@syntax-dispatch q3734@t '(_ any . each-any)))) q3732@stx))) (set! q302f@do-include (lambda (q3786@stx q3787@id q3788@filename) ((lambda (q378c@filename) (begin (if (not (and (string? q378c@filename) (q2e44@id? q3787@id))) (q3129@syntax-violation '#f '"invalid syntax" q3786@stx) (void)) (cons (q2fff@bless 'begin) (with-input-from-file q378c@filename (lambda () ((letrec ((q378e@f (lambda (q3790@ls) ((lambda (q3792@x) (if (eof-object? q3792@x) (reverse q3790@ls) (q378e@f (cons (q2e24@datum->stx q3787@id q3792@x) q3790@ls)))) (q2996@q2868@read-annotated))))) q378e@f) '())))))) (q2e58@stx->datum q3788@filename)))) (set! q3031@include-macro (lambda (q3794@e) ((lambda (q3796@t) ((lambda (q3798@ls/false) (if q3798@ls/false (apply (lambda (q379a@id q379b@filename) (q302f@do-include q3794@e q379a@id q379b@filename)) q3798@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3796@t))) (q3049@syntax-dispatch q3796@t '(any any)))) q3794@e))) (set! q3033@include-into-macro (lambda (q379e@e) ((lambda (q37a0@t) ((lambda (q37a2@ls/false) (if q37a2@ls/false (apply (lambda (q37a4@id q37a5@filename) (q302f@do-include q379e@e q37a4@id q37a5@filename)) q37a2@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q37a0@t))) (q3049@syntax-dispatch q37a0@t '(_ any any)))) q379e@e))) (set! q3035@syntax-rules-macro (lambda (q37a8@e) ((lambda (q37aa@t) ((lambda (q37ac@ls/false) (if q37ac@ls/false (apply (lambda (q37ae@lits q37af@pat* q37b0@tmp*) (begin (q304f@verify-literals q37ae@lits q37a8@e) (q2fff@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons q37ae@lits (map (lambda (q37b4@pat q37b5@tmp) ((lambda (q37b8@t) ((lambda (q37ba@ls/false) (if q37ba@ls/false (apply (lambda (q37bc@rest) (list (cons 'g q37bc@rest) (list 'syntax q37b5@tmp))) q37ba@ls/false) ((lambda (q37be@t) ((lambda (q37c0@ls/false) (if q37c0@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid syntax-rules pattern" q37a8@e q37b4@pat)) q37c0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q37be@t))) (q3049@syntax-dispatch q37be@t '_))) q37b8@t))) (q3049@syntax-dispatch q37b8@t '(_ . any)))) q37b4@pat)) q37af@pat* q37b0@tmp*)))))))) q37ac@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q37aa@t))) (q3049@syntax-dispatch q37aa@t '(_ each-any . #(each (any any)))))) q37a8@e))) (set! q3037@quasiquote-macro ((lambda () ((lambda (q37c3@datum q37df@quasicons* q37e1@quasicons q37e3@quasiappend q37e5@quasivector q37e7@vquasi q37e9@quasi) (begin (set! q37c3@datum (lambda (q38c4@x) (list (q2fd3@scheme-stx 'quote) (q2e2c@mkstx q38c4@x '() '() '())))) (set! q37df@quasicons* (lambda (q38bc@x q38bd@y) ((letrec ((q38c0@f (lambda (q38c2@x) (if (null? q38c2@x) q38bd@y (q37e1@quasicons (car q38c2@x) (q38c0@f (cdr q38c2@x))))))) q38c0@f) q38bc@x))) (set! q37e1@quasicons (lambda (q3896@x q3897@y) ((lambda (q389a@t) ((lambda (q389c@ls/false) (if q389c@ls/false (apply (lambda (q389e@dy) ((lambda (q38a0@t) ((lambda (q38a2@ls/false) (if q38a2@ls/false (apply (lambda (q38a4@dx) (list (q2fd3@scheme-stx 'quote) (cons q38a4@dx q389e@dy))) q38a2@ls/false) ((lambda (q38a6@t) ((lambda (q38a8@ls/false) (if q38a8@ls/false (apply (lambda () ((lambda (q38aa@t) ((lambda (q38ac@ls/false) (if q38ac@ls/false (apply (lambda () (list (q2fd3@scheme-stx 'list) q3896@x)) q38ac@ls/false) ((lambda (q38ae@t) ((lambda (q38b0@ls/false) (if q38b0@ls/false (apply (lambda () (list (q2fd3@scheme-stx 'cons) q3896@x q3897@y)) q38b0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q38ae@t))) (q3049@syntax-dispatch q38ae@t '_))) q38aa@t))) (q3049@syntax-dispatch q38aa@t '()))) q389e@dy)) q38a8@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q38a6@t))) (q3049@syntax-dispatch q38a6@t '_))) q38a0@t))) (q3049@syntax-dispatch q38a0@t '(#(scheme-id quote) any)))) q3896@x)) q389c@ls/false) ((lambda (q38b2@t) ((lambda (q38b4@ls/false) (if q38b4@ls/false (apply (lambda (q38b6@stuff) (cons* (q2fd3@scheme-stx 'list) q3896@x q38b6@stuff)) q38b4@ls/false) ((lambda (q38b8@t) ((lambda (q38ba@ls/false) (if q38ba@ls/false (apply (lambda () (list (q2fd3@scheme-stx 'cons) q3896@x q3897@y)) q38ba@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q38b8@t))) (q3049@syntax-dispatch q38b8@t '_))) q38b2@t))) (q3049@syntax-dispatch q38b2@t '(#(scheme-id list) . each-any)))) q389a@t))) (q3049@syntax-dispatch q389a@t '(#(scheme-id quote) any)))) q3897@y))) (set! q37e3@quasiappend (lambda (q387c@x q387d@y) ((lambda (q3880@ls) (if (null? q3880@ls) (list (q2fd3@scheme-stx 'quote) '()) (if (null? (cdr q3880@ls)) (car q3880@ls) (cons* (q2fd3@scheme-stx 'append) q3880@ls)))) ((letrec ((q3882@f (lambda (q3884@x) (if (null? q3884@x) ((lambda (q3886@t) ((lambda (q3888@ls/false) (if q3888@ls/false (apply (lambda () '()) q3888@ls/false) ((lambda (q388a@t) ((lambda (q388c@ls/false) (if q388c@ls/false (apply (lambda () (list q387d@y)) q388c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q388a@t))) (q3049@syntax-dispatch q388a@t '_))) q3886@t))) (q3049@syntax-dispatch q3886@t '(#(scheme-id quote) ())))) q387d@y) ((lambda (q388e@t) ((lambda (q3890@ls/false) (if q3890@ls/false (apply (lambda () (q3882@f (cdr q3884@x))) q3890@ls/false) ((lambda (q3892@t) ((lambda (q3894@ls/false) (if q3894@ls/false (apply (lambda () (cons (car q3884@x) (q3882@f (cdr q3884@x)))) q3894@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3892@t))) (q3049@syntax-dispatch q3892@t '_))) q388e@t))) (q3049@syntax-dispatch q388e@t '(#(scheme-id quote) ())))) (car q3884@x)))))) q3882@f) q387c@x)))) (set! q37e5@quasivector (lambda (q384a@x) ((lambda (q384c@pat-x) ((lambda (q384e@t) ((lambda (q3850@ls/false) (if q3850@ls/false (apply (lambda (q3852@x*) (list (q2fd3@scheme-stx 'quote) (list->vector q3852@x*))) q3850@ls/false) ((lambda (q3854@t) ((lambda (q3856@ls/false) (if q3856@ls/false (apply (lambda () ((letrec ((q3858@f (lambda (q385a@x q385b@k) ((lambda (q385e@t) ((lambda (q3860@ls/false) (if q3860@ls/false (apply (lambda (q3862@x*) (q385b@k (map (lambda (q3864@x) (list (q2fd3@scheme-stx 'quote) q3864@x)) q3862@x*))) q3860@ls/false) ((lambda (q3866@t) ((lambda (q3868@ls/false) (if q3868@ls/false (apply (lambda (q386a@x*) (q385b@k q386a@x*)) q3868@ls/false) ((lambda (q386c@t) ((lambda (q386e@ls/false) (if q386e@ls/false (apply (lambda (q3870@x q3871@y) (q3858@f q3871@y (lambda (q3874@ls) (q385b@k (cons q3870@x q3874@ls))))) q386e@ls/false) ((lambda (q3876@t) ((lambda (q3878@ls/false) (if q3878@ls/false (apply (lambda () (list (q2fd3@scheme-stx 'list->vector) q384c@pat-x)) q3878@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3876@t))) (q3049@syntax-dispatch q3876@t '_))) q386c@t))) (q3049@syntax-dispatch q386c@t '(#(scheme-id cons) any any)))) q3866@t))) (q3049@syntax-dispatch q3866@t '(#(scheme-id list) . each-any)))) q385e@t))) (q3049@syntax-dispatch q385e@t '(#(scheme-id quote) each-any)))) q385a@x)))) q3858@f) q384a@x (lambda (q387a@ls) (cons* (q2fd3@scheme-stx 'vector) q387a@ls)))) q3856@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3854@t))) (q3049@syntax-dispatch q3854@t '_))) q384e@t))) (q3049@syntax-dispatch q384e@t '(#(scheme-id quote) each-any)))) q384c@pat-x)) q384a@x))) (set! q37e7@vquasi (lambda (q3828@p q3829@lev) ((lambda (q382c@t) ((lambda (q382e@ls/false) (if q382e@ls/false (apply (lambda (q3830@p q3831@q) ((lambda (q3834@t) ((lambda (q3836@ls/false) (if q3836@ls/false (apply (lambda (q3838@p) (if (= q3829@lev '0) (q37df@quasicons* q3838@p (q37e7@vquasi q3831@q q3829@lev)) (q37e1@quasicons (q37e1@quasicons (q37c3@datum 'unquote) (q37e9@quasi q3838@p (- q3829@lev '1))) (q37e7@vquasi q3831@q q3829@lev)))) q3836@ls/false) ((lambda (q383a@t) ((lambda (q383c@ls/false) (if q383c@ls/false (apply (lambda (q383e@p) (if (= q3829@lev '0) (q37e3@quasiappend q383e@p (q37e7@vquasi q3831@q q3829@lev)) (q37e1@quasicons (q37e1@quasicons (q37c3@datum 'unquote-splicing) (q37e9@quasi q383e@p (- q3829@lev '1))) (q37e7@vquasi q3831@q q3829@lev)))) q383c@ls/false) ((lambda (q3840@t) ((lambda (q3842@ls/false) (if q3842@ls/false (apply (lambda (q3844@p) (q37e1@quasicons (q37e9@quasi q3844@p q3829@lev) (q37e7@vquasi q3831@q q3829@lev))) q3842@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3840@t))) (q3049@syntax-dispatch q3840@t 'any))) q383a@t))) (q3049@syntax-dispatch q383a@t '(#(scheme-id unquote-splicing) . each-any)))) q3834@t))) (q3049@syntax-dispatch q3834@t '(#(scheme-id unquote) . each-any)))) q3830@p)) q382e@ls/false) ((lambda (q3846@t) ((lambda (q3848@ls/false) (if q3848@ls/false (apply (lambda () (list (q2fd3@scheme-stx 'quote) '())) q3848@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3846@t))) (q3049@syntax-dispatch q3846@t '()))) q382c@t))) (q3049@syntax-dispatch q382c@t '(any . any)))) q3828@p))) (set! q37e9@quasi (lambda (q37f2@p q37f3@lev) ((lambda (q37f6@t) ((lambda (q37f8@ls/false) (if q37f8@ls/false (apply (lambda (q37fa@p) (if (= q37f3@lev '0) q37fa@p (q37e1@quasicons (q37c3@datum 'unquote) (q37e9@quasi (list q37fa@p) (- q37f3@lev '1))))) q37f8@ls/false) ((lambda (q37fc@t) ((lambda (q37fe@ls/false) (if q37fe@ls/false (apply (lambda (q3800@p q3801@q) (if (= q37f3@lev '0) (q37df@quasicons* q3800@p (q37e9@quasi q3801@q q37f3@lev)) (q37e1@quasicons (q37e1@quasicons (q37c3@datum 'unquote) (q37e9@quasi q3800@p (- q37f3@lev '1))) (q37e9@quasi q3801@q q37f3@lev)))) q37fe@ls/false) ((lambda (q3804@t) ((lambda (q3806@ls/false) (if q3806@ls/false (apply (lambda (q3808@p q3809@q) (if (= q37f3@lev '0) (q37e3@quasiappend q3808@p (q37e9@quasi q3809@q q37f3@lev)) (q37e1@quasicons (q37e1@quasicons (q37c3@datum 'unquote-splicing) (q37e9@quasi q3808@p (- q37f3@lev '1))) (q37e9@quasi q3809@q q37f3@lev)))) q3806@ls/false) ((lambda (q380c@t) ((lambda (q380e@ls/false) (if q380e@ls/false (apply (lambda (q3810@p) (q37e1@quasicons (q37c3@datum 'quasiquote) (q37e9@quasi (list q3810@p) (+ q37f3@lev '1)))) q380e@ls/false) ((lambda (q3812@t) ((lambda (q3814@ls/false) (if q3814@ls/false (apply (lambda (q3816@p q3817@q) (q37e1@quasicons (q37e9@quasi q3816@p q37f3@lev) (q37e9@quasi q3817@q q37f3@lev))) q3814@ls/false) ((lambda (q381a@t) ((lambda (q381c@ls/false) (if (and q381c@ls/false (apply (lambda (q381e@x) (not (q2e10@stx? q381e@x))) q381c@ls/false)) (apply (lambda (q3820@x) (q37e5@quasivector (q37e7@vquasi q3820@x q37f3@lev))) q381c@ls/false) ((lambda (q3822@t) ((lambda (q3824@ls/false) (if q3824@ls/false (apply (lambda (q3826@p) (list (q2fd3@scheme-stx 'quote) q3826@p)) q3824@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3822@t))) (q3049@syntax-dispatch q3822@t 'any))) q381a@t))) (q3049@syntax-dispatch q381a@t '#(vector each-any)))) q3812@t))) (q3049@syntax-dispatch q3812@t '(any . any)))) q380c@t))) (q3049@syntax-dispatch q380c@t '(#(scheme-id quasiquote) any)))) q3804@t))) (q3049@syntax-dispatch q3804@t '((#(scheme-id unquote-splicing) . each-any) . any)))) q37fc@t))) (q3049@syntax-dispatch q37fc@t '((#(scheme-id unquote) . each-any) . any)))) q37f6@t))) (q3049@syntax-dispatch q37f6@t '(#(scheme-id unquote) any)))) q37f2@p))) (lambda (q37ea@x) ((lambda (q37ec@t) ((lambda (q37ee@ls/false) (if q37ee@ls/false (apply (lambda (q37f0@e) (q37e9@quasi q37f0@e '0)) q37ee@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q37ec@t))) (q3049@syntax-dispatch q37ec@t '(_ any)))) q37ea@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! q3039@quasisyntax-macro ((lambda () ((lambda (q38c7@quasi) (begin (set! q38c7@quasi (lambda (q38e2@p q38e3@lev) ((lambda (q38e6@t) ((lambda (q38e8@ls/false) (if q38e8@ls/false (apply (lambda (q38ea@p) (if (= q38e3@lev '0) ((lambda (q38ec@g) (values (list q38ec@g) (list q38ea@p) q38ec@g)) (gensym)) (call-with-values (lambda () (q38c7@quasi q38ea@p (- q38e3@lev '1))) (lambda (q38f4@q38ef q38f5@q38f1 q38f6@q38f3) ((lambda (q38fa@p q38fb@rhs* q38fc@lhs*) (values q38fc@lhs* q38fb@rhs* (list 'unsyntax q38fa@p))) q38f6@q38f3 q38f5@q38f1 q38f4@q38ef))))) q38e8@ls/false) ((lambda (q3900@t) ((lambda (q3902@ls/false) (if (and q3902@ls/false (apply (lambda () (= q38e3@lev '0)) q3902@ls/false)) (apply (lambda () (q3129@syntax-violation '#f '"incorrect use of unsyntax" q38e2@p)) q3902@ls/false) ((lambda (q3904@t) ((lambda (q3906@ls/false) (if q3906@ls/false (apply (lambda (q3908@p* q3909@q) (call-with-values (lambda () (q38c7@quasi q3909@q q38e3@lev)) (lambda (q3912@q390d q3913@q390f q3914@q3911) ((lambda (q3918@q q3919@rhs* q391a@lhs*) (if (= q38e3@lev '0) ((lambda (q391e@g*) (values (append q391e@g* q391a@lhs*) (append q3908@p* q3919@rhs*) (append q391e@g* q3918@q))) (map (lambda (q3920@x) (gensym)) q3908@p*)) (call-with-values (lambda () (q38c7@quasi q3908@p* (- q38e3@lev '1))) (lambda (q3928@q3923 q3929@q3925 q392a@q3927) ((lambda (q392e@p* q392f@rhs2* q3930@lhs2*) (values (append q3930@lhs2* q391a@lhs*) (append q392f@rhs2* q3919@rhs*) (cons (cons 'unsyntax q392e@p*) q3918@q))) q392a@q3927 q3929@q3925 q3928@q3923))))) q3914@q3911 q3913@q390f q3912@q390d)))) q3906@ls/false) ((lambda (q3934@t) ((lambda (q3936@ls/false) (if q3936@ls/false (apply (lambda (q3938@p* q3939@q) (call-with-values (lambda () (q38c7@quasi q3939@q q38e3@lev)) (lambda (q3942@q393d q3943@q393f q3944@q3941) ((lambda (q3948@q q3949@rhs* q394a@lhs*) (if (= q38e3@lev '0) ((lambda (q394e@g*) (values (append (map (lambda (q3950@g) (cons q3950@g '(...))) q394e@g*) q394a@lhs*) (append q3938@p* q3949@rhs*) (append (apply append (map (lambda (q3952@g) (cons q3952@g '(...))) q394e@g*)) q3948@q))) (map (lambda (q3954@x) (gensym)) q3938@p*)) (call-with-values (lambda () (q38c7@quasi q3938@p* (- q38e3@lev '1))) (lambda (q395c@q3957 q395d@q3959 q395e@q395b) ((lambda (q3962@p* q3963@rhs2* q3964@lhs2*) (values (append q3964@lhs2* q394a@lhs*) (append q3963@rhs2* q3949@rhs*) (cons (cons 'unsyntax-splicing q3962@p*) q3948@q))) q395e@q395b q395d@q3959 q395c@q3957))))) q3944@q3941 q3943@q393f q3942@q393d)))) q3936@ls/false) ((lambda (q3968@t) ((lambda (q396a@ls/false) (if (and q396a@ls/false (apply (lambda () (= q38e3@lev '0)) q396a@ls/false)) (apply (lambda () (q3129@syntax-violation '#f '"incorrect use of unsyntax-splicing" q38e2@p)) q396a@ls/false) ((lambda (q396c@t) ((lambda (q396e@ls/false) (if q396e@ls/false (apply (lambda (q3970@p) (call-with-values (lambda () (q38c7@quasi q3970@p (+ q38e3@lev '1))) (lambda (q3978@q3973 q3979@q3975 q397a@q3977) ((lambda (q397e@p q397f@rhs* q3980@lhs*) (values q3980@lhs* q397f@rhs* (list 'quasisyntax q397e@p))) q397a@q3977 q3979@q3975 q3978@q3973)))) q396e@ls/false) ((lambda (q3984@t) ((lambda (q3986@ls/false) (if q3986@ls/false (apply (lambda (q3988@p q3989@q) (call-with-values (lambda () (q38c7@quasi q3988@p q38e3@lev)) (lambda (q3998@q398d q3999@q398f q399a@q3991) (call-with-values (lambda () (q38c7@quasi q3989@q q38e3@lev)) (lambda (q399e@q3993 q399f@q3995 q39a0@q3997) ((lambda (q39a4@q q39a5@rhs2* q39a6@lhs2* q39a7@p q39a8@rhs* q39a9@lhs*) (values (append q39a6@lhs2* q39a9@lhs*) (append q39a5@rhs2* q39a8@rhs*) (cons q39a7@p q39a4@q))) q39a0@q3997 q399f@q3995 q399e@q3993 q399a@q3991 q3999@q398f q3998@q398d)))))) q3986@ls/false) ((lambda (q39b0@t) ((lambda (q39b2@ls/false) (if q39b2@ls/false (apply (lambda (q39b4@x*) (call-with-values (lambda () (q38c7@quasi q39b4@x* q38e3@lev)) (lambda (q39bc@q39b7 q39bd@q39b9 q39be@q39bb) ((lambda (q39c2@x* q39c3@rhs* q39c4@lhs*) (values q39c4@lhs* q39c3@rhs* (list->vector q39c2@x*))) q39be@q39bb q39bd@q39b9 q39bc@q39b7)))) q39b2@ls/false) ((lambda (q39c8@t) ((lambda (q39ca@ls/false) (if q39ca@ls/false (apply (lambda () (values '() '() q38e2@p)) q39ca@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q39c8@t))) (q3049@syntax-dispatch q39c8@t '_))) q39b0@t))) (q3049@syntax-dispatch q39b0@t '#(vector each-any)))) q3984@t))) (q3049@syntax-dispatch q3984@t '(any . any)))) q396c@t))) (q3049@syntax-dispatch q396c@t '(#(scheme-id quasisyntax) any)))) q3968@t))) (q3049@syntax-dispatch q3968@t '#(scheme-id unsyntax-splicing)))) q3934@t))) (q3049@syntax-dispatch q3934@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) q3904@t))) (q3049@syntax-dispatch q3904@t '((#(scheme-id unsyntax) . each-any) . any)))) q3900@t))) (q3049@syntax-dispatch q3900@t '#(scheme-id unsyntax)))) q38e6@t))) (q3049@syntax-dispatch q38e6@t '(#(scheme-id unsyntax) any)))) q38e2@p))) (lambda (q38c8@x) ((lambda (q38ca@t) ((lambda (q38cc@ls/false) (if q38cc@ls/false (apply (lambda (q38ce@e) (call-with-values (lambda () (q38c7@quasi q38ce@e '0)) (lambda (q38d6@q38d1 q38d7@q38d3 q38d8@q38d5) ((lambda (q38dc@v q38dd@rhs* q38de@lhs*) (q2fff@bless (list 'syntax-case (cons 'list q38dd@rhs*) '() (list q38de@lhs* (list 'syntax q38dc@v))))) q38d8@q38d5 q38d7@q38d3 q38d6@q38d1)))) q38cc@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q38ca@t))) (q3049@syntax-dispatch q38ca@t '(_ any)))) q38c8@x)))) '#f)))) (set! q303b@define-struct-macro (lambda (q39cc@stx) (q3129@syntax-violation '#f '"define-struct not supported" q39cc@stx))) (set! q303d@define-record-type-macro (lambda (q39ce@x) ((lambda (q39d1@id q39d3@get-record-name q39d5@get-record-constructor-name q39d7@get-record-predicate-name q39d9@get-clause q39db@foo-rtd-code q39dd@parent-rtd-code q39df@parent-rcd-code q39e1@foo-rcd-code q39e3@get-protocol-code q39e5@get-fields q39e7@get-mutator-indices q39e9@get-mutators q39eb@get-accessors q39ed@enumerate q39ef@do-define-record q39f1@verify-clauses) (begin (set! q39d1@id (lambda (q3bc4@ctxt . q3bc6@str*) (q312d@datum->syntax q3bc4@ctxt (string->symbol (apply string-append (map (lambda (q3bc8@x) (if (symbol? q3bc8@x) (symbol->string q3bc8@x) (if (string? q3bc8@x) q3bc8@x (assertion-violation 'define-record-type '"BUG")))) q3bc6@str*)))))) (set! q39d3@get-record-name (lambda (q3bb2@spec) ((lambda (q3bb4@t) ((lambda (q3bb6@ls/false) (if q3bb6@ls/false (apply (lambda (q3bb8@foo q3bb9@make-foo q3bba@foo?) q3bb8@foo) q3bb6@ls/false) ((lambda (q3bbe@t) ((lambda (q3bc0@ls/false) (if q3bc0@ls/false (apply (lambda (q3bc2@foo) q3bc2@foo) q3bc0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3bbe@t))) (q3049@syntax-dispatch q3bbe@t 'any))) q3bb4@t))) (q3049@syntax-dispatch q3bb4@t '(any any any)))) q3bb2@spec))) (set! q39d5@get-record-constructor-name (lambda (q3b9e@spec) ((lambda (q3ba0@t) ((lambda (q3ba2@ls/false) (if q3ba2@ls/false (apply (lambda (q3ba4@foo q3ba5@make-foo q3ba6@foo?) q3ba5@make-foo) q3ba2@ls/false) ((lambda (q3baa@t) ((lambda (q3bac@ls/false) (if (and q3bac@ls/false (apply (lambda (q3bae@foo) (q2e44@id? q3bae@foo)) q3bac@ls/false)) (apply (lambda (q3bb0@foo) (q39d1@id q3bb0@foo '"make-" (q2e58@stx->datum q3bb0@foo))) q3bac@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3baa@t))) (q3049@syntax-dispatch q3baa@t 'any))) q3ba0@t))) (q3049@syntax-dispatch q3ba0@t '(any any any)))) q3b9e@spec))) (set! q39d7@get-record-predicate-name (lambda (q3b8a@spec) ((lambda (q3b8c@t) ((lambda (q3b8e@ls/false) (if q3b8e@ls/false (apply (lambda (q3b90@foo q3b91@make-foo q3b92@foo?) q3b92@foo?) q3b8e@ls/false) ((lambda (q3b96@t) ((lambda (q3b98@ls/false) (if (and q3b98@ls/false (apply (lambda (q3b9a@foo) (q2e44@id? q3b9a@foo)) q3b98@ls/false)) (apply (lambda (q3b9c@foo) (q39d1@id q3b9c@foo (q2e58@stx->datum q3b9c@foo) '"?")) q3b98@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b96@t))) (q3049@syntax-dispatch q3b96@t 'any))) q3b8c@t))) (q3049@syntax-dispatch q3b8c@t '(any any any)))) q3b8a@spec))) (set! q39d9@get-clause (lambda (q3b78@id q3b79@ls) ((lambda (q3b7c@t) ((lambda (q3b7e@ls/false) (if q3b7e@ls/false (apply (lambda () '#f) q3b7e@ls/false) ((lambda (q3b80@t) ((lambda (q3b82@ls/false) (if q3b82@ls/false (apply (lambda (q3b84@x q3b85@rest q3b86@ls) (if (q2e4a@free-id=? (q2fff@bless q3b78@id) q3b84@x) (cons q3b84@x q3b85@rest) (q39d9@get-clause q3b78@id q3b86@ls))) q3b82@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b80@t))) (q3049@syntax-dispatch q3b80@t '((any . any) . any)))) q3b7c@t))) (q3049@syntax-dispatch q3b7c@t '()))) q3b79@ls))) (set! q39db@foo-rtd-code (lambda (q3b26@name q3b27@clause* q3b28@parent-rtd-code) ((lambda (q3b2d@convert-field-spec*) (begin (set! q3b2d@convert-field-spec* (lambda (q3b5e@ls) (list->vector (map (lambda (q3b60@x) ((lambda (q3b62@t) ((lambda (q3b64@ls/false) (if q3b64@ls/false (apply (lambda (q3b66@name q3b67@rest) (list 'mutable q3b66@name)) q3b64@ls/false) ((lambda (q3b6a@t) ((lambda (q3b6c@ls/false) (if q3b6c@ls/false (apply (lambda (q3b6e@name q3b6f@rest) (list 'immutable q3b6e@name)) q3b6c@ls/false) ((lambda (q3b72@t) ((lambda (q3b74@ls/false) (if q3b74@ls/false (apply (lambda (q3b76@name) (list 'immutable q3b76@name)) q3b74@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b72@t))) (q3049@syntax-dispatch q3b72@t 'any))) q3b6a@t))) (q3049@syntax-dispatch q3b6a@t '(#(scheme-id immutable) any . any)))) q3b62@t))) (q3049@syntax-dispatch q3b62@t '(#(scheme-id mutable) any . any)))) q3b60@x)) q3b5e@ls)))) ((lambda (q3b2e@uid-code q3b2f@sealed? q3b30@opaque? q3b31@fields) (q2fff@bless (list 'make-record-type-descriptor (list 'quote q3b26@name) q3b28@parent-rtd-code q3b2e@uid-code q3b2f@sealed? q3b30@opaque? q3b31@fields))) ((lambda (q3b36@t) ((lambda (q3b38@ls/false) (if q3b38@ls/false (apply (lambda () (list 'quote (gensym))) q3b38@ls/false) ((lambda (q3b3a@t) ((lambda (q3b3c@ls/false) (if q3b3c@ls/false (apply (lambda (q3b3e@uid) (list 'quote q3b3e@uid)) q3b3c@ls/false) ((lambda (q3b40@t) ((lambda (q3b42@ls/false) (if q3b42@ls/false (apply (lambda () '#f) q3b42@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b40@t))) (q3049@syntax-dispatch q3b40@t '_))) q3b3a@t))) (q3049@syntax-dispatch q3b3a@t '(_ any)))) q3b36@t))) (q3049@syntax-dispatch q3b36@t '(_)))) (q39d9@get-clause 'nongenerative q3b27@clause*)) ((lambda (q3b44@t) ((lambda (q3b46@ls/false) (if q3b46@ls/false (apply (lambda () '#t) q3b46@ls/false) ((lambda (q3b48@t) ((lambda (q3b4a@ls/false) (if q3b4a@ls/false (apply (lambda () '#f) q3b4a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b48@t))) (q3049@syntax-dispatch q3b48@t '_))) q3b44@t))) (q3049@syntax-dispatch q3b44@t '(_ #(atom #t))))) (q39d9@get-clause 'sealed q3b27@clause*)) ((lambda (q3b4c@t) ((lambda (q3b4e@ls/false) (if q3b4e@ls/false (apply (lambda () '#t) q3b4e@ls/false) ((lambda (q3b50@t) ((lambda (q3b52@ls/false) (if q3b52@ls/false (apply (lambda () '#f) q3b52@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b50@t))) (q3049@syntax-dispatch q3b50@t '_))) q3b4c@t))) (q3049@syntax-dispatch q3b4c@t '(_ #(atom #t))))) (q39d9@get-clause 'opaque q3b27@clause*)) ((lambda (q3b54@t) ((lambda (q3b56@ls/false) (if q3b56@ls/false (apply (lambda (q3b58@field-spec*) (list 'quote (q3b2d@convert-field-spec* q3b58@field-spec*))) q3b56@ls/false) ((lambda (q3b5a@t) ((lambda (q3b5c@ls/false) (if q3b5c@ls/false (apply (lambda () ''#()) q3b5c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b5a@t))) (q3049@syntax-dispatch q3b5a@t '_))) q3b54@t))) (q3049@syntax-dispatch q3b54@t '(_ . each-any)))) (q39d9@get-clause 'fields q3b27@clause*))))) '#f))) (set! q39dd@parent-rtd-code (lambda (q3b0e@clause*) ((lambda (q3b10@t) ((lambda (q3b12@ls/false) (if q3b12@ls/false (apply (lambda (q3b14@name) (list 'record-type-descriptor q3b14@name)) q3b12@ls/false) ((lambda (q3b16@t) ((lambda (q3b18@ls/false) (if q3b18@ls/false (apply (lambda () ((lambda (q3b1a@t) ((lambda (q3b1c@ls/false) (if q3b1c@ls/false (apply (lambda (q3b1e@rtd q3b1f@rcd) q3b1e@rtd) q3b1c@ls/false) ((lambda (q3b22@t) ((lambda (q3b24@ls/false) (if q3b24@ls/false (apply (lambda () '#f) q3b24@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b22@t))) (q3049@syntax-dispatch q3b22@t '#(atom #f)))) q3b1a@t))) (q3049@syntax-dispatch q3b1a@t '(_ any any)))) (q39d9@get-clause 'parent-rtd q3b0e@clause*))) q3b18@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b16@t))) (q3049@syntax-dispatch q3b16@t '#(atom #f)))) q3b10@t))) (q3049@syntax-dispatch q3b10@t '(_ any)))) (q39d9@get-clause 'parent q3b0e@clause*)))) (set! q39df@parent-rcd-code (lambda (q3af6@clause*) ((lambda (q3af8@t) ((lambda (q3afa@ls/false) (if q3afa@ls/false (apply (lambda (q3afc@name) (list 'record-constructor-descriptor q3afc@name)) q3afa@ls/false) ((lambda (q3afe@t) ((lambda (q3b00@ls/false) (if q3b00@ls/false (apply (lambda () ((lambda (q3b02@t) ((lambda (q3b04@ls/false) (if q3b04@ls/false (apply (lambda (q3b06@rtd q3b07@rcd) q3b07@rcd) q3b04@ls/false) ((lambda (q3b0a@t) ((lambda (q3b0c@ls/false) (if q3b0c@ls/false (apply (lambda () '#f) q3b0c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3b0a@t))) (q3049@syntax-dispatch q3b0a@t '#(atom #f)))) q3b02@t))) (q3049@syntax-dispatch q3b02@t '(_ any any)))) (q39d9@get-clause 'parent-rtd q3af6@clause*))) q3b00@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3afe@t))) (q3049@syntax-dispatch q3afe@t '#(atom #f)))) q3af8@t))) (q3049@syntax-dispatch q3af8@t '(_ any)))) (q39d9@get-clause 'parent q3af6@clause*)))) (set! q39e1@foo-rcd-code (lambda (q3aee@clause* q3aef@foo-rtd q3af0@protocol q3af1@parent-rcd-code) (list 'make-record-constructor-descriptor q3aef@foo-rtd q3af1@parent-rcd-code q3af0@protocol))) (set! q39e3@get-protocol-code (lambda (q3ae2@clause*) ((lambda (q3ae4@t) ((lambda (q3ae6@ls/false) (if q3ae6@ls/false (apply (lambda (q3ae8@expr) q3ae8@expr) q3ae6@ls/false) ((lambda (q3aea@t) ((lambda (q3aec@ls/false) (if q3aec@ls/false (apply (lambda () '#f) q3aec@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3aea@t))) (q3049@syntax-dispatch q3aea@t '_))) q3ae4@t))) (q3049@syntax-dispatch q3ae4@t '(_ any)))) (q39d9@get-clause 'protocol q3ae2@clause*)))) (set! q39e5@get-fields (lambda (q3ad0@clause*) ((lambda (q3ad2@t) ((lambda (q3ad4@ls/false) (if q3ad4@ls/false (apply (lambda () '()) q3ad4@ls/false) ((lambda (q3ad6@t) ((lambda (q3ad8@ls/false) (if q3ad8@ls/false (apply (lambda (q3ada@f*) q3ada@f*) q3ad8@ls/false) ((lambda (q3adc@t) ((lambda (q3ade@ls/false) (if q3ade@ls/false (apply (lambda (q3ae0@rest) (q39e5@get-fields q3ae0@rest)) q3ade@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3adc@t))) (q3049@syntax-dispatch q3adc@t '(_ . any)))) q3ad6@t))) (q3049@syntax-dispatch q3ad6@t '((#(scheme-id fields) . each-any) . _)))) q3ad2@t))) (q3049@syntax-dispatch q3ad2@t '()))) q3ad0@clause*))) (set! q39e7@get-mutator-indices (lambda (q3ab8@fields) ((letrec ((q3aba@f (lambda (q3abc@fields q3abd@i) ((lambda (q3ac0@t) ((lambda (q3ac2@ls/false) (if q3ac2@ls/false (apply (lambda () '()) q3ac2@ls/false) ((lambda (q3ac4@t) ((lambda (q3ac6@ls/false) (if q3ac6@ls/false (apply (lambda (q3ac8@rest) (cons q3abd@i (q3aba@f q3ac8@rest (+ q3abd@i '1)))) q3ac6@ls/false) ((lambda (q3aca@t) ((lambda (q3acc@ls/false) (if q3acc@ls/false (apply (lambda (q3ace@rest) (q3aba@f q3ace@rest (+ q3abd@i '1))) q3acc@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3aca@t))) (q3049@syntax-dispatch q3aca@t '(_ . any)))) q3ac4@t))) (q3049@syntax-dispatch q3ac4@t '((#(scheme-id mutable) . _) . any)))) q3ac0@t))) (q3049@syntax-dispatch q3ac0@t '()))) q3abc@fields)))) q3aba@f) q3ab8@fields '0))) (set! q39e9@get-mutators (lambda (q3a8e@foo q3a8f@fields) ((lambda (q3a93@gen-name) (begin (set! q3a93@gen-name (lambda (q3ab6@x) (q312d@datum->syntax q3a8e@foo (string->symbol (string-append (symbol->string (q312f@syntax->datum q3a8e@foo)) '"-" (symbol->string (q312f@syntax->datum q3ab6@x)) '"-set!"))))) ((letrec ((q3a94@f (lambda (q3a96@fields) ((lambda (q3a98@t) ((lambda (q3a9a@ls/false) (if q3a9a@ls/false (apply (lambda () '()) q3a9a@ls/false) ((lambda (q3a9c@t) ((lambda (q3a9e@ls/false) (if q3a9e@ls/false (apply (lambda (q3aa0@name q3aa1@accessor q3aa2@mutator q3aa3@rest) (cons q3aa2@mutator (q3a94@f q3aa3@rest))) q3a9e@ls/false) ((lambda (q3aa8@t) ((lambda (q3aaa@ls/false) (if q3aaa@ls/false (apply (lambda (q3aac@name q3aad@rest) (cons (q3a93@gen-name q3aac@name) (q3a94@f q3aad@rest))) q3aaa@ls/false) ((lambda (q3ab0@t) ((lambda (q3ab2@ls/false) (if q3ab2@ls/false (apply (lambda (q3ab4@rest) (q3a94@f q3ab4@rest)) q3ab2@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3ab0@t))) (q3049@syntax-dispatch q3ab0@t '(_ . any)))) q3aa8@t))) (q3049@syntax-dispatch q3aa8@t '((#(scheme-id mutable) any) . any)))) q3a9c@t))) (q3049@syntax-dispatch q3a9c@t '((#(scheme-id mutable) any any any) . any)))) q3a98@t))) (q3049@syntax-dispatch q3a98@t '()))) q3a96@fields)))) q3a94@f) q3a8f@fields))) '#f))) (set! q39eb@get-accessors (lambda (q3a4a@foo q3a4b@fields) ((lambda (q3a4f@gen-name) (begin (set! q3a4f@gen-name (lambda (q3a8c@x) (q312d@datum->syntax q3a4a@foo (string->symbol (string-append (symbol->string (q312f@syntax->datum q3a4a@foo)) '"-" (symbol->string (q312f@syntax->datum q3a8c@x))))))) (map (lambda (q3a50@field) ((lambda (q3a52@t) ((lambda (q3a54@ls/false) (if (and q3a54@ls/false (apply (lambda (q3a56@name q3a57@accessor q3a58@mutator) (q2e44@id? q3a57@accessor)) q3a54@ls/false)) (apply (lambda (q3a5c@name q3a5d@accessor q3a5e@mutator) q3a5d@accessor) q3a54@ls/false) ((lambda (q3a62@t) ((lambda (q3a64@ls/false) (if (and q3a64@ls/false (apply (lambda (q3a66@name q3a67@accessor) (q2e44@id? q3a67@accessor)) q3a64@ls/false)) (apply (lambda (q3a6a@name q3a6b@accessor) q3a6b@accessor) q3a64@ls/false) ((lambda (q3a6e@t) ((lambda (q3a70@ls/false) (if (and q3a70@ls/false (apply (lambda (q3a72@name) (q2e44@id? q3a72@name)) q3a70@ls/false)) (apply (lambda (q3a74@name) (q3a4f@gen-name q3a74@name)) q3a70@ls/false) ((lambda (q3a76@t) ((lambda (q3a78@ls/false) (if (and q3a78@ls/false (apply (lambda (q3a7a@name) (q2e44@id? q3a7a@name)) q3a78@ls/false)) (apply (lambda (q3a7c@name) (q3a4f@gen-name q3a7c@name)) q3a78@ls/false) ((lambda (q3a7e@t) ((lambda (q3a80@ls/false) (if (and q3a80@ls/false (apply (lambda (q3a82@name) (q2e44@id? q3a82@name)) q3a80@ls/false)) (apply (lambda (q3a84@name) (q3a4f@gen-name q3a84@name)) q3a80@ls/false) ((lambda (q3a86@t) ((lambda (q3a88@ls/false) (if q3a88@ls/false (apply (lambda (q3a8a@others) (q3129@syntax-violation '#f '"invalid field spec" q3a50@field)) q3a88@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3a86@t))) (q3049@syntax-dispatch q3a86@t 'any))) q3a7e@t))) (q3049@syntax-dispatch q3a7e@t 'any))) q3a76@t))) (q3049@syntax-dispatch q3a76@t '(#(scheme-id immutable) any)))) q3a6e@t))) (q3049@syntax-dispatch q3a6e@t '(#(scheme-id mutable) any)))) q3a62@t))) (q3049@syntax-dispatch q3a62@t '(#(scheme-id immutable) any any)))) q3a52@t))) (q3049@syntax-dispatch q3a52@t '(#(scheme-id mutable) any any any)))) q3a50@field)) q3a4b@fields))) '#f))) (set! q39ed@enumerate (lambda (q3a42@ls) ((letrec ((q3a44@f (lambda (q3a46@ls q3a47@i) (if (null? q3a46@ls) '() (cons q3a47@i (q3a44@f (cdr q3a46@ls) (+ q3a47@i '1))))))) q3a44@f) q3a42@ls '0))) (set! q39ef@do-define-record (lambda (q3a1a@namespec q3a1b@clause*) ((lambda (q3a1e@foo) ((lambda (q3a20@foo-rtd) ((lambda (q3a22@foo-rcd) ((lambda (q3a24@protocol) ((lambda (q3a26@make-foo) ((lambda (q3a28@fields) ((lambda (q3a2a@idx*) ((lambda (q3a2c@foo-x*) ((lambda (q3a2e@set-foo-x!*) ((lambda (q3a30@set-foo-idx*) ((lambda (q3a32@foo?) ((lambda (q3a34@foo-rtd-code) ((lambda (q3a36@foo-rcd-code) ((lambda (q3a38@protocol-code) ((lambda () (q2fff@bless (cons 'begin (cons (list 'define q3a20@foo-rtd q3a34@foo-rtd-code) (cons (list 'define q3a24@protocol q3a38@protocol-code) (cons (list 'define q3a22@foo-rcd q3a36@foo-rcd-code) (cons (list 'define-syntax q3a1e@foo (list 'list ''$rtd (list 'syntax q3a20@foo-rtd) (list 'syntax q3a22@foo-rcd))) (cons (list 'define q3a32@foo? (list 'record-predicate q3a20@foo-rtd)) (cons (list 'define q3a26@make-foo (list 'record-constructor q3a22@foo-rcd)) (append (map (lambda (q3a3a@foo-x q3a3b@idx) (list 'define q3a3a@foo-x (list 'record-accessor q3a20@foo-rtd q3a3b@idx))) q3a2c@foo-x* q3a2a@idx*) (map (lambda (q3a3e@set-foo-x! q3a3f@idx) (list 'define q3a3e@set-foo-x! (list 'record-mutator q3a20@foo-rtd q3a3f@idx))) q3a2e@set-foo-x!* q3a30@set-foo-idx*))))))))))))) (q39e3@get-protocol-code q3a1b@clause*))) (q39e1@foo-rcd-code q3a1b@clause* q3a20@foo-rtd q3a24@protocol (q39df@parent-rcd-code q3a1b@clause*)))) (q39db@foo-rtd-code q3a1e@foo q3a1b@clause* (q39dd@parent-rtd-code q3a1b@clause*)))) (q39d7@get-record-predicate-name q3a1a@namespec))) (q39e7@get-mutator-indices q3a28@fields))) (q39e9@get-mutators q3a1e@foo q3a28@fields))) (q39eb@get-accessors q3a1e@foo q3a28@fields))) (q39ed@enumerate q3a28@fields))) (q39e5@get-fields q3a1b@clause*))) (q39d5@get-record-constructor-name q3a1a@namespec))) (gensym))) (gensym))) (gensym))) (q39d3@get-record-name q3a1a@namespec)))) (set! q39f1@verify-clauses (lambda (q39fa@x q39fb@cls*) ((lambda (q39ff@valid-kwds q3a01@free-id-member?) (begin (set! q39ff@valid-kwds (map q2fff@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! q3a01@free-id-member? (lambda (q3a16@x q3a17@ls) (and (pair? q3a17@ls) (or (q2e4a@free-id=? q3a16@x (car q3a17@ls)) (q3a01@free-id-member? q3a16@x (cdr q3a17@ls)))))) ((letrec ((q3a02@f (lambda (q3a04@cls* q3a05@seen*) (if (not (null? q3a04@cls*)) ((lambda (q3a08@t) ((lambda (q3a0a@ls/false) (if q3a0a@ls/false (apply (lambda (q3a0c@kwd q3a0d@rest) (if (or (not (q2e44@id? q3a0c@kwd)) (not (q3a01@free-id-member? q3a0c@kwd q39ff@valid-kwds))) (q3129@syntax-violation '#f '"not a valid define-record-type keyword" q3a0c@kwd) (if (q2e50@bound-id-member? q3a0c@kwd q3a05@seen*) (q3129@syntax-violation '#f '"duplicate use of keyword " q39fa@x q3a0c@kwd) (q3a02@f (cdr q3a04@cls*) (cons q3a0c@kwd q3a05@seen*))))) q3a0a@ls/false) ((lambda (q3a10@t) ((lambda (q3a12@ls/false) (if q3a12@ls/false (apply (lambda (q3a14@cls) (q3129@syntax-violation '#f '"malformed define-record-type clause" q3a14@cls)) q3a12@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3a10@t))) (q3049@syntax-dispatch q3a10@t 'any))) q3a08@t))) (q3049@syntax-dispatch q3a08@t '(any . any)))) (car q3a04@cls*)) (void))))) q3a02@f) q39fb@cls* '()))) '#f '#f))) ((lambda (q39f2@t) ((lambda (q39f4@ls/false) (if q39f4@ls/false (apply (lambda (q39f6@namespec q39f7@clause*) (begin (q39f1@verify-clauses q39ce@x q39f7@clause*) (q39ef@do-define-record q39f6@namespec q39f7@clause*))) q39f4@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q39f2@t))) (q3049@syntax-dispatch q39f2@t '(_ any . each-any)))) q39ce@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q303f@define-condition-type-macro (lambda (q3bca@x) ((lambda (q3bcd@mkname) (begin (set! q3bcd@mkname (lambda (q3bfa@name q3bfb@suffix) (q312d@datum->syntax q3bfa@name (string->symbol (string-append (symbol->string (q312f@syntax->datum q3bfa@name)) q3bfb@suffix))))) ((lambda (q3bce@t) ((lambda (q3bd0@ls/false) (if (and q3bd0@ls/false (apply (lambda (q3bd2@ctxt q3bd3@name q3bd4@super q3bd5@constructor q3bd6@predicate q3bd7@field* q3bd8@accessor*) (and (q2e44@id? q3bd3@name) (q2e44@id? q3bd4@super) (q2e44@id? q3bd5@constructor) (q2e44@id? q3bd6@predicate) (for-all q2e44@id? q3bd7@field*) (for-all q2e44@id? q3bd8@accessor*))) q3bd0@ls/false)) (apply (lambda (q3be0@ctxt q3be1@name q3be2@super q3be3@constructor q3be4@predicate q3be5@field* q3be6@accessor*) ((lambda (q3bee@aux-accessor*) (q2fff@bless (cons 'begin (cons (cons 'define-record-type (cons (list q3be1@name q3be3@constructor (gensym)) (cons (list 'parent q3be2@super) (cons (cons 'fields (map (lambda (q3bf0@field q3bf1@aux) (list 'immutable q3bf0@field q3bf1@aux)) q3be5@field* q3bee@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define q3be4@predicate (list 'condition-predicate (list 'record-type-descriptor q3be1@name))) (map (lambda (q3bf4@accessor q3bf5@aux) (list 'define q3bf4@accessor (list 'condition-accessor (list 'record-type-descriptor q3be1@name) q3bf5@aux))) q3be6@accessor* q3bee@aux-accessor*)))))) (map (lambda (q3bf8@x) (gensym)) q3be6@accessor*))) q3bd0@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3bce@t))) (q3049@syntax-dispatch q3bce@t '(any any any any any . #(each (any any)))))) q3bca@x))) '#f))) (set! q3041@incorrect-usage-macro (lambda (q3bfe@e) (q3129@syntax-violation '#f '"incorrect usage of auxiliary keyword" q3bfe@e))) (set! q3043@parameterize-macro (lambda (q3c00@e) ((lambda (q3c02@t) ((lambda (q3c04@ls/false) (if q3c04@ls/false (apply (lambda (q3c06@b q3c07@b*) (q2fff@bless (cons 'let (cons '() (cons q3c06@b q3c07@b*))))) q3c04@ls/false) ((lambda (q3c0a@t) ((lambda (q3c0c@ls/false) (if q3c0c@ls/false (apply (lambda (q3c0e@olhs* q3c0f@orhs* q3c10@b q3c11@b*) ((lambda (q3c16@lhs* q3c17@rhs*) (q2fff@bless (cons (list 'lambda (append q3c16@lhs* q3c17@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (q3c1a@lhs q3c1b@rhs) (list 'let (list (list 't (list q3c1a@lhs))) (list q3c1a@lhs q3c1b@rhs) (cons 'set! (cons q3c1b@rhs '(t))))) q3c16@lhs* q3c17@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons q3c10@b q3c11@b*))) '(swap)))))) (append q3c0e@olhs* q3c0f@orhs*)))) (q3117@generate-temporaries q3c0e@olhs*) (q3117@generate-temporaries q3c0f@orhs*))) q3c0c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3c0a@t))) (q3049@syntax-dispatch q3c0a@t '(_ #(each (any any)) any . each-any)))) q3c02@t))) (q3049@syntax-dispatch q3c02@t '(_ () any . each-any)))) q3c00@e))) (set! q3045@foreign-call-transformer (lambda (q3c1e@e q3c1f@r q3c20@mr) ((lambda (q3c24@t) ((lambda (q3c26@ls/false) (if q3c26@ls/false (apply (lambda (q3c28@name q3c29@arg*) (cons 'foreign-call (cons (q306b@chi-expr q3c28@name q3c1f@r q3c20@mr) (q3067@chi-expr* q3c29@arg* q3c1f@r q3c20@mr)))) q3c26@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3c24@t))) (q3049@syntax-dispatch q3c24@t '(_ any . each-any)))) q3c1e@e))) (set! q3047@convert-pattern (lambda (q3c2c@pattern q3c2d@keys) ((lambda (q3c31@cvt* q3c33@cvt) (begin (set! q3c31@cvt* (lambda (q3cd0@p* q3cd1@n q3cd2@ids) (if (null? q3cd0@p*) (values '() q3cd2@ids) (call-with-values (lambda () (q3c31@cvt* (cdr q3cd0@p*) q3cd1@n q3cd2@ids)) (lambda (q3cda@q3cd7 q3cdb@q3cd9) ((lambda (q3cde@ids q3cdf@y) (call-with-values (lambda () (q3c33@cvt (car q3cd0@p*) q3cd1@n q3cde@ids)) (lambda (q3ce6@q3ce3 q3ce7@q3ce5) ((lambda (q3cea@ids q3ceb@x) (values (cons q3ceb@x q3cdf@y) q3cea@ids)) q3ce7@q3ce5 q3ce6@q3ce3)))) q3cdb@q3cd9 q3cda@q3cd7)))))) (set! q3c33@cvt (lambda (q3c34@p q3c35@n q3c36@ids) ((lambda (q3c3a@t) ((lambda (q3c3c@ls/false) (if (and q3c3c@ls/false (apply (lambda (q3c3e@id) (q2e44@id? q3c3e@id)) q3c3c@ls/false)) (apply (lambda (q3c40@id) (if (q2e50@bound-id-member? q3c34@p q3c2d@keys) (values (vector 'free-id q3c34@p) q3c36@ids) (if (q2e4a@free-id=? q3c34@p (q2fd3@scheme-stx '_)) (values '_ q3c36@ids) (values 'any (cons (cons q3c34@p q3c35@n) q3c36@ids))))) q3c3c@ls/false) ((lambda (q3c42@t) ((lambda (q3c44@ls/false) (if (and q3c44@ls/false (apply (lambda (q3c46@p q3c47@dots) (q304b@ellipsis? q3c47@dots)) q3c44@ls/false)) (apply (lambda (q3c4a@p q3c4b@dots) (call-with-values (lambda () (q3c33@cvt q3c4a@p (+ q3c35@n '1) q3c36@ids)) (lambda (q3c52@q3c4f q3c53@q3c51) ((lambda (q3c56@ids q3c57@p) (values (if (eq? q3c57@p 'any) 'each-any (vector 'each q3c57@p)) q3c56@ids)) q3c53@q3c51 q3c52@q3c4f)))) q3c44@ls/false) ((lambda (q3c5a@t) ((lambda (q3c5c@ls/false) (if (and q3c5c@ls/false (apply (lambda (q3c5e@x q3c5f@dots q3c60@ys q3c61@z) (q304b@ellipsis? q3c5f@dots)) q3c5c@ls/false)) (apply (lambda (q3c66@x q3c67@dots q3c68@ys q3c69@z) (call-with-values (lambda () (q3c33@cvt q3c69@z q3c35@n q3c36@ids)) (lambda (q3c72@q3c6f q3c73@q3c71) ((lambda (q3c76@ids q3c77@z) (call-with-values (lambda () (q3c31@cvt* q3c68@ys q3c35@n q3c76@ids)) (lambda (q3c7e@q3c7b q3c7f@q3c7d) ((lambda (q3c82@ids q3c83@ys) (call-with-values (lambda () (q3c33@cvt q3c66@x (+ q3c35@n '1) q3c82@ids)) (lambda (q3c8a@q3c87 q3c8b@q3c89) ((lambda (q3c8e@ids q3c8f@x) (values (vector 'each+ q3c8f@x (reverse q3c83@ys) q3c77@z) q3c8e@ids)) q3c8b@q3c89 q3c8a@q3c87)))) q3c7f@q3c7d q3c7e@q3c7b)))) q3c73@q3c71 q3c72@q3c6f)))) q3c5c@ls/false) ((lambda (q3c92@t) ((lambda (q3c94@ls/false) (if q3c94@ls/false (apply (lambda (q3c96@x q3c97@y) (call-with-values (lambda () (q3c33@cvt q3c97@y q3c35@n q3c36@ids)) (lambda (q3c9e@q3c9b q3c9f@q3c9d) ((lambda (q3ca2@ids q3ca3@y) (call-with-values (lambda () (q3c33@cvt q3c96@x q3c35@n q3ca2@ids)) (lambda (q3caa@q3ca7 q3cab@q3ca9) ((lambda (q3cae@ids q3caf@x) (values (cons q3caf@x q3ca3@y) q3cae@ids)) q3cab@q3ca9 q3caa@q3ca7)))) q3c9f@q3c9d q3c9e@q3c9b)))) q3c94@ls/false) ((lambda (q3cb2@t) ((lambda (q3cb4@ls/false) (if q3cb4@ls/false (apply (lambda () (values '() q3c36@ids)) q3cb4@ls/false) ((lambda (q3cb6@t) ((lambda (q3cb8@ls/false) (if (and q3cb8@ls/false (apply (lambda (q3cba@p) (not (q2e10@stx? q3cba@p))) q3cb8@ls/false)) (apply (lambda (q3cbc@p) (call-with-values (lambda () (q3c33@cvt q3cbc@p q3c35@n q3c36@ids)) (lambda (q3cc2@q3cbf q3cc3@q3cc1) ((lambda (q3cc6@ids q3cc7@p) (values (vector 'vector q3cc7@p) q3cc6@ids)) q3cc3@q3cc1 q3cc2@q3cbf)))) q3cb8@ls/false) ((lambda (q3cca@t) ((lambda (q3ccc@ls/false) (if q3ccc@ls/false (apply (lambda (q3cce@datum) (values (vector 'atom (q2e58@stx->datum q3cce@datum)) q3c36@ids)) q3ccc@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3cca@t))) (q3049@syntax-dispatch q3cca@t 'any))) q3cb6@t))) (q3049@syntax-dispatch q3cb6@t '#(vector each-any)))) q3cb2@t))) (q3049@syntax-dispatch q3cb2@t '()))) q3c92@t))) (q3049@syntax-dispatch q3c92@t '(any . any)))) q3c5a@t))) (q3049@syntax-dispatch q3c5a@t '(any any . #(each+ any () any))))) q3c42@t))) (q3049@syntax-dispatch q3c42@t '(any any)))) q3c3a@t))) (q3049@syntax-dispatch q3c3a@t 'any))) q3c34@p))) (q3c33@cvt q3c2c@pattern '0 '()))) '#f '#f))) (set! q3049@syntax-dispatch ((lambda () ((lambda (q3cef@stx^ q3cf1@match-each q3cf3@match-each+ q3cf5@match-each-any q3cf7@match-empty q3cf9@combine q3cfb@match* q3cfd@match) (begin (set! q3cef@stx^ (lambda (q3dca@e q3dcb@m* q3dcc@s* q3dcd@ae*) (if (and (null? q3dcb@m*) (null? q3dcc@s*) (null? q3dcd@ae*)) q3dca@e (q2e2c@mkstx q3dca@e q3dcb@m* q3dcc@s* q3dcd@ae*)))) (set! q3cf1@match-each (lambda (q3daa@e q3dab@p q3dac@m* q3dad@s* q3dae@ae*) (if (pair? q3daa@e) ((lambda (q3db4@first) (and q3db4@first ((lambda (q3db6@rest) (and q3db6@rest (cons q3db4@first q3db6@rest))) (q3cf1@match-each (cdr q3daa@e) q3dab@p q3dac@m* q3dad@s* q3dae@ae*)))) (q3cfd@match (car q3daa@e) q3dab@p q3dac@m* q3dad@s* q3dae@ae* '())) (if (null? q3daa@e) '() (if (q2e10@stx? q3daa@e) (and (not (q2dca@top-marked? q3dac@m*)) (call-with-values (lambda () (join-wraps q3dac@m* q3dad@s* q3dae@ae* q3daa@e)) (lambda (q3dbe@q3db9 q3dbf@q3dbb q3dc0@q3dbd) ((lambda (q3dc4@ae* q3dc5@s* q3dc6@m*) (q3cf1@match-each (q2e12@stx-expr q3daa@e) q3dab@p q3dc6@m* q3dc5@s* q3dc4@ae*)) q3dc0@q3dbd q3dbf@q3dbb q3dbe@q3db9)))) (if (q2998@q286c@annotation? q3daa@e) (q3cf1@match-each (q299a@q2870@annotation-expression q3daa@e) q3dab@p q3dac@m* q3dad@s* q3dae@ae*) '#f)))))) (set! q3cf3@match-each+ (lambda (q3d6a@e q3d6b@x-pat q3d6c@y-pat q3d6d@z-pat q3d6e@m* q3d6f@s* q3d70@ae* q3d71@r) ((letrec ((q3d7a@f (lambda (q3d7c@e q3d7d@m* q3d7e@s* q3d7f@ae*) (if (pair? q3d7c@e) (call-with-values (lambda () (q3d7a@f (cdr q3d7c@e) q3d7d@m* q3d7e@s* q3d7f@ae*)) (lambda (q3d8a@q3d85 q3d8b@q3d87 q3d8c@q3d89) ((lambda (q3d90@r q3d91@y-pat q3d92@xr*) (if q3d90@r (if (null? q3d91@y-pat) ((lambda (q3d96@xr) (if q3d96@xr (values (cons q3d96@xr q3d92@xr*) q3d91@y-pat q3d90@r) (values '#f '#f '#f))) (q3cfd@match (car q3d7c@e) q3d6b@x-pat q3d7d@m* q3d7e@s* q3d7f@ae* '())) (values '() (cdr q3d91@y-pat) (q3cfd@match (car q3d7c@e) (car q3d91@y-pat) q3d7d@m* q3d7e@s* q3d7f@ae* q3d90@r))) (values '#f '#f '#f))) q3d8c@q3d89 q3d8b@q3d87 q3d8a@q3d85))) (if (q2e10@stx? q3d7c@e) (if (q2dca@top-marked? q3d7d@m*) (values '() q3d6c@y-pat (q3cfd@match q3d7c@e q3d6d@z-pat q3d7d@m* q3d7e@s* q3d7f@ae* q3d71@r)) (call-with-values (lambda () (join-wraps q3d7d@m* q3d7e@s* q3d7f@ae* q3d7c@e)) (lambda (q3d9e@q3d99 q3d9f@q3d9b q3da0@q3d9d) ((lambda (q3da4@ae* q3da5@s* q3da6@m*) (q3d7a@f (q2e12@stx-expr q3d7c@e) q3da6@m* q3da5@s* q3da4@ae*)) q3da0@q3d9d q3d9f@q3d9b q3d9e@q3d99)))) (if (q2998@q286c@annotation? q3d7c@e) (q3d7a@f (q299a@q2870@annotation-expression q3d7c@e) q3d7d@m* q3d7e@s* q3d7f@ae*) (values '() q3d6c@y-pat (q3cfd@match q3d7c@e q3d6d@z-pat q3d7d@m* q3d7e@s* q3d7f@ae* q3d71@r)))))))) q3d7a@f) q3d6a@e q3d6e@m* q3d6f@s* q3d70@ae*))) (set! q3cf5@match-each-any (lambda (q3d4e@e q3d4f@m* q3d50@s* q3d51@ae*) (if (pair? q3d4e@e) ((lambda (q3d56@l) (and q3d56@l (cons (q3cef@stx^ (car q3d4e@e) q3d4f@m* q3d50@s* q3d51@ae*) q3d56@l))) (q3cf5@match-each-any (cdr q3d4e@e) q3d4f@m* q3d50@s* q3d51@ae*)) (if (null? q3d4e@e) '() (if (q2e10@stx? q3d4e@e) (and (not (q2dca@top-marked? q3d4f@m*)) (call-with-values (lambda () (join-wraps q3d4f@m* q3d50@s* q3d51@ae* q3d4e@e)) (lambda (q3d5e@q3d59 q3d5f@q3d5b q3d60@q3d5d) ((lambda (q3d64@ae* q3d65@s* q3d66@m*) (q3cf5@match-each-any (q2e12@stx-expr q3d4e@e) q3d66@m* q3d65@s* q3d64@ae*)) q3d60@q3d5d q3d5f@q3d5b q3d5e@q3d59)))) (if (q2998@q286c@annotation? q3d4e@e) (q3cf5@match-each-any (q299a@q2870@annotation-expression q3d4e@e) q3d4f@m* q3d50@s* q3d51@ae*) '#f)))))) (set! q3cf7@match-empty (lambda (q3d48@p q3d49@r) (if (null? q3d48@p) q3d49@r (if (eq? q3d48@p '_) q3d49@r (if (eq? q3d48@p 'any) (cons '() q3d49@r) (if (pair? q3d48@p) (q3cf7@match-empty (car q3d48@p) (q3cf7@match-empty (cdr q3d48@p) q3d49@r)) (if (eq? q3d48@p 'each-any) (cons '() q3d49@r) ((lambda (q3d4c@t) (if (memv q3d4c@t '(each)) (q3cf7@match-empty (vector-ref q3d48@p '1) q3d49@r) (if (memv q3d4c@t '(each+)) (q3cf7@match-empty (vector-ref q3d48@p '1) (q3cf7@match-empty (reverse (vector-ref q3d48@p '2)) (q3cf7@match-empty (vector-ref q3d48@p '3) q3d49@r))) (if (memv q3d4c@t '(free-id atom)) q3d49@r (if (memv q3d4c@t '(scheme-id atom)) q3d49@r (if (memv q3d4c@t '(vector)) (q3cf7@match-empty (vector-ref q3d48@p '1) q3d49@r) (assertion-violation 'syntax-dispatch '"invalid pattern" q3d48@p))))))) (vector-ref q3d48@p '0))))))))) (set! q3cf9@combine (lambda (q3d44@r* q3d45@r) (if (null? (car q3d44@r*)) q3d45@r (cons (map car q3d44@r*) (q3cf9@combine (map cdr q3d44@r*) q3d45@r))))) (set! q3cfb@match* (lambda (q3d20@e q3d21@p q3d22@m* q3d23@s* q3d24@ae* q3d25@r) (if (null? q3d21@p) (and (null? q3d20@e) q3d25@r) (if (pair? q3d21@p) (and (pair? q3d20@e) (q3cfd@match (car q3d20@e) (car q3d21@p) q3d22@m* q3d23@s* q3d24@ae* (q3cfd@match (cdr q3d20@e) (cdr q3d21@p) q3d22@m* q3d23@s* q3d24@ae* q3d25@r))) (if (eq? q3d21@p 'each-any) ((lambda (q3d2c@l) (and q3d2c@l (cons q3d2c@l q3d25@r))) (q3cf5@match-each-any q3d20@e q3d22@m* q3d23@s* q3d24@ae*)) ((lambda (q3d2e@t) (if (memv q3d2e@t '(each)) (if (null? q3d20@e) (q3cf7@match-empty (vector-ref q3d21@p '1) q3d25@r) ((lambda (q3d30@r*) (and q3d30@r* (q3cf9@combine q3d30@r* q3d25@r))) (q3cf1@match-each q3d20@e (vector-ref q3d21@p '1) q3d22@m* q3d23@s* q3d24@ae*))) (if (memv q3d2e@t '(free-id)) (and (symbol? q3d20@e) (q2dca@top-marked? q3d22@m*) (q2e4a@free-id=? (q3cef@stx^ q3d20@e q3d22@m* q3d23@s* q3d24@ae*) (vector-ref q3d21@p '1)) q3d25@r) (if (memv q3d2e@t '(scheme-id)) (and (symbol? q3d20@e) (q2dca@top-marked? q3d22@m*) (q2e4a@free-id=? (q3cef@stx^ q3d20@e q3d22@m* q3d23@s* q3d24@ae*) (q2fd3@scheme-stx (vector-ref q3d21@p '1))) q3d25@r) (if (memv q3d2e@t '(each+)) (call-with-values (lambda () (q3cf3@match-each+ q3d20@e (vector-ref q3d21@p '1) (vector-ref q3d21@p '2) (vector-ref q3d21@p '3) q3d22@m* q3d23@s* q3d24@ae* q3d25@r)) (lambda (q3d38@q3d33 q3d39@q3d35 q3d3a@q3d37) ((lambda (q3d3e@r q3d3f@y-pat q3d40@xr*) (and q3d3e@r (null? q3d3f@y-pat) (if (null? q3d40@xr*) (q3cf7@match-empty (vector-ref q3d21@p '1) q3d3e@r) (q3cf9@combine q3d40@xr* q3d3e@r)))) q3d3a@q3d37 q3d39@q3d35 q3d38@q3d33))) (if (memv q3d2e@t '(atom)) (and (fast-equal? (vector-ref q3d21@p '1) (q2e56@strip q3d20@e q3d22@m*)) q3d25@r) (if (memv q3d2e@t '(vector)) (and (vector? q3d20@e) (q3cfd@match (vector->list q3d20@e) (vector-ref q3d21@p '1) q3d22@m* q3d23@s* q3d24@ae* q3d25@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" q3d21@p)))))))) (vector-ref q3d21@p '0))))))) (set! q3cfd@match (lambda (q3d02@e q3d03@p q3d04@m* q3d05@s* q3d06@ae* q3d07@r) (if (not q3d07@r) '#f (if (eq? q3d03@p '_) q3d07@r (if (eq? q3d03@p 'any) (cons (q3cef@stx^ q3d02@e q3d04@m* q3d05@s* q3d06@ae*) q3d07@r) (if (q2e10@stx? q3d02@e) (and (not (q2dca@top-marked? q3d04@m*)) (call-with-values (lambda () (join-wraps q3d04@m* q3d05@s* q3d06@ae* q3d02@e)) (lambda (q3d14@q3d0f q3d15@q3d11 q3d16@q3d13) ((lambda (q3d1a@ae* q3d1b@s* q3d1c@m*) (q3cfd@match (q2e12@stx-expr q3d02@e) q3d03@p q3d1c@m* q3d1b@s* q3d1a@ae* q3d07@r)) q3d16@q3d13 q3d15@q3d11 q3d14@q3d0f)))) (if (q2998@q286c@annotation? q3d02@e) (q3cfd@match (q299a@q2870@annotation-expression q3d02@e) q3d03@p q3d04@m* q3d05@s* q3d06@ae* q3d07@r) (q3cfb@match* q3d02@e q3d03@p q3d04@m* q3d05@s* q3d06@ae* q3d07@r)))))))) (lambda (q3cfe@e q3cff@p) (q3cfd@match q3cfe@e q3cff@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q304b@ellipsis? (lambda (q3dd2@x) (and (q2e44@id? q3dd2@x) (q2e4a@free-id=? q3dd2@x (q2fd3@scheme-stx '...))))) (set! q304d@underscore? (lambda (q3dd4@x) (and (q2e44@id? q3dd4@x) (q2e4a@free-id=? q3dd4@x (q2fd3@scheme-stx '_))))) (set! q304f@verify-literals (lambda (q3dd6@lits q3dd7@expr) (for-each (lambda (q3dda@x) (if (or (not (q2e44@id? q3dda@x)) (q304b@ellipsis? q3dda@x) (q304d@underscore? q3dda@x)) (q3129@syntax-violation '#f '"invalid literal" q3dd7@expr q3dda@x) (void))) q3dd6@lits))) (set! q3051@syntax-case-transformer ((lambda () ((lambda (q3ddd@build-dispatch-call q3ddf@invalid-ids-error q3de1@gen-clause q3de3@gen-syntax-case) (begin (set! q3ddd@build-dispatch-call (lambda (q3e4e@pvars q3e4f@expr q3e50@y q3e51@r q3e52@mr) ((lambda (q3e58@ids q3e59@levels) ((lambda (q3e5c@labels q3e5d@new-vars) ((lambda (q3e60@body) (list '(primitive apply) (q2da8@q2ce8@build-lambda '#f q3e5d@new-vars q3e60@body) q3e50@y)) (q306b@chi-expr (q2e30@add-subst (q2e04@make-full-rib q3e58@ids q3e5c@labels) q3e4f@expr) (append (map (lambda (q3e62@label q3e63@var q3e64@level) (cons q3e62@label (q2e5e@make-binding 'syntax (cons q3e63@var q3e64@level)))) q3e5c@labels q3e5d@new-vars (map cdr q3e4e@pvars)) q3e51@r) q3e52@mr))) (map q2dd0@gen-label q3e58@ids) (map q2dcc@gen-lexical q3e58@ids))) (map car q3e4e@pvars) (map cdr q3e4e@pvars)))) (set! q3ddf@invalid-ids-error (lambda (q3e42@id* q3e43@e q3e44@class) ((letrec ((q3e48@find (lambda (q3e4a@id* q3e4b@ok*) (if (null? q3e4a@id*) (q3129@syntax-violation '#f '"invalid syntax" q3e43@e) (if (q2e44@id? (car q3e4a@id*)) (if (q2e50@bound-id-member? (car q3e4a@id*) q3e4b@ok*) (q3125@syntax-error (car q3e4a@id*) '"duplicate " q3e44@class) (q3e48@find (cdr q3e4a@id*) (cons (car q3e4a@id*) q3e4b@ok*))) (q3125@syntax-error (car q3e4a@id*) '"invalid " q3e44@class)))))) q3e48@find) q3e42@id* '()))) (set! q3de1@gen-clause (lambda (q3e1a@x q3e1b@keys q3e1c@clauses q3e1d@r q3e1e@mr q3e1f@pat q3e20@fender q3e21@expr) (call-with-values (lambda () (q3047@convert-pattern q3e1f@pat q3e1b@keys)) (lambda (q3e2e@q3e2b q3e2f@q3e2d) ((lambda (q3e32@pvars q3e33@p) (if (not (q2e4e@distinct-bound-ids? (map car q3e32@pvars))) (q3ddf@invalid-ids-error (map car q3e32@pvars) q3e1f@pat '"pattern variable") (if (not (for-all (lambda (q3e36@x) (not (q304b@ellipsis? (car q3e36@x)))) q3e32@pvars)) (q3129@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" q3e1f@pat) ((lambda (q3e38@y) ((lambda (q3e3a@test) ((lambda (q3e3c@conseq) ((lambda (q3e3e@altern) (list (q2da8@q2ce8@build-lambda '#f (list q3e38@y) (list 'if q3e3a@test q3e3c@conseq q3e3e@altern)) (list '(primitive syntax-dispatch) q3e1a@x (list 'quote q3e33@p)))) (q3de3@gen-syntax-case q3e1a@x q3e1b@keys q3e1c@clauses q3e1d@r q3e1e@mr))) (q3ddd@build-dispatch-call q3e32@pvars q3e21@expr q3e38@y q3e1d@r q3e1e@mr))) (if (eq? q3e20@fender '#t) q3e38@y ((lambda (q3e40@call) (list 'if q3e38@y q3e40@call (list 'quote '#f))) (q3ddd@build-dispatch-call q3e32@pvars q3e20@fender q3e38@y q3e1d@r q3e1e@mr))))) (q2dcc@gen-lexical 'tmp))))) q3e2f@q3e2d q3e2e@q3e2b))))) (set! q3de3@gen-syntax-case (lambda (q3df8@x q3df9@keys q3dfa@clauses q3dfb@r q3dfc@mr) (if (null? q3dfa@clauses) (list '(primitive syntax-error) q3df8@x) ((lambda (q3e02@t) ((lambda (q3e04@ls/false) (if q3e04@ls/false (apply (lambda (q3e06@pat q3e07@expr) (if (and (q2e44@id? q3e06@pat) (not (q2e50@bound-id-member? q3e06@pat q3df9@keys)) (not (q304b@ellipsis? q3e06@pat))) (if (q2e4a@free-id=? q3e06@pat (q2fd3@scheme-stx '_)) (q306b@chi-expr q3e07@expr q3dfb@r q3dfc@mr) ((lambda (q3e0a@lab q3e0b@lex) ((lambda (q3e0e@body) (list (q2da8@q2ce8@build-lambda '#f (list q3e0b@lex) q3e0e@body) q3df8@x)) (q306b@chi-expr (q2e30@add-subst (q2e04@make-full-rib (list q3e06@pat) (list q3e0a@lab)) q3e07@expr) (cons (cons q3e0a@lab (q2e5e@make-binding 'syntax (cons q3e0b@lex '0))) q3dfb@r) q3dfc@mr))) (q2dd0@gen-label q3e06@pat) (q2dcc@gen-lexical q3e06@pat))) (q3de1@gen-clause q3df8@x q3df9@keys (cdr q3dfa@clauses) q3dfb@r q3dfc@mr q3e06@pat '#t q3e07@expr))) q3e04@ls/false) ((lambda (q3e10@t) ((lambda (q3e12@ls/false) (if q3e12@ls/false (apply (lambda (q3e14@pat q3e15@fender q3e16@expr) (q3de1@gen-clause q3df8@x q3df9@keys (cdr q3dfa@clauses) q3dfb@r q3dfc@mr q3e14@pat q3e15@fender q3e16@expr)) q3e12@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3e10@t))) (q3049@syntax-dispatch q3e10@t '(any any any)))) q3e02@t))) (q3049@syntax-dispatch q3e02@t '(any any)))) (car q3dfa@clauses))))) (lambda (q3de4@e q3de5@r q3de6@mr) ((lambda (q3dea@t) ((lambda (q3dec@ls/false) (if q3dec@ls/false (apply (lambda (q3dee@expr q3def@keys q3df0@clauses) (begin (q304f@verify-literals q3def@keys q3de4@e) ((lambda (q3df4@x) ((lambda (q3df6@body) (list (q2da8@q2ce8@build-lambda '#f (list q3df4@x) q3df6@body) (q306b@chi-expr q3dee@expr q3de5@r q3de6@mr))) (q3de3@gen-syntax-case q3df4@x q3def@keys q3df0@clauses q3de5@r q3de6@mr))) (q2dcc@gen-lexical 'tmp)))) q3dec@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3dea@t))) (q3049@syntax-dispatch q3dea@t '(_ any each-any . each-any)))) q3de4@e)))) '#f '#f '#f '#f)))) (set! q3053@ellipsis-map (lambda (q3e68@proc q3e69@ls . q3e6c@ls*) ((lambda (q3e6f@who) (begin (set! q3e6f@who '...) (begin (if (not (list? q3e69@ls)) (assertion-violation q3e6f@who '"not a list" q3e69@ls) (void)) (if (not (null? q3e6c@ls*)) ((lambda (q3e70@n) (for-each (lambda (q3e72@x) (begin (if (not (list? q3e72@x)) (assertion-violation q3e6f@who '"not a list" q3e72@x) (void)) (if (not (= (length q3e72@x) q3e70@n)) (assertion-violation q3e6f@who '"length mismatch" q3e69@ls q3e72@x) (void)))) q3e6c@ls*)) (length q3e69@ls)) (void)) (apply map q3e68@proc q3e69@ls q3e6c@ls*)))) '#f))) (set! q3055@syntax-transformer ((lambda () ((lambda (q3e75@gen-syntax q3e77@gen-ref q3e79@gen-append q3e7b@gen-mappend q3e7d@gen-map q3e7f@gen-cons q3e81@gen-vector q3e83@regen) (begin (set! q3e75@gen-syntax (lambda (q3eec@src q3eed@e q3eee@r q3eef@maps q3ef0@ellipsis? q3ef1@vec?) ((lambda (q3ef8@t) ((lambda (q3efa@ls/false) (if (and q3efa@ls/false (apply (lambda (q3efc@dots) (q3ef0@ellipsis? q3efc@dots)) q3efa@ls/false)) (apply (lambda (q3efe@dots) (q3129@syntax-violation '#f '"misplaced ellipsis in syntax form" q3eec@src)) q3efa@ls/false) ((lambda (q3f00@t) ((lambda (q3f02@ls/false) (if (and q3f02@ls/false (apply (lambda (q3f04@id) (q2e44@id? q3f04@id)) q3f02@ls/false)) (apply (lambda (q3f06@id) ((lambda (q3f08@label) ((lambda (q3f0a@b) ((lambda () (if (eq? (q2e60@binding-type q3f0a@b) 'syntax) (call-with-values (lambda () ((lambda (q3f10@var.lev) (q3e77@gen-ref q3eec@src (car q3f10@var.lev) (cdr q3f10@var.lev) q3eef@maps)) (q2e62@binding-value q3f0a@b))) (lambda (q3f12@q3f0d q3f13@q3f0f) ((lambda (q3f16@maps q3f17@var) (values (list 'ref q3f17@var) q3f16@maps)) q3f13@q3f0f q3f12@q3f0d))) (values (list 'quote q3eed@e) q3eef@maps))))) (q2e5c@label->binding q3f08@label q3eee@r))) (q2e5a@id->label q3eed@e))) q3f02@ls/false) ((lambda (q3f1a@t) ((lambda (q3f1c@ls/false) (if (and q3f1c@ls/false (apply (lambda (q3f1e@dots q3f1f@e) (q3ef0@ellipsis? q3f1e@dots)) q3f1c@ls/false)) (apply (lambda (q3f22@dots q3f23@e) (if q3ef1@vec? (q3129@syntax-violation '#f '"misplaced ellipsis in syntax form" q3eec@src) (q3e75@gen-syntax q3eec@src q3f23@e q3eee@r q3eef@maps (lambda (q3f26@x) '#f) '#f))) q3f1c@ls/false) ((lambda (q3f28@t) ((lambda (q3f2a@ls/false) (if (and q3f2a@ls/false (apply (lambda (q3f2c@x q3f2d@dots q3f2e@y) (q3ef0@ellipsis? q3f2d@dots)) q3f2a@ls/false)) (apply (lambda (q3f32@x q3f33@dots q3f34@y) ((letrec ((q3f38@f (lambda (q3f3a@y q3f3b@k) ((lambda (q3f3e@t) ((lambda (q3f40@ls/false) (if q3f40@ls/false (apply (lambda () (q3f3b@k q3eef@maps)) q3f40@ls/false) ((lambda (q3f42@t) ((lambda (q3f44@ls/false) (if (and q3f44@ls/false (apply (lambda (q3f46@dots q3f47@y) (q3ef0@ellipsis? q3f46@dots)) q3f44@ls/false)) (apply (lambda (q3f4a@dots q3f4b@y) (q3f38@f q3f4b@y (lambda (q3f4e@maps) (call-with-values (lambda () (q3f3b@k (cons '() q3f4e@maps))) (lambda (q3f54@q3f51 q3f55@q3f53) ((lambda (q3f58@maps q3f59@x) (if (null? (car q3f58@maps)) (q3129@syntax-violation '#f '"extra ellipsis in syntax form" q3eec@src) (values (q3e7b@gen-mappend q3f59@x (car q3f58@maps)) (cdr q3f58@maps)))) q3f55@q3f53 q3f54@q3f51)))))) q3f44@ls/false) ((lambda (q3f5c@t) ((lambda (q3f5e@ls/false) (if q3f5e@ls/false (apply (lambda () (call-with-values (lambda () (q3e75@gen-syntax q3eec@src q3f3a@y q3eee@r q3eef@maps q3ef0@ellipsis? q3ef1@vec?)) (lambda (q3f64@q3f61 q3f65@q3f63) ((lambda (q3f68@maps q3f69@y) (call-with-values (lambda () (q3f3b@k q3f68@maps)) (lambda (q3f70@q3f6d q3f71@q3f6f) ((lambda (q3f74@maps q3f75@x) (values (q3e79@gen-append q3f75@x q3f69@y) q3f74@maps)) q3f71@q3f6f q3f70@q3f6d)))) q3f65@q3f63 q3f64@q3f61)))) q3f5e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3f5c@t))) (q3049@syntax-dispatch q3f5c@t '_))) q3f42@t))) (q3049@syntax-dispatch q3f42@t '(any . any)))) q3f3e@t))) (q3049@syntax-dispatch q3f3e@t '()))) q3f3a@y)))) q3f38@f) q3f34@y (lambda (q3f78@maps) (call-with-values (lambda () (q3e75@gen-syntax q3eec@src q3f32@x q3eee@r (cons '() q3f78@maps) q3ef0@ellipsis? '#f)) (lambda (q3f7e@q3f7b q3f7f@q3f7d) ((lambda (q3f82@maps q3f83@x) (if (null? (car q3f82@maps)) (q3129@syntax-violation '#f '"extra ellipsis in syntax form" q3eec@src) (values (q3e7d@gen-map q3f83@x (car q3f82@maps)) (cdr q3f82@maps)))) q3f7f@q3f7d q3f7e@q3f7b)))))) q3f2a@ls/false) ((lambda (q3f86@t) ((lambda (q3f88@ls/false) (if q3f88@ls/false (apply (lambda (q3f8a@x q3f8b@y) (call-with-values (lambda () (q3e75@gen-syntax q3eec@src q3f8a@x q3eee@r q3eef@maps q3ef0@ellipsis? '#f)) (lambda (q3f92@q3f8f q3f93@q3f91) ((lambda (q3f96@maps q3f97@xnew) (call-with-values (lambda () (q3e75@gen-syntax q3eec@src q3f8b@y q3eee@r q3f96@maps q3ef0@ellipsis? q3ef1@vec?)) (lambda (q3f9e@q3f9b q3f9f@q3f9d) ((lambda (q3fa2@maps q3fa3@ynew) (values (q3e7f@gen-cons q3eed@e q3f8a@x q3f8b@y q3f97@xnew q3fa3@ynew) q3fa2@maps)) q3f9f@q3f9d q3f9e@q3f9b)))) q3f93@q3f91 q3f92@q3f8f)))) q3f88@ls/false) ((lambda (q3fa6@t) ((lambda (q3fa8@ls/false) (if q3fa8@ls/false (apply (lambda (q3faa@ls) (call-with-values (lambda () (q3e75@gen-syntax q3eec@src q3faa@ls q3eee@r q3eef@maps q3ef0@ellipsis? '#t)) (lambda (q3fb0@q3fad q3fb1@q3faf) ((lambda (q3fb4@maps q3fb5@lsnew) (values (q3e81@gen-vector q3eed@e q3faa@ls q3fb5@lsnew) q3fb4@maps)) q3fb1@q3faf q3fb0@q3fad)))) q3fa8@ls/false) ((lambda (q3fb8@t) ((lambda (q3fba@ls/false) (if q3fba@ls/false (apply (lambda () (values (list 'quote q3eed@e) q3eef@maps)) q3fba@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3fb8@t))) (q3049@syntax-dispatch q3fb8@t '_))) q3fa6@t))) (q3049@syntax-dispatch q3fa6@t '#(vector each-any)))) q3f86@t))) (q3049@syntax-dispatch q3f86@t '(any . any)))) q3f28@t))) (q3049@syntax-dispatch q3f28@t '(any any . any)))) q3f1a@t))) (q3049@syntax-dispatch q3f1a@t '(any any)))) q3f00@t))) (q3049@syntax-dispatch q3f00@t 'any))) q3ef8@t))) (q3049@syntax-dispatch q3ef8@t 'any))) q3eed@e))) (set! q3e77@gen-ref (lambda (q3ed2@src q3ed3@var q3ed4@level q3ed5@maps) (if (= q3ed4@level '0) (values q3ed3@var q3ed5@maps) (if (null? q3ed5@maps) (q3129@syntax-violation '#f '"missing ellipsis in syntax form" q3ed2@src) (call-with-values (lambda () (q3e77@gen-ref q3ed2@src q3ed3@var (- q3ed4@level '1) (cdr q3ed5@maps))) (lambda (q3ede@q3edb q3edf@q3edd) ((lambda (q3ee2@outer-maps q3ee3@outer-var) ((lambda (q3ee6@t) (if q3ee6@t ((lambda (q3ee8@b) (values (cdr q3ee8@b) q3ed5@maps)) q3ee6@t) ((lambda (q3eea@inner-var) (values q3eea@inner-var (cons (cons (cons q3ee3@outer-var q3eea@inner-var) (car q3ed5@maps)) q3ee2@outer-maps))) (q2dcc@gen-lexical 'tmp)))) (assq q3ee3@outer-var (car q3ed5@maps)))) q3edf@q3edd q3ede@q3edb))))))) (set! q3e79@gen-append (lambda (q3ece@x q3ecf@y) (if (fast-equal? q3ecf@y ''()) q3ece@x (list 'append q3ece@x q3ecf@y)))) (set! q3e7b@gen-mappend (lambda (q3eca@e q3ecb@map-env) (list 'apply '(primitive append) (q3e7d@gen-map q3eca@e q3ecb@map-env)))) (set! q3e7d@gen-map (lambda (q3eb8@e q3eb9@map-env) ((lambda (q3ebc@formals q3ebd@actuals) (if (eq? (car q3eb8@e) 'ref) (car q3ebd@actuals) (if (for-all (lambda (q3ec0@x) (and (eq? (car q3ec0@x) 'ref) (memq (cadr q3ec0@x) q3ebc@formals))) (cdr q3eb8@e)) ((lambda (q3ec2@args) (cons 'map (cons (list 'primitive (car q3eb8@e)) q3ec2@args))) (map ((lambda (q3ec4@r) (lambda (q3ec6@x) (cdr (assq (cadr q3ec6@x) q3ec4@r)))) (map cons q3ebc@formals q3ebd@actuals)) (cdr q3eb8@e))) (cons* 'map (list 'lambda q3ebc@formals q3eb8@e) q3ebd@actuals)))) (map cdr q3eb9@map-env) (map (lambda (q3ec8@x) (list 'ref (car q3ec8@x))) q3eb9@map-env)))) (set! q3e7f@gen-cons (lambda (q3ea8@e q3ea9@x q3eaa@y q3eab@xnew q3eac@ynew) ((lambda (q3eb2@t) (if (memv q3eb2@t '(quote)) (if (eq? (car q3eab@xnew) 'quote) ((lambda (q3eb4@xnew q3eb5@ynew) (if (and (eq? q3eb4@xnew q3ea9@x) (eq? q3eb5@ynew q3eaa@y)) (list 'quote q3ea8@e) (list 'quote (cons q3eb4@xnew q3eb5@ynew)))) (cadr q3eab@xnew) (cadr q3eac@ynew)) (if (null? (cadr q3eac@ynew)) (list 'list q3eab@xnew) (list 'cons q3eab@xnew q3eac@ynew))) (if (memv q3eb2@t '(list)) (cons 'list (cons q3eab@xnew (cdr q3eac@ynew))) (list 'cons q3eab@xnew q3eac@ynew)))) (car q3eac@ynew)))) (set! q3e81@gen-vector (lambda (q3ea2@e q3ea3@ls q3ea4@lsnew) (if (eq? (car q3ea4@lsnew) 'quote) (if (eq? (cadr q3ea4@lsnew) q3ea3@ls) (list 'quote q3ea2@e) (list 'quote (list->vector (cadr q3ea4@lsnew)))) (if (eq? (car q3ea4@lsnew) 'list) (cons 'vector (cdr q3ea4@lsnew)) (list 'list->vector q3ea4@lsnew))))) (set! q3e83@regen (lambda (q3e9c@x) ((lambda (q3e9e@t) (if (memv q3e9e@t '(ref)) (cadr q3e9c@x) (if (memv q3e9e@t '(primitive)) (list 'primitive (cadr q3e9c@x)) (if (memv q3e9e@t '(quote)) (list 'quote (cadr q3e9c@x)) (if (memv q3e9e@t '(lambda)) (q2da8@q2ce8@build-lambda '#f (cadr q3e9c@x) (q3e83@regen (caddr q3e9c@x))) (if (memv q3e9e@t '(map)) ((lambda (q3ea0@ls) (cons '(primitive ellipsis-map) q3ea0@ls)) (map q3e83@regen (cdr q3e9c@x))) (cons (list 'primitive (car q3e9c@x)) (map q3e83@regen (cdr q3e9c@x))))))))) (car q3e9c@x)))) (lambda (q3e84@e q3e85@r q3e86@mr) ((lambda (q3e8a@t) ((lambda (q3e8c@ls/false) (if q3e8c@ls/false (apply (lambda (q3e8e@x) (call-with-values (lambda () (q3e75@gen-syntax q3e84@e q3e8e@x q3e85@r '() q304b@ellipsis? '#f)) (lambda (q3e94@q3e91 q3e95@q3e93) ((lambda (q3e98@maps q3e99@e) (q3e83@regen q3e99@e)) q3e95@q3e93 q3e94@q3e91)))) q3e8c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3e8a@t))) (q3049@syntax-dispatch q3e8a@t '(_ any)))) q3e84@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q3057@core-macro-transformer (lambda (q3fbc@name) ((lambda (q3fbe@t) (if (memv q3fbe@t '(quote)) q2ff9@quote-transformer (if (memv q3fbe@t '(lambda)) q2ffd@lambda-transformer (if (memv q3fbe@t '(case-lambda)) q2ffb@case-lambda-transformer (if (memv q3fbe@t '(letrec)) q2fe1@letrec-transformer (if (memv q3fbe@t '(letrec*)) q2fe3@letrec*-transformer (if (memv q3fbe@t '(if)) q2ff1@if-transformer (if (memv q3fbe@t '(and)) q2ff3@and-transformer (if (memv q3fbe@t '(or)) q2ff5@or-transformer (if (memv q3fbe@t '(foreign-call)) q3045@foreign-call-transformer (if (memv q3fbe@t '(syntax-case)) q3051@syntax-case-transformer (if (memv q3fbe@t '(syntax)) q3055@syntax-transformer (if (memv q3fbe@t '(type-descriptor)) q2fe7@type-descriptor-transformer (if (memv q3fbe@t '(record-type-descriptor)) q2fe9@record-type-descriptor-transformer (if (memv q3fbe@t '(record-constructor-descriptor)) q2feb@record-constructor-descriptor-transformer (if (memv q3fbe@t '(fluid-let-syntax)) q2fe5@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" q3fbc@name))))))))))))))))) q3fbc@name))) (set! q3059@symbol-macro (lambda (q3fc0@x q3fc1@set) ((lambda (q3fc4@t) ((lambda (q3fc6@ls/false) (if (and q3fc6@ls/false (apply (lambda (q3fc8@name) (and (q2e44@id? q3fc8@name) (memq (q2e46@id->sym q3fc8@name) q3fc1@set))) q3fc6@ls/false)) (apply (lambda (q3fca@name) (q2fff@bless (list 'quote q3fca@name))) q3fc6@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q3fc4@t))) (q3049@syntax-dispatch q3fc4@t '(_ any)))) q3fc0@x))) (set! q305b@macro-transformer (lambda (q3fcc@x) (if (procedure? q3fcc@x) q3fcc@x (if (symbol? q3fcc@x) ((lambda (q3fce@t) (if (memv q3fce@t '(define-record-type)) q303d@define-record-type-macro (if (memv q3fce@t '(define-struct)) q303b@define-struct-macro (if (memv q3fce@t '(include)) q3031@include-macro (if (memv q3fce@t '(cond)) q302d@cond-macro (if (memv q3fce@t '(let)) q3005@let-macro (if (memv q3fce@t '(do)) q3025@do-macro (if (memv q3fce@t '(or)) q3029@or-macro (if (memv q3fce@t '(and)) q302b@and-macro (if (memv q3fce@t '(let*)) q3027@let*-macro (if (memv q3fce@t '(let-values)) q3007@let-values-macro (if (memv q3fce@t '(let*-values)) q3009@let*-values-macro (if (memv q3fce@t '(syntax-rules)) q3035@syntax-rules-macro (if (memv q3fce@t '(quasiquote)) q3037@quasiquote-macro (if (memv q3fce@t '(quasisyntax)) q3039@quasisyntax-macro (if (memv q3fce@t '(with-syntax)) q3001@with-syntax-macro (if (memv q3fce@t '(when)) q2fed@when-macro (if (memv q3fce@t '(unless)) q2fef@unless-macro (if (memv q3fce@t '(case)) q2ff7@case-macro (if (memv q3fce@t '(identifier-syntax)) q3023@identifier-syntax-macro (if (memv q3fce@t '(time)) q301b@time-macro (if (memv q3fce@t '(delay)) q301d@delay-macro (if (memv q3fce@t '(assert)) q301f@assert-macro (if (memv q3fce@t '(endianness)) q3021@endianness-macro (if (memv q3fce@t '(guard)) q3017@guard-macro (if (memv q3fce@t '(define-enumeration)) q3019@define-enumeration-macro (if (memv q3fce@t '(trace-lambda)) q300b@trace-lambda-macro (if (memv q3fce@t '(trace-define)) q300d@trace-define-macro (if (memv q3fce@t '(trace-define-syntax)) q300f@trace-define-syntax-macro (if (memv q3fce@t '(trace-let-syntax)) q3013@trace-let-syntax-macro (if (memv q3fce@t '(trace-letrec-syntax)) q3015@trace-letrec-syntax-macro (if (memv q3fce@t '(define-condition-type)) q303f@define-condition-type-macro (if (memv q3fce@t '(parameterize)) q3043@parameterize-macro (if (memv q3fce@t '(include-into)) q3033@include-into-macro (if (memv q3fce@t '(eol-style)) (lambda (q3fd0@x) (q3059@symbol-macro q3fd0@x '(none lf cr crlf nel crnel ls))) (if (memv q3fce@t '(error-handling-mode)) (lambda (q3fd2@x) (q3059@symbol-macro q3fd2@x '(ignore raise replace))) (if (memv q3fce@t '(buffer-mode)) (lambda (q3fd4@x) (q3059@symbol-macro q3fd4@x '(none line block))) (if (memv q3fce@t '(file-options)) q2dbf@file-options-macro (if (memv q3fce@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) q3041@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" q3fcc@x)))))))))))))))))))))))))))))))))))))))) q3fcc@x) (error 'core-macro-transformer '"BUG: invalid macro" q3fcc@x))))) (set! q305d@local-macro-transformer (lambda (q3fd6@x) (car q3fd6@x))) (set! q305f@do-macro-call (lambda (q3fd8@transformer q3fd9@expr) ((lambda (q3fdc@out) (begin ((letrec ((q3fde@f (lambda (q3fe0@x) (if (not (q2e10@stx? q3fe0@x)) (if (pair? q3fe0@x) (begin (q3fde@f (car q3fe0@x)) (q3fde@f (cdr q3fe0@x))) (if (vector? q3fe0@x) (vector-for-each q3fde@f q3fe0@x) (if (symbol? q3fe0@x) (q3129@syntax-violation '#f '"raw symbol encountered in output of macro" q3fd9@expr q3fe0@x) (void)))) (void))))) q3fde@f) q3fdc@out) (q2e2e@add-mark (q2e26@gen-mark) q3fdc@out q3fd9@expr))) (q3fd8@transformer (q2e2e@add-mark q2e28@anti-mark q3fd9@expr '#f))))) (set! q3061@chi-macro (lambda (q3fe2@p q3fe3@e) (q305f@do-macro-call (q305b@macro-transformer q3fe2@p) q3fe3@e))) (set! q3063@chi-local-macro (lambda (q3fe6@p q3fe7@e) (q305f@do-macro-call (q305d@local-macro-transformer q3fe6@p) q3fe7@e))) (set! q3065@chi-global-macro (lambda (q3fea@p q3feb@e) ((lambda (q3fee@lib q3fef@loc) (begin (q2c70@q2abf@visit-library q3fee@lib) ((lambda (q3ff2@x) ((lambda (q3ff4@transformer) (q305f@do-macro-call q3ff4@transformer q3feb@e)) (if (procedure? q3ff2@x) q3ff2@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" q3ff2@x)))) (symbol-value q3fef@loc)))) (car q3fea@p) (cdr q3fea@p)))) (set! q3067@chi-expr* (lambda (q3ff6@e* q3ff7@r q3ff8@mr) (if (null? q3ff6@e*) '() ((lambda (q3ffc@e) (cons q3ffc@e (q3067@chi-expr* (cdr q3ff6@e*) q3ff7@r q3ff8@mr))) (q306b@chi-expr (car q3ff6@e*) q3ff7@r q3ff8@mr))))) (set! q3069@chi-application (lambda (q3ffe@e q3fff@r q4000@mr) ((lambda (q4004@t) ((lambda (q4006@ls/false) (if q4006@ls/false (apply (lambda (q4008@rator q4009@rands) ((lambda (q400c@rator) (cons q400c@rator (q3067@chi-expr* q4009@rands q3fff@r q4000@mr))) (q306b@chi-expr q4008@rator q3fff@r q4000@mr))) q4006@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4004@t))) (q3049@syntax-dispatch q4004@t '(any . each-any)))) q3ffe@e))) (set! q306b@chi-expr (lambda (q400e@e q400f@r q4010@mr) (call-with-values (lambda () (q2e66@syntax-type q400e@e q400f@r)) (lambda (q401a@q4015 q401b@q4017 q401c@q4019) ((lambda (q4020@kwd q4021@value q4022@type) ((lambda (q4026@t) (if (memv q4026@t '(core-macro)) ((lambda (q4028@transformer) (q4028@transformer q400e@e q400f@r q4010@mr)) (q3057@core-macro-transformer q4021@value)) (if (memv q4026@t '(global)) ((lambda (q402a@lib) ((lambda (q402c@loc) ((lambda () (begin ((q30b1@inv-collector) q402a@lib) q402c@loc)))) (cdr q4021@value))) (car q4021@value)) (if (memv q4026@t '(core-prim)) ((lambda (q402e@name) (list 'primitive q402e@name)) q4021@value) (if (memv q4026@t '(call)) (q3069@chi-application q400e@e q400f@r q4010@mr) (if (memv q4026@t '(lexical)) ((lambda (q4030@lex) q4030@lex) (q2fd5@lexical-var q4021@value)) (if (memv q4026@t '(global-macro global-macro!)) (q306b@chi-expr (q3065@chi-global-macro q4021@value q400e@e) q400f@r q4010@mr) (if (memv q4026@t '(local-macro local-macro!)) (q306b@chi-expr (q3063@chi-local-macro q4021@value q400e@e) q400f@r q4010@mr) (if (memv q4026@t '(macro macro!)) (q306b@chi-expr (q3061@chi-macro q4021@value q400e@e) q400f@r q4010@mr) (if (memv q4026@t '(constant)) ((lambda (q4032@datum) (list 'quote q4032@datum)) q4021@value) (if (memv q4026@t '(set!)) (q306d@chi-set! q400e@e q400f@r q4010@mr) (if (memv q4026@t '(begin)) ((lambda (q4034@t) ((lambda (q4036@ls/false) (if q4036@ls/false (apply (lambda (q4038@x q4039@x*) (q2dab@q2d1a@build-sequence '#f (q3067@chi-expr* (cons q4038@x q4039@x*) q400f@r q4010@mr))) q4036@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4034@t))) (q3049@syntax-dispatch q4034@t '(_ any . each-any)))) q400e@e) (if (memv q4026@t '(let-syntax letrec-syntax)) ((lambda (q403c@t) ((lambda (q403e@ls/false) (if (and q403e@ls/false (apply (lambda (q4040@xlhs* q4041@xrhs* q4042@xbody q4043@xbody*) (if (not (q2e4c@valid-bound-ids? q4040@xlhs*)) (q3129@syntax-violation '#f '"invalid identifiers" q400e@e) (void))) q403e@ls/false)) (apply (lambda (q4048@xlhs* q4049@xrhs* q404a@xbody q404b@xbody*) ((lambda (q4050@xlab*) ((lambda (q4052@xrib) ((lambda (q4054@xb*) ((lambda () (q2dab@q2d1a@build-sequence '#f (q3067@chi-expr* (map (lambda (q4056@x) (q2e30@add-subst q4052@xrib q4056@x)) (cons q404a@xbody q404b@xbody*)) (append (map cons q4050@xlab* q4054@xb*) q400f@r) (append (map cons q4050@xlab* q4054@xb*) q4010@mr)))))) (map (lambda (q4058@x) (q2e7c@make-eval-transformer (q30a3@expand-transformer (if (eq? q4022@type 'let-syntax) q4058@x (q2e30@add-subst q4052@xrib q4058@x)) q4010@mr))) q4049@xrhs*))) (q2e04@make-full-rib q4048@xlhs* q4050@xlab*))) (map q2dd0@gen-label q4048@xlhs*))) q403e@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q403c@t))) (q3049@syntax-dispatch q403c@t '(_ #(each (any any)) any . each-any)))) q400e@e) (if (memv q4026@t '(displaced-lexical)) (q3129@syntax-violation '#f '"identifier out of context" q400e@e) (if (memv q4026@t '(syntax)) (q3129@syntax-violation '#f '"reference to pattern variable outside a syntax form" q400e@e) (if (memv q4026@t '(define define-syntax module import library)) (q3129@syntax-violation '#f (string-append ((lambda (q405a@t) (if (memv q405a@t '(define)) '"a definition" (if (memv q405a@t '(define-syntax)) '"a define-syntax" (if (memv q405a@t '(module)) '"a module definition" (if (memv q405a@t '(library)) '"a library definition" (if (memv q405a@t '(import)) '"an import declaration" (if (memv q405a@t '(export)) '"an export declaration" '"a non-expression"))))))) q4022@type) '" was found where an expression was expected") q400e@e) (if (memv q4026@t '(mutable)) (q3129@syntax-violation '#f '"attempt to reference an unexportable variable" q400e@e) (q3129@syntax-violation '#f '"invalid expression" q400e@e)))))))))))))))))) q4022@type)) q401c@q4019 q401b@q4017 q401a@q4015))))) (set! q306d@chi-set! (lambda (q405c@e q405d@r q405e@mr) ((lambda (q4062@t) ((lambda (q4064@ls/false) (if (and q4064@ls/false (apply (lambda (q4066@x q4067@v) (q2e44@id? q4066@x)) q4064@ls/false)) (apply (lambda (q406a@x q406b@v) (call-with-values (lambda () (q2e66@syntax-type q406a@x q405d@r)) (lambda (q4074@q406f q4075@q4071 q4076@q4073) ((lambda (q407a@kwd q407b@value q407c@type) ((lambda (q4080@t) (if (memv q4080@t '(lexical)) (begin (q2fd9@set-lexical-mutable! q407b@value '#t) (list 'set! (q2fd5@lexical-var q407b@value) (q306b@chi-expr q406b@v q405d@r q405e@mr))) (if (memv q4080@t '(core-prim)) (q3129@syntax-violation '#f '"cannot modify imported core primitive" q405c@e) (if (memv q4080@t '(global)) (q3129@syntax-violation '#f '"attempt to modify imported binding" q405c@e) (if (memv q4080@t '(global-macro!)) (q306b@chi-expr (q3065@chi-global-macro q407b@value q405c@e) q405d@r q405e@mr) (if (memv q4080@t '(local-macro!)) (q306b@chi-expr (q3063@chi-local-macro q407b@value q405c@e) q405d@r q405e@mr) (if (memv q4080@t '(mutable)) (q3129@syntax-violation '#f '"attempt to assign to an unexportable variable" q405c@e) (q3129@syntax-violation '#f '"invalid syntax" q405c@e)))))))) q407c@type)) q4076@q4073 q4075@q4071 q4074@q406f)))) q4064@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4062@t))) (q3049@syntax-dispatch q4062@t '(_ any any)))) q405c@e))) (set! q306f@verify-formals (lambda (q4082@fmls q4083@stx) ((lambda (q4086@t) ((lambda (q4088@ls/false) (if q4088@ls/false (apply (lambda (q408a@x*) (if (not (q2e4c@valid-bound-ids? q408a@x*)) (q3003@invalid-fmls-error q4083@stx q4082@fmls) (void))) q4088@ls/false) ((lambda (q408c@t) ((lambda (q408e@ls/false) (if q408e@ls/false (apply (lambda (q4090@x* q4091@x) (if (not (q2e4c@valid-bound-ids? (cons q4091@x q4090@x*))) (q3003@invalid-fmls-error q4083@stx q4082@fmls) (void))) q408e@ls/false) ((lambda (q4094@t) ((lambda (q4096@ls/false) (if q4096@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid syntax" q4083@stx)) q4096@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4094@t))) (q3049@syntax-dispatch q4094@t '_))) q408c@t))) (q3049@syntax-dispatch q408c@t '#(each+ any () any)))) q4086@t))) (q3049@syntax-dispatch q4086@t 'each-any))) q4082@fmls))) (set! q3071@chi-lambda-clause (lambda (q4098@stx q4099@fmls q409a@body* q409b@r q409c@mr) ((lambda (q40a2@t) ((lambda (q40a4@ls/false) (if q40a4@ls/false (apply (lambda (q40a6@x*) (begin (q306f@verify-formals q4099@fmls q4098@stx) ((lambda (q40a8@lex* q40a9@lab*) (values q40a8@lex* (q3081@chi-internal (q2e30@add-subst (q2e04@make-full-rib q40a6@x* q40a9@lab*) q409a@body*) (q2fdd@add-lexicals q40a9@lab* q40a8@lex* q409b@r) q409c@mr))) (map q2dcc@gen-lexical q40a6@x*) (map q2dd0@gen-label q40a6@x*)))) q40a4@ls/false) ((lambda (q40ac@t) ((lambda (q40ae@ls/false) (if q40ae@ls/false (apply (lambda (q40b0@x* q40b1@x) (begin (q306f@verify-formals q4099@fmls q4098@stx) ((lambda (q40b4@lex* q40b5@lab* q40b6@lex q40b7@lab) (values (append q40b4@lex* q40b6@lex) (q3081@chi-internal (q2e30@add-subst (q2e04@make-full-rib (cons q40b1@x q40b0@x*) (cons q40b7@lab q40b5@lab*)) q409a@body*) (q2fdd@add-lexicals (cons q40b7@lab q40b5@lab*) (cons q40b6@lex q40b4@lex*) q409b@r) q409c@mr))) (map q2dcc@gen-lexical q40b0@x*) (map q2dd0@gen-label q40b0@x*) (q2dcc@gen-lexical q40b1@x) (q2dd0@gen-label q40b1@x)))) q40ae@ls/false) ((lambda (q40bc@t) ((lambda (q40be@ls/false) (if q40be@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid syntax" q4099@fmls)) q40be@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q40bc@t))) (q3049@syntax-dispatch q40bc@t '_))) q40ac@t))) (q3049@syntax-dispatch q40ac@t '#(each+ any () any)))) q40a2@t))) (q3049@syntax-dispatch q40a2@t 'each-any))) q4099@fmls))) (set! q3073@chi-lambda-clause* (lambda (q40c0@stx q40c1@fmls* q40c2@body** q40c3@r q40c4@mr) (if (null? q40c1@fmls*) (values '() '()) (call-with-values (lambda () (q3071@chi-lambda-clause q40c0@stx (car q40c1@fmls*) (car q40c2@body**) q40c3@r q40c4@mr)) (lambda (q40ce@q40cb q40cf@q40cd) ((lambda (q40d2@b q40d3@a) (call-with-values (lambda () (q3073@chi-lambda-clause* q40c0@stx (cdr q40c1@fmls*) (cdr q40c2@body**) q40c3@r q40c4@mr)) (lambda (q40da@q40d7 q40db@q40d9) ((lambda (q40de@b* q40df@a*) (values (cons q40d3@a q40df@a*) (cons q40d2@b q40de@b*))) q40db@q40d9 q40da@q40d7)))) q40cf@q40cd q40ce@q40cb)))))) (set! q3075@chi-defun (lambda (q40e2@x q40e3@r q40e4@mr) ((lambda (q40e8@fmls q40e9@body*) (call-with-values (lambda () (q3071@chi-lambda-clause q40e8@fmls q40e8@fmls q40e9@body* q40e3@r q40e4@mr)) (lambda (q40f0@q40ed q40f1@q40ef) ((lambda (q40f4@body q40f5@fmls) (q2da8@q2ce8@build-lambda '#f q40f5@fmls q40f4@body)) q40f1@q40ef q40f0@q40ed)))) (car q40e2@x) (cdr q40e2@x)))) (set! q3077@chi-rhs (lambda (q40f8@rhs q40f9@r q40fa@mr) ((lambda (q40fe@t) (if (memv q40fe@t '(defun)) (q3075@chi-defun (cdr q40f8@rhs) q40f9@r q40fa@mr) (if (memv q40fe@t '(expr)) ((lambda (q4100@expr) (q306b@chi-expr q4100@expr q40f9@r q40fa@mr)) (cdr q40f8@rhs)) (if (memv q40fe@t '(top-expr)) ((lambda (q4102@expr) (q2dab@q2d1a@build-sequence '#f (list (q306b@chi-expr q4102@expr q40f9@r q40fa@mr) (q2dac@q2d1c@build-void)))) (cdr q40f8@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" q40f8@rhs))))) (car q40f8@rhs)))) (set! q3079@expand-interaction-rhs*/init* (lambda (q4104@lhs* q4105@rhs* q4106@init* q4107@r q4108@mr) ((letrec ((q410e@f (lambda (q4110@lhs* q4111@rhs*) (if (null? q4110@lhs*) (map (lambda (q4114@x) (q306b@chi-expr q4114@x q4107@r q4108@mr)) q4106@init*) ((lambda (q4116@lhs q4117@rhs) ((lambda (q411a@t) (if (memv q411a@t '(defun)) ((lambda (q411c@rhs) (cons (list 'set! q4116@lhs q411c@rhs) (q410e@f (cdr q4110@lhs*) (cdr q4111@rhs*)))) (q3075@chi-defun (cdr q4117@rhs) q4107@r q4108@mr)) (if (memv q411a@t '(expr)) ((lambda (q411e@rhs) (cons (list 'set! q4116@lhs q411e@rhs) (q410e@f (cdr q4110@lhs*) (cdr q4111@rhs*)))) (q306b@chi-expr (cdr q4117@rhs) q4107@r q4108@mr)) (if (memv q411a@t '(top-expr)) ((lambda (q4120@e) (cons q4120@e (q410e@f (cdr q4110@lhs*) (cdr q4111@rhs*)))) (q306b@chi-expr (cdr q4117@rhs) q4107@r q4108@mr)) (error 'expand-interaction '"invallid" q4117@rhs))))) (car q4117@rhs))) (car q4110@lhs*) (car q4111@rhs*)))))) q410e@f) q4104@lhs* q4105@rhs*))) (set! q307b@chi-rhs* (lambda (q4122@rhs* q4123@r q4124@mr) ((letrec ((q4128@f (lambda (q412a@ls) (if (null? q412a@ls) '() ((lambda (q412c@a) (cons q412c@a (q4128@f (cdr q412a@ls)))) (q3077@chi-rhs (car q412a@ls) q4123@r q4124@mr)))))) q4128@f) q4122@rhs*))) (set! q307d@find-bound=? (lambda (q412e@x q412f@lhs* q4130@rhs*) (if (null? q412f@lhs*) '#f (if (q2e48@bound-id=? q412e@x (car q412f@lhs*)) (car q4130@rhs*) (q307d@find-bound=? q412e@x (cdr q412f@lhs*) (cdr q4130@rhs*)))))) (set! q307f@find-dups (lambda (q4134@ls) ((letrec ((q4136@f (lambda (q4138@ls q4139@dups) (if (null? q4138@ls) q4139@dups ((lambda (q413c@t) (if q413c@t ((lambda (q413e@x) (q4136@f (cdr q4138@ls) (cons (list (car q4138@ls) q413e@x) q4139@dups))) q413c@t) (q4136@f (cdr q4138@ls) q4139@dups))) (q307d@find-bound=? (car q4138@ls) (cdr q4138@ls) (cdr q4138@ls))))))) q4136@f) q4134@ls '()))) (set! q3081@chi-internal (lambda (q4140@e* q4141@r q4142@mr) ((lambda (q4146@rib) (call-with-values (lambda () (q30a1@chi-body* (map (lambda (q4158@x) (q2e30@add-subst q4146@rib q4158@x)) (q2e42@syntax->list q4140@e*)) q4141@r q4142@mr '() '() '() '() '() q4146@rib '#f)) (lambda (q415a@q4149 q415b@q414b q415c@q414d q415d@q414f q415e@q4151 q415f@q4153 q4160@q4155 q4161@q4157) ((lambda (q416a@_exp* q416b@kwd* q416c@mod** q416d@rhs* q416e@lex* q416f@mr q4170@r q4171@e*) (begin (if (null? q4171@e*) (q3129@syntax-violation '#f '"no expression in body" q4171@e*) (void)) ((lambda (q417a@init*) ((lambda (q417c@rhs*) ((lambda () (q2dae@q2d20@build-letrec* '#f (reverse q416e@lex*) (reverse q417c@rhs*) (q2dab@q2d1a@build-sequence '#f q417a@init*))))) (q307b@chi-rhs* q416d@rhs* q4170@r q416f@mr))) (q3067@chi-expr* (append (apply append (reverse q416c@mod**)) q4171@e*) q4170@r q416f@mr)))) q4161@q4157 q4160@q4155 q415f@q4153 q415e@q4151 q415d@q414f q415c@q414d q415b@q414b q415a@q4149)))) (q2df8@make-empty-rib)))) (set! q3083@parse-module (lambda (q417e@e) ((lambda (q4180@t) ((lambda (q4182@ls/false) (if q4182@ls/false (apply (lambda (q4184@export* q4185@b*) (begin (if (not (for-all q2e44@id? q4184@export*)) (q3129@syntax-violation '#f '"module exports must be identifiers" q417e@e) (void)) (values '#f (list->vector q4184@export*) q4185@b*))) q4182@ls/false) ((lambda (q4188@t) ((lambda (q418a@ls/false) (if q418a@ls/false (apply (lambda (q418c@name q418d@export* q418e@b*) (begin (if (not (q2e44@id? q418c@name)) (q3129@syntax-violation '#f '"module name must be an identifier" q417e@e) (void)) (if (not (for-all q2e44@id? q418d@export*)) (q3129@syntax-violation '#f '"module exports must be identifiers" q417e@e) (void)) (values q418c@name (list->vector q418d@export*) q418e@b*))) q418a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4188@t))) (q3049@syntax-dispatch q4188@t '(_ any each-any . each-any)))) q4180@t))) (q3049@syntax-dispatch q4180@t '(_ each-any . each-any)))) q417e@e))) (set! q308d@module-interface? (lambda (q4192@x) (and (simple-struct? q4192@x) (eq? (simple-struct-name q4192@x) 'module-interface)))) (set! q308f@module-interface-first-mark (lambda (q4194@x) (simple-struct-ref q4194@x '0))) (set! q3091@set-module-interface-first-mark! (lambda (q4196@x q4197@val) (simple-struct-set! q4196@x '0 q4197@val))) (set! q3093@module-interface-exp-id-vec (lambda (q419a@x) (simple-struct-ref q419a@x '1))) (set! q3095@set-module-interface-exp-id-vec! (lambda (q419c@x q419d@val) (simple-struct-set! q419c@x '1 q419d@val))) (set! q3097@module-interface-exp-lab-vec (lambda (q41a0@x) (simple-struct-ref q41a0@x '2))) (set! q3099@set-module-interface-exp-lab-vec! (lambda (q41a2@x q41a3@val) (simple-struct-set! q41a2@x '2 q41a3@val))) (set! q309b@dummy '3) (set! q309d@module-interface-exp-id* (lambda (q41a6@iface q41a7@id) ((lambda (q41ab@diff-marks) (begin (set! q41ab@diff-marks (lambda (q41b2@ls q41b3@x) (begin (if (null? q41b2@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (q41b6@a) (if (eq? q41b6@a q41b3@x) '() (cons q41b6@a (q41ab@diff-marks (cdr q41b2@ls) q41b3@x)))) (car q41b2@ls))))) ((lambda (q41ac@diff q41ad@id-vec) (if (null? q41ac@diff) q41ad@id-vec (vector-map (lambda (q41b0@x) (make-simple-struct 'stx '5 (list (q2e12@stx-expr q41b0@x) (append q41ac@diff (q2e16@stx-mark* q41b0@x)) '() '()))) q41ad@id-vec))) (q41ab@diff-marks (q2e16@stx-mark* q41a7@id) (q308f@module-interface-first-mark q41a6@iface)) (q3093@module-interface-exp-id-vec q41a6@iface)))) '#f))) (set! q309f@chi-internal-module (lambda (q41b8@e q41b9@r q41ba@mr q41bb@lex* q41bc@rhs* q41bd@mod** q41be@kwd*) (call-with-values (lambda () (q3083@parse-module q41b8@e)) (lambda (q41cc@q41c7 q41cd@q41c9 q41ce@q41cb) ((lambda (q41d2@e* q41d3@exp-id* q41d4@name) ((lambda (q41d8@rib) ((lambda (q41da@e*) ((lambda () (call-with-values (lambda () (q30a1@chi-body* q41da@e* q41b9@r q41ba@mr q41bb@lex* q41bc@rhs* q41bd@mod** q41be@kwd* '() q41d8@rib '#f)) (lambda (q41ec@q41dd q41ed@q41df q41ee@q41e1 q41ef@q41e3 q41f0@q41e5 q41f1@q41e7 q41f2@q41e9 q41f3@q41eb) ((lambda (q41fc@_exp* q41fd@kwd* q41fe@mod** q41ff@rhs* q4200@lex* q4201@mr q4202@r q4203@e*) ((lambda (q420c@exp-lab* q420d@mod**) (if (not q41d4@name) (values q4200@lex* q41ff@rhs* q41d3@exp-id* q420c@exp-lab* q4202@r q4201@mr q420d@mod** q41fd@kwd*) ((lambda (q4210@lab q4211@iface) (values q4200@lex* q41ff@rhs* (vector q41d4@name) (vector q4210@lab) (cons (cons q4210@lab (cons '$module q4211@iface)) q4202@r) (cons (cons q4210@lab (cons '$module q4211@iface)) q4201@mr) q420d@mod** q41fd@kwd*)) (q2dd0@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (q2e16@stx-mark* q41d4@name)) (vector-map (lambda (q4214@x) (make-simple-struct 'stx '5 (list (q2e12@stx-expr q4214@x) (q2e16@stx-mark* q4214@x) '() '()))) q41d3@exp-id*) q420c@exp-lab*))))) (vector-map (lambda (q4216@x) (or (q2e5a@id->label (make-simple-struct 'stx '5 (list (q2e46@id->sym q4216@x) (q2e16@stx-mark* q4216@x) (list q41d8@rib) '()))) (q3129@syntax-violation '#f '"cannot find module export" q4216@x))) q41d3@exp-id*) (cons q4203@e* q41fe@mod**))) q41f3@q41eb q41f2@q41e9 q41f1@q41e7 q41f0@q41e5 q41ef@q41e3 q41ee@q41e1 q41ed@q41df q41ec@q41dd)))))) (map (lambda (q4218@x) (q2e30@add-subst q41d8@rib q4218@x)) (q2e42@syntax->list q41d2@e*)))) (q2df8@make-empty-rib))) q41ce@q41cb q41cd@q41c9 q41cc@q41c7))))) (set! q30a1@chi-body* (lambda (q421a@e* q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4220@kwd* q4221@exp* q4222@rib q4223@top?) (if (null? q421a@e*) (values q421a@e* q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4220@kwd* q4221@exp*) ((lambda (q422e@e) (call-with-values (lambda () (q2e66@syntax-type q422e@e q421b@r)) (lambda (q4236@q4231 q4237@q4233 q4238@q4235) ((lambda (q423c@kwd q423d@value q423e@type) ((lambda (q4242@kwd*) ((lambda (q4244@t) (if (memv q4244@t '(define)) (call-with-values (lambda () (q2fcd@parse-define q422e@e)) (lambda (q424a@q4247 q424b@q4249) ((lambda (q424e@rhs q424f@id) (begin (if (q2e50@bound-id-member? q424f@id q4242@kwd*) (q3129@syntax-violation '#f '"cannot redefine keyword" q422e@e) (void)) (call-with-values (lambda () (q2dd4@gen-define-label+loc q424f@id q4222@rib)) (lambda (q4256@q4253 q4257@q4255) ((lambda (q425a@lex q425b@lab) (begin (q2dfa@extend-rib! q4222@rib q424f@id q425b@lab) (q30a1@chi-body* (cdr q421a@e*) (q2fdb@add-lexical q425b@lab q425a@lex q421b@r) q421c@mr (cons q425a@lex q421d@lex*) (cons q424e@rhs q421e@rhs*) q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?))) q4257@q4255 q4256@q4253))))) q424b@q4249 q424a@q4247))) (if (memv q4244@t '(define-syntax)) (call-with-values (lambda () (q2fcf@parse-define-syntax q422e@e)) (lambda (q4262@q425f q4263@q4261) ((lambda (q4266@rhs q4267@id) (begin (if (q2e50@bound-id-member? q4267@id q4242@kwd*) (q3129@syntax-violation '#f '"cannot redefine keyword" q422e@e) (void)) ((lambda (q426a@lab q426b@expanded-rhs) (begin (q2dfa@extend-rib! q4222@rib q4267@id q426a@lab) ((lambda (q426e@b) (q30a1@chi-body* (cdr q421a@e*) (cons (cons q426a@lab q426e@b) q421b@r) (cons (cons q426a@lab q426e@b) q421c@mr) q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?)) (q2e7c@make-eval-transformer q426b@expanded-rhs)))) (q2dd6@gen-define-label q4267@id q4222@rib) (q30a3@expand-transformer q4266@rhs q421c@mr)))) q4263@q4261 q4262@q425f))) (if (memv q4244@t '(let-syntax letrec-syntax)) ((lambda (q4270@t) ((lambda (q4272@ls/false) (if (and q4272@ls/false (apply (lambda (q4274@xlhs* q4275@xrhs* q4276@xbody*) (if (not (q2e4c@valid-bound-ids? q4274@xlhs*)) (q3129@syntax-violation '#f '"invalid identifiers" q422e@e) (void))) q4272@ls/false)) (apply (lambda (q427a@xlhs* q427b@xrhs* q427c@xbody*) ((lambda (q4280@xlab*) ((lambda (q4282@xrib) ((lambda (q4284@xb*) ((lambda () (q30a1@chi-body* (append (map (lambda (q4286@x) (q2e30@add-subst q4282@xrib q4286@x)) q427c@xbody*) (cdr q421a@e*)) (append (map cons q4280@xlab* q4284@xb*) q421b@r) (append (map cons q4280@xlab* q4284@xb*) q421c@mr) q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?)))) (map (lambda (q4288@x) (q2e7c@make-eval-transformer (q30a3@expand-transformer (if (eq? q423e@type 'let-syntax) q4288@x (q2e30@add-subst q4282@xrib q4288@x)) q421c@mr))) q427b@xrhs*))) (q2e04@make-full-rib q427a@xlhs* q4280@xlab*))) (map q2dd0@gen-label q427a@xlhs*))) q4272@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4270@t))) (q3049@syntax-dispatch q4270@t '(_ #(each (any any)) . each-any)))) q422e@e) (if (memv q4244@t '(begin)) ((lambda (q428a@t) ((lambda (q428c@ls/false) (if q428c@ls/false (apply (lambda (q428e@x*) (q30a1@chi-body* (append q428e@x* (cdr q421a@e*)) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?)) q428c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q428a@t))) (q3049@syntax-dispatch q428a@t '(_ . each-any)))) q422e@e) (if (memv q4244@t '(global-macro global-macro!)) (q30a1@chi-body* (cons (q2e30@add-subst q4222@rib (q3065@chi-global-macro q423d@value q422e@e)) (cdr q421a@e*)) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?) (if (memv q4244@t '(local-macro local-macro!)) (q30a1@chi-body* (cons (q2e30@add-subst q4222@rib (q3063@chi-local-macro q423d@value q422e@e)) (cdr q421a@e*)) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?) (if (memv q4244@t '(macro macro!)) (q30a1@chi-body* (cons (q2e30@add-subst q4222@rib (q3061@chi-macro q423d@value q422e@e)) (cdr q421a@e*)) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?) (if (memv q4244@t '(module)) (call-with-values (lambda () (q309f@chi-internal-module q422e@e q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd*)) (lambda (q42a0@q4291 q42a1@q4293 q42a2@q4295 q42a3@q4297 q42a4@q4299 q42a5@q429b q42a6@q429d q42a7@q429f) ((lambda (q42b0@kwd* q42b1@mod** q42b2@mr q42b3@r q42b4@m-exp-lab* q42b5@m-exp-id* q42b6@rhs* q42b7@lex*) (begin (vector-for-each (lambda (q42c0@id q42c1@lab) (q2dfa@extend-rib! q4222@rib q42c0@id q42c1@lab)) q42b5@m-exp-id* q42b4@m-exp-lab*) (q30a1@chi-body* (cdr q421a@e*) q42b3@r q42b2@mr q42b7@lex* q42b6@rhs* q42b1@mod** q42b0@kwd* q4221@exp* q4222@rib q4223@top?))) q42a7@q429f q42a6@q429d q42a5@q429b q42a4@q4299 q42a3@q4297 q42a2@q4295 q42a1@q4293 q42a0@q4291))) (if (memv q4244@t '(library)) (begin (q310b@library-expander (q2e58@stx->datum q422e@e)) (q30a1@chi-body* (cdr q421a@e*) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?)) (if (memv q4244@t '(export)) ((lambda (q42c4@t) ((lambda (q42c6@ls/false) (if q42c6@ls/false (apply (lambda (q42c8@exp-decl*) (q30a1@chi-body* (cdr q421a@e*) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* (append q42c8@exp-decl* q4221@exp*) q4222@rib q4223@top?)) q42c6@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q42c4@t))) (q3049@syntax-dispatch q42c4@t '(_ . each-any)))) q422e@e) (if (memv q4244@t '(import)) ((lambda () ((lambda (q42cb@module-import? q42cd@module-import q42cf@library-import) (begin (set! q42cb@module-import? (lambda (q431e@e) ((lambda (q4320@t) ((lambda (q4322@ls/false) (if (and q4322@ls/false (apply (lambda (q4324@id) (q2e44@id? q4324@id)) q4322@ls/false)) (apply (lambda (q4326@id) '#t) q4322@ls/false) ((lambda (q4328@t) ((lambda (q432a@ls/false) (if q432a@ls/false (apply (lambda (q432c@imp*) '#f) q432a@ls/false) ((lambda (q432e@t) ((lambda (q4330@ls/false) (if q4330@ls/false (apply (lambda () (q3129@syntax-violation '#f '"malformed import form" q431e@e)) q4330@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q432e@t))) (q3049@syntax-dispatch q432e@t '_))) q4328@t))) (q3049@syntax-dispatch q4328@t '(_ . each-any)))) q4320@t))) (q3049@syntax-dispatch q4320@t '(_ any)))) q431e@e))) (set! q42cd@module-import (lambda (q42fc@e q42fd@r) ((lambda (q4300@t) ((lambda (q4302@ls/false) (if (and q4302@ls/false (apply (lambda (q4304@id) (q2e44@id? q4304@id)) q4302@ls/false)) (apply (lambda (q4306@id) (call-with-values (lambda () (q2e66@syntax-type q4306@id q42fd@r)) (lambda (q430e@q4309 q430f@q430b q4310@q430d) ((lambda (q4314@kwd q4315@value q4316@type) ((lambda (q431a@t) (if (memv q431a@t '($module)) ((lambda (q431c@iface) (values (q309d@module-interface-exp-id* q431c@iface q4306@id) (q3097@module-interface-exp-lab-vec q431c@iface))) q4315@value) (q3129@syntax-violation '#f '"invalid import" q42fc@e))) q4316@type)) q4310@q430d q430f@q430b q430e@q4309)))) q4302@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4300@t))) (q3049@syntax-dispatch q4300@t '(_ any)))) q42fc@e))) (set! q42cf@library-import (lambda (q42e0@e) ((lambda (q42e2@t) ((lambda (q42e4@ls/false) (if q42e4@ls/false (apply (lambda (q42e6@ctxt q42e7@imp*) (call-with-values (lambda () (q30ab@parse-import-spec* (q312f@syntax->datum q42e7@imp*))) (lambda (q42ee@q42eb q42ef@q42ed) ((lambda (q42f2@subst-labels q42f3@subst-names) (values (vector-map (lambda (q42f6@name) (q2e24@datum->stx q42e6@ctxt q42f6@name)) q42f3@subst-names) q42f2@subst-labels)) q42ef@q42ed q42ee@q42eb)))) q42e4@ls/false) ((lambda (q42f8@t) ((lambda (q42fa@ls/false) (if q42fa@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid import form" q42e0@e)) q42fa@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q42f8@t))) (q3049@syntax-dispatch q42f8@t '_))) q42e2@t))) (q3049@syntax-dispatch q42e2@t '(any . each-any)))) q42e0@e))) (begin (call-with-values (lambda () (if (q42cb@module-import? q422e@e) (q42cd@module-import q422e@e q421b@r) (q42cf@library-import q422e@e))) (lambda (q42d4@q42d1 q42d5@q42d3) ((lambda (q42d8@lab* q42d9@id*) (vector-for-each (lambda (q42dc@id q42dd@lab) (q2dfa@extend-rib! q4222@rib q42dc@id q42dd@lab)) q42d9@id* q42d8@lab*)) q42d5@q42d3 q42d4@q42d1))) (q30a1@chi-body* (cdr q421a@e*) q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?)))) '#f '#f '#f))) (if q4223@top? (q30a1@chi-body* (cdr q421a@e*) q421b@r q421c@mr (cons (q2dcc@gen-lexical 'dummy) q421d@lex*) (cons (cons 'top-expr q422e@e) q421e@rhs*) q421f@mod** q4242@kwd* q4221@exp* q4222@rib q4223@top?) (values q421a@e* q421b@r q421c@mr q421d@lex* q421e@rhs* q421f@mod** q4242@kwd* q4221@exp*)))))))))))))) q423e@type)) (if (q2e44@id? q423c@kwd) (cons q423c@kwd q4220@kwd*) q4220@kwd*))) q4238@q4235 q4237@q4233 q4236@q4231)))) (car q421a@e*))))) (set! q30a3@expand-transformer (lambda (q4332@expr q4333@r) ((lambda (q4336@rtc) ((lambda (q4338@expanded-rhs) (begin (for-each ((lambda (q433a@mark-visit) (lambda (q433c@x) (begin (q2c6f@q2abd@invoke-library q433c@x) (q433a@mark-visit q433c@x)))) (q30b3@vis-collector)) (q4336@rtc)) q4338@expanded-rhs)) ((lambda (q4346@q433f q4347@q4341 q4348@q4343 q4349@q4345) ((lambda (q434e@swap) (dynamic-wind q434e@swap (lambda () (q306b@chi-expr q4332@expr q4333@r q4333@r)) q434e@swap)) (lambda () (begin ((lambda (q4350@t) (begin (q4346@q433f q4348@q4343) (set! q4348@q4343 q4350@t))) (q4346@q433f)) ((lambda (q4352@t) (begin (q4347@q4341 q4349@q4345) (set! q4349@q4345 q4352@t))) (q4347@q4341)))))) q30b1@inv-collector q30b3@vis-collector q4336@rtc (lambda (q4354@x) (values))))) (q30af@make-collector)))) (set! q30a5@parse-exports (lambda (q4356@exp*) ((letrec ((q4358@f (lambda (q435a@exp* q435b@int* q435c@ext*) (if (null? q435a@exp*) (begin (if (not (q2e4c@valid-bound-ids? q435c@ext*)) (q3129@syntax-violation 'export '"invalid exports" (q307f@find-dups q435c@ext*)) (void)) (values (map q312f@syntax->datum q435c@ext*) q435b@int*)) ((lambda (q4360@t) ((lambda (q4362@ls/false) (if q4362@ls/false (apply (lambda (q4364@rename q4365@i* q4366@e*) (begin (if (not (and (eq? (q312f@syntax->datum q4364@rename) 'rename) (for-all q2e44@id? q4365@i*) (for-all q2e44@id? q4366@e*))) (q3129@syntax-violation 'export '"invalid export specifier" (car q435a@exp*)) (void)) (q4358@f (cdr q435a@exp*) (append q4365@i* q435b@int*) (append q4366@e* q435c@ext*)))) q4362@ls/false) ((lambda (q436a@t) ((lambda (q436c@ls/false) (if q436c@ls/false (apply (lambda (q436e@ie) (begin (if (not (q2e44@id? q436e@ie)) (q3129@syntax-violation 'export '"invalid export" q436e@ie) (void)) (q4358@f (cdr q435a@exp*) (cons q436e@ie q435b@int*) (cons q436e@ie q435c@ext*)))) q436c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q436a@t))) (q3049@syntax-dispatch q436a@t 'any))) q4360@t))) (q3049@syntax-dispatch q4360@t '(any . #(each (any any)))))) (car q435a@exp*)))))) q4358@f) q4356@exp* '() '()))) (set! q30a7@parse-library-name (lambda (q4370@spec) ((lambda (q4373@parse) (begin (set! q4373@parse (lambda (q4380@x) ((lambda (q4382@t) ((lambda (q4384@ls/false) (if (and q4384@ls/false (apply (lambda (q4386@v*) (for-all (lambda (q4388@x) ((lambda (q438a@x) (and (integer? q438a@x) (exact? q438a@x))) (q312f@syntax->datum q4388@x))) q4386@v*)) q4384@ls/false)) (apply (lambda (q438c@v*) (values '() (map q312f@syntax->datum q438c@v*))) q4384@ls/false) ((lambda (q438e@t) ((lambda (q4390@ls/false) (if (and q4390@ls/false (apply (lambda (q4392@x q4393@rest) (symbol? (q312f@syntax->datum q4392@x))) q4390@ls/false)) (apply (lambda (q4396@x q4397@rest) (call-with-values (lambda () (q4373@parse q4397@rest)) (lambda (q439e@q439b q439f@q439d) ((lambda (q43a2@v* q43a3@x*) (values (cons (q312f@syntax->datum q4396@x) q43a3@x*) q43a2@v*)) q439f@q439d q439e@q439b)))) q4390@ls/false) ((lambda (q43a6@t) ((lambda (q43a8@ls/false) (if q43a8@ls/false (apply (lambda () (values '() '())) q43a8@ls/false) ((lambda (q43aa@t) ((lambda (q43ac@ls/false) (if q43ac@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid library name" q4370@spec)) q43ac@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q43aa@t))) (q3049@syntax-dispatch q43aa@t '_))) q43a6@t))) (q3049@syntax-dispatch q43a6@t '()))) q438e@t))) (q3049@syntax-dispatch q438e@t '(any . any)))) q4382@t))) (q3049@syntax-dispatch q4382@t '(each-any)))) q4380@x))) (call-with-values (lambda () (q4373@parse q4370@spec)) (lambda (q4378@q4375 q4379@q4377) ((lambda (q437c@ver* q437d@name*) (begin (if (null? q437d@name*) (q3129@syntax-violation '#f '"empty library name" q4370@spec) (void)) (values q437d@name* q437c@ver*))) q4379@q4377 q4378@q4375))))) '#f))) (set! q30a9@parse-library (lambda (q43ae@e) ((lambda (q43b0@t) ((lambda (q43b2@ls/false) (if (and q43b2@ls/false (apply (lambda (q43b4@library q43b5@name* q43b6@export q43b7@exp* q43b8@import q43b9@imp* q43ba@b*) (and (eq? (q312f@syntax->datum q43b6@export) 'export) (eq? (q312f@syntax->datum q43b8@import) 'import) (eq? (q312f@syntax->datum q43b4@library) 'library))) q43b2@ls/false)) (apply (lambda (q43c2@library q43c3@name* q43c4@export q43c5@exp* q43c6@import q43c7@imp* q43c8@b*) (values q43c3@name* q43c5@exp* q43c7@imp* q43c8@b*)) q43b2@ls/false) ((lambda (q43d0@t) ((lambda (q43d2@ls/false) (if q43d2@ls/false (apply (lambda () (q3129@syntax-violation '#f '"malformed library" q43ae@e)) q43d2@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q43d0@t))) (q3049@syntax-dispatch q43d0@t '_))) q43b0@t))) (q3049@syntax-dispatch q43b0@t '(any each-any (any . each-any) (any . each-any) . each-any)))) q43ae@e))) (set! q30ab@parse-import-spec* ((lambda () ((lambda (q43d5@idsyn? q43d7@dup-error q43d9@merge-substs q43db@exclude* q43dd@find* q43df@rem* q43e1@remove-dups q43e3@parse-library-name q43e5@import-library q43e7@get-import q43e9@add-imports!) (begin (set! q43d5@idsyn? (lambda (q45de@x) (symbol? (q312f@syntax->datum q45de@x)))) (set! q43d7@dup-error (lambda (q45dc@name) (q3129@syntax-violation 'import '"two imports with different bindings" q45dc@name))) (set! q43d9@merge-substs (lambda (q45ca@s q45cb@subst) ((lambda (q45cf@insert-to-subst) (begin (set! q45cf@insert-to-subst (lambda (q45d0@a q45d1@subst) ((lambda (q45d4@name q45d5@label) ((lambda (q45d8@t) (if q45d8@t ((lambda (q45da@x) (if (eq? (cdr q45da@x) q45d5@label) q45d1@subst (q43d7@dup-error q45d4@name))) q45d8@t) (cons q45d0@a q45d1@subst))) (assq q45d4@name q45d1@subst))) (car q45d0@a) (cdr q45d0@a)))) (if (null? q45ca@s) q45cb@subst (q45cf@insert-to-subst (car q45ca@s) (q43d9@merge-substs (cdr q45ca@s) q45cb@subst))))) '#f))) (set! q43db@exclude* (lambda (q459a@sym* q459b@subst) ((lambda (q459f@exclude) (begin (set! q459f@exclude (lambda (q45b8@sym q45b9@subst) (if (null? q45b9@subst) (q3129@syntax-violation 'import '"cannot rename unbound identifier" q45b8@sym) (if (eq? q45b8@sym (caar q45b9@subst)) (values (cdar q45b9@subst) (cdr q45b9@subst)) ((lambda (q45bc@a) (call-with-values (lambda () (q459f@exclude q45b8@sym (cdr q45b9@subst))) (lambda (q45c2@q45bf q45c3@q45c1) ((lambda (q45c6@subst q45c7@old) (values q45c7@old (cons q45bc@a q45c6@subst))) q45c3@q45c1 q45c2@q45bf)))) (car q45b9@subst)))))) (if (null? q459a@sym*) (values '() q459b@subst) (call-with-values (lambda () (q459f@exclude (car q459a@sym*) q459b@subst)) (lambda (q45a4@q45a1 q45a5@q45a3) ((lambda (q45a8@subst q45a9@old) (call-with-values (lambda () (q43db@exclude* (cdr q459a@sym*) q45a8@subst)) (lambda (q45b0@q45ad q45b1@q45af) ((lambda (q45b4@subst q45b5@old*) (values (cons q45a9@old q45b5@old*) q45b4@subst)) q45b1@q45af q45b0@q45ad)))) q45a5@q45a3 q45a4@q45a1)))))) '#f))) (set! q43dd@find* (lambda (q4592@sym* q4593@subst) (map (lambda (q4596@x) ((lambda (q4598@t) (if q4598@t (cdr q4598@t) (q3129@syntax-violation 'import '"cannot find identifier" q4596@x))) (assq q4596@x q4593@subst))) q4592@sym*))) (set! q43df@rem* (lambda (q458a@sym* q458b@subst) ((letrec ((q458e@f (lambda (q4590@subst) (if (null? q4590@subst) '() (if (memq (caar q4590@subst) q458a@sym*) (q458e@f (cdr q4590@subst)) (cons (car q4590@subst) (q458e@f (cdr q4590@subst)))))))) q458e@f) q458b@subst))) (set! q43e1@remove-dups (lambda (q4588@ls) (if (null? q4588@ls) '() (if (memq (car q4588@ls) (cdr q4588@ls)) (q43e1@remove-dups (cdr q4588@ls)) (cons (car q4588@ls) (q43e1@remove-dups (cdr q4588@ls))))))) (set! q43e3@parse-library-name (lambda (q44a0@spec) ((lambda (q44a3@subversion? q44a5@subversion-pred q44a7@version-pred) (begin (set! q44a3@subversion? (lambda (q4584@x) ((lambda (q4586@x) (and (integer? q4586@x) (exact? q4586@x) (>= q4586@x '0))) (q312f@syntax->datum q4584@x)))) (set! q44a5@subversion-pred (lambda (q4524@x*) ((lambda (q4526@t) ((lambda (q4528@ls/false) (if (and q4528@ls/false (apply (lambda (q452a@n) (q44a3@subversion? q452a@n)) q4528@ls/false)) (apply (lambda (q452c@n) (lambda (q452e@x) (= q452e@x (q312f@syntax->datum q452c@n)))) q4528@ls/false) ((lambda (q4530@t) ((lambda (q4532@ls/false) (if (and q4532@ls/false (apply (lambda (q4534@p? q4535@sub*) (eq? (q312f@syntax->datum q4534@p?) 'and)) q4532@ls/false)) (apply (lambda (q4538@p? q4539@sub*) ((lambda (q453c@p*) (lambda (q453e@x) (for-all (lambda (q4540@p) (q4540@p q453e@x)) q453c@p*))) (map q44a5@subversion-pred q4539@sub*))) q4532@ls/false) ((lambda (q4542@t) ((lambda (q4544@ls/false) (if (and q4544@ls/false (apply (lambda (q4546@p? q4547@sub*) (eq? (q312f@syntax->datum q4546@p?) 'or)) q4544@ls/false)) (apply (lambda (q454a@p? q454b@sub*) ((lambda (q454e@p*) (lambda (q4550@x) (exists (lambda (q4552@p) (q4552@p q4550@x)) q454e@p*))) (map q44a5@subversion-pred q454b@sub*))) q4544@ls/false) ((lambda (q4554@t) ((lambda (q4556@ls/false) (if (and q4556@ls/false (apply (lambda (q4558@p? q4559@sub) (eq? (q312f@syntax->datum q4558@p?) 'not)) q4556@ls/false)) (apply (lambda (q455c@p? q455d@sub) ((lambda (q4560@p) (lambda (q4562@x) (not (q4560@p q4562@x)))) (q44a5@subversion-pred q455d@sub))) q4556@ls/false) ((lambda (q4564@t) ((lambda (q4566@ls/false) (if (and q4566@ls/false (apply (lambda (q4568@p? q4569@n) (and (eq? (q312f@syntax->datum q4568@p?) '<=) (q44a3@subversion? q4569@n))) q4566@ls/false)) (apply (lambda (q456c@p? q456d@n) (lambda (q4570@x) (<= q4570@x (q312f@syntax->datum q456d@n)))) q4566@ls/false) ((lambda (q4572@t) ((lambda (q4574@ls/false) (if (and q4574@ls/false (apply (lambda (q4576@p? q4577@n) (and (eq? (q312f@syntax->datum q4576@p?) '>=) (q44a3@subversion? q4577@n))) q4574@ls/false)) (apply (lambda (q457a@p? q457b@n) (lambda (q457e@x) (>= q457e@x (q312f@syntax->datum q457b@n)))) q4574@ls/false) ((lambda (q4580@t) ((lambda (q4582@ls/false) (if q4582@ls/false (apply (lambda () (q3129@syntax-violation 'import '"invalid sub-version spec" q44a0@spec q4524@x*)) q4582@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4580@t))) (q3049@syntax-dispatch q4580@t '_))) q4572@t))) (q3049@syntax-dispatch q4572@t '(any any)))) q4564@t))) (q3049@syntax-dispatch q4564@t '(any any)))) q4554@t))) (q3049@syntax-dispatch q4554@t '(any any)))) q4542@t))) (q3049@syntax-dispatch q4542@t '(any . each-any)))) q4530@t))) (q3049@syntax-dispatch q4530@t '(any . each-any)))) q4526@t))) (q3049@syntax-dispatch q4526@t 'any))) q4524@x*))) (set! q44a7@version-pred (lambda (q44d4@x*) ((lambda (q44d6@t) ((lambda (q44d8@ls/false) (if q44d8@ls/false (apply (lambda () (lambda (q44da@x) '#t)) q44d8@ls/false) ((lambda (q44dc@t) ((lambda (q44de@ls/false) (if (and q44de@ls/false (apply (lambda (q44e0@c q44e1@ver*) (eq? (q312f@syntax->datum q44e0@c) 'and)) q44de@ls/false)) (apply (lambda (q44e4@c q44e5@ver*) ((lambda (q44e8@p*) (lambda (q44ea@x) (for-all (lambda (q44ec@p) (q44ec@p q44ea@x)) q44e8@p*))) (map q44a7@version-pred q44e5@ver*))) q44de@ls/false) ((lambda (q44ee@t) ((lambda (q44f0@ls/false) (if (and q44f0@ls/false (apply (lambda (q44f2@c q44f3@ver*) (eq? (q312f@syntax->datum q44f2@c) 'or)) q44f0@ls/false)) (apply (lambda (q44f6@c q44f7@ver*) ((lambda (q44fa@p*) (lambda (q44fc@x) (exists (lambda (q44fe@p) (q44fe@p q44fc@x)) q44fa@p*))) (map q44a7@version-pred q44f7@ver*))) q44f0@ls/false) ((lambda (q4500@t) ((lambda (q4502@ls/false) (if (and q4502@ls/false (apply (lambda (q4504@c q4505@ver) (eq? (q312f@syntax->datum q4504@c) 'not)) q4502@ls/false)) (apply (lambda (q4508@c q4509@ver) ((lambda (q450c@p) (lambda (q450e@x) (not (q450c@p q450e@x)))) (q44a7@version-pred q4509@ver))) q4502@ls/false) ((lambda (q4510@t) ((lambda (q4512@ls/false) (if q4512@ls/false (apply (lambda (q4514@sub*) ((lambda (q4516@p*) (lambda (q4518@x) ((letrec ((q451a@f (lambda (q451c@p* q451d@x) (if (null? q451c@p*) '#t (if (null? q451d@x) '#f (and ((car q451c@p*) (car q451d@x)) (q451a@f (cdr q451c@p*) (cdr q451d@x)))))))) q451a@f) q4516@p* q4518@x))) (map q44a5@subversion-pred q4514@sub*))) q4512@ls/false) ((lambda (q4520@t) ((lambda (q4522@ls/false) (if q4522@ls/false (apply (lambda () (q3129@syntax-violation 'import '"invalid version spec" q44a0@spec q44d4@x*)) q4522@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4520@t))) (q3049@syntax-dispatch q4520@t '_))) q4510@t))) (q3049@syntax-dispatch q4510@t 'each-any))) q4500@t))) (q3049@syntax-dispatch q4500@t '(any any)))) q44ee@t))) (q3049@syntax-dispatch q44ee@t '(any . each-any)))) q44dc@t))) (q3049@syntax-dispatch q44dc@t '(any . each-any)))) q44d6@t))) (q3049@syntax-dispatch q44d6@t '()))) q44d4@x*))) ((letrec ((q44a8@f (lambda (q44aa@x) ((lambda (q44ac@t) ((lambda (q44ae@ls/false) (if q44ae@ls/false (apply (lambda (q44b0@version-spec*) (values '() (q44a7@version-pred q44b0@version-spec*))) q44ae@ls/false) ((lambda (q44b2@t) ((lambda (q44b4@ls/false) (if (and q44b4@ls/false (apply (lambda (q44b6@x q44b7@x*) (q43d5@idsyn? q44b6@x)) q44b4@ls/false)) (apply (lambda (q44ba@x q44bb@x*) (call-with-values (lambda () (q44a8@f q44bb@x*)) (lambda (q44c2@q44bf q44c3@q44c1) ((lambda (q44c6@pred q44c7@name) (values (cons (q312f@syntax->datum q44ba@x) q44c7@name) q44c6@pred)) q44c3@q44c1 q44c2@q44bf)))) q44b4@ls/false) ((lambda (q44ca@t) ((lambda (q44cc@ls/false) (if q44cc@ls/false (apply (lambda () (values '() (lambda (q44ce@x) '#t))) q44cc@ls/false) ((lambda (q44d0@t) ((lambda (q44d2@ls/false) (if q44d2@ls/false (apply (lambda () (q3129@syntax-violation '#f '"invalid import spec" q44a0@spec)) q44d2@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q44d0@t))) (q3049@syntax-dispatch q44d0@t '_))) q44ca@t))) (q3049@syntax-dispatch q44ca@t '()))) q44b2@t))) (q3049@syntax-dispatch q44b2@t '(any . any)))) q44ac@t))) (q3049@syntax-dispatch q44ac@t '(each-any)))) q44aa@x)))) q44a8@f) q44a0@spec))) '#f '#f '#f))) (set! q43e5@import-library (lambda (q4490@spec*) (call-with-values (lambda () (q43e3@parse-library-name q4490@spec*)) (lambda (q4496@q4493 q4497@q4495) ((lambda (q449a@pred q449b@name) (begin (if (null? q449b@name) (q3129@syntax-violation 'import '"empty library name" q4490@spec*) (void)) ((lambda (q449e@lib) (begin (if (not q449e@lib) (q3129@syntax-violation 'import '"cannot find library with required name" q449b@name) (void)) (if (not (q449a@pred (q2c42@q2a63@library-version q449e@lib))) (q3129@syntax-violation 'import '"library does not satisfy version specification" q4490@spec* q449e@lib) (void)) ((q30b5@imp-collector) q449e@lib) (q2c4a@q2a73@library-subst q449e@lib))) (q2c68@q2aaf@find-library-by-name q449b@name)))) q4497@q4495 q4496@q4493))))) (set! q43e7@get-import (lambda (q4402@spec) ((lambda (q4404@t) ((lambda (q4406@ls/false) (if (and q4406@ls/false (apply (lambda (q4408@x q4409@x*) (not (memq (q312f@syntax->datum q4408@x) '(for rename except only prefix library)))) q4406@ls/false)) (apply (lambda (q440c@x q440d@x*) (q43e5@import-library (cons q440c@x q440d@x*))) q4406@ls/false) ((lambda (q4410@t) ((lambda (q4412@ls/false) (if (and q4412@ls/false (apply (lambda (q4414@rename q4415@isp q4416@old* q4417@new*) (and (eq? (q312f@syntax->datum q4414@rename) 'rename) (for-all q43d5@idsyn? q4416@old*) (for-all q43d5@idsyn? q4417@new*))) q4412@ls/false)) (apply (lambda (q441c@rename q441d@isp q441e@old* q441f@new*) ((lambda (q4424@subst q4425@old* q4426@new*) ((lambda (q442a@old-label*) ((lambda (q442c@subst) (q43d9@merge-substs (map cons q4426@new* q442a@old-label*) q442c@subst)) (q43df@rem* q4425@old* q4424@subst))) (q43dd@find* q4425@old* q4424@subst))) (q43e7@get-import q441d@isp) (map q312f@syntax->datum q441e@old*) (map q312f@syntax->datum q441f@new*))) q4412@ls/false) ((lambda (q442e@t) ((lambda (q4430@ls/false) (if (and q4430@ls/false (apply (lambda (q4432@except q4433@isp q4434@sym*) (and (eq? (q312f@syntax->datum q4432@except) 'except) (for-all q43d5@idsyn? q4434@sym*))) q4430@ls/false)) (apply (lambda (q4438@except q4439@isp q443a@sym*) ((lambda (q443e@subst) (q43df@rem* (map q312f@syntax->datum q443a@sym*) q443e@subst)) (q43e7@get-import q4439@isp))) q4430@ls/false) ((lambda (q4440@t) ((lambda (q4442@ls/false) (if (and q4442@ls/false (apply (lambda (q4444@only q4445@isp q4446@sym*) (and (eq? (q312f@syntax->datum q4444@only) 'only) (for-all q43d5@idsyn? q4446@sym*))) q4442@ls/false)) (apply (lambda (q444a@only q444b@isp q444c@sym*) ((lambda (q4450@subst q4451@sym*) ((lambda (q4454@sym*) ((lambda (q4456@lab*) (map cons q4454@sym* q4456@lab*)) (q43dd@find* q4454@sym* q4450@subst))) (q43e1@remove-dups q4451@sym*))) (q43e7@get-import q444b@isp) (map q312f@syntax->datum q444c@sym*))) q4442@ls/false) ((lambda (q4458@t) ((lambda (q445a@ls/false) (if (and q445a@ls/false (apply (lambda (q445c@prefix q445d@isp q445e@p) (and (eq? (q312f@syntax->datum q445c@prefix) 'prefix) (q43d5@idsyn? q445e@p))) q445a@ls/false)) (apply (lambda (q4462@prefix q4463@isp q4464@p) ((lambda (q4468@subst q4469@prefix) (map (lambda (q446c@x) (cons (string->symbol (string-append q4469@prefix (symbol->string (car q446c@x)))) (cdr q446c@x))) q4468@subst)) (q43e7@get-import q4463@isp) (symbol->string (q312f@syntax->datum q4464@p)))) q445a@ls/false) ((lambda (q446e@t) ((lambda (q4470@ls/false) (if (and q4470@ls/false (apply (lambda (q4472@library q4473@spec*) (eq? (q312f@syntax->datum q4472@library) 'library)) q4470@ls/false)) (apply (lambda (q4476@library q4477@spec*) (q43e5@import-library q4477@spec*)) q4470@ls/false) ((lambda (q447a@t) ((lambda (q447c@ls/false) (if (and q447c@ls/false (apply (lambda (q447e@for q447f@isp q4480@rest) (eq? (q312f@syntax->datum q447e@for) 'for)) q447c@ls/false)) (apply (lambda (q4484@for q4485@isp q4486@rest) (q43e7@get-import q4485@isp)) q447c@ls/false) ((lambda (q448a@t) ((lambda (q448c@ls/false) (if q448c@ls/false (apply (lambda (q448e@spec) (q3129@syntax-violation 'import '"invalid import spec" q448e@spec)) q448c@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q448a@t))) (q3049@syntax-dispatch q448a@t 'any))) q447a@t))) (q3049@syntax-dispatch q447a@t '(any any . any)))) q446e@t))) (q3049@syntax-dispatch q446e@t '(any each-any)))) q4458@t))) (q3049@syntax-dispatch q4458@t '(any any any)))) q4440@t))) (q3049@syntax-dispatch q4440@t '(any any . each-any)))) q442e@t))) (q3049@syntax-dispatch q442e@t '(any any . each-any)))) q4410@t))) (q3049@syntax-dispatch q4410@t '(any any . #(each (any any)))))) q4404@t))) (q3049@syntax-dispatch q4404@t '(any . each-any)))) q4402@spec))) (set! q43e9@add-imports! (lambda (q43f2@imp q43f3@h) ((lambda (q43f6@subst) (for-each (lambda (q43f8@x) ((lambda (q43fa@name q43fb@label) ((lambda (q43fe@t) (if q43fe@t ((lambda (q4400@l) (if (not (eq? q4400@l q43fb@label)) (q43d7@dup-error q43fa@name) (void))) q43fe@t) (hashtable-set! q43f3@h q43fa@name q43fb@label))) (hashtable-ref q43f3@h q43fa@name '#f))) (car q43f8@x) (cdr q43f8@x))) q43f6@subst)) (q43e7@get-import q43f2@imp)))) (lambda (q43ea@imp*) ((letrec ((q43ec@f (lambda (q43ee@imp* q43ef@h) (if (null? q43ee@imp*) (hashtable-entries q43ef@h) (begin (q43e9@add-imports! (car q43ee@imp*) q43ef@h) (q43ec@f (cdr q43ee@imp*) q43ef@h)))))) q43ec@f) q43ea@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q30ad@make-top-rib (lambda (q45e0@names q45e1@labels) ((lambda (q45e4@rib) (begin (vector-for-each (lambda (q45e6@name q45e7@label) (begin (if (not (symbol? q45e6@name)) (error 'make-top-rib '"BUG: not a symbol" q45e6@name) (void)) (q2dfc@extend-rib/nc! q45e4@rib (make-simple-struct 'stx '5 (list q45e6@name q2dc8@top-mark* '() '())) q45e7@label))) q45e0@names q45e1@labels) q45e4@rib)) (q2df8@make-empty-rib)))) (set! q30af@make-collector (lambda () ((lambda (q45ea@ls) (lambda q45ee ((lambda (q45ef) (if (= q45ef '0) (apply (lambda () q45ea@ls) q45ee) (if (= q45ef '1) (apply (lambda (q45ec@x) (set! q45ea@ls (q2dc1@set-cons q45ec@x q45ea@ls))) q45ee) (error 'apply '"invalid arg count")))) (length q45ee)))) '()))) (set! q30b1@inv-collector (q29a3@q2882@make-parameter (lambda q45f0@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (q45f2@x) (begin (if (not (procedure? q45f2@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" q45f2@x) (void)) q45f2@x)))) (set! q30b3@vis-collector (q29a3@q2882@make-parameter (lambda q45f4@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (q45f6@x) (begin (if (not (procedure? q45f6@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" q45f6@x) (void)) q45f6@x)))) (set! q30b5@imp-collector (q29a3@q2882@make-parameter (lambda q45f8@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (q45fa@x) (begin (if (not (procedure? q45fa@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" q45fa@x) (void)) q45fa@x)))) (set! q30b7@chi-library-internal (lambda (q45fc@e* q45fd@rib q45fe@top?) (call-with-values (lambda () (q30a1@chi-body* q45fc@e* '() '() '() '() '() '() '() q45fd@rib q45fe@top?)) (lambda (q4612@q4603 q4613@q4605 q4614@q4607 q4615@q4609 q4616@q460b q4617@q460d q4618@q460f q4619@q4611) ((lambda (q4622@exp* q4623@_kwd* q4624@mod** q4625@rhs* q4626@lex* q4627@mr q4628@r q4629@e*) (values (append (apply append (reverse q4624@mod**)) q4629@e*) q4628@r q4627@mr (reverse q4626@lex*) (reverse q4625@rhs*) q4622@exp*)) q4619@q4611 q4618@q460f q4617@q460d q4616@q460b q4615@q4609 q4614@q4607 q4613@q4605 q4612@q4603))))) (set! q30b9@chi-interaction-expr (lambda (q4632@e q4633@rib q4634@r) (call-with-values (lambda () (q30a1@chi-body* (list q4632@e) q4634@r q4634@r '() '() '() '() '() q4633@rib '#t)) (lambda (q4648@q4639 q4649@q463b q464a@q463d q464b@q463f q464c@q4641 q464d@q4643 q464e@q4645 q464f@q4647) ((lambda (q4658@_exp* q4659@_kwd* q465a@mod** q465b@rhs* q465c@lex* q465d@mr q465e@r q465f@e*) ((lambda (q4668@e*) ((lambda (q466a@e) (values q466a@e q465e@r)) (if (null? q4668@e*) (q2dac@q2d1c@build-void) (if (null? (cdr q4668@e*)) (car q4668@e*) (q2dab@q2d1a@build-sequence '#f q4668@e*))))) (q3079@expand-interaction-rhs*/init* (reverse q465c@lex*) (reverse q465b@rhs*) (append (apply append (reverse q465a@mod**)) q465f@e*) q465e@r q465d@mr))) q464f@q4647 q464e@q4645 q464d@q4643 q464c@q4641 q464b@q463f q464a@q463d q4649@q463b q4648@q4639))))) (set! q30bb@library-body-expander (lambda (q466c@name q466d@main-exp* q466e@imp* q466f@b* q4670@top?) ((lambda (q4677@itc) (begin (set! q4677@itc (q30af@make-collector)) ((lambda (q4680@q4679 q4681@q467b q4682@q467d q4683@q467f) ((lambda (q4688@swap) (dynamic-wind q4688@swap (lambda () (call-with-values (lambda () (q30ab@parse-import-spec* q466e@imp*)) (lambda (q468e@q468b q468f@q468d) ((lambda (q4692@subst-labels q4693@subst-names) ((lambda (q4696@rib) ((lambda (q4699@wrap) (begin (set! q4699@wrap (lambda (q4714@x) (make-simple-struct 'stx '5 (list q4714@x q2dc8@top-mark* (list q4696@rib) '())))) ((lambda (q469a@b* q469b@main-exp* q469c@rtc q469d@vtc) ((lambda (q46aa@q46a3 q46ab@q46a5 q46ac@q46a7 q46ad@q46a9) ((lambda (q46b2@swap) (dynamic-wind q46b2@swap (lambda () (call-with-values (lambda () (q30b7@chi-library-internal q469a@b* q4696@rib q4670@top?)) (lambda (q46c0@q46b5 q46c1@q46b7 q46c2@q46b9 q46c3@q46bb q46c4@q46bd q46c5@q46bf) ((lambda (q46cc@internal-exp* q46cd@rhs* q46ce@lex* q46cf@mr q46d0@r q46d1@init*) (call-with-values (lambda () (q30a5@parse-exports (append q469b@main-exp* q46cc@internal-exp*))) (lambda (q46dc@q46d9 q46dd@q46db) ((lambda (q46e0@exp-id* q46e1@exp-name*) (begin (q2e00@seal-rib! q4696@rib) ((lambda (q46e4@init*) ((lambda (q46e6@rhs*) ((lambda () (begin (q2e02@unseal-rib! q4696@rib) ((lambda (q46e8@loc* q46e9@export-subst) ((lambda (q46ed@errstr) (begin (set! q46ed@errstr '"attempt to export mutated variable") (call-with-values (lambda () (q3115@make-export-env/macros q46ce@lex* q46e8@loc* q46d0@r)) (lambda (q46f4@q46ef q46f5@q46f1 q46f6@q46f3) ((lambda (q46fa@macro* q46fb@global* q46fc@export-env) (begin (for-each (lambda (q4700@s) ((lambda (q4702@name q4703@label) ((lambda (q4706@p) (if q4706@p ((lambda (q4708@b) ((lambda (q470a@type) (if (eq? q470a@type 'mutable) (q3129@syntax-violation 'export q46ed@errstr q4702@name) (void))) (car q4708@b))) (cdr q4706@p)) (void))) (assq q4703@label q46fc@export-env))) (car q4700@s) (cdr q4700@s))) q46e9@export-subst) ((lambda (q470c@invoke-body q470d@invoke-definitions) (values (q4677@itc) (q469c@rtc) (q469d@vtc) (q2dab@q2d1a@build-sequence '#f (append q470d@invoke-definitions (list q470c@invoke-body))) q46fa@macro* q46e9@export-subst q46fc@export-env)) (q2dae@q2d20@build-letrec* '#f q46ce@lex* q46e6@rhs* (q3111@build-exports q46fb@global* q46e4@init*)) (map q2da7@q2c77@build-global-define (map cdr q46fb@global*))))) q46f6@q46f3 q46f5@q46f1 q46f4@q46ef))))) '#f)) (map q2dce@gen-global q46ce@lex*) (q3113@make-export-subst q46e1@exp-name* q46e0@exp-id*)))))) (q307b@chi-rhs* q46cd@rhs* q46d0@r q46cf@mr))) (q3067@chi-expr* q46d1@init* q46d0@r q46cf@mr)))) q46dd@q46db q46dc@q46d9)))) q46c5@q46bf q46c4@q46bd q46c3@q46bb q46c2@q46b9 q46c1@q46b7 q46c0@q46b5)))) q46b2@swap)) (lambda () (begin ((lambda (q4710@t) (begin (q46aa@q46a3 q46ac@q46a7) (set! q46ac@q46a7 q4710@t))) (q46aa@q46a3)) ((lambda (q4712@t) (begin (q46ab@q46a5 q46ad@q46a9) (set! q46ad@q46a9 q4712@t))) (q46ab@q46a5)))))) q30b1@inv-collector q30b3@vis-collector q469c@rtc q469d@vtc)) (map q4699@wrap q466f@b*) (map q4699@wrap q466d@main-exp*) (q30af@make-collector) (q30af@make-collector)))) '#f)) (q30ad@make-top-rib q4693@subst-names q4692@subst-labels))) q468f@q468d q468e@q468b)))) q4688@swap)) (lambda () (begin ((lambda (q4716@t) (begin (q4680@q4679 q4682@q467d) (set! q4682@q467d q4716@t))) (q4680@q4679)) ((lambda (q4718@t) (begin (q4681@q467b q4683@q467f) (set! q4683@q467f q4718@t))) (q4681@q467b)))))) q30b5@imp-collector q3137@top-level-context q4677@itc '#f))) '#f))) (set! q30bd@core-library-expander (lambda (q471a@e q471b@verify-name) (call-with-values (lambda () (q30a9@parse-library q471a@e)) (lambda (q4726@q471f q4727@q4721 q4728@q4723 q4729@q4725) ((lambda (q472e@b* q472f@imp* q4730@exp* q4731@name*) (call-with-values (lambda () (q30a7@parse-library-name q4731@name*)) (lambda (q473a@q4737 q473b@q4739) ((lambda (q473e@ver q473f@name) (begin (q471b@verify-name q473f@name) (call-with-values (lambda () (q30bb@library-body-expander q473f@name q4730@exp* q472f@imp* q472e@b* '#f)) (lambda (q4750@q4743 q4751@q4745 q4752@q4747 q4753@q4749 q4754@q474b q4755@q474d q4756@q474f) ((lambda (q475e@export-env q475f@export-subst q4760@visit-code q4761@invoke-code q4762@visit-req* q4763@invoke-req* q4764@imp*) (values q473f@name q473e@ver q4764@imp* q4763@invoke-req* q4762@visit-req* q4761@invoke-code q4760@visit-code q475f@export-subst q475e@export-env)) q4756@q474f q4755@q474d q4754@q474b q4753@q4749 q4752@q4747 q4751@q4745 q4750@q4743))))) q473b@q4739 q473a@q4737)))) q4729@q4725 q4728@q4723 q4727@q4721 q4726@q471f))))) (set! q30bf@parse-top-level-program (lambda (q476c@e*) ((lambda (q476e@t) ((lambda (q4770@ls/false) (if (and q4770@ls/false (apply (lambda (q4772@import q4773@imp* q4774@b*) (eq? (q312f@syntax->datum q4772@import) 'import)) q4770@ls/false)) (apply (lambda (q4778@import q4779@imp* q477a@b*) (values q4779@imp* q477a@b*)) q4770@ls/false) ((lambda (q477e@t) ((lambda (q4780@ls/false) (if (and q4780@ls/false (apply (lambda (q4782@import q4783@x q4784@y) (eq? (q312f@syntax->datum q4782@import) 'import)) q4780@ls/false)) (apply (lambda (q4788@import q4789@x q478a@y) (q3129@syntax-violation 'expander '"invalid syntax of top-level program" (q2e3e@syntax-car q476c@e*))) q4780@ls/false) ((lambda (q478e@t) ((lambda (q4790@ls/false) (if q4790@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) q4790@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q478e@t))) (q3049@syntax-dispatch q478e@t '_))) q477e@t))) (q3049@syntax-dispatch q477e@t '((any . any) . any)))) q476e@t))) (q3049@syntax-dispatch q476e@t '((any . each-any) . each-any)))) q476c@e*))) (set! q30c1@top-level-expander (lambda (q4792@e*) (call-with-values (lambda () (q30bf@parse-top-level-program q4792@e*)) (lambda (q4798@q4795 q4799@q4797) ((lambda (q479c@b* q479d@imp*) (call-with-values (lambda () (q30bb@library-body-expander '() '() q479d@imp* q479c@b* '#t)) (lambda (q47ae@q47a1 q47af@q47a3 q47b0@q47a5 q47b1@q47a7 q47b2@q47a9 q47b3@q47ab q47b4@q47ad) ((lambda (q47bc@export-env q47bd@export-subst q47be@visit-code q47bf@invoke-code q47c0@visit-req* q47c1@invoke-req* q47c2@imp*) (values q47c1@invoke-req* q47bf@invoke-code)) q47b4@q47ad q47b3@q47ab q47b2@q47a9 q47b1@q47a7 q47b0@q47a5 q47af@q47a3 q47ae@q47a1)))) q4799@q4797 q4798@q4795))))) (set! q30c3@rp (q29a0@q287c@make-record-printer 'env (lambda (q47ca@x q47cb@p q47cc@wr) (display '"#<environment>" q47cb@p)))) (set! q30cd@env? (lambda (q47d0@x) (and (simple-struct? q47d0@x) (eq? (simple-struct-name q47d0@x) 'env)))) (set! q30cf@env-names (lambda (q47d2@x) (simple-struct-ref q47d2@x '0))) (set! q30d1@set-env-names! (lambda (q47d4@x q47d5@val) (simple-struct-set! q47d4@x '0 q47d5@val))) (set! q30d3@env-labels (lambda (q47d8@x) (simple-struct-ref q47d8@x '1))) (set! q30d5@set-env-labels! (lambda (q47da@x q47db@val) (simple-struct-set! q47da@x '1 q47db@val))) (set! q30d7@env-itc (lambda (q47de@x) (simple-struct-ref q47de@x '2))) (set! q30d9@set-env-itc! (lambda (q47e0@x q47e1@val) (simple-struct-set! q47e0@x '2 q47e1@val))) (set! q30db@dummy '3) (set! q30dd@rp (q29a0@q287c@make-record-printer 'interaction-env (lambda (q47e4@x q47e5@p q47e6@wr) (display '"#<environment>" q47e5@p)))) (set! q30e7@interaction-env? (lambda (q47ea@x) (and (simple-struct? q47ea@x) (eq? (simple-struct-name q47ea@x) 'interaction-env)))) (set! q30e9@interaction-env-rib (lambda (q47ec@x) (simple-struct-ref q47ec@x '0))) (set! q30eb@set-interaction-env-rib! (lambda (q47ee@x q47ef@val) (simple-struct-set! q47ee@x '0 q47ef@val))) (set! q30ed@interaction-env-r (lambda (q47f2@x) (simple-struct-ref q47f2@x '1))) (set! q30ef@set-interaction-env-r! (lambda (q47f4@x q47f5@val) (simple-struct-set! q47f4@x '1 q47f5@val))) (set! q30f1@interaction-env-locs (lambda (q47f8@x) (simple-struct-ref q47f8@x '2))) (set! q30f3@set-interaction-env-locs! (lambda (q47fa@x q47fb@val) (simple-struct-set! q47fa@x '2 q47fb@val))) (set! q30f5@dummy '3) (set! q30f7@interaction-environment-symbols (lambda () (q30ff@environment-symbols (q3135@interaction-environment)))) (set! q30f9@environment-bindings (lambda (q47fe@e) (vector->list (vector-map (lambda (q4800@name q4801@label) (q30fb@parse-binding (cons q4800@name (q2c6e@q2abb@imported-label->binding q4801@label)))) (q30cf@env-names q47fe@e) (q30d3@env-labels q47fe@e))))) (set! q30fb@parse-binding (lambda (q4804@b) (cons (car q4804@b) ((lambda (q4806@t) (if (memv q4806@t '(core-prim global)) 'procedure (if (memv q4806@t '(core-macro macro global-macro)) 'syntax (if (memv q4806@t '($core-rtd)) 'record (if (eq? (car q4804@b) (cadr q4804@b)) 'syntax 'unknown))))) (cadr q4804@b))))) (set! q30fd@environment? (lambda (q4808@x) (or (q30cd@env? q4808@x) (q30e7@interaction-env? q4808@x)))) (set! q30ff@environment-symbols (lambda (q480a@x) (if (q30cd@env? q480a@x) (vector->list (q30cf@env-names q480a@x)) (if (q30e7@interaction-env? q480a@x) (map values (q2de2@rib-sym* (q30e9@interaction-env-rib q480a@x))) (assertion-violation 'environment-symbols '"not an environment" q480a@x))))) (set! q3101@environment (lambda q480c@imp* ((lambda (q480e@itc) ((lambda (q4814@q4811 q4815@q4813) ((lambda (q4818@swap) (dynamic-wind q4818@swap (lambda () (call-with-values (lambda () (q30ab@parse-import-spec* q480c@imp*)) (lambda (q481e@q481b q481f@q481d) ((lambda (q4822@subst-labels q4823@subst-names) (make-simple-struct 'env '4 (list q4823@subst-names q4822@subst-labels q480e@itc))) q481f@q481d q481e@q481b)))) q4818@swap)) (lambda () ((lambda (q4826@t) (begin (q4814@q4811 q4815@q4813) (set! q4815@q4813 q4826@t))) (q4814@q4811))))) q30b5@imp-collector q480e@itc)) (q30af@make-collector)))) (set! q3103@null-environment (lambda (q4828@n) (begin (if (not (eqv? q4828@n '5)) (assertion-violation 'null-environment '"not 5" q4828@n) (void)) (q3101@environment '(psyntax null-environment-5))))) (set! q3105@scheme-report-environment (lambda (q482a@n) (begin (if (not (eqv? q482a@n '5)) (assertion-violation 'scheme-report-environment '"not 5" q482a@n) (void)) (q3101@environment '(psyntax scheme-report-environment-5))))) (set! q3107@expand (lambda (q482c@x q482d@env) (if (q30cd@env? q482d@env) ((lambda (q4830@rib) ((lambda (q4832@x q4833@itc q4834@rtc q4835@vtc) ((lambda (q483a@x) (begin (q2e00@seal-rib! q4830@rib) (values q483a@x (q4834@rtc)))) ((lambda (q484c@q483d q484d@q483f q484e@q4841 q484f@q4843 q4850@q4845 q4851@q4847 q4852@q4849 q4853@q484b) ((lambda (q485c@swap) (dynamic-wind q485c@swap (lambda () (q306b@chi-expr q4832@x '() '())) q485c@swap)) (lambda () (begin ((lambda (q485e@t) (begin (q484c@q483d q4850@q4845) (set! q4850@q4845 q485e@t))) (q484c@q483d)) ((lambda (q4860@t) (begin (q484d@q483f q4851@q4847) (set! q4851@q4847 q4860@t))) (q484d@q483f)) ((lambda (q4862@t) (begin (q484e@q4841 q4852@q4849) (set! q4852@q4849 q4862@t))) (q484e@q4841)) ((lambda (q4864@t) (begin (q484f@q4843 q4853@q484b) (set! q4853@q484b q4864@t))) (q484f@q4843)))))) q3137@top-level-context q30b1@inv-collector q30b3@vis-collector q30b5@imp-collector '#f q4834@rtc q4835@vtc q4833@itc))) (make-simple-struct 'stx '5 (list q482c@x q2dc8@top-mark* (list q4830@rib) '())) (q30d7@env-itc q482d@env) (q30af@make-collector) (q30af@make-collector))) (q30ad@make-top-rib (q30cf@env-names q482d@env) (q30d3@env-labels q482d@env))) (if (q30e7@interaction-env? q482d@env) ((lambda (q4866@rib q4867@r q4868@rtc) ((lambda (q486c@x) (call-with-values (lambda () ((lambda (q4882@q4873 q4883@q4875 q4884@q4877 q4885@q4879 q4886@q487b q4887@q487d q4888@q487f q4889@q4881) ((lambda (q4892@swap) (dynamic-wind q4892@swap (lambda () (q30b9@chi-interaction-expr q486c@x q4866@rib q4867@r)) q4892@swap)) (lambda () (begin ((lambda (q4894@t) (begin (q4882@q4873 q4886@q487b) (set! q4886@q487b q4894@t))) (q4882@q4873)) ((lambda (q4896@t) (begin (q4883@q4875 q4887@q487d) (set! q4887@q487d q4896@t))) (q4883@q4875)) ((lambda (q4898@t) (begin (q4884@q4877 q4888@q487f) (set! q4888@q487f q4898@t))) (q4884@q4877)) ((lambda (q489a@t) (begin (q4885@q4879 q4889@q4881) (set! q4889@q4881 q489a@t))) (q4885@q4879)))))) q3137@top-level-context q30b1@inv-collector q30b3@vis-collector q30b5@imp-collector q482d@env q4868@rtc (q30af@make-collector) (q30af@make-collector))) (lambda (q489c@q486f q489d@q4871) ((lambda (q48a0@r^ q48a1@e) (begin (q30ef@set-interaction-env-r! q482d@env q48a0@r^) (values q48a1@e (q4868@rtc)))) q489d@q4871 q489c@q486f)))) (make-simple-struct 'stx '5 (list q482c@x q2dc8@top-mark* (list q4866@rib) '())))) (q30e9@interaction-env-rib q482d@env) (q30ed@interaction-env-r q482d@env) (q30af@make-collector)) (assertion-violation 'expand '"not an environment" q482d@env))))) (set! q3109@eval (lambda (q48a4@x q48a5@env) (begin (if (not (q30fd@environment? q48a5@env)) (error 'eval '"not an environment" q48a5@env) (void)) (call-with-values (lambda () (q3107@expand q48a4@x q48a5@env)) (lambda (q48ac@q48a9 q48ad@q48ab) ((lambda (q48b0@invoke-req* q48b1@x) (begin (for-each q2c6f@q2abd@invoke-library q48b0@invoke-req*) (eval-core (q29f9@q29b1@expanded->core q48b1@x)))) q48ad@q48ab q48ac@q48a9)))))) (set! q310b@library-expander (lambda q4922 ((lambda (q4923) (if (= q4923 '3) (apply (lambda (q48b4@x q48b5@filename q48b6@verify-name) ((lambda (q48bb@build-visit-code q48bd@visit!) (begin (set! q48bb@build-visit-code (lambda (q4910@macro*) (if (null? q4910@macro*) (q2dac@q2d1c@build-void) (q2dab@q2d1a@build-sequence '#f (map (lambda (q4912@x) ((lambda (q4914@loc q4915@src) (list 'set! q4914@loc q4915@src)) (car q4912@x) (cddr q4912@x))) q4910@macro*))))) (set! q48bd@visit! (lambda (q4908@macro*) (for-each (lambda (q490a@x) ((lambda (q490c@loc q490d@proc) (set-symbol-value! q490c@loc q490d@proc)) (car q490a@x) (cadr q490a@x))) q4908@macro*))) (call-with-values (lambda () (q30bd@core-library-expander q48b4@x q48b6@verify-name)) (lambda (q48d0@q48bf q48d1@q48c1 q48d2@q48c3 q48d3@q48c5 q48d4@q48c7 q48d5@q48c9 q48d6@q48cb q48d7@q48cd q48d8@q48cf) ((lambda (q48e2@export-env q48e3@export-subst q48e4@macro* q48e5@invoke-code q48e6@vis* q48e7@inv* q48e8@imp* q48e9@ver q48ea@name) ((lambda (q48f4@id q48f5@name q48f6@ver q48f7@imp* q48f8@vis* q48f9@inv* q48fa@visit-proc q48fb@invoke-proc q48fc@visit-code q48fd@invoke-code) (begin (q2c6d@q2ab9@install-library q48f4@id q48f5@name q48f6@ver q48f7@imp* q48f8@vis* q48f9@inv* q48e3@export-subst q48e2@export-env q48fa@visit-proc q48fb@invoke-proc q48fc@visit-code q48fd@invoke-code '#t q48b5@filename) (values q48f4@id q48f5@name q48f6@ver q48f7@imp* q48f8@vis* q48f9@inv* q48fd@invoke-code q48fc@visit-code q48e3@export-subst q48e2@export-env))) (gensym) q48ea@name q48e9@ver (map q2c73@q2ac5@library-spec q48e8@imp*) (map q2c73@q2ac5@library-spec q48e6@vis*) (map q2c73@q2ac5@library-spec q48e7@inv*) (lambda () (q48bd@visit! q48e4@macro*)) (lambda () (eval-core (q29f9@q29b1@expanded->core q48e5@invoke-code))) (q48bb@build-visit-code q48e4@macro*) q48e5@invoke-code)) q48d8@q48cf q48d7@q48cd q48d6@q48cb q48d5@q48c9 q48d4@q48c7 q48d3@q48c5 q48d2@q48c3 q48d1@q48c1 q48d0@q48bf))))) '#f '#f)) q4922) (if (= q4923 '2) (apply (lambda (q4918@x q4919@filename) (q310b@library-expander q4918@x q4919@filename (lambda (q491c@x) (values)))) q4922) (if (= q4923 '1) (apply (lambda (q491e@x) (q310b@library-expander q491e@x '#f (lambda (q4920@x) (values)))) q4922) (error 'apply '"invalid arg count"))))) (length q4922)))) (set! q310d@boot-library-expand (lambda (q4924@x) (call-with-values (lambda () (q310b@library-expander q4924@x)) (lambda (q493a@q4927 q493b@q4929 q493c@q492b q493d@q492d q493e@q492f q493f@q4931 q4940@q4933 q4941@q4935 q4942@q4937 q4943@q4939) ((lambda (q494e@export-env q494f@export-subst q4950@visit-code q4951@invoke-code q4952@inv* q4953@vis* q4954@imp* q4955@ver q4956@name q4957@id) (values q4956@name q4951@invoke-code q494f@export-subst q494e@export-env)) q4943@q4939 q4942@q4937 q4941@q4935 q4940@q4933 q493f@q4931 q493e@q492f q493d@q492d q493c@q492b q493b@q4929 q493a@q4927))))) (set! q310f@rev-map-append (lambda (q4962@f q4963@ls q4964@ac) (if (null? q4963@ls) q4964@ac (q310f@rev-map-append q4962@f (cdr q4963@ls) (cons (q4962@f (car q4963@ls)) q4964@ac))))) (set! q3111@build-exports (lambda (q4968@lex*+loc* q4969@init*) (q2dab@q2d1a@build-sequence '#f (cons (q2dac@q2d1c@build-void) (q310f@rev-map-append (lambda (q496c@x) (list 'set! (cdr q496c@x) (car q496c@x))) q4968@lex*+loc* q4969@init*))))) (set! q3113@make-export-subst (lambda (q496e@name* q496f@id*) (map (lambda (q4972@name q4973@id) ((lambda (q4976@label) (begin (if (not q4976@label) (q3129@syntax-violation '#f '"cannot export unbound identifier" q4973@id) (void)) (cons q4972@name q4976@label))) (q2e5a@id->label q4973@id))) q496e@name* q496f@id*))) (set! q3115@make-export-env/macros (lambda (q4978@lex* q4979@loc* q497a@r) ((lambda (q497f@lookup) (begin (set! q497f@lookup (lambda (q499c@x) ((letrec ((q499e@f (lambda (q49a0@x q49a1@lex* q49a2@loc*) (if (pair? q49a1@lex*) (if (eq? q49a0@x (car q49a1@lex*)) (car q49a2@loc*) (q499e@f q49a0@x (cdr q49a1@lex*) (cdr q49a2@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) q499e@f) q499c@x q4978@lex* q4979@loc*))) ((letrec ((q4980@f (lambda (q4982@r q4983@env q4984@global* q4985@macro*) (if (null? q4982@r) (values q4983@env q4984@global* q4985@macro*) ((lambda (q498a@x) ((lambda (q498c@label q498d@b) ((lambda (q4990@t) (if (memv q4990@t '(lexical)) ((lambda (q4992@v) ((lambda (q4994@loc q4995@type) (q4980@f (cdr q4982@r) (cons (cons* q498c@label q4995@type q4994@loc) q4983@env) (cons (cons (q2fd5@lexical-var q4992@v) q4994@loc) q4984@global*) q4985@macro*)) (q497f@lookup (q2fd5@lexical-var q4992@v)) (if (q2fd7@lexical-mutable? q4992@v) 'mutable 'global))) (q2e62@binding-value q498d@b)) (if (memv q4990@t '(local-macro)) ((lambda (q4998@loc) (q4980@f (cdr q4982@r) (cons (cons* q498c@label 'global-macro q4998@loc) q4983@env) q4984@global* (cons (cons q4998@loc (q2e62@binding-value q498d@b)) q4985@macro*))) (gensym)) (if (memv q4990@t '(local-macro!)) ((lambda (q499a@loc) (q4980@f (cdr q4982@r) (cons (cons* q498c@label 'global-macro! q499a@loc) q4983@env) q4984@global* (cons (cons q499a@loc (q2e62@binding-value q498d@b)) q4985@macro*))) (gensym)) (if (memv q4990@t '($rtd $module)) (q4980@f (cdr q4982@r) (cons q498a@x q4983@env) q4984@global* q4985@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (q2e60@binding-type q498d@b) (q2e62@binding-value q498d@b))))))) (q2e60@binding-type q498d@b))) (car q498a@x) (cdr q498a@x))) (car q4982@r)))))) q4980@f) q497a@r '() '() '()))) '#f))) (set! q3117@generate-temporaries (lambda (q49a6@ls) ((lambda (q49a8@t) ((lambda (q49aa@ls/false) (if q49aa@ls/false (apply (lambda (q49ac@ls) (map (lambda (q49ae@x) (make-simple-struct 'stx '5 (list ((lambda (q49b0@x) (if (or (symbol? q49b0@x) (string? q49b0@x)) (gensym q49b0@x) (gensym 't))) (q312f@syntax->datum q49ae@x)) q2dc8@top-mark* '() '()))) q49ac@ls)) q49aa@ls/false) ((lambda (q49b2@t) ((lambda (q49b4@ls/false) (if q49b4@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) q49b4@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q49b2@t))) (q3049@syntax-dispatch q49b2@t '_))) q49a8@t))) (q3049@syntax-dispatch q49a8@t 'each-any))) q49a6@ls))) (set! q3119@free-identifier=? (lambda (q49b6@x q49b7@y) (if (q2e44@id? q49b6@x) (if (q2e44@id? q49b7@y) (q2e4a@free-id=? q49b6@x q49b7@y) (assertion-violation 'free-identifier=? '"not an identifier" q49b7@y)) (assertion-violation 'free-identifier=? '"not an identifier" q49b6@x)))) (set! q311b@bound-identifier=? (lambda (q49ba@x q49bb@y) (if (q2e44@id? q49ba@x) (if (q2e44@id? q49bb@y) (q2e48@bound-id=? q49ba@x q49bb@y) (assertion-violation 'bound-identifier=? '"not an identifier" q49bb@y)) (assertion-violation 'bound-identifier=? '"not an identifier" q49ba@x)))) (set! q311d@make-source-condition (lambda (q49be@x) ((lambda (q49c8@q49c3 q49ca@q49c5 q49cc@q49c4 q49cf@q49c2 q49d1@make-source-condition q49d3@q49c0 q49d5@q49c1 q49d7@source-condition? q49d9@source-filename q49db@source-character) (begin (set! q49c8@q49c3 (make-record-type-descriptor '&source-information q4e18@q4b5f@&condition-rtd 'q49c6 '#f '#f '#((immutable file-name) (immutable character)))) (set! q49ca@q49c5 '#f) (set! q49cc@q49c4 (make-record-constructor-descriptor q49c8@q49c3 q4e19@q4b61@&condition-rcd q49ca@q49c5)) (set! q49cf@q49c2 (record-predicate q49c8@q49c3)) (set! q49d1@make-source-condition (record-constructor q49cc@q49c4)) (set! q49d3@q49c0 (record-accessor q49c8@q49c3 '0)) (set! q49d5@q49c1 (record-accessor q49c8@q49c3 '1)) (set! q49d7@source-condition? (condition-predicate q49c8@q49c3)) (set! q49d9@source-filename (condition-accessor q49c8@q49c3 q49d3@q49c0)) (set! q49db@source-character (condition-accessor q49c8@q49c3 q49d5@q49c1)) (if (pair? q49be@x) (q49d1@make-source-condition (car q49be@x) (cdr q49be@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q311f@extract-position-condition (lambda (q49dc@x) (q311d@make-source-condition (q3121@expression-position q49dc@x)))) (set! q3121@expression-position (lambda (q49de@x) (and (q2e10@stx? q49de@x) ((lambda (q49e0@x) (and (q2998@q286c@annotation? q49e0@x) (q2999@q286e@annotation-source q49e0@x))) (q2e12@stx-expr q49de@x))))) (set! q3123@assertion-error (lambda (q49e2@expr q49e3@pos) (raise (condition (q4e48@q4c23@make-assertion-violation) (q4e5a@q4c55@make-who-condition 'assert) (q4e1e@q4bb6@make-message-condition '"assertion failed") (q4e50@q4c3a@make-irritants-condition (list q49e2@expr)) (q311d@make-source-condition q49e3@pos))))) (set! q3125@syntax-error (lambda (q49e6@x . q49e8@args) (begin (if (not (for-all string? q49e8@args)) (assertion-violation 'syntax-error '"invalid argument" q49e8@args) (void)) (raise (condition (q4e1e@q4bb6@make-message-condition (if (null? q49e8@args) '"invalid syntax" (apply string-append q49e8@args))) (q4e7c@q4cb1@make-syntax-violation (q312f@syntax->datum q49e6@x) '#f) (q311f@extract-position-condition q49e6@x)))))) (set! q3127@syntax-violation* (lambda (q49ea@who q49eb@msg q49ec@form q49ed@condition-object) (begin (if (not (string? q49eb@msg)) (assertion-violation 'syntax-violation '"message is not a string" q49eb@msg) (void)) ((lambda (q49f2@who) (raise (condition (if q49f2@who (q4e5a@q4c55@make-who-condition q49f2@who) (condition)) (q4e1e@q4bb6@make-message-condition q49eb@msg) q49ed@condition-object (q311f@extract-position-condition q49ec@form)))) (if (or (string? q49ea@who) (symbol? q49ea@who)) q49ea@who (if (not q49ea@who) ((lambda (q49f4@t) ((lambda (q49f6@ls/false) (if (and q49f6@ls/false (apply (lambda (q49f8@id) (q2e44@id? q49f8@id)) q49f6@ls/false)) (apply (lambda (q49fa@id) (q312f@syntax->datum q49fa@id)) q49f6@ls/false) ((lambda (q49fc@t) ((lambda (q49fe@ls/false) (if (and q49fe@ls/false (apply (lambda (q4a00@id q4a01@rest) (q2e44@id? q4a00@id)) q49fe@ls/false)) (apply (lambda (q4a04@id q4a05@rest) (q312f@syntax->datum q4a04@id)) q49fe@ls/false) ((lambda (q4a08@t) ((lambda (q4a0a@ls/false) (if q4a0a@ls/false (apply (lambda () '#f) q4a0a@ls/false) (q3129@syntax-violation '#f '"invalid syntax" q4a08@t))) (q3049@syntax-dispatch q4a08@t '_))) q49fc@t))) (q3049@syntax-dispatch q49fc@t '(any . any)))) q49f4@t))) (q3049@syntax-dispatch q49f4@t 'any))) q49ec@form) (assertion-violation 'syntax-violation '"invalid who argument" q49ea@who))))))) (set! q3129@syntax-violation (lambda q4a1a ((lambda (q4a1b) (if (= q4a1b '3) (apply (lambda (q4a0c@who q4a0d@msg q4a0e@form) (q3129@syntax-violation q4a0c@who q4a0d@msg q4a0e@form '#f)) q4a1a) (if (= q4a1b '4) (apply (lambda (q4a12@who q4a13@msg q4a14@form q4a15@subform) (q3127@syntax-violation* q4a12@who q4a13@msg q4a14@form (q4e7c@q4cb1@make-syntax-violation (q312f@syntax->datum q4a14@form) (q312f@syntax->datum q4a15@subform)))) q4a1a) (error 'apply '"invalid arg count")))) (length q4a1a)))) (set! q312b@identifier? (lambda (q4a1c@x) (q2e44@id? q4a1c@x))) (set! q312d@datum->syntax (lambda (q4a1e@id q4a1f@datum) (if (q2e44@id? q4a1e@id) (q2e24@datum->stx q4a1e@id q4a1f@datum) (assertion-violation 'datum->syntax '"not an identifier" q4a1e@id)))) (set! q312f@syntax->datum (lambda (q4a22@x) (q2e58@stx->datum q4a22@x))) (set! q3131@compile-r6rs-top-level (lambda (q4a24@x*) (call-with-values (lambda () (q30c1@top-level-expander q4a24@x*)) (lambda (q4a2a@q4a27 q4a2b@q4a29) ((lambda (q4a2e@invoke-code q4a2f@lib*) (lambda () (begin (for-each q2c6f@q2abd@invoke-library q4a2f@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (q29f9@q29b1@expanded->core q4a2e@invoke-code)) (void)) (eval-core (q29f9@q29b1@expanded->core q4a2e@invoke-code))))) q4a2b@q4a29 q4a2a@q4a27))))) (set! q3133@pre-compile-r6rs-top-level (lambda (q4a32@x*) (call-with-values (lambda () (q30c1@top-level-expander q4a32@x*)) (lambda (q4a38@q4a35 q4a39@q4a37) ((lambda (q4a3c@invoke-code q4a3d@lib*) (begin (for-each q2c6f@q2abd@invoke-library q4a3d@lib*) (q29a1@q287e@compile-core (q29f9@q29b1@expanded->core q4a3c@invoke-code)))) q4a39@q4a37 q4a38@q4a35))))) (set! q3135@interaction-environment ((lambda (q4a40@the-env) (lambda () (or q4a40@the-env ((lambda (q4a42@lib q4a43@rib) (begin ((lambda (q4a46@subst) (begin (q2de4@set-rib-sym*! q4a43@rib (map car q4a46@subst)) (q2de8@set-rib-mark**! q4a43@rib (map (lambda (q4a48@x) q2dc8@top-mark*) q4a46@subst)) (q2dec@set-rib-label*! q4a43@rib (map cdr q4a46@subst)))) (q2c4a@q2a73@library-subst q4a42@lib)) ((lambda (q4a4a@env) (begin (set! q4a40@the-env q4a4a@env) q4a4a@env)) (make-simple-struct 'interaction-env '4 (list q4a43@rib '() '()))))) (q2c68@q2aaf@find-library-by-name '(mosh interaction)) (q2df8@make-empty-rib))))) '#f)) (set! q3137@top-level-context (q29a3@q2882@make-parameter '#f)) (begin (set! q4b45@q3137@top-level-context q3137@top-level-context) (set! q4b44@q3135@interaction-environment q3135@interaction-environment) (set! q4b43@q3133@pre-compile-r6rs-top-level q3133@pre-compile-r6rs-top-level) (set! q4b42@q3131@compile-r6rs-top-level q3131@compile-r6rs-top-level) (set! q4b41@q312f@syntax->datum q312f@syntax->datum) (set! q4b40@q312d@datum->syntax q312d@datum->syntax) (set! q4b3f@q312b@identifier? q312b@identifier?) (set! q4b3e@q3129@syntax-violation q3129@syntax-violation) (set! q4b3d@q3127@syntax-violation* q3127@syntax-violation*) (set! q4b3c@q3125@syntax-error q3125@syntax-error) (set! q4b3b@q3123@assertion-error q3123@assertion-error) (set! q4b3a@q3121@expression-position q3121@expression-position) (set! q4b39@q311f@extract-position-condition q311f@extract-position-condition) (set! q4b38@q311d@make-source-condition q311d@make-source-condition) (set! q4b37@q311b@bound-identifier=? q311b@bound-identifier=?) (set! q4b36@q3119@free-identifier=? q3119@free-identifier=?) (set! q4b35@q3117@generate-temporaries q3117@generate-temporaries) (set! q4b34@q3115@make-export-env/macros q3115@make-export-env/macros) (set! q4b33@q3113@make-export-subst q3113@make-export-subst) (set! q4b32@q3111@build-exports q3111@build-exports) (set! q4b31@q310f@rev-map-append q310f@rev-map-append) (set! q4b30@q310d@boot-library-expand q310d@boot-library-expand) (set! q4b2f@q310b@library-expander q310b@library-expander) (set! q4b2e@q3109@eval q3109@eval) (set! q4b2d@q3107@expand q3107@expand) (set! q4b2c@q3105@scheme-report-environment q3105@scheme-report-environment) (set! q4b2b@q3103@null-environment q3103@null-environment) (set! q4b2a@q3101@environment q3101@environment) (set! q4b29@q30ff@environment-symbols q30ff@environment-symbols) (set! q4b28@q30fd@environment? q30fd@environment?) (set! q4b27@q30fb@parse-binding q30fb@parse-binding) (set! q4b26@q30f9@environment-bindings q30f9@environment-bindings) (set! q4b25@q30f7@interaction-environment-symbols q30f7@interaction-environment-symbols) (set! q4b24@q30f5@dummy q30f5@dummy) (set! q4b23@q30f3@set-interaction-env-locs! q30f3@set-interaction-env-locs!) (set! q4b22@q30f1@interaction-env-locs q30f1@interaction-env-locs) (set! q4b21@q30ef@set-interaction-env-r! q30ef@set-interaction-env-r!) (set! q4b20@q30ed@interaction-env-r q30ed@interaction-env-r) (set! q4b1f@q30eb@set-interaction-env-rib! q30eb@set-interaction-env-rib!) (set! q4b1e@q30e9@interaction-env-rib q30e9@interaction-env-rib) (set! q4b1d@q30e7@interaction-env? q30e7@interaction-env?) (set! q4b1c@q30dd@rp q30dd@rp) (set! q4b1b@q30db@dummy q30db@dummy) (set! q4b1a@q30d9@set-env-itc! q30d9@set-env-itc!) (set! q4b19@q30d7@env-itc q30d7@env-itc) (set! q4b18@q30d5@set-env-labels! q30d5@set-env-labels!) (set! q4b17@q30d3@env-labels q30d3@env-labels) (set! q4b16@q30d1@set-env-names! q30d1@set-env-names!) (set! q4b15@q30cf@env-names q30cf@env-names) (set! q4b14@q30cd@env? q30cd@env?) (set! q4b13@q30c3@rp q30c3@rp) (set! q4b12@q30c1@top-level-expander q30c1@top-level-expander) (set! q4b11@q30bf@parse-top-level-program q30bf@parse-top-level-program) (set! q4b10@q30bd@core-library-expander q30bd@core-library-expander) (set! q4b0f@q30bb@library-body-expander q30bb@library-body-expander) (set! q4b0e@q30b9@chi-interaction-expr q30b9@chi-interaction-expr) (set! q4b0d@q30b7@chi-library-internal q30b7@chi-library-internal) (set! q4b0c@q30b5@imp-collector q30b5@imp-collector) (set! q4b0b@q30b3@vis-collector q30b3@vis-collector) (set! q4b0a@q30b1@inv-collector q30b1@inv-collector) (set! q4b09@q30af@make-collector q30af@make-collector) (set! q4b08@q30ad@make-top-rib q30ad@make-top-rib) (set! q4b07@q30ab@parse-import-spec* q30ab@parse-import-spec*) (set! q4b06@q30a9@parse-library q30a9@parse-library) (set! q4b05@q30a7@parse-library-name q30a7@parse-library-name) (set! q4b04@q30a5@parse-exports q30a5@parse-exports) (set! q4b03@q30a3@expand-transformer q30a3@expand-transformer) (set! q4b02@q30a1@chi-body* q30a1@chi-body*) (set! q4b01@q309f@chi-internal-module q309f@chi-internal-module) (set! q4b00@q309d@module-interface-exp-id* q309d@module-interface-exp-id*) (set! q4aff@q309b@dummy q309b@dummy) (set! q4afe@q3099@set-module-interface-exp-lab-vec! q3099@set-module-interface-exp-lab-vec!) (set! q4afd@q3097@module-interface-exp-lab-vec q3097@module-interface-exp-lab-vec) (set! q4afc@q3095@set-module-interface-exp-id-vec! q3095@set-module-interface-exp-id-vec!) (set! q4afb@q3093@module-interface-exp-id-vec q3093@module-interface-exp-id-vec) (set! q4afa@q3091@set-module-interface-first-mark! q3091@set-module-interface-first-mark!) (set! q4af9@q308f@module-interface-first-mark q308f@module-interface-first-mark) (set! q4af8@q308d@module-interface? q308d@module-interface?) (set! q4af7@q3083@parse-module q3083@parse-module) (set! q4af6@q3081@chi-internal q3081@chi-internal) (set! q4af5@q307f@find-dups q307f@find-dups) (set! q4af4@q307d@find-bound=? q307d@find-bound=?) (set! q4af3@q307b@chi-rhs* q307b@chi-rhs*) (set! q4af2@q3079@expand-interaction-rhs*/init* q3079@expand-interaction-rhs*/init*) (set! q4af1@q3077@chi-rhs q3077@chi-rhs) (set! q4af0@q3075@chi-defun q3075@chi-defun) (set! q4aef@q3073@chi-lambda-clause* q3073@chi-lambda-clause*) (set! q4aee@q3071@chi-lambda-clause q3071@chi-lambda-clause) (set! q4aed@q306f@verify-formals q306f@verify-formals) (set! q4aec@q306d@chi-set! q306d@chi-set!) (set! q4aeb@q306b@chi-expr q306b@chi-expr) (set! q4aea@q3069@chi-application q3069@chi-application) (set! q4ae9@q3067@chi-expr* q3067@chi-expr*) (set! q4ae8@q3065@chi-global-macro q3065@chi-global-macro) (set! q4ae7@q3063@chi-local-macro q3063@chi-local-macro) (set! q4ae6@q3061@chi-macro q3061@chi-macro) (set! q4ae5@q305f@do-macro-call q305f@do-macro-call) (set! q4ae4@q305d@local-macro-transformer q305d@local-macro-transformer) (set! q4ae3@q305b@macro-transformer q305b@macro-transformer) (set! q4ae2@q3059@symbol-macro q3059@symbol-macro) (set! q4ae1@q3057@core-macro-transformer q3057@core-macro-transformer) (set! q4ae0@q3055@syntax-transformer q3055@syntax-transformer) (set! q4adf@q3053@ellipsis-map q3053@ellipsis-map) (set! q4ade@q3051@syntax-case-transformer q3051@syntax-case-transformer) (set! q4add@q304f@verify-literals q304f@verify-literals) (set! q4adc@q304d@underscore? q304d@underscore?) (set! q4adb@q304b@ellipsis? q304b@ellipsis?) (set! q4ada@q3049@syntax-dispatch q3049@syntax-dispatch) (set! q4ad9@q3047@convert-pattern q3047@convert-pattern) (set! q4ad8@q3045@foreign-call-transformer q3045@foreign-call-transformer) (set! q4ad7@q3043@parameterize-macro q3043@parameterize-macro) (set! q4ad6@q3041@incorrect-usage-macro q3041@incorrect-usage-macro) (set! q4ad5@q303f@define-condition-type-macro q303f@define-condition-type-macro) (set! q4ad4@q303d@define-record-type-macro q303d@define-record-type-macro) (set! q4ad3@q303b@define-struct-macro q303b@define-struct-macro) (set! q4ad2@q3039@quasisyntax-macro q3039@quasisyntax-macro) (set! q4ad1@q3037@quasiquote-macro q3037@quasiquote-macro) (set! q4ad0@q3035@syntax-rules-macro q3035@syntax-rules-macro) (set! q4acf@q3033@include-into-macro q3033@include-into-macro) (set! q4ace@q3031@include-macro q3031@include-macro) (set! q4acd@q302f@do-include q302f@do-include) (set! q4acc@q302d@cond-macro q302d@cond-macro) (set! q4acb@q302b@and-macro q302b@and-macro) (set! q4aca@q3029@or-macro q3029@or-macro) (set! q4ac9@q3027@let*-macro q3027@let*-macro) (set! q4ac8@q3025@do-macro q3025@do-macro) (set! q4ac7@q3023@identifier-syntax-macro q3023@identifier-syntax-macro) (set! q4ac6@q3021@endianness-macro q3021@endianness-macro) (set! q4ac5@q301f@assert-macro q301f@assert-macro) (set! q4ac4@q301d@delay-macro q301d@delay-macro) (set! q4ac3@q301b@time-macro q301b@time-macro) (set! q4ac2@q3019@define-enumeration-macro q3019@define-enumeration-macro) (set! q4ac1@q3017@guard-macro q3017@guard-macro) (set! q4ac0@q3015@trace-letrec-syntax-macro q3015@trace-letrec-syntax-macro) (set! q4abf@q3013@trace-let-syntax-macro q3013@trace-let-syntax-macro) (set! q4abe@q3011@trace-let/rec-syntax q3011@trace-let/rec-syntax) (set! q4abd@q300f@trace-define-syntax-macro q300f@trace-define-syntax-macro) (set! q4abc@q300d@trace-define-macro q300d@trace-define-macro) (set! q4abb@q300b@trace-lambda-macro q300b@trace-lambda-macro) (set! q4aba@q3009@let*-values-macro q3009@let*-values-macro) (set! q4ab9@q3007@let-values-macro q3007@let-values-macro) (set! q4ab8@q3005@let-macro q3005@let-macro) (set! q4ab7@q3003@invalid-fmls-error q3003@invalid-fmls-error) (set! q4ab6@q3001@with-syntax-macro q3001@with-syntax-macro) (set! q4ab5@q2fff@bless q2fff@bless) (set! q4ab4@q2ffd@lambda-transformer q2ffd@lambda-transformer) (set! q4ab3@q2ffb@case-lambda-transformer q2ffb@case-lambda-transformer) (set! q4ab2@q2ff9@quote-transformer q2ff9@quote-transformer) (set! q4ab1@q2ff7@case-macro q2ff7@case-macro) (set! q4ab0@q2ff5@or-transformer q2ff5@or-transformer) (set! q4aaf@q2ff3@and-transformer q2ff3@and-transformer) (set! q4aae@q2ff1@if-transformer q2ff1@if-transformer) (set! q4aad@q2fef@unless-macro q2fef@unless-macro) (set! q4aac@q2fed@when-macro q2fed@when-macro) (set! q4aab@q2feb@record-constructor-descriptor-transformer q2feb@record-constructor-descriptor-transformer) (set! q4aaa@q2fe9@record-type-descriptor-transformer q2fe9@record-type-descriptor-transformer) (set! q4aa9@q2fe7@type-descriptor-transformer q2fe7@type-descriptor-transformer) (set! q4aa8@q2fe5@fluid-let-syntax-transformer q2fe5@fluid-let-syntax-transformer) (set! q4aa7@q2fe3@letrec*-transformer q2fe3@letrec*-transformer) (set! q4aa6@q2fe1@letrec-transformer q2fe1@letrec-transformer) (set! q4aa5@q2fdf@letrec-helper q2fdf@letrec-helper) (set! q4aa4@q2fdd@add-lexicals q2fdd@add-lexicals) (set! q4aa3@q2fdb@add-lexical q2fdb@add-lexical) (set! q4aa2@q2fd9@set-lexical-mutable! q2fd9@set-lexical-mutable!) (set! q4aa1@q2fd7@lexical-mutable? q2fd7@lexical-mutable?) (set! q4aa0@q2fd5@lexical-var q2fd5@lexical-var) (set! q4a9f@q2fd3@scheme-stx q2fd3@scheme-stx) (set! q4a9e@q2fd1@scheme-stx-hashtable q2fd1@scheme-stx-hashtable) (set! q4a9d@q2fcf@parse-define-syntax q2fcf@parse-define-syntax) (set! q4a9c@q2fcd@parse-define q2fcd@parse-define) (set! q4a9b@q2e7c@make-eval-transformer q2e7c@make-eval-transformer) (set! q4a9a@q2e7a@variable-transformer-procedure q2e7a@variable-transformer-procedure) (set! q4a99@q2e78@variable-transformer? q2e78@variable-transformer?) (set! q4a98@q2e76@make-variable-transformer q2e76@make-variable-transformer) (set! q4a97@q2e74@sanitize-binding q2e74@sanitize-binding) (set! q4a96@q2e66@syntax-type q2e66@syntax-type) (set! q4a95@q2e64@raise-unbound-error q2e64@raise-unbound-error) (set! q4a94@q2e62@binding-value q2e62@binding-value) (set! q4a93@q2e60@binding-type q2e60@binding-type) (set! q4a92@q2e5e@make-binding q2e5e@make-binding) (set! q4a91@q2e5c@label->binding q2e5c@label->binding) (set! q4a90@q2e5a@id->label q2e5a@id->label) (set! q4a8f@q2e58@stx->datum q2e58@stx->datum) (set! q4a8e@q2e56@strip q2e56@strip) (set! q4a8d@q2e54@strip-annotations q2e54@strip-annotations) (set! q4a8c@q2e52@self-evaluating? q2e52@self-evaluating?) (set! q4a8b@q2e50@bound-id-member? q2e50@bound-id-member?) (set! q4a8a@q2e4e@distinct-bound-ids? q2e4e@distinct-bound-ids?) (set! q4a89@q2e4c@valid-bound-ids? q2e4c@valid-bound-ids?) (set! q4a88@q2e4a@free-id=? q2e4a@free-id=?) (set! q4a87@q2e48@bound-id=? q2e48@bound-id=?) (set! q4a86@q2e46@id->sym q2e46@id->sym) (set! q4a85@q2e44@id? q2e44@id?) (set! q4a84@q2e42@syntax->list q2e42@syntax->list) (set! q4a83@q2e40@syntax-cdr q2e40@syntax-cdr) (set! q4a82@q2e3e@syntax-car q2e3e@syntax-car) (set! q4a81@q2e3c@syntax-list? q2e3c@syntax-list?) (set! q4a80@q2e3a@syntax-null? q2e3a@syntax-null?) (set! q4a7f@q2e38@syntax-vector? q2e38@syntax-vector?) (set! q4a7e@q2e36@syntax-pair? q2e36@syntax-pair?) (set! q4a7d@q2e34@syntax-vector->list q2e34@syntax-vector->list) (set! q4a7c@q2e32@syntax-kind? q2e32@syntax-kind?) (set! q4a7b@q2e30@add-subst q2e30@add-subst) (set! q4a7a@q2e2e@add-mark q2e2e@add-mark) (set! q4a79@q2e2c@mkstx q2e2c@mkstx) (set! q4a78@q2e2a@anti-mark? q2e2a@anti-mark?) (set! q4a77@q2e28@anti-mark q2e28@anti-mark) (set! q4a76@q2e26@gen-mark q2e26@gen-mark) (set! q4a75@q2e24@datum->stx q2e24@datum->stx) (set! q4a74@q2e22@dummy q2e22@dummy) (set! q4a73@q2e20@set-stx-ae*! q2e20@set-stx-ae*!) (set! q4a72@q2e1e@stx-ae* q2e1e@stx-ae*) (set! q4a71@q2e1c@set-stx-subst*! q2e1c@set-stx-subst*!) (set! q4a70@q2e1a@stx-subst* q2e1a@stx-subst*) (set! q4a6f@q2e18@set-stx-mark*! q2e18@set-stx-mark*!) (set! q4a6e@q2e16@stx-mark* q2e16@stx-mark*) (set! q4a6d@q2e14@set-stx-expr! q2e14@set-stx-expr!) (set! q4a6c@q2e12@stx-expr q2e12@stx-expr) (set! q4a6b@q2e10@stx? q2e10@stx?) (set! q4a6a@q2e06@rp q2e06@rp) (set! q4a69@q2e04@make-full-rib q2e04@make-full-rib) (set! q4a68@q2e02@unseal-rib! q2e02@unseal-rib!) (set! q4a67@q2e00@seal-rib! q2e00@seal-rib!) (set! q4a66@q2dfe@make-rib-map q2dfe@make-rib-map) (set! q4a65@q2dfc@extend-rib/nc! q2dfc@extend-rib/nc!) (set! q4a64@q2dfa@extend-rib! q2dfa@extend-rib!) (set! q4a63@q2df8@make-empty-rib q2df8@make-empty-rib) (set! q4a62@q2df6@dummy q2df6@dummy) (set! q4a61@q2df4@set-rib-cache! q2df4@set-rib-cache!) (set! q4a60@q2df2@rib-cache q2df2@rib-cache) (set! q4a5f@q2df0@set-rib-sealed/freq! q2df0@set-rib-sealed/freq!) (set! q4a5e@q2dee@rib-sealed/freq q2dee@rib-sealed/freq) (set! q4a5d@q2dec@set-rib-label*! q2dec@set-rib-label*!) (set! q4a5c@q2dea@rib-label* q2dea@rib-label*) (set! q4a5b@q2de8@set-rib-mark**! q2de8@set-rib-mark**!) (set! q4a5a@q2de6@rib-mark** q2de6@rib-mark**) (set! q4a59@q2de4@set-rib-sym*! q2de4@set-rib-sym*!) (set! q4a58@q2de2@rib-sym* q2de2@rib-sym*) (set! q4a57@q2de0@rib? q2de0@rib?) (set! q4a56@q2dd6@gen-define-label q2dd6@gen-define-label) (set! q4a55@q2dd4@gen-define-label+loc q2dd4@gen-define-label+loc) (set! q4a54@q2dd2@gen-top-level-label q2dd2@gen-top-level-label) (set! q4a53@q2dd0@gen-label q2dd0@gen-label) (set! q4a52@q2dce@gen-global q2dce@gen-global) (set! q4a51@q2dcc@gen-lexical q2dcc@gen-lexical) (set! q4a50@q2dca@top-marked? q2dca@top-marked?) (set! q4a4f@q2dc8@top-mark* q2dc8@top-mark*) (set! q4a4e@q2dc3@set-union q2dc3@set-union) (set! q4a4d@q2dc1@set-cons q2dc1@set-cons) (set! q4a4c@q2dbf@file-options-macro q2dbf@file-options-macro) (q2c65@q2aa9@current-library-expander q310b@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q4b54@q4b4f q4b56@q4b51 q4b58@q4b50 q4b5b@&condition? q4b5d@make-&condition q4b5f@&condition-rtd q4b61@&condition-rcd q4bad@q4ba8 q4baf@q4baa q4bb1@q4ba9 q4bb4@p? q4bb6@make-message-condition q4bb8@q4ba7 q4bba@message-condition? q4bbc@condition-message q4bbe@&message-rtd q4bc0@&message-rcd q4bc6@q4bc1 q4bc8@q4bc3 q4bca@q4bc2 q4bcd@p? q4bcf@make-warning q4bd1@warning? q4bd3@&warning-rtd q4bd5@&warning-rcd q4bdb@q4bd6 q4bdd@q4bd8 q4bdf@q4bd7 q4be2@p? q4be4@make-serious-condition q4be6@serious-condition? q4be8@&serious-rtd q4bea@&serious-rcd q4bf0@q4beb q4bf2@q4bed q4bf4@q4bec q4bf7@p? q4bf9@make-error q4bfb@error? q4bfd@&error-rtd q4bff@&error-rcd q4c05@q4c00 q4c07@q4c02 q4c09@q4c01 q4c0c@p? q4c0e@make-violation q4c10@violation? q4c12@&violation-rtd q4c14@&violation-rcd q4c1a@q4c15 q4c1c@q4c17 q4c1e@q4c16 q4c21@p? q4c23@make-assertion-violation q4c25@assertion-violation? q4c27@&assertion-rtd q4c29@&assertion-rcd q4c31@q4c2c q4c33@q4c2e q4c35@q4c2d q4c38@p? q4c3a@make-irritants-condition q4c3c@q4c2b q4c3e@irritants-condition? q4c40@condition-irritants q4c42@&irritants-rtd q4c44@&irritants-rcd q4c4c@q4c47 q4c4e@q4c49 q4c50@q4c48 q4c53@p? q4c55@make-who-condition q4c57@q4c46 q4c59@who-condition? q4c5b@condition-who q4c5d@&who-rtd q4c5f@&who-rcd q4c65@q4c60 q4c67@q4c62 q4c69@q4c61 q4c6c@p? q4c6e@make-non-continuable-violation q4c70@non-continuable-violation? q4c72@&non-continuable-rtd q4c74@&non-continuable-rcd q4c7a@q4c75 q4c7c@q4c77 q4c7e@q4c76 q4c81@p? q4c83@make-implementation-restriction-violation q4c85@implementation-restriction-violation? q4c87@&implementation-restriction-rtd q4c89@&implementation-restriction-rcd q4c8f@q4c8a q4c91@q4c8c q4c93@q4c8b q4c96@p? q4c98@make-lexical-violation q4c9a@lexical-violation? q4c9c@&lexical-rtd q4c9e@&lexical-rcd q4ca8@q4ca3 q4caa@q4ca5 q4cac@q4ca4 q4caf@p? q4cb1@make-syntax-violation q4cb3@q4ca0 q4cb5@q4ca2 q4cb7@syntax-violation? q4cb9@syntax-violation-form q4cbb@syntax-violation-subform q4cbd@&syntax-rtd q4cbf@&syntax-rcd q4cc5@q4cc0 q4cc7@q4cc2 q4cc9@q4cc1 q4ccc@p? q4cce@make-undefined-violation q4cd0@undefined-violation? q4cd2@&undefined-rtd q4cd4@&undefined-rcd q4cda@q4cd5 q4cdc@q4cd7 q4cde@q4cd6 q4ce1@p? q4ce3@make-i/o-error q4ce5@i/o-error? q4ce7@&i/o-rtd q4ce9@&i/o-rcd q4cef@q4cea q4cf1@q4cec q4cf3@q4ceb q4cf6@p? q4cf8@make-i/o-read-error q4cfa@i/o-read-error? q4cfc@&i/o-read-rtd q4cfe@&i/o-read-rcd q4d04@q4cff q4d06@q4d01 q4d08@q4d00 q4d0b@p? q4d0d@make-i/o-write-error q4d0f@i/o-write-error? q4d11@&i/o-write-rtd q4d13@&i/o-write-rcd q4d1b@q4d16 q4d1d@q4d18 q4d1f@q4d17 q4d22@p? q4d24@make-i/o-invalid-position-error q4d26@q4d15 q4d28@i/o-invalid-position-error? q4d2a@i/o-error-position q4d2c@&i/o-invalid-position-rtd q4d2e@&i/o-invalid-position-rcd q4d36@q4d31 q4d38@q4d33 q4d3a@q4d32 q4d3d@p? q4d3f@make-i/o-filename-error q4d41@q4d30 q4d43@i/o-filename-error? q4d45@i/o-error-filename q4d47@&i/o-filename-rtd q4d49@&i/o-filename-rcd q4d4f@q4d4a q4d51@q4d4c q4d53@q4d4b q4d56@p? q4d58@make-i/o-file-protection-error q4d5a@i/o-file-protection-error? q4d5c@&i/o-file-protection-rtd q4d5e@&i/o-file-protection-rcd q4d64@q4d5f q4d66@q4d61 q4d68@q4d60 q4d6b@p? q4d6d@make-i/o-file-is-read-only-error q4d6f@i/o-file-is-read-only-error? q4d71@&i/o-file-is-read-only-rtd q4d73@&i/o-file-is-read-only-rcd q4d79@q4d74 q4d7b@q4d76 q4d7d@q4d75 q4d80@p? q4d82@make-i/o-file-already-exists-error q4d84@i/o-file-already-exists-error? q4d86@&i/o-file-already-exists-rtd q4d88@&i/o-file-already-exists-rcd q4d8e@q4d89 q4d90@q4d8b q4d92@q4d8a q4d95@p? q4d97@make-i/o-file-does-not-exist-error q4d99@i/o-file-does-not-exist-error? q4d9b@&i/o-file-does-not-exist-rtd q4d9d@&i/o-file-does-not-exist-rcd q4da5@q4da0 q4da7@q4da2 q4da9@q4da1 q4dac@p? q4dae@make-i/o-port-error q4db0@q4d9f q4db2@i/o-port-error? q4db4@i/o-error-port q4db6@&i/o-port-rtd q4db8@&i/o-port-rcd q4dbe@q4db9 q4dc0@q4dbb q4dc2@q4dba q4dc5@p? q4dc7@make-i/o-decoding-error q4dc9@i/o-decoding-error? q4dcb@&i/o-decoding-rtd q4dcd@&i/o-decoding-rcd q4dd5@q4dd0 q4dd7@q4dd2 q4dd9@q4dd1 q4ddc@p? q4dde@make-i/o-encoding-error q4de0@q4dcf q4de2@i/o-encoding-error? q4de4@i/o-encoding-error-char q4de6@&i/o-encoding-rtd q4de8@&i/o-encoding-rcd q4dee@q4de9 q4df0@q4deb q4df2@q4dea q4df5@p? q4df7@make-no-infinities-violation q4df9@no-infinities-violation? q4dfb@&no-infinities-rtd q4dfd@&no-infinities-rcd q4e03@q4dfe q4e05@q4e00 q4e07@q4dff q4e0a@p? q4e0c@make-no-nans-violation q4e0e@no-nans-violation? q4e10@&no-nans-rtd q4e12@&no-nans-rcd) (begin (set! q4b54@q4b4f (make-record-type-descriptor '&condition '#f 'q4b52 '#f '#f '#())) (set! q4b56@q4b51 '#f) (set! q4b58@q4b50 (make-record-constructor-descriptor q4b54@q4b4f '#f q4b56@q4b51)) (set! q4b5b@&condition? (record-predicate q4b54@q4b4f)) (set! q4b5d@make-&condition (record-constructor q4b58@q4b50)) (set! q4b5f@&condition-rtd q4b54@q4b4f) (set! q4b61@&condition-rcd q4b58@q4b50) (set! q4bad@q4ba8 (make-record-type-descriptor '&message q4b54@q4b4f 'q4bab '#f '#f '#((immutable message)))) (set! q4baf@q4baa '#f) (set! q4bb1@q4ba9 (make-record-constructor-descriptor q4bad@q4ba8 q4b58@q4b50 q4baf@q4baa)) (set! q4bb4@p? (record-predicate q4bad@q4ba8)) (set! q4bb6@make-message-condition (record-constructor q4bb1@q4ba9)) (set! q4bb8@q4ba7 (record-accessor q4bad@q4ba8 '0)) (set! q4bba@message-condition? (condition-predicate q4bad@q4ba8)) (set! q4bbc@condition-message (condition-accessor q4bad@q4ba8 q4bb8@q4ba7)) (set! q4bbe@&message-rtd q4bad@q4ba8) (set! q4bc0@&message-rcd q4bb1@q4ba9) (set! q4bc6@q4bc1 (make-record-type-descriptor '&warning q4b54@q4b4f 'q4bc4 '#f '#f '#())) (set! q4bc8@q4bc3 '#f) (set! q4bca@q4bc2 (make-record-constructor-descriptor q4bc6@q4bc1 q4b58@q4b50 q4bc8@q4bc3)) (set! q4bcd@p? (record-predicate q4bc6@q4bc1)) (set! q4bcf@make-warning (record-constructor q4bca@q4bc2)) (set! q4bd1@warning? (condition-predicate q4bc6@q4bc1)) (set! q4bd3@&warning-rtd q4bc6@q4bc1) (set! q4bd5@&warning-rcd q4bca@q4bc2) (set! q4bdb@q4bd6 (make-record-type-descriptor '&serious q4b54@q4b4f 'q4bd9 '#f '#f '#())) (set! q4bdd@q4bd8 '#f) (set! q4bdf@q4bd7 (make-record-constructor-descriptor q4bdb@q4bd6 q4b58@q4b50 q4bdd@q4bd8)) (set! q4be2@p? (record-predicate q4bdb@q4bd6)) (set! q4be4@make-serious-condition (record-constructor q4bdf@q4bd7)) (set! q4be6@serious-condition? (condition-predicate q4bdb@q4bd6)) (set! q4be8@&serious-rtd q4bdb@q4bd6) (set! q4bea@&serious-rcd q4bdf@q4bd7) (set! q4bf0@q4beb (make-record-type-descriptor '&error q4bdb@q4bd6 'q4bee '#f '#f '#())) (set! q4bf2@q4bed '#f) (set! q4bf4@q4bec (make-record-constructor-descriptor q4bf0@q4beb q4bdf@q4bd7 q4bf2@q4bed)) (set! q4bf7@p? (record-predicate q4bf0@q4beb)) (set! q4bf9@make-error (record-constructor q4bf4@q4bec)) (set! q4bfb@error? (condition-predicate q4bf0@q4beb)) (set! q4bfd@&error-rtd q4bf0@q4beb) (set! q4bff@&error-rcd q4bf4@q4bec) (set! q4c05@q4c00 (make-record-type-descriptor '&violation q4bdb@q4bd6 'q4c03 '#f '#f '#())) (set! q4c07@q4c02 '#f) (set! q4c09@q4c01 (make-record-constructor-descriptor q4c05@q4c00 q4bdf@q4bd7 q4c07@q4c02)) (set! q4c0c@p? (record-predicate q4c05@q4c00)) (set! q4c0e@make-violation (record-constructor q4c09@q4c01)) (set! q4c10@violation? (condition-predicate q4c05@q4c00)) (set! q4c12@&violation-rtd q4c05@q4c00) (set! q4c14@&violation-rcd q4c09@q4c01) (set! q4c1a@q4c15 (make-record-type-descriptor '&assertion q4c05@q4c00 'q4c18 '#f '#f '#())) (set! q4c1c@q4c17 '#f) (set! q4c1e@q4c16 (make-record-constructor-descriptor q4c1a@q4c15 q4c09@q4c01 q4c1c@q4c17)) (set! q4c21@p? (record-predicate q4c1a@q4c15)) (set! q4c23@make-assertion-violation (record-constructor q4c1e@q4c16)) (set! q4c25@assertion-violation? (condition-predicate q4c1a@q4c15)) (set! q4c27@&assertion-rtd q4c1a@q4c15) (set! q4c29@&assertion-rcd q4c1e@q4c16) (set! q4c31@q4c2c (make-record-type-descriptor '&irritants q4b54@q4b4f 'q4c2f '#f '#f '#((immutable irritants)))) (set! q4c33@q4c2e '#f) (set! q4c35@q4c2d (make-record-constructor-descriptor q4c31@q4c2c q4b58@q4b50 q4c33@q4c2e)) (set! q4c38@p? (record-predicate q4c31@q4c2c)) (set! q4c3a@make-irritants-condition (record-constructor q4c35@q4c2d)) (set! q4c3c@q4c2b (record-accessor q4c31@q4c2c '0)) (set! q4c3e@irritants-condition? (condition-predicate q4c31@q4c2c)) (set! q4c40@condition-irritants (condition-accessor q4c31@q4c2c q4c3c@q4c2b)) (set! q4c42@&irritants-rtd q4c31@q4c2c) (set! q4c44@&irritants-rcd q4c35@q4c2d) (set! q4c4c@q4c47 (make-record-type-descriptor '&who q4b54@q4b4f 'q4c4a '#f '#f '#((immutable who)))) (set! q4c4e@q4c49 '#f) (set! q4c50@q4c48 (make-record-constructor-descriptor q4c4c@q4c47 q4b58@q4b50 q4c4e@q4c49)) (set! q4c53@p? (record-predicate q4c4c@q4c47)) (set! q4c55@make-who-condition (record-constructor q4c50@q4c48)) (set! q4c57@q4c46 (record-accessor q4c4c@q4c47 '0)) (set! q4c59@who-condition? (condition-predicate q4c4c@q4c47)) (set! q4c5b@condition-who (condition-accessor q4c4c@q4c47 q4c57@q4c46)) (set! q4c5d@&who-rtd q4c4c@q4c47) (set! q4c5f@&who-rcd q4c50@q4c48) (set! q4c65@q4c60 (make-record-type-descriptor '&non-continuable q4c05@q4c00 'q4c63 '#f '#f '#())) (set! q4c67@q4c62 '#f) (set! q4c69@q4c61 (make-record-constructor-descriptor q4c65@q4c60 q4c09@q4c01 q4c67@q4c62)) (set! q4c6c@p? (record-predicate q4c65@q4c60)) (set! q4c6e@make-non-continuable-violation (record-constructor q4c69@q4c61)) (set! q4c70@non-continuable-violation? (condition-predicate q4c65@q4c60)) (set! q4c72@&non-continuable-rtd q4c65@q4c60) (set! q4c74@&non-continuable-rcd q4c69@q4c61) (set! q4c7a@q4c75 (make-record-type-descriptor '&implementation-restriction q4c05@q4c00 'q4c78 '#f '#f '#())) (set! q4c7c@q4c77 '#f) (set! q4c7e@q4c76 (make-record-constructor-descriptor q4c7a@q4c75 q4c09@q4c01 q4c7c@q4c77)) (set! q4c81@p? (record-predicate q4c7a@q4c75)) (set! q4c83@make-implementation-restriction-violation (record-constructor q4c7e@q4c76)) (set! q4c85@implementation-restriction-violation? (condition-predicate q4c7a@q4c75)) (set! q4c87@&implementation-restriction-rtd q4c7a@q4c75) (set! q4c89@&implementation-restriction-rcd q4c7e@q4c76) (set! q4c8f@q4c8a (make-record-type-descriptor '&lexical q4c05@q4c00 'q4c8d '#f '#f '#())) (set! q4c91@q4c8c '#f) (set! q4c93@q4c8b (make-record-constructor-descriptor q4c8f@q4c8a q4c09@q4c01 q4c91@q4c8c)) (set! q4c96@p? (record-predicate q4c8f@q4c8a)) (set! q4c98@make-lexical-violation (record-constructor q4c93@q4c8b)) (set! q4c9a@lexical-violation? (condition-predicate q4c8f@q4c8a)) (set! q4c9c@&lexical-rtd q4c8f@q4c8a) (set! q4c9e@&lexical-rcd q4c93@q4c8b) (set! q4ca8@q4ca3 (make-record-type-descriptor '&syntax q4c05@q4c00 'q4ca6 '#f '#f '#((immutable form) (immutable subform)))) (set! q4caa@q4ca5 '#f) (set! q4cac@q4ca4 (make-record-constructor-descriptor q4ca8@q4ca3 q4c09@q4c01 q4caa@q4ca5)) (set! q4caf@p? (record-predicate q4ca8@q4ca3)) (set! q4cb1@make-syntax-violation (record-constructor q4cac@q4ca4)) (set! q4cb3@q4ca0 (record-accessor q4ca8@q4ca3 '0)) (set! q4cb5@q4ca2 (record-accessor q4ca8@q4ca3 '1)) (set! q4cb7@syntax-violation? (condition-predicate q4ca8@q4ca3)) (set! q4cb9@syntax-violation-form (condition-accessor q4ca8@q4ca3 q4cb3@q4ca0)) (set! q4cbb@syntax-violation-subform (condition-accessor q4ca8@q4ca3 q4cb5@q4ca2)) (set! q4cbd@&syntax-rtd q4ca8@q4ca3) (set! q4cbf@&syntax-rcd q4cac@q4ca4) (set! q4cc5@q4cc0 (make-record-type-descriptor '&undefined q4c05@q4c00 'q4cc3 '#f '#f '#())) (set! q4cc7@q4cc2 '#f) (set! q4cc9@q4cc1 (make-record-constructor-descriptor q4cc5@q4cc0 q4c09@q4c01 q4cc7@q4cc2)) (set! q4ccc@p? (record-predicate q4cc5@q4cc0)) (set! q4cce@make-undefined-violation (record-constructor q4cc9@q4cc1)) (set! q4cd0@undefined-violation? (condition-predicate q4cc5@q4cc0)) (set! q4cd2@&undefined-rtd q4cc5@q4cc0) (set! q4cd4@&undefined-rcd q4cc9@q4cc1) (set! q4cda@q4cd5 (make-record-type-descriptor '&i/o q4bf0@q4beb 'q4cd8 '#f '#f '#())) (set! q4cdc@q4cd7 '#f) (set! q4cde@q4cd6 (make-record-constructor-descriptor q4cda@q4cd5 q4bf4@q4bec q4cdc@q4cd7)) (set! q4ce1@p? (record-predicate q4cda@q4cd5)) (set! q4ce3@make-i/o-error (record-constructor q4cde@q4cd6)) (set! q4ce5@i/o-error? (condition-predicate q4cda@q4cd5)) (set! q4ce7@&i/o-rtd q4cda@q4cd5) (set! q4ce9@&i/o-rcd q4cde@q4cd6) (set! q4cef@q4cea (make-record-type-descriptor '&i/o-read q4cda@q4cd5 'q4ced '#f '#f '#())) (set! q4cf1@q4cec '#f) (set! q4cf3@q4ceb (make-record-constructor-descriptor q4cef@q4cea q4cde@q4cd6 q4cf1@q4cec)) (set! q4cf6@p? (record-predicate q4cef@q4cea)) (set! q4cf8@make-i/o-read-error (record-constructor q4cf3@q4ceb)) (set! q4cfa@i/o-read-error? (condition-predicate q4cef@q4cea)) (set! q4cfc@&i/o-read-rtd q4cef@q4cea) (set! q4cfe@&i/o-read-rcd q4cf3@q4ceb) (set! q4d04@q4cff (make-record-type-descriptor '&i/o-write q4cda@q4cd5 'q4d02 '#f '#f '#())) (set! q4d06@q4d01 '#f) (set! q4d08@q4d00 (make-record-constructor-descriptor q4d04@q4cff q4cde@q4cd6 q4d06@q4d01)) (set! q4d0b@p? (record-predicate q4d04@q4cff)) (set! q4d0d@make-i/o-write-error (record-constructor q4d08@q4d00)) (set! q4d0f@i/o-write-error? (condition-predicate q4d04@q4cff)) (set! q4d11@&i/o-write-rtd q4d04@q4cff) (set! q4d13@&i/o-write-rcd q4d08@q4d00) (set! q4d1b@q4d16 (make-record-type-descriptor '&i/o-invalid-position q4cda@q4cd5 'q4d19 '#f '#f '#((immutable position)))) (set! q4d1d@q4d18 '#f) (set! q4d1f@q4d17 (make-record-constructor-descriptor q4d1b@q4d16 q4cde@q4cd6 q4d1d@q4d18)) (set! q4d22@p? (record-predicate q4d1b@q4d16)) (set! q4d24@make-i/o-invalid-position-error (record-constructor q4d1f@q4d17)) (set! q4d26@q4d15 (record-accessor q4d1b@q4d16 '0)) (set! q4d28@i/o-invalid-position-error? (condition-predicate q4d1b@q4d16)) (set! q4d2a@i/o-error-position (condition-accessor q4d1b@q4d16 q4d26@q4d15)) (set! q4d2c@&i/o-invalid-position-rtd q4d1b@q4d16) (set! q4d2e@&i/o-invalid-position-rcd q4d1f@q4d17) (set! q4d36@q4d31 (make-record-type-descriptor '&i/o-filename q4cda@q4cd5 'q4d34 '#f '#f '#((immutable filename)))) (set! q4d38@q4d33 '#f) (set! q4d3a@q4d32 (make-record-constructor-descriptor q4d36@q4d31 q4cde@q4cd6 q4d38@q4d33)) (set! q4d3d@p? (record-predicate q4d36@q4d31)) (set! q4d3f@make-i/o-filename-error (record-constructor q4d3a@q4d32)) (set! q4d41@q4d30 (record-accessor q4d36@q4d31 '0)) (set! q4d43@i/o-filename-error? (condition-predicate q4d36@q4d31)) (set! q4d45@i/o-error-filename (condition-accessor q4d36@q4d31 q4d41@q4d30)) (set! q4d47@&i/o-filename-rtd q4d36@q4d31) (set! q4d49@&i/o-filename-rcd q4d3a@q4d32) (set! q4d4f@q4d4a (make-record-type-descriptor '&i/o-file-protection q4d36@q4d31 'q4d4d '#f '#f '#())) (set! q4d51@q4d4c '#f) (set! q4d53@q4d4b (make-record-constructor-descriptor q4d4f@q4d4a q4d3a@q4d32 q4d51@q4d4c)) (set! q4d56@p? (record-predicate q4d4f@q4d4a)) (set! q4d58@make-i/o-file-protection-error (record-constructor q4d53@q4d4b)) (set! q4d5a@i/o-file-protection-error? (condition-predicate q4d4f@q4d4a)) (set! q4d5c@&i/o-file-protection-rtd q4d4f@q4d4a) (set! q4d5e@&i/o-file-protection-rcd q4d53@q4d4b) (set! q4d64@q4d5f (make-record-type-descriptor '&i/o-file-is-read-only q4d4f@q4d4a 'q4d62 '#f '#f '#())) (set! q4d66@q4d61 '#f) (set! q4d68@q4d60 (make-record-constructor-descriptor q4d64@q4d5f q4d53@q4d4b q4d66@q4d61)) (set! q4d6b@p? (record-predicate q4d64@q4d5f)) (set! q4d6d@make-i/o-file-is-read-only-error (record-constructor q4d68@q4d60)) (set! q4d6f@i/o-file-is-read-only-error? (condition-predicate q4d64@q4d5f)) (set! q4d71@&i/o-file-is-read-only-rtd q4d64@q4d5f) (set! q4d73@&i/o-file-is-read-only-rcd q4d68@q4d60) (set! q4d79@q4d74 (make-record-type-descriptor '&i/o-file-already-exists q4d36@q4d31 'q4d77 '#f '#f '#())) (set! q4d7b@q4d76 '#f) (set! q4d7d@q4d75 (make-record-constructor-descriptor q4d79@q4d74 q4d3a@q4d32 q4d7b@q4d76)) (set! q4d80@p? (record-predicate q4d79@q4d74)) (set! q4d82@make-i/o-file-already-exists-error (record-constructor q4d7d@q4d75)) (set! q4d84@i/o-file-already-exists-error? (condition-predicate q4d79@q4d74)) (set! q4d86@&i/o-file-already-exists-rtd q4d79@q4d74) (set! q4d88@&i/o-file-already-exists-rcd q4d7d@q4d75) (set! q4d8e@q4d89 (make-record-type-descriptor '&i/o-file-does-not-exist q4d36@q4d31 'q4d8c '#f '#f '#())) (set! q4d90@q4d8b '#f) (set! q4d92@q4d8a (make-record-constructor-descriptor q4d8e@q4d89 q4d3a@q4d32 q4d90@q4d8b)) (set! q4d95@p? (record-predicate q4d8e@q4d89)) (set! q4d97@make-i/o-file-does-not-exist-error (record-constructor q4d92@q4d8a)) (set! q4d99@i/o-file-does-not-exist-error? (condition-predicate q4d8e@q4d89)) (set! q4d9b@&i/o-file-does-not-exist-rtd q4d8e@q4d89) (set! q4d9d@&i/o-file-does-not-exist-rcd q4d92@q4d8a) (set! q4da5@q4da0 (make-record-type-descriptor '&i/o-port q4cda@q4cd5 'q4da3 '#f '#f '#((immutable port)))) (set! q4da7@q4da2 '#f) (set! q4da9@q4da1 (make-record-constructor-descriptor q4da5@q4da0 q4cde@q4cd6 q4da7@q4da2)) (set! q4dac@p? (record-predicate q4da5@q4da0)) (set! q4dae@make-i/o-port-error (record-constructor q4da9@q4da1)) (set! q4db0@q4d9f (record-accessor q4da5@q4da0 '0)) (set! q4db2@i/o-port-error? (condition-predicate q4da5@q4da0)) (set! q4db4@i/o-error-port (condition-accessor q4da5@q4da0 q4db0@q4d9f)) (set! q4db6@&i/o-port-rtd q4da5@q4da0) (set! q4db8@&i/o-port-rcd q4da9@q4da1) (set! q4dbe@q4db9 (make-record-type-descriptor '&i/o-decoding q4da5@q4da0 'q4dbc '#f '#f '#())) (set! q4dc0@q4dbb '#f) (set! q4dc2@q4dba (make-record-constructor-descriptor q4dbe@q4db9 q4da9@q4da1 q4dc0@q4dbb)) (set! q4dc5@p? (record-predicate q4dbe@q4db9)) (set! q4dc7@make-i/o-decoding-error (record-constructor q4dc2@q4dba)) (set! q4dc9@i/o-decoding-error? (condition-predicate q4dbe@q4db9)) (set! q4dcb@&i/o-decoding-rtd q4dbe@q4db9) (set! q4dcd@&i/o-decoding-rcd q4dc2@q4dba) (set! q4dd5@q4dd0 (make-record-type-descriptor '&i/o-encoding q4da5@q4da0 'q4dd3 '#f '#f '#((immutable char)))) (set! q4dd7@q4dd2 '#f) (set! q4dd9@q4dd1 (make-record-constructor-descriptor q4dd5@q4dd0 q4da9@q4da1 q4dd7@q4dd2)) (set! q4ddc@p? (record-predicate q4dd5@q4dd0)) (set! q4dde@make-i/o-encoding-error (record-constructor q4dd9@q4dd1)) (set! q4de0@q4dcf (record-accessor q4dd5@q4dd0 '0)) (set! q4de2@i/o-encoding-error? (condition-predicate q4dd5@q4dd0)) (set! q4de4@i/o-encoding-error-char (condition-accessor q4dd5@q4dd0 q4de0@q4dcf)) (set! q4de6@&i/o-encoding-rtd q4dd5@q4dd0) (set! q4de8@&i/o-encoding-rcd q4dd9@q4dd1) (set! q4dee@q4de9 (make-record-type-descriptor '&no-infinities q4c7a@q4c75 'q4dec '#f '#f '#())) (set! q4df0@q4deb '#f) (set! q4df2@q4dea (make-record-constructor-descriptor q4dee@q4de9 q4c7e@q4c76 q4df0@q4deb)) (set! q4df5@p? (record-predicate q4dee@q4de9)) (set! q4df7@make-no-infinities-violation (record-constructor q4df2@q4dea)) (set! q4df9@no-infinities-violation? (condition-predicate q4dee@q4de9)) (set! q4dfb@&no-infinities-rtd q4dee@q4de9) (set! q4dfd@&no-infinities-rcd q4df2@q4dea) (set! q4e03@q4dfe (make-record-type-descriptor '&no-nans q4c7a@q4c75 'q4e01 '#f '#f '#())) (set! q4e05@q4e00 '#f) (set! q4e07@q4dff (make-record-constructor-descriptor q4e03@q4dfe q4c7e@q4c76 q4e05@q4e00)) (set! q4e0a@p? (record-predicate q4e03@q4dfe)) (set! q4e0c@make-no-nans-violation (record-constructor q4e07@q4dff)) (set! q4e0e@no-nans-violation? (condition-predicate q4e03@q4dfe)) (set! q4e10@&no-nans-rtd q4e03@q4dfe) (set! q4e12@&no-nans-rcd q4e07@q4dff) (begin (set! q4f03@q4e12@&no-nans-rcd q4e12@&no-nans-rcd) (set! q4f02@q4e10@&no-nans-rtd q4e10@&no-nans-rtd) (set! q4f01@q4e0e@no-nans-violation? q4e0e@no-nans-violation?) (set! q4f00@q4e0c@make-no-nans-violation q4e0c@make-no-nans-violation) (set! q4eff@q4e0a@p? q4e0a@p?) (set! q4efe@q4e07@q4dff q4e07@q4dff) (set! q4efd@q4e05@q4e00 q4e05@q4e00) (set! q4efc@q4e03@q4dfe q4e03@q4dfe) (set! q4efb@q4dfd@&no-infinities-rcd q4dfd@&no-infinities-rcd) (set! q4efa@q4dfb@&no-infinities-rtd q4dfb@&no-infinities-rtd) (set! q4ef9@q4df9@no-infinities-violation? q4df9@no-infinities-violation?) (set! q4ef8@q4df7@make-no-infinities-violation q4df7@make-no-infinities-violation) (set! q4ef7@q4df5@p? q4df5@p?) (set! q4ef6@q4df2@q4dea q4df2@q4dea) (set! q4ef5@q4df0@q4deb q4df0@q4deb) (set! q4ef4@q4dee@q4de9 q4dee@q4de9) (set! q4ef3@q4de8@&i/o-encoding-rcd q4de8@&i/o-encoding-rcd) (set! q4ef2@q4de6@&i/o-encoding-rtd q4de6@&i/o-encoding-rtd) (set! q4ef1@q4de4@i/o-encoding-error-char q4de4@i/o-encoding-error-char) (set! q4ef0@q4de2@i/o-encoding-error? q4de2@i/o-encoding-error?) (set! q4eef@q4de0@q4dcf q4de0@q4dcf) (set! q4eee@q4dde@make-i/o-encoding-error q4dde@make-i/o-encoding-error) (set! q4eed@q4ddc@p? q4ddc@p?) (set! q4eec@q4dd9@q4dd1 q4dd9@q4dd1) (set! q4eeb@q4dd7@q4dd2 q4dd7@q4dd2) (set! q4eea@q4dd5@q4dd0 q4dd5@q4dd0) (set! q4ee9@q4dcd@&i/o-decoding-rcd q4dcd@&i/o-decoding-rcd) (set! q4ee8@q4dcb@&i/o-decoding-rtd q4dcb@&i/o-decoding-rtd) (set! q4ee7@q4dc9@i/o-decoding-error? q4dc9@i/o-decoding-error?) (set! q4ee6@q4dc7@make-i/o-decoding-error q4dc7@make-i/o-decoding-error) (set! q4ee5@q4dc5@p? q4dc5@p?) (set! q4ee4@q4dc2@q4dba q4dc2@q4dba) (set! q4ee3@q4dc0@q4dbb q4dc0@q4dbb) (set! q4ee2@q4dbe@q4db9 q4dbe@q4db9) (set! q4ee1@q4db8@&i/o-port-rcd q4db8@&i/o-port-rcd) (set! q4ee0@q4db6@&i/o-port-rtd q4db6@&i/o-port-rtd) (set! q4edf@q4db4@i/o-error-port q4db4@i/o-error-port) (set! q4ede@q4db2@i/o-port-error? q4db2@i/o-port-error?) (set! q4edd@q4db0@q4d9f q4db0@q4d9f) (set! q4edc@q4dae@make-i/o-port-error q4dae@make-i/o-port-error) (set! q4edb@q4dac@p? q4dac@p?) (set! q4eda@q4da9@q4da1 q4da9@q4da1) (set! q4ed9@q4da7@q4da2 q4da7@q4da2) (set! q4ed8@q4da5@q4da0 q4da5@q4da0) (set! q4ed7@q4d9d@&i/o-file-does-not-exist-rcd q4d9d@&i/o-file-does-not-exist-rcd) (set! q4ed6@q4d9b@&i/o-file-does-not-exist-rtd q4d9b@&i/o-file-does-not-exist-rtd) (set! q4ed5@q4d99@i/o-file-does-not-exist-error? q4d99@i/o-file-does-not-exist-error?) (set! q4ed4@q4d97@make-i/o-file-does-not-exist-error q4d97@make-i/o-file-does-not-exist-error) (set! q4ed3@q4d95@p? q4d95@p?) (set! q4ed2@q4d92@q4d8a q4d92@q4d8a) (set! q4ed1@q4d90@q4d8b q4d90@q4d8b) (set! q4ed0@q4d8e@q4d89 q4d8e@q4d89) (set! q4ecf@q4d88@&i/o-file-already-exists-rcd q4d88@&i/o-file-already-exists-rcd) (set! q4ece@q4d86@&i/o-file-already-exists-rtd q4d86@&i/o-file-already-exists-rtd) (set! q4ecd@q4d84@i/o-file-already-exists-error? q4d84@i/o-file-already-exists-error?) (set! q4ecc@q4d82@make-i/o-file-already-exists-error q4d82@make-i/o-file-already-exists-error) (set! q4ecb@q4d80@p? q4d80@p?) (set! q4eca@q4d7d@q4d75 q4d7d@q4d75) (set! q4ec9@q4d7b@q4d76 q4d7b@q4d76) (set! q4ec8@q4d79@q4d74 q4d79@q4d74) (set! q4ec7@q4d73@&i/o-file-is-read-only-rcd q4d73@&i/o-file-is-read-only-rcd) (set! q4ec6@q4d71@&i/o-file-is-read-only-rtd q4d71@&i/o-file-is-read-only-rtd) (set! q4ec5@q4d6f@i/o-file-is-read-only-error? q4d6f@i/o-file-is-read-only-error?) (set! q4ec4@q4d6d@make-i/o-file-is-read-only-error q4d6d@make-i/o-file-is-read-only-error) (set! q4ec3@q4d6b@p? q4d6b@p?) (set! q4ec2@q4d68@q4d60 q4d68@q4d60) (set! q4ec1@q4d66@q4d61 q4d66@q4d61) (set! q4ec0@q4d64@q4d5f q4d64@q4d5f) (set! q4ebf@q4d5e@&i/o-file-protection-rcd q4d5e@&i/o-file-protection-rcd) (set! q4ebe@q4d5c@&i/o-file-protection-rtd q4d5c@&i/o-file-protection-rtd) (set! q4ebd@q4d5a@i/o-file-protection-error? q4d5a@i/o-file-protection-error?) (set! q4ebc@q4d58@make-i/o-file-protection-error q4d58@make-i/o-file-protection-error) (set! q4ebb@q4d56@p? q4d56@p?) (set! q4eba@q4d53@q4d4b q4d53@q4d4b) (set! q4eb9@q4d51@q4d4c q4d51@q4d4c) (set! q4eb8@q4d4f@q4d4a q4d4f@q4d4a) (set! q4eb7@q4d49@&i/o-filename-rcd q4d49@&i/o-filename-rcd) (set! q4eb6@q4d47@&i/o-filename-rtd q4d47@&i/o-filename-rtd) (set! q4eb5@q4d45@i/o-error-filename q4d45@i/o-error-filename) (set! q4eb4@q4d43@i/o-filename-error? q4d43@i/o-filename-error?) (set! q4eb3@q4d41@q4d30 q4d41@q4d30) (set! q4eb2@q4d3f@make-i/o-filename-error q4d3f@make-i/o-filename-error) (set! q4eb1@q4d3d@p? q4d3d@p?) (set! q4eb0@q4d3a@q4d32 q4d3a@q4d32) (set! q4eaf@q4d38@q4d33 q4d38@q4d33) (set! q4eae@q4d36@q4d31 q4d36@q4d31) (set! q4ead@q4d2e@&i/o-invalid-position-rcd q4d2e@&i/o-invalid-position-rcd) (set! q4eac@q4d2c@&i/o-invalid-position-rtd q4d2c@&i/o-invalid-position-rtd) (set! q4eab@q4d2a@i/o-error-position q4d2a@i/o-error-position) (set! q4eaa@q4d28@i/o-invalid-position-error? q4d28@i/o-invalid-position-error?) (set! q4ea9@q4d26@q4d15 q4d26@q4d15) (set! q4ea8@q4d24@make-i/o-invalid-position-error q4d24@make-i/o-invalid-position-error) (set! q4ea7@q4d22@p? q4d22@p?) (set! q4ea6@q4d1f@q4d17 q4d1f@q4d17) (set! q4ea5@q4d1d@q4d18 q4d1d@q4d18) (set! q4ea4@q4d1b@q4d16 q4d1b@q4d16) (set! q4ea3@q4d13@&i/o-write-rcd q4d13@&i/o-write-rcd) (set! q4ea2@q4d11@&i/o-write-rtd q4d11@&i/o-write-rtd) (set! q4ea1@q4d0f@i/o-write-error? q4d0f@i/o-write-error?) (set! q4ea0@q4d0d@make-i/o-write-error q4d0d@make-i/o-write-error) (set! q4e9f@q4d0b@p? q4d0b@p?) (set! q4e9e@q4d08@q4d00 q4d08@q4d00) (set! q4e9d@q4d06@q4d01 q4d06@q4d01) (set! q4e9c@q4d04@q4cff q4d04@q4cff) (set! q4e9b@q4cfe@&i/o-read-rcd q4cfe@&i/o-read-rcd) (set! q4e9a@q4cfc@&i/o-read-rtd q4cfc@&i/o-read-rtd) (set! q4e99@q4cfa@i/o-read-error? q4cfa@i/o-read-error?) (set! q4e98@q4cf8@make-i/o-read-error q4cf8@make-i/o-read-error) (set! q4e97@q4cf6@p? q4cf6@p?) (set! q4e96@q4cf3@q4ceb q4cf3@q4ceb) (set! q4e95@q4cf1@q4cec q4cf1@q4cec) (set! q4e94@q4cef@q4cea q4cef@q4cea) (set! q4e93@q4ce9@&i/o-rcd q4ce9@&i/o-rcd) (set! q4e92@q4ce7@&i/o-rtd q4ce7@&i/o-rtd) (set! q4e91@q4ce5@i/o-error? q4ce5@i/o-error?) (set! q4e90@q4ce3@make-i/o-error q4ce3@make-i/o-error) (set! q4e8f@q4ce1@p? q4ce1@p?) (set! q4e8e@q4cde@q4cd6 q4cde@q4cd6) (set! q4e8d@q4cdc@q4cd7 q4cdc@q4cd7) (set! q4e8c@q4cda@q4cd5 q4cda@q4cd5) (set! q4e8b@q4cd4@&undefined-rcd q4cd4@&undefined-rcd) (set! q4e8a@q4cd2@&undefined-rtd q4cd2@&undefined-rtd) (set! q4e89@q4cd0@undefined-violation? q4cd0@undefined-violation?) (set! q4e88@q4cce@make-undefined-violation q4cce@make-undefined-violation) (set! q4e87@q4ccc@p? q4ccc@p?) (set! q4e86@q4cc9@q4cc1 q4cc9@q4cc1) (set! q4e85@q4cc7@q4cc2 q4cc7@q4cc2) (set! q4e84@q4cc5@q4cc0 q4cc5@q4cc0) (set! q4e83@q4cbf@&syntax-rcd q4cbf@&syntax-rcd) (set! q4e82@q4cbd@&syntax-rtd q4cbd@&syntax-rtd) (set! q4e81@q4cbb@syntax-violation-subform q4cbb@syntax-violation-subform) (set! q4e80@q4cb9@syntax-violation-form q4cb9@syntax-violation-form) (set! q4e7f@q4cb7@syntax-violation? q4cb7@syntax-violation?) (set! q4e7e@q4cb5@q4ca2 q4cb5@q4ca2) (set! q4e7d@q4cb3@q4ca0 q4cb3@q4ca0) (set! q4e7c@q4cb1@make-syntax-violation q4cb1@make-syntax-violation) (set! q4e7b@q4caf@p? q4caf@p?) (set! q4e7a@q4cac@q4ca4 q4cac@q4ca4) (set! q4e79@q4caa@q4ca5 q4caa@q4ca5) (set! q4e78@q4ca8@q4ca3 q4ca8@q4ca3) (set! q4e77@q4c9e@&lexical-rcd q4c9e@&lexical-rcd) (set! q4e76@q4c9c@&lexical-rtd q4c9c@&lexical-rtd) (set! q4e75@q4c9a@lexical-violation? q4c9a@lexical-violation?) (set! q4e74@q4c98@make-lexical-violation q4c98@make-lexical-violation) (set! q4e73@q4c96@p? q4c96@p?) (set! q4e72@q4c93@q4c8b q4c93@q4c8b) (set! q4e71@q4c91@q4c8c q4c91@q4c8c) (set! q4e70@q4c8f@q4c8a q4c8f@q4c8a) (set! q4e6f@q4c89@&implementation-restriction-rcd q4c89@&implementation-restriction-rcd) (set! q4e6e@q4c87@&implementation-restriction-rtd q4c87@&implementation-restriction-rtd) (set! q4e6d@q4c85@implementation-restriction-violation? q4c85@implementation-restriction-violation?) (set! q4e6c@q4c83@make-implementation-restriction-violation q4c83@make-implementation-restriction-violation) (set! q4e6b@q4c81@p? q4c81@p?) (set! q4e6a@q4c7e@q4c76 q4c7e@q4c76) (set! q4e69@q4c7c@q4c77 q4c7c@q4c77) (set! q4e68@q4c7a@q4c75 q4c7a@q4c75) (set! q4e67@q4c74@&non-continuable-rcd q4c74@&non-continuable-rcd) (set! q4e66@q4c72@&non-continuable-rtd q4c72@&non-continuable-rtd) (set! q4e65@q4c70@non-continuable-violation? q4c70@non-continuable-violation?) (set! q4e64@q4c6e@make-non-continuable-violation q4c6e@make-non-continuable-violation) (set! q4e63@q4c6c@p? q4c6c@p?) (set! q4e62@q4c69@q4c61 q4c69@q4c61) (set! q4e61@q4c67@q4c62 q4c67@q4c62) (set! q4e60@q4c65@q4c60 q4c65@q4c60) (set! q4e5f@q4c5f@&who-rcd q4c5f@&who-rcd) (set! q4e5e@q4c5d@&who-rtd q4c5d@&who-rtd) (set! q4e5d@q4c5b@condition-who q4c5b@condition-who) (set! q4e5c@q4c59@who-condition? q4c59@who-condition?) (set! q4e5b@q4c57@q4c46 q4c57@q4c46) (set! q4e5a@q4c55@make-who-condition q4c55@make-who-condition) (set! q4e59@q4c53@p? q4c53@p?) (set! q4e58@q4c50@q4c48 q4c50@q4c48) (set! q4e57@q4c4e@q4c49 q4c4e@q4c49) (set! q4e56@q4c4c@q4c47 q4c4c@q4c47) (set! q4e55@q4c44@&irritants-rcd q4c44@&irritants-rcd) (set! q4e54@q4c42@&irritants-rtd q4c42@&irritants-rtd) (set! q4e53@q4c40@condition-irritants q4c40@condition-irritants) (set! q4e52@q4c3e@irritants-condition? q4c3e@irritants-condition?) (set! q4e51@q4c3c@q4c2b q4c3c@q4c2b) (set! q4e50@q4c3a@make-irritants-condition q4c3a@make-irritants-condition) (set! q4e4f@q4c38@p? q4c38@p?) (set! q4e4e@q4c35@q4c2d q4c35@q4c2d) (set! q4e4d@q4c33@q4c2e q4c33@q4c2e) (set! q4e4c@q4c31@q4c2c q4c31@q4c2c) (set! q4e4b@q4c29@&assertion-rcd q4c29@&assertion-rcd) (set! q4e4a@q4c27@&assertion-rtd q4c27@&assertion-rtd) (set! q4e49@q4c25@assertion-violation? q4c25@assertion-violation?) (set! q4e48@q4c23@make-assertion-violation q4c23@make-assertion-violation) (set! q4e47@q4c21@p? q4c21@p?) (set! q4e46@q4c1e@q4c16 q4c1e@q4c16) (set! q4e45@q4c1c@q4c17 q4c1c@q4c17) (set! q4e44@q4c1a@q4c15 q4c1a@q4c15) (set! q4e43@q4c14@&violation-rcd q4c14@&violation-rcd) (set! q4e42@q4c12@&violation-rtd q4c12@&violation-rtd) (set! q4e41@q4c10@violation? q4c10@violation?) (set! q4e40@q4c0e@make-violation q4c0e@make-violation) (set! q4e3f@q4c0c@p? q4c0c@p?) (set! q4e3e@q4c09@q4c01 q4c09@q4c01) (set! q4e3d@q4c07@q4c02 q4c07@q4c02) (set! q4e3c@q4c05@q4c00 q4c05@q4c00) (set! q4e3b@q4bff@&error-rcd q4bff@&error-rcd) (set! q4e3a@q4bfd@&error-rtd q4bfd@&error-rtd) (set! q4e39@q4bfb@error? q4bfb@error?) (set! q4e38@q4bf9@make-error q4bf9@make-error) (set! q4e37@q4bf7@p? q4bf7@p?) (set! q4e36@q4bf4@q4bec q4bf4@q4bec) (set! q4e35@q4bf2@q4bed q4bf2@q4bed) (set! q4e34@q4bf0@q4beb q4bf0@q4beb) (set! q4e33@q4bea@&serious-rcd q4bea@&serious-rcd) (set! q4e32@q4be8@&serious-rtd q4be8@&serious-rtd) (set! q4e31@q4be6@serious-condition? q4be6@serious-condition?) (set! q4e30@q4be4@make-serious-condition q4be4@make-serious-condition) (set! q4e2f@q4be2@p? q4be2@p?) (set! q4e2e@q4bdf@q4bd7 q4bdf@q4bd7) (set! q4e2d@q4bdd@q4bd8 q4bdd@q4bd8) (set! q4e2c@q4bdb@q4bd6 q4bdb@q4bd6) (set! q4e2b@q4bd5@&warning-rcd q4bd5@&warning-rcd) (set! q4e2a@q4bd3@&warning-rtd q4bd3@&warning-rtd) (set! q4e29@q4bd1@warning? q4bd1@warning?) (set! q4e28@q4bcf@make-warning q4bcf@make-warning) (set! q4e27@q4bcd@p? q4bcd@p?) (set! q4e26@q4bca@q4bc2 q4bca@q4bc2) (set! q4e25@q4bc8@q4bc3 q4bc8@q4bc3) (set! q4e24@q4bc6@q4bc1 q4bc6@q4bc1) (set! q4e23@q4bc0@&message-rcd q4bc0@&message-rcd) (set! q4e22@q4bbe@&message-rtd q4bbe@&message-rtd) (set! q4e21@q4bbc@condition-message q4bbc@condition-message) (set! q4e20@q4bba@message-condition? q4bba@message-condition?) (set! q4e1f@q4bb8@q4ba7 q4bb8@q4ba7) (set! q4e1e@q4bb6@make-message-condition q4bb6@make-message-condition) (set! q4e1d@q4bb4@p? q4bb4@p?) (set! q4e1c@q4bb1@q4ba9 q4bb1@q4ba9) (set! q4e1b@q4baf@q4baa q4baf@q4baa) (set! q4e1a@q4bad@q4ba8 q4bad@q4ba8) (set! q4e19@q4b61@&condition-rcd q4b61@&condition-rcd) (set! q4e18@q4b5f@&condition-rtd q4b5f@&condition-rtd) (set! q4e17@q4b5d@make-&condition q4b5d@make-&condition) (set! q4e16@q4b5b@&condition? q4b5b@&condition?) (set! q4e15@q4b58@q4b50 q4b58@q4b50) (set! q4e14@q4b56@q4b51 q4b56@q4b51) (set! q4e13@q4b54@q4b4f q4b54@q4b4f)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (q29f6@q29ab@current-primitive-locations (lambda (q53dd@x) ((lambda (q53df@t) (if q53df@t (cdr q53df@t) '#f)) (assq q53dd@x '((&no-nans-rcd . q4f03@q4e12@&no-nans-rcd) (&no-nans-rtd . q4f02@q4e10@&no-nans-rtd) (&no-infinities-rcd . q4efb@q4dfd@&no-infinities-rcd) (&no-infinities-rtd . q4efa@q4dfb@&no-infinities-rtd) (&i/o-encoding-rcd . q4ef3@q4de8@&i/o-encoding-rcd) (&i/o-encoding-rtd . q4ef2@q4de6@&i/o-encoding-rtd) (&i/o-decoding-rcd . q4ee9@q4dcd@&i/o-decoding-rcd) (&i/o-decoding-rtd . q4ee8@q4dcb@&i/o-decoding-rtd) (&i/o-port-rcd . q4ee1@q4db8@&i/o-port-rcd) (&i/o-port-rtd . q4ee0@q4db6@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . q4ed7@q4d9d@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . q4ed6@q4d9b@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . q4ecf@q4d88@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . q4ece@q4d86@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . q4ec7@q4d73@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . q4ec6@q4d71@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . q4ebf@q4d5e@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . q4ebe@q4d5c@&i/o-file-protection-rtd) (&i/o-filename-rcd . q4eb7@q4d49@&i/o-filename-rcd) (&i/o-filename-rtd . q4eb6@q4d47@&i/o-filename-rtd) (&i/o-invalid-position-rcd . q4ead@q4d2e@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . q4eac@q4d2c@&i/o-invalid-position-rtd) (&i/o-write-rcd . q4ea3@q4d13@&i/o-write-rcd) (&i/o-write-rtd . q4ea2@q4d11@&i/o-write-rtd) (&i/o-read-rcd . q4e9b@q4cfe@&i/o-read-rcd) (&i/o-read-rtd . q4e9a@q4cfc@&i/o-read-rtd) (&i/o-rcd . q4e93@q4ce9@&i/o-rcd) (&i/o-rtd . q4e92@q4ce7@&i/o-rtd) (&undefined-rcd . q4e8b@q4cd4@&undefined-rcd) (&undefined-rtd . q4e8a@q4cd2@&undefined-rtd) (&syntax-rcd . q4e83@q4cbf@&syntax-rcd) (&syntax-rtd . q4e82@q4cbd@&syntax-rtd) (&lexical-rcd . q4e77@q4c9e@&lexical-rcd) (&lexical-rtd . q4e76@q4c9c@&lexical-rtd) (&implementation-restriction-rcd . q4e6f@q4c89@&implementation-restriction-rcd) (&implementation-restriction-rtd . q4e6e@q4c87@&implementation-restriction-rtd) (&non-continuable-rcd . q4e67@q4c74@&non-continuable-rcd) (&non-continuable-rtd . q4e66@q4c72@&non-continuable-rtd) (&who-rcd . q4e5f@q4c5f@&who-rcd) (&who-rtd . q4e5e@q4c5d@&who-rtd) (&irritants-rcd . q4e55@q4c44@&irritants-rcd) (&irritants-rtd . q4e54@q4c42@&irritants-rtd) (&assertion-rcd . q4e4b@q4c29@&assertion-rcd) (&assertion-rtd . q4e4a@q4c27@&assertion-rtd) (&violation-rcd . q4e43@q4c14@&violation-rcd) (&violation-rtd . q4e42@q4c12@&violation-rtd) (&error-rcd . q4e3b@q4bff@&error-rcd) (&error-rtd . q4e3a@q4bfd@&error-rtd) (&serious-rcd . q4e33@q4bea@&serious-rcd) (&serious-rtd . q4e32@q4be8@&serious-rtd) (&warning-rcd . q4e2b@q4bd5@&warning-rcd) (&warning-rtd . q4e2a@q4bd3@&warning-rtd) (&message-rcd . q4e23@q4bc0@&message-rcd) (&message-rtd . q4e22@q4bbe@&message-rtd) (&condition-rcd . q4e19@q4b61@&condition-rcd) (&condition-rtd . q4e18@q4b5f@&condition-rtd) (syntax-error . q4b3c@q3125@syntax-error) (syntax-dispatch . q4ada@q3049@syntax-dispatch) (load . q508a@q4f1f@load) (interaction-environment . q4b44@q3135@interaction-environment) (library-path . q2c5d@q2a99@library-path) (mosh-cache-dir . q29a4@q2884@mosh-cache-dir) (make-parameter . q29a3@q2882@make-parameter) (make-variable-transformer . q4a98@q2e76@make-variable-transformer) (identifier? . q4b3f@q312b@identifier?) (generate-temporaries . q4b35@q3117@generate-temporaries) (free-identifier=? . q4b36@q3119@free-identifier=?) (syntax->datum . q4b41@q312f@syntax->datum) (datum->syntax . q4b40@q312d@datum->syntax) (bound-identifier=? . q4b37@q311b@bound-identifier=?) (make-i/o-write-error . q4ea0@q4d0d@make-i/o-write-error) (make-i/o-read-error . q4e98@q4cf8@make-i/o-read-error) (make-i/o-port-error . q4edc@q4dae@make-i/o-port-error) (make-i/o-invalid-position-error . q4ea8@q4d24@make-i/o-invalid-position-error) (make-i/o-filename-error . q4eb2@q4d3f@make-i/o-filename-error) (make-i/o-file-protection-error . q4ebc@q4d58@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . q4ec4@q4d6d@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . q4ed4@q4d97@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . q4ecc@q4d82@make-i/o-file-already-exists-error) (make-i/o-error . q4e90@q4ce3@make-i/o-error) (make-i/o-encoding-error . q4eee@q4dde@make-i/o-encoding-error) (make-i/o-decoding-error . q4ee6@q4dc7@make-i/o-decoding-error) (i/o-write-error? . q4ea1@q4d0f@i/o-write-error?) (i/o-read-error? . q4e99@q4cfa@i/o-read-error?) (i/o-port-error? . q4ede@q4db2@i/o-port-error?) (i/o-invalid-position-error? . q4eaa@q4d28@i/o-invalid-position-error?) (i/o-filename-error? . q4eb4@q4d43@i/o-filename-error?) (i/o-file-protection-error? . q4ebd@q4d5a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . q4ec5@q4d6f@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . q4ed5@q4d99@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . q4ecd@q4d84@i/o-file-already-exists-error?) (i/o-error? . q4e91@q4ce5@i/o-error?) (i/o-error-position . q4eab@q4d2a@i/o-error-position) (i/o-error-port . q4edf@q4db4@i/o-error-port) (i/o-error-filename . q4eb5@q4d45@i/o-error-filename) (i/o-encoding-error? . q4ef0@q4de2@i/o-encoding-error?) (i/o-encoding-error-char . q4ef1@q4de4@i/o-encoding-error-char) (i/o-decoding-error? . q4ee7@q4dc9@i/o-decoding-error?) (scheme-report-environment . q4b2c@q3105@scheme-report-environment) (null-environment . q4b2b@q3103@null-environment) (command-line . q5087@q4f19@command-line) (eval . q4b2e@q3109@eval) (environment . q4b2a@q3101@environment) (who-condition? . q4e5c@q4c59@who-condition?) (warning? . q4e29@q4bd1@warning?) (violation? . q4e41@q4c10@violation?) (undefined-violation? . q4e89@q4cd0@undefined-violation?) (syntax-violation? . q4e7f@q4cb7@syntax-violation?) (syntax-violation-subform . q4e81@q4cbb@syntax-violation-subform) (syntax-violation-form . q4e80@q4cb9@syntax-violation-form) (syntax-violation . q4b3e@q3129@syntax-violation) (serious-condition? . q4e31@q4be6@serious-condition?) (non-continuable-violation? . q4e65@q4c70@non-continuable-violation?) (message-condition? . q4e20@q4bba@message-condition?) (make-who-condition . q4e5a@q4c55@make-who-condition) (make-warning . q4e28@q4bcf@make-warning) (make-violation . q4e40@q4c0e@make-violation) (make-undefined-violation . q4e88@q4cce@make-undefined-violation) (make-syntax-violation . q4e7c@q4cb1@make-syntax-violation) (make-serious-condition . q4e30@q4be4@make-serious-condition) (make-non-continuable-violation . q4e64@q4c6e@make-non-continuable-violation) (make-message-condition . q4e1e@q4bb6@make-message-condition) (make-lexical-violation . q4e74@q4c98@make-lexical-violation) (make-irritants-condition . q4e50@q4c3a@make-irritants-condition) (make-implementation-restriction-violation . q4e6c@q4c83@make-implementation-restriction-violation) (make-error . q4e38@q4bf9@make-error) (make-assertion-violation . q4e48@q4c23@make-assertion-violation) (lexical-violation? . q4e75@q4c9a@lexical-violation?) (irritants-condition? . q4e52@q4c3e@irritants-condition?) (implementation-restriction-violation? . q4e6d@q4c85@implementation-restriction-violation?) (error? . q4e39@q4bfb@error?) (condition-who . q4e5d@q4c5b@condition-who) (condition-message . q4e21@q4bbc@condition-message) (condition-irritants . q4e53@q4c40@condition-irritants) (assertion-violation? . q4e49@q4c25@assertion-violation?) (no-nans-violation? . q4f01@q4e0e@no-nans-violation?) (no-infinities-violation? . q4ef9@q4df9@no-infinities-violation?) (make-no-nans-violation . q4f00@q4e0c@make-no-nans-violation) (make-no-infinities-violation . q4ef8@q4df7@make-no-infinities-violation) (assertion-error . q4b3b@q3123@assertion-error)))))) (q2c6d@q2ab9@install-library 'q53ba '(mosh interaction) '() '() '() '() '((regexp? . q53b2) (alist->eq-hash-table . q53ae) (format . q53ab) (string-split . q53a0) (call-process . q539a) (set-current-directory! . q5396) (expand-path . q5395) (current-directory . q5394) (%spawn . q5393) (%waitpid . q5392) (simple-struct-name . q5391) (simple-struct-set! . q5390) (simple-struct-ref . q538f) (make-simple-struct . q538e) (simple-struct? . q538d) (pointer-ref-c-int64 . q538c) (pointer-ref-c-int32 . q538b) (pointer-ref-c-int16 . q538a) (pointer-ref-c-int8 . q5389) (pointer-ref-c-uint64 . q5388) (pointer-ref-c-uint32 . q5387) (pointer-ref-c-uint16 . q5386) (pointer-ref-c-uint8 . q5385) (pointer-set-c-uint64! . q5384) (pointer-set-c-uint32! . q5383) (pointer-set-c-uint16! . q5382) (pointer-set-c-uint8! . q5381) (pointer-set-c-int64! . q5380) (pointer-set-c-int32! . q537f) (pointer-set-c-int16! . q537e) (pointer-set-c-int8! . q537d) (pointer-set-c-pointer! . q537c) (pointer-set-c-double! . q537b) (pointer-set-c-float! . q537a) (pointer-set-c-long-long! . q5379) (pointer-set-c-long! . q5378) (pointer-set-c-int! . q5377) (pointer-set-c-short! . q5376) (pointer-set-c-char! . q5375) (pointer-ref-c-pointer . q5374) (pointer-ref-c-double . q5373) (pointer-ref-c-float . q5372) (pointer-ref-c-unsigned-long-long . q5371) (pointer-ref-c-signed-long-long . q5370) (pointer-ref-c-unsigned-long . q536f) (pointer-ref-c-signed-long . q536e) (pointer-ref-c-unsigned-int . q536d) (pointer-ref-c-signed-int . q536c) (pointer-ref-c-unsigned-short . q536b) (pointer-ref-c-signed-short . q536a) (pointer-ref-c-unsigned-char . q5369) (pointer-ref-c-signed-char . q5368) (pointer->integer . q5367) (integer->pointer . q5366) (pointer? . q5365) (shared-errno . q5364) (%ffi-supported? . q5363) (%ffi-pointer->string . q5362) (%ffi-call->string-or-zero . q5361) (%ffi-call->double . q5360) (%ffi-call->void* . q535f) (%ffi-call->void . q535e) (%ffi-call->char . q535d) (%ffi-call->int . q535c) (%ffi-lookup . q535b) (%ffi-open . q535a) (%fork . q5359) (%pipe . q5358) (p . q5357) (whereis . q533c) (register . q533b) (vm-join! . q533a) (vm-set-value! . q5339) (vm? . q5338) (main-vm? . q5337) (vm-eval . q5336) (vm-self . q5335) (vm-start! . q5334) (make-vm . q5333) (mutex-try-lock! . q5332) (mutex-unlock! . q5331) (mutex-lock! . q5330) (mutex? . q532f) (make-mutex . q532e) (condition-variable-notify-all! . q532d) (condition-variable-notify! . q532c) (condition-variable-wait! . q532b) (make-condition-variable . q532a) (string-upcase . q5313) (string-titlecase . q5312) (string-normalize-nfkd . q5311) (string-normalize-nfkc . q5310) (string-normalize-nfd . q530f) (string-normalize-nfc . q530e) (string-foldcase . q530d) (string-downcase . q530c) (string-ci>? . q530b) (string-ci>=? . q530a) (string-ci=? . q5309) (string-ci<? . q5308) (string-ci<=? . q5307) (char-whitespace? . q5306) (char-upper-case? . q5305) (char-title-case? . q5304) (char-numeric? . q5303) (char-lower-case? . q5302) (char-general-category . q5301) (char-upcase . q5300) (char-titlecase . q52ff) (char-foldcase . q52fe) (char-downcase . q52fd) (char-ci>? . q52fc) (char-ci>=? . q52fb) (char-ci=? . q52fa) (char-ci<? . q52f9) (char-ci<=? . q52f8) (char-alphabetic? . q52f7) (make-variable-transformer . q2e75) (identifier? . q312a) (generate-temporaries . q3116) (free-identifier=? . q3118) (syntax->datum . q312e) (datum->syntax . q312c) (bound-identifier=? . q311a) (record-type-descriptor? . q52f6) (record-predicate . q52f5) (record-mutator . q52f4) (record-constructor . q52f3) (record-accessor . q52f2) (make-record-type-descriptor . q52f1) (make-record-constructor-descriptor . q52f0) (record? . q52ef) (record-type-uid . q52ee) (record-type-sealed? . q52ed) (record-type-parent . q52ec) (record-type-opaque? . q52eb) (record-type-name . q52ea) (record-type-generative? . q52e9) (record-type-field-names . q52e8) (record-rtd . q52e7) (record-field-mutable? . q52e6) (delete-file . q52e5) (file-exists? . q52e4) (vector-sort! . q52e3) (vector-sort . q52e2) (list-sort . q52e1) (symbol-hash . q52e0) (string-ci-hash . q52df) (string-hash . q52de) (equal-hash . q52dd) (hashtable-equivalence-function . q52dc) (make-hashtable . q52db) (hashtable-hash-function . q52da) (make-eqv-hashtable . q52d9) (make-eq-hashtable . q52d8) (hashtable? . q52d7) (hashtable-update! . q52d6) (hashtable-size . q52d5) (hashtable-set! . q52d4) (hashtable-ref . q52d3) (hashtable-mutable? . q52d2) (hashtable-keys . q52d1) (hashtable-entries . q52d0) (hashtable-delete! . q52cf) (hashtable-copy . q52ce) (hashtable-contains? . q52cd) (hashtable-clear! . q52cc) (call-with-output-file . q52cb) (call-with-input-file . q52ca) (write-char . q52c9) (write . q52c8) (with-output-to-file . q52c7) (with-input-from-file . q52c6) (read-char . q52c5) (read . q52c4) (peek-char . q52c3) (open-output-file . q52c2) (open-input-file . q52c1) (newline . q52c0) (display . q52bf) (close-output-port . q52be) (close-input-port . q52bd) (eof-object? . q52bc) (eof-object . q52bb) (current-error-port . q52ba) (current-output-port . q52b9) (current-input-port . q52b8) (output-port? . q52b7) (input-port? . q52b6) (utf-8-codec . q52b5) (utf-16-codec . q52b4) (transcoder-error-handling-mode . q52b3) (transcoder-eol-style . q52b2) (transcoder-codec . q52b1) (transcoded-port . q52b0) (textual-port? . q52af) (string->bytevector . q52ae) (standard-output-port . q52ad) (standard-input-port . q52ac) (standard-error-port . q52ab) (set-port-position! . q52aa) (put-u8 . q52a9) (put-string . q52a8) (put-datum . q52a7) (put-char . q52a6) (put-bytevector . q52a5) (port? . q52a4) (port-transcoder . q52a3) (port-position . q52a2) (port-has-set-port-position!? . q52a1) (port-has-port-position? . q52a0) (port-eof? . q529f) (output-port-buffer-mode . q529e) (open-string-output-port . q529d) (open-string-input-port . q529c) (open-file-output-port . q529b) (open-file-input/output-port . q529a) (open-file-input-port . q5299) (open-bytevector-output-port . q5298) (open-bytevector-input-port . q5297) (native-transcoder . q5296) (native-eol-style . q5295) (make-transcoder . q5294) (latin-1-codec . q5293) (make-i/o-write-error . q4d0c) (make-i/o-read-error . q4cf7) (make-i/o-port-error . q4dad) (make-i/o-invalid-position-error . q4d23) (make-i/o-filename-error . q4d3e) (make-i/o-file-protection-error . q4d57) (make-i/o-file-is-read-only-error . q4d6c) (make-i/o-file-does-not-exist-error . q4d96) (make-i/o-file-already-exists-error . q4d81) (make-i/o-error . q4ce2) (make-i/o-encoding-error . q4ddd) (make-i/o-decoding-error . q4dc6) (make-custom-textual-output-port . q5292) (make-custom-textual-input/output-port . q5291) (make-custom-textual-input-port . q5290) (make-custom-binary-output-port . q528f) (make-custom-binary-input/output-port . q528e) (make-custom-binary-input-port . q528d) (make-bytevector . q528c) (lookahead-u8 . q528b) (lookahead-char . q528a) (i/o-write-error? . q4d0e) (i/o-read-error? . q4cf9) (i/o-port-error? . q4db1) (i/o-invalid-position-error? . q4d27) (i/o-filename-error? . q4d42) (i/o-file-protection-error? . q4d59) (i/o-file-is-read-only-error? . q4d6e) (i/o-file-does-not-exist-error? . q4d98) (i/o-file-already-exists-error? . q4d83) (i/o-error? . q4ce4) (i/o-error-position . q4d29) (i/o-error-port . q4db3) (i/o-error-filename . q4d44) (i/o-encoding-error? . q4de1) (i/o-encoding-error-char . q4de3) (i/o-decoding-error? . q4dc8) (get-u8 . q5289) (get-string-n! . q5288) (get-string-n . q5287) (get-string-all . q5286) (get-line . q5285) (get-datum . q5284) (get-char . q5283) (get-bytevector-some . q5282) (get-bytevector-n! . q5281) (get-bytevector-n . q5280) (get-bytevector-all . q527f) (flush-output-port . q527e) (close-port . q527d) (exit . q5275) (command-line . q4f18) (string-fill! . q5274) (string-set! . q5273) (set-cdr! . q5272) (set-car! . q5271) (remove . q5270) (remv . q526f) (remp . q526e) (remq . q526d) (partition . q526c) (memv . q526b) (memq . q526a) (memp . q5269) (member . q5268) (exists . q5267) (for-all . q5266) (fold-right . q5265) (fold-left . q5264) (find . q5263) (filter . q5262) (cons* . q5261) (assv . q5260) (assq . q525f) (assp . q525e) (assoc . q525d) (call-with-string-output-port . q525c) (call-with-port . q525b) (call-with-bytevector-output-port . q525a) (bytevector->string . q5259) (buffer-mode? . q5258) (binary-port? . q5257) (with-exception-handler . q5256) (raise-continuable . q5255) (raise . q5254) (eval . q3108) (environment . q3100) (make-enumeration . q5253) (enum-set=? . q5252) (enum-set-universe . q5251) (enum-set-union . q5250) (enum-set-subset? . q524f) (enum-set-projection . q524e) (enum-set-member? . q524d) (enum-set-intersection . q524c) (enum-set-indexer . q524b) (enum-set-difference . q524a) (enum-set-constructor . q5249) (enum-set-complement . q5248) (enum-set->list . q5247) (who-condition? . q4c58) (warning? . q4bd0) (violation? . q4c0f) (undefined-violation? . q4ccf) (syntax-violation? . q4cb6) (syntax-violation-subform . q4cba) (syntax-violation-form . q4cb8) (syntax-violation . q3128) (simple-conditions . q5246) (serious-condition? . q4be5) (non-continuable-violation? . q4c6f) (message-condition? . q4bb9) (make-who-condition . q4c54) (make-warning . q4bce) (make-violation . q4c0d) (make-undefined-violation . q4ccd) (make-syntax-violation . q4cb0) (make-serious-condition . q4be3) (make-non-continuable-violation . q4c6d) (make-message-condition . q4bb5) (make-lexical-violation . q4c97) (make-irritants-condition . q4c39) (make-implementation-restriction-violation . q4c82) (make-error . q4bf8) (make-assertion-violation . q4c22) (lexical-violation? . q4c99) (irritants-condition? . q4c3d) (implementation-restriction-violation? . q4c84) (error? . q4bfa) (condition-who . q4c5a) (condition-predicate . q5245) (condition-message . q4bbb) (condition-irritants . q4c3f) (condition-accessor . q5244) (condition . q5243) (assertion-violation? . q4c24) (condition? . q5242) (utf32->string . q5241) (utf16->string . q5240) (utf8->string . q523f) (uint-list->bytevector . q523e) (u8-list->bytevector . q523d) (string->utf8 . q523c) (string->utf32 . q523b) (string->utf16 . q523a) (sint-list->bytevector . q5239) (native-endianness . q5238) (bytevector? . q5237) (bytevector=? . q5236) (bytevector-uint-set! . q5235) (bytevector-uint-ref . q5234) (bytevector-u8-set! . q5233) (bytevector-u8-ref . q5232) (bytevector-u64-set! . q5231) (bytevector-u64-ref . q5230) (bytevector-u64-native-set! . q522f) (bytevector-u64-native-ref . q522e) (bytevector-u32-set! . q522d) (bytevector-u32-ref . q522c) (bytevector-u32-native-set! . q522b) (bytevector-u32-native-ref . q522a) (bytevector-u16-set! . q5229) (bytevector-u16-ref . q5228) (bytevector-u16-native-set! . q5227) (bytevector-u16-native-ref . q5226) (bytevector-sint-set! . q5225) (bytevector-sint-ref . q5224) (bytevector-s8-set! . q5223) (bytevector-s8-ref . q5222) (bytevector-s64-set! . q5221) (bytevector-s64-ref . q5220) (bytevector-s64-native-set! . q521f) (bytevector-s64-native-ref . q521e) (bytevector-s32-set! . q521d) (bytevector-s32-ref . q521c) (bytevector-s32-native-set! . q521b) (bytevector-s32-native-ref . q521a) (bytevector-s16-set! . q5219) (bytevector-s16-ref . q5218) (bytevector-s16-native-set! . q5217) (bytevector-s16-native-ref . q5216) (bytevector-length . q5215) (bytevector-ieee-single-ref . q5214) (bytevector-ieee-single-set! . q5213) (bytevector-ieee-single-native-set! . q5212) (bytevector-ieee-single-native-ref . q5211) (bytevector-ieee-double-set! . q5210) (bytevector-ieee-double-ref . q520f) (bytevector-ieee-double-native-set! . q520e) (bytevector-ieee-double-native-ref . q520d) (bytevector-fill! . q520c) (bytevector-copy! . q520b) (bytevector-copy . q520a) (bytevector->uint-list . q5209) (bytevector->u8-list . q5208) (bytevector->sint-list . q5207) (no-nans-violation? . q4e0d) (no-infinities-violation? . q4df8) (make-no-nans-violation . q4e0b) (make-no-infinities-violation . q4df6) (real->flonum . q5206) (flzero? . q5205) (fltruncate . q5204) (fltan . q5203) (flsqrt . q5202) (flsin . q5201) (flround . q5200) (flpositive? . q51ff) (flonum? . q51fe) (flodd? . q51fd) (flnumerator . q51fc) (flnegative? . q51fb) (flnan? . q51fa) (flmod0 . q51f9) (flmod . q51f8) (flmin . q51f7) (flmax . q51f6) (fllog . q51f5) (flinteger? . q51f4) (flinfinite? . q51f3) (flfloor . q51f2) (flfinite? . q51f1) (flexpt . q51f0) (flexp . q51ef) (fleven? . q51ee) (fldiv0-and-mod0 . q51ed) (fldiv0 . q51ec) (fldiv-and-mod . q51eb) (fldiv . q51ea) (fldenominator . q51e9) (flcos . q51e8) (flceiling . q51e7) (flatan . q51e6) (flasin . q51e5) (flacos . q51e4) (flabs . q51e3) (fl>? . q51e2) (fl>=? . q51e1) (fl=? . q51e0) (fl<? . q51df) (fl<=? . q51de) (fl/ . q51dd) (fl- . q51dc) (fl+ . q51db) (fl* . q51da) (fixnum->flonum . q51d9) (fxzero? . q51d8) (fxxor . q51d7) (fxrotate-bit-field . q51d6) (fxreverse-bit-field . q51d5) (fxpositive? . q51d4) (fxodd? . q51d3) (fxnot . q51d2) (fxnegative? . q51d1) (fxmod0 . q51d0) (fxmod . q51cf) (fxmin . q51ce) (fxmax . q51cd) (fxlength . q51cc) (fxior . q51cb) (fxif . q51ca) (fxfirst-bit-set . q51c9) (fxeven? . q51c8) (fxdiv0-and-mod0 . q51c7) (fxdiv0 . q51c6) (fxdiv-and-mod . q51c5) (fxdiv . q51c4) (fxcopy-bit-field . q51c3) (fxcopy-bit . q51c2) (fxbit-set? . q51c1) (fxbit-field . q51c0) (fxbit-count . q51bf) (fxarithmetic-shift-right . q51be) (fxarithmetic-shift-left . q51bd) (fxarithmetic-shift . q51bc) (fxand . q51bb) (fx>? . q51ba) (fx>=? . q51b9) (fx=? . q51b8) (fx<? . q51b7) (fx<=? . q51b6) (fx-/carry . q51b5) (fx- . q51b4) (fx+/carry . q51b3) (fx+ . q51b2) (fx*/carry . q51b1) (fx* . q51b0) (greatest-fixnum . q51af) (least-fixnum . q51ae) (fixnum-width . q51ad) (fixnum? . q51ac) (bitwise-rotate-bit-field . q51ab) (bitwise-reverse-bit-field . q51aa) (bitwise-length . q51a9) (bitwise-if . q51a8) (bitwise-first-bit-set . q51a7) (bitwise-copy-bit-field . q51a6) (bitwise-copy-bit . q51a5) (bitwise-bit-set? . q51a4) (bitwise-bit-field . q51a3) (bitwise-bit-count . q51a2) (bitwise-xor . q51a1) (bitwise-ior . q51a0) (bitwise-and . q519f) (bitwise-not . q519e) (bitwise-arithmetic-shift-right . q519d) (bitwise-arithmetic-shift-left . q519c) (bitwise-arithmetic-shift . q519b) (zero? . q519a) (vector? . q5199) (vector-set! . q5198) (vector-ref . q5197) (vector-map . q5196) (vector-length . q5195) (vector-for-each . q5194) (vector-fill! . q5193) (vector->list . q5192) (vector . q5191) (values . q5190) (truncate . q518f) (tan . q518e) (symbol? . q518d) (symbol=? . q518c) (symbol->string . q518b) (substring . q518a) (string? . q5189) (string>? . q5188) (string>=? . q5187) (string=? . q5186) (string<? . q5185) (string<=? . q5184) (string-ref . q5183) (string-length . q5182) (string-for-each . q5181) (string-copy . q5180) (string-append . q517f) (string->symbol . q517e) (string->number . q517d) (string->list . q517c) (string . q517b) (sqrt . q517a) (sin . q5179) (round . q5178) (reverse . q5177) (real? . q5176) (real-valued? . q5175) (real-part . q5174) (rationalize . q5173) (rational? . q5172) (rational-valued? . q5171) (procedure? . q5170) (positive? . q516f) (pair? . q516e) (odd? . q516d) (numerator . q516c) (number? . q516b) (number->string . q516a) (null? . q5169) (not . q5168) (negative? . q5167) (nan? . q5166) (min . q5165) (max . q5164) (map . q5163) (make-vector . q5162) (make-string . q5161) (make-rectangular . q5160) (make-polar . q515f) (magnitude . q515e) (log . q515d) (list? . q515c) (list-tail . q515b) (list-ref . q515a) (list->vector . q5159) (list->string . q5158) (list . q5157) (length . q5156) (lcm . q5155) (integer? . q5154) (integer-valued? . q5153) (integer->char . q5152) (infinite? . q5151) (inexact? . q5150) (inexact . q514f) (imag-part . q514e) (gcd . q514d) (for-each . q514c) (floor . q514b) (finite? . q514a) (expt . q5149) (exp . q5148) (exact? . q5147) (exact-integer-sqrt . q5146) (exact . q5145) (even? . q5144) (error . q5143) (eqv? . q5142) (equal? . q5141) (eq? . q5140) (dynamic-wind . q513f) (div0-and-mod0 . q513e) (mod0 . q513d) (div0 . q513c) (div-and-mod . q513b) (mod . q513a) (div . q5139) (denominator . q5138) (cos . q5137) (cons . q5136) (complex? . q5135) (char? . q5134) (char>? . q5133) (char>=? . q5132) (char=? . q5131) (char<? . q5130) (char<=? . q512f) (char->integer . q512e) (ceiling . q512d) (call-with-values . q512c) (call/cc . q512b) (call-with-current-continuation . q512a) (cddddr . q5129) (cdddar . q5128) (cddadr . q5127) (cddaar . q5126) (cdaddr . q5125) (cdadar . q5124) (cdaadr . q5123) (cdaaar . q5122) (cadddr . q5121) (caddar . q5120) (cadadr . q511f) (cadaar . q511e) (caaddr . q511d) (caadar . q511c) (caaadr . q511b) (caaaar . q511a) (cdddr . q5119) (cddar . q5118) (cdadr . q5117) (cdaar . q5116) (caddr . q5115) (cadar . q5114) (caadr . q5113) (caaar . q5112) (cddr . q5111) (cdar . q5110) (cadr . q510f) (caar . q510e) (cdr . q510d) (car . q510c) (boolean? . q510b) (boolean=? . q510a) (atan . q5109) (assertion-violation . q5108) (asin . q5107) (apply . q5106) (append . q5105) (angle . q5104) (acos . q5103) (abs . q5102) (/ . q5101) (* . q5100) (- . q50ff) (+ . q50fe) (>= . q50fd) (> . q50fc) (= . q50fb) (<= . q50fa) (< . q50f9) (library . q50f8) (&no-nans . q50f7) (&no-infinities . q50f6) (&i/o-encoding . q50f5) (&i/o-decoding . q50f4) (&i/o-port . q50f3) (&i/o-file-does-not-exist . q50f2) (&i/o-file-already-exists . q50f1) (&i/o-file-is-read-only . q50f0) (&i/o-file-protection . q50ef) (&i/o-filename . q50ee) (&i/o-invalid-position . q50ed) (&i/o-write . q50ec) (&i/o-read . q50eb) (&i/o . q50ea) (&undefined . q50e9) (&syntax . q50e8) (&lexical . q50e7) (&implementation-restriction . q50e6) (&non-continuable . q50e5) (&who . q50e4) (&irritants . q50e3) (&assertion . q50e2) (&violation . q50e1) (&error . q50e0) (&serious . q50df) (&warning . q50de) (&message . q50dd) (&condition . q50dc) (define-condition-type . q50db) (define-enumeration . q50da) (define-record-type . q50d9) (parent-rtd . q50d8) (nongenerative . q50d7) (opaque . q50d6) (sealed . q50d5) (protocol . q50d4) (parent . q50d3) (immutable . q50d2) (mutable . q50d1) (fields . q50d0) (error-handling-mode . q50cf) (file-options . q50ce) (buffer-mode . q50cd) (eol-style . q50cc) (guard . q50cb) (unsyntax-splicing . q50c8) (unsyntax . q50c7) (unquote-splicing . q50c6) (unquote . q50c5) (_ . q50c4) (else . q50c3) (=> . q50c2) (... . q50c1) (assert . q50c0) (endianness . q50bf) (time . q50bd) (do . q50bc) (cond . q50bb) (let* . q50ba) (let . q50b9) (let*-values . q50b8) (let-values . q50b7) (identifier-syntax . q50b6) (with-syntax . q50b5) (quasisyntax . q50b4) (quasiquote . q50b3) (syntax-rules . q50b2) (include . q50b1) (record-constructor-descriptor . q50af) (record-type-descriptor . q50ae) (case . q50ad) (unless . q50ab) (when . q50aa) (or . q50a9) (and . q50a8) (if . q50a7) (letrec* . q50a6) (letrec . q50a5) (case-lambda . q50a3) (lambda . q50a2) (syntax . q50a1) (syntax-case . q50a0) (quote . q509f) (letrec-syntax . q509d) (let-syntax . q509c) (set! . q509b) (import . q509a) (begin . q5099) (define-syntax . q5097) (define . q5096)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53bb '(psyntax null-environment-5) '() '() '() '() '((make-promise . q5276) (unquote-splicing . q50c6) (unquote . q50c5) (_ . q50c4) (else . q50c3) (=> . q50c2) (... . q50c1) (delay . q50be) (do . q50bc) (cond . q50bb) (let* . q50ba) (let . q50b9) (quasiquote . q50b3) (syntax-rules . q50b2) (case . q50ad) (or . q50a9) (and . q50a8) (if . q50a7) (letrec . q50a5) (lambda . q50a2) (quote . q509f) (letrec-syntax . q509d) (let-syntax . q509c) (set! . q509b) (begin . q5099) (define-syntax . q5097) (define . q5096)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53bc '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . q530b) (string-ci>=? . q530a) (string-ci=? . q5309) (string-ci<? . q5308) (string-ci<=? . q5307) (char-whitespace? . q5306) (char-upper-case? . q5305) (char-numeric? . q5303) (char-lower-case? . q5302) (char-upcase . q5300) (char-downcase . q52fd) (char-ci>? . q52fc) (char-ci>=? . q52fb) (char-ci=? . q52fa) (char-ci<? . q52f9) (char-ci<=? . q52f8) (char-alphabetic? . q52f7) (call-with-output-file . q52cb) (call-with-input-file . q52ca) (write-char . q52c9) (write . q52c8) (with-output-to-file . q52c7) (with-input-from-file . q52c6) (read-char . q52c5) (read . q52c4) (peek-char . q52c3) (open-output-file . q52c2) (open-input-file . q52c1) (newline . q52c0) (display . q52bf) (close-output-port . q52be) (close-input-port . q52bd) (eof-object . q52bb) (current-output-port . q52b9) (current-input-port . q52b8) (output-port? . q52b7) (input-port? . q52b6) (scheme-report-environment . q3104) (quotient . q527c) (null-environment . q3102) (remainder . q527b) (modulo . q527a) (inexact->exact . q5279) (force . q5278) (exact->inexact . q5277) (make-promise . q5276) (string-fill! . q5274) (string-set! . q5273) (set-cdr! . q5272) (set-car! . q5271) (memv . q526b) (memq . q526a) (member . q5268) (assv . q5260) (assq . q525f) (assoc . q525d) (eval . q3108) (zero? . q519a) (vector? . q5199) (vector-set! . q5198) (vector-ref . q5197) (vector-length . q5195) (vector-fill! . q5193) (vector->list . q5192) (vector . q5191) (values . q5190) (truncate . q518f) (tan . q518e) (symbol? . q518d) (symbol->string . q518b) (substring . q518a) (string? . q5189) (string>? . q5188) (string>=? . q5187) (string=? . q5186) (string<? . q5185) (string<=? . q5184) (string-ref . q5183) (string-length . q5182) (string-copy . q5180) (string-append . q517f) (string->symbol . q517e) (string->number . q517d) (string->list . q517c) (string . q517b) (sqrt . q517a) (sin . q5179) (round . q5178) (reverse . q5177) (real? . q5176) (real-part . q5174) (rationalize . q5173) (rational? . q5172) (procedure? . q5170) (positive? . q516f) (pair? . q516e) (odd? . q516d) (numerator . q516c) (number? . q516b) (number->string . q516a) (not . q5168) (negative? . q5167) (min . q5165) (max . q5164) (map . q5163) (make-vector . q5162) (make-string . q5161) (make-rectangular . q5160) (make-polar . q515f) (magnitude . q515e) (log . q515d) (list? . q515c) (list-tail . q515b) (list-ref . q515a) (list->vector . q5159) (list->string . q5158) (list . q5157) (length . q5156) (lcm . q5155) (integer? . q5154) (integer->char . q5152) (inexact? . q5150) (imag-part . q514e) (gcd . q514d) (for-each . q514c) (floor . q514b) (expt . q5149) (exp . q5148) (exact? . q5147) (even? . q5144) (eqv? . q5142) (equal? . q5141) (eq? . q5140) (dynamic-wind . q513f) (denominator . q5138) (cos . q5137) (cons . q5136) (complex? . q5135) (char? . q5134) (char>? . q5133) (char>=? . q5132) (char=? . q5131) (char<? . q5130) (char<=? . q512f) (char->integer . q512e) (ceiling . q512d) (call-with-values . q512c) (call-with-current-continuation . q512a) (cddddr . q5129) (cdddar . q5128) (cddadr . q5127) (cddaar . q5126) (cdaddr . q5125) (cdadar . q5124) (cdaadr . q5123) (cdaaar . q5122) (cadddr . q5121) (caddar . q5120) (cadadr . q511f) (cadaar . q511e) (caaddr . q511d) (caadar . q511c) (caaadr . q511b) (caaaar . q511a) (cdddr . q5119) (cddar . q5118) (cdadr . q5117) (cdaar . q5116) (caddr . q5115) (cadar . q5114) (caadr . q5113) (caaar . q5112) (cddr . q5111) (cdar . q5110) (cadr . q510f) (caar . q510e) (cdr . q510d) (car . q510c) (boolean? . q510b) (atan . q5109) (asin . q5107) (apply . q5106) (append . q5105) (angle . q5104) (acos . q5103) (abs . q5102) (/ . q5101) (* . q5100) (- . q50ff) (+ . q50fe) (>= . q50fd) (> . q50fc) (= . q50fb) (<= . q50fa) (< . q50f9) (unquote-splicing . q50c6) (unquote . q50c5) (else . q50c3) (=> . q50c2) (... . q50c1) (delay . q50be) (do . q50bc) (cond . q50bb) (let* . q50ba) (let . q50b9) (quasiquote . q50b3) (syntax-rules . q50b2) (case . q50ad) (or . q50a9) (and . q50a8) (if . q50a7) (letrec . q50a5) (lambda . q50a2) (quote . q509f) (letrec-syntax . q509d) (let-syntax . q509c) (set! . q509b) (begin . q5099) (define-syntax . q5097) (define . q5096)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53bd '(psyntax modules) '() '() '() '() '((module . q5098)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53be '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53bf '(rnrs) '(6) '() '() '() '((regexp? . q53b2) (string-upcase . q5313) (string-titlecase . q5312) (string-normalize-nfkd . q5311) (string-normalize-nfkc . q5310) (string-normalize-nfd . q530f) (string-normalize-nfc . q530e) (string-foldcase . q530d) (string-downcase . q530c) (string-ci>? . q530b) (string-ci>=? . q530a) (string-ci=? . q5309) (string-ci<? . q5308) (string-ci<=? . q5307) (char-whitespace? . q5306) (char-upper-case? . q5305) (char-title-case? . q5304) (char-numeric? . q5303) (char-lower-case? . q5302) (char-general-category . q5301) (char-upcase . q5300) (char-titlecase . q52ff) (char-foldcase . q52fe) (char-downcase . q52fd) (char-ci>? . q52fc) (char-ci>=? . q52fb) (char-ci=? . q52fa) (char-ci<? . q52f9) (char-ci<=? . q52f8) (char-alphabetic? . q52f7) (make-variable-transformer . q2e75) (identifier? . q312a) (generate-temporaries . q3116) (free-identifier=? . q3118) (syntax->datum . q312e) (datum->syntax . q312c) (bound-identifier=? . q311a) (record-type-descriptor? . q52f6) (record-predicate . q52f5) (record-mutator . q52f4) (record-constructor . q52f3) (record-accessor . q52f2) (make-record-type-descriptor . q52f1) (make-record-constructor-descriptor . q52f0) (record? . q52ef) (record-type-uid . q52ee) (record-type-sealed? . q52ed) (record-type-parent . q52ec) (record-type-opaque? . q52eb) (record-type-name . q52ea) (record-type-generative? . q52e9) (record-type-field-names . q52e8) (record-rtd . q52e7) (record-field-mutable? . q52e6) (delete-file . q52e5) (file-exists? . q52e4) (vector-sort! . q52e3) (vector-sort . q52e2) (list-sort . q52e1) (symbol-hash . q52e0) (string-ci-hash . q52df) (string-hash . q52de) (equal-hash . q52dd) (hashtable-equivalence-function . q52dc) (make-hashtable . q52db) (hashtable-hash-function . q52da) (make-eqv-hashtable . q52d9) (make-eq-hashtable . q52d8) (hashtable? . q52d7) (hashtable-update! . q52d6) (hashtable-size . q52d5) (hashtable-set! . q52d4) (hashtable-ref . q52d3) (hashtable-mutable? . q52d2) (hashtable-keys . q52d1) (hashtable-entries . q52d0) (hashtable-delete! . q52cf) (hashtable-copy . q52ce) (hashtable-contains? . q52cd) (hashtable-clear! . q52cc) (call-with-output-file . q52cb) (call-with-input-file . q52ca) (write-char . q52c9) (write . q52c8) (with-output-to-file . q52c7) (with-input-from-file . q52c6) (read-char . q52c5) (read . q52c4) (peek-char . q52c3) (open-output-file . q52c2) (open-input-file . q52c1) (newline . q52c0) (display . q52bf) (close-output-port . q52be) (close-input-port . q52bd) (eof-object? . q52bc) (eof-object . q52bb) (current-error-port . q52ba) (current-output-port . q52b9) (current-input-port . q52b8) (output-port? . q52b7) (input-port? . q52b6) (utf-8-codec . q52b5) (utf-16-codec . q52b4) (transcoder-error-handling-mode . q52b3) (transcoder-eol-style . q52b2) (transcoder-codec . q52b1) (transcoded-port . q52b0) (textual-port? . q52af) (string->bytevector . q52ae) (standard-output-port . q52ad) (standard-input-port . q52ac) (standard-error-port . q52ab) (set-port-position! . q52aa) (put-u8 . q52a9) (put-string . q52a8) (put-datum . q52a7) (put-char . q52a6) (put-bytevector . q52a5) (port? . q52a4) (port-transcoder . q52a3) (port-position . q52a2) (port-has-set-port-position!? . q52a1) (port-has-port-position? . q52a0) (port-eof? . q529f) (output-port-buffer-mode . q529e) (open-string-output-port . q529d) (open-string-input-port . q529c) (open-file-output-port . q529b) (open-file-input/output-port . q529a) (open-file-input-port . q5299) (open-bytevector-output-port . q5298) (open-bytevector-input-port . q5297) (native-transcoder . q5296) (native-eol-style . q5295) (make-transcoder . q5294) (latin-1-codec . q5293) (make-i/o-write-error . q4d0c) (make-i/o-read-error . q4cf7) (make-i/o-port-error . q4dad) (make-i/o-invalid-position-error . q4d23) (make-i/o-filename-error . q4d3e) (make-i/o-file-protection-error . q4d57) (make-i/o-file-is-read-only-error . q4d6c) (make-i/o-file-does-not-exist-error . q4d96) (make-i/o-file-already-exists-error . q4d81) (make-i/o-error . q4ce2) (make-i/o-encoding-error . q4ddd) (make-i/o-decoding-error . q4dc6) (make-custom-textual-output-port . q5292) (make-custom-textual-input/output-port . q5291) (make-custom-textual-input-port . q5290) (make-custom-binary-output-port . q528f) (make-custom-binary-input/output-port . q528e) (make-custom-binary-input-port . q528d) (make-bytevector . q528c) (lookahead-u8 . q528b) (lookahead-char . q528a) (i/o-write-error? . q4d0e) (i/o-read-error? . q4cf9) (i/o-port-error? . q4db1) (i/o-invalid-position-error? . q4d27) (i/o-filename-error? . q4d42) (i/o-file-protection-error? . q4d59) (i/o-file-is-read-only-error? . q4d6e) (i/o-file-does-not-exist-error? . q4d98) (i/o-file-already-exists-error? . q4d83) (i/o-error? . q4ce4) (i/o-error-position . q4d29) (i/o-error-port . q4db3) (i/o-error-filename . q4d44) (i/o-encoding-error? . q4de1) (i/o-encoding-error-char . q4de3) (i/o-decoding-error? . q4dc8) (get-u8 . q5289) (get-string-n! . q5288) (get-string-n . q5287) (get-string-all . q5286) (get-line . q5285) (get-datum . q5284) (get-char . q5283) (get-bytevector-some . q5282) (get-bytevector-n! . q5281) (get-bytevector-n . q5280) (get-bytevector-all . q527f) (flush-output-port . q527e) (close-port . q527d) (exit . q5275) (command-line . q4f18) (remove . q5270) (remv . q526f) (remp . q526e) (remq . q526d) (partition . q526c) (memv . q526b) (memq . q526a) (memp . q5269) (member . q5268) (exists . q5267) (for-all . q5266) (fold-right . q5265) (fold-left . q5264) (find . q5263) (filter . q5262) (cons* . q5261) (assv . q5260) (assq . q525f) (assp . q525e) (assoc . q525d) (call-with-string-output-port . q525c) (call-with-port . q525b) (call-with-bytevector-output-port . q525a) (bytevector->string . q5259) (buffer-mode? . q5258) (binary-port? . q5257) (with-exception-handler . q5256) (raise-continuable . q5255) (raise . q5254) (make-enumeration . q5253) (enum-set=? . q5252) (enum-set-universe . q5251) (enum-set-union . q5250) (enum-set-subset? . q524f) (enum-set-projection . q524e) (enum-set-member? . q524d) (enum-set-intersection . q524c) (enum-set-indexer . q524b) (enum-set-difference . q524a) (enum-set-constructor . q5249) (enum-set-complement . q5248) (enum-set->list . q5247) (who-condition? . q4c58) (warning? . q4bd0) (violation? . q4c0f) (undefined-violation? . q4ccf) (syntax-violation? . q4cb6) (syntax-violation-subform . q4cba) (syntax-violation-form . q4cb8) (syntax-violation . q3128) (simple-conditions . q5246) (serious-condition? . q4be5) (non-continuable-violation? . q4c6f) (message-condition? . q4bb9) (make-who-condition . q4c54) (make-warning . q4bce) (make-violation . q4c0d) (make-undefined-violation . q4ccd) (make-syntax-violation . q4cb0) (make-serious-condition . q4be3) (make-non-continuable-violation . q4c6d) (make-message-condition . q4bb5) (make-lexical-violation . q4c97) (make-irritants-condition . q4c39) (make-implementation-restriction-violation . q4c82) (make-error . q4bf8) (make-assertion-violation . q4c22) (lexical-violation? . q4c99) (irritants-condition? . q4c3d) (implementation-restriction-violation? . q4c84) (error? . q4bfa) (condition-who . q4c5a) (condition-predicate . q5245) (condition-message . q4bbb) (condition-irritants . q4c3f) (condition-accessor . q5244) (condition . q5243) (assertion-violation? . q4c24) (condition? . q5242) (utf32->string . q5241) (utf16->string . q5240) (utf8->string . q523f) (uint-list->bytevector . q523e) (u8-list->bytevector . q523d) (string->utf8 . q523c) (string->utf32 . q523b) (string->utf16 . q523a) (sint-list->bytevector . q5239) (native-endianness . q5238) (bytevector? . q5237) (bytevector=? . q5236) (bytevector-uint-set! . q5235) (bytevector-uint-ref . q5234) (bytevector-u8-set! . q5233) (bytevector-u8-ref . q5232) (bytevector-u64-set! . q5231) (bytevector-u64-ref . q5230) (bytevector-u64-native-set! . q522f) (bytevector-u64-native-ref . q522e) (bytevector-u32-set! . q522d) (bytevector-u32-ref . q522c) (bytevector-u32-native-set! . q522b) (bytevector-u32-native-ref . q522a) (bytevector-u16-set! . q5229) (bytevector-u16-ref . q5228) (bytevector-u16-native-set! . q5227) (bytevector-u16-native-ref . q5226) (bytevector-sint-set! . q5225) (bytevector-sint-ref . q5224) (bytevector-s8-set! . q5223) (bytevector-s8-ref . q5222) (bytevector-s64-set! . q5221) (bytevector-s64-ref . q5220) (bytevector-s64-native-set! . q521f) (bytevector-s64-native-ref . q521e) (bytevector-s32-set! . q521d) (bytevector-s32-ref . q521c) (bytevector-s32-native-set! . q521b) (bytevector-s32-native-ref . q521a) (bytevector-s16-set! . q5219) (bytevector-s16-ref . q5218) (bytevector-s16-native-set! . q5217) (bytevector-s16-native-ref . q5216) (bytevector-length . q5215) (bytevector-ieee-single-ref . q5214) (bytevector-ieee-single-set! . q5213) (bytevector-ieee-single-native-set! . q5212) (bytevector-ieee-single-native-ref . q5211) (bytevector-ieee-double-set! . q5210) (bytevector-ieee-double-ref . q520f) (bytevector-ieee-double-native-set! . q520e) (bytevector-ieee-double-native-ref . q520d) (bytevector-fill! . q520c) (bytevector-copy! . q520b) (bytevector-copy . q520a) (bytevector->uint-list . q5209) (bytevector->u8-list . q5208) (bytevector->sint-list . q5207) (no-nans-violation? . q4e0d) (no-infinities-violation? . q4df8) (make-no-nans-violation . q4e0b) (make-no-infinities-violation . q4df6) (real->flonum . q5206) (flzero? . q5205) (fltruncate . q5204) (fltan . q5203) (flsqrt . q5202) (flsin . q5201) (flround . q5200) (flpositive? . q51ff) (flonum? . q51fe) (flodd? . q51fd) (flnumerator . q51fc) (flnegative? . q51fb) (flnan? . q51fa) (flmod0 . q51f9) (flmod . q51f8) (flmin . q51f7) (flmax . q51f6) (fllog . q51f5) (flinteger? . q51f4) (flinfinite? . q51f3) (flfloor . q51f2) (flfinite? . q51f1) (flexpt . q51f0) (flexp . q51ef) (fleven? . q51ee) (fldiv0-and-mod0 . q51ed) (fldiv0 . q51ec) (fldiv-and-mod . q51eb) (fldiv . q51ea) (fldenominator . q51e9) (flcos . q51e8) (flceiling . q51e7) (flatan . q51e6) (flasin . q51e5) (flacos . q51e4) (flabs . q51e3) (fl>? . q51e2) (fl>=? . q51e1) (fl=? . q51e0) (fl<? . q51df) (fl<=? . q51de) (fl/ . q51dd) (fl- . q51dc) (fl+ . q51db) (fl* . q51da) (fixnum->flonum . q51d9) (fxzero? . q51d8) (fxxor . q51d7) (fxrotate-bit-field . q51d6) (fxreverse-bit-field . q51d5) (fxpositive? . q51d4) (fxodd? . q51d3) (fxnot . q51d2) (fxnegative? . q51d1) (fxmod0 . q51d0) (fxmod . q51cf) (fxmin . q51ce) (fxmax . q51cd) (fxlength . q51cc) (fxior . q51cb) (fxif . q51ca) (fxfirst-bit-set . q51c9) (fxeven? . q51c8) (fxdiv0-and-mod0 . q51c7) (fxdiv0 . q51c6) (fxdiv-and-mod . q51c5) (fxdiv . q51c4) (fxcopy-bit-field . q51c3) (fxcopy-bit . q51c2) (fxbit-set? . q51c1) (fxbit-field . q51c0) (fxbit-count . q51bf) (fxarithmetic-shift-right . q51be) (fxarithmetic-shift-left . q51bd) (fxarithmetic-shift . q51bc) (fxand . q51bb) (fx>? . q51ba) (fx>=? . q51b9) (fx=? . q51b8) (fx<? . q51b7) (fx<=? . q51b6) (fx-/carry . q51b5) (fx- . q51b4) (fx+/carry . q51b3) (fx+ . q51b2) (fx*/carry . q51b1) (fx* . q51b0) (greatest-fixnum . q51af) (least-fixnum . q51ae) (fixnum-width . q51ad) (fixnum? . q51ac) (bitwise-rotate-bit-field . q51ab) (bitwise-reverse-bit-field . q51aa) (bitwise-length . q51a9) (bitwise-if . q51a8) (bitwise-first-bit-set . q51a7) (bitwise-copy-bit-field . q51a6) (bitwise-copy-bit . q51a5) (bitwise-bit-set? . q51a4) (bitwise-bit-field . q51a3) (bitwise-bit-count . q51a2) (bitwise-xor . q51a1) (bitwise-ior . q51a0) (bitwise-and . q519f) (bitwise-not . q519e) (bitwise-arithmetic-shift-right . q519d) (bitwise-arithmetic-shift-left . q519c) (bitwise-arithmetic-shift . q519b) (zero? . q519a) (vector? . q5199) (vector-set! . q5198) (vector-ref . q5197) (vector-map . q5196) (vector-length . q5195) (vector-for-each . q5194) (vector-fill! . q5193) (vector->list . q5192) (vector . q5191) (values . q5190) (truncate . q518f) (tan . q518e) (symbol? . q518d) (symbol=? . q518c) (symbol->string . q518b) (substring . q518a) (string? . q5189) (string>? . q5188) (string>=? . q5187) (string=? . q5186) (string<? . q5185) (string<=? . q5184) (string-ref . q5183) (string-length . q5182) (string-for-each . q5181) (string-copy . q5180) (string-append . q517f) (string->symbol . q517e) (string->number . q517d) (string->list . q517c) (string . q517b) (sqrt . q517a) (sin . q5179) (round . q5178) (reverse . q5177) (real? . q5176) (real-valued? . q5175) (real-part . q5174) (rationalize . q5173) (rational? . q5172) (rational-valued? . q5171) (procedure? . q5170) (positive? . q516f) (pair? . q516e) (odd? . q516d) (numerator . q516c) (number? . q516b) (number->string . q516a) (null? . q5169) (not . q5168) (negative? . q5167) (nan? . q5166) (min . q5165) (max . q5164) (map . q5163) (make-vector . q5162) (make-string . q5161) (make-rectangular . q5160) (make-polar . q515f) (magnitude . q515e) (log . q515d) (list? . q515c) (list-tail . q515b) (list-ref . q515a) (list->vector . q5159) (list->string . q5158) (list . q5157) (length . q5156) (lcm . q5155) (integer? . q5154) (integer-valued? . q5153) (integer->char . q5152) (infinite? . q5151) (inexact? . q5150) (inexact . q514f) (imag-part . q514e) (gcd . q514d) (for-each . q514c) (floor . q514b) (finite? . q514a) (expt . q5149) (exp . q5148) (exact? . q5147) (exact-integer-sqrt . q5146) (exact . q5145) (even? . q5144) (error . q5143) (eqv? . q5142) (equal? . q5141) (eq? . q5140) (dynamic-wind . q513f) (div0-and-mod0 . q513e) (mod0 . q513d) (div0 . q513c) (div-and-mod . q513b) (mod . q513a) (div . q5139) (denominator . q5138) (cos . q5137) (cons . q5136) (complex? . q5135) (char? . q5134) (char>? . q5133) (char>=? . q5132) (char=? . q5131) (char<? . q5130) (char<=? . q512f) (char->integer . q512e) (ceiling . q512d) (call-with-values . q512c) (call/cc . q512b) (call-with-current-continuation . q512a) (cddddr . q5129) (cdddar . q5128) (cddadr . q5127) (cddaar . q5126) (cdaddr . q5125) (cdadar . q5124) (cdaadr . q5123) (cdaaar . q5122) (cadddr . q5121) (caddar . q5120) (cadadr . q511f) (cadaar . q511e) (caaddr . q511d) (caadar . q511c) (caaadr . q511b) (caaaar . q511a) (cdddr . q5119) (cddar . q5118) (cdadr . q5117) (cdaar . q5116) (caddr . q5115) (cadar . q5114) (caadr . q5113) (caaar . q5112) (cddr . q5111) (cdar . q5110) (cadr . q510f) (caar . q510e) (cdr . q510d) (car . q510c) (boolean? . q510b) (boolean=? . q510a) (atan . q5109) (assertion-violation . q5108) (asin . q5107) (apply . q5106) (append . q5105) (angle . q5104) (acos . q5103) (abs . q5102) (/ . q5101) (* . q5100) (- . q50ff) (+ . q50fe) (>= . q50fd) (> . q50fc) (= . q50fb) (<= . q50fa) (< . q50f9) (&no-nans . q50f7) (&no-infinities . q50f6) (&i/o-encoding . q50f5) (&i/o-decoding . q50f4) (&i/o-port . q50f3) (&i/o-file-does-not-exist . q50f2) (&i/o-file-already-exists . q50f1) (&i/o-file-is-read-only . q50f0) (&i/o-file-protection . q50ef) (&i/o-filename . q50ee) (&i/o-invalid-position . q50ed) (&i/o-write . q50ec) (&i/o-read . q50eb) (&i/o . q50ea) (&undefined . q50e9) (&syntax . q50e8) (&lexical . q50e7) (&implementation-restriction . q50e6) (&non-continuable . q50e5) (&who . q50e4) (&irritants . q50e3) (&assertion . q50e2) (&violation . q50e1) (&error . q50e0) (&serious . q50df) (&warning . q50de) (&message . q50dd) (&condition . q50dc) (define-condition-type . q50db) (define-enumeration . q50da) (define-record-type . q50d9) (parent-rtd . q50d8) (nongenerative . q50d7) (opaque . q50d6) (sealed . q50d5) (protocol . q50d4) (parent . q50d3) (immutable . q50d2) (mutable . q50d1) (fields . q50d0) (error-handling-mode . q50cf) (file-options . q50ce) (buffer-mode . q50cd) (eol-style . q50cc) (guard . q50cb) (unsyntax-splicing . q50c8) (unsyntax . q50c7) (unquote-splicing . q50c6) (unquote . q50c5) (_ . q50c4) (else . q50c3) (=> . q50c2) (... . q50c1) (assert . q50c0) (endianness . q50bf) (do . q50bc) (cond . q50bb) (let* . q50ba) (let . q50b9) (let*-values . q50b8) (let-values . q50b7) (identifier-syntax . q50b6) (with-syntax . q50b5) (quasisyntax . q50b4) (quasiquote . q50b3) (syntax-rules . q50b2) (record-constructor-descriptor . q50af) (record-type-descriptor . q50ae) (case . q50ad) (unless . q50ab) (when . q50aa) (or . q50a9) (and . q50a8) (if . q50a7) (letrec* . q50a6) (letrec . q50a5) (case-lambda . q50a3) (lambda . q50a2) (syntax . q50a1) (syntax-case . q50a0) (quote . q509f) (letrec-syntax . q509d) (let-syntax . q509c) (set! . q509b) (begin . q5099) (define-syntax . q5097) (define . q5096)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c0 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . q3104) (quotient . q527c) (null-environment . q3102) (remainder . q527b) (modulo . q527a) (inexact->exact . q5279) (force . q5278) (exact->inexact . q5277) (make-promise . q5276) (delay . q50be)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c1 '(rnrs control) '(6) '() '() '() '((do . q50bc) (unless . q50ab) (when . q50aa) (case-lambda . q50a3)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c2 '(rnrs eval) '(6) '() '() '() '((eval . q3108) (environment . q3100)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c3 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . q5272) (set-car! . q5271)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c4 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . q5274) (string-set! . q5273)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c5 '(rnrs programs) '(6) '() '() '() '((exit . q5275) (command-line . q4f18)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c6 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . q2e75) (identifier? . q312a) (generate-temporaries . q3116) (free-identifier=? . q3118) (syntax->datum . q312e) (datum->syntax . q312c) (bound-identifier=? . q311a) (syntax-violation . q3128) (unsyntax-splicing . q50c8) (unsyntax . q50c7) (_ . q50c4) (... . q50c1) (with-syntax . q50b5) (quasisyntax . q50b4) (syntax . q50a1) (syntax-case . q50a0)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c7 '(rnrs files) '(6) '() '() '() '((delete-file . q52e5) (file-exists? . q52e4) (make-i/o-write-error . q4d0c) (make-i/o-read-error . q4cf7) (make-i/o-port-error . q4dad) (make-i/o-invalid-position-error . q4d23) (make-i/o-filename-error . q4d3e) (make-i/o-file-protection-error . q4d57) (make-i/o-file-is-read-only-error . q4d6c) (make-i/o-file-does-not-exist-error . q4d96) (make-i/o-file-already-exists-error . q4d81) (make-i/o-error . q4ce2) (i/o-write-error? . q4d0e) (i/o-read-error? . q4cf9) (i/o-port-error? . q4db1) (i/o-invalid-position-error? . q4d27) (i/o-filename-error? . q4d42) (i/o-file-protection-error? . q4d59) (i/o-file-is-read-only-error? . q4d6e) (i/o-file-does-not-exist-error? . q4d98) (i/o-file-already-exists-error? . q4d83) (i/o-error? . q4ce4) (i/o-error-position . q4d29) (i/o-error-port . q4db3) (i/o-error-filename . q4d44) (&i/o-port . q50f3) (&i/o-file-does-not-exist . q50f2) (&i/o-file-already-exists . q50f1) (&i/o-file-is-read-only . q50f0) (&i/o-file-protection . q50ef) (&i/o-filename . q50ee) (&i/o-invalid-position . q50ed) (&i/o-write . q50ec) (&i/o-read . q50eb) (&i/o . q50ea)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c8 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . q52e3) (vector-sort . q52e2) (list-sort . q52e1)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53c9 '(rnrs base) '(6) '() '() '() '((zero? . q519a) (vector? . q5199) (vector-set! . q5198) (vector-ref . q5197) (vector-map . q5196) (vector-length . q5195) (vector-for-each . q5194) (vector-fill! . q5193) (vector->list . q5192) (vector . q5191) (values . q5190) (truncate . q518f) (tan . q518e) (symbol? . q518d) (symbol=? . q518c) (symbol->string . q518b) (substring . q518a) (string? . q5189) (string>? . q5188) (string>=? . q5187) (string=? . q5186) (string<? . q5185) (string<=? . q5184) (string-ref . q5183) (string-length . q5182) (string-for-each . q5181) (string-copy . q5180) (string-append . q517f) (string->symbol . q517e) (string->number . q517d) (string->list . q517c) (string . q517b) (sqrt . q517a) (sin . q5179) (round . q5178) (reverse . q5177) (real? . q5176) (real-valued? . q5175) (real-part . q5174) (rationalize . q5173) (rational? . q5172) (rational-valued? . q5171) (procedure? . q5170) (positive? . q516f) (pair? . q516e) (odd? . q516d) (numerator . q516c) (number? . q516b) (number->string . q516a) (null? . q5169) (not . q5168) (negative? . q5167) (nan? . q5166) (min . q5165) (max . q5164) (map . q5163) (make-vector . q5162) (make-string . q5161) (make-rectangular . q5160) (make-polar . q515f) (magnitude . q515e) (log . q515d) (list? . q515c) (list-tail . q515b) (list-ref . q515a) (list->vector . q5159) (list->string . q5158) (list . q5157) (length . q5156) (lcm . q5155) (integer? . q5154) (integer-valued? . q5153) (integer->char . q5152) (infinite? . q5151) (inexact? . q5150) (inexact . q514f) (imag-part . q514e) (gcd . q514d) (for-each . q514c) (floor . q514b) (finite? . q514a) (expt . q5149) (exp . q5148) (exact? . q5147) (exact-integer-sqrt . q5146) (exact . q5145) (even? . q5144) (error . q5143) (eqv? . q5142) (equal? . q5141) (eq? . q5140) (dynamic-wind . q513f) (div0-and-mod0 . q513e) (mod0 . q513d) (div0 . q513c) (div-and-mod . q513b) (mod . q513a) (div . q5139) (denominator . q5138) (cos . q5137) (cons . q5136) (complex? . q5135) (char? . q5134) (char>? . q5133) (char>=? . q5132) (char=? . q5131) (char<? . q5130) (char<=? . q512f) (char->integer . q512e) (ceiling . q512d) (call-with-values . q512c) (call/cc . q512b) (call-with-current-continuation . q512a) (cddddr . q5129) (cdddar . q5128) (cddadr . q5127) (cddaar . q5126) (cdaddr . q5125) (cdadar . q5124) (cdaadr . q5123) (cdaaar . q5122) (cadddr . q5121) (caddar . q5120) (cadadr . q511f) (cadaar . q511e) (caaddr . q511d) (caadar . q511c) (caaadr . q511b) (caaaar . q511a) (cdddr . q5119) (cddar . q5118) (cdadr . q5117) (cdaar . q5116) (caddr . q5115) (cadar . q5114) (caadr . q5113) (caaar . q5112) (cddr . q5111) (cdar . q5110) (cadr . q510f) (caar . q510e) (cdr . q510d) (car . q510c) (boolean? . q510b) (boolean=? . q510a) (atan . q5109) (assertion-violation . q5108) (asin . q5107) (apply . q5106) (append . q5105) (angle . q5104) (acos . q5103) (abs . q5102) (/ . q5101) (* . q5100) (- . q50ff) (+ . q50fe) (>= . q50fd) (> . q50fc) (= . q50fb) (<= . q50fa) (< . q50f9) (unquote-splicing . q50c6) (unquote . q50c5) (_ . q50c4) (else . q50c3) (=> . q50c2) (... . q50c1) (assert . q50c0) (cond . q50bb) (let* . q50ba) (let . q50b9) (let*-values . q50b8) (let-values . q50b7) (identifier-syntax . q50b6) (quasiquote . q50b3) (syntax-rules . q50b2) (case . q50ad) (or . q50a9) (and . q50a8) (if . q50a7) (letrec* . q50a6) (letrec . q50a5) (lambda . q50a2) (quote . q509f) (letrec-syntax . q509d) (let-syntax . q509c) (set! . q509b) (begin . q5099) (define-syntax . q5097) (define . q5096)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53ca '(rnrs lists) '(6) '() '() '() '((remove . q5270) (remv . q526f) (remp . q526e) (remq . q526d) (partition . q526c) (memv . q526b) (memq . q526a) (memp . q5269) (member . q5268) (exists . q5267) (for-all . q5266) (fold-right . q5265) (fold-left . q5264) (find . q5263) (filter . q5262) (cons* . q5261) (assv . q5260) (assq . q525f) (assp . q525e) (assoc . q525d)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53cb '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . q52cb) (call-with-input-file . q52ca) (write-char . q52c9) (write . q52c8) (with-output-to-file . q52c7) (with-input-from-file . q52c6) (read-char . q52c5) (read . q52c4) (peek-char . q52c3) (open-output-file . q52c2) (open-input-file . q52c1) (newline . q52c0) (display . q52bf) (close-output-port . q52be) (close-input-port . q52bd) (eof-object? . q52bc) (eof-object . q52bb) (current-error-port . q52ba) (current-output-port . q52b9) (current-input-port . q52b8) (output-port? . q52b7) (input-port? . q52b6) (make-i/o-write-error . q4d0c) (make-i/o-read-error . q4cf7) (make-i/o-port-error . q4dad) (make-i/o-invalid-position-error . q4d23) (make-i/o-filename-error . q4d3e) (make-i/o-file-protection-error . q4d57) (make-i/o-file-is-read-only-error . q4d6c) (make-i/o-file-does-not-exist-error . q4d96) (make-i/o-file-already-exists-error . q4d81) (make-i/o-error . q4ce2) (i/o-write-error? . q4d0e) (i/o-read-error? . q4cf9) (i/o-port-error? . q4db1) (i/o-invalid-position-error? . q4d27) (i/o-filename-error? . q4d42) (i/o-file-protection-error? . q4d59) (i/o-file-is-read-only-error? . q4d6e) (i/o-file-does-not-exist-error? . q4d98) (i/o-file-already-exists-error? . q4d83) (i/o-error? . q4ce4) (i/o-error-position . q4d29) (i/o-error-port . q4db3) (i/o-error-filename . q4d44) (&i/o-port . q50f3) (&i/o-file-does-not-exist . q50f2) (&i/o-file-already-exists . q50f1) (&i/o-file-is-read-only . q50f0) (&i/o-file-protection . q50ef) (&i/o-filename . q50ee) (&i/o-invalid-position . q50ed) (&i/o-write . q50ec) (&i/o-read . q50eb) (&i/o . q50ea)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53cc '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . q528c) (utf32->string . q5241) (utf16->string . q5240) (utf8->string . q523f) (uint-list->bytevector . q523e) (u8-list->bytevector . q523d) (string->utf8 . q523c) (string->utf32 . q523b) (string->utf16 . q523a) (sint-list->bytevector . q5239) (native-endianness . q5238) (bytevector? . q5237) (bytevector=? . q5236) (bytevector-uint-set! . q5235) (bytevector-uint-ref . q5234) (bytevector-u8-set! . q5233) (bytevector-u8-ref . q5232) (bytevector-u64-set! . q5231) (bytevector-u64-ref . q5230) (bytevector-u64-native-set! . q522f) (bytevector-u64-native-ref . q522e) (bytevector-u32-set! . q522d) (bytevector-u32-ref . q522c) (bytevector-u32-native-set! . q522b) (bytevector-u32-native-ref . q522a) (bytevector-u16-set! . q5229) (bytevector-u16-ref . q5228) (bytevector-u16-native-set! . q5227) (bytevector-u16-native-ref . q5226) (bytevector-sint-set! . q5225) (bytevector-sint-ref . q5224) (bytevector-s8-set! . q5223) (bytevector-s8-ref . q5222) (bytevector-s64-set! . q5221) (bytevector-s64-ref . q5220) (bytevector-s64-native-set! . q521f) (bytevector-s64-native-ref . q521e) (bytevector-s32-set! . q521d) (bytevector-s32-ref . q521c) (bytevector-s32-native-set! . q521b) (bytevector-s32-native-ref . q521a) (bytevector-s16-set! . q5219) (bytevector-s16-ref . q5218) (bytevector-s16-native-set! . q5217) (bytevector-s16-native-ref . q5216) (bytevector-length . q5215) (bytevector-ieee-single-ref . q5214) (bytevector-ieee-single-set! . q5213) (bytevector-ieee-single-native-set! . q5212) (bytevector-ieee-single-native-ref . q5211) (bytevector-ieee-double-set! . q5210) (bytevector-ieee-double-ref . q520f) (bytevector-ieee-double-native-set! . q520e) (bytevector-ieee-double-native-ref . q520d) (bytevector-fill! . q520c) (bytevector-copy! . q520b) (bytevector-copy . q520a) (bytevector->uint-list . q5209) (bytevector->u8-list . q5208) (bytevector->sint-list . q5207) (endianness . q50bf)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53cd '(rnrs unicode) '(6) '() '() '() '((string-upcase . q5313) (string-titlecase . q5312) (string-normalize-nfkd . q5311) (string-normalize-nfkc . q5310) (string-normalize-nfd . q530f) (string-normalize-nfc . q530e) (string-foldcase . q530d) (string-downcase . q530c) (string-ci>? . q530b) (string-ci>=? . q530a) (string-ci=? . q5309) (string-ci<? . q5308) (string-ci<=? . q5307) (char-whitespace? . q5306) (char-upper-case? . q5305) (char-title-case? . q5304) (char-numeric? . q5303) (char-lower-case? . q5302) (char-general-category . q5301) (char-upcase . q5300) (char-titlecase . q52ff) (char-foldcase . q52fe) (char-downcase . q52fd) (char-ci>? . q52fc) (char-ci>=? . q52fb) (char-ci=? . q52fa) (char-ci<? . q52f9) (char-ci<=? . q52f8) (char-alphabetic? . q52f7)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53ce '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . q5256) (raise-continuable . q5255) (raise . q5254) (guard . q50cb) (else . q50c3) (=> . q50c2)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53cf '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . q51ab) (bitwise-reverse-bit-field . q51aa) (bitwise-length . q51a9) (bitwise-if . q51a8) (bitwise-first-bit-set . q51a7) (bitwise-copy-bit-field . q51a6) (bitwise-copy-bit . q51a5) (bitwise-bit-set? . q51a4) (bitwise-bit-field . q51a3) (bitwise-bit-count . q51a2) (bitwise-xor . q51a1) (bitwise-ior . q51a0) (bitwise-and . q519f) (bitwise-not . q519e) (bitwise-arithmetic-shift-right . q519d) (bitwise-arithmetic-shift-left . q519c) (bitwise-arithmetic-shift . q519b)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d0 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . q51d8) (fxxor . q51d7) (fxrotate-bit-field . q51d6) (fxreverse-bit-field . q51d5) (fxpositive? . q51d4) (fxodd? . q51d3) (fxnot . q51d2) (fxnegative? . q51d1) (fxmod0 . q51d0) (fxmod . q51cf) (fxmin . q51ce) (fxmax . q51cd) (fxlength . q51cc) (fxior . q51cb) (fxif . q51ca) (fxfirst-bit-set . q51c9) (fxeven? . q51c8) (fxdiv0-and-mod0 . q51c7) (fxdiv0 . q51c6) (fxdiv-and-mod . q51c5) (fxdiv . q51c4) (fxcopy-bit-field . q51c3) (fxcopy-bit . q51c2) (fxbit-set? . q51c1) (fxbit-field . q51c0) (fxbit-count . q51bf) (fxarithmetic-shift-right . q51be) (fxarithmetic-shift-left . q51bd) (fxarithmetic-shift . q51bc) (fxand . q51bb) (fx>? . q51ba) (fx>=? . q51b9) (fx=? . q51b8) (fx<? . q51b7) (fx<=? . q51b6) (fx-/carry . q51b5) (fx- . q51b4) (fx+/carry . q51b3) (fx+ . q51b2) (fx*/carry . q51b1) (fx* . q51b0) (greatest-fixnum . q51af) (least-fixnum . q51ae) (fixnum-width . q51ad) (fixnum? . q51ac)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d1 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . q4e0d) (no-infinities-violation? . q4df8) (make-no-nans-violation . q4e0b) (make-no-infinities-violation . q4df6) (real->flonum . q5206) (flzero? . q5205) (fltruncate . q5204) (fltan . q5203) (flsqrt . q5202) (flsin . q5201) (flround . q5200) (flpositive? . q51ff) (flonum? . q51fe) (flodd? . q51fd) (flnumerator . q51fc) (flnegative? . q51fb) (flnan? . q51fa) (flmod0 . q51f9) (flmod . q51f8) (flmin . q51f7) (flmax . q51f6) (fllog . q51f5) (flinteger? . q51f4) (flinfinite? . q51f3) (flfloor . q51f2) (flfinite? . q51f1) (flexpt . q51f0) (flexp . q51ef) (fleven? . q51ee) (fldiv0-and-mod0 . q51ed) (fldiv0 . q51ec) (fldiv-and-mod . q51eb) (fldiv . q51ea) (fldenominator . q51e9) (flcos . q51e8) (flceiling . q51e7) (flatan . q51e6) (flasin . q51e5) (flacos . q51e4) (flabs . q51e3) (fl>? . q51e2) (fl>=? . q51e1) (fl=? . q51e0) (fl<? . q51df) (fl<=? . q51de) (fl/ . q51dd) (fl- . q51dc) (fl+ . q51db) (fl* . q51da) (fixnum->flonum . q51d9) (&no-nans . q50f7) (&no-infinities . q50f6)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d2 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . q52e0) (string-ci-hash . q52df) (string-hash . q52de) (equal-hash . q52dd) (hashtable-equivalence-function . q52dc) (make-hashtable . q52db) (hashtable-hash-function . q52da) (make-eqv-hashtable . q52d9) (make-eq-hashtable . q52d8) (hashtable? . q52d7) (hashtable-update! . q52d6) (hashtable-size . q52d5) (hashtable-set! . q52d4) (hashtable-ref . q52d3) (hashtable-mutable? . q52d2) (hashtable-keys . q52d1) (hashtable-entries . q52d0) (hashtable-delete! . q52cf) (hashtable-copy . q52ce) (hashtable-contains? . q52cd) (hashtable-clear! . q52cc)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d3 '(rnrs io ports) '(6) '() '() '() '((eof-object? . q52bc) (eof-object . q52bb) (current-error-port . q52ba) (current-output-port . q52b9) (current-input-port . q52b8) (output-port? . q52b7) (input-port? . q52b6) (utf-8-codec . q52b5) (utf-16-codec . q52b4) (transcoder-error-handling-mode . q52b3) (transcoder-eol-style . q52b2) (transcoder-codec . q52b1) (transcoded-port . q52b0) (textual-port? . q52af) (string->bytevector . q52ae) (standard-output-port . q52ad) (standard-input-port . q52ac) (standard-error-port . q52ab) (set-port-position! . q52aa) (put-u8 . q52a9) (put-string . q52a8) (put-datum . q52a7) (put-char . q52a6) (put-bytevector . q52a5) (port? . q52a4) (port-transcoder . q52a3) (port-position . q52a2) (port-has-set-port-position!? . q52a1) (port-has-port-position? . q52a0) (port-eof? . q529f) (output-port-buffer-mode . q529e) (open-string-output-port . q529d) (open-string-input-port . q529c) (open-file-output-port . q529b) (open-file-input/output-port . q529a) (open-file-input-port . q5299) (open-bytevector-output-port . q5298) (open-bytevector-input-port . q5297) (native-transcoder . q5296) (native-eol-style . q5295) (make-transcoder . q5294) (latin-1-codec . q5293) (make-i/o-write-error . q4d0c) (make-i/o-read-error . q4cf7) (make-i/o-port-error . q4dad) (make-i/o-invalid-position-error . q4d23) (make-i/o-filename-error . q4d3e) (make-i/o-file-protection-error . q4d57) (make-i/o-file-is-read-only-error . q4d6c) (make-i/o-file-does-not-exist-error . q4d96) (make-i/o-file-already-exists-error . q4d81) (make-i/o-error . q4ce2) (make-i/o-encoding-error . q4ddd) (make-i/o-decoding-error . q4dc6) (make-custom-textual-output-port . q5292) (make-custom-textual-input/output-port . q5291) (make-custom-textual-input-port . q5290) (make-custom-binary-output-port . q528f) (make-custom-binary-input/output-port . q528e) (make-custom-binary-input-port . q528d) (lookahead-u8 . q528b) (lookahead-char . q528a) (i/o-write-error? . q4d0e) (i/o-read-error? . q4cf9) (i/o-port-error? . q4db1) (i/o-invalid-position-error? . q4d27) (i/o-filename-error? . q4d42) (i/o-file-protection-error? . q4d59) (i/o-file-is-read-only-error? . q4d6e) (i/o-file-does-not-exist-error? . q4d98) (i/o-file-already-exists-error? . q4d83) (i/o-error? . q4ce4) (i/o-error-position . q4d29) (i/o-error-port . q4db3) (i/o-error-filename . q4d44) (i/o-encoding-error? . q4de1) (i/o-encoding-error-char . q4de3) (i/o-decoding-error? . q4dc8) (get-u8 . q5289) (get-string-n! . q5288) (get-string-n . q5287) (get-string-all . q5286) (get-line . q5285) (get-datum . q5284) (get-char . q5283) (get-bytevector-some . q5282) (get-bytevector-n! . q5281) (get-bytevector-n . q5280) (get-bytevector-all . q527f) (flush-output-port . q527e) (close-port . q527d) (call-with-string-output-port . q525c) (call-with-port . q525b) (call-with-bytevector-output-port . q525a) (bytevector->string . q5259) (buffer-mode? . q5258) (binary-port? . q5257) (&i/o-encoding . q50f5) (&i/o-decoding . q50f4) (&i/o-port . q50f3) (&i/o-file-does-not-exist . q50f2) (&i/o-file-already-exists . q50f1) (&i/o-file-is-read-only . q50f0) (&i/o-file-protection . q50ef) (&i/o-filename . q50ee) (&i/o-invalid-position . q50ed) (&i/o-write . q50ec) (&i/o-read . q50eb) (&i/o . q50ea) (error-handling-mode . q50cf) (file-options . q50ce) (buffer-mode . q50cd) (eol-style . q50cc)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d4 '(rnrs enums) '(6) '() '() '() '((make-enumeration . q5253) (enum-set=? . q5252) (enum-set-universe . q5251) (enum-set-union . q5250) (enum-set-subset? . q524f) (enum-set-projection . q524e) (enum-set-member? . q524d) (enum-set-intersection . q524c) (enum-set-indexer . q524b) (enum-set-difference . q524a) (enum-set-constructor . q5249) (enum-set-complement . q5248) (enum-set->list . q5247) (define-enumeration . q50da)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d5 '(rnrs conditions) '(6) '() '() '() '((who-condition? . q4c58) (warning? . q4bd0) (violation? . q4c0f) (undefined-violation? . q4ccf) (syntax-violation? . q4cb6) (syntax-violation-subform . q4cba) (syntax-violation-form . q4cb8) (syntax-violation . q3128) (simple-conditions . q5246) (serious-condition? . q4be5) (non-continuable-violation? . q4c6f) (message-condition? . q4bb9) (make-who-condition . q4c54) (make-warning . q4bce) (make-violation . q4c0d) (make-undefined-violation . q4ccd) (make-syntax-violation . q4cb0) (make-serious-condition . q4be3) (make-non-continuable-violation . q4c6d) (make-message-condition . q4bb5) (make-lexical-violation . q4c97) (make-irritants-condition . q4c39) (make-implementation-restriction-violation . q4c82) (make-error . q4bf8) (make-assertion-violation . q4c22) (lexical-violation? . q4c99) (irritants-condition? . q4c3d) (implementation-restriction-violation? . q4c84) (error? . q4bfa) (condition-who . q4c5a) (condition-predicate . q5245) (condition-message . q4bbb) (condition-irritants . q4c3f) (condition-accessor . q5244) (condition . q5243) (assertion-violation? . q4c24) (condition? . q5242) (&undefined . q50e9) (&syntax . q50e8) (&lexical . q50e7) (&implementation-restriction . q50e6) (&non-continuable . q50e5) (&who . q50e4) (&irritants . q50e3) (&assertion . q50e2) (&violation . q50e1) (&error . q50e0) (&serious . q50df) (&warning . q50de) (&message . q50dd) (&condition . q50dc) (define-condition-type . q50db)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d6 '(rnrs records inspection) '(6) '() '() '() '((record? . q52ef) (record-type-uid . q52ee) (record-type-sealed? . q52ed) (record-type-parent . q52ec) (record-type-opaque? . q52eb) (record-type-name . q52ea) (record-type-generative? . q52e9) (record-type-field-names . q52e8) (record-rtd . q52e7) (record-field-mutable? . q52e6)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d7 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . q52f6) (record-predicate . q52f5) (record-mutator . q52f4) (record-constructor . q52f3) (record-accessor . q52f2) (make-record-type-descriptor . q52f1) (make-record-constructor-descriptor . q52f0)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d8 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . q50d9) (parent-rtd . q50d8) (nongenerative . q50d7) (opaque . q50d6) (sealed . q50d5) (protocol . q50d4) (parent . q50d3) (immutable . q50d2) (mutable . q50d1) (fields . q50d0) (record-constructor-descriptor . q50af) (record-type-descriptor . q50ae)) '() values values '#f '#f '#t '#f) (q2c6d@q2ab9@install-library 'q53d9 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . q4e11) (&no-nans-rtd . q4e0f) (&no-infinities-rcd . q4dfc) (&no-infinities-rtd . q4dfa) (&i/o-encoding-rcd . q4de7) (&i/o-encoding-rtd . q4de5) (&i/o-decoding-rcd . q4dcc) (&i/o-decoding-rtd . q4dca) (&i/o-port-rcd . q4db7) (&i/o-port-rtd . q4db5) (&i/o-file-does-not-exist-rcd . q4d9c) (&i/o-file-does-not-exist-rtd . q4d9a) (&i/o-file-already-exists-rcd . q4d87) (&i/o-file-already-exists-rtd . q4d85) (&i/o-file-is-read-only-rcd . q4d72) (&i/o-file-is-read-only-rtd . q4d70) (&i/o-file-protection-rcd . q4d5d) (&i/o-file-protection-rtd . q4d5b) (&i/o-filename-rcd . q4d48) (&i/o-filename-rtd . q4d46) (&i/o-invalid-position-rcd . q4d2d) (&i/o-invalid-position-rtd . q4d2b) (&i/o-write-rcd . q4d12) (&i/o-write-rtd . q4d10) (&i/o-read-rcd . q4cfd) (&i/o-read-rtd . q4cfb) (&i/o-rcd . q4ce8) (&i/o-rtd . q4ce6) (&undefined-rcd . q4cd3) (&undefined-rtd . q4cd1) (&syntax-rcd . q4cbe) (&syntax-rtd . q4cbc) (&lexical-rcd . q4c9d) (&lexical-rtd . q4c9b) (&implementation-restriction-rcd . q4c88) (&implementation-restriction-rtd . q4c86) (&non-continuable-rcd . q4c73) (&non-continuable-rtd . q4c71) (&who-rcd . q4c5e) (&who-rtd . q4c5c) (&irritants-rcd . q4c43) (&irritants-rtd . q4c41) (&assertion-rcd . q4c28) (&assertion-rtd . q4c26) (&violation-rcd . q4c13) (&violation-rtd . q4c11) (&error-rcd . q4bfe) (&error-rtd . q4bfc) (&serious-rcd . q4be9) (&serious-rtd . q4be7) (&warning-rcd . q4bd4) (&warning-rtd . q4bd2) (&message-rcd . q4bbf) (&message-rtd . q4bbd) (&condition-rcd . q4b60) (&condition-rtd . q4b5e) (syntax-error . q3124) (syntax-dispatch . q3048) (pretty-print . q53b9) (eval-core . q53b8) (set-symbol-value! . q53b7) (symbol-value . q53b6) (gensym . q53b5) (void . q53b4) (load . q4f1e) (interaction-environment . q3134) (char-ready? . q53b3) (regexp? . q53b2) (read-line . q53b1) (gensym-prefix-set! . q53b0) (ungensym . q53af) (alist->eq-hash-table . q53ae) (assoc-ref . q53ad) (print . q53ac) (format . q53ab) (host-os . q53aa) (library-path . q2a98) (standard-library-path . q53a9) (file-newer? . q53a8) (stat-mtime . q53a7) (write-to-file . q53a6) (file->list . q53a5) (file->string . q53a4) (digit->integer . q53a3) (call-with-string-input-port . q53a2) (call-with-string-io . q53a1) (string-split . q53a0) (bytevector-for-each . q539f) (string->regexp . q539e) (rxmatch . q539d) (regexp-replace-all . q539c) (hashtable-for-each . q539b) (mosh-cache-dir . q2883) (call-process . q539a) (local-tz-offset . q5399) (microseconds . q5398) (directory-list . q5397) (set-current-directory! . q5396) (expand-path . q5395) (current-directory . q5394) (%spawn . q5393) (%waitpid . q5392) (simple-struct-name . q5391) (simple-struct-set! . q5390) (simple-struct-ref . q538f) (make-simple-struct . q538e) (simple-struct? . q538d) (pointer-ref-c-int64 . q538c) (pointer-ref-c-int32 . q538b) (pointer-ref-c-int16 . q538a) (pointer-ref-c-int8 . q5389) (pointer-ref-c-uint64 . q5388) (pointer-ref-c-uint32 . q5387) (pointer-ref-c-uint16 . q5386) (pointer-ref-c-uint8 . q5385) (pointer-set-c-uint64! . q5384) (pointer-set-c-uint32! . q5383) (pointer-set-c-uint16! . q5382) (pointer-set-c-uint8! . q5381) (pointer-set-c-int64! . q5380) (pointer-set-c-int32! . q537f) (pointer-set-c-int16! . q537e) (pointer-set-c-int8! . q537d) (pointer-set-c-pointer! . q537c) (pointer-set-c-double! . q537b) (pointer-set-c-float! . q537a) (pointer-set-c-long-long! . q5379) (pointer-set-c-long! . q5378) (pointer-set-c-int! . q5377) (pointer-set-c-short! . q5376) (pointer-set-c-char! . q5375) (pointer-ref-c-pointer . q5374) (pointer-ref-c-double . q5373) (pointer-ref-c-float . q5372) (pointer-ref-c-unsigned-long-long . q5371) (pointer-ref-c-signed-long-long . q5370) (pointer-ref-c-unsigned-long . q536f) (pointer-ref-c-signed-long . q536e) (pointer-ref-c-unsigned-int . q536d) (pointer-ref-c-signed-int . q536c) (pointer-ref-c-unsigned-short . q536b) (pointer-ref-c-signed-short . q536a) (pointer-ref-c-unsigned-char . q5369) (pointer-ref-c-signed-char . q5368) (pointer->integer . q5367) (integer->pointer . q5366) (pointer? . q5365) (shared-errno . q5364) (%ffi-supported? . q5363) (%ffi-pointer->string . q5362) (%ffi-call->string-or-zero . q5361) (%ffi-call->double . q5360) (%ffi-call->void* . q535f) (%ffi-call->void . q535e) (%ffi-call->char . q535d) (%ffi-call->int . q535c) (%ffi-lookup . q535b) (%ffi-open . q535a) (%fork . q5359) (%pipe . q5358) (p . q5357) (open-output-string . q5356) (get-output-string . q5355) (file-stat-ctime . q5354) (file-stat-atime . q5353) (file-stat-mtime . q5352) (file-size-in-bytes . q5351) (file-writable? . q5350) (file-executable? . q534f) (file-readable? . q534e) (file-regular? . q534d) (file-symbolic-link? . q534c) (file-directory? . q534b) (create-symbolic-link . q534a) (rename-file . q5349) (delete-directory . q5348) (create-directory . q5347) (create-mosh-cache-dir . q5346) (get-environment-variables . q5345) (get-environment-variable . q5344) (join-wraps . q5343) (id->real-label . q5342) (same-marks? . q5341) (same-marks*? . q5340) (get-timeofday . q533f) (get-command-line . q533e) (sys-display . q533d) (whereis . q533c) (register . q533b) (vm-join! . q533a) (vm-set-value! . q5339) (vm? . q5338) (main-vm? . q5337) (vm-eval . q5336) (vm-self . q5335) (vm-start! . q5334) (make-vm . q5333) (mutex-try-lock! . q5332) (mutex-unlock! . q5331) (mutex-lock! . q5330) (mutex? . q532f) (make-mutex . q532e) (condition-variable-notify-all! . q532d) (condition-variable-notify! . q532c) (condition-variable-wait! . q532b) (make-condition-variable . q532a) (mosh-executable-path . q5329) (make-file-options . q5328) (source-info . q5327) (make-compiler-instruction . q5326) (make-instruction . q5325) (set-source-info! . q5324) (bignum? . q5323) (fast-equal? . q5322) (fasl-read . q5321) (fasl-write . q5320) (time-usage . q531f) (os-constant . q531e) (make-parameter . q2881) (socket-port . q531d) (socket-shutdown . q531c) (socket-close . q531b) (socket-send . q531a) (socket-recv! . q5319) (socket-recv . q5318) (make-server-socket . q5317) (make-client-socket . q5316) (socket-accept . q5315) (socket? . q5314) (string-upcase . q5313) (string-titlecase . q5312) (string-normalize-nfkd . q5311) (string-normalize-nfkc . q5310) (string-normalize-nfd . q530f) (string-normalize-nfc . q530e) (string-foldcase . q530d) (string-downcase . q530c) (string-ci>? . q530b) (string-ci>=? . q530a) (string-ci=? . q5309) (string-ci<? . q5308) (string-ci<=? . q5307) (char-whitespace? . q5306) (char-upper-case? . q5305) (char-title-case? . q5304) (char-numeric? . q5303) (char-lower-case? . q5302) (char-general-category . q5301) (char-upcase . q5300) (char-titlecase . q52ff) (char-foldcase . q52fe) (char-downcase . q52fd) (char-ci>? . q52fc) (char-ci>=? . q52fb) (char-ci=? . q52fa) (char-ci<? . q52f9) (char-ci<=? . q52f8) (char-alphabetic? . q52f7) (make-variable-transformer . q2e75) (identifier? . q312a) (generate-temporaries . q3116) (free-identifier=? . q3118) (syntax->datum . q312e) (datum->syntax . q312c) (bound-identifier=? . q311a) (record-type-descriptor? . q52f6) (record-predicate . q52f5) (record-mutator . q52f4) (record-constructor . q52f3) (record-accessor . q52f2) (make-record-type-descriptor . q52f1) (make-record-constructor-descriptor . q52f0) (record? . q52ef) (record-type-uid . q52ee) (record-type-sealed? . q52ed) (record-type-parent . q52ec) (record-type-opaque? . q52eb) (record-type-name . q52ea) (record-type-generative? . q52e9) (record-type-field-names . q52e8) (record-rtd . q52e7) (record-field-mutable? . q52e6) (delete-file . q52e5) (file-exists? . q52e4) (vector-sort! . q52e3) (vector-sort . q52e2) (list-sort . q52e1) (symbol-hash . q52e0) (string-ci-hash . q52df) (string-hash . q52de) (equal-hash . q52dd) (hashtable-equivalence-function . q52dc) (make-hashtable . q52db) (hashtable-hash-function . q52da) (make-eqv-hashtable . q52d9) (make-eq-hashtable . q52d8) (hashtable? . q52d7) (hashtable-update! . q52d6) (hashtable-size . q52d5) (hashtable-set! . q52d4) (hashtable-ref . q52d3) (hashtable-mutable? . q52d2) (hashtable-keys . q52d1) (hashtable-entries . q52d0) (hashtable-delete! . q52cf) (hashtable-copy . q52ce) (hashtable-contains? . q52cd) (hashtable-clear! . q52cc) (call-with-output-file . q52cb) (call-with-input-file . q52ca) (write-char . q52c9) (write . q52c8) (with-output-to-file . q52c7) (with-input-from-file . q52c6) (read-char . q52c5) (read . q52c4) (peek-char . q52c3) (open-output-file . q52c2) (open-input-file . q52c1) (newline . q52c0) (display . q52bf) (close-output-port . q52be) (close-input-port . q52bd) (eof-object? . q52bc) (eof-object . q52bb) (current-error-port . q52ba) (current-output-port . q52b9) (current-input-port . q52b8) (output-port? . q52b7) (input-port? . q52b6) (utf-8-codec . q52b5) (utf-16-codec . q52b4) (transcoder-error-handling-mode . q52b3) (transcoder-eol-style . q52b2) (transcoder-codec . q52b1) (transcoded-port . q52b0) (textual-port? . q52af) (string->bytevector . q52ae) (standard-output-port . q52ad) (standard-input-port . q52ac) (standard-error-port . q52ab) (set-port-position! . q52aa) (put-u8 . q52a9) (put-string . q52a8) (put-datum . q52a7) (put-char . q52a6) (put-bytevector . q52a5) (port? . q52a4) (port-transcoder . q52a3) (port-position . q52a2) (port-has-set-port-position!? . q52a1) (port-has-port-position? . q52a0) (port-eof? . q529f) (output-port-buffer-mode . q529e) (open-string-output-port . q529d) (open-string-input-port . q529c) (open-file-output-port . q529b) (open-file-input/output-port . q529a) (open-file-input-port . q5299) (open-bytevector-output-port . q5298) (open-bytevector-input-port . q5297) (native-transcoder . q5296) (native-eol-style . q5295) (make-transcoder . q5294) (latin-1-codec . q5293) (make-i/o-write-error . q4d0c) (make-i/o-read-error . q4cf7) (make-i/o-port-error . q4dad) (make-i/o-invalid-position-error . q4d23) (make-i/o-filename-error . q4d3e) (make-i/o-file-protection-error . q4d57) (make-i/o-file-is-read-only-error . q4d6c) (make-i/o-file-does-not-exist-error . q4d96) (make-i/o-file-already-exists-error . q4d81) (make-i/o-error . q4ce2) (make-i/o-encoding-error . q4ddd) (make-i/o-decoding-error . q4dc6) (make-custom-textual-output-port . q5292) (make-custom-textual-input/output-port . q5291) (make-custom-textual-input-port . q5290) (make-custom-binary-output-port . q528f) (make-custom-binary-input/output-port . q528e) (make-custom-binary-input-port . q528d) (make-bytevector . q528c) (lookahead-u8 . q528b) (lookahead-char . q528a) (i/o-write-error? . q4d0e) (i/o-read-error? . q4cf9) (i/o-port-error? . q4db1) (i/o-invalid-position-error? . q4d27) (i/o-filename-error? . q4d42) (i/o-file-protection-error? . q4d59) (i/o-file-is-read-only-error? . q4d6e) (i/o-file-does-not-exist-error? . q4d98) (i/o-file-already-exists-error? . q4d83) (i/o-error? . q4ce4) (i/o-error-position . q4d29) (i/o-error-port . q4db3) (i/o-error-filename . q4d44) (i/o-encoding-error? . q4de1) (i/o-encoding-error-char . q4de3) (i/o-decoding-error? . q4dc8) (get-u8 . q5289) (get-string-n! . q5288) (get-string-n . q5287) (get-string-all . q5286) (get-line . q5285) (get-datum . q5284) (get-char . q5283) (get-bytevector-some . q5282) (get-bytevector-n! . q5281) (get-bytevector-n . q5280) (get-bytevector-all . q527f) (flush-output-port . q527e) (close-port . q527d) (scheme-report-environment . q3104) (quotient . q527c) (null-environment . q3102) (remainder . q527b) (modulo . q527a) (inexact->exact . q5279) (force . q5278) (exact->inexact . q5277) (make-promise . q5276) (exit . q5275) (command-line . q4f18) (string-fill! . q5274) (string-set! . q5273) (set-cdr! . q5272) (set-car! . q5271) (remove . q5270) (remv . q526f) (remp . q526e) (remq . q526d) (partition . q526c) (memv . q526b) (memq . q526a) (memp . q5269) (member . q5268) (exists . q5267) (for-all . q5266) (fold-right . q5265) (fold-left . q5264) (find . q5263) (filter . q5262) (cons* . q5261) (assv . q5260) (assq . q525f) (assp . q525e) (assoc . q525d) (call-with-string-output-port . q525c) (call-with-port . q525b) (call-with-bytevector-output-port . q525a) (bytevector->string . q5259) (buffer-mode? . q5258) (binary-port? . q5257) (with-exception-handler . q5256) (raise-continuable . q5255) (raise . q5254) (eval . q3108) (environment . q3100) (make-enumeration . q5253) (enum-set=? . q5252) (enum-set-universe . q5251) (enum-set-union . q5250) (enum-set-subset? . q524f) (enum-set-projection . q524e) (enum-set-member? . q524d) (enum-set-intersection . q524c) (enum-set-indexer . q524b) (enum-set-difference . q524a) (enum-set-constructor . q5249) (enum-set-complement . q5248) (enum-set->list . q5247) (who-condition? . q4c58) (warning? . q4bd0) (violation? . q4c0f) (undefined-violation? . q4ccf) (syntax-violation? . q4cb6) (syntax-violation-subform . q4cba) (syntax-violation-form . q4cb8) (syntax-violation . q3128) (simple-conditions . q5246) (serious-condition? . q4be5) (non-continuable-violation? . q4c6f) (message-condition? . q4bb9) (make-who-condition . q4c54) (make-warning . q4bce) (make-violation . q4c0d) (make-undefined-violation . q4ccd) (make-syntax-violation . q4cb0) (make-serious-condition . q4be3) (make-non-continuable-violation . q4c6d) (make-message-condition . q4bb5) (make-lexical-violation . q4c97) (make-irritants-condition . q4c39) (make-implementation-restriction-violation . q4c82) (make-error . q4bf8) (make-assertion-violation . q4c22) (lexical-violation? . q4c99) (irritants-condition? . q4c3d) (implementation-restriction-violation? . q4c84) (error? . q4bfa) (condition-who . q4c5a) (condition-predicate . q5245) (condition-message . q4bbb) (condition-irritants . q4c3f) (condition-accessor . q5244) (condition . q5243) (assertion-violation? . q4c24) (condition? . q5242) (utf32->string . q5241) (utf16->string . q5240) (utf8->string . q523f) (uint-list->bytevector . q523e) (u8-list->bytevector . q523d) (string->utf8 . q523c) (string->utf32 . q523b) (string->utf16 . q523a) (sint-list->bytevector . q5239) (native-endianness . q5238) (bytevector? . q5237) (bytevector=? . q5236) (bytevector-uint-set! . q5235) (bytevector-uint-ref . q5234) (bytevector-u8-set! . q5233) (bytevector-u8-ref . q5232) (bytevector-u64-set! . q5231) (bytevector-u64-ref . q5230) (bytevector-u64-native-set! . q522f) (bytevector-u64-native-ref . q522e) (bytevector-u32-set! . q522d) (bytevector-u32-ref . q522c) (bytevector-u32-native-set! . q522b) (bytevector-u32-native-ref . q522a) (bytevector-u16-set! . q5229) (bytevector-u16-ref . q5228) (bytevector-u16-native-set! . q5227) (bytevector-u16-native-ref . q5226) (bytevector-sint-set! . q5225) (bytevector-sint-ref . q5224) (bytevector-s8-set! . q5223) (bytevector-s8-ref . q5222) (bytevector-s64-set! . q5221) (bytevector-s64-ref . q5220) (bytevector-s64-native-set! . q521f) (bytevector-s64-native-ref . q521e) (bytevector-s32-set! . q521d) (bytevector-s32-ref . q521c) (bytevector-s32-native-set! . q521b) (bytevector-s32-native-ref . q521a) (bytevector-s16-set! . q5219) (bytevector-s16-ref . q5218) (bytevector-s16-native-set! . q5217) (bytevector-s16-native-ref . q5216) (bytevector-length . q5215) (bytevector-ieee-single-ref . q5214) (bytevector-ieee-single-set! . q5213) (bytevector-ieee-single-native-set! . q5212) (bytevector-ieee-single-native-ref . q5211) (bytevector-ieee-double-set! . q5210) (bytevector-ieee-double-ref . q520f) (bytevector-ieee-double-native-set! . q520e) (bytevector-ieee-double-native-ref . q520d) (bytevector-fill! . q520c) (bytevector-copy! . q520b) (bytevector-copy . q520a) (bytevector->uint-list . q5209) (bytevector->u8-list . q5208) (bytevector->sint-list . q5207) (no-nans-violation? . q4e0d) (no-infinities-violation? . q4df8) (make-no-nans-violation . q4e0b) (make-no-infinities-violation . q4df6) (real->flonum . q5206) (flzero? . q5205) (fltruncate . q5204) (fltan . q5203) (flsqrt . q5202) (flsin . q5201) (flround . q5200) (flpositive? . q51ff) (flonum? . q51fe) (flodd? . q51fd) (flnumerator . q51fc) (flnegative? . q51fb) (flnan? . q51fa) (flmod0 . q51f9) (flmod . q51f8) (flmin . q51f7) (flmax . q51f6) (fllog . q51f5) (flinteger? . q51f4) (flinfinite? . q51f3) (flfloor . q51f2) (flfinite? . q51f1) (flexpt . q51f0) (flexp . q51ef) (fleven? . q51ee) (fldiv0-and-mod0 . q51ed) (fldiv0 . q51ec) (fldiv-and-mod . q51eb) (fldiv . q51ea) (fldenominator . q51e9) (flcos . q51e8) (flceiling . q51e7) (flatan . q51e6) (flasin . q51e5) (flacos . q51e4) (flabs . q51e3) (fl>? . q51e2) (fl>=? . q51e1) (fl=? . q51e0) (fl<? . q51df) (fl<=? . q51de) (fl/ . q51dd) (fl- . q51dc) (fl+ . q51db) (fl* . q51da) (fixnum->flonum . q51d9) (fxzero? . q51d8) (fxxor . q51d7) (fxrotate-bit-field . q51d6) (fxreverse-bit-field . q51d5) (fxpositive? . q51d4) (fxodd? . q51d3) (fxnot . q51d2) (fxnegative? . q51d1) (fxmod0 . q51d0) (fxmod . q51cf) (fxmin . q51ce) (fxmax . q51cd) (fxlength . q51cc) (fxior . q51cb) (fxif . q51ca) (fxfirst-bit-set . q51c9) (fxeven? . q51c8) (fxdiv0-and-mod0 . q51c7) (fxdiv0 . q51c6) (fxdiv-and-mod . q51c5) (fxdiv . q51c4) (fxcopy-bit-field . q51c3) (fxcopy-bit . q51c2) (fxbit-set? . q51c1) (fxbit-field . q51c0) (fxbit-count . q51bf) (fxarithmetic-shift-right . q51be) (fxarithmetic-shift-left . q51bd) (fxarithmetic-shift . q51bc) (fxand . q51bb) (fx>? . q51ba) (fx>=? . q51b9) (fx=? . q51b8) (fx<? . q51b7) (fx<=? . q51b6) (fx-/carry . q51b5) (fx- . q51b4) (fx+/carry . q51b3) (fx+ . q51b2) (fx*/carry . q51b1) (fx* . q51b0) (greatest-fixnum . q51af) (least-fixnum . q51ae) (fixnum-width . q51ad) (fixnum? . q51ac) (bitwise-rotate-bit-field . q51ab) (bitwise-reverse-bit-field . q51aa) (bitwise-length . q51a9) (bitwise-if . q51a8) (bitwise-first-bit-set . q51a7) (bitwise-copy-bit-field . q51a6) (bitwise-copy-bit . q51a5) (bitwise-bit-set? . q51a4) (bitwise-bit-field . q51a3) (bitwise-bit-count . q51a2) (bitwise-xor . q51a1) (bitwise-ior . q51a0) (bitwise-and . q519f) (bitwise-not . q519e) (bitwise-arithmetic-shift-right . q519d) (bitwise-arithmetic-shift-left . q519c) (bitwise-arithmetic-shift . q519b) (zero? . q519a) (vector? . q5199) (vector-set! . q5198) (vector-ref . q5197) (vector-map . q5196) (vector-length . q5195) (vector-for-each . q5194) (vector-fill! . q5193) (vector->list . q5192) (vector . q5191) (values . q5190) (truncate . q518f) (tan . q518e) (symbol? . q518d) (symbol=? . q518c) (symbol->string . q518b) (substring . q518a) (string? . q5189) (string>? . q5188) (string>=? . q5187) (string=? . q5186) (string<? . q5185) (string<=? . q5184) (string-ref . q5183) (string-length . q5182) (string-for-each . q5181) (string-copy . q5180) (string-append . q517f) (string->symbol . q517e) (string->number . q517d) (string->list . q517c) (string . q517b) (sqrt . q517a) (sin . q5179) (round . q5178) (reverse . q5177) (real? . q5176) (real-valued? . q5175) (real-part . q5174) (rationalize . q5173) (rational? . q5172) (rational-valued? . q5171) (procedure? . q5170) (positive? . q516f) (pair? . q516e) (odd? . q516d) (numerator . q516c) (number? . q516b) (number->string . q516a) (null? . q5169) (not . q5168) (negative? . q5167) (nan? . q5166) (min . q5165) (max . q5164) (map . q5163) (make-vector . q5162) (make-string . q5161) (make-rectangular . q5160) (make-polar . q515f) (magnitude . q515e) (log . q515d) (list? . q515c) (list-tail . q515b) (list-ref . q515a) (list->vector . q5159) (list->string . q5158) (list . q5157) (length . q5156) (lcm . q5155) (integer? . q5154) (integer-valued? . q5153) (integer->char . q5152) (infinite? . q5151) (inexact? . q5150) (inexact . q514f) (imag-part . q514e) (gcd . q514d) (for-each . q514c) (floor . q514b) (finite? . q514a) (expt . q5149) (exp . q5148) (exact? . q5147) (exact-integer-sqrt . q5146) (exact . q5145) (even? . q5144) (error . q5143) (eqv? . q5142) (equal? . q5141) (eq? . q5140) (dynamic-wind . q513f) (div0-and-mod0 . q513e) (mod0 . q513d) (div0 . q513c) (div-and-mod . q513b) (mod . q513a) (div . q5139) (denominator . q5138) (cos . q5137) (cons . q5136) (complex? . q5135) (char? . q5134) (char>? . q5133) (char>=? . q5132) (char=? . q5131) (char<? . q5130) (char<=? . q512f) (char->integer . q512e) (ceiling . q512d) (call-with-values . q512c) (call/cc . q512b) (call-with-current-continuation . q512a) (cddddr . q5129) (cdddar . q5128) (cddadr . q5127) (cddaar . q5126) (cdaddr . q5125) (cdadar . q5124) (cdaadr . q5123) (cdaaar . q5122) (cadddr . q5121) (caddar . q5120) (cadadr . q511f) (cadaar . q511e) (caaddr . q511d) (caadar . q511c) (caaadr . q511b) (caaaar . q511a) (cdddr . q5119) (cddar . q5118) (cdadr . q5117) (cdaar . q5116) (caddr . q5115) (cadar . q5114) (caadr . q5113) (caaar . q5112) (cddr . q5111) (cdar . q5110) (cadr . q510f) (caar . q510e) (cdr . q510d) (car . q510c) (boolean? . q510b) (boolean=? . q510a) (atan . q5109) (assertion-violation . q5108) (assertion-error . q3122) (asin . q5107) (apply . q5106) (append . q5105) (angle . q5104) (acos . q5103) (abs . q5102) (/ . q5101) (* . q5100) (- . q50ff) (+ . q50fe) (>= . q50fd) (> . q50fc) (= . q50fb) (<= . q50fa) (< . q50f9) (library . q50f8) (&no-nans . q50f7) (&no-infinities . q50f6) (&i/o-encoding . q50f5) (&i/o-decoding . q50f4) (&i/o-port . q50f3) (&i/o-file-does-not-exist . q50f2) (&i/o-file-already-exists . q50f1) (&i/o-file-is-read-only . q50f0) (&i/o-file-protection . q50ef) (&i/o-filename . q50ee) (&i/o-invalid-position . q50ed) (&i/o-write . q50ec) (&i/o-read . q50eb) (&i/o . q50ea) (&undefined . q50e9) (&syntax . q50e8) (&lexical . q50e7) (&implementation-restriction . q50e6) (&non-continuable . q50e5) (&who . q50e4) (&irritants . q50e3) (&assertion . q50e2) (&violation . q50e1) (&error . q50e0) (&serious . q50df) (&warning . q50de) (&message . q50dd) (&condition . q50dc) (define-condition-type . q50db) (define-enumeration . q50da) (define-record-type . q50d9) (parent-rtd . q50d8) (nongenerative . q50d7) (opaque . q50d6) (sealed . q50d5) (protocol . q50d4) (parent . q50d3) (immutable . q50d2) (mutable . q50d1) (fields . q50d0) (error-handling-mode . q50cf) (file-options . q50ce) (buffer-mode . q50cd) (eol-style . q50cc) (guard . q50cb) (trace-define . q50ca) (trace-lambda . q50c9) (unsyntax-splicing . q50c8) (unsyntax . q50c7) (unquote-splicing . q50c6) (unquote . q50c5) (_ . q50c4) (else . q50c3) (=> . q50c2) (... . q50c1) (assert . q50c0) (endianness . q50bf) (delay . q50be) (time . q50bd) (do . q50bc) (cond . q50bb) (let* . q50ba) (let . q50b9) (let*-values . q50b8) (let-values . q50b7) (identifier-syntax . q50b6) (with-syntax . q50b5) (quasisyntax . q50b4) (quasiquote . q50b3) (syntax-rules . q50b2) (include . q50b1) (define-struct . q50b0) (record-constructor-descriptor . q50af) (record-type-descriptor . q50ae) (case . q50ad) (parameterize . q50ac) (unless . q50ab) (when . q50aa) (or . q50a9) (and . q50a8) (if . q50a7) (letrec* . q50a6) (letrec . q50a5) (type-descriptor . q50a4) (case-lambda . q50a3) (lambda . q50a2) (syntax . q50a1) (syntax-case . q50a0) (quote . q509f) (foreign-call . q509e) (letrec-syntax . q509d) (let-syntax . q509c) (set! . q509b) (import . q509a) (begin . q5099) (module . q5098) (define-syntax . q5097) (define . q5096)) '((q4e11 core-prim . &no-nans-rcd) (q4e0f core-prim . &no-nans-rtd) (q4dfc core-prim . &no-infinities-rcd) (q4dfa core-prim . &no-infinities-rtd) (q4de7 core-prim . &i/o-encoding-rcd) (q4de5 core-prim . &i/o-encoding-rtd) (q4dcc core-prim . &i/o-decoding-rcd) (q4dca core-prim . &i/o-decoding-rtd) (q4db7 core-prim . &i/o-port-rcd) (q4db5 core-prim . &i/o-port-rtd) (q4d9c core-prim . &i/o-file-does-not-exist-rcd) (q4d9a core-prim . &i/o-file-does-not-exist-rtd) (q4d87 core-prim . &i/o-file-already-exists-rcd) (q4d85 core-prim . &i/o-file-already-exists-rtd) (q4d72 core-prim . &i/o-file-is-read-only-rcd) (q4d70 core-prim . &i/o-file-is-read-only-rtd) (q4d5d core-prim . &i/o-file-protection-rcd) (q4d5b core-prim . &i/o-file-protection-rtd) (q4d48 core-prim . &i/o-filename-rcd) (q4d46 core-prim . &i/o-filename-rtd) (q4d2d core-prim . &i/o-invalid-position-rcd) (q4d2b core-prim . &i/o-invalid-position-rtd) (q4d12 core-prim . &i/o-write-rcd) (q4d10 core-prim . &i/o-write-rtd) (q4cfd core-prim . &i/o-read-rcd) (q4cfb core-prim . &i/o-read-rtd) (q4ce8 core-prim . &i/o-rcd) (q4ce6 core-prim . &i/o-rtd) (q4cd3 core-prim . &undefined-rcd) (q4cd1 core-prim . &undefined-rtd) (q4cbe core-prim . &syntax-rcd) (q4cbc core-prim . &syntax-rtd) (q4c9d core-prim . &lexical-rcd) (q4c9b core-prim . &lexical-rtd) (q4c88 core-prim . &implementation-restriction-rcd) (q4c86 core-prim . &implementation-restriction-rtd) (q4c73 core-prim . &non-continuable-rcd) (q4c71 core-prim . &non-continuable-rtd) (q4c5e core-prim . &who-rcd) (q4c5c core-prim . &who-rtd) (q4c43 core-prim . &irritants-rcd) (q4c41 core-prim . &irritants-rtd) (q4c28 core-prim . &assertion-rcd) (q4c26 core-prim . &assertion-rtd) (q4c13 core-prim . &violation-rcd) (q4c11 core-prim . &violation-rtd) (q4bfe core-prim . &error-rcd) (q4bfc core-prim . &error-rtd) (q4be9 core-prim . &serious-rcd) (q4be7 core-prim . &serious-rtd) (q4bd4 core-prim . &warning-rcd) (q4bd2 core-prim . &warning-rtd) (q4bbf core-prim . &message-rcd) (q4bbd core-prim . &message-rtd) (q4b60 core-prim . &condition-rcd) (q4b5e core-prim . &condition-rtd) (q3124 core-prim . syntax-error) (q3048 core-prim . syntax-dispatch) (q53b9 core-prim . pretty-print) (q53b8 core-prim . eval-core) (q53b7 core-prim . set-symbol-value!) (q53b6 core-prim . symbol-value) (q53b5 core-prim . gensym) (q53b4 core-prim . void) (q4f1e core-prim . load) (q3134 core-prim . interaction-environment) (q53b3 core-prim . char-ready?) (q53b2 core-prim . regexp?) (q53b1 core-prim . read-line) (q53b0 core-prim . gensym-prefix-set!) (q53af core-prim . ungensym) (q53ae core-prim . alist->eq-hash-table) (q53ad core-prim . assoc-ref) (q53ac core-prim . print) (q53ab core-prim . format) (q53aa core-prim . host-os) (q2a98 core-prim . library-path) (q53a9 core-prim . standard-library-path) (q53a8 core-prim . file-newer?) (q53a7 core-prim . stat-mtime) (q53a6 core-prim . write-to-file) (q53a5 core-prim . file->list) (q53a4 core-prim . file->string) (q53a3 core-prim . digit->integer) (q53a2 core-prim . call-with-string-input-port) (q53a1 core-prim . call-with-string-io) (q53a0 core-prim . string-split) (q539f core-prim . bytevector-for-each) (q539e core-prim . string->regexp) (q539d core-prim . rxmatch) (q539c core-prim . regexp-replace-all) (q539b core-prim . hashtable-for-each) (q2883 core-prim . mosh-cache-dir) (q539a core-prim . call-process) (q5399 core-prim . local-tz-offset) (q5398 core-prim . microseconds) (q5397 core-prim . directory-list) (q5396 core-prim . set-current-directory!) (q5395 core-prim . expand-path) (q5394 core-prim . current-directory) (q5393 core-prim . %spawn) (q5392 core-prim . %waitpid) (q5391 core-prim . simple-struct-name) (q5390 core-prim . simple-struct-set!) (q538f core-prim . simple-struct-ref) (q538e core-prim . make-simple-struct) (q538d core-prim . simple-struct?) (q538c core-prim . pointer-ref-c-int64) (q538b core-prim . pointer-ref-c-int32) (q538a core-prim . pointer-ref-c-int16) (q5389 core-prim . pointer-ref-c-int8) (q5388 core-prim . pointer-ref-c-uint64) (q5387 core-prim . pointer-ref-c-uint32) (q5386 core-prim . pointer-ref-c-uint16) (q5385 core-prim . pointer-ref-c-uint8) (q5384 core-prim . pointer-set-c-uint64!) (q5383 core-prim . pointer-set-c-uint32!) (q5382 core-prim . pointer-set-c-uint16!) (q5381 core-prim . pointer-set-c-uint8!) (q5380 core-prim . pointer-set-c-int64!) (q537f core-prim . pointer-set-c-int32!) (q537e core-prim . pointer-set-c-int16!) (q537d core-prim . pointer-set-c-int8!) (q537c core-prim . pointer-set-c-pointer!) (q537b core-prim . pointer-set-c-double!) (q537a core-prim . pointer-set-c-float!) (q5379 core-prim . pointer-set-c-long-long!) (q5378 core-prim . pointer-set-c-long!) (q5377 core-prim . pointer-set-c-int!) (q5376 core-prim . pointer-set-c-short!) (q5375 core-prim . pointer-set-c-char!) (q5374 core-prim . pointer-ref-c-pointer) (q5373 core-prim . pointer-ref-c-double) (q5372 core-prim . pointer-ref-c-float) (q5371 core-prim . pointer-ref-c-unsigned-long-long) (q5370 core-prim . pointer-ref-c-signed-long-long) (q536f core-prim . pointer-ref-c-unsigned-long) (q536e core-prim . pointer-ref-c-signed-long) (q536d core-prim . pointer-ref-c-unsigned-int) (q536c core-prim . pointer-ref-c-signed-int) (q536b core-prim . pointer-ref-c-unsigned-short) (q536a core-prim . pointer-ref-c-signed-short) (q5369 core-prim . pointer-ref-c-unsigned-char) (q5368 core-prim . pointer-ref-c-signed-char) (q5367 core-prim . pointer->integer) (q5366 core-prim . integer->pointer) (q5365 core-prim . pointer?) (q5364 core-prim . shared-errno) (q5363 core-prim . %ffi-supported?) (q5362 core-prim . %ffi-pointer->string) (q5361 core-prim . %ffi-call->string-or-zero) (q5360 core-prim . %ffi-call->double) (q535f core-prim . %ffi-call->void*) (q535e core-prim . %ffi-call->void) (q535d core-prim . %ffi-call->char) (q535c core-prim . %ffi-call->int) (q535b core-prim . %ffi-lookup) (q535a core-prim . %ffi-open) (q5359 core-prim . %fork) (q5358 core-prim . %pipe) (q5357 core-prim . p) (q5356 core-prim . open-output-string) (q5355 core-prim . get-output-string) (q5354 core-prim . file-stat-ctime) (q5353 core-prim . file-stat-atime) (q5352 core-prim . file-stat-mtime) (q5351 core-prim . file-size-in-bytes) (q5350 core-prim . file-writable?) (q534f core-prim . file-executable?) (q534e core-prim . file-readable?) (q534d core-prim . file-regular?) (q534c core-prim . file-symbolic-link?) (q534b core-prim . file-directory?) (q534a core-prim . create-symbolic-link) (q5349 core-prim . rename-file) (q5348 core-prim . delete-directory) (q5347 core-prim . create-directory) (q5346 core-prim . create-mosh-cache-dir) (q5345 core-prim . get-environment-variables) (q5344 core-prim . get-environment-variable) (q5343 core-prim . join-wraps) (q5342 core-prim . id->real-label) (q5341 core-prim . same-marks?) (q5340 core-prim . same-marks*?) (q533f core-prim . get-timeofday) (q533e core-prim . get-command-line) (q533d core-prim . sys-display) (q533c core-prim . whereis) (q533b core-prim . register) (q533a core-prim . vm-join!) (q5339 core-prim . vm-set-value!) (q5338 core-prim . vm?) (q5337 core-prim . main-vm?) (q5336 core-prim . vm-eval) (q5335 core-prim . vm-self) (q5334 core-prim . vm-start!) (q5333 core-prim . make-vm) (q5332 core-prim . mutex-try-lock!) (q5331 core-prim . mutex-unlock!) (q5330 core-prim . mutex-lock!) (q532f core-prim . mutex?) (q532e core-prim . make-mutex) (q532d core-prim . condition-variable-notify-all!) (q532c core-prim . condition-variable-notify!) (q532b core-prim . condition-variable-wait!) (q532a core-prim . make-condition-variable) (q5329 core-prim . mosh-executable-path) (q5328 core-prim . make-file-options) (q5327 core-prim . source-info) (q5326 core-prim . make-compiler-instruction) (q5325 core-prim . make-instruction) (q5324 core-prim . set-source-info!) (q5323 core-prim . bignum?) (q5322 core-prim . fast-equal?) (q5321 core-prim . fasl-read) (q5320 core-prim . fasl-write) (q531f core-prim . time-usage) (q531e core-prim . os-constant) (q2881 core-prim . make-parameter) (q531d core-prim . socket-port) (q531c core-prim . socket-shutdown) (q531b core-prim . socket-close) (q531a core-prim . socket-send) (q5319 core-prim . socket-recv!) (q5318 core-prim . socket-recv) (q5317 core-prim . make-server-socket) (q5316 core-prim . make-client-socket) (q5315 core-prim . socket-accept) (q5314 core-prim . socket?) (q5313 core-prim . string-upcase) (q5312 core-prim . string-titlecase) (q5311 core-prim . string-normalize-nfkd) (q5310 core-prim . string-normalize-nfkc) (q530f core-prim . string-normalize-nfd) (q530e core-prim . string-normalize-nfc) (q530d core-prim . string-foldcase) (q530c core-prim . string-downcase) (q530b core-prim . string-ci>?) (q530a core-prim . string-ci>=?) (q5309 core-prim . string-ci=?) (q5308 core-prim . string-ci<?) (q5307 core-prim . string-ci<=?) (q5306 core-prim . char-whitespace?) (q5305 core-prim . char-upper-case?) (q5304 core-prim . char-title-case?) (q5303 core-prim . char-numeric?) (q5302 core-prim . char-lower-case?) (q5301 core-prim . char-general-category) (q5300 core-prim . char-upcase) (q52ff core-prim . char-titlecase) (q52fe core-prim . char-foldcase) (q52fd core-prim . char-downcase) (q52fc core-prim . char-ci>?) (q52fb core-prim . char-ci>=?) (q52fa core-prim . char-ci=?) (q52f9 core-prim . char-ci<?) (q52f8 core-prim . char-ci<=?) (q52f7 core-prim . char-alphabetic?) (q2e75 core-prim . make-variable-transformer) (q312a core-prim . identifier?) (q3116 core-prim . generate-temporaries) (q3118 core-prim . free-identifier=?) (q312e core-prim . syntax->datum) (q312c core-prim . datum->syntax) (q311a core-prim . bound-identifier=?) (q52f6 core-prim . record-type-descriptor?) (q52f5 core-prim . record-predicate) (q52f4 core-prim . record-mutator) (q52f3 core-prim . record-constructor) (q52f2 core-prim . record-accessor) (q52f1 core-prim . make-record-type-descriptor) (q52f0 core-prim . make-record-constructor-descriptor) (q52ef core-prim . record?) (q52ee core-prim . record-type-uid) (q52ed core-prim . record-type-sealed?) (q52ec core-prim . record-type-parent) (q52eb core-prim . record-type-opaque?) (q52ea core-prim . record-type-name) (q52e9 core-prim . record-type-generative?) (q52e8 core-prim . record-type-field-names) (q52e7 core-prim . record-rtd) (q52e6 core-prim . record-field-mutable?) (q52e5 core-prim . delete-file) (q52e4 core-prim . file-exists?) (q52e3 core-prim . vector-sort!) (q52e2 core-prim . vector-sort) (q52e1 core-prim . list-sort) (q52e0 core-prim . symbol-hash) (q52df core-prim . string-ci-hash) (q52de core-prim . string-hash) (q52dd core-prim . equal-hash) (q52dc core-prim . hashtable-equivalence-function) (q52db core-prim . make-hashtable) (q52da core-prim . hashtable-hash-function) (q52d9 core-prim . make-eqv-hashtable) (q52d8 core-prim . make-eq-hashtable) (q52d7 core-prim . hashtable?) (q52d6 core-prim . hashtable-update!) (q52d5 core-prim . hashtable-size) (q52d4 core-prim . hashtable-set!) (q52d3 core-prim . hashtable-ref) (q52d2 core-prim . hashtable-mutable?) (q52d1 core-prim . hashtable-keys) (q52d0 core-prim . hashtable-entries) (q52cf core-prim . hashtable-delete!) (q52ce core-prim . hashtable-copy) (q52cd core-prim . hashtable-contains?) (q52cc core-prim . hashtable-clear!) (q52cb core-prim . call-with-output-file) (q52ca core-prim . call-with-input-file) (q52c9 core-prim . write-char) (q52c8 core-prim . write) (q52c7 core-prim . with-output-to-file) (q52c6 core-prim . with-input-from-file) (q52c5 core-prim . read-char) (q52c4 core-prim . read) (q52c3 core-prim . peek-char) (q52c2 core-prim . open-output-file) (q52c1 core-prim . open-input-file) (q52c0 core-prim . newline) (q52bf core-prim . display) (q52be core-prim . close-output-port) (q52bd core-prim . close-input-port) (q52bc core-prim . eof-object?) (q52bb core-prim . eof-object) (q52ba core-prim . current-error-port) (q52b9 core-prim . current-output-port) (q52b8 core-prim . current-input-port) (q52b7 core-prim . output-port?) (q52b6 core-prim . input-port?) (q52b5 core-prim . utf-8-codec) (q52b4 core-prim . utf-16-codec) (q52b3 core-prim . transcoder-error-handling-mode) (q52b2 core-prim . transcoder-eol-style) (q52b1 core-prim . transcoder-codec) (q52b0 core-prim . transcoded-port) (q52af core-prim . textual-port?) (q52ae core-prim . string->bytevector) (q52ad core-prim . standard-output-port) (q52ac core-prim . standard-input-port) (q52ab core-prim . standard-error-port) (q52aa core-prim . set-port-position!) (q52a9 core-prim . put-u8) (q52a8 core-prim . put-string) (q52a7 core-prim . put-datum) (q52a6 core-prim . put-char) (q52a5 core-prim . put-bytevector) (q52a4 core-prim . port?) (q52a3 core-prim . port-transcoder) (q52a2 core-prim . port-position) (q52a1 core-prim . port-has-set-port-position!?) (q52a0 core-prim . port-has-port-position?) (q529f core-prim . port-eof?) (q529e core-prim . output-port-buffer-mode) (q529d core-prim . open-string-output-port) (q529c core-prim . open-string-input-port) (q529b core-prim . open-file-output-port) (q529a core-prim . open-file-input/output-port) (q5299 core-prim . open-file-input-port) (q5298 core-prim . open-bytevector-output-port) (q5297 core-prim . open-bytevector-input-port) (q5296 core-prim . native-transcoder) (q5295 core-prim . native-eol-style) (q5294 core-prim . make-transcoder) (q5293 core-prim . latin-1-codec) (q4d0c core-prim . make-i/o-write-error) (q4cf7 core-prim . make-i/o-read-error) (q4dad core-prim . make-i/o-port-error) (q4d23 core-prim . make-i/o-invalid-position-error) (q4d3e core-prim . make-i/o-filename-error) (q4d57 core-prim . make-i/o-file-protection-error) (q4d6c core-prim . make-i/o-file-is-read-only-error) (q4d96 core-prim . make-i/o-file-does-not-exist-error) (q4d81 core-prim . make-i/o-file-already-exists-error) (q4ce2 core-prim . make-i/o-error) (q4ddd core-prim . make-i/o-encoding-error) (q4dc6 core-prim . make-i/o-decoding-error) (q5292 core-prim . make-custom-textual-output-port) (q5291 core-prim . make-custom-textual-input/output-port) (q5290 core-prim . make-custom-textual-input-port) (q528f core-prim . make-custom-binary-output-port) (q528e core-prim . make-custom-binary-input/output-port) (q528d core-prim . make-custom-binary-input-port) (q528c core-prim . make-bytevector) (q528b core-prim . lookahead-u8) (q528a core-prim . lookahead-char) (q4d0e core-prim . i/o-write-error?) (q4cf9 core-prim . i/o-read-error?) (q4db1 core-prim . i/o-port-error?) (q4d27 core-prim . i/o-invalid-position-error?) (q4d42 core-prim . i/o-filename-error?) (q4d59 core-prim . i/o-file-protection-error?) (q4d6e core-prim . i/o-file-is-read-only-error?) (q4d98 core-prim . i/o-file-does-not-exist-error?) (q4d83 core-prim . i/o-file-already-exists-error?) (q4ce4 core-prim . i/o-error?) (q4d29 core-prim . i/o-error-position) (q4db3 core-prim . i/o-error-port) (q4d44 core-prim . i/o-error-filename) (q4de1 core-prim . i/o-encoding-error?) (q4de3 core-prim . i/o-encoding-error-char) (q4dc8 core-prim . i/o-decoding-error?) (q5289 core-prim . get-u8) (q5288 core-prim . get-string-n!) (q5287 core-prim . get-string-n) (q5286 core-prim . get-string-all) (q5285 core-prim . get-line) (q5284 core-prim . get-datum) (q5283 core-prim . get-char) (q5282 core-prim . get-bytevector-some) (q5281 core-prim . get-bytevector-n!) (q5280 core-prim . get-bytevector-n) (q527f core-prim . get-bytevector-all) (q527e core-prim . flush-output-port) (q527d core-prim . close-port) (q3104 core-prim . scheme-report-environment) (q527c core-prim . quotient) (q3102 core-prim . null-environment) (q527b core-prim . remainder) (q527a core-prim . modulo) (q5279 core-prim . inexact->exact) (q5278 core-prim . force) (q5277 core-prim . exact->inexact) (q5276 core-prim . make-promise) (q5275 core-prim . exit) (q4f18 core-prim . command-line) (q5274 core-prim . string-fill!) (q5273 core-prim . string-set!) (q5272 core-prim . set-cdr!) (q5271 core-prim . set-car!) (q5270 core-prim . remove) (q526f core-prim . remv) (q526e core-prim . remp) (q526d core-prim . remq) (q526c core-prim . partition) (q526b core-prim . memv) (q526a core-prim . memq) (q5269 core-prim . memp) (q5268 core-prim . member) (q5267 core-prim . exists) (q5266 core-prim . for-all) (q5265 core-prim . fold-right) (q5264 core-prim . fold-left) (q5263 core-prim . find) (q5262 core-prim . filter) (q5261 core-prim . cons*) (q5260 core-prim . assv) (q525f core-prim . assq) (q525e core-prim . assp) (q525d core-prim . assoc) (q525c core-prim . call-with-string-output-port) (q525b core-prim . call-with-port) (q525a core-prim . call-with-bytevector-output-port) (q5259 core-prim . bytevector->string) (q5258 core-prim . buffer-mode?) (q5257 core-prim . binary-port?) (q5256 core-prim . with-exception-handler) (q5255 core-prim . raise-continuable) (q5254 core-prim . raise) (q3108 core-prim . eval) (q3100 core-prim . environment) (q5253 core-prim . make-enumeration) (q5252 core-prim . enum-set=?) (q5251 core-prim . enum-set-universe) (q5250 core-prim . enum-set-union) (q524f core-prim . enum-set-subset?) (q524e core-prim . enum-set-projection) (q524d core-prim . enum-set-member?) (q524c core-prim . enum-set-intersection) (q524b core-prim . enum-set-indexer) (q524a core-prim . enum-set-difference) (q5249 core-prim . enum-set-constructor) (q5248 core-prim . enum-set-complement) (q5247 core-prim . enum-set->list) (q4c58 core-prim . who-condition?) (q4bd0 core-prim . warning?) (q4c0f core-prim . violation?) (q4ccf core-prim . undefined-violation?) (q4cb6 core-prim . syntax-violation?) (q4cba core-prim . syntax-violation-subform) (q4cb8 core-prim . syntax-violation-form) (q3128 core-prim . syntax-violation) (q5246 core-prim . simple-conditions) (q4be5 core-prim . serious-condition?) (q4c6f core-prim . non-continuable-violation?) (q4bb9 core-prim . message-condition?) (q4c54 core-prim . make-who-condition) (q4bce core-prim . make-warning) (q4c0d core-prim . make-violation) (q4ccd core-prim . make-undefined-violation) (q4cb0 core-prim . make-syntax-violation) (q4be3 core-prim . make-serious-condition) (q4c6d core-prim . make-non-continuable-violation) (q4bb5 core-prim . make-message-condition) (q4c97 core-prim . make-lexical-violation) (q4c39 core-prim . make-irritants-condition) (q4c82 core-prim . make-implementation-restriction-violation) (q4bf8 core-prim . make-error) (q4c22 core-prim . make-assertion-violation) (q4c99 core-prim . lexical-violation?) (q4c3d core-prim . irritants-condition?) (q4c84 core-prim . implementation-restriction-violation?) (q4bfa core-prim . error?) (q4c5a core-prim . condition-who) (q5245 core-prim . condition-predicate) (q4bbb core-prim . condition-message) (q4c3f core-prim . condition-irritants) (q5244 core-prim . condition-accessor) (q5243 core-prim . condition) (q4c24 core-prim . assertion-violation?) (q5242 core-prim . condition?) (q5241 core-prim . utf32->string) (q5240 core-prim . utf16->string) (q523f core-prim . utf8->string) (q523e core-prim . uint-list->bytevector) (q523d core-prim . u8-list->bytevector) (q523c core-prim . string->utf8) (q523b core-prim . string->utf32) (q523a core-prim . string->utf16) (q5239 core-prim . sint-list->bytevector) (q5238 core-prim . native-endianness) (q5237 core-prim . bytevector?) (q5236 core-prim . bytevector=?) (q5235 core-prim . bytevector-uint-set!) (q5234 core-prim . bytevector-uint-ref) (q5233 core-prim . bytevector-u8-set!) (q5232 core-prim . bytevector-u8-ref) (q5231 core-prim . bytevector-u64-set!) (q5230 core-prim . bytevector-u64-ref) (q522f core-prim . bytevector-u64-native-set!) (q522e core-prim . bytevector-u64-native-ref) (q522d core-prim . bytevector-u32-set!) (q522c core-prim . bytevector-u32-ref) (q522b core-prim . bytevector-u32-native-set!) (q522a core-prim . bytevector-u32-native-ref) (q5229 core-prim . bytevector-u16-set!) (q5228 core-prim . bytevector-u16-ref) (q5227 core-prim . bytevector-u16-native-set!) (q5226 core-prim . bytevector-u16-native-ref) (q5225 core-prim . bytevector-sint-set!) (q5224 core-prim . bytevector-sint-ref) (q5223 core-prim . bytevector-s8-set!) (q5222 core-prim . bytevector-s8-ref) (q5221 core-prim . bytevector-s64-set!) (q5220 core-prim . bytevector-s64-ref) (q521f core-prim . bytevector-s64-native-set!) (q521e core-prim . bytevector-s64-native-ref) (q521d core-prim . bytevector-s32-set!) (q521c core-prim . bytevector-s32-ref) (q521b core-prim . bytevector-s32-native-set!) (q521a core-prim . bytevector-s32-native-ref) (q5219 core-prim . bytevector-s16-set!) (q5218 core-prim . bytevector-s16-ref) (q5217 core-prim . bytevector-s16-native-set!) (q5216 core-prim . bytevector-s16-native-ref) (q5215 core-prim . bytevector-length) (q5214 core-prim . bytevector-ieee-single-ref) (q5213 core-prim . bytevector-ieee-single-set!) (q5212 core-prim . bytevector-ieee-single-native-set!) (q5211 core-prim . bytevector-ieee-single-native-ref) (q5210 core-prim . bytevector-ieee-double-set!) (q520f core-prim . bytevector-ieee-double-ref) (q520e core-prim . bytevector-ieee-double-native-set!) (q520d core-prim . bytevector-ieee-double-native-ref) (q520c core-prim . bytevector-fill!) (q520b core-prim . bytevector-copy!) (q520a core-prim . bytevector-copy) (q5209 core-prim . bytevector->uint-list) (q5208 core-prim . bytevector->u8-list) (q5207 core-prim . bytevector->sint-list) (q4e0d core-prim . no-nans-violation?) (q4df8 core-prim . no-infinities-violation?) (q4e0b core-prim . make-no-nans-violation) (q4df6 core-prim . make-no-infinities-violation) (q5206 core-prim . real->flonum) (q5205 core-prim . flzero?) (q5204 core-prim . fltruncate) (q5203 core-prim . fltan) (q5202 core-prim . flsqrt) (q5201 core-prim . flsin) (q5200 core-prim . flround) (q51ff core-prim . flpositive?) (q51fe core-prim . flonum?) (q51fd core-prim . flodd?) (q51fc core-prim . flnumerator) (q51fb core-prim . flnegative?) (q51fa core-prim . flnan?) (q51f9 core-prim . flmod0) (q51f8 core-prim . flmod) (q51f7 core-prim . flmin) (q51f6 core-prim . flmax) (q51f5 core-prim . fllog) (q51f4 core-prim . flinteger?) (q51f3 core-prim . flinfinite?) (q51f2 core-prim . flfloor) (q51f1 core-prim . flfinite?) (q51f0 core-prim . flexpt) (q51ef core-prim . flexp) (q51ee core-prim . fleven?) (q51ed core-prim . fldiv0-and-mod0) (q51ec core-prim . fldiv0) (q51eb core-prim . fldiv-and-mod) (q51ea core-prim . fldiv) (q51e9 core-prim . fldenominator) (q51e8 core-prim . flcos) (q51e7 core-prim . flceiling) (q51e6 core-prim . flatan) (q51e5 core-prim . flasin) (q51e4 core-prim . flacos) (q51e3 core-prim . flabs) (q51e2 core-prim . fl>?) (q51e1 core-prim . fl>=?) (q51e0 core-prim . fl=?) (q51df core-prim . fl<?) (q51de core-prim . fl<=?) (q51dd core-prim . fl/) (q51dc core-prim . fl-) (q51db core-prim . fl+) (q51da core-prim . fl*) (q51d9 core-prim . fixnum->flonum) (q51d8 core-prim . fxzero?) (q51d7 core-prim . fxxor) (q51d6 core-prim . fxrotate-bit-field) (q51d5 core-prim . fxreverse-bit-field) (q51d4 core-prim . fxpositive?) (q51d3 core-prim . fxodd?) (q51d2 core-prim . fxnot) (q51d1 core-prim . fxnegative?) (q51d0 core-prim . fxmod0) (q51cf core-prim . fxmod) (q51ce core-prim . fxmin) (q51cd core-prim . fxmax) (q51cc core-prim . fxlength) (q51cb core-prim . fxior) (q51ca core-prim . fxif) (q51c9 core-prim . fxfirst-bit-set) (q51c8 core-prim . fxeven?) (q51c7 core-prim . fxdiv0-and-mod0) (q51c6 core-prim . fxdiv0) (q51c5 core-prim . fxdiv-and-mod) (q51c4 core-prim . fxdiv) (q51c3 core-prim . fxcopy-bit-field) (q51c2 core-prim . fxcopy-bit) (q51c1 core-prim . fxbit-set?) (q51c0 core-prim . fxbit-field) (q51bf core-prim . fxbit-count) (q51be core-prim . fxarithmetic-shift-right) (q51bd core-prim . fxarithmetic-shift-left) (q51bc core-prim . fxarithmetic-shift) (q51bb core-prim . fxand) (q51ba core-prim . fx>?) (q51b9 core-prim . fx>=?) (q51b8 core-prim . fx=?) (q51b7 core-prim . fx<?) (q51b6 core-prim . fx<=?) (q51b5 core-prim . fx-/carry) (q51b4 core-prim . fx-) (q51b3 core-prim . fx+/carry) (q51b2 core-prim . fx+) (q51b1 core-prim . fx*/carry) (q51b0 core-prim . fx*) (q51af core-prim . greatest-fixnum) (q51ae core-prim . least-fixnum) (q51ad core-prim . fixnum-width) (q51ac core-prim . fixnum?) (q51ab core-prim . bitwise-rotate-bit-field) (q51aa core-prim . bitwise-reverse-bit-field) (q51a9 core-prim . bitwise-length) (q51a8 core-prim . bitwise-if) (q51a7 core-prim . bitwise-first-bit-set) (q51a6 core-prim . bitwise-copy-bit-field) (q51a5 core-prim . bitwise-copy-bit) (q51a4 core-prim . bitwise-bit-set?) (q51a3 core-prim . bitwise-bit-field) (q51a2 core-prim . bitwise-bit-count) (q51a1 core-prim . bitwise-xor) (q51a0 core-prim . bitwise-ior) (q519f core-prim . bitwise-and) (q519e core-prim . bitwise-not) (q519d core-prim . bitwise-arithmetic-shift-right) (q519c core-prim . bitwise-arithmetic-shift-left) (q519b core-prim . bitwise-arithmetic-shift) (q519a core-prim . zero?) (q5199 core-prim . vector?) (q5198 core-prim . vector-set!) (q5197 core-prim . vector-ref) (q5196 core-prim . vector-map) (q5195 core-prim . vector-length) (q5194 core-prim . vector-for-each) (q5193 core-prim . vector-fill!) (q5192 core-prim . vector->list) (q5191 core-prim . vector) (q5190 core-prim . values) (q518f core-prim . truncate) (q518e core-prim . tan) (q518d core-prim . symbol?) (q518c core-prim . symbol=?) (q518b core-prim . symbol->string) (q518a core-prim . substring) (q5189 core-prim . string?) (q5188 core-prim . string>?) (q5187 core-prim . string>=?) (q5186 core-prim . string=?) (q5185 core-prim . string<?) (q5184 core-prim . string<=?) (q5183 core-prim . string-ref) (q5182 core-prim . string-length) (q5181 core-prim . string-for-each) (q5180 core-prim . string-copy) (q517f core-prim . string-append) (q517e core-prim . string->symbol) (q517d core-prim . string->number) (q517c core-prim . string->list) (q517b core-prim . string) (q517a core-prim . sqrt) (q5179 core-prim . sin) (q5178 core-prim . round) (q5177 core-prim . reverse) (q5176 core-prim . real?) (q5175 core-prim . real-valued?) (q5174 core-prim . real-part) (q5173 core-prim . rationalize) (q5172 core-prim . rational?) (q5171 core-prim . rational-valued?) (q5170 core-prim . procedure?) (q516f core-prim . positive?) (q516e core-prim . pair?) (q516d core-prim . odd?) (q516c core-prim . numerator) (q516b core-prim . number?) (q516a core-prim . number->string) (q5169 core-prim . null?) (q5168 core-prim . not) (q5167 core-prim . negative?) (q5166 core-prim . nan?) (q5165 core-prim . min) (q5164 core-prim . max) (q5163 core-prim . map) (q5162 core-prim . make-vector) (q5161 core-prim . make-string) (q5160 core-prim . make-rectangular) (q515f core-prim . make-polar) (q515e core-prim . magnitude) (q515d core-prim . log) (q515c core-prim . list?) (q515b core-prim . list-tail) (q515a core-prim . list-ref) (q5159 core-prim . list->vector) (q5158 core-prim . list->string) (q5157 core-prim . list) (q5156 core-prim . length) (q5155 core-prim . lcm) (q5154 core-prim . integer?) (q5153 core-prim . integer-valued?) (q5152 core-prim . integer->char) (q5151 core-prim . infinite?) (q5150 core-prim . inexact?) (q514f core-prim . inexact) (q514e core-prim . imag-part) (q514d core-prim . gcd) (q514c core-prim . for-each) (q514b core-prim . floor) (q514a core-prim . finite?) (q5149 core-prim . expt) (q5148 core-prim . exp) (q5147 core-prim . exact?) (q5146 core-prim . exact-integer-sqrt) (q5145 core-prim . exact) (q5144 core-prim . even?) (q5143 core-prim . error) (q5142 core-prim . eqv?) (q5141 core-prim . equal?) (q5140 core-prim . eq?) (q513f core-prim . dynamic-wind) (q513e core-prim . div0-and-mod0) (q513d core-prim . mod0) (q513c core-prim . div0) (q513b core-prim . div-and-mod) (q513a core-prim . mod) (q5139 core-prim . div) (q5138 core-prim . denominator) (q5137 core-prim . cos) (q5136 core-prim . cons) (q5135 core-prim . complex?) (q5134 core-prim . char?) (q5133 core-prim . char>?) (q5132 core-prim . char>=?) (q5131 core-prim . char=?) (q5130 core-prim . char<?) (q512f core-prim . char<=?) (q512e core-prim . char->integer) (q512d core-prim . ceiling) (q512c core-prim . call-with-values) (q512b core-prim . call/cc) (q512a core-prim . call-with-current-continuation) (q5129 core-prim . cddddr) (q5128 core-prim . cdddar) (q5127 core-prim . cddadr) (q5126 core-prim . cddaar) (q5125 core-prim . cdaddr) (q5124 core-prim . cdadar) (q5123 core-prim . cdaadr) (q5122 core-prim . cdaaar) (q5121 core-prim . cadddr) (q5120 core-prim . caddar) (q511f core-prim . cadadr) (q511e core-prim . cadaar) (q511d core-prim . caaddr) (q511c core-prim . caadar) (q511b core-prim . caaadr) (q511a core-prim . caaaar) (q5119 core-prim . cdddr) (q5118 core-prim . cddar) (q5117 core-prim . cdadr) (q5116 core-prim . cdaar) (q5115 core-prim . caddr) (q5114 core-prim . cadar) (q5113 core-prim . caadr) (q5112 core-prim . caaar) (q5111 core-prim . cddr) (q5110 core-prim . cdar) (q510f core-prim . cadr) (q510e core-prim . caar) (q510d core-prim . cdr) (q510c core-prim . car) (q510b core-prim . boolean?) (q510a core-prim . boolean=?) (q5109 core-prim . atan) (q5108 core-prim . assertion-violation) (q3122 core-prim . assertion-error) (q5107 core-prim . asin) (q5106 core-prim . apply) (q5105 core-prim . append) (q5104 core-prim . angle) (q5103 core-prim . acos) (q5102 core-prim . abs) (q5101 core-prim . /) (q5100 core-prim . *) (q50ff core-prim . -) (q50fe core-prim . +) (q50fd core-prim . >=) (q50fc core-prim . >) (q50fb core-prim . =) (q50fa core-prim . <=) (q50f9 core-prim . <) (q50f8 core-prim . library) (q50f7 $core-rtd &no-nans-rtd &no-nans-rcd) (q50f6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (q50f5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (q50f4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (q50f3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (q50f2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (q50f1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (q50f0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (q50ef $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (q50ee $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (q50ed $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (q50ec $core-rtd &i/o-write-rtd &i/o-write-rcd) (q50eb $core-rtd &i/o-read-rtd &i/o-read-rcd) (q50ea $core-rtd &i/o-rtd &i/o-rcd) (q50e9 $core-rtd &undefined-rtd &undefined-rcd) (q50e8 $core-rtd &syntax-rtd &syntax-rcd) (q50e7 $core-rtd &lexical-rtd &lexical-rcd) (q50e6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (q50e5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (q50e4 $core-rtd &who-rtd &who-rcd) (q50e3 $core-rtd &irritants-rtd &irritants-rcd) (q50e2 $core-rtd &assertion-rtd &assertion-rcd) (q50e1 $core-rtd &violation-rtd &violation-rcd) (q50e0 $core-rtd &error-rtd &error-rcd) (q50df $core-rtd &serious-rtd &serious-rcd) (q50de $core-rtd &warning-rtd &warning-rcd) (q50dd $core-rtd &message-rtd &message-rcd) (q50dc $core-rtd &condition-rtd &condition-rcd) (q50db macro . define-condition-type) (q50da macro . define-enumeration) (q50d9 macro . define-record-type) (q50d8 macro . parent-rtd) (q50d7 macro . nongenerative) (q50d6 macro . opaque) (q50d5 macro . sealed) (q50d4 macro . protocol) (q50d3 macro . parent) (q50d2 macro . immutable) (q50d1 macro . mutable) (q50d0 macro . fields) (q50cf macro . error-handling-mode) (q50ce macro . file-options) (q50cd macro . buffer-mode) (q50cc macro . eol-style) (q50cb macro . guard) (q50ca macro . trace-define) (q50c9 macro . trace-lambda) (q50c8 macro . unsyntax-splicing) (q50c7 macro . unsyntax) (q50c6 macro . unquote-splicing) (q50c5 macro . unquote) (q50c4 macro . _) (q50c3 macro . else) (q50c2 macro . =>) (q50c1 macro . ...) (q50c0 macro . assert) (q50bf macro . endianness) (q50be macro . delay) (q50bd macro . time) (q50bc macro . do) (q50bb macro . cond) (q50ba macro . let*) (q50b9 macro . let) (q50b8 macro . let*-values) (q50b7 macro . let-values) (q50b6 macro . identifier-syntax) (q50b5 macro . with-syntax) (q50b4 macro . quasisyntax) (q50b3 macro . quasiquote) (q50b2 macro . syntax-rules) (q50b1 macro . include) (q50b0 macro . define-struct) (q50af core-macro . record-constructor-descriptor) (q50ae core-macro . record-type-descriptor) (q50ad macro . case) (q50ac macro . parameterize) (q50ab macro . unless) (q50aa macro . when) (q50a9 core-macro . or) (q50a8 core-macro . and) (q50a7 core-macro . if) (q50a6 core-macro . letrec*) (q50a5 core-macro . letrec) (q50a4 core-macro . type-descriptor) (q50a3 core-macro . case-lambda) (q50a2 core-macro . lambda) (q50a1 core-macro . syntax) (q50a0 core-macro . syntax-case) (q509f core-macro . quote) (q509e core-macro . foreign-call) (q509d letrec-syntax) (q509c let-syntax) (q509b set!) (q509a import) (q5099 begin) (q5098 module) (q5097 define-syntax) (q5096 define)) values values '#f '#f '#f '#f) (q2c6d@q2ab9@install-library 'q53da '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . q53b9) (eval-core . q53b8) (set-symbol-value! . q53b7) (symbol-value . q53b6) (gensym . q53b5) (void . q53b4)) '() values values '#f '#f '#f '#f) (q2c6d@q2ab9@install-library 'q53db '(mosh) '() '() '() '() '((set-symbol-value! . q53b7) (symbol-value . q53b6) (regexp? . q53b2) (read-line . q53b1) (ungensym . q53af) (alist->eq-hash-table . q53ae) (assoc-ref . q53ad) (print . q53ac) (format . q53ab) (host-os . q53aa) (library-path . q2a98) (standard-library-path . q53a9) (file-newer? . q53a8) (stat-mtime . q53a7) (digit->integer . q53a3) (call-with-string-input-port . q53a2) (call-with-string-io . q53a1) (string-split . q53a0) (bytevector-for-each . q539f) (string->regexp . q539e) (rxmatch . q539d) (regexp-replace-all . q539c) (hashtable-for-each . q539b) (set-current-directory! . q5396) (expand-path . q5395) (current-directory . q5394) (p . q5357) (get-timeofday . q533f) (get-command-line . q533e) (sys-display . q533d) (whereis . q533c) (register . q533b) (vm-join! . q533a) (vm-set-value! . q5339) (vm? . q5338) (main-vm? . q5337) (vm-eval . q5336) (vm-self . q5335) (vm-start! . q5334) (make-vm . q5333) (mutex-try-lock! . q5332) (mutex-unlock! . q5331) (mutex-lock! . q5330) (mutex? . q532f) (make-mutex . q532e) (condition-variable-notify-all! . q532d) (condition-variable-notify! . q532c) (condition-variable-wait! . q532b) (make-condition-variable . q532a) (mosh-executable-path . q5329) (make-file-options . q5328) (source-info . q5327) (make-compiler-instruction . q5326) (make-instruction . q5325) (set-source-info! . q5324) (bignum? . q5323) (fast-equal? . q5322) (fasl-read . q5321) (fasl-write . q5320) (time-usage . q531f) (os-constant . q531e) (time . q50bd) (include . q50b1)) '() values values '#f '#f '#f '#f) (q2c6d@q2ab9@install-library 'q53dc '(system) '() '() '() '() '((gensym-prefix-set! . q53b0) (write-to-file . q53a6) (file->list . q53a5) (file->string . q53a4) (mosh-cache-dir . q2883) (call-process . q539a) (local-tz-offset . q5399) (microseconds . q5398) (directory-list . q5397) (expand-path . q5395) (%spawn . q5393) (%waitpid . q5392) (simple-struct-name . q5391) (simple-struct-set! . q5390) (simple-struct-ref . q538f) (make-simple-struct . q538e) (simple-struct? . q538d) (pointer-ref-c-int64 . q538c) (pointer-ref-c-int32 . q538b) (pointer-ref-c-int16 . q538a) (pointer-ref-c-int8 . q5389) (pointer-ref-c-uint64 . q5388) (pointer-ref-c-uint32 . q5387) (pointer-ref-c-uint16 . q5386) (pointer-ref-c-uint8 . q5385) (pointer-set-c-uint64! . q5384) (pointer-set-c-uint32! . q5383) (pointer-set-c-uint16! . q5382) (pointer-set-c-uint8! . q5381) (pointer-set-c-int64! . q5380) (pointer-set-c-int32! . q537f) (pointer-set-c-int16! . q537e) (pointer-set-c-int8! . q537d) (pointer-set-c-pointer! . q537c) (pointer-set-c-double! . q537b) (pointer-set-c-float! . q537a) (pointer-set-c-long-long! . q5379) (pointer-set-c-long! . q5378) (pointer-set-c-int! . q5377) (pointer-set-c-short! . q5376) (pointer-set-c-char! . q5375) (pointer-ref-c-pointer . q5374) (pointer-ref-c-double . q5373) (pointer-ref-c-float . q5372) (pointer-ref-c-unsigned-long-long . q5371) (pointer-ref-c-signed-long-long . q5370) (pointer-ref-c-unsigned-long . q536f) (pointer-ref-c-signed-long . q536e) (pointer-ref-c-unsigned-int . q536d) (pointer-ref-c-signed-int . q536c) (pointer-ref-c-unsigned-short . q536b) (pointer-ref-c-signed-short . q536a) (pointer-ref-c-unsigned-char . q5369) (pointer-ref-c-signed-char . q5368) (pointer->integer . q5367) (integer->pointer . q5366) (pointer? . q5365) (shared-errno . q5364) (%ffi-supported? . q5363) (%ffi-pointer->string . q5362) (%ffi-call->string-or-zero . q5361) (%ffi-call->double . q5360) (%ffi-call->void* . q535f) (%ffi-call->void . q535e) (%ffi-call->char . q535d) (%ffi-call->int . q535c) (%ffi-lookup . q535b) (%ffi-open . q535a) (%fork . q5359) (%pipe . q5358) (open-output-string . q5356) (get-output-string . q5355) (file-stat-ctime . q5354) (file-stat-atime . q5353) (file-stat-mtime . q5352) (file-size-in-bytes . q5351) (file-writable? . q5350) (file-executable? . q534f) (file-readable? . q534e) (file-regular? . q534d) (file-symbolic-link? . q534c) (file-directory? . q534b) (create-symbolic-link . q534a) (rename-file . q5349) (delete-directory . q5348) (create-directory . q5347) (create-mosh-cache-dir . q5346) (get-environment-variables . q5345) (get-environment-variable . q5344) (join-wraps . q5343) (id->real-label . q5342) (same-marks? . q5341) (same-marks*? . q5340) (make-parameter . q2881) (socket-port . q531d) (socket-shutdown . q531c) (socket-close . q531b) (socket-send . q531a) (socket-recv! . q5319) (socket-recv . q5318) (make-server-socket . q5317) (make-client-socket . q5316) (socket-accept . q5315) (socket? . q5314) (parameterize . q50ac)) '() values values '#f '#f '#f '#f))
((lambda (q4f07@add-library-path! q4f09@parse-and-add-library-path q4f0b@for-each-with-index q4f0d@rpad q4f0f@condition-printer q4f11@record->field-alist q4f13@map-with-index q4f15@repl q4f17@trace-printer q4f19@command-line q4f1b@local-library-path q4f1d@load/args q4f1f@load q4f21@ironscheme-build q4f23@eval-top-level q4f25@compile-system-libraries q4f27@compile q4f29@compile->closure q4f2b@pre-compile-r6rs-file q4f2d@load-r6rs-top-level q4f2f@load-r6rs-top-level-sexp q4f31@prefix-inc q4f33@prefix-inc!) (begin (set! q4f07@add-library-path! (lambda (q4f6c@path) (q2c5d@q2a99@library-path (append (q2c5d@q2a99@library-path) (list q4f6c@path))))) (set! q4f09@parse-and-add-library-path (lambda (q4f6e@paths q4f6f@message) ((lambda (q4f73@separator) (begin (set! q4f73@separator (if (string=? (host-os) '"win32") '#\; '#\:)) ((lambda (q4f74@t) (if q4f74@t ((lambda (q4f76@paths) (for-each (lambda (q4f78@path) (if (file-exists? q4f78@path) (q4f07@add-library-path! (expand-path q4f78@path)) (format (current-error-port) q4f6f@message q4f78@path))) (string-split q4f76@paths q4f73@separator))) q4f74@t) (void))) q4f6e@paths))) '#f))) (set! q4f0b@for-each-with-index (lambda (q4f7a@proc q4f7b@lst) (letrec ((q4f7e@loop (lambda (q4f80@i q4f81@lst) (if (null? q4f81@lst) (if '#f '#f (void)) (begin (q4f7a@proc q4f80@i (car q4f81@lst)) (q4f7e@loop (+ q4f80@i '1) (cdr q4f81@lst))))))) (q4f7e@loop '1 q4f7b@lst)))) (set! q4f0d@rpad (lambda (q4f84@str q4f85@pad q4f86@n) ((lambda (q4f8a@rest) ((letrec ((q4f8c@loop (lambda (q4f8e@rest q4f8f@ret) (if (<= q4f8e@rest '0) q4f8f@ret (q4f8c@loop (- q4f8e@rest '1) (string-append q4f8f@ret q4f85@pad)))))) q4f8c@loop) q4f8a@rest (format '"~a" q4f84@str))) (- q4f86@n (string-length (format '"~a" q4f84@str)))))) (set! q4f0f@condition-printer (lambda (q4f92@e q4f93@port) ((lambda (q4f97@max-condition-len) (begin (set! q4f97@max-condition-len (apply max (map (lambda (q4fa8@c) (string-length (symbol->string (record-type-name (record-rtd q4fa8@c))))) (simple-conditions q4f92@e)))) (begin (display '" Condition components:\n" q4f93@port) (q4f0b@for-each-with-index (lambda (q4f98@i q4f99@x) ((lambda (q4f9c@rtd q4f9d@fields-alist) (begin (format q4f93@port '" ~d. ~a" q4f98@i (q4f0d@rpad (symbol->string (record-type-name q4f9c@rtd)) '" " q4f97@max-condition-len)) (if (null? q4f9d@fields-alist) (newline q4f93@port) (void)) ((letrec ((q4fa0@loop (lambda (q4fa2@first q4fa3@fields-alist) (if (null? q4fa3@fields-alist) '() ((lambda (q4fa6@field) (begin (if (not q4fa2@first) (display (q4f0d@rpad '"" '" " (+ '4 q4f97@max-condition-len)) q4f93@port) (void)) (display '"       " q4f93@port) (display (car q4fa6@field) q4f93@port) (display '": " q4f93@port) (write (cdr q4fa6@field) q4f93@port) (newline q4f93@port) (q4fa0@loop '#f (cdr q4fa3@fields-alist)))) (car q4fa3@fields-alist)))))) q4fa0@loop) '#t q4f9d@fields-alist))) (record-rtd q4f99@x) (q4f11@record->field-alist q4f99@x))) (simple-conditions q4f92@e))))) '#f))) (set! q4f11@record->field-alist (lambda (q4faa@r) ((lambda (q4fad@ref) (begin (set! q4fad@ref (lambda (q4fb8@rtd q4fb9@i q4fba@x) ((lambda (q4fbe@val) (if (symbol? q4fbe@val) (ungensym q4fbe@val) q4fbe@val)) ((record-accessor q4fb8@rtd q4fb9@i) q4fba@x)))) ((letrec ((q4fae@loop (lambda (q4fb0@ret q4fb1@rtd) (if q4fb1@rtd (q4fae@loop (append q4fb0@ret (q4f13@map-with-index (lambda (q4fb4@i q4fb5@field) (cons q4fb5@field (q4fad@ref q4fb1@rtd q4fb4@i q4faa@r))) (vector->list (record-type-field-names q4fb1@rtd)))) (record-type-parent q4fb1@rtd)) q4fb0@ret)))) q4fae@loop) '() (record-rtd q4faa@r)))) '#f))) (set! q4f13@map-with-index (lambda (q4fc0@proc q4fc1@lst) ((letrec ((q4fc4@loop (lambda (q4fc6@i q4fc7@lst q4fc8@ret) (if (null? q4fc7@lst) (reverse q4fc8@ret) (q4fc4@loop (+ q4fc6@i '1) (cdr q4fc7@lst) (cons (q4fc0@proc q4fc6@i (car q4fc7@lst)) q4fc8@ret)))))) q4fc4@loop) '0 q4fc1@lst '()))) (set! q4f15@repl (lambda q4fcc@x ((lambda (q4fcf@rec) (begin (set! q4fcf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (q4fd2@q4fd0) (lambda () (with-exception-handler (lambda (q4fd4@e) ((call/cc (lambda (q4fd6@q4fd1) (q4fd2@q4fd0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? q4fd4@e) (q4f0f@condition-printer q4fd4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" q4fd4@e))) (q4fd6@q4fd1 (lambda () (raise-continuable q4fd4@e)))))))))) (lambda () ((letrec ((q4fd8@loop (lambda (q4fda@line q4fdb@accum) ((lambda (q4fdf@parentheses-ok? q4fe1@eval-string-print) (begin (set! q4fdf@parentheses-ok? (lambda (q4fe6@text) ((letrec ((q4fe8@loop (lambda (q4fea@chars q4feb@p0 q4fec@p1) (if (null? q4fea@chars) (= '0 q4feb@p0 q4fec@p1) ((lambda (q4ff0@t) (if (memv q4ff0@t '(#\()) (q4fe8@loop (cdr q4fea@chars) (+ q4feb@p0 '1) q4fec@p1) (if (memv q4ff0@t '(#\))) (q4fe8@loop (cdr q4fea@chars) (- q4feb@p0 '1) q4fec@p1) (if (memv q4ff0@t '(#\[)) (q4fe8@loop (cdr q4fea@chars) q4feb@p0 (+ q4fec@p1 '1)) (if (memv q4ff0@t '(#\])) (q4fe8@loop (cdr q4fea@chars) q4feb@p0 (- q4fec@p1 '1)) (q4fe8@loop (cdr q4fea@chars) q4feb@p0 q4fec@p1)))))) (car q4fea@chars)))))) q4fe8@loop) (string->list q4fe6@text) '0 '0))) (set! q4fe1@eval-string-print (lambda (q4fe4@text) (if (not (or (string=? '"\n" q4fe4@text) (= '0 (string-length q4fe4@text)))) (write (q4f23@eval-top-level (call-with-port (open-string-input-port q4fe4@text) read))) (void)))) (if (eof-object? q4fda@line) (begin (q4fe1@eval-string-print q4fdb@accum) (exit)) ((lambda (q4fe2@current) (if (q4fdf@parentheses-ok? q4fe2@current) (q4fe1@eval-string-print q4fe2@current) (q4fd8@loop (get-line (current-input-port)) q4fe2@current))) (string-append q4fdb@accum q4fda@line))))) '#f '#f)))) q4fd8@loop) (get-line (current-input-port)) '""))))))) (newline) (q4fcf@rec)))) (q4fcf@rec))) '#f))) (set! q4f17@trace-printer (q29a3@q2882@make-parameter write)) (set! q4f19@command-line (q29a3@q2882@make-parameter (get-command-line))) (set! q4f1b@local-library-path (lambda (q4ff2@filename) (q2c5d@q2a99@library-path))) (set! q4f1d@load/args (lambda (q4ff4@filename . q4ff6@args) (begin (apply q4f2d@load-r6rs-top-level q4ff4@filename 'load q4ff6@args) (void)))) (set! q4f1f@load (lambda (q4ff8@filename) (begin (apply q4f2d@load-r6rs-top-level q4ff8@filename 'load (q4f19@command-line)) (void)))) (set! q4f21@ironscheme-build (lambda () (q4f1f@load '"ironscheme-buildscript.ss"))) (set! q4f23@eval-top-level (lambda (q4ffa@x) (q4b2e@q3109@eval q4ffa@x (q4b44@q3135@interaction-environment)))) (set! q4f25@compile-system-libraries (lambda () (q4f23@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! q4f27@compile (lambda (q4ffc@filename) (q4f2d@load-r6rs-top-level q4ffc@filename 'compile))) (set! q4f29@compile->closure (lambda (q4ffe@filename) (q4f2d@load-r6rs-top-level q4ffe@filename 'closure))) (set! q4f2b@pre-compile-r6rs-file (lambda (q5000@filename) (q4f2d@load-r6rs-top-level q5000@filename 'compile))) (set! q4f2d@load-r6rs-top-level (lambda (q5002@filename q5003@how . q5006@args) ((lambda (q500c@q5009 q500d@q500b) ((lambda (q5010@swap) (dynamic-wind q5010@swap (lambda () ((lambda (q5012@x*) ((lambda (q5014@t) (if (memv q5014@t '(closure)) (q4b43@q3133@pre-compile-r6rs-top-level q5012@x*) (if (memv q5014@t '(load)) ((lambda (q501e@q5017 q501f@q5019 q5020@q501b q5021@q501d) ((lambda (q5026@swap) (dynamic-wind q5026@swap (lambda () (begin (if (q29a4@q2884@mosh-cache-dir) (gensym-prefix-set! (q4f33@prefix-inc! (string-append (q29a4@q2884@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (q5028@file) ((call/cc (lambda (q502c@q502a) (lambda () (with-exception-handler (lambda (q502e@c) ((call/cc (lambda (q5030@q502b) (q502c@q502a (lambda () (if '#t '#t (q5030@q502b (lambda () (raise-continuable q502e@c)))))))))) (lambda () (delete-file (string-append (q29a4@q2884@mosh-cache-dir) '"/" q5028@file))))))))) (directory-list (q29a4@q2884@mosh-cache-dir))) (void)) ((lambda (q5032@compiled) (begin (if (and (q29a4@q2884@mosh-cache-dir) (not (symbol-value '%disable-acc))) (q2c61@q2aa1@serialize-all q299e@q2878@serialize-library q29fa@q29b3@compile-core-expr) (void)) (q5032@compiled))) (q4b42@q3131@compile-r6rs-top-level q5012@x*)))) q5026@swap)) (lambda () (begin ((lambda (q5034@t) (begin (q501e@q5017 q5020@q501b) (set! q5020@q501b q5034@t))) (q501e@q5017)) ((lambda (q5036@t) (begin (q501f@q5019 q5021@q501d) (set! q5021@q501d q5036@t))) (q501f@q5019)))))) q4f19@command-line q29a4@q2884@mosh-cache-dir (cons q5002@filename (car q5006@args)) (create-mosh-cache-dir)) (if (memv q5014@t '(compile)) (begin (q4b42@q3131@compile-r6rs-top-level q5012@x*) (q2c61@q2aa1@serialize-all q299e@q2878@serialize-library q29fa@q29b3@compile-core-expr)) (if '#f '#f (void)))))) q5003@how)) (with-input-from-file q5002@filename (lambda () ((letrec ((q5038@f (lambda () ((lambda (q503a@x) (if (eof-object? q503a@x) '() (cons q503a@x (q5038@f)))) (q2996@q2868@read-annotated))))) q5038@f)))))) q5010@swap)) (lambda () ((lambda (q503c@t) (begin (q500c@q5009 q500d@q500b) (set! q500d@q500b q503c@t))) (q500c@q5009))))) q2c5d@q2a99@library-path (q4f1b@local-library-path q5002@filename)))) (set! q4f2f@load-r6rs-top-level-sexp (lambda (q503e@import-spec q503f@thunk) ((lambda (q504a@q5043 q504b@q5045 q504c@q5047 q504d@q5049) ((lambda (q5052@swap) (dynamic-wind q5052@swap (lambda () (begin (if (q29a4@q2884@mosh-cache-dir) (gensym-prefix-set! (q4f33@prefix-inc! (string-append (q29a4@q2884@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (q5058@q5055 q5059@q5057) ((lambda (q505c@swap) (dynamic-wind q505c@swap (lambda () ((q4b42@q3131@compile-r6rs-top-level (list (cons 'import q503e@import-spec) (list q503f@thunk))))) q505c@swap)) (lambda () ((lambda (q505e@t) (begin (q5058@q5055 q5059@q5057) (set! q5059@q5057 q505e@t))) (q5058@q5055))))) q4f19@command-line '()))) q5052@swap)) (lambda () (begin ((lambda (q5060@t) (begin (q504a@q5043 q504c@q5047) (set! q504c@q5047 q5060@t))) (q504a@q5043)) ((lambda (q5062@t) (begin (q504b@q5045 q504d@q5049) (set! q504d@q5049 q5062@t))) (q504b@q5045)))))) q2c5d@q2a99@library-path q29a4@q2884@mosh-cache-dir (q4f1b@local-library-path '"") (create-mosh-cache-dir)))) (set! q4f31@prefix-inc (lambda (q5064@prefix-string) ((lambda (q5066@prefix) ((lambda (q5068@len) ((lambda () ((letrec ((q506a@loop (lambda (q506c@i q506d@carry? q506e@accum) (if (< q506c@i '0) (string->symbol (list->string (if q506d@carry? (cons '#\a q506e@accum) q506e@accum))) (if q506d@carry? ((lambda (q5072@next-integer) (if (= q5072@next-integer '123) (q506a@loop (- q506c@i '1) '#f (cons '#\A q506e@accum)) (if (= q5072@next-integer '91) (q506a@loop (- q506c@i '1) '#t (cons '#\a q506e@accum)) (q506a@loop (- q506c@i '1) '#f (cons (integer->char q5072@next-integer) q506e@accum))))) (+ '1 (char->integer (string-ref q5066@prefix q506c@i)))) (q506a@loop (- q506c@i '1) '#f (cons (string-ref q5066@prefix q506c@i) q506e@accum))))))) q506a@loop) (- q5068@len '1) '#t '())))) (string-length q5066@prefix))) (symbol->string q5064@prefix-string)))) (set! q4f33@prefix-inc! (lambda (q5074@file) (begin (if (not (file-exists? q5074@file)) (call-with-output-file q5074@file (lambda (q5076@port) (write 'd q5076@port))) (void)) ((lambda (q5078@prefix) ((lambda (q507a@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port q5074@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (q507c@port) (write q507a@next-prefix q507c@port))) q5078@prefix)))) (q4f31@prefix-inc q5078@prefix))) (call-with-input-file q5074@file read))))) (begin (set! q5094@q4f33@prefix-inc! q4f33@prefix-inc!) (set! q5093@q4f31@prefix-inc q4f31@prefix-inc) (set! q5092@q4f2f@load-r6rs-top-level-sexp q4f2f@load-r6rs-top-level-sexp) (set! q5091@q4f2d@load-r6rs-top-level q4f2d@load-r6rs-top-level) (set! q5090@q4f2b@pre-compile-r6rs-file q4f2b@pre-compile-r6rs-file) (set! q508f@q4f29@compile->closure q4f29@compile->closure) (set! q508e@q4f27@compile q4f27@compile) (set! q508d@q4f25@compile-system-libraries q4f25@compile-system-libraries) (set! q508c@q4f23@eval-top-level q4f23@eval-top-level) (set! q508b@q4f21@ironscheme-build q4f21@ironscheme-build) (set! q508a@q4f1f@load q4f1f@load) (set! q5089@q4f1d@load/args q4f1d@load/args) (set! q5088@q4f1b@local-library-path q4f1b@local-library-path) (set! q5087@q4f19@command-line q4f19@command-line) (set! q5086@q4f17@trace-printer q4f17@trace-printer) (set! q5085@q4f15@repl q4f15@repl) (set! q5084@q4f13@map-with-index q4f13@map-with-index) (set! q5083@q4f11@record->field-alist q4f11@record->field-alist) (set! q5082@q4f0f@condition-printer q4f0f@condition-printer) (set! q5081@q4f0d@rpad q4f0d@rpad) (set! q5080@q4f0b@for-each-with-index q4f0b@for-each-with-index) (set! q507f@q4f09@parse-and-add-library-path q4f09@parse-and-add-library-path) (set! q507e@q4f07@add-library-path! q4f07@add-library-path!) (q2c62@q2aa3@current-precompiled-library-loader q299f@q287a@load-serialized-library) (set-symbol-value! 'load q4f1f@load) (set-symbol-value! 'pre-compile-r6rs-file q4f2b@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs q4f23@eval-top-level) (set-symbol-value! 'int-env-syms q4b25@q30f7@interaction-environment-symbols) (set-symbol-value! 'expanded2core q29f9@q29b1@expanded->core) (set-symbol-value! 'trace-printer q4f17@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (q4f34@c) (condition (q4e64@q4c6e@make-non-continuable-violation) (q4e5a@q4c55@make-who-condition 'raise) (q4e1e@q4bb6@make-message-condition '"returned from non-continuable exception") (q4e50@q4c3a@make-irritants-condition (list q4f34@c))))) (q4f09@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (q4f09@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (q4f07@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (q4f07@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (q4f07@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (q4f36@prefix) (q2c5e@q2a9b@library-extensions (q4f36@prefix '".mosh" (q2c5e@q2a9b@library-extensions)))) (lambda (q4f38@ext q4f39@ls) (append (map (lambda (q4f3c@x) (string-append q4f38@ext q4f3c@x)) q4f39@ls) q4f39@ls))) ((lambda (q4f3e@args q4f3f@port) ((lambda (q4f43@ref) (begin (set! q4f43@ref (lambda (q4f64@rtd q4f65@i q4f66@x) ((lambda (q4f6a@val) (if (symbol? q4f6a@val) (ungensym q4f6a@val) q4f6a@val)) ((record-accessor q4f64@rtd q4f65@i) q4f66@x)))) (with-exception-handler (lambda (q4f44@c) (if (condition? q4f44@c) (q4f0f@condition-printer q4f44@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" q4f44@c))) (lambda () (if ((call/cc (lambda (q4f48@q4f46) (lambda () (with-exception-handler (lambda (q4f4a@c) ((call/cc (lambda (q4f4c@q4f47) (q4f48@q4f46 (lambda () (if '#t '#f (q4f4c@q4f47 (lambda () (raise-continuable q4f4a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (q4f2f@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? q4f3e@args) ((lambda (q4f56@q4f4f q4f57@q4f51 q4f58@q4f53 q4f59@q4f55) ((lambda (q4f5e@swap) (dynamic-wind q4f5e@swap (lambda () (begin (if (q29a4@q2884@mosh-cache-dir) (gensym-prefix-set! (q4f33@prefix-inc! (string-append (q29a4@q2884@mosh-cache-dir) '"/prefix.txt"))) (void)) (q4f15@repl))) q4f5e@swap)) (lambda () (begin ((lambda (q4f60@t) (begin (q4f56@q4f4f q4f58@q4f53) (set! q4f58@q4f53 q4f60@t))) (q4f56@q4f4f)) ((lambda (q4f62@t) (begin (q4f57@q4f51 q4f59@q4f55) (set! q4f59@q4f55 q4f62@t))) (q4f57@q4f51)))))) q4f19@command-line q29a4@q2884@mosh-cache-dir '() (create-mosh-cache-dir)) (q4f2d@load-r6rs-top-level (car q4f3e@args) 'load (cdr q4f3e@args)))))))) '#f)) (q4f19@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
