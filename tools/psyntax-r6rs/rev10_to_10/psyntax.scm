;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! y58b@library-file-path->cache-path (unspecified)) (set! y58d@read-annotated (unspecified)) (set! y58f@annotation-stripped (unspecified)) (set! y591@annotation? (unspecified)) (set! y593@annotation-source (unspecified)) (set! y595@annotation-expression (unspecified)) (set! y597@scm->fasl (unspecified)) (set! y599@fasl-save (unspecified)) (set! y59b@fasl-load (unspecified)) (set! y59d@serialize-library (unspecified)) (set! y59f@load-serialized-library (unspecified)) (set! y5a1@make-record-printer (unspecified)) (set! y5a3@compile-core (unspecified)) (set! y5a5@read-library-source-file (unspecified)) (set! y5a7@make-parameter (unspecified)) (set! y5a9@mosh-cache-dir (unspecified)) (set! y63f@file-options-spec (unspecified)) (set! y58b@library-file-path->cache-path (lambda (y640@x) (call-with-values (lambda () (open-string-output-port)) (lambda (y646@y643 y647@y645) (let ((y64a@extract y647@y645) (y64b@p y646@y643)) (let ((y64f@display-hex '#f)) (begin (set! y64f@display-hex (lambda (y658@n) (if (<= '0 y658@n '9) (display y658@n y64b@p) (display (integer->char (+ (char->integer '#\a) (- y658@n '10))) y64b@p)))) (begin (let y652@f ((y650@ls (string-split y640@x '#\/))) (if (not (null? y650@ls)) (begin (display '"_" y64b@p) (for-each (lambda (y654@c) (if (or (char<=? '#\a y654@c '#\z) (char<=? '#\A y654@c '#\Z) (char<=? '#\0 y654@c '#\9) (memv y654@c '(#\- #\. #\_ #\~))) (display y654@c y64b@p) (begin (display '"%" y64b@p) (let ((y656@n (char->integer y654@c))) (begin (y64f@display-hex (quotient y656@n '16)) (y64f@display-hex (remainder y656@n '16))))))) (string->list (car y650@ls))) (y652@f (cdr y650@ls))) (void))) (y64a@extract))))))))) (set! y6ba@y58b@library-file-path->cache-path y58b@library-file-path->cache-path) (set! y58d@read-annotated read) (set! y6bb@y58d@read-annotated y58d@read-annotated) (set! y58f@annotation-stripped (lambda (y65a@x) (y595@annotation-expression y65a@x))) (set! y6bc@y58f@annotation-stripped y58f@annotation-stripped) (set! y591@annotation? (lambda (y65c@x) (source-info y65c@x))) (set! y6bd@y591@annotation? y591@annotation?) (set! y593@annotation-source (lambda (y65e@x) (source-info y65e@x))) (set! y6be@y593@annotation-source y593@annotation-source) (set! y595@annotation-expression (lambda (y660@x) (if (pair? y660@x) (cons (car y660@x) (cdr y660@x)) (display '"line:46\n")))) (set! y6bf@y595@annotation-expression y595@annotation-expression) (set! y597@scm->fasl (lambda (y662@filename) (string-append (y5a9@mosh-cache-dir) '"/" (y58b@library-file-path->cache-path y662@filename) '".mosh-fasl"))) (set! y6c0@y597@scm->fasl y597@scm->fasl) (set! y599@fasl-save (lambda (y664@filename y665@obj) (call-with-port (open-file-output-port y664@filename) (lambda (y668@port) ((symbol-value 'fasl-write!) y665@obj y668@port))))) (set! y6c1@y599@fasl-save y599@fasl-save) (set! y59b@fasl-load (lambda (y66a@filename) (call-with-port (open-file-input-port y66a@filename) (symbol-value 'fasl-read!)))) (set! y6c2@y59b@fasl-load y59b@fasl-load) (set! y59d@serialize-library (lambda (y66c@filename y66d@obj) (begin (let ((y670@expanded2core (symbol-value 'expanded2core))) (let ((y672@compile (symbol-value 'compile-w/o-halt))) (let ((y674@code y66d@obj)) (let ((y676@pivot (cddddr (cddddr y674@code)))) (let ((y678@visit (y672@compile (y670@expanded2core (car y676@pivot))))) (begin (set-car! y676@pivot y678@visit) (let ((y67a@pivot (cdr y676@pivot))) (let ((y67c@invoke (y672@compile (y670@expanded2core (car y67a@pivot))))) (set-car! y67a@pivot y67c@invoke))))))))) (let ((y67e@fasl-file (y597@scm->fasl y66c@filename))) (begin (if (file-exists? y67e@fasl-file) (delete-file y67e@fasl-file) (void)) ((call/cc (lambda (y682@y680) (lambda () (with-exception-handler (lambda (y684@c) ((call/cc (lambda (y686@y681) (y682@y680 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " y66c@filename) (if (file-exists? y67e@fasl-file) (delete-file y67e@fasl-file) (void)) '#f) (y686@y681 (lambda () (raise-continuable y684@c)))))))))) (lambda () (y599@fasl-save y67e@fasl-file y66d@obj)))))))))))) (set! y6c3@y59d@serialize-library y59d@serialize-library) (set! y59f@load-serialized-library (lambda (y688@filename y689@obj) (and (y5a9@mosh-cache-dir) (let ((y68c@fasl-file (y597@scm->fasl y688@filename))) (if (and (file-exists? y68c@fasl-file) ((symbol-value 'file-newer?) y68c@fasl-file y688@filename)) (let ((y68e@expanded2core (symbol-value 'expanded2core))) (let ((y690@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((y692@code (y59b@fasl-load y68c@fasl-file))) (let ((y694@pivot (cddddr (cddddr y692@code)))) (let ((y696@visit (car y694@pivot))) (let ((y698@visit-proc (lambda () (y690@eval-compiled-core y696@visit)))) (begin (set-car! y694@pivot y698@visit-proc) (let ((y69a@pivot (cdr y694@pivot))) (let ((y69c@invoke (car y69a@pivot))) (begin (set-car! y69a@pivot (lambda () (y690@eval-compiled-core y69c@invoke))) (apply y689@obj y692@code))))))))))) '#f))))) (set! y6c4@y59f@load-serialized-library y59f@load-serialized-library) (set! y5a1@make-record-printer (lambda (y69e@name y69f@printer) (lambda y6a2@x (begin (display '"record printer") (for-each display y6a2@x))))) (set! y6c5@y5a1@make-record-printer y5a1@make-record-printer) (set! y5a3@compile-core (lambda y6a4@x (apply error 'comile-core '"not implementated" y6a4@x))) (set! y6c6@y5a3@compile-core y5a3@compile-core) (set! y5a5@read-library-source-file (lambda (y6a6@file-name) (with-input-from-file y6a6@file-name y58d@read-annotated))) (set! y6c7@y5a5@read-library-source-file y5a5@read-library-source-file) (set! y5a7@make-parameter (lambda y6b6 (let ((y6b7 (length y6b6))) (if (= y6b7 '1) (apply (lambda (y6a8@x) (y5a7@make-parameter y6a8@x (lambda (y6aa@x) y6aa@x))) y6b6) (if (= y6b7 '2) (apply (lambda (y6ac@x y6ad@fender) (let ((y6b0@x (y6ad@fender y6ac@x))) (lambda y6b4 (let ((y6b5 (length y6b4))) (if (= y6b5 '0) (apply (lambda () y6b0@x) y6b4) (if (= y6b5 '1) (apply (lambda (y6b2@v) (set! y6b0@x (y6ad@fender y6b2@v))) y6b4) (error 'apply '"invalid arg count"))))))) y6b6) (error 'apply '"invalid arg count")))))) (set! y6c8@y5a7@make-parameter y5a7@make-parameter) (set! y5a9@mosh-cache-dir (y5a7@make-parameter '#f)) (set! y6c9@y5a9@mosh-cache-dir y5a9@mosh-cache-dir) (set! y63f@file-options-spec (lambda (y6b8@x) y6b8@x)) (set! y6ca@y63f@file-options-spec y63f@file-options-spec) (void))
(begin (set! y6d0@current-primitive-locations (unspecified)) (set! y6d2@mutable? (unspecified)) (set! y6d4@rewriter (unspecified)) (set! y6d6@expanded->core (unspecified)) (set! y6d8@compile-core-expr (unspecified)) (set! y6da@pretty-print (unspecified)) (set! y6dc@compile-core-expr-to-port (unspecified)) (set! y6d0@current-primitive-locations (y6c8@y5a7@make-parameter (lambda (y6dd@x) '#f) (lambda (y6df@p) y6df@p))) (set! y71b@y6d0@current-primitive-locations y6d0@current-primitive-locations) (set! y6d2@mutable? (lambda (y6e1@x) (or (pair? y6e1@x) (vector? y6e1@x) (hashtable? y6e1@x)))) (set! y71c@y6d2@mutable? y6d2@mutable?) (set! y6d4@rewriter (lambda (y6e3@quote-hack?) (let ((y6e6@f '#f)) (begin (set! y6e6@f (lambda (y6e7@x) (if (pair? y6e7@x) (let ((y6e9@t (car y6e7@x))) (if (memv y6e9@t '(quote)) (if (and y6e3@quote-hack? (y6d2@mutable? (cadr y6e7@x))) (let ((y6eb@g (gensym))) (begin (set-symbol-value! y6eb@g (cadr y6e7@x)) y6eb@g)) y6e7@x) (if (memv y6e9@t '(case-lambda)) (cons 'case-lambda (map (lambda (y6ed@x) (cons (car y6ed@x) (map y6e6@f (cdr y6ed@x)))) (cdr y6e7@x))) (if (memv y6e9@t '(lambda)) (cons* 'lambda (cadr y6e7@x) (map y6e6@f (cddr y6e7@x))) (if (memv y6e9@t '(letrec)) (let ((y6ef@bindings (cadr y6e7@x)) (y6f0@body* (cddr y6e7@x))) (let ((y6f3@lhs* (map car y6ef@bindings)) (y6f4@rhs* (map cadr y6ef@bindings))) (cons* 'letrec (map list y6f3@lhs* (map y6e6@f y6f4@rhs*)) (map y6e6@f y6f0@body*)))) (if (memv y6e9@t '(letrec*)) (let ((y6f7@bindings (cadr y6e7@x)) (y6f8@body* (cddr y6e7@x))) (let ((y6fb@lhs* (map car y6f7@bindings)) (y6fc@rhs* (map cadr y6f7@bindings))) (cons* 'letrec* (map list y6fb@lhs* (map y6e6@f y6fc@rhs*)) (map y6e6@f y6f8@body*)))) (if (memv y6e9@t '(library-letrec*)) (let ((y6ff@name (cadr y6e7@x)) (y700@x (cdr y6e7@x))) (let ((y703@bindings (cadr y700@x)) (y704@body* (cddr y700@x))) (let ((y707@lhs* (map car y703@bindings)) (y708@lhs** (map cadr y703@bindings)) (y709@rhs* (map caddr y703@bindings))) (cons* 'library-letrec* y6ff@name (map list y707@lhs* y708@lhs** (map y6e6@f y709@rhs*)) (map y6e6@f y704@body*))))) (if (memv y6e9@t '(begin)) (cons 'begin (map y6e6@f (cdr y6e7@x))) (if (memv y6e9@t '(set!)) (list 'set! (cadr y6e7@x) (y6e6@f (caddr y6e7@x))) (if (memv y6e9@t '(primitive)) (let ((y70d@op (cadr y6e7@x))) (let ((y70f@t ((y6d0@current-primitive-locations) y70d@op))) (if y70f@t ((lambda (y711@loc) y711@loc) y70f@t) y70d@op))) (if (memv y6e9@t '(define)) y6e7@x (if (list? y6e7@x) (map y6e6@f y6e7@x) (error 'rewrite '"invalid form ~s ~s" y6e7@x (list? y6e7@x)))))))))))))) y6e7@x))) y6e6@f)))) (set! y71d@y6d4@rewriter y6d4@rewriter) (set! y6d6@expanded->core (lambda (y713@x) ((y6d4@rewriter '#f) y713@x))) (set! y71e@y6d6@expanded->core y6d6@expanded->core) (set! y6d8@compile-core-expr (lambda (y715@x) ((y6d4@rewriter '#f) y715@x))) (set! y71f@y6d8@compile-core-expr y6d8@compile-core-expr) (set! y6da@pretty-print write) (set! y720@y6da@pretty-print y6da@pretty-print) (set! y6dc@compile-core-expr-to-port (lambda (y717@x y718@p) (y6da@pretty-print ((y6d4@rewriter '#f) y717@x) y718@p))) (set! y721@y6dc@compile-core-expr-to-port y6dc@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! y770@make-collection (unspecified)) (set! y772@current-library-collection (unspecified)) (set! y774@rp (unspecified)) (set! y77e@library? (unspecified)) (set! y780@library-id (unspecified)) (set! y782@set-library-id! (unspecified)) (set! y784@library-name (unspecified)) (set! y786@set-library-name! (unspecified)) (set! y788@library-version (unspecified)) (set! y78a@set-library-version! (unspecified)) (set! y78c@library-imp* (unspecified)) (set! y78e@set-library-imp*! (unspecified)) (set! y790@library-vis* (unspecified)) (set! y792@set-library-vis*! (unspecified)) (set! y794@library-inv* (unspecified)) (set! y796@set-library-inv*! (unspecified)) (set! y798@library-subst (unspecified)) (set! y79a@set-library-subst! (unspecified)) (set! y79c@library-env (unspecified)) (set! y79e@set-library-env! (unspecified)) (set! y7a0@library-visit-state (unspecified)) (set! y7a2@set-library-visit-state! (unspecified)) (set! y7a4@library-invoke-state (unspecified)) (set! y7a6@set-library-invoke-state! (unspecified)) (set! y7a8@library-visit-code (unspecified)) (set! y7aa@set-library-visit-code! (unspecified)) (set! y7ac@library-invoke-code (unspecified)) (set! y7ae@set-library-invoke-code! (unspecified)) (set! y7b0@library-visible? (unspecified)) (set! y7b2@set-library-visible?! (unspecified)) (set! y7b4@library-source-file-name (unspecified)) (set! y7b6@set-library-source-file-name! (unspecified)) (set! y7b8@dummy (unspecified)) (set! y7ba@find-dependencies (unspecified)) (set! y7bc@find-library-by (unspecified)) (set! y7be@library-path (unspecified)) (set! y7c0@library-extensions (unspecified)) (set! y7c2@library-name->file-name (unspecified)) (set! y7c4@file-locator (unspecified)) (set! y7c6@serialize-all (unspecified)) (set! y7c8@current-precompiled-library-loader (unspecified)) (set! y7ca@try-load-from-file (unspecified)) (set! y7cc@library-loader (unspecified)) (set! y7ce@current-library-expander (unspecified)) (set! y7d0@external-pending-libraries (unspecified)) (set! y7d2@find-external-library (unspecified)) (set! y7d4@find-library-by-name (unspecified)) (set! y7d6@library-exists? (unspecified)) (set! y7d8@find-library-by-spec/die (unspecified)) (set! y7da@label->binding-table (unspecified)) (set! y7dc@install-library-record (unspecified)) (set! y7de@install-library (unspecified)) (set! y7e0@imported-label->binding (unspecified)) (set! y7e2@invoke-library (unspecified)) (set! y7e4@visit-library (unspecified)) (set! y7e6@invoke-library-by-spec (unspecified)) (set! y7e8@installed-libraries (unspecified)) (set! y7ea@library-spec (unspecified)) (set! y770@make-collection (lambda () (let ((y7eb@set '())) (let ((y7ee@set-cons '#f)) (begin (set! y7ee@set-cons (lambda (y7f3@x y7f4@ls) (if (memq y7f3@x y7f4@ls) y7f4@ls (cons y7f3@x y7f4@ls)))) (lambda y7f1 (let ((y7f2 (length y7f1))) (if (= y7f2 '0) (apply (lambda () y7eb@set) y7f1) (if (= y7f2 '1) (apply (lambda (y7ef@x) (set! y7eb@set (y7ee@set-cons y7ef@x y7eb@set))) y7f1) (error 'apply '"invalid arg count")))))))))) (set! y95f@y770@make-collection y770@make-collection) (set! y772@current-library-collection (y6c8@y5a7@make-parameter (y770@make-collection) (lambda (y7f7@x) (begin (if (not (procedure? y7f7@x)) (assertion-violation 'current-library-collection '"not a procedure" y7f7@x) (void)) y7f7@x)))) (set! y960@y772@current-library-collection y772@current-library-collection) (set! y774@rp (y6c5@y5a1@make-record-printer 'library (lambda (y7f9@x y7fa@p y7fb@wr) (begin (if (not (y77e@library? y7f9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (y788@library-version y7f9@x)) (y784@library-name y7f9@x) (append (y784@library-name y7f9@x) (list (y788@library-version y7f9@x))))) y7fa@p))))) (set! y961@y774@rp y774@rp) (set! y77e@library? (lambda (y7ff@x) (and (simple-struct? y7ff@x) (eq? (simple-struct-name y7ff@x) 'library)))) (set! y962@y77e@library? y77e@library?) (set! y780@library-id (lambda (y801@x) (simple-struct-ref y801@x '0))) (set! y963@y780@library-id y780@library-id) (set! y782@set-library-id! (lambda (y803@x y804@val) (simple-struct-set! y803@x '0 y804@val))) (set! y964@y782@set-library-id! y782@set-library-id!) (set! y784@library-name (lambda (y807@x) (simple-struct-ref y807@x '1))) (set! y965@y784@library-name y784@library-name) (set! y786@set-library-name! (lambda (y809@x y80a@val) (simple-struct-set! y809@x '1 y80a@val))) (set! y966@y786@set-library-name! y786@set-library-name!) (set! y788@library-version (lambda (y80d@x) (simple-struct-ref y80d@x '2))) (set! y967@y788@library-version y788@library-version) (set! y78a@set-library-version! (lambda (y80f@x y810@val) (simple-struct-set! y80f@x '2 y810@val))) (set! y968@y78a@set-library-version! y78a@set-library-version!) (set! y78c@library-imp* (lambda (y813@x) (simple-struct-ref y813@x '3))) (set! y969@y78c@library-imp* y78c@library-imp*) (set! y78e@set-library-imp*! (lambda (y815@x y816@val) (simple-struct-set! y815@x '3 y816@val))) (set! y96a@y78e@set-library-imp*! y78e@set-library-imp*!) (set! y790@library-vis* (lambda (y819@x) (simple-struct-ref y819@x '4))) (set! y96b@y790@library-vis* y790@library-vis*) (set! y792@set-library-vis*! (lambda (y81b@x y81c@val) (simple-struct-set! y81b@x '4 y81c@val))) (set! y96c@y792@set-library-vis*! y792@set-library-vis*!) (set! y794@library-inv* (lambda (y81f@x) (simple-struct-ref y81f@x '5))) (set! y96d@y794@library-inv* y794@library-inv*) (set! y796@set-library-inv*! (lambda (y821@x y822@val) (simple-struct-set! y821@x '5 y822@val))) (set! y96e@y796@set-library-inv*! y796@set-library-inv*!) (set! y798@library-subst (lambda (y825@x) (simple-struct-ref y825@x '6))) (set! y96f@y798@library-subst y798@library-subst) (set! y79a@set-library-subst! (lambda (y827@x y828@val) (simple-struct-set! y827@x '6 y828@val))) (set! y970@y79a@set-library-subst! y79a@set-library-subst!) (set! y79c@library-env (lambda (y82b@x) (simple-struct-ref y82b@x '7))) (set! y971@y79c@library-env y79c@library-env) (set! y79e@set-library-env! (lambda (y82d@x y82e@val) (simple-struct-set! y82d@x '7 y82e@val))) (set! y972@y79e@set-library-env! y79e@set-library-env!) (set! y7a0@library-visit-state (lambda (y831@x) (simple-struct-ref y831@x '8))) (set! y973@y7a0@library-visit-state y7a0@library-visit-state) (set! y7a2@set-library-visit-state! (lambda (y833@x y834@val) (simple-struct-set! y833@x '8 y834@val))) (set! y974@y7a2@set-library-visit-state! y7a2@set-library-visit-state!) (set! y7a4@library-invoke-state (lambda (y837@x) (simple-struct-ref y837@x '9))) (set! y975@y7a4@library-invoke-state y7a4@library-invoke-state) (set! y7a6@set-library-invoke-state! (lambda (y839@x y83a@val) (simple-struct-set! y839@x '9 y83a@val))) (set! y976@y7a6@set-library-invoke-state! y7a6@set-library-invoke-state!) (set! y7a8@library-visit-code (lambda (y83d@x) (simple-struct-ref y83d@x '10))) (set! y977@y7a8@library-visit-code y7a8@library-visit-code) (set! y7aa@set-library-visit-code! (lambda (y83f@x y840@val) (simple-struct-set! y83f@x '10 y840@val))) (set! y978@y7aa@set-library-visit-code! y7aa@set-library-visit-code!) (set! y7ac@library-invoke-code (lambda (y843@x) (simple-struct-ref y843@x '11))) (set! y979@y7ac@library-invoke-code y7ac@library-invoke-code) (set! y7ae@set-library-invoke-code! (lambda (y845@x y846@val) (simple-struct-set! y845@x '11 y846@val))) (set! y97a@y7ae@set-library-invoke-code! y7ae@set-library-invoke-code!) (set! y7b0@library-visible? (lambda (y849@x) (simple-struct-ref y849@x '12))) (set! y97b@y7b0@library-visible? y7b0@library-visible?) (set! y7b2@set-library-visible?! (lambda (y84b@x y84c@val) (simple-struct-set! y84b@x '12 y84c@val))) (set! y97c@y7b2@set-library-visible?! y7b2@set-library-visible?!) (set! y7b4@library-source-file-name (lambda (y84f@x) (simple-struct-ref y84f@x '13))) (set! y97d@y7b4@library-source-file-name y7b4@library-source-file-name) (set! y7b6@set-library-source-file-name! (lambda (y851@x y852@val) (simple-struct-set! y851@x '13 y852@val))) (set! y97e@y7b6@set-library-source-file-name! y7b6@set-library-source-file-name!) (set! y7b8@dummy '3) (set! y97f@y7b8@dummy y7b8@dummy) (set! y7ba@find-dependencies (lambda (y855@ls) (if (null? y855@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! y980@y7ba@find-dependencies y7ba@find-dependencies) (set! y7bc@find-library-by (lambda (y857@pred) (let y85b@f ((y859@ls ((y772@current-library-collection)))) (if (null? y859@ls) '#f (if (y857@pred (car y859@ls)) (car y859@ls) (y85b@f (cdr y859@ls))))))) (set! y981@y7bc@find-library-by y7bc@find-library-by) (set! y7be@library-path (y6c8@y5a7@make-parameter '(".") (lambda (y85d@x) (if (and (list? y85d@x) (for-all string? y85d@x)) (map (lambda (y85f@x) y85f@x) y85d@x) (assertion-violation 'library-path '"not a list of strings" y85d@x))))) (set! y982@y7be@library-path y7be@library-path) (set! y7c0@library-extensions (y6c8@y5a7@make-parameter '(".sls" ".ss" ".scm") (lambda (y861@x) (if (and (list? y861@x) (for-all string? y861@x)) (map (lambda (y863@x) y863@x) y861@x) (assertion-violation 'library-extensions '"not a list of strings" y861@x))))) (set! y983@y7c0@library-extensions y7c0@library-extensions) (set! y7c2@library-name->file-name (lambda (y865@x) (call-with-values (lambda () (open-string-output-port)) (lambda (y86b@y868 y86c@y86a) (let ((y86f@extract y86c@y86a) (y870@p y86b@y868)) (let ((y874@display-hex '#f)) (begin (set! y874@display-hex (lambda (y87d@n) (if (<= '0 y87d@n '9) (display y87d@n y870@p) (display (integer->char (+ (char->integer '#\a) (- y87d@n '10))) y870@p)))) (begin (let y877@f ((y875@ls y865@x)) (if (not (null? y875@ls)) (begin (display '"/" y870@p) (for-each (lambda (y879@c) (if (or (char<=? '#\a y879@c '#\z) (char<=? '#\A y879@c '#\Z) (char<=? '#\0 y879@c '#\9) (memv y879@c '(#\- #\. #\_ #\~))) (display y879@c y870@p) (begin (display '"%" y870@p) (let ((y87b@n (char->integer y879@c))) (begin (y874@display-hex (quotient y87b@n '16)) (y874@display-hex (remainder y87b@n '16))))))) (string->list (symbol->string (car y875@ls)))) (y877@f (cdr y875@ls))) (void))) (y86f@extract))))))))) (set! y984@y7c2@library-name->file-name y7c2@library-name->file-name) (set! y7c4@file-locator (y6c8@y5a7@make-parameter (lambda (y87f@x) (let ((y881@str (y7c2@library-name->file-name y87f@x))) (let y889@f ((y883@ls (y7be@library-path)) (y884@exts (y7c0@library-extensions)) (y885@failed-list '())) (if (null? y883@ls) (let ((y893@y88e '#f) (y895@y890 '#f) (y897@y88f '#f) (y89a@y88d '#f) (y89c@make-library-resolution-condition '#f) (y89e@y88b '#f) (y8a0@y88c '#f) (y8a2@library-resolution-condition? '#f) (y8a4@condition-library '#f) (y8a6@condition-files '#f)) (begin (set! y893@y88e (make-record-type-descriptor '&library-resolution y2b9a@y28e1@&condition-rtd 'y891 '#f '#f '#((immutable library) (immutable files)))) (set! y895@y890 '#f) (set! y897@y88f (make-record-constructor-descriptor y893@y88e y2b9b@y28e3@&condition-rcd y895@y890)) (set! y89a@y88d (record-predicate y893@y88e)) (set! y89c@make-library-resolution-condition (record-constructor y897@y88f)) (set! y89e@y88b (record-accessor y893@y88e '0)) (set! y8a0@y88c (record-accessor y893@y88e '1)) (set! y8a2@library-resolution-condition? (condition-predicate y893@y88e)) (set! y8a4@condition-library (condition-accessor y893@y88e y89e@y88b)) (set! y8a6@condition-files (condition-accessor y893@y88e y8a0@y88c)) (raise (condition (y2bba@y297b@make-error) (y2bdc@y29d7@make-who-condition 'expander) (y2ba0@y2938@make-message-condition '"cannot locate library in library-path") (y89c@make-library-resolution-condition y87f@x (reverse y885@failed-list)))))) (if (null? y884@exts) (y889@f (cdr y883@ls) (y7c0@library-extensions) y885@failed-list) (let ((y8a7@name (string-append (car y883@ls) y881@str (car y884@exts)))) (if (file-exists? y8a7@name) y8a7@name (y889@f y883@ls (cdr y884@exts) (cons y8a7@name y885@failed-list))))))))) (lambda (y8a9@f) (if (procedure? y8a9@f) y8a9@f (assertion-violation 'file-locator '"not a procedure" y8a9@f))))) (set! y985@y7c4@file-locator y7c4@file-locator) (set! y7c6@serialize-all (lambda (y8ab@serialize y8ac@compile) (let ((y8b0@library-desc '#f)) (begin (set! y8b0@library-desc (lambda (y8b3@x) (list (y780@library-id y8b3@x) (y784@library-name y8b3@x)))) (for-each (lambda (y8b1@x) (if (y7b4@library-source-file-name y8b1@x) (y8ab@serialize (y7b4@library-source-file-name y8b1@x) (list (y780@library-id y8b1@x) (y784@library-name y8b1@x) (y788@library-version y8b1@x) (map y8b0@library-desc (y78c@library-imp* y8b1@x)) (map y8b0@library-desc (y790@library-vis* y8b1@x)) (map y8b0@library-desc (y794@library-inv* y8b1@x)) (y798@library-subst y8b1@x) (y79c@library-env y8b1@x) (y8ac@compile (y7a8@library-visit-code y8b1@x)) (y8ac@compile (y7ac@library-invoke-code y8b1@x)) (y7b0@library-visible? y8b1@x))) (void))) ((y772@current-library-collection))))))) (set! y986@y7c6@serialize-all y7c6@serialize-all) (set! y7c8@current-precompiled-library-loader (y6c8@y5a7@make-parameter (lambda (y8b5@filename y8b6@sk) '#f))) (set! y987@y7c8@current-precompiled-library-loader y7c8@current-precompiled-library-loader) (set! y7ca@try-load-from-file (lambda (y8b9@filename) ((y7c8@current-precompiled-library-loader) y8b9@filename (lambda y8df (let ((y8e0 (length y8df))) (if (= y8e0 '11) (apply (lambda (y8bb@id y8bc@name y8bd@ver y8be@imp* y8bf@vis* y8c0@inv* y8c1@exp-subst y8c2@exp-env y8c3@visit-proc y8c4@invoke-proc y8c5@visible?) (let y8d3@f ((y8d1@deps (append y8be@imp* y8bf@vis* y8c0@inv*))) (if (null? y8d1@deps) (begin (y7de@install-library y8bb@id y8bc@name y8bd@ver y8be@imp* y8bf@vis* y8c0@inv* y8c1@exp-subst y8c2@exp-env y8c3@visit-proc y8c4@invoke-proc '#f '#f y8c5@visible? '#f) '#t) (let ((y8d5@d (car y8d1@deps))) (let ((y8d7@label (car y8d5@d)) (y8d8@dname (cadr y8d5@d))) (let ((y8db@l (y7d4@find-library-by-name y8d8@dname))) (if (and (y77e@library? y8db@l) (eq? y8d7@label (y780@library-id y8db@l))) (y8d3@f (cdr y8d1@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" y8bc@name y8d8@dname y8b9@filename y8db@l y8d7@label (y780@library-id y8db@l)) '#f)))))))) y8df) (if (>= y8e0 '0) (apply (lambda y8dd@others '#f) y8df) (error 'apply '"invalid arg count")))))))) (set! y988@y7ca@try-load-from-file y7ca@try-load-from-file) (set! y7cc@library-loader (y6c8@y5a7@make-parameter (lambda (y8e1@x) (let ((y8e3@file-name ((y7c4@file-locator) y8e1@x))) (if (not y8e3@file-name) (assertion-violation '#f '"cannot file library" y8e1@x) (or (y7ca@try-load-from-file y8e3@file-name) ((y7ce@current-library-expander) (y6c7@y5a5@read-library-source-file y8e3@file-name) y8e3@file-name (lambda (y8e5@name) (if (not (fast-equal? y8e5@name y8e1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (y8eb@y8e8 y8ec@y8ea) (let ((y8ef@e y8ec@y8ea) (y8f0@p y8eb@y8e8)) (begin (display '"expected to find library " y8f0@p) (write y8e1@x y8f0@p) (display '" in file " y8f0@p) (display y8e3@file-name y8f0@p) (display '", found " y8f0@p) (write y8e5@name y8f0@p) (display '" instead" y8f0@p) (y8ef@e)))))) (void)))))))) (lambda (y8f3@f) (if (procedure? y8f3@f) y8f3@f (assertion-violation 'library-locator '"not a procedure" y8f3@f))))) (set! y989@y7cc@library-loader y7cc@library-loader) (set! y7ce@current-library-expander (y6c8@y5a7@make-parameter (lambda (y8f5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (y8f7@f) (if (procedure? y8f7@f) y8f7@f (assertion-violation 'library-expander '"not a procedure" y8f7@f))))) (set! y98a@y7ce@current-library-expander y7ce@current-library-expander) (set! y7d0@external-pending-libraries (y6c8@y5a7@make-parameter '())) (set! y98b@y7d0@external-pending-libraries y7d0@external-pending-libraries) (set! y7d2@find-external-library (lambda (y8f9@name) (begin (if (member y8f9@name (y7d0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" y8f9@name) (void)) (let ((y8ff@y8fc y7d0@external-pending-libraries) (y900@y8fe (cons y8f9@name (y7d0@external-pending-libraries)))) (let ((y903@swap (lambda () (let ((y905@t (y8ff@y8fc))) (begin (y8ff@y8fc y900@y8fe) (set! y900@y8fe y905@t)))))) (dynamic-wind y903@swap (lambda () (begin ((y7cc@library-loader) y8f9@name) (or (y7bc@find-library-by (lambda (y907@x) (fast-equal? (y784@library-name y907@x) y8f9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" y8f9@name)))) y903@swap)))))) (set! y98c@y7d2@find-external-library y7d2@find-external-library) (set! y7d4@find-library-by-name (lambda (y909@name) (or (y7bc@find-library-by (lambda (y90b@x) (fast-equal? (y784@library-name y90b@x) y909@name))) (y7d2@find-external-library y909@name)))) (set! y98d@y7d4@find-library-by-name y7d4@find-library-by-name) (set! y7d6@library-exists? (lambda (y90d@name) (and (y7bc@find-library-by (lambda (y90f@x) (fast-equal? (y784@library-name y90f@x) y90d@name))) '#t))) (set! y98e@y7d6@library-exists? y7d6@library-exists?) (set! y7d8@find-library-by-spec/die (lambda (y911@spec) (let ((y913@id (car y911@spec))) (or (y7bc@find-library-by (lambda (y915@x) (eq? y913@id (y780@library-id y915@x)))) (assertion-violation '#f '"cannot find library with required spec" y911@spec))))) (set! y98f@y7d8@find-library-by-spec/die y7d8@find-library-by-spec/die) (set! y7da@label->binding-table (make-eq-hashtable)) (set! y990@y7da@label->binding-table y7da@label->binding-table) (set! y7dc@install-library-record (lambda (y917@lib) (begin (let ((y919@exp-env (y79c@library-env y917@lib))) (for-each (lambda (y91b@x) (let ((y91d@label (car y91b@x)) (y91e@binding (cdr y91b@x))) (let ((y921@binding (let ((y923@t (car y91e@binding))) (if (memv y923@t '(global)) (cons 'global (cons y917@lib (cdr y91e@binding))) (if (memv y923@t '(global-macro)) (cons 'global-macro (cons y917@lib (cdr y91e@binding))) (if (memv y923@t '(global-macro!)) (cons 'global-macro! (cons y917@lib (cdr y91e@binding))) y91e@binding)))))) (begin (if (hashtable-ref y7da@label->binding-table y91d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" y91d@label (hashtable-ref y7da@label->binding-table y91d@label '#f) y921@binding) (exit)) (void)) (hashtable-set! y7da@label->binding-table y91d@label y921@binding))))) y919@exp-env)) ((y772@current-library-collection) y917@lib)))) (set! y991@y7dc@install-library-record y7dc@install-library-record) (set! y7de@install-library (lambda (y925@id y926@name y927@ver y928@imp* y929@vis* y92a@inv* y92b@exp-subst y92c@exp-env y92d@visit-proc y92e@invoke-proc y92f@visit-code y930@invoke-code y931@visible? y932@source-file-name) (let ((y941@imp-lib* (map y7d8@find-library-by-spec/die y928@imp*)) (y942@vis-lib* (map y7d8@find-library-by-spec/die y929@vis*)) (y943@inv-lib* (map y7d8@find-library-by-spec/die y92a@inv*))) (begin (if (not (and (symbol? y925@id) (list? y926@name) (list? y927@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" y925@id y926@name y927@ver) (void)) (if (y7d6@library-exists? y926@name) (assertion-violation 'install-library '"library is already installed" y926@name) (void)) (let ((y947@lib (make-simple-struct 'library '15 (list y925@id y926@name y927@ver y941@imp-lib* y942@vis-lib* y943@inv-lib* y92b@exp-subst y92c@exp-env y92d@visit-proc y92e@invoke-proc y92f@visit-code y930@invoke-code y931@visible? y932@source-file-name)))) (y7dc@install-library-record y947@lib)))))) (set! y992@y7de@install-library y7de@install-library) (set! y7e0@imported-label->binding (lambda (y949@lab) (hashtable-ref y7da@label->binding-table y949@lab '#f))) (set! y993@y7e0@imported-label->binding y7e0@imported-label->binding) (set! y7e2@invoke-library (lambda (y94b@lib) (let ((y94d@invoke (y7a4@library-invoke-state y94b@lib))) (if (procedure? y94d@invoke) (begin (y7a6@set-library-invoke-state! y94b@lib (lambda () (assertion-violation 'invoke '"circularity detected" y94b@lib))) (for-each y7e2@invoke-library (y794@library-inv* y94b@lib)) (y7a6@set-library-invoke-state! y94b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" y94b@lib))) (y94d@invoke) (y7a6@set-library-invoke-state! y94b@lib '#t)) (void))))) (set! y994@y7e2@invoke-library y7e2@invoke-library) (set! y7e4@visit-library (lambda (y94f@lib) (let ((y951@visit (y7a0@library-visit-state y94f@lib))) (if (procedure? y951@visit) (begin (y7a2@set-library-visit-state! y94f@lib (lambda () (assertion-violation 'visit '"circularity detected" y94f@lib))) (for-each y7e2@invoke-library (y790@library-vis* y94f@lib)) (y7a2@set-library-visit-state! y94f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" y94f@lib))) (y951@visit) (y7a2@set-library-visit-state! y94f@lib '#t)) (void))))) (set! y995@y7e4@visit-library y7e4@visit-library) (set! y7e6@invoke-library-by-spec (lambda (y953@spec) (y7e2@invoke-library (y7d8@find-library-by-spec/die y953@spec)))) (set! y996@y7e6@invoke-library-by-spec y7e6@invoke-library-by-spec) (set! y7e8@installed-libraries (lambda y95b (let ((y95c (length y95b))) (if (= y95c '1) (apply (lambda (y955@all?) (let y959@f ((y957@ls ((y772@current-library-collection)))) (if (null? y957@ls) '() (if (or y955@all? (y7b0@library-visible? (car y957@ls))) (cons (car y957@ls) (y959@f (cdr y957@ls))) (y959@f (cdr y957@ls)))))) y95b) (if (= y95c '0) (apply (lambda () (y7e8@installed-libraries '#f)) y95b) (error 'apply '"invalid arg count")))))) (set! y997@y7e8@installed-libraries y7e8@installed-libraries) (set! y7ea@library-spec (lambda (y95d@x) (begin (if (not (y77e@library? y95d@x)) (assertion-violation 'library-spec '"not a library" y95d@x) (void)) (list (y780@library-id y95d@x) (y784@library-name y95d@x) (y788@library-version y95d@x))))) (set! y998@y7ea@library-spec y7ea@library-spec) (void))
(begin (set! y99c@build-global-define (unspecified)) (set! ya0d@build-lambda (unspecified)) (set! ya0f@build-case-lambda (unspecified)) (set! ya3d@build-sequence (unspecified)) (set! ya3f@build-void (unspecified)) (set! ya41@build-letrec (unspecified)) (set! ya43@build-let (unspecified)) (set! ya45@build-named-let (unspecified)) (set! ya47@build-letrec* (unspecified)) (set! ya49@build-library-letrec* (unspecified)) (set! ya4b@build-receive (unspecified)) (set! y99c@build-global-define (lambda (ya4c@x) (ya3f@build-void))) (set! yae0@y99c@build-global-define y99c@build-global-define) (set! ya0d@build-lambda (lambda (ya4e@ae ya4f@vars ya50@exp) (list 'lambda ya4f@vars ya50@exp))) (set! yae1@ya0d@build-lambda ya0d@build-lambda) (set! ya0f@build-case-lambda (lambda (ya54@ae ya55@vars* ya56@exp*) (let ((ya5b@build-error '#f) (ya5d@build-pred '#f) (ya5f@build-apply '#f) (ya61@expand-case-lambda '#f)) (begin (set! ya5b@build-error (lambda (ya92@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! ya5d@build-pred (lambda (ya7a@ae ya7b@n ya7c@vars) (call-with-values (lambda () (let ya88@f ((ya84@vars ya7c@vars) (ya85@count '0)) (if (pair? ya84@vars) (ya88@f (cdr ya84@vars) (+ ya85@count '1)) (if (null? ya84@vars) (values ya85@count '=) (values ya85@count '>=))))) (lambda (ya8a@ya81 ya8b@ya83) (let ((ya8e@pred ya8b@ya83) (ya8f@count ya8a@ya81)) (list (list 'primitive ya8e@pred) ya7b@n (list 'quote ya8f@count))))))) (set! ya5f@build-apply (lambda (ya72@ae ya73@g ya74@vars ya75@exp) (list '(primitive apply) (ya0d@build-lambda ya72@ae ya74@vars ya75@exp) ya73@g))) (set! ya61@expand-case-lambda (lambda (ya62@ae ya63@vars ya64@exp*) (let ((ya68@g (gensym)) (ya69@n (gensym))) (list 'lambda ya68@g (ya43@build-let ya62@ae (list ya69@n) (list (list '(primitive length) ya68@g)) (let ya70@f ((ya6c@vars* ya55@vars*) (ya6d@exp* ya64@exp*)) (if (null? ya6c@vars*) (ya5b@build-error ya62@ae) (list 'if (ya5d@build-pred ya62@ae ya69@n (car ya6c@vars*)) (ya5f@build-apply ya62@ae ya68@g (car ya6c@vars*) (car ya6d@exp*)) (ya70@f (cdr ya6c@vars*) (cdr ya6d@exp*)))))))))) (if (= (length ya56@exp*) '1) (ya0d@build-lambda ya54@ae (car ya55@vars*) (car ya56@exp*)) (ya61@expand-case-lambda ya54@ae ya55@vars* ya56@exp*)))))) (set! yae2@ya0f@build-case-lambda ya0f@build-case-lambda) (set! ya3d@build-sequence (lambda (ya94@ae ya95@exps) (let ya9a@loop ((ya98@exps ya95@exps)) (if (null? (cdr ya98@exps)) (car ya98@exps) (if (equal? (car ya98@exps) (ya3f@build-void)) (ya9a@loop (cdr ya98@exps)) (cons 'begin ya98@exps)))))) (set! yae3@ya3d@build-sequence ya3d@build-sequence) (set! ya3f@build-void (lambda () '((primitive void)))) (set! yae4@ya3f@build-void ya3f@build-void) (set! ya41@build-letrec (lambda (ya9c@ae ya9d@vars ya9e@val-exps ya9f@body-exp) (if (null? ya9d@vars) ya9f@body-exp (list 'letrec (map list ya9d@vars ya9e@val-exps) ya9f@body-exp)))) (set! yae5@ya41@build-letrec ya41@build-letrec) (set! ya43@build-let (lambda (yaa4@ae yaa5@vars yaa6@val-exps yaa7@body-exp) (if (null? yaa5@vars) yaa7@body-exp (list 'let (map list yaa5@vars yaa6@val-exps) yaa7@body-exp)))) (set! yae6@ya43@build-let ya43@build-let) (set! ya45@build-named-let (lambda (yaac@ae yaad@name yaae@vars yaaf@val-exps yab0@body-exp) (list 'let yaad@name (map list yaae@vars yaaf@val-exps) yab0@body-exp))) (set! yae7@ya45@build-named-let ya45@build-named-let) (set! ya47@build-letrec* (lambda (yab6@ae yab7@vars yab8@val-exps yab9@body-exp) (if (null? yab7@vars) yab9@body-exp (ya43@build-let yab6@ae yab7@vars (map (lambda (yabe@x) (list 'quote '#f)) yab7@vars) (ya3d@build-sequence yab6@ae (append (map (lambda (yac0@lhs yac1@rhs) (list 'set! yac0@lhs yac1@rhs)) yab7@vars yab8@val-exps) (list yab9@body-exp))))))) (set! yae8@ya47@build-letrec* ya47@build-letrec*) (set! ya49@build-library-letrec* (lambda (yac4@ae yac5@name yac6@vars yac7@locs yac8@val-exps yac9@body-exp) (cons 'begin (append (map (lambda (yad0@var) (cons 'set! (cons yad0@var '((unspecified))))) yac6@vars) (append (apply append (map (lambda (yad2@var yad3@loc yad4@val-exp) (list (list 'set! yad2@var yad4@val-exp) (list 'set! yad3@loc yad2@var))) yac6@vars yac7@locs yac8@val-exps)) (list yac9@body-exp)))))) (set! yae9@ya49@build-library-letrec* ya49@build-library-letrec*) (set! ya4b@build-receive (lambda (yad8@ae yad9@vars yada@producer yadb@body*) (begin (display '"************** in ") (cons 'receive (cons yad9@vars (cons yada@producer yadb@body*)))))) (set! yaea@ya4b@build-receive ya4b@build-receive) (void))
(begin (set! yaf9@file-options-macro (unspecified)) (set! yafb@set-cons (unspecified)) (set! yafd@set-union (unspecified)) (set! yb02@top-mark* (unspecified)) (set! yb04@top-marked? (unspecified)) (set! yb06@gen-lexical (unspecified)) (set! yb08@gen-global (unspecified)) (set! yb0a@gen-label (unspecified)) (set! yb0c@gen-top-level-label (unspecified)) (set! yb0e@gen-define-label+loc (unspecified)) (set! yb10@gen-define-label (unspecified)) (set! yb1a@rib? (unspecified)) (set! yb1c@rib-sym* (unspecified)) (set! yb1e@set-rib-sym*! (unspecified)) (set! yb20@rib-mark** (unspecified)) (set! yb22@set-rib-mark**! (unspecified)) (set! yb24@rib-label* (unspecified)) (set! yb26@set-rib-label*! (unspecified)) (set! yb28@rib-sealed/freq (unspecified)) (set! yb2a@set-rib-sealed/freq! (unspecified)) (set! yb2c@rib-cache (unspecified)) (set! yb2e@set-rib-cache! (unspecified)) (set! yb30@dummy (unspecified)) (set! yb32@make-empty-rib (unspecified)) (set! yb34@extend-rib! (unspecified)) (set! yb36@extend-rib/nc! (unspecified)) (set! yb38@make-rib-map (unspecified)) (set! yb3a@seal-rib! (unspecified)) (set! yb3c@unseal-rib! (unspecified)) (set! yb3e@make-full-rib (unspecified)) (set! yb40@rp (unspecified)) (set! yb4a@stx? (unspecified)) (set! yb4c@stx-expr (unspecified)) (set! yb4e@set-stx-expr! (unspecified)) (set! yb50@stx-mark* (unspecified)) (set! yb52@set-stx-mark*! (unspecified)) (set! yb54@stx-subst* (unspecified)) (set! yb56@set-stx-subst*! (unspecified)) (set! yb58@stx-ae* (unspecified)) (set! yb5a@set-stx-ae*! (unspecified)) (set! yb5c@dummy (unspecified)) (set! yb5e@datum->stx (unspecified)) (set! yb60@gen-mark (unspecified)) (set! yb62@anti-mark (unspecified)) (set! yb64@anti-mark? (unspecified)) (set! yb66@mkstx (unspecified)) (set! yb68@add-mark (unspecified)) (set! yb6a@add-subst (unspecified)) (set! yb6c@syntax-kind? (unspecified)) (set! yb6e@syntax-vector->list (unspecified)) (set! yb70@syntax-pair? (unspecified)) (set! yb72@syntax-vector? (unspecified)) (set! yb74@syntax-null? (unspecified)) (set! yb76@syntax-list? (unspecified)) (set! yb78@syntax-car (unspecified)) (set! yb7a@syntax-cdr (unspecified)) (set! yb7c@syntax->list (unspecified)) (set! yb7e@id? (unspecified)) (set! yb80@id->sym (unspecified)) (set! yb82@bound-id=? (unspecified)) (set! yb84@free-id=? (unspecified)) (set! yb86@valid-bound-ids? (unspecified)) (set! yb88@distinct-bound-ids? (unspecified)) (set! yb8a@bound-id-member? (unspecified)) (set! yb8c@self-evaluating? (unspecified)) (set! yb8e@strip-annotations (unspecified)) (set! yb90@strip (unspecified)) (set! yb92@stx->datum (unspecified)) (set! yb94@id->label (unspecified)) (set! yb96@label->binding (unspecified)) (set! yb98@make-binding (unspecified)) (set! yb9a@binding-type (unspecified)) (set! yb9c@binding-value (unspecified)) (set! yb9e@raise-unbound-error (unspecified)) (set! yba0@syntax-type (unspecified)) (set! ybae@sanitize-binding (unspecified)) (set! ybb0@make-variable-transformer (unspecified)) (set! ybb2@variable-transformer? (unspecified)) (set! ybb4@variable-transformer-procedure (unspecified)) (set! ybb6@make-eval-transformer (unspecified)) (set! yd07@parse-define (unspecified)) (set! yd09@parse-define-syntax (unspecified)) (set! yd0b@scheme-stx-hashtable (unspecified)) (set! yd0d@scheme-stx (unspecified)) (set! yd0f@lexical-var (unspecified)) (set! yd11@lexical-mutable? (unspecified)) (set! yd13@set-lexical-mutable! (unspecified)) (set! yd15@add-lexical (unspecified)) (set! yd17@add-lexicals (unspecified)) (set! yd19@letrec-helper (unspecified)) (set! yd1b@let-transformer (unspecified)) (set! yd1d@letrec-transformer (unspecified)) (set! yd1f@letrec*-transformer (unspecified)) (set! yd21@fluid-let-syntax-transformer (unspecified)) (set! yd23@type-descriptor-transformer (unspecified)) (set! yd25@record-type-descriptor-transformer (unspecified)) (set! yd27@record-constructor-descriptor-transformer (unspecified)) (set! yd29@when-macro (unspecified)) (set! yd2b@unless-macro (unspecified)) (set! yd2d@if-transformer (unspecified)) (set! yd2f@and-transformer (unspecified)) (set! yd31@or-transformer (unspecified)) (set! yd33@case-macro (unspecified)) (set! yd35@quote-transformer (unspecified)) (set! yd37@case-lambda-transformer (unspecified)) (set! yd39@lambda-transformer (unspecified)) (set! yd3b@bless (unspecified)) (set! yd3d@with-syntax-macro (unspecified)) (set! yd3f@invalid-fmls-error (unspecified)) (set! yd41@let-macro (unspecified)) (set! yd43@let-values-macro (unspecified)) (set! yd45@let*-values-macro (unspecified)) (set! yd47@trace-lambda-macro (unspecified)) (set! yd49@trace-define-macro (unspecified)) (set! yd4b@trace-define-syntax-macro (unspecified)) (set! yd4d@trace-let/rec-syntax (unspecified)) (set! yd4f@trace-let-syntax-macro (unspecified)) (set! yd51@trace-letrec-syntax-macro (unspecified)) (set! yd53@guard-macro (unspecified)) (set! yd55@define-enumeration-macro (unspecified)) (set! yd57@time-macro (unspecified)) (set! yd59@delay-macro (unspecified)) (set! yd5b@assert-macro (unspecified)) (set! yd5d@endianness-macro (unspecified)) (set! yd5f@identifier-syntax-macro (unspecified)) (set! yd61@do-macro (unspecified)) (set! yd63@let*-macro (unspecified)) (set! yd65@or-macro (unspecified)) (set! yd67@and-macro (unspecified)) (set! yd69@cond-macro (unspecified)) (set! yd6b@do-include (unspecified)) (set! yd6d@include-macro (unspecified)) (set! yd6f@include-into-macro (unspecified)) (set! yd71@syntax-rules-macro (unspecified)) (set! yd73@quasiquote-macro (unspecified)) (set! yd75@quasisyntax-macro (unspecified)) (set! yd77@define-struct-macro (unspecified)) (set! yd79@define-record-type-macro (unspecified)) (set! yd7b@define-condition-type-macro (unspecified)) (set! yd7d@incorrect-usage-macro (unspecified)) (set! yd7f@parameterize-macro (unspecified)) (set! yd81@foreign-call-transformer (unspecified)) (set! yd83@convert-pattern (unspecified)) (set! yd85@syntax-dispatch (unspecified)) (set! yd87@ellipsis? (unspecified)) (set! yd89@underscore? (unspecified)) (set! yd8b@verify-literals (unspecified)) (set! yd8d@syntax-case-transformer (unspecified)) (set! yd8f@ellipsis-map (unspecified)) (set! yd91@syntax-transformer (unspecified)) (set! yd93@core-macro-transformer (unspecified)) (set! yd95@symbol-macro (unspecified)) (set! yd97@macro-transformer (unspecified)) (set! yd99@local-macro-transformer (unspecified)) (set! yd9b@do-macro-call (unspecified)) (set! yd9d@chi-macro (unspecified)) (set! yd9f@chi-local-macro (unspecified)) (set! yda1@chi-global-macro (unspecified)) (set! yda3@chi-expr* (unspecified)) (set! yda5@chi-application (unspecified)) (set! yda7@chi-expr (unspecified)) (set! yda9@chi-set! (unspecified)) (set! ydab@verify-formals (unspecified)) (set! ydad@chi-lambda-clause (unspecified)) (set! ydaf@chi-lambda-clause* (unspecified)) (set! ydb1@chi-defun (unspecified)) (set! ydb3@chi-rhs (unspecified)) (set! ydb5@expand-interaction-rhs*/init* (unspecified)) (set! ydb7@chi-rhs* (unspecified)) (set! ydb9@find-bound=? (unspecified)) (set! ydbb@find-dups (unspecified)) (set! ydbd@chi-internal (unspecified)) (set! ydbf@parse-module (unspecified)) (set! ydc9@module-interface? (unspecified)) (set! ydcb@module-interface-first-mark (unspecified)) (set! ydcd@set-module-interface-first-mark! (unspecified)) (set! ydcf@module-interface-exp-id-vec (unspecified)) (set! ydd1@set-module-interface-exp-id-vec! (unspecified)) (set! ydd3@module-interface-exp-lab-vec (unspecified)) (set! ydd5@set-module-interface-exp-lab-vec! (unspecified)) (set! ydd7@dummy (unspecified)) (set! ydd9@module-interface-exp-id* (unspecified)) (set! yddb@chi-internal-module (unspecified)) (set! yddd@chi-body* (unspecified)) (set! yddf@expand-transformer (unspecified)) (set! yde1@parse-exports (unspecified)) (set! yde3@parse-library-name (unspecified)) (set! yde5@parse-library (unspecified)) (set! yde7@parse-import-spec* (unspecified)) (set! yde9@make-top-rib (unspecified)) (set! ydeb@make-collector (unspecified)) (set! yded@inv-collector (unspecified)) (set! ydef@vis-collector (unspecified)) (set! ydf1@imp-collector (unspecified)) (set! ydf3@chi-library-internal (unspecified)) (set! ydf5@chi-interaction-expr (unspecified)) (set! ydf7@library-body-expander (unspecified)) (set! ydf9@core-library-expander (unspecified)) (set! ydfb@parse-top-level-program (unspecified)) (set! ydfd@top-level-expander (unspecified)) (set! ydff@rp (unspecified)) (set! ye09@env? (unspecified)) (set! ye0b@env-names (unspecified)) (set! ye0d@set-env-names! (unspecified)) (set! ye0f@env-labels (unspecified)) (set! ye11@set-env-labels! (unspecified)) (set! ye13@env-itc (unspecified)) (set! ye15@set-env-itc! (unspecified)) (set! ye17@dummy (unspecified)) (set! ye19@rp (unspecified)) (set! ye23@interaction-env? (unspecified)) (set! ye25@interaction-env-rib (unspecified)) (set! ye27@set-interaction-env-rib! (unspecified)) (set! ye29@interaction-env-r (unspecified)) (set! ye2b@set-interaction-env-r! (unspecified)) (set! ye2d@interaction-env-locs (unspecified)) (set! ye2f@set-interaction-env-locs! (unspecified)) (set! ye31@dummy (unspecified)) (set! ye33@interaction-environment-symbols (unspecified)) (set! ye35@environment-bindings (unspecified)) (set! ye37@parse-binding (unspecified)) (set! ye39@environment? (unspecified)) (set! ye3b@environment-symbols (unspecified)) (set! ye3d@environment (unspecified)) (set! ye3f@null-environment (unspecified)) (set! ye41@scheme-report-environment (unspecified)) (set! ye43@expand (unspecified)) (set! ye45@eval (unspecified)) (set! ye47@library-expander (unspecified)) (set! ye49@boot-library-expand (unspecified)) (set! ye4b@rev-map-append (unspecified)) (set! ye4d@build-exports (unspecified)) (set! ye4f@make-export-subst (unspecified)) (set! ye51@make-export-env/macros (unspecified)) (set! ye53@generate-temporaries (unspecified)) (set! ye55@free-identifier=? (unspecified)) (set! ye57@bound-identifier=? (unspecified)) (set! ye59@make-source-condition (unspecified)) (set! ye5b@extract-position-condition (unspecified)) (set! ye5d@expression-position (unspecified)) (set! ye5f@assertion-error (unspecified)) (set! ye61@syntax-error (unspecified)) (set! ye63@syntax-violation* (unspecified)) (set! ye65@syntax-violation (unspecified)) (set! ye67@identifier? (unspecified)) (set! ye69@datum->syntax (unspecified)) (set! ye6b@syntax->datum (unspecified)) (set! ye6d@ungensym-all (unspecified)) (set! ye6f@compile-r6rs-top-level (unspecified)) (set! ye71@pre-compile-r6rs-top-level (unspecified)) (set! ye73@interaction-environment (unspecified)) (set! ye75@top-level-context (unspecified)) (set! yaf9@file-options-macro (lambda (ye76@x) (let ((ye79@valid-option? '#f)) (begin (set! ye79@valid-option? (lambda (ye82@x) (and (yb7e@id? ye82@x) (memq (yb80@id->sym ye82@x) '(no-fail no-create no-truncate))))) (let ((ye7a@t ye76@x)) (let ((ye7c@ls/false (yd85@syntax-dispatch ye7a@t '(_ . each-any)))) (if (and ye7c@ls/false (apply (lambda (ye7e@opt*) (for-all ye79@valid-option? ye7e@opt*)) ye7c@ls/false)) (apply (lambda (ye80@opt*) (yd3b@bless (list 'make-file-options (list 'quote ye80@opt*)))) ye7c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" ye7a@t)))))))) (set! y27cc@yaf9@file-options-macro yaf9@file-options-macro) (set! yafb@set-cons (lambda (ye84@x ye85@ls) (if (memq ye84@x ye85@ls) ye85@ls (cons ye84@x ye85@ls)))) (set! y27cd@yafb@set-cons yafb@set-cons) (set! yafd@set-union (lambda (ye88@ls1 ye89@ls2) (if (null? ye88@ls1) ye89@ls2 (if (memq (car ye88@ls1) ye89@ls2) (yafd@set-union (cdr ye88@ls1) ye89@ls2) (cons (car ye88@ls1) (yafd@set-union (cdr ye88@ls1) ye89@ls2)))))) (set! y27ce@yafd@set-union yafd@set-union) (set! yb02@top-mark* '(top)) (set! y27cf@yb02@top-mark* yb02@top-mark*) (set! yb04@top-marked? (lambda (ye8c@m*) (memq 'top ye8c@m*))) (set! y27d0@yb04@top-marked? yb04@top-marked?) (set! yb06@gen-lexical (lambda (ye8e@sym) (if (symbol? ye8e@sym) (gensym ye8e@sym) (if (yb4a@stx? ye8e@sym) (yb06@gen-lexical (yb80@id->sym ye8e@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" ye8e@sym))))) (set! y27d1@yb06@gen-lexical yb06@gen-lexical) (set! yb08@gen-global (lambda (ye90@x) (yb06@gen-lexical ye90@x))) (set! y27d2@yb08@gen-global yb08@gen-global) (set! yb0a@gen-label (lambda (ye92@_) (gensym))) (set! y27d3@yb0a@gen-label yb0a@gen-label) (set! yb0c@gen-top-level-label (lambda (ye94@id ye95@rib) (let ((ye99@find '#f)) (begin (set! ye99@find (lambda (yea4@sym yea5@mark* yea6@sym* yea7@mark** yea8@label*) (and (pair? yea6@sym*) (if (and (eq? yea4@sym (car yea6@sym*)) (same-marks? yea5@mark* (car yea7@mark**))) (car yea8@label*) (ye99@find yea4@sym yea5@mark* (cdr yea6@sym*) (cdr yea7@mark**) (cdr yea8@label*)))))) (let ((ye9a@sym (yb80@id->sym ye94@id)) (ye9b@mark* (yb50@stx-mark* ye94@id))) (let ((ye9e@sym* (yb1c@rib-sym* ye95@rib))) (let ((yea0@t (and (memq ye9a@sym (yb1c@rib-sym* ye95@rib)) (ye99@find ye9a@sym ye9b@mark* ye9e@sym* (yb20@rib-mark** ye95@rib) (yb24@rib-label* ye95@rib))))) (if yea0@t ((lambda (yea2@label) (if (y993@y7e0@imported-label->binding yea2@label) (gensym) yea2@label)) yea0@t) (gensym))))))))) (set! y27d4@yb0c@gen-top-level-label yb0c@gen-top-level-label) (set! yb0e@gen-define-label+loc (lambda (yeae@id yeaf@rib) (let ((yeb2@t (ye75@top-level-context))) (if yeb2@t ((lambda (yeb4@env) (let ((yeb6@label (yb0c@gen-top-level-label yeae@id yeaf@rib)) (yeb7@locs (ye2d@interaction-env-locs yeb4@env))) (values yeb6@label (let ((yeba@t (assq yeb6@label yeb7@locs))) (if yeba@t (cdr yeba@t) (let ((yebc@loc (yb06@gen-lexical yeae@id))) (begin (ye2f@set-interaction-env-locs! yeb4@env (cons (cons yeb6@label yebc@loc) yeb7@locs)) yebc@loc))))))) yeb2@t) (values (gensym) (yb06@gen-lexical yeae@id)))))) (set! y27d5@yb0e@gen-define-label+loc yb0e@gen-define-label+loc) (set! yb10@gen-define-label (lambda (yebe@id yebf@rib) (if (ye75@top-level-context) (yb0c@gen-top-level-label yebe@id yebf@rib) (gensym)))) (set! y27d6@yb10@gen-define-label yb10@gen-define-label) (set! yb1a@rib? (lambda (yec2@x) (and (simple-struct? yec2@x) (eq? (simple-struct-name yec2@x) 'rib)))) (set! y27d7@yb1a@rib? yb1a@rib?) (set! yb1c@rib-sym* (lambda (yec4@x) (simple-struct-ref yec4@x '0))) (set! y27d8@yb1c@rib-sym* yb1c@rib-sym*) (set! yb1e@set-rib-sym*! (lambda (yec6@x yec7@val) (simple-struct-set! yec6@x '0 yec7@val))) (set! y27d9@yb1e@set-rib-sym*! yb1e@set-rib-sym*!) (set! yb20@rib-mark** (lambda (yeca@x) (simple-struct-ref yeca@x '1))) (set! y27da@yb20@rib-mark** yb20@rib-mark**) (set! yb22@set-rib-mark**! (lambda (yecc@x yecd@val) (simple-struct-set! yecc@x '1 yecd@val))) (set! y27db@yb22@set-rib-mark**! yb22@set-rib-mark**!) (set! yb24@rib-label* (lambda (yed0@x) (simple-struct-ref yed0@x '2))) (set! y27dc@yb24@rib-label* yb24@rib-label*) (set! yb26@set-rib-label*! (lambda (yed2@x yed3@val) (simple-struct-set! yed2@x '2 yed3@val))) (set! y27dd@yb26@set-rib-label*! yb26@set-rib-label*!) (set! yb28@rib-sealed/freq (lambda (yed6@x) (simple-struct-ref yed6@x '3))) (set! y27de@yb28@rib-sealed/freq yb28@rib-sealed/freq) (set! yb2a@set-rib-sealed/freq! (lambda (yed8@x yed9@val) (simple-struct-set! yed8@x '3 yed9@val))) (set! y27df@yb2a@set-rib-sealed/freq! yb2a@set-rib-sealed/freq!) (set! yb2c@rib-cache (lambda (yedc@x) (simple-struct-ref yedc@x '4))) (set! y27e0@yb2c@rib-cache yb2c@rib-cache) (set! yb2e@set-rib-cache! (lambda (yede@x yedf@val) (simple-struct-set! yede@x '4 yedf@val))) (set! y27e1@yb2e@set-rib-cache! yb2e@set-rib-cache!) (set! yb30@dummy '3) (set! y27e2@yb30@dummy yb30@dummy) (set! yb32@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! y27e3@yb32@make-empty-rib yb32@make-empty-rib) (set! yb34@extend-rib! (lambda (yee2@rib yee3@id yee4@label) (let ((yee9@find '#f)) (begin (set! yee9@find (lambda (yef6@sym yef7@mark* yef8@sym* yef9@mark** yefa@label*) (and (pair? yef8@sym*) (if (and (eq? yef6@sym (car yef8@sym*)) (same-marks? yef7@mark* (car yef9@mark**))) yefa@label* (yee9@find yef6@sym yef7@mark* (cdr yef8@sym*) (cdr yef9@mark**) (cdr yefa@label*)))))) (begin (if (yb28@rib-sealed/freq yee2@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" yee2@rib) (void)) (let ((yeea@sym (yb80@id->sym yee3@id)) (yeeb@mark* (yb50@stx-mark* yee3@id))) (let ((yeee@sym* (yb1c@rib-sym* yee2@rib))) (let ((yef0@t (and (memq yeea@sym (yb1c@rib-sym* yee2@rib)) (yee9@find yeea@sym yeeb@mark* yeee@sym* (yb20@rib-mark** yee2@rib) (yb24@rib-label* yee2@rib))))) (if yef0@t ((lambda (yef2@p) (if (not (eq? yee4@label (car yef2@p))) (if (ye75@top-level-context) (set-car! yef2@p yee4@label) (ye65@syntax-violation '#f '"multiple definitions of identifier" yee3@id)) (void))) yef0@t) (begin (if (yb2c@rib-cache yee2@rib) (hashtable-update! (yb2c@rib-cache yee2@rib) yeea@sym (lambda (yef4@e) (cons (cons yeeb@mark* yee4@label) yef4@e)) '()) (void)) (yb1e@set-rib-sym*! yee2@rib (cons yeea@sym yeee@sym*)) (yb22@set-rib-mark**! yee2@rib (cons yeeb@mark* (yb20@rib-mark** yee2@rib))) (yb26@set-rib-label*! yee2@rib (cons yee4@label (yb24@rib-label* yee2@rib))))))))))))) (set! y27e4@yb34@extend-rib! yb34@extend-rib!) (set! yb36@extend-rib/nc! (lambda (yf00@rib yf01@id yf02@label) (let ((yf06@sym (yb80@id->sym yf01@id)) (yf07@mark* (yb50@stx-mark* yf01@id))) (let ((yf0a@sym* (yb1c@rib-sym* yf00@rib))) (begin (if (yb2c@rib-cache yf00@rib) (hashtable-update! (yb2c@rib-cache yf00@rib) yf06@sym (lambda (yf0c@e) (cons (cons yf07@mark* yf02@label) yf0c@e)) '()) (void)) (yb1e@set-rib-sym*! yf00@rib (cons yf06@sym yf0a@sym*)) (yb22@set-rib-mark**! yf00@rib (cons yf07@mark* (yb20@rib-mark** yf00@rib))) (yb26@set-rib-label*! yf00@rib (cons yf02@label (yb24@rib-label* yf00@rib)))))))) (set! y27e5@yb36@extend-rib/nc! yb36@extend-rib/nc!) (set! yb38@make-rib-map (lambda (yf0e@sym*) (let ((yf10@ht (make-eq-hashtable))) (let yf16@f ((yf12@i '0) (yf13@sym* yf0e@sym*)) (if (null? yf13@sym*) yf10@ht (begin (hashtable-update! yf10@ht (car yf13@sym*) (lambda (yf18@x) (cons yf12@i yf18@x)) '()) (yf16@f (+ yf12@i '1) (cdr yf13@sym*)))))))) (set! y27e6@yb38@make-rib-map yb38@make-rib-map) (set! yb3a@seal-rib! (lambda (yf1a@rib) (let ((yf1c@sym* (yb1c@rib-sym* yf1a@rib))) (if (not (null? yf1c@sym*)) (begin (yb1e@set-rib-sym*! yf1a@rib (list->vector yf1c@sym*)) (yb22@set-rib-mark**! yf1a@rib (list->vector (yb20@rib-mark** yf1a@rib))) (yb26@set-rib-label*! yf1a@rib (list->vector (yb24@rib-label* yf1a@rib))) (yb2a@set-rib-sealed/freq! yf1a@rib (yb38@make-rib-map yf1c@sym*))) (void))))) (set! y27e7@yb3a@seal-rib! yb3a@seal-rib!) (set! yb3c@unseal-rib! (lambda (yf1e@rib) (if (yb28@rib-sealed/freq yf1e@rib) (begin (yb2a@set-rib-sealed/freq! yf1e@rib '#f) (yb1e@set-rib-sym*! yf1e@rib (vector->list (yb1c@rib-sym* yf1e@rib))) (yb22@set-rib-mark**! yf1e@rib (vector->list (yb20@rib-mark** yf1e@rib))) (yb26@set-rib-label*! yf1e@rib (vector->list (yb24@rib-label* yf1e@rib)))) (void)))) (set! y27e8@yb3c@unseal-rib! yb3c@unseal-rib!) (set! yb3e@make-full-rib (lambda (yf20@id* yf21@label*) (let ((yf24@r (make-simple-struct 'rib '6 (list (map yb80@id->sym yf20@id*) (map yb50@stx-mark* yf20@id*) yf21@label* '#f '#f)))) (begin (yb3a@seal-rib! yf24@r) yf24@r)))) (set! y27e9@yb3e@make-full-rib yb3e@make-full-rib) (set! yb40@rp (y6c5@y5a1@make-record-printer 'stx (lambda (yf26@x yf27@p yf28@wr) (begin (display '"#<syntax " yf27@p) (write (yb92@stx->datum yf26@x) yf27@p) (let ((yf2c@expr (yb4c@stx-expr yf26@x))) (if (y6bd@y591@annotation? yf2c@expr) (let ((yf2e@src (y6be@y593@annotation-source yf2c@expr))) (if (pair? yf2e@src) (begin (display '" [" yf27@p) (display (cdr yf2e@src) yf27@p) (display '" of " yf27@p) (display (car yf2e@src) yf27@p) (display '"]" yf27@p)) (void))) (void))) (display '">" yf27@p))))) (set! y27ea@yb40@rp yb40@rp) (set! yb4a@stx? (lambda (yf30@x) (and (simple-struct? yf30@x) (eq? (simple-struct-name yf30@x) 'stx)))) (set! y27eb@yb4a@stx? yb4a@stx?) (set! yb4c@stx-expr (lambda (yf32@x) (simple-struct-ref yf32@x '0))) (set! y27ec@yb4c@stx-expr yb4c@stx-expr) (set! yb4e@set-stx-expr! (lambda (yf34@x yf35@val) (simple-struct-set! yf34@x '0 yf35@val))) (set! y27ed@yb4e@set-stx-expr! yb4e@set-stx-expr!) (set! yb50@stx-mark* (lambda (yf38@x) (simple-struct-ref yf38@x '1))) (set! y27ee@yb50@stx-mark* yb50@stx-mark*) (set! yb52@set-stx-mark*! (lambda (yf3a@x yf3b@val) (simple-struct-set! yf3a@x '1 yf3b@val))) (set! y27ef@yb52@set-stx-mark*! yb52@set-stx-mark*!) (set! yb54@stx-subst* (lambda (yf3e@x) (simple-struct-ref yf3e@x '2))) (set! y27f0@yb54@stx-subst* yb54@stx-subst*) (set! yb56@set-stx-subst*! (lambda (yf40@x yf41@val) (simple-struct-set! yf40@x '2 yf41@val))) (set! y27f1@yb56@set-stx-subst*! yb56@set-stx-subst*!) (set! yb58@stx-ae* (lambda (yf44@x) (simple-struct-ref yf44@x '3))) (set! y27f2@yb58@stx-ae* yb58@stx-ae*) (set! yb5a@set-stx-ae*! (lambda (yf46@x yf47@val) (simple-struct-set! yf46@x '3 yf47@val))) (set! y27f3@yb5a@set-stx-ae*! yb5a@set-stx-ae*!) (set! yb5c@dummy '3) (set! y27f4@yb5c@dummy yb5c@dummy) (set! yb5e@datum->stx (lambda (yf4a@id yf4b@datum) (make-simple-struct 'stx '5 (list yf4b@datum (yb50@stx-mark* yf4a@id) (yb54@stx-subst* yf4a@id) (yb58@stx-ae* yf4a@id))))) (set! y27f5@yb5e@datum->stx yb5e@datum->stx) (set! yb60@gen-mark (lambda () (string '#\m))) (set! y27f6@yb60@gen-mark yb60@gen-mark) (set! yb62@anti-mark '#f) (set! y27f7@yb62@anti-mark yb62@anti-mark) (set! yb64@anti-mark? not) (set! y27f8@yb64@anti-mark? yb64@anti-mark?) (set! yb66@mkstx (lambda (yf4e@e yf4f@m* yf50@s* yf51@ae*) (if (and (yb4a@stx? yf4e@e) (not (yb04@top-marked? yf4f@m*))) (call-with-values (lambda () (join-wraps yf4f@m* yf50@s* yf51@ae* yf4e@e)) (lambda (yf5c@yf57 yf5d@yf59 yf5e@yf5b) (let ((yf62@ae* yf5e@yf5b) (yf63@s* yf5d@yf59) (yf64@m* yf5c@yf57)) (make-simple-struct 'stx '5 (list (yb4c@stx-expr yf4e@e) yf64@m* yf63@s* yf62@ae*))))) (make-simple-struct 'stx '5 (list yf4e@e yf4f@m* yf50@s* yf51@ae*))))) (set! y27f9@yb66@mkstx yb66@mkstx) (set! yb68@add-mark (lambda (yf68@m yf69@e yf6a@ae) (yb66@mkstx yf69@e (list yf68@m) '(shift) (list yf6a@ae)))) (set! y27fa@yb68@add-mark yb68@add-mark) (set! yb6a@add-subst (lambda (yf6e@subst yf6f@e) (yb66@mkstx yf6f@e '() (list yf6e@subst) '()))) (set! y27fb@yb6a@add-subst yb6a@add-subst) (set! yb6c@syntax-kind? (lambda (yf72@x yf73@p?) (if (yb4a@stx? yf72@x) (yb6c@syntax-kind? (yb4c@stx-expr yf72@x) yf73@p?) (if (y6bd@y591@annotation? yf72@x) (yb6c@syntax-kind? (y6bf@y595@annotation-expression yf72@x) yf73@p?) (yf73@p? yf72@x))))) (set! y27fc@yb6c@syntax-kind? yb6c@syntax-kind?) (set! yb6e@syntax-vector->list (lambda (yf76@x) (if (yb4a@stx? yf76@x) (let ((yf78@ls (yb6e@syntax-vector->list (yb4c@stx-expr yf76@x))) (yf79@m* (yb50@stx-mark* yf76@x)) (yf7a@s* (yb54@stx-subst* yf76@x)) (yf7b@ae* (yb58@stx-ae* yf76@x))) (map (lambda (yf80@x) (yb66@mkstx yf80@x yf79@m* yf7a@s* yf7b@ae*)) yf78@ls)) (if (y6bd@y591@annotation? yf76@x) (yb6e@syntax-vector->list (y6bf@y595@annotation-expression yf76@x)) (if (vector? yf76@x) (vector->list yf76@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" yf76@x)))))) (set! y27fd@yb6e@syntax-vector->list yb6e@syntax-vector->list) (set! yb70@syntax-pair? (lambda (yf82@x) (yb6c@syntax-kind? yf82@x pair?))) (set! y27fe@yb70@syntax-pair? yb70@syntax-pair?) (set! yb72@syntax-vector? (lambda (yf84@x) (yb6c@syntax-kind? yf84@x vector?))) (set! y27ff@yb72@syntax-vector? yb72@syntax-vector?) (set! yb74@syntax-null? (lambda (yf86@x) (yb6c@syntax-kind? yf86@x null?))) (set! y2800@yb74@syntax-null? yb74@syntax-null?) (set! yb76@syntax-list? (lambda (yf88@x) (or (yb74@syntax-null? yf88@x) (and (yb70@syntax-pair? yf88@x) (yb76@syntax-list? (yb7a@syntax-cdr yf88@x)))))) (set! y2801@yb76@syntax-list? yb76@syntax-list?) (set! yb78@syntax-car (lambda (yf8a@x) (if (yb4a@stx? yf8a@x) (yb66@mkstx (yb78@syntax-car (yb4c@stx-expr yf8a@x)) (yb50@stx-mark* yf8a@x) (yb54@stx-subst* yf8a@x) (yb58@stx-ae* yf8a@x)) (if (y6bd@y591@annotation? yf8a@x) (yb78@syntax-car (y6bf@y595@annotation-expression yf8a@x)) (if (pair? yf8a@x) (car yf8a@x) (assertion-violation 'syntax-car '"BUG: not a pair" yf8a@x)))))) (set! y2802@yb78@syntax-car yb78@syntax-car) (set! yb7a@syntax-cdr (lambda (yf8c@x) (if (yb4a@stx? yf8c@x) (yb66@mkstx (yb7a@syntax-cdr (yb4c@stx-expr yf8c@x)) (yb50@stx-mark* yf8c@x) (yb54@stx-subst* yf8c@x) (yb58@stx-ae* yf8c@x)) (if (y6bd@y591@annotation? yf8c@x) (yb7a@syntax-cdr (y6bf@y595@annotation-expression yf8c@x)) (if (pair? yf8c@x) (cdr yf8c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" yf8c@x)))))) (set! y2803@yb7a@syntax-cdr yb7a@syntax-cdr) (set! yb7c@syntax->list (lambda (yf8e@x) (if (yb70@syntax-pair? yf8e@x) (cons (yb78@syntax-car yf8e@x) (yb7c@syntax->list (yb7a@syntax-cdr yf8e@x))) (if (yb74@syntax-null? yf8e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" yf8e@x))))) (set! y2804@yb7c@syntax->list yb7c@syntax->list) (set! yb7e@id? (lambda (yf90@x) (and (yb4a@stx? yf90@x) (symbol? (yb4c@stx-expr yf90@x))))) (set! y2805@yb7e@id? yb7e@id?) (set! yb80@id->sym (lambda (yf92@x) (yb4c@stx-expr yf92@x))) (set! y2806@yb80@id->sym yb80@id->sym) (set! yb82@bound-id=? (lambda (yf94@x yf95@y) (and (eq? (yb80@id->sym yf94@x) (yb80@id->sym yf95@y)) (same-marks? (yb50@stx-mark* yf94@x) (yb50@stx-mark* yf95@y))))) (set! y2807@yb82@bound-id=? yb82@bound-id=?) (set! yb84@free-id=? (lambda (yf98@i yf99@j) (let ((yf9c@t0 (id->real-label yf98@i)) (yf9d@t1 (id->real-label yf99@j))) (if (or yf9c@t0 yf9d@t1) (eq? yf9c@t0 yf9d@t1) (eq? (yb80@id->sym yf98@i) (yb80@id->sym yf99@j)))))) (set! y2808@yb84@free-id=? yb84@free-id=?) (set! yb86@valid-bound-ids? (lambda (yfa0@id*) (and (for-all yb7e@id? yfa0@id*) (yb88@distinct-bound-ids? yfa0@id*)))) (set! y2809@yb86@valid-bound-ids? yb86@valid-bound-ids?) (set! yb88@distinct-bound-ids? (lambda (yfa2@id*) (or (null? yfa2@id*) (and (not (yb8a@bound-id-member? (car yfa2@id*) (cdr yfa2@id*))) (yb88@distinct-bound-ids? (cdr yfa2@id*)))))) (set! y280a@yb88@distinct-bound-ids? yb88@distinct-bound-ids?) (set! yb8a@bound-id-member? (lambda (yfa4@id yfa5@id*) (and (pair? yfa5@id*) (or (yb82@bound-id=? yfa4@id (car yfa5@id*)) (yb8a@bound-id-member? yfa4@id (cdr yfa5@id*)))))) (set! y280b@yb8a@bound-id-member? yb8a@bound-id-member?) (set! yb8c@self-evaluating? (lambda (yfa8@x) (or (number? yfa8@x) (string? yfa8@x) (char? yfa8@x) (boolean? yfa8@x) (regexp? yfa8@x) (bytevector? yfa8@x)))) (set! y280c@yb8c@self-evaluating? yb8c@self-evaluating?) (set! yb8e@strip-annotations (lambda (yfaa@x) (if (pair? yfaa@x) (cons (yb8e@strip-annotations (car yfaa@x)) (yb8e@strip-annotations (cdr yfaa@x))) (if (vector? yfaa@x) (vector-map yb8e@strip-annotations yfaa@x) (if (y6bd@y591@annotation? yfaa@x) (y6bc@y58f@annotation-stripped yfaa@x) yfaa@x))))) (set! y280d@yb8e@strip-annotations yb8e@strip-annotations) (set! yb90@strip (lambda (yfac@x yfad@m*) (if (yb04@top-marked? yfad@m*) (if (or (y6bd@y591@annotation? yfac@x) (and (pair? yfac@x) (y6bd@y591@annotation? (car yfac@x))) (and (vector? yfac@x) (> (vector-length yfac@x) '0) (y6bd@y591@annotation? (vector-ref yfac@x '0)))) (yb8e@strip-annotations yfac@x) yfac@x) (let yfb2@f ((yfb0@x yfac@x)) (if (yb4a@stx? yfb0@x) (yb90@strip (yb4c@stx-expr yfb0@x) (yb50@stx-mark* yfb0@x)) (if (y6bd@y591@annotation? yfb0@x) (y6bc@y58f@annotation-stripped yfb0@x) (if (pair? yfb0@x) (let ((yfb4@a (yfb2@f (car yfb0@x))) (yfb5@d (yfb2@f (cdr yfb0@x)))) (if (and (eq? yfb4@a (car yfb0@x)) (eq? yfb5@d (cdr yfb0@x))) yfb0@x (cons yfb4@a yfb5@d))) (if (vector? yfb0@x) (let ((yfb8@old (vector->list yfb0@x))) (let ((yfba@new (map yfb2@f yfb8@old))) (if (for-all eq? yfb8@old yfba@new) yfb0@x (list->vector yfba@new)))) yfb0@x)))))))) (set! y280e@yb90@strip yb90@strip) (set! yb92@stx->datum (lambda (yfbc@x) (yb90@strip yfbc@x '()))) (set! y280f@yb92@stx->datum yb92@stx->datum) (set! yb94@id->label (lambda (yfbe@id) (or (id->real-label yfbe@id) (let ((yfc0@t (ye75@top-level-context))) (if yfc0@t ((lambda (yfc2@env) (let ((yfc4@rib (ye25@interaction-env-rib yfc2@env))) (call-with-values (lambda () (yb0e@gen-define-label+loc yfbe@id yfc4@rib)) (lambda (yfca@yfc7 yfcb@yfc9) (let ((yfce@loc_ yfcb@yfc9) (yfcf@lab yfca@yfc7)) (begin (yb34@extend-rib! yfc4@rib yfbe@id yfcf@lab) yfcf@lab)))))) yfc0@t) '#f))))) (set! y2810@yb94@id->label yb94@id->label) (set! yb96@label->binding (lambda (yfd2@x yfd3@r) (let ((yfd6@t (y993@y7e0@imported-label->binding yfd2@x))) (if yfd6@t ((lambda (yfd8@b) (if (and (pair? yfd8@b) (eq? (car yfd8@b) '$core-rtd)) (cons '$rtd (map yd3b@bless (cdr yfd8@b))) (if (and (pair? yfd8@b) (eq? (car yfd8@b) 'global-rtd)) (let ((yfda@lib (cadr yfd8@b)) (yfdb@loc (cddr yfd8@b))) (cons '$rtd (symbol-value yfdb@loc))) yfd8@b))) yfd6@t) (let ((yfde@t (assq yfd2@x yfd3@r))) (if yfde@t (cdr yfde@t) (let ((yfe0@t (ye75@top-level-context))) (if yfe0@t ((lambda (yfe2@env) (let ((yfe4@t (assq yfd2@x (ye2d@interaction-env-locs yfe2@env)))) (if yfe4@t ((lambda (yfe6@p) (cons* 'lexical (cdr yfe6@p) '#f)) yfe4@t) '(displaced-lexical . #f)))) yfe0@t) '(displaced-lexical . #f))))))))) (set! y2811@yb96@label->binding yb96@label->binding) (set! yb98@make-binding cons) (set! y2812@yb98@make-binding yb98@make-binding) (set! yb9a@binding-type car) (set! y2813@yb9a@binding-type yb9a@binding-type) (set! yb9c@binding-value cdr) (set! y2814@yb9c@binding-value yb9c@binding-value) (set! yb9e@raise-unbound-error (lambda (yfe8@id) (ye63@syntax-violation* '#f '"unbound identifier" yfe8@id (y2c0a@y2a50@make-undefined-violation)))) (set! y2815@yb9e@raise-unbound-error yb9e@raise-unbound-error) (set! yba0@syntax-type (lambda (yfea@e yfeb@r) (if (yb7e@id? yfea@e) (let ((yfee@id yfea@e)) (let ((yff0@label (yb94@id->label yfee@id))) (let ((yff2@b (yb96@label->binding yff0@label yfeb@r))) (let ((yff4@type (yb9a@binding-type yff2@b))) (begin (if (not yff0@label) (yb9e@raise-unbound-error yfee@id) (void)) (let ((yff6@t yff4@type)) (if (memv yff6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values yff4@type (yb9c@binding-value yff2@b) yfee@id) (values 'other '#f '#f)))))))) (if (yb70@syntax-pair? yfea@e) (let ((yff8@id (yb78@syntax-car yfea@e))) (if (yb7e@id? yff8@id) (let ((yffa@label (yb94@id->label yff8@id))) (let ((yffc@b (yb96@label->binding yffa@label yfeb@r))) (let ((yffe@type (yb9a@binding-type yffc@b))) (begin (if (not yffa@label) (yb9e@raise-unbound-error yff8@id) (void)) (let ((y1000@t yffe@type)) (if (memv y1000@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values yffe@type (yb9c@binding-value yffc@b) yff8@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((y1002@d (yb92@stx->datum yfea@e))) (if (yb8c@self-evaluating? y1002@d) (values 'constant y1002@d '#f) (values 'other '#f '#f))))))) (set! y2816@yba0@syntax-type yba0@syntax-type) (set! ybae@sanitize-binding (lambda (y1004@x y1005@src) (if (procedure? y1004@x) (cons* 'local-macro y1004@x y1005@src) (if (and (pair? y1004@x) (eq? (car y1004@x) 'macro!) (procedure? (cdr y1004@x))) (cons* 'local-macro! (cdr y1004@x) y1005@src) (if (and (pair? y1004@x) (eq? (car y1004@x) '$rtd)) y1004@x (assertion-violation 'expand '"invalid transformer" y1004@x)))))) (set! y2817@ybae@sanitize-binding ybae@sanitize-binding) (set! ybb0@make-variable-transformer (lambda (y1008@x) (if (procedure? y1008@x) (cons 'macro! y1008@x) (assertion-violation 'make-variable-transformer '"not a procedure" y1008@x)))) (set! y2818@ybb0@make-variable-transformer ybb0@make-variable-transformer) (set! ybb2@variable-transformer? (lambda (y100a@x) (and (pair? y100a@x) (eq? (car y100a@x) 'macro!) (procedure? (cdr y100a@x))))) (set! y2819@ybb2@variable-transformer? ybb2@variable-transformer?) (set! ybb4@variable-transformer-procedure (lambda (y100c@x) (if (ybb2@variable-transformer? y100c@x) (cdr y100c@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" y100c@x)))) (set! y281a@ybb4@variable-transformer-procedure ybb4@variable-transformer-procedure) (set! ybb6@make-eval-transformer (lambda (y100e@x) (ybae@sanitize-binding (eval-core (y71e@y6d6@expanded->core y100e@x)) y100e@x))) (set! y281b@ybb6@make-eval-transformer ybb6@make-eval-transformer) (set! yd07@parse-define (lambda (y1010@x) (let ((y1012@t y1010@x)) (let ((y1014@ls/false (yd85@syntax-dispatch y1012@t '(_ (any . any) any . each-any)))) (if (and y1014@ls/false (apply (lambda (y1016@id y1017@fmls y1018@b y1019@b*) (yb7e@id? y1016@id)) y1014@ls/false)) (apply (lambda (y101e@id y101f@fmls y1020@b y1021@b*) (begin (ydab@verify-formals y101f@fmls y1010@x) (values y101e@id (cons 'defun (cons y101f@fmls (cons y1020@b y1021@b*)))))) y1014@ls/false) (let ((y1026@t y1012@t)) (let ((y1028@ls/false (yd85@syntax-dispatch y1026@t '(_ any any)))) (if (and y1028@ls/false (apply (lambda (y102a@id y102b@val) (yb7e@id? y102a@id)) y1028@ls/false)) (apply (lambda (y102e@id y102f@val) (values y102e@id (cons 'expr y102f@val))) y1028@ls/false) (let ((y1032@t y1026@t)) (let ((y1034@ls/false (yd85@syntax-dispatch y1032@t '(_ any)))) (if (and y1034@ls/false (apply (lambda (y1036@id) (yb7e@id? y1036@id)) y1034@ls/false)) (apply (lambda (y1038@id) (values y1038@id (cons 'expr (yd3b@bless '(void))))) y1034@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1032@t)))))))))))) (set! y281c@yd07@parse-define yd07@parse-define) (set! yd09@parse-define-syntax (lambda (y103a@x) (let ((y103c@t y103a@x)) (let ((y103e@ls/false (yd85@syntax-dispatch y103c@t '(_ any any)))) (if (and y103e@ls/false (apply (lambda (y1040@id y1041@val) (yb7e@id? y1040@id)) y103e@ls/false)) (apply (lambda (y1044@id y1045@val) (values y1044@id y1045@val)) y103e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y103c@t)))))) (set! y281d@yd09@parse-define-syntax yd09@parse-define-syntax) (set! yd0b@scheme-stx-hashtable (make-eq-hashtable)) (set! y281e@yd0b@scheme-stx-hashtable yd0b@scheme-stx-hashtable) (set! yd0d@scheme-stx (lambda (y1048@sym) (or (hashtable-ref yd0b@scheme-stx-hashtable y1048@sym '#f) (let ((y104a@subst (y96f@y798@library-subst (y98d@y7d4@find-library-by-name '(psyntax system $all))))) (let ((y104c@stx (make-simple-struct 'stx '5 (list y1048@sym yb02@top-mark* '() '())))) (let ((y104e@stx (let ((y1050@t (assq y1048@sym y104a@subst))) (if y1050@t ((lambda (y1052@x) (let ((y1054@name (car y1052@x)) (y1055@label (cdr y1052@x))) (yb6a@add-subst (make-simple-struct 'rib '6 (list (list y1054@name) (list yb02@top-mark*) (list y1055@label) '#f '#f)) y104c@stx))) y1050@t) y104c@stx)))) (begin (hashtable-set! yd0b@scheme-stx-hashtable y1048@sym y104e@stx) y104e@stx))))))) (set! y281f@yd0d@scheme-stx yd0d@scheme-stx) (set! yd0f@lexical-var car) (set! y2820@yd0f@lexical-var yd0f@lexical-var) (set! yd11@lexical-mutable? cdr) (set! y2821@yd11@lexical-mutable? yd11@lexical-mutable?) (set! yd13@set-lexical-mutable! set-cdr!) (set! y2822@yd13@set-lexical-mutable! yd13@set-lexical-mutable!) (set! yd15@add-lexical (lambda (y1058@lab y1059@lex y105a@r) (cons (cons* y1058@lab 'lexical y1059@lex '#f) y105a@r))) (set! y2823@yd15@add-lexical yd15@add-lexical) (set! yd17@add-lexicals (lambda (y105e@lab* y105f@lex* y1060@r) (if (null? y105e@lab*) y1060@r (yd17@add-lexicals (cdr y105e@lab*) (cdr y105f@lex*) (yd15@add-lexical (car y105e@lab*) (car y105f@lex*) y1060@r))))) (set! y2824@yd17@add-lexicals yd17@add-lexicals) (set! yd19@letrec-helper (lambda (y1064@e y1065@r y1066@mr y1067@build) (let ((y106c@t y1064@e)) (let ((y106e@ls/false (yd85@syntax-dispatch y106c@t '(_ #(each (any any)) any . each-any)))) (if y106e@ls/false (apply (lambda (y1070@lhs* y1071@rhs* y1072@b y1073@b*) (if (not (yb86@valid-bound-ids? y1070@lhs*)) (yd3f@invalid-fmls-error y1064@e y1070@lhs*) (let ((y1078@lex* (map yb06@gen-lexical y1070@lhs*)) (y1079@lab* (map yb0a@gen-label y1070@lhs*))) (let ((y107c@rib (yb3e@make-full-rib y1070@lhs* y1079@lab*)) (y107d@r (yd17@add-lexicals y1079@lab* y1078@lex* y1065@r))) (let ((y1080@body (ydbd@chi-internal (yb6a@add-subst y107c@rib (cons y1072@b y1073@b*)) y107d@r y1066@mr)) (y1081@rhs* (yda3@chi-expr* (map (lambda (y1084@x) (yb6a@add-subst y107c@rib y1084@x)) y1071@rhs*) y107d@r y1066@mr))) (y1067@build '#f y1078@lex* y1081@rhs* y1080@body)))))) y106e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y106c@t)))))) (set! y2825@yd19@letrec-helper yd19@letrec-helper) (set! yd1b@let-transformer (lambda (y1086@e y1087@r y1088@mr) (let ((y108c@t y1086@e)) (let ((y108e@ls/false (yd85@syntax-dispatch y108c@t '(_ #(each (any any)) any . each-any)))) (if y108e@ls/false (apply (lambda (y1090@lhs* y1091@rhs* y1092@b y1093@b*) (if (not (yb86@valid-bound-ids? y1090@lhs*)) (yd3f@invalid-fmls-error y1086@e y1090@lhs*) (let ((y1098@lex* (map yb06@gen-lexical y1090@lhs*)) (y1099@lab* (map yb0a@gen-label y1090@lhs*)) (y109a@rhs* (yda3@chi-expr* y1091@rhs* y1087@r y1088@mr))) (let ((y109e@rib (yb3e@make-full-rib y1090@lhs* y1099@lab*)) (y109f@r (yd17@add-lexicals y1099@lab* y1098@lex* y1087@r))) (let ((y10a2@body (ydbd@chi-internal (yb6a@add-subst y109e@rib (cons y1092@b y1093@b*)) y109f@r y1088@mr))) (yae6@ya43@build-let '#f y1098@lex* y109a@rhs* y10a2@body)))))) y108e@ls/false) (let ((y10a4@t y108c@t)) (let ((y10a6@ls/false (yd85@syntax-dispatch y10a4@t '(_ any #(each (any any)) any . each-any)))) (if y10a6@ls/false (apply (lambda (y10a8@loop y10a9@lhs* y10aa@rhs* y10ab@b y10ac@b*) (if (not (yb86@valid-bound-ids? y10a9@lhs*)) (yd3f@invalid-fmls-error y1086@e y10a9@lhs*) (let ((y10b2@lex* (map yb06@gen-lexical y10a9@lhs*)) (y10b3@lab* (map yb0a@gen-label y10a9@lhs*)) (y10b4@rhs* (yda3@chi-expr* y10aa@rhs* y1087@r y1088@mr)) (y10b5@loop-lex (yb06@gen-lexical y10a8@loop)) (y10b6@loop-lab (yb0a@gen-label y10a8@loop))) (let ((y10bc@loop-rib (yb3e@make-full-rib (list y10a8@loop) (list y10b6@loop-lab))) (y10bd@rib (yb3e@make-full-rib y10a9@lhs* y10b3@lab*)) (y10be@r (yd17@add-lexicals (cons y10b6@loop-lab y10b3@lab*) (cons y10b5@loop-lex y10b2@lex*) y1087@r))) (let ((y10c2@body (ydbd@chi-internal (yb6a@add-subst y10bc@loop-rib (yb6a@add-subst y10bd@rib (cons y10ab@b y10ac@b*))) y10be@r y1088@mr))) (yae7@ya45@build-named-let '#f y10b5@loop-lex y10b2@lex* y10b4@rhs* y10c2@body)))))) y10a6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y10a4@t))))))))) (set! y2826@yd1b@let-transformer yd1b@let-transformer) (set! yd1d@letrec-transformer (lambda (y10c4@e y10c5@r y10c6@mr) (yd19@letrec-helper y10c4@e y10c5@r y10c6@mr yae5@ya41@build-letrec))) (set! y2827@yd1d@letrec-transformer yd1d@letrec-transformer) (set! yd1f@letrec*-transformer (lambda (y10ca@e y10cb@r y10cc@mr) (yd19@letrec-helper y10ca@e y10cb@r y10cc@mr yae8@ya47@build-letrec*))) (set! y2828@yd1f@letrec*-transformer yd1f@letrec*-transformer) (set! yd21@fluid-let-syntax-transformer (lambda (y10d0@e y10d1@r y10d2@mr) (let ((y10d7@lookup '#f)) (begin (set! y10d7@lookup (lambda (y10ea@x) (or (yb94@id->label y10ea@x) (ye65@syntax-violation '#f '"unbound identifier" y10d0@e y10ea@x)))) (let ((y10d8@t y10d0@e)) (let ((y10da@ls/false (yd85@syntax-dispatch y10d8@t '(_ #(each (any any)) any . each-any)))) (if y10da@ls/false (apply (lambda (y10dc@lhs* y10dd@rhs* y10de@b y10df@b*) (if (not (yb86@valid-bound-ids? y10dc@lhs*)) (yd3f@invalid-fmls-error y10d0@e y10dc@lhs*) (let ((y10e4@lab* (map y10d7@lookup y10dc@lhs*)) (y10e5@rhs* (map (lambda (y10e8@x) (ybb6@make-eval-transformer (yddf@expand-transformer y10e8@x y10d2@mr))) y10dd@rhs*))) (ydbd@chi-internal (cons y10de@b y10df@b*) (append (map cons y10e4@lab* y10e5@rhs*) y10d1@r) (append (map cons y10e4@lab* y10e5@rhs*) y10d2@mr))))) y10da@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y10d8@t)))))))) (set! y2829@yd21@fluid-let-syntax-transformer yd21@fluid-let-syntax-transformer) (set! yd23@type-descriptor-transformer (lambda (y10ec@e y10ed@r y10ee@mr) (let ((y10f2@t y10ec@e)) (let ((y10f4@ls/false (yd85@syntax-dispatch y10f2@t '(_ any)))) (if (and y10f4@ls/false (apply (lambda (y10f6@id) (yb7e@id? y10f6@id)) y10f4@ls/false)) (apply (lambda (y10f8@id) (let ((y10fa@lab (yb94@id->label y10f8@id))) (let ((y10fc@b (yb96@label->binding y10fa@lab y10ed@r))) (let ((y10fe@type (yb9a@binding-type y10fc@b))) (begin (if (not y10fa@lab) (yb9e@raise-unbound-error y10f8@id) (void)) (if (not (and (eq? y10fe@type '$rtd) (not (list? (yb9c@binding-value y10fc@b))))) (ye65@syntax-violation '#f '"not a record type" y10ec@e) (void)) (list 'quote (yb9c@binding-value y10fc@b))))))) y10f4@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y10f2@t)))))) (set! y282a@yd23@type-descriptor-transformer yd23@type-descriptor-transformer) (set! yd25@record-type-descriptor-transformer (lambda (y1100@e y1101@r y1102@mr) (let ((y1106@t y1100@e)) (let ((y1108@ls/false (yd85@syntax-dispatch y1106@t '(_ any)))) (if (and y1108@ls/false (apply (lambda (y110a@id) (yb7e@id? y110a@id)) y1108@ls/false)) (apply (lambda (y110c@id) (let ((y110e@lab (yb94@id->label y110c@id))) (let ((y1110@b (yb96@label->binding y110e@lab y1101@r))) (let ((y1112@type (yb9a@binding-type y1110@b))) (begin (if (not y110e@lab) (yb9e@raise-unbound-error y110c@id) (void)) (if (not (and (eq? y1112@type '$rtd) (list? (yb9c@binding-value y1110@b)))) (ye65@syntax-violation '#f '"not a record type" y1100@e) (void)) (yda7@chi-expr (car (yb9c@binding-value y1110@b)) y1101@r y1102@mr)))))) y1108@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1106@t)))))) (set! y282b@yd25@record-type-descriptor-transformer yd25@record-type-descriptor-transformer) (set! yd27@record-constructor-descriptor-transformer (lambda (y1114@e y1115@r y1116@mr) (let ((y111a@t y1114@e)) (let ((y111c@ls/false (yd85@syntax-dispatch y111a@t '(_ any)))) (if (and y111c@ls/false (apply (lambda (y111e@id) (yb7e@id? y111e@id)) y111c@ls/false)) (apply (lambda (y1120@id) (let ((y1122@lab (yb94@id->label y1120@id))) (let ((y1124@b (yb96@label->binding y1122@lab y1115@r))) (let ((y1126@type (yb9a@binding-type y1124@b))) (begin (if (not y1122@lab) (yb9e@raise-unbound-error y1120@id) (void)) (if (not (and (eq? y1126@type '$rtd) (list? (yb9c@binding-value y1124@b)))) (ye65@syntax-violation '#f '"invalid type" y1114@e) (void)) (yda7@chi-expr (cadr (yb9c@binding-value y1124@b)) y1115@r y1116@mr)))))) y111c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y111a@t)))))) (set! y282c@yd27@record-constructor-descriptor-transformer yd27@record-constructor-descriptor-transformer) (set! yd29@when-macro (lambda (y1128@e) (let ((y112a@t y1128@e)) (let ((y112c@ls/false (yd85@syntax-dispatch y112a@t '(_ any any . each-any)))) (if y112c@ls/false (apply (lambda (y112e@test y112f@e y1130@e*) (yd3b@bless (list 'if y112e@test (cons 'begin (cons y112f@e y1130@e*))))) y112c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y112a@t)))))) (set! y282d@yd29@when-macro yd29@when-macro) (set! yd2b@unless-macro (lambda (y1134@e) (let ((y1136@t y1134@e)) (let ((y1138@ls/false (yd85@syntax-dispatch y1136@t '(_ any any . each-any)))) (if y1138@ls/false (apply (lambda (y113a@test y113b@e y113c@e*) (yd3b@bless (list 'if (list 'not y113a@test) (cons 'begin (cons y113b@e y113c@e*))))) y1138@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1136@t)))))) (set! y282e@yd2b@unless-macro yd2b@unless-macro) (set! yd2d@if-transformer (lambda (y1140@e y1141@r y1142@mr) (let ((y1146@t y1140@e)) (let ((y1148@ls/false (yd85@syntax-dispatch y1146@t '(_ any any any)))) (if y1148@ls/false (apply (lambda (y114a@e0 y114b@e1 y114c@e2) (list 'if (yda7@chi-expr y114a@e0 y1141@r y1142@mr) (yda7@chi-expr y114b@e1 y1141@r y1142@mr) (yda7@chi-expr y114c@e2 y1141@r y1142@mr))) y1148@ls/false) (let ((y1150@t y1146@t)) (let ((y1152@ls/false (yd85@syntax-dispatch y1150@t '(_ any any)))) (if y1152@ls/false (apply (lambda (y1154@e0 y1155@e1) (list 'if (yda7@chi-expr y1154@e0 y1141@r y1142@mr) (yda7@chi-expr y1155@e1 y1141@r y1142@mr) (yae4@ya3f@build-void))) y1152@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1150@t))))))))) (set! y282f@yd2d@if-transformer yd2d@if-transformer) (set! yd2f@and-transformer (lambda (y1158@e y1159@r y115a@mr) (let ((y115e@t y1158@e)) (let ((y1160@ls/false (yd85@syntax-dispatch y115e@t '(_ . each-any)))) (if y1160@ls/false (apply (lambda (y1162@e*) (cons 'and (yda3@chi-expr* y1162@e* y1159@r y115a@mr))) y1160@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y115e@t)))))) (set! y2830@yd2f@and-transformer yd2f@and-transformer) (set! yd31@or-transformer (lambda (y1164@e y1165@r y1166@mr) (let ((y116a@t y1164@e)) (let ((y116c@ls/false (yd85@syntax-dispatch y116a@t '(_ . each-any)))) (if y116c@ls/false (apply (lambda (y116e@e*) (cons 'or (yda3@chi-expr* y116e@e* y1165@r y1166@mr))) y116c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y116a@t)))))) (set! y2831@yd31@or-transformer yd31@or-transformer) (set! yd33@case-macro (lambda (y1170@e) (let ((y1173@build-last '#f) (y1175@build-one '#f)) (begin (set! y1173@build-last (lambda (y119a@cls) (let ((y119c@t y119a@cls)) (let ((y119e@ls/false (yd85@syntax-dispatch y119c@t '(#(scheme-id else) any . each-any)))) (if y119e@ls/false (apply (lambda (y11a0@e y11a1@e*) (cons 'begin (cons y11a0@e y11a1@e*))) y119e@ls/false) (let ((y11a4@t y119c@t)) (let ((y11a6@ls/false (yd85@syntax-dispatch y11a4@t '_))) (if y11a6@ls/false (apply (lambda () (y1175@build-one y119a@cls '(if #f #f))) y11a6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y11a4@t))))))))) (set! y1175@build-one (lambda (y118c@cls y118d@k) (let ((y1190@t y118c@cls)) (let ((y1192@ls/false (yd85@syntax-dispatch y1190@t '(each-any any . each-any)))) (if y1192@ls/false (apply (lambda (y1194@d* y1195@e y1196@e*) (list 'if (list 'memv 't (list 'quote y1194@d*)) (cons 'begin (cons y1195@e y1196@e*)) y118d@k)) y1192@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1190@t)))))) (let ((y1176@t y1170@e)) (let ((y1178@ls/false (yd85@syntax-dispatch y1176@t '(_ any)))) (if y1178@ls/false (apply (lambda (y117a@expr) (yd3b@bless (cons 'let (cons (list (list 't y117a@expr)) '((if #f #f)))))) y1178@ls/false) (let ((y117c@t y1176@t)) (let ((y117e@ls/false (yd85@syntax-dispatch y117c@t '(_ any any . each-any)))) (if y117e@ls/false (apply (lambda (y1180@expr y1181@cls y1182@cls*) (yd3b@bless (list 'let (list (list 't y1180@expr)) (let y118a@f ((y1186@cls y1181@cls) (y1187@cls* y1182@cls*)) (if (null? y1187@cls*) (y1173@build-last y1186@cls) (y1175@build-one y1186@cls (y118a@f (car y1187@cls*) (cdr y1187@cls*)))))))) y117e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y117c@t))))))))))) (set! y2832@yd33@case-macro yd33@case-macro) (set! yd35@quote-transformer (lambda (y11a8@e y11a9@r y11aa@mr) (let ((y11ae@t y11a8@e)) (let ((y11b0@ls/false (yd85@syntax-dispatch y11ae@t '(_ any)))) (if y11b0@ls/false (apply (lambda (y11b2@datum) (list 'quote (yb92@stx->datum y11b2@datum))) y11b0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y11ae@t)))))) (set! y2833@yd35@quote-transformer yd35@quote-transformer) (set! yd37@case-lambda-transformer (lambda (y11b4@e y11b5@r y11b6@mr) (let ((y11ba@t y11b4@e)) (let ((y11bc@ls/false (yd85@syntax-dispatch y11ba@t '(_ . #(each (any any . each-any)))))) (if y11bc@ls/false (apply (lambda (y11be@fmls* y11bf@b* y11c0@b**) (call-with-values (lambda () (ydaf@chi-lambda-clause* y11b4@e y11be@fmls* (map cons y11bf@b* y11c0@b**) y11b5@r y11b6@mr)) (lambda (y11c8@y11c5 y11c9@y11c7) (let ((y11cc@body* y11c9@y11c7) (y11cd@fmls* y11c8@y11c5)) (yae2@ya0f@build-case-lambda '#f y11cd@fmls* y11cc@body*))))) y11bc@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y11ba@t)))))) (set! y2834@yd37@case-lambda-transformer yd37@case-lambda-transformer) (set! yd39@lambda-transformer (lambda (y11d0@e y11d1@r y11d2@mr) (let ((y11d6@t y11d0@e)) (let ((y11d8@ls/false (yd85@syntax-dispatch y11d6@t '(_ any any . each-any)))) (if y11d8@ls/false (apply (lambda (y11da@fmls y11db@b y11dc@b*) (call-with-values (lambda () (ydad@chi-lambda-clause y11d0@e y11da@fmls (cons y11db@b y11dc@b*) y11d1@r y11d2@mr)) (lambda (y11e4@y11e1 y11e5@y11e3) (let ((y11e8@body y11e5@y11e3) (y11e9@fmls y11e4@y11e1)) (yae1@ya0d@build-lambda '#f y11e9@fmls y11e8@body))))) y11d8@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y11d6@t)))))) (set! y2835@yd39@lambda-transformer yd39@lambda-transformer) (set! yd3b@bless (lambda (y11ec@x) (yb66@mkstx (let y11f0@f ((y11ee@x y11ec@x)) (if (yb4a@stx? y11ee@x) y11ee@x (if (pair? y11ee@x) (cons (y11f0@f (car y11ee@x)) (y11f0@f (cdr y11ee@x))) (if (symbol? y11ee@x) (yd0d@scheme-stx y11ee@x) (if (vector? y11ee@x) (vector-map y11f0@f y11ee@x) y11ee@x))))) '() '() '()))) (set! y2836@yd3b@bless yd3b@bless) (set! yd3d@with-syntax-macro (lambda (y11f2@e) (let ((y11f4@t y11f2@e)) (let ((y11f6@ls/false (yd85@syntax-dispatch y11f4@t '(_ #(each (any any)) any . each-any)))) (if y11f6@ls/false (apply (lambda (y11f8@pat* y11f9@expr* y11fa@b y11fb@b*) (let ((y1200@idn* (let y1204@f ((y1202@pat* y11f8@pat*)) (if (null? y1202@pat*) '() (call-with-values (lambda () (yd83@convert-pattern (car y1202@pat*) '())) (lambda (y120a@y1207 y120b@y1209) (let ((y120e@idn* y120b@y1209) (y120f@pat y120a@y1207)) (append y120e@idn* (y1204@f (cdr y1202@pat*)))))))))) (begin (ydab@verify-formals (map car y1200@idn*) y11f2@e) (let ((y1212@t* (ye53@generate-temporaries y11f9@expr*))) (yd3b@bless (list 'let (map list y1212@t* y11f9@expr*) (let y1218@f ((y1214@pat* y11f8@pat*) (y1215@t* y1212@t*)) (if (null? y1214@pat*) (cons 'begin (cons '#f (cons y11fa@b y11fb@b*))) (list 'syntax-case (car y1215@t*) '() (list (car y1214@pat*) (y1218@f (cdr y1214@pat*) (cdr y1215@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car y1214@pat*)) (car y1215@t*)))))))))))) y11f6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y11f4@t)))))) (set! y2837@yd3d@with-syntax-macro yd3d@with-syntax-macro) (set! yd3f@invalid-fmls-error (lambda (y121a@stx y121b@fmls) (let ((y121e@t y121b@fmls)) (let ((y1220@ls/false (yd85@syntax-dispatch y121e@t '#(each+ any () any)))) (if y1220@ls/false (apply (lambda (y1222@id* y1223@last) (let y1228@f ((y1226@id* (if (yb7e@id? y1223@last) (cons y1223@last y1222@id*) (if (yb74@syntax-null? y1223@last) y1222@id* (ye65@syntax-violation '#f '"not an identifier" y121a@stx y1223@last))))) (if (null? y1226@id*) (values) (if (not (yb7e@id? (car y1226@id*))) (ye65@syntax-violation '#f '"not an identifier" y121a@stx (car y1226@id*)) (begin (y1228@f (cdr y1226@id*)) (if (yb8a@bound-id-member? (car y1226@id*) (cdr y1226@id*)) (ye65@syntax-violation '#f '"duplicate binding" y121a@stx (car y1226@id*)) (void))))))) y1220@ls/false) (let ((y122a@t y121e@t)) (let ((y122c@ls/false (yd85@syntax-dispatch y122a@t '_))) (if y122c@ls/false (apply (lambda () (ye65@syntax-violation '#f '"malformed binding form" y121a@stx y121b@fmls)) y122c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y122a@t))))))))) (set! y2838@yd3f@invalid-fmls-error yd3f@invalid-fmls-error) (set! yd41@let-macro (lambda (y122e@stx) (let ((y1230@t y122e@stx)) (let ((y1232@ls/false (yd85@syntax-dispatch y1230@t '(_ #(each (any any)) any . each-any)))) (if y1232@ls/false (apply (lambda (y1234@lhs* y1235@rhs* y1236@b y1237@b*) (if (yb86@valid-bound-ids? y1234@lhs*) (yd3b@bless (cons (cons 'lambda (cons y1234@lhs* (cons y1236@b y1237@b*))) y1235@rhs*)) (yd3f@invalid-fmls-error y122e@stx y1234@lhs*))) y1232@ls/false) (let ((y123c@t y1230@t)) (let ((y123e@ls/false (yd85@syntax-dispatch y123c@t '(_ any #(each (any any)) any . each-any)))) (if (and y123e@ls/false (apply (lambda (y1240@f y1241@lhs* y1242@rhs* y1243@b y1244@b*) (yb7e@id? y1240@f)) y123e@ls/false)) (apply (lambda (y124a@f y124b@lhs* y124c@rhs* y124d@b y124e@b*) (if (yb86@valid-bound-ids? y124b@lhs*) (yd3b@bless (cons (list 'letrec (list (list y124a@f (cons 'lambda (cons y124b@lhs* (cons y124d@b y124e@b*))))) y124a@f) y124c@rhs*)) (yd3f@invalid-fmls-error y122e@stx y124b@lhs*))) y123e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y123c@t))))))))) (set! y2839@yd41@let-macro yd41@let-macro) (set! yd43@let-values-macro (lambda (y1254@stx) (let ((y1257@rename '#f) (y1259@rename* '#f)) (begin (set! y1257@rename (lambda (y12bc@x y12bd@old* y12be@new*) (begin (if (not (yb7e@id? y12bc@x)) (ye65@syntax-violation '#f '"not an indentifier" y1254@stx y12bc@x) (void)) (if (yb8a@bound-id-member? y12bc@x y12bd@old*) (ye65@syntax-violation '#f '"duplicate binding" y1254@stx y12bc@x) (void)) (let ((y12c2@y (gensym (ye6b@syntax->datum y12bc@x)))) (values y12c2@y (cons y12bc@x y12bd@old*) (cons y12c2@y y12be@new*)))))) (set! y1259@rename* (lambda (y12aa@x* y12ab@old* y12ac@new*) (if (null? y12aa@x*) (values '() y12ab@old* y12ac@new*) (call-with-values (lambda () (y1257@rename (car y12aa@x*) y12ab@old* y12ac@new*)) (lambda (y12b0@x y12b1@old* y12b2@new*) (call-with-values (lambda () (y1259@rename* (cdr y12aa@x*) y12b1@old* y12b2@new*)) (lambda (y12b6@x* y12b7@old* y12b8@new*) (values (cons y12b0@x y12b6@x*) y12b7@old* y12b8@new*)))))))) (let ((y125a@t y1254@stx)) (let ((y125c@ls/false (yd85@syntax-dispatch y125a@t '(_ () any . each-any)))) (if y125c@ls/false (apply (lambda (y125e@b y125f@b*) (cons* (yd3b@bless 'let) '() y125e@b y125f@b*)) y125c@ls/false) (let ((y1262@t y125a@t)) (let ((y1264@ls/false (yd85@syntax-dispatch y1262@t '(_ #(each (any any)) any . each-any)))) (if y1264@ls/false (apply (lambda (y1266@lhs* y1267@rhs* y1268@b y1269@b*) (yd3b@bless (let y1276@f ((y126e@lhs* y1266@lhs*) (y126f@rhs* y1267@rhs*) (y1270@old* '()) (y1271@new* '())) (if (null? y126e@lhs*) (cons 'let (cons (map list y1270@old* y1271@new*) (cons y1268@b y1269@b*))) (let ((y1278@t (car y126e@lhs*))) (let ((y127a@ls/false (yd85@syntax-dispatch y1278@t 'each-any))) (if y127a@ls/false (apply (lambda (y127c@x*) (call-with-values (lambda () (y1259@rename* y127c@x* y1270@old* y1271@new*)) (lambda (y1284@y127f y1285@y1281 y1286@y1283) (let ((y128a@new* y1286@y1283) (y128b@old* y1285@y1281) (y128c@y* y1284@y127f)) (list 'call-with-values (list 'lambda '() (car y126f@rhs*)) (list 'lambda y128c@y* (y1276@f (cdr y126e@lhs*) (cdr y126f@rhs*) y128b@old* y128a@new*))))))) y127a@ls/false) (let ((y1290@t y1278@t)) (let ((y1292@ls/false (yd85@syntax-dispatch y1290@t '#(each+ any () any)))) (if y1292@ls/false (apply (lambda (y1294@x* y1295@x) (call-with-values (lambda () (y1257@rename y1295@x y1270@old* y1271@new*)) (lambda (y1298@y y1299@old* y129a@new*) (call-with-values (lambda () (y1259@rename* y1294@x* y1299@old* y129a@new*)) (lambda (y129e@y* y129f@old* y12a0@new*) (list 'call-with-values (list 'lambda '() (car y126f@rhs*)) (list 'lambda (append y129e@y* y1298@y) (y1276@f (cdr y126e@lhs*) (cdr y126f@rhs*) y129f@old* y12a0@new*)))))))) y1292@ls/false) (let ((y12a4@t y1290@t)) (let ((y12a6@ls/false (yd85@syntax-dispatch y12a4@t 'any))) (if y12a6@ls/false (apply (lambda (y12a8@others) (ye65@syntax-violation '#f '"malformed bindings" y1254@stx y12a8@others)) y12a6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y12a4@t)))))))))))))) y1264@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1262@t))))))))))) (set! y283a@yd43@let-values-macro yd43@let-values-macro) (set! yd45@let*-values-macro (lambda (y12c4@stx) (let ((y12c7@check '#f)) (begin (set! y12c7@check (lambda (y12f6@x*) (if (not (null? y12f6@x*)) (let ((y12f8@x (car y12f6@x*))) (begin (if (not (yb7e@id? y12f8@x)) (ye65@syntax-violation '#f '"not an identifier" y12c4@stx y12f8@x) (void)) (y12c7@check (cdr y12f6@x*)) (if (yb8a@bound-id-member? y12f8@x (cdr y12f6@x*)) (ye65@syntax-violation '#f '"duplicate identifier" y12c4@stx y12f8@x) (void)))) (void)))) (let ((y12c8@t y12c4@stx)) (let ((y12ca@ls/false (yd85@syntax-dispatch y12c8@t '(_ () any . each-any)))) (if y12ca@ls/false (apply (lambda (y12cc@b y12cd@b*) (cons* (yd3b@bless 'let) '() y12cc@b y12cd@b*)) y12ca@ls/false) (let ((y12d0@t y12c8@t)) (let ((y12d2@ls/false (yd85@syntax-dispatch y12d0@t '(_ #(each (any any)) any . each-any)))) (if y12d2@ls/false (apply (lambda (y12d4@lhs* y12d5@rhs* y12d6@b y12d7@b*) (yd3b@bless (let y12e0@f ((y12dc@lhs* y12d4@lhs*) (y12dd@rhs* y12d5@rhs*)) (if (null? y12dc@lhs*) (cons 'begin (cons y12d6@b y12d7@b*)) (let ((y12e2@t (car y12dc@lhs*))) (let ((y12e4@ls/false (yd85@syntax-dispatch y12e2@t 'each-any))) (if y12e4@ls/false (apply (lambda (y12e6@x*) (begin (y12c7@check y12e6@x*) (list 'call-with-values (list 'lambda '() (car y12dd@rhs*)) (list 'lambda y12e6@x* (y12e0@f (cdr y12dc@lhs*) (cdr y12dd@rhs*)))))) y12e4@ls/false) (let ((y12e8@t y12e2@t)) (let ((y12ea@ls/false (yd85@syntax-dispatch y12e8@t '#(each+ any () any)))) (if y12ea@ls/false (apply (lambda (y12ec@x* y12ed@x) (begin (y12c7@check (cons y12ed@x y12ec@x*)) (list 'call-with-values (list 'lambda '() (car y12dd@rhs*)) (list 'lambda (append y12ec@x* y12ed@x) (y12e0@f (cdr y12dc@lhs*) (cdr y12dd@rhs*)))))) y12ea@ls/false) (let ((y12f0@t y12e8@t)) (let ((y12f2@ls/false (yd85@syntax-dispatch y12f0@t 'any))) (if y12f2@ls/false (apply (lambda (y12f4@others) (ye65@syntax-violation '#f '"malformed bindings" y12c4@stx y12f4@others)) y12f2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y12f0@t)))))))))))))) y12d2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y12d0@t))))))))))) (set! y283b@yd45@let*-values-macro yd45@let*-values-macro) (set! yd47@trace-lambda-macro (lambda (y12fa@stx) (let ((y12fc@t y12fa@stx)) (let ((y12fe@ls/false (yd85@syntax-dispatch y12fc@t '(_ any each-any any . each-any)))) (if y12fe@ls/false (apply (lambda (y1300@who y1301@fmls y1302@b y1303@b*) (if (yb86@valid-bound-ids? y1301@fmls) (yd3b@bless (list 'make-traced-procedure (list 'quote y1300@who) (cons 'lambda (cons y1301@fmls (cons y1302@b y1303@b*))))) (yd3f@invalid-fmls-error y12fa@stx y1301@fmls))) y12fe@ls/false) (let ((y1308@t y12fc@t)) (let ((y130a@ls/false (yd85@syntax-dispatch y1308@t '(_ any #(each+ any () any) any . each-any)))) (if y130a@ls/false (apply (lambda (y130c@who y130d@fmls y130e@last y130f@b y1310@b*) (if (yb86@valid-bound-ids? (cons y130e@last y130d@fmls)) (yd3b@bless (list 'make-traced-procedure (list 'quote y130c@who) (cons 'lambda (cons (append y130d@fmls y130e@last) (cons y130f@b y1310@b*))))) (yd3f@invalid-fmls-error y12fa@stx (append y130d@fmls y130e@last)))) y130a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1308@t))))))))) (set! y283c@yd47@trace-lambda-macro yd47@trace-lambda-macro) (set! yd49@trace-define-macro (lambda (y1316@stx) (let ((y1318@t y1316@stx)) (let ((y131a@ls/false (yd85@syntax-dispatch y1318@t '(_ (any . each-any) any . each-any)))) (if y131a@ls/false (apply (lambda (y131c@who y131d@fmls y131e@b y131f@b*) (if (yb86@valid-bound-ids? y131d@fmls) (yd3b@bless (list 'define y131c@who (list 'make-traced-procedure (list 'quote y131c@who) (cons 'lambda (cons y131d@fmls (cons y131e@b y131f@b*)))))) (yd3f@invalid-fmls-error y1316@stx y131d@fmls))) y131a@ls/false) (let ((y1324@t y1318@t)) (let ((y1326@ls/false (yd85@syntax-dispatch y1324@t '(_ (any . #(each+ any () any)) any . each-any)))) (if y1326@ls/false (apply (lambda (y1328@who y1329@fmls y132a@last y132b@b y132c@b*) (if (yb86@valid-bound-ids? (cons y132a@last y1329@fmls)) (yd3b@bless (list 'define y1328@who (list 'make-traced-procedure (list 'quote y1328@who) (cons 'lambda (cons (append y1329@fmls y132a@last) (cons y132b@b y132c@b*)))))) (yd3f@invalid-fmls-error y1316@stx (append y1329@fmls y132a@last)))) y1326@ls/false) (let ((y1332@t y1324@t)) (let ((y1334@ls/false (yd85@syntax-dispatch y1332@t '(_ any any)))) (if y1334@ls/false (apply (lambda (y1336@who y1337@expr) (if (yb7e@id? y1336@who) (yd3b@bless (list 'define y1336@who (list 'let (list (list 'v y1337@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote y1336@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (ye65@syntax-violation '#f '"invalid name" y1316@stx))) y1334@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1332@t)))))))))))) (set! y283d@yd49@trace-define-macro yd49@trace-define-macro) (set! yd4b@trace-define-syntax-macro (lambda (y133a@stx) (let ((y133c@t y133a@stx)) (let ((y133e@ls/false (yd85@syntax-dispatch y133c@t '(_ any any)))) (if y133e@ls/false (apply (lambda (y1340@who y1341@expr) (if (yb7e@id? y1340@who) (yd3b@bless (list 'define-syntax y1340@who (list 'make-traced-macro (list 'quote y1340@who) y1341@expr))) (ye65@syntax-violation '#f '"invalid name" y133a@stx))) y133e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y133c@t)))))) (set! y283e@yd4b@trace-define-syntax-macro yd4b@trace-define-syntax-macro) (set! yd4d@trace-let/rec-syntax (lambda (y1344@who) (lambda (y1346@stx) (let ((y1348@t y1346@stx)) (let ((y134a@ls/false (yd85@syntax-dispatch y1348@t '(_ #(each (any any)) any . each-any)))) (if y134a@ls/false (apply (lambda (y134c@lhs* y134d@rhs* y134e@b y134f@b*) (if (yb86@valid-bound-ids? y134c@lhs*) (let ((y1354@rhs* (map (lambda (y1356@lhs y1357@rhs) (list 'make-traced-macro (list 'quote y1356@lhs) y1357@rhs)) y134c@lhs* y134d@rhs*))) (yd3b@bless (cons y1344@who (cons (map list y134c@lhs* y1354@rhs*) (cons y134e@b y134f@b*))))) (yd3f@invalid-fmls-error y1346@stx y134c@lhs*))) y134a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1348@t))))))) (set! y283f@yd4d@trace-let/rec-syntax yd4d@trace-let/rec-syntax) (set! yd4f@trace-let-syntax-macro (yd4d@trace-let/rec-syntax 'let-syntax)) (set! y2840@yd4f@trace-let-syntax-macro yd4f@trace-let-syntax-macro) (set! yd51@trace-letrec-syntax-macro (yd4d@trace-let/rec-syntax 'letrec-syntax)) (set! y2841@yd51@trace-letrec-syntax-macro yd51@trace-letrec-syntax-macro) (set! yd53@guard-macro (lambda (y135a@x) (let ((y135d@gen-clauses '#f)) (begin (set! y135d@gen-clauses (lambda (y1374@con y1375@outerk y1376@clause*) (let ((y137b@f '#f) (y137d@f* '#f)) (begin (set! y137b@f (lambda (y13b4@x y13b5@k) (let ((y13b8@t y13b4@x)) (let ((y13ba@ls/false (yd85@syntax-dispatch y13b8@t '(any #(scheme-id =>) any)))) (if y13ba@ls/false (apply (lambda (y13bc@e y13bd@p) (let ((y13c0@t (gensym))) (list 'let (list (list y13c0@t y13bc@e)) (list 'if y13c0@t (list y13bd@p y13c0@t) y13b5@k)))) y13ba@ls/false) (let ((y13c2@t y13b8@t)) (let ((y13c4@ls/false (yd85@syntax-dispatch y13c2@t '(any)))) (if y13c4@ls/false (apply (lambda (y13c6@e) (let ((y13c8@t (gensym))) (list 'let (list (list y13c8@t y13c6@e)) (list 'if y13c8@t y13c8@t y13b5@k)))) y13c4@ls/false) (let ((y13ca@t y13c2@t)) (let ((y13cc@ls/false (yd85@syntax-dispatch y13ca@t '(any any . each-any)))) (if y13cc@ls/false (apply (lambda (y13ce@e y13cf@v y13d0@v*) (list 'if y13ce@e (cons 'begin (cons y13cf@v y13d0@v*)) y13b5@k)) y13cc@ls/false) (let ((y13d4@t y13ca@t)) (let ((y13d6@ls/false (yd85@syntax-dispatch y13d4@t '_))) (if y13d6@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid guard clause" y13b4@x)) y13d6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y13d4@t))))))))))))))) (set! y137d@f* (lambda (y138a@x*) (let ((y138c@t y138a@x*)) (let ((y138e@ls/false (yd85@syntax-dispatch y138c@t '()))) (if y138e@ls/false (apply (lambda () (let ((y1390@g (gensym))) (values (list y1390@g (list 'lambda '() (list 'raise-continuable y1374@con))) y1390@g))) y138e@ls/false) (let ((y1392@t y138c@t)) (let ((y1394@ls/false (yd85@syntax-dispatch y1392@t '((#(scheme-id else) any . each-any))))) (if y1394@ls/false (apply (lambda (y1396@e y1397@e*) (values (cons 'begin (cons y1396@e y1397@e*)) '#f)) y1394@ls/false) (let ((y139a@t y1392@t)) (let ((y139c@ls/false (yd85@syntax-dispatch y139a@t '(any . any)))) (if y139c@ls/false (apply (lambda (y139e@cls y139f@cls*) (call-with-values (lambda () (y137d@f* y139f@cls*)) (lambda (y13a6@y13a3 y13a7@y13a5) (let ((y13aa@g y13a7@y13a5) (y13ab@e y13a6@y13a3)) (values (y137b@f y139e@cls y13ab@e) y13aa@g))))) y139c@ls/false) (let ((y13ae@t y139a@t)) (let ((y13b0@ls/false (yd85@syntax-dispatch y13ae@t 'any))) (if y13b0@ls/false (apply (lambda (y13b2@others) (ye65@syntax-violation '#f '"invalid guard clause" y13b2@others)) y13b0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y13ae@t))))))))))))))) (call-with-values (lambda () (y137d@f* y1376@clause*)) (lambda (y1382@y137f y1383@y1381) (let ((y1386@raisek y1383@y1381) (y1387@code y1382@y137f)) (if y1386@raisek (list (list 'call/cc (list 'lambda (list y1386@raisek) (list y1375@outerk (list 'lambda '() y1387@code))))) (list y1375@outerk (list 'lambda '() y1387@code)))))))))) (let ((y135e@t y135a@x)) (let ((y1360@ls/false (yd85@syntax-dispatch y135e@t '(_ (any . each-any) any . each-any)))) (if (and y1360@ls/false (apply (lambda (y1362@con y1363@clause* y1364@b y1365@b*) (yb7e@id? y1362@con)) y1360@ls/false)) (apply (lambda (y136a@con y136b@clause* y136c@b y136d@b*) (let ((y1372@outerk (gensym))) (yd3b@bless (list (list 'call/cc (list 'lambda (list y1372@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list y136a@con) (y135d@gen-clauses y136a@con y1372@outerk y136b@clause*)) (cons 'lambda (cons '() (cons y136c@b y136d@b*))))))))))) y1360@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y135e@t)))))))) (set! y2842@yd53@guard-macro yd53@guard-macro) (set! yd55@define-enumeration-macro (lambda (y13d8@stx) (let ((y13db@set? '#f) (y13dd@remove-dups '#f)) (begin (set! y13db@set? (lambda (y13f4@x) (or (null? y13f4@x) (and (not (memq (car y13f4@x) (cdr y13f4@x))) (y13db@set? (cdr y13f4@x)))))) (set! y13dd@remove-dups (lambda (y13f2@ls) (if (null? y13f2@ls) '() (cons (car y13f2@ls) (y13dd@remove-dups (remq (car y13f2@ls) (cdr y13f2@ls))))))) (let ((y13de@t y13d8@stx)) (let ((y13e0@ls/false (yd85@syntax-dispatch y13de@t '(_ any each-any any)))) (if (and y13e0@ls/false (apply (lambda (y13e2@name y13e3@id* y13e4@maker) (and (yb7e@id? y13e2@name) (yb7e@id? y13e4@maker) (for-all yb7e@id? y13e3@id*))) y13e0@ls/false)) (apply (lambda (y13e8@name y13e9@id* y13ea@maker) (let ((y13ee@name* (y13dd@remove-dups (ye6b@syntax->datum y13e9@id*))) (y13ef@mk (gensym))) (yd3b@bless (list 'begin (list 'define y13ef@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote y13ee@name*)))) (list 'define-syntax y13e8@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote y13ee@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote y13e8@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax y13ea@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote y13ea@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote y13ee@name*)) (cons 'syntax-violation (cons (list 'quote y13ea@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons y13ef@mk '('(n* ...))))))))))))) y13e0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y13de@t)))))))) (set! y2843@yd55@define-enumeration-macro yd55@define-enumeration-macro) (set! yd57@time-macro (lambda (y13f6@stx) (let ((y13f8@t y13f6@stx)) (let ((y13fa@ls/false (yd85@syntax-dispatch y13f8@t '(_ any)))) (if y13fa@ls/false (apply (lambda (y13fc@expr) (yd3b@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() y13fc@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) y13fa@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y13f8@t)))))) (set! y2844@yd57@time-macro yd57@time-macro) (set! yd59@delay-macro (lambda (y13fe@stx) (let ((y1400@t y13fe@stx)) (let ((y1402@ls/false (yd85@syntax-dispatch y1400@t '(_ any)))) (if y1402@ls/false (apply (lambda (y1404@expr) (yd3b@bless (list 'make-promise (list 'lambda '() y1404@expr)))) y1402@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1400@t)))))) (set! y2845@yd59@delay-macro yd59@delay-macro) (set! yd5b@assert-macro (lambda (y1406@stx) (let ((y1408@t y1406@stx)) (let ((y140a@ls/false (yd85@syntax-dispatch y1408@t '(_ any)))) (if y140a@ls/false (apply (lambda (y140c@expr) (let ((y140e@pos (or (ye5d@expression-position y1406@stx) (ye5d@expression-position y140c@expr)))) (yd3b@bless (list 'unless y140c@expr (list 'assertion-error (list 'quote y140c@expr) (list 'quote y140e@pos)))))) y140a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1408@t)))))) (set! y2846@yd5b@assert-macro yd5b@assert-macro) (set! yd5d@endianness-macro (lambda (y1410@stx) (let ((y1412@t y1410@stx)) (let ((y1414@ls/false (yd85@syntax-dispatch y1412@t '(_ any)))) (if y1414@ls/false (apply (lambda (y1416@e) (let ((y1418@t (ye6b@syntax->datum y1416@e))) (if (memv y1418@t '(little)) (yd3b@bless ''little) (if (memv y1418@t '(big)) (yd3b@bless ''big) (ye65@syntax-violation '#f '"endianness must be big or little" y1410@stx))))) y1414@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1412@t)))))) (set! y2847@yd5d@endianness-macro yd5d@endianness-macro) (set! yd5f@identifier-syntax-macro (lambda (y141a@stx) (let ((y141c@t y141a@stx)) (let ((y141e@ls/false (yd85@syntax-dispatch y141c@t '(_ any)))) (if y141e@ls/false (apply (lambda (y1420@expr) (yd3b@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax y1420@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax y1420@expr) '((syntax (e* ...)))))))))) y141e@ls/false) (let ((y1422@t y141c@t)) (let ((y1424@ls/false (yd85@syntax-dispatch y1422@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and y1424@ls/false (apply (lambda (y1426@id1 y1427@expr1 y1428@id2 y1429@expr2 y142a@expr3) (and (yb7e@id? y1426@id1) (yb7e@id? y1428@id2) (yb7e@id? y1429@expr2))) y1424@ls/false)) (apply (lambda (y1430@id1 y1431@expr1 y1432@id2 y1433@expr2 y1434@expr3) (yd3b@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax y1431@expr1)) (list (list 'set! 'id y1433@expr2) (list 'syntax y1434@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons y1431@expr1 '(e* ...))))))))) y1424@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1422@t))))))))) (set! y2848@yd5f@identifier-syntax-macro yd5f@identifier-syntax-macro) (set! yd61@do-macro (lambda (y143a@stx) (let ((y143d@bind '#f)) (begin (set! y143d@bind (lambda (y1454@x) (let ((y1456@t y1454@x)) (let ((y1458@ls/false (yd85@syntax-dispatch y1456@t '(any any)))) (if y1458@ls/false (apply (lambda (y145a@x y145b@init) (list y145a@x y145b@init y145a@x)) y1458@ls/false) (let ((y145e@t y1456@t)) (let ((y1460@ls/false (yd85@syntax-dispatch y145e@t '(any any any)))) (if y1460@ls/false (apply (lambda (y1462@x y1463@init y1464@step) (list y1462@x y1463@init y1464@step)) y1460@ls/false) (let ((y1468@t y145e@t)) (let ((y146a@ls/false (yd85@syntax-dispatch y1468@t '_))) (if y146a@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid binding" y143a@stx)) y146a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1468@t)))))))))))) (let ((y143e@t y143a@stx)) (let ((y1440@ls/false (yd85@syntax-dispatch y143e@t '(_ each-any (any . each-any) . each-any)))) (if y1440@ls/false (apply (lambda (y1442@binding* y1443@test y1444@expr* y1445@command*) (let ((y144a@t (map y143d@bind y1442@binding*))) (let ((y144c@ls/false (yd85@syntax-dispatch y144a@t '#(each (any any any))))) (if y144c@ls/false (apply (lambda (y144e@x* y144f@init* y1450@step*) (if (yb86@valid-bound-ids? y144e@x*) (yd3b@bless (list 'letrec (list (list 'loop (list 'lambda y144e@x* (list 'if y1443@test (cons 'begin (cons '(if #f #f) y1444@expr*)) (cons 'begin (append y1445@command* (list (cons 'loop y1450@step*)))))))) (cons 'loop y144f@init*))) (ye65@syntax-violation '#f '"invalid bindings" y143a@stx))) y144c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y144a@t))))) y1440@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y143e@t)))))))) (set! y2849@yd61@do-macro yd61@do-macro) (set! yd63@let*-macro (lambda (y146c@stx) (let ((y146e@t y146c@stx)) (let ((y1470@ls/false (yd85@syntax-dispatch y146e@t '(_ #(each (any any)) any . each-any)))) (if (and y1470@ls/false (apply (lambda (y1472@lhs* y1473@rhs* y1474@b y1475@b*) (for-all yb7e@id? y1472@lhs*)) y1470@ls/false)) (apply (lambda (y147a@lhs* y147b@rhs* y147c@b y147d@b*) (yd3b@bless (let y1484@f ((y1482@x* (map list y147a@lhs* y147b@rhs*))) (if (null? y1482@x*) (cons 'let (cons '() (cons y147c@b y147d@b*))) (list 'let (list (car y1482@x*)) (y1484@f (cdr y1482@x*))))))) y1470@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y146e@t)))))) (set! y284a@yd63@let*-macro yd63@let*-macro) (set! yd65@or-macro (lambda (y1486@stx) (let ((y1488@t y1486@stx)) (let ((y148a@ls/false (yd85@syntax-dispatch y1488@t '(_)))) (if y148a@ls/false (apply (lambda () '#f) y148a@ls/false) (let ((y148c@t y1488@t)) (let ((y148e@ls/false (yd85@syntax-dispatch y148c@t '(_ any . each-any)))) (if y148e@ls/false (apply (lambda (y1490@e y1491@e*) (yd3b@bless (let y1498@f ((y1494@e y1490@e) (y1495@e* y1491@e*)) (if (null? y1495@e*) (list 'begin '#f y1494@e) (list 'let (list (list 't y1494@e)) (list 'if 't 't (y1498@f (car y1495@e*) (cdr y1495@e*)))))))) y148e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y148c@t))))))))) (set! y284b@yd65@or-macro yd65@or-macro) (set! yd67@and-macro (lambda (y149a@stx) (let ((y149c@t y149a@stx)) (let ((y149e@ls/false (yd85@syntax-dispatch y149c@t '(_)))) (if y149e@ls/false (apply (lambda () '#t) y149e@ls/false) (let ((y14a0@t y149c@t)) (let ((y14a2@ls/false (yd85@syntax-dispatch y14a0@t '(_ any . each-any)))) (if y14a2@ls/false (apply (lambda (y14a4@e y14a5@e*) (yd3b@bless (let y14ac@f ((y14a8@e y14a4@e) (y14a9@e* y14a5@e*)) (if (null? y14a9@e*) (list 'begin '#f y14a8@e) (cons 'if (cons y14a8@e (cons (y14ac@f (car y14a9@e*) (cdr y14a9@e*)) '(#f)))))))) y14a2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y14a0@t))))))))) (set! y284c@yd67@and-macro yd67@and-macro) (set! yd69@cond-macro (lambda (y14ae@stx) (let ((y14b0@t y14ae@stx)) (let ((y14b2@ls/false (yd85@syntax-dispatch y14b0@t '(_ any . each-any)))) (if y14b2@ls/false (apply (lambda (y14b4@cls y14b5@cls*) (yd3b@bless (let y14bc@f ((y14b8@cls y14b4@cls) (y14b9@cls* y14b5@cls*)) (if (null? y14b9@cls*) (let ((y14be@t y14b8@cls)) (let ((y14c0@ls/false (yd85@syntax-dispatch y14be@t '(#(scheme-id else) any . each-any)))) (if y14c0@ls/false (apply (lambda (y14c2@e y14c3@e*) (cons 'begin (cons y14c2@e y14c3@e*))) y14c0@ls/false) (let ((y14c6@t y14be@t)) (let ((y14c8@ls/false (yd85@syntax-dispatch y14c6@t '(any #(scheme-id =>) any)))) (if y14c8@ls/false (apply (lambda (y14ca@e y14cb@p) (list 'let (list (list 't y14ca@e)) (list 'if 't (cons y14cb@p '(t))))) y14c8@ls/false) (let ((y14ce@t y14c6@t)) (let ((y14d0@ls/false (yd85@syntax-dispatch y14ce@t '(any)))) (if y14d0@ls/false (apply (lambda (y14d2@e) (cons 'or (cons y14d2@e '((if #f #f))))) y14d0@ls/false) (let ((y14d4@t y14ce@t)) (let ((y14d6@ls/false (yd85@syntax-dispatch y14d4@t '(any . each-any)))) (if y14d6@ls/false (apply (lambda (y14d8@e y14d9@e*) (list 'if y14d8@e (cons 'begin y14d9@e*))) y14d6@ls/false) (let ((y14dc@t y14d4@t)) (let ((y14de@ls/false (yd85@syntax-dispatch y14dc@t '_))) (if y14de@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid last clause" y14ae@stx)) y14de@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y14dc@t)))))))))))))))) (let ((y14e0@t y14b8@cls)) (let ((y14e2@ls/false (yd85@syntax-dispatch y14e0@t '(#(scheme-id else) any . each-any)))) (if y14e2@ls/false (apply (lambda (y14e4@e y14e5@e*) (ye65@syntax-violation '#f '"incorrect position of keyword else" y14ae@stx)) y14e2@ls/false) (let ((y14e8@t y14e0@t)) (let ((y14ea@ls/false (yd85@syntax-dispatch y14e8@t '(any #(scheme-id =>) any)))) (if y14ea@ls/false (apply (lambda (y14ec@e y14ed@p) (list 'let (list (list 't y14ec@e)) (list 'if 't (cons y14ed@p '(t)) (y14bc@f (car y14b9@cls*) (cdr y14b9@cls*))))) y14ea@ls/false) (let ((y14f0@t y14e8@t)) (let ((y14f2@ls/false (yd85@syntax-dispatch y14f0@t '(any)))) (if y14f2@ls/false (apply (lambda (y14f4@e) (list 'or y14f4@e (y14bc@f (car y14b9@cls*) (cdr y14b9@cls*)))) y14f2@ls/false) (let ((y14f6@t y14f0@t)) (let ((y14f8@ls/false (yd85@syntax-dispatch y14f6@t '(any . each-any)))) (if y14f8@ls/false (apply (lambda (y14fa@e y14fb@e*) (list 'if y14fa@e (cons 'begin y14fb@e*) (y14bc@f (car y14b9@cls*) (cdr y14b9@cls*)))) y14f8@ls/false) (let ((y14fe@t y14f6@t)) (let ((y1500@ls/false (yd85@syntax-dispatch y14fe@t '_))) (if y1500@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid last clause" y14ae@stx)) y1500@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y14fe@t)))))))))))))))))))) y14b2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y14b0@t)))))) (set! y284d@yd69@cond-macro yd69@cond-macro) (set! yd6b@do-include (lambda (y1502@stx y1503@id y1504@filename) (let ((y1508@filename (yb92@stx->datum y1504@filename))) (begin (if (not (and (string? y1508@filename) (yb7e@id? y1503@id))) (ye65@syntax-violation '#f '"invalid syntax" y1502@stx) (void)) (cons (yd3b@bless 'begin) (with-input-from-file y1508@filename (lambda () (let y150c@f ((y150a@ls '())) (let ((y150e@x (y6bb@y58d@read-annotated))) (if (eof-object? y150e@x) (reverse y150a@ls) (y150c@f (cons (yb5e@datum->stx y1503@id y150e@x) y150a@ls)))))))))))) (set! y284e@yd6b@do-include yd6b@do-include) (set! yd6d@include-macro (lambda (y1510@e) (let ((y1512@t y1510@e)) (let ((y1514@ls/false (yd85@syntax-dispatch y1512@t '(any any)))) (if y1514@ls/false (apply (lambda (y1516@id y1517@filename) (yd6b@do-include y1510@e y1516@id y1517@filename)) y1514@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1512@t)))))) (set! y284f@yd6d@include-macro yd6d@include-macro) (set! yd6f@include-into-macro (lambda (y151a@e) (let ((y151c@t y151a@e)) (let ((y151e@ls/false (yd85@syntax-dispatch y151c@t '(_ any any)))) (if y151e@ls/false (apply (lambda (y1520@id y1521@filename) (yd6b@do-include y151a@e y1520@id y1521@filename)) y151e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y151c@t)))))) (set! y2850@yd6f@include-into-macro yd6f@include-into-macro) (set! yd71@syntax-rules-macro (lambda (y1524@e) (let ((y1526@t y1524@e)) (let ((y1528@ls/false (yd85@syntax-dispatch y1526@t '(_ each-any . #(each (any any)))))) (if y1528@ls/false (apply (lambda (y152a@lits y152b@pat* y152c@tmp*) (begin (yd8b@verify-literals y152a@lits y1524@e) (yd3b@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons y152a@lits (map (lambda (y1530@pat y1531@tmp) (let ((y1534@t y1530@pat)) (let ((y1536@ls/false (yd85@syntax-dispatch y1534@t '(_ . any)))) (if y1536@ls/false (apply (lambda (y1538@rest) (list (cons 'g y1538@rest) (list 'syntax y1531@tmp))) y1536@ls/false) (let ((y153a@t y1534@t)) (let ((y153c@ls/false (yd85@syntax-dispatch y153a@t '_))) (if y153c@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid syntax-rules pattern" y1524@e y1530@pat)) y153c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y153a@t)))))))) y152b@pat* y152c@tmp*)))))))) y1528@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1526@t)))))) (set! y2851@yd71@syntax-rules-macro yd71@syntax-rules-macro) (set! yd73@quasiquote-macro (let ((y153f@datum '#f) (y155b@quasicons* '#f) (y155d@quasicons '#f) (y155f@quasiappend '#f) (y1561@quasivector '#f) (y1563@vquasi '#f) (y1565@quasi '#f)) (begin (set! y153f@datum (lambda (y1640@x) (list (yd0d@scheme-stx 'quote) (yb66@mkstx y1640@x '() '() '())))) (set! y155b@quasicons* (lambda (y1638@x y1639@y) (let y163e@f ((y163c@x y1638@x)) (if (null? y163c@x) y1639@y (y155d@quasicons (car y163c@x) (y163e@f (cdr y163c@x))))))) (set! y155d@quasicons (lambda (y1612@x y1613@y) (let ((y1616@t y1613@y)) (let ((y1618@ls/false (yd85@syntax-dispatch y1616@t '(#(scheme-id quote) any)))) (if y1618@ls/false (apply (lambda (y161a@dy) (let ((y161c@t y1612@x)) (let ((y161e@ls/false (yd85@syntax-dispatch y161c@t '(#(scheme-id quote) any)))) (if y161e@ls/false (apply (lambda (y1620@dx) (list (yd0d@scheme-stx 'quote) (cons y1620@dx y161a@dy))) y161e@ls/false) (let ((y1622@t y161c@t)) (let ((y1624@ls/false (yd85@syntax-dispatch y1622@t '_))) (if y1624@ls/false (apply (lambda () (let ((y1626@t y161a@dy)) (let ((y1628@ls/false (yd85@syntax-dispatch y1626@t '()))) (if y1628@ls/false (apply (lambda () (list (yd0d@scheme-stx 'list) y1612@x)) y1628@ls/false) (let ((y162a@t y1626@t)) (let ((y162c@ls/false (yd85@syntax-dispatch y162a@t '_))) (if y162c@ls/false (apply (lambda () (list (yd0d@scheme-stx 'cons) y1612@x y1613@y)) y162c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y162a@t)))))))) y1624@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1622@t)))))))) y1618@ls/false) (let ((y162e@t y1616@t)) (let ((y1630@ls/false (yd85@syntax-dispatch y162e@t '(#(scheme-id list) . each-any)))) (if y1630@ls/false (apply (lambda (y1632@stuff) (cons* (yd0d@scheme-stx 'list) y1612@x y1632@stuff)) y1630@ls/false) (let ((y1634@t y162e@t)) (let ((y1636@ls/false (yd85@syntax-dispatch y1634@t '_))) (if y1636@ls/false (apply (lambda () (list (yd0d@scheme-stx 'cons) y1612@x y1613@y)) y1636@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1634@t)))))))))))) (set! y155f@quasiappend (lambda (y15f8@x y15f9@y) (let ((y15fc@ls (let y1600@f ((y15fe@x y15f8@x)) (if (null? y15fe@x) (let ((y1602@t y15f9@y)) (let ((y1604@ls/false (yd85@syntax-dispatch y1602@t '(#(scheme-id quote) ())))) (if y1604@ls/false (apply (lambda () '()) y1604@ls/false) (let ((y1606@t y1602@t)) (let ((y1608@ls/false (yd85@syntax-dispatch y1606@t '_))) (if y1608@ls/false (apply (lambda () (list y15f9@y)) y1608@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1606@t))))))) (let ((y160a@t (car y15fe@x))) (let ((y160c@ls/false (yd85@syntax-dispatch y160a@t '(#(scheme-id quote) ())))) (if y160c@ls/false (apply (lambda () (y1600@f (cdr y15fe@x))) y160c@ls/false) (let ((y160e@t y160a@t)) (let ((y1610@ls/false (yd85@syntax-dispatch y160e@t '_))) (if y1610@ls/false (apply (lambda () (cons (car y15fe@x) (y1600@f (cdr y15fe@x)))) y1610@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y160e@t))))))))))) (if (null? y15fc@ls) (list (yd0d@scheme-stx 'quote) '()) (if (null? (cdr y15fc@ls)) (car y15fc@ls) (cons* (yd0d@scheme-stx 'append) y15fc@ls)))))) (set! y1561@quasivector (lambda (y15c6@x) (let ((y15c8@pat-x y15c6@x)) (let ((y15ca@t y15c8@pat-x)) (let ((y15cc@ls/false (yd85@syntax-dispatch y15ca@t '(#(scheme-id quote) each-any)))) (if y15cc@ls/false (apply (lambda (y15ce@x*) (list (yd0d@scheme-stx 'quote) (list->vector y15ce@x*))) y15cc@ls/false) (let ((y15d0@t y15ca@t)) (let ((y15d2@ls/false (yd85@syntax-dispatch y15d0@t '_))) (if y15d2@ls/false (apply (lambda () (let y15da@f ((y15d4@x y15c6@x) (y15d5@k (lambda (y15d8@ls) (cons* (yd0d@scheme-stx 'vector) y15d8@ls)))) (let ((y15dc@t y15d4@x)) (let ((y15de@ls/false (yd85@syntax-dispatch y15dc@t '(#(scheme-id quote) each-any)))) (if y15de@ls/false (apply (lambda (y15e0@x*) (y15d5@k (map (lambda (y15e2@x) (list (yd0d@scheme-stx 'quote) y15e2@x)) y15e0@x*))) y15de@ls/false) (let ((y15e4@t y15dc@t)) (let ((y15e6@ls/false (yd85@syntax-dispatch y15e4@t '(#(scheme-id list) . each-any)))) (if y15e6@ls/false (apply (lambda (y15e8@x*) (y15d5@k y15e8@x*)) y15e6@ls/false) (let ((y15ea@t y15e4@t)) (let ((y15ec@ls/false (yd85@syntax-dispatch y15ea@t '(#(scheme-id cons) any any)))) (if y15ec@ls/false (apply (lambda (y15ee@x y15ef@y) (y15da@f y15ef@y (lambda (y15f2@ls) (y15d5@k (cons y15ee@x y15f2@ls))))) y15ec@ls/false) (let ((y15f4@t y15ea@t)) (let ((y15f6@ls/false (yd85@syntax-dispatch y15f4@t '_))) (if y15f6@ls/false (apply (lambda () (list (yd0d@scheme-stx 'list->vector) y15c8@pat-x)) y15f6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y15f4@t))))))))))))))) y15d2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y15d0@t)))))))))) (set! y1563@vquasi (lambda (y15a4@p y15a5@lev) (let ((y15a8@t y15a4@p)) (let ((y15aa@ls/false (yd85@syntax-dispatch y15a8@t '(any . any)))) (if y15aa@ls/false (apply (lambda (y15ac@p y15ad@q) (let ((y15b0@t y15ac@p)) (let ((y15b2@ls/false (yd85@syntax-dispatch y15b0@t '(#(scheme-id unquote) . each-any)))) (if y15b2@ls/false (apply (lambda (y15b4@p) (if (= y15a5@lev '0) (y155b@quasicons* y15b4@p (y1563@vquasi y15ad@q y15a5@lev)) (y155d@quasicons (y155d@quasicons (y153f@datum 'unquote) (y1565@quasi y15b4@p (- y15a5@lev '1))) (y1563@vquasi y15ad@q y15a5@lev)))) y15b2@ls/false) (let ((y15b6@t y15b0@t)) (let ((y15b8@ls/false (yd85@syntax-dispatch y15b6@t '(#(scheme-id unquote-splicing) . each-any)))) (if y15b8@ls/false (apply (lambda (y15ba@p) (if (= y15a5@lev '0) (y155f@quasiappend y15ba@p (y1563@vquasi y15ad@q y15a5@lev)) (y155d@quasicons (y155d@quasicons (y153f@datum 'unquote-splicing) (y1565@quasi y15ba@p (- y15a5@lev '1))) (y1563@vquasi y15ad@q y15a5@lev)))) y15b8@ls/false) (let ((y15bc@t y15b6@t)) (let ((y15be@ls/false (yd85@syntax-dispatch y15bc@t 'any))) (if y15be@ls/false (apply (lambda (y15c0@p) (y155d@quasicons (y1565@quasi y15c0@p y15a5@lev) (y1563@vquasi y15ad@q y15a5@lev))) y15be@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y15bc@t))))))))))) y15aa@ls/false) (let ((y15c2@t y15a8@t)) (let ((y15c4@ls/false (yd85@syntax-dispatch y15c2@t '()))) (if y15c4@ls/false (apply (lambda () (list (yd0d@scheme-stx 'quote) '())) y15c4@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y15c2@t))))))))) (set! y1565@quasi (lambda (y156e@p y156f@lev) (let ((y1572@t y156e@p)) (let ((y1574@ls/false (yd85@syntax-dispatch y1572@t '(#(scheme-id unquote) any)))) (if y1574@ls/false (apply (lambda (y1576@p) (if (= y156f@lev '0) y1576@p (y155d@quasicons (y153f@datum 'unquote) (y1565@quasi (list y1576@p) (- y156f@lev '1))))) y1574@ls/false) (let ((y1578@t y1572@t)) (let ((y157a@ls/false (yd85@syntax-dispatch y1578@t '((#(scheme-id unquote) . each-any) . any)))) (if y157a@ls/false (apply (lambda (y157c@p y157d@q) (if (= y156f@lev '0) (y155b@quasicons* y157c@p (y1565@quasi y157d@q y156f@lev)) (y155d@quasicons (y155d@quasicons (y153f@datum 'unquote) (y1565@quasi y157c@p (- y156f@lev '1))) (y1565@quasi y157d@q y156f@lev)))) y157a@ls/false) (let ((y1580@t y1578@t)) (let ((y1582@ls/false (yd85@syntax-dispatch y1580@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if y1582@ls/false (apply (lambda (y1584@p y1585@q) (if (= y156f@lev '0) (y155f@quasiappend y1584@p (y1565@quasi y1585@q y156f@lev)) (y155d@quasicons (y155d@quasicons (y153f@datum 'unquote-splicing) (y1565@quasi y1584@p (- y156f@lev '1))) (y1565@quasi y1585@q y156f@lev)))) y1582@ls/false) (let ((y1588@t y1580@t)) (let ((y158a@ls/false (yd85@syntax-dispatch y1588@t '(#(scheme-id quasiquote) any)))) (if y158a@ls/false (apply (lambda (y158c@p) (y155d@quasicons (y153f@datum 'quasiquote) (y1565@quasi (list y158c@p) (+ y156f@lev '1)))) y158a@ls/false) (let ((y158e@t y1588@t)) (let ((y1590@ls/false (yd85@syntax-dispatch y158e@t '(any . any)))) (if y1590@ls/false (apply (lambda (y1592@p y1593@q) (y155d@quasicons (y1565@quasi y1592@p y156f@lev) (y1565@quasi y1593@q y156f@lev))) y1590@ls/false) (let ((y1596@t y158e@t)) (let ((y1598@ls/false (yd85@syntax-dispatch y1596@t '#(vector each-any)))) (if (and y1598@ls/false (apply (lambda (y159a@x) (not (yb4a@stx? y159a@x))) y1598@ls/false)) (apply (lambda (y159c@x) (y1561@quasivector (y1563@vquasi y159c@x y156f@lev))) y1598@ls/false) (let ((y159e@t y1596@t)) (let ((y15a0@ls/false (yd85@syntax-dispatch y159e@t 'any))) (if y15a0@ls/false (apply (lambda (y15a2@p) (list (yd0d@scheme-stx 'quote) y15a2@p)) y15a0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y159e@t)))))))))))))))))))))))) (lambda (y1566@x) (let ((y1568@t y1566@x)) (let ((y156a@ls/false (yd85@syntax-dispatch y1568@t '(_ any)))) (if y156a@ls/false (apply (lambda (y156c@e) (y1565@quasi y156c@e '0)) y156a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1568@t)))))))) (set! y2852@yd73@quasiquote-macro yd73@quasiquote-macro) (set! yd75@quasisyntax-macro (let ((y1643@quasi '#f)) (begin (set! y1643@quasi (lambda (y165e@p y165f@lev) (let ((y1662@t y165e@p)) (let ((y1664@ls/false (yd85@syntax-dispatch y1662@t '(#(scheme-id unsyntax) any)))) (if y1664@ls/false (apply (lambda (y1666@p) (if (= y165f@lev '0) (let ((y1668@g (gensym))) (values (list y1668@g) (list y1666@p) y1668@g)) (call-with-values (lambda () (y1643@quasi y1666@p (- y165f@lev '1))) (lambda (y1670@y166b y1671@y166d y1672@y166f) (let ((y1676@p y1672@y166f) (y1677@rhs* y1671@y166d) (y1678@lhs* y1670@y166b)) (values y1678@lhs* y1677@rhs* (list 'unsyntax y1676@p))))))) y1664@ls/false) (let ((y167c@t y1662@t)) (let ((y167e@ls/false (yd85@syntax-dispatch y167c@t '#(scheme-id unsyntax)))) (if (and y167e@ls/false (apply (lambda () (= y165f@lev '0)) y167e@ls/false)) (apply (lambda () (ye65@syntax-violation '#f '"incorrect use of unsyntax" y165e@p)) y167e@ls/false) (let ((y1680@t y167c@t)) (let ((y1682@ls/false (yd85@syntax-dispatch y1680@t '((#(scheme-id unsyntax) . each-any) . any)))) (if y1682@ls/false (apply (lambda (y1684@p* y1685@q) (call-with-values (lambda () (y1643@quasi y1685@q y165f@lev)) (lambda (y168e@y1689 y168f@y168b y1690@y168d) (let ((y1694@q y1690@y168d) (y1695@rhs* y168f@y168b) (y1696@lhs* y168e@y1689)) (if (= y165f@lev '0) (let ((y169a@g* (map (lambda (y169c@x) (gensym)) y1684@p*))) (values (append y169a@g* y1696@lhs*) (append y1684@p* y1695@rhs*) (append y169a@g* y1694@q))) (call-with-values (lambda () (y1643@quasi y1684@p* (- y165f@lev '1))) (lambda (y16a4@y169f y16a5@y16a1 y16a6@y16a3) (let ((y16aa@p* y16a6@y16a3) (y16ab@rhs2* y16a5@y16a1) (y16ac@lhs2* y16a4@y169f)) (values (append y16ac@lhs2* y1696@lhs*) (append y16ab@rhs2* y1695@rhs*) (cons (cons 'unsyntax y16aa@p*) y1694@q)))))))))) y1682@ls/false) (let ((y16b0@t y1680@t)) (let ((y16b2@ls/false (yd85@syntax-dispatch y16b0@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if y16b2@ls/false (apply (lambda (y16b4@p* y16b5@q) (call-with-values (lambda () (y1643@quasi y16b5@q y165f@lev)) (lambda (y16be@y16b9 y16bf@y16bb y16c0@y16bd) (let ((y16c4@q y16c0@y16bd) (y16c5@rhs* y16bf@y16bb) (y16c6@lhs* y16be@y16b9)) (if (= y165f@lev '0) (let ((y16ca@g* (map (lambda (y16cc@x) (gensym)) y16b4@p*))) (values (append (map (lambda (y16ce@g) (cons y16ce@g '(...))) y16ca@g*) y16c6@lhs*) (append y16b4@p* y16c5@rhs*) (append (apply append (map (lambda (y16d0@g) (cons y16d0@g '(...))) y16ca@g*)) y16c4@q))) (call-with-values (lambda () (y1643@quasi y16b4@p* (- y165f@lev '1))) (lambda (y16d8@y16d3 y16d9@y16d5 y16da@y16d7) (let ((y16de@p* y16da@y16d7) (y16df@rhs2* y16d9@y16d5) (y16e0@lhs2* y16d8@y16d3)) (values (append y16e0@lhs2* y16c6@lhs*) (append y16df@rhs2* y16c5@rhs*) (cons (cons 'unsyntax-splicing y16de@p*) y16c4@q)))))))))) y16b2@ls/false) (let ((y16e4@t y16b0@t)) (let ((y16e6@ls/false (yd85@syntax-dispatch y16e4@t '#(scheme-id unsyntax-splicing)))) (if (and y16e6@ls/false (apply (lambda () (= y165f@lev '0)) y16e6@ls/false)) (apply (lambda () (ye65@syntax-violation '#f '"incorrect use of unsyntax-splicing" y165e@p)) y16e6@ls/false) (let ((y16e8@t y16e4@t)) (let ((y16ea@ls/false (yd85@syntax-dispatch y16e8@t '(#(scheme-id quasisyntax) any)))) (if y16ea@ls/false (apply (lambda (y16ec@p) (call-with-values (lambda () (y1643@quasi y16ec@p (+ y165f@lev '1))) (lambda (y16f4@y16ef y16f5@y16f1 y16f6@y16f3) (let ((y16fa@p y16f6@y16f3) (y16fb@rhs* y16f5@y16f1) (y16fc@lhs* y16f4@y16ef)) (values y16fc@lhs* y16fb@rhs* (list 'quasisyntax y16fa@p)))))) y16ea@ls/false) (let ((y1700@t y16e8@t)) (let ((y1702@ls/false (yd85@syntax-dispatch y1700@t '(any . any)))) (if y1702@ls/false (apply (lambda (y1704@p y1705@q) (call-with-values (lambda () (y1643@quasi y1704@p y165f@lev)) (lambda (y1714@y1709 y1715@y170b y1716@y170d) (call-with-values (lambda () (y1643@quasi y1705@q y165f@lev)) (lambda (y171a@y170f y171b@y1711 y171c@y1713) (let ((y1720@q y171c@y1713) (y1721@rhs2* y171b@y1711) (y1722@lhs2* y171a@y170f) (y1723@p y1716@y170d) (y1724@rhs* y1715@y170b) (y1725@lhs* y1714@y1709)) (values (append y1722@lhs2* y1725@lhs*) (append y1721@rhs2* y1724@rhs*) (cons y1723@p y1720@q)))))))) y1702@ls/false) (let ((y172c@t y1700@t)) (let ((y172e@ls/false (yd85@syntax-dispatch y172c@t '#(vector each-any)))) (if y172e@ls/false (apply (lambda (y1730@x*) (call-with-values (lambda () (y1643@quasi y1730@x* y165f@lev)) (lambda (y1738@y1733 y1739@y1735 y173a@y1737) (let ((y173e@x* y173a@y1737) (y173f@rhs* y1739@y1735) (y1740@lhs* y1738@y1733)) (values y1740@lhs* y173f@rhs* (list->vector y173e@x*)))))) y172e@ls/false) (let ((y1744@t y172c@t)) (let ((y1746@ls/false (yd85@syntax-dispatch y1744@t '_))) (if y1746@ls/false (apply (lambda () (values '() '() y165e@p)) y1746@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1744@t)))))))))))))))))))))))))))))) (lambda (y1644@x) (let ((y1646@t y1644@x)) (let ((y1648@ls/false (yd85@syntax-dispatch y1646@t '(_ any)))) (if y1648@ls/false (apply (lambda (y164a@e) (call-with-values (lambda () (y1643@quasi y164a@e '0)) (lambda (y1652@y164d y1653@y164f y1654@y1651) (let ((y1658@v y1654@y1651) (y1659@rhs* y1653@y164f) (y165a@lhs* y1652@y164d)) (yd3b@bless (list 'syntax-case (cons 'list y1659@rhs*) '() (list y165a@lhs* (list 'syntax y1658@v)))))))) y1648@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1646@t)))))))) (set! y2853@yd75@quasisyntax-macro yd75@quasisyntax-macro) (set! yd77@define-struct-macro (lambda (y1748@stx) (ye65@syntax-violation '#f '"define-struct not supported" y1748@stx))) (set! y2854@yd77@define-struct-macro yd77@define-struct-macro) (set! yd79@define-record-type-macro (lambda (y174a@x) (let ((y174d@id '#f) (y174f@get-record-name '#f) (y1751@get-record-constructor-name '#f) (y1753@get-record-predicate-name '#f) (y1755@get-clause '#f) (y1757@foo-rtd-code '#f) (y1759@parent-rtd-code '#f) (y175b@parent-rcd-code '#f) (y175d@foo-rcd-code '#f) (y175f@get-protocol-code '#f) (y1761@get-fields '#f) (y1763@get-mutator-indices '#f) (y1765@get-mutators '#f) (y1767@get-accessors '#f) (y1769@enumerate '#f) (y176b@do-define-record '#f) (y176d@verify-clauses '#f)) (begin (set! y174d@id (lambda (y1940@ctxt . y1942@str*) (ye69@datum->syntax y1940@ctxt (string->symbol (apply string-append (map (lambda (y1944@x) (if (symbol? y1944@x) (symbol->string y1944@x) (if (string? y1944@x) y1944@x (assertion-violation 'define-record-type '"BUG")))) y1942@str*)))))) (set! y174f@get-record-name (lambda (y192e@spec) (let ((y1930@t y192e@spec)) (let ((y1932@ls/false (yd85@syntax-dispatch y1930@t '(any any any)))) (if y1932@ls/false (apply (lambda (y1934@foo y1935@make-foo y1936@foo?) y1934@foo) y1932@ls/false) (let ((y193a@t y1930@t)) (let ((y193c@ls/false (yd85@syntax-dispatch y193a@t 'any))) (if y193c@ls/false (apply (lambda (y193e@foo) y193e@foo) y193c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y193a@t))))))))) (set! y1751@get-record-constructor-name (lambda (y191a@spec) (let ((y191c@t y191a@spec)) (let ((y191e@ls/false (yd85@syntax-dispatch y191c@t '(any any any)))) (if y191e@ls/false (apply (lambda (y1920@foo y1921@make-foo y1922@foo?) y1921@make-foo) y191e@ls/false) (let ((y1926@t y191c@t)) (let ((y1928@ls/false (yd85@syntax-dispatch y1926@t 'any))) (if (and y1928@ls/false (apply (lambda (y192a@foo) (yb7e@id? y192a@foo)) y1928@ls/false)) (apply (lambda (y192c@foo) (y174d@id y192c@foo '"make-" (yb92@stx->datum y192c@foo))) y1928@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1926@t))))))))) (set! y1753@get-record-predicate-name (lambda (y1906@spec) (let ((y1908@t y1906@spec)) (let ((y190a@ls/false (yd85@syntax-dispatch y1908@t '(any any any)))) (if y190a@ls/false (apply (lambda (y190c@foo y190d@make-foo y190e@foo?) y190e@foo?) y190a@ls/false) (let ((y1912@t y1908@t)) (let ((y1914@ls/false (yd85@syntax-dispatch y1912@t 'any))) (if (and y1914@ls/false (apply (lambda (y1916@foo) (yb7e@id? y1916@foo)) y1914@ls/false)) (apply (lambda (y1918@foo) (y174d@id y1918@foo (yb92@stx->datum y1918@foo) '"?")) y1914@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1912@t))))))))) (set! y1755@get-clause (lambda (y18f4@id y18f5@ls) (let ((y18f8@t y18f5@ls)) (let ((y18fa@ls/false (yd85@syntax-dispatch y18f8@t '()))) (if y18fa@ls/false (apply (lambda () '#f) y18fa@ls/false) (let ((y18fc@t y18f8@t)) (let ((y18fe@ls/false (yd85@syntax-dispatch y18fc@t '((any . any) . any)))) (if y18fe@ls/false (apply (lambda (y1900@x y1901@rest y1902@ls) (if (yb84@free-id=? (yd3b@bless y18f4@id) y1900@x) (cons y1900@x y1901@rest) (y1755@get-clause y18f4@id y1902@ls))) y18fe@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y18fc@t))))))))) (set! y1757@foo-rtd-code (lambda (y18a2@name y18a3@clause* y18a4@parent-rtd-code) (let ((y18a9@convert-field-spec* '#f)) (begin (set! y18a9@convert-field-spec* (lambda (y18da@ls) (list->vector (map (lambda (y18dc@x) (let ((y18de@t y18dc@x)) (let ((y18e0@ls/false (yd85@syntax-dispatch y18de@t '(#(scheme-id mutable) any . any)))) (if y18e0@ls/false (apply (lambda (y18e2@name y18e3@rest) (list 'mutable y18e2@name)) y18e0@ls/false) (let ((y18e6@t y18de@t)) (let ((y18e8@ls/false (yd85@syntax-dispatch y18e6@t '(#(scheme-id immutable) any . any)))) (if y18e8@ls/false (apply (lambda (y18ea@name y18eb@rest) (list 'immutable y18ea@name)) y18e8@ls/false) (let ((y18ee@t y18e6@t)) (let ((y18f0@ls/false (yd85@syntax-dispatch y18ee@t 'any))) (if y18f0@ls/false (apply (lambda (y18f2@name) (list 'immutable y18f2@name)) y18f0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y18ee@t))))))))))) y18da@ls)))) (let ((y18aa@uid-code (let ((y18b2@t (y1755@get-clause 'nongenerative y18a3@clause*))) (let ((y18b4@ls/false (yd85@syntax-dispatch y18b2@t '(_)))) (if y18b4@ls/false (apply (lambda () (list 'quote (gensym))) y18b4@ls/false) (let ((y18b6@t y18b2@t)) (let ((y18b8@ls/false (yd85@syntax-dispatch y18b6@t '(_ any)))) (if y18b8@ls/false (apply (lambda (y18ba@uid) (list 'quote y18ba@uid)) y18b8@ls/false) (let ((y18bc@t y18b6@t)) (let ((y18be@ls/false (yd85@syntax-dispatch y18bc@t '_))) (if y18be@ls/false (apply (lambda () '#f) y18be@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y18bc@t))))))))))) (y18ab@sealed? (let ((y18c0@t (y1755@get-clause 'sealed y18a3@clause*))) (let ((y18c2@ls/false (yd85@syntax-dispatch y18c0@t '(_ #(atom #t))))) (if y18c2@ls/false (apply (lambda () '#t) y18c2@ls/false) (let ((y18c4@t y18c0@t)) (let ((y18c6@ls/false (yd85@syntax-dispatch y18c4@t '_))) (if y18c6@ls/false (apply (lambda () '#f) y18c6@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y18c4@t)))))))) (y18ac@opaque? (let ((y18c8@t (y1755@get-clause 'opaque y18a3@clause*))) (let ((y18ca@ls/false (yd85@syntax-dispatch y18c8@t '(_ #(atom #t))))) (if y18ca@ls/false (apply (lambda () '#t) y18ca@ls/false) (let ((y18cc@t y18c8@t)) (let ((y18ce@ls/false (yd85@syntax-dispatch y18cc@t '_))) (if y18ce@ls/false (apply (lambda () '#f) y18ce@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y18cc@t)))))))) (y18ad@fields (let ((y18d0@t (y1755@get-clause 'fields y18a3@clause*))) (let ((y18d2@ls/false (yd85@syntax-dispatch y18d0@t '(_ . each-any)))) (if y18d2@ls/false (apply (lambda (y18d4@field-spec*) (list 'quote (y18a9@convert-field-spec* y18d4@field-spec*))) y18d2@ls/false) (let ((y18d6@t y18d0@t)) (let ((y18d8@ls/false (yd85@syntax-dispatch y18d6@t '_))) (if y18d8@ls/false (apply (lambda () ''#()) y18d8@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y18d6@t))))))))) (yd3b@bless (list 'make-record-type-descriptor (list 'quote y18a2@name) y18a4@parent-rtd-code y18aa@uid-code y18ab@sealed? y18ac@opaque? y18ad@fields))))))) (set! y1759@parent-rtd-code (lambda (y188a@clause*) (let ((y188c@t (y1755@get-clause 'parent y188a@clause*))) (let ((y188e@ls/false (yd85@syntax-dispatch y188c@t '(_ any)))) (if y188e@ls/false (apply (lambda (y1890@name) (list 'record-type-descriptor y1890@name)) y188e@ls/false) (let ((y1892@t y188c@t)) (let ((y1894@ls/false (yd85@syntax-dispatch y1892@t '#(atom #f)))) (if y1894@ls/false (apply (lambda () (let ((y1896@t (y1755@get-clause 'parent-rtd y188a@clause*))) (let ((y1898@ls/false (yd85@syntax-dispatch y1896@t '(_ any any)))) (if y1898@ls/false (apply (lambda (y189a@rtd y189b@rcd) y189a@rtd) y1898@ls/false) (let ((y189e@t y1896@t)) (let ((y18a0@ls/false (yd85@syntax-dispatch y189e@t '#(atom #f)))) (if y18a0@ls/false (apply (lambda () '#f) y18a0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y189e@t)))))))) y1894@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1892@t))))))))) (set! y175b@parent-rcd-code (lambda (y1872@clause*) (let ((y1874@t (y1755@get-clause 'parent y1872@clause*))) (let ((y1876@ls/false (yd85@syntax-dispatch y1874@t '(_ any)))) (if y1876@ls/false (apply (lambda (y1878@name) (list 'record-constructor-descriptor y1878@name)) y1876@ls/false) (let ((y187a@t y1874@t)) (let ((y187c@ls/false (yd85@syntax-dispatch y187a@t '#(atom #f)))) (if y187c@ls/false (apply (lambda () (let ((y187e@t (y1755@get-clause 'parent-rtd y1872@clause*))) (let ((y1880@ls/false (yd85@syntax-dispatch y187e@t '(_ any any)))) (if y1880@ls/false (apply (lambda (y1882@rtd y1883@rcd) y1883@rcd) y1880@ls/false) (let ((y1886@t y187e@t)) (let ((y1888@ls/false (yd85@syntax-dispatch y1886@t '#(atom #f)))) (if y1888@ls/false (apply (lambda () '#f) y1888@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1886@t)))))))) y187c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y187a@t))))))))) (set! y175d@foo-rcd-code (lambda (y186a@clause* y186b@foo-rtd y186c@protocol y186d@parent-rcd-code) (list 'make-record-constructor-descriptor y186b@foo-rtd y186d@parent-rcd-code y186c@protocol))) (set! y175f@get-protocol-code (lambda (y185e@clause*) (let ((y1860@t (y1755@get-clause 'protocol y185e@clause*))) (let ((y1862@ls/false (yd85@syntax-dispatch y1860@t '(_ any)))) (if y1862@ls/false (apply (lambda (y1864@expr) y1864@expr) y1862@ls/false) (let ((y1866@t y1860@t)) (let ((y1868@ls/false (yd85@syntax-dispatch y1866@t '_))) (if y1868@ls/false (apply (lambda () '#f) y1868@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1866@t))))))))) (set! y1761@get-fields (lambda (y184c@clause*) (let ((y184e@t y184c@clause*)) (let ((y1850@ls/false (yd85@syntax-dispatch y184e@t '()))) (if y1850@ls/false (apply (lambda () '()) y1850@ls/false) (let ((y1852@t y184e@t)) (let ((y1854@ls/false (yd85@syntax-dispatch y1852@t '((#(scheme-id fields) . each-any) . _)))) (if y1854@ls/false (apply (lambda (y1856@f*) y1856@f*) y1854@ls/false) (let ((y1858@t y1852@t)) (let ((y185a@ls/false (yd85@syntax-dispatch y1858@t '(_ . any)))) (if y185a@ls/false (apply (lambda (y185c@rest) (y1761@get-fields y185c@rest)) y185a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1858@t)))))))))))) (set! y1763@get-mutator-indices (lambda (y1834@fields) (let y183a@f ((y1836@fields y1834@fields) (y1837@i '0)) (let ((y183c@t y1836@fields)) (let ((y183e@ls/false (yd85@syntax-dispatch y183c@t '()))) (if y183e@ls/false (apply (lambda () '()) y183e@ls/false) (let ((y1840@t y183c@t)) (let ((y1842@ls/false (yd85@syntax-dispatch y1840@t '((#(scheme-id mutable) . _) . any)))) (if y1842@ls/false (apply (lambda (y1844@rest) (cons y1837@i (y183a@f y1844@rest (+ y1837@i '1)))) y1842@ls/false) (let ((y1846@t y1840@t)) (let ((y1848@ls/false (yd85@syntax-dispatch y1846@t '(_ . any)))) (if y1848@ls/false (apply (lambda (y184a@rest) (y183a@f y184a@rest (+ y1837@i '1))) y1848@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1846@t))))))))))))) (set! y1765@get-mutators (lambda (y180a@foo y180b@fields) (let ((y180f@gen-name '#f)) (begin (set! y180f@gen-name (lambda (y1832@x) (ye69@datum->syntax y180a@foo (string->symbol (string-append (symbol->string (ye6b@syntax->datum y180a@foo)) '"-" (symbol->string (ye6b@syntax->datum y1832@x)) '"-set!"))))) (let y1812@f ((y1810@fields y180b@fields)) (let ((y1814@t y1810@fields)) (let ((y1816@ls/false (yd85@syntax-dispatch y1814@t '()))) (if y1816@ls/false (apply (lambda () '()) y1816@ls/false) (let ((y1818@t y1814@t)) (let ((y181a@ls/false (yd85@syntax-dispatch y1818@t '((#(scheme-id mutable) any any any) . any)))) (if y181a@ls/false (apply (lambda (y181c@name y181d@accessor y181e@mutator y181f@rest) (cons y181e@mutator (y1812@f y181f@rest))) y181a@ls/false) (let ((y1824@t y1818@t)) (let ((y1826@ls/false (yd85@syntax-dispatch y1824@t '((#(scheme-id mutable) any) . any)))) (if y1826@ls/false (apply (lambda (y1828@name y1829@rest) (cons (y180f@gen-name y1828@name) (y1812@f y1829@rest))) y1826@ls/false) (let ((y182c@t y1824@t)) (let ((y182e@ls/false (yd85@syntax-dispatch y182c@t '(_ . any)))) (if y182e@ls/false (apply (lambda (y1830@rest) (y1812@f y1830@rest)) y182e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y182c@t)))))))))))))))))) (set! y1767@get-accessors (lambda (y17c6@foo y17c7@fields) (let ((y17cb@gen-name '#f)) (begin (set! y17cb@gen-name (lambda (y1808@x) (ye69@datum->syntax y17c6@foo (string->symbol (string-append (symbol->string (ye6b@syntax->datum y17c6@foo)) '"-" (symbol->string (ye6b@syntax->datum y1808@x))))))) (map (lambda (y17cc@field) (let ((y17ce@t y17cc@field)) (let ((y17d0@ls/false (yd85@syntax-dispatch y17ce@t '(#(scheme-id mutable) any any any)))) (if (and y17d0@ls/false (apply (lambda (y17d2@name y17d3@accessor y17d4@mutator) (yb7e@id? y17d3@accessor)) y17d0@ls/false)) (apply (lambda (y17d8@name y17d9@accessor y17da@mutator) y17d9@accessor) y17d0@ls/false) (let ((y17de@t y17ce@t)) (let ((y17e0@ls/false (yd85@syntax-dispatch y17de@t '(#(scheme-id immutable) any any)))) (if (and y17e0@ls/false (apply (lambda (y17e2@name y17e3@accessor) (yb7e@id? y17e3@accessor)) y17e0@ls/false)) (apply (lambda (y17e6@name y17e7@accessor) y17e7@accessor) y17e0@ls/false) (let ((y17ea@t y17de@t)) (let ((y17ec@ls/false (yd85@syntax-dispatch y17ea@t '(#(scheme-id mutable) any)))) (if (and y17ec@ls/false (apply (lambda (y17ee@name) (yb7e@id? y17ee@name)) y17ec@ls/false)) (apply (lambda (y17f0@name) (y17cb@gen-name y17f0@name)) y17ec@ls/false) (let ((y17f2@t y17ea@t)) (let ((y17f4@ls/false (yd85@syntax-dispatch y17f2@t '(#(scheme-id immutable) any)))) (if (and y17f4@ls/false (apply (lambda (y17f6@name) (yb7e@id? y17f6@name)) y17f4@ls/false)) (apply (lambda (y17f8@name) (y17cb@gen-name y17f8@name)) y17f4@ls/false) (let ((y17fa@t y17f2@t)) (let ((y17fc@ls/false (yd85@syntax-dispatch y17fa@t 'any))) (if (and y17fc@ls/false (apply (lambda (y17fe@name) (yb7e@id? y17fe@name)) y17fc@ls/false)) (apply (lambda (y1800@name) (y17cb@gen-name y1800@name)) y17fc@ls/false) (let ((y1802@t y17fa@t)) (let ((y1804@ls/false (yd85@syntax-dispatch y1802@t 'any))) (if y1804@ls/false (apply (lambda (y1806@others) (ye65@syntax-violation '#f '"invalid field spec" y17cc@field)) y1804@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1802@t)))))))))))))))))))) y17c7@fields))))) (set! y1769@enumerate (lambda (y17be@ls) (let y17c4@f ((y17c0@ls y17be@ls) (y17c1@i '0)) (if (null? y17c0@ls) '() (cons y17c1@i (y17c4@f (cdr y17c0@ls) (+ y17c1@i '1))))))) (set! y176b@do-define-record (lambda (y1796@namespec y1797@clause*) (let ((y179a@foo (y174f@get-record-name y1796@namespec))) (let ((y179c@foo-rtd (gensym))) (let ((y179e@foo-rcd (gensym))) (let ((y17a0@protocol (gensym))) (let ((y17a2@make-foo (y1751@get-record-constructor-name y1796@namespec))) (let ((y17a4@fields (y1761@get-fields y1797@clause*))) (let ((y17a6@idx* (y1769@enumerate y17a4@fields))) (let ((y17a8@foo-x* (y1767@get-accessors y179a@foo y17a4@fields))) (let ((y17aa@set-foo-x!* (y1765@get-mutators y179a@foo y17a4@fields))) (let ((y17ac@set-foo-idx* (y1763@get-mutator-indices y17a4@fields))) (let ((y17ae@foo? (y1753@get-record-predicate-name y1796@namespec))) (let ((y17b0@foo-rtd-code (y1757@foo-rtd-code y179a@foo y1797@clause* (y1759@parent-rtd-code y1797@clause*)))) (let ((y17b2@foo-rcd-code (y175d@foo-rcd-code y1797@clause* y179c@foo-rtd y17a0@protocol (y175b@parent-rcd-code y1797@clause*)))) (let ((y17b4@protocol-code (y175f@get-protocol-code y1797@clause*))) (yd3b@bless (cons 'begin (cons (list 'define y179c@foo-rtd y17b0@foo-rtd-code) (cons (list 'define y17a0@protocol y17b4@protocol-code) (cons (list 'define y179e@foo-rcd y17b2@foo-rcd-code) (cons (list 'define-syntax y179a@foo (list 'list ''$rtd (list 'syntax y179c@foo-rtd) (list 'syntax y179e@foo-rcd))) (cons (list 'define y17ae@foo? (list 'record-predicate y179c@foo-rtd)) (cons (list 'define y17a2@make-foo (list 'record-constructor y179e@foo-rcd)) (append (map (lambda (y17b6@foo-x y17b7@idx) (list 'define y17b6@foo-x (list 'record-accessor y179c@foo-rtd y17b7@idx))) y17a8@foo-x* y17a6@idx*) (map (lambda (y17ba@set-foo-x! y17bb@idx) (list 'define y17ba@set-foo-x! (list 'record-mutator y179c@foo-rtd y17bb@idx))) y17aa@set-foo-x!* y17ac@set-foo-idx*)))))))))))))))))))))))))) (set! y176d@verify-clauses (lambda (y1776@x y1777@cls*) (let ((y177b@valid-kwds '#f) (y177d@free-id-member? '#f)) (begin (set! y177b@valid-kwds (map yd3b@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! y177d@free-id-member? (lambda (y1792@x y1793@ls) (and (pair? y1793@ls) (or (yb84@free-id=? y1792@x (car y1793@ls)) (y177d@free-id-member? y1792@x (cdr y1793@ls)))))) (let y1782@f ((y177e@cls* y1777@cls*) (y177f@seen* '())) (if (not (null? y177e@cls*)) (let ((y1784@t (car y177e@cls*))) (let ((y1786@ls/false (yd85@syntax-dispatch y1784@t '(any . any)))) (if y1786@ls/false (apply (lambda (y1788@kwd y1789@rest) (if (or (not (yb7e@id? y1788@kwd)) (not (y177d@free-id-member? y1788@kwd y177b@valid-kwds))) (ye65@syntax-violation '#f '"not a valid define-record-type keyword" y1788@kwd) (if (yb8a@bound-id-member? y1788@kwd y177f@seen*) (ye65@syntax-violation '#f '"duplicate use of keyword " y1776@x y1788@kwd) (y1782@f (cdr y177e@cls*) (cons y1788@kwd y177f@seen*))))) y1786@ls/false) (let ((y178c@t y1784@t)) (let ((y178e@ls/false (yd85@syntax-dispatch y178c@t 'any))) (if y178e@ls/false (apply (lambda (y1790@cls) (ye65@syntax-violation '#f '"malformed define-record-type clause" y1790@cls)) y178e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y178c@t))))))) (void))))))) (let ((y176e@t y174a@x)) (let ((y1770@ls/false (yd85@syntax-dispatch y176e@t '(_ any . each-any)))) (if y1770@ls/false (apply (lambda (y1772@namespec y1773@clause*) (begin (y176d@verify-clauses y174a@x y1773@clause*) (y176b@do-define-record y1772@namespec y1773@clause*))) y1770@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y176e@t)))))))) (set! y2855@yd79@define-record-type-macro yd79@define-record-type-macro) (set! yd7b@define-condition-type-macro (lambda (y1946@x) (let ((y1949@mkname '#f)) (begin (set! y1949@mkname (lambda (y1976@name y1977@suffix) (ye69@datum->syntax y1976@name (string->symbol (string-append (symbol->string (ye6b@syntax->datum y1976@name)) y1977@suffix))))) (let ((y194a@t y1946@x)) (let ((y194c@ls/false (yd85@syntax-dispatch y194a@t '(any any any any any . #(each (any any)))))) (if (and y194c@ls/false (apply (lambda (y194e@ctxt y194f@name y1950@super y1951@constructor y1952@predicate y1953@field* y1954@accessor*) (and (yb7e@id? y194f@name) (yb7e@id? y1950@super) (yb7e@id? y1951@constructor) (yb7e@id? y1952@predicate) (for-all yb7e@id? y1953@field*) (for-all yb7e@id? y1954@accessor*))) y194c@ls/false)) (apply (lambda (y195c@ctxt y195d@name y195e@super y195f@constructor y1960@predicate y1961@field* y1962@accessor*) (let ((y196a@aux-accessor* (map (lambda (y196c@x) (gensym)) y1962@accessor*))) (yd3b@bless (cons 'begin (cons (cons 'define-record-type (cons (list y195d@name y195f@constructor (gensym)) (cons (list 'parent y195e@super) (cons (cons 'fields (map (lambda (y196e@field y196f@aux) (list 'immutable y196e@field y196f@aux)) y1961@field* y196a@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define y1960@predicate (list 'condition-predicate (list 'record-type-descriptor y195d@name))) (map (lambda (y1972@accessor y1973@aux) (list 'define y1972@accessor (list 'condition-accessor (list 'record-type-descriptor y195d@name) y1973@aux))) y1962@accessor* y196a@aux-accessor*))))))) y194c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y194a@t)))))))) (set! y2856@yd7b@define-condition-type-macro yd7b@define-condition-type-macro) (set! yd7d@incorrect-usage-macro (lambda (y197a@e) (ye65@syntax-violation '#f '"incorrect usage of auxiliary keyword" y197a@e))) (set! y2857@yd7d@incorrect-usage-macro yd7d@incorrect-usage-macro) (set! yd7f@parameterize-macro (lambda (y197c@e) (let ((y197e@t y197c@e)) (let ((y1980@ls/false (yd85@syntax-dispatch y197e@t '(_ () any . each-any)))) (if y1980@ls/false (apply (lambda (y1982@b y1983@b*) (yd3b@bless (cons 'let (cons '() (cons y1982@b y1983@b*))))) y1980@ls/false) (let ((y1986@t y197e@t)) (let ((y1988@ls/false (yd85@syntax-dispatch y1986@t '(_ #(each (any any)) any . each-any)))) (if y1988@ls/false (apply (lambda (y198a@olhs* y198b@orhs* y198c@b y198d@b*) (let ((y1992@lhs* (ye53@generate-temporaries y198a@olhs*)) (y1993@rhs* (ye53@generate-temporaries y198b@orhs*))) (yd3b@bless (cons (list 'lambda (append y1992@lhs* y1993@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (y1996@lhs y1997@rhs) (list 'let (list (list 't (list y1996@lhs))) (list y1996@lhs y1997@rhs) (cons 'set! (cons y1997@rhs '(t))))) y1992@lhs* y1993@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons y198c@b y198d@b*))) '(swap)))))) (append y198a@olhs* y198b@orhs*))))) y1988@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1986@t))))))))) (set! y2858@yd7f@parameterize-macro yd7f@parameterize-macro) (set! yd81@foreign-call-transformer (lambda (y199a@e y199b@r y199c@mr) (let ((y19a0@t y199a@e)) (let ((y19a2@ls/false (yd85@syntax-dispatch y19a0@t '(_ any . each-any)))) (if y19a2@ls/false (apply (lambda (y19a4@name y19a5@arg*) (cons 'foreign-call (cons (yda7@chi-expr y19a4@name y199b@r y199c@mr) (yda3@chi-expr* y19a5@arg* y199b@r y199c@mr)))) y19a2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y19a0@t)))))) (set! y2859@yd81@foreign-call-transformer yd81@foreign-call-transformer) (set! yd83@convert-pattern (lambda (y19a8@pattern y19a9@keys) (let ((y19ad@cvt* '#f) (y19af@cvt '#f)) (begin (set! y19ad@cvt* (lambda (y1a4c@p* y1a4d@n y1a4e@ids) (if (null? y1a4c@p*) (values '() y1a4e@ids) (call-with-values (lambda () (y19ad@cvt* (cdr y1a4c@p*) y1a4d@n y1a4e@ids)) (lambda (y1a56@y1a53 y1a57@y1a55) (let ((y1a5a@ids y1a57@y1a55) (y1a5b@y y1a56@y1a53)) (call-with-values (lambda () (y19af@cvt (car y1a4c@p*) y1a4d@n y1a5a@ids)) (lambda (y1a62@y1a5f y1a63@y1a61) (let ((y1a66@ids y1a63@y1a61) (y1a67@x y1a62@y1a5f)) (values (cons y1a67@x y1a5b@y) y1a66@ids)))))))))) (set! y19af@cvt (lambda (y19b0@p y19b1@n y19b2@ids) (let ((y19b6@t y19b0@p)) (let ((y19b8@ls/false (yd85@syntax-dispatch y19b6@t 'any))) (if (and y19b8@ls/false (apply (lambda (y19ba@id) (yb7e@id? y19ba@id)) y19b8@ls/false)) (apply (lambda (y19bc@id) (if (yb8a@bound-id-member? y19b0@p y19a9@keys) (values (vector 'free-id y19b0@p) y19b2@ids) (if (yb84@free-id=? y19b0@p (yd0d@scheme-stx '_)) (values '_ y19b2@ids) (values 'any (cons (cons y19b0@p y19b1@n) y19b2@ids))))) y19b8@ls/false) (let ((y19be@t y19b6@t)) (let ((y19c0@ls/false (yd85@syntax-dispatch y19be@t '(any any)))) (if (and y19c0@ls/false (apply (lambda (y19c2@p y19c3@dots) (yd87@ellipsis? y19c3@dots)) y19c0@ls/false)) (apply (lambda (y19c6@p y19c7@dots) (call-with-values (lambda () (y19af@cvt y19c6@p (+ y19b1@n '1) y19b2@ids)) (lambda (y19ce@y19cb y19cf@y19cd) (let ((y19d2@ids y19cf@y19cd) (y19d3@p y19ce@y19cb)) (values (if (eq? y19d3@p 'any) 'each-any (vector 'each y19d3@p)) y19d2@ids))))) y19c0@ls/false) (let ((y19d6@t y19be@t)) (let ((y19d8@ls/false (yd85@syntax-dispatch y19d6@t '(any any . #(each+ any () any))))) (if (and y19d8@ls/false (apply (lambda (y19da@x y19db@dots y19dc@ys y19dd@z) (yd87@ellipsis? y19db@dots)) y19d8@ls/false)) (apply (lambda (y19e2@x y19e3@dots y19e4@ys y19e5@z) (call-with-values (lambda () (y19af@cvt y19e5@z y19b1@n y19b2@ids)) (lambda (y19ee@y19eb y19ef@y19ed) (let ((y19f2@ids y19ef@y19ed) (y19f3@z y19ee@y19eb)) (call-with-values (lambda () (y19ad@cvt* y19e4@ys y19b1@n y19f2@ids)) (lambda (y19fa@y19f7 y19fb@y19f9) (let ((y19fe@ids y19fb@y19f9) (y19ff@ys y19fa@y19f7)) (call-with-values (lambda () (y19af@cvt y19e2@x (+ y19b1@n '1) y19fe@ids)) (lambda (y1a06@y1a03 y1a07@y1a05) (let ((y1a0a@ids y1a07@y1a05) (y1a0b@x y1a06@y1a03)) (values (vector 'each+ y1a0b@x (reverse y19ff@ys) y19f3@z) y1a0a@ids))))))))))) y19d8@ls/false) (let ((y1a0e@t y19d6@t)) (let ((y1a10@ls/false (yd85@syntax-dispatch y1a0e@t '(any . any)))) (if y1a10@ls/false (apply (lambda (y1a12@x y1a13@y) (call-with-values (lambda () (y19af@cvt y1a13@y y19b1@n y19b2@ids)) (lambda (y1a1a@y1a17 y1a1b@y1a19) (let ((y1a1e@ids y1a1b@y1a19) (y1a1f@y y1a1a@y1a17)) (call-with-values (lambda () (y19af@cvt y1a12@x y19b1@n y1a1e@ids)) (lambda (y1a26@y1a23 y1a27@y1a25) (let ((y1a2a@ids y1a27@y1a25) (y1a2b@x y1a26@y1a23)) (values (cons y1a2b@x y1a1f@y) y1a2a@ids)))))))) y1a10@ls/false) (let ((y1a2e@t y1a0e@t)) (let ((y1a30@ls/false (yd85@syntax-dispatch y1a2e@t '()))) (if y1a30@ls/false (apply (lambda () (values '() y19b2@ids)) y1a30@ls/false) (let ((y1a32@t y1a2e@t)) (let ((y1a34@ls/false (yd85@syntax-dispatch y1a32@t '#(vector each-any)))) (if (and y1a34@ls/false (apply (lambda (y1a36@p) (not (yb4a@stx? y1a36@p))) y1a34@ls/false)) (apply (lambda (y1a38@p) (call-with-values (lambda () (y19af@cvt y1a38@p y19b1@n y19b2@ids)) (lambda (y1a3e@y1a3b y1a3f@y1a3d) (let ((y1a42@ids y1a3f@y1a3d) (y1a43@p y1a3e@y1a3b)) (values (vector 'vector y1a43@p) y1a42@ids))))) y1a34@ls/false) (let ((y1a46@t y1a32@t)) (let ((y1a48@ls/false (yd85@syntax-dispatch y1a46@t 'any))) (if y1a48@ls/false (apply (lambda (y1a4a@datum) (values (vector 'atom (yb92@stx->datum y1a4a@datum)) y19b2@ids)) y1a48@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1a46@t)))))))))))))))))))))))) (y19af@cvt y19a8@pattern '0 '()))))) (set! y285a@yd83@convert-pattern yd83@convert-pattern) (set! yd85@syntax-dispatch (let ((y1a6b@stx^ '#f) (y1a6d@match-each '#f) (y1a6f@match-each+ '#f) (y1a71@match-each-any '#f) (y1a73@match-empty '#f) (y1a75@combine '#f) (y1a77@match* '#f) (y1a79@match '#f)) (begin (set! y1a6b@stx^ (lambda (y1b46@e y1b47@m* y1b48@s* y1b49@ae*) (if (and (null? y1b47@m*) (null? y1b48@s*) (null? y1b49@ae*)) y1b46@e (yb66@mkstx y1b46@e y1b47@m* y1b48@s* y1b49@ae*)))) (set! y1a6d@match-each (lambda (y1b26@e y1b27@p y1b28@m* y1b29@s* y1b2a@ae*) (if (pair? y1b26@e) (let ((y1b30@first (y1a79@match (car y1b26@e) y1b27@p y1b28@m* y1b29@s* y1b2a@ae* '()))) (and y1b30@first (let ((y1b32@rest (y1a6d@match-each (cdr y1b26@e) y1b27@p y1b28@m* y1b29@s* y1b2a@ae*))) (and y1b32@rest (cons y1b30@first y1b32@rest))))) (if (null? y1b26@e) '() (if (yb4a@stx? y1b26@e) (and (not (yb04@top-marked? y1b28@m*)) (call-with-values (lambda () (join-wraps y1b28@m* y1b29@s* y1b2a@ae* y1b26@e)) (lambda (y1b3a@y1b35 y1b3b@y1b37 y1b3c@y1b39) (let ((y1b40@ae* y1b3c@y1b39) (y1b41@s* y1b3b@y1b37) (y1b42@m* y1b3a@y1b35)) (y1a6d@match-each (yb4c@stx-expr y1b26@e) y1b27@p y1b42@m* y1b41@s* y1b40@ae*))))) (if (y6bd@y591@annotation? y1b26@e) (y1a6d@match-each (y6bf@y595@annotation-expression y1b26@e) y1b27@p y1b28@m* y1b29@s* y1b2a@ae*) '#f)))))) (set! y1a6f@match-each+ (lambda (y1ae6@e y1ae7@x-pat y1ae8@y-pat y1ae9@z-pat y1aea@m* y1aeb@s* y1aec@ae* y1aed@r) (let y1afe@f ((y1af6@e y1ae6@e) (y1af7@m* y1aea@m*) (y1af8@s* y1aeb@s*) (y1af9@ae* y1aec@ae*)) (if (pair? y1af6@e) (call-with-values (lambda () (y1afe@f (cdr y1af6@e) y1af7@m* y1af8@s* y1af9@ae*)) (lambda (y1b06@y1b01 y1b07@y1b03 y1b08@y1b05) (let ((y1b0c@r y1b08@y1b05) (y1b0d@y-pat y1b07@y1b03) (y1b0e@xr* y1b06@y1b01)) (if y1b0c@r (if (null? y1b0d@y-pat) (let ((y1b12@xr (y1a79@match (car y1af6@e) y1ae7@x-pat y1af7@m* y1af8@s* y1af9@ae* '()))) (if y1b12@xr (values (cons y1b12@xr y1b0e@xr*) y1b0d@y-pat y1b0c@r) (values '#f '#f '#f))) (values '() (cdr y1b0d@y-pat) (y1a79@match (car y1af6@e) (car y1b0d@y-pat) y1af7@m* y1af8@s* y1af9@ae* y1b0c@r))) (values '#f '#f '#f))))) (if (yb4a@stx? y1af6@e) (if (yb04@top-marked? y1af7@m*) (values '() y1ae8@y-pat (y1a79@match y1af6@e y1ae9@z-pat y1af7@m* y1af8@s* y1af9@ae* y1aed@r)) (call-with-values (lambda () (join-wraps y1af7@m* y1af8@s* y1af9@ae* y1af6@e)) (lambda (y1b1a@y1b15 y1b1b@y1b17 y1b1c@y1b19) (let ((y1b20@ae* y1b1c@y1b19) (y1b21@s* y1b1b@y1b17) (y1b22@m* y1b1a@y1b15)) (y1afe@f (yb4c@stx-expr y1af6@e) y1b22@m* y1b21@s* y1b20@ae*))))) (if (y6bd@y591@annotation? y1af6@e) (y1afe@f (y6bf@y595@annotation-expression y1af6@e) y1af7@m* y1af8@s* y1af9@ae*) (values '() y1ae8@y-pat (y1a79@match y1af6@e y1ae9@z-pat y1af7@m* y1af8@s* y1af9@ae* y1aed@r)))))))) (set! y1a71@match-each-any (lambda (y1aca@e y1acb@m* y1acc@s* y1acd@ae*) (if (pair? y1aca@e) (let ((y1ad2@l (y1a71@match-each-any (cdr y1aca@e) y1acb@m* y1acc@s* y1acd@ae*))) (and y1ad2@l (cons (y1a6b@stx^ (car y1aca@e) y1acb@m* y1acc@s* y1acd@ae*) y1ad2@l))) (if (null? y1aca@e) '() (if (yb4a@stx? y1aca@e) (and (not (yb04@top-marked? y1acb@m*)) (call-with-values (lambda () (join-wraps y1acb@m* y1acc@s* y1acd@ae* y1aca@e)) (lambda (y1ada@y1ad5 y1adb@y1ad7 y1adc@y1ad9) (let ((y1ae0@ae* y1adc@y1ad9) (y1ae1@s* y1adb@y1ad7) (y1ae2@m* y1ada@y1ad5)) (y1a71@match-each-any (yb4c@stx-expr y1aca@e) y1ae2@m* y1ae1@s* y1ae0@ae*))))) (if (y6bd@y591@annotation? y1aca@e) (y1a71@match-each-any (y6bf@y595@annotation-expression y1aca@e) y1acb@m* y1acc@s* y1acd@ae*) '#f)))))) (set! y1a73@match-empty (lambda (y1ac4@p y1ac5@r) (if (null? y1ac4@p) y1ac5@r (if (eq? y1ac4@p '_) y1ac5@r (if (eq? y1ac4@p 'any) (cons '() y1ac5@r) (if (pair? y1ac4@p) (y1a73@match-empty (car y1ac4@p) (y1a73@match-empty (cdr y1ac4@p) y1ac5@r)) (if (eq? y1ac4@p 'each-any) (cons '() y1ac5@r) (let ((y1ac8@t (vector-ref y1ac4@p '0))) (if (memv y1ac8@t '(each)) (y1a73@match-empty (vector-ref y1ac4@p '1) y1ac5@r) (if (memv y1ac8@t '(each+)) (y1a73@match-empty (vector-ref y1ac4@p '1) (y1a73@match-empty (reverse (vector-ref y1ac4@p '2)) (y1a73@match-empty (vector-ref y1ac4@p '3) y1ac5@r))) (if (memv y1ac8@t '(free-id atom)) y1ac5@r (if (memv y1ac8@t '(scheme-id atom)) y1ac5@r (if (memv y1ac8@t '(vector)) (y1a73@match-empty (vector-ref y1ac4@p '1) y1ac5@r) (assertion-violation 'syntax-dispatch '"invalid pattern" y1ac4@p)))))))))))))) (set! y1a75@combine (lambda (y1ac0@r* y1ac1@r) (if (null? (car y1ac0@r*)) y1ac1@r (cons (map car y1ac0@r*) (y1a75@combine (map cdr y1ac0@r*) y1ac1@r))))) (set! y1a77@match* (lambda (y1a9c@e y1a9d@p y1a9e@m* y1a9f@s* y1aa0@ae* y1aa1@r) (if (null? y1a9d@p) (and (null? y1a9c@e) y1aa1@r) (if (pair? y1a9d@p) (and (pair? y1a9c@e) (y1a79@match (car y1a9c@e) (car y1a9d@p) y1a9e@m* y1a9f@s* y1aa0@ae* (y1a79@match (cdr y1a9c@e) (cdr y1a9d@p) y1a9e@m* y1a9f@s* y1aa0@ae* y1aa1@r))) (if (eq? y1a9d@p 'each-any) (let ((y1aa8@l (y1a71@match-each-any y1a9c@e y1a9e@m* y1a9f@s* y1aa0@ae*))) (and y1aa8@l (cons y1aa8@l y1aa1@r))) (let ((y1aaa@t (vector-ref y1a9d@p '0))) (if (memv y1aaa@t '(each)) (if (null? y1a9c@e) (y1a73@match-empty (vector-ref y1a9d@p '1) y1aa1@r) (let ((y1aac@r* (y1a6d@match-each y1a9c@e (vector-ref y1a9d@p '1) y1a9e@m* y1a9f@s* y1aa0@ae*))) (and y1aac@r* (y1a75@combine y1aac@r* y1aa1@r)))) (if (memv y1aaa@t '(free-id)) (and (symbol? y1a9c@e) (yb04@top-marked? y1a9e@m*) (yb84@free-id=? (y1a6b@stx^ y1a9c@e y1a9e@m* y1a9f@s* y1aa0@ae*) (vector-ref y1a9d@p '1)) y1aa1@r) (if (memv y1aaa@t '(scheme-id)) (and (symbol? y1a9c@e) (yb04@top-marked? y1a9e@m*) (yb84@free-id=? (y1a6b@stx^ y1a9c@e y1a9e@m* y1a9f@s* y1aa0@ae*) (yd0d@scheme-stx (vector-ref y1a9d@p '1))) y1aa1@r) (if (memv y1aaa@t '(each+)) (call-with-values (lambda () (y1a6f@match-each+ y1a9c@e (vector-ref y1a9d@p '1) (vector-ref y1a9d@p '2) (vector-ref y1a9d@p '3) y1a9e@m* y1a9f@s* y1aa0@ae* y1aa1@r)) (lambda (y1ab4@y1aaf y1ab5@y1ab1 y1ab6@y1ab3) (let ((y1aba@r y1ab6@y1ab3) (y1abb@y-pat y1ab5@y1ab1) (y1abc@xr* y1ab4@y1aaf)) (and y1aba@r (null? y1abb@y-pat) (if (null? y1abc@xr*) (y1a73@match-empty (vector-ref y1a9d@p '1) y1aba@r) (y1a75@combine y1abc@xr* y1aba@r)))))) (if (memv y1aaa@t '(atom)) (and (fast-equal? (vector-ref y1a9d@p '1) (yb90@strip y1a9c@e y1a9e@m*)) y1aa1@r) (if (memv y1aaa@t '(vector)) (and (vector? y1a9c@e) (y1a79@match (vector->list y1a9c@e) (vector-ref y1a9d@p '1) y1a9e@m* y1a9f@s* y1aa0@ae* y1aa1@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" y1a9d@p))))))))))))) (set! y1a79@match (lambda (y1a7e@e y1a7f@p y1a80@m* y1a81@s* y1a82@ae* y1a83@r) (if (not y1a83@r) '#f (if (eq? y1a7f@p '_) y1a83@r (if (eq? y1a7f@p 'any) (cons (y1a6b@stx^ y1a7e@e y1a80@m* y1a81@s* y1a82@ae*) y1a83@r) (if (yb4a@stx? y1a7e@e) (and (not (yb04@top-marked? y1a80@m*)) (call-with-values (lambda () (join-wraps y1a80@m* y1a81@s* y1a82@ae* y1a7e@e)) (lambda (y1a90@y1a8b y1a91@y1a8d y1a92@y1a8f) (let ((y1a96@ae* y1a92@y1a8f) (y1a97@s* y1a91@y1a8d) (y1a98@m* y1a90@y1a8b)) (y1a79@match (yb4c@stx-expr y1a7e@e) y1a7f@p y1a98@m* y1a97@s* y1a96@ae* y1a83@r))))) (if (y6bd@y591@annotation? y1a7e@e) (y1a79@match (y6bf@y595@annotation-expression y1a7e@e) y1a7f@p y1a80@m* y1a81@s* y1a82@ae* y1a83@r) (y1a77@match* y1a7e@e y1a7f@p y1a80@m* y1a81@s* y1a82@ae* y1a83@r)))))))) (lambda (y1a7a@e y1a7b@p) (y1a79@match y1a7a@e y1a7b@p '() '() '() '()))))) (set! y285b@yd85@syntax-dispatch yd85@syntax-dispatch) (set! yd87@ellipsis? (lambda (y1b4e@x) (and (yb7e@id? y1b4e@x) (yb84@free-id=? y1b4e@x (yd0d@scheme-stx '...))))) (set! y285c@yd87@ellipsis? yd87@ellipsis?) (set! yd89@underscore? (lambda (y1b50@x) (and (yb7e@id? y1b50@x) (yb84@free-id=? y1b50@x (yd0d@scheme-stx '_))))) (set! y285d@yd89@underscore? yd89@underscore?) (set! yd8b@verify-literals (lambda (y1b52@lits y1b53@expr) (for-each (lambda (y1b56@x) (if (or (not (yb7e@id? y1b56@x)) (yd87@ellipsis? y1b56@x) (yd89@underscore? y1b56@x)) (ye65@syntax-violation '#f '"invalid literal" y1b53@expr y1b56@x) (void))) y1b52@lits))) (set! y285e@yd8b@verify-literals yd8b@verify-literals) (set! yd8d@syntax-case-transformer (let ((y1b59@build-dispatch-call '#f) (y1b5b@invalid-ids-error '#f) (y1b5d@gen-clause '#f) (y1b5f@gen-syntax-case '#f)) (begin (set! y1b59@build-dispatch-call (lambda (y1bca@pvars y1bcb@expr y1bcc@y y1bcd@r y1bce@mr) (let ((y1bd4@ids (map car y1bca@pvars)) (y1bd5@levels (map cdr y1bca@pvars))) (let ((y1bd8@labels (map yb0a@gen-label y1bd4@ids)) (y1bd9@new-vars (map yb06@gen-lexical y1bd4@ids))) (let ((y1bdc@body (yda7@chi-expr (yb6a@add-subst (yb3e@make-full-rib y1bd4@ids y1bd8@labels) y1bcb@expr) (append (map (lambda (y1bde@label y1bdf@var y1be0@level) (cons y1bde@label (yb98@make-binding 'syntax (cons y1bdf@var y1be0@level)))) y1bd8@labels y1bd9@new-vars (map cdr y1bca@pvars)) y1bcd@r) y1bce@mr))) (list '(primitive apply) (yae1@ya0d@build-lambda '#f y1bd9@new-vars y1bdc@body) y1bcc@y)))))) (set! y1b5b@invalid-ids-error (lambda (y1bbe@id* y1bbf@e y1bc0@class) (let y1bc8@find ((y1bc4@id* y1bbe@id*) (y1bc5@ok* '())) (if (null? y1bc4@id*) (ye65@syntax-violation '#f '"invalid syntax" y1bbf@e) (if (yb7e@id? (car y1bc4@id*)) (if (yb8a@bound-id-member? (car y1bc4@id*) y1bc5@ok*) (ye61@syntax-error (car y1bc4@id*) '"duplicate " y1bc0@class) (y1bc8@find (cdr y1bc4@id*) (cons (car y1bc4@id*) y1bc5@ok*))) (ye61@syntax-error (car y1bc4@id*) '"invalid " y1bc0@class)))))) (set! y1b5d@gen-clause (lambda (y1b96@x y1b97@keys y1b98@clauses y1b99@r y1b9a@mr y1b9b@pat y1b9c@fender y1b9d@expr) (call-with-values (lambda () (yd83@convert-pattern y1b9b@pat y1b97@keys)) (lambda (y1baa@y1ba7 y1bab@y1ba9) (let ((y1bae@pvars y1bab@y1ba9) (y1baf@p y1baa@y1ba7)) (if (not (yb88@distinct-bound-ids? (map car y1bae@pvars))) (y1b5b@invalid-ids-error (map car y1bae@pvars) y1b9b@pat '"pattern variable") (if (not (for-all (lambda (y1bb2@x) (not (yd87@ellipsis? (car y1bb2@x)))) y1bae@pvars)) (ye65@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" y1b9b@pat) (let ((y1bb4@y (yb06@gen-lexical 'tmp))) (let ((y1bb6@test (if (eq? y1b9c@fender '#t) y1bb4@y (let ((y1bb8@call (y1b59@build-dispatch-call y1bae@pvars y1b9c@fender y1bb4@y y1b99@r y1b9a@mr))) (list 'if y1bb4@y y1bb8@call (list 'quote '#f)))))) (let ((y1bba@conseq (y1b59@build-dispatch-call y1bae@pvars y1b9d@expr y1bb4@y y1b99@r y1b9a@mr))) (let ((y1bbc@altern (y1b5f@gen-syntax-case y1b96@x y1b97@keys y1b98@clauses y1b99@r y1b9a@mr))) (list (yae1@ya0d@build-lambda '#f (list y1bb4@y) (list 'if y1bb6@test y1bba@conseq y1bbc@altern)) (list '(primitive syntax-dispatch) y1b96@x (list 'quote y1baf@p)))))))))))))) (set! y1b5f@gen-syntax-case (lambda (y1b74@x y1b75@keys y1b76@clauses y1b77@r y1b78@mr) (if (null? y1b76@clauses) (list '(primitive syntax-error) y1b74@x) (let ((y1b7e@t (car y1b76@clauses))) (let ((y1b80@ls/false (yd85@syntax-dispatch y1b7e@t '(any any)))) (if y1b80@ls/false (apply (lambda (y1b82@pat y1b83@expr) (if (and (yb7e@id? y1b82@pat) (not (yb8a@bound-id-member? y1b82@pat y1b75@keys)) (not (yd87@ellipsis? y1b82@pat))) (if (yb84@free-id=? y1b82@pat (yd0d@scheme-stx '_)) (yda7@chi-expr y1b83@expr y1b77@r y1b78@mr) (let ((y1b86@lab (yb0a@gen-label y1b82@pat)) (y1b87@lex (yb06@gen-lexical y1b82@pat))) (let ((y1b8a@body (yda7@chi-expr (yb6a@add-subst (yb3e@make-full-rib (list y1b82@pat) (list y1b86@lab)) y1b83@expr) (cons (cons y1b86@lab (yb98@make-binding 'syntax (cons y1b87@lex '0))) y1b77@r) y1b78@mr))) (list (yae1@ya0d@build-lambda '#f (list y1b87@lex) y1b8a@body) y1b74@x)))) (y1b5d@gen-clause y1b74@x y1b75@keys (cdr y1b76@clauses) y1b77@r y1b78@mr y1b82@pat '#t y1b83@expr))) y1b80@ls/false) (let ((y1b8c@t y1b7e@t)) (let ((y1b8e@ls/false (yd85@syntax-dispatch y1b8c@t '(any any any)))) (if y1b8e@ls/false (apply (lambda (y1b90@pat y1b91@fender y1b92@expr) (y1b5d@gen-clause y1b74@x y1b75@keys (cdr y1b76@clauses) y1b77@r y1b78@mr y1b90@pat y1b91@fender y1b92@expr)) y1b8e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1b8c@t)))))))))) (lambda (y1b60@e y1b61@r y1b62@mr) (let ((y1b66@t y1b60@e)) (let ((y1b68@ls/false (yd85@syntax-dispatch y1b66@t '(_ any each-any . each-any)))) (if y1b68@ls/false (apply (lambda (y1b6a@expr y1b6b@keys y1b6c@clauses) (begin (yd8b@verify-literals y1b6b@keys y1b60@e) (let ((y1b70@x (yb06@gen-lexical 'tmp))) (let ((y1b72@body (y1b5f@gen-syntax-case y1b70@x y1b6b@keys y1b6c@clauses y1b61@r y1b62@mr))) (list (yae1@ya0d@build-lambda '#f (list y1b70@x) y1b72@body) (yda7@chi-expr y1b6a@expr y1b61@r y1b62@mr)))))) y1b68@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1b66@t)))))))) (set! y285f@yd8d@syntax-case-transformer yd8d@syntax-case-transformer) (set! yd8f@ellipsis-map (lambda (y1be4@proc y1be5@ls . y1be8@ls*) (let ((y1beb@who '#f)) (begin (set! y1beb@who '...) (begin (if (not (list? y1be5@ls)) (assertion-violation y1beb@who '"not a list" y1be5@ls) (void)) (if (not (null? y1be8@ls*)) (let ((y1bec@n (length y1be5@ls))) (for-each (lambda (y1bee@x) (begin (if (not (list? y1bee@x)) (assertion-violation y1beb@who '"not a list" y1bee@x) (void)) (if (not (= (length y1bee@x) y1bec@n)) (assertion-violation y1beb@who '"length mismatch" y1be5@ls y1bee@x) (void)))) y1be8@ls*)) (void)) (apply map y1be4@proc y1be5@ls y1be8@ls*)))))) (set! y2860@yd8f@ellipsis-map yd8f@ellipsis-map) (set! yd91@syntax-transformer (let ((y1bf1@gen-syntax '#f) (y1bf3@gen-ref '#f) (y1bf5@gen-append '#f) (y1bf7@gen-mappend '#f) (y1bf9@gen-map '#f) (y1bfb@gen-cons '#f) (y1bfd@gen-vector '#f) (y1bff@regen '#f)) (begin (set! y1bf1@gen-syntax (lambda (y1c68@src y1c69@e y1c6a@r y1c6b@maps y1c6c@ellipsis? y1c6d@vec?) (let ((y1c74@t y1c69@e)) (let ((y1c76@ls/false (yd85@syntax-dispatch y1c74@t 'any))) (if (and y1c76@ls/false (apply (lambda (y1c78@dots) (y1c6c@ellipsis? y1c78@dots)) y1c76@ls/false)) (apply (lambda (y1c7a@dots) (ye65@syntax-violation '#f '"misplaced ellipsis in syntax form" y1c68@src)) y1c76@ls/false) (let ((y1c7c@t y1c74@t)) (let ((y1c7e@ls/false (yd85@syntax-dispatch y1c7c@t 'any))) (if (and y1c7e@ls/false (apply (lambda (y1c80@id) (yb7e@id? y1c80@id)) y1c7e@ls/false)) (apply (lambda (y1c82@id) (let ((y1c84@label (yb94@id->label y1c69@e))) (let ((y1c86@b (yb96@label->binding y1c84@label y1c6a@r))) (if (eq? (yb9a@binding-type y1c86@b) 'syntax) (call-with-values (lambda () (let ((y1c8c@var.lev (yb9c@binding-value y1c86@b))) (y1bf3@gen-ref y1c68@src (car y1c8c@var.lev) (cdr y1c8c@var.lev) y1c6b@maps))) (lambda (y1c8e@y1c89 y1c8f@y1c8b) (let ((y1c92@maps y1c8f@y1c8b) (y1c93@var y1c8e@y1c89)) (values (list 'ref y1c93@var) y1c92@maps)))) (values (list 'quote y1c69@e) y1c6b@maps))))) y1c7e@ls/false) (let ((y1c96@t y1c7c@t)) (let ((y1c98@ls/false (yd85@syntax-dispatch y1c96@t '(any any)))) (if (and y1c98@ls/false (apply (lambda (y1c9a@dots y1c9b@e) (y1c6c@ellipsis? y1c9a@dots)) y1c98@ls/false)) (apply (lambda (y1c9e@dots y1c9f@e) (if y1c6d@vec? (ye65@syntax-violation '#f '"misplaced ellipsis in syntax form" y1c68@src) (y1bf1@gen-syntax y1c68@src y1c9f@e y1c6a@r y1c6b@maps (lambda (y1ca2@x) '#f) '#f))) y1c98@ls/false) (let ((y1ca4@t y1c96@t)) (let ((y1ca6@ls/false (yd85@syntax-dispatch y1ca4@t '(any any . any)))) (if (and y1ca6@ls/false (apply (lambda (y1ca8@x y1ca9@dots y1caa@y) (y1c6c@ellipsis? y1ca9@dots)) y1ca6@ls/false)) (apply (lambda (y1cae@x y1caf@dots y1cb0@y) (let y1cc6@f ((y1cb4@y y1cb0@y) (y1cb5@k (lambda (y1cb8@maps) (call-with-values (lambda () (y1bf1@gen-syntax y1c68@src y1cae@x y1c6a@r (cons '() y1cb8@maps) y1c6c@ellipsis? '#f)) (lambda (y1cbe@y1cbb y1cbf@y1cbd) (let ((y1cc2@maps y1cbf@y1cbd) (y1cc3@x y1cbe@y1cbb)) (if (null? (car y1cc2@maps)) (ye65@syntax-violation '#f '"extra ellipsis in syntax form" y1c68@src) (values (y1bf9@gen-map y1cc3@x (car y1cc2@maps)) (cdr y1cc2@maps))))))))) (let ((y1cc8@t y1cb4@y)) (let ((y1cca@ls/false (yd85@syntax-dispatch y1cc8@t '()))) (if y1cca@ls/false (apply (lambda () (y1cb5@k y1c6b@maps)) y1cca@ls/false) (let ((y1ccc@t y1cc8@t)) (let ((y1cce@ls/false (yd85@syntax-dispatch y1ccc@t '(any . any)))) (if (and y1cce@ls/false (apply (lambda (y1cd0@dots y1cd1@y) (y1c6c@ellipsis? y1cd0@dots)) y1cce@ls/false)) (apply (lambda (y1cd4@dots y1cd5@y) (y1cc6@f y1cd5@y (lambda (y1cd8@maps) (call-with-values (lambda () (y1cb5@k (cons '() y1cd8@maps))) (lambda (y1cde@y1cdb y1cdf@y1cdd) (let ((y1ce2@maps y1cdf@y1cdd) (y1ce3@x y1cde@y1cdb)) (if (null? (car y1ce2@maps)) (ye65@syntax-violation '#f '"extra ellipsis in syntax form" y1c68@src) (values (y1bf7@gen-mappend y1ce3@x (car y1ce2@maps)) (cdr y1ce2@maps))))))))) y1cce@ls/false) (let ((y1ce6@t y1ccc@t)) (let ((y1ce8@ls/false (yd85@syntax-dispatch y1ce6@t '_))) (if y1ce8@ls/false (apply (lambda () (call-with-values (lambda () (y1bf1@gen-syntax y1c68@src y1cb4@y y1c6a@r y1c6b@maps y1c6c@ellipsis? y1c6d@vec?)) (lambda (y1cee@y1ceb y1cef@y1ced) (let ((y1cf2@maps y1cef@y1ced) (y1cf3@y y1cee@y1ceb)) (call-with-values (lambda () (y1cb5@k y1cf2@maps)) (lambda (y1cfa@y1cf7 y1cfb@y1cf9) (let ((y1cfe@maps y1cfb@y1cf9) (y1cff@x y1cfa@y1cf7)) (values (y1bf5@gen-append y1cff@x y1cf3@y) y1cfe@maps)))))))) y1ce8@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1ce6@t)))))))))))) y1ca6@ls/false) (let ((y1d02@t y1ca4@t)) (let ((y1d04@ls/false (yd85@syntax-dispatch y1d02@t '(any . any)))) (if y1d04@ls/false (apply (lambda (y1d06@x y1d07@y) (call-with-values (lambda () (y1bf1@gen-syntax y1c68@src y1d06@x y1c6a@r y1c6b@maps y1c6c@ellipsis? '#f)) (lambda (y1d0e@y1d0b y1d0f@y1d0d) (let ((y1d12@maps y1d0f@y1d0d) (y1d13@xnew y1d0e@y1d0b)) (call-with-values (lambda () (y1bf1@gen-syntax y1c68@src y1d07@y y1c6a@r y1d12@maps y1c6c@ellipsis? y1c6d@vec?)) (lambda (y1d1a@y1d17 y1d1b@y1d19) (let ((y1d1e@maps y1d1b@y1d19) (y1d1f@ynew y1d1a@y1d17)) (values (y1bfb@gen-cons y1c69@e y1d06@x y1d07@y y1d13@xnew y1d1f@ynew) y1d1e@maps)))))))) y1d04@ls/false) (let ((y1d22@t y1d02@t)) (let ((y1d24@ls/false (yd85@syntax-dispatch y1d22@t '#(vector each-any)))) (if y1d24@ls/false (apply (lambda (y1d26@ls) (call-with-values (lambda () (y1bf1@gen-syntax y1c68@src y1d26@ls y1c6a@r y1c6b@maps y1c6c@ellipsis? '#t)) (lambda (y1d2c@y1d29 y1d2d@y1d2b) (let ((y1d30@maps y1d2d@y1d2b) (y1d31@lsnew y1d2c@y1d29)) (values (y1bfd@gen-vector y1c69@e y1d26@ls y1d31@lsnew) y1d30@maps))))) y1d24@ls/false) (let ((y1d34@t y1d22@t)) (let ((y1d36@ls/false (yd85@syntax-dispatch y1d34@t '_))) (if y1d36@ls/false (apply (lambda () (values (list 'quote y1c69@e) y1c6b@maps)) y1d36@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1d34@t)))))))))))))))))))))))) (set! y1bf3@gen-ref (lambda (y1c4e@src y1c4f@var y1c50@level y1c51@maps) (if (= y1c50@level '0) (values y1c4f@var y1c51@maps) (if (null? y1c51@maps) (ye65@syntax-violation '#f '"missing ellipsis in syntax form" y1c4e@src) (call-with-values (lambda () (y1bf3@gen-ref y1c4e@src y1c4f@var (- y1c50@level '1) (cdr y1c51@maps))) (lambda (y1c5a@y1c57 y1c5b@y1c59) (let ((y1c5e@outer-maps y1c5b@y1c59) (y1c5f@outer-var y1c5a@y1c57)) (let ((y1c62@t (assq y1c5f@outer-var (car y1c51@maps)))) (if y1c62@t ((lambda (y1c64@b) (values (cdr y1c64@b) y1c51@maps)) y1c62@t) (let ((y1c66@inner-var (yb06@gen-lexical 'tmp))) (values y1c66@inner-var (cons (cons (cons y1c5f@outer-var y1c66@inner-var) (car y1c51@maps)) y1c5e@outer-maps)))))))))))) (set! y1bf5@gen-append (lambda (y1c4a@x y1c4b@y) (if (fast-equal? y1c4b@y ''()) y1c4a@x (list 'append y1c4a@x y1c4b@y)))) (set! y1bf7@gen-mappend (lambda (y1c46@e y1c47@map-env) (list 'apply '(primitive append) (y1bf9@gen-map y1c46@e y1c47@map-env)))) (set! y1bf9@gen-map (lambda (y1c34@e y1c35@map-env) (let ((y1c38@formals (map cdr y1c35@map-env)) (y1c39@actuals (map (lambda (y1c3c@x) (list 'ref (car y1c3c@x))) y1c35@map-env))) (if (eq? (car y1c34@e) 'ref) (car y1c39@actuals) (if (for-all (lambda (y1c3e@x) (and (eq? (car y1c3e@x) 'ref) (memq (cadr y1c3e@x) y1c38@formals))) (cdr y1c34@e)) (let ((y1c40@args (map (let ((y1c42@r (map cons y1c38@formals y1c39@actuals))) (lambda (y1c44@x) (cdr (assq (cadr y1c44@x) y1c42@r)))) (cdr y1c34@e)))) (cons 'map (cons (list 'primitive (car y1c34@e)) y1c40@args))) (cons* 'map (list 'lambda y1c38@formals y1c34@e) y1c39@actuals)))))) (set! y1bfb@gen-cons (lambda (y1c24@e y1c25@x y1c26@y y1c27@xnew y1c28@ynew) (let ((y1c2e@t (car y1c28@ynew))) (if (memv y1c2e@t '(quote)) (if (eq? (car y1c27@xnew) 'quote) (let ((y1c30@xnew (cadr y1c27@xnew)) (y1c31@ynew (cadr y1c28@ynew))) (if (and (eq? y1c30@xnew y1c25@x) (eq? y1c31@ynew y1c26@y)) (list 'quote y1c24@e) (list 'quote (cons y1c30@xnew y1c31@ynew)))) (if (null? (cadr y1c28@ynew)) (list 'list y1c27@xnew) (list 'cons y1c27@xnew y1c28@ynew))) (if (memv y1c2e@t '(list)) (cons 'list (cons y1c27@xnew (cdr y1c28@ynew))) (list 'cons y1c27@xnew y1c28@ynew)))))) (set! y1bfd@gen-vector (lambda (y1c1e@e y1c1f@ls y1c20@lsnew) (if (eq? (car y1c20@lsnew) 'quote) (if (eq? (cadr y1c20@lsnew) y1c1f@ls) (list 'quote y1c1e@e) (list 'quote (list->vector (cadr y1c20@lsnew)))) (if (eq? (car y1c20@lsnew) 'list) (cons 'vector (cdr y1c20@lsnew)) (list 'list->vector y1c20@lsnew))))) (set! y1bff@regen (lambda (y1c18@x) (let ((y1c1a@t (car y1c18@x))) (if (memv y1c1a@t '(ref)) (cadr y1c18@x) (if (memv y1c1a@t '(primitive)) (list 'primitive (cadr y1c18@x)) (if (memv y1c1a@t '(quote)) (list 'quote (cadr y1c18@x)) (if (memv y1c1a@t '(lambda)) (yae1@ya0d@build-lambda '#f (cadr y1c18@x) (y1bff@regen (caddr y1c18@x))) (if (memv y1c1a@t '(map)) (let ((y1c1c@ls (map y1bff@regen (cdr y1c18@x)))) (cons '(primitive ellipsis-map) y1c1c@ls)) (cons (list 'primitive (car y1c18@x)) (map y1bff@regen (cdr y1c18@x))))))))))) (lambda (y1c00@e y1c01@r y1c02@mr) (let ((y1c06@t y1c00@e)) (let ((y1c08@ls/false (yd85@syntax-dispatch y1c06@t '(_ any)))) (if y1c08@ls/false (apply (lambda (y1c0a@x) (call-with-values (lambda () (y1bf1@gen-syntax y1c00@e y1c0a@x y1c01@r '() yd87@ellipsis? '#f)) (lambda (y1c10@y1c0d y1c11@y1c0f) (let ((y1c14@maps y1c11@y1c0f) (y1c15@e y1c10@y1c0d)) (y1bff@regen y1c15@e))))) y1c08@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1c06@t)))))))) (set! y2861@yd91@syntax-transformer yd91@syntax-transformer) (set! yd93@core-macro-transformer (lambda (y1d38@name) (let ((y1d3a@t y1d38@name)) (if (memv y1d3a@t '(quote)) yd35@quote-transformer (if (memv y1d3a@t '(lambda)) yd39@lambda-transformer (if (memv y1d3a@t '(case-lambda)) yd37@case-lambda-transformer (if (memv y1d3a@t '(letrec)) yd1d@letrec-transformer (if (memv y1d3a@t '(letrec*)) yd1f@letrec*-transformer (if (memv y1d3a@t '(let)) yd1b@let-transformer (if (memv y1d3a@t '(if)) yd2d@if-transformer (if (memv y1d3a@t '(and)) yd2f@and-transformer (if (memv y1d3a@t '(or)) yd31@or-transformer (if (memv y1d3a@t '(foreign-call)) yd81@foreign-call-transformer (if (memv y1d3a@t '(syntax-case)) yd8d@syntax-case-transformer (if (memv y1d3a@t '(syntax)) yd91@syntax-transformer (if (memv y1d3a@t '(type-descriptor)) yd23@type-descriptor-transformer (if (memv y1d3a@t '(record-type-descriptor)) yd25@record-type-descriptor-transformer (if (memv y1d3a@t '(record-constructor-descriptor)) yd27@record-constructor-descriptor-transformer (if (memv y1d3a@t '(fluid-let-syntax)) yd21@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" y1d38@name)))))))))))))))))))) (set! y2862@yd93@core-macro-transformer yd93@core-macro-transformer) (set! yd95@symbol-macro (lambda (y1d3c@x y1d3d@set) (let ((y1d40@t y1d3c@x)) (let ((y1d42@ls/false (yd85@syntax-dispatch y1d40@t '(_ any)))) (if (and y1d42@ls/false (apply (lambda (y1d44@name) (and (yb7e@id? y1d44@name) (memq (yb80@id->sym y1d44@name) y1d3d@set))) y1d42@ls/false)) (apply (lambda (y1d46@name) (yd3b@bless (list 'quote y1d46@name))) y1d42@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1d40@t)))))) (set! y2863@yd95@symbol-macro yd95@symbol-macro) (set! yd97@macro-transformer (lambda (y1d48@x) (if (procedure? y1d48@x) y1d48@x (if (symbol? y1d48@x) (let ((y1d4a@t y1d48@x)) (if (memv y1d4a@t '(define-record-type)) yd79@define-record-type-macro (if (memv y1d4a@t '(define-struct)) yd77@define-struct-macro (if (memv y1d4a@t '(include)) yd6d@include-macro (if (memv y1d4a@t '(cond)) yd69@cond-macro (if (memv y1d4a@t '(let)) yd41@let-macro (if (memv y1d4a@t '(do)) yd61@do-macro (if (memv y1d4a@t '(or)) yd65@or-macro (if (memv y1d4a@t '(and)) yd67@and-macro (if (memv y1d4a@t '(let*)) yd63@let*-macro (if (memv y1d4a@t '(let-values)) yd43@let-values-macro (if (memv y1d4a@t '(let*-values)) yd45@let*-values-macro (if (memv y1d4a@t '(syntax-rules)) yd71@syntax-rules-macro (if (memv y1d4a@t '(quasiquote)) yd73@quasiquote-macro (if (memv y1d4a@t '(quasisyntax)) yd75@quasisyntax-macro (if (memv y1d4a@t '(with-syntax)) yd3d@with-syntax-macro (if (memv y1d4a@t '(when)) yd29@when-macro (if (memv y1d4a@t '(unless)) yd2b@unless-macro (if (memv y1d4a@t '(case)) yd33@case-macro (if (memv y1d4a@t '(identifier-syntax)) yd5f@identifier-syntax-macro (if (memv y1d4a@t '(time)) yd57@time-macro (if (memv y1d4a@t '(delay)) yd59@delay-macro (if (memv y1d4a@t '(assert)) yd5b@assert-macro (if (memv y1d4a@t '(endianness)) yd5d@endianness-macro (if (memv y1d4a@t '(guard)) yd53@guard-macro (if (memv y1d4a@t '(define-enumeration)) yd55@define-enumeration-macro (if (memv y1d4a@t '(trace-lambda)) yd47@trace-lambda-macro (if (memv y1d4a@t '(trace-define)) yd49@trace-define-macro (if (memv y1d4a@t '(trace-define-syntax)) yd4b@trace-define-syntax-macro (if (memv y1d4a@t '(trace-let-syntax)) yd4f@trace-let-syntax-macro (if (memv y1d4a@t '(trace-letrec-syntax)) yd51@trace-letrec-syntax-macro (if (memv y1d4a@t '(define-condition-type)) yd7b@define-condition-type-macro (if (memv y1d4a@t '(parameterize)) yd7f@parameterize-macro (if (memv y1d4a@t '(include-into)) yd6f@include-into-macro (if (memv y1d4a@t '(eol-style)) (lambda (y1d4c@x) (yd95@symbol-macro y1d4c@x '(none lf cr crlf nel crnel ls))) (if (memv y1d4a@t '(error-handling-mode)) (lambda (y1d4e@x) (yd95@symbol-macro y1d4e@x '(ignore raise replace))) (if (memv y1d4a@t '(buffer-mode)) (lambda (y1d50@x) (yd95@symbol-macro y1d50@x '(none line block))) (if (memv y1d4a@t '(file-options)) yaf9@file-options-macro (if (memv y1d4a@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) yd7d@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" y1d48@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" y1d48@x))))) (set! y2864@yd97@macro-transformer yd97@macro-transformer) (set! yd99@local-macro-transformer (lambda (y1d52@x) (car y1d52@x))) (set! y2865@yd99@local-macro-transformer yd99@local-macro-transformer) (set! yd9b@do-macro-call (lambda (y1d54@transformer y1d55@expr) (let ((y1d58@out (y1d54@transformer (yb68@add-mark yb62@anti-mark y1d55@expr '#f)))) (begin (let y1d5c@f ((y1d5a@x y1d58@out)) (if (not (yb4a@stx? y1d5a@x)) (if (pair? y1d5a@x) (begin (y1d5c@f (car y1d5a@x)) (y1d5c@f (cdr y1d5a@x))) (if (vector? y1d5a@x) (vector-for-each y1d5c@f y1d5a@x) (if (symbol? y1d5a@x) (ye65@syntax-violation '#f '"raw symbol encountered in output of macro" y1d55@expr y1d5a@x) (void)))) (void))) (yb68@add-mark (yb60@gen-mark) y1d58@out y1d55@expr))))) (set! y2866@yd9b@do-macro-call yd9b@do-macro-call) (set! yd9d@chi-macro (lambda (y1d5e@p y1d5f@e) (yd9b@do-macro-call (yd97@macro-transformer y1d5e@p) y1d5f@e))) (set! y2867@yd9d@chi-macro yd9d@chi-macro) (set! yd9f@chi-local-macro (lambda (y1d62@p y1d63@e) (yd9b@do-macro-call (yd99@local-macro-transformer y1d62@p) y1d63@e))) (set! y2868@yd9f@chi-local-macro yd9f@chi-local-macro) (set! yda1@chi-global-macro (lambda (y1d66@p y1d67@e) (let ((y1d6a@lib (car y1d66@p)) (y1d6b@loc (cdr y1d66@p))) (begin (y995@y7e4@visit-library y1d6a@lib) (let ((y1d6e@x (symbol-value y1d6b@loc))) (let ((y1d70@transformer (if (procedure? y1d6e@x) y1d6e@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" y1d6e@x)))) (yd9b@do-macro-call y1d70@transformer y1d67@e))))))) (set! y2869@yda1@chi-global-macro yda1@chi-global-macro) (set! yda3@chi-expr* (lambda (y1d72@e* y1d73@r y1d74@mr) (if (null? y1d72@e*) '() (let ((y1d78@e (yda7@chi-expr (car y1d72@e*) y1d73@r y1d74@mr))) (cons y1d78@e (yda3@chi-expr* (cdr y1d72@e*) y1d73@r y1d74@mr)))))) (set! y286a@yda3@chi-expr* yda3@chi-expr*) (set! yda5@chi-application (lambda (y1d7a@e y1d7b@r y1d7c@mr) (let ((y1d80@t y1d7a@e)) (let ((y1d82@ls/false (yd85@syntax-dispatch y1d80@t '(any . each-any)))) (if y1d82@ls/false (apply (lambda (y1d84@rator y1d85@rands) (let ((y1d88@rator (yda7@chi-expr y1d84@rator y1d7b@r y1d7c@mr))) (cons y1d88@rator (yda3@chi-expr* y1d85@rands y1d7b@r y1d7c@mr)))) y1d82@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1d80@t)))))) (set! y286b@yda5@chi-application yda5@chi-application) (set! yda7@chi-expr (lambda (y1d8a@e y1d8b@r y1d8c@mr) (call-with-values (lambda () (yba0@syntax-type y1d8a@e y1d8b@r)) (lambda (y1d96@y1d91 y1d97@y1d93 y1d98@y1d95) (let ((y1d9c@kwd y1d98@y1d95) (y1d9d@value y1d97@y1d93) (y1d9e@type y1d96@y1d91)) (let ((y1da2@t y1d9e@type)) (if (memv y1da2@t '(core-macro)) (let ((y1da4@transformer (yd93@core-macro-transformer y1d9d@value))) (y1da4@transformer y1d8a@e y1d8b@r y1d8c@mr)) (if (memv y1da2@t '(global)) (let ((y1da6@lib (car y1d9d@value))) (let ((y1da8@loc (cdr y1d9d@value))) (begin ((yded@inv-collector) y1da6@lib) y1da8@loc))) (if (memv y1da2@t '(core-prim)) (let ((y1daa@name y1d9d@value)) (list 'primitive y1daa@name)) (if (memv y1da2@t '(call)) (yda5@chi-application y1d8a@e y1d8b@r y1d8c@mr) (if (memv y1da2@t '(lexical)) (let ((y1dac@lex (yd0f@lexical-var y1d9d@value))) y1dac@lex) (if (memv y1da2@t '(global-macro global-macro!)) (yda7@chi-expr (yda1@chi-global-macro y1d9d@value y1d8a@e) y1d8b@r y1d8c@mr) (if (memv y1da2@t '(local-macro local-macro!)) (yda7@chi-expr (yd9f@chi-local-macro y1d9d@value y1d8a@e) y1d8b@r y1d8c@mr) (if (memv y1da2@t '(macro macro!)) (yda7@chi-expr (yd9d@chi-macro y1d9d@value y1d8a@e) y1d8b@r y1d8c@mr) (if (memv y1da2@t '(constant)) (let ((y1dae@datum y1d9d@value)) (list 'quote y1dae@datum)) (if (memv y1da2@t '(set!)) (yda9@chi-set! y1d8a@e y1d8b@r y1d8c@mr) (if (memv y1da2@t '(begin)) (let ((y1db0@t y1d8a@e)) (let ((y1db2@ls/false (yd85@syntax-dispatch y1db0@t '(_ any . each-any)))) (if y1db2@ls/false (apply (lambda (y1db4@x y1db5@x*) (yae3@ya3d@build-sequence '#f (yda3@chi-expr* (cons y1db4@x y1db5@x*) y1d8b@r y1d8c@mr))) y1db2@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1db0@t)))) (if (memv y1da2@t '(let-syntax letrec-syntax)) (let ((y1db8@t y1d8a@e)) (let ((y1dba@ls/false (yd85@syntax-dispatch y1db8@t '(_ #(each (any any)) any . each-any)))) (if (and y1dba@ls/false (apply (lambda (y1dbc@xlhs* y1dbd@xrhs* y1dbe@xbody y1dbf@xbody*) (if (not (yb86@valid-bound-ids? y1dbc@xlhs*)) (ye65@syntax-violation '#f '"invalid identifiers" y1d8a@e) (void))) y1dba@ls/false)) (apply (lambda (y1dc4@xlhs* y1dc5@xrhs* y1dc6@xbody y1dc7@xbody*) (let ((y1dcc@xlab* (map yb0a@gen-label y1dc4@xlhs*))) (let ((y1dce@xrib (yb3e@make-full-rib y1dc4@xlhs* y1dcc@xlab*))) (let ((y1dd0@xb* (map (lambda (y1dd2@x) (ybb6@make-eval-transformer (yddf@expand-transformer (if (eq? y1d9e@type 'let-syntax) y1dd2@x (yb6a@add-subst y1dce@xrib y1dd2@x)) y1d8c@mr))) y1dc5@xrhs*))) (yae3@ya3d@build-sequence '#f (yda3@chi-expr* (map (lambda (y1dd4@x) (yb6a@add-subst y1dce@xrib y1dd4@x)) (cons y1dc6@xbody y1dc7@xbody*)) (append (map cons y1dcc@xlab* y1dd0@xb*) y1d8b@r) (append (map cons y1dcc@xlab* y1dd0@xb*) y1d8c@mr))))))) y1dba@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1db8@t)))) (if (memv y1da2@t '(displaced-lexical)) (ye65@syntax-violation '#f '"identifier out of context" y1d8a@e) (if (memv y1da2@t '(syntax)) (ye65@syntax-violation '#f '"reference to pattern variable outside a syntax form" y1d8a@e) (if (memv y1da2@t '(define define-syntax module import library)) (ye65@syntax-violation '#f (string-append (let ((y1dd6@t y1d9e@type)) (if (memv y1dd6@t '(define)) '"a definition" (if (memv y1dd6@t '(define-syntax)) '"a define-syntax" (if (memv y1dd6@t '(module)) '"a module definition" (if (memv y1dd6@t '(library)) '"a library definition" (if (memv y1dd6@t '(import)) '"an import declaration" (if (memv y1dd6@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") y1d8a@e) (if (memv y1da2@t '(mutable)) (ye65@syntax-violation '#f '"attempt to reference an unexportable variable" y1d8a@e) (ye65@syntax-violation '#f '"invalid expression" y1d8a@e))))))))))))))))))))))) (set! y286c@yda7@chi-expr yda7@chi-expr) (set! yda9@chi-set! (lambda (y1dd8@e y1dd9@r y1dda@mr) (let ((y1dde@t y1dd8@e)) (let ((y1de0@ls/false (yd85@syntax-dispatch y1dde@t '(_ any any)))) (if (and y1de0@ls/false (apply (lambda (y1de2@x y1de3@v) (yb7e@id? y1de2@x)) y1de0@ls/false)) (apply (lambda (y1de6@x y1de7@v) (call-with-values (lambda () (yba0@syntax-type y1de6@x y1dd9@r)) (lambda (y1df0@y1deb y1df1@y1ded y1df2@y1def) (let ((y1df6@kwd y1df2@y1def) (y1df7@value y1df1@y1ded) (y1df8@type y1df0@y1deb)) (let ((y1dfc@t y1df8@type)) (if (memv y1dfc@t '(lexical)) (begin (yd13@set-lexical-mutable! y1df7@value '#t) (list 'set! (yd0f@lexical-var y1df7@value) (yda7@chi-expr y1de7@v y1dd9@r y1dda@mr))) (if (memv y1dfc@t '(core-prim)) (ye65@syntax-violation '#f '"cannot modify imported core primitive" y1dd8@e) (if (memv y1dfc@t '(global)) (ye65@syntax-violation '#f '"attempt to modify imported binding" y1dd8@e) (if (memv y1dfc@t '(global-macro!)) (yda7@chi-expr (yda1@chi-global-macro y1df7@value y1dd8@e) y1dd9@r y1dda@mr) (if (memv y1dfc@t '(local-macro!)) (yda7@chi-expr (yd9f@chi-local-macro y1df7@value y1dd8@e) y1dd9@r y1dda@mr) (if (memv y1dfc@t '(mutable)) (ye65@syntax-violation '#f '"attempt to assign to an unexportable variable" y1dd8@e) (ye65@syntax-violation '#f '"invalid syntax" y1dd8@e)))))))))))) y1de0@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1dde@t)))))) (set! y286d@yda9@chi-set! yda9@chi-set!) (set! ydab@verify-formals (lambda (y1dfe@fmls y1dff@stx) (let ((y1e02@t y1dfe@fmls)) (let ((y1e04@ls/false (yd85@syntax-dispatch y1e02@t 'each-any))) (if y1e04@ls/false (apply (lambda (y1e06@x*) (if (not (yb86@valid-bound-ids? y1e06@x*)) (yd3f@invalid-fmls-error y1dff@stx y1dfe@fmls) (void))) y1e04@ls/false) (let ((y1e08@t y1e02@t)) (let ((y1e0a@ls/false (yd85@syntax-dispatch y1e08@t '#(each+ any () any)))) (if y1e0a@ls/false (apply (lambda (y1e0c@x* y1e0d@x) (if (not (yb86@valid-bound-ids? (cons y1e0d@x y1e0c@x*))) (yd3f@invalid-fmls-error y1dff@stx y1dfe@fmls) (void))) y1e0a@ls/false) (let ((y1e10@t y1e08@t)) (let ((y1e12@ls/false (yd85@syntax-dispatch y1e10@t '_))) (if y1e12@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid syntax" y1dff@stx)) y1e12@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1e10@t)))))))))))) (set! y286e@ydab@verify-formals ydab@verify-formals) (set! ydad@chi-lambda-clause (lambda (y1e14@stx y1e15@fmls y1e16@body* y1e17@r y1e18@mr) (let ((y1e1e@t y1e15@fmls)) (let ((y1e20@ls/false (yd85@syntax-dispatch y1e1e@t 'each-any))) (if y1e20@ls/false (apply (lambda (y1e22@x*) (begin (ydab@verify-formals y1e15@fmls y1e14@stx) (let ((y1e24@lex* (map yb06@gen-lexical y1e22@x*)) (y1e25@lab* (map yb0a@gen-label y1e22@x*))) (values y1e24@lex* (ydbd@chi-internal (yb6a@add-subst (yb3e@make-full-rib y1e22@x* y1e25@lab*) y1e16@body*) (yd17@add-lexicals y1e25@lab* y1e24@lex* y1e17@r) y1e18@mr))))) y1e20@ls/false) (let ((y1e28@t y1e1e@t)) (let ((y1e2a@ls/false (yd85@syntax-dispatch y1e28@t '#(each+ any () any)))) (if y1e2a@ls/false (apply (lambda (y1e2c@x* y1e2d@x) (begin (ydab@verify-formals y1e15@fmls y1e14@stx) (let ((y1e30@lex* (map yb06@gen-lexical y1e2c@x*)) (y1e31@lab* (map yb0a@gen-label y1e2c@x*)) (y1e32@lex (yb06@gen-lexical y1e2d@x)) (y1e33@lab (yb0a@gen-label y1e2d@x))) (values (append y1e30@lex* y1e32@lex) (ydbd@chi-internal (yb6a@add-subst (yb3e@make-full-rib (cons y1e2d@x y1e2c@x*) (cons y1e33@lab y1e31@lab*)) y1e16@body*) (yd17@add-lexicals (cons y1e33@lab y1e31@lab*) (cons y1e32@lex y1e30@lex*) y1e17@r) y1e18@mr))))) y1e2a@ls/false) (let ((y1e38@t y1e28@t)) (let ((y1e3a@ls/false (yd85@syntax-dispatch y1e38@t '_))) (if y1e3a@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid syntax" y1e15@fmls)) y1e3a@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1e38@t)))))))))))) (set! y286f@ydad@chi-lambda-clause ydad@chi-lambda-clause) (set! ydaf@chi-lambda-clause* (lambda (y1e3c@stx y1e3d@fmls* y1e3e@body** y1e3f@r y1e40@mr) (if (null? y1e3d@fmls*) (values '() '()) (call-with-values (lambda () (ydad@chi-lambda-clause y1e3c@stx (car y1e3d@fmls*) (car y1e3e@body**) y1e3f@r y1e40@mr)) (lambda (y1e4a@y1e47 y1e4b@y1e49) (let ((y1e4e@b y1e4b@y1e49) (y1e4f@a y1e4a@y1e47)) (call-with-values (lambda () (ydaf@chi-lambda-clause* y1e3c@stx (cdr y1e3d@fmls*) (cdr y1e3e@body**) y1e3f@r y1e40@mr)) (lambda (y1e56@y1e53 y1e57@y1e55) (let ((y1e5a@b* y1e57@y1e55) (y1e5b@a* y1e56@y1e53)) (values (cons y1e4f@a y1e5b@a*) (cons y1e4e@b y1e5a@b*))))))))))) (set! y2870@ydaf@chi-lambda-clause* ydaf@chi-lambda-clause*) (set! ydb1@chi-defun (lambda (y1e5e@x y1e5f@r y1e60@mr) (let ((y1e64@fmls (car y1e5e@x)) (y1e65@body* (cdr y1e5e@x))) (call-with-values (lambda () (ydad@chi-lambda-clause y1e64@fmls y1e64@fmls y1e65@body* y1e5f@r y1e60@mr)) (lambda (y1e6c@y1e69 y1e6d@y1e6b) (let ((y1e70@body y1e6d@y1e6b) (y1e71@fmls y1e6c@y1e69)) (yae1@ya0d@build-lambda '#f y1e71@fmls y1e70@body))))))) (set! y2871@ydb1@chi-defun ydb1@chi-defun) (set! ydb3@chi-rhs (lambda (y1e74@rhs y1e75@r y1e76@mr) (let ((y1e7a@t (car y1e74@rhs))) (if (memv y1e7a@t '(defun)) (ydb1@chi-defun (cdr y1e74@rhs) y1e75@r y1e76@mr) (if (memv y1e7a@t '(expr)) (let ((y1e7c@expr (cdr y1e74@rhs))) (yda7@chi-expr y1e7c@expr y1e75@r y1e76@mr)) (if (memv y1e7a@t '(top-expr)) (let ((y1e7e@expr (cdr y1e74@rhs))) (yae3@ya3d@build-sequence '#f (list (yda7@chi-expr y1e7e@expr y1e75@r y1e76@mr) (yae4@ya3f@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" y1e74@rhs))))))) (set! y2872@ydb3@chi-rhs ydb3@chi-rhs) (set! ydb5@expand-interaction-rhs*/init* (lambda (y1e80@lhs* y1e81@rhs* y1e82@init* y1e83@r y1e84@mr) (let y1e8e@f ((y1e8a@lhs* y1e80@lhs*) (y1e8b@rhs* y1e81@rhs*)) (if (null? y1e8a@lhs*) (map (lambda (y1e90@x) (yda7@chi-expr y1e90@x y1e83@r y1e84@mr)) y1e82@init*) (let ((y1e92@lhs (car y1e8a@lhs*)) (y1e93@rhs (car y1e8b@rhs*))) (let ((y1e96@t (car y1e93@rhs))) (if (memv y1e96@t '(defun)) (let ((y1e98@rhs (ydb1@chi-defun (cdr y1e93@rhs) y1e83@r y1e84@mr))) (cons (list 'set! y1e92@lhs y1e98@rhs) (y1e8e@f (cdr y1e8a@lhs*) (cdr y1e8b@rhs*)))) (if (memv y1e96@t '(expr)) (let ((y1e9a@rhs (yda7@chi-expr (cdr y1e93@rhs) y1e83@r y1e84@mr))) (cons (list 'set! y1e92@lhs y1e9a@rhs) (y1e8e@f (cdr y1e8a@lhs*) (cdr y1e8b@rhs*)))) (if (memv y1e96@t '(top-expr)) (let ((y1e9c@e (yda7@chi-expr (cdr y1e93@rhs) y1e83@r y1e84@mr))) (cons y1e9c@e (y1e8e@f (cdr y1e8a@lhs*) (cdr y1e8b@rhs*)))) (error 'expand-interaction '"invallid" y1e93@rhs)))))))))) (set! y2873@ydb5@expand-interaction-rhs*/init* ydb5@expand-interaction-rhs*/init*) (set! ydb7@chi-rhs* (lambda (y1e9e@rhs* y1e9f@r y1ea0@mr) (let y1ea6@f ((y1ea4@ls y1e9e@rhs*)) (if (null? y1ea4@ls) '() (let ((y1ea8@a (ydb3@chi-rhs (car y1ea4@ls) y1e9f@r y1ea0@mr))) (cons y1ea8@a (y1ea6@f (cdr y1ea4@ls)))))))) (set! y2874@ydb7@chi-rhs* ydb7@chi-rhs*) (set! ydb9@find-bound=? (lambda (y1eaa@x y1eab@lhs* y1eac@rhs*) (if (null? y1eab@lhs*) '#f (if (yb82@bound-id=? y1eaa@x (car y1eab@lhs*)) (car y1eac@rhs*) (ydb9@find-bound=? y1eaa@x (cdr y1eab@lhs*) (cdr y1eac@rhs*)))))) (set! y2875@ydb9@find-bound=? ydb9@find-bound=?) (set! ydbb@find-dups (lambda (y1eb0@ls) (let y1eb6@f ((y1eb2@ls y1eb0@ls) (y1eb3@dups '())) (if (null? y1eb2@ls) y1eb3@dups (let ((y1eb8@t (ydb9@find-bound=? (car y1eb2@ls) (cdr y1eb2@ls) (cdr y1eb2@ls)))) (if y1eb8@t ((lambda (y1eba@x) (y1eb6@f (cdr y1eb2@ls) (cons (list (car y1eb2@ls) y1eba@x) y1eb3@dups))) y1eb8@t) (y1eb6@f (cdr y1eb2@ls) y1eb3@dups))))))) (set! y2876@ydbb@find-dups ydbb@find-dups) (set! ydbd@chi-internal (lambda (y1ebc@e* y1ebd@r y1ebe@mr) (let ((y1ec2@rib (yb32@make-empty-rib))) (call-with-values (lambda () (yddd@chi-body* (map (lambda (y1ed4@x) (yb6a@add-subst y1ec2@rib y1ed4@x)) (yb7c@syntax->list y1ebc@e*)) y1ebd@r y1ebe@mr '() '() '() '() '() y1ec2@rib '#f)) (lambda (y1ed6@y1ec5 y1ed7@y1ec7 y1ed8@y1ec9 y1ed9@y1ecb y1eda@y1ecd y1edb@y1ecf y1edc@y1ed1 y1edd@y1ed3) (let ((y1ee6@_exp* y1edd@y1ed3) (y1ee7@kwd* y1edc@y1ed1) (y1ee8@mod** y1edb@y1ecf) (y1ee9@rhs* y1eda@y1ecd) (y1eea@lex* y1ed9@y1ecb) (y1eeb@mr y1ed8@y1ec9) (y1eec@r y1ed7@y1ec7) (y1eed@e* y1ed6@y1ec5)) (begin (if (null? y1eed@e*) (ye65@syntax-violation '#f '"no expression in body" y1eed@e*) (void)) (let ((y1ef6@init* (yda3@chi-expr* (append (apply append (reverse y1ee8@mod**)) y1eed@e*) y1eec@r y1eeb@mr))) (let ((y1ef8@rhs* (ydb7@chi-rhs* y1ee9@rhs* y1eec@r y1eeb@mr))) (yae8@ya47@build-letrec* '#f (reverse y1eea@lex*) (reverse y1ef8@rhs*) (yae3@ya3d@build-sequence '#f y1ef6@init*))))))))))) (set! y2877@ydbd@chi-internal ydbd@chi-internal) (set! ydbf@parse-module (lambda (y1efa@e) (let ((y1efc@t y1efa@e)) (let ((y1efe@ls/false (yd85@syntax-dispatch y1efc@t '(_ each-any . each-any)))) (if y1efe@ls/false (apply (lambda (y1f00@export* y1f01@b*) (begin (if (not (for-all yb7e@id? y1f00@export*)) (ye65@syntax-violation '#f '"module exports must be identifiers" y1efa@e) (void)) (values '#f (list->vector y1f00@export*) y1f01@b*))) y1efe@ls/false) (let ((y1f04@t y1efc@t)) (let ((y1f06@ls/false (yd85@syntax-dispatch y1f04@t '(_ any each-any . each-any)))) (if y1f06@ls/false (apply (lambda (y1f08@name y1f09@export* y1f0a@b*) (begin (if (not (yb7e@id? y1f08@name)) (ye65@syntax-violation '#f '"module name must be an identifier" y1efa@e) (void)) (if (not (for-all yb7e@id? y1f09@export*)) (ye65@syntax-violation '#f '"module exports must be identifiers" y1efa@e) (void)) (values y1f08@name (list->vector y1f09@export*) y1f0a@b*))) y1f06@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1f04@t))))))))) (set! y2878@ydbf@parse-module ydbf@parse-module) (set! ydc9@module-interface? (lambda (y1f0e@x) (and (simple-struct? y1f0e@x) (eq? (simple-struct-name y1f0e@x) 'module-interface)))) (set! y2879@ydc9@module-interface? ydc9@module-interface?) (set! ydcb@module-interface-first-mark (lambda (y1f10@x) (simple-struct-ref y1f10@x '0))) (set! y287a@ydcb@module-interface-first-mark ydcb@module-interface-first-mark) (set! ydcd@set-module-interface-first-mark! (lambda (y1f12@x y1f13@val) (simple-struct-set! y1f12@x '0 y1f13@val))) (set! y287b@ydcd@set-module-interface-first-mark! ydcd@set-module-interface-first-mark!) (set! ydcf@module-interface-exp-id-vec (lambda (y1f16@x) (simple-struct-ref y1f16@x '1))) (set! y287c@ydcf@module-interface-exp-id-vec ydcf@module-interface-exp-id-vec) (set! ydd1@set-module-interface-exp-id-vec! (lambda (y1f18@x y1f19@val) (simple-struct-set! y1f18@x '1 y1f19@val))) (set! y287d@ydd1@set-module-interface-exp-id-vec! ydd1@set-module-interface-exp-id-vec!) (set! ydd3@module-interface-exp-lab-vec (lambda (y1f1c@x) (simple-struct-ref y1f1c@x '2))) (set! y287e@ydd3@module-interface-exp-lab-vec ydd3@module-interface-exp-lab-vec) (set! ydd5@set-module-interface-exp-lab-vec! (lambda (y1f1e@x y1f1f@val) (simple-struct-set! y1f1e@x '2 y1f1f@val))) (set! y287f@ydd5@set-module-interface-exp-lab-vec! ydd5@set-module-interface-exp-lab-vec!) (set! ydd7@dummy '3) (set! y2880@ydd7@dummy ydd7@dummy) (set! ydd9@module-interface-exp-id* (lambda (y1f22@iface y1f23@id) (let ((y1f27@diff-marks '#f)) (begin (set! y1f27@diff-marks (lambda (y1f2e@ls y1f2f@x) (begin (if (null? y1f2e@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((y1f32@a (car y1f2e@ls))) (if (eq? y1f32@a y1f2f@x) '() (cons y1f32@a (y1f27@diff-marks (cdr y1f2e@ls) y1f2f@x))))))) (let ((y1f28@diff (y1f27@diff-marks (yb50@stx-mark* y1f23@id) (ydcb@module-interface-first-mark y1f22@iface))) (y1f29@id-vec (ydcf@module-interface-exp-id-vec y1f22@iface))) (if (null? y1f28@diff) y1f29@id-vec (vector-map (lambda (y1f2c@x) (make-simple-struct 'stx '5 (list (yb4c@stx-expr y1f2c@x) (append y1f28@diff (yb50@stx-mark* y1f2c@x)) '() '()))) y1f29@id-vec))))))) (set! y2881@ydd9@module-interface-exp-id* ydd9@module-interface-exp-id*) (set! yddb@chi-internal-module (lambda (y1f34@e y1f35@r y1f36@mr y1f37@lex* y1f38@rhs* y1f39@mod** y1f3a@kwd*) (call-with-values (lambda () (ydbf@parse-module y1f34@e)) (lambda (y1f48@y1f43 y1f49@y1f45 y1f4a@y1f47) (let ((y1f4e@e* y1f4a@y1f47) (y1f4f@exp-id* y1f49@y1f45) (y1f50@name y1f48@y1f43)) (let ((y1f54@rib (yb32@make-empty-rib))) (let ((y1f56@e* (map (lambda (y1f58@x) (yb6a@add-subst y1f54@rib y1f58@x)) (yb7c@syntax->list y1f4e@e*)))) (call-with-values (lambda () (yddd@chi-body* y1f56@e* y1f35@r y1f36@mr y1f37@lex* y1f38@rhs* y1f39@mod** y1f3a@kwd* '() y1f54@rib '#f)) (lambda (y1f6a@y1f5b y1f6b@y1f5d y1f6c@y1f5f y1f6d@y1f61 y1f6e@y1f63 y1f6f@y1f65 y1f70@y1f67 y1f71@y1f69) (let ((y1f7a@_exp* y1f71@y1f69) (y1f7b@kwd* y1f70@y1f67) (y1f7c@mod** y1f6f@y1f65) (y1f7d@rhs* y1f6e@y1f63) (y1f7e@lex* y1f6d@y1f61) (y1f7f@mr y1f6c@y1f5f) (y1f80@r y1f6b@y1f5d) (y1f81@e* y1f6a@y1f5b)) (let ((y1f8a@exp-lab* (vector-map (lambda (y1f8e@x) (or (yb94@id->label (make-simple-struct 'stx '5 (list (yb80@id->sym y1f8e@x) (yb50@stx-mark* y1f8e@x) (list y1f54@rib) '()))) (ye65@syntax-violation '#f '"cannot find module export" y1f8e@x))) y1f4f@exp-id*)) (y1f8b@mod** (cons y1f81@e* y1f7c@mod**))) (if (not y1f50@name) (values y1f7e@lex* y1f7d@rhs* y1f4f@exp-id* y1f8a@exp-lab* y1f80@r y1f7f@mr y1f8b@mod** y1f7b@kwd*) (let ((y1f90@lab (yb0a@gen-label 'module)) (y1f91@iface (make-simple-struct 'module-interface '4 (list (car (yb50@stx-mark* y1f50@name)) (vector-map (lambda (y1f94@x) (make-simple-struct 'stx '5 (list (yb4c@stx-expr y1f94@x) (yb50@stx-mark* y1f94@x) '() '()))) y1f4f@exp-id*) y1f8a@exp-lab*)))) (values y1f7e@lex* y1f7d@rhs* (vector y1f50@name) (vector y1f90@lab) (cons (cons y1f90@lab (cons '$module y1f91@iface)) y1f80@r) (cons (cons y1f90@lab (cons '$module y1f91@iface)) y1f7f@mr) y1f8b@mod** y1f7b@kwd*)))))))))))))) (set! y2882@yddb@chi-internal-module yddb@chi-internal-module) (set! yddd@chi-body* (lambda (y1f96@e* y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1f9c@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?) (if (null? y1f96@e*) (values y1f96@e* y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1f9c@kwd* y1f9d@exp*) (let ((y1faa@e (car y1f96@e*))) (call-with-values (lambda () (yba0@syntax-type y1faa@e y1f97@r)) (lambda (y1fb2@y1fad y1fb3@y1faf y1fb4@y1fb1) (let ((y1fb8@kwd y1fb4@y1fb1) (y1fb9@value y1fb3@y1faf) (y1fba@type y1fb2@y1fad)) (let ((y1fbe@kwd* (if (yb7e@id? y1fb8@kwd) (cons y1fb8@kwd y1f9c@kwd*) y1f9c@kwd*))) (let ((y1fc0@t y1fba@type)) (if (memv y1fc0@t '(define)) (call-with-values (lambda () (yd07@parse-define y1faa@e)) (lambda (y1fc6@y1fc3 y1fc7@y1fc5) (let ((y1fca@rhs y1fc7@y1fc5) (y1fcb@id y1fc6@y1fc3)) (begin (if (yb8a@bound-id-member? y1fcb@id y1fbe@kwd*) (ye65@syntax-violation '#f '"cannot redefine keyword" y1faa@e) (void)) (call-with-values (lambda () (yb0e@gen-define-label+loc y1fcb@id y1f9e@rib)) (lambda (y1fd2@y1fcf y1fd3@y1fd1) (let ((y1fd6@lex y1fd3@y1fd1) (y1fd7@lab y1fd2@y1fcf)) (begin (yb34@extend-rib! y1f9e@rib y1fcb@id y1fd7@lab) (yddd@chi-body* (cdr y1f96@e*) (yd15@add-lexical y1fd7@lab y1fd6@lex y1f97@r) y1f98@mr (cons y1fd6@lex y1f99@lex*) (cons y1fca@rhs y1f9a@rhs*) y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?))))))))) (if (memv y1fc0@t '(define-syntax)) (call-with-values (lambda () (yd09@parse-define-syntax y1faa@e)) (lambda (y1fde@y1fdb y1fdf@y1fdd) (let ((y1fe2@rhs y1fdf@y1fdd) (y1fe3@id y1fde@y1fdb)) (begin (if (yb8a@bound-id-member? y1fe3@id y1fbe@kwd*) (ye65@syntax-violation '#f '"cannot redefine keyword" y1faa@e) (void)) (let ((y1fe6@lab (yb10@gen-define-label y1fe3@id y1f9e@rib)) (y1fe7@expanded-rhs (yddf@expand-transformer y1fe2@rhs y1f98@mr))) (begin (yb34@extend-rib! y1f9e@rib y1fe3@id y1fe6@lab) (let ((y1fea@b (ybb6@make-eval-transformer y1fe7@expanded-rhs))) (yddd@chi-body* (cdr y1f96@e*) (cons (cons y1fe6@lab y1fea@b) y1f97@r) (cons (cons y1fe6@lab y1fea@b) y1f98@mr) y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?)))))))) (if (memv y1fc0@t '(let-syntax letrec-syntax)) (let ((y1fec@t y1faa@e)) (let ((y1fee@ls/false (yd85@syntax-dispatch y1fec@t '(_ #(each (any any)) . each-any)))) (if (and y1fee@ls/false (apply (lambda (y1ff0@xlhs* y1ff1@xrhs* y1ff2@xbody*) (if (not (yb86@valid-bound-ids? y1ff0@xlhs*)) (ye65@syntax-violation '#f '"invalid identifiers" y1faa@e) (void))) y1fee@ls/false)) (apply (lambda (y1ff6@xlhs* y1ff7@xrhs* y1ff8@xbody*) (let ((y1ffc@xlab* (map yb0a@gen-label y1ff6@xlhs*))) (let ((y1ffe@xrib (yb3e@make-full-rib y1ff6@xlhs* y1ffc@xlab*))) (let ((y2000@xb* (map (lambda (y2002@x) (ybb6@make-eval-transformer (yddf@expand-transformer (if (eq? y1fba@type 'let-syntax) y2002@x (yb6a@add-subst y1ffe@xrib y2002@x)) y1f98@mr))) y1ff7@xrhs*))) (yddd@chi-body* (append (map (lambda (y2004@x) (yb6a@add-subst y1ffe@xrib y2004@x)) y1ff8@xbody*) (cdr y1f96@e*)) (append (map cons y1ffc@xlab* y2000@xb*) y1f97@r) (append (map cons y1ffc@xlab* y2000@xb*) y1f98@mr) y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?))))) y1fee@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y1fec@t)))) (if (memv y1fc0@t '(begin)) (let ((y2006@t y1faa@e)) (let ((y2008@ls/false (yd85@syntax-dispatch y2006@t '(_ . each-any)))) (if y2008@ls/false (apply (lambda (y200a@x*) (yddd@chi-body* (append y200a@x* (cdr y1f96@e*)) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?)) y2008@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y2006@t)))) (if (memv y1fc0@t '(global-macro global-macro!)) (yddd@chi-body* (cons (yb6a@add-subst y1f9e@rib (yda1@chi-global-macro y1fb9@value y1faa@e)) (cdr y1f96@e*)) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?) (if (memv y1fc0@t '(local-macro local-macro!)) (yddd@chi-body* (cons (yb6a@add-subst y1f9e@rib (yd9f@chi-local-macro y1fb9@value y1faa@e)) (cdr y1f96@e*)) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?) (if (memv y1fc0@t '(macro macro!)) (yddd@chi-body* (cons (yb6a@add-subst y1f9e@rib (yd9d@chi-macro y1fb9@value y1faa@e)) (cdr y1f96@e*)) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?) (if (memv y1fc0@t '(module)) (call-with-values (lambda () (yddb@chi-internal-module y1faa@e y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd*)) (lambda (y201c@y200d y201d@y200f y201e@y2011 y201f@y2013 y2020@y2015 y2021@y2017 y2022@y2019 y2023@y201b) (let ((y202c@kwd* y2023@y201b) (y202d@mod** y2022@y2019) (y202e@mr y2021@y2017) (y202f@r y2020@y2015) (y2030@m-exp-lab* y201f@y2013) (y2031@m-exp-id* y201e@y2011) (y2032@rhs* y201d@y200f) (y2033@lex* y201c@y200d)) (begin (vector-for-each (lambda (y203c@id y203d@lab) (yb34@extend-rib! y1f9e@rib y203c@id y203d@lab)) y2031@m-exp-id* y2030@m-exp-lab*) (yddd@chi-body* (cdr y1f96@e*) y202f@r y202e@mr y2033@lex* y2032@rhs* y202d@mod** y202c@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?))))) (if (memv y1fc0@t '(library)) (begin (ye47@library-expander (yb92@stx->datum y1faa@e)) (yddd@chi-body* (cdr y1f96@e*) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?)) (if (memv y1fc0@t '(export)) (let ((y2040@t y1faa@e)) (let ((y2042@ls/false (yd85@syntax-dispatch y2040@t '(_ . each-any)))) (if y2042@ls/false (apply (lambda (y2044@exp-decl*) (yddd@chi-body* (cdr y1f96@e*) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* (append y2044@exp-decl* y1f9d@exp*) y1f9e@rib y1f9f@top?)) y2042@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y2040@t)))) (if (memv y1fc0@t '(import)) (let ((y2047@module-import? '#f) (y2049@module-import '#f) (y204b@library-import '#f)) (begin (set! y2047@module-import? (lambda (y209a@e) (let ((y209c@t y209a@e)) (let ((y209e@ls/false (yd85@syntax-dispatch y209c@t '(_ any)))) (if (and y209e@ls/false (apply (lambda (y20a0@id) (yb7e@id? y20a0@id)) y209e@ls/false)) (apply (lambda (y20a2@id) '#t) y209e@ls/false) (let ((y20a4@t y209c@t)) (let ((y20a6@ls/false (yd85@syntax-dispatch y20a4@t '(_ . each-any)))) (if y20a6@ls/false (apply (lambda (y20a8@imp*) '#f) y20a6@ls/false) (let ((y20aa@t y20a4@t)) (let ((y20ac@ls/false (yd85@syntax-dispatch y20aa@t '_))) (if y20ac@ls/false (apply (lambda () (ye65@syntax-violation '#f '"malformed import form" y209a@e)) y20ac@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y20aa@t)))))))))))) (set! y2049@module-import (lambda (y2078@e y2079@r) (let ((y207c@t y2078@e)) (let ((y207e@ls/false (yd85@syntax-dispatch y207c@t '(_ any)))) (if (and y207e@ls/false (apply (lambda (y2080@id) (yb7e@id? y2080@id)) y207e@ls/false)) (apply (lambda (y2082@id) (call-with-values (lambda () (yba0@syntax-type y2082@id y2079@r)) (lambda (y208a@y2085 y208b@y2087 y208c@y2089) (let ((y2090@kwd y208c@y2089) (y2091@value y208b@y2087) (y2092@type y208a@y2085)) (let ((y2096@t y2092@type)) (if (memv y2096@t '($module)) (let ((y2098@iface y2091@value)) (values (ydd9@module-interface-exp-id* y2098@iface y2082@id) (ydd3@module-interface-exp-lab-vec y2098@iface))) (ye65@syntax-violation '#f '"invalid import" y2078@e))))))) y207e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y207c@t)))))) (set! y204b@library-import (lambda (y205c@e) (let ((y205e@t y205c@e)) (let ((y2060@ls/false (yd85@syntax-dispatch y205e@t '(any . each-any)))) (if y2060@ls/false (apply (lambda (y2062@ctxt y2063@imp*) (call-with-values (lambda () (yde7@parse-import-spec* (ye6b@syntax->datum y2063@imp*))) (lambda (y206a@y2067 y206b@y2069) (let ((y206e@subst-labels y206b@y2069) (y206f@subst-names y206a@y2067)) (values (vector-map (lambda (y2072@name) (yb5e@datum->stx y2062@ctxt y2072@name)) y206f@subst-names) y206e@subst-labels))))) y2060@ls/false) (let ((y2074@t y205e@t)) (let ((y2076@ls/false (yd85@syntax-dispatch y2074@t '_))) (if y2076@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid import form" y205c@e)) y2076@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y2074@t))))))))) (begin (call-with-values (lambda () (if (y2047@module-import? y1faa@e) (y2049@module-import y1faa@e y1f97@r) (y204b@library-import y1faa@e))) (lambda (y2050@y204d y2051@y204f) (let ((y2054@lab* y2051@y204f) (y2055@id* y2050@y204d)) (vector-for-each (lambda (y2058@id y2059@lab) (yb34@extend-rib! y1f9e@rib y2058@id y2059@lab)) y2055@id* y2054@lab*)))) (yddd@chi-body* (cdr y1f96@e*) y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?)))) (if y1f9f@top? (yddd@chi-body* (cdr y1f96@e*) y1f97@r y1f98@mr (cons (yb06@gen-lexical 'dummy) y1f99@lex*) (cons (cons 'top-expr y1faa@e) y1f9a@rhs*) y1f9b@mod** y1fbe@kwd* y1f9d@exp* y1f9e@rib y1f9f@top?) (values y1f96@e* y1f97@r y1f98@mr y1f99@lex* y1f9a@rhs* y1f9b@mod** y1fbe@kwd* y1f9d@exp*)))))))))))))))))))))) (set! y2883@yddd@chi-body* yddd@chi-body*) (set! yddf@expand-transformer (lambda (y20ae@expr y20af@r) (let ((y20b2@rtc (ydeb@make-collector))) (let ((y20b4@expanded-rhs (let ((y20be@y20b7 yded@inv-collector) (y20bf@y20b9 ydef@vis-collector) (y20c0@y20bb y20b2@rtc) (y20c1@y20bd (lambda (y20c6@x) (values)))) (let ((y20c8@swap (lambda () (begin (let ((y20ca@t (y20be@y20b7))) (begin (y20be@y20b7 y20c0@y20bb) (set! y20c0@y20bb y20ca@t))) (let ((y20cc@t (y20bf@y20b9))) (begin (y20bf@y20b9 y20c1@y20bd) (set! y20c1@y20bd y20cc@t))))))) (dynamic-wind y20c8@swap (lambda () (yda7@chi-expr y20ae@expr y20af@r y20af@r)) y20c8@swap))))) (begin (for-each (let ((y20ce@mark-visit (ydef@vis-collector))) (lambda (y20d0@x) (begin (y994@y7e2@invoke-library y20d0@x) (y20ce@mark-visit y20d0@x)))) (y20b2@rtc)) y20b4@expanded-rhs))))) (set! y2884@yddf@expand-transformer yddf@expand-transformer) (set! yde1@parse-exports (lambda (y20d2@exp*) (let y20da@f ((y20d4@exp* y20d2@exp*) (y20d5@int* '()) (y20d6@ext* '())) (if (null? y20d4@exp*) (begin (if (not (yb86@valid-bound-ids? y20d6@ext*)) (ye65@syntax-violation 'export '"invalid exports" (ydbb@find-dups y20d6@ext*)) (void)) (values (map ye6b@syntax->datum y20d6@ext*) y20d5@int*)) (let ((y20dc@t (car y20d4@exp*))) (let ((y20de@ls/false (yd85@syntax-dispatch y20dc@t '(any . #(each (any any)))))) (if y20de@ls/false (apply (lambda (y20e0@rename y20e1@i* y20e2@e*) (begin (if (not (and (eq? (ye6b@syntax->datum y20e0@rename) 'rename) (for-all yb7e@id? y20e1@i*) (for-all yb7e@id? y20e2@e*))) (ye65@syntax-violation 'export '"invalid export specifier" (car y20d4@exp*)) (void)) (y20da@f (cdr y20d4@exp*) (append y20e1@i* y20d5@int*) (append y20e2@e* y20d6@ext*)))) y20de@ls/false) (let ((y20e6@t y20dc@t)) (let ((y20e8@ls/false (yd85@syntax-dispatch y20e6@t 'any))) (if y20e8@ls/false (apply (lambda (y20ea@ie) (begin (if (not (yb7e@id? y20ea@ie)) (ye65@syntax-violation 'export '"invalid export" y20ea@ie) (void)) (y20da@f (cdr y20d4@exp*) (cons y20ea@ie y20d5@int*) (cons y20ea@ie y20d6@ext*)))) y20e8@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y20e6@t))))))))))) (set! y2885@yde1@parse-exports yde1@parse-exports) (set! yde3@parse-library-name (lambda (y20ec@spec) (let ((y20ef@parse '#f)) (begin (set! y20ef@parse (lambda (y20fc@x) (let ((y20fe@t y20fc@x)) (let ((y2100@ls/false (yd85@syntax-dispatch y20fe@t '(each-any)))) (if (and y2100@ls/false (apply (lambda (y2102@v*) (for-all (lambda (y2104@x) (let ((y2106@x (ye6b@syntax->datum y2104@x))) (and (integer? y2106@x) (exact? y2106@x)))) y2102@v*)) y2100@ls/false)) (apply (lambda (y2108@v*) (values '() (map ye6b@syntax->datum y2108@v*))) y2100@ls/false) (let ((y210a@t y20fe@t)) (let ((y210c@ls/false (yd85@syntax-dispatch y210a@t '(any . any)))) (if (and y210c@ls/false (apply (lambda (y210e@x y210f@rest) (symbol? (ye6b@syntax->datum y210e@x))) y210c@ls/false)) (apply (lambda (y2112@x y2113@rest) (call-with-values (lambda () (y20ef@parse y2113@rest)) (lambda (y211a@y2117 y211b@y2119) (let ((y211e@v* y211b@y2119) (y211f@x* y211a@y2117)) (values (cons (ye6b@syntax->datum y2112@x) y211f@x*) y211e@v*))))) y210c@ls/false) (let ((y2122@t y210a@t)) (let ((y2124@ls/false (yd85@syntax-dispatch y2122@t '()))) (if y2124@ls/false (apply (lambda () (values '() '())) y2124@ls/false) (let ((y2126@t y2122@t)) (let ((y2128@ls/false (yd85@syntax-dispatch y2126@t '_))) (if y2128@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid library name" y20ec@spec)) y2128@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y2126@t))))))))))))))) (call-with-values (lambda () (y20ef@parse y20ec@spec)) (lambda (y20f4@y20f1 y20f5@y20f3) (let ((y20f8@ver* y20f5@y20f3) (y20f9@name* y20f4@y20f1)) (begin (if (null? y20f9@name*) (ye65@syntax-violation '#f '"empty library name" y20ec@spec) (void)) (values y20f9@name* y20f8@ver*))))))))) (set! y2886@yde3@parse-library-name yde3@parse-library-name) (set! yde5@parse-library (lambda (y212a@e) (let ((y212c@t y212a@e)) (let ((y212e@ls/false (yd85@syntax-dispatch y212c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and y212e@ls/false (apply (lambda (y2130@library y2131@name* y2132@export y2133@exp* y2134@import y2135@imp* y2136@b*) (and (eq? (ye6b@syntax->datum y2132@export) 'export) (eq? (ye6b@syntax->datum y2134@import) 'import) (eq? (ye6b@syntax->datum y2130@library) 'library))) y212e@ls/false)) (apply (lambda (y213e@library y213f@name* y2140@export y2141@exp* y2142@import y2143@imp* y2144@b*) (values y213f@name* y2141@exp* y2143@imp* y2144@b*)) y212e@ls/false) (let ((y214c@t y212c@t)) (let ((y214e@ls/false (yd85@syntax-dispatch y214c@t '_))) (if y214e@ls/false (apply (lambda () (ye65@syntax-violation '#f '"malformed library" y212a@e)) y214e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y214c@t))))))))) (set! y2887@yde5@parse-library yde5@parse-library) (set! yde7@parse-import-spec* (let ((y2151@idsyn? '#f) (y2153@dup-error '#f) (y2155@merge-substs '#f) (y2157@exclude* '#f) (y2159@find* '#f) (y215b@rem* '#f) (y215d@remove-dups '#f) (y215f@parse-library-name '#f) (y2161@import-library '#f) (y2163@get-import '#f) (y2165@add-imports! '#f)) (begin (set! y2151@idsyn? (lambda (y235a@x) (symbol? (ye6b@syntax->datum y235a@x)))) (set! y2153@dup-error (lambda (y2358@name) (ye65@syntax-violation 'import '"two imports with different bindings" y2358@name))) (set! y2155@merge-substs (lambda (y2346@s y2347@subst) (let ((y234b@insert-to-subst '#f)) (begin (set! y234b@insert-to-subst (lambda (y234c@a y234d@subst) (let ((y2350@name (car y234c@a)) (y2351@label (cdr y234c@a))) (let ((y2354@t (assq y2350@name y234d@subst))) (if y2354@t ((lambda (y2356@x) (if (eq? (cdr y2356@x) y2351@label) y234d@subst (y2153@dup-error y2350@name))) y2354@t) (cons y234c@a y234d@subst)))))) (if (null? y2346@s) y2347@subst (y234b@insert-to-subst (car y2346@s) (y2155@merge-substs (cdr y2346@s) y2347@subst))))))) (set! y2157@exclude* (lambda (y2316@sym* y2317@subst) (let ((y231b@exclude '#f)) (begin (set! y231b@exclude (lambda (y2334@sym y2335@subst) (if (null? y2335@subst) (ye65@syntax-violation 'import '"cannot rename unbound identifier" y2334@sym) (if (eq? y2334@sym (caar y2335@subst)) (values (cdar y2335@subst) (cdr y2335@subst)) (let ((y2338@a (car y2335@subst))) (call-with-values (lambda () (y231b@exclude y2334@sym (cdr y2335@subst))) (lambda (y233e@y233b y233f@y233d) (let ((y2342@subst y233f@y233d) (y2343@old y233e@y233b)) (values y2343@old (cons y2338@a y2342@subst)))))))))) (if (null? y2316@sym*) (values '() y2317@subst) (call-with-values (lambda () (y231b@exclude (car y2316@sym*) y2317@subst)) (lambda (y2320@y231d y2321@y231f) (let ((y2324@subst y2321@y231f) (y2325@old y2320@y231d)) (call-with-values (lambda () (y2157@exclude* (cdr y2316@sym*) y2324@subst)) (lambda (y232c@y2329 y232d@y232b) (let ((y2330@subst y232d@y232b) (y2331@old* y232c@y2329)) (values (cons y2325@old y2331@old*) y2330@subst)))))))))))) (set! y2159@find* (lambda (y230e@sym* y230f@subst) (map (lambda (y2312@x) (let ((y2314@t (assq y2312@x y230f@subst))) (if y2314@t (cdr y2314@t) (ye65@syntax-violation 'import '"cannot find identifier" y2312@x)))) y230e@sym*))) (set! y215b@rem* (lambda (y2306@sym* y2307@subst) (let y230c@f ((y230a@subst y2307@subst)) (if (null? y230a@subst) '() (if (memq (caar y230a@subst) y2306@sym*) (y230c@f (cdr y230a@subst)) (cons (car y230a@subst) (y230c@f (cdr y230a@subst)))))))) (set! y215d@remove-dups (lambda (y2304@ls) (if (null? y2304@ls) '() (if (memq (car y2304@ls) (cdr y2304@ls)) (y215d@remove-dups (cdr y2304@ls)) (cons (car y2304@ls) (y215d@remove-dups (cdr y2304@ls))))))) (set! y215f@parse-library-name (lambda (y221c@spec) (let ((y221f@subversion? '#f) (y2221@subversion-pred '#f) (y2223@version-pred '#f)) (begin (set! y221f@subversion? (lambda (y2300@x) (let ((y2302@x (ye6b@syntax->datum y2300@x))) (and (integer? y2302@x) (exact? y2302@x) (>= y2302@x '0))))) (set! y2221@subversion-pred (lambda (y22a0@x*) (let ((y22a2@t y22a0@x*)) (let ((y22a4@ls/false (yd85@syntax-dispatch y22a2@t 'any))) (if (and y22a4@ls/false (apply (lambda (y22a6@n) (y221f@subversion? y22a6@n)) y22a4@ls/false)) (apply (lambda (y22a8@n) (lambda (y22aa@x) (= y22aa@x (ye6b@syntax->datum y22a8@n)))) y22a4@ls/false) (let ((y22ac@t y22a2@t)) (let ((y22ae@ls/false (yd85@syntax-dispatch y22ac@t '(any . each-any)))) (if (and y22ae@ls/false (apply (lambda (y22b0@p? y22b1@sub*) (eq? (ye6b@syntax->datum y22b0@p?) 'and)) y22ae@ls/false)) (apply (lambda (y22b4@p? y22b5@sub*) (let ((y22b8@p* (map y2221@subversion-pred y22b5@sub*))) (lambda (y22ba@x) (for-all (lambda (y22bc@p) (y22bc@p y22ba@x)) y22b8@p*)))) y22ae@ls/false) (let ((y22be@t y22ac@t)) (let ((y22c0@ls/false (yd85@syntax-dispatch y22be@t '(any . each-any)))) (if (and y22c0@ls/false (apply (lambda (y22c2@p? y22c3@sub*) (eq? (ye6b@syntax->datum y22c2@p?) 'or)) y22c0@ls/false)) (apply (lambda (y22c6@p? y22c7@sub*) (let ((y22ca@p* (map y2221@subversion-pred y22c7@sub*))) (lambda (y22cc@x) (exists (lambda (y22ce@p) (y22ce@p y22cc@x)) y22ca@p*)))) y22c0@ls/false) (let ((y22d0@t y22be@t)) (let ((y22d2@ls/false (yd85@syntax-dispatch y22d0@t '(any any)))) (if (and y22d2@ls/false (apply (lambda (y22d4@p? y22d5@sub) (eq? (ye6b@syntax->datum y22d4@p?) 'not)) y22d2@ls/false)) (apply (lambda (y22d8@p? y22d9@sub) (let ((y22dc@p (y2221@subversion-pred y22d9@sub))) (lambda (y22de@x) (not (y22dc@p y22de@x))))) y22d2@ls/false) (let ((y22e0@t y22d0@t)) (let ((y22e2@ls/false (yd85@syntax-dispatch y22e0@t '(any any)))) (if (and y22e2@ls/false (apply (lambda (y22e4@p? y22e5@n) (and (eq? (ye6b@syntax->datum y22e4@p?) '<=) (y221f@subversion? y22e5@n))) y22e2@ls/false)) (apply (lambda (y22e8@p? y22e9@n) (lambda (y22ec@x) (<= y22ec@x (ye6b@syntax->datum y22e9@n)))) y22e2@ls/false) (let ((y22ee@t y22e0@t)) (let ((y22f0@ls/false (yd85@syntax-dispatch y22ee@t '(any any)))) (if (and y22f0@ls/false (apply (lambda (y22f2@p? y22f3@n) (and (eq? (ye6b@syntax->datum y22f2@p?) '>=) (y221f@subversion? y22f3@n))) y22f0@ls/false)) (apply (lambda (y22f6@p? y22f7@n) (lambda (y22fa@x) (>= y22fa@x (ye6b@syntax->datum y22f7@n)))) y22f0@ls/false) (let ((y22fc@t y22ee@t)) (let ((y22fe@ls/false (yd85@syntax-dispatch y22fc@t '_))) (if y22fe@ls/false (apply (lambda () (ye65@syntax-violation 'import '"invalid sub-version spec" y221c@spec y22a0@x*)) y22fe@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y22fc@t)))))))))))))))))))))))) (set! y2223@version-pred (lambda (y2250@x*) (let ((y2252@t y2250@x*)) (let ((y2254@ls/false (yd85@syntax-dispatch y2252@t '()))) (if y2254@ls/false (apply (lambda () (lambda (y2256@x) '#t)) y2254@ls/false) (let ((y2258@t y2252@t)) (let ((y225a@ls/false (yd85@syntax-dispatch y2258@t '(any . each-any)))) (if (and y225a@ls/false (apply (lambda (y225c@c y225d@ver*) (eq? (ye6b@syntax->datum y225c@c) 'and)) y225a@ls/false)) (apply (lambda (y2260@c y2261@ver*) (let ((y2264@p* (map y2223@version-pred y2261@ver*))) (lambda (y2266@x) (for-all (lambda (y2268@p) (y2268@p y2266@x)) y2264@p*)))) y225a@ls/false) (let ((y226a@t y2258@t)) (let ((y226c@ls/false (yd85@syntax-dispatch y226a@t '(any . each-any)))) (if (and y226c@ls/false (apply (lambda (y226e@c y226f@ver*) (eq? (ye6b@syntax->datum y226e@c) 'or)) y226c@ls/false)) (apply (lambda (y2272@c y2273@ver*) (let ((y2276@p* (map y2223@version-pred y2273@ver*))) (lambda (y2278@x) (exists (lambda (y227a@p) (y227a@p y2278@x)) y2276@p*)))) y226c@ls/false) (let ((y227c@t y226a@t)) (let ((y227e@ls/false (yd85@syntax-dispatch y227c@t '(any any)))) (if (and y227e@ls/false (apply (lambda (y2280@c y2281@ver) (eq? (ye6b@syntax->datum y2280@c) 'not)) y227e@ls/false)) (apply (lambda (y2284@c y2285@ver) (let ((y2288@p (y2223@version-pred y2285@ver))) (lambda (y228a@x) (not (y2288@p y228a@x))))) y227e@ls/false) (let ((y228c@t y227c@t)) (let ((y228e@ls/false (yd85@syntax-dispatch y228c@t 'each-any))) (if y228e@ls/false (apply (lambda (y2290@sub*) (let ((y2292@p* (map y2221@subversion-pred y2290@sub*))) (lambda (y2294@x) (let y229a@f ((y2296@p* y2292@p*) (y2297@x y2294@x)) (if (null? y2296@p*) '#t (if (null? y2297@x) '#f (and ((car y2296@p*) (car y2297@x)) (y229a@f (cdr y2296@p*) (cdr y2297@x))))))))) y228e@ls/false) (let ((y229c@t y228c@t)) (let ((y229e@ls/false (yd85@syntax-dispatch y229c@t '_))) (if y229e@ls/false (apply (lambda () (ye65@syntax-violation 'import '"invalid version spec" y221c@spec y2250@x*)) y229e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y229c@t))))))))))))))))))))) (let y2226@f ((y2224@x y221c@spec)) (let ((y2228@t y2224@x)) (let ((y222a@ls/false (yd85@syntax-dispatch y2228@t '(each-any)))) (if y222a@ls/false (apply (lambda (y222c@version-spec*) (values '() (y2223@version-pred y222c@version-spec*))) y222a@ls/false) (let ((y222e@t y2228@t)) (let ((y2230@ls/false (yd85@syntax-dispatch y222e@t '(any . any)))) (if (and y2230@ls/false (apply (lambda (y2232@x y2233@x*) (y2151@idsyn? y2232@x)) y2230@ls/false)) (apply (lambda (y2236@x y2237@x*) (call-with-values (lambda () (y2226@f y2237@x*)) (lambda (y223e@y223b y223f@y223d) (let ((y2242@pred y223f@y223d) (y2243@name y223e@y223b)) (values (cons (ye6b@syntax->datum y2236@x) y2243@name) y2242@pred))))) y2230@ls/false) (let ((y2246@t y222e@t)) (let ((y2248@ls/false (yd85@syntax-dispatch y2246@t '()))) (if y2248@ls/false (apply (lambda () (values '() (lambda (y224a@x) '#t))) y2248@ls/false) (let ((y224c@t y2246@t)) (let ((y224e@ls/false (yd85@syntax-dispatch y224c@t '_))) (if y224e@ls/false (apply (lambda () (ye65@syntax-violation '#f '"invalid import spec" y221c@spec)) y224e@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y224c@t)))))))))))))))))) (set! y2161@import-library (lambda (y220c@spec*) (call-with-values (lambda () (y215f@parse-library-name y220c@spec*)) (lambda (y2212@y220f y2213@y2211) (let ((y2216@pred y2213@y2211) (y2217@name y2212@y220f)) (begin (if (null? y2217@name) (ye65@syntax-violation 'import '"empty library name" y220c@spec*) (void)) (let ((y221a@lib (y98d@y7d4@find-library-by-name y2217@name))) (begin (if (not y221a@lib) (ye65@syntax-violation 'import '"cannot find library with required name" y2217@name) (void)) (if (not (y2216@pred (y967@y788@library-version y221a@lib))) (ye65@syntax-violation 'import '"library does not satisfy version specification" y220c@spec* y221a@lib) (void)) ((ydf1@imp-collector) y221a@lib) (y96f@y798@library-subst y221a@lib))))))))) (set! y2163@get-import (lambda (y217e@spec) (let ((y2180@t y217e@spec)) (let ((y2182@ls/false (yd85@syntax-dispatch y2180@t '(any . each-any)))) (if (and y2182@ls/false (apply (lambda (y2184@x y2185@x*) (not (memq (ye6b@syntax->datum y2184@x) '(for rename except only prefix library)))) y2182@ls/false)) (apply (lambda (y2188@x y2189@x*) (y2161@import-library (cons y2188@x y2189@x*))) y2182@ls/false) (let ((y218c@t y2180@t)) (let ((y218e@ls/false (yd85@syntax-dispatch y218c@t '(any any . #(each (any any)))))) (if (and y218e@ls/false (apply (lambda (y2190@rename y2191@isp y2192@old* y2193@new*) (and (eq? (ye6b@syntax->datum y2190@rename) 'rename) (for-all y2151@idsyn? y2192@old*) (for-all y2151@idsyn? y2193@new*))) y218e@ls/false)) (apply (lambda (y2198@rename y2199@isp y219a@old* y219b@new*) (let ((y21a0@subst (y2163@get-import y2199@isp)) (y21a1@old* (map ye6b@syntax->datum y219a@old*)) (y21a2@new* (map ye6b@syntax->datum y219b@new*))) (let ((y21a6@old-label* (y2159@find* y21a1@old* y21a0@subst))) (let ((y21a8@subst (y215b@rem* y21a1@old* y21a0@subst))) (y2155@merge-substs (map cons y21a2@new* y21a6@old-label*) y21a8@subst))))) y218e@ls/false) (let ((y21aa@t y218c@t)) (let ((y21ac@ls/false (yd85@syntax-dispatch y21aa@t '(any any . each-any)))) (if (and y21ac@ls/false (apply (lambda (y21ae@except y21af@isp y21b0@sym*) (and (eq? (ye6b@syntax->datum y21ae@except) 'except) (for-all y2151@idsyn? y21b0@sym*))) y21ac@ls/false)) (apply (lambda (y21b4@except y21b5@isp y21b6@sym*) (let ((y21ba@subst (y2163@get-import y21b5@isp))) (y215b@rem* (map ye6b@syntax->datum y21b6@sym*) y21ba@subst))) y21ac@ls/false) (let ((y21bc@t y21aa@t)) (let ((y21be@ls/false (yd85@syntax-dispatch y21bc@t '(any any . each-any)))) (if (and y21be@ls/false (apply (lambda (y21c0@only y21c1@isp y21c2@sym*) (and (eq? (ye6b@syntax->datum y21c0@only) 'only) (for-all y2151@idsyn? y21c2@sym*))) y21be@ls/false)) (apply (lambda (y21c6@only y21c7@isp y21c8@sym*) (let ((y21cc@subst (y2163@get-import y21c7@isp)) (y21cd@sym* (map ye6b@syntax->datum y21c8@sym*))) (let ((y21d0@sym* (y215d@remove-dups y21cd@sym*))) (let ((y21d2@lab* (y2159@find* y21d0@sym* y21cc@subst))) (map cons y21d0@sym* y21d2@lab*))))) y21be@ls/false) (let ((y21d4@t y21bc@t)) (let ((y21d6@ls/false (yd85@syntax-dispatch y21d4@t '(any any any)))) (if (and y21d6@ls/false (apply (lambda (y21d8@prefix y21d9@isp y21da@p) (and (eq? (ye6b@syntax->datum y21d8@prefix) 'prefix) (y2151@idsyn? y21da@p))) y21d6@ls/false)) (apply (lambda (y21de@prefix y21df@isp y21e0@p) (let ((y21e4@subst (y2163@get-import y21df@isp)) (y21e5@prefix (symbol->string (ye6b@syntax->datum y21e0@p)))) (map (lambda (y21e8@x) (cons (string->symbol (string-append y21e5@prefix (symbol->string (car y21e8@x)))) (cdr y21e8@x))) y21e4@subst))) y21d6@ls/false) (let ((y21ea@t y21d4@t)) (let ((y21ec@ls/false (yd85@syntax-dispatch y21ea@t '(any each-any)))) (if (and y21ec@ls/false (apply (lambda (y21ee@library y21ef@spec*) (eq? (ye6b@syntax->datum y21ee@library) 'library)) y21ec@ls/false)) (apply (lambda (y21f2@library y21f3@spec*) (y2161@import-library y21f3@spec*)) y21ec@ls/false) (let ((y21f6@t y21ea@t)) (let ((y21f8@ls/false (yd85@syntax-dispatch y21f6@t '(any any . any)))) (if (and y21f8@ls/false (apply (lambda (y21fa@for y21fb@isp y21fc@rest) (eq? (ye6b@syntax->datum y21fa@for) 'for)) y21f8@ls/false)) (apply (lambda (y2200@for y2201@isp y2202@rest) (y2163@get-import y2201@isp)) y21f8@ls/false) (let ((y2206@t y21f6@t)) (let ((y2208@ls/false (yd85@syntax-dispatch y2206@t 'any))) (if y2208@ls/false (apply (lambda (y220a@spec) (ye65@syntax-violation 'import '"invalid import spec" y220a@spec)) y2208@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y2206@t))))))))))))))))))))))))))) (set! y2165@add-imports! (lambda (y216e@imp y216f@h) (let ((y2172@subst (y2163@get-import y216e@imp))) (for-each (lambda (y2174@x) (let ((y2176@name (car y2174@x)) (y2177@label (cdr y2174@x))) (let ((y217a@t (hashtable-ref y216f@h y2176@name '#f))) (if y217a@t ((lambda (y217c@l) (if (not (eq? y217c@l y2177@label)) (y2153@dup-error y2176@name) (void))) y217a@t) (hashtable-set! y216f@h y2176@name y2177@label))))) y2172@subst)))) (lambda (y2166@imp*) (let y216c@f ((y2168@imp* y2166@imp*) (y2169@h (make-eq-hashtable))) (if (null? y2168@imp*) (hashtable-entries y2169@h) (begin (y2165@add-imports! (car y2168@imp*) y2169@h) (y216c@f (cdr y2168@imp*) y2169@h)))))))) (set! y2888@yde7@parse-import-spec* yde7@parse-import-spec*) (set! yde9@make-top-rib (lambda (y235c@names y235d@labels) (let ((y2360@rib (yb32@make-empty-rib))) (begin (vector-for-each (lambda (y2362@name y2363@label) (begin (if (not (symbol? y2362@name)) (error 'make-top-rib '"BUG: not a symbol" y2362@name) (void)) (yb36@extend-rib/nc! y2360@rib (make-simple-struct 'stx '5 (list y2362@name yb02@top-mark* '() '())) y2363@label))) y235c@names y235d@labels) y2360@rib)))) (set! y2889@yde9@make-top-rib yde9@make-top-rib) (set! ydeb@make-collector (lambda () (let ((y2366@ls '())) (lambda y236a (let ((y236b (length y236a))) (if (= y236b '0) (apply (lambda () y2366@ls) y236a) (if (= y236b '1) (apply (lambda (y2368@x) (set! y2366@ls (yafb@set-cons y2368@x y2366@ls))) y236a) (error 'apply '"invalid arg count")))))))) (set! y288a@ydeb@make-collector ydeb@make-collector) (set! yded@inv-collector (y6c8@y5a7@make-parameter (lambda y236c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (y236e@x) (begin (if (not (procedure? y236e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" y236e@x) (void)) y236e@x)))) (set! y288b@yded@inv-collector yded@inv-collector) (set! ydef@vis-collector (y6c8@y5a7@make-parameter (lambda y2370@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (y2372@x) (begin (if (not (procedure? y2372@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" y2372@x) (void)) y2372@x)))) (set! y288c@ydef@vis-collector ydef@vis-collector) (set! ydf1@imp-collector (y6c8@y5a7@make-parameter (lambda y2374@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (y2376@x) (begin (if (not (procedure? y2376@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" y2376@x) (void)) y2376@x)))) (set! y288d@ydf1@imp-collector ydf1@imp-collector) (set! ydf3@chi-library-internal (lambda (y2378@e* y2379@rib y237a@top?) (call-with-values (lambda () (yddd@chi-body* y2378@e* '() '() '() '() '() '() '() y2379@rib y237a@top?)) (lambda (y238e@y237f y238f@y2381 y2390@y2383 y2391@y2385 y2392@y2387 y2393@y2389 y2394@y238b y2395@y238d) (let ((y239e@exp* y2395@y238d) (y239f@_kwd* y2394@y238b) (y23a0@mod** y2393@y2389) (y23a1@rhs* y2392@y2387) (y23a2@lex* y2391@y2385) (y23a3@mr y2390@y2383) (y23a4@r y238f@y2381) (y23a5@e* y238e@y237f)) (values (append (apply append (reverse y23a0@mod**)) y23a5@e*) y23a4@r y23a3@mr (reverse y23a2@lex*) (reverse y23a1@rhs*) y239e@exp*)))))) (set! y288e@ydf3@chi-library-internal ydf3@chi-library-internal) (set! ydf5@chi-interaction-expr (lambda (y23ae@e y23af@rib y23b0@r) (call-with-values (lambda () (yddd@chi-body* (list y23ae@e) y23b0@r y23b0@r '() '() '() '() '() y23af@rib '#t)) (lambda (y23c4@y23b5 y23c5@y23b7 y23c6@y23b9 y23c7@y23bb y23c8@y23bd y23c9@y23bf y23ca@y23c1 y23cb@y23c3) (let ((y23d4@_exp* y23cb@y23c3) (y23d5@_kwd* y23ca@y23c1) (y23d6@mod** y23c9@y23bf) (y23d7@rhs* y23c8@y23bd) (y23d8@lex* y23c7@y23bb) (y23d9@mr y23c6@y23b9) (y23da@r y23c5@y23b7) (y23db@e* y23c4@y23b5)) (let ((y23e4@e* (ydb5@expand-interaction-rhs*/init* (reverse y23d8@lex*) (reverse y23d7@rhs*) (append (apply append (reverse y23d6@mod**)) y23db@e*) y23da@r y23d9@mr))) (let ((y23e6@e (if (null? y23e4@e*) (yae4@ya3f@build-void) (if (null? (cdr y23e4@e*)) (car y23e4@e*) (yae3@ya3d@build-sequence '#f y23e4@e*))))) (values y23e6@e y23da@r)))))))) (set! y288f@ydf5@chi-interaction-expr ydf5@chi-interaction-expr) (set! ydf7@library-body-expander (lambda (y23e8@name y23e9@main-exp* y23ea@imp* y23eb@b* y23ec@top?) (let ((y23f3@itc '#f)) (begin (set! y23f3@itc (ydeb@make-collector)) (let ((y23fc@y23f5 ydf1@imp-collector) (y23fd@y23f7 ye75@top-level-context) (y23fe@y23f9 y23f3@itc) (y23ff@y23fb '#f)) (let ((y2404@swap (lambda () (begin (let ((y2406@t (y23fc@y23f5))) (begin (y23fc@y23f5 y23fe@y23f9) (set! y23fe@y23f9 y2406@t))) (let ((y2408@t (y23fd@y23f7))) (begin (y23fd@y23f7 y23ff@y23fb) (set! y23ff@y23fb y2408@t))))))) (dynamic-wind y2404@swap (lambda () (call-with-values (lambda () (yde7@parse-import-spec* y23ea@imp*)) (lambda (y240e@y240b y240f@y240d) (let ((y2412@subst-labels y240f@y240d) (y2413@subst-names y240e@y240b)) (let ((y2416@rib (yde9@make-top-rib y2413@subst-names y2412@subst-labels))) (let ((y2419@wrap '#f)) (begin (set! y2419@wrap (lambda (y2494@x) (make-simple-struct 'stx '5 (list y2494@x yb02@top-mark* (list y2416@rib) '())))) (let ((y241a@b* (map y2419@wrap y23eb@b*)) (y241b@main-exp* (map y2419@wrap y23e9@main-exp*)) (y241c@rtc (ydeb@make-collector)) (y241d@vtc (ydeb@make-collector))) (let ((y242a@y2423 yded@inv-collector) (y242b@y2425 ydef@vis-collector) (y242c@y2427 y241c@rtc) (y242d@y2429 y241d@vtc)) (let ((y2432@swap (lambda () (begin (let ((y2434@t (y242a@y2423))) (begin (y242a@y2423 y242c@y2427) (set! y242c@y2427 y2434@t))) (let ((y2436@t (y242b@y2425))) (begin (y242b@y2425 y242d@y2429) (set! y242d@y2429 y2436@t))))))) (dynamic-wind y2432@swap (lambda () (call-with-values (lambda () (ydf3@chi-library-internal y241a@b* y2416@rib y23ec@top?)) (lambda (y2444@y2439 y2445@y243b y2446@y243d y2447@y243f y2448@y2441 y2449@y2443) (let ((y2450@internal-exp* y2449@y2443) (y2451@rhs* y2448@y2441) (y2452@lex* y2447@y243f) (y2453@mr y2446@y243d) (y2454@r y2445@y243b) (y2455@init* y2444@y2439)) (call-with-values (lambda () (yde1@parse-exports (append y241b@main-exp* y2450@internal-exp*))) (lambda (y2460@y245d y2461@y245f) (let ((y2464@exp-id* y2461@y245f) (y2465@exp-name* y2460@y245d)) (begin (yb3a@seal-rib! y2416@rib) (let ((y2468@init* (yda3@chi-expr* y2455@init* y2454@r y2453@mr))) (let ((y246a@rhs* (ydb7@chi-rhs* y2451@rhs* y2454@r y2453@mr))) (begin (yb3c@unseal-rib! y2416@rib) (let ((y246c@loc* (map yb08@gen-global y2452@lex*)) (y246d@export-subst (ye4f@make-export-subst y2465@exp-name* y2464@exp-id*))) (let ((y2471@errstr '#f)) (begin (set! y2471@errstr '"attempt to export mutated variable") (call-with-values (lambda () (ye51@make-export-env/macros y2452@lex* y246c@loc* y2454@r)) (lambda (y2478@y2473 y2479@y2475 y247a@y2477) (let ((y247e@macro* y247a@y2477) (y247f@global* y2479@y2475) (y2480@export-env y2478@y2473)) (begin (for-each (lambda (y2484@s) (let ((y2486@name (car y2484@s)) (y2487@label (cdr y2484@s))) (let ((y248a@p (assq y2487@label y2480@export-env))) (if y248a@p (let ((y248c@b (cdr y248a@p))) (let ((y248e@type (car y248c@b))) (if (eq? y248e@type 'mutable) (ye65@syntax-violation 'export y2471@errstr y2486@name) (void)))) (void))))) y246d@export-subst) (let ((y2490@invoke-body (yae9@ya49@build-library-letrec* '#f y23e8@name y2452@lex* y246c@loc* y246a@rhs* (if (null? y2468@init*) (yae4@ya3f@build-void) (yae3@ya3d@build-sequence '#f y2468@init*)))) (y2491@invoke-definitions (map yae0@y99c@build-global-define (map cdr y247f@global*)))) (values (y23f3@itc) (y241c@rtc) (y241d@vtc) (yae3@ya3d@build-sequence '#f (append y2491@invoke-definitions (list y2490@invoke-body))) y247e@macro* y246d@export-subst y2480@export-env)))))))))))))))))))) y2432@swap))))))))))) y2404@swap))))))) (set! y2890@ydf7@library-body-expander ydf7@library-body-expander) (set! ydf9@core-library-expander (lambda (y2496@e y2497@verify-name) (call-with-values (lambda () (yde5@parse-library y2496@e)) (lambda (y24a2@y249b y24a3@y249d y24a4@y249f y24a5@y24a1) (let ((y24aa@b* y24a5@y24a1) (y24ab@imp* y24a4@y249f) (y24ac@exp* y24a3@y249d) (y24ad@name* y24a2@y249b)) (call-with-values (lambda () (yde3@parse-library-name y24ad@name*)) (lambda (y24b6@y24b3 y24b7@y24b5) (let ((y24ba@ver y24b7@y24b5) (y24bb@name y24b6@y24b3)) (begin (y2497@verify-name y24bb@name) (call-with-values (lambda () (ydf7@library-body-expander y24bb@name y24ac@exp* y24ab@imp* y24aa@b* '#f)) (lambda (y24cc@y24bf y24cd@y24c1 y24ce@y24c3 y24cf@y24c5 y24d0@y24c7 y24d1@y24c9 y24d2@y24cb) (let ((y24da@export-env y24d2@y24cb) (y24db@export-subst y24d1@y24c9) (y24dc@visit-code y24d0@y24c7) (y24dd@invoke-code y24cf@y24c5) (y24de@visit-req* y24ce@y24c3) (y24df@invoke-req* y24cd@y24c1) (y24e0@imp* y24cc@y24bf)) (values y24bb@name y24ba@ver y24e0@imp* y24df@invoke-req* y24de@visit-req* y24dd@invoke-code y24dc@visit-code y24db@export-subst y24da@export-env))))))))))))) (set! y2891@ydf9@core-library-expander ydf9@core-library-expander) (set! ydfb@parse-top-level-program (lambda (y24e8@e*) (let ((y24ea@t y24e8@e*)) (let ((y24ec@ls/false (yd85@syntax-dispatch y24ea@t '((any . each-any) . each-any)))) (if (and y24ec@ls/false (apply (lambda (y24ee@import y24ef@imp* y24f0@b*) (eq? (ye6b@syntax->datum y24ee@import) 'import)) y24ec@ls/false)) (apply (lambda (y24f4@import y24f5@imp* y24f6@b*) (values y24f5@imp* y24f6@b*)) y24ec@ls/false) (let ((y24fa@t y24ea@t)) (let ((y24fc@ls/false (yd85@syntax-dispatch y24fa@t '((any . any) . any)))) (if (and y24fc@ls/false (apply (lambda (y24fe@import y24ff@x y2500@y) (eq? (ye6b@syntax->datum y24fe@import) 'import)) y24fc@ls/false)) (apply (lambda (y2504@import y2505@x y2506@y) (ye65@syntax-violation 'expander '"invalid syntax of top-level program" (yb78@syntax-car y24e8@e*))) y24fc@ls/false) (let ((y250a@t y24fa@t)) (let ((y250c@ls/false (yd85@syntax-dispatch y250a@t '_))) (if y250c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) y250c@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y250a@t)))))))))))) (set! y2892@ydfb@parse-top-level-program ydfb@parse-top-level-program) (set! ydfd@top-level-expander (lambda (y250e@e*) (call-with-values (lambda () (ydfb@parse-top-level-program y250e@e*)) (lambda (y2514@y2511 y2515@y2513) (let ((y2518@b* y2515@y2513) (y2519@imp* y2514@y2511)) (call-with-values (lambda () (ydf7@library-body-expander '() '() y2519@imp* y2518@b* '#t)) (lambda (y252a@y251d y252b@y251f y252c@y2521 y252d@y2523 y252e@y2525 y252f@y2527 y2530@y2529) (let ((y2538@export-env y2530@y2529) (y2539@export-subst y252f@y2527) (y253a@visit-code y252e@y2525) (y253b@invoke-code y252d@y2523) (y253c@visit-req* y252c@y2521) (y253d@invoke-req* y252b@y251f) (y253e@imp* y252a@y251d)) (values y253d@invoke-req* y253b@invoke-code))))))))) (set! y2893@ydfd@top-level-expander ydfd@top-level-expander) (set! ydff@rp (y6c5@y5a1@make-record-printer 'env (lambda (y2546@x y2547@p y2548@wr) (display '"#<environment>" y2547@p)))) (set! y2894@ydff@rp ydff@rp) (set! ye09@env? (lambda (y254c@x) (and (simple-struct? y254c@x) (eq? (simple-struct-name y254c@x) 'env)))) (set! y2895@ye09@env? ye09@env?) (set! ye0b@env-names (lambda (y254e@x) (simple-struct-ref y254e@x '0))) (set! y2896@ye0b@env-names ye0b@env-names) (set! ye0d@set-env-names! (lambda (y2550@x y2551@val) (simple-struct-set! y2550@x '0 y2551@val))) (set! y2897@ye0d@set-env-names! ye0d@set-env-names!) (set! ye0f@env-labels (lambda (y2554@x) (simple-struct-ref y2554@x '1))) (set! y2898@ye0f@env-labels ye0f@env-labels) (set! ye11@set-env-labels! (lambda (y2556@x y2557@val) (simple-struct-set! y2556@x '1 y2557@val))) (set! y2899@ye11@set-env-labels! ye11@set-env-labels!) (set! ye13@env-itc (lambda (y255a@x) (simple-struct-ref y255a@x '2))) (set! y289a@ye13@env-itc ye13@env-itc) (set! ye15@set-env-itc! (lambda (y255c@x y255d@val) (simple-struct-set! y255c@x '2 y255d@val))) (set! y289b@ye15@set-env-itc! ye15@set-env-itc!) (set! ye17@dummy '3) (set! y289c@ye17@dummy ye17@dummy) (set! ye19@rp (y6c5@y5a1@make-record-printer 'interaction-env (lambda (y2560@x y2561@p y2562@wr) (display '"#<environment>" y2561@p)))) (set! y289d@ye19@rp ye19@rp) (set! ye23@interaction-env? (lambda (y2566@x) (and (simple-struct? y2566@x) (eq? (simple-struct-name y2566@x) 'interaction-env)))) (set! y289e@ye23@interaction-env? ye23@interaction-env?) (set! ye25@interaction-env-rib (lambda (y2568@x) (simple-struct-ref y2568@x '0))) (set! y289f@ye25@interaction-env-rib ye25@interaction-env-rib) (set! ye27@set-interaction-env-rib! (lambda (y256a@x y256b@val) (simple-struct-set! y256a@x '0 y256b@val))) (set! y28a0@ye27@set-interaction-env-rib! ye27@set-interaction-env-rib!) (set! ye29@interaction-env-r (lambda (y256e@x) (simple-struct-ref y256e@x '1))) (set! y28a1@ye29@interaction-env-r ye29@interaction-env-r) (set! ye2b@set-interaction-env-r! (lambda (y2570@x y2571@val) (simple-struct-set! y2570@x '1 y2571@val))) (set! y28a2@ye2b@set-interaction-env-r! ye2b@set-interaction-env-r!) (set! ye2d@interaction-env-locs (lambda (y2574@x) (simple-struct-ref y2574@x '2))) (set! y28a3@ye2d@interaction-env-locs ye2d@interaction-env-locs) (set! ye2f@set-interaction-env-locs! (lambda (y2576@x y2577@val) (simple-struct-set! y2576@x '2 y2577@val))) (set! y28a4@ye2f@set-interaction-env-locs! ye2f@set-interaction-env-locs!) (set! ye31@dummy '3) (set! y28a5@ye31@dummy ye31@dummy) (set! ye33@interaction-environment-symbols (lambda () (ye3b@environment-symbols (ye73@interaction-environment)))) (set! y28a6@ye33@interaction-environment-symbols ye33@interaction-environment-symbols) (set! ye35@environment-bindings (lambda (y257a@e) (vector->list (vector-map (lambda (y257c@name y257d@label) (ye37@parse-binding (cons y257c@name (y993@y7e0@imported-label->binding y257d@label)))) (ye0b@env-names y257a@e) (ye0f@env-labels y257a@e))))) (set! y28a7@ye35@environment-bindings ye35@environment-bindings) (set! ye37@parse-binding (lambda (y2580@b) (cons (car y2580@b) (let ((y2582@t (cadr y2580@b))) (if (memv y2582@t '(core-prim global)) 'procedure (if (memv y2582@t '(core-macro macro global-macro)) 'syntax (if (memv y2582@t '($core-rtd)) 'record (if (eq? (car y2580@b) (cadr y2580@b)) 'syntax 'unknown)))))))) (set! y28a8@ye37@parse-binding ye37@parse-binding) (set! ye39@environment? (lambda (y2584@x) (or (ye09@env? y2584@x) (ye23@interaction-env? y2584@x)))) (set! y28a9@ye39@environment? ye39@environment?) (set! ye3b@environment-symbols (lambda (y2586@x) (if (ye09@env? y2586@x) (vector->list (ye0b@env-names y2586@x)) (if (ye23@interaction-env? y2586@x) (map values (yb1c@rib-sym* (ye25@interaction-env-rib y2586@x))) (assertion-violation 'environment-symbols '"not an environment" y2586@x))))) (set! y28aa@ye3b@environment-symbols ye3b@environment-symbols) (set! ye3d@environment (lambda y2588@imp* (let ((y258a@itc (ydeb@make-collector))) (let ((y2590@y258d ydf1@imp-collector) (y2591@y258f y258a@itc)) (let ((y2594@swap (lambda () (let ((y2596@t (y2590@y258d))) (begin (y2590@y258d y2591@y258f) (set! y2591@y258f y2596@t)))))) (dynamic-wind y2594@swap (lambda () (call-with-values (lambda () (yde7@parse-import-spec* y2588@imp*)) (lambda (y259c@y2599 y259d@y259b) (let ((y25a0@subst-labels y259d@y259b) (y25a1@subst-names y259c@y2599)) (make-simple-struct 'env '4 (list y25a1@subst-names y25a0@subst-labels y258a@itc)))))) y2594@swap)))))) (set! y28ab@ye3d@environment ye3d@environment) (set! ye3f@null-environment (lambda (y25a4@n) (begin (if (not (eqv? y25a4@n '5)) (assertion-violation 'null-environment '"not 5" y25a4@n) (void)) (ye3d@environment '(psyntax null-environment-5))))) (set! y28ac@ye3f@null-environment ye3f@null-environment) (set! ye41@scheme-report-environment (lambda (y25a6@n) (begin (if (not (eqv? y25a6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" y25a6@n) (void)) (ye3d@environment '(psyntax scheme-report-environment-5))))) (set! y28ad@ye41@scheme-report-environment ye41@scheme-report-environment) (set! ye43@expand (lambda (y25a8@x y25a9@env) (if (ye09@env? y25a9@env) (let ((y25ac@rib (yde9@make-top-rib (ye0b@env-names y25a9@env) (ye0f@env-labels y25a9@env)))) (let ((y25ae@x (make-simple-struct 'stx '5 (list y25a8@x yb02@top-mark* (list y25ac@rib) '()))) (y25af@itc (ye13@env-itc y25a9@env)) (y25b0@rtc (ydeb@make-collector)) (y25b1@vtc (ydeb@make-collector))) (let ((y25b6@x (let ((y25c8@y25b9 ye75@top-level-context) (y25c9@y25bb yded@inv-collector) (y25ca@y25bd ydef@vis-collector) (y25cb@y25bf ydf1@imp-collector) (y25cc@y25c1 '#f) (y25cd@y25c3 y25b0@rtc) (y25ce@y25c5 y25b1@vtc) (y25cf@y25c7 y25af@itc)) (let ((y25d8@swap (lambda () (begin (let ((y25da@t (y25c8@y25b9))) (begin (y25c8@y25b9 y25cc@y25c1) (set! y25cc@y25c1 y25da@t))) (let ((y25dc@t (y25c9@y25bb))) (begin (y25c9@y25bb y25cd@y25c3) (set! y25cd@y25c3 y25dc@t))) (let ((y25de@t (y25ca@y25bd))) (begin (y25ca@y25bd y25ce@y25c5) (set! y25ce@y25c5 y25de@t))) (let ((y25e0@t (y25cb@y25bf))) (begin (y25cb@y25bf y25cf@y25c7) (set! y25cf@y25c7 y25e0@t))))))) (dynamic-wind y25d8@swap (lambda () (yda7@chi-expr y25ae@x '() '())) y25d8@swap))))) (begin (yb3a@seal-rib! y25ac@rib) (values y25b6@x (y25b0@rtc)))))) (if (ye23@interaction-env? y25a9@env) (let ((y25e2@rib (ye25@interaction-env-rib y25a9@env)) (y25e3@r (ye29@interaction-env-r y25a9@env)) (y25e4@rtc (ydeb@make-collector))) (let ((y25e8@x (make-simple-struct 'stx '5 (list y25a8@x yb02@top-mark* (list y25e2@rib) '())))) (call-with-values (lambda () (let ((y25fe@y25ef ye75@top-level-context) (y25ff@y25f1 yded@inv-collector) (y2600@y25f3 ydef@vis-collector) (y2601@y25f5 ydf1@imp-collector) (y2602@y25f7 y25a9@env) (y2603@y25f9 y25e4@rtc) (y2604@y25fb (ydeb@make-collector)) (y2605@y25fd (ydeb@make-collector))) (let ((y260e@swap (lambda () (begin (let ((y2610@t (y25fe@y25ef))) (begin (y25fe@y25ef y2602@y25f7) (set! y2602@y25f7 y2610@t))) (let ((y2612@t (y25ff@y25f1))) (begin (y25ff@y25f1 y2603@y25f9) (set! y2603@y25f9 y2612@t))) (let ((y2614@t (y2600@y25f3))) (begin (y2600@y25f3 y2604@y25fb) (set! y2604@y25fb y2614@t))) (let ((y2616@t (y2601@y25f5))) (begin (y2601@y25f5 y2605@y25fd) (set! y2605@y25fd y2616@t))))))) (dynamic-wind y260e@swap (lambda () (ydf5@chi-interaction-expr y25e8@x y25e2@rib y25e3@r)) y260e@swap)))) (lambda (y2618@y25eb y2619@y25ed) (let ((y261c@r^ y2619@y25ed) (y261d@e y2618@y25eb)) (begin (ye2b@set-interaction-env-r! y25a9@env y261c@r^) (values y261d@e (y25e4@rtc)))))))) (assertion-violation 'expand '"not an environment" y25a9@env))))) (set! y28ae@ye43@expand ye43@expand) (set! ye45@eval (lambda (y2620@x y2621@env) (begin (if (not (ye39@environment? y2621@env)) (error 'eval '"not an environment" y2621@env) (void)) (call-with-values (lambda () (ye43@expand y2620@x y2621@env)) (lambda (y2628@y2625 y2629@y2627) (let ((y262c@invoke-req* y2629@y2627) (y262d@x y2628@y2625)) (begin (for-each y994@y7e2@invoke-library y262c@invoke-req*) (eval-core (y71e@y6d6@expanded->core y262d@x))))))))) (set! y28af@ye45@eval ye45@eval) (set! ye47@library-expander (lambda y269e (let ((y269f (length y269e))) (if (= y269f '3) (apply (lambda (y2630@x y2631@filename y2632@verify-name) (let ((y2637@build-visit-code '#f) (y2639@visit! '#f)) (begin (set! y2637@build-visit-code (lambda (y268c@macro*) (if (null? y268c@macro*) (yae4@ya3f@build-void) (yae3@ya3d@build-sequence '#f (map (lambda (y268e@x) (let ((y2690@loc (car y268e@x)) (y2691@src (cddr y268e@x))) (list 'set! y2690@loc y2691@src))) y268c@macro*))))) (set! y2639@visit! (lambda (y2684@macro*) (for-each (lambda (y2686@x) (let ((y2688@loc (car y2686@x)) (y2689@proc (cadr y2686@x))) (set-symbol-value! y2688@loc y2689@proc))) y2684@macro*))) (call-with-values (lambda () (ydf9@core-library-expander y2630@x y2632@verify-name)) (lambda (y264c@y263b y264d@y263d y264e@y263f y264f@y2641 y2650@y2643 y2651@y2645 y2652@y2647 y2653@y2649 y2654@y264b) (let ((y265e@export-env y2654@y264b) (y265f@export-subst y2653@y2649) (y2660@macro* y2652@y2647) (y2661@invoke-code y2651@y2645) (y2662@vis* y2650@y2643) (y2663@inv* y264f@y2641) (y2664@imp* y264e@y263f) (y2665@ver y264d@y263d) (y2666@name y264c@y263b)) (let ((y2670@id (gensym)) (y2671@name y2666@name) (y2672@ver y2665@ver) (y2673@imp* (map y998@y7ea@library-spec y2664@imp*)) (y2674@vis* (map y998@y7ea@library-spec y2662@vis*)) (y2675@inv* (map y998@y7ea@library-spec y2663@inv*)) (y2676@visit-proc (lambda () (y2639@visit! y2660@macro*))) (y2677@invoke-proc (lambda () (eval-core (y71e@y6d6@expanded->core y2661@invoke-code)))) (y2678@visit-code (y2637@build-visit-code y2660@macro*)) (y2679@invoke-code y2661@invoke-code)) (begin (y992@y7de@install-library y2670@id y2671@name y2672@ver y2673@imp* y2674@vis* y2675@inv* y265f@export-subst y265e@export-env y2676@visit-proc y2677@invoke-proc y2678@visit-code y2679@invoke-code '#t y2631@filename) (values y2670@id y2671@name y2672@ver y2673@imp* y2674@vis* y2675@inv* y2679@invoke-code y2678@visit-code y265f@export-subst y265e@export-env))))))))) y269e) (if (= y269f '2) (apply (lambda (y2694@x y2695@filename) (ye47@library-expander y2694@x y2695@filename (lambda (y2698@x) (values)))) y269e) (if (= y269f '1) (apply (lambda (y269a@x) (ye47@library-expander y269a@x '#f (lambda (y269c@x) (values)))) y269e) (error 'apply '"invalid arg count"))))))) (set! y28b0@ye47@library-expander ye47@library-expander) (set! ye49@boot-library-expand (lambda (y26a0@x) (call-with-values (lambda () (ye47@library-expander y26a0@x)) (lambda (y26b6@y26a3 y26b7@y26a5 y26b8@y26a7 y26b9@y26a9 y26ba@y26ab y26bb@y26ad y26bc@y26af y26bd@y26b1 y26be@y26b3 y26bf@y26b5) (let ((y26ca@export-env y26bf@y26b5) (y26cb@export-subst y26be@y26b3) (y26cc@visit-code y26bd@y26b1) (y26cd@invoke-code y26bc@y26af) (y26ce@inv* y26bb@y26ad) (y26cf@vis* y26ba@y26ab) (y26d0@imp* y26b9@y26a9) (y26d1@ver y26b8@y26a7) (y26d2@name y26b7@y26a5) (y26d3@id y26b6@y26a3)) (values y26d2@name y26cd@invoke-code y26cb@export-subst y26ca@export-env)))))) (set! y28b1@ye49@boot-library-expand ye49@boot-library-expand) (set! ye4b@rev-map-append (lambda (y26de@f y26df@ls y26e0@ac) (if (null? y26df@ls) y26e0@ac (ye4b@rev-map-append y26de@f (cdr y26df@ls) (cons (y26de@f (car y26df@ls)) y26e0@ac))))) (set! y28b2@ye4b@rev-map-append ye4b@rev-map-append) (set! ye4d@build-exports (lambda (y26e4@lex*+loc* y26e5@init*) (yae3@ya3d@build-sequence '#f (cons (yae4@ya3f@build-void) (ye4b@rev-map-append (lambda (y26e8@x) (list 'set! (cdr y26e8@x) (car y26e8@x))) y26e4@lex*+loc* y26e5@init*))))) (set! y28b3@ye4d@build-exports ye4d@build-exports) (set! ye4f@make-export-subst (lambda (y26ea@name* y26eb@id*) (map (lambda (y26ee@name y26ef@id) (let ((y26f2@label (yb94@id->label y26ef@id))) (begin (if (not y26f2@label) (ye65@syntax-violation '#f '"cannot export unbound identifier" y26ef@id) (void)) (cons y26ee@name y26f2@label)))) y26ea@name* y26eb@id*))) (set! y28b4@ye4f@make-export-subst ye4f@make-export-subst) (set! ye51@make-export-env/macros (lambda (y26f4@lex* y26f5@loc* y26f6@r) (let ((y26fb@lookup '#f)) (begin (set! y26fb@lookup (lambda (y2718@x) (let y2720@f ((y271a@x y2718@x) (y271b@lex* y26f4@lex*) (y271c@loc* y26f5@loc*)) (if (pair? y271b@lex*) (if (eq? y271a@x (car y271b@lex*)) (car y271c@loc*) (y2720@f y271a@x (cdr y271b@lex*) (cdr y271c@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let y2704@f ((y26fc@r y26f6@r) (y26fd@env '()) (y26fe@global* '()) (y26ff@macro* '())) (if (null? y26fc@r) (values y26fd@env y26fe@global* y26ff@macro*) (let ((y2706@x (car y26fc@r))) (let ((y2708@label (car y2706@x)) (y2709@b (cdr y2706@x))) (let ((y270c@t (yb9a@binding-type y2709@b))) (if (memv y270c@t '(lexical)) (let ((y270e@v (yb9c@binding-value y2709@b))) (let ((y2710@loc (y26fb@lookup (yd0f@lexical-var y270e@v))) (y2711@type (if (yd11@lexical-mutable? y270e@v) 'mutable 'global))) (y2704@f (cdr y26fc@r) (cons (cons* y2708@label y2711@type y2710@loc) y26fd@env) (cons (cons (yd0f@lexical-var y270e@v) y2710@loc) y26fe@global*) y26ff@macro*))) (if (memv y270c@t '(local-macro)) (let ((y2714@loc (gensym))) (y2704@f (cdr y26fc@r) (cons (cons* y2708@label 'global-macro y2714@loc) y26fd@env) y26fe@global* (cons (cons y2714@loc (yb9c@binding-value y2709@b)) y26ff@macro*))) (if (memv y270c@t '(local-macro!)) (let ((y2716@loc (gensym))) (y2704@f (cdr y26fc@r) (cons (cons* y2708@label 'global-macro! y2716@loc) y26fd@env) y26fe@global* (cons (cons y2716@loc (yb9c@binding-value y2709@b)) y26ff@macro*))) (if (memv y270c@t '($rtd $module)) (y2704@f (cdr y26fc@r) (cons y2706@x y26fd@env) y26fe@global* y26ff@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (yb9a@binding-type y2709@b) (yb9c@binding-value y2709@b))))))))))))))) (set! y28b5@ye51@make-export-env/macros ye51@make-export-env/macros) (set! ye53@generate-temporaries (lambda (y2722@ls) (let ((y2724@t y2722@ls)) (let ((y2726@ls/false (yd85@syntax-dispatch y2724@t 'each-any))) (if y2726@ls/false (apply (lambda (y2728@ls) (map (lambda (y272a@x) (make-simple-struct 'stx '5 (list (let ((y272c@x (ye6b@syntax->datum y272a@x))) (if (or (symbol? y272c@x) (string? y272c@x)) (gensym y272c@x) (gensym 't))) yb02@top-mark* '() '()))) y2728@ls)) y2726@ls/false) (let ((y272e@t y2724@t)) (let ((y2730@ls/false (yd85@syntax-dispatch y272e@t '_))) (if y2730@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) y2730@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y272e@t))))))))) (set! y28b6@ye53@generate-temporaries ye53@generate-temporaries) (set! ye55@free-identifier=? (lambda (y2732@x y2733@y) (if (yb7e@id? y2732@x) (if (yb7e@id? y2733@y) (yb84@free-id=? y2732@x y2733@y) (assertion-violation 'free-identifier=? '"not an identifier" y2733@y)) (assertion-violation 'free-identifier=? '"not an identifier" y2732@x)))) (set! y28b7@ye55@free-identifier=? ye55@free-identifier=?) (set! ye57@bound-identifier=? (lambda (y2736@x y2737@y) (if (yb7e@id? y2736@x) (if (yb7e@id? y2737@y) (yb82@bound-id=? y2736@x y2737@y) (assertion-violation 'bound-identifier=? '"not an identifier" y2737@y)) (assertion-violation 'bound-identifier=? '"not an identifier" y2736@x)))) (set! y28b8@ye57@bound-identifier=? ye57@bound-identifier=?) (set! ye59@make-source-condition (lambda (y273a@x) (let ((y2744@y273f '#f) (y2746@y2741 '#f) (y2748@y2740 '#f) (y274b@y273e '#f) (y274d@make-source-condition '#f) (y274f@y273c '#f) (y2751@y273d '#f) (y2753@source-condition? '#f) (y2755@source-filename '#f) (y2757@source-character '#f)) (begin (set! y2744@y273f (make-record-type-descriptor '&source-information y2b9a@y28e1@&condition-rtd 'y2742 '#f '#f '#((immutable file-name) (immutable character)))) (set! y2746@y2741 '#f) (set! y2748@y2740 (make-record-constructor-descriptor y2744@y273f y2b9b@y28e3@&condition-rcd y2746@y2741)) (set! y274b@y273e (record-predicate y2744@y273f)) (set! y274d@make-source-condition (record-constructor y2748@y2740)) (set! y274f@y273c (record-accessor y2744@y273f '0)) (set! y2751@y273d (record-accessor y2744@y273f '1)) (set! y2753@source-condition? (condition-predicate y2744@y273f)) (set! y2755@source-filename (condition-accessor y2744@y273f y274f@y273c)) (set! y2757@source-character (condition-accessor y2744@y273f y2751@y273d)) (if (pair? y273a@x) (y274d@make-source-condition (car y273a@x) (cdr y273a@x)) (condition)))))) (set! y28b9@ye59@make-source-condition ye59@make-source-condition) (set! ye5b@extract-position-condition (lambda (y2758@x) (ye59@make-source-condition (ye5d@expression-position y2758@x)))) (set! y28ba@ye5b@extract-position-condition ye5b@extract-position-condition) (set! ye5d@expression-position (lambda (y275a@x) (and (yb4a@stx? y275a@x) (let ((y275c@x (yb4c@stx-expr y275a@x))) (and (y6bd@y591@annotation? y275c@x) (y6be@y593@annotation-source y275c@x)))))) (set! y28bb@ye5d@expression-position ye5d@expression-position) (set! ye5f@assertion-error (lambda (y275e@expr y275f@pos) (raise (condition (y2bca@y29a5@make-assertion-violation) (y2bdc@y29d7@make-who-condition 'assert) (y2ba0@y2938@make-message-condition '"assertion failed") (y2bd2@y29bc@make-irritants-condition (list y275e@expr)) (ye59@make-source-condition y275f@pos))))) (set! y28bc@ye5f@assertion-error ye5f@assertion-error) (set! ye61@syntax-error (lambda (y2762@x . y2764@args) (begin (if (not (for-all string? y2764@args)) (assertion-violation 'syntax-error '"invalid argument" y2764@args) (void)) (raise (condition (y2ba0@y2938@make-message-condition (if (null? y2764@args) '"invalid syntax" (apply string-append y2764@args))) (y2bfe@y2a33@make-syntax-violation (ye6b@syntax->datum y2762@x) '#f) (ye5b@extract-position-condition y2762@x)))))) (set! y28bd@ye61@syntax-error ye61@syntax-error) (set! ye63@syntax-violation* (lambda (y2766@who y2767@msg y2768@form y2769@condition-object) (begin (if (not (string? y2767@msg)) (assertion-violation 'syntax-violation '"message is not a string" y2767@msg) (void)) (let ((y276e@who (if (or (string? y2766@who) (symbol? y2766@who)) y2766@who (if (not y2766@who) (let ((y2770@t y2768@form)) (let ((y2772@ls/false (yd85@syntax-dispatch y2770@t 'any))) (if (and y2772@ls/false (apply (lambda (y2774@id) (yb7e@id? y2774@id)) y2772@ls/false)) (apply (lambda (y2776@id) (ye6b@syntax->datum y2776@id)) y2772@ls/false) (let ((y2778@t y2770@t)) (let ((y277a@ls/false (yd85@syntax-dispatch y2778@t '(any . any)))) (if (and y277a@ls/false (apply (lambda (y277c@id y277d@rest) (yb7e@id? y277c@id)) y277a@ls/false)) (apply (lambda (y2780@id y2781@rest) (ye6b@syntax->datum y2780@id)) y277a@ls/false) (let ((y2784@t y2778@t)) (let ((y2786@ls/false (yd85@syntax-dispatch y2784@t '_))) (if y2786@ls/false (apply (lambda () '#f) y2786@ls/false) (ye65@syntax-violation '#f '"invalid syntax" y2784@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" y2766@who))))) (raise (condition (if y276e@who (y2bdc@y29d7@make-who-condition y276e@who) (condition)) (y2ba0@y2938@make-message-condition y2767@msg) y2769@condition-object (ye5b@extract-position-condition y2768@form))))))) (set! y28be@ye63@syntax-violation* ye63@syntax-violation*) (set! ye65@syntax-violation (lambda y2796 (let ((y2797 (length y2796))) (if (= y2797 '3) (apply (lambda (y2788@who y2789@msg y278a@form) (ye65@syntax-violation y2788@who y2789@msg y278a@form '#f)) y2796) (if (= y2797 '4) (apply (lambda (y278e@who y278f@msg y2790@form y2791@subform) (ye63@syntax-violation* y278e@who y278f@msg y2790@form (y2bfe@y2a33@make-syntax-violation (ye6b@syntax->datum y2790@form) (ye6b@syntax->datum y2791@subform)))) y2796) (error 'apply '"invalid arg count")))))) (set! y28bf@ye65@syntax-violation ye65@syntax-violation) (set! ye67@identifier? (lambda (y2798@x) (yb7e@id? y2798@x))) (set! y28c0@ye67@identifier? ye67@identifier?) (set! ye69@datum->syntax (lambda (y279a@id y279b@datum) (if (yb7e@id? y279a@id) (yb5e@datum->stx y279a@id y279b@datum) (assertion-violation 'datum->syntax '"not an identifier" y279a@id)))) (set! y28c1@ye69@datum->syntax ye69@datum->syntax) (set! ye6b@syntax->datum (lambda (y279e@x) (yb92@stx->datum y279e@x))) (set! y28c2@ye6b@syntax->datum ye6b@syntax->datum) (set! ye6d@ungensym-all (lambda (y27a0@code) (if (pair? y27a0@code) (cons (ye6d@ungensym-all (car y27a0@code)) (ye6d@ungensym-all (cdr y27a0@code))) (if (symbol? y27a0@code) (ungensym y27a0@code) y27a0@code)))) (set! y28c3@ye6d@ungensym-all ye6d@ungensym-all) (set! ye6f@compile-r6rs-top-level (lambda (y27a2@x*) (call-with-values (lambda () (ydfd@top-level-expander y27a2@x*)) (lambda (y27a8@y27a5 y27a9@y27a7) (let ((y27ac@invoke-code y27a9@y27a7) (y27ad@lib* y27a8@y27a5)) (lambda () (begin (for-each y994@y7e2@invoke-library y27ad@lib*) (let ((y27b0@expanded (y71e@y6d6@expanded->core y27ac@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (ye6d@ungensym-all y27b0@expanded)) (void)) (eval-core y27b0@expanded)))))))))) (set! y28c4@ye6f@compile-r6rs-top-level ye6f@compile-r6rs-top-level) (set! ye71@pre-compile-r6rs-top-level (lambda (y27b2@x*) (call-with-values (lambda () (ydfd@top-level-expander y27b2@x*)) (lambda (y27b8@y27b5 y27b9@y27b7) (let ((y27bc@invoke-code y27b9@y27b7) (y27bd@lib* y27b8@y27b5)) (begin (for-each y994@y7e2@invoke-library y27bd@lib*) (y6c6@y5a3@compile-core (y71e@y6d6@expanded->core y27bc@invoke-code)))))))) (set! y28c5@ye71@pre-compile-r6rs-top-level ye71@pre-compile-r6rs-top-level) (set! ye73@interaction-environment (let ((y27c0@the-env '#f)) (lambda () (or y27c0@the-env (let ((y27c2@lib (y98d@y7d4@find-library-by-name '(mosh interaction))) (y27c3@rib (yb32@make-empty-rib))) (begin (let ((y27c6@subst (y96f@y798@library-subst y27c2@lib))) (begin (yb1e@set-rib-sym*! y27c3@rib (map car y27c6@subst)) (yb22@set-rib-mark**! y27c3@rib (map (lambda (y27c8@x) yb02@top-mark*) y27c6@subst)) (yb26@set-rib-label*! y27c3@rib (map cdr y27c6@subst)))) (let ((y27ca@env (make-simple-struct 'interaction-env '4 (list y27c3@rib '() '())))) (begin (set! y27c0@the-env y27ca@env) y27ca@env)))))))) (set! y28c6@ye73@interaction-environment ye73@interaction-environment) (set! ye75@top-level-context (y6c8@y5a7@make-parameter '#f)) (set! y28c7@ye75@top-level-context ye75@top-level-context) (y98a@y7ce@current-library-expander ye47@library-expander))
(begin (set! y28d6@y28d1 (unspecified)) (set! y28d8@y28d3 (unspecified)) (set! y28da@y28d2 (unspecified)) (set! y28dd@&condition? (unspecified)) (set! y28df@make-&condition (unspecified)) (set! y28e1@&condition-rtd (unspecified)) (set! y28e3@&condition-rcd (unspecified)) (set! y292f@y292a (unspecified)) (set! y2931@y292c (unspecified)) (set! y2933@y292b (unspecified)) (set! y2936@p? (unspecified)) (set! y2938@make-message-condition (unspecified)) (set! y293a@y2929 (unspecified)) (set! y293c@message-condition? (unspecified)) (set! y293e@condition-message (unspecified)) (set! y2940@&message-rtd (unspecified)) (set! y2942@&message-rcd (unspecified)) (set! y2948@y2943 (unspecified)) (set! y294a@y2945 (unspecified)) (set! y294c@y2944 (unspecified)) (set! y294f@p? (unspecified)) (set! y2951@make-warning (unspecified)) (set! y2953@warning? (unspecified)) (set! y2955@&warning-rtd (unspecified)) (set! y2957@&warning-rcd (unspecified)) (set! y295d@y2958 (unspecified)) (set! y295f@y295a (unspecified)) (set! y2961@y2959 (unspecified)) (set! y2964@p? (unspecified)) (set! y2966@make-serious-condition (unspecified)) (set! y2968@serious-condition? (unspecified)) (set! y296a@&serious-rtd (unspecified)) (set! y296c@&serious-rcd (unspecified)) (set! y2972@y296d (unspecified)) (set! y2974@y296f (unspecified)) (set! y2976@y296e (unspecified)) (set! y2979@p? (unspecified)) (set! y297b@make-error (unspecified)) (set! y297d@error? (unspecified)) (set! y297f@&error-rtd (unspecified)) (set! y2981@&error-rcd (unspecified)) (set! y2987@y2982 (unspecified)) (set! y2989@y2984 (unspecified)) (set! y298b@y2983 (unspecified)) (set! y298e@p? (unspecified)) (set! y2990@make-violation (unspecified)) (set! y2992@violation? (unspecified)) (set! y2994@&violation-rtd (unspecified)) (set! y2996@&violation-rcd (unspecified)) (set! y299c@y2997 (unspecified)) (set! y299e@y2999 (unspecified)) (set! y29a0@y2998 (unspecified)) (set! y29a3@p? (unspecified)) (set! y29a5@make-assertion-violation (unspecified)) (set! y29a7@assertion-violation? (unspecified)) (set! y29a9@&assertion-rtd (unspecified)) (set! y29ab@&assertion-rcd (unspecified)) (set! y29b3@y29ae (unspecified)) (set! y29b5@y29b0 (unspecified)) (set! y29b7@y29af (unspecified)) (set! y29ba@p? (unspecified)) (set! y29bc@make-irritants-condition (unspecified)) (set! y29be@y29ad (unspecified)) (set! y29c0@irritants-condition? (unspecified)) (set! y29c2@condition-irritants (unspecified)) (set! y29c4@&irritants-rtd (unspecified)) (set! y29c6@&irritants-rcd (unspecified)) (set! y29ce@y29c9 (unspecified)) (set! y29d0@y29cb (unspecified)) (set! y29d2@y29ca (unspecified)) (set! y29d5@p? (unspecified)) (set! y29d7@make-who-condition (unspecified)) (set! y29d9@y29c8 (unspecified)) (set! y29db@who-condition? (unspecified)) (set! y29dd@condition-who (unspecified)) (set! y29df@&who-rtd (unspecified)) (set! y29e1@&who-rcd (unspecified)) (set! y29e7@y29e2 (unspecified)) (set! y29e9@y29e4 (unspecified)) (set! y29eb@y29e3 (unspecified)) (set! y29ee@p? (unspecified)) (set! y29f0@make-non-continuable-violation (unspecified)) (set! y29f2@non-continuable-violation? (unspecified)) (set! y29f4@&non-continuable-rtd (unspecified)) (set! y29f6@&non-continuable-rcd (unspecified)) (set! y29fc@y29f7 (unspecified)) (set! y29fe@y29f9 (unspecified)) (set! y2a00@y29f8 (unspecified)) (set! y2a03@p? (unspecified)) (set! y2a05@make-implementation-restriction-violation (unspecified)) (set! y2a07@implementation-restriction-violation? (unspecified)) (set! y2a09@&implementation-restriction-rtd (unspecified)) (set! y2a0b@&implementation-restriction-rcd (unspecified)) (set! y2a11@y2a0c (unspecified)) (set! y2a13@y2a0e (unspecified)) (set! y2a15@y2a0d (unspecified)) (set! y2a18@p? (unspecified)) (set! y2a1a@make-lexical-violation (unspecified)) (set! y2a1c@lexical-violation? (unspecified)) (set! y2a1e@&lexical-rtd (unspecified)) (set! y2a20@&lexical-rcd (unspecified)) (set! y2a2a@y2a25 (unspecified)) (set! y2a2c@y2a27 (unspecified)) (set! y2a2e@y2a26 (unspecified)) (set! y2a31@p? (unspecified)) (set! y2a33@make-syntax-violation (unspecified)) (set! y2a35@y2a22 (unspecified)) (set! y2a37@y2a24 (unspecified)) (set! y2a39@syntax-violation? (unspecified)) (set! y2a3b@syntax-violation-form (unspecified)) (set! y2a3d@syntax-violation-subform (unspecified)) (set! y2a3f@&syntax-rtd (unspecified)) (set! y2a41@&syntax-rcd (unspecified)) (set! y2a47@y2a42 (unspecified)) (set! y2a49@y2a44 (unspecified)) (set! y2a4b@y2a43 (unspecified)) (set! y2a4e@p? (unspecified)) (set! y2a50@make-undefined-violation (unspecified)) (set! y2a52@undefined-violation? (unspecified)) (set! y2a54@&undefined-rtd (unspecified)) (set! y2a56@&undefined-rcd (unspecified)) (set! y2a5c@y2a57 (unspecified)) (set! y2a5e@y2a59 (unspecified)) (set! y2a60@y2a58 (unspecified)) (set! y2a63@p? (unspecified)) (set! y2a65@make-i/o-error (unspecified)) (set! y2a67@i/o-error? (unspecified)) (set! y2a69@&i/o-rtd (unspecified)) (set! y2a6b@&i/o-rcd (unspecified)) (set! y2a71@y2a6c (unspecified)) (set! y2a73@y2a6e (unspecified)) (set! y2a75@y2a6d (unspecified)) (set! y2a78@p? (unspecified)) (set! y2a7a@make-i/o-read-error (unspecified)) (set! y2a7c@i/o-read-error? (unspecified)) (set! y2a7e@&i/o-read-rtd (unspecified)) (set! y2a80@&i/o-read-rcd (unspecified)) (set! y2a86@y2a81 (unspecified)) (set! y2a88@y2a83 (unspecified)) (set! y2a8a@y2a82 (unspecified)) (set! y2a8d@p? (unspecified)) (set! y2a8f@make-i/o-write-error (unspecified)) (set! y2a91@i/o-write-error? (unspecified)) (set! y2a93@&i/o-write-rtd (unspecified)) (set! y2a95@&i/o-write-rcd (unspecified)) (set! y2a9d@y2a98 (unspecified)) (set! y2a9f@y2a9a (unspecified)) (set! y2aa1@y2a99 (unspecified)) (set! y2aa4@p? (unspecified)) (set! y2aa6@make-i/o-invalid-position-error (unspecified)) (set! y2aa8@y2a97 (unspecified)) (set! y2aaa@i/o-invalid-position-error? (unspecified)) (set! y2aac@i/o-error-position (unspecified)) (set! y2aae@&i/o-invalid-position-rtd (unspecified)) (set! y2ab0@&i/o-invalid-position-rcd (unspecified)) (set! y2ab8@y2ab3 (unspecified)) (set! y2aba@y2ab5 (unspecified)) (set! y2abc@y2ab4 (unspecified)) (set! y2abf@p? (unspecified)) (set! y2ac1@make-i/o-filename-error (unspecified)) (set! y2ac3@y2ab2 (unspecified)) (set! y2ac5@i/o-filename-error? (unspecified)) (set! y2ac7@i/o-error-filename (unspecified)) (set! y2ac9@&i/o-filename-rtd (unspecified)) (set! y2acb@&i/o-filename-rcd (unspecified)) (set! y2ad1@y2acc (unspecified)) (set! y2ad3@y2ace (unspecified)) (set! y2ad5@y2acd (unspecified)) (set! y2ad8@p? (unspecified)) (set! y2ada@make-i/o-file-protection-error (unspecified)) (set! y2adc@i/o-file-protection-error? (unspecified)) (set! y2ade@&i/o-file-protection-rtd (unspecified)) (set! y2ae0@&i/o-file-protection-rcd (unspecified)) (set! y2ae6@y2ae1 (unspecified)) (set! y2ae8@y2ae3 (unspecified)) (set! y2aea@y2ae2 (unspecified)) (set! y2aed@p? (unspecified)) (set! y2aef@make-i/o-file-is-read-only-error (unspecified)) (set! y2af1@i/o-file-is-read-only-error? (unspecified)) (set! y2af3@&i/o-file-is-read-only-rtd (unspecified)) (set! y2af5@&i/o-file-is-read-only-rcd (unspecified)) (set! y2afb@y2af6 (unspecified)) (set! y2afd@y2af8 (unspecified)) (set! y2aff@y2af7 (unspecified)) (set! y2b02@p? (unspecified)) (set! y2b04@make-i/o-file-already-exists-error (unspecified)) (set! y2b06@i/o-file-already-exists-error? (unspecified)) (set! y2b08@&i/o-file-already-exists-rtd (unspecified)) (set! y2b0a@&i/o-file-already-exists-rcd (unspecified)) (set! y2b10@y2b0b (unspecified)) (set! y2b12@y2b0d (unspecified)) (set! y2b14@y2b0c (unspecified)) (set! y2b17@p? (unspecified)) (set! y2b19@make-i/o-file-does-not-exist-error (unspecified)) (set! y2b1b@i/o-file-does-not-exist-error? (unspecified)) (set! y2b1d@&i/o-file-does-not-exist-rtd (unspecified)) (set! y2b1f@&i/o-file-does-not-exist-rcd (unspecified)) (set! y2b27@y2b22 (unspecified)) (set! y2b29@y2b24 (unspecified)) (set! y2b2b@y2b23 (unspecified)) (set! y2b2e@p? (unspecified)) (set! y2b30@make-i/o-port-error (unspecified)) (set! y2b32@y2b21 (unspecified)) (set! y2b34@i/o-port-error? (unspecified)) (set! y2b36@i/o-error-port (unspecified)) (set! y2b38@&i/o-port-rtd (unspecified)) (set! y2b3a@&i/o-port-rcd (unspecified)) (set! y2b40@y2b3b (unspecified)) (set! y2b42@y2b3d (unspecified)) (set! y2b44@y2b3c (unspecified)) (set! y2b47@p? (unspecified)) (set! y2b49@make-i/o-decoding-error (unspecified)) (set! y2b4b@i/o-decoding-error? (unspecified)) (set! y2b4d@&i/o-decoding-rtd (unspecified)) (set! y2b4f@&i/o-decoding-rcd (unspecified)) (set! y2b57@y2b52 (unspecified)) (set! y2b59@y2b54 (unspecified)) (set! y2b5b@y2b53 (unspecified)) (set! y2b5e@p? (unspecified)) (set! y2b60@make-i/o-encoding-error (unspecified)) (set! y2b62@y2b51 (unspecified)) (set! y2b64@i/o-encoding-error? (unspecified)) (set! y2b66@i/o-encoding-error-char (unspecified)) (set! y2b68@&i/o-encoding-rtd (unspecified)) (set! y2b6a@&i/o-encoding-rcd (unspecified)) (set! y2b70@y2b6b (unspecified)) (set! y2b72@y2b6d (unspecified)) (set! y2b74@y2b6c (unspecified)) (set! y2b77@p? (unspecified)) (set! y2b79@make-no-infinities-violation (unspecified)) (set! y2b7b@no-infinities-violation? (unspecified)) (set! y2b7d@&no-infinities-rtd (unspecified)) (set! y2b7f@&no-infinities-rcd (unspecified)) (set! y2b85@y2b80 (unspecified)) (set! y2b87@y2b82 (unspecified)) (set! y2b89@y2b81 (unspecified)) (set! y2b8c@p? (unspecified)) (set! y2b8e@make-no-nans-violation (unspecified)) (set! y2b90@no-nans-violation? (unspecified)) (set! y2b92@&no-nans-rtd (unspecified)) (set! y2b94@&no-nans-rcd (unspecified)) (set! y28d6@y28d1 (make-record-type-descriptor '&condition '#f 'y28d4 '#f '#f '#())) (set! y2b95@y28d6@y28d1 y28d6@y28d1) (set! y28d8@y28d3 '#f) (set! y2b96@y28d8@y28d3 y28d8@y28d3) (set! y28da@y28d2 (make-record-constructor-descriptor y28d6@y28d1 '#f y28d8@y28d3)) (set! y2b97@y28da@y28d2 y28da@y28d2) (set! y28dd@&condition? (record-predicate y28d6@y28d1)) (set! y2b98@y28dd@&condition? y28dd@&condition?) (set! y28df@make-&condition (record-constructor y28da@y28d2)) (set! y2b99@y28df@make-&condition y28df@make-&condition) (set! y28e1@&condition-rtd y28d6@y28d1) (set! y2b9a@y28e1@&condition-rtd y28e1@&condition-rtd) (set! y28e3@&condition-rcd y28da@y28d2) (set! y2b9b@y28e3@&condition-rcd y28e3@&condition-rcd) (set! y292f@y292a (make-record-type-descriptor '&message y28d6@y28d1 'y292d '#f '#f '#((immutable message)))) (set! y2b9c@y292f@y292a y292f@y292a) (set! y2931@y292c '#f) (set! y2b9d@y2931@y292c y2931@y292c) (set! y2933@y292b (make-record-constructor-descriptor y292f@y292a y28da@y28d2 y2931@y292c)) (set! y2b9e@y2933@y292b y2933@y292b) (set! y2936@p? (record-predicate y292f@y292a)) (set! y2b9f@y2936@p? y2936@p?) (set! y2938@make-message-condition (record-constructor y2933@y292b)) (set! y2ba0@y2938@make-message-condition y2938@make-message-condition) (set! y293a@y2929 (record-accessor y292f@y292a '0)) (set! y2ba1@y293a@y2929 y293a@y2929) (set! y293c@message-condition? (condition-predicate y292f@y292a)) (set! y2ba2@y293c@message-condition? y293c@message-condition?) (set! y293e@condition-message (condition-accessor y292f@y292a y293a@y2929)) (set! y2ba3@y293e@condition-message y293e@condition-message) (set! y2940@&message-rtd y292f@y292a) (set! y2ba4@y2940@&message-rtd y2940@&message-rtd) (set! y2942@&message-rcd y2933@y292b) (set! y2ba5@y2942@&message-rcd y2942@&message-rcd) (set! y2948@y2943 (make-record-type-descriptor '&warning y28d6@y28d1 'y2946 '#f '#f '#())) (set! y2ba6@y2948@y2943 y2948@y2943) (set! y294a@y2945 '#f) (set! y2ba7@y294a@y2945 y294a@y2945) (set! y294c@y2944 (make-record-constructor-descriptor y2948@y2943 y28da@y28d2 y294a@y2945)) (set! y2ba8@y294c@y2944 y294c@y2944) (set! y294f@p? (record-predicate y2948@y2943)) (set! y2ba9@y294f@p? y294f@p?) (set! y2951@make-warning (record-constructor y294c@y2944)) (set! y2baa@y2951@make-warning y2951@make-warning) (set! y2953@warning? (condition-predicate y2948@y2943)) (set! y2bab@y2953@warning? y2953@warning?) (set! y2955@&warning-rtd y2948@y2943) (set! y2bac@y2955@&warning-rtd y2955@&warning-rtd) (set! y2957@&warning-rcd y294c@y2944) (set! y2bad@y2957@&warning-rcd y2957@&warning-rcd) (set! y295d@y2958 (make-record-type-descriptor '&serious y28d6@y28d1 'y295b '#f '#f '#())) (set! y2bae@y295d@y2958 y295d@y2958) (set! y295f@y295a '#f) (set! y2baf@y295f@y295a y295f@y295a) (set! y2961@y2959 (make-record-constructor-descriptor y295d@y2958 y28da@y28d2 y295f@y295a)) (set! y2bb0@y2961@y2959 y2961@y2959) (set! y2964@p? (record-predicate y295d@y2958)) (set! y2bb1@y2964@p? y2964@p?) (set! y2966@make-serious-condition (record-constructor y2961@y2959)) (set! y2bb2@y2966@make-serious-condition y2966@make-serious-condition) (set! y2968@serious-condition? (condition-predicate y295d@y2958)) (set! y2bb3@y2968@serious-condition? y2968@serious-condition?) (set! y296a@&serious-rtd y295d@y2958) (set! y2bb4@y296a@&serious-rtd y296a@&serious-rtd) (set! y296c@&serious-rcd y2961@y2959) (set! y2bb5@y296c@&serious-rcd y296c@&serious-rcd) (set! y2972@y296d (make-record-type-descriptor '&error y295d@y2958 'y2970 '#f '#f '#())) (set! y2bb6@y2972@y296d y2972@y296d) (set! y2974@y296f '#f) (set! y2bb7@y2974@y296f y2974@y296f) (set! y2976@y296e (make-record-constructor-descriptor y2972@y296d y2961@y2959 y2974@y296f)) (set! y2bb8@y2976@y296e y2976@y296e) (set! y2979@p? (record-predicate y2972@y296d)) (set! y2bb9@y2979@p? y2979@p?) (set! y297b@make-error (record-constructor y2976@y296e)) (set! y2bba@y297b@make-error y297b@make-error) (set! y297d@error? (condition-predicate y2972@y296d)) (set! y2bbb@y297d@error? y297d@error?) (set! y297f@&error-rtd y2972@y296d) (set! y2bbc@y297f@&error-rtd y297f@&error-rtd) (set! y2981@&error-rcd y2976@y296e) (set! y2bbd@y2981@&error-rcd y2981@&error-rcd) (set! y2987@y2982 (make-record-type-descriptor '&violation y295d@y2958 'y2985 '#f '#f '#())) (set! y2bbe@y2987@y2982 y2987@y2982) (set! y2989@y2984 '#f) (set! y2bbf@y2989@y2984 y2989@y2984) (set! y298b@y2983 (make-record-constructor-descriptor y2987@y2982 y2961@y2959 y2989@y2984)) (set! y2bc0@y298b@y2983 y298b@y2983) (set! y298e@p? (record-predicate y2987@y2982)) (set! y2bc1@y298e@p? y298e@p?) (set! y2990@make-violation (record-constructor y298b@y2983)) (set! y2bc2@y2990@make-violation y2990@make-violation) (set! y2992@violation? (condition-predicate y2987@y2982)) (set! y2bc3@y2992@violation? y2992@violation?) (set! y2994@&violation-rtd y2987@y2982) (set! y2bc4@y2994@&violation-rtd y2994@&violation-rtd) (set! y2996@&violation-rcd y298b@y2983) (set! y2bc5@y2996@&violation-rcd y2996@&violation-rcd) (set! y299c@y2997 (make-record-type-descriptor '&assertion y2987@y2982 'y299a '#f '#f '#())) (set! y2bc6@y299c@y2997 y299c@y2997) (set! y299e@y2999 '#f) (set! y2bc7@y299e@y2999 y299e@y2999) (set! y29a0@y2998 (make-record-constructor-descriptor y299c@y2997 y298b@y2983 y299e@y2999)) (set! y2bc8@y29a0@y2998 y29a0@y2998) (set! y29a3@p? (record-predicate y299c@y2997)) (set! y2bc9@y29a3@p? y29a3@p?) (set! y29a5@make-assertion-violation (record-constructor y29a0@y2998)) (set! y2bca@y29a5@make-assertion-violation y29a5@make-assertion-violation) (set! y29a7@assertion-violation? (condition-predicate y299c@y2997)) (set! y2bcb@y29a7@assertion-violation? y29a7@assertion-violation?) (set! y29a9@&assertion-rtd y299c@y2997) (set! y2bcc@y29a9@&assertion-rtd y29a9@&assertion-rtd) (set! y29ab@&assertion-rcd y29a0@y2998) (set! y2bcd@y29ab@&assertion-rcd y29ab@&assertion-rcd) (set! y29b3@y29ae (make-record-type-descriptor '&irritants y28d6@y28d1 'y29b1 '#f '#f '#((immutable irritants)))) (set! y2bce@y29b3@y29ae y29b3@y29ae) (set! y29b5@y29b0 '#f) (set! y2bcf@y29b5@y29b0 y29b5@y29b0) (set! y29b7@y29af (make-record-constructor-descriptor y29b3@y29ae y28da@y28d2 y29b5@y29b0)) (set! y2bd0@y29b7@y29af y29b7@y29af) (set! y29ba@p? (record-predicate y29b3@y29ae)) (set! y2bd1@y29ba@p? y29ba@p?) (set! y29bc@make-irritants-condition (record-constructor y29b7@y29af)) (set! y2bd2@y29bc@make-irritants-condition y29bc@make-irritants-condition) (set! y29be@y29ad (record-accessor y29b3@y29ae '0)) (set! y2bd3@y29be@y29ad y29be@y29ad) (set! y29c0@irritants-condition? (condition-predicate y29b3@y29ae)) (set! y2bd4@y29c0@irritants-condition? y29c0@irritants-condition?) (set! y29c2@condition-irritants (condition-accessor y29b3@y29ae y29be@y29ad)) (set! y2bd5@y29c2@condition-irritants y29c2@condition-irritants) (set! y29c4@&irritants-rtd y29b3@y29ae) (set! y2bd6@y29c4@&irritants-rtd y29c4@&irritants-rtd) (set! y29c6@&irritants-rcd y29b7@y29af) (set! y2bd7@y29c6@&irritants-rcd y29c6@&irritants-rcd) (set! y29ce@y29c9 (make-record-type-descriptor '&who y28d6@y28d1 'y29cc '#f '#f '#((immutable who)))) (set! y2bd8@y29ce@y29c9 y29ce@y29c9) (set! y29d0@y29cb '#f) (set! y2bd9@y29d0@y29cb y29d0@y29cb) (set! y29d2@y29ca (make-record-constructor-descriptor y29ce@y29c9 y28da@y28d2 y29d0@y29cb)) (set! y2bda@y29d2@y29ca y29d2@y29ca) (set! y29d5@p? (record-predicate y29ce@y29c9)) (set! y2bdb@y29d5@p? y29d5@p?) (set! y29d7@make-who-condition (record-constructor y29d2@y29ca)) (set! y2bdc@y29d7@make-who-condition y29d7@make-who-condition) (set! y29d9@y29c8 (record-accessor y29ce@y29c9 '0)) (set! y2bdd@y29d9@y29c8 y29d9@y29c8) (set! y29db@who-condition? (condition-predicate y29ce@y29c9)) (set! y2bde@y29db@who-condition? y29db@who-condition?) (set! y29dd@condition-who (condition-accessor y29ce@y29c9 y29d9@y29c8)) (set! y2bdf@y29dd@condition-who y29dd@condition-who) (set! y29df@&who-rtd y29ce@y29c9) (set! y2be0@y29df@&who-rtd y29df@&who-rtd) (set! y29e1@&who-rcd y29d2@y29ca) (set! y2be1@y29e1@&who-rcd y29e1@&who-rcd) (set! y29e7@y29e2 (make-record-type-descriptor '&non-continuable y2987@y2982 'y29e5 '#f '#f '#())) (set! y2be2@y29e7@y29e2 y29e7@y29e2) (set! y29e9@y29e4 '#f) (set! y2be3@y29e9@y29e4 y29e9@y29e4) (set! y29eb@y29e3 (make-record-constructor-descriptor y29e7@y29e2 y298b@y2983 y29e9@y29e4)) (set! y2be4@y29eb@y29e3 y29eb@y29e3) (set! y29ee@p? (record-predicate y29e7@y29e2)) (set! y2be5@y29ee@p? y29ee@p?) (set! y29f0@make-non-continuable-violation (record-constructor y29eb@y29e3)) (set! y2be6@y29f0@make-non-continuable-violation y29f0@make-non-continuable-violation) (set! y29f2@non-continuable-violation? (condition-predicate y29e7@y29e2)) (set! y2be7@y29f2@non-continuable-violation? y29f2@non-continuable-violation?) (set! y29f4@&non-continuable-rtd y29e7@y29e2) (set! y2be8@y29f4@&non-continuable-rtd y29f4@&non-continuable-rtd) (set! y29f6@&non-continuable-rcd y29eb@y29e3) (set! y2be9@y29f6@&non-continuable-rcd y29f6@&non-continuable-rcd) (set! y29fc@y29f7 (make-record-type-descriptor '&implementation-restriction y2987@y2982 'y29fa '#f '#f '#())) (set! y2bea@y29fc@y29f7 y29fc@y29f7) (set! y29fe@y29f9 '#f) (set! y2beb@y29fe@y29f9 y29fe@y29f9) (set! y2a00@y29f8 (make-record-constructor-descriptor y29fc@y29f7 y298b@y2983 y29fe@y29f9)) (set! y2bec@y2a00@y29f8 y2a00@y29f8) (set! y2a03@p? (record-predicate y29fc@y29f7)) (set! y2bed@y2a03@p? y2a03@p?) (set! y2a05@make-implementation-restriction-violation (record-constructor y2a00@y29f8)) (set! y2bee@y2a05@make-implementation-restriction-violation y2a05@make-implementation-restriction-violation) (set! y2a07@implementation-restriction-violation? (condition-predicate y29fc@y29f7)) (set! y2bef@y2a07@implementation-restriction-violation? y2a07@implementation-restriction-violation?) (set! y2a09@&implementation-restriction-rtd y29fc@y29f7) (set! y2bf0@y2a09@&implementation-restriction-rtd y2a09@&implementation-restriction-rtd) (set! y2a0b@&implementation-restriction-rcd y2a00@y29f8) (set! y2bf1@y2a0b@&implementation-restriction-rcd y2a0b@&implementation-restriction-rcd) (set! y2a11@y2a0c (make-record-type-descriptor '&lexical y2987@y2982 'y2a0f '#f '#f '#())) (set! y2bf2@y2a11@y2a0c y2a11@y2a0c) (set! y2a13@y2a0e '#f) (set! y2bf3@y2a13@y2a0e y2a13@y2a0e) (set! y2a15@y2a0d (make-record-constructor-descriptor y2a11@y2a0c y298b@y2983 y2a13@y2a0e)) (set! y2bf4@y2a15@y2a0d y2a15@y2a0d) (set! y2a18@p? (record-predicate y2a11@y2a0c)) (set! y2bf5@y2a18@p? y2a18@p?) (set! y2a1a@make-lexical-violation (record-constructor y2a15@y2a0d)) (set! y2bf6@y2a1a@make-lexical-violation y2a1a@make-lexical-violation) (set! y2a1c@lexical-violation? (condition-predicate y2a11@y2a0c)) (set! y2bf7@y2a1c@lexical-violation? y2a1c@lexical-violation?) (set! y2a1e@&lexical-rtd y2a11@y2a0c) (set! y2bf8@y2a1e@&lexical-rtd y2a1e@&lexical-rtd) (set! y2a20@&lexical-rcd y2a15@y2a0d) (set! y2bf9@y2a20@&lexical-rcd y2a20@&lexical-rcd) (set! y2a2a@y2a25 (make-record-type-descriptor '&syntax y2987@y2982 'y2a28 '#f '#f '#((immutable form) (immutable subform)))) (set! y2bfa@y2a2a@y2a25 y2a2a@y2a25) (set! y2a2c@y2a27 '#f) (set! y2bfb@y2a2c@y2a27 y2a2c@y2a27) (set! y2a2e@y2a26 (make-record-constructor-descriptor y2a2a@y2a25 y298b@y2983 y2a2c@y2a27)) (set! y2bfc@y2a2e@y2a26 y2a2e@y2a26) (set! y2a31@p? (record-predicate y2a2a@y2a25)) (set! y2bfd@y2a31@p? y2a31@p?) (set! y2a33@make-syntax-violation (record-constructor y2a2e@y2a26)) (set! y2bfe@y2a33@make-syntax-violation y2a33@make-syntax-violation) (set! y2a35@y2a22 (record-accessor y2a2a@y2a25 '0)) (set! y2bff@y2a35@y2a22 y2a35@y2a22) (set! y2a37@y2a24 (record-accessor y2a2a@y2a25 '1)) (set! y2c00@y2a37@y2a24 y2a37@y2a24) (set! y2a39@syntax-violation? (condition-predicate y2a2a@y2a25)) (set! y2c01@y2a39@syntax-violation? y2a39@syntax-violation?) (set! y2a3b@syntax-violation-form (condition-accessor y2a2a@y2a25 y2a35@y2a22)) (set! y2c02@y2a3b@syntax-violation-form y2a3b@syntax-violation-form) (set! y2a3d@syntax-violation-subform (condition-accessor y2a2a@y2a25 y2a37@y2a24)) (set! y2c03@y2a3d@syntax-violation-subform y2a3d@syntax-violation-subform) (set! y2a3f@&syntax-rtd y2a2a@y2a25) (set! y2c04@y2a3f@&syntax-rtd y2a3f@&syntax-rtd) (set! y2a41@&syntax-rcd y2a2e@y2a26) (set! y2c05@y2a41@&syntax-rcd y2a41@&syntax-rcd) (set! y2a47@y2a42 (make-record-type-descriptor '&undefined y2987@y2982 'y2a45 '#f '#f '#())) (set! y2c06@y2a47@y2a42 y2a47@y2a42) (set! y2a49@y2a44 '#f) (set! y2c07@y2a49@y2a44 y2a49@y2a44) (set! y2a4b@y2a43 (make-record-constructor-descriptor y2a47@y2a42 y298b@y2983 y2a49@y2a44)) (set! y2c08@y2a4b@y2a43 y2a4b@y2a43) (set! y2a4e@p? (record-predicate y2a47@y2a42)) (set! y2c09@y2a4e@p? y2a4e@p?) (set! y2a50@make-undefined-violation (record-constructor y2a4b@y2a43)) (set! y2c0a@y2a50@make-undefined-violation y2a50@make-undefined-violation) (set! y2a52@undefined-violation? (condition-predicate y2a47@y2a42)) (set! y2c0b@y2a52@undefined-violation? y2a52@undefined-violation?) (set! y2a54@&undefined-rtd y2a47@y2a42) (set! y2c0c@y2a54@&undefined-rtd y2a54@&undefined-rtd) (set! y2a56@&undefined-rcd y2a4b@y2a43) (set! y2c0d@y2a56@&undefined-rcd y2a56@&undefined-rcd) (set! y2a5c@y2a57 (make-record-type-descriptor '&i/o y2972@y296d 'y2a5a '#f '#f '#())) (set! y2c0e@y2a5c@y2a57 y2a5c@y2a57) (set! y2a5e@y2a59 '#f) (set! y2c0f@y2a5e@y2a59 y2a5e@y2a59) (set! y2a60@y2a58 (make-record-constructor-descriptor y2a5c@y2a57 y2976@y296e y2a5e@y2a59)) (set! y2c10@y2a60@y2a58 y2a60@y2a58) (set! y2a63@p? (record-predicate y2a5c@y2a57)) (set! y2c11@y2a63@p? y2a63@p?) (set! y2a65@make-i/o-error (record-constructor y2a60@y2a58)) (set! y2c12@y2a65@make-i/o-error y2a65@make-i/o-error) (set! y2a67@i/o-error? (condition-predicate y2a5c@y2a57)) (set! y2c13@y2a67@i/o-error? y2a67@i/o-error?) (set! y2a69@&i/o-rtd y2a5c@y2a57) (set! y2c14@y2a69@&i/o-rtd y2a69@&i/o-rtd) (set! y2a6b@&i/o-rcd y2a60@y2a58) (set! y2c15@y2a6b@&i/o-rcd y2a6b@&i/o-rcd) (set! y2a71@y2a6c (make-record-type-descriptor '&i/o-read y2a5c@y2a57 'y2a6f '#f '#f '#())) (set! y2c16@y2a71@y2a6c y2a71@y2a6c) (set! y2a73@y2a6e '#f) (set! y2c17@y2a73@y2a6e y2a73@y2a6e) (set! y2a75@y2a6d (make-record-constructor-descriptor y2a71@y2a6c y2a60@y2a58 y2a73@y2a6e)) (set! y2c18@y2a75@y2a6d y2a75@y2a6d) (set! y2a78@p? (record-predicate y2a71@y2a6c)) (set! y2c19@y2a78@p? y2a78@p?) (set! y2a7a@make-i/o-read-error (record-constructor y2a75@y2a6d)) (set! y2c1a@y2a7a@make-i/o-read-error y2a7a@make-i/o-read-error) (set! y2a7c@i/o-read-error? (condition-predicate y2a71@y2a6c)) (set! y2c1b@y2a7c@i/o-read-error? y2a7c@i/o-read-error?) (set! y2a7e@&i/o-read-rtd y2a71@y2a6c) (set! y2c1c@y2a7e@&i/o-read-rtd y2a7e@&i/o-read-rtd) (set! y2a80@&i/o-read-rcd y2a75@y2a6d) (set! y2c1d@y2a80@&i/o-read-rcd y2a80@&i/o-read-rcd) (set! y2a86@y2a81 (make-record-type-descriptor '&i/o-write y2a5c@y2a57 'y2a84 '#f '#f '#())) (set! y2c1e@y2a86@y2a81 y2a86@y2a81) (set! y2a88@y2a83 '#f) (set! y2c1f@y2a88@y2a83 y2a88@y2a83) (set! y2a8a@y2a82 (make-record-constructor-descriptor y2a86@y2a81 y2a60@y2a58 y2a88@y2a83)) (set! y2c20@y2a8a@y2a82 y2a8a@y2a82) (set! y2a8d@p? (record-predicate y2a86@y2a81)) (set! y2c21@y2a8d@p? y2a8d@p?) (set! y2a8f@make-i/o-write-error (record-constructor y2a8a@y2a82)) (set! y2c22@y2a8f@make-i/o-write-error y2a8f@make-i/o-write-error) (set! y2a91@i/o-write-error? (condition-predicate y2a86@y2a81)) (set! y2c23@y2a91@i/o-write-error? y2a91@i/o-write-error?) (set! y2a93@&i/o-write-rtd y2a86@y2a81) (set! y2c24@y2a93@&i/o-write-rtd y2a93@&i/o-write-rtd) (set! y2a95@&i/o-write-rcd y2a8a@y2a82) (set! y2c25@y2a95@&i/o-write-rcd y2a95@&i/o-write-rcd) (set! y2a9d@y2a98 (make-record-type-descriptor '&i/o-invalid-position y2a5c@y2a57 'y2a9b '#f '#f '#((immutable position)))) (set! y2c26@y2a9d@y2a98 y2a9d@y2a98) (set! y2a9f@y2a9a '#f) (set! y2c27@y2a9f@y2a9a y2a9f@y2a9a) (set! y2aa1@y2a99 (make-record-constructor-descriptor y2a9d@y2a98 y2a60@y2a58 y2a9f@y2a9a)) (set! y2c28@y2aa1@y2a99 y2aa1@y2a99) (set! y2aa4@p? (record-predicate y2a9d@y2a98)) (set! y2c29@y2aa4@p? y2aa4@p?) (set! y2aa6@make-i/o-invalid-position-error (record-constructor y2aa1@y2a99)) (set! y2c2a@y2aa6@make-i/o-invalid-position-error y2aa6@make-i/o-invalid-position-error) (set! y2aa8@y2a97 (record-accessor y2a9d@y2a98 '0)) (set! y2c2b@y2aa8@y2a97 y2aa8@y2a97) (set! y2aaa@i/o-invalid-position-error? (condition-predicate y2a9d@y2a98)) (set! y2c2c@y2aaa@i/o-invalid-position-error? y2aaa@i/o-invalid-position-error?) (set! y2aac@i/o-error-position (condition-accessor y2a9d@y2a98 y2aa8@y2a97)) (set! y2c2d@y2aac@i/o-error-position y2aac@i/o-error-position) (set! y2aae@&i/o-invalid-position-rtd y2a9d@y2a98) (set! y2c2e@y2aae@&i/o-invalid-position-rtd y2aae@&i/o-invalid-position-rtd) (set! y2ab0@&i/o-invalid-position-rcd y2aa1@y2a99) (set! y2c2f@y2ab0@&i/o-invalid-position-rcd y2ab0@&i/o-invalid-position-rcd) (set! y2ab8@y2ab3 (make-record-type-descriptor '&i/o-filename y2a5c@y2a57 'y2ab6 '#f '#f '#((immutable filename)))) (set! y2c30@y2ab8@y2ab3 y2ab8@y2ab3) (set! y2aba@y2ab5 '#f) (set! y2c31@y2aba@y2ab5 y2aba@y2ab5) (set! y2abc@y2ab4 (make-record-constructor-descriptor y2ab8@y2ab3 y2a60@y2a58 y2aba@y2ab5)) (set! y2c32@y2abc@y2ab4 y2abc@y2ab4) (set! y2abf@p? (record-predicate y2ab8@y2ab3)) (set! y2c33@y2abf@p? y2abf@p?) (set! y2ac1@make-i/o-filename-error (record-constructor y2abc@y2ab4)) (set! y2c34@y2ac1@make-i/o-filename-error y2ac1@make-i/o-filename-error) (set! y2ac3@y2ab2 (record-accessor y2ab8@y2ab3 '0)) (set! y2c35@y2ac3@y2ab2 y2ac3@y2ab2) (set! y2ac5@i/o-filename-error? (condition-predicate y2ab8@y2ab3)) (set! y2c36@y2ac5@i/o-filename-error? y2ac5@i/o-filename-error?) (set! y2ac7@i/o-error-filename (condition-accessor y2ab8@y2ab3 y2ac3@y2ab2)) (set! y2c37@y2ac7@i/o-error-filename y2ac7@i/o-error-filename) (set! y2ac9@&i/o-filename-rtd y2ab8@y2ab3) (set! y2c38@y2ac9@&i/o-filename-rtd y2ac9@&i/o-filename-rtd) (set! y2acb@&i/o-filename-rcd y2abc@y2ab4) (set! y2c39@y2acb@&i/o-filename-rcd y2acb@&i/o-filename-rcd) (set! y2ad1@y2acc (make-record-type-descriptor '&i/o-file-protection y2ab8@y2ab3 'y2acf '#f '#f '#())) (set! y2c3a@y2ad1@y2acc y2ad1@y2acc) (set! y2ad3@y2ace '#f) (set! y2c3b@y2ad3@y2ace y2ad3@y2ace) (set! y2ad5@y2acd (make-record-constructor-descriptor y2ad1@y2acc y2abc@y2ab4 y2ad3@y2ace)) (set! y2c3c@y2ad5@y2acd y2ad5@y2acd) (set! y2ad8@p? (record-predicate y2ad1@y2acc)) (set! y2c3d@y2ad8@p? y2ad8@p?) (set! y2ada@make-i/o-file-protection-error (record-constructor y2ad5@y2acd)) (set! y2c3e@y2ada@make-i/o-file-protection-error y2ada@make-i/o-file-protection-error) (set! y2adc@i/o-file-protection-error? (condition-predicate y2ad1@y2acc)) (set! y2c3f@y2adc@i/o-file-protection-error? y2adc@i/o-file-protection-error?) (set! y2ade@&i/o-file-protection-rtd y2ad1@y2acc) (set! y2c40@y2ade@&i/o-file-protection-rtd y2ade@&i/o-file-protection-rtd) (set! y2ae0@&i/o-file-protection-rcd y2ad5@y2acd) (set! y2c41@y2ae0@&i/o-file-protection-rcd y2ae0@&i/o-file-protection-rcd) (set! y2ae6@y2ae1 (make-record-type-descriptor '&i/o-file-is-read-only y2ad1@y2acc 'y2ae4 '#f '#f '#())) (set! y2c42@y2ae6@y2ae1 y2ae6@y2ae1) (set! y2ae8@y2ae3 '#f) (set! y2c43@y2ae8@y2ae3 y2ae8@y2ae3) (set! y2aea@y2ae2 (make-record-constructor-descriptor y2ae6@y2ae1 y2ad5@y2acd y2ae8@y2ae3)) (set! y2c44@y2aea@y2ae2 y2aea@y2ae2) (set! y2aed@p? (record-predicate y2ae6@y2ae1)) (set! y2c45@y2aed@p? y2aed@p?) (set! y2aef@make-i/o-file-is-read-only-error (record-constructor y2aea@y2ae2)) (set! y2c46@y2aef@make-i/o-file-is-read-only-error y2aef@make-i/o-file-is-read-only-error) (set! y2af1@i/o-file-is-read-only-error? (condition-predicate y2ae6@y2ae1)) (set! y2c47@y2af1@i/o-file-is-read-only-error? y2af1@i/o-file-is-read-only-error?) (set! y2af3@&i/o-file-is-read-only-rtd y2ae6@y2ae1) (set! y2c48@y2af3@&i/o-file-is-read-only-rtd y2af3@&i/o-file-is-read-only-rtd) (set! y2af5@&i/o-file-is-read-only-rcd y2aea@y2ae2) (set! y2c49@y2af5@&i/o-file-is-read-only-rcd y2af5@&i/o-file-is-read-only-rcd) (set! y2afb@y2af6 (make-record-type-descriptor '&i/o-file-already-exists y2ab8@y2ab3 'y2af9 '#f '#f '#())) (set! y2c4a@y2afb@y2af6 y2afb@y2af6) (set! y2afd@y2af8 '#f) (set! y2c4b@y2afd@y2af8 y2afd@y2af8) (set! y2aff@y2af7 (make-record-constructor-descriptor y2afb@y2af6 y2abc@y2ab4 y2afd@y2af8)) (set! y2c4c@y2aff@y2af7 y2aff@y2af7) (set! y2b02@p? (record-predicate y2afb@y2af6)) (set! y2c4d@y2b02@p? y2b02@p?) (set! y2b04@make-i/o-file-already-exists-error (record-constructor y2aff@y2af7)) (set! y2c4e@y2b04@make-i/o-file-already-exists-error y2b04@make-i/o-file-already-exists-error) (set! y2b06@i/o-file-already-exists-error? (condition-predicate y2afb@y2af6)) (set! y2c4f@y2b06@i/o-file-already-exists-error? y2b06@i/o-file-already-exists-error?) (set! y2b08@&i/o-file-already-exists-rtd y2afb@y2af6) (set! y2c50@y2b08@&i/o-file-already-exists-rtd y2b08@&i/o-file-already-exists-rtd) (set! y2b0a@&i/o-file-already-exists-rcd y2aff@y2af7) (set! y2c51@y2b0a@&i/o-file-already-exists-rcd y2b0a@&i/o-file-already-exists-rcd) (set! y2b10@y2b0b (make-record-type-descriptor '&i/o-file-does-not-exist y2ab8@y2ab3 'y2b0e '#f '#f '#())) (set! y2c52@y2b10@y2b0b y2b10@y2b0b) (set! y2b12@y2b0d '#f) (set! y2c53@y2b12@y2b0d y2b12@y2b0d) (set! y2b14@y2b0c (make-record-constructor-descriptor y2b10@y2b0b y2abc@y2ab4 y2b12@y2b0d)) (set! y2c54@y2b14@y2b0c y2b14@y2b0c) (set! y2b17@p? (record-predicate y2b10@y2b0b)) (set! y2c55@y2b17@p? y2b17@p?) (set! y2b19@make-i/o-file-does-not-exist-error (record-constructor y2b14@y2b0c)) (set! y2c56@y2b19@make-i/o-file-does-not-exist-error y2b19@make-i/o-file-does-not-exist-error) (set! y2b1b@i/o-file-does-not-exist-error? (condition-predicate y2b10@y2b0b)) (set! y2c57@y2b1b@i/o-file-does-not-exist-error? y2b1b@i/o-file-does-not-exist-error?) (set! y2b1d@&i/o-file-does-not-exist-rtd y2b10@y2b0b) (set! y2c58@y2b1d@&i/o-file-does-not-exist-rtd y2b1d@&i/o-file-does-not-exist-rtd) (set! y2b1f@&i/o-file-does-not-exist-rcd y2b14@y2b0c) (set! y2c59@y2b1f@&i/o-file-does-not-exist-rcd y2b1f@&i/o-file-does-not-exist-rcd) (set! y2b27@y2b22 (make-record-type-descriptor '&i/o-port y2a5c@y2a57 'y2b25 '#f '#f '#((immutable port)))) (set! y2c5a@y2b27@y2b22 y2b27@y2b22) (set! y2b29@y2b24 '#f) (set! y2c5b@y2b29@y2b24 y2b29@y2b24) (set! y2b2b@y2b23 (make-record-constructor-descriptor y2b27@y2b22 y2a60@y2a58 y2b29@y2b24)) (set! y2c5c@y2b2b@y2b23 y2b2b@y2b23) (set! y2b2e@p? (record-predicate y2b27@y2b22)) (set! y2c5d@y2b2e@p? y2b2e@p?) (set! y2b30@make-i/o-port-error (record-constructor y2b2b@y2b23)) (set! y2c5e@y2b30@make-i/o-port-error y2b30@make-i/o-port-error) (set! y2b32@y2b21 (record-accessor y2b27@y2b22 '0)) (set! y2c5f@y2b32@y2b21 y2b32@y2b21) (set! y2b34@i/o-port-error? (condition-predicate y2b27@y2b22)) (set! y2c60@y2b34@i/o-port-error? y2b34@i/o-port-error?) (set! y2b36@i/o-error-port (condition-accessor y2b27@y2b22 y2b32@y2b21)) (set! y2c61@y2b36@i/o-error-port y2b36@i/o-error-port) (set! y2b38@&i/o-port-rtd y2b27@y2b22) (set! y2c62@y2b38@&i/o-port-rtd y2b38@&i/o-port-rtd) (set! y2b3a@&i/o-port-rcd y2b2b@y2b23) (set! y2c63@y2b3a@&i/o-port-rcd y2b3a@&i/o-port-rcd) (set! y2b40@y2b3b (make-record-type-descriptor '&i/o-decoding y2b27@y2b22 'y2b3e '#f '#f '#())) (set! y2c64@y2b40@y2b3b y2b40@y2b3b) (set! y2b42@y2b3d '#f) (set! y2c65@y2b42@y2b3d y2b42@y2b3d) (set! y2b44@y2b3c (make-record-constructor-descriptor y2b40@y2b3b y2b2b@y2b23 y2b42@y2b3d)) (set! y2c66@y2b44@y2b3c y2b44@y2b3c) (set! y2b47@p? (record-predicate y2b40@y2b3b)) (set! y2c67@y2b47@p? y2b47@p?) (set! y2b49@make-i/o-decoding-error (record-constructor y2b44@y2b3c)) (set! y2c68@y2b49@make-i/o-decoding-error y2b49@make-i/o-decoding-error) (set! y2b4b@i/o-decoding-error? (condition-predicate y2b40@y2b3b)) (set! y2c69@y2b4b@i/o-decoding-error? y2b4b@i/o-decoding-error?) (set! y2b4d@&i/o-decoding-rtd y2b40@y2b3b) (set! y2c6a@y2b4d@&i/o-decoding-rtd y2b4d@&i/o-decoding-rtd) (set! y2b4f@&i/o-decoding-rcd y2b44@y2b3c) (set! y2c6b@y2b4f@&i/o-decoding-rcd y2b4f@&i/o-decoding-rcd) (set! y2b57@y2b52 (make-record-type-descriptor '&i/o-encoding y2b27@y2b22 'y2b55 '#f '#f '#((immutable char)))) (set! y2c6c@y2b57@y2b52 y2b57@y2b52) (set! y2b59@y2b54 '#f) (set! y2c6d@y2b59@y2b54 y2b59@y2b54) (set! y2b5b@y2b53 (make-record-constructor-descriptor y2b57@y2b52 y2b2b@y2b23 y2b59@y2b54)) (set! y2c6e@y2b5b@y2b53 y2b5b@y2b53) (set! y2b5e@p? (record-predicate y2b57@y2b52)) (set! y2c6f@y2b5e@p? y2b5e@p?) (set! y2b60@make-i/o-encoding-error (record-constructor y2b5b@y2b53)) (set! y2c70@y2b60@make-i/o-encoding-error y2b60@make-i/o-encoding-error) (set! y2b62@y2b51 (record-accessor y2b57@y2b52 '0)) (set! y2c71@y2b62@y2b51 y2b62@y2b51) (set! y2b64@i/o-encoding-error? (condition-predicate y2b57@y2b52)) (set! y2c72@y2b64@i/o-encoding-error? y2b64@i/o-encoding-error?) (set! y2b66@i/o-encoding-error-char (condition-accessor y2b57@y2b52 y2b62@y2b51)) (set! y2c73@y2b66@i/o-encoding-error-char y2b66@i/o-encoding-error-char) (set! y2b68@&i/o-encoding-rtd y2b57@y2b52) (set! y2c74@y2b68@&i/o-encoding-rtd y2b68@&i/o-encoding-rtd) (set! y2b6a@&i/o-encoding-rcd y2b5b@y2b53) (set! y2c75@y2b6a@&i/o-encoding-rcd y2b6a@&i/o-encoding-rcd) (set! y2b70@y2b6b (make-record-type-descriptor '&no-infinities y29fc@y29f7 'y2b6e '#f '#f '#())) (set! y2c76@y2b70@y2b6b y2b70@y2b6b) (set! y2b72@y2b6d '#f) (set! y2c77@y2b72@y2b6d y2b72@y2b6d) (set! y2b74@y2b6c (make-record-constructor-descriptor y2b70@y2b6b y2a00@y29f8 y2b72@y2b6d)) (set! y2c78@y2b74@y2b6c y2b74@y2b6c) (set! y2b77@p? (record-predicate y2b70@y2b6b)) (set! y2c79@y2b77@p? y2b77@p?) (set! y2b79@make-no-infinities-violation (record-constructor y2b74@y2b6c)) (set! y2c7a@y2b79@make-no-infinities-violation y2b79@make-no-infinities-violation) (set! y2b7b@no-infinities-violation? (condition-predicate y2b70@y2b6b)) (set! y2c7b@y2b7b@no-infinities-violation? y2b7b@no-infinities-violation?) (set! y2b7d@&no-infinities-rtd y2b70@y2b6b) (set! y2c7c@y2b7d@&no-infinities-rtd y2b7d@&no-infinities-rtd) (set! y2b7f@&no-infinities-rcd y2b74@y2b6c) (set! y2c7d@y2b7f@&no-infinities-rcd y2b7f@&no-infinities-rcd) (set! y2b85@y2b80 (make-record-type-descriptor '&no-nans y29fc@y29f7 'y2b83 '#f '#f '#())) (set! y2c7e@y2b85@y2b80 y2b85@y2b80) (set! y2b87@y2b82 '#f) (set! y2c7f@y2b87@y2b82 y2b87@y2b82) (set! y2b89@y2b81 (make-record-constructor-descriptor y2b85@y2b80 y2a00@y29f8 y2b87@y2b82)) (set! y2c80@y2b89@y2b81 y2b89@y2b81) (set! y2b8c@p? (record-predicate y2b85@y2b80)) (set! y2c81@y2b8c@p? y2b8c@p?) (set! y2b8e@make-no-nans-violation (record-constructor y2b89@y2b81)) (set! y2c82@y2b8e@make-no-nans-violation y2b8e@make-no-nans-violation) (set! y2b90@no-nans-violation? (condition-predicate y2b85@y2b80)) (set! y2c83@y2b90@no-nans-violation? y2b90@no-nans-violation?) (set! y2b92@&no-nans-rtd y2b85@y2b80) (set! y2c84@y2b92@&no-nans-rtd y2b92@&no-nans-rtd) (set! y2b94@&no-nans-rcd y2b89@y2b81) (set! y2c85@y2b94@&no-nans-rcd y2b94@&no-nans-rcd) (void))
(begin (begin (y71b@y6d0@current-primitive-locations (lambda (y314f@x) (let ((y3151@t (assq y314f@x '((&no-nans-rcd . y2c85@y2b94@&no-nans-rcd) (&no-nans-rtd . y2c84@y2b92@&no-nans-rtd) (&no-infinities-rcd . y2c7d@y2b7f@&no-infinities-rcd) (&no-infinities-rtd . y2c7c@y2b7d@&no-infinities-rtd) (&i/o-encoding-rcd . y2c75@y2b6a@&i/o-encoding-rcd) (&i/o-encoding-rtd . y2c74@y2b68@&i/o-encoding-rtd) (&i/o-decoding-rcd . y2c6b@y2b4f@&i/o-decoding-rcd) (&i/o-decoding-rtd . y2c6a@y2b4d@&i/o-decoding-rtd) (&i/o-port-rcd . y2c63@y2b3a@&i/o-port-rcd) (&i/o-port-rtd . y2c62@y2b38@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . y2c59@y2b1f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . y2c58@y2b1d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . y2c51@y2b0a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . y2c50@y2b08@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . y2c49@y2af5@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . y2c48@y2af3@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . y2c41@y2ae0@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . y2c40@y2ade@&i/o-file-protection-rtd) (&i/o-filename-rcd . y2c39@y2acb@&i/o-filename-rcd) (&i/o-filename-rtd . y2c38@y2ac9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . y2c2f@y2ab0@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . y2c2e@y2aae@&i/o-invalid-position-rtd) (&i/o-write-rcd . y2c25@y2a95@&i/o-write-rcd) (&i/o-write-rtd . y2c24@y2a93@&i/o-write-rtd) (&i/o-read-rcd . y2c1d@y2a80@&i/o-read-rcd) (&i/o-read-rtd . y2c1c@y2a7e@&i/o-read-rtd) (&i/o-rcd . y2c15@y2a6b@&i/o-rcd) (&i/o-rtd . y2c14@y2a69@&i/o-rtd) (&undefined-rcd . y2c0d@y2a56@&undefined-rcd) (&undefined-rtd . y2c0c@y2a54@&undefined-rtd) (&syntax-rcd . y2c05@y2a41@&syntax-rcd) (&syntax-rtd . y2c04@y2a3f@&syntax-rtd) (&lexical-rcd . y2bf9@y2a20@&lexical-rcd) (&lexical-rtd . y2bf8@y2a1e@&lexical-rtd) (&implementation-restriction-rcd . y2bf1@y2a0b@&implementation-restriction-rcd) (&implementation-restriction-rtd . y2bf0@y2a09@&implementation-restriction-rtd) (&non-continuable-rcd . y2be9@y29f6@&non-continuable-rcd) (&non-continuable-rtd . y2be8@y29f4@&non-continuable-rtd) (&who-rcd . y2be1@y29e1@&who-rcd) (&who-rtd . y2be0@y29df@&who-rtd) (&irritants-rcd . y2bd7@y29c6@&irritants-rcd) (&irritants-rtd . y2bd6@y29c4@&irritants-rtd) (&assertion-rcd . y2bcd@y29ab@&assertion-rcd) (&assertion-rtd . y2bcc@y29a9@&assertion-rtd) (&violation-rcd . y2bc5@y2996@&violation-rcd) (&violation-rtd . y2bc4@y2994@&violation-rtd) (&error-rcd . y2bbd@y2981@&error-rcd) (&error-rtd . y2bbc@y297f@&error-rtd) (&serious-rcd . y2bb5@y296c@&serious-rcd) (&serious-rtd . y2bb4@y296a@&serious-rtd) (&warning-rcd . y2bad@y2957@&warning-rcd) (&warning-rtd . y2bac@y2955@&warning-rtd) (&message-rcd . y2ba5@y2942@&message-rcd) (&message-rtd . y2ba4@y2940@&message-rtd) (&condition-rcd . y2b9b@y28e3@&condition-rcd) (&condition-rtd . y2b9a@y28e1@&condition-rtd) (syntax-error . y28bd@ye61@syntax-error) (syntax-dispatch . y285b@yd85@syntax-dispatch) (load . y2ded@y2ca3@load) (interaction-environment . y28c6@ye73@interaction-environment) (library-path . y982@y7be@library-path) (mosh-cache-dir . y6c9@y5a9@mosh-cache-dir) (make-parameter . y6c8@y5a7@make-parameter) (make-variable-transformer . y2818@ybb0@make-variable-transformer) (identifier? . y28c0@ye67@identifier?) (generate-temporaries . y28b6@ye53@generate-temporaries) (free-identifier=? . y28b7@ye55@free-identifier=?) (syntax->datum . y28c2@ye6b@syntax->datum) (datum->syntax . y28c1@ye69@datum->syntax) (bound-identifier=? . y28b8@ye57@bound-identifier=?) (make-i/o-write-error . y2c22@y2a8f@make-i/o-write-error) (make-i/o-read-error . y2c1a@y2a7a@make-i/o-read-error) (make-i/o-port-error . y2c5e@y2b30@make-i/o-port-error) (make-i/o-invalid-position-error . y2c2a@y2aa6@make-i/o-invalid-position-error) (make-i/o-filename-error . y2c34@y2ac1@make-i/o-filename-error) (make-i/o-file-protection-error . y2c3e@y2ada@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . y2c46@y2aef@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . y2c56@y2b19@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . y2c4e@y2b04@make-i/o-file-already-exists-error) (make-i/o-error . y2c12@y2a65@make-i/o-error) (make-i/o-encoding-error . y2c70@y2b60@make-i/o-encoding-error) (make-i/o-decoding-error . y2c68@y2b49@make-i/o-decoding-error) (i/o-write-error? . y2c23@y2a91@i/o-write-error?) (i/o-read-error? . y2c1b@y2a7c@i/o-read-error?) (i/o-port-error? . y2c60@y2b34@i/o-port-error?) (i/o-invalid-position-error? . y2c2c@y2aaa@i/o-invalid-position-error?) (i/o-filename-error? . y2c36@y2ac5@i/o-filename-error?) (i/o-file-protection-error? . y2c3f@y2adc@i/o-file-protection-error?) (i/o-file-is-read-only-error? . y2c47@y2af1@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . y2c57@y2b1b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . y2c4f@y2b06@i/o-file-already-exists-error?) (i/o-error? . y2c13@y2a67@i/o-error?) (i/o-error-position . y2c2d@y2aac@i/o-error-position) (i/o-error-port . y2c61@y2b36@i/o-error-port) (i/o-error-filename . y2c37@y2ac7@i/o-error-filename) (i/o-encoding-error? . y2c72@y2b64@i/o-encoding-error?) (i/o-encoding-error-char . y2c73@y2b66@i/o-encoding-error-char) (i/o-decoding-error? . y2c69@y2b4b@i/o-decoding-error?) (scheme-report-environment . y28ad@ye41@scheme-report-environment) (null-environment . y28ac@ye3f@null-environment) (command-line . y2dea@y2c9d@command-line) (eval . y28af@ye45@eval) (environment . y28ab@ye3d@environment) (who-condition? . y2bde@y29db@who-condition?) (warning? . y2bab@y2953@warning?) (violation? . y2bc3@y2992@violation?) (undefined-violation? . y2c0b@y2a52@undefined-violation?) (syntax-violation? . y2c01@y2a39@syntax-violation?) (syntax-violation-subform . y2c03@y2a3d@syntax-violation-subform) (syntax-violation-form . y2c02@y2a3b@syntax-violation-form) (syntax-violation . y28bf@ye65@syntax-violation) (serious-condition? . y2bb3@y2968@serious-condition?) (non-continuable-violation? . y2be7@y29f2@non-continuable-violation?) (message-condition? . y2ba2@y293c@message-condition?) (make-who-condition . y2bdc@y29d7@make-who-condition) (make-warning . y2baa@y2951@make-warning) (make-violation . y2bc2@y2990@make-violation) (make-undefined-violation . y2c0a@y2a50@make-undefined-violation) (make-syntax-violation . y2bfe@y2a33@make-syntax-violation) (make-serious-condition . y2bb2@y2966@make-serious-condition) (make-non-continuable-violation . y2be6@y29f0@make-non-continuable-violation) (make-message-condition . y2ba0@y2938@make-message-condition) (make-lexical-violation . y2bf6@y2a1a@make-lexical-violation) (make-irritants-condition . y2bd2@y29bc@make-irritants-condition) (make-implementation-restriction-violation . y2bee@y2a05@make-implementation-restriction-violation) (make-error . y2bba@y297b@make-error) (make-assertion-violation . y2bca@y29a5@make-assertion-violation) (lexical-violation? . y2bf7@y2a1c@lexical-violation?) (irritants-condition? . y2bd4@y29c0@irritants-condition?) (implementation-restriction-violation? . y2bef@y2a07@implementation-restriction-violation?) (error? . y2bbb@y297d@error?) (condition-who . y2bdf@y29dd@condition-who) (condition-message . y2ba3@y293e@condition-message) (condition-irritants . y2bd5@y29c2@condition-irritants) (assertion-violation? . y2bcb@y29a7@assertion-violation?) (no-nans-violation? . y2c83@y2b90@no-nans-violation?) (no-infinities-violation? . y2c7b@y2b7b@no-infinities-violation?) (make-no-nans-violation . y2c82@y2b8e@make-no-nans-violation) (make-no-infinities-violation . y2c7a@y2b79@make-no-infinities-violation) (assertion-error . y28bc@ye5f@assertion-error))))) (if y3151@t (cdr y3151@t) '#f)))) (y992@y7de@install-library 'y312c '(mosh interaction) '() '() '() '() '((regexp? . y3124) (alist->eq-hash-table . y3120) (format . y311d) (string-split . y3111) (call-process . y310b) (set-current-directory! . y3107) (expand-path . y3106) (current-directory . y3105) (%spawn . y3104) (%waitpid . y3103) (simple-struct-name . y3102) (simple-struct-set! . y3101) (simple-struct-ref . y3100) (make-simple-struct . y30ff) (simple-struct? . y30fe) (pointer-ref-c-int64 . y30fd) (pointer-ref-c-int32 . y30fc) (pointer-ref-c-int16 . y30fb) (pointer-ref-c-int8 . y30fa) (pointer-ref-c-uint64 . y30f9) (pointer-ref-c-uint32 . y30f8) (pointer-ref-c-uint16 . y30f7) (pointer-ref-c-uint8 . y30f6) (pointer-set-c-uint64! . y30f5) (pointer-set-c-uint32! . y30f4) (pointer-set-c-uint16! . y30f3) (pointer-set-c-uint8! . y30f2) (pointer-set-c-int64! . y30f1) (pointer-set-c-int32! . y30f0) (pointer-set-c-int16! . y30ef) (pointer-set-c-int8! . y30ee) (pointer-set-c-pointer! . y30ed) (pointer-set-c-double! . y30ec) (pointer-set-c-float! . y30eb) (pointer-set-c-long-long! . y30ea) (pointer-set-c-long! . y30e9) (pointer-set-c-int! . y30e8) (pointer-set-c-short! . y30e7) (pointer-set-c-char! . y30e6) (pointer-ref-c-pointer . y30e5) (pointer-ref-c-double . y30e4) (pointer-ref-c-float . y30e3) (pointer-ref-c-unsigned-long-long . y30e2) (pointer-ref-c-signed-long-long . y30e1) (pointer-ref-c-unsigned-long . y30e0) (pointer-ref-c-signed-long . y30df) (pointer-ref-c-unsigned-int . y30de) (pointer-ref-c-signed-int . y30dd) (pointer-ref-c-unsigned-short . y30dc) (pointer-ref-c-signed-short . y30db) (pointer-ref-c-unsigned-char . y30da) (pointer-ref-c-signed-char . y30d9) (pointer->integer . y30d8) (integer->pointer . y30d7) (pointer? . y30d6) (shared-errno . y30d5) (%ffi-supported? . y30cd) (%ffi-pointer->string . y30cc) (%ffi-call->string-or-zero . y30cb) (%ffi-call->double . y30ca) (%ffi-call->void* . y30c9) (%ffi-call->void . y30c8) (%ffi-call->char . y30c7) (%ffi-call->int . y30c6) (%ffi-lookup . y30c5) (%ffi-open . y30c4) (%fork . y30c3) (%pipe . y30c2) (p . y30c1) (whereis . y30a5) (register . y30a4) (vm-join! . y30a3) (vm-set-value! . y30a2) (vm? . y30a1) (main-vm? . y30a0) (vm-eval . y309f) (vm-self . y309e) (vm-start! . y309d) (make-vm . y309c) (mutex-try-lock! . y309b) (mutex-unlock! . y309a) (mutex-lock! . y3099) (mutex? . y3098) (make-mutex . y3097) (condition-variable-notify-all! . y3096) (condition-variable-notify! . y3095) (condition-variable-wait! . y3094) (make-condition-variable . y3093) (string-upcase . y3076) (string-titlecase . y3075) (string-normalize-nfkd . y3074) (string-normalize-nfkc . y3073) (string-normalize-nfd . y3072) (string-normalize-nfc . y3071) (string-foldcase . y3070) (string-downcase . y306f) (string-ci>? . y306e) (string-ci>=? . y306d) (string-ci=? . y306c) (string-ci<? . y306b) (string-ci<=? . y306a) (char-whitespace? . y3069) (char-upper-case? . y3068) (char-title-case? . y3067) (char-numeric? . y3066) (char-lower-case? . y3065) (char-general-category . y3064) (char-upcase . y3063) (char-titlecase . y3062) (char-foldcase . y3061) (char-downcase . y3060) (char-ci>? . y305f) (char-ci>=? . y305e) (char-ci=? . y305d) (char-ci<? . y305c) (char-ci<=? . y305b) (char-alphabetic? . y305a) (make-variable-transformer . ybaf) (identifier? . ye66) (generate-temporaries . ye52) (free-identifier=? . ye54) (syntax->datum . ye6a) (datum->syntax . ye68) (bound-identifier=? . ye56) (record-type-descriptor? . y3059) (record-predicate . y3058) (record-mutator . y3057) (record-constructor . y3056) (record-accessor . y3055) (make-record-type-descriptor . y3054) (make-record-constructor-descriptor . y3053) (record? . y3052) (record-type-uid . y3051) (record-type-sealed? . y3050) (record-type-parent . y304f) (record-type-opaque? . y304e) (record-type-name . y304d) (record-type-generative? . y304c) (record-type-field-names . y304b) (record-rtd . y304a) (record-field-mutable? . y3049) (delete-file . y3048) (file-exists? . y3047) (vector-sort! . y3046) (vector-sort . y3045) (list-sort . y3044) (symbol-hash . y3043) (string-ci-hash . y3042) (string-hash . y3041) (equal-hash . y3040) (hashtable-equivalence-function . y303f) (make-hashtable . y303e) (hashtable-hash-function . y303d) (make-eqv-hashtable . y303c) (make-eq-hashtable . y303b) (hashtable? . y303a) (hashtable-update! . y3039) (hashtable-size . y3038) (hashtable-set! . y3037) (hashtable-ref . y3036) (hashtable-mutable? . y3035) (hashtable-keys . y3034) (hashtable-entries . y3033) (hashtable-delete! . y3032) (hashtable-copy . y3031) (hashtable-contains? . y3030) (hashtable-clear! . y302f) (call-with-output-file . y302e) (call-with-input-file . y302d) (write-char . y302c) (write . y302b) (with-output-to-file . y302a) (with-input-from-file . y3029) (read-char . y3028) (read . y3027) (peek-char . y3026) (open-output-file . y3025) (open-input-file . y3024) (newline . y3023) (display . y3022) (close-output-port . y3021) (close-input-port . y3020) (eof-object? . y301f) (eof-object . y301e) (current-error-port . y301d) (current-output-port . y301c) (current-input-port . y301b) (output-port? . y301a) (input-port? . y3019) (utf-8-codec . y3018) (utf-16-codec . y3017) (transcoder-error-handling-mode . y3016) (transcoder-eol-style . y3015) (transcoder-codec . y3014) (transcoded-port . y3013) (textual-port? . y3012) (string->bytevector . y3011) (standard-output-port . y3010) (standard-input-port . y300f) (standard-error-port . y300e) (set-port-position! . y300d) (put-u8 . y300c) (put-string . y300b) (put-datum . y300a) (put-char . y3009) (put-bytevector . y3008) (port? . y3007) (port-transcoder . y3006) (port-position . y3005) (port-has-set-port-position!? . y3004) (port-has-port-position? . y3003) (port-eof? . y3002) (output-port-buffer-mode . y3001) (open-string-output-port . y3000) (open-string-input-port . y2fff) (open-file-output-port . y2ffe) (open-file-input/output-port . y2ffd) (open-file-input-port . y2ffc) (open-bytevector-output-port . y2ffb) (open-bytevector-input-port . y2ffa) (native-transcoder . y2ff9) (native-eol-style . y2ff8) (make-transcoder . y2ff7) (latin-1-codec . y2ff6) (make-i/o-write-error . y2a8e) (make-i/o-read-error . y2a79) (make-i/o-port-error . y2b2f) (make-i/o-invalid-position-error . y2aa5) (make-i/o-filename-error . y2ac0) (make-i/o-file-protection-error . y2ad9) (make-i/o-file-is-read-only-error . y2aee) (make-i/o-file-does-not-exist-error . y2b18) (make-i/o-file-already-exists-error . y2b03) (make-i/o-error . y2a64) (make-i/o-encoding-error . y2b5f) (make-i/o-decoding-error . y2b48) (make-custom-textual-output-port . y2ff5) (make-custom-textual-input/output-port . y2ff4) (make-custom-textual-input-port . y2ff3) (make-custom-binary-output-port . y2ff2) (make-custom-binary-input/output-port . y2ff1) (make-custom-binary-input-port . y2ff0) (make-bytevector . y2fef) (lookahead-u8 . y2fee) (lookahead-char . y2fed) (i/o-write-error? . y2a90) (i/o-read-error? . y2a7b) (i/o-port-error? . y2b33) (i/o-invalid-position-error? . y2aa9) (i/o-filename-error? . y2ac4) (i/o-file-protection-error? . y2adb) (i/o-file-is-read-only-error? . y2af0) (i/o-file-does-not-exist-error? . y2b1a) (i/o-file-already-exists-error? . y2b05) (i/o-error? . y2a66) (i/o-error-position . y2aab) (i/o-error-port . y2b35) (i/o-error-filename . y2ac6) (i/o-encoding-error? . y2b63) (i/o-encoding-error-char . y2b65) (i/o-decoding-error? . y2b4a) (get-u8 . y2fec) (get-string-n! . y2feb) (get-string-n . y2fea) (get-string-all . y2fe9) (get-line . y2fe8) (get-datum . y2fe7) (get-char . y2fe6) (get-bytevector-some . y2fe5) (get-bytevector-n! . y2fe4) (get-bytevector-n . y2fe3) (get-bytevector-all . y2fe2) (flush-output-port . y2fe1) (close-port . y2fe0) (exit . y2fd8) (command-line . y2c9c) (string-fill! . y2fd7) (string-set! . y2fd6) (set-cdr! . y2fd5) (set-car! . y2fd4) (remove . y2fd3) (remv . y2fd2) (remp . y2fd1) (remq . y2fd0) (partition . y2fcf) (memv . y2fce) (memq . y2fcd) (memp . y2fcc) (member . y2fcb) (exists . y2fca) (for-all . y2fc9) (fold-right . y2fc8) (fold-left . y2fc7) (find . y2fc6) (filter . y2fc5) (cons* . y2fc4) (assv . y2fc3) (assq . y2fc2) (assp . y2fc1) (assoc . y2fc0) (call-with-string-output-port . y2fbf) (call-with-port . y2fbe) (call-with-bytevector-output-port . y2fbd) (bytevector->string . y2fbc) (buffer-mode? . y2fbb) (binary-port? . y2fba) (with-exception-handler . y2fb9) (raise-continuable . y2fb8) (raise . y2fb7) (eval . ye44) (environment . ye3c) (make-enumeration . y2fb6) (enum-set=? . y2fb5) (enum-set-universe . y2fb4) (enum-set-union . y2fb3) (enum-set-subset? . y2fb2) (enum-set-projection . y2fb1) (enum-set-member? . y2fb0) (enum-set-intersection . y2faf) (enum-set-indexer . y2fae) (enum-set-difference . y2fad) (enum-set-constructor . y2fac) (enum-set-complement . y2fab) (enum-set->list . y2faa) (who-condition? . y29da) (warning? . y2952) (violation? . y2991) (undefined-violation? . y2a51) (syntax-violation? . y2a38) (syntax-violation-subform . y2a3c) (syntax-violation-form . y2a3a) (syntax-violation . ye64) (simple-conditions . y2fa9) (serious-condition? . y2967) (non-continuable-violation? . y29f1) (message-condition? . y293b) (make-who-condition . y29d6) (make-warning . y2950) (make-violation . y298f) (make-undefined-violation . y2a4f) (make-syntax-violation . y2a32) (make-serious-condition . y2965) (make-non-continuable-violation . y29ef) (make-message-condition . y2937) (make-lexical-violation . y2a19) (make-irritants-condition . y29bb) (make-implementation-restriction-violation . y2a04) (make-error . y297a) (make-assertion-violation . y29a4) (lexical-violation? . y2a1b) (irritants-condition? . y29bf) (implementation-restriction-violation? . y2a06) (error? . y297c) (condition-who . y29dc) (condition-predicate . y2fa8) (condition-message . y293d) (condition-irritants . y29c1) (condition-accessor . y2fa7) (condition . y2fa6) (assertion-violation? . y29a6) (condition? . y2fa5) (utf32->string . y2fa4) (utf16->string . y2fa3) (utf8->string . y2fa2) (uint-list->bytevector . y2fa1) (u8-list->bytevector . y2fa0) (string->utf8 . y2f9f) (string->utf32 . y2f9e) (string->utf16 . y2f9d) (sint-list->bytevector . y2f9c) (native-endianness . y2f9b) (bytevector? . y2f9a) (bytevector=? . y2f99) (bytevector-uint-set! . y2f98) (bytevector-uint-ref . y2f97) (bytevector-u8-set! . y2f96) (bytevector-u8-ref . y2f95) (bytevector-u64-set! . y2f94) (bytevector-u64-ref . y2f93) (bytevector-u64-native-set! . y2f92) (bytevector-u64-native-ref . y2f91) (bytevector-u32-set! . y2f90) (bytevector-u32-ref . y2f8f) (bytevector-u32-native-set! . y2f8e) (bytevector-u32-native-ref . y2f8d) (bytevector-u16-set! . y2f8c) (bytevector-u16-ref . y2f8b) (bytevector-u16-native-set! . y2f8a) (bytevector-u16-native-ref . y2f89) (bytevector-sint-set! . y2f88) (bytevector-sint-ref . y2f87) (bytevector-s8-set! . y2f86) (bytevector-s8-ref . y2f85) (bytevector-s64-set! . y2f84) (bytevector-s64-ref . y2f83) (bytevector-s64-native-set! . y2f82) (bytevector-s64-native-ref . y2f81) (bytevector-s32-set! . y2f80) (bytevector-s32-ref . y2f7f) (bytevector-s32-native-set! . y2f7e) (bytevector-s32-native-ref . y2f7d) (bytevector-s16-set! . y2f7c) (bytevector-s16-ref . y2f7b) (bytevector-s16-native-set! . y2f7a) (bytevector-s16-native-ref . y2f79) (bytevector-length . y2f78) (bytevector-ieee-single-ref . y2f77) (bytevector-ieee-single-set! . y2f76) (bytevector-ieee-single-native-set! . y2f75) (bytevector-ieee-single-native-ref . y2f74) (bytevector-ieee-double-set! . y2f73) (bytevector-ieee-double-ref . y2f72) (bytevector-ieee-double-native-set! . y2f71) (bytevector-ieee-double-native-ref . y2f70) (bytevector-fill! . y2f6f) (bytevector-copy! . y2f6e) (bytevector-copy . y2f6d) (bytevector->uint-list . y2f6c) (bytevector->u8-list . y2f6b) (bytevector->sint-list . y2f6a) (no-nans-violation? . y2b8f) (no-infinities-violation? . y2b7a) (make-no-nans-violation . y2b8d) (make-no-infinities-violation . y2b78) (real->flonum . y2f69) (flzero? . y2f68) (fltruncate . y2f67) (fltan . y2f66) (flsqrt . y2f65) (flsin . y2f64) (flround . y2f63) (flpositive? . y2f62) (flonum? . y2f61) (flodd? . y2f60) (flnumerator . y2f5f) (flnegative? . y2f5e) (flnan? . y2f5d) (flmod0 . y2f5c) (flmod . y2f5b) (flmin . y2f5a) (flmax . y2f59) (fllog . y2f58) (flinteger? . y2f57) (flinfinite? . y2f56) (flfloor . y2f55) (flfinite? . y2f54) (flexpt . y2f53) (flexp . y2f52) (fleven? . y2f51) (fldiv0-and-mod0 . y2f50) (fldiv0 . y2f4f) (fldiv-and-mod . y2f4e) (fldiv . y2f4d) (fldenominator . y2f4c) (flcos . y2f4b) (flceiling . y2f4a) (flatan . y2f49) (flasin . y2f48) (flacos . y2f47) (flabs . y2f46) (fl>? . y2f45) (fl>=? . y2f44) (fl=? . y2f43) (fl<? . y2f42) (fl<=? . y2f41) (fl/ . y2f40) (fl- . y2f3f) (fl+ . y2f3e) (fl* . y2f3d) (fixnum->flonum . y2f3c) (fxzero? . y2f3b) (fxxor . y2f3a) (fxrotate-bit-field . y2f39) (fxreverse-bit-field . y2f38) (fxpositive? . y2f37) (fxodd? . y2f36) (fxnot . y2f35) (fxnegative? . y2f34) (fxmod0 . y2f33) (fxmod . y2f32) (fxmin . y2f31) (fxmax . y2f30) (fxlength . y2f2f) (fxior . y2f2e) (fxif . y2f2d) (fxfirst-bit-set . y2f2c) (fxeven? . y2f2b) (fxdiv0-and-mod0 . y2f2a) (fxdiv0 . y2f29) (fxdiv-and-mod . y2f28) (fxdiv . y2f27) (fxcopy-bit-field . y2f26) (fxcopy-bit . y2f25) (fxbit-set? . y2f24) (fxbit-field . y2f23) (fxbit-count . y2f22) (fxarithmetic-shift-right . y2f21) (fxarithmetic-shift-left . y2f20) (fxarithmetic-shift . y2f1f) (fxand . y2f1e) (fx>? . y2f1d) (fx>=? . y2f1c) (fx=? . y2f1b) (fx<? . y2f1a) (fx<=? . y2f19) (fx-/carry . y2f18) (fx- . y2f17) (fx+/carry . y2f16) (fx+ . y2f15) (fx*/carry . y2f14) (fx* . y2f13) (greatest-fixnum . y2f12) (least-fixnum . y2f11) (fixnum-width . y2f10) (fixnum? . y2f0f) (bitwise-rotate-bit-field . y2f0e) (bitwise-reverse-bit-field . y2f0d) (bitwise-length . y2f0c) (bitwise-if . y2f0b) (bitwise-first-bit-set . y2f0a) (bitwise-copy-bit-field . y2f09) (bitwise-copy-bit . y2f08) (bitwise-bit-set? . y2f07) (bitwise-bit-field . y2f06) (bitwise-bit-count . y2f05) (bitwise-xor . y2f04) (bitwise-ior . y2f03) (bitwise-and . y2f02) (bitwise-not . y2f01) (bitwise-arithmetic-shift-right . y2f00) (bitwise-arithmetic-shift-left . y2eff) (bitwise-arithmetic-shift . y2efe) (zero? . y2efd) (vector? . y2efc) (vector-set! . y2efb) (vector-ref . y2efa) (vector-map . y2ef9) (vector-length . y2ef8) (vector-for-each . y2ef7) (vector-fill! . y2ef6) (vector->list . y2ef5) (vector . y2ef4) (values . y2ef3) (truncate . y2ef2) (tan . y2ef1) (symbol? . y2ef0) (symbol=? . y2eef) (symbol->string . y2eee) (substring . y2eed) (string? . y2eec) (string>? . y2eeb) (string>=? . y2eea) (string=? . y2ee9) (string<? . y2ee8) (string<=? . y2ee7) (string-ref . y2ee6) (string-length . y2ee5) (string-for-each . y2ee4) (string-copy . y2ee3) (string-append . y2ee2) (string->symbol . y2ee1) (string->number . y2ee0) (string->list . y2edf) (string . y2ede) (sqrt . y2edd) (sin . y2edc) (round . y2edb) (reverse . y2eda) (real? . y2ed9) (real-valued? . y2ed8) (real-part . y2ed7) (rationalize . y2ed6) (rational? . y2ed5) (rational-valued? . y2ed4) (procedure? . y2ed3) (positive? . y2ed2) (pair? . y2ed1) (odd? . y2ed0) (numerator . y2ecf) (number? . y2ece) (number->string . y2ecd) (null? . y2ecc) (not . y2ecb) (negative? . y2eca) (nan? . y2ec9) (min . y2ec8) (max . y2ec7) (map . y2ec6) (make-vector . y2ec5) (make-string . y2ec4) (make-rectangular . y2ec3) (make-polar . y2ec2) (magnitude . y2ec1) (log . y2ec0) (list? . y2ebf) (list-tail . y2ebe) (list-ref . y2ebd) (list->vector . y2ebc) (list->string . y2ebb) (list . y2eba) (length . y2eb9) (lcm . y2eb8) (integer? . y2eb7) (integer-valued? . y2eb6) (integer->char . y2eb5) (infinite? . y2eb4) (inexact? . y2eb3) (inexact . y2eb2) (imag-part . y2eb1) (gcd . y2eb0) (for-each . y2eaf) (floor . y2eae) (finite? . y2ead) (expt . y2eac) (exp . y2eab) (exact? . y2eaa) (exact-integer-sqrt . y2ea9) (exact . y2ea8) (even? . y2ea7) (error . y2ea6) (eqv? . y2ea5) (equal? . y2ea4) (eq? . y2ea3) (dynamic-wind . y2ea2) (div0-and-mod0 . y2ea1) (mod0 . y2ea0) (div0 . y2e9f) (div-and-mod . y2e9e) (mod . y2e9d) (div . y2e9c) (denominator . y2e9b) (cos . y2e9a) (cons . y2e99) (complex? . y2e98) (char? . y2e97) (char>? . y2e96) (char>=? . y2e95) (char=? . y2e94) (char<? . y2e93) (char<=? . y2e92) (char->integer . y2e91) (ceiling . y2e90) (call-with-values . y2e8f) (call/cc . y2e8e) (call-with-current-continuation . y2e8d) (cddddr . y2e8c) (cdddar . y2e8b) (cddadr . y2e8a) (cddaar . y2e89) (cdaddr . y2e88) (cdadar . y2e87) (cdaadr . y2e86) (cdaaar . y2e85) (cadddr . y2e84) (caddar . y2e83) (cadadr . y2e82) (cadaar . y2e81) (caaddr . y2e80) (caadar . y2e7f) (caaadr . y2e7e) (caaaar . y2e7d) (cdddr . y2e7c) (cddar . y2e7b) (cdadr . y2e7a) (cdaar . y2e79) (caddr . y2e78) (cadar . y2e77) (caadr . y2e76) (caaar . y2e75) (cddr . y2e74) (cdar . y2e73) (cadr . y2e72) (caar . y2e71) (cdr . y2e70) (car . y2e6f) (boolean? . y2e6e) (boolean=? . y2e6d) (atan . y2e6c) (assertion-violation . y2e6b) (asin . y2e6a) (apply . y2e69) (append . y2e68) (angle . y2e67) (acos . y2e66) (abs . y2e65) (/ . y2e64) (* . y2e63) (- . y2e62) (+ . y2e61) (>= . y2e60) (> . y2e5f) (= . y2e5e) (<= . y2e5d) (< . y2e5c) (library . y2e5b) (&no-nans . y2e5a) (&no-infinities . y2e59) (&i/o-encoding . y2e58) (&i/o-decoding . y2e57) (&i/o-port . y2e56) (&i/o-file-does-not-exist . y2e55) (&i/o-file-already-exists . y2e54) (&i/o-file-is-read-only . y2e53) (&i/o-file-protection . y2e52) (&i/o-filename . y2e51) (&i/o-invalid-position . y2e50) (&i/o-write . y2e4f) (&i/o-read . y2e4e) (&i/o . y2e4d) (&undefined . y2e4c) (&syntax . y2e4b) (&lexical . y2e4a) (&implementation-restriction . y2e49) (&non-continuable . y2e48) (&who . y2e47) (&irritants . y2e46) (&assertion . y2e45) (&violation . y2e44) (&error . y2e43) (&serious . y2e42) (&warning . y2e41) (&message . y2e40) (&condition . y2e3f) (define-condition-type . y2e3e) (define-enumeration . y2e3d) (define-record-type . y2e3c) (parent-rtd . y2e3b) (nongenerative . y2e3a) (opaque . y2e39) (sealed . y2e38) (protocol . y2e37) (parent . y2e36) (immutable . y2e35) (mutable . y2e34) (fields . y2e33) (error-handling-mode . y2e32) (file-options . y2e31) (buffer-mode . y2e30) (eol-style . y2e2f) (guard . y2e2e) (unsyntax-splicing . y2e2b) (unsyntax . y2e2a) (unquote-splicing . y2e29) (unquote . y2e28) (_ . y2e27) (else . y2e26) (=> . y2e25) (... . y2e24) (assert . y2e23) (endianness . y2e22) (time . y2e20) (do . y2e1f) (cond . y2e1e) (let* . y2e1d) (let*-values . y2e1c) (let-values . y2e1b) (identifier-syntax . y2e1a) (with-syntax . y2e19) (quasisyntax . y2e18) (quasiquote . y2e17) (syntax-rules . y2e16) (include . y2e15) (record-constructor-descriptor . y2e13) (record-type-descriptor . y2e12) (case . y2e11) (unless . y2e0f) (when . y2e0e) (or . y2e0d) (and . y2e0c) (if . y2e0b) (let . y2e0a) (letrec* . y2e09) (letrec . y2e08) (case-lambda . y2e06) (lambda . y2e05) (syntax . y2e04) (syntax-case . y2e03) (quote . y2e02) (letrec-syntax . y2e00) (let-syntax . y2dff) (set! . y2dfe) (import . y2dfd) (begin . y2dfc) (define-syntax . y2dfa) (define . y2df9)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y312d '(psyntax null-environment-5) '() '() '() '() '((make-promise . y2fd9) (unquote-splicing . y2e29) (unquote . y2e28) (_ . y2e27) (else . y2e26) (=> . y2e25) (... . y2e24) (delay . y2e21) (do . y2e1f) (cond . y2e1e) (let* . y2e1d) (quasiquote . y2e17) (syntax-rules . y2e16) (case . y2e11) (or . y2e0d) (and . y2e0c) (if . y2e0b) (let . y2e0a) (letrec . y2e08) (lambda . y2e05) (quote . y2e02) (letrec-syntax . y2e00) (let-syntax . y2dff) (set! . y2dfe) (begin . y2dfc) (define-syntax . y2dfa) (define . y2df9)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y312e '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . y306e) (string-ci>=? . y306d) (string-ci=? . y306c) (string-ci<? . y306b) (string-ci<=? . y306a) (char-whitespace? . y3069) (char-upper-case? . y3068) (char-numeric? . y3066) (char-lower-case? . y3065) (char-upcase . y3063) (char-downcase . y3060) (char-ci>? . y305f) (char-ci>=? . y305e) (char-ci=? . y305d) (char-ci<? . y305c) (char-ci<=? . y305b) (char-alphabetic? . y305a) (call-with-output-file . y302e) (call-with-input-file . y302d) (write-char . y302c) (write . y302b) (with-output-to-file . y302a) (with-input-from-file . y3029) (read-char . y3028) (read . y3027) (peek-char . y3026) (open-output-file . y3025) (open-input-file . y3024) (newline . y3023) (display . y3022) (close-output-port . y3021) (close-input-port . y3020) (eof-object . y301e) (current-output-port . y301c) (current-input-port . y301b) (output-port? . y301a) (input-port? . y3019) (scheme-report-environment . ye40) (quotient . y2fdf) (null-environment . ye3e) (remainder . y2fde) (modulo . y2fdd) (inexact->exact . y2fdc) (force . y2fdb) (exact->inexact . y2fda) (make-promise . y2fd9) (string-fill! . y2fd7) (string-set! . y2fd6) (set-cdr! . y2fd5) (set-car! . y2fd4) (memv . y2fce) (memq . y2fcd) (member . y2fcb) (assv . y2fc3) (assq . y2fc2) (assoc . y2fc0) (eval . ye44) (zero? . y2efd) (vector? . y2efc) (vector-set! . y2efb) (vector-ref . y2efa) (vector-length . y2ef8) (vector-fill! . y2ef6) (vector->list . y2ef5) (vector . y2ef4) (values . y2ef3) (truncate . y2ef2) (tan . y2ef1) (symbol? . y2ef0) (symbol->string . y2eee) (substring . y2eed) (string? . y2eec) (string>? . y2eeb) (string>=? . y2eea) (string=? . y2ee9) (string<? . y2ee8) (string<=? . y2ee7) (string-ref . y2ee6) (string-length . y2ee5) (string-copy . y2ee3) (string-append . y2ee2) (string->symbol . y2ee1) (string->number . y2ee0) (string->list . y2edf) (string . y2ede) (sqrt . y2edd) (sin . y2edc) (round . y2edb) (reverse . y2eda) (real? . y2ed9) (real-part . y2ed7) (rationalize . y2ed6) (rational? . y2ed5) (procedure? . y2ed3) (positive? . y2ed2) (pair? . y2ed1) (odd? . y2ed0) (numerator . y2ecf) (number? . y2ece) (number->string . y2ecd) (not . y2ecb) (negative? . y2eca) (min . y2ec8) (max . y2ec7) (map . y2ec6) (make-vector . y2ec5) (make-string . y2ec4) (make-rectangular . y2ec3) (make-polar . y2ec2) (magnitude . y2ec1) (log . y2ec0) (list? . y2ebf) (list-tail . y2ebe) (list-ref . y2ebd) (list->vector . y2ebc) (list->string . y2ebb) (list . y2eba) (length . y2eb9) (lcm . y2eb8) (integer? . y2eb7) (integer->char . y2eb5) (inexact? . y2eb3) (imag-part . y2eb1) (gcd . y2eb0) (for-each . y2eaf) (floor . y2eae) (expt . y2eac) (exp . y2eab) (exact? . y2eaa) (even? . y2ea7) (eqv? . y2ea5) (equal? . y2ea4) (eq? . y2ea3) (dynamic-wind . y2ea2) (denominator . y2e9b) (cos . y2e9a) (cons . y2e99) (complex? . y2e98) (char? . y2e97) (char>? . y2e96) (char>=? . y2e95) (char=? . y2e94) (char<? . y2e93) (char<=? . y2e92) (char->integer . y2e91) (ceiling . y2e90) (call-with-values . y2e8f) (call-with-current-continuation . y2e8d) (cddddr . y2e8c) (cdddar . y2e8b) (cddadr . y2e8a) (cddaar . y2e89) (cdaddr . y2e88) (cdadar . y2e87) (cdaadr . y2e86) (cdaaar . y2e85) (cadddr . y2e84) (caddar . y2e83) (cadadr . y2e82) (cadaar . y2e81) (caaddr . y2e80) (caadar . y2e7f) (caaadr . y2e7e) (caaaar . y2e7d) (cdddr . y2e7c) (cddar . y2e7b) (cdadr . y2e7a) (cdaar . y2e79) (caddr . y2e78) (cadar . y2e77) (caadr . y2e76) (caaar . y2e75) (cddr . y2e74) (cdar . y2e73) (cadr . y2e72) (caar . y2e71) (cdr . y2e70) (car . y2e6f) (boolean? . y2e6e) (atan . y2e6c) (asin . y2e6a) (apply . y2e69) (append . y2e68) (angle . y2e67) (acos . y2e66) (abs . y2e65) (/ . y2e64) (* . y2e63) (- . y2e62) (+ . y2e61) (>= . y2e60) (> . y2e5f) (= . y2e5e) (<= . y2e5d) (< . y2e5c) (unquote-splicing . y2e29) (unquote . y2e28) (else . y2e26) (=> . y2e25) (... . y2e24) (delay . y2e21) (do . y2e1f) (cond . y2e1e) (let* . y2e1d) (quasiquote . y2e17) (syntax-rules . y2e16) (case . y2e11) (or . y2e0d) (and . y2e0c) (if . y2e0b) (let . y2e0a) (letrec . y2e08) (lambda . y2e05) (quote . y2e02) (letrec-syntax . y2e00) (let-syntax . y2dff) (set! . y2dfe) (begin . y2dfc) (define-syntax . y2dfa) (define . y2df9)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y312f '(psyntax modules) '() '() '() '() '((module . y2dfb)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3130 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3131 '(rnrs) '(6) '() '() '() '((regexp? . y3124) (string-upcase . y3076) (string-titlecase . y3075) (string-normalize-nfkd . y3074) (string-normalize-nfkc . y3073) (string-normalize-nfd . y3072) (string-normalize-nfc . y3071) (string-foldcase . y3070) (string-downcase . y306f) (string-ci>? . y306e) (string-ci>=? . y306d) (string-ci=? . y306c) (string-ci<? . y306b) (string-ci<=? . y306a) (char-whitespace? . y3069) (char-upper-case? . y3068) (char-title-case? . y3067) (char-numeric? . y3066) (char-lower-case? . y3065) (char-general-category . y3064) (char-upcase . y3063) (char-titlecase . y3062) (char-foldcase . y3061) (char-downcase . y3060) (char-ci>? . y305f) (char-ci>=? . y305e) (char-ci=? . y305d) (char-ci<? . y305c) (char-ci<=? . y305b) (char-alphabetic? . y305a) (make-variable-transformer . ybaf) (identifier? . ye66) (generate-temporaries . ye52) (free-identifier=? . ye54) (syntax->datum . ye6a) (datum->syntax . ye68) (bound-identifier=? . ye56) (record-type-descriptor? . y3059) (record-predicate . y3058) (record-mutator . y3057) (record-constructor . y3056) (record-accessor . y3055) (make-record-type-descriptor . y3054) (make-record-constructor-descriptor . y3053) (record? . y3052) (record-type-uid . y3051) (record-type-sealed? . y3050) (record-type-parent . y304f) (record-type-opaque? . y304e) (record-type-name . y304d) (record-type-generative? . y304c) (record-type-field-names . y304b) (record-rtd . y304a) (record-field-mutable? . y3049) (delete-file . y3048) (file-exists? . y3047) (vector-sort! . y3046) (vector-sort . y3045) (list-sort . y3044) (symbol-hash . y3043) (string-ci-hash . y3042) (string-hash . y3041) (equal-hash . y3040) (hashtable-equivalence-function . y303f) (make-hashtable . y303e) (hashtable-hash-function . y303d) (make-eqv-hashtable . y303c) (make-eq-hashtable . y303b) (hashtable? . y303a) (hashtable-update! . y3039) (hashtable-size . y3038) (hashtable-set! . y3037) (hashtable-ref . y3036) (hashtable-mutable? . y3035) (hashtable-keys . y3034) (hashtable-entries . y3033) (hashtable-delete! . y3032) (hashtable-copy . y3031) (hashtable-contains? . y3030) (hashtable-clear! . y302f) (call-with-output-file . y302e) (call-with-input-file . y302d) (write-char . y302c) (write . y302b) (with-output-to-file . y302a) (with-input-from-file . y3029) (read-char . y3028) (read . y3027) (peek-char . y3026) (open-output-file . y3025) (open-input-file . y3024) (newline . y3023) (display . y3022) (close-output-port . y3021) (close-input-port . y3020) (eof-object? . y301f) (eof-object . y301e) (current-error-port . y301d) (current-output-port . y301c) (current-input-port . y301b) (output-port? . y301a) (input-port? . y3019) (utf-8-codec . y3018) (utf-16-codec . y3017) (transcoder-error-handling-mode . y3016) (transcoder-eol-style . y3015) (transcoder-codec . y3014) (transcoded-port . y3013) (textual-port? . y3012) (string->bytevector . y3011) (standard-output-port . y3010) (standard-input-port . y300f) (standard-error-port . y300e) (set-port-position! . y300d) (put-u8 . y300c) (put-string . y300b) (put-datum . y300a) (put-char . y3009) (put-bytevector . y3008) (port? . y3007) (port-transcoder . y3006) (port-position . y3005) (port-has-set-port-position!? . y3004) (port-has-port-position? . y3003) (port-eof? . y3002) (output-port-buffer-mode . y3001) (open-string-output-port . y3000) (open-string-input-port . y2fff) (open-file-output-port . y2ffe) (open-file-input/output-port . y2ffd) (open-file-input-port . y2ffc) (open-bytevector-output-port . y2ffb) (open-bytevector-input-port . y2ffa) (native-transcoder . y2ff9) (native-eol-style . y2ff8) (make-transcoder . y2ff7) (latin-1-codec . y2ff6) (make-i/o-write-error . y2a8e) (make-i/o-read-error . y2a79) (make-i/o-port-error . y2b2f) (make-i/o-invalid-position-error . y2aa5) (make-i/o-filename-error . y2ac0) (make-i/o-file-protection-error . y2ad9) (make-i/o-file-is-read-only-error . y2aee) (make-i/o-file-does-not-exist-error . y2b18) (make-i/o-file-already-exists-error . y2b03) (make-i/o-error . y2a64) (make-i/o-encoding-error . y2b5f) (make-i/o-decoding-error . y2b48) (make-custom-textual-output-port . y2ff5) (make-custom-textual-input/output-port . y2ff4) (make-custom-textual-input-port . y2ff3) (make-custom-binary-output-port . y2ff2) (make-custom-binary-input/output-port . y2ff1) (make-custom-binary-input-port . y2ff0) (make-bytevector . y2fef) (lookahead-u8 . y2fee) (lookahead-char . y2fed) (i/o-write-error? . y2a90) (i/o-read-error? . y2a7b) (i/o-port-error? . y2b33) (i/o-invalid-position-error? . y2aa9) (i/o-filename-error? . y2ac4) (i/o-file-protection-error? . y2adb) (i/o-file-is-read-only-error? . y2af0) (i/o-file-does-not-exist-error? . y2b1a) (i/o-file-already-exists-error? . y2b05) (i/o-error? . y2a66) (i/o-error-position . y2aab) (i/o-error-port . y2b35) (i/o-error-filename . y2ac6) (i/o-encoding-error? . y2b63) (i/o-encoding-error-char . y2b65) (i/o-decoding-error? . y2b4a) (get-u8 . y2fec) (get-string-n! . y2feb) (get-string-n . y2fea) (get-string-all . y2fe9) (get-line . y2fe8) (get-datum . y2fe7) (get-char . y2fe6) (get-bytevector-some . y2fe5) (get-bytevector-n! . y2fe4) (get-bytevector-n . y2fe3) (get-bytevector-all . y2fe2) (flush-output-port . y2fe1) (close-port . y2fe0) (exit . y2fd8) (command-line . y2c9c) (remove . y2fd3) (remv . y2fd2) (remp . y2fd1) (remq . y2fd0) (partition . y2fcf) (memv . y2fce) (memq . y2fcd) (memp . y2fcc) (member . y2fcb) (exists . y2fca) (for-all . y2fc9) (fold-right . y2fc8) (fold-left . y2fc7) (find . y2fc6) (filter . y2fc5) (cons* . y2fc4) (assv . y2fc3) (assq . y2fc2) (assp . y2fc1) (assoc . y2fc0) (call-with-string-output-port . y2fbf) (call-with-port . y2fbe) (call-with-bytevector-output-port . y2fbd) (bytevector->string . y2fbc) (buffer-mode? . y2fbb) (binary-port? . y2fba) (with-exception-handler . y2fb9) (raise-continuable . y2fb8) (raise . y2fb7) (make-enumeration . y2fb6) (enum-set=? . y2fb5) (enum-set-universe . y2fb4) (enum-set-union . y2fb3) (enum-set-subset? . y2fb2) (enum-set-projection . y2fb1) (enum-set-member? . y2fb0) (enum-set-intersection . y2faf) (enum-set-indexer . y2fae) (enum-set-difference . y2fad) (enum-set-constructor . y2fac) (enum-set-complement . y2fab) (enum-set->list . y2faa) (who-condition? . y29da) (warning? . y2952) (violation? . y2991) (undefined-violation? . y2a51) (syntax-violation? . y2a38) (syntax-violation-subform . y2a3c) (syntax-violation-form . y2a3a) (syntax-violation . ye64) (simple-conditions . y2fa9) (serious-condition? . y2967) (non-continuable-violation? . y29f1) (message-condition? . y293b) (make-who-condition . y29d6) (make-warning . y2950) (make-violation . y298f) (make-undefined-violation . y2a4f) (make-syntax-violation . y2a32) (make-serious-condition . y2965) (make-non-continuable-violation . y29ef) (make-message-condition . y2937) (make-lexical-violation . y2a19) (make-irritants-condition . y29bb) (make-implementation-restriction-violation . y2a04) (make-error . y297a) (make-assertion-violation . y29a4) (lexical-violation? . y2a1b) (irritants-condition? . y29bf) (implementation-restriction-violation? . y2a06) (error? . y297c) (condition-who . y29dc) (condition-predicate . y2fa8) (condition-message . y293d) (condition-irritants . y29c1) (condition-accessor . y2fa7) (condition . y2fa6) (assertion-violation? . y29a6) (condition? . y2fa5) (utf32->string . y2fa4) (utf16->string . y2fa3) (utf8->string . y2fa2) (uint-list->bytevector . y2fa1) (u8-list->bytevector . y2fa0) (string->utf8 . y2f9f) (string->utf32 . y2f9e) (string->utf16 . y2f9d) (sint-list->bytevector . y2f9c) (native-endianness . y2f9b) (bytevector? . y2f9a) (bytevector=? . y2f99) (bytevector-uint-set! . y2f98) (bytevector-uint-ref . y2f97) (bytevector-u8-set! . y2f96) (bytevector-u8-ref . y2f95) (bytevector-u64-set! . y2f94) (bytevector-u64-ref . y2f93) (bytevector-u64-native-set! . y2f92) (bytevector-u64-native-ref . y2f91) (bytevector-u32-set! . y2f90) (bytevector-u32-ref . y2f8f) (bytevector-u32-native-set! . y2f8e) (bytevector-u32-native-ref . y2f8d) (bytevector-u16-set! . y2f8c) (bytevector-u16-ref . y2f8b) (bytevector-u16-native-set! . y2f8a) (bytevector-u16-native-ref . y2f89) (bytevector-sint-set! . y2f88) (bytevector-sint-ref . y2f87) (bytevector-s8-set! . y2f86) (bytevector-s8-ref . y2f85) (bytevector-s64-set! . y2f84) (bytevector-s64-ref . y2f83) (bytevector-s64-native-set! . y2f82) (bytevector-s64-native-ref . y2f81) (bytevector-s32-set! . y2f80) (bytevector-s32-ref . y2f7f) (bytevector-s32-native-set! . y2f7e) (bytevector-s32-native-ref . y2f7d) (bytevector-s16-set! . y2f7c) (bytevector-s16-ref . y2f7b) (bytevector-s16-native-set! . y2f7a) (bytevector-s16-native-ref . y2f79) (bytevector-length . y2f78) (bytevector-ieee-single-ref . y2f77) (bytevector-ieee-single-set! . y2f76) (bytevector-ieee-single-native-set! . y2f75) (bytevector-ieee-single-native-ref . y2f74) (bytevector-ieee-double-set! . y2f73) (bytevector-ieee-double-ref . y2f72) (bytevector-ieee-double-native-set! . y2f71) (bytevector-ieee-double-native-ref . y2f70) (bytevector-fill! . y2f6f) (bytevector-copy! . y2f6e) (bytevector-copy . y2f6d) (bytevector->uint-list . y2f6c) (bytevector->u8-list . y2f6b) (bytevector->sint-list . y2f6a) (no-nans-violation? . y2b8f) (no-infinities-violation? . y2b7a) (make-no-nans-violation . y2b8d) (make-no-infinities-violation . y2b78) (real->flonum . y2f69) (flzero? . y2f68) (fltruncate . y2f67) (fltan . y2f66) (flsqrt . y2f65) (flsin . y2f64) (flround . y2f63) (flpositive? . y2f62) (flonum? . y2f61) (flodd? . y2f60) (flnumerator . y2f5f) (flnegative? . y2f5e) (flnan? . y2f5d) (flmod0 . y2f5c) (flmod . y2f5b) (flmin . y2f5a) (flmax . y2f59) (fllog . y2f58) (flinteger? . y2f57) (flinfinite? . y2f56) (flfloor . y2f55) (flfinite? . y2f54) (flexpt . y2f53) (flexp . y2f52) (fleven? . y2f51) (fldiv0-and-mod0 . y2f50) (fldiv0 . y2f4f) (fldiv-and-mod . y2f4e) (fldiv . y2f4d) (fldenominator . y2f4c) (flcos . y2f4b) (flceiling . y2f4a) (flatan . y2f49) (flasin . y2f48) (flacos . y2f47) (flabs . y2f46) (fl>? . y2f45) (fl>=? . y2f44) (fl=? . y2f43) (fl<? . y2f42) (fl<=? . y2f41) (fl/ . y2f40) (fl- . y2f3f) (fl+ . y2f3e) (fl* . y2f3d) (fixnum->flonum . y2f3c) (fxzero? . y2f3b) (fxxor . y2f3a) (fxrotate-bit-field . y2f39) (fxreverse-bit-field . y2f38) (fxpositive? . y2f37) (fxodd? . y2f36) (fxnot . y2f35) (fxnegative? . y2f34) (fxmod0 . y2f33) (fxmod . y2f32) (fxmin . y2f31) (fxmax . y2f30) (fxlength . y2f2f) (fxior . y2f2e) (fxif . y2f2d) (fxfirst-bit-set . y2f2c) (fxeven? . y2f2b) (fxdiv0-and-mod0 . y2f2a) (fxdiv0 . y2f29) (fxdiv-and-mod . y2f28) (fxdiv . y2f27) (fxcopy-bit-field . y2f26) (fxcopy-bit . y2f25) (fxbit-set? . y2f24) (fxbit-field . y2f23) (fxbit-count . y2f22) (fxarithmetic-shift-right . y2f21) (fxarithmetic-shift-left . y2f20) (fxarithmetic-shift . y2f1f) (fxand . y2f1e) (fx>? . y2f1d) (fx>=? . y2f1c) (fx=? . y2f1b) (fx<? . y2f1a) (fx<=? . y2f19) (fx-/carry . y2f18) (fx- . y2f17) (fx+/carry . y2f16) (fx+ . y2f15) (fx*/carry . y2f14) (fx* . y2f13) (greatest-fixnum . y2f12) (least-fixnum . y2f11) (fixnum-width . y2f10) (fixnum? . y2f0f) (bitwise-rotate-bit-field . y2f0e) (bitwise-reverse-bit-field . y2f0d) (bitwise-length . y2f0c) (bitwise-if . y2f0b) (bitwise-first-bit-set . y2f0a) (bitwise-copy-bit-field . y2f09) (bitwise-copy-bit . y2f08) (bitwise-bit-set? . y2f07) (bitwise-bit-field . y2f06) (bitwise-bit-count . y2f05) (bitwise-xor . y2f04) (bitwise-ior . y2f03) (bitwise-and . y2f02) (bitwise-not . y2f01) (bitwise-arithmetic-shift-right . y2f00) (bitwise-arithmetic-shift-left . y2eff) (bitwise-arithmetic-shift . y2efe) (zero? . y2efd) (vector? . y2efc) (vector-set! . y2efb) (vector-ref . y2efa) (vector-map . y2ef9) (vector-length . y2ef8) (vector-for-each . y2ef7) (vector-fill! . y2ef6) (vector->list . y2ef5) (vector . y2ef4) (values . y2ef3) (truncate . y2ef2) (tan . y2ef1) (symbol? . y2ef0) (symbol=? . y2eef) (symbol->string . y2eee) (substring . y2eed) (string? . y2eec) (string>? . y2eeb) (string>=? . y2eea) (string=? . y2ee9) (string<? . y2ee8) (string<=? . y2ee7) (string-ref . y2ee6) (string-length . y2ee5) (string-for-each . y2ee4) (string-copy . y2ee3) (string-append . y2ee2) (string->symbol . y2ee1) (string->number . y2ee0) (string->list . y2edf) (string . y2ede) (sqrt . y2edd) (sin . y2edc) (round . y2edb) (reverse . y2eda) (real? . y2ed9) (real-valued? . y2ed8) (real-part . y2ed7) (rationalize . y2ed6) (rational? . y2ed5) (rational-valued? . y2ed4) (procedure? . y2ed3) (positive? . y2ed2) (pair? . y2ed1) (odd? . y2ed0) (numerator . y2ecf) (number? . y2ece) (number->string . y2ecd) (null? . y2ecc) (not . y2ecb) (negative? . y2eca) (nan? . y2ec9) (min . y2ec8) (max . y2ec7) (map . y2ec6) (make-vector . y2ec5) (make-string . y2ec4) (make-rectangular . y2ec3) (make-polar . y2ec2) (magnitude . y2ec1) (log . y2ec0) (list? . y2ebf) (list-tail . y2ebe) (list-ref . y2ebd) (list->vector . y2ebc) (list->string . y2ebb) (list . y2eba) (length . y2eb9) (lcm . y2eb8) (integer? . y2eb7) (integer-valued? . y2eb6) (integer->char . y2eb5) (infinite? . y2eb4) (inexact? . y2eb3) (inexact . y2eb2) (imag-part . y2eb1) (gcd . y2eb0) (for-each . y2eaf) (floor . y2eae) (finite? . y2ead) (expt . y2eac) (exp . y2eab) (exact? . y2eaa) (exact-integer-sqrt . y2ea9) (exact . y2ea8) (even? . y2ea7) (error . y2ea6) (eqv? . y2ea5) (equal? . y2ea4) (eq? . y2ea3) (dynamic-wind . y2ea2) (div0-and-mod0 . y2ea1) (mod0 . y2ea0) (div0 . y2e9f) (div-and-mod . y2e9e) (mod . y2e9d) (div . y2e9c) (denominator . y2e9b) (cos . y2e9a) (cons . y2e99) (complex? . y2e98) (char? . y2e97) (char>? . y2e96) (char>=? . y2e95) (char=? . y2e94) (char<? . y2e93) (char<=? . y2e92) (char->integer . y2e91) (ceiling . y2e90) (call-with-values . y2e8f) (call/cc . y2e8e) (call-with-current-continuation . y2e8d) (cddddr . y2e8c) (cdddar . y2e8b) (cddadr . y2e8a) (cddaar . y2e89) (cdaddr . y2e88) (cdadar . y2e87) (cdaadr . y2e86) (cdaaar . y2e85) (cadddr . y2e84) (caddar . y2e83) (cadadr . y2e82) (cadaar . y2e81) (caaddr . y2e80) (caadar . y2e7f) (caaadr . y2e7e) (caaaar . y2e7d) (cdddr . y2e7c) (cddar . y2e7b) (cdadr . y2e7a) (cdaar . y2e79) (caddr . y2e78) (cadar . y2e77) (caadr . y2e76) (caaar . y2e75) (cddr . y2e74) (cdar . y2e73) (cadr . y2e72) (caar . y2e71) (cdr . y2e70) (car . y2e6f) (boolean? . y2e6e) (boolean=? . y2e6d) (atan . y2e6c) (assertion-violation . y2e6b) (asin . y2e6a) (apply . y2e69) (append . y2e68) (angle . y2e67) (acos . y2e66) (abs . y2e65) (/ . y2e64) (* . y2e63) (- . y2e62) (+ . y2e61) (>= . y2e60) (> . y2e5f) (= . y2e5e) (<= . y2e5d) (< . y2e5c) (&no-nans . y2e5a) (&no-infinities . y2e59) (&i/o-encoding . y2e58) (&i/o-decoding . y2e57) (&i/o-port . y2e56) (&i/o-file-does-not-exist . y2e55) (&i/o-file-already-exists . y2e54) (&i/o-file-is-read-only . y2e53) (&i/o-file-protection . y2e52) (&i/o-filename . y2e51) (&i/o-invalid-position . y2e50) (&i/o-write . y2e4f) (&i/o-read . y2e4e) (&i/o . y2e4d) (&undefined . y2e4c) (&syntax . y2e4b) (&lexical . y2e4a) (&implementation-restriction . y2e49) (&non-continuable . y2e48) (&who . y2e47) (&irritants . y2e46) (&assertion . y2e45) (&violation . y2e44) (&error . y2e43) (&serious . y2e42) (&warning . y2e41) (&message . y2e40) (&condition . y2e3f) (define-condition-type . y2e3e) (define-enumeration . y2e3d) (define-record-type . y2e3c) (parent-rtd . y2e3b) (nongenerative . y2e3a) (opaque . y2e39) (sealed . y2e38) (protocol . y2e37) (parent . y2e36) (immutable . y2e35) (mutable . y2e34) (fields . y2e33) (error-handling-mode . y2e32) (file-options . y2e31) (buffer-mode . y2e30) (eol-style . y2e2f) (guard . y2e2e) (unsyntax-splicing . y2e2b) (unsyntax . y2e2a) (unquote-splicing . y2e29) (unquote . y2e28) (_ . y2e27) (else . y2e26) (=> . y2e25) (... . y2e24) (assert . y2e23) (endianness . y2e22) (do . y2e1f) (cond . y2e1e) (let* . y2e1d) (let*-values . y2e1c) (let-values . y2e1b) (identifier-syntax . y2e1a) (with-syntax . y2e19) (quasisyntax . y2e18) (quasiquote . y2e17) (syntax-rules . y2e16) (record-constructor-descriptor . y2e13) (record-type-descriptor . y2e12) (case . y2e11) (unless . y2e0f) (when . y2e0e) (or . y2e0d) (and . y2e0c) (if . y2e0b) (let . y2e0a) (letrec* . y2e09) (letrec . y2e08) (case-lambda . y2e06) (lambda . y2e05) (syntax . y2e04) (syntax-case . y2e03) (quote . y2e02) (letrec-syntax . y2e00) (let-syntax . y2dff) (set! . y2dfe) (begin . y2dfc) (define-syntax . y2dfa) (define . y2df9)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3132 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . ye40) (quotient . y2fdf) (null-environment . ye3e) (remainder . y2fde) (modulo . y2fdd) (inexact->exact . y2fdc) (force . y2fdb) (exact->inexact . y2fda) (make-promise . y2fd9) (delay . y2e21)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3133 '(rnrs control) '(6) '() '() '() '((do . y2e1f) (unless . y2e0f) (when . y2e0e) (case-lambda . y2e06)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3134 '(rnrs eval) '(6) '() '() '() '((eval . ye44) (environment . ye3c)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3135 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . y2fd5) (set-car! . y2fd4)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3136 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . y2fd7) (string-set! . y2fd6)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3137 '(rnrs programs) '(6) '() '() '() '((exit . y2fd8) (command-line . y2c9c)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3138 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . ybaf) (identifier? . ye66) (generate-temporaries . ye52) (free-identifier=? . ye54) (syntax->datum . ye6a) (datum->syntax . ye68) (bound-identifier=? . ye56) (syntax-violation . ye64) (unsyntax-splicing . y2e2b) (unsyntax . y2e2a) (_ . y2e27) (... . y2e24) (with-syntax . y2e19) (quasisyntax . y2e18) (syntax . y2e04) (syntax-case . y2e03)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3139 '(rnrs files) '(6) '() '() '() '((delete-file . y3048) (file-exists? . y3047) (make-i/o-write-error . y2a8e) (make-i/o-read-error . y2a79) (make-i/o-port-error . y2b2f) (make-i/o-invalid-position-error . y2aa5) (make-i/o-filename-error . y2ac0) (make-i/o-file-protection-error . y2ad9) (make-i/o-file-is-read-only-error . y2aee) (make-i/o-file-does-not-exist-error . y2b18) (make-i/o-file-already-exists-error . y2b03) (make-i/o-error . y2a64) (i/o-write-error? . y2a90) (i/o-read-error? . y2a7b) (i/o-port-error? . y2b33) (i/o-invalid-position-error? . y2aa9) (i/o-filename-error? . y2ac4) (i/o-file-protection-error? . y2adb) (i/o-file-is-read-only-error? . y2af0) (i/o-file-does-not-exist-error? . y2b1a) (i/o-file-already-exists-error? . y2b05) (i/o-error? . y2a66) (i/o-error-position . y2aab) (i/o-error-port . y2b35) (i/o-error-filename . y2ac6) (&i/o-port . y2e56) (&i/o-file-does-not-exist . y2e55) (&i/o-file-already-exists . y2e54) (&i/o-file-is-read-only . y2e53) (&i/o-file-protection . y2e52) (&i/o-filename . y2e51) (&i/o-invalid-position . y2e50) (&i/o-write . y2e4f) (&i/o-read . y2e4e) (&i/o . y2e4d)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y313a '(rnrs sorting) '(6) '() '() '() '((vector-sort! . y3046) (vector-sort . y3045) (list-sort . y3044)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y313b '(rnrs base) '(6) '() '() '() '((zero? . y2efd) (vector? . y2efc) (vector-set! . y2efb) (vector-ref . y2efa) (vector-map . y2ef9) (vector-length . y2ef8) (vector-for-each . y2ef7) (vector-fill! . y2ef6) (vector->list . y2ef5) (vector . y2ef4) (values . y2ef3) (truncate . y2ef2) (tan . y2ef1) (symbol? . y2ef0) (symbol=? . y2eef) (symbol->string . y2eee) (substring . y2eed) (string? . y2eec) (string>? . y2eeb) (string>=? . y2eea) (string=? . y2ee9) (string<? . y2ee8) (string<=? . y2ee7) (string-ref . y2ee6) (string-length . y2ee5) (string-for-each . y2ee4) (string-copy . y2ee3) (string-append . y2ee2) (string->symbol . y2ee1) (string->number . y2ee0) (string->list . y2edf) (string . y2ede) (sqrt . y2edd) (sin . y2edc) (round . y2edb) (reverse . y2eda) (real? . y2ed9) (real-valued? . y2ed8) (real-part . y2ed7) (rationalize . y2ed6) (rational? . y2ed5) (rational-valued? . y2ed4) (procedure? . y2ed3) (positive? . y2ed2) (pair? . y2ed1) (odd? . y2ed0) (numerator . y2ecf) (number? . y2ece) (number->string . y2ecd) (null? . y2ecc) (not . y2ecb) (negative? . y2eca) (nan? . y2ec9) (min . y2ec8) (max . y2ec7) (map . y2ec6) (make-vector . y2ec5) (make-string . y2ec4) (make-rectangular . y2ec3) (make-polar . y2ec2) (magnitude . y2ec1) (log . y2ec0) (list? . y2ebf) (list-tail . y2ebe) (list-ref . y2ebd) (list->vector . y2ebc) (list->string . y2ebb) (list . y2eba) (length . y2eb9) (lcm . y2eb8) (integer? . y2eb7) (integer-valued? . y2eb6) (integer->char . y2eb5) (infinite? . y2eb4) (inexact? . y2eb3) (inexact . y2eb2) (imag-part . y2eb1) (gcd . y2eb0) (for-each . y2eaf) (floor . y2eae) (finite? . y2ead) (expt . y2eac) (exp . y2eab) (exact? . y2eaa) (exact-integer-sqrt . y2ea9) (exact . y2ea8) (even? . y2ea7) (error . y2ea6) (eqv? . y2ea5) (equal? . y2ea4) (eq? . y2ea3) (dynamic-wind . y2ea2) (div0-and-mod0 . y2ea1) (mod0 . y2ea0) (div0 . y2e9f) (div-and-mod . y2e9e) (mod . y2e9d) (div . y2e9c) (denominator . y2e9b) (cos . y2e9a) (cons . y2e99) (complex? . y2e98) (char? . y2e97) (char>? . y2e96) (char>=? . y2e95) (char=? . y2e94) (char<? . y2e93) (char<=? . y2e92) (char->integer . y2e91) (ceiling . y2e90) (call-with-values . y2e8f) (call/cc . y2e8e) (call-with-current-continuation . y2e8d) (cddddr . y2e8c) (cdddar . y2e8b) (cddadr . y2e8a) (cddaar . y2e89) (cdaddr . y2e88) (cdadar . y2e87) (cdaadr . y2e86) (cdaaar . y2e85) (cadddr . y2e84) (caddar . y2e83) (cadadr . y2e82) (cadaar . y2e81) (caaddr . y2e80) (caadar . y2e7f) (caaadr . y2e7e) (caaaar . y2e7d) (cdddr . y2e7c) (cddar . y2e7b) (cdadr . y2e7a) (cdaar . y2e79) (caddr . y2e78) (cadar . y2e77) (caadr . y2e76) (caaar . y2e75) (cddr . y2e74) (cdar . y2e73) (cadr . y2e72) (caar . y2e71) (cdr . y2e70) (car . y2e6f) (boolean? . y2e6e) (boolean=? . y2e6d) (atan . y2e6c) (assertion-violation . y2e6b) (asin . y2e6a) (apply . y2e69) (append . y2e68) (angle . y2e67) (acos . y2e66) (abs . y2e65) (/ . y2e64) (* . y2e63) (- . y2e62) (+ . y2e61) (>= . y2e60) (> . y2e5f) (= . y2e5e) (<= . y2e5d) (< . y2e5c) (unquote-splicing . y2e29) (unquote . y2e28) (_ . y2e27) (else . y2e26) (=> . y2e25) (... . y2e24) (assert . y2e23) (cond . y2e1e) (let* . y2e1d) (let*-values . y2e1c) (let-values . y2e1b) (identifier-syntax . y2e1a) (quasiquote . y2e17) (syntax-rules . y2e16) (case . y2e11) (or . y2e0d) (and . y2e0c) (if . y2e0b) (let . y2e0a) (letrec* . y2e09) (letrec . y2e08) (lambda . y2e05) (quote . y2e02) (letrec-syntax . y2e00) (let-syntax . y2dff) (set! . y2dfe) (begin . y2dfc) (define-syntax . y2dfa) (define . y2df9)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y313c '(rnrs lists) '(6) '() '() '() '((remove . y2fd3) (remv . y2fd2) (remp . y2fd1) (remq . y2fd0) (partition . y2fcf) (memv . y2fce) (memq . y2fcd) (memp . y2fcc) (member . y2fcb) (exists . y2fca) (for-all . y2fc9) (fold-right . y2fc8) (fold-left . y2fc7) (find . y2fc6) (filter . y2fc5) (cons* . y2fc4) (assv . y2fc3) (assq . y2fc2) (assp . y2fc1) (assoc . y2fc0)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y313d '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . y302e) (call-with-input-file . y302d) (write-char . y302c) (write . y302b) (with-output-to-file . y302a) (with-input-from-file . y3029) (read-char . y3028) (read . y3027) (peek-char . y3026) (open-output-file . y3025) (open-input-file . y3024) (newline . y3023) (display . y3022) (close-output-port . y3021) (close-input-port . y3020) (eof-object? . y301f) (eof-object . y301e) (current-error-port . y301d) (current-output-port . y301c) (current-input-port . y301b) (output-port? . y301a) (input-port? . y3019) (make-i/o-write-error . y2a8e) (make-i/o-read-error . y2a79) (make-i/o-port-error . y2b2f) (make-i/o-invalid-position-error . y2aa5) (make-i/o-filename-error . y2ac0) (make-i/o-file-protection-error . y2ad9) (make-i/o-file-is-read-only-error . y2aee) (make-i/o-file-does-not-exist-error . y2b18) (make-i/o-file-already-exists-error . y2b03) (make-i/o-error . y2a64) (i/o-write-error? . y2a90) (i/o-read-error? . y2a7b) (i/o-port-error? . y2b33) (i/o-invalid-position-error? . y2aa9) (i/o-filename-error? . y2ac4) (i/o-file-protection-error? . y2adb) (i/o-file-is-read-only-error? . y2af0) (i/o-file-does-not-exist-error? . y2b1a) (i/o-file-already-exists-error? . y2b05) (i/o-error? . y2a66) (i/o-error-position . y2aab) (i/o-error-port . y2b35) (i/o-error-filename . y2ac6) (&i/o-port . y2e56) (&i/o-file-does-not-exist . y2e55) (&i/o-file-already-exists . y2e54) (&i/o-file-is-read-only . y2e53) (&i/o-file-protection . y2e52) (&i/o-filename . y2e51) (&i/o-invalid-position . y2e50) (&i/o-write . y2e4f) (&i/o-read . y2e4e) (&i/o . y2e4d)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y313e '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . y2fef) (utf32->string . y2fa4) (utf16->string . y2fa3) (utf8->string . y2fa2) (uint-list->bytevector . y2fa1) (u8-list->bytevector . y2fa0) (string->utf8 . y2f9f) (string->utf32 . y2f9e) (string->utf16 . y2f9d) (sint-list->bytevector . y2f9c) (native-endianness . y2f9b) (bytevector? . y2f9a) (bytevector=? . y2f99) (bytevector-uint-set! . y2f98) (bytevector-uint-ref . y2f97) (bytevector-u8-set! . y2f96) (bytevector-u8-ref . y2f95) (bytevector-u64-set! . y2f94) (bytevector-u64-ref . y2f93) (bytevector-u64-native-set! . y2f92) (bytevector-u64-native-ref . y2f91) (bytevector-u32-set! . y2f90) (bytevector-u32-ref . y2f8f) (bytevector-u32-native-set! . y2f8e) (bytevector-u32-native-ref . y2f8d) (bytevector-u16-set! . y2f8c) (bytevector-u16-ref . y2f8b) (bytevector-u16-native-set! . y2f8a) (bytevector-u16-native-ref . y2f89) (bytevector-sint-set! . y2f88) (bytevector-sint-ref . y2f87) (bytevector-s8-set! . y2f86) (bytevector-s8-ref . y2f85) (bytevector-s64-set! . y2f84) (bytevector-s64-ref . y2f83) (bytevector-s64-native-set! . y2f82) (bytevector-s64-native-ref . y2f81) (bytevector-s32-set! . y2f80) (bytevector-s32-ref . y2f7f) (bytevector-s32-native-set! . y2f7e) (bytevector-s32-native-ref . y2f7d) (bytevector-s16-set! . y2f7c) (bytevector-s16-ref . y2f7b) (bytevector-s16-native-set! . y2f7a) (bytevector-s16-native-ref . y2f79) (bytevector-length . y2f78) (bytevector-ieee-single-ref . y2f77) (bytevector-ieee-single-set! . y2f76) (bytevector-ieee-single-native-set! . y2f75) (bytevector-ieee-single-native-ref . y2f74) (bytevector-ieee-double-set! . y2f73) (bytevector-ieee-double-ref . y2f72) (bytevector-ieee-double-native-set! . y2f71) (bytevector-ieee-double-native-ref . y2f70) (bytevector-fill! . y2f6f) (bytevector-copy! . y2f6e) (bytevector-copy . y2f6d) (bytevector->uint-list . y2f6c) (bytevector->u8-list . y2f6b) (bytevector->sint-list . y2f6a) (endianness . y2e22)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y313f '(rnrs unicode) '(6) '() '() '() '((string-upcase . y3076) (string-titlecase . y3075) (string-normalize-nfkd . y3074) (string-normalize-nfkc . y3073) (string-normalize-nfd . y3072) (string-normalize-nfc . y3071) (string-foldcase . y3070) (string-downcase . y306f) (string-ci>? . y306e) (string-ci>=? . y306d) (string-ci=? . y306c) (string-ci<? . y306b) (string-ci<=? . y306a) (char-whitespace? . y3069) (char-upper-case? . y3068) (char-title-case? . y3067) (char-numeric? . y3066) (char-lower-case? . y3065) (char-general-category . y3064) (char-upcase . y3063) (char-titlecase . y3062) (char-foldcase . y3061) (char-downcase . y3060) (char-ci>? . y305f) (char-ci>=? . y305e) (char-ci=? . y305d) (char-ci<? . y305c) (char-ci<=? . y305b) (char-alphabetic? . y305a)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3140 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . y2fb9) (raise-continuable . y2fb8) (raise . y2fb7) (guard . y2e2e) (else . y2e26) (=> . y2e25)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3141 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . y2f0e) (bitwise-reverse-bit-field . y2f0d) (bitwise-length . y2f0c) (bitwise-if . y2f0b) (bitwise-first-bit-set . y2f0a) (bitwise-copy-bit-field . y2f09) (bitwise-copy-bit . y2f08) (bitwise-bit-set? . y2f07) (bitwise-bit-field . y2f06) (bitwise-bit-count . y2f05) (bitwise-xor . y2f04) (bitwise-ior . y2f03) (bitwise-and . y2f02) (bitwise-not . y2f01) (bitwise-arithmetic-shift-right . y2f00) (bitwise-arithmetic-shift-left . y2eff) (bitwise-arithmetic-shift . y2efe)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3142 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . y2f3b) (fxxor . y2f3a) (fxrotate-bit-field . y2f39) (fxreverse-bit-field . y2f38) (fxpositive? . y2f37) (fxodd? . y2f36) (fxnot . y2f35) (fxnegative? . y2f34) (fxmod0 . y2f33) (fxmod . y2f32) (fxmin . y2f31) (fxmax . y2f30) (fxlength . y2f2f) (fxior . y2f2e) (fxif . y2f2d) (fxfirst-bit-set . y2f2c) (fxeven? . y2f2b) (fxdiv0-and-mod0 . y2f2a) (fxdiv0 . y2f29) (fxdiv-and-mod . y2f28) (fxdiv . y2f27) (fxcopy-bit-field . y2f26) (fxcopy-bit . y2f25) (fxbit-set? . y2f24) (fxbit-field . y2f23) (fxbit-count . y2f22) (fxarithmetic-shift-right . y2f21) (fxarithmetic-shift-left . y2f20) (fxarithmetic-shift . y2f1f) (fxand . y2f1e) (fx>? . y2f1d) (fx>=? . y2f1c) (fx=? . y2f1b) (fx<? . y2f1a) (fx<=? . y2f19) (fx-/carry . y2f18) (fx- . y2f17) (fx+/carry . y2f16) (fx+ . y2f15) (fx*/carry . y2f14) (fx* . y2f13) (greatest-fixnum . y2f12) (least-fixnum . y2f11) (fixnum-width . y2f10) (fixnum? . y2f0f)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3143 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . y2b8f) (no-infinities-violation? . y2b7a) (make-no-nans-violation . y2b8d) (make-no-infinities-violation . y2b78) (real->flonum . y2f69) (flzero? . y2f68) (fltruncate . y2f67) (fltan . y2f66) (flsqrt . y2f65) (flsin . y2f64) (flround . y2f63) (flpositive? . y2f62) (flonum? . y2f61) (flodd? . y2f60) (flnumerator . y2f5f) (flnegative? . y2f5e) (flnan? . y2f5d) (flmod0 . y2f5c) (flmod . y2f5b) (flmin . y2f5a) (flmax . y2f59) (fllog . y2f58) (flinteger? . y2f57) (flinfinite? . y2f56) (flfloor . y2f55) (flfinite? . y2f54) (flexpt . y2f53) (flexp . y2f52) (fleven? . y2f51) (fldiv0-and-mod0 . y2f50) (fldiv0 . y2f4f) (fldiv-and-mod . y2f4e) (fldiv . y2f4d) (fldenominator . y2f4c) (flcos . y2f4b) (flceiling . y2f4a) (flatan . y2f49) (flasin . y2f48) (flacos . y2f47) (flabs . y2f46) (fl>? . y2f45) (fl>=? . y2f44) (fl=? . y2f43) (fl<? . y2f42) (fl<=? . y2f41) (fl/ . y2f40) (fl- . y2f3f) (fl+ . y2f3e) (fl* . y2f3d) (fixnum->flonum . y2f3c) (&no-nans . y2e5a) (&no-infinities . y2e59)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3144 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . y3043) (string-ci-hash . y3042) (string-hash . y3041) (equal-hash . y3040) (hashtable-equivalence-function . y303f) (make-hashtable . y303e) (hashtable-hash-function . y303d) (make-eqv-hashtable . y303c) (make-eq-hashtable . y303b) (hashtable? . y303a) (hashtable-update! . y3039) (hashtable-size . y3038) (hashtable-set! . y3037) (hashtable-ref . y3036) (hashtable-mutable? . y3035) (hashtable-keys . y3034) (hashtable-entries . y3033) (hashtable-delete! . y3032) (hashtable-copy . y3031) (hashtable-contains? . y3030) (hashtable-clear! . y302f)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3145 '(rnrs io ports) '(6) '() '() '() '((eof-object? . y301f) (eof-object . y301e) (current-error-port . y301d) (current-output-port . y301c) (current-input-port . y301b) (output-port? . y301a) (input-port? . y3019) (utf-8-codec . y3018) (utf-16-codec . y3017) (transcoder-error-handling-mode . y3016) (transcoder-eol-style . y3015) (transcoder-codec . y3014) (transcoded-port . y3013) (textual-port? . y3012) (string->bytevector . y3011) (standard-output-port . y3010) (standard-input-port . y300f) (standard-error-port . y300e) (set-port-position! . y300d) (put-u8 . y300c) (put-string . y300b) (put-datum . y300a) (put-char . y3009) (put-bytevector . y3008) (port? . y3007) (port-transcoder . y3006) (port-position . y3005) (port-has-set-port-position!? . y3004) (port-has-port-position? . y3003) (port-eof? . y3002) (output-port-buffer-mode . y3001) (open-string-output-port . y3000) (open-string-input-port . y2fff) (open-file-output-port . y2ffe) (open-file-input/output-port . y2ffd) (open-file-input-port . y2ffc) (open-bytevector-output-port . y2ffb) (open-bytevector-input-port . y2ffa) (native-transcoder . y2ff9) (native-eol-style . y2ff8) (make-transcoder . y2ff7) (latin-1-codec . y2ff6) (make-i/o-write-error . y2a8e) (make-i/o-read-error . y2a79) (make-i/o-port-error . y2b2f) (make-i/o-invalid-position-error . y2aa5) (make-i/o-filename-error . y2ac0) (make-i/o-file-protection-error . y2ad9) (make-i/o-file-is-read-only-error . y2aee) (make-i/o-file-does-not-exist-error . y2b18) (make-i/o-file-already-exists-error . y2b03) (make-i/o-error . y2a64) (make-i/o-encoding-error . y2b5f) (make-i/o-decoding-error . y2b48) (make-custom-textual-output-port . y2ff5) (make-custom-textual-input/output-port . y2ff4) (make-custom-textual-input-port . y2ff3) (make-custom-binary-output-port . y2ff2) (make-custom-binary-input/output-port . y2ff1) (make-custom-binary-input-port . y2ff0) (lookahead-u8 . y2fee) (lookahead-char . y2fed) (i/o-write-error? . y2a90) (i/o-read-error? . y2a7b) (i/o-port-error? . y2b33) (i/o-invalid-position-error? . y2aa9) (i/o-filename-error? . y2ac4) (i/o-file-protection-error? . y2adb) (i/o-file-is-read-only-error? . y2af0) (i/o-file-does-not-exist-error? . y2b1a) (i/o-file-already-exists-error? . y2b05) (i/o-error? . y2a66) (i/o-error-position . y2aab) (i/o-error-port . y2b35) (i/o-error-filename . y2ac6) (i/o-encoding-error? . y2b63) (i/o-encoding-error-char . y2b65) (i/o-decoding-error? . y2b4a) (get-u8 . y2fec) (get-string-n! . y2feb) (get-string-n . y2fea) (get-string-all . y2fe9) (get-line . y2fe8) (get-datum . y2fe7) (get-char . y2fe6) (get-bytevector-some . y2fe5) (get-bytevector-n! . y2fe4) (get-bytevector-n . y2fe3) (get-bytevector-all . y2fe2) (flush-output-port . y2fe1) (close-port . y2fe0) (call-with-string-output-port . y2fbf) (call-with-port . y2fbe) (call-with-bytevector-output-port . y2fbd) (bytevector->string . y2fbc) (buffer-mode? . y2fbb) (binary-port? . y2fba) (&i/o-encoding . y2e58) (&i/o-decoding . y2e57) (&i/o-port . y2e56) (&i/o-file-does-not-exist . y2e55) (&i/o-file-already-exists . y2e54) (&i/o-file-is-read-only . y2e53) (&i/o-file-protection . y2e52) (&i/o-filename . y2e51) (&i/o-invalid-position . y2e50) (&i/o-write . y2e4f) (&i/o-read . y2e4e) (&i/o . y2e4d) (error-handling-mode . y2e32) (file-options . y2e31) (buffer-mode . y2e30) (eol-style . y2e2f)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3146 '(rnrs enums) '(6) '() '() '() '((make-enumeration . y2fb6) (enum-set=? . y2fb5) (enum-set-universe . y2fb4) (enum-set-union . y2fb3) (enum-set-subset? . y2fb2) (enum-set-projection . y2fb1) (enum-set-member? . y2fb0) (enum-set-intersection . y2faf) (enum-set-indexer . y2fae) (enum-set-difference . y2fad) (enum-set-constructor . y2fac) (enum-set-complement . y2fab) (enum-set->list . y2faa) (define-enumeration . y2e3d)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3147 '(rnrs conditions) '(6) '() '() '() '((who-condition? . y29da) (warning? . y2952) (violation? . y2991) (undefined-violation? . y2a51) (syntax-violation? . y2a38) (syntax-violation-subform . y2a3c) (syntax-violation-form . y2a3a) (syntax-violation . ye64) (simple-conditions . y2fa9) (serious-condition? . y2967) (non-continuable-violation? . y29f1) (message-condition? . y293b) (make-who-condition . y29d6) (make-warning . y2950) (make-violation . y298f) (make-undefined-violation . y2a4f) (make-syntax-violation . y2a32) (make-serious-condition . y2965) (make-non-continuable-violation . y29ef) (make-message-condition . y2937) (make-lexical-violation . y2a19) (make-irritants-condition . y29bb) (make-implementation-restriction-violation . y2a04) (make-error . y297a) (make-assertion-violation . y29a4) (lexical-violation? . y2a1b) (irritants-condition? . y29bf) (implementation-restriction-violation? . y2a06) (error? . y297c) (condition-who . y29dc) (condition-predicate . y2fa8) (condition-message . y293d) (condition-irritants . y29c1) (condition-accessor . y2fa7) (condition . y2fa6) (assertion-violation? . y29a6) (condition? . y2fa5) (&undefined . y2e4c) (&syntax . y2e4b) (&lexical . y2e4a) (&implementation-restriction . y2e49) (&non-continuable . y2e48) (&who . y2e47) (&irritants . y2e46) (&assertion . y2e45) (&violation . y2e44) (&error . y2e43) (&serious . y2e42) (&warning . y2e41) (&message . y2e40) (&condition . y2e3f) (define-condition-type . y2e3e)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3148 '(rnrs records inspection) '(6) '() '() '() '((record? . y3052) (record-type-uid . y3051) (record-type-sealed? . y3050) (record-type-parent . y304f) (record-type-opaque? . y304e) (record-type-name . y304d) (record-type-generative? . y304c) (record-type-field-names . y304b) (record-rtd . y304a) (record-field-mutable? . y3049)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y3149 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . y3059) (record-predicate . y3058) (record-mutator . y3057) (record-constructor . y3056) (record-accessor . y3055) (make-record-type-descriptor . y3054) (make-record-constructor-descriptor . y3053)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y314a '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . y2e3c) (parent-rtd . y2e3b) (nongenerative . y2e3a) (opaque . y2e39) (sealed . y2e38) (protocol . y2e37) (parent . y2e36) (immutable . y2e35) (mutable . y2e34) (fields . y2e33) (record-constructor-descriptor . y2e13) (record-type-descriptor . y2e12)) '() values values '#f '#f '#t '#f) (y992@y7de@install-library 'y314b '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . y2b93) (&no-nans-rtd . y2b91) (&no-infinities-rcd . y2b7e) (&no-infinities-rtd . y2b7c) (&i/o-encoding-rcd . y2b69) (&i/o-encoding-rtd . y2b67) (&i/o-decoding-rcd . y2b4e) (&i/o-decoding-rtd . y2b4c) (&i/o-port-rcd . y2b39) (&i/o-port-rtd . y2b37) (&i/o-file-does-not-exist-rcd . y2b1e) (&i/o-file-does-not-exist-rtd . y2b1c) (&i/o-file-already-exists-rcd . y2b09) (&i/o-file-already-exists-rtd . y2b07) (&i/o-file-is-read-only-rcd . y2af4) (&i/o-file-is-read-only-rtd . y2af2) (&i/o-file-protection-rcd . y2adf) (&i/o-file-protection-rtd . y2add) (&i/o-filename-rcd . y2aca) (&i/o-filename-rtd . y2ac8) (&i/o-invalid-position-rcd . y2aaf) (&i/o-invalid-position-rtd . y2aad) (&i/o-write-rcd . y2a94) (&i/o-write-rtd . y2a92) (&i/o-read-rcd . y2a7f) (&i/o-read-rtd . y2a7d) (&i/o-rcd . y2a6a) (&i/o-rtd . y2a68) (&undefined-rcd . y2a55) (&undefined-rtd . y2a53) (&syntax-rcd . y2a40) (&syntax-rtd . y2a3e) (&lexical-rcd . y2a1f) (&lexical-rtd . y2a1d) (&implementation-restriction-rcd . y2a0a) (&implementation-restriction-rtd . y2a08) (&non-continuable-rcd . y29f5) (&non-continuable-rtd . y29f3) (&who-rcd . y29e0) (&who-rtd . y29de) (&irritants-rcd . y29c5) (&irritants-rtd . y29c3) (&assertion-rcd . y29aa) (&assertion-rtd . y29a8) (&violation-rcd . y2995) (&violation-rtd . y2993) (&error-rcd . y2980) (&error-rtd . y297e) (&serious-rcd . y296b) (&serious-rtd . y2969) (&warning-rcd . y2956) (&warning-rtd . y2954) (&message-rcd . y2941) (&message-rtd . y293f) (&condition-rcd . y28e2) (&condition-rtd . y28e0) (syntax-error . ye60) (syntax-dispatch . yd84) (pretty-print . y312b) (eval-core . y312a) (set-symbol-value! . y3129) (symbol-value . y3128) (gensym . y3127) (void . y3126) (load . y2ca2) (interaction-environment . ye72) (char-ready? . y3125) (regexp? . y3124) (read-line . y3123) (gensym-prefix-set! . y3122) (ungensym . y3121) (alist->eq-hash-table . y3120) (assoc-ref . y311f) (print . y311e) (format . y311d) (host-os . y311c) (library-path . y7bd) (standard-library-path . y311b) (file-newer? . y311a) (stat-mtime . y3119) (write-to-file . y3118) (file->sexp-list . y3117) (file->list . y3116) (file->string . y3115) (digit->integer . y3114) (call-with-string-input-port . y3113) (call-with-string-io . y3112) (string-split . y3111) (bytevector-for-each . y3110) (string->regexp . y310f) (rxmatch . y310e) (regexp-replace-all . y310d) (hashtable-for-each . y310c) (mosh-cache-dir . y5a8) (call-process . y310b) (local-tz-offset . y310a) (microseconds . y3109) (directory-list . y3108) (set-current-directory! . y3107) (expand-path . y3106) (current-directory . y3105) (%spawn . y3104) (%waitpid . y3103) (simple-struct-name . y3102) (simple-struct-set! . y3101) (simple-struct-ref . y3100) (make-simple-struct . y30ff) (simple-struct? . y30fe) (pointer-ref-c-int64 . y30fd) (pointer-ref-c-int32 . y30fc) (pointer-ref-c-int16 . y30fb) (pointer-ref-c-int8 . y30fa) (pointer-ref-c-uint64 . y30f9) (pointer-ref-c-uint32 . y30f8) (pointer-ref-c-uint16 . y30f7) (pointer-ref-c-uint8 . y30f6) (pointer-set-c-uint64! . y30f5) (pointer-set-c-uint32! . y30f4) (pointer-set-c-uint16! . y30f3) (pointer-set-c-uint8! . y30f2) (pointer-set-c-int64! . y30f1) (pointer-set-c-int32! . y30f0) (pointer-set-c-int16! . y30ef) (pointer-set-c-int8! . y30ee) (pointer-set-c-pointer! . y30ed) (pointer-set-c-double! . y30ec) (pointer-set-c-float! . y30eb) (pointer-set-c-long-long! . y30ea) (pointer-set-c-long! . y30e9) (pointer-set-c-int! . y30e8) (pointer-set-c-short! . y30e7) (pointer-set-c-char! . y30e6) (pointer-ref-c-pointer . y30e5) (pointer-ref-c-double . y30e4) (pointer-ref-c-float . y30e3) (pointer-ref-c-unsigned-long-long . y30e2) (pointer-ref-c-signed-long-long . y30e1) (pointer-ref-c-unsigned-long . y30e0) (pointer-ref-c-signed-long . y30df) (pointer-ref-c-unsigned-int . y30de) (pointer-ref-c-signed-int . y30dd) (pointer-ref-c-unsigned-short . y30dc) (pointer-ref-c-signed-short . y30db) (pointer-ref-c-unsigned-char . y30da) (pointer-ref-c-signed-char . y30d9) (pointer->integer . y30d8) (integer->pointer . y30d7) (pointer? . y30d6) (shared-errno . y30d5) (get-c-address . y30d4) (obj->integer . y30d3) (u8-list->c-procedure . y30d2) (%ffi-free-c-callback-trampoline . y30d1) (%ffi-make-c-callback-trampoline . y30d0) (%ffi-free . y30cf) (%ffi-malloc . y30ce) (%ffi-supported? . y30cd) (%ffi-pointer->string . y30cc) (%ffi-call->string-or-zero . y30cb) (%ffi-call->double . y30ca) (%ffi-call->void* . y30c9) (%ffi-call->void . y30c8) (%ffi-call->char . y30c7) (%ffi-call->int . y30c6) (%ffi-lookup . y30c5) (%ffi-open . y30c4) (%fork . y30c3) (%pipe . y30c2) (p . y30c1) (open-output-string . y30c0) (get-output-string . y30bf) (file-stat-ctime . y30be) (file-stat-atime . y30bd) (file-stat-mtime . y30bc) (file-size-in-bytes . y30bb) (file-writable? . y30ba) (file-executable? . y30b9) (file-readable? . y30b8) (file-regular? . y30b7) (file-symbolic-link? . y30b6) (file-directory? . y30b5) (create-symbolic-link . y30b4) (rename-file . y30b3) (delete-directory . y30b2) (create-directory . y30b1) (create-mosh-cache-dir . y30b0) (get-environment-variables . y30af) (current-exception-handler . y30ae) (get-environment-variable . y30ad) (join-wraps . y30ac) (id->real-label . y30ab) (same-marks? . y30aa) (same-marks*? . y30a9) (get-timeofday . y30a8) (get-command-line . y30a7) (sys-display . y30a6) (whereis . y30a5) (register . y30a4) (vm-join! . y30a3) (vm-set-value! . y30a2) (vm? . y30a1) (main-vm? . y30a0) (vm-eval . y309f) (vm-self . y309e) (vm-start! . y309d) (make-vm . y309c) (mutex-try-lock! . y309b) (mutex-unlock! . y309a) (mutex-lock! . y3099) (mutex? . y3098) (make-mutex . y3097) (condition-variable-notify-all! . y3096) (condition-variable-notify! . y3095) (condition-variable-wait! . y3094) (make-condition-variable . y3093) (mosh-executable-path . y3092) (make-file-options . y3091) (for-each-with-index . y3090) (source-info . y308f) (instruction? . y308e) (instruction->integer . y308d) (instruction->symbol . y308c) (closure->list . y308b) (make-compiler-instruction . y308a) (make-instruction . y3089) (set-source-info! . y3088) (bignum? . y3087) (fast-equal? . y3086) (fasl-read . y3085) (fasl-write . y3084) (time-usage . y3083) (os-constant . y3082) (disasm . y3081) (make-parameter . y5a6) (socket-port . y3080) (socket-shutdown . y307f) (socket-close . y307e) (socket-send . y307d) (socket-recv! . y307c) (socket-recv . y307b) (make-server-socket . y307a) (make-client-socket . y3079) (socket-accept . y3078) (socket? . y3077) (string-upcase . y3076) (string-titlecase . y3075) (string-normalize-nfkd . y3074) (string-normalize-nfkc . y3073) (string-normalize-nfd . y3072) (string-normalize-nfc . y3071) (string-foldcase . y3070) (string-downcase . y306f) (string-ci>? . y306e) (string-ci>=? . y306d) (string-ci=? . y306c) (string-ci<? . y306b) (string-ci<=? . y306a) (char-whitespace? . y3069) (char-upper-case? . y3068) (char-title-case? . y3067) (char-numeric? . y3066) (char-lower-case? . y3065) (char-general-category . y3064) (char-upcase . y3063) (char-titlecase . y3062) (char-foldcase . y3061) (char-downcase . y3060) (char-ci>? . y305f) (char-ci>=? . y305e) (char-ci=? . y305d) (char-ci<? . y305c) (char-ci<=? . y305b) (char-alphabetic? . y305a) (make-variable-transformer . ybaf) (identifier? . ye66) (generate-temporaries . ye52) (free-identifier=? . ye54) (syntax->datum . ye6a) (datum->syntax . ye68) (bound-identifier=? . ye56) (record-type-descriptor? . y3059) (record-predicate . y3058) (record-mutator . y3057) (record-constructor . y3056) (record-accessor . y3055) (make-record-type-descriptor . y3054) (make-record-constructor-descriptor . y3053) (record? . y3052) (record-type-uid . y3051) (record-type-sealed? . y3050) (record-type-parent . y304f) (record-type-opaque? . y304e) (record-type-name . y304d) (record-type-generative? . y304c) (record-type-field-names . y304b) (record-rtd . y304a) (record-field-mutable? . y3049) (delete-file . y3048) (file-exists? . y3047) (vector-sort! . y3046) (vector-sort . y3045) (list-sort . y3044) (symbol-hash . y3043) (string-ci-hash . y3042) (string-hash . y3041) (equal-hash . y3040) (hashtable-equivalence-function . y303f) (make-hashtable . y303e) (hashtable-hash-function . y303d) (make-eqv-hashtable . y303c) (make-eq-hashtable . y303b) (hashtable? . y303a) (hashtable-update! . y3039) (hashtable-size . y3038) (hashtable-set! . y3037) (hashtable-ref . y3036) (hashtable-mutable? . y3035) (hashtable-keys . y3034) (hashtable-entries . y3033) (hashtable-delete! . y3032) (hashtable-copy . y3031) (hashtable-contains? . y3030) (hashtable-clear! . y302f) (call-with-output-file . y302e) (call-with-input-file . y302d) (write-char . y302c) (write . y302b) (with-output-to-file . y302a) (with-input-from-file . y3029) (read-char . y3028) (read . y3027) (peek-char . y3026) (open-output-file . y3025) (open-input-file . y3024) (newline . y3023) (display . y3022) (close-output-port . y3021) (close-input-port . y3020) (eof-object? . y301f) (eof-object . y301e) (current-error-port . y301d) (current-output-port . y301c) (current-input-port . y301b) (output-port? . y301a) (input-port? . y3019) (utf-8-codec . y3018) (utf-16-codec . y3017) (transcoder-error-handling-mode . y3016) (transcoder-eol-style . y3015) (transcoder-codec . y3014) (transcoded-port . y3013) (textual-port? . y3012) (string->bytevector . y3011) (standard-output-port . y3010) (standard-input-port . y300f) (standard-error-port . y300e) (set-port-position! . y300d) (put-u8 . y300c) (put-string . y300b) (put-datum . y300a) (put-char . y3009) (put-bytevector . y3008) (port? . y3007) (port-transcoder . y3006) (port-position . y3005) (port-has-set-port-position!? . y3004) (port-has-port-position? . y3003) (port-eof? . y3002) (output-port-buffer-mode . y3001) (open-string-output-port . y3000) (open-string-input-port . y2fff) (open-file-output-port . y2ffe) (open-file-input/output-port . y2ffd) (open-file-input-port . y2ffc) (open-bytevector-output-port . y2ffb) (open-bytevector-input-port . y2ffa) (native-transcoder . y2ff9) (native-eol-style . y2ff8) (make-transcoder . y2ff7) (latin-1-codec . y2ff6) (make-i/o-write-error . y2a8e) (make-i/o-read-error . y2a79) (make-i/o-port-error . y2b2f) (make-i/o-invalid-position-error . y2aa5) (make-i/o-filename-error . y2ac0) (make-i/o-file-protection-error . y2ad9) (make-i/o-file-is-read-only-error . y2aee) (make-i/o-file-does-not-exist-error . y2b18) (make-i/o-file-already-exists-error . y2b03) (make-i/o-error . y2a64) (make-i/o-encoding-error . y2b5f) (make-i/o-decoding-error . y2b48) (make-custom-textual-output-port . y2ff5) (make-custom-textual-input/output-port . y2ff4) (make-custom-textual-input-port . y2ff3) (make-custom-binary-output-port . y2ff2) (make-custom-binary-input/output-port . y2ff1) (make-custom-binary-input-port . y2ff0) (make-bytevector . y2fef) (lookahead-u8 . y2fee) (lookahead-char . y2fed) (i/o-write-error? . y2a90) (i/o-read-error? . y2a7b) (i/o-port-error? . y2b33) (i/o-invalid-position-error? . y2aa9) (i/o-filename-error? . y2ac4) (i/o-file-protection-error? . y2adb) (i/o-file-is-read-only-error? . y2af0) (i/o-file-does-not-exist-error? . y2b1a) (i/o-file-already-exists-error? . y2b05) (i/o-error? . y2a66) (i/o-error-position . y2aab) (i/o-error-port . y2b35) (i/o-error-filename . y2ac6) (i/o-encoding-error? . y2b63) (i/o-encoding-error-char . y2b65) (i/o-decoding-error? . y2b4a) (get-u8 . y2fec) (get-string-n! . y2feb) (get-string-n . y2fea) (get-string-all . y2fe9) (get-line . y2fe8) (get-datum . y2fe7) (get-char . y2fe6) (get-bytevector-some . y2fe5) (get-bytevector-n! . y2fe4) (get-bytevector-n . y2fe3) (get-bytevector-all . y2fe2) (flush-output-port . y2fe1) (close-port . y2fe0) (scheme-report-environment . ye40) (quotient . y2fdf) (null-environment . ye3e) (remainder . y2fde) (modulo . y2fdd) (inexact->exact . y2fdc) (force . y2fdb) (exact->inexact . y2fda) (make-promise . y2fd9) (exit . y2fd8) (command-line . y2c9c) (string-fill! . y2fd7) (string-set! . y2fd6) (set-cdr! . y2fd5) (set-car! . y2fd4) (remove . y2fd3) (remv . y2fd2) (remp . y2fd1) (remq . y2fd0) (partition . y2fcf) (memv . y2fce) (memq . y2fcd) (memp . y2fcc) (member . y2fcb) (exists . y2fca) (for-all . y2fc9) (fold-right . y2fc8) (fold-left . y2fc7) (find . y2fc6) (filter . y2fc5) (cons* . y2fc4) (assv . y2fc3) (assq . y2fc2) (assp . y2fc1) (assoc . y2fc0) (call-with-string-output-port . y2fbf) (call-with-port . y2fbe) (call-with-bytevector-output-port . y2fbd) (bytevector->string . y2fbc) (buffer-mode? . y2fbb) (binary-port? . y2fba) (with-exception-handler . y2fb9) (raise-continuable . y2fb8) (raise . y2fb7) (eval . ye44) (environment . ye3c) (make-enumeration . y2fb6) (enum-set=? . y2fb5) (enum-set-universe . y2fb4) (enum-set-union . y2fb3) (enum-set-subset? . y2fb2) (enum-set-projection . y2fb1) (enum-set-member? . y2fb0) (enum-set-intersection . y2faf) (enum-set-indexer . y2fae) (enum-set-difference . y2fad) (enum-set-constructor . y2fac) (enum-set-complement . y2fab) (enum-set->list . y2faa) (who-condition? . y29da) (warning? . y2952) (violation? . y2991) (undefined-violation? . y2a51) (syntax-violation? . y2a38) (syntax-violation-subform . y2a3c) (syntax-violation-form . y2a3a) (syntax-violation . ye64) (simple-conditions . y2fa9) (serious-condition? . y2967) (non-continuable-violation? . y29f1) (message-condition? . y293b) (make-who-condition . y29d6) (make-warning . y2950) (make-violation . y298f) (make-undefined-violation . y2a4f) (make-syntax-violation . y2a32) (make-serious-condition . y2965) (make-non-continuable-violation . y29ef) (make-message-condition . y2937) (make-lexical-violation . y2a19) (make-irritants-condition . y29bb) (make-implementation-restriction-violation . y2a04) (make-error . y297a) (make-assertion-violation . y29a4) (lexical-violation? . y2a1b) (irritants-condition? . y29bf) (implementation-restriction-violation? . y2a06) (error? . y297c) (condition-who . y29dc) (condition-predicate . y2fa8) (condition-message . y293d) (condition-irritants . y29c1) (condition-accessor . y2fa7) (condition . y2fa6) (assertion-violation? . y29a6) (condition? . y2fa5) (utf32->string . y2fa4) (utf16->string . y2fa3) (utf8->string . y2fa2) (uint-list->bytevector . y2fa1) (u8-list->bytevector . y2fa0) (string->utf8 . y2f9f) (string->utf32 . y2f9e) (string->utf16 . y2f9d) (sint-list->bytevector . y2f9c) (native-endianness . y2f9b) (bytevector? . y2f9a) (bytevector=? . y2f99) (bytevector-uint-set! . y2f98) (bytevector-uint-ref . y2f97) (bytevector-u8-set! . y2f96) (bytevector-u8-ref . y2f95) (bytevector-u64-set! . y2f94) (bytevector-u64-ref . y2f93) (bytevector-u64-native-set! . y2f92) (bytevector-u64-native-ref . y2f91) (bytevector-u32-set! . y2f90) (bytevector-u32-ref . y2f8f) (bytevector-u32-native-set! . y2f8e) (bytevector-u32-native-ref . y2f8d) (bytevector-u16-set! . y2f8c) (bytevector-u16-ref . y2f8b) (bytevector-u16-native-set! . y2f8a) (bytevector-u16-native-ref . y2f89) (bytevector-sint-set! . y2f88) (bytevector-sint-ref . y2f87) (bytevector-s8-set! . y2f86) (bytevector-s8-ref . y2f85) (bytevector-s64-set! . y2f84) (bytevector-s64-ref . y2f83) (bytevector-s64-native-set! . y2f82) (bytevector-s64-native-ref . y2f81) (bytevector-s32-set! . y2f80) (bytevector-s32-ref . y2f7f) (bytevector-s32-native-set! . y2f7e) (bytevector-s32-native-ref . y2f7d) (bytevector-s16-set! . y2f7c) (bytevector-s16-ref . y2f7b) (bytevector-s16-native-set! . y2f7a) (bytevector-s16-native-ref . y2f79) (bytevector-length . y2f78) (bytevector-ieee-single-ref . y2f77) (bytevector-ieee-single-set! . y2f76) (bytevector-ieee-single-native-set! . y2f75) (bytevector-ieee-single-native-ref . y2f74) (bytevector-ieee-double-set! . y2f73) (bytevector-ieee-double-ref . y2f72) (bytevector-ieee-double-native-set! . y2f71) (bytevector-ieee-double-native-ref . y2f70) (bytevector-fill! . y2f6f) (bytevector-copy! . y2f6e) (bytevector-copy . y2f6d) (bytevector->uint-list . y2f6c) (bytevector->u8-list . y2f6b) (bytevector->sint-list . y2f6a) (no-nans-violation? . y2b8f) (no-infinities-violation? . y2b7a) (make-no-nans-violation . y2b8d) (make-no-infinities-violation . y2b78) (real->flonum . y2f69) (flzero? . y2f68) (fltruncate . y2f67) (fltan . y2f66) (flsqrt . y2f65) (flsin . y2f64) (flround . y2f63) (flpositive? . y2f62) (flonum? . y2f61) (flodd? . y2f60) (flnumerator . y2f5f) (flnegative? . y2f5e) (flnan? . y2f5d) (flmod0 . y2f5c) (flmod . y2f5b) (flmin . y2f5a) (flmax . y2f59) (fllog . y2f58) (flinteger? . y2f57) (flinfinite? . y2f56) (flfloor . y2f55) (flfinite? . y2f54) (flexpt . y2f53) (flexp . y2f52) (fleven? . y2f51) (fldiv0-and-mod0 . y2f50) (fldiv0 . y2f4f) (fldiv-and-mod . y2f4e) (fldiv . y2f4d) (fldenominator . y2f4c) (flcos . y2f4b) (flceiling . y2f4a) (flatan . y2f49) (flasin . y2f48) (flacos . y2f47) (flabs . y2f46) (fl>? . y2f45) (fl>=? . y2f44) (fl=? . y2f43) (fl<? . y2f42) (fl<=? . y2f41) (fl/ . y2f40) (fl- . y2f3f) (fl+ . y2f3e) (fl* . y2f3d) (fixnum->flonum . y2f3c) (fxzero? . y2f3b) (fxxor . y2f3a) (fxrotate-bit-field . y2f39) (fxreverse-bit-field . y2f38) (fxpositive? . y2f37) (fxodd? . y2f36) (fxnot . y2f35) (fxnegative? . y2f34) (fxmod0 . y2f33) (fxmod . y2f32) (fxmin . y2f31) (fxmax . y2f30) (fxlength . y2f2f) (fxior . y2f2e) (fxif . y2f2d) (fxfirst-bit-set . y2f2c) (fxeven? . y2f2b) (fxdiv0-and-mod0 . y2f2a) (fxdiv0 . y2f29) (fxdiv-and-mod . y2f28) (fxdiv . y2f27) (fxcopy-bit-field . y2f26) (fxcopy-bit . y2f25) (fxbit-set? . y2f24) (fxbit-field . y2f23) (fxbit-count . y2f22) (fxarithmetic-shift-right . y2f21) (fxarithmetic-shift-left . y2f20) (fxarithmetic-shift . y2f1f) (fxand . y2f1e) (fx>? . y2f1d) (fx>=? . y2f1c) (fx=? . y2f1b) (fx<? . y2f1a) (fx<=? . y2f19) (fx-/carry . y2f18) (fx- . y2f17) (fx+/carry . y2f16) (fx+ . y2f15) (fx*/carry . y2f14) (fx* . y2f13) (greatest-fixnum . y2f12) (least-fixnum . y2f11) (fixnum-width . y2f10) (fixnum? . y2f0f) (bitwise-rotate-bit-field . y2f0e) (bitwise-reverse-bit-field . y2f0d) (bitwise-length . y2f0c) (bitwise-if . y2f0b) (bitwise-first-bit-set . y2f0a) (bitwise-copy-bit-field . y2f09) (bitwise-copy-bit . y2f08) (bitwise-bit-set? . y2f07) (bitwise-bit-field . y2f06) (bitwise-bit-count . y2f05) (bitwise-xor . y2f04) (bitwise-ior . y2f03) (bitwise-and . y2f02) (bitwise-not . y2f01) (bitwise-arithmetic-shift-right . y2f00) (bitwise-arithmetic-shift-left . y2eff) (bitwise-arithmetic-shift . y2efe) (zero? . y2efd) (vector? . y2efc) (vector-set! . y2efb) (vector-ref . y2efa) (vector-map . y2ef9) (vector-length . y2ef8) (vector-for-each . y2ef7) (vector-fill! . y2ef6) (vector->list . y2ef5) (vector . y2ef4) (values . y2ef3) (truncate . y2ef2) (tan . y2ef1) (symbol? . y2ef0) (symbol=? . y2eef) (symbol->string . y2eee) (substring . y2eed) (string? . y2eec) (string>? . y2eeb) (string>=? . y2eea) (string=? . y2ee9) (string<? . y2ee8) (string<=? . y2ee7) (string-ref . y2ee6) (string-length . y2ee5) (string-for-each . y2ee4) (string-copy . y2ee3) (string-append . y2ee2) (string->symbol . y2ee1) (string->number . y2ee0) (string->list . y2edf) (string . y2ede) (sqrt . y2edd) (sin . y2edc) (round . y2edb) (reverse . y2eda) (real? . y2ed9) (real-valued? . y2ed8) (real-part . y2ed7) (rationalize . y2ed6) (rational? . y2ed5) (rational-valued? . y2ed4) (procedure? . y2ed3) (positive? . y2ed2) (pair? . y2ed1) (odd? . y2ed0) (numerator . y2ecf) (number? . y2ece) (number->string . y2ecd) (null? . y2ecc) (not . y2ecb) (negative? . y2eca) (nan? . y2ec9) (min . y2ec8) (max . y2ec7) (map . y2ec6) (make-vector . y2ec5) (make-string . y2ec4) (make-rectangular . y2ec3) (make-polar . y2ec2) (magnitude . y2ec1) (log . y2ec0) (list? . y2ebf) (list-tail . y2ebe) (list-ref . y2ebd) (list->vector . y2ebc) (list->string . y2ebb) (list . y2eba) (length . y2eb9) (lcm . y2eb8) (integer? . y2eb7) (integer-valued? . y2eb6) (integer->char . y2eb5) (infinite? . y2eb4) (inexact? . y2eb3) (inexact . y2eb2) (imag-part . y2eb1) (gcd . y2eb0) (for-each . y2eaf) (floor . y2eae) (finite? . y2ead) (expt . y2eac) (exp . y2eab) (exact? . y2eaa) (exact-integer-sqrt . y2ea9) (exact . y2ea8) (even? . y2ea7) (error . y2ea6) (eqv? . y2ea5) (equal? . y2ea4) (eq? . y2ea3) (dynamic-wind . y2ea2) (div0-and-mod0 . y2ea1) (mod0 . y2ea0) (div0 . y2e9f) (div-and-mod . y2e9e) (mod . y2e9d) (div . y2e9c) (denominator . y2e9b) (cos . y2e9a) (cons . y2e99) (complex? . y2e98) (char? . y2e97) (char>? . y2e96) (char>=? . y2e95) (char=? . y2e94) (char<? . y2e93) (char<=? . y2e92) (char->integer . y2e91) (ceiling . y2e90) (call-with-values . y2e8f) (call/cc . y2e8e) (call-with-current-continuation . y2e8d) (cddddr . y2e8c) (cdddar . y2e8b) (cddadr . y2e8a) (cddaar . y2e89) (cdaddr . y2e88) (cdadar . y2e87) (cdaadr . y2e86) (cdaaar . y2e85) (cadddr . y2e84) (caddar . y2e83) (cadadr . y2e82) (cadaar . y2e81) (caaddr . y2e80) (caadar . y2e7f) (caaadr . y2e7e) (caaaar . y2e7d) (cdddr . y2e7c) (cddar . y2e7b) (cdadr . y2e7a) (cdaar . y2e79) (caddr . y2e78) (cadar . y2e77) (caadr . y2e76) (caaar . y2e75) (cddr . y2e74) (cdar . y2e73) (cadr . y2e72) (caar . y2e71) (cdr . y2e70) (car . y2e6f) (boolean? . y2e6e) (boolean=? . y2e6d) (atan . y2e6c) (assertion-violation . y2e6b) (assertion-error . ye5e) (asin . y2e6a) (apply . y2e69) (append . y2e68) (angle . y2e67) (acos . y2e66) (abs . y2e65) (/ . y2e64) (* . y2e63) (- . y2e62) (+ . y2e61) (>= . y2e60) (> . y2e5f) (= . y2e5e) (<= . y2e5d) (< . y2e5c) (library . y2e5b) (&no-nans . y2e5a) (&no-infinities . y2e59) (&i/o-encoding . y2e58) (&i/o-decoding . y2e57) (&i/o-port . y2e56) (&i/o-file-does-not-exist . y2e55) (&i/o-file-already-exists . y2e54) (&i/o-file-is-read-only . y2e53) (&i/o-file-protection . y2e52) (&i/o-filename . y2e51) (&i/o-invalid-position . y2e50) (&i/o-write . y2e4f) (&i/o-read . y2e4e) (&i/o . y2e4d) (&undefined . y2e4c) (&syntax . y2e4b) (&lexical . y2e4a) (&implementation-restriction . y2e49) (&non-continuable . y2e48) (&who . y2e47) (&irritants . y2e46) (&assertion . y2e45) (&violation . y2e44) (&error . y2e43) (&serious . y2e42) (&warning . y2e41) (&message . y2e40) (&condition . y2e3f) (define-condition-type . y2e3e) (define-enumeration . y2e3d) (define-record-type . y2e3c) (parent-rtd . y2e3b) (nongenerative . y2e3a) (opaque . y2e39) (sealed . y2e38) (protocol . y2e37) (parent . y2e36) (immutable . y2e35) (mutable . y2e34) (fields . y2e33) (error-handling-mode . y2e32) (file-options . y2e31) (buffer-mode . y2e30) (eol-style . y2e2f) (guard . y2e2e) (trace-define . y2e2d) (trace-lambda . y2e2c) (unsyntax-splicing . y2e2b) (unsyntax . y2e2a) (unquote-splicing . y2e29) (unquote . y2e28) (_ . y2e27) (else . y2e26) (=> . y2e25) (... . y2e24) (assert . y2e23) (endianness . y2e22) (delay . y2e21) (time . y2e20) (do . y2e1f) (cond . y2e1e) (let* . y2e1d) (let*-values . y2e1c) (let-values . y2e1b) (identifier-syntax . y2e1a) (with-syntax . y2e19) (quasisyntax . y2e18) (quasiquote . y2e17) (syntax-rules . y2e16) (include . y2e15) (define-struct . y2e14) (record-constructor-descriptor . y2e13) (record-type-descriptor . y2e12) (case . y2e11) (parameterize . y2e10) (unless . y2e0f) (when . y2e0e) (or . y2e0d) (and . y2e0c) (if . y2e0b) (let . y2e0a) (letrec* . y2e09) (letrec . y2e08) (type-descriptor . y2e07) (case-lambda . y2e06) (lambda . y2e05) (syntax . y2e04) (syntax-case . y2e03) (quote . y2e02) (foreign-call . y2e01) (letrec-syntax . y2e00) (let-syntax . y2dff) (set! . y2dfe) (import . y2dfd) (begin . y2dfc) (module . y2dfb) (define-syntax . y2dfa) (define . y2df9)) '((y2b93 core-prim . &no-nans-rcd) (y2b91 core-prim . &no-nans-rtd) (y2b7e core-prim . &no-infinities-rcd) (y2b7c core-prim . &no-infinities-rtd) (y2b69 core-prim . &i/o-encoding-rcd) (y2b67 core-prim . &i/o-encoding-rtd) (y2b4e core-prim . &i/o-decoding-rcd) (y2b4c core-prim . &i/o-decoding-rtd) (y2b39 core-prim . &i/o-port-rcd) (y2b37 core-prim . &i/o-port-rtd) (y2b1e core-prim . &i/o-file-does-not-exist-rcd) (y2b1c core-prim . &i/o-file-does-not-exist-rtd) (y2b09 core-prim . &i/o-file-already-exists-rcd) (y2b07 core-prim . &i/o-file-already-exists-rtd) (y2af4 core-prim . &i/o-file-is-read-only-rcd) (y2af2 core-prim . &i/o-file-is-read-only-rtd) (y2adf core-prim . &i/o-file-protection-rcd) (y2add core-prim . &i/o-file-protection-rtd) (y2aca core-prim . &i/o-filename-rcd) (y2ac8 core-prim . &i/o-filename-rtd) (y2aaf core-prim . &i/o-invalid-position-rcd) (y2aad core-prim . &i/o-invalid-position-rtd) (y2a94 core-prim . &i/o-write-rcd) (y2a92 core-prim . &i/o-write-rtd) (y2a7f core-prim . &i/o-read-rcd) (y2a7d core-prim . &i/o-read-rtd) (y2a6a core-prim . &i/o-rcd) (y2a68 core-prim . &i/o-rtd) (y2a55 core-prim . &undefined-rcd) (y2a53 core-prim . &undefined-rtd) (y2a40 core-prim . &syntax-rcd) (y2a3e core-prim . &syntax-rtd) (y2a1f core-prim . &lexical-rcd) (y2a1d core-prim . &lexical-rtd) (y2a0a core-prim . &implementation-restriction-rcd) (y2a08 core-prim . &implementation-restriction-rtd) (y29f5 core-prim . &non-continuable-rcd) (y29f3 core-prim . &non-continuable-rtd) (y29e0 core-prim . &who-rcd) (y29de core-prim . &who-rtd) (y29c5 core-prim . &irritants-rcd) (y29c3 core-prim . &irritants-rtd) (y29aa core-prim . &assertion-rcd) (y29a8 core-prim . &assertion-rtd) (y2995 core-prim . &violation-rcd) (y2993 core-prim . &violation-rtd) (y2980 core-prim . &error-rcd) (y297e core-prim . &error-rtd) (y296b core-prim . &serious-rcd) (y2969 core-prim . &serious-rtd) (y2956 core-prim . &warning-rcd) (y2954 core-prim . &warning-rtd) (y2941 core-prim . &message-rcd) (y293f core-prim . &message-rtd) (y28e2 core-prim . &condition-rcd) (y28e0 core-prim . &condition-rtd) (ye60 core-prim . syntax-error) (yd84 core-prim . syntax-dispatch) (y312b core-prim . pretty-print) (y312a core-prim . eval-core) (y3129 core-prim . set-symbol-value!) (y3128 core-prim . symbol-value) (y3127 core-prim . gensym) (y3126 core-prim . void) (y2ca2 core-prim . load) (ye72 core-prim . interaction-environment) (y3125 core-prim . char-ready?) (y3124 core-prim . regexp?) (y3123 core-prim . read-line) (y3122 core-prim . gensym-prefix-set!) (y3121 core-prim . ungensym) (y3120 core-prim . alist->eq-hash-table) (y311f core-prim . assoc-ref) (y311e core-prim . print) (y311d core-prim . format) (y311c core-prim . host-os) (y7bd core-prim . library-path) (y311b core-prim . standard-library-path) (y311a core-prim . file-newer?) (y3119 core-prim . stat-mtime) (y3118 core-prim . write-to-file) (y3117 core-prim . file->sexp-list) (y3116 core-prim . file->list) (y3115 core-prim . file->string) (y3114 core-prim . digit->integer) (y3113 core-prim . call-with-string-input-port) (y3112 core-prim . call-with-string-io) (y3111 core-prim . string-split) (y3110 core-prim . bytevector-for-each) (y310f core-prim . string->regexp) (y310e core-prim . rxmatch) (y310d core-prim . regexp-replace-all) (y310c core-prim . hashtable-for-each) (y5a8 core-prim . mosh-cache-dir) (y310b core-prim . call-process) (y310a core-prim . local-tz-offset) (y3109 core-prim . microseconds) (y3108 core-prim . directory-list) (y3107 core-prim . set-current-directory!) (y3106 core-prim . expand-path) (y3105 core-prim . current-directory) (y3104 core-prim . %spawn) (y3103 core-prim . %waitpid) (y3102 core-prim . simple-struct-name) (y3101 core-prim . simple-struct-set!) (y3100 core-prim . simple-struct-ref) (y30ff core-prim . make-simple-struct) (y30fe core-prim . simple-struct?) (y30fd core-prim . pointer-ref-c-int64) (y30fc core-prim . pointer-ref-c-int32) (y30fb core-prim . pointer-ref-c-int16) (y30fa core-prim . pointer-ref-c-int8) (y30f9 core-prim . pointer-ref-c-uint64) (y30f8 core-prim . pointer-ref-c-uint32) (y30f7 core-prim . pointer-ref-c-uint16) (y30f6 core-prim . pointer-ref-c-uint8) (y30f5 core-prim . pointer-set-c-uint64!) (y30f4 core-prim . pointer-set-c-uint32!) (y30f3 core-prim . pointer-set-c-uint16!) (y30f2 core-prim . pointer-set-c-uint8!) (y30f1 core-prim . pointer-set-c-int64!) (y30f0 core-prim . pointer-set-c-int32!) (y30ef core-prim . pointer-set-c-int16!) (y30ee core-prim . pointer-set-c-int8!) (y30ed core-prim . pointer-set-c-pointer!) (y30ec core-prim . pointer-set-c-double!) (y30eb core-prim . pointer-set-c-float!) (y30ea core-prim . pointer-set-c-long-long!) (y30e9 core-prim . pointer-set-c-long!) (y30e8 core-prim . pointer-set-c-int!) (y30e7 core-prim . pointer-set-c-short!) (y30e6 core-prim . pointer-set-c-char!) (y30e5 core-prim . pointer-ref-c-pointer) (y30e4 core-prim . pointer-ref-c-double) (y30e3 core-prim . pointer-ref-c-float) (y30e2 core-prim . pointer-ref-c-unsigned-long-long) (y30e1 core-prim . pointer-ref-c-signed-long-long) (y30e0 core-prim . pointer-ref-c-unsigned-long) (y30df core-prim . pointer-ref-c-signed-long) (y30de core-prim . pointer-ref-c-unsigned-int) (y30dd core-prim . pointer-ref-c-signed-int) (y30dc core-prim . pointer-ref-c-unsigned-short) (y30db core-prim . pointer-ref-c-signed-short) (y30da core-prim . pointer-ref-c-unsigned-char) (y30d9 core-prim . pointer-ref-c-signed-char) (y30d8 core-prim . pointer->integer) (y30d7 core-prim . integer->pointer) (y30d6 core-prim . pointer?) (y30d5 core-prim . shared-errno) (y30d4 core-prim . get-c-address) (y30d3 core-prim . obj->integer) (y30d2 core-prim . u8-list->c-procedure) (y30d1 core-prim . %ffi-free-c-callback-trampoline) (y30d0 core-prim . %ffi-make-c-callback-trampoline) (y30cf core-prim . %ffi-free) (y30ce core-prim . %ffi-malloc) (y30cd core-prim . %ffi-supported?) (y30cc core-prim . %ffi-pointer->string) (y30cb core-prim . %ffi-call->string-or-zero) (y30ca core-prim . %ffi-call->double) (y30c9 core-prim . %ffi-call->void*) (y30c8 core-prim . %ffi-call->void) (y30c7 core-prim . %ffi-call->char) (y30c6 core-prim . %ffi-call->int) (y30c5 core-prim . %ffi-lookup) (y30c4 core-prim . %ffi-open) (y30c3 core-prim . %fork) (y30c2 core-prim . %pipe) (y30c1 core-prim . p) (y30c0 core-prim . open-output-string) (y30bf core-prim . get-output-string) (y30be core-prim . file-stat-ctime) (y30bd core-prim . file-stat-atime) (y30bc core-prim . file-stat-mtime) (y30bb core-prim . file-size-in-bytes) (y30ba core-prim . file-writable?) (y30b9 core-prim . file-executable?) (y30b8 core-prim . file-readable?) (y30b7 core-prim . file-regular?) (y30b6 core-prim . file-symbolic-link?) (y30b5 core-prim . file-directory?) (y30b4 core-prim . create-symbolic-link) (y30b3 core-prim . rename-file) (y30b2 core-prim . delete-directory) (y30b1 core-prim . create-directory) (y30b0 core-prim . create-mosh-cache-dir) (y30af core-prim . get-environment-variables) (y30ae core-prim . current-exception-handler) (y30ad core-prim . get-environment-variable) (y30ac core-prim . join-wraps) (y30ab core-prim . id->real-label) (y30aa core-prim . same-marks?) (y30a9 core-prim . same-marks*?) (y30a8 core-prim . get-timeofday) (y30a7 core-prim . get-command-line) (y30a6 core-prim . sys-display) (y30a5 core-prim . whereis) (y30a4 core-prim . register) (y30a3 core-prim . vm-join!) (y30a2 core-prim . vm-set-value!) (y30a1 core-prim . vm?) (y30a0 core-prim . main-vm?) (y309f core-prim . vm-eval) (y309e core-prim . vm-self) (y309d core-prim . vm-start!) (y309c core-prim . make-vm) (y309b core-prim . mutex-try-lock!) (y309a core-prim . mutex-unlock!) (y3099 core-prim . mutex-lock!) (y3098 core-prim . mutex?) (y3097 core-prim . make-mutex) (y3096 core-prim . condition-variable-notify-all!) (y3095 core-prim . condition-variable-notify!) (y3094 core-prim . condition-variable-wait!) (y3093 core-prim . make-condition-variable) (y3092 core-prim . mosh-executable-path) (y3091 core-prim . make-file-options) (y3090 core-prim . for-each-with-index) (y308f core-prim . source-info) (y308e core-prim . instruction?) (y308d core-prim . instruction->integer) (y308c core-prim . instruction->symbol) (y308b core-prim . closure->list) (y308a core-prim . make-compiler-instruction) (y3089 core-prim . make-instruction) (y3088 core-prim . set-source-info!) (y3087 core-prim . bignum?) (y3086 core-prim . fast-equal?) (y3085 core-prim . fasl-read) (y3084 core-prim . fasl-write) (y3083 core-prim . time-usage) (y3082 core-prim . os-constant) (y3081 core-prim . disasm) (y5a6 core-prim . make-parameter) (y3080 core-prim . socket-port) (y307f core-prim . socket-shutdown) (y307e core-prim . socket-close) (y307d core-prim . socket-send) (y307c core-prim . socket-recv!) (y307b core-prim . socket-recv) (y307a core-prim . make-server-socket) (y3079 core-prim . make-client-socket) (y3078 core-prim . socket-accept) (y3077 core-prim . socket?) (y3076 core-prim . string-upcase) (y3075 core-prim . string-titlecase) (y3074 core-prim . string-normalize-nfkd) (y3073 core-prim . string-normalize-nfkc) (y3072 core-prim . string-normalize-nfd) (y3071 core-prim . string-normalize-nfc) (y3070 core-prim . string-foldcase) (y306f core-prim . string-downcase) (y306e core-prim . string-ci>?) (y306d core-prim . string-ci>=?) (y306c core-prim . string-ci=?) (y306b core-prim . string-ci<?) (y306a core-prim . string-ci<=?) (y3069 core-prim . char-whitespace?) (y3068 core-prim . char-upper-case?) (y3067 core-prim . char-title-case?) (y3066 core-prim . char-numeric?) (y3065 core-prim . char-lower-case?) (y3064 core-prim . char-general-category) (y3063 core-prim . char-upcase) (y3062 core-prim . char-titlecase) (y3061 core-prim . char-foldcase) (y3060 core-prim . char-downcase) (y305f core-prim . char-ci>?) (y305e core-prim . char-ci>=?) (y305d core-prim . char-ci=?) (y305c core-prim . char-ci<?) (y305b core-prim . char-ci<=?) (y305a core-prim . char-alphabetic?) (ybaf core-prim . make-variable-transformer) (ye66 core-prim . identifier?) (ye52 core-prim . generate-temporaries) (ye54 core-prim . free-identifier=?) (ye6a core-prim . syntax->datum) (ye68 core-prim . datum->syntax) (ye56 core-prim . bound-identifier=?) (y3059 core-prim . record-type-descriptor?) (y3058 core-prim . record-predicate) (y3057 core-prim . record-mutator) (y3056 core-prim . record-constructor) (y3055 core-prim . record-accessor) (y3054 core-prim . make-record-type-descriptor) (y3053 core-prim . make-record-constructor-descriptor) (y3052 core-prim . record?) (y3051 core-prim . record-type-uid) (y3050 core-prim . record-type-sealed?) (y304f core-prim . record-type-parent) (y304e core-prim . record-type-opaque?) (y304d core-prim . record-type-name) (y304c core-prim . record-type-generative?) (y304b core-prim . record-type-field-names) (y304a core-prim . record-rtd) (y3049 core-prim . record-field-mutable?) (y3048 core-prim . delete-file) (y3047 core-prim . file-exists?) (y3046 core-prim . vector-sort!) (y3045 core-prim . vector-sort) (y3044 core-prim . list-sort) (y3043 core-prim . symbol-hash) (y3042 core-prim . string-ci-hash) (y3041 core-prim . string-hash) (y3040 core-prim . equal-hash) (y303f core-prim . hashtable-equivalence-function) (y303e core-prim . make-hashtable) (y303d core-prim . hashtable-hash-function) (y303c core-prim . make-eqv-hashtable) (y303b core-prim . make-eq-hashtable) (y303a core-prim . hashtable?) (y3039 core-prim . hashtable-update!) (y3038 core-prim . hashtable-size) (y3037 core-prim . hashtable-set!) (y3036 core-prim . hashtable-ref) (y3035 core-prim . hashtable-mutable?) (y3034 core-prim . hashtable-keys) (y3033 core-prim . hashtable-entries) (y3032 core-prim . hashtable-delete!) (y3031 core-prim . hashtable-copy) (y3030 core-prim . hashtable-contains?) (y302f core-prim . hashtable-clear!) (y302e core-prim . call-with-output-file) (y302d core-prim . call-with-input-file) (y302c core-prim . write-char) (y302b core-prim . write) (y302a core-prim . with-output-to-file) (y3029 core-prim . with-input-from-file) (y3028 core-prim . read-char) (y3027 core-prim . read) (y3026 core-prim . peek-char) (y3025 core-prim . open-output-file) (y3024 core-prim . open-input-file) (y3023 core-prim . newline) (y3022 core-prim . display) (y3021 core-prim . close-output-port) (y3020 core-prim . close-input-port) (y301f core-prim . eof-object?) (y301e core-prim . eof-object) (y301d core-prim . current-error-port) (y301c core-prim . current-output-port) (y301b core-prim . current-input-port) (y301a core-prim . output-port?) (y3019 core-prim . input-port?) (y3018 core-prim . utf-8-codec) (y3017 core-prim . utf-16-codec) (y3016 core-prim . transcoder-error-handling-mode) (y3015 core-prim . transcoder-eol-style) (y3014 core-prim . transcoder-codec) (y3013 core-prim . transcoded-port) (y3012 core-prim . textual-port?) (y3011 core-prim . string->bytevector) (y3010 core-prim . standard-output-port) (y300f core-prim . standard-input-port) (y300e core-prim . standard-error-port) (y300d core-prim . set-port-position!) (y300c core-prim . put-u8) (y300b core-prim . put-string) (y300a core-prim . put-datum) (y3009 core-prim . put-char) (y3008 core-prim . put-bytevector) (y3007 core-prim . port?) (y3006 core-prim . port-transcoder) (y3005 core-prim . port-position) (y3004 core-prim . port-has-set-port-position!?) (y3003 core-prim . port-has-port-position?) (y3002 core-prim . port-eof?) (y3001 core-prim . output-port-buffer-mode) (y3000 core-prim . open-string-output-port) (y2fff core-prim . open-string-input-port) (y2ffe core-prim . open-file-output-port) (y2ffd core-prim . open-file-input/output-port) (y2ffc core-prim . open-file-input-port) (y2ffb core-prim . open-bytevector-output-port) (y2ffa core-prim . open-bytevector-input-port) (y2ff9 core-prim . native-transcoder) (y2ff8 core-prim . native-eol-style) (y2ff7 core-prim . make-transcoder) (y2ff6 core-prim . latin-1-codec) (y2a8e core-prim . make-i/o-write-error) (y2a79 core-prim . make-i/o-read-error) (y2b2f core-prim . make-i/o-port-error) (y2aa5 core-prim . make-i/o-invalid-position-error) (y2ac0 core-prim . make-i/o-filename-error) (y2ad9 core-prim . make-i/o-file-protection-error) (y2aee core-prim . make-i/o-file-is-read-only-error) (y2b18 core-prim . make-i/o-file-does-not-exist-error) (y2b03 core-prim . make-i/o-file-already-exists-error) (y2a64 core-prim . make-i/o-error) (y2b5f core-prim . make-i/o-encoding-error) (y2b48 core-prim . make-i/o-decoding-error) (y2ff5 core-prim . make-custom-textual-output-port) (y2ff4 core-prim . make-custom-textual-input/output-port) (y2ff3 core-prim . make-custom-textual-input-port) (y2ff2 core-prim . make-custom-binary-output-port) (y2ff1 core-prim . make-custom-binary-input/output-port) (y2ff0 core-prim . make-custom-binary-input-port) (y2fef core-prim . make-bytevector) (y2fee core-prim . lookahead-u8) (y2fed core-prim . lookahead-char) (y2a90 core-prim . i/o-write-error?) (y2a7b core-prim . i/o-read-error?) (y2b33 core-prim . i/o-port-error?) (y2aa9 core-prim . i/o-invalid-position-error?) (y2ac4 core-prim . i/o-filename-error?) (y2adb core-prim . i/o-file-protection-error?) (y2af0 core-prim . i/o-file-is-read-only-error?) (y2b1a core-prim . i/o-file-does-not-exist-error?) (y2b05 core-prim . i/o-file-already-exists-error?) (y2a66 core-prim . i/o-error?) (y2aab core-prim . i/o-error-position) (y2b35 core-prim . i/o-error-port) (y2ac6 core-prim . i/o-error-filename) (y2b63 core-prim . i/o-encoding-error?) (y2b65 core-prim . i/o-encoding-error-char) (y2b4a core-prim . i/o-decoding-error?) (y2fec core-prim . get-u8) (y2feb core-prim . get-string-n!) (y2fea core-prim . get-string-n) (y2fe9 core-prim . get-string-all) (y2fe8 core-prim . get-line) (y2fe7 core-prim . get-datum) (y2fe6 core-prim . get-char) (y2fe5 core-prim . get-bytevector-some) (y2fe4 core-prim . get-bytevector-n!) (y2fe3 core-prim . get-bytevector-n) (y2fe2 core-prim . get-bytevector-all) (y2fe1 core-prim . flush-output-port) (y2fe0 core-prim . close-port) (ye40 core-prim . scheme-report-environment) (y2fdf core-prim . quotient) (ye3e core-prim . null-environment) (y2fde core-prim . remainder) (y2fdd core-prim . modulo) (y2fdc core-prim . inexact->exact) (y2fdb core-prim . force) (y2fda core-prim . exact->inexact) (y2fd9 core-prim . make-promise) (y2fd8 core-prim . exit) (y2c9c core-prim . command-line) (y2fd7 core-prim . string-fill!) (y2fd6 core-prim . string-set!) (y2fd5 core-prim . set-cdr!) (y2fd4 core-prim . set-car!) (y2fd3 core-prim . remove) (y2fd2 core-prim . remv) (y2fd1 core-prim . remp) (y2fd0 core-prim . remq) (y2fcf core-prim . partition) (y2fce core-prim . memv) (y2fcd core-prim . memq) (y2fcc core-prim . memp) (y2fcb core-prim . member) (y2fca core-prim . exists) (y2fc9 core-prim . for-all) (y2fc8 core-prim . fold-right) (y2fc7 core-prim . fold-left) (y2fc6 core-prim . find) (y2fc5 core-prim . filter) (y2fc4 core-prim . cons*) (y2fc3 core-prim . assv) (y2fc2 core-prim . assq) (y2fc1 core-prim . assp) (y2fc0 core-prim . assoc) (y2fbf core-prim . call-with-string-output-port) (y2fbe core-prim . call-with-port) (y2fbd core-prim . call-with-bytevector-output-port) (y2fbc core-prim . bytevector->string) (y2fbb core-prim . buffer-mode?) (y2fba core-prim . binary-port?) (y2fb9 core-prim . with-exception-handler) (y2fb8 core-prim . raise-continuable) (y2fb7 core-prim . raise) (ye44 core-prim . eval) (ye3c core-prim . environment) (y2fb6 core-prim . make-enumeration) (y2fb5 core-prim . enum-set=?) (y2fb4 core-prim . enum-set-universe) (y2fb3 core-prim . enum-set-union) (y2fb2 core-prim . enum-set-subset?) (y2fb1 core-prim . enum-set-projection) (y2fb0 core-prim . enum-set-member?) (y2faf core-prim . enum-set-intersection) (y2fae core-prim . enum-set-indexer) (y2fad core-prim . enum-set-difference) (y2fac core-prim . enum-set-constructor) (y2fab core-prim . enum-set-complement) (y2faa core-prim . enum-set->list) (y29da core-prim . who-condition?) (y2952 core-prim . warning?) (y2991 core-prim . violation?) (y2a51 core-prim . undefined-violation?) (y2a38 core-prim . syntax-violation?) (y2a3c core-prim . syntax-violation-subform) (y2a3a core-prim . syntax-violation-form) (ye64 core-prim . syntax-violation) (y2fa9 core-prim . simple-conditions) (y2967 core-prim . serious-condition?) (y29f1 core-prim . non-continuable-violation?) (y293b core-prim . message-condition?) (y29d6 core-prim . make-who-condition) (y2950 core-prim . make-warning) (y298f core-prim . make-violation) (y2a4f core-prim . make-undefined-violation) (y2a32 core-prim . make-syntax-violation) (y2965 core-prim . make-serious-condition) (y29ef core-prim . make-non-continuable-violation) (y2937 core-prim . make-message-condition) (y2a19 core-prim . make-lexical-violation) (y29bb core-prim . make-irritants-condition) (y2a04 core-prim . make-implementation-restriction-violation) (y297a core-prim . make-error) (y29a4 core-prim . make-assertion-violation) (y2a1b core-prim . lexical-violation?) (y29bf core-prim . irritants-condition?) (y2a06 core-prim . implementation-restriction-violation?) (y297c core-prim . error?) (y29dc core-prim . condition-who) (y2fa8 core-prim . condition-predicate) (y293d core-prim . condition-message) (y29c1 core-prim . condition-irritants) (y2fa7 core-prim . condition-accessor) (y2fa6 core-prim . condition) (y29a6 core-prim . assertion-violation?) (y2fa5 core-prim . condition?) (y2fa4 core-prim . utf32->string) (y2fa3 core-prim . utf16->string) (y2fa2 core-prim . utf8->string) (y2fa1 core-prim . uint-list->bytevector) (y2fa0 core-prim . u8-list->bytevector) (y2f9f core-prim . string->utf8) (y2f9e core-prim . string->utf32) (y2f9d core-prim . string->utf16) (y2f9c core-prim . sint-list->bytevector) (y2f9b core-prim . native-endianness) (y2f9a core-prim . bytevector?) (y2f99 core-prim . bytevector=?) (y2f98 core-prim . bytevector-uint-set!) (y2f97 core-prim . bytevector-uint-ref) (y2f96 core-prim . bytevector-u8-set!) (y2f95 core-prim . bytevector-u8-ref) (y2f94 core-prim . bytevector-u64-set!) (y2f93 core-prim . bytevector-u64-ref) (y2f92 core-prim . bytevector-u64-native-set!) (y2f91 core-prim . bytevector-u64-native-ref) (y2f90 core-prim . bytevector-u32-set!) (y2f8f core-prim . bytevector-u32-ref) (y2f8e core-prim . bytevector-u32-native-set!) (y2f8d core-prim . bytevector-u32-native-ref) (y2f8c core-prim . bytevector-u16-set!) (y2f8b core-prim . bytevector-u16-ref) (y2f8a core-prim . bytevector-u16-native-set!) (y2f89 core-prim . bytevector-u16-native-ref) (y2f88 core-prim . bytevector-sint-set!) (y2f87 core-prim . bytevector-sint-ref) (y2f86 core-prim . bytevector-s8-set!) (y2f85 core-prim . bytevector-s8-ref) (y2f84 core-prim . bytevector-s64-set!) (y2f83 core-prim . bytevector-s64-ref) (y2f82 core-prim . bytevector-s64-native-set!) (y2f81 core-prim . bytevector-s64-native-ref) (y2f80 core-prim . bytevector-s32-set!) (y2f7f core-prim . bytevector-s32-ref) (y2f7e core-prim . bytevector-s32-native-set!) (y2f7d core-prim . bytevector-s32-native-ref) (y2f7c core-prim . bytevector-s16-set!) (y2f7b core-prim . bytevector-s16-ref) (y2f7a core-prim . bytevector-s16-native-set!) (y2f79 core-prim . bytevector-s16-native-ref) (y2f78 core-prim . bytevector-length) (y2f77 core-prim . bytevector-ieee-single-ref) (y2f76 core-prim . bytevector-ieee-single-set!) (y2f75 core-prim . bytevector-ieee-single-native-set!) (y2f74 core-prim . bytevector-ieee-single-native-ref) (y2f73 core-prim . bytevector-ieee-double-set!) (y2f72 core-prim . bytevector-ieee-double-ref) (y2f71 core-prim . bytevector-ieee-double-native-set!) (y2f70 core-prim . bytevector-ieee-double-native-ref) (y2f6f core-prim . bytevector-fill!) (y2f6e core-prim . bytevector-copy!) (y2f6d core-prim . bytevector-copy) (y2f6c core-prim . bytevector->uint-list) (y2f6b core-prim . bytevector->u8-list) (y2f6a core-prim . bytevector->sint-list) (y2b8f core-prim . no-nans-violation?) (y2b7a core-prim . no-infinities-violation?) (y2b8d core-prim . make-no-nans-violation) (y2b78 core-prim . make-no-infinities-violation) (y2f69 core-prim . real->flonum) (y2f68 core-prim . flzero?) (y2f67 core-prim . fltruncate) (y2f66 core-prim . fltan) (y2f65 core-prim . flsqrt) (y2f64 core-prim . flsin) (y2f63 core-prim . flround) (y2f62 core-prim . flpositive?) (y2f61 core-prim . flonum?) (y2f60 core-prim . flodd?) (y2f5f core-prim . flnumerator) (y2f5e core-prim . flnegative?) (y2f5d core-prim . flnan?) (y2f5c core-prim . flmod0) (y2f5b core-prim . flmod) (y2f5a core-prim . flmin) (y2f59 core-prim . flmax) (y2f58 core-prim . fllog) (y2f57 core-prim . flinteger?) (y2f56 core-prim . flinfinite?) (y2f55 core-prim . flfloor) (y2f54 core-prim . flfinite?) (y2f53 core-prim . flexpt) (y2f52 core-prim . flexp) (y2f51 core-prim . fleven?) (y2f50 core-prim . fldiv0-and-mod0) (y2f4f core-prim . fldiv0) (y2f4e core-prim . fldiv-and-mod) (y2f4d core-prim . fldiv) (y2f4c core-prim . fldenominator) (y2f4b core-prim . flcos) (y2f4a core-prim . flceiling) (y2f49 core-prim . flatan) (y2f48 core-prim . flasin) (y2f47 core-prim . flacos) (y2f46 core-prim . flabs) (y2f45 core-prim . fl>?) (y2f44 core-prim . fl>=?) (y2f43 core-prim . fl=?) (y2f42 core-prim . fl<?) (y2f41 core-prim . fl<=?) (y2f40 core-prim . fl/) (y2f3f core-prim . fl-) (y2f3e core-prim . fl+) (y2f3d core-prim . fl*) (y2f3c core-prim . fixnum->flonum) (y2f3b core-prim . fxzero?) (y2f3a core-prim . fxxor) (y2f39 core-prim . fxrotate-bit-field) (y2f38 core-prim . fxreverse-bit-field) (y2f37 core-prim . fxpositive?) (y2f36 core-prim . fxodd?) (y2f35 core-prim . fxnot) (y2f34 core-prim . fxnegative?) (y2f33 core-prim . fxmod0) (y2f32 core-prim . fxmod) (y2f31 core-prim . fxmin) (y2f30 core-prim . fxmax) (y2f2f core-prim . fxlength) (y2f2e core-prim . fxior) (y2f2d core-prim . fxif) (y2f2c core-prim . fxfirst-bit-set) (y2f2b core-prim . fxeven?) (y2f2a core-prim . fxdiv0-and-mod0) (y2f29 core-prim . fxdiv0) (y2f28 core-prim . fxdiv-and-mod) (y2f27 core-prim . fxdiv) (y2f26 core-prim . fxcopy-bit-field) (y2f25 core-prim . fxcopy-bit) (y2f24 core-prim . fxbit-set?) (y2f23 core-prim . fxbit-field) (y2f22 core-prim . fxbit-count) (y2f21 core-prim . fxarithmetic-shift-right) (y2f20 core-prim . fxarithmetic-shift-left) (y2f1f core-prim . fxarithmetic-shift) (y2f1e core-prim . fxand) (y2f1d core-prim . fx>?) (y2f1c core-prim . fx>=?) (y2f1b core-prim . fx=?) (y2f1a core-prim . fx<?) (y2f19 core-prim . fx<=?) (y2f18 core-prim . fx-/carry) (y2f17 core-prim . fx-) (y2f16 core-prim . fx+/carry) (y2f15 core-prim . fx+) (y2f14 core-prim . fx*/carry) (y2f13 core-prim . fx*) (y2f12 core-prim . greatest-fixnum) (y2f11 core-prim . least-fixnum) (y2f10 core-prim . fixnum-width) (y2f0f core-prim . fixnum?) (y2f0e core-prim . bitwise-rotate-bit-field) (y2f0d core-prim . bitwise-reverse-bit-field) (y2f0c core-prim . bitwise-length) (y2f0b core-prim . bitwise-if) (y2f0a core-prim . bitwise-first-bit-set) (y2f09 core-prim . bitwise-copy-bit-field) (y2f08 core-prim . bitwise-copy-bit) (y2f07 core-prim . bitwise-bit-set?) (y2f06 core-prim . bitwise-bit-field) (y2f05 core-prim . bitwise-bit-count) (y2f04 core-prim . bitwise-xor) (y2f03 core-prim . bitwise-ior) (y2f02 core-prim . bitwise-and) (y2f01 core-prim . bitwise-not) (y2f00 core-prim . bitwise-arithmetic-shift-right) (y2eff core-prim . bitwise-arithmetic-shift-left) (y2efe core-prim . bitwise-arithmetic-shift) (y2efd core-prim . zero?) (y2efc core-prim . vector?) (y2efb core-prim . vector-set!) (y2efa core-prim . vector-ref) (y2ef9 core-prim . vector-map) (y2ef8 core-prim . vector-length) (y2ef7 core-prim . vector-for-each) (y2ef6 core-prim . vector-fill!) (y2ef5 core-prim . vector->list) (y2ef4 core-prim . vector) (y2ef3 core-prim . values) (y2ef2 core-prim . truncate) (y2ef1 core-prim . tan) (y2ef0 core-prim . symbol?) (y2eef core-prim . symbol=?) (y2eee core-prim . symbol->string) (y2eed core-prim . substring) (y2eec core-prim . string?) (y2eeb core-prim . string>?) (y2eea core-prim . string>=?) (y2ee9 core-prim . string=?) (y2ee8 core-prim . string<?) (y2ee7 core-prim . string<=?) (y2ee6 core-prim . string-ref) (y2ee5 core-prim . string-length) (y2ee4 core-prim . string-for-each) (y2ee3 core-prim . string-copy) (y2ee2 core-prim . string-append) (y2ee1 core-prim . string->symbol) (y2ee0 core-prim . string->number) (y2edf core-prim . string->list) (y2ede core-prim . string) (y2edd core-prim . sqrt) (y2edc core-prim . sin) (y2edb core-prim . round) (y2eda core-prim . reverse) (y2ed9 core-prim . real?) (y2ed8 core-prim . real-valued?) (y2ed7 core-prim . real-part) (y2ed6 core-prim . rationalize) (y2ed5 core-prim . rational?) (y2ed4 core-prim . rational-valued?) (y2ed3 core-prim . procedure?) (y2ed2 core-prim . positive?) (y2ed1 core-prim . pair?) (y2ed0 core-prim . odd?) (y2ecf core-prim . numerator) (y2ece core-prim . number?) (y2ecd core-prim . number->string) (y2ecc core-prim . null?) (y2ecb core-prim . not) (y2eca core-prim . negative?) (y2ec9 core-prim . nan?) (y2ec8 core-prim . min) (y2ec7 core-prim . max) (y2ec6 core-prim . map) (y2ec5 core-prim . make-vector) (y2ec4 core-prim . make-string) (y2ec3 core-prim . make-rectangular) (y2ec2 core-prim . make-polar) (y2ec1 core-prim . magnitude) (y2ec0 core-prim . log) (y2ebf core-prim . list?) (y2ebe core-prim . list-tail) (y2ebd core-prim . list-ref) (y2ebc core-prim . list->vector) (y2ebb core-prim . list->string) (y2eba core-prim . list) (y2eb9 core-prim . length) (y2eb8 core-prim . lcm) (y2eb7 core-prim . integer?) (y2eb6 core-prim . integer-valued?) (y2eb5 core-prim . integer->char) (y2eb4 core-prim . infinite?) (y2eb3 core-prim . inexact?) (y2eb2 core-prim . inexact) (y2eb1 core-prim . imag-part) (y2eb0 core-prim . gcd) (y2eaf core-prim . for-each) (y2eae core-prim . floor) (y2ead core-prim . finite?) (y2eac core-prim . expt) (y2eab core-prim . exp) (y2eaa core-prim . exact?) (y2ea9 core-prim . exact-integer-sqrt) (y2ea8 core-prim . exact) (y2ea7 core-prim . even?) (y2ea6 core-prim . error) (y2ea5 core-prim . eqv?) (y2ea4 core-prim . equal?) (y2ea3 core-prim . eq?) (y2ea2 core-prim . dynamic-wind) (y2ea1 core-prim . div0-and-mod0) (y2ea0 core-prim . mod0) (y2e9f core-prim . div0) (y2e9e core-prim . div-and-mod) (y2e9d core-prim . mod) (y2e9c core-prim . div) (y2e9b core-prim . denominator) (y2e9a core-prim . cos) (y2e99 core-prim . cons) (y2e98 core-prim . complex?) (y2e97 core-prim . char?) (y2e96 core-prim . char>?) (y2e95 core-prim . char>=?) (y2e94 core-prim . char=?) (y2e93 core-prim . char<?) (y2e92 core-prim . char<=?) (y2e91 core-prim . char->integer) (y2e90 core-prim . ceiling) (y2e8f core-prim . call-with-values) (y2e8e core-prim . call/cc) (y2e8d core-prim . call-with-current-continuation) (y2e8c core-prim . cddddr) (y2e8b core-prim . cdddar) (y2e8a core-prim . cddadr) (y2e89 core-prim . cddaar) (y2e88 core-prim . cdaddr) (y2e87 core-prim . cdadar) (y2e86 core-prim . cdaadr) (y2e85 core-prim . cdaaar) (y2e84 core-prim . cadddr) (y2e83 core-prim . caddar) (y2e82 core-prim . cadadr) (y2e81 core-prim . cadaar) (y2e80 core-prim . caaddr) (y2e7f core-prim . caadar) (y2e7e core-prim . caaadr) (y2e7d core-prim . caaaar) (y2e7c core-prim . cdddr) (y2e7b core-prim . cddar) (y2e7a core-prim . cdadr) (y2e79 core-prim . cdaar) (y2e78 core-prim . caddr) (y2e77 core-prim . cadar) (y2e76 core-prim . caadr) (y2e75 core-prim . caaar) (y2e74 core-prim . cddr) (y2e73 core-prim . cdar) (y2e72 core-prim . cadr) (y2e71 core-prim . caar) (y2e70 core-prim . cdr) (y2e6f core-prim . car) (y2e6e core-prim . boolean?) (y2e6d core-prim . boolean=?) (y2e6c core-prim . atan) (y2e6b core-prim . assertion-violation) (ye5e core-prim . assertion-error) (y2e6a core-prim . asin) (y2e69 core-prim . apply) (y2e68 core-prim . append) (y2e67 core-prim . angle) (y2e66 core-prim . acos) (y2e65 core-prim . abs) (y2e64 core-prim . /) (y2e63 core-prim . *) (y2e62 core-prim . -) (y2e61 core-prim . +) (y2e60 core-prim . >=) (y2e5f core-prim . >) (y2e5e core-prim . =) (y2e5d core-prim . <=) (y2e5c core-prim . <) (y2e5b core-prim . library) (y2e5a $core-rtd &no-nans-rtd &no-nans-rcd) (y2e59 $core-rtd &no-infinities-rtd &no-infinities-rcd) (y2e58 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (y2e57 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (y2e56 $core-rtd &i/o-port-rtd &i/o-port-rcd) (y2e55 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (y2e54 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (y2e53 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (y2e52 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (y2e51 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (y2e50 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (y2e4f $core-rtd &i/o-write-rtd &i/o-write-rcd) (y2e4e $core-rtd &i/o-read-rtd &i/o-read-rcd) (y2e4d $core-rtd &i/o-rtd &i/o-rcd) (y2e4c $core-rtd &undefined-rtd &undefined-rcd) (y2e4b $core-rtd &syntax-rtd &syntax-rcd) (y2e4a $core-rtd &lexical-rtd &lexical-rcd) (y2e49 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (y2e48 $core-rtd &non-continuable-rtd &non-continuable-rcd) (y2e47 $core-rtd &who-rtd &who-rcd) (y2e46 $core-rtd &irritants-rtd &irritants-rcd) (y2e45 $core-rtd &assertion-rtd &assertion-rcd) (y2e44 $core-rtd &violation-rtd &violation-rcd) (y2e43 $core-rtd &error-rtd &error-rcd) (y2e42 $core-rtd &serious-rtd &serious-rcd) (y2e41 $core-rtd &warning-rtd &warning-rcd) (y2e40 $core-rtd &message-rtd &message-rcd) (y2e3f $core-rtd &condition-rtd &condition-rcd) (y2e3e macro . define-condition-type) (y2e3d macro . define-enumeration) (y2e3c macro . define-record-type) (y2e3b macro . parent-rtd) (y2e3a macro . nongenerative) (y2e39 macro . opaque) (y2e38 macro . sealed) (y2e37 macro . protocol) (y2e36 macro . parent) (y2e35 macro . immutable) (y2e34 macro . mutable) (y2e33 macro . fields) (y2e32 macro . error-handling-mode) (y2e31 macro . file-options) (y2e30 macro . buffer-mode) (y2e2f macro . eol-style) (y2e2e macro . guard) (y2e2d macro . trace-define) (y2e2c macro . trace-lambda) (y2e2b macro . unsyntax-splicing) (y2e2a macro . unsyntax) (y2e29 macro . unquote-splicing) (y2e28 macro . unquote) (y2e27 macro . _) (y2e26 macro . else) (y2e25 macro . =>) (y2e24 macro . ...) (y2e23 macro . assert) (y2e22 macro . endianness) (y2e21 macro . delay) (y2e20 macro . time) (y2e1f macro . do) (y2e1e macro . cond) (y2e1d macro . let*) (y2e1c macro . let*-values) (y2e1b macro . let-values) (y2e1a macro . identifier-syntax) (y2e19 macro . with-syntax) (y2e18 macro . quasisyntax) (y2e17 macro . quasiquote) (y2e16 macro . syntax-rules) (y2e15 macro . include) (y2e14 macro . define-struct) (y2e13 core-macro . record-constructor-descriptor) (y2e12 core-macro . record-type-descriptor) (y2e11 macro . case) (y2e10 macro . parameterize) (y2e0f macro . unless) (y2e0e macro . when) (y2e0d core-macro . or) (y2e0c core-macro . and) (y2e0b core-macro . if) (y2e0a core-macro . let) (y2e09 core-macro . letrec*) (y2e08 core-macro . letrec) (y2e07 core-macro . type-descriptor) (y2e06 core-macro . case-lambda) (y2e05 core-macro . lambda) (y2e04 core-macro . syntax) (y2e03 core-macro . syntax-case) (y2e02 core-macro . quote) (y2e01 core-macro . foreign-call) (y2e00 letrec-syntax) (y2dff let-syntax) (y2dfe set!) (y2dfd import) (y2dfc begin) (y2dfb module) (y2dfa define-syntax) (y2df9 define)) values values '#f '#f '#f '#f) (y992@y7de@install-library 'y314c '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . y312b) (eval-core . y312a) (set-symbol-value! . y3129) (symbol-value . y3128) (gensym . y3127) (void . y3126)) '() values values '#f '#f '#f '#f) (y992@y7de@install-library 'y314d '(mosh) '() '() '() '() '((set-symbol-value! . y3129) (symbol-value . y3128) (gensym . y3127) (regexp? . y3124) (read-line . y3123) (ungensym . y3121) (alist->eq-hash-table . y3120) (assoc-ref . y311f) (print . y311e) (format . y311d) (host-os . y311c) (library-path . y7bd) (standard-library-path . y311b) (file-newer? . y311a) (stat-mtime . y3119) (digit->integer . y3114) (call-with-string-input-port . y3113) (call-with-string-io . y3112) (string-split . y3111) (bytevector-for-each . y3110) (string->regexp . y310f) (rxmatch . y310e) (regexp-replace-all . y310d) (hashtable-for-each . y310c) (set-current-directory! . y3107) (expand-path . y3106) (current-directory . y3105) (p . y30c1) (get-timeofday . y30a8) (get-command-line . y30a7) (sys-display . y30a6) (whereis . y30a5) (register . y30a4) (vm-join! . y30a3) (vm-set-value! . y30a2) (vm? . y30a1) (main-vm? . y30a0) (vm-eval . y309f) (vm-self . y309e) (vm-start! . y309d) (make-vm . y309c) (mutex-try-lock! . y309b) (mutex-unlock! . y309a) (mutex-lock! . y3099) (mutex? . y3098) (make-mutex . y3097) (condition-variable-notify-all! . y3096) (condition-variable-notify! . y3095) (condition-variable-wait! . y3094) (make-condition-variable . y3093) (mosh-executable-path . y3092) (make-file-options . y3091) (for-each-with-index . y3090) (source-info . y308f) (make-compiler-instruction . y308a) (make-instruction . y3089) (set-source-info! . y3088) (bignum? . y3087) (fast-equal? . y3086) (fasl-read . y3085) (fasl-write . y3084) (time-usage . y3083) (os-constant . y3082) (time . y2e20) (include . y2e15)) '() values values '#f '#f '#f '#f) (y992@y7de@install-library 'y314e '(system) '() '() '() '() '((gensym-prefix-set! . y3122) (write-to-file . y3118) (file->sexp-list . y3117) (file->list . y3116) (file->string . y3115) (mosh-cache-dir . y5a8) (call-process . y310b) (local-tz-offset . y310a) (microseconds . y3109) (directory-list . y3108) (expand-path . y3106) (%spawn . y3104) (%waitpid . y3103) (simple-struct-name . y3102) (simple-struct-set! . y3101) (simple-struct-ref . y3100) (make-simple-struct . y30ff) (simple-struct? . y30fe) (pointer-ref-c-int64 . y30fd) (pointer-ref-c-int32 . y30fc) (pointer-ref-c-int16 . y30fb) (pointer-ref-c-int8 . y30fa) (pointer-ref-c-uint64 . y30f9) (pointer-ref-c-uint32 . y30f8) (pointer-ref-c-uint16 . y30f7) (pointer-ref-c-uint8 . y30f6) (pointer-set-c-uint64! . y30f5) (pointer-set-c-uint32! . y30f4) (pointer-set-c-uint16! . y30f3) (pointer-set-c-uint8! . y30f2) (pointer-set-c-int64! . y30f1) (pointer-set-c-int32! . y30f0) (pointer-set-c-int16! . y30ef) (pointer-set-c-int8! . y30ee) (pointer-set-c-pointer! . y30ed) (pointer-set-c-double! . y30ec) (pointer-set-c-float! . y30eb) (pointer-set-c-long-long! . y30ea) (pointer-set-c-long! . y30e9) (pointer-set-c-int! . y30e8) (pointer-set-c-short! . y30e7) (pointer-set-c-char! . y30e6) (pointer-ref-c-pointer . y30e5) (pointer-ref-c-double . y30e4) (pointer-ref-c-float . y30e3) (pointer-ref-c-unsigned-long-long . y30e2) (pointer-ref-c-signed-long-long . y30e1) (pointer-ref-c-unsigned-long . y30e0) (pointer-ref-c-signed-long . y30df) (pointer-ref-c-unsigned-int . y30de) (pointer-ref-c-signed-int . y30dd) (pointer-ref-c-unsigned-short . y30dc) (pointer-ref-c-signed-short . y30db) (pointer-ref-c-unsigned-char . y30da) (pointer-ref-c-signed-char . y30d9) (pointer->integer . y30d8) (integer->pointer . y30d7) (pointer? . y30d6) (shared-errno . y30d5) (get-c-address . y30d4) (obj->integer . y30d3) (u8-list->c-procedure . y30d2) (%ffi-free-c-callback-trampoline . y30d1) (%ffi-make-c-callback-trampoline . y30d0) (%ffi-free . y30cf) (%ffi-malloc . y30ce) (%ffi-supported? . y30cd) (%ffi-pointer->string . y30cc) (%ffi-call->string-or-zero . y30cb) (%ffi-call->double . y30ca) (%ffi-call->void* . y30c9) (%ffi-call->void . y30c8) (%ffi-call->char . y30c7) (%ffi-call->int . y30c6) (%ffi-lookup . y30c5) (%ffi-open . y30c4) (%fork . y30c3) (%pipe . y30c2) (open-output-string . y30c0) (get-output-string . y30bf) (file-stat-ctime . y30be) (file-stat-atime . y30bd) (file-stat-mtime . y30bc) (file-size-in-bytes . y30bb) (file-writable? . y30ba) (file-executable? . y30b9) (file-readable? . y30b8) (file-regular? . y30b7) (file-symbolic-link? . y30b6) (file-directory? . y30b5) (create-symbolic-link . y30b4) (rename-file . y30b3) (delete-directory . y30b2) (create-directory . y30b1) (create-mosh-cache-dir . y30b0) (get-environment-variables . y30af) (current-exception-handler . y30ae) (get-environment-variable . y30ad) (join-wraps . y30ac) (id->real-label . y30ab) (same-marks? . y30aa) (same-marks*? . y30a9) (instruction? . y308e) (instruction->integer . y308d) (instruction->symbol . y308c) (closure->list . y308b) (disasm . y3081) (make-parameter . y5a6) (socket-port . y3080) (socket-shutdown . y307f) (socket-close . y307e) (socket-send . y307d) (socket-recv! . y307c) (socket-recv . y307b) (make-server-socket . y307a) (make-client-socket . y3079) (socket-accept . y3078) (socket? . y3077) (parameterize . y2e10)) '() values values '#f '#f '#f '#f)))
(begin (set! y2c89@ref (unspecified)) (set! y2c8b@x* (unspecified)) (set! y2c8d@add-library-path! (unspecified)) (set! y2c8f@parse-and-add-library-path (unspecified)) (set! y2c91@rpad (unspecified)) (set! y2c93@condition-printer (unspecified)) (set! y2c95@record->field-alist (unspecified)) (set! y2c97@map-with-index (unspecified)) (set! y2c99@repl (unspecified)) (set! y2c9b@trace-printer (unspecified)) (set! y2c9d@command-line (unspecified)) (set! y2c9f@local-library-path (unspecified)) (set! y2ca1@load/args (unspecified)) (set! y2ca3@load (unspecified)) (set! y2ca5@ironscheme-build (unspecified)) (set! y2ca7@eval-top-level (unspecified)) (set! y2ca9@compile-system-libraries (unspecified)) (set! y2cab@compile (unspecified)) (set! y2cad@compile->closure (unspecified)) (set! y2caf@pre-compile-r6rs-file (unspecified)) (set! y2cb1@load-r6rs-top-level (unspecified)) (set! y2cb3@load-r6rs-top-level-sexp (unspecified)) (set! y2cb5@prefix-inc (unspecified)) (set! y2cb7@prefix-inc! (unspecified)) (set! y2c89@ref (lambda (y2cf2@rtd y2cf3@i y2cf4@x) (let ((y2cf8@val ((record-accessor y2cf2@rtd y2cf3@i) y2cf4@x))) (if (symbol? y2cf8@val) (ungensym y2cf8@val) y2cf8@val)))) (set! y2de0@y2c89@ref y2c89@ref) (set! y2c8b@x* '()) (set! y2de1@y2c8b@x* y2c8b@x*) (set! y2c8d@add-library-path! (lambda (y2cfa@path) (y982@y7be@library-path (append (y982@y7be@library-path) (list y2cfa@path))))) (set! y2de2@y2c8d@add-library-path! y2c8d@add-library-path!) (set! y2c8f@parse-and-add-library-path (lambda (y2cfc@paths y2cfd@message) (let ((y2d01@separator '#f)) (begin (set! y2d01@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((y2d02@t y2cfc@paths)) (if y2d02@t ((lambda (y2d04@paths) (for-each (lambda (y2d06@path) (if (file-exists? y2d06@path) (y2c8d@add-library-path! (expand-path y2d06@path)) (format (current-error-port) y2cfd@message y2d06@path))) (string-split y2d04@paths y2d01@separator))) y2d02@t) (void))))))) (set! y2de3@y2c8f@parse-and-add-library-path y2c8f@parse-and-add-library-path) (set! y2c91@rpad (lambda (y2d08@str y2d09@pad y2d0a@n) (let ((y2d0e@rest (- y2d0a@n (string-length (format '"~a" y2d08@str))))) (let y2d14@loop ((y2d10@rest y2d0e@rest) (y2d11@ret (format '"~a" y2d08@str))) (if (<= y2d10@rest '0) y2d11@ret (y2d14@loop (- y2d10@rest '1) (string-append y2d11@ret y2d09@pad))))))) (set! y2de4@y2c91@rpad y2c91@rpad) (set! y2c93@condition-printer (lambda (y2d16@e y2d17@port) (let ((y2d1b@max-condition-len '#f)) (begin (set! y2d1b@max-condition-len (apply max (map (lambda (y2d2c@c) (string-length (symbol->string (record-type-name (record-rtd y2d2c@c))))) (simple-conditions y2d16@e)))) (begin (display '" Condition components:\n" y2d17@port) (for-each-with-index (lambda (y2d1c@i y2d1d@x) (let ((y2d20@rtd (record-rtd y2d1d@x)) (y2d21@fields-alist (y2c95@record->field-alist y2d1d@x))) (begin (format y2d17@port '" ~d. ~a" (+ y2d1c@i '1) (y2c91@rpad (symbol->string (record-type-name y2d20@rtd)) '" " y2d1b@max-condition-len)) (if (null? y2d21@fields-alist) (newline y2d17@port) (void)) (let y2d28@loop ((y2d24@first '#t) (y2d25@fields-alist y2d21@fields-alist)) (if (null? y2d25@fields-alist) '() (let ((y2d2a@field (car y2d25@fields-alist))) (begin (if (not y2d24@first) (display (y2c91@rpad '"" '" " (+ '4 y2d1b@max-condition-len)) y2d17@port) (void)) (display '"       " y2d17@port) (display (car y2d2a@field) y2d17@port) (display '": " y2d17@port) (write (cdr y2d2a@field) y2d17@port) (newline y2d17@port) (y2d28@loop '#f (cdr y2d25@fields-alist))))))))) (simple-conditions y2d16@e))))))) (set! y2de5@y2c93@condition-printer y2c93@condition-printer) (set! y2c95@record->field-alist (lambda (y2d2e@r) (let ((y2d31@ref '#f)) (begin (set! y2d31@ref (lambda (y2d3c@rtd y2d3d@i y2d3e@x) (let ((y2d42@val ((record-accessor y2d3c@rtd y2d3d@i) y2d3e@x))) (if (symbol? y2d42@val) (ungensym y2d42@val) y2d42@val)))) (let y2d36@loop ((y2d32@ret '()) (y2d33@rtd (record-rtd y2d2e@r))) (if y2d33@rtd (y2d36@loop (append y2d32@ret (y2c97@map-with-index (lambda (y2d38@i y2d39@field) (cons y2d39@field (y2d31@ref y2d33@rtd y2d38@i y2d2e@r))) (vector->list (record-type-field-names y2d33@rtd)))) (record-type-parent y2d33@rtd)) y2d32@ret)))))) (set! y2de6@y2c95@record->field-alist y2c95@record->field-alist) (set! y2c97@map-with-index (lambda (y2d44@proc y2d45@lst) (let y2d4e@loop ((y2d48@i '0) (y2d49@lst y2d45@lst) (y2d4a@ret '())) (if (null? y2d49@lst) (reverse y2d4a@ret) (y2d4e@loop (+ y2d48@i '1) (cdr y2d49@lst) (cons (y2d44@proc y2d48@i (car y2d49@lst)) y2d4a@ret)))))) (set! y2de7@y2c97@map-with-index y2c97@map-with-index) (set! y2c99@repl (lambda y2d50@x (let ((y2d53@rec '#f)) (begin (set! y2d53@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (y2d56@y2d54) (lambda () (with-exception-handler (lambda (y2d58@e) ((call/cc (lambda (y2d5a@y2d55) (y2d56@y2d54 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? y2d58@e) (y2c93@condition-printer y2d58@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" y2d58@e))) (y2d5a@y2d55 (lambda () (raise-continuable y2d58@e)))))))))) (lambda () (let y2d60@loop ((y2d5c@line (get-line (current-input-port))) (y2d5d@accum '"")) (let ((y2d63@parentheses-ok? '#f) (y2d65@eval-string-print '#f)) (begin (set! y2d63@parentheses-ok? (lambda (y2d6a@text) (let y2d72@loop ((y2d6c@chars (string->list y2d6a@text)) (y2d6d@p0 '0) (y2d6e@p1 '0)) (if (null? y2d6c@chars) (= '0 y2d6d@p0 y2d6e@p1) (let ((y2d74@t (car y2d6c@chars))) (if (memv y2d74@t '(#\()) (y2d72@loop (cdr y2d6c@chars) (+ y2d6d@p0 '1) y2d6e@p1) (if (memv y2d74@t '(#\))) (y2d72@loop (cdr y2d6c@chars) (- y2d6d@p0 '1) y2d6e@p1) (if (memv y2d74@t '(#\[)) (y2d72@loop (cdr y2d6c@chars) y2d6d@p0 (+ y2d6e@p1 '1)) (if (memv y2d74@t '(#\])) (y2d72@loop (cdr y2d6c@chars) y2d6d@p0 (- y2d6e@p1 '1)) (y2d72@loop (cdr y2d6c@chars) y2d6d@p0 y2d6e@p1)))))))))) (set! y2d65@eval-string-print (lambda (y2d68@text) (if (not (or (string=? '"\n" y2d68@text) (= '0 (string-length y2d68@text)))) (write (y2ca7@eval-top-level (call-with-port (open-string-input-port y2d68@text) read))) (void)))) (if (eof-object? y2d5c@line) (begin (y2d65@eval-string-print y2d5d@accum) (exit)) (let ((y2d66@current (string-append y2d5d@accum y2d5c@line))) (if (y2d63@parentheses-ok? y2d66@current) (y2d65@eval-string-print y2d66@current) (y2d60@loop (get-line (current-input-port)) y2d66@current))))))))))))) (newline) (y2d53@rec)))) (y2d53@rec))))) (set! y2de8@y2c99@repl y2c99@repl) (set! y2c9b@trace-printer (y6c8@y5a7@make-parameter write)) (set! y2de9@y2c9b@trace-printer y2c9b@trace-printer) (set! y2c9d@command-line (y6c8@y5a7@make-parameter (get-command-line))) (set! y2dea@y2c9d@command-line y2c9d@command-line) (set! y2c9f@local-library-path (lambda (y2d76@filename) (y982@y7be@library-path))) (set! y2deb@y2c9f@local-library-path y2c9f@local-library-path) (set! y2ca1@load/args (lambda (y2d78@filename . y2d7a@args) (begin (apply y2cb1@load-r6rs-top-level y2d78@filename 'load y2d7a@args) (void)))) (set! y2dec@y2ca1@load/args y2ca1@load/args) (set! y2ca3@load (lambda (y2d7c@filename) (begin (apply y2cb1@load-r6rs-top-level y2d7c@filename 'load (y2c9d@command-line)) (void)))) (set! y2ded@y2ca3@load y2ca3@load) (set! y2ca5@ironscheme-build (lambda () (y2ca3@load '"ironscheme-buildscript.ss"))) (set! y2dee@y2ca5@ironscheme-build y2ca5@ironscheme-build) (set! y2ca7@eval-top-level (lambda (y2d7e@x) (y28af@ye45@eval y2d7e@x (y28c6@ye73@interaction-environment)))) (set! y2def@y2ca7@eval-top-level y2ca7@eval-top-level) (set! y2ca9@compile-system-libraries (lambda () (y2ca7@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! y2df0@y2ca9@compile-system-libraries y2ca9@compile-system-libraries) (set! y2cab@compile (lambda (y2d80@filename) (y2cb1@load-r6rs-top-level y2d80@filename 'compile))) (set! y2df1@y2cab@compile y2cab@compile) (set! y2cad@compile->closure (lambda (y2d82@filename) (y2cb1@load-r6rs-top-level y2d82@filename 'closure))) (set! y2df2@y2cad@compile->closure y2cad@compile->closure) (set! y2caf@pre-compile-r6rs-file (lambda (y2d84@filename) (y2cb1@load-r6rs-top-level y2d84@filename 'compile))) (set! y2df3@y2caf@pre-compile-r6rs-file y2caf@pre-compile-r6rs-file) (set! y2cb1@load-r6rs-top-level (lambda (y2d86@filename y2d87@how . y2d8a@args) (begin (y982@y7be@library-path (y2c9f@local-library-path y2d86@filename)) (let ((y2d8c@x* (with-input-from-file y2d86@filename (lambda () (let y2d8e@f () (let ((y2d90@x (y6bb@y58d@read-annotated))) (if (eof-object? y2d90@x) '() (cons y2d90@x (y2d8e@f))))))))) (let ((y2d92@t y2d87@how)) (if (memv y2d92@t '(closure)) (y28c5@ye71@pre-compile-r6rs-top-level y2d8c@x*) (if (memv y2d92@t '(load)) (begin (y2c9d@command-line (cons y2d86@filename (car y2d8a@args))) (y6c9@y5a9@mosh-cache-dir (create-mosh-cache-dir)) (if (y6c9@y5a9@mosh-cache-dir) (gensym-prefix-set! (y2cb7@prefix-inc! (string-append (y6c9@y5a9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (y2d94@file) ((call/cc (lambda (y2d98@y2d96) (lambda () (with-exception-handler (lambda (y2d9a@c) ((call/cc (lambda (y2d9c@y2d97) (y2d98@y2d96 (lambda () (if '#t '#t (y2d9c@y2d97 (lambda () (raise-continuable y2d9a@c)))))))))) (lambda () (delete-file (string-append (y6c9@y5a9@mosh-cache-dir) '"/" y2d94@file))))))))) (directory-list (y6c9@y5a9@mosh-cache-dir))) (void)) (let ((y2d9e@compiled (y28c4@ye6f@compile-r6rs-top-level y2d8c@x*))) (begin (if (and (y6c9@y5a9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (y986@y7c6@serialize-all y6c3@y59d@serialize-library y71f@y6d8@compile-core-expr) (void)) (y2d9e@compiled)))) (if (memv y2d92@t '(compile)) (begin (y28c4@ye6f@compile-r6rs-top-level y2d8c@x*) (y986@y7c6@serialize-all y6c3@y59d@serialize-library y71f@y6d8@compile-core-expr)) (if '#f '#f (void)))))))))) (set! y2df4@y2cb1@load-r6rs-top-level y2cb1@load-r6rs-top-level) (set! y2cb3@load-r6rs-top-level-sexp (lambda (y2da0@import-spec y2da1@thunk) (let ((y2dac@y2da5 y982@y7be@library-path) (y2dad@y2da7 y6c9@y5a9@mosh-cache-dir) (y2dae@y2da9 (y2c9f@local-library-path '"")) (y2daf@y2dab (create-mosh-cache-dir))) (let ((y2db4@swap (lambda () (begin (let ((y2db6@t (y2dac@y2da5))) (begin (y2dac@y2da5 y2dae@y2da9) (set! y2dae@y2da9 y2db6@t))) (let ((y2db8@t (y2dad@y2da7))) (begin (y2dad@y2da7 y2daf@y2dab) (set! y2daf@y2dab y2db8@t))))))) (dynamic-wind y2db4@swap (lambda () (begin (if (y6c9@y5a9@mosh-cache-dir) (gensym-prefix-set! (y2cb7@prefix-inc! (string-append (y6c9@y5a9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((y2dbe@y2dbb y2c9d@command-line) (y2dbf@y2dbd '())) (let ((y2dc2@swap (lambda () (let ((y2dc4@t (y2dbe@y2dbb))) (begin (y2dbe@y2dbb y2dbf@y2dbd) (set! y2dbf@y2dbd y2dc4@t)))))) (dynamic-wind y2dc2@swap (lambda () ((y28c4@ye6f@compile-r6rs-top-level (list (cons 'import y2da0@import-spec) (list y2da1@thunk))))) y2dc2@swap))))) y2db4@swap))))) (set! y2df5@y2cb3@load-r6rs-top-level-sexp y2cb3@load-r6rs-top-level-sexp) (set! y2cb5@prefix-inc (lambda (y2dc6@prefix-string) (let ((y2dc8@prefix (symbol->string y2dc6@prefix-string))) (let ((y2dca@len (string-length y2dc8@prefix))) (let y2dd2@loop ((y2dcc@i (- y2dca@len '1)) (y2dcd@carry? '#t) (y2dce@accum '())) (if (< y2dcc@i '0) (string->symbol (list->string (if y2dcd@carry? (cons '#\a y2dce@accum) y2dce@accum))) (if y2dcd@carry? (let ((y2dd4@next-integer (+ '1 (char->integer (string-ref y2dc8@prefix y2dcc@i))))) (if (= y2dd4@next-integer '123) (y2dd2@loop (- y2dcc@i '1) '#f (cons '#\A y2dce@accum)) (if (= y2dd4@next-integer '91) (y2dd2@loop (- y2dcc@i '1) '#t (cons '#\a y2dce@accum)) (y2dd2@loop (- y2dcc@i '1) '#f (cons (integer->char y2dd4@next-integer) y2dce@accum))))) (y2dd2@loop (- y2dcc@i '1) '#f (cons (string-ref y2dc8@prefix y2dcc@i) y2dce@accum))))))))) (set! y2df6@y2cb5@prefix-inc y2cb5@prefix-inc) (set! y2cb7@prefix-inc! (lambda (y2dd6@file) (begin (if (not (file-exists? y2dd6@file)) (call-with-output-file y2dd6@file (lambda (y2dd8@port) (write 'd y2dd8@port))) (void)) (let ((y2dda@prefix (call-with-input-file y2dd6@file read))) (let ((y2ddc@next-prefix (y2cb5@prefix-inc y2dda@prefix))) (begin (call-with-port (open-file-output-port y2dd6@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (y2dde@port) (write y2ddc@next-prefix y2dde@port))) y2dda@prefix)))))) (set! y2df7@y2cb7@prefix-inc! y2cb7@prefix-inc!) (begin (y987@y7c8@current-precompiled-library-loader y6c4@y59f@load-serialized-library) (set-symbol-value! 'load y2ca3@load) (set-symbol-value! 'pre-compile-r6rs-file y2caf@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs y2ca7@eval-top-level) (set-symbol-value! 'int-env-syms y28a6@ye33@interaction-environment-symbols) (set-symbol-value! 'expanded2core y71e@y6d6@expanded->core) (set-symbol-value! 'trace-printer y2c9b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (y2cb8@c) (condition (y2be6@y29f0@make-non-continuable-violation) (y2bdc@y29d7@make-who-condition 'raise) (y2ba0@y2938@make-message-condition '"returned from non-continuable exception") (y2bd2@y29bc@make-irritants-condition (list y2cb8@c))))) (y2c8f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (y2c8f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (y2c8d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (y2c8d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (y2c8d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((y2cba@prefix (lambda (y2cbc@ext y2cbd@ls) (append (map (lambda (y2cc0@x) (string-append y2cbc@ext y2cc0@x)) y2cbd@ls) y2cbd@ls)))) (y983@y7c0@library-extensions (y2cba@prefix '".mosh" (y983@y7c0@library-extensions)))) (current-exception-handler (lambda (y2cc2@c) (if (condition? y2cc2@c) (y2c93@condition-printer y2cc2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" y2cc2@c)))) (if ((call/cc (lambda (y2cc6@y2cc4) (lambda () (with-exception-handler (lambda (y2cc8@c) ((call/cc (lambda (y2cca@y2cc5) (y2cc6@y2cc4 (lambda () (if '#t '#f (y2cca@y2cc5 (lambda () (raise-continuable y2cc8@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (y2cb3@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (y2c9d@command-line)) (let ((y2cd4@y2ccd y2c9d@command-line) (y2cd5@y2ccf y6c9@y5a9@mosh-cache-dir) (y2cd6@y2cd1 '()) (y2cd7@y2cd3 (create-mosh-cache-dir))) (let ((y2cdc@swap (lambda () (begin (let ((y2cde@t (y2cd4@y2ccd))) (begin (y2cd4@y2ccd y2cd6@y2cd1) (set! y2cd6@y2cd1 y2cde@t))) (let ((y2ce0@t (y2cd5@y2ccf))) (begin (y2cd5@y2ccf y2cd7@y2cd3) (set! y2cd7@y2cd3 y2ce0@t))))))) (dynamic-wind y2cdc@swap (lambda () (begin (if (y6c9@y5a9@mosh-cache-dir) (gensym-prefix-set! (y2cb7@prefix-inc! (string-append (y6c9@y5a9@mosh-cache-dir) '"/prefix.txt"))) (void)) (y2c99@repl))) y2cdc@swap))) (begin (y982@y7be@library-path (y2c9f@local-library-path (car (y2c9d@command-line)))) (set! y2c8b@x* (with-input-from-file (car (y2c9d@command-line)) (lambda () (let y2ce2@f () (let ((y2ce4@x (y6bb@y58d@read-annotated))) (if (eof-object? y2ce4@x) '() (cons y2ce4@x (y2ce2@f)))))))) (y2c9d@command-line (cons (car (y2c9d@command-line)) (cdr (y2c9d@command-line)))) (y6c9@y5a9@mosh-cache-dir (create-mosh-cache-dir)) (if (y6c9@y5a9@mosh-cache-dir) (gensym-prefix-set! (y2cb7@prefix-inc! (string-append (y6c9@y5a9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (y2ce6@file) ((call/cc (lambda (y2cea@y2ce8) (lambda () (with-exception-handler (lambda (y2cec@c) ((call/cc (lambda (y2cee@y2ce9) (y2cea@y2ce8 (lambda () (if '#t '#t (y2cee@y2ce9 (lambda () (raise-continuable y2cec@c)))))))))) (lambda () (delete-file (string-append (y6c9@y5a9@mosh-cache-dir) '"/" y2ce6@file))))))))) (directory-list (y6c9@y5a9@mosh-cache-dir))) (void)) (let ((y2cf0@compiled (y28c4@ye6f@compile-r6rs-top-level y2c8b@x*))) (begin (if (and (y6c9@y5a9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (y986@y7c6@serialize-all y6c3@y59d@serialize-library y71f@y6d8@compile-core-expr) (void)) (y2cf0@compiled))))))))
