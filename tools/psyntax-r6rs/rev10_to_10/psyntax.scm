;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (d28a3@read-annotated d28a5@annotation-stripped d28a7@annotation? d28a9@annotation-source d28ab@annotation-expression d28ad@scm->fasl d28af@fasl-save d28b1@fasl-load d28b3@serialize-library d28b5@load-serialized-library d28b7@make-record-printer d28b9@compile-core d28bb@read-library-source-file d28bd@make-parameter d2953@file-options-spec) (begin (set! d28a3@read-annotated read) (set! d28a5@annotation-stripped (lambda (d2954@x) (d28ab@annotation-expression d2954@x))) (set! d28a7@annotation? (lambda (d2956@x) (source-info d2956@x))) (set! d28a9@annotation-source (lambda (d2958@x) (source-info d2958@x))) (set! d28ab@annotation-expression (lambda (d295a@x) (if (pair? d295a@x) (cons (car d295a@x) (cdr d295a@x)) (display '"line:46\n")))) (set! d28ad@scm->fasl (lambda (d295c@filename) (string-append d295c@filename '".mosh-fasl"))) (set! d28af@fasl-save (lambda (d295e@filename d295f@obj) (call-with-port (open-file-output-port d295e@filename) (lambda (d2962@port) ((symbol-value 'fasl-write!) d295f@obj d2962@port))))) (set! d28b1@fasl-load (lambda (d2964@filename) (call-with-port (open-file-input-port d2964@filename) (symbol-value 'fasl-read!)))) (set! d28b3@serialize-library (lambda (d2966@filename d2967@obj) (begin (format '#t '"serialize-library ~a\n..." d2966@filename) ((lambda (d296a@expanded2core) ((lambda (d296c@compile) ((lambda (d296e@code) ((lambda (d2970@pivot) ((lambda (d2972@visit) ((lambda () (begin (set-car! d2970@pivot d2972@visit) ((lambda (d2974@pivot) ((lambda (d2976@invoke) ((lambda () (set-car! d2974@pivot d2976@invoke)))) (d296c@compile (d296a@expanded2core (car d2974@pivot))))) (cdr d2970@pivot)))))) (d296c@compile (d296a@expanded2core (car d2970@pivot))))) (cddddr (cddddr d296e@code)))) d2967@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (d2978@fasl-file) (begin (if (file-exists? d2978@fasl-file) (delete-file d2978@fasl-file) (void)) ((call/cc (lambda (d297c@d297a) (lambda () (with-exception-handler (lambda (d297e@c) ((call/cc (lambda (d2980@d297b) (d297c@d297a (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " d2966@filename) (if (file-exists? d2978@fasl-file) (delete-file d2978@fasl-file) (void)) '#f) (d2980@d297b (lambda () (raise-continuable d297e@c)))))))))) (lambda () (begin (d28af@fasl-save d2978@fasl-file d2967@obj) (display '"OK\n")))))))))) (d28ad@scm->fasl d2966@filename))))) (set! d28b5@load-serialized-library (lambda (d2982@filename d2983@obj) ((lambda (d2986@fasl-file) (if (and (file-exists? d2986@fasl-file) ((symbol-value 'file-newer?) d2986@fasl-file d2982@filename)) ((lambda (d2988@expanded2core) ((lambda (d298a@eval-compiled-core) ((lambda (d298c@code) ((lambda (d298e@pivot) ((lambda (d2990@visit) ((lambda (d2992@visit-proc) ((lambda () (begin (set-car! d298e@pivot d2992@visit-proc) ((lambda (d2994@pivot) ((lambda (d2996@invoke) ((lambda () (begin (set-car! d2994@pivot (lambda () (d298a@eval-compiled-core d2996@invoke))) (apply d2983@obj d298c@code))))) (car d2994@pivot))) (cdr d298e@pivot)) '#t)))) (lambda () (d298a@eval-compiled-core d2990@visit)))) (car d298e@pivot))) (cddddr (cddddr d298c@code)))) (d28b1@fasl-load d2986@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (d28ad@scm->fasl d2982@filename)))) (set! d28b7@make-record-printer (lambda (d2998@name d2999@printer) (lambda d299c@x (begin (display '"record printer") (for-each display d299c@x))))) (set! d28b9@compile-core (lambda d299e@x (apply error 'comile-core '"not implementated" d299e@x))) (set! d28bb@read-library-source-file (lambda (d29a0@file-name) (with-input-from-file d29a0@file-name d28a3@read-annotated))) (set! d28bd@make-parameter (lambda d29b0 ((lambda (d29b1) (if (= d29b1 '1) (apply (lambda (d29a2@x) (d28bd@make-parameter d29a2@x (lambda (d29a4@x) d29a4@x))) d29b0) (if (= d29b1 '2) (apply (lambda (d29a6@x d29a7@fender) ((lambda (d29aa@x) (lambda d29ae ((lambda (d29af) (if (= d29af '0) (apply (lambda () d29aa@x) d29ae) (if (= d29af '1) (apply (lambda (d29ac@v) (set! d29aa@x (d29a7@fender d29ac@v))) d29ae) (error 'apply '"invalid arg count")))) (length d29ae)))) (d29a7@fender d29a6@x))) d29b0) (error 'apply '"invalid arg count")))) (length d29b0)))) (set! d2953@file-options-spec (lambda (d29b2@x) d29b2@x)) (begin (set! d29c2@d2953@file-options-spec d2953@file-options-spec) (set! d29c1@d28bd@make-parameter d28bd@make-parameter) (set! d29c0@d28bb@read-library-source-file d28bb@read-library-source-file) (set! d29bf@d28b9@compile-core d28b9@compile-core) (set! d29be@d28b7@make-record-printer d28b7@make-record-printer) (set! d29bd@d28b5@load-serialized-library d28b5@load-serialized-library) (set! d29bc@d28b3@serialize-library d28b3@serialize-library) (set! d29bb@d28b1@fasl-load d28b1@fasl-load) (set! d29ba@d28af@fasl-save d28af@fasl-save) (set! d29b9@d28ad@scm->fasl d28ad@scm->fasl) (set! d29b8@d28ab@annotation-expression d28ab@annotation-expression) (set! d29b7@d28a9@annotation-source d28a9@annotation-source) (set! d29b6@d28a7@annotation? d28a7@annotation?) (set! d29b5@d28a5@annotation-stripped d28a5@annotation-stripped) (set! d29b4@d28a3@read-annotated d28a3@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (d29c8@current-primitive-locations d29ca@mutable? d29cc@rewriter d29ce@expanded->core d29d0@compile-core-expr d29d2@pretty-print d29d4@compile-core-expr-to-port) (begin (set! d29c8@current-primitive-locations (d29c1@d28bd@make-parameter (lambda (d29d5@x) '#f) (lambda (d29d7@p) d29d7@p))) (set! d29ca@mutable? (lambda (d29d9@x) (or (pair? d29d9@x) (vector? d29d9@x) (hashtable? d29d9@x)))) (set! d29cc@rewriter (lambda (d29db@quote-hack?) ((lambda (d29de@f) (begin (set! d29de@f (lambda (d29df@x) (if (pair? d29df@x) ((lambda (d29e1@t) (if (memv d29e1@t '(quote)) (if (and d29db@quote-hack? (d29ca@mutable? (cadr d29df@x))) ((lambda (d29e3@g) (begin (set-symbol-value! d29e3@g (cadr d29df@x)) d29e3@g)) (gensym)) d29df@x) (if (memv d29e1@t '(case-lambda)) (cons 'case-lambda (map (lambda (d29e5@x) (cons (car d29e5@x) (map d29de@f (cdr d29e5@x)))) (cdr d29df@x))) (if (memv d29e1@t '(lambda)) (cons* 'lambda (cadr d29df@x) (map d29de@f (cddr d29df@x))) (if (memv d29e1@t '(letrec)) ((lambda (d29e7@bindings d29e8@body*) ((lambda (d29eb@lhs* d29ec@rhs*) (cons* 'letrec (map list d29eb@lhs* (map d29de@f d29ec@rhs*)) (map d29de@f d29e8@body*))) (map car d29e7@bindings) (map cadr d29e7@bindings))) (cadr d29df@x) (cddr d29df@x)) (if (memv d29e1@t '(letrec*)) ((lambda (d29ef@bindings d29f0@body*) ((lambda (d29f3@lhs* d29f4@rhs*) (cons* 'letrec* (map list d29f3@lhs* (map d29de@f d29f4@rhs*)) (map d29de@f d29f0@body*))) (map car d29ef@bindings) (map cadr d29ef@bindings))) (cadr d29df@x) (cddr d29df@x)) (if (memv d29e1@t '(library-letrec*)) ((lambda (d29f7@name d29f8@x) ((lambda (d29fb@bindings d29fc@body*) ((lambda (d29ff@lhs* d2a00@lhs** d2a01@rhs*) (cons* 'library-letrec* d29f7@name (map list d29ff@lhs* d2a00@lhs** (map d29de@f d2a01@rhs*)) (map d29de@f d29fc@body*))) (map car d29fb@bindings) (map cadr d29fb@bindings) (map caddr d29fb@bindings))) (cadr d29f8@x) (cddr d29f8@x))) (cadr d29df@x) (cdr d29df@x)) (if (memv d29e1@t '(begin)) (cons 'begin (map d29de@f (cdr d29df@x))) (if (memv d29e1@t '(set!)) (list 'set! (cadr d29df@x) (d29de@f (caddr d29df@x))) (if (memv d29e1@t '(primitive)) ((lambda (d2a05@op) ((lambda (d2a07@t) (if d2a07@t ((lambda (d2a09@loc) d2a09@loc) d2a07@t) d2a05@op)) ((d29c8@current-primitive-locations) d2a05@op))) (cadr d29df@x)) (if (memv d29e1@t '(define)) d29df@x (if (list? d29df@x) (map d29de@f d29df@x) (error 'rewrite '"invalid form ~s ~s" d29df@x (list? d29df@x)))))))))))))) (car d29df@x)) d29df@x))) d29de@f)) '#f))) (set! d29ce@expanded->core (lambda (d2a0b@x) ((d29cc@rewriter '#f) d2a0b@x))) (set! d29d0@compile-core-expr (lambda (d2a0d@x) ((d29cc@rewriter '#f) d2a0d@x))) (set! d29d2@pretty-print write) (set! d29d4@compile-core-expr-to-port (lambda (d2a0f@x d2a10@p) (d29d2@pretty-print ((d29cc@rewriter '#f) d2a0f@x) d2a10@p))) (begin (set! d2a19@d29d4@compile-core-expr-to-port d29d4@compile-core-expr-to-port) (set! d2a18@d29d2@pretty-print d29d2@pretty-print) (set! d2a17@d29d0@compile-core-expr d29d0@compile-core-expr) (set! d2a16@d29ce@expanded->core d29ce@expanded->core) (set! d2a15@d29cc@rewriter d29cc@rewriter) (set! d2a14@d29ca@mutable? d29ca@mutable?) (set! d2a13@d29c8@current-primitive-locations d29c8@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (d2a68@make-collection d2a6a@current-library-collection d2a6c@rp d2a6e@make-library d2a70@library? d2a72@library-id d2a74@set-library-id! d2a76@library-name d2a78@set-library-name! d2a7a@library-version d2a7c@set-library-version! d2a7e@library-imp* d2a80@set-library-imp*! d2a82@library-vis* d2a84@set-library-vis*! d2a86@library-inv* d2a88@set-library-inv*! d2a8a@library-subst d2a8c@set-library-subst! d2a8e@library-env d2a90@set-library-env! d2a92@library-visit-state d2a94@set-library-visit-state! d2a96@library-invoke-state d2a98@set-library-invoke-state! d2a9a@library-visit-code d2a9c@set-library-visit-code! d2a9e@library-invoke-code d2aa0@set-library-invoke-code! d2aa2@library-visible? d2aa4@set-library-visible?! d2aa6@library-source-file-name d2aa8@set-library-source-file-name! d2aaa@dummy d2aac@find-dependencies d2aae@find-library-by d2ab0@library-path d2ab2@library-extensions d2ab4@library-name->file-name d2ab6@file-locator d2ab8@serialize-all d2aba@current-precompiled-library-loader d2abc@try-load-from-file d2abe@library-loader d2ac0@current-library-expander d2ac2@external-pending-libraries d2ac4@find-external-library d2ac6@find-library-by-name d2ac8@library-exists? d2aca@find-library-by-spec/die d2acc@label->binding-table d2ace@install-library-record d2ad0@install-library d2ad2@imported-label->binding d2ad4@invoke-library d2ad6@visit-library d2ad8@invoke-library-by-spec d2ada@installed-libraries d2adc@library-spec) (begin (set! d2a68@make-collection (lambda () ((lambda (d2add@set) ((lambda (d2ae0@set-cons) (begin (set! d2ae0@set-cons (lambda (d2ae5@x d2ae6@ls) (if (memq d2ae5@x d2ae6@ls) d2ae6@ls (cons d2ae5@x d2ae6@ls)))) (lambda d2ae3 ((lambda (d2ae4) (if (= d2ae4 '0) (apply (lambda () d2add@set) d2ae3) (if (= d2ae4 '1) (apply (lambda (d2ae1@x) (set! d2add@set (d2ae0@set-cons d2ae1@x d2add@set))) d2ae3) (error 'apply '"invalid arg count")))) (length d2ae3))))) '#f)) '()))) (set! d2a6a@current-library-collection (d29c1@d28bd@make-parameter (d2a68@make-collection) (lambda (d2ae9@x) (begin (if (not (procedure? d2ae9@x)) (assertion-violation 'current-library-collection '"not a procedure" d2ae9@x) (void)) d2ae9@x)))) (set! d2a6c@rp (d29be@d28b7@make-record-printer 'library (lambda (d2aeb@x d2aec@p d2aed@wr) (begin (if (not (d2a70@library? d2aeb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (d2a7a@library-version d2aeb@x)) (d2a76@library-name d2aeb@x) (append (d2a76@library-name d2aeb@x) (list (d2a7a@library-version d2aeb@x))))) d2aec@p))))) (set! d2a6e@make-library (lambda d2af1@args ((lambda (d2af3@ret) (begin ((letrec ((d2af5@loop (lambda (d2af7@i d2af8@args) (if (null? d2af8@args) '() (begin (simple-struct-set! d2af3@ret d2af7@i (car d2af8@args)) (d2af5@loop (+ d2af7@i '1) (cdr d2af8@args))))))) d2af5@loop) '0 d2af1@args) d2af3@ret)) (make-simple-struct 'library '15)))) (set! d2a70@library? (lambda (d2afb@x) (and (simple-struct? d2afb@x) (eq? (simple-struct-name d2afb@x) 'library)))) (set! d2a72@library-id (lambda (d2afd@x) (simple-struct-ref d2afd@x '0))) (set! d2a74@set-library-id! (lambda (d2aff@x d2b00@val) (simple-struct-set! d2aff@x '0 d2b00@val))) (set! d2a76@library-name (lambda (d2b03@x) (simple-struct-ref d2b03@x '1))) (set! d2a78@set-library-name! (lambda (d2b05@x d2b06@val) (simple-struct-set! d2b05@x '1 d2b06@val))) (set! d2a7a@library-version (lambda (d2b09@x) (simple-struct-ref d2b09@x '2))) (set! d2a7c@set-library-version! (lambda (d2b0b@x d2b0c@val) (simple-struct-set! d2b0b@x '2 d2b0c@val))) (set! d2a7e@library-imp* (lambda (d2b0f@x) (simple-struct-ref d2b0f@x '3))) (set! d2a80@set-library-imp*! (lambda (d2b11@x d2b12@val) (simple-struct-set! d2b11@x '3 d2b12@val))) (set! d2a82@library-vis* (lambda (d2b15@x) (simple-struct-ref d2b15@x '4))) (set! d2a84@set-library-vis*! (lambda (d2b17@x d2b18@val) (simple-struct-set! d2b17@x '4 d2b18@val))) (set! d2a86@library-inv* (lambda (d2b1b@x) (simple-struct-ref d2b1b@x '5))) (set! d2a88@set-library-inv*! (lambda (d2b1d@x d2b1e@val) (simple-struct-set! d2b1d@x '5 d2b1e@val))) (set! d2a8a@library-subst (lambda (d2b21@x) (simple-struct-ref d2b21@x '6))) (set! d2a8c@set-library-subst! (lambda (d2b23@x d2b24@val) (simple-struct-set! d2b23@x '6 d2b24@val))) (set! d2a8e@library-env (lambda (d2b27@x) (simple-struct-ref d2b27@x '7))) (set! d2a90@set-library-env! (lambda (d2b29@x d2b2a@val) (simple-struct-set! d2b29@x '7 d2b2a@val))) (set! d2a92@library-visit-state (lambda (d2b2d@x) (simple-struct-ref d2b2d@x '8))) (set! d2a94@set-library-visit-state! (lambda (d2b2f@x d2b30@val) (simple-struct-set! d2b2f@x '8 d2b30@val))) (set! d2a96@library-invoke-state (lambda (d2b33@x) (simple-struct-ref d2b33@x '9))) (set! d2a98@set-library-invoke-state! (lambda (d2b35@x d2b36@val) (simple-struct-set! d2b35@x '9 d2b36@val))) (set! d2a9a@library-visit-code (lambda (d2b39@x) (simple-struct-ref d2b39@x '10))) (set! d2a9c@set-library-visit-code! (lambda (d2b3b@x d2b3c@val) (simple-struct-set! d2b3b@x '10 d2b3c@val))) (set! d2a9e@library-invoke-code (lambda (d2b3f@x) (simple-struct-ref d2b3f@x '11))) (set! d2aa0@set-library-invoke-code! (lambda (d2b41@x d2b42@val) (simple-struct-set! d2b41@x '11 d2b42@val))) (set! d2aa2@library-visible? (lambda (d2b45@x) (simple-struct-ref d2b45@x '12))) (set! d2aa4@set-library-visible?! (lambda (d2b47@x d2b48@val) (simple-struct-set! d2b47@x '12 d2b48@val))) (set! d2aa6@library-source-file-name (lambda (d2b4b@x) (simple-struct-ref d2b4b@x '13))) (set! d2aa8@set-library-source-file-name! (lambda (d2b4d@x d2b4e@val) (simple-struct-set! d2b4d@x '13 d2b4e@val))) (set! d2aaa@dummy '3) (set! d2aac@find-dependencies (lambda (d2b51@ls) (if (null? d2b51@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! d2aae@find-library-by (lambda (d2b53@pred) ((letrec ((d2b55@f (lambda (d2b57@ls) (if (null? d2b57@ls) '#f (if (d2b53@pred (car d2b57@ls)) (car d2b57@ls) (d2b55@f (cdr d2b57@ls))))))) d2b55@f) ((d2a6a@current-library-collection))))) (set! d2ab0@library-path (d29c1@d28bd@make-parameter '(".") (lambda (d2b59@x) (if (and (list? d2b59@x) (for-all string? d2b59@x)) (map (lambda (d2b5b@x) d2b5b@x) d2b59@x) (assertion-violation 'library-path '"not a list of strings" d2b59@x))))) (set! d2ab2@library-extensions (d29c1@d28bd@make-parameter '(".sls" ".ss" ".scm") (lambda (d2b5d@x) (if (and (list? d2b5d@x) (for-all string? d2b5d@x)) (map (lambda (d2b5f@x) d2b5f@x) d2b5d@x) (assertion-violation 'library-extensions '"not a list of strings" d2b5d@x))))) (set! d2ab4@library-name->file-name (lambda (d2b61@x) (call-with-values (lambda () (open-string-output-port)) (lambda (d2b67@d2b64 d2b68@d2b66) ((lambda (d2b6b@extract d2b6c@p) ((lambda (d2b70@display-hex) (begin (set! d2b70@display-hex (lambda (d2b79@n) (if (<= '0 d2b79@n '9) (display d2b79@n d2b6c@p) (display (integer->char (+ (char->integer '#\a) (- d2b79@n '10))) d2b6c@p)))) (begin ((letrec ((d2b71@f (lambda (d2b73@ls) (if (not (null? d2b73@ls)) (begin (display '"/" d2b6c@p) (for-each (lambda (d2b75@c) (if (or (char<=? '#\a d2b75@c '#\z) (char<=? '#\A d2b75@c '#\Z) (char<=? '#\0 d2b75@c '#\9) (memv d2b75@c '(#\- #\. #\_ #\~))) (display d2b75@c d2b6c@p) (begin (display '"%" d2b6c@p) ((lambda (d2b77@n) (begin (d2b70@display-hex (quotient d2b77@n '16)) (d2b70@display-hex (remainder d2b77@n '16)))) (char->integer d2b75@c))))) (string->list (symbol->string (car d2b73@ls)))) (d2b71@f (cdr d2b73@ls))) (void))))) d2b71@f) d2b61@x) (d2b6b@extract)))) '#f)) d2b68@d2b66 d2b67@d2b64))))) (set! d2ab6@file-locator (d29c1@d28bd@make-parameter (lambda (d2b7b@x) ((lambda (d2b7d@str) ((letrec ((d2b7f@f (lambda (d2b81@ls d2b82@exts d2b83@failed-list) (if (null? d2b81@ls) ((lambda () ((lambda (d2b8f@d2b8a d2b91@d2b8c d2b93@d2b8b d2b96@d2b89 d2b98@make-library-resolution-condition d2b9a@d2b87 d2b9c@d2b88 d2b9e@library-resolution-condition? d2ba0@condition-library d2ba2@condition-files) (begin (set! d2b8f@d2b8a (make-record-type-descriptor '&library-resolution d4e99@d4be0@&condition-rtd 'd2b8d '#f '#f '#((immutable library) (immutable files)))) (set! d2b91@d2b8c '#f) (set! d2b93@d2b8b (make-record-constructor-descriptor d2b8f@d2b8a d4e9a@d4be2@&condition-rcd d2b91@d2b8c)) (set! d2b96@d2b89 (record-predicate d2b8f@d2b8a)) (set! d2b98@make-library-resolution-condition (record-constructor d2b93@d2b8b)) (set! d2b9a@d2b87 (record-accessor d2b8f@d2b8a '0)) (set! d2b9c@d2b88 (record-accessor d2b8f@d2b8a '1)) (set! d2b9e@library-resolution-condition? (condition-predicate d2b8f@d2b8a)) (set! d2ba0@condition-library (condition-accessor d2b8f@d2b8a d2b9a@d2b87)) (set! d2ba2@condition-files (condition-accessor d2b8f@d2b8a d2b9c@d2b88)) (raise (condition (d4eb9@d4c7a@make-error) (d4edb@d4cd6@make-who-condition 'expander) (d4e9f@d4c37@make-message-condition '"cannot locate library in library-path") (d2b98@make-library-resolution-condition d2b7b@x (reverse d2b83@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? d2b82@exts) (d2b7f@f (cdr d2b81@ls) (d2ab2@library-extensions) d2b83@failed-list) ((lambda (d2ba3@name) (if (file-exists? d2ba3@name) d2ba3@name (d2b7f@f d2b81@ls (cdr d2b82@exts) (cons d2ba3@name d2b83@failed-list)))) (string-append (car d2b81@ls) d2b7d@str (car d2b82@exts)))))))) d2b7f@f) (d2ab0@library-path) (d2ab2@library-extensions) '())) (d2ab4@library-name->file-name d2b7b@x))) (lambda (d2ba5@f) (if (procedure? d2ba5@f) d2ba5@f (assertion-violation 'file-locator '"not a procedure" d2ba5@f))))) (set! d2ab8@serialize-all (lambda (d2ba7@serialize d2ba8@compile) ((lambda (d2bac@library-desc) (begin (set! d2bac@library-desc (lambda (d2baf@x) (list (d2a72@library-id d2baf@x) (d2a76@library-name d2baf@x)))) (for-each (lambda (d2bad@x) (if (d2aa6@library-source-file-name d2bad@x) (d2ba7@serialize (d2aa6@library-source-file-name d2bad@x) (list (d2a72@library-id d2bad@x) (d2a76@library-name d2bad@x) (d2a7a@library-version d2bad@x) (map d2bac@library-desc (d2a7e@library-imp* d2bad@x)) (map d2bac@library-desc (d2a82@library-vis* d2bad@x)) (map d2bac@library-desc (d2a86@library-inv* d2bad@x)) (d2a8a@library-subst d2bad@x) (d2a8e@library-env d2bad@x) (d2ba8@compile (d2a9a@library-visit-code d2bad@x)) (d2ba8@compile (d2a9e@library-invoke-code d2bad@x)) (d2aa2@library-visible? d2bad@x))) (void))) ((d2a6a@current-library-collection))))) '#f))) (set! d2aba@current-precompiled-library-loader (d29c1@d28bd@make-parameter (lambda (d2bb1@filename d2bb2@sk) '#f))) (set! d2abc@try-load-from-file (lambda (d2bb5@filename) ((d2aba@current-precompiled-library-loader) d2bb5@filename (lambda d2bdb ((lambda (d2bdc) (if (= d2bdc '11) (apply (lambda (d2bb7@id d2bb8@name d2bb9@ver d2bba@imp* d2bbb@vis* d2bbc@inv* d2bbd@exp-subst d2bbe@exp-env d2bbf@visit-proc d2bc0@invoke-proc d2bc1@visible?) ((letrec ((d2bcd@f (lambda (d2bcf@deps) (if (null? d2bcf@deps) (begin (d2ad0@install-library d2bb7@id d2bb8@name d2bb9@ver d2bba@imp* d2bbb@vis* d2bbc@inv* d2bbd@exp-subst d2bbe@exp-env d2bbf@visit-proc d2bc0@invoke-proc '#f '#f d2bc1@visible? '#f) '#t) ((lambda (d2bd1@d) ((lambda (d2bd3@label d2bd4@dname) ((lambda (d2bd7@l) (if (and (d2a70@library? d2bd7@l) (eq? d2bd3@label (d2a72@library-id d2bd7@l))) (d2bcd@f (cdr d2bcf@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" d2bb8@name d2bd4@dname d2bb5@filename d2bd7@l d2bd3@label (d2a72@library-id d2bd7@l)) '#f))) (d2ac6@find-library-by-name d2bd4@dname))) (car d2bd1@d) (cadr d2bd1@d))) (car d2bcf@deps)))))) d2bcd@f) (append d2bba@imp* d2bbb@vis* d2bbc@inv*))) d2bdb) (if (>= d2bdc '0) (apply (lambda d2bd9@others '#f) d2bdb) (error 'apply '"invalid arg count")))) (length d2bdb)))))) (set! d2abe@library-loader (d29c1@d28bd@make-parameter (lambda (d2bdd@x) ((lambda (d2bdf@file-name) (if (not d2bdf@file-name) (assertion-violation '#f '"cannot file library" d2bdd@x) (or (d2abc@try-load-from-file d2bdf@file-name) ((d2ac0@current-library-expander) (d29c0@d28bb@read-library-source-file d2bdf@file-name) d2bdf@file-name (lambda (d2be1@name) (if (not (fast-equal? d2be1@name d2bdd@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (d2be7@d2be4 d2be8@d2be6) ((lambda (d2beb@e d2bec@p) (begin (display '"expected to find library " d2bec@p) (write d2bdd@x d2bec@p) (display '" in file " d2bec@p) (display d2bdf@file-name d2bec@p) (display '", found " d2bec@p) (write d2be1@name d2bec@p) (display '" instead" d2bec@p) (d2beb@e))) d2be8@d2be6 d2be7@d2be4)))) (void))))))) ((d2ab6@file-locator) d2bdd@x))) (lambda (d2bef@f) (if (procedure? d2bef@f) d2bef@f (assertion-violation 'library-locator '"not a procedure" d2bef@f))))) (set! d2ac0@current-library-expander (d29c1@d28bd@make-parameter (lambda (d2bf1@x) (assertion-violation 'library-expander '"not initialized")) (lambda (d2bf3@f) (if (procedure? d2bf3@f) d2bf3@f (assertion-violation 'library-expander '"not a procedure" d2bf3@f))))) (set! d2ac2@external-pending-libraries (d29c1@d28bd@make-parameter '())) (set! d2ac4@find-external-library (lambda (d2bf5@name) (begin (if (member d2bf5@name (d2ac2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" d2bf5@name) (void)) ((lambda (d2bfb@d2bf8 d2bfc@d2bfa) ((lambda (d2bff@swap) (dynamic-wind d2bff@swap (lambda () (begin ((d2abe@library-loader) d2bf5@name) (or (d2aae@find-library-by (lambda (d2c01@x) (fast-equal? (d2a76@library-name d2c01@x) d2bf5@name))) (assertion-violation '#f '"handling external library did not yield the correct library" d2bf5@name)))) d2bff@swap)) (lambda () ((lambda (d2c03@t) (begin (d2bfb@d2bf8 d2bfc@d2bfa) (set! d2bfc@d2bfa d2c03@t))) (d2bfb@d2bf8))))) d2ac2@external-pending-libraries (cons d2bf5@name (d2ac2@external-pending-libraries)))))) (set! d2ac6@find-library-by-name (lambda (d2c05@name) (or (d2aae@find-library-by (lambda (d2c07@x) (fast-equal? (d2a76@library-name d2c07@x) d2c05@name))) (d2ac4@find-external-library d2c05@name)))) (set! d2ac8@library-exists? (lambda (d2c09@name) (and (d2aae@find-library-by (lambda (d2c0b@x) (fast-equal? (d2a76@library-name d2c0b@x) d2c09@name))) '#t))) (set! d2aca@find-library-by-spec/die (lambda (d2c0d@spec) ((lambda (d2c0f@id) (or (d2aae@find-library-by (lambda (d2c11@x) (eq? d2c0f@id (d2a72@library-id d2c11@x)))) (assertion-violation '#f '"cannot find library with required spec" d2c0d@spec))) (car d2c0d@spec)))) (set! d2acc@label->binding-table (make-eq-hashtable)) (set! d2ace@install-library-record (lambda (d2c13@lib) (begin ((lambda (d2c15@exp-env) (for-each (lambda (d2c17@x) ((lambda (d2c19@label d2c1a@binding) ((lambda (d2c1d@binding) (begin (if (hashtable-ref d2acc@label->binding-table d2c19@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" d2c19@label (hashtable-ref d2acc@label->binding-table d2c19@label '#f) d2c1d@binding) (exit)) (void)) (hashtable-set! d2acc@label->binding-table d2c19@label d2c1d@binding))) ((lambda (d2c1f@t) (if (memv d2c1f@t '(global)) (cons 'global (cons d2c13@lib (cdr d2c1a@binding))) (if (memv d2c1f@t '(global-macro)) (cons 'global-macro (cons d2c13@lib (cdr d2c1a@binding))) (if (memv d2c1f@t '(global-macro!)) (cons 'global-macro! (cons d2c13@lib (cdr d2c1a@binding))) d2c1a@binding)))) (car d2c1a@binding)))) (car d2c17@x) (cdr d2c17@x))) d2c15@exp-env)) (d2a8e@library-env d2c13@lib)) ((d2a6a@current-library-collection) d2c13@lib)))) (set! d2ad0@install-library (lambda (d2c21@id d2c22@name d2c23@ver d2c24@imp* d2c25@vis* d2c26@inv* d2c27@exp-subst d2c28@exp-env d2c29@visit-proc d2c2a@invoke-proc d2c2b@visit-code d2c2c@invoke-code d2c2d@visible? d2c2e@source-file-name) ((lambda (d2c3d@imp-lib* d2c3e@vis-lib* d2c3f@inv-lib*) (begin (if (not (and (symbol? d2c21@id) (list? d2c22@name) (list? d2c23@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" d2c21@id d2c22@name d2c23@ver) (void)) (if (d2ac8@library-exists? d2c22@name) (assertion-violation 'install-library '"library is already installed" d2c22@name) (void)) ((lambda (d2c43@lib) (d2ace@install-library-record d2c43@lib)) (d2a6e@make-library d2c21@id d2c22@name d2c23@ver d2c3d@imp-lib* d2c3e@vis-lib* d2c3f@inv-lib* d2c27@exp-subst d2c28@exp-env d2c29@visit-proc d2c2a@invoke-proc d2c2b@visit-code d2c2c@invoke-code d2c2d@visible? d2c2e@source-file-name)))) (map d2aca@find-library-by-spec/die d2c24@imp*) (map d2aca@find-library-by-spec/die d2c25@vis*) (map d2aca@find-library-by-spec/die d2c26@inv*)))) (set! d2ad2@imported-label->binding (lambda (d2c45@lab) (hashtable-ref d2acc@label->binding-table d2c45@lab '#f))) (set! d2ad4@invoke-library (lambda (d2c47@lib) ((lambda (d2c49@invoke) (if (procedure? d2c49@invoke) (begin (d2a98@set-library-invoke-state! d2c47@lib (lambda () (assertion-violation 'invoke '"circularity detected" d2c47@lib))) (for-each d2ad4@invoke-library (d2a86@library-inv* d2c47@lib)) (d2a98@set-library-invoke-state! d2c47@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" d2c47@lib))) (d2c49@invoke) (d2a98@set-library-invoke-state! d2c47@lib '#t)) (void))) (d2a96@library-invoke-state d2c47@lib)))) (set! d2ad6@visit-library (lambda (d2c4b@lib) ((lambda (d2c4d@visit) (if (procedure? d2c4d@visit) (begin (d2a94@set-library-visit-state! d2c4b@lib (lambda () (assertion-violation 'visit '"circularity detected" d2c4b@lib))) (for-each d2ad4@invoke-library (d2a82@library-vis* d2c4b@lib)) (d2a94@set-library-visit-state! d2c4b@lib (lambda () (assertion-violation 'invoke '"first visit did not return" d2c4b@lib))) (d2c4d@visit) (d2a94@set-library-visit-state! d2c4b@lib '#t)) (void))) (d2a92@library-visit-state d2c4b@lib)))) (set! d2ad8@invoke-library-by-spec (lambda (d2c4f@spec) (d2ad4@invoke-library (d2aca@find-library-by-spec/die d2c4f@spec)))) (set! d2ada@installed-libraries (lambda d2c57 ((lambda (d2c58) (if (= d2c58 '1) (apply (lambda (d2c51@all?) ((letrec ((d2c53@f (lambda (d2c55@ls) (if (null? d2c55@ls) '() (if (or d2c51@all? (d2aa2@library-visible? (car d2c55@ls))) (cons (car d2c55@ls) (d2c53@f (cdr d2c55@ls))) (d2c53@f (cdr d2c55@ls))))))) d2c53@f) ((d2a6a@current-library-collection)))) d2c57) (if (= d2c58 '0) (apply (lambda () (d2ada@installed-libraries '#f)) d2c57) (error 'apply '"invalid arg count")))) (length d2c57)))) (set! d2adc@library-spec (lambda (d2c59@x) (begin (if (not (d2a70@library? d2c59@x)) (assertion-violation 'library-spec '"not a library" d2c59@x) (void)) (list (d2a72@library-id d2c59@x) (d2a76@library-name d2c59@x) (d2a7a@library-version d2c59@x))))) (begin (set! d2c95@d2adc@library-spec d2adc@library-spec) (set! d2c94@d2ada@installed-libraries d2ada@installed-libraries) (set! d2c93@d2ad8@invoke-library-by-spec d2ad8@invoke-library-by-spec) (set! d2c92@d2ad6@visit-library d2ad6@visit-library) (set! d2c91@d2ad4@invoke-library d2ad4@invoke-library) (set! d2c90@d2ad2@imported-label->binding d2ad2@imported-label->binding) (set! d2c8f@d2ad0@install-library d2ad0@install-library) (set! d2c8e@d2ace@install-library-record d2ace@install-library-record) (set! d2c8d@d2acc@label->binding-table d2acc@label->binding-table) (set! d2c8c@d2aca@find-library-by-spec/die d2aca@find-library-by-spec/die) (set! d2c8b@d2ac8@library-exists? d2ac8@library-exists?) (set! d2c8a@d2ac6@find-library-by-name d2ac6@find-library-by-name) (set! d2c89@d2ac4@find-external-library d2ac4@find-external-library) (set! d2c88@d2ac2@external-pending-libraries d2ac2@external-pending-libraries) (set! d2c87@d2ac0@current-library-expander d2ac0@current-library-expander) (set! d2c86@d2abe@library-loader d2abe@library-loader) (set! d2c85@d2abc@try-load-from-file d2abc@try-load-from-file) (set! d2c84@d2aba@current-precompiled-library-loader d2aba@current-precompiled-library-loader) (set! d2c83@d2ab8@serialize-all d2ab8@serialize-all) (set! d2c82@d2ab6@file-locator d2ab6@file-locator) (set! d2c81@d2ab4@library-name->file-name d2ab4@library-name->file-name) (set! d2c80@d2ab2@library-extensions d2ab2@library-extensions) (set! d2c7f@d2ab0@library-path d2ab0@library-path) (set! d2c7e@d2aae@find-library-by d2aae@find-library-by) (set! d2c7d@d2aac@find-dependencies d2aac@find-dependencies) (set! d2c7c@d2aaa@dummy d2aaa@dummy) (set! d2c7b@d2aa8@set-library-source-file-name! d2aa8@set-library-source-file-name!) (set! d2c7a@d2aa6@library-source-file-name d2aa6@library-source-file-name) (set! d2c79@d2aa4@set-library-visible?! d2aa4@set-library-visible?!) (set! d2c78@d2aa2@library-visible? d2aa2@library-visible?) (set! d2c77@d2aa0@set-library-invoke-code! d2aa0@set-library-invoke-code!) (set! d2c76@d2a9e@library-invoke-code d2a9e@library-invoke-code) (set! d2c75@d2a9c@set-library-visit-code! d2a9c@set-library-visit-code!) (set! d2c74@d2a9a@library-visit-code d2a9a@library-visit-code) (set! d2c73@d2a98@set-library-invoke-state! d2a98@set-library-invoke-state!) (set! d2c72@d2a96@library-invoke-state d2a96@library-invoke-state) (set! d2c71@d2a94@set-library-visit-state! d2a94@set-library-visit-state!) (set! d2c70@d2a92@library-visit-state d2a92@library-visit-state) (set! d2c6f@d2a90@set-library-env! d2a90@set-library-env!) (set! d2c6e@d2a8e@library-env d2a8e@library-env) (set! d2c6d@d2a8c@set-library-subst! d2a8c@set-library-subst!) (set! d2c6c@d2a8a@library-subst d2a8a@library-subst) (set! d2c6b@d2a88@set-library-inv*! d2a88@set-library-inv*!) (set! d2c6a@d2a86@library-inv* d2a86@library-inv*) (set! d2c69@d2a84@set-library-vis*! d2a84@set-library-vis*!) (set! d2c68@d2a82@library-vis* d2a82@library-vis*) (set! d2c67@d2a80@set-library-imp*! d2a80@set-library-imp*!) (set! d2c66@d2a7e@library-imp* d2a7e@library-imp*) (set! d2c65@d2a7c@set-library-version! d2a7c@set-library-version!) (set! d2c64@d2a7a@library-version d2a7a@library-version) (set! d2c63@d2a78@set-library-name! d2a78@set-library-name!) (set! d2c62@d2a76@library-name d2a76@library-name) (set! d2c61@d2a74@set-library-id! d2a74@set-library-id!) (set! d2c60@d2a72@library-id d2a72@library-id) (set! d2c5f@d2a70@library? d2a70@library?) (set! d2c5e@d2a6e@make-library d2a6e@make-library) (set! d2c5d@d2a6c@rp d2a6c@rp) (set! d2c5c@d2a6a@current-library-collection d2a6a@current-library-collection) (set! d2c5b@d2a68@make-collection d2a68@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (d2c98@build-global-define d2d09@build-lambda d2d0b@build-case-lambda d2d0d@build-let d2d3b@build-sequence d2d3d@build-void d2d3f@build-letrec d2d41@build-letrec* d2d43@build-library-letrec* d2d45@build-receive) (begin (set! d2c98@build-global-define (lambda (d2d46@x) (d2d3d@build-void))) (set! d2d09@build-lambda (lambda (d2d48@ae d2d49@vars d2d4a@exp) (list 'lambda d2d49@vars d2d4a@exp))) (set! d2d0b@build-case-lambda (lambda (d2d4e@ae d2d4f@vars* d2d50@exp*) ((lambda (d2d55@build-error d2d57@build-pred d2d59@build-apply d2d5b@expand-case-lambda) (begin (set! d2d55@build-error (lambda (d2d8c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! d2d57@build-pred (lambda (d2d74@ae d2d75@n d2d76@vars) (call-with-values (lambda () ((letrec ((d2d7e@f (lambda (d2d80@vars d2d81@count) (if (pair? d2d80@vars) (d2d7e@f (cdr d2d80@vars) (+ d2d81@count '1)) (if (null? d2d80@vars) (values d2d81@count '=) (values d2d81@count '>=)))))) d2d7e@f) d2d76@vars '0)) (lambda (d2d84@d2d7b d2d85@d2d7d) ((lambda (d2d88@pred d2d89@count) (list (list 'primitive d2d88@pred) d2d75@n (list 'quote d2d89@count))) d2d85@d2d7d d2d84@d2d7b))))) (set! d2d59@build-apply (lambda (d2d6c@ae d2d6d@g d2d6e@vars d2d6f@exp) (list '(primitive apply) (d2d09@build-lambda d2d6c@ae d2d6e@vars d2d6f@exp) d2d6d@g))) (set! d2d5b@expand-case-lambda (lambda (d2d5c@ae d2d5d@vars d2d5e@exp*) ((lambda (d2d62@g d2d63@n) (list 'lambda d2d62@g (d2d0d@build-let d2d5c@ae (list d2d63@n) (list (list '(primitive length) d2d62@g)) ((letrec ((d2d66@f (lambda (d2d68@vars* d2d69@exp*) (if (null? d2d68@vars*) (d2d55@build-error d2d5c@ae) (list 'if (d2d57@build-pred d2d5c@ae d2d63@n (car d2d68@vars*)) (d2d59@build-apply d2d5c@ae d2d62@g (car d2d68@vars*) (car d2d69@exp*)) (d2d66@f (cdr d2d68@vars*) (cdr d2d69@exp*))))))) d2d66@f) d2d4f@vars* d2d5e@exp*)))) (gensym) (gensym)))) (if (= (length d2d50@exp*) '1) (d2d09@build-lambda d2d4e@ae (car d2d4f@vars*) (car d2d50@exp*)) (d2d5b@expand-case-lambda d2d4e@ae d2d4f@vars* d2d50@exp*)))) '#f '#f '#f '#f))) (set! d2d0d@build-let (lambda (d2d8e@ae d2d8f@lhs* d2d90@rhs* d2d91@body) (cons (d2d09@build-lambda d2d8e@ae d2d8f@lhs* d2d91@body) d2d90@rhs*))) (set! d2d3b@build-sequence (lambda (d2d96@ae d2d97@exps) ((letrec ((d2d9a@loop (lambda (d2d9c@exps) (if (null? (cdr d2d9c@exps)) (car d2d9c@exps) (if (equal? (car d2d9c@exps) (d2d3d@build-void)) (d2d9a@loop (cdr d2d9c@exps)) (cons 'begin d2d9c@exps)))))) d2d9a@loop) d2d97@exps))) (set! d2d3d@build-void (lambda () '((primitive void)))) (set! d2d3f@build-letrec (lambda (d2d9e@ae d2d9f@vars d2da0@val-exps d2da1@body-exp) (if (null? d2d9f@vars) d2da1@body-exp (list 'letrec (map list d2d9f@vars d2da0@val-exps) d2da1@body-exp)))) (set! d2d41@build-letrec* (lambda (d2da6@ae d2da7@vars d2da8@val-exps d2da9@body-exp) (if (null? d2da7@vars) d2da9@body-exp (d2d0d@build-let d2da6@ae d2da7@vars (map (lambda (d2dae@x) (list 'quote '#f)) d2da7@vars) (d2d3b@build-sequence d2da6@ae (append (map (lambda (d2db0@lhs d2db1@rhs) (list 'set! d2db0@lhs d2db1@rhs)) d2da7@vars d2da8@val-exps) (list d2da9@body-exp))))))) (set! d2d43@build-library-letrec* (lambda (d2db4@ae d2db5@name d2db6@vars d2db7@locs d2db8@val-exps d2db9@body-exp) (list 'library-letrec* d2db5@name (map list d2db6@vars d2db7@locs d2db8@val-exps) d2db9@body-exp))) (set! d2d45@build-receive (lambda (d2dc0@ae d2dc1@vars d2dc2@producer d2dc3@body*) (begin (display '"************** in ") (cons 'receive (cons d2dc1@vars (cons d2dc2@producer d2dc3@body*)))))) (begin (set! d2dd1@d2d45@build-receive d2d45@build-receive) (set! d2dd0@d2d43@build-library-letrec* d2d43@build-library-letrec*) (set! d2dcf@d2d41@build-letrec* d2d41@build-letrec*) (set! d2dce@d2d3f@build-letrec d2d3f@build-letrec) (set! d2dcd@d2d3d@build-void d2d3d@build-void) (set! d2dcc@d2d3b@build-sequence d2d3b@build-sequence) (set! d2dcb@d2d0d@build-let d2d0d@build-let) (set! d2dca@d2d0b@build-case-lambda d2d0b@build-case-lambda) (set! d2dc9@d2d09@build-lambda d2d09@build-lambda) (set! d2dc8@d2c98@build-global-define d2c98@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (d2de0@file-options-macro d2de2@set-cons d2de4@set-union d2de9@top-mark* d2deb@top-marked? d2ded@gen-lexical d2def@gen-global d2df1@gen-label d2df3@gen-top-level-label d2df5@gen-define-label+loc d2df7@gen-define-label d2df9@make-rib d2dfb@rib? d2dfd@rib-sym* d2dff@set-rib-sym*! d2e01@rib-mark** d2e03@set-rib-mark**! d2e05@rib-label* d2e07@set-rib-label*! d2e09@rib-sealed/freq d2e0b@set-rib-sealed/freq! d2e0d@rib-cache d2e0f@set-rib-cache! d2e11@dummy d2e13@make-empty-rib d2e15@extend-rib! d2e17@extend-rib/nc! d2e19@make-rib-map d2e1b@seal-rib! d2e1d@unseal-rib! d2e1f@make-full-rib d2e21@rp d2e23@make-stx d2e25@stx? d2e27@stx-expr d2e29@set-stx-expr! d2e2b@stx-mark* d2e2d@set-stx-mark*! d2e2f@stx-subst* d2e31@set-stx-subst*! d2e33@stx-ae* d2e35@set-stx-ae*! d2e37@dummy d2e39@datum->stx d2e3b@gen-mark d2e3d@anti-mark d2e3f@anti-mark? d2e41@join-wraps d2e43@mkstx d2e45@add-mark d2e47@add-subst d2e49@syntax-kind? d2e4b@syntax-vector->list d2e4d@syntax-pair? d2e4f@syntax-vector? d2e51@syntax-null? d2e53@syntax-list? d2e55@syntax-car d2e57@syntax-cdr d2e59@syntax->list d2e5b@id? d2e5d@id->sym d2e5f@same-marks? d2e61@bound-id=? d2e63@free-id=? d2e65@valid-bound-ids? d2e67@distinct-bound-ids? d2e69@bound-id-member? d2e6b@self-evaluating? d2e6d@strip-annotations d2e6f@strip d2e71@stx->datum d2e73@same-marks*? d2e75@id->label d2e77@id->real-label d2e79@label->binding d2e7b@make-binding d2e7d@binding-type d2e7f@binding-value d2e81@raise-unbound-error d2e83@syntax-type d2e91@sanitize-binding d2e93@make-variable-transformer d2e95@variable-transformer? d2e97@variable-transformer-procedure d2e99@make-eval-transformer d2fea@parse-define d2fec@parse-define-syntax d2fee@scheme-stx-hashtable d2ff0@scheme-stx d2ff2@lexical-var d2ff4@lexical-mutable? d2ff6@set-lexical-mutable! d2ff8@add-lexical d2ffa@add-lexicals d2ffc@letrec-helper d2ffe@letrec-transformer d3000@letrec*-transformer d3002@fluid-let-syntax-transformer d3004@type-descriptor-transformer d3006@record-type-descriptor-transformer d3008@record-constructor-descriptor-transformer d300a@when-macro d300c@unless-macro d300e@if-transformer d3010@and-transformer d3012@or-transformer d3014@case-macro d3016@quote-transformer d3018@case-lambda-transformer d301a@lambda-transformer d301c@bless d301e@with-syntax-macro d3020@invalid-fmls-error d3022@let-macro d3024@let-values-macro d3026@let*-values-macro d3028@trace-lambda-macro d302a@trace-define-macro d302c@trace-define-syntax-macro d302e@trace-let/rec-syntax d3030@trace-let-syntax-macro d3032@trace-letrec-syntax-macro d3034@guard-macro d3036@define-enumeration-macro d3038@time-macro d303a@delay-macro d303c@assert-macro d303e@endianness-macro d3040@identifier-syntax-macro d3042@do-macro d3044@let*-macro d3046@or-macro d3048@and-macro d304a@cond-macro d304c@do-include d304e@include-macro d3050@include-into-macro d3052@syntax-rules-macro d3054@quasiquote-macro d3056@quasisyntax-macro d3058@define-struct-macro d305a@define-record-type-macro d305c@define-condition-type-macro d305e@incorrect-usage-macro d3060@parameterize-macro d3062@foreign-call-transformer d3064@convert-pattern d3066@syntax-dispatch d3068@ellipsis? d306a@underscore? d306c@verify-literals d306e@syntax-case-transformer d3070@ellipsis-map d3072@syntax-transformer d3074@core-macro-transformer d3076@symbol-macro d3078@macro-transformer d307a@local-macro-transformer d307c@do-macro-call d307e@chi-macro d3080@chi-local-macro d3082@chi-global-macro d3084@chi-expr* d3086@chi-application d3088@chi-expr d308a@chi-set! d308c@verify-formals d308e@chi-lambda-clause d3090@chi-lambda-clause* d3092@chi-defun d3094@chi-rhs d3096@expand-interaction-rhs*/init* d3098@chi-rhs* d309a@find-bound=? d309c@find-dups d309e@chi-internal d30a0@parse-module d30a2@make-module-interface d30a4@module-interface? d30a6@module-interface-first-mark d30a8@set-module-interface-first-mark! d30aa@module-interface-exp-id-vec d30ac@set-module-interface-exp-id-vec! d30ae@module-interface-exp-lab-vec d30b0@set-module-interface-exp-lab-vec! d30b2@dummy d30b4@module-interface-exp-id* d30b6@chi-internal-module d30b8@chi-body* d30ba@expand-transformer d30bc@parse-exports d30be@parse-library-name d30c0@parse-library d30c2@parse-import-spec* d30c4@make-top-rib d30c6@make-collector d30c8@inv-collector d30ca@vis-collector d30cc@imp-collector d30ce@chi-library-internal d30d0@chi-interaction-expr d30d2@library-body-expander d30d4@core-library-expander d30d6@parse-top-level-program d30d8@top-level-expander d30da@rp d30dc@make-env d30de@env? d30e0@env-names d30e2@set-env-names! d30e4@env-labels d30e6@set-env-labels! d30e8@env-itc d30ea@set-env-itc! d30ec@dummy d30ee@rp d30f0@make-interaction-env d30f2@interaction-env? d30f4@interaction-env-rib d30f6@set-interaction-env-rib! d30f8@interaction-env-r d30fa@set-interaction-env-r! d30fc@interaction-env-locs d30fe@set-interaction-env-locs! d3100@dummy d3102@interaction-environment-symbols d3104@environment-bindings d3106@parse-binding d3108@environment? d310a@environment-symbols d310c@environment d310e@null-environment d3110@scheme-report-environment d3112@expand d3114@eval d3116@library-expander d3118@boot-library-expand d311a@rev-map-append d311c@build-exports d311e@make-export-subst d3120@make-export-env/macros d3122@generate-temporaries d3124@free-identifier=? d3126@bound-identifier=? d3128@make-source-condition d312a@extract-position-condition d312c@expression-position d312e@assertion-error d3130@syntax-error d3132@syntax-violation* d3134@syntax-violation d3136@identifier? d3138@datum->syntax d313a@syntax->datum d313c@compile-r6rs-top-level d313e@pre-compile-r6rs-top-level d3140@interaction-environment d3142@top-level-context) (begin (set! d2de0@file-options-macro (lambda (d3143@x) ((lambda (d3146@valid-option?) (begin (set! d3146@valid-option? (lambda (d314f@x) (and (d2e5b@id? d314f@x) (memq (d2e5d@id->sym d314f@x) '(no-fail no-create no-truncate))))) ((lambda (d3147@t) ((lambda (d3149@ls/false) (if (and d3149@ls/false (apply (lambda (d314b@opt*) (for-all d3146@valid-option? d314b@opt*)) d3149@ls/false)) (apply (lambda (d314d@opt*) (d301c@bless (list 'make-file-options (list 'quote d314d@opt*)))) d3149@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3147@t))) (d3066@syntax-dispatch d3147@t '(_ . each-any)))) d3143@x))) '#f))) (set! d2de2@set-cons (lambda (d3151@x d3152@ls) (if (memq d3151@x d3152@ls) d3152@ls (cons d3151@x d3152@ls)))) (set! d2de4@set-union (lambda (d3155@ls1 d3156@ls2) (if (null? d3155@ls1) d3156@ls2 (if (memq (car d3155@ls1) d3156@ls2) (d2de4@set-union (cdr d3155@ls1) d3156@ls2) (cons (car d3155@ls1) (d2de4@set-union (cdr d3155@ls1) d3156@ls2)))))) (set! d2de9@top-mark* '(top)) (set! d2deb@top-marked? (lambda (d3159@m*) (memq 'top d3159@m*))) (set! d2ded@gen-lexical (lambda (d315b@sym) (if (symbol? d315b@sym) (gensym d315b@sym) (if (d2e25@stx? d315b@sym) (d2ded@gen-lexical (d2e5d@id->sym d315b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" d315b@sym))))) (set! d2def@gen-global (lambda (d315d@x) (d2ded@gen-lexical d315d@x))) (set! d2df1@gen-label (lambda (d315f@_) (gensym))) (set! d2df3@gen-top-level-label (lambda (d3161@id d3162@rib) ((lambda (d3166@find) (begin (set! d3166@find (lambda (d3171@sym d3172@mark* d3173@sym* d3174@mark** d3175@label*) (and (pair? d3173@sym*) (if (and (eq? d3171@sym (car d3173@sym*)) (d2e5f@same-marks? d3172@mark* (car d3174@mark**))) (car d3175@label*) (d3166@find d3171@sym d3172@mark* (cdr d3173@sym*) (cdr d3174@mark**) (cdr d3175@label*)))))) ((lambda (d3167@sym d3168@mark*) ((lambda (d316b@sym*) ((lambda (d316d@t) (if d316d@t ((lambda (d316f@label) (if (d2c90@d2ad2@imported-label->binding d316f@label) (gensym) d316f@label)) d316d@t) (gensym))) (and (memq d3167@sym (d2dfd@rib-sym* d3162@rib)) (d3166@find d3167@sym d3168@mark* d316b@sym* (d2e01@rib-mark** d3162@rib) (d2e05@rib-label* d3162@rib))))) (d2dfd@rib-sym* d3162@rib))) (d2e5d@id->sym d3161@id) (d2e2b@stx-mark* d3161@id)))) '#f))) (set! d2df5@gen-define-label+loc (lambda (d317b@id d317c@rib) ((lambda (d317f@t) (if d317f@t ((lambda (d3181@env) ((lambda (d3183@label d3184@locs) (values d3183@label ((lambda (d3187@t) (if d3187@t (cdr d3187@t) ((lambda (d3189@loc) (begin (d30fe@set-interaction-env-locs! d3181@env (cons (cons d3183@label d3189@loc) d3184@locs)) d3189@loc)) (d2ded@gen-lexical d317b@id)))) (assq d3183@label d3184@locs)))) (d2df3@gen-top-level-label d317b@id d317c@rib) (d30fc@interaction-env-locs d3181@env))) d317f@t) (values (gensym) (d2ded@gen-lexical d317b@id)))) (d3142@top-level-context)))) (set! d2df7@gen-define-label (lambda (d318b@id d318c@rib) (if (d3142@top-level-context) (d2df3@gen-top-level-label d318b@id d318c@rib) (gensym)))) (set! d2df9@make-rib (lambda d318f@args ((lambda (d3191@ret) (begin ((letrec ((d3193@loop (lambda (d3195@i d3196@args) (if (null? d3196@args) '() (begin (simple-struct-set! d3191@ret d3195@i (car d3196@args)) (d3193@loop (+ d3195@i '1) (cdr d3196@args))))))) d3193@loop) '0 d318f@args) d3191@ret)) (make-simple-struct 'rib '6)))) (set! d2dfb@rib? (lambda (d3199@x) (and (simple-struct? d3199@x) (eq? (simple-struct-name d3199@x) 'rib)))) (set! d2dfd@rib-sym* (lambda (d319b@x) (simple-struct-ref d319b@x '0))) (set! d2dff@set-rib-sym*! (lambda (d319d@x d319e@val) (simple-struct-set! d319d@x '0 d319e@val))) (set! d2e01@rib-mark** (lambda (d31a1@x) (simple-struct-ref d31a1@x '1))) (set! d2e03@set-rib-mark**! (lambda (d31a3@x d31a4@val) (simple-struct-set! d31a3@x '1 d31a4@val))) (set! d2e05@rib-label* (lambda (d31a7@x) (simple-struct-ref d31a7@x '2))) (set! d2e07@set-rib-label*! (lambda (d31a9@x d31aa@val) (simple-struct-set! d31a9@x '2 d31aa@val))) (set! d2e09@rib-sealed/freq (lambda (d31ad@x) (simple-struct-ref d31ad@x '3))) (set! d2e0b@set-rib-sealed/freq! (lambda (d31af@x d31b0@val) (simple-struct-set! d31af@x '3 d31b0@val))) (set! d2e0d@rib-cache (lambda (d31b3@x) (simple-struct-ref d31b3@x '4))) (set! d2e0f@set-rib-cache! (lambda (d31b5@x d31b6@val) (simple-struct-set! d31b5@x '4 d31b6@val))) (set! d2e11@dummy '3) (set! d2e13@make-empty-rib (lambda () (d2df9@make-rib '() '() '() '#f '#f))) (set! d2e15@extend-rib! (lambda (d31b9@rib d31ba@id d31bb@label) ((lambda (d31c0@find) (begin (set! d31c0@find (lambda (d31cd@sym d31ce@mark* d31cf@sym* d31d0@mark** d31d1@label*) (and (pair? d31cf@sym*) (if (and (eq? d31cd@sym (car d31cf@sym*)) (d2e5f@same-marks? d31ce@mark* (car d31d0@mark**))) d31d1@label* (d31c0@find d31cd@sym d31ce@mark* (cdr d31cf@sym*) (cdr d31d0@mark**) (cdr d31d1@label*)))))) (begin (if (d2e09@rib-sealed/freq d31b9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" d31b9@rib) (void)) ((lambda (d31c1@sym d31c2@mark*) ((lambda (d31c5@sym*) ((lambda (d31c7@t) (if d31c7@t ((lambda (d31c9@p) (if (not (eq? d31bb@label (car d31c9@p))) (if (d3142@top-level-context) (set-car! d31c9@p d31bb@label) (d3134@syntax-violation '#f '"multiple definitions of identifier" d31ba@id)) (void))) d31c7@t) (begin (if (d2e0d@rib-cache d31b9@rib) (hashtable-update! (d2e0d@rib-cache d31b9@rib) d31c1@sym (lambda (d31cb@e) (cons (cons d31c2@mark* d31bb@label) d31cb@e)) '()) (void)) (d2dff@set-rib-sym*! d31b9@rib (cons d31c1@sym d31c5@sym*)) (d2e03@set-rib-mark**! d31b9@rib (cons d31c2@mark* (d2e01@rib-mark** d31b9@rib))) (d2e07@set-rib-label*! d31b9@rib (cons d31bb@label (d2e05@rib-label* d31b9@rib)))))) (and (memq d31c1@sym (d2dfd@rib-sym* d31b9@rib)) (d31c0@find d31c1@sym d31c2@mark* d31c5@sym* (d2e01@rib-mark** d31b9@rib) (d2e05@rib-label* d31b9@rib))))) (d2dfd@rib-sym* d31b9@rib))) (d2e5d@id->sym d31ba@id) (d2e2b@stx-mark* d31ba@id))))) '#f))) (set! d2e17@extend-rib/nc! (lambda (d31d7@rib d31d8@id d31d9@label) ((lambda (d31dd@sym d31de@mark*) ((lambda (d31e1@sym*) (begin (if (d2e0d@rib-cache d31d7@rib) (hashtable-update! (d2e0d@rib-cache d31d7@rib) d31dd@sym (lambda (d31e3@e) (cons (cons d31de@mark* d31d9@label) d31e3@e)) '()) (void)) (d2dff@set-rib-sym*! d31d7@rib (cons d31dd@sym d31e1@sym*)) (d2e03@set-rib-mark**! d31d7@rib (cons d31de@mark* (d2e01@rib-mark** d31d7@rib))) (d2e07@set-rib-label*! d31d7@rib (cons d31d9@label (d2e05@rib-label* d31d7@rib))))) (d2dfd@rib-sym* d31d7@rib))) (d2e5d@id->sym d31d8@id) (d2e2b@stx-mark* d31d8@id)))) (set! d2e19@make-rib-map (lambda (d31e5@sym*) ((lambda (d31e7@ht) ((letrec ((d31e9@f (lambda (d31eb@i d31ec@sym*) (if (null? d31ec@sym*) d31e7@ht (begin (hashtable-update! d31e7@ht (car d31ec@sym*) (lambda (d31ef@x) (cons d31eb@i d31ef@x)) '()) (d31e9@f (+ d31eb@i '1) (cdr d31ec@sym*))))))) d31e9@f) '0 d31e5@sym*)) (make-eq-hashtable)))) (set! d2e1b@seal-rib! (lambda (d31f1@rib) ((lambda (d31f3@sym*) (if (not (null? d31f3@sym*)) (begin (d2dff@set-rib-sym*! d31f1@rib (list->vector d31f3@sym*)) (d2e03@set-rib-mark**! d31f1@rib (list->vector (d2e01@rib-mark** d31f1@rib))) (d2e07@set-rib-label*! d31f1@rib (list->vector (d2e05@rib-label* d31f1@rib))) (d2e0b@set-rib-sealed/freq! d31f1@rib (d2e19@make-rib-map d31f3@sym*))) (void))) (d2dfd@rib-sym* d31f1@rib)))) (set! d2e1d@unseal-rib! (lambda (d31f5@rib) (if (d2e09@rib-sealed/freq d31f5@rib) (begin (d2e0b@set-rib-sealed/freq! d31f5@rib '#f) (d2dff@set-rib-sym*! d31f5@rib (vector->list (d2dfd@rib-sym* d31f5@rib))) (d2e03@set-rib-mark**! d31f5@rib (vector->list (d2e01@rib-mark** d31f5@rib))) (d2e07@set-rib-label*! d31f5@rib (vector->list (d2e05@rib-label* d31f5@rib)))) (void)))) (set! d2e1f@make-full-rib (lambda (d31f7@id* d31f8@label*) ((lambda (d31fb@r) (begin (d2e1b@seal-rib! d31fb@r) d31fb@r)) (d2df9@make-rib (map d2e5d@id->sym d31f7@id*) (map d2e2b@stx-mark* d31f7@id*) d31f8@label* '#f '#f)))) (set! d2e21@rp (d29be@d28b7@make-record-printer 'stx (lambda (d31fd@x d31fe@p d31ff@wr) (begin (display '"#<syntax " d31fe@p) (write (d2e71@stx->datum d31fd@x) d31fe@p) ((lambda (d3203@expr) (if (d29b6@d28a7@annotation? d3203@expr) ((lambda (d3205@src) (if (pair? d3205@src) (begin (display '" [" d31fe@p) (display (cdr d3205@src) d31fe@p) (display '" of " d31fe@p) (display (car d3205@src) d31fe@p) (display '"]" d31fe@p)) (void))) (d29b7@d28a9@annotation-source d3203@expr)) (void))) (d2e27@stx-expr d31fd@x)) (display '">" d31fe@p))))) (set! d2e23@make-stx (lambda d3207@args ((lambda (d3209@ret) (begin ((letrec ((d320b@loop (lambda (d320d@i d320e@args) (if (null? d320e@args) '() (begin (simple-struct-set! d3209@ret d320d@i (car d320e@args)) (d320b@loop (+ d320d@i '1) (cdr d320e@args))))))) d320b@loop) '0 d3207@args) d3209@ret)) (make-simple-struct 'stx '5)))) (set! d2e25@stx? (lambda (d3211@x) (and (simple-struct? d3211@x) (eq? (simple-struct-name d3211@x) 'stx)))) (set! d2e27@stx-expr (lambda (d3213@x) (simple-struct-ref d3213@x '0))) (set! d2e29@set-stx-expr! (lambda (d3215@x d3216@val) (simple-struct-set! d3215@x '0 d3216@val))) (set! d2e2b@stx-mark* (lambda (d3219@x) (simple-struct-ref d3219@x '1))) (set! d2e2d@set-stx-mark*! (lambda (d321b@x d321c@val) (simple-struct-set! d321b@x '1 d321c@val))) (set! d2e2f@stx-subst* (lambda (d321f@x) (simple-struct-ref d321f@x '2))) (set! d2e31@set-stx-subst*! (lambda (d3221@x d3222@val) (simple-struct-set! d3221@x '2 d3222@val))) (set! d2e33@stx-ae* (lambda (d3225@x) (simple-struct-ref d3225@x '3))) (set! d2e35@set-stx-ae*! (lambda (d3227@x d3228@val) (simple-struct-set! d3227@x '3 d3228@val))) (set! d2e37@dummy '3) (set! d2e39@datum->stx (lambda (d322b@id d322c@datum) (d2e23@make-stx d322c@datum (d2e2b@stx-mark* d322b@id) (d2e2f@stx-subst* d322b@id) (d2e33@stx-ae* d322b@id)))) (set! d2e3b@gen-mark (lambda () (string '#\m))) (set! d2e3d@anti-mark '#f) (set! d2e3f@anti-mark? not) (set! d2e41@join-wraps (lambda (d322f@m1* d3230@s1* d3231@ae1* d3232@e) ((lambda (d3238@cancel) (begin (set! d3238@cancel (lambda (d323f@ls1 d3240@ls2) ((letrec ((d3243@f (lambda (d3245@x d3246@ls1) (if (null? d3246@ls1) (cdr d3240@ls2) (cons d3245@x (d3243@f (car d3246@ls1) (cdr d3246@ls1))))))) d3243@f) (car d323f@ls1) (cdr d323f@ls1)))) ((lambda (d3239@m2* d323a@s2* d323b@ae2*) (if (and (not (null? d322f@m1*)) (not (null? d3239@m2*)) (d2e3f@anti-mark? (car d3239@m2*))) (values (d3238@cancel d322f@m1* d3239@m2*) (d3238@cancel d3230@s1* d323a@s2*) (d3238@cancel d3231@ae1* d323b@ae2*)) (values (append d322f@m1* d3239@m2*) (append d3230@s1* d323a@s2*) (append d3231@ae1* d323b@ae2*)))) (d2e2b@stx-mark* d3232@e) (d2e2f@stx-subst* d3232@e) (d2e33@stx-ae* d3232@e)))) '#f))) (set! d2e43@mkstx (lambda (d3249@e d324a@m* d324b@s* d324c@ae*) (if (and (d2e25@stx? d3249@e) (not (d2deb@top-marked? d324a@m*))) (call-with-values (lambda () (d2e41@join-wraps d324a@m* d324b@s* d324c@ae* d3249@e)) (lambda (d3257@d3252 d3258@d3254 d3259@d3256) ((lambda (d325d@ae* d325e@s* d325f@m*) (d2e23@make-stx (d2e27@stx-expr d3249@e) d325f@m* d325e@s* d325d@ae*)) d3259@d3256 d3258@d3254 d3257@d3252))) (d2e23@make-stx d3249@e d324a@m* d324b@s* d324c@ae*)))) (set! d2e45@add-mark (lambda (d3263@m d3264@e d3265@ae) (d2e43@mkstx d3264@e (list d3263@m) '(shift) (list d3265@ae)))) (set! d2e47@add-subst (lambda (d3269@subst d326a@e) (d2e43@mkstx d326a@e '() (list d3269@subst) '()))) (set! d2e49@syntax-kind? (lambda (d326d@x d326e@p?) (if (d2e25@stx? d326d@x) (d2e49@syntax-kind? (d2e27@stx-expr d326d@x) d326e@p?) (if (d29b6@d28a7@annotation? d326d@x) (d2e49@syntax-kind? (d29b8@d28ab@annotation-expression d326d@x) d326e@p?) (d326e@p? d326d@x))))) (set! d2e4b@syntax-vector->list (lambda (d3271@x) (if (d2e25@stx? d3271@x) ((lambda (d3273@ls d3274@m* d3275@s* d3276@ae*) (map (lambda (d327b@x) (d2e43@mkstx d327b@x d3274@m* d3275@s* d3276@ae*)) d3273@ls)) (d2e4b@syntax-vector->list (d2e27@stx-expr d3271@x)) (d2e2b@stx-mark* d3271@x) (d2e2f@stx-subst* d3271@x) (d2e33@stx-ae* d3271@x)) (if (d29b6@d28a7@annotation? d3271@x) (d2e4b@syntax-vector->list (d29b8@d28ab@annotation-expression d3271@x)) (if (vector? d3271@x) (vector->list d3271@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" d3271@x)))))) (set! d2e4d@syntax-pair? (lambda (d327d@x) (d2e49@syntax-kind? d327d@x pair?))) (set! d2e4f@syntax-vector? (lambda (d327f@x) (d2e49@syntax-kind? d327f@x vector?))) (set! d2e51@syntax-null? (lambda (d3281@x) (d2e49@syntax-kind? d3281@x null?))) (set! d2e53@syntax-list? (lambda (d3283@x) (or (d2e51@syntax-null? d3283@x) (and (d2e4d@syntax-pair? d3283@x) (d2e53@syntax-list? (d2e57@syntax-cdr d3283@x)))))) (set! d2e55@syntax-car (lambda (d3285@x) (if (d2e25@stx? d3285@x) (d2e43@mkstx (d2e55@syntax-car (d2e27@stx-expr d3285@x)) (d2e2b@stx-mark* d3285@x) (d2e2f@stx-subst* d3285@x) (d2e33@stx-ae* d3285@x)) (if (d29b6@d28a7@annotation? d3285@x) (d2e55@syntax-car (d29b8@d28ab@annotation-expression d3285@x)) (if (pair? d3285@x) (car d3285@x) (assertion-violation 'syntax-car '"BUG: not a pair" d3285@x)))))) (set! d2e57@syntax-cdr (lambda (d3287@x) (if (d2e25@stx? d3287@x) (d2e43@mkstx (d2e57@syntax-cdr (d2e27@stx-expr d3287@x)) (d2e2b@stx-mark* d3287@x) (d2e2f@stx-subst* d3287@x) (d2e33@stx-ae* d3287@x)) (if (d29b6@d28a7@annotation? d3287@x) (d2e57@syntax-cdr (d29b8@d28ab@annotation-expression d3287@x)) (if (pair? d3287@x) (cdr d3287@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" d3287@x)))))) (set! d2e59@syntax->list (lambda (d3289@x) (if (d2e4d@syntax-pair? d3289@x) (cons (d2e55@syntax-car d3289@x) (d2e59@syntax->list (d2e57@syntax-cdr d3289@x))) (if (d2e51@syntax-null? d3289@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" d3289@x))))) (set! d2e5b@id? (lambda (d328b@x) (and (d2e25@stx? d328b@x) (symbol? (d2e27@stx-expr d328b@x))))) (set! d2e5d@id->sym (lambda (d328d@x) (d2e27@stx-expr d328d@x))) (set! d2e5f@same-marks? (lambda (d328f@x d3290@y) (or (and (null? d328f@x) (null? d3290@y)) (and (pair? d328f@x) (pair? d3290@y) (eq? (car d328f@x) (car d3290@y)) (d2e5f@same-marks? (cdr d328f@x) (cdr d3290@y)))))) (set! d2e61@bound-id=? (lambda (d3293@x d3294@y) (and (eq? (d2e5d@id->sym d3293@x) (d2e5d@id->sym d3294@y)) (d2e5f@same-marks? (d2e2b@stx-mark* d3293@x) (d2e2b@stx-mark* d3294@y))))) (set! d2e63@free-id=? (lambda (d3297@i d3298@j) ((lambda (d329b@t0 d329c@t1) (if (or d329b@t0 d329c@t1) (eq? d329b@t0 d329c@t1) (eq? (d2e5d@id->sym d3297@i) (d2e5d@id->sym d3298@j)))) (d2e77@id->real-label d3297@i) (d2e77@id->real-label d3298@j)))) (set! d2e65@valid-bound-ids? (lambda (d329f@id*) (and (for-all d2e5b@id? d329f@id*) (d2e67@distinct-bound-ids? d329f@id*)))) (set! d2e67@distinct-bound-ids? (lambda (d32a1@id*) (or (null? d32a1@id*) (and (not (d2e69@bound-id-member? (car d32a1@id*) (cdr d32a1@id*))) (d2e67@distinct-bound-ids? (cdr d32a1@id*)))))) (set! d2e69@bound-id-member? (lambda (d32a3@id d32a4@id*) (and (pair? d32a4@id*) (or (d2e61@bound-id=? d32a3@id (car d32a4@id*)) (d2e69@bound-id-member? d32a3@id (cdr d32a4@id*)))))) (set! d2e6b@self-evaluating? (lambda (d32a7@x) (or (number? d32a7@x) (string? d32a7@x) (char? d32a7@x) (boolean? d32a7@x) (regexp? d32a7@x) (bytevector? d32a7@x)))) (set! d2e6d@strip-annotations (lambda (d32a9@x) (if (pair? d32a9@x) (cons (d2e6d@strip-annotations (car d32a9@x)) (d2e6d@strip-annotations (cdr d32a9@x))) (if (vector? d32a9@x) (vector-map d2e6d@strip-annotations d32a9@x) (if (d29b6@d28a7@annotation? d32a9@x) (d29b5@d28a5@annotation-stripped d32a9@x) d32a9@x))))) (set! d2e6f@strip (lambda (d32ab@x d32ac@m*) (if (d2deb@top-marked? d32ac@m*) (if (or (d29b6@d28a7@annotation? d32ab@x) (and (pair? d32ab@x) (d29b6@d28a7@annotation? (car d32ab@x))) (and (vector? d32ab@x) (> (vector-length d32ab@x) '0) (d29b6@d28a7@annotation? (vector-ref d32ab@x '0)))) (d2e6d@strip-annotations d32ab@x) d32ab@x) ((letrec ((d32af@f (lambda (d32b1@x) (if (d2e25@stx? d32b1@x) (d2e6f@strip (d2e27@stx-expr d32b1@x) (d2e2b@stx-mark* d32b1@x)) (if (d29b6@d28a7@annotation? d32b1@x) (d29b5@d28a5@annotation-stripped d32b1@x) (if (pair? d32b1@x) ((lambda (d32b3@a d32b4@d) (if (and (eq? d32b3@a (car d32b1@x)) (eq? d32b4@d (cdr d32b1@x))) d32b1@x (cons d32b3@a d32b4@d))) (d32af@f (car d32b1@x)) (d32af@f (cdr d32b1@x))) (if (vector? d32b1@x) ((lambda (d32b7@old) ((lambda (d32b9@new) (if (for-all eq? d32b7@old d32b9@new) d32b1@x (list->vector d32b9@new))) (map d32af@f d32b7@old))) (vector->list d32b1@x)) d32b1@x))))))) d32af@f) d32ab@x)))) (set! d2e71@stx->datum (lambda (d32bb@x) (d2e6f@strip d32bb@x '()))) (set! d2e73@same-marks*? (lambda (d32bd@mark* d32be@mark** d32bf@si) (if (null? d32bf@si) '#f (if (d2e5f@same-marks? d32bd@mark* (vector-ref d32be@mark** (car d32bf@si))) (car d32bf@si) (d2e73@same-marks*? d32bd@mark* d32be@mark** (cdr d32bf@si)))))) (set! d2e75@id->label (lambda (d32c3@id) (or (d2e77@id->real-label d32c3@id) ((lambda (d32c5@t) (if d32c5@t ((lambda (d32c7@env) ((lambda (d32c9@rib) (call-with-values (lambda () (d2df5@gen-define-label+loc d32c3@id d32c9@rib)) (lambda (d32cf@d32cc d32d0@d32ce) ((lambda (d32d3@loc_ d32d4@lab) (begin (d2e15@extend-rib! d32c9@rib d32c3@id d32d4@lab) d32d4@lab)) d32d0@d32ce d32cf@d32cc)))) (d30f4@interaction-env-rib d32c7@env))) d32c5@t) '#f)) (d3142@top-level-context))))) (set! d2e77@id->real-label (lambda (d32d7@id) ((lambda (d32d9@sym) ((letrec ((d32db@search (lambda (d32dd@subst* d32de@mark*) (if (null? d32dd@subst*) '#f (if (eq? (car d32dd@subst*) 'shift) (d32db@search (cdr d32dd@subst*) (cdr d32de@mark*)) ((lambda (d32e1@rib) ((lambda (d32e3@t) (if d32e3@t ((lambda (d32e5@ht) ((lambda (d32e7@si) ((lambda (d32e9@i) (if d32e9@i (vector-ref (d2e05@rib-label* d32e1@rib) d32e9@i) (d32db@search (cdr d32dd@subst*) d32de@mark*))) (and d32e7@si (d2e73@same-marks*? d32de@mark* (d2e01@rib-mark** d32e1@rib) (reverse d32e7@si))))) (hashtable-ref d32e5@ht d32d9@sym '#f))) d32e3@t) ((letrec ((d32eb@f (lambda (d32ed@sym* d32ee@mark** d32ef@label*) (if (null? d32ed@sym*) (d32db@search (cdr d32dd@subst*) d32de@mark*) (if (and (eq? (car d32ed@sym*) d32d9@sym) (d2e5f@same-marks? (car d32ee@mark**) d32de@mark*)) (car d32ef@label*) (d32eb@f (cdr d32ed@sym*) (cdr d32ee@mark**) (cdr d32ef@label*))))))) d32eb@f) (d2dfd@rib-sym* d32e1@rib) (d2e01@rib-mark** d32e1@rib) (d2e05@rib-label* d32e1@rib)))) (d2e09@rib-sealed/freq d32e1@rib))) (car d32dd@subst*))))))) d32db@search) (d2e2f@stx-subst* d32d7@id) (d2e2b@stx-mark* d32d7@id))) (d2e5d@id->sym d32d7@id)))) (set! d2e79@label->binding (lambda (d32f3@x d32f4@r) ((lambda (d32f7@t) (if d32f7@t ((lambda (d32f9@b) (if (and (pair? d32f9@b) (eq? (car d32f9@b) '$core-rtd)) (cons '$rtd (map d301c@bless (cdr d32f9@b))) (if (and (pair? d32f9@b) (eq? (car d32f9@b) 'global-rtd)) ((lambda (d32fb@lib d32fc@loc) (cons '$rtd (symbol-value d32fc@loc))) (cadr d32f9@b) (cddr d32f9@b)) d32f9@b))) d32f7@t) ((lambda (d32ff@t) (if d32ff@t (cdr d32ff@t) ((lambda (d3301@t) (if d3301@t ((lambda (d3303@env) ((lambda (d3305@t) (if d3305@t ((lambda (d3307@p) (cons* 'lexical (cdr d3307@p) '#f)) d3305@t) '(displaced-lexical . #f))) (assq d32f3@x (d30fc@interaction-env-locs d3303@env)))) d3301@t) '(displaced-lexical . #f))) (d3142@top-level-context)))) (assq d32f3@x d32f4@r)))) (d2c90@d2ad2@imported-label->binding d32f3@x)))) (set! d2e7b@make-binding cons) (set! d2e7d@binding-type car) (set! d2e7f@binding-value cdr) (set! d2e81@raise-unbound-error (lambda (d3309@id) (d3132@syntax-violation* '#f '"unbound identifier" d3309@id (d4f09@d4d4f@make-undefined-violation)))) (set! d2e83@syntax-type (lambda (d330b@e d330c@r) (if (d2e5b@id? d330b@e) ((lambda (d330f@id) ((lambda (d3311@label) ((lambda (d3313@b) ((lambda (d3315@type) ((lambda () (begin (if (not d3311@label) (d2e81@raise-unbound-error d330f@id) (void)) ((lambda (d3317@t) (if (memv d3317@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values d3315@type (d2e7f@binding-value d3313@b) d330f@id) (values 'other '#f '#f))) d3315@type))))) (d2e7d@binding-type d3313@b))) (d2e79@label->binding d3311@label d330c@r))) (d2e75@id->label d330f@id))) d330b@e) (if (d2e4d@syntax-pair? d330b@e) ((lambda (d3319@id) (if (d2e5b@id? d3319@id) ((lambda (d331b@label) ((lambda (d331d@b) ((lambda (d331f@type) ((lambda () (begin (if (not d331b@label) (d2e81@raise-unbound-error d3319@id) (void)) ((lambda (d3321@t) (if (memv d3321@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values d331f@type (d2e7f@binding-value d331d@b) d3319@id) (values 'call '#f '#f))) d331f@type))))) (d2e7d@binding-type d331d@b))) (d2e79@label->binding d331b@label d330c@r))) (d2e75@id->label d3319@id)) (values 'call '#f '#f))) (d2e55@syntax-car d330b@e)) ((lambda (d3323@d) (if (d2e6b@self-evaluating? d3323@d) (values 'constant d3323@d '#f) (values 'other '#f '#f))) (d2e71@stx->datum d330b@e)))))) (set! d2e91@sanitize-binding (lambda (d3325@x d3326@src) (if (procedure? d3325@x) (cons* 'local-macro d3325@x d3326@src) (if (and (pair? d3325@x) (eq? (car d3325@x) 'macro!) (procedure? (cdr d3325@x))) (cons* 'local-macro! (cdr d3325@x) d3326@src) (if (and (pair? d3325@x) (eq? (car d3325@x) '$rtd)) d3325@x (assertion-violation 'expand '"invalid transformer" d3325@x)))))) (set! d2e93@make-variable-transformer (lambda (d3329@x) (if (procedure? d3329@x) (cons 'macro! d3329@x) (assertion-violation 'make-variable-transformer '"not a procedure" d3329@x)))) (set! d2e95@variable-transformer? (lambda (d332b@x) (and (pair? d332b@x) (eq? (car d332b@x) 'macro!) (procedure? (cdr d332b@x))))) (set! d2e97@variable-transformer-procedure (lambda (d332d@x) (if (d2e95@variable-transformer? d332d@x) (cdr d332d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" d332d@x)))) (set! d2e99@make-eval-transformer (lambda (d332f@x) (d2e91@sanitize-binding (eval-core (d2a16@d29ce@expanded->core d332f@x)) d332f@x))) (set! d2fea@parse-define (lambda (d3331@x) ((lambda (d3333@t) ((lambda (d3335@ls/false) (if (and d3335@ls/false (apply (lambda (d3337@id d3338@fmls d3339@b d333a@b*) (d2e5b@id? d3337@id)) d3335@ls/false)) (apply (lambda (d333f@id d3340@fmls d3341@b d3342@b*) (begin (d308c@verify-formals d3340@fmls d3331@x) (values d333f@id (cons 'defun (cons d3340@fmls (cons d3341@b d3342@b*)))))) d3335@ls/false) ((lambda (d3347@t) ((lambda (d3349@ls/false) (if (and d3349@ls/false (apply (lambda (d334b@id d334c@val) (d2e5b@id? d334b@id)) d3349@ls/false)) (apply (lambda (d334f@id d3350@val) (values d334f@id (cons 'expr d3350@val))) d3349@ls/false) ((lambda (d3353@t) ((lambda (d3355@ls/false) (if (and d3355@ls/false (apply (lambda (d3357@id) (d2e5b@id? d3357@id)) d3355@ls/false)) (apply (lambda (d3359@id) (values d3359@id (cons 'expr (d301c@bless '(void))))) d3355@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3353@t))) (d3066@syntax-dispatch d3353@t '(_ any)))) d3347@t))) (d3066@syntax-dispatch d3347@t '(_ any any)))) d3333@t))) (d3066@syntax-dispatch d3333@t '(_ (any . any) any . each-any)))) d3331@x))) (set! d2fec@parse-define-syntax (lambda (d335b@x) ((lambda (d335d@t) ((lambda (d335f@ls/false) (if (and d335f@ls/false (apply (lambda (d3361@id d3362@val) (d2e5b@id? d3361@id)) d335f@ls/false)) (apply (lambda (d3365@id d3366@val) (values d3365@id d3366@val)) d335f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d335d@t))) (d3066@syntax-dispatch d335d@t '(_ any any)))) d335b@x))) (set! d2fee@scheme-stx-hashtable (make-eq-hashtable)) (set! d2ff0@scheme-stx (lambda (d3369@sym) (or (hashtable-ref d2fee@scheme-stx-hashtable d3369@sym '#f) ((lambda (d336b@subst) ((lambda (d336d@stx) ((lambda (d336f@stx) ((lambda () (begin (hashtable-set! d2fee@scheme-stx-hashtable d3369@sym d336f@stx) d336f@stx)))) ((lambda (d3371@t) (if d3371@t ((lambda (d3373@x) ((lambda (d3375@name d3376@label) (d2e47@add-subst (d2df9@make-rib (list d3375@name) (list d2de9@top-mark*) (list d3376@label) '#f '#f) d336d@stx)) (car d3373@x) (cdr d3373@x))) d3371@t) d336d@stx)) (assq d3369@sym d336b@subst)))) (d2e23@make-stx d3369@sym d2de9@top-mark* '() '()))) (d2c6c@d2a8a@library-subst (d2c8a@d2ac6@find-library-by-name '(psyntax system $all))))))) (set! d2ff2@lexical-var car) (set! d2ff4@lexical-mutable? cdr) (set! d2ff6@set-lexical-mutable! set-cdr!) (set! d2ff8@add-lexical (lambda (d3379@lab d337a@lex d337b@r) (cons (cons* d3379@lab 'lexical d337a@lex '#f) d337b@r))) (set! d2ffa@add-lexicals (lambda (d337f@lab* d3380@lex* d3381@r) (if (null? d337f@lab*) d3381@r (d2ffa@add-lexicals (cdr d337f@lab*) (cdr d3380@lex*) (d2ff8@add-lexical (car d337f@lab*) (car d3380@lex*) d3381@r))))) (set! d2ffc@letrec-helper (lambda (d3385@e d3386@r d3387@mr d3388@build) ((lambda (d338d@t) ((lambda (d338f@ls/false) (if d338f@ls/false (apply (lambda (d3391@lhs* d3392@rhs* d3393@b d3394@b*) (if (not (d2e65@valid-bound-ids? d3391@lhs*)) (d3020@invalid-fmls-error d3385@e d3391@lhs*) ((lambda (d3399@lex* d339a@lab*) ((lambda (d339d@rib d339e@r) ((lambda (d33a1@body d33a2@rhs*) (d3388@build '#f d3399@lex* d33a2@rhs* d33a1@body)) (d309e@chi-internal (d2e47@add-subst d339d@rib (cons d3393@b d3394@b*)) d339e@r d3387@mr) (d3084@chi-expr* (map (lambda (d33a5@x) (d2e47@add-subst d339d@rib d33a5@x)) d3392@rhs*) d339e@r d3387@mr))) (d2e1f@make-full-rib d3391@lhs* d339a@lab*) (d2ffa@add-lexicals d339a@lab* d3399@lex* d3386@r))) (map d2ded@gen-lexical d3391@lhs*) (map d2df1@gen-label d3391@lhs*)))) d338f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d338d@t))) (d3066@syntax-dispatch d338d@t '(_ #(each (any any)) any . each-any)))) d3385@e))) (set! d2ffe@letrec-transformer (lambda (d33a7@e d33a8@r d33a9@mr) (d2ffc@letrec-helper d33a7@e d33a8@r d33a9@mr d2dce@d2d3f@build-letrec))) (set! d3000@letrec*-transformer (lambda (d33ad@e d33ae@r d33af@mr) (d2ffc@letrec-helper d33ad@e d33ae@r d33af@mr d2dcf@d2d41@build-letrec*))) (set! d3002@fluid-let-syntax-transformer (lambda (d33b3@e d33b4@r d33b5@mr) ((lambda (d33ba@lookup) (begin (set! d33ba@lookup (lambda (d33cd@x) (or (d2e75@id->label d33cd@x) (d3134@syntax-violation '#f '"unbound identifier" d33b3@e d33cd@x)))) ((lambda (d33bb@t) ((lambda (d33bd@ls/false) (if d33bd@ls/false (apply (lambda (d33bf@lhs* d33c0@rhs* d33c1@b d33c2@b*) (if (not (d2e65@valid-bound-ids? d33bf@lhs*)) (d3020@invalid-fmls-error d33b3@e d33bf@lhs*) ((lambda (d33c7@lab* d33c8@rhs*) (d309e@chi-internal (cons d33c1@b d33c2@b*) (append (map cons d33c7@lab* d33c8@rhs*) d33b4@r) (append (map cons d33c7@lab* d33c8@rhs*) d33b5@mr))) (map d33ba@lookup d33bf@lhs*) (map (lambda (d33cb@x) (d2e99@make-eval-transformer (d30ba@expand-transformer d33cb@x d33b5@mr))) d33c0@rhs*)))) d33bd@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d33bb@t))) (d3066@syntax-dispatch d33bb@t '(_ #(each (any any)) any . each-any)))) d33b3@e))) '#f))) (set! d3004@type-descriptor-transformer (lambda (d33cf@e d33d0@r d33d1@mr) ((lambda (d33d5@t) ((lambda (d33d7@ls/false) (if (and d33d7@ls/false (apply (lambda (d33d9@id) (d2e5b@id? d33d9@id)) d33d7@ls/false)) (apply (lambda (d33db@id) ((lambda (d33dd@lab) ((lambda (d33df@b) ((lambda (d33e1@type) ((lambda () (begin (if (not d33dd@lab) (d2e81@raise-unbound-error d33db@id) (void)) (if (not (and (eq? d33e1@type '$rtd) (not (list? (d2e7f@binding-value d33df@b))))) (d3134@syntax-violation '#f '"not a record type" d33cf@e) (void)) (list 'quote (d2e7f@binding-value d33df@b)))))) (d2e7d@binding-type d33df@b))) (d2e79@label->binding d33dd@lab d33d0@r))) (d2e75@id->label d33db@id))) d33d7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d33d5@t))) (d3066@syntax-dispatch d33d5@t '(_ any)))) d33cf@e))) (set! d3006@record-type-descriptor-transformer (lambda (d33e3@e d33e4@r d33e5@mr) ((lambda (d33e9@t) ((lambda (d33eb@ls/false) (if (and d33eb@ls/false (apply (lambda (d33ed@id) (d2e5b@id? d33ed@id)) d33eb@ls/false)) (apply (lambda (d33ef@id) ((lambda (d33f1@lab) ((lambda (d33f3@b) ((lambda (d33f5@type) ((lambda () (begin (if (not d33f1@lab) (d2e81@raise-unbound-error d33ef@id) (void)) (if (not (and (eq? d33f5@type '$rtd) (list? (d2e7f@binding-value d33f3@b)))) (d3134@syntax-violation '#f '"not a record type" d33e3@e) (void)) (d3088@chi-expr (car (d2e7f@binding-value d33f3@b)) d33e4@r d33e5@mr))))) (d2e7d@binding-type d33f3@b))) (d2e79@label->binding d33f1@lab d33e4@r))) (d2e75@id->label d33ef@id))) d33eb@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d33e9@t))) (d3066@syntax-dispatch d33e9@t '(_ any)))) d33e3@e))) (set! d3008@record-constructor-descriptor-transformer (lambda (d33f7@e d33f8@r d33f9@mr) ((lambda (d33fd@t) ((lambda (d33ff@ls/false) (if (and d33ff@ls/false (apply (lambda (d3401@id) (d2e5b@id? d3401@id)) d33ff@ls/false)) (apply (lambda (d3403@id) ((lambda (d3405@lab) ((lambda (d3407@b) ((lambda (d3409@type) ((lambda () (begin (if (not d3405@lab) (d2e81@raise-unbound-error d3403@id) (void)) (if (not (and (eq? d3409@type '$rtd) (list? (d2e7f@binding-value d3407@b)))) (d3134@syntax-violation '#f '"invalid type" d33f7@e) (void)) (d3088@chi-expr (cadr (d2e7f@binding-value d3407@b)) d33f8@r d33f9@mr))))) (d2e7d@binding-type d3407@b))) (d2e79@label->binding d3405@lab d33f8@r))) (d2e75@id->label d3403@id))) d33ff@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d33fd@t))) (d3066@syntax-dispatch d33fd@t '(_ any)))) d33f7@e))) (set! d300a@when-macro (lambda (d340b@e) ((lambda (d340d@t) ((lambda (d340f@ls/false) (if d340f@ls/false (apply (lambda (d3411@test d3412@e d3413@e*) (d301c@bless (list 'if d3411@test (cons 'begin (cons d3412@e d3413@e*))))) d340f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d340d@t))) (d3066@syntax-dispatch d340d@t '(_ any any . each-any)))) d340b@e))) (set! d300c@unless-macro (lambda (d3417@e) ((lambda (d3419@t) ((lambda (d341b@ls/false) (if d341b@ls/false (apply (lambda (d341d@test d341e@e d341f@e*) (d301c@bless (list 'if (list 'not d341d@test) (cons 'begin (cons d341e@e d341f@e*))))) d341b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3419@t))) (d3066@syntax-dispatch d3419@t '(_ any any . each-any)))) d3417@e))) (set! d300e@if-transformer (lambda (d3423@e d3424@r d3425@mr) ((lambda (d3429@t) ((lambda (d342b@ls/false) (if d342b@ls/false (apply (lambda (d342d@e0 d342e@e1 d342f@e2) (list 'if (d3088@chi-expr d342d@e0 d3424@r d3425@mr) (d3088@chi-expr d342e@e1 d3424@r d3425@mr) (d3088@chi-expr d342f@e2 d3424@r d3425@mr))) d342b@ls/false) ((lambda (d3433@t) ((lambda (d3435@ls/false) (if d3435@ls/false (apply (lambda (d3437@e0 d3438@e1) (list 'if (d3088@chi-expr d3437@e0 d3424@r d3425@mr) (d3088@chi-expr d3438@e1 d3424@r d3425@mr) (d2dcd@d2d3d@build-void))) d3435@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3433@t))) (d3066@syntax-dispatch d3433@t '(_ any any)))) d3429@t))) (d3066@syntax-dispatch d3429@t '(_ any any any)))) d3423@e))) (set! d3010@and-transformer (lambda (d343b@e d343c@r d343d@mr) ((lambda (d3441@t) ((lambda (d3443@ls/false) (if d3443@ls/false (apply (lambda (d3445@e*) (cons 'and (d3084@chi-expr* d3445@e* d343c@r d343d@mr))) d3443@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3441@t))) (d3066@syntax-dispatch d3441@t '(_ . each-any)))) d343b@e))) (set! d3012@or-transformer (lambda (d3447@e d3448@r d3449@mr) ((lambda (d344d@t) ((lambda (d344f@ls/false) (if d344f@ls/false (apply (lambda (d3451@e*) (cons 'or (d3084@chi-expr* d3451@e* d3448@r d3449@mr))) d344f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d344d@t))) (d3066@syntax-dispatch d344d@t '(_ . each-any)))) d3447@e))) (set! d3014@case-macro (lambda (d3453@e) ((lambda (d3456@build-last d3458@build-one) (begin (set! d3456@build-last (lambda (d347d@cls) ((lambda (d347f@t) ((lambda (d3481@ls/false) (if d3481@ls/false (apply (lambda (d3483@e d3484@e*) (cons 'begin (cons d3483@e d3484@e*))) d3481@ls/false) ((lambda (d3487@t) ((lambda (d3489@ls/false) (if d3489@ls/false (apply (lambda () (d3458@build-one d347d@cls '(if #f #f))) d3489@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3487@t))) (d3066@syntax-dispatch d3487@t '_))) d347f@t))) (d3066@syntax-dispatch d347f@t '(#(scheme-id else) any . each-any)))) d347d@cls))) (set! d3458@build-one (lambda (d346f@cls d3470@k) ((lambda (d3473@t) ((lambda (d3475@ls/false) (if d3475@ls/false (apply (lambda (d3477@d* d3478@e d3479@e*) (list 'if (list 'memv 't (list 'quote d3477@d*)) (cons 'begin (cons d3478@e d3479@e*)) d3470@k)) d3475@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3473@t))) (d3066@syntax-dispatch d3473@t '(each-any any . each-any)))) d346f@cls))) ((lambda (d3459@t) ((lambda (d345b@ls/false) (if d345b@ls/false (apply (lambda (d345d@expr) (d301c@bless (cons 'let (cons (list (list 't d345d@expr)) '((if #f #f)))))) d345b@ls/false) ((lambda (d345f@t) ((lambda (d3461@ls/false) (if d3461@ls/false (apply (lambda (d3463@expr d3464@cls d3465@cls*) (d301c@bless (list 'let (list (list 't d3463@expr)) ((letrec ((d3469@f (lambda (d346b@cls d346c@cls*) (if (null? d346c@cls*) (d3456@build-last d346b@cls) (d3458@build-one d346b@cls (d3469@f (car d346c@cls*) (cdr d346c@cls*))))))) d3469@f) d3464@cls d3465@cls*)))) d3461@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d345f@t))) (d3066@syntax-dispatch d345f@t '(_ any any . each-any)))) d3459@t))) (d3066@syntax-dispatch d3459@t '(_ any)))) d3453@e))) '#f '#f))) (set! d3016@quote-transformer (lambda (d348b@e d348c@r d348d@mr) ((lambda (d3491@t) ((lambda (d3493@ls/false) (if d3493@ls/false (apply (lambda (d3495@datum) (list 'quote (d2e71@stx->datum d3495@datum))) d3493@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3491@t))) (d3066@syntax-dispatch d3491@t '(_ any)))) d348b@e))) (set! d3018@case-lambda-transformer (lambda (d3497@e d3498@r d3499@mr) ((lambda (d349d@t) ((lambda (d349f@ls/false) (if d349f@ls/false (apply (lambda (d34a1@fmls* d34a2@b* d34a3@b**) (call-with-values (lambda () (d3090@chi-lambda-clause* d3497@e d34a1@fmls* (map cons d34a2@b* d34a3@b**) d3498@r d3499@mr)) (lambda (d34ab@d34a8 d34ac@d34aa) ((lambda (d34af@body* d34b0@fmls*) (d2dca@d2d0b@build-case-lambda '#f d34b0@fmls* d34af@body*)) d34ac@d34aa d34ab@d34a8)))) d349f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d349d@t))) (d3066@syntax-dispatch d349d@t '(_ . #(each (any any . each-any)))))) d3497@e))) (set! d301a@lambda-transformer (lambda (d34b3@e d34b4@r d34b5@mr) ((lambda (d34b9@t) ((lambda (d34bb@ls/false) (if d34bb@ls/false (apply (lambda (d34bd@fmls d34be@b d34bf@b*) (call-with-values (lambda () (d308e@chi-lambda-clause d34b3@e d34bd@fmls (cons d34be@b d34bf@b*) d34b4@r d34b5@mr)) (lambda (d34c7@d34c4 d34c8@d34c6) ((lambda (d34cb@body d34cc@fmls) (d2dc9@d2d09@build-lambda '#f d34cc@fmls d34cb@body)) d34c8@d34c6 d34c7@d34c4)))) d34bb@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d34b9@t))) (d3066@syntax-dispatch d34b9@t '(_ any any . each-any)))) d34b3@e))) (set! d301c@bless (lambda (d34cf@x) (d2e43@mkstx ((letrec ((d34d1@f (lambda (d34d3@x) (if (d2e25@stx? d34d3@x) d34d3@x (if (pair? d34d3@x) (cons (d34d1@f (car d34d3@x)) (d34d1@f (cdr d34d3@x))) (if (symbol? d34d3@x) (d2ff0@scheme-stx d34d3@x) (if (vector? d34d3@x) (vector-map d34d1@f d34d3@x) d34d3@x))))))) d34d1@f) d34cf@x) '() '() '()))) (set! d301e@with-syntax-macro (lambda (d34d5@e) ((lambda (d34d7@t) ((lambda (d34d9@ls/false) (if d34d9@ls/false (apply (lambda (d34db@pat* d34dc@expr* d34dd@b d34de@b*) ((lambda (d34e3@idn*) (begin (d308c@verify-formals (map car d34e3@idn*) d34d5@e) ((lambda (d34e5@t*) (d301c@bless (list 'let (map list d34e5@t* d34dc@expr*) ((letrec ((d34e7@f (lambda (d34e9@pat* d34ea@t*) (if (null? d34e9@pat*) (cons 'begin (cons '#f (cons d34dd@b d34de@b*))) (list 'syntax-case (car d34ea@t*) '() (list (car d34e9@pat*) (d34e7@f (cdr d34e9@pat*) (cdr d34ea@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car d34e9@pat*)) (car d34ea@t*)))))))) d34e7@f) d34db@pat* d34e5@t*)))) (d3122@generate-temporaries d34dc@expr*)))) ((letrec ((d34ed@f (lambda (d34ef@pat*) (if (null? d34ef@pat*) '() (call-with-values (lambda () (d3064@convert-pattern (car d34ef@pat*) '())) (lambda (d34f5@d34f2 d34f6@d34f4) ((lambda (d34f9@idn* d34fa@pat) (append d34f9@idn* (d34ed@f (cdr d34ef@pat*)))) d34f6@d34f4 d34f5@d34f2))))))) d34ed@f) d34db@pat*))) d34d9@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d34d7@t))) (d3066@syntax-dispatch d34d7@t '(_ #(each (any any)) any . each-any)))) d34d5@e))) (set! d3020@invalid-fmls-error (lambda (d34fd@stx d34fe@fmls) ((lambda (d3501@t) ((lambda (d3503@ls/false) (if d3503@ls/false (apply (lambda (d3505@id* d3506@last) ((letrec ((d3509@f (lambda (d350b@id*) (if (null? d350b@id*) (values) (if (not (d2e5b@id? (car d350b@id*))) (d3134@syntax-violation '#f '"not an identifier" d34fd@stx (car d350b@id*)) (begin (d3509@f (cdr d350b@id*)) (if (d2e69@bound-id-member? (car d350b@id*) (cdr d350b@id*)) (d3134@syntax-violation '#f '"duplicate binding" d34fd@stx (car d350b@id*)) (void)))))))) d3509@f) (if (d2e5b@id? d3506@last) (cons d3506@last d3505@id*) (if (d2e51@syntax-null? d3506@last) d3505@id* (d3134@syntax-violation '#f '"not an identifier" d34fd@stx d3506@last))))) d3503@ls/false) ((lambda (d350d@t) ((lambda (d350f@ls/false) (if d350f@ls/false (apply (lambda () (d3134@syntax-violation '#f '"malformed binding form" d34fd@stx d34fe@fmls)) d350f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d350d@t))) (d3066@syntax-dispatch d350d@t '_))) d3501@t))) (d3066@syntax-dispatch d3501@t '#(each+ any () any)))) d34fe@fmls))) (set! d3022@let-macro (lambda (d3511@stx) ((lambda (d3513@t) ((lambda (d3515@ls/false) (if d3515@ls/false (apply (lambda (d3517@lhs* d3518@rhs* d3519@b d351a@b*) (if (d2e65@valid-bound-ids? d3517@lhs*) (d301c@bless (cons (cons 'lambda (cons d3517@lhs* (cons d3519@b d351a@b*))) d3518@rhs*)) (d3020@invalid-fmls-error d3511@stx d3517@lhs*))) d3515@ls/false) ((lambda (d351f@t) ((lambda (d3521@ls/false) (if (and d3521@ls/false (apply (lambda (d3523@f d3524@lhs* d3525@rhs* d3526@b d3527@b*) (d2e5b@id? d3523@f)) d3521@ls/false)) (apply (lambda (d352d@f d352e@lhs* d352f@rhs* d3530@b d3531@b*) (if (d2e65@valid-bound-ids? d352e@lhs*) (d301c@bless (cons (list 'letrec (list (list d352d@f (cons 'lambda (cons d352e@lhs* (cons d3530@b d3531@b*))))) d352d@f) d352f@rhs*)) (d3020@invalid-fmls-error d3511@stx d352e@lhs*))) d3521@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d351f@t))) (d3066@syntax-dispatch d351f@t '(_ any #(each (any any)) any . each-any)))) d3513@t))) (d3066@syntax-dispatch d3513@t '(_ #(each (any any)) any . each-any)))) d3511@stx))) (set! d3024@let-values-macro (lambda (d3537@stx) ((lambda (d353a@rename d353c@rename*) (begin (set! d353a@rename (lambda (d359f@x d35a0@old* d35a1@new*) (begin (if (not (d2e5b@id? d359f@x)) (d3134@syntax-violation '#f '"not an indentifier" d3537@stx d359f@x) (void)) (if (d2e69@bound-id-member? d359f@x d35a0@old*) (d3134@syntax-violation '#f '"duplicate binding" d3537@stx d359f@x) (void)) ((lambda (d35a5@y) (values d35a5@y (cons d359f@x d35a0@old*) (cons d35a5@y d35a1@new*))) (gensym (d313a@syntax->datum d359f@x)))))) (set! d353c@rename* (lambda (d358d@x* d358e@old* d358f@new*) (if (null? d358d@x*) (values '() d358e@old* d358f@new*) (call-with-values (lambda () (d353a@rename (car d358d@x*) d358e@old* d358f@new*)) (lambda (d3593@x d3594@old* d3595@new*) (call-with-values (lambda () (d353c@rename* (cdr d358d@x*) d3594@old* d3595@new*)) (lambda (d3599@x* d359a@old* d359b@new*) (values (cons d3593@x d3599@x*) d359a@old* d359b@new*)))))))) ((lambda (d353d@t) ((lambda (d353f@ls/false) (if d353f@ls/false (apply (lambda (d3541@b d3542@b*) (cons* (d301c@bless 'let) '() d3541@b d3542@b*)) d353f@ls/false) ((lambda (d3545@t) ((lambda (d3547@ls/false) (if d3547@ls/false (apply (lambda (d3549@lhs* d354a@rhs* d354b@b d354c@b*) (d301c@bless ((letrec ((d3551@f (lambda (d3553@lhs* d3554@rhs* d3555@old* d3556@new*) (if (null? d3553@lhs*) (cons 'let (cons (map list d3555@old* d3556@new*) (cons d354b@b d354c@b*))) ((lambda (d355b@t) ((lambda (d355d@ls/false) (if d355d@ls/false (apply (lambda (d355f@x*) (call-with-values (lambda () (d353c@rename* d355f@x* d3555@old* d3556@new*)) (lambda (d3567@d3562 d3568@d3564 d3569@d3566) ((lambda (d356d@new* d356e@old* d356f@y*) (list 'call-with-values (list 'lambda '() (car d3554@rhs*)) (list 'lambda d356f@y* (d3551@f (cdr d3553@lhs*) (cdr d3554@rhs*) d356e@old* d356d@new*)))) d3569@d3566 d3568@d3564 d3567@d3562)))) d355d@ls/false) ((lambda (d3573@t) ((lambda (d3575@ls/false) (if d3575@ls/false (apply (lambda (d3577@x* d3578@x) (call-with-values (lambda () (d353a@rename d3578@x d3555@old* d3556@new*)) (lambda (d357b@y d357c@old* d357d@new*) (call-with-values (lambda () (d353c@rename* d3577@x* d357c@old* d357d@new*)) (lambda (d3581@y* d3582@old* d3583@new*) (list 'call-with-values (list 'lambda '() (car d3554@rhs*)) (list 'lambda (append d3581@y* d357b@y) (d3551@f (cdr d3553@lhs*) (cdr d3554@rhs*) d3582@old* d3583@new*)))))))) d3575@ls/false) ((lambda (d3587@t) ((lambda (d3589@ls/false) (if d3589@ls/false (apply (lambda (d358b@others) (d3134@syntax-violation '#f '"malformed bindings" d3537@stx d358b@others)) d3589@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3587@t))) (d3066@syntax-dispatch d3587@t 'any))) d3573@t))) (d3066@syntax-dispatch d3573@t '#(each+ any () any)))) d355b@t))) (d3066@syntax-dispatch d355b@t 'each-any))) (car d3553@lhs*)))))) d3551@f) d3549@lhs* d354a@rhs* '() '()))) d3547@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3545@t))) (d3066@syntax-dispatch d3545@t '(_ #(each (any any)) any . each-any)))) d353d@t))) (d3066@syntax-dispatch d353d@t '(_ () any . each-any)))) d3537@stx))) '#f '#f))) (set! d3026@let*-values-macro (lambda (d35a7@stx) ((lambda (d35aa@check) (begin (set! d35aa@check (lambda (d35d9@x*) (if (not (null? d35d9@x*)) ((lambda (d35db@x) (begin (if (not (d2e5b@id? d35db@x)) (d3134@syntax-violation '#f '"not an identifier" d35a7@stx d35db@x) (void)) (d35aa@check (cdr d35d9@x*)) (if (d2e69@bound-id-member? d35db@x (cdr d35d9@x*)) (d3134@syntax-violation '#f '"duplicate identifier" d35a7@stx d35db@x) (void)))) (car d35d9@x*)) (void)))) ((lambda (d35ab@t) ((lambda (d35ad@ls/false) (if d35ad@ls/false (apply (lambda (d35af@b d35b0@b*) (cons* (d301c@bless 'let) '() d35af@b d35b0@b*)) d35ad@ls/false) ((lambda (d35b3@t) ((lambda (d35b5@ls/false) (if d35b5@ls/false (apply (lambda (d35b7@lhs* d35b8@rhs* d35b9@b d35ba@b*) (d301c@bless ((letrec ((d35bf@f (lambda (d35c1@lhs* d35c2@rhs*) (if (null? d35c1@lhs*) (cons 'begin (cons d35b9@b d35ba@b*)) ((lambda (d35c5@t) ((lambda (d35c7@ls/false) (if d35c7@ls/false (apply (lambda (d35c9@x*) (begin (d35aa@check d35c9@x*) (list 'call-with-values (list 'lambda '() (car d35c2@rhs*)) (list 'lambda d35c9@x* (d35bf@f (cdr d35c1@lhs*) (cdr d35c2@rhs*)))))) d35c7@ls/false) ((lambda (d35cb@t) ((lambda (d35cd@ls/false) (if d35cd@ls/false (apply (lambda (d35cf@x* d35d0@x) (begin (d35aa@check (cons d35d0@x d35cf@x*)) (list 'call-with-values (list 'lambda '() (car d35c2@rhs*)) (list 'lambda (append d35cf@x* d35d0@x) (d35bf@f (cdr d35c1@lhs*) (cdr d35c2@rhs*)))))) d35cd@ls/false) ((lambda (d35d3@t) ((lambda (d35d5@ls/false) (if d35d5@ls/false (apply (lambda (d35d7@others) (d3134@syntax-violation '#f '"malformed bindings" d35a7@stx d35d7@others)) d35d5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d35d3@t))) (d3066@syntax-dispatch d35d3@t 'any))) d35cb@t))) (d3066@syntax-dispatch d35cb@t '#(each+ any () any)))) d35c5@t))) (d3066@syntax-dispatch d35c5@t 'each-any))) (car d35c1@lhs*)))))) d35bf@f) d35b7@lhs* d35b8@rhs*))) d35b5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d35b3@t))) (d3066@syntax-dispatch d35b3@t '(_ #(each (any any)) any . each-any)))) d35ab@t))) (d3066@syntax-dispatch d35ab@t '(_ () any . each-any)))) d35a7@stx))) '#f))) (set! d3028@trace-lambda-macro (lambda (d35dd@stx) ((lambda (d35df@t) ((lambda (d35e1@ls/false) (if d35e1@ls/false (apply (lambda (d35e3@who d35e4@fmls d35e5@b d35e6@b*) (if (d2e65@valid-bound-ids? d35e4@fmls) (d301c@bless (list 'make-traced-procedure (list 'quote d35e3@who) (cons 'lambda (cons d35e4@fmls (cons d35e5@b d35e6@b*))))) (d3020@invalid-fmls-error d35dd@stx d35e4@fmls))) d35e1@ls/false) ((lambda (d35eb@t) ((lambda (d35ed@ls/false) (if d35ed@ls/false (apply (lambda (d35ef@who d35f0@fmls d35f1@last d35f2@b d35f3@b*) (if (d2e65@valid-bound-ids? (cons d35f1@last d35f0@fmls)) (d301c@bless (list 'make-traced-procedure (list 'quote d35ef@who) (cons 'lambda (cons (append d35f0@fmls d35f1@last) (cons d35f2@b d35f3@b*))))) (d3020@invalid-fmls-error d35dd@stx (append d35f0@fmls d35f1@last)))) d35ed@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d35eb@t))) (d3066@syntax-dispatch d35eb@t '(_ any #(each+ any () any) any . each-any)))) d35df@t))) (d3066@syntax-dispatch d35df@t '(_ any each-any any . each-any)))) d35dd@stx))) (set! d302a@trace-define-macro (lambda (d35f9@stx) ((lambda (d35fb@t) ((lambda (d35fd@ls/false) (if d35fd@ls/false (apply (lambda (d35ff@who d3600@fmls d3601@b d3602@b*) (if (d2e65@valid-bound-ids? d3600@fmls) (d301c@bless (list 'define d35ff@who (list 'make-traced-procedure (list 'quote d35ff@who) (cons 'lambda (cons d3600@fmls (cons d3601@b d3602@b*)))))) (d3020@invalid-fmls-error d35f9@stx d3600@fmls))) d35fd@ls/false) ((lambda (d3607@t) ((lambda (d3609@ls/false) (if d3609@ls/false (apply (lambda (d360b@who d360c@fmls d360d@last d360e@b d360f@b*) (if (d2e65@valid-bound-ids? (cons d360d@last d360c@fmls)) (d301c@bless (list 'define d360b@who (list 'make-traced-procedure (list 'quote d360b@who) (cons 'lambda (cons (append d360c@fmls d360d@last) (cons d360e@b d360f@b*)))))) (d3020@invalid-fmls-error d35f9@stx (append d360c@fmls d360d@last)))) d3609@ls/false) ((lambda (d3615@t) ((lambda (d3617@ls/false) (if d3617@ls/false (apply (lambda (d3619@who d361a@expr) (if (d2e5b@id? d3619@who) (d301c@bless (list 'define d3619@who (list 'let (list (list 'v d361a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote d3619@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (d3134@syntax-violation '#f '"invalid name" d35f9@stx))) d3617@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3615@t))) (d3066@syntax-dispatch d3615@t '(_ any any)))) d3607@t))) (d3066@syntax-dispatch d3607@t '(_ (any . #(each+ any () any)) any . each-any)))) d35fb@t))) (d3066@syntax-dispatch d35fb@t '(_ (any . each-any) any . each-any)))) d35f9@stx))) (set! d302c@trace-define-syntax-macro (lambda (d361d@stx) ((lambda (d361f@t) ((lambda (d3621@ls/false) (if d3621@ls/false (apply (lambda (d3623@who d3624@expr) (if (d2e5b@id? d3623@who) (d301c@bless (list 'define-syntax d3623@who (list 'make-traced-macro (list 'quote d3623@who) d3624@expr))) (d3134@syntax-violation '#f '"invalid name" d361d@stx))) d3621@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d361f@t))) (d3066@syntax-dispatch d361f@t '(_ any any)))) d361d@stx))) (set! d302e@trace-let/rec-syntax (lambda (d3627@who) (lambda (d3629@stx) ((lambda (d362b@t) ((lambda (d362d@ls/false) (if d362d@ls/false (apply (lambda (d362f@lhs* d3630@rhs* d3631@b d3632@b*) (if (d2e65@valid-bound-ids? d362f@lhs*) ((lambda (d3637@rhs*) (d301c@bless (cons d3627@who (cons (map list d362f@lhs* d3637@rhs*) (cons d3631@b d3632@b*))))) (map (lambda (d3639@lhs d363a@rhs) (list 'make-traced-macro (list 'quote d3639@lhs) d363a@rhs)) d362f@lhs* d3630@rhs*)) (d3020@invalid-fmls-error d3629@stx d362f@lhs*))) d362d@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d362b@t))) (d3066@syntax-dispatch d362b@t '(_ #(each (any any)) any . each-any)))) d3629@stx)))) (set! d3030@trace-let-syntax-macro (d302e@trace-let/rec-syntax 'let-syntax)) (set! d3032@trace-letrec-syntax-macro (d302e@trace-let/rec-syntax 'letrec-syntax)) (set! d3034@guard-macro (lambda (d363d@x) ((lambda (d3640@gen-clauses) (begin (set! d3640@gen-clauses (lambda (d3657@con d3658@outerk d3659@clause*) ((lambda (d365e@f d3660@f*) (begin (set! d365e@f (lambda (d3697@x d3698@k) ((lambda (d369b@t) ((lambda (d369d@ls/false) (if d369d@ls/false (apply (lambda (d369f@e d36a0@p) ((lambda (d36a3@t) (list 'let (list (list d36a3@t d369f@e)) (list 'if d36a3@t (list d36a0@p d36a3@t) d3698@k))) (gensym))) d369d@ls/false) ((lambda (d36a5@t) ((lambda (d36a7@ls/false) (if d36a7@ls/false (apply (lambda (d36a9@e) ((lambda (d36ab@t) (list 'let (list (list d36ab@t d36a9@e)) (list 'if d36ab@t d36ab@t d3698@k))) (gensym))) d36a7@ls/false) ((lambda (d36ad@t) ((lambda (d36af@ls/false) (if d36af@ls/false (apply (lambda (d36b1@e d36b2@v d36b3@v*) (list 'if d36b1@e (cons 'begin (cons d36b2@v d36b3@v*)) d3698@k)) d36af@ls/false) ((lambda (d36b7@t) ((lambda (d36b9@ls/false) (if d36b9@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid guard clause" d3697@x)) d36b9@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d36b7@t))) (d3066@syntax-dispatch d36b7@t '_))) d36ad@t))) (d3066@syntax-dispatch d36ad@t '(any any . each-any)))) d36a5@t))) (d3066@syntax-dispatch d36a5@t '(any)))) d369b@t))) (d3066@syntax-dispatch d369b@t '(any #(scheme-id =>) any)))) d3697@x))) (set! d3660@f* (lambda (d366d@x*) ((lambda (d366f@t) ((lambda (d3671@ls/false) (if d3671@ls/false (apply (lambda () ((lambda (d3673@g) (values (list d3673@g (list 'lambda '() (list 'raise-continuable d3657@con))) d3673@g)) (gensym))) d3671@ls/false) ((lambda (d3675@t) ((lambda (d3677@ls/false) (if d3677@ls/false (apply (lambda (d3679@e d367a@e*) (values (cons 'begin (cons d3679@e d367a@e*)) '#f)) d3677@ls/false) ((lambda (d367d@t) ((lambda (d367f@ls/false) (if d367f@ls/false (apply (lambda (d3681@cls d3682@cls*) (call-with-values (lambda () (d3660@f* d3682@cls*)) (lambda (d3689@d3686 d368a@d3688) ((lambda (d368d@g d368e@e) (values (d365e@f d3681@cls d368e@e) d368d@g)) d368a@d3688 d3689@d3686)))) d367f@ls/false) ((lambda (d3691@t) ((lambda (d3693@ls/false) (if d3693@ls/false (apply (lambda (d3695@others) (d3134@syntax-violation '#f '"invalid guard clause" d3695@others)) d3693@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3691@t))) (d3066@syntax-dispatch d3691@t 'any))) d367d@t))) (d3066@syntax-dispatch d367d@t '(any . any)))) d3675@t))) (d3066@syntax-dispatch d3675@t '((#(scheme-id else) any . each-any))))) d366f@t))) (d3066@syntax-dispatch d366f@t '()))) d366d@x*))) (call-with-values (lambda () (d3660@f* d3659@clause*)) (lambda (d3665@d3662 d3666@d3664) ((lambda (d3669@raisek d366a@code) (if d3669@raisek (list (list 'call/cc (list 'lambda (list d3669@raisek) (list d3658@outerk (list 'lambda '() d366a@code))))) (list d3658@outerk (list 'lambda '() d366a@code)))) d3666@d3664 d3665@d3662))))) '#f '#f))) ((lambda (d3641@t) ((lambda (d3643@ls/false) (if (and d3643@ls/false (apply (lambda (d3645@con d3646@clause* d3647@b d3648@b*) (d2e5b@id? d3645@con)) d3643@ls/false)) (apply (lambda (d364d@con d364e@clause* d364f@b d3650@b*) ((lambda (d3655@outerk) (d301c@bless (list (list 'call/cc (list 'lambda (list d3655@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list d364d@con) (d3640@gen-clauses d364d@con d3655@outerk d364e@clause*)) (cons 'lambda (cons '() (cons d364f@b d3650@b*)))))))))) (gensym))) d3643@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3641@t))) (d3066@syntax-dispatch d3641@t '(_ (any . each-any) any . each-any)))) d363d@x))) '#f))) (set! d3036@define-enumeration-macro (lambda (d36bb@stx) ((lambda (d36be@set? d36c0@remove-dups) (begin (set! d36be@set? (lambda (d36d7@x) (or (null? d36d7@x) (and (not (memq (car d36d7@x) (cdr d36d7@x))) (d36be@set? (cdr d36d7@x)))))) (set! d36c0@remove-dups (lambda (d36d5@ls) (if (null? d36d5@ls) '() (cons (car d36d5@ls) (d36c0@remove-dups (remq (car d36d5@ls) (cdr d36d5@ls))))))) ((lambda (d36c1@t) ((lambda (d36c3@ls/false) (if (and d36c3@ls/false (apply (lambda (d36c5@name d36c6@id* d36c7@maker) (and (d2e5b@id? d36c5@name) (d2e5b@id? d36c7@maker) (for-all d2e5b@id? d36c6@id*))) d36c3@ls/false)) (apply (lambda (d36cb@name d36cc@id* d36cd@maker) ((lambda (d36d1@name* d36d2@mk) (d301c@bless (list 'begin (list 'define d36d2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote d36d1@name*)))) (list 'define-syntax d36cb@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote d36d1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote d36cb@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax d36cd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote d36cd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote d36d1@name*)) (cons 'syntax-violation (cons (list 'quote d36cd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons d36d2@mk '('(n* ...)))))))))))) (d36c0@remove-dups (d313a@syntax->datum d36cc@id*)) (gensym))) d36c3@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d36c1@t))) (d3066@syntax-dispatch d36c1@t '(_ any each-any any)))) d36bb@stx))) '#f '#f))) (set! d3038@time-macro (lambda (d36d9@stx) ((lambda (d36db@t) ((lambda (d36dd@ls/false) (if d36dd@ls/false (apply (lambda (d36df@expr) (d301c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() d36df@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) d36dd@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d36db@t))) (d3066@syntax-dispatch d36db@t '(_ any)))) d36d9@stx))) (set! d303a@delay-macro (lambda (d36e1@stx) ((lambda (d36e3@t) ((lambda (d36e5@ls/false) (if d36e5@ls/false (apply (lambda (d36e7@expr) (d301c@bless (list 'make-promise (list 'lambda '() d36e7@expr)))) d36e5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d36e3@t))) (d3066@syntax-dispatch d36e3@t '(_ any)))) d36e1@stx))) (set! d303c@assert-macro (lambda (d36e9@stx) ((lambda (d36eb@t) ((lambda (d36ed@ls/false) (if d36ed@ls/false (apply (lambda (d36ef@expr) ((lambda (d36f1@pos) (d301c@bless (list 'unless d36ef@expr (list 'assertion-error (list 'quote d36ef@expr) (list 'quote d36f1@pos))))) (or (d312c@expression-position d36e9@stx) (d312c@expression-position d36ef@expr)))) d36ed@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d36eb@t))) (d3066@syntax-dispatch d36eb@t '(_ any)))) d36e9@stx))) (set! d303e@endianness-macro (lambda (d36f3@stx) ((lambda (d36f5@t) ((lambda (d36f7@ls/false) (if d36f7@ls/false (apply (lambda (d36f9@e) ((lambda (d36fb@t) (if (memv d36fb@t '(little)) (d301c@bless ''little) (if (memv d36fb@t '(big)) (d301c@bless ''big) (d3134@syntax-violation '#f '"endianness must be big or little" d36f3@stx)))) (d313a@syntax->datum d36f9@e))) d36f7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d36f5@t))) (d3066@syntax-dispatch d36f5@t '(_ any)))) d36f3@stx))) (set! d3040@identifier-syntax-macro (lambda (d36fd@stx) ((lambda (d36ff@t) ((lambda (d3701@ls/false) (if d3701@ls/false (apply (lambda (d3703@expr) (d301c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax d3703@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax d3703@expr) '((syntax (e* ...)))))))))) d3701@ls/false) ((lambda (d3705@t) ((lambda (d3707@ls/false) (if (and d3707@ls/false (apply (lambda (d3709@id1 d370a@expr1 d370b@id2 d370c@expr2 d370d@expr3) (and (d2e5b@id? d3709@id1) (d2e5b@id? d370b@id2) (d2e5b@id? d370c@expr2))) d3707@ls/false)) (apply (lambda (d3713@id1 d3714@expr1 d3715@id2 d3716@expr2 d3717@expr3) (d301c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax d3714@expr1)) (list (list 'set! 'id d3716@expr2) (list 'syntax d3717@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons d3714@expr1 '(e* ...))))))))) d3707@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3705@t))) (d3066@syntax-dispatch d3705@t '(_ (any any) ((#(scheme-id set!) any any) any))))) d36ff@t))) (d3066@syntax-dispatch d36ff@t '(_ any)))) d36fd@stx))) (set! d3042@do-macro (lambda (d371d@stx) ((lambda (d3720@bind) (begin (set! d3720@bind (lambda (d3737@x) ((lambda (d3739@t) ((lambda (d373b@ls/false) (if d373b@ls/false (apply (lambda (d373d@x d373e@init) (list d373d@x d373e@init d373d@x)) d373b@ls/false) ((lambda (d3741@t) ((lambda (d3743@ls/false) (if d3743@ls/false (apply (lambda (d3745@x d3746@init d3747@step) (list d3745@x d3746@init d3747@step)) d3743@ls/false) ((lambda (d374b@t) ((lambda (d374d@ls/false) (if d374d@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid binding" d371d@stx)) d374d@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d374b@t))) (d3066@syntax-dispatch d374b@t '_))) d3741@t))) (d3066@syntax-dispatch d3741@t '(any any any)))) d3739@t))) (d3066@syntax-dispatch d3739@t '(any any)))) d3737@x))) ((lambda (d3721@t) ((lambda (d3723@ls/false) (if d3723@ls/false (apply (lambda (d3725@binding* d3726@test d3727@expr* d3728@command*) ((lambda (d372d@t) ((lambda (d372f@ls/false) (if d372f@ls/false (apply (lambda (d3731@x* d3732@init* d3733@step*) (if (d2e65@valid-bound-ids? d3731@x*) (d301c@bless (list 'letrec (list (list 'loop (list 'lambda d3731@x* (list 'if d3726@test (cons 'begin (cons '(if #f #f) d3727@expr*)) (cons 'begin (append d3728@command* (list (cons 'loop d3733@step*)))))))) (cons 'loop d3732@init*))) (d3134@syntax-violation '#f '"invalid bindings" d371d@stx))) d372f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d372d@t))) (d3066@syntax-dispatch d372d@t '#(each (any any any))))) (map d3720@bind d3725@binding*))) d3723@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3721@t))) (d3066@syntax-dispatch d3721@t '(_ each-any (any . each-any) . each-any)))) d371d@stx))) '#f))) (set! d3044@let*-macro (lambda (d374f@stx) ((lambda (d3751@t) ((lambda (d3753@ls/false) (if (and d3753@ls/false (apply (lambda (d3755@lhs* d3756@rhs* d3757@b d3758@b*) (for-all d2e5b@id? d3755@lhs*)) d3753@ls/false)) (apply (lambda (d375d@lhs* d375e@rhs* d375f@b d3760@b*) (d301c@bless ((letrec ((d3765@f (lambda (d3767@x*) (if (null? d3767@x*) (cons 'let (cons '() (cons d375f@b d3760@b*))) (list 'let (list (car d3767@x*)) (d3765@f (cdr d3767@x*))))))) d3765@f) (map list d375d@lhs* d375e@rhs*)))) d3753@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3751@t))) (d3066@syntax-dispatch d3751@t '(_ #(each (any any)) any . each-any)))) d374f@stx))) (set! d3046@or-macro (lambda (d3769@stx) ((lambda (d376b@t) ((lambda (d376d@ls/false) (if d376d@ls/false (apply (lambda () '#f) d376d@ls/false) ((lambda (d376f@t) ((lambda (d3771@ls/false) (if d3771@ls/false (apply (lambda (d3773@e d3774@e*) (d301c@bless ((letrec ((d3777@f (lambda (d3779@e d377a@e*) (if (null? d377a@e*) (list 'begin '#f d3779@e) (list 'let (list (list 't d3779@e)) (list 'if 't 't (d3777@f (car d377a@e*) (cdr d377a@e*)))))))) d3777@f) d3773@e d3774@e*))) d3771@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d376f@t))) (d3066@syntax-dispatch d376f@t '(_ any . each-any)))) d376b@t))) (d3066@syntax-dispatch d376b@t '(_)))) d3769@stx))) (set! d3048@and-macro (lambda (d377d@stx) ((lambda (d377f@t) ((lambda (d3781@ls/false) (if d3781@ls/false (apply (lambda () '#t) d3781@ls/false) ((lambda (d3783@t) ((lambda (d3785@ls/false) (if d3785@ls/false (apply (lambda (d3787@e d3788@e*) (d301c@bless ((letrec ((d378b@f (lambda (d378d@e d378e@e*) (if (null? d378e@e*) (list 'begin '#f d378d@e) (cons 'if (cons d378d@e (cons (d378b@f (car d378e@e*) (cdr d378e@e*)) '(#f)))))))) d378b@f) d3787@e d3788@e*))) d3785@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3783@t))) (d3066@syntax-dispatch d3783@t '(_ any . each-any)))) d377f@t))) (d3066@syntax-dispatch d377f@t '(_)))) d377d@stx))) (set! d304a@cond-macro (lambda (d3791@stx) ((lambda (d3793@t) ((lambda (d3795@ls/false) (if d3795@ls/false (apply (lambda (d3797@cls d3798@cls*) (d301c@bless ((letrec ((d379b@f (lambda (d379d@cls d379e@cls*) (if (null? d379e@cls*) ((lambda (d37a1@t) ((lambda (d37a3@ls/false) (if d37a3@ls/false (apply (lambda (d37a5@e d37a6@e*) (cons 'begin (cons d37a5@e d37a6@e*))) d37a3@ls/false) ((lambda (d37a9@t) ((lambda (d37ab@ls/false) (if d37ab@ls/false (apply (lambda (d37ad@e d37ae@p) (list 'let (list (list 't d37ad@e)) (list 'if 't (cons d37ae@p '(t))))) d37ab@ls/false) ((lambda (d37b1@t) ((lambda (d37b3@ls/false) (if d37b3@ls/false (apply (lambda (d37b5@e) (cons 'or (cons d37b5@e '((if #f #f))))) d37b3@ls/false) ((lambda (d37b7@t) ((lambda (d37b9@ls/false) (if d37b9@ls/false (apply (lambda (d37bb@e d37bc@e*) (list 'if d37bb@e (cons 'begin d37bc@e*))) d37b9@ls/false) ((lambda (d37bf@t) ((lambda (d37c1@ls/false) (if d37c1@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid last clause" d3791@stx)) d37c1@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d37bf@t))) (d3066@syntax-dispatch d37bf@t '_))) d37b7@t))) (d3066@syntax-dispatch d37b7@t '(any . each-any)))) d37b1@t))) (d3066@syntax-dispatch d37b1@t '(any)))) d37a9@t))) (d3066@syntax-dispatch d37a9@t '(any #(scheme-id =>) any)))) d37a1@t))) (d3066@syntax-dispatch d37a1@t '(#(scheme-id else) any . each-any)))) d379d@cls) ((lambda (d37c3@t) ((lambda (d37c5@ls/false) (if d37c5@ls/false (apply (lambda (d37c7@e d37c8@e*) (d3134@syntax-violation '#f '"incorrect position of keyword else" d3791@stx)) d37c5@ls/false) ((lambda (d37cb@t) ((lambda (d37cd@ls/false) (if d37cd@ls/false (apply (lambda (d37cf@e d37d0@p) (list 'let (list (list 't d37cf@e)) (list 'if 't (cons d37d0@p '(t)) (d379b@f (car d379e@cls*) (cdr d379e@cls*))))) d37cd@ls/false) ((lambda (d37d3@t) ((lambda (d37d5@ls/false) (if d37d5@ls/false (apply (lambda (d37d7@e) (list 'or d37d7@e (d379b@f (car d379e@cls*) (cdr d379e@cls*)))) d37d5@ls/false) ((lambda (d37d9@t) ((lambda (d37db@ls/false) (if d37db@ls/false (apply (lambda (d37dd@e d37de@e*) (list 'if d37dd@e (cons 'begin d37de@e*) (d379b@f (car d379e@cls*) (cdr d379e@cls*)))) d37db@ls/false) ((lambda (d37e1@t) ((lambda (d37e3@ls/false) (if d37e3@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid last clause" d3791@stx)) d37e3@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d37e1@t))) (d3066@syntax-dispatch d37e1@t '_))) d37d9@t))) (d3066@syntax-dispatch d37d9@t '(any . each-any)))) d37d3@t))) (d3066@syntax-dispatch d37d3@t '(any)))) d37cb@t))) (d3066@syntax-dispatch d37cb@t '(any #(scheme-id =>) any)))) d37c3@t))) (d3066@syntax-dispatch d37c3@t '(#(scheme-id else) any . each-any)))) d379d@cls))))) d379b@f) d3797@cls d3798@cls*))) d3795@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3793@t))) (d3066@syntax-dispatch d3793@t '(_ any . each-any)))) d3791@stx))) (set! d304c@do-include (lambda (d37e5@stx d37e6@id d37e7@filename) ((lambda (d37eb@filename) (begin (if (not (and (string? d37eb@filename) (d2e5b@id? d37e6@id))) (d3134@syntax-violation '#f '"invalid syntax" d37e5@stx) (void)) (cons (d301c@bless 'begin) (with-input-from-file d37eb@filename (lambda () ((letrec ((d37ed@f (lambda (d37ef@ls) ((lambda (d37f1@x) (if (eof-object? d37f1@x) (reverse d37ef@ls) (d37ed@f (cons (d2e39@datum->stx d37e6@id d37f1@x) d37ef@ls)))) (d29b4@d28a3@read-annotated))))) d37ed@f) '())))))) (d2e71@stx->datum d37e7@filename)))) (set! d304e@include-macro (lambda (d37f3@e) ((lambda (d37f5@t) ((lambda (d37f7@ls/false) (if d37f7@ls/false (apply (lambda (d37f9@id d37fa@filename) (d304c@do-include d37f3@e d37f9@id d37fa@filename)) d37f7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d37f5@t))) (d3066@syntax-dispatch d37f5@t '(any any)))) d37f3@e))) (set! d3050@include-into-macro (lambda (d37fd@e) ((lambda (d37ff@t) ((lambda (d3801@ls/false) (if d3801@ls/false (apply (lambda (d3803@id d3804@filename) (d304c@do-include d37fd@e d3803@id d3804@filename)) d3801@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d37ff@t))) (d3066@syntax-dispatch d37ff@t '(_ any any)))) d37fd@e))) (set! d3052@syntax-rules-macro (lambda (d3807@e) ((lambda (d3809@t) ((lambda (d380b@ls/false) (if d380b@ls/false (apply (lambda (d380d@lits d380e@pat* d380f@tmp*) (begin (d306c@verify-literals d380d@lits d3807@e) (d301c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons d380d@lits (map (lambda (d3813@pat d3814@tmp) ((lambda (d3817@t) ((lambda (d3819@ls/false) (if d3819@ls/false (apply (lambda (d381b@rest) (list (cons 'g d381b@rest) (list 'syntax d3814@tmp))) d3819@ls/false) ((lambda (d381d@t) ((lambda (d381f@ls/false) (if d381f@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid syntax-rules pattern" d3807@e d3813@pat)) d381f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d381d@t))) (d3066@syntax-dispatch d381d@t '_))) d3817@t))) (d3066@syntax-dispatch d3817@t '(_ . any)))) d3813@pat)) d380e@pat* d380f@tmp*)))))))) d380b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3809@t))) (d3066@syntax-dispatch d3809@t '(_ each-any . #(each (any any)))))) d3807@e))) (set! d3054@quasiquote-macro ((lambda () ((lambda (d3822@datum d383e@quasicons* d3840@quasicons d3842@quasiappend d3844@quasivector d3846@vquasi d3848@quasi) (begin (set! d3822@datum (lambda (d3923@x) (list (d2ff0@scheme-stx 'quote) (d2e43@mkstx d3923@x '() '() '())))) (set! d383e@quasicons* (lambda (d391b@x d391c@y) ((letrec ((d391f@f (lambda (d3921@x) (if (null? d3921@x) d391c@y (d3840@quasicons (car d3921@x) (d391f@f (cdr d3921@x))))))) d391f@f) d391b@x))) (set! d3840@quasicons (lambda (d38f5@x d38f6@y) ((lambda (d38f9@t) ((lambda (d38fb@ls/false) (if d38fb@ls/false (apply (lambda (d38fd@dy) ((lambda (d38ff@t) ((lambda (d3901@ls/false) (if d3901@ls/false (apply (lambda (d3903@dx) (list (d2ff0@scheme-stx 'quote) (cons d3903@dx d38fd@dy))) d3901@ls/false) ((lambda (d3905@t) ((lambda (d3907@ls/false) (if d3907@ls/false (apply (lambda () ((lambda (d3909@t) ((lambda (d390b@ls/false) (if d390b@ls/false (apply (lambda () (list (d2ff0@scheme-stx 'list) d38f5@x)) d390b@ls/false) ((lambda (d390d@t) ((lambda (d390f@ls/false) (if d390f@ls/false (apply (lambda () (list (d2ff0@scheme-stx 'cons) d38f5@x d38f6@y)) d390f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d390d@t))) (d3066@syntax-dispatch d390d@t '_))) d3909@t))) (d3066@syntax-dispatch d3909@t '()))) d38fd@dy)) d3907@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3905@t))) (d3066@syntax-dispatch d3905@t '_))) d38ff@t))) (d3066@syntax-dispatch d38ff@t '(#(scheme-id quote) any)))) d38f5@x)) d38fb@ls/false) ((lambda (d3911@t) ((lambda (d3913@ls/false) (if d3913@ls/false (apply (lambda (d3915@stuff) (cons* (d2ff0@scheme-stx 'list) d38f5@x d3915@stuff)) d3913@ls/false) ((lambda (d3917@t) ((lambda (d3919@ls/false) (if d3919@ls/false (apply (lambda () (list (d2ff0@scheme-stx 'cons) d38f5@x d38f6@y)) d3919@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3917@t))) (d3066@syntax-dispatch d3917@t '_))) d3911@t))) (d3066@syntax-dispatch d3911@t '(#(scheme-id list) . each-any)))) d38f9@t))) (d3066@syntax-dispatch d38f9@t '(#(scheme-id quote) any)))) d38f6@y))) (set! d3842@quasiappend (lambda (d38db@x d38dc@y) ((lambda (d38df@ls) (if (null? d38df@ls) (list (d2ff0@scheme-stx 'quote) '()) (if (null? (cdr d38df@ls)) (car d38df@ls) (cons* (d2ff0@scheme-stx 'append) d38df@ls)))) ((letrec ((d38e1@f (lambda (d38e3@x) (if (null? d38e3@x) ((lambda (d38e5@t) ((lambda (d38e7@ls/false) (if d38e7@ls/false (apply (lambda () '()) d38e7@ls/false) ((lambda (d38e9@t) ((lambda (d38eb@ls/false) (if d38eb@ls/false (apply (lambda () (list d38dc@y)) d38eb@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d38e9@t))) (d3066@syntax-dispatch d38e9@t '_))) d38e5@t))) (d3066@syntax-dispatch d38e5@t '(#(scheme-id quote) ())))) d38dc@y) ((lambda (d38ed@t) ((lambda (d38ef@ls/false) (if d38ef@ls/false (apply (lambda () (d38e1@f (cdr d38e3@x))) d38ef@ls/false) ((lambda (d38f1@t) ((lambda (d38f3@ls/false) (if d38f3@ls/false (apply (lambda () (cons (car d38e3@x) (d38e1@f (cdr d38e3@x)))) d38f3@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d38f1@t))) (d3066@syntax-dispatch d38f1@t '_))) d38ed@t))) (d3066@syntax-dispatch d38ed@t '(#(scheme-id quote) ())))) (car d38e3@x)))))) d38e1@f) d38db@x)))) (set! d3844@quasivector (lambda (d38a9@x) ((lambda (d38ab@pat-x) ((lambda (d38ad@t) ((lambda (d38af@ls/false) (if d38af@ls/false (apply (lambda (d38b1@x*) (list (d2ff0@scheme-stx 'quote) (list->vector d38b1@x*))) d38af@ls/false) ((lambda (d38b3@t) ((lambda (d38b5@ls/false) (if d38b5@ls/false (apply (lambda () ((letrec ((d38b7@f (lambda (d38b9@x d38ba@k) ((lambda (d38bd@t) ((lambda (d38bf@ls/false) (if d38bf@ls/false (apply (lambda (d38c1@x*) (d38ba@k (map (lambda (d38c3@x) (list (d2ff0@scheme-stx 'quote) d38c3@x)) d38c1@x*))) d38bf@ls/false) ((lambda (d38c5@t) ((lambda (d38c7@ls/false) (if d38c7@ls/false (apply (lambda (d38c9@x*) (d38ba@k d38c9@x*)) d38c7@ls/false) ((lambda (d38cb@t) ((lambda (d38cd@ls/false) (if d38cd@ls/false (apply (lambda (d38cf@x d38d0@y) (d38b7@f d38d0@y (lambda (d38d3@ls) (d38ba@k (cons d38cf@x d38d3@ls))))) d38cd@ls/false) ((lambda (d38d5@t) ((lambda (d38d7@ls/false) (if d38d7@ls/false (apply (lambda () (list (d2ff0@scheme-stx 'list->vector) d38ab@pat-x)) d38d7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d38d5@t))) (d3066@syntax-dispatch d38d5@t '_))) d38cb@t))) (d3066@syntax-dispatch d38cb@t '(#(scheme-id cons) any any)))) d38c5@t))) (d3066@syntax-dispatch d38c5@t '(#(scheme-id list) . each-any)))) d38bd@t))) (d3066@syntax-dispatch d38bd@t '(#(scheme-id quote) each-any)))) d38b9@x)))) d38b7@f) d38a9@x (lambda (d38d9@ls) (cons* (d2ff0@scheme-stx 'vector) d38d9@ls)))) d38b5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d38b3@t))) (d3066@syntax-dispatch d38b3@t '_))) d38ad@t))) (d3066@syntax-dispatch d38ad@t '(#(scheme-id quote) each-any)))) d38ab@pat-x)) d38a9@x))) (set! d3846@vquasi (lambda (d3887@p d3888@lev) ((lambda (d388b@t) ((lambda (d388d@ls/false) (if d388d@ls/false (apply (lambda (d388f@p d3890@q) ((lambda (d3893@t) ((lambda (d3895@ls/false) (if d3895@ls/false (apply (lambda (d3897@p) (if (= d3888@lev '0) (d383e@quasicons* d3897@p (d3846@vquasi d3890@q d3888@lev)) (d3840@quasicons (d3840@quasicons (d3822@datum 'unquote) (d3848@quasi d3897@p (- d3888@lev '1))) (d3846@vquasi d3890@q d3888@lev)))) d3895@ls/false) ((lambda (d3899@t) ((lambda (d389b@ls/false) (if d389b@ls/false (apply (lambda (d389d@p) (if (= d3888@lev '0) (d3842@quasiappend d389d@p (d3846@vquasi d3890@q d3888@lev)) (d3840@quasicons (d3840@quasicons (d3822@datum 'unquote-splicing) (d3848@quasi d389d@p (- d3888@lev '1))) (d3846@vquasi d3890@q d3888@lev)))) d389b@ls/false) ((lambda (d389f@t) ((lambda (d38a1@ls/false) (if d38a1@ls/false (apply (lambda (d38a3@p) (d3840@quasicons (d3848@quasi d38a3@p d3888@lev) (d3846@vquasi d3890@q d3888@lev))) d38a1@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d389f@t))) (d3066@syntax-dispatch d389f@t 'any))) d3899@t))) (d3066@syntax-dispatch d3899@t '(#(scheme-id unquote-splicing) . each-any)))) d3893@t))) (d3066@syntax-dispatch d3893@t '(#(scheme-id unquote) . each-any)))) d388f@p)) d388d@ls/false) ((lambda (d38a5@t) ((lambda (d38a7@ls/false) (if d38a7@ls/false (apply (lambda () (list (d2ff0@scheme-stx 'quote) '())) d38a7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d38a5@t))) (d3066@syntax-dispatch d38a5@t '()))) d388b@t))) (d3066@syntax-dispatch d388b@t '(any . any)))) d3887@p))) (set! d3848@quasi (lambda (d3851@p d3852@lev) ((lambda (d3855@t) ((lambda (d3857@ls/false) (if d3857@ls/false (apply (lambda (d3859@p) (if (= d3852@lev '0) d3859@p (d3840@quasicons (d3822@datum 'unquote) (d3848@quasi (list d3859@p) (- d3852@lev '1))))) d3857@ls/false) ((lambda (d385b@t) ((lambda (d385d@ls/false) (if d385d@ls/false (apply (lambda (d385f@p d3860@q) (if (= d3852@lev '0) (d383e@quasicons* d385f@p (d3848@quasi d3860@q d3852@lev)) (d3840@quasicons (d3840@quasicons (d3822@datum 'unquote) (d3848@quasi d385f@p (- d3852@lev '1))) (d3848@quasi d3860@q d3852@lev)))) d385d@ls/false) ((lambda (d3863@t) ((lambda (d3865@ls/false) (if d3865@ls/false (apply (lambda (d3867@p d3868@q) (if (= d3852@lev '0) (d3842@quasiappend d3867@p (d3848@quasi d3868@q d3852@lev)) (d3840@quasicons (d3840@quasicons (d3822@datum 'unquote-splicing) (d3848@quasi d3867@p (- d3852@lev '1))) (d3848@quasi d3868@q d3852@lev)))) d3865@ls/false) ((lambda (d386b@t) ((lambda (d386d@ls/false) (if d386d@ls/false (apply (lambda (d386f@p) (d3840@quasicons (d3822@datum 'quasiquote) (d3848@quasi (list d386f@p) (+ d3852@lev '1)))) d386d@ls/false) ((lambda (d3871@t) ((lambda (d3873@ls/false) (if d3873@ls/false (apply (lambda (d3875@p d3876@q) (d3840@quasicons (d3848@quasi d3875@p d3852@lev) (d3848@quasi d3876@q d3852@lev))) d3873@ls/false) ((lambda (d3879@t) ((lambda (d387b@ls/false) (if (and d387b@ls/false (apply (lambda (d387d@x) (not (d2e25@stx? d387d@x))) d387b@ls/false)) (apply (lambda (d387f@x) (d3844@quasivector (d3846@vquasi d387f@x d3852@lev))) d387b@ls/false) ((lambda (d3881@t) ((lambda (d3883@ls/false) (if d3883@ls/false (apply (lambda (d3885@p) (list (d2ff0@scheme-stx 'quote) d3885@p)) d3883@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3881@t))) (d3066@syntax-dispatch d3881@t 'any))) d3879@t))) (d3066@syntax-dispatch d3879@t '#(vector each-any)))) d3871@t))) (d3066@syntax-dispatch d3871@t '(any . any)))) d386b@t))) (d3066@syntax-dispatch d386b@t '(#(scheme-id quasiquote) any)))) d3863@t))) (d3066@syntax-dispatch d3863@t '((#(scheme-id unquote-splicing) . each-any) . any)))) d385b@t))) (d3066@syntax-dispatch d385b@t '((#(scheme-id unquote) . each-any) . any)))) d3855@t))) (d3066@syntax-dispatch d3855@t '(#(scheme-id unquote) any)))) d3851@p))) (lambda (d3849@x) ((lambda (d384b@t) ((lambda (d384d@ls/false) (if d384d@ls/false (apply (lambda (d384f@e) (d3848@quasi d384f@e '0)) d384d@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d384b@t))) (d3066@syntax-dispatch d384b@t '(_ any)))) d3849@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! d3056@quasisyntax-macro ((lambda () ((lambda (d3926@quasi) (begin (set! d3926@quasi (lambda (d3941@p d3942@lev) ((lambda (d3945@t) ((lambda (d3947@ls/false) (if d3947@ls/false (apply (lambda (d3949@p) (if (= d3942@lev '0) ((lambda (d394b@g) (values (list d394b@g) (list d3949@p) d394b@g)) (gensym)) (call-with-values (lambda () (d3926@quasi d3949@p (- d3942@lev '1))) (lambda (d3953@d394e d3954@d3950 d3955@d3952) ((lambda (d3959@p d395a@rhs* d395b@lhs*) (values d395b@lhs* d395a@rhs* (list 'unsyntax d3959@p))) d3955@d3952 d3954@d3950 d3953@d394e))))) d3947@ls/false) ((lambda (d395f@t) ((lambda (d3961@ls/false) (if (and d3961@ls/false (apply (lambda () (= d3942@lev '0)) d3961@ls/false)) (apply (lambda () (d3134@syntax-violation '#f '"incorrect use of unsyntax" d3941@p)) d3961@ls/false) ((lambda (d3963@t) ((lambda (d3965@ls/false) (if d3965@ls/false (apply (lambda (d3967@p* d3968@q) (call-with-values (lambda () (d3926@quasi d3968@q d3942@lev)) (lambda (d3971@d396c d3972@d396e d3973@d3970) ((lambda (d3977@q d3978@rhs* d3979@lhs*) (if (= d3942@lev '0) ((lambda (d397d@g*) (values (append d397d@g* d3979@lhs*) (append d3967@p* d3978@rhs*) (append d397d@g* d3977@q))) (map (lambda (d397f@x) (gensym)) d3967@p*)) (call-with-values (lambda () (d3926@quasi d3967@p* (- d3942@lev '1))) (lambda (d3987@d3982 d3988@d3984 d3989@d3986) ((lambda (d398d@p* d398e@rhs2* d398f@lhs2*) (values (append d398f@lhs2* d3979@lhs*) (append d398e@rhs2* d3978@rhs*) (cons (cons 'unsyntax d398d@p*) d3977@q))) d3989@d3986 d3988@d3984 d3987@d3982))))) d3973@d3970 d3972@d396e d3971@d396c)))) d3965@ls/false) ((lambda (d3993@t) ((lambda (d3995@ls/false) (if d3995@ls/false (apply (lambda (d3997@p* d3998@q) (call-with-values (lambda () (d3926@quasi d3998@q d3942@lev)) (lambda (d39a1@d399c d39a2@d399e d39a3@d39a0) ((lambda (d39a7@q d39a8@rhs* d39a9@lhs*) (if (= d3942@lev '0) ((lambda (d39ad@g*) (values (append (map (lambda (d39af@g) (cons d39af@g '(...))) d39ad@g*) d39a9@lhs*) (append d3997@p* d39a8@rhs*) (append (apply append (map (lambda (d39b1@g) (cons d39b1@g '(...))) d39ad@g*)) d39a7@q))) (map (lambda (d39b3@x) (gensym)) d3997@p*)) (call-with-values (lambda () (d3926@quasi d3997@p* (- d3942@lev '1))) (lambda (d39bb@d39b6 d39bc@d39b8 d39bd@d39ba) ((lambda (d39c1@p* d39c2@rhs2* d39c3@lhs2*) (values (append d39c3@lhs2* d39a9@lhs*) (append d39c2@rhs2* d39a8@rhs*) (cons (cons 'unsyntax-splicing d39c1@p*) d39a7@q))) d39bd@d39ba d39bc@d39b8 d39bb@d39b6))))) d39a3@d39a0 d39a2@d399e d39a1@d399c)))) d3995@ls/false) ((lambda (d39c7@t) ((lambda (d39c9@ls/false) (if (and d39c9@ls/false (apply (lambda () (= d3942@lev '0)) d39c9@ls/false)) (apply (lambda () (d3134@syntax-violation '#f '"incorrect use of unsyntax-splicing" d3941@p)) d39c9@ls/false) ((lambda (d39cb@t) ((lambda (d39cd@ls/false) (if d39cd@ls/false (apply (lambda (d39cf@p) (call-with-values (lambda () (d3926@quasi d39cf@p (+ d3942@lev '1))) (lambda (d39d7@d39d2 d39d8@d39d4 d39d9@d39d6) ((lambda (d39dd@p d39de@rhs* d39df@lhs*) (values d39df@lhs* d39de@rhs* (list 'quasisyntax d39dd@p))) d39d9@d39d6 d39d8@d39d4 d39d7@d39d2)))) d39cd@ls/false) ((lambda (d39e3@t) ((lambda (d39e5@ls/false) (if d39e5@ls/false (apply (lambda (d39e7@p d39e8@q) (call-with-values (lambda () (d3926@quasi d39e7@p d3942@lev)) (lambda (d39f7@d39ec d39f8@d39ee d39f9@d39f0) (call-with-values (lambda () (d3926@quasi d39e8@q d3942@lev)) (lambda (d39fd@d39f2 d39fe@d39f4 d39ff@d39f6) ((lambda (d3a03@q d3a04@rhs2* d3a05@lhs2* d3a06@p d3a07@rhs* d3a08@lhs*) (values (append d3a05@lhs2* d3a08@lhs*) (append d3a04@rhs2* d3a07@rhs*) (cons d3a06@p d3a03@q))) d39ff@d39f6 d39fe@d39f4 d39fd@d39f2 d39f9@d39f0 d39f8@d39ee d39f7@d39ec)))))) d39e5@ls/false) ((lambda (d3a0f@t) ((lambda (d3a11@ls/false) (if d3a11@ls/false (apply (lambda (d3a13@x*) (call-with-values (lambda () (d3926@quasi d3a13@x* d3942@lev)) (lambda (d3a1b@d3a16 d3a1c@d3a18 d3a1d@d3a1a) ((lambda (d3a21@x* d3a22@rhs* d3a23@lhs*) (values d3a23@lhs* d3a22@rhs* (list->vector d3a21@x*))) d3a1d@d3a1a d3a1c@d3a18 d3a1b@d3a16)))) d3a11@ls/false) ((lambda (d3a27@t) ((lambda (d3a29@ls/false) (if d3a29@ls/false (apply (lambda () (values '() '() d3941@p)) d3a29@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3a27@t))) (d3066@syntax-dispatch d3a27@t '_))) d3a0f@t))) (d3066@syntax-dispatch d3a0f@t '#(vector each-any)))) d39e3@t))) (d3066@syntax-dispatch d39e3@t '(any . any)))) d39cb@t))) (d3066@syntax-dispatch d39cb@t '(#(scheme-id quasisyntax) any)))) d39c7@t))) (d3066@syntax-dispatch d39c7@t '#(scheme-id unsyntax-splicing)))) d3993@t))) (d3066@syntax-dispatch d3993@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) d3963@t))) (d3066@syntax-dispatch d3963@t '((#(scheme-id unsyntax) . each-any) . any)))) d395f@t))) (d3066@syntax-dispatch d395f@t '#(scheme-id unsyntax)))) d3945@t))) (d3066@syntax-dispatch d3945@t '(#(scheme-id unsyntax) any)))) d3941@p))) (lambda (d3927@x) ((lambda (d3929@t) ((lambda (d392b@ls/false) (if d392b@ls/false (apply (lambda (d392d@e) (call-with-values (lambda () (d3926@quasi d392d@e '0)) (lambda (d3935@d3930 d3936@d3932 d3937@d3934) ((lambda (d393b@v d393c@rhs* d393d@lhs*) (d301c@bless (list 'syntax-case (cons 'list d393c@rhs*) '() (list d393d@lhs* (list 'syntax d393b@v))))) d3937@d3934 d3936@d3932 d3935@d3930)))) d392b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3929@t))) (d3066@syntax-dispatch d3929@t '(_ any)))) d3927@x)))) '#f)))) (set! d3058@define-struct-macro (lambda (d3a2b@stx) (d3134@syntax-violation '#f '"define-struct not supported" d3a2b@stx))) (set! d305a@define-record-type-macro (lambda (d3a2d@x) ((lambda (d3a30@id d3a32@get-record-name d3a34@get-record-constructor-name d3a36@get-record-predicate-name d3a38@get-clause d3a3a@foo-rtd-code d3a3c@parent-rtd-code d3a3e@parent-rcd-code d3a40@foo-rcd-code d3a42@get-protocol-code d3a44@get-fields d3a46@get-mutator-indices d3a48@get-mutators d3a4a@get-accessors d3a4c@enumerate d3a4e@do-define-record d3a50@verify-clauses) (begin (set! d3a30@id (lambda (d3c23@ctxt . d3c25@str*) (d3138@datum->syntax d3c23@ctxt (string->symbol (apply string-append (map (lambda (d3c27@x) (if (symbol? d3c27@x) (symbol->string d3c27@x) (if (string? d3c27@x) d3c27@x (assertion-violation 'define-record-type '"BUG")))) d3c25@str*)))))) (set! d3a32@get-record-name (lambda (d3c11@spec) ((lambda (d3c13@t) ((lambda (d3c15@ls/false) (if d3c15@ls/false (apply (lambda (d3c17@foo d3c18@make-foo d3c19@foo?) d3c17@foo) d3c15@ls/false) ((lambda (d3c1d@t) ((lambda (d3c1f@ls/false) (if d3c1f@ls/false (apply (lambda (d3c21@foo) d3c21@foo) d3c1f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3c1d@t))) (d3066@syntax-dispatch d3c1d@t 'any))) d3c13@t))) (d3066@syntax-dispatch d3c13@t '(any any any)))) d3c11@spec))) (set! d3a34@get-record-constructor-name (lambda (d3bfd@spec) ((lambda (d3bff@t) ((lambda (d3c01@ls/false) (if d3c01@ls/false (apply (lambda (d3c03@foo d3c04@make-foo d3c05@foo?) d3c04@make-foo) d3c01@ls/false) ((lambda (d3c09@t) ((lambda (d3c0b@ls/false) (if (and d3c0b@ls/false (apply (lambda (d3c0d@foo) (d2e5b@id? d3c0d@foo)) d3c0b@ls/false)) (apply (lambda (d3c0f@foo) (d3a30@id d3c0f@foo '"make-" (d2e71@stx->datum d3c0f@foo))) d3c0b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3c09@t))) (d3066@syntax-dispatch d3c09@t 'any))) d3bff@t))) (d3066@syntax-dispatch d3bff@t '(any any any)))) d3bfd@spec))) (set! d3a36@get-record-predicate-name (lambda (d3be9@spec) ((lambda (d3beb@t) ((lambda (d3bed@ls/false) (if d3bed@ls/false (apply (lambda (d3bef@foo d3bf0@make-foo d3bf1@foo?) d3bf1@foo?) d3bed@ls/false) ((lambda (d3bf5@t) ((lambda (d3bf7@ls/false) (if (and d3bf7@ls/false (apply (lambda (d3bf9@foo) (d2e5b@id? d3bf9@foo)) d3bf7@ls/false)) (apply (lambda (d3bfb@foo) (d3a30@id d3bfb@foo (d2e71@stx->datum d3bfb@foo) '"?")) d3bf7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3bf5@t))) (d3066@syntax-dispatch d3bf5@t 'any))) d3beb@t))) (d3066@syntax-dispatch d3beb@t '(any any any)))) d3be9@spec))) (set! d3a38@get-clause (lambda (d3bd7@id d3bd8@ls) ((lambda (d3bdb@t) ((lambda (d3bdd@ls/false) (if d3bdd@ls/false (apply (lambda () '#f) d3bdd@ls/false) ((lambda (d3bdf@t) ((lambda (d3be1@ls/false) (if d3be1@ls/false (apply (lambda (d3be3@x d3be4@rest d3be5@ls) (if (d2e63@free-id=? (d301c@bless d3bd7@id) d3be3@x) (cons d3be3@x d3be4@rest) (d3a38@get-clause d3bd7@id d3be5@ls))) d3be1@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3bdf@t))) (d3066@syntax-dispatch d3bdf@t '((any . any) . any)))) d3bdb@t))) (d3066@syntax-dispatch d3bdb@t '()))) d3bd8@ls))) (set! d3a3a@foo-rtd-code (lambda (d3b85@name d3b86@clause* d3b87@parent-rtd-code) ((lambda (d3b8c@convert-field-spec*) (begin (set! d3b8c@convert-field-spec* (lambda (d3bbd@ls) (list->vector (map (lambda (d3bbf@x) ((lambda (d3bc1@t) ((lambda (d3bc3@ls/false) (if d3bc3@ls/false (apply (lambda (d3bc5@name d3bc6@rest) (list 'mutable d3bc5@name)) d3bc3@ls/false) ((lambda (d3bc9@t) ((lambda (d3bcb@ls/false) (if d3bcb@ls/false (apply (lambda (d3bcd@name d3bce@rest) (list 'immutable d3bcd@name)) d3bcb@ls/false) ((lambda (d3bd1@t) ((lambda (d3bd3@ls/false) (if d3bd3@ls/false (apply (lambda (d3bd5@name) (list 'immutable d3bd5@name)) d3bd3@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3bd1@t))) (d3066@syntax-dispatch d3bd1@t 'any))) d3bc9@t))) (d3066@syntax-dispatch d3bc9@t '(#(scheme-id immutable) any . any)))) d3bc1@t))) (d3066@syntax-dispatch d3bc1@t '(#(scheme-id mutable) any . any)))) d3bbf@x)) d3bbd@ls)))) ((lambda (d3b8d@uid-code d3b8e@sealed? d3b8f@opaque? d3b90@fields) (d301c@bless (list 'make-record-type-descriptor (list 'quote d3b85@name) d3b87@parent-rtd-code d3b8d@uid-code d3b8e@sealed? d3b8f@opaque? d3b90@fields))) ((lambda (d3b95@t) ((lambda (d3b97@ls/false) (if d3b97@ls/false (apply (lambda () (list 'quote (gensym))) d3b97@ls/false) ((lambda (d3b99@t) ((lambda (d3b9b@ls/false) (if d3b9b@ls/false (apply (lambda (d3b9d@uid) (list 'quote d3b9d@uid)) d3b9b@ls/false) ((lambda (d3b9f@t) ((lambda (d3ba1@ls/false) (if d3ba1@ls/false (apply (lambda () '#f) d3ba1@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b9f@t))) (d3066@syntax-dispatch d3b9f@t '_))) d3b99@t))) (d3066@syntax-dispatch d3b99@t '(_ any)))) d3b95@t))) (d3066@syntax-dispatch d3b95@t '(_)))) (d3a38@get-clause 'nongenerative d3b86@clause*)) ((lambda (d3ba3@t) ((lambda (d3ba5@ls/false) (if d3ba5@ls/false (apply (lambda () '#t) d3ba5@ls/false) ((lambda (d3ba7@t) ((lambda (d3ba9@ls/false) (if d3ba9@ls/false (apply (lambda () '#f) d3ba9@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3ba7@t))) (d3066@syntax-dispatch d3ba7@t '_))) d3ba3@t))) (d3066@syntax-dispatch d3ba3@t '(_ #(atom #t))))) (d3a38@get-clause 'sealed d3b86@clause*)) ((lambda (d3bab@t) ((lambda (d3bad@ls/false) (if d3bad@ls/false (apply (lambda () '#t) d3bad@ls/false) ((lambda (d3baf@t) ((lambda (d3bb1@ls/false) (if d3bb1@ls/false (apply (lambda () '#f) d3bb1@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3baf@t))) (d3066@syntax-dispatch d3baf@t '_))) d3bab@t))) (d3066@syntax-dispatch d3bab@t '(_ #(atom #t))))) (d3a38@get-clause 'opaque d3b86@clause*)) ((lambda (d3bb3@t) ((lambda (d3bb5@ls/false) (if d3bb5@ls/false (apply (lambda (d3bb7@field-spec*) (list 'quote (d3b8c@convert-field-spec* d3bb7@field-spec*))) d3bb5@ls/false) ((lambda (d3bb9@t) ((lambda (d3bbb@ls/false) (if d3bbb@ls/false (apply (lambda () ''#()) d3bbb@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3bb9@t))) (d3066@syntax-dispatch d3bb9@t '_))) d3bb3@t))) (d3066@syntax-dispatch d3bb3@t '(_ . each-any)))) (d3a38@get-clause 'fields d3b86@clause*))))) '#f))) (set! d3a3c@parent-rtd-code (lambda (d3b6d@clause*) ((lambda (d3b6f@t) ((lambda (d3b71@ls/false) (if d3b71@ls/false (apply (lambda (d3b73@name) (list 'record-type-descriptor d3b73@name)) d3b71@ls/false) ((lambda (d3b75@t) ((lambda (d3b77@ls/false) (if d3b77@ls/false (apply (lambda () ((lambda (d3b79@t) ((lambda (d3b7b@ls/false) (if d3b7b@ls/false (apply (lambda (d3b7d@rtd d3b7e@rcd) d3b7d@rtd) d3b7b@ls/false) ((lambda (d3b81@t) ((lambda (d3b83@ls/false) (if d3b83@ls/false (apply (lambda () '#f) d3b83@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b81@t))) (d3066@syntax-dispatch d3b81@t '#(atom #f)))) d3b79@t))) (d3066@syntax-dispatch d3b79@t '(_ any any)))) (d3a38@get-clause 'parent-rtd d3b6d@clause*))) d3b77@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b75@t))) (d3066@syntax-dispatch d3b75@t '#(atom #f)))) d3b6f@t))) (d3066@syntax-dispatch d3b6f@t '(_ any)))) (d3a38@get-clause 'parent d3b6d@clause*)))) (set! d3a3e@parent-rcd-code (lambda (d3b55@clause*) ((lambda (d3b57@t) ((lambda (d3b59@ls/false) (if d3b59@ls/false (apply (lambda (d3b5b@name) (list 'record-constructor-descriptor d3b5b@name)) d3b59@ls/false) ((lambda (d3b5d@t) ((lambda (d3b5f@ls/false) (if d3b5f@ls/false (apply (lambda () ((lambda (d3b61@t) ((lambda (d3b63@ls/false) (if d3b63@ls/false (apply (lambda (d3b65@rtd d3b66@rcd) d3b66@rcd) d3b63@ls/false) ((lambda (d3b69@t) ((lambda (d3b6b@ls/false) (if d3b6b@ls/false (apply (lambda () '#f) d3b6b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b69@t))) (d3066@syntax-dispatch d3b69@t '#(atom #f)))) d3b61@t))) (d3066@syntax-dispatch d3b61@t '(_ any any)))) (d3a38@get-clause 'parent-rtd d3b55@clause*))) d3b5f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b5d@t))) (d3066@syntax-dispatch d3b5d@t '#(atom #f)))) d3b57@t))) (d3066@syntax-dispatch d3b57@t '(_ any)))) (d3a38@get-clause 'parent d3b55@clause*)))) (set! d3a40@foo-rcd-code (lambda (d3b4d@clause* d3b4e@foo-rtd d3b4f@protocol d3b50@parent-rcd-code) (list 'make-record-constructor-descriptor d3b4e@foo-rtd d3b50@parent-rcd-code d3b4f@protocol))) (set! d3a42@get-protocol-code (lambda (d3b41@clause*) ((lambda (d3b43@t) ((lambda (d3b45@ls/false) (if d3b45@ls/false (apply (lambda (d3b47@expr) d3b47@expr) d3b45@ls/false) ((lambda (d3b49@t) ((lambda (d3b4b@ls/false) (if d3b4b@ls/false (apply (lambda () '#f) d3b4b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b49@t))) (d3066@syntax-dispatch d3b49@t '_))) d3b43@t))) (d3066@syntax-dispatch d3b43@t '(_ any)))) (d3a38@get-clause 'protocol d3b41@clause*)))) (set! d3a44@get-fields (lambda (d3b2f@clause*) ((lambda (d3b31@t) ((lambda (d3b33@ls/false) (if d3b33@ls/false (apply (lambda () '()) d3b33@ls/false) ((lambda (d3b35@t) ((lambda (d3b37@ls/false) (if d3b37@ls/false (apply (lambda (d3b39@f*) d3b39@f*) d3b37@ls/false) ((lambda (d3b3b@t) ((lambda (d3b3d@ls/false) (if d3b3d@ls/false (apply (lambda (d3b3f@rest) (d3a44@get-fields d3b3f@rest)) d3b3d@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b3b@t))) (d3066@syntax-dispatch d3b3b@t '(_ . any)))) d3b35@t))) (d3066@syntax-dispatch d3b35@t '((#(scheme-id fields) . each-any) . _)))) d3b31@t))) (d3066@syntax-dispatch d3b31@t '()))) d3b2f@clause*))) (set! d3a46@get-mutator-indices (lambda (d3b17@fields) ((letrec ((d3b19@f (lambda (d3b1b@fields d3b1c@i) ((lambda (d3b1f@t) ((lambda (d3b21@ls/false) (if d3b21@ls/false (apply (lambda () '()) d3b21@ls/false) ((lambda (d3b23@t) ((lambda (d3b25@ls/false) (if d3b25@ls/false (apply (lambda (d3b27@rest) (cons d3b1c@i (d3b19@f d3b27@rest (+ d3b1c@i '1)))) d3b25@ls/false) ((lambda (d3b29@t) ((lambda (d3b2b@ls/false) (if d3b2b@ls/false (apply (lambda (d3b2d@rest) (d3b19@f d3b2d@rest (+ d3b1c@i '1))) d3b2b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b29@t))) (d3066@syntax-dispatch d3b29@t '(_ . any)))) d3b23@t))) (d3066@syntax-dispatch d3b23@t '((#(scheme-id mutable) . _) . any)))) d3b1f@t))) (d3066@syntax-dispatch d3b1f@t '()))) d3b1b@fields)))) d3b19@f) d3b17@fields '0))) (set! d3a48@get-mutators (lambda (d3aed@foo d3aee@fields) ((lambda (d3af2@gen-name) (begin (set! d3af2@gen-name (lambda (d3b15@x) (d3138@datum->syntax d3aed@foo (string->symbol (string-append (symbol->string (d313a@syntax->datum d3aed@foo)) '"-" (symbol->string (d313a@syntax->datum d3b15@x)) '"-set!"))))) ((letrec ((d3af3@f (lambda (d3af5@fields) ((lambda (d3af7@t) ((lambda (d3af9@ls/false) (if d3af9@ls/false (apply (lambda () '()) d3af9@ls/false) ((lambda (d3afb@t) ((lambda (d3afd@ls/false) (if d3afd@ls/false (apply (lambda (d3aff@name d3b00@accessor d3b01@mutator d3b02@rest) (cons d3b01@mutator (d3af3@f d3b02@rest))) d3afd@ls/false) ((lambda (d3b07@t) ((lambda (d3b09@ls/false) (if d3b09@ls/false (apply (lambda (d3b0b@name d3b0c@rest) (cons (d3af2@gen-name d3b0b@name) (d3af3@f d3b0c@rest))) d3b09@ls/false) ((lambda (d3b0f@t) ((lambda (d3b11@ls/false) (if d3b11@ls/false (apply (lambda (d3b13@rest) (d3af3@f d3b13@rest)) d3b11@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3b0f@t))) (d3066@syntax-dispatch d3b0f@t '(_ . any)))) d3b07@t))) (d3066@syntax-dispatch d3b07@t '((#(scheme-id mutable) any) . any)))) d3afb@t))) (d3066@syntax-dispatch d3afb@t '((#(scheme-id mutable) any any any) . any)))) d3af7@t))) (d3066@syntax-dispatch d3af7@t '()))) d3af5@fields)))) d3af3@f) d3aee@fields))) '#f))) (set! d3a4a@get-accessors (lambda (d3aa9@foo d3aaa@fields) ((lambda (d3aae@gen-name) (begin (set! d3aae@gen-name (lambda (d3aeb@x) (d3138@datum->syntax d3aa9@foo (string->symbol (string-append (symbol->string (d313a@syntax->datum d3aa9@foo)) '"-" (symbol->string (d313a@syntax->datum d3aeb@x))))))) (map (lambda (d3aaf@field) ((lambda (d3ab1@t) ((lambda (d3ab3@ls/false) (if (and d3ab3@ls/false (apply (lambda (d3ab5@name d3ab6@accessor d3ab7@mutator) (d2e5b@id? d3ab6@accessor)) d3ab3@ls/false)) (apply (lambda (d3abb@name d3abc@accessor d3abd@mutator) d3abc@accessor) d3ab3@ls/false) ((lambda (d3ac1@t) ((lambda (d3ac3@ls/false) (if (and d3ac3@ls/false (apply (lambda (d3ac5@name d3ac6@accessor) (d2e5b@id? d3ac6@accessor)) d3ac3@ls/false)) (apply (lambda (d3ac9@name d3aca@accessor) d3aca@accessor) d3ac3@ls/false) ((lambda (d3acd@t) ((lambda (d3acf@ls/false) (if (and d3acf@ls/false (apply (lambda (d3ad1@name) (d2e5b@id? d3ad1@name)) d3acf@ls/false)) (apply (lambda (d3ad3@name) (d3aae@gen-name d3ad3@name)) d3acf@ls/false) ((lambda (d3ad5@t) ((lambda (d3ad7@ls/false) (if (and d3ad7@ls/false (apply (lambda (d3ad9@name) (d2e5b@id? d3ad9@name)) d3ad7@ls/false)) (apply (lambda (d3adb@name) (d3aae@gen-name d3adb@name)) d3ad7@ls/false) ((lambda (d3add@t) ((lambda (d3adf@ls/false) (if (and d3adf@ls/false (apply (lambda (d3ae1@name) (d2e5b@id? d3ae1@name)) d3adf@ls/false)) (apply (lambda (d3ae3@name) (d3aae@gen-name d3ae3@name)) d3adf@ls/false) ((lambda (d3ae5@t) ((lambda (d3ae7@ls/false) (if d3ae7@ls/false (apply (lambda (d3ae9@others) (d3134@syntax-violation '#f '"invalid field spec" d3aaf@field)) d3ae7@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3ae5@t))) (d3066@syntax-dispatch d3ae5@t 'any))) d3add@t))) (d3066@syntax-dispatch d3add@t 'any))) d3ad5@t))) (d3066@syntax-dispatch d3ad5@t '(#(scheme-id immutable) any)))) d3acd@t))) (d3066@syntax-dispatch d3acd@t '(#(scheme-id mutable) any)))) d3ac1@t))) (d3066@syntax-dispatch d3ac1@t '(#(scheme-id immutable) any any)))) d3ab1@t))) (d3066@syntax-dispatch d3ab1@t '(#(scheme-id mutable) any any any)))) d3aaf@field)) d3aaa@fields))) '#f))) (set! d3a4c@enumerate (lambda (d3aa1@ls) ((letrec ((d3aa3@f (lambda (d3aa5@ls d3aa6@i) (if (null? d3aa5@ls) '() (cons d3aa6@i (d3aa3@f (cdr d3aa5@ls) (+ d3aa6@i '1))))))) d3aa3@f) d3aa1@ls '0))) (set! d3a4e@do-define-record (lambda (d3a79@namespec d3a7a@clause*) ((lambda (d3a7d@foo) ((lambda (d3a7f@foo-rtd) ((lambda (d3a81@foo-rcd) ((lambda (d3a83@protocol) ((lambda (d3a85@make-foo) ((lambda (d3a87@fields) ((lambda (d3a89@idx*) ((lambda (d3a8b@foo-x*) ((lambda (d3a8d@set-foo-x!*) ((lambda (d3a8f@set-foo-idx*) ((lambda (d3a91@foo?) ((lambda (d3a93@foo-rtd-code) ((lambda (d3a95@foo-rcd-code) ((lambda (d3a97@protocol-code) ((lambda () (d301c@bless (cons 'begin (cons (list 'define d3a7f@foo-rtd d3a93@foo-rtd-code) (cons (list 'define d3a83@protocol d3a97@protocol-code) (cons (list 'define d3a81@foo-rcd d3a95@foo-rcd-code) (cons (list 'define-syntax d3a7d@foo (list 'list ''$rtd (list 'syntax d3a7f@foo-rtd) (list 'syntax d3a81@foo-rcd))) (cons (list 'define d3a91@foo? (list 'record-predicate d3a7f@foo-rtd)) (cons (list 'define d3a85@make-foo (list 'record-constructor d3a81@foo-rcd)) (append (map (lambda (d3a99@foo-x d3a9a@idx) (list 'define d3a99@foo-x (list 'record-accessor d3a7f@foo-rtd d3a9a@idx))) d3a8b@foo-x* d3a89@idx*) (map (lambda (d3a9d@set-foo-x! d3a9e@idx) (list 'define d3a9d@set-foo-x! (list 'record-mutator d3a7f@foo-rtd d3a9e@idx))) d3a8d@set-foo-x!* d3a8f@set-foo-idx*))))))))))))) (d3a42@get-protocol-code d3a7a@clause*))) (d3a40@foo-rcd-code d3a7a@clause* d3a7f@foo-rtd d3a83@protocol (d3a3e@parent-rcd-code d3a7a@clause*)))) (d3a3a@foo-rtd-code d3a7d@foo d3a7a@clause* (d3a3c@parent-rtd-code d3a7a@clause*)))) (d3a36@get-record-predicate-name d3a79@namespec))) (d3a46@get-mutator-indices d3a87@fields))) (d3a48@get-mutators d3a7d@foo d3a87@fields))) (d3a4a@get-accessors d3a7d@foo d3a87@fields))) (d3a4c@enumerate d3a87@fields))) (d3a44@get-fields d3a7a@clause*))) (d3a34@get-record-constructor-name d3a79@namespec))) (gensym))) (gensym))) (gensym))) (d3a32@get-record-name d3a79@namespec)))) (set! d3a50@verify-clauses (lambda (d3a59@x d3a5a@cls*) ((lambda (d3a5e@valid-kwds d3a60@free-id-member?) (begin (set! d3a5e@valid-kwds (map d301c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! d3a60@free-id-member? (lambda (d3a75@x d3a76@ls) (and (pair? d3a76@ls) (or (d2e63@free-id=? d3a75@x (car d3a76@ls)) (d3a60@free-id-member? d3a75@x (cdr d3a76@ls)))))) ((letrec ((d3a61@f (lambda (d3a63@cls* d3a64@seen*) (if (not (null? d3a63@cls*)) ((lambda (d3a67@t) ((lambda (d3a69@ls/false) (if d3a69@ls/false (apply (lambda (d3a6b@kwd d3a6c@rest) (if (or (not (d2e5b@id? d3a6b@kwd)) (not (d3a60@free-id-member? d3a6b@kwd d3a5e@valid-kwds))) (d3134@syntax-violation '#f '"not a valid define-record-type keyword" d3a6b@kwd) (if (d2e69@bound-id-member? d3a6b@kwd d3a64@seen*) (d3134@syntax-violation '#f '"duplicate use of keyword " d3a59@x d3a6b@kwd) (d3a61@f (cdr d3a63@cls*) (cons d3a6b@kwd d3a64@seen*))))) d3a69@ls/false) ((lambda (d3a6f@t) ((lambda (d3a71@ls/false) (if d3a71@ls/false (apply (lambda (d3a73@cls) (d3134@syntax-violation '#f '"malformed define-record-type clause" d3a73@cls)) d3a71@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3a6f@t))) (d3066@syntax-dispatch d3a6f@t 'any))) d3a67@t))) (d3066@syntax-dispatch d3a67@t '(any . any)))) (car d3a63@cls*)) (void))))) d3a61@f) d3a5a@cls* '()))) '#f '#f))) ((lambda (d3a51@t) ((lambda (d3a53@ls/false) (if d3a53@ls/false (apply (lambda (d3a55@namespec d3a56@clause*) (begin (d3a50@verify-clauses d3a2d@x d3a56@clause*) (d3a4e@do-define-record d3a55@namespec d3a56@clause*))) d3a53@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3a51@t))) (d3066@syntax-dispatch d3a51@t '(_ any . each-any)))) d3a2d@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! d305c@define-condition-type-macro (lambda (d3c29@x) ((lambda (d3c2c@mkname) (begin (set! d3c2c@mkname (lambda (d3c59@name d3c5a@suffix) (d3138@datum->syntax d3c59@name (string->symbol (string-append (symbol->string (d313a@syntax->datum d3c59@name)) d3c5a@suffix))))) ((lambda (d3c2d@t) ((lambda (d3c2f@ls/false) (if (and d3c2f@ls/false (apply (lambda (d3c31@ctxt d3c32@name d3c33@super d3c34@constructor d3c35@predicate d3c36@field* d3c37@accessor*) (and (d2e5b@id? d3c32@name) (d2e5b@id? d3c33@super) (d2e5b@id? d3c34@constructor) (d2e5b@id? d3c35@predicate) (for-all d2e5b@id? d3c36@field*) (for-all d2e5b@id? d3c37@accessor*))) d3c2f@ls/false)) (apply (lambda (d3c3f@ctxt d3c40@name d3c41@super d3c42@constructor d3c43@predicate d3c44@field* d3c45@accessor*) ((lambda (d3c4d@aux-accessor*) (d301c@bless (cons 'begin (cons (cons 'define-record-type (cons (list d3c40@name d3c42@constructor (gensym)) (cons (list 'parent d3c41@super) (cons (cons 'fields (map (lambda (d3c4f@field d3c50@aux) (list 'immutable d3c4f@field d3c50@aux)) d3c44@field* d3c4d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define d3c43@predicate (list 'condition-predicate (list 'record-type-descriptor d3c40@name))) (map (lambda (d3c53@accessor d3c54@aux) (list 'define d3c53@accessor (list 'condition-accessor (list 'record-type-descriptor d3c40@name) d3c54@aux))) d3c45@accessor* d3c4d@aux-accessor*)))))) (map (lambda (d3c57@x) (gensym)) d3c45@accessor*))) d3c2f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3c2d@t))) (d3066@syntax-dispatch d3c2d@t '(any any any any any . #(each (any any)))))) d3c29@x))) '#f))) (set! d305e@incorrect-usage-macro (lambda (d3c5d@e) (d3134@syntax-violation '#f '"incorrect usage of auxiliary keyword" d3c5d@e))) (set! d3060@parameterize-macro (lambda (d3c5f@e) ((lambda (d3c61@t) ((lambda (d3c63@ls/false) (if d3c63@ls/false (apply (lambda (d3c65@b d3c66@b*) (d301c@bless (cons 'let (cons '() (cons d3c65@b d3c66@b*))))) d3c63@ls/false) ((lambda (d3c69@t) ((lambda (d3c6b@ls/false) (if d3c6b@ls/false (apply (lambda (d3c6d@olhs* d3c6e@orhs* d3c6f@b d3c70@b*) ((lambda (d3c75@lhs* d3c76@rhs*) (d301c@bless (cons (list 'lambda (append d3c75@lhs* d3c76@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (d3c79@lhs d3c7a@rhs) (list 'let (list (list 't (list d3c79@lhs))) (list d3c79@lhs d3c7a@rhs) (cons 'set! (cons d3c7a@rhs '(t))))) d3c75@lhs* d3c76@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons d3c6f@b d3c70@b*))) '(swap)))))) (append d3c6d@olhs* d3c6e@orhs*)))) (d3122@generate-temporaries d3c6d@olhs*) (d3122@generate-temporaries d3c6e@orhs*))) d3c6b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3c69@t))) (d3066@syntax-dispatch d3c69@t '(_ #(each (any any)) any . each-any)))) d3c61@t))) (d3066@syntax-dispatch d3c61@t '(_ () any . each-any)))) d3c5f@e))) (set! d3062@foreign-call-transformer (lambda (d3c7d@e d3c7e@r d3c7f@mr) ((lambda (d3c83@t) ((lambda (d3c85@ls/false) (if d3c85@ls/false (apply (lambda (d3c87@name d3c88@arg*) (cons 'foreign-call (cons (d3088@chi-expr d3c87@name d3c7e@r d3c7f@mr) (d3084@chi-expr* d3c88@arg* d3c7e@r d3c7f@mr)))) d3c85@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3c83@t))) (d3066@syntax-dispatch d3c83@t '(_ any . each-any)))) d3c7d@e))) (set! d3064@convert-pattern (lambda (d3c8b@pattern d3c8c@keys) ((lambda (d3c90@cvt* d3c92@cvt) (begin (set! d3c90@cvt* (lambda (d3d2f@p* d3d30@n d3d31@ids) (if (null? d3d2f@p*) (values '() d3d31@ids) (call-with-values (lambda () (d3c90@cvt* (cdr d3d2f@p*) d3d30@n d3d31@ids)) (lambda (d3d39@d3d36 d3d3a@d3d38) ((lambda (d3d3d@ids d3d3e@y) (call-with-values (lambda () (d3c92@cvt (car d3d2f@p*) d3d30@n d3d3d@ids)) (lambda (d3d45@d3d42 d3d46@d3d44) ((lambda (d3d49@ids d3d4a@x) (values (cons d3d4a@x d3d3e@y) d3d49@ids)) d3d46@d3d44 d3d45@d3d42)))) d3d3a@d3d38 d3d39@d3d36)))))) (set! d3c92@cvt (lambda (d3c93@p d3c94@n d3c95@ids) ((lambda (d3c99@t) ((lambda (d3c9b@ls/false) (if (and d3c9b@ls/false (apply (lambda (d3c9d@id) (d2e5b@id? d3c9d@id)) d3c9b@ls/false)) (apply (lambda (d3c9f@id) (if (d2e69@bound-id-member? d3c93@p d3c8c@keys) (values (vector 'free-id d3c93@p) d3c95@ids) (if (d2e63@free-id=? d3c93@p (d2ff0@scheme-stx '_)) (values '_ d3c95@ids) (values 'any (cons (cons d3c93@p d3c94@n) d3c95@ids))))) d3c9b@ls/false) ((lambda (d3ca1@t) ((lambda (d3ca3@ls/false) (if (and d3ca3@ls/false (apply (lambda (d3ca5@p d3ca6@dots) (d3068@ellipsis? d3ca6@dots)) d3ca3@ls/false)) (apply (lambda (d3ca9@p d3caa@dots) (call-with-values (lambda () (d3c92@cvt d3ca9@p (+ d3c94@n '1) d3c95@ids)) (lambda (d3cb1@d3cae d3cb2@d3cb0) ((lambda (d3cb5@ids d3cb6@p) (values (if (eq? d3cb6@p 'any) 'each-any (vector 'each d3cb6@p)) d3cb5@ids)) d3cb2@d3cb0 d3cb1@d3cae)))) d3ca3@ls/false) ((lambda (d3cb9@t) ((lambda (d3cbb@ls/false) (if (and d3cbb@ls/false (apply (lambda (d3cbd@x d3cbe@dots d3cbf@ys d3cc0@z) (d3068@ellipsis? d3cbe@dots)) d3cbb@ls/false)) (apply (lambda (d3cc5@x d3cc6@dots d3cc7@ys d3cc8@z) (call-with-values (lambda () (d3c92@cvt d3cc8@z d3c94@n d3c95@ids)) (lambda (d3cd1@d3cce d3cd2@d3cd0) ((lambda (d3cd5@ids d3cd6@z) (call-with-values (lambda () (d3c90@cvt* d3cc7@ys d3c94@n d3cd5@ids)) (lambda (d3cdd@d3cda d3cde@d3cdc) ((lambda (d3ce1@ids d3ce2@ys) (call-with-values (lambda () (d3c92@cvt d3cc5@x (+ d3c94@n '1) d3ce1@ids)) (lambda (d3ce9@d3ce6 d3cea@d3ce8) ((lambda (d3ced@ids d3cee@x) (values (vector 'each+ d3cee@x (reverse d3ce2@ys) d3cd6@z) d3ced@ids)) d3cea@d3ce8 d3ce9@d3ce6)))) d3cde@d3cdc d3cdd@d3cda)))) d3cd2@d3cd0 d3cd1@d3cce)))) d3cbb@ls/false) ((lambda (d3cf1@t) ((lambda (d3cf3@ls/false) (if d3cf3@ls/false (apply (lambda (d3cf5@x d3cf6@y) (call-with-values (lambda () (d3c92@cvt d3cf6@y d3c94@n d3c95@ids)) (lambda (d3cfd@d3cfa d3cfe@d3cfc) ((lambda (d3d01@ids d3d02@y) (call-with-values (lambda () (d3c92@cvt d3cf5@x d3c94@n d3d01@ids)) (lambda (d3d09@d3d06 d3d0a@d3d08) ((lambda (d3d0d@ids d3d0e@x) (values (cons d3d0e@x d3d02@y) d3d0d@ids)) d3d0a@d3d08 d3d09@d3d06)))) d3cfe@d3cfc d3cfd@d3cfa)))) d3cf3@ls/false) ((lambda (d3d11@t) ((lambda (d3d13@ls/false) (if d3d13@ls/false (apply (lambda () (values '() d3c95@ids)) d3d13@ls/false) ((lambda (d3d15@t) ((lambda (d3d17@ls/false) (if (and d3d17@ls/false (apply (lambda (d3d19@p) (not (d2e25@stx? d3d19@p))) d3d17@ls/false)) (apply (lambda (d3d1b@p) (call-with-values (lambda () (d3c92@cvt d3d1b@p d3c94@n d3c95@ids)) (lambda (d3d21@d3d1e d3d22@d3d20) ((lambda (d3d25@ids d3d26@p) (values (vector 'vector d3d26@p) d3d25@ids)) d3d22@d3d20 d3d21@d3d1e)))) d3d17@ls/false) ((lambda (d3d29@t) ((lambda (d3d2b@ls/false) (if d3d2b@ls/false (apply (lambda (d3d2d@datum) (values (vector 'atom (d2e71@stx->datum d3d2d@datum)) d3c95@ids)) d3d2b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3d29@t))) (d3066@syntax-dispatch d3d29@t 'any))) d3d15@t))) (d3066@syntax-dispatch d3d15@t '#(vector each-any)))) d3d11@t))) (d3066@syntax-dispatch d3d11@t '()))) d3cf1@t))) (d3066@syntax-dispatch d3cf1@t '(any . any)))) d3cb9@t))) (d3066@syntax-dispatch d3cb9@t '(any any . #(each+ any () any))))) d3ca1@t))) (d3066@syntax-dispatch d3ca1@t '(any any)))) d3c99@t))) (d3066@syntax-dispatch d3c99@t 'any))) d3c93@p))) (d3c92@cvt d3c8b@pattern '0 '()))) '#f '#f))) (set! d3066@syntax-dispatch ((lambda () ((lambda (d3d4e@stx^ d3d50@match-each d3d52@match-each+ d3d54@match-each-any d3d56@match-empty d3d58@combine d3d5a@match* d3d5c@match) (begin (set! d3d4e@stx^ (lambda (d3e29@e d3e2a@m* d3e2b@s* d3e2c@ae*) (if (and (null? d3e2a@m*) (null? d3e2b@s*) (null? d3e2c@ae*)) d3e29@e (d2e43@mkstx d3e29@e d3e2a@m* d3e2b@s* d3e2c@ae*)))) (set! d3d50@match-each (lambda (d3e09@e d3e0a@p d3e0b@m* d3e0c@s* d3e0d@ae*) (if (pair? d3e09@e) ((lambda (d3e13@first) (and d3e13@first ((lambda (d3e15@rest) (and d3e15@rest (cons d3e13@first d3e15@rest))) (d3d50@match-each (cdr d3e09@e) d3e0a@p d3e0b@m* d3e0c@s* d3e0d@ae*)))) (d3d5c@match (car d3e09@e) d3e0a@p d3e0b@m* d3e0c@s* d3e0d@ae* '())) (if (null? d3e09@e) '() (if (d2e25@stx? d3e09@e) (and (not (d2deb@top-marked? d3e0b@m*)) (call-with-values (lambda () (d2e41@join-wraps d3e0b@m* d3e0c@s* d3e0d@ae* d3e09@e)) (lambda (d3e1d@d3e18 d3e1e@d3e1a d3e1f@d3e1c) ((lambda (d3e23@ae* d3e24@s* d3e25@m*) (d3d50@match-each (d2e27@stx-expr d3e09@e) d3e0a@p d3e25@m* d3e24@s* d3e23@ae*)) d3e1f@d3e1c d3e1e@d3e1a d3e1d@d3e18)))) (if (d29b6@d28a7@annotation? d3e09@e) (d3d50@match-each (d29b8@d28ab@annotation-expression d3e09@e) d3e0a@p d3e0b@m* d3e0c@s* d3e0d@ae*) '#f)))))) (set! d3d52@match-each+ (lambda (d3dc9@e d3dca@x-pat d3dcb@y-pat d3dcc@z-pat d3dcd@m* d3dce@s* d3dcf@ae* d3dd0@r) ((letrec ((d3dd9@f (lambda (d3ddb@e d3ddc@m* d3ddd@s* d3dde@ae*) (if (pair? d3ddb@e) (call-with-values (lambda () (d3dd9@f (cdr d3ddb@e) d3ddc@m* d3ddd@s* d3dde@ae*)) (lambda (d3de9@d3de4 d3dea@d3de6 d3deb@d3de8) ((lambda (d3def@r d3df0@y-pat d3df1@xr*) (if d3def@r (if (null? d3df0@y-pat) ((lambda (d3df5@xr) (if d3df5@xr (values (cons d3df5@xr d3df1@xr*) d3df0@y-pat d3def@r) (values '#f '#f '#f))) (d3d5c@match (car d3ddb@e) d3dca@x-pat d3ddc@m* d3ddd@s* d3dde@ae* '())) (values '() (cdr d3df0@y-pat) (d3d5c@match (car d3ddb@e) (car d3df0@y-pat) d3ddc@m* d3ddd@s* d3dde@ae* d3def@r))) (values '#f '#f '#f))) d3deb@d3de8 d3dea@d3de6 d3de9@d3de4))) (if (d2e25@stx? d3ddb@e) (if (d2deb@top-marked? d3ddc@m*) (values '() d3dcb@y-pat (d3d5c@match d3ddb@e d3dcc@z-pat d3ddc@m* d3ddd@s* d3dde@ae* d3dd0@r)) (call-with-values (lambda () (d2e41@join-wraps d3ddc@m* d3ddd@s* d3dde@ae* d3ddb@e)) (lambda (d3dfd@d3df8 d3dfe@d3dfa d3dff@d3dfc) ((lambda (d3e03@ae* d3e04@s* d3e05@m*) (d3dd9@f (d2e27@stx-expr d3ddb@e) d3e05@m* d3e04@s* d3e03@ae*)) d3dff@d3dfc d3dfe@d3dfa d3dfd@d3df8)))) (if (d29b6@d28a7@annotation? d3ddb@e) (d3dd9@f (d29b8@d28ab@annotation-expression d3ddb@e) d3ddc@m* d3ddd@s* d3dde@ae*) (values '() d3dcb@y-pat (d3d5c@match d3ddb@e d3dcc@z-pat d3ddc@m* d3ddd@s* d3dde@ae* d3dd0@r)))))))) d3dd9@f) d3dc9@e d3dcd@m* d3dce@s* d3dcf@ae*))) (set! d3d54@match-each-any (lambda (d3dad@e d3dae@m* d3daf@s* d3db0@ae*) (if (pair? d3dad@e) ((lambda (d3db5@l) (and d3db5@l (cons (d3d4e@stx^ (car d3dad@e) d3dae@m* d3daf@s* d3db0@ae*) d3db5@l))) (d3d54@match-each-any (cdr d3dad@e) d3dae@m* d3daf@s* d3db0@ae*)) (if (null? d3dad@e) '() (if (d2e25@stx? d3dad@e) (and (not (d2deb@top-marked? d3dae@m*)) (call-with-values (lambda () (d2e41@join-wraps d3dae@m* d3daf@s* d3db0@ae* d3dad@e)) (lambda (d3dbd@d3db8 d3dbe@d3dba d3dbf@d3dbc) ((lambda (d3dc3@ae* d3dc4@s* d3dc5@m*) (d3d54@match-each-any (d2e27@stx-expr d3dad@e) d3dc5@m* d3dc4@s* d3dc3@ae*)) d3dbf@d3dbc d3dbe@d3dba d3dbd@d3db8)))) (if (d29b6@d28a7@annotation? d3dad@e) (d3d54@match-each-any (d29b8@d28ab@annotation-expression d3dad@e) d3dae@m* d3daf@s* d3db0@ae*) '#f)))))) (set! d3d56@match-empty (lambda (d3da7@p d3da8@r) (if (null? d3da7@p) d3da8@r (if (eq? d3da7@p '_) d3da8@r (if (eq? d3da7@p 'any) (cons '() d3da8@r) (if (pair? d3da7@p) (d3d56@match-empty (car d3da7@p) (d3d56@match-empty (cdr d3da7@p) d3da8@r)) (if (eq? d3da7@p 'each-any) (cons '() d3da8@r) ((lambda (d3dab@t) (if (memv d3dab@t '(each)) (d3d56@match-empty (vector-ref d3da7@p '1) d3da8@r) (if (memv d3dab@t '(each+)) (d3d56@match-empty (vector-ref d3da7@p '1) (d3d56@match-empty (reverse (vector-ref d3da7@p '2)) (d3d56@match-empty (vector-ref d3da7@p '3) d3da8@r))) (if (memv d3dab@t '(free-id atom)) d3da8@r (if (memv d3dab@t '(scheme-id atom)) d3da8@r (if (memv d3dab@t '(vector)) (d3d56@match-empty (vector-ref d3da7@p '1) d3da8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" d3da7@p))))))) (vector-ref d3da7@p '0))))))))) (set! d3d58@combine (lambda (d3da3@r* d3da4@r) (if (null? (car d3da3@r*)) d3da4@r (cons (map car d3da3@r*) (d3d58@combine (map cdr d3da3@r*) d3da4@r))))) (set! d3d5a@match* (lambda (d3d7f@e d3d80@p d3d81@m* d3d82@s* d3d83@ae* d3d84@r) (if (null? d3d80@p) (and (null? d3d7f@e) d3d84@r) (if (pair? d3d80@p) (and (pair? d3d7f@e) (d3d5c@match (car d3d7f@e) (car d3d80@p) d3d81@m* d3d82@s* d3d83@ae* (d3d5c@match (cdr d3d7f@e) (cdr d3d80@p) d3d81@m* d3d82@s* d3d83@ae* d3d84@r))) (if (eq? d3d80@p 'each-any) ((lambda (d3d8b@l) (and d3d8b@l (cons d3d8b@l d3d84@r))) (d3d54@match-each-any d3d7f@e d3d81@m* d3d82@s* d3d83@ae*)) ((lambda (d3d8d@t) (if (memv d3d8d@t '(each)) (if (null? d3d7f@e) (d3d56@match-empty (vector-ref d3d80@p '1) d3d84@r) ((lambda (d3d8f@r*) (and d3d8f@r* (d3d58@combine d3d8f@r* d3d84@r))) (d3d50@match-each d3d7f@e (vector-ref d3d80@p '1) d3d81@m* d3d82@s* d3d83@ae*))) (if (memv d3d8d@t '(free-id)) (and (symbol? d3d7f@e) (d2deb@top-marked? d3d81@m*) (d2e63@free-id=? (d3d4e@stx^ d3d7f@e d3d81@m* d3d82@s* d3d83@ae*) (vector-ref d3d80@p '1)) d3d84@r) (if (memv d3d8d@t '(scheme-id)) (and (symbol? d3d7f@e) (d2deb@top-marked? d3d81@m*) (d2e63@free-id=? (d3d4e@stx^ d3d7f@e d3d81@m* d3d82@s* d3d83@ae*) (d2ff0@scheme-stx (vector-ref d3d80@p '1))) d3d84@r) (if (memv d3d8d@t '(each+)) (call-with-values (lambda () (d3d52@match-each+ d3d7f@e (vector-ref d3d80@p '1) (vector-ref d3d80@p '2) (vector-ref d3d80@p '3) d3d81@m* d3d82@s* d3d83@ae* d3d84@r)) (lambda (d3d97@d3d92 d3d98@d3d94 d3d99@d3d96) ((lambda (d3d9d@r d3d9e@y-pat d3d9f@xr*) (and d3d9d@r (null? d3d9e@y-pat) (if (null? d3d9f@xr*) (d3d56@match-empty (vector-ref d3d80@p '1) d3d9d@r) (d3d58@combine d3d9f@xr* d3d9d@r)))) d3d99@d3d96 d3d98@d3d94 d3d97@d3d92))) (if (memv d3d8d@t '(atom)) (and (fast-equal? (vector-ref d3d80@p '1) (d2e6f@strip d3d7f@e d3d81@m*)) d3d84@r) (if (memv d3d8d@t '(vector)) (and (vector? d3d7f@e) (d3d5c@match (vector->list d3d7f@e) (vector-ref d3d80@p '1) d3d81@m* d3d82@s* d3d83@ae* d3d84@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" d3d80@p)))))))) (vector-ref d3d80@p '0))))))) (set! d3d5c@match (lambda (d3d61@e d3d62@p d3d63@m* d3d64@s* d3d65@ae* d3d66@r) (if (not d3d66@r) '#f (if (eq? d3d62@p '_) d3d66@r (if (eq? d3d62@p 'any) (cons (d3d4e@stx^ d3d61@e d3d63@m* d3d64@s* d3d65@ae*) d3d66@r) (if (d2e25@stx? d3d61@e) (and (not (d2deb@top-marked? d3d63@m*)) (call-with-values (lambda () (d2e41@join-wraps d3d63@m* d3d64@s* d3d65@ae* d3d61@e)) (lambda (d3d73@d3d6e d3d74@d3d70 d3d75@d3d72) ((lambda (d3d79@ae* d3d7a@s* d3d7b@m*) (d3d5c@match (d2e27@stx-expr d3d61@e) d3d62@p d3d7b@m* d3d7a@s* d3d79@ae* d3d66@r)) d3d75@d3d72 d3d74@d3d70 d3d73@d3d6e)))) (if (d29b6@d28a7@annotation? d3d61@e) (d3d5c@match (d29b8@d28ab@annotation-expression d3d61@e) d3d62@p d3d63@m* d3d64@s* d3d65@ae* d3d66@r) (d3d5a@match* d3d61@e d3d62@p d3d63@m* d3d64@s* d3d65@ae* d3d66@r)))))))) (lambda (d3d5d@e d3d5e@p) (d3d5c@match d3d5d@e d3d5e@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! d3068@ellipsis? (lambda (d3e31@x) (and (d2e5b@id? d3e31@x) (d2e63@free-id=? d3e31@x (d2ff0@scheme-stx '...))))) (set! d306a@underscore? (lambda (d3e33@x) (and (d2e5b@id? d3e33@x) (d2e63@free-id=? d3e33@x (d2ff0@scheme-stx '_))))) (set! d306c@verify-literals (lambda (d3e35@lits d3e36@expr) (for-each (lambda (d3e39@x) (if (or (not (d2e5b@id? d3e39@x)) (d3068@ellipsis? d3e39@x) (d306a@underscore? d3e39@x)) (d3134@syntax-violation '#f '"invalid literal" d3e36@expr d3e39@x) (void))) d3e35@lits))) (set! d306e@syntax-case-transformer ((lambda () ((lambda (d3e3c@build-dispatch-call d3e3e@invalid-ids-error d3e40@gen-clause d3e42@gen-syntax-case) (begin (set! d3e3c@build-dispatch-call (lambda (d3ead@pvars d3eae@expr d3eaf@y d3eb0@r d3eb1@mr) ((lambda (d3eb7@ids d3eb8@levels) ((lambda (d3ebb@labels d3ebc@new-vars) ((lambda (d3ebf@body) (list '(primitive apply) (d2dc9@d2d09@build-lambda '#f d3ebc@new-vars d3ebf@body) d3eaf@y)) (d3088@chi-expr (d2e47@add-subst (d2e1f@make-full-rib d3eb7@ids d3ebb@labels) d3eae@expr) (append (map (lambda (d3ec1@label d3ec2@var d3ec3@level) (cons d3ec1@label (d2e7b@make-binding 'syntax (cons d3ec2@var d3ec3@level)))) d3ebb@labels d3ebc@new-vars (map cdr d3ead@pvars)) d3eb0@r) d3eb1@mr))) (map d2df1@gen-label d3eb7@ids) (map d2ded@gen-lexical d3eb7@ids))) (map car d3ead@pvars) (map cdr d3ead@pvars)))) (set! d3e3e@invalid-ids-error (lambda (d3ea1@id* d3ea2@e d3ea3@class) ((letrec ((d3ea7@find (lambda (d3ea9@id* d3eaa@ok*) (if (null? d3ea9@id*) (d3134@syntax-violation '#f '"invalid syntax" d3ea2@e) (if (d2e5b@id? (car d3ea9@id*)) (if (d2e69@bound-id-member? (car d3ea9@id*) d3eaa@ok*) (d3130@syntax-error (car d3ea9@id*) '"duplicate " d3ea3@class) (d3ea7@find (cdr d3ea9@id*) (cons (car d3ea9@id*) d3eaa@ok*))) (d3130@syntax-error (car d3ea9@id*) '"invalid " d3ea3@class)))))) d3ea7@find) d3ea1@id* '()))) (set! d3e40@gen-clause (lambda (d3e79@x d3e7a@keys d3e7b@clauses d3e7c@r d3e7d@mr d3e7e@pat d3e7f@fender d3e80@expr) (call-with-values (lambda () (d3064@convert-pattern d3e7e@pat d3e7a@keys)) (lambda (d3e8d@d3e8a d3e8e@d3e8c) ((lambda (d3e91@pvars d3e92@p) (if (not (d2e67@distinct-bound-ids? (map car d3e91@pvars))) (d3e3e@invalid-ids-error (map car d3e91@pvars) d3e7e@pat '"pattern variable") (if (not (for-all (lambda (d3e95@x) (not (d3068@ellipsis? (car d3e95@x)))) d3e91@pvars)) (d3134@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" d3e7e@pat) ((lambda (d3e97@y) ((lambda (d3e99@test) ((lambda (d3e9b@conseq) ((lambda (d3e9d@altern) (list (d2dc9@d2d09@build-lambda '#f (list d3e97@y) (list 'if d3e99@test d3e9b@conseq d3e9d@altern)) (list '(primitive syntax-dispatch) d3e79@x (list 'quote d3e92@p)))) (d3e42@gen-syntax-case d3e79@x d3e7a@keys d3e7b@clauses d3e7c@r d3e7d@mr))) (d3e3c@build-dispatch-call d3e91@pvars d3e80@expr d3e97@y d3e7c@r d3e7d@mr))) (if (eq? d3e7f@fender '#t) d3e97@y ((lambda (d3e9f@call) (list 'if d3e97@y d3e9f@call (list 'quote '#f))) (d3e3c@build-dispatch-call d3e91@pvars d3e7f@fender d3e97@y d3e7c@r d3e7d@mr))))) (d2ded@gen-lexical 'tmp))))) d3e8e@d3e8c d3e8d@d3e8a))))) (set! d3e42@gen-syntax-case (lambda (d3e57@x d3e58@keys d3e59@clauses d3e5a@r d3e5b@mr) (if (null? d3e59@clauses) (list '(primitive syntax-error) d3e57@x) ((lambda (d3e61@t) ((lambda (d3e63@ls/false) (if d3e63@ls/false (apply (lambda (d3e65@pat d3e66@expr) (if (and (d2e5b@id? d3e65@pat) (not (d2e69@bound-id-member? d3e65@pat d3e58@keys)) (not (d3068@ellipsis? d3e65@pat))) (if (d2e63@free-id=? d3e65@pat (d2ff0@scheme-stx '_)) (d3088@chi-expr d3e66@expr d3e5a@r d3e5b@mr) ((lambda (d3e69@lab d3e6a@lex) ((lambda (d3e6d@body) (list (d2dc9@d2d09@build-lambda '#f (list d3e6a@lex) d3e6d@body) d3e57@x)) (d3088@chi-expr (d2e47@add-subst (d2e1f@make-full-rib (list d3e65@pat) (list d3e69@lab)) d3e66@expr) (cons (cons d3e69@lab (d2e7b@make-binding 'syntax (cons d3e6a@lex '0))) d3e5a@r) d3e5b@mr))) (d2df1@gen-label d3e65@pat) (d2ded@gen-lexical d3e65@pat))) (d3e40@gen-clause d3e57@x d3e58@keys (cdr d3e59@clauses) d3e5a@r d3e5b@mr d3e65@pat '#t d3e66@expr))) d3e63@ls/false) ((lambda (d3e6f@t) ((lambda (d3e71@ls/false) (if d3e71@ls/false (apply (lambda (d3e73@pat d3e74@fender d3e75@expr) (d3e40@gen-clause d3e57@x d3e58@keys (cdr d3e59@clauses) d3e5a@r d3e5b@mr d3e73@pat d3e74@fender d3e75@expr)) d3e71@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3e6f@t))) (d3066@syntax-dispatch d3e6f@t '(any any any)))) d3e61@t))) (d3066@syntax-dispatch d3e61@t '(any any)))) (car d3e59@clauses))))) (lambda (d3e43@e d3e44@r d3e45@mr) ((lambda (d3e49@t) ((lambda (d3e4b@ls/false) (if d3e4b@ls/false (apply (lambda (d3e4d@expr d3e4e@keys d3e4f@clauses) (begin (d306c@verify-literals d3e4e@keys d3e43@e) ((lambda (d3e53@x) ((lambda (d3e55@body) (list (d2dc9@d2d09@build-lambda '#f (list d3e53@x) d3e55@body) (d3088@chi-expr d3e4d@expr d3e44@r d3e45@mr))) (d3e42@gen-syntax-case d3e53@x d3e4e@keys d3e4f@clauses d3e44@r d3e45@mr))) (d2ded@gen-lexical 'tmp)))) d3e4b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3e49@t))) (d3066@syntax-dispatch d3e49@t '(_ any each-any . each-any)))) d3e43@e)))) '#f '#f '#f '#f)))) (set! d3070@ellipsis-map (lambda (d3ec7@proc d3ec8@ls . d3ecb@ls*) ((lambda (d3ece@who) (begin (set! d3ece@who '...) (begin (if (not (list? d3ec8@ls)) (assertion-violation d3ece@who '"not a list" d3ec8@ls) (void)) (if (not (null? d3ecb@ls*)) ((lambda (d3ecf@n) (for-each (lambda (d3ed1@x) (begin (if (not (list? d3ed1@x)) (assertion-violation d3ece@who '"not a list" d3ed1@x) (void)) (if (not (= (length d3ed1@x) d3ecf@n)) (assertion-violation d3ece@who '"length mismatch" d3ec8@ls d3ed1@x) (void)))) d3ecb@ls*)) (length d3ec8@ls)) (void)) (apply map d3ec7@proc d3ec8@ls d3ecb@ls*)))) '#f))) (set! d3072@syntax-transformer ((lambda () ((lambda (d3ed4@gen-syntax d3ed6@gen-ref d3ed8@gen-append d3eda@gen-mappend d3edc@gen-map d3ede@gen-cons d3ee0@gen-vector d3ee2@regen) (begin (set! d3ed4@gen-syntax (lambda (d3f4b@src d3f4c@e d3f4d@r d3f4e@maps d3f4f@ellipsis? d3f50@vec?) ((lambda (d3f57@t) ((lambda (d3f59@ls/false) (if (and d3f59@ls/false (apply (lambda (d3f5b@dots) (d3f4f@ellipsis? d3f5b@dots)) d3f59@ls/false)) (apply (lambda (d3f5d@dots) (d3134@syntax-violation '#f '"misplaced ellipsis in syntax form" d3f4b@src)) d3f59@ls/false) ((lambda (d3f5f@t) ((lambda (d3f61@ls/false) (if (and d3f61@ls/false (apply (lambda (d3f63@id) (d2e5b@id? d3f63@id)) d3f61@ls/false)) (apply (lambda (d3f65@id) ((lambda (d3f67@label) ((lambda (d3f69@b) ((lambda () (if (eq? (d2e7d@binding-type d3f69@b) 'syntax) (call-with-values (lambda () ((lambda (d3f6f@var.lev) (d3ed6@gen-ref d3f4b@src (car d3f6f@var.lev) (cdr d3f6f@var.lev) d3f4e@maps)) (d2e7f@binding-value d3f69@b))) (lambda (d3f71@d3f6c d3f72@d3f6e) ((lambda (d3f75@maps d3f76@var) (values (list 'ref d3f76@var) d3f75@maps)) d3f72@d3f6e d3f71@d3f6c))) (values (list 'quote d3f4c@e) d3f4e@maps))))) (d2e79@label->binding d3f67@label d3f4d@r))) (d2e75@id->label d3f4c@e))) d3f61@ls/false) ((lambda (d3f79@t) ((lambda (d3f7b@ls/false) (if (and d3f7b@ls/false (apply (lambda (d3f7d@dots d3f7e@e) (d3f4f@ellipsis? d3f7d@dots)) d3f7b@ls/false)) (apply (lambda (d3f81@dots d3f82@e) (if d3f50@vec? (d3134@syntax-violation '#f '"misplaced ellipsis in syntax form" d3f4b@src) (d3ed4@gen-syntax d3f4b@src d3f82@e d3f4d@r d3f4e@maps (lambda (d3f85@x) '#f) '#f))) d3f7b@ls/false) ((lambda (d3f87@t) ((lambda (d3f89@ls/false) (if (and d3f89@ls/false (apply (lambda (d3f8b@x d3f8c@dots d3f8d@y) (d3f4f@ellipsis? d3f8c@dots)) d3f89@ls/false)) (apply (lambda (d3f91@x d3f92@dots d3f93@y) ((letrec ((d3f97@f (lambda (d3f99@y d3f9a@k) ((lambda (d3f9d@t) ((lambda (d3f9f@ls/false) (if d3f9f@ls/false (apply (lambda () (d3f9a@k d3f4e@maps)) d3f9f@ls/false) ((lambda (d3fa1@t) ((lambda (d3fa3@ls/false) (if (and d3fa3@ls/false (apply (lambda (d3fa5@dots d3fa6@y) (d3f4f@ellipsis? d3fa5@dots)) d3fa3@ls/false)) (apply (lambda (d3fa9@dots d3faa@y) (d3f97@f d3faa@y (lambda (d3fad@maps) (call-with-values (lambda () (d3f9a@k (cons '() d3fad@maps))) (lambda (d3fb3@d3fb0 d3fb4@d3fb2) ((lambda (d3fb7@maps d3fb8@x) (if (null? (car d3fb7@maps)) (d3134@syntax-violation '#f '"extra ellipsis in syntax form" d3f4b@src) (values (d3eda@gen-mappend d3fb8@x (car d3fb7@maps)) (cdr d3fb7@maps)))) d3fb4@d3fb2 d3fb3@d3fb0)))))) d3fa3@ls/false) ((lambda (d3fbb@t) ((lambda (d3fbd@ls/false) (if d3fbd@ls/false (apply (lambda () (call-with-values (lambda () (d3ed4@gen-syntax d3f4b@src d3f99@y d3f4d@r d3f4e@maps d3f4f@ellipsis? d3f50@vec?)) (lambda (d3fc3@d3fc0 d3fc4@d3fc2) ((lambda (d3fc7@maps d3fc8@y) (call-with-values (lambda () (d3f9a@k d3fc7@maps)) (lambda (d3fcf@d3fcc d3fd0@d3fce) ((lambda (d3fd3@maps d3fd4@x) (values (d3ed8@gen-append d3fd4@x d3fc8@y) d3fd3@maps)) d3fd0@d3fce d3fcf@d3fcc)))) d3fc4@d3fc2 d3fc3@d3fc0)))) d3fbd@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3fbb@t))) (d3066@syntax-dispatch d3fbb@t '_))) d3fa1@t))) (d3066@syntax-dispatch d3fa1@t '(any . any)))) d3f9d@t))) (d3066@syntax-dispatch d3f9d@t '()))) d3f99@y)))) d3f97@f) d3f93@y (lambda (d3fd7@maps) (call-with-values (lambda () (d3ed4@gen-syntax d3f4b@src d3f91@x d3f4d@r (cons '() d3fd7@maps) d3f4f@ellipsis? '#f)) (lambda (d3fdd@d3fda d3fde@d3fdc) ((lambda (d3fe1@maps d3fe2@x) (if (null? (car d3fe1@maps)) (d3134@syntax-violation '#f '"extra ellipsis in syntax form" d3f4b@src) (values (d3edc@gen-map d3fe2@x (car d3fe1@maps)) (cdr d3fe1@maps)))) d3fde@d3fdc d3fdd@d3fda)))))) d3f89@ls/false) ((lambda (d3fe5@t) ((lambda (d3fe7@ls/false) (if d3fe7@ls/false (apply (lambda (d3fe9@x d3fea@y) (call-with-values (lambda () (d3ed4@gen-syntax d3f4b@src d3fe9@x d3f4d@r d3f4e@maps d3f4f@ellipsis? '#f)) (lambda (d3ff1@d3fee d3ff2@d3ff0) ((lambda (d3ff5@maps d3ff6@xnew) (call-with-values (lambda () (d3ed4@gen-syntax d3f4b@src d3fea@y d3f4d@r d3ff5@maps d3f4f@ellipsis? d3f50@vec?)) (lambda (d3ffd@d3ffa d3ffe@d3ffc) ((lambda (d4001@maps d4002@ynew) (values (d3ede@gen-cons d3f4c@e d3fe9@x d3fea@y d3ff6@xnew d4002@ynew) d4001@maps)) d3ffe@d3ffc d3ffd@d3ffa)))) d3ff2@d3ff0 d3ff1@d3fee)))) d3fe7@ls/false) ((lambda (d4005@t) ((lambda (d4007@ls/false) (if d4007@ls/false (apply (lambda (d4009@ls) (call-with-values (lambda () (d3ed4@gen-syntax d3f4b@src d4009@ls d3f4d@r d3f4e@maps d3f4f@ellipsis? '#t)) (lambda (d400f@d400c d4010@d400e) ((lambda (d4013@maps d4014@lsnew) (values (d3ee0@gen-vector d3f4c@e d4009@ls d4014@lsnew) d4013@maps)) d4010@d400e d400f@d400c)))) d4007@ls/false) ((lambda (d4017@t) ((lambda (d4019@ls/false) (if d4019@ls/false (apply (lambda () (values (list 'quote d3f4c@e) d3f4e@maps)) d4019@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4017@t))) (d3066@syntax-dispatch d4017@t '_))) d4005@t))) (d3066@syntax-dispatch d4005@t '#(vector each-any)))) d3fe5@t))) (d3066@syntax-dispatch d3fe5@t '(any . any)))) d3f87@t))) (d3066@syntax-dispatch d3f87@t '(any any . any)))) d3f79@t))) (d3066@syntax-dispatch d3f79@t '(any any)))) d3f5f@t))) (d3066@syntax-dispatch d3f5f@t 'any))) d3f57@t))) (d3066@syntax-dispatch d3f57@t 'any))) d3f4c@e))) (set! d3ed6@gen-ref (lambda (d3f31@src d3f32@var d3f33@level d3f34@maps) (if (= d3f33@level '0) (values d3f32@var d3f34@maps) (if (null? d3f34@maps) (d3134@syntax-violation '#f '"missing ellipsis in syntax form" d3f31@src) (call-with-values (lambda () (d3ed6@gen-ref d3f31@src d3f32@var (- d3f33@level '1) (cdr d3f34@maps))) (lambda (d3f3d@d3f3a d3f3e@d3f3c) ((lambda (d3f41@outer-maps d3f42@outer-var) ((lambda (d3f45@t) (if d3f45@t ((lambda (d3f47@b) (values (cdr d3f47@b) d3f34@maps)) d3f45@t) ((lambda (d3f49@inner-var) (values d3f49@inner-var (cons (cons (cons d3f42@outer-var d3f49@inner-var) (car d3f34@maps)) d3f41@outer-maps))) (d2ded@gen-lexical 'tmp)))) (assq d3f42@outer-var (car d3f34@maps)))) d3f3e@d3f3c d3f3d@d3f3a))))))) (set! d3ed8@gen-append (lambda (d3f2d@x d3f2e@y) (if (fast-equal? d3f2e@y ''()) d3f2d@x (list 'append d3f2d@x d3f2e@y)))) (set! d3eda@gen-mappend (lambda (d3f29@e d3f2a@map-env) (list 'apply '(primitive append) (d3edc@gen-map d3f29@e d3f2a@map-env)))) (set! d3edc@gen-map (lambda (d3f17@e d3f18@map-env) ((lambda (d3f1b@formals d3f1c@actuals) (if (eq? (car d3f17@e) 'ref) (car d3f1c@actuals) (if (for-all (lambda (d3f1f@x) (and (eq? (car d3f1f@x) 'ref) (memq (cadr d3f1f@x) d3f1b@formals))) (cdr d3f17@e)) ((lambda (d3f21@args) (cons 'map (cons (list 'primitive (car d3f17@e)) d3f21@args))) (map ((lambda (d3f23@r) (lambda (d3f25@x) (cdr (assq (cadr d3f25@x) d3f23@r)))) (map cons d3f1b@formals d3f1c@actuals)) (cdr d3f17@e))) (cons* 'map (list 'lambda d3f1b@formals d3f17@e) d3f1c@actuals)))) (map cdr d3f18@map-env) (map (lambda (d3f27@x) (list 'ref (car d3f27@x))) d3f18@map-env)))) (set! d3ede@gen-cons (lambda (d3f07@e d3f08@x d3f09@y d3f0a@xnew d3f0b@ynew) ((lambda (d3f11@t) (if (memv d3f11@t '(quote)) (if (eq? (car d3f0a@xnew) 'quote) ((lambda (d3f13@xnew d3f14@ynew) (if (and (eq? d3f13@xnew d3f08@x) (eq? d3f14@ynew d3f09@y)) (list 'quote d3f07@e) (list 'quote (cons d3f13@xnew d3f14@ynew)))) (cadr d3f0a@xnew) (cadr d3f0b@ynew)) (if (null? (cadr d3f0b@ynew)) (list 'list d3f0a@xnew) (list 'cons d3f0a@xnew d3f0b@ynew))) (if (memv d3f11@t '(list)) (cons 'list (cons d3f0a@xnew (cdr d3f0b@ynew))) (list 'cons d3f0a@xnew d3f0b@ynew)))) (car d3f0b@ynew)))) (set! d3ee0@gen-vector (lambda (d3f01@e d3f02@ls d3f03@lsnew) (if (eq? (car d3f03@lsnew) 'quote) (if (eq? (cadr d3f03@lsnew) d3f02@ls) (list 'quote d3f01@e) (list 'quote (list->vector (cadr d3f03@lsnew)))) (if (eq? (car d3f03@lsnew) 'list) (cons 'vector (cdr d3f03@lsnew)) (list 'list->vector d3f03@lsnew))))) (set! d3ee2@regen (lambda (d3efb@x) ((lambda (d3efd@t) (if (memv d3efd@t '(ref)) (cadr d3efb@x) (if (memv d3efd@t '(primitive)) (list 'primitive (cadr d3efb@x)) (if (memv d3efd@t '(quote)) (list 'quote (cadr d3efb@x)) (if (memv d3efd@t '(lambda)) (d2dc9@d2d09@build-lambda '#f (cadr d3efb@x) (d3ee2@regen (caddr d3efb@x))) (if (memv d3efd@t '(map)) ((lambda (d3eff@ls) (cons '(primitive ellipsis-map) d3eff@ls)) (map d3ee2@regen (cdr d3efb@x))) (cons (list 'primitive (car d3efb@x)) (map d3ee2@regen (cdr d3efb@x))))))))) (car d3efb@x)))) (lambda (d3ee3@e d3ee4@r d3ee5@mr) ((lambda (d3ee9@t) ((lambda (d3eeb@ls/false) (if d3eeb@ls/false (apply (lambda (d3eed@x) (call-with-values (lambda () (d3ed4@gen-syntax d3ee3@e d3eed@x d3ee4@r '() d3068@ellipsis? '#f)) (lambda (d3ef3@d3ef0 d3ef4@d3ef2) ((lambda (d3ef7@maps d3ef8@e) (d3ee2@regen d3ef8@e)) d3ef4@d3ef2 d3ef3@d3ef0)))) d3eeb@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d3ee9@t))) (d3066@syntax-dispatch d3ee9@t '(_ any)))) d3ee3@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! d3074@core-macro-transformer (lambda (d401b@name) ((lambda (d401d@t) (if (memv d401d@t '(quote)) d3016@quote-transformer (if (memv d401d@t '(lambda)) d301a@lambda-transformer (if (memv d401d@t '(case-lambda)) d3018@case-lambda-transformer (if (memv d401d@t '(letrec)) d2ffe@letrec-transformer (if (memv d401d@t '(letrec*)) d3000@letrec*-transformer (if (memv d401d@t '(if)) d300e@if-transformer (if (memv d401d@t '(and)) d3010@and-transformer (if (memv d401d@t '(or)) d3012@or-transformer (if (memv d401d@t '(foreign-call)) d3062@foreign-call-transformer (if (memv d401d@t '(syntax-case)) d306e@syntax-case-transformer (if (memv d401d@t '(syntax)) d3072@syntax-transformer (if (memv d401d@t '(type-descriptor)) d3004@type-descriptor-transformer (if (memv d401d@t '(record-type-descriptor)) d3006@record-type-descriptor-transformer (if (memv d401d@t '(record-constructor-descriptor)) d3008@record-constructor-descriptor-transformer (if (memv d401d@t '(fluid-let-syntax)) d3002@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" d401b@name))))))))))))))))) d401b@name))) (set! d3076@symbol-macro (lambda (d401f@x d4020@set) ((lambda (d4023@t) ((lambda (d4025@ls/false) (if (and d4025@ls/false (apply (lambda (d4027@name) (and (d2e5b@id? d4027@name) (memq (d2e5d@id->sym d4027@name) d4020@set))) d4025@ls/false)) (apply (lambda (d4029@name) (d301c@bless (list 'quote d4029@name))) d4025@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4023@t))) (d3066@syntax-dispatch d4023@t '(_ any)))) d401f@x))) (set! d3078@macro-transformer (lambda (d402b@x) (if (procedure? d402b@x) d402b@x (if (symbol? d402b@x) ((lambda (d402d@t) (if (memv d402d@t '(define-record-type)) d305a@define-record-type-macro (if (memv d402d@t '(define-struct)) d3058@define-struct-macro (if (memv d402d@t '(include)) d304e@include-macro (if (memv d402d@t '(cond)) d304a@cond-macro (if (memv d402d@t '(let)) d3022@let-macro (if (memv d402d@t '(do)) d3042@do-macro (if (memv d402d@t '(or)) d3046@or-macro (if (memv d402d@t '(and)) d3048@and-macro (if (memv d402d@t '(let*)) d3044@let*-macro (if (memv d402d@t '(let-values)) d3024@let-values-macro (if (memv d402d@t '(let*-values)) d3026@let*-values-macro (if (memv d402d@t '(syntax-rules)) d3052@syntax-rules-macro (if (memv d402d@t '(quasiquote)) d3054@quasiquote-macro (if (memv d402d@t '(quasisyntax)) d3056@quasisyntax-macro (if (memv d402d@t '(with-syntax)) d301e@with-syntax-macro (if (memv d402d@t '(when)) d300a@when-macro (if (memv d402d@t '(unless)) d300c@unless-macro (if (memv d402d@t '(case)) d3014@case-macro (if (memv d402d@t '(identifier-syntax)) d3040@identifier-syntax-macro (if (memv d402d@t '(time)) d3038@time-macro (if (memv d402d@t '(delay)) d303a@delay-macro (if (memv d402d@t '(assert)) d303c@assert-macro (if (memv d402d@t '(endianness)) d303e@endianness-macro (if (memv d402d@t '(guard)) d3034@guard-macro (if (memv d402d@t '(define-enumeration)) d3036@define-enumeration-macro (if (memv d402d@t '(trace-lambda)) d3028@trace-lambda-macro (if (memv d402d@t '(trace-define)) d302a@trace-define-macro (if (memv d402d@t '(trace-define-syntax)) d302c@trace-define-syntax-macro (if (memv d402d@t '(trace-let-syntax)) d3030@trace-let-syntax-macro (if (memv d402d@t '(trace-letrec-syntax)) d3032@trace-letrec-syntax-macro (if (memv d402d@t '(define-condition-type)) d305c@define-condition-type-macro (if (memv d402d@t '(parameterize)) d3060@parameterize-macro (if (memv d402d@t '(include-into)) d3050@include-into-macro (if (memv d402d@t '(eol-style)) (lambda (d402f@x) (d3076@symbol-macro d402f@x '(none lf cr crlf nel crnel ls))) (if (memv d402d@t '(error-handling-mode)) (lambda (d4031@x) (d3076@symbol-macro d4031@x '(ignore raise replace))) (if (memv d402d@t '(buffer-mode)) (lambda (d4033@x) (d3076@symbol-macro d4033@x '(none line block))) (if (memv d402d@t '(file-options)) d2de0@file-options-macro (if (memv d402d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) d305e@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" d402b@x)))))))))))))))))))))))))))))))))))))))) d402b@x) (error 'core-macro-transformer '"BUG: invalid macro" d402b@x))))) (set! d307a@local-macro-transformer (lambda (d4035@x) (car d4035@x))) (set! d307c@do-macro-call (lambda (d4037@transformer d4038@expr) ((lambda (d403b@out) (begin ((letrec ((d403d@f (lambda (d403f@x) (if (not (d2e25@stx? d403f@x)) (if (pair? d403f@x) (begin (d403d@f (car d403f@x)) (d403d@f (cdr d403f@x))) (if (vector? d403f@x) (vector-for-each d403d@f d403f@x) (if (symbol? d403f@x) (d3134@syntax-violation '#f '"raw symbol encountered in output of macro" d4038@expr d403f@x) (void)))) (void))))) d403d@f) d403b@out) (d2e45@add-mark (d2e3b@gen-mark) d403b@out d4038@expr))) (d4037@transformer (d2e45@add-mark d2e3d@anti-mark d4038@expr '#f))))) (set! d307e@chi-macro (lambda (d4041@p d4042@e) (d307c@do-macro-call (d3078@macro-transformer d4041@p) d4042@e))) (set! d3080@chi-local-macro (lambda (d4045@p d4046@e) (d307c@do-macro-call (d307a@local-macro-transformer d4045@p) d4046@e))) (set! d3082@chi-global-macro (lambda (d4049@p d404a@e) ((lambda (d404d@lib d404e@loc) (begin (d2c92@d2ad6@visit-library d404d@lib) ((lambda (d4051@x) ((lambda (d4053@transformer) (d307c@do-macro-call d4053@transformer d404a@e)) (if (procedure? d4051@x) d4051@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" d4051@x)))) (symbol-value d404e@loc)))) (car d4049@p) (cdr d4049@p)))) (set! d3084@chi-expr* (lambda (d4055@e* d4056@r d4057@mr) (if (null? d4055@e*) '() ((lambda (d405b@e) (cons d405b@e (d3084@chi-expr* (cdr d4055@e*) d4056@r d4057@mr))) (d3088@chi-expr (car d4055@e*) d4056@r d4057@mr))))) (set! d3086@chi-application (lambda (d405d@e d405e@r d405f@mr) ((lambda (d4063@t) ((lambda (d4065@ls/false) (if d4065@ls/false (apply (lambda (d4067@rator d4068@rands) ((lambda (d406b@rator) (cons d406b@rator (d3084@chi-expr* d4068@rands d405e@r d405f@mr))) (d3088@chi-expr d4067@rator d405e@r d405f@mr))) d4065@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4063@t))) (d3066@syntax-dispatch d4063@t '(any . each-any)))) d405d@e))) (set! d3088@chi-expr (lambda (d406d@e d406e@r d406f@mr) (call-with-values (lambda () (d2e83@syntax-type d406d@e d406e@r)) (lambda (d4079@d4074 d407a@d4076 d407b@d4078) ((lambda (d407f@kwd d4080@value d4081@type) ((lambda (d4085@t) (if (memv d4085@t '(core-macro)) ((lambda (d4087@transformer) (d4087@transformer d406d@e d406e@r d406f@mr)) (d3074@core-macro-transformer d4080@value)) (if (memv d4085@t '(global)) ((lambda (d4089@lib) ((lambda (d408b@loc) ((lambda () (begin ((d30c8@inv-collector) d4089@lib) d408b@loc)))) (cdr d4080@value))) (car d4080@value)) (if (memv d4085@t '(core-prim)) ((lambda (d408d@name) (list 'primitive d408d@name)) d4080@value) (if (memv d4085@t '(call)) (d3086@chi-application d406d@e d406e@r d406f@mr) (if (memv d4085@t '(lexical)) ((lambda (d408f@lex) d408f@lex) (d2ff2@lexical-var d4080@value)) (if (memv d4085@t '(global-macro global-macro!)) (d3088@chi-expr (d3082@chi-global-macro d4080@value d406d@e) d406e@r d406f@mr) (if (memv d4085@t '(local-macro local-macro!)) (d3088@chi-expr (d3080@chi-local-macro d4080@value d406d@e) d406e@r d406f@mr) (if (memv d4085@t '(macro macro!)) (d3088@chi-expr (d307e@chi-macro d4080@value d406d@e) d406e@r d406f@mr) (if (memv d4085@t '(constant)) ((lambda (d4091@datum) (list 'quote d4091@datum)) d4080@value) (if (memv d4085@t '(set!)) (d308a@chi-set! d406d@e d406e@r d406f@mr) (if (memv d4085@t '(begin)) ((lambda (d4093@t) ((lambda (d4095@ls/false) (if d4095@ls/false (apply (lambda (d4097@x d4098@x*) (d2dcc@d2d3b@build-sequence '#f (d3084@chi-expr* (cons d4097@x d4098@x*) d406e@r d406f@mr))) d4095@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4093@t))) (d3066@syntax-dispatch d4093@t '(_ any . each-any)))) d406d@e) (if (memv d4085@t '(let-syntax letrec-syntax)) ((lambda (d409b@t) ((lambda (d409d@ls/false) (if (and d409d@ls/false (apply (lambda (d409f@xlhs* d40a0@xrhs* d40a1@xbody d40a2@xbody*) (if (not (d2e65@valid-bound-ids? d409f@xlhs*)) (d3134@syntax-violation '#f '"invalid identifiers" d406d@e) (void))) d409d@ls/false)) (apply (lambda (d40a7@xlhs* d40a8@xrhs* d40a9@xbody d40aa@xbody*) ((lambda (d40af@xlab*) ((lambda (d40b1@xrib) ((lambda (d40b3@xb*) ((lambda () (d2dcc@d2d3b@build-sequence '#f (d3084@chi-expr* (map (lambda (d40b5@x) (d2e47@add-subst d40b1@xrib d40b5@x)) (cons d40a9@xbody d40aa@xbody*)) (append (map cons d40af@xlab* d40b3@xb*) d406e@r) (append (map cons d40af@xlab* d40b3@xb*) d406f@mr)))))) (map (lambda (d40b7@x) (d2e99@make-eval-transformer (d30ba@expand-transformer (if (eq? d4081@type 'let-syntax) d40b7@x (d2e47@add-subst d40b1@xrib d40b7@x)) d406f@mr))) d40a8@xrhs*))) (d2e1f@make-full-rib d40a7@xlhs* d40af@xlab*))) (map d2df1@gen-label d40a7@xlhs*))) d409d@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d409b@t))) (d3066@syntax-dispatch d409b@t '(_ #(each (any any)) any . each-any)))) d406d@e) (if (memv d4085@t '(displaced-lexical)) (d3134@syntax-violation '#f '"identifier out of context" d406d@e) (if (memv d4085@t '(syntax)) (d3134@syntax-violation '#f '"reference to pattern variable outside a syntax form" d406d@e) (if (memv d4085@t '(define define-syntax module import library)) (d3134@syntax-violation '#f (string-append ((lambda (d40b9@t) (if (memv d40b9@t '(define)) '"a definition" (if (memv d40b9@t '(define-syntax)) '"a define-syntax" (if (memv d40b9@t '(module)) '"a module definition" (if (memv d40b9@t '(library)) '"a library definition" (if (memv d40b9@t '(import)) '"an import declaration" (if (memv d40b9@t '(export)) '"an export declaration" '"a non-expression"))))))) d4081@type) '" was found where an expression was expected") d406d@e) (if (memv d4085@t '(mutable)) (d3134@syntax-violation '#f '"attempt to reference an unexportable variable" d406d@e) (d3134@syntax-violation '#f '"invalid expression" d406d@e)))))))))))))))))) d4081@type)) d407b@d4078 d407a@d4076 d4079@d4074))))) (set! d308a@chi-set! (lambda (d40bb@e d40bc@r d40bd@mr) ((lambda (d40c1@t) ((lambda (d40c3@ls/false) (if (and d40c3@ls/false (apply (lambda (d40c5@x d40c6@v) (d2e5b@id? d40c5@x)) d40c3@ls/false)) (apply (lambda (d40c9@x d40ca@v) (call-with-values (lambda () (d2e83@syntax-type d40c9@x d40bc@r)) (lambda (d40d3@d40ce d40d4@d40d0 d40d5@d40d2) ((lambda (d40d9@kwd d40da@value d40db@type) ((lambda (d40df@t) (if (memv d40df@t '(lexical)) (begin (d2ff6@set-lexical-mutable! d40da@value '#t) (list 'set! (d2ff2@lexical-var d40da@value) (d3088@chi-expr d40ca@v d40bc@r d40bd@mr))) (if (memv d40df@t '(core-prim)) (d3134@syntax-violation '#f '"cannot modify imported core primitive" d40bb@e) (if (memv d40df@t '(global)) (d3134@syntax-violation '#f '"attempt to modify imported binding" d40bb@e) (if (memv d40df@t '(global-macro!)) (d3088@chi-expr (d3082@chi-global-macro d40da@value d40bb@e) d40bc@r d40bd@mr) (if (memv d40df@t '(local-macro!)) (d3088@chi-expr (d3080@chi-local-macro d40da@value d40bb@e) d40bc@r d40bd@mr) (if (memv d40df@t '(mutable)) (d3134@syntax-violation '#f '"attempt to assign to an unexportable variable" d40bb@e) (d3134@syntax-violation '#f '"invalid syntax" d40bb@e)))))))) d40db@type)) d40d5@d40d2 d40d4@d40d0 d40d3@d40ce)))) d40c3@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d40c1@t))) (d3066@syntax-dispatch d40c1@t '(_ any any)))) d40bb@e))) (set! d308c@verify-formals (lambda (d40e1@fmls d40e2@stx) ((lambda (d40e5@t) ((lambda (d40e7@ls/false) (if d40e7@ls/false (apply (lambda (d40e9@x*) (if (not (d2e65@valid-bound-ids? d40e9@x*)) (d3020@invalid-fmls-error d40e2@stx d40e1@fmls) (void))) d40e7@ls/false) ((lambda (d40eb@t) ((lambda (d40ed@ls/false) (if d40ed@ls/false (apply (lambda (d40ef@x* d40f0@x) (if (not (d2e65@valid-bound-ids? (cons d40f0@x d40ef@x*))) (d3020@invalid-fmls-error d40e2@stx d40e1@fmls) (void))) d40ed@ls/false) ((lambda (d40f3@t) ((lambda (d40f5@ls/false) (if d40f5@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid syntax" d40e2@stx)) d40f5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d40f3@t))) (d3066@syntax-dispatch d40f3@t '_))) d40eb@t))) (d3066@syntax-dispatch d40eb@t '#(each+ any () any)))) d40e5@t))) (d3066@syntax-dispatch d40e5@t 'each-any))) d40e1@fmls))) (set! d308e@chi-lambda-clause (lambda (d40f7@stx d40f8@fmls d40f9@body* d40fa@r d40fb@mr) ((lambda (d4101@t) ((lambda (d4103@ls/false) (if d4103@ls/false (apply (lambda (d4105@x*) (begin (d308c@verify-formals d40f8@fmls d40f7@stx) ((lambda (d4107@lex* d4108@lab*) (values d4107@lex* (d309e@chi-internal (d2e47@add-subst (d2e1f@make-full-rib d4105@x* d4108@lab*) d40f9@body*) (d2ffa@add-lexicals d4108@lab* d4107@lex* d40fa@r) d40fb@mr))) (map d2ded@gen-lexical d4105@x*) (map d2df1@gen-label d4105@x*)))) d4103@ls/false) ((lambda (d410b@t) ((lambda (d410d@ls/false) (if d410d@ls/false (apply (lambda (d410f@x* d4110@x) (begin (d308c@verify-formals d40f8@fmls d40f7@stx) ((lambda (d4113@lex* d4114@lab* d4115@lex d4116@lab) (values (append d4113@lex* d4115@lex) (d309e@chi-internal (d2e47@add-subst (d2e1f@make-full-rib (cons d4110@x d410f@x*) (cons d4116@lab d4114@lab*)) d40f9@body*) (d2ffa@add-lexicals (cons d4116@lab d4114@lab*) (cons d4115@lex d4113@lex*) d40fa@r) d40fb@mr))) (map d2ded@gen-lexical d410f@x*) (map d2df1@gen-label d410f@x*) (d2ded@gen-lexical d4110@x) (d2df1@gen-label d4110@x)))) d410d@ls/false) ((lambda (d411b@t) ((lambda (d411d@ls/false) (if d411d@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid syntax" d40f8@fmls)) d411d@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d411b@t))) (d3066@syntax-dispatch d411b@t '_))) d410b@t))) (d3066@syntax-dispatch d410b@t '#(each+ any () any)))) d4101@t))) (d3066@syntax-dispatch d4101@t 'each-any))) d40f8@fmls))) (set! d3090@chi-lambda-clause* (lambda (d411f@stx d4120@fmls* d4121@body** d4122@r d4123@mr) (if (null? d4120@fmls*) (values '() '()) (call-with-values (lambda () (d308e@chi-lambda-clause d411f@stx (car d4120@fmls*) (car d4121@body**) d4122@r d4123@mr)) (lambda (d412d@d412a d412e@d412c) ((lambda (d4131@b d4132@a) (call-with-values (lambda () (d3090@chi-lambda-clause* d411f@stx (cdr d4120@fmls*) (cdr d4121@body**) d4122@r d4123@mr)) (lambda (d4139@d4136 d413a@d4138) ((lambda (d413d@b* d413e@a*) (values (cons d4132@a d413e@a*) (cons d4131@b d413d@b*))) d413a@d4138 d4139@d4136)))) d412e@d412c d412d@d412a)))))) (set! d3092@chi-defun (lambda (d4141@x d4142@r d4143@mr) ((lambda (d4147@fmls d4148@body*) (call-with-values (lambda () (d308e@chi-lambda-clause d4147@fmls d4147@fmls d4148@body* d4142@r d4143@mr)) (lambda (d414f@d414c d4150@d414e) ((lambda (d4153@body d4154@fmls) (d2dc9@d2d09@build-lambda '#f d4154@fmls d4153@body)) d4150@d414e d414f@d414c)))) (car d4141@x) (cdr d4141@x)))) (set! d3094@chi-rhs (lambda (d4157@rhs d4158@r d4159@mr) ((lambda (d415d@t) (if (memv d415d@t '(defun)) (d3092@chi-defun (cdr d4157@rhs) d4158@r d4159@mr) (if (memv d415d@t '(expr)) ((lambda (d415f@expr) (d3088@chi-expr d415f@expr d4158@r d4159@mr)) (cdr d4157@rhs)) (if (memv d415d@t '(top-expr)) ((lambda (d4161@expr) (d2dcc@d2d3b@build-sequence '#f (list (d3088@chi-expr d4161@expr d4158@r d4159@mr) (d2dcd@d2d3d@build-void)))) (cdr d4157@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" d4157@rhs))))) (car d4157@rhs)))) (set! d3096@expand-interaction-rhs*/init* (lambda (d4163@lhs* d4164@rhs* d4165@init* d4166@r d4167@mr) ((letrec ((d416d@f (lambda (d416f@lhs* d4170@rhs*) (if (null? d416f@lhs*) (map (lambda (d4173@x) (d3088@chi-expr d4173@x d4166@r d4167@mr)) d4165@init*) ((lambda (d4175@lhs d4176@rhs) ((lambda (d4179@t) (if (memv d4179@t '(defun)) ((lambda (d417b@rhs) (cons (list 'set! d4175@lhs d417b@rhs) (d416d@f (cdr d416f@lhs*) (cdr d4170@rhs*)))) (d3092@chi-defun (cdr d4176@rhs) d4166@r d4167@mr)) (if (memv d4179@t '(expr)) ((lambda (d417d@rhs) (cons (list 'set! d4175@lhs d417d@rhs) (d416d@f (cdr d416f@lhs*) (cdr d4170@rhs*)))) (d3088@chi-expr (cdr d4176@rhs) d4166@r d4167@mr)) (if (memv d4179@t '(top-expr)) ((lambda (d417f@e) (cons d417f@e (d416d@f (cdr d416f@lhs*) (cdr d4170@rhs*)))) (d3088@chi-expr (cdr d4176@rhs) d4166@r d4167@mr)) (error 'expand-interaction '"invallid" d4176@rhs))))) (car d4176@rhs))) (car d416f@lhs*) (car d4170@rhs*)))))) d416d@f) d4163@lhs* d4164@rhs*))) (set! d3098@chi-rhs* (lambda (d4181@rhs* d4182@r d4183@mr) ((letrec ((d4187@f (lambda (d4189@ls) (if (null? d4189@ls) '() ((lambda (d418b@a) (cons d418b@a (d4187@f (cdr d4189@ls)))) (d3094@chi-rhs (car d4189@ls) d4182@r d4183@mr)))))) d4187@f) d4181@rhs*))) (set! d309a@find-bound=? (lambda (d418d@x d418e@lhs* d418f@rhs*) (if (null? d418e@lhs*) '#f (if (d2e61@bound-id=? d418d@x (car d418e@lhs*)) (car d418f@rhs*) (d309a@find-bound=? d418d@x (cdr d418e@lhs*) (cdr d418f@rhs*)))))) (set! d309c@find-dups (lambda (d4193@ls) ((letrec ((d4195@f (lambda (d4197@ls d4198@dups) (if (null? d4197@ls) d4198@dups ((lambda (d419b@t) (if d419b@t ((lambda (d419d@x) (d4195@f (cdr d4197@ls) (cons (list (car d4197@ls) d419d@x) d4198@dups))) d419b@t) (d4195@f (cdr d4197@ls) d4198@dups))) (d309a@find-bound=? (car d4197@ls) (cdr d4197@ls) (cdr d4197@ls))))))) d4195@f) d4193@ls '()))) (set! d309e@chi-internal (lambda (d419f@e* d41a0@r d41a1@mr) ((lambda (d41a5@rib) (call-with-values (lambda () (d30b8@chi-body* (map (lambda (d41b7@x) (d2e47@add-subst d41a5@rib d41b7@x)) (d2e59@syntax->list d419f@e*)) d41a0@r d41a1@mr '() '() '() '() '() d41a5@rib '#f)) (lambda (d41b9@d41a8 d41ba@d41aa d41bb@d41ac d41bc@d41ae d41bd@d41b0 d41be@d41b2 d41bf@d41b4 d41c0@d41b6) ((lambda (d41c9@_exp* d41ca@kwd* d41cb@mod** d41cc@rhs* d41cd@lex* d41ce@mr d41cf@r d41d0@e*) (begin (if (null? d41d0@e*) (d3134@syntax-violation '#f '"no expression in body" d41d0@e*) (void)) ((lambda (d41d9@init*) ((lambda (d41db@rhs*) ((lambda () (d2dcf@d2d41@build-letrec* '#f (reverse d41cd@lex*) (reverse d41db@rhs*) (d2dcc@d2d3b@build-sequence '#f d41d9@init*))))) (d3098@chi-rhs* d41cc@rhs* d41cf@r d41ce@mr))) (d3084@chi-expr* (append (apply append (reverse d41cb@mod**)) d41d0@e*) d41cf@r d41ce@mr)))) d41c0@d41b6 d41bf@d41b4 d41be@d41b2 d41bd@d41b0 d41bc@d41ae d41bb@d41ac d41ba@d41aa d41b9@d41a8)))) (d2e13@make-empty-rib)))) (set! d30a0@parse-module (lambda (d41dd@e) ((lambda (d41df@t) ((lambda (d41e1@ls/false) (if d41e1@ls/false (apply (lambda (d41e3@export* d41e4@b*) (begin (if (not (for-all d2e5b@id? d41e3@export*)) (d3134@syntax-violation '#f '"module exports must be identifiers" d41dd@e) (void)) (values '#f (list->vector d41e3@export*) d41e4@b*))) d41e1@ls/false) ((lambda (d41e7@t) ((lambda (d41e9@ls/false) (if d41e9@ls/false (apply (lambda (d41eb@name d41ec@export* d41ed@b*) (begin (if (not (d2e5b@id? d41eb@name)) (d3134@syntax-violation '#f '"module name must be an identifier" d41dd@e) (void)) (if (not (for-all d2e5b@id? d41ec@export*)) (d3134@syntax-violation '#f '"module exports must be identifiers" d41dd@e) (void)) (values d41eb@name (list->vector d41ec@export*) d41ed@b*))) d41e9@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d41e7@t))) (d3066@syntax-dispatch d41e7@t '(_ any each-any . each-any)))) d41df@t))) (d3066@syntax-dispatch d41df@t '(_ each-any . each-any)))) d41dd@e))) (set! d30a2@make-module-interface (lambda d41f1@args ((lambda (d41f3@ret) (begin ((letrec ((d41f5@loop (lambda (d41f7@i d41f8@args) (if (null? d41f8@args) '() (begin (simple-struct-set! d41f3@ret d41f7@i (car d41f8@args)) (d41f5@loop (+ d41f7@i '1) (cdr d41f8@args))))))) d41f5@loop) '0 d41f1@args) d41f3@ret)) (make-simple-struct 'module-interface '4)))) (set! d30a4@module-interface? (lambda (d41fb@x) (and (simple-struct? d41fb@x) (eq? (simple-struct-name d41fb@x) 'module-interface)))) (set! d30a6@module-interface-first-mark (lambda (d41fd@x) (simple-struct-ref d41fd@x '0))) (set! d30a8@set-module-interface-first-mark! (lambda (d41ff@x d4200@val) (simple-struct-set! d41ff@x '0 d4200@val))) (set! d30aa@module-interface-exp-id-vec (lambda (d4203@x) (simple-struct-ref d4203@x '1))) (set! d30ac@set-module-interface-exp-id-vec! (lambda (d4205@x d4206@val) (simple-struct-set! d4205@x '1 d4206@val))) (set! d30ae@module-interface-exp-lab-vec (lambda (d4209@x) (simple-struct-ref d4209@x '2))) (set! d30b0@set-module-interface-exp-lab-vec! (lambda (d420b@x d420c@val) (simple-struct-set! d420b@x '2 d420c@val))) (set! d30b2@dummy '3) (set! d30b4@module-interface-exp-id* (lambda (d420f@iface d4210@id) ((lambda (d4214@diff-marks) (begin (set! d4214@diff-marks (lambda (d421b@ls d421c@x) (begin (if (null? d421b@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (d421f@a) (if (eq? d421f@a d421c@x) '() (cons d421f@a (d4214@diff-marks (cdr d421b@ls) d421c@x)))) (car d421b@ls))))) ((lambda (d4215@diff d4216@id-vec) (if (null? d4215@diff) d4216@id-vec (vector-map (lambda (d4219@x) (d2e23@make-stx (d2e27@stx-expr d4219@x) (append d4215@diff (d2e2b@stx-mark* d4219@x)) '() '())) d4216@id-vec))) (d4214@diff-marks (d2e2b@stx-mark* d4210@id) (d30a6@module-interface-first-mark d420f@iface)) (d30aa@module-interface-exp-id-vec d420f@iface)))) '#f))) (set! d30b6@chi-internal-module (lambda (d4221@e d4222@r d4223@mr d4224@lex* d4225@rhs* d4226@mod** d4227@kwd*) (call-with-values (lambda () (d30a0@parse-module d4221@e)) (lambda (d4235@d4230 d4236@d4232 d4237@d4234) ((lambda (d423b@e* d423c@exp-id* d423d@name) ((lambda (d4241@rib) ((lambda (d4243@e*) ((lambda () (call-with-values (lambda () (d30b8@chi-body* d4243@e* d4222@r d4223@mr d4224@lex* d4225@rhs* d4226@mod** d4227@kwd* '() d4241@rib '#f)) (lambda (d4255@d4246 d4256@d4248 d4257@d424a d4258@d424c d4259@d424e d425a@d4250 d425b@d4252 d425c@d4254) ((lambda (d4265@_exp* d4266@kwd* d4267@mod** d4268@rhs* d4269@lex* d426a@mr d426b@r d426c@e*) ((lambda (d4275@exp-lab* d4276@mod**) (if (not d423d@name) (values d4269@lex* d4268@rhs* d423c@exp-id* d4275@exp-lab* d426b@r d426a@mr d4276@mod** d4266@kwd*) ((lambda (d4279@lab d427a@iface) (values d4269@lex* d4268@rhs* (vector d423d@name) (vector d4279@lab) (cons (cons d4279@lab (cons '$module d427a@iface)) d426b@r) (cons (cons d4279@lab (cons '$module d427a@iface)) d426a@mr) d4276@mod** d4266@kwd*)) (d2df1@gen-label 'module) (d30a2@make-module-interface (car (d2e2b@stx-mark* d423d@name)) (vector-map (lambda (d427d@x) (d2e23@make-stx (d2e27@stx-expr d427d@x) (d2e2b@stx-mark* d427d@x) '() '())) d423c@exp-id*) d4275@exp-lab*)))) (vector-map (lambda (d427f@x) (or (d2e75@id->label (d2e23@make-stx (d2e5d@id->sym d427f@x) (d2e2b@stx-mark* d427f@x) (list d4241@rib) '())) (d3134@syntax-violation '#f '"cannot find module export" d427f@x))) d423c@exp-id*) (cons d426c@e* d4267@mod**))) d425c@d4254 d425b@d4252 d425a@d4250 d4259@d424e d4258@d424c d4257@d424a d4256@d4248 d4255@d4246)))))) (map (lambda (d4281@x) (d2e47@add-subst d4241@rib d4281@x)) (d2e59@syntax->list d423b@e*)))) (d2e13@make-empty-rib))) d4237@d4234 d4236@d4232 d4235@d4230))))) (set! d30b8@chi-body* (lambda (d4283@e* d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d4289@kwd* d428a@exp* d428b@rib d428c@top?) (if (null? d4283@e*) (values d4283@e* d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d4289@kwd* d428a@exp*) ((lambda (d4297@e) (call-with-values (lambda () (d2e83@syntax-type d4297@e d4284@r)) (lambda (d429f@d429a d42a0@d429c d42a1@d429e) ((lambda (d42a5@kwd d42a6@value d42a7@type) ((lambda (d42ab@kwd*) ((lambda (d42ad@t) (if (memv d42ad@t '(define)) (call-with-values (lambda () (d2fea@parse-define d4297@e)) (lambda (d42b3@d42b0 d42b4@d42b2) ((lambda (d42b7@rhs d42b8@id) (begin (if (d2e69@bound-id-member? d42b8@id d42ab@kwd*) (d3134@syntax-violation '#f '"cannot redefine keyword" d4297@e) (void)) (call-with-values (lambda () (d2df5@gen-define-label+loc d42b8@id d428b@rib)) (lambda (d42bf@d42bc d42c0@d42be) ((lambda (d42c3@lex d42c4@lab) (begin (d2e15@extend-rib! d428b@rib d42b8@id d42c4@lab) (d30b8@chi-body* (cdr d4283@e*) (d2ff8@add-lexical d42c4@lab d42c3@lex d4284@r) d4285@mr (cons d42c3@lex d4286@lex*) (cons d42b7@rhs d4287@rhs*) d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?))) d42c0@d42be d42bf@d42bc))))) d42b4@d42b2 d42b3@d42b0))) (if (memv d42ad@t '(define-syntax)) (call-with-values (lambda () (d2fec@parse-define-syntax d4297@e)) (lambda (d42cb@d42c8 d42cc@d42ca) ((lambda (d42cf@rhs d42d0@id) (begin (if (d2e69@bound-id-member? d42d0@id d42ab@kwd*) (d3134@syntax-violation '#f '"cannot redefine keyword" d4297@e) (void)) ((lambda (d42d3@lab d42d4@expanded-rhs) (begin (d2e15@extend-rib! d428b@rib d42d0@id d42d3@lab) ((lambda (d42d7@b) (d30b8@chi-body* (cdr d4283@e*) (cons (cons d42d3@lab d42d7@b) d4284@r) (cons (cons d42d3@lab d42d7@b) d4285@mr) d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?)) (d2e99@make-eval-transformer d42d4@expanded-rhs)))) (d2df7@gen-define-label d42d0@id d428b@rib) (d30ba@expand-transformer d42cf@rhs d4285@mr)))) d42cc@d42ca d42cb@d42c8))) (if (memv d42ad@t '(let-syntax letrec-syntax)) ((lambda (d42d9@t) ((lambda (d42db@ls/false) (if (and d42db@ls/false (apply (lambda (d42dd@xlhs* d42de@xrhs* d42df@xbody*) (if (not (d2e65@valid-bound-ids? d42dd@xlhs*)) (d3134@syntax-violation '#f '"invalid identifiers" d4297@e) (void))) d42db@ls/false)) (apply (lambda (d42e3@xlhs* d42e4@xrhs* d42e5@xbody*) ((lambda (d42e9@xlab*) ((lambda (d42eb@xrib) ((lambda (d42ed@xb*) ((lambda () (d30b8@chi-body* (append (map (lambda (d42ef@x) (d2e47@add-subst d42eb@xrib d42ef@x)) d42e5@xbody*) (cdr d4283@e*)) (append (map cons d42e9@xlab* d42ed@xb*) d4284@r) (append (map cons d42e9@xlab* d42ed@xb*) d4285@mr) d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?)))) (map (lambda (d42f1@x) (d2e99@make-eval-transformer (d30ba@expand-transformer (if (eq? d42a7@type 'let-syntax) d42f1@x (d2e47@add-subst d42eb@xrib d42f1@x)) d4285@mr))) d42e4@xrhs*))) (d2e1f@make-full-rib d42e3@xlhs* d42e9@xlab*))) (map d2df1@gen-label d42e3@xlhs*))) d42db@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d42d9@t))) (d3066@syntax-dispatch d42d9@t '(_ #(each (any any)) . each-any)))) d4297@e) (if (memv d42ad@t '(begin)) ((lambda (d42f3@t) ((lambda (d42f5@ls/false) (if d42f5@ls/false (apply (lambda (d42f7@x*) (d30b8@chi-body* (append d42f7@x* (cdr d4283@e*)) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?)) d42f5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d42f3@t))) (d3066@syntax-dispatch d42f3@t '(_ . each-any)))) d4297@e) (if (memv d42ad@t '(global-macro global-macro!)) (d30b8@chi-body* (cons (d2e47@add-subst d428b@rib (d3082@chi-global-macro d42a6@value d4297@e)) (cdr d4283@e*)) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?) (if (memv d42ad@t '(local-macro local-macro!)) (d30b8@chi-body* (cons (d2e47@add-subst d428b@rib (d3080@chi-local-macro d42a6@value d4297@e)) (cdr d4283@e*)) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?) (if (memv d42ad@t '(macro macro!)) (d30b8@chi-body* (cons (d2e47@add-subst d428b@rib (d307e@chi-macro d42a6@value d4297@e)) (cdr d4283@e*)) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?) (if (memv d42ad@t '(module)) (call-with-values (lambda () (d30b6@chi-internal-module d4297@e d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd*)) (lambda (d4309@d42fa d430a@d42fc d430b@d42fe d430c@d4300 d430d@d4302 d430e@d4304 d430f@d4306 d4310@d4308) ((lambda (d4319@kwd* d431a@mod** d431b@mr d431c@r d431d@m-exp-lab* d431e@m-exp-id* d431f@rhs* d4320@lex*) (begin (vector-for-each (lambda (d4329@id d432a@lab) (d2e15@extend-rib! d428b@rib d4329@id d432a@lab)) d431e@m-exp-id* d431d@m-exp-lab*) (d30b8@chi-body* (cdr d4283@e*) d431c@r d431b@mr d4320@lex* d431f@rhs* d431a@mod** d4319@kwd* d428a@exp* d428b@rib d428c@top?))) d4310@d4308 d430f@d4306 d430e@d4304 d430d@d4302 d430c@d4300 d430b@d42fe d430a@d42fc d4309@d42fa))) (if (memv d42ad@t '(library)) (begin (d3116@library-expander (d2e71@stx->datum d4297@e)) (d30b8@chi-body* (cdr d4283@e*) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?)) (if (memv d42ad@t '(export)) ((lambda (d432d@t) ((lambda (d432f@ls/false) (if d432f@ls/false (apply (lambda (d4331@exp-decl*) (d30b8@chi-body* (cdr d4283@e*) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* (append d4331@exp-decl* d428a@exp*) d428b@rib d428c@top?)) d432f@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d432d@t))) (d3066@syntax-dispatch d432d@t '(_ . each-any)))) d4297@e) (if (memv d42ad@t '(import)) ((lambda () ((lambda (d4334@module-import? d4336@module-import d4338@library-import) (begin (set! d4334@module-import? (lambda (d4387@e) ((lambda (d4389@t) ((lambda (d438b@ls/false) (if (and d438b@ls/false (apply (lambda (d438d@id) (d2e5b@id? d438d@id)) d438b@ls/false)) (apply (lambda (d438f@id) '#t) d438b@ls/false) ((lambda (d4391@t) ((lambda (d4393@ls/false) (if d4393@ls/false (apply (lambda (d4395@imp*) '#f) d4393@ls/false) ((lambda (d4397@t) ((lambda (d4399@ls/false) (if d4399@ls/false (apply (lambda () (d3134@syntax-violation '#f '"malformed import form" d4387@e)) d4399@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4397@t))) (d3066@syntax-dispatch d4397@t '_))) d4391@t))) (d3066@syntax-dispatch d4391@t '(_ . each-any)))) d4389@t))) (d3066@syntax-dispatch d4389@t '(_ any)))) d4387@e))) (set! d4336@module-import (lambda (d4365@e d4366@r) ((lambda (d4369@t) ((lambda (d436b@ls/false) (if (and d436b@ls/false (apply (lambda (d436d@id) (d2e5b@id? d436d@id)) d436b@ls/false)) (apply (lambda (d436f@id) (call-with-values (lambda () (d2e83@syntax-type d436f@id d4366@r)) (lambda (d4377@d4372 d4378@d4374 d4379@d4376) ((lambda (d437d@kwd d437e@value d437f@type) ((lambda (d4383@t) (if (memv d4383@t '($module)) ((lambda (d4385@iface) (values (d30b4@module-interface-exp-id* d4385@iface d436f@id) (d30ae@module-interface-exp-lab-vec d4385@iface))) d437e@value) (d3134@syntax-violation '#f '"invalid import" d4365@e))) d437f@type)) d4379@d4376 d4378@d4374 d4377@d4372)))) d436b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4369@t))) (d3066@syntax-dispatch d4369@t '(_ any)))) d4365@e))) (set! d4338@library-import (lambda (d4349@e) ((lambda (d434b@t) ((lambda (d434d@ls/false) (if d434d@ls/false (apply (lambda (d434f@ctxt d4350@imp*) (call-with-values (lambda () (d30c2@parse-import-spec* (d313a@syntax->datum d4350@imp*))) (lambda (d4357@d4354 d4358@d4356) ((lambda (d435b@subst-labels d435c@subst-names) (values (vector-map (lambda (d435f@name) (d2e39@datum->stx d434f@ctxt d435f@name)) d435c@subst-names) d435b@subst-labels)) d4358@d4356 d4357@d4354)))) d434d@ls/false) ((lambda (d4361@t) ((lambda (d4363@ls/false) (if d4363@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid import form" d4349@e)) d4363@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4361@t))) (d3066@syntax-dispatch d4361@t '_))) d434b@t))) (d3066@syntax-dispatch d434b@t '(any . each-any)))) d4349@e))) (begin (call-with-values (lambda () (if (d4334@module-import? d4297@e) (d4336@module-import d4297@e d4284@r) (d4338@library-import d4297@e))) (lambda (d433d@d433a d433e@d433c) ((lambda (d4341@lab* d4342@id*) (vector-for-each (lambda (d4345@id d4346@lab) (d2e15@extend-rib! d428b@rib d4345@id d4346@lab)) d4342@id* d4341@lab*)) d433e@d433c d433d@d433a))) (d30b8@chi-body* (cdr d4283@e*) d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?)))) '#f '#f '#f))) (if d428c@top? (d30b8@chi-body* (cdr d4283@e*) d4284@r d4285@mr (cons (d2ded@gen-lexical 'dummy) d4286@lex*) (cons (cons 'top-expr d4297@e) d4287@rhs*) d4288@mod** d42ab@kwd* d428a@exp* d428b@rib d428c@top?) (values d4283@e* d4284@r d4285@mr d4286@lex* d4287@rhs* d4288@mod** d42ab@kwd* d428a@exp*)))))))))))))) d42a7@type)) (if (d2e5b@id? d42a5@kwd) (cons d42a5@kwd d4289@kwd*) d4289@kwd*))) d42a1@d429e d42a0@d429c d429f@d429a)))) (car d4283@e*))))) (set! d30ba@expand-transformer (lambda (d439b@expr d439c@r) ((lambda (d439f@rtc) ((lambda (d43a1@expanded-rhs) (begin (for-each ((lambda (d43a3@mark-visit) (lambda (d43a5@x) (begin (d2c91@d2ad4@invoke-library d43a5@x) (d43a3@mark-visit d43a5@x)))) (d30ca@vis-collector)) (d439f@rtc)) d43a1@expanded-rhs)) ((lambda (d43af@d43a8 d43b0@d43aa d43b1@d43ac d43b2@d43ae) ((lambda (d43b7@swap) (dynamic-wind d43b7@swap (lambda () (d3088@chi-expr d439b@expr d439c@r d439c@r)) d43b7@swap)) (lambda () (begin ((lambda (d43b9@t) (begin (d43af@d43a8 d43b1@d43ac) (set! d43b1@d43ac d43b9@t))) (d43af@d43a8)) ((lambda (d43bb@t) (begin (d43b0@d43aa d43b2@d43ae) (set! d43b2@d43ae d43bb@t))) (d43b0@d43aa)))))) d30c8@inv-collector d30ca@vis-collector d439f@rtc (lambda (d43bd@x) (values))))) (d30c6@make-collector)))) (set! d30bc@parse-exports (lambda (d43bf@exp*) ((letrec ((d43c1@f (lambda (d43c3@exp* d43c4@int* d43c5@ext*) (if (null? d43c3@exp*) (begin (if (not (d2e65@valid-bound-ids? d43c5@ext*)) (d3134@syntax-violation 'export '"invalid exports" (d309c@find-dups d43c5@ext*)) (void)) (values (map d313a@syntax->datum d43c5@ext*) d43c4@int*)) ((lambda (d43c9@t) ((lambda (d43cb@ls/false) (if d43cb@ls/false (apply (lambda (d43cd@rename d43ce@i* d43cf@e*) (begin (if (not (and (eq? (d313a@syntax->datum d43cd@rename) 'rename) (for-all d2e5b@id? d43ce@i*) (for-all d2e5b@id? d43cf@e*))) (d3134@syntax-violation 'export '"invalid export specifier" (car d43c3@exp*)) (void)) (d43c1@f (cdr d43c3@exp*) (append d43ce@i* d43c4@int*) (append d43cf@e* d43c5@ext*)))) d43cb@ls/false) ((lambda (d43d3@t) ((lambda (d43d5@ls/false) (if d43d5@ls/false (apply (lambda (d43d7@ie) (begin (if (not (d2e5b@id? d43d7@ie)) (d3134@syntax-violation 'export '"invalid export" d43d7@ie) (void)) (d43c1@f (cdr d43c3@exp*) (cons d43d7@ie d43c4@int*) (cons d43d7@ie d43c5@ext*)))) d43d5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d43d3@t))) (d3066@syntax-dispatch d43d3@t 'any))) d43c9@t))) (d3066@syntax-dispatch d43c9@t '(any . #(each (any any)))))) (car d43c3@exp*)))))) d43c1@f) d43bf@exp* '() '()))) (set! d30be@parse-library-name (lambda (d43d9@spec) ((lambda (d43dc@parse) (begin (set! d43dc@parse (lambda (d43e9@x) ((lambda (d43eb@t) ((lambda (d43ed@ls/false) (if (and d43ed@ls/false (apply (lambda (d43ef@v*) (for-all (lambda (d43f1@x) ((lambda (d43f3@x) (and (integer? d43f3@x) (exact? d43f3@x))) (d313a@syntax->datum d43f1@x))) d43ef@v*)) d43ed@ls/false)) (apply (lambda (d43f5@v*) (values '() (map d313a@syntax->datum d43f5@v*))) d43ed@ls/false) ((lambda (d43f7@t) ((lambda (d43f9@ls/false) (if (and d43f9@ls/false (apply (lambda (d43fb@x d43fc@rest) (symbol? (d313a@syntax->datum d43fb@x))) d43f9@ls/false)) (apply (lambda (d43ff@x d4400@rest) (call-with-values (lambda () (d43dc@parse d4400@rest)) (lambda (d4407@d4404 d4408@d4406) ((lambda (d440b@v* d440c@x*) (values (cons (d313a@syntax->datum d43ff@x) d440c@x*) d440b@v*)) d4408@d4406 d4407@d4404)))) d43f9@ls/false) ((lambda (d440f@t) ((lambda (d4411@ls/false) (if d4411@ls/false (apply (lambda () (values '() '())) d4411@ls/false) ((lambda (d4413@t) ((lambda (d4415@ls/false) (if d4415@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid library name" d43d9@spec)) d4415@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4413@t))) (d3066@syntax-dispatch d4413@t '_))) d440f@t))) (d3066@syntax-dispatch d440f@t '()))) d43f7@t))) (d3066@syntax-dispatch d43f7@t '(any . any)))) d43eb@t))) (d3066@syntax-dispatch d43eb@t '(each-any)))) d43e9@x))) (call-with-values (lambda () (d43dc@parse d43d9@spec)) (lambda (d43e1@d43de d43e2@d43e0) ((lambda (d43e5@ver* d43e6@name*) (begin (if (null? d43e6@name*) (d3134@syntax-violation '#f '"empty library name" d43d9@spec) (void)) (values d43e6@name* d43e5@ver*))) d43e2@d43e0 d43e1@d43de))))) '#f))) (set! d30c0@parse-library (lambda (d4417@e) ((lambda (d4419@t) ((lambda (d441b@ls/false) (if (and d441b@ls/false (apply (lambda (d441d@library d441e@name* d441f@export d4420@exp* d4421@import d4422@imp* d4423@b*) (and (eq? (d313a@syntax->datum d441f@export) 'export) (eq? (d313a@syntax->datum d4421@import) 'import) (eq? (d313a@syntax->datum d441d@library) 'library))) d441b@ls/false)) (apply (lambda (d442b@library d442c@name* d442d@export d442e@exp* d442f@import d4430@imp* d4431@b*) (values d442c@name* d442e@exp* d4430@imp* d4431@b*)) d441b@ls/false) ((lambda (d4439@t) ((lambda (d443b@ls/false) (if d443b@ls/false (apply (lambda () (d3134@syntax-violation '#f '"malformed library" d4417@e)) d443b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4439@t))) (d3066@syntax-dispatch d4439@t '_))) d4419@t))) (d3066@syntax-dispatch d4419@t '(any each-any (any . each-any) (any . each-any) . each-any)))) d4417@e))) (set! d30c2@parse-import-spec* ((lambda () ((lambda (d443e@idsyn? d4440@dup-error d4442@merge-substs d4444@exclude* d4446@find* d4448@rem* d444a@remove-dups d444c@parse-library-name d444e@import-library d4450@get-import d4452@add-imports!) (begin (set! d443e@idsyn? (lambda (d4647@x) (symbol? (d313a@syntax->datum d4647@x)))) (set! d4440@dup-error (lambda (d4645@name) (d3134@syntax-violation 'import '"two imports with different bindings" d4645@name))) (set! d4442@merge-substs (lambda (d4633@s d4634@subst) ((lambda (d4638@insert-to-subst) (begin (set! d4638@insert-to-subst (lambda (d4639@a d463a@subst) ((lambda (d463d@name d463e@label) ((lambda (d4641@t) (if d4641@t ((lambda (d4643@x) (if (eq? (cdr d4643@x) d463e@label) d463a@subst (d4440@dup-error d463d@name))) d4641@t) (cons d4639@a d463a@subst))) (assq d463d@name d463a@subst))) (car d4639@a) (cdr d4639@a)))) (if (null? d4633@s) d4634@subst (d4638@insert-to-subst (car d4633@s) (d4442@merge-substs (cdr d4633@s) d4634@subst))))) '#f))) (set! d4444@exclude* (lambda (d4603@sym* d4604@subst) ((lambda (d4608@exclude) (begin (set! d4608@exclude (lambda (d4621@sym d4622@subst) (if (null? d4622@subst) (d3134@syntax-violation 'import '"cannot rename unbound identifier" d4621@sym) (if (eq? d4621@sym (caar d4622@subst)) (values (cdar d4622@subst) (cdr d4622@subst)) ((lambda (d4625@a) (call-with-values (lambda () (d4608@exclude d4621@sym (cdr d4622@subst))) (lambda (d462b@d4628 d462c@d462a) ((lambda (d462f@subst d4630@old) (values d4630@old (cons d4625@a d462f@subst))) d462c@d462a d462b@d4628)))) (car d4622@subst)))))) (if (null? d4603@sym*) (values '() d4604@subst) (call-with-values (lambda () (d4608@exclude (car d4603@sym*) d4604@subst)) (lambda (d460d@d460a d460e@d460c) ((lambda (d4611@subst d4612@old) (call-with-values (lambda () (d4444@exclude* (cdr d4603@sym*) d4611@subst)) (lambda (d4619@d4616 d461a@d4618) ((lambda (d461d@subst d461e@old*) (values (cons d4612@old d461e@old*) d461d@subst)) d461a@d4618 d4619@d4616)))) d460e@d460c d460d@d460a)))))) '#f))) (set! d4446@find* (lambda (d45fb@sym* d45fc@subst) (map (lambda (d45ff@x) ((lambda (d4601@t) (if d4601@t (cdr d4601@t) (d3134@syntax-violation 'import '"cannot find identifier" d45ff@x))) (assq d45ff@x d45fc@subst))) d45fb@sym*))) (set! d4448@rem* (lambda (d45f3@sym* d45f4@subst) ((letrec ((d45f7@f (lambda (d45f9@subst) (if (null? d45f9@subst) '() (if (memq (caar d45f9@subst) d45f3@sym*) (d45f7@f (cdr d45f9@subst)) (cons (car d45f9@subst) (d45f7@f (cdr d45f9@subst)))))))) d45f7@f) d45f4@subst))) (set! d444a@remove-dups (lambda (d45f1@ls) (if (null? d45f1@ls) '() (if (memq (car d45f1@ls) (cdr d45f1@ls)) (d444a@remove-dups (cdr d45f1@ls)) (cons (car d45f1@ls) (d444a@remove-dups (cdr d45f1@ls))))))) (set! d444c@parse-library-name (lambda (d4509@spec) ((lambda (d450c@subversion? d450e@subversion-pred d4510@version-pred) (begin (set! d450c@subversion? (lambda (d45ed@x) ((lambda (d45ef@x) (and (integer? d45ef@x) (exact? d45ef@x) (>= d45ef@x '0))) (d313a@syntax->datum d45ed@x)))) (set! d450e@subversion-pred (lambda (d458d@x*) ((lambda (d458f@t) ((lambda (d4591@ls/false) (if (and d4591@ls/false (apply (lambda (d4593@n) (d450c@subversion? d4593@n)) d4591@ls/false)) (apply (lambda (d4595@n) (lambda (d4597@x) (= d4597@x (d313a@syntax->datum d4595@n)))) d4591@ls/false) ((lambda (d4599@t) ((lambda (d459b@ls/false) (if (and d459b@ls/false (apply (lambda (d459d@p? d459e@sub*) (eq? (d313a@syntax->datum d459d@p?) 'and)) d459b@ls/false)) (apply (lambda (d45a1@p? d45a2@sub*) ((lambda (d45a5@p*) (lambda (d45a7@x) (for-all (lambda (d45a9@p) (d45a9@p d45a7@x)) d45a5@p*))) (map d450e@subversion-pred d45a2@sub*))) d459b@ls/false) ((lambda (d45ab@t) ((lambda (d45ad@ls/false) (if (and d45ad@ls/false (apply (lambda (d45af@p? d45b0@sub*) (eq? (d313a@syntax->datum d45af@p?) 'or)) d45ad@ls/false)) (apply (lambda (d45b3@p? d45b4@sub*) ((lambda (d45b7@p*) (lambda (d45b9@x) (exists (lambda (d45bb@p) (d45bb@p d45b9@x)) d45b7@p*))) (map d450e@subversion-pred d45b4@sub*))) d45ad@ls/false) ((lambda (d45bd@t) ((lambda (d45bf@ls/false) (if (and d45bf@ls/false (apply (lambda (d45c1@p? d45c2@sub) (eq? (d313a@syntax->datum d45c1@p?) 'not)) d45bf@ls/false)) (apply (lambda (d45c5@p? d45c6@sub) ((lambda (d45c9@p) (lambda (d45cb@x) (not (d45c9@p d45cb@x)))) (d450e@subversion-pred d45c6@sub))) d45bf@ls/false) ((lambda (d45cd@t) ((lambda (d45cf@ls/false) (if (and d45cf@ls/false (apply (lambda (d45d1@p? d45d2@n) (and (eq? (d313a@syntax->datum d45d1@p?) '<=) (d450c@subversion? d45d2@n))) d45cf@ls/false)) (apply (lambda (d45d5@p? d45d6@n) (lambda (d45d9@x) (<= d45d9@x (d313a@syntax->datum d45d6@n)))) d45cf@ls/false) ((lambda (d45db@t) ((lambda (d45dd@ls/false) (if (and d45dd@ls/false (apply (lambda (d45df@p? d45e0@n) (and (eq? (d313a@syntax->datum d45df@p?) '>=) (d450c@subversion? d45e0@n))) d45dd@ls/false)) (apply (lambda (d45e3@p? d45e4@n) (lambda (d45e7@x) (>= d45e7@x (d313a@syntax->datum d45e4@n)))) d45dd@ls/false) ((lambda (d45e9@t) ((lambda (d45eb@ls/false) (if d45eb@ls/false (apply (lambda () (d3134@syntax-violation 'import '"invalid sub-version spec" d4509@spec d458d@x*)) d45eb@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d45e9@t))) (d3066@syntax-dispatch d45e9@t '_))) d45db@t))) (d3066@syntax-dispatch d45db@t '(any any)))) d45cd@t))) (d3066@syntax-dispatch d45cd@t '(any any)))) d45bd@t))) (d3066@syntax-dispatch d45bd@t '(any any)))) d45ab@t))) (d3066@syntax-dispatch d45ab@t '(any . each-any)))) d4599@t))) (d3066@syntax-dispatch d4599@t '(any . each-any)))) d458f@t))) (d3066@syntax-dispatch d458f@t 'any))) d458d@x*))) (set! d4510@version-pred (lambda (d453d@x*) ((lambda (d453f@t) ((lambda (d4541@ls/false) (if d4541@ls/false (apply (lambda () (lambda (d4543@x) '#t)) d4541@ls/false) ((lambda (d4545@t) ((lambda (d4547@ls/false) (if (and d4547@ls/false (apply (lambda (d4549@c d454a@ver*) (eq? (d313a@syntax->datum d4549@c) 'and)) d4547@ls/false)) (apply (lambda (d454d@c d454e@ver*) ((lambda (d4551@p*) (lambda (d4553@x) (for-all (lambda (d4555@p) (d4555@p d4553@x)) d4551@p*))) (map d4510@version-pred d454e@ver*))) d4547@ls/false) ((lambda (d4557@t) ((lambda (d4559@ls/false) (if (and d4559@ls/false (apply (lambda (d455b@c d455c@ver*) (eq? (d313a@syntax->datum d455b@c) 'or)) d4559@ls/false)) (apply (lambda (d455f@c d4560@ver*) ((lambda (d4563@p*) (lambda (d4565@x) (exists (lambda (d4567@p) (d4567@p d4565@x)) d4563@p*))) (map d4510@version-pred d4560@ver*))) d4559@ls/false) ((lambda (d4569@t) ((lambda (d456b@ls/false) (if (and d456b@ls/false (apply (lambda (d456d@c d456e@ver) (eq? (d313a@syntax->datum d456d@c) 'not)) d456b@ls/false)) (apply (lambda (d4571@c d4572@ver) ((lambda (d4575@p) (lambda (d4577@x) (not (d4575@p d4577@x)))) (d4510@version-pred d4572@ver))) d456b@ls/false) ((lambda (d4579@t) ((lambda (d457b@ls/false) (if d457b@ls/false (apply (lambda (d457d@sub*) ((lambda (d457f@p*) (lambda (d4581@x) ((letrec ((d4583@f (lambda (d4585@p* d4586@x) (if (null? d4585@p*) '#t (if (null? d4586@x) '#f (and ((car d4585@p*) (car d4586@x)) (d4583@f (cdr d4585@p*) (cdr d4586@x)))))))) d4583@f) d457f@p* d4581@x))) (map d450e@subversion-pred d457d@sub*))) d457b@ls/false) ((lambda (d4589@t) ((lambda (d458b@ls/false) (if d458b@ls/false (apply (lambda () (d3134@syntax-violation 'import '"invalid version spec" d4509@spec d453d@x*)) d458b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4589@t))) (d3066@syntax-dispatch d4589@t '_))) d4579@t))) (d3066@syntax-dispatch d4579@t 'each-any))) d4569@t))) (d3066@syntax-dispatch d4569@t '(any any)))) d4557@t))) (d3066@syntax-dispatch d4557@t '(any . each-any)))) d4545@t))) (d3066@syntax-dispatch d4545@t '(any . each-any)))) d453f@t))) (d3066@syntax-dispatch d453f@t '()))) d453d@x*))) ((letrec ((d4511@f (lambda (d4513@x) ((lambda (d4515@t) ((lambda (d4517@ls/false) (if d4517@ls/false (apply (lambda (d4519@version-spec*) (values '() (d4510@version-pred d4519@version-spec*))) d4517@ls/false) ((lambda (d451b@t) ((lambda (d451d@ls/false) (if (and d451d@ls/false (apply (lambda (d451f@x d4520@x*) (d443e@idsyn? d451f@x)) d451d@ls/false)) (apply (lambda (d4523@x d4524@x*) (call-with-values (lambda () (d4511@f d4524@x*)) (lambda (d452b@d4528 d452c@d452a) ((lambda (d452f@pred d4530@name) (values (cons (d313a@syntax->datum d4523@x) d4530@name) d452f@pred)) d452c@d452a d452b@d4528)))) d451d@ls/false) ((lambda (d4533@t) ((lambda (d4535@ls/false) (if d4535@ls/false (apply (lambda () (values '() (lambda (d4537@x) '#t))) d4535@ls/false) ((lambda (d4539@t) ((lambda (d453b@ls/false) (if d453b@ls/false (apply (lambda () (d3134@syntax-violation '#f '"invalid import spec" d4509@spec)) d453b@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4539@t))) (d3066@syntax-dispatch d4539@t '_))) d4533@t))) (d3066@syntax-dispatch d4533@t '()))) d451b@t))) (d3066@syntax-dispatch d451b@t '(any . any)))) d4515@t))) (d3066@syntax-dispatch d4515@t '(each-any)))) d4513@x)))) d4511@f) d4509@spec))) '#f '#f '#f))) (set! d444e@import-library (lambda (d44f9@spec*) (call-with-values (lambda () (d444c@parse-library-name d44f9@spec*)) (lambda (d44ff@d44fc d4500@d44fe) ((lambda (d4503@pred d4504@name) (begin (if (null? d4504@name) (d3134@syntax-violation 'import '"empty library name" d44f9@spec*) (void)) ((lambda (d4507@lib) (begin (if (not d4507@lib) (d3134@syntax-violation 'import '"cannot find library with required name" d4504@name) (void)) (if (not (d4503@pred (d2c64@d2a7a@library-version d4507@lib))) (d3134@syntax-violation 'import '"library does not satisfy version specification" d44f9@spec* d4507@lib) (void)) ((d30cc@imp-collector) d4507@lib) (d2c6c@d2a8a@library-subst d4507@lib))) (d2c8a@d2ac6@find-library-by-name d4504@name)))) d4500@d44fe d44ff@d44fc))))) (set! d4450@get-import (lambda (d446b@spec) ((lambda (d446d@t) ((lambda (d446f@ls/false) (if (and d446f@ls/false (apply (lambda (d4471@x d4472@x*) (not (memq (d313a@syntax->datum d4471@x) '(for rename except only prefix library)))) d446f@ls/false)) (apply (lambda (d4475@x d4476@x*) (d444e@import-library (cons d4475@x d4476@x*))) d446f@ls/false) ((lambda (d4479@t) ((lambda (d447b@ls/false) (if (and d447b@ls/false (apply (lambda (d447d@rename d447e@isp d447f@old* d4480@new*) (and (eq? (d313a@syntax->datum d447d@rename) 'rename) (for-all d443e@idsyn? d447f@old*) (for-all d443e@idsyn? d4480@new*))) d447b@ls/false)) (apply (lambda (d4485@rename d4486@isp d4487@old* d4488@new*) ((lambda (d448d@subst d448e@old* d448f@new*) ((lambda (d4493@old-label*) ((lambda (d4495@subst) (d4442@merge-substs (map cons d448f@new* d4493@old-label*) d4495@subst)) (d4448@rem* d448e@old* d448d@subst))) (d4446@find* d448e@old* d448d@subst))) (d4450@get-import d4486@isp) (map d313a@syntax->datum d4487@old*) (map d313a@syntax->datum d4488@new*))) d447b@ls/false) ((lambda (d4497@t) ((lambda (d4499@ls/false) (if (and d4499@ls/false (apply (lambda (d449b@except d449c@isp d449d@sym*) (and (eq? (d313a@syntax->datum d449b@except) 'except) (for-all d443e@idsyn? d449d@sym*))) d4499@ls/false)) (apply (lambda (d44a1@except d44a2@isp d44a3@sym*) ((lambda (d44a7@subst) (d4448@rem* (map d313a@syntax->datum d44a3@sym*) d44a7@subst)) (d4450@get-import d44a2@isp))) d4499@ls/false) ((lambda (d44a9@t) ((lambda (d44ab@ls/false) (if (and d44ab@ls/false (apply (lambda (d44ad@only d44ae@isp d44af@sym*) (and (eq? (d313a@syntax->datum d44ad@only) 'only) (for-all d443e@idsyn? d44af@sym*))) d44ab@ls/false)) (apply (lambda (d44b3@only d44b4@isp d44b5@sym*) ((lambda (d44b9@subst d44ba@sym*) ((lambda (d44bd@sym*) ((lambda (d44bf@lab*) (map cons d44bd@sym* d44bf@lab*)) (d4446@find* d44bd@sym* d44b9@subst))) (d444a@remove-dups d44ba@sym*))) (d4450@get-import d44b4@isp) (map d313a@syntax->datum d44b5@sym*))) d44ab@ls/false) ((lambda (d44c1@t) ((lambda (d44c3@ls/false) (if (and d44c3@ls/false (apply (lambda (d44c5@prefix d44c6@isp d44c7@p) (and (eq? (d313a@syntax->datum d44c5@prefix) 'prefix) (d443e@idsyn? d44c7@p))) d44c3@ls/false)) (apply (lambda (d44cb@prefix d44cc@isp d44cd@p) ((lambda (d44d1@subst d44d2@prefix) (map (lambda (d44d5@x) (cons (string->symbol (string-append d44d2@prefix (symbol->string (car d44d5@x)))) (cdr d44d5@x))) d44d1@subst)) (d4450@get-import d44cc@isp) (symbol->string (d313a@syntax->datum d44cd@p)))) d44c3@ls/false) ((lambda (d44d7@t) ((lambda (d44d9@ls/false) (if (and d44d9@ls/false (apply (lambda (d44db@library d44dc@spec*) (eq? (d313a@syntax->datum d44db@library) 'library)) d44d9@ls/false)) (apply (lambda (d44df@library d44e0@spec*) (d444e@import-library d44e0@spec*)) d44d9@ls/false) ((lambda (d44e3@t) ((lambda (d44e5@ls/false) (if (and d44e5@ls/false (apply (lambda (d44e7@for d44e8@isp d44e9@rest) (eq? (d313a@syntax->datum d44e7@for) 'for)) d44e5@ls/false)) (apply (lambda (d44ed@for d44ee@isp d44ef@rest) (d4450@get-import d44ee@isp)) d44e5@ls/false) ((lambda (d44f3@t) ((lambda (d44f5@ls/false) (if d44f5@ls/false (apply (lambda (d44f7@spec) (d3134@syntax-violation 'import '"invalid import spec" d44f7@spec)) d44f5@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d44f3@t))) (d3066@syntax-dispatch d44f3@t 'any))) d44e3@t))) (d3066@syntax-dispatch d44e3@t '(any any . any)))) d44d7@t))) (d3066@syntax-dispatch d44d7@t '(any each-any)))) d44c1@t))) (d3066@syntax-dispatch d44c1@t '(any any any)))) d44a9@t))) (d3066@syntax-dispatch d44a9@t '(any any . each-any)))) d4497@t))) (d3066@syntax-dispatch d4497@t '(any any . each-any)))) d4479@t))) (d3066@syntax-dispatch d4479@t '(any any . #(each (any any)))))) d446d@t))) (d3066@syntax-dispatch d446d@t '(any . each-any)))) d446b@spec))) (set! d4452@add-imports! (lambda (d445b@imp d445c@h) ((lambda (d445f@subst) (for-each (lambda (d4461@x) ((lambda (d4463@name d4464@label) ((lambda (d4467@t) (if d4467@t ((lambda (d4469@l) (if (not (eq? d4469@l d4464@label)) (d4440@dup-error d4463@name) (void))) d4467@t) (hashtable-set! d445c@h d4463@name d4464@label))) (hashtable-ref d445c@h d4463@name '#f))) (car d4461@x) (cdr d4461@x))) d445f@subst)) (d4450@get-import d445b@imp)))) (lambda (d4453@imp*) ((letrec ((d4455@f (lambda (d4457@imp* d4458@h) (if (null? d4457@imp*) (hashtable-entries d4458@h) (begin (d4452@add-imports! (car d4457@imp*) d4458@h) (d4455@f (cdr d4457@imp*) d4458@h)))))) d4455@f) d4453@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! d30c4@make-top-rib (lambda (d4649@names d464a@labels) ((lambda (d464d@rib) (begin (vector-for-each (lambda (d464f@name d4650@label) (begin (if (not (symbol? d464f@name)) (error 'make-top-rib '"BUG: not a symbol" d464f@name) (void)) (d2e17@extend-rib/nc! d464d@rib (d2e23@make-stx d464f@name d2de9@top-mark* '() '()) d4650@label))) d4649@names d464a@labels) d464d@rib)) (d2e13@make-empty-rib)))) (set! d30c6@make-collector (lambda () ((lambda (d4653@ls) (lambda d4657 ((lambda (d4658) (if (= d4658 '0) (apply (lambda () d4653@ls) d4657) (if (= d4658 '1) (apply (lambda (d4655@x) (set! d4653@ls (d2de2@set-cons d4655@x d4653@ls))) d4657) (error 'apply '"invalid arg count")))) (length d4657)))) '()))) (set! d30c8@inv-collector (d29c1@d28bd@make-parameter (lambda d4659@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (d465b@x) (begin (if (not (procedure? d465b@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" d465b@x) (void)) d465b@x)))) (set! d30ca@vis-collector (d29c1@d28bd@make-parameter (lambda d465d@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (d465f@x) (begin (if (not (procedure? d465f@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" d465f@x) (void)) d465f@x)))) (set! d30cc@imp-collector (d29c1@d28bd@make-parameter (lambda d4661@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (d4663@x) (begin (if (not (procedure? d4663@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" d4663@x) (void)) d4663@x)))) (set! d30ce@chi-library-internal (lambda (d4665@e* d4666@rib d4667@top?) (call-with-values (lambda () (d30b8@chi-body* d4665@e* '() '() '() '() '() '() '() d4666@rib d4667@top?)) (lambda (d467b@d466c d467c@d466e d467d@d4670 d467e@d4672 d467f@d4674 d4680@d4676 d4681@d4678 d4682@d467a) ((lambda (d468b@exp* d468c@_kwd* d468d@mod** d468e@rhs* d468f@lex* d4690@mr d4691@r d4692@e*) (values (append (apply append (reverse d468d@mod**)) d4692@e*) d4691@r d4690@mr (reverse d468f@lex*) (reverse d468e@rhs*) d468b@exp*)) d4682@d467a d4681@d4678 d4680@d4676 d467f@d4674 d467e@d4672 d467d@d4670 d467c@d466e d467b@d466c))))) (set! d30d0@chi-interaction-expr (lambda (d469b@e d469c@rib d469d@r) (call-with-values (lambda () (d30b8@chi-body* (list d469b@e) d469d@r d469d@r '() '() '() '() '() d469c@rib '#t)) (lambda (d46b1@d46a2 d46b2@d46a4 d46b3@d46a6 d46b4@d46a8 d46b5@d46aa d46b6@d46ac d46b7@d46ae d46b8@d46b0) ((lambda (d46c1@_exp* d46c2@_kwd* d46c3@mod** d46c4@rhs* d46c5@lex* d46c6@mr d46c7@r d46c8@e*) ((lambda (d46d1@e*) ((lambda (d46d3@e) (values d46d3@e d46c7@r)) (if (null? d46d1@e*) (d2dcd@d2d3d@build-void) (if (null? (cdr d46d1@e*)) (car d46d1@e*) (d2dcc@d2d3b@build-sequence '#f d46d1@e*))))) (d3096@expand-interaction-rhs*/init* (reverse d46c5@lex*) (reverse d46c4@rhs*) (append (apply append (reverse d46c3@mod**)) d46c8@e*) d46c7@r d46c6@mr))) d46b8@d46b0 d46b7@d46ae d46b6@d46ac d46b5@d46aa d46b4@d46a8 d46b3@d46a6 d46b2@d46a4 d46b1@d46a2))))) (set! d30d2@library-body-expander (lambda (d46d5@name d46d6@main-exp* d46d7@imp* d46d8@b* d46d9@top?) ((lambda (d46e0@itc) (begin (set! d46e0@itc (d30c6@make-collector)) ((lambda (d46e9@d46e2 d46ea@d46e4 d46eb@d46e6 d46ec@d46e8) ((lambda (d46f1@swap) (dynamic-wind d46f1@swap (lambda () (call-with-values (lambda () (d30c2@parse-import-spec* d46d7@imp*)) (lambda (d46f7@d46f4 d46f8@d46f6) ((lambda (d46fb@subst-labels d46fc@subst-names) ((lambda (d46ff@rib) ((lambda (d4702@wrap) (begin (set! d4702@wrap (lambda (d477d@x) (d2e23@make-stx d477d@x d2de9@top-mark* (list d46ff@rib) '()))) ((lambda (d4703@b* d4704@main-exp* d4705@rtc d4706@vtc) ((lambda (d4713@d470c d4714@d470e d4715@d4710 d4716@d4712) ((lambda (d471b@swap) (dynamic-wind d471b@swap (lambda () (call-with-values (lambda () (d30ce@chi-library-internal d4703@b* d46ff@rib d46d9@top?)) (lambda (d4729@d471e d472a@d4720 d472b@d4722 d472c@d4724 d472d@d4726 d472e@d4728) ((lambda (d4735@internal-exp* d4736@rhs* d4737@lex* d4738@mr d4739@r d473a@init*) (call-with-values (lambda () (d30bc@parse-exports (append d4704@main-exp* d4735@internal-exp*))) (lambda (d4745@d4742 d4746@d4744) ((lambda (d4749@exp-id* d474a@exp-name*) (begin (d2e1b@seal-rib! d46ff@rib) ((lambda (d474d@init*) ((lambda (d474f@rhs*) ((lambda () (begin (d2e1d@unseal-rib! d46ff@rib) ((lambda (d4751@loc* d4752@export-subst) ((lambda (d4756@errstr) (begin (set! d4756@errstr '"attempt to export mutated variable") (call-with-values (lambda () (d3120@make-export-env/macros d4737@lex* d4751@loc* d4739@r)) (lambda (d475d@d4758 d475e@d475a d475f@d475c) ((lambda (d4763@macro* d4764@global* d4765@export-env) (begin (for-each (lambda (d4769@s) ((lambda (d476b@name d476c@label) ((lambda (d476f@p) (if d476f@p ((lambda (d4771@b) ((lambda (d4773@type) (if (eq? d4773@type 'mutable) (d3134@syntax-violation 'export d4756@errstr d476b@name) (void))) (car d4771@b))) (cdr d476f@p)) (void))) (assq d476c@label d4765@export-env))) (car d4769@s) (cdr d4769@s))) d4752@export-subst) ((lambda (d4775@invoke-body d4776@invoke-definitions) (values (d46e0@itc) (d4705@rtc) (d4706@vtc) (d2dcc@d2d3b@build-sequence '#f (append d4776@invoke-definitions (list d4775@invoke-body))) d4763@macro* d4752@export-subst d4765@export-env)) (d2dcf@d2d41@build-letrec* '#f d4737@lex* d474f@rhs* (d311c@build-exports d4764@global* d474d@init*)) (map d2dc8@d2c98@build-global-define (map cdr d4764@global*))))) d475f@d475c d475e@d475a d475d@d4758))))) '#f)) (map d2def@gen-global d4737@lex*) (d311e@make-export-subst d474a@exp-name* d4749@exp-id*)))))) (d3098@chi-rhs* d4736@rhs* d4739@r d4738@mr))) (d3084@chi-expr* d473a@init* d4739@r d4738@mr)))) d4746@d4744 d4745@d4742)))) d472e@d4728 d472d@d4726 d472c@d4724 d472b@d4722 d472a@d4720 d4729@d471e)))) d471b@swap)) (lambda () (begin ((lambda (d4779@t) (begin (d4713@d470c d4715@d4710) (set! d4715@d4710 d4779@t))) (d4713@d470c)) ((lambda (d477b@t) (begin (d4714@d470e d4716@d4712) (set! d4716@d4712 d477b@t))) (d4714@d470e)))))) d30c8@inv-collector d30ca@vis-collector d4705@rtc d4706@vtc)) (map d4702@wrap d46d8@b*) (map d4702@wrap d46d6@main-exp*) (d30c6@make-collector) (d30c6@make-collector)))) '#f)) (d30c4@make-top-rib d46fc@subst-names d46fb@subst-labels))) d46f8@d46f6 d46f7@d46f4)))) d46f1@swap)) (lambda () (begin ((lambda (d477f@t) (begin (d46e9@d46e2 d46eb@d46e6) (set! d46eb@d46e6 d477f@t))) (d46e9@d46e2)) ((lambda (d4781@t) (begin (d46ea@d46e4 d46ec@d46e8) (set! d46ec@d46e8 d4781@t))) (d46ea@d46e4)))))) d30cc@imp-collector d3142@top-level-context d46e0@itc '#f))) '#f))) (set! d30d4@core-library-expander (lambda (d4783@e d4784@verify-name) (call-with-values (lambda () (d30c0@parse-library d4783@e)) (lambda (d478f@d4788 d4790@d478a d4791@d478c d4792@d478e) ((lambda (d4797@b* d4798@imp* d4799@exp* d479a@name*) (call-with-values (lambda () (d30be@parse-library-name d479a@name*)) (lambda (d47a3@d47a0 d47a4@d47a2) ((lambda (d47a7@ver d47a8@name) (begin (d4784@verify-name d47a8@name) (call-with-values (lambda () (d30d2@library-body-expander d47a8@name d4799@exp* d4798@imp* d4797@b* '#f)) (lambda (d47b9@d47ac d47ba@d47ae d47bb@d47b0 d47bc@d47b2 d47bd@d47b4 d47be@d47b6 d47bf@d47b8) ((lambda (d47c7@export-env d47c8@export-subst d47c9@visit-code d47ca@invoke-code d47cb@visit-req* d47cc@invoke-req* d47cd@imp*) (values d47a8@name d47a7@ver d47cd@imp* d47cc@invoke-req* d47cb@visit-req* d47ca@invoke-code d47c9@visit-code d47c8@export-subst d47c7@export-env)) d47bf@d47b8 d47be@d47b6 d47bd@d47b4 d47bc@d47b2 d47bb@d47b0 d47ba@d47ae d47b9@d47ac))))) d47a4@d47a2 d47a3@d47a0)))) d4792@d478e d4791@d478c d4790@d478a d478f@d4788))))) (set! d30d6@parse-top-level-program (lambda (d47d5@e*) ((lambda (d47d7@t) ((lambda (d47d9@ls/false) (if (and d47d9@ls/false (apply (lambda (d47db@import d47dc@imp* d47dd@b*) (eq? (d313a@syntax->datum d47db@import) 'import)) d47d9@ls/false)) (apply (lambda (d47e1@import d47e2@imp* d47e3@b*) (values d47e2@imp* d47e3@b*)) d47d9@ls/false) ((lambda (d47e7@t) ((lambda (d47e9@ls/false) (if (and d47e9@ls/false (apply (lambda (d47eb@import d47ec@x d47ed@y) (eq? (d313a@syntax->datum d47eb@import) 'import)) d47e9@ls/false)) (apply (lambda (d47f1@import d47f2@x d47f3@y) (d3134@syntax-violation 'expander '"invalid syntax of top-level program" (d2e55@syntax-car d47d5@e*))) d47e9@ls/false) ((lambda (d47f7@t) ((lambda (d47f9@ls/false) (if d47f9@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) d47f9@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d47f7@t))) (d3066@syntax-dispatch d47f7@t '_))) d47e7@t))) (d3066@syntax-dispatch d47e7@t '((any . any) . any)))) d47d7@t))) (d3066@syntax-dispatch d47d7@t '((any . each-any) . each-any)))) d47d5@e*))) (set! d30d8@top-level-expander (lambda (d47fb@e*) (call-with-values (lambda () (d30d6@parse-top-level-program d47fb@e*)) (lambda (d4801@d47fe d4802@d4800) ((lambda (d4805@b* d4806@imp*) (call-with-values (lambda () (d30d2@library-body-expander '() '() d4806@imp* d4805@b* '#t)) (lambda (d4817@d480a d4818@d480c d4819@d480e d481a@d4810 d481b@d4812 d481c@d4814 d481d@d4816) ((lambda (d4825@export-env d4826@export-subst d4827@visit-code d4828@invoke-code d4829@visit-req* d482a@invoke-req* d482b@imp*) (values d482a@invoke-req* d4828@invoke-code)) d481d@d4816 d481c@d4814 d481b@d4812 d481a@d4810 d4819@d480e d4818@d480c d4817@d480a)))) d4802@d4800 d4801@d47fe))))) (set! d30da@rp (d29be@d28b7@make-record-printer 'env (lambda (d4833@x d4834@p d4835@wr) (display '"#<environment>" d4834@p)))) (set! d30dc@make-env (lambda d4839@args ((lambda (d483b@ret) (begin ((letrec ((d483d@loop (lambda (d483f@i d4840@args) (if (null? d4840@args) '() (begin (simple-struct-set! d483b@ret d483f@i (car d4840@args)) (d483d@loop (+ d483f@i '1) (cdr d4840@args))))))) d483d@loop) '0 d4839@args) d483b@ret)) (make-simple-struct 'env '4)))) (set! d30de@env? (lambda (d4843@x) (and (simple-struct? d4843@x) (eq? (simple-struct-name d4843@x) 'env)))) (set! d30e0@env-names (lambda (d4845@x) (simple-struct-ref d4845@x '0))) (set! d30e2@set-env-names! (lambda (d4847@x d4848@val) (simple-struct-set! d4847@x '0 d4848@val))) (set! d30e4@env-labels (lambda (d484b@x) (simple-struct-ref d484b@x '1))) (set! d30e6@set-env-labels! (lambda (d484d@x d484e@val) (simple-struct-set! d484d@x '1 d484e@val))) (set! d30e8@env-itc (lambda (d4851@x) (simple-struct-ref d4851@x '2))) (set! d30ea@set-env-itc! (lambda (d4853@x d4854@val) (simple-struct-set! d4853@x '2 d4854@val))) (set! d30ec@dummy '3) (set! d30ee@rp (d29be@d28b7@make-record-printer 'interaction-env (lambda (d4857@x d4858@p d4859@wr) (display '"#<environment>" d4858@p)))) (set! d30f0@make-interaction-env (lambda d485d@args ((lambda (d485f@ret) (begin ((letrec ((d4861@loop (lambda (d4863@i d4864@args) (if (null? d4864@args) '() (begin (simple-struct-set! d485f@ret d4863@i (car d4864@args)) (d4861@loop (+ d4863@i '1) (cdr d4864@args))))))) d4861@loop) '0 d485d@args) d485f@ret)) (make-simple-struct 'interaction-env '4)))) (set! d30f2@interaction-env? (lambda (d4867@x) (and (simple-struct? d4867@x) (eq? (simple-struct-name d4867@x) 'interaction-env)))) (set! d30f4@interaction-env-rib (lambda (d4869@x) (simple-struct-ref d4869@x '0))) (set! d30f6@set-interaction-env-rib! (lambda (d486b@x d486c@val) (simple-struct-set! d486b@x '0 d486c@val))) (set! d30f8@interaction-env-r (lambda (d486f@x) (simple-struct-ref d486f@x '1))) (set! d30fa@set-interaction-env-r! (lambda (d4871@x d4872@val) (simple-struct-set! d4871@x '1 d4872@val))) (set! d30fc@interaction-env-locs (lambda (d4875@x) (simple-struct-ref d4875@x '2))) (set! d30fe@set-interaction-env-locs! (lambda (d4877@x d4878@val) (simple-struct-set! d4877@x '2 d4878@val))) (set! d3100@dummy '3) (set! d3102@interaction-environment-symbols (lambda () (d310a@environment-symbols (d3140@interaction-environment)))) (set! d3104@environment-bindings (lambda (d487b@e) (vector->list (vector-map (lambda (d487d@name d487e@label) (d3106@parse-binding (cons d487d@name (d2c90@d2ad2@imported-label->binding d487e@label)))) (d30e0@env-names d487b@e) (d30e4@env-labels d487b@e))))) (set! d3106@parse-binding (lambda (d4881@b) (cons (car d4881@b) ((lambda (d4883@t) (if (memv d4883@t '(core-prim global)) 'procedure (if (memv d4883@t '(core-macro macro global-macro)) 'syntax (if (memv d4883@t '($core-rtd)) 'record (if (eq? (car d4881@b) (cadr d4881@b)) 'syntax 'unknown))))) (cadr d4881@b))))) (set! d3108@environment? (lambda (d4885@x) (or (d30de@env? d4885@x) (d30f2@interaction-env? d4885@x)))) (set! d310a@environment-symbols (lambda (d4887@x) (if (d30de@env? d4887@x) (vector->list (d30e0@env-names d4887@x)) (if (d30f2@interaction-env? d4887@x) (map values (d2dfd@rib-sym* (d30f4@interaction-env-rib d4887@x))) (assertion-violation 'environment-symbols '"not an environment" d4887@x))))) (set! d310c@environment (lambda d4889@imp* ((lambda (d488b@itc) ((lambda (d4891@d488e d4892@d4890) ((lambda (d4895@swap) (dynamic-wind d4895@swap (lambda () (call-with-values (lambda () (d30c2@parse-import-spec* d4889@imp*)) (lambda (d489b@d4898 d489c@d489a) ((lambda (d489f@subst-labels d48a0@subst-names) (d30dc@make-env d48a0@subst-names d489f@subst-labels d488b@itc)) d489c@d489a d489b@d4898)))) d4895@swap)) (lambda () ((lambda (d48a3@t) (begin (d4891@d488e d4892@d4890) (set! d4892@d4890 d48a3@t))) (d4891@d488e))))) d30cc@imp-collector d488b@itc)) (d30c6@make-collector)))) (set! d310e@null-environment (lambda (d48a5@n) (begin (if (not (eqv? d48a5@n '5)) (assertion-violation 'null-environment '"not 5" d48a5@n) (void)) (d310c@environment '(psyntax null-environment-5))))) (set! d3110@scheme-report-environment (lambda (d48a7@n) (begin (if (not (eqv? d48a7@n '5)) (assertion-violation 'scheme-report-environment '"not 5" d48a7@n) (void)) (d310c@environment '(psyntax scheme-report-environment-5))))) (set! d3112@expand (lambda (d48a9@x d48aa@env) (if (d30de@env? d48aa@env) ((lambda (d48ad@rib) ((lambda (d48af@x d48b0@itc d48b1@rtc d48b2@vtc) ((lambda (d48b7@x) (begin (d2e1b@seal-rib! d48ad@rib) (values d48b7@x (d48b1@rtc)))) ((lambda (d48c9@d48ba d48ca@d48bc d48cb@d48be d48cc@d48c0 d48cd@d48c2 d48ce@d48c4 d48cf@d48c6 d48d0@d48c8) ((lambda (d48d9@swap) (dynamic-wind d48d9@swap (lambda () (d3088@chi-expr d48af@x '() '())) d48d9@swap)) (lambda () (begin ((lambda (d48db@t) (begin (d48c9@d48ba d48cd@d48c2) (set! d48cd@d48c2 d48db@t))) (d48c9@d48ba)) ((lambda (d48dd@t) (begin (d48ca@d48bc d48ce@d48c4) (set! d48ce@d48c4 d48dd@t))) (d48ca@d48bc)) ((lambda (d48df@t) (begin (d48cb@d48be d48cf@d48c6) (set! d48cf@d48c6 d48df@t))) (d48cb@d48be)) ((lambda (d48e1@t) (begin (d48cc@d48c0 d48d0@d48c8) (set! d48d0@d48c8 d48e1@t))) (d48cc@d48c0)))))) d3142@top-level-context d30c8@inv-collector d30ca@vis-collector d30cc@imp-collector '#f d48b1@rtc d48b2@vtc d48b0@itc))) (d2e23@make-stx d48a9@x d2de9@top-mark* (list d48ad@rib) '()) (d30e8@env-itc d48aa@env) (d30c6@make-collector) (d30c6@make-collector))) (d30c4@make-top-rib (d30e0@env-names d48aa@env) (d30e4@env-labels d48aa@env))) (if (d30f2@interaction-env? d48aa@env) ((lambda (d48e3@rib d48e4@r d48e5@rtc) ((lambda (d48e9@x) (call-with-values (lambda () ((lambda (d48ff@d48f0 d4900@d48f2 d4901@d48f4 d4902@d48f6 d4903@d48f8 d4904@d48fa d4905@d48fc d4906@d48fe) ((lambda (d490f@swap) (dynamic-wind d490f@swap (lambda () (d30d0@chi-interaction-expr d48e9@x d48e3@rib d48e4@r)) d490f@swap)) (lambda () (begin ((lambda (d4911@t) (begin (d48ff@d48f0 d4903@d48f8) (set! d4903@d48f8 d4911@t))) (d48ff@d48f0)) ((lambda (d4913@t) (begin (d4900@d48f2 d4904@d48fa) (set! d4904@d48fa d4913@t))) (d4900@d48f2)) ((lambda (d4915@t) (begin (d4901@d48f4 d4905@d48fc) (set! d4905@d48fc d4915@t))) (d4901@d48f4)) ((lambda (d4917@t) (begin (d4902@d48f6 d4906@d48fe) (set! d4906@d48fe d4917@t))) (d4902@d48f6)))))) d3142@top-level-context d30c8@inv-collector d30ca@vis-collector d30cc@imp-collector d48aa@env d48e5@rtc (d30c6@make-collector) (d30c6@make-collector))) (lambda (d4919@d48ec d491a@d48ee) ((lambda (d491d@r^ d491e@e) (begin (d30fa@set-interaction-env-r! d48aa@env d491d@r^) (values d491e@e (d48e5@rtc)))) d491a@d48ee d4919@d48ec)))) (d2e23@make-stx d48a9@x d2de9@top-mark* (list d48e3@rib) '()))) (d30f4@interaction-env-rib d48aa@env) (d30f8@interaction-env-r d48aa@env) (d30c6@make-collector)) (assertion-violation 'expand '"not an environment" d48aa@env))))) (set! d3114@eval (lambda (d4921@x d4922@env) (begin (if (not (d3108@environment? d4922@env)) (error 'eval '"not an environment" d4922@env) (void)) (call-with-values (lambda () (d3112@expand d4921@x d4922@env)) (lambda (d4929@d4926 d492a@d4928) ((lambda (d492d@invoke-req* d492e@x) (begin (for-each d2c91@d2ad4@invoke-library d492d@invoke-req*) (eval-core (d2a16@d29ce@expanded->core d492e@x)))) d492a@d4928 d4929@d4926)))))) (set! d3116@library-expander (lambda d499f ((lambda (d49a0) (if (= d49a0 '3) (apply (lambda (d4931@x d4932@filename d4933@verify-name) ((lambda (d4938@build-visit-code d493a@visit!) (begin (set! d4938@build-visit-code (lambda (d498d@macro*) (if (null? d498d@macro*) (d2dcd@d2d3d@build-void) (d2dcc@d2d3b@build-sequence '#f (map (lambda (d498f@x) ((lambda (d4991@loc d4992@src) (list 'set! d4991@loc d4992@src)) (car d498f@x) (cddr d498f@x))) d498d@macro*))))) (set! d493a@visit! (lambda (d4985@macro*) (for-each (lambda (d4987@x) ((lambda (d4989@loc d498a@proc) (set-symbol-value! d4989@loc d498a@proc)) (car d4987@x) (cadr d4987@x))) d4985@macro*))) (call-with-values (lambda () (d30d4@core-library-expander d4931@x d4933@verify-name)) (lambda (d494d@d493c d494e@d493e d494f@d4940 d4950@d4942 d4951@d4944 d4952@d4946 d4953@d4948 d4954@d494a d4955@d494c) ((lambda (d495f@export-env d4960@export-subst d4961@macro* d4962@invoke-code d4963@vis* d4964@inv* d4965@imp* d4966@ver d4967@name) ((lambda (d4971@id d4972@name d4973@ver d4974@imp* d4975@vis* d4976@inv* d4977@visit-proc d4978@invoke-proc d4979@visit-code d497a@invoke-code) (begin (d2c8f@d2ad0@install-library d4971@id d4972@name d4973@ver d4974@imp* d4975@vis* d4976@inv* d4960@export-subst d495f@export-env d4977@visit-proc d4978@invoke-proc d4979@visit-code d497a@invoke-code '#t d4932@filename) (values d4971@id d4972@name d4973@ver d4974@imp* d4975@vis* d4976@inv* d497a@invoke-code d4979@visit-code d4960@export-subst d495f@export-env))) (gensym) d4967@name d4966@ver (map d2c95@d2adc@library-spec d4965@imp*) (map d2c95@d2adc@library-spec d4963@vis*) (map d2c95@d2adc@library-spec d4964@inv*) (lambda () (d493a@visit! d4961@macro*)) (lambda () (eval-core (d2a16@d29ce@expanded->core d4962@invoke-code))) (d4938@build-visit-code d4961@macro*) d4962@invoke-code)) d4955@d494c d4954@d494a d4953@d4948 d4952@d4946 d4951@d4944 d4950@d4942 d494f@d4940 d494e@d493e d494d@d493c))))) '#f '#f)) d499f) (if (= d49a0 '2) (apply (lambda (d4995@x d4996@filename) (d3116@library-expander d4995@x d4996@filename (lambda (d4999@x) (values)))) d499f) (if (= d49a0 '1) (apply (lambda (d499b@x) (d3116@library-expander d499b@x '#f (lambda (d499d@x) (values)))) d499f) (error 'apply '"invalid arg count"))))) (length d499f)))) (set! d3118@boot-library-expand (lambda (d49a1@x) (call-with-values (lambda () (d3116@library-expander d49a1@x)) (lambda (d49b7@d49a4 d49b8@d49a6 d49b9@d49a8 d49ba@d49aa d49bb@d49ac d49bc@d49ae d49bd@d49b0 d49be@d49b2 d49bf@d49b4 d49c0@d49b6) ((lambda (d49cb@export-env d49cc@export-subst d49cd@visit-code d49ce@invoke-code d49cf@inv* d49d0@vis* d49d1@imp* d49d2@ver d49d3@name d49d4@id) (values d49d3@name d49ce@invoke-code d49cc@export-subst d49cb@export-env)) d49c0@d49b6 d49bf@d49b4 d49be@d49b2 d49bd@d49b0 d49bc@d49ae d49bb@d49ac d49ba@d49aa d49b9@d49a8 d49b8@d49a6 d49b7@d49a4))))) (set! d311a@rev-map-append (lambda (d49df@f d49e0@ls d49e1@ac) (if (null? d49e0@ls) d49e1@ac (d311a@rev-map-append d49df@f (cdr d49e0@ls) (cons (d49df@f (car d49e0@ls)) d49e1@ac))))) (set! d311c@build-exports (lambda (d49e5@lex*+loc* d49e6@init*) (d2dcc@d2d3b@build-sequence '#f (cons (d2dcd@d2d3d@build-void) (d311a@rev-map-append (lambda (d49e9@x) (list 'set! (cdr d49e9@x) (car d49e9@x))) d49e5@lex*+loc* d49e6@init*))))) (set! d311e@make-export-subst (lambda (d49eb@name* d49ec@id*) (map (lambda (d49ef@name d49f0@id) ((lambda (d49f3@label) (begin (if (not d49f3@label) (d3134@syntax-violation '#f '"cannot export unbound identifier" d49f0@id) (void)) (cons d49ef@name d49f3@label))) (d2e75@id->label d49f0@id))) d49eb@name* d49ec@id*))) (set! d3120@make-export-env/macros (lambda (d49f5@lex* d49f6@loc* d49f7@r) ((lambda (d49fc@lookup) (begin (set! d49fc@lookup (lambda (d4a19@x) ((letrec ((d4a1b@f (lambda (d4a1d@x d4a1e@lex* d4a1f@loc*) (if (pair? d4a1e@lex*) (if (eq? d4a1d@x (car d4a1e@lex*)) (car d4a1f@loc*) (d4a1b@f d4a1d@x (cdr d4a1e@lex*) (cdr d4a1f@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) d4a1b@f) d4a19@x d49f5@lex* d49f6@loc*))) ((letrec ((d49fd@f (lambda (d49ff@r d4a00@env d4a01@global* d4a02@macro*) (if (null? d49ff@r) (values d4a00@env d4a01@global* d4a02@macro*) ((lambda (d4a07@x) ((lambda (d4a09@label d4a0a@b) ((lambda (d4a0d@t) (if (memv d4a0d@t '(lexical)) ((lambda (d4a0f@v) ((lambda (d4a11@loc d4a12@type) (d49fd@f (cdr d49ff@r) (cons (cons* d4a09@label d4a12@type d4a11@loc) d4a00@env) (cons (cons (d2ff2@lexical-var d4a0f@v) d4a11@loc) d4a01@global*) d4a02@macro*)) (d49fc@lookup (d2ff2@lexical-var d4a0f@v)) (if (d2ff4@lexical-mutable? d4a0f@v) 'mutable 'global))) (d2e7f@binding-value d4a0a@b)) (if (memv d4a0d@t '(local-macro)) ((lambda (d4a15@loc) (d49fd@f (cdr d49ff@r) (cons (cons* d4a09@label 'global-macro d4a15@loc) d4a00@env) d4a01@global* (cons (cons d4a15@loc (d2e7f@binding-value d4a0a@b)) d4a02@macro*))) (gensym)) (if (memv d4a0d@t '(local-macro!)) ((lambda (d4a17@loc) (d49fd@f (cdr d49ff@r) (cons (cons* d4a09@label 'global-macro! d4a17@loc) d4a00@env) d4a01@global* (cons (cons d4a17@loc (d2e7f@binding-value d4a0a@b)) d4a02@macro*))) (gensym)) (if (memv d4a0d@t '($rtd $module)) (d49fd@f (cdr d49ff@r) (cons d4a07@x d4a00@env) d4a01@global* d4a02@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (d2e7d@binding-type d4a0a@b) (d2e7f@binding-value d4a0a@b))))))) (d2e7d@binding-type d4a0a@b))) (car d4a07@x) (cdr d4a07@x))) (car d49ff@r)))))) d49fd@f) d49f7@r '() '() '()))) '#f))) (set! d3122@generate-temporaries (lambda (d4a23@ls) ((lambda (d4a25@t) ((lambda (d4a27@ls/false) (if d4a27@ls/false (apply (lambda (d4a29@ls) (map (lambda (d4a2b@x) (d2e23@make-stx ((lambda (d4a2d@x) (if (or (symbol? d4a2d@x) (string? d4a2d@x)) (gensym d4a2d@x) (gensym 't))) (d313a@syntax->datum d4a2b@x)) d2de9@top-mark* '() '())) d4a29@ls)) d4a27@ls/false) ((lambda (d4a2f@t) ((lambda (d4a31@ls/false) (if d4a31@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) d4a31@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4a2f@t))) (d3066@syntax-dispatch d4a2f@t '_))) d4a25@t))) (d3066@syntax-dispatch d4a25@t 'each-any))) d4a23@ls))) (set! d3124@free-identifier=? (lambda (d4a33@x d4a34@y) (if (d2e5b@id? d4a33@x) (if (d2e5b@id? d4a34@y) (d2e63@free-id=? d4a33@x d4a34@y) (assertion-violation 'free-identifier=? '"not an identifier" d4a34@y)) (assertion-violation 'free-identifier=? '"not an identifier" d4a33@x)))) (set! d3126@bound-identifier=? (lambda (d4a37@x d4a38@y) (if (d2e5b@id? d4a37@x) (if (d2e5b@id? d4a38@y) (d2e61@bound-id=? d4a37@x d4a38@y) (assertion-violation 'bound-identifier=? '"not an identifier" d4a38@y)) (assertion-violation 'bound-identifier=? '"not an identifier" d4a37@x)))) (set! d3128@make-source-condition (lambda (d4a3b@x) ((lambda (d4a45@d4a40 d4a47@d4a42 d4a49@d4a41 d4a4c@d4a3f d4a4e@make-source-condition d4a50@d4a3d d4a52@d4a3e d4a54@source-condition? d4a56@source-filename d4a58@source-character) (begin (set! d4a45@d4a40 (make-record-type-descriptor '&source-information d4e99@d4be0@&condition-rtd 'd4a43 '#f '#f '#((immutable file-name) (immutable character)))) (set! d4a47@d4a42 '#f) (set! d4a49@d4a41 (make-record-constructor-descriptor d4a45@d4a40 d4e9a@d4be2@&condition-rcd d4a47@d4a42)) (set! d4a4c@d4a3f (record-predicate d4a45@d4a40)) (set! d4a4e@make-source-condition (record-constructor d4a49@d4a41)) (set! d4a50@d4a3d (record-accessor d4a45@d4a40 '0)) (set! d4a52@d4a3e (record-accessor d4a45@d4a40 '1)) (set! d4a54@source-condition? (condition-predicate d4a45@d4a40)) (set! d4a56@source-filename (condition-accessor d4a45@d4a40 d4a50@d4a3d)) (set! d4a58@source-character (condition-accessor d4a45@d4a40 d4a52@d4a3e)) (if (pair? d4a3b@x) (d4a4e@make-source-condition (car d4a3b@x) (cdr d4a3b@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! d312a@extract-position-condition (lambda (d4a59@x) (d3128@make-source-condition (d312c@expression-position d4a59@x)))) (set! d312c@expression-position (lambda (d4a5b@x) (and (d2e25@stx? d4a5b@x) ((lambda (d4a5d@x) (and (d29b6@d28a7@annotation? d4a5d@x) (d29b7@d28a9@annotation-source d4a5d@x))) (d2e27@stx-expr d4a5b@x))))) (set! d312e@assertion-error (lambda (d4a5f@expr d4a60@pos) (raise (condition (d4ec9@d4ca4@make-assertion-violation) (d4edb@d4cd6@make-who-condition 'assert) (d4e9f@d4c37@make-message-condition '"assertion failed") (d4ed1@d4cbb@make-irritants-condition (list d4a5f@expr)) (d3128@make-source-condition d4a60@pos))))) (set! d3130@syntax-error (lambda (d4a63@x . d4a65@args) (begin (if (not (for-all string? d4a65@args)) (assertion-violation 'syntax-error '"invalid argument" d4a65@args) (void)) (raise (condition (d4e9f@d4c37@make-message-condition (if (null? d4a65@args) '"invalid syntax" (apply string-append d4a65@args))) (d4efd@d4d32@make-syntax-violation (d313a@syntax->datum d4a63@x) '#f) (d312a@extract-position-condition d4a63@x)))))) (set! d3132@syntax-violation* (lambda (d4a67@who d4a68@msg d4a69@form d4a6a@condition-object) (begin (if (not (string? d4a68@msg)) (assertion-violation 'syntax-violation '"message is not a string" d4a68@msg) (void)) ((lambda (d4a6f@who) (raise (condition (if d4a6f@who (d4edb@d4cd6@make-who-condition d4a6f@who) (condition)) (d4e9f@d4c37@make-message-condition d4a68@msg) d4a6a@condition-object (d312a@extract-position-condition d4a69@form)))) (if (or (string? d4a67@who) (symbol? d4a67@who)) d4a67@who (if (not d4a67@who) ((lambda (d4a71@t) ((lambda (d4a73@ls/false) (if (and d4a73@ls/false (apply (lambda (d4a75@id) (d2e5b@id? d4a75@id)) d4a73@ls/false)) (apply (lambda (d4a77@id) (d313a@syntax->datum d4a77@id)) d4a73@ls/false) ((lambda (d4a79@t) ((lambda (d4a7b@ls/false) (if (and d4a7b@ls/false (apply (lambda (d4a7d@id d4a7e@rest) (d2e5b@id? d4a7d@id)) d4a7b@ls/false)) (apply (lambda (d4a81@id d4a82@rest) (d313a@syntax->datum d4a81@id)) d4a7b@ls/false) ((lambda (d4a85@t) ((lambda (d4a87@ls/false) (if d4a87@ls/false (apply (lambda () '#f) d4a87@ls/false) (d3134@syntax-violation '#f '"invalid syntax" d4a85@t))) (d3066@syntax-dispatch d4a85@t '_))) d4a79@t))) (d3066@syntax-dispatch d4a79@t '(any . any)))) d4a71@t))) (d3066@syntax-dispatch d4a71@t 'any))) d4a69@form) (assertion-violation 'syntax-violation '"invalid who argument" d4a67@who))))))) (set! d3134@syntax-violation (lambda d4a97 ((lambda (d4a98) (if (= d4a98 '3) (apply (lambda (d4a89@who d4a8a@msg d4a8b@form) (d3134@syntax-violation d4a89@who d4a8a@msg d4a8b@form '#f)) d4a97) (if (= d4a98 '4) (apply (lambda (d4a8f@who d4a90@msg d4a91@form d4a92@subform) (d3132@syntax-violation* d4a8f@who d4a90@msg d4a91@form (d4efd@d4d32@make-syntax-violation (d313a@syntax->datum d4a91@form) (d313a@syntax->datum d4a92@subform)))) d4a97) (error 'apply '"invalid arg count")))) (length d4a97)))) (set! d3136@identifier? (lambda (d4a99@x) (d2e5b@id? d4a99@x))) (set! d3138@datum->syntax (lambda (d4a9b@id d4a9c@datum) (if (d2e5b@id? d4a9b@id) (d2e39@datum->stx d4a9b@id d4a9c@datum) (assertion-violation 'datum->syntax '"not an identifier" d4a9b@id)))) (set! d313a@syntax->datum (lambda (d4a9f@x) (d2e71@stx->datum d4a9f@x))) (set! d313c@compile-r6rs-top-level (lambda (d4aa1@x*) (call-with-values (lambda () (d30d8@top-level-expander d4aa1@x*)) (lambda (d4aa7@d4aa4 d4aa8@d4aa6) ((lambda (d4aab@invoke-code d4aac@lib*) (lambda () (begin (for-each d2c91@d2ad4@invoke-library d4aac@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (d2a16@d29ce@expanded->core d4aab@invoke-code)) (void)) (eval-core (d2a16@d29ce@expanded->core d4aab@invoke-code))))) d4aa8@d4aa6 d4aa7@d4aa4))))) (set! d313e@pre-compile-r6rs-top-level (lambda (d4aaf@x*) (call-with-values (lambda () (d30d8@top-level-expander d4aaf@x*)) (lambda (d4ab5@d4ab2 d4ab6@d4ab4) ((lambda (d4ab9@invoke-code d4aba@lib*) (begin (for-each d2c91@d2ad4@invoke-library d4aba@lib*) (d29bf@d28b9@compile-core (d2a16@d29ce@expanded->core d4ab9@invoke-code)))) d4ab6@d4ab4 d4ab5@d4ab2))))) (set! d3140@interaction-environment ((lambda (d4abd@the-env) (lambda () (or d4abd@the-env ((lambda (d4abf@lib d4ac0@rib) (begin ((lambda (d4ac3@subst) (begin (d2dff@set-rib-sym*! d4ac0@rib (map car d4ac3@subst)) (d2e03@set-rib-mark**! d4ac0@rib (map (lambda (d4ac5@x) d2de9@top-mark*) d4ac3@subst)) (d2e07@set-rib-label*! d4ac0@rib (map cdr d4ac3@subst)))) (d2c6c@d2a8a@library-subst d4abf@lib)) ((lambda (d4ac7@env) (begin (set! d4abd@the-env d4ac7@env) d4ac7@env)) (d30f0@make-interaction-env d4ac0@rib '() '())))) (d2c8a@d2ac6@find-library-by-name '(mosh interaction)) (d2e13@make-empty-rib))))) '#f)) (set! d3142@top-level-context (d29c1@d28bd@make-parameter '#f)) (begin (set! d4bcb@d3142@top-level-context d3142@top-level-context) (set! d4bca@d3140@interaction-environment d3140@interaction-environment) (set! d4bc9@d313e@pre-compile-r6rs-top-level d313e@pre-compile-r6rs-top-level) (set! d4bc8@d313c@compile-r6rs-top-level d313c@compile-r6rs-top-level) (set! d4bc7@d313a@syntax->datum d313a@syntax->datum) (set! d4bc6@d3138@datum->syntax d3138@datum->syntax) (set! d4bc5@d3136@identifier? d3136@identifier?) (set! d4bc4@d3134@syntax-violation d3134@syntax-violation) (set! d4bc3@d3132@syntax-violation* d3132@syntax-violation*) (set! d4bc2@d3130@syntax-error d3130@syntax-error) (set! d4bc1@d312e@assertion-error d312e@assertion-error) (set! d4bc0@d312c@expression-position d312c@expression-position) (set! d4bbf@d312a@extract-position-condition d312a@extract-position-condition) (set! d4bbe@d3128@make-source-condition d3128@make-source-condition) (set! d4bbd@d3126@bound-identifier=? d3126@bound-identifier=?) (set! d4bbc@d3124@free-identifier=? d3124@free-identifier=?) (set! d4bbb@d3122@generate-temporaries d3122@generate-temporaries) (set! d4bba@d3120@make-export-env/macros d3120@make-export-env/macros) (set! d4bb9@d311e@make-export-subst d311e@make-export-subst) (set! d4bb8@d311c@build-exports d311c@build-exports) (set! d4bb7@d311a@rev-map-append d311a@rev-map-append) (set! d4bb6@d3118@boot-library-expand d3118@boot-library-expand) (set! d4bb5@d3116@library-expander d3116@library-expander) (set! d4bb4@d3114@eval d3114@eval) (set! d4bb3@d3112@expand d3112@expand) (set! d4bb2@d3110@scheme-report-environment d3110@scheme-report-environment) (set! d4bb1@d310e@null-environment d310e@null-environment) (set! d4bb0@d310c@environment d310c@environment) (set! d4baf@d310a@environment-symbols d310a@environment-symbols) (set! d4bae@d3108@environment? d3108@environment?) (set! d4bad@d3106@parse-binding d3106@parse-binding) (set! d4bac@d3104@environment-bindings d3104@environment-bindings) (set! d4bab@d3102@interaction-environment-symbols d3102@interaction-environment-symbols) (set! d4baa@d3100@dummy d3100@dummy) (set! d4ba9@d30fe@set-interaction-env-locs! d30fe@set-interaction-env-locs!) (set! d4ba8@d30fc@interaction-env-locs d30fc@interaction-env-locs) (set! d4ba7@d30fa@set-interaction-env-r! d30fa@set-interaction-env-r!) (set! d4ba6@d30f8@interaction-env-r d30f8@interaction-env-r) (set! d4ba5@d30f6@set-interaction-env-rib! d30f6@set-interaction-env-rib!) (set! d4ba4@d30f4@interaction-env-rib d30f4@interaction-env-rib) (set! d4ba3@d30f2@interaction-env? d30f2@interaction-env?) (set! d4ba2@d30f0@make-interaction-env d30f0@make-interaction-env) (set! d4ba1@d30ee@rp d30ee@rp) (set! d4ba0@d30ec@dummy d30ec@dummy) (set! d4b9f@d30ea@set-env-itc! d30ea@set-env-itc!) (set! d4b9e@d30e8@env-itc d30e8@env-itc) (set! d4b9d@d30e6@set-env-labels! d30e6@set-env-labels!) (set! d4b9c@d30e4@env-labels d30e4@env-labels) (set! d4b9b@d30e2@set-env-names! d30e2@set-env-names!) (set! d4b9a@d30e0@env-names d30e0@env-names) (set! d4b99@d30de@env? d30de@env?) (set! d4b98@d30dc@make-env d30dc@make-env) (set! d4b97@d30da@rp d30da@rp) (set! d4b96@d30d8@top-level-expander d30d8@top-level-expander) (set! d4b95@d30d6@parse-top-level-program d30d6@parse-top-level-program) (set! d4b94@d30d4@core-library-expander d30d4@core-library-expander) (set! d4b93@d30d2@library-body-expander d30d2@library-body-expander) (set! d4b92@d30d0@chi-interaction-expr d30d0@chi-interaction-expr) (set! d4b91@d30ce@chi-library-internal d30ce@chi-library-internal) (set! d4b90@d30cc@imp-collector d30cc@imp-collector) (set! d4b8f@d30ca@vis-collector d30ca@vis-collector) (set! d4b8e@d30c8@inv-collector d30c8@inv-collector) (set! d4b8d@d30c6@make-collector d30c6@make-collector) (set! d4b8c@d30c4@make-top-rib d30c4@make-top-rib) (set! d4b8b@d30c2@parse-import-spec* d30c2@parse-import-spec*) (set! d4b8a@d30c0@parse-library d30c0@parse-library) (set! d4b89@d30be@parse-library-name d30be@parse-library-name) (set! d4b88@d30bc@parse-exports d30bc@parse-exports) (set! d4b87@d30ba@expand-transformer d30ba@expand-transformer) (set! d4b86@d30b8@chi-body* d30b8@chi-body*) (set! d4b85@d30b6@chi-internal-module d30b6@chi-internal-module) (set! d4b84@d30b4@module-interface-exp-id* d30b4@module-interface-exp-id*) (set! d4b83@d30b2@dummy d30b2@dummy) (set! d4b82@d30b0@set-module-interface-exp-lab-vec! d30b0@set-module-interface-exp-lab-vec!) (set! d4b81@d30ae@module-interface-exp-lab-vec d30ae@module-interface-exp-lab-vec) (set! d4b80@d30ac@set-module-interface-exp-id-vec! d30ac@set-module-interface-exp-id-vec!) (set! d4b7f@d30aa@module-interface-exp-id-vec d30aa@module-interface-exp-id-vec) (set! d4b7e@d30a8@set-module-interface-first-mark! d30a8@set-module-interface-first-mark!) (set! d4b7d@d30a6@module-interface-first-mark d30a6@module-interface-first-mark) (set! d4b7c@d30a4@module-interface? d30a4@module-interface?) (set! d4b7b@d30a2@make-module-interface d30a2@make-module-interface) (set! d4b7a@d30a0@parse-module d30a0@parse-module) (set! d4b79@d309e@chi-internal d309e@chi-internal) (set! d4b78@d309c@find-dups d309c@find-dups) (set! d4b77@d309a@find-bound=? d309a@find-bound=?) (set! d4b76@d3098@chi-rhs* d3098@chi-rhs*) (set! d4b75@d3096@expand-interaction-rhs*/init* d3096@expand-interaction-rhs*/init*) (set! d4b74@d3094@chi-rhs d3094@chi-rhs) (set! d4b73@d3092@chi-defun d3092@chi-defun) (set! d4b72@d3090@chi-lambda-clause* d3090@chi-lambda-clause*) (set! d4b71@d308e@chi-lambda-clause d308e@chi-lambda-clause) (set! d4b70@d308c@verify-formals d308c@verify-formals) (set! d4b6f@d308a@chi-set! d308a@chi-set!) (set! d4b6e@d3088@chi-expr d3088@chi-expr) (set! d4b6d@d3086@chi-application d3086@chi-application) (set! d4b6c@d3084@chi-expr* d3084@chi-expr*) (set! d4b6b@d3082@chi-global-macro d3082@chi-global-macro) (set! d4b6a@d3080@chi-local-macro d3080@chi-local-macro) (set! d4b69@d307e@chi-macro d307e@chi-macro) (set! d4b68@d307c@do-macro-call d307c@do-macro-call) (set! d4b67@d307a@local-macro-transformer d307a@local-macro-transformer) (set! d4b66@d3078@macro-transformer d3078@macro-transformer) (set! d4b65@d3076@symbol-macro d3076@symbol-macro) (set! d4b64@d3074@core-macro-transformer d3074@core-macro-transformer) (set! d4b63@d3072@syntax-transformer d3072@syntax-transformer) (set! d4b62@d3070@ellipsis-map d3070@ellipsis-map) (set! d4b61@d306e@syntax-case-transformer d306e@syntax-case-transformer) (set! d4b60@d306c@verify-literals d306c@verify-literals) (set! d4b5f@d306a@underscore? d306a@underscore?) (set! d4b5e@d3068@ellipsis? d3068@ellipsis?) (set! d4b5d@d3066@syntax-dispatch d3066@syntax-dispatch) (set! d4b5c@d3064@convert-pattern d3064@convert-pattern) (set! d4b5b@d3062@foreign-call-transformer d3062@foreign-call-transformer) (set! d4b5a@d3060@parameterize-macro d3060@parameterize-macro) (set! d4b59@d305e@incorrect-usage-macro d305e@incorrect-usage-macro) (set! d4b58@d305c@define-condition-type-macro d305c@define-condition-type-macro) (set! d4b57@d305a@define-record-type-macro d305a@define-record-type-macro) (set! d4b56@d3058@define-struct-macro d3058@define-struct-macro) (set! d4b55@d3056@quasisyntax-macro d3056@quasisyntax-macro) (set! d4b54@d3054@quasiquote-macro d3054@quasiquote-macro) (set! d4b53@d3052@syntax-rules-macro d3052@syntax-rules-macro) (set! d4b52@d3050@include-into-macro d3050@include-into-macro) (set! d4b51@d304e@include-macro d304e@include-macro) (set! d4b50@d304c@do-include d304c@do-include) (set! d4b4f@d304a@cond-macro d304a@cond-macro) (set! d4b4e@d3048@and-macro d3048@and-macro) (set! d4b4d@d3046@or-macro d3046@or-macro) (set! d4b4c@d3044@let*-macro d3044@let*-macro) (set! d4b4b@d3042@do-macro d3042@do-macro) (set! d4b4a@d3040@identifier-syntax-macro d3040@identifier-syntax-macro) (set! d4b49@d303e@endianness-macro d303e@endianness-macro) (set! d4b48@d303c@assert-macro d303c@assert-macro) (set! d4b47@d303a@delay-macro d303a@delay-macro) (set! d4b46@d3038@time-macro d3038@time-macro) (set! d4b45@d3036@define-enumeration-macro d3036@define-enumeration-macro) (set! d4b44@d3034@guard-macro d3034@guard-macro) (set! d4b43@d3032@trace-letrec-syntax-macro d3032@trace-letrec-syntax-macro) (set! d4b42@d3030@trace-let-syntax-macro d3030@trace-let-syntax-macro) (set! d4b41@d302e@trace-let/rec-syntax d302e@trace-let/rec-syntax) (set! d4b40@d302c@trace-define-syntax-macro d302c@trace-define-syntax-macro) (set! d4b3f@d302a@trace-define-macro d302a@trace-define-macro) (set! d4b3e@d3028@trace-lambda-macro d3028@trace-lambda-macro) (set! d4b3d@d3026@let*-values-macro d3026@let*-values-macro) (set! d4b3c@d3024@let-values-macro d3024@let-values-macro) (set! d4b3b@d3022@let-macro d3022@let-macro) (set! d4b3a@d3020@invalid-fmls-error d3020@invalid-fmls-error) (set! d4b39@d301e@with-syntax-macro d301e@with-syntax-macro) (set! d4b38@d301c@bless d301c@bless) (set! d4b37@d301a@lambda-transformer d301a@lambda-transformer) (set! d4b36@d3018@case-lambda-transformer d3018@case-lambda-transformer) (set! d4b35@d3016@quote-transformer d3016@quote-transformer) (set! d4b34@d3014@case-macro d3014@case-macro) (set! d4b33@d3012@or-transformer d3012@or-transformer) (set! d4b32@d3010@and-transformer d3010@and-transformer) (set! d4b31@d300e@if-transformer d300e@if-transformer) (set! d4b30@d300c@unless-macro d300c@unless-macro) (set! d4b2f@d300a@when-macro d300a@when-macro) (set! d4b2e@d3008@record-constructor-descriptor-transformer d3008@record-constructor-descriptor-transformer) (set! d4b2d@d3006@record-type-descriptor-transformer d3006@record-type-descriptor-transformer) (set! d4b2c@d3004@type-descriptor-transformer d3004@type-descriptor-transformer) (set! d4b2b@d3002@fluid-let-syntax-transformer d3002@fluid-let-syntax-transformer) (set! d4b2a@d3000@letrec*-transformer d3000@letrec*-transformer) (set! d4b29@d2ffe@letrec-transformer d2ffe@letrec-transformer) (set! d4b28@d2ffc@letrec-helper d2ffc@letrec-helper) (set! d4b27@d2ffa@add-lexicals d2ffa@add-lexicals) (set! d4b26@d2ff8@add-lexical d2ff8@add-lexical) (set! d4b25@d2ff6@set-lexical-mutable! d2ff6@set-lexical-mutable!) (set! d4b24@d2ff4@lexical-mutable? d2ff4@lexical-mutable?) (set! d4b23@d2ff2@lexical-var d2ff2@lexical-var) (set! d4b22@d2ff0@scheme-stx d2ff0@scheme-stx) (set! d4b21@d2fee@scheme-stx-hashtable d2fee@scheme-stx-hashtable) (set! d4b20@d2fec@parse-define-syntax d2fec@parse-define-syntax) (set! d4b1f@d2fea@parse-define d2fea@parse-define) (set! d4b1e@d2e99@make-eval-transformer d2e99@make-eval-transformer) (set! d4b1d@d2e97@variable-transformer-procedure d2e97@variable-transformer-procedure) (set! d4b1c@d2e95@variable-transformer? d2e95@variable-transformer?) (set! d4b1b@d2e93@make-variable-transformer d2e93@make-variable-transformer) (set! d4b1a@d2e91@sanitize-binding d2e91@sanitize-binding) (set! d4b19@d2e83@syntax-type d2e83@syntax-type) (set! d4b18@d2e81@raise-unbound-error d2e81@raise-unbound-error) (set! d4b17@d2e7f@binding-value d2e7f@binding-value) (set! d4b16@d2e7d@binding-type d2e7d@binding-type) (set! d4b15@d2e7b@make-binding d2e7b@make-binding) (set! d4b14@d2e79@label->binding d2e79@label->binding) (set! d4b13@d2e77@id->real-label d2e77@id->real-label) (set! d4b12@d2e75@id->label d2e75@id->label) (set! d4b11@d2e73@same-marks*? d2e73@same-marks*?) (set! d4b10@d2e71@stx->datum d2e71@stx->datum) (set! d4b0f@d2e6f@strip d2e6f@strip) (set! d4b0e@d2e6d@strip-annotations d2e6d@strip-annotations) (set! d4b0d@d2e6b@self-evaluating? d2e6b@self-evaluating?) (set! d4b0c@d2e69@bound-id-member? d2e69@bound-id-member?) (set! d4b0b@d2e67@distinct-bound-ids? d2e67@distinct-bound-ids?) (set! d4b0a@d2e65@valid-bound-ids? d2e65@valid-bound-ids?) (set! d4b09@d2e63@free-id=? d2e63@free-id=?) (set! d4b08@d2e61@bound-id=? d2e61@bound-id=?) (set! d4b07@d2e5f@same-marks? d2e5f@same-marks?) (set! d4b06@d2e5d@id->sym d2e5d@id->sym) (set! d4b05@d2e5b@id? d2e5b@id?) (set! d4b04@d2e59@syntax->list d2e59@syntax->list) (set! d4b03@d2e57@syntax-cdr d2e57@syntax-cdr) (set! d4b02@d2e55@syntax-car d2e55@syntax-car) (set! d4b01@d2e53@syntax-list? d2e53@syntax-list?) (set! d4b00@d2e51@syntax-null? d2e51@syntax-null?) (set! d4aff@d2e4f@syntax-vector? d2e4f@syntax-vector?) (set! d4afe@d2e4d@syntax-pair? d2e4d@syntax-pair?) (set! d4afd@d2e4b@syntax-vector->list d2e4b@syntax-vector->list) (set! d4afc@d2e49@syntax-kind? d2e49@syntax-kind?) (set! d4afb@d2e47@add-subst d2e47@add-subst) (set! d4afa@d2e45@add-mark d2e45@add-mark) (set! d4af9@d2e43@mkstx d2e43@mkstx) (set! d4af8@d2e41@join-wraps d2e41@join-wraps) (set! d4af7@d2e3f@anti-mark? d2e3f@anti-mark?) (set! d4af6@d2e3d@anti-mark d2e3d@anti-mark) (set! d4af5@d2e3b@gen-mark d2e3b@gen-mark) (set! d4af4@d2e39@datum->stx d2e39@datum->stx) (set! d4af3@d2e37@dummy d2e37@dummy) (set! d4af2@d2e35@set-stx-ae*! d2e35@set-stx-ae*!) (set! d4af1@d2e33@stx-ae* d2e33@stx-ae*) (set! d4af0@d2e31@set-stx-subst*! d2e31@set-stx-subst*!) (set! d4aef@d2e2f@stx-subst* d2e2f@stx-subst*) (set! d4aee@d2e2d@set-stx-mark*! d2e2d@set-stx-mark*!) (set! d4aed@d2e2b@stx-mark* d2e2b@stx-mark*) (set! d4aec@d2e29@set-stx-expr! d2e29@set-stx-expr!) (set! d4aeb@d2e27@stx-expr d2e27@stx-expr) (set! d4aea@d2e25@stx? d2e25@stx?) (set! d4ae9@d2e23@make-stx d2e23@make-stx) (set! d4ae8@d2e21@rp d2e21@rp) (set! d4ae7@d2e1f@make-full-rib d2e1f@make-full-rib) (set! d4ae6@d2e1d@unseal-rib! d2e1d@unseal-rib!) (set! d4ae5@d2e1b@seal-rib! d2e1b@seal-rib!) (set! d4ae4@d2e19@make-rib-map d2e19@make-rib-map) (set! d4ae3@d2e17@extend-rib/nc! d2e17@extend-rib/nc!) (set! d4ae2@d2e15@extend-rib! d2e15@extend-rib!) (set! d4ae1@d2e13@make-empty-rib d2e13@make-empty-rib) (set! d4ae0@d2e11@dummy d2e11@dummy) (set! d4adf@d2e0f@set-rib-cache! d2e0f@set-rib-cache!) (set! d4ade@d2e0d@rib-cache d2e0d@rib-cache) (set! d4add@d2e0b@set-rib-sealed/freq! d2e0b@set-rib-sealed/freq!) (set! d4adc@d2e09@rib-sealed/freq d2e09@rib-sealed/freq) (set! d4adb@d2e07@set-rib-label*! d2e07@set-rib-label*!) (set! d4ada@d2e05@rib-label* d2e05@rib-label*) (set! d4ad9@d2e03@set-rib-mark**! d2e03@set-rib-mark**!) (set! d4ad8@d2e01@rib-mark** d2e01@rib-mark**) (set! d4ad7@d2dff@set-rib-sym*! d2dff@set-rib-sym*!) (set! d4ad6@d2dfd@rib-sym* d2dfd@rib-sym*) (set! d4ad5@d2dfb@rib? d2dfb@rib?) (set! d4ad4@d2df9@make-rib d2df9@make-rib) (set! d4ad3@d2df7@gen-define-label d2df7@gen-define-label) (set! d4ad2@d2df5@gen-define-label+loc d2df5@gen-define-label+loc) (set! d4ad1@d2df3@gen-top-level-label d2df3@gen-top-level-label) (set! d4ad0@d2df1@gen-label d2df1@gen-label) (set! d4acf@d2def@gen-global d2def@gen-global) (set! d4ace@d2ded@gen-lexical d2ded@gen-lexical) (set! d4acd@d2deb@top-marked? d2deb@top-marked?) (set! d4acc@d2de9@top-mark* d2de9@top-mark*) (set! d4acb@d2de4@set-union d2de4@set-union) (set! d4aca@d2de2@set-cons d2de2@set-cons) (set! d4ac9@d2de0@file-options-macro d2de0@file-options-macro) (d2c87@d2ac0@current-library-expander d3116@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (d4bd5@d4bd0 d4bd7@d4bd2 d4bd9@d4bd1 d4bdc@&condition? d4bde@make-&condition d4be0@&condition-rtd d4be2@&condition-rcd d4c2e@d4c29 d4c30@d4c2b d4c32@d4c2a d4c35@p? d4c37@make-message-condition d4c39@d4c28 d4c3b@message-condition? d4c3d@condition-message d4c3f@&message-rtd d4c41@&message-rcd d4c47@d4c42 d4c49@d4c44 d4c4b@d4c43 d4c4e@p? d4c50@make-warning d4c52@warning? d4c54@&warning-rtd d4c56@&warning-rcd d4c5c@d4c57 d4c5e@d4c59 d4c60@d4c58 d4c63@p? d4c65@make-serious-condition d4c67@serious-condition? d4c69@&serious-rtd d4c6b@&serious-rcd d4c71@d4c6c d4c73@d4c6e d4c75@d4c6d d4c78@p? d4c7a@make-error d4c7c@error? d4c7e@&error-rtd d4c80@&error-rcd d4c86@d4c81 d4c88@d4c83 d4c8a@d4c82 d4c8d@p? d4c8f@make-violation d4c91@violation? d4c93@&violation-rtd d4c95@&violation-rcd d4c9b@d4c96 d4c9d@d4c98 d4c9f@d4c97 d4ca2@p? d4ca4@make-assertion-violation d4ca6@assertion-violation? d4ca8@&assertion-rtd d4caa@&assertion-rcd d4cb2@d4cad d4cb4@d4caf d4cb6@d4cae d4cb9@p? d4cbb@make-irritants-condition d4cbd@d4cac d4cbf@irritants-condition? d4cc1@condition-irritants d4cc3@&irritants-rtd d4cc5@&irritants-rcd d4ccd@d4cc8 d4ccf@d4cca d4cd1@d4cc9 d4cd4@p? d4cd6@make-who-condition d4cd8@d4cc7 d4cda@who-condition? d4cdc@condition-who d4cde@&who-rtd d4ce0@&who-rcd d4ce6@d4ce1 d4ce8@d4ce3 d4cea@d4ce2 d4ced@p? d4cef@make-non-continuable-violation d4cf1@non-continuable-violation? d4cf3@&non-continuable-rtd d4cf5@&non-continuable-rcd d4cfb@d4cf6 d4cfd@d4cf8 d4cff@d4cf7 d4d02@p? d4d04@make-implementation-restriction-violation d4d06@implementation-restriction-violation? d4d08@&implementation-restriction-rtd d4d0a@&implementation-restriction-rcd d4d10@d4d0b d4d12@d4d0d d4d14@d4d0c d4d17@p? d4d19@make-lexical-violation d4d1b@lexical-violation? d4d1d@&lexical-rtd d4d1f@&lexical-rcd d4d29@d4d24 d4d2b@d4d26 d4d2d@d4d25 d4d30@p? d4d32@make-syntax-violation d4d34@d4d21 d4d36@d4d23 d4d38@syntax-violation? d4d3a@syntax-violation-form d4d3c@syntax-violation-subform d4d3e@&syntax-rtd d4d40@&syntax-rcd d4d46@d4d41 d4d48@d4d43 d4d4a@d4d42 d4d4d@p? d4d4f@make-undefined-violation d4d51@undefined-violation? d4d53@&undefined-rtd d4d55@&undefined-rcd d4d5b@d4d56 d4d5d@d4d58 d4d5f@d4d57 d4d62@p? d4d64@make-i/o-error d4d66@i/o-error? d4d68@&i/o-rtd d4d6a@&i/o-rcd d4d70@d4d6b d4d72@d4d6d d4d74@d4d6c d4d77@p? d4d79@make-i/o-read-error d4d7b@i/o-read-error? d4d7d@&i/o-read-rtd d4d7f@&i/o-read-rcd d4d85@d4d80 d4d87@d4d82 d4d89@d4d81 d4d8c@p? d4d8e@make-i/o-write-error d4d90@i/o-write-error? d4d92@&i/o-write-rtd d4d94@&i/o-write-rcd d4d9c@d4d97 d4d9e@d4d99 d4da0@d4d98 d4da3@p? d4da5@make-i/o-invalid-position-error d4da7@d4d96 d4da9@i/o-invalid-position-error? d4dab@i/o-error-position d4dad@&i/o-invalid-position-rtd d4daf@&i/o-invalid-position-rcd d4db7@d4db2 d4db9@d4db4 d4dbb@d4db3 d4dbe@p? d4dc0@make-i/o-filename-error d4dc2@d4db1 d4dc4@i/o-filename-error? d4dc6@i/o-error-filename d4dc8@&i/o-filename-rtd d4dca@&i/o-filename-rcd d4dd0@d4dcb d4dd2@d4dcd d4dd4@d4dcc d4dd7@p? d4dd9@make-i/o-file-protection-error d4ddb@i/o-file-protection-error? d4ddd@&i/o-file-protection-rtd d4ddf@&i/o-file-protection-rcd d4de5@d4de0 d4de7@d4de2 d4de9@d4de1 d4dec@p? d4dee@make-i/o-file-is-read-only-error d4df0@i/o-file-is-read-only-error? d4df2@&i/o-file-is-read-only-rtd d4df4@&i/o-file-is-read-only-rcd d4dfa@d4df5 d4dfc@d4df7 d4dfe@d4df6 d4e01@p? d4e03@make-i/o-file-already-exists-error d4e05@i/o-file-already-exists-error? d4e07@&i/o-file-already-exists-rtd d4e09@&i/o-file-already-exists-rcd d4e0f@d4e0a d4e11@d4e0c d4e13@d4e0b d4e16@p? d4e18@make-i/o-file-does-not-exist-error d4e1a@i/o-file-does-not-exist-error? d4e1c@&i/o-file-does-not-exist-rtd d4e1e@&i/o-file-does-not-exist-rcd d4e26@d4e21 d4e28@d4e23 d4e2a@d4e22 d4e2d@p? d4e2f@make-i/o-port-error d4e31@d4e20 d4e33@i/o-port-error? d4e35@i/o-error-port d4e37@&i/o-port-rtd d4e39@&i/o-port-rcd d4e3f@d4e3a d4e41@d4e3c d4e43@d4e3b d4e46@p? d4e48@make-i/o-decoding-error d4e4a@i/o-decoding-error? d4e4c@&i/o-decoding-rtd d4e4e@&i/o-decoding-rcd d4e56@d4e51 d4e58@d4e53 d4e5a@d4e52 d4e5d@p? d4e5f@make-i/o-encoding-error d4e61@d4e50 d4e63@i/o-encoding-error? d4e65@i/o-encoding-error-char d4e67@&i/o-encoding-rtd d4e69@&i/o-encoding-rcd d4e6f@d4e6a d4e71@d4e6c d4e73@d4e6b d4e76@p? d4e78@make-no-infinities-violation d4e7a@no-infinities-violation? d4e7c@&no-infinities-rtd d4e7e@&no-infinities-rcd d4e84@d4e7f d4e86@d4e81 d4e88@d4e80 d4e8b@p? d4e8d@make-no-nans-violation d4e8f@no-nans-violation? d4e91@&no-nans-rtd d4e93@&no-nans-rcd) (begin (set! d4bd5@d4bd0 (make-record-type-descriptor '&condition '#f 'd4bd3 '#f '#f '#())) (set! d4bd7@d4bd2 '#f) (set! d4bd9@d4bd1 (make-record-constructor-descriptor d4bd5@d4bd0 '#f d4bd7@d4bd2)) (set! d4bdc@&condition? (record-predicate d4bd5@d4bd0)) (set! d4bde@make-&condition (record-constructor d4bd9@d4bd1)) (set! d4be0@&condition-rtd d4bd5@d4bd0) (set! d4be2@&condition-rcd d4bd9@d4bd1) (set! d4c2e@d4c29 (make-record-type-descriptor '&message d4bd5@d4bd0 'd4c2c '#f '#f '#((immutable message)))) (set! d4c30@d4c2b '#f) (set! d4c32@d4c2a (make-record-constructor-descriptor d4c2e@d4c29 d4bd9@d4bd1 d4c30@d4c2b)) (set! d4c35@p? (record-predicate d4c2e@d4c29)) (set! d4c37@make-message-condition (record-constructor d4c32@d4c2a)) (set! d4c39@d4c28 (record-accessor d4c2e@d4c29 '0)) (set! d4c3b@message-condition? (condition-predicate d4c2e@d4c29)) (set! d4c3d@condition-message (condition-accessor d4c2e@d4c29 d4c39@d4c28)) (set! d4c3f@&message-rtd d4c2e@d4c29) (set! d4c41@&message-rcd d4c32@d4c2a) (set! d4c47@d4c42 (make-record-type-descriptor '&warning d4bd5@d4bd0 'd4c45 '#f '#f '#())) (set! d4c49@d4c44 '#f) (set! d4c4b@d4c43 (make-record-constructor-descriptor d4c47@d4c42 d4bd9@d4bd1 d4c49@d4c44)) (set! d4c4e@p? (record-predicate d4c47@d4c42)) (set! d4c50@make-warning (record-constructor d4c4b@d4c43)) (set! d4c52@warning? (condition-predicate d4c47@d4c42)) (set! d4c54@&warning-rtd d4c47@d4c42) (set! d4c56@&warning-rcd d4c4b@d4c43) (set! d4c5c@d4c57 (make-record-type-descriptor '&serious d4bd5@d4bd0 'd4c5a '#f '#f '#())) (set! d4c5e@d4c59 '#f) (set! d4c60@d4c58 (make-record-constructor-descriptor d4c5c@d4c57 d4bd9@d4bd1 d4c5e@d4c59)) (set! d4c63@p? (record-predicate d4c5c@d4c57)) (set! d4c65@make-serious-condition (record-constructor d4c60@d4c58)) (set! d4c67@serious-condition? (condition-predicate d4c5c@d4c57)) (set! d4c69@&serious-rtd d4c5c@d4c57) (set! d4c6b@&serious-rcd d4c60@d4c58) (set! d4c71@d4c6c (make-record-type-descriptor '&error d4c5c@d4c57 'd4c6f '#f '#f '#())) (set! d4c73@d4c6e '#f) (set! d4c75@d4c6d (make-record-constructor-descriptor d4c71@d4c6c d4c60@d4c58 d4c73@d4c6e)) (set! d4c78@p? (record-predicate d4c71@d4c6c)) (set! d4c7a@make-error (record-constructor d4c75@d4c6d)) (set! d4c7c@error? (condition-predicate d4c71@d4c6c)) (set! d4c7e@&error-rtd d4c71@d4c6c) (set! d4c80@&error-rcd d4c75@d4c6d) (set! d4c86@d4c81 (make-record-type-descriptor '&violation d4c5c@d4c57 'd4c84 '#f '#f '#())) (set! d4c88@d4c83 '#f) (set! d4c8a@d4c82 (make-record-constructor-descriptor d4c86@d4c81 d4c60@d4c58 d4c88@d4c83)) (set! d4c8d@p? (record-predicate d4c86@d4c81)) (set! d4c8f@make-violation (record-constructor d4c8a@d4c82)) (set! d4c91@violation? (condition-predicate d4c86@d4c81)) (set! d4c93@&violation-rtd d4c86@d4c81) (set! d4c95@&violation-rcd d4c8a@d4c82) (set! d4c9b@d4c96 (make-record-type-descriptor '&assertion d4c86@d4c81 'd4c99 '#f '#f '#())) (set! d4c9d@d4c98 '#f) (set! d4c9f@d4c97 (make-record-constructor-descriptor d4c9b@d4c96 d4c8a@d4c82 d4c9d@d4c98)) (set! d4ca2@p? (record-predicate d4c9b@d4c96)) (set! d4ca4@make-assertion-violation (record-constructor d4c9f@d4c97)) (set! d4ca6@assertion-violation? (condition-predicate d4c9b@d4c96)) (set! d4ca8@&assertion-rtd d4c9b@d4c96) (set! d4caa@&assertion-rcd d4c9f@d4c97) (set! d4cb2@d4cad (make-record-type-descriptor '&irritants d4bd5@d4bd0 'd4cb0 '#f '#f '#((immutable irritants)))) (set! d4cb4@d4caf '#f) (set! d4cb6@d4cae (make-record-constructor-descriptor d4cb2@d4cad d4bd9@d4bd1 d4cb4@d4caf)) (set! d4cb9@p? (record-predicate d4cb2@d4cad)) (set! d4cbb@make-irritants-condition (record-constructor d4cb6@d4cae)) (set! d4cbd@d4cac (record-accessor d4cb2@d4cad '0)) (set! d4cbf@irritants-condition? (condition-predicate d4cb2@d4cad)) (set! d4cc1@condition-irritants (condition-accessor d4cb2@d4cad d4cbd@d4cac)) (set! d4cc3@&irritants-rtd d4cb2@d4cad) (set! d4cc5@&irritants-rcd d4cb6@d4cae) (set! d4ccd@d4cc8 (make-record-type-descriptor '&who d4bd5@d4bd0 'd4ccb '#f '#f '#((immutable who)))) (set! d4ccf@d4cca '#f) (set! d4cd1@d4cc9 (make-record-constructor-descriptor d4ccd@d4cc8 d4bd9@d4bd1 d4ccf@d4cca)) (set! d4cd4@p? (record-predicate d4ccd@d4cc8)) (set! d4cd6@make-who-condition (record-constructor d4cd1@d4cc9)) (set! d4cd8@d4cc7 (record-accessor d4ccd@d4cc8 '0)) (set! d4cda@who-condition? (condition-predicate d4ccd@d4cc8)) (set! d4cdc@condition-who (condition-accessor d4ccd@d4cc8 d4cd8@d4cc7)) (set! d4cde@&who-rtd d4ccd@d4cc8) (set! d4ce0@&who-rcd d4cd1@d4cc9) (set! d4ce6@d4ce1 (make-record-type-descriptor '&non-continuable d4c86@d4c81 'd4ce4 '#f '#f '#())) (set! d4ce8@d4ce3 '#f) (set! d4cea@d4ce2 (make-record-constructor-descriptor d4ce6@d4ce1 d4c8a@d4c82 d4ce8@d4ce3)) (set! d4ced@p? (record-predicate d4ce6@d4ce1)) (set! d4cef@make-non-continuable-violation (record-constructor d4cea@d4ce2)) (set! d4cf1@non-continuable-violation? (condition-predicate d4ce6@d4ce1)) (set! d4cf3@&non-continuable-rtd d4ce6@d4ce1) (set! d4cf5@&non-continuable-rcd d4cea@d4ce2) (set! d4cfb@d4cf6 (make-record-type-descriptor '&implementation-restriction d4c86@d4c81 'd4cf9 '#f '#f '#())) (set! d4cfd@d4cf8 '#f) (set! d4cff@d4cf7 (make-record-constructor-descriptor d4cfb@d4cf6 d4c8a@d4c82 d4cfd@d4cf8)) (set! d4d02@p? (record-predicate d4cfb@d4cf6)) (set! d4d04@make-implementation-restriction-violation (record-constructor d4cff@d4cf7)) (set! d4d06@implementation-restriction-violation? (condition-predicate d4cfb@d4cf6)) (set! d4d08@&implementation-restriction-rtd d4cfb@d4cf6) (set! d4d0a@&implementation-restriction-rcd d4cff@d4cf7) (set! d4d10@d4d0b (make-record-type-descriptor '&lexical d4c86@d4c81 'd4d0e '#f '#f '#())) (set! d4d12@d4d0d '#f) (set! d4d14@d4d0c (make-record-constructor-descriptor d4d10@d4d0b d4c8a@d4c82 d4d12@d4d0d)) (set! d4d17@p? (record-predicate d4d10@d4d0b)) (set! d4d19@make-lexical-violation (record-constructor d4d14@d4d0c)) (set! d4d1b@lexical-violation? (condition-predicate d4d10@d4d0b)) (set! d4d1d@&lexical-rtd d4d10@d4d0b) (set! d4d1f@&lexical-rcd d4d14@d4d0c) (set! d4d29@d4d24 (make-record-type-descriptor '&syntax d4c86@d4c81 'd4d27 '#f '#f '#((immutable form) (immutable subform)))) (set! d4d2b@d4d26 '#f) (set! d4d2d@d4d25 (make-record-constructor-descriptor d4d29@d4d24 d4c8a@d4c82 d4d2b@d4d26)) (set! d4d30@p? (record-predicate d4d29@d4d24)) (set! d4d32@make-syntax-violation (record-constructor d4d2d@d4d25)) (set! d4d34@d4d21 (record-accessor d4d29@d4d24 '0)) (set! d4d36@d4d23 (record-accessor d4d29@d4d24 '1)) (set! d4d38@syntax-violation? (condition-predicate d4d29@d4d24)) (set! d4d3a@syntax-violation-form (condition-accessor d4d29@d4d24 d4d34@d4d21)) (set! d4d3c@syntax-violation-subform (condition-accessor d4d29@d4d24 d4d36@d4d23)) (set! d4d3e@&syntax-rtd d4d29@d4d24) (set! d4d40@&syntax-rcd d4d2d@d4d25) (set! d4d46@d4d41 (make-record-type-descriptor '&undefined d4c86@d4c81 'd4d44 '#f '#f '#())) (set! d4d48@d4d43 '#f) (set! d4d4a@d4d42 (make-record-constructor-descriptor d4d46@d4d41 d4c8a@d4c82 d4d48@d4d43)) (set! d4d4d@p? (record-predicate d4d46@d4d41)) (set! d4d4f@make-undefined-violation (record-constructor d4d4a@d4d42)) (set! d4d51@undefined-violation? (condition-predicate d4d46@d4d41)) (set! d4d53@&undefined-rtd d4d46@d4d41) (set! d4d55@&undefined-rcd d4d4a@d4d42) (set! d4d5b@d4d56 (make-record-type-descriptor '&i/o d4c71@d4c6c 'd4d59 '#f '#f '#())) (set! d4d5d@d4d58 '#f) (set! d4d5f@d4d57 (make-record-constructor-descriptor d4d5b@d4d56 d4c75@d4c6d d4d5d@d4d58)) (set! d4d62@p? (record-predicate d4d5b@d4d56)) (set! d4d64@make-i/o-error (record-constructor d4d5f@d4d57)) (set! d4d66@i/o-error? (condition-predicate d4d5b@d4d56)) (set! d4d68@&i/o-rtd d4d5b@d4d56) (set! d4d6a@&i/o-rcd d4d5f@d4d57) (set! d4d70@d4d6b (make-record-type-descriptor '&i/o-read d4d5b@d4d56 'd4d6e '#f '#f '#())) (set! d4d72@d4d6d '#f) (set! d4d74@d4d6c (make-record-constructor-descriptor d4d70@d4d6b d4d5f@d4d57 d4d72@d4d6d)) (set! d4d77@p? (record-predicate d4d70@d4d6b)) (set! d4d79@make-i/o-read-error (record-constructor d4d74@d4d6c)) (set! d4d7b@i/o-read-error? (condition-predicate d4d70@d4d6b)) (set! d4d7d@&i/o-read-rtd d4d70@d4d6b) (set! d4d7f@&i/o-read-rcd d4d74@d4d6c) (set! d4d85@d4d80 (make-record-type-descriptor '&i/o-write d4d5b@d4d56 'd4d83 '#f '#f '#())) (set! d4d87@d4d82 '#f) (set! d4d89@d4d81 (make-record-constructor-descriptor d4d85@d4d80 d4d5f@d4d57 d4d87@d4d82)) (set! d4d8c@p? (record-predicate d4d85@d4d80)) (set! d4d8e@make-i/o-write-error (record-constructor d4d89@d4d81)) (set! d4d90@i/o-write-error? (condition-predicate d4d85@d4d80)) (set! d4d92@&i/o-write-rtd d4d85@d4d80) (set! d4d94@&i/o-write-rcd d4d89@d4d81) (set! d4d9c@d4d97 (make-record-type-descriptor '&i/o-invalid-position d4d5b@d4d56 'd4d9a '#f '#f '#((immutable position)))) (set! d4d9e@d4d99 '#f) (set! d4da0@d4d98 (make-record-constructor-descriptor d4d9c@d4d97 d4d5f@d4d57 d4d9e@d4d99)) (set! d4da3@p? (record-predicate d4d9c@d4d97)) (set! d4da5@make-i/o-invalid-position-error (record-constructor d4da0@d4d98)) (set! d4da7@d4d96 (record-accessor d4d9c@d4d97 '0)) (set! d4da9@i/o-invalid-position-error? (condition-predicate d4d9c@d4d97)) (set! d4dab@i/o-error-position (condition-accessor d4d9c@d4d97 d4da7@d4d96)) (set! d4dad@&i/o-invalid-position-rtd d4d9c@d4d97) (set! d4daf@&i/o-invalid-position-rcd d4da0@d4d98) (set! d4db7@d4db2 (make-record-type-descriptor '&i/o-filename d4d5b@d4d56 'd4db5 '#f '#f '#((immutable filename)))) (set! d4db9@d4db4 '#f) (set! d4dbb@d4db3 (make-record-constructor-descriptor d4db7@d4db2 d4d5f@d4d57 d4db9@d4db4)) (set! d4dbe@p? (record-predicate d4db7@d4db2)) (set! d4dc0@make-i/o-filename-error (record-constructor d4dbb@d4db3)) (set! d4dc2@d4db1 (record-accessor d4db7@d4db2 '0)) (set! d4dc4@i/o-filename-error? (condition-predicate d4db7@d4db2)) (set! d4dc6@i/o-error-filename (condition-accessor d4db7@d4db2 d4dc2@d4db1)) (set! d4dc8@&i/o-filename-rtd d4db7@d4db2) (set! d4dca@&i/o-filename-rcd d4dbb@d4db3) (set! d4dd0@d4dcb (make-record-type-descriptor '&i/o-file-protection d4db7@d4db2 'd4dce '#f '#f '#())) (set! d4dd2@d4dcd '#f) (set! d4dd4@d4dcc (make-record-constructor-descriptor d4dd0@d4dcb d4dbb@d4db3 d4dd2@d4dcd)) (set! d4dd7@p? (record-predicate d4dd0@d4dcb)) (set! d4dd9@make-i/o-file-protection-error (record-constructor d4dd4@d4dcc)) (set! d4ddb@i/o-file-protection-error? (condition-predicate d4dd0@d4dcb)) (set! d4ddd@&i/o-file-protection-rtd d4dd0@d4dcb) (set! d4ddf@&i/o-file-protection-rcd d4dd4@d4dcc) (set! d4de5@d4de0 (make-record-type-descriptor '&i/o-file-is-read-only d4dd0@d4dcb 'd4de3 '#f '#f '#())) (set! d4de7@d4de2 '#f) (set! d4de9@d4de1 (make-record-constructor-descriptor d4de5@d4de0 d4dd4@d4dcc d4de7@d4de2)) (set! d4dec@p? (record-predicate d4de5@d4de0)) (set! d4dee@make-i/o-file-is-read-only-error (record-constructor d4de9@d4de1)) (set! d4df0@i/o-file-is-read-only-error? (condition-predicate d4de5@d4de0)) (set! d4df2@&i/o-file-is-read-only-rtd d4de5@d4de0) (set! d4df4@&i/o-file-is-read-only-rcd d4de9@d4de1) (set! d4dfa@d4df5 (make-record-type-descriptor '&i/o-file-already-exists d4db7@d4db2 'd4df8 '#f '#f '#())) (set! d4dfc@d4df7 '#f) (set! d4dfe@d4df6 (make-record-constructor-descriptor d4dfa@d4df5 d4dbb@d4db3 d4dfc@d4df7)) (set! d4e01@p? (record-predicate d4dfa@d4df5)) (set! d4e03@make-i/o-file-already-exists-error (record-constructor d4dfe@d4df6)) (set! d4e05@i/o-file-already-exists-error? (condition-predicate d4dfa@d4df5)) (set! d4e07@&i/o-file-already-exists-rtd d4dfa@d4df5) (set! d4e09@&i/o-file-already-exists-rcd d4dfe@d4df6) (set! d4e0f@d4e0a (make-record-type-descriptor '&i/o-file-does-not-exist d4db7@d4db2 'd4e0d '#f '#f '#())) (set! d4e11@d4e0c '#f) (set! d4e13@d4e0b (make-record-constructor-descriptor d4e0f@d4e0a d4dbb@d4db3 d4e11@d4e0c)) (set! d4e16@p? (record-predicate d4e0f@d4e0a)) (set! d4e18@make-i/o-file-does-not-exist-error (record-constructor d4e13@d4e0b)) (set! d4e1a@i/o-file-does-not-exist-error? (condition-predicate d4e0f@d4e0a)) (set! d4e1c@&i/o-file-does-not-exist-rtd d4e0f@d4e0a) (set! d4e1e@&i/o-file-does-not-exist-rcd d4e13@d4e0b) (set! d4e26@d4e21 (make-record-type-descriptor '&i/o-port d4d5b@d4d56 'd4e24 '#f '#f '#((immutable port)))) (set! d4e28@d4e23 '#f) (set! d4e2a@d4e22 (make-record-constructor-descriptor d4e26@d4e21 d4d5f@d4d57 d4e28@d4e23)) (set! d4e2d@p? (record-predicate d4e26@d4e21)) (set! d4e2f@make-i/o-port-error (record-constructor d4e2a@d4e22)) (set! d4e31@d4e20 (record-accessor d4e26@d4e21 '0)) (set! d4e33@i/o-port-error? (condition-predicate d4e26@d4e21)) (set! d4e35@i/o-error-port (condition-accessor d4e26@d4e21 d4e31@d4e20)) (set! d4e37@&i/o-port-rtd d4e26@d4e21) (set! d4e39@&i/o-port-rcd d4e2a@d4e22) (set! d4e3f@d4e3a (make-record-type-descriptor '&i/o-decoding d4e26@d4e21 'd4e3d '#f '#f '#())) (set! d4e41@d4e3c '#f) (set! d4e43@d4e3b (make-record-constructor-descriptor d4e3f@d4e3a d4e2a@d4e22 d4e41@d4e3c)) (set! d4e46@p? (record-predicate d4e3f@d4e3a)) (set! d4e48@make-i/o-decoding-error (record-constructor d4e43@d4e3b)) (set! d4e4a@i/o-decoding-error? (condition-predicate d4e3f@d4e3a)) (set! d4e4c@&i/o-decoding-rtd d4e3f@d4e3a) (set! d4e4e@&i/o-decoding-rcd d4e43@d4e3b) (set! d4e56@d4e51 (make-record-type-descriptor '&i/o-encoding d4e26@d4e21 'd4e54 '#f '#f '#((immutable char)))) (set! d4e58@d4e53 '#f) (set! d4e5a@d4e52 (make-record-constructor-descriptor d4e56@d4e51 d4e2a@d4e22 d4e58@d4e53)) (set! d4e5d@p? (record-predicate d4e56@d4e51)) (set! d4e5f@make-i/o-encoding-error (record-constructor d4e5a@d4e52)) (set! d4e61@d4e50 (record-accessor d4e56@d4e51 '0)) (set! d4e63@i/o-encoding-error? (condition-predicate d4e56@d4e51)) (set! d4e65@i/o-encoding-error-char (condition-accessor d4e56@d4e51 d4e61@d4e50)) (set! d4e67@&i/o-encoding-rtd d4e56@d4e51) (set! d4e69@&i/o-encoding-rcd d4e5a@d4e52) (set! d4e6f@d4e6a (make-record-type-descriptor '&no-infinities d4cfb@d4cf6 'd4e6d '#f '#f '#())) (set! d4e71@d4e6c '#f) (set! d4e73@d4e6b (make-record-constructor-descriptor d4e6f@d4e6a d4cff@d4cf7 d4e71@d4e6c)) (set! d4e76@p? (record-predicate d4e6f@d4e6a)) (set! d4e78@make-no-infinities-violation (record-constructor d4e73@d4e6b)) (set! d4e7a@no-infinities-violation? (condition-predicate d4e6f@d4e6a)) (set! d4e7c@&no-infinities-rtd d4e6f@d4e6a) (set! d4e7e@&no-infinities-rcd d4e73@d4e6b) (set! d4e84@d4e7f (make-record-type-descriptor '&no-nans d4cfb@d4cf6 'd4e82 '#f '#f '#())) (set! d4e86@d4e81 '#f) (set! d4e88@d4e80 (make-record-constructor-descriptor d4e84@d4e7f d4cff@d4cf7 d4e86@d4e81)) (set! d4e8b@p? (record-predicate d4e84@d4e7f)) (set! d4e8d@make-no-nans-violation (record-constructor d4e88@d4e80)) (set! d4e8f@no-nans-violation? (condition-predicate d4e84@d4e7f)) (set! d4e91@&no-nans-rtd d4e84@d4e7f) (set! d4e93@&no-nans-rcd d4e88@d4e80) (begin (set! d4f84@d4e93@&no-nans-rcd d4e93@&no-nans-rcd) (set! d4f83@d4e91@&no-nans-rtd d4e91@&no-nans-rtd) (set! d4f82@d4e8f@no-nans-violation? d4e8f@no-nans-violation?) (set! d4f81@d4e8d@make-no-nans-violation d4e8d@make-no-nans-violation) (set! d4f80@d4e8b@p? d4e8b@p?) (set! d4f7f@d4e88@d4e80 d4e88@d4e80) (set! d4f7e@d4e86@d4e81 d4e86@d4e81) (set! d4f7d@d4e84@d4e7f d4e84@d4e7f) (set! d4f7c@d4e7e@&no-infinities-rcd d4e7e@&no-infinities-rcd) (set! d4f7b@d4e7c@&no-infinities-rtd d4e7c@&no-infinities-rtd) (set! d4f7a@d4e7a@no-infinities-violation? d4e7a@no-infinities-violation?) (set! d4f79@d4e78@make-no-infinities-violation d4e78@make-no-infinities-violation) (set! d4f78@d4e76@p? d4e76@p?) (set! d4f77@d4e73@d4e6b d4e73@d4e6b) (set! d4f76@d4e71@d4e6c d4e71@d4e6c) (set! d4f75@d4e6f@d4e6a d4e6f@d4e6a) (set! d4f74@d4e69@&i/o-encoding-rcd d4e69@&i/o-encoding-rcd) (set! d4f73@d4e67@&i/o-encoding-rtd d4e67@&i/o-encoding-rtd) (set! d4f72@d4e65@i/o-encoding-error-char d4e65@i/o-encoding-error-char) (set! d4f71@d4e63@i/o-encoding-error? d4e63@i/o-encoding-error?) (set! d4f70@d4e61@d4e50 d4e61@d4e50) (set! d4f6f@d4e5f@make-i/o-encoding-error d4e5f@make-i/o-encoding-error) (set! d4f6e@d4e5d@p? d4e5d@p?) (set! d4f6d@d4e5a@d4e52 d4e5a@d4e52) (set! d4f6c@d4e58@d4e53 d4e58@d4e53) (set! d4f6b@d4e56@d4e51 d4e56@d4e51) (set! d4f6a@d4e4e@&i/o-decoding-rcd d4e4e@&i/o-decoding-rcd) (set! d4f69@d4e4c@&i/o-decoding-rtd d4e4c@&i/o-decoding-rtd) (set! d4f68@d4e4a@i/o-decoding-error? d4e4a@i/o-decoding-error?) (set! d4f67@d4e48@make-i/o-decoding-error d4e48@make-i/o-decoding-error) (set! d4f66@d4e46@p? d4e46@p?) (set! d4f65@d4e43@d4e3b d4e43@d4e3b) (set! d4f64@d4e41@d4e3c d4e41@d4e3c) (set! d4f63@d4e3f@d4e3a d4e3f@d4e3a) (set! d4f62@d4e39@&i/o-port-rcd d4e39@&i/o-port-rcd) (set! d4f61@d4e37@&i/o-port-rtd d4e37@&i/o-port-rtd) (set! d4f60@d4e35@i/o-error-port d4e35@i/o-error-port) (set! d4f5f@d4e33@i/o-port-error? d4e33@i/o-port-error?) (set! d4f5e@d4e31@d4e20 d4e31@d4e20) (set! d4f5d@d4e2f@make-i/o-port-error d4e2f@make-i/o-port-error) (set! d4f5c@d4e2d@p? d4e2d@p?) (set! d4f5b@d4e2a@d4e22 d4e2a@d4e22) (set! d4f5a@d4e28@d4e23 d4e28@d4e23) (set! d4f59@d4e26@d4e21 d4e26@d4e21) (set! d4f58@d4e1e@&i/o-file-does-not-exist-rcd d4e1e@&i/o-file-does-not-exist-rcd) (set! d4f57@d4e1c@&i/o-file-does-not-exist-rtd d4e1c@&i/o-file-does-not-exist-rtd) (set! d4f56@d4e1a@i/o-file-does-not-exist-error? d4e1a@i/o-file-does-not-exist-error?) (set! d4f55@d4e18@make-i/o-file-does-not-exist-error d4e18@make-i/o-file-does-not-exist-error) (set! d4f54@d4e16@p? d4e16@p?) (set! d4f53@d4e13@d4e0b d4e13@d4e0b) (set! d4f52@d4e11@d4e0c d4e11@d4e0c) (set! d4f51@d4e0f@d4e0a d4e0f@d4e0a) (set! d4f50@d4e09@&i/o-file-already-exists-rcd d4e09@&i/o-file-already-exists-rcd) (set! d4f4f@d4e07@&i/o-file-already-exists-rtd d4e07@&i/o-file-already-exists-rtd) (set! d4f4e@d4e05@i/o-file-already-exists-error? d4e05@i/o-file-already-exists-error?) (set! d4f4d@d4e03@make-i/o-file-already-exists-error d4e03@make-i/o-file-already-exists-error) (set! d4f4c@d4e01@p? d4e01@p?) (set! d4f4b@d4dfe@d4df6 d4dfe@d4df6) (set! d4f4a@d4dfc@d4df7 d4dfc@d4df7) (set! d4f49@d4dfa@d4df5 d4dfa@d4df5) (set! d4f48@d4df4@&i/o-file-is-read-only-rcd d4df4@&i/o-file-is-read-only-rcd) (set! d4f47@d4df2@&i/o-file-is-read-only-rtd d4df2@&i/o-file-is-read-only-rtd) (set! d4f46@d4df0@i/o-file-is-read-only-error? d4df0@i/o-file-is-read-only-error?) (set! d4f45@d4dee@make-i/o-file-is-read-only-error d4dee@make-i/o-file-is-read-only-error) (set! d4f44@d4dec@p? d4dec@p?) (set! d4f43@d4de9@d4de1 d4de9@d4de1) (set! d4f42@d4de7@d4de2 d4de7@d4de2) (set! d4f41@d4de5@d4de0 d4de5@d4de0) (set! d4f40@d4ddf@&i/o-file-protection-rcd d4ddf@&i/o-file-protection-rcd) (set! d4f3f@d4ddd@&i/o-file-protection-rtd d4ddd@&i/o-file-protection-rtd) (set! d4f3e@d4ddb@i/o-file-protection-error? d4ddb@i/o-file-protection-error?) (set! d4f3d@d4dd9@make-i/o-file-protection-error d4dd9@make-i/o-file-protection-error) (set! d4f3c@d4dd7@p? d4dd7@p?) (set! d4f3b@d4dd4@d4dcc d4dd4@d4dcc) (set! d4f3a@d4dd2@d4dcd d4dd2@d4dcd) (set! d4f39@d4dd0@d4dcb d4dd0@d4dcb) (set! d4f38@d4dca@&i/o-filename-rcd d4dca@&i/o-filename-rcd) (set! d4f37@d4dc8@&i/o-filename-rtd d4dc8@&i/o-filename-rtd) (set! d4f36@d4dc6@i/o-error-filename d4dc6@i/o-error-filename) (set! d4f35@d4dc4@i/o-filename-error? d4dc4@i/o-filename-error?) (set! d4f34@d4dc2@d4db1 d4dc2@d4db1) (set! d4f33@d4dc0@make-i/o-filename-error d4dc0@make-i/o-filename-error) (set! d4f32@d4dbe@p? d4dbe@p?) (set! d4f31@d4dbb@d4db3 d4dbb@d4db3) (set! d4f30@d4db9@d4db4 d4db9@d4db4) (set! d4f2f@d4db7@d4db2 d4db7@d4db2) (set! d4f2e@d4daf@&i/o-invalid-position-rcd d4daf@&i/o-invalid-position-rcd) (set! d4f2d@d4dad@&i/o-invalid-position-rtd d4dad@&i/o-invalid-position-rtd) (set! d4f2c@d4dab@i/o-error-position d4dab@i/o-error-position) (set! d4f2b@d4da9@i/o-invalid-position-error? d4da9@i/o-invalid-position-error?) (set! d4f2a@d4da7@d4d96 d4da7@d4d96) (set! d4f29@d4da5@make-i/o-invalid-position-error d4da5@make-i/o-invalid-position-error) (set! d4f28@d4da3@p? d4da3@p?) (set! d4f27@d4da0@d4d98 d4da0@d4d98) (set! d4f26@d4d9e@d4d99 d4d9e@d4d99) (set! d4f25@d4d9c@d4d97 d4d9c@d4d97) (set! d4f24@d4d94@&i/o-write-rcd d4d94@&i/o-write-rcd) (set! d4f23@d4d92@&i/o-write-rtd d4d92@&i/o-write-rtd) (set! d4f22@d4d90@i/o-write-error? d4d90@i/o-write-error?) (set! d4f21@d4d8e@make-i/o-write-error d4d8e@make-i/o-write-error) (set! d4f20@d4d8c@p? d4d8c@p?) (set! d4f1f@d4d89@d4d81 d4d89@d4d81) (set! d4f1e@d4d87@d4d82 d4d87@d4d82) (set! d4f1d@d4d85@d4d80 d4d85@d4d80) (set! d4f1c@d4d7f@&i/o-read-rcd d4d7f@&i/o-read-rcd) (set! d4f1b@d4d7d@&i/o-read-rtd d4d7d@&i/o-read-rtd) (set! d4f1a@d4d7b@i/o-read-error? d4d7b@i/o-read-error?) (set! d4f19@d4d79@make-i/o-read-error d4d79@make-i/o-read-error) (set! d4f18@d4d77@p? d4d77@p?) (set! d4f17@d4d74@d4d6c d4d74@d4d6c) (set! d4f16@d4d72@d4d6d d4d72@d4d6d) (set! d4f15@d4d70@d4d6b d4d70@d4d6b) (set! d4f14@d4d6a@&i/o-rcd d4d6a@&i/o-rcd) (set! d4f13@d4d68@&i/o-rtd d4d68@&i/o-rtd) (set! d4f12@d4d66@i/o-error? d4d66@i/o-error?) (set! d4f11@d4d64@make-i/o-error d4d64@make-i/o-error) (set! d4f10@d4d62@p? d4d62@p?) (set! d4f0f@d4d5f@d4d57 d4d5f@d4d57) (set! d4f0e@d4d5d@d4d58 d4d5d@d4d58) (set! d4f0d@d4d5b@d4d56 d4d5b@d4d56) (set! d4f0c@d4d55@&undefined-rcd d4d55@&undefined-rcd) (set! d4f0b@d4d53@&undefined-rtd d4d53@&undefined-rtd) (set! d4f0a@d4d51@undefined-violation? d4d51@undefined-violation?) (set! d4f09@d4d4f@make-undefined-violation d4d4f@make-undefined-violation) (set! d4f08@d4d4d@p? d4d4d@p?) (set! d4f07@d4d4a@d4d42 d4d4a@d4d42) (set! d4f06@d4d48@d4d43 d4d48@d4d43) (set! d4f05@d4d46@d4d41 d4d46@d4d41) (set! d4f04@d4d40@&syntax-rcd d4d40@&syntax-rcd) (set! d4f03@d4d3e@&syntax-rtd d4d3e@&syntax-rtd) (set! d4f02@d4d3c@syntax-violation-subform d4d3c@syntax-violation-subform) (set! d4f01@d4d3a@syntax-violation-form d4d3a@syntax-violation-form) (set! d4f00@d4d38@syntax-violation? d4d38@syntax-violation?) (set! d4eff@d4d36@d4d23 d4d36@d4d23) (set! d4efe@d4d34@d4d21 d4d34@d4d21) (set! d4efd@d4d32@make-syntax-violation d4d32@make-syntax-violation) (set! d4efc@d4d30@p? d4d30@p?) (set! d4efb@d4d2d@d4d25 d4d2d@d4d25) (set! d4efa@d4d2b@d4d26 d4d2b@d4d26) (set! d4ef9@d4d29@d4d24 d4d29@d4d24) (set! d4ef8@d4d1f@&lexical-rcd d4d1f@&lexical-rcd) (set! d4ef7@d4d1d@&lexical-rtd d4d1d@&lexical-rtd) (set! d4ef6@d4d1b@lexical-violation? d4d1b@lexical-violation?) (set! d4ef5@d4d19@make-lexical-violation d4d19@make-lexical-violation) (set! d4ef4@d4d17@p? d4d17@p?) (set! d4ef3@d4d14@d4d0c d4d14@d4d0c) (set! d4ef2@d4d12@d4d0d d4d12@d4d0d) (set! d4ef1@d4d10@d4d0b d4d10@d4d0b) (set! d4ef0@d4d0a@&implementation-restriction-rcd d4d0a@&implementation-restriction-rcd) (set! d4eef@d4d08@&implementation-restriction-rtd d4d08@&implementation-restriction-rtd) (set! d4eee@d4d06@implementation-restriction-violation? d4d06@implementation-restriction-violation?) (set! d4eed@d4d04@make-implementation-restriction-violation d4d04@make-implementation-restriction-violation) (set! d4eec@d4d02@p? d4d02@p?) (set! d4eeb@d4cff@d4cf7 d4cff@d4cf7) (set! d4eea@d4cfd@d4cf8 d4cfd@d4cf8) (set! d4ee9@d4cfb@d4cf6 d4cfb@d4cf6) (set! d4ee8@d4cf5@&non-continuable-rcd d4cf5@&non-continuable-rcd) (set! d4ee7@d4cf3@&non-continuable-rtd d4cf3@&non-continuable-rtd) (set! d4ee6@d4cf1@non-continuable-violation? d4cf1@non-continuable-violation?) (set! d4ee5@d4cef@make-non-continuable-violation d4cef@make-non-continuable-violation) (set! d4ee4@d4ced@p? d4ced@p?) (set! d4ee3@d4cea@d4ce2 d4cea@d4ce2) (set! d4ee2@d4ce8@d4ce3 d4ce8@d4ce3) (set! d4ee1@d4ce6@d4ce1 d4ce6@d4ce1) (set! d4ee0@d4ce0@&who-rcd d4ce0@&who-rcd) (set! d4edf@d4cde@&who-rtd d4cde@&who-rtd) (set! d4ede@d4cdc@condition-who d4cdc@condition-who) (set! d4edd@d4cda@who-condition? d4cda@who-condition?) (set! d4edc@d4cd8@d4cc7 d4cd8@d4cc7) (set! d4edb@d4cd6@make-who-condition d4cd6@make-who-condition) (set! d4eda@d4cd4@p? d4cd4@p?) (set! d4ed9@d4cd1@d4cc9 d4cd1@d4cc9) (set! d4ed8@d4ccf@d4cca d4ccf@d4cca) (set! d4ed7@d4ccd@d4cc8 d4ccd@d4cc8) (set! d4ed6@d4cc5@&irritants-rcd d4cc5@&irritants-rcd) (set! d4ed5@d4cc3@&irritants-rtd d4cc3@&irritants-rtd) (set! d4ed4@d4cc1@condition-irritants d4cc1@condition-irritants) (set! d4ed3@d4cbf@irritants-condition? d4cbf@irritants-condition?) (set! d4ed2@d4cbd@d4cac d4cbd@d4cac) (set! d4ed1@d4cbb@make-irritants-condition d4cbb@make-irritants-condition) (set! d4ed0@d4cb9@p? d4cb9@p?) (set! d4ecf@d4cb6@d4cae d4cb6@d4cae) (set! d4ece@d4cb4@d4caf d4cb4@d4caf) (set! d4ecd@d4cb2@d4cad d4cb2@d4cad) (set! d4ecc@d4caa@&assertion-rcd d4caa@&assertion-rcd) (set! d4ecb@d4ca8@&assertion-rtd d4ca8@&assertion-rtd) (set! d4eca@d4ca6@assertion-violation? d4ca6@assertion-violation?) (set! d4ec9@d4ca4@make-assertion-violation d4ca4@make-assertion-violation) (set! d4ec8@d4ca2@p? d4ca2@p?) (set! d4ec7@d4c9f@d4c97 d4c9f@d4c97) (set! d4ec6@d4c9d@d4c98 d4c9d@d4c98) (set! d4ec5@d4c9b@d4c96 d4c9b@d4c96) (set! d4ec4@d4c95@&violation-rcd d4c95@&violation-rcd) (set! d4ec3@d4c93@&violation-rtd d4c93@&violation-rtd) (set! d4ec2@d4c91@violation? d4c91@violation?) (set! d4ec1@d4c8f@make-violation d4c8f@make-violation) (set! d4ec0@d4c8d@p? d4c8d@p?) (set! d4ebf@d4c8a@d4c82 d4c8a@d4c82) (set! d4ebe@d4c88@d4c83 d4c88@d4c83) (set! d4ebd@d4c86@d4c81 d4c86@d4c81) (set! d4ebc@d4c80@&error-rcd d4c80@&error-rcd) (set! d4ebb@d4c7e@&error-rtd d4c7e@&error-rtd) (set! d4eba@d4c7c@error? d4c7c@error?) (set! d4eb9@d4c7a@make-error d4c7a@make-error) (set! d4eb8@d4c78@p? d4c78@p?) (set! d4eb7@d4c75@d4c6d d4c75@d4c6d) (set! d4eb6@d4c73@d4c6e d4c73@d4c6e) (set! d4eb5@d4c71@d4c6c d4c71@d4c6c) (set! d4eb4@d4c6b@&serious-rcd d4c6b@&serious-rcd) (set! d4eb3@d4c69@&serious-rtd d4c69@&serious-rtd) (set! d4eb2@d4c67@serious-condition? d4c67@serious-condition?) (set! d4eb1@d4c65@make-serious-condition d4c65@make-serious-condition) (set! d4eb0@d4c63@p? d4c63@p?) (set! d4eaf@d4c60@d4c58 d4c60@d4c58) (set! d4eae@d4c5e@d4c59 d4c5e@d4c59) (set! d4ead@d4c5c@d4c57 d4c5c@d4c57) (set! d4eac@d4c56@&warning-rcd d4c56@&warning-rcd) (set! d4eab@d4c54@&warning-rtd d4c54@&warning-rtd) (set! d4eaa@d4c52@warning? d4c52@warning?) (set! d4ea9@d4c50@make-warning d4c50@make-warning) (set! d4ea8@d4c4e@p? d4c4e@p?) (set! d4ea7@d4c4b@d4c43 d4c4b@d4c43) (set! d4ea6@d4c49@d4c44 d4c49@d4c44) (set! d4ea5@d4c47@d4c42 d4c47@d4c42) (set! d4ea4@d4c41@&message-rcd d4c41@&message-rcd) (set! d4ea3@d4c3f@&message-rtd d4c3f@&message-rtd) (set! d4ea2@d4c3d@condition-message d4c3d@condition-message) (set! d4ea1@d4c3b@message-condition? d4c3b@message-condition?) (set! d4ea0@d4c39@d4c28 d4c39@d4c28) (set! d4e9f@d4c37@make-message-condition d4c37@make-message-condition) (set! d4e9e@d4c35@p? d4c35@p?) (set! d4e9d@d4c32@d4c2a d4c32@d4c2a) (set! d4e9c@d4c30@d4c2b d4c30@d4c2b) (set! d4e9b@d4c2e@d4c29 d4c2e@d4c29) (set! d4e9a@d4be2@&condition-rcd d4be2@&condition-rcd) (set! d4e99@d4be0@&condition-rtd d4be0@&condition-rtd) (set! d4e98@d4bde@make-&condition d4bde@make-&condition) (set! d4e97@d4bdc@&condition? d4bdc@&condition?) (set! d4e96@d4bd9@d4bd1 d4bd9@d4bd1) (set! d4e95@d4bd7@d4bd2 d4bd7@d4bd2) (set! d4e94@d4bd5@d4bd0 d4bd5@d4bd0)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (d2a13@d29c8@current-primitive-locations (lambda (d5400@x) ((lambda (d5402@t) (if d5402@t (cdr d5402@t) '#f)) (assq d5400@x '((&no-nans-rcd . d4f84@d4e93@&no-nans-rcd) (&no-nans-rtd . d4f83@d4e91@&no-nans-rtd) (&no-infinities-rcd . d4f7c@d4e7e@&no-infinities-rcd) (&no-infinities-rtd . d4f7b@d4e7c@&no-infinities-rtd) (&i/o-encoding-rcd . d4f74@d4e69@&i/o-encoding-rcd) (&i/o-encoding-rtd . d4f73@d4e67@&i/o-encoding-rtd) (&i/o-decoding-rcd . d4f6a@d4e4e@&i/o-decoding-rcd) (&i/o-decoding-rtd . d4f69@d4e4c@&i/o-decoding-rtd) (&i/o-port-rcd . d4f62@d4e39@&i/o-port-rcd) (&i/o-port-rtd . d4f61@d4e37@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . d4f58@d4e1e@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . d4f57@d4e1c@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . d4f50@d4e09@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . d4f4f@d4e07@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . d4f48@d4df4@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . d4f47@d4df2@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . d4f40@d4ddf@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . d4f3f@d4ddd@&i/o-file-protection-rtd) (&i/o-filename-rcd . d4f38@d4dca@&i/o-filename-rcd) (&i/o-filename-rtd . d4f37@d4dc8@&i/o-filename-rtd) (&i/o-invalid-position-rcd . d4f2e@d4daf@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . d4f2d@d4dad@&i/o-invalid-position-rtd) (&i/o-write-rcd . d4f24@d4d94@&i/o-write-rcd) (&i/o-write-rtd . d4f23@d4d92@&i/o-write-rtd) (&i/o-read-rcd . d4f1c@d4d7f@&i/o-read-rcd) (&i/o-read-rtd . d4f1b@d4d7d@&i/o-read-rtd) (&i/o-rcd . d4f14@d4d6a@&i/o-rcd) (&i/o-rtd . d4f13@d4d68@&i/o-rtd) (&undefined-rcd . d4f0c@d4d55@&undefined-rcd) (&undefined-rtd . d4f0b@d4d53@&undefined-rtd) (&syntax-rcd . d4f04@d4d40@&syntax-rcd) (&syntax-rtd . d4f03@d4d3e@&syntax-rtd) (&lexical-rcd . d4ef8@d4d1f@&lexical-rcd) (&lexical-rtd . d4ef7@d4d1d@&lexical-rtd) (&implementation-restriction-rcd . d4ef0@d4d0a@&implementation-restriction-rcd) (&implementation-restriction-rtd . d4eef@d4d08@&implementation-restriction-rtd) (&non-continuable-rcd . d4ee8@d4cf5@&non-continuable-rcd) (&non-continuable-rtd . d4ee7@d4cf3@&non-continuable-rtd) (&who-rcd . d4ee0@d4ce0@&who-rcd) (&who-rtd . d4edf@d4cde@&who-rtd) (&irritants-rcd . d4ed6@d4cc5@&irritants-rcd) (&irritants-rtd . d4ed5@d4cc3@&irritants-rtd) (&assertion-rcd . d4ecc@d4caa@&assertion-rcd) (&assertion-rtd . d4ecb@d4ca8@&assertion-rtd) (&violation-rcd . d4ec4@d4c95@&violation-rcd) (&violation-rtd . d4ec3@d4c93@&violation-rtd) (&error-rcd . d4ebc@d4c80@&error-rcd) (&error-rtd . d4ebb@d4c7e@&error-rtd) (&serious-rcd . d4eb4@d4c6b@&serious-rcd) (&serious-rtd . d4eb3@d4c69@&serious-rtd) (&warning-rcd . d4eac@d4c56@&warning-rcd) (&warning-rtd . d4eab@d4c54@&warning-rtd) (&message-rcd . d4ea4@d4c41@&message-rcd) (&message-rtd . d4ea3@d4c3f@&message-rtd) (&condition-rcd . d4e9a@d4be2@&condition-rcd) (&condition-rtd . d4e99@d4be0@&condition-rtd) (syntax-error . d4bc2@d3130@syntax-error) (syntax-dispatch . d4b5d@d3066@syntax-dispatch) (load . d50b5@d4fa0@load) (interaction-environment . d4bca@d3140@interaction-environment) (library-path . d2c7f@d2ab0@library-path) (make-parameter . d29c1@d28bd@make-parameter) (make-variable-transformer . d4b1b@d2e93@make-variable-transformer) (identifier? . d4bc5@d3136@identifier?) (generate-temporaries . d4bbb@d3122@generate-temporaries) (free-identifier=? . d4bbc@d3124@free-identifier=?) (syntax->datum . d4bc7@d313a@syntax->datum) (datum->syntax . d4bc6@d3138@datum->syntax) (bound-identifier=? . d4bbd@d3126@bound-identifier=?) (make-i/o-write-error . d4f21@d4d8e@make-i/o-write-error) (make-i/o-read-error . d4f19@d4d79@make-i/o-read-error) (make-i/o-port-error . d4f5d@d4e2f@make-i/o-port-error) (make-i/o-invalid-position-error . d4f29@d4da5@make-i/o-invalid-position-error) (make-i/o-filename-error . d4f33@d4dc0@make-i/o-filename-error) (make-i/o-file-protection-error . d4f3d@d4dd9@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . d4f45@d4dee@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . d4f55@d4e18@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . d4f4d@d4e03@make-i/o-file-already-exists-error) (make-i/o-error . d4f11@d4d64@make-i/o-error) (make-i/o-encoding-error . d4f6f@d4e5f@make-i/o-encoding-error) (make-i/o-decoding-error . d4f67@d4e48@make-i/o-decoding-error) (i/o-write-error? . d4f22@d4d90@i/o-write-error?) (i/o-read-error? . d4f1a@d4d7b@i/o-read-error?) (i/o-port-error? . d4f5f@d4e33@i/o-port-error?) (i/o-invalid-position-error? . d4f2b@d4da9@i/o-invalid-position-error?) (i/o-filename-error? . d4f35@d4dc4@i/o-filename-error?) (i/o-file-protection-error? . d4f3e@d4ddb@i/o-file-protection-error?) (i/o-file-is-read-only-error? . d4f46@d4df0@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . d4f56@d4e1a@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . d4f4e@d4e05@i/o-file-already-exists-error?) (i/o-error? . d4f12@d4d66@i/o-error?) (i/o-error-position . d4f2c@d4dab@i/o-error-position) (i/o-error-port . d4f60@d4e35@i/o-error-port) (i/o-error-filename . d4f36@d4dc6@i/o-error-filename) (i/o-encoding-error? . d4f71@d4e63@i/o-encoding-error?) (i/o-encoding-error-char . d4f72@d4e65@i/o-encoding-error-char) (i/o-decoding-error? . d4f68@d4e4a@i/o-decoding-error?) (scheme-report-environment . d4bb2@d3110@scheme-report-environment) (null-environment . d4bb1@d310e@null-environment) (command-line . d50b2@d4f9a@command-line) (eval . d4bb4@d3114@eval) (environment . d4bb0@d310c@environment) (who-condition? . d4edd@d4cda@who-condition?) (warning? . d4eaa@d4c52@warning?) (violation? . d4ec2@d4c91@violation?) (undefined-violation? . d4f0a@d4d51@undefined-violation?) (syntax-violation? . d4f00@d4d38@syntax-violation?) (syntax-violation-subform . d4f02@d4d3c@syntax-violation-subform) (syntax-violation-form . d4f01@d4d3a@syntax-violation-form) (syntax-violation . d4bc4@d3134@syntax-violation) (serious-condition? . d4eb2@d4c67@serious-condition?) (non-continuable-violation? . d4ee6@d4cf1@non-continuable-violation?) (message-condition? . d4ea1@d4c3b@message-condition?) (make-who-condition . d4edb@d4cd6@make-who-condition) (make-warning . d4ea9@d4c50@make-warning) (make-violation . d4ec1@d4c8f@make-violation) (make-undefined-violation . d4f09@d4d4f@make-undefined-violation) (make-syntax-violation . d4efd@d4d32@make-syntax-violation) (make-serious-condition . d4eb1@d4c65@make-serious-condition) (make-non-continuable-violation . d4ee5@d4cef@make-non-continuable-violation) (make-message-condition . d4e9f@d4c37@make-message-condition) (make-lexical-violation . d4ef5@d4d19@make-lexical-violation) (make-irritants-condition . d4ed1@d4cbb@make-irritants-condition) (make-implementation-restriction-violation . d4eed@d4d04@make-implementation-restriction-violation) (make-error . d4eb9@d4c7a@make-error) (make-assertion-violation . d4ec9@d4ca4@make-assertion-violation) (lexical-violation? . d4ef6@d4d1b@lexical-violation?) (irritants-condition? . d4ed3@d4cbf@irritants-condition?) (implementation-restriction-violation? . d4eee@d4d06@implementation-restriction-violation?) (error? . d4eba@d4c7c@error?) (condition-who . d4ede@d4cdc@condition-who) (condition-message . d4ea2@d4c3d@condition-message) (condition-irritants . d4ed4@d4cc1@condition-irritants) (assertion-violation? . d4eca@d4ca6@assertion-violation?) (no-nans-violation? . d4f82@d4e8f@no-nans-violation?) (no-infinities-violation? . d4f7a@d4e7a@no-infinities-violation?) (make-no-nans-violation . d4f81@d4e8d@make-no-nans-violation) (make-no-infinities-violation . d4f79@d4e78@make-no-infinities-violation) (assertion-error . d4bc1@d312e@assertion-error)))))) (d2c8f@d2ad0@install-library 'd53dd '(mosh interaction) '() '() '() '() '((regexp? . d53d5) (alist->eq-hash-table . d53d2) (format . d53cf) (string-split . d53c4) (call-process . d53be) (set-current-directory! . d53ba) (expand-path . d53b9) (current-directory . d53b8) (%spawn . d53b7) (%waitpid . d53b6) (simple-struct-name . d53b5) (simple-struct-set! . d53b4) (simple-struct-ref . d53b3) (make-simple-struct . d53b2) (simple-struct? . d53b1) (pointer-ref-c-int64 . d53b0) (pointer-ref-c-int32 . d53af) (pointer-ref-c-int16 . d53ae) (pointer-ref-c-int8 . d53ad) (pointer-ref-c-uint64 . d53ac) (pointer-ref-c-uint32 . d53ab) (pointer-ref-c-uint16 . d53aa) (pointer-ref-c-uint8 . d53a9) (pointer-set-c-uint64! . d53a8) (pointer-set-c-uint32! . d53a7) (pointer-set-c-uint16! . d53a6) (pointer-set-c-uint8! . d53a5) (pointer-set-c-int64! . d53a4) (pointer-set-c-int32! . d53a3) (pointer-set-c-int16! . d53a2) (pointer-set-c-int8! . d53a1) (pointer-set-c-pointer! . d53a0) (pointer-set-c-double! . d539f) (pointer-set-c-float! . d539e) (pointer-set-c-long-long! . d539d) (pointer-set-c-long! . d539c) (pointer-set-c-int! . d539b) (pointer-set-c-short! . d539a) (pointer-set-c-char! . d5399) (pointer-ref-c-pointer . d5398) (pointer-ref-c-double . d5397) (pointer-ref-c-float . d5396) (pointer-ref-c-unsigned-long-long . d5395) (pointer-ref-c-signed-long-long . d5394) (pointer-ref-c-unsigned-long . d5393) (pointer-ref-c-signed-long . d5392) (pointer-ref-c-unsigned-int . d5391) (pointer-ref-c-signed-int . d5390) (pointer-ref-c-unsigned-short . d538f) (pointer-ref-c-signed-short . d538e) (pointer-ref-c-unsigned-char . d538d) (pointer-ref-c-signed-char . d538c) (pointer->integer . d538b) (integer->pointer . d538a) (pointer? . d5389) (shared-errno . d5388) (%ffi-supported? . d5387) (%ffi-pointer->string . d5386) (%ffi-call->string-or-zero . d5385) (%ffi-call->double . d5384) (%ffi-call->void* . d5383) (%ffi-call->void . d5382) (%ffi-call->char . d5381) (%ffi-call->int . d5380) (%ffi-lookup . d537f) (%ffi-open . d537e) (%fork . d537d) (%pipe . d537c) (p . d537b) (whereis . d5365) (register . d5364) (vm-join! . d5363) (vm-set-value! . d5362) (vm? . d5361) (main-vm? . d5360) (vm-eval . d535f) (vm-self . d535e) (vm-start! . d535d) (make-vm . d535c) (mutex-try-lock! . d535b) (mutex-unlock! . d535a) (mutex-lock! . d5359) (mutex? . d5358) (make-mutex . d5357) (condition-variable-notify-all! . d5356) (condition-variable-notify! . d5355) (condition-variable-wait! . d5354) (make-condition-variable . d5353) (string-upcase . d533c) (string-titlecase . d533b) (string-normalize-nfkd . d533a) (string-normalize-nfkc . d5339) (string-normalize-nfd . d5338) (string-normalize-nfc . d5337) (string-foldcase . d5336) (string-downcase . d5335) (string-ci>? . d5334) (string-ci>=? . d5333) (string-ci=? . d5332) (string-ci<? . d5331) (string-ci<=? . d5330) (char-whitespace? . d532f) (char-upper-case? . d532e) (char-title-case? . d532d) (char-numeric? . d532c) (char-lower-case? . d532b) (char-general-category . d532a) (char-upcase . d5329) (char-titlecase . d5328) (char-foldcase . d5327) (char-downcase . d5326) (char-ci>? . d5325) (char-ci>=? . d5324) (char-ci=? . d5323) (char-ci<? . d5322) (char-ci<=? . d5321) (char-alphabetic? . d5320) (make-variable-transformer . d2e92) (identifier? . d3135) (generate-temporaries . d3121) (free-identifier=? . d3123) (syntax->datum . d3139) (datum->syntax . d3137) (bound-identifier=? . d3125) (record-type-descriptor? . d531f) (record-predicate . d531e) (record-mutator . d531d) (record-constructor . d531c) (record-accessor . d531b) (make-record-type-descriptor . d531a) (make-record-constructor-descriptor . d5319) (record? . d5318) (record-type-uid . d5317) (record-type-sealed? . d5316) (record-type-parent . d5315) (record-type-opaque? . d5314) (record-type-name . d5313) (record-type-generative? . d5312) (record-type-field-names . d5311) (record-rtd . d5310) (record-field-mutable? . d530f) (delete-file . d530e) (file-exists? . d530d) (vector-sort! . d530c) (vector-sort . d530b) (list-sort . d530a) (symbol-hash . d5309) (string-ci-hash . d5308) (string-hash . d5307) (equal-hash . d5306) (hashtable-equivalence-function . d5305) (make-hashtable . d5304) (hashtable-hash-function . d5303) (make-eqv-hashtable . d5302) (make-eq-hashtable . d5301) (hashtable? . d5300) (hashtable-update! . d52ff) (hashtable-size . d52fe) (hashtable-set! . d52fd) (hashtable-ref . d52fc) (hashtable-mutable? . d52fb) (hashtable-keys . d52fa) (hashtable-entries . d52f9) (hashtable-delete! . d52f8) (hashtable-copy . d52f7) (hashtable-contains? . d52f6) (hashtable-clear! . d52f5) (call-with-output-file . d52f4) (call-with-input-file . d52f3) (write-char . d52f2) (write . d52f1) (with-output-to-file . d52f0) (with-input-from-file . d52ef) (read-char . d52ee) (read . d52ed) (peek-char . d52ec) (open-output-file . d52eb) (open-input-file . d52ea) (newline . d52e9) (display . d52e8) (close-output-port . d52e7) (close-input-port . d52e6) (eof-object? . d52e5) (eof-object . d52e4) (current-error-port . d52e3) (current-output-port . d52e2) (current-input-port . d52e1) (output-port? . d52e0) (input-port? . d52df) (utf-8-codec . d52de) (utf-16-codec . d52dd) (transcoder-error-handling-mode . d52dc) (transcoder-eol-style . d52db) (transcoder-codec . d52da) (transcoded-port . d52d9) (textual-port? . d52d8) (string->bytevector . d52d7) (standard-output-port . d52d6) (standard-input-port . d52d5) (standard-error-port . d52d4) (set-port-position! . d52d3) (put-u8 . d52d2) (put-string . d52d1) (put-datum . d52d0) (put-char . d52cf) (put-bytevector . d52ce) (port? . d52cd) (port-transcoder . d52cc) (port-position . d52cb) (port-has-set-port-position!? . d52ca) (port-has-port-position? . d52c9) (port-eof? . d52c8) (output-port-buffer-mode . d52c7) (open-string-output-port . d52c6) (open-string-input-port . d52c5) (open-file-output-port . d52c4) (open-file-input/output-port . d52c3) (open-file-input-port . d52c2) (open-bytevector-output-port . d52c1) (open-bytevector-input-port . d52c0) (native-transcoder . d52bf) (native-eol-style . d52be) (make-transcoder . d52bd) (latin-1-codec . d52bc) (make-i/o-write-error . d4d8d) (make-i/o-read-error . d4d78) (make-i/o-port-error . d4e2e) (make-i/o-invalid-position-error . d4da4) (make-i/o-filename-error . d4dbf) (make-i/o-file-protection-error . d4dd8) (make-i/o-file-is-read-only-error . d4ded) (make-i/o-file-does-not-exist-error . d4e17) (make-i/o-file-already-exists-error . d4e02) (make-i/o-error . d4d63) (make-i/o-encoding-error . d4e5e) (make-i/o-decoding-error . d4e47) (make-custom-textual-output-port . d52bb) (make-custom-textual-input/output-port . d52ba) (make-custom-textual-input-port . d52b9) (make-custom-binary-output-port . d52b8) (make-custom-binary-input/output-port . d52b7) (make-custom-binary-input-port . d52b6) (make-bytevector . d52b5) (lookahead-u8 . d52b4) (lookahead-char . d52b3) (i/o-write-error? . d4d8f) (i/o-read-error? . d4d7a) (i/o-port-error? . d4e32) (i/o-invalid-position-error? . d4da8) (i/o-filename-error? . d4dc3) (i/o-file-protection-error? . d4dda) (i/o-file-is-read-only-error? . d4def) (i/o-file-does-not-exist-error? . d4e19) (i/o-file-already-exists-error? . d4e04) (i/o-error? . d4d65) (i/o-error-position . d4daa) (i/o-error-port . d4e34) (i/o-error-filename . d4dc5) (i/o-encoding-error? . d4e62) (i/o-encoding-error-char . d4e64) (i/o-decoding-error? . d4e49) (get-u8 . d52b2) (get-string-n! . d52b1) (get-string-n . d52b0) (get-string-all . d52af) (get-line . d52ae) (get-datum . d52ad) (get-char . d52ac) (get-bytevector-some . d52ab) (get-bytevector-n! . d52aa) (get-bytevector-n . d52a9) (get-bytevector-all . d52a8) (flush-output-port . d52a7) (close-port . d52a6) (exit . d529e) (command-line . d4f99) (string-fill! . d529d) (string-set! . d529c) (set-cdr! . d529b) (set-car! . d529a) (remove . d5299) (remv . d5298) (remp . d5297) (remq . d5296) (partition . d5295) (memv . d5294) (memq . d5293) (memp . d5292) (member . d5291) (exists . d5290) (for-all . d528f) (fold-right . d528e) (fold-left . d528d) (find . d528c) (filter . d528b) (cons* . d528a) (assv . d5289) (assq . d5288) (assp . d5287) (assoc . d5286) (call-with-string-output-port . d5285) (call-with-port . d5284) (call-with-bytevector-output-port . d5283) (bytevector->string . d5282) (buffer-mode? . d5281) (binary-port? . d5280) (with-exception-handler . d527f) (raise-continuable . d527e) (raise . d527d) (eval . d3113) (environment . d310b) (make-enumeration . d527c) (enum-set=? . d527b) (enum-set-universe . d527a) (enum-set-union . d5279) (enum-set-subset? . d5278) (enum-set-projection . d5277) (enum-set-member? . d5276) (enum-set-intersection . d5275) (enum-set-indexer . d5274) (enum-set-difference . d5273) (enum-set-constructor . d5272) (enum-set-complement . d5271) (enum-set->list . d5270) (who-condition? . d4cd9) (warning? . d4c51) (violation? . d4c90) (undefined-violation? . d4d50) (syntax-violation? . d4d37) (syntax-violation-subform . d4d3b) (syntax-violation-form . d4d39) (syntax-violation . d3133) (simple-conditions . d526f) (serious-condition? . d4c66) (non-continuable-violation? . d4cf0) (message-condition? . d4c3a) (make-who-condition . d4cd5) (make-warning . d4c4f) (make-violation . d4c8e) (make-undefined-violation . d4d4e) (make-syntax-violation . d4d31) (make-serious-condition . d4c64) (make-non-continuable-violation . d4cee) (make-message-condition . d4c36) (make-lexical-violation . d4d18) (make-irritants-condition . d4cba) (make-implementation-restriction-violation . d4d03) (make-error . d4c79) (make-assertion-violation . d4ca3) (lexical-violation? . d4d1a) (irritants-condition? . d4cbe) (implementation-restriction-violation? . d4d05) (error? . d4c7b) (condition-who . d4cdb) (condition-predicate . d526e) (condition-message . d4c3c) (condition-irritants . d4cc0) (condition-accessor . d526d) (condition . d526c) (assertion-violation? . d4ca5) (condition? . d526b) (utf32->string . d526a) (utf16->string . d5269) (utf8->string . d5268) (uint-list->bytevector . d5267) (u8-list->bytevector . d5266) (string->utf8 . d5265) (string->utf32 . d5264) (string->utf16 . d5263) (sint-list->bytevector . d5262) (native-endianness . d5261) (bytevector? . d5260) (bytevector=? . d525f) (bytevector-uint-set! . d525e) (bytevector-uint-ref . d525d) (bytevector-u8-set! . d525c) (bytevector-u8-ref . d525b) (bytevector-u64-set! . d525a) (bytevector-u64-ref . d5259) (bytevector-u64-native-set! . d5258) (bytevector-u64-native-ref . d5257) (bytevector-u32-set! . d5256) (bytevector-u32-ref . d5255) (bytevector-u32-native-set! . d5254) (bytevector-u32-native-ref . d5253) (bytevector-u16-set! . d5252) (bytevector-u16-ref . d5251) (bytevector-u16-native-set! . d5250) (bytevector-u16-native-ref . d524f) (bytevector-sint-set! . d524e) (bytevector-sint-ref . d524d) (bytevector-s8-set! . d524c) (bytevector-s8-ref . d524b) (bytevector-s64-set! . d524a) (bytevector-s64-ref . d5249) (bytevector-s64-native-set! . d5248) (bytevector-s64-native-ref . d5247) (bytevector-s32-set! . d5246) (bytevector-s32-ref . d5245) (bytevector-s32-native-set! . d5244) (bytevector-s32-native-ref . d5243) (bytevector-s16-set! . d5242) (bytevector-s16-ref . d5241) (bytevector-s16-native-set! . d5240) (bytevector-s16-native-ref . d523f) (bytevector-length . d523e) (bytevector-ieee-single-ref . d523d) (bytevector-ieee-single-set! . d523c) (bytevector-ieee-single-native-set! . d523b) (bytevector-ieee-single-native-ref . d523a) (bytevector-ieee-double-set! . d5239) (bytevector-ieee-double-ref . d5238) (bytevector-ieee-double-native-set! . d5237) (bytevector-ieee-double-native-ref . d5236) (bytevector-fill! . d5235) (bytevector-copy! . d5234) (bytevector-copy . d5233) (bytevector->uint-list . d5232) (bytevector->u8-list . d5231) (bytevector->sint-list . d5230) (no-nans-violation? . d4e8e) (no-infinities-violation? . d4e79) (make-no-nans-violation . d4e8c) (make-no-infinities-violation . d4e77) (real->flonum . d522f) (flzero? . d522e) (fltruncate . d522d) (fltan . d522c) (flsqrt . d522b) (flsin . d522a) (flround . d5229) (flpositive? . d5228) (flonum? . d5227) (flodd? . d5226) (flnumerator . d5225) (flnegative? . d5224) (flnan? . d5223) (flmod0 . d5222) (flmod . d5221) (flmin . d5220) (flmax . d521f) (fllog . d521e) (flinteger? . d521d) (flinfinite? . d521c) (flfloor . d521b) (flfinite? . d521a) (flexpt . d5219) (flexp . d5218) (fleven? . d5217) (fldiv0-and-mod0 . d5216) (fldiv0 . d5215) (fldiv-and-mod . d5214) (fldiv . d5213) (fldenominator . d5212) (flcos . d5211) (flceiling . d5210) (flatan . d520f) (flasin . d520e) (flacos . d520d) (flabs . d520c) (fl>? . d520b) (fl>=? . d520a) (fl=? . d5209) (fl<? . d5208) (fl<=? . d5207) (fl/ . d5206) (fl- . d5205) (fl+ . d5204) (fl* . d5203) (fixnum->flonum . d5202) (fxzero? . d5201) (fxxor . d5200) (fxrotate-bit-field . d51ff) (fxreverse-bit-field . d51fe) (fxpositive? . d51fd) (fxodd? . d51fc) (fxnot . d51fb) (fxnegative? . d51fa) (fxmod0 . d51f9) (fxmod . d51f8) (fxmin . d51f7) (fxmax . d51f6) (fxlength . d51f5) (fxior . d51f4) (fxif . d51f3) (fxfirst-bit-set . d51f2) (fxeven? . d51f1) (fxdiv0-and-mod0 . d51f0) (fxdiv0 . d51ef) (fxdiv-and-mod . d51ee) (fxdiv . d51ed) (fxcopy-bit-field . d51ec) (fxcopy-bit . d51eb) (fxbit-set? . d51ea) (fxbit-field . d51e9) (fxbit-count . d51e8) (fxarithmetic-shift-right . d51e7) (fxarithmetic-shift-left . d51e6) (fxarithmetic-shift . d51e5) (fxand . d51e4) (fx>? . d51e3) (fx>=? . d51e2) (fx=? . d51e1) (fx<? . d51e0) (fx<=? . d51df) (fx-/carry . d51de) (fx- . d51dd) (fx+/carry . d51dc) (fx+ . d51db) (fx*/carry . d51da) (fx* . d51d9) (greatest-fixnum . d51d8) (least-fixnum . d51d7) (fixnum-width . d51d6) (fixnum? . d51d5) (bitwise-rotate-bit-field . d51d4) (bitwise-reverse-bit-field . d51d3) (bitwise-length . d51d2) (bitwise-if . d51d1) (bitwise-first-bit-set . d51d0) (bitwise-copy-bit-field . d51cf) (bitwise-copy-bit . d51ce) (bitwise-bit-set? . d51cd) (bitwise-bit-field . d51cc) (bitwise-bit-count . d51cb) (bitwise-xor . d51ca) (bitwise-ior . d51c9) (bitwise-and . d51c8) (bitwise-not . d51c7) (bitwise-arithmetic-shift-right . d51c6) (bitwise-arithmetic-shift-left . d51c5) (bitwise-arithmetic-shift . d51c4) (zero? . d51c3) (vector? . d51c2) (vector-set! . d51c1) (vector-ref . d51c0) (vector-map . d51bf) (vector-length . d51be) (vector-for-each . d51bd) (vector-fill! . d51bc) (vector->list . d51bb) (vector . d51ba) (values . d51b9) (truncate . d51b8) (tan . d51b7) (symbol? . d51b6) (symbol=? . d51b5) (symbol->string . d51b4) (substring . d51b3) (string? . d51b2) (string>? . d51b1) (string>=? . d51b0) (string=? . d51af) (string<? . d51ae) (string<=? . d51ad) (string-ref . d51ac) (string-length . d51ab) (string-for-each . d51aa) (string-copy . d51a9) (string-append . d51a8) (string->symbol . d51a7) (string->number . d51a6) (string->list . d51a5) (string . d51a4) (sqrt . d51a3) (sin . d51a2) (round . d51a1) (reverse . d51a0) (real? . d519f) (real-valued? . d519e) (real-part . d519d) (rationalize . d519c) (rational? . d519b) (rational-valued? . d519a) (procedure? . d5199) (positive? . d5198) (pair? . d5197) (odd? . d5196) (numerator . d5195) (number? . d5194) (number->string . d5193) (null? . d5192) (not . d5191) (negative? . d5190) (nan? . d518f) (min . d518e) (max . d518d) (map . d518c) (make-vector . d518b) (make-string . d518a) (make-rectangular . d5189) (make-polar . d5188) (magnitude . d5187) (log . d5186) (list? . d5185) (list-tail . d5184) (list-ref . d5183) (list->vector . d5182) (list->string . d5181) (list . d5180) (length . d517f) (lcm . d517e) (integer? . d517d) (integer-valued? . d517c) (integer->char . d517b) (infinite? . d517a) (inexact? . d5179) (inexact . d5178) (imag-part . d5177) (gcd . d5176) (for-each . d5175) (floor . d5174) (finite? . d5173) (expt . d5172) (exp . d5171) (exact? . d5170) (exact-integer-sqrt . d516f) (exact . d516e) (even? . d516d) (error . d516c) (eqv? . d516b) (equal? . d516a) (eq? . d5169) (dynamic-wind . d5168) (div0-and-mod0 . d5167) (mod0 . d5166) (div0 . d5165) (div-and-mod . d5164) (mod . d5163) (div . d5162) (denominator . d5161) (cos . d5160) (cons . d515f) (complex? . d515e) (char? . d515d) (char>? . d515c) (char>=? . d515b) (char=? . d515a) (char<? . d5159) (char<=? . d5158) (char->integer . d5157) (ceiling . d5156) (call-with-values . d5155) (call/cc . d5154) (call-with-current-continuation . d5153) (cddddr . d5152) (cdddar . d5151) (cddadr . d5150) (cddaar . d514f) (cdaddr . d514e) (cdadar . d514d) (cdaadr . d514c) (cdaaar . d514b) (cadddr . d514a) (caddar . d5149) (cadadr . d5148) (cadaar . d5147) (caaddr . d5146) (caadar . d5145) (caaadr . d5144) (caaaar . d5143) (cdddr . d5142) (cddar . d5141) (cdadr . d5140) (cdaar . d513f) (caddr . d513e) (cadar . d513d) (caadr . d513c) (caaar . d513b) (cddr . d513a) (cdar . d5139) (cadr . d5138) (caar . d5137) (cdr . d5136) (car . d5135) (boolean? . d5134) (boolean=? . d5133) (atan . d5132) (assertion-violation . d5131) (asin . d5130) (apply . d512f) (append . d512e) (angle . d512d) (acos . d512c) (abs . d512b) (/ . d512a) (* . d5129) (- . d5128) (+ . d5127) (>= . d5126) (> . d5125) (= . d5124) (<= . d5123) (< . d5122) (library . d5121) (&no-nans . d5120) (&no-infinities . d511f) (&i/o-encoding . d511e) (&i/o-decoding . d511d) (&i/o-port . d511c) (&i/o-file-does-not-exist . d511b) (&i/o-file-already-exists . d511a) (&i/o-file-is-read-only . d5119) (&i/o-file-protection . d5118) (&i/o-filename . d5117) (&i/o-invalid-position . d5116) (&i/o-write . d5115) (&i/o-read . d5114) (&i/o . d5113) (&undefined . d5112) (&syntax . d5111) (&lexical . d5110) (&implementation-restriction . d510f) (&non-continuable . d510e) (&who . d510d) (&irritants . d510c) (&assertion . d510b) (&violation . d510a) (&error . d5109) (&serious . d5108) (&warning . d5107) (&message . d5106) (&condition . d5105) (define-condition-type . d5104) (define-enumeration . d5103) (define-record-type . d5102) (parent-rtd . d5101) (nongenerative . d5100) (opaque . d50ff) (sealed . d50fe) (protocol . d50fd) (parent . d50fc) (immutable . d50fb) (mutable . d50fa) (fields . d50f9) (error-handling-mode . d50f8) (file-options . d50f7) (buffer-mode . d50f6) (eol-style . d50f5) (guard . d50f4) (unsyntax-splicing . d50f1) (unsyntax . d50f0) (unquote-splicing . d50ef) (unquote . d50ee) (_ . d50ed) (else . d50ec) (=> . d50eb) (... . d50ea) (assert . d50e9) (endianness . d50e8) (time . d50e6) (do . d50e5) (cond . d50e4) (let* . d50e3) (let . d50e2) (let*-values . d50e1) (let-values . d50e0) (identifier-syntax . d50df) (with-syntax . d50de) (quasisyntax . d50dd) (quasiquote . d50dc) (syntax-rules . d50db) (include . d50da) (record-constructor-descriptor . d50d8) (record-type-descriptor . d50d7) (case . d50d6) (unless . d50d4) (when . d50d3) (or . d50d2) (and . d50d1) (if . d50d0) (letrec* . d50cf) (letrec . d50ce) (case-lambda . d50cc) (lambda . d50cb) (syntax . d50ca) (syntax-case . d50c9) (quote . d50c8) (letrec-syntax . d50c6) (let-syntax . d50c5) (set! . d50c4) (import . d50c3) (begin . d50c2) (define-syntax . d50c0) (define . d50bf)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53de '(psyntax null-environment-5) '() '() '() '() '((make-promise . d529f) (unquote-splicing . d50ef) (unquote . d50ee) (_ . d50ed) (else . d50ec) (=> . d50eb) (... . d50ea) (delay . d50e7) (do . d50e5) (cond . d50e4) (let* . d50e3) (let . d50e2) (quasiquote . d50dc) (syntax-rules . d50db) (case . d50d6) (or . d50d2) (and . d50d1) (if . d50d0) (letrec . d50ce) (lambda . d50cb) (quote . d50c8) (letrec-syntax . d50c6) (let-syntax . d50c5) (set! . d50c4) (begin . d50c2) (define-syntax . d50c0) (define . d50bf)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53df '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . d5334) (string-ci>=? . d5333) (string-ci=? . d5332) (string-ci<? . d5331) (string-ci<=? . d5330) (char-whitespace? . d532f) (char-upper-case? . d532e) (char-numeric? . d532c) (char-lower-case? . d532b) (char-upcase . d5329) (char-downcase . d5326) (char-ci>? . d5325) (char-ci>=? . d5324) (char-ci=? . d5323) (char-ci<? . d5322) (char-ci<=? . d5321) (char-alphabetic? . d5320) (call-with-output-file . d52f4) (call-with-input-file . d52f3) (write-char . d52f2) (write . d52f1) (with-output-to-file . d52f0) (with-input-from-file . d52ef) (read-char . d52ee) (read . d52ed) (peek-char . d52ec) (open-output-file . d52eb) (open-input-file . d52ea) (newline . d52e9) (display . d52e8) (close-output-port . d52e7) (close-input-port . d52e6) (eof-object . d52e4) (current-output-port . d52e2) (current-input-port . d52e1) (output-port? . d52e0) (input-port? . d52df) (scheme-report-environment . d310f) (quotient . d52a5) (null-environment . d310d) (remainder . d52a4) (modulo . d52a3) (inexact->exact . d52a2) (force . d52a1) (exact->inexact . d52a0) (make-promise . d529f) (string-fill! . d529d) (string-set! . d529c) (set-cdr! . d529b) (set-car! . d529a) (memv . d5294) (memq . d5293) (member . d5291) (assv . d5289) (assq . d5288) (assoc . d5286) (eval . d3113) (zero? . d51c3) (vector? . d51c2) (vector-set! . d51c1) (vector-ref . d51c0) (vector-length . d51be) (vector-fill! . d51bc) (vector->list . d51bb) (vector . d51ba) (values . d51b9) (truncate . d51b8) (tan . d51b7) (symbol? . d51b6) (symbol->string . d51b4) (substring . d51b3) (string? . d51b2) (string>? . d51b1) (string>=? . d51b0) (string=? . d51af) (string<? . d51ae) (string<=? . d51ad) (string-ref . d51ac) (string-length . d51ab) (string-copy . d51a9) (string-append . d51a8) (string->symbol . d51a7) (string->number . d51a6) (string->list . d51a5) (string . d51a4) (sqrt . d51a3) (sin . d51a2) (round . d51a1) (reverse . d51a0) (real? . d519f) (real-part . d519d) (rationalize . d519c) (rational? . d519b) (procedure? . d5199) (positive? . d5198) (pair? . d5197) (odd? . d5196) (numerator . d5195) (number? . d5194) (number->string . d5193) (not . d5191) (negative? . d5190) (min . d518e) (max . d518d) (map . d518c) (make-vector . d518b) (make-string . d518a) (make-rectangular . d5189) (make-polar . d5188) (magnitude . d5187) (log . d5186) (list? . d5185) (list-tail . d5184) (list-ref . d5183) (list->vector . d5182) (list->string . d5181) (list . d5180) (length . d517f) (lcm . d517e) (integer? . d517d) (integer->char . d517b) (inexact? . d5179) (imag-part . d5177) (gcd . d5176) (for-each . d5175) (floor . d5174) (expt . d5172) (exp . d5171) (exact? . d5170) (even? . d516d) (eqv? . d516b) (equal? . d516a) (eq? . d5169) (dynamic-wind . d5168) (denominator . d5161) (cos . d5160) (cons . d515f) (complex? . d515e) (char? . d515d) (char>? . d515c) (char>=? . d515b) (char=? . d515a) (char<? . d5159) (char<=? . d5158) (char->integer . d5157) (ceiling . d5156) (call-with-values . d5155) (call-with-current-continuation . d5153) (cddddr . d5152) (cdddar . d5151) (cddadr . d5150) (cddaar . d514f) (cdaddr . d514e) (cdadar . d514d) (cdaadr . d514c) (cdaaar . d514b) (cadddr . d514a) (caddar . d5149) (cadadr . d5148) (cadaar . d5147) (caaddr . d5146) (caadar . d5145) (caaadr . d5144) (caaaar . d5143) (cdddr . d5142) (cddar . d5141) (cdadr . d5140) (cdaar . d513f) (caddr . d513e) (cadar . d513d) (caadr . d513c) (caaar . d513b) (cddr . d513a) (cdar . d5139) (cadr . d5138) (caar . d5137) (cdr . d5136) (car . d5135) (boolean? . d5134) (atan . d5132) (asin . d5130) (apply . d512f) (append . d512e) (angle . d512d) (acos . d512c) (abs . d512b) (/ . d512a) (* . d5129) (- . d5128) (+ . d5127) (>= . d5126) (> . d5125) (= . d5124) (<= . d5123) (< . d5122) (unquote-splicing . d50ef) (unquote . d50ee) (else . d50ec) (=> . d50eb) (... . d50ea) (delay . d50e7) (do . d50e5) (cond . d50e4) (let* . d50e3) (let . d50e2) (quasiquote . d50dc) (syntax-rules . d50db) (case . d50d6) (or . d50d2) (and . d50d1) (if . d50d0) (letrec . d50ce) (lambda . d50cb) (quote . d50c8) (letrec-syntax . d50c6) (let-syntax . d50c5) (set! . d50c4) (begin . d50c2) (define-syntax . d50c0) (define . d50bf)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e0 '(psyntax modules) '() '() '() '() '((module . d50c1)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e1 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e2 '(rnrs) '(6) '() '() '() '((regexp? . d53d5) (string-upcase . d533c) (string-titlecase . d533b) (string-normalize-nfkd . d533a) (string-normalize-nfkc . d5339) (string-normalize-nfd . d5338) (string-normalize-nfc . d5337) (string-foldcase . d5336) (string-downcase . d5335) (string-ci>? . d5334) (string-ci>=? . d5333) (string-ci=? . d5332) (string-ci<? . d5331) (string-ci<=? . d5330) (char-whitespace? . d532f) (char-upper-case? . d532e) (char-title-case? . d532d) (char-numeric? . d532c) (char-lower-case? . d532b) (char-general-category . d532a) (char-upcase . d5329) (char-titlecase . d5328) (char-foldcase . d5327) (char-downcase . d5326) (char-ci>? . d5325) (char-ci>=? . d5324) (char-ci=? . d5323) (char-ci<? . d5322) (char-ci<=? . d5321) (char-alphabetic? . d5320) (make-variable-transformer . d2e92) (identifier? . d3135) (generate-temporaries . d3121) (free-identifier=? . d3123) (syntax->datum . d3139) (datum->syntax . d3137) (bound-identifier=? . d3125) (record-type-descriptor? . d531f) (record-predicate . d531e) (record-mutator . d531d) (record-constructor . d531c) (record-accessor . d531b) (make-record-type-descriptor . d531a) (make-record-constructor-descriptor . d5319) (record? . d5318) (record-type-uid . d5317) (record-type-sealed? . d5316) (record-type-parent . d5315) (record-type-opaque? . d5314) (record-type-name . d5313) (record-type-generative? . d5312) (record-type-field-names . d5311) (record-rtd . d5310) (record-field-mutable? . d530f) (delete-file . d530e) (file-exists? . d530d) (vector-sort! . d530c) (vector-sort . d530b) (list-sort . d530a) (symbol-hash . d5309) (string-ci-hash . d5308) (string-hash . d5307) (equal-hash . d5306) (hashtable-equivalence-function . d5305) (make-hashtable . d5304) (hashtable-hash-function . d5303) (make-eqv-hashtable . d5302) (make-eq-hashtable . d5301) (hashtable? . d5300) (hashtable-update! . d52ff) (hashtable-size . d52fe) (hashtable-set! . d52fd) (hashtable-ref . d52fc) (hashtable-mutable? . d52fb) (hashtable-keys . d52fa) (hashtable-entries . d52f9) (hashtable-delete! . d52f8) (hashtable-copy . d52f7) (hashtable-contains? . d52f6) (hashtable-clear! . d52f5) (call-with-output-file . d52f4) (call-with-input-file . d52f3) (write-char . d52f2) (write . d52f1) (with-output-to-file . d52f0) (with-input-from-file . d52ef) (read-char . d52ee) (read . d52ed) (peek-char . d52ec) (open-output-file . d52eb) (open-input-file . d52ea) (newline . d52e9) (display . d52e8) (close-output-port . d52e7) (close-input-port . d52e6) (eof-object? . d52e5) (eof-object . d52e4) (current-error-port . d52e3) (current-output-port . d52e2) (current-input-port . d52e1) (output-port? . d52e0) (input-port? . d52df) (utf-8-codec . d52de) (utf-16-codec . d52dd) (transcoder-error-handling-mode . d52dc) (transcoder-eol-style . d52db) (transcoder-codec . d52da) (transcoded-port . d52d9) (textual-port? . d52d8) (string->bytevector . d52d7) (standard-output-port . d52d6) (standard-input-port . d52d5) (standard-error-port . d52d4) (set-port-position! . d52d3) (put-u8 . d52d2) (put-string . d52d1) (put-datum . d52d0) (put-char . d52cf) (put-bytevector . d52ce) (port? . d52cd) (port-transcoder . d52cc) (port-position . d52cb) (port-has-set-port-position!? . d52ca) (port-has-port-position? . d52c9) (port-eof? . d52c8) (output-port-buffer-mode . d52c7) (open-string-output-port . d52c6) (open-string-input-port . d52c5) (open-file-output-port . d52c4) (open-file-input/output-port . d52c3) (open-file-input-port . d52c2) (open-bytevector-output-port . d52c1) (open-bytevector-input-port . d52c0) (native-transcoder . d52bf) (native-eol-style . d52be) (make-transcoder . d52bd) (latin-1-codec . d52bc) (make-i/o-write-error . d4d8d) (make-i/o-read-error . d4d78) (make-i/o-port-error . d4e2e) (make-i/o-invalid-position-error . d4da4) (make-i/o-filename-error . d4dbf) (make-i/o-file-protection-error . d4dd8) (make-i/o-file-is-read-only-error . d4ded) (make-i/o-file-does-not-exist-error . d4e17) (make-i/o-file-already-exists-error . d4e02) (make-i/o-error . d4d63) (make-i/o-encoding-error . d4e5e) (make-i/o-decoding-error . d4e47) (make-custom-textual-output-port . d52bb) (make-custom-textual-input/output-port . d52ba) (make-custom-textual-input-port . d52b9) (make-custom-binary-output-port . d52b8) (make-custom-binary-input/output-port . d52b7) (make-custom-binary-input-port . d52b6) (make-bytevector . d52b5) (lookahead-u8 . d52b4) (lookahead-char . d52b3) (i/o-write-error? . d4d8f) (i/o-read-error? . d4d7a) (i/o-port-error? . d4e32) (i/o-invalid-position-error? . d4da8) (i/o-filename-error? . d4dc3) (i/o-file-protection-error? . d4dda) (i/o-file-is-read-only-error? . d4def) (i/o-file-does-not-exist-error? . d4e19) (i/o-file-already-exists-error? . d4e04) (i/o-error? . d4d65) (i/o-error-position . d4daa) (i/o-error-port . d4e34) (i/o-error-filename . d4dc5) (i/o-encoding-error? . d4e62) (i/o-encoding-error-char . d4e64) (i/o-decoding-error? . d4e49) (get-u8 . d52b2) (get-string-n! . d52b1) (get-string-n . d52b0) (get-string-all . d52af) (get-line . d52ae) (get-datum . d52ad) (get-char . d52ac) (get-bytevector-some . d52ab) (get-bytevector-n! . d52aa) (get-bytevector-n . d52a9) (get-bytevector-all . d52a8) (flush-output-port . d52a7) (close-port . d52a6) (exit . d529e) (command-line . d4f99) (remove . d5299) (remv . d5298) (remp . d5297) (remq . d5296) (partition . d5295) (memv . d5294) (memq . d5293) (memp . d5292) (member . d5291) (exists . d5290) (for-all . d528f) (fold-right . d528e) (fold-left . d528d) (find . d528c) (filter . d528b) (cons* . d528a) (assv . d5289) (assq . d5288) (assp . d5287) (assoc . d5286) (call-with-string-output-port . d5285) (call-with-port . d5284) (call-with-bytevector-output-port . d5283) (bytevector->string . d5282) (buffer-mode? . d5281) (binary-port? . d5280) (with-exception-handler . d527f) (raise-continuable . d527e) (raise . d527d) (make-enumeration . d527c) (enum-set=? . d527b) (enum-set-universe . d527a) (enum-set-union . d5279) (enum-set-subset? . d5278) (enum-set-projection . d5277) (enum-set-member? . d5276) (enum-set-intersection . d5275) (enum-set-indexer . d5274) (enum-set-difference . d5273) (enum-set-constructor . d5272) (enum-set-complement . d5271) (enum-set->list . d5270) (who-condition? . d4cd9) (warning? . d4c51) (violation? . d4c90) (undefined-violation? . d4d50) (syntax-violation? . d4d37) (syntax-violation-subform . d4d3b) (syntax-violation-form . d4d39) (syntax-violation . d3133) (simple-conditions . d526f) (serious-condition? . d4c66) (non-continuable-violation? . d4cf0) (message-condition? . d4c3a) (make-who-condition . d4cd5) (make-warning . d4c4f) (make-violation . d4c8e) (make-undefined-violation . d4d4e) (make-syntax-violation . d4d31) (make-serious-condition . d4c64) (make-non-continuable-violation . d4cee) (make-message-condition . d4c36) (make-lexical-violation . d4d18) (make-irritants-condition . d4cba) (make-implementation-restriction-violation . d4d03) (make-error . d4c79) (make-assertion-violation . d4ca3) (lexical-violation? . d4d1a) (irritants-condition? . d4cbe) (implementation-restriction-violation? . d4d05) (error? . d4c7b) (condition-who . d4cdb) (condition-predicate . d526e) (condition-message . d4c3c) (condition-irritants . d4cc0) (condition-accessor . d526d) (condition . d526c) (assertion-violation? . d4ca5) (condition? . d526b) (utf32->string . d526a) (utf16->string . d5269) (utf8->string . d5268) (uint-list->bytevector . d5267) (u8-list->bytevector . d5266) (string->utf8 . d5265) (string->utf32 . d5264) (string->utf16 . d5263) (sint-list->bytevector . d5262) (native-endianness . d5261) (bytevector? . d5260) (bytevector=? . d525f) (bytevector-uint-set! . d525e) (bytevector-uint-ref . d525d) (bytevector-u8-set! . d525c) (bytevector-u8-ref . d525b) (bytevector-u64-set! . d525a) (bytevector-u64-ref . d5259) (bytevector-u64-native-set! . d5258) (bytevector-u64-native-ref . d5257) (bytevector-u32-set! . d5256) (bytevector-u32-ref . d5255) (bytevector-u32-native-set! . d5254) (bytevector-u32-native-ref . d5253) (bytevector-u16-set! . d5252) (bytevector-u16-ref . d5251) (bytevector-u16-native-set! . d5250) (bytevector-u16-native-ref . d524f) (bytevector-sint-set! . d524e) (bytevector-sint-ref . d524d) (bytevector-s8-set! . d524c) (bytevector-s8-ref . d524b) (bytevector-s64-set! . d524a) (bytevector-s64-ref . d5249) (bytevector-s64-native-set! . d5248) (bytevector-s64-native-ref . d5247) (bytevector-s32-set! . d5246) (bytevector-s32-ref . d5245) (bytevector-s32-native-set! . d5244) (bytevector-s32-native-ref . d5243) (bytevector-s16-set! . d5242) (bytevector-s16-ref . d5241) (bytevector-s16-native-set! . d5240) (bytevector-s16-native-ref . d523f) (bytevector-length . d523e) (bytevector-ieee-single-ref . d523d) (bytevector-ieee-single-set! . d523c) (bytevector-ieee-single-native-set! . d523b) (bytevector-ieee-single-native-ref . d523a) (bytevector-ieee-double-set! . d5239) (bytevector-ieee-double-ref . d5238) (bytevector-ieee-double-native-set! . d5237) (bytevector-ieee-double-native-ref . d5236) (bytevector-fill! . d5235) (bytevector-copy! . d5234) (bytevector-copy . d5233) (bytevector->uint-list . d5232) (bytevector->u8-list . d5231) (bytevector->sint-list . d5230) (no-nans-violation? . d4e8e) (no-infinities-violation? . d4e79) (make-no-nans-violation . d4e8c) (make-no-infinities-violation . d4e77) (real->flonum . d522f) (flzero? . d522e) (fltruncate . d522d) (fltan . d522c) (flsqrt . d522b) (flsin . d522a) (flround . d5229) (flpositive? . d5228) (flonum? . d5227) (flodd? . d5226) (flnumerator . d5225) (flnegative? . d5224) (flnan? . d5223) (flmod0 . d5222) (flmod . d5221) (flmin . d5220) (flmax . d521f) (fllog . d521e) (flinteger? . d521d) (flinfinite? . d521c) (flfloor . d521b) (flfinite? . d521a) (flexpt . d5219) (flexp . d5218) (fleven? . d5217) (fldiv0-and-mod0 . d5216) (fldiv0 . d5215) (fldiv-and-mod . d5214) (fldiv . d5213) (fldenominator . d5212) (flcos . d5211) (flceiling . d5210) (flatan . d520f) (flasin . d520e) (flacos . d520d) (flabs . d520c) (fl>? . d520b) (fl>=? . d520a) (fl=? . d5209) (fl<? . d5208) (fl<=? . d5207) (fl/ . d5206) (fl- . d5205) (fl+ . d5204) (fl* . d5203) (fixnum->flonum . d5202) (fxzero? . d5201) (fxxor . d5200) (fxrotate-bit-field . d51ff) (fxreverse-bit-field . d51fe) (fxpositive? . d51fd) (fxodd? . d51fc) (fxnot . d51fb) (fxnegative? . d51fa) (fxmod0 . d51f9) (fxmod . d51f8) (fxmin . d51f7) (fxmax . d51f6) (fxlength . d51f5) (fxior . d51f4) (fxif . d51f3) (fxfirst-bit-set . d51f2) (fxeven? . d51f1) (fxdiv0-and-mod0 . d51f0) (fxdiv0 . d51ef) (fxdiv-and-mod . d51ee) (fxdiv . d51ed) (fxcopy-bit-field . d51ec) (fxcopy-bit . d51eb) (fxbit-set? . d51ea) (fxbit-field . d51e9) (fxbit-count . d51e8) (fxarithmetic-shift-right . d51e7) (fxarithmetic-shift-left . d51e6) (fxarithmetic-shift . d51e5) (fxand . d51e4) (fx>? . d51e3) (fx>=? . d51e2) (fx=? . d51e1) (fx<? . d51e0) (fx<=? . d51df) (fx-/carry . d51de) (fx- . d51dd) (fx+/carry . d51dc) (fx+ . d51db) (fx*/carry . d51da) (fx* . d51d9) (greatest-fixnum . d51d8) (least-fixnum . d51d7) (fixnum-width . d51d6) (fixnum? . d51d5) (bitwise-rotate-bit-field . d51d4) (bitwise-reverse-bit-field . d51d3) (bitwise-length . d51d2) (bitwise-if . d51d1) (bitwise-first-bit-set . d51d0) (bitwise-copy-bit-field . d51cf) (bitwise-copy-bit . d51ce) (bitwise-bit-set? . d51cd) (bitwise-bit-field . d51cc) (bitwise-bit-count . d51cb) (bitwise-xor . d51ca) (bitwise-ior . d51c9) (bitwise-and . d51c8) (bitwise-not . d51c7) (bitwise-arithmetic-shift-right . d51c6) (bitwise-arithmetic-shift-left . d51c5) (bitwise-arithmetic-shift . d51c4) (zero? . d51c3) (vector? . d51c2) (vector-set! . d51c1) (vector-ref . d51c0) (vector-map . d51bf) (vector-length . d51be) (vector-for-each . d51bd) (vector-fill! . d51bc) (vector->list . d51bb) (vector . d51ba) (values . d51b9) (truncate . d51b8) (tan . d51b7) (symbol? . d51b6) (symbol=? . d51b5) (symbol->string . d51b4) (substring . d51b3) (string? . d51b2) (string>? . d51b1) (string>=? . d51b0) (string=? . d51af) (string<? . d51ae) (string<=? . d51ad) (string-ref . d51ac) (string-length . d51ab) (string-for-each . d51aa) (string-copy . d51a9) (string-append . d51a8) (string->symbol . d51a7) (string->number . d51a6) (string->list . d51a5) (string . d51a4) (sqrt . d51a3) (sin . d51a2) (round . d51a1) (reverse . d51a0) (real? . d519f) (real-valued? . d519e) (real-part . d519d) (rationalize . d519c) (rational? . d519b) (rational-valued? . d519a) (procedure? . d5199) (positive? . d5198) (pair? . d5197) (odd? . d5196) (numerator . d5195) (number? . d5194) (number->string . d5193) (null? . d5192) (not . d5191) (negative? . d5190) (nan? . d518f) (min . d518e) (max . d518d) (map . d518c) (make-vector . d518b) (make-string . d518a) (make-rectangular . d5189) (make-polar . d5188) (magnitude . d5187) (log . d5186) (list? . d5185) (list-tail . d5184) (list-ref . d5183) (list->vector . d5182) (list->string . d5181) (list . d5180) (length . d517f) (lcm . d517e) (integer? . d517d) (integer-valued? . d517c) (integer->char . d517b) (infinite? . d517a) (inexact? . d5179) (inexact . d5178) (imag-part . d5177) (gcd . d5176) (for-each . d5175) (floor . d5174) (finite? . d5173) (expt . d5172) (exp . d5171) (exact? . d5170) (exact-integer-sqrt . d516f) (exact . d516e) (even? . d516d) (error . d516c) (eqv? . d516b) (equal? . d516a) (eq? . d5169) (dynamic-wind . d5168) (div0-and-mod0 . d5167) (mod0 . d5166) (div0 . d5165) (div-and-mod . d5164) (mod . d5163) (div . d5162) (denominator . d5161) (cos . d5160) (cons . d515f) (complex? . d515e) (char? . d515d) (char>? . d515c) (char>=? . d515b) (char=? . d515a) (char<? . d5159) (char<=? . d5158) (char->integer . d5157) (ceiling . d5156) (call-with-values . d5155) (call/cc . d5154) (call-with-current-continuation . d5153) (cddddr . d5152) (cdddar . d5151) (cddadr . d5150) (cddaar . d514f) (cdaddr . d514e) (cdadar . d514d) (cdaadr . d514c) (cdaaar . d514b) (cadddr . d514a) (caddar . d5149) (cadadr . d5148) (cadaar . d5147) (caaddr . d5146) (caadar . d5145) (caaadr . d5144) (caaaar . d5143) (cdddr . d5142) (cddar . d5141) (cdadr . d5140) (cdaar . d513f) (caddr . d513e) (cadar . d513d) (caadr . d513c) (caaar . d513b) (cddr . d513a) (cdar . d5139) (cadr . d5138) (caar . d5137) (cdr . d5136) (car . d5135) (boolean? . d5134) (boolean=? . d5133) (atan . d5132) (assertion-violation . d5131) (asin . d5130) (apply . d512f) (append . d512e) (angle . d512d) (acos . d512c) (abs . d512b) (/ . d512a) (* . d5129) (- . d5128) (+ . d5127) (>= . d5126) (> . d5125) (= . d5124) (<= . d5123) (< . d5122) (&no-nans . d5120) (&no-infinities . d511f) (&i/o-encoding . d511e) (&i/o-decoding . d511d) (&i/o-port . d511c) (&i/o-file-does-not-exist . d511b) (&i/o-file-already-exists . d511a) (&i/o-file-is-read-only . d5119) (&i/o-file-protection . d5118) (&i/o-filename . d5117) (&i/o-invalid-position . d5116) (&i/o-write . d5115) (&i/o-read . d5114) (&i/o . d5113) (&undefined . d5112) (&syntax . d5111) (&lexical . d5110) (&implementation-restriction . d510f) (&non-continuable . d510e) (&who . d510d) (&irritants . d510c) (&assertion . d510b) (&violation . d510a) (&error . d5109) (&serious . d5108) (&warning . d5107) (&message . d5106) (&condition . d5105) (define-condition-type . d5104) (define-enumeration . d5103) (define-record-type . d5102) (parent-rtd . d5101) (nongenerative . d5100) (opaque . d50ff) (sealed . d50fe) (protocol . d50fd) (parent . d50fc) (immutable . d50fb) (mutable . d50fa) (fields . d50f9) (error-handling-mode . d50f8) (file-options . d50f7) (buffer-mode . d50f6) (eol-style . d50f5) (guard . d50f4) (unsyntax-splicing . d50f1) (unsyntax . d50f0) (unquote-splicing . d50ef) (unquote . d50ee) (_ . d50ed) (else . d50ec) (=> . d50eb) (... . d50ea) (assert . d50e9) (endianness . d50e8) (do . d50e5) (cond . d50e4) (let* . d50e3) (let . d50e2) (let*-values . d50e1) (let-values . d50e0) (identifier-syntax . d50df) (with-syntax . d50de) (quasisyntax . d50dd) (quasiquote . d50dc) (syntax-rules . d50db) (record-constructor-descriptor . d50d8) (record-type-descriptor . d50d7) (case . d50d6) (unless . d50d4) (when . d50d3) (or . d50d2) (and . d50d1) (if . d50d0) (letrec* . d50cf) (letrec . d50ce) (case-lambda . d50cc) (lambda . d50cb) (syntax . d50ca) (syntax-case . d50c9) (quote . d50c8) (letrec-syntax . d50c6) (let-syntax . d50c5) (set! . d50c4) (begin . d50c2) (define-syntax . d50c0) (define . d50bf)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e3 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . d310f) (quotient . d52a5) (null-environment . d310d) (remainder . d52a4) (modulo . d52a3) (inexact->exact . d52a2) (force . d52a1) (exact->inexact . d52a0) (make-promise . d529f) (delay . d50e7)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e4 '(rnrs control) '(6) '() '() '() '((do . d50e5) (unless . d50d4) (when . d50d3) (case-lambda . d50cc)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e5 '(rnrs eval) '(6) '() '() '() '((eval . d3113) (environment . d310b)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e6 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . d529b) (set-car! . d529a)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e7 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . d529d) (string-set! . d529c)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e8 '(rnrs programs) '(6) '() '() '() '((exit . d529e) (command-line . d4f99)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53e9 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . d2e92) (identifier? . d3135) (generate-temporaries . d3121) (free-identifier=? . d3123) (syntax->datum . d3139) (datum->syntax . d3137) (bound-identifier=? . d3125) (syntax-violation . d3133) (unsyntax-splicing . d50f1) (unsyntax . d50f0) (_ . d50ed) (... . d50ea) (with-syntax . d50de) (quasisyntax . d50dd) (syntax . d50ca) (syntax-case . d50c9)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53ea '(rnrs files) '(6) '() '() '() '((delete-file . d530e) (file-exists? . d530d) (make-i/o-write-error . d4d8d) (make-i/o-read-error . d4d78) (make-i/o-port-error . d4e2e) (make-i/o-invalid-position-error . d4da4) (make-i/o-filename-error . d4dbf) (make-i/o-file-protection-error . d4dd8) (make-i/o-file-is-read-only-error . d4ded) (make-i/o-file-does-not-exist-error . d4e17) (make-i/o-file-already-exists-error . d4e02) (make-i/o-error . d4d63) (i/o-write-error? . d4d8f) (i/o-read-error? . d4d7a) (i/o-port-error? . d4e32) (i/o-invalid-position-error? . d4da8) (i/o-filename-error? . d4dc3) (i/o-file-protection-error? . d4dda) (i/o-file-is-read-only-error? . d4def) (i/o-file-does-not-exist-error? . d4e19) (i/o-file-already-exists-error? . d4e04) (i/o-error? . d4d65) (i/o-error-position . d4daa) (i/o-error-port . d4e34) (i/o-error-filename . d4dc5) (&i/o-port . d511c) (&i/o-file-does-not-exist . d511b) (&i/o-file-already-exists . d511a) (&i/o-file-is-read-only . d5119) (&i/o-file-protection . d5118) (&i/o-filename . d5117) (&i/o-invalid-position . d5116) (&i/o-write . d5115) (&i/o-read . d5114) (&i/o . d5113)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53eb '(rnrs sorting) '(6) '() '() '() '((vector-sort! . d530c) (vector-sort . d530b) (list-sort . d530a)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53ec '(rnrs base) '(6) '() '() '() '((zero? . d51c3) (vector? . d51c2) (vector-set! . d51c1) (vector-ref . d51c0) (vector-map . d51bf) (vector-length . d51be) (vector-for-each . d51bd) (vector-fill! . d51bc) (vector->list . d51bb) (vector . d51ba) (values . d51b9) (truncate . d51b8) (tan . d51b7) (symbol? . d51b6) (symbol=? . d51b5) (symbol->string . d51b4) (substring . d51b3) (string? . d51b2) (string>? . d51b1) (string>=? . d51b0) (string=? . d51af) (string<? . d51ae) (string<=? . d51ad) (string-ref . d51ac) (string-length . d51ab) (string-for-each . d51aa) (string-copy . d51a9) (string-append . d51a8) (string->symbol . d51a7) (string->number . d51a6) (string->list . d51a5) (string . d51a4) (sqrt . d51a3) (sin . d51a2) (round . d51a1) (reverse . d51a0) (real? . d519f) (real-valued? . d519e) (real-part . d519d) (rationalize . d519c) (rational? . d519b) (rational-valued? . d519a) (procedure? . d5199) (positive? . d5198) (pair? . d5197) (odd? . d5196) (numerator . d5195) (number? . d5194) (number->string . d5193) (null? . d5192) (not . d5191) (negative? . d5190) (nan? . d518f) (min . d518e) (max . d518d) (map . d518c) (make-vector . d518b) (make-string . d518a) (make-rectangular . d5189) (make-polar . d5188) (magnitude . d5187) (log . d5186) (list? . d5185) (list-tail . d5184) (list-ref . d5183) (list->vector . d5182) (list->string . d5181) (list . d5180) (length . d517f) (lcm . d517e) (integer? . d517d) (integer-valued? . d517c) (integer->char . d517b) (infinite? . d517a) (inexact? . d5179) (inexact . d5178) (imag-part . d5177) (gcd . d5176) (for-each . d5175) (floor . d5174) (finite? . d5173) (expt . d5172) (exp . d5171) (exact? . d5170) (exact-integer-sqrt . d516f) (exact . d516e) (even? . d516d) (error . d516c) (eqv? . d516b) (equal? . d516a) (eq? . d5169) (dynamic-wind . d5168) (div0-and-mod0 . d5167) (mod0 . d5166) (div0 . d5165) (div-and-mod . d5164) (mod . d5163) (div . d5162) (denominator . d5161) (cos . d5160) (cons . d515f) (complex? . d515e) (char? . d515d) (char>? . d515c) (char>=? . d515b) (char=? . d515a) (char<? . d5159) (char<=? . d5158) (char->integer . d5157) (ceiling . d5156) (call-with-values . d5155) (call/cc . d5154) (call-with-current-continuation . d5153) (cddddr . d5152) (cdddar . d5151) (cddadr . d5150) (cddaar . d514f) (cdaddr . d514e) (cdadar . d514d) (cdaadr . d514c) (cdaaar . d514b) (cadddr . d514a) (caddar . d5149) (cadadr . d5148) (cadaar . d5147) (caaddr . d5146) (caadar . d5145) (caaadr . d5144) (caaaar . d5143) (cdddr . d5142) (cddar . d5141) (cdadr . d5140) (cdaar . d513f) (caddr . d513e) (cadar . d513d) (caadr . d513c) (caaar . d513b) (cddr . d513a) (cdar . d5139) (cadr . d5138) (caar . d5137) (cdr . d5136) (car . d5135) (boolean? . d5134) (boolean=? . d5133) (atan . d5132) (assertion-violation . d5131) (asin . d5130) (apply . d512f) (append . d512e) (angle . d512d) (acos . d512c) (abs . d512b) (/ . d512a) (* . d5129) (- . d5128) (+ . d5127) (>= . d5126) (> . d5125) (= . d5124) (<= . d5123) (< . d5122) (unquote-splicing . d50ef) (unquote . d50ee) (_ . d50ed) (else . d50ec) (=> . d50eb) (... . d50ea) (assert . d50e9) (cond . d50e4) (let* . d50e3) (let . d50e2) (let*-values . d50e1) (let-values . d50e0) (identifier-syntax . d50df) (quasiquote . d50dc) (syntax-rules . d50db) (case . d50d6) (or . d50d2) (and . d50d1) (if . d50d0) (letrec* . d50cf) (letrec . d50ce) (lambda . d50cb) (quote . d50c8) (letrec-syntax . d50c6) (let-syntax . d50c5) (set! . d50c4) (begin . d50c2) (define-syntax . d50c0) (define . d50bf)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53ed '(rnrs lists) '(6) '() '() '() '((remove . d5299) (remv . d5298) (remp . d5297) (remq . d5296) (partition . d5295) (memv . d5294) (memq . d5293) (memp . d5292) (member . d5291) (exists . d5290) (for-all . d528f) (fold-right . d528e) (fold-left . d528d) (find . d528c) (filter . d528b) (cons* . d528a) (assv . d5289) (assq . d5288) (assp . d5287) (assoc . d5286)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53ee '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . d52f4) (call-with-input-file . d52f3) (write-char . d52f2) (write . d52f1) (with-output-to-file . d52f0) (with-input-from-file . d52ef) (read-char . d52ee) (read . d52ed) (peek-char . d52ec) (open-output-file . d52eb) (open-input-file . d52ea) (newline . d52e9) (display . d52e8) (close-output-port . d52e7) (close-input-port . d52e6) (eof-object? . d52e5) (eof-object . d52e4) (current-error-port . d52e3) (current-output-port . d52e2) (current-input-port . d52e1) (output-port? . d52e0) (input-port? . d52df) (make-i/o-write-error . d4d8d) (make-i/o-read-error . d4d78) (make-i/o-port-error . d4e2e) (make-i/o-invalid-position-error . d4da4) (make-i/o-filename-error . d4dbf) (make-i/o-file-protection-error . d4dd8) (make-i/o-file-is-read-only-error . d4ded) (make-i/o-file-does-not-exist-error . d4e17) (make-i/o-file-already-exists-error . d4e02) (make-i/o-error . d4d63) (i/o-write-error? . d4d8f) (i/o-read-error? . d4d7a) (i/o-port-error? . d4e32) (i/o-invalid-position-error? . d4da8) (i/o-filename-error? . d4dc3) (i/o-file-protection-error? . d4dda) (i/o-file-is-read-only-error? . d4def) (i/o-file-does-not-exist-error? . d4e19) (i/o-file-already-exists-error? . d4e04) (i/o-error? . d4d65) (i/o-error-position . d4daa) (i/o-error-port . d4e34) (i/o-error-filename . d4dc5) (&i/o-port . d511c) (&i/o-file-does-not-exist . d511b) (&i/o-file-already-exists . d511a) (&i/o-file-is-read-only . d5119) (&i/o-file-protection . d5118) (&i/o-filename . d5117) (&i/o-invalid-position . d5116) (&i/o-write . d5115) (&i/o-read . d5114) (&i/o . d5113)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53ef '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . d52b5) (utf32->string . d526a) (utf16->string . d5269) (utf8->string . d5268) (uint-list->bytevector . d5267) (u8-list->bytevector . d5266) (string->utf8 . d5265) (string->utf32 . d5264) (string->utf16 . d5263) (sint-list->bytevector . d5262) (native-endianness . d5261) (bytevector? . d5260) (bytevector=? . d525f) (bytevector-uint-set! . d525e) (bytevector-uint-ref . d525d) (bytevector-u8-set! . d525c) (bytevector-u8-ref . d525b) (bytevector-u64-set! . d525a) (bytevector-u64-ref . d5259) (bytevector-u64-native-set! . d5258) (bytevector-u64-native-ref . d5257) (bytevector-u32-set! . d5256) (bytevector-u32-ref . d5255) (bytevector-u32-native-set! . d5254) (bytevector-u32-native-ref . d5253) (bytevector-u16-set! . d5252) (bytevector-u16-ref . d5251) (bytevector-u16-native-set! . d5250) (bytevector-u16-native-ref . d524f) (bytevector-sint-set! . d524e) (bytevector-sint-ref . d524d) (bytevector-s8-set! . d524c) (bytevector-s8-ref . d524b) (bytevector-s64-set! . d524a) (bytevector-s64-ref . d5249) (bytevector-s64-native-set! . d5248) (bytevector-s64-native-ref . d5247) (bytevector-s32-set! . d5246) (bytevector-s32-ref . d5245) (bytevector-s32-native-set! . d5244) (bytevector-s32-native-ref . d5243) (bytevector-s16-set! . d5242) (bytevector-s16-ref . d5241) (bytevector-s16-native-set! . d5240) (bytevector-s16-native-ref . d523f) (bytevector-length . d523e) (bytevector-ieee-single-ref . d523d) (bytevector-ieee-single-set! . d523c) (bytevector-ieee-single-native-set! . d523b) (bytevector-ieee-single-native-ref . d523a) (bytevector-ieee-double-set! . d5239) (bytevector-ieee-double-ref . d5238) (bytevector-ieee-double-native-set! . d5237) (bytevector-ieee-double-native-ref . d5236) (bytevector-fill! . d5235) (bytevector-copy! . d5234) (bytevector-copy . d5233) (bytevector->uint-list . d5232) (bytevector->u8-list . d5231) (bytevector->sint-list . d5230) (endianness . d50e8)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f0 '(rnrs unicode) '(6) '() '() '() '((string-upcase . d533c) (string-titlecase . d533b) (string-normalize-nfkd . d533a) (string-normalize-nfkc . d5339) (string-normalize-nfd . d5338) (string-normalize-nfc . d5337) (string-foldcase . d5336) (string-downcase . d5335) (string-ci>? . d5334) (string-ci>=? . d5333) (string-ci=? . d5332) (string-ci<? . d5331) (string-ci<=? . d5330) (char-whitespace? . d532f) (char-upper-case? . d532e) (char-title-case? . d532d) (char-numeric? . d532c) (char-lower-case? . d532b) (char-general-category . d532a) (char-upcase . d5329) (char-titlecase . d5328) (char-foldcase . d5327) (char-downcase . d5326) (char-ci>? . d5325) (char-ci>=? . d5324) (char-ci=? . d5323) (char-ci<? . d5322) (char-ci<=? . d5321) (char-alphabetic? . d5320)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f1 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . d527f) (raise-continuable . d527e) (raise . d527d) (guard . d50f4) (else . d50ec) (=> . d50eb)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f2 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . d51d4) (bitwise-reverse-bit-field . d51d3) (bitwise-length . d51d2) (bitwise-if . d51d1) (bitwise-first-bit-set . d51d0) (bitwise-copy-bit-field . d51cf) (bitwise-copy-bit . d51ce) (bitwise-bit-set? . d51cd) (bitwise-bit-field . d51cc) (bitwise-bit-count . d51cb) (bitwise-xor . d51ca) (bitwise-ior . d51c9) (bitwise-and . d51c8) (bitwise-not . d51c7) (bitwise-arithmetic-shift-right . d51c6) (bitwise-arithmetic-shift-left . d51c5) (bitwise-arithmetic-shift . d51c4)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f3 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . d5201) (fxxor . d5200) (fxrotate-bit-field . d51ff) (fxreverse-bit-field . d51fe) (fxpositive? . d51fd) (fxodd? . d51fc) (fxnot . d51fb) (fxnegative? . d51fa) (fxmod0 . d51f9) (fxmod . d51f8) (fxmin . d51f7) (fxmax . d51f6) (fxlength . d51f5) (fxior . d51f4) (fxif . d51f3) (fxfirst-bit-set . d51f2) (fxeven? . d51f1) (fxdiv0-and-mod0 . d51f0) (fxdiv0 . d51ef) (fxdiv-and-mod . d51ee) (fxdiv . d51ed) (fxcopy-bit-field . d51ec) (fxcopy-bit . d51eb) (fxbit-set? . d51ea) (fxbit-field . d51e9) (fxbit-count . d51e8) (fxarithmetic-shift-right . d51e7) (fxarithmetic-shift-left . d51e6) (fxarithmetic-shift . d51e5) (fxand . d51e4) (fx>? . d51e3) (fx>=? . d51e2) (fx=? . d51e1) (fx<? . d51e0) (fx<=? . d51df) (fx-/carry . d51de) (fx- . d51dd) (fx+/carry . d51dc) (fx+ . d51db) (fx*/carry . d51da) (fx* . d51d9) (greatest-fixnum . d51d8) (least-fixnum . d51d7) (fixnum-width . d51d6) (fixnum? . d51d5)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f4 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . d4e8e) (no-infinities-violation? . d4e79) (make-no-nans-violation . d4e8c) (make-no-infinities-violation . d4e77) (real->flonum . d522f) (flzero? . d522e) (fltruncate . d522d) (fltan . d522c) (flsqrt . d522b) (flsin . d522a) (flround . d5229) (flpositive? . d5228) (flonum? . d5227) (flodd? . d5226) (flnumerator . d5225) (flnegative? . d5224) (flnan? . d5223) (flmod0 . d5222) (flmod . d5221) (flmin . d5220) (flmax . d521f) (fllog . d521e) (flinteger? . d521d) (flinfinite? . d521c) (flfloor . d521b) (flfinite? . d521a) (flexpt . d5219) (flexp . d5218) (fleven? . d5217) (fldiv0-and-mod0 . d5216) (fldiv0 . d5215) (fldiv-and-mod . d5214) (fldiv . d5213) (fldenominator . d5212) (flcos . d5211) (flceiling . d5210) (flatan . d520f) (flasin . d520e) (flacos . d520d) (flabs . d520c) (fl>? . d520b) (fl>=? . d520a) (fl=? . d5209) (fl<? . d5208) (fl<=? . d5207) (fl/ . d5206) (fl- . d5205) (fl+ . d5204) (fl* . d5203) (fixnum->flonum . d5202) (&no-nans . d5120) (&no-infinities . d511f)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f5 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . d5309) (string-ci-hash . d5308) (string-hash . d5307) (equal-hash . d5306) (hashtable-equivalence-function . d5305) (make-hashtable . d5304) (hashtable-hash-function . d5303) (make-eqv-hashtable . d5302) (make-eq-hashtable . d5301) (hashtable? . d5300) (hashtable-update! . d52ff) (hashtable-size . d52fe) (hashtable-set! . d52fd) (hashtable-ref . d52fc) (hashtable-mutable? . d52fb) (hashtable-keys . d52fa) (hashtable-entries . d52f9) (hashtable-delete! . d52f8) (hashtable-copy . d52f7) (hashtable-contains? . d52f6) (hashtable-clear! . d52f5)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f6 '(rnrs io ports) '(6) '() '() '() '((eof-object? . d52e5) (eof-object . d52e4) (current-error-port . d52e3) (current-output-port . d52e2) (current-input-port . d52e1) (output-port? . d52e0) (input-port? . d52df) (utf-8-codec . d52de) (utf-16-codec . d52dd) (transcoder-error-handling-mode . d52dc) (transcoder-eol-style . d52db) (transcoder-codec . d52da) (transcoded-port . d52d9) (textual-port? . d52d8) (string->bytevector . d52d7) (standard-output-port . d52d6) (standard-input-port . d52d5) (standard-error-port . d52d4) (set-port-position! . d52d3) (put-u8 . d52d2) (put-string . d52d1) (put-datum . d52d0) (put-char . d52cf) (put-bytevector . d52ce) (port? . d52cd) (port-transcoder . d52cc) (port-position . d52cb) (port-has-set-port-position!? . d52ca) (port-has-port-position? . d52c9) (port-eof? . d52c8) (output-port-buffer-mode . d52c7) (open-string-output-port . d52c6) (open-string-input-port . d52c5) (open-file-output-port . d52c4) (open-file-input/output-port . d52c3) (open-file-input-port . d52c2) (open-bytevector-output-port . d52c1) (open-bytevector-input-port . d52c0) (native-transcoder . d52bf) (native-eol-style . d52be) (make-transcoder . d52bd) (latin-1-codec . d52bc) (make-i/o-write-error . d4d8d) (make-i/o-read-error . d4d78) (make-i/o-port-error . d4e2e) (make-i/o-invalid-position-error . d4da4) (make-i/o-filename-error . d4dbf) (make-i/o-file-protection-error . d4dd8) (make-i/o-file-is-read-only-error . d4ded) (make-i/o-file-does-not-exist-error . d4e17) (make-i/o-file-already-exists-error . d4e02) (make-i/o-error . d4d63) (make-i/o-encoding-error . d4e5e) (make-i/o-decoding-error . d4e47) (make-custom-textual-output-port . d52bb) (make-custom-textual-input/output-port . d52ba) (make-custom-textual-input-port . d52b9) (make-custom-binary-output-port . d52b8) (make-custom-binary-input/output-port . d52b7) (make-custom-binary-input-port . d52b6) (lookahead-u8 . d52b4) (lookahead-char . d52b3) (i/o-write-error? . d4d8f) (i/o-read-error? . d4d7a) (i/o-port-error? . d4e32) (i/o-invalid-position-error? . d4da8) (i/o-filename-error? . d4dc3) (i/o-file-protection-error? . d4dda) (i/o-file-is-read-only-error? . d4def) (i/o-file-does-not-exist-error? . d4e19) (i/o-file-already-exists-error? . d4e04) (i/o-error? . d4d65) (i/o-error-position . d4daa) (i/o-error-port . d4e34) (i/o-error-filename . d4dc5) (i/o-encoding-error? . d4e62) (i/o-encoding-error-char . d4e64) (i/o-decoding-error? . d4e49) (get-u8 . d52b2) (get-string-n! . d52b1) (get-string-n . d52b0) (get-string-all . d52af) (get-line . d52ae) (get-datum . d52ad) (get-char . d52ac) (get-bytevector-some . d52ab) (get-bytevector-n! . d52aa) (get-bytevector-n . d52a9) (get-bytevector-all . d52a8) (flush-output-port . d52a7) (close-port . d52a6) (call-with-string-output-port . d5285) (call-with-port . d5284) (call-with-bytevector-output-port . d5283) (bytevector->string . d5282) (buffer-mode? . d5281) (binary-port? . d5280) (&i/o-encoding . d511e) (&i/o-decoding . d511d) (&i/o-port . d511c) (&i/o-file-does-not-exist . d511b) (&i/o-file-already-exists . d511a) (&i/o-file-is-read-only . d5119) (&i/o-file-protection . d5118) (&i/o-filename . d5117) (&i/o-invalid-position . d5116) (&i/o-write . d5115) (&i/o-read . d5114) (&i/o . d5113) (error-handling-mode . d50f8) (file-options . d50f7) (buffer-mode . d50f6) (eol-style . d50f5)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f7 '(rnrs enums) '(6) '() '() '() '((make-enumeration . d527c) (enum-set=? . d527b) (enum-set-universe . d527a) (enum-set-union . d5279) (enum-set-subset? . d5278) (enum-set-projection . d5277) (enum-set-member? . d5276) (enum-set-intersection . d5275) (enum-set-indexer . d5274) (enum-set-difference . d5273) (enum-set-constructor . d5272) (enum-set-complement . d5271) (enum-set->list . d5270) (define-enumeration . d5103)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f8 '(rnrs conditions) '(6) '() '() '() '((who-condition? . d4cd9) (warning? . d4c51) (violation? . d4c90) (undefined-violation? . d4d50) (syntax-violation? . d4d37) (syntax-violation-subform . d4d3b) (syntax-violation-form . d4d39) (syntax-violation . d3133) (simple-conditions . d526f) (serious-condition? . d4c66) (non-continuable-violation? . d4cf0) (message-condition? . d4c3a) (make-who-condition . d4cd5) (make-warning . d4c4f) (make-violation . d4c8e) (make-undefined-violation . d4d4e) (make-syntax-violation . d4d31) (make-serious-condition . d4c64) (make-non-continuable-violation . d4cee) (make-message-condition . d4c36) (make-lexical-violation . d4d18) (make-irritants-condition . d4cba) (make-implementation-restriction-violation . d4d03) (make-error . d4c79) (make-assertion-violation . d4ca3) (lexical-violation? . d4d1a) (irritants-condition? . d4cbe) (implementation-restriction-violation? . d4d05) (error? . d4c7b) (condition-who . d4cdb) (condition-predicate . d526e) (condition-message . d4c3c) (condition-irritants . d4cc0) (condition-accessor . d526d) (condition . d526c) (assertion-violation? . d4ca5) (condition? . d526b) (&undefined . d5112) (&syntax . d5111) (&lexical . d5110) (&implementation-restriction . d510f) (&non-continuable . d510e) (&who . d510d) (&irritants . d510c) (&assertion . d510b) (&violation . d510a) (&error . d5109) (&serious . d5108) (&warning . d5107) (&message . d5106) (&condition . d5105) (define-condition-type . d5104)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53f9 '(rnrs records inspection) '(6) '() '() '() '((record? . d5318) (record-type-uid . d5317) (record-type-sealed? . d5316) (record-type-parent . d5315) (record-type-opaque? . d5314) (record-type-name . d5313) (record-type-generative? . d5312) (record-type-field-names . d5311) (record-rtd . d5310) (record-field-mutable? . d530f)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53fa '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . d531f) (record-predicate . d531e) (record-mutator . d531d) (record-constructor . d531c) (record-accessor . d531b) (make-record-type-descriptor . d531a) (make-record-constructor-descriptor . d5319)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53fb '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . d5102) (parent-rtd . d5101) (nongenerative . d5100) (opaque . d50ff) (sealed . d50fe) (protocol . d50fd) (parent . d50fc) (immutable . d50fb) (mutable . d50fa) (fields . d50f9) (record-constructor-descriptor . d50d8) (record-type-descriptor . d50d7)) '() values values '#f '#f '#t '#f) (d2c8f@d2ad0@install-library 'd53fc '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . d4e92) (&no-nans-rtd . d4e90) (&no-infinities-rcd . d4e7d) (&no-infinities-rtd . d4e7b) (&i/o-encoding-rcd . d4e68) (&i/o-encoding-rtd . d4e66) (&i/o-decoding-rcd . d4e4d) (&i/o-decoding-rtd . d4e4b) (&i/o-port-rcd . d4e38) (&i/o-port-rtd . d4e36) (&i/o-file-does-not-exist-rcd . d4e1d) (&i/o-file-does-not-exist-rtd . d4e1b) (&i/o-file-already-exists-rcd . d4e08) (&i/o-file-already-exists-rtd . d4e06) (&i/o-file-is-read-only-rcd . d4df3) (&i/o-file-is-read-only-rtd . d4df1) (&i/o-file-protection-rcd . d4dde) (&i/o-file-protection-rtd . d4ddc) (&i/o-filename-rcd . d4dc9) (&i/o-filename-rtd . d4dc7) (&i/o-invalid-position-rcd . d4dae) (&i/o-invalid-position-rtd . d4dac) (&i/o-write-rcd . d4d93) (&i/o-write-rtd . d4d91) (&i/o-read-rcd . d4d7e) (&i/o-read-rtd . d4d7c) (&i/o-rcd . d4d69) (&i/o-rtd . d4d67) (&undefined-rcd . d4d54) (&undefined-rtd . d4d52) (&syntax-rcd . d4d3f) (&syntax-rtd . d4d3d) (&lexical-rcd . d4d1e) (&lexical-rtd . d4d1c) (&implementation-restriction-rcd . d4d09) (&implementation-restriction-rtd . d4d07) (&non-continuable-rcd . d4cf4) (&non-continuable-rtd . d4cf2) (&who-rcd . d4cdf) (&who-rtd . d4cdd) (&irritants-rcd . d4cc4) (&irritants-rtd . d4cc2) (&assertion-rcd . d4ca9) (&assertion-rtd . d4ca7) (&violation-rcd . d4c94) (&violation-rtd . d4c92) (&error-rcd . d4c7f) (&error-rtd . d4c7d) (&serious-rcd . d4c6a) (&serious-rtd . d4c68) (&warning-rcd . d4c55) (&warning-rtd . d4c53) (&message-rcd . d4c40) (&message-rtd . d4c3e) (&condition-rcd . d4be1) (&condition-rtd . d4bdf) (syntax-error . d312f) (syntax-dispatch . d3065) (pretty-print . d53dc) (eval-core . d53db) (set-symbol-value! . d53da) (symbol-value . d53d9) (gensym . d53d8) (void . d53d7) (load . d4f9f) (interaction-environment . d313f) (char-ready? . d53d6) (regexp? . d53d5) (read-line . d53d4) (ungensym . d53d3) (alist->eq-hash-table . d53d2) (assoc-ref . d53d1) (print . d53d0) (format . d53cf) (host-os . d53ce) (library-path . d2aaf) (standard-library-path . d53cd) (file-newer? . d53cc) (stat-mtime . d53cb) (write-to-file . d53ca) (file->list . d53c9) (file->string . d53c8) (digit->integer . d53c7) (call-with-string-input-port . d53c6) (call-with-string-io . d53c5) (string-split . d53c4) (bytevector-for-each . d53c3) (string->regexp . d53c2) (rxmatch . d53c1) (regexp-replace-all . d53c0) (hashtable-for-each . d53bf) (call-process . d53be) (local-tz-offset . d53bd) (microseconds . d53bc) (directory-list . d53bb) (set-current-directory! . d53ba) (expand-path . d53b9) (current-directory . d53b8) (%spawn . d53b7) (%waitpid . d53b6) (simple-struct-name . d53b5) (simple-struct-set! . d53b4) (simple-struct-ref . d53b3) (make-simple-struct . d53b2) (simple-struct? . d53b1) (pointer-ref-c-int64 . d53b0) (pointer-ref-c-int32 . d53af) (pointer-ref-c-int16 . d53ae) (pointer-ref-c-int8 . d53ad) (pointer-ref-c-uint64 . d53ac) (pointer-ref-c-uint32 . d53ab) (pointer-ref-c-uint16 . d53aa) (pointer-ref-c-uint8 . d53a9) (pointer-set-c-uint64! . d53a8) (pointer-set-c-uint32! . d53a7) (pointer-set-c-uint16! . d53a6) (pointer-set-c-uint8! . d53a5) (pointer-set-c-int64! . d53a4) (pointer-set-c-int32! . d53a3) (pointer-set-c-int16! . d53a2) (pointer-set-c-int8! . d53a1) (pointer-set-c-pointer! . d53a0) (pointer-set-c-double! . d539f) (pointer-set-c-float! . d539e) (pointer-set-c-long-long! . d539d) (pointer-set-c-long! . d539c) (pointer-set-c-int! . d539b) (pointer-set-c-short! . d539a) (pointer-set-c-char! . d5399) (pointer-ref-c-pointer . d5398) (pointer-ref-c-double . d5397) (pointer-ref-c-float . d5396) (pointer-ref-c-unsigned-long-long . d5395) (pointer-ref-c-signed-long-long . d5394) (pointer-ref-c-unsigned-long . d5393) (pointer-ref-c-signed-long . d5392) (pointer-ref-c-unsigned-int . d5391) (pointer-ref-c-signed-int . d5390) (pointer-ref-c-unsigned-short . d538f) (pointer-ref-c-signed-short . d538e) (pointer-ref-c-unsigned-char . d538d) (pointer-ref-c-signed-char . d538c) (pointer->integer . d538b) (integer->pointer . d538a) (pointer? . d5389) (shared-errno . d5388) (%ffi-supported? . d5387) (%ffi-pointer->string . d5386) (%ffi-call->string-or-zero . d5385) (%ffi-call->double . d5384) (%ffi-call->void* . d5383) (%ffi-call->void . d5382) (%ffi-call->char . d5381) (%ffi-call->int . d5380) (%ffi-lookup . d537f) (%ffi-open . d537e) (%fork . d537d) (%pipe . d537c) (p . d537b) (open-output-string . d537a) (get-output-string . d5379) (file-stat-ctime . d5378) (file-stat-atime . d5377) (file-stat-mtime . d5376) (file-size-in-bytes . d5375) (file-writable? . d5374) (file-executable? . d5373) (file-readable? . d5372) (file-regular? . d5371) (file-symbolic-link? . d5370) (file-directory? . d536f) (create-symbolic-link . d536e) (rename-file . d536d) (delete-directory . d536c) (create-directory . d536b) (get-environment-variables . d536a) (get-environment-variable . d5369) (get-timeofday . d5368) (get-command-line . d5367) (sys-display . d5366) (whereis . d5365) (register . d5364) (vm-join! . d5363) (vm-set-value! . d5362) (vm? . d5361) (main-vm? . d5360) (vm-eval . d535f) (vm-self . d535e) (vm-start! . d535d) (make-vm . d535c) (mutex-try-lock! . d535b) (mutex-unlock! . d535a) (mutex-lock! . d5359) (mutex? . d5358) (make-mutex . d5357) (condition-variable-notify-all! . d5356) (condition-variable-notify! . d5355) (condition-variable-wait! . d5354) (make-condition-variable . d5353) (mosh-executable-path . d5352) (make-file-options . d5351) (source-info . d5350) (make-compiler-instruction . d534f) (make-instruction . d534e) (set-source-info! . d534d) (bignum? . d534c) (fast-equal? . d534b) (fasl-read . d534a) (fasl-write . d5349) (time-usage . d5348) (os-constant . d5347) (make-parameter . d28bc) (socket-port . d5346) (socket-shutdown . d5345) (socket-close . d5344) (socket-send . d5343) (socket-recv! . d5342) (socket-recv . d5341) (make-server-socket . d5340) (make-client-socket . d533f) (socket-accept . d533e) (socket? . d533d) (string-upcase . d533c) (string-titlecase . d533b) (string-normalize-nfkd . d533a) (string-normalize-nfkc . d5339) (string-normalize-nfd . d5338) (string-normalize-nfc . d5337) (string-foldcase . d5336) (string-downcase . d5335) (string-ci>? . d5334) (string-ci>=? . d5333) (string-ci=? . d5332) (string-ci<? . d5331) (string-ci<=? . d5330) (char-whitespace? . d532f) (char-upper-case? . d532e) (char-title-case? . d532d) (char-numeric? . d532c) (char-lower-case? . d532b) (char-general-category . d532a) (char-upcase . d5329) (char-titlecase . d5328) (char-foldcase . d5327) (char-downcase . d5326) (char-ci>? . d5325) (char-ci>=? . d5324) (char-ci=? . d5323) (char-ci<? . d5322) (char-ci<=? . d5321) (char-alphabetic? . d5320) (make-variable-transformer . d2e92) (identifier? . d3135) (generate-temporaries . d3121) (free-identifier=? . d3123) (syntax->datum . d3139) (datum->syntax . d3137) (bound-identifier=? . d3125) (record-type-descriptor? . d531f) (record-predicate . d531e) (record-mutator . d531d) (record-constructor . d531c) (record-accessor . d531b) (make-record-type-descriptor . d531a) (make-record-constructor-descriptor . d5319) (record? . d5318) (record-type-uid . d5317) (record-type-sealed? . d5316) (record-type-parent . d5315) (record-type-opaque? . d5314) (record-type-name . d5313) (record-type-generative? . d5312) (record-type-field-names . d5311) (record-rtd . d5310) (record-field-mutable? . d530f) (delete-file . d530e) (file-exists? . d530d) (vector-sort! . d530c) (vector-sort . d530b) (list-sort . d530a) (symbol-hash . d5309) (string-ci-hash . d5308) (string-hash . d5307) (equal-hash . d5306) (hashtable-equivalence-function . d5305) (make-hashtable . d5304) (hashtable-hash-function . d5303) (make-eqv-hashtable . d5302) (make-eq-hashtable . d5301) (hashtable? . d5300) (hashtable-update! . d52ff) (hashtable-size . d52fe) (hashtable-set! . d52fd) (hashtable-ref . d52fc) (hashtable-mutable? . d52fb) (hashtable-keys . d52fa) (hashtable-entries . d52f9) (hashtable-delete! . d52f8) (hashtable-copy . d52f7) (hashtable-contains? . d52f6) (hashtable-clear! . d52f5) (call-with-output-file . d52f4) (call-with-input-file . d52f3) (write-char . d52f2) (write . d52f1) (with-output-to-file . d52f0) (with-input-from-file . d52ef) (read-char . d52ee) (read . d52ed) (peek-char . d52ec) (open-output-file . d52eb) (open-input-file . d52ea) (newline . d52e9) (display . d52e8) (close-output-port . d52e7) (close-input-port . d52e6) (eof-object? . d52e5) (eof-object . d52e4) (current-error-port . d52e3) (current-output-port . d52e2) (current-input-port . d52e1) (output-port? . d52e0) (input-port? . d52df) (utf-8-codec . d52de) (utf-16-codec . d52dd) (transcoder-error-handling-mode . d52dc) (transcoder-eol-style . d52db) (transcoder-codec . d52da) (transcoded-port . d52d9) (textual-port? . d52d8) (string->bytevector . d52d7) (standard-output-port . d52d6) (standard-input-port . d52d5) (standard-error-port . d52d4) (set-port-position! . d52d3) (put-u8 . d52d2) (put-string . d52d1) (put-datum . d52d0) (put-char . d52cf) (put-bytevector . d52ce) (port? . d52cd) (port-transcoder . d52cc) (port-position . d52cb) (port-has-set-port-position!? . d52ca) (port-has-port-position? . d52c9) (port-eof? . d52c8) (output-port-buffer-mode . d52c7) (open-string-output-port . d52c6) (open-string-input-port . d52c5) (open-file-output-port . d52c4) (open-file-input/output-port . d52c3) (open-file-input-port . d52c2) (open-bytevector-output-port . d52c1) (open-bytevector-input-port . d52c0) (native-transcoder . d52bf) (native-eol-style . d52be) (make-transcoder . d52bd) (latin-1-codec . d52bc) (make-i/o-write-error . d4d8d) (make-i/o-read-error . d4d78) (make-i/o-port-error . d4e2e) (make-i/o-invalid-position-error . d4da4) (make-i/o-filename-error . d4dbf) (make-i/o-file-protection-error . d4dd8) (make-i/o-file-is-read-only-error . d4ded) (make-i/o-file-does-not-exist-error . d4e17) (make-i/o-file-already-exists-error . d4e02) (make-i/o-error . d4d63) (make-i/o-encoding-error . d4e5e) (make-i/o-decoding-error . d4e47) (make-custom-textual-output-port . d52bb) (make-custom-textual-input/output-port . d52ba) (make-custom-textual-input-port . d52b9) (make-custom-binary-output-port . d52b8) (make-custom-binary-input/output-port . d52b7) (make-custom-binary-input-port . d52b6) (make-bytevector . d52b5) (lookahead-u8 . d52b4) (lookahead-char . d52b3) (i/o-write-error? . d4d8f) (i/o-read-error? . d4d7a) (i/o-port-error? . d4e32) (i/o-invalid-position-error? . d4da8) (i/o-filename-error? . d4dc3) (i/o-file-protection-error? . d4dda) (i/o-file-is-read-only-error? . d4def) (i/o-file-does-not-exist-error? . d4e19) (i/o-file-already-exists-error? . d4e04) (i/o-error? . d4d65) (i/o-error-position . d4daa) (i/o-error-port . d4e34) (i/o-error-filename . d4dc5) (i/o-encoding-error? . d4e62) (i/o-encoding-error-char . d4e64) (i/o-decoding-error? . d4e49) (get-u8 . d52b2) (get-string-n! . d52b1) (get-string-n . d52b0) (get-string-all . d52af) (get-line . d52ae) (get-datum . d52ad) (get-char . d52ac) (get-bytevector-some . d52ab) (get-bytevector-n! . d52aa) (get-bytevector-n . d52a9) (get-bytevector-all . d52a8) (flush-output-port . d52a7) (close-port . d52a6) (scheme-report-environment . d310f) (quotient . d52a5) (null-environment . d310d) (remainder . d52a4) (modulo . d52a3) (inexact->exact . d52a2) (force . d52a1) (exact->inexact . d52a0) (make-promise . d529f) (exit . d529e) (command-line . d4f99) (string-fill! . d529d) (string-set! . d529c) (set-cdr! . d529b) (set-car! . d529a) (remove . d5299) (remv . d5298) (remp . d5297) (remq . d5296) (partition . d5295) (memv . d5294) (memq . d5293) (memp . d5292) (member . d5291) (exists . d5290) (for-all . d528f) (fold-right . d528e) (fold-left . d528d) (find . d528c) (filter . d528b) (cons* . d528a) (assv . d5289) (assq . d5288) (assp . d5287) (assoc . d5286) (call-with-string-output-port . d5285) (call-with-port . d5284) (call-with-bytevector-output-port . d5283) (bytevector->string . d5282) (buffer-mode? . d5281) (binary-port? . d5280) (with-exception-handler . d527f) (raise-continuable . d527e) (raise . d527d) (eval . d3113) (environment . d310b) (make-enumeration . d527c) (enum-set=? . d527b) (enum-set-universe . d527a) (enum-set-union . d5279) (enum-set-subset? . d5278) (enum-set-projection . d5277) (enum-set-member? . d5276) (enum-set-intersection . d5275) (enum-set-indexer . d5274) (enum-set-difference . d5273) (enum-set-constructor . d5272) (enum-set-complement . d5271) (enum-set->list . d5270) (who-condition? . d4cd9) (warning? . d4c51) (violation? . d4c90) (undefined-violation? . d4d50) (syntax-violation? . d4d37) (syntax-violation-subform . d4d3b) (syntax-violation-form . d4d39) (syntax-violation . d3133) (simple-conditions . d526f) (serious-condition? . d4c66) (non-continuable-violation? . d4cf0) (message-condition? . d4c3a) (make-who-condition . d4cd5) (make-warning . d4c4f) (make-violation . d4c8e) (make-undefined-violation . d4d4e) (make-syntax-violation . d4d31) (make-serious-condition . d4c64) (make-non-continuable-violation . d4cee) (make-message-condition . d4c36) (make-lexical-violation . d4d18) (make-irritants-condition . d4cba) (make-implementation-restriction-violation . d4d03) (make-error . d4c79) (make-assertion-violation . d4ca3) (lexical-violation? . d4d1a) (irritants-condition? . d4cbe) (implementation-restriction-violation? . d4d05) (error? . d4c7b) (condition-who . d4cdb) (condition-predicate . d526e) (condition-message . d4c3c) (condition-irritants . d4cc0) (condition-accessor . d526d) (condition . d526c) (assertion-violation? . d4ca5) (condition? . d526b) (utf32->string . d526a) (utf16->string . d5269) (utf8->string . d5268) (uint-list->bytevector . d5267) (u8-list->bytevector . d5266) (string->utf8 . d5265) (string->utf32 . d5264) (string->utf16 . d5263) (sint-list->bytevector . d5262) (native-endianness . d5261) (bytevector? . d5260) (bytevector=? . d525f) (bytevector-uint-set! . d525e) (bytevector-uint-ref . d525d) (bytevector-u8-set! . d525c) (bytevector-u8-ref . d525b) (bytevector-u64-set! . d525a) (bytevector-u64-ref . d5259) (bytevector-u64-native-set! . d5258) (bytevector-u64-native-ref . d5257) (bytevector-u32-set! . d5256) (bytevector-u32-ref . d5255) (bytevector-u32-native-set! . d5254) (bytevector-u32-native-ref . d5253) (bytevector-u16-set! . d5252) (bytevector-u16-ref . d5251) (bytevector-u16-native-set! . d5250) (bytevector-u16-native-ref . d524f) (bytevector-sint-set! . d524e) (bytevector-sint-ref . d524d) (bytevector-s8-set! . d524c) (bytevector-s8-ref . d524b) (bytevector-s64-set! . d524a) (bytevector-s64-ref . d5249) (bytevector-s64-native-set! . d5248) (bytevector-s64-native-ref . d5247) (bytevector-s32-set! . d5246) (bytevector-s32-ref . d5245) (bytevector-s32-native-set! . d5244) (bytevector-s32-native-ref . d5243) (bytevector-s16-set! . d5242) (bytevector-s16-ref . d5241) (bytevector-s16-native-set! . d5240) (bytevector-s16-native-ref . d523f) (bytevector-length . d523e) (bytevector-ieee-single-ref . d523d) (bytevector-ieee-single-set! . d523c) (bytevector-ieee-single-native-set! . d523b) (bytevector-ieee-single-native-ref . d523a) (bytevector-ieee-double-set! . d5239) (bytevector-ieee-double-ref . d5238) (bytevector-ieee-double-native-set! . d5237) (bytevector-ieee-double-native-ref . d5236) (bytevector-fill! . d5235) (bytevector-copy! . d5234) (bytevector-copy . d5233) (bytevector->uint-list . d5232) (bytevector->u8-list . d5231) (bytevector->sint-list . d5230) (no-nans-violation? . d4e8e) (no-infinities-violation? . d4e79) (make-no-nans-violation . d4e8c) (make-no-infinities-violation . d4e77) (real->flonum . d522f) (flzero? . d522e) (fltruncate . d522d) (fltan . d522c) (flsqrt . d522b) (flsin . d522a) (flround . d5229) (flpositive? . d5228) (flonum? . d5227) (flodd? . d5226) (flnumerator . d5225) (flnegative? . d5224) (flnan? . d5223) (flmod0 . d5222) (flmod . d5221) (flmin . d5220) (flmax . d521f) (fllog . d521e) (flinteger? . d521d) (flinfinite? . d521c) (flfloor . d521b) (flfinite? . d521a) (flexpt . d5219) (flexp . d5218) (fleven? . d5217) (fldiv0-and-mod0 . d5216) (fldiv0 . d5215) (fldiv-and-mod . d5214) (fldiv . d5213) (fldenominator . d5212) (flcos . d5211) (flceiling . d5210) (flatan . d520f) (flasin . d520e) (flacos . d520d) (flabs . d520c) (fl>? . d520b) (fl>=? . d520a) (fl=? . d5209) (fl<? . d5208) (fl<=? . d5207) (fl/ . d5206) (fl- . d5205) (fl+ . d5204) (fl* . d5203) (fixnum->flonum . d5202) (fxzero? . d5201) (fxxor . d5200) (fxrotate-bit-field . d51ff) (fxreverse-bit-field . d51fe) (fxpositive? . d51fd) (fxodd? . d51fc) (fxnot . d51fb) (fxnegative? . d51fa) (fxmod0 . d51f9) (fxmod . d51f8) (fxmin . d51f7) (fxmax . d51f6) (fxlength . d51f5) (fxior . d51f4) (fxif . d51f3) (fxfirst-bit-set . d51f2) (fxeven? . d51f1) (fxdiv0-and-mod0 . d51f0) (fxdiv0 . d51ef) (fxdiv-and-mod . d51ee) (fxdiv . d51ed) (fxcopy-bit-field . d51ec) (fxcopy-bit . d51eb) (fxbit-set? . d51ea) (fxbit-field . d51e9) (fxbit-count . d51e8) (fxarithmetic-shift-right . d51e7) (fxarithmetic-shift-left . d51e6) (fxarithmetic-shift . d51e5) (fxand . d51e4) (fx>? . d51e3) (fx>=? . d51e2) (fx=? . d51e1) (fx<? . d51e0) (fx<=? . d51df) (fx-/carry . d51de) (fx- . d51dd) (fx+/carry . d51dc) (fx+ . d51db) (fx*/carry . d51da) (fx* . d51d9) (greatest-fixnum . d51d8) (least-fixnum . d51d7) (fixnum-width . d51d6) (fixnum? . d51d5) (bitwise-rotate-bit-field . d51d4) (bitwise-reverse-bit-field . d51d3) (bitwise-length . d51d2) (bitwise-if . d51d1) (bitwise-first-bit-set . d51d0) (bitwise-copy-bit-field . d51cf) (bitwise-copy-bit . d51ce) (bitwise-bit-set? . d51cd) (bitwise-bit-field . d51cc) (bitwise-bit-count . d51cb) (bitwise-xor . d51ca) (bitwise-ior . d51c9) (bitwise-and . d51c8) (bitwise-not . d51c7) (bitwise-arithmetic-shift-right . d51c6) (bitwise-arithmetic-shift-left . d51c5) (bitwise-arithmetic-shift . d51c4) (zero? . d51c3) (vector? . d51c2) (vector-set! . d51c1) (vector-ref . d51c0) (vector-map . d51bf) (vector-length . d51be) (vector-for-each . d51bd) (vector-fill! . d51bc) (vector->list . d51bb) (vector . d51ba) (values . d51b9) (truncate . d51b8) (tan . d51b7) (symbol? . d51b6) (symbol=? . d51b5) (symbol->string . d51b4) (substring . d51b3) (string? . d51b2) (string>? . d51b1) (string>=? . d51b0) (string=? . d51af) (string<? . d51ae) (string<=? . d51ad) (string-ref . d51ac) (string-length . d51ab) (string-for-each . d51aa) (string-copy . d51a9) (string-append . d51a8) (string->symbol . d51a7) (string->number . d51a6) (string->list . d51a5) (string . d51a4) (sqrt . d51a3) (sin . d51a2) (round . d51a1) (reverse . d51a0) (real? . d519f) (real-valued? . d519e) (real-part . d519d) (rationalize . d519c) (rational? . d519b) (rational-valued? . d519a) (procedure? . d5199) (positive? . d5198) (pair? . d5197) (odd? . d5196) (numerator . d5195) (number? . d5194) (number->string . d5193) (null? . d5192) (not . d5191) (negative? . d5190) (nan? . d518f) (min . d518e) (max . d518d) (map . d518c) (make-vector . d518b) (make-string . d518a) (make-rectangular . d5189) (make-polar . d5188) (magnitude . d5187) (log . d5186) (list? . d5185) (list-tail . d5184) (list-ref . d5183) (list->vector . d5182) (list->string . d5181) (list . d5180) (length . d517f) (lcm . d517e) (integer? . d517d) (integer-valued? . d517c) (integer->char . d517b) (infinite? . d517a) (inexact? . d5179) (inexact . d5178) (imag-part . d5177) (gcd . d5176) (for-each . d5175) (floor . d5174) (finite? . d5173) (expt . d5172) (exp . d5171) (exact? . d5170) (exact-integer-sqrt . d516f) (exact . d516e) (even? . d516d) (error . d516c) (eqv? . d516b) (equal? . d516a) (eq? . d5169) (dynamic-wind . d5168) (div0-and-mod0 . d5167) (mod0 . d5166) (div0 . d5165) (div-and-mod . d5164) (mod . d5163) (div . d5162) (denominator . d5161) (cos . d5160) (cons . d515f) (complex? . d515e) (char? . d515d) (char>? . d515c) (char>=? . d515b) (char=? . d515a) (char<? . d5159) (char<=? . d5158) (char->integer . d5157) (ceiling . d5156) (call-with-values . d5155) (call/cc . d5154) (call-with-current-continuation . d5153) (cddddr . d5152) (cdddar . d5151) (cddadr . d5150) (cddaar . d514f) (cdaddr . d514e) (cdadar . d514d) (cdaadr . d514c) (cdaaar . d514b) (cadddr . d514a) (caddar . d5149) (cadadr . d5148) (cadaar . d5147) (caaddr . d5146) (caadar . d5145) (caaadr . d5144) (caaaar . d5143) (cdddr . d5142) (cddar . d5141) (cdadr . d5140) (cdaar . d513f) (caddr . d513e) (cadar . d513d) (caadr . d513c) (caaar . d513b) (cddr . d513a) (cdar . d5139) (cadr . d5138) (caar . d5137) (cdr . d5136) (car . d5135) (boolean? . d5134) (boolean=? . d5133) (atan . d5132) (assertion-violation . d5131) (assertion-error . d312d) (asin . d5130) (apply . d512f) (append . d512e) (angle . d512d) (acos . d512c) (abs . d512b) (/ . d512a) (* . d5129) (- . d5128) (+ . d5127) (>= . d5126) (> . d5125) (= . d5124) (<= . d5123) (< . d5122) (library . d5121) (&no-nans . d5120) (&no-infinities . d511f) (&i/o-encoding . d511e) (&i/o-decoding . d511d) (&i/o-port . d511c) (&i/o-file-does-not-exist . d511b) (&i/o-file-already-exists . d511a) (&i/o-file-is-read-only . d5119) (&i/o-file-protection . d5118) (&i/o-filename . d5117) (&i/o-invalid-position . d5116) (&i/o-write . d5115) (&i/o-read . d5114) (&i/o . d5113) (&undefined . d5112) (&syntax . d5111) (&lexical . d5110) (&implementation-restriction . d510f) (&non-continuable . d510e) (&who . d510d) (&irritants . d510c) (&assertion . d510b) (&violation . d510a) (&error . d5109) (&serious . d5108) (&warning . d5107) (&message . d5106) (&condition . d5105) (define-condition-type . d5104) (define-enumeration . d5103) (define-record-type . d5102) (parent-rtd . d5101) (nongenerative . d5100) (opaque . d50ff) (sealed . d50fe) (protocol . d50fd) (parent . d50fc) (immutable . d50fb) (mutable . d50fa) (fields . d50f9) (error-handling-mode . d50f8) (file-options . d50f7) (buffer-mode . d50f6) (eol-style . d50f5) (guard . d50f4) (trace-define . d50f3) (trace-lambda . d50f2) (unsyntax-splicing . d50f1) (unsyntax . d50f0) (unquote-splicing . d50ef) (unquote . d50ee) (_ . d50ed) (else . d50ec) (=> . d50eb) (... . d50ea) (assert . d50e9) (endianness . d50e8) (delay . d50e7) (time . d50e6) (do . d50e5) (cond . d50e4) (let* . d50e3) (let . d50e2) (let*-values . d50e1) (let-values . d50e0) (identifier-syntax . d50df) (with-syntax . d50de) (quasisyntax . d50dd) (quasiquote . d50dc) (syntax-rules . d50db) (include . d50da) (define-struct . d50d9) (record-constructor-descriptor . d50d8) (record-type-descriptor . d50d7) (case . d50d6) (parameterize . d50d5) (unless . d50d4) (when . d50d3) (or . d50d2) (and . d50d1) (if . d50d0) (letrec* . d50cf) (letrec . d50ce) (type-descriptor . d50cd) (case-lambda . d50cc) (lambda . d50cb) (syntax . d50ca) (syntax-case . d50c9) (quote . d50c8) (foreign-call . d50c7) (letrec-syntax . d50c6) (let-syntax . d50c5) (set! . d50c4) (import . d50c3) (begin . d50c2) (module . d50c1) (define-syntax . d50c0) (define . d50bf)) '((d4e92 core-prim . &no-nans-rcd) (d4e90 core-prim . &no-nans-rtd) (d4e7d core-prim . &no-infinities-rcd) (d4e7b core-prim . &no-infinities-rtd) (d4e68 core-prim . &i/o-encoding-rcd) (d4e66 core-prim . &i/o-encoding-rtd) (d4e4d core-prim . &i/o-decoding-rcd) (d4e4b core-prim . &i/o-decoding-rtd) (d4e38 core-prim . &i/o-port-rcd) (d4e36 core-prim . &i/o-port-rtd) (d4e1d core-prim . &i/o-file-does-not-exist-rcd) (d4e1b core-prim . &i/o-file-does-not-exist-rtd) (d4e08 core-prim . &i/o-file-already-exists-rcd) (d4e06 core-prim . &i/o-file-already-exists-rtd) (d4df3 core-prim . &i/o-file-is-read-only-rcd) (d4df1 core-prim . &i/o-file-is-read-only-rtd) (d4dde core-prim . &i/o-file-protection-rcd) (d4ddc core-prim . &i/o-file-protection-rtd) (d4dc9 core-prim . &i/o-filename-rcd) (d4dc7 core-prim . &i/o-filename-rtd) (d4dae core-prim . &i/o-invalid-position-rcd) (d4dac core-prim . &i/o-invalid-position-rtd) (d4d93 core-prim . &i/o-write-rcd) (d4d91 core-prim . &i/o-write-rtd) (d4d7e core-prim . &i/o-read-rcd) (d4d7c core-prim . &i/o-read-rtd) (d4d69 core-prim . &i/o-rcd) (d4d67 core-prim . &i/o-rtd) (d4d54 core-prim . &undefined-rcd) (d4d52 core-prim . &undefined-rtd) (d4d3f core-prim . &syntax-rcd) (d4d3d core-prim . &syntax-rtd) (d4d1e core-prim . &lexical-rcd) (d4d1c core-prim . &lexical-rtd) (d4d09 core-prim . &implementation-restriction-rcd) (d4d07 core-prim . &implementation-restriction-rtd) (d4cf4 core-prim . &non-continuable-rcd) (d4cf2 core-prim . &non-continuable-rtd) (d4cdf core-prim . &who-rcd) (d4cdd core-prim . &who-rtd) (d4cc4 core-prim . &irritants-rcd) (d4cc2 core-prim . &irritants-rtd) (d4ca9 core-prim . &assertion-rcd) (d4ca7 core-prim . &assertion-rtd) (d4c94 core-prim . &violation-rcd) (d4c92 core-prim . &violation-rtd) (d4c7f core-prim . &error-rcd) (d4c7d core-prim . &error-rtd) (d4c6a core-prim . &serious-rcd) (d4c68 core-prim . &serious-rtd) (d4c55 core-prim . &warning-rcd) (d4c53 core-prim . &warning-rtd) (d4c40 core-prim . &message-rcd) (d4c3e core-prim . &message-rtd) (d4be1 core-prim . &condition-rcd) (d4bdf core-prim . &condition-rtd) (d312f core-prim . syntax-error) (d3065 core-prim . syntax-dispatch) (d53dc core-prim . pretty-print) (d53db core-prim . eval-core) (d53da core-prim . set-symbol-value!) (d53d9 core-prim . symbol-value) (d53d8 core-prim . gensym) (d53d7 core-prim . void) (d4f9f core-prim . load) (d313f core-prim . interaction-environment) (d53d6 core-prim . char-ready?) (d53d5 core-prim . regexp?) (d53d4 core-prim . read-line) (d53d3 core-prim . ungensym) (d53d2 core-prim . alist->eq-hash-table) (d53d1 core-prim . assoc-ref) (d53d0 core-prim . print) (d53cf core-prim . format) (d53ce core-prim . host-os) (d2aaf core-prim . library-path) (d53cd core-prim . standard-library-path) (d53cc core-prim . file-newer?) (d53cb core-prim . stat-mtime) (d53ca core-prim . write-to-file) (d53c9 core-prim . file->list) (d53c8 core-prim . file->string) (d53c7 core-prim . digit->integer) (d53c6 core-prim . call-with-string-input-port) (d53c5 core-prim . call-with-string-io) (d53c4 core-prim . string-split) (d53c3 core-prim . bytevector-for-each) (d53c2 core-prim . string->regexp) (d53c1 core-prim . rxmatch) (d53c0 core-prim . regexp-replace-all) (d53bf core-prim . hashtable-for-each) (d53be core-prim . call-process) (d53bd core-prim . local-tz-offset) (d53bc core-prim . microseconds) (d53bb core-prim . directory-list) (d53ba core-prim . set-current-directory!) (d53b9 core-prim . expand-path) (d53b8 core-prim . current-directory) (d53b7 core-prim . %spawn) (d53b6 core-prim . %waitpid) (d53b5 core-prim . simple-struct-name) (d53b4 core-prim . simple-struct-set!) (d53b3 core-prim . simple-struct-ref) (d53b2 core-prim . make-simple-struct) (d53b1 core-prim . simple-struct?) (d53b0 core-prim . pointer-ref-c-int64) (d53af core-prim . pointer-ref-c-int32) (d53ae core-prim . pointer-ref-c-int16) (d53ad core-prim . pointer-ref-c-int8) (d53ac core-prim . pointer-ref-c-uint64) (d53ab core-prim . pointer-ref-c-uint32) (d53aa core-prim . pointer-ref-c-uint16) (d53a9 core-prim . pointer-ref-c-uint8) (d53a8 core-prim . pointer-set-c-uint64!) (d53a7 core-prim . pointer-set-c-uint32!) (d53a6 core-prim . pointer-set-c-uint16!) (d53a5 core-prim . pointer-set-c-uint8!) (d53a4 core-prim . pointer-set-c-int64!) (d53a3 core-prim . pointer-set-c-int32!) (d53a2 core-prim . pointer-set-c-int16!) (d53a1 core-prim . pointer-set-c-int8!) (d53a0 core-prim . pointer-set-c-pointer!) (d539f core-prim . pointer-set-c-double!) (d539e core-prim . pointer-set-c-float!) (d539d core-prim . pointer-set-c-long-long!) (d539c core-prim . pointer-set-c-long!) (d539b core-prim . pointer-set-c-int!) (d539a core-prim . pointer-set-c-short!) (d5399 core-prim . pointer-set-c-char!) (d5398 core-prim . pointer-ref-c-pointer) (d5397 core-prim . pointer-ref-c-double) (d5396 core-prim . pointer-ref-c-float) (d5395 core-prim . pointer-ref-c-unsigned-long-long) (d5394 core-prim . pointer-ref-c-signed-long-long) (d5393 core-prim . pointer-ref-c-unsigned-long) (d5392 core-prim . pointer-ref-c-signed-long) (d5391 core-prim . pointer-ref-c-unsigned-int) (d5390 core-prim . pointer-ref-c-signed-int) (d538f core-prim . pointer-ref-c-unsigned-short) (d538e core-prim . pointer-ref-c-signed-short) (d538d core-prim . pointer-ref-c-unsigned-char) (d538c core-prim . pointer-ref-c-signed-char) (d538b core-prim . pointer->integer) (d538a core-prim . integer->pointer) (d5389 core-prim . pointer?) (d5388 core-prim . shared-errno) (d5387 core-prim . %ffi-supported?) (d5386 core-prim . %ffi-pointer->string) (d5385 core-prim . %ffi-call->string-or-zero) (d5384 core-prim . %ffi-call->double) (d5383 core-prim . %ffi-call->void*) (d5382 core-prim . %ffi-call->void) (d5381 core-prim . %ffi-call->char) (d5380 core-prim . %ffi-call->int) (d537f core-prim . %ffi-lookup) (d537e core-prim . %ffi-open) (d537d core-prim . %fork) (d537c core-prim . %pipe) (d537b core-prim . p) (d537a core-prim . open-output-string) (d5379 core-prim . get-output-string) (d5378 core-prim . file-stat-ctime) (d5377 core-prim . file-stat-atime) (d5376 core-prim . file-stat-mtime) (d5375 core-prim . file-size-in-bytes) (d5374 core-prim . file-writable?) (d5373 core-prim . file-executable?) (d5372 core-prim . file-readable?) (d5371 core-prim . file-regular?) (d5370 core-prim . file-symbolic-link?) (d536f core-prim . file-directory?) (d536e core-prim . create-symbolic-link) (d536d core-prim . rename-file) (d536c core-prim . delete-directory) (d536b core-prim . create-directory) (d536a core-prim . get-environment-variables) (d5369 core-prim . get-environment-variable) (d5368 core-prim . get-timeofday) (d5367 core-prim . get-command-line) (d5366 core-prim . sys-display) (d5365 core-prim . whereis) (d5364 core-prim . register) (d5363 core-prim . vm-join!) (d5362 core-prim . vm-set-value!) (d5361 core-prim . vm?) (d5360 core-prim . main-vm?) (d535f core-prim . vm-eval) (d535e core-prim . vm-self) (d535d core-prim . vm-start!) (d535c core-prim . make-vm) (d535b core-prim . mutex-try-lock!) (d535a core-prim . mutex-unlock!) (d5359 core-prim . mutex-lock!) (d5358 core-prim . mutex?) (d5357 core-prim . make-mutex) (d5356 core-prim . condition-variable-notify-all!) (d5355 core-prim . condition-variable-notify!) (d5354 core-prim . condition-variable-wait!) (d5353 core-prim . make-condition-variable) (d5352 core-prim . mosh-executable-path) (d5351 core-prim . make-file-options) (d5350 core-prim . source-info) (d534f core-prim . make-compiler-instruction) (d534e core-prim . make-instruction) (d534d core-prim . set-source-info!) (d534c core-prim . bignum?) (d534b core-prim . fast-equal?) (d534a core-prim . fasl-read) (d5349 core-prim . fasl-write) (d5348 core-prim . time-usage) (d5347 core-prim . os-constant) (d28bc core-prim . make-parameter) (d5346 core-prim . socket-port) (d5345 core-prim . socket-shutdown) (d5344 core-prim . socket-close) (d5343 core-prim . socket-send) (d5342 core-prim . socket-recv!) (d5341 core-prim . socket-recv) (d5340 core-prim . make-server-socket) (d533f core-prim . make-client-socket) (d533e core-prim . socket-accept) (d533d core-prim . socket?) (d533c core-prim . string-upcase) (d533b core-prim . string-titlecase) (d533a core-prim . string-normalize-nfkd) (d5339 core-prim . string-normalize-nfkc) (d5338 core-prim . string-normalize-nfd) (d5337 core-prim . string-normalize-nfc) (d5336 core-prim . string-foldcase) (d5335 core-prim . string-downcase) (d5334 core-prim . string-ci>?) (d5333 core-prim . string-ci>=?) (d5332 core-prim . string-ci=?) (d5331 core-prim . string-ci<?) (d5330 core-prim . string-ci<=?) (d532f core-prim . char-whitespace?) (d532e core-prim . char-upper-case?) (d532d core-prim . char-title-case?) (d532c core-prim . char-numeric?) (d532b core-prim . char-lower-case?) (d532a core-prim . char-general-category) (d5329 core-prim . char-upcase) (d5328 core-prim . char-titlecase) (d5327 core-prim . char-foldcase) (d5326 core-prim . char-downcase) (d5325 core-prim . char-ci>?) (d5324 core-prim . char-ci>=?) (d5323 core-prim . char-ci=?) (d5322 core-prim . char-ci<?) (d5321 core-prim . char-ci<=?) (d5320 core-prim . char-alphabetic?) (d2e92 core-prim . make-variable-transformer) (d3135 core-prim . identifier?) (d3121 core-prim . generate-temporaries) (d3123 core-prim . free-identifier=?) (d3139 core-prim . syntax->datum) (d3137 core-prim . datum->syntax) (d3125 core-prim . bound-identifier=?) (d531f core-prim . record-type-descriptor?) (d531e core-prim . record-predicate) (d531d core-prim . record-mutator) (d531c core-prim . record-constructor) (d531b core-prim . record-accessor) (d531a core-prim . make-record-type-descriptor) (d5319 core-prim . make-record-constructor-descriptor) (d5318 core-prim . record?) (d5317 core-prim . record-type-uid) (d5316 core-prim . record-type-sealed?) (d5315 core-prim . record-type-parent) (d5314 core-prim . record-type-opaque?) (d5313 core-prim . record-type-name) (d5312 core-prim . record-type-generative?) (d5311 core-prim . record-type-field-names) (d5310 core-prim . record-rtd) (d530f core-prim . record-field-mutable?) (d530e core-prim . delete-file) (d530d core-prim . file-exists?) (d530c core-prim . vector-sort!) (d530b core-prim . vector-sort) (d530a core-prim . list-sort) (d5309 core-prim . symbol-hash) (d5308 core-prim . string-ci-hash) (d5307 core-prim . string-hash) (d5306 core-prim . equal-hash) (d5305 core-prim . hashtable-equivalence-function) (d5304 core-prim . make-hashtable) (d5303 core-prim . hashtable-hash-function) (d5302 core-prim . make-eqv-hashtable) (d5301 core-prim . make-eq-hashtable) (d5300 core-prim . hashtable?) (d52ff core-prim . hashtable-update!) (d52fe core-prim . hashtable-size) (d52fd core-prim . hashtable-set!) (d52fc core-prim . hashtable-ref) (d52fb core-prim . hashtable-mutable?) (d52fa core-prim . hashtable-keys) (d52f9 core-prim . hashtable-entries) (d52f8 core-prim . hashtable-delete!) (d52f7 core-prim . hashtable-copy) (d52f6 core-prim . hashtable-contains?) (d52f5 core-prim . hashtable-clear!) (d52f4 core-prim . call-with-output-file) (d52f3 core-prim . call-with-input-file) (d52f2 core-prim . write-char) (d52f1 core-prim . write) (d52f0 core-prim . with-output-to-file) (d52ef core-prim . with-input-from-file) (d52ee core-prim . read-char) (d52ed core-prim . read) (d52ec core-prim . peek-char) (d52eb core-prim . open-output-file) (d52ea core-prim . open-input-file) (d52e9 core-prim . newline) (d52e8 core-prim . display) (d52e7 core-prim . close-output-port) (d52e6 core-prim . close-input-port) (d52e5 core-prim . eof-object?) (d52e4 core-prim . eof-object) (d52e3 core-prim . current-error-port) (d52e2 core-prim . current-output-port) (d52e1 core-prim . current-input-port) (d52e0 core-prim . output-port?) (d52df core-prim . input-port?) (d52de core-prim . utf-8-codec) (d52dd core-prim . utf-16-codec) (d52dc core-prim . transcoder-error-handling-mode) (d52db core-prim . transcoder-eol-style) (d52da core-prim . transcoder-codec) (d52d9 core-prim . transcoded-port) (d52d8 core-prim . textual-port?) (d52d7 core-prim . string->bytevector) (d52d6 core-prim . standard-output-port) (d52d5 core-prim . standard-input-port) (d52d4 core-prim . standard-error-port) (d52d3 core-prim . set-port-position!) (d52d2 core-prim . put-u8) (d52d1 core-prim . put-string) (d52d0 core-prim . put-datum) (d52cf core-prim . put-char) (d52ce core-prim . put-bytevector) (d52cd core-prim . port?) (d52cc core-prim . port-transcoder) (d52cb core-prim . port-position) (d52ca core-prim . port-has-set-port-position!?) (d52c9 core-prim . port-has-port-position?) (d52c8 core-prim . port-eof?) (d52c7 core-prim . output-port-buffer-mode) (d52c6 core-prim . open-string-output-port) (d52c5 core-prim . open-string-input-port) (d52c4 core-prim . open-file-output-port) (d52c3 core-prim . open-file-input/output-port) (d52c2 core-prim . open-file-input-port) (d52c1 core-prim . open-bytevector-output-port) (d52c0 core-prim . open-bytevector-input-port) (d52bf core-prim . native-transcoder) (d52be core-prim . native-eol-style) (d52bd core-prim . make-transcoder) (d52bc core-prim . latin-1-codec) (d4d8d core-prim . make-i/o-write-error) (d4d78 core-prim . make-i/o-read-error) (d4e2e core-prim . make-i/o-port-error) (d4da4 core-prim . make-i/o-invalid-position-error) (d4dbf core-prim . make-i/o-filename-error) (d4dd8 core-prim . make-i/o-file-protection-error) (d4ded core-prim . make-i/o-file-is-read-only-error) (d4e17 core-prim . make-i/o-file-does-not-exist-error) (d4e02 core-prim . make-i/o-file-already-exists-error) (d4d63 core-prim . make-i/o-error) (d4e5e core-prim . make-i/o-encoding-error) (d4e47 core-prim . make-i/o-decoding-error) (d52bb core-prim . make-custom-textual-output-port) (d52ba core-prim . make-custom-textual-input/output-port) (d52b9 core-prim . make-custom-textual-input-port) (d52b8 core-prim . make-custom-binary-output-port) (d52b7 core-prim . make-custom-binary-input/output-port) (d52b6 core-prim . make-custom-binary-input-port) (d52b5 core-prim . make-bytevector) (d52b4 core-prim . lookahead-u8) (d52b3 core-prim . lookahead-char) (d4d8f core-prim . i/o-write-error?) (d4d7a core-prim . i/o-read-error?) (d4e32 core-prim . i/o-port-error?) (d4da8 core-prim . i/o-invalid-position-error?) (d4dc3 core-prim . i/o-filename-error?) (d4dda core-prim . i/o-file-protection-error?) (d4def core-prim . i/o-file-is-read-only-error?) (d4e19 core-prim . i/o-file-does-not-exist-error?) (d4e04 core-prim . i/o-file-already-exists-error?) (d4d65 core-prim . i/o-error?) (d4daa core-prim . i/o-error-position) (d4e34 core-prim . i/o-error-port) (d4dc5 core-prim . i/o-error-filename) (d4e62 core-prim . i/o-encoding-error?) (d4e64 core-prim . i/o-encoding-error-char) (d4e49 core-prim . i/o-decoding-error?) (d52b2 core-prim . get-u8) (d52b1 core-prim . get-string-n!) (d52b0 core-prim . get-string-n) (d52af core-prim . get-string-all) (d52ae core-prim . get-line) (d52ad core-prim . get-datum) (d52ac core-prim . get-char) (d52ab core-prim . get-bytevector-some) (d52aa core-prim . get-bytevector-n!) (d52a9 core-prim . get-bytevector-n) (d52a8 core-prim . get-bytevector-all) (d52a7 core-prim . flush-output-port) (d52a6 core-prim . close-port) (d310f core-prim . scheme-report-environment) (d52a5 core-prim . quotient) (d310d core-prim . null-environment) (d52a4 core-prim . remainder) (d52a3 core-prim . modulo) (d52a2 core-prim . inexact->exact) (d52a1 core-prim . force) (d52a0 core-prim . exact->inexact) (d529f core-prim . make-promise) (d529e core-prim . exit) (d4f99 core-prim . command-line) (d529d core-prim . string-fill!) (d529c core-prim . string-set!) (d529b core-prim . set-cdr!) (d529a core-prim . set-car!) (d5299 core-prim . remove) (d5298 core-prim . remv) (d5297 core-prim . remp) (d5296 core-prim . remq) (d5295 core-prim . partition) (d5294 core-prim . memv) (d5293 core-prim . memq) (d5292 core-prim . memp) (d5291 core-prim . member) (d5290 core-prim . exists) (d528f core-prim . for-all) (d528e core-prim . fold-right) (d528d core-prim . fold-left) (d528c core-prim . find) (d528b core-prim . filter) (d528a core-prim . cons*) (d5289 core-prim . assv) (d5288 core-prim . assq) (d5287 core-prim . assp) (d5286 core-prim . assoc) (d5285 core-prim . call-with-string-output-port) (d5284 core-prim . call-with-port) (d5283 core-prim . call-with-bytevector-output-port) (d5282 core-prim . bytevector->string) (d5281 core-prim . buffer-mode?) (d5280 core-prim . binary-port?) (d527f core-prim . with-exception-handler) (d527e core-prim . raise-continuable) (d527d core-prim . raise) (d3113 core-prim . eval) (d310b core-prim . environment) (d527c core-prim . make-enumeration) (d527b core-prim . enum-set=?) (d527a core-prim . enum-set-universe) (d5279 core-prim . enum-set-union) (d5278 core-prim . enum-set-subset?) (d5277 core-prim . enum-set-projection) (d5276 core-prim . enum-set-member?) (d5275 core-prim . enum-set-intersection) (d5274 core-prim . enum-set-indexer) (d5273 core-prim . enum-set-difference) (d5272 core-prim . enum-set-constructor) (d5271 core-prim . enum-set-complement) (d5270 core-prim . enum-set->list) (d4cd9 core-prim . who-condition?) (d4c51 core-prim . warning?) (d4c90 core-prim . violation?) (d4d50 core-prim . undefined-violation?) (d4d37 core-prim . syntax-violation?) (d4d3b core-prim . syntax-violation-subform) (d4d39 core-prim . syntax-violation-form) (d3133 core-prim . syntax-violation) (d526f core-prim . simple-conditions) (d4c66 core-prim . serious-condition?) (d4cf0 core-prim . non-continuable-violation?) (d4c3a core-prim . message-condition?) (d4cd5 core-prim . make-who-condition) (d4c4f core-prim . make-warning) (d4c8e core-prim . make-violation) (d4d4e core-prim . make-undefined-violation) (d4d31 core-prim . make-syntax-violation) (d4c64 core-prim . make-serious-condition) (d4cee core-prim . make-non-continuable-violation) (d4c36 core-prim . make-message-condition) (d4d18 core-prim . make-lexical-violation) (d4cba core-prim . make-irritants-condition) (d4d03 core-prim . make-implementation-restriction-violation) (d4c79 core-prim . make-error) (d4ca3 core-prim . make-assertion-violation) (d4d1a core-prim . lexical-violation?) (d4cbe core-prim . irritants-condition?) (d4d05 core-prim . implementation-restriction-violation?) (d4c7b core-prim . error?) (d4cdb core-prim . condition-who) (d526e core-prim . condition-predicate) (d4c3c core-prim . condition-message) (d4cc0 core-prim . condition-irritants) (d526d core-prim . condition-accessor) (d526c core-prim . condition) (d4ca5 core-prim . assertion-violation?) (d526b core-prim . condition?) (d526a core-prim . utf32->string) (d5269 core-prim . utf16->string) (d5268 core-prim . utf8->string) (d5267 core-prim . uint-list->bytevector) (d5266 core-prim . u8-list->bytevector) (d5265 core-prim . string->utf8) (d5264 core-prim . string->utf32) (d5263 core-prim . string->utf16) (d5262 core-prim . sint-list->bytevector) (d5261 core-prim . native-endianness) (d5260 core-prim . bytevector?) (d525f core-prim . bytevector=?) (d525e core-prim . bytevector-uint-set!) (d525d core-prim . bytevector-uint-ref) (d525c core-prim . bytevector-u8-set!) (d525b core-prim . bytevector-u8-ref) (d525a core-prim . bytevector-u64-set!) (d5259 core-prim . bytevector-u64-ref) (d5258 core-prim . bytevector-u64-native-set!) (d5257 core-prim . bytevector-u64-native-ref) (d5256 core-prim . bytevector-u32-set!) (d5255 core-prim . bytevector-u32-ref) (d5254 core-prim . bytevector-u32-native-set!) (d5253 core-prim . bytevector-u32-native-ref) (d5252 core-prim . bytevector-u16-set!) (d5251 core-prim . bytevector-u16-ref) (d5250 core-prim . bytevector-u16-native-set!) (d524f core-prim . bytevector-u16-native-ref) (d524e core-prim . bytevector-sint-set!) (d524d core-prim . bytevector-sint-ref) (d524c core-prim . bytevector-s8-set!) (d524b core-prim . bytevector-s8-ref) (d524a core-prim . bytevector-s64-set!) (d5249 core-prim . bytevector-s64-ref) (d5248 core-prim . bytevector-s64-native-set!) (d5247 core-prim . bytevector-s64-native-ref) (d5246 core-prim . bytevector-s32-set!) (d5245 core-prim . bytevector-s32-ref) (d5244 core-prim . bytevector-s32-native-set!) (d5243 core-prim . bytevector-s32-native-ref) (d5242 core-prim . bytevector-s16-set!) (d5241 core-prim . bytevector-s16-ref) (d5240 core-prim . bytevector-s16-native-set!) (d523f core-prim . bytevector-s16-native-ref) (d523e core-prim . bytevector-length) (d523d core-prim . bytevector-ieee-single-ref) (d523c core-prim . bytevector-ieee-single-set!) (d523b core-prim . bytevector-ieee-single-native-set!) (d523a core-prim . bytevector-ieee-single-native-ref) (d5239 core-prim . bytevector-ieee-double-set!) (d5238 core-prim . bytevector-ieee-double-ref) (d5237 core-prim . bytevector-ieee-double-native-set!) (d5236 core-prim . bytevector-ieee-double-native-ref) (d5235 core-prim . bytevector-fill!) (d5234 core-prim . bytevector-copy!) (d5233 core-prim . bytevector-copy) (d5232 core-prim . bytevector->uint-list) (d5231 core-prim . bytevector->u8-list) (d5230 core-prim . bytevector->sint-list) (d4e8e core-prim . no-nans-violation?) (d4e79 core-prim . no-infinities-violation?) (d4e8c core-prim . make-no-nans-violation) (d4e77 core-prim . make-no-infinities-violation) (d522f core-prim . real->flonum) (d522e core-prim . flzero?) (d522d core-prim . fltruncate) (d522c core-prim . fltan) (d522b core-prim . flsqrt) (d522a core-prim . flsin) (d5229 core-prim . flround) (d5228 core-prim . flpositive?) (d5227 core-prim . flonum?) (d5226 core-prim . flodd?) (d5225 core-prim . flnumerator) (d5224 core-prim . flnegative?) (d5223 core-prim . flnan?) (d5222 core-prim . flmod0) (d5221 core-prim . flmod) (d5220 core-prim . flmin) (d521f core-prim . flmax) (d521e core-prim . fllog) (d521d core-prim . flinteger?) (d521c core-prim . flinfinite?) (d521b core-prim . flfloor) (d521a core-prim . flfinite?) (d5219 core-prim . flexpt) (d5218 core-prim . flexp) (d5217 core-prim . fleven?) (d5216 core-prim . fldiv0-and-mod0) (d5215 core-prim . fldiv0) (d5214 core-prim . fldiv-and-mod) (d5213 core-prim . fldiv) (d5212 core-prim . fldenominator) (d5211 core-prim . flcos) (d5210 core-prim . flceiling) (d520f core-prim . flatan) (d520e core-prim . flasin) (d520d core-prim . flacos) (d520c core-prim . flabs) (d520b core-prim . fl>?) (d520a core-prim . fl>=?) (d5209 core-prim . fl=?) (d5208 core-prim . fl<?) (d5207 core-prim . fl<=?) (d5206 core-prim . fl/) (d5205 core-prim . fl-) (d5204 core-prim . fl+) (d5203 core-prim . fl*) (d5202 core-prim . fixnum->flonum) (d5201 core-prim . fxzero?) (d5200 core-prim . fxxor) (d51ff core-prim . fxrotate-bit-field) (d51fe core-prim . fxreverse-bit-field) (d51fd core-prim . fxpositive?) (d51fc core-prim . fxodd?) (d51fb core-prim . fxnot) (d51fa core-prim . fxnegative?) (d51f9 core-prim . fxmod0) (d51f8 core-prim . fxmod) (d51f7 core-prim . fxmin) (d51f6 core-prim . fxmax) (d51f5 core-prim . fxlength) (d51f4 core-prim . fxior) (d51f3 core-prim . fxif) (d51f2 core-prim . fxfirst-bit-set) (d51f1 core-prim . fxeven?) (d51f0 core-prim . fxdiv0-and-mod0) (d51ef core-prim . fxdiv0) (d51ee core-prim . fxdiv-and-mod) (d51ed core-prim . fxdiv) (d51ec core-prim . fxcopy-bit-field) (d51eb core-prim . fxcopy-bit) (d51ea core-prim . fxbit-set?) (d51e9 core-prim . fxbit-field) (d51e8 core-prim . fxbit-count) (d51e7 core-prim . fxarithmetic-shift-right) (d51e6 core-prim . fxarithmetic-shift-left) (d51e5 core-prim . fxarithmetic-shift) (d51e4 core-prim . fxand) (d51e3 core-prim . fx>?) (d51e2 core-prim . fx>=?) (d51e1 core-prim . fx=?) (d51e0 core-prim . fx<?) (d51df core-prim . fx<=?) (d51de core-prim . fx-/carry) (d51dd core-prim . fx-) (d51dc core-prim . fx+/carry) (d51db core-prim . fx+) (d51da core-prim . fx*/carry) (d51d9 core-prim . fx*) (d51d8 core-prim . greatest-fixnum) (d51d7 core-prim . least-fixnum) (d51d6 core-prim . fixnum-width) (d51d5 core-prim . fixnum?) (d51d4 core-prim . bitwise-rotate-bit-field) (d51d3 core-prim . bitwise-reverse-bit-field) (d51d2 core-prim . bitwise-length) (d51d1 core-prim . bitwise-if) (d51d0 core-prim . bitwise-first-bit-set) (d51cf core-prim . bitwise-copy-bit-field) (d51ce core-prim . bitwise-copy-bit) (d51cd core-prim . bitwise-bit-set?) (d51cc core-prim . bitwise-bit-field) (d51cb core-prim . bitwise-bit-count) (d51ca core-prim . bitwise-xor) (d51c9 core-prim . bitwise-ior) (d51c8 core-prim . bitwise-and) (d51c7 core-prim . bitwise-not) (d51c6 core-prim . bitwise-arithmetic-shift-right) (d51c5 core-prim . bitwise-arithmetic-shift-left) (d51c4 core-prim . bitwise-arithmetic-shift) (d51c3 core-prim . zero?) (d51c2 core-prim . vector?) (d51c1 core-prim . vector-set!) (d51c0 core-prim . vector-ref) (d51bf core-prim . vector-map) (d51be core-prim . vector-length) (d51bd core-prim . vector-for-each) (d51bc core-prim . vector-fill!) (d51bb core-prim . vector->list) (d51ba core-prim . vector) (d51b9 core-prim . values) (d51b8 core-prim . truncate) (d51b7 core-prim . tan) (d51b6 core-prim . symbol?) (d51b5 core-prim . symbol=?) (d51b4 core-prim . symbol->string) (d51b3 core-prim . substring) (d51b2 core-prim . string?) (d51b1 core-prim . string>?) (d51b0 core-prim . string>=?) (d51af core-prim . string=?) (d51ae core-prim . string<?) (d51ad core-prim . string<=?) (d51ac core-prim . string-ref) (d51ab core-prim . string-length) (d51aa core-prim . string-for-each) (d51a9 core-prim . string-copy) (d51a8 core-prim . string-append) (d51a7 core-prim . string->symbol) (d51a6 core-prim . string->number) (d51a5 core-prim . string->list) (d51a4 core-prim . string) (d51a3 core-prim . sqrt) (d51a2 core-prim . sin) (d51a1 core-prim . round) (d51a0 core-prim . reverse) (d519f core-prim . real?) (d519e core-prim . real-valued?) (d519d core-prim . real-part) (d519c core-prim . rationalize) (d519b core-prim . rational?) (d519a core-prim . rational-valued?) (d5199 core-prim . procedure?) (d5198 core-prim . positive?) (d5197 core-prim . pair?) (d5196 core-prim . odd?) (d5195 core-prim . numerator) (d5194 core-prim . number?) (d5193 core-prim . number->string) (d5192 core-prim . null?) (d5191 core-prim . not) (d5190 core-prim . negative?) (d518f core-prim . nan?) (d518e core-prim . min) (d518d core-prim . max) (d518c core-prim . map) (d518b core-prim . make-vector) (d518a core-prim . make-string) (d5189 core-prim . make-rectangular) (d5188 core-prim . make-polar) (d5187 core-prim . magnitude) (d5186 core-prim . log) (d5185 core-prim . list?) (d5184 core-prim . list-tail) (d5183 core-prim . list-ref) (d5182 core-prim . list->vector) (d5181 core-prim . list->string) (d5180 core-prim . list) (d517f core-prim . length) (d517e core-prim . lcm) (d517d core-prim . integer?) (d517c core-prim . integer-valued?) (d517b core-prim . integer->char) (d517a core-prim . infinite?) (d5179 core-prim . inexact?) (d5178 core-prim . inexact) (d5177 core-prim . imag-part) (d5176 core-prim . gcd) (d5175 core-prim . for-each) (d5174 core-prim . floor) (d5173 core-prim . finite?) (d5172 core-prim . expt) (d5171 core-prim . exp) (d5170 core-prim . exact?) (d516f core-prim . exact-integer-sqrt) (d516e core-prim . exact) (d516d core-prim . even?) (d516c core-prim . error) (d516b core-prim . eqv?) (d516a core-prim . equal?) (d5169 core-prim . eq?) (d5168 core-prim . dynamic-wind) (d5167 core-prim . div0-and-mod0) (d5166 core-prim . mod0) (d5165 core-prim . div0) (d5164 core-prim . div-and-mod) (d5163 core-prim . mod) (d5162 core-prim . div) (d5161 core-prim . denominator) (d5160 core-prim . cos) (d515f core-prim . cons) (d515e core-prim . complex?) (d515d core-prim . char?) (d515c core-prim . char>?) (d515b core-prim . char>=?) (d515a core-prim . char=?) (d5159 core-prim . char<?) (d5158 core-prim . char<=?) (d5157 core-prim . char->integer) (d5156 core-prim . ceiling) (d5155 core-prim . call-with-values) (d5154 core-prim . call/cc) (d5153 core-prim . call-with-current-continuation) (d5152 core-prim . cddddr) (d5151 core-prim . cdddar) (d5150 core-prim . cddadr) (d514f core-prim . cddaar) (d514e core-prim . cdaddr) (d514d core-prim . cdadar) (d514c core-prim . cdaadr) (d514b core-prim . cdaaar) (d514a core-prim . cadddr) (d5149 core-prim . caddar) (d5148 core-prim . cadadr) (d5147 core-prim . cadaar) (d5146 core-prim . caaddr) (d5145 core-prim . caadar) (d5144 core-prim . caaadr) (d5143 core-prim . caaaar) (d5142 core-prim . cdddr) (d5141 core-prim . cddar) (d5140 core-prim . cdadr) (d513f core-prim . cdaar) (d513e core-prim . caddr) (d513d core-prim . cadar) (d513c core-prim . caadr) (d513b core-prim . caaar) (d513a core-prim . cddr) (d5139 core-prim . cdar) (d5138 core-prim . cadr) (d5137 core-prim . caar) (d5136 core-prim . cdr) (d5135 core-prim . car) (d5134 core-prim . boolean?) (d5133 core-prim . boolean=?) (d5132 core-prim . atan) (d5131 core-prim . assertion-violation) (d312d core-prim . assertion-error) (d5130 core-prim . asin) (d512f core-prim . apply) (d512e core-prim . append) (d512d core-prim . angle) (d512c core-prim . acos) (d512b core-prim . abs) (d512a core-prim . /) (d5129 core-prim . *) (d5128 core-prim . -) (d5127 core-prim . +) (d5126 core-prim . >=) (d5125 core-prim . >) (d5124 core-prim . =) (d5123 core-prim . <=) (d5122 core-prim . <) (d5121 core-prim . library) (d5120 $core-rtd &no-nans-rtd &no-nans-rcd) (d511f $core-rtd &no-infinities-rtd &no-infinities-rcd) (d511e $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (d511d $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (d511c $core-rtd &i/o-port-rtd &i/o-port-rcd) (d511b $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (d511a $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (d5119 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (d5118 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (d5117 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (d5116 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (d5115 $core-rtd &i/o-write-rtd &i/o-write-rcd) (d5114 $core-rtd &i/o-read-rtd &i/o-read-rcd) (d5113 $core-rtd &i/o-rtd &i/o-rcd) (d5112 $core-rtd &undefined-rtd &undefined-rcd) (d5111 $core-rtd &syntax-rtd &syntax-rcd) (d5110 $core-rtd &lexical-rtd &lexical-rcd) (d510f $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (d510e $core-rtd &non-continuable-rtd &non-continuable-rcd) (d510d $core-rtd &who-rtd &who-rcd) (d510c $core-rtd &irritants-rtd &irritants-rcd) (d510b $core-rtd &assertion-rtd &assertion-rcd) (d510a $core-rtd &violation-rtd &violation-rcd) (d5109 $core-rtd &error-rtd &error-rcd) (d5108 $core-rtd &serious-rtd &serious-rcd) (d5107 $core-rtd &warning-rtd &warning-rcd) (d5106 $core-rtd &message-rtd &message-rcd) (d5105 $core-rtd &condition-rtd &condition-rcd) (d5104 macro . define-condition-type) (d5103 macro . define-enumeration) (d5102 macro . define-record-type) (d5101 macro . parent-rtd) (d5100 macro . nongenerative) (d50ff macro . opaque) (d50fe macro . sealed) (d50fd macro . protocol) (d50fc macro . parent) (d50fb macro . immutable) (d50fa macro . mutable) (d50f9 macro . fields) (d50f8 macro . error-handling-mode) (d50f7 macro . file-options) (d50f6 macro . buffer-mode) (d50f5 macro . eol-style) (d50f4 macro . guard) (d50f3 macro . trace-define) (d50f2 macro . trace-lambda) (d50f1 macro . unsyntax-splicing) (d50f0 macro . unsyntax) (d50ef macro . unquote-splicing) (d50ee macro . unquote) (d50ed macro . _) (d50ec macro . else) (d50eb macro . =>) (d50ea macro . ...) (d50e9 macro . assert) (d50e8 macro . endianness) (d50e7 macro . delay) (d50e6 macro . time) (d50e5 macro . do) (d50e4 macro . cond) (d50e3 macro . let*) (d50e2 macro . let) (d50e1 macro . let*-values) (d50e0 macro . let-values) (d50df macro . identifier-syntax) (d50de macro . with-syntax) (d50dd macro . quasisyntax) (d50dc macro . quasiquote) (d50db macro . syntax-rules) (d50da macro . include) (d50d9 macro . define-struct) (d50d8 core-macro . record-constructor-descriptor) (d50d7 core-macro . record-type-descriptor) (d50d6 macro . case) (d50d5 macro . parameterize) (d50d4 macro . unless) (d50d3 macro . when) (d50d2 core-macro . or) (d50d1 core-macro . and) (d50d0 core-macro . if) (d50cf core-macro . letrec*) (d50ce core-macro . letrec) (d50cd core-macro . type-descriptor) (d50cc core-macro . case-lambda) (d50cb core-macro . lambda) (d50ca core-macro . syntax) (d50c9 core-macro . syntax-case) (d50c8 core-macro . quote) (d50c7 core-macro . foreign-call) (d50c6 letrec-syntax) (d50c5 let-syntax) (d50c4 set!) (d50c3 import) (d50c2 begin) (d50c1 module) (d50c0 define-syntax) (d50bf define)) values values '#f '#f '#f '#f) (d2c8f@d2ad0@install-library 'd53fd '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . d53dc) (eval-core . d53db) (set-symbol-value! . d53da) (symbol-value . d53d9) (gensym . d53d8) (void . d53d7)) '() values values '#f '#f '#f '#f) (d2c8f@d2ad0@install-library 'd53fe '(mosh) '() '() '() '() '((set-symbol-value! . d53da) (symbol-value . d53d9) (regexp? . d53d5) (read-line . d53d4) (ungensym . d53d3) (alist->eq-hash-table . d53d2) (assoc-ref . d53d1) (print . d53d0) (format . d53cf) (host-os . d53ce) (library-path . d2aaf) (standard-library-path . d53cd) (file-newer? . d53cc) (stat-mtime . d53cb) (digit->integer . d53c7) (call-with-string-input-port . d53c6) (call-with-string-io . d53c5) (string-split . d53c4) (bytevector-for-each . d53c3) (string->regexp . d53c2) (rxmatch . d53c1) (regexp-replace-all . d53c0) (hashtable-for-each . d53bf) (set-current-directory! . d53ba) (expand-path . d53b9) (current-directory . d53b8) (p . d537b) (get-timeofday . d5368) (get-command-line . d5367) (sys-display . d5366) (whereis . d5365) (register . d5364) (vm-join! . d5363) (vm-set-value! . d5362) (vm? . d5361) (main-vm? . d5360) (vm-eval . d535f) (vm-self . d535e) (vm-start! . d535d) (make-vm . d535c) (mutex-try-lock! . d535b) (mutex-unlock! . d535a) (mutex-lock! . d5359) (mutex? . d5358) (make-mutex . d5357) (condition-variable-notify-all! . d5356) (condition-variable-notify! . d5355) (condition-variable-wait! . d5354) (make-condition-variable . d5353) (mosh-executable-path . d5352) (make-file-options . d5351) (source-info . d5350) (make-compiler-instruction . d534f) (make-instruction . d534e) (set-source-info! . d534d) (bignum? . d534c) (fast-equal? . d534b) (fasl-read . d534a) (fasl-write . d5349) (time-usage . d5348) (os-constant . d5347) (time . d50e6) (include . d50da)) '() values values '#f '#f '#f '#f) (d2c8f@d2ad0@install-library 'd53ff '(system) '() '() '() '() '((write-to-file . d53ca) (file->list . d53c9) (file->string . d53c8) (call-process . d53be) (local-tz-offset . d53bd) (microseconds . d53bc) (directory-list . d53bb) (expand-path . d53b9) (%spawn . d53b7) (%waitpid . d53b6) (simple-struct-name . d53b5) (simple-struct-set! . d53b4) (simple-struct-ref . d53b3) (make-simple-struct . d53b2) (simple-struct? . d53b1) (pointer-ref-c-int64 . d53b0) (pointer-ref-c-int32 . d53af) (pointer-ref-c-int16 . d53ae) (pointer-ref-c-int8 . d53ad) (pointer-ref-c-uint64 . d53ac) (pointer-ref-c-uint32 . d53ab) (pointer-ref-c-uint16 . d53aa) (pointer-ref-c-uint8 . d53a9) (pointer-set-c-uint64! . d53a8) (pointer-set-c-uint32! . d53a7) (pointer-set-c-uint16! . d53a6) (pointer-set-c-uint8! . d53a5) (pointer-set-c-int64! . d53a4) (pointer-set-c-int32! . d53a3) (pointer-set-c-int16! . d53a2) (pointer-set-c-int8! . d53a1) (pointer-set-c-pointer! . d53a0) (pointer-set-c-double! . d539f) (pointer-set-c-float! . d539e) (pointer-set-c-long-long! . d539d) (pointer-set-c-long! . d539c) (pointer-set-c-int! . d539b) (pointer-set-c-short! . d539a) (pointer-set-c-char! . d5399) (pointer-ref-c-pointer . d5398) (pointer-ref-c-double . d5397) (pointer-ref-c-float . d5396) (pointer-ref-c-unsigned-long-long . d5395) (pointer-ref-c-signed-long-long . d5394) (pointer-ref-c-unsigned-long . d5393) (pointer-ref-c-signed-long . d5392) (pointer-ref-c-unsigned-int . d5391) (pointer-ref-c-signed-int . d5390) (pointer-ref-c-unsigned-short . d538f) (pointer-ref-c-signed-short . d538e) (pointer-ref-c-unsigned-char . d538d) (pointer-ref-c-signed-char . d538c) (pointer->integer . d538b) (integer->pointer . d538a) (pointer? . d5389) (shared-errno . d5388) (%ffi-supported? . d5387) (%ffi-pointer->string . d5386) (%ffi-call->string-or-zero . d5385) (%ffi-call->double . d5384) (%ffi-call->void* . d5383) (%ffi-call->void . d5382) (%ffi-call->char . d5381) (%ffi-call->int . d5380) (%ffi-lookup . d537f) (%ffi-open . d537e) (%fork . d537d) (%pipe . d537c) (open-output-string . d537a) (get-output-string . d5379) (file-stat-ctime . d5378) (file-stat-atime . d5377) (file-stat-mtime . d5376) (file-size-in-bytes . d5375) (file-writable? . d5374) (file-executable? . d5373) (file-readable? . d5372) (file-regular? . d5371) (file-symbolic-link? . d5370) (file-directory? . d536f) (create-symbolic-link . d536e) (rename-file . d536d) (delete-directory . d536c) (create-directory . d536b) (get-environment-variables . d536a) (get-environment-variable . d5369) (make-parameter . d28bc) (socket-port . d5346) (socket-shutdown . d5345) (socket-close . d5344) (socket-send . d5343) (socket-recv! . d5342) (socket-recv . d5341) (make-server-socket . d5340) (make-client-socket . d533f) (socket-accept . d533e) (socket? . d533d) (parameterize . d50d5)) '() values values '#f '#f '#f '#f))
((lambda (d4f88@add-library-path! d4f8a@parse-and-add-library-path d4f8c@for-each-with-index d4f8e@rpad d4f90@condition-printer d4f92@record->field-alist d4f94@map-with-index d4f96@repl d4f98@trace-printer d4f9a@command-line d4f9c@local-library-path d4f9e@load/args d4fa0@load d4fa2@ironscheme-build d4fa4@eval-top-level d4fa6@compile-system-libraries d4fa8@compile d4faa@compile->closure d4fac@pre-compile-r6rs-file d4fae@load-r6rs-top-level d4fb0@load-r6rs-top-level-sexp) (begin (set! d4f88@add-library-path! (lambda (d4fd3@path) (d2c7f@d2ab0@library-path (append (d2c7f@d2ab0@library-path) (list d4fd3@path))))) (set! d4f8a@parse-and-add-library-path (lambda (d4fd5@paths d4fd6@message) ((lambda (d4fd9@t) (if d4fd9@t ((lambda (d4fdb@paths) (for-each (lambda (d4fdd@path) (if (file-exists? d4fdd@path) (d4f88@add-library-path! (expand-path d4fdd@path)) (format (current-error-port) d4fd6@message d4fdd@path))) (string-split d4fdb@paths '#\:))) d4fd9@t) (void))) d4fd5@paths))) (set! d4f8c@for-each-with-index (lambda (d4fdf@proc d4fe0@lst) (letrec ((d4fe3@loop (lambda (d4fe5@i d4fe6@lst) (if (null? d4fe6@lst) (if '#f '#f (void)) (begin (d4fdf@proc d4fe5@i (car d4fe6@lst)) (d4fe3@loop (+ d4fe5@i '1) (cdr d4fe6@lst))))))) (d4fe3@loop '1 d4fe0@lst)))) (set! d4f8e@rpad (lambda (d4fe9@str d4fea@pad d4feb@n) ((lambda (d4fef@rest) ((letrec ((d4ff1@loop (lambda (d4ff3@rest d4ff4@ret) (if (<= d4ff3@rest '0) d4ff4@ret (d4ff1@loop (- d4ff3@rest '1) (string-append d4ff4@ret d4fea@pad)))))) d4ff1@loop) d4fef@rest (format '"~a" d4fe9@str))) (- d4feb@n (string-length (format '"~a" d4fe9@str)))))) (set! d4f90@condition-printer (lambda (d4ff7@e d4ff8@port) ((lambda (d4ffc@max-condition-len) (begin (set! d4ffc@max-condition-len (apply max (map (lambda (d500d@c) (string-length (symbol->string (record-type-name (record-rtd d500d@c))))) (simple-conditions d4ff7@e)))) (begin (display '" Condition components:\n" d4ff8@port) (d4f8c@for-each-with-index (lambda (d4ffd@i d4ffe@x) ((lambda (d5001@rtd d5002@fields-alist) (begin (format d4ff8@port '" ~d. ~a" d4ffd@i (d4f8e@rpad (symbol->string (record-type-name d5001@rtd)) '" " d4ffc@max-condition-len)) (if (null? d5002@fields-alist) (newline d4ff8@port) (void)) ((letrec ((d5005@loop (lambda (d5007@first d5008@fields-alist) (if (null? d5008@fields-alist) '() ((lambda (d500b@field) (begin (if (not d5007@first) (display (d4f8e@rpad '"" '" " (+ '4 d4ffc@max-condition-len)) d4ff8@port) (void)) (display '"       " d4ff8@port) (display (car d500b@field) d4ff8@port) (display '": " d4ff8@port) (write (cdr d500b@field) d4ff8@port) (newline d4ff8@port) (d5005@loop '#f (cdr d5008@fields-alist)))) (car d5008@fields-alist)))))) d5005@loop) '#t d5002@fields-alist))) (record-rtd d4ffe@x) (d4f92@record->field-alist d4ffe@x))) (simple-conditions d4ff7@e))))) '#f))) (set! d4f92@record->field-alist (lambda (d500f@r) ((lambda (d5012@ref) (begin (set! d5012@ref (lambda (d501d@rtd d501e@i d501f@x) ((lambda (d5023@val) (if (symbol? d5023@val) (ungensym d5023@val) d5023@val)) ((record-accessor d501d@rtd d501e@i) d501f@x)))) ((letrec ((d5013@loop (lambda (d5015@ret d5016@rtd) (if d5016@rtd (d5013@loop (append d5015@ret (d4f94@map-with-index (lambda (d5019@i d501a@field) (cons d501a@field (d5012@ref d5016@rtd d5019@i d500f@r))) (vector->list (record-type-field-names d5016@rtd)))) (record-type-parent d5016@rtd)) d5015@ret)))) d5013@loop) '() (record-rtd d500f@r)))) '#f))) (set! d4f94@map-with-index (lambda (d5025@proc d5026@lst) ((letrec ((d5029@loop (lambda (d502b@i d502c@lst d502d@ret) (if (null? d502c@lst) (reverse d502d@ret) (d5029@loop (+ d502b@i '1) (cdr d502c@lst) (cons (d5025@proc d502b@i (car d502c@lst)) d502d@ret)))))) d5029@loop) '0 d5026@lst '()))) (set! d4f96@repl (lambda d5031@x ((lambda (d5034@rec) (begin (set! d5034@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (d5037@d5035) (lambda () (with-exception-handler (lambda (d5039@e) ((call/cc (lambda (d503b@d5036) (d5037@d5035 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? d5039@e) (d4f90@condition-printer d5039@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" d5039@e))) (d503b@d5036 (lambda () (raise-continuable d5039@e)))))))))) (lambda () ((letrec ((d503d@loop (lambda (d503f@line d5040@accum) ((lambda (d5044@parentheses-ok? d5046@eval-string-print) (begin (set! d5044@parentheses-ok? (lambda (d504b@text) ((letrec ((d504d@loop (lambda (d504f@chars d5050@p0 d5051@p1) (if (null? d504f@chars) (= '0 d5050@p0 d5051@p1) ((lambda (d5055@t) (if (memv d5055@t '(#\()) (d504d@loop (cdr d504f@chars) (+ d5050@p0 '1) d5051@p1) (if (memv d5055@t '(#\))) (d504d@loop (cdr d504f@chars) (- d5050@p0 '1) d5051@p1) (if (memv d5055@t '(#\[)) (d504d@loop (cdr d504f@chars) d5050@p0 (+ d5051@p1 '1)) (if (memv d5055@t '(#\])) (d504d@loop (cdr d504f@chars) d5050@p0 (- d5051@p1 '1)) (d504d@loop (cdr d504f@chars) d5050@p0 d5051@p1)))))) (car d504f@chars)))))) d504d@loop) (string->list d504b@text) '0 '0))) (set! d5046@eval-string-print (lambda (d5049@text) (if (not (or (string=? '"\n" d5049@text) (= '0 (string-length d5049@text)))) (write (d4fa4@eval-top-level (call-with-port (open-string-input-port d5049@text) read))) (void)))) (if (eof-object? d503f@line) (begin (d5046@eval-string-print d5040@accum) (exit)) ((lambda (d5047@current) (if (d5044@parentheses-ok? d5047@current) (d5046@eval-string-print d5047@current) (d503d@loop (get-line (current-input-port)) d5047@current))) (string-append d5040@accum d503f@line))))) '#f '#f)))) d503d@loop) (get-line (current-input-port)) '""))))))) (newline) (d5034@rec)))) (d5034@rec))) '#f))) (set! d4f98@trace-printer (d29c1@d28bd@make-parameter write)) (set! d4f9a@command-line (d29c1@d28bd@make-parameter (get-command-line))) (set! d4f9c@local-library-path (lambda (d5057@filename) (d2c7f@d2ab0@library-path))) (set! d4f9e@load/args (lambda (d5059@filename . d505b@args) (begin (apply d4fae@load-r6rs-top-level d5059@filename 'load d505b@args) (void)))) (set! d4fa0@load (lambda (d505d@filename) (begin (apply d4fae@load-r6rs-top-level d505d@filename 'load (d4f9a@command-line)) (void)))) (set! d4fa2@ironscheme-build (lambda () (d4fa0@load '"ironscheme-buildscript.ss"))) (set! d4fa4@eval-top-level (lambda (d505f@x) (d4bb4@d3114@eval d505f@x (d4bca@d3140@interaction-environment)))) (set! d4fa6@compile-system-libraries (lambda () (d4fa4@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! d4fa8@compile (lambda (d5061@filename) (d4fae@load-r6rs-top-level d5061@filename 'compile))) (set! d4faa@compile->closure (lambda (d5063@filename) (d4fae@load-r6rs-top-level d5063@filename 'closure))) (set! d4fac@pre-compile-r6rs-file (lambda (d5065@filename) (d4fae@load-r6rs-top-level d5065@filename 'compile))) (set! d4fae@load-r6rs-top-level (lambda (d5067@filename d5068@how . d506b@args) ((lambda (d5071@d506e d5072@d5070) ((lambda (d5075@swap) (dynamic-wind d5075@swap (lambda () ((lambda (d5077@x*) ((lambda (d5079@t) (if (memv d5079@t '(closure)) (d4bc9@d313e@pre-compile-r6rs-top-level d5077@x*) (if (memv d5079@t '(load)) ((lambda (d507f@d507c d5080@d507e) ((lambda (d5083@swap) (dynamic-wind d5083@swap (lambda () ((d4bc8@d313c@compile-r6rs-top-level d5077@x*))) d5083@swap)) (lambda () ((lambda (d5085@t) (begin (d507f@d507c d5080@d507e) (set! d5080@d507e d5085@t))) (d507f@d507c))))) d4f9a@command-line (cons d5067@filename (car d506b@args))) (if (memv d5079@t '(compile)) (begin (d4bc8@d313c@compile-r6rs-top-level d5077@x*) (d2c83@d2ab8@serialize-all d29bc@d28b3@serialize-library d2a17@d29d0@compile-core-expr)) (if '#f '#f (void)))))) d5068@how)) (with-input-from-file d5067@filename (lambda () ((letrec ((d5087@f (lambda () ((lambda (d5089@x) (if (eof-object? d5089@x) '() (cons d5089@x (d5087@f)))) (d29b4@d28a3@read-annotated))))) d5087@f)))))) d5075@swap)) (lambda () ((lambda (d508b@t) (begin (d5071@d506e d5072@d5070) (set! d5072@d5070 d508b@t))) (d5071@d506e))))) d2c7f@d2ab0@library-path (d4f9c@local-library-path d5067@filename)))) (set! d4fb0@load-r6rs-top-level-sexp (lambda (d508d@import-spec d508e@thunk) ((lambda (d5095@d5092 d5096@d5094) ((lambda (d5099@swap) (dynamic-wind d5099@swap (lambda () ((lambda (d509f@d509c d50a0@d509e) ((lambda (d50a3@swap) (dynamic-wind d50a3@swap (lambda () ((d4bc8@d313c@compile-r6rs-top-level (list (cons 'import d508d@import-spec) (list d508e@thunk))))) d50a3@swap)) (lambda () ((lambda (d50a5@t) (begin (d509f@d509c d50a0@d509e) (set! d50a0@d509e d50a5@t))) (d509f@d509c))))) d4f9a@command-line '())) d5099@swap)) (lambda () ((lambda (d50a7@t) (begin (d5095@d5092 d5096@d5094) (set! d5096@d5094 d50a7@t))) (d5095@d5092))))) d2c7f@d2ab0@library-path (d4f9c@local-library-path '"")))) (begin (set! d50bd@d4fb0@load-r6rs-top-level-sexp d4fb0@load-r6rs-top-level-sexp) (set! d50bc@d4fae@load-r6rs-top-level d4fae@load-r6rs-top-level) (set! d50bb@d4fac@pre-compile-r6rs-file d4fac@pre-compile-r6rs-file) (set! d50ba@d4faa@compile->closure d4faa@compile->closure) (set! d50b9@d4fa8@compile d4fa8@compile) (set! d50b8@d4fa6@compile-system-libraries d4fa6@compile-system-libraries) (set! d50b7@d4fa4@eval-top-level d4fa4@eval-top-level) (set! d50b6@d4fa2@ironscheme-build d4fa2@ironscheme-build) (set! d50b5@d4fa0@load d4fa0@load) (set! d50b4@d4f9e@load/args d4f9e@load/args) (set! d50b3@d4f9c@local-library-path d4f9c@local-library-path) (set! d50b2@d4f9a@command-line d4f9a@command-line) (set! d50b1@d4f98@trace-printer d4f98@trace-printer) (set! d50b0@d4f96@repl d4f96@repl) (set! d50af@d4f94@map-with-index d4f94@map-with-index) (set! d50ae@d4f92@record->field-alist d4f92@record->field-alist) (set! d50ad@d4f90@condition-printer d4f90@condition-printer) (set! d50ac@d4f8e@rpad d4f8e@rpad) (set! d50ab@d4f8c@for-each-with-index d4f8c@for-each-with-index) (set! d50aa@d4f8a@parse-and-add-library-path d4f8a@parse-and-add-library-path) (set! d50a9@d4f88@add-library-path! d4f88@add-library-path!) (d2c84@d2aba@current-precompiled-library-loader d29bd@d28b5@load-serialized-library) (set-symbol-value! 'load d4fa0@load) (set-symbol-value! 'pre-compile-r6rs-file d4fac@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs d4fa4@eval-top-level) (set-symbol-value! 'int-env-syms d4bab@d3102@interaction-environment-symbols) (set-symbol-value! 'expanded2core d2a16@d29ce@expanded->core) (set-symbol-value! 'trace-printer d4f98@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (d4fb1@c) (condition (d4ee5@d4cef@make-non-continuable-violation) (d4edb@d4cd6@make-who-condition 'raise) (d4e9f@d4c37@make-message-condition '"returned from non-continuable exception") (d4ed1@d4cbb@make-irritants-condition (list d4fb1@c))))) (d4f8a@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (d4f8a@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (d4f88@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (d4f88@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (d4f88@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (d4fb3@prefix) (d2c80@d2ab2@library-extensions (d4fb3@prefix '".mosh" (d2c80@d2ab2@library-extensions)))) (lambda (d4fb5@ext d4fb6@ls) (append (map (lambda (d4fb9@x) (string-append d4fb5@ext d4fb9@x)) d4fb6@ls) d4fb6@ls))) ((lambda (d4fbb@args d4fbc@port) ((lambda (d4fc0@ref) (begin (set! d4fc0@ref (lambda (d4fcb@rtd d4fcc@i d4fcd@x) ((lambda (d4fd1@val) (if (symbol? d4fd1@val) (ungensym d4fd1@val) d4fd1@val)) ((record-accessor d4fcb@rtd d4fcc@i) d4fcd@x)))) (with-exception-handler (lambda (d4fc1@c) (if (condition? d4fc1@c) (d4f90@condition-printer d4fc1@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" d4fc1@c))) (lambda () (if ((call/cc (lambda (d4fc5@d4fc3) (lambda () (with-exception-handler (lambda (d4fc7@c) ((call/cc (lambda (d4fc9@d4fc4) (d4fc5@d4fc3 (lambda () (if '#t '#f (d4fc9@d4fc4 (lambda () (raise-continuable d4fc7@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (d4fb0@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? d4fbb@args) (d4f96@repl) (d4fae@load-r6rs-top-level (car d4fbb@args) 'load (cdr d4fbb@args)))))))) '#f)) (d4f9a@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
