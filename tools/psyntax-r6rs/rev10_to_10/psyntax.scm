;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! j28c9@library-file-path->cache-path (unspecified)) (set! j28cb@read-annotated (unspecified)) (set! j28cd@annotation-stripped (unspecified)) (set! j28cf@annotation? (unspecified)) (set! j28d1@annotation-source (unspecified)) (set! j28d3@annotation-expression (unspecified)) (set! j28d5@scm->fasl (unspecified)) (set! j28d7@fasl-save (unspecified)) (set! j28d9@fasl-load (unspecified)) (set! j28db@verbose? (unspecified)) (set! j28dd@serialize-library (unspecified)) (set! j28df@load-serialized-library (unspecified)) (set! j28e1@make-record-printer (unspecified)) (set! j28e3@compile-core (unspecified)) (set! j28e5@read-library-source-file (unspecified)) (set! j28e7@make-parameter (unspecified)) (set! j28e9@mosh-cache-dir (unspecified)) (set! j297f@file-options-spec (unspecified)) (set! j28c9@library-file-path->cache-path (lambda (j2980@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j2986@j2983 j2987@j2985) (let ((j298a@extract j2987@j2985) (j298b@p j2986@j2983)) (let ((j298f@display-hex '#f)) (begin (set! j298f@display-hex (lambda (j2998@n) (if (<= '0 j2998@n '9) (display j2998@n j298b@p) (display (integer->char (+ (char->integer '#\a) (- j2998@n '10))) j298b@p)))) (begin (let j2992@f ((j2990@ls (string-split j2980@x '#\/))) (if (not (null? j2990@ls)) (begin (display '"_" j298b@p) (for-each (lambda (j2994@c) (if (or (char<=? '#\a j2994@c '#\z) (char<=? '#\A j2994@c '#\Z) (char<=? '#\0 j2994@c '#\9) (memv j2994@c '(#\- #\. #\_ #\~))) (display j2994@c j298b@p) (begin (display '"%" j298b@p) (let ((j2996@n (char->integer j2994@c))) (begin (j298f@display-hex (quotient j2996@n '16)) (j298f@display-hex (remainder j2996@n '16))))))) (string->list (car j2990@ls))) (j2992@f (cdr j2990@ls))) (void))) (j298a@extract))))))))) (set! j29fa@j28c9@library-file-path->cache-path j28c9@library-file-path->cache-path) (set! j28cb@read-annotated read) (set! j29fb@j28cb@read-annotated j28cb@read-annotated) (set! j28cd@annotation-stripped (lambda (j299a@x) (j28d3@annotation-expression j299a@x))) (set! j29fc@j28cd@annotation-stripped j28cd@annotation-stripped) (set! j28cf@annotation? (lambda (j299c@x) (source-info j299c@x))) (set! j29fd@j28cf@annotation? j28cf@annotation?) (set! j28d1@annotation-source (lambda (j299e@x) (source-info j299e@x))) (set! j29fe@j28d1@annotation-source j28d1@annotation-source) (set! j28d3@annotation-expression (lambda (j29a0@x) (if (pair? j29a0@x) (cons (car j29a0@x) (cdr j29a0@x)) (if (procedure? j29a0@x) (set-source-info! j29a0@x '#f) j29a0@x)))) (set! j29ff@j28d3@annotation-expression j28d3@annotation-expression) (set! j28d5@scm->fasl (lambda (j29a2@filename) (string-append (j28e9@mosh-cache-dir) '"/" (j28c9@library-file-path->cache-path j29a2@filename) '".mosh-fasl"))) (set! j2a00@j28d5@scm->fasl j28d5@scm->fasl) (set! j28d7@fasl-save (lambda (j29a4@filename j29a5@obj) (call-with-port (open-file-output-port j29a4@filename) (lambda (j29a8@port) ((symbol-value 'fasl-write!) j29a5@obj j29a8@port))))) (set! j2a01@j28d7@fasl-save j28d7@fasl-save) (set! j28d9@fasl-load (lambda (j29aa@filename) (call-with-port (open-file-input-port j29aa@filename) (symbol-value 'fasl-read!)))) (set! j2a02@j28d9@fasl-load j28d9@fasl-load) (set! j28db@verbose? (symbol-value '%verbose)) (set! j2a03@j28db@verbose? j28db@verbose?) (set! j28dd@serialize-library (lambda (j29ac@filename j29ad@obj) (begin (if j28db@verbose? (format (current-error-port) '"serialize-library ~a\n..." j29ac@filename) (void)) (let ((j29b0@expanded2core (symbol-value 'expanded2core))) (let ((j29b2@compile (symbol-value 'compile-w/o-halt))) (let ((j29b4@code j29ad@obj)) (let ((j29b6@pivot (cddddr (cddddr j29b4@code)))) (let ((j29b8@visit (j29b2@compile (j29b0@expanded2core (car j29b6@pivot))))) (begin (set-car! j29b6@pivot j29b8@visit) (let ((j29ba@pivot (cdr j29b6@pivot))) (let ((j29bc@invoke (j29b2@compile (j29b0@expanded2core (car j29ba@pivot))))) (set-car! j29ba@pivot j29bc@invoke))))))))) (let ((j29be@fasl-file (j28d5@scm->fasl j29ac@filename))) (begin (if (file-exists? j29be@fasl-file) (delete-file j29be@fasl-file) (void)) ((call/cc (lambda (j29c2@j29c0) (lambda () (with-exception-handler (lambda (j29c4@c) ((call/cc (lambda (j29c6@j29c1) (j29c2@j29c0 (lambda () (if '#t (begin (if j28db@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" j29ac@filename) (void)) (if (file-exists? j29be@fasl-file) (delete-file j29be@fasl-file) (void)) '#f) (j29c6@j29c1 (lambda () (raise-continuable j29c4@c)))))))))) (lambda () (j28d7@fasl-save j29be@fasl-file j29ad@obj)))))))))))) (set! j2a04@j28dd@serialize-library j28dd@serialize-library) (set! j28df@load-serialized-library (lambda (j29c8@filename j29c9@obj) (and (j28e9@mosh-cache-dir) (let ((j29cc@fasl-file (j28d5@scm->fasl j29c8@filename))) (if (and (file-exists? j29cc@fasl-file) ((symbol-value 'file-newer?) j29cc@fasl-file j29c8@filename)) (let ((j29ce@expanded2core (symbol-value 'expanded2core))) (let ((j29d0@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((j29d2@code (j28d9@fasl-load j29cc@fasl-file))) (let ((j29d4@pivot (cddddr (cddddr j29d2@code)))) (let ((j29d6@visit (car j29d4@pivot))) (let ((j29d8@visit-proc (lambda () (j29d0@eval-compiled-core j29d6@visit)))) (begin (set-car! j29d4@pivot j29d8@visit-proc) (let ((j29da@pivot (cdr j29d4@pivot))) (let ((j29dc@invoke (car j29da@pivot))) (begin (set-car! j29da@pivot (lambda () (j29d0@eval-compiled-core j29dc@invoke))) (apply j29c9@obj j29d2@code))))))))))) '#f))))) (set! j2a05@j28df@load-serialized-library j28df@load-serialized-library) (set! j28e1@make-record-printer (lambda (j29de@name j29df@printer) (lambda j29e2@x (begin (display '"record printer") (for-each display j29e2@x))))) (set! j2a06@j28e1@make-record-printer j28e1@make-record-printer) (set! j28e3@compile-core (lambda j29e4@x (apply error 'comile-core '"not implementated" j29e4@x))) (set! j2a07@j28e3@compile-core j28e3@compile-core) (set! j28e5@read-library-source-file (lambda (j29e6@file-name) (with-input-from-file j29e6@file-name j28cb@read-annotated))) (set! j2a08@j28e5@read-library-source-file j28e5@read-library-source-file) (set! j28e7@make-parameter (lambda j29f6 (let ((j29f7 (length j29f6))) (if (= j29f7 '1) (apply (lambda (j29e8@x) (j28e7@make-parameter j29e8@x (lambda (j29ea@x) j29ea@x))) j29f6) (if (= j29f7 '2) (apply (lambda (j29ec@x j29ed@fender) (let ((j29f0@x (j29ed@fender j29ec@x))) (lambda j29f4 (let ((j29f5 (length j29f4))) (if (= j29f5 '0) (apply (lambda () j29f0@x) j29f4) (if (= j29f5 '1) (apply (lambda (j29f2@v) (set! j29f0@x (j29ed@fender j29f2@v))) j29f4) (error 'apply '"invalid arg count"))))))) j29f6) (error 'apply '"invalid arg count")))))) (set! j2a09@j28e7@make-parameter j28e7@make-parameter) (set! j28e9@mosh-cache-dir (j28e7@make-parameter '#f)) (set! j2a0a@j28e9@mosh-cache-dir j28e9@mosh-cache-dir) (set! j297f@file-options-spec (lambda (j29f8@x) j29f8@x)) (set! j2a0b@j297f@file-options-spec j297f@file-options-spec) (void))
(begin (set! j2a11@current-primitive-locations (unspecified)) (set! j2a13@mutable? (unspecified)) (set! j2a15@rewriter (unspecified)) (set! j2a17@expanded->core (unspecified)) (set! j2a19@compile-core-expr (unspecified)) (set! j2a1b@pretty-print (unspecified)) (set! j2a1d@compile-core-expr-to-port (unspecified)) (set! j2a11@current-primitive-locations (j2a09@j28e7@make-parameter (lambda (j2a1e@x) '#f) (lambda (j2a20@p) j2a20@p))) (set! j2a5c@j2a11@current-primitive-locations j2a11@current-primitive-locations) (set! j2a13@mutable? (lambda (j2a22@x) (or (pair? j2a22@x) (vector? j2a22@x) (hashtable? j2a22@x)))) (set! j2a5d@j2a13@mutable? j2a13@mutable?) (set! j2a15@rewriter (lambda (j2a24@quote-hack?) (let ((j2a27@f '#f)) (begin (set! j2a27@f (lambda (j2a28@x) (if (pair? j2a28@x) (let ((j2a2a@t (car j2a28@x))) (if (memv j2a2a@t '(quote)) (if (and j2a24@quote-hack? (j2a13@mutable? (cadr j2a28@x))) (let ((j2a2c@g (gensym))) (begin (set-symbol-value! j2a2c@g (cadr j2a28@x)) j2a2c@g)) j2a28@x) (if (memv j2a2a@t '(case-lambda)) (cons 'case-lambda (map (lambda (j2a2e@x) (cons (car j2a2e@x) (map j2a27@f (cdr j2a2e@x)))) (cdr j2a28@x))) (if (memv j2a2a@t '(lambda)) (cons* 'lambda (cadr j2a28@x) (map j2a27@f (cddr j2a28@x))) (if (memv j2a2a@t '(letrec)) (let ((j2a30@bindings (cadr j2a28@x)) (j2a31@body* (cddr j2a28@x))) (let ((j2a34@lhs* (map car j2a30@bindings)) (j2a35@rhs* (map cadr j2a30@bindings))) (cons* 'letrec (map list j2a34@lhs* (map j2a27@f j2a35@rhs*)) (map j2a27@f j2a31@body*)))) (if (memv j2a2a@t '(letrec*)) (let ((j2a38@bindings (cadr j2a28@x)) (j2a39@body* (cddr j2a28@x))) (let ((j2a3c@lhs* (map car j2a38@bindings)) (j2a3d@rhs* (map cadr j2a38@bindings))) (cons* 'letrec* (map list j2a3c@lhs* (map j2a27@f j2a3d@rhs*)) (map j2a27@f j2a39@body*)))) (if (memv j2a2a@t '(library-letrec*)) (let ((j2a40@name (cadr j2a28@x)) (j2a41@x (cdr j2a28@x))) (let ((j2a44@bindings (cadr j2a41@x)) (j2a45@body* (cddr j2a41@x))) (let ((j2a48@lhs* (map car j2a44@bindings)) (j2a49@lhs** (map cadr j2a44@bindings)) (j2a4a@rhs* (map caddr j2a44@bindings))) (cons* 'library-letrec* j2a40@name (map list j2a48@lhs* j2a49@lhs** (map j2a27@f j2a4a@rhs*)) (map j2a27@f j2a45@body*))))) (if (memv j2a2a@t '(begin)) (cons 'begin (map j2a27@f (cdr j2a28@x))) (if (memv j2a2a@t '(set!)) (list 'set! (cadr j2a28@x) (j2a27@f (caddr j2a28@x))) (if (memv j2a2a@t '(primitive)) (let ((j2a4e@op (cadr j2a28@x))) (let ((j2a50@t ((j2a11@current-primitive-locations) j2a4e@op))) (if j2a50@t ((lambda (j2a52@loc) j2a52@loc) j2a50@t) j2a4e@op))) (if (memv j2a2a@t '(define)) j2a28@x (if (list? j2a28@x) (map j2a27@f j2a28@x) (error 'rewrite '"invalid form ~s ~s" j2a28@x (list? j2a28@x)))))))))))))) j2a28@x))) j2a27@f)))) (set! j2a5e@j2a15@rewriter j2a15@rewriter) (set! j2a17@expanded->core (lambda (j2a54@x) ((j2a15@rewriter '#f) j2a54@x))) (set! j2a5f@j2a17@expanded->core j2a17@expanded->core) (set! j2a19@compile-core-expr (lambda (j2a56@x) ((j2a15@rewriter '#f) j2a56@x))) (set! j2a60@j2a19@compile-core-expr j2a19@compile-core-expr) (set! j2a1b@pretty-print write) (set! j2a61@j2a1b@pretty-print j2a1b@pretty-print) (set! j2a1d@compile-core-expr-to-port (lambda (j2a58@x j2a59@p) (j2a1b@pretty-print ((j2a15@rewriter '#f) j2a58@x) j2a59@p))) (set! j2a62@j2a1d@compile-core-expr-to-port j2a1d@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! j2ab1@make-collection (unspecified)) (set! j2ab3@current-library-collection (unspecified)) (set! j2ab5@rp (unspecified)) (set! j2abf@library? (unspecified)) (set! j2ac1@library-id (unspecified)) (set! j2ac3@set-library-id! (unspecified)) (set! j2ac5@library-name (unspecified)) (set! j2ac7@set-library-name! (unspecified)) (set! j2ac9@library-version (unspecified)) (set! j2acb@set-library-version! (unspecified)) (set! j2acd@library-imp* (unspecified)) (set! j2acf@set-library-imp*! (unspecified)) (set! j2ad1@library-vis* (unspecified)) (set! j2ad3@set-library-vis*! (unspecified)) (set! j2ad5@library-inv* (unspecified)) (set! j2ad7@set-library-inv*! (unspecified)) (set! j2ad9@library-subst (unspecified)) (set! j2adb@set-library-subst! (unspecified)) (set! j2add@library-env (unspecified)) (set! j2adf@set-library-env! (unspecified)) (set! j2ae1@library-visit-state (unspecified)) (set! j2ae3@set-library-visit-state! (unspecified)) (set! j2ae5@library-invoke-state (unspecified)) (set! j2ae7@set-library-invoke-state! (unspecified)) (set! j2ae9@library-visit-code (unspecified)) (set! j2aeb@set-library-visit-code! (unspecified)) (set! j2aed@library-invoke-code (unspecified)) (set! j2aef@set-library-invoke-code! (unspecified)) (set! j2af1@library-visible? (unspecified)) (set! j2af3@set-library-visible?! (unspecified)) (set! j2af5@library-source-file-name (unspecified)) (set! j2af7@set-library-source-file-name! (unspecified)) (set! j2af9@dummy (unspecified)) (set! j2afb@find-dependencies (unspecified)) (set! j2afd@find-library-by (unspecified)) (set! j2aff@library-path (unspecified)) (set! j2b01@library-extensions (unspecified)) (set! j2b03@library-name->file-name (unspecified)) (set! j2b05@file-locator (unspecified)) (set! j2b07@serialize-all (unspecified)) (set! j2b09@current-precompiled-library-loader (unspecified)) (set! j2b0b@try-load-from-file (unspecified)) (set! j2b0d@library-loader (unspecified)) (set! j2b0f@current-library-expander (unspecified)) (set! j2b11@external-pending-libraries (unspecified)) (set! j2b13@find-external-library (unspecified)) (set! j2b15@find-library-by-name (unspecified)) (set! j2b17@library-exists? (unspecified)) (set! j2b19@find-library-by-spec/die (unspecified)) (set! j2b1b@label->binding-table (unspecified)) (set! j2b1d@install-library-record (unspecified)) (set! j2b1f@install-library (unspecified)) (set! j2b21@imported-label->binding (unspecified)) (set! j2b23@invoke-library (unspecified)) (set! j2b25@visit-library (unspecified)) (set! j2b27@invoke-library-by-spec (unspecified)) (set! j2b29@installed-libraries (unspecified)) (set! j2b2b@library-spec (unspecified)) (set! j2ab1@make-collection (lambda () (let ((j2b2c@set '())) (let ((j2b2f@set-cons '#f)) (begin (set! j2b2f@set-cons (lambda (j2b34@x j2b35@ls) (if (memq j2b34@x j2b35@ls) j2b35@ls (cons j2b34@x j2b35@ls)))) (lambda j2b32 (let ((j2b33 (length j2b32))) (if (= j2b33 '0) (apply (lambda () j2b2c@set) j2b32) (if (= j2b33 '1) (apply (lambda (j2b30@x) (set! j2b2c@set (j2b2f@set-cons j2b30@x j2b2c@set))) j2b32) (error 'apply '"invalid arg count")))))))))) (set! j2ca0@j2ab1@make-collection j2ab1@make-collection) (set! j2ab3@current-library-collection (j2a09@j28e7@make-parameter (j2ab1@make-collection) (lambda (j2b38@x) (begin (if (not (procedure? j2b38@x)) (assertion-violation 'current-library-collection '"not a procedure" j2b38@x) (void)) j2b38@x)))) (set! j2ca1@j2ab3@current-library-collection j2ab3@current-library-collection) (set! j2ab5@rp (j2a06@j28e1@make-record-printer 'library (lambda (j2b3a@x j2b3b@p j2b3c@wr) (begin (if (not (j2abf@library? j2b3a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (j2ac9@library-version j2b3a@x)) (j2ac5@library-name j2b3a@x) (append (j2ac5@library-name j2b3a@x) (list (j2ac9@library-version j2b3a@x))))) j2b3b@p))))) (set! j2ca2@j2ab5@rp j2ab5@rp) (set! j2abf@library? (lambda (j2b40@x) (and (simple-struct? j2b40@x) (eq? (simple-struct-name j2b40@x) 'library)))) (set! j2ca3@j2abf@library? j2abf@library?) (set! j2ac1@library-id (lambda (j2b42@x) (simple-struct-ref j2b42@x '0))) (set! j2ca4@j2ac1@library-id j2ac1@library-id) (set! j2ac3@set-library-id! (lambda (j2b44@x j2b45@val) (simple-struct-set! j2b44@x '0 j2b45@val))) (set! j2ca5@j2ac3@set-library-id! j2ac3@set-library-id!) (set! j2ac5@library-name (lambda (j2b48@x) (simple-struct-ref j2b48@x '1))) (set! j2ca6@j2ac5@library-name j2ac5@library-name) (set! j2ac7@set-library-name! (lambda (j2b4a@x j2b4b@val) (simple-struct-set! j2b4a@x '1 j2b4b@val))) (set! j2ca7@j2ac7@set-library-name! j2ac7@set-library-name!) (set! j2ac9@library-version (lambda (j2b4e@x) (simple-struct-ref j2b4e@x '2))) (set! j2ca8@j2ac9@library-version j2ac9@library-version) (set! j2acb@set-library-version! (lambda (j2b50@x j2b51@val) (simple-struct-set! j2b50@x '2 j2b51@val))) (set! j2ca9@j2acb@set-library-version! j2acb@set-library-version!) (set! j2acd@library-imp* (lambda (j2b54@x) (simple-struct-ref j2b54@x '3))) (set! j2caa@j2acd@library-imp* j2acd@library-imp*) (set! j2acf@set-library-imp*! (lambda (j2b56@x j2b57@val) (simple-struct-set! j2b56@x '3 j2b57@val))) (set! j2cab@j2acf@set-library-imp*! j2acf@set-library-imp*!) (set! j2ad1@library-vis* (lambda (j2b5a@x) (simple-struct-ref j2b5a@x '4))) (set! j2cac@j2ad1@library-vis* j2ad1@library-vis*) (set! j2ad3@set-library-vis*! (lambda (j2b5c@x j2b5d@val) (simple-struct-set! j2b5c@x '4 j2b5d@val))) (set! j2cad@j2ad3@set-library-vis*! j2ad3@set-library-vis*!) (set! j2ad5@library-inv* (lambda (j2b60@x) (simple-struct-ref j2b60@x '5))) (set! j2cae@j2ad5@library-inv* j2ad5@library-inv*) (set! j2ad7@set-library-inv*! (lambda (j2b62@x j2b63@val) (simple-struct-set! j2b62@x '5 j2b63@val))) (set! j2caf@j2ad7@set-library-inv*! j2ad7@set-library-inv*!) (set! j2ad9@library-subst (lambda (j2b66@x) (simple-struct-ref j2b66@x '6))) (set! j2cb0@j2ad9@library-subst j2ad9@library-subst) (set! j2adb@set-library-subst! (lambda (j2b68@x j2b69@val) (simple-struct-set! j2b68@x '6 j2b69@val))) (set! j2cb1@j2adb@set-library-subst! j2adb@set-library-subst!) (set! j2add@library-env (lambda (j2b6c@x) (simple-struct-ref j2b6c@x '7))) (set! j2cb2@j2add@library-env j2add@library-env) (set! j2adf@set-library-env! (lambda (j2b6e@x j2b6f@val) (simple-struct-set! j2b6e@x '7 j2b6f@val))) (set! j2cb3@j2adf@set-library-env! j2adf@set-library-env!) (set! j2ae1@library-visit-state (lambda (j2b72@x) (simple-struct-ref j2b72@x '8))) (set! j2cb4@j2ae1@library-visit-state j2ae1@library-visit-state) (set! j2ae3@set-library-visit-state! (lambda (j2b74@x j2b75@val) (simple-struct-set! j2b74@x '8 j2b75@val))) (set! j2cb5@j2ae3@set-library-visit-state! j2ae3@set-library-visit-state!) (set! j2ae5@library-invoke-state (lambda (j2b78@x) (simple-struct-ref j2b78@x '9))) (set! j2cb6@j2ae5@library-invoke-state j2ae5@library-invoke-state) (set! j2ae7@set-library-invoke-state! (lambda (j2b7a@x j2b7b@val) (simple-struct-set! j2b7a@x '9 j2b7b@val))) (set! j2cb7@j2ae7@set-library-invoke-state! j2ae7@set-library-invoke-state!) (set! j2ae9@library-visit-code (lambda (j2b7e@x) (simple-struct-ref j2b7e@x '10))) (set! j2cb8@j2ae9@library-visit-code j2ae9@library-visit-code) (set! j2aeb@set-library-visit-code! (lambda (j2b80@x j2b81@val) (simple-struct-set! j2b80@x '10 j2b81@val))) (set! j2cb9@j2aeb@set-library-visit-code! j2aeb@set-library-visit-code!) (set! j2aed@library-invoke-code (lambda (j2b84@x) (simple-struct-ref j2b84@x '11))) (set! j2cba@j2aed@library-invoke-code j2aed@library-invoke-code) (set! j2aef@set-library-invoke-code! (lambda (j2b86@x j2b87@val) (simple-struct-set! j2b86@x '11 j2b87@val))) (set! j2cbb@j2aef@set-library-invoke-code! j2aef@set-library-invoke-code!) (set! j2af1@library-visible? (lambda (j2b8a@x) (simple-struct-ref j2b8a@x '12))) (set! j2cbc@j2af1@library-visible? j2af1@library-visible?) (set! j2af3@set-library-visible?! (lambda (j2b8c@x j2b8d@val) (simple-struct-set! j2b8c@x '12 j2b8d@val))) (set! j2cbd@j2af3@set-library-visible?! j2af3@set-library-visible?!) (set! j2af5@library-source-file-name (lambda (j2b90@x) (simple-struct-ref j2b90@x '13))) (set! j2cbe@j2af5@library-source-file-name j2af5@library-source-file-name) (set! j2af7@set-library-source-file-name! (lambda (j2b92@x j2b93@val) (simple-struct-set! j2b92@x '13 j2b93@val))) (set! j2cbf@j2af7@set-library-source-file-name! j2af7@set-library-source-file-name!) (set! j2af9@dummy '3) (set! j2cc0@j2af9@dummy j2af9@dummy) (set! j2afb@find-dependencies (lambda (j2b96@ls) (if (null? j2b96@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! j2cc1@j2afb@find-dependencies j2afb@find-dependencies) (set! j2afd@find-library-by (lambda (j2b98@pred) (let j2b9c@f ((j2b9a@ls ((j2ab3@current-library-collection)))) (if (null? j2b9a@ls) '#f (if (j2b98@pred (car j2b9a@ls)) (car j2b9a@ls) (j2b9c@f (cdr j2b9a@ls))))))) (set! j2cc2@j2afd@find-library-by j2afd@find-library-by) (set! j2aff@library-path (j2a09@j28e7@make-parameter '(".") (lambda (j2b9e@x) (if (and (list? j2b9e@x) (for-all string? j2b9e@x)) (map (lambda (j2ba0@x) j2ba0@x) j2b9e@x) (assertion-violation 'library-path '"not a list of strings" j2b9e@x))))) (set! j2cc3@j2aff@library-path j2aff@library-path) (set! j2b01@library-extensions (j2a09@j28e7@make-parameter '(".sls" ".ss" ".scm") (lambda (j2ba2@x) (if (and (list? j2ba2@x) (for-all string? j2ba2@x)) (map (lambda (j2ba4@x) j2ba4@x) j2ba2@x) (assertion-violation 'library-extensions '"not a list of strings" j2ba2@x))))) (set! j2cc4@j2b01@library-extensions j2b01@library-extensions) (set! j2b03@library-name->file-name (lambda (j2ba6@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j2bac@j2ba9 j2bad@j2bab) (let ((j2bb0@extract j2bad@j2bab) (j2bb1@p j2bac@j2ba9)) (let ((j2bb5@display-hex '#f)) (begin (set! j2bb5@display-hex (lambda (j2bbe@n) (if (<= '0 j2bbe@n '9) (display j2bbe@n j2bb1@p) (display (integer->char (+ (char->integer '#\a) (- j2bbe@n '10))) j2bb1@p)))) (begin (let j2bb8@f ((j2bb6@ls j2ba6@x)) (if (not (null? j2bb6@ls)) (begin (display '"/" j2bb1@p) (for-each (lambda (j2bba@c) (if (or (char<=? '#\a j2bba@c '#\z) (char<=? '#\A j2bba@c '#\Z) (char<=? '#\0 j2bba@c '#\9) (memv j2bba@c '(#\- #\. #\_ #\~))) (display j2bba@c j2bb1@p) (begin (display '"%" j2bb1@p) (let ((j2bbc@n (char->integer j2bba@c))) (begin (j2bb5@display-hex (quotient j2bbc@n '16)) (j2bb5@display-hex (remainder j2bbc@n '16))))))) (string->list (symbol->string (car j2bb6@ls)))) (j2bb8@f (cdr j2bb6@ls))) (void))) (j2bb0@extract))))))))) (set! j2cc5@j2b03@library-name->file-name j2b03@library-name->file-name) (set! j2b05@file-locator (j2a09@j28e7@make-parameter (lambda (j2bc0@x) (let ((j2bc2@str (j2b03@library-name->file-name j2bc0@x))) (let j2bca@f ((j2bc4@ls (j2aff@library-path)) (j2bc5@exts (j2b01@library-extensions)) (j2bc6@failed-list '())) (if (null? j2bc4@ls) (let ((j2bd4@j2bcf '#f) (j2bd6@j2bd1 '#f) (j2bd8@j2bd0 '#f) (j2bdb@j2bce '#f) (j2bdd@make-library-resolution-condition '#f) (j2bdf@j2bcc '#f) (j2be1@j2bcd '#f) (j2be3@library-resolution-condition? '#f) (j2be5@condition-library '#f) (j2be7@condition-files '#f)) (begin (set! j2bd4@j2bcf (make-record-type-descriptor '&library-resolution j4edb@j4c22@&condition-rtd 'j2bd2 '#f '#f '#((immutable library) (immutable files)))) (set! j2bd6@j2bd1 '#f) (set! j2bd8@j2bd0 (make-record-constructor-descriptor j2bd4@j2bcf j4edc@j4c24@&condition-rcd j2bd6@j2bd1)) (set! j2bdb@j2bce (record-predicate j2bd4@j2bcf)) (set! j2bdd@make-library-resolution-condition (record-constructor j2bd8@j2bd0)) (set! j2bdf@j2bcc (record-accessor j2bd4@j2bcf '0)) (set! j2be1@j2bcd (record-accessor j2bd4@j2bcf '1)) (set! j2be3@library-resolution-condition? (condition-predicate j2bd4@j2bcf)) (set! j2be5@condition-library (condition-accessor j2bd4@j2bcf j2bdf@j2bcc)) (set! j2be7@condition-files (condition-accessor j2bd4@j2bcf j2be1@j2bcd)) (raise (condition (j4efb@j4cbc@make-error) (j4f1d@j4d18@make-who-condition 'expander) (j4ee1@j4c79@make-message-condition '"cannot locate library in library-path") (j2bdd@make-library-resolution-condition j2bc0@x (reverse j2bc6@failed-list)))))) (if (null? j2bc5@exts) (j2bca@f (cdr j2bc4@ls) (j2b01@library-extensions) j2bc6@failed-list) (let ((j2be8@name (string-append (car j2bc4@ls) j2bc2@str (car j2bc5@exts)))) (if (file-exists? j2be8@name) j2be8@name (j2bca@f j2bc4@ls (cdr j2bc5@exts) (cons j2be8@name j2bc6@failed-list))))))))) (lambda (j2bea@f) (if (procedure? j2bea@f) j2bea@f (assertion-violation 'file-locator '"not a procedure" j2bea@f))))) (set! j2cc6@j2b05@file-locator j2b05@file-locator) (set! j2b07@serialize-all (lambda (j2bec@serialize j2bed@compile) (let ((j2bf1@library-desc '#f)) (begin (set! j2bf1@library-desc (lambda (j2bf4@x) (list (j2ac1@library-id j2bf4@x) (j2ac5@library-name j2bf4@x)))) (for-each (lambda (j2bf2@x) (if (j2af5@library-source-file-name j2bf2@x) (j2bec@serialize (j2af5@library-source-file-name j2bf2@x) (list (j2ac1@library-id j2bf2@x) (j2ac5@library-name j2bf2@x) (j2ac9@library-version j2bf2@x) (map j2bf1@library-desc (j2acd@library-imp* j2bf2@x)) (map j2bf1@library-desc (j2ad1@library-vis* j2bf2@x)) (map j2bf1@library-desc (j2ad5@library-inv* j2bf2@x)) (j2ad9@library-subst j2bf2@x) (j2add@library-env j2bf2@x) (j2bed@compile (j2ae9@library-visit-code j2bf2@x)) (j2bed@compile (j2aed@library-invoke-code j2bf2@x)) (j2af1@library-visible? j2bf2@x))) (void))) ((j2ab3@current-library-collection))))))) (set! j2cc7@j2b07@serialize-all j2b07@serialize-all) (set! j2b09@current-precompiled-library-loader (j2a09@j28e7@make-parameter (lambda (j2bf6@filename j2bf7@sk) '#f))) (set! j2cc8@j2b09@current-precompiled-library-loader j2b09@current-precompiled-library-loader) (set! j2b0b@try-load-from-file (lambda (j2bfa@filename) ((j2b09@current-precompiled-library-loader) j2bfa@filename (lambda j2c20 (let ((j2c21 (length j2c20))) (if (= j2c21 '11) (apply (lambda (j2bfc@id j2bfd@name j2bfe@ver j2bff@imp* j2c00@vis* j2c01@inv* j2c02@exp-subst j2c03@exp-env j2c04@visit-proc j2c05@invoke-proc j2c06@visible?) (let j2c14@f ((j2c12@deps (append j2bff@imp* j2c00@vis* j2c01@inv*))) (if (null? j2c12@deps) (begin (j2b1f@install-library j2bfc@id j2bfd@name j2bfe@ver j2bff@imp* j2c00@vis* j2c01@inv* j2c02@exp-subst j2c03@exp-env j2c04@visit-proc j2c05@invoke-proc '#f '#f j2c06@visible? '#f) '#t) (let ((j2c16@d (car j2c12@deps))) (let ((j2c18@label (car j2c16@d)) (j2c19@dname (cadr j2c16@d))) (let ((j2c1c@l (j2b15@find-library-by-name j2c19@dname))) (if (and (j2abf@library? j2c1c@l) (eq? j2c18@label (j2ac1@library-id j2c1c@l))) (j2c14@f (cdr j2c12@deps)) (begin (if j2a03@j28db@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" j2bfd@name j2c19@dname j2bfa@filename j2c1c@l j2c18@label (j2ac1@library-id j2c1c@l)) (void)) '#f)))))))) j2c20) (if (>= j2c21 '0) (apply (lambda j2c1e@others '#f) j2c20) (error 'apply '"invalid arg count")))))))) (set! j2cc9@j2b0b@try-load-from-file j2b0b@try-load-from-file) (set! j2b0d@library-loader (j2a09@j28e7@make-parameter (lambda (j2c22@x) (let ((j2c24@file-name ((j2b05@file-locator) j2c22@x))) (if (not j2c24@file-name) (assertion-violation '#f '"cannot file library" j2c22@x) (or (j2b0b@try-load-from-file j2c24@file-name) ((j2b0f@current-library-expander) (j2a08@j28e5@read-library-source-file j2c24@file-name) j2c24@file-name (lambda (j2c26@name) (if (not (fast-equal? j2c26@name j2c22@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (j2c2c@j2c29 j2c2d@j2c2b) (let ((j2c30@e j2c2d@j2c2b) (j2c31@p j2c2c@j2c29)) (begin (display '"expected to find library " j2c31@p) (write j2c22@x j2c31@p) (display '" in file " j2c31@p) (display j2c24@file-name j2c31@p) (display '", found " j2c31@p) (write j2c26@name j2c31@p) (display '" instead" j2c31@p) (j2c30@e)))))) (void)))))))) (lambda (j2c34@f) (if (procedure? j2c34@f) j2c34@f (assertion-violation 'library-locator '"not a procedure" j2c34@f))))) (set! j2cca@j2b0d@library-loader j2b0d@library-loader) (set! j2b0f@current-library-expander (j2a09@j28e7@make-parameter (lambda (j2c36@x) (assertion-violation 'library-expander '"not initialized")) (lambda (j2c38@f) (if (procedure? j2c38@f) j2c38@f (assertion-violation 'library-expander '"not a procedure" j2c38@f))))) (set! j2ccb@j2b0f@current-library-expander j2b0f@current-library-expander) (set! j2b11@external-pending-libraries (j2a09@j28e7@make-parameter '())) (set! j2ccc@j2b11@external-pending-libraries j2b11@external-pending-libraries) (set! j2b13@find-external-library (lambda (j2c3a@name) (begin (if (member j2c3a@name (j2b11@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" j2c3a@name) (void)) (let ((j2c40@j2c3d j2b11@external-pending-libraries) (j2c41@j2c3f (cons j2c3a@name (j2b11@external-pending-libraries)))) (let ((j2c44@swap (lambda () (let ((j2c46@t (j2c40@j2c3d))) (begin (j2c40@j2c3d j2c41@j2c3f) (set! j2c41@j2c3f j2c46@t)))))) (dynamic-wind j2c44@swap (lambda () (begin ((j2b0d@library-loader) j2c3a@name) (or (j2afd@find-library-by (lambda (j2c48@x) (fast-equal? (j2ac5@library-name j2c48@x) j2c3a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" j2c3a@name)))) j2c44@swap)))))) (set! j2ccd@j2b13@find-external-library j2b13@find-external-library) (set! j2b15@find-library-by-name (lambda (j2c4a@name) (or (j2afd@find-library-by (lambda (j2c4c@x) (fast-equal? (j2ac5@library-name j2c4c@x) j2c4a@name))) (j2b13@find-external-library j2c4a@name)))) (set! j2cce@j2b15@find-library-by-name j2b15@find-library-by-name) (set! j2b17@library-exists? (lambda (j2c4e@name) (and (j2afd@find-library-by (lambda (j2c50@x) (fast-equal? (j2ac5@library-name j2c50@x) j2c4e@name))) '#t))) (set! j2ccf@j2b17@library-exists? j2b17@library-exists?) (set! j2b19@find-library-by-spec/die (lambda (j2c52@spec) (let ((j2c54@id (car j2c52@spec))) (or (j2afd@find-library-by (lambda (j2c56@x) (eq? j2c54@id (j2ac1@library-id j2c56@x)))) (assertion-violation '#f '"cannot find library with required spec" j2c52@spec))))) (set! j2cd0@j2b19@find-library-by-spec/die j2b19@find-library-by-spec/die) (set! j2b1b@label->binding-table (make-eq-hashtable)) (set! j2cd1@j2b1b@label->binding-table j2b1b@label->binding-table) (set! j2b1d@install-library-record (lambda (j2c58@lib) (begin (let ((j2c5a@exp-env (j2add@library-env j2c58@lib))) (for-each (lambda (j2c5c@x) (let ((j2c5e@label (car j2c5c@x)) (j2c5f@binding (cdr j2c5c@x))) (let ((j2c62@binding (let ((j2c64@t (car j2c5f@binding))) (if (memv j2c64@t '(global)) (cons 'global (cons j2c58@lib (cdr j2c5f@binding))) (if (memv j2c64@t '(global-macro)) (cons 'global-macro (cons j2c58@lib (cdr j2c5f@binding))) (if (memv j2c64@t '(global-macro!)) (cons 'global-macro! (cons j2c58@lib (cdr j2c5f@binding))) j2c5f@binding)))))) (begin (if (hashtable-ref j2b1b@label->binding-table j2c5e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" j2c5e@label (hashtable-ref j2b1b@label->binding-table j2c5e@label '#f) j2c62@binding) (exit)) (void)) (hashtable-set! j2b1b@label->binding-table j2c5e@label j2c62@binding))))) j2c5a@exp-env)) ((j2ab3@current-library-collection) j2c58@lib)))) (set! j2cd2@j2b1d@install-library-record j2b1d@install-library-record) (set! j2b1f@install-library (lambda (j2c66@id j2c67@name j2c68@ver j2c69@imp* j2c6a@vis* j2c6b@inv* j2c6c@exp-subst j2c6d@exp-env j2c6e@visit-proc j2c6f@invoke-proc j2c70@visit-code j2c71@invoke-code j2c72@visible? j2c73@source-file-name) (let ((j2c82@imp-lib* (map j2b19@find-library-by-spec/die j2c69@imp*)) (j2c83@vis-lib* (map j2b19@find-library-by-spec/die j2c6a@vis*)) (j2c84@inv-lib* (map j2b19@find-library-by-spec/die j2c6b@inv*))) (begin (if (not (and (symbol? j2c66@id) (list? j2c67@name) (list? j2c68@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" j2c66@id j2c67@name j2c68@ver) (void)) (if (j2b17@library-exists? j2c67@name) (assertion-violation 'install-library '"library is already installed" j2c67@name) (void)) (let ((j2c88@lib (make-simple-struct 'library '15 (list j2c66@id j2c67@name j2c68@ver j2c82@imp-lib* j2c83@vis-lib* j2c84@inv-lib* j2c6c@exp-subst j2c6d@exp-env j2c6e@visit-proc j2c6f@invoke-proc j2c70@visit-code j2c71@invoke-code j2c72@visible? j2c73@source-file-name)))) (j2b1d@install-library-record j2c88@lib)))))) (set! j2cd3@j2b1f@install-library j2b1f@install-library) (set! j2b21@imported-label->binding (lambda (j2c8a@lab) (hashtable-ref j2b1b@label->binding-table j2c8a@lab '#f))) (set! j2cd4@j2b21@imported-label->binding j2b21@imported-label->binding) (set! j2b23@invoke-library (lambda (j2c8c@lib) (let ((j2c8e@invoke (j2ae5@library-invoke-state j2c8c@lib))) (if (procedure? j2c8e@invoke) (begin (j2ae7@set-library-invoke-state! j2c8c@lib (lambda () (assertion-violation 'invoke '"circularity detected" j2c8c@lib))) (for-each j2b23@invoke-library (j2ad5@library-inv* j2c8c@lib)) (j2ae7@set-library-invoke-state! j2c8c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" j2c8c@lib))) (j2c8e@invoke) (j2ae7@set-library-invoke-state! j2c8c@lib '#t)) (void))))) (set! j2cd5@j2b23@invoke-library j2b23@invoke-library) (set! j2b25@visit-library (lambda (j2c90@lib) (let ((j2c92@visit (j2ae1@library-visit-state j2c90@lib))) (if (procedure? j2c92@visit) (begin (j2ae3@set-library-visit-state! j2c90@lib (lambda () (assertion-violation 'visit '"circularity detected" j2c90@lib))) (for-each j2b23@invoke-library (j2ad1@library-vis* j2c90@lib)) (j2ae3@set-library-visit-state! j2c90@lib (lambda () (assertion-violation 'invoke '"first visit did not return" j2c90@lib))) (j2c92@visit) (j2ae3@set-library-visit-state! j2c90@lib '#t)) (void))))) (set! j2cd6@j2b25@visit-library j2b25@visit-library) (set! j2b27@invoke-library-by-spec (lambda (j2c94@spec) (j2b23@invoke-library (j2b19@find-library-by-spec/die j2c94@spec)))) (set! j2cd7@j2b27@invoke-library-by-spec j2b27@invoke-library-by-spec) (set! j2b29@installed-libraries (lambda j2c9c (let ((j2c9d (length j2c9c))) (if (= j2c9d '1) (apply (lambda (j2c96@all?) (let j2c9a@f ((j2c98@ls ((j2ab3@current-library-collection)))) (if (null? j2c98@ls) '() (if (or j2c96@all? (j2af1@library-visible? (car j2c98@ls))) (cons (car j2c98@ls) (j2c9a@f (cdr j2c98@ls))) (j2c9a@f (cdr j2c98@ls)))))) j2c9c) (if (= j2c9d '0) (apply (lambda () (j2b29@installed-libraries '#f)) j2c9c) (error 'apply '"invalid arg count")))))) (set! j2cd8@j2b29@installed-libraries j2b29@installed-libraries) (set! j2b2b@library-spec (lambda (j2c9e@x) (begin (if (not (j2abf@library? j2c9e@x)) (assertion-violation 'library-spec '"not a library" j2c9e@x) (void)) (list (j2ac1@library-id j2c9e@x) (j2ac5@library-name j2c9e@x) (j2ac9@library-version j2c9e@x))))) (set! j2cd9@j2b2b@library-spec j2b2b@library-spec) (void))
(begin (set! j2cdd@build-global-define (unspecified)) (set! j2d4e@build-lambda (unspecified)) (set! j2d50@build-case-lambda (unspecified)) (set! j2d7e@build-sequence (unspecified)) (set! j2d80@build-void (unspecified)) (set! j2d82@build-letrec (unspecified)) (set! j2d84@build-let (unspecified)) (set! j2d86@build-named-let (unspecified)) (set! j2d88@build-letrec* (unspecified)) (set! j2d8a@build-library-letrec* (unspecified)) (set! j2d8c@build-receive (unspecified)) (set! j2cdd@build-global-define (lambda (j2d8d@x) (j2d80@build-void))) (set! j2e21@j2cdd@build-global-define j2cdd@build-global-define) (set! j2d4e@build-lambda (lambda (j2d8f@ae j2d90@vars j2d91@exp) (list 'lambda j2d90@vars j2d91@exp))) (set! j2e22@j2d4e@build-lambda j2d4e@build-lambda) (set! j2d50@build-case-lambda (lambda (j2d95@ae j2d96@vars* j2d97@exp*) (let ((j2d9c@build-error '#f) (j2d9e@build-pred '#f) (j2da0@build-apply '#f) (j2da2@expand-case-lambda '#f)) (begin (set! j2d9c@build-error (lambda (j2dd3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! j2d9e@build-pred (lambda (j2dbb@ae j2dbc@n j2dbd@vars) (call-with-values (lambda () (let j2dc9@f ((j2dc5@vars j2dbd@vars) (j2dc6@count '0)) (if (pair? j2dc5@vars) (j2dc9@f (cdr j2dc5@vars) (+ j2dc6@count '1)) (if (null? j2dc5@vars) (values j2dc6@count '=) (values j2dc6@count '>=))))) (lambda (j2dcb@j2dc2 j2dcc@j2dc4) (let ((j2dcf@pred j2dcc@j2dc4) (j2dd0@count j2dcb@j2dc2)) (list (list 'primitive j2dcf@pred) j2dbc@n (list 'quote j2dd0@count))))))) (set! j2da0@build-apply (lambda (j2db3@ae j2db4@g j2db5@vars j2db6@exp) (list '(primitive apply) (j2d4e@build-lambda j2db3@ae j2db5@vars j2db6@exp) j2db4@g))) (set! j2da2@expand-case-lambda (lambda (j2da3@ae j2da4@vars j2da5@exp*) (let ((j2da9@g (gensym)) (j2daa@n (gensym))) (list 'lambda j2da9@g (j2d84@build-let j2da3@ae (list j2daa@n) (list (list '(primitive length) j2da9@g)) (let j2db1@f ((j2dad@vars* j2d96@vars*) (j2dae@exp* j2da5@exp*)) (if (null? j2dad@vars*) (j2d9c@build-error j2da3@ae) (list 'if (j2d9e@build-pred j2da3@ae j2daa@n (car j2dad@vars*)) (j2da0@build-apply j2da3@ae j2da9@g (car j2dad@vars*) (car j2dae@exp*)) (j2db1@f (cdr j2dad@vars*) (cdr j2dae@exp*)))))))))) (if (= (length j2d97@exp*) '1) (j2d4e@build-lambda j2d95@ae (car j2d96@vars*) (car j2d97@exp*)) (j2da2@expand-case-lambda j2d95@ae j2d96@vars* j2d97@exp*)))))) (set! j2e23@j2d50@build-case-lambda j2d50@build-case-lambda) (set! j2d7e@build-sequence (lambda (j2dd5@ae j2dd6@exps) (let j2ddb@loop ((j2dd9@exps j2dd6@exps)) (if (null? (cdr j2dd9@exps)) (car j2dd9@exps) (if (equal? (car j2dd9@exps) (j2d80@build-void)) (j2ddb@loop (cdr j2dd9@exps)) (cons 'begin j2dd9@exps)))))) (set! j2e24@j2d7e@build-sequence j2d7e@build-sequence) (set! j2d80@build-void (lambda () '((primitive void)))) (set! j2e25@j2d80@build-void j2d80@build-void) (set! j2d82@build-letrec (lambda (j2ddd@ae j2dde@vars j2ddf@val-exps j2de0@body-exp) (if (null? j2dde@vars) j2de0@body-exp (list 'letrec (map list j2dde@vars j2ddf@val-exps) j2de0@body-exp)))) (set! j2e26@j2d82@build-letrec j2d82@build-letrec) (set! j2d84@build-let (lambda (j2de5@ae j2de6@vars j2de7@val-exps j2de8@body-exp) (if (null? j2de6@vars) j2de8@body-exp (list 'let (map list j2de6@vars j2de7@val-exps) j2de8@body-exp)))) (set! j2e27@j2d84@build-let j2d84@build-let) (set! j2d86@build-named-let (lambda (j2ded@ae j2dee@name j2def@vars j2df0@val-exps j2df1@body-exp) (list 'let j2dee@name (map list j2def@vars j2df0@val-exps) j2df1@body-exp))) (set! j2e28@j2d86@build-named-let j2d86@build-named-let) (set! j2d88@build-letrec* (lambda (j2df7@ae j2df8@vars j2df9@val-exps j2dfa@body-exp) (if (null? j2df8@vars) j2dfa@body-exp (j2d84@build-let j2df7@ae j2df8@vars (map (lambda (j2dff@x) (list 'quote '#f)) j2df8@vars) (j2d7e@build-sequence j2df7@ae (append (map (lambda (j2e01@lhs j2e02@rhs) (list 'set! j2e01@lhs j2e02@rhs)) j2df8@vars j2df9@val-exps) (list j2dfa@body-exp))))))) (set! j2e29@j2d88@build-letrec* j2d88@build-letrec*) (set! j2d8a@build-library-letrec* (lambda (j2e05@ae j2e06@name j2e07@vars j2e08@locs j2e09@val-exps j2e0a@body-exp) (cons 'begin (append (map (lambda (j2e11@var) (cons 'set! (cons j2e11@var '((unspecified))))) j2e07@vars) (append (apply append (map (lambda (j2e13@var j2e14@loc j2e15@val-exp) (list (list 'set! j2e13@var j2e15@val-exp) (list 'set! j2e14@loc j2e13@var))) j2e07@vars j2e08@locs j2e09@val-exps)) (list j2e0a@body-exp)))))) (set! j2e2a@j2d8a@build-library-letrec* j2d8a@build-library-letrec*) (set! j2d8c@build-receive (lambda (j2e19@ae j2e1a@vars j2e1b@producer j2e1c@body*) (begin (display '"************** in ") (cons 'receive (cons j2e1a@vars (cons j2e1b@producer j2e1c@body*)))))) (set! j2e2b@j2d8c@build-receive j2d8c@build-receive) (void))
(begin (set! j2e3a@file-options-macro (unspecified)) (set! j2e3c@set-cons (unspecified)) (set! j2e3e@set-union (unspecified)) (set! j2e43@top-mark* (unspecified)) (set! j2e45@top-marked? (unspecified)) (set! j2e47@gen-lexical (unspecified)) (set! j2e49@gen-global (unspecified)) (set! j2e4b@gen-label (unspecified)) (set! j2e4d@gen-top-level-label (unspecified)) (set! j2e4f@gen-define-label+loc (unspecified)) (set! j2e51@gen-define-label (unspecified)) (set! j2e5b@rib? (unspecified)) (set! j2e5d@rib-sym* (unspecified)) (set! j2e5f@set-rib-sym*! (unspecified)) (set! j2e61@rib-mark** (unspecified)) (set! j2e63@set-rib-mark**! (unspecified)) (set! j2e65@rib-label* (unspecified)) (set! j2e67@set-rib-label*! (unspecified)) (set! j2e69@rib-sealed/freq (unspecified)) (set! j2e6b@set-rib-sealed/freq! (unspecified)) (set! j2e6d@rib-cache (unspecified)) (set! j2e6f@set-rib-cache! (unspecified)) (set! j2e71@dummy (unspecified)) (set! j2e73@make-empty-rib (unspecified)) (set! j2e75@extend-rib! (unspecified)) (set! j2e77@extend-rib/nc! (unspecified)) (set! j2e79@make-rib-map (unspecified)) (set! j2e7b@seal-rib! (unspecified)) (set! j2e7d@unseal-rib! (unspecified)) (set! j2e7f@make-full-rib (unspecified)) (set! j2e81@rp (unspecified)) (set! j2e8b@stx? (unspecified)) (set! j2e8d@stx-expr (unspecified)) (set! j2e8f@set-stx-expr! (unspecified)) (set! j2e91@stx-mark* (unspecified)) (set! j2e93@set-stx-mark*! (unspecified)) (set! j2e95@stx-subst* (unspecified)) (set! j2e97@set-stx-subst*! (unspecified)) (set! j2e99@stx-ae* (unspecified)) (set! j2e9b@set-stx-ae*! (unspecified)) (set! j2e9d@dummy (unspecified)) (set! j2e9f@datum->stx (unspecified)) (set! j2ea1@gen-mark (unspecified)) (set! j2ea3@anti-mark (unspecified)) (set! j2ea5@anti-mark? (unspecified)) (set! j2ea7@mkstx (unspecified)) (set! j2ea9@add-mark (unspecified)) (set! j2eab@add-subst (unspecified)) (set! j2ead@syntax-kind? (unspecified)) (set! j2eaf@syntax-vector->list (unspecified)) (set! j2eb1@syntax-pair? (unspecified)) (set! j2eb3@syntax-vector? (unspecified)) (set! j2eb5@syntax-null? (unspecified)) (set! j2eb7@syntax-list? (unspecified)) (set! j2eb9@syntax-car (unspecified)) (set! j2ebb@syntax-cdr (unspecified)) (set! j2ebd@syntax->list (unspecified)) (set! j2ebf@id? (unspecified)) (set! j2ec1@id->sym (unspecified)) (set! j2ec3@bound-id=? (unspecified)) (set! j2ec5@free-id=? (unspecified)) (set! j2ec7@valid-bound-ids? (unspecified)) (set! j2ec9@distinct-bound-ids? (unspecified)) (set! j2ecb@bound-id-member? (unspecified)) (set! j2ecd@self-evaluating? (unspecified)) (set! j2ecf@strip-annotations (unspecified)) (set! j2ed1@strip (unspecified)) (set! j2ed3@stx->datum (unspecified)) (set! j2ed5@id->label (unspecified)) (set! j2ed7@label->binding (unspecified)) (set! j2ed9@make-binding (unspecified)) (set! j2edb@binding-type (unspecified)) (set! j2edd@binding-value (unspecified)) (set! j2edf@raise-unbound-error (unspecified)) (set! j2ee1@syntax-type (unspecified)) (set! j2eef@sanitize-binding (unspecified)) (set! j2ef1@make-variable-transformer (unspecified)) (set! j2ef3@variable-transformer? (unspecified)) (set! j2ef5@variable-transformer-procedure (unspecified)) (set! j2ef7@make-eval-transformer (unspecified)) (set! j3048@parse-define (unspecified)) (set! j304a@parse-define-syntax (unspecified)) (set! j304c@scheme-stx-hashtable (unspecified)) (set! j304e@scheme-stx (unspecified)) (set! j3050@lexical-var (unspecified)) (set! j3052@lexical-mutable? (unspecified)) (set! j3054@set-lexical-mutable! (unspecified)) (set! j3056@add-lexical (unspecified)) (set! j3058@add-lexicals (unspecified)) (set! j305a@letrec-helper (unspecified)) (set! j305c@let-transformer (unspecified)) (set! j305e@letrec-transformer (unspecified)) (set! j3060@letrec*-transformer (unspecified)) (set! j3062@fluid-let-syntax-transformer (unspecified)) (set! j3064@type-descriptor-transformer (unspecified)) (set! j3066@record-type-descriptor-transformer (unspecified)) (set! j3068@record-constructor-descriptor-transformer (unspecified)) (set! j306a@when-macro (unspecified)) (set! j306c@unless-macro (unspecified)) (set! j306e@if-transformer (unspecified)) (set! j3070@and-transformer (unspecified)) (set! j3072@or-transformer (unspecified)) (set! j3074@case-macro (unspecified)) (set! j3076@quote-transformer (unspecified)) (set! j3078@case-lambda-transformer (unspecified)) (set! j307a@lambda-transformer (unspecified)) (set! j307c@bless (unspecified)) (set! j307e@with-syntax-macro (unspecified)) (set! j3080@invalid-fmls-error (unspecified)) (set! j3082@let-macro (unspecified)) (set! j3084@let-values-macro (unspecified)) (set! j3086@let*-values-macro (unspecified)) (set! j3088@trace-lambda-macro (unspecified)) (set! j308a@trace-define-macro (unspecified)) (set! j308c@trace-define-syntax-macro (unspecified)) (set! j308e@trace-let/rec-syntax (unspecified)) (set! j3090@trace-let-syntax-macro (unspecified)) (set! j3092@trace-letrec-syntax-macro (unspecified)) (set! j3094@guard-macro (unspecified)) (set! j3096@define-enumeration-macro (unspecified)) (set! j3098@time-macro (unspecified)) (set! j309a@delay-macro (unspecified)) (set! j309c@assert-macro (unspecified)) (set! j309e@endianness-macro (unspecified)) (set! j30a0@identifier-syntax-macro (unspecified)) (set! j30a2@do-macro (unspecified)) (set! j30a4@let*-macro (unspecified)) (set! j30a6@or-macro (unspecified)) (set! j30a8@and-macro (unspecified)) (set! j30aa@cond-macro (unspecified)) (set! j30ac@do-include (unspecified)) (set! j30ae@include-macro (unspecified)) (set! j30b0@include-into-macro (unspecified)) (set! j30b2@syntax-rules-macro (unspecified)) (set! j30b4@quasiquote-macro (unspecified)) (set! j30b6@quasisyntax-macro (unspecified)) (set! j30b8@define-struct-macro (unspecified)) (set! j30ba@define-record-type-macro (unspecified)) (set! j30bc@define-condition-type-macro (unspecified)) (set! j30be@incorrect-usage-macro (unspecified)) (set! j30c0@parameterize-macro (unspecified)) (set! j30c2@foreign-call-transformer (unspecified)) (set! j30c4@convert-pattern (unspecified)) (set! j30c6@syntax-dispatch (unspecified)) (set! j30c8@ellipsis? (unspecified)) (set! j30ca@underscore? (unspecified)) (set! j30cc@verify-literals (unspecified)) (set! j30ce@syntax-case-transformer (unspecified)) (set! j30d0@ellipsis-map (unspecified)) (set! j30d2@syntax-transformer (unspecified)) (set! j30d4@core-macro-transformer (unspecified)) (set! j30d6@symbol-macro (unspecified)) (set! j30d8@macro-transformer (unspecified)) (set! j30da@local-macro-transformer (unspecified)) (set! j30dc@do-macro-call (unspecified)) (set! j30de@chi-macro (unspecified)) (set! j30e0@chi-local-macro (unspecified)) (set! j30e2@chi-global-macro (unspecified)) (set! j30e4@chi-expr* (unspecified)) (set! j30e6@chi-application (unspecified)) (set! j30e8@chi-expr (unspecified)) (set! j30ea@chi-set! (unspecified)) (set! j30ec@verify-formals (unspecified)) (set! j30ee@chi-lambda-clause (unspecified)) (set! j30f0@chi-lambda-clause* (unspecified)) (set! j30f2@chi-defun (unspecified)) (set! j30f4@chi-rhs (unspecified)) (set! j30f6@expand-interaction-rhs*/init* (unspecified)) (set! j30f8@chi-rhs* (unspecified)) (set! j30fa@find-bound=? (unspecified)) (set! j30fc@find-dups (unspecified)) (set! j30fe@chi-internal (unspecified)) (set! j3100@parse-module (unspecified)) (set! j310a@module-interface? (unspecified)) (set! j310c@module-interface-first-mark (unspecified)) (set! j310e@set-module-interface-first-mark! (unspecified)) (set! j3110@module-interface-exp-id-vec (unspecified)) (set! j3112@set-module-interface-exp-id-vec! (unspecified)) (set! j3114@module-interface-exp-lab-vec (unspecified)) (set! j3116@set-module-interface-exp-lab-vec! (unspecified)) (set! j3118@dummy (unspecified)) (set! j311a@module-interface-exp-id* (unspecified)) (set! j311c@chi-internal-module (unspecified)) (set! j311e@chi-body* (unspecified)) (set! j3120@expand-transformer (unspecified)) (set! j3122@parse-exports (unspecified)) (set! j3124@parse-library-name (unspecified)) (set! j3126@parse-library (unspecified)) (set! j3128@parse-import-spec* (unspecified)) (set! j312a@make-top-rib (unspecified)) (set! j312c@make-collector (unspecified)) (set! j312e@inv-collector (unspecified)) (set! j3130@vis-collector (unspecified)) (set! j3132@imp-collector (unspecified)) (set! j3134@chi-library-internal (unspecified)) (set! j3136@chi-interaction-expr (unspecified)) (set! j3138@library-body-expander (unspecified)) (set! j313a@core-library-expander (unspecified)) (set! j313c@parse-top-level-program (unspecified)) (set! j313e@top-level-expander (unspecified)) (set! j3140@rp (unspecified)) (set! j314a@env? (unspecified)) (set! j314c@env-names (unspecified)) (set! j314e@set-env-names! (unspecified)) (set! j3150@env-labels (unspecified)) (set! j3152@set-env-labels! (unspecified)) (set! j3154@env-itc (unspecified)) (set! j3156@set-env-itc! (unspecified)) (set! j3158@dummy (unspecified)) (set! j315a@rp (unspecified)) (set! j3164@interaction-env? (unspecified)) (set! j3166@interaction-env-rib (unspecified)) (set! j3168@set-interaction-env-rib! (unspecified)) (set! j316a@interaction-env-r (unspecified)) (set! j316c@set-interaction-env-r! (unspecified)) (set! j316e@interaction-env-locs (unspecified)) (set! j3170@set-interaction-env-locs! (unspecified)) (set! j3172@dummy (unspecified)) (set! j3174@interaction-environment-symbols (unspecified)) (set! j3176@environment-bindings (unspecified)) (set! j3178@parse-binding (unspecified)) (set! j317a@environment? (unspecified)) (set! j317c@environment-symbols (unspecified)) (set! j317e@environment (unspecified)) (set! j3180@null-environment (unspecified)) (set! j3182@scheme-report-environment (unspecified)) (set! j3184@expand (unspecified)) (set! j3186@eval (unspecified)) (set! j3188@library-expander (unspecified)) (set! j318a@boot-library-expand (unspecified)) (set! j318c@rev-map-append (unspecified)) (set! j318e@build-exports (unspecified)) (set! j3190@make-export-subst (unspecified)) (set! j3192@make-export-env/macros (unspecified)) (set! j3194@generate-temporaries (unspecified)) (set! j3196@free-identifier=? (unspecified)) (set! j3198@bound-identifier=? (unspecified)) (set! j319a@make-source-condition (unspecified)) (set! j319c@extract-position-condition (unspecified)) (set! j319e@expression-position (unspecified)) (set! j31a0@assertion-error (unspecified)) (set! j31a2@syntax-error (unspecified)) (set! j31a4@syntax-violation* (unspecified)) (set! j31a6@syntax-violation (unspecified)) (set! j31a8@identifier? (unspecified)) (set! j31aa@datum->syntax (unspecified)) (set! j31ac@syntax->datum (unspecified)) (set! j31ae@ungensym-all (unspecified)) (set! j31b0@compile-r6rs-top-level (unspecified)) (set! j31b2@pre-compile-r6rs-top-level (unspecified)) (set! j31b4@interaction-environment (unspecified)) (set! j31b6@top-level-context (unspecified)) (set! j2e3a@file-options-macro (lambda (j31b7@x) (let ((j31ba@valid-option? '#f)) (begin (set! j31ba@valid-option? (lambda (j31c3@x) (and (j2ebf@id? j31c3@x) (memq (j2ec1@id->sym j31c3@x) '(no-fail no-create no-truncate))))) (let ((j31bb@t j31b7@x)) (let ((j31bd@ls/false (j30c6@syntax-dispatch j31bb@t '(_ . each-any)))) (if (and j31bd@ls/false (apply (lambda (j31bf@opt*) (for-all j31ba@valid-option? j31bf@opt*)) j31bd@ls/false)) (apply (lambda (j31c1@opt*) (j307c@bless (list 'make-file-options (list 'quote j31c1@opt*)))) j31bd@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j31bb@t)))))))) (set! j4b0d@j2e3a@file-options-macro j2e3a@file-options-macro) (set! j2e3c@set-cons (lambda (j31c5@x j31c6@ls) (if (memq j31c5@x j31c6@ls) j31c6@ls (cons j31c5@x j31c6@ls)))) (set! j4b0e@j2e3c@set-cons j2e3c@set-cons) (set! j2e3e@set-union (lambda (j31c9@ls1 j31ca@ls2) (if (null? j31c9@ls1) j31ca@ls2 (if (memq (car j31c9@ls1) j31ca@ls2) (j2e3e@set-union (cdr j31c9@ls1) j31ca@ls2) (cons (car j31c9@ls1) (j2e3e@set-union (cdr j31c9@ls1) j31ca@ls2)))))) (set! j4b0f@j2e3e@set-union j2e3e@set-union) (set! j2e43@top-mark* '(top)) (set! j4b10@j2e43@top-mark* j2e43@top-mark*) (set! j2e45@top-marked? (lambda (j31cd@m*) (memq 'top j31cd@m*))) (set! j4b11@j2e45@top-marked? j2e45@top-marked?) (set! j2e47@gen-lexical (lambda (j31cf@sym) (if (symbol? j31cf@sym) (gensym j31cf@sym) (if (j2e8b@stx? j31cf@sym) (j2e47@gen-lexical (j2ec1@id->sym j31cf@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" j31cf@sym))))) (set! j4b12@j2e47@gen-lexical j2e47@gen-lexical) (set! j2e49@gen-global (lambda (j31d1@x) (j2e47@gen-lexical j31d1@x))) (set! j4b13@j2e49@gen-global j2e49@gen-global) (set! j2e4b@gen-label (lambda (j31d3@_) (gensym))) (set! j4b14@j2e4b@gen-label j2e4b@gen-label) (set! j2e4d@gen-top-level-label (lambda (j31d5@id j31d6@rib) (let ((j31da@find '#f)) (begin (set! j31da@find (lambda (j31e5@sym j31e6@mark* j31e7@sym* j31e8@mark** j31e9@label*) (and (pair? j31e7@sym*) (if (and (eq? j31e5@sym (car j31e7@sym*)) (same-marks? j31e6@mark* (car j31e8@mark**))) (car j31e9@label*) (j31da@find j31e5@sym j31e6@mark* (cdr j31e7@sym*) (cdr j31e8@mark**) (cdr j31e9@label*)))))) (let ((j31db@sym (j2ec1@id->sym j31d5@id)) (j31dc@mark* (j2e91@stx-mark* j31d5@id))) (let ((j31df@sym* (j2e5d@rib-sym* j31d6@rib))) (let ((j31e1@t (and (memq j31db@sym (j2e5d@rib-sym* j31d6@rib)) (j31da@find j31db@sym j31dc@mark* j31df@sym* (j2e61@rib-mark** j31d6@rib) (j2e65@rib-label* j31d6@rib))))) (if j31e1@t ((lambda (j31e3@label) (if (j2cd4@j2b21@imported-label->binding j31e3@label) (gensym) j31e3@label)) j31e1@t) (gensym))))))))) (set! j4b15@j2e4d@gen-top-level-label j2e4d@gen-top-level-label) (set! j2e4f@gen-define-label+loc (lambda (j31ef@id j31f0@rib) (let ((j31f3@t (j31b6@top-level-context))) (if j31f3@t ((lambda (j31f5@env) (let ((j31f7@label (j2e4d@gen-top-level-label j31ef@id j31f0@rib)) (j31f8@locs (j316e@interaction-env-locs j31f5@env))) (values j31f7@label (let ((j31fb@t (assq j31f7@label j31f8@locs))) (if j31fb@t (cdr j31fb@t) (let ((j31fd@loc (j2e47@gen-lexical j31ef@id))) (begin (j3170@set-interaction-env-locs! j31f5@env (cons (cons j31f7@label j31fd@loc) j31f8@locs)) j31fd@loc))))))) j31f3@t) (values (gensym) (j2e47@gen-lexical j31ef@id)))))) (set! j4b16@j2e4f@gen-define-label+loc j2e4f@gen-define-label+loc) (set! j2e51@gen-define-label (lambda (j31ff@id j3200@rib) (if (j31b6@top-level-context) (j2e4d@gen-top-level-label j31ff@id j3200@rib) (gensym)))) (set! j4b17@j2e51@gen-define-label j2e51@gen-define-label) (set! j2e5b@rib? (lambda (j3203@x) (and (simple-struct? j3203@x) (eq? (simple-struct-name j3203@x) 'rib)))) (set! j4b18@j2e5b@rib? j2e5b@rib?) (set! j2e5d@rib-sym* (lambda (j3205@x) (simple-struct-ref j3205@x '0))) (set! j4b19@j2e5d@rib-sym* j2e5d@rib-sym*) (set! j2e5f@set-rib-sym*! (lambda (j3207@x j3208@val) (simple-struct-set! j3207@x '0 j3208@val))) (set! j4b1a@j2e5f@set-rib-sym*! j2e5f@set-rib-sym*!) (set! j2e61@rib-mark** (lambda (j320b@x) (simple-struct-ref j320b@x '1))) (set! j4b1b@j2e61@rib-mark** j2e61@rib-mark**) (set! j2e63@set-rib-mark**! (lambda (j320d@x j320e@val) (simple-struct-set! j320d@x '1 j320e@val))) (set! j4b1c@j2e63@set-rib-mark**! j2e63@set-rib-mark**!) (set! j2e65@rib-label* (lambda (j3211@x) (simple-struct-ref j3211@x '2))) (set! j4b1d@j2e65@rib-label* j2e65@rib-label*) (set! j2e67@set-rib-label*! (lambda (j3213@x j3214@val) (simple-struct-set! j3213@x '2 j3214@val))) (set! j4b1e@j2e67@set-rib-label*! j2e67@set-rib-label*!) (set! j2e69@rib-sealed/freq (lambda (j3217@x) (simple-struct-ref j3217@x '3))) (set! j4b1f@j2e69@rib-sealed/freq j2e69@rib-sealed/freq) (set! j2e6b@set-rib-sealed/freq! (lambda (j3219@x j321a@val) (simple-struct-set! j3219@x '3 j321a@val))) (set! j4b20@j2e6b@set-rib-sealed/freq! j2e6b@set-rib-sealed/freq!) (set! j2e6d@rib-cache (lambda (j321d@x) (simple-struct-ref j321d@x '4))) (set! j4b21@j2e6d@rib-cache j2e6d@rib-cache) (set! j2e6f@set-rib-cache! (lambda (j321f@x j3220@val) (simple-struct-set! j321f@x '4 j3220@val))) (set! j4b22@j2e6f@set-rib-cache! j2e6f@set-rib-cache!) (set! j2e71@dummy '3) (set! j4b23@j2e71@dummy j2e71@dummy) (set! j2e73@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! j4b24@j2e73@make-empty-rib j2e73@make-empty-rib) (set! j2e75@extend-rib! (lambda (j3223@rib j3224@id j3225@label) (let ((j322a@find '#f)) (begin (set! j322a@find (lambda (j3237@sym j3238@mark* j3239@sym* j323a@mark** j323b@label*) (and (pair? j3239@sym*) (if (and (eq? j3237@sym (car j3239@sym*)) (same-marks? j3238@mark* (car j323a@mark**))) j323b@label* (j322a@find j3237@sym j3238@mark* (cdr j3239@sym*) (cdr j323a@mark**) (cdr j323b@label*)))))) (begin (if (j2e69@rib-sealed/freq j3223@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" j3223@rib) (void)) (let ((j322b@sym (j2ec1@id->sym j3224@id)) (j322c@mark* (j2e91@stx-mark* j3224@id))) (let ((j322f@sym* (j2e5d@rib-sym* j3223@rib))) (let ((j3231@t (and (memq j322b@sym (j2e5d@rib-sym* j3223@rib)) (j322a@find j322b@sym j322c@mark* j322f@sym* (j2e61@rib-mark** j3223@rib) (j2e65@rib-label* j3223@rib))))) (if j3231@t ((lambda (j3233@p) (if (not (eq? j3225@label (car j3233@p))) (if (j31b6@top-level-context) (set-car! j3233@p j3225@label) (j31a6@syntax-violation '#f '"multiple definitions of identifier" j3224@id)) (void))) j3231@t) (begin (if (j2e6d@rib-cache j3223@rib) (hashtable-update! (j2e6d@rib-cache j3223@rib) j322b@sym (lambda (j3235@e) (cons (cons j322c@mark* j3225@label) j3235@e)) '()) (void)) (j2e5f@set-rib-sym*! j3223@rib (cons j322b@sym j322f@sym*)) (j2e63@set-rib-mark**! j3223@rib (cons j322c@mark* (j2e61@rib-mark** j3223@rib))) (j2e67@set-rib-label*! j3223@rib (cons j3225@label (j2e65@rib-label* j3223@rib))))))))))))) (set! j4b25@j2e75@extend-rib! j2e75@extend-rib!) (set! j2e77@extend-rib/nc! (lambda (j3241@rib j3242@id j3243@label) (let ((j3247@sym (j2ec1@id->sym j3242@id)) (j3248@mark* (j2e91@stx-mark* j3242@id))) (let ((j324b@sym* (j2e5d@rib-sym* j3241@rib))) (begin (if (j2e6d@rib-cache j3241@rib) (hashtable-update! (j2e6d@rib-cache j3241@rib) j3247@sym (lambda (j324d@e) (cons (cons j3248@mark* j3243@label) j324d@e)) '()) (void)) (j2e5f@set-rib-sym*! j3241@rib (cons j3247@sym j324b@sym*)) (j2e63@set-rib-mark**! j3241@rib (cons j3248@mark* (j2e61@rib-mark** j3241@rib))) (j2e67@set-rib-label*! j3241@rib (cons j3243@label (j2e65@rib-label* j3241@rib)))))))) (set! j4b26@j2e77@extend-rib/nc! j2e77@extend-rib/nc!) (set! j2e79@make-rib-map (lambda (j324f@sym*) (let ((j3251@ht (make-eq-hashtable))) (let j3257@f ((j3253@i '0) (j3254@sym* j324f@sym*)) (if (null? j3254@sym*) j3251@ht (begin (hashtable-update! j3251@ht (car j3254@sym*) (lambda (j3259@x) (cons j3253@i j3259@x)) '()) (j3257@f (+ j3253@i '1) (cdr j3254@sym*)))))))) (set! j4b27@j2e79@make-rib-map j2e79@make-rib-map) (set! j2e7b@seal-rib! (lambda (j325b@rib) (let ((j325d@sym* (j2e5d@rib-sym* j325b@rib))) (if (not (null? j325d@sym*)) (begin (j2e5f@set-rib-sym*! j325b@rib (list->vector j325d@sym*)) (j2e63@set-rib-mark**! j325b@rib (list->vector (j2e61@rib-mark** j325b@rib))) (j2e67@set-rib-label*! j325b@rib (list->vector (j2e65@rib-label* j325b@rib))) (j2e6b@set-rib-sealed/freq! j325b@rib (j2e79@make-rib-map j325d@sym*))) (void))))) (set! j4b28@j2e7b@seal-rib! j2e7b@seal-rib!) (set! j2e7d@unseal-rib! (lambda (j325f@rib) (if (j2e69@rib-sealed/freq j325f@rib) (begin (j2e6b@set-rib-sealed/freq! j325f@rib '#f) (j2e5f@set-rib-sym*! j325f@rib (vector->list (j2e5d@rib-sym* j325f@rib))) (j2e63@set-rib-mark**! j325f@rib (vector->list (j2e61@rib-mark** j325f@rib))) (j2e67@set-rib-label*! j325f@rib (vector->list (j2e65@rib-label* j325f@rib)))) (void)))) (set! j4b29@j2e7d@unseal-rib! j2e7d@unseal-rib!) (set! j2e7f@make-full-rib (lambda (j3261@id* j3262@label*) (let ((j3265@r (make-simple-struct 'rib '6 (list (map j2ec1@id->sym j3261@id*) (map j2e91@stx-mark* j3261@id*) j3262@label* '#f '#f)))) (begin (j2e7b@seal-rib! j3265@r) j3265@r)))) (set! j4b2a@j2e7f@make-full-rib j2e7f@make-full-rib) (set! j2e81@rp (j2a06@j28e1@make-record-printer 'stx (lambda (j3267@x j3268@p j3269@wr) (begin (display '"#<syntax " j3268@p) (write (j2ed3@stx->datum j3267@x) j3268@p) (let ((j326d@expr (j2e8d@stx-expr j3267@x))) (if (j29fd@j28cf@annotation? j326d@expr) (let ((j326f@src (j29fe@j28d1@annotation-source j326d@expr))) (if (pair? j326f@src) (begin (display '" [" j3268@p) (display (cdr j326f@src) j3268@p) (display '" of " j3268@p) (display (car j326f@src) j3268@p) (display '"]" j3268@p)) (void))) (void))) (display '">" j3268@p))))) (set! j4b2b@j2e81@rp j2e81@rp) (set! j2e8b@stx? (lambda (j3271@x) (and (simple-struct? j3271@x) (eq? (simple-struct-name j3271@x) 'stx)))) (set! j4b2c@j2e8b@stx? j2e8b@stx?) (set! j2e8d@stx-expr (lambda (j3273@x) (simple-struct-ref j3273@x '0))) (set! j4b2d@j2e8d@stx-expr j2e8d@stx-expr) (set! j2e8f@set-stx-expr! (lambda (j3275@x j3276@val) (simple-struct-set! j3275@x '0 j3276@val))) (set! j4b2e@j2e8f@set-stx-expr! j2e8f@set-stx-expr!) (set! j2e91@stx-mark* (lambda (j3279@x) (simple-struct-ref j3279@x '1))) (set! j4b2f@j2e91@stx-mark* j2e91@stx-mark*) (set! j2e93@set-stx-mark*! (lambda (j327b@x j327c@val) (simple-struct-set! j327b@x '1 j327c@val))) (set! j4b30@j2e93@set-stx-mark*! j2e93@set-stx-mark*!) (set! j2e95@stx-subst* (lambda (j327f@x) (simple-struct-ref j327f@x '2))) (set! j4b31@j2e95@stx-subst* j2e95@stx-subst*) (set! j2e97@set-stx-subst*! (lambda (j3281@x j3282@val) (simple-struct-set! j3281@x '2 j3282@val))) (set! j4b32@j2e97@set-stx-subst*! j2e97@set-stx-subst*!) (set! j2e99@stx-ae* (lambda (j3285@x) (simple-struct-ref j3285@x '3))) (set! j4b33@j2e99@stx-ae* j2e99@stx-ae*) (set! j2e9b@set-stx-ae*! (lambda (j3287@x j3288@val) (simple-struct-set! j3287@x '3 j3288@val))) (set! j4b34@j2e9b@set-stx-ae*! j2e9b@set-stx-ae*!) (set! j2e9d@dummy '3) (set! j4b35@j2e9d@dummy j2e9d@dummy) (set! j2e9f@datum->stx (lambda (j328b@id j328c@datum) (make-simple-struct 'stx '5 (list j328c@datum (j2e91@stx-mark* j328b@id) (j2e95@stx-subst* j328b@id) (j2e99@stx-ae* j328b@id))))) (set! j4b36@j2e9f@datum->stx j2e9f@datum->stx) (set! j2ea1@gen-mark (lambda () (string '#\m))) (set! j4b37@j2ea1@gen-mark j2ea1@gen-mark) (set! j2ea3@anti-mark '#f) (set! j4b38@j2ea3@anti-mark j2ea3@anti-mark) (set! j2ea5@anti-mark? not) (set! j4b39@j2ea5@anti-mark? j2ea5@anti-mark?) (set! j2ea7@mkstx (lambda (j328f@e j3290@m* j3291@s* j3292@ae*) (if (and (j2e8b@stx? j328f@e) (not (j2e45@top-marked? j3290@m*))) (call-with-values (lambda () (join-wraps j3290@m* j3291@s* j3292@ae* j328f@e)) (lambda (j329d@j3298 j329e@j329a j329f@j329c) (let ((j32a3@ae* j329f@j329c) (j32a4@s* j329e@j329a) (j32a5@m* j329d@j3298)) (make-simple-struct 'stx '5 (list (j2e8d@stx-expr j328f@e) j32a5@m* j32a4@s* j32a3@ae*))))) (make-simple-struct 'stx '5 (list j328f@e j3290@m* j3291@s* j3292@ae*))))) (set! j4b3a@j2ea7@mkstx j2ea7@mkstx) (set! j2ea9@add-mark (lambda (j32a9@m j32aa@e j32ab@ae) (j2ea7@mkstx j32aa@e (list j32a9@m) '(shift) (list j32ab@ae)))) (set! j4b3b@j2ea9@add-mark j2ea9@add-mark) (set! j2eab@add-subst (lambda (j32af@subst j32b0@e) (j2ea7@mkstx j32b0@e '() (list j32af@subst) '()))) (set! j4b3c@j2eab@add-subst j2eab@add-subst) (set! j2ead@syntax-kind? (lambda (j32b3@x j32b4@p?) (if (j2e8b@stx? j32b3@x) (j2ead@syntax-kind? (j2e8d@stx-expr j32b3@x) j32b4@p?) (if (j29fd@j28cf@annotation? j32b3@x) (j2ead@syntax-kind? (j29ff@j28d3@annotation-expression j32b3@x) j32b4@p?) (j32b4@p? j32b3@x))))) (set! j4b3d@j2ead@syntax-kind? j2ead@syntax-kind?) (set! j2eaf@syntax-vector->list (lambda (j32b7@x) (if (j2e8b@stx? j32b7@x) (let ((j32b9@ls (j2eaf@syntax-vector->list (j2e8d@stx-expr j32b7@x))) (j32ba@m* (j2e91@stx-mark* j32b7@x)) (j32bb@s* (j2e95@stx-subst* j32b7@x)) (j32bc@ae* (j2e99@stx-ae* j32b7@x))) (map (lambda (j32c1@x) (j2ea7@mkstx j32c1@x j32ba@m* j32bb@s* j32bc@ae*)) j32b9@ls)) (if (j29fd@j28cf@annotation? j32b7@x) (j2eaf@syntax-vector->list (j29ff@j28d3@annotation-expression j32b7@x)) (if (vector? j32b7@x) (vector->list j32b7@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" j32b7@x)))))) (set! j4b3e@j2eaf@syntax-vector->list j2eaf@syntax-vector->list) (set! j2eb1@syntax-pair? (lambda (j32c3@x) (j2ead@syntax-kind? j32c3@x pair?))) (set! j4b3f@j2eb1@syntax-pair? j2eb1@syntax-pair?) (set! j2eb3@syntax-vector? (lambda (j32c5@x) (j2ead@syntax-kind? j32c5@x vector?))) (set! j4b40@j2eb3@syntax-vector? j2eb3@syntax-vector?) (set! j2eb5@syntax-null? (lambda (j32c7@x) (j2ead@syntax-kind? j32c7@x null?))) (set! j4b41@j2eb5@syntax-null? j2eb5@syntax-null?) (set! j2eb7@syntax-list? (lambda (j32c9@x) (or (j2eb5@syntax-null? j32c9@x) (and (j2eb1@syntax-pair? j32c9@x) (j2eb7@syntax-list? (j2ebb@syntax-cdr j32c9@x)))))) (set! j4b42@j2eb7@syntax-list? j2eb7@syntax-list?) (set! j2eb9@syntax-car (lambda (j32cb@x) (if (j2e8b@stx? j32cb@x) (j2ea7@mkstx (j2eb9@syntax-car (j2e8d@stx-expr j32cb@x)) (j2e91@stx-mark* j32cb@x) (j2e95@stx-subst* j32cb@x) (j2e99@stx-ae* j32cb@x)) (if (j29fd@j28cf@annotation? j32cb@x) (j2eb9@syntax-car (j29ff@j28d3@annotation-expression j32cb@x)) (if (pair? j32cb@x) (car j32cb@x) (assertion-violation 'syntax-car '"BUG: not a pair" j32cb@x)))))) (set! j4b43@j2eb9@syntax-car j2eb9@syntax-car) (set! j2ebb@syntax-cdr (lambda (j32cd@x) (if (j2e8b@stx? j32cd@x) (j2ea7@mkstx (j2ebb@syntax-cdr (j2e8d@stx-expr j32cd@x)) (j2e91@stx-mark* j32cd@x) (j2e95@stx-subst* j32cd@x) (j2e99@stx-ae* j32cd@x)) (if (j29fd@j28cf@annotation? j32cd@x) (j2ebb@syntax-cdr (j29ff@j28d3@annotation-expression j32cd@x)) (if (pair? j32cd@x) (cdr j32cd@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" j32cd@x)))))) (set! j4b44@j2ebb@syntax-cdr j2ebb@syntax-cdr) (set! j2ebd@syntax->list (lambda (j32cf@x) (if (j2eb1@syntax-pair? j32cf@x) (cons (j2eb9@syntax-car j32cf@x) (j2ebd@syntax->list (j2ebb@syntax-cdr j32cf@x))) (if (j2eb5@syntax-null? j32cf@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" j32cf@x))))) (set! j4b45@j2ebd@syntax->list j2ebd@syntax->list) (set! j2ebf@id? (lambda (j32d1@x) (and (j2e8b@stx? j32d1@x) (symbol? (j2e8d@stx-expr j32d1@x))))) (set! j4b46@j2ebf@id? j2ebf@id?) (set! j2ec1@id->sym (lambda (j32d3@x) (j2e8d@stx-expr j32d3@x))) (set! j4b47@j2ec1@id->sym j2ec1@id->sym) (set! j2ec3@bound-id=? (lambda (j32d5@x j32d6@y) (and (eq? (j2ec1@id->sym j32d5@x) (j2ec1@id->sym j32d6@y)) (same-marks? (j2e91@stx-mark* j32d5@x) (j2e91@stx-mark* j32d6@y))))) (set! j4b48@j2ec3@bound-id=? j2ec3@bound-id=?) (set! j2ec5@free-id=? (lambda (j32d9@i j32da@j) (let ((j32dd@t0 (id->real-label j32d9@i)) (j32de@t1 (id->real-label j32da@j))) (if (or j32dd@t0 j32de@t1) (eq? j32dd@t0 j32de@t1) (eq? (j2ec1@id->sym j32d9@i) (j2ec1@id->sym j32da@j)))))) (set! j4b49@j2ec5@free-id=? j2ec5@free-id=?) (set! j2ec7@valid-bound-ids? (lambda (j32e1@id*) (and (for-all j2ebf@id? j32e1@id*) (j2ec9@distinct-bound-ids? j32e1@id*)))) (set! j4b4a@j2ec7@valid-bound-ids? j2ec7@valid-bound-ids?) (set! j2ec9@distinct-bound-ids? (lambda (j32e3@id*) (or (null? j32e3@id*) (and (not (j2ecb@bound-id-member? (car j32e3@id*) (cdr j32e3@id*))) (j2ec9@distinct-bound-ids? (cdr j32e3@id*)))))) (set! j4b4b@j2ec9@distinct-bound-ids? j2ec9@distinct-bound-ids?) (set! j2ecb@bound-id-member? (lambda (j32e5@id j32e6@id*) (and (pair? j32e6@id*) (or (j2ec3@bound-id=? j32e5@id (car j32e6@id*)) (j2ecb@bound-id-member? j32e5@id (cdr j32e6@id*)))))) (set! j4b4c@j2ecb@bound-id-member? j2ecb@bound-id-member?) (set! j2ecd@self-evaluating? (lambda (j32e9@x) (or (number? j32e9@x) (string? j32e9@x) (char? j32e9@x) (boolean? j32e9@x) (regexp? j32e9@x) (bytevector? j32e9@x)))) (set! j4b4d@j2ecd@self-evaluating? j2ecd@self-evaluating?) (set! j2ecf@strip-annotations (lambda (j32eb@x) (if (pair? j32eb@x) (cons (j2ecf@strip-annotations (car j32eb@x)) (j2ecf@strip-annotations (cdr j32eb@x))) (if (vector? j32eb@x) (vector-map j2ecf@strip-annotations j32eb@x) (if (j29fd@j28cf@annotation? j32eb@x) (j29fc@j28cd@annotation-stripped j32eb@x) j32eb@x))))) (set! j4b4e@j2ecf@strip-annotations j2ecf@strip-annotations) (set! j2ed1@strip (lambda (j32ed@x j32ee@m*) (if (j2e45@top-marked? j32ee@m*) (if (or (j29fd@j28cf@annotation? j32ed@x) (and (pair? j32ed@x) (j29fd@j28cf@annotation? (car j32ed@x))) (and (vector? j32ed@x) (> (vector-length j32ed@x) '0) (j29fd@j28cf@annotation? (vector-ref j32ed@x '0)))) (j2ecf@strip-annotations j32ed@x) j32ed@x) (let j32f3@f ((j32f1@x j32ed@x)) (if (j2e8b@stx? j32f1@x) (j2ed1@strip (j2e8d@stx-expr j32f1@x) (j2e91@stx-mark* j32f1@x)) (if (j29fd@j28cf@annotation? j32f1@x) (j29fc@j28cd@annotation-stripped j32f1@x) (if (pair? j32f1@x) (let ((j32f5@a (j32f3@f (car j32f1@x))) (j32f6@d (j32f3@f (cdr j32f1@x)))) (if (and (eq? j32f5@a (car j32f1@x)) (eq? j32f6@d (cdr j32f1@x))) j32f1@x (cons j32f5@a j32f6@d))) (if (vector? j32f1@x) (let ((j32f9@old (vector->list j32f1@x))) (let ((j32fb@new (map j32f3@f j32f9@old))) (if (for-all eq? j32f9@old j32fb@new) j32f1@x (list->vector j32fb@new)))) j32f1@x)))))))) (set! j4b4f@j2ed1@strip j2ed1@strip) (set! j2ed3@stx->datum (lambda (j32fd@x) (j2ed1@strip j32fd@x '()))) (set! j4b50@j2ed3@stx->datum j2ed3@stx->datum) (set! j2ed5@id->label (lambda (j32ff@id) (or (id->real-label j32ff@id) (let ((j3301@t (j31b6@top-level-context))) (if j3301@t ((lambda (j3303@env) (let ((j3305@rib (j3166@interaction-env-rib j3303@env))) (call-with-values (lambda () (j2e4f@gen-define-label+loc j32ff@id j3305@rib)) (lambda (j330b@j3308 j330c@j330a) (let ((j330f@loc_ j330c@j330a) (j3310@lab j330b@j3308)) (begin (j2e75@extend-rib! j3305@rib j32ff@id j3310@lab) j3310@lab)))))) j3301@t) '#f))))) (set! j4b51@j2ed5@id->label j2ed5@id->label) (set! j2ed7@label->binding (lambda (j3313@x j3314@r) (let ((j3317@t (j2cd4@j2b21@imported-label->binding j3313@x))) (if j3317@t ((lambda (j3319@b) (if (and (pair? j3319@b) (eq? (car j3319@b) '$core-rtd)) (cons '$rtd (map j307c@bless (cdr j3319@b))) (if (and (pair? j3319@b) (eq? (car j3319@b) 'global-rtd)) (let ((j331b@lib (cadr j3319@b)) (j331c@loc (cddr j3319@b))) (cons '$rtd (symbol-value j331c@loc))) j3319@b))) j3317@t) (let ((j331f@t (assq j3313@x j3314@r))) (if j331f@t (cdr j331f@t) (let ((j3321@t (j31b6@top-level-context))) (if j3321@t ((lambda (j3323@env) (let ((j3325@t (assq j3313@x (j316e@interaction-env-locs j3323@env)))) (if j3325@t ((lambda (j3327@p) (cons* 'lexical (cdr j3327@p) '#f)) j3325@t) '(displaced-lexical . #f)))) j3321@t) '(displaced-lexical . #f))))))))) (set! j4b52@j2ed7@label->binding j2ed7@label->binding) (set! j2ed9@make-binding cons) (set! j4b53@j2ed9@make-binding j2ed9@make-binding) (set! j2edb@binding-type car) (set! j4b54@j2edb@binding-type j2edb@binding-type) (set! j2edd@binding-value cdr) (set! j4b55@j2edd@binding-value j2edd@binding-value) (set! j2edf@raise-unbound-error (lambda (j3329@id) (j31a4@syntax-violation* '#f '"unbound identifier" j3329@id (j4f4b@j4d91@make-undefined-violation)))) (set! j4b56@j2edf@raise-unbound-error j2edf@raise-unbound-error) (set! j2ee1@syntax-type (lambda (j332b@e j332c@r) (if (j2ebf@id? j332b@e) (let ((j332f@id j332b@e)) (let ((j3331@label (j2ed5@id->label j332f@id))) (let ((j3333@b (j2ed7@label->binding j3331@label j332c@r))) (let ((j3335@type (j2edb@binding-type j3333@b))) (begin (if (not j3331@label) (j2edf@raise-unbound-error j332f@id) (void)) (let ((j3337@t j3335@type)) (if (memv j3337@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values j3335@type (j2edd@binding-value j3333@b) j332f@id) (values 'other '#f '#f)))))))) (if (j2eb1@syntax-pair? j332b@e) (let ((j3339@id (j2eb9@syntax-car j332b@e))) (if (j2ebf@id? j3339@id) (let ((j333b@label (j2ed5@id->label j3339@id))) (let ((j333d@b (j2ed7@label->binding j333b@label j332c@r))) (let ((j333f@type (j2edb@binding-type j333d@b))) (begin (if (not j333b@label) (j2edf@raise-unbound-error j3339@id) (void)) (let ((j3341@t j333f@type)) (if (memv j3341@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values j333f@type (j2edd@binding-value j333d@b) j3339@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((j3343@d (j2ed3@stx->datum j332b@e))) (if (j2ecd@self-evaluating? j3343@d) (values 'constant j3343@d '#f) (values 'other '#f '#f))))))) (set! j4b57@j2ee1@syntax-type j2ee1@syntax-type) (set! j2eef@sanitize-binding (lambda (j3345@x j3346@src) (if (procedure? j3345@x) (cons* 'local-macro j3345@x j3346@src) (if (and (pair? j3345@x) (eq? (car j3345@x) 'macro!) (procedure? (cdr j3345@x))) (cons* 'local-macro! (cdr j3345@x) j3346@src) (if (and (pair? j3345@x) (eq? (car j3345@x) '$rtd)) j3345@x (assertion-violation 'expand '"invalid transformer" j3345@x)))))) (set! j4b58@j2eef@sanitize-binding j2eef@sanitize-binding) (set! j2ef1@make-variable-transformer (lambda (j3349@x) (if (procedure? j3349@x) (cons 'macro! j3349@x) (assertion-violation 'make-variable-transformer '"not a procedure" j3349@x)))) (set! j4b59@j2ef1@make-variable-transformer j2ef1@make-variable-transformer) (set! j2ef3@variable-transformer? (lambda (j334b@x) (and (pair? j334b@x) (eq? (car j334b@x) 'macro!) (procedure? (cdr j334b@x))))) (set! j4b5a@j2ef3@variable-transformer? j2ef3@variable-transformer?) (set! j2ef5@variable-transformer-procedure (lambda (j334d@x) (if (j2ef3@variable-transformer? j334d@x) (cdr j334d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" j334d@x)))) (set! j4b5b@j2ef5@variable-transformer-procedure j2ef5@variable-transformer-procedure) (set! j2ef7@make-eval-transformer (lambda (j334f@x) (j2eef@sanitize-binding (eval-core (j2a5f@j2a17@expanded->core j334f@x)) j334f@x))) (set! j4b5c@j2ef7@make-eval-transformer j2ef7@make-eval-transformer) (set! j3048@parse-define (lambda (j3351@x) (let ((j3353@t j3351@x)) (let ((j3355@ls/false (j30c6@syntax-dispatch j3353@t '(_ (any . any) any . each-any)))) (if (and j3355@ls/false (apply (lambda (j3357@id j3358@fmls j3359@b j335a@b*) (j2ebf@id? j3357@id)) j3355@ls/false)) (apply (lambda (j335f@id j3360@fmls j3361@b j3362@b*) (begin (j30ec@verify-formals j3360@fmls j3351@x) (values j335f@id (cons 'defun (cons j3360@fmls (cons j3361@b j3362@b*)))))) j3355@ls/false) (let ((j3367@t j3353@t)) (let ((j3369@ls/false (j30c6@syntax-dispatch j3367@t '(_ any any)))) (if (and j3369@ls/false (apply (lambda (j336b@id j336c@val) (j2ebf@id? j336b@id)) j3369@ls/false)) (apply (lambda (j336f@id j3370@val) (values j336f@id (cons 'expr j3370@val))) j3369@ls/false) (let ((j3373@t j3367@t)) (let ((j3375@ls/false (j30c6@syntax-dispatch j3373@t '(_ any)))) (if (and j3375@ls/false (apply (lambda (j3377@id) (j2ebf@id? j3377@id)) j3375@ls/false)) (apply (lambda (j3379@id) (values j3379@id (cons 'expr (j307c@bless '(void))))) j3375@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3373@t)))))))))))) (set! j4b5d@j3048@parse-define j3048@parse-define) (set! j304a@parse-define-syntax (lambda (j337b@x) (let ((j337d@t j337b@x)) (let ((j337f@ls/false (j30c6@syntax-dispatch j337d@t '(_ any any)))) (if (and j337f@ls/false (apply (lambda (j3381@id j3382@val) (j2ebf@id? j3381@id)) j337f@ls/false)) (apply (lambda (j3385@id j3386@val) (values j3385@id j3386@val)) j337f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j337d@t)))))) (set! j4b5e@j304a@parse-define-syntax j304a@parse-define-syntax) (set! j304c@scheme-stx-hashtable (make-eq-hashtable)) (set! j4b5f@j304c@scheme-stx-hashtable j304c@scheme-stx-hashtable) (set! j304e@scheme-stx (lambda (j3389@sym) (or (hashtable-ref j304c@scheme-stx-hashtable j3389@sym '#f) (let ((j338b@subst (j2cb0@j2ad9@library-subst (j2cce@j2b15@find-library-by-name '(psyntax system $all))))) (let ((j338d@stx (make-simple-struct 'stx '5 (list j3389@sym j2e43@top-mark* '() '())))) (let ((j338f@stx (let ((j3391@t (assq j3389@sym j338b@subst))) (if j3391@t ((lambda (j3393@x) (let ((j3395@name (car j3393@x)) (j3396@label (cdr j3393@x))) (j2eab@add-subst (make-simple-struct 'rib '6 (list (list j3395@name) (list j2e43@top-mark*) (list j3396@label) '#f '#f)) j338d@stx))) j3391@t) j338d@stx)))) (begin (hashtable-set! j304c@scheme-stx-hashtable j3389@sym j338f@stx) j338f@stx))))))) (set! j4b60@j304e@scheme-stx j304e@scheme-stx) (set! j3050@lexical-var car) (set! j4b61@j3050@lexical-var j3050@lexical-var) (set! j3052@lexical-mutable? cdr) (set! j4b62@j3052@lexical-mutable? j3052@lexical-mutable?) (set! j3054@set-lexical-mutable! set-cdr!) (set! j4b63@j3054@set-lexical-mutable! j3054@set-lexical-mutable!) (set! j3056@add-lexical (lambda (j3399@lab j339a@lex j339b@r) (cons (cons* j3399@lab 'lexical j339a@lex '#f) j339b@r))) (set! j4b64@j3056@add-lexical j3056@add-lexical) (set! j3058@add-lexicals (lambda (j339f@lab* j33a0@lex* j33a1@r) (if (null? j339f@lab*) j33a1@r (j3058@add-lexicals (cdr j339f@lab*) (cdr j33a0@lex*) (j3056@add-lexical (car j339f@lab*) (car j33a0@lex*) j33a1@r))))) (set! j4b65@j3058@add-lexicals j3058@add-lexicals) (set! j305a@letrec-helper (lambda (j33a5@e j33a6@r j33a7@mr j33a8@build) (let ((j33ad@t j33a5@e)) (let ((j33af@ls/false (j30c6@syntax-dispatch j33ad@t '(_ #(each (any any)) any . each-any)))) (if j33af@ls/false (apply (lambda (j33b1@lhs* j33b2@rhs* j33b3@b j33b4@b*) (if (not (j2ec7@valid-bound-ids? j33b1@lhs*)) (j3080@invalid-fmls-error j33a5@e j33b1@lhs*) (let ((j33b9@lex* (map j2e47@gen-lexical j33b1@lhs*)) (j33ba@lab* (map j2e4b@gen-label j33b1@lhs*))) (let ((j33bd@rib (j2e7f@make-full-rib j33b1@lhs* j33ba@lab*)) (j33be@r (j3058@add-lexicals j33ba@lab* j33b9@lex* j33a6@r))) (let ((j33c1@body (j30fe@chi-internal (j2eab@add-subst j33bd@rib (cons j33b3@b j33b4@b*)) j33be@r j33a7@mr)) (j33c2@rhs* (j30e4@chi-expr* (map (lambda (j33c5@x) (j2eab@add-subst j33bd@rib j33c5@x)) j33b2@rhs*) j33be@r j33a7@mr))) (j33a8@build '#f j33b9@lex* j33c2@rhs* j33c1@body)))))) j33af@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j33ad@t)))))) (set! j4b66@j305a@letrec-helper j305a@letrec-helper) (set! j305c@let-transformer (lambda (j33c7@e j33c8@r j33c9@mr) (let ((j33cd@t j33c7@e)) (let ((j33cf@ls/false (j30c6@syntax-dispatch j33cd@t '(_ #(each (any any)) any . each-any)))) (if j33cf@ls/false (apply (lambda (j33d1@lhs* j33d2@rhs* j33d3@b j33d4@b*) (if (not (j2ec7@valid-bound-ids? j33d1@lhs*)) (j3080@invalid-fmls-error j33c7@e j33d1@lhs*) (let ((j33d9@lex* (map j2e47@gen-lexical j33d1@lhs*)) (j33da@lab* (map j2e4b@gen-label j33d1@lhs*)) (j33db@rhs* (j30e4@chi-expr* j33d2@rhs* j33c8@r j33c9@mr))) (let ((j33df@rib (j2e7f@make-full-rib j33d1@lhs* j33da@lab*)) (j33e0@r (j3058@add-lexicals j33da@lab* j33d9@lex* j33c8@r))) (let ((j33e3@body (j30fe@chi-internal (j2eab@add-subst j33df@rib (cons j33d3@b j33d4@b*)) j33e0@r j33c9@mr))) (j2e27@j2d84@build-let '#f j33d9@lex* j33db@rhs* j33e3@body)))))) j33cf@ls/false) (let ((j33e5@t j33cd@t)) (let ((j33e7@ls/false (j30c6@syntax-dispatch j33e5@t '(_ any #(each (any any)) any . each-any)))) (if j33e7@ls/false (apply (lambda (j33e9@loop j33ea@lhs* j33eb@rhs* j33ec@b j33ed@b*) (if (not (j2ec7@valid-bound-ids? j33ea@lhs*)) (j3080@invalid-fmls-error j33c7@e j33ea@lhs*) (let ((j33f3@lex* (map j2e47@gen-lexical j33ea@lhs*)) (j33f4@lab* (map j2e4b@gen-label j33ea@lhs*)) (j33f5@rhs* (j30e4@chi-expr* j33eb@rhs* j33c8@r j33c9@mr)) (j33f6@loop-lex (j2e47@gen-lexical j33e9@loop)) (j33f7@loop-lab (j2e4b@gen-label j33e9@loop))) (let ((j33fd@loop-rib (j2e7f@make-full-rib (list j33e9@loop) (list j33f7@loop-lab))) (j33fe@rib (j2e7f@make-full-rib j33ea@lhs* j33f4@lab*)) (j33ff@r (j3058@add-lexicals (cons j33f7@loop-lab j33f4@lab*) (cons j33f6@loop-lex j33f3@lex*) j33c8@r))) (let ((j3403@body (j30fe@chi-internal (j2eab@add-subst j33fd@loop-rib (j2eab@add-subst j33fe@rib (cons j33ec@b j33ed@b*))) j33ff@r j33c9@mr))) (j2e28@j2d86@build-named-let '#f j33f6@loop-lex j33f3@lex* j33f5@rhs* j3403@body)))))) j33e7@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j33e5@t))))))))) (set! j4b67@j305c@let-transformer j305c@let-transformer) (set! j305e@letrec-transformer (lambda (j3405@e j3406@r j3407@mr) (j305a@letrec-helper j3405@e j3406@r j3407@mr j2e26@j2d82@build-letrec))) (set! j4b68@j305e@letrec-transformer j305e@letrec-transformer) (set! j3060@letrec*-transformer (lambda (j340b@e j340c@r j340d@mr) (j305a@letrec-helper j340b@e j340c@r j340d@mr j2e29@j2d88@build-letrec*))) (set! j4b69@j3060@letrec*-transformer j3060@letrec*-transformer) (set! j3062@fluid-let-syntax-transformer (lambda (j3411@e j3412@r j3413@mr) (let ((j3418@lookup '#f)) (begin (set! j3418@lookup (lambda (j342b@x) (or (j2ed5@id->label j342b@x) (j31a6@syntax-violation '#f '"unbound identifier" j3411@e j342b@x)))) (let ((j3419@t j3411@e)) (let ((j341b@ls/false (j30c6@syntax-dispatch j3419@t '(_ #(each (any any)) any . each-any)))) (if j341b@ls/false (apply (lambda (j341d@lhs* j341e@rhs* j341f@b j3420@b*) (if (not (j2ec7@valid-bound-ids? j341d@lhs*)) (j3080@invalid-fmls-error j3411@e j341d@lhs*) (let ((j3425@lab* (map j3418@lookup j341d@lhs*)) (j3426@rhs* (map (lambda (j3429@x) (j2ef7@make-eval-transformer (j3120@expand-transformer j3429@x j3413@mr))) j341e@rhs*))) (j30fe@chi-internal (cons j341f@b j3420@b*) (append (map cons j3425@lab* j3426@rhs*) j3412@r) (append (map cons j3425@lab* j3426@rhs*) j3413@mr))))) j341b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3419@t)))))))) (set! j4b6a@j3062@fluid-let-syntax-transformer j3062@fluid-let-syntax-transformer) (set! j3064@type-descriptor-transformer (lambda (j342d@e j342e@r j342f@mr) (let ((j3433@t j342d@e)) (let ((j3435@ls/false (j30c6@syntax-dispatch j3433@t '(_ any)))) (if (and j3435@ls/false (apply (lambda (j3437@id) (j2ebf@id? j3437@id)) j3435@ls/false)) (apply (lambda (j3439@id) (let ((j343b@lab (j2ed5@id->label j3439@id))) (let ((j343d@b (j2ed7@label->binding j343b@lab j342e@r))) (let ((j343f@type (j2edb@binding-type j343d@b))) (begin (if (not j343b@lab) (j2edf@raise-unbound-error j3439@id) (void)) (if (not (and (eq? j343f@type '$rtd) (not (list? (j2edd@binding-value j343d@b))))) (j31a6@syntax-violation '#f '"not a record type" j342d@e) (void)) (list 'quote (j2edd@binding-value j343d@b))))))) j3435@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3433@t)))))) (set! j4b6b@j3064@type-descriptor-transformer j3064@type-descriptor-transformer) (set! j3066@record-type-descriptor-transformer (lambda (j3441@e j3442@r j3443@mr) (let ((j3447@t j3441@e)) (let ((j3449@ls/false (j30c6@syntax-dispatch j3447@t '(_ any)))) (if (and j3449@ls/false (apply (lambda (j344b@id) (j2ebf@id? j344b@id)) j3449@ls/false)) (apply (lambda (j344d@id) (let ((j344f@lab (j2ed5@id->label j344d@id))) (let ((j3451@b (j2ed7@label->binding j344f@lab j3442@r))) (let ((j3453@type (j2edb@binding-type j3451@b))) (begin (if (not j344f@lab) (j2edf@raise-unbound-error j344d@id) (void)) (if (not (and (eq? j3453@type '$rtd) (list? (j2edd@binding-value j3451@b)))) (j31a6@syntax-violation '#f '"not a record type" j3441@e) (void)) (j30e8@chi-expr (car (j2edd@binding-value j3451@b)) j3442@r j3443@mr)))))) j3449@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3447@t)))))) (set! j4b6c@j3066@record-type-descriptor-transformer j3066@record-type-descriptor-transformer) (set! j3068@record-constructor-descriptor-transformer (lambda (j3455@e j3456@r j3457@mr) (let ((j345b@t j3455@e)) (let ((j345d@ls/false (j30c6@syntax-dispatch j345b@t '(_ any)))) (if (and j345d@ls/false (apply (lambda (j345f@id) (j2ebf@id? j345f@id)) j345d@ls/false)) (apply (lambda (j3461@id) (let ((j3463@lab (j2ed5@id->label j3461@id))) (let ((j3465@b (j2ed7@label->binding j3463@lab j3456@r))) (let ((j3467@type (j2edb@binding-type j3465@b))) (begin (if (not j3463@lab) (j2edf@raise-unbound-error j3461@id) (void)) (if (not (and (eq? j3467@type '$rtd) (list? (j2edd@binding-value j3465@b)))) (j31a6@syntax-violation '#f '"invalid type" j3455@e) (void)) (j30e8@chi-expr (cadr (j2edd@binding-value j3465@b)) j3456@r j3457@mr)))))) j345d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j345b@t)))))) (set! j4b6d@j3068@record-constructor-descriptor-transformer j3068@record-constructor-descriptor-transformer) (set! j306a@when-macro (lambda (j3469@e) (let ((j346b@t j3469@e)) (let ((j346d@ls/false (j30c6@syntax-dispatch j346b@t '(_ any any . each-any)))) (if j346d@ls/false (apply (lambda (j346f@test j3470@e j3471@e*) (j307c@bless (list 'if j346f@test (cons 'begin (cons j3470@e j3471@e*))))) j346d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j346b@t)))))) (set! j4b6e@j306a@when-macro j306a@when-macro) (set! j306c@unless-macro (lambda (j3475@e) (let ((j3477@t j3475@e)) (let ((j3479@ls/false (j30c6@syntax-dispatch j3477@t '(_ any any . each-any)))) (if j3479@ls/false (apply (lambda (j347b@test j347c@e j347d@e*) (j307c@bless (list 'if (list 'not j347b@test) (cons 'begin (cons j347c@e j347d@e*))))) j3479@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3477@t)))))) (set! j4b6f@j306c@unless-macro j306c@unless-macro) (set! j306e@if-transformer (lambda (j3481@e j3482@r j3483@mr) (let ((j3487@t j3481@e)) (let ((j3489@ls/false (j30c6@syntax-dispatch j3487@t '(_ any any any)))) (if j3489@ls/false (apply (lambda (j348b@e0 j348c@e1 j348d@e2) (list 'if (j30e8@chi-expr j348b@e0 j3482@r j3483@mr) (j30e8@chi-expr j348c@e1 j3482@r j3483@mr) (j30e8@chi-expr j348d@e2 j3482@r j3483@mr))) j3489@ls/false) (let ((j3491@t j3487@t)) (let ((j3493@ls/false (j30c6@syntax-dispatch j3491@t '(_ any any)))) (if j3493@ls/false (apply (lambda (j3495@e0 j3496@e1) (list 'if (j30e8@chi-expr j3495@e0 j3482@r j3483@mr) (j30e8@chi-expr j3496@e1 j3482@r j3483@mr) (j2e25@j2d80@build-void))) j3493@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3491@t))))))))) (set! j4b70@j306e@if-transformer j306e@if-transformer) (set! j3070@and-transformer (lambda (j3499@e j349a@r j349b@mr) (let ((j349f@t j3499@e)) (let ((j34a1@ls/false (j30c6@syntax-dispatch j349f@t '(_ . each-any)))) (if j34a1@ls/false (apply (lambda (j34a3@e*) (cons 'and (j30e4@chi-expr* j34a3@e* j349a@r j349b@mr))) j34a1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j349f@t)))))) (set! j4b71@j3070@and-transformer j3070@and-transformer) (set! j3072@or-transformer (lambda (j34a5@e j34a6@r j34a7@mr) (let ((j34ab@t j34a5@e)) (let ((j34ad@ls/false (j30c6@syntax-dispatch j34ab@t '(_ . each-any)))) (if j34ad@ls/false (apply (lambda (j34af@e*) (cons 'or (j30e4@chi-expr* j34af@e* j34a6@r j34a7@mr))) j34ad@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j34ab@t)))))) (set! j4b72@j3072@or-transformer j3072@or-transformer) (set! j3074@case-macro (lambda (j34b1@e) (let ((j34b4@build-last '#f) (j34b6@build-one '#f)) (begin (set! j34b4@build-last (lambda (j34db@cls) (let ((j34dd@t j34db@cls)) (let ((j34df@ls/false (j30c6@syntax-dispatch j34dd@t '(#(scheme-id else) any . each-any)))) (if j34df@ls/false (apply (lambda (j34e1@e j34e2@e*) (cons 'begin (cons j34e1@e j34e2@e*))) j34df@ls/false) (let ((j34e5@t j34dd@t)) (let ((j34e7@ls/false (j30c6@syntax-dispatch j34e5@t '_))) (if j34e7@ls/false (apply (lambda () (j34b6@build-one j34db@cls '(if #f #f))) j34e7@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j34e5@t))))))))) (set! j34b6@build-one (lambda (j34cd@cls j34ce@k) (let ((j34d1@t j34cd@cls)) (let ((j34d3@ls/false (j30c6@syntax-dispatch j34d1@t '(each-any any . each-any)))) (if j34d3@ls/false (apply (lambda (j34d5@d* j34d6@e j34d7@e*) (list 'if (list 'memv 't (list 'quote j34d5@d*)) (cons 'begin (cons j34d6@e j34d7@e*)) j34ce@k)) j34d3@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j34d1@t)))))) (let ((j34b7@t j34b1@e)) (let ((j34b9@ls/false (j30c6@syntax-dispatch j34b7@t '(_ any)))) (if j34b9@ls/false (apply (lambda (j34bb@expr) (j307c@bless (cons 'let (cons (list (list 't j34bb@expr)) '((if #f #f)))))) j34b9@ls/false) (let ((j34bd@t j34b7@t)) (let ((j34bf@ls/false (j30c6@syntax-dispatch j34bd@t '(_ any any . each-any)))) (if j34bf@ls/false (apply (lambda (j34c1@expr j34c2@cls j34c3@cls*) (j307c@bless (list 'let (list (list 't j34c1@expr)) (let j34cb@f ((j34c7@cls j34c2@cls) (j34c8@cls* j34c3@cls*)) (if (null? j34c8@cls*) (j34b4@build-last j34c7@cls) (j34b6@build-one j34c7@cls (j34cb@f (car j34c8@cls*) (cdr j34c8@cls*)))))))) j34bf@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j34bd@t))))))))))) (set! j4b73@j3074@case-macro j3074@case-macro) (set! j3076@quote-transformer (lambda (j34e9@e j34ea@r j34eb@mr) (let ((j34ef@t j34e9@e)) (let ((j34f1@ls/false (j30c6@syntax-dispatch j34ef@t '(_ any)))) (if j34f1@ls/false (apply (lambda (j34f3@datum) (list 'quote (j2ed3@stx->datum j34f3@datum))) j34f1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j34ef@t)))))) (set! j4b74@j3076@quote-transformer j3076@quote-transformer) (set! j3078@case-lambda-transformer (lambda (j34f5@e j34f6@r j34f7@mr) (let ((j34fb@t j34f5@e)) (let ((j34fd@ls/false (j30c6@syntax-dispatch j34fb@t '(_ . #(each (any any . each-any)))))) (if j34fd@ls/false (apply (lambda (j34ff@fmls* j3500@b* j3501@b**) (call-with-values (lambda () (j30f0@chi-lambda-clause* j34f5@e j34ff@fmls* (map cons j3500@b* j3501@b**) j34f6@r j34f7@mr)) (lambda (j3509@j3506 j350a@j3508) (let ((j350d@body* j350a@j3508) (j350e@fmls* j3509@j3506)) (j2e23@j2d50@build-case-lambda '#f j350e@fmls* j350d@body*))))) j34fd@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j34fb@t)))))) (set! j4b75@j3078@case-lambda-transformer j3078@case-lambda-transformer) (set! j307a@lambda-transformer (lambda (j3511@e j3512@r j3513@mr) (let ((j3517@t j3511@e)) (let ((j3519@ls/false (j30c6@syntax-dispatch j3517@t '(_ any any . each-any)))) (if j3519@ls/false (apply (lambda (j351b@fmls j351c@b j351d@b*) (call-with-values (lambda () (j30ee@chi-lambda-clause j3511@e j351b@fmls (cons j351c@b j351d@b*) j3512@r j3513@mr)) (lambda (j3525@j3522 j3526@j3524) (let ((j3529@body j3526@j3524) (j352a@fmls j3525@j3522)) (j2e22@j2d4e@build-lambda '#f j352a@fmls j3529@body))))) j3519@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3517@t)))))) (set! j4b76@j307a@lambda-transformer j307a@lambda-transformer) (set! j307c@bless (lambda (j352d@x) (j2ea7@mkstx (let j3531@f ((j352f@x j352d@x)) (if (j2e8b@stx? j352f@x) j352f@x (if (pair? j352f@x) (cons (j3531@f (car j352f@x)) (j3531@f (cdr j352f@x))) (if (symbol? j352f@x) (j304e@scheme-stx j352f@x) (if (vector? j352f@x) (vector-map j3531@f j352f@x) j352f@x))))) '() '() '()))) (set! j4b77@j307c@bless j307c@bless) (set! j307e@with-syntax-macro (lambda (j3533@e) (let ((j3535@t j3533@e)) (let ((j3537@ls/false (j30c6@syntax-dispatch j3535@t '(_ #(each (any any)) any . each-any)))) (if j3537@ls/false (apply (lambda (j3539@pat* j353a@expr* j353b@b j353c@b*) (let ((j3541@idn* (let j3545@f ((j3543@pat* j3539@pat*)) (if (null? j3543@pat*) '() (call-with-values (lambda () (j30c4@convert-pattern (car j3543@pat*) '())) (lambda (j354b@j3548 j354c@j354a) (let ((j354f@idn* j354c@j354a) (j3550@pat j354b@j3548)) (append j354f@idn* (j3545@f (cdr j3543@pat*)))))))))) (begin (j30ec@verify-formals (map car j3541@idn*) j3533@e) (let ((j3553@t* (j3194@generate-temporaries j353a@expr*))) (j307c@bless (list 'let (map list j3553@t* j353a@expr*) (let j3559@f ((j3555@pat* j3539@pat*) (j3556@t* j3553@t*)) (if (null? j3555@pat*) (cons 'begin (cons '#f (cons j353b@b j353c@b*))) (list 'syntax-case (car j3556@t*) '() (list (car j3555@pat*) (j3559@f (cdr j3555@pat*) (cdr j3556@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car j3555@pat*)) (car j3556@t*)))))))))))) j3537@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3535@t)))))) (set! j4b78@j307e@with-syntax-macro j307e@with-syntax-macro) (set! j3080@invalid-fmls-error (lambda (j355b@stx j355c@fmls) (let ((j355f@t j355c@fmls)) (let ((j3561@ls/false (j30c6@syntax-dispatch j355f@t '#(each+ any () any)))) (if j3561@ls/false (apply (lambda (j3563@id* j3564@last) (let j3569@f ((j3567@id* (if (j2ebf@id? j3564@last) (cons j3564@last j3563@id*) (if (j2eb5@syntax-null? j3564@last) j3563@id* (j31a6@syntax-violation '#f '"not an identifier" j355b@stx j3564@last))))) (if (null? j3567@id*) (values) (if (not (j2ebf@id? (car j3567@id*))) (j31a6@syntax-violation '#f '"not an identifier" j355b@stx (car j3567@id*)) (begin (j3569@f (cdr j3567@id*)) (if (j2ecb@bound-id-member? (car j3567@id*) (cdr j3567@id*)) (j31a6@syntax-violation '#f '"duplicate binding" j355b@stx (car j3567@id*)) (void))))))) j3561@ls/false) (let ((j356b@t j355f@t)) (let ((j356d@ls/false (j30c6@syntax-dispatch j356b@t '_))) (if j356d@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"malformed binding form" j355b@stx j355c@fmls)) j356d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j356b@t))))))))) (set! j4b79@j3080@invalid-fmls-error j3080@invalid-fmls-error) (set! j3082@let-macro (lambda (j356f@stx) (let ((j3571@t j356f@stx)) (let ((j3573@ls/false (j30c6@syntax-dispatch j3571@t '(_ #(each (any any)) any . each-any)))) (if j3573@ls/false (apply (lambda (j3575@lhs* j3576@rhs* j3577@b j3578@b*) (if (j2ec7@valid-bound-ids? j3575@lhs*) (j307c@bless (cons (cons 'lambda (cons j3575@lhs* (cons j3577@b j3578@b*))) j3576@rhs*)) (j3080@invalid-fmls-error j356f@stx j3575@lhs*))) j3573@ls/false) (let ((j357d@t j3571@t)) (let ((j357f@ls/false (j30c6@syntax-dispatch j357d@t '(_ any #(each (any any)) any . each-any)))) (if (and j357f@ls/false (apply (lambda (j3581@f j3582@lhs* j3583@rhs* j3584@b j3585@b*) (j2ebf@id? j3581@f)) j357f@ls/false)) (apply (lambda (j358b@f j358c@lhs* j358d@rhs* j358e@b j358f@b*) (if (j2ec7@valid-bound-ids? j358c@lhs*) (j307c@bless (cons (list 'letrec (list (list j358b@f (cons 'lambda (cons j358c@lhs* (cons j358e@b j358f@b*))))) j358b@f) j358d@rhs*)) (j3080@invalid-fmls-error j356f@stx j358c@lhs*))) j357f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j357d@t))))))))) (set! j4b7a@j3082@let-macro j3082@let-macro) (set! j3084@let-values-macro (lambda (j3595@stx) (let ((j3598@rename '#f) (j359a@rename* '#f)) (begin (set! j3598@rename (lambda (j35fd@x j35fe@old* j35ff@new*) (begin (if (not (j2ebf@id? j35fd@x)) (j31a6@syntax-violation '#f '"not an indentifier" j3595@stx j35fd@x) (void)) (if (j2ecb@bound-id-member? j35fd@x j35fe@old*) (j31a6@syntax-violation '#f '"duplicate binding" j3595@stx j35fd@x) (void)) (let ((j3603@y (gensym (j31ac@syntax->datum j35fd@x)))) (values j3603@y (cons j35fd@x j35fe@old*) (cons j3603@y j35ff@new*)))))) (set! j359a@rename* (lambda (j35eb@x* j35ec@old* j35ed@new*) (if (null? j35eb@x*) (values '() j35ec@old* j35ed@new*) (call-with-values (lambda () (j3598@rename (car j35eb@x*) j35ec@old* j35ed@new*)) (lambda (j35f1@x j35f2@old* j35f3@new*) (call-with-values (lambda () (j359a@rename* (cdr j35eb@x*) j35f2@old* j35f3@new*)) (lambda (j35f7@x* j35f8@old* j35f9@new*) (values (cons j35f1@x j35f7@x*) j35f8@old* j35f9@new*)))))))) (let ((j359b@t j3595@stx)) (let ((j359d@ls/false (j30c6@syntax-dispatch j359b@t '(_ () any . each-any)))) (if j359d@ls/false (apply (lambda (j359f@b j35a0@b*) (cons* (j307c@bless 'let) '() j359f@b j35a0@b*)) j359d@ls/false) (let ((j35a3@t j359b@t)) (let ((j35a5@ls/false (j30c6@syntax-dispatch j35a3@t '(_ #(each (any any)) any . each-any)))) (if j35a5@ls/false (apply (lambda (j35a7@lhs* j35a8@rhs* j35a9@b j35aa@b*) (j307c@bless (let j35b7@f ((j35af@lhs* j35a7@lhs*) (j35b0@rhs* j35a8@rhs*) (j35b1@old* '()) (j35b2@new* '())) (if (null? j35af@lhs*) (cons 'let (cons (map list j35b1@old* j35b2@new*) (cons j35a9@b j35aa@b*))) (let ((j35b9@t (car j35af@lhs*))) (let ((j35bb@ls/false (j30c6@syntax-dispatch j35b9@t 'each-any))) (if j35bb@ls/false (apply (lambda (j35bd@x*) (call-with-values (lambda () (j359a@rename* j35bd@x* j35b1@old* j35b2@new*)) (lambda (j35c5@j35c0 j35c6@j35c2 j35c7@j35c4) (let ((j35cb@new* j35c7@j35c4) (j35cc@old* j35c6@j35c2) (j35cd@y* j35c5@j35c0)) (list 'call-with-values (list 'lambda '() (car j35b0@rhs*)) (list 'lambda j35cd@y* (j35b7@f (cdr j35af@lhs*) (cdr j35b0@rhs*) j35cc@old* j35cb@new*))))))) j35bb@ls/false) (let ((j35d1@t j35b9@t)) (let ((j35d3@ls/false (j30c6@syntax-dispatch j35d1@t '#(each+ any () any)))) (if j35d3@ls/false (apply (lambda (j35d5@x* j35d6@x) (call-with-values (lambda () (j3598@rename j35d6@x j35b1@old* j35b2@new*)) (lambda (j35d9@y j35da@old* j35db@new*) (call-with-values (lambda () (j359a@rename* j35d5@x* j35da@old* j35db@new*)) (lambda (j35df@y* j35e0@old* j35e1@new*) (list 'call-with-values (list 'lambda '() (car j35b0@rhs*)) (list 'lambda (append j35df@y* j35d9@y) (j35b7@f (cdr j35af@lhs*) (cdr j35b0@rhs*) j35e0@old* j35e1@new*)))))))) j35d3@ls/false) (let ((j35e5@t j35d1@t)) (let ((j35e7@ls/false (j30c6@syntax-dispatch j35e5@t 'any))) (if j35e7@ls/false (apply (lambda (j35e9@others) (j31a6@syntax-violation '#f '"malformed bindings" j3595@stx j35e9@others)) j35e7@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j35e5@t)))))))))))))) j35a5@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j35a3@t))))))))))) (set! j4b7b@j3084@let-values-macro j3084@let-values-macro) (set! j3086@let*-values-macro (lambda (j3605@stx) (let ((j3608@check '#f)) (begin (set! j3608@check (lambda (j3637@x*) (if (not (null? j3637@x*)) (let ((j3639@x (car j3637@x*))) (begin (if (not (j2ebf@id? j3639@x)) (j31a6@syntax-violation '#f '"not an identifier" j3605@stx j3639@x) (void)) (j3608@check (cdr j3637@x*)) (if (j2ecb@bound-id-member? j3639@x (cdr j3637@x*)) (j31a6@syntax-violation '#f '"duplicate identifier" j3605@stx j3639@x) (void)))) (void)))) (let ((j3609@t j3605@stx)) (let ((j360b@ls/false (j30c6@syntax-dispatch j3609@t '(_ () any . each-any)))) (if j360b@ls/false (apply (lambda (j360d@b j360e@b*) (cons* (j307c@bless 'let) '() j360d@b j360e@b*)) j360b@ls/false) (let ((j3611@t j3609@t)) (let ((j3613@ls/false (j30c6@syntax-dispatch j3611@t '(_ #(each (any any)) any . each-any)))) (if j3613@ls/false (apply (lambda (j3615@lhs* j3616@rhs* j3617@b j3618@b*) (j307c@bless (let j3621@f ((j361d@lhs* j3615@lhs*) (j361e@rhs* j3616@rhs*)) (if (null? j361d@lhs*) (cons 'begin (cons j3617@b j3618@b*)) (let ((j3623@t (car j361d@lhs*))) (let ((j3625@ls/false (j30c6@syntax-dispatch j3623@t 'each-any))) (if j3625@ls/false (apply (lambda (j3627@x*) (begin (j3608@check j3627@x*) (list 'call-with-values (list 'lambda '() (car j361e@rhs*)) (list 'lambda j3627@x* (j3621@f (cdr j361d@lhs*) (cdr j361e@rhs*)))))) j3625@ls/false) (let ((j3629@t j3623@t)) (let ((j362b@ls/false (j30c6@syntax-dispatch j3629@t '#(each+ any () any)))) (if j362b@ls/false (apply (lambda (j362d@x* j362e@x) (begin (j3608@check (cons j362e@x j362d@x*)) (list 'call-with-values (list 'lambda '() (car j361e@rhs*)) (list 'lambda (append j362d@x* j362e@x) (j3621@f (cdr j361d@lhs*) (cdr j361e@rhs*)))))) j362b@ls/false) (let ((j3631@t j3629@t)) (let ((j3633@ls/false (j30c6@syntax-dispatch j3631@t 'any))) (if j3633@ls/false (apply (lambda (j3635@others) (j31a6@syntax-violation '#f '"malformed bindings" j3605@stx j3635@others)) j3633@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3631@t)))))))))))))) j3613@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3611@t))))))))))) (set! j4b7c@j3086@let*-values-macro j3086@let*-values-macro) (set! j3088@trace-lambda-macro (lambda (j363b@stx) (let ((j363d@t j363b@stx)) (let ((j363f@ls/false (j30c6@syntax-dispatch j363d@t '(_ any each-any any . each-any)))) (if j363f@ls/false (apply (lambda (j3641@who j3642@fmls j3643@b j3644@b*) (if (j2ec7@valid-bound-ids? j3642@fmls) (j307c@bless (list 'make-traced-procedure (list 'quote j3641@who) (cons 'lambda (cons j3642@fmls (cons j3643@b j3644@b*))))) (j3080@invalid-fmls-error j363b@stx j3642@fmls))) j363f@ls/false) (let ((j3649@t j363d@t)) (let ((j364b@ls/false (j30c6@syntax-dispatch j3649@t '(_ any #(each+ any () any) any . each-any)))) (if j364b@ls/false (apply (lambda (j364d@who j364e@fmls j364f@last j3650@b j3651@b*) (if (j2ec7@valid-bound-ids? (cons j364f@last j364e@fmls)) (j307c@bless (list 'make-traced-procedure (list 'quote j364d@who) (cons 'lambda (cons (append j364e@fmls j364f@last) (cons j3650@b j3651@b*))))) (j3080@invalid-fmls-error j363b@stx (append j364e@fmls j364f@last)))) j364b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3649@t))))))))) (set! j4b7d@j3088@trace-lambda-macro j3088@trace-lambda-macro) (set! j308a@trace-define-macro (lambda (j3657@stx) (let ((j3659@t j3657@stx)) (let ((j365b@ls/false (j30c6@syntax-dispatch j3659@t '(_ (any . each-any) any . each-any)))) (if j365b@ls/false (apply (lambda (j365d@who j365e@fmls j365f@b j3660@b*) (if (j2ec7@valid-bound-ids? j365e@fmls) (j307c@bless (list 'define j365d@who (list 'make-traced-procedure (list 'quote j365d@who) (cons 'lambda (cons j365e@fmls (cons j365f@b j3660@b*)))))) (j3080@invalid-fmls-error j3657@stx j365e@fmls))) j365b@ls/false) (let ((j3665@t j3659@t)) (let ((j3667@ls/false (j30c6@syntax-dispatch j3665@t '(_ (any . #(each+ any () any)) any . each-any)))) (if j3667@ls/false (apply (lambda (j3669@who j366a@fmls j366b@last j366c@b j366d@b*) (if (j2ec7@valid-bound-ids? (cons j366b@last j366a@fmls)) (j307c@bless (list 'define j3669@who (list 'make-traced-procedure (list 'quote j3669@who) (cons 'lambda (cons (append j366a@fmls j366b@last) (cons j366c@b j366d@b*)))))) (j3080@invalid-fmls-error j3657@stx (append j366a@fmls j366b@last)))) j3667@ls/false) (let ((j3673@t j3665@t)) (let ((j3675@ls/false (j30c6@syntax-dispatch j3673@t '(_ any any)))) (if j3675@ls/false (apply (lambda (j3677@who j3678@expr) (if (j2ebf@id? j3677@who) (j307c@bless (list 'define j3677@who (list 'let (list (list 'v j3678@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote j3677@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (j31a6@syntax-violation '#f '"invalid name" j3657@stx))) j3675@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3673@t)))))))))))) (set! j4b7e@j308a@trace-define-macro j308a@trace-define-macro) (set! j308c@trace-define-syntax-macro (lambda (j367b@stx) (let ((j367d@t j367b@stx)) (let ((j367f@ls/false (j30c6@syntax-dispatch j367d@t '(_ any any)))) (if j367f@ls/false (apply (lambda (j3681@who j3682@expr) (if (j2ebf@id? j3681@who) (j307c@bless (list 'define-syntax j3681@who (list 'make-traced-macro (list 'quote j3681@who) j3682@expr))) (j31a6@syntax-violation '#f '"invalid name" j367b@stx))) j367f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j367d@t)))))) (set! j4b7f@j308c@trace-define-syntax-macro j308c@trace-define-syntax-macro) (set! j308e@trace-let/rec-syntax (lambda (j3685@who) (lambda (j3687@stx) (let ((j3689@t j3687@stx)) (let ((j368b@ls/false (j30c6@syntax-dispatch j3689@t '(_ #(each (any any)) any . each-any)))) (if j368b@ls/false (apply (lambda (j368d@lhs* j368e@rhs* j368f@b j3690@b*) (if (j2ec7@valid-bound-ids? j368d@lhs*) (let ((j3695@rhs* (map (lambda (j3697@lhs j3698@rhs) (list 'make-traced-macro (list 'quote j3697@lhs) j3698@rhs)) j368d@lhs* j368e@rhs*))) (j307c@bless (cons j3685@who (cons (map list j368d@lhs* j3695@rhs*) (cons j368f@b j3690@b*))))) (j3080@invalid-fmls-error j3687@stx j368d@lhs*))) j368b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3689@t))))))) (set! j4b80@j308e@trace-let/rec-syntax j308e@trace-let/rec-syntax) (set! j3090@trace-let-syntax-macro (j308e@trace-let/rec-syntax 'let-syntax)) (set! j4b81@j3090@trace-let-syntax-macro j3090@trace-let-syntax-macro) (set! j3092@trace-letrec-syntax-macro (j308e@trace-let/rec-syntax 'letrec-syntax)) (set! j4b82@j3092@trace-letrec-syntax-macro j3092@trace-letrec-syntax-macro) (set! j3094@guard-macro (lambda (j369b@x) (let ((j369e@gen-clauses '#f)) (begin (set! j369e@gen-clauses (lambda (j36b5@con j36b6@outerk j36b7@clause*) (let ((j36bc@f '#f) (j36be@f* '#f)) (begin (set! j36bc@f (lambda (j36f5@x j36f6@k) (let ((j36f9@t j36f5@x)) (let ((j36fb@ls/false (j30c6@syntax-dispatch j36f9@t '(any #(scheme-id =>) any)))) (if j36fb@ls/false (apply (lambda (j36fd@e j36fe@p) (let ((j3701@t (gensym))) (list 'let (list (list j3701@t j36fd@e)) (list 'if j3701@t (list j36fe@p j3701@t) j36f6@k)))) j36fb@ls/false) (let ((j3703@t j36f9@t)) (let ((j3705@ls/false (j30c6@syntax-dispatch j3703@t '(any)))) (if j3705@ls/false (apply (lambda (j3707@e) (let ((j3709@t (gensym))) (list 'let (list (list j3709@t j3707@e)) (list 'if j3709@t j3709@t j36f6@k)))) j3705@ls/false) (let ((j370b@t j3703@t)) (let ((j370d@ls/false (j30c6@syntax-dispatch j370b@t '(any any . each-any)))) (if j370d@ls/false (apply (lambda (j370f@e j3710@v j3711@v*) (list 'if j370f@e (cons 'begin (cons j3710@v j3711@v*)) j36f6@k)) j370d@ls/false) (let ((j3715@t j370b@t)) (let ((j3717@ls/false (j30c6@syntax-dispatch j3715@t '_))) (if j3717@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid guard clause" j36f5@x)) j3717@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3715@t))))))))))))))) (set! j36be@f* (lambda (j36cb@x*) (let ((j36cd@t j36cb@x*)) (let ((j36cf@ls/false (j30c6@syntax-dispatch j36cd@t '()))) (if j36cf@ls/false (apply (lambda () (let ((j36d1@g (gensym))) (values (list j36d1@g (list 'lambda '() (list 'raise-continuable j36b5@con))) j36d1@g))) j36cf@ls/false) (let ((j36d3@t j36cd@t)) (let ((j36d5@ls/false (j30c6@syntax-dispatch j36d3@t '((#(scheme-id else) any . each-any))))) (if j36d5@ls/false (apply (lambda (j36d7@e j36d8@e*) (values (cons 'begin (cons j36d7@e j36d8@e*)) '#f)) j36d5@ls/false) (let ((j36db@t j36d3@t)) (let ((j36dd@ls/false (j30c6@syntax-dispatch j36db@t '(any . any)))) (if j36dd@ls/false (apply (lambda (j36df@cls j36e0@cls*) (call-with-values (lambda () (j36be@f* j36e0@cls*)) (lambda (j36e7@j36e4 j36e8@j36e6) (let ((j36eb@g j36e8@j36e6) (j36ec@e j36e7@j36e4)) (values (j36bc@f j36df@cls j36ec@e) j36eb@g))))) j36dd@ls/false) (let ((j36ef@t j36db@t)) (let ((j36f1@ls/false (j30c6@syntax-dispatch j36ef@t 'any))) (if j36f1@ls/false (apply (lambda (j36f3@others) (j31a6@syntax-violation '#f '"invalid guard clause" j36f3@others)) j36f1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j36ef@t))))))))))))))) (call-with-values (lambda () (j36be@f* j36b7@clause*)) (lambda (j36c3@j36c0 j36c4@j36c2) (let ((j36c7@raisek j36c4@j36c2) (j36c8@code j36c3@j36c0)) (if j36c7@raisek (list (list 'call/cc (list 'lambda (list j36c7@raisek) (list j36b6@outerk (list 'lambda '() j36c8@code))))) (list j36b6@outerk (list 'lambda '() j36c8@code)))))))))) (let ((j369f@t j369b@x)) (let ((j36a1@ls/false (j30c6@syntax-dispatch j369f@t '(_ (any . each-any) any . each-any)))) (if (and j36a1@ls/false (apply (lambda (j36a3@con j36a4@clause* j36a5@b j36a6@b*) (j2ebf@id? j36a3@con)) j36a1@ls/false)) (apply (lambda (j36ab@con j36ac@clause* j36ad@b j36ae@b*) (let ((j36b3@outerk (gensym))) (j307c@bless (list (list 'call/cc (list 'lambda (list j36b3@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list j36ab@con) (j369e@gen-clauses j36ab@con j36b3@outerk j36ac@clause*)) (cons 'lambda (cons '() (cons j36ad@b j36ae@b*))))))))))) j36a1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j369f@t)))))))) (set! j4b83@j3094@guard-macro j3094@guard-macro) (set! j3096@define-enumeration-macro (lambda (j3719@stx) (let ((j371c@set? '#f) (j371e@remove-dups '#f)) (begin (set! j371c@set? (lambda (j3735@x) (or (null? j3735@x) (and (not (memq (car j3735@x) (cdr j3735@x))) (j371c@set? (cdr j3735@x)))))) (set! j371e@remove-dups (lambda (j3733@ls) (if (null? j3733@ls) '() (cons (car j3733@ls) (j371e@remove-dups (remq (car j3733@ls) (cdr j3733@ls))))))) (let ((j371f@t j3719@stx)) (let ((j3721@ls/false (j30c6@syntax-dispatch j371f@t '(_ any each-any any)))) (if (and j3721@ls/false (apply (lambda (j3723@name j3724@id* j3725@maker) (and (j2ebf@id? j3723@name) (j2ebf@id? j3725@maker) (for-all j2ebf@id? j3724@id*))) j3721@ls/false)) (apply (lambda (j3729@name j372a@id* j372b@maker) (let ((j372f@name* (j371e@remove-dups (j31ac@syntax->datum j372a@id*))) (j3730@mk (gensym))) (j307c@bless (list 'begin (list 'define j3730@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote j372f@name*)))) (list 'define-syntax j3729@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote j372f@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote j3729@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax j372b@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote j372b@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote j372f@name*)) (cons 'syntax-violation (cons (list 'quote j372b@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons j3730@mk '('(n* ...))))))))))))) j3721@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j371f@t)))))))) (set! j4b84@j3096@define-enumeration-macro j3096@define-enumeration-macro) (set! j3098@time-macro (lambda (j3737@stx) (let ((j3739@t j3737@stx)) (let ((j373b@ls/false (j30c6@syntax-dispatch j3739@t '(_ any)))) (if j373b@ls/false (apply (lambda (j373d@expr) (j307c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() j373d@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) j373b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3739@t)))))) (set! j4b85@j3098@time-macro j3098@time-macro) (set! j309a@delay-macro (lambda (j373f@stx) (let ((j3741@t j373f@stx)) (let ((j3743@ls/false (j30c6@syntax-dispatch j3741@t '(_ any)))) (if j3743@ls/false (apply (lambda (j3745@expr) (j307c@bless (list 'make-promise (list 'lambda '() j3745@expr)))) j3743@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3741@t)))))) (set! j4b86@j309a@delay-macro j309a@delay-macro) (set! j309c@assert-macro (lambda (j3747@stx) (let ((j3749@t j3747@stx)) (let ((j374b@ls/false (j30c6@syntax-dispatch j3749@t '(_ any)))) (if j374b@ls/false (apply (lambda (j374d@expr) (let ((j374f@pos (or (j319e@expression-position j3747@stx) (j319e@expression-position j374d@expr)))) (j307c@bless (list 'let (list (list 'x j374d@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote j374d@expr) (list 'quote j374f@pos))))))) j374b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3749@t)))))) (set! j4b87@j309c@assert-macro j309c@assert-macro) (set! j309e@endianness-macro (lambda (j3751@stx) (let ((j3753@t j3751@stx)) (let ((j3755@ls/false (j30c6@syntax-dispatch j3753@t '(_ any)))) (if j3755@ls/false (apply (lambda (j3757@e) (let ((j3759@t (j31ac@syntax->datum j3757@e))) (if (memv j3759@t '(little)) (j307c@bless ''little) (if (memv j3759@t '(big)) (j307c@bless ''big) (j31a6@syntax-violation '#f '"endianness must be big or little" j3751@stx))))) j3755@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3753@t)))))) (set! j4b88@j309e@endianness-macro j309e@endianness-macro) (set! j30a0@identifier-syntax-macro (lambda (j375b@stx) (let ((j375d@t j375b@stx)) (let ((j375f@ls/false (j30c6@syntax-dispatch j375d@t '(_ any)))) (if j375f@ls/false (apply (lambda (j3761@expr) (j307c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax j3761@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax j3761@expr) '((syntax (e* ...)))))))))) j375f@ls/false) (let ((j3763@t j375d@t)) (let ((j3765@ls/false (j30c6@syntax-dispatch j3763@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and j3765@ls/false (apply (lambda (j3767@id1 j3768@expr1 j3769@id2 j376a@expr2 j376b@expr3) (and (j2ebf@id? j3767@id1) (j2ebf@id? j3769@id2) (j2ebf@id? j376a@expr2))) j3765@ls/false)) (apply (lambda (j3771@id1 j3772@expr1 j3773@id2 j3774@expr2 j3775@expr3) (j307c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax j3772@expr1)) (list (list 'set! 'id j3774@expr2) (list 'syntax j3775@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons j3772@expr1 '(e* ...))))))))) j3765@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3763@t))))))))) (set! j4b89@j30a0@identifier-syntax-macro j30a0@identifier-syntax-macro) (set! j30a2@do-macro (lambda (j377b@stx) (let ((j377e@bind '#f)) (begin (set! j377e@bind (lambda (j3795@x) (let ((j3797@t j3795@x)) (let ((j3799@ls/false (j30c6@syntax-dispatch j3797@t '(any any)))) (if j3799@ls/false (apply (lambda (j379b@x j379c@init) (list j379b@x j379c@init j379b@x)) j3799@ls/false) (let ((j379f@t j3797@t)) (let ((j37a1@ls/false (j30c6@syntax-dispatch j379f@t '(any any any)))) (if j37a1@ls/false (apply (lambda (j37a3@x j37a4@init j37a5@step) (list j37a3@x j37a4@init j37a5@step)) j37a1@ls/false) (let ((j37a9@t j379f@t)) (let ((j37ab@ls/false (j30c6@syntax-dispatch j37a9@t '_))) (if j37ab@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid binding" j377b@stx)) j37ab@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j37a9@t)))))))))))) (let ((j377f@t j377b@stx)) (let ((j3781@ls/false (j30c6@syntax-dispatch j377f@t '(_ each-any (any . each-any) . each-any)))) (if j3781@ls/false (apply (lambda (j3783@binding* j3784@test j3785@expr* j3786@command*) (let ((j378b@t (map j377e@bind j3783@binding*))) (let ((j378d@ls/false (j30c6@syntax-dispatch j378b@t '#(each (any any any))))) (if j378d@ls/false (apply (lambda (j378f@x* j3790@init* j3791@step*) (if (j2ec7@valid-bound-ids? j378f@x*) (j307c@bless (list 'letrec (list (list 'loop (list 'lambda j378f@x* (list 'if j3784@test (cons 'begin (cons '(if #f #f) j3785@expr*)) (cons 'begin (append j3786@command* (list (cons 'loop j3791@step*)))))))) (cons 'loop j3790@init*))) (j31a6@syntax-violation '#f '"invalid bindings" j377b@stx))) j378d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j378b@t))))) j3781@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j377f@t)))))))) (set! j4b8a@j30a2@do-macro j30a2@do-macro) (set! j30a4@let*-macro (lambda (j37ad@stx) (let ((j37af@t j37ad@stx)) (let ((j37b1@ls/false (j30c6@syntax-dispatch j37af@t '(_ #(each (any any)) any . each-any)))) (if (and j37b1@ls/false (apply (lambda (j37b3@lhs* j37b4@rhs* j37b5@b j37b6@b*) (for-all j2ebf@id? j37b3@lhs*)) j37b1@ls/false)) (apply (lambda (j37bb@lhs* j37bc@rhs* j37bd@b j37be@b*) (j307c@bless (let j37c5@f ((j37c3@x* (map list j37bb@lhs* j37bc@rhs*))) (if (null? j37c3@x*) (cons 'let (cons '() (cons j37bd@b j37be@b*))) (list 'let (list (car j37c3@x*)) (j37c5@f (cdr j37c3@x*))))))) j37b1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j37af@t)))))) (set! j4b8b@j30a4@let*-macro j30a4@let*-macro) (set! j30a6@or-macro (lambda (j37c7@stx) (let ((j37c9@t j37c7@stx)) (let ((j37cb@ls/false (j30c6@syntax-dispatch j37c9@t '(_)))) (if j37cb@ls/false (apply (lambda () '#f) j37cb@ls/false) (let ((j37cd@t j37c9@t)) (let ((j37cf@ls/false (j30c6@syntax-dispatch j37cd@t '(_ any . each-any)))) (if j37cf@ls/false (apply (lambda (j37d1@e j37d2@e*) (j307c@bless (let j37d9@f ((j37d5@e j37d1@e) (j37d6@e* j37d2@e*)) (if (null? j37d6@e*) (list 'begin '#f j37d5@e) (list 'let (list (list 't j37d5@e)) (list 'if 't 't (j37d9@f (car j37d6@e*) (cdr j37d6@e*)))))))) j37cf@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j37cd@t))))))))) (set! j4b8c@j30a6@or-macro j30a6@or-macro) (set! j30a8@and-macro (lambda (j37db@stx) (let ((j37dd@t j37db@stx)) (let ((j37df@ls/false (j30c6@syntax-dispatch j37dd@t '(_)))) (if j37df@ls/false (apply (lambda () '#t) j37df@ls/false) (let ((j37e1@t j37dd@t)) (let ((j37e3@ls/false (j30c6@syntax-dispatch j37e1@t '(_ any . each-any)))) (if j37e3@ls/false (apply (lambda (j37e5@e j37e6@e*) (j307c@bless (let j37ed@f ((j37e9@e j37e5@e) (j37ea@e* j37e6@e*)) (if (null? j37ea@e*) (list 'begin '#f j37e9@e) (cons 'if (cons j37e9@e (cons (j37ed@f (car j37ea@e*) (cdr j37ea@e*)) '(#f)))))))) j37e3@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j37e1@t))))))))) (set! j4b8d@j30a8@and-macro j30a8@and-macro) (set! j30aa@cond-macro (lambda (j37ef@stx) (let ((j37f1@t j37ef@stx)) (let ((j37f3@ls/false (j30c6@syntax-dispatch j37f1@t '(_ any . each-any)))) (if j37f3@ls/false (apply (lambda (j37f5@cls j37f6@cls*) (j307c@bless (let j37fd@f ((j37f9@cls j37f5@cls) (j37fa@cls* j37f6@cls*)) (if (null? j37fa@cls*) (let ((j37ff@t j37f9@cls)) (let ((j3801@ls/false (j30c6@syntax-dispatch j37ff@t '(#(scheme-id else) any . each-any)))) (if j3801@ls/false (apply (lambda (j3803@e j3804@e*) (cons 'begin (cons j3803@e j3804@e*))) j3801@ls/false) (let ((j3807@t j37ff@t)) (let ((j3809@ls/false (j30c6@syntax-dispatch j3807@t '(any #(scheme-id =>) any)))) (if j3809@ls/false (apply (lambda (j380b@e j380c@p) (list 'let (list (list 't j380b@e)) (list 'if 't (cons j380c@p '(t))))) j3809@ls/false) (let ((j380f@t j3807@t)) (let ((j3811@ls/false (j30c6@syntax-dispatch j380f@t '(any)))) (if j3811@ls/false (apply (lambda (j3813@e) (cons 'or (cons j3813@e '((if #f #f))))) j3811@ls/false) (let ((j3815@t j380f@t)) (let ((j3817@ls/false (j30c6@syntax-dispatch j3815@t '(any . each-any)))) (if j3817@ls/false (apply (lambda (j3819@e j381a@e*) (list 'if j3819@e (cons 'begin j381a@e*))) j3817@ls/false) (let ((j381d@t j3815@t)) (let ((j381f@ls/false (j30c6@syntax-dispatch j381d@t '_))) (if j381f@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid last clause" j37ef@stx)) j381f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j381d@t)))))))))))))))) (let ((j3821@t j37f9@cls)) (let ((j3823@ls/false (j30c6@syntax-dispatch j3821@t '(#(scheme-id else) any . each-any)))) (if j3823@ls/false (apply (lambda (j3825@e j3826@e*) (j31a6@syntax-violation '#f '"incorrect position of keyword else" j37ef@stx)) j3823@ls/false) (let ((j3829@t j3821@t)) (let ((j382b@ls/false (j30c6@syntax-dispatch j3829@t '(any #(scheme-id =>) any)))) (if j382b@ls/false (apply (lambda (j382d@e j382e@p) (list 'let (list (list 't j382d@e)) (list 'if 't (cons j382e@p '(t)) (j37fd@f (car j37fa@cls*) (cdr j37fa@cls*))))) j382b@ls/false) (let ((j3831@t j3829@t)) (let ((j3833@ls/false (j30c6@syntax-dispatch j3831@t '(any)))) (if j3833@ls/false (apply (lambda (j3835@e) (list 'or j3835@e (j37fd@f (car j37fa@cls*) (cdr j37fa@cls*)))) j3833@ls/false) (let ((j3837@t j3831@t)) (let ((j3839@ls/false (j30c6@syntax-dispatch j3837@t '(any . each-any)))) (if j3839@ls/false (apply (lambda (j383b@e j383c@e*) (list 'if j383b@e (cons 'begin j383c@e*) (j37fd@f (car j37fa@cls*) (cdr j37fa@cls*)))) j3839@ls/false) (let ((j383f@t j3837@t)) (let ((j3841@ls/false (j30c6@syntax-dispatch j383f@t '_))) (if j3841@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid last clause" j37ef@stx)) j3841@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j383f@t)))))))))))))))))))) j37f3@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j37f1@t)))))) (set! j4b8e@j30aa@cond-macro j30aa@cond-macro) (set! j30ac@do-include (lambda (j3843@stx j3844@id j3845@filename) (let ((j3849@filename (j2ed3@stx->datum j3845@filename))) (begin (if (not (and (string? j3849@filename) (j2ebf@id? j3844@id))) (j31a6@syntax-violation '#f '"invalid syntax" j3843@stx) (void)) (cons (j307c@bless 'begin) (with-input-from-file j3849@filename (lambda () (let j384d@f ((j384b@ls '())) (let ((j384f@x (j29fb@j28cb@read-annotated))) (if (eof-object? j384f@x) (reverse j384b@ls) (j384d@f (cons (j2e9f@datum->stx j3844@id j384f@x) j384b@ls)))))))))))) (set! j4b8f@j30ac@do-include j30ac@do-include) (set! j30ae@include-macro (lambda (j3851@e) (let ((j3853@t j3851@e)) (let ((j3855@ls/false (j30c6@syntax-dispatch j3853@t '(any any)))) (if j3855@ls/false (apply (lambda (j3857@id j3858@filename) (j30ac@do-include j3851@e j3857@id j3858@filename)) j3855@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3853@t)))))) (set! j4b90@j30ae@include-macro j30ae@include-macro) (set! j30b0@include-into-macro (lambda (j385b@e) (let ((j385d@t j385b@e)) (let ((j385f@ls/false (j30c6@syntax-dispatch j385d@t '(_ any any)))) (if j385f@ls/false (apply (lambda (j3861@id j3862@filename) (j30ac@do-include j385b@e j3861@id j3862@filename)) j385f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j385d@t)))))) (set! j4b91@j30b0@include-into-macro j30b0@include-into-macro) (set! j30b2@syntax-rules-macro (lambda (j3865@e) (let ((j3867@t j3865@e)) (let ((j3869@ls/false (j30c6@syntax-dispatch j3867@t '(_ each-any . #(each (any any)))))) (if j3869@ls/false (apply (lambda (j386b@lits j386c@pat* j386d@tmp*) (begin (j30cc@verify-literals j386b@lits j3865@e) (j307c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons j386b@lits (map (lambda (j3871@pat j3872@tmp) (let ((j3875@t j3871@pat)) (let ((j3877@ls/false (j30c6@syntax-dispatch j3875@t '(_ . any)))) (if j3877@ls/false (apply (lambda (j3879@rest) (list (cons 'g j3879@rest) (list 'syntax j3872@tmp))) j3877@ls/false) (let ((j387b@t j3875@t)) (let ((j387d@ls/false (j30c6@syntax-dispatch j387b@t '_))) (if j387d@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid syntax-rules pattern" j3865@e j3871@pat)) j387d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j387b@t)))))))) j386c@pat* j386d@tmp*)))))))) j3869@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3867@t)))))) (set! j4b92@j30b2@syntax-rules-macro j30b2@syntax-rules-macro) (set! j30b4@quasiquote-macro (let ((j3880@datum '#f) (j389c@quasicons* '#f) (j389e@quasicons '#f) (j38a0@quasiappend '#f) (j38a2@quasivector '#f) (j38a4@vquasi '#f) (j38a6@quasi '#f)) (begin (set! j3880@datum (lambda (j3981@x) (list (j304e@scheme-stx 'quote) (j2ea7@mkstx j3981@x '() '() '())))) (set! j389c@quasicons* (lambda (j3979@x j397a@y) (let j397f@f ((j397d@x j3979@x)) (if (null? j397d@x) j397a@y (j389e@quasicons (car j397d@x) (j397f@f (cdr j397d@x))))))) (set! j389e@quasicons (lambda (j3953@x j3954@y) (let ((j3957@t j3954@y)) (let ((j3959@ls/false (j30c6@syntax-dispatch j3957@t '(#(scheme-id quote) any)))) (if j3959@ls/false (apply (lambda (j395b@dy) (let ((j395d@t j3953@x)) (let ((j395f@ls/false (j30c6@syntax-dispatch j395d@t '(#(scheme-id quote) any)))) (if j395f@ls/false (apply (lambda (j3961@dx) (list (j304e@scheme-stx 'quote) (cons j3961@dx j395b@dy))) j395f@ls/false) (let ((j3963@t j395d@t)) (let ((j3965@ls/false (j30c6@syntax-dispatch j3963@t '_))) (if j3965@ls/false (apply (lambda () (let ((j3967@t j395b@dy)) (let ((j3969@ls/false (j30c6@syntax-dispatch j3967@t '()))) (if j3969@ls/false (apply (lambda () (list (j304e@scheme-stx 'list) j3953@x)) j3969@ls/false) (let ((j396b@t j3967@t)) (let ((j396d@ls/false (j30c6@syntax-dispatch j396b@t '_))) (if j396d@ls/false (apply (lambda () (list (j304e@scheme-stx 'cons) j3953@x j3954@y)) j396d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j396b@t)))))))) j3965@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3963@t)))))))) j3959@ls/false) (let ((j396f@t j3957@t)) (let ((j3971@ls/false (j30c6@syntax-dispatch j396f@t '(#(scheme-id list) . each-any)))) (if j3971@ls/false (apply (lambda (j3973@stuff) (cons* (j304e@scheme-stx 'list) j3953@x j3973@stuff)) j3971@ls/false) (let ((j3975@t j396f@t)) (let ((j3977@ls/false (j30c6@syntax-dispatch j3975@t '_))) (if j3977@ls/false (apply (lambda () (list (j304e@scheme-stx 'cons) j3953@x j3954@y)) j3977@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3975@t)))))))))))) (set! j38a0@quasiappend (lambda (j3939@x j393a@y) (let ((j393d@ls (let j3941@f ((j393f@x j3939@x)) (if (null? j393f@x) (let ((j3943@t j393a@y)) (let ((j3945@ls/false (j30c6@syntax-dispatch j3943@t '(#(scheme-id quote) ())))) (if j3945@ls/false (apply (lambda () '()) j3945@ls/false) (let ((j3947@t j3943@t)) (let ((j3949@ls/false (j30c6@syntax-dispatch j3947@t '_))) (if j3949@ls/false (apply (lambda () (list j393a@y)) j3949@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3947@t))))))) (let ((j394b@t (car j393f@x))) (let ((j394d@ls/false (j30c6@syntax-dispatch j394b@t '(#(scheme-id quote) ())))) (if j394d@ls/false (apply (lambda () (j3941@f (cdr j393f@x))) j394d@ls/false) (let ((j394f@t j394b@t)) (let ((j3951@ls/false (j30c6@syntax-dispatch j394f@t '_))) (if j3951@ls/false (apply (lambda () (cons (car j393f@x) (j3941@f (cdr j393f@x)))) j3951@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j394f@t))))))))))) (if (null? j393d@ls) (list (j304e@scheme-stx 'quote) '()) (if (null? (cdr j393d@ls)) (car j393d@ls) (cons* (j304e@scheme-stx 'append) j393d@ls)))))) (set! j38a2@quasivector (lambda (j3907@x) (let ((j3909@pat-x j3907@x)) (let ((j390b@t j3909@pat-x)) (let ((j390d@ls/false (j30c6@syntax-dispatch j390b@t '(#(scheme-id quote) each-any)))) (if j390d@ls/false (apply (lambda (j390f@x*) (list (j304e@scheme-stx 'quote) (list->vector j390f@x*))) j390d@ls/false) (let ((j3911@t j390b@t)) (let ((j3913@ls/false (j30c6@syntax-dispatch j3911@t '_))) (if j3913@ls/false (apply (lambda () (let j391b@f ((j3915@x j3907@x) (j3916@k (lambda (j3919@ls) (cons* (j304e@scheme-stx 'vector) j3919@ls)))) (let ((j391d@t j3915@x)) (let ((j391f@ls/false (j30c6@syntax-dispatch j391d@t '(#(scheme-id quote) each-any)))) (if j391f@ls/false (apply (lambda (j3921@x*) (j3916@k (map (lambda (j3923@x) (list (j304e@scheme-stx 'quote) j3923@x)) j3921@x*))) j391f@ls/false) (let ((j3925@t j391d@t)) (let ((j3927@ls/false (j30c6@syntax-dispatch j3925@t '(#(scheme-id list) . each-any)))) (if j3927@ls/false (apply (lambda (j3929@x*) (j3916@k j3929@x*)) j3927@ls/false) (let ((j392b@t j3925@t)) (let ((j392d@ls/false (j30c6@syntax-dispatch j392b@t '(#(scheme-id cons) any any)))) (if j392d@ls/false (apply (lambda (j392f@x j3930@y) (j391b@f j3930@y (lambda (j3933@ls) (j3916@k (cons j392f@x j3933@ls))))) j392d@ls/false) (let ((j3935@t j392b@t)) (let ((j3937@ls/false (j30c6@syntax-dispatch j3935@t '_))) (if j3937@ls/false (apply (lambda () (list (j304e@scheme-stx 'list->vector) j3909@pat-x)) j3937@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3935@t))))))))))))))) j3913@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3911@t)))))))))) (set! j38a4@vquasi (lambda (j38e5@p j38e6@lev) (let ((j38e9@t j38e5@p)) (let ((j38eb@ls/false (j30c6@syntax-dispatch j38e9@t '(any . any)))) (if j38eb@ls/false (apply (lambda (j38ed@p j38ee@q) (let ((j38f1@t j38ed@p)) (let ((j38f3@ls/false (j30c6@syntax-dispatch j38f1@t '(#(scheme-id unquote) . each-any)))) (if j38f3@ls/false (apply (lambda (j38f5@p) (if (= j38e6@lev '0) (j389c@quasicons* j38f5@p (j38a4@vquasi j38ee@q j38e6@lev)) (j389e@quasicons (j389e@quasicons (j3880@datum 'unquote) (j38a6@quasi j38f5@p (- j38e6@lev '1))) (j38a4@vquasi j38ee@q j38e6@lev)))) j38f3@ls/false) (let ((j38f7@t j38f1@t)) (let ((j38f9@ls/false (j30c6@syntax-dispatch j38f7@t '(#(scheme-id unquote-splicing) . each-any)))) (if j38f9@ls/false (apply (lambda (j38fb@p) (if (= j38e6@lev '0) (j38a0@quasiappend j38fb@p (j38a4@vquasi j38ee@q j38e6@lev)) (j389e@quasicons (j389e@quasicons (j3880@datum 'unquote-splicing) (j38a6@quasi j38fb@p (- j38e6@lev '1))) (j38a4@vquasi j38ee@q j38e6@lev)))) j38f9@ls/false) (let ((j38fd@t j38f7@t)) (let ((j38ff@ls/false (j30c6@syntax-dispatch j38fd@t 'any))) (if j38ff@ls/false (apply (lambda (j3901@p) (j389e@quasicons (j38a6@quasi j3901@p j38e6@lev) (j38a4@vquasi j38ee@q j38e6@lev))) j38ff@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j38fd@t))))))))))) j38eb@ls/false) (let ((j3903@t j38e9@t)) (let ((j3905@ls/false (j30c6@syntax-dispatch j3903@t '()))) (if j3905@ls/false (apply (lambda () (list (j304e@scheme-stx 'quote) '())) j3905@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3903@t))))))))) (set! j38a6@quasi (lambda (j38af@p j38b0@lev) (let ((j38b3@t j38af@p)) (let ((j38b5@ls/false (j30c6@syntax-dispatch j38b3@t '(#(scheme-id unquote) any)))) (if j38b5@ls/false (apply (lambda (j38b7@p) (if (= j38b0@lev '0) j38b7@p (j389e@quasicons (j3880@datum 'unquote) (j38a6@quasi (list j38b7@p) (- j38b0@lev '1))))) j38b5@ls/false) (let ((j38b9@t j38b3@t)) (let ((j38bb@ls/false (j30c6@syntax-dispatch j38b9@t '((#(scheme-id unquote) . each-any) . any)))) (if j38bb@ls/false (apply (lambda (j38bd@p j38be@q) (if (= j38b0@lev '0) (j389c@quasicons* j38bd@p (j38a6@quasi j38be@q j38b0@lev)) (j389e@quasicons (j389e@quasicons (j3880@datum 'unquote) (j38a6@quasi j38bd@p (- j38b0@lev '1))) (j38a6@quasi j38be@q j38b0@lev)))) j38bb@ls/false) (let ((j38c1@t j38b9@t)) (let ((j38c3@ls/false (j30c6@syntax-dispatch j38c1@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if j38c3@ls/false (apply (lambda (j38c5@p j38c6@q) (if (= j38b0@lev '0) (j38a0@quasiappend j38c5@p (j38a6@quasi j38c6@q j38b0@lev)) (j389e@quasicons (j389e@quasicons (j3880@datum 'unquote-splicing) (j38a6@quasi j38c5@p (- j38b0@lev '1))) (j38a6@quasi j38c6@q j38b0@lev)))) j38c3@ls/false) (let ((j38c9@t j38c1@t)) (let ((j38cb@ls/false (j30c6@syntax-dispatch j38c9@t '(#(scheme-id quasiquote) any)))) (if j38cb@ls/false (apply (lambda (j38cd@p) (j389e@quasicons (j3880@datum 'quasiquote) (j38a6@quasi (list j38cd@p) (+ j38b0@lev '1)))) j38cb@ls/false) (let ((j38cf@t j38c9@t)) (let ((j38d1@ls/false (j30c6@syntax-dispatch j38cf@t '(any . any)))) (if j38d1@ls/false (apply (lambda (j38d3@p j38d4@q) (j389e@quasicons (j38a6@quasi j38d3@p j38b0@lev) (j38a6@quasi j38d4@q j38b0@lev))) j38d1@ls/false) (let ((j38d7@t j38cf@t)) (let ((j38d9@ls/false (j30c6@syntax-dispatch j38d7@t '#(vector each-any)))) (if (and j38d9@ls/false (apply (lambda (j38db@x) (not (j2e8b@stx? j38db@x))) j38d9@ls/false)) (apply (lambda (j38dd@x) (j38a2@quasivector (j38a4@vquasi j38dd@x j38b0@lev))) j38d9@ls/false) (let ((j38df@t j38d7@t)) (let ((j38e1@ls/false (j30c6@syntax-dispatch j38df@t 'any))) (if j38e1@ls/false (apply (lambda (j38e3@p) (list (j304e@scheme-stx 'quote) j38e3@p)) j38e1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j38df@t)))))))))))))))))))))))) (lambda (j38a7@x) (let ((j38a9@t j38a7@x)) (let ((j38ab@ls/false (j30c6@syntax-dispatch j38a9@t '(_ any)))) (if j38ab@ls/false (apply (lambda (j38ad@e) (j38a6@quasi j38ad@e '0)) j38ab@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j38a9@t)))))))) (set! j4b93@j30b4@quasiquote-macro j30b4@quasiquote-macro) (set! j30b6@quasisyntax-macro (let ((j3984@quasi '#f)) (begin (set! j3984@quasi (lambda (j399f@p j39a0@lev) (let ((j39a3@t j399f@p)) (let ((j39a5@ls/false (j30c6@syntax-dispatch j39a3@t '(#(scheme-id unsyntax) any)))) (if j39a5@ls/false (apply (lambda (j39a7@p) (if (= j39a0@lev '0) (let ((j39a9@g (gensym))) (values (list j39a9@g) (list j39a7@p) j39a9@g)) (call-with-values (lambda () (j3984@quasi j39a7@p (- j39a0@lev '1))) (lambda (j39b1@j39ac j39b2@j39ae j39b3@j39b0) (let ((j39b7@p j39b3@j39b0) (j39b8@rhs* j39b2@j39ae) (j39b9@lhs* j39b1@j39ac)) (values j39b9@lhs* j39b8@rhs* (list 'unsyntax j39b7@p))))))) j39a5@ls/false) (let ((j39bd@t j39a3@t)) (let ((j39bf@ls/false (j30c6@syntax-dispatch j39bd@t '#(scheme-id unsyntax)))) (if (and j39bf@ls/false (apply (lambda () (= j39a0@lev '0)) j39bf@ls/false)) (apply (lambda () (j31a6@syntax-violation '#f '"incorrect use of unsyntax" j399f@p)) j39bf@ls/false) (let ((j39c1@t j39bd@t)) (let ((j39c3@ls/false (j30c6@syntax-dispatch j39c1@t '((#(scheme-id unsyntax) . each-any) . any)))) (if j39c3@ls/false (apply (lambda (j39c5@p* j39c6@q) (call-with-values (lambda () (j3984@quasi j39c6@q j39a0@lev)) (lambda (j39cf@j39ca j39d0@j39cc j39d1@j39ce) (let ((j39d5@q j39d1@j39ce) (j39d6@rhs* j39d0@j39cc) (j39d7@lhs* j39cf@j39ca)) (if (= j39a0@lev '0) (let ((j39db@g* (map (lambda (j39dd@x) (gensym)) j39c5@p*))) (values (append j39db@g* j39d7@lhs*) (append j39c5@p* j39d6@rhs*) (append j39db@g* j39d5@q))) (call-with-values (lambda () (j3984@quasi j39c5@p* (- j39a0@lev '1))) (lambda (j39e5@j39e0 j39e6@j39e2 j39e7@j39e4) (let ((j39eb@p* j39e7@j39e4) (j39ec@rhs2* j39e6@j39e2) (j39ed@lhs2* j39e5@j39e0)) (values (append j39ed@lhs2* j39d7@lhs*) (append j39ec@rhs2* j39d6@rhs*) (cons (cons 'unsyntax j39eb@p*) j39d5@q)))))))))) j39c3@ls/false) (let ((j39f1@t j39c1@t)) (let ((j39f3@ls/false (j30c6@syntax-dispatch j39f1@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if j39f3@ls/false (apply (lambda (j39f5@p* j39f6@q) (call-with-values (lambda () (j3984@quasi j39f6@q j39a0@lev)) (lambda (j39ff@j39fa j3a00@j39fc j3a01@j39fe) (let ((j3a05@q j3a01@j39fe) (j3a06@rhs* j3a00@j39fc) (j3a07@lhs* j39ff@j39fa)) (if (= j39a0@lev '0) (let ((j3a0b@g* (map (lambda (j3a0d@x) (gensym)) j39f5@p*))) (values (append (map (lambda (j3a0f@g) (cons j3a0f@g '(...))) j3a0b@g*) j3a07@lhs*) (append j39f5@p* j3a06@rhs*) (append (apply append (map (lambda (j3a11@g) (cons j3a11@g '(...))) j3a0b@g*)) j3a05@q))) (call-with-values (lambda () (j3984@quasi j39f5@p* (- j39a0@lev '1))) (lambda (j3a19@j3a14 j3a1a@j3a16 j3a1b@j3a18) (let ((j3a1f@p* j3a1b@j3a18) (j3a20@rhs2* j3a1a@j3a16) (j3a21@lhs2* j3a19@j3a14)) (values (append j3a21@lhs2* j3a07@lhs*) (append j3a20@rhs2* j3a06@rhs*) (cons (cons 'unsyntax-splicing j3a1f@p*) j3a05@q)))))))))) j39f3@ls/false) (let ((j3a25@t j39f1@t)) (let ((j3a27@ls/false (j30c6@syntax-dispatch j3a25@t '#(scheme-id unsyntax-splicing)))) (if (and j3a27@ls/false (apply (lambda () (= j39a0@lev '0)) j3a27@ls/false)) (apply (lambda () (j31a6@syntax-violation '#f '"incorrect use of unsyntax-splicing" j399f@p)) j3a27@ls/false) (let ((j3a29@t j3a25@t)) (let ((j3a2b@ls/false (j30c6@syntax-dispatch j3a29@t '(#(scheme-id quasisyntax) any)))) (if j3a2b@ls/false (apply (lambda (j3a2d@p) (call-with-values (lambda () (j3984@quasi j3a2d@p (+ j39a0@lev '1))) (lambda (j3a35@j3a30 j3a36@j3a32 j3a37@j3a34) (let ((j3a3b@p j3a37@j3a34) (j3a3c@rhs* j3a36@j3a32) (j3a3d@lhs* j3a35@j3a30)) (values j3a3d@lhs* j3a3c@rhs* (list 'quasisyntax j3a3b@p)))))) j3a2b@ls/false) (let ((j3a41@t j3a29@t)) (let ((j3a43@ls/false (j30c6@syntax-dispatch j3a41@t '(any . any)))) (if j3a43@ls/false (apply (lambda (j3a45@p j3a46@q) (call-with-values (lambda () (j3984@quasi j3a45@p j39a0@lev)) (lambda (j3a55@j3a4a j3a56@j3a4c j3a57@j3a4e) (call-with-values (lambda () (j3984@quasi j3a46@q j39a0@lev)) (lambda (j3a5b@j3a50 j3a5c@j3a52 j3a5d@j3a54) (let ((j3a61@q j3a5d@j3a54) (j3a62@rhs2* j3a5c@j3a52) (j3a63@lhs2* j3a5b@j3a50) (j3a64@p j3a57@j3a4e) (j3a65@rhs* j3a56@j3a4c) (j3a66@lhs* j3a55@j3a4a)) (values (append j3a63@lhs2* j3a66@lhs*) (append j3a62@rhs2* j3a65@rhs*) (cons j3a64@p j3a61@q)))))))) j3a43@ls/false) (let ((j3a6d@t j3a41@t)) (let ((j3a6f@ls/false (j30c6@syntax-dispatch j3a6d@t '#(vector each-any)))) (if j3a6f@ls/false (apply (lambda (j3a71@x*) (call-with-values (lambda () (j3984@quasi j3a71@x* j39a0@lev)) (lambda (j3a79@j3a74 j3a7a@j3a76 j3a7b@j3a78) (let ((j3a7f@x* j3a7b@j3a78) (j3a80@rhs* j3a7a@j3a76) (j3a81@lhs* j3a79@j3a74)) (values j3a81@lhs* j3a80@rhs* (list->vector j3a7f@x*)))))) j3a6f@ls/false) (let ((j3a85@t j3a6d@t)) (let ((j3a87@ls/false (j30c6@syntax-dispatch j3a85@t '_))) (if j3a87@ls/false (apply (lambda () (values '() '() j399f@p)) j3a87@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3a85@t)))))))))))))))))))))))))))))) (lambda (j3985@x) (let ((j3987@t j3985@x)) (let ((j3989@ls/false (j30c6@syntax-dispatch j3987@t '(_ any)))) (if j3989@ls/false (apply (lambda (j398b@e) (call-with-values (lambda () (j3984@quasi j398b@e '0)) (lambda (j3993@j398e j3994@j3990 j3995@j3992) (let ((j3999@v j3995@j3992) (j399a@rhs* j3994@j3990) (j399b@lhs* j3993@j398e)) (j307c@bless (list 'syntax-case (cons 'list j399a@rhs*) '() (list j399b@lhs* (list 'syntax j3999@v)))))))) j3989@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3987@t)))))))) (set! j4b94@j30b6@quasisyntax-macro j30b6@quasisyntax-macro) (set! j30b8@define-struct-macro (lambda (j3a89@stx) (j31a6@syntax-violation '#f '"define-struct not supported" j3a89@stx))) (set! j4b95@j30b8@define-struct-macro j30b8@define-struct-macro) (set! j30ba@define-record-type-macro (lambda (j3a8b@x) (let ((j3a8e@id '#f) (j3a90@get-record-name '#f) (j3a92@get-record-constructor-name '#f) (j3a94@get-record-predicate-name '#f) (j3a96@get-clause '#f) (j3a98@foo-rtd-code '#f) (j3a9a@parent-rtd-code '#f) (j3a9c@parent-rcd-code '#f) (j3a9e@foo-rcd-code '#f) (j3aa0@get-protocol-code '#f) (j3aa2@get-fields '#f) (j3aa4@get-mutator-indices '#f) (j3aa6@get-mutators '#f) (j3aa8@get-accessors '#f) (j3aaa@enumerate '#f) (j3aac@do-define-record '#f) (j3aae@verify-clauses '#f)) (begin (set! j3a8e@id (lambda (j3c81@ctxt . j3c83@str*) (j31aa@datum->syntax j3c81@ctxt (string->symbol (apply string-append (map (lambda (j3c85@x) (if (symbol? j3c85@x) (symbol->string j3c85@x) (if (string? j3c85@x) j3c85@x (assertion-violation 'define-record-type '"BUG")))) j3c83@str*)))))) (set! j3a90@get-record-name (lambda (j3c6f@spec) (let ((j3c71@t j3c6f@spec)) (let ((j3c73@ls/false (j30c6@syntax-dispatch j3c71@t '(any any any)))) (if j3c73@ls/false (apply (lambda (j3c75@foo j3c76@make-foo j3c77@foo?) j3c75@foo) j3c73@ls/false) (let ((j3c7b@t j3c71@t)) (let ((j3c7d@ls/false (j30c6@syntax-dispatch j3c7b@t 'any))) (if j3c7d@ls/false (apply (lambda (j3c7f@foo) j3c7f@foo) j3c7d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c7b@t))))))))) (set! j3a92@get-record-constructor-name (lambda (j3c5b@spec) (let ((j3c5d@t j3c5b@spec)) (let ((j3c5f@ls/false (j30c6@syntax-dispatch j3c5d@t '(any any any)))) (if j3c5f@ls/false (apply (lambda (j3c61@foo j3c62@make-foo j3c63@foo?) j3c62@make-foo) j3c5f@ls/false) (let ((j3c67@t j3c5d@t)) (let ((j3c69@ls/false (j30c6@syntax-dispatch j3c67@t 'any))) (if (and j3c69@ls/false (apply (lambda (j3c6b@foo) (j2ebf@id? j3c6b@foo)) j3c69@ls/false)) (apply (lambda (j3c6d@foo) (j3a8e@id j3c6d@foo '"make-" (j2ed3@stx->datum j3c6d@foo))) j3c69@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c67@t))))))))) (set! j3a94@get-record-predicate-name (lambda (j3c47@spec) (let ((j3c49@t j3c47@spec)) (let ((j3c4b@ls/false (j30c6@syntax-dispatch j3c49@t '(any any any)))) (if j3c4b@ls/false (apply (lambda (j3c4d@foo j3c4e@make-foo j3c4f@foo?) j3c4f@foo?) j3c4b@ls/false) (let ((j3c53@t j3c49@t)) (let ((j3c55@ls/false (j30c6@syntax-dispatch j3c53@t 'any))) (if (and j3c55@ls/false (apply (lambda (j3c57@foo) (j2ebf@id? j3c57@foo)) j3c55@ls/false)) (apply (lambda (j3c59@foo) (j3a8e@id j3c59@foo (j2ed3@stx->datum j3c59@foo) '"?")) j3c55@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c53@t))))))))) (set! j3a96@get-clause (lambda (j3c35@id j3c36@ls) (let ((j3c39@t j3c36@ls)) (let ((j3c3b@ls/false (j30c6@syntax-dispatch j3c39@t '()))) (if j3c3b@ls/false (apply (lambda () '#f) j3c3b@ls/false) (let ((j3c3d@t j3c39@t)) (let ((j3c3f@ls/false (j30c6@syntax-dispatch j3c3d@t '((any . any) . any)))) (if j3c3f@ls/false (apply (lambda (j3c41@x j3c42@rest j3c43@ls) (if (j2ec5@free-id=? (j307c@bless j3c35@id) j3c41@x) (cons j3c41@x j3c42@rest) (j3a96@get-clause j3c35@id j3c43@ls))) j3c3f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c3d@t))))))))) (set! j3a98@foo-rtd-code (lambda (j3be3@name j3be4@clause* j3be5@parent-rtd-code) (let ((j3bea@convert-field-spec* '#f)) (begin (set! j3bea@convert-field-spec* (lambda (j3c1b@ls) (list->vector (map (lambda (j3c1d@x) (let ((j3c1f@t j3c1d@x)) (let ((j3c21@ls/false (j30c6@syntax-dispatch j3c1f@t '(#(scheme-id mutable) any . any)))) (if j3c21@ls/false (apply (lambda (j3c23@name j3c24@rest) (list 'mutable j3c23@name)) j3c21@ls/false) (let ((j3c27@t j3c1f@t)) (let ((j3c29@ls/false (j30c6@syntax-dispatch j3c27@t '(#(scheme-id immutable) any . any)))) (if j3c29@ls/false (apply (lambda (j3c2b@name j3c2c@rest) (list 'immutable j3c2b@name)) j3c29@ls/false) (let ((j3c2f@t j3c27@t)) (let ((j3c31@ls/false (j30c6@syntax-dispatch j3c2f@t 'any))) (if j3c31@ls/false (apply (lambda (j3c33@name) (list 'immutable j3c33@name)) j3c31@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c2f@t))))))))))) j3c1b@ls)))) (let ((j3beb@uid-code (let ((j3bf3@t (j3a96@get-clause 'nongenerative j3be4@clause*))) (let ((j3bf5@ls/false (j30c6@syntax-dispatch j3bf3@t '(_)))) (if j3bf5@ls/false (apply (lambda () (list 'quote (gensym))) j3bf5@ls/false) (let ((j3bf7@t j3bf3@t)) (let ((j3bf9@ls/false (j30c6@syntax-dispatch j3bf7@t '(_ any)))) (if j3bf9@ls/false (apply (lambda (j3bfb@uid) (list 'quote j3bfb@uid)) j3bf9@ls/false) (let ((j3bfd@t j3bf7@t)) (let ((j3bff@ls/false (j30c6@syntax-dispatch j3bfd@t '_))) (if j3bff@ls/false (apply (lambda () '#f) j3bff@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3bfd@t))))))))))) (j3bec@sealed? (let ((j3c01@t (j3a96@get-clause 'sealed j3be4@clause*))) (let ((j3c03@ls/false (j30c6@syntax-dispatch j3c01@t '(_ #(atom #t))))) (if j3c03@ls/false (apply (lambda () '#t) j3c03@ls/false) (let ((j3c05@t j3c01@t)) (let ((j3c07@ls/false (j30c6@syntax-dispatch j3c05@t '_))) (if j3c07@ls/false (apply (lambda () '#f) j3c07@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c05@t)))))))) (j3bed@opaque? (let ((j3c09@t (j3a96@get-clause 'opaque j3be4@clause*))) (let ((j3c0b@ls/false (j30c6@syntax-dispatch j3c09@t '(_ #(atom #t))))) (if j3c0b@ls/false (apply (lambda () '#t) j3c0b@ls/false) (let ((j3c0d@t j3c09@t)) (let ((j3c0f@ls/false (j30c6@syntax-dispatch j3c0d@t '_))) (if j3c0f@ls/false (apply (lambda () '#f) j3c0f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c0d@t)))))))) (j3bee@fields (let ((j3c11@t (j3a96@get-clause 'fields j3be4@clause*))) (let ((j3c13@ls/false (j30c6@syntax-dispatch j3c11@t '(_ . each-any)))) (if j3c13@ls/false (apply (lambda (j3c15@field-spec*) (list 'quote (j3bea@convert-field-spec* j3c15@field-spec*))) j3c13@ls/false) (let ((j3c17@t j3c11@t)) (let ((j3c19@ls/false (j30c6@syntax-dispatch j3c17@t '_))) (if j3c19@ls/false (apply (lambda () ''#()) j3c19@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c17@t))))))))) (j307c@bless (list 'make-record-type-descriptor (list 'quote j3be3@name) j3be5@parent-rtd-code j3beb@uid-code j3bec@sealed? j3bed@opaque? j3bee@fields))))))) (set! j3a9a@parent-rtd-code (lambda (j3bcb@clause*) (let ((j3bcd@t (j3a96@get-clause 'parent j3bcb@clause*))) (let ((j3bcf@ls/false (j30c6@syntax-dispatch j3bcd@t '(_ any)))) (if j3bcf@ls/false (apply (lambda (j3bd1@name) (list 'record-type-descriptor j3bd1@name)) j3bcf@ls/false) (let ((j3bd3@t j3bcd@t)) (let ((j3bd5@ls/false (j30c6@syntax-dispatch j3bd3@t '#(atom #f)))) (if j3bd5@ls/false (apply (lambda () (let ((j3bd7@t (j3a96@get-clause 'parent-rtd j3bcb@clause*))) (let ((j3bd9@ls/false (j30c6@syntax-dispatch j3bd7@t '(_ any any)))) (if j3bd9@ls/false (apply (lambda (j3bdb@rtd j3bdc@rcd) j3bdb@rtd) j3bd9@ls/false) (let ((j3bdf@t j3bd7@t)) (let ((j3be1@ls/false (j30c6@syntax-dispatch j3bdf@t '#(atom #f)))) (if j3be1@ls/false (apply (lambda () '#f) j3be1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3bdf@t)))))))) j3bd5@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3bd3@t))))))))) (set! j3a9c@parent-rcd-code (lambda (j3bb3@clause*) (let ((j3bb5@t (j3a96@get-clause 'parent j3bb3@clause*))) (let ((j3bb7@ls/false (j30c6@syntax-dispatch j3bb5@t '(_ any)))) (if j3bb7@ls/false (apply (lambda (j3bb9@name) (list 'record-constructor-descriptor j3bb9@name)) j3bb7@ls/false) (let ((j3bbb@t j3bb5@t)) (let ((j3bbd@ls/false (j30c6@syntax-dispatch j3bbb@t '#(atom #f)))) (if j3bbd@ls/false (apply (lambda () (let ((j3bbf@t (j3a96@get-clause 'parent-rtd j3bb3@clause*))) (let ((j3bc1@ls/false (j30c6@syntax-dispatch j3bbf@t '(_ any any)))) (if j3bc1@ls/false (apply (lambda (j3bc3@rtd j3bc4@rcd) j3bc4@rcd) j3bc1@ls/false) (let ((j3bc7@t j3bbf@t)) (let ((j3bc9@ls/false (j30c6@syntax-dispatch j3bc7@t '#(atom #f)))) (if j3bc9@ls/false (apply (lambda () '#f) j3bc9@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3bc7@t)))))))) j3bbd@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3bbb@t))))))))) (set! j3a9e@foo-rcd-code (lambda (j3bab@clause* j3bac@foo-rtd j3bad@protocol j3bae@parent-rcd-code) (list 'make-record-constructor-descriptor j3bac@foo-rtd j3bae@parent-rcd-code j3bad@protocol))) (set! j3aa0@get-protocol-code (lambda (j3b9f@clause*) (let ((j3ba1@t (j3a96@get-clause 'protocol j3b9f@clause*))) (let ((j3ba3@ls/false (j30c6@syntax-dispatch j3ba1@t '(_ any)))) (if j3ba3@ls/false (apply (lambda (j3ba5@expr) j3ba5@expr) j3ba3@ls/false) (let ((j3ba7@t j3ba1@t)) (let ((j3ba9@ls/false (j30c6@syntax-dispatch j3ba7@t '_))) (if j3ba9@ls/false (apply (lambda () '#f) j3ba9@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3ba7@t))))))))) (set! j3aa2@get-fields (lambda (j3b8d@clause*) (let ((j3b8f@t j3b8d@clause*)) (let ((j3b91@ls/false (j30c6@syntax-dispatch j3b8f@t '()))) (if j3b91@ls/false (apply (lambda () '()) j3b91@ls/false) (let ((j3b93@t j3b8f@t)) (let ((j3b95@ls/false (j30c6@syntax-dispatch j3b93@t '((#(scheme-id fields) . each-any) . _)))) (if j3b95@ls/false (apply (lambda (j3b97@f*) j3b97@f*) j3b95@ls/false) (let ((j3b99@t j3b93@t)) (let ((j3b9b@ls/false (j30c6@syntax-dispatch j3b99@t '(_ . any)))) (if j3b9b@ls/false (apply (lambda (j3b9d@rest) (j3aa2@get-fields j3b9d@rest)) j3b9b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3b99@t)))))))))))) (set! j3aa4@get-mutator-indices (lambda (j3b75@fields) (let j3b7b@f ((j3b77@fields j3b75@fields) (j3b78@i '0)) (let ((j3b7d@t j3b77@fields)) (let ((j3b7f@ls/false (j30c6@syntax-dispatch j3b7d@t '()))) (if j3b7f@ls/false (apply (lambda () '()) j3b7f@ls/false) (let ((j3b81@t j3b7d@t)) (let ((j3b83@ls/false (j30c6@syntax-dispatch j3b81@t '((#(scheme-id mutable) . _) . any)))) (if j3b83@ls/false (apply (lambda (j3b85@rest) (cons j3b78@i (j3b7b@f j3b85@rest (+ j3b78@i '1)))) j3b83@ls/false) (let ((j3b87@t j3b81@t)) (let ((j3b89@ls/false (j30c6@syntax-dispatch j3b87@t '(_ . any)))) (if j3b89@ls/false (apply (lambda (j3b8b@rest) (j3b7b@f j3b8b@rest (+ j3b78@i '1))) j3b89@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3b87@t))))))))))))) (set! j3aa6@get-mutators (lambda (j3b4b@foo j3b4c@fields) (let ((j3b50@gen-name '#f)) (begin (set! j3b50@gen-name (lambda (j3b73@x) (j31aa@datum->syntax j3b4b@foo (string->symbol (string-append (symbol->string (j31ac@syntax->datum j3b4b@foo)) '"-" (symbol->string (j31ac@syntax->datum j3b73@x)) '"-set!"))))) (let j3b53@f ((j3b51@fields j3b4c@fields)) (let ((j3b55@t j3b51@fields)) (let ((j3b57@ls/false (j30c6@syntax-dispatch j3b55@t '()))) (if j3b57@ls/false (apply (lambda () '()) j3b57@ls/false) (let ((j3b59@t j3b55@t)) (let ((j3b5b@ls/false (j30c6@syntax-dispatch j3b59@t '((#(scheme-id mutable) any any any) . any)))) (if j3b5b@ls/false (apply (lambda (j3b5d@name j3b5e@accessor j3b5f@mutator j3b60@rest) (cons j3b5f@mutator (j3b53@f j3b60@rest))) j3b5b@ls/false) (let ((j3b65@t j3b59@t)) (let ((j3b67@ls/false (j30c6@syntax-dispatch j3b65@t '((#(scheme-id mutable) any) . any)))) (if j3b67@ls/false (apply (lambda (j3b69@name j3b6a@rest) (cons (j3b50@gen-name j3b69@name) (j3b53@f j3b6a@rest))) j3b67@ls/false) (let ((j3b6d@t j3b65@t)) (let ((j3b6f@ls/false (j30c6@syntax-dispatch j3b6d@t '(_ . any)))) (if j3b6f@ls/false (apply (lambda (j3b71@rest) (j3b53@f j3b71@rest)) j3b6f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3b6d@t)))))))))))))))))) (set! j3aa8@get-accessors (lambda (j3b07@foo j3b08@fields) (let ((j3b0c@gen-name '#f)) (begin (set! j3b0c@gen-name (lambda (j3b49@x) (j31aa@datum->syntax j3b07@foo (string->symbol (string-append (symbol->string (j31ac@syntax->datum j3b07@foo)) '"-" (symbol->string (j31ac@syntax->datum j3b49@x))))))) (map (lambda (j3b0d@field) (let ((j3b0f@t j3b0d@field)) (let ((j3b11@ls/false (j30c6@syntax-dispatch j3b0f@t '(#(scheme-id mutable) any any any)))) (if (and j3b11@ls/false (apply (lambda (j3b13@name j3b14@accessor j3b15@mutator) (j2ebf@id? j3b14@accessor)) j3b11@ls/false)) (apply (lambda (j3b19@name j3b1a@accessor j3b1b@mutator) j3b1a@accessor) j3b11@ls/false) (let ((j3b1f@t j3b0f@t)) (let ((j3b21@ls/false (j30c6@syntax-dispatch j3b1f@t '(#(scheme-id immutable) any any)))) (if (and j3b21@ls/false (apply (lambda (j3b23@name j3b24@accessor) (j2ebf@id? j3b24@accessor)) j3b21@ls/false)) (apply (lambda (j3b27@name j3b28@accessor) j3b28@accessor) j3b21@ls/false) (let ((j3b2b@t j3b1f@t)) (let ((j3b2d@ls/false (j30c6@syntax-dispatch j3b2b@t '(#(scheme-id mutable) any)))) (if (and j3b2d@ls/false (apply (lambda (j3b2f@name) (j2ebf@id? j3b2f@name)) j3b2d@ls/false)) (apply (lambda (j3b31@name) (j3b0c@gen-name j3b31@name)) j3b2d@ls/false) (let ((j3b33@t j3b2b@t)) (let ((j3b35@ls/false (j30c6@syntax-dispatch j3b33@t '(#(scheme-id immutable) any)))) (if (and j3b35@ls/false (apply (lambda (j3b37@name) (j2ebf@id? j3b37@name)) j3b35@ls/false)) (apply (lambda (j3b39@name) (j3b0c@gen-name j3b39@name)) j3b35@ls/false) (let ((j3b3b@t j3b33@t)) (let ((j3b3d@ls/false (j30c6@syntax-dispatch j3b3b@t 'any))) (if (and j3b3d@ls/false (apply (lambda (j3b3f@name) (j2ebf@id? j3b3f@name)) j3b3d@ls/false)) (apply (lambda (j3b41@name) (j3b0c@gen-name j3b41@name)) j3b3d@ls/false) (let ((j3b43@t j3b3b@t)) (let ((j3b45@ls/false (j30c6@syntax-dispatch j3b43@t 'any))) (if j3b45@ls/false (apply (lambda (j3b47@others) (j31a6@syntax-violation '#f '"invalid field spec" j3b0d@field)) j3b45@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3b43@t)))))))))))))))))))) j3b08@fields))))) (set! j3aaa@enumerate (lambda (j3aff@ls) (let j3b05@f ((j3b01@ls j3aff@ls) (j3b02@i '0)) (if (null? j3b01@ls) '() (cons j3b02@i (j3b05@f (cdr j3b01@ls) (+ j3b02@i '1))))))) (set! j3aac@do-define-record (lambda (j3ad7@namespec j3ad8@clause*) (let ((j3adb@foo (j3a90@get-record-name j3ad7@namespec))) (let ((j3add@foo-rtd (gensym))) (let ((j3adf@foo-rcd (gensym))) (let ((j3ae1@protocol (gensym))) (let ((j3ae3@make-foo (j3a92@get-record-constructor-name j3ad7@namespec))) (let ((j3ae5@fields (j3aa2@get-fields j3ad8@clause*))) (let ((j3ae7@idx* (j3aaa@enumerate j3ae5@fields))) (let ((j3ae9@foo-x* (j3aa8@get-accessors j3adb@foo j3ae5@fields))) (let ((j3aeb@set-foo-x!* (j3aa6@get-mutators j3adb@foo j3ae5@fields))) (let ((j3aed@set-foo-idx* (j3aa4@get-mutator-indices j3ae5@fields))) (let ((j3aef@foo? (j3a94@get-record-predicate-name j3ad7@namespec))) (let ((j3af1@foo-rtd-code (j3a98@foo-rtd-code j3adb@foo j3ad8@clause* (j3a9a@parent-rtd-code j3ad8@clause*)))) (let ((j3af3@foo-rcd-code (j3a9e@foo-rcd-code j3ad8@clause* j3add@foo-rtd j3ae1@protocol (j3a9c@parent-rcd-code j3ad8@clause*)))) (let ((j3af5@protocol-code (j3aa0@get-protocol-code j3ad8@clause*))) (j307c@bless (cons 'begin (cons (list 'define j3add@foo-rtd j3af1@foo-rtd-code) (cons (list 'define j3ae1@protocol j3af5@protocol-code) (cons (list 'define j3adf@foo-rcd j3af3@foo-rcd-code) (cons (list 'define-syntax j3adb@foo (list 'list ''$rtd (list 'syntax j3add@foo-rtd) (list 'syntax j3adf@foo-rcd))) (cons (list 'define j3aef@foo? (list 'record-predicate j3add@foo-rtd)) (cons (list 'define j3ae3@make-foo (list 'record-constructor j3adf@foo-rcd)) (append (map (lambda (j3af7@foo-x j3af8@idx) (list 'define j3af7@foo-x (list 'record-accessor j3add@foo-rtd j3af8@idx))) j3ae9@foo-x* j3ae7@idx*) (map (lambda (j3afb@set-foo-x! j3afc@idx) (list 'define j3afb@set-foo-x! (list 'record-mutator j3add@foo-rtd j3afc@idx))) j3aeb@set-foo-x!* j3aed@set-foo-idx*)))))))))))))))))))))))))) (set! j3aae@verify-clauses (lambda (j3ab7@x j3ab8@cls*) (let ((j3abc@valid-kwds '#f) (j3abe@free-id-member? '#f)) (begin (set! j3abc@valid-kwds (map j307c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! j3abe@free-id-member? (lambda (j3ad3@x j3ad4@ls) (and (pair? j3ad4@ls) (or (j2ec5@free-id=? j3ad3@x (car j3ad4@ls)) (j3abe@free-id-member? j3ad3@x (cdr j3ad4@ls)))))) (let j3ac3@f ((j3abf@cls* j3ab8@cls*) (j3ac0@seen* '())) (if (not (null? j3abf@cls*)) (let ((j3ac5@t (car j3abf@cls*))) (let ((j3ac7@ls/false (j30c6@syntax-dispatch j3ac5@t '(any . any)))) (if j3ac7@ls/false (apply (lambda (j3ac9@kwd j3aca@rest) (if (or (not (j2ebf@id? j3ac9@kwd)) (not (j3abe@free-id-member? j3ac9@kwd j3abc@valid-kwds))) (j31a6@syntax-violation '#f '"not a valid define-record-type keyword" j3ac9@kwd) (if (j2ecb@bound-id-member? j3ac9@kwd j3ac0@seen*) (j31a6@syntax-violation '#f '"duplicate use of keyword " j3ab7@x j3ac9@kwd) (j3ac3@f (cdr j3abf@cls*) (cons j3ac9@kwd j3ac0@seen*))))) j3ac7@ls/false) (let ((j3acd@t j3ac5@t)) (let ((j3acf@ls/false (j30c6@syntax-dispatch j3acd@t 'any))) (if j3acf@ls/false (apply (lambda (j3ad1@cls) (j31a6@syntax-violation '#f '"malformed define-record-type clause" j3ad1@cls)) j3acf@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3acd@t))))))) (void))))))) (let ((j3aaf@t j3a8b@x)) (let ((j3ab1@ls/false (j30c6@syntax-dispatch j3aaf@t '(_ any . each-any)))) (if j3ab1@ls/false (apply (lambda (j3ab3@namespec j3ab4@clause*) (begin (j3aae@verify-clauses j3a8b@x j3ab4@clause*) (j3aac@do-define-record j3ab3@namespec j3ab4@clause*))) j3ab1@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3aaf@t)))))))) (set! j4b96@j30ba@define-record-type-macro j30ba@define-record-type-macro) (set! j30bc@define-condition-type-macro (lambda (j3c87@x) (let ((j3c8a@mkname '#f)) (begin (set! j3c8a@mkname (lambda (j3cb7@name j3cb8@suffix) (j31aa@datum->syntax j3cb7@name (string->symbol (string-append (symbol->string (j31ac@syntax->datum j3cb7@name)) j3cb8@suffix))))) (let ((j3c8b@t j3c87@x)) (let ((j3c8d@ls/false (j30c6@syntax-dispatch j3c8b@t '(any any any any any . #(each (any any)))))) (if (and j3c8d@ls/false (apply (lambda (j3c8f@ctxt j3c90@name j3c91@super j3c92@constructor j3c93@predicate j3c94@field* j3c95@accessor*) (and (j2ebf@id? j3c90@name) (j2ebf@id? j3c91@super) (j2ebf@id? j3c92@constructor) (j2ebf@id? j3c93@predicate) (for-all j2ebf@id? j3c94@field*) (for-all j2ebf@id? j3c95@accessor*))) j3c8d@ls/false)) (apply (lambda (j3c9d@ctxt j3c9e@name j3c9f@super j3ca0@constructor j3ca1@predicate j3ca2@field* j3ca3@accessor*) (let ((j3cab@aux-accessor* (map (lambda (j3cad@x) (gensym)) j3ca3@accessor*))) (j307c@bless (cons 'begin (cons (cons 'define-record-type (cons (list j3c9e@name j3ca0@constructor (gensym)) (cons (list 'parent j3c9f@super) (cons (cons 'fields (map (lambda (j3caf@field j3cb0@aux) (list 'immutable j3caf@field j3cb0@aux)) j3ca2@field* j3cab@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define j3ca1@predicate (list 'condition-predicate (list 'record-type-descriptor j3c9e@name))) (map (lambda (j3cb3@accessor j3cb4@aux) (list 'define j3cb3@accessor (list 'condition-accessor (list 'record-type-descriptor j3c9e@name) j3cb4@aux))) j3ca3@accessor* j3cab@aux-accessor*))))))) j3c8d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3c8b@t)))))))) (set! j4b97@j30bc@define-condition-type-macro j30bc@define-condition-type-macro) (set! j30be@incorrect-usage-macro (lambda (j3cbb@e) (j31a6@syntax-violation '#f '"incorrect usage of auxiliary keyword" j3cbb@e))) (set! j4b98@j30be@incorrect-usage-macro j30be@incorrect-usage-macro) (set! j30c0@parameterize-macro (lambda (j3cbd@e) (let ((j3cbf@t j3cbd@e)) (let ((j3cc1@ls/false (j30c6@syntax-dispatch j3cbf@t '(_ () any . each-any)))) (if j3cc1@ls/false (apply (lambda (j3cc3@b j3cc4@b*) (j307c@bless (cons 'let (cons '() (cons j3cc3@b j3cc4@b*))))) j3cc1@ls/false) (let ((j3cc7@t j3cbf@t)) (let ((j3cc9@ls/false (j30c6@syntax-dispatch j3cc7@t '(_ #(each (any any)) any . each-any)))) (if j3cc9@ls/false (apply (lambda (j3ccb@olhs* j3ccc@orhs* j3ccd@b j3cce@b*) (let ((j3cd3@lhs* (j3194@generate-temporaries j3ccb@olhs*)) (j3cd4@rhs* (j3194@generate-temporaries j3ccc@orhs*))) (j307c@bless (cons (list 'lambda (append j3cd3@lhs* j3cd4@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (j3cd7@lhs j3cd8@rhs) (list 'let (list (list 't (list j3cd7@lhs))) (list j3cd7@lhs j3cd8@rhs) (cons 'set! (cons j3cd8@rhs '(t))))) j3cd3@lhs* j3cd4@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons j3ccd@b j3cce@b*))) '(swap)))))) (append j3ccb@olhs* j3ccc@orhs*))))) j3cc9@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3cc7@t))))))))) (set! j4b99@j30c0@parameterize-macro j30c0@parameterize-macro) (set! j30c2@foreign-call-transformer (lambda (j3cdb@e j3cdc@r j3cdd@mr) (let ((j3ce1@t j3cdb@e)) (let ((j3ce3@ls/false (j30c6@syntax-dispatch j3ce1@t '(_ any . each-any)))) (if j3ce3@ls/false (apply (lambda (j3ce5@name j3ce6@arg*) (cons 'foreign-call (cons (j30e8@chi-expr j3ce5@name j3cdc@r j3cdd@mr) (j30e4@chi-expr* j3ce6@arg* j3cdc@r j3cdd@mr)))) j3ce3@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3ce1@t)))))) (set! j4b9a@j30c2@foreign-call-transformer j30c2@foreign-call-transformer) (set! j30c4@convert-pattern (lambda (j3ce9@pattern j3cea@keys) (let ((j3cee@cvt* '#f) (j3cf0@cvt '#f)) (begin (set! j3cee@cvt* (lambda (j3d8d@p* j3d8e@n j3d8f@ids) (if (null? j3d8d@p*) (values '() j3d8f@ids) (call-with-values (lambda () (j3cee@cvt* (cdr j3d8d@p*) j3d8e@n j3d8f@ids)) (lambda (j3d97@j3d94 j3d98@j3d96) (let ((j3d9b@ids j3d98@j3d96) (j3d9c@y j3d97@j3d94)) (call-with-values (lambda () (j3cf0@cvt (car j3d8d@p*) j3d8e@n j3d9b@ids)) (lambda (j3da3@j3da0 j3da4@j3da2) (let ((j3da7@ids j3da4@j3da2) (j3da8@x j3da3@j3da0)) (values (cons j3da8@x j3d9c@y) j3da7@ids)))))))))) (set! j3cf0@cvt (lambda (j3cf1@p j3cf2@n j3cf3@ids) (let ((j3cf7@t j3cf1@p)) (let ((j3cf9@ls/false (j30c6@syntax-dispatch j3cf7@t 'any))) (if (and j3cf9@ls/false (apply (lambda (j3cfb@id) (j2ebf@id? j3cfb@id)) j3cf9@ls/false)) (apply (lambda (j3cfd@id) (if (j2ecb@bound-id-member? j3cf1@p j3cea@keys) (values (vector 'free-id j3cf1@p) j3cf3@ids) (if (j2ec5@free-id=? j3cf1@p (j304e@scheme-stx '_)) (values '_ j3cf3@ids) (values 'any (cons (cons j3cf1@p j3cf2@n) j3cf3@ids))))) j3cf9@ls/false) (let ((j3cff@t j3cf7@t)) (let ((j3d01@ls/false (j30c6@syntax-dispatch j3cff@t '(any any)))) (if (and j3d01@ls/false (apply (lambda (j3d03@p j3d04@dots) (j30c8@ellipsis? j3d04@dots)) j3d01@ls/false)) (apply (lambda (j3d07@p j3d08@dots) (call-with-values (lambda () (j3cf0@cvt j3d07@p (+ j3cf2@n '1) j3cf3@ids)) (lambda (j3d0f@j3d0c j3d10@j3d0e) (let ((j3d13@ids j3d10@j3d0e) (j3d14@p j3d0f@j3d0c)) (values (if (eq? j3d14@p 'any) 'each-any (vector 'each j3d14@p)) j3d13@ids))))) j3d01@ls/false) (let ((j3d17@t j3cff@t)) (let ((j3d19@ls/false (j30c6@syntax-dispatch j3d17@t '(any any . #(each+ any () any))))) (if (and j3d19@ls/false (apply (lambda (j3d1b@x j3d1c@dots j3d1d@ys j3d1e@z) (j30c8@ellipsis? j3d1c@dots)) j3d19@ls/false)) (apply (lambda (j3d23@x j3d24@dots j3d25@ys j3d26@z) (call-with-values (lambda () (j3cf0@cvt j3d26@z j3cf2@n j3cf3@ids)) (lambda (j3d2f@j3d2c j3d30@j3d2e) (let ((j3d33@ids j3d30@j3d2e) (j3d34@z j3d2f@j3d2c)) (call-with-values (lambda () (j3cee@cvt* j3d25@ys j3cf2@n j3d33@ids)) (lambda (j3d3b@j3d38 j3d3c@j3d3a) (let ((j3d3f@ids j3d3c@j3d3a) (j3d40@ys j3d3b@j3d38)) (call-with-values (lambda () (j3cf0@cvt j3d23@x (+ j3cf2@n '1) j3d3f@ids)) (lambda (j3d47@j3d44 j3d48@j3d46) (let ((j3d4b@ids j3d48@j3d46) (j3d4c@x j3d47@j3d44)) (values (vector 'each+ j3d4c@x (reverse j3d40@ys) j3d34@z) j3d4b@ids))))))))))) j3d19@ls/false) (let ((j3d4f@t j3d17@t)) (let ((j3d51@ls/false (j30c6@syntax-dispatch j3d4f@t '(any . any)))) (if j3d51@ls/false (apply (lambda (j3d53@x j3d54@y) (call-with-values (lambda () (j3cf0@cvt j3d54@y j3cf2@n j3cf3@ids)) (lambda (j3d5b@j3d58 j3d5c@j3d5a) (let ((j3d5f@ids j3d5c@j3d5a) (j3d60@y j3d5b@j3d58)) (call-with-values (lambda () (j3cf0@cvt j3d53@x j3cf2@n j3d5f@ids)) (lambda (j3d67@j3d64 j3d68@j3d66) (let ((j3d6b@ids j3d68@j3d66) (j3d6c@x j3d67@j3d64)) (values (cons j3d6c@x j3d60@y) j3d6b@ids)))))))) j3d51@ls/false) (let ((j3d6f@t j3d4f@t)) (let ((j3d71@ls/false (j30c6@syntax-dispatch j3d6f@t '()))) (if j3d71@ls/false (apply (lambda () (values '() j3cf3@ids)) j3d71@ls/false) (let ((j3d73@t j3d6f@t)) (let ((j3d75@ls/false (j30c6@syntax-dispatch j3d73@t '#(vector each-any)))) (if (and j3d75@ls/false (apply (lambda (j3d77@p) (not (j2e8b@stx? j3d77@p))) j3d75@ls/false)) (apply (lambda (j3d79@p) (call-with-values (lambda () (j3cf0@cvt j3d79@p j3cf2@n j3cf3@ids)) (lambda (j3d7f@j3d7c j3d80@j3d7e) (let ((j3d83@ids j3d80@j3d7e) (j3d84@p j3d7f@j3d7c)) (values (vector 'vector j3d84@p) j3d83@ids))))) j3d75@ls/false) (let ((j3d87@t j3d73@t)) (let ((j3d89@ls/false (j30c6@syntax-dispatch j3d87@t 'any))) (if j3d89@ls/false (apply (lambda (j3d8b@datum) (values (vector 'atom (j2ed3@stx->datum j3d8b@datum)) j3cf3@ids)) j3d89@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3d87@t)))))))))))))))))))))))) (j3cf0@cvt j3ce9@pattern '0 '()))))) (set! j4b9b@j30c4@convert-pattern j30c4@convert-pattern) (set! j30c6@syntax-dispatch (let ((j3dac@stx^ '#f) (j3dae@match-each '#f) (j3db0@match-each+ '#f) (j3db2@match-each-any '#f) (j3db4@match-empty '#f) (j3db6@combine '#f) (j3db8@match* '#f) (j3dba@match '#f)) (begin (set! j3dac@stx^ (lambda (j3e87@e j3e88@m* j3e89@s* j3e8a@ae*) (if (and (null? j3e88@m*) (null? j3e89@s*) (null? j3e8a@ae*)) j3e87@e (j2ea7@mkstx j3e87@e j3e88@m* j3e89@s* j3e8a@ae*)))) (set! j3dae@match-each (lambda (j3e67@e j3e68@p j3e69@m* j3e6a@s* j3e6b@ae*) (if (pair? j3e67@e) (let ((j3e71@first (j3dba@match (car j3e67@e) j3e68@p j3e69@m* j3e6a@s* j3e6b@ae* '()))) (and j3e71@first (let ((j3e73@rest (j3dae@match-each (cdr j3e67@e) j3e68@p j3e69@m* j3e6a@s* j3e6b@ae*))) (and j3e73@rest (cons j3e71@first j3e73@rest))))) (if (null? j3e67@e) '() (if (j2e8b@stx? j3e67@e) (and (not (j2e45@top-marked? j3e69@m*)) (call-with-values (lambda () (join-wraps j3e69@m* j3e6a@s* j3e6b@ae* j3e67@e)) (lambda (j3e7b@j3e76 j3e7c@j3e78 j3e7d@j3e7a) (let ((j3e81@ae* j3e7d@j3e7a) (j3e82@s* j3e7c@j3e78) (j3e83@m* j3e7b@j3e76)) (j3dae@match-each (j2e8d@stx-expr j3e67@e) j3e68@p j3e83@m* j3e82@s* j3e81@ae*))))) (if (j29fd@j28cf@annotation? j3e67@e) (j3dae@match-each (j29ff@j28d3@annotation-expression j3e67@e) j3e68@p j3e69@m* j3e6a@s* j3e6b@ae*) '#f)))))) (set! j3db0@match-each+ (lambda (j3e27@e j3e28@x-pat j3e29@y-pat j3e2a@z-pat j3e2b@m* j3e2c@s* j3e2d@ae* j3e2e@r) (let j3e3f@f ((j3e37@e j3e27@e) (j3e38@m* j3e2b@m*) (j3e39@s* j3e2c@s*) (j3e3a@ae* j3e2d@ae*)) (if (pair? j3e37@e) (call-with-values (lambda () (j3e3f@f (cdr j3e37@e) j3e38@m* j3e39@s* j3e3a@ae*)) (lambda (j3e47@j3e42 j3e48@j3e44 j3e49@j3e46) (let ((j3e4d@r j3e49@j3e46) (j3e4e@y-pat j3e48@j3e44) (j3e4f@xr* j3e47@j3e42)) (if j3e4d@r (if (null? j3e4e@y-pat) (let ((j3e53@xr (j3dba@match (car j3e37@e) j3e28@x-pat j3e38@m* j3e39@s* j3e3a@ae* '()))) (if j3e53@xr (values (cons j3e53@xr j3e4f@xr*) j3e4e@y-pat j3e4d@r) (values '#f '#f '#f))) (values '() (cdr j3e4e@y-pat) (j3dba@match (car j3e37@e) (car j3e4e@y-pat) j3e38@m* j3e39@s* j3e3a@ae* j3e4d@r))) (values '#f '#f '#f))))) (if (j2e8b@stx? j3e37@e) (if (j2e45@top-marked? j3e38@m*) (values '() j3e29@y-pat (j3dba@match j3e37@e j3e2a@z-pat j3e38@m* j3e39@s* j3e3a@ae* j3e2e@r)) (call-with-values (lambda () (join-wraps j3e38@m* j3e39@s* j3e3a@ae* j3e37@e)) (lambda (j3e5b@j3e56 j3e5c@j3e58 j3e5d@j3e5a) (let ((j3e61@ae* j3e5d@j3e5a) (j3e62@s* j3e5c@j3e58) (j3e63@m* j3e5b@j3e56)) (j3e3f@f (j2e8d@stx-expr j3e37@e) j3e63@m* j3e62@s* j3e61@ae*))))) (if (j29fd@j28cf@annotation? j3e37@e) (j3e3f@f (j29ff@j28d3@annotation-expression j3e37@e) j3e38@m* j3e39@s* j3e3a@ae*) (values '() j3e29@y-pat (j3dba@match j3e37@e j3e2a@z-pat j3e38@m* j3e39@s* j3e3a@ae* j3e2e@r)))))))) (set! j3db2@match-each-any (lambda (j3e0b@e j3e0c@m* j3e0d@s* j3e0e@ae*) (if (pair? j3e0b@e) (let ((j3e13@l (j3db2@match-each-any (cdr j3e0b@e) j3e0c@m* j3e0d@s* j3e0e@ae*))) (and j3e13@l (cons (j3dac@stx^ (car j3e0b@e) j3e0c@m* j3e0d@s* j3e0e@ae*) j3e13@l))) (if (null? j3e0b@e) '() (if (j2e8b@stx? j3e0b@e) (and (not (j2e45@top-marked? j3e0c@m*)) (call-with-values (lambda () (join-wraps j3e0c@m* j3e0d@s* j3e0e@ae* j3e0b@e)) (lambda (j3e1b@j3e16 j3e1c@j3e18 j3e1d@j3e1a) (let ((j3e21@ae* j3e1d@j3e1a) (j3e22@s* j3e1c@j3e18) (j3e23@m* j3e1b@j3e16)) (j3db2@match-each-any (j2e8d@stx-expr j3e0b@e) j3e23@m* j3e22@s* j3e21@ae*))))) (if (j29fd@j28cf@annotation? j3e0b@e) (j3db2@match-each-any (j29ff@j28d3@annotation-expression j3e0b@e) j3e0c@m* j3e0d@s* j3e0e@ae*) '#f)))))) (set! j3db4@match-empty (lambda (j3e05@p j3e06@r) (if (null? j3e05@p) j3e06@r (if (eq? j3e05@p '_) j3e06@r (if (eq? j3e05@p 'any) (cons '() j3e06@r) (if (pair? j3e05@p) (j3db4@match-empty (car j3e05@p) (j3db4@match-empty (cdr j3e05@p) j3e06@r)) (if (eq? j3e05@p 'each-any) (cons '() j3e06@r) (let ((j3e09@t (vector-ref j3e05@p '0))) (if (memv j3e09@t '(each)) (j3db4@match-empty (vector-ref j3e05@p '1) j3e06@r) (if (memv j3e09@t '(each+)) (j3db4@match-empty (vector-ref j3e05@p '1) (j3db4@match-empty (reverse (vector-ref j3e05@p '2)) (j3db4@match-empty (vector-ref j3e05@p '3) j3e06@r))) (if (memv j3e09@t '(free-id atom)) j3e06@r (if (memv j3e09@t '(scheme-id atom)) j3e06@r (if (memv j3e09@t '(vector)) (j3db4@match-empty (vector-ref j3e05@p '1) j3e06@r) (assertion-violation 'syntax-dispatch '"invalid pattern" j3e05@p)))))))))))))) (set! j3db6@combine (lambda (j3e01@r* j3e02@r) (if (null? (car j3e01@r*)) j3e02@r (cons (map car j3e01@r*) (j3db6@combine (map cdr j3e01@r*) j3e02@r))))) (set! j3db8@match* (lambda (j3ddd@e j3dde@p j3ddf@m* j3de0@s* j3de1@ae* j3de2@r) (if (null? j3dde@p) (and (null? j3ddd@e) j3de2@r) (if (pair? j3dde@p) (and (pair? j3ddd@e) (j3dba@match (car j3ddd@e) (car j3dde@p) j3ddf@m* j3de0@s* j3de1@ae* (j3dba@match (cdr j3ddd@e) (cdr j3dde@p) j3ddf@m* j3de0@s* j3de1@ae* j3de2@r))) (if (eq? j3dde@p 'each-any) (let ((j3de9@l (j3db2@match-each-any j3ddd@e j3ddf@m* j3de0@s* j3de1@ae*))) (and j3de9@l (cons j3de9@l j3de2@r))) (let ((j3deb@t (vector-ref j3dde@p '0))) (if (memv j3deb@t '(each)) (if (null? j3ddd@e) (j3db4@match-empty (vector-ref j3dde@p '1) j3de2@r) (let ((j3ded@r* (j3dae@match-each j3ddd@e (vector-ref j3dde@p '1) j3ddf@m* j3de0@s* j3de1@ae*))) (and j3ded@r* (j3db6@combine j3ded@r* j3de2@r)))) (if (memv j3deb@t '(free-id)) (and (symbol? j3ddd@e) (j2e45@top-marked? j3ddf@m*) (j2ec5@free-id=? (j3dac@stx^ j3ddd@e j3ddf@m* j3de0@s* j3de1@ae*) (vector-ref j3dde@p '1)) j3de2@r) (if (memv j3deb@t '(scheme-id)) (and (symbol? j3ddd@e) (j2e45@top-marked? j3ddf@m*) (j2ec5@free-id=? (j3dac@stx^ j3ddd@e j3ddf@m* j3de0@s* j3de1@ae*) (j304e@scheme-stx (vector-ref j3dde@p '1))) j3de2@r) (if (memv j3deb@t '(each+)) (call-with-values (lambda () (j3db0@match-each+ j3ddd@e (vector-ref j3dde@p '1) (vector-ref j3dde@p '2) (vector-ref j3dde@p '3) j3ddf@m* j3de0@s* j3de1@ae* j3de2@r)) (lambda (j3df5@j3df0 j3df6@j3df2 j3df7@j3df4) (let ((j3dfb@r j3df7@j3df4) (j3dfc@y-pat j3df6@j3df2) (j3dfd@xr* j3df5@j3df0)) (and j3dfb@r (null? j3dfc@y-pat) (if (null? j3dfd@xr*) (j3db4@match-empty (vector-ref j3dde@p '1) j3dfb@r) (j3db6@combine j3dfd@xr* j3dfb@r)))))) (if (memv j3deb@t '(atom)) (and (fast-equal? (vector-ref j3dde@p '1) (j2ed1@strip j3ddd@e j3ddf@m*)) j3de2@r) (if (memv j3deb@t '(vector)) (and (vector? j3ddd@e) (j3dba@match (vector->list j3ddd@e) (vector-ref j3dde@p '1) j3ddf@m* j3de0@s* j3de1@ae* j3de2@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" j3dde@p))))))))))))) (set! j3dba@match (lambda (j3dbf@e j3dc0@p j3dc1@m* j3dc2@s* j3dc3@ae* j3dc4@r) (if (not j3dc4@r) '#f (if (eq? j3dc0@p '_) j3dc4@r (if (eq? j3dc0@p 'any) (cons (j3dac@stx^ j3dbf@e j3dc1@m* j3dc2@s* j3dc3@ae*) j3dc4@r) (if (j2e8b@stx? j3dbf@e) (and (not (j2e45@top-marked? j3dc1@m*)) (call-with-values (lambda () (join-wraps j3dc1@m* j3dc2@s* j3dc3@ae* j3dbf@e)) (lambda (j3dd1@j3dcc j3dd2@j3dce j3dd3@j3dd0) (let ((j3dd7@ae* j3dd3@j3dd0) (j3dd8@s* j3dd2@j3dce) (j3dd9@m* j3dd1@j3dcc)) (j3dba@match (j2e8d@stx-expr j3dbf@e) j3dc0@p j3dd9@m* j3dd8@s* j3dd7@ae* j3dc4@r))))) (if (j29fd@j28cf@annotation? j3dbf@e) (j3dba@match (j29ff@j28d3@annotation-expression j3dbf@e) j3dc0@p j3dc1@m* j3dc2@s* j3dc3@ae* j3dc4@r) (j3db8@match* j3dbf@e j3dc0@p j3dc1@m* j3dc2@s* j3dc3@ae* j3dc4@r)))))))) (lambda (j3dbb@e j3dbc@p) (j3dba@match j3dbb@e j3dbc@p '() '() '() '()))))) (set! j4b9c@j30c6@syntax-dispatch j30c6@syntax-dispatch) (set! j30c8@ellipsis? (lambda (j3e8f@x) (and (j2ebf@id? j3e8f@x) (j2ec5@free-id=? j3e8f@x (j304e@scheme-stx '...))))) (set! j4b9d@j30c8@ellipsis? j30c8@ellipsis?) (set! j30ca@underscore? (lambda (j3e91@x) (and (j2ebf@id? j3e91@x) (j2ec5@free-id=? j3e91@x (j304e@scheme-stx '_))))) (set! j4b9e@j30ca@underscore? j30ca@underscore?) (set! j30cc@verify-literals (lambda (j3e93@lits j3e94@expr) (for-each (lambda (j3e97@x) (if (or (not (j2ebf@id? j3e97@x)) (j30c8@ellipsis? j3e97@x) (j30ca@underscore? j3e97@x)) (j31a6@syntax-violation '#f '"invalid literal" j3e94@expr j3e97@x) (void))) j3e93@lits))) (set! j4b9f@j30cc@verify-literals j30cc@verify-literals) (set! j30ce@syntax-case-transformer (let ((j3e9a@build-dispatch-call '#f) (j3e9c@invalid-ids-error '#f) (j3e9e@gen-clause '#f) (j3ea0@gen-syntax-case '#f)) (begin (set! j3e9a@build-dispatch-call (lambda (j3f0b@pvars j3f0c@expr j3f0d@y j3f0e@r j3f0f@mr) (let ((j3f15@ids (map car j3f0b@pvars)) (j3f16@levels (map cdr j3f0b@pvars))) (let ((j3f19@labels (map j2e4b@gen-label j3f15@ids)) (j3f1a@new-vars (map j2e47@gen-lexical j3f15@ids))) (let ((j3f1d@body (j30e8@chi-expr (j2eab@add-subst (j2e7f@make-full-rib j3f15@ids j3f19@labels) j3f0c@expr) (append (map (lambda (j3f1f@label j3f20@var j3f21@level) (cons j3f1f@label (j2ed9@make-binding 'syntax (cons j3f20@var j3f21@level)))) j3f19@labels j3f1a@new-vars (map cdr j3f0b@pvars)) j3f0e@r) j3f0f@mr))) (list '(primitive apply) (j2e22@j2d4e@build-lambda '#f j3f1a@new-vars j3f1d@body) j3f0d@y)))))) (set! j3e9c@invalid-ids-error (lambda (j3eff@id* j3f00@e j3f01@class) (let j3f09@find ((j3f05@id* j3eff@id*) (j3f06@ok* '())) (if (null? j3f05@id*) (j31a6@syntax-violation '#f '"invalid syntax" j3f00@e) (if (j2ebf@id? (car j3f05@id*)) (if (j2ecb@bound-id-member? (car j3f05@id*) j3f06@ok*) (j31a2@syntax-error (car j3f05@id*) '"duplicate " j3f01@class) (j3f09@find (cdr j3f05@id*) (cons (car j3f05@id*) j3f06@ok*))) (j31a2@syntax-error (car j3f05@id*) '"invalid " j3f01@class)))))) (set! j3e9e@gen-clause (lambda (j3ed7@x j3ed8@keys j3ed9@clauses j3eda@r j3edb@mr j3edc@pat j3edd@fender j3ede@expr) (call-with-values (lambda () (j30c4@convert-pattern j3edc@pat j3ed8@keys)) (lambda (j3eeb@j3ee8 j3eec@j3eea) (let ((j3eef@pvars j3eec@j3eea) (j3ef0@p j3eeb@j3ee8)) (if (not (j2ec9@distinct-bound-ids? (map car j3eef@pvars))) (j3e9c@invalid-ids-error (map car j3eef@pvars) j3edc@pat '"pattern variable") (if (not (for-all (lambda (j3ef3@x) (not (j30c8@ellipsis? (car j3ef3@x)))) j3eef@pvars)) (j31a6@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" j3edc@pat) (let ((j3ef5@y (j2e47@gen-lexical 'tmp))) (let ((j3ef7@test (if (eq? j3edd@fender '#t) j3ef5@y (let ((j3ef9@call (j3e9a@build-dispatch-call j3eef@pvars j3edd@fender j3ef5@y j3eda@r j3edb@mr))) (list 'if j3ef5@y j3ef9@call (list 'quote '#f)))))) (let ((j3efb@conseq (j3e9a@build-dispatch-call j3eef@pvars j3ede@expr j3ef5@y j3eda@r j3edb@mr))) (let ((j3efd@altern (j3ea0@gen-syntax-case j3ed7@x j3ed8@keys j3ed9@clauses j3eda@r j3edb@mr))) (list (j2e22@j2d4e@build-lambda '#f (list j3ef5@y) (list 'if j3ef7@test j3efb@conseq j3efd@altern)) (list '(primitive syntax-dispatch) j3ed7@x (list 'quote j3ef0@p)))))))))))))) (set! j3ea0@gen-syntax-case (lambda (j3eb5@x j3eb6@keys j3eb7@clauses j3eb8@r j3eb9@mr) (if (null? j3eb7@clauses) (list '(primitive syntax-error) j3eb5@x) (let ((j3ebf@t (car j3eb7@clauses))) (let ((j3ec1@ls/false (j30c6@syntax-dispatch j3ebf@t '(any any)))) (if j3ec1@ls/false (apply (lambda (j3ec3@pat j3ec4@expr) (if (and (j2ebf@id? j3ec3@pat) (not (j2ecb@bound-id-member? j3ec3@pat j3eb6@keys)) (not (j30c8@ellipsis? j3ec3@pat))) (if (j2ec5@free-id=? j3ec3@pat (j304e@scheme-stx '_)) (j30e8@chi-expr j3ec4@expr j3eb8@r j3eb9@mr) (let ((j3ec7@lab (j2e4b@gen-label j3ec3@pat)) (j3ec8@lex (j2e47@gen-lexical j3ec3@pat))) (let ((j3ecb@body (j30e8@chi-expr (j2eab@add-subst (j2e7f@make-full-rib (list j3ec3@pat) (list j3ec7@lab)) j3ec4@expr) (cons (cons j3ec7@lab (j2ed9@make-binding 'syntax (cons j3ec8@lex '0))) j3eb8@r) j3eb9@mr))) (list (j2e22@j2d4e@build-lambda '#f (list j3ec8@lex) j3ecb@body) j3eb5@x)))) (j3e9e@gen-clause j3eb5@x j3eb6@keys (cdr j3eb7@clauses) j3eb8@r j3eb9@mr j3ec3@pat '#t j3ec4@expr))) j3ec1@ls/false) (let ((j3ecd@t j3ebf@t)) (let ((j3ecf@ls/false (j30c6@syntax-dispatch j3ecd@t '(any any any)))) (if j3ecf@ls/false (apply (lambda (j3ed1@pat j3ed2@fender j3ed3@expr) (j3e9e@gen-clause j3eb5@x j3eb6@keys (cdr j3eb7@clauses) j3eb8@r j3eb9@mr j3ed1@pat j3ed2@fender j3ed3@expr)) j3ecf@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3ecd@t)))))))))) (lambda (j3ea1@e j3ea2@r j3ea3@mr) (let ((j3ea7@t j3ea1@e)) (let ((j3ea9@ls/false (j30c6@syntax-dispatch j3ea7@t '(_ any each-any . each-any)))) (if j3ea9@ls/false (apply (lambda (j3eab@expr j3eac@keys j3ead@clauses) (begin (j30cc@verify-literals j3eac@keys j3ea1@e) (let ((j3eb1@x (j2e47@gen-lexical 'tmp))) (let ((j3eb3@body (j3ea0@gen-syntax-case j3eb1@x j3eac@keys j3ead@clauses j3ea2@r j3ea3@mr))) (list (j2e22@j2d4e@build-lambda '#f (list j3eb1@x) j3eb3@body) (j30e8@chi-expr j3eab@expr j3ea2@r j3ea3@mr)))))) j3ea9@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3ea7@t)))))))) (set! j4ba0@j30ce@syntax-case-transformer j30ce@syntax-case-transformer) (set! j30d0@ellipsis-map (lambda (j3f25@proc j3f26@ls . j3f29@ls*) (let ((j3f2c@who '#f)) (begin (set! j3f2c@who '...) (begin (if (not (list? j3f26@ls)) (assertion-violation j3f2c@who '"not a list" j3f26@ls) (void)) (if (not (null? j3f29@ls*)) (let ((j3f2d@n (length j3f26@ls))) (for-each (lambda (j3f2f@x) (begin (if (not (list? j3f2f@x)) (assertion-violation j3f2c@who '"not a list" j3f2f@x) (void)) (if (not (= (length j3f2f@x) j3f2d@n)) (assertion-violation j3f2c@who '"length mismatch" j3f26@ls j3f2f@x) (void)))) j3f29@ls*)) (void)) (apply map j3f25@proc j3f26@ls j3f29@ls*)))))) (set! j4ba1@j30d0@ellipsis-map j30d0@ellipsis-map) (set! j30d2@syntax-transformer (let ((j3f32@gen-syntax '#f) (j3f34@gen-ref '#f) (j3f36@gen-append '#f) (j3f38@gen-mappend '#f) (j3f3a@gen-map '#f) (j3f3c@gen-cons '#f) (j3f3e@gen-vector '#f) (j3f40@regen '#f)) (begin (set! j3f32@gen-syntax (lambda (j3fa9@src j3faa@e j3fab@r j3fac@maps j3fad@ellipsis? j3fae@vec?) (let ((j3fb5@t j3faa@e)) (let ((j3fb7@ls/false (j30c6@syntax-dispatch j3fb5@t 'any))) (if (and j3fb7@ls/false (apply (lambda (j3fb9@dots) (j3fad@ellipsis? j3fb9@dots)) j3fb7@ls/false)) (apply (lambda (j3fbb@dots) (j31a6@syntax-violation '#f '"misplaced ellipsis in syntax form" j3fa9@src)) j3fb7@ls/false) (let ((j3fbd@t j3fb5@t)) (let ((j3fbf@ls/false (j30c6@syntax-dispatch j3fbd@t 'any))) (if (and j3fbf@ls/false (apply (lambda (j3fc1@id) (j2ebf@id? j3fc1@id)) j3fbf@ls/false)) (apply (lambda (j3fc3@id) (let ((j3fc5@label (j2ed5@id->label j3faa@e))) (let ((j3fc7@b (j2ed7@label->binding j3fc5@label j3fab@r))) (if (eq? (j2edb@binding-type j3fc7@b) 'syntax) (call-with-values (lambda () (let ((j3fcd@var.lev (j2edd@binding-value j3fc7@b))) (j3f34@gen-ref j3fa9@src (car j3fcd@var.lev) (cdr j3fcd@var.lev) j3fac@maps))) (lambda (j3fcf@j3fca j3fd0@j3fcc) (let ((j3fd3@maps j3fd0@j3fcc) (j3fd4@var j3fcf@j3fca)) (values (list 'ref j3fd4@var) j3fd3@maps)))) (values (list 'quote j3faa@e) j3fac@maps))))) j3fbf@ls/false) (let ((j3fd7@t j3fbd@t)) (let ((j3fd9@ls/false (j30c6@syntax-dispatch j3fd7@t '(any any)))) (if (and j3fd9@ls/false (apply (lambda (j3fdb@dots j3fdc@e) (j3fad@ellipsis? j3fdb@dots)) j3fd9@ls/false)) (apply (lambda (j3fdf@dots j3fe0@e) (if j3fae@vec? (j31a6@syntax-violation '#f '"misplaced ellipsis in syntax form" j3fa9@src) (j3f32@gen-syntax j3fa9@src j3fe0@e j3fab@r j3fac@maps (lambda (j3fe3@x) '#f) '#f))) j3fd9@ls/false) (let ((j3fe5@t j3fd7@t)) (let ((j3fe7@ls/false (j30c6@syntax-dispatch j3fe5@t '(any any . any)))) (if (and j3fe7@ls/false (apply (lambda (j3fe9@x j3fea@dots j3feb@y) (j3fad@ellipsis? j3fea@dots)) j3fe7@ls/false)) (apply (lambda (j3fef@x j3ff0@dots j3ff1@y) (let j4007@f ((j3ff5@y j3ff1@y) (j3ff6@k (lambda (j3ff9@maps) (call-with-values (lambda () (j3f32@gen-syntax j3fa9@src j3fef@x j3fab@r (cons '() j3ff9@maps) j3fad@ellipsis? '#f)) (lambda (j3fff@j3ffc j4000@j3ffe) (let ((j4003@maps j4000@j3ffe) (j4004@x j3fff@j3ffc)) (if (null? (car j4003@maps)) (j31a6@syntax-violation '#f '"extra ellipsis in syntax form" j3fa9@src) (values (j3f3a@gen-map j4004@x (car j4003@maps)) (cdr j4003@maps))))))))) (let ((j4009@t j3ff5@y)) (let ((j400b@ls/false (j30c6@syntax-dispatch j4009@t '()))) (if j400b@ls/false (apply (lambda () (j3ff6@k j3fac@maps)) j400b@ls/false) (let ((j400d@t j4009@t)) (let ((j400f@ls/false (j30c6@syntax-dispatch j400d@t '(any . any)))) (if (and j400f@ls/false (apply (lambda (j4011@dots j4012@y) (j3fad@ellipsis? j4011@dots)) j400f@ls/false)) (apply (lambda (j4015@dots j4016@y) (j4007@f j4016@y (lambda (j4019@maps) (call-with-values (lambda () (j3ff6@k (cons '() j4019@maps))) (lambda (j401f@j401c j4020@j401e) (let ((j4023@maps j4020@j401e) (j4024@x j401f@j401c)) (if (null? (car j4023@maps)) (j31a6@syntax-violation '#f '"extra ellipsis in syntax form" j3fa9@src) (values (j3f38@gen-mappend j4024@x (car j4023@maps)) (cdr j4023@maps))))))))) j400f@ls/false) (let ((j4027@t j400d@t)) (let ((j4029@ls/false (j30c6@syntax-dispatch j4027@t '_))) (if j4029@ls/false (apply (lambda () (call-with-values (lambda () (j3f32@gen-syntax j3fa9@src j3ff5@y j3fab@r j3fac@maps j3fad@ellipsis? j3fae@vec?)) (lambda (j402f@j402c j4030@j402e) (let ((j4033@maps j4030@j402e) (j4034@y j402f@j402c)) (call-with-values (lambda () (j3ff6@k j4033@maps)) (lambda (j403b@j4038 j403c@j403a) (let ((j403f@maps j403c@j403a) (j4040@x j403b@j4038)) (values (j3f36@gen-append j4040@x j4034@y) j403f@maps)))))))) j4029@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4027@t)))))))))))) j3fe7@ls/false) (let ((j4043@t j3fe5@t)) (let ((j4045@ls/false (j30c6@syntax-dispatch j4043@t '(any . any)))) (if j4045@ls/false (apply (lambda (j4047@x j4048@y) (call-with-values (lambda () (j3f32@gen-syntax j3fa9@src j4047@x j3fab@r j3fac@maps j3fad@ellipsis? '#f)) (lambda (j404f@j404c j4050@j404e) (let ((j4053@maps j4050@j404e) (j4054@xnew j404f@j404c)) (call-with-values (lambda () (j3f32@gen-syntax j3fa9@src j4048@y j3fab@r j4053@maps j3fad@ellipsis? j3fae@vec?)) (lambda (j405b@j4058 j405c@j405a) (let ((j405f@maps j405c@j405a) (j4060@ynew j405b@j4058)) (values (j3f3c@gen-cons j3faa@e j4047@x j4048@y j4054@xnew j4060@ynew) j405f@maps)))))))) j4045@ls/false) (let ((j4063@t j4043@t)) (let ((j4065@ls/false (j30c6@syntax-dispatch j4063@t '#(vector each-any)))) (if j4065@ls/false (apply (lambda (j4067@ls) (call-with-values (lambda () (j3f32@gen-syntax j3fa9@src j4067@ls j3fab@r j3fac@maps j3fad@ellipsis? '#t)) (lambda (j406d@j406a j406e@j406c) (let ((j4071@maps j406e@j406c) (j4072@lsnew j406d@j406a)) (values (j3f3e@gen-vector j3faa@e j4067@ls j4072@lsnew) j4071@maps))))) j4065@ls/false) (let ((j4075@t j4063@t)) (let ((j4077@ls/false (j30c6@syntax-dispatch j4075@t '_))) (if j4077@ls/false (apply (lambda () (values (list 'quote j3faa@e) j3fac@maps)) j4077@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4075@t)))))))))))))))))))))))) (set! j3f34@gen-ref (lambda (j3f8f@src j3f90@var j3f91@level j3f92@maps) (if (= j3f91@level '0) (values j3f90@var j3f92@maps) (if (null? j3f92@maps) (j31a6@syntax-violation '#f '"missing ellipsis in syntax form" j3f8f@src) (call-with-values (lambda () (j3f34@gen-ref j3f8f@src j3f90@var (- j3f91@level '1) (cdr j3f92@maps))) (lambda (j3f9b@j3f98 j3f9c@j3f9a) (let ((j3f9f@outer-maps j3f9c@j3f9a) (j3fa0@outer-var j3f9b@j3f98)) (let ((j3fa3@t (assq j3fa0@outer-var (car j3f92@maps)))) (if j3fa3@t ((lambda (j3fa5@b) (values (cdr j3fa5@b) j3f92@maps)) j3fa3@t) (let ((j3fa7@inner-var (j2e47@gen-lexical 'tmp))) (values j3fa7@inner-var (cons (cons (cons j3fa0@outer-var j3fa7@inner-var) (car j3f92@maps)) j3f9f@outer-maps)))))))))))) (set! j3f36@gen-append (lambda (j3f8b@x j3f8c@y) (if (fast-equal? j3f8c@y ''()) j3f8b@x (list 'append j3f8b@x j3f8c@y)))) (set! j3f38@gen-mappend (lambda (j3f87@e j3f88@map-env) (list 'apply '(primitive append) (j3f3a@gen-map j3f87@e j3f88@map-env)))) (set! j3f3a@gen-map (lambda (j3f75@e j3f76@map-env) (let ((j3f79@formals (map cdr j3f76@map-env)) (j3f7a@actuals (map (lambda (j3f7d@x) (list 'ref (car j3f7d@x))) j3f76@map-env))) (if (eq? (car j3f75@e) 'ref) (car j3f7a@actuals) (if (for-all (lambda (j3f7f@x) (and (eq? (car j3f7f@x) 'ref) (memq (cadr j3f7f@x) j3f79@formals))) (cdr j3f75@e)) (let ((j3f81@args (map (let ((j3f83@r (map cons j3f79@formals j3f7a@actuals))) (lambda (j3f85@x) (cdr (assq (cadr j3f85@x) j3f83@r)))) (cdr j3f75@e)))) (cons 'map (cons (list 'primitive (car j3f75@e)) j3f81@args))) (cons* 'map (list 'lambda j3f79@formals j3f75@e) j3f7a@actuals)))))) (set! j3f3c@gen-cons (lambda (j3f65@e j3f66@x j3f67@y j3f68@xnew j3f69@ynew) (let ((j3f6f@t (car j3f69@ynew))) (if (memv j3f6f@t '(quote)) (if (eq? (car j3f68@xnew) 'quote) (let ((j3f71@xnew (cadr j3f68@xnew)) (j3f72@ynew (cadr j3f69@ynew))) (if (and (eq? j3f71@xnew j3f66@x) (eq? j3f72@ynew j3f67@y)) (list 'quote j3f65@e) (list 'quote (cons j3f71@xnew j3f72@ynew)))) (if (null? (cadr j3f69@ynew)) (list 'list j3f68@xnew) (list 'cons j3f68@xnew j3f69@ynew))) (if (memv j3f6f@t '(list)) (cons 'list (cons j3f68@xnew (cdr j3f69@ynew))) (list 'cons j3f68@xnew j3f69@ynew)))))) (set! j3f3e@gen-vector (lambda (j3f5f@e j3f60@ls j3f61@lsnew) (if (eq? (car j3f61@lsnew) 'quote) (if (eq? (cadr j3f61@lsnew) j3f60@ls) (list 'quote j3f5f@e) (list 'quote (list->vector (cadr j3f61@lsnew)))) (if (eq? (car j3f61@lsnew) 'list) (cons 'vector (cdr j3f61@lsnew)) (list 'list->vector j3f61@lsnew))))) (set! j3f40@regen (lambda (j3f59@x) (let ((j3f5b@t (car j3f59@x))) (if (memv j3f5b@t '(ref)) (cadr j3f59@x) (if (memv j3f5b@t '(primitive)) (list 'primitive (cadr j3f59@x)) (if (memv j3f5b@t '(quote)) (list 'quote (cadr j3f59@x)) (if (memv j3f5b@t '(lambda)) (j2e22@j2d4e@build-lambda '#f (cadr j3f59@x) (j3f40@regen (caddr j3f59@x))) (if (memv j3f5b@t '(map)) (let ((j3f5d@ls (map j3f40@regen (cdr j3f59@x)))) (cons '(primitive ellipsis-map) j3f5d@ls)) (cons (list 'primitive (car j3f59@x)) (map j3f40@regen (cdr j3f59@x))))))))))) (lambda (j3f41@e j3f42@r j3f43@mr) (let ((j3f47@t j3f41@e)) (let ((j3f49@ls/false (j30c6@syntax-dispatch j3f47@t '(_ any)))) (if j3f49@ls/false (apply (lambda (j3f4b@x) (call-with-values (lambda () (j3f32@gen-syntax j3f41@e j3f4b@x j3f42@r '() j30c8@ellipsis? '#f)) (lambda (j3f51@j3f4e j3f52@j3f50) (let ((j3f55@maps j3f52@j3f50) (j3f56@e j3f51@j3f4e)) (j3f40@regen j3f56@e))))) j3f49@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j3f47@t)))))))) (set! j4ba2@j30d2@syntax-transformer j30d2@syntax-transformer) (set! j30d4@core-macro-transformer (lambda (j4079@name) (let ((j407b@t j4079@name)) (if (memv j407b@t '(quote)) j3076@quote-transformer (if (memv j407b@t '(lambda)) j307a@lambda-transformer (if (memv j407b@t '(case-lambda)) j3078@case-lambda-transformer (if (memv j407b@t '(letrec)) j305e@letrec-transformer (if (memv j407b@t '(letrec*)) j3060@letrec*-transformer (if (memv j407b@t '(let)) j305c@let-transformer (if (memv j407b@t '(if)) j306e@if-transformer (if (memv j407b@t '(and)) j3070@and-transformer (if (memv j407b@t '(or)) j3072@or-transformer (if (memv j407b@t '(foreign-call)) j30c2@foreign-call-transformer (if (memv j407b@t '(syntax-case)) j30ce@syntax-case-transformer (if (memv j407b@t '(syntax)) j30d2@syntax-transformer (if (memv j407b@t '(type-descriptor)) j3064@type-descriptor-transformer (if (memv j407b@t '(record-type-descriptor)) j3066@record-type-descriptor-transformer (if (memv j407b@t '(record-constructor-descriptor)) j3068@record-constructor-descriptor-transformer (if (memv j407b@t '(fluid-let-syntax)) j3062@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" j4079@name)))))))))))))))))))) (set! j4ba3@j30d4@core-macro-transformer j30d4@core-macro-transformer) (set! j30d6@symbol-macro (lambda (j407d@x j407e@set) (let ((j4081@t j407d@x)) (let ((j4083@ls/false (j30c6@syntax-dispatch j4081@t '(_ any)))) (if (and j4083@ls/false (apply (lambda (j4085@name) (and (j2ebf@id? j4085@name) (memq (j2ec1@id->sym j4085@name) j407e@set))) j4083@ls/false)) (apply (lambda (j4087@name) (j307c@bless (list 'quote j4087@name))) j4083@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4081@t)))))) (set! j4ba4@j30d6@symbol-macro j30d6@symbol-macro) (set! j30d8@macro-transformer (lambda (j4089@x) (if (procedure? j4089@x) j4089@x (if (symbol? j4089@x) (let ((j408b@t j4089@x)) (if (memv j408b@t '(define-record-type)) j30ba@define-record-type-macro (if (memv j408b@t '(define-struct)) j30b8@define-struct-macro (if (memv j408b@t '(include)) j30ae@include-macro (if (memv j408b@t '(cond)) j30aa@cond-macro (if (memv j408b@t '(let)) j3082@let-macro (if (memv j408b@t '(do)) j30a2@do-macro (if (memv j408b@t '(or)) j30a6@or-macro (if (memv j408b@t '(and)) j30a8@and-macro (if (memv j408b@t '(let*)) j30a4@let*-macro (if (memv j408b@t '(let-values)) j3084@let-values-macro (if (memv j408b@t '(let*-values)) j3086@let*-values-macro (if (memv j408b@t '(syntax-rules)) j30b2@syntax-rules-macro (if (memv j408b@t '(quasiquote)) j30b4@quasiquote-macro (if (memv j408b@t '(quasisyntax)) j30b6@quasisyntax-macro (if (memv j408b@t '(with-syntax)) j307e@with-syntax-macro (if (memv j408b@t '(when)) j306a@when-macro (if (memv j408b@t '(unless)) j306c@unless-macro (if (memv j408b@t '(case)) j3074@case-macro (if (memv j408b@t '(identifier-syntax)) j30a0@identifier-syntax-macro (if (memv j408b@t '(time)) j3098@time-macro (if (memv j408b@t '(delay)) j309a@delay-macro (if (memv j408b@t '(assert)) j309c@assert-macro (if (memv j408b@t '(endianness)) j309e@endianness-macro (if (memv j408b@t '(guard)) j3094@guard-macro (if (memv j408b@t '(define-enumeration)) j3096@define-enumeration-macro (if (memv j408b@t '(trace-lambda)) j3088@trace-lambda-macro (if (memv j408b@t '(trace-define)) j308a@trace-define-macro (if (memv j408b@t '(trace-define-syntax)) j308c@trace-define-syntax-macro (if (memv j408b@t '(trace-let-syntax)) j3090@trace-let-syntax-macro (if (memv j408b@t '(trace-letrec-syntax)) j3092@trace-letrec-syntax-macro (if (memv j408b@t '(define-condition-type)) j30bc@define-condition-type-macro (if (memv j408b@t '(parameterize)) j30c0@parameterize-macro (if (memv j408b@t '(include-into)) j30b0@include-into-macro (if (memv j408b@t '(eol-style)) (lambda (j408d@x) (j30d6@symbol-macro j408d@x '(none lf cr crlf nel crnel ls))) (if (memv j408b@t '(error-handling-mode)) (lambda (j408f@x) (j30d6@symbol-macro j408f@x '(ignore raise replace))) (if (memv j408b@t '(buffer-mode)) (lambda (j4091@x) (j30d6@symbol-macro j4091@x '(none line block))) (if (memv j408b@t '(file-options)) j2e3a@file-options-macro (if (memv j408b@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) j30be@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" j4089@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" j4089@x))))) (set! j4ba5@j30d8@macro-transformer j30d8@macro-transformer) (set! j30da@local-macro-transformer (lambda (j4093@x) (car j4093@x))) (set! j4ba6@j30da@local-macro-transformer j30da@local-macro-transformer) (set! j30dc@do-macro-call (lambda (j4095@transformer j4096@expr) (let ((j4099@out (j4095@transformer (j2ea9@add-mark j2ea3@anti-mark j4096@expr '#f)))) (begin (let j409d@f ((j409b@x j4099@out)) (if (not (j2e8b@stx? j409b@x)) (if (pair? j409b@x) (begin (j409d@f (car j409b@x)) (j409d@f (cdr j409b@x))) (if (vector? j409b@x) (vector-for-each j409d@f j409b@x) (if (symbol? j409b@x) (j31a6@syntax-violation '#f '"raw symbol encountered in output of macro" j4096@expr j409b@x) (void)))) (void))) (j2ea9@add-mark (j2ea1@gen-mark) j4099@out j4096@expr))))) (set! j4ba7@j30dc@do-macro-call j30dc@do-macro-call) (set! j30de@chi-macro (lambda (j409f@p j40a0@e) (j30dc@do-macro-call (j30d8@macro-transformer j409f@p) j40a0@e))) (set! j4ba8@j30de@chi-macro j30de@chi-macro) (set! j30e0@chi-local-macro (lambda (j40a3@p j40a4@e) (j30dc@do-macro-call (j30da@local-macro-transformer j40a3@p) j40a4@e))) (set! j4ba9@j30e0@chi-local-macro j30e0@chi-local-macro) (set! j30e2@chi-global-macro (lambda (j40a7@p j40a8@e) (let ((j40ab@lib (car j40a7@p)) (j40ac@loc (cdr j40a7@p))) (begin (j2cd6@j2b25@visit-library j40ab@lib) (let ((j40af@x (symbol-value j40ac@loc))) (let ((j40b1@transformer (if (procedure? j40af@x) j40af@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" j40af@x)))) (j30dc@do-macro-call j40b1@transformer j40a8@e))))))) (set! j4baa@j30e2@chi-global-macro j30e2@chi-global-macro) (set! j30e4@chi-expr* (lambda (j40b3@e* j40b4@r j40b5@mr) (if (null? j40b3@e*) '() (let ((j40b9@e (j30e8@chi-expr (car j40b3@e*) j40b4@r j40b5@mr))) (cons j40b9@e (j30e4@chi-expr* (cdr j40b3@e*) j40b4@r j40b5@mr)))))) (set! j4bab@j30e4@chi-expr* j30e4@chi-expr*) (set! j30e6@chi-application (lambda (j40bb@e j40bc@r j40bd@mr) (let ((j40c1@t j40bb@e)) (let ((j40c3@ls/false (j30c6@syntax-dispatch j40c1@t '(any . each-any)))) (if j40c3@ls/false (apply (lambda (j40c5@rator j40c6@rands) (let ((j40c9@rator (j30e8@chi-expr j40c5@rator j40bc@r j40bd@mr))) (cons j40c9@rator (j30e4@chi-expr* j40c6@rands j40bc@r j40bd@mr)))) j40c3@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j40c1@t)))))) (set! j4bac@j30e6@chi-application j30e6@chi-application) (set! j30e8@chi-expr (lambda (j40cb@e j40cc@r j40cd@mr) (call-with-values (lambda () (j2ee1@syntax-type j40cb@e j40cc@r)) (lambda (j40d7@j40d2 j40d8@j40d4 j40d9@j40d6) (let ((j40dd@kwd j40d9@j40d6) (j40de@value j40d8@j40d4) (j40df@type j40d7@j40d2)) (let ((j40e3@t j40df@type)) (if (memv j40e3@t '(core-macro)) (let ((j40e5@transformer (j30d4@core-macro-transformer j40de@value))) (j40e5@transformer j40cb@e j40cc@r j40cd@mr)) (if (memv j40e3@t '(global)) (let ((j40e7@lib (car j40de@value))) (let ((j40e9@loc (cdr j40de@value))) (begin ((j312e@inv-collector) j40e7@lib) j40e9@loc))) (if (memv j40e3@t '(core-prim)) (let ((j40eb@name j40de@value)) (list 'primitive j40eb@name)) (if (memv j40e3@t '(call)) (j30e6@chi-application j40cb@e j40cc@r j40cd@mr) (if (memv j40e3@t '(lexical)) (let ((j40ed@lex (j3050@lexical-var j40de@value))) j40ed@lex) (if (memv j40e3@t '(global-macro global-macro!)) (j30e8@chi-expr (j30e2@chi-global-macro j40de@value j40cb@e) j40cc@r j40cd@mr) (if (memv j40e3@t '(local-macro local-macro!)) (j30e8@chi-expr (j30e0@chi-local-macro j40de@value j40cb@e) j40cc@r j40cd@mr) (if (memv j40e3@t '(macro macro!)) (j30e8@chi-expr (j30de@chi-macro j40de@value j40cb@e) j40cc@r j40cd@mr) (if (memv j40e3@t '(constant)) (let ((j40ef@datum j40de@value)) (list 'quote j40ef@datum)) (if (memv j40e3@t '(set!)) (j30ea@chi-set! j40cb@e j40cc@r j40cd@mr) (if (memv j40e3@t '(begin)) (let ((j40f1@t j40cb@e)) (let ((j40f3@ls/false (j30c6@syntax-dispatch j40f1@t '(_ any . each-any)))) (if j40f3@ls/false (apply (lambda (j40f5@x j40f6@x*) (j2e24@j2d7e@build-sequence '#f (j30e4@chi-expr* (cons j40f5@x j40f6@x*) j40cc@r j40cd@mr))) j40f3@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j40f1@t)))) (if (memv j40e3@t '(let-syntax letrec-syntax)) (let ((j40f9@t j40cb@e)) (let ((j40fb@ls/false (j30c6@syntax-dispatch j40f9@t '(_ #(each (any any)) any . each-any)))) (if (and j40fb@ls/false (apply (lambda (j40fd@xlhs* j40fe@xrhs* j40ff@xbody j4100@xbody*) (if (not (j2ec7@valid-bound-ids? j40fd@xlhs*)) (j31a6@syntax-violation '#f '"invalid identifiers" j40cb@e) (void))) j40fb@ls/false)) (apply (lambda (j4105@xlhs* j4106@xrhs* j4107@xbody j4108@xbody*) (let ((j410d@xlab* (map j2e4b@gen-label j4105@xlhs*))) (let ((j410f@xrib (j2e7f@make-full-rib j4105@xlhs* j410d@xlab*))) (let ((j4111@xb* (map (lambda (j4113@x) (j2ef7@make-eval-transformer (j3120@expand-transformer (if (eq? j40df@type 'let-syntax) j4113@x (j2eab@add-subst j410f@xrib j4113@x)) j40cd@mr))) j4106@xrhs*))) (j2e24@j2d7e@build-sequence '#f (j30e4@chi-expr* (map (lambda (j4115@x) (j2eab@add-subst j410f@xrib j4115@x)) (cons j4107@xbody j4108@xbody*)) (append (map cons j410d@xlab* j4111@xb*) j40cc@r) (append (map cons j410d@xlab* j4111@xb*) j40cd@mr))))))) j40fb@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j40f9@t)))) (if (memv j40e3@t '(displaced-lexical)) (j31a6@syntax-violation '#f '"identifier out of context" j40cb@e) (if (memv j40e3@t '(syntax)) (j31a6@syntax-violation '#f '"reference to pattern variable outside a syntax form" j40cb@e) (if (memv j40e3@t '(define define-syntax module import library)) (j31a6@syntax-violation '#f (string-append (let ((j4117@t j40df@type)) (if (memv j4117@t '(define)) '"a definition" (if (memv j4117@t '(define-syntax)) '"a define-syntax" (if (memv j4117@t '(module)) '"a module definition" (if (memv j4117@t '(library)) '"a library definition" (if (memv j4117@t '(import)) '"an import declaration" (if (memv j4117@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") j40cb@e) (if (memv j40e3@t '(mutable)) (j31a6@syntax-violation '#f '"attempt to reference an unexportable variable" j40cb@e) (j31a6@syntax-violation '#f '"invalid expression" j40cb@e))))))))))))))))))))))) (set! j4bad@j30e8@chi-expr j30e8@chi-expr) (set! j30ea@chi-set! (lambda (j4119@e j411a@r j411b@mr) (let ((j411f@t j4119@e)) (let ((j4121@ls/false (j30c6@syntax-dispatch j411f@t '(_ any any)))) (if (and j4121@ls/false (apply (lambda (j4123@x j4124@v) (j2ebf@id? j4123@x)) j4121@ls/false)) (apply (lambda (j4127@x j4128@v) (call-with-values (lambda () (j2ee1@syntax-type j4127@x j411a@r)) (lambda (j4131@j412c j4132@j412e j4133@j4130) (let ((j4137@kwd j4133@j4130) (j4138@value j4132@j412e) (j4139@type j4131@j412c)) (let ((j413d@t j4139@type)) (if (memv j413d@t '(lexical)) (begin (j3054@set-lexical-mutable! j4138@value '#t) (list 'set! (j3050@lexical-var j4138@value) (j30e8@chi-expr j4128@v j411a@r j411b@mr))) (if (memv j413d@t '(core-prim)) (j31a6@syntax-violation '#f '"cannot modify imported core primitive" j4119@e) (if (memv j413d@t '(global)) (j31a6@syntax-violation '#f '"attempt to modify imported binding" j4119@e) (if (memv j413d@t '(global-macro!)) (j30e8@chi-expr (j30e2@chi-global-macro j4138@value j4119@e) j411a@r j411b@mr) (if (memv j413d@t '(local-macro!)) (j30e8@chi-expr (j30e0@chi-local-macro j4138@value j4119@e) j411a@r j411b@mr) (if (memv j413d@t '(mutable)) (j31a6@syntax-violation '#f '"attempt to assign to an unexportable variable" j4119@e) (j31a6@syntax-violation '#f '"invalid syntax" j4119@e)))))))))))) j4121@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j411f@t)))))) (set! j4bae@j30ea@chi-set! j30ea@chi-set!) (set! j30ec@verify-formals (lambda (j413f@fmls j4140@stx) (let ((j4143@t j413f@fmls)) (let ((j4145@ls/false (j30c6@syntax-dispatch j4143@t 'each-any))) (if j4145@ls/false (apply (lambda (j4147@x*) (if (not (j2ec7@valid-bound-ids? j4147@x*)) (j3080@invalid-fmls-error j4140@stx j413f@fmls) (void))) j4145@ls/false) (let ((j4149@t j4143@t)) (let ((j414b@ls/false (j30c6@syntax-dispatch j4149@t '#(each+ any () any)))) (if j414b@ls/false (apply (lambda (j414d@x* j414e@x) (if (not (j2ec7@valid-bound-ids? (cons j414e@x j414d@x*))) (j3080@invalid-fmls-error j4140@stx j413f@fmls) (void))) j414b@ls/false) (let ((j4151@t j4149@t)) (let ((j4153@ls/false (j30c6@syntax-dispatch j4151@t '_))) (if j4153@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid syntax" j4140@stx)) j4153@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4151@t)))))))))))) (set! j4baf@j30ec@verify-formals j30ec@verify-formals) (set! j30ee@chi-lambda-clause (lambda (j4155@stx j4156@fmls j4157@body* j4158@r j4159@mr) (let ((j415f@t j4156@fmls)) (let ((j4161@ls/false (j30c6@syntax-dispatch j415f@t 'each-any))) (if j4161@ls/false (apply (lambda (j4163@x*) (begin (j30ec@verify-formals j4156@fmls j4155@stx) (let ((j4165@lex* (map j2e47@gen-lexical j4163@x*)) (j4166@lab* (map j2e4b@gen-label j4163@x*))) (values j4165@lex* (j30fe@chi-internal (j2eab@add-subst (j2e7f@make-full-rib j4163@x* j4166@lab*) j4157@body*) (j3058@add-lexicals j4166@lab* j4165@lex* j4158@r) j4159@mr))))) j4161@ls/false) (let ((j4169@t j415f@t)) (let ((j416b@ls/false (j30c6@syntax-dispatch j4169@t '#(each+ any () any)))) (if j416b@ls/false (apply (lambda (j416d@x* j416e@x) (begin (j30ec@verify-formals j4156@fmls j4155@stx) (let ((j4171@lex* (map j2e47@gen-lexical j416d@x*)) (j4172@lab* (map j2e4b@gen-label j416d@x*)) (j4173@lex (j2e47@gen-lexical j416e@x)) (j4174@lab (j2e4b@gen-label j416e@x))) (values (append j4171@lex* j4173@lex) (j30fe@chi-internal (j2eab@add-subst (j2e7f@make-full-rib (cons j416e@x j416d@x*) (cons j4174@lab j4172@lab*)) j4157@body*) (j3058@add-lexicals (cons j4174@lab j4172@lab*) (cons j4173@lex j4171@lex*) j4158@r) j4159@mr))))) j416b@ls/false) (let ((j4179@t j4169@t)) (let ((j417b@ls/false (j30c6@syntax-dispatch j4179@t '_))) (if j417b@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid syntax" j4156@fmls)) j417b@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4179@t)))))))))))) (set! j4bb0@j30ee@chi-lambda-clause j30ee@chi-lambda-clause) (set! j30f0@chi-lambda-clause* (lambda (j417d@stx j417e@fmls* j417f@body** j4180@r j4181@mr) (if (null? j417e@fmls*) (values '() '()) (call-with-values (lambda () (j30ee@chi-lambda-clause j417d@stx (car j417e@fmls*) (car j417f@body**) j4180@r j4181@mr)) (lambda (j418b@j4188 j418c@j418a) (let ((j418f@b j418c@j418a) (j4190@a j418b@j4188)) (call-with-values (lambda () (j30f0@chi-lambda-clause* j417d@stx (cdr j417e@fmls*) (cdr j417f@body**) j4180@r j4181@mr)) (lambda (j4197@j4194 j4198@j4196) (let ((j419b@b* j4198@j4196) (j419c@a* j4197@j4194)) (values (cons j4190@a j419c@a*) (cons j418f@b j419b@b*))))))))))) (set! j4bb1@j30f0@chi-lambda-clause* j30f0@chi-lambda-clause*) (set! j30f2@chi-defun (lambda (j419f@x j41a0@r j41a1@mr) (let ((j41a5@fmls (car j419f@x)) (j41a6@body* (cdr j419f@x))) (call-with-values (lambda () (j30ee@chi-lambda-clause j41a5@fmls j41a5@fmls j41a6@body* j41a0@r j41a1@mr)) (lambda (j41ad@j41aa j41ae@j41ac) (let ((j41b1@body j41ae@j41ac) (j41b2@fmls j41ad@j41aa)) (j2e22@j2d4e@build-lambda '#f j41b2@fmls j41b1@body))))))) (set! j4bb2@j30f2@chi-defun j30f2@chi-defun) (set! j30f4@chi-rhs (lambda (j41b5@rhs j41b6@r j41b7@mr) (let ((j41bb@t (car j41b5@rhs))) (if (memv j41bb@t '(defun)) (j30f2@chi-defun (cdr j41b5@rhs) j41b6@r j41b7@mr) (if (memv j41bb@t '(expr)) (let ((j41bd@expr (cdr j41b5@rhs))) (j30e8@chi-expr j41bd@expr j41b6@r j41b7@mr)) (if (memv j41bb@t '(top-expr)) (let ((j41bf@expr (cdr j41b5@rhs))) (j2e24@j2d7e@build-sequence '#f (list (j30e8@chi-expr j41bf@expr j41b6@r j41b7@mr) (j2e25@j2d80@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" j41b5@rhs))))))) (set! j4bb3@j30f4@chi-rhs j30f4@chi-rhs) (set! j30f6@expand-interaction-rhs*/init* (lambda (j41c1@lhs* j41c2@rhs* j41c3@init* j41c4@r j41c5@mr) (let j41cf@f ((j41cb@lhs* j41c1@lhs*) (j41cc@rhs* j41c2@rhs*)) (if (null? j41cb@lhs*) (map (lambda (j41d1@x) (j30e8@chi-expr j41d1@x j41c4@r j41c5@mr)) j41c3@init*) (let ((j41d3@lhs (car j41cb@lhs*)) (j41d4@rhs (car j41cc@rhs*))) (let ((j41d7@t (car j41d4@rhs))) (if (memv j41d7@t '(defun)) (let ((j41d9@rhs (j30f2@chi-defun (cdr j41d4@rhs) j41c4@r j41c5@mr))) (cons (list 'set! j41d3@lhs j41d9@rhs) (j41cf@f (cdr j41cb@lhs*) (cdr j41cc@rhs*)))) (if (memv j41d7@t '(expr)) (let ((j41db@rhs (j30e8@chi-expr (cdr j41d4@rhs) j41c4@r j41c5@mr))) (cons (list 'set! j41d3@lhs j41db@rhs) (j41cf@f (cdr j41cb@lhs*) (cdr j41cc@rhs*)))) (if (memv j41d7@t '(top-expr)) (let ((j41dd@e (j30e8@chi-expr (cdr j41d4@rhs) j41c4@r j41c5@mr))) (cons j41dd@e (j41cf@f (cdr j41cb@lhs*) (cdr j41cc@rhs*)))) (error 'expand-interaction '"invallid" j41d4@rhs)))))))))) (set! j4bb4@j30f6@expand-interaction-rhs*/init* j30f6@expand-interaction-rhs*/init*) (set! j30f8@chi-rhs* (lambda (j41df@rhs* j41e0@r j41e1@mr) (let j41e7@f ((j41e5@ls j41df@rhs*)) (if (null? j41e5@ls) '() (let ((j41e9@a (j30f4@chi-rhs (car j41e5@ls) j41e0@r j41e1@mr))) (cons j41e9@a (j41e7@f (cdr j41e5@ls)))))))) (set! j4bb5@j30f8@chi-rhs* j30f8@chi-rhs*) (set! j30fa@find-bound=? (lambda (j41eb@x j41ec@lhs* j41ed@rhs*) (if (null? j41ec@lhs*) '#f (if (j2ec3@bound-id=? j41eb@x (car j41ec@lhs*)) (car j41ed@rhs*) (j30fa@find-bound=? j41eb@x (cdr j41ec@lhs*) (cdr j41ed@rhs*)))))) (set! j4bb6@j30fa@find-bound=? j30fa@find-bound=?) (set! j30fc@find-dups (lambda (j41f1@ls) (let j41f7@f ((j41f3@ls j41f1@ls) (j41f4@dups '())) (if (null? j41f3@ls) j41f4@dups (let ((j41f9@t (j30fa@find-bound=? (car j41f3@ls) (cdr j41f3@ls) (cdr j41f3@ls)))) (if j41f9@t ((lambda (j41fb@x) (j41f7@f (cdr j41f3@ls) (cons (list (car j41f3@ls) j41fb@x) j41f4@dups))) j41f9@t) (j41f7@f (cdr j41f3@ls) j41f4@dups))))))) (set! j4bb7@j30fc@find-dups j30fc@find-dups) (set! j30fe@chi-internal (lambda (j41fd@e* j41fe@r j41ff@mr) (let ((j4203@rib (j2e73@make-empty-rib))) (call-with-values (lambda () (j311e@chi-body* (map (lambda (j4215@x) (j2eab@add-subst j4203@rib j4215@x)) (j2ebd@syntax->list j41fd@e*)) j41fe@r j41ff@mr '() '() '() '() '() j4203@rib '#f)) (lambda (j4217@j4206 j4218@j4208 j4219@j420a j421a@j420c j421b@j420e j421c@j4210 j421d@j4212 j421e@j4214) (let ((j4227@_exp* j421e@j4214) (j4228@kwd* j421d@j4212) (j4229@mod** j421c@j4210) (j422a@rhs* j421b@j420e) (j422b@lex* j421a@j420c) (j422c@mr j4219@j420a) (j422d@r j4218@j4208) (j422e@e* j4217@j4206)) (begin (if (null? j422e@e*) (j31a6@syntax-violation '#f '"no expression in body" j422e@e*) (void)) (let ((j4237@init* (j30e4@chi-expr* (append (apply append (reverse j4229@mod**)) j422e@e*) j422d@r j422c@mr))) (let ((j4239@rhs* (j30f8@chi-rhs* j422a@rhs* j422d@r j422c@mr))) (j2e29@j2d88@build-letrec* '#f (reverse j422b@lex*) (reverse j4239@rhs*) (j2e24@j2d7e@build-sequence '#f j4237@init*))))))))))) (set! j4bb8@j30fe@chi-internal j30fe@chi-internal) (set! j3100@parse-module (lambda (j423b@e) (let ((j423d@t j423b@e)) (let ((j423f@ls/false (j30c6@syntax-dispatch j423d@t '(_ each-any . each-any)))) (if j423f@ls/false (apply (lambda (j4241@export* j4242@b*) (begin (if (not (for-all j2ebf@id? j4241@export*)) (j31a6@syntax-violation '#f '"module exports must be identifiers" j423b@e) (void)) (values '#f (list->vector j4241@export*) j4242@b*))) j423f@ls/false) (let ((j4245@t j423d@t)) (let ((j4247@ls/false (j30c6@syntax-dispatch j4245@t '(_ any each-any . each-any)))) (if j4247@ls/false (apply (lambda (j4249@name j424a@export* j424b@b*) (begin (if (not (j2ebf@id? j4249@name)) (j31a6@syntax-violation '#f '"module name must be an identifier" j423b@e) (void)) (if (not (for-all j2ebf@id? j424a@export*)) (j31a6@syntax-violation '#f '"module exports must be identifiers" j423b@e) (void)) (values j4249@name (list->vector j424a@export*) j424b@b*))) j4247@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4245@t))))))))) (set! j4bb9@j3100@parse-module j3100@parse-module) (set! j310a@module-interface? (lambda (j424f@x) (and (simple-struct? j424f@x) (eq? (simple-struct-name j424f@x) 'module-interface)))) (set! j4bba@j310a@module-interface? j310a@module-interface?) (set! j310c@module-interface-first-mark (lambda (j4251@x) (simple-struct-ref j4251@x '0))) (set! j4bbb@j310c@module-interface-first-mark j310c@module-interface-first-mark) (set! j310e@set-module-interface-first-mark! (lambda (j4253@x j4254@val) (simple-struct-set! j4253@x '0 j4254@val))) (set! j4bbc@j310e@set-module-interface-first-mark! j310e@set-module-interface-first-mark!) (set! j3110@module-interface-exp-id-vec (lambda (j4257@x) (simple-struct-ref j4257@x '1))) (set! j4bbd@j3110@module-interface-exp-id-vec j3110@module-interface-exp-id-vec) (set! j3112@set-module-interface-exp-id-vec! (lambda (j4259@x j425a@val) (simple-struct-set! j4259@x '1 j425a@val))) (set! j4bbe@j3112@set-module-interface-exp-id-vec! j3112@set-module-interface-exp-id-vec!) (set! j3114@module-interface-exp-lab-vec (lambda (j425d@x) (simple-struct-ref j425d@x '2))) (set! j4bbf@j3114@module-interface-exp-lab-vec j3114@module-interface-exp-lab-vec) (set! j3116@set-module-interface-exp-lab-vec! (lambda (j425f@x j4260@val) (simple-struct-set! j425f@x '2 j4260@val))) (set! j4bc0@j3116@set-module-interface-exp-lab-vec! j3116@set-module-interface-exp-lab-vec!) (set! j3118@dummy '3) (set! j4bc1@j3118@dummy j3118@dummy) (set! j311a@module-interface-exp-id* (lambda (j4263@iface j4264@id) (let ((j4268@diff-marks '#f)) (begin (set! j4268@diff-marks (lambda (j426f@ls j4270@x) (begin (if (null? j426f@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((j4273@a (car j426f@ls))) (if (eq? j4273@a j4270@x) '() (cons j4273@a (j4268@diff-marks (cdr j426f@ls) j4270@x))))))) (let ((j4269@diff (j4268@diff-marks (j2e91@stx-mark* j4264@id) (j310c@module-interface-first-mark j4263@iface))) (j426a@id-vec (j3110@module-interface-exp-id-vec j4263@iface))) (if (null? j4269@diff) j426a@id-vec (vector-map (lambda (j426d@x) (make-simple-struct 'stx '5 (list (j2e8d@stx-expr j426d@x) (append j4269@diff (j2e91@stx-mark* j426d@x)) '() '()))) j426a@id-vec))))))) (set! j4bc2@j311a@module-interface-exp-id* j311a@module-interface-exp-id*) (set! j311c@chi-internal-module (lambda (j4275@e j4276@r j4277@mr j4278@lex* j4279@rhs* j427a@mod** j427b@kwd*) (call-with-values (lambda () (j3100@parse-module j4275@e)) (lambda (j4289@j4284 j428a@j4286 j428b@j4288) (let ((j428f@e* j428b@j4288) (j4290@exp-id* j428a@j4286) (j4291@name j4289@j4284)) (let ((j4295@rib (j2e73@make-empty-rib))) (let ((j4297@e* (map (lambda (j4299@x) (j2eab@add-subst j4295@rib j4299@x)) (j2ebd@syntax->list j428f@e*)))) (call-with-values (lambda () (j311e@chi-body* j4297@e* j4276@r j4277@mr j4278@lex* j4279@rhs* j427a@mod** j427b@kwd* '() j4295@rib '#f)) (lambda (j42ab@j429c j42ac@j429e j42ad@j42a0 j42ae@j42a2 j42af@j42a4 j42b0@j42a6 j42b1@j42a8 j42b2@j42aa) (let ((j42bb@_exp* j42b2@j42aa) (j42bc@kwd* j42b1@j42a8) (j42bd@mod** j42b0@j42a6) (j42be@rhs* j42af@j42a4) (j42bf@lex* j42ae@j42a2) (j42c0@mr j42ad@j42a0) (j42c1@r j42ac@j429e) (j42c2@e* j42ab@j429c)) (let ((j42cb@exp-lab* (vector-map (lambda (j42cf@x) (or (j2ed5@id->label (make-simple-struct 'stx '5 (list (j2ec1@id->sym j42cf@x) (j2e91@stx-mark* j42cf@x) (list j4295@rib) '()))) (j31a6@syntax-violation '#f '"cannot find module export" j42cf@x))) j4290@exp-id*)) (j42cc@mod** (cons j42c2@e* j42bd@mod**))) (if (not j4291@name) (values j42bf@lex* j42be@rhs* j4290@exp-id* j42cb@exp-lab* j42c1@r j42c0@mr j42cc@mod** j42bc@kwd*) (let ((j42d1@lab (j2e4b@gen-label 'module)) (j42d2@iface (make-simple-struct 'module-interface '4 (list (car (j2e91@stx-mark* j4291@name)) (vector-map (lambda (j42d5@x) (make-simple-struct 'stx '5 (list (j2e8d@stx-expr j42d5@x) (j2e91@stx-mark* j42d5@x) '() '()))) j4290@exp-id*) j42cb@exp-lab*)))) (values j42bf@lex* j42be@rhs* (vector j4291@name) (vector j42d1@lab) (cons (cons j42d1@lab (cons '$module j42d2@iface)) j42c1@r) (cons (cons j42d1@lab (cons '$module j42d2@iface)) j42c0@mr) j42cc@mod** j42bc@kwd*)))))))))))))) (set! j4bc3@j311c@chi-internal-module j311c@chi-internal-module) (set! j311e@chi-body* (lambda (j42d7@e* j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42dd@kwd* j42de@exp* j42df@rib j42e0@top?) (if (null? j42d7@e*) (values j42d7@e* j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42dd@kwd* j42de@exp*) (let ((j42eb@e (car j42d7@e*))) (call-with-values (lambda () (j2ee1@syntax-type j42eb@e j42d8@r)) (lambda (j42f3@j42ee j42f4@j42f0 j42f5@j42f2) (let ((j42f9@kwd j42f5@j42f2) (j42fa@value j42f4@j42f0) (j42fb@type j42f3@j42ee)) (let ((j42ff@kwd* (if (j2ebf@id? j42f9@kwd) (cons j42f9@kwd j42dd@kwd*) j42dd@kwd*))) (let ((j4301@t j42fb@type)) (if (memv j4301@t '(define)) (call-with-values (lambda () (j3048@parse-define j42eb@e)) (lambda (j4307@j4304 j4308@j4306) (let ((j430b@rhs j4308@j4306) (j430c@id j4307@j4304)) (begin (if (j2ecb@bound-id-member? j430c@id j42ff@kwd*) (j31a6@syntax-violation '#f '"cannot redefine keyword" j42eb@e) (void)) (call-with-values (lambda () (j2e4f@gen-define-label+loc j430c@id j42df@rib)) (lambda (j4313@j4310 j4314@j4312) (let ((j4317@lex j4314@j4312) (j4318@lab j4313@j4310)) (begin (j2e75@extend-rib! j42df@rib j430c@id j4318@lab) (j311e@chi-body* (cdr j42d7@e*) (j3056@add-lexical j4318@lab j4317@lex j42d8@r) j42d9@mr (cons j4317@lex j42da@lex*) (cons j430b@rhs j42db@rhs*) j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?))))))))) (if (memv j4301@t '(define-syntax)) (call-with-values (lambda () (j304a@parse-define-syntax j42eb@e)) (lambda (j431f@j431c j4320@j431e) (let ((j4323@rhs j4320@j431e) (j4324@id j431f@j431c)) (begin (if (j2ecb@bound-id-member? j4324@id j42ff@kwd*) (j31a6@syntax-violation '#f '"cannot redefine keyword" j42eb@e) (void)) (let ((j4327@lab (j2e51@gen-define-label j4324@id j42df@rib)) (j4328@expanded-rhs (j3120@expand-transformer j4323@rhs j42d9@mr))) (begin (j2e75@extend-rib! j42df@rib j4324@id j4327@lab) (let ((j432b@b (j2ef7@make-eval-transformer j4328@expanded-rhs))) (j311e@chi-body* (cdr j42d7@e*) (cons (cons j4327@lab j432b@b) j42d8@r) (cons (cons j4327@lab j432b@b) j42d9@mr) j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?)))))))) (if (memv j4301@t '(let-syntax letrec-syntax)) (let ((j432d@t j42eb@e)) (let ((j432f@ls/false (j30c6@syntax-dispatch j432d@t '(_ #(each (any any)) . each-any)))) (if (and j432f@ls/false (apply (lambda (j4331@xlhs* j4332@xrhs* j4333@xbody*) (if (not (j2ec7@valid-bound-ids? j4331@xlhs*)) (j31a6@syntax-violation '#f '"invalid identifiers" j42eb@e) (void))) j432f@ls/false)) (apply (lambda (j4337@xlhs* j4338@xrhs* j4339@xbody*) (let ((j433d@xlab* (map j2e4b@gen-label j4337@xlhs*))) (let ((j433f@xrib (j2e7f@make-full-rib j4337@xlhs* j433d@xlab*))) (let ((j4341@xb* (map (lambda (j4343@x) (j2ef7@make-eval-transformer (j3120@expand-transformer (if (eq? j42fb@type 'let-syntax) j4343@x (j2eab@add-subst j433f@xrib j4343@x)) j42d9@mr))) j4338@xrhs*))) (j311e@chi-body* (append (map (lambda (j4345@x) (j2eab@add-subst j433f@xrib j4345@x)) j4339@xbody*) (cdr j42d7@e*)) (append (map cons j433d@xlab* j4341@xb*) j42d8@r) (append (map cons j433d@xlab* j4341@xb*) j42d9@mr) j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?))))) j432f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j432d@t)))) (if (memv j4301@t '(begin)) (let ((j4347@t j42eb@e)) (let ((j4349@ls/false (j30c6@syntax-dispatch j4347@t '(_ . each-any)))) (if j4349@ls/false (apply (lambda (j434b@x*) (j311e@chi-body* (append j434b@x* (cdr j42d7@e*)) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?)) j4349@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4347@t)))) (if (memv j4301@t '(global-macro global-macro!)) (j311e@chi-body* (cons (j2eab@add-subst j42df@rib (j30e2@chi-global-macro j42fa@value j42eb@e)) (cdr j42d7@e*)) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?) (if (memv j4301@t '(local-macro local-macro!)) (j311e@chi-body* (cons (j2eab@add-subst j42df@rib (j30e0@chi-local-macro j42fa@value j42eb@e)) (cdr j42d7@e*)) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?) (if (memv j4301@t '(macro macro!)) (j311e@chi-body* (cons (j2eab@add-subst j42df@rib (j30de@chi-macro j42fa@value j42eb@e)) (cdr j42d7@e*)) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?) (if (memv j4301@t '(module)) (call-with-values (lambda () (j311c@chi-internal-module j42eb@e j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd*)) (lambda (j435d@j434e j435e@j4350 j435f@j4352 j4360@j4354 j4361@j4356 j4362@j4358 j4363@j435a j4364@j435c) (let ((j436d@kwd* j4364@j435c) (j436e@mod** j4363@j435a) (j436f@mr j4362@j4358) (j4370@r j4361@j4356) (j4371@m-exp-lab* j4360@j4354) (j4372@m-exp-id* j435f@j4352) (j4373@rhs* j435e@j4350) (j4374@lex* j435d@j434e)) (begin (vector-for-each (lambda (j437d@id j437e@lab) (j2e75@extend-rib! j42df@rib j437d@id j437e@lab)) j4372@m-exp-id* j4371@m-exp-lab*) (j311e@chi-body* (cdr j42d7@e*) j4370@r j436f@mr j4374@lex* j4373@rhs* j436e@mod** j436d@kwd* j42de@exp* j42df@rib j42e0@top?))))) (if (memv j4301@t '(library)) (begin (j3188@library-expander (j2ed3@stx->datum j42eb@e)) (j311e@chi-body* (cdr j42d7@e*) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?)) (if (memv j4301@t '(export)) (let ((j4381@t j42eb@e)) (let ((j4383@ls/false (j30c6@syntax-dispatch j4381@t '(_ . each-any)))) (if j4383@ls/false (apply (lambda (j4385@exp-decl*) (j311e@chi-body* (cdr j42d7@e*) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* (append j4385@exp-decl* j42de@exp*) j42df@rib j42e0@top?)) j4383@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4381@t)))) (if (memv j4301@t '(import)) (let ((j4388@module-import? '#f) (j438a@module-import '#f) (j438c@library-import '#f)) (begin (set! j4388@module-import? (lambda (j43db@e) (let ((j43dd@t j43db@e)) (let ((j43df@ls/false (j30c6@syntax-dispatch j43dd@t '(_ any)))) (if (and j43df@ls/false (apply (lambda (j43e1@id) (j2ebf@id? j43e1@id)) j43df@ls/false)) (apply (lambda (j43e3@id) '#t) j43df@ls/false) (let ((j43e5@t j43dd@t)) (let ((j43e7@ls/false (j30c6@syntax-dispatch j43e5@t '(_ . each-any)))) (if j43e7@ls/false (apply (lambda (j43e9@imp*) '#f) j43e7@ls/false) (let ((j43eb@t j43e5@t)) (let ((j43ed@ls/false (j30c6@syntax-dispatch j43eb@t '_))) (if j43ed@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"malformed import form" j43db@e)) j43ed@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j43eb@t)))))))))))) (set! j438a@module-import (lambda (j43b9@e j43ba@r) (let ((j43bd@t j43b9@e)) (let ((j43bf@ls/false (j30c6@syntax-dispatch j43bd@t '(_ any)))) (if (and j43bf@ls/false (apply (lambda (j43c1@id) (j2ebf@id? j43c1@id)) j43bf@ls/false)) (apply (lambda (j43c3@id) (call-with-values (lambda () (j2ee1@syntax-type j43c3@id j43ba@r)) (lambda (j43cb@j43c6 j43cc@j43c8 j43cd@j43ca) (let ((j43d1@kwd j43cd@j43ca) (j43d2@value j43cc@j43c8) (j43d3@type j43cb@j43c6)) (let ((j43d7@t j43d3@type)) (if (memv j43d7@t '($module)) (let ((j43d9@iface j43d2@value)) (values (j311a@module-interface-exp-id* j43d9@iface j43c3@id) (j3114@module-interface-exp-lab-vec j43d9@iface))) (j31a6@syntax-violation '#f '"invalid import" j43b9@e))))))) j43bf@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j43bd@t)))))) (set! j438c@library-import (lambda (j439d@e) (let ((j439f@t j439d@e)) (let ((j43a1@ls/false (j30c6@syntax-dispatch j439f@t '(any . each-any)))) (if j43a1@ls/false (apply (lambda (j43a3@ctxt j43a4@imp*) (call-with-values (lambda () (j3128@parse-import-spec* (j31ac@syntax->datum j43a4@imp*))) (lambda (j43ab@j43a8 j43ac@j43aa) (let ((j43af@subst-labels j43ac@j43aa) (j43b0@subst-names j43ab@j43a8)) (values (vector-map (lambda (j43b3@name) (j2e9f@datum->stx j43a3@ctxt j43b3@name)) j43b0@subst-names) j43af@subst-labels))))) j43a1@ls/false) (let ((j43b5@t j439f@t)) (let ((j43b7@ls/false (j30c6@syntax-dispatch j43b5@t '_))) (if j43b7@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid import form" j439d@e)) j43b7@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j43b5@t))))))))) (begin (call-with-values (lambda () (if (j4388@module-import? j42eb@e) (j438a@module-import j42eb@e j42d8@r) (j438c@library-import j42eb@e))) (lambda (j4391@j438e j4392@j4390) (let ((j4395@lab* j4392@j4390) (j4396@id* j4391@j438e)) (vector-for-each (lambda (j4399@id j439a@lab) (j2e75@extend-rib! j42df@rib j4399@id j439a@lab)) j4396@id* j4395@lab*)))) (j311e@chi-body* (cdr j42d7@e*) j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?)))) (if j42e0@top? (j311e@chi-body* (cdr j42d7@e*) j42d8@r j42d9@mr (cons (j2e47@gen-lexical 'dummy) j42da@lex*) (cons (cons 'top-expr j42eb@e) j42db@rhs*) j42dc@mod** j42ff@kwd* j42de@exp* j42df@rib j42e0@top?) (values j42d7@e* j42d8@r j42d9@mr j42da@lex* j42db@rhs* j42dc@mod** j42ff@kwd* j42de@exp*)))))))))))))))))))))) (set! j4bc4@j311e@chi-body* j311e@chi-body*) (set! j3120@expand-transformer (lambda (j43ef@expr j43f0@r) (let ((j43f3@rtc (j312c@make-collector))) (let ((j43f5@expanded-rhs (let ((j43ff@j43f8 j312e@inv-collector) (j4400@j43fa j3130@vis-collector) (j4401@j43fc j43f3@rtc) (j4402@j43fe (lambda (j4407@x) (values)))) (let ((j4409@swap (lambda () (begin (let ((j440b@t (j43ff@j43f8))) (begin (j43ff@j43f8 j4401@j43fc) (set! j4401@j43fc j440b@t))) (let ((j440d@t (j4400@j43fa))) (begin (j4400@j43fa j4402@j43fe) (set! j4402@j43fe j440d@t))))))) (dynamic-wind j4409@swap (lambda () (j30e8@chi-expr j43ef@expr j43f0@r j43f0@r)) j4409@swap))))) (begin (for-each (let ((j440f@mark-visit (j3130@vis-collector))) (lambda (j4411@x) (begin (j2cd5@j2b23@invoke-library j4411@x) (j440f@mark-visit j4411@x)))) (j43f3@rtc)) j43f5@expanded-rhs))))) (set! j4bc5@j3120@expand-transformer j3120@expand-transformer) (set! j3122@parse-exports (lambda (j4413@exp*) (let j441b@f ((j4415@exp* j4413@exp*) (j4416@int* '()) (j4417@ext* '())) (if (null? j4415@exp*) (begin (if (not (j2ec7@valid-bound-ids? j4417@ext*)) (j31a6@syntax-violation 'export '"invalid exports" (j30fc@find-dups j4417@ext*)) (void)) (values (map j31ac@syntax->datum j4417@ext*) j4416@int*)) (let ((j441d@t (car j4415@exp*))) (let ((j441f@ls/false (j30c6@syntax-dispatch j441d@t '(any . #(each (any any)))))) (if j441f@ls/false (apply (lambda (j4421@rename j4422@i* j4423@e*) (begin (if (not (and (eq? (j31ac@syntax->datum j4421@rename) 'rename) (for-all j2ebf@id? j4422@i*) (for-all j2ebf@id? j4423@e*))) (j31a6@syntax-violation 'export '"invalid export specifier" (car j4415@exp*)) (void)) (j441b@f (cdr j4415@exp*) (append j4422@i* j4416@int*) (append j4423@e* j4417@ext*)))) j441f@ls/false) (let ((j4427@t j441d@t)) (let ((j4429@ls/false (j30c6@syntax-dispatch j4427@t 'any))) (if j4429@ls/false (apply (lambda (j442b@ie) (begin (if (not (j2ebf@id? j442b@ie)) (j31a6@syntax-violation 'export '"invalid export" j442b@ie) (void)) (j441b@f (cdr j4415@exp*) (cons j442b@ie j4416@int*) (cons j442b@ie j4417@ext*)))) j4429@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4427@t))))))))))) (set! j4bc6@j3122@parse-exports j3122@parse-exports) (set! j3124@parse-library-name (lambda (j442d@spec) (let ((j4430@parse '#f)) (begin (set! j4430@parse (lambda (j443d@x) (let ((j443f@t j443d@x)) (let ((j4441@ls/false (j30c6@syntax-dispatch j443f@t '(each-any)))) (if (and j4441@ls/false (apply (lambda (j4443@v*) (for-all (lambda (j4445@x) (let ((j4447@x (j31ac@syntax->datum j4445@x))) (and (integer? j4447@x) (exact? j4447@x)))) j4443@v*)) j4441@ls/false)) (apply (lambda (j4449@v*) (values '() (map j31ac@syntax->datum j4449@v*))) j4441@ls/false) (let ((j444b@t j443f@t)) (let ((j444d@ls/false (j30c6@syntax-dispatch j444b@t '(any . any)))) (if (and j444d@ls/false (apply (lambda (j444f@x j4450@rest) (symbol? (j31ac@syntax->datum j444f@x))) j444d@ls/false)) (apply (lambda (j4453@x j4454@rest) (call-with-values (lambda () (j4430@parse j4454@rest)) (lambda (j445b@j4458 j445c@j445a) (let ((j445f@v* j445c@j445a) (j4460@x* j445b@j4458)) (values (cons (j31ac@syntax->datum j4453@x) j4460@x*) j445f@v*))))) j444d@ls/false) (let ((j4463@t j444b@t)) (let ((j4465@ls/false (j30c6@syntax-dispatch j4463@t '()))) (if j4465@ls/false (apply (lambda () (values '() '())) j4465@ls/false) (let ((j4467@t j4463@t)) (let ((j4469@ls/false (j30c6@syntax-dispatch j4467@t '_))) (if j4469@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid library name" j442d@spec)) j4469@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4467@t))))))))))))))) (call-with-values (lambda () (j4430@parse j442d@spec)) (lambda (j4435@j4432 j4436@j4434) (let ((j4439@ver* j4436@j4434) (j443a@name* j4435@j4432)) (begin (if (null? j443a@name*) (j31a6@syntax-violation '#f '"empty library name" j442d@spec) (void)) (values j443a@name* j4439@ver*))))))))) (set! j4bc7@j3124@parse-library-name j3124@parse-library-name) (set! j3126@parse-library (lambda (j446b@e) (let ((j446d@t j446b@e)) (let ((j446f@ls/false (j30c6@syntax-dispatch j446d@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and j446f@ls/false (apply (lambda (j4471@library j4472@name* j4473@export j4474@exp* j4475@import j4476@imp* j4477@b*) (and (eq? (j31ac@syntax->datum j4473@export) 'export) (eq? (j31ac@syntax->datum j4475@import) 'import) (eq? (j31ac@syntax->datum j4471@library) 'library))) j446f@ls/false)) (apply (lambda (j447f@library j4480@name* j4481@export j4482@exp* j4483@import j4484@imp* j4485@b*) (values j4480@name* j4482@exp* j4484@imp* j4485@b*)) j446f@ls/false) (let ((j448d@t j446d@t)) (let ((j448f@ls/false (j30c6@syntax-dispatch j448d@t '_))) (if j448f@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"malformed library" j446b@e)) j448f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j448d@t))))))))) (set! j4bc8@j3126@parse-library j3126@parse-library) (set! j3128@parse-import-spec* (let ((j4492@idsyn? '#f) (j4494@dup-error '#f) (j4496@merge-substs '#f) (j4498@exclude* '#f) (j449a@find* '#f) (j449c@rem* '#f) (j449e@remove-dups '#f) (j44a0@parse-library-name '#f) (j44a2@import-library '#f) (j44a4@get-import '#f) (j44a6@add-imports! '#f)) (begin (set! j4492@idsyn? (lambda (j469b@x) (symbol? (j31ac@syntax->datum j469b@x)))) (set! j4494@dup-error (lambda (j4699@name) (j31a6@syntax-violation 'import '"two imports with different bindings" j4699@name))) (set! j4496@merge-substs (lambda (j4687@s j4688@subst) (let ((j468c@insert-to-subst '#f)) (begin (set! j468c@insert-to-subst (lambda (j468d@a j468e@subst) (let ((j4691@name (car j468d@a)) (j4692@label (cdr j468d@a))) (let ((j4695@t (assq j4691@name j468e@subst))) (if j4695@t ((lambda (j4697@x) (if (eq? (cdr j4697@x) j4692@label) j468e@subst (j4494@dup-error j4691@name))) j4695@t) (cons j468d@a j468e@subst)))))) (if (null? j4687@s) j4688@subst (j468c@insert-to-subst (car j4687@s) (j4496@merge-substs (cdr j4687@s) j4688@subst))))))) (set! j4498@exclude* (lambda (j4657@sym* j4658@subst) (let ((j465c@exclude '#f)) (begin (set! j465c@exclude (lambda (j4675@sym j4676@subst) (if (null? j4676@subst) (j31a6@syntax-violation 'import '"cannot rename unbound identifier" j4675@sym) (if (eq? j4675@sym (caar j4676@subst)) (values (cdar j4676@subst) (cdr j4676@subst)) (let ((j4679@a (car j4676@subst))) (call-with-values (lambda () (j465c@exclude j4675@sym (cdr j4676@subst))) (lambda (j467f@j467c j4680@j467e) (let ((j4683@subst j4680@j467e) (j4684@old j467f@j467c)) (values j4684@old (cons j4679@a j4683@subst)))))))))) (if (null? j4657@sym*) (values '() j4658@subst) (call-with-values (lambda () (j465c@exclude (car j4657@sym*) j4658@subst)) (lambda (j4661@j465e j4662@j4660) (let ((j4665@subst j4662@j4660) (j4666@old j4661@j465e)) (call-with-values (lambda () (j4498@exclude* (cdr j4657@sym*) j4665@subst)) (lambda (j466d@j466a j466e@j466c) (let ((j4671@subst j466e@j466c) (j4672@old* j466d@j466a)) (values (cons j4666@old j4672@old*) j4671@subst)))))))))))) (set! j449a@find* (lambda (j464f@sym* j4650@subst) (map (lambda (j4653@x) (let ((j4655@t (assq j4653@x j4650@subst))) (if j4655@t (cdr j4655@t) (j31a6@syntax-violation 'import '"cannot find identifier" j4653@x)))) j464f@sym*))) (set! j449c@rem* (lambda (j4647@sym* j4648@subst) (let j464d@f ((j464b@subst j4648@subst)) (if (null? j464b@subst) '() (if (memq (caar j464b@subst) j4647@sym*) (j464d@f (cdr j464b@subst)) (cons (car j464b@subst) (j464d@f (cdr j464b@subst)))))))) (set! j449e@remove-dups (lambda (j4645@ls) (if (null? j4645@ls) '() (if (memq (car j4645@ls) (cdr j4645@ls)) (j449e@remove-dups (cdr j4645@ls)) (cons (car j4645@ls) (j449e@remove-dups (cdr j4645@ls))))))) (set! j44a0@parse-library-name (lambda (j455d@spec) (let ((j4560@subversion? '#f) (j4562@subversion-pred '#f) (j4564@version-pred '#f)) (begin (set! j4560@subversion? (lambda (j4641@x) (let ((j4643@x (j31ac@syntax->datum j4641@x))) (and (integer? j4643@x) (exact? j4643@x) (>= j4643@x '0))))) (set! j4562@subversion-pred (lambda (j45e1@x*) (let ((j45e3@t j45e1@x*)) (let ((j45e5@ls/false (j30c6@syntax-dispatch j45e3@t 'any))) (if (and j45e5@ls/false (apply (lambda (j45e7@n) (j4560@subversion? j45e7@n)) j45e5@ls/false)) (apply (lambda (j45e9@n) (lambda (j45eb@x) (= j45eb@x (j31ac@syntax->datum j45e9@n)))) j45e5@ls/false) (let ((j45ed@t j45e3@t)) (let ((j45ef@ls/false (j30c6@syntax-dispatch j45ed@t '(any . each-any)))) (if (and j45ef@ls/false (apply (lambda (j45f1@p? j45f2@sub*) (eq? (j31ac@syntax->datum j45f1@p?) 'and)) j45ef@ls/false)) (apply (lambda (j45f5@p? j45f6@sub*) (let ((j45f9@p* (map j4562@subversion-pred j45f6@sub*))) (lambda (j45fb@x) (for-all (lambda (j45fd@p) (j45fd@p j45fb@x)) j45f9@p*)))) j45ef@ls/false) (let ((j45ff@t j45ed@t)) (let ((j4601@ls/false (j30c6@syntax-dispatch j45ff@t '(any . each-any)))) (if (and j4601@ls/false (apply (lambda (j4603@p? j4604@sub*) (eq? (j31ac@syntax->datum j4603@p?) 'or)) j4601@ls/false)) (apply (lambda (j4607@p? j4608@sub*) (let ((j460b@p* (map j4562@subversion-pred j4608@sub*))) (lambda (j460d@x) (exists (lambda (j460f@p) (j460f@p j460d@x)) j460b@p*)))) j4601@ls/false) (let ((j4611@t j45ff@t)) (let ((j4613@ls/false (j30c6@syntax-dispatch j4611@t '(any any)))) (if (and j4613@ls/false (apply (lambda (j4615@p? j4616@sub) (eq? (j31ac@syntax->datum j4615@p?) 'not)) j4613@ls/false)) (apply (lambda (j4619@p? j461a@sub) (let ((j461d@p (j4562@subversion-pred j461a@sub))) (lambda (j461f@x) (not (j461d@p j461f@x))))) j4613@ls/false) (let ((j4621@t j4611@t)) (let ((j4623@ls/false (j30c6@syntax-dispatch j4621@t '(any any)))) (if (and j4623@ls/false (apply (lambda (j4625@p? j4626@n) (and (eq? (j31ac@syntax->datum j4625@p?) '<=) (j4560@subversion? j4626@n))) j4623@ls/false)) (apply (lambda (j4629@p? j462a@n) (lambda (j462d@x) (<= j462d@x (j31ac@syntax->datum j462a@n)))) j4623@ls/false) (let ((j462f@t j4621@t)) (let ((j4631@ls/false (j30c6@syntax-dispatch j462f@t '(any any)))) (if (and j4631@ls/false (apply (lambda (j4633@p? j4634@n) (and (eq? (j31ac@syntax->datum j4633@p?) '>=) (j4560@subversion? j4634@n))) j4631@ls/false)) (apply (lambda (j4637@p? j4638@n) (lambda (j463b@x) (>= j463b@x (j31ac@syntax->datum j4638@n)))) j4631@ls/false) (let ((j463d@t j462f@t)) (let ((j463f@ls/false (j30c6@syntax-dispatch j463d@t '_))) (if j463f@ls/false (apply (lambda () (j31a6@syntax-violation 'import '"invalid sub-version spec" j455d@spec j45e1@x*)) j463f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j463d@t)))))))))))))))))))))))) (set! j4564@version-pred (lambda (j4591@x*) (let ((j4593@t j4591@x*)) (let ((j4595@ls/false (j30c6@syntax-dispatch j4593@t '()))) (if j4595@ls/false (apply (lambda () (lambda (j4597@x) '#t)) j4595@ls/false) (let ((j4599@t j4593@t)) (let ((j459b@ls/false (j30c6@syntax-dispatch j4599@t '(any . each-any)))) (if (and j459b@ls/false (apply (lambda (j459d@c j459e@ver*) (eq? (j31ac@syntax->datum j459d@c) 'and)) j459b@ls/false)) (apply (lambda (j45a1@c j45a2@ver*) (let ((j45a5@p* (map j4564@version-pred j45a2@ver*))) (lambda (j45a7@x) (for-all (lambda (j45a9@p) (j45a9@p j45a7@x)) j45a5@p*)))) j459b@ls/false) (let ((j45ab@t j4599@t)) (let ((j45ad@ls/false (j30c6@syntax-dispatch j45ab@t '(any . each-any)))) (if (and j45ad@ls/false (apply (lambda (j45af@c j45b0@ver*) (eq? (j31ac@syntax->datum j45af@c) 'or)) j45ad@ls/false)) (apply (lambda (j45b3@c j45b4@ver*) (let ((j45b7@p* (map j4564@version-pred j45b4@ver*))) (lambda (j45b9@x) (exists (lambda (j45bb@p) (j45bb@p j45b9@x)) j45b7@p*)))) j45ad@ls/false) (let ((j45bd@t j45ab@t)) (let ((j45bf@ls/false (j30c6@syntax-dispatch j45bd@t '(any any)))) (if (and j45bf@ls/false (apply (lambda (j45c1@c j45c2@ver) (eq? (j31ac@syntax->datum j45c1@c) 'not)) j45bf@ls/false)) (apply (lambda (j45c5@c j45c6@ver) (let ((j45c9@p (j4564@version-pred j45c6@ver))) (lambda (j45cb@x) (not (j45c9@p j45cb@x))))) j45bf@ls/false) (let ((j45cd@t j45bd@t)) (let ((j45cf@ls/false (j30c6@syntax-dispatch j45cd@t 'each-any))) (if j45cf@ls/false (apply (lambda (j45d1@sub*) (let ((j45d3@p* (map j4562@subversion-pred j45d1@sub*))) (lambda (j45d5@x) (let j45db@f ((j45d7@p* j45d3@p*) (j45d8@x j45d5@x)) (if (null? j45d7@p*) '#t (if (null? j45d8@x) '#f (and ((car j45d7@p*) (car j45d8@x)) (j45db@f (cdr j45d7@p*) (cdr j45d8@x))))))))) j45cf@ls/false) (let ((j45dd@t j45cd@t)) (let ((j45df@ls/false (j30c6@syntax-dispatch j45dd@t '_))) (if j45df@ls/false (apply (lambda () (j31a6@syntax-violation 'import '"invalid version spec" j455d@spec j4591@x*)) j45df@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j45dd@t))))))))))))))))))))) (let j4567@f ((j4565@x j455d@spec)) (let ((j4569@t j4565@x)) (let ((j456b@ls/false (j30c6@syntax-dispatch j4569@t '(each-any)))) (if j456b@ls/false (apply (lambda (j456d@version-spec*) (values '() (j4564@version-pred j456d@version-spec*))) j456b@ls/false) (let ((j456f@t j4569@t)) (let ((j4571@ls/false (j30c6@syntax-dispatch j456f@t '(any . any)))) (if (and j4571@ls/false (apply (lambda (j4573@x j4574@x*) (j4492@idsyn? j4573@x)) j4571@ls/false)) (apply (lambda (j4577@x j4578@x*) (call-with-values (lambda () (j4567@f j4578@x*)) (lambda (j457f@j457c j4580@j457e) (let ((j4583@pred j4580@j457e) (j4584@name j457f@j457c)) (values (cons (j31ac@syntax->datum j4577@x) j4584@name) j4583@pred))))) j4571@ls/false) (let ((j4587@t j456f@t)) (let ((j4589@ls/false (j30c6@syntax-dispatch j4587@t '()))) (if j4589@ls/false (apply (lambda () (values '() (lambda (j458b@x) '#t))) j4589@ls/false) (let ((j458d@t j4587@t)) (let ((j458f@ls/false (j30c6@syntax-dispatch j458d@t '_))) (if j458f@ls/false (apply (lambda () (j31a6@syntax-violation '#f '"invalid import spec" j455d@spec)) j458f@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j458d@t)))))))))))))))))) (set! j44a2@import-library (lambda (j454d@spec*) (call-with-values (lambda () (j44a0@parse-library-name j454d@spec*)) (lambda (j4553@j4550 j4554@j4552) (let ((j4557@pred j4554@j4552) (j4558@name j4553@j4550)) (begin (if (null? j4558@name) (j31a6@syntax-violation 'import '"empty library name" j454d@spec*) (void)) (let ((j455b@lib (j2cce@j2b15@find-library-by-name j4558@name))) (begin (if (not j455b@lib) (j31a6@syntax-violation 'import '"cannot find library with required name" j4558@name) (void)) (if (not (j4557@pred (j2ca8@j2ac9@library-version j455b@lib))) (j31a6@syntax-violation 'import '"library does not satisfy version specification" j454d@spec* j455b@lib) (void)) ((j3132@imp-collector) j455b@lib) (j2cb0@j2ad9@library-subst j455b@lib))))))))) (set! j44a4@get-import (lambda (j44bf@spec) (let ((j44c1@t j44bf@spec)) (let ((j44c3@ls/false (j30c6@syntax-dispatch j44c1@t '(any . each-any)))) (if (and j44c3@ls/false (apply (lambda (j44c5@x j44c6@x*) (not (memq (j31ac@syntax->datum j44c5@x) '(for rename except only prefix library)))) j44c3@ls/false)) (apply (lambda (j44c9@x j44ca@x*) (j44a2@import-library (cons j44c9@x j44ca@x*))) j44c3@ls/false) (let ((j44cd@t j44c1@t)) (let ((j44cf@ls/false (j30c6@syntax-dispatch j44cd@t '(any any . #(each (any any)))))) (if (and j44cf@ls/false (apply (lambda (j44d1@rename j44d2@isp j44d3@old* j44d4@new*) (and (eq? (j31ac@syntax->datum j44d1@rename) 'rename) (for-all j4492@idsyn? j44d3@old*) (for-all j4492@idsyn? j44d4@new*))) j44cf@ls/false)) (apply (lambda (j44d9@rename j44da@isp j44db@old* j44dc@new*) (let ((j44e1@subst (j44a4@get-import j44da@isp)) (j44e2@old* (map j31ac@syntax->datum j44db@old*)) (j44e3@new* (map j31ac@syntax->datum j44dc@new*))) (let ((j44e7@old-label* (j449a@find* j44e2@old* j44e1@subst))) (let ((j44e9@subst (j449c@rem* j44e2@old* j44e1@subst))) (j4496@merge-substs (map cons j44e3@new* j44e7@old-label*) j44e9@subst))))) j44cf@ls/false) (let ((j44eb@t j44cd@t)) (let ((j44ed@ls/false (j30c6@syntax-dispatch j44eb@t '(any any . each-any)))) (if (and j44ed@ls/false (apply (lambda (j44ef@except j44f0@isp j44f1@sym*) (and (eq? (j31ac@syntax->datum j44ef@except) 'except) (for-all j4492@idsyn? j44f1@sym*))) j44ed@ls/false)) (apply (lambda (j44f5@except j44f6@isp j44f7@sym*) (let ((j44fb@subst (j44a4@get-import j44f6@isp))) (j449c@rem* (map j31ac@syntax->datum j44f7@sym*) j44fb@subst))) j44ed@ls/false) (let ((j44fd@t j44eb@t)) (let ((j44ff@ls/false (j30c6@syntax-dispatch j44fd@t '(any any . each-any)))) (if (and j44ff@ls/false (apply (lambda (j4501@only j4502@isp j4503@sym*) (and (eq? (j31ac@syntax->datum j4501@only) 'only) (for-all j4492@idsyn? j4503@sym*))) j44ff@ls/false)) (apply (lambda (j4507@only j4508@isp j4509@sym*) (let ((j450d@subst (j44a4@get-import j4508@isp)) (j450e@sym* (map j31ac@syntax->datum j4509@sym*))) (let ((j4511@sym* (j449e@remove-dups j450e@sym*))) (let ((j4513@lab* (j449a@find* j4511@sym* j450d@subst))) (map cons j4511@sym* j4513@lab*))))) j44ff@ls/false) (let ((j4515@t j44fd@t)) (let ((j4517@ls/false (j30c6@syntax-dispatch j4515@t '(any any any)))) (if (and j4517@ls/false (apply (lambda (j4519@prefix j451a@isp j451b@p) (and (eq? (j31ac@syntax->datum j4519@prefix) 'prefix) (j4492@idsyn? j451b@p))) j4517@ls/false)) (apply (lambda (j451f@prefix j4520@isp j4521@p) (let ((j4525@subst (j44a4@get-import j4520@isp)) (j4526@prefix (symbol->string (j31ac@syntax->datum j4521@p)))) (map (lambda (j4529@x) (cons (string->symbol (string-append j4526@prefix (symbol->string (car j4529@x)))) (cdr j4529@x))) j4525@subst))) j4517@ls/false) (let ((j452b@t j4515@t)) (let ((j452d@ls/false (j30c6@syntax-dispatch j452b@t '(any each-any)))) (if (and j452d@ls/false (apply (lambda (j452f@library j4530@spec*) (eq? (j31ac@syntax->datum j452f@library) 'library)) j452d@ls/false)) (apply (lambda (j4533@library j4534@spec*) (j44a2@import-library j4534@spec*)) j452d@ls/false) (let ((j4537@t j452b@t)) (let ((j4539@ls/false (j30c6@syntax-dispatch j4537@t '(any any . any)))) (if (and j4539@ls/false (apply (lambda (j453b@for j453c@isp j453d@rest) (eq? (j31ac@syntax->datum j453b@for) 'for)) j4539@ls/false)) (apply (lambda (j4541@for j4542@isp j4543@rest) (j44a4@get-import j4542@isp)) j4539@ls/false) (let ((j4547@t j4537@t)) (let ((j4549@ls/false (j30c6@syntax-dispatch j4547@t 'any))) (if j4549@ls/false (apply (lambda (j454b@spec) (j31a6@syntax-violation 'import '"invalid import spec" j454b@spec)) j4549@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4547@t))))))))))))))))))))))))))) (set! j44a6@add-imports! (lambda (j44af@imp j44b0@h) (let ((j44b3@subst (j44a4@get-import j44af@imp))) (for-each (lambda (j44b5@x) (let ((j44b7@name (car j44b5@x)) (j44b8@label (cdr j44b5@x))) (let ((j44bb@t (hashtable-ref j44b0@h j44b7@name '#f))) (if j44bb@t ((lambda (j44bd@l) (if (not (eq? j44bd@l j44b8@label)) (j4494@dup-error j44b7@name) (void))) j44bb@t) (hashtable-set! j44b0@h j44b7@name j44b8@label))))) j44b3@subst)))) (lambda (j44a7@imp*) (let j44ad@f ((j44a9@imp* j44a7@imp*) (j44aa@h (make-eq-hashtable))) (if (null? j44a9@imp*) (hashtable-entries j44aa@h) (begin (j44a6@add-imports! (car j44a9@imp*) j44aa@h) (j44ad@f (cdr j44a9@imp*) j44aa@h)))))))) (set! j4bc9@j3128@parse-import-spec* j3128@parse-import-spec*) (set! j312a@make-top-rib (lambda (j469d@names j469e@labels) (let ((j46a1@rib (j2e73@make-empty-rib))) (begin (vector-for-each (lambda (j46a3@name j46a4@label) (begin (if (not (symbol? j46a3@name)) (error 'make-top-rib '"BUG: not a symbol" j46a3@name) (void)) (j2e77@extend-rib/nc! j46a1@rib (make-simple-struct 'stx '5 (list j46a3@name j2e43@top-mark* '() '())) j46a4@label))) j469d@names j469e@labels) j46a1@rib)))) (set! j4bca@j312a@make-top-rib j312a@make-top-rib) (set! j312c@make-collector (lambda () (let ((j46a7@ls '())) (lambda j46ab (let ((j46ac (length j46ab))) (if (= j46ac '0) (apply (lambda () j46a7@ls) j46ab) (if (= j46ac '1) (apply (lambda (j46a9@x) (set! j46a7@ls (j2e3c@set-cons j46a9@x j46a7@ls))) j46ab) (error 'apply '"invalid arg count")))))))) (set! j4bcb@j312c@make-collector j312c@make-collector) (set! j312e@inv-collector (j2a09@j28e7@make-parameter (lambda j46ad@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (j46af@x) (begin (if (not (procedure? j46af@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" j46af@x) (void)) j46af@x)))) (set! j4bcc@j312e@inv-collector j312e@inv-collector) (set! j3130@vis-collector (j2a09@j28e7@make-parameter (lambda j46b1@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (j46b3@x) (begin (if (not (procedure? j46b3@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" j46b3@x) (void)) j46b3@x)))) (set! j4bcd@j3130@vis-collector j3130@vis-collector) (set! j3132@imp-collector (j2a09@j28e7@make-parameter (lambda j46b5@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (j46b7@x) (begin (if (not (procedure? j46b7@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" j46b7@x) (void)) j46b7@x)))) (set! j4bce@j3132@imp-collector j3132@imp-collector) (set! j3134@chi-library-internal (lambda (j46b9@e* j46ba@rib j46bb@top?) (call-with-values (lambda () (j311e@chi-body* j46b9@e* '() '() '() '() '() '() '() j46ba@rib j46bb@top?)) (lambda (j46cf@j46c0 j46d0@j46c2 j46d1@j46c4 j46d2@j46c6 j46d3@j46c8 j46d4@j46ca j46d5@j46cc j46d6@j46ce) (let ((j46df@exp* j46d6@j46ce) (j46e0@_kwd* j46d5@j46cc) (j46e1@mod** j46d4@j46ca) (j46e2@rhs* j46d3@j46c8) (j46e3@lex* j46d2@j46c6) (j46e4@mr j46d1@j46c4) (j46e5@r j46d0@j46c2) (j46e6@e* j46cf@j46c0)) (values (append (apply append (reverse j46e1@mod**)) j46e6@e*) j46e5@r j46e4@mr (reverse j46e3@lex*) (reverse j46e2@rhs*) j46df@exp*)))))) (set! j4bcf@j3134@chi-library-internal j3134@chi-library-internal) (set! j3136@chi-interaction-expr (lambda (j46ef@e j46f0@rib j46f1@r) (call-with-values (lambda () (j311e@chi-body* (list j46ef@e) j46f1@r j46f1@r '() '() '() '() '() j46f0@rib '#t)) (lambda (j4705@j46f6 j4706@j46f8 j4707@j46fa j4708@j46fc j4709@j46fe j470a@j4700 j470b@j4702 j470c@j4704) (let ((j4715@_exp* j470c@j4704) (j4716@_kwd* j470b@j4702) (j4717@mod** j470a@j4700) (j4718@rhs* j4709@j46fe) (j4719@lex* j4708@j46fc) (j471a@mr j4707@j46fa) (j471b@r j4706@j46f8) (j471c@e* j4705@j46f6)) (let ((j4725@e* (j30f6@expand-interaction-rhs*/init* (reverse j4719@lex*) (reverse j4718@rhs*) (append (apply append (reverse j4717@mod**)) j471c@e*) j471b@r j471a@mr))) (let ((j4727@e (if (null? j4725@e*) (j2e25@j2d80@build-void) (if (null? (cdr j4725@e*)) (car j4725@e*) (j2e24@j2d7e@build-sequence '#f j4725@e*))))) (values j4727@e j471b@r)))))))) (set! j4bd0@j3136@chi-interaction-expr j3136@chi-interaction-expr) (set! j3138@library-body-expander (lambda (j4729@name j472a@main-exp* j472b@imp* j472c@b* j472d@top?) (let ((j4734@itc '#f)) (begin (set! j4734@itc (j312c@make-collector)) (let ((j473d@j4736 j3132@imp-collector) (j473e@j4738 j31b6@top-level-context) (j473f@j473a j4734@itc) (j4740@j473c '#f)) (let ((j4745@swap (lambda () (begin (let ((j4747@t (j473d@j4736))) (begin (j473d@j4736 j473f@j473a) (set! j473f@j473a j4747@t))) (let ((j4749@t (j473e@j4738))) (begin (j473e@j4738 j4740@j473c) (set! j4740@j473c j4749@t))))))) (dynamic-wind j4745@swap (lambda () (call-with-values (lambda () (j3128@parse-import-spec* j472b@imp*)) (lambda (j474f@j474c j4750@j474e) (let ((j4753@subst-labels j4750@j474e) (j4754@subst-names j474f@j474c)) (let ((j4757@rib (j312a@make-top-rib j4754@subst-names j4753@subst-labels))) (let ((j475a@wrap '#f)) (begin (set! j475a@wrap (lambda (j47d5@x) (make-simple-struct 'stx '5 (list j47d5@x j2e43@top-mark* (list j4757@rib) '())))) (let ((j475b@b* (map j475a@wrap j472c@b*)) (j475c@main-exp* (map j475a@wrap j472a@main-exp*)) (j475d@rtc (j312c@make-collector)) (j475e@vtc (j312c@make-collector))) (let ((j476b@j4764 j312e@inv-collector) (j476c@j4766 j3130@vis-collector) (j476d@j4768 j475d@rtc) (j476e@j476a j475e@vtc)) (let ((j4773@swap (lambda () (begin (let ((j4775@t (j476b@j4764))) (begin (j476b@j4764 j476d@j4768) (set! j476d@j4768 j4775@t))) (let ((j4777@t (j476c@j4766))) (begin (j476c@j4766 j476e@j476a) (set! j476e@j476a j4777@t))))))) (dynamic-wind j4773@swap (lambda () (call-with-values (lambda () (j3134@chi-library-internal j475b@b* j4757@rib j472d@top?)) (lambda (j4785@j477a j4786@j477c j4787@j477e j4788@j4780 j4789@j4782 j478a@j4784) (let ((j4791@internal-exp* j478a@j4784) (j4792@rhs* j4789@j4782) (j4793@lex* j4788@j4780) (j4794@mr j4787@j477e) (j4795@r j4786@j477c) (j4796@init* j4785@j477a)) (call-with-values (lambda () (j3122@parse-exports (append j475c@main-exp* j4791@internal-exp*))) (lambda (j47a1@j479e j47a2@j47a0) (let ((j47a5@exp-id* j47a2@j47a0) (j47a6@exp-name* j47a1@j479e)) (begin (j2e7b@seal-rib! j4757@rib) (let ((j47a9@init* (j30e4@chi-expr* j4796@init* j4795@r j4794@mr))) (let ((j47ab@rhs* (j30f8@chi-rhs* j4792@rhs* j4795@r j4794@mr))) (begin (j2e7d@unseal-rib! j4757@rib) (let ((j47ad@loc* (map j2e49@gen-global j4793@lex*)) (j47ae@export-subst (j3190@make-export-subst j47a6@exp-name* j47a5@exp-id*))) (let ((j47b2@errstr '#f)) (begin (set! j47b2@errstr '"attempt to export mutated variable") (call-with-values (lambda () (j3192@make-export-env/macros j4793@lex* j47ad@loc* j4795@r)) (lambda (j47b9@j47b4 j47ba@j47b6 j47bb@j47b8) (let ((j47bf@macro* j47bb@j47b8) (j47c0@global* j47ba@j47b6) (j47c1@export-env j47b9@j47b4)) (begin (for-each (lambda (j47c5@s) (let ((j47c7@name (car j47c5@s)) (j47c8@label (cdr j47c5@s))) (let ((j47cb@p (assq j47c8@label j47c1@export-env))) (if j47cb@p (let ((j47cd@b (cdr j47cb@p))) (let ((j47cf@type (car j47cd@b))) (if (eq? j47cf@type 'mutable) (j31a6@syntax-violation 'export j47b2@errstr j47c7@name) (void)))) (void))))) j47ae@export-subst) (let ((j47d1@invoke-body (j2e2a@j2d8a@build-library-letrec* '#f j4729@name j4793@lex* j47ad@loc* j47ab@rhs* (if (null? j47a9@init*) (j2e25@j2d80@build-void) (j2e24@j2d7e@build-sequence '#f j47a9@init*)))) (j47d2@invoke-definitions (map j2e21@j2cdd@build-global-define (map cdr j47c0@global*)))) (values (j4734@itc) (j475d@rtc) (j475e@vtc) (j2e24@j2d7e@build-sequence '#f (append j47d2@invoke-definitions (list j47d1@invoke-body))) j47bf@macro* j47ae@export-subst j47c1@export-env)))))))))))))))))))) j4773@swap))))))))))) j4745@swap))))))) (set! j4bd1@j3138@library-body-expander j3138@library-body-expander) (set! j313a@core-library-expander (lambda (j47d7@e j47d8@verify-name) (call-with-values (lambda () (j3126@parse-library j47d7@e)) (lambda (j47e3@j47dc j47e4@j47de j47e5@j47e0 j47e6@j47e2) (let ((j47eb@b* j47e6@j47e2) (j47ec@imp* j47e5@j47e0) (j47ed@exp* j47e4@j47de) (j47ee@name* j47e3@j47dc)) (call-with-values (lambda () (j3124@parse-library-name j47ee@name*)) (lambda (j47f7@j47f4 j47f8@j47f6) (let ((j47fb@ver j47f8@j47f6) (j47fc@name j47f7@j47f4)) (begin (j47d8@verify-name j47fc@name) (call-with-values (lambda () (j3138@library-body-expander j47fc@name j47ed@exp* j47ec@imp* j47eb@b* '#f)) (lambda (j480d@j4800 j480e@j4802 j480f@j4804 j4810@j4806 j4811@j4808 j4812@j480a j4813@j480c) (let ((j481b@export-env j4813@j480c) (j481c@export-subst j4812@j480a) (j481d@visit-code j4811@j4808) (j481e@invoke-code j4810@j4806) (j481f@visit-req* j480f@j4804) (j4820@invoke-req* j480e@j4802) (j4821@imp* j480d@j4800)) (values j47fc@name j47fb@ver j4821@imp* j4820@invoke-req* j481f@visit-req* j481e@invoke-code j481d@visit-code j481c@export-subst j481b@export-env))))))))))))) (set! j4bd2@j313a@core-library-expander j313a@core-library-expander) (set! j313c@parse-top-level-program (lambda (j4829@e*) (let ((j482b@t j4829@e*)) (let ((j482d@ls/false (j30c6@syntax-dispatch j482b@t '((any . each-any) . each-any)))) (if (and j482d@ls/false (apply (lambda (j482f@import j4830@imp* j4831@b*) (eq? (j31ac@syntax->datum j482f@import) 'import)) j482d@ls/false)) (apply (lambda (j4835@import j4836@imp* j4837@b*) (values j4836@imp* j4837@b*)) j482d@ls/false) (let ((j483b@t j482b@t)) (let ((j483d@ls/false (j30c6@syntax-dispatch j483b@t '((any . any) . any)))) (if (and j483d@ls/false (apply (lambda (j483f@import j4840@x j4841@y) (eq? (j31ac@syntax->datum j483f@import) 'import)) j483d@ls/false)) (apply (lambda (j4845@import j4846@x j4847@y) (j31a6@syntax-violation 'expander '"invalid syntax of top-level program" (j2eb9@syntax-car j4829@e*))) j483d@ls/false) (let ((j484b@t j483b@t)) (let ((j484d@ls/false (j30c6@syntax-dispatch j484b@t '_))) (if j484d@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) j484d@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j484b@t)))))))))))) (set! j4bd3@j313c@parse-top-level-program j313c@parse-top-level-program) (set! j313e@top-level-expander (lambda (j484f@e*) (call-with-values (lambda () (j313c@parse-top-level-program j484f@e*)) (lambda (j4855@j4852 j4856@j4854) (let ((j4859@b* j4856@j4854) (j485a@imp* j4855@j4852)) (call-with-values (lambda () (j3138@library-body-expander '() '() j485a@imp* j4859@b* '#t)) (lambda (j486b@j485e j486c@j4860 j486d@j4862 j486e@j4864 j486f@j4866 j4870@j4868 j4871@j486a) (let ((j4879@export-env j4871@j486a) (j487a@export-subst j4870@j4868) (j487b@visit-code j486f@j4866) (j487c@invoke-code j486e@j4864) (j487d@visit-req* j486d@j4862) (j487e@invoke-req* j486c@j4860) (j487f@imp* j486b@j485e)) (values j487e@invoke-req* j487c@invoke-code))))))))) (set! j4bd4@j313e@top-level-expander j313e@top-level-expander) (set! j3140@rp (j2a06@j28e1@make-record-printer 'env (lambda (j4887@x j4888@p j4889@wr) (display '"#<environment>" j4888@p)))) (set! j4bd5@j3140@rp j3140@rp) (set! j314a@env? (lambda (j488d@x) (and (simple-struct? j488d@x) (eq? (simple-struct-name j488d@x) 'env)))) (set! j4bd6@j314a@env? j314a@env?) (set! j314c@env-names (lambda (j488f@x) (simple-struct-ref j488f@x '0))) (set! j4bd7@j314c@env-names j314c@env-names) (set! j314e@set-env-names! (lambda (j4891@x j4892@val) (simple-struct-set! j4891@x '0 j4892@val))) (set! j4bd8@j314e@set-env-names! j314e@set-env-names!) (set! j3150@env-labels (lambda (j4895@x) (simple-struct-ref j4895@x '1))) (set! j4bd9@j3150@env-labels j3150@env-labels) (set! j3152@set-env-labels! (lambda (j4897@x j4898@val) (simple-struct-set! j4897@x '1 j4898@val))) (set! j4bda@j3152@set-env-labels! j3152@set-env-labels!) (set! j3154@env-itc (lambda (j489b@x) (simple-struct-ref j489b@x '2))) (set! j4bdb@j3154@env-itc j3154@env-itc) (set! j3156@set-env-itc! (lambda (j489d@x j489e@val) (simple-struct-set! j489d@x '2 j489e@val))) (set! j4bdc@j3156@set-env-itc! j3156@set-env-itc!) (set! j3158@dummy '3) (set! j4bdd@j3158@dummy j3158@dummy) (set! j315a@rp (j2a06@j28e1@make-record-printer 'interaction-env (lambda (j48a1@x j48a2@p j48a3@wr) (display '"#<environment>" j48a2@p)))) (set! j4bde@j315a@rp j315a@rp) (set! j3164@interaction-env? (lambda (j48a7@x) (and (simple-struct? j48a7@x) (eq? (simple-struct-name j48a7@x) 'interaction-env)))) (set! j4bdf@j3164@interaction-env? j3164@interaction-env?) (set! j3166@interaction-env-rib (lambda (j48a9@x) (simple-struct-ref j48a9@x '0))) (set! j4be0@j3166@interaction-env-rib j3166@interaction-env-rib) (set! j3168@set-interaction-env-rib! (lambda (j48ab@x j48ac@val) (simple-struct-set! j48ab@x '0 j48ac@val))) (set! j4be1@j3168@set-interaction-env-rib! j3168@set-interaction-env-rib!) (set! j316a@interaction-env-r (lambda (j48af@x) (simple-struct-ref j48af@x '1))) (set! j4be2@j316a@interaction-env-r j316a@interaction-env-r) (set! j316c@set-interaction-env-r! (lambda (j48b1@x j48b2@val) (simple-struct-set! j48b1@x '1 j48b2@val))) (set! j4be3@j316c@set-interaction-env-r! j316c@set-interaction-env-r!) (set! j316e@interaction-env-locs (lambda (j48b5@x) (simple-struct-ref j48b5@x '2))) (set! j4be4@j316e@interaction-env-locs j316e@interaction-env-locs) (set! j3170@set-interaction-env-locs! (lambda (j48b7@x j48b8@val) (simple-struct-set! j48b7@x '2 j48b8@val))) (set! j4be5@j3170@set-interaction-env-locs! j3170@set-interaction-env-locs!) (set! j3172@dummy '3) (set! j4be6@j3172@dummy j3172@dummy) (set! j3174@interaction-environment-symbols (lambda () (j317c@environment-symbols (j31b4@interaction-environment)))) (set! j4be7@j3174@interaction-environment-symbols j3174@interaction-environment-symbols) (set! j3176@environment-bindings (lambda (j48bb@e) (vector->list (vector-map (lambda (j48bd@name j48be@label) (j3178@parse-binding (cons j48bd@name (j2cd4@j2b21@imported-label->binding j48be@label)))) (j314c@env-names j48bb@e) (j3150@env-labels j48bb@e))))) (set! j4be8@j3176@environment-bindings j3176@environment-bindings) (set! j3178@parse-binding (lambda (j48c1@b) (cons (car j48c1@b) (let ((j48c3@t (cadr j48c1@b))) (if (memv j48c3@t '(core-prim global)) 'procedure (if (memv j48c3@t '(core-macro macro global-macro)) 'syntax (if (memv j48c3@t '($core-rtd)) 'record (if (eq? (car j48c1@b) (cadr j48c1@b)) 'syntax 'unknown)))))))) (set! j4be9@j3178@parse-binding j3178@parse-binding) (set! j317a@environment? (lambda (j48c5@x) (or (j314a@env? j48c5@x) (j3164@interaction-env? j48c5@x)))) (set! j4bea@j317a@environment? j317a@environment?) (set! j317c@environment-symbols (lambda (j48c7@x) (if (j314a@env? j48c7@x) (vector->list (j314c@env-names j48c7@x)) (if (j3164@interaction-env? j48c7@x) (map values (j2e5d@rib-sym* (j3166@interaction-env-rib j48c7@x))) (assertion-violation 'environment-symbols '"not an environment" j48c7@x))))) (set! j4beb@j317c@environment-symbols j317c@environment-symbols) (set! j317e@environment (lambda j48c9@imp* (let ((j48cb@itc (j312c@make-collector))) (let ((j48d1@j48ce j3132@imp-collector) (j48d2@j48d0 j48cb@itc)) (let ((j48d5@swap (lambda () (let ((j48d7@t (j48d1@j48ce))) (begin (j48d1@j48ce j48d2@j48d0) (set! j48d2@j48d0 j48d7@t)))))) (dynamic-wind j48d5@swap (lambda () (call-with-values (lambda () (j3128@parse-import-spec* j48c9@imp*)) (lambda (j48dd@j48da j48de@j48dc) (let ((j48e1@subst-labels j48de@j48dc) (j48e2@subst-names j48dd@j48da)) (make-simple-struct 'env '4 (list j48e2@subst-names j48e1@subst-labels j48cb@itc)))))) j48d5@swap)))))) (set! j4bec@j317e@environment j317e@environment) (set! j3180@null-environment (lambda (j48e5@n) (begin (if (not (eqv? j48e5@n '5)) (assertion-violation 'null-environment '"not 5" j48e5@n) (void)) (j317e@environment '(psyntax null-environment-5))))) (set! j4bed@j3180@null-environment j3180@null-environment) (set! j3182@scheme-report-environment (lambda (j48e7@n) (begin (if (not (eqv? j48e7@n '5)) (assertion-violation 'scheme-report-environment '"not 5" j48e7@n) (void)) (j317e@environment '(psyntax scheme-report-environment-5))))) (set! j4bee@j3182@scheme-report-environment j3182@scheme-report-environment) (set! j3184@expand (lambda (j48e9@x j48ea@env) (if (j314a@env? j48ea@env) (let ((j48ed@rib (j312a@make-top-rib (j314c@env-names j48ea@env) (j3150@env-labels j48ea@env)))) (let ((j48ef@x (make-simple-struct 'stx '5 (list j48e9@x j2e43@top-mark* (list j48ed@rib) '()))) (j48f0@itc (j3154@env-itc j48ea@env)) (j48f1@rtc (j312c@make-collector)) (j48f2@vtc (j312c@make-collector))) (let ((j48f7@x (let ((j4909@j48fa j31b6@top-level-context) (j490a@j48fc j312e@inv-collector) (j490b@j48fe j3130@vis-collector) (j490c@j4900 j3132@imp-collector) (j490d@j4902 '#f) (j490e@j4904 j48f1@rtc) (j490f@j4906 j48f2@vtc) (j4910@j4908 j48f0@itc)) (let ((j4919@swap (lambda () (begin (let ((j491b@t (j4909@j48fa))) (begin (j4909@j48fa j490d@j4902) (set! j490d@j4902 j491b@t))) (let ((j491d@t (j490a@j48fc))) (begin (j490a@j48fc j490e@j4904) (set! j490e@j4904 j491d@t))) (let ((j491f@t (j490b@j48fe))) (begin (j490b@j48fe j490f@j4906) (set! j490f@j4906 j491f@t))) (let ((j4921@t (j490c@j4900))) (begin (j490c@j4900 j4910@j4908) (set! j4910@j4908 j4921@t))))))) (dynamic-wind j4919@swap (lambda () (j30e8@chi-expr j48ef@x '() '())) j4919@swap))))) (begin (j2e7b@seal-rib! j48ed@rib) (values j48f7@x (j48f1@rtc)))))) (if (j3164@interaction-env? j48ea@env) (let ((j4923@rib (j3166@interaction-env-rib j48ea@env)) (j4924@r (j316a@interaction-env-r j48ea@env)) (j4925@rtc (j312c@make-collector))) (let ((j4929@x (make-simple-struct 'stx '5 (list j48e9@x j2e43@top-mark* (list j4923@rib) '())))) (call-with-values (lambda () (let ((j493f@j4930 j31b6@top-level-context) (j4940@j4932 j312e@inv-collector) (j4941@j4934 j3130@vis-collector) (j4942@j4936 j3132@imp-collector) (j4943@j4938 j48ea@env) (j4944@j493a j4925@rtc) (j4945@j493c (j312c@make-collector)) (j4946@j493e (j312c@make-collector))) (let ((j494f@swap (lambda () (begin (let ((j4951@t (j493f@j4930))) (begin (j493f@j4930 j4943@j4938) (set! j4943@j4938 j4951@t))) (let ((j4953@t (j4940@j4932))) (begin (j4940@j4932 j4944@j493a) (set! j4944@j493a j4953@t))) (let ((j4955@t (j4941@j4934))) (begin (j4941@j4934 j4945@j493c) (set! j4945@j493c j4955@t))) (let ((j4957@t (j4942@j4936))) (begin (j4942@j4936 j4946@j493e) (set! j4946@j493e j4957@t))))))) (dynamic-wind j494f@swap (lambda () (j3136@chi-interaction-expr j4929@x j4923@rib j4924@r)) j494f@swap)))) (lambda (j4959@j492c j495a@j492e) (let ((j495d@r^ j495a@j492e) (j495e@e j4959@j492c)) (begin (j316c@set-interaction-env-r! j48ea@env j495d@r^) (values j495e@e (j4925@rtc)))))))) (assertion-violation 'expand '"not an environment" j48ea@env))))) (set! j4bef@j3184@expand j3184@expand) (set! j3186@eval (lambda (j4961@x j4962@env) (begin (if (not (j317a@environment? j4962@env)) (error 'eval '"not an environment" j4962@env) (void)) (call-with-values (lambda () (j3184@expand j4961@x j4962@env)) (lambda (j4969@j4966 j496a@j4968) (let ((j496d@invoke-req* j496a@j4968) (j496e@x j4969@j4966)) (begin (for-each j2cd5@j2b23@invoke-library j496d@invoke-req*) (eval-core (j2a5f@j2a17@expanded->core j496e@x))))))))) (set! j4bf0@j3186@eval j3186@eval) (set! j3188@library-expander (lambda j49df (let ((j49e0 (length j49df))) (if (= j49e0 '3) (apply (lambda (j4971@x j4972@filename j4973@verify-name) (let ((j4978@build-visit-code '#f) (j497a@visit! '#f)) (begin (set! j4978@build-visit-code (lambda (j49cd@macro*) (if (null? j49cd@macro*) (j2e25@j2d80@build-void) (j2e24@j2d7e@build-sequence '#f (map (lambda (j49cf@x) (let ((j49d1@loc (car j49cf@x)) (j49d2@src (cddr j49cf@x))) (list 'set! j49d1@loc j49d2@src))) j49cd@macro*))))) (set! j497a@visit! (lambda (j49c5@macro*) (for-each (lambda (j49c7@x) (let ((j49c9@loc (car j49c7@x)) (j49ca@proc (cadr j49c7@x))) (set-symbol-value! j49c9@loc j49ca@proc))) j49c5@macro*))) (call-with-values (lambda () (j313a@core-library-expander j4971@x j4973@verify-name)) (lambda (j498d@j497c j498e@j497e j498f@j4980 j4990@j4982 j4991@j4984 j4992@j4986 j4993@j4988 j4994@j498a j4995@j498c) (let ((j499f@export-env j4995@j498c) (j49a0@export-subst j4994@j498a) (j49a1@macro* j4993@j4988) (j49a2@invoke-code j4992@j4986) (j49a3@vis* j4991@j4984) (j49a4@inv* j4990@j4982) (j49a5@imp* j498f@j4980) (j49a6@ver j498e@j497e) (j49a7@name j498d@j497c)) (let ((j49b1@id (gensym)) (j49b2@name j49a7@name) (j49b3@ver j49a6@ver) (j49b4@imp* (map j2cd9@j2b2b@library-spec j49a5@imp*)) (j49b5@vis* (map j2cd9@j2b2b@library-spec j49a3@vis*)) (j49b6@inv* (map j2cd9@j2b2b@library-spec j49a4@inv*)) (j49b7@visit-proc (lambda () (j497a@visit! j49a1@macro*))) (j49b8@invoke-proc (lambda () (eval-core (j2a5f@j2a17@expanded->core j49a2@invoke-code)))) (j49b9@visit-code (j4978@build-visit-code j49a1@macro*)) (j49ba@invoke-code j49a2@invoke-code)) (begin (j2cd3@j2b1f@install-library j49b1@id j49b2@name j49b3@ver j49b4@imp* j49b5@vis* j49b6@inv* j49a0@export-subst j499f@export-env j49b7@visit-proc j49b8@invoke-proc j49b9@visit-code j49ba@invoke-code '#t j4972@filename) (values j49b1@id j49b2@name j49b3@ver j49b4@imp* j49b5@vis* j49b6@inv* j49ba@invoke-code j49b9@visit-code j49a0@export-subst j499f@export-env))))))))) j49df) (if (= j49e0 '2) (apply (lambda (j49d5@x j49d6@filename) (j3188@library-expander j49d5@x j49d6@filename (lambda (j49d9@x) (values)))) j49df) (if (= j49e0 '1) (apply (lambda (j49db@x) (j3188@library-expander j49db@x '#f (lambda (j49dd@x) (values)))) j49df) (error 'apply '"invalid arg count"))))))) (set! j4bf1@j3188@library-expander j3188@library-expander) (set! j318a@boot-library-expand (lambda (j49e1@x) (call-with-values (lambda () (j3188@library-expander j49e1@x)) (lambda (j49f7@j49e4 j49f8@j49e6 j49f9@j49e8 j49fa@j49ea j49fb@j49ec j49fc@j49ee j49fd@j49f0 j49fe@j49f2 j49ff@j49f4 j4a00@j49f6) (let ((j4a0b@export-env j4a00@j49f6) (j4a0c@export-subst j49ff@j49f4) (j4a0d@visit-code j49fe@j49f2) (j4a0e@invoke-code j49fd@j49f0) (j4a0f@inv* j49fc@j49ee) (j4a10@vis* j49fb@j49ec) (j4a11@imp* j49fa@j49ea) (j4a12@ver j49f9@j49e8) (j4a13@name j49f8@j49e6) (j4a14@id j49f7@j49e4)) (values j4a13@name j4a0e@invoke-code j4a0c@export-subst j4a0b@export-env)))))) (set! j4bf2@j318a@boot-library-expand j318a@boot-library-expand) (set! j318c@rev-map-append (lambda (j4a1f@f j4a20@ls j4a21@ac) (if (null? j4a20@ls) j4a21@ac (j318c@rev-map-append j4a1f@f (cdr j4a20@ls) (cons (j4a1f@f (car j4a20@ls)) j4a21@ac))))) (set! j4bf3@j318c@rev-map-append j318c@rev-map-append) (set! j318e@build-exports (lambda (j4a25@lex*+loc* j4a26@init*) (j2e24@j2d7e@build-sequence '#f (cons (j2e25@j2d80@build-void) (j318c@rev-map-append (lambda (j4a29@x) (list 'set! (cdr j4a29@x) (car j4a29@x))) j4a25@lex*+loc* j4a26@init*))))) (set! j4bf4@j318e@build-exports j318e@build-exports) (set! j3190@make-export-subst (lambda (j4a2b@name* j4a2c@id*) (map (lambda (j4a2f@name j4a30@id) (let ((j4a33@label (j2ed5@id->label j4a30@id))) (begin (if (not j4a33@label) (j31a6@syntax-violation '#f '"cannot export unbound identifier" j4a30@id) (void)) (cons j4a2f@name j4a33@label)))) j4a2b@name* j4a2c@id*))) (set! j4bf5@j3190@make-export-subst j3190@make-export-subst) (set! j3192@make-export-env/macros (lambda (j4a35@lex* j4a36@loc* j4a37@r) (let ((j4a3c@lookup '#f)) (begin (set! j4a3c@lookup (lambda (j4a59@x) (let j4a61@f ((j4a5b@x j4a59@x) (j4a5c@lex* j4a35@lex*) (j4a5d@loc* j4a36@loc*)) (if (pair? j4a5c@lex*) (if (eq? j4a5b@x (car j4a5c@lex*)) (car j4a5d@loc*) (j4a61@f j4a5b@x (cdr j4a5c@lex*) (cdr j4a5d@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let j4a45@f ((j4a3d@r j4a37@r) (j4a3e@env '()) (j4a3f@global* '()) (j4a40@macro* '())) (if (null? j4a3d@r) (values j4a3e@env j4a3f@global* j4a40@macro*) (let ((j4a47@x (car j4a3d@r))) (let ((j4a49@label (car j4a47@x)) (j4a4a@b (cdr j4a47@x))) (let ((j4a4d@t (j2edb@binding-type j4a4a@b))) (if (memv j4a4d@t '(lexical)) (let ((j4a4f@v (j2edd@binding-value j4a4a@b))) (let ((j4a51@loc (j4a3c@lookup (j3050@lexical-var j4a4f@v))) (j4a52@type (if (j3052@lexical-mutable? j4a4f@v) 'mutable 'global))) (j4a45@f (cdr j4a3d@r) (cons (cons* j4a49@label j4a52@type j4a51@loc) j4a3e@env) (cons (cons (j3050@lexical-var j4a4f@v) j4a51@loc) j4a3f@global*) j4a40@macro*))) (if (memv j4a4d@t '(local-macro)) (let ((j4a55@loc (gensym))) (j4a45@f (cdr j4a3d@r) (cons (cons* j4a49@label 'global-macro j4a55@loc) j4a3e@env) j4a3f@global* (cons (cons j4a55@loc (j2edd@binding-value j4a4a@b)) j4a40@macro*))) (if (memv j4a4d@t '(local-macro!)) (let ((j4a57@loc (gensym))) (j4a45@f (cdr j4a3d@r) (cons (cons* j4a49@label 'global-macro! j4a57@loc) j4a3e@env) j4a3f@global* (cons (cons j4a57@loc (j2edd@binding-value j4a4a@b)) j4a40@macro*))) (if (memv j4a4d@t '($rtd $module)) (j4a45@f (cdr j4a3d@r) (cons j4a47@x j4a3e@env) j4a3f@global* j4a40@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (j2edb@binding-type j4a4a@b) (j2edd@binding-value j4a4a@b))))))))))))))) (set! j4bf6@j3192@make-export-env/macros j3192@make-export-env/macros) (set! j3194@generate-temporaries (lambda (j4a63@ls) (let ((j4a65@t j4a63@ls)) (let ((j4a67@ls/false (j30c6@syntax-dispatch j4a65@t 'each-any))) (if j4a67@ls/false (apply (lambda (j4a69@ls) (map (lambda (j4a6b@x) (make-simple-struct 'stx '5 (list (let ((j4a6d@x (j31ac@syntax->datum j4a6b@x))) (if (or (symbol? j4a6d@x) (string? j4a6d@x)) (gensym j4a6d@x) (gensym 't))) j2e43@top-mark* '() '()))) j4a69@ls)) j4a67@ls/false) (let ((j4a6f@t j4a65@t)) (let ((j4a71@ls/false (j30c6@syntax-dispatch j4a6f@t '_))) (if j4a71@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) j4a71@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4a6f@t))))))))) (set! j4bf7@j3194@generate-temporaries j3194@generate-temporaries) (set! j3196@free-identifier=? (lambda (j4a73@x j4a74@y) (if (j2ebf@id? j4a73@x) (if (j2ebf@id? j4a74@y) (j2ec5@free-id=? j4a73@x j4a74@y) (assertion-violation 'free-identifier=? '"not an identifier" j4a74@y)) (assertion-violation 'free-identifier=? '"not an identifier" j4a73@x)))) (set! j4bf8@j3196@free-identifier=? j3196@free-identifier=?) (set! j3198@bound-identifier=? (lambda (j4a77@x j4a78@y) (if (j2ebf@id? j4a77@x) (if (j2ebf@id? j4a78@y) (j2ec3@bound-id=? j4a77@x j4a78@y) (assertion-violation 'bound-identifier=? '"not an identifier" j4a78@y)) (assertion-violation 'bound-identifier=? '"not an identifier" j4a77@x)))) (set! j4bf9@j3198@bound-identifier=? j3198@bound-identifier=?) (set! j319a@make-source-condition (lambda (j4a7b@x) (let ((j4a85@j4a80 '#f) (j4a87@j4a82 '#f) (j4a89@j4a81 '#f) (j4a8c@j4a7f '#f) (j4a8e@make-source-condition '#f) (j4a90@j4a7d '#f) (j4a92@j4a7e '#f) (j4a94@source-condition? '#f) (j4a96@source-filename '#f) (j4a98@source-character '#f)) (begin (set! j4a85@j4a80 (make-record-type-descriptor '&source-information j4edb@j4c22@&condition-rtd 'j4a83 '#f '#f '#((immutable file-name) (immutable character)))) (set! j4a87@j4a82 '#f) (set! j4a89@j4a81 (make-record-constructor-descriptor j4a85@j4a80 j4edc@j4c24@&condition-rcd j4a87@j4a82)) (set! j4a8c@j4a7f (record-predicate j4a85@j4a80)) (set! j4a8e@make-source-condition (record-constructor j4a89@j4a81)) (set! j4a90@j4a7d (record-accessor j4a85@j4a80 '0)) (set! j4a92@j4a7e (record-accessor j4a85@j4a80 '1)) (set! j4a94@source-condition? (condition-predicate j4a85@j4a80)) (set! j4a96@source-filename (condition-accessor j4a85@j4a80 j4a90@j4a7d)) (set! j4a98@source-character (condition-accessor j4a85@j4a80 j4a92@j4a7e)) (if (pair? j4a7b@x) (j4a8e@make-source-condition (car j4a7b@x) (cdr j4a7b@x)) (condition)))))) (set! j4bfa@j319a@make-source-condition j319a@make-source-condition) (set! j319c@extract-position-condition (lambda (j4a99@x) (j319a@make-source-condition (j319e@expression-position j4a99@x)))) (set! j4bfb@j319c@extract-position-condition j319c@extract-position-condition) (set! j319e@expression-position (lambda (j4a9b@x) (and (j2e8b@stx? j4a9b@x) (let ((j4a9d@x (j2e8d@stx-expr j4a9b@x))) (and (j29fd@j28cf@annotation? j4a9d@x) (j29fe@j28d1@annotation-source j4a9d@x)))))) (set! j4bfc@j319e@expression-position j319e@expression-position) (set! j31a0@assertion-error (lambda (j4a9f@expr j4aa0@pos) (raise (condition (j4f0b@j4ce6@make-assertion-violation) (j4f1d@j4d18@make-who-condition 'assert) (j4ee1@j4c79@make-message-condition '"assertion failed") (j4f13@j4cfd@make-irritants-condition (list j4a9f@expr)) (j319a@make-source-condition j4aa0@pos))))) (set! j4bfd@j31a0@assertion-error j31a0@assertion-error) (set! j31a2@syntax-error (lambda (j4aa3@x . j4aa5@args) (begin (if (not (for-all string? j4aa5@args)) (assertion-violation 'syntax-error '"invalid argument" j4aa5@args) (void)) (raise (condition (j4ee1@j4c79@make-message-condition (if (null? j4aa5@args) '"invalid syntax" (apply string-append j4aa5@args))) (j4f3f@j4d74@make-syntax-violation (j31ac@syntax->datum j4aa3@x) '#f) (j319c@extract-position-condition j4aa3@x)))))) (set! j4bfe@j31a2@syntax-error j31a2@syntax-error) (set! j31a4@syntax-violation* (lambda (j4aa7@who j4aa8@msg j4aa9@form j4aaa@condition-object) (begin (if (not (string? j4aa8@msg)) (assertion-violation 'syntax-violation '"message is not a string" j4aa8@msg) (void)) (let ((j4aaf@who (if (or (string? j4aa7@who) (symbol? j4aa7@who)) j4aa7@who (if (not j4aa7@who) (let ((j4ab1@t j4aa9@form)) (let ((j4ab3@ls/false (j30c6@syntax-dispatch j4ab1@t 'any))) (if (and j4ab3@ls/false (apply (lambda (j4ab5@id) (j2ebf@id? j4ab5@id)) j4ab3@ls/false)) (apply (lambda (j4ab7@id) (j31ac@syntax->datum j4ab7@id)) j4ab3@ls/false) (let ((j4ab9@t j4ab1@t)) (let ((j4abb@ls/false (j30c6@syntax-dispatch j4ab9@t '(any . any)))) (if (and j4abb@ls/false (apply (lambda (j4abd@id j4abe@rest) (j2ebf@id? j4abd@id)) j4abb@ls/false)) (apply (lambda (j4ac1@id j4ac2@rest) (j31ac@syntax->datum j4ac1@id)) j4abb@ls/false) (let ((j4ac5@t j4ab9@t)) (let ((j4ac7@ls/false (j30c6@syntax-dispatch j4ac5@t '_))) (if j4ac7@ls/false (apply (lambda () '#f) j4ac7@ls/false) (j31a6@syntax-violation '#f '"invalid syntax" j4ac5@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" j4aa7@who))))) (raise (condition (if j4aaf@who (j4f1d@j4d18@make-who-condition j4aaf@who) (condition)) (j4ee1@j4c79@make-message-condition j4aa8@msg) j4aaa@condition-object (j319c@extract-position-condition j4aa9@form))))))) (set! j4bff@j31a4@syntax-violation* j31a4@syntax-violation*) (set! j31a6@syntax-violation (lambda j4ad7 (let ((j4ad8 (length j4ad7))) (if (= j4ad8 '3) (apply (lambda (j4ac9@who j4aca@msg j4acb@form) (j31a6@syntax-violation j4ac9@who j4aca@msg j4acb@form '#f)) j4ad7) (if (= j4ad8 '4) (apply (lambda (j4acf@who j4ad0@msg j4ad1@form j4ad2@subform) (j31a4@syntax-violation* j4acf@who j4ad0@msg j4ad1@form (j4f3f@j4d74@make-syntax-violation (j31ac@syntax->datum j4ad1@form) (j31ac@syntax->datum j4ad2@subform)))) j4ad7) (error 'apply '"invalid arg count")))))) (set! j4c00@j31a6@syntax-violation j31a6@syntax-violation) (set! j31a8@identifier? (lambda (j4ad9@x) (j2ebf@id? j4ad9@x))) (set! j4c01@j31a8@identifier? j31a8@identifier?) (set! j31aa@datum->syntax (lambda (j4adb@id j4adc@datum) (if (j2ebf@id? j4adb@id) (j2e9f@datum->stx j4adb@id j4adc@datum) (assertion-violation 'datum->syntax '"not an identifier" j4adb@id)))) (set! j4c02@j31aa@datum->syntax j31aa@datum->syntax) (set! j31ac@syntax->datum (lambda (j4adf@x) (j2ed3@stx->datum j4adf@x))) (set! j4c03@j31ac@syntax->datum j31ac@syntax->datum) (set! j31ae@ungensym-all (lambda (j4ae1@code) (if (pair? j4ae1@code) (cons (j31ae@ungensym-all (car j4ae1@code)) (j31ae@ungensym-all (cdr j4ae1@code))) (if (symbol? j4ae1@code) (ungensym j4ae1@code) j4ae1@code)))) (set! j4c04@j31ae@ungensym-all j31ae@ungensym-all) (set! j31b0@compile-r6rs-top-level (lambda (j4ae3@x*) (call-with-values (lambda () (j313e@top-level-expander j4ae3@x*)) (lambda (j4ae9@j4ae6 j4aea@j4ae8) (let ((j4aed@invoke-code j4aea@j4ae8) (j4aee@lib* j4ae9@j4ae6)) (lambda () (begin (for-each j2cd5@j2b23@invoke-library j4aee@lib*) (let ((j4af1@expanded (j2a5f@j2a17@expanded->core j4aed@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (j31ae@ungensym-all j4af1@expanded)) (void)) (eval-core j4af1@expanded)))))))))) (set! j4c05@j31b0@compile-r6rs-top-level j31b0@compile-r6rs-top-level) (set! j31b2@pre-compile-r6rs-top-level (lambda (j4af3@x*) (call-with-values (lambda () (j313e@top-level-expander j4af3@x*)) (lambda (j4af9@j4af6 j4afa@j4af8) (let ((j4afd@invoke-code j4afa@j4af8) (j4afe@lib* j4af9@j4af6)) (begin (for-each j2cd5@j2b23@invoke-library j4afe@lib*) (j2a07@j28e3@compile-core (j2a5f@j2a17@expanded->core j4afd@invoke-code)))))))) (set! j4c06@j31b2@pre-compile-r6rs-top-level j31b2@pre-compile-r6rs-top-level) (set! j31b4@interaction-environment (let ((j4b01@the-env '#f)) (lambda () (or j4b01@the-env (let ((j4b03@lib (j2cce@j2b15@find-library-by-name '(mosh interaction))) (j4b04@rib (j2e73@make-empty-rib))) (begin (let ((j4b07@subst (j2cb0@j2ad9@library-subst j4b03@lib))) (begin (j2e5f@set-rib-sym*! j4b04@rib (map car j4b07@subst)) (j2e63@set-rib-mark**! j4b04@rib (map (lambda (j4b09@x) j2e43@top-mark*) j4b07@subst)) (j2e67@set-rib-label*! j4b04@rib (map cdr j4b07@subst)))) (let ((j4b0b@env (make-simple-struct 'interaction-env '4 (list j4b04@rib '() '())))) (begin (set! j4b01@the-env j4b0b@env) j4b0b@env)))))))) (set! j4c07@j31b4@interaction-environment j31b4@interaction-environment) (set! j31b6@top-level-context (j2a09@j28e7@make-parameter '#f)) (set! j4c08@j31b6@top-level-context j31b6@top-level-context) (j2ccb@j2b0f@current-library-expander j3188@library-expander))
(begin (set! j4c17@j4c12 (unspecified)) (set! j4c19@j4c14 (unspecified)) (set! j4c1b@j4c13 (unspecified)) (set! j4c1e@&condition? (unspecified)) (set! j4c20@make-&condition (unspecified)) (set! j4c22@&condition-rtd (unspecified)) (set! j4c24@&condition-rcd (unspecified)) (set! j4c70@j4c6b (unspecified)) (set! j4c72@j4c6d (unspecified)) (set! j4c74@j4c6c (unspecified)) (set! j4c77@p? (unspecified)) (set! j4c79@make-message-condition (unspecified)) (set! j4c7b@j4c6a (unspecified)) (set! j4c7d@message-condition? (unspecified)) (set! j4c7f@condition-message (unspecified)) (set! j4c81@&message-rtd (unspecified)) (set! j4c83@&message-rcd (unspecified)) (set! j4c89@j4c84 (unspecified)) (set! j4c8b@j4c86 (unspecified)) (set! j4c8d@j4c85 (unspecified)) (set! j4c90@p? (unspecified)) (set! j4c92@make-warning (unspecified)) (set! j4c94@warning? (unspecified)) (set! j4c96@&warning-rtd (unspecified)) (set! j4c98@&warning-rcd (unspecified)) (set! j4c9e@j4c99 (unspecified)) (set! j4ca0@j4c9b (unspecified)) (set! j4ca2@j4c9a (unspecified)) (set! j4ca5@p? (unspecified)) (set! j4ca7@make-serious-condition (unspecified)) (set! j4ca9@serious-condition? (unspecified)) (set! j4cab@&serious-rtd (unspecified)) (set! j4cad@&serious-rcd (unspecified)) (set! j4cb3@j4cae (unspecified)) (set! j4cb5@j4cb0 (unspecified)) (set! j4cb7@j4caf (unspecified)) (set! j4cba@p? (unspecified)) (set! j4cbc@make-error (unspecified)) (set! j4cbe@error? (unspecified)) (set! j4cc0@&error-rtd (unspecified)) (set! j4cc2@&error-rcd (unspecified)) (set! j4cc8@j4cc3 (unspecified)) (set! j4cca@j4cc5 (unspecified)) (set! j4ccc@j4cc4 (unspecified)) (set! j4ccf@p? (unspecified)) (set! j4cd1@make-violation (unspecified)) (set! j4cd3@violation? (unspecified)) (set! j4cd5@&violation-rtd (unspecified)) (set! j4cd7@&violation-rcd (unspecified)) (set! j4cdd@j4cd8 (unspecified)) (set! j4cdf@j4cda (unspecified)) (set! j4ce1@j4cd9 (unspecified)) (set! j4ce4@p? (unspecified)) (set! j4ce6@make-assertion-violation (unspecified)) (set! j4ce8@assertion-violation? (unspecified)) (set! j4cea@&assertion-rtd (unspecified)) (set! j4cec@&assertion-rcd (unspecified)) (set! j4cf4@j4cef (unspecified)) (set! j4cf6@j4cf1 (unspecified)) (set! j4cf8@j4cf0 (unspecified)) (set! j4cfb@p? (unspecified)) (set! j4cfd@make-irritants-condition (unspecified)) (set! j4cff@j4cee (unspecified)) (set! j4d01@irritants-condition? (unspecified)) (set! j4d03@condition-irritants (unspecified)) (set! j4d05@&irritants-rtd (unspecified)) (set! j4d07@&irritants-rcd (unspecified)) (set! j4d0f@j4d0a (unspecified)) (set! j4d11@j4d0c (unspecified)) (set! j4d13@j4d0b (unspecified)) (set! j4d16@p? (unspecified)) (set! j4d18@make-who-condition (unspecified)) (set! j4d1a@j4d09 (unspecified)) (set! j4d1c@who-condition? (unspecified)) (set! j4d1e@condition-who (unspecified)) (set! j4d20@&who-rtd (unspecified)) (set! j4d22@&who-rcd (unspecified)) (set! j4d28@j4d23 (unspecified)) (set! j4d2a@j4d25 (unspecified)) (set! j4d2c@j4d24 (unspecified)) (set! j4d2f@p? (unspecified)) (set! j4d31@make-non-continuable-violation (unspecified)) (set! j4d33@non-continuable-violation? (unspecified)) (set! j4d35@&non-continuable-rtd (unspecified)) (set! j4d37@&non-continuable-rcd (unspecified)) (set! j4d3d@j4d38 (unspecified)) (set! j4d3f@j4d3a (unspecified)) (set! j4d41@j4d39 (unspecified)) (set! j4d44@p? (unspecified)) (set! j4d46@make-implementation-restriction-violation (unspecified)) (set! j4d48@implementation-restriction-violation? (unspecified)) (set! j4d4a@&implementation-restriction-rtd (unspecified)) (set! j4d4c@&implementation-restriction-rcd (unspecified)) (set! j4d52@j4d4d (unspecified)) (set! j4d54@j4d4f (unspecified)) (set! j4d56@j4d4e (unspecified)) (set! j4d59@p? (unspecified)) (set! j4d5b@make-lexical-violation (unspecified)) (set! j4d5d@lexical-violation? (unspecified)) (set! j4d5f@&lexical-rtd (unspecified)) (set! j4d61@&lexical-rcd (unspecified)) (set! j4d6b@j4d66 (unspecified)) (set! j4d6d@j4d68 (unspecified)) (set! j4d6f@j4d67 (unspecified)) (set! j4d72@p? (unspecified)) (set! j4d74@make-syntax-violation (unspecified)) (set! j4d76@j4d63 (unspecified)) (set! j4d78@j4d65 (unspecified)) (set! j4d7a@syntax-violation? (unspecified)) (set! j4d7c@syntax-violation-form (unspecified)) (set! j4d7e@syntax-violation-subform (unspecified)) (set! j4d80@&syntax-rtd (unspecified)) (set! j4d82@&syntax-rcd (unspecified)) (set! j4d88@j4d83 (unspecified)) (set! j4d8a@j4d85 (unspecified)) (set! j4d8c@j4d84 (unspecified)) (set! j4d8f@p? (unspecified)) (set! j4d91@make-undefined-violation (unspecified)) (set! j4d93@undefined-violation? (unspecified)) (set! j4d95@&undefined-rtd (unspecified)) (set! j4d97@&undefined-rcd (unspecified)) (set! j4d9d@j4d98 (unspecified)) (set! j4d9f@j4d9a (unspecified)) (set! j4da1@j4d99 (unspecified)) (set! j4da4@p? (unspecified)) (set! j4da6@make-i/o-error (unspecified)) (set! j4da8@i/o-error? (unspecified)) (set! j4daa@&i/o-rtd (unspecified)) (set! j4dac@&i/o-rcd (unspecified)) (set! j4db2@j4dad (unspecified)) (set! j4db4@j4daf (unspecified)) (set! j4db6@j4dae (unspecified)) (set! j4db9@p? (unspecified)) (set! j4dbb@make-i/o-read-error (unspecified)) (set! j4dbd@i/o-read-error? (unspecified)) (set! j4dbf@&i/o-read-rtd (unspecified)) (set! j4dc1@&i/o-read-rcd (unspecified)) (set! j4dc7@j4dc2 (unspecified)) (set! j4dc9@j4dc4 (unspecified)) (set! j4dcb@j4dc3 (unspecified)) (set! j4dce@p? (unspecified)) (set! j4dd0@make-i/o-write-error (unspecified)) (set! j4dd2@i/o-write-error? (unspecified)) (set! j4dd4@&i/o-write-rtd (unspecified)) (set! j4dd6@&i/o-write-rcd (unspecified)) (set! j4dde@j4dd9 (unspecified)) (set! j4de0@j4ddb (unspecified)) (set! j4de2@j4dda (unspecified)) (set! j4de5@p? (unspecified)) (set! j4de7@make-i/o-invalid-position-error (unspecified)) (set! j4de9@j4dd8 (unspecified)) (set! j4deb@i/o-invalid-position-error? (unspecified)) (set! j4ded@i/o-error-position (unspecified)) (set! j4def@&i/o-invalid-position-rtd (unspecified)) (set! j4df1@&i/o-invalid-position-rcd (unspecified)) (set! j4df9@j4df4 (unspecified)) (set! j4dfb@j4df6 (unspecified)) (set! j4dfd@j4df5 (unspecified)) (set! j4e00@p? (unspecified)) (set! j4e02@make-i/o-filename-error (unspecified)) (set! j4e04@j4df3 (unspecified)) (set! j4e06@i/o-filename-error? (unspecified)) (set! j4e08@i/o-error-filename (unspecified)) (set! j4e0a@&i/o-filename-rtd (unspecified)) (set! j4e0c@&i/o-filename-rcd (unspecified)) (set! j4e12@j4e0d (unspecified)) (set! j4e14@j4e0f (unspecified)) (set! j4e16@j4e0e (unspecified)) (set! j4e19@p? (unspecified)) (set! j4e1b@make-i/o-file-protection-error (unspecified)) (set! j4e1d@i/o-file-protection-error? (unspecified)) (set! j4e1f@&i/o-file-protection-rtd (unspecified)) (set! j4e21@&i/o-file-protection-rcd (unspecified)) (set! j4e27@j4e22 (unspecified)) (set! j4e29@j4e24 (unspecified)) (set! j4e2b@j4e23 (unspecified)) (set! j4e2e@p? (unspecified)) (set! j4e30@make-i/o-file-is-read-only-error (unspecified)) (set! j4e32@i/o-file-is-read-only-error? (unspecified)) (set! j4e34@&i/o-file-is-read-only-rtd (unspecified)) (set! j4e36@&i/o-file-is-read-only-rcd (unspecified)) (set! j4e3c@j4e37 (unspecified)) (set! j4e3e@j4e39 (unspecified)) (set! j4e40@j4e38 (unspecified)) (set! j4e43@p? (unspecified)) (set! j4e45@make-i/o-file-already-exists-error (unspecified)) (set! j4e47@i/o-file-already-exists-error? (unspecified)) (set! j4e49@&i/o-file-already-exists-rtd (unspecified)) (set! j4e4b@&i/o-file-already-exists-rcd (unspecified)) (set! j4e51@j4e4c (unspecified)) (set! j4e53@j4e4e (unspecified)) (set! j4e55@j4e4d (unspecified)) (set! j4e58@p? (unspecified)) (set! j4e5a@make-i/o-file-does-not-exist-error (unspecified)) (set! j4e5c@i/o-file-does-not-exist-error? (unspecified)) (set! j4e5e@&i/o-file-does-not-exist-rtd (unspecified)) (set! j4e60@&i/o-file-does-not-exist-rcd (unspecified)) (set! j4e68@j4e63 (unspecified)) (set! j4e6a@j4e65 (unspecified)) (set! j4e6c@j4e64 (unspecified)) (set! j4e6f@p? (unspecified)) (set! j4e71@make-i/o-port-error (unspecified)) (set! j4e73@j4e62 (unspecified)) (set! j4e75@i/o-port-error? (unspecified)) (set! j4e77@i/o-error-port (unspecified)) (set! j4e79@&i/o-port-rtd (unspecified)) (set! j4e7b@&i/o-port-rcd (unspecified)) (set! j4e81@j4e7c (unspecified)) (set! j4e83@j4e7e (unspecified)) (set! j4e85@j4e7d (unspecified)) (set! j4e88@p? (unspecified)) (set! j4e8a@make-i/o-decoding-error (unspecified)) (set! j4e8c@i/o-decoding-error? (unspecified)) (set! j4e8e@&i/o-decoding-rtd (unspecified)) (set! j4e90@&i/o-decoding-rcd (unspecified)) (set! j4e98@j4e93 (unspecified)) (set! j4e9a@j4e95 (unspecified)) (set! j4e9c@j4e94 (unspecified)) (set! j4e9f@p? (unspecified)) (set! j4ea1@make-i/o-encoding-error (unspecified)) (set! j4ea3@j4e92 (unspecified)) (set! j4ea5@i/o-encoding-error? (unspecified)) (set! j4ea7@i/o-encoding-error-char (unspecified)) (set! j4ea9@&i/o-encoding-rtd (unspecified)) (set! j4eab@&i/o-encoding-rcd (unspecified)) (set! j4eb1@j4eac (unspecified)) (set! j4eb3@j4eae (unspecified)) (set! j4eb5@j4ead (unspecified)) (set! j4eb8@p? (unspecified)) (set! j4eba@make-no-infinities-violation (unspecified)) (set! j4ebc@no-infinities-violation? (unspecified)) (set! j4ebe@&no-infinities-rtd (unspecified)) (set! j4ec0@&no-infinities-rcd (unspecified)) (set! j4ec6@j4ec1 (unspecified)) (set! j4ec8@j4ec3 (unspecified)) (set! j4eca@j4ec2 (unspecified)) (set! j4ecd@p? (unspecified)) (set! j4ecf@make-no-nans-violation (unspecified)) (set! j4ed1@no-nans-violation? (unspecified)) (set! j4ed3@&no-nans-rtd (unspecified)) (set! j4ed5@&no-nans-rcd (unspecified)) (set! j4c17@j4c12 (make-record-type-descriptor '&condition '#f 'j4c15 '#f '#f '#())) (set! j4ed6@j4c17@j4c12 j4c17@j4c12) (set! j4c19@j4c14 '#f) (set! j4ed7@j4c19@j4c14 j4c19@j4c14) (set! j4c1b@j4c13 (make-record-constructor-descriptor j4c17@j4c12 '#f j4c19@j4c14)) (set! j4ed8@j4c1b@j4c13 j4c1b@j4c13) (set! j4c1e@&condition? (record-predicate j4c17@j4c12)) (set! j4ed9@j4c1e@&condition? j4c1e@&condition?) (set! j4c20@make-&condition (record-constructor j4c1b@j4c13)) (set! j4eda@j4c20@make-&condition j4c20@make-&condition) (set! j4c22@&condition-rtd j4c17@j4c12) (set! j4edb@j4c22@&condition-rtd j4c22@&condition-rtd) (set! j4c24@&condition-rcd j4c1b@j4c13) (set! j4edc@j4c24@&condition-rcd j4c24@&condition-rcd) (set! j4c70@j4c6b (make-record-type-descriptor '&message j4c17@j4c12 'j4c6e '#f '#f '#((immutable message)))) (set! j4edd@j4c70@j4c6b j4c70@j4c6b) (set! j4c72@j4c6d '#f) (set! j4ede@j4c72@j4c6d j4c72@j4c6d) (set! j4c74@j4c6c (make-record-constructor-descriptor j4c70@j4c6b j4c1b@j4c13 j4c72@j4c6d)) (set! j4edf@j4c74@j4c6c j4c74@j4c6c) (set! j4c77@p? (record-predicate j4c70@j4c6b)) (set! j4ee0@j4c77@p? j4c77@p?) (set! j4c79@make-message-condition (record-constructor j4c74@j4c6c)) (set! j4ee1@j4c79@make-message-condition j4c79@make-message-condition) (set! j4c7b@j4c6a (record-accessor j4c70@j4c6b '0)) (set! j4ee2@j4c7b@j4c6a j4c7b@j4c6a) (set! j4c7d@message-condition? (condition-predicate j4c70@j4c6b)) (set! j4ee3@j4c7d@message-condition? j4c7d@message-condition?) (set! j4c7f@condition-message (condition-accessor j4c70@j4c6b j4c7b@j4c6a)) (set! j4ee4@j4c7f@condition-message j4c7f@condition-message) (set! j4c81@&message-rtd j4c70@j4c6b) (set! j4ee5@j4c81@&message-rtd j4c81@&message-rtd) (set! j4c83@&message-rcd j4c74@j4c6c) (set! j4ee6@j4c83@&message-rcd j4c83@&message-rcd) (set! j4c89@j4c84 (make-record-type-descriptor '&warning j4c17@j4c12 'j4c87 '#f '#f '#())) (set! j4ee7@j4c89@j4c84 j4c89@j4c84) (set! j4c8b@j4c86 '#f) (set! j4ee8@j4c8b@j4c86 j4c8b@j4c86) (set! j4c8d@j4c85 (make-record-constructor-descriptor j4c89@j4c84 j4c1b@j4c13 j4c8b@j4c86)) (set! j4ee9@j4c8d@j4c85 j4c8d@j4c85) (set! j4c90@p? (record-predicate j4c89@j4c84)) (set! j4eea@j4c90@p? j4c90@p?) (set! j4c92@make-warning (record-constructor j4c8d@j4c85)) (set! j4eeb@j4c92@make-warning j4c92@make-warning) (set! j4c94@warning? (condition-predicate j4c89@j4c84)) (set! j4eec@j4c94@warning? j4c94@warning?) (set! j4c96@&warning-rtd j4c89@j4c84) (set! j4eed@j4c96@&warning-rtd j4c96@&warning-rtd) (set! j4c98@&warning-rcd j4c8d@j4c85) (set! j4eee@j4c98@&warning-rcd j4c98@&warning-rcd) (set! j4c9e@j4c99 (make-record-type-descriptor '&serious j4c17@j4c12 'j4c9c '#f '#f '#())) (set! j4eef@j4c9e@j4c99 j4c9e@j4c99) (set! j4ca0@j4c9b '#f) (set! j4ef0@j4ca0@j4c9b j4ca0@j4c9b) (set! j4ca2@j4c9a (make-record-constructor-descriptor j4c9e@j4c99 j4c1b@j4c13 j4ca0@j4c9b)) (set! j4ef1@j4ca2@j4c9a j4ca2@j4c9a) (set! j4ca5@p? (record-predicate j4c9e@j4c99)) (set! j4ef2@j4ca5@p? j4ca5@p?) (set! j4ca7@make-serious-condition (record-constructor j4ca2@j4c9a)) (set! j4ef3@j4ca7@make-serious-condition j4ca7@make-serious-condition) (set! j4ca9@serious-condition? (condition-predicate j4c9e@j4c99)) (set! j4ef4@j4ca9@serious-condition? j4ca9@serious-condition?) (set! j4cab@&serious-rtd j4c9e@j4c99) (set! j4ef5@j4cab@&serious-rtd j4cab@&serious-rtd) (set! j4cad@&serious-rcd j4ca2@j4c9a) (set! j4ef6@j4cad@&serious-rcd j4cad@&serious-rcd) (set! j4cb3@j4cae (make-record-type-descriptor '&error j4c9e@j4c99 'j4cb1 '#f '#f '#())) (set! j4ef7@j4cb3@j4cae j4cb3@j4cae) (set! j4cb5@j4cb0 '#f) (set! j4ef8@j4cb5@j4cb0 j4cb5@j4cb0) (set! j4cb7@j4caf (make-record-constructor-descriptor j4cb3@j4cae j4ca2@j4c9a j4cb5@j4cb0)) (set! j4ef9@j4cb7@j4caf j4cb7@j4caf) (set! j4cba@p? (record-predicate j4cb3@j4cae)) (set! j4efa@j4cba@p? j4cba@p?) (set! j4cbc@make-error (record-constructor j4cb7@j4caf)) (set! j4efb@j4cbc@make-error j4cbc@make-error) (set! j4cbe@error? (condition-predicate j4cb3@j4cae)) (set! j4efc@j4cbe@error? j4cbe@error?) (set! j4cc0@&error-rtd j4cb3@j4cae) (set! j4efd@j4cc0@&error-rtd j4cc0@&error-rtd) (set! j4cc2@&error-rcd j4cb7@j4caf) (set! j4efe@j4cc2@&error-rcd j4cc2@&error-rcd) (set! j4cc8@j4cc3 (make-record-type-descriptor '&violation j4c9e@j4c99 'j4cc6 '#f '#f '#())) (set! j4eff@j4cc8@j4cc3 j4cc8@j4cc3) (set! j4cca@j4cc5 '#f) (set! j4f00@j4cca@j4cc5 j4cca@j4cc5) (set! j4ccc@j4cc4 (make-record-constructor-descriptor j4cc8@j4cc3 j4ca2@j4c9a j4cca@j4cc5)) (set! j4f01@j4ccc@j4cc4 j4ccc@j4cc4) (set! j4ccf@p? (record-predicate j4cc8@j4cc3)) (set! j4f02@j4ccf@p? j4ccf@p?) (set! j4cd1@make-violation (record-constructor j4ccc@j4cc4)) (set! j4f03@j4cd1@make-violation j4cd1@make-violation) (set! j4cd3@violation? (condition-predicate j4cc8@j4cc3)) (set! j4f04@j4cd3@violation? j4cd3@violation?) (set! j4cd5@&violation-rtd j4cc8@j4cc3) (set! j4f05@j4cd5@&violation-rtd j4cd5@&violation-rtd) (set! j4cd7@&violation-rcd j4ccc@j4cc4) (set! j4f06@j4cd7@&violation-rcd j4cd7@&violation-rcd) (set! j4cdd@j4cd8 (make-record-type-descriptor '&assertion j4cc8@j4cc3 'j4cdb '#f '#f '#())) (set! j4f07@j4cdd@j4cd8 j4cdd@j4cd8) (set! j4cdf@j4cda '#f) (set! j4f08@j4cdf@j4cda j4cdf@j4cda) (set! j4ce1@j4cd9 (make-record-constructor-descriptor j4cdd@j4cd8 j4ccc@j4cc4 j4cdf@j4cda)) (set! j4f09@j4ce1@j4cd9 j4ce1@j4cd9) (set! j4ce4@p? (record-predicate j4cdd@j4cd8)) (set! j4f0a@j4ce4@p? j4ce4@p?) (set! j4ce6@make-assertion-violation (record-constructor j4ce1@j4cd9)) (set! j4f0b@j4ce6@make-assertion-violation j4ce6@make-assertion-violation) (set! j4ce8@assertion-violation? (condition-predicate j4cdd@j4cd8)) (set! j4f0c@j4ce8@assertion-violation? j4ce8@assertion-violation?) (set! j4cea@&assertion-rtd j4cdd@j4cd8) (set! j4f0d@j4cea@&assertion-rtd j4cea@&assertion-rtd) (set! j4cec@&assertion-rcd j4ce1@j4cd9) (set! j4f0e@j4cec@&assertion-rcd j4cec@&assertion-rcd) (set! j4cf4@j4cef (make-record-type-descriptor '&irritants j4c17@j4c12 'j4cf2 '#f '#f '#((immutable irritants)))) (set! j4f0f@j4cf4@j4cef j4cf4@j4cef) (set! j4cf6@j4cf1 '#f) (set! j4f10@j4cf6@j4cf1 j4cf6@j4cf1) (set! j4cf8@j4cf0 (make-record-constructor-descriptor j4cf4@j4cef j4c1b@j4c13 j4cf6@j4cf1)) (set! j4f11@j4cf8@j4cf0 j4cf8@j4cf0) (set! j4cfb@p? (record-predicate j4cf4@j4cef)) (set! j4f12@j4cfb@p? j4cfb@p?) (set! j4cfd@make-irritants-condition (record-constructor j4cf8@j4cf0)) (set! j4f13@j4cfd@make-irritants-condition j4cfd@make-irritants-condition) (set! j4cff@j4cee (record-accessor j4cf4@j4cef '0)) (set! j4f14@j4cff@j4cee j4cff@j4cee) (set! j4d01@irritants-condition? (condition-predicate j4cf4@j4cef)) (set! j4f15@j4d01@irritants-condition? j4d01@irritants-condition?) (set! j4d03@condition-irritants (condition-accessor j4cf4@j4cef j4cff@j4cee)) (set! j4f16@j4d03@condition-irritants j4d03@condition-irritants) (set! j4d05@&irritants-rtd j4cf4@j4cef) (set! j4f17@j4d05@&irritants-rtd j4d05@&irritants-rtd) (set! j4d07@&irritants-rcd j4cf8@j4cf0) (set! j4f18@j4d07@&irritants-rcd j4d07@&irritants-rcd) (set! j4d0f@j4d0a (make-record-type-descriptor '&who j4c17@j4c12 'j4d0d '#f '#f '#((immutable who)))) (set! j4f19@j4d0f@j4d0a j4d0f@j4d0a) (set! j4d11@j4d0c '#f) (set! j4f1a@j4d11@j4d0c j4d11@j4d0c) (set! j4d13@j4d0b (make-record-constructor-descriptor j4d0f@j4d0a j4c1b@j4c13 j4d11@j4d0c)) (set! j4f1b@j4d13@j4d0b j4d13@j4d0b) (set! j4d16@p? (record-predicate j4d0f@j4d0a)) (set! j4f1c@j4d16@p? j4d16@p?) (set! j4d18@make-who-condition (record-constructor j4d13@j4d0b)) (set! j4f1d@j4d18@make-who-condition j4d18@make-who-condition) (set! j4d1a@j4d09 (record-accessor j4d0f@j4d0a '0)) (set! j4f1e@j4d1a@j4d09 j4d1a@j4d09) (set! j4d1c@who-condition? (condition-predicate j4d0f@j4d0a)) (set! j4f1f@j4d1c@who-condition? j4d1c@who-condition?) (set! j4d1e@condition-who (condition-accessor j4d0f@j4d0a j4d1a@j4d09)) (set! j4f20@j4d1e@condition-who j4d1e@condition-who) (set! j4d20@&who-rtd j4d0f@j4d0a) (set! j4f21@j4d20@&who-rtd j4d20@&who-rtd) (set! j4d22@&who-rcd j4d13@j4d0b) (set! j4f22@j4d22@&who-rcd j4d22@&who-rcd) (set! j4d28@j4d23 (make-record-type-descriptor '&non-continuable j4cc8@j4cc3 'j4d26 '#f '#f '#())) (set! j4f23@j4d28@j4d23 j4d28@j4d23) (set! j4d2a@j4d25 '#f) (set! j4f24@j4d2a@j4d25 j4d2a@j4d25) (set! j4d2c@j4d24 (make-record-constructor-descriptor j4d28@j4d23 j4ccc@j4cc4 j4d2a@j4d25)) (set! j4f25@j4d2c@j4d24 j4d2c@j4d24) (set! j4d2f@p? (record-predicate j4d28@j4d23)) (set! j4f26@j4d2f@p? j4d2f@p?) (set! j4d31@make-non-continuable-violation (record-constructor j4d2c@j4d24)) (set! j4f27@j4d31@make-non-continuable-violation j4d31@make-non-continuable-violation) (set! j4d33@non-continuable-violation? (condition-predicate j4d28@j4d23)) (set! j4f28@j4d33@non-continuable-violation? j4d33@non-continuable-violation?) (set! j4d35@&non-continuable-rtd j4d28@j4d23) (set! j4f29@j4d35@&non-continuable-rtd j4d35@&non-continuable-rtd) (set! j4d37@&non-continuable-rcd j4d2c@j4d24) (set! j4f2a@j4d37@&non-continuable-rcd j4d37@&non-continuable-rcd) (set! j4d3d@j4d38 (make-record-type-descriptor '&implementation-restriction j4cc8@j4cc3 'j4d3b '#f '#f '#())) (set! j4f2b@j4d3d@j4d38 j4d3d@j4d38) (set! j4d3f@j4d3a '#f) (set! j4f2c@j4d3f@j4d3a j4d3f@j4d3a) (set! j4d41@j4d39 (make-record-constructor-descriptor j4d3d@j4d38 j4ccc@j4cc4 j4d3f@j4d3a)) (set! j4f2d@j4d41@j4d39 j4d41@j4d39) (set! j4d44@p? (record-predicate j4d3d@j4d38)) (set! j4f2e@j4d44@p? j4d44@p?) (set! j4d46@make-implementation-restriction-violation (record-constructor j4d41@j4d39)) (set! j4f2f@j4d46@make-implementation-restriction-violation j4d46@make-implementation-restriction-violation) (set! j4d48@implementation-restriction-violation? (condition-predicate j4d3d@j4d38)) (set! j4f30@j4d48@implementation-restriction-violation? j4d48@implementation-restriction-violation?) (set! j4d4a@&implementation-restriction-rtd j4d3d@j4d38) (set! j4f31@j4d4a@&implementation-restriction-rtd j4d4a@&implementation-restriction-rtd) (set! j4d4c@&implementation-restriction-rcd j4d41@j4d39) (set! j4f32@j4d4c@&implementation-restriction-rcd j4d4c@&implementation-restriction-rcd) (set! j4d52@j4d4d (make-record-type-descriptor '&lexical j4cc8@j4cc3 'j4d50 '#f '#f '#())) (set! j4f33@j4d52@j4d4d j4d52@j4d4d) (set! j4d54@j4d4f '#f) (set! j4f34@j4d54@j4d4f j4d54@j4d4f) (set! j4d56@j4d4e (make-record-constructor-descriptor j4d52@j4d4d j4ccc@j4cc4 j4d54@j4d4f)) (set! j4f35@j4d56@j4d4e j4d56@j4d4e) (set! j4d59@p? (record-predicate j4d52@j4d4d)) (set! j4f36@j4d59@p? j4d59@p?) (set! j4d5b@make-lexical-violation (record-constructor j4d56@j4d4e)) (set! j4f37@j4d5b@make-lexical-violation j4d5b@make-lexical-violation) (set! j4d5d@lexical-violation? (condition-predicate j4d52@j4d4d)) (set! j4f38@j4d5d@lexical-violation? j4d5d@lexical-violation?) (set! j4d5f@&lexical-rtd j4d52@j4d4d) (set! j4f39@j4d5f@&lexical-rtd j4d5f@&lexical-rtd) (set! j4d61@&lexical-rcd j4d56@j4d4e) (set! j4f3a@j4d61@&lexical-rcd j4d61@&lexical-rcd) (set! j4d6b@j4d66 (make-record-type-descriptor '&syntax j4cc8@j4cc3 'j4d69 '#f '#f '#((immutable form) (immutable subform)))) (set! j4f3b@j4d6b@j4d66 j4d6b@j4d66) (set! j4d6d@j4d68 '#f) (set! j4f3c@j4d6d@j4d68 j4d6d@j4d68) (set! j4d6f@j4d67 (make-record-constructor-descriptor j4d6b@j4d66 j4ccc@j4cc4 j4d6d@j4d68)) (set! j4f3d@j4d6f@j4d67 j4d6f@j4d67) (set! j4d72@p? (record-predicate j4d6b@j4d66)) (set! j4f3e@j4d72@p? j4d72@p?) (set! j4d74@make-syntax-violation (record-constructor j4d6f@j4d67)) (set! j4f3f@j4d74@make-syntax-violation j4d74@make-syntax-violation) (set! j4d76@j4d63 (record-accessor j4d6b@j4d66 '0)) (set! j4f40@j4d76@j4d63 j4d76@j4d63) (set! j4d78@j4d65 (record-accessor j4d6b@j4d66 '1)) (set! j4f41@j4d78@j4d65 j4d78@j4d65) (set! j4d7a@syntax-violation? (condition-predicate j4d6b@j4d66)) (set! j4f42@j4d7a@syntax-violation? j4d7a@syntax-violation?) (set! j4d7c@syntax-violation-form (condition-accessor j4d6b@j4d66 j4d76@j4d63)) (set! j4f43@j4d7c@syntax-violation-form j4d7c@syntax-violation-form) (set! j4d7e@syntax-violation-subform (condition-accessor j4d6b@j4d66 j4d78@j4d65)) (set! j4f44@j4d7e@syntax-violation-subform j4d7e@syntax-violation-subform) (set! j4d80@&syntax-rtd j4d6b@j4d66) (set! j4f45@j4d80@&syntax-rtd j4d80@&syntax-rtd) (set! j4d82@&syntax-rcd j4d6f@j4d67) (set! j4f46@j4d82@&syntax-rcd j4d82@&syntax-rcd) (set! j4d88@j4d83 (make-record-type-descriptor '&undefined j4cc8@j4cc3 'j4d86 '#f '#f '#())) (set! j4f47@j4d88@j4d83 j4d88@j4d83) (set! j4d8a@j4d85 '#f) (set! j4f48@j4d8a@j4d85 j4d8a@j4d85) (set! j4d8c@j4d84 (make-record-constructor-descriptor j4d88@j4d83 j4ccc@j4cc4 j4d8a@j4d85)) (set! j4f49@j4d8c@j4d84 j4d8c@j4d84) (set! j4d8f@p? (record-predicate j4d88@j4d83)) (set! j4f4a@j4d8f@p? j4d8f@p?) (set! j4d91@make-undefined-violation (record-constructor j4d8c@j4d84)) (set! j4f4b@j4d91@make-undefined-violation j4d91@make-undefined-violation) (set! j4d93@undefined-violation? (condition-predicate j4d88@j4d83)) (set! j4f4c@j4d93@undefined-violation? j4d93@undefined-violation?) (set! j4d95@&undefined-rtd j4d88@j4d83) (set! j4f4d@j4d95@&undefined-rtd j4d95@&undefined-rtd) (set! j4d97@&undefined-rcd j4d8c@j4d84) (set! j4f4e@j4d97@&undefined-rcd j4d97@&undefined-rcd) (set! j4d9d@j4d98 (make-record-type-descriptor '&i/o j4cb3@j4cae 'j4d9b '#f '#f '#())) (set! j4f4f@j4d9d@j4d98 j4d9d@j4d98) (set! j4d9f@j4d9a '#f) (set! j4f50@j4d9f@j4d9a j4d9f@j4d9a) (set! j4da1@j4d99 (make-record-constructor-descriptor j4d9d@j4d98 j4cb7@j4caf j4d9f@j4d9a)) (set! j4f51@j4da1@j4d99 j4da1@j4d99) (set! j4da4@p? (record-predicate j4d9d@j4d98)) (set! j4f52@j4da4@p? j4da4@p?) (set! j4da6@make-i/o-error (record-constructor j4da1@j4d99)) (set! j4f53@j4da6@make-i/o-error j4da6@make-i/o-error) (set! j4da8@i/o-error? (condition-predicate j4d9d@j4d98)) (set! j4f54@j4da8@i/o-error? j4da8@i/o-error?) (set! j4daa@&i/o-rtd j4d9d@j4d98) (set! j4f55@j4daa@&i/o-rtd j4daa@&i/o-rtd) (set! j4dac@&i/o-rcd j4da1@j4d99) (set! j4f56@j4dac@&i/o-rcd j4dac@&i/o-rcd) (set! j4db2@j4dad (make-record-type-descriptor '&i/o-read j4d9d@j4d98 'j4db0 '#f '#f '#())) (set! j4f57@j4db2@j4dad j4db2@j4dad) (set! j4db4@j4daf '#f) (set! j4f58@j4db4@j4daf j4db4@j4daf) (set! j4db6@j4dae (make-record-constructor-descriptor j4db2@j4dad j4da1@j4d99 j4db4@j4daf)) (set! j4f59@j4db6@j4dae j4db6@j4dae) (set! j4db9@p? (record-predicate j4db2@j4dad)) (set! j4f5a@j4db9@p? j4db9@p?) (set! j4dbb@make-i/o-read-error (record-constructor j4db6@j4dae)) (set! j4f5b@j4dbb@make-i/o-read-error j4dbb@make-i/o-read-error) (set! j4dbd@i/o-read-error? (condition-predicate j4db2@j4dad)) (set! j4f5c@j4dbd@i/o-read-error? j4dbd@i/o-read-error?) (set! j4dbf@&i/o-read-rtd j4db2@j4dad) (set! j4f5d@j4dbf@&i/o-read-rtd j4dbf@&i/o-read-rtd) (set! j4dc1@&i/o-read-rcd j4db6@j4dae) (set! j4f5e@j4dc1@&i/o-read-rcd j4dc1@&i/o-read-rcd) (set! j4dc7@j4dc2 (make-record-type-descriptor '&i/o-write j4d9d@j4d98 'j4dc5 '#f '#f '#())) (set! j4f5f@j4dc7@j4dc2 j4dc7@j4dc2) (set! j4dc9@j4dc4 '#f) (set! j4f60@j4dc9@j4dc4 j4dc9@j4dc4) (set! j4dcb@j4dc3 (make-record-constructor-descriptor j4dc7@j4dc2 j4da1@j4d99 j4dc9@j4dc4)) (set! j4f61@j4dcb@j4dc3 j4dcb@j4dc3) (set! j4dce@p? (record-predicate j4dc7@j4dc2)) (set! j4f62@j4dce@p? j4dce@p?) (set! j4dd0@make-i/o-write-error (record-constructor j4dcb@j4dc3)) (set! j4f63@j4dd0@make-i/o-write-error j4dd0@make-i/o-write-error) (set! j4dd2@i/o-write-error? (condition-predicate j4dc7@j4dc2)) (set! j4f64@j4dd2@i/o-write-error? j4dd2@i/o-write-error?) (set! j4dd4@&i/o-write-rtd j4dc7@j4dc2) (set! j4f65@j4dd4@&i/o-write-rtd j4dd4@&i/o-write-rtd) (set! j4dd6@&i/o-write-rcd j4dcb@j4dc3) (set! j4f66@j4dd6@&i/o-write-rcd j4dd6@&i/o-write-rcd) (set! j4dde@j4dd9 (make-record-type-descriptor '&i/o-invalid-position j4d9d@j4d98 'j4ddc '#f '#f '#((immutable position)))) (set! j4f67@j4dde@j4dd9 j4dde@j4dd9) (set! j4de0@j4ddb '#f) (set! j4f68@j4de0@j4ddb j4de0@j4ddb) (set! j4de2@j4dda (make-record-constructor-descriptor j4dde@j4dd9 j4da1@j4d99 j4de0@j4ddb)) (set! j4f69@j4de2@j4dda j4de2@j4dda) (set! j4de5@p? (record-predicate j4dde@j4dd9)) (set! j4f6a@j4de5@p? j4de5@p?) (set! j4de7@make-i/o-invalid-position-error (record-constructor j4de2@j4dda)) (set! j4f6b@j4de7@make-i/o-invalid-position-error j4de7@make-i/o-invalid-position-error) (set! j4de9@j4dd8 (record-accessor j4dde@j4dd9 '0)) (set! j4f6c@j4de9@j4dd8 j4de9@j4dd8) (set! j4deb@i/o-invalid-position-error? (condition-predicate j4dde@j4dd9)) (set! j4f6d@j4deb@i/o-invalid-position-error? j4deb@i/o-invalid-position-error?) (set! j4ded@i/o-error-position (condition-accessor j4dde@j4dd9 j4de9@j4dd8)) (set! j4f6e@j4ded@i/o-error-position j4ded@i/o-error-position) (set! j4def@&i/o-invalid-position-rtd j4dde@j4dd9) (set! j4f6f@j4def@&i/o-invalid-position-rtd j4def@&i/o-invalid-position-rtd) (set! j4df1@&i/o-invalid-position-rcd j4de2@j4dda) (set! j4f70@j4df1@&i/o-invalid-position-rcd j4df1@&i/o-invalid-position-rcd) (set! j4df9@j4df4 (make-record-type-descriptor '&i/o-filename j4d9d@j4d98 'j4df7 '#f '#f '#((immutable filename)))) (set! j4f71@j4df9@j4df4 j4df9@j4df4) (set! j4dfb@j4df6 '#f) (set! j4f72@j4dfb@j4df6 j4dfb@j4df6) (set! j4dfd@j4df5 (make-record-constructor-descriptor j4df9@j4df4 j4da1@j4d99 j4dfb@j4df6)) (set! j4f73@j4dfd@j4df5 j4dfd@j4df5) (set! j4e00@p? (record-predicate j4df9@j4df4)) (set! j4f74@j4e00@p? j4e00@p?) (set! j4e02@make-i/o-filename-error (record-constructor j4dfd@j4df5)) (set! j4f75@j4e02@make-i/o-filename-error j4e02@make-i/o-filename-error) (set! j4e04@j4df3 (record-accessor j4df9@j4df4 '0)) (set! j4f76@j4e04@j4df3 j4e04@j4df3) (set! j4e06@i/o-filename-error? (condition-predicate j4df9@j4df4)) (set! j4f77@j4e06@i/o-filename-error? j4e06@i/o-filename-error?) (set! j4e08@i/o-error-filename (condition-accessor j4df9@j4df4 j4e04@j4df3)) (set! j4f78@j4e08@i/o-error-filename j4e08@i/o-error-filename) (set! j4e0a@&i/o-filename-rtd j4df9@j4df4) (set! j4f79@j4e0a@&i/o-filename-rtd j4e0a@&i/o-filename-rtd) (set! j4e0c@&i/o-filename-rcd j4dfd@j4df5) (set! j4f7a@j4e0c@&i/o-filename-rcd j4e0c@&i/o-filename-rcd) (set! j4e12@j4e0d (make-record-type-descriptor '&i/o-file-protection j4df9@j4df4 'j4e10 '#f '#f '#())) (set! j4f7b@j4e12@j4e0d j4e12@j4e0d) (set! j4e14@j4e0f '#f) (set! j4f7c@j4e14@j4e0f j4e14@j4e0f) (set! j4e16@j4e0e (make-record-constructor-descriptor j4e12@j4e0d j4dfd@j4df5 j4e14@j4e0f)) (set! j4f7d@j4e16@j4e0e j4e16@j4e0e) (set! j4e19@p? (record-predicate j4e12@j4e0d)) (set! j4f7e@j4e19@p? j4e19@p?) (set! j4e1b@make-i/o-file-protection-error (record-constructor j4e16@j4e0e)) (set! j4f7f@j4e1b@make-i/o-file-protection-error j4e1b@make-i/o-file-protection-error) (set! j4e1d@i/o-file-protection-error? (condition-predicate j4e12@j4e0d)) (set! j4f80@j4e1d@i/o-file-protection-error? j4e1d@i/o-file-protection-error?) (set! j4e1f@&i/o-file-protection-rtd j4e12@j4e0d) (set! j4f81@j4e1f@&i/o-file-protection-rtd j4e1f@&i/o-file-protection-rtd) (set! j4e21@&i/o-file-protection-rcd j4e16@j4e0e) (set! j4f82@j4e21@&i/o-file-protection-rcd j4e21@&i/o-file-protection-rcd) (set! j4e27@j4e22 (make-record-type-descriptor '&i/o-file-is-read-only j4e12@j4e0d 'j4e25 '#f '#f '#())) (set! j4f83@j4e27@j4e22 j4e27@j4e22) (set! j4e29@j4e24 '#f) (set! j4f84@j4e29@j4e24 j4e29@j4e24) (set! j4e2b@j4e23 (make-record-constructor-descriptor j4e27@j4e22 j4e16@j4e0e j4e29@j4e24)) (set! j4f85@j4e2b@j4e23 j4e2b@j4e23) (set! j4e2e@p? (record-predicate j4e27@j4e22)) (set! j4f86@j4e2e@p? j4e2e@p?) (set! j4e30@make-i/o-file-is-read-only-error (record-constructor j4e2b@j4e23)) (set! j4f87@j4e30@make-i/o-file-is-read-only-error j4e30@make-i/o-file-is-read-only-error) (set! j4e32@i/o-file-is-read-only-error? (condition-predicate j4e27@j4e22)) (set! j4f88@j4e32@i/o-file-is-read-only-error? j4e32@i/o-file-is-read-only-error?) (set! j4e34@&i/o-file-is-read-only-rtd j4e27@j4e22) (set! j4f89@j4e34@&i/o-file-is-read-only-rtd j4e34@&i/o-file-is-read-only-rtd) (set! j4e36@&i/o-file-is-read-only-rcd j4e2b@j4e23) (set! j4f8a@j4e36@&i/o-file-is-read-only-rcd j4e36@&i/o-file-is-read-only-rcd) (set! j4e3c@j4e37 (make-record-type-descriptor '&i/o-file-already-exists j4df9@j4df4 'j4e3a '#f '#f '#())) (set! j4f8b@j4e3c@j4e37 j4e3c@j4e37) (set! j4e3e@j4e39 '#f) (set! j4f8c@j4e3e@j4e39 j4e3e@j4e39) (set! j4e40@j4e38 (make-record-constructor-descriptor j4e3c@j4e37 j4dfd@j4df5 j4e3e@j4e39)) (set! j4f8d@j4e40@j4e38 j4e40@j4e38) (set! j4e43@p? (record-predicate j4e3c@j4e37)) (set! j4f8e@j4e43@p? j4e43@p?) (set! j4e45@make-i/o-file-already-exists-error (record-constructor j4e40@j4e38)) (set! j4f8f@j4e45@make-i/o-file-already-exists-error j4e45@make-i/o-file-already-exists-error) (set! j4e47@i/o-file-already-exists-error? (condition-predicate j4e3c@j4e37)) (set! j4f90@j4e47@i/o-file-already-exists-error? j4e47@i/o-file-already-exists-error?) (set! j4e49@&i/o-file-already-exists-rtd j4e3c@j4e37) (set! j4f91@j4e49@&i/o-file-already-exists-rtd j4e49@&i/o-file-already-exists-rtd) (set! j4e4b@&i/o-file-already-exists-rcd j4e40@j4e38) (set! j4f92@j4e4b@&i/o-file-already-exists-rcd j4e4b@&i/o-file-already-exists-rcd) (set! j4e51@j4e4c (make-record-type-descriptor '&i/o-file-does-not-exist j4df9@j4df4 'j4e4f '#f '#f '#())) (set! j4f93@j4e51@j4e4c j4e51@j4e4c) (set! j4e53@j4e4e '#f) (set! j4f94@j4e53@j4e4e j4e53@j4e4e) (set! j4e55@j4e4d (make-record-constructor-descriptor j4e51@j4e4c j4dfd@j4df5 j4e53@j4e4e)) (set! j4f95@j4e55@j4e4d j4e55@j4e4d) (set! j4e58@p? (record-predicate j4e51@j4e4c)) (set! j4f96@j4e58@p? j4e58@p?) (set! j4e5a@make-i/o-file-does-not-exist-error (record-constructor j4e55@j4e4d)) (set! j4f97@j4e5a@make-i/o-file-does-not-exist-error j4e5a@make-i/o-file-does-not-exist-error) (set! j4e5c@i/o-file-does-not-exist-error? (condition-predicate j4e51@j4e4c)) (set! j4f98@j4e5c@i/o-file-does-not-exist-error? j4e5c@i/o-file-does-not-exist-error?) (set! j4e5e@&i/o-file-does-not-exist-rtd j4e51@j4e4c) (set! j4f99@j4e5e@&i/o-file-does-not-exist-rtd j4e5e@&i/o-file-does-not-exist-rtd) (set! j4e60@&i/o-file-does-not-exist-rcd j4e55@j4e4d) (set! j4f9a@j4e60@&i/o-file-does-not-exist-rcd j4e60@&i/o-file-does-not-exist-rcd) (set! j4e68@j4e63 (make-record-type-descriptor '&i/o-port j4d9d@j4d98 'j4e66 '#f '#f '#((immutable port)))) (set! j4f9b@j4e68@j4e63 j4e68@j4e63) (set! j4e6a@j4e65 '#f) (set! j4f9c@j4e6a@j4e65 j4e6a@j4e65) (set! j4e6c@j4e64 (make-record-constructor-descriptor j4e68@j4e63 j4da1@j4d99 j4e6a@j4e65)) (set! j4f9d@j4e6c@j4e64 j4e6c@j4e64) (set! j4e6f@p? (record-predicate j4e68@j4e63)) (set! j4f9e@j4e6f@p? j4e6f@p?) (set! j4e71@make-i/o-port-error (record-constructor j4e6c@j4e64)) (set! j4f9f@j4e71@make-i/o-port-error j4e71@make-i/o-port-error) (set! j4e73@j4e62 (record-accessor j4e68@j4e63 '0)) (set! j4fa0@j4e73@j4e62 j4e73@j4e62) (set! j4e75@i/o-port-error? (condition-predicate j4e68@j4e63)) (set! j4fa1@j4e75@i/o-port-error? j4e75@i/o-port-error?) (set! j4e77@i/o-error-port (condition-accessor j4e68@j4e63 j4e73@j4e62)) (set! j4fa2@j4e77@i/o-error-port j4e77@i/o-error-port) (set! j4e79@&i/o-port-rtd j4e68@j4e63) (set! j4fa3@j4e79@&i/o-port-rtd j4e79@&i/o-port-rtd) (set! j4e7b@&i/o-port-rcd j4e6c@j4e64) (set! j4fa4@j4e7b@&i/o-port-rcd j4e7b@&i/o-port-rcd) (set! j4e81@j4e7c (make-record-type-descriptor '&i/o-decoding j4e68@j4e63 'j4e7f '#f '#f '#())) (set! j4fa5@j4e81@j4e7c j4e81@j4e7c) (set! j4e83@j4e7e '#f) (set! j4fa6@j4e83@j4e7e j4e83@j4e7e) (set! j4e85@j4e7d (make-record-constructor-descriptor j4e81@j4e7c j4e6c@j4e64 j4e83@j4e7e)) (set! j4fa7@j4e85@j4e7d j4e85@j4e7d) (set! j4e88@p? (record-predicate j4e81@j4e7c)) (set! j4fa8@j4e88@p? j4e88@p?) (set! j4e8a@make-i/o-decoding-error (record-constructor j4e85@j4e7d)) (set! j4fa9@j4e8a@make-i/o-decoding-error j4e8a@make-i/o-decoding-error) (set! j4e8c@i/o-decoding-error? (condition-predicate j4e81@j4e7c)) (set! j4faa@j4e8c@i/o-decoding-error? j4e8c@i/o-decoding-error?) (set! j4e8e@&i/o-decoding-rtd j4e81@j4e7c) (set! j4fab@j4e8e@&i/o-decoding-rtd j4e8e@&i/o-decoding-rtd) (set! j4e90@&i/o-decoding-rcd j4e85@j4e7d) (set! j4fac@j4e90@&i/o-decoding-rcd j4e90@&i/o-decoding-rcd) (set! j4e98@j4e93 (make-record-type-descriptor '&i/o-encoding j4e68@j4e63 'j4e96 '#f '#f '#((immutable char)))) (set! j4fad@j4e98@j4e93 j4e98@j4e93) (set! j4e9a@j4e95 '#f) (set! j4fae@j4e9a@j4e95 j4e9a@j4e95) (set! j4e9c@j4e94 (make-record-constructor-descriptor j4e98@j4e93 j4e6c@j4e64 j4e9a@j4e95)) (set! j4faf@j4e9c@j4e94 j4e9c@j4e94) (set! j4e9f@p? (record-predicate j4e98@j4e93)) (set! j4fb0@j4e9f@p? j4e9f@p?) (set! j4ea1@make-i/o-encoding-error (record-constructor j4e9c@j4e94)) (set! j4fb1@j4ea1@make-i/o-encoding-error j4ea1@make-i/o-encoding-error) (set! j4ea3@j4e92 (record-accessor j4e98@j4e93 '0)) (set! j4fb2@j4ea3@j4e92 j4ea3@j4e92) (set! j4ea5@i/o-encoding-error? (condition-predicate j4e98@j4e93)) (set! j4fb3@j4ea5@i/o-encoding-error? j4ea5@i/o-encoding-error?) (set! j4ea7@i/o-encoding-error-char (condition-accessor j4e98@j4e93 j4ea3@j4e92)) (set! j4fb4@j4ea7@i/o-encoding-error-char j4ea7@i/o-encoding-error-char) (set! j4ea9@&i/o-encoding-rtd j4e98@j4e93) (set! j4fb5@j4ea9@&i/o-encoding-rtd j4ea9@&i/o-encoding-rtd) (set! j4eab@&i/o-encoding-rcd j4e9c@j4e94) (set! j4fb6@j4eab@&i/o-encoding-rcd j4eab@&i/o-encoding-rcd) (set! j4eb1@j4eac (make-record-type-descriptor '&no-infinities j4d3d@j4d38 'j4eaf '#f '#f '#())) (set! j4fb7@j4eb1@j4eac j4eb1@j4eac) (set! j4eb3@j4eae '#f) (set! j4fb8@j4eb3@j4eae j4eb3@j4eae) (set! j4eb5@j4ead (make-record-constructor-descriptor j4eb1@j4eac j4d41@j4d39 j4eb3@j4eae)) (set! j4fb9@j4eb5@j4ead j4eb5@j4ead) (set! j4eb8@p? (record-predicate j4eb1@j4eac)) (set! j4fba@j4eb8@p? j4eb8@p?) (set! j4eba@make-no-infinities-violation (record-constructor j4eb5@j4ead)) (set! j4fbb@j4eba@make-no-infinities-violation j4eba@make-no-infinities-violation) (set! j4ebc@no-infinities-violation? (condition-predicate j4eb1@j4eac)) (set! j4fbc@j4ebc@no-infinities-violation? j4ebc@no-infinities-violation?) (set! j4ebe@&no-infinities-rtd j4eb1@j4eac) (set! j4fbd@j4ebe@&no-infinities-rtd j4ebe@&no-infinities-rtd) (set! j4ec0@&no-infinities-rcd j4eb5@j4ead) (set! j4fbe@j4ec0@&no-infinities-rcd j4ec0@&no-infinities-rcd) (set! j4ec6@j4ec1 (make-record-type-descriptor '&no-nans j4d3d@j4d38 'j4ec4 '#f '#f '#())) (set! j4fbf@j4ec6@j4ec1 j4ec6@j4ec1) (set! j4ec8@j4ec3 '#f) (set! j4fc0@j4ec8@j4ec3 j4ec8@j4ec3) (set! j4eca@j4ec2 (make-record-constructor-descriptor j4ec6@j4ec1 j4d41@j4d39 j4ec8@j4ec3)) (set! j4fc1@j4eca@j4ec2 j4eca@j4ec2) (set! j4ecd@p? (record-predicate j4ec6@j4ec1)) (set! j4fc2@j4ecd@p? j4ecd@p?) (set! j4ecf@make-no-nans-violation (record-constructor j4eca@j4ec2)) (set! j4fc3@j4ecf@make-no-nans-violation j4ecf@make-no-nans-violation) (set! j4ed1@no-nans-violation? (condition-predicate j4ec6@j4ec1)) (set! j4fc4@j4ed1@no-nans-violation? j4ed1@no-nans-violation?) (set! j4ed3@&no-nans-rtd j4ec6@j4ec1) (set! j4fc5@j4ed3@&no-nans-rtd j4ed3@&no-nans-rtd) (set! j4ed5@&no-nans-rcd j4eca@j4ec2) (set! j4fc6@j4ed5@&no-nans-rcd j4ed5@&no-nans-rcd) (void))
(begin (begin (j2a5c@j2a11@current-primitive-locations (lambda (j5491@x) (let ((j5493@t (assq j5491@x '((&no-nans-rcd . j4fc6@j4ed5@&no-nans-rcd) (&no-nans-rtd . j4fc5@j4ed3@&no-nans-rtd) (&no-infinities-rcd . j4fbe@j4ec0@&no-infinities-rcd) (&no-infinities-rtd . j4fbd@j4ebe@&no-infinities-rtd) (&i/o-encoding-rcd . j4fb6@j4eab@&i/o-encoding-rcd) (&i/o-encoding-rtd . j4fb5@j4ea9@&i/o-encoding-rtd) (&i/o-decoding-rcd . j4fac@j4e90@&i/o-decoding-rcd) (&i/o-decoding-rtd . j4fab@j4e8e@&i/o-decoding-rtd) (&i/o-port-rcd . j4fa4@j4e7b@&i/o-port-rcd) (&i/o-port-rtd . j4fa3@j4e79@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . j4f9a@j4e60@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . j4f99@j4e5e@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . j4f92@j4e4b@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . j4f91@j4e49@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . j4f8a@j4e36@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . j4f89@j4e34@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . j4f82@j4e21@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . j4f81@j4e1f@&i/o-file-protection-rtd) (&i/o-filename-rcd . j4f7a@j4e0c@&i/o-filename-rcd) (&i/o-filename-rtd . j4f79@j4e0a@&i/o-filename-rtd) (&i/o-invalid-position-rcd . j4f70@j4df1@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . j4f6f@j4def@&i/o-invalid-position-rtd) (&i/o-write-rcd . j4f66@j4dd6@&i/o-write-rcd) (&i/o-write-rtd . j4f65@j4dd4@&i/o-write-rtd) (&i/o-read-rcd . j4f5e@j4dc1@&i/o-read-rcd) (&i/o-read-rtd . j4f5d@j4dbf@&i/o-read-rtd) (&i/o-rcd . j4f56@j4dac@&i/o-rcd) (&i/o-rtd . j4f55@j4daa@&i/o-rtd) (&undefined-rcd . j4f4e@j4d97@&undefined-rcd) (&undefined-rtd . j4f4d@j4d95@&undefined-rtd) (&syntax-rcd . j4f46@j4d82@&syntax-rcd) (&syntax-rtd . j4f45@j4d80@&syntax-rtd) (&lexical-rcd . j4f3a@j4d61@&lexical-rcd) (&lexical-rtd . j4f39@j4d5f@&lexical-rtd) (&implementation-restriction-rcd . j4f32@j4d4c@&implementation-restriction-rcd) (&implementation-restriction-rtd . j4f31@j4d4a@&implementation-restriction-rtd) (&non-continuable-rcd . j4f2a@j4d37@&non-continuable-rcd) (&non-continuable-rtd . j4f29@j4d35@&non-continuable-rtd) (&who-rcd . j4f22@j4d22@&who-rcd) (&who-rtd . j4f21@j4d20@&who-rtd) (&irritants-rcd . j4f18@j4d07@&irritants-rcd) (&irritants-rtd . j4f17@j4d05@&irritants-rtd) (&assertion-rcd . j4f0e@j4cec@&assertion-rcd) (&assertion-rtd . j4f0d@j4cea@&assertion-rtd) (&violation-rcd . j4f06@j4cd7@&violation-rcd) (&violation-rtd . j4f05@j4cd5@&violation-rtd) (&error-rcd . j4efe@j4cc2@&error-rcd) (&error-rtd . j4efd@j4cc0@&error-rtd) (&serious-rcd . j4ef6@j4cad@&serious-rcd) (&serious-rtd . j4ef5@j4cab@&serious-rtd) (&warning-rcd . j4eee@j4c98@&warning-rcd) (&warning-rtd . j4eed@j4c96@&warning-rtd) (&message-rcd . j4ee6@j4c83@&message-rcd) (&message-rtd . j4ee5@j4c81@&message-rtd) (&condition-rcd . j4edc@j4c24@&condition-rcd) (&condition-rtd . j4edb@j4c22@&condition-rtd) (syntax-error . j4bfe@j31a2@syntax-error) (syntax-dispatch . j4b9c@j30c6@syntax-dispatch) (load . j513b@j4fe6@load) (interaction-environment . j4c07@j31b4@interaction-environment) (library-path . j2cc3@j2aff@library-path) (mosh-cache-dir . j2a0a@j28e9@mosh-cache-dir) (make-parameter . j2a09@j28e7@make-parameter) (make-variable-transformer . j4b59@j2ef1@make-variable-transformer) (identifier? . j4c01@j31a8@identifier?) (generate-temporaries . j4bf7@j3194@generate-temporaries) (free-identifier=? . j4bf8@j3196@free-identifier=?) (syntax->datum . j4c03@j31ac@syntax->datum) (datum->syntax . j4c02@j31aa@datum->syntax) (bound-identifier=? . j4bf9@j3198@bound-identifier=?) (make-i/o-write-error . j4f63@j4dd0@make-i/o-write-error) (make-i/o-read-error . j4f5b@j4dbb@make-i/o-read-error) (make-i/o-port-error . j4f9f@j4e71@make-i/o-port-error) (make-i/o-invalid-position-error . j4f6b@j4de7@make-i/o-invalid-position-error) (make-i/o-filename-error . j4f75@j4e02@make-i/o-filename-error) (make-i/o-file-protection-error . j4f7f@j4e1b@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . j4f87@j4e30@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . j4f97@j4e5a@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . j4f8f@j4e45@make-i/o-file-already-exists-error) (make-i/o-error . j4f53@j4da6@make-i/o-error) (make-i/o-encoding-error . j4fb1@j4ea1@make-i/o-encoding-error) (make-i/o-decoding-error . j4fa9@j4e8a@make-i/o-decoding-error) (i/o-write-error? . j4f64@j4dd2@i/o-write-error?) (i/o-read-error? . j4f5c@j4dbd@i/o-read-error?) (i/o-port-error? . j4fa1@j4e75@i/o-port-error?) (i/o-invalid-position-error? . j4f6d@j4deb@i/o-invalid-position-error?) (i/o-filename-error? . j4f77@j4e06@i/o-filename-error?) (i/o-file-protection-error? . j4f80@j4e1d@i/o-file-protection-error?) (i/o-file-is-read-only-error? . j4f88@j4e32@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . j4f98@j4e5c@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . j4f90@j4e47@i/o-file-already-exists-error?) (i/o-error? . j4f54@j4da8@i/o-error?) (i/o-error-position . j4f6e@j4ded@i/o-error-position) (i/o-error-port . j4fa2@j4e77@i/o-error-port) (i/o-error-filename . j4f78@j4e08@i/o-error-filename) (i/o-encoding-error? . j4fb3@j4ea5@i/o-encoding-error?) (i/o-encoding-error-char . j4fb4@j4ea7@i/o-encoding-error-char) (i/o-decoding-error? . j4faa@j4e8c@i/o-decoding-error?) (scheme-report-environment . j4bee@j3182@scheme-report-environment) (null-environment . j4bed@j3180@null-environment) (command-line . j5138@j4fe0@command-line) (eval . j4bf0@j3186@eval) (environment . j4bec@j317e@environment) (who-condition? . j4f1f@j4d1c@who-condition?) (warning? . j4eec@j4c94@warning?) (violation? . j4f04@j4cd3@violation?) (undefined-violation? . j4f4c@j4d93@undefined-violation?) (syntax-violation? . j4f42@j4d7a@syntax-violation?) (syntax-violation-subform . j4f44@j4d7e@syntax-violation-subform) (syntax-violation-form . j4f43@j4d7c@syntax-violation-form) (syntax-violation . j4c00@j31a6@syntax-violation) (serious-condition? . j4ef4@j4ca9@serious-condition?) (non-continuable-violation? . j4f28@j4d33@non-continuable-violation?) (message-condition? . j4ee3@j4c7d@message-condition?) (make-who-condition . j4f1d@j4d18@make-who-condition) (make-warning . j4eeb@j4c92@make-warning) (make-violation . j4f03@j4cd1@make-violation) (make-undefined-violation . j4f4b@j4d91@make-undefined-violation) (make-syntax-violation . j4f3f@j4d74@make-syntax-violation) (make-serious-condition . j4ef3@j4ca7@make-serious-condition) (make-non-continuable-violation . j4f27@j4d31@make-non-continuable-violation) (make-message-condition . j4ee1@j4c79@make-message-condition) (make-lexical-violation . j4f37@j4d5b@make-lexical-violation) (make-irritants-condition . j4f13@j4cfd@make-irritants-condition) (make-implementation-restriction-violation . j4f2f@j4d46@make-implementation-restriction-violation) (make-error . j4efb@j4cbc@make-error) (make-assertion-violation . j4f0b@j4ce6@make-assertion-violation) (lexical-violation? . j4f38@j4d5d@lexical-violation?) (irritants-condition? . j4f15@j4d01@irritants-condition?) (implementation-restriction-violation? . j4f30@j4d48@implementation-restriction-violation?) (error? . j4efc@j4cbe@error?) (condition-who . j4f20@j4d1e@condition-who) (condition-message . j4ee4@j4c7f@condition-message) (condition-irritants . j4f16@j4d03@condition-irritants) (assertion-violation? . j4f0c@j4ce8@assertion-violation?) (no-nans-violation? . j4fc4@j4ed1@no-nans-violation?) (no-infinities-violation? . j4fbc@j4ebc@no-infinities-violation?) (make-no-nans-violation . j4fc3@j4ecf@make-no-nans-violation) (make-no-infinities-violation . j4fbb@j4eba@make-no-infinities-violation) (assertion-error . j4bfd@j31a0@assertion-error))))) (if j5493@t (cdr j5493@t) '#f)))) (j2cd3@j2b1f@install-library 'j546e '(mosh interaction) '() '() '() '() '((regexp? . j5466) (alist->eq-hash-table . j5462) (format . j545f) (string-split . j5454) (call-process . j544e) (set-current-directory! . j544a) (expand-path . j5449) (current-directory . j5448) (%spawn . j5447) (%waitpid . j5446) (simple-struct-name . j5445) (simple-struct-set! . j5444) (simple-struct-ref . j5443) (make-simple-struct . j5442) (simple-struct? . j5441) (pointer-ref-c-int64 . j5440) (pointer-ref-c-int32 . j543f) (pointer-ref-c-int16 . j543e) (pointer-ref-c-int8 . j543d) (pointer-ref-c-uint64 . j543c) (pointer-ref-c-uint32 . j543b) (pointer-ref-c-uint16 . j543a) (pointer-ref-c-uint8 . j5439) (pointer-set-c-uint64! . j5438) (pointer-set-c-uint32! . j5437) (pointer-set-c-uint16! . j5436) (pointer-set-c-uint8! . j5435) (pointer-set-c-int64! . j5434) (pointer-set-c-int32! . j5433) (pointer-set-c-int16! . j5432) (pointer-set-c-int8! . j5431) (pointer-set-c-pointer! . j5430) (pointer-set-c-double! . j542f) (pointer-set-c-float! . j542e) (pointer-set-c-long-long! . j542d) (pointer-set-c-long! . j542c) (pointer-set-c-int! . j542b) (pointer-set-c-short! . j542a) (pointer-set-c-char! . j5429) (pointer-ref-c-pointer . j5428) (pointer-ref-c-double . j5427) (pointer-ref-c-float . j5426) (pointer-ref-c-unsigned-long-long . j5425) (pointer-ref-c-signed-long-long . j5424) (pointer-ref-c-unsigned-long . j5423) (pointer-ref-c-signed-long . j5422) (pointer-ref-c-unsigned-int . j5421) (pointer-ref-c-signed-int . j5420) (pointer-ref-c-unsigned-short . j541f) (pointer-ref-c-signed-short . j541e) (pointer-ref-c-unsigned-char . j541d) (pointer-ref-c-signed-char . j541c) (pointer->integer . j541b) (integer->pointer . j541a) (pointer? . j5419) (shared-errno . j5418) (%ffi-supported? . j5413) (%ffi-pointer->string . j5412) (%ffi-call . j5411) (%ffi-lookup . j5410) (%ffi-open . j540f) (null-terminated-utf8->string . j540e) (null-terminated-bytevector->string . j540d) (%fork . j540c) (%pipe . j540b) (p . j540a) (whereis . j53ee) (register . j53ed) (vm-join! . j53ec) (vm-set-value! . j53eb) (vm? . j53ea) (main-vm? . j53e9) (vm-eval . j53e8) (vm-self . j53e7) (vm-start! . j53e6) (make-vm . j53e5) (mutex-try-lock! . j53e4) (mutex-unlock! . j53e3) (mutex-lock! . j53e2) (mutex? . j53e1) (make-mutex . j53e0) (condition-variable-notify-all! . j53df) (condition-variable-notify! . j53de) (condition-variable-wait! . j53dd) (make-condition-variable . j53dc) (string-upcase . j53c4) (string-titlecase . j53c3) (string-normalize-nfkd . j53c2) (string-normalize-nfkc . j53c1) (string-normalize-nfd . j53c0) (string-normalize-nfc . j53bf) (string-foldcase . j53be) (string-downcase . j53bd) (string-ci>? . j53bc) (string-ci>=? . j53bb) (string-ci=? . j53ba) (string-ci<? . j53b9) (string-ci<=? . j53b8) (char-whitespace? . j53b7) (char-upper-case? . j53b6) (char-title-case? . j53b5) (char-numeric? . j53b4) (char-lower-case? . j53b3) (char-general-category . j53b2) (char-upcase . j53b1) (char-titlecase . j53b0) (char-foldcase . j53af) (char-downcase . j53ae) (char-ci>? . j53ad) (char-ci>=? . j53ac) (char-ci=? . j53ab) (char-ci<? . j53aa) (char-ci<=? . j53a9) (char-alphabetic? . j53a8) (make-variable-transformer . j2ef0) (identifier? . j31a7) (generate-temporaries . j3193) (free-identifier=? . j3195) (syntax->datum . j31ab) (datum->syntax . j31a9) (bound-identifier=? . j3197) (record-type-descriptor? . j53a7) (record-predicate . j53a6) (record-mutator . j53a5) (record-constructor . j53a4) (record-accessor . j53a3) (make-record-type-descriptor . j53a2) (make-record-constructor-descriptor . j53a1) (record? . j53a0) (record-type-uid . j539f) (record-type-sealed? . j539e) (record-type-parent . j539d) (record-type-opaque? . j539c) (record-type-name . j539b) (record-type-generative? . j539a) (record-type-field-names . j5399) (record-rtd . j5398) (record-field-mutable? . j5397) (delete-file . j5396) (file-exists? . j5395) (vector-sort! . j5394) (vector-sort . j5393) (list-sort . j5392) (symbol-hash . j5391) (string-ci-hash . j5390) (string-hash . j538f) (equal-hash . j538e) (hashtable-equivalence-function . j538d) (make-hashtable . j538c) (hashtable-hash-function . j538b) (make-eqv-hashtable . j538a) (make-eq-hashtable . j5389) (hashtable? . j5388) (hashtable-update! . j5387) (hashtable-size . j5386) (hashtable-set! . j5385) (hashtable-ref . j5384) (hashtable-mutable? . j5383) (hashtable-keys . j5382) (hashtable-entries . j5381) (hashtable-delete! . j5380) (hashtable-copy . j537f) (hashtable-contains? . j537e) (hashtable-clear! . j537d) (call-with-output-file . j537c) (call-with-input-file . j537b) (write-char . j537a) (write . j5379) (with-output-to-file . j5378) (with-input-from-file . j5377) (read-char . j5376) (read . j5375) (peek-char . j5374) (open-output-file . j5373) (open-input-file . j5372) (newline . j5371) (display . j5370) (close-output-port . j536f) (close-input-port . j536e) (eof-object? . j536d) (eof-object . j536c) (current-error-port . j536b) (current-output-port . j536a) (current-input-port . j5369) (output-port? . j5368) (input-port? . j5367) (utf-8-codec . j5366) (utf-16-codec . j5365) (transcoder-error-handling-mode . j5364) (transcoder-eol-style . j5363) (transcoder-codec . j5362) (transcoded-port . j5361) (textual-port? . j5360) (string->bytevector . j535f) (standard-output-port . j535e) (standard-input-port . j535d) (standard-error-port . j535c) (set-port-position! . j535b) (put-u8 . j535a) (put-string . j5359) (put-datum . j5358) (put-char . j5357) (put-bytevector . j5356) (port? . j5355) (port-transcoder . j5354) (port-position . j5353) (port-has-set-port-position!? . j5352) (port-has-port-position? . j5351) (port-eof? . j5350) (output-port-buffer-mode . j534f) (open-string-output-port . j534e) (open-string-input-port . j534d) (open-file-output-port . j534c) (open-file-input/output-port . j534b) (open-file-input-port . j534a) (open-bytevector-output-port . j5349) (open-bytevector-input-port . j5348) (native-transcoder . j5347) (native-eol-style . j5346) (make-transcoder . j5345) (latin-1-codec . j5344) (make-i/o-write-error . j4dcf) (make-i/o-read-error . j4dba) (make-i/o-port-error . j4e70) (make-i/o-invalid-position-error . j4de6) (make-i/o-filename-error . j4e01) (make-i/o-file-protection-error . j4e1a) (make-i/o-file-is-read-only-error . j4e2f) (make-i/o-file-does-not-exist-error . j4e59) (make-i/o-file-already-exists-error . j4e44) (make-i/o-error . j4da5) (make-i/o-encoding-error . j4ea0) (make-i/o-decoding-error . j4e89) (make-custom-textual-output-port . j5343) (make-custom-textual-input/output-port . j5342) (make-custom-textual-input-port . j5341) (make-custom-binary-output-port . j5340) (make-custom-binary-input/output-port . j533f) (make-custom-binary-input-port . j533e) (make-bytevector . j533d) (lookahead-u8 . j533c) (lookahead-char . j533b) (i/o-write-error? . j4dd1) (i/o-read-error? . j4dbc) (i/o-port-error? . j4e74) (i/o-invalid-position-error? . j4dea) (i/o-filename-error? . j4e05) (i/o-file-protection-error? . j4e1c) (i/o-file-is-read-only-error? . j4e31) (i/o-file-does-not-exist-error? . j4e5b) (i/o-file-already-exists-error? . j4e46) (i/o-error? . j4da7) (i/o-error-position . j4dec) (i/o-error-port . j4e76) (i/o-error-filename . j4e07) (i/o-encoding-error? . j4ea4) (i/o-encoding-error-char . j4ea6) (i/o-decoding-error? . j4e8b) (get-u8 . j533a) (get-string-n! . j5339) (get-string-n . j5338) (get-string-all . j5337) (get-line . j5336) (get-datum . j5335) (get-char . j5334) (get-bytevector-some . j5333) (get-bytevector-n! . j5332) (get-bytevector-n . j5331) (get-bytevector-all . j5330) (flush-output-port . j532f) (close-port . j532e) (exit . j5326) (command-line . j4fdf) (string-fill! . j5325) (string-set! . j5324) (set-cdr! . j5323) (set-car! . j5322) (remove . j5321) (remv . j5320) (remp . j531f) (remq . j531e) (partition . j531d) (memv . j531c) (memq . j531b) (memp . j531a) (member . j5319) (exists . j5318) (for-all . j5317) (fold-right . j5316) (fold-left . j5315) (find . j5314) (filter . j5313) (cons* . j5312) (assv . j5311) (assq . j5310) (assp . j530f) (assoc . j530e) (call-with-string-output-port . j530d) (call-with-port . j530c) (call-with-bytevector-output-port . j530b) (bytevector->string . j530a) (buffer-mode? . j5309) (binary-port? . j5308) (with-exception-handler . j5307) (raise-continuable . j5306) (raise . j5305) (eval . j3185) (environment . j317d) (make-enumeration . j5304) (enum-set=? . j5303) (enum-set-universe . j5302) (enum-set-union . j5301) (enum-set-subset? . j5300) (enum-set-projection . j52ff) (enum-set-member? . j52fe) (enum-set-intersection . j52fd) (enum-set-indexer . j52fc) (enum-set-difference . j52fb) (enum-set-constructor . j52fa) (enum-set-complement . j52f9) (enum-set->list . j52f8) (who-condition? . j4d1b) (warning? . j4c93) (violation? . j4cd2) (undefined-violation? . j4d92) (syntax-violation? . j4d79) (syntax-violation-subform . j4d7d) (syntax-violation-form . j4d7b) (syntax-violation . j31a5) (simple-conditions . j52f7) (serious-condition? . j4ca8) (non-continuable-violation? . j4d32) (message-condition? . j4c7c) (make-who-condition . j4d17) (make-warning . j4c91) (make-violation . j4cd0) (make-undefined-violation . j4d90) (make-syntax-violation . j4d73) (make-serious-condition . j4ca6) (make-non-continuable-violation . j4d30) (make-message-condition . j4c78) (make-lexical-violation . j4d5a) (make-irritants-condition . j4cfc) (make-implementation-restriction-violation . j4d45) (make-error . j4cbb) (make-assertion-violation . j4ce5) (lexical-violation? . j4d5c) (irritants-condition? . j4d00) (implementation-restriction-violation? . j4d47) (error? . j4cbd) (condition-who . j4d1d) (condition-predicate . j52f6) (condition-message . j4c7e) (condition-irritants . j4d02) (condition-accessor . j52f5) (condition . j52f4) (assertion-violation? . j4ce7) (condition? . j52f3) (utf32->string . j52f2) (utf16->string . j52f1) (utf8->string . j52f0) (uint-list->bytevector . j52ef) (u8-list->bytevector . j52ee) (string->utf8 . j52ed) (string->utf32 . j52ec) (string->utf16 . j52eb) (sint-list->bytevector . j52ea) (native-endianness . j52e9) (bytevector? . j52e8) (bytevector=? . j52e7) (bytevector-uint-set! . j52e6) (bytevector-uint-ref . j52e5) (bytevector-u8-set! . j52e4) (bytevector-u8-ref . j52e3) (bytevector-u64-set! . j52e2) (bytevector-u64-ref . j52e1) (bytevector-u64-native-set! . j52e0) (bytevector-u64-native-ref . j52df) (bytevector-u32-set! . j52de) (bytevector-u32-ref . j52dd) (bytevector-u32-native-set! . j52dc) (bytevector-u32-native-ref . j52db) (bytevector-u16-set! . j52da) (bytevector-u16-ref . j52d9) (bytevector-u16-native-set! . j52d8) (bytevector-u16-native-ref . j52d7) (bytevector-sint-set! . j52d6) (bytevector-sint-ref . j52d5) (bytevector-s8-set! . j52d4) (bytevector-s8-ref . j52d3) (bytevector-s64-set! . j52d2) (bytevector-s64-ref . j52d1) (bytevector-s64-native-set! . j52d0) (bytevector-s64-native-ref . j52cf) (bytevector-s32-set! . j52ce) (bytevector-s32-ref . j52cd) (bytevector-s32-native-set! . j52cc) (bytevector-s32-native-ref . j52cb) (bytevector-s16-set! . j52ca) (bytevector-s16-ref . j52c9) (bytevector-s16-native-set! . j52c8) (bytevector-s16-native-ref . j52c7) (bytevector-length . j52c6) (bytevector-ieee-single-ref . j52c5) (bytevector-ieee-single-set! . j52c4) (bytevector-ieee-single-native-set! . j52c3) (bytevector-ieee-single-native-ref . j52c2) (bytevector-ieee-double-set! . j52c1) (bytevector-ieee-double-ref . j52c0) (bytevector-ieee-double-native-set! . j52bf) (bytevector-ieee-double-native-ref . j52be) (bytevector-fill! . j52bd) (bytevector-copy! . j52bc) (bytevector-copy . j52bb) (bytevector->uint-list . j52ba) (bytevector->u8-list . j52b9) (bytevector->sint-list . j52b8) (no-nans-violation? . j4ed0) (no-infinities-violation? . j4ebb) (make-no-nans-violation . j4ece) (make-no-infinities-violation . j4eb9) (real->flonum . j52b7) (flzero? . j52b6) (fltruncate . j52b5) (fltan . j52b4) (flsqrt . j52b3) (flsin . j52b2) (flround . j52b1) (flpositive? . j52b0) (flonum? . j52af) (flodd? . j52ae) (flnumerator . j52ad) (flnegative? . j52ac) (flnan? . j52ab) (flmod0 . j52aa) (flmod . j52a9) (flmin . j52a8) (flmax . j52a7) (fllog . j52a6) (flinteger? . j52a5) (flinfinite? . j52a4) (flfloor . j52a3) (flfinite? . j52a2) (flexpt . j52a1) (flexp . j52a0) (fleven? . j529f) (fldiv0-and-mod0 . j529e) (fldiv0 . j529d) (fldiv-and-mod . j529c) (fldiv . j529b) (fldenominator . j529a) (flcos . j5299) (flceiling . j5298) (flatan . j5297) (flasin . j5296) (flacos . j5295) (flabs . j5294) (fl>? . j5293) (fl>=? . j5292) (fl=? . j5291) (fl<? . j5290) (fl<=? . j528f) (fl/ . j528e) (fl- . j528d) (fl+ . j528c) (fl* . j528b) (fixnum->flonum . j528a) (fxzero? . j5289) (fxxor . j5288) (fxrotate-bit-field . j5287) (fxreverse-bit-field . j5286) (fxpositive? . j5285) (fxodd? . j5284) (fxnot . j5283) (fxnegative? . j5282) (fxmod0 . j5281) (fxmod . j5280) (fxmin . j527f) (fxmax . j527e) (fxlength . j527d) (fxior . j527c) (fxif . j527b) (fxfirst-bit-set . j527a) (fxeven? . j5279) (fxdiv0-and-mod0 . j5278) (fxdiv0 . j5277) (fxdiv-and-mod . j5276) (fxdiv . j5275) (fxcopy-bit-field . j5274) (fxcopy-bit . j5273) (fxbit-set? . j5272) (fxbit-field . j5271) (fxbit-count . j5270) (fxarithmetic-shift-right . j526f) (fxarithmetic-shift-left . j526e) (fxarithmetic-shift . j526d) (fxand . j526c) (fx>? . j526b) (fx>=? . j526a) (fx=? . j5269) (fx<? . j5268) (fx<=? . j5267) (fx-/carry . j5266) (fx- . j5265) (fx+/carry . j5264) (fx+ . j5263) (fx*/carry . j5262) (fx* . j5261) (greatest-fixnum . j5260) (least-fixnum . j525f) (fixnum-width . j525e) (fixnum? . j525d) (bitwise-rotate-bit-field . j525c) (bitwise-reverse-bit-field . j525b) (bitwise-length . j525a) (bitwise-if . j5259) (bitwise-first-bit-set . j5258) (bitwise-copy-bit-field . j5257) (bitwise-copy-bit . j5256) (bitwise-bit-set? . j5255) (bitwise-bit-field . j5254) (bitwise-bit-count . j5253) (bitwise-xor . j5252) (bitwise-ior . j5251) (bitwise-and . j5250) (bitwise-not . j524f) (bitwise-arithmetic-shift-right . j524e) (bitwise-arithmetic-shift-left . j524d) (bitwise-arithmetic-shift . j524c) (zero? . j524b) (vector? . j524a) (vector-set! . j5249) (vector-ref . j5248) (vector-map . j5247) (vector-length . j5246) (vector-for-each . j5245) (vector-fill! . j5244) (vector->list . j5243) (vector . j5242) (values . j5241) (truncate . j5240) (tan . j523f) (symbol? . j523e) (symbol=? . j523d) (symbol->string . j523c) (substring . j523b) (string? . j523a) (string>? . j5239) (string>=? . j5238) (string=? . j5237) (string<? . j5236) (string<=? . j5235) (string-ref . j5234) (string-length . j5233) (string-for-each . j5232) (string-copy . j5231) (string-append . j5230) (string->symbol . j522f) (string->number . j522e) (string->list . j522d) (string . j522c) (sqrt . j522b) (sin . j522a) (round . j5229) (reverse . j5228) (real? . j5227) (real-valued? . j5226) (real-part . j5225) (rationalize . j5224) (rational? . j5223) (rational-valued? . j5222) (procedure? . j5221) (positive? . j5220) (pair? . j521f) (odd? . j521e) (numerator . j521d) (number? . j521c) (number->string . j521b) (null? . j521a) (not . j5219) (negative? . j5218) (nan? . j5217) (min . j5216) (max . j5215) (map . j5214) (make-vector . j5213) (make-string . j5212) (make-rectangular . j5211) (make-polar . j5210) (magnitude . j520f) (log . j520e) (list? . j520d) (list-tail . j520c) (list-ref . j520b) (list->vector . j520a) (list->string . j5209) (list . j5208) (length . j5207) (lcm . j5206) (integer? . j5205) (integer-valued? . j5204) (integer->char . j5203) (infinite? . j5202) (inexact? . j5201) (inexact . j5200) (imag-part . j51ff) (gcd . j51fe) (for-each . j51fd) (floor . j51fc) (finite? . j51fb) (expt . j51fa) (exp . j51f9) (exact? . j51f8) (exact-integer-sqrt . j51f7) (exact . j51f6) (even? . j51f5) (error . j51f4) (eqv? . j51f3) (equal? . j51f2) (eq? . j51f1) (dynamic-wind . j51f0) (div0-and-mod0 . j51ef) (mod0 . j51ee) (div0 . j51ed) (div-and-mod . j51ec) (mod . j51eb) (div . j51ea) (denominator . j51e9) (cos . j51e8) (cons . j51e7) (complex? . j51e6) (char? . j51e5) (char>? . j51e4) (char>=? . j51e3) (char=? . j51e2) (char<? . j51e1) (char<=? . j51e0) (char->integer . j51df) (ceiling . j51de) (call-with-values . j51dd) (call/cc . j51dc) (call-with-current-continuation . j51db) (cddddr . j51da) (cdddar . j51d9) (cddadr . j51d8) (cddaar . j51d7) (cdaddr . j51d6) (cdadar . j51d5) (cdaadr . j51d4) (cdaaar . j51d3) (cadddr . j51d2) (caddar . j51d1) (cadadr . j51d0) (cadaar . j51cf) (caaddr . j51ce) (caadar . j51cd) (caaadr . j51cc) (caaaar . j51cb) (cdddr . j51ca) (cddar . j51c9) (cdadr . j51c8) (cdaar . j51c7) (caddr . j51c6) (cadar . j51c5) (caadr . j51c4) (caaar . j51c3) (cddr . j51c2) (cdar . j51c1) (cadr . j51c0) (caar . j51bf) (cdr . j51be) (car . j51bd) (boolean? . j51bc) (boolean=? . j51bb) (atan . j51ba) (assertion-violation . j51b9) (asin . j51b8) (apply . j51b7) (append . j51b6) (angle . j51b5) (acos . j51b4) (abs . j51b3) (/ . j51b2) (* . j51b1) (- . j51b0) (+ . j51af) (>= . j51ae) (> . j51ad) (= . j51ac) (<= . j51ab) (< . j51aa) (library . j51a9) (&no-nans . j51a8) (&no-infinities . j51a7) (&i/o-encoding . j51a6) (&i/o-decoding . j51a5) (&i/o-port . j51a4) (&i/o-file-does-not-exist . j51a3) (&i/o-file-already-exists . j51a2) (&i/o-file-is-read-only . j51a1) (&i/o-file-protection . j51a0) (&i/o-filename . j519f) (&i/o-invalid-position . j519e) (&i/o-write . j519d) (&i/o-read . j519c) (&i/o . j519b) (&undefined . j519a) (&syntax . j5199) (&lexical . j5198) (&implementation-restriction . j5197) (&non-continuable . j5196) (&who . j5195) (&irritants . j5194) (&assertion . j5193) (&violation . j5192) (&error . j5191) (&serious . j5190) (&warning . j518f) (&message . j518e) (&condition . j518d) (define-condition-type . j518c) (define-enumeration . j518b) (define-record-type . j518a) (parent-rtd . j5189) (nongenerative . j5188) (opaque . j5187) (sealed . j5186) (protocol . j5185) (parent . j5184) (immutable . j5183) (mutable . j5182) (fields . j5181) (error-handling-mode . j5180) (file-options . j517f) (buffer-mode . j517e) (eol-style . j517d) (guard . j517c) (unsyntax-splicing . j5179) (unsyntax . j5178) (unquote-splicing . j5177) (unquote . j5176) (_ . j5175) (else . j5174) (=> . j5173) (... . j5172) (assert . j5171) (endianness . j5170) (time . j516e) (do . j516d) (cond . j516c) (let* . j516b) (let*-values . j516a) (let-values . j5169) (identifier-syntax . j5168) (with-syntax . j5167) (quasisyntax . j5166) (quasiquote . j5165) (syntax-rules . j5164) (include . j5163) (record-constructor-descriptor . j5161) (record-type-descriptor . j5160) (case . j515f) (unless . j515d) (when . j515c) (or . j515b) (and . j515a) (if . j5159) (let . j5158) (letrec* . j5157) (letrec . j5156) (case-lambda . j5154) (lambda . j5153) (syntax . j5152) (syntax-case . j5151) (quote . j5150) (letrec-syntax . j514e) (let-syntax . j514d) (set! . j514c) (import . j514b) (begin . j514a) (define-syntax . j5148) (define . j5147)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j546f '(psyntax null-environment-5) '() '() '() '() '((make-promise . j5327) (unquote-splicing . j5177) (unquote . j5176) (_ . j5175) (else . j5174) (=> . j5173) (... . j5172) (delay . j516f) (do . j516d) (cond . j516c) (let* . j516b) (quasiquote . j5165) (syntax-rules . j5164) (case . j515f) (or . j515b) (and . j515a) (if . j5159) (let . j5158) (letrec . j5156) (lambda . j5153) (quote . j5150) (letrec-syntax . j514e) (let-syntax . j514d) (set! . j514c) (begin . j514a) (define-syntax . j5148) (define . j5147)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5470 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . j53bc) (string-ci>=? . j53bb) (string-ci=? . j53ba) (string-ci<? . j53b9) (string-ci<=? . j53b8) (char-whitespace? . j53b7) (char-upper-case? . j53b6) (char-numeric? . j53b4) (char-lower-case? . j53b3) (char-upcase . j53b1) (char-downcase . j53ae) (char-ci>? . j53ad) (char-ci>=? . j53ac) (char-ci=? . j53ab) (char-ci<? . j53aa) (char-ci<=? . j53a9) (char-alphabetic? . j53a8) (call-with-output-file . j537c) (call-with-input-file . j537b) (write-char . j537a) (write . j5379) (with-output-to-file . j5378) (with-input-from-file . j5377) (read-char . j5376) (read . j5375) (peek-char . j5374) (open-output-file . j5373) (open-input-file . j5372) (newline . j5371) (display . j5370) (close-output-port . j536f) (close-input-port . j536e) (eof-object . j536c) (current-output-port . j536a) (current-input-port . j5369) (output-port? . j5368) (input-port? . j5367) (scheme-report-environment . j3181) (quotient . j532d) (null-environment . j317f) (remainder . j532c) (modulo . j532b) (inexact->exact . j532a) (force . j5329) (exact->inexact . j5328) (make-promise . j5327) (string-fill! . j5325) (string-set! . j5324) (set-cdr! . j5323) (set-car! . j5322) (memv . j531c) (memq . j531b) (member . j5319) (assv . j5311) (assq . j5310) (assoc . j530e) (eval . j3185) (zero? . j524b) (vector? . j524a) (vector-set! . j5249) (vector-ref . j5248) (vector-length . j5246) (vector-fill! . j5244) (vector->list . j5243) (vector . j5242) (values . j5241) (truncate . j5240) (tan . j523f) (symbol? . j523e) (symbol->string . j523c) (substring . j523b) (string? . j523a) (string>? . j5239) (string>=? . j5238) (string=? . j5237) (string<? . j5236) (string<=? . j5235) (string-ref . j5234) (string-length . j5233) (string-copy . j5231) (string-append . j5230) (string->symbol . j522f) (string->number . j522e) (string->list . j522d) (string . j522c) (sqrt . j522b) (sin . j522a) (round . j5229) (reverse . j5228) (real? . j5227) (real-part . j5225) (rationalize . j5224) (rational? . j5223) (procedure? . j5221) (positive? . j5220) (pair? . j521f) (odd? . j521e) (numerator . j521d) (number? . j521c) (number->string . j521b) (not . j5219) (negative? . j5218) (min . j5216) (max . j5215) (map . j5214) (make-vector . j5213) (make-string . j5212) (make-rectangular . j5211) (make-polar . j5210) (magnitude . j520f) (log . j520e) (list? . j520d) (list-tail . j520c) (list-ref . j520b) (list->vector . j520a) (list->string . j5209) (list . j5208) (length . j5207) (lcm . j5206) (integer? . j5205) (integer->char . j5203) (inexact? . j5201) (imag-part . j51ff) (gcd . j51fe) (for-each . j51fd) (floor . j51fc) (expt . j51fa) (exp . j51f9) (exact? . j51f8) (even? . j51f5) (eqv? . j51f3) (equal? . j51f2) (eq? . j51f1) (dynamic-wind . j51f0) (denominator . j51e9) (cos . j51e8) (cons . j51e7) (complex? . j51e6) (char? . j51e5) (char>? . j51e4) (char>=? . j51e3) (char=? . j51e2) (char<? . j51e1) (char<=? . j51e0) (char->integer . j51df) (ceiling . j51de) (call-with-values . j51dd) (call-with-current-continuation . j51db) (cddddr . j51da) (cdddar . j51d9) (cddadr . j51d8) (cddaar . j51d7) (cdaddr . j51d6) (cdadar . j51d5) (cdaadr . j51d4) (cdaaar . j51d3) (cadddr . j51d2) (caddar . j51d1) (cadadr . j51d0) (cadaar . j51cf) (caaddr . j51ce) (caadar . j51cd) (caaadr . j51cc) (caaaar . j51cb) (cdddr . j51ca) (cddar . j51c9) (cdadr . j51c8) (cdaar . j51c7) (caddr . j51c6) (cadar . j51c5) (caadr . j51c4) (caaar . j51c3) (cddr . j51c2) (cdar . j51c1) (cadr . j51c0) (caar . j51bf) (cdr . j51be) (car . j51bd) (boolean? . j51bc) (atan . j51ba) (asin . j51b8) (apply . j51b7) (append . j51b6) (angle . j51b5) (acos . j51b4) (abs . j51b3) (/ . j51b2) (* . j51b1) (- . j51b0) (+ . j51af) (>= . j51ae) (> . j51ad) (= . j51ac) (<= . j51ab) (< . j51aa) (unquote-splicing . j5177) (unquote . j5176) (else . j5174) (=> . j5173) (... . j5172) (delay . j516f) (do . j516d) (cond . j516c) (let* . j516b) (quasiquote . j5165) (syntax-rules . j5164) (case . j515f) (or . j515b) (and . j515a) (if . j5159) (let . j5158) (letrec . j5156) (lambda . j5153) (quote . j5150) (letrec-syntax . j514e) (let-syntax . j514d) (set! . j514c) (begin . j514a) (define-syntax . j5148) (define . j5147)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5471 '(psyntax modules) '() '() '() '() '((module . j5149)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5472 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5473 '(rnrs) '(6) '() '() '() '((regexp? . j5466) (string-upcase . j53c4) (string-titlecase . j53c3) (string-normalize-nfkd . j53c2) (string-normalize-nfkc . j53c1) (string-normalize-nfd . j53c0) (string-normalize-nfc . j53bf) (string-foldcase . j53be) (string-downcase . j53bd) (string-ci>? . j53bc) (string-ci>=? . j53bb) (string-ci=? . j53ba) (string-ci<? . j53b9) (string-ci<=? . j53b8) (char-whitespace? . j53b7) (char-upper-case? . j53b6) (char-title-case? . j53b5) (char-numeric? . j53b4) (char-lower-case? . j53b3) (char-general-category . j53b2) (char-upcase . j53b1) (char-titlecase . j53b0) (char-foldcase . j53af) (char-downcase . j53ae) (char-ci>? . j53ad) (char-ci>=? . j53ac) (char-ci=? . j53ab) (char-ci<? . j53aa) (char-ci<=? . j53a9) (char-alphabetic? . j53a8) (make-variable-transformer . j2ef0) (identifier? . j31a7) (generate-temporaries . j3193) (free-identifier=? . j3195) (syntax->datum . j31ab) (datum->syntax . j31a9) (bound-identifier=? . j3197) (record-type-descriptor? . j53a7) (record-predicate . j53a6) (record-mutator . j53a5) (record-constructor . j53a4) (record-accessor . j53a3) (make-record-type-descriptor . j53a2) (make-record-constructor-descriptor . j53a1) (record? . j53a0) (record-type-uid . j539f) (record-type-sealed? . j539e) (record-type-parent . j539d) (record-type-opaque? . j539c) (record-type-name . j539b) (record-type-generative? . j539a) (record-type-field-names . j5399) (record-rtd . j5398) (record-field-mutable? . j5397) (delete-file . j5396) (file-exists? . j5395) (vector-sort! . j5394) (vector-sort . j5393) (list-sort . j5392) (symbol-hash . j5391) (string-ci-hash . j5390) (string-hash . j538f) (equal-hash . j538e) (hashtable-equivalence-function . j538d) (make-hashtable . j538c) (hashtable-hash-function . j538b) (make-eqv-hashtable . j538a) (make-eq-hashtable . j5389) (hashtable? . j5388) (hashtable-update! . j5387) (hashtable-size . j5386) (hashtable-set! . j5385) (hashtable-ref . j5384) (hashtable-mutable? . j5383) (hashtable-keys . j5382) (hashtable-entries . j5381) (hashtable-delete! . j5380) (hashtable-copy . j537f) (hashtable-contains? . j537e) (hashtable-clear! . j537d) (call-with-output-file . j537c) (call-with-input-file . j537b) (write-char . j537a) (write . j5379) (with-output-to-file . j5378) (with-input-from-file . j5377) (read-char . j5376) (read . j5375) (peek-char . j5374) (open-output-file . j5373) (open-input-file . j5372) (newline . j5371) (display . j5370) (close-output-port . j536f) (close-input-port . j536e) (eof-object? . j536d) (eof-object . j536c) (current-error-port . j536b) (current-output-port . j536a) (current-input-port . j5369) (output-port? . j5368) (input-port? . j5367) (utf-8-codec . j5366) (utf-16-codec . j5365) (transcoder-error-handling-mode . j5364) (transcoder-eol-style . j5363) (transcoder-codec . j5362) (transcoded-port . j5361) (textual-port? . j5360) (string->bytevector . j535f) (standard-output-port . j535e) (standard-input-port . j535d) (standard-error-port . j535c) (set-port-position! . j535b) (put-u8 . j535a) (put-string . j5359) (put-datum . j5358) (put-char . j5357) (put-bytevector . j5356) (port? . j5355) (port-transcoder . j5354) (port-position . j5353) (port-has-set-port-position!? . j5352) (port-has-port-position? . j5351) (port-eof? . j5350) (output-port-buffer-mode . j534f) (open-string-output-port . j534e) (open-string-input-port . j534d) (open-file-output-port . j534c) (open-file-input/output-port . j534b) (open-file-input-port . j534a) (open-bytevector-output-port . j5349) (open-bytevector-input-port . j5348) (native-transcoder . j5347) (native-eol-style . j5346) (make-transcoder . j5345) (latin-1-codec . j5344) (make-i/o-write-error . j4dcf) (make-i/o-read-error . j4dba) (make-i/o-port-error . j4e70) (make-i/o-invalid-position-error . j4de6) (make-i/o-filename-error . j4e01) (make-i/o-file-protection-error . j4e1a) (make-i/o-file-is-read-only-error . j4e2f) (make-i/o-file-does-not-exist-error . j4e59) (make-i/o-file-already-exists-error . j4e44) (make-i/o-error . j4da5) (make-i/o-encoding-error . j4ea0) (make-i/o-decoding-error . j4e89) (make-custom-textual-output-port . j5343) (make-custom-textual-input/output-port . j5342) (make-custom-textual-input-port . j5341) (make-custom-binary-output-port . j5340) (make-custom-binary-input/output-port . j533f) (make-custom-binary-input-port . j533e) (make-bytevector . j533d) (lookahead-u8 . j533c) (lookahead-char . j533b) (i/o-write-error? . j4dd1) (i/o-read-error? . j4dbc) (i/o-port-error? . j4e74) (i/o-invalid-position-error? . j4dea) (i/o-filename-error? . j4e05) (i/o-file-protection-error? . j4e1c) (i/o-file-is-read-only-error? . j4e31) (i/o-file-does-not-exist-error? . j4e5b) (i/o-file-already-exists-error? . j4e46) (i/o-error? . j4da7) (i/o-error-position . j4dec) (i/o-error-port . j4e76) (i/o-error-filename . j4e07) (i/o-encoding-error? . j4ea4) (i/o-encoding-error-char . j4ea6) (i/o-decoding-error? . j4e8b) (get-u8 . j533a) (get-string-n! . j5339) (get-string-n . j5338) (get-string-all . j5337) (get-line . j5336) (get-datum . j5335) (get-char . j5334) (get-bytevector-some . j5333) (get-bytevector-n! . j5332) (get-bytevector-n . j5331) (get-bytevector-all . j5330) (flush-output-port . j532f) (close-port . j532e) (exit . j5326) (command-line . j4fdf) (remove . j5321) (remv . j5320) (remp . j531f) (remq . j531e) (partition . j531d) (memv . j531c) (memq . j531b) (memp . j531a) (member . j5319) (exists . j5318) (for-all . j5317) (fold-right . j5316) (fold-left . j5315) (find . j5314) (filter . j5313) (cons* . j5312) (assv . j5311) (assq . j5310) (assp . j530f) (assoc . j530e) (call-with-string-output-port . j530d) (call-with-port . j530c) (call-with-bytevector-output-port . j530b) (bytevector->string . j530a) (buffer-mode? . j5309) (binary-port? . j5308) (with-exception-handler . j5307) (raise-continuable . j5306) (raise . j5305) (make-enumeration . j5304) (enum-set=? . j5303) (enum-set-universe . j5302) (enum-set-union . j5301) (enum-set-subset? . j5300) (enum-set-projection . j52ff) (enum-set-member? . j52fe) (enum-set-intersection . j52fd) (enum-set-indexer . j52fc) (enum-set-difference . j52fb) (enum-set-constructor . j52fa) (enum-set-complement . j52f9) (enum-set->list . j52f8) (who-condition? . j4d1b) (warning? . j4c93) (violation? . j4cd2) (undefined-violation? . j4d92) (syntax-violation? . j4d79) (syntax-violation-subform . j4d7d) (syntax-violation-form . j4d7b) (syntax-violation . j31a5) (simple-conditions . j52f7) (serious-condition? . j4ca8) (non-continuable-violation? . j4d32) (message-condition? . j4c7c) (make-who-condition . j4d17) (make-warning . j4c91) (make-violation . j4cd0) (make-undefined-violation . j4d90) (make-syntax-violation . j4d73) (make-serious-condition . j4ca6) (make-non-continuable-violation . j4d30) (make-message-condition . j4c78) (make-lexical-violation . j4d5a) (make-irritants-condition . j4cfc) (make-implementation-restriction-violation . j4d45) (make-error . j4cbb) (make-assertion-violation . j4ce5) (lexical-violation? . j4d5c) (irritants-condition? . j4d00) (implementation-restriction-violation? . j4d47) (error? . j4cbd) (condition-who . j4d1d) (condition-predicate . j52f6) (condition-message . j4c7e) (condition-irritants . j4d02) (condition-accessor . j52f5) (condition . j52f4) (assertion-violation? . j4ce7) (condition? . j52f3) (utf32->string . j52f2) (utf16->string . j52f1) (utf8->string . j52f0) (uint-list->bytevector . j52ef) (u8-list->bytevector . j52ee) (string->utf8 . j52ed) (string->utf32 . j52ec) (string->utf16 . j52eb) (sint-list->bytevector . j52ea) (native-endianness . j52e9) (bytevector? . j52e8) (bytevector=? . j52e7) (bytevector-uint-set! . j52e6) (bytevector-uint-ref . j52e5) (bytevector-u8-set! . j52e4) (bytevector-u8-ref . j52e3) (bytevector-u64-set! . j52e2) (bytevector-u64-ref . j52e1) (bytevector-u64-native-set! . j52e0) (bytevector-u64-native-ref . j52df) (bytevector-u32-set! . j52de) (bytevector-u32-ref . j52dd) (bytevector-u32-native-set! . j52dc) (bytevector-u32-native-ref . j52db) (bytevector-u16-set! . j52da) (bytevector-u16-ref . j52d9) (bytevector-u16-native-set! . j52d8) (bytevector-u16-native-ref . j52d7) (bytevector-sint-set! . j52d6) (bytevector-sint-ref . j52d5) (bytevector-s8-set! . j52d4) (bytevector-s8-ref . j52d3) (bytevector-s64-set! . j52d2) (bytevector-s64-ref . j52d1) (bytevector-s64-native-set! . j52d0) (bytevector-s64-native-ref . j52cf) (bytevector-s32-set! . j52ce) (bytevector-s32-ref . j52cd) (bytevector-s32-native-set! . j52cc) (bytevector-s32-native-ref . j52cb) (bytevector-s16-set! . j52ca) (bytevector-s16-ref . j52c9) (bytevector-s16-native-set! . j52c8) (bytevector-s16-native-ref . j52c7) (bytevector-length . j52c6) (bytevector-ieee-single-ref . j52c5) (bytevector-ieee-single-set! . j52c4) (bytevector-ieee-single-native-set! . j52c3) (bytevector-ieee-single-native-ref . j52c2) (bytevector-ieee-double-set! . j52c1) (bytevector-ieee-double-ref . j52c0) (bytevector-ieee-double-native-set! . j52bf) (bytevector-ieee-double-native-ref . j52be) (bytevector-fill! . j52bd) (bytevector-copy! . j52bc) (bytevector-copy . j52bb) (bytevector->uint-list . j52ba) (bytevector->u8-list . j52b9) (bytevector->sint-list . j52b8) (no-nans-violation? . j4ed0) (no-infinities-violation? . j4ebb) (make-no-nans-violation . j4ece) (make-no-infinities-violation . j4eb9) (real->flonum . j52b7) (flzero? . j52b6) (fltruncate . j52b5) (fltan . j52b4) (flsqrt . j52b3) (flsin . j52b2) (flround . j52b1) (flpositive? . j52b0) (flonum? . j52af) (flodd? . j52ae) (flnumerator . j52ad) (flnegative? . j52ac) (flnan? . j52ab) (flmod0 . j52aa) (flmod . j52a9) (flmin . j52a8) (flmax . j52a7) (fllog . j52a6) (flinteger? . j52a5) (flinfinite? . j52a4) (flfloor . j52a3) (flfinite? . j52a2) (flexpt . j52a1) (flexp . j52a0) (fleven? . j529f) (fldiv0-and-mod0 . j529e) (fldiv0 . j529d) (fldiv-and-mod . j529c) (fldiv . j529b) (fldenominator . j529a) (flcos . j5299) (flceiling . j5298) (flatan . j5297) (flasin . j5296) (flacos . j5295) (flabs . j5294) (fl>? . j5293) (fl>=? . j5292) (fl=? . j5291) (fl<? . j5290) (fl<=? . j528f) (fl/ . j528e) (fl- . j528d) (fl+ . j528c) (fl* . j528b) (fixnum->flonum . j528a) (fxzero? . j5289) (fxxor . j5288) (fxrotate-bit-field . j5287) (fxreverse-bit-field . j5286) (fxpositive? . j5285) (fxodd? . j5284) (fxnot . j5283) (fxnegative? . j5282) (fxmod0 . j5281) (fxmod . j5280) (fxmin . j527f) (fxmax . j527e) (fxlength . j527d) (fxior . j527c) (fxif . j527b) (fxfirst-bit-set . j527a) (fxeven? . j5279) (fxdiv0-and-mod0 . j5278) (fxdiv0 . j5277) (fxdiv-and-mod . j5276) (fxdiv . j5275) (fxcopy-bit-field . j5274) (fxcopy-bit . j5273) (fxbit-set? . j5272) (fxbit-field . j5271) (fxbit-count . j5270) (fxarithmetic-shift-right . j526f) (fxarithmetic-shift-left . j526e) (fxarithmetic-shift . j526d) (fxand . j526c) (fx>? . j526b) (fx>=? . j526a) (fx=? . j5269) (fx<? . j5268) (fx<=? . j5267) (fx-/carry . j5266) (fx- . j5265) (fx+/carry . j5264) (fx+ . j5263) (fx*/carry . j5262) (fx* . j5261) (greatest-fixnum . j5260) (least-fixnum . j525f) (fixnum-width . j525e) (fixnum? . j525d) (bitwise-rotate-bit-field . j525c) (bitwise-reverse-bit-field . j525b) (bitwise-length . j525a) (bitwise-if . j5259) (bitwise-first-bit-set . j5258) (bitwise-copy-bit-field . j5257) (bitwise-copy-bit . j5256) (bitwise-bit-set? . j5255) (bitwise-bit-field . j5254) (bitwise-bit-count . j5253) (bitwise-xor . j5252) (bitwise-ior . j5251) (bitwise-and . j5250) (bitwise-not . j524f) (bitwise-arithmetic-shift-right . j524e) (bitwise-arithmetic-shift-left . j524d) (bitwise-arithmetic-shift . j524c) (zero? . j524b) (vector? . j524a) (vector-set! . j5249) (vector-ref . j5248) (vector-map . j5247) (vector-length . j5246) (vector-for-each . j5245) (vector-fill! . j5244) (vector->list . j5243) (vector . j5242) (values . j5241) (truncate . j5240) (tan . j523f) (symbol? . j523e) (symbol=? . j523d) (symbol->string . j523c) (substring . j523b) (string? . j523a) (string>? . j5239) (string>=? . j5238) (string=? . j5237) (string<? . j5236) (string<=? . j5235) (string-ref . j5234) (string-length . j5233) (string-for-each . j5232) (string-copy . j5231) (string-append . j5230) (string->symbol . j522f) (string->number . j522e) (string->list . j522d) (string . j522c) (sqrt . j522b) (sin . j522a) (round . j5229) (reverse . j5228) (real? . j5227) (real-valued? . j5226) (real-part . j5225) (rationalize . j5224) (rational? . j5223) (rational-valued? . j5222) (procedure? . j5221) (positive? . j5220) (pair? . j521f) (odd? . j521e) (numerator . j521d) (number? . j521c) (number->string . j521b) (null? . j521a) (not . j5219) (negative? . j5218) (nan? . j5217) (min . j5216) (max . j5215) (map . j5214) (make-vector . j5213) (make-string . j5212) (make-rectangular . j5211) (make-polar . j5210) (magnitude . j520f) (log . j520e) (list? . j520d) (list-tail . j520c) (list-ref . j520b) (list->vector . j520a) (list->string . j5209) (list . j5208) (length . j5207) (lcm . j5206) (integer? . j5205) (integer-valued? . j5204) (integer->char . j5203) (infinite? . j5202) (inexact? . j5201) (inexact . j5200) (imag-part . j51ff) (gcd . j51fe) (for-each . j51fd) (floor . j51fc) (finite? . j51fb) (expt . j51fa) (exp . j51f9) (exact? . j51f8) (exact-integer-sqrt . j51f7) (exact . j51f6) (even? . j51f5) (error . j51f4) (eqv? . j51f3) (equal? . j51f2) (eq? . j51f1) (dynamic-wind . j51f0) (div0-and-mod0 . j51ef) (mod0 . j51ee) (div0 . j51ed) (div-and-mod . j51ec) (mod . j51eb) (div . j51ea) (denominator . j51e9) (cos . j51e8) (cons . j51e7) (complex? . j51e6) (char? . j51e5) (char>? . j51e4) (char>=? . j51e3) (char=? . j51e2) (char<? . j51e1) (char<=? . j51e0) (char->integer . j51df) (ceiling . j51de) (call-with-values . j51dd) (call/cc . j51dc) (call-with-current-continuation . j51db) (cddddr . j51da) (cdddar . j51d9) (cddadr . j51d8) (cddaar . j51d7) (cdaddr . j51d6) (cdadar . j51d5) (cdaadr . j51d4) (cdaaar . j51d3) (cadddr . j51d2) (caddar . j51d1) (cadadr . j51d0) (cadaar . j51cf) (caaddr . j51ce) (caadar . j51cd) (caaadr . j51cc) (caaaar . j51cb) (cdddr . j51ca) (cddar . j51c9) (cdadr . j51c8) (cdaar . j51c7) (caddr . j51c6) (cadar . j51c5) (caadr . j51c4) (caaar . j51c3) (cddr . j51c2) (cdar . j51c1) (cadr . j51c0) (caar . j51bf) (cdr . j51be) (car . j51bd) (boolean? . j51bc) (boolean=? . j51bb) (atan . j51ba) (assertion-violation . j51b9) (asin . j51b8) (apply . j51b7) (append . j51b6) (angle . j51b5) (acos . j51b4) (abs . j51b3) (/ . j51b2) (* . j51b1) (- . j51b0) (+ . j51af) (>= . j51ae) (> . j51ad) (= . j51ac) (<= . j51ab) (< . j51aa) (&no-nans . j51a8) (&no-infinities . j51a7) (&i/o-encoding . j51a6) (&i/o-decoding . j51a5) (&i/o-port . j51a4) (&i/o-file-does-not-exist . j51a3) (&i/o-file-already-exists . j51a2) (&i/o-file-is-read-only . j51a1) (&i/o-file-protection . j51a0) (&i/o-filename . j519f) (&i/o-invalid-position . j519e) (&i/o-write . j519d) (&i/o-read . j519c) (&i/o . j519b) (&undefined . j519a) (&syntax . j5199) (&lexical . j5198) (&implementation-restriction . j5197) (&non-continuable . j5196) (&who . j5195) (&irritants . j5194) (&assertion . j5193) (&violation . j5192) (&error . j5191) (&serious . j5190) (&warning . j518f) (&message . j518e) (&condition . j518d) (define-condition-type . j518c) (define-enumeration . j518b) (define-record-type . j518a) (parent-rtd . j5189) (nongenerative . j5188) (opaque . j5187) (sealed . j5186) (protocol . j5185) (parent . j5184) (immutable . j5183) (mutable . j5182) (fields . j5181) (error-handling-mode . j5180) (file-options . j517f) (buffer-mode . j517e) (eol-style . j517d) (guard . j517c) (unsyntax-splicing . j5179) (unsyntax . j5178) (unquote-splicing . j5177) (unquote . j5176) (_ . j5175) (else . j5174) (=> . j5173) (... . j5172) (assert . j5171) (endianness . j5170) (do . j516d) (cond . j516c) (let* . j516b) (let*-values . j516a) (let-values . j5169) (identifier-syntax . j5168) (with-syntax . j5167) (quasisyntax . j5166) (quasiquote . j5165) (syntax-rules . j5164) (record-constructor-descriptor . j5161) (record-type-descriptor . j5160) (case . j515f) (unless . j515d) (when . j515c) (or . j515b) (and . j515a) (if . j5159) (let . j5158) (letrec* . j5157) (letrec . j5156) (case-lambda . j5154) (lambda . j5153) (syntax . j5152) (syntax-case . j5151) (quote . j5150) (letrec-syntax . j514e) (let-syntax . j514d) (set! . j514c) (begin . j514a) (define-syntax . j5148) (define . j5147)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5474 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . j3181) (quotient . j532d) (null-environment . j317f) (remainder . j532c) (modulo . j532b) (inexact->exact . j532a) (force . j5329) (exact->inexact . j5328) (make-promise . j5327) (delay . j516f)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5475 '(rnrs control) '(6) '() '() '() '((do . j516d) (unless . j515d) (when . j515c) (case-lambda . j5154)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5476 '(rnrs eval) '(6) '() '() '() '((eval . j3185) (environment . j317d)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5477 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . j5323) (set-car! . j5322)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5478 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . j5325) (string-set! . j5324)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5479 '(rnrs programs) '(6) '() '() '() '((exit . j5326) (command-line . j4fdf)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j547a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . j2ef0) (identifier? . j31a7) (generate-temporaries . j3193) (free-identifier=? . j3195) (syntax->datum . j31ab) (datum->syntax . j31a9) (bound-identifier=? . j3197) (syntax-violation . j31a5) (unsyntax-splicing . j5179) (unsyntax . j5178) (_ . j5175) (... . j5172) (with-syntax . j5167) (quasisyntax . j5166) (syntax . j5152) (syntax-case . j5151)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j547b '(rnrs files) '(6) '() '() '() '((delete-file . j5396) (file-exists? . j5395) (make-i/o-write-error . j4dcf) (make-i/o-read-error . j4dba) (make-i/o-port-error . j4e70) (make-i/o-invalid-position-error . j4de6) (make-i/o-filename-error . j4e01) (make-i/o-file-protection-error . j4e1a) (make-i/o-file-is-read-only-error . j4e2f) (make-i/o-file-does-not-exist-error . j4e59) (make-i/o-file-already-exists-error . j4e44) (make-i/o-error . j4da5) (i/o-write-error? . j4dd1) (i/o-read-error? . j4dbc) (i/o-port-error? . j4e74) (i/o-invalid-position-error? . j4dea) (i/o-filename-error? . j4e05) (i/o-file-protection-error? . j4e1c) (i/o-file-is-read-only-error? . j4e31) (i/o-file-does-not-exist-error? . j4e5b) (i/o-file-already-exists-error? . j4e46) (i/o-error? . j4da7) (i/o-error-position . j4dec) (i/o-error-port . j4e76) (i/o-error-filename . j4e07) (&i/o-port . j51a4) (&i/o-file-does-not-exist . j51a3) (&i/o-file-already-exists . j51a2) (&i/o-file-is-read-only . j51a1) (&i/o-file-protection . j51a0) (&i/o-filename . j519f) (&i/o-invalid-position . j519e) (&i/o-write . j519d) (&i/o-read . j519c) (&i/o . j519b)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j547c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . j5394) (vector-sort . j5393) (list-sort . j5392)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j547d '(rnrs base) '(6) '() '() '() '((zero? . j524b) (vector? . j524a) (vector-set! . j5249) (vector-ref . j5248) (vector-map . j5247) (vector-length . j5246) (vector-for-each . j5245) (vector-fill! . j5244) (vector->list . j5243) (vector . j5242) (values . j5241) (truncate . j5240) (tan . j523f) (symbol? . j523e) (symbol=? . j523d) (symbol->string . j523c) (substring . j523b) (string? . j523a) (string>? . j5239) (string>=? . j5238) (string=? . j5237) (string<? . j5236) (string<=? . j5235) (string-ref . j5234) (string-length . j5233) (string-for-each . j5232) (string-copy . j5231) (string-append . j5230) (string->symbol . j522f) (string->number . j522e) (string->list . j522d) (string . j522c) (sqrt . j522b) (sin . j522a) (round . j5229) (reverse . j5228) (real? . j5227) (real-valued? . j5226) (real-part . j5225) (rationalize . j5224) (rational? . j5223) (rational-valued? . j5222) (procedure? . j5221) (positive? . j5220) (pair? . j521f) (odd? . j521e) (numerator . j521d) (number? . j521c) (number->string . j521b) (null? . j521a) (not . j5219) (negative? . j5218) (nan? . j5217) (min . j5216) (max . j5215) (map . j5214) (make-vector . j5213) (make-string . j5212) (make-rectangular . j5211) (make-polar . j5210) (magnitude . j520f) (log . j520e) (list? . j520d) (list-tail . j520c) (list-ref . j520b) (list->vector . j520a) (list->string . j5209) (list . j5208) (length . j5207) (lcm . j5206) (integer? . j5205) (integer-valued? . j5204) (integer->char . j5203) (infinite? . j5202) (inexact? . j5201) (inexact . j5200) (imag-part . j51ff) (gcd . j51fe) (for-each . j51fd) (floor . j51fc) (finite? . j51fb) (expt . j51fa) (exp . j51f9) (exact? . j51f8) (exact-integer-sqrt . j51f7) (exact . j51f6) (even? . j51f5) (error . j51f4) (eqv? . j51f3) (equal? . j51f2) (eq? . j51f1) (dynamic-wind . j51f0) (div0-and-mod0 . j51ef) (mod0 . j51ee) (div0 . j51ed) (div-and-mod . j51ec) (mod . j51eb) (div . j51ea) (denominator . j51e9) (cos . j51e8) (cons . j51e7) (complex? . j51e6) (char? . j51e5) (char>? . j51e4) (char>=? . j51e3) (char=? . j51e2) (char<? . j51e1) (char<=? . j51e0) (char->integer . j51df) (ceiling . j51de) (call-with-values . j51dd) (call/cc . j51dc) (call-with-current-continuation . j51db) (cddddr . j51da) (cdddar . j51d9) (cddadr . j51d8) (cddaar . j51d7) (cdaddr . j51d6) (cdadar . j51d5) (cdaadr . j51d4) (cdaaar . j51d3) (cadddr . j51d2) (caddar . j51d1) (cadadr . j51d0) (cadaar . j51cf) (caaddr . j51ce) (caadar . j51cd) (caaadr . j51cc) (caaaar . j51cb) (cdddr . j51ca) (cddar . j51c9) (cdadr . j51c8) (cdaar . j51c7) (caddr . j51c6) (cadar . j51c5) (caadr . j51c4) (caaar . j51c3) (cddr . j51c2) (cdar . j51c1) (cadr . j51c0) (caar . j51bf) (cdr . j51be) (car . j51bd) (boolean? . j51bc) (boolean=? . j51bb) (atan . j51ba) (assertion-violation . j51b9) (asin . j51b8) (apply . j51b7) (append . j51b6) (angle . j51b5) (acos . j51b4) (abs . j51b3) (/ . j51b2) (* . j51b1) (- . j51b0) (+ . j51af) (>= . j51ae) (> . j51ad) (= . j51ac) (<= . j51ab) (< . j51aa) (unquote-splicing . j5177) (unquote . j5176) (_ . j5175) (else . j5174) (=> . j5173) (... . j5172) (assert . j5171) (cond . j516c) (let* . j516b) (let*-values . j516a) (let-values . j5169) (identifier-syntax . j5168) (quasiquote . j5165) (syntax-rules . j5164) (case . j515f) (or . j515b) (and . j515a) (if . j5159) (let . j5158) (letrec* . j5157) (letrec . j5156) (lambda . j5153) (quote . j5150) (letrec-syntax . j514e) (let-syntax . j514d) (set! . j514c) (begin . j514a) (define-syntax . j5148) (define . j5147)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j547e '(rnrs lists) '(6) '() '() '() '((remove . j5321) (remv . j5320) (remp . j531f) (remq . j531e) (partition . j531d) (memv . j531c) (memq . j531b) (memp . j531a) (member . j5319) (exists . j5318) (for-all . j5317) (fold-right . j5316) (fold-left . j5315) (find . j5314) (filter . j5313) (cons* . j5312) (assv . j5311) (assq . j5310) (assp . j530f) (assoc . j530e)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j547f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . j537c) (call-with-input-file . j537b) (write-char . j537a) (write . j5379) (with-output-to-file . j5378) (with-input-from-file . j5377) (read-char . j5376) (read . j5375) (peek-char . j5374) (open-output-file . j5373) (open-input-file . j5372) (newline . j5371) (display . j5370) (close-output-port . j536f) (close-input-port . j536e) (eof-object? . j536d) (eof-object . j536c) (current-error-port . j536b) (current-output-port . j536a) (current-input-port . j5369) (output-port? . j5368) (input-port? . j5367) (make-i/o-write-error . j4dcf) (make-i/o-read-error . j4dba) (make-i/o-port-error . j4e70) (make-i/o-invalid-position-error . j4de6) (make-i/o-filename-error . j4e01) (make-i/o-file-protection-error . j4e1a) (make-i/o-file-is-read-only-error . j4e2f) (make-i/o-file-does-not-exist-error . j4e59) (make-i/o-file-already-exists-error . j4e44) (make-i/o-error . j4da5) (i/o-write-error? . j4dd1) (i/o-read-error? . j4dbc) (i/o-port-error? . j4e74) (i/o-invalid-position-error? . j4dea) (i/o-filename-error? . j4e05) (i/o-file-protection-error? . j4e1c) (i/o-file-is-read-only-error? . j4e31) (i/o-file-does-not-exist-error? . j4e5b) (i/o-file-already-exists-error? . j4e46) (i/o-error? . j4da7) (i/o-error-position . j4dec) (i/o-error-port . j4e76) (i/o-error-filename . j4e07) (&i/o-port . j51a4) (&i/o-file-does-not-exist . j51a3) (&i/o-file-already-exists . j51a2) (&i/o-file-is-read-only . j51a1) (&i/o-file-protection . j51a0) (&i/o-filename . j519f) (&i/o-invalid-position . j519e) (&i/o-write . j519d) (&i/o-read . j519c) (&i/o . j519b)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5480 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . j533d) (utf32->string . j52f2) (utf16->string . j52f1) (utf8->string . j52f0) (uint-list->bytevector . j52ef) (u8-list->bytevector . j52ee) (string->utf8 . j52ed) (string->utf32 . j52ec) (string->utf16 . j52eb) (sint-list->bytevector . j52ea) (native-endianness . j52e9) (bytevector? . j52e8) (bytevector=? . j52e7) (bytevector-uint-set! . j52e6) (bytevector-uint-ref . j52e5) (bytevector-u8-set! . j52e4) (bytevector-u8-ref . j52e3) (bytevector-u64-set! . j52e2) (bytevector-u64-ref . j52e1) (bytevector-u64-native-set! . j52e0) (bytevector-u64-native-ref . j52df) (bytevector-u32-set! . j52de) (bytevector-u32-ref . j52dd) (bytevector-u32-native-set! . j52dc) (bytevector-u32-native-ref . j52db) (bytevector-u16-set! . j52da) (bytevector-u16-ref . j52d9) (bytevector-u16-native-set! . j52d8) (bytevector-u16-native-ref . j52d7) (bytevector-sint-set! . j52d6) (bytevector-sint-ref . j52d5) (bytevector-s8-set! . j52d4) (bytevector-s8-ref . j52d3) (bytevector-s64-set! . j52d2) (bytevector-s64-ref . j52d1) (bytevector-s64-native-set! . j52d0) (bytevector-s64-native-ref . j52cf) (bytevector-s32-set! . j52ce) (bytevector-s32-ref . j52cd) (bytevector-s32-native-set! . j52cc) (bytevector-s32-native-ref . j52cb) (bytevector-s16-set! . j52ca) (bytevector-s16-ref . j52c9) (bytevector-s16-native-set! . j52c8) (bytevector-s16-native-ref . j52c7) (bytevector-length . j52c6) (bytevector-ieee-single-ref . j52c5) (bytevector-ieee-single-set! . j52c4) (bytevector-ieee-single-native-set! . j52c3) (bytevector-ieee-single-native-ref . j52c2) (bytevector-ieee-double-set! . j52c1) (bytevector-ieee-double-ref . j52c0) (bytevector-ieee-double-native-set! . j52bf) (bytevector-ieee-double-native-ref . j52be) (bytevector-fill! . j52bd) (bytevector-copy! . j52bc) (bytevector-copy . j52bb) (bytevector->uint-list . j52ba) (bytevector->u8-list . j52b9) (bytevector->sint-list . j52b8) (endianness . j5170)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5481 '(rnrs unicode) '(6) '() '() '() '((string-upcase . j53c4) (string-titlecase . j53c3) (string-normalize-nfkd . j53c2) (string-normalize-nfkc . j53c1) (string-normalize-nfd . j53c0) (string-normalize-nfc . j53bf) (string-foldcase . j53be) (string-downcase . j53bd) (string-ci>? . j53bc) (string-ci>=? . j53bb) (string-ci=? . j53ba) (string-ci<? . j53b9) (string-ci<=? . j53b8) (char-whitespace? . j53b7) (char-upper-case? . j53b6) (char-title-case? . j53b5) (char-numeric? . j53b4) (char-lower-case? . j53b3) (char-general-category . j53b2) (char-upcase . j53b1) (char-titlecase . j53b0) (char-foldcase . j53af) (char-downcase . j53ae) (char-ci>? . j53ad) (char-ci>=? . j53ac) (char-ci=? . j53ab) (char-ci<? . j53aa) (char-ci<=? . j53a9) (char-alphabetic? . j53a8)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5482 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . j5307) (raise-continuable . j5306) (raise . j5305) (guard . j517c) (else . j5174) (=> . j5173)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5483 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . j525c) (bitwise-reverse-bit-field . j525b) (bitwise-length . j525a) (bitwise-if . j5259) (bitwise-first-bit-set . j5258) (bitwise-copy-bit-field . j5257) (bitwise-copy-bit . j5256) (bitwise-bit-set? . j5255) (bitwise-bit-field . j5254) (bitwise-bit-count . j5253) (bitwise-xor . j5252) (bitwise-ior . j5251) (bitwise-and . j5250) (bitwise-not . j524f) (bitwise-arithmetic-shift-right . j524e) (bitwise-arithmetic-shift-left . j524d) (bitwise-arithmetic-shift . j524c)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5484 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . j5289) (fxxor . j5288) (fxrotate-bit-field . j5287) (fxreverse-bit-field . j5286) (fxpositive? . j5285) (fxodd? . j5284) (fxnot . j5283) (fxnegative? . j5282) (fxmod0 . j5281) (fxmod . j5280) (fxmin . j527f) (fxmax . j527e) (fxlength . j527d) (fxior . j527c) (fxif . j527b) (fxfirst-bit-set . j527a) (fxeven? . j5279) (fxdiv0-and-mod0 . j5278) (fxdiv0 . j5277) (fxdiv-and-mod . j5276) (fxdiv . j5275) (fxcopy-bit-field . j5274) (fxcopy-bit . j5273) (fxbit-set? . j5272) (fxbit-field . j5271) (fxbit-count . j5270) (fxarithmetic-shift-right . j526f) (fxarithmetic-shift-left . j526e) (fxarithmetic-shift . j526d) (fxand . j526c) (fx>? . j526b) (fx>=? . j526a) (fx=? . j5269) (fx<? . j5268) (fx<=? . j5267) (fx-/carry . j5266) (fx- . j5265) (fx+/carry . j5264) (fx+ . j5263) (fx*/carry . j5262) (fx* . j5261) (greatest-fixnum . j5260) (least-fixnum . j525f) (fixnum-width . j525e) (fixnum? . j525d)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5485 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . j4ed0) (no-infinities-violation? . j4ebb) (make-no-nans-violation . j4ece) (make-no-infinities-violation . j4eb9) (real->flonum . j52b7) (flzero? . j52b6) (fltruncate . j52b5) (fltan . j52b4) (flsqrt . j52b3) (flsin . j52b2) (flround . j52b1) (flpositive? . j52b0) (flonum? . j52af) (flodd? . j52ae) (flnumerator . j52ad) (flnegative? . j52ac) (flnan? . j52ab) (flmod0 . j52aa) (flmod . j52a9) (flmin . j52a8) (flmax . j52a7) (fllog . j52a6) (flinteger? . j52a5) (flinfinite? . j52a4) (flfloor . j52a3) (flfinite? . j52a2) (flexpt . j52a1) (flexp . j52a0) (fleven? . j529f) (fldiv0-and-mod0 . j529e) (fldiv0 . j529d) (fldiv-and-mod . j529c) (fldiv . j529b) (fldenominator . j529a) (flcos . j5299) (flceiling . j5298) (flatan . j5297) (flasin . j5296) (flacos . j5295) (flabs . j5294) (fl>? . j5293) (fl>=? . j5292) (fl=? . j5291) (fl<? . j5290) (fl<=? . j528f) (fl/ . j528e) (fl- . j528d) (fl+ . j528c) (fl* . j528b) (fixnum->flonum . j528a) (&no-nans . j51a8) (&no-infinities . j51a7)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5486 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . j5391) (string-ci-hash . j5390) (string-hash . j538f) (equal-hash . j538e) (hashtable-equivalence-function . j538d) (make-hashtable . j538c) (hashtable-hash-function . j538b) (make-eqv-hashtable . j538a) (make-eq-hashtable . j5389) (hashtable? . j5388) (hashtable-update! . j5387) (hashtable-size . j5386) (hashtable-set! . j5385) (hashtable-ref . j5384) (hashtable-mutable? . j5383) (hashtable-keys . j5382) (hashtable-entries . j5381) (hashtable-delete! . j5380) (hashtable-copy . j537f) (hashtable-contains? . j537e) (hashtable-clear! . j537d)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5487 '(rnrs io ports) '(6) '() '() '() '((eof-object? . j536d) (eof-object . j536c) (current-error-port . j536b) (current-output-port . j536a) (current-input-port . j5369) (output-port? . j5368) (input-port? . j5367) (utf-8-codec . j5366) (utf-16-codec . j5365) (transcoder-error-handling-mode . j5364) (transcoder-eol-style . j5363) (transcoder-codec . j5362) (transcoded-port . j5361) (textual-port? . j5360) (string->bytevector . j535f) (standard-output-port . j535e) (standard-input-port . j535d) (standard-error-port . j535c) (set-port-position! . j535b) (put-u8 . j535a) (put-string . j5359) (put-datum . j5358) (put-char . j5357) (put-bytevector . j5356) (port? . j5355) (port-transcoder . j5354) (port-position . j5353) (port-has-set-port-position!? . j5352) (port-has-port-position? . j5351) (port-eof? . j5350) (output-port-buffer-mode . j534f) (open-string-output-port . j534e) (open-string-input-port . j534d) (open-file-output-port . j534c) (open-file-input/output-port . j534b) (open-file-input-port . j534a) (open-bytevector-output-port . j5349) (open-bytevector-input-port . j5348) (native-transcoder . j5347) (native-eol-style . j5346) (make-transcoder . j5345) (latin-1-codec . j5344) (make-i/o-write-error . j4dcf) (make-i/o-read-error . j4dba) (make-i/o-port-error . j4e70) (make-i/o-invalid-position-error . j4de6) (make-i/o-filename-error . j4e01) (make-i/o-file-protection-error . j4e1a) (make-i/o-file-is-read-only-error . j4e2f) (make-i/o-file-does-not-exist-error . j4e59) (make-i/o-file-already-exists-error . j4e44) (make-i/o-error . j4da5) (make-i/o-encoding-error . j4ea0) (make-i/o-decoding-error . j4e89) (make-custom-textual-output-port . j5343) (make-custom-textual-input/output-port . j5342) (make-custom-textual-input-port . j5341) (make-custom-binary-output-port . j5340) (make-custom-binary-input/output-port . j533f) (make-custom-binary-input-port . j533e) (lookahead-u8 . j533c) (lookahead-char . j533b) (i/o-write-error? . j4dd1) (i/o-read-error? . j4dbc) (i/o-port-error? . j4e74) (i/o-invalid-position-error? . j4dea) (i/o-filename-error? . j4e05) (i/o-file-protection-error? . j4e1c) (i/o-file-is-read-only-error? . j4e31) (i/o-file-does-not-exist-error? . j4e5b) (i/o-file-already-exists-error? . j4e46) (i/o-error? . j4da7) (i/o-error-position . j4dec) (i/o-error-port . j4e76) (i/o-error-filename . j4e07) (i/o-encoding-error? . j4ea4) (i/o-encoding-error-char . j4ea6) (i/o-decoding-error? . j4e8b) (get-u8 . j533a) (get-string-n! . j5339) (get-string-n . j5338) (get-string-all . j5337) (get-line . j5336) (get-datum . j5335) (get-char . j5334) (get-bytevector-some . j5333) (get-bytevector-n! . j5332) (get-bytevector-n . j5331) (get-bytevector-all . j5330) (flush-output-port . j532f) (close-port . j532e) (call-with-string-output-port . j530d) (call-with-port . j530c) (call-with-bytevector-output-port . j530b) (bytevector->string . j530a) (buffer-mode? . j5309) (binary-port? . j5308) (&i/o-encoding . j51a6) (&i/o-decoding . j51a5) (&i/o-port . j51a4) (&i/o-file-does-not-exist . j51a3) (&i/o-file-already-exists . j51a2) (&i/o-file-is-read-only . j51a1) (&i/o-file-protection . j51a0) (&i/o-filename . j519f) (&i/o-invalid-position . j519e) (&i/o-write . j519d) (&i/o-read . j519c) (&i/o . j519b) (error-handling-mode . j5180) (file-options . j517f) (buffer-mode . j517e) (eol-style . j517d)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5488 '(rnrs enums) '(6) '() '() '() '((make-enumeration . j5304) (enum-set=? . j5303) (enum-set-universe . j5302) (enum-set-union . j5301) (enum-set-subset? . j5300) (enum-set-projection . j52ff) (enum-set-member? . j52fe) (enum-set-intersection . j52fd) (enum-set-indexer . j52fc) (enum-set-difference . j52fb) (enum-set-constructor . j52fa) (enum-set-complement . j52f9) (enum-set->list . j52f8) (define-enumeration . j518b)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j5489 '(rnrs conditions) '(6) '() '() '() '((who-condition? . j4d1b) (warning? . j4c93) (violation? . j4cd2) (undefined-violation? . j4d92) (syntax-violation? . j4d79) (syntax-violation-subform . j4d7d) (syntax-violation-form . j4d7b) (syntax-violation . j31a5) (simple-conditions . j52f7) (serious-condition? . j4ca8) (non-continuable-violation? . j4d32) (message-condition? . j4c7c) (make-who-condition . j4d17) (make-warning . j4c91) (make-violation . j4cd0) (make-undefined-violation . j4d90) (make-syntax-violation . j4d73) (make-serious-condition . j4ca6) (make-non-continuable-violation . j4d30) (make-message-condition . j4c78) (make-lexical-violation . j4d5a) (make-irritants-condition . j4cfc) (make-implementation-restriction-violation . j4d45) (make-error . j4cbb) (make-assertion-violation . j4ce5) (lexical-violation? . j4d5c) (irritants-condition? . j4d00) (implementation-restriction-violation? . j4d47) (error? . j4cbd) (condition-who . j4d1d) (condition-predicate . j52f6) (condition-message . j4c7e) (condition-irritants . j4d02) (condition-accessor . j52f5) (condition . j52f4) (assertion-violation? . j4ce7) (condition? . j52f3) (&undefined . j519a) (&syntax . j5199) (&lexical . j5198) (&implementation-restriction . j5197) (&non-continuable . j5196) (&who . j5195) (&irritants . j5194) (&assertion . j5193) (&violation . j5192) (&error . j5191) (&serious . j5190) (&warning . j518f) (&message . j518e) (&condition . j518d) (define-condition-type . j518c)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j548a '(rnrs records inspection) '(6) '() '() '() '((record? . j53a0) (record-type-uid . j539f) (record-type-sealed? . j539e) (record-type-parent . j539d) (record-type-opaque? . j539c) (record-type-name . j539b) (record-type-generative? . j539a) (record-type-field-names . j5399) (record-rtd . j5398) (record-field-mutable? . j5397)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j548b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . j53a7) (record-predicate . j53a6) (record-mutator . j53a5) (record-constructor . j53a4) (record-accessor . j53a3) (make-record-type-descriptor . j53a2) (make-record-constructor-descriptor . j53a1)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j548c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . j518a) (parent-rtd . j5189) (nongenerative . j5188) (opaque . j5187) (sealed . j5186) (protocol . j5185) (parent . j5184) (immutable . j5183) (mutable . j5182) (fields . j5181) (record-constructor-descriptor . j5161) (record-type-descriptor . j5160)) '() values values '#f '#f '#t '#f) (j2cd3@j2b1f@install-library 'j548d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . j4ed4) (&no-nans-rtd . j4ed2) (&no-infinities-rcd . j4ebf) (&no-infinities-rtd . j4ebd) (&i/o-encoding-rcd . j4eaa) (&i/o-encoding-rtd . j4ea8) (&i/o-decoding-rcd . j4e8f) (&i/o-decoding-rtd . j4e8d) (&i/o-port-rcd . j4e7a) (&i/o-port-rtd . j4e78) (&i/o-file-does-not-exist-rcd . j4e5f) (&i/o-file-does-not-exist-rtd . j4e5d) (&i/o-file-already-exists-rcd . j4e4a) (&i/o-file-already-exists-rtd . j4e48) (&i/o-file-is-read-only-rcd . j4e35) (&i/o-file-is-read-only-rtd . j4e33) (&i/o-file-protection-rcd . j4e20) (&i/o-file-protection-rtd . j4e1e) (&i/o-filename-rcd . j4e0b) (&i/o-filename-rtd . j4e09) (&i/o-invalid-position-rcd . j4df0) (&i/o-invalid-position-rtd . j4dee) (&i/o-write-rcd . j4dd5) (&i/o-write-rtd . j4dd3) (&i/o-read-rcd . j4dc0) (&i/o-read-rtd . j4dbe) (&i/o-rcd . j4dab) (&i/o-rtd . j4da9) (&undefined-rcd . j4d96) (&undefined-rtd . j4d94) (&syntax-rcd . j4d81) (&syntax-rtd . j4d7f) (&lexical-rcd . j4d60) (&lexical-rtd . j4d5e) (&implementation-restriction-rcd . j4d4b) (&implementation-restriction-rtd . j4d49) (&non-continuable-rcd . j4d36) (&non-continuable-rtd . j4d34) (&who-rcd . j4d21) (&who-rtd . j4d1f) (&irritants-rcd . j4d06) (&irritants-rtd . j4d04) (&assertion-rcd . j4ceb) (&assertion-rtd . j4ce9) (&violation-rcd . j4cd6) (&violation-rtd . j4cd4) (&error-rcd . j4cc1) (&error-rtd . j4cbf) (&serious-rcd . j4cac) (&serious-rtd . j4caa) (&warning-rcd . j4c97) (&warning-rtd . j4c95) (&message-rcd . j4c82) (&message-rtd . j4c80) (&condition-rcd . j4c23) (&condition-rtd . j4c21) (syntax-error . j31a1) (syntax-dispatch . j30c5) (pretty-print . j546d) (eval-core . j546c) (set-symbol-value! . j546b) (symbol-value . j546a) (gensym . j5469) (void . j5468) (load . j4fe5) (interaction-environment . j31b3) (char-ready? . j5467) (regexp? . j5466) (read-line . j5465) (gensym-prefix-set! . j5464) (ungensym . j5463) (alist->eq-hash-table . j5462) (assoc-ref . j5461) (print . j5460) (format . j545f) (host-os . j545e) (library-path . j2afe) (standard-library-path . j545d) (file-newer? . j545c) (stat-mtime . j545b) (write-to-file . j545a) (file->list . j5459) (file->string . j5458) (digit->integer . j5457) (call-with-string-input-port . j5456) (call-with-string-io . j5455) (string-split . j5454) (bytevector-for-each . j5453) (string->regexp . j5452) (rxmatch . j5451) (regexp-replace-all . j5450) (hashtable-for-each . j544f) (mosh-cache-dir . j28e8) (call-process . j544e) (local-tz-offset . j544d) (microseconds . j544c) (directory-list . j544b) (set-current-directory! . j544a) (expand-path . j5449) (current-directory . j5448) (%spawn . j5447) (%waitpid . j5446) (simple-struct-name . j5445) (simple-struct-set! . j5444) (simple-struct-ref . j5443) (make-simple-struct . j5442) (simple-struct? . j5441) (pointer-ref-c-int64 . j5440) (pointer-ref-c-int32 . j543f) (pointer-ref-c-int16 . j543e) (pointer-ref-c-int8 . j543d) (pointer-ref-c-uint64 . j543c) (pointer-ref-c-uint32 . j543b) (pointer-ref-c-uint16 . j543a) (pointer-ref-c-uint8 . j5439) (pointer-set-c-uint64! . j5438) (pointer-set-c-uint32! . j5437) (pointer-set-c-uint16! . j5436) (pointer-set-c-uint8! . j5435) (pointer-set-c-int64! . j5434) (pointer-set-c-int32! . j5433) (pointer-set-c-int16! . j5432) (pointer-set-c-int8! . j5431) (pointer-set-c-pointer! . j5430) (pointer-set-c-double! . j542f) (pointer-set-c-float! . j542e) (pointer-set-c-long-long! . j542d) (pointer-set-c-long! . j542c) (pointer-set-c-int! . j542b) (pointer-set-c-short! . j542a) (pointer-set-c-char! . j5429) (pointer-ref-c-pointer . j5428) (pointer-ref-c-double . j5427) (pointer-ref-c-float . j5426) (pointer-ref-c-unsigned-long-long . j5425) (pointer-ref-c-signed-long-long . j5424) (pointer-ref-c-unsigned-long . j5423) (pointer-ref-c-signed-long . j5422) (pointer-ref-c-unsigned-int . j5421) (pointer-ref-c-signed-int . j5420) (pointer-ref-c-unsigned-short . j541f) (pointer-ref-c-signed-short . j541e) (pointer-ref-c-unsigned-char . j541d) (pointer-ref-c-signed-char . j541c) (pointer->integer . j541b) (integer->pointer . j541a) (pointer? . j5419) (shared-errno . j5418) (%ffi-free-c-callback-trampoline . j5417) (%ffi-make-c-callback-trampoline . j5416) (%ffi-free . j5415) (%ffi-malloc . j5414) (%ffi-supported? . j5413) (%ffi-pointer->string . j5412) (%ffi-call . j5411) (%ffi-lookup . j5410) (%ffi-open . j540f) (null-terminated-utf8->string . j540e) (null-terminated-bytevector->string . j540d) (%fork . j540c) (%pipe . j540b) (p . j540a) (open-output-string . j5409) (get-output-string . j5408) (file-stat-ctime . j5407) (file-stat-atime . j5406) (file-stat-mtime . j5405) (file-size-in-bytes . j5404) (file-writable? . j5403) (file-executable? . j5402) (file-readable? . j5401) (file-regular? . j5400) (file-symbolic-link? . j53ff) (file-directory? . j53fe) (create-symbolic-link . j53fd) (rename-file . j53fc) (delete-directory . j53fb) (create-directory . j53fa) (create-mosh-cache-dir . j53f9) (get-environment-variables . j53f8) (current-exception-handler . j53f7) (get-environment-variable . j53f6) (join-wraps . j53f5) (id->real-label . j53f4) (same-marks? . j53f3) (same-marks*? . j53f2) (get-timeofday . j53f1) (get-command-line . j53f0) (sys-display . j53ef) (whereis . j53ee) (register . j53ed) (vm-join! . j53ec) (vm-set-value! . j53eb) (vm? . j53ea) (main-vm? . j53e9) (vm-eval . j53e8) (vm-self . j53e7) (vm-start! . j53e6) (make-vm . j53e5) (mutex-try-lock! . j53e4) (mutex-unlock! . j53e3) (mutex-lock! . j53e2) (mutex? . j53e1) (make-mutex . j53e0) (condition-variable-notify-all! . j53df) (condition-variable-notify! . j53de) (condition-variable-wait! . j53dd) (make-condition-variable . j53dc) (mosh-executable-path . j53db) (make-file-options . j53da) (source-info . j53d9) (make-compiler-instruction . j53d8) (make-instruction . j53d7) (set-source-info! . j53d6) (bignum? . j53d5) (fast-equal? . j53d4) (fasl-read . j53d3) (fasl-write . j53d2) (time-usage . j53d1) (os-constant . j53d0) (disasm . j53cf) (make-parameter . j28e6) (socket-port . j53ce) (socket-shutdown . j53cd) (socket-close . j53cc) (socket-send . j53cb) (socket-recv! . j53ca) (socket-recv . j53c9) (make-server-socket . j53c8) (make-client-socket . j53c7) (socket-accept . j53c6) (socket? . j53c5) (string-upcase . j53c4) (string-titlecase . j53c3) (string-normalize-nfkd . j53c2) (string-normalize-nfkc . j53c1) (string-normalize-nfd . j53c0) (string-normalize-nfc . j53bf) (string-foldcase . j53be) (string-downcase . j53bd) (string-ci>? . j53bc) (string-ci>=? . j53bb) (string-ci=? . j53ba) (string-ci<? . j53b9) (string-ci<=? . j53b8) (char-whitespace? . j53b7) (char-upper-case? . j53b6) (char-title-case? . j53b5) (char-numeric? . j53b4) (char-lower-case? . j53b3) (char-general-category . j53b2) (char-upcase . j53b1) (char-titlecase . j53b0) (char-foldcase . j53af) (char-downcase . j53ae) (char-ci>? . j53ad) (char-ci>=? . j53ac) (char-ci=? . j53ab) (char-ci<? . j53aa) (char-ci<=? . j53a9) (char-alphabetic? . j53a8) (make-variable-transformer . j2ef0) (identifier? . j31a7) (generate-temporaries . j3193) (free-identifier=? . j3195) (syntax->datum . j31ab) (datum->syntax . j31a9) (bound-identifier=? . j3197) (record-type-descriptor? . j53a7) (record-predicate . j53a6) (record-mutator . j53a5) (record-constructor . j53a4) (record-accessor . j53a3) (make-record-type-descriptor . j53a2) (make-record-constructor-descriptor . j53a1) (record? . j53a0) (record-type-uid . j539f) (record-type-sealed? . j539e) (record-type-parent . j539d) (record-type-opaque? . j539c) (record-type-name . j539b) (record-type-generative? . j539a) (record-type-field-names . j5399) (record-rtd . j5398) (record-field-mutable? . j5397) (delete-file . j5396) (file-exists? . j5395) (vector-sort! . j5394) (vector-sort . j5393) (list-sort . j5392) (symbol-hash . j5391) (string-ci-hash . j5390) (string-hash . j538f) (equal-hash . j538e) (hashtable-equivalence-function . j538d) (make-hashtable . j538c) (hashtable-hash-function . j538b) (make-eqv-hashtable . j538a) (make-eq-hashtable . j5389) (hashtable? . j5388) (hashtable-update! . j5387) (hashtable-size . j5386) (hashtable-set! . j5385) (hashtable-ref . j5384) (hashtable-mutable? . j5383) (hashtable-keys . j5382) (hashtable-entries . j5381) (hashtable-delete! . j5380) (hashtable-copy . j537f) (hashtable-contains? . j537e) (hashtable-clear! . j537d) (call-with-output-file . j537c) (call-with-input-file . j537b) (write-char . j537a) (write . j5379) (with-output-to-file . j5378) (with-input-from-file . j5377) (read-char . j5376) (read . j5375) (peek-char . j5374) (open-output-file . j5373) (open-input-file . j5372) (newline . j5371) (display . j5370) (close-output-port . j536f) (close-input-port . j536e) (eof-object? . j536d) (eof-object . j536c) (current-error-port . j536b) (current-output-port . j536a) (current-input-port . j5369) (output-port? . j5368) (input-port? . j5367) (utf-8-codec . j5366) (utf-16-codec . j5365) (transcoder-error-handling-mode . j5364) (transcoder-eol-style . j5363) (transcoder-codec . j5362) (transcoded-port . j5361) (textual-port? . j5360) (string->bytevector . j535f) (standard-output-port . j535e) (standard-input-port . j535d) (standard-error-port . j535c) (set-port-position! . j535b) (put-u8 . j535a) (put-string . j5359) (put-datum . j5358) (put-char . j5357) (put-bytevector . j5356) (port? . j5355) (port-transcoder . j5354) (port-position . j5353) (port-has-set-port-position!? . j5352) (port-has-port-position? . j5351) (port-eof? . j5350) (output-port-buffer-mode . j534f) (open-string-output-port . j534e) (open-string-input-port . j534d) (open-file-output-port . j534c) (open-file-input/output-port . j534b) (open-file-input-port . j534a) (open-bytevector-output-port . j5349) (open-bytevector-input-port . j5348) (native-transcoder . j5347) (native-eol-style . j5346) (make-transcoder . j5345) (latin-1-codec . j5344) (make-i/o-write-error . j4dcf) (make-i/o-read-error . j4dba) (make-i/o-port-error . j4e70) (make-i/o-invalid-position-error . j4de6) (make-i/o-filename-error . j4e01) (make-i/o-file-protection-error . j4e1a) (make-i/o-file-is-read-only-error . j4e2f) (make-i/o-file-does-not-exist-error . j4e59) (make-i/o-file-already-exists-error . j4e44) (make-i/o-error . j4da5) (make-i/o-encoding-error . j4ea0) (make-i/o-decoding-error . j4e89) (make-custom-textual-output-port . j5343) (make-custom-textual-input/output-port . j5342) (make-custom-textual-input-port . j5341) (make-custom-binary-output-port . j5340) (make-custom-binary-input/output-port . j533f) (make-custom-binary-input-port . j533e) (make-bytevector . j533d) (lookahead-u8 . j533c) (lookahead-char . j533b) (i/o-write-error? . j4dd1) (i/o-read-error? . j4dbc) (i/o-port-error? . j4e74) (i/o-invalid-position-error? . j4dea) (i/o-filename-error? . j4e05) (i/o-file-protection-error? . j4e1c) (i/o-file-is-read-only-error? . j4e31) (i/o-file-does-not-exist-error? . j4e5b) (i/o-file-already-exists-error? . j4e46) (i/o-error? . j4da7) (i/o-error-position . j4dec) (i/o-error-port . j4e76) (i/o-error-filename . j4e07) (i/o-encoding-error? . j4ea4) (i/o-encoding-error-char . j4ea6) (i/o-decoding-error? . j4e8b) (get-u8 . j533a) (get-string-n! . j5339) (get-string-n . j5338) (get-string-all . j5337) (get-line . j5336) (get-datum . j5335) (get-char . j5334) (get-bytevector-some . j5333) (get-bytevector-n! . j5332) (get-bytevector-n . j5331) (get-bytevector-all . j5330) (flush-output-port . j532f) (close-port . j532e) (scheme-report-environment . j3181) (quotient . j532d) (null-environment . j317f) (remainder . j532c) (modulo . j532b) (inexact->exact . j532a) (force . j5329) (exact->inexact . j5328) (make-promise . j5327) (exit . j5326) (command-line . j4fdf) (string-fill! . j5325) (string-set! . j5324) (set-cdr! . j5323) (set-car! . j5322) (remove . j5321) (remv . j5320) (remp . j531f) (remq . j531e) (partition . j531d) (memv . j531c) (memq . j531b) (memp . j531a) (member . j5319) (exists . j5318) (for-all . j5317) (fold-right . j5316) (fold-left . j5315) (find . j5314) (filter . j5313) (cons* . j5312) (assv . j5311) (assq . j5310) (assp . j530f) (assoc . j530e) (call-with-string-output-port . j530d) (call-with-port . j530c) (call-with-bytevector-output-port . j530b) (bytevector->string . j530a) (buffer-mode? . j5309) (binary-port? . j5308) (with-exception-handler . j5307) (raise-continuable . j5306) (raise . j5305) (eval . j3185) (environment . j317d) (make-enumeration . j5304) (enum-set=? . j5303) (enum-set-universe . j5302) (enum-set-union . j5301) (enum-set-subset? . j5300) (enum-set-projection . j52ff) (enum-set-member? . j52fe) (enum-set-intersection . j52fd) (enum-set-indexer . j52fc) (enum-set-difference . j52fb) (enum-set-constructor . j52fa) (enum-set-complement . j52f9) (enum-set->list . j52f8) (who-condition? . j4d1b) (warning? . j4c93) (violation? . j4cd2) (undefined-violation? . j4d92) (syntax-violation? . j4d79) (syntax-violation-subform . j4d7d) (syntax-violation-form . j4d7b) (syntax-violation . j31a5) (simple-conditions . j52f7) (serious-condition? . j4ca8) (non-continuable-violation? . j4d32) (message-condition? . j4c7c) (make-who-condition . j4d17) (make-warning . j4c91) (make-violation . j4cd0) (make-undefined-violation . j4d90) (make-syntax-violation . j4d73) (make-serious-condition . j4ca6) (make-non-continuable-violation . j4d30) (make-message-condition . j4c78) (make-lexical-violation . j4d5a) (make-irritants-condition . j4cfc) (make-implementation-restriction-violation . j4d45) (make-error . j4cbb) (make-assertion-violation . j4ce5) (lexical-violation? . j4d5c) (irritants-condition? . j4d00) (implementation-restriction-violation? . j4d47) (error? . j4cbd) (condition-who . j4d1d) (condition-predicate . j52f6) (condition-message . j4c7e) (condition-irritants . j4d02) (condition-accessor . j52f5) (condition . j52f4) (assertion-violation? . j4ce7) (condition? . j52f3) (utf32->string . j52f2) (utf16->string . j52f1) (utf8->string . j52f0) (uint-list->bytevector . j52ef) (u8-list->bytevector . j52ee) (string->utf8 . j52ed) (string->utf32 . j52ec) (string->utf16 . j52eb) (sint-list->bytevector . j52ea) (native-endianness . j52e9) (bytevector? . j52e8) (bytevector=? . j52e7) (bytevector-uint-set! . j52e6) (bytevector-uint-ref . j52e5) (bytevector-u8-set! . j52e4) (bytevector-u8-ref . j52e3) (bytevector-u64-set! . j52e2) (bytevector-u64-ref . j52e1) (bytevector-u64-native-set! . j52e0) (bytevector-u64-native-ref . j52df) (bytevector-u32-set! . j52de) (bytevector-u32-ref . j52dd) (bytevector-u32-native-set! . j52dc) (bytevector-u32-native-ref . j52db) (bytevector-u16-set! . j52da) (bytevector-u16-ref . j52d9) (bytevector-u16-native-set! . j52d8) (bytevector-u16-native-ref . j52d7) (bytevector-sint-set! . j52d6) (bytevector-sint-ref . j52d5) (bytevector-s8-set! . j52d4) (bytevector-s8-ref . j52d3) (bytevector-s64-set! . j52d2) (bytevector-s64-ref . j52d1) (bytevector-s64-native-set! . j52d0) (bytevector-s64-native-ref . j52cf) (bytevector-s32-set! . j52ce) (bytevector-s32-ref . j52cd) (bytevector-s32-native-set! . j52cc) (bytevector-s32-native-ref . j52cb) (bytevector-s16-set! . j52ca) (bytevector-s16-ref . j52c9) (bytevector-s16-native-set! . j52c8) (bytevector-s16-native-ref . j52c7) (bytevector-length . j52c6) (bytevector-ieee-single-ref . j52c5) (bytevector-ieee-single-set! . j52c4) (bytevector-ieee-single-native-set! . j52c3) (bytevector-ieee-single-native-ref . j52c2) (bytevector-ieee-double-set! . j52c1) (bytevector-ieee-double-ref . j52c0) (bytevector-ieee-double-native-set! . j52bf) (bytevector-ieee-double-native-ref . j52be) (bytevector-fill! . j52bd) (bytevector-copy! . j52bc) (bytevector-copy . j52bb) (bytevector->uint-list . j52ba) (bytevector->u8-list . j52b9) (bytevector->sint-list . j52b8) (no-nans-violation? . j4ed0) (no-infinities-violation? . j4ebb) (make-no-nans-violation . j4ece) (make-no-infinities-violation . j4eb9) (real->flonum . j52b7) (flzero? . j52b6) (fltruncate . j52b5) (fltan . j52b4) (flsqrt . j52b3) (flsin . j52b2) (flround . j52b1) (flpositive? . j52b0) (flonum? . j52af) (flodd? . j52ae) (flnumerator . j52ad) (flnegative? . j52ac) (flnan? . j52ab) (flmod0 . j52aa) (flmod . j52a9) (flmin . j52a8) (flmax . j52a7) (fllog . j52a6) (flinteger? . j52a5) (flinfinite? . j52a4) (flfloor . j52a3) (flfinite? . j52a2) (flexpt . j52a1) (flexp . j52a0) (fleven? . j529f) (fldiv0-and-mod0 . j529e) (fldiv0 . j529d) (fldiv-and-mod . j529c) (fldiv . j529b) (fldenominator . j529a) (flcos . j5299) (flceiling . j5298) (flatan . j5297) (flasin . j5296) (flacos . j5295) (flabs . j5294) (fl>? . j5293) (fl>=? . j5292) (fl=? . j5291) (fl<? . j5290) (fl<=? . j528f) (fl/ . j528e) (fl- . j528d) (fl+ . j528c) (fl* . j528b) (fixnum->flonum . j528a) (fxzero? . j5289) (fxxor . j5288) (fxrotate-bit-field . j5287) (fxreverse-bit-field . j5286) (fxpositive? . j5285) (fxodd? . j5284) (fxnot . j5283) (fxnegative? . j5282) (fxmod0 . j5281) (fxmod . j5280) (fxmin . j527f) (fxmax . j527e) (fxlength . j527d) (fxior . j527c) (fxif . j527b) (fxfirst-bit-set . j527a) (fxeven? . j5279) (fxdiv0-and-mod0 . j5278) (fxdiv0 . j5277) (fxdiv-and-mod . j5276) (fxdiv . j5275) (fxcopy-bit-field . j5274) (fxcopy-bit . j5273) (fxbit-set? . j5272) (fxbit-field . j5271) (fxbit-count . j5270) (fxarithmetic-shift-right . j526f) (fxarithmetic-shift-left . j526e) (fxarithmetic-shift . j526d) (fxand . j526c) (fx>? . j526b) (fx>=? . j526a) (fx=? . j5269) (fx<? . j5268) (fx<=? . j5267) (fx-/carry . j5266) (fx- . j5265) (fx+/carry . j5264) (fx+ . j5263) (fx*/carry . j5262) (fx* . j5261) (greatest-fixnum . j5260) (least-fixnum . j525f) (fixnum-width . j525e) (fixnum? . j525d) (bitwise-rotate-bit-field . j525c) (bitwise-reverse-bit-field . j525b) (bitwise-length . j525a) (bitwise-if . j5259) (bitwise-first-bit-set . j5258) (bitwise-copy-bit-field . j5257) (bitwise-copy-bit . j5256) (bitwise-bit-set? . j5255) (bitwise-bit-field . j5254) (bitwise-bit-count . j5253) (bitwise-xor . j5252) (bitwise-ior . j5251) (bitwise-and . j5250) (bitwise-not . j524f) (bitwise-arithmetic-shift-right . j524e) (bitwise-arithmetic-shift-left . j524d) (bitwise-arithmetic-shift . j524c) (zero? . j524b) (vector? . j524a) (vector-set! . j5249) (vector-ref . j5248) (vector-map . j5247) (vector-length . j5246) (vector-for-each . j5245) (vector-fill! . j5244) (vector->list . j5243) (vector . j5242) (values . j5241) (truncate . j5240) (tan . j523f) (symbol? . j523e) (symbol=? . j523d) (symbol->string . j523c) (substring . j523b) (string? . j523a) (string>? . j5239) (string>=? . j5238) (string=? . j5237) (string<? . j5236) (string<=? . j5235) (string-ref . j5234) (string-length . j5233) (string-for-each . j5232) (string-copy . j5231) (string-append . j5230) (string->symbol . j522f) (string->number . j522e) (string->list . j522d) (string . j522c) (sqrt . j522b) (sin . j522a) (round . j5229) (reverse . j5228) (real? . j5227) (real-valued? . j5226) (real-part . j5225) (rationalize . j5224) (rational? . j5223) (rational-valued? . j5222) (procedure? . j5221) (positive? . j5220) (pair? . j521f) (odd? . j521e) (numerator . j521d) (number? . j521c) (number->string . j521b) (null? . j521a) (not . j5219) (negative? . j5218) (nan? . j5217) (min . j5216) (max . j5215) (map . j5214) (make-vector . j5213) (make-string . j5212) (make-rectangular . j5211) (make-polar . j5210) (magnitude . j520f) (log . j520e) (list? . j520d) (list-tail . j520c) (list-ref . j520b) (list->vector . j520a) (list->string . j5209) (list . j5208) (length . j5207) (lcm . j5206) (integer? . j5205) (integer-valued? . j5204) (integer->char . j5203) (infinite? . j5202) (inexact? . j5201) (inexact . j5200) (imag-part . j51ff) (gcd . j51fe) (for-each . j51fd) (floor . j51fc) (finite? . j51fb) (expt . j51fa) (exp . j51f9) (exact? . j51f8) (exact-integer-sqrt . j51f7) (exact . j51f6) (even? . j51f5) (error . j51f4) (eqv? . j51f3) (equal? . j51f2) (eq? . j51f1) (dynamic-wind . j51f0) (div0-and-mod0 . j51ef) (mod0 . j51ee) (div0 . j51ed) (div-and-mod . j51ec) (mod . j51eb) (div . j51ea) (denominator . j51e9) (cos . j51e8) (cons . j51e7) (complex? . j51e6) (char? . j51e5) (char>? . j51e4) (char>=? . j51e3) (char=? . j51e2) (char<? . j51e1) (char<=? . j51e0) (char->integer . j51df) (ceiling . j51de) (call-with-values . j51dd) (call/cc . j51dc) (call-with-current-continuation . j51db) (cddddr . j51da) (cdddar . j51d9) (cddadr . j51d8) (cddaar . j51d7) (cdaddr . j51d6) (cdadar . j51d5) (cdaadr . j51d4) (cdaaar . j51d3) (cadddr . j51d2) (caddar . j51d1) (cadadr . j51d0) (cadaar . j51cf) (caaddr . j51ce) (caadar . j51cd) (caaadr . j51cc) (caaaar . j51cb) (cdddr . j51ca) (cddar . j51c9) (cdadr . j51c8) (cdaar . j51c7) (caddr . j51c6) (cadar . j51c5) (caadr . j51c4) (caaar . j51c3) (cddr . j51c2) (cdar . j51c1) (cadr . j51c0) (caar . j51bf) (cdr . j51be) (car . j51bd) (boolean? . j51bc) (boolean=? . j51bb) (atan . j51ba) (assertion-violation . j51b9) (assertion-error . j319f) (asin . j51b8) (apply . j51b7) (append . j51b6) (angle . j51b5) (acos . j51b4) (abs . j51b3) (/ . j51b2) (* . j51b1) (- . j51b0) (+ . j51af) (>= . j51ae) (> . j51ad) (= . j51ac) (<= . j51ab) (< . j51aa) (library . j51a9) (&no-nans . j51a8) (&no-infinities . j51a7) (&i/o-encoding . j51a6) (&i/o-decoding . j51a5) (&i/o-port . j51a4) (&i/o-file-does-not-exist . j51a3) (&i/o-file-already-exists . j51a2) (&i/o-file-is-read-only . j51a1) (&i/o-file-protection . j51a0) (&i/o-filename . j519f) (&i/o-invalid-position . j519e) (&i/o-write . j519d) (&i/o-read . j519c) (&i/o . j519b) (&undefined . j519a) (&syntax . j5199) (&lexical . j5198) (&implementation-restriction . j5197) (&non-continuable . j5196) (&who . j5195) (&irritants . j5194) (&assertion . j5193) (&violation . j5192) (&error . j5191) (&serious . j5190) (&warning . j518f) (&message . j518e) (&condition . j518d) (define-condition-type . j518c) (define-enumeration . j518b) (define-record-type . j518a) (parent-rtd . j5189) (nongenerative . j5188) (opaque . j5187) (sealed . j5186) (protocol . j5185) (parent . j5184) (immutable . j5183) (mutable . j5182) (fields . j5181) (error-handling-mode . j5180) (file-options . j517f) (buffer-mode . j517e) (eol-style . j517d) (guard . j517c) (trace-define . j517b) (trace-lambda . j517a) (unsyntax-splicing . j5179) (unsyntax . j5178) (unquote-splicing . j5177) (unquote . j5176) (_ . j5175) (else . j5174) (=> . j5173) (... . j5172) (assert . j5171) (endianness . j5170) (delay . j516f) (time . j516e) (do . j516d) (cond . j516c) (let* . j516b) (let*-values . j516a) (let-values . j5169) (identifier-syntax . j5168) (with-syntax . j5167) (quasisyntax . j5166) (quasiquote . j5165) (syntax-rules . j5164) (include . j5163) (define-struct . j5162) (record-constructor-descriptor . j5161) (record-type-descriptor . j5160) (case . j515f) (parameterize . j515e) (unless . j515d) (when . j515c) (or . j515b) (and . j515a) (if . j5159) (let . j5158) (letrec* . j5157) (letrec . j5156) (type-descriptor . j5155) (case-lambda . j5154) (lambda . j5153) (syntax . j5152) (syntax-case . j5151) (quote . j5150) (foreign-call . j514f) (letrec-syntax . j514e) (let-syntax . j514d) (set! . j514c) (import . j514b) (begin . j514a) (module . j5149) (define-syntax . j5148) (define . j5147)) '((j4ed4 core-prim . &no-nans-rcd) (j4ed2 core-prim . &no-nans-rtd) (j4ebf core-prim . &no-infinities-rcd) (j4ebd core-prim . &no-infinities-rtd) (j4eaa core-prim . &i/o-encoding-rcd) (j4ea8 core-prim . &i/o-encoding-rtd) (j4e8f core-prim . &i/o-decoding-rcd) (j4e8d core-prim . &i/o-decoding-rtd) (j4e7a core-prim . &i/o-port-rcd) (j4e78 core-prim . &i/o-port-rtd) (j4e5f core-prim . &i/o-file-does-not-exist-rcd) (j4e5d core-prim . &i/o-file-does-not-exist-rtd) (j4e4a core-prim . &i/o-file-already-exists-rcd) (j4e48 core-prim . &i/o-file-already-exists-rtd) (j4e35 core-prim . &i/o-file-is-read-only-rcd) (j4e33 core-prim . &i/o-file-is-read-only-rtd) (j4e20 core-prim . &i/o-file-protection-rcd) (j4e1e core-prim . &i/o-file-protection-rtd) (j4e0b core-prim . &i/o-filename-rcd) (j4e09 core-prim . &i/o-filename-rtd) (j4df0 core-prim . &i/o-invalid-position-rcd) (j4dee core-prim . &i/o-invalid-position-rtd) (j4dd5 core-prim . &i/o-write-rcd) (j4dd3 core-prim . &i/o-write-rtd) (j4dc0 core-prim . &i/o-read-rcd) (j4dbe core-prim . &i/o-read-rtd) (j4dab core-prim . &i/o-rcd) (j4da9 core-prim . &i/o-rtd) (j4d96 core-prim . &undefined-rcd) (j4d94 core-prim . &undefined-rtd) (j4d81 core-prim . &syntax-rcd) (j4d7f core-prim . &syntax-rtd) (j4d60 core-prim . &lexical-rcd) (j4d5e core-prim . &lexical-rtd) (j4d4b core-prim . &implementation-restriction-rcd) (j4d49 core-prim . &implementation-restriction-rtd) (j4d36 core-prim . &non-continuable-rcd) (j4d34 core-prim . &non-continuable-rtd) (j4d21 core-prim . &who-rcd) (j4d1f core-prim . &who-rtd) (j4d06 core-prim . &irritants-rcd) (j4d04 core-prim . &irritants-rtd) (j4ceb core-prim . &assertion-rcd) (j4ce9 core-prim . &assertion-rtd) (j4cd6 core-prim . &violation-rcd) (j4cd4 core-prim . &violation-rtd) (j4cc1 core-prim . &error-rcd) (j4cbf core-prim . &error-rtd) (j4cac core-prim . &serious-rcd) (j4caa core-prim . &serious-rtd) (j4c97 core-prim . &warning-rcd) (j4c95 core-prim . &warning-rtd) (j4c82 core-prim . &message-rcd) (j4c80 core-prim . &message-rtd) (j4c23 core-prim . &condition-rcd) (j4c21 core-prim . &condition-rtd) (j31a1 core-prim . syntax-error) (j30c5 core-prim . syntax-dispatch) (j546d core-prim . pretty-print) (j546c core-prim . eval-core) (j546b core-prim . set-symbol-value!) (j546a core-prim . symbol-value) (j5469 core-prim . gensym) (j5468 core-prim . void) (j4fe5 core-prim . load) (j31b3 core-prim . interaction-environment) (j5467 core-prim . char-ready?) (j5466 core-prim . regexp?) (j5465 core-prim . read-line) (j5464 core-prim . gensym-prefix-set!) (j5463 core-prim . ungensym) (j5462 core-prim . alist->eq-hash-table) (j5461 core-prim . assoc-ref) (j5460 core-prim . print) (j545f core-prim . format) (j545e core-prim . host-os) (j2afe core-prim . library-path) (j545d core-prim . standard-library-path) (j545c core-prim . file-newer?) (j545b core-prim . stat-mtime) (j545a core-prim . write-to-file) (j5459 core-prim . file->list) (j5458 core-prim . file->string) (j5457 core-prim . digit->integer) (j5456 core-prim . call-with-string-input-port) (j5455 core-prim . call-with-string-io) (j5454 core-prim . string-split) (j5453 core-prim . bytevector-for-each) (j5452 core-prim . string->regexp) (j5451 core-prim . rxmatch) (j5450 core-prim . regexp-replace-all) (j544f core-prim . hashtable-for-each) (j28e8 core-prim . mosh-cache-dir) (j544e core-prim . call-process) (j544d core-prim . local-tz-offset) (j544c core-prim . microseconds) (j544b core-prim . directory-list) (j544a core-prim . set-current-directory!) (j5449 core-prim . expand-path) (j5448 core-prim . current-directory) (j5447 core-prim . %spawn) (j5446 core-prim . %waitpid) (j5445 core-prim . simple-struct-name) (j5444 core-prim . simple-struct-set!) (j5443 core-prim . simple-struct-ref) (j5442 core-prim . make-simple-struct) (j5441 core-prim . simple-struct?) (j5440 core-prim . pointer-ref-c-int64) (j543f core-prim . pointer-ref-c-int32) (j543e core-prim . pointer-ref-c-int16) (j543d core-prim . pointer-ref-c-int8) (j543c core-prim . pointer-ref-c-uint64) (j543b core-prim . pointer-ref-c-uint32) (j543a core-prim . pointer-ref-c-uint16) (j5439 core-prim . pointer-ref-c-uint8) (j5438 core-prim . pointer-set-c-uint64!) (j5437 core-prim . pointer-set-c-uint32!) (j5436 core-prim . pointer-set-c-uint16!) (j5435 core-prim . pointer-set-c-uint8!) (j5434 core-prim . pointer-set-c-int64!) (j5433 core-prim . pointer-set-c-int32!) (j5432 core-prim . pointer-set-c-int16!) (j5431 core-prim . pointer-set-c-int8!) (j5430 core-prim . pointer-set-c-pointer!) (j542f core-prim . pointer-set-c-double!) (j542e core-prim . pointer-set-c-float!) (j542d core-prim . pointer-set-c-long-long!) (j542c core-prim . pointer-set-c-long!) (j542b core-prim . pointer-set-c-int!) (j542a core-prim . pointer-set-c-short!) (j5429 core-prim . pointer-set-c-char!) (j5428 core-prim . pointer-ref-c-pointer) (j5427 core-prim . pointer-ref-c-double) (j5426 core-prim . pointer-ref-c-float) (j5425 core-prim . pointer-ref-c-unsigned-long-long) (j5424 core-prim . pointer-ref-c-signed-long-long) (j5423 core-prim . pointer-ref-c-unsigned-long) (j5422 core-prim . pointer-ref-c-signed-long) (j5421 core-prim . pointer-ref-c-unsigned-int) (j5420 core-prim . pointer-ref-c-signed-int) (j541f core-prim . pointer-ref-c-unsigned-short) (j541e core-prim . pointer-ref-c-signed-short) (j541d core-prim . pointer-ref-c-unsigned-char) (j541c core-prim . pointer-ref-c-signed-char) (j541b core-prim . pointer->integer) (j541a core-prim . integer->pointer) (j5419 core-prim . pointer?) (j5418 core-prim . shared-errno) (j5417 core-prim . %ffi-free-c-callback-trampoline) (j5416 core-prim . %ffi-make-c-callback-trampoline) (j5415 core-prim . %ffi-free) (j5414 core-prim . %ffi-malloc) (j5413 core-prim . %ffi-supported?) (j5412 core-prim . %ffi-pointer->string) (j5411 core-prim . %ffi-call) (j5410 core-prim . %ffi-lookup) (j540f core-prim . %ffi-open) (j540e core-prim . null-terminated-utf8->string) (j540d core-prim . null-terminated-bytevector->string) (j540c core-prim . %fork) (j540b core-prim . %pipe) (j540a core-prim . p) (j5409 core-prim . open-output-string) (j5408 core-prim . get-output-string) (j5407 core-prim . file-stat-ctime) (j5406 core-prim . file-stat-atime) (j5405 core-prim . file-stat-mtime) (j5404 core-prim . file-size-in-bytes) (j5403 core-prim . file-writable?) (j5402 core-prim . file-executable?) (j5401 core-prim . file-readable?) (j5400 core-prim . file-regular?) (j53ff core-prim . file-symbolic-link?) (j53fe core-prim . file-directory?) (j53fd core-prim . create-symbolic-link) (j53fc core-prim . rename-file) (j53fb core-prim . delete-directory) (j53fa core-prim . create-directory) (j53f9 core-prim . create-mosh-cache-dir) (j53f8 core-prim . get-environment-variables) (j53f7 core-prim . current-exception-handler) (j53f6 core-prim . get-environment-variable) (j53f5 core-prim . join-wraps) (j53f4 core-prim . id->real-label) (j53f3 core-prim . same-marks?) (j53f2 core-prim . same-marks*?) (j53f1 core-prim . get-timeofday) (j53f0 core-prim . get-command-line) (j53ef core-prim . sys-display) (j53ee core-prim . whereis) (j53ed core-prim . register) (j53ec core-prim . vm-join!) (j53eb core-prim . vm-set-value!) (j53ea core-prim . vm?) (j53e9 core-prim . main-vm?) (j53e8 core-prim . vm-eval) (j53e7 core-prim . vm-self) (j53e6 core-prim . vm-start!) (j53e5 core-prim . make-vm) (j53e4 core-prim . mutex-try-lock!) (j53e3 core-prim . mutex-unlock!) (j53e2 core-prim . mutex-lock!) (j53e1 core-prim . mutex?) (j53e0 core-prim . make-mutex) (j53df core-prim . condition-variable-notify-all!) (j53de core-prim . condition-variable-notify!) (j53dd core-prim . condition-variable-wait!) (j53dc core-prim . make-condition-variable) (j53db core-prim . mosh-executable-path) (j53da core-prim . make-file-options) (j53d9 core-prim . source-info) (j53d8 core-prim . make-compiler-instruction) (j53d7 core-prim . make-instruction) (j53d6 core-prim . set-source-info!) (j53d5 core-prim . bignum?) (j53d4 core-prim . fast-equal?) (j53d3 core-prim . fasl-read) (j53d2 core-prim . fasl-write) (j53d1 core-prim . time-usage) (j53d0 core-prim . os-constant) (j53cf core-prim . disasm) (j28e6 core-prim . make-parameter) (j53ce core-prim . socket-port) (j53cd core-prim . socket-shutdown) (j53cc core-prim . socket-close) (j53cb core-prim . socket-send) (j53ca core-prim . socket-recv!) (j53c9 core-prim . socket-recv) (j53c8 core-prim . make-server-socket) (j53c7 core-prim . make-client-socket) (j53c6 core-prim . socket-accept) (j53c5 core-prim . socket?) (j53c4 core-prim . string-upcase) (j53c3 core-prim . string-titlecase) (j53c2 core-prim . string-normalize-nfkd) (j53c1 core-prim . string-normalize-nfkc) (j53c0 core-prim . string-normalize-nfd) (j53bf core-prim . string-normalize-nfc) (j53be core-prim . string-foldcase) (j53bd core-prim . string-downcase) (j53bc core-prim . string-ci>?) (j53bb core-prim . string-ci>=?) (j53ba core-prim . string-ci=?) (j53b9 core-prim . string-ci<?) (j53b8 core-prim . string-ci<=?) (j53b7 core-prim . char-whitespace?) (j53b6 core-prim . char-upper-case?) (j53b5 core-prim . char-title-case?) (j53b4 core-prim . char-numeric?) (j53b3 core-prim . char-lower-case?) (j53b2 core-prim . char-general-category) (j53b1 core-prim . char-upcase) (j53b0 core-prim . char-titlecase) (j53af core-prim . char-foldcase) (j53ae core-prim . char-downcase) (j53ad core-prim . char-ci>?) (j53ac core-prim . char-ci>=?) (j53ab core-prim . char-ci=?) (j53aa core-prim . char-ci<?) (j53a9 core-prim . char-ci<=?) (j53a8 core-prim . char-alphabetic?) (j2ef0 core-prim . make-variable-transformer) (j31a7 core-prim . identifier?) (j3193 core-prim . generate-temporaries) (j3195 core-prim . free-identifier=?) (j31ab core-prim . syntax->datum) (j31a9 core-prim . datum->syntax) (j3197 core-prim . bound-identifier=?) (j53a7 core-prim . record-type-descriptor?) (j53a6 core-prim . record-predicate) (j53a5 core-prim . record-mutator) (j53a4 core-prim . record-constructor) (j53a3 core-prim . record-accessor) (j53a2 core-prim . make-record-type-descriptor) (j53a1 core-prim . make-record-constructor-descriptor) (j53a0 core-prim . record?) (j539f core-prim . record-type-uid) (j539e core-prim . record-type-sealed?) (j539d core-prim . record-type-parent) (j539c core-prim . record-type-opaque?) (j539b core-prim . record-type-name) (j539a core-prim . record-type-generative?) (j5399 core-prim . record-type-field-names) (j5398 core-prim . record-rtd) (j5397 core-prim . record-field-mutable?) (j5396 core-prim . delete-file) (j5395 core-prim . file-exists?) (j5394 core-prim . vector-sort!) (j5393 core-prim . vector-sort) (j5392 core-prim . list-sort) (j5391 core-prim . symbol-hash) (j5390 core-prim . string-ci-hash) (j538f core-prim . string-hash) (j538e core-prim . equal-hash) (j538d core-prim . hashtable-equivalence-function) (j538c core-prim . make-hashtable) (j538b core-prim . hashtable-hash-function) (j538a core-prim . make-eqv-hashtable) (j5389 core-prim . make-eq-hashtable) (j5388 core-prim . hashtable?) (j5387 core-prim . hashtable-update!) (j5386 core-prim . hashtable-size) (j5385 core-prim . hashtable-set!) (j5384 core-prim . hashtable-ref) (j5383 core-prim . hashtable-mutable?) (j5382 core-prim . hashtable-keys) (j5381 core-prim . hashtable-entries) (j5380 core-prim . hashtable-delete!) (j537f core-prim . hashtable-copy) (j537e core-prim . hashtable-contains?) (j537d core-prim . hashtable-clear!) (j537c core-prim . call-with-output-file) (j537b core-prim . call-with-input-file) (j537a core-prim . write-char) (j5379 core-prim . write) (j5378 core-prim . with-output-to-file) (j5377 core-prim . with-input-from-file) (j5376 core-prim . read-char) (j5375 core-prim . read) (j5374 core-prim . peek-char) (j5373 core-prim . open-output-file) (j5372 core-prim . open-input-file) (j5371 core-prim . newline) (j5370 core-prim . display) (j536f core-prim . close-output-port) (j536e core-prim . close-input-port) (j536d core-prim . eof-object?) (j536c core-prim . eof-object) (j536b core-prim . current-error-port) (j536a core-prim . current-output-port) (j5369 core-prim . current-input-port) (j5368 core-prim . output-port?) (j5367 core-prim . input-port?) (j5366 core-prim . utf-8-codec) (j5365 core-prim . utf-16-codec) (j5364 core-prim . transcoder-error-handling-mode) (j5363 core-prim . transcoder-eol-style) (j5362 core-prim . transcoder-codec) (j5361 core-prim . transcoded-port) (j5360 core-prim . textual-port?) (j535f core-prim . string->bytevector) (j535e core-prim . standard-output-port) (j535d core-prim . standard-input-port) (j535c core-prim . standard-error-port) (j535b core-prim . set-port-position!) (j535a core-prim . put-u8) (j5359 core-prim . put-string) (j5358 core-prim . put-datum) (j5357 core-prim . put-char) (j5356 core-prim . put-bytevector) (j5355 core-prim . port?) (j5354 core-prim . port-transcoder) (j5353 core-prim . port-position) (j5352 core-prim . port-has-set-port-position!?) (j5351 core-prim . port-has-port-position?) (j5350 core-prim . port-eof?) (j534f core-prim . output-port-buffer-mode) (j534e core-prim . open-string-output-port) (j534d core-prim . open-string-input-port) (j534c core-prim . open-file-output-port) (j534b core-prim . open-file-input/output-port) (j534a core-prim . open-file-input-port) (j5349 core-prim . open-bytevector-output-port) (j5348 core-prim . open-bytevector-input-port) (j5347 core-prim . native-transcoder) (j5346 core-prim . native-eol-style) (j5345 core-prim . make-transcoder) (j5344 core-prim . latin-1-codec) (j4dcf core-prim . make-i/o-write-error) (j4dba core-prim . make-i/o-read-error) (j4e70 core-prim . make-i/o-port-error) (j4de6 core-prim . make-i/o-invalid-position-error) (j4e01 core-prim . make-i/o-filename-error) (j4e1a core-prim . make-i/o-file-protection-error) (j4e2f core-prim . make-i/o-file-is-read-only-error) (j4e59 core-prim . make-i/o-file-does-not-exist-error) (j4e44 core-prim . make-i/o-file-already-exists-error) (j4da5 core-prim . make-i/o-error) (j4ea0 core-prim . make-i/o-encoding-error) (j4e89 core-prim . make-i/o-decoding-error) (j5343 core-prim . make-custom-textual-output-port) (j5342 core-prim . make-custom-textual-input/output-port) (j5341 core-prim . make-custom-textual-input-port) (j5340 core-prim . make-custom-binary-output-port) (j533f core-prim . make-custom-binary-input/output-port) (j533e core-prim . make-custom-binary-input-port) (j533d core-prim . make-bytevector) (j533c core-prim . lookahead-u8) (j533b core-prim . lookahead-char) (j4dd1 core-prim . i/o-write-error?) (j4dbc core-prim . i/o-read-error?) (j4e74 core-prim . i/o-port-error?) (j4dea core-prim . i/o-invalid-position-error?) (j4e05 core-prim . i/o-filename-error?) (j4e1c core-prim . i/o-file-protection-error?) (j4e31 core-prim . i/o-file-is-read-only-error?) (j4e5b core-prim . i/o-file-does-not-exist-error?) (j4e46 core-prim . i/o-file-already-exists-error?) (j4da7 core-prim . i/o-error?) (j4dec core-prim . i/o-error-position) (j4e76 core-prim . i/o-error-port) (j4e07 core-prim . i/o-error-filename) (j4ea4 core-prim . i/o-encoding-error?) (j4ea6 core-prim . i/o-encoding-error-char) (j4e8b core-prim . i/o-decoding-error?) (j533a core-prim . get-u8) (j5339 core-prim . get-string-n!) (j5338 core-prim . get-string-n) (j5337 core-prim . get-string-all) (j5336 core-prim . get-line) (j5335 core-prim . get-datum) (j5334 core-prim . get-char) (j5333 core-prim . get-bytevector-some) (j5332 core-prim . get-bytevector-n!) (j5331 core-prim . get-bytevector-n) (j5330 core-prim . get-bytevector-all) (j532f core-prim . flush-output-port) (j532e core-prim . close-port) (j3181 core-prim . scheme-report-environment) (j532d core-prim . quotient) (j317f core-prim . null-environment) (j532c core-prim . remainder) (j532b core-prim . modulo) (j532a core-prim . inexact->exact) (j5329 core-prim . force) (j5328 core-prim . exact->inexact) (j5327 core-prim . make-promise) (j5326 core-prim . exit) (j4fdf core-prim . command-line) (j5325 core-prim . string-fill!) (j5324 core-prim . string-set!) (j5323 core-prim . set-cdr!) (j5322 core-prim . set-car!) (j5321 core-prim . remove) (j5320 core-prim . remv) (j531f core-prim . remp) (j531e core-prim . remq) (j531d core-prim . partition) (j531c core-prim . memv) (j531b core-prim . memq) (j531a core-prim . memp) (j5319 core-prim . member) (j5318 core-prim . exists) (j5317 core-prim . for-all) (j5316 core-prim . fold-right) (j5315 core-prim . fold-left) (j5314 core-prim . find) (j5313 core-prim . filter) (j5312 core-prim . cons*) (j5311 core-prim . assv) (j5310 core-prim . assq) (j530f core-prim . assp) (j530e core-prim . assoc) (j530d core-prim . call-with-string-output-port) (j530c core-prim . call-with-port) (j530b core-prim . call-with-bytevector-output-port) (j530a core-prim . bytevector->string) (j5309 core-prim . buffer-mode?) (j5308 core-prim . binary-port?) (j5307 core-prim . with-exception-handler) (j5306 core-prim . raise-continuable) (j5305 core-prim . raise) (j3185 core-prim . eval) (j317d core-prim . environment) (j5304 core-prim . make-enumeration) (j5303 core-prim . enum-set=?) (j5302 core-prim . enum-set-universe) (j5301 core-prim . enum-set-union) (j5300 core-prim . enum-set-subset?) (j52ff core-prim . enum-set-projection) (j52fe core-prim . enum-set-member?) (j52fd core-prim . enum-set-intersection) (j52fc core-prim . enum-set-indexer) (j52fb core-prim . enum-set-difference) (j52fa core-prim . enum-set-constructor) (j52f9 core-prim . enum-set-complement) (j52f8 core-prim . enum-set->list) (j4d1b core-prim . who-condition?) (j4c93 core-prim . warning?) (j4cd2 core-prim . violation?) (j4d92 core-prim . undefined-violation?) (j4d79 core-prim . syntax-violation?) (j4d7d core-prim . syntax-violation-subform) (j4d7b core-prim . syntax-violation-form) (j31a5 core-prim . syntax-violation) (j52f7 core-prim . simple-conditions) (j4ca8 core-prim . serious-condition?) (j4d32 core-prim . non-continuable-violation?) (j4c7c core-prim . message-condition?) (j4d17 core-prim . make-who-condition) (j4c91 core-prim . make-warning) (j4cd0 core-prim . make-violation) (j4d90 core-prim . make-undefined-violation) (j4d73 core-prim . make-syntax-violation) (j4ca6 core-prim . make-serious-condition) (j4d30 core-prim . make-non-continuable-violation) (j4c78 core-prim . make-message-condition) (j4d5a core-prim . make-lexical-violation) (j4cfc core-prim . make-irritants-condition) (j4d45 core-prim . make-implementation-restriction-violation) (j4cbb core-prim . make-error) (j4ce5 core-prim . make-assertion-violation) (j4d5c core-prim . lexical-violation?) (j4d00 core-prim . irritants-condition?) (j4d47 core-prim . implementation-restriction-violation?) (j4cbd core-prim . error?) (j4d1d core-prim . condition-who) (j52f6 core-prim . condition-predicate) (j4c7e core-prim . condition-message) (j4d02 core-prim . condition-irritants) (j52f5 core-prim . condition-accessor) (j52f4 core-prim . condition) (j4ce7 core-prim . assertion-violation?) (j52f3 core-prim . condition?) (j52f2 core-prim . utf32->string) (j52f1 core-prim . utf16->string) (j52f0 core-prim . utf8->string) (j52ef core-prim . uint-list->bytevector) (j52ee core-prim . u8-list->bytevector) (j52ed core-prim . string->utf8) (j52ec core-prim . string->utf32) (j52eb core-prim . string->utf16) (j52ea core-prim . sint-list->bytevector) (j52e9 core-prim . native-endianness) (j52e8 core-prim . bytevector?) (j52e7 core-prim . bytevector=?) (j52e6 core-prim . bytevector-uint-set!) (j52e5 core-prim . bytevector-uint-ref) (j52e4 core-prim . bytevector-u8-set!) (j52e3 core-prim . bytevector-u8-ref) (j52e2 core-prim . bytevector-u64-set!) (j52e1 core-prim . bytevector-u64-ref) (j52e0 core-prim . bytevector-u64-native-set!) (j52df core-prim . bytevector-u64-native-ref) (j52de core-prim . bytevector-u32-set!) (j52dd core-prim . bytevector-u32-ref) (j52dc core-prim . bytevector-u32-native-set!) (j52db core-prim . bytevector-u32-native-ref) (j52da core-prim . bytevector-u16-set!) (j52d9 core-prim . bytevector-u16-ref) (j52d8 core-prim . bytevector-u16-native-set!) (j52d7 core-prim . bytevector-u16-native-ref) (j52d6 core-prim . bytevector-sint-set!) (j52d5 core-prim . bytevector-sint-ref) (j52d4 core-prim . bytevector-s8-set!) (j52d3 core-prim . bytevector-s8-ref) (j52d2 core-prim . bytevector-s64-set!) (j52d1 core-prim . bytevector-s64-ref) (j52d0 core-prim . bytevector-s64-native-set!) (j52cf core-prim . bytevector-s64-native-ref) (j52ce core-prim . bytevector-s32-set!) (j52cd core-prim . bytevector-s32-ref) (j52cc core-prim . bytevector-s32-native-set!) (j52cb core-prim . bytevector-s32-native-ref) (j52ca core-prim . bytevector-s16-set!) (j52c9 core-prim . bytevector-s16-ref) (j52c8 core-prim . bytevector-s16-native-set!) (j52c7 core-prim . bytevector-s16-native-ref) (j52c6 core-prim . bytevector-length) (j52c5 core-prim . bytevector-ieee-single-ref) (j52c4 core-prim . bytevector-ieee-single-set!) (j52c3 core-prim . bytevector-ieee-single-native-set!) (j52c2 core-prim . bytevector-ieee-single-native-ref) (j52c1 core-prim . bytevector-ieee-double-set!) (j52c0 core-prim . bytevector-ieee-double-ref) (j52bf core-prim . bytevector-ieee-double-native-set!) (j52be core-prim . bytevector-ieee-double-native-ref) (j52bd core-prim . bytevector-fill!) (j52bc core-prim . bytevector-copy!) (j52bb core-prim . bytevector-copy) (j52ba core-prim . bytevector->uint-list) (j52b9 core-prim . bytevector->u8-list) (j52b8 core-prim . bytevector->sint-list) (j4ed0 core-prim . no-nans-violation?) (j4ebb core-prim . no-infinities-violation?) (j4ece core-prim . make-no-nans-violation) (j4eb9 core-prim . make-no-infinities-violation) (j52b7 core-prim . real->flonum) (j52b6 core-prim . flzero?) (j52b5 core-prim . fltruncate) (j52b4 core-prim . fltan) (j52b3 core-prim . flsqrt) (j52b2 core-prim . flsin) (j52b1 core-prim . flround) (j52b0 core-prim . flpositive?) (j52af core-prim . flonum?) (j52ae core-prim . flodd?) (j52ad core-prim . flnumerator) (j52ac core-prim . flnegative?) (j52ab core-prim . flnan?) (j52aa core-prim . flmod0) (j52a9 core-prim . flmod) (j52a8 core-prim . flmin) (j52a7 core-prim . flmax) (j52a6 core-prim . fllog) (j52a5 core-prim . flinteger?) (j52a4 core-prim . flinfinite?) (j52a3 core-prim . flfloor) (j52a2 core-prim . flfinite?) (j52a1 core-prim . flexpt) (j52a0 core-prim . flexp) (j529f core-prim . fleven?) (j529e core-prim . fldiv0-and-mod0) (j529d core-prim . fldiv0) (j529c core-prim . fldiv-and-mod) (j529b core-prim . fldiv) (j529a core-prim . fldenominator) (j5299 core-prim . flcos) (j5298 core-prim . flceiling) (j5297 core-prim . flatan) (j5296 core-prim . flasin) (j5295 core-prim . flacos) (j5294 core-prim . flabs) (j5293 core-prim . fl>?) (j5292 core-prim . fl>=?) (j5291 core-prim . fl=?) (j5290 core-prim . fl<?) (j528f core-prim . fl<=?) (j528e core-prim . fl/) (j528d core-prim . fl-) (j528c core-prim . fl+) (j528b core-prim . fl*) (j528a core-prim . fixnum->flonum) (j5289 core-prim . fxzero?) (j5288 core-prim . fxxor) (j5287 core-prim . fxrotate-bit-field) (j5286 core-prim . fxreverse-bit-field) (j5285 core-prim . fxpositive?) (j5284 core-prim . fxodd?) (j5283 core-prim . fxnot) (j5282 core-prim . fxnegative?) (j5281 core-prim . fxmod0) (j5280 core-prim . fxmod) (j527f core-prim . fxmin) (j527e core-prim . fxmax) (j527d core-prim . fxlength) (j527c core-prim . fxior) (j527b core-prim . fxif) (j527a core-prim . fxfirst-bit-set) (j5279 core-prim . fxeven?) (j5278 core-prim . fxdiv0-and-mod0) (j5277 core-prim . fxdiv0) (j5276 core-prim . fxdiv-and-mod) (j5275 core-prim . fxdiv) (j5274 core-prim . fxcopy-bit-field) (j5273 core-prim . fxcopy-bit) (j5272 core-prim . fxbit-set?) (j5271 core-prim . fxbit-field) (j5270 core-prim . fxbit-count) (j526f core-prim . fxarithmetic-shift-right) (j526e core-prim . fxarithmetic-shift-left) (j526d core-prim . fxarithmetic-shift) (j526c core-prim . fxand) (j526b core-prim . fx>?) (j526a core-prim . fx>=?) (j5269 core-prim . fx=?) (j5268 core-prim . fx<?) (j5267 core-prim . fx<=?) (j5266 core-prim . fx-/carry) (j5265 core-prim . fx-) (j5264 core-prim . fx+/carry) (j5263 core-prim . fx+) (j5262 core-prim . fx*/carry) (j5261 core-prim . fx*) (j5260 core-prim . greatest-fixnum) (j525f core-prim . least-fixnum) (j525e core-prim . fixnum-width) (j525d core-prim . fixnum?) (j525c core-prim . bitwise-rotate-bit-field) (j525b core-prim . bitwise-reverse-bit-field) (j525a core-prim . bitwise-length) (j5259 core-prim . bitwise-if) (j5258 core-prim . bitwise-first-bit-set) (j5257 core-prim . bitwise-copy-bit-field) (j5256 core-prim . bitwise-copy-bit) (j5255 core-prim . bitwise-bit-set?) (j5254 core-prim . bitwise-bit-field) (j5253 core-prim . bitwise-bit-count) (j5252 core-prim . bitwise-xor) (j5251 core-prim . bitwise-ior) (j5250 core-prim . bitwise-and) (j524f core-prim . bitwise-not) (j524e core-prim . bitwise-arithmetic-shift-right) (j524d core-prim . bitwise-arithmetic-shift-left) (j524c core-prim . bitwise-arithmetic-shift) (j524b core-prim . zero?) (j524a core-prim . vector?) (j5249 core-prim . vector-set!) (j5248 core-prim . vector-ref) (j5247 core-prim . vector-map) (j5246 core-prim . vector-length) (j5245 core-prim . vector-for-each) (j5244 core-prim . vector-fill!) (j5243 core-prim . vector->list) (j5242 core-prim . vector) (j5241 core-prim . values) (j5240 core-prim . truncate) (j523f core-prim . tan) (j523e core-prim . symbol?) (j523d core-prim . symbol=?) (j523c core-prim . symbol->string) (j523b core-prim . substring) (j523a core-prim . string?) (j5239 core-prim . string>?) (j5238 core-prim . string>=?) (j5237 core-prim . string=?) (j5236 core-prim . string<?) (j5235 core-prim . string<=?) (j5234 core-prim . string-ref) (j5233 core-prim . string-length) (j5232 core-prim . string-for-each) (j5231 core-prim . string-copy) (j5230 core-prim . string-append) (j522f core-prim . string->symbol) (j522e core-prim . string->number) (j522d core-prim . string->list) (j522c core-prim . string) (j522b core-prim . sqrt) (j522a core-prim . sin) (j5229 core-prim . round) (j5228 core-prim . reverse) (j5227 core-prim . real?) (j5226 core-prim . real-valued?) (j5225 core-prim . real-part) (j5224 core-prim . rationalize) (j5223 core-prim . rational?) (j5222 core-prim . rational-valued?) (j5221 core-prim . procedure?) (j5220 core-prim . positive?) (j521f core-prim . pair?) (j521e core-prim . odd?) (j521d core-prim . numerator) (j521c core-prim . number?) (j521b core-prim . number->string) (j521a core-prim . null?) (j5219 core-prim . not) (j5218 core-prim . negative?) (j5217 core-prim . nan?) (j5216 core-prim . min) (j5215 core-prim . max) (j5214 core-prim . map) (j5213 core-prim . make-vector) (j5212 core-prim . make-string) (j5211 core-prim . make-rectangular) (j5210 core-prim . make-polar) (j520f core-prim . magnitude) (j520e core-prim . log) (j520d core-prim . list?) (j520c core-prim . list-tail) (j520b core-prim . list-ref) (j520a core-prim . list->vector) (j5209 core-prim . list->string) (j5208 core-prim . list) (j5207 core-prim . length) (j5206 core-prim . lcm) (j5205 core-prim . integer?) (j5204 core-prim . integer-valued?) (j5203 core-prim . integer->char) (j5202 core-prim . infinite?) (j5201 core-prim . inexact?) (j5200 core-prim . inexact) (j51ff core-prim . imag-part) (j51fe core-prim . gcd) (j51fd core-prim . for-each) (j51fc core-prim . floor) (j51fb core-prim . finite?) (j51fa core-prim . expt) (j51f9 core-prim . exp) (j51f8 core-prim . exact?) (j51f7 core-prim . exact-integer-sqrt) (j51f6 core-prim . exact) (j51f5 core-prim . even?) (j51f4 core-prim . error) (j51f3 core-prim . eqv?) (j51f2 core-prim . equal?) (j51f1 core-prim . eq?) (j51f0 core-prim . dynamic-wind) (j51ef core-prim . div0-and-mod0) (j51ee core-prim . mod0) (j51ed core-prim . div0) (j51ec core-prim . div-and-mod) (j51eb core-prim . mod) (j51ea core-prim . div) (j51e9 core-prim . denominator) (j51e8 core-prim . cos) (j51e7 core-prim . cons) (j51e6 core-prim . complex?) (j51e5 core-prim . char?) (j51e4 core-prim . char>?) (j51e3 core-prim . char>=?) (j51e2 core-prim . char=?) (j51e1 core-prim . char<?) (j51e0 core-prim . char<=?) (j51df core-prim . char->integer) (j51de core-prim . ceiling) (j51dd core-prim . call-with-values) (j51dc core-prim . call/cc) (j51db core-prim . call-with-current-continuation) (j51da core-prim . cddddr) (j51d9 core-prim . cdddar) (j51d8 core-prim . cddadr) (j51d7 core-prim . cddaar) (j51d6 core-prim . cdaddr) (j51d5 core-prim . cdadar) (j51d4 core-prim . cdaadr) (j51d3 core-prim . cdaaar) (j51d2 core-prim . cadddr) (j51d1 core-prim . caddar) (j51d0 core-prim . cadadr) (j51cf core-prim . cadaar) (j51ce core-prim . caaddr) (j51cd core-prim . caadar) (j51cc core-prim . caaadr) (j51cb core-prim . caaaar) (j51ca core-prim . cdddr) (j51c9 core-prim . cddar) (j51c8 core-prim . cdadr) (j51c7 core-prim . cdaar) (j51c6 core-prim . caddr) (j51c5 core-prim . cadar) (j51c4 core-prim . caadr) (j51c3 core-prim . caaar) (j51c2 core-prim . cddr) (j51c1 core-prim . cdar) (j51c0 core-prim . cadr) (j51bf core-prim . caar) (j51be core-prim . cdr) (j51bd core-prim . car) (j51bc core-prim . boolean?) (j51bb core-prim . boolean=?) (j51ba core-prim . atan) (j51b9 core-prim . assertion-violation) (j319f core-prim . assertion-error) (j51b8 core-prim . asin) (j51b7 core-prim . apply) (j51b6 core-prim . append) (j51b5 core-prim . angle) (j51b4 core-prim . acos) (j51b3 core-prim . abs) (j51b2 core-prim . /) (j51b1 core-prim . *) (j51b0 core-prim . -) (j51af core-prim . +) (j51ae core-prim . >=) (j51ad core-prim . >) (j51ac core-prim . =) (j51ab core-prim . <=) (j51aa core-prim . <) (j51a9 core-prim . library) (j51a8 $core-rtd &no-nans-rtd &no-nans-rcd) (j51a7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (j51a6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (j51a5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (j51a4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (j51a3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (j51a2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (j51a1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (j51a0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (j519f $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (j519e $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (j519d $core-rtd &i/o-write-rtd &i/o-write-rcd) (j519c $core-rtd &i/o-read-rtd &i/o-read-rcd) (j519b $core-rtd &i/o-rtd &i/o-rcd) (j519a $core-rtd &undefined-rtd &undefined-rcd) (j5199 $core-rtd &syntax-rtd &syntax-rcd) (j5198 $core-rtd &lexical-rtd &lexical-rcd) (j5197 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (j5196 $core-rtd &non-continuable-rtd &non-continuable-rcd) (j5195 $core-rtd &who-rtd &who-rcd) (j5194 $core-rtd &irritants-rtd &irritants-rcd) (j5193 $core-rtd &assertion-rtd &assertion-rcd) (j5192 $core-rtd &violation-rtd &violation-rcd) (j5191 $core-rtd &error-rtd &error-rcd) (j5190 $core-rtd &serious-rtd &serious-rcd) (j518f $core-rtd &warning-rtd &warning-rcd) (j518e $core-rtd &message-rtd &message-rcd) (j518d $core-rtd &condition-rtd &condition-rcd) (j518c macro . define-condition-type) (j518b macro . define-enumeration) (j518a macro . define-record-type) (j5189 macro . parent-rtd) (j5188 macro . nongenerative) (j5187 macro . opaque) (j5186 macro . sealed) (j5185 macro . protocol) (j5184 macro . parent) (j5183 macro . immutable) (j5182 macro . mutable) (j5181 macro . fields) (j5180 macro . error-handling-mode) (j517f macro . file-options) (j517e macro . buffer-mode) (j517d macro . eol-style) (j517c macro . guard) (j517b macro . trace-define) (j517a macro . trace-lambda) (j5179 macro . unsyntax-splicing) (j5178 macro . unsyntax) (j5177 macro . unquote-splicing) (j5176 macro . unquote) (j5175 macro . _) (j5174 macro . else) (j5173 macro . =>) (j5172 macro . ...) (j5171 macro . assert) (j5170 macro . endianness) (j516f macro . delay) (j516e macro . time) (j516d macro . do) (j516c macro . cond) (j516b macro . let*) (j516a macro . let*-values) (j5169 macro . let-values) (j5168 macro . identifier-syntax) (j5167 macro . with-syntax) (j5166 macro . quasisyntax) (j5165 macro . quasiquote) (j5164 macro . syntax-rules) (j5163 macro . include) (j5162 macro . define-struct) (j5161 core-macro . record-constructor-descriptor) (j5160 core-macro . record-type-descriptor) (j515f macro . case) (j515e macro . parameterize) (j515d macro . unless) (j515c macro . when) (j515b core-macro . or) (j515a core-macro . and) (j5159 core-macro . if) (j5158 core-macro . let) (j5157 core-macro . letrec*) (j5156 core-macro . letrec) (j5155 core-macro . type-descriptor) (j5154 core-macro . case-lambda) (j5153 core-macro . lambda) (j5152 core-macro . syntax) (j5151 core-macro . syntax-case) (j5150 core-macro . quote) (j514f core-macro . foreign-call) (j514e letrec-syntax) (j514d let-syntax) (j514c set!) (j514b import) (j514a begin) (j5149 module) (j5148 define-syntax) (j5147 define)) values values '#f '#f '#f '#f) (j2cd3@j2b1f@install-library 'j548e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . j546d) (eval-core . j546c) (set-symbol-value! . j546b) (symbol-value . j546a) (gensym . j5469) (void . j5468)) '() values values '#f '#f '#f '#f) (j2cd3@j2b1f@install-library 'j548f '(mosh) '() '() '() '() '((set-symbol-value! . j546b) (symbol-value . j546a) (regexp? . j5466) (read-line . j5465) (ungensym . j5463) (alist->eq-hash-table . j5462) (assoc-ref . j5461) (print . j5460) (format . j545f) (host-os . j545e) (library-path . j2afe) (standard-library-path . j545d) (file-newer? . j545c) (stat-mtime . j545b) (digit->integer . j5457) (call-with-string-input-port . j5456) (call-with-string-io . j5455) (string-split . j5454) (bytevector-for-each . j5453) (string->regexp . j5452) (rxmatch . j5451) (regexp-replace-all . j5450) (hashtable-for-each . j544f) (set-current-directory! . j544a) (expand-path . j5449) (current-directory . j5448) (p . j540a) (get-timeofday . j53f1) (get-command-line . j53f0) (sys-display . j53ef) (whereis . j53ee) (register . j53ed) (vm-join! . j53ec) (vm-set-value! . j53eb) (vm? . j53ea) (main-vm? . j53e9) (vm-eval . j53e8) (vm-self . j53e7) (vm-start! . j53e6) (make-vm . j53e5) (mutex-try-lock! . j53e4) (mutex-unlock! . j53e3) (mutex-lock! . j53e2) (mutex? . j53e1) (make-mutex . j53e0) (condition-variable-notify-all! . j53df) (condition-variable-notify! . j53de) (condition-variable-wait! . j53dd) (make-condition-variable . j53dc) (mosh-executable-path . j53db) (make-file-options . j53da) (source-info . j53d9) (make-compiler-instruction . j53d8) (make-instruction . j53d7) (set-source-info! . j53d6) (bignum? . j53d5) (fast-equal? . j53d4) (fasl-read . j53d3) (fasl-write . j53d2) (time-usage . j53d1) (os-constant . j53d0) (time . j516e) (include . j5163)) '() values values '#f '#f '#f '#f) (j2cd3@j2b1f@install-library 'j5490 '(system) '() '() '() '() '((gensym-prefix-set! . j5464) (write-to-file . j545a) (file->list . j5459) (file->string . j5458) (mosh-cache-dir . j28e8) (call-process . j544e) (local-tz-offset . j544d) (microseconds . j544c) (directory-list . j544b) (expand-path . j5449) (%spawn . j5447) (%waitpid . j5446) (simple-struct-name . j5445) (simple-struct-set! . j5444) (simple-struct-ref . j5443) (make-simple-struct . j5442) (simple-struct? . j5441) (pointer-ref-c-int64 . j5440) (pointer-ref-c-int32 . j543f) (pointer-ref-c-int16 . j543e) (pointer-ref-c-int8 . j543d) (pointer-ref-c-uint64 . j543c) (pointer-ref-c-uint32 . j543b) (pointer-ref-c-uint16 . j543a) (pointer-ref-c-uint8 . j5439) (pointer-set-c-uint64! . j5438) (pointer-set-c-uint32! . j5437) (pointer-set-c-uint16! . j5436) (pointer-set-c-uint8! . j5435) (pointer-set-c-int64! . j5434) (pointer-set-c-int32! . j5433) (pointer-set-c-int16! . j5432) (pointer-set-c-int8! . j5431) (pointer-set-c-pointer! . j5430) (pointer-set-c-double! . j542f) (pointer-set-c-float! . j542e) (pointer-set-c-long-long! . j542d) (pointer-set-c-long! . j542c) (pointer-set-c-int! . j542b) (pointer-set-c-short! . j542a) (pointer-set-c-char! . j5429) (pointer-ref-c-pointer . j5428) (pointer-ref-c-double . j5427) (pointer-ref-c-float . j5426) (pointer-ref-c-unsigned-long-long . j5425) (pointer-ref-c-signed-long-long . j5424) (pointer-ref-c-unsigned-long . j5423) (pointer-ref-c-signed-long . j5422) (pointer-ref-c-unsigned-int . j5421) (pointer-ref-c-signed-int . j5420) (pointer-ref-c-unsigned-short . j541f) (pointer-ref-c-signed-short . j541e) (pointer-ref-c-unsigned-char . j541d) (pointer-ref-c-signed-char . j541c) (pointer->integer . j541b) (integer->pointer . j541a) (pointer? . j5419) (shared-errno . j5418) (%ffi-free-c-callback-trampoline . j5417) (%ffi-make-c-callback-trampoline . j5416) (%ffi-free . j5415) (%ffi-malloc . j5414) (%ffi-supported? . j5413) (%ffi-pointer->string . j5412) (%ffi-call . j5411) (%ffi-lookup . j5410) (%ffi-open . j540f) (null-terminated-utf8->string . j540e) (null-terminated-bytevector->string . j540d) (%fork . j540c) (%pipe . j540b) (open-output-string . j5409) (get-output-string . j5408) (file-stat-ctime . j5407) (file-stat-atime . j5406) (file-stat-mtime . j5405) (file-size-in-bytes . j5404) (file-writable? . j5403) (file-executable? . j5402) (file-readable? . j5401) (file-regular? . j5400) (file-symbolic-link? . j53ff) (file-directory? . j53fe) (create-symbolic-link . j53fd) (rename-file . j53fc) (delete-directory . j53fb) (create-directory . j53fa) (create-mosh-cache-dir . j53f9) (get-environment-variables . j53f8) (current-exception-handler . j53f7) (get-environment-variable . j53f6) (join-wraps . j53f5) (id->real-label . j53f4) (same-marks? . j53f3) (same-marks*? . j53f2) (disasm . j53cf) (make-parameter . j28e6) (socket-port . j53ce) (socket-shutdown . j53cd) (socket-close . j53cc) (socket-send . j53cb) (socket-recv! . j53ca) (socket-recv . j53c9) (make-server-socket . j53c8) (make-client-socket . j53c7) (socket-accept . j53c6) (socket? . j53c5) (parameterize . j515e)) '() values values '#f '#f '#f '#f)))
(begin (set! j4fca@ref (unspecified)) (set! j4fcc@x* (unspecified)) (set! j4fce@add-library-path! (unspecified)) (set! j4fd0@parse-and-add-library-path (unspecified)) (set! j4fd2@for-each-with-index (unspecified)) (set! j4fd4@rpad (unspecified)) (set! j4fd6@condition-printer (unspecified)) (set! j4fd8@record->field-alist (unspecified)) (set! j4fda@map-with-index (unspecified)) (set! j4fdc@repl (unspecified)) (set! j4fde@trace-printer (unspecified)) (set! j4fe0@command-line (unspecified)) (set! j4fe2@local-library-path (unspecified)) (set! j4fe4@load/args (unspecified)) (set! j4fe6@load (unspecified)) (set! j4fe8@ironscheme-build (unspecified)) (set! j4fea@eval-top-level (unspecified)) (set! j4fec@compile-system-libraries (unspecified)) (set! j4fee@compile (unspecified)) (set! j4ff0@compile->closure (unspecified)) (set! j4ff2@pre-compile-r6rs-file (unspecified)) (set! j4ff4@load-r6rs-top-level (unspecified)) (set! j4ff6@load-r6rs-top-level-sexp (unspecified)) (set! j4ff8@prefix-inc (unspecified)) (set! j4ffa@prefix-inc! (unspecified)) (set! j4fca@ref (lambda (j5035@rtd j5036@i j5037@x) (let ((j503b@val ((record-accessor j5035@rtd j5036@i) j5037@x))) (if (symbol? j503b@val) (ungensym j503b@val) j503b@val)))) (set! j512d@j4fca@ref j4fca@ref) (set! j4fcc@x* '()) (set! j512e@j4fcc@x* j4fcc@x*) (set! j4fce@add-library-path! (lambda (j503d@path) (j2cc3@j2aff@library-path (append (j2cc3@j2aff@library-path) (list j503d@path))))) (set! j512f@j4fce@add-library-path! j4fce@add-library-path!) (set! j4fd0@parse-and-add-library-path (lambda (j503f@paths j5040@message) (let ((j5044@separator '#f)) (begin (set! j5044@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((j5045@t j503f@paths)) (if j5045@t ((lambda (j5047@paths) (for-each (lambda (j5049@path) (if (file-exists? j5049@path) (j4fce@add-library-path! (expand-path j5049@path)) (format (current-error-port) j5040@message j5049@path))) (string-split j5047@paths j5044@separator))) j5045@t) (void))))))) (set! j5130@j4fd0@parse-and-add-library-path j4fd0@parse-and-add-library-path) (set! j4fd2@for-each-with-index (lambda (j504b@proc j504c@lst) (letrec ((j504f@loop (lambda (j5051@i j5052@lst) (if (null? j5052@lst) (if '#f '#f (void)) (begin (j504b@proc j5051@i (car j5052@lst)) (j504f@loop (+ j5051@i '1) (cdr j5052@lst))))))) (j504f@loop '1 j504c@lst)))) (set! j5131@j4fd2@for-each-with-index j4fd2@for-each-with-index) (set! j4fd4@rpad (lambda (j5055@str j5056@pad j5057@n) (let ((j505b@rest (- j5057@n (string-length (format '"~a" j5055@str))))) (let j5061@loop ((j505d@rest j505b@rest) (j505e@ret (format '"~a" j5055@str))) (if (<= j505d@rest '0) j505e@ret (j5061@loop (- j505d@rest '1) (string-append j505e@ret j5056@pad))))))) (set! j5132@j4fd4@rpad j4fd4@rpad) (set! j4fd6@condition-printer (lambda (j5063@e j5064@port) (let ((j5068@max-condition-len '#f)) (begin (set! j5068@max-condition-len (apply max (map (lambda (j5079@c) (string-length (symbol->string (record-type-name (record-rtd j5079@c))))) (simple-conditions j5063@e)))) (begin (display '" Condition components:\n" j5064@port) (j4fd2@for-each-with-index (lambda (j5069@i j506a@x) (let ((j506d@rtd (record-rtd j506a@x)) (j506e@fields-alist (j4fd8@record->field-alist j506a@x))) (begin (format j5064@port '" ~d. ~a" j5069@i (j4fd4@rpad (symbol->string (record-type-name j506d@rtd)) '" " j5068@max-condition-len)) (if (null? j506e@fields-alist) (newline j5064@port) (void)) (let j5075@loop ((j5071@first '#t) (j5072@fields-alist j506e@fields-alist)) (if (null? j5072@fields-alist) '() (let ((j5077@field (car j5072@fields-alist))) (begin (if (not j5071@first) (display (j4fd4@rpad '"" '" " (+ '4 j5068@max-condition-len)) j5064@port) (void)) (display '"       " j5064@port) (display (car j5077@field) j5064@port) (display '": " j5064@port) (write (cdr j5077@field) j5064@port) (newline j5064@port) (j5075@loop '#f (cdr j5072@fields-alist))))))))) (simple-conditions j5063@e))))))) (set! j5133@j4fd6@condition-printer j4fd6@condition-printer) (set! j4fd8@record->field-alist (lambda (j507b@r) (let ((j507e@ref '#f)) (begin (set! j507e@ref (lambda (j5089@rtd j508a@i j508b@x) (let ((j508f@val ((record-accessor j5089@rtd j508a@i) j508b@x))) (if (symbol? j508f@val) (ungensym j508f@val) j508f@val)))) (let j5083@loop ((j507f@ret '()) (j5080@rtd (record-rtd j507b@r))) (if j5080@rtd (j5083@loop (append j507f@ret (j4fda@map-with-index (lambda (j5085@i j5086@field) (cons j5086@field (j507e@ref j5080@rtd j5085@i j507b@r))) (vector->list (record-type-field-names j5080@rtd)))) (record-type-parent j5080@rtd)) j507f@ret)))))) (set! j5134@j4fd8@record->field-alist j4fd8@record->field-alist) (set! j4fda@map-with-index (lambda (j5091@proc j5092@lst) (let j509b@loop ((j5095@i '0) (j5096@lst j5092@lst) (j5097@ret '())) (if (null? j5096@lst) (reverse j5097@ret) (j509b@loop (+ j5095@i '1) (cdr j5096@lst) (cons (j5091@proc j5095@i (car j5096@lst)) j5097@ret)))))) (set! j5135@j4fda@map-with-index j4fda@map-with-index) (set! j4fdc@repl (lambda j509d@x (let ((j50a0@rec '#f)) (begin (set! j50a0@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (j50a3@j50a1) (lambda () (with-exception-handler (lambda (j50a5@e) ((call/cc (lambda (j50a7@j50a2) (j50a3@j50a1 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? j50a5@e) (j4fd6@condition-printer j50a5@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" j50a5@e))) (j50a7@j50a2 (lambda () (raise-continuable j50a5@e)))))))))) (lambda () (let j50ad@loop ((j50a9@line (get-line (current-input-port))) (j50aa@accum '"")) (let ((j50b0@parentheses-ok? '#f) (j50b2@eval-string-print '#f)) (begin (set! j50b0@parentheses-ok? (lambda (j50b7@text) (let j50bf@loop ((j50b9@chars (string->list j50b7@text)) (j50ba@p0 '0) (j50bb@p1 '0)) (if (null? j50b9@chars) (= '0 j50ba@p0 j50bb@p1) (let ((j50c1@t (car j50b9@chars))) (if (memv j50c1@t '(#\()) (j50bf@loop (cdr j50b9@chars) (+ j50ba@p0 '1) j50bb@p1) (if (memv j50c1@t '(#\))) (j50bf@loop (cdr j50b9@chars) (- j50ba@p0 '1) j50bb@p1) (if (memv j50c1@t '(#\[)) (j50bf@loop (cdr j50b9@chars) j50ba@p0 (+ j50bb@p1 '1)) (if (memv j50c1@t '(#\])) (j50bf@loop (cdr j50b9@chars) j50ba@p0 (- j50bb@p1 '1)) (j50bf@loop (cdr j50b9@chars) j50ba@p0 j50bb@p1)))))))))) (set! j50b2@eval-string-print (lambda (j50b5@text) (if (not (or (string=? '"\n" j50b5@text) (= '0 (string-length j50b5@text)))) (write (j4fea@eval-top-level (call-with-port (open-string-input-port j50b5@text) read))) (void)))) (if (eof-object? j50a9@line) (begin (j50b2@eval-string-print j50aa@accum) (exit)) (let ((j50b3@current (string-append j50aa@accum j50a9@line))) (if (j50b0@parentheses-ok? j50b3@current) (j50b2@eval-string-print j50b3@current) (j50ad@loop (get-line (current-input-port)) j50b3@current))))))))))))) (newline) (j50a0@rec)))) (j50a0@rec))))) (set! j5136@j4fdc@repl j4fdc@repl) (set! j4fde@trace-printer (j2a09@j28e7@make-parameter write)) (set! j5137@j4fde@trace-printer j4fde@trace-printer) (set! j4fe0@command-line (j2a09@j28e7@make-parameter (get-command-line))) (set! j5138@j4fe0@command-line j4fe0@command-line) (set! j4fe2@local-library-path (lambda (j50c3@filename) (j2cc3@j2aff@library-path))) (set! j5139@j4fe2@local-library-path j4fe2@local-library-path) (set! j4fe4@load/args (lambda (j50c5@filename . j50c7@args) (begin (apply j4ff4@load-r6rs-top-level j50c5@filename 'load j50c7@args) (void)))) (set! j513a@j4fe4@load/args j4fe4@load/args) (set! j4fe6@load (lambda (j50c9@filename) (begin (apply j4ff4@load-r6rs-top-level j50c9@filename 'load (j4fe0@command-line)) (void)))) (set! j513b@j4fe6@load j4fe6@load) (set! j4fe8@ironscheme-build (lambda () (j4fe6@load '"ironscheme-buildscript.ss"))) (set! j513c@j4fe8@ironscheme-build j4fe8@ironscheme-build) (set! j4fea@eval-top-level (lambda (j50cb@x) (j4bf0@j3186@eval j50cb@x (j4c07@j31b4@interaction-environment)))) (set! j513d@j4fea@eval-top-level j4fea@eval-top-level) (set! j4fec@compile-system-libraries (lambda () (j4fea@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! j513e@j4fec@compile-system-libraries j4fec@compile-system-libraries) (set! j4fee@compile (lambda (j50cd@filename) (j4ff4@load-r6rs-top-level j50cd@filename 'compile))) (set! j513f@j4fee@compile j4fee@compile) (set! j4ff0@compile->closure (lambda (j50cf@filename) (j4ff4@load-r6rs-top-level j50cf@filename 'closure))) (set! j5140@j4ff0@compile->closure j4ff0@compile->closure) (set! j4ff2@pre-compile-r6rs-file (lambda (j50d1@filename) (j4ff4@load-r6rs-top-level j50d1@filename 'compile))) (set! j5141@j4ff2@pre-compile-r6rs-file j4ff2@pre-compile-r6rs-file) (set! j4ff4@load-r6rs-top-level (lambda (j50d3@filename j50d4@how . j50d7@args) (begin (j2cc3@j2aff@library-path (j4fe2@local-library-path j50d3@filename)) (let ((j50d9@x* (with-input-from-file j50d3@filename (lambda () (let j50db@f () (let ((j50dd@x (j29fb@j28cb@read-annotated))) (if (eof-object? j50dd@x) '() (cons j50dd@x (j50db@f))))))))) (let ((j50df@t j50d4@how)) (if (memv j50df@t '(closure)) (j4c06@j31b2@pre-compile-r6rs-top-level j50d9@x*) (if (memv j50df@t '(load)) (begin (j4fe0@command-line (cons j50d3@filename (car j50d7@args))) (j2a0a@j28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (j2a0a@j28e9@mosh-cache-dir) (gensym-prefix-set! (j4ffa@prefix-inc! (string-append (j2a0a@j28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j50e1@file) ((call/cc (lambda (j50e5@j50e3) (lambda () (with-exception-handler (lambda (j50e7@c) ((call/cc (lambda (j50e9@j50e4) (j50e5@j50e3 (lambda () (if '#t '#t (j50e9@j50e4 (lambda () (raise-continuable j50e7@c)))))))))) (lambda () (delete-file (string-append (j2a0a@j28e9@mosh-cache-dir) '"/" j50e1@file))))))))) (directory-list (j2a0a@j28e9@mosh-cache-dir))) (void)) (let ((j50eb@compiled (j4c05@j31b0@compile-r6rs-top-level j50d9@x*))) (begin (if (and (j2a0a@j28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j2cc7@j2b07@serialize-all j2a04@j28dd@serialize-library j2a60@j2a19@compile-core-expr) (void)) (j50eb@compiled)))) (if (memv j50df@t '(compile)) (begin (j4c05@j31b0@compile-r6rs-top-level j50d9@x*) (j2cc7@j2b07@serialize-all j2a04@j28dd@serialize-library j2a60@j2a19@compile-core-expr)) (if '#f '#f (void)))))))))) (set! j5142@j4ff4@load-r6rs-top-level j4ff4@load-r6rs-top-level) (set! j4ff6@load-r6rs-top-level-sexp (lambda (j50ed@import-spec j50ee@thunk) (let ((j50f9@j50f2 j2cc3@j2aff@library-path) (j50fa@j50f4 j2a0a@j28e9@mosh-cache-dir) (j50fb@j50f6 (j4fe2@local-library-path '"")) (j50fc@j50f8 (create-mosh-cache-dir))) (let ((j5101@swap (lambda () (begin (let ((j5103@t (j50f9@j50f2))) (begin (j50f9@j50f2 j50fb@j50f6) (set! j50fb@j50f6 j5103@t))) (let ((j5105@t (j50fa@j50f4))) (begin (j50fa@j50f4 j50fc@j50f8) (set! j50fc@j50f8 j5105@t))))))) (dynamic-wind j5101@swap (lambda () (begin (if (j2a0a@j28e9@mosh-cache-dir) (gensym-prefix-set! (j4ffa@prefix-inc! (string-append (j2a0a@j28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((j510b@j5108 j4fe0@command-line) (j510c@j510a '())) (let ((j510f@swap (lambda () (let ((j5111@t (j510b@j5108))) (begin (j510b@j5108 j510c@j510a) (set! j510c@j510a j5111@t)))))) (dynamic-wind j510f@swap (lambda () ((j4c05@j31b0@compile-r6rs-top-level (list (cons 'import j50ed@import-spec) (list j50ee@thunk))))) j510f@swap))))) j5101@swap))))) (set! j5143@j4ff6@load-r6rs-top-level-sexp j4ff6@load-r6rs-top-level-sexp) (set! j4ff8@prefix-inc (lambda (j5113@prefix-string) (let ((j5115@prefix (symbol->string j5113@prefix-string))) (let ((j5117@len (string-length j5115@prefix))) (let j511f@loop ((j5119@i (- j5117@len '1)) (j511a@carry? '#t) (j511b@accum '())) (if (< j5119@i '0) (string->symbol (list->string (if j511a@carry? (cons '#\a j511b@accum) j511b@accum))) (if j511a@carry? (let ((j5121@next-integer (+ '1 (char->integer (string-ref j5115@prefix j5119@i))))) (if (= j5121@next-integer '123) (j511f@loop (- j5119@i '1) '#f (cons '#\A j511b@accum)) (if (= j5121@next-integer '91) (j511f@loop (- j5119@i '1) '#t (cons '#\a j511b@accum)) (j511f@loop (- j5119@i '1) '#f (cons (integer->char j5121@next-integer) j511b@accum))))) (j511f@loop (- j5119@i '1) '#f (cons (string-ref j5115@prefix j5119@i) j511b@accum))))))))) (set! j5144@j4ff8@prefix-inc j4ff8@prefix-inc) (set! j4ffa@prefix-inc! (lambda (j5123@file) (begin (if (not (file-exists? j5123@file)) (call-with-output-file j5123@file (lambda (j5125@port) (write 'd j5125@port))) (void)) (let ((j5127@prefix (call-with-input-file j5123@file read))) (if (main-vm?) (let ((j5129@next-prefix (j4ff8@prefix-inc j5127@prefix))) (begin (call-with-port (open-file-output-port j5123@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (j512b@port) (write j5129@next-prefix j512b@port))) j5127@prefix)) j5127@prefix))))) (set! j5145@j4ffa@prefix-inc! j4ffa@prefix-inc!) (begin (j2cc8@j2b09@current-precompiled-library-loader j2a05@j28df@load-serialized-library) (set-symbol-value! 'load j4fe6@load) (set-symbol-value! 'pre-compile-r6rs-file j4ff2@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs j4fea@eval-top-level) (set-symbol-value! 'int-env-syms j4be7@j3174@interaction-environment-symbols) (set-symbol-value! 'expanded2core j2a5f@j2a17@expanded->core) (set-symbol-value! 'trace-printer j4fde@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (j4ffb@c) (condition (j4f27@j4d31@make-non-continuable-violation) (j4f1d@j4d18@make-who-condition 'raise) (j4ee1@j4c79@make-message-condition '"returned from non-continuable exception") (j4f13@j4cfd@make-irritants-condition (list j4ffb@c))))) (j4fd0@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (j4fd0@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (j4fce@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (j4fce@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (j4fce@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((j4ffd@prefix (lambda (j4fff@ext j5000@ls) (append (map (lambda (j5003@x) (string-append j4fff@ext j5003@x)) j5000@ls) j5000@ls)))) (j2cc4@j2b01@library-extensions (j4ffd@prefix '".mosh" (j2cc4@j2b01@library-extensions)))) (current-exception-handler (lambda (j5005@c) (if (condition? j5005@c) (j4fd6@condition-printer j5005@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" j5005@c)))) (if ((call/cc (lambda (j5009@j5007) (lambda () (with-exception-handler (lambda (j500b@c) ((call/cc (lambda (j500d@j5008) (j5009@j5007 (lambda () (if '#t '#f (j500d@j5008 (lambda () (raise-continuable j500b@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (j4ff6@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (j4fe0@command-line)) (let ((j5017@j5010 j4fe0@command-line) (j5018@j5012 j2a0a@j28e9@mosh-cache-dir) (j5019@j5014 '()) (j501a@j5016 (create-mosh-cache-dir))) (let ((j501f@swap (lambda () (begin (let ((j5021@t (j5017@j5010))) (begin (j5017@j5010 j5019@j5014) (set! j5019@j5014 j5021@t))) (let ((j5023@t (j5018@j5012))) (begin (j5018@j5012 j501a@j5016) (set! j501a@j5016 j5023@t))))))) (dynamic-wind j501f@swap (lambda () (begin (if (j2a0a@j28e9@mosh-cache-dir) (gensym-prefix-set! (j4ffa@prefix-inc! (string-append (j2a0a@j28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (j4fdc@repl))) j501f@swap))) (begin (j2cc3@j2aff@library-path (j4fe2@local-library-path (car (j4fe0@command-line)))) (set! j4fcc@x* (with-input-from-file (car (j4fe0@command-line)) (lambda () (let j5025@f () (let ((j5027@x (j29fb@j28cb@read-annotated))) (if (eof-object? j5027@x) '() (cons j5027@x (j5025@f)))))))) (j4fe0@command-line (cons (car (j4fe0@command-line)) (cdr (j4fe0@command-line)))) (j2a0a@j28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (j2a0a@j28e9@mosh-cache-dir) (gensym-prefix-set! (j4ffa@prefix-inc! (string-append (j2a0a@j28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j5029@file) ((call/cc (lambda (j502d@j502b) (lambda () (with-exception-handler (lambda (j502f@c) ((call/cc (lambda (j5031@j502c) (j502d@j502b (lambda () (if '#t '#t (j5031@j502c (lambda () (raise-continuable j502f@c)))))))))) (lambda () (delete-file (string-append (j2a0a@j28e9@mosh-cache-dir) '"/" j5029@file))))))))) (directory-list (j2a0a@j28e9@mosh-cache-dir))) (void)) (let ((j5033@compiled (j4c05@j31b0@compile-r6rs-top-level j4fcc@x*))) (begin (if (and (j2a0a@j28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j2cc7@j2b07@serialize-all j2a04@j28dd@serialize-library j2a60@j2a19@compile-core-expr) (void)) (j5033@compiled))))))))
