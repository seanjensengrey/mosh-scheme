;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! py24b6@library-file-path->cache-path (unspecified)) (set! py24b8@read-annotated (unspecified)) (set! py24ba@annotation-stripped (unspecified)) (set! py24bc@annotation? (unspecified)) (set! py24be@annotation-source (unspecified)) (set! py24c0@annotation-expression (unspecified)) (set! py24c2@scm->fasl (unspecified)) (set! py24c4@fasl-save (unspecified)) (set! py24c6@fasl-load (unspecified)) (set! py24c8@serialize-library (unspecified)) (set! py24ca@load-serialized-library (unspecified)) (set! py24cc@make-record-printer (unspecified)) (set! py24ce@compile-core (unspecified)) (set! py24d0@read-library-source-file (unspecified)) (set! py24d2@make-parameter (unspecified)) (set! py24d4@mosh-cache-dir (unspecified)) (set! py256a@file-options-spec (unspecified)) (set! py24b6@library-file-path->cache-path (lambda (py256b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (py2571@py256e py2572@py2570) (let ((py2575@extract py2572@py2570) (py2576@p py2571@py256e)) (let ((py257a@display-hex '#f)) (begin (set! py257a@display-hex (lambda (py2583@n) (if (<= '0 py2583@n '9) (display py2583@n py2576@p) (display (integer->char (+ (char->integer '#\a) (- py2583@n '10))) py2576@p)))) (begin (let py257d@f ((py257b@ls (string-split py256b@x '#\/))) (if (not (null? py257b@ls)) (begin (display '"_" py2576@p) (for-each (lambda (py257f@c) (if (or (char<=? '#\a py257f@c '#\z) (char<=? '#\A py257f@c '#\Z) (char<=? '#\0 py257f@c '#\9) (memv py257f@c '(#\- #\. #\_ #\~))) (display py257f@c py2576@p) (begin (display '"%" py2576@p) (let ((py2581@n (char->integer py257f@c))) (begin (py257a@display-hex (quotient py2581@n '16)) (py257a@display-hex (remainder py2581@n '16))))))) (string->list (car py257b@ls))) (py257d@f (cdr py257b@ls))) (void))) (py2575@extract))))))))) (set! py25e5@py24b6@library-file-path->cache-path py24b6@library-file-path->cache-path) (set! py24b8@read-annotated read) (set! py25e6@py24b8@read-annotated py24b8@read-annotated) (set! py24ba@annotation-stripped (lambda (py2585@x) (py24c0@annotation-expression py2585@x))) (set! py25e7@py24ba@annotation-stripped py24ba@annotation-stripped) (set! py24bc@annotation? (lambda (py2587@x) (source-info py2587@x))) (set! py25e8@py24bc@annotation? py24bc@annotation?) (set! py24be@annotation-source (lambda (py2589@x) (source-info py2589@x))) (set! py25e9@py24be@annotation-source py24be@annotation-source) (set! py24c0@annotation-expression (lambda (py258b@x) (if (pair? py258b@x) (cons (car py258b@x) (cdr py258b@x)) (display '"line:46\n")))) (set! py25ea@py24c0@annotation-expression py24c0@annotation-expression) (set! py24c2@scm->fasl (lambda (py258d@filename) (string-append (py24d4@mosh-cache-dir) '"/" (py24b6@library-file-path->cache-path py258d@filename) '".mosh-fasl"))) (set! py25eb@py24c2@scm->fasl py24c2@scm->fasl) (set! py24c4@fasl-save (lambda (py258f@filename py2590@obj) (call-with-port (open-file-output-port py258f@filename) (lambda (py2593@port) ((symbol-value 'fasl-write!) py2590@obj py2593@port))))) (set! py25ec@py24c4@fasl-save py24c4@fasl-save) (set! py24c6@fasl-load (lambda (py2595@filename) (call-with-port (open-file-input-port py2595@filename) (symbol-value 'fasl-read!)))) (set! py25ed@py24c6@fasl-load py24c6@fasl-load) (set! py24c8@serialize-library (lambda (py2597@filename py2598@obj) (begin (let ((py259b@expanded2core (symbol-value 'expanded2core))) (let ((py259d@compile (symbol-value 'compile-w/o-halt))) (let ((py259f@code py2598@obj)) (let ((py25a1@pivot (cddddr (cddddr py259f@code)))) (let ((py25a3@visit (py259d@compile (py259b@expanded2core (car py25a1@pivot))))) (begin (set-car! py25a1@pivot py25a3@visit) (let ((py25a5@pivot (cdr py25a1@pivot))) (let ((py25a7@invoke (py259d@compile (py259b@expanded2core (car py25a5@pivot))))) (set-car! py25a5@pivot py25a7@invoke))))))))) (let ((py25a9@fasl-file (py24c2@scm->fasl py2597@filename))) (begin (if (file-exists? py25a9@fasl-file) (delete-file py25a9@fasl-file) (void)) ((call/cc (lambda (py25ad@py25ab) (lambda () (with-exception-handler (lambda (py25af@c) ((call/cc (lambda (py25b1@py25ac) (py25ad@py25ab (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " py2597@filename) (if (file-exists? py25a9@fasl-file) (delete-file py25a9@fasl-file) (void)) '#f) (py25b1@py25ac (lambda () (raise-continuable py25af@c)))))))))) (lambda () (py24c4@fasl-save py25a9@fasl-file py2598@obj)))))))))))) (set! py25ee@py24c8@serialize-library py24c8@serialize-library) (set! py24ca@load-serialized-library (lambda (py25b3@filename py25b4@obj) (and (py24d4@mosh-cache-dir) (let ((py25b7@fasl-file (py24c2@scm->fasl py25b3@filename))) (if (and (file-exists? py25b7@fasl-file) ((symbol-value 'file-newer?) py25b7@fasl-file py25b3@filename)) (let ((py25b9@expanded2core (symbol-value 'expanded2core))) (let ((py25bb@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((py25bd@code (py24c6@fasl-load py25b7@fasl-file))) (let ((py25bf@pivot (cddddr (cddddr py25bd@code)))) (let ((py25c1@visit (car py25bf@pivot))) (let ((py25c3@visit-proc (lambda () (py25bb@eval-compiled-core py25c1@visit)))) (begin (set-car! py25bf@pivot py25c3@visit-proc) (let ((py25c5@pivot (cdr py25bf@pivot))) (let ((py25c7@invoke (car py25c5@pivot))) (begin (set-car! py25c5@pivot (lambda () (py25bb@eval-compiled-core py25c7@invoke))) (apply py25b4@obj py25bd@code))))))))))) '#f))))) (set! py25ef@py24ca@load-serialized-library py24ca@load-serialized-library) (set! py24cc@make-record-printer (lambda (py25c9@name py25ca@printer) (lambda py25cd@x (begin (display '"record printer") (for-each display py25cd@x))))) (set! py25f0@py24cc@make-record-printer py24cc@make-record-printer) (set! py24ce@compile-core (lambda py25cf@x (apply error 'comile-core '"not implementated" py25cf@x))) (set! py25f1@py24ce@compile-core py24ce@compile-core) (set! py24d0@read-library-source-file (lambda (py25d1@file-name) (with-input-from-file py25d1@file-name py24b8@read-annotated))) (set! py25f2@py24d0@read-library-source-file py24d0@read-library-source-file) (set! py24d2@make-parameter (lambda py25e1 (let ((py25e2 (length py25e1))) (if (= py25e2 '1) (apply (lambda (py25d3@x) (py24d2@make-parameter py25d3@x (lambda (py25d5@x) py25d5@x))) py25e1) (if (= py25e2 '2) (apply (lambda (py25d7@x py25d8@fender) (let ((py25db@x (py25d8@fender py25d7@x))) (lambda py25df (let ((py25e0 (length py25df))) (if (= py25e0 '0) (apply (lambda () py25db@x) py25df) (if (= py25e0 '1) (apply (lambda (py25dd@v) (set! py25db@x (py25d8@fender py25dd@v))) py25df) (error 'apply '"invalid arg count"))))))) py25e1) (error 'apply '"invalid arg count")))))) (set! py25f3@py24d2@make-parameter py24d2@make-parameter) (set! py24d4@mosh-cache-dir (py24d2@make-parameter '#f)) (set! py25f4@py24d4@mosh-cache-dir py24d4@mosh-cache-dir) (set! py256a@file-options-spec (lambda (py25e3@x) py25e3@x)) (set! py25f5@py256a@file-options-spec py256a@file-options-spec) (void))
(begin (set! py25fb@current-primitive-locations (unspecified)) (set! py25fd@mutable? (unspecified)) (set! py25ff@rewriter (unspecified)) (set! py2601@expanded->core (unspecified)) (set! py2603@compile-core-expr (unspecified)) (set! py2605@pretty-print (unspecified)) (set! py2607@compile-core-expr-to-port (unspecified)) (set! py25fb@current-primitive-locations (py25f3@py24d2@make-parameter (lambda (py2608@x) '#f) (lambda (py260a@p) py260a@p))) (set! py2646@py25fb@current-primitive-locations py25fb@current-primitive-locations) (set! py25fd@mutable? (lambda (py260c@x) (or (pair? py260c@x) (vector? py260c@x) (hashtable? py260c@x)))) (set! py2647@py25fd@mutable? py25fd@mutable?) (set! py25ff@rewriter (lambda (py260e@quote-hack?) (let ((py2611@f '#f)) (begin (set! py2611@f (lambda (py2612@x) (if (pair? py2612@x) (let ((py2614@t (car py2612@x))) (if (memv py2614@t '(quote)) (if (and py260e@quote-hack? (py25fd@mutable? (cadr py2612@x))) (let ((py2616@g (gensym))) (begin (set-symbol-value! py2616@g (cadr py2612@x)) py2616@g)) py2612@x) (if (memv py2614@t '(case-lambda)) (cons 'case-lambda (map (lambda (py2618@x) (cons (car py2618@x) (map py2611@f (cdr py2618@x)))) (cdr py2612@x))) (if (memv py2614@t '(lambda)) (cons* 'lambda (cadr py2612@x) (map py2611@f (cddr py2612@x))) (if (memv py2614@t '(letrec)) (let ((py261a@bindings (cadr py2612@x)) (py261b@body* (cddr py2612@x))) (let ((py261e@lhs* (map car py261a@bindings)) (py261f@rhs* (map cadr py261a@bindings))) (cons* 'letrec (map list py261e@lhs* (map py2611@f py261f@rhs*)) (map py2611@f py261b@body*)))) (if (memv py2614@t '(letrec*)) (let ((py2622@bindings (cadr py2612@x)) (py2623@body* (cddr py2612@x))) (let ((py2626@lhs* (map car py2622@bindings)) (py2627@rhs* (map cadr py2622@bindings))) (cons* 'letrec* (map list py2626@lhs* (map py2611@f py2627@rhs*)) (map py2611@f py2623@body*)))) (if (memv py2614@t '(library-letrec*)) (let ((py262a@name (cadr py2612@x)) (py262b@x (cdr py2612@x))) (let ((py262e@bindings (cadr py262b@x)) (py262f@body* (cddr py262b@x))) (let ((py2632@lhs* (map car py262e@bindings)) (py2633@lhs** (map cadr py262e@bindings)) (py2634@rhs* (map caddr py262e@bindings))) (cons* 'library-letrec* py262a@name (map list py2632@lhs* py2633@lhs** (map py2611@f py2634@rhs*)) (map py2611@f py262f@body*))))) (if (memv py2614@t '(begin)) (cons 'begin (map py2611@f (cdr py2612@x))) (if (memv py2614@t '(set!)) (list 'set! (cadr py2612@x) (py2611@f (caddr py2612@x))) (if (memv py2614@t '(primitive)) (let ((py2638@op (cadr py2612@x))) (let ((py263a@t ((py25fb@current-primitive-locations) py2638@op))) (if py263a@t ((lambda (py263c@loc) py263c@loc) py263a@t) py2638@op))) (if (memv py2614@t '(define)) py2612@x (if (list? py2612@x) (map py2611@f py2612@x) (error 'rewrite '"invalid form ~s ~s" py2612@x (list? py2612@x)))))))))))))) py2612@x))) py2611@f)))) (set! py2648@py25ff@rewriter py25ff@rewriter) (set! py2601@expanded->core (lambda (py263e@x) ((py25ff@rewriter '#f) py263e@x))) (set! py2649@py2601@expanded->core py2601@expanded->core) (set! py2603@compile-core-expr (lambda (py2640@x) ((py25ff@rewriter '#f) py2640@x))) (set! py264a@py2603@compile-core-expr py2603@compile-core-expr) (set! py2605@pretty-print write) (set! py264b@py2605@pretty-print py2605@pretty-print) (set! py2607@compile-core-expr-to-port (lambda (py2642@x py2643@p) (py2605@pretty-print ((py25ff@rewriter '#f) py2642@x) py2643@p))) (set! py264c@py2607@compile-core-expr-to-port py2607@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! py269b@make-collection (unspecified)) (set! py269d@current-library-collection (unspecified)) (set! py269f@rp (unspecified)) (set! py26a9@library? (unspecified)) (set! py26ab@library-id (unspecified)) (set! py26ad@set-library-id! (unspecified)) (set! py26af@library-name (unspecified)) (set! py26b1@set-library-name! (unspecified)) (set! py26b3@library-version (unspecified)) (set! py26b5@set-library-version! (unspecified)) (set! py26b7@library-imp* (unspecified)) (set! py26b9@set-library-imp*! (unspecified)) (set! py26bb@library-vis* (unspecified)) (set! py26bd@set-library-vis*! (unspecified)) (set! py26bf@library-inv* (unspecified)) (set! py26c1@set-library-inv*! (unspecified)) (set! py26c3@library-subst (unspecified)) (set! py26c5@set-library-subst! (unspecified)) (set! py26c7@library-env (unspecified)) (set! py26c9@set-library-env! (unspecified)) (set! py26cb@library-visit-state (unspecified)) (set! py26cd@set-library-visit-state! (unspecified)) (set! py26cf@library-invoke-state (unspecified)) (set! py26d1@set-library-invoke-state! (unspecified)) (set! py26d3@library-visit-code (unspecified)) (set! py26d5@set-library-visit-code! (unspecified)) (set! py26d7@library-invoke-code (unspecified)) (set! py26d9@set-library-invoke-code! (unspecified)) (set! py26db@library-visible? (unspecified)) (set! py26dd@set-library-visible?! (unspecified)) (set! py26df@library-source-file-name (unspecified)) (set! py26e1@set-library-source-file-name! (unspecified)) (set! py26e3@dummy (unspecified)) (set! py26e5@find-dependencies (unspecified)) (set! py26e7@find-library-by (unspecified)) (set! py26e9@library-path (unspecified)) (set! py26eb@library-extensions (unspecified)) (set! py26ed@library-name->file-name (unspecified)) (set! py26ef@file-locator (unspecified)) (set! py26f1@serialize-all (unspecified)) (set! py26f3@current-precompiled-library-loader (unspecified)) (set! py26f5@try-load-from-file (unspecified)) (set! py26f7@library-loader (unspecified)) (set! py26f9@current-library-expander (unspecified)) (set! py26fb@external-pending-libraries (unspecified)) (set! py26fd@find-external-library (unspecified)) (set! py26ff@find-library-by-name (unspecified)) (set! py2701@library-exists? (unspecified)) (set! py2703@find-library-by-spec/die (unspecified)) (set! py2705@label->binding-table (unspecified)) (set! py2707@install-library-record (unspecified)) (set! py2709@install-library (unspecified)) (set! py270b@imported-label->binding (unspecified)) (set! py270d@invoke-library (unspecified)) (set! py270f@visit-library (unspecified)) (set! py2711@invoke-library-by-spec (unspecified)) (set! py2713@installed-libraries (unspecified)) (set! py2715@library-spec (unspecified)) (set! py269b@make-collection (lambda () (let ((py2716@set '())) (let ((py2719@set-cons '#f)) (begin (set! py2719@set-cons (lambda (py271e@x py271f@ls) (if (memq py271e@x py271f@ls) py271f@ls (cons py271e@x py271f@ls)))) (lambda py271c (let ((py271d (length py271c))) (if (= py271d '0) (apply (lambda () py2716@set) py271c) (if (= py271d '1) (apply (lambda (py271a@x) (set! py2716@set (py2719@set-cons py271a@x py2716@set))) py271c) (error 'apply '"invalid arg count")))))))))) (set! py288a@py269b@make-collection py269b@make-collection) (set! py269d@current-library-collection (py25f3@py24d2@make-parameter (py269b@make-collection) (lambda (py2722@x) (begin (if (not (procedure? py2722@x)) (assertion-violation 'current-library-collection '"not a procedure" py2722@x) (void)) py2722@x)))) (set! py288b@py269d@current-library-collection py269d@current-library-collection) (set! py269f@rp (py25f0@py24cc@make-record-printer 'library (lambda (py2724@x py2725@p py2726@wr) (begin (if (not (py26a9@library? py2724@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (py26b3@library-version py2724@x)) (py26af@library-name py2724@x) (append (py26af@library-name py2724@x) (list (py26b3@library-version py2724@x))))) py2725@p))))) (set! py288c@py269f@rp py269f@rp) (set! py26a9@library? (lambda (py272a@x) (and (simple-struct? py272a@x) (eq? (simple-struct-name py272a@x) 'library)))) (set! py288d@py26a9@library? py26a9@library?) (set! py26ab@library-id (lambda (py272c@x) (simple-struct-ref py272c@x '0))) (set! py288e@py26ab@library-id py26ab@library-id) (set! py26ad@set-library-id! (lambda (py272e@x py272f@val) (simple-struct-set! py272e@x '0 py272f@val))) (set! py288f@py26ad@set-library-id! py26ad@set-library-id!) (set! py26af@library-name (lambda (py2732@x) (simple-struct-ref py2732@x '1))) (set! py2890@py26af@library-name py26af@library-name) (set! py26b1@set-library-name! (lambda (py2734@x py2735@val) (simple-struct-set! py2734@x '1 py2735@val))) (set! py2891@py26b1@set-library-name! py26b1@set-library-name!) (set! py26b3@library-version (lambda (py2738@x) (simple-struct-ref py2738@x '2))) (set! py2892@py26b3@library-version py26b3@library-version) (set! py26b5@set-library-version! (lambda (py273a@x py273b@val) (simple-struct-set! py273a@x '2 py273b@val))) (set! py2893@py26b5@set-library-version! py26b5@set-library-version!) (set! py26b7@library-imp* (lambda (py273e@x) (simple-struct-ref py273e@x '3))) (set! py2894@py26b7@library-imp* py26b7@library-imp*) (set! py26b9@set-library-imp*! (lambda (py2740@x py2741@val) (simple-struct-set! py2740@x '3 py2741@val))) (set! py2895@py26b9@set-library-imp*! py26b9@set-library-imp*!) (set! py26bb@library-vis* (lambda (py2744@x) (simple-struct-ref py2744@x '4))) (set! py2896@py26bb@library-vis* py26bb@library-vis*) (set! py26bd@set-library-vis*! (lambda (py2746@x py2747@val) (simple-struct-set! py2746@x '4 py2747@val))) (set! py2897@py26bd@set-library-vis*! py26bd@set-library-vis*!) (set! py26bf@library-inv* (lambda (py274a@x) (simple-struct-ref py274a@x '5))) (set! py2898@py26bf@library-inv* py26bf@library-inv*) (set! py26c1@set-library-inv*! (lambda (py274c@x py274d@val) (simple-struct-set! py274c@x '5 py274d@val))) (set! py2899@py26c1@set-library-inv*! py26c1@set-library-inv*!) (set! py26c3@library-subst (lambda (py2750@x) (simple-struct-ref py2750@x '6))) (set! py289a@py26c3@library-subst py26c3@library-subst) (set! py26c5@set-library-subst! (lambda (py2752@x py2753@val) (simple-struct-set! py2752@x '6 py2753@val))) (set! py289b@py26c5@set-library-subst! py26c5@set-library-subst!) (set! py26c7@library-env (lambda (py2756@x) (simple-struct-ref py2756@x '7))) (set! py289c@py26c7@library-env py26c7@library-env) (set! py26c9@set-library-env! (lambda (py2758@x py2759@val) (simple-struct-set! py2758@x '7 py2759@val))) (set! py289d@py26c9@set-library-env! py26c9@set-library-env!) (set! py26cb@library-visit-state (lambda (py275c@x) (simple-struct-ref py275c@x '8))) (set! py289e@py26cb@library-visit-state py26cb@library-visit-state) (set! py26cd@set-library-visit-state! (lambda (py275e@x py275f@val) (simple-struct-set! py275e@x '8 py275f@val))) (set! py289f@py26cd@set-library-visit-state! py26cd@set-library-visit-state!) (set! py26cf@library-invoke-state (lambda (py2762@x) (simple-struct-ref py2762@x '9))) (set! py28a0@py26cf@library-invoke-state py26cf@library-invoke-state) (set! py26d1@set-library-invoke-state! (lambda (py2764@x py2765@val) (simple-struct-set! py2764@x '9 py2765@val))) (set! py28a1@py26d1@set-library-invoke-state! py26d1@set-library-invoke-state!) (set! py26d3@library-visit-code (lambda (py2768@x) (simple-struct-ref py2768@x '10))) (set! py28a2@py26d3@library-visit-code py26d3@library-visit-code) (set! py26d5@set-library-visit-code! (lambda (py276a@x py276b@val) (simple-struct-set! py276a@x '10 py276b@val))) (set! py28a3@py26d5@set-library-visit-code! py26d5@set-library-visit-code!) (set! py26d7@library-invoke-code (lambda (py276e@x) (simple-struct-ref py276e@x '11))) (set! py28a4@py26d7@library-invoke-code py26d7@library-invoke-code) (set! py26d9@set-library-invoke-code! (lambda (py2770@x py2771@val) (simple-struct-set! py2770@x '11 py2771@val))) (set! py28a5@py26d9@set-library-invoke-code! py26d9@set-library-invoke-code!) (set! py26db@library-visible? (lambda (py2774@x) (simple-struct-ref py2774@x '12))) (set! py28a6@py26db@library-visible? py26db@library-visible?) (set! py26dd@set-library-visible?! (lambda (py2776@x py2777@val) (simple-struct-set! py2776@x '12 py2777@val))) (set! py28a7@py26dd@set-library-visible?! py26dd@set-library-visible?!) (set! py26df@library-source-file-name (lambda (py277a@x) (simple-struct-ref py277a@x '13))) (set! py28a8@py26df@library-source-file-name py26df@library-source-file-name) (set! py26e1@set-library-source-file-name! (lambda (py277c@x py277d@val) (simple-struct-set! py277c@x '13 py277d@val))) (set! py28a9@py26e1@set-library-source-file-name! py26e1@set-library-source-file-name!) (set! py26e3@dummy '3) (set! py28aa@py26e3@dummy py26e3@dummy) (set! py26e5@find-dependencies (lambda (py2780@ls) (if (null? py2780@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! py28ab@py26e5@find-dependencies py26e5@find-dependencies) (set! py26e7@find-library-by (lambda (py2782@pred) (let py2786@f ((py2784@ls ((py269d@current-library-collection)))) (if (null? py2784@ls) '#f (if (py2782@pred (car py2784@ls)) (car py2784@ls) (py2786@f (cdr py2784@ls))))))) (set! py28ac@py26e7@find-library-by py26e7@find-library-by) (set! py26e9@library-path (py25f3@py24d2@make-parameter '(".") (lambda (py2788@x) (if (and (list? py2788@x) (for-all string? py2788@x)) (map (lambda (py278a@x) py278a@x) py2788@x) (assertion-violation 'library-path '"not a list of strings" py2788@x))))) (set! py28ad@py26e9@library-path py26e9@library-path) (set! py26eb@library-extensions (py25f3@py24d2@make-parameter '(".sls" ".ss" ".scm") (lambda (py278c@x) (if (and (list? py278c@x) (for-all string? py278c@x)) (map (lambda (py278e@x) py278e@x) py278c@x) (assertion-violation 'library-extensions '"not a list of strings" py278c@x))))) (set! py28ae@py26eb@library-extensions py26eb@library-extensions) (set! py26ed@library-name->file-name (lambda (py2790@x) (call-with-values (lambda () (open-string-output-port)) (lambda (py2796@py2793 py2797@py2795) (let ((py279a@extract py2797@py2795) (py279b@p py2796@py2793)) (let ((py279f@display-hex '#f)) (begin (set! py279f@display-hex (lambda (py27a8@n) (if (<= '0 py27a8@n '9) (display py27a8@n py279b@p) (display (integer->char (+ (char->integer '#\a) (- py27a8@n '10))) py279b@p)))) (begin (let py27a2@f ((py27a0@ls py2790@x)) (if (not (null? py27a0@ls)) (begin (display '"/" py279b@p) (for-each (lambda (py27a4@c) (if (or (char<=? '#\a py27a4@c '#\z) (char<=? '#\A py27a4@c '#\Z) (char<=? '#\0 py27a4@c '#\9) (memv py27a4@c '(#\- #\. #\_ #\~))) (display py27a4@c py279b@p) (begin (display '"%" py279b@p) (let ((py27a6@n (char->integer py27a4@c))) (begin (py279f@display-hex (quotient py27a6@n '16)) (py279f@display-hex (remainder py27a6@n '16))))))) (string->list (symbol->string (car py27a0@ls)))) (py27a2@f (cdr py27a0@ls))) (void))) (py279a@extract))))))))) (set! py28af@py26ed@library-name->file-name py26ed@library-name->file-name) (set! py26ef@file-locator (py25f3@py24d2@make-parameter (lambda (py27aa@x) (let ((py27ac@str (py26ed@library-name->file-name py27aa@x))) (let py27b4@f ((py27ae@ls (py26e9@library-path)) (py27af@exts (py26eb@library-extensions)) (py27b0@failed-list '())) (if (null? py27ae@ls) (let ((py27be@py27b9 '#f) (py27c0@py27bb '#f) (py27c2@py27ba '#f) (py27c5@py27b8 '#f) (py27c7@make-library-resolution-condition '#f) (py27c9@py27b6 '#f) (py27cb@py27b7 '#f) (py27cd@library-resolution-condition? '#f) (py27cf@condition-library '#f) (py27d1@condition-files '#f)) (begin (set! py27be@py27b9 (make-record-type-descriptor '&library-resolution py4ac5@py480c@&condition-rtd 'py27bc '#f '#f '#((immutable library) (immutable files)))) (set! py27c0@py27bb '#f) (set! py27c2@py27ba (make-record-constructor-descriptor py27be@py27b9 py4ac6@py480e@&condition-rcd py27c0@py27bb)) (set! py27c5@py27b8 (record-predicate py27be@py27b9)) (set! py27c7@make-library-resolution-condition (record-constructor py27c2@py27ba)) (set! py27c9@py27b6 (record-accessor py27be@py27b9 '0)) (set! py27cb@py27b7 (record-accessor py27be@py27b9 '1)) (set! py27cd@library-resolution-condition? (condition-predicate py27be@py27b9)) (set! py27cf@condition-library (condition-accessor py27be@py27b9 py27c9@py27b6)) (set! py27d1@condition-files (condition-accessor py27be@py27b9 py27cb@py27b7)) (raise (condition (py4ae5@py48a6@make-error) (py4b07@py4902@make-who-condition 'expander) (py4acb@py4863@make-message-condition '"cannot locate library in library-path") (py27c7@make-library-resolution-condition py27aa@x (reverse py27b0@failed-list)))))) (if (null? py27af@exts) (py27b4@f (cdr py27ae@ls) (py26eb@library-extensions) py27b0@failed-list) (let ((py27d2@name (string-append (car py27ae@ls) py27ac@str (car py27af@exts)))) (if (file-exists? py27d2@name) py27d2@name (py27b4@f py27ae@ls (cdr py27af@exts) (cons py27d2@name py27b0@failed-list))))))))) (lambda (py27d4@f) (if (procedure? py27d4@f) py27d4@f (assertion-violation 'file-locator '"not a procedure" py27d4@f))))) (set! py28b0@py26ef@file-locator py26ef@file-locator) (set! py26f1@serialize-all (lambda (py27d6@serialize py27d7@compile) (let ((py27db@library-desc '#f)) (begin (set! py27db@library-desc (lambda (py27de@x) (list (py26ab@library-id py27de@x) (py26af@library-name py27de@x)))) (for-each (lambda (py27dc@x) (if (py26df@library-source-file-name py27dc@x) (py27d6@serialize (py26df@library-source-file-name py27dc@x) (list (py26ab@library-id py27dc@x) (py26af@library-name py27dc@x) (py26b3@library-version py27dc@x) (map py27db@library-desc (py26b7@library-imp* py27dc@x)) (map py27db@library-desc (py26bb@library-vis* py27dc@x)) (map py27db@library-desc (py26bf@library-inv* py27dc@x)) (py26c3@library-subst py27dc@x) (py26c7@library-env py27dc@x) (py27d7@compile (py26d3@library-visit-code py27dc@x)) (py27d7@compile (py26d7@library-invoke-code py27dc@x)) (py26db@library-visible? py27dc@x))) (void))) ((py269d@current-library-collection))))))) (set! py28b1@py26f1@serialize-all py26f1@serialize-all) (set! py26f3@current-precompiled-library-loader (py25f3@py24d2@make-parameter (lambda (py27e0@filename py27e1@sk) '#f))) (set! py28b2@py26f3@current-precompiled-library-loader py26f3@current-precompiled-library-loader) (set! py26f5@try-load-from-file (lambda (py27e4@filename) ((py26f3@current-precompiled-library-loader) py27e4@filename (lambda py280a (let ((py280b (length py280a))) (if (= py280b '11) (apply (lambda (py27e6@id py27e7@name py27e8@ver py27e9@imp* py27ea@vis* py27eb@inv* py27ec@exp-subst py27ed@exp-env py27ee@visit-proc py27ef@invoke-proc py27f0@visible?) (let py27fe@f ((py27fc@deps (append py27e9@imp* py27ea@vis* py27eb@inv*))) (if (null? py27fc@deps) (begin (py2709@install-library py27e6@id py27e7@name py27e8@ver py27e9@imp* py27ea@vis* py27eb@inv* py27ec@exp-subst py27ed@exp-env py27ee@visit-proc py27ef@invoke-proc '#f '#f py27f0@visible? '#f) '#t) (let ((py2800@d (car py27fc@deps))) (let ((py2802@label (car py2800@d)) (py2803@dname (cadr py2800@d))) (let ((py2806@l (py26ff@find-library-by-name py2803@dname))) (if (and (py26a9@library? py2806@l) (eq? py2802@label (py26ab@library-id py2806@l))) (py27fe@f (cdr py27fc@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" py27e7@name py2803@dname py27e4@filename py2806@l py2802@label (py26ab@library-id py2806@l)) '#f)))))))) py280a) (if (>= py280b '0) (apply (lambda py2808@others '#f) py280a) (error 'apply '"invalid arg count")))))))) (set! py28b3@py26f5@try-load-from-file py26f5@try-load-from-file) (set! py26f7@library-loader (py25f3@py24d2@make-parameter (lambda (py280c@x) (let ((py280e@file-name ((py26ef@file-locator) py280c@x))) (if (not py280e@file-name) (assertion-violation '#f '"cannot file library" py280c@x) (or (py26f5@try-load-from-file py280e@file-name) ((py26f9@current-library-expander) (py25f2@py24d0@read-library-source-file py280e@file-name) py280e@file-name (lambda (py2810@name) (if (not (fast-equal? py2810@name py280c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (py2816@py2813 py2817@py2815) (let ((py281a@e py2817@py2815) (py281b@p py2816@py2813)) (begin (display '"expected to find library " py281b@p) (write py280c@x py281b@p) (display '" in file " py281b@p) (display py280e@file-name py281b@p) (display '", found " py281b@p) (write py2810@name py281b@p) (display '" instead" py281b@p) (py281a@e)))))) (void)))))))) (lambda (py281e@f) (if (procedure? py281e@f) py281e@f (assertion-violation 'library-locator '"not a procedure" py281e@f))))) (set! py28b4@py26f7@library-loader py26f7@library-loader) (set! py26f9@current-library-expander (py25f3@py24d2@make-parameter (lambda (py2820@x) (assertion-violation 'library-expander '"not initialized")) (lambda (py2822@f) (if (procedure? py2822@f) py2822@f (assertion-violation 'library-expander '"not a procedure" py2822@f))))) (set! py28b5@py26f9@current-library-expander py26f9@current-library-expander) (set! py26fb@external-pending-libraries (py25f3@py24d2@make-parameter '())) (set! py28b6@py26fb@external-pending-libraries py26fb@external-pending-libraries) (set! py26fd@find-external-library (lambda (py2824@name) (begin (if (member py2824@name (py26fb@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" py2824@name) (void)) (let ((py282a@py2827 py26fb@external-pending-libraries) (py282b@py2829 (cons py2824@name (py26fb@external-pending-libraries)))) (let ((py282e@swap (lambda () (let ((py2830@t (py282a@py2827))) (begin (py282a@py2827 py282b@py2829) (set! py282b@py2829 py2830@t)))))) (dynamic-wind py282e@swap (lambda () (begin ((py26f7@library-loader) py2824@name) (or (py26e7@find-library-by (lambda (py2832@x) (fast-equal? (py26af@library-name py2832@x) py2824@name))) (assertion-violation '#f '"handling external library did not yield the correct library" py2824@name)))) py282e@swap)))))) (set! py28b7@py26fd@find-external-library py26fd@find-external-library) (set! py26ff@find-library-by-name (lambda (py2834@name) (or (py26e7@find-library-by (lambda (py2836@x) (fast-equal? (py26af@library-name py2836@x) py2834@name))) (py26fd@find-external-library py2834@name)))) (set! py28b8@py26ff@find-library-by-name py26ff@find-library-by-name) (set! py2701@library-exists? (lambda (py2838@name) (and (py26e7@find-library-by (lambda (py283a@x) (fast-equal? (py26af@library-name py283a@x) py2838@name))) '#t))) (set! py28b9@py2701@library-exists? py2701@library-exists?) (set! py2703@find-library-by-spec/die (lambda (py283c@spec) (let ((py283e@id (car py283c@spec))) (or (py26e7@find-library-by (lambda (py2840@x) (eq? py283e@id (py26ab@library-id py2840@x)))) (assertion-violation '#f '"cannot find library with required spec" py283c@spec))))) (set! py28ba@py2703@find-library-by-spec/die py2703@find-library-by-spec/die) (set! py2705@label->binding-table (make-eq-hashtable)) (set! py28bb@py2705@label->binding-table py2705@label->binding-table) (set! py2707@install-library-record (lambda (py2842@lib) (begin (let ((py2844@exp-env (py26c7@library-env py2842@lib))) (for-each (lambda (py2846@x) (let ((py2848@label (car py2846@x)) (py2849@binding (cdr py2846@x))) (let ((py284c@binding (let ((py284e@t (car py2849@binding))) (if (memv py284e@t '(global)) (cons 'global (cons py2842@lib (cdr py2849@binding))) (if (memv py284e@t '(global-macro)) (cons 'global-macro (cons py2842@lib (cdr py2849@binding))) (if (memv py284e@t '(global-macro!)) (cons 'global-macro! (cons py2842@lib (cdr py2849@binding))) py2849@binding)))))) (begin (if (hashtable-ref py2705@label->binding-table py2848@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" py2848@label (hashtable-ref py2705@label->binding-table py2848@label '#f) py284c@binding) (exit)) (void)) (hashtable-set! py2705@label->binding-table py2848@label py284c@binding))))) py2844@exp-env)) ((py269d@current-library-collection) py2842@lib)))) (set! py28bc@py2707@install-library-record py2707@install-library-record) (set! py2709@install-library (lambda (py2850@id py2851@name py2852@ver py2853@imp* py2854@vis* py2855@inv* py2856@exp-subst py2857@exp-env py2858@visit-proc py2859@invoke-proc py285a@visit-code py285b@invoke-code py285c@visible? py285d@source-file-name) (let ((py286c@imp-lib* (map py2703@find-library-by-spec/die py2853@imp*)) (py286d@vis-lib* (map py2703@find-library-by-spec/die py2854@vis*)) (py286e@inv-lib* (map py2703@find-library-by-spec/die py2855@inv*))) (begin (if (not (and (symbol? py2850@id) (list? py2851@name) (list? py2852@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" py2850@id py2851@name py2852@ver) (void)) (if (py2701@library-exists? py2851@name) (assertion-violation 'install-library '"library is already installed" py2851@name) (void)) (let ((py2872@lib (make-simple-struct 'library '15 (list py2850@id py2851@name py2852@ver py286c@imp-lib* py286d@vis-lib* py286e@inv-lib* py2856@exp-subst py2857@exp-env py2858@visit-proc py2859@invoke-proc py285a@visit-code py285b@invoke-code py285c@visible? py285d@source-file-name)))) (py2707@install-library-record py2872@lib)))))) (set! py28bd@py2709@install-library py2709@install-library) (set! py270b@imported-label->binding (lambda (py2874@lab) (hashtable-ref py2705@label->binding-table py2874@lab '#f))) (set! py28be@py270b@imported-label->binding py270b@imported-label->binding) (set! py270d@invoke-library (lambda (py2876@lib) (let ((py2878@invoke (py26cf@library-invoke-state py2876@lib))) (if (procedure? py2878@invoke) (begin (py26d1@set-library-invoke-state! py2876@lib (lambda () (assertion-violation 'invoke '"circularity detected" py2876@lib))) (for-each py270d@invoke-library (py26bf@library-inv* py2876@lib)) (py26d1@set-library-invoke-state! py2876@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" py2876@lib))) (py2878@invoke) (py26d1@set-library-invoke-state! py2876@lib '#t)) (void))))) (set! py28bf@py270d@invoke-library py270d@invoke-library) (set! py270f@visit-library (lambda (py287a@lib) (let ((py287c@visit (py26cb@library-visit-state py287a@lib))) (if (procedure? py287c@visit) (begin (py26cd@set-library-visit-state! py287a@lib (lambda () (assertion-violation 'visit '"circularity detected" py287a@lib))) (for-each py270d@invoke-library (py26bb@library-vis* py287a@lib)) (py26cd@set-library-visit-state! py287a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" py287a@lib))) (py287c@visit) (py26cd@set-library-visit-state! py287a@lib '#t)) (void))))) (set! py28c0@py270f@visit-library py270f@visit-library) (set! py2711@invoke-library-by-spec (lambda (py287e@spec) (py270d@invoke-library (py2703@find-library-by-spec/die py287e@spec)))) (set! py28c1@py2711@invoke-library-by-spec py2711@invoke-library-by-spec) (set! py2713@installed-libraries (lambda py2886 (let ((py2887 (length py2886))) (if (= py2887 '1) (apply (lambda (py2880@all?) (let py2884@f ((py2882@ls ((py269d@current-library-collection)))) (if (null? py2882@ls) '() (if (or py2880@all? (py26db@library-visible? (car py2882@ls))) (cons (car py2882@ls) (py2884@f (cdr py2882@ls))) (py2884@f (cdr py2882@ls)))))) py2886) (if (= py2887 '0) (apply (lambda () (py2713@installed-libraries '#f)) py2886) (error 'apply '"invalid arg count")))))) (set! py28c2@py2713@installed-libraries py2713@installed-libraries) (set! py2715@library-spec (lambda (py2888@x) (begin (if (not (py26a9@library? py2888@x)) (assertion-violation 'library-spec '"not a library" py2888@x) (void)) (list (py26ab@library-id py2888@x) (py26af@library-name py2888@x) (py26b3@library-version py2888@x))))) (set! py28c3@py2715@library-spec py2715@library-spec) (void))
(begin (set! py28c7@build-global-define (unspecified)) (set! py2938@build-lambda (unspecified)) (set! py293a@build-case-lambda (unspecified)) (set! py2968@build-sequence (unspecified)) (set! py296a@build-void (unspecified)) (set! py296c@build-letrec (unspecified)) (set! py296e@build-let (unspecified)) (set! py2970@build-named-let (unspecified)) (set! py2972@build-letrec* (unspecified)) (set! py2974@build-library-letrec* (unspecified)) (set! py2976@build-receive (unspecified)) (set! py28c7@build-global-define (lambda (py2977@x) (py296a@build-void))) (set! py2a0b@py28c7@build-global-define py28c7@build-global-define) (set! py2938@build-lambda (lambda (py2979@ae py297a@vars py297b@exp) (list 'lambda py297a@vars py297b@exp))) (set! py2a0c@py2938@build-lambda py2938@build-lambda) (set! py293a@build-case-lambda (lambda (py297f@ae py2980@vars* py2981@exp*) (let ((py2986@build-error '#f) (py2988@build-pred '#f) (py298a@build-apply '#f) (py298c@expand-case-lambda '#f)) (begin (set! py2986@build-error (lambda (py29bd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! py2988@build-pred (lambda (py29a5@ae py29a6@n py29a7@vars) (call-with-values (lambda () (let py29b3@f ((py29af@vars py29a7@vars) (py29b0@count '0)) (if (pair? py29af@vars) (py29b3@f (cdr py29af@vars) (+ py29b0@count '1)) (if (null? py29af@vars) (values py29b0@count '=) (values py29b0@count '>=))))) (lambda (py29b5@py29ac py29b6@py29ae) (let ((py29b9@pred py29b6@py29ae) (py29ba@count py29b5@py29ac)) (list (list 'primitive py29b9@pred) py29a6@n (list 'quote py29ba@count))))))) (set! py298a@build-apply (lambda (py299d@ae py299e@g py299f@vars py29a0@exp) (list '(primitive apply) (py2938@build-lambda py299d@ae py299f@vars py29a0@exp) py299e@g))) (set! py298c@expand-case-lambda (lambda (py298d@ae py298e@vars py298f@exp*) (let ((py2993@g (gensym)) (py2994@n (gensym))) (list 'lambda py2993@g (py296e@build-let py298d@ae (list py2994@n) (list (list '(primitive length) py2993@g)) (let py299b@f ((py2997@vars* py2980@vars*) (py2998@exp* py298f@exp*)) (if (null? py2997@vars*) (py2986@build-error py298d@ae) (list 'if (py2988@build-pred py298d@ae py2994@n (car py2997@vars*)) (py298a@build-apply py298d@ae py2993@g (car py2997@vars*) (car py2998@exp*)) (py299b@f (cdr py2997@vars*) (cdr py2998@exp*)))))))))) (if (= (length py2981@exp*) '1) (py2938@build-lambda py297f@ae (car py2980@vars*) (car py2981@exp*)) (py298c@expand-case-lambda py297f@ae py2980@vars* py2981@exp*)))))) (set! py2a0d@py293a@build-case-lambda py293a@build-case-lambda) (set! py2968@build-sequence (lambda (py29bf@ae py29c0@exps) (let py29c5@loop ((py29c3@exps py29c0@exps)) (if (null? (cdr py29c3@exps)) (car py29c3@exps) (if (equal? (car py29c3@exps) (py296a@build-void)) (py29c5@loop (cdr py29c3@exps)) (cons 'begin py29c3@exps)))))) (set! py2a0e@py2968@build-sequence py2968@build-sequence) (set! py296a@build-void (lambda () '((primitive void)))) (set! py2a0f@py296a@build-void py296a@build-void) (set! py296c@build-letrec (lambda (py29c7@ae py29c8@vars py29c9@val-exps py29ca@body-exp) (if (null? py29c8@vars) py29ca@body-exp (list 'letrec (map list py29c8@vars py29c9@val-exps) py29ca@body-exp)))) (set! py2a10@py296c@build-letrec py296c@build-letrec) (set! py296e@build-let (lambda (py29cf@ae py29d0@vars py29d1@val-exps py29d2@body-exp) (if (null? py29d0@vars) py29d2@body-exp (list 'let (map list py29d0@vars py29d1@val-exps) py29d2@body-exp)))) (set! py2a11@py296e@build-let py296e@build-let) (set! py2970@build-named-let (lambda (py29d7@ae py29d8@name py29d9@vars py29da@val-exps py29db@body-exp) (list 'let py29d8@name (map list py29d9@vars py29da@val-exps) py29db@body-exp))) (set! py2a12@py2970@build-named-let py2970@build-named-let) (set! py2972@build-letrec* (lambda (py29e1@ae py29e2@vars py29e3@val-exps py29e4@body-exp) (if (null? py29e2@vars) py29e4@body-exp (py296e@build-let py29e1@ae py29e2@vars (map (lambda (py29e9@x) (list 'quote '#f)) py29e2@vars) (py2968@build-sequence py29e1@ae (append (map (lambda (py29eb@lhs py29ec@rhs) (list 'set! py29eb@lhs py29ec@rhs)) py29e2@vars py29e3@val-exps) (list py29e4@body-exp))))))) (set! py2a13@py2972@build-letrec* py2972@build-letrec*) (set! py2974@build-library-letrec* (lambda (py29ef@ae py29f0@name py29f1@vars py29f2@locs py29f3@val-exps py29f4@body-exp) (cons 'begin (append (map (lambda (py29fb@var) (cons 'set! (cons py29fb@var '((unspecified))))) py29f1@vars) (append (apply append (map (lambda (py29fd@var py29fe@loc py29ff@val-exp) (list (list 'set! py29fd@var py29ff@val-exp) (list 'set! py29fe@loc py29fd@var))) py29f1@vars py29f2@locs py29f3@val-exps)) (list py29f4@body-exp)))))) (set! py2a14@py2974@build-library-letrec* py2974@build-library-letrec*) (set! py2976@build-receive (lambda (py2a03@ae py2a04@vars py2a05@producer py2a06@body*) (begin (display '"************** in ") (cons 'receive (cons py2a04@vars (cons py2a05@producer py2a06@body*)))))) (set! py2a15@py2976@build-receive py2976@build-receive) (void))
(begin (set! py2a24@file-options-macro (unspecified)) (set! py2a26@set-cons (unspecified)) (set! py2a28@set-union (unspecified)) (set! py2a2d@top-mark* (unspecified)) (set! py2a2f@top-marked? (unspecified)) (set! py2a31@gen-lexical (unspecified)) (set! py2a33@gen-global (unspecified)) (set! py2a35@gen-label (unspecified)) (set! py2a37@gen-top-level-label (unspecified)) (set! py2a39@gen-define-label+loc (unspecified)) (set! py2a3b@gen-define-label (unspecified)) (set! py2a45@rib? (unspecified)) (set! py2a47@rib-sym* (unspecified)) (set! py2a49@set-rib-sym*! (unspecified)) (set! py2a4b@rib-mark** (unspecified)) (set! py2a4d@set-rib-mark**! (unspecified)) (set! py2a4f@rib-label* (unspecified)) (set! py2a51@set-rib-label*! (unspecified)) (set! py2a53@rib-sealed/freq (unspecified)) (set! py2a55@set-rib-sealed/freq! (unspecified)) (set! py2a57@rib-cache (unspecified)) (set! py2a59@set-rib-cache! (unspecified)) (set! py2a5b@dummy (unspecified)) (set! py2a5d@make-empty-rib (unspecified)) (set! py2a5f@extend-rib! (unspecified)) (set! py2a61@extend-rib/nc! (unspecified)) (set! py2a63@make-rib-map (unspecified)) (set! py2a65@seal-rib! (unspecified)) (set! py2a67@unseal-rib! (unspecified)) (set! py2a69@make-full-rib (unspecified)) (set! py2a6b@rp (unspecified)) (set! py2a75@stx? (unspecified)) (set! py2a77@stx-expr (unspecified)) (set! py2a79@set-stx-expr! (unspecified)) (set! py2a7b@stx-mark* (unspecified)) (set! py2a7d@set-stx-mark*! (unspecified)) (set! py2a7f@stx-subst* (unspecified)) (set! py2a81@set-stx-subst*! (unspecified)) (set! py2a83@stx-ae* (unspecified)) (set! py2a85@set-stx-ae*! (unspecified)) (set! py2a87@dummy (unspecified)) (set! py2a89@datum->stx (unspecified)) (set! py2a8b@gen-mark (unspecified)) (set! py2a8d@anti-mark (unspecified)) (set! py2a8f@anti-mark? (unspecified)) (set! py2a91@mkstx (unspecified)) (set! py2a93@add-mark (unspecified)) (set! py2a95@add-subst (unspecified)) (set! py2a97@syntax-kind? (unspecified)) (set! py2a99@syntax-vector->list (unspecified)) (set! py2a9b@syntax-pair? (unspecified)) (set! py2a9d@syntax-vector? (unspecified)) (set! py2a9f@syntax-null? (unspecified)) (set! py2aa1@syntax-list? (unspecified)) (set! py2aa3@syntax-car (unspecified)) (set! py2aa5@syntax-cdr (unspecified)) (set! py2aa7@syntax->list (unspecified)) (set! py2aa9@id? (unspecified)) (set! py2aab@id->sym (unspecified)) (set! py2aad@bound-id=? (unspecified)) (set! py2aaf@free-id=? (unspecified)) (set! py2ab1@valid-bound-ids? (unspecified)) (set! py2ab3@distinct-bound-ids? (unspecified)) (set! py2ab5@bound-id-member? (unspecified)) (set! py2ab7@self-evaluating? (unspecified)) (set! py2ab9@strip-annotations (unspecified)) (set! py2abb@strip (unspecified)) (set! py2abd@stx->datum (unspecified)) (set! py2abf@id->label (unspecified)) (set! py2ac1@label->binding (unspecified)) (set! py2ac3@make-binding (unspecified)) (set! py2ac5@binding-type (unspecified)) (set! py2ac7@binding-value (unspecified)) (set! py2ac9@raise-unbound-error (unspecified)) (set! py2acb@syntax-type (unspecified)) (set! py2ad9@sanitize-binding (unspecified)) (set! py2adb@make-variable-transformer (unspecified)) (set! py2add@variable-transformer? (unspecified)) (set! py2adf@variable-transformer-procedure (unspecified)) (set! py2ae1@make-eval-transformer (unspecified)) (set! py2c32@parse-define (unspecified)) (set! py2c34@parse-define-syntax (unspecified)) (set! py2c36@scheme-stx-hashtable (unspecified)) (set! py2c38@scheme-stx (unspecified)) (set! py2c3a@lexical-var (unspecified)) (set! py2c3c@lexical-mutable? (unspecified)) (set! py2c3e@set-lexical-mutable! (unspecified)) (set! py2c40@add-lexical (unspecified)) (set! py2c42@add-lexicals (unspecified)) (set! py2c44@letrec-helper (unspecified)) (set! py2c46@let-transformer (unspecified)) (set! py2c48@letrec-transformer (unspecified)) (set! py2c4a@letrec*-transformer (unspecified)) (set! py2c4c@fluid-let-syntax-transformer (unspecified)) (set! py2c4e@type-descriptor-transformer (unspecified)) (set! py2c50@record-type-descriptor-transformer (unspecified)) (set! py2c52@record-constructor-descriptor-transformer (unspecified)) (set! py2c54@when-macro (unspecified)) (set! py2c56@unless-macro (unspecified)) (set! py2c58@if-transformer (unspecified)) (set! py2c5a@and-transformer (unspecified)) (set! py2c5c@or-transformer (unspecified)) (set! py2c5e@case-macro (unspecified)) (set! py2c60@quote-transformer (unspecified)) (set! py2c62@case-lambda-transformer (unspecified)) (set! py2c64@lambda-transformer (unspecified)) (set! py2c66@bless (unspecified)) (set! py2c68@with-syntax-macro (unspecified)) (set! py2c6a@invalid-fmls-error (unspecified)) (set! py2c6c@let-macro (unspecified)) (set! py2c6e@let-values-macro (unspecified)) (set! py2c70@let*-values-macro (unspecified)) (set! py2c72@trace-lambda-macro (unspecified)) (set! py2c74@trace-define-macro (unspecified)) (set! py2c76@trace-define-syntax-macro (unspecified)) (set! py2c78@trace-let/rec-syntax (unspecified)) (set! py2c7a@trace-let-syntax-macro (unspecified)) (set! py2c7c@trace-letrec-syntax-macro (unspecified)) (set! py2c7e@guard-macro (unspecified)) (set! py2c80@define-enumeration-macro (unspecified)) (set! py2c82@time-macro (unspecified)) (set! py2c84@delay-macro (unspecified)) (set! py2c86@assert-macro (unspecified)) (set! py2c88@endianness-macro (unspecified)) (set! py2c8a@identifier-syntax-macro (unspecified)) (set! py2c8c@do-macro (unspecified)) (set! py2c8e@let*-macro (unspecified)) (set! py2c90@or-macro (unspecified)) (set! py2c92@and-macro (unspecified)) (set! py2c94@cond-macro (unspecified)) (set! py2c96@do-include (unspecified)) (set! py2c98@include-macro (unspecified)) (set! py2c9a@include-into-macro (unspecified)) (set! py2c9c@syntax-rules-macro (unspecified)) (set! py2c9e@quasiquote-macro (unspecified)) (set! py2ca0@quasisyntax-macro (unspecified)) (set! py2ca2@define-struct-macro (unspecified)) (set! py2ca4@define-record-type-macro (unspecified)) (set! py2ca6@define-condition-type-macro (unspecified)) (set! py2ca8@incorrect-usage-macro (unspecified)) (set! py2caa@parameterize-macro (unspecified)) (set! py2cac@foreign-call-transformer (unspecified)) (set! py2cae@convert-pattern (unspecified)) (set! py2cb0@syntax-dispatch (unspecified)) (set! py2cb2@ellipsis? (unspecified)) (set! py2cb4@underscore? (unspecified)) (set! py2cb6@verify-literals (unspecified)) (set! py2cb8@syntax-case-transformer (unspecified)) (set! py2cba@ellipsis-map (unspecified)) (set! py2cbc@syntax-transformer (unspecified)) (set! py2cbe@core-macro-transformer (unspecified)) (set! py2cc0@symbol-macro (unspecified)) (set! py2cc2@macro-transformer (unspecified)) (set! py2cc4@local-macro-transformer (unspecified)) (set! py2cc6@do-macro-call (unspecified)) (set! py2cc8@chi-macro (unspecified)) (set! py2cca@chi-local-macro (unspecified)) (set! py2ccc@chi-global-macro (unspecified)) (set! py2cce@chi-expr* (unspecified)) (set! py2cd0@chi-application (unspecified)) (set! py2cd2@chi-expr (unspecified)) (set! py2cd4@chi-set! (unspecified)) (set! py2cd6@verify-formals (unspecified)) (set! py2cd8@chi-lambda-clause (unspecified)) (set! py2cda@chi-lambda-clause* (unspecified)) (set! py2cdc@chi-defun (unspecified)) (set! py2cde@chi-rhs (unspecified)) (set! py2ce0@expand-interaction-rhs*/init* (unspecified)) (set! py2ce2@chi-rhs* (unspecified)) (set! py2ce4@find-bound=? (unspecified)) (set! py2ce6@find-dups (unspecified)) (set! py2ce8@chi-internal (unspecified)) (set! py2cea@parse-module (unspecified)) (set! py2cf4@module-interface? (unspecified)) (set! py2cf6@module-interface-first-mark (unspecified)) (set! py2cf8@set-module-interface-first-mark! (unspecified)) (set! py2cfa@module-interface-exp-id-vec (unspecified)) (set! py2cfc@set-module-interface-exp-id-vec! (unspecified)) (set! py2cfe@module-interface-exp-lab-vec (unspecified)) (set! py2d00@set-module-interface-exp-lab-vec! (unspecified)) (set! py2d02@dummy (unspecified)) (set! py2d04@module-interface-exp-id* (unspecified)) (set! py2d06@chi-internal-module (unspecified)) (set! py2d08@chi-body* (unspecified)) (set! py2d0a@expand-transformer (unspecified)) (set! py2d0c@parse-exports (unspecified)) (set! py2d0e@parse-library-name (unspecified)) (set! py2d10@parse-library (unspecified)) (set! py2d12@parse-import-spec* (unspecified)) (set! py2d14@make-top-rib (unspecified)) (set! py2d16@make-collector (unspecified)) (set! py2d18@inv-collector (unspecified)) (set! py2d1a@vis-collector (unspecified)) (set! py2d1c@imp-collector (unspecified)) (set! py2d1e@chi-library-internal (unspecified)) (set! py2d20@chi-interaction-expr (unspecified)) (set! py2d22@library-body-expander (unspecified)) (set! py2d24@core-library-expander (unspecified)) (set! py2d26@parse-top-level-program (unspecified)) (set! py2d28@top-level-expander (unspecified)) (set! py2d2a@rp (unspecified)) (set! py2d34@env? (unspecified)) (set! py2d36@env-names (unspecified)) (set! py2d38@set-env-names! (unspecified)) (set! py2d3a@env-labels (unspecified)) (set! py2d3c@set-env-labels! (unspecified)) (set! py2d3e@env-itc (unspecified)) (set! py2d40@set-env-itc! (unspecified)) (set! py2d42@dummy (unspecified)) (set! py2d44@rp (unspecified)) (set! py2d4e@interaction-env? (unspecified)) (set! py2d50@interaction-env-rib (unspecified)) (set! py2d52@set-interaction-env-rib! (unspecified)) (set! py2d54@interaction-env-r (unspecified)) (set! py2d56@set-interaction-env-r! (unspecified)) (set! py2d58@interaction-env-locs (unspecified)) (set! py2d5a@set-interaction-env-locs! (unspecified)) (set! py2d5c@dummy (unspecified)) (set! py2d5e@interaction-environment-symbols (unspecified)) (set! py2d60@environment-bindings (unspecified)) (set! py2d62@parse-binding (unspecified)) (set! py2d64@environment? (unspecified)) (set! py2d66@environment-symbols (unspecified)) (set! py2d68@environment (unspecified)) (set! py2d6a@null-environment (unspecified)) (set! py2d6c@scheme-report-environment (unspecified)) (set! py2d6e@expand (unspecified)) (set! py2d70@eval (unspecified)) (set! py2d72@library-expander (unspecified)) (set! py2d74@boot-library-expand (unspecified)) (set! py2d76@rev-map-append (unspecified)) (set! py2d78@build-exports (unspecified)) (set! py2d7a@make-export-subst (unspecified)) (set! py2d7c@make-export-env/macros (unspecified)) (set! py2d7e@generate-temporaries (unspecified)) (set! py2d80@free-identifier=? (unspecified)) (set! py2d82@bound-identifier=? (unspecified)) (set! py2d84@make-source-condition (unspecified)) (set! py2d86@extract-position-condition (unspecified)) (set! py2d88@expression-position (unspecified)) (set! py2d8a@assertion-error (unspecified)) (set! py2d8c@syntax-error (unspecified)) (set! py2d8e@syntax-violation* (unspecified)) (set! py2d90@syntax-violation (unspecified)) (set! py2d92@identifier? (unspecified)) (set! py2d94@datum->syntax (unspecified)) (set! py2d96@syntax->datum (unspecified)) (set! py2d98@ungensym-all (unspecified)) (set! py2d9a@compile-r6rs-top-level (unspecified)) (set! py2d9c@pre-compile-r6rs-top-level (unspecified)) (set! py2d9e@interaction-environment (unspecified)) (set! py2da0@top-level-context (unspecified)) (set! py2a24@file-options-macro (lambda (py2da1@x) (let ((py2da4@valid-option? '#f)) (begin (set! py2da4@valid-option? (lambda (py2dad@x) (and (py2aa9@id? py2dad@x) (memq (py2aab@id->sym py2dad@x) '(no-fail no-create no-truncate))))) (let ((py2da5@t py2da1@x)) (let ((py2da7@ls/false (py2cb0@syntax-dispatch py2da5@t '(_ . each-any)))) (if (and py2da7@ls/false (apply (lambda (py2da9@opt*) (for-all py2da4@valid-option? py2da9@opt*)) py2da7@ls/false)) (apply (lambda (py2dab@opt*) (py2c66@bless (list 'make-file-options (list 'quote py2dab@opt*)))) py2da7@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py2da5@t)))))))) (set! py46f7@py2a24@file-options-macro py2a24@file-options-macro) (set! py2a26@set-cons (lambda (py2daf@x py2db0@ls) (if (memq py2daf@x py2db0@ls) py2db0@ls (cons py2daf@x py2db0@ls)))) (set! py46f8@py2a26@set-cons py2a26@set-cons) (set! py2a28@set-union (lambda (py2db3@ls1 py2db4@ls2) (if (null? py2db3@ls1) py2db4@ls2 (if (memq (car py2db3@ls1) py2db4@ls2) (py2a28@set-union (cdr py2db3@ls1) py2db4@ls2) (cons (car py2db3@ls1) (py2a28@set-union (cdr py2db3@ls1) py2db4@ls2)))))) (set! py46f9@py2a28@set-union py2a28@set-union) (set! py2a2d@top-mark* '(top)) (set! py46fa@py2a2d@top-mark* py2a2d@top-mark*) (set! py2a2f@top-marked? (lambda (py2db7@m*) (memq 'top py2db7@m*))) (set! py46fb@py2a2f@top-marked? py2a2f@top-marked?) (set! py2a31@gen-lexical (lambda (py2db9@sym) (if (symbol? py2db9@sym) (gensym py2db9@sym) (if (py2a75@stx? py2db9@sym) (py2a31@gen-lexical (py2aab@id->sym py2db9@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" py2db9@sym))))) (set! py46fc@py2a31@gen-lexical py2a31@gen-lexical) (set! py2a33@gen-global (lambda (py2dbb@x) (py2a31@gen-lexical py2dbb@x))) (set! py46fd@py2a33@gen-global py2a33@gen-global) (set! py2a35@gen-label (lambda (py2dbd@_) (gensym))) (set! py46fe@py2a35@gen-label py2a35@gen-label) (set! py2a37@gen-top-level-label (lambda (py2dbf@id py2dc0@rib) (let ((py2dc4@find '#f)) (begin (set! py2dc4@find (lambda (py2dcf@sym py2dd0@mark* py2dd1@sym* py2dd2@mark** py2dd3@label*) (and (pair? py2dd1@sym*) (if (and (eq? py2dcf@sym (car py2dd1@sym*)) (same-marks? py2dd0@mark* (car py2dd2@mark**))) (car py2dd3@label*) (py2dc4@find py2dcf@sym py2dd0@mark* (cdr py2dd1@sym*) (cdr py2dd2@mark**) (cdr py2dd3@label*)))))) (let ((py2dc5@sym (py2aab@id->sym py2dbf@id)) (py2dc6@mark* (py2a7b@stx-mark* py2dbf@id))) (let ((py2dc9@sym* (py2a47@rib-sym* py2dc0@rib))) (let ((py2dcb@t (and (memq py2dc5@sym (py2a47@rib-sym* py2dc0@rib)) (py2dc4@find py2dc5@sym py2dc6@mark* py2dc9@sym* (py2a4b@rib-mark** py2dc0@rib) (py2a4f@rib-label* py2dc0@rib))))) (if py2dcb@t ((lambda (py2dcd@label) (if (py28be@py270b@imported-label->binding py2dcd@label) (gensym) py2dcd@label)) py2dcb@t) (gensym))))))))) (set! py46ff@py2a37@gen-top-level-label py2a37@gen-top-level-label) (set! py2a39@gen-define-label+loc (lambda (py2dd9@id py2dda@rib) (let ((py2ddd@t (py2da0@top-level-context))) (if py2ddd@t ((lambda (py2ddf@env) (let ((py2de1@label (py2a37@gen-top-level-label py2dd9@id py2dda@rib)) (py2de2@locs (py2d58@interaction-env-locs py2ddf@env))) (values py2de1@label (let ((py2de5@t (assq py2de1@label py2de2@locs))) (if py2de5@t (cdr py2de5@t) (let ((py2de7@loc (py2a31@gen-lexical py2dd9@id))) (begin (py2d5a@set-interaction-env-locs! py2ddf@env (cons (cons py2de1@label py2de7@loc) py2de2@locs)) py2de7@loc))))))) py2ddd@t) (values (gensym) (py2a31@gen-lexical py2dd9@id)))))) (set! py4700@py2a39@gen-define-label+loc py2a39@gen-define-label+loc) (set! py2a3b@gen-define-label (lambda (py2de9@id py2dea@rib) (if (py2da0@top-level-context) (py2a37@gen-top-level-label py2de9@id py2dea@rib) (gensym)))) (set! py4701@py2a3b@gen-define-label py2a3b@gen-define-label) (set! py2a45@rib? (lambda (py2ded@x) (and (simple-struct? py2ded@x) (eq? (simple-struct-name py2ded@x) 'rib)))) (set! py4702@py2a45@rib? py2a45@rib?) (set! py2a47@rib-sym* (lambda (py2def@x) (simple-struct-ref py2def@x '0))) (set! py4703@py2a47@rib-sym* py2a47@rib-sym*) (set! py2a49@set-rib-sym*! (lambda (py2df1@x py2df2@val) (simple-struct-set! py2df1@x '0 py2df2@val))) (set! py4704@py2a49@set-rib-sym*! py2a49@set-rib-sym*!) (set! py2a4b@rib-mark** (lambda (py2df5@x) (simple-struct-ref py2df5@x '1))) (set! py4705@py2a4b@rib-mark** py2a4b@rib-mark**) (set! py2a4d@set-rib-mark**! (lambda (py2df7@x py2df8@val) (simple-struct-set! py2df7@x '1 py2df8@val))) (set! py4706@py2a4d@set-rib-mark**! py2a4d@set-rib-mark**!) (set! py2a4f@rib-label* (lambda (py2dfb@x) (simple-struct-ref py2dfb@x '2))) (set! py4707@py2a4f@rib-label* py2a4f@rib-label*) (set! py2a51@set-rib-label*! (lambda (py2dfd@x py2dfe@val) (simple-struct-set! py2dfd@x '2 py2dfe@val))) (set! py4708@py2a51@set-rib-label*! py2a51@set-rib-label*!) (set! py2a53@rib-sealed/freq (lambda (py2e01@x) (simple-struct-ref py2e01@x '3))) (set! py4709@py2a53@rib-sealed/freq py2a53@rib-sealed/freq) (set! py2a55@set-rib-sealed/freq! (lambda (py2e03@x py2e04@val) (simple-struct-set! py2e03@x '3 py2e04@val))) (set! py470a@py2a55@set-rib-sealed/freq! py2a55@set-rib-sealed/freq!) (set! py2a57@rib-cache (lambda (py2e07@x) (simple-struct-ref py2e07@x '4))) (set! py470b@py2a57@rib-cache py2a57@rib-cache) (set! py2a59@set-rib-cache! (lambda (py2e09@x py2e0a@val) (simple-struct-set! py2e09@x '4 py2e0a@val))) (set! py470c@py2a59@set-rib-cache! py2a59@set-rib-cache!) (set! py2a5b@dummy '3) (set! py470d@py2a5b@dummy py2a5b@dummy) (set! py2a5d@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! py470e@py2a5d@make-empty-rib py2a5d@make-empty-rib) (set! py2a5f@extend-rib! (lambda (py2e0d@rib py2e0e@id py2e0f@label) (let ((py2e14@find '#f)) (begin (set! py2e14@find (lambda (py2e21@sym py2e22@mark* py2e23@sym* py2e24@mark** py2e25@label*) (and (pair? py2e23@sym*) (if (and (eq? py2e21@sym (car py2e23@sym*)) (same-marks? py2e22@mark* (car py2e24@mark**))) py2e25@label* (py2e14@find py2e21@sym py2e22@mark* (cdr py2e23@sym*) (cdr py2e24@mark**) (cdr py2e25@label*)))))) (begin (if (py2a53@rib-sealed/freq py2e0d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" py2e0d@rib) (void)) (let ((py2e15@sym (py2aab@id->sym py2e0e@id)) (py2e16@mark* (py2a7b@stx-mark* py2e0e@id))) (let ((py2e19@sym* (py2a47@rib-sym* py2e0d@rib))) (let ((py2e1b@t (and (memq py2e15@sym (py2a47@rib-sym* py2e0d@rib)) (py2e14@find py2e15@sym py2e16@mark* py2e19@sym* (py2a4b@rib-mark** py2e0d@rib) (py2a4f@rib-label* py2e0d@rib))))) (if py2e1b@t ((lambda (py2e1d@p) (if (not (eq? py2e0f@label (car py2e1d@p))) (if (py2da0@top-level-context) (set-car! py2e1d@p py2e0f@label) (py2d90@syntax-violation '#f '"multiple definitions of identifier" py2e0e@id)) (void))) py2e1b@t) (begin (if (py2a57@rib-cache py2e0d@rib) (hashtable-update! (py2a57@rib-cache py2e0d@rib) py2e15@sym (lambda (py2e1f@e) (cons (cons py2e16@mark* py2e0f@label) py2e1f@e)) '()) (void)) (py2a49@set-rib-sym*! py2e0d@rib (cons py2e15@sym py2e19@sym*)) (py2a4d@set-rib-mark**! py2e0d@rib (cons py2e16@mark* (py2a4b@rib-mark** py2e0d@rib))) (py2a51@set-rib-label*! py2e0d@rib (cons py2e0f@label (py2a4f@rib-label* py2e0d@rib))))))))))))) (set! py470f@py2a5f@extend-rib! py2a5f@extend-rib!) (set! py2a61@extend-rib/nc! (lambda (py2e2b@rib py2e2c@id py2e2d@label) (let ((py2e31@sym (py2aab@id->sym py2e2c@id)) (py2e32@mark* (py2a7b@stx-mark* py2e2c@id))) (let ((py2e35@sym* (py2a47@rib-sym* py2e2b@rib))) (begin (if (py2a57@rib-cache py2e2b@rib) (hashtable-update! (py2a57@rib-cache py2e2b@rib) py2e31@sym (lambda (py2e37@e) (cons (cons py2e32@mark* py2e2d@label) py2e37@e)) '()) (void)) (py2a49@set-rib-sym*! py2e2b@rib (cons py2e31@sym py2e35@sym*)) (py2a4d@set-rib-mark**! py2e2b@rib (cons py2e32@mark* (py2a4b@rib-mark** py2e2b@rib))) (py2a51@set-rib-label*! py2e2b@rib (cons py2e2d@label (py2a4f@rib-label* py2e2b@rib)))))))) (set! py4710@py2a61@extend-rib/nc! py2a61@extend-rib/nc!) (set! py2a63@make-rib-map (lambda (py2e39@sym*) (let ((py2e3b@ht (make-eq-hashtable))) (let py2e41@f ((py2e3d@i '0) (py2e3e@sym* py2e39@sym*)) (if (null? py2e3e@sym*) py2e3b@ht (begin (hashtable-update! py2e3b@ht (car py2e3e@sym*) (lambda (py2e43@x) (cons py2e3d@i py2e43@x)) '()) (py2e41@f (+ py2e3d@i '1) (cdr py2e3e@sym*)))))))) (set! py4711@py2a63@make-rib-map py2a63@make-rib-map) (set! py2a65@seal-rib! (lambda (py2e45@rib) (let ((py2e47@sym* (py2a47@rib-sym* py2e45@rib))) (if (not (null? py2e47@sym*)) (begin (py2a49@set-rib-sym*! py2e45@rib (list->vector py2e47@sym*)) (py2a4d@set-rib-mark**! py2e45@rib (list->vector (py2a4b@rib-mark** py2e45@rib))) (py2a51@set-rib-label*! py2e45@rib (list->vector (py2a4f@rib-label* py2e45@rib))) (py2a55@set-rib-sealed/freq! py2e45@rib (py2a63@make-rib-map py2e47@sym*))) (void))))) (set! py4712@py2a65@seal-rib! py2a65@seal-rib!) (set! py2a67@unseal-rib! (lambda (py2e49@rib) (if (py2a53@rib-sealed/freq py2e49@rib) (begin (py2a55@set-rib-sealed/freq! py2e49@rib '#f) (py2a49@set-rib-sym*! py2e49@rib (vector->list (py2a47@rib-sym* py2e49@rib))) (py2a4d@set-rib-mark**! py2e49@rib (vector->list (py2a4b@rib-mark** py2e49@rib))) (py2a51@set-rib-label*! py2e49@rib (vector->list (py2a4f@rib-label* py2e49@rib)))) (void)))) (set! py4713@py2a67@unseal-rib! py2a67@unseal-rib!) (set! py2a69@make-full-rib (lambda (py2e4b@id* py2e4c@label*) (let ((py2e4f@r (make-simple-struct 'rib '6 (list (map py2aab@id->sym py2e4b@id*) (map py2a7b@stx-mark* py2e4b@id*) py2e4c@label* '#f '#f)))) (begin (py2a65@seal-rib! py2e4f@r) py2e4f@r)))) (set! py4714@py2a69@make-full-rib py2a69@make-full-rib) (set! py2a6b@rp (py25f0@py24cc@make-record-printer 'stx (lambda (py2e51@x py2e52@p py2e53@wr) (begin (display '"#<syntax " py2e52@p) (write (py2abd@stx->datum py2e51@x) py2e52@p) (let ((py2e57@expr (py2a77@stx-expr py2e51@x))) (if (py25e8@py24bc@annotation? py2e57@expr) (let ((py2e59@src (py25e9@py24be@annotation-source py2e57@expr))) (if (pair? py2e59@src) (begin (display '" [" py2e52@p) (display (cdr py2e59@src) py2e52@p) (display '" of " py2e52@p) (display (car py2e59@src) py2e52@p) (display '"]" py2e52@p)) (void))) (void))) (display '">" py2e52@p))))) (set! py4715@py2a6b@rp py2a6b@rp) (set! py2a75@stx? (lambda (py2e5b@x) (and (simple-struct? py2e5b@x) (eq? (simple-struct-name py2e5b@x) 'stx)))) (set! py4716@py2a75@stx? py2a75@stx?) (set! py2a77@stx-expr (lambda (py2e5d@x) (simple-struct-ref py2e5d@x '0))) (set! py4717@py2a77@stx-expr py2a77@stx-expr) (set! py2a79@set-stx-expr! (lambda (py2e5f@x py2e60@val) (simple-struct-set! py2e5f@x '0 py2e60@val))) (set! py4718@py2a79@set-stx-expr! py2a79@set-stx-expr!) (set! py2a7b@stx-mark* (lambda (py2e63@x) (simple-struct-ref py2e63@x '1))) (set! py4719@py2a7b@stx-mark* py2a7b@stx-mark*) (set! py2a7d@set-stx-mark*! (lambda (py2e65@x py2e66@val) (simple-struct-set! py2e65@x '1 py2e66@val))) (set! py471a@py2a7d@set-stx-mark*! py2a7d@set-stx-mark*!) (set! py2a7f@stx-subst* (lambda (py2e69@x) (simple-struct-ref py2e69@x '2))) (set! py471b@py2a7f@stx-subst* py2a7f@stx-subst*) (set! py2a81@set-stx-subst*! (lambda (py2e6b@x py2e6c@val) (simple-struct-set! py2e6b@x '2 py2e6c@val))) (set! py471c@py2a81@set-stx-subst*! py2a81@set-stx-subst*!) (set! py2a83@stx-ae* (lambda (py2e6f@x) (simple-struct-ref py2e6f@x '3))) (set! py471d@py2a83@stx-ae* py2a83@stx-ae*) (set! py2a85@set-stx-ae*! (lambda (py2e71@x py2e72@val) (simple-struct-set! py2e71@x '3 py2e72@val))) (set! py471e@py2a85@set-stx-ae*! py2a85@set-stx-ae*!) (set! py2a87@dummy '3) (set! py471f@py2a87@dummy py2a87@dummy) (set! py2a89@datum->stx (lambda (py2e75@id py2e76@datum) (make-simple-struct 'stx '5 (list py2e76@datum (py2a7b@stx-mark* py2e75@id) (py2a7f@stx-subst* py2e75@id) (py2a83@stx-ae* py2e75@id))))) (set! py4720@py2a89@datum->stx py2a89@datum->stx) (set! py2a8b@gen-mark (lambda () (string '#\m))) (set! py4721@py2a8b@gen-mark py2a8b@gen-mark) (set! py2a8d@anti-mark '#f) (set! py4722@py2a8d@anti-mark py2a8d@anti-mark) (set! py2a8f@anti-mark? not) (set! py4723@py2a8f@anti-mark? py2a8f@anti-mark?) (set! py2a91@mkstx (lambda (py2e79@e py2e7a@m* py2e7b@s* py2e7c@ae*) (if (and (py2a75@stx? py2e79@e) (not (py2a2f@top-marked? py2e7a@m*))) (call-with-values (lambda () (join-wraps py2e7a@m* py2e7b@s* py2e7c@ae* py2e79@e)) (lambda (py2e87@py2e82 py2e88@py2e84 py2e89@py2e86) (let ((py2e8d@ae* py2e89@py2e86) (py2e8e@s* py2e88@py2e84) (py2e8f@m* py2e87@py2e82)) (make-simple-struct 'stx '5 (list (py2a77@stx-expr py2e79@e) py2e8f@m* py2e8e@s* py2e8d@ae*))))) (make-simple-struct 'stx '5 (list py2e79@e py2e7a@m* py2e7b@s* py2e7c@ae*))))) (set! py4724@py2a91@mkstx py2a91@mkstx) (set! py2a93@add-mark (lambda (py2e93@m py2e94@e py2e95@ae) (py2a91@mkstx py2e94@e (list py2e93@m) '(shift) (list py2e95@ae)))) (set! py4725@py2a93@add-mark py2a93@add-mark) (set! py2a95@add-subst (lambda (py2e99@subst py2e9a@e) (py2a91@mkstx py2e9a@e '() (list py2e99@subst) '()))) (set! py4726@py2a95@add-subst py2a95@add-subst) (set! py2a97@syntax-kind? (lambda (py2e9d@x py2e9e@p?) (if (py2a75@stx? py2e9d@x) (py2a97@syntax-kind? (py2a77@stx-expr py2e9d@x) py2e9e@p?) (if (py25e8@py24bc@annotation? py2e9d@x) (py2a97@syntax-kind? (py25ea@py24c0@annotation-expression py2e9d@x) py2e9e@p?) (py2e9e@p? py2e9d@x))))) (set! py4727@py2a97@syntax-kind? py2a97@syntax-kind?) (set! py2a99@syntax-vector->list (lambda (py2ea1@x) (if (py2a75@stx? py2ea1@x) (let ((py2ea3@ls (py2a99@syntax-vector->list (py2a77@stx-expr py2ea1@x))) (py2ea4@m* (py2a7b@stx-mark* py2ea1@x)) (py2ea5@s* (py2a7f@stx-subst* py2ea1@x)) (py2ea6@ae* (py2a83@stx-ae* py2ea1@x))) (map (lambda (py2eab@x) (py2a91@mkstx py2eab@x py2ea4@m* py2ea5@s* py2ea6@ae*)) py2ea3@ls)) (if (py25e8@py24bc@annotation? py2ea1@x) (py2a99@syntax-vector->list (py25ea@py24c0@annotation-expression py2ea1@x)) (if (vector? py2ea1@x) (vector->list py2ea1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" py2ea1@x)))))) (set! py4728@py2a99@syntax-vector->list py2a99@syntax-vector->list) (set! py2a9b@syntax-pair? (lambda (py2ead@x) (py2a97@syntax-kind? py2ead@x pair?))) (set! py4729@py2a9b@syntax-pair? py2a9b@syntax-pair?) (set! py2a9d@syntax-vector? (lambda (py2eaf@x) (py2a97@syntax-kind? py2eaf@x vector?))) (set! py472a@py2a9d@syntax-vector? py2a9d@syntax-vector?) (set! py2a9f@syntax-null? (lambda (py2eb1@x) (py2a97@syntax-kind? py2eb1@x null?))) (set! py472b@py2a9f@syntax-null? py2a9f@syntax-null?) (set! py2aa1@syntax-list? (lambda (py2eb3@x) (or (py2a9f@syntax-null? py2eb3@x) (and (py2a9b@syntax-pair? py2eb3@x) (py2aa1@syntax-list? (py2aa5@syntax-cdr py2eb3@x)))))) (set! py472c@py2aa1@syntax-list? py2aa1@syntax-list?) (set! py2aa3@syntax-car (lambda (py2eb5@x) (if (py2a75@stx? py2eb5@x) (py2a91@mkstx (py2aa3@syntax-car (py2a77@stx-expr py2eb5@x)) (py2a7b@stx-mark* py2eb5@x) (py2a7f@stx-subst* py2eb5@x) (py2a83@stx-ae* py2eb5@x)) (if (py25e8@py24bc@annotation? py2eb5@x) (py2aa3@syntax-car (py25ea@py24c0@annotation-expression py2eb5@x)) (if (pair? py2eb5@x) (car py2eb5@x) (assertion-violation 'syntax-car '"BUG: not a pair" py2eb5@x)))))) (set! py472d@py2aa3@syntax-car py2aa3@syntax-car) (set! py2aa5@syntax-cdr (lambda (py2eb7@x) (if (py2a75@stx? py2eb7@x) (py2a91@mkstx (py2aa5@syntax-cdr (py2a77@stx-expr py2eb7@x)) (py2a7b@stx-mark* py2eb7@x) (py2a7f@stx-subst* py2eb7@x) (py2a83@stx-ae* py2eb7@x)) (if (py25e8@py24bc@annotation? py2eb7@x) (py2aa5@syntax-cdr (py25ea@py24c0@annotation-expression py2eb7@x)) (if (pair? py2eb7@x) (cdr py2eb7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" py2eb7@x)))))) (set! py472e@py2aa5@syntax-cdr py2aa5@syntax-cdr) (set! py2aa7@syntax->list (lambda (py2eb9@x) (if (py2a9b@syntax-pair? py2eb9@x) (cons (py2aa3@syntax-car py2eb9@x) (py2aa7@syntax->list (py2aa5@syntax-cdr py2eb9@x))) (if (py2a9f@syntax-null? py2eb9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" py2eb9@x))))) (set! py472f@py2aa7@syntax->list py2aa7@syntax->list) (set! py2aa9@id? (lambda (py2ebb@x) (and (py2a75@stx? py2ebb@x) (symbol? (py2a77@stx-expr py2ebb@x))))) (set! py4730@py2aa9@id? py2aa9@id?) (set! py2aab@id->sym (lambda (py2ebd@x) (py2a77@stx-expr py2ebd@x))) (set! py4731@py2aab@id->sym py2aab@id->sym) (set! py2aad@bound-id=? (lambda (py2ebf@x py2ec0@y) (and (eq? (py2aab@id->sym py2ebf@x) (py2aab@id->sym py2ec0@y)) (same-marks? (py2a7b@stx-mark* py2ebf@x) (py2a7b@stx-mark* py2ec0@y))))) (set! py4732@py2aad@bound-id=? py2aad@bound-id=?) (set! py2aaf@free-id=? (lambda (py2ec3@i py2ec4@j) (let ((py2ec7@t0 (id->real-label py2ec3@i)) (py2ec8@t1 (id->real-label py2ec4@j))) (if (or py2ec7@t0 py2ec8@t1) (eq? py2ec7@t0 py2ec8@t1) (eq? (py2aab@id->sym py2ec3@i) (py2aab@id->sym py2ec4@j)))))) (set! py4733@py2aaf@free-id=? py2aaf@free-id=?) (set! py2ab1@valid-bound-ids? (lambda (py2ecb@id*) (and (for-all py2aa9@id? py2ecb@id*) (py2ab3@distinct-bound-ids? py2ecb@id*)))) (set! py4734@py2ab1@valid-bound-ids? py2ab1@valid-bound-ids?) (set! py2ab3@distinct-bound-ids? (lambda (py2ecd@id*) (or (null? py2ecd@id*) (and (not (py2ab5@bound-id-member? (car py2ecd@id*) (cdr py2ecd@id*))) (py2ab3@distinct-bound-ids? (cdr py2ecd@id*)))))) (set! py4735@py2ab3@distinct-bound-ids? py2ab3@distinct-bound-ids?) (set! py2ab5@bound-id-member? (lambda (py2ecf@id py2ed0@id*) (and (pair? py2ed0@id*) (or (py2aad@bound-id=? py2ecf@id (car py2ed0@id*)) (py2ab5@bound-id-member? py2ecf@id (cdr py2ed0@id*)))))) (set! py4736@py2ab5@bound-id-member? py2ab5@bound-id-member?) (set! py2ab7@self-evaluating? (lambda (py2ed3@x) (or (number? py2ed3@x) (string? py2ed3@x) (char? py2ed3@x) (boolean? py2ed3@x) (regexp? py2ed3@x) (bytevector? py2ed3@x)))) (set! py4737@py2ab7@self-evaluating? py2ab7@self-evaluating?) (set! py2ab9@strip-annotations (lambda (py2ed5@x) (if (pair? py2ed5@x) (cons (py2ab9@strip-annotations (car py2ed5@x)) (py2ab9@strip-annotations (cdr py2ed5@x))) (if (vector? py2ed5@x) (vector-map py2ab9@strip-annotations py2ed5@x) (if (py25e8@py24bc@annotation? py2ed5@x) (py25e7@py24ba@annotation-stripped py2ed5@x) py2ed5@x))))) (set! py4738@py2ab9@strip-annotations py2ab9@strip-annotations) (set! py2abb@strip (lambda (py2ed7@x py2ed8@m*) (if (py2a2f@top-marked? py2ed8@m*) (if (or (py25e8@py24bc@annotation? py2ed7@x) (and (pair? py2ed7@x) (py25e8@py24bc@annotation? (car py2ed7@x))) (and (vector? py2ed7@x) (> (vector-length py2ed7@x) '0) (py25e8@py24bc@annotation? (vector-ref py2ed7@x '0)))) (py2ab9@strip-annotations py2ed7@x) py2ed7@x) (let py2edd@f ((py2edb@x py2ed7@x)) (if (py2a75@stx? py2edb@x) (py2abb@strip (py2a77@stx-expr py2edb@x) (py2a7b@stx-mark* py2edb@x)) (if (py25e8@py24bc@annotation? py2edb@x) (py25e7@py24ba@annotation-stripped py2edb@x) (if (pair? py2edb@x) (let ((py2edf@a (py2edd@f (car py2edb@x))) (py2ee0@d (py2edd@f (cdr py2edb@x)))) (if (and (eq? py2edf@a (car py2edb@x)) (eq? py2ee0@d (cdr py2edb@x))) py2edb@x (cons py2edf@a py2ee0@d))) (if (vector? py2edb@x) (let ((py2ee3@old (vector->list py2edb@x))) (let ((py2ee5@new (map py2edd@f py2ee3@old))) (if (for-all eq? py2ee3@old py2ee5@new) py2edb@x (list->vector py2ee5@new)))) py2edb@x)))))))) (set! py4739@py2abb@strip py2abb@strip) (set! py2abd@stx->datum (lambda (py2ee7@x) (py2abb@strip py2ee7@x '()))) (set! py473a@py2abd@stx->datum py2abd@stx->datum) (set! py2abf@id->label (lambda (py2ee9@id) (or (id->real-label py2ee9@id) (let ((py2eeb@t (py2da0@top-level-context))) (if py2eeb@t ((lambda (py2eed@env) (let ((py2eef@rib (py2d50@interaction-env-rib py2eed@env))) (call-with-values (lambda () (py2a39@gen-define-label+loc py2ee9@id py2eef@rib)) (lambda (py2ef5@py2ef2 py2ef6@py2ef4) (let ((py2ef9@loc_ py2ef6@py2ef4) (py2efa@lab py2ef5@py2ef2)) (begin (py2a5f@extend-rib! py2eef@rib py2ee9@id py2efa@lab) py2efa@lab)))))) py2eeb@t) '#f))))) (set! py473b@py2abf@id->label py2abf@id->label) (set! py2ac1@label->binding (lambda (py2efd@x py2efe@r) (let ((py2f01@t (py28be@py270b@imported-label->binding py2efd@x))) (if py2f01@t ((lambda (py2f03@b) (if (and (pair? py2f03@b) (eq? (car py2f03@b) '$core-rtd)) (cons '$rtd (map py2c66@bless (cdr py2f03@b))) (if (and (pair? py2f03@b) (eq? (car py2f03@b) 'global-rtd)) (let ((py2f05@lib (cadr py2f03@b)) (py2f06@loc (cddr py2f03@b))) (cons '$rtd (symbol-value py2f06@loc))) py2f03@b))) py2f01@t) (let ((py2f09@t (assq py2efd@x py2efe@r))) (if py2f09@t (cdr py2f09@t) (let ((py2f0b@t (py2da0@top-level-context))) (if py2f0b@t ((lambda (py2f0d@env) (let ((py2f0f@t (assq py2efd@x (py2d58@interaction-env-locs py2f0d@env)))) (if py2f0f@t ((lambda (py2f11@p) (cons* 'lexical (cdr py2f11@p) '#f)) py2f0f@t) '(displaced-lexical . #f)))) py2f0b@t) '(displaced-lexical . #f))))))))) (set! py473c@py2ac1@label->binding py2ac1@label->binding) (set! py2ac3@make-binding cons) (set! py473d@py2ac3@make-binding py2ac3@make-binding) (set! py2ac5@binding-type car) (set! py473e@py2ac5@binding-type py2ac5@binding-type) (set! py2ac7@binding-value cdr) (set! py473f@py2ac7@binding-value py2ac7@binding-value) (set! py2ac9@raise-unbound-error (lambda (py2f13@id) (py2d8e@syntax-violation* '#f '"unbound identifier" py2f13@id (py4b35@py497b@make-undefined-violation)))) (set! py4740@py2ac9@raise-unbound-error py2ac9@raise-unbound-error) (set! py2acb@syntax-type (lambda (py2f15@e py2f16@r) (if (py2aa9@id? py2f15@e) (let ((py2f19@id py2f15@e)) (let ((py2f1b@label (py2abf@id->label py2f19@id))) (let ((py2f1d@b (py2ac1@label->binding py2f1b@label py2f16@r))) (let ((py2f1f@type (py2ac5@binding-type py2f1d@b))) (begin (if (not py2f1b@label) (py2ac9@raise-unbound-error py2f19@id) (void)) (let ((py2f21@t py2f1f@type)) (if (memv py2f21@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values py2f1f@type (py2ac7@binding-value py2f1d@b) py2f19@id) (values 'other '#f '#f)))))))) (if (py2a9b@syntax-pair? py2f15@e) (let ((py2f23@id (py2aa3@syntax-car py2f15@e))) (if (py2aa9@id? py2f23@id) (let ((py2f25@label (py2abf@id->label py2f23@id))) (let ((py2f27@b (py2ac1@label->binding py2f25@label py2f16@r))) (let ((py2f29@type (py2ac5@binding-type py2f27@b))) (begin (if (not py2f25@label) (py2ac9@raise-unbound-error py2f23@id) (void)) (let ((py2f2b@t py2f29@type)) (if (memv py2f2b@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values py2f29@type (py2ac7@binding-value py2f27@b) py2f23@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((py2f2d@d (py2abd@stx->datum py2f15@e))) (if (py2ab7@self-evaluating? py2f2d@d) (values 'constant py2f2d@d '#f) (values 'other '#f '#f))))))) (set! py4741@py2acb@syntax-type py2acb@syntax-type) (set! py2ad9@sanitize-binding (lambda (py2f2f@x py2f30@src) (if (procedure? py2f2f@x) (cons* 'local-macro py2f2f@x py2f30@src) (if (and (pair? py2f2f@x) (eq? (car py2f2f@x) 'macro!) (procedure? (cdr py2f2f@x))) (cons* 'local-macro! (cdr py2f2f@x) py2f30@src) (if (and (pair? py2f2f@x) (eq? (car py2f2f@x) '$rtd)) py2f2f@x (assertion-violation 'expand '"invalid transformer" py2f2f@x)))))) (set! py4742@py2ad9@sanitize-binding py2ad9@sanitize-binding) (set! py2adb@make-variable-transformer (lambda (py2f33@x) (if (procedure? py2f33@x) (cons 'macro! py2f33@x) (assertion-violation 'make-variable-transformer '"not a procedure" py2f33@x)))) (set! py4743@py2adb@make-variable-transformer py2adb@make-variable-transformer) (set! py2add@variable-transformer? (lambda (py2f35@x) (and (pair? py2f35@x) (eq? (car py2f35@x) 'macro!) (procedure? (cdr py2f35@x))))) (set! py4744@py2add@variable-transformer? py2add@variable-transformer?) (set! py2adf@variable-transformer-procedure (lambda (py2f37@x) (if (py2add@variable-transformer? py2f37@x) (cdr py2f37@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" py2f37@x)))) (set! py4745@py2adf@variable-transformer-procedure py2adf@variable-transformer-procedure) (set! py2ae1@make-eval-transformer (lambda (py2f39@x) (py2ad9@sanitize-binding (eval-core (py2649@py2601@expanded->core py2f39@x)) py2f39@x))) (set! py4746@py2ae1@make-eval-transformer py2ae1@make-eval-transformer) (set! py2c32@parse-define (lambda (py2f3b@x) (let ((py2f3d@t py2f3b@x)) (let ((py2f3f@ls/false (py2cb0@syntax-dispatch py2f3d@t '(_ (any . any) any . each-any)))) (if (and py2f3f@ls/false (apply (lambda (py2f41@id py2f42@fmls py2f43@b py2f44@b*) (py2aa9@id? py2f41@id)) py2f3f@ls/false)) (apply (lambda (py2f49@id py2f4a@fmls py2f4b@b py2f4c@b*) (begin (py2cd6@verify-formals py2f4a@fmls py2f3b@x) (values py2f49@id (cons 'defun (cons py2f4a@fmls (cons py2f4b@b py2f4c@b*)))))) py2f3f@ls/false) (let ((py2f51@t py2f3d@t)) (let ((py2f53@ls/false (py2cb0@syntax-dispatch py2f51@t '(_ any any)))) (if (and py2f53@ls/false (apply (lambda (py2f55@id py2f56@val) (py2aa9@id? py2f55@id)) py2f53@ls/false)) (apply (lambda (py2f59@id py2f5a@val) (values py2f59@id (cons 'expr py2f5a@val))) py2f53@ls/false) (let ((py2f5d@t py2f51@t)) (let ((py2f5f@ls/false (py2cb0@syntax-dispatch py2f5d@t '(_ any)))) (if (and py2f5f@ls/false (apply (lambda (py2f61@id) (py2aa9@id? py2f61@id)) py2f5f@ls/false)) (apply (lambda (py2f63@id) (values py2f63@id (cons 'expr (py2c66@bless '(void))))) py2f5f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py2f5d@t)))))))))))) (set! py4747@py2c32@parse-define py2c32@parse-define) (set! py2c34@parse-define-syntax (lambda (py2f65@x) (let ((py2f67@t py2f65@x)) (let ((py2f69@ls/false (py2cb0@syntax-dispatch py2f67@t '(_ any any)))) (if (and py2f69@ls/false (apply (lambda (py2f6b@id py2f6c@val) (py2aa9@id? py2f6b@id)) py2f69@ls/false)) (apply (lambda (py2f6f@id py2f70@val) (values py2f6f@id py2f70@val)) py2f69@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py2f67@t)))))) (set! py4748@py2c34@parse-define-syntax py2c34@parse-define-syntax) (set! py2c36@scheme-stx-hashtable (make-eq-hashtable)) (set! py4749@py2c36@scheme-stx-hashtable py2c36@scheme-stx-hashtable) (set! py2c38@scheme-stx (lambda (py2f73@sym) (or (hashtable-ref py2c36@scheme-stx-hashtable py2f73@sym '#f) (let ((py2f75@subst (py289a@py26c3@library-subst (py28b8@py26ff@find-library-by-name '(psyntax system $all))))) (let ((py2f77@stx (make-simple-struct 'stx '5 (list py2f73@sym py2a2d@top-mark* '() '())))) (let ((py2f79@stx (let ((py2f7b@t (assq py2f73@sym py2f75@subst))) (if py2f7b@t ((lambda (py2f7d@x) (let ((py2f7f@name (car py2f7d@x)) (py2f80@label (cdr py2f7d@x))) (py2a95@add-subst (make-simple-struct 'rib '6 (list (list py2f7f@name) (list py2a2d@top-mark*) (list py2f80@label) '#f '#f)) py2f77@stx))) py2f7b@t) py2f77@stx)))) (begin (hashtable-set! py2c36@scheme-stx-hashtable py2f73@sym py2f79@stx) py2f79@stx))))))) (set! py474a@py2c38@scheme-stx py2c38@scheme-stx) (set! py2c3a@lexical-var car) (set! py474b@py2c3a@lexical-var py2c3a@lexical-var) (set! py2c3c@lexical-mutable? cdr) (set! py474c@py2c3c@lexical-mutable? py2c3c@lexical-mutable?) (set! py2c3e@set-lexical-mutable! set-cdr!) (set! py474d@py2c3e@set-lexical-mutable! py2c3e@set-lexical-mutable!) (set! py2c40@add-lexical (lambda (py2f83@lab py2f84@lex py2f85@r) (cons (cons* py2f83@lab 'lexical py2f84@lex '#f) py2f85@r))) (set! py474e@py2c40@add-lexical py2c40@add-lexical) (set! py2c42@add-lexicals (lambda (py2f89@lab* py2f8a@lex* py2f8b@r) (if (null? py2f89@lab*) py2f8b@r (py2c42@add-lexicals (cdr py2f89@lab*) (cdr py2f8a@lex*) (py2c40@add-lexical (car py2f89@lab*) (car py2f8a@lex*) py2f8b@r))))) (set! py474f@py2c42@add-lexicals py2c42@add-lexicals) (set! py2c44@letrec-helper (lambda (py2f8f@e py2f90@r py2f91@mr py2f92@build) (let ((py2f97@t py2f8f@e)) (let ((py2f99@ls/false (py2cb0@syntax-dispatch py2f97@t '(_ #(each (any any)) any . each-any)))) (if py2f99@ls/false (apply (lambda (py2f9b@lhs* py2f9c@rhs* py2f9d@b py2f9e@b*) (if (not (py2ab1@valid-bound-ids? py2f9b@lhs*)) (py2c6a@invalid-fmls-error py2f8f@e py2f9b@lhs*) (let ((py2fa3@lex* (map py2a31@gen-lexical py2f9b@lhs*)) (py2fa4@lab* (map py2a35@gen-label py2f9b@lhs*))) (let ((py2fa7@rib (py2a69@make-full-rib py2f9b@lhs* py2fa4@lab*)) (py2fa8@r (py2c42@add-lexicals py2fa4@lab* py2fa3@lex* py2f90@r))) (let ((py2fab@body (py2ce8@chi-internal (py2a95@add-subst py2fa7@rib (cons py2f9d@b py2f9e@b*)) py2fa8@r py2f91@mr)) (py2fac@rhs* (py2cce@chi-expr* (map (lambda (py2faf@x) (py2a95@add-subst py2fa7@rib py2faf@x)) py2f9c@rhs*) py2fa8@r py2f91@mr))) (py2f92@build '#f py2fa3@lex* py2fac@rhs* py2fab@body)))))) py2f99@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py2f97@t)))))) (set! py4750@py2c44@letrec-helper py2c44@letrec-helper) (set! py2c46@let-transformer (lambda (py2fb1@e py2fb2@r py2fb3@mr) (let ((py2fb7@t py2fb1@e)) (let ((py2fb9@ls/false (py2cb0@syntax-dispatch py2fb7@t '(_ #(each (any any)) any . each-any)))) (if py2fb9@ls/false (apply (lambda (py2fbb@lhs* py2fbc@rhs* py2fbd@b py2fbe@b*) (if (not (py2ab1@valid-bound-ids? py2fbb@lhs*)) (py2c6a@invalid-fmls-error py2fb1@e py2fbb@lhs*) (let ((py2fc3@lex* (map py2a31@gen-lexical py2fbb@lhs*)) (py2fc4@lab* (map py2a35@gen-label py2fbb@lhs*)) (py2fc5@rhs* (py2cce@chi-expr* py2fbc@rhs* py2fb2@r py2fb3@mr))) (let ((py2fc9@rib (py2a69@make-full-rib py2fbb@lhs* py2fc4@lab*)) (py2fca@r (py2c42@add-lexicals py2fc4@lab* py2fc3@lex* py2fb2@r))) (let ((py2fcd@body (py2ce8@chi-internal (py2a95@add-subst py2fc9@rib (cons py2fbd@b py2fbe@b*)) py2fca@r py2fb3@mr))) (py2a11@py296e@build-let '#f py2fc3@lex* py2fc5@rhs* py2fcd@body)))))) py2fb9@ls/false) (let ((py2fcf@t py2fb7@t)) (let ((py2fd1@ls/false (py2cb0@syntax-dispatch py2fcf@t '(_ any #(each (any any)) any . each-any)))) (if py2fd1@ls/false (apply (lambda (py2fd3@loop py2fd4@lhs* py2fd5@rhs* py2fd6@b py2fd7@b*) (if (not (py2ab1@valid-bound-ids? py2fd4@lhs*)) (py2c6a@invalid-fmls-error py2fb1@e py2fd4@lhs*) (let ((py2fdd@lex* (map py2a31@gen-lexical py2fd4@lhs*)) (py2fde@lab* (map py2a35@gen-label py2fd4@lhs*)) (py2fdf@rhs* (py2cce@chi-expr* py2fd5@rhs* py2fb2@r py2fb3@mr)) (py2fe0@loop-lex (py2a31@gen-lexical py2fd3@loop)) (py2fe1@loop-lab (py2a35@gen-label py2fd3@loop))) (let ((py2fe7@loop-rib (py2a69@make-full-rib (list py2fd3@loop) (list py2fe1@loop-lab))) (py2fe8@rib (py2a69@make-full-rib py2fd4@lhs* py2fde@lab*)) (py2fe9@r (py2c42@add-lexicals (cons py2fe1@loop-lab py2fde@lab*) (cons py2fe0@loop-lex py2fdd@lex*) py2fb2@r))) (let ((py2fed@body (py2ce8@chi-internal (py2a95@add-subst py2fe7@loop-rib (py2a95@add-subst py2fe8@rib (cons py2fd6@b py2fd7@b*))) py2fe9@r py2fb3@mr))) (py2a12@py2970@build-named-let '#f py2fe0@loop-lex py2fdd@lex* py2fdf@rhs* py2fed@body)))))) py2fd1@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py2fcf@t))))))))) (set! py4751@py2c46@let-transformer py2c46@let-transformer) (set! py2c48@letrec-transformer (lambda (py2fef@e py2ff0@r py2ff1@mr) (py2c44@letrec-helper py2fef@e py2ff0@r py2ff1@mr py2a10@py296c@build-letrec))) (set! py4752@py2c48@letrec-transformer py2c48@letrec-transformer) (set! py2c4a@letrec*-transformer (lambda (py2ff5@e py2ff6@r py2ff7@mr) (py2c44@letrec-helper py2ff5@e py2ff6@r py2ff7@mr py2a13@py2972@build-letrec*))) (set! py4753@py2c4a@letrec*-transformer py2c4a@letrec*-transformer) (set! py2c4c@fluid-let-syntax-transformer (lambda (py2ffb@e py2ffc@r py2ffd@mr) (let ((py3002@lookup '#f)) (begin (set! py3002@lookup (lambda (py3015@x) (or (py2abf@id->label py3015@x) (py2d90@syntax-violation '#f '"unbound identifier" py2ffb@e py3015@x)))) (let ((py3003@t py2ffb@e)) (let ((py3005@ls/false (py2cb0@syntax-dispatch py3003@t '(_ #(each (any any)) any . each-any)))) (if py3005@ls/false (apply (lambda (py3007@lhs* py3008@rhs* py3009@b py300a@b*) (if (not (py2ab1@valid-bound-ids? py3007@lhs*)) (py2c6a@invalid-fmls-error py2ffb@e py3007@lhs*) (let ((py300f@lab* (map py3002@lookup py3007@lhs*)) (py3010@rhs* (map (lambda (py3013@x) (py2ae1@make-eval-transformer (py2d0a@expand-transformer py3013@x py2ffd@mr))) py3008@rhs*))) (py2ce8@chi-internal (cons py3009@b py300a@b*) (append (map cons py300f@lab* py3010@rhs*) py2ffc@r) (append (map cons py300f@lab* py3010@rhs*) py2ffd@mr))))) py3005@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3003@t)))))))) (set! py4754@py2c4c@fluid-let-syntax-transformer py2c4c@fluid-let-syntax-transformer) (set! py2c4e@type-descriptor-transformer (lambda (py3017@e py3018@r py3019@mr) (let ((py301d@t py3017@e)) (let ((py301f@ls/false (py2cb0@syntax-dispatch py301d@t '(_ any)))) (if (and py301f@ls/false (apply (lambda (py3021@id) (py2aa9@id? py3021@id)) py301f@ls/false)) (apply (lambda (py3023@id) (let ((py3025@lab (py2abf@id->label py3023@id))) (let ((py3027@b (py2ac1@label->binding py3025@lab py3018@r))) (let ((py3029@type (py2ac5@binding-type py3027@b))) (begin (if (not py3025@lab) (py2ac9@raise-unbound-error py3023@id) (void)) (if (not (and (eq? py3029@type '$rtd) (not (list? (py2ac7@binding-value py3027@b))))) (py2d90@syntax-violation '#f '"not a record type" py3017@e) (void)) (list 'quote (py2ac7@binding-value py3027@b))))))) py301f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py301d@t)))))) (set! py4755@py2c4e@type-descriptor-transformer py2c4e@type-descriptor-transformer) (set! py2c50@record-type-descriptor-transformer (lambda (py302b@e py302c@r py302d@mr) (let ((py3031@t py302b@e)) (let ((py3033@ls/false (py2cb0@syntax-dispatch py3031@t '(_ any)))) (if (and py3033@ls/false (apply (lambda (py3035@id) (py2aa9@id? py3035@id)) py3033@ls/false)) (apply (lambda (py3037@id) (let ((py3039@lab (py2abf@id->label py3037@id))) (let ((py303b@b (py2ac1@label->binding py3039@lab py302c@r))) (let ((py303d@type (py2ac5@binding-type py303b@b))) (begin (if (not py3039@lab) (py2ac9@raise-unbound-error py3037@id) (void)) (if (not (and (eq? py303d@type '$rtd) (list? (py2ac7@binding-value py303b@b)))) (py2d90@syntax-violation '#f '"not a record type" py302b@e) (void)) (py2cd2@chi-expr (car (py2ac7@binding-value py303b@b)) py302c@r py302d@mr)))))) py3033@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3031@t)))))) (set! py4756@py2c50@record-type-descriptor-transformer py2c50@record-type-descriptor-transformer) (set! py2c52@record-constructor-descriptor-transformer (lambda (py303f@e py3040@r py3041@mr) (let ((py3045@t py303f@e)) (let ((py3047@ls/false (py2cb0@syntax-dispatch py3045@t '(_ any)))) (if (and py3047@ls/false (apply (lambda (py3049@id) (py2aa9@id? py3049@id)) py3047@ls/false)) (apply (lambda (py304b@id) (let ((py304d@lab (py2abf@id->label py304b@id))) (let ((py304f@b (py2ac1@label->binding py304d@lab py3040@r))) (let ((py3051@type (py2ac5@binding-type py304f@b))) (begin (if (not py304d@lab) (py2ac9@raise-unbound-error py304b@id) (void)) (if (not (and (eq? py3051@type '$rtd) (list? (py2ac7@binding-value py304f@b)))) (py2d90@syntax-violation '#f '"invalid type" py303f@e) (void)) (py2cd2@chi-expr (cadr (py2ac7@binding-value py304f@b)) py3040@r py3041@mr)))))) py3047@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3045@t)))))) (set! py4757@py2c52@record-constructor-descriptor-transformer py2c52@record-constructor-descriptor-transformer) (set! py2c54@when-macro (lambda (py3053@e) (let ((py3055@t py3053@e)) (let ((py3057@ls/false (py2cb0@syntax-dispatch py3055@t '(_ any any . each-any)))) (if py3057@ls/false (apply (lambda (py3059@test py305a@e py305b@e*) (py2c66@bless (list 'if py3059@test (cons 'begin (cons py305a@e py305b@e*))))) py3057@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3055@t)))))) (set! py4758@py2c54@when-macro py2c54@when-macro) (set! py2c56@unless-macro (lambda (py305f@e) (let ((py3061@t py305f@e)) (let ((py3063@ls/false (py2cb0@syntax-dispatch py3061@t '(_ any any . each-any)))) (if py3063@ls/false (apply (lambda (py3065@test py3066@e py3067@e*) (py2c66@bless (list 'if (list 'not py3065@test) (cons 'begin (cons py3066@e py3067@e*))))) py3063@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3061@t)))))) (set! py4759@py2c56@unless-macro py2c56@unless-macro) (set! py2c58@if-transformer (lambda (py306b@e py306c@r py306d@mr) (let ((py3071@t py306b@e)) (let ((py3073@ls/false (py2cb0@syntax-dispatch py3071@t '(_ any any any)))) (if py3073@ls/false (apply (lambda (py3075@e0 py3076@e1 py3077@e2) (list 'if (py2cd2@chi-expr py3075@e0 py306c@r py306d@mr) (py2cd2@chi-expr py3076@e1 py306c@r py306d@mr) (py2cd2@chi-expr py3077@e2 py306c@r py306d@mr))) py3073@ls/false) (let ((py307b@t py3071@t)) (let ((py307d@ls/false (py2cb0@syntax-dispatch py307b@t '(_ any any)))) (if py307d@ls/false (apply (lambda (py307f@e0 py3080@e1) (list 'if (py2cd2@chi-expr py307f@e0 py306c@r py306d@mr) (py2cd2@chi-expr py3080@e1 py306c@r py306d@mr) (py2a0f@py296a@build-void))) py307d@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py307b@t))))))))) (set! py475a@py2c58@if-transformer py2c58@if-transformer) (set! py2c5a@and-transformer (lambda (py3083@e py3084@r py3085@mr) (let ((py3089@t py3083@e)) (let ((py308b@ls/false (py2cb0@syntax-dispatch py3089@t '(_ . each-any)))) (if py308b@ls/false (apply (lambda (py308d@e*) (cons 'and (py2cce@chi-expr* py308d@e* py3084@r py3085@mr))) py308b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3089@t)))))) (set! py475b@py2c5a@and-transformer py2c5a@and-transformer) (set! py2c5c@or-transformer (lambda (py308f@e py3090@r py3091@mr) (let ((py3095@t py308f@e)) (let ((py3097@ls/false (py2cb0@syntax-dispatch py3095@t '(_ . each-any)))) (if py3097@ls/false (apply (lambda (py3099@e*) (cons 'or (py2cce@chi-expr* py3099@e* py3090@r py3091@mr))) py3097@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3095@t)))))) (set! py475c@py2c5c@or-transformer py2c5c@or-transformer) (set! py2c5e@case-macro (lambda (py309b@e) (let ((py309e@build-last '#f) (py30a0@build-one '#f)) (begin (set! py309e@build-last (lambda (py30c5@cls) (let ((py30c7@t py30c5@cls)) (let ((py30c9@ls/false (py2cb0@syntax-dispatch py30c7@t '(#(scheme-id else) any . each-any)))) (if py30c9@ls/false (apply (lambda (py30cb@e py30cc@e*) (cons 'begin (cons py30cb@e py30cc@e*))) py30c9@ls/false) (let ((py30cf@t py30c7@t)) (let ((py30d1@ls/false (py2cb0@syntax-dispatch py30cf@t '_))) (if py30d1@ls/false (apply (lambda () (py30a0@build-one py30c5@cls '(if #f #f))) py30d1@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py30cf@t))))))))) (set! py30a0@build-one (lambda (py30b7@cls py30b8@k) (let ((py30bb@t py30b7@cls)) (let ((py30bd@ls/false (py2cb0@syntax-dispatch py30bb@t '(each-any any . each-any)))) (if py30bd@ls/false (apply (lambda (py30bf@d* py30c0@e py30c1@e*) (list 'if (list 'memv 't (list 'quote py30bf@d*)) (cons 'begin (cons py30c0@e py30c1@e*)) py30b8@k)) py30bd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py30bb@t)))))) (let ((py30a1@t py309b@e)) (let ((py30a3@ls/false (py2cb0@syntax-dispatch py30a1@t '(_ any)))) (if py30a3@ls/false (apply (lambda (py30a5@expr) (py2c66@bless (cons 'let (cons (list (list 't py30a5@expr)) '((if #f #f)))))) py30a3@ls/false) (let ((py30a7@t py30a1@t)) (let ((py30a9@ls/false (py2cb0@syntax-dispatch py30a7@t '(_ any any . each-any)))) (if py30a9@ls/false (apply (lambda (py30ab@expr py30ac@cls py30ad@cls*) (py2c66@bless (list 'let (list (list 't py30ab@expr)) (let py30b5@f ((py30b1@cls py30ac@cls) (py30b2@cls* py30ad@cls*)) (if (null? py30b2@cls*) (py309e@build-last py30b1@cls) (py30a0@build-one py30b1@cls (py30b5@f (car py30b2@cls*) (cdr py30b2@cls*)))))))) py30a9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py30a7@t))))))))))) (set! py475d@py2c5e@case-macro py2c5e@case-macro) (set! py2c60@quote-transformer (lambda (py30d3@e py30d4@r py30d5@mr) (let ((py30d9@t py30d3@e)) (let ((py30db@ls/false (py2cb0@syntax-dispatch py30d9@t '(_ any)))) (if py30db@ls/false (apply (lambda (py30dd@datum) (list 'quote (py2abd@stx->datum py30dd@datum))) py30db@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py30d9@t)))))) (set! py475e@py2c60@quote-transformer py2c60@quote-transformer) (set! py2c62@case-lambda-transformer (lambda (py30df@e py30e0@r py30e1@mr) (let ((py30e5@t py30df@e)) (let ((py30e7@ls/false (py2cb0@syntax-dispatch py30e5@t '(_ . #(each (any any . each-any)))))) (if py30e7@ls/false (apply (lambda (py30e9@fmls* py30ea@b* py30eb@b**) (call-with-values (lambda () (py2cda@chi-lambda-clause* py30df@e py30e9@fmls* (map cons py30ea@b* py30eb@b**) py30e0@r py30e1@mr)) (lambda (py30f3@py30f0 py30f4@py30f2) (let ((py30f7@body* py30f4@py30f2) (py30f8@fmls* py30f3@py30f0)) (py2a0d@py293a@build-case-lambda '#f py30f8@fmls* py30f7@body*))))) py30e7@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py30e5@t)))))) (set! py475f@py2c62@case-lambda-transformer py2c62@case-lambda-transformer) (set! py2c64@lambda-transformer (lambda (py30fb@e py30fc@r py30fd@mr) (let ((py3101@t py30fb@e)) (let ((py3103@ls/false (py2cb0@syntax-dispatch py3101@t '(_ any any . each-any)))) (if py3103@ls/false (apply (lambda (py3105@fmls py3106@b py3107@b*) (call-with-values (lambda () (py2cd8@chi-lambda-clause py30fb@e py3105@fmls (cons py3106@b py3107@b*) py30fc@r py30fd@mr)) (lambda (py310f@py310c py3110@py310e) (let ((py3113@body py3110@py310e) (py3114@fmls py310f@py310c)) (py2a0c@py2938@build-lambda '#f py3114@fmls py3113@body))))) py3103@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3101@t)))))) (set! py4760@py2c64@lambda-transformer py2c64@lambda-transformer) (set! py2c66@bless (lambda (py3117@x) (py2a91@mkstx (let py311b@f ((py3119@x py3117@x)) (if (py2a75@stx? py3119@x) py3119@x (if (pair? py3119@x) (cons (py311b@f (car py3119@x)) (py311b@f (cdr py3119@x))) (if (symbol? py3119@x) (py2c38@scheme-stx py3119@x) (if (vector? py3119@x) (vector-map py311b@f py3119@x) py3119@x))))) '() '() '()))) (set! py4761@py2c66@bless py2c66@bless) (set! py2c68@with-syntax-macro (lambda (py311d@e) (let ((py311f@t py311d@e)) (let ((py3121@ls/false (py2cb0@syntax-dispatch py311f@t '(_ #(each (any any)) any . each-any)))) (if py3121@ls/false (apply (lambda (py3123@pat* py3124@expr* py3125@b py3126@b*) (let ((py312b@idn* (let py312f@f ((py312d@pat* py3123@pat*)) (if (null? py312d@pat*) '() (call-with-values (lambda () (py2cae@convert-pattern (car py312d@pat*) '())) (lambda (py3135@py3132 py3136@py3134) (let ((py3139@idn* py3136@py3134) (py313a@pat py3135@py3132)) (append py3139@idn* (py312f@f (cdr py312d@pat*)))))))))) (begin (py2cd6@verify-formals (map car py312b@idn*) py311d@e) (let ((py313d@t* (py2d7e@generate-temporaries py3124@expr*))) (py2c66@bless (list 'let (map list py313d@t* py3124@expr*) (let py3143@f ((py313f@pat* py3123@pat*) (py3140@t* py313d@t*)) (if (null? py313f@pat*) (cons 'begin (cons '#f (cons py3125@b py3126@b*))) (list 'syntax-case (car py3140@t*) '() (list (car py313f@pat*) (py3143@f (cdr py313f@pat*) (cdr py3140@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car py313f@pat*)) (car py3140@t*)))))))))))) py3121@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py311f@t)))))) (set! py4762@py2c68@with-syntax-macro py2c68@with-syntax-macro) (set! py2c6a@invalid-fmls-error (lambda (py3145@stx py3146@fmls) (let ((py3149@t py3146@fmls)) (let ((py314b@ls/false (py2cb0@syntax-dispatch py3149@t '#(each+ any () any)))) (if py314b@ls/false (apply (lambda (py314d@id* py314e@last) (let py3153@f ((py3151@id* (if (py2aa9@id? py314e@last) (cons py314e@last py314d@id*) (if (py2a9f@syntax-null? py314e@last) py314d@id* (py2d90@syntax-violation '#f '"not an identifier" py3145@stx py314e@last))))) (if (null? py3151@id*) (values) (if (not (py2aa9@id? (car py3151@id*))) (py2d90@syntax-violation '#f '"not an identifier" py3145@stx (car py3151@id*)) (begin (py3153@f (cdr py3151@id*)) (if (py2ab5@bound-id-member? (car py3151@id*) (cdr py3151@id*)) (py2d90@syntax-violation '#f '"duplicate binding" py3145@stx (car py3151@id*)) (void))))))) py314b@ls/false) (let ((py3155@t py3149@t)) (let ((py3157@ls/false (py2cb0@syntax-dispatch py3155@t '_))) (if py3157@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"malformed binding form" py3145@stx py3146@fmls)) py3157@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3155@t))))))))) (set! py4763@py2c6a@invalid-fmls-error py2c6a@invalid-fmls-error) (set! py2c6c@let-macro (lambda (py3159@stx) (let ((py315b@t py3159@stx)) (let ((py315d@ls/false (py2cb0@syntax-dispatch py315b@t '(_ #(each (any any)) any . each-any)))) (if py315d@ls/false (apply (lambda (py315f@lhs* py3160@rhs* py3161@b py3162@b*) (if (py2ab1@valid-bound-ids? py315f@lhs*) (py2c66@bless (cons (cons 'lambda (cons py315f@lhs* (cons py3161@b py3162@b*))) py3160@rhs*)) (py2c6a@invalid-fmls-error py3159@stx py315f@lhs*))) py315d@ls/false) (let ((py3167@t py315b@t)) (let ((py3169@ls/false (py2cb0@syntax-dispatch py3167@t '(_ any #(each (any any)) any . each-any)))) (if (and py3169@ls/false (apply (lambda (py316b@f py316c@lhs* py316d@rhs* py316e@b py316f@b*) (py2aa9@id? py316b@f)) py3169@ls/false)) (apply (lambda (py3175@f py3176@lhs* py3177@rhs* py3178@b py3179@b*) (if (py2ab1@valid-bound-ids? py3176@lhs*) (py2c66@bless (cons (list 'letrec (list (list py3175@f (cons 'lambda (cons py3176@lhs* (cons py3178@b py3179@b*))))) py3175@f) py3177@rhs*)) (py2c6a@invalid-fmls-error py3159@stx py3176@lhs*))) py3169@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3167@t))))))))) (set! py4764@py2c6c@let-macro py2c6c@let-macro) (set! py2c6e@let-values-macro (lambda (py317f@stx) (let ((py3182@rename '#f) (py3184@rename* '#f)) (begin (set! py3182@rename (lambda (py31e7@x py31e8@old* py31e9@new*) (begin (if (not (py2aa9@id? py31e7@x)) (py2d90@syntax-violation '#f '"not an indentifier" py317f@stx py31e7@x) (void)) (if (py2ab5@bound-id-member? py31e7@x py31e8@old*) (py2d90@syntax-violation '#f '"duplicate binding" py317f@stx py31e7@x) (void)) (let ((py31ed@y (gensym (py2d96@syntax->datum py31e7@x)))) (values py31ed@y (cons py31e7@x py31e8@old*) (cons py31ed@y py31e9@new*)))))) (set! py3184@rename* (lambda (py31d5@x* py31d6@old* py31d7@new*) (if (null? py31d5@x*) (values '() py31d6@old* py31d7@new*) (call-with-values (lambda () (py3182@rename (car py31d5@x*) py31d6@old* py31d7@new*)) (lambda (py31db@x py31dc@old* py31dd@new*) (call-with-values (lambda () (py3184@rename* (cdr py31d5@x*) py31dc@old* py31dd@new*)) (lambda (py31e1@x* py31e2@old* py31e3@new*) (values (cons py31db@x py31e1@x*) py31e2@old* py31e3@new*)))))))) (let ((py3185@t py317f@stx)) (let ((py3187@ls/false (py2cb0@syntax-dispatch py3185@t '(_ () any . each-any)))) (if py3187@ls/false (apply (lambda (py3189@b py318a@b*) (cons* (py2c66@bless 'let) '() py3189@b py318a@b*)) py3187@ls/false) (let ((py318d@t py3185@t)) (let ((py318f@ls/false (py2cb0@syntax-dispatch py318d@t '(_ #(each (any any)) any . each-any)))) (if py318f@ls/false (apply (lambda (py3191@lhs* py3192@rhs* py3193@b py3194@b*) (py2c66@bless (let py31a1@f ((py3199@lhs* py3191@lhs*) (py319a@rhs* py3192@rhs*) (py319b@old* '()) (py319c@new* '())) (if (null? py3199@lhs*) (cons 'let (cons (map list py319b@old* py319c@new*) (cons py3193@b py3194@b*))) (let ((py31a3@t (car py3199@lhs*))) (let ((py31a5@ls/false (py2cb0@syntax-dispatch py31a3@t 'each-any))) (if py31a5@ls/false (apply (lambda (py31a7@x*) (call-with-values (lambda () (py3184@rename* py31a7@x* py319b@old* py319c@new*)) (lambda (py31af@py31aa py31b0@py31ac py31b1@py31ae) (let ((py31b5@new* py31b1@py31ae) (py31b6@old* py31b0@py31ac) (py31b7@y* py31af@py31aa)) (list 'call-with-values (list 'lambda '() (car py319a@rhs*)) (list 'lambda py31b7@y* (py31a1@f (cdr py3199@lhs*) (cdr py319a@rhs*) py31b6@old* py31b5@new*))))))) py31a5@ls/false) (let ((py31bb@t py31a3@t)) (let ((py31bd@ls/false (py2cb0@syntax-dispatch py31bb@t '#(each+ any () any)))) (if py31bd@ls/false (apply (lambda (py31bf@x* py31c0@x) (call-with-values (lambda () (py3182@rename py31c0@x py319b@old* py319c@new*)) (lambda (py31c3@y py31c4@old* py31c5@new*) (call-with-values (lambda () (py3184@rename* py31bf@x* py31c4@old* py31c5@new*)) (lambda (py31c9@y* py31ca@old* py31cb@new*) (list 'call-with-values (list 'lambda '() (car py319a@rhs*)) (list 'lambda (append py31c9@y* py31c3@y) (py31a1@f (cdr py3199@lhs*) (cdr py319a@rhs*) py31ca@old* py31cb@new*)))))))) py31bd@ls/false) (let ((py31cf@t py31bb@t)) (let ((py31d1@ls/false (py2cb0@syntax-dispatch py31cf@t 'any))) (if py31d1@ls/false (apply (lambda (py31d3@others) (py2d90@syntax-violation '#f '"malformed bindings" py317f@stx py31d3@others)) py31d1@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py31cf@t)))))))))))))) py318f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py318d@t))))))))))) (set! py4765@py2c6e@let-values-macro py2c6e@let-values-macro) (set! py2c70@let*-values-macro (lambda (py31ef@stx) (let ((py31f2@check '#f)) (begin (set! py31f2@check (lambda (py3221@x*) (if (not (null? py3221@x*)) (let ((py3223@x (car py3221@x*))) (begin (if (not (py2aa9@id? py3223@x)) (py2d90@syntax-violation '#f '"not an identifier" py31ef@stx py3223@x) (void)) (py31f2@check (cdr py3221@x*)) (if (py2ab5@bound-id-member? py3223@x (cdr py3221@x*)) (py2d90@syntax-violation '#f '"duplicate identifier" py31ef@stx py3223@x) (void)))) (void)))) (let ((py31f3@t py31ef@stx)) (let ((py31f5@ls/false (py2cb0@syntax-dispatch py31f3@t '(_ () any . each-any)))) (if py31f5@ls/false (apply (lambda (py31f7@b py31f8@b*) (cons* (py2c66@bless 'let) '() py31f7@b py31f8@b*)) py31f5@ls/false) (let ((py31fb@t py31f3@t)) (let ((py31fd@ls/false (py2cb0@syntax-dispatch py31fb@t '(_ #(each (any any)) any . each-any)))) (if py31fd@ls/false (apply (lambda (py31ff@lhs* py3200@rhs* py3201@b py3202@b*) (py2c66@bless (let py320b@f ((py3207@lhs* py31ff@lhs*) (py3208@rhs* py3200@rhs*)) (if (null? py3207@lhs*) (cons 'begin (cons py3201@b py3202@b*)) (let ((py320d@t (car py3207@lhs*))) (let ((py320f@ls/false (py2cb0@syntax-dispatch py320d@t 'each-any))) (if py320f@ls/false (apply (lambda (py3211@x*) (begin (py31f2@check py3211@x*) (list 'call-with-values (list 'lambda '() (car py3208@rhs*)) (list 'lambda py3211@x* (py320b@f (cdr py3207@lhs*) (cdr py3208@rhs*)))))) py320f@ls/false) (let ((py3213@t py320d@t)) (let ((py3215@ls/false (py2cb0@syntax-dispatch py3213@t '#(each+ any () any)))) (if py3215@ls/false (apply (lambda (py3217@x* py3218@x) (begin (py31f2@check (cons py3218@x py3217@x*)) (list 'call-with-values (list 'lambda '() (car py3208@rhs*)) (list 'lambda (append py3217@x* py3218@x) (py320b@f (cdr py3207@lhs*) (cdr py3208@rhs*)))))) py3215@ls/false) (let ((py321b@t py3213@t)) (let ((py321d@ls/false (py2cb0@syntax-dispatch py321b@t 'any))) (if py321d@ls/false (apply (lambda (py321f@others) (py2d90@syntax-violation '#f '"malformed bindings" py31ef@stx py321f@others)) py321d@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py321b@t)))))))))))))) py31fd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py31fb@t))))))))))) (set! py4766@py2c70@let*-values-macro py2c70@let*-values-macro) (set! py2c72@trace-lambda-macro (lambda (py3225@stx) (let ((py3227@t py3225@stx)) (let ((py3229@ls/false (py2cb0@syntax-dispatch py3227@t '(_ any each-any any . each-any)))) (if py3229@ls/false (apply (lambda (py322b@who py322c@fmls py322d@b py322e@b*) (if (py2ab1@valid-bound-ids? py322c@fmls) (py2c66@bless (list 'make-traced-procedure (list 'quote py322b@who) (cons 'lambda (cons py322c@fmls (cons py322d@b py322e@b*))))) (py2c6a@invalid-fmls-error py3225@stx py322c@fmls))) py3229@ls/false) (let ((py3233@t py3227@t)) (let ((py3235@ls/false (py2cb0@syntax-dispatch py3233@t '(_ any #(each+ any () any) any . each-any)))) (if py3235@ls/false (apply (lambda (py3237@who py3238@fmls py3239@last py323a@b py323b@b*) (if (py2ab1@valid-bound-ids? (cons py3239@last py3238@fmls)) (py2c66@bless (list 'make-traced-procedure (list 'quote py3237@who) (cons 'lambda (cons (append py3238@fmls py3239@last) (cons py323a@b py323b@b*))))) (py2c6a@invalid-fmls-error py3225@stx (append py3238@fmls py3239@last)))) py3235@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3233@t))))))))) (set! py4767@py2c72@trace-lambda-macro py2c72@trace-lambda-macro) (set! py2c74@trace-define-macro (lambda (py3241@stx) (let ((py3243@t py3241@stx)) (let ((py3245@ls/false (py2cb0@syntax-dispatch py3243@t '(_ (any . each-any) any . each-any)))) (if py3245@ls/false (apply (lambda (py3247@who py3248@fmls py3249@b py324a@b*) (if (py2ab1@valid-bound-ids? py3248@fmls) (py2c66@bless (list 'define py3247@who (list 'make-traced-procedure (list 'quote py3247@who) (cons 'lambda (cons py3248@fmls (cons py3249@b py324a@b*)))))) (py2c6a@invalid-fmls-error py3241@stx py3248@fmls))) py3245@ls/false) (let ((py324f@t py3243@t)) (let ((py3251@ls/false (py2cb0@syntax-dispatch py324f@t '(_ (any . #(each+ any () any)) any . each-any)))) (if py3251@ls/false (apply (lambda (py3253@who py3254@fmls py3255@last py3256@b py3257@b*) (if (py2ab1@valid-bound-ids? (cons py3255@last py3254@fmls)) (py2c66@bless (list 'define py3253@who (list 'make-traced-procedure (list 'quote py3253@who) (cons 'lambda (cons (append py3254@fmls py3255@last) (cons py3256@b py3257@b*)))))) (py2c6a@invalid-fmls-error py3241@stx (append py3254@fmls py3255@last)))) py3251@ls/false) (let ((py325d@t py324f@t)) (let ((py325f@ls/false (py2cb0@syntax-dispatch py325d@t '(_ any any)))) (if py325f@ls/false (apply (lambda (py3261@who py3262@expr) (if (py2aa9@id? py3261@who) (py2c66@bless (list 'define py3261@who (list 'let (list (list 'v py3262@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote py3261@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (py2d90@syntax-violation '#f '"invalid name" py3241@stx))) py325f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py325d@t)))))))))))) (set! py4768@py2c74@trace-define-macro py2c74@trace-define-macro) (set! py2c76@trace-define-syntax-macro (lambda (py3265@stx) (let ((py3267@t py3265@stx)) (let ((py3269@ls/false (py2cb0@syntax-dispatch py3267@t '(_ any any)))) (if py3269@ls/false (apply (lambda (py326b@who py326c@expr) (if (py2aa9@id? py326b@who) (py2c66@bless (list 'define-syntax py326b@who (list 'make-traced-macro (list 'quote py326b@who) py326c@expr))) (py2d90@syntax-violation '#f '"invalid name" py3265@stx))) py3269@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3267@t)))))) (set! py4769@py2c76@trace-define-syntax-macro py2c76@trace-define-syntax-macro) (set! py2c78@trace-let/rec-syntax (lambda (py326f@who) (lambda (py3271@stx) (let ((py3273@t py3271@stx)) (let ((py3275@ls/false (py2cb0@syntax-dispatch py3273@t '(_ #(each (any any)) any . each-any)))) (if py3275@ls/false (apply (lambda (py3277@lhs* py3278@rhs* py3279@b py327a@b*) (if (py2ab1@valid-bound-ids? py3277@lhs*) (let ((py327f@rhs* (map (lambda (py3281@lhs py3282@rhs) (list 'make-traced-macro (list 'quote py3281@lhs) py3282@rhs)) py3277@lhs* py3278@rhs*))) (py2c66@bless (cons py326f@who (cons (map list py3277@lhs* py327f@rhs*) (cons py3279@b py327a@b*))))) (py2c6a@invalid-fmls-error py3271@stx py3277@lhs*))) py3275@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3273@t))))))) (set! py476a@py2c78@trace-let/rec-syntax py2c78@trace-let/rec-syntax) (set! py2c7a@trace-let-syntax-macro (py2c78@trace-let/rec-syntax 'let-syntax)) (set! py476b@py2c7a@trace-let-syntax-macro py2c7a@trace-let-syntax-macro) (set! py2c7c@trace-letrec-syntax-macro (py2c78@trace-let/rec-syntax 'letrec-syntax)) (set! py476c@py2c7c@trace-letrec-syntax-macro py2c7c@trace-letrec-syntax-macro) (set! py2c7e@guard-macro (lambda (py3285@x) (let ((py3288@gen-clauses '#f)) (begin (set! py3288@gen-clauses (lambda (py329f@con py32a0@outerk py32a1@clause*) (let ((py32a6@f '#f) (py32a8@f* '#f)) (begin (set! py32a6@f (lambda (py32df@x py32e0@k) (let ((py32e3@t py32df@x)) (let ((py32e5@ls/false (py2cb0@syntax-dispatch py32e3@t '(any #(scheme-id =>) any)))) (if py32e5@ls/false (apply (lambda (py32e7@e py32e8@p) (let ((py32eb@t (gensym))) (list 'let (list (list py32eb@t py32e7@e)) (list 'if py32eb@t (list py32e8@p py32eb@t) py32e0@k)))) py32e5@ls/false) (let ((py32ed@t py32e3@t)) (let ((py32ef@ls/false (py2cb0@syntax-dispatch py32ed@t '(any)))) (if py32ef@ls/false (apply (lambda (py32f1@e) (let ((py32f3@t (gensym))) (list 'let (list (list py32f3@t py32f1@e)) (list 'if py32f3@t py32f3@t py32e0@k)))) py32ef@ls/false) (let ((py32f5@t py32ed@t)) (let ((py32f7@ls/false (py2cb0@syntax-dispatch py32f5@t '(any any . each-any)))) (if py32f7@ls/false (apply (lambda (py32f9@e py32fa@v py32fb@v*) (list 'if py32f9@e (cons 'begin (cons py32fa@v py32fb@v*)) py32e0@k)) py32f7@ls/false) (let ((py32ff@t py32f5@t)) (let ((py3301@ls/false (py2cb0@syntax-dispatch py32ff@t '_))) (if py3301@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid guard clause" py32df@x)) py3301@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py32ff@t))))))))))))))) (set! py32a8@f* (lambda (py32b5@x*) (let ((py32b7@t py32b5@x*)) (let ((py32b9@ls/false (py2cb0@syntax-dispatch py32b7@t '()))) (if py32b9@ls/false (apply (lambda () (let ((py32bb@g (gensym))) (values (list py32bb@g (list 'lambda '() (list 'raise-continuable py329f@con))) py32bb@g))) py32b9@ls/false) (let ((py32bd@t py32b7@t)) (let ((py32bf@ls/false (py2cb0@syntax-dispatch py32bd@t '((#(scheme-id else) any . each-any))))) (if py32bf@ls/false (apply (lambda (py32c1@e py32c2@e*) (values (cons 'begin (cons py32c1@e py32c2@e*)) '#f)) py32bf@ls/false) (let ((py32c5@t py32bd@t)) (let ((py32c7@ls/false (py2cb0@syntax-dispatch py32c5@t '(any . any)))) (if py32c7@ls/false (apply (lambda (py32c9@cls py32ca@cls*) (call-with-values (lambda () (py32a8@f* py32ca@cls*)) (lambda (py32d1@py32ce py32d2@py32d0) (let ((py32d5@g py32d2@py32d0) (py32d6@e py32d1@py32ce)) (values (py32a6@f py32c9@cls py32d6@e) py32d5@g))))) py32c7@ls/false) (let ((py32d9@t py32c5@t)) (let ((py32db@ls/false (py2cb0@syntax-dispatch py32d9@t 'any))) (if py32db@ls/false (apply (lambda (py32dd@others) (py2d90@syntax-violation '#f '"invalid guard clause" py32dd@others)) py32db@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py32d9@t))))))))))))))) (call-with-values (lambda () (py32a8@f* py32a1@clause*)) (lambda (py32ad@py32aa py32ae@py32ac) (let ((py32b1@raisek py32ae@py32ac) (py32b2@code py32ad@py32aa)) (if py32b1@raisek (list (list 'call/cc (list 'lambda (list py32b1@raisek) (list py32a0@outerk (list 'lambda '() py32b2@code))))) (list py32a0@outerk (list 'lambda '() py32b2@code)))))))))) (let ((py3289@t py3285@x)) (let ((py328b@ls/false (py2cb0@syntax-dispatch py3289@t '(_ (any . each-any) any . each-any)))) (if (and py328b@ls/false (apply (lambda (py328d@con py328e@clause* py328f@b py3290@b*) (py2aa9@id? py328d@con)) py328b@ls/false)) (apply (lambda (py3295@con py3296@clause* py3297@b py3298@b*) (let ((py329d@outerk (gensym))) (py2c66@bless (list (list 'call/cc (list 'lambda (list py329d@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list py3295@con) (py3288@gen-clauses py3295@con py329d@outerk py3296@clause*)) (cons 'lambda (cons '() (cons py3297@b py3298@b*))))))))))) py328b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3289@t)))))))) (set! py476d@py2c7e@guard-macro py2c7e@guard-macro) (set! py2c80@define-enumeration-macro (lambda (py3303@stx) (let ((py3306@set? '#f) (py3308@remove-dups '#f)) (begin (set! py3306@set? (lambda (py331f@x) (or (null? py331f@x) (and (not (memq (car py331f@x) (cdr py331f@x))) (py3306@set? (cdr py331f@x)))))) (set! py3308@remove-dups (lambda (py331d@ls) (if (null? py331d@ls) '() (cons (car py331d@ls) (py3308@remove-dups (remq (car py331d@ls) (cdr py331d@ls))))))) (let ((py3309@t py3303@stx)) (let ((py330b@ls/false (py2cb0@syntax-dispatch py3309@t '(_ any each-any any)))) (if (and py330b@ls/false (apply (lambda (py330d@name py330e@id* py330f@maker) (and (py2aa9@id? py330d@name) (py2aa9@id? py330f@maker) (for-all py2aa9@id? py330e@id*))) py330b@ls/false)) (apply (lambda (py3313@name py3314@id* py3315@maker) (let ((py3319@name* (py3308@remove-dups (py2d96@syntax->datum py3314@id*))) (py331a@mk (gensym))) (py2c66@bless (list 'begin (list 'define py331a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote py3319@name*)))) (list 'define-syntax py3313@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote py3319@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote py3313@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax py3315@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote py3315@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote py3319@name*)) (cons 'syntax-violation (cons (list 'quote py3315@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons py331a@mk '('(n* ...))))))))))))) py330b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3309@t)))))))) (set! py476e@py2c80@define-enumeration-macro py2c80@define-enumeration-macro) (set! py2c82@time-macro (lambda (py3321@stx) (let ((py3323@t py3321@stx)) (let ((py3325@ls/false (py2cb0@syntax-dispatch py3323@t '(_ any)))) (if py3325@ls/false (apply (lambda (py3327@expr) (py2c66@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() py3327@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) py3325@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3323@t)))))) (set! py476f@py2c82@time-macro py2c82@time-macro) (set! py2c84@delay-macro (lambda (py3329@stx) (let ((py332b@t py3329@stx)) (let ((py332d@ls/false (py2cb0@syntax-dispatch py332b@t '(_ any)))) (if py332d@ls/false (apply (lambda (py332f@expr) (py2c66@bless (list 'make-promise (list 'lambda '() py332f@expr)))) py332d@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py332b@t)))))) (set! py4770@py2c84@delay-macro py2c84@delay-macro) (set! py2c86@assert-macro (lambda (py3331@stx) (let ((py3333@t py3331@stx)) (let ((py3335@ls/false (py2cb0@syntax-dispatch py3333@t '(_ any)))) (if py3335@ls/false (apply (lambda (py3337@expr) (let ((py3339@pos (or (py2d88@expression-position py3331@stx) (py2d88@expression-position py3337@expr)))) (py2c66@bless (list 'unless py3337@expr (list 'assertion-error (list 'quote py3337@expr) (list 'quote py3339@pos)))))) py3335@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3333@t)))))) (set! py4771@py2c86@assert-macro py2c86@assert-macro) (set! py2c88@endianness-macro (lambda (py333b@stx) (let ((py333d@t py333b@stx)) (let ((py333f@ls/false (py2cb0@syntax-dispatch py333d@t '(_ any)))) (if py333f@ls/false (apply (lambda (py3341@e) (let ((py3343@t (py2d96@syntax->datum py3341@e))) (if (memv py3343@t '(little)) (py2c66@bless ''little) (if (memv py3343@t '(big)) (py2c66@bless ''big) (py2d90@syntax-violation '#f '"endianness must be big or little" py333b@stx))))) py333f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py333d@t)))))) (set! py4772@py2c88@endianness-macro py2c88@endianness-macro) (set! py2c8a@identifier-syntax-macro (lambda (py3345@stx) (let ((py3347@t py3345@stx)) (let ((py3349@ls/false (py2cb0@syntax-dispatch py3347@t '(_ any)))) (if py3349@ls/false (apply (lambda (py334b@expr) (py2c66@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax py334b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax py334b@expr) '((syntax (e* ...)))))))))) py3349@ls/false) (let ((py334d@t py3347@t)) (let ((py334f@ls/false (py2cb0@syntax-dispatch py334d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and py334f@ls/false (apply (lambda (py3351@id1 py3352@expr1 py3353@id2 py3354@expr2 py3355@expr3) (and (py2aa9@id? py3351@id1) (py2aa9@id? py3353@id2) (py2aa9@id? py3354@expr2))) py334f@ls/false)) (apply (lambda (py335b@id1 py335c@expr1 py335d@id2 py335e@expr2 py335f@expr3) (py2c66@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax py335c@expr1)) (list (list 'set! 'id py335e@expr2) (list 'syntax py335f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons py335c@expr1 '(e* ...))))))))) py334f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py334d@t))))))))) (set! py4773@py2c8a@identifier-syntax-macro py2c8a@identifier-syntax-macro) (set! py2c8c@do-macro (lambda (py3365@stx) (let ((py3368@bind '#f)) (begin (set! py3368@bind (lambda (py337f@x) (let ((py3381@t py337f@x)) (let ((py3383@ls/false (py2cb0@syntax-dispatch py3381@t '(any any)))) (if py3383@ls/false (apply (lambda (py3385@x py3386@init) (list py3385@x py3386@init py3385@x)) py3383@ls/false) (let ((py3389@t py3381@t)) (let ((py338b@ls/false (py2cb0@syntax-dispatch py3389@t '(any any any)))) (if py338b@ls/false (apply (lambda (py338d@x py338e@init py338f@step) (list py338d@x py338e@init py338f@step)) py338b@ls/false) (let ((py3393@t py3389@t)) (let ((py3395@ls/false (py2cb0@syntax-dispatch py3393@t '_))) (if py3395@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid binding" py3365@stx)) py3395@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3393@t)))))))))))) (let ((py3369@t py3365@stx)) (let ((py336b@ls/false (py2cb0@syntax-dispatch py3369@t '(_ each-any (any . each-any) . each-any)))) (if py336b@ls/false (apply (lambda (py336d@binding* py336e@test py336f@expr* py3370@command*) (let ((py3375@t (map py3368@bind py336d@binding*))) (let ((py3377@ls/false (py2cb0@syntax-dispatch py3375@t '#(each (any any any))))) (if py3377@ls/false (apply (lambda (py3379@x* py337a@init* py337b@step*) (if (py2ab1@valid-bound-ids? py3379@x*) (py2c66@bless (list 'letrec (list (list 'loop (list 'lambda py3379@x* (list 'if py336e@test (cons 'begin (cons '(if #f #f) py336f@expr*)) (cons 'begin (append py3370@command* (list (cons 'loop py337b@step*)))))))) (cons 'loop py337a@init*))) (py2d90@syntax-violation '#f '"invalid bindings" py3365@stx))) py3377@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3375@t))))) py336b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3369@t)))))))) (set! py4774@py2c8c@do-macro py2c8c@do-macro) (set! py2c8e@let*-macro (lambda (py3397@stx) (let ((py3399@t py3397@stx)) (let ((py339b@ls/false (py2cb0@syntax-dispatch py3399@t '(_ #(each (any any)) any . each-any)))) (if (and py339b@ls/false (apply (lambda (py339d@lhs* py339e@rhs* py339f@b py33a0@b*) (for-all py2aa9@id? py339d@lhs*)) py339b@ls/false)) (apply (lambda (py33a5@lhs* py33a6@rhs* py33a7@b py33a8@b*) (py2c66@bless (let py33af@f ((py33ad@x* (map list py33a5@lhs* py33a6@rhs*))) (if (null? py33ad@x*) (cons 'let (cons '() (cons py33a7@b py33a8@b*))) (list 'let (list (car py33ad@x*)) (py33af@f (cdr py33ad@x*))))))) py339b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3399@t)))))) (set! py4775@py2c8e@let*-macro py2c8e@let*-macro) (set! py2c90@or-macro (lambda (py33b1@stx) (let ((py33b3@t py33b1@stx)) (let ((py33b5@ls/false (py2cb0@syntax-dispatch py33b3@t '(_)))) (if py33b5@ls/false (apply (lambda () '#f) py33b5@ls/false) (let ((py33b7@t py33b3@t)) (let ((py33b9@ls/false (py2cb0@syntax-dispatch py33b7@t '(_ any . each-any)))) (if py33b9@ls/false (apply (lambda (py33bb@e py33bc@e*) (py2c66@bless (let py33c3@f ((py33bf@e py33bb@e) (py33c0@e* py33bc@e*)) (if (null? py33c0@e*) (list 'begin '#f py33bf@e) (list 'let (list (list 't py33bf@e)) (list 'if 't 't (py33c3@f (car py33c0@e*) (cdr py33c0@e*)))))))) py33b9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py33b7@t))))))))) (set! py4776@py2c90@or-macro py2c90@or-macro) (set! py2c92@and-macro (lambda (py33c5@stx) (let ((py33c7@t py33c5@stx)) (let ((py33c9@ls/false (py2cb0@syntax-dispatch py33c7@t '(_)))) (if py33c9@ls/false (apply (lambda () '#t) py33c9@ls/false) (let ((py33cb@t py33c7@t)) (let ((py33cd@ls/false (py2cb0@syntax-dispatch py33cb@t '(_ any . each-any)))) (if py33cd@ls/false (apply (lambda (py33cf@e py33d0@e*) (py2c66@bless (let py33d7@f ((py33d3@e py33cf@e) (py33d4@e* py33d0@e*)) (if (null? py33d4@e*) (list 'begin '#f py33d3@e) (cons 'if (cons py33d3@e (cons (py33d7@f (car py33d4@e*) (cdr py33d4@e*)) '(#f)))))))) py33cd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py33cb@t))))))))) (set! py4777@py2c92@and-macro py2c92@and-macro) (set! py2c94@cond-macro (lambda (py33d9@stx) (let ((py33db@t py33d9@stx)) (let ((py33dd@ls/false (py2cb0@syntax-dispatch py33db@t '(_ any . each-any)))) (if py33dd@ls/false (apply (lambda (py33df@cls py33e0@cls*) (py2c66@bless (let py33e7@f ((py33e3@cls py33df@cls) (py33e4@cls* py33e0@cls*)) (if (null? py33e4@cls*) (let ((py33e9@t py33e3@cls)) (let ((py33eb@ls/false (py2cb0@syntax-dispatch py33e9@t '(#(scheme-id else) any . each-any)))) (if py33eb@ls/false (apply (lambda (py33ed@e py33ee@e*) (cons 'begin (cons py33ed@e py33ee@e*))) py33eb@ls/false) (let ((py33f1@t py33e9@t)) (let ((py33f3@ls/false (py2cb0@syntax-dispatch py33f1@t '(any #(scheme-id =>) any)))) (if py33f3@ls/false (apply (lambda (py33f5@e py33f6@p) (list 'let (list (list 't py33f5@e)) (list 'if 't (cons py33f6@p '(t))))) py33f3@ls/false) (let ((py33f9@t py33f1@t)) (let ((py33fb@ls/false (py2cb0@syntax-dispatch py33f9@t '(any)))) (if py33fb@ls/false (apply (lambda (py33fd@e) (cons 'or (cons py33fd@e '((if #f #f))))) py33fb@ls/false) (let ((py33ff@t py33f9@t)) (let ((py3401@ls/false (py2cb0@syntax-dispatch py33ff@t '(any . each-any)))) (if py3401@ls/false (apply (lambda (py3403@e py3404@e*) (list 'if py3403@e (cons 'begin py3404@e*))) py3401@ls/false) (let ((py3407@t py33ff@t)) (let ((py3409@ls/false (py2cb0@syntax-dispatch py3407@t '_))) (if py3409@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid last clause" py33d9@stx)) py3409@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3407@t)))))))))))))))) (let ((py340b@t py33e3@cls)) (let ((py340d@ls/false (py2cb0@syntax-dispatch py340b@t '(#(scheme-id else) any . each-any)))) (if py340d@ls/false (apply (lambda (py340f@e py3410@e*) (py2d90@syntax-violation '#f '"incorrect position of keyword else" py33d9@stx)) py340d@ls/false) (let ((py3413@t py340b@t)) (let ((py3415@ls/false (py2cb0@syntax-dispatch py3413@t '(any #(scheme-id =>) any)))) (if py3415@ls/false (apply (lambda (py3417@e py3418@p) (list 'let (list (list 't py3417@e)) (list 'if 't (cons py3418@p '(t)) (py33e7@f (car py33e4@cls*) (cdr py33e4@cls*))))) py3415@ls/false) (let ((py341b@t py3413@t)) (let ((py341d@ls/false (py2cb0@syntax-dispatch py341b@t '(any)))) (if py341d@ls/false (apply (lambda (py341f@e) (list 'or py341f@e (py33e7@f (car py33e4@cls*) (cdr py33e4@cls*)))) py341d@ls/false) (let ((py3421@t py341b@t)) (let ((py3423@ls/false (py2cb0@syntax-dispatch py3421@t '(any . each-any)))) (if py3423@ls/false (apply (lambda (py3425@e py3426@e*) (list 'if py3425@e (cons 'begin py3426@e*) (py33e7@f (car py33e4@cls*) (cdr py33e4@cls*)))) py3423@ls/false) (let ((py3429@t py3421@t)) (let ((py342b@ls/false (py2cb0@syntax-dispatch py3429@t '_))) (if py342b@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid last clause" py33d9@stx)) py342b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3429@t)))))))))))))))))))) py33dd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py33db@t)))))) (set! py4778@py2c94@cond-macro py2c94@cond-macro) (set! py2c96@do-include (lambda (py342d@stx py342e@id py342f@filename) (let ((py3433@filename (py2abd@stx->datum py342f@filename))) (begin (if (not (and (string? py3433@filename) (py2aa9@id? py342e@id))) (py2d90@syntax-violation '#f '"invalid syntax" py342d@stx) (void)) (cons (py2c66@bless 'begin) (with-input-from-file py3433@filename (lambda () (let py3437@f ((py3435@ls '())) (let ((py3439@x (py25e6@py24b8@read-annotated))) (if (eof-object? py3439@x) (reverse py3435@ls) (py3437@f (cons (py2a89@datum->stx py342e@id py3439@x) py3435@ls)))))))))))) (set! py4779@py2c96@do-include py2c96@do-include) (set! py2c98@include-macro (lambda (py343b@e) (let ((py343d@t py343b@e)) (let ((py343f@ls/false (py2cb0@syntax-dispatch py343d@t '(any any)))) (if py343f@ls/false (apply (lambda (py3441@id py3442@filename) (py2c96@do-include py343b@e py3441@id py3442@filename)) py343f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py343d@t)))))) (set! py477a@py2c98@include-macro py2c98@include-macro) (set! py2c9a@include-into-macro (lambda (py3445@e) (let ((py3447@t py3445@e)) (let ((py3449@ls/false (py2cb0@syntax-dispatch py3447@t '(_ any any)))) (if py3449@ls/false (apply (lambda (py344b@id py344c@filename) (py2c96@do-include py3445@e py344b@id py344c@filename)) py3449@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3447@t)))))) (set! py477b@py2c9a@include-into-macro py2c9a@include-into-macro) (set! py2c9c@syntax-rules-macro (lambda (py344f@e) (let ((py3451@t py344f@e)) (let ((py3453@ls/false (py2cb0@syntax-dispatch py3451@t '(_ each-any . #(each (any any)))))) (if py3453@ls/false (apply (lambda (py3455@lits py3456@pat* py3457@tmp*) (begin (py2cb6@verify-literals py3455@lits py344f@e) (py2c66@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons py3455@lits (map (lambda (py345b@pat py345c@tmp) (let ((py345f@t py345b@pat)) (let ((py3461@ls/false (py2cb0@syntax-dispatch py345f@t '(_ . any)))) (if py3461@ls/false (apply (lambda (py3463@rest) (list (cons 'g py3463@rest) (list 'syntax py345c@tmp))) py3461@ls/false) (let ((py3465@t py345f@t)) (let ((py3467@ls/false (py2cb0@syntax-dispatch py3465@t '_))) (if py3467@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid syntax-rules pattern" py344f@e py345b@pat)) py3467@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3465@t)))))))) py3456@pat* py3457@tmp*)))))))) py3453@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3451@t)))))) (set! py477c@py2c9c@syntax-rules-macro py2c9c@syntax-rules-macro) (set! py2c9e@quasiquote-macro (let ((py346a@datum '#f) (py3486@quasicons* '#f) (py3488@quasicons '#f) (py348a@quasiappend '#f) (py348c@quasivector '#f) (py348e@vquasi '#f) (py3490@quasi '#f)) (begin (set! py346a@datum (lambda (py356b@x) (list (py2c38@scheme-stx 'quote) (py2a91@mkstx py356b@x '() '() '())))) (set! py3486@quasicons* (lambda (py3563@x py3564@y) (let py3569@f ((py3567@x py3563@x)) (if (null? py3567@x) py3564@y (py3488@quasicons (car py3567@x) (py3569@f (cdr py3567@x))))))) (set! py3488@quasicons (lambda (py353d@x py353e@y) (let ((py3541@t py353e@y)) (let ((py3543@ls/false (py2cb0@syntax-dispatch py3541@t '(#(scheme-id quote) any)))) (if py3543@ls/false (apply (lambda (py3545@dy) (let ((py3547@t py353d@x)) (let ((py3549@ls/false (py2cb0@syntax-dispatch py3547@t '(#(scheme-id quote) any)))) (if py3549@ls/false (apply (lambda (py354b@dx) (list (py2c38@scheme-stx 'quote) (cons py354b@dx py3545@dy))) py3549@ls/false) (let ((py354d@t py3547@t)) (let ((py354f@ls/false (py2cb0@syntax-dispatch py354d@t '_))) (if py354f@ls/false (apply (lambda () (let ((py3551@t py3545@dy)) (let ((py3553@ls/false (py2cb0@syntax-dispatch py3551@t '()))) (if py3553@ls/false (apply (lambda () (list (py2c38@scheme-stx 'list) py353d@x)) py3553@ls/false) (let ((py3555@t py3551@t)) (let ((py3557@ls/false (py2cb0@syntax-dispatch py3555@t '_))) (if py3557@ls/false (apply (lambda () (list (py2c38@scheme-stx 'cons) py353d@x py353e@y)) py3557@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3555@t)))))))) py354f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py354d@t)))))))) py3543@ls/false) (let ((py3559@t py3541@t)) (let ((py355b@ls/false (py2cb0@syntax-dispatch py3559@t '(#(scheme-id list) . each-any)))) (if py355b@ls/false (apply (lambda (py355d@stuff) (cons* (py2c38@scheme-stx 'list) py353d@x py355d@stuff)) py355b@ls/false) (let ((py355f@t py3559@t)) (let ((py3561@ls/false (py2cb0@syntax-dispatch py355f@t '_))) (if py3561@ls/false (apply (lambda () (list (py2c38@scheme-stx 'cons) py353d@x py353e@y)) py3561@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py355f@t)))))))))))) (set! py348a@quasiappend (lambda (py3523@x py3524@y) (let ((py3527@ls (let py352b@f ((py3529@x py3523@x)) (if (null? py3529@x) (let ((py352d@t py3524@y)) (let ((py352f@ls/false (py2cb0@syntax-dispatch py352d@t '(#(scheme-id quote) ())))) (if py352f@ls/false (apply (lambda () '()) py352f@ls/false) (let ((py3531@t py352d@t)) (let ((py3533@ls/false (py2cb0@syntax-dispatch py3531@t '_))) (if py3533@ls/false (apply (lambda () (list py3524@y)) py3533@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3531@t))))))) (let ((py3535@t (car py3529@x))) (let ((py3537@ls/false (py2cb0@syntax-dispatch py3535@t '(#(scheme-id quote) ())))) (if py3537@ls/false (apply (lambda () (py352b@f (cdr py3529@x))) py3537@ls/false) (let ((py3539@t py3535@t)) (let ((py353b@ls/false (py2cb0@syntax-dispatch py3539@t '_))) (if py353b@ls/false (apply (lambda () (cons (car py3529@x) (py352b@f (cdr py3529@x)))) py353b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3539@t))))))))))) (if (null? py3527@ls) (list (py2c38@scheme-stx 'quote) '()) (if (null? (cdr py3527@ls)) (car py3527@ls) (cons* (py2c38@scheme-stx 'append) py3527@ls)))))) (set! py348c@quasivector (lambda (py34f1@x) (let ((py34f3@pat-x py34f1@x)) (let ((py34f5@t py34f3@pat-x)) (let ((py34f7@ls/false (py2cb0@syntax-dispatch py34f5@t '(#(scheme-id quote) each-any)))) (if py34f7@ls/false (apply (lambda (py34f9@x*) (list (py2c38@scheme-stx 'quote) (list->vector py34f9@x*))) py34f7@ls/false) (let ((py34fb@t py34f5@t)) (let ((py34fd@ls/false (py2cb0@syntax-dispatch py34fb@t '_))) (if py34fd@ls/false (apply (lambda () (let py3505@f ((py34ff@x py34f1@x) (py3500@k (lambda (py3503@ls) (cons* (py2c38@scheme-stx 'vector) py3503@ls)))) (let ((py3507@t py34ff@x)) (let ((py3509@ls/false (py2cb0@syntax-dispatch py3507@t '(#(scheme-id quote) each-any)))) (if py3509@ls/false (apply (lambda (py350b@x*) (py3500@k (map (lambda (py350d@x) (list (py2c38@scheme-stx 'quote) py350d@x)) py350b@x*))) py3509@ls/false) (let ((py350f@t py3507@t)) (let ((py3511@ls/false (py2cb0@syntax-dispatch py350f@t '(#(scheme-id list) . each-any)))) (if py3511@ls/false (apply (lambda (py3513@x*) (py3500@k py3513@x*)) py3511@ls/false) (let ((py3515@t py350f@t)) (let ((py3517@ls/false (py2cb0@syntax-dispatch py3515@t '(#(scheme-id cons) any any)))) (if py3517@ls/false (apply (lambda (py3519@x py351a@y) (py3505@f py351a@y (lambda (py351d@ls) (py3500@k (cons py3519@x py351d@ls))))) py3517@ls/false) (let ((py351f@t py3515@t)) (let ((py3521@ls/false (py2cb0@syntax-dispatch py351f@t '_))) (if py3521@ls/false (apply (lambda () (list (py2c38@scheme-stx 'list->vector) py34f3@pat-x)) py3521@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py351f@t))))))))))))))) py34fd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py34fb@t)))))))))) (set! py348e@vquasi (lambda (py34cf@p py34d0@lev) (let ((py34d3@t py34cf@p)) (let ((py34d5@ls/false (py2cb0@syntax-dispatch py34d3@t '(any . any)))) (if py34d5@ls/false (apply (lambda (py34d7@p py34d8@q) (let ((py34db@t py34d7@p)) (let ((py34dd@ls/false (py2cb0@syntax-dispatch py34db@t '(#(scheme-id unquote) . each-any)))) (if py34dd@ls/false (apply (lambda (py34df@p) (if (= py34d0@lev '0) (py3486@quasicons* py34df@p (py348e@vquasi py34d8@q py34d0@lev)) (py3488@quasicons (py3488@quasicons (py346a@datum 'unquote) (py3490@quasi py34df@p (- py34d0@lev '1))) (py348e@vquasi py34d8@q py34d0@lev)))) py34dd@ls/false) (let ((py34e1@t py34db@t)) (let ((py34e3@ls/false (py2cb0@syntax-dispatch py34e1@t '(#(scheme-id unquote-splicing) . each-any)))) (if py34e3@ls/false (apply (lambda (py34e5@p) (if (= py34d0@lev '0) (py348a@quasiappend py34e5@p (py348e@vquasi py34d8@q py34d0@lev)) (py3488@quasicons (py3488@quasicons (py346a@datum 'unquote-splicing) (py3490@quasi py34e5@p (- py34d0@lev '1))) (py348e@vquasi py34d8@q py34d0@lev)))) py34e3@ls/false) (let ((py34e7@t py34e1@t)) (let ((py34e9@ls/false (py2cb0@syntax-dispatch py34e7@t 'any))) (if py34e9@ls/false (apply (lambda (py34eb@p) (py3488@quasicons (py3490@quasi py34eb@p py34d0@lev) (py348e@vquasi py34d8@q py34d0@lev))) py34e9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py34e7@t))))))))))) py34d5@ls/false) (let ((py34ed@t py34d3@t)) (let ((py34ef@ls/false (py2cb0@syntax-dispatch py34ed@t '()))) (if py34ef@ls/false (apply (lambda () (list (py2c38@scheme-stx 'quote) '())) py34ef@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py34ed@t))))))))) (set! py3490@quasi (lambda (py3499@p py349a@lev) (let ((py349d@t py3499@p)) (let ((py349f@ls/false (py2cb0@syntax-dispatch py349d@t '(#(scheme-id unquote) any)))) (if py349f@ls/false (apply (lambda (py34a1@p) (if (= py349a@lev '0) py34a1@p (py3488@quasicons (py346a@datum 'unquote) (py3490@quasi (list py34a1@p) (- py349a@lev '1))))) py349f@ls/false) (let ((py34a3@t py349d@t)) (let ((py34a5@ls/false (py2cb0@syntax-dispatch py34a3@t '((#(scheme-id unquote) . each-any) . any)))) (if py34a5@ls/false (apply (lambda (py34a7@p py34a8@q) (if (= py349a@lev '0) (py3486@quasicons* py34a7@p (py3490@quasi py34a8@q py349a@lev)) (py3488@quasicons (py3488@quasicons (py346a@datum 'unquote) (py3490@quasi py34a7@p (- py349a@lev '1))) (py3490@quasi py34a8@q py349a@lev)))) py34a5@ls/false) (let ((py34ab@t py34a3@t)) (let ((py34ad@ls/false (py2cb0@syntax-dispatch py34ab@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if py34ad@ls/false (apply (lambda (py34af@p py34b0@q) (if (= py349a@lev '0) (py348a@quasiappend py34af@p (py3490@quasi py34b0@q py349a@lev)) (py3488@quasicons (py3488@quasicons (py346a@datum 'unquote-splicing) (py3490@quasi py34af@p (- py349a@lev '1))) (py3490@quasi py34b0@q py349a@lev)))) py34ad@ls/false) (let ((py34b3@t py34ab@t)) (let ((py34b5@ls/false (py2cb0@syntax-dispatch py34b3@t '(#(scheme-id quasiquote) any)))) (if py34b5@ls/false (apply (lambda (py34b7@p) (py3488@quasicons (py346a@datum 'quasiquote) (py3490@quasi (list py34b7@p) (+ py349a@lev '1)))) py34b5@ls/false) (let ((py34b9@t py34b3@t)) (let ((py34bb@ls/false (py2cb0@syntax-dispatch py34b9@t '(any . any)))) (if py34bb@ls/false (apply (lambda (py34bd@p py34be@q) (py3488@quasicons (py3490@quasi py34bd@p py349a@lev) (py3490@quasi py34be@q py349a@lev))) py34bb@ls/false) (let ((py34c1@t py34b9@t)) (let ((py34c3@ls/false (py2cb0@syntax-dispatch py34c1@t '#(vector each-any)))) (if (and py34c3@ls/false (apply (lambda (py34c5@x) (not (py2a75@stx? py34c5@x))) py34c3@ls/false)) (apply (lambda (py34c7@x) (py348c@quasivector (py348e@vquasi py34c7@x py349a@lev))) py34c3@ls/false) (let ((py34c9@t py34c1@t)) (let ((py34cb@ls/false (py2cb0@syntax-dispatch py34c9@t 'any))) (if py34cb@ls/false (apply (lambda (py34cd@p) (list (py2c38@scheme-stx 'quote) py34cd@p)) py34cb@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py34c9@t)))))))))))))))))))))))) (lambda (py3491@x) (let ((py3493@t py3491@x)) (let ((py3495@ls/false (py2cb0@syntax-dispatch py3493@t '(_ any)))) (if py3495@ls/false (apply (lambda (py3497@e) (py3490@quasi py3497@e '0)) py3495@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3493@t)))))))) (set! py477d@py2c9e@quasiquote-macro py2c9e@quasiquote-macro) (set! py2ca0@quasisyntax-macro (let ((py356e@quasi '#f)) (begin (set! py356e@quasi (lambda (py3589@p py358a@lev) (let ((py358d@t py3589@p)) (let ((py358f@ls/false (py2cb0@syntax-dispatch py358d@t '(#(scheme-id unsyntax) any)))) (if py358f@ls/false (apply (lambda (py3591@p) (if (= py358a@lev '0) (let ((py3593@g (gensym))) (values (list py3593@g) (list py3591@p) py3593@g)) (call-with-values (lambda () (py356e@quasi py3591@p (- py358a@lev '1))) (lambda (py359b@py3596 py359c@py3598 py359d@py359a) (let ((py35a1@p py359d@py359a) (py35a2@rhs* py359c@py3598) (py35a3@lhs* py359b@py3596)) (values py35a3@lhs* py35a2@rhs* (list 'unsyntax py35a1@p))))))) py358f@ls/false) (let ((py35a7@t py358d@t)) (let ((py35a9@ls/false (py2cb0@syntax-dispatch py35a7@t '#(scheme-id unsyntax)))) (if (and py35a9@ls/false (apply (lambda () (= py358a@lev '0)) py35a9@ls/false)) (apply (lambda () (py2d90@syntax-violation '#f '"incorrect use of unsyntax" py3589@p)) py35a9@ls/false) (let ((py35ab@t py35a7@t)) (let ((py35ad@ls/false (py2cb0@syntax-dispatch py35ab@t '((#(scheme-id unsyntax) . each-any) . any)))) (if py35ad@ls/false (apply (lambda (py35af@p* py35b0@q) (call-with-values (lambda () (py356e@quasi py35b0@q py358a@lev)) (lambda (py35b9@py35b4 py35ba@py35b6 py35bb@py35b8) (let ((py35bf@q py35bb@py35b8) (py35c0@rhs* py35ba@py35b6) (py35c1@lhs* py35b9@py35b4)) (if (= py358a@lev '0) (let ((py35c5@g* (map (lambda (py35c7@x) (gensym)) py35af@p*))) (values (append py35c5@g* py35c1@lhs*) (append py35af@p* py35c0@rhs*) (append py35c5@g* py35bf@q))) (call-with-values (lambda () (py356e@quasi py35af@p* (- py358a@lev '1))) (lambda (py35cf@py35ca py35d0@py35cc py35d1@py35ce) (let ((py35d5@p* py35d1@py35ce) (py35d6@rhs2* py35d0@py35cc) (py35d7@lhs2* py35cf@py35ca)) (values (append py35d7@lhs2* py35c1@lhs*) (append py35d6@rhs2* py35c0@rhs*) (cons (cons 'unsyntax py35d5@p*) py35bf@q)))))))))) py35ad@ls/false) (let ((py35db@t py35ab@t)) (let ((py35dd@ls/false (py2cb0@syntax-dispatch py35db@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if py35dd@ls/false (apply (lambda (py35df@p* py35e0@q) (call-with-values (lambda () (py356e@quasi py35e0@q py358a@lev)) (lambda (py35e9@py35e4 py35ea@py35e6 py35eb@py35e8) (let ((py35ef@q py35eb@py35e8) (py35f0@rhs* py35ea@py35e6) (py35f1@lhs* py35e9@py35e4)) (if (= py358a@lev '0) (let ((py35f5@g* (map (lambda (py35f7@x) (gensym)) py35df@p*))) (values (append (map (lambda (py35f9@g) (cons py35f9@g '(...))) py35f5@g*) py35f1@lhs*) (append py35df@p* py35f0@rhs*) (append (apply append (map (lambda (py35fb@g) (cons py35fb@g '(...))) py35f5@g*)) py35ef@q))) (call-with-values (lambda () (py356e@quasi py35df@p* (- py358a@lev '1))) (lambda (py3603@py35fe py3604@py3600 py3605@py3602) (let ((py3609@p* py3605@py3602) (py360a@rhs2* py3604@py3600) (py360b@lhs2* py3603@py35fe)) (values (append py360b@lhs2* py35f1@lhs*) (append py360a@rhs2* py35f0@rhs*) (cons (cons 'unsyntax-splicing py3609@p*) py35ef@q)))))))))) py35dd@ls/false) (let ((py360f@t py35db@t)) (let ((py3611@ls/false (py2cb0@syntax-dispatch py360f@t '#(scheme-id unsyntax-splicing)))) (if (and py3611@ls/false (apply (lambda () (= py358a@lev '0)) py3611@ls/false)) (apply (lambda () (py2d90@syntax-violation '#f '"incorrect use of unsyntax-splicing" py3589@p)) py3611@ls/false) (let ((py3613@t py360f@t)) (let ((py3615@ls/false (py2cb0@syntax-dispatch py3613@t '(#(scheme-id quasisyntax) any)))) (if py3615@ls/false (apply (lambda (py3617@p) (call-with-values (lambda () (py356e@quasi py3617@p (+ py358a@lev '1))) (lambda (py361f@py361a py3620@py361c py3621@py361e) (let ((py3625@p py3621@py361e) (py3626@rhs* py3620@py361c) (py3627@lhs* py361f@py361a)) (values py3627@lhs* py3626@rhs* (list 'quasisyntax py3625@p)))))) py3615@ls/false) (let ((py362b@t py3613@t)) (let ((py362d@ls/false (py2cb0@syntax-dispatch py362b@t '(any . any)))) (if py362d@ls/false (apply (lambda (py362f@p py3630@q) (call-with-values (lambda () (py356e@quasi py362f@p py358a@lev)) (lambda (py363f@py3634 py3640@py3636 py3641@py3638) (call-with-values (lambda () (py356e@quasi py3630@q py358a@lev)) (lambda (py3645@py363a py3646@py363c py3647@py363e) (let ((py364b@q py3647@py363e) (py364c@rhs2* py3646@py363c) (py364d@lhs2* py3645@py363a) (py364e@p py3641@py3638) (py364f@rhs* py3640@py3636) (py3650@lhs* py363f@py3634)) (values (append py364d@lhs2* py3650@lhs*) (append py364c@rhs2* py364f@rhs*) (cons py364e@p py364b@q)))))))) py362d@ls/false) (let ((py3657@t py362b@t)) (let ((py3659@ls/false (py2cb0@syntax-dispatch py3657@t '#(vector each-any)))) (if py3659@ls/false (apply (lambda (py365b@x*) (call-with-values (lambda () (py356e@quasi py365b@x* py358a@lev)) (lambda (py3663@py365e py3664@py3660 py3665@py3662) (let ((py3669@x* py3665@py3662) (py366a@rhs* py3664@py3660) (py366b@lhs* py3663@py365e)) (values py366b@lhs* py366a@rhs* (list->vector py3669@x*)))))) py3659@ls/false) (let ((py366f@t py3657@t)) (let ((py3671@ls/false (py2cb0@syntax-dispatch py366f@t '_))) (if py3671@ls/false (apply (lambda () (values '() '() py3589@p)) py3671@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py366f@t)))))))))))))))))))))))))))))) (lambda (py356f@x) (let ((py3571@t py356f@x)) (let ((py3573@ls/false (py2cb0@syntax-dispatch py3571@t '(_ any)))) (if py3573@ls/false (apply (lambda (py3575@e) (call-with-values (lambda () (py356e@quasi py3575@e '0)) (lambda (py357d@py3578 py357e@py357a py357f@py357c) (let ((py3583@v py357f@py357c) (py3584@rhs* py357e@py357a) (py3585@lhs* py357d@py3578)) (py2c66@bless (list 'syntax-case (cons 'list py3584@rhs*) '() (list py3585@lhs* (list 'syntax py3583@v)))))))) py3573@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3571@t)))))))) (set! py477e@py2ca0@quasisyntax-macro py2ca0@quasisyntax-macro) (set! py2ca2@define-struct-macro (lambda (py3673@stx) (py2d90@syntax-violation '#f '"define-struct not supported" py3673@stx))) (set! py477f@py2ca2@define-struct-macro py2ca2@define-struct-macro) (set! py2ca4@define-record-type-macro (lambda (py3675@x) (let ((py3678@id '#f) (py367a@get-record-name '#f) (py367c@get-record-constructor-name '#f) (py367e@get-record-predicate-name '#f) (py3680@get-clause '#f) (py3682@foo-rtd-code '#f) (py3684@parent-rtd-code '#f) (py3686@parent-rcd-code '#f) (py3688@foo-rcd-code '#f) (py368a@get-protocol-code '#f) (py368c@get-fields '#f) (py368e@get-mutator-indices '#f) (py3690@get-mutators '#f) (py3692@get-accessors '#f) (py3694@enumerate '#f) (py3696@do-define-record '#f) (py3698@verify-clauses '#f)) (begin (set! py3678@id (lambda (py386b@ctxt . py386d@str*) (py2d94@datum->syntax py386b@ctxt (string->symbol (apply string-append (map (lambda (py386f@x) (if (symbol? py386f@x) (symbol->string py386f@x) (if (string? py386f@x) py386f@x (assertion-violation 'define-record-type '"BUG")))) py386d@str*)))))) (set! py367a@get-record-name (lambda (py3859@spec) (let ((py385b@t py3859@spec)) (let ((py385d@ls/false (py2cb0@syntax-dispatch py385b@t '(any any any)))) (if py385d@ls/false (apply (lambda (py385f@foo py3860@make-foo py3861@foo?) py385f@foo) py385d@ls/false) (let ((py3865@t py385b@t)) (let ((py3867@ls/false (py2cb0@syntax-dispatch py3865@t 'any))) (if py3867@ls/false (apply (lambda (py3869@foo) py3869@foo) py3867@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3865@t))))))))) (set! py367c@get-record-constructor-name (lambda (py3845@spec) (let ((py3847@t py3845@spec)) (let ((py3849@ls/false (py2cb0@syntax-dispatch py3847@t '(any any any)))) (if py3849@ls/false (apply (lambda (py384b@foo py384c@make-foo py384d@foo?) py384c@make-foo) py3849@ls/false) (let ((py3851@t py3847@t)) (let ((py3853@ls/false (py2cb0@syntax-dispatch py3851@t 'any))) (if (and py3853@ls/false (apply (lambda (py3855@foo) (py2aa9@id? py3855@foo)) py3853@ls/false)) (apply (lambda (py3857@foo) (py3678@id py3857@foo '"make-" (py2abd@stx->datum py3857@foo))) py3853@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3851@t))))))))) (set! py367e@get-record-predicate-name (lambda (py3831@spec) (let ((py3833@t py3831@spec)) (let ((py3835@ls/false (py2cb0@syntax-dispatch py3833@t '(any any any)))) (if py3835@ls/false (apply (lambda (py3837@foo py3838@make-foo py3839@foo?) py3839@foo?) py3835@ls/false) (let ((py383d@t py3833@t)) (let ((py383f@ls/false (py2cb0@syntax-dispatch py383d@t 'any))) (if (and py383f@ls/false (apply (lambda (py3841@foo) (py2aa9@id? py3841@foo)) py383f@ls/false)) (apply (lambda (py3843@foo) (py3678@id py3843@foo (py2abd@stx->datum py3843@foo) '"?")) py383f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py383d@t))))))))) (set! py3680@get-clause (lambda (py381f@id py3820@ls) (let ((py3823@t py3820@ls)) (let ((py3825@ls/false (py2cb0@syntax-dispatch py3823@t '()))) (if py3825@ls/false (apply (lambda () '#f) py3825@ls/false) (let ((py3827@t py3823@t)) (let ((py3829@ls/false (py2cb0@syntax-dispatch py3827@t '((any . any) . any)))) (if py3829@ls/false (apply (lambda (py382b@x py382c@rest py382d@ls) (if (py2aaf@free-id=? (py2c66@bless py381f@id) py382b@x) (cons py382b@x py382c@rest) (py3680@get-clause py381f@id py382d@ls))) py3829@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3827@t))))))))) (set! py3682@foo-rtd-code (lambda (py37cd@name py37ce@clause* py37cf@parent-rtd-code) (let ((py37d4@convert-field-spec* '#f)) (begin (set! py37d4@convert-field-spec* (lambda (py3805@ls) (list->vector (map (lambda (py3807@x) (let ((py3809@t py3807@x)) (let ((py380b@ls/false (py2cb0@syntax-dispatch py3809@t '(#(scheme-id mutable) any . any)))) (if py380b@ls/false (apply (lambda (py380d@name py380e@rest) (list 'mutable py380d@name)) py380b@ls/false) (let ((py3811@t py3809@t)) (let ((py3813@ls/false (py2cb0@syntax-dispatch py3811@t '(#(scheme-id immutable) any . any)))) (if py3813@ls/false (apply (lambda (py3815@name py3816@rest) (list 'immutable py3815@name)) py3813@ls/false) (let ((py3819@t py3811@t)) (let ((py381b@ls/false (py2cb0@syntax-dispatch py3819@t 'any))) (if py381b@ls/false (apply (lambda (py381d@name) (list 'immutable py381d@name)) py381b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3819@t))))))))))) py3805@ls)))) (let ((py37d5@uid-code (let ((py37dd@t (py3680@get-clause 'nongenerative py37ce@clause*))) (let ((py37df@ls/false (py2cb0@syntax-dispatch py37dd@t '(_)))) (if py37df@ls/false (apply (lambda () (list 'quote (gensym))) py37df@ls/false) (let ((py37e1@t py37dd@t)) (let ((py37e3@ls/false (py2cb0@syntax-dispatch py37e1@t '(_ any)))) (if py37e3@ls/false (apply (lambda (py37e5@uid) (list 'quote py37e5@uid)) py37e3@ls/false) (let ((py37e7@t py37e1@t)) (let ((py37e9@ls/false (py2cb0@syntax-dispatch py37e7@t '_))) (if py37e9@ls/false (apply (lambda () '#f) py37e9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37e7@t))))))))))) (py37d6@sealed? (let ((py37eb@t (py3680@get-clause 'sealed py37ce@clause*))) (let ((py37ed@ls/false (py2cb0@syntax-dispatch py37eb@t '(_ #(atom #t))))) (if py37ed@ls/false (apply (lambda () '#t) py37ed@ls/false) (let ((py37ef@t py37eb@t)) (let ((py37f1@ls/false (py2cb0@syntax-dispatch py37ef@t '_))) (if py37f1@ls/false (apply (lambda () '#f) py37f1@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37ef@t)))))))) (py37d7@opaque? (let ((py37f3@t (py3680@get-clause 'opaque py37ce@clause*))) (let ((py37f5@ls/false (py2cb0@syntax-dispatch py37f3@t '(_ #(atom #t))))) (if py37f5@ls/false (apply (lambda () '#t) py37f5@ls/false) (let ((py37f7@t py37f3@t)) (let ((py37f9@ls/false (py2cb0@syntax-dispatch py37f7@t '_))) (if py37f9@ls/false (apply (lambda () '#f) py37f9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37f7@t)))))))) (py37d8@fields (let ((py37fb@t (py3680@get-clause 'fields py37ce@clause*))) (let ((py37fd@ls/false (py2cb0@syntax-dispatch py37fb@t '(_ . each-any)))) (if py37fd@ls/false (apply (lambda (py37ff@field-spec*) (list 'quote (py37d4@convert-field-spec* py37ff@field-spec*))) py37fd@ls/false) (let ((py3801@t py37fb@t)) (let ((py3803@ls/false (py2cb0@syntax-dispatch py3801@t '_))) (if py3803@ls/false (apply (lambda () ''#()) py3803@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3801@t))))))))) (py2c66@bless (list 'make-record-type-descriptor (list 'quote py37cd@name) py37cf@parent-rtd-code py37d5@uid-code py37d6@sealed? py37d7@opaque? py37d8@fields))))))) (set! py3684@parent-rtd-code (lambda (py37b5@clause*) (let ((py37b7@t (py3680@get-clause 'parent py37b5@clause*))) (let ((py37b9@ls/false (py2cb0@syntax-dispatch py37b7@t '(_ any)))) (if py37b9@ls/false (apply (lambda (py37bb@name) (list 'record-type-descriptor py37bb@name)) py37b9@ls/false) (let ((py37bd@t py37b7@t)) (let ((py37bf@ls/false (py2cb0@syntax-dispatch py37bd@t '#(atom #f)))) (if py37bf@ls/false (apply (lambda () (let ((py37c1@t (py3680@get-clause 'parent-rtd py37b5@clause*))) (let ((py37c3@ls/false (py2cb0@syntax-dispatch py37c1@t '(_ any any)))) (if py37c3@ls/false (apply (lambda (py37c5@rtd py37c6@rcd) py37c5@rtd) py37c3@ls/false) (let ((py37c9@t py37c1@t)) (let ((py37cb@ls/false (py2cb0@syntax-dispatch py37c9@t '#(atom #f)))) (if py37cb@ls/false (apply (lambda () '#f) py37cb@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37c9@t)))))))) py37bf@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37bd@t))))))))) (set! py3686@parent-rcd-code (lambda (py379d@clause*) (let ((py379f@t (py3680@get-clause 'parent py379d@clause*))) (let ((py37a1@ls/false (py2cb0@syntax-dispatch py379f@t '(_ any)))) (if py37a1@ls/false (apply (lambda (py37a3@name) (list 'record-constructor-descriptor py37a3@name)) py37a1@ls/false) (let ((py37a5@t py379f@t)) (let ((py37a7@ls/false (py2cb0@syntax-dispatch py37a5@t '#(atom #f)))) (if py37a7@ls/false (apply (lambda () (let ((py37a9@t (py3680@get-clause 'parent-rtd py379d@clause*))) (let ((py37ab@ls/false (py2cb0@syntax-dispatch py37a9@t '(_ any any)))) (if py37ab@ls/false (apply (lambda (py37ad@rtd py37ae@rcd) py37ae@rcd) py37ab@ls/false) (let ((py37b1@t py37a9@t)) (let ((py37b3@ls/false (py2cb0@syntax-dispatch py37b1@t '#(atom #f)))) (if py37b3@ls/false (apply (lambda () '#f) py37b3@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37b1@t)))))))) py37a7@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py37a5@t))))))))) (set! py3688@foo-rcd-code (lambda (py3795@clause* py3796@foo-rtd py3797@protocol py3798@parent-rcd-code) (list 'make-record-constructor-descriptor py3796@foo-rtd py3798@parent-rcd-code py3797@protocol))) (set! py368a@get-protocol-code (lambda (py3789@clause*) (let ((py378b@t (py3680@get-clause 'protocol py3789@clause*))) (let ((py378d@ls/false (py2cb0@syntax-dispatch py378b@t '(_ any)))) (if py378d@ls/false (apply (lambda (py378f@expr) py378f@expr) py378d@ls/false) (let ((py3791@t py378b@t)) (let ((py3793@ls/false (py2cb0@syntax-dispatch py3791@t '_))) (if py3793@ls/false (apply (lambda () '#f) py3793@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3791@t))))))))) (set! py368c@get-fields (lambda (py3777@clause*) (let ((py3779@t py3777@clause*)) (let ((py377b@ls/false (py2cb0@syntax-dispatch py3779@t '()))) (if py377b@ls/false (apply (lambda () '()) py377b@ls/false) (let ((py377d@t py3779@t)) (let ((py377f@ls/false (py2cb0@syntax-dispatch py377d@t '((#(scheme-id fields) . each-any) . _)))) (if py377f@ls/false (apply (lambda (py3781@f*) py3781@f*) py377f@ls/false) (let ((py3783@t py377d@t)) (let ((py3785@ls/false (py2cb0@syntax-dispatch py3783@t '(_ . any)))) (if py3785@ls/false (apply (lambda (py3787@rest) (py368c@get-fields py3787@rest)) py3785@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3783@t)))))))))))) (set! py368e@get-mutator-indices (lambda (py375f@fields) (let py3765@f ((py3761@fields py375f@fields) (py3762@i '0)) (let ((py3767@t py3761@fields)) (let ((py3769@ls/false (py2cb0@syntax-dispatch py3767@t '()))) (if py3769@ls/false (apply (lambda () '()) py3769@ls/false) (let ((py376b@t py3767@t)) (let ((py376d@ls/false (py2cb0@syntax-dispatch py376b@t '((#(scheme-id mutable) . _) . any)))) (if py376d@ls/false (apply (lambda (py376f@rest) (cons py3762@i (py3765@f py376f@rest (+ py3762@i '1)))) py376d@ls/false) (let ((py3771@t py376b@t)) (let ((py3773@ls/false (py2cb0@syntax-dispatch py3771@t '(_ . any)))) (if py3773@ls/false (apply (lambda (py3775@rest) (py3765@f py3775@rest (+ py3762@i '1))) py3773@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3771@t))))))))))))) (set! py3690@get-mutators (lambda (py3735@foo py3736@fields) (let ((py373a@gen-name '#f)) (begin (set! py373a@gen-name (lambda (py375d@x) (py2d94@datum->syntax py3735@foo (string->symbol (string-append (symbol->string (py2d96@syntax->datum py3735@foo)) '"-" (symbol->string (py2d96@syntax->datum py375d@x)) '"-set!"))))) (let py373d@f ((py373b@fields py3736@fields)) (let ((py373f@t py373b@fields)) (let ((py3741@ls/false (py2cb0@syntax-dispatch py373f@t '()))) (if py3741@ls/false (apply (lambda () '()) py3741@ls/false) (let ((py3743@t py373f@t)) (let ((py3745@ls/false (py2cb0@syntax-dispatch py3743@t '((#(scheme-id mutable) any any any) . any)))) (if py3745@ls/false (apply (lambda (py3747@name py3748@accessor py3749@mutator py374a@rest) (cons py3749@mutator (py373d@f py374a@rest))) py3745@ls/false) (let ((py374f@t py3743@t)) (let ((py3751@ls/false (py2cb0@syntax-dispatch py374f@t '((#(scheme-id mutable) any) . any)))) (if py3751@ls/false (apply (lambda (py3753@name py3754@rest) (cons (py373a@gen-name py3753@name) (py373d@f py3754@rest))) py3751@ls/false) (let ((py3757@t py374f@t)) (let ((py3759@ls/false (py2cb0@syntax-dispatch py3757@t '(_ . any)))) (if py3759@ls/false (apply (lambda (py375b@rest) (py373d@f py375b@rest)) py3759@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3757@t)))))))))))))))))) (set! py3692@get-accessors (lambda (py36f1@foo py36f2@fields) (let ((py36f6@gen-name '#f)) (begin (set! py36f6@gen-name (lambda (py3733@x) (py2d94@datum->syntax py36f1@foo (string->symbol (string-append (symbol->string (py2d96@syntax->datum py36f1@foo)) '"-" (symbol->string (py2d96@syntax->datum py3733@x))))))) (map (lambda (py36f7@field) (let ((py36f9@t py36f7@field)) (let ((py36fb@ls/false (py2cb0@syntax-dispatch py36f9@t '(#(scheme-id mutable) any any any)))) (if (and py36fb@ls/false (apply (lambda (py36fd@name py36fe@accessor py36ff@mutator) (py2aa9@id? py36fe@accessor)) py36fb@ls/false)) (apply (lambda (py3703@name py3704@accessor py3705@mutator) py3704@accessor) py36fb@ls/false) (let ((py3709@t py36f9@t)) (let ((py370b@ls/false (py2cb0@syntax-dispatch py3709@t '(#(scheme-id immutable) any any)))) (if (and py370b@ls/false (apply (lambda (py370d@name py370e@accessor) (py2aa9@id? py370e@accessor)) py370b@ls/false)) (apply (lambda (py3711@name py3712@accessor) py3712@accessor) py370b@ls/false) (let ((py3715@t py3709@t)) (let ((py3717@ls/false (py2cb0@syntax-dispatch py3715@t '(#(scheme-id mutable) any)))) (if (and py3717@ls/false (apply (lambda (py3719@name) (py2aa9@id? py3719@name)) py3717@ls/false)) (apply (lambda (py371b@name) (py36f6@gen-name py371b@name)) py3717@ls/false) (let ((py371d@t py3715@t)) (let ((py371f@ls/false (py2cb0@syntax-dispatch py371d@t '(#(scheme-id immutable) any)))) (if (and py371f@ls/false (apply (lambda (py3721@name) (py2aa9@id? py3721@name)) py371f@ls/false)) (apply (lambda (py3723@name) (py36f6@gen-name py3723@name)) py371f@ls/false) (let ((py3725@t py371d@t)) (let ((py3727@ls/false (py2cb0@syntax-dispatch py3725@t 'any))) (if (and py3727@ls/false (apply (lambda (py3729@name) (py2aa9@id? py3729@name)) py3727@ls/false)) (apply (lambda (py372b@name) (py36f6@gen-name py372b@name)) py3727@ls/false) (let ((py372d@t py3725@t)) (let ((py372f@ls/false (py2cb0@syntax-dispatch py372d@t 'any))) (if py372f@ls/false (apply (lambda (py3731@others) (py2d90@syntax-violation '#f '"invalid field spec" py36f7@field)) py372f@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py372d@t)))))))))))))))))))) py36f2@fields))))) (set! py3694@enumerate (lambda (py36e9@ls) (let py36ef@f ((py36eb@ls py36e9@ls) (py36ec@i '0)) (if (null? py36eb@ls) '() (cons py36ec@i (py36ef@f (cdr py36eb@ls) (+ py36ec@i '1))))))) (set! py3696@do-define-record (lambda (py36c1@namespec py36c2@clause*) (let ((py36c5@foo (py367a@get-record-name py36c1@namespec))) (let ((py36c7@foo-rtd (gensym))) (let ((py36c9@foo-rcd (gensym))) (let ((py36cb@protocol (gensym))) (let ((py36cd@make-foo (py367c@get-record-constructor-name py36c1@namespec))) (let ((py36cf@fields (py368c@get-fields py36c2@clause*))) (let ((py36d1@idx* (py3694@enumerate py36cf@fields))) (let ((py36d3@foo-x* (py3692@get-accessors py36c5@foo py36cf@fields))) (let ((py36d5@set-foo-x!* (py3690@get-mutators py36c5@foo py36cf@fields))) (let ((py36d7@set-foo-idx* (py368e@get-mutator-indices py36cf@fields))) (let ((py36d9@foo? (py367e@get-record-predicate-name py36c1@namespec))) (let ((py36db@foo-rtd-code (py3682@foo-rtd-code py36c5@foo py36c2@clause* (py3684@parent-rtd-code py36c2@clause*)))) (let ((py36dd@foo-rcd-code (py3688@foo-rcd-code py36c2@clause* py36c7@foo-rtd py36cb@protocol (py3686@parent-rcd-code py36c2@clause*)))) (let ((py36df@protocol-code (py368a@get-protocol-code py36c2@clause*))) (py2c66@bless (cons 'begin (cons (list 'define py36c7@foo-rtd py36db@foo-rtd-code) (cons (list 'define py36cb@protocol py36df@protocol-code) (cons (list 'define py36c9@foo-rcd py36dd@foo-rcd-code) (cons (list 'define-syntax py36c5@foo (list 'list ''$rtd (list 'syntax py36c7@foo-rtd) (list 'syntax py36c9@foo-rcd))) (cons (list 'define py36d9@foo? (list 'record-predicate py36c7@foo-rtd)) (cons (list 'define py36cd@make-foo (list 'record-constructor py36c9@foo-rcd)) (append (map (lambda (py36e1@foo-x py36e2@idx) (list 'define py36e1@foo-x (list 'record-accessor py36c7@foo-rtd py36e2@idx))) py36d3@foo-x* py36d1@idx*) (map (lambda (py36e5@set-foo-x! py36e6@idx) (list 'define py36e5@set-foo-x! (list 'record-mutator py36c7@foo-rtd py36e6@idx))) py36d5@set-foo-x!* py36d7@set-foo-idx*)))))))))))))))))))))))))) (set! py3698@verify-clauses (lambda (py36a1@x py36a2@cls*) (let ((py36a6@valid-kwds '#f) (py36a8@free-id-member? '#f)) (begin (set! py36a6@valid-kwds (map py2c66@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! py36a8@free-id-member? (lambda (py36bd@x py36be@ls) (and (pair? py36be@ls) (or (py2aaf@free-id=? py36bd@x (car py36be@ls)) (py36a8@free-id-member? py36bd@x (cdr py36be@ls)))))) (let py36ad@f ((py36a9@cls* py36a2@cls*) (py36aa@seen* '())) (if (not (null? py36a9@cls*)) (let ((py36af@t (car py36a9@cls*))) (let ((py36b1@ls/false (py2cb0@syntax-dispatch py36af@t '(any . any)))) (if py36b1@ls/false (apply (lambda (py36b3@kwd py36b4@rest) (if (or (not (py2aa9@id? py36b3@kwd)) (not (py36a8@free-id-member? py36b3@kwd py36a6@valid-kwds))) (py2d90@syntax-violation '#f '"not a valid define-record-type keyword" py36b3@kwd) (if (py2ab5@bound-id-member? py36b3@kwd py36aa@seen*) (py2d90@syntax-violation '#f '"duplicate use of keyword " py36a1@x py36b3@kwd) (py36ad@f (cdr py36a9@cls*) (cons py36b3@kwd py36aa@seen*))))) py36b1@ls/false) (let ((py36b7@t py36af@t)) (let ((py36b9@ls/false (py2cb0@syntax-dispatch py36b7@t 'any))) (if py36b9@ls/false (apply (lambda (py36bb@cls) (py2d90@syntax-violation '#f '"malformed define-record-type clause" py36bb@cls)) py36b9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py36b7@t))))))) (void))))))) (let ((py3699@t py3675@x)) (let ((py369b@ls/false (py2cb0@syntax-dispatch py3699@t '(_ any . each-any)))) (if py369b@ls/false (apply (lambda (py369d@namespec py369e@clause*) (begin (py3698@verify-clauses py3675@x py369e@clause*) (py3696@do-define-record py369d@namespec py369e@clause*))) py369b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3699@t)))))))) (set! py4780@py2ca4@define-record-type-macro py2ca4@define-record-type-macro) (set! py2ca6@define-condition-type-macro (lambda (py3871@x) (let ((py3874@mkname '#f)) (begin (set! py3874@mkname (lambda (py38a1@name py38a2@suffix) (py2d94@datum->syntax py38a1@name (string->symbol (string-append (symbol->string (py2d96@syntax->datum py38a1@name)) py38a2@suffix))))) (let ((py3875@t py3871@x)) (let ((py3877@ls/false (py2cb0@syntax-dispatch py3875@t '(any any any any any . #(each (any any)))))) (if (and py3877@ls/false (apply (lambda (py3879@ctxt py387a@name py387b@super py387c@constructor py387d@predicate py387e@field* py387f@accessor*) (and (py2aa9@id? py387a@name) (py2aa9@id? py387b@super) (py2aa9@id? py387c@constructor) (py2aa9@id? py387d@predicate) (for-all py2aa9@id? py387e@field*) (for-all py2aa9@id? py387f@accessor*))) py3877@ls/false)) (apply (lambda (py3887@ctxt py3888@name py3889@super py388a@constructor py388b@predicate py388c@field* py388d@accessor*) (let ((py3895@aux-accessor* (map (lambda (py3897@x) (gensym)) py388d@accessor*))) (py2c66@bless (cons 'begin (cons (cons 'define-record-type (cons (list py3888@name py388a@constructor (gensym)) (cons (list 'parent py3889@super) (cons (cons 'fields (map (lambda (py3899@field py389a@aux) (list 'immutable py3899@field py389a@aux)) py388c@field* py3895@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define py388b@predicate (list 'condition-predicate (list 'record-type-descriptor py3888@name))) (map (lambda (py389d@accessor py389e@aux) (list 'define py389d@accessor (list 'condition-accessor (list 'record-type-descriptor py3888@name) py389e@aux))) py388d@accessor* py3895@aux-accessor*))))))) py3877@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3875@t)))))))) (set! py4781@py2ca6@define-condition-type-macro py2ca6@define-condition-type-macro) (set! py2ca8@incorrect-usage-macro (lambda (py38a5@e) (py2d90@syntax-violation '#f '"incorrect usage of auxiliary keyword" py38a5@e))) (set! py4782@py2ca8@incorrect-usage-macro py2ca8@incorrect-usage-macro) (set! py2caa@parameterize-macro (lambda (py38a7@e) (let ((py38a9@t py38a7@e)) (let ((py38ab@ls/false (py2cb0@syntax-dispatch py38a9@t '(_ () any . each-any)))) (if py38ab@ls/false (apply (lambda (py38ad@b py38ae@b*) (py2c66@bless (cons 'let (cons '() (cons py38ad@b py38ae@b*))))) py38ab@ls/false) (let ((py38b1@t py38a9@t)) (let ((py38b3@ls/false (py2cb0@syntax-dispatch py38b1@t '(_ #(each (any any)) any . each-any)))) (if py38b3@ls/false (apply (lambda (py38b5@olhs* py38b6@orhs* py38b7@b py38b8@b*) (let ((py38bd@lhs* (py2d7e@generate-temporaries py38b5@olhs*)) (py38be@rhs* (py2d7e@generate-temporaries py38b6@orhs*))) (py2c66@bless (cons (list 'lambda (append py38bd@lhs* py38be@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (py38c1@lhs py38c2@rhs) (list 'let (list (list 't (list py38c1@lhs))) (list py38c1@lhs py38c2@rhs) (cons 'set! (cons py38c2@rhs '(t))))) py38bd@lhs* py38be@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons py38b7@b py38b8@b*))) '(swap)))))) (append py38b5@olhs* py38b6@orhs*))))) py38b3@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py38b1@t))))))))) (set! py4783@py2caa@parameterize-macro py2caa@parameterize-macro) (set! py2cac@foreign-call-transformer (lambda (py38c5@e py38c6@r py38c7@mr) (let ((py38cb@t py38c5@e)) (let ((py38cd@ls/false (py2cb0@syntax-dispatch py38cb@t '(_ any . each-any)))) (if py38cd@ls/false (apply (lambda (py38cf@name py38d0@arg*) (cons 'foreign-call (cons (py2cd2@chi-expr py38cf@name py38c6@r py38c7@mr) (py2cce@chi-expr* py38d0@arg* py38c6@r py38c7@mr)))) py38cd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py38cb@t)))))) (set! py4784@py2cac@foreign-call-transformer py2cac@foreign-call-transformer) (set! py2cae@convert-pattern (lambda (py38d3@pattern py38d4@keys) (let ((py38d8@cvt* '#f) (py38da@cvt '#f)) (begin (set! py38d8@cvt* (lambda (py3977@p* py3978@n py3979@ids) (if (null? py3977@p*) (values '() py3979@ids) (call-with-values (lambda () (py38d8@cvt* (cdr py3977@p*) py3978@n py3979@ids)) (lambda (py3981@py397e py3982@py3980) (let ((py3985@ids py3982@py3980) (py3986@y py3981@py397e)) (call-with-values (lambda () (py38da@cvt (car py3977@p*) py3978@n py3985@ids)) (lambda (py398d@py398a py398e@py398c) (let ((py3991@ids py398e@py398c) (py3992@x py398d@py398a)) (values (cons py3992@x py3986@y) py3991@ids)))))))))) (set! py38da@cvt (lambda (py38db@p py38dc@n py38dd@ids) (let ((py38e1@t py38db@p)) (let ((py38e3@ls/false (py2cb0@syntax-dispatch py38e1@t 'any))) (if (and py38e3@ls/false (apply (lambda (py38e5@id) (py2aa9@id? py38e5@id)) py38e3@ls/false)) (apply (lambda (py38e7@id) (if (py2ab5@bound-id-member? py38db@p py38d4@keys) (values (vector 'free-id py38db@p) py38dd@ids) (if (py2aaf@free-id=? py38db@p (py2c38@scheme-stx '_)) (values '_ py38dd@ids) (values 'any (cons (cons py38db@p py38dc@n) py38dd@ids))))) py38e3@ls/false) (let ((py38e9@t py38e1@t)) (let ((py38eb@ls/false (py2cb0@syntax-dispatch py38e9@t '(any any)))) (if (and py38eb@ls/false (apply (lambda (py38ed@p py38ee@dots) (py2cb2@ellipsis? py38ee@dots)) py38eb@ls/false)) (apply (lambda (py38f1@p py38f2@dots) (call-with-values (lambda () (py38da@cvt py38f1@p (+ py38dc@n '1) py38dd@ids)) (lambda (py38f9@py38f6 py38fa@py38f8) (let ((py38fd@ids py38fa@py38f8) (py38fe@p py38f9@py38f6)) (values (if (eq? py38fe@p 'any) 'each-any (vector 'each py38fe@p)) py38fd@ids))))) py38eb@ls/false) (let ((py3901@t py38e9@t)) (let ((py3903@ls/false (py2cb0@syntax-dispatch py3901@t '(any any . #(each+ any () any))))) (if (and py3903@ls/false (apply (lambda (py3905@x py3906@dots py3907@ys py3908@z) (py2cb2@ellipsis? py3906@dots)) py3903@ls/false)) (apply (lambda (py390d@x py390e@dots py390f@ys py3910@z) (call-with-values (lambda () (py38da@cvt py3910@z py38dc@n py38dd@ids)) (lambda (py3919@py3916 py391a@py3918) (let ((py391d@ids py391a@py3918) (py391e@z py3919@py3916)) (call-with-values (lambda () (py38d8@cvt* py390f@ys py38dc@n py391d@ids)) (lambda (py3925@py3922 py3926@py3924) (let ((py3929@ids py3926@py3924) (py392a@ys py3925@py3922)) (call-with-values (lambda () (py38da@cvt py390d@x (+ py38dc@n '1) py3929@ids)) (lambda (py3931@py392e py3932@py3930) (let ((py3935@ids py3932@py3930) (py3936@x py3931@py392e)) (values (vector 'each+ py3936@x (reverse py392a@ys) py391e@z) py3935@ids))))))))))) py3903@ls/false) (let ((py3939@t py3901@t)) (let ((py393b@ls/false (py2cb0@syntax-dispatch py3939@t '(any . any)))) (if py393b@ls/false (apply (lambda (py393d@x py393e@y) (call-with-values (lambda () (py38da@cvt py393e@y py38dc@n py38dd@ids)) (lambda (py3945@py3942 py3946@py3944) (let ((py3949@ids py3946@py3944) (py394a@y py3945@py3942)) (call-with-values (lambda () (py38da@cvt py393d@x py38dc@n py3949@ids)) (lambda (py3951@py394e py3952@py3950) (let ((py3955@ids py3952@py3950) (py3956@x py3951@py394e)) (values (cons py3956@x py394a@y) py3955@ids)))))))) py393b@ls/false) (let ((py3959@t py3939@t)) (let ((py395b@ls/false (py2cb0@syntax-dispatch py3959@t '()))) (if py395b@ls/false (apply (lambda () (values '() py38dd@ids)) py395b@ls/false) (let ((py395d@t py3959@t)) (let ((py395f@ls/false (py2cb0@syntax-dispatch py395d@t '#(vector each-any)))) (if (and py395f@ls/false (apply (lambda (py3961@p) (not (py2a75@stx? py3961@p))) py395f@ls/false)) (apply (lambda (py3963@p) (call-with-values (lambda () (py38da@cvt py3963@p py38dc@n py38dd@ids)) (lambda (py3969@py3966 py396a@py3968) (let ((py396d@ids py396a@py3968) (py396e@p py3969@py3966)) (values (vector 'vector py396e@p) py396d@ids))))) py395f@ls/false) (let ((py3971@t py395d@t)) (let ((py3973@ls/false (py2cb0@syntax-dispatch py3971@t 'any))) (if py3973@ls/false (apply (lambda (py3975@datum) (values (vector 'atom (py2abd@stx->datum py3975@datum)) py38dd@ids)) py3973@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3971@t)))))))))))))))))))))))) (py38da@cvt py38d3@pattern '0 '()))))) (set! py4785@py2cae@convert-pattern py2cae@convert-pattern) (set! py2cb0@syntax-dispatch (let ((py3996@stx^ '#f) (py3998@match-each '#f) (py399a@match-each+ '#f) (py399c@match-each-any '#f) (py399e@match-empty '#f) (py39a0@combine '#f) (py39a2@match* '#f) (py39a4@match '#f)) (begin (set! py3996@stx^ (lambda (py3a71@e py3a72@m* py3a73@s* py3a74@ae*) (if (and (null? py3a72@m*) (null? py3a73@s*) (null? py3a74@ae*)) py3a71@e (py2a91@mkstx py3a71@e py3a72@m* py3a73@s* py3a74@ae*)))) (set! py3998@match-each (lambda (py3a51@e py3a52@p py3a53@m* py3a54@s* py3a55@ae*) (if (pair? py3a51@e) (let ((py3a5b@first (py39a4@match (car py3a51@e) py3a52@p py3a53@m* py3a54@s* py3a55@ae* '()))) (and py3a5b@first (let ((py3a5d@rest (py3998@match-each (cdr py3a51@e) py3a52@p py3a53@m* py3a54@s* py3a55@ae*))) (and py3a5d@rest (cons py3a5b@first py3a5d@rest))))) (if (null? py3a51@e) '() (if (py2a75@stx? py3a51@e) (and (not (py2a2f@top-marked? py3a53@m*)) (call-with-values (lambda () (join-wraps py3a53@m* py3a54@s* py3a55@ae* py3a51@e)) (lambda (py3a65@py3a60 py3a66@py3a62 py3a67@py3a64) (let ((py3a6b@ae* py3a67@py3a64) (py3a6c@s* py3a66@py3a62) (py3a6d@m* py3a65@py3a60)) (py3998@match-each (py2a77@stx-expr py3a51@e) py3a52@p py3a6d@m* py3a6c@s* py3a6b@ae*))))) (if (py25e8@py24bc@annotation? py3a51@e) (py3998@match-each (py25ea@py24c0@annotation-expression py3a51@e) py3a52@p py3a53@m* py3a54@s* py3a55@ae*) '#f)))))) (set! py399a@match-each+ (lambda (py3a11@e py3a12@x-pat py3a13@y-pat py3a14@z-pat py3a15@m* py3a16@s* py3a17@ae* py3a18@r) (let py3a29@f ((py3a21@e py3a11@e) (py3a22@m* py3a15@m*) (py3a23@s* py3a16@s*) (py3a24@ae* py3a17@ae*)) (if (pair? py3a21@e) (call-with-values (lambda () (py3a29@f (cdr py3a21@e) py3a22@m* py3a23@s* py3a24@ae*)) (lambda (py3a31@py3a2c py3a32@py3a2e py3a33@py3a30) (let ((py3a37@r py3a33@py3a30) (py3a38@y-pat py3a32@py3a2e) (py3a39@xr* py3a31@py3a2c)) (if py3a37@r (if (null? py3a38@y-pat) (let ((py3a3d@xr (py39a4@match (car py3a21@e) py3a12@x-pat py3a22@m* py3a23@s* py3a24@ae* '()))) (if py3a3d@xr (values (cons py3a3d@xr py3a39@xr*) py3a38@y-pat py3a37@r) (values '#f '#f '#f))) (values '() (cdr py3a38@y-pat) (py39a4@match (car py3a21@e) (car py3a38@y-pat) py3a22@m* py3a23@s* py3a24@ae* py3a37@r))) (values '#f '#f '#f))))) (if (py2a75@stx? py3a21@e) (if (py2a2f@top-marked? py3a22@m*) (values '() py3a13@y-pat (py39a4@match py3a21@e py3a14@z-pat py3a22@m* py3a23@s* py3a24@ae* py3a18@r)) (call-with-values (lambda () (join-wraps py3a22@m* py3a23@s* py3a24@ae* py3a21@e)) (lambda (py3a45@py3a40 py3a46@py3a42 py3a47@py3a44) (let ((py3a4b@ae* py3a47@py3a44) (py3a4c@s* py3a46@py3a42) (py3a4d@m* py3a45@py3a40)) (py3a29@f (py2a77@stx-expr py3a21@e) py3a4d@m* py3a4c@s* py3a4b@ae*))))) (if (py25e8@py24bc@annotation? py3a21@e) (py3a29@f (py25ea@py24c0@annotation-expression py3a21@e) py3a22@m* py3a23@s* py3a24@ae*) (values '() py3a13@y-pat (py39a4@match py3a21@e py3a14@z-pat py3a22@m* py3a23@s* py3a24@ae* py3a18@r)))))))) (set! py399c@match-each-any (lambda (py39f5@e py39f6@m* py39f7@s* py39f8@ae*) (if (pair? py39f5@e) (let ((py39fd@l (py399c@match-each-any (cdr py39f5@e) py39f6@m* py39f7@s* py39f8@ae*))) (and py39fd@l (cons (py3996@stx^ (car py39f5@e) py39f6@m* py39f7@s* py39f8@ae*) py39fd@l))) (if (null? py39f5@e) '() (if (py2a75@stx? py39f5@e) (and (not (py2a2f@top-marked? py39f6@m*)) (call-with-values (lambda () (join-wraps py39f6@m* py39f7@s* py39f8@ae* py39f5@e)) (lambda (py3a05@py3a00 py3a06@py3a02 py3a07@py3a04) (let ((py3a0b@ae* py3a07@py3a04) (py3a0c@s* py3a06@py3a02) (py3a0d@m* py3a05@py3a00)) (py399c@match-each-any (py2a77@stx-expr py39f5@e) py3a0d@m* py3a0c@s* py3a0b@ae*))))) (if (py25e8@py24bc@annotation? py39f5@e) (py399c@match-each-any (py25ea@py24c0@annotation-expression py39f5@e) py39f6@m* py39f7@s* py39f8@ae*) '#f)))))) (set! py399e@match-empty (lambda (py39ef@p py39f0@r) (if (null? py39ef@p) py39f0@r (if (eq? py39ef@p '_) py39f0@r (if (eq? py39ef@p 'any) (cons '() py39f0@r) (if (pair? py39ef@p) (py399e@match-empty (car py39ef@p) (py399e@match-empty (cdr py39ef@p) py39f0@r)) (if (eq? py39ef@p 'each-any) (cons '() py39f0@r) (let ((py39f3@t (vector-ref py39ef@p '0))) (if (memv py39f3@t '(each)) (py399e@match-empty (vector-ref py39ef@p '1) py39f0@r) (if (memv py39f3@t '(each+)) (py399e@match-empty (vector-ref py39ef@p '1) (py399e@match-empty (reverse (vector-ref py39ef@p '2)) (py399e@match-empty (vector-ref py39ef@p '3) py39f0@r))) (if (memv py39f3@t '(free-id atom)) py39f0@r (if (memv py39f3@t '(scheme-id atom)) py39f0@r (if (memv py39f3@t '(vector)) (py399e@match-empty (vector-ref py39ef@p '1) py39f0@r) (assertion-violation 'syntax-dispatch '"invalid pattern" py39ef@p)))))))))))))) (set! py39a0@combine (lambda (py39eb@r* py39ec@r) (if (null? (car py39eb@r*)) py39ec@r (cons (map car py39eb@r*) (py39a0@combine (map cdr py39eb@r*) py39ec@r))))) (set! py39a2@match* (lambda (py39c7@e py39c8@p py39c9@m* py39ca@s* py39cb@ae* py39cc@r) (if (null? py39c8@p) (and (null? py39c7@e) py39cc@r) (if (pair? py39c8@p) (and (pair? py39c7@e) (py39a4@match (car py39c7@e) (car py39c8@p) py39c9@m* py39ca@s* py39cb@ae* (py39a4@match (cdr py39c7@e) (cdr py39c8@p) py39c9@m* py39ca@s* py39cb@ae* py39cc@r))) (if (eq? py39c8@p 'each-any) (let ((py39d3@l (py399c@match-each-any py39c7@e py39c9@m* py39ca@s* py39cb@ae*))) (and py39d3@l (cons py39d3@l py39cc@r))) (let ((py39d5@t (vector-ref py39c8@p '0))) (if (memv py39d5@t '(each)) (if (null? py39c7@e) (py399e@match-empty (vector-ref py39c8@p '1) py39cc@r) (let ((py39d7@r* (py3998@match-each py39c7@e (vector-ref py39c8@p '1) py39c9@m* py39ca@s* py39cb@ae*))) (and py39d7@r* (py39a0@combine py39d7@r* py39cc@r)))) (if (memv py39d5@t '(free-id)) (and (symbol? py39c7@e) (py2a2f@top-marked? py39c9@m*) (py2aaf@free-id=? (py3996@stx^ py39c7@e py39c9@m* py39ca@s* py39cb@ae*) (vector-ref py39c8@p '1)) py39cc@r) (if (memv py39d5@t '(scheme-id)) (and (symbol? py39c7@e) (py2a2f@top-marked? py39c9@m*) (py2aaf@free-id=? (py3996@stx^ py39c7@e py39c9@m* py39ca@s* py39cb@ae*) (py2c38@scheme-stx (vector-ref py39c8@p '1))) py39cc@r) (if (memv py39d5@t '(each+)) (call-with-values (lambda () (py399a@match-each+ py39c7@e (vector-ref py39c8@p '1) (vector-ref py39c8@p '2) (vector-ref py39c8@p '3) py39c9@m* py39ca@s* py39cb@ae* py39cc@r)) (lambda (py39df@py39da py39e0@py39dc py39e1@py39de) (let ((py39e5@r py39e1@py39de) (py39e6@y-pat py39e0@py39dc) (py39e7@xr* py39df@py39da)) (and py39e5@r (null? py39e6@y-pat) (if (null? py39e7@xr*) (py399e@match-empty (vector-ref py39c8@p '1) py39e5@r) (py39a0@combine py39e7@xr* py39e5@r)))))) (if (memv py39d5@t '(atom)) (and (fast-equal? (vector-ref py39c8@p '1) (py2abb@strip py39c7@e py39c9@m*)) py39cc@r) (if (memv py39d5@t '(vector)) (and (vector? py39c7@e) (py39a4@match (vector->list py39c7@e) (vector-ref py39c8@p '1) py39c9@m* py39ca@s* py39cb@ae* py39cc@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" py39c8@p))))))))))))) (set! py39a4@match (lambda (py39a9@e py39aa@p py39ab@m* py39ac@s* py39ad@ae* py39ae@r) (if (not py39ae@r) '#f (if (eq? py39aa@p '_) py39ae@r (if (eq? py39aa@p 'any) (cons (py3996@stx^ py39a9@e py39ab@m* py39ac@s* py39ad@ae*) py39ae@r) (if (py2a75@stx? py39a9@e) (and (not (py2a2f@top-marked? py39ab@m*)) (call-with-values (lambda () (join-wraps py39ab@m* py39ac@s* py39ad@ae* py39a9@e)) (lambda (py39bb@py39b6 py39bc@py39b8 py39bd@py39ba) (let ((py39c1@ae* py39bd@py39ba) (py39c2@s* py39bc@py39b8) (py39c3@m* py39bb@py39b6)) (py39a4@match (py2a77@stx-expr py39a9@e) py39aa@p py39c3@m* py39c2@s* py39c1@ae* py39ae@r))))) (if (py25e8@py24bc@annotation? py39a9@e) (py39a4@match (py25ea@py24c0@annotation-expression py39a9@e) py39aa@p py39ab@m* py39ac@s* py39ad@ae* py39ae@r) (py39a2@match* py39a9@e py39aa@p py39ab@m* py39ac@s* py39ad@ae* py39ae@r)))))))) (lambda (py39a5@e py39a6@p) (py39a4@match py39a5@e py39a6@p '() '() '() '()))))) (set! py4786@py2cb0@syntax-dispatch py2cb0@syntax-dispatch) (set! py2cb2@ellipsis? (lambda (py3a79@x) (and (py2aa9@id? py3a79@x) (py2aaf@free-id=? py3a79@x (py2c38@scheme-stx '...))))) (set! py4787@py2cb2@ellipsis? py2cb2@ellipsis?) (set! py2cb4@underscore? (lambda (py3a7b@x) (and (py2aa9@id? py3a7b@x) (py2aaf@free-id=? py3a7b@x (py2c38@scheme-stx '_))))) (set! py4788@py2cb4@underscore? py2cb4@underscore?) (set! py2cb6@verify-literals (lambda (py3a7d@lits py3a7e@expr) (for-each (lambda (py3a81@x) (if (or (not (py2aa9@id? py3a81@x)) (py2cb2@ellipsis? py3a81@x) (py2cb4@underscore? py3a81@x)) (py2d90@syntax-violation '#f '"invalid literal" py3a7e@expr py3a81@x) (void))) py3a7d@lits))) (set! py4789@py2cb6@verify-literals py2cb6@verify-literals) (set! py2cb8@syntax-case-transformer (let ((py3a84@build-dispatch-call '#f) (py3a86@invalid-ids-error '#f) (py3a88@gen-clause '#f) (py3a8a@gen-syntax-case '#f)) (begin (set! py3a84@build-dispatch-call (lambda (py3af5@pvars py3af6@expr py3af7@y py3af8@r py3af9@mr) (let ((py3aff@ids (map car py3af5@pvars)) (py3b00@levels (map cdr py3af5@pvars))) (let ((py3b03@labels (map py2a35@gen-label py3aff@ids)) (py3b04@new-vars (map py2a31@gen-lexical py3aff@ids))) (let ((py3b07@body (py2cd2@chi-expr (py2a95@add-subst (py2a69@make-full-rib py3aff@ids py3b03@labels) py3af6@expr) (append (map (lambda (py3b09@label py3b0a@var py3b0b@level) (cons py3b09@label (py2ac3@make-binding 'syntax (cons py3b0a@var py3b0b@level)))) py3b03@labels py3b04@new-vars (map cdr py3af5@pvars)) py3af8@r) py3af9@mr))) (list '(primitive apply) (py2a0c@py2938@build-lambda '#f py3b04@new-vars py3b07@body) py3af7@y)))))) (set! py3a86@invalid-ids-error (lambda (py3ae9@id* py3aea@e py3aeb@class) (let py3af3@find ((py3aef@id* py3ae9@id*) (py3af0@ok* '())) (if (null? py3aef@id*) (py2d90@syntax-violation '#f '"invalid syntax" py3aea@e) (if (py2aa9@id? (car py3aef@id*)) (if (py2ab5@bound-id-member? (car py3aef@id*) py3af0@ok*) (py2d8c@syntax-error (car py3aef@id*) '"duplicate " py3aeb@class) (py3af3@find (cdr py3aef@id*) (cons (car py3aef@id*) py3af0@ok*))) (py2d8c@syntax-error (car py3aef@id*) '"invalid " py3aeb@class)))))) (set! py3a88@gen-clause (lambda (py3ac1@x py3ac2@keys py3ac3@clauses py3ac4@r py3ac5@mr py3ac6@pat py3ac7@fender py3ac8@expr) (call-with-values (lambda () (py2cae@convert-pattern py3ac6@pat py3ac2@keys)) (lambda (py3ad5@py3ad2 py3ad6@py3ad4) (let ((py3ad9@pvars py3ad6@py3ad4) (py3ada@p py3ad5@py3ad2)) (if (not (py2ab3@distinct-bound-ids? (map car py3ad9@pvars))) (py3a86@invalid-ids-error (map car py3ad9@pvars) py3ac6@pat '"pattern variable") (if (not (for-all (lambda (py3add@x) (not (py2cb2@ellipsis? (car py3add@x)))) py3ad9@pvars)) (py2d90@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" py3ac6@pat) (let ((py3adf@y (py2a31@gen-lexical 'tmp))) (let ((py3ae1@test (if (eq? py3ac7@fender '#t) py3adf@y (let ((py3ae3@call (py3a84@build-dispatch-call py3ad9@pvars py3ac7@fender py3adf@y py3ac4@r py3ac5@mr))) (list 'if py3adf@y py3ae3@call (list 'quote '#f)))))) (let ((py3ae5@conseq (py3a84@build-dispatch-call py3ad9@pvars py3ac8@expr py3adf@y py3ac4@r py3ac5@mr))) (let ((py3ae7@altern (py3a8a@gen-syntax-case py3ac1@x py3ac2@keys py3ac3@clauses py3ac4@r py3ac5@mr))) (list (py2a0c@py2938@build-lambda '#f (list py3adf@y) (list 'if py3ae1@test py3ae5@conseq py3ae7@altern)) (list '(primitive syntax-dispatch) py3ac1@x (list 'quote py3ada@p)))))))))))))) (set! py3a8a@gen-syntax-case (lambda (py3a9f@x py3aa0@keys py3aa1@clauses py3aa2@r py3aa3@mr) (if (null? py3aa1@clauses) (list '(primitive syntax-error) py3a9f@x) (let ((py3aa9@t (car py3aa1@clauses))) (let ((py3aab@ls/false (py2cb0@syntax-dispatch py3aa9@t '(any any)))) (if py3aab@ls/false (apply (lambda (py3aad@pat py3aae@expr) (if (and (py2aa9@id? py3aad@pat) (not (py2ab5@bound-id-member? py3aad@pat py3aa0@keys)) (not (py2cb2@ellipsis? py3aad@pat))) (if (py2aaf@free-id=? py3aad@pat (py2c38@scheme-stx '_)) (py2cd2@chi-expr py3aae@expr py3aa2@r py3aa3@mr) (let ((py3ab1@lab (py2a35@gen-label py3aad@pat)) (py3ab2@lex (py2a31@gen-lexical py3aad@pat))) (let ((py3ab5@body (py2cd2@chi-expr (py2a95@add-subst (py2a69@make-full-rib (list py3aad@pat) (list py3ab1@lab)) py3aae@expr) (cons (cons py3ab1@lab (py2ac3@make-binding 'syntax (cons py3ab2@lex '0))) py3aa2@r) py3aa3@mr))) (list (py2a0c@py2938@build-lambda '#f (list py3ab2@lex) py3ab5@body) py3a9f@x)))) (py3a88@gen-clause py3a9f@x py3aa0@keys (cdr py3aa1@clauses) py3aa2@r py3aa3@mr py3aad@pat '#t py3aae@expr))) py3aab@ls/false) (let ((py3ab7@t py3aa9@t)) (let ((py3ab9@ls/false (py2cb0@syntax-dispatch py3ab7@t '(any any any)))) (if py3ab9@ls/false (apply (lambda (py3abb@pat py3abc@fender py3abd@expr) (py3a88@gen-clause py3a9f@x py3aa0@keys (cdr py3aa1@clauses) py3aa2@r py3aa3@mr py3abb@pat py3abc@fender py3abd@expr)) py3ab9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3ab7@t)))))))))) (lambda (py3a8b@e py3a8c@r py3a8d@mr) (let ((py3a91@t py3a8b@e)) (let ((py3a93@ls/false (py2cb0@syntax-dispatch py3a91@t '(_ any each-any . each-any)))) (if py3a93@ls/false (apply (lambda (py3a95@expr py3a96@keys py3a97@clauses) (begin (py2cb6@verify-literals py3a96@keys py3a8b@e) (let ((py3a9b@x (py2a31@gen-lexical 'tmp))) (let ((py3a9d@body (py3a8a@gen-syntax-case py3a9b@x py3a96@keys py3a97@clauses py3a8c@r py3a8d@mr))) (list (py2a0c@py2938@build-lambda '#f (list py3a9b@x) py3a9d@body) (py2cd2@chi-expr py3a95@expr py3a8c@r py3a8d@mr)))))) py3a93@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3a91@t)))))))) (set! py478a@py2cb8@syntax-case-transformer py2cb8@syntax-case-transformer) (set! py2cba@ellipsis-map (lambda (py3b0f@proc py3b10@ls . py3b13@ls*) (let ((py3b16@who '#f)) (begin (set! py3b16@who '...) (begin (if (not (list? py3b10@ls)) (assertion-violation py3b16@who '"not a list" py3b10@ls) (void)) (if (not (null? py3b13@ls*)) (let ((py3b17@n (length py3b10@ls))) (for-each (lambda (py3b19@x) (begin (if (not (list? py3b19@x)) (assertion-violation py3b16@who '"not a list" py3b19@x) (void)) (if (not (= (length py3b19@x) py3b17@n)) (assertion-violation py3b16@who '"length mismatch" py3b10@ls py3b19@x) (void)))) py3b13@ls*)) (void)) (apply map py3b0f@proc py3b10@ls py3b13@ls*)))))) (set! py478b@py2cba@ellipsis-map py2cba@ellipsis-map) (set! py2cbc@syntax-transformer (let ((py3b1c@gen-syntax '#f) (py3b1e@gen-ref '#f) (py3b20@gen-append '#f) (py3b22@gen-mappend '#f) (py3b24@gen-map '#f) (py3b26@gen-cons '#f) (py3b28@gen-vector '#f) (py3b2a@regen '#f)) (begin (set! py3b1c@gen-syntax (lambda (py3b93@src py3b94@e py3b95@r py3b96@maps py3b97@ellipsis? py3b98@vec?) (let ((py3b9f@t py3b94@e)) (let ((py3ba1@ls/false (py2cb0@syntax-dispatch py3b9f@t 'any))) (if (and py3ba1@ls/false (apply (lambda (py3ba3@dots) (py3b97@ellipsis? py3ba3@dots)) py3ba1@ls/false)) (apply (lambda (py3ba5@dots) (py2d90@syntax-violation '#f '"misplaced ellipsis in syntax form" py3b93@src)) py3ba1@ls/false) (let ((py3ba7@t py3b9f@t)) (let ((py3ba9@ls/false (py2cb0@syntax-dispatch py3ba7@t 'any))) (if (and py3ba9@ls/false (apply (lambda (py3bab@id) (py2aa9@id? py3bab@id)) py3ba9@ls/false)) (apply (lambda (py3bad@id) (let ((py3baf@label (py2abf@id->label py3b94@e))) (let ((py3bb1@b (py2ac1@label->binding py3baf@label py3b95@r))) (if (eq? (py2ac5@binding-type py3bb1@b) 'syntax) (call-with-values (lambda () (let ((py3bb7@var.lev (py2ac7@binding-value py3bb1@b))) (py3b1e@gen-ref py3b93@src (car py3bb7@var.lev) (cdr py3bb7@var.lev) py3b96@maps))) (lambda (py3bb9@py3bb4 py3bba@py3bb6) (let ((py3bbd@maps py3bba@py3bb6) (py3bbe@var py3bb9@py3bb4)) (values (list 'ref py3bbe@var) py3bbd@maps)))) (values (list 'quote py3b94@e) py3b96@maps))))) py3ba9@ls/false) (let ((py3bc1@t py3ba7@t)) (let ((py3bc3@ls/false (py2cb0@syntax-dispatch py3bc1@t '(any any)))) (if (and py3bc3@ls/false (apply (lambda (py3bc5@dots py3bc6@e) (py3b97@ellipsis? py3bc5@dots)) py3bc3@ls/false)) (apply (lambda (py3bc9@dots py3bca@e) (if py3b98@vec? (py2d90@syntax-violation '#f '"misplaced ellipsis in syntax form" py3b93@src) (py3b1c@gen-syntax py3b93@src py3bca@e py3b95@r py3b96@maps (lambda (py3bcd@x) '#f) '#f))) py3bc3@ls/false) (let ((py3bcf@t py3bc1@t)) (let ((py3bd1@ls/false (py2cb0@syntax-dispatch py3bcf@t '(any any . any)))) (if (and py3bd1@ls/false (apply (lambda (py3bd3@x py3bd4@dots py3bd5@y) (py3b97@ellipsis? py3bd4@dots)) py3bd1@ls/false)) (apply (lambda (py3bd9@x py3bda@dots py3bdb@y) (let py3bf1@f ((py3bdf@y py3bdb@y) (py3be0@k (lambda (py3be3@maps) (call-with-values (lambda () (py3b1c@gen-syntax py3b93@src py3bd9@x py3b95@r (cons '() py3be3@maps) py3b97@ellipsis? '#f)) (lambda (py3be9@py3be6 py3bea@py3be8) (let ((py3bed@maps py3bea@py3be8) (py3bee@x py3be9@py3be6)) (if (null? (car py3bed@maps)) (py2d90@syntax-violation '#f '"extra ellipsis in syntax form" py3b93@src) (values (py3b24@gen-map py3bee@x (car py3bed@maps)) (cdr py3bed@maps))))))))) (let ((py3bf3@t py3bdf@y)) (let ((py3bf5@ls/false (py2cb0@syntax-dispatch py3bf3@t '()))) (if py3bf5@ls/false (apply (lambda () (py3be0@k py3b96@maps)) py3bf5@ls/false) (let ((py3bf7@t py3bf3@t)) (let ((py3bf9@ls/false (py2cb0@syntax-dispatch py3bf7@t '(any . any)))) (if (and py3bf9@ls/false (apply (lambda (py3bfb@dots py3bfc@y) (py3b97@ellipsis? py3bfb@dots)) py3bf9@ls/false)) (apply (lambda (py3bff@dots py3c00@y) (py3bf1@f py3c00@y (lambda (py3c03@maps) (call-with-values (lambda () (py3be0@k (cons '() py3c03@maps))) (lambda (py3c09@py3c06 py3c0a@py3c08) (let ((py3c0d@maps py3c0a@py3c08) (py3c0e@x py3c09@py3c06)) (if (null? (car py3c0d@maps)) (py2d90@syntax-violation '#f '"extra ellipsis in syntax form" py3b93@src) (values (py3b22@gen-mappend py3c0e@x (car py3c0d@maps)) (cdr py3c0d@maps))))))))) py3bf9@ls/false) (let ((py3c11@t py3bf7@t)) (let ((py3c13@ls/false (py2cb0@syntax-dispatch py3c11@t '_))) (if py3c13@ls/false (apply (lambda () (call-with-values (lambda () (py3b1c@gen-syntax py3b93@src py3bdf@y py3b95@r py3b96@maps py3b97@ellipsis? py3b98@vec?)) (lambda (py3c19@py3c16 py3c1a@py3c18) (let ((py3c1d@maps py3c1a@py3c18) (py3c1e@y py3c19@py3c16)) (call-with-values (lambda () (py3be0@k py3c1d@maps)) (lambda (py3c25@py3c22 py3c26@py3c24) (let ((py3c29@maps py3c26@py3c24) (py3c2a@x py3c25@py3c22)) (values (py3b20@gen-append py3c2a@x py3c1e@y) py3c29@maps)))))))) py3c13@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3c11@t)))))))))))) py3bd1@ls/false) (let ((py3c2d@t py3bcf@t)) (let ((py3c2f@ls/false (py2cb0@syntax-dispatch py3c2d@t '(any . any)))) (if py3c2f@ls/false (apply (lambda (py3c31@x py3c32@y) (call-with-values (lambda () (py3b1c@gen-syntax py3b93@src py3c31@x py3b95@r py3b96@maps py3b97@ellipsis? '#f)) (lambda (py3c39@py3c36 py3c3a@py3c38) (let ((py3c3d@maps py3c3a@py3c38) (py3c3e@xnew py3c39@py3c36)) (call-with-values (lambda () (py3b1c@gen-syntax py3b93@src py3c32@y py3b95@r py3c3d@maps py3b97@ellipsis? py3b98@vec?)) (lambda (py3c45@py3c42 py3c46@py3c44) (let ((py3c49@maps py3c46@py3c44) (py3c4a@ynew py3c45@py3c42)) (values (py3b26@gen-cons py3b94@e py3c31@x py3c32@y py3c3e@xnew py3c4a@ynew) py3c49@maps)))))))) py3c2f@ls/false) (let ((py3c4d@t py3c2d@t)) (let ((py3c4f@ls/false (py2cb0@syntax-dispatch py3c4d@t '#(vector each-any)))) (if py3c4f@ls/false (apply (lambda (py3c51@ls) (call-with-values (lambda () (py3b1c@gen-syntax py3b93@src py3c51@ls py3b95@r py3b96@maps py3b97@ellipsis? '#t)) (lambda (py3c57@py3c54 py3c58@py3c56) (let ((py3c5b@maps py3c58@py3c56) (py3c5c@lsnew py3c57@py3c54)) (values (py3b28@gen-vector py3b94@e py3c51@ls py3c5c@lsnew) py3c5b@maps))))) py3c4f@ls/false) (let ((py3c5f@t py3c4d@t)) (let ((py3c61@ls/false (py2cb0@syntax-dispatch py3c5f@t '_))) (if py3c61@ls/false (apply (lambda () (values (list 'quote py3b94@e) py3b96@maps)) py3c61@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3c5f@t)))))))))))))))))))))))) (set! py3b1e@gen-ref (lambda (py3b79@src py3b7a@var py3b7b@level py3b7c@maps) (if (= py3b7b@level '0) (values py3b7a@var py3b7c@maps) (if (null? py3b7c@maps) (py2d90@syntax-violation '#f '"missing ellipsis in syntax form" py3b79@src) (call-with-values (lambda () (py3b1e@gen-ref py3b79@src py3b7a@var (- py3b7b@level '1) (cdr py3b7c@maps))) (lambda (py3b85@py3b82 py3b86@py3b84) (let ((py3b89@outer-maps py3b86@py3b84) (py3b8a@outer-var py3b85@py3b82)) (let ((py3b8d@t (assq py3b8a@outer-var (car py3b7c@maps)))) (if py3b8d@t ((lambda (py3b8f@b) (values (cdr py3b8f@b) py3b7c@maps)) py3b8d@t) (let ((py3b91@inner-var (py2a31@gen-lexical 'tmp))) (values py3b91@inner-var (cons (cons (cons py3b8a@outer-var py3b91@inner-var) (car py3b7c@maps)) py3b89@outer-maps)))))))))))) (set! py3b20@gen-append (lambda (py3b75@x py3b76@y) (if (fast-equal? py3b76@y ''()) py3b75@x (list 'append py3b75@x py3b76@y)))) (set! py3b22@gen-mappend (lambda (py3b71@e py3b72@map-env) (list 'apply '(primitive append) (py3b24@gen-map py3b71@e py3b72@map-env)))) (set! py3b24@gen-map (lambda (py3b5f@e py3b60@map-env) (let ((py3b63@formals (map cdr py3b60@map-env)) (py3b64@actuals (map (lambda (py3b67@x) (list 'ref (car py3b67@x))) py3b60@map-env))) (if (eq? (car py3b5f@e) 'ref) (car py3b64@actuals) (if (for-all (lambda (py3b69@x) (and (eq? (car py3b69@x) 'ref) (memq (cadr py3b69@x) py3b63@formals))) (cdr py3b5f@e)) (let ((py3b6b@args (map (let ((py3b6d@r (map cons py3b63@formals py3b64@actuals))) (lambda (py3b6f@x) (cdr (assq (cadr py3b6f@x) py3b6d@r)))) (cdr py3b5f@e)))) (cons 'map (cons (list 'primitive (car py3b5f@e)) py3b6b@args))) (cons* 'map (list 'lambda py3b63@formals py3b5f@e) py3b64@actuals)))))) (set! py3b26@gen-cons (lambda (py3b4f@e py3b50@x py3b51@y py3b52@xnew py3b53@ynew) (let ((py3b59@t (car py3b53@ynew))) (if (memv py3b59@t '(quote)) (if (eq? (car py3b52@xnew) 'quote) (let ((py3b5b@xnew (cadr py3b52@xnew)) (py3b5c@ynew (cadr py3b53@ynew))) (if (and (eq? py3b5b@xnew py3b50@x) (eq? py3b5c@ynew py3b51@y)) (list 'quote py3b4f@e) (list 'quote (cons py3b5b@xnew py3b5c@ynew)))) (if (null? (cadr py3b53@ynew)) (list 'list py3b52@xnew) (list 'cons py3b52@xnew py3b53@ynew))) (if (memv py3b59@t '(list)) (cons 'list (cons py3b52@xnew (cdr py3b53@ynew))) (list 'cons py3b52@xnew py3b53@ynew)))))) (set! py3b28@gen-vector (lambda (py3b49@e py3b4a@ls py3b4b@lsnew) (if (eq? (car py3b4b@lsnew) 'quote) (if (eq? (cadr py3b4b@lsnew) py3b4a@ls) (list 'quote py3b49@e) (list 'quote (list->vector (cadr py3b4b@lsnew)))) (if (eq? (car py3b4b@lsnew) 'list) (cons 'vector (cdr py3b4b@lsnew)) (list 'list->vector py3b4b@lsnew))))) (set! py3b2a@regen (lambda (py3b43@x) (let ((py3b45@t (car py3b43@x))) (if (memv py3b45@t '(ref)) (cadr py3b43@x) (if (memv py3b45@t '(primitive)) (list 'primitive (cadr py3b43@x)) (if (memv py3b45@t '(quote)) (list 'quote (cadr py3b43@x)) (if (memv py3b45@t '(lambda)) (py2a0c@py2938@build-lambda '#f (cadr py3b43@x) (py3b2a@regen (caddr py3b43@x))) (if (memv py3b45@t '(map)) (let ((py3b47@ls (map py3b2a@regen (cdr py3b43@x)))) (cons '(primitive ellipsis-map) py3b47@ls)) (cons (list 'primitive (car py3b43@x)) (map py3b2a@regen (cdr py3b43@x))))))))))) (lambda (py3b2b@e py3b2c@r py3b2d@mr) (let ((py3b31@t py3b2b@e)) (let ((py3b33@ls/false (py2cb0@syntax-dispatch py3b31@t '(_ any)))) (if py3b33@ls/false (apply (lambda (py3b35@x) (call-with-values (lambda () (py3b1c@gen-syntax py3b2b@e py3b35@x py3b2c@r '() py2cb2@ellipsis? '#f)) (lambda (py3b3b@py3b38 py3b3c@py3b3a) (let ((py3b3f@maps py3b3c@py3b3a) (py3b40@e py3b3b@py3b38)) (py3b2a@regen py3b40@e))))) py3b33@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3b31@t)))))))) (set! py478c@py2cbc@syntax-transformer py2cbc@syntax-transformer) (set! py2cbe@core-macro-transformer (lambda (py3c63@name) (let ((py3c65@t py3c63@name)) (if (memv py3c65@t '(quote)) py2c60@quote-transformer (if (memv py3c65@t '(lambda)) py2c64@lambda-transformer (if (memv py3c65@t '(case-lambda)) py2c62@case-lambda-transformer (if (memv py3c65@t '(letrec)) py2c48@letrec-transformer (if (memv py3c65@t '(letrec*)) py2c4a@letrec*-transformer (if (memv py3c65@t '(let)) py2c46@let-transformer (if (memv py3c65@t '(if)) py2c58@if-transformer (if (memv py3c65@t '(and)) py2c5a@and-transformer (if (memv py3c65@t '(or)) py2c5c@or-transformer (if (memv py3c65@t '(foreign-call)) py2cac@foreign-call-transformer (if (memv py3c65@t '(syntax-case)) py2cb8@syntax-case-transformer (if (memv py3c65@t '(syntax)) py2cbc@syntax-transformer (if (memv py3c65@t '(type-descriptor)) py2c4e@type-descriptor-transformer (if (memv py3c65@t '(record-type-descriptor)) py2c50@record-type-descriptor-transformer (if (memv py3c65@t '(record-constructor-descriptor)) py2c52@record-constructor-descriptor-transformer (if (memv py3c65@t '(fluid-let-syntax)) py2c4c@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" py3c63@name)))))))))))))))))))) (set! py478d@py2cbe@core-macro-transformer py2cbe@core-macro-transformer) (set! py2cc0@symbol-macro (lambda (py3c67@x py3c68@set) (let ((py3c6b@t py3c67@x)) (let ((py3c6d@ls/false (py2cb0@syntax-dispatch py3c6b@t '(_ any)))) (if (and py3c6d@ls/false (apply (lambda (py3c6f@name) (and (py2aa9@id? py3c6f@name) (memq (py2aab@id->sym py3c6f@name) py3c68@set))) py3c6d@ls/false)) (apply (lambda (py3c71@name) (py2c66@bless (list 'quote py3c71@name))) py3c6d@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3c6b@t)))))) (set! py478e@py2cc0@symbol-macro py2cc0@symbol-macro) (set! py2cc2@macro-transformer (lambda (py3c73@x) (if (procedure? py3c73@x) py3c73@x (if (symbol? py3c73@x) (let ((py3c75@t py3c73@x)) (if (memv py3c75@t '(define-record-type)) py2ca4@define-record-type-macro (if (memv py3c75@t '(define-struct)) py2ca2@define-struct-macro (if (memv py3c75@t '(include)) py2c98@include-macro (if (memv py3c75@t '(cond)) py2c94@cond-macro (if (memv py3c75@t '(let)) py2c6c@let-macro (if (memv py3c75@t '(do)) py2c8c@do-macro (if (memv py3c75@t '(or)) py2c90@or-macro (if (memv py3c75@t '(and)) py2c92@and-macro (if (memv py3c75@t '(let*)) py2c8e@let*-macro (if (memv py3c75@t '(let-values)) py2c6e@let-values-macro (if (memv py3c75@t '(let*-values)) py2c70@let*-values-macro (if (memv py3c75@t '(syntax-rules)) py2c9c@syntax-rules-macro (if (memv py3c75@t '(quasiquote)) py2c9e@quasiquote-macro (if (memv py3c75@t '(quasisyntax)) py2ca0@quasisyntax-macro (if (memv py3c75@t '(with-syntax)) py2c68@with-syntax-macro (if (memv py3c75@t '(when)) py2c54@when-macro (if (memv py3c75@t '(unless)) py2c56@unless-macro (if (memv py3c75@t '(case)) py2c5e@case-macro (if (memv py3c75@t '(identifier-syntax)) py2c8a@identifier-syntax-macro (if (memv py3c75@t '(time)) py2c82@time-macro (if (memv py3c75@t '(delay)) py2c84@delay-macro (if (memv py3c75@t '(assert)) py2c86@assert-macro (if (memv py3c75@t '(endianness)) py2c88@endianness-macro (if (memv py3c75@t '(guard)) py2c7e@guard-macro (if (memv py3c75@t '(define-enumeration)) py2c80@define-enumeration-macro (if (memv py3c75@t '(trace-lambda)) py2c72@trace-lambda-macro (if (memv py3c75@t '(trace-define)) py2c74@trace-define-macro (if (memv py3c75@t '(trace-define-syntax)) py2c76@trace-define-syntax-macro (if (memv py3c75@t '(trace-let-syntax)) py2c7a@trace-let-syntax-macro (if (memv py3c75@t '(trace-letrec-syntax)) py2c7c@trace-letrec-syntax-macro (if (memv py3c75@t '(define-condition-type)) py2ca6@define-condition-type-macro (if (memv py3c75@t '(parameterize)) py2caa@parameterize-macro (if (memv py3c75@t '(include-into)) py2c9a@include-into-macro (if (memv py3c75@t '(eol-style)) (lambda (py3c77@x) (py2cc0@symbol-macro py3c77@x '(none lf cr crlf nel crnel ls))) (if (memv py3c75@t '(error-handling-mode)) (lambda (py3c79@x) (py2cc0@symbol-macro py3c79@x '(ignore raise replace))) (if (memv py3c75@t '(buffer-mode)) (lambda (py3c7b@x) (py2cc0@symbol-macro py3c7b@x '(none line block))) (if (memv py3c75@t '(file-options)) py2a24@file-options-macro (if (memv py3c75@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) py2ca8@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" py3c73@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" py3c73@x))))) (set! py478f@py2cc2@macro-transformer py2cc2@macro-transformer) (set! py2cc4@local-macro-transformer (lambda (py3c7d@x) (car py3c7d@x))) (set! py4790@py2cc4@local-macro-transformer py2cc4@local-macro-transformer) (set! py2cc6@do-macro-call (lambda (py3c7f@transformer py3c80@expr) (let ((py3c83@out (py3c7f@transformer (py2a93@add-mark py2a8d@anti-mark py3c80@expr '#f)))) (begin (let py3c87@f ((py3c85@x py3c83@out)) (if (not (py2a75@stx? py3c85@x)) (if (pair? py3c85@x) (begin (py3c87@f (car py3c85@x)) (py3c87@f (cdr py3c85@x))) (if (vector? py3c85@x) (vector-for-each py3c87@f py3c85@x) (if (symbol? py3c85@x) (py2d90@syntax-violation '#f '"raw symbol encountered in output of macro" py3c80@expr py3c85@x) (void)))) (void))) (py2a93@add-mark (py2a8b@gen-mark) py3c83@out py3c80@expr))))) (set! py4791@py2cc6@do-macro-call py2cc6@do-macro-call) (set! py2cc8@chi-macro (lambda (py3c89@p py3c8a@e) (py2cc6@do-macro-call (py2cc2@macro-transformer py3c89@p) py3c8a@e))) (set! py4792@py2cc8@chi-macro py2cc8@chi-macro) (set! py2cca@chi-local-macro (lambda (py3c8d@p py3c8e@e) (py2cc6@do-macro-call (py2cc4@local-macro-transformer py3c8d@p) py3c8e@e))) (set! py4793@py2cca@chi-local-macro py2cca@chi-local-macro) (set! py2ccc@chi-global-macro (lambda (py3c91@p py3c92@e) (let ((py3c95@lib (car py3c91@p)) (py3c96@loc (cdr py3c91@p))) (begin (py28c0@py270f@visit-library py3c95@lib) (let ((py3c99@x (symbol-value py3c96@loc))) (let ((py3c9b@transformer (if (procedure? py3c99@x) py3c99@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" py3c99@x)))) (py2cc6@do-macro-call py3c9b@transformer py3c92@e))))))) (set! py4794@py2ccc@chi-global-macro py2ccc@chi-global-macro) (set! py2cce@chi-expr* (lambda (py3c9d@e* py3c9e@r py3c9f@mr) (if (null? py3c9d@e*) '() (let ((py3ca3@e (py2cd2@chi-expr (car py3c9d@e*) py3c9e@r py3c9f@mr))) (cons py3ca3@e (py2cce@chi-expr* (cdr py3c9d@e*) py3c9e@r py3c9f@mr)))))) (set! py4795@py2cce@chi-expr* py2cce@chi-expr*) (set! py2cd0@chi-application (lambda (py3ca5@e py3ca6@r py3ca7@mr) (let ((py3cab@t py3ca5@e)) (let ((py3cad@ls/false (py2cb0@syntax-dispatch py3cab@t '(any . each-any)))) (if py3cad@ls/false (apply (lambda (py3caf@rator py3cb0@rands) (let ((py3cb3@rator (py2cd2@chi-expr py3caf@rator py3ca6@r py3ca7@mr))) (cons py3cb3@rator (py2cce@chi-expr* py3cb0@rands py3ca6@r py3ca7@mr)))) py3cad@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3cab@t)))))) (set! py4796@py2cd0@chi-application py2cd0@chi-application) (set! py2cd2@chi-expr (lambda (py3cb5@e py3cb6@r py3cb7@mr) (call-with-values (lambda () (py2acb@syntax-type py3cb5@e py3cb6@r)) (lambda (py3cc1@py3cbc py3cc2@py3cbe py3cc3@py3cc0) (let ((py3cc7@kwd py3cc3@py3cc0) (py3cc8@value py3cc2@py3cbe) (py3cc9@type py3cc1@py3cbc)) (let ((py3ccd@t py3cc9@type)) (if (memv py3ccd@t '(core-macro)) (let ((py3ccf@transformer (py2cbe@core-macro-transformer py3cc8@value))) (py3ccf@transformer py3cb5@e py3cb6@r py3cb7@mr)) (if (memv py3ccd@t '(global)) (let ((py3cd1@lib (car py3cc8@value))) (let ((py3cd3@loc (cdr py3cc8@value))) (begin ((py2d18@inv-collector) py3cd1@lib) py3cd3@loc))) (if (memv py3ccd@t '(core-prim)) (let ((py3cd5@name py3cc8@value)) (list 'primitive py3cd5@name)) (if (memv py3ccd@t '(call)) (py2cd0@chi-application py3cb5@e py3cb6@r py3cb7@mr) (if (memv py3ccd@t '(lexical)) (let ((py3cd7@lex (py2c3a@lexical-var py3cc8@value))) py3cd7@lex) (if (memv py3ccd@t '(global-macro global-macro!)) (py2cd2@chi-expr (py2ccc@chi-global-macro py3cc8@value py3cb5@e) py3cb6@r py3cb7@mr) (if (memv py3ccd@t '(local-macro local-macro!)) (py2cd2@chi-expr (py2cca@chi-local-macro py3cc8@value py3cb5@e) py3cb6@r py3cb7@mr) (if (memv py3ccd@t '(macro macro!)) (py2cd2@chi-expr (py2cc8@chi-macro py3cc8@value py3cb5@e) py3cb6@r py3cb7@mr) (if (memv py3ccd@t '(constant)) (let ((py3cd9@datum py3cc8@value)) (list 'quote py3cd9@datum)) (if (memv py3ccd@t '(set!)) (py2cd4@chi-set! py3cb5@e py3cb6@r py3cb7@mr) (if (memv py3ccd@t '(begin)) (let ((py3cdb@t py3cb5@e)) (let ((py3cdd@ls/false (py2cb0@syntax-dispatch py3cdb@t '(_ any . each-any)))) (if py3cdd@ls/false (apply (lambda (py3cdf@x py3ce0@x*) (py2a0e@py2968@build-sequence '#f (py2cce@chi-expr* (cons py3cdf@x py3ce0@x*) py3cb6@r py3cb7@mr))) py3cdd@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3cdb@t)))) (if (memv py3ccd@t '(let-syntax letrec-syntax)) (let ((py3ce3@t py3cb5@e)) (let ((py3ce5@ls/false (py2cb0@syntax-dispatch py3ce3@t '(_ #(each (any any)) any . each-any)))) (if (and py3ce5@ls/false (apply (lambda (py3ce7@xlhs* py3ce8@xrhs* py3ce9@xbody py3cea@xbody*) (if (not (py2ab1@valid-bound-ids? py3ce7@xlhs*)) (py2d90@syntax-violation '#f '"invalid identifiers" py3cb5@e) (void))) py3ce5@ls/false)) (apply (lambda (py3cef@xlhs* py3cf0@xrhs* py3cf1@xbody py3cf2@xbody*) (let ((py3cf7@xlab* (map py2a35@gen-label py3cef@xlhs*))) (let ((py3cf9@xrib (py2a69@make-full-rib py3cef@xlhs* py3cf7@xlab*))) (let ((py3cfb@xb* (map (lambda (py3cfd@x) (py2ae1@make-eval-transformer (py2d0a@expand-transformer (if (eq? py3cc9@type 'let-syntax) py3cfd@x (py2a95@add-subst py3cf9@xrib py3cfd@x)) py3cb7@mr))) py3cf0@xrhs*))) (py2a0e@py2968@build-sequence '#f (py2cce@chi-expr* (map (lambda (py3cff@x) (py2a95@add-subst py3cf9@xrib py3cff@x)) (cons py3cf1@xbody py3cf2@xbody*)) (append (map cons py3cf7@xlab* py3cfb@xb*) py3cb6@r) (append (map cons py3cf7@xlab* py3cfb@xb*) py3cb7@mr))))))) py3ce5@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3ce3@t)))) (if (memv py3ccd@t '(displaced-lexical)) (py2d90@syntax-violation '#f '"identifier out of context" py3cb5@e) (if (memv py3ccd@t '(syntax)) (py2d90@syntax-violation '#f '"reference to pattern variable outside a syntax form" py3cb5@e) (if (memv py3ccd@t '(define define-syntax module import library)) (py2d90@syntax-violation '#f (string-append (let ((py3d01@t py3cc9@type)) (if (memv py3d01@t '(define)) '"a definition" (if (memv py3d01@t '(define-syntax)) '"a define-syntax" (if (memv py3d01@t '(module)) '"a module definition" (if (memv py3d01@t '(library)) '"a library definition" (if (memv py3d01@t '(import)) '"an import declaration" (if (memv py3d01@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") py3cb5@e) (if (memv py3ccd@t '(mutable)) (py2d90@syntax-violation '#f '"attempt to reference an unexportable variable" py3cb5@e) (py2d90@syntax-violation '#f '"invalid expression" py3cb5@e))))))))))))))))))))))) (set! py4797@py2cd2@chi-expr py2cd2@chi-expr) (set! py2cd4@chi-set! (lambda (py3d03@e py3d04@r py3d05@mr) (let ((py3d09@t py3d03@e)) (let ((py3d0b@ls/false (py2cb0@syntax-dispatch py3d09@t '(_ any any)))) (if (and py3d0b@ls/false (apply (lambda (py3d0d@x py3d0e@v) (py2aa9@id? py3d0d@x)) py3d0b@ls/false)) (apply (lambda (py3d11@x py3d12@v) (call-with-values (lambda () (py2acb@syntax-type py3d11@x py3d04@r)) (lambda (py3d1b@py3d16 py3d1c@py3d18 py3d1d@py3d1a) (let ((py3d21@kwd py3d1d@py3d1a) (py3d22@value py3d1c@py3d18) (py3d23@type py3d1b@py3d16)) (let ((py3d27@t py3d23@type)) (if (memv py3d27@t '(lexical)) (begin (py2c3e@set-lexical-mutable! py3d22@value '#t) (list 'set! (py2c3a@lexical-var py3d22@value) (py2cd2@chi-expr py3d12@v py3d04@r py3d05@mr))) (if (memv py3d27@t '(core-prim)) (py2d90@syntax-violation '#f '"cannot modify imported core primitive" py3d03@e) (if (memv py3d27@t '(global)) (py2d90@syntax-violation '#f '"attempt to modify imported binding" py3d03@e) (if (memv py3d27@t '(global-macro!)) (py2cd2@chi-expr (py2ccc@chi-global-macro py3d22@value py3d03@e) py3d04@r py3d05@mr) (if (memv py3d27@t '(local-macro!)) (py2cd2@chi-expr (py2cca@chi-local-macro py3d22@value py3d03@e) py3d04@r py3d05@mr) (if (memv py3d27@t '(mutable)) (py2d90@syntax-violation '#f '"attempt to assign to an unexportable variable" py3d03@e) (py2d90@syntax-violation '#f '"invalid syntax" py3d03@e)))))))))))) py3d0b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3d09@t)))))) (set! py4798@py2cd4@chi-set! py2cd4@chi-set!) (set! py2cd6@verify-formals (lambda (py3d29@fmls py3d2a@stx) (let ((py3d2d@t py3d29@fmls)) (let ((py3d2f@ls/false (py2cb0@syntax-dispatch py3d2d@t 'each-any))) (if py3d2f@ls/false (apply (lambda (py3d31@x*) (if (not (py2ab1@valid-bound-ids? py3d31@x*)) (py2c6a@invalid-fmls-error py3d2a@stx py3d29@fmls) (void))) py3d2f@ls/false) (let ((py3d33@t py3d2d@t)) (let ((py3d35@ls/false (py2cb0@syntax-dispatch py3d33@t '#(each+ any () any)))) (if py3d35@ls/false (apply (lambda (py3d37@x* py3d38@x) (if (not (py2ab1@valid-bound-ids? (cons py3d38@x py3d37@x*))) (py2c6a@invalid-fmls-error py3d2a@stx py3d29@fmls) (void))) py3d35@ls/false) (let ((py3d3b@t py3d33@t)) (let ((py3d3d@ls/false (py2cb0@syntax-dispatch py3d3b@t '_))) (if py3d3d@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid syntax" py3d2a@stx)) py3d3d@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3d3b@t)))))))))))) (set! py4799@py2cd6@verify-formals py2cd6@verify-formals) (set! py2cd8@chi-lambda-clause (lambda (py3d3f@stx py3d40@fmls py3d41@body* py3d42@r py3d43@mr) (let ((py3d49@t py3d40@fmls)) (let ((py3d4b@ls/false (py2cb0@syntax-dispatch py3d49@t 'each-any))) (if py3d4b@ls/false (apply (lambda (py3d4d@x*) (begin (py2cd6@verify-formals py3d40@fmls py3d3f@stx) (let ((py3d4f@lex* (map py2a31@gen-lexical py3d4d@x*)) (py3d50@lab* (map py2a35@gen-label py3d4d@x*))) (values py3d4f@lex* (py2ce8@chi-internal (py2a95@add-subst (py2a69@make-full-rib py3d4d@x* py3d50@lab*) py3d41@body*) (py2c42@add-lexicals py3d50@lab* py3d4f@lex* py3d42@r) py3d43@mr))))) py3d4b@ls/false) (let ((py3d53@t py3d49@t)) (let ((py3d55@ls/false (py2cb0@syntax-dispatch py3d53@t '#(each+ any () any)))) (if py3d55@ls/false (apply (lambda (py3d57@x* py3d58@x) (begin (py2cd6@verify-formals py3d40@fmls py3d3f@stx) (let ((py3d5b@lex* (map py2a31@gen-lexical py3d57@x*)) (py3d5c@lab* (map py2a35@gen-label py3d57@x*)) (py3d5d@lex (py2a31@gen-lexical py3d58@x)) (py3d5e@lab (py2a35@gen-label py3d58@x))) (values (append py3d5b@lex* py3d5d@lex) (py2ce8@chi-internal (py2a95@add-subst (py2a69@make-full-rib (cons py3d58@x py3d57@x*) (cons py3d5e@lab py3d5c@lab*)) py3d41@body*) (py2c42@add-lexicals (cons py3d5e@lab py3d5c@lab*) (cons py3d5d@lex py3d5b@lex*) py3d42@r) py3d43@mr))))) py3d55@ls/false) (let ((py3d63@t py3d53@t)) (let ((py3d65@ls/false (py2cb0@syntax-dispatch py3d63@t '_))) (if py3d65@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid syntax" py3d40@fmls)) py3d65@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3d63@t)))))))))))) (set! py479a@py2cd8@chi-lambda-clause py2cd8@chi-lambda-clause) (set! py2cda@chi-lambda-clause* (lambda (py3d67@stx py3d68@fmls* py3d69@body** py3d6a@r py3d6b@mr) (if (null? py3d68@fmls*) (values '() '()) (call-with-values (lambda () (py2cd8@chi-lambda-clause py3d67@stx (car py3d68@fmls*) (car py3d69@body**) py3d6a@r py3d6b@mr)) (lambda (py3d75@py3d72 py3d76@py3d74) (let ((py3d79@b py3d76@py3d74) (py3d7a@a py3d75@py3d72)) (call-with-values (lambda () (py2cda@chi-lambda-clause* py3d67@stx (cdr py3d68@fmls*) (cdr py3d69@body**) py3d6a@r py3d6b@mr)) (lambda (py3d81@py3d7e py3d82@py3d80) (let ((py3d85@b* py3d82@py3d80) (py3d86@a* py3d81@py3d7e)) (values (cons py3d7a@a py3d86@a*) (cons py3d79@b py3d85@b*))))))))))) (set! py479b@py2cda@chi-lambda-clause* py2cda@chi-lambda-clause*) (set! py2cdc@chi-defun (lambda (py3d89@x py3d8a@r py3d8b@mr) (let ((py3d8f@fmls (car py3d89@x)) (py3d90@body* (cdr py3d89@x))) (call-with-values (lambda () (py2cd8@chi-lambda-clause py3d8f@fmls py3d8f@fmls py3d90@body* py3d8a@r py3d8b@mr)) (lambda (py3d97@py3d94 py3d98@py3d96) (let ((py3d9b@body py3d98@py3d96) (py3d9c@fmls py3d97@py3d94)) (py2a0c@py2938@build-lambda '#f py3d9c@fmls py3d9b@body))))))) (set! py479c@py2cdc@chi-defun py2cdc@chi-defun) (set! py2cde@chi-rhs (lambda (py3d9f@rhs py3da0@r py3da1@mr) (let ((py3da5@t (car py3d9f@rhs))) (if (memv py3da5@t '(defun)) (py2cdc@chi-defun (cdr py3d9f@rhs) py3da0@r py3da1@mr) (if (memv py3da5@t '(expr)) (let ((py3da7@expr (cdr py3d9f@rhs))) (py2cd2@chi-expr py3da7@expr py3da0@r py3da1@mr)) (if (memv py3da5@t '(top-expr)) (let ((py3da9@expr (cdr py3d9f@rhs))) (py2a0e@py2968@build-sequence '#f (list (py2cd2@chi-expr py3da9@expr py3da0@r py3da1@mr) (py2a0f@py296a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" py3d9f@rhs))))))) (set! py479d@py2cde@chi-rhs py2cde@chi-rhs) (set! py2ce0@expand-interaction-rhs*/init* (lambda (py3dab@lhs* py3dac@rhs* py3dad@init* py3dae@r py3daf@mr) (let py3db9@f ((py3db5@lhs* py3dab@lhs*) (py3db6@rhs* py3dac@rhs*)) (if (null? py3db5@lhs*) (map (lambda (py3dbb@x) (py2cd2@chi-expr py3dbb@x py3dae@r py3daf@mr)) py3dad@init*) (let ((py3dbd@lhs (car py3db5@lhs*)) (py3dbe@rhs (car py3db6@rhs*))) (let ((py3dc1@t (car py3dbe@rhs))) (if (memv py3dc1@t '(defun)) (let ((py3dc3@rhs (py2cdc@chi-defun (cdr py3dbe@rhs) py3dae@r py3daf@mr))) (cons (list 'set! py3dbd@lhs py3dc3@rhs) (py3db9@f (cdr py3db5@lhs*) (cdr py3db6@rhs*)))) (if (memv py3dc1@t '(expr)) (let ((py3dc5@rhs (py2cd2@chi-expr (cdr py3dbe@rhs) py3dae@r py3daf@mr))) (cons (list 'set! py3dbd@lhs py3dc5@rhs) (py3db9@f (cdr py3db5@lhs*) (cdr py3db6@rhs*)))) (if (memv py3dc1@t '(top-expr)) (let ((py3dc7@e (py2cd2@chi-expr (cdr py3dbe@rhs) py3dae@r py3daf@mr))) (cons py3dc7@e (py3db9@f (cdr py3db5@lhs*) (cdr py3db6@rhs*)))) (error 'expand-interaction '"invallid" py3dbe@rhs)))))))))) (set! py479e@py2ce0@expand-interaction-rhs*/init* py2ce0@expand-interaction-rhs*/init*) (set! py2ce2@chi-rhs* (lambda (py3dc9@rhs* py3dca@r py3dcb@mr) (let py3dd1@f ((py3dcf@ls py3dc9@rhs*)) (if (null? py3dcf@ls) '() (let ((py3dd3@a (py2cde@chi-rhs (car py3dcf@ls) py3dca@r py3dcb@mr))) (cons py3dd3@a (py3dd1@f (cdr py3dcf@ls)))))))) (set! py479f@py2ce2@chi-rhs* py2ce2@chi-rhs*) (set! py2ce4@find-bound=? (lambda (py3dd5@x py3dd6@lhs* py3dd7@rhs*) (if (null? py3dd6@lhs*) '#f (if (py2aad@bound-id=? py3dd5@x (car py3dd6@lhs*)) (car py3dd7@rhs*) (py2ce4@find-bound=? py3dd5@x (cdr py3dd6@lhs*) (cdr py3dd7@rhs*)))))) (set! py47a0@py2ce4@find-bound=? py2ce4@find-bound=?) (set! py2ce6@find-dups (lambda (py3ddb@ls) (let py3de1@f ((py3ddd@ls py3ddb@ls) (py3dde@dups '())) (if (null? py3ddd@ls) py3dde@dups (let ((py3de3@t (py2ce4@find-bound=? (car py3ddd@ls) (cdr py3ddd@ls) (cdr py3ddd@ls)))) (if py3de3@t ((lambda (py3de5@x) (py3de1@f (cdr py3ddd@ls) (cons (list (car py3ddd@ls) py3de5@x) py3dde@dups))) py3de3@t) (py3de1@f (cdr py3ddd@ls) py3dde@dups))))))) (set! py47a1@py2ce6@find-dups py2ce6@find-dups) (set! py2ce8@chi-internal (lambda (py3de7@e* py3de8@r py3de9@mr) (let ((py3ded@rib (py2a5d@make-empty-rib))) (call-with-values (lambda () (py2d08@chi-body* (map (lambda (py3dff@x) (py2a95@add-subst py3ded@rib py3dff@x)) (py2aa7@syntax->list py3de7@e*)) py3de8@r py3de9@mr '() '() '() '() '() py3ded@rib '#f)) (lambda (py3e01@py3df0 py3e02@py3df2 py3e03@py3df4 py3e04@py3df6 py3e05@py3df8 py3e06@py3dfa py3e07@py3dfc py3e08@py3dfe) (let ((py3e11@_exp* py3e08@py3dfe) (py3e12@kwd* py3e07@py3dfc) (py3e13@mod** py3e06@py3dfa) (py3e14@rhs* py3e05@py3df8) (py3e15@lex* py3e04@py3df6) (py3e16@mr py3e03@py3df4) (py3e17@r py3e02@py3df2) (py3e18@e* py3e01@py3df0)) (begin (if (null? py3e18@e*) (py2d90@syntax-violation '#f '"no expression in body" py3e18@e*) (void)) (let ((py3e21@init* (py2cce@chi-expr* (append (apply append (reverse py3e13@mod**)) py3e18@e*) py3e17@r py3e16@mr))) (let ((py3e23@rhs* (py2ce2@chi-rhs* py3e14@rhs* py3e17@r py3e16@mr))) (py2a13@py2972@build-letrec* '#f (reverse py3e15@lex*) (reverse py3e23@rhs*) (py2a0e@py2968@build-sequence '#f py3e21@init*))))))))))) (set! py47a2@py2ce8@chi-internal py2ce8@chi-internal) (set! py2cea@parse-module (lambda (py3e25@e) (let ((py3e27@t py3e25@e)) (let ((py3e29@ls/false (py2cb0@syntax-dispatch py3e27@t '(_ each-any . each-any)))) (if py3e29@ls/false (apply (lambda (py3e2b@export* py3e2c@b*) (begin (if (not (for-all py2aa9@id? py3e2b@export*)) (py2d90@syntax-violation '#f '"module exports must be identifiers" py3e25@e) (void)) (values '#f (list->vector py3e2b@export*) py3e2c@b*))) py3e29@ls/false) (let ((py3e2f@t py3e27@t)) (let ((py3e31@ls/false (py2cb0@syntax-dispatch py3e2f@t '(_ any each-any . each-any)))) (if py3e31@ls/false (apply (lambda (py3e33@name py3e34@export* py3e35@b*) (begin (if (not (py2aa9@id? py3e33@name)) (py2d90@syntax-violation '#f '"module name must be an identifier" py3e25@e) (void)) (if (not (for-all py2aa9@id? py3e34@export*)) (py2d90@syntax-violation '#f '"module exports must be identifiers" py3e25@e) (void)) (values py3e33@name (list->vector py3e34@export*) py3e35@b*))) py3e31@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3e2f@t))))))))) (set! py47a3@py2cea@parse-module py2cea@parse-module) (set! py2cf4@module-interface? (lambda (py3e39@x) (and (simple-struct? py3e39@x) (eq? (simple-struct-name py3e39@x) 'module-interface)))) (set! py47a4@py2cf4@module-interface? py2cf4@module-interface?) (set! py2cf6@module-interface-first-mark (lambda (py3e3b@x) (simple-struct-ref py3e3b@x '0))) (set! py47a5@py2cf6@module-interface-first-mark py2cf6@module-interface-first-mark) (set! py2cf8@set-module-interface-first-mark! (lambda (py3e3d@x py3e3e@val) (simple-struct-set! py3e3d@x '0 py3e3e@val))) (set! py47a6@py2cf8@set-module-interface-first-mark! py2cf8@set-module-interface-first-mark!) (set! py2cfa@module-interface-exp-id-vec (lambda (py3e41@x) (simple-struct-ref py3e41@x '1))) (set! py47a7@py2cfa@module-interface-exp-id-vec py2cfa@module-interface-exp-id-vec) (set! py2cfc@set-module-interface-exp-id-vec! (lambda (py3e43@x py3e44@val) (simple-struct-set! py3e43@x '1 py3e44@val))) (set! py47a8@py2cfc@set-module-interface-exp-id-vec! py2cfc@set-module-interface-exp-id-vec!) (set! py2cfe@module-interface-exp-lab-vec (lambda (py3e47@x) (simple-struct-ref py3e47@x '2))) (set! py47a9@py2cfe@module-interface-exp-lab-vec py2cfe@module-interface-exp-lab-vec) (set! py2d00@set-module-interface-exp-lab-vec! (lambda (py3e49@x py3e4a@val) (simple-struct-set! py3e49@x '2 py3e4a@val))) (set! py47aa@py2d00@set-module-interface-exp-lab-vec! py2d00@set-module-interface-exp-lab-vec!) (set! py2d02@dummy '3) (set! py47ab@py2d02@dummy py2d02@dummy) (set! py2d04@module-interface-exp-id* (lambda (py3e4d@iface py3e4e@id) (let ((py3e52@diff-marks '#f)) (begin (set! py3e52@diff-marks (lambda (py3e59@ls py3e5a@x) (begin (if (null? py3e59@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((py3e5d@a (car py3e59@ls))) (if (eq? py3e5d@a py3e5a@x) '() (cons py3e5d@a (py3e52@diff-marks (cdr py3e59@ls) py3e5a@x))))))) (let ((py3e53@diff (py3e52@diff-marks (py2a7b@stx-mark* py3e4e@id) (py2cf6@module-interface-first-mark py3e4d@iface))) (py3e54@id-vec (py2cfa@module-interface-exp-id-vec py3e4d@iface))) (if (null? py3e53@diff) py3e54@id-vec (vector-map (lambda (py3e57@x) (make-simple-struct 'stx '5 (list (py2a77@stx-expr py3e57@x) (append py3e53@diff (py2a7b@stx-mark* py3e57@x)) '() '()))) py3e54@id-vec))))))) (set! py47ac@py2d04@module-interface-exp-id* py2d04@module-interface-exp-id*) (set! py2d06@chi-internal-module (lambda (py3e5f@e py3e60@r py3e61@mr py3e62@lex* py3e63@rhs* py3e64@mod** py3e65@kwd*) (call-with-values (lambda () (py2cea@parse-module py3e5f@e)) (lambda (py3e73@py3e6e py3e74@py3e70 py3e75@py3e72) (let ((py3e79@e* py3e75@py3e72) (py3e7a@exp-id* py3e74@py3e70) (py3e7b@name py3e73@py3e6e)) (let ((py3e7f@rib (py2a5d@make-empty-rib))) (let ((py3e81@e* (map (lambda (py3e83@x) (py2a95@add-subst py3e7f@rib py3e83@x)) (py2aa7@syntax->list py3e79@e*)))) (call-with-values (lambda () (py2d08@chi-body* py3e81@e* py3e60@r py3e61@mr py3e62@lex* py3e63@rhs* py3e64@mod** py3e65@kwd* '() py3e7f@rib '#f)) (lambda (py3e95@py3e86 py3e96@py3e88 py3e97@py3e8a py3e98@py3e8c py3e99@py3e8e py3e9a@py3e90 py3e9b@py3e92 py3e9c@py3e94) (let ((py3ea5@_exp* py3e9c@py3e94) (py3ea6@kwd* py3e9b@py3e92) (py3ea7@mod** py3e9a@py3e90) (py3ea8@rhs* py3e99@py3e8e) (py3ea9@lex* py3e98@py3e8c) (py3eaa@mr py3e97@py3e8a) (py3eab@r py3e96@py3e88) (py3eac@e* py3e95@py3e86)) (let ((py3eb5@exp-lab* (vector-map (lambda (py3eb9@x) (or (py2abf@id->label (make-simple-struct 'stx '5 (list (py2aab@id->sym py3eb9@x) (py2a7b@stx-mark* py3eb9@x) (list py3e7f@rib) '()))) (py2d90@syntax-violation '#f '"cannot find module export" py3eb9@x))) py3e7a@exp-id*)) (py3eb6@mod** (cons py3eac@e* py3ea7@mod**))) (if (not py3e7b@name) (values py3ea9@lex* py3ea8@rhs* py3e7a@exp-id* py3eb5@exp-lab* py3eab@r py3eaa@mr py3eb6@mod** py3ea6@kwd*) (let ((py3ebb@lab (py2a35@gen-label 'module)) (py3ebc@iface (make-simple-struct 'module-interface '4 (list (car (py2a7b@stx-mark* py3e7b@name)) (vector-map (lambda (py3ebf@x) (make-simple-struct 'stx '5 (list (py2a77@stx-expr py3ebf@x) (py2a7b@stx-mark* py3ebf@x) '() '()))) py3e7a@exp-id*) py3eb5@exp-lab*)))) (values py3ea9@lex* py3ea8@rhs* (vector py3e7b@name) (vector py3ebb@lab) (cons (cons py3ebb@lab (cons '$module py3ebc@iface)) py3eab@r) (cons (cons py3ebb@lab (cons '$module py3ebc@iface)) py3eaa@mr) py3eb6@mod** py3ea6@kwd*)))))))))))))) (set! py47ad@py2d06@chi-internal-module py2d06@chi-internal-module) (set! py2d08@chi-body* (lambda (py3ec1@e* py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ec7@kwd* py3ec8@exp* py3ec9@rib py3eca@top?) (if (null? py3ec1@e*) (values py3ec1@e* py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ec7@kwd* py3ec8@exp*) (let ((py3ed5@e (car py3ec1@e*))) (call-with-values (lambda () (py2acb@syntax-type py3ed5@e py3ec2@r)) (lambda (py3edd@py3ed8 py3ede@py3eda py3edf@py3edc) (let ((py3ee3@kwd py3edf@py3edc) (py3ee4@value py3ede@py3eda) (py3ee5@type py3edd@py3ed8)) (let ((py3ee9@kwd* (if (py2aa9@id? py3ee3@kwd) (cons py3ee3@kwd py3ec7@kwd*) py3ec7@kwd*))) (let ((py3eeb@t py3ee5@type)) (if (memv py3eeb@t '(define)) (call-with-values (lambda () (py2c32@parse-define py3ed5@e)) (lambda (py3ef1@py3eee py3ef2@py3ef0) (let ((py3ef5@rhs py3ef2@py3ef0) (py3ef6@id py3ef1@py3eee)) (begin (if (py2ab5@bound-id-member? py3ef6@id py3ee9@kwd*) (py2d90@syntax-violation '#f '"cannot redefine keyword" py3ed5@e) (void)) (call-with-values (lambda () (py2a39@gen-define-label+loc py3ef6@id py3ec9@rib)) (lambda (py3efd@py3efa py3efe@py3efc) (let ((py3f01@lex py3efe@py3efc) (py3f02@lab py3efd@py3efa)) (begin (py2a5f@extend-rib! py3ec9@rib py3ef6@id py3f02@lab) (py2d08@chi-body* (cdr py3ec1@e*) (py2c40@add-lexical py3f02@lab py3f01@lex py3ec2@r) py3ec3@mr (cons py3f01@lex py3ec4@lex*) (cons py3ef5@rhs py3ec5@rhs*) py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?))))))))) (if (memv py3eeb@t '(define-syntax)) (call-with-values (lambda () (py2c34@parse-define-syntax py3ed5@e)) (lambda (py3f09@py3f06 py3f0a@py3f08) (let ((py3f0d@rhs py3f0a@py3f08) (py3f0e@id py3f09@py3f06)) (begin (if (py2ab5@bound-id-member? py3f0e@id py3ee9@kwd*) (py2d90@syntax-violation '#f '"cannot redefine keyword" py3ed5@e) (void)) (let ((py3f11@lab (py2a3b@gen-define-label py3f0e@id py3ec9@rib)) (py3f12@expanded-rhs (py2d0a@expand-transformer py3f0d@rhs py3ec3@mr))) (begin (py2a5f@extend-rib! py3ec9@rib py3f0e@id py3f11@lab) (let ((py3f15@b (py2ae1@make-eval-transformer py3f12@expanded-rhs))) (py2d08@chi-body* (cdr py3ec1@e*) (cons (cons py3f11@lab py3f15@b) py3ec2@r) (cons (cons py3f11@lab py3f15@b) py3ec3@mr) py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?)))))))) (if (memv py3eeb@t '(let-syntax letrec-syntax)) (let ((py3f17@t py3ed5@e)) (let ((py3f19@ls/false (py2cb0@syntax-dispatch py3f17@t '(_ #(each (any any)) . each-any)))) (if (and py3f19@ls/false (apply (lambda (py3f1b@xlhs* py3f1c@xrhs* py3f1d@xbody*) (if (not (py2ab1@valid-bound-ids? py3f1b@xlhs*)) (py2d90@syntax-violation '#f '"invalid identifiers" py3ed5@e) (void))) py3f19@ls/false)) (apply (lambda (py3f21@xlhs* py3f22@xrhs* py3f23@xbody*) (let ((py3f27@xlab* (map py2a35@gen-label py3f21@xlhs*))) (let ((py3f29@xrib (py2a69@make-full-rib py3f21@xlhs* py3f27@xlab*))) (let ((py3f2b@xb* (map (lambda (py3f2d@x) (py2ae1@make-eval-transformer (py2d0a@expand-transformer (if (eq? py3ee5@type 'let-syntax) py3f2d@x (py2a95@add-subst py3f29@xrib py3f2d@x)) py3ec3@mr))) py3f22@xrhs*))) (py2d08@chi-body* (append (map (lambda (py3f2f@x) (py2a95@add-subst py3f29@xrib py3f2f@x)) py3f23@xbody*) (cdr py3ec1@e*)) (append (map cons py3f27@xlab* py3f2b@xb*) py3ec2@r) (append (map cons py3f27@xlab* py3f2b@xb*) py3ec3@mr) py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?))))) py3f19@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3f17@t)))) (if (memv py3eeb@t '(begin)) (let ((py3f31@t py3ed5@e)) (let ((py3f33@ls/false (py2cb0@syntax-dispatch py3f31@t '(_ . each-any)))) (if py3f33@ls/false (apply (lambda (py3f35@x*) (py2d08@chi-body* (append py3f35@x* (cdr py3ec1@e*)) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?)) py3f33@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3f31@t)))) (if (memv py3eeb@t '(global-macro global-macro!)) (py2d08@chi-body* (cons (py2a95@add-subst py3ec9@rib (py2ccc@chi-global-macro py3ee4@value py3ed5@e)) (cdr py3ec1@e*)) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?) (if (memv py3eeb@t '(local-macro local-macro!)) (py2d08@chi-body* (cons (py2a95@add-subst py3ec9@rib (py2cca@chi-local-macro py3ee4@value py3ed5@e)) (cdr py3ec1@e*)) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?) (if (memv py3eeb@t '(macro macro!)) (py2d08@chi-body* (cons (py2a95@add-subst py3ec9@rib (py2cc8@chi-macro py3ee4@value py3ed5@e)) (cdr py3ec1@e*)) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?) (if (memv py3eeb@t '(module)) (call-with-values (lambda () (py2d06@chi-internal-module py3ed5@e py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd*)) (lambda (py3f47@py3f38 py3f48@py3f3a py3f49@py3f3c py3f4a@py3f3e py3f4b@py3f40 py3f4c@py3f42 py3f4d@py3f44 py3f4e@py3f46) (let ((py3f57@kwd* py3f4e@py3f46) (py3f58@mod** py3f4d@py3f44) (py3f59@mr py3f4c@py3f42) (py3f5a@r py3f4b@py3f40) (py3f5b@m-exp-lab* py3f4a@py3f3e) (py3f5c@m-exp-id* py3f49@py3f3c) (py3f5d@rhs* py3f48@py3f3a) (py3f5e@lex* py3f47@py3f38)) (begin (vector-for-each (lambda (py3f67@id py3f68@lab) (py2a5f@extend-rib! py3ec9@rib py3f67@id py3f68@lab)) py3f5c@m-exp-id* py3f5b@m-exp-lab*) (py2d08@chi-body* (cdr py3ec1@e*) py3f5a@r py3f59@mr py3f5e@lex* py3f5d@rhs* py3f58@mod** py3f57@kwd* py3ec8@exp* py3ec9@rib py3eca@top?))))) (if (memv py3eeb@t '(library)) (begin (py2d72@library-expander (py2abd@stx->datum py3ed5@e)) (py2d08@chi-body* (cdr py3ec1@e*) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?)) (if (memv py3eeb@t '(export)) (let ((py3f6b@t py3ed5@e)) (let ((py3f6d@ls/false (py2cb0@syntax-dispatch py3f6b@t '(_ . each-any)))) (if py3f6d@ls/false (apply (lambda (py3f6f@exp-decl*) (py2d08@chi-body* (cdr py3ec1@e*) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* (append py3f6f@exp-decl* py3ec8@exp*) py3ec9@rib py3eca@top?)) py3f6d@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3f6b@t)))) (if (memv py3eeb@t '(import)) (let ((py3f72@module-import? '#f) (py3f74@module-import '#f) (py3f76@library-import '#f)) (begin (set! py3f72@module-import? (lambda (py3fc5@e) (let ((py3fc7@t py3fc5@e)) (let ((py3fc9@ls/false (py2cb0@syntax-dispatch py3fc7@t '(_ any)))) (if (and py3fc9@ls/false (apply (lambda (py3fcb@id) (py2aa9@id? py3fcb@id)) py3fc9@ls/false)) (apply (lambda (py3fcd@id) '#t) py3fc9@ls/false) (let ((py3fcf@t py3fc7@t)) (let ((py3fd1@ls/false (py2cb0@syntax-dispatch py3fcf@t '(_ . each-any)))) (if py3fd1@ls/false (apply (lambda (py3fd3@imp*) '#f) py3fd1@ls/false) (let ((py3fd5@t py3fcf@t)) (let ((py3fd7@ls/false (py2cb0@syntax-dispatch py3fd5@t '_))) (if py3fd7@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"malformed import form" py3fc5@e)) py3fd7@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3fd5@t)))))))))))) (set! py3f74@module-import (lambda (py3fa3@e py3fa4@r) (let ((py3fa7@t py3fa3@e)) (let ((py3fa9@ls/false (py2cb0@syntax-dispatch py3fa7@t '(_ any)))) (if (and py3fa9@ls/false (apply (lambda (py3fab@id) (py2aa9@id? py3fab@id)) py3fa9@ls/false)) (apply (lambda (py3fad@id) (call-with-values (lambda () (py2acb@syntax-type py3fad@id py3fa4@r)) (lambda (py3fb5@py3fb0 py3fb6@py3fb2 py3fb7@py3fb4) (let ((py3fbb@kwd py3fb7@py3fb4) (py3fbc@value py3fb6@py3fb2) (py3fbd@type py3fb5@py3fb0)) (let ((py3fc1@t py3fbd@type)) (if (memv py3fc1@t '($module)) (let ((py3fc3@iface py3fbc@value)) (values (py2d04@module-interface-exp-id* py3fc3@iface py3fad@id) (py2cfe@module-interface-exp-lab-vec py3fc3@iface))) (py2d90@syntax-violation '#f '"invalid import" py3fa3@e))))))) py3fa9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3fa7@t)))))) (set! py3f76@library-import (lambda (py3f87@e) (let ((py3f89@t py3f87@e)) (let ((py3f8b@ls/false (py2cb0@syntax-dispatch py3f89@t '(any . each-any)))) (if py3f8b@ls/false (apply (lambda (py3f8d@ctxt py3f8e@imp*) (call-with-values (lambda () (py2d12@parse-import-spec* (py2d96@syntax->datum py3f8e@imp*))) (lambda (py3f95@py3f92 py3f96@py3f94) (let ((py3f99@subst-labels py3f96@py3f94) (py3f9a@subst-names py3f95@py3f92)) (values (vector-map (lambda (py3f9d@name) (py2a89@datum->stx py3f8d@ctxt py3f9d@name)) py3f9a@subst-names) py3f99@subst-labels))))) py3f8b@ls/false) (let ((py3f9f@t py3f89@t)) (let ((py3fa1@ls/false (py2cb0@syntax-dispatch py3f9f@t '_))) (if py3fa1@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid import form" py3f87@e)) py3fa1@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py3f9f@t))))))))) (begin (call-with-values (lambda () (if (py3f72@module-import? py3ed5@e) (py3f74@module-import py3ed5@e py3ec2@r) (py3f76@library-import py3ed5@e))) (lambda (py3f7b@py3f78 py3f7c@py3f7a) (let ((py3f7f@lab* py3f7c@py3f7a) (py3f80@id* py3f7b@py3f78)) (vector-for-each (lambda (py3f83@id py3f84@lab) (py2a5f@extend-rib! py3ec9@rib py3f83@id py3f84@lab)) py3f80@id* py3f7f@lab*)))) (py2d08@chi-body* (cdr py3ec1@e*) py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?)))) (if py3eca@top? (py2d08@chi-body* (cdr py3ec1@e*) py3ec2@r py3ec3@mr (cons (py2a31@gen-lexical 'dummy) py3ec4@lex*) (cons (cons 'top-expr py3ed5@e) py3ec5@rhs*) py3ec6@mod** py3ee9@kwd* py3ec8@exp* py3ec9@rib py3eca@top?) (values py3ec1@e* py3ec2@r py3ec3@mr py3ec4@lex* py3ec5@rhs* py3ec6@mod** py3ee9@kwd* py3ec8@exp*)))))))))))))))))))))) (set! py47ae@py2d08@chi-body* py2d08@chi-body*) (set! py2d0a@expand-transformer (lambda (py3fd9@expr py3fda@r) (let ((py3fdd@rtc (py2d16@make-collector))) (let ((py3fdf@expanded-rhs (let ((py3fe9@py3fe2 py2d18@inv-collector) (py3fea@py3fe4 py2d1a@vis-collector) (py3feb@py3fe6 py3fdd@rtc) (py3fec@py3fe8 (lambda (py3ff1@x) (values)))) (let ((py3ff3@swap (lambda () (begin (let ((py3ff5@t (py3fe9@py3fe2))) (begin (py3fe9@py3fe2 py3feb@py3fe6) (set! py3feb@py3fe6 py3ff5@t))) (let ((py3ff7@t (py3fea@py3fe4))) (begin (py3fea@py3fe4 py3fec@py3fe8) (set! py3fec@py3fe8 py3ff7@t))))))) (dynamic-wind py3ff3@swap (lambda () (py2cd2@chi-expr py3fd9@expr py3fda@r py3fda@r)) py3ff3@swap))))) (begin (for-each (let ((py3ff9@mark-visit (py2d1a@vis-collector))) (lambda (py3ffb@x) (begin (py28bf@py270d@invoke-library py3ffb@x) (py3ff9@mark-visit py3ffb@x)))) (py3fdd@rtc)) py3fdf@expanded-rhs))))) (set! py47af@py2d0a@expand-transformer py2d0a@expand-transformer) (set! py2d0c@parse-exports (lambda (py3ffd@exp*) (let py4005@f ((py3fff@exp* py3ffd@exp*) (py4000@int* '()) (py4001@ext* '())) (if (null? py3fff@exp*) (begin (if (not (py2ab1@valid-bound-ids? py4001@ext*)) (py2d90@syntax-violation 'export '"invalid exports" (py2ce6@find-dups py4001@ext*)) (void)) (values (map py2d96@syntax->datum py4001@ext*) py4000@int*)) (let ((py4007@t (car py3fff@exp*))) (let ((py4009@ls/false (py2cb0@syntax-dispatch py4007@t '(any . #(each (any any)))))) (if py4009@ls/false (apply (lambda (py400b@rename py400c@i* py400d@e*) (begin (if (not (and (eq? (py2d96@syntax->datum py400b@rename) 'rename) (for-all py2aa9@id? py400c@i*) (for-all py2aa9@id? py400d@e*))) (py2d90@syntax-violation 'export '"invalid export specifier" (car py3fff@exp*)) (void)) (py4005@f (cdr py3fff@exp*) (append py400c@i* py4000@int*) (append py400d@e* py4001@ext*)))) py4009@ls/false) (let ((py4011@t py4007@t)) (let ((py4013@ls/false (py2cb0@syntax-dispatch py4011@t 'any))) (if py4013@ls/false (apply (lambda (py4015@ie) (begin (if (not (py2aa9@id? py4015@ie)) (py2d90@syntax-violation 'export '"invalid export" py4015@ie) (void)) (py4005@f (cdr py3fff@exp*) (cons py4015@ie py4000@int*) (cons py4015@ie py4001@ext*)))) py4013@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4011@t))))))))))) (set! py47b0@py2d0c@parse-exports py2d0c@parse-exports) (set! py2d0e@parse-library-name (lambda (py4017@spec) (let ((py401a@parse '#f)) (begin (set! py401a@parse (lambda (py4027@x) (let ((py4029@t py4027@x)) (let ((py402b@ls/false (py2cb0@syntax-dispatch py4029@t '(each-any)))) (if (and py402b@ls/false (apply (lambda (py402d@v*) (for-all (lambda (py402f@x) (let ((py4031@x (py2d96@syntax->datum py402f@x))) (and (integer? py4031@x) (exact? py4031@x)))) py402d@v*)) py402b@ls/false)) (apply (lambda (py4033@v*) (values '() (map py2d96@syntax->datum py4033@v*))) py402b@ls/false) (let ((py4035@t py4029@t)) (let ((py4037@ls/false (py2cb0@syntax-dispatch py4035@t '(any . any)))) (if (and py4037@ls/false (apply (lambda (py4039@x py403a@rest) (symbol? (py2d96@syntax->datum py4039@x))) py4037@ls/false)) (apply (lambda (py403d@x py403e@rest) (call-with-values (lambda () (py401a@parse py403e@rest)) (lambda (py4045@py4042 py4046@py4044) (let ((py4049@v* py4046@py4044) (py404a@x* py4045@py4042)) (values (cons (py2d96@syntax->datum py403d@x) py404a@x*) py4049@v*))))) py4037@ls/false) (let ((py404d@t py4035@t)) (let ((py404f@ls/false (py2cb0@syntax-dispatch py404d@t '()))) (if py404f@ls/false (apply (lambda () (values '() '())) py404f@ls/false) (let ((py4051@t py404d@t)) (let ((py4053@ls/false (py2cb0@syntax-dispatch py4051@t '_))) (if py4053@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid library name" py4017@spec)) py4053@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4051@t))))))))))))))) (call-with-values (lambda () (py401a@parse py4017@spec)) (lambda (py401f@py401c py4020@py401e) (let ((py4023@ver* py4020@py401e) (py4024@name* py401f@py401c)) (begin (if (null? py4024@name*) (py2d90@syntax-violation '#f '"empty library name" py4017@spec) (void)) (values py4024@name* py4023@ver*))))))))) (set! py47b1@py2d0e@parse-library-name py2d0e@parse-library-name) (set! py2d10@parse-library (lambda (py4055@e) (let ((py4057@t py4055@e)) (let ((py4059@ls/false (py2cb0@syntax-dispatch py4057@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and py4059@ls/false (apply (lambda (py405b@library py405c@name* py405d@export py405e@exp* py405f@import py4060@imp* py4061@b*) (and (eq? (py2d96@syntax->datum py405d@export) 'export) (eq? (py2d96@syntax->datum py405f@import) 'import) (eq? (py2d96@syntax->datum py405b@library) 'library))) py4059@ls/false)) (apply (lambda (py4069@library py406a@name* py406b@export py406c@exp* py406d@import py406e@imp* py406f@b*) (values py406a@name* py406c@exp* py406e@imp* py406f@b*)) py4059@ls/false) (let ((py4077@t py4057@t)) (let ((py4079@ls/false (py2cb0@syntax-dispatch py4077@t '_))) (if py4079@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"malformed library" py4055@e)) py4079@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4077@t))))))))) (set! py47b2@py2d10@parse-library py2d10@parse-library) (set! py2d12@parse-import-spec* (let ((py407c@idsyn? '#f) (py407e@dup-error '#f) (py4080@merge-substs '#f) (py4082@exclude* '#f) (py4084@find* '#f) (py4086@rem* '#f) (py4088@remove-dups '#f) (py408a@parse-library-name '#f) (py408c@import-library '#f) (py408e@get-import '#f) (py4090@add-imports! '#f)) (begin (set! py407c@idsyn? (lambda (py4285@x) (symbol? (py2d96@syntax->datum py4285@x)))) (set! py407e@dup-error (lambda (py4283@name) (py2d90@syntax-violation 'import '"two imports with different bindings" py4283@name))) (set! py4080@merge-substs (lambda (py4271@s py4272@subst) (let ((py4276@insert-to-subst '#f)) (begin (set! py4276@insert-to-subst (lambda (py4277@a py4278@subst) (let ((py427b@name (car py4277@a)) (py427c@label (cdr py4277@a))) (let ((py427f@t (assq py427b@name py4278@subst))) (if py427f@t ((lambda (py4281@x) (if (eq? (cdr py4281@x) py427c@label) py4278@subst (py407e@dup-error py427b@name))) py427f@t) (cons py4277@a py4278@subst)))))) (if (null? py4271@s) py4272@subst (py4276@insert-to-subst (car py4271@s) (py4080@merge-substs (cdr py4271@s) py4272@subst))))))) (set! py4082@exclude* (lambda (py4241@sym* py4242@subst) (let ((py4246@exclude '#f)) (begin (set! py4246@exclude (lambda (py425f@sym py4260@subst) (if (null? py4260@subst) (py2d90@syntax-violation 'import '"cannot rename unbound identifier" py425f@sym) (if (eq? py425f@sym (caar py4260@subst)) (values (cdar py4260@subst) (cdr py4260@subst)) (let ((py4263@a (car py4260@subst))) (call-with-values (lambda () (py4246@exclude py425f@sym (cdr py4260@subst))) (lambda (py4269@py4266 py426a@py4268) (let ((py426d@subst py426a@py4268) (py426e@old py4269@py4266)) (values py426e@old (cons py4263@a py426d@subst)))))))))) (if (null? py4241@sym*) (values '() py4242@subst) (call-with-values (lambda () (py4246@exclude (car py4241@sym*) py4242@subst)) (lambda (py424b@py4248 py424c@py424a) (let ((py424f@subst py424c@py424a) (py4250@old py424b@py4248)) (call-with-values (lambda () (py4082@exclude* (cdr py4241@sym*) py424f@subst)) (lambda (py4257@py4254 py4258@py4256) (let ((py425b@subst py4258@py4256) (py425c@old* py4257@py4254)) (values (cons py4250@old py425c@old*) py425b@subst)))))))))))) (set! py4084@find* (lambda (py4239@sym* py423a@subst) (map (lambda (py423d@x) (let ((py423f@t (assq py423d@x py423a@subst))) (if py423f@t (cdr py423f@t) (py2d90@syntax-violation 'import '"cannot find identifier" py423d@x)))) py4239@sym*))) (set! py4086@rem* (lambda (py4231@sym* py4232@subst) (let py4237@f ((py4235@subst py4232@subst)) (if (null? py4235@subst) '() (if (memq (caar py4235@subst) py4231@sym*) (py4237@f (cdr py4235@subst)) (cons (car py4235@subst) (py4237@f (cdr py4235@subst)))))))) (set! py4088@remove-dups (lambda (py422f@ls) (if (null? py422f@ls) '() (if (memq (car py422f@ls) (cdr py422f@ls)) (py4088@remove-dups (cdr py422f@ls)) (cons (car py422f@ls) (py4088@remove-dups (cdr py422f@ls))))))) (set! py408a@parse-library-name (lambda (py4147@spec) (let ((py414a@subversion? '#f) (py414c@subversion-pred '#f) (py414e@version-pred '#f)) (begin (set! py414a@subversion? (lambda (py422b@x) (let ((py422d@x (py2d96@syntax->datum py422b@x))) (and (integer? py422d@x) (exact? py422d@x) (>= py422d@x '0))))) (set! py414c@subversion-pred (lambda (py41cb@x*) (let ((py41cd@t py41cb@x*)) (let ((py41cf@ls/false (py2cb0@syntax-dispatch py41cd@t 'any))) (if (and py41cf@ls/false (apply (lambda (py41d1@n) (py414a@subversion? py41d1@n)) py41cf@ls/false)) (apply (lambda (py41d3@n) (lambda (py41d5@x) (= py41d5@x (py2d96@syntax->datum py41d3@n)))) py41cf@ls/false) (let ((py41d7@t py41cd@t)) (let ((py41d9@ls/false (py2cb0@syntax-dispatch py41d7@t '(any . each-any)))) (if (and py41d9@ls/false (apply (lambda (py41db@p? py41dc@sub*) (eq? (py2d96@syntax->datum py41db@p?) 'and)) py41d9@ls/false)) (apply (lambda (py41df@p? py41e0@sub*) (let ((py41e3@p* (map py414c@subversion-pred py41e0@sub*))) (lambda (py41e5@x) (for-all (lambda (py41e7@p) (py41e7@p py41e5@x)) py41e3@p*)))) py41d9@ls/false) (let ((py41e9@t py41d7@t)) (let ((py41eb@ls/false (py2cb0@syntax-dispatch py41e9@t '(any . each-any)))) (if (and py41eb@ls/false (apply (lambda (py41ed@p? py41ee@sub*) (eq? (py2d96@syntax->datum py41ed@p?) 'or)) py41eb@ls/false)) (apply (lambda (py41f1@p? py41f2@sub*) (let ((py41f5@p* (map py414c@subversion-pred py41f2@sub*))) (lambda (py41f7@x) (exists (lambda (py41f9@p) (py41f9@p py41f7@x)) py41f5@p*)))) py41eb@ls/false) (let ((py41fb@t py41e9@t)) (let ((py41fd@ls/false (py2cb0@syntax-dispatch py41fb@t '(any any)))) (if (and py41fd@ls/false (apply (lambda (py41ff@p? py4200@sub) (eq? (py2d96@syntax->datum py41ff@p?) 'not)) py41fd@ls/false)) (apply (lambda (py4203@p? py4204@sub) (let ((py4207@p (py414c@subversion-pred py4204@sub))) (lambda (py4209@x) (not (py4207@p py4209@x))))) py41fd@ls/false) (let ((py420b@t py41fb@t)) (let ((py420d@ls/false (py2cb0@syntax-dispatch py420b@t '(any any)))) (if (and py420d@ls/false (apply (lambda (py420f@p? py4210@n) (and (eq? (py2d96@syntax->datum py420f@p?) '<=) (py414a@subversion? py4210@n))) py420d@ls/false)) (apply (lambda (py4213@p? py4214@n) (lambda (py4217@x) (<= py4217@x (py2d96@syntax->datum py4214@n)))) py420d@ls/false) (let ((py4219@t py420b@t)) (let ((py421b@ls/false (py2cb0@syntax-dispatch py4219@t '(any any)))) (if (and py421b@ls/false (apply (lambda (py421d@p? py421e@n) (and (eq? (py2d96@syntax->datum py421d@p?) '>=) (py414a@subversion? py421e@n))) py421b@ls/false)) (apply (lambda (py4221@p? py4222@n) (lambda (py4225@x) (>= py4225@x (py2d96@syntax->datum py4222@n)))) py421b@ls/false) (let ((py4227@t py4219@t)) (let ((py4229@ls/false (py2cb0@syntax-dispatch py4227@t '_))) (if py4229@ls/false (apply (lambda () (py2d90@syntax-violation 'import '"invalid sub-version spec" py4147@spec py41cb@x*)) py4229@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4227@t)))))))))))))))))))))))) (set! py414e@version-pred (lambda (py417b@x*) (let ((py417d@t py417b@x*)) (let ((py417f@ls/false (py2cb0@syntax-dispatch py417d@t '()))) (if py417f@ls/false (apply (lambda () (lambda (py4181@x) '#t)) py417f@ls/false) (let ((py4183@t py417d@t)) (let ((py4185@ls/false (py2cb0@syntax-dispatch py4183@t '(any . each-any)))) (if (and py4185@ls/false (apply (lambda (py4187@c py4188@ver*) (eq? (py2d96@syntax->datum py4187@c) 'and)) py4185@ls/false)) (apply (lambda (py418b@c py418c@ver*) (let ((py418f@p* (map py414e@version-pred py418c@ver*))) (lambda (py4191@x) (for-all (lambda (py4193@p) (py4193@p py4191@x)) py418f@p*)))) py4185@ls/false) (let ((py4195@t py4183@t)) (let ((py4197@ls/false (py2cb0@syntax-dispatch py4195@t '(any . each-any)))) (if (and py4197@ls/false (apply (lambda (py4199@c py419a@ver*) (eq? (py2d96@syntax->datum py4199@c) 'or)) py4197@ls/false)) (apply (lambda (py419d@c py419e@ver*) (let ((py41a1@p* (map py414e@version-pred py419e@ver*))) (lambda (py41a3@x) (exists (lambda (py41a5@p) (py41a5@p py41a3@x)) py41a1@p*)))) py4197@ls/false) (let ((py41a7@t py4195@t)) (let ((py41a9@ls/false (py2cb0@syntax-dispatch py41a7@t '(any any)))) (if (and py41a9@ls/false (apply (lambda (py41ab@c py41ac@ver) (eq? (py2d96@syntax->datum py41ab@c) 'not)) py41a9@ls/false)) (apply (lambda (py41af@c py41b0@ver) (let ((py41b3@p (py414e@version-pred py41b0@ver))) (lambda (py41b5@x) (not (py41b3@p py41b5@x))))) py41a9@ls/false) (let ((py41b7@t py41a7@t)) (let ((py41b9@ls/false (py2cb0@syntax-dispatch py41b7@t 'each-any))) (if py41b9@ls/false (apply (lambda (py41bb@sub*) (let ((py41bd@p* (map py414c@subversion-pred py41bb@sub*))) (lambda (py41bf@x) (let py41c5@f ((py41c1@p* py41bd@p*) (py41c2@x py41bf@x)) (if (null? py41c1@p*) '#t (if (null? py41c2@x) '#f (and ((car py41c1@p*) (car py41c2@x)) (py41c5@f (cdr py41c1@p*) (cdr py41c2@x))))))))) py41b9@ls/false) (let ((py41c7@t py41b7@t)) (let ((py41c9@ls/false (py2cb0@syntax-dispatch py41c7@t '_))) (if py41c9@ls/false (apply (lambda () (py2d90@syntax-violation 'import '"invalid version spec" py4147@spec py417b@x*)) py41c9@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py41c7@t))))))))))))))))))))) (let py4151@f ((py414f@x py4147@spec)) (let ((py4153@t py414f@x)) (let ((py4155@ls/false (py2cb0@syntax-dispatch py4153@t '(each-any)))) (if py4155@ls/false (apply (lambda (py4157@version-spec*) (values '() (py414e@version-pred py4157@version-spec*))) py4155@ls/false) (let ((py4159@t py4153@t)) (let ((py415b@ls/false (py2cb0@syntax-dispatch py4159@t '(any . any)))) (if (and py415b@ls/false (apply (lambda (py415d@x py415e@x*) (py407c@idsyn? py415d@x)) py415b@ls/false)) (apply (lambda (py4161@x py4162@x*) (call-with-values (lambda () (py4151@f py4162@x*)) (lambda (py4169@py4166 py416a@py4168) (let ((py416d@pred py416a@py4168) (py416e@name py4169@py4166)) (values (cons (py2d96@syntax->datum py4161@x) py416e@name) py416d@pred))))) py415b@ls/false) (let ((py4171@t py4159@t)) (let ((py4173@ls/false (py2cb0@syntax-dispatch py4171@t '()))) (if py4173@ls/false (apply (lambda () (values '() (lambda (py4175@x) '#t))) py4173@ls/false) (let ((py4177@t py4171@t)) (let ((py4179@ls/false (py2cb0@syntax-dispatch py4177@t '_))) (if py4179@ls/false (apply (lambda () (py2d90@syntax-violation '#f '"invalid import spec" py4147@spec)) py4179@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4177@t)))))))))))))))))) (set! py408c@import-library (lambda (py4137@spec*) (call-with-values (lambda () (py408a@parse-library-name py4137@spec*)) (lambda (py413d@py413a py413e@py413c) (let ((py4141@pred py413e@py413c) (py4142@name py413d@py413a)) (begin (if (null? py4142@name) (py2d90@syntax-violation 'import '"empty library name" py4137@spec*) (void)) (let ((py4145@lib (py28b8@py26ff@find-library-by-name py4142@name))) (begin (if (not py4145@lib) (py2d90@syntax-violation 'import '"cannot find library with required name" py4142@name) (void)) (if (not (py4141@pred (py2892@py26b3@library-version py4145@lib))) (py2d90@syntax-violation 'import '"library does not satisfy version specification" py4137@spec* py4145@lib) (void)) ((py2d1c@imp-collector) py4145@lib) (py289a@py26c3@library-subst py4145@lib))))))))) (set! py408e@get-import (lambda (py40a9@spec) (let ((py40ab@t py40a9@spec)) (let ((py40ad@ls/false (py2cb0@syntax-dispatch py40ab@t '(any . each-any)))) (if (and py40ad@ls/false (apply (lambda (py40af@x py40b0@x*) (not (memq (py2d96@syntax->datum py40af@x) '(for rename except only prefix library)))) py40ad@ls/false)) (apply (lambda (py40b3@x py40b4@x*) (py408c@import-library (cons py40b3@x py40b4@x*))) py40ad@ls/false) (let ((py40b7@t py40ab@t)) (let ((py40b9@ls/false (py2cb0@syntax-dispatch py40b7@t '(any any . #(each (any any)))))) (if (and py40b9@ls/false (apply (lambda (py40bb@rename py40bc@isp py40bd@old* py40be@new*) (and (eq? (py2d96@syntax->datum py40bb@rename) 'rename) (for-all py407c@idsyn? py40bd@old*) (for-all py407c@idsyn? py40be@new*))) py40b9@ls/false)) (apply (lambda (py40c3@rename py40c4@isp py40c5@old* py40c6@new*) (let ((py40cb@subst (py408e@get-import py40c4@isp)) (py40cc@old* (map py2d96@syntax->datum py40c5@old*)) (py40cd@new* (map py2d96@syntax->datum py40c6@new*))) (let ((py40d1@old-label* (py4084@find* py40cc@old* py40cb@subst))) (let ((py40d3@subst (py4086@rem* py40cc@old* py40cb@subst))) (py4080@merge-substs (map cons py40cd@new* py40d1@old-label*) py40d3@subst))))) py40b9@ls/false) (let ((py40d5@t py40b7@t)) (let ((py40d7@ls/false (py2cb0@syntax-dispatch py40d5@t '(any any . each-any)))) (if (and py40d7@ls/false (apply (lambda (py40d9@except py40da@isp py40db@sym*) (and (eq? (py2d96@syntax->datum py40d9@except) 'except) (for-all py407c@idsyn? py40db@sym*))) py40d7@ls/false)) (apply (lambda (py40df@except py40e0@isp py40e1@sym*) (let ((py40e5@subst (py408e@get-import py40e0@isp))) (py4086@rem* (map py2d96@syntax->datum py40e1@sym*) py40e5@subst))) py40d7@ls/false) (let ((py40e7@t py40d5@t)) (let ((py40e9@ls/false (py2cb0@syntax-dispatch py40e7@t '(any any . each-any)))) (if (and py40e9@ls/false (apply (lambda (py40eb@only py40ec@isp py40ed@sym*) (and (eq? (py2d96@syntax->datum py40eb@only) 'only) (for-all py407c@idsyn? py40ed@sym*))) py40e9@ls/false)) (apply (lambda (py40f1@only py40f2@isp py40f3@sym*) (let ((py40f7@subst (py408e@get-import py40f2@isp)) (py40f8@sym* (map py2d96@syntax->datum py40f3@sym*))) (let ((py40fb@sym* (py4088@remove-dups py40f8@sym*))) (let ((py40fd@lab* (py4084@find* py40fb@sym* py40f7@subst))) (map cons py40fb@sym* py40fd@lab*))))) py40e9@ls/false) (let ((py40ff@t py40e7@t)) (let ((py4101@ls/false (py2cb0@syntax-dispatch py40ff@t '(any any any)))) (if (and py4101@ls/false (apply (lambda (py4103@prefix py4104@isp py4105@p) (and (eq? (py2d96@syntax->datum py4103@prefix) 'prefix) (py407c@idsyn? py4105@p))) py4101@ls/false)) (apply (lambda (py4109@prefix py410a@isp py410b@p) (let ((py410f@subst (py408e@get-import py410a@isp)) (py4110@prefix (symbol->string (py2d96@syntax->datum py410b@p)))) (map (lambda (py4113@x) (cons (string->symbol (string-append py4110@prefix (symbol->string (car py4113@x)))) (cdr py4113@x))) py410f@subst))) py4101@ls/false) (let ((py4115@t py40ff@t)) (let ((py4117@ls/false (py2cb0@syntax-dispatch py4115@t '(any each-any)))) (if (and py4117@ls/false (apply (lambda (py4119@library py411a@spec*) (eq? (py2d96@syntax->datum py4119@library) 'library)) py4117@ls/false)) (apply (lambda (py411d@library py411e@spec*) (py408c@import-library py411e@spec*)) py4117@ls/false) (let ((py4121@t py4115@t)) (let ((py4123@ls/false (py2cb0@syntax-dispatch py4121@t '(any any . any)))) (if (and py4123@ls/false (apply (lambda (py4125@for py4126@isp py4127@rest) (eq? (py2d96@syntax->datum py4125@for) 'for)) py4123@ls/false)) (apply (lambda (py412b@for py412c@isp py412d@rest) (py408e@get-import py412c@isp)) py4123@ls/false) (let ((py4131@t py4121@t)) (let ((py4133@ls/false (py2cb0@syntax-dispatch py4131@t 'any))) (if py4133@ls/false (apply (lambda (py4135@spec) (py2d90@syntax-violation 'import '"invalid import spec" py4135@spec)) py4133@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4131@t))))))))))))))))))))))))))) (set! py4090@add-imports! (lambda (py4099@imp py409a@h) (let ((py409d@subst (py408e@get-import py4099@imp))) (for-each (lambda (py409f@x) (let ((py40a1@name (car py409f@x)) (py40a2@label (cdr py409f@x))) (let ((py40a5@t (hashtable-ref py409a@h py40a1@name '#f))) (if py40a5@t ((lambda (py40a7@l) (if (not (eq? py40a7@l py40a2@label)) (py407e@dup-error py40a1@name) (void))) py40a5@t) (hashtable-set! py409a@h py40a1@name py40a2@label))))) py409d@subst)))) (lambda (py4091@imp*) (let py4097@f ((py4093@imp* py4091@imp*) (py4094@h (make-eq-hashtable))) (if (null? py4093@imp*) (hashtable-entries py4094@h) (begin (py4090@add-imports! (car py4093@imp*) py4094@h) (py4097@f (cdr py4093@imp*) py4094@h)))))))) (set! py47b3@py2d12@parse-import-spec* py2d12@parse-import-spec*) (set! py2d14@make-top-rib (lambda (py4287@names py4288@labels) (let ((py428b@rib (py2a5d@make-empty-rib))) (begin (vector-for-each (lambda (py428d@name py428e@label) (begin (if (not (symbol? py428d@name)) (error 'make-top-rib '"BUG: not a symbol" py428d@name) (void)) (py2a61@extend-rib/nc! py428b@rib (make-simple-struct 'stx '5 (list py428d@name py2a2d@top-mark* '() '())) py428e@label))) py4287@names py4288@labels) py428b@rib)))) (set! py47b4@py2d14@make-top-rib py2d14@make-top-rib) (set! py2d16@make-collector (lambda () (let ((py4291@ls '())) (lambda py4295 (let ((py4296 (length py4295))) (if (= py4296 '0) (apply (lambda () py4291@ls) py4295) (if (= py4296 '1) (apply (lambda (py4293@x) (set! py4291@ls (py2a26@set-cons py4293@x py4291@ls))) py4295) (error 'apply '"invalid arg count")))))))) (set! py47b5@py2d16@make-collector py2d16@make-collector) (set! py2d18@inv-collector (py25f3@py24d2@make-parameter (lambda py4297@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (py4299@x) (begin (if (not (procedure? py4299@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" py4299@x) (void)) py4299@x)))) (set! py47b6@py2d18@inv-collector py2d18@inv-collector) (set! py2d1a@vis-collector (py25f3@py24d2@make-parameter (lambda py429b@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (py429d@x) (begin (if (not (procedure? py429d@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" py429d@x) (void)) py429d@x)))) (set! py47b7@py2d1a@vis-collector py2d1a@vis-collector) (set! py2d1c@imp-collector (py25f3@py24d2@make-parameter (lambda py429f@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (py42a1@x) (begin (if (not (procedure? py42a1@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" py42a1@x) (void)) py42a1@x)))) (set! py47b8@py2d1c@imp-collector py2d1c@imp-collector) (set! py2d1e@chi-library-internal (lambda (py42a3@e* py42a4@rib py42a5@top?) (call-with-values (lambda () (py2d08@chi-body* py42a3@e* '() '() '() '() '() '() '() py42a4@rib py42a5@top?)) (lambda (py42b9@py42aa py42ba@py42ac py42bb@py42ae py42bc@py42b0 py42bd@py42b2 py42be@py42b4 py42bf@py42b6 py42c0@py42b8) (let ((py42c9@exp* py42c0@py42b8) (py42ca@_kwd* py42bf@py42b6) (py42cb@mod** py42be@py42b4) (py42cc@rhs* py42bd@py42b2) (py42cd@lex* py42bc@py42b0) (py42ce@mr py42bb@py42ae) (py42cf@r py42ba@py42ac) (py42d0@e* py42b9@py42aa)) (values (append (apply append (reverse py42cb@mod**)) py42d0@e*) py42cf@r py42ce@mr (reverse py42cd@lex*) (reverse py42cc@rhs*) py42c9@exp*)))))) (set! py47b9@py2d1e@chi-library-internal py2d1e@chi-library-internal) (set! py2d20@chi-interaction-expr (lambda (py42d9@e py42da@rib py42db@r) (call-with-values (lambda () (py2d08@chi-body* (list py42d9@e) py42db@r py42db@r '() '() '() '() '() py42da@rib '#t)) (lambda (py42ef@py42e0 py42f0@py42e2 py42f1@py42e4 py42f2@py42e6 py42f3@py42e8 py42f4@py42ea py42f5@py42ec py42f6@py42ee) (let ((py42ff@_exp* py42f6@py42ee) (py4300@_kwd* py42f5@py42ec) (py4301@mod** py42f4@py42ea) (py4302@rhs* py42f3@py42e8) (py4303@lex* py42f2@py42e6) (py4304@mr py42f1@py42e4) (py4305@r py42f0@py42e2) (py4306@e* py42ef@py42e0)) (let ((py430f@e* (py2ce0@expand-interaction-rhs*/init* (reverse py4303@lex*) (reverse py4302@rhs*) (append (apply append (reverse py4301@mod**)) py4306@e*) py4305@r py4304@mr))) (let ((py4311@e (if (null? py430f@e*) (py2a0f@py296a@build-void) (if (null? (cdr py430f@e*)) (car py430f@e*) (py2a0e@py2968@build-sequence '#f py430f@e*))))) (values py4311@e py4305@r)))))))) (set! py47ba@py2d20@chi-interaction-expr py2d20@chi-interaction-expr) (set! py2d22@library-body-expander (lambda (py4313@name py4314@main-exp* py4315@imp* py4316@b* py4317@top?) (let ((py431e@itc '#f)) (begin (set! py431e@itc (py2d16@make-collector)) (let ((py4327@py4320 py2d1c@imp-collector) (py4328@py4322 py2da0@top-level-context) (py4329@py4324 py431e@itc) (py432a@py4326 '#f)) (let ((py432f@swap (lambda () (begin (let ((py4331@t (py4327@py4320))) (begin (py4327@py4320 py4329@py4324) (set! py4329@py4324 py4331@t))) (let ((py4333@t (py4328@py4322))) (begin (py4328@py4322 py432a@py4326) (set! py432a@py4326 py4333@t))))))) (dynamic-wind py432f@swap (lambda () (call-with-values (lambda () (py2d12@parse-import-spec* py4315@imp*)) (lambda (py4339@py4336 py433a@py4338) (let ((py433d@subst-labels py433a@py4338) (py433e@subst-names py4339@py4336)) (let ((py4341@rib (py2d14@make-top-rib py433e@subst-names py433d@subst-labels))) (let ((py4344@wrap '#f)) (begin (set! py4344@wrap (lambda (py43bf@x) (make-simple-struct 'stx '5 (list py43bf@x py2a2d@top-mark* (list py4341@rib) '())))) (let ((py4345@b* (map py4344@wrap py4316@b*)) (py4346@main-exp* (map py4344@wrap py4314@main-exp*)) (py4347@rtc (py2d16@make-collector)) (py4348@vtc (py2d16@make-collector))) (let ((py4355@py434e py2d18@inv-collector) (py4356@py4350 py2d1a@vis-collector) (py4357@py4352 py4347@rtc) (py4358@py4354 py4348@vtc)) (let ((py435d@swap (lambda () (begin (let ((py435f@t (py4355@py434e))) (begin (py4355@py434e py4357@py4352) (set! py4357@py4352 py435f@t))) (let ((py4361@t (py4356@py4350))) (begin (py4356@py4350 py4358@py4354) (set! py4358@py4354 py4361@t))))))) (dynamic-wind py435d@swap (lambda () (call-with-values (lambda () (py2d1e@chi-library-internal py4345@b* py4341@rib py4317@top?)) (lambda (py436f@py4364 py4370@py4366 py4371@py4368 py4372@py436a py4373@py436c py4374@py436e) (let ((py437b@internal-exp* py4374@py436e) (py437c@rhs* py4373@py436c) (py437d@lex* py4372@py436a) (py437e@mr py4371@py4368) (py437f@r py4370@py4366) (py4380@init* py436f@py4364)) (call-with-values (lambda () (py2d0c@parse-exports (append py4346@main-exp* py437b@internal-exp*))) (lambda (py438b@py4388 py438c@py438a) (let ((py438f@exp-id* py438c@py438a) (py4390@exp-name* py438b@py4388)) (begin (py2a65@seal-rib! py4341@rib) (let ((py4393@init* (py2cce@chi-expr* py4380@init* py437f@r py437e@mr))) (let ((py4395@rhs* (py2ce2@chi-rhs* py437c@rhs* py437f@r py437e@mr))) (begin (py2a67@unseal-rib! py4341@rib) (let ((py4397@loc* (map py2a33@gen-global py437d@lex*)) (py4398@export-subst (py2d7a@make-export-subst py4390@exp-name* py438f@exp-id*))) (let ((py439c@errstr '#f)) (begin (set! py439c@errstr '"attempt to export mutated variable") (call-with-values (lambda () (py2d7c@make-export-env/macros py437d@lex* py4397@loc* py437f@r)) (lambda (py43a3@py439e py43a4@py43a0 py43a5@py43a2) (let ((py43a9@macro* py43a5@py43a2) (py43aa@global* py43a4@py43a0) (py43ab@export-env py43a3@py439e)) (begin (for-each (lambda (py43af@s) (let ((py43b1@name (car py43af@s)) (py43b2@label (cdr py43af@s))) (let ((py43b5@p (assq py43b2@label py43ab@export-env))) (if py43b5@p (let ((py43b7@b (cdr py43b5@p))) (let ((py43b9@type (car py43b7@b))) (if (eq? py43b9@type 'mutable) (py2d90@syntax-violation 'export py439c@errstr py43b1@name) (void)))) (void))))) py4398@export-subst) (let ((py43bb@invoke-body (py2a14@py2974@build-library-letrec* '#f py4313@name py437d@lex* py4397@loc* py4395@rhs* (if (null? py4393@init*) (py2a0f@py296a@build-void) (py2a0e@py2968@build-sequence '#f py4393@init*)))) (py43bc@invoke-definitions (map py2a0b@py28c7@build-global-define (map cdr py43aa@global*)))) (values (py431e@itc) (py4347@rtc) (py4348@vtc) (py2a0e@py2968@build-sequence '#f (append py43bc@invoke-definitions (list py43bb@invoke-body))) py43a9@macro* py4398@export-subst py43ab@export-env)))))))))))))))))))) py435d@swap))))))))))) py432f@swap))))))) (set! py47bb@py2d22@library-body-expander py2d22@library-body-expander) (set! py2d24@core-library-expander (lambda (py43c1@e py43c2@verify-name) (call-with-values (lambda () (py2d10@parse-library py43c1@e)) (lambda (py43cd@py43c6 py43ce@py43c8 py43cf@py43ca py43d0@py43cc) (let ((py43d5@b* py43d0@py43cc) (py43d6@imp* py43cf@py43ca) (py43d7@exp* py43ce@py43c8) (py43d8@name* py43cd@py43c6)) (call-with-values (lambda () (py2d0e@parse-library-name py43d8@name*)) (lambda (py43e1@py43de py43e2@py43e0) (let ((py43e5@ver py43e2@py43e0) (py43e6@name py43e1@py43de)) (begin (py43c2@verify-name py43e6@name) (call-with-values (lambda () (py2d22@library-body-expander py43e6@name py43d7@exp* py43d6@imp* py43d5@b* '#f)) (lambda (py43f7@py43ea py43f8@py43ec py43f9@py43ee py43fa@py43f0 py43fb@py43f2 py43fc@py43f4 py43fd@py43f6) (let ((py4405@export-env py43fd@py43f6) (py4406@export-subst py43fc@py43f4) (py4407@visit-code py43fb@py43f2) (py4408@invoke-code py43fa@py43f0) (py4409@visit-req* py43f9@py43ee) (py440a@invoke-req* py43f8@py43ec) (py440b@imp* py43f7@py43ea)) (values py43e6@name py43e5@ver py440b@imp* py440a@invoke-req* py4409@visit-req* py4408@invoke-code py4407@visit-code py4406@export-subst py4405@export-env))))))))))))) (set! py47bc@py2d24@core-library-expander py2d24@core-library-expander) (set! py2d26@parse-top-level-program (lambda (py4413@e*) (let ((py4415@t py4413@e*)) (let ((py4417@ls/false (py2cb0@syntax-dispatch py4415@t '((any . each-any) . each-any)))) (if (and py4417@ls/false (apply (lambda (py4419@import py441a@imp* py441b@b*) (eq? (py2d96@syntax->datum py4419@import) 'import)) py4417@ls/false)) (apply (lambda (py441f@import py4420@imp* py4421@b*) (values py4420@imp* py4421@b*)) py4417@ls/false) (let ((py4425@t py4415@t)) (let ((py4427@ls/false (py2cb0@syntax-dispatch py4425@t '((any . any) . any)))) (if (and py4427@ls/false (apply (lambda (py4429@import py442a@x py442b@y) (eq? (py2d96@syntax->datum py4429@import) 'import)) py4427@ls/false)) (apply (lambda (py442f@import py4430@x py4431@y) (py2d90@syntax-violation 'expander '"invalid syntax of top-level program" (py2aa3@syntax-car py4413@e*))) py4427@ls/false) (let ((py4435@t py4425@t)) (let ((py4437@ls/false (py2cb0@syntax-dispatch py4435@t '_))) (if py4437@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) py4437@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4435@t)))))))))))) (set! py47bd@py2d26@parse-top-level-program py2d26@parse-top-level-program) (set! py2d28@top-level-expander (lambda (py4439@e*) (call-with-values (lambda () (py2d26@parse-top-level-program py4439@e*)) (lambda (py443f@py443c py4440@py443e) (let ((py4443@b* py4440@py443e) (py4444@imp* py443f@py443c)) (call-with-values (lambda () (py2d22@library-body-expander '() '() py4444@imp* py4443@b* '#t)) (lambda (py4455@py4448 py4456@py444a py4457@py444c py4458@py444e py4459@py4450 py445a@py4452 py445b@py4454) (let ((py4463@export-env py445b@py4454) (py4464@export-subst py445a@py4452) (py4465@visit-code py4459@py4450) (py4466@invoke-code py4458@py444e) (py4467@visit-req* py4457@py444c) (py4468@invoke-req* py4456@py444a) (py4469@imp* py4455@py4448)) (values py4468@invoke-req* py4466@invoke-code))))))))) (set! py47be@py2d28@top-level-expander py2d28@top-level-expander) (set! py2d2a@rp (py25f0@py24cc@make-record-printer 'env (lambda (py4471@x py4472@p py4473@wr) (display '"#<environment>" py4472@p)))) (set! py47bf@py2d2a@rp py2d2a@rp) (set! py2d34@env? (lambda (py4477@x) (and (simple-struct? py4477@x) (eq? (simple-struct-name py4477@x) 'env)))) (set! py47c0@py2d34@env? py2d34@env?) (set! py2d36@env-names (lambda (py4479@x) (simple-struct-ref py4479@x '0))) (set! py47c1@py2d36@env-names py2d36@env-names) (set! py2d38@set-env-names! (lambda (py447b@x py447c@val) (simple-struct-set! py447b@x '0 py447c@val))) (set! py47c2@py2d38@set-env-names! py2d38@set-env-names!) (set! py2d3a@env-labels (lambda (py447f@x) (simple-struct-ref py447f@x '1))) (set! py47c3@py2d3a@env-labels py2d3a@env-labels) (set! py2d3c@set-env-labels! (lambda (py4481@x py4482@val) (simple-struct-set! py4481@x '1 py4482@val))) (set! py47c4@py2d3c@set-env-labels! py2d3c@set-env-labels!) (set! py2d3e@env-itc (lambda (py4485@x) (simple-struct-ref py4485@x '2))) (set! py47c5@py2d3e@env-itc py2d3e@env-itc) (set! py2d40@set-env-itc! (lambda (py4487@x py4488@val) (simple-struct-set! py4487@x '2 py4488@val))) (set! py47c6@py2d40@set-env-itc! py2d40@set-env-itc!) (set! py2d42@dummy '3) (set! py47c7@py2d42@dummy py2d42@dummy) (set! py2d44@rp (py25f0@py24cc@make-record-printer 'interaction-env (lambda (py448b@x py448c@p py448d@wr) (display '"#<environment>" py448c@p)))) (set! py47c8@py2d44@rp py2d44@rp) (set! py2d4e@interaction-env? (lambda (py4491@x) (and (simple-struct? py4491@x) (eq? (simple-struct-name py4491@x) 'interaction-env)))) (set! py47c9@py2d4e@interaction-env? py2d4e@interaction-env?) (set! py2d50@interaction-env-rib (lambda (py4493@x) (simple-struct-ref py4493@x '0))) (set! py47ca@py2d50@interaction-env-rib py2d50@interaction-env-rib) (set! py2d52@set-interaction-env-rib! (lambda (py4495@x py4496@val) (simple-struct-set! py4495@x '0 py4496@val))) (set! py47cb@py2d52@set-interaction-env-rib! py2d52@set-interaction-env-rib!) (set! py2d54@interaction-env-r (lambda (py4499@x) (simple-struct-ref py4499@x '1))) (set! py47cc@py2d54@interaction-env-r py2d54@interaction-env-r) (set! py2d56@set-interaction-env-r! (lambda (py449b@x py449c@val) (simple-struct-set! py449b@x '1 py449c@val))) (set! py47cd@py2d56@set-interaction-env-r! py2d56@set-interaction-env-r!) (set! py2d58@interaction-env-locs (lambda (py449f@x) (simple-struct-ref py449f@x '2))) (set! py47ce@py2d58@interaction-env-locs py2d58@interaction-env-locs) (set! py2d5a@set-interaction-env-locs! (lambda (py44a1@x py44a2@val) (simple-struct-set! py44a1@x '2 py44a2@val))) (set! py47cf@py2d5a@set-interaction-env-locs! py2d5a@set-interaction-env-locs!) (set! py2d5c@dummy '3) (set! py47d0@py2d5c@dummy py2d5c@dummy) (set! py2d5e@interaction-environment-symbols (lambda () (py2d66@environment-symbols (py2d9e@interaction-environment)))) (set! py47d1@py2d5e@interaction-environment-symbols py2d5e@interaction-environment-symbols) (set! py2d60@environment-bindings (lambda (py44a5@e) (vector->list (vector-map (lambda (py44a7@name py44a8@label) (py2d62@parse-binding (cons py44a7@name (py28be@py270b@imported-label->binding py44a8@label)))) (py2d36@env-names py44a5@e) (py2d3a@env-labels py44a5@e))))) (set! py47d2@py2d60@environment-bindings py2d60@environment-bindings) (set! py2d62@parse-binding (lambda (py44ab@b) (cons (car py44ab@b) (let ((py44ad@t (cadr py44ab@b))) (if (memv py44ad@t '(core-prim global)) 'procedure (if (memv py44ad@t '(core-macro macro global-macro)) 'syntax (if (memv py44ad@t '($core-rtd)) 'record (if (eq? (car py44ab@b) (cadr py44ab@b)) 'syntax 'unknown)))))))) (set! py47d3@py2d62@parse-binding py2d62@parse-binding) (set! py2d64@environment? (lambda (py44af@x) (or (py2d34@env? py44af@x) (py2d4e@interaction-env? py44af@x)))) (set! py47d4@py2d64@environment? py2d64@environment?) (set! py2d66@environment-symbols (lambda (py44b1@x) (if (py2d34@env? py44b1@x) (vector->list (py2d36@env-names py44b1@x)) (if (py2d4e@interaction-env? py44b1@x) (map values (py2a47@rib-sym* (py2d50@interaction-env-rib py44b1@x))) (assertion-violation 'environment-symbols '"not an environment" py44b1@x))))) (set! py47d5@py2d66@environment-symbols py2d66@environment-symbols) (set! py2d68@environment (lambda py44b3@imp* (let ((py44b5@itc (py2d16@make-collector))) (let ((py44bb@py44b8 py2d1c@imp-collector) (py44bc@py44ba py44b5@itc)) (let ((py44bf@swap (lambda () (let ((py44c1@t (py44bb@py44b8))) (begin (py44bb@py44b8 py44bc@py44ba) (set! py44bc@py44ba py44c1@t)))))) (dynamic-wind py44bf@swap (lambda () (call-with-values (lambda () (py2d12@parse-import-spec* py44b3@imp*)) (lambda (py44c7@py44c4 py44c8@py44c6) (let ((py44cb@subst-labels py44c8@py44c6) (py44cc@subst-names py44c7@py44c4)) (make-simple-struct 'env '4 (list py44cc@subst-names py44cb@subst-labels py44b5@itc)))))) py44bf@swap)))))) (set! py47d6@py2d68@environment py2d68@environment) (set! py2d6a@null-environment (lambda (py44cf@n) (begin (if (not (eqv? py44cf@n '5)) (assertion-violation 'null-environment '"not 5" py44cf@n) (void)) (py2d68@environment '(psyntax null-environment-5))))) (set! py47d7@py2d6a@null-environment py2d6a@null-environment) (set! py2d6c@scheme-report-environment (lambda (py44d1@n) (begin (if (not (eqv? py44d1@n '5)) (assertion-violation 'scheme-report-environment '"not 5" py44d1@n) (void)) (py2d68@environment '(psyntax scheme-report-environment-5))))) (set! py47d8@py2d6c@scheme-report-environment py2d6c@scheme-report-environment) (set! py2d6e@expand (lambda (py44d3@x py44d4@env) (if (py2d34@env? py44d4@env) (let ((py44d7@rib (py2d14@make-top-rib (py2d36@env-names py44d4@env) (py2d3a@env-labels py44d4@env)))) (let ((py44d9@x (make-simple-struct 'stx '5 (list py44d3@x py2a2d@top-mark* (list py44d7@rib) '()))) (py44da@itc (py2d3e@env-itc py44d4@env)) (py44db@rtc (py2d16@make-collector)) (py44dc@vtc (py2d16@make-collector))) (let ((py44e1@x (let ((py44f3@py44e4 py2da0@top-level-context) (py44f4@py44e6 py2d18@inv-collector) (py44f5@py44e8 py2d1a@vis-collector) (py44f6@py44ea py2d1c@imp-collector) (py44f7@py44ec '#f) (py44f8@py44ee py44db@rtc) (py44f9@py44f0 py44dc@vtc) (py44fa@py44f2 py44da@itc)) (let ((py4503@swap (lambda () (begin (let ((py4505@t (py44f3@py44e4))) (begin (py44f3@py44e4 py44f7@py44ec) (set! py44f7@py44ec py4505@t))) (let ((py4507@t (py44f4@py44e6))) (begin (py44f4@py44e6 py44f8@py44ee) (set! py44f8@py44ee py4507@t))) (let ((py4509@t (py44f5@py44e8))) (begin (py44f5@py44e8 py44f9@py44f0) (set! py44f9@py44f0 py4509@t))) (let ((py450b@t (py44f6@py44ea))) (begin (py44f6@py44ea py44fa@py44f2) (set! py44fa@py44f2 py450b@t))))))) (dynamic-wind py4503@swap (lambda () (py2cd2@chi-expr py44d9@x '() '())) py4503@swap))))) (begin (py2a65@seal-rib! py44d7@rib) (values py44e1@x (py44db@rtc)))))) (if (py2d4e@interaction-env? py44d4@env) (let ((py450d@rib (py2d50@interaction-env-rib py44d4@env)) (py450e@r (py2d54@interaction-env-r py44d4@env)) (py450f@rtc (py2d16@make-collector))) (let ((py4513@x (make-simple-struct 'stx '5 (list py44d3@x py2a2d@top-mark* (list py450d@rib) '())))) (call-with-values (lambda () (let ((py4529@py451a py2da0@top-level-context) (py452a@py451c py2d18@inv-collector) (py452b@py451e py2d1a@vis-collector) (py452c@py4520 py2d1c@imp-collector) (py452d@py4522 py44d4@env) (py452e@py4524 py450f@rtc) (py452f@py4526 (py2d16@make-collector)) (py4530@py4528 (py2d16@make-collector))) (let ((py4539@swap (lambda () (begin (let ((py453b@t (py4529@py451a))) (begin (py4529@py451a py452d@py4522) (set! py452d@py4522 py453b@t))) (let ((py453d@t (py452a@py451c))) (begin (py452a@py451c py452e@py4524) (set! py452e@py4524 py453d@t))) (let ((py453f@t (py452b@py451e))) (begin (py452b@py451e py452f@py4526) (set! py452f@py4526 py453f@t))) (let ((py4541@t (py452c@py4520))) (begin (py452c@py4520 py4530@py4528) (set! py4530@py4528 py4541@t))))))) (dynamic-wind py4539@swap (lambda () (py2d20@chi-interaction-expr py4513@x py450d@rib py450e@r)) py4539@swap)))) (lambda (py4543@py4516 py4544@py4518) (let ((py4547@r^ py4544@py4518) (py4548@e py4543@py4516)) (begin (py2d56@set-interaction-env-r! py44d4@env py4547@r^) (values py4548@e (py450f@rtc)))))))) (assertion-violation 'expand '"not an environment" py44d4@env))))) (set! py47d9@py2d6e@expand py2d6e@expand) (set! py2d70@eval (lambda (py454b@x py454c@env) (begin (if (not (py2d64@environment? py454c@env)) (error 'eval '"not an environment" py454c@env) (void)) (call-with-values (lambda () (py2d6e@expand py454b@x py454c@env)) (lambda (py4553@py4550 py4554@py4552) (let ((py4557@invoke-req* py4554@py4552) (py4558@x py4553@py4550)) (begin (for-each py28bf@py270d@invoke-library py4557@invoke-req*) (eval-core (py2649@py2601@expanded->core py4558@x))))))))) (set! py47da@py2d70@eval py2d70@eval) (set! py2d72@library-expander (lambda py45c9 (let ((py45ca (length py45c9))) (if (= py45ca '3) (apply (lambda (py455b@x py455c@filename py455d@verify-name) (let ((py4562@build-visit-code '#f) (py4564@visit! '#f)) (begin (set! py4562@build-visit-code (lambda (py45b7@macro*) (if (null? py45b7@macro*) (py2a0f@py296a@build-void) (py2a0e@py2968@build-sequence '#f (map (lambda (py45b9@x) (let ((py45bb@loc (car py45b9@x)) (py45bc@src (cddr py45b9@x))) (list 'set! py45bb@loc py45bc@src))) py45b7@macro*))))) (set! py4564@visit! (lambda (py45af@macro*) (for-each (lambda (py45b1@x) (let ((py45b3@loc (car py45b1@x)) (py45b4@proc (cadr py45b1@x))) (set-symbol-value! py45b3@loc py45b4@proc))) py45af@macro*))) (call-with-values (lambda () (py2d24@core-library-expander py455b@x py455d@verify-name)) (lambda (py4577@py4566 py4578@py4568 py4579@py456a py457a@py456c py457b@py456e py457c@py4570 py457d@py4572 py457e@py4574 py457f@py4576) (let ((py4589@export-env py457f@py4576) (py458a@export-subst py457e@py4574) (py458b@macro* py457d@py4572) (py458c@invoke-code py457c@py4570) (py458d@vis* py457b@py456e) (py458e@inv* py457a@py456c) (py458f@imp* py4579@py456a) (py4590@ver py4578@py4568) (py4591@name py4577@py4566)) (let ((py459b@id (gensym)) (py459c@name py4591@name) (py459d@ver py4590@ver) (py459e@imp* (map py28c3@py2715@library-spec py458f@imp*)) (py459f@vis* (map py28c3@py2715@library-spec py458d@vis*)) (py45a0@inv* (map py28c3@py2715@library-spec py458e@inv*)) (py45a1@visit-proc (lambda () (py4564@visit! py458b@macro*))) (py45a2@invoke-proc (lambda () (eval-core (py2649@py2601@expanded->core py458c@invoke-code)))) (py45a3@visit-code (py4562@build-visit-code py458b@macro*)) (py45a4@invoke-code py458c@invoke-code)) (begin (py28bd@py2709@install-library py459b@id py459c@name py459d@ver py459e@imp* py459f@vis* py45a0@inv* py458a@export-subst py4589@export-env py45a1@visit-proc py45a2@invoke-proc py45a3@visit-code py45a4@invoke-code '#t py455c@filename) (values py459b@id py459c@name py459d@ver py459e@imp* py459f@vis* py45a0@inv* py45a4@invoke-code py45a3@visit-code py458a@export-subst py4589@export-env))))))))) py45c9) (if (= py45ca '2) (apply (lambda (py45bf@x py45c0@filename) (py2d72@library-expander py45bf@x py45c0@filename (lambda (py45c3@x) (values)))) py45c9) (if (= py45ca '1) (apply (lambda (py45c5@x) (py2d72@library-expander py45c5@x '#f (lambda (py45c7@x) (values)))) py45c9) (error 'apply '"invalid arg count"))))))) (set! py47db@py2d72@library-expander py2d72@library-expander) (set! py2d74@boot-library-expand (lambda (py45cb@x) (call-with-values (lambda () (py2d72@library-expander py45cb@x)) (lambda (py45e1@py45ce py45e2@py45d0 py45e3@py45d2 py45e4@py45d4 py45e5@py45d6 py45e6@py45d8 py45e7@py45da py45e8@py45dc py45e9@py45de py45ea@py45e0) (let ((py45f5@export-env py45ea@py45e0) (py45f6@export-subst py45e9@py45de) (py45f7@visit-code py45e8@py45dc) (py45f8@invoke-code py45e7@py45da) (py45f9@inv* py45e6@py45d8) (py45fa@vis* py45e5@py45d6) (py45fb@imp* py45e4@py45d4) (py45fc@ver py45e3@py45d2) (py45fd@name py45e2@py45d0) (py45fe@id py45e1@py45ce)) (values py45fd@name py45f8@invoke-code py45f6@export-subst py45f5@export-env)))))) (set! py47dc@py2d74@boot-library-expand py2d74@boot-library-expand) (set! py2d76@rev-map-append (lambda (py4609@f py460a@ls py460b@ac) (if (null? py460a@ls) py460b@ac (py2d76@rev-map-append py4609@f (cdr py460a@ls) (cons (py4609@f (car py460a@ls)) py460b@ac))))) (set! py47dd@py2d76@rev-map-append py2d76@rev-map-append) (set! py2d78@build-exports (lambda (py460f@lex*+loc* py4610@init*) (py2a0e@py2968@build-sequence '#f (cons (py2a0f@py296a@build-void) (py2d76@rev-map-append (lambda (py4613@x) (list 'set! (cdr py4613@x) (car py4613@x))) py460f@lex*+loc* py4610@init*))))) (set! py47de@py2d78@build-exports py2d78@build-exports) (set! py2d7a@make-export-subst (lambda (py4615@name* py4616@id*) (map (lambda (py4619@name py461a@id) (let ((py461d@label (py2abf@id->label py461a@id))) (begin (if (not py461d@label) (py2d90@syntax-violation '#f '"cannot export unbound identifier" py461a@id) (void)) (cons py4619@name py461d@label)))) py4615@name* py4616@id*))) (set! py47df@py2d7a@make-export-subst py2d7a@make-export-subst) (set! py2d7c@make-export-env/macros (lambda (py461f@lex* py4620@loc* py4621@r) (let ((py4626@lookup '#f)) (begin (set! py4626@lookup (lambda (py4643@x) (let py464b@f ((py4645@x py4643@x) (py4646@lex* py461f@lex*) (py4647@loc* py4620@loc*)) (if (pair? py4646@lex*) (if (eq? py4645@x (car py4646@lex*)) (car py4647@loc*) (py464b@f py4645@x (cdr py4646@lex*) (cdr py4647@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let py462f@f ((py4627@r py4621@r) (py4628@env '()) (py4629@global* '()) (py462a@macro* '())) (if (null? py4627@r) (values py4628@env py4629@global* py462a@macro*) (let ((py4631@x (car py4627@r))) (let ((py4633@label (car py4631@x)) (py4634@b (cdr py4631@x))) (let ((py4637@t (py2ac5@binding-type py4634@b))) (if (memv py4637@t '(lexical)) (let ((py4639@v (py2ac7@binding-value py4634@b))) (let ((py463b@loc (py4626@lookup (py2c3a@lexical-var py4639@v))) (py463c@type (if (py2c3c@lexical-mutable? py4639@v) 'mutable 'global))) (py462f@f (cdr py4627@r) (cons (cons* py4633@label py463c@type py463b@loc) py4628@env) (cons (cons (py2c3a@lexical-var py4639@v) py463b@loc) py4629@global*) py462a@macro*))) (if (memv py4637@t '(local-macro)) (let ((py463f@loc (gensym))) (py462f@f (cdr py4627@r) (cons (cons* py4633@label 'global-macro py463f@loc) py4628@env) py4629@global* (cons (cons py463f@loc (py2ac7@binding-value py4634@b)) py462a@macro*))) (if (memv py4637@t '(local-macro!)) (let ((py4641@loc (gensym))) (py462f@f (cdr py4627@r) (cons (cons* py4633@label 'global-macro! py4641@loc) py4628@env) py4629@global* (cons (cons py4641@loc (py2ac7@binding-value py4634@b)) py462a@macro*))) (if (memv py4637@t '($rtd $module)) (py462f@f (cdr py4627@r) (cons py4631@x py4628@env) py4629@global* py462a@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (py2ac5@binding-type py4634@b) (py2ac7@binding-value py4634@b))))))))))))))) (set! py47e0@py2d7c@make-export-env/macros py2d7c@make-export-env/macros) (set! py2d7e@generate-temporaries (lambda (py464d@ls) (let ((py464f@t py464d@ls)) (let ((py4651@ls/false (py2cb0@syntax-dispatch py464f@t 'each-any))) (if py4651@ls/false (apply (lambda (py4653@ls) (map (lambda (py4655@x) (make-simple-struct 'stx '5 (list (let ((py4657@x (py2d96@syntax->datum py4655@x))) (if (or (symbol? py4657@x) (string? py4657@x)) (gensym py4657@x) (gensym 't))) py2a2d@top-mark* '() '()))) py4653@ls)) py4651@ls/false) (let ((py4659@t py464f@t)) (let ((py465b@ls/false (py2cb0@syntax-dispatch py4659@t '_))) (if py465b@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) py465b@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py4659@t))))))))) (set! py47e1@py2d7e@generate-temporaries py2d7e@generate-temporaries) (set! py2d80@free-identifier=? (lambda (py465d@x py465e@y) (if (py2aa9@id? py465d@x) (if (py2aa9@id? py465e@y) (py2aaf@free-id=? py465d@x py465e@y) (assertion-violation 'free-identifier=? '"not an identifier" py465e@y)) (assertion-violation 'free-identifier=? '"not an identifier" py465d@x)))) (set! py47e2@py2d80@free-identifier=? py2d80@free-identifier=?) (set! py2d82@bound-identifier=? (lambda (py4661@x py4662@y) (if (py2aa9@id? py4661@x) (if (py2aa9@id? py4662@y) (py2aad@bound-id=? py4661@x py4662@y) (assertion-violation 'bound-identifier=? '"not an identifier" py4662@y)) (assertion-violation 'bound-identifier=? '"not an identifier" py4661@x)))) (set! py47e3@py2d82@bound-identifier=? py2d82@bound-identifier=?) (set! py2d84@make-source-condition (lambda (py4665@x) (let ((py466f@py466a '#f) (py4671@py466c '#f) (py4673@py466b '#f) (py4676@py4669 '#f) (py4678@make-source-condition '#f) (py467a@py4667 '#f) (py467c@py4668 '#f) (py467e@source-condition? '#f) (py4680@source-filename '#f) (py4682@source-character '#f)) (begin (set! py466f@py466a (make-record-type-descriptor '&source-information py4ac5@py480c@&condition-rtd 'py466d '#f '#f '#((immutable file-name) (immutable character)))) (set! py4671@py466c '#f) (set! py4673@py466b (make-record-constructor-descriptor py466f@py466a py4ac6@py480e@&condition-rcd py4671@py466c)) (set! py4676@py4669 (record-predicate py466f@py466a)) (set! py4678@make-source-condition (record-constructor py4673@py466b)) (set! py467a@py4667 (record-accessor py466f@py466a '0)) (set! py467c@py4668 (record-accessor py466f@py466a '1)) (set! py467e@source-condition? (condition-predicate py466f@py466a)) (set! py4680@source-filename (condition-accessor py466f@py466a py467a@py4667)) (set! py4682@source-character (condition-accessor py466f@py466a py467c@py4668)) (if (pair? py4665@x) (py4678@make-source-condition (car py4665@x) (cdr py4665@x)) (condition)))))) (set! py47e4@py2d84@make-source-condition py2d84@make-source-condition) (set! py2d86@extract-position-condition (lambda (py4683@x) (py2d84@make-source-condition (py2d88@expression-position py4683@x)))) (set! py47e5@py2d86@extract-position-condition py2d86@extract-position-condition) (set! py2d88@expression-position (lambda (py4685@x) (and (py2a75@stx? py4685@x) (let ((py4687@x (py2a77@stx-expr py4685@x))) (and (py25e8@py24bc@annotation? py4687@x) (py25e9@py24be@annotation-source py4687@x)))))) (set! py47e6@py2d88@expression-position py2d88@expression-position) (set! py2d8a@assertion-error (lambda (py4689@expr py468a@pos) (raise (condition (py4af5@py48d0@make-assertion-violation) (py4b07@py4902@make-who-condition 'assert) (py4acb@py4863@make-message-condition '"assertion failed") (py4afd@py48e7@make-irritants-condition (list py4689@expr)) (py2d84@make-source-condition py468a@pos))))) (set! py47e7@py2d8a@assertion-error py2d8a@assertion-error) (set! py2d8c@syntax-error (lambda (py468d@x . py468f@args) (begin (if (not (for-all string? py468f@args)) (assertion-violation 'syntax-error '"invalid argument" py468f@args) (void)) (raise (condition (py4acb@py4863@make-message-condition (if (null? py468f@args) '"invalid syntax" (apply string-append py468f@args))) (py4b29@py495e@make-syntax-violation (py2d96@syntax->datum py468d@x) '#f) (py2d86@extract-position-condition py468d@x)))))) (set! py47e8@py2d8c@syntax-error py2d8c@syntax-error) (set! py2d8e@syntax-violation* (lambda (py4691@who py4692@msg py4693@form py4694@condition-object) (begin (if (not (string? py4692@msg)) (assertion-violation 'syntax-violation '"message is not a string" py4692@msg) (void)) (let ((py4699@who (if (or (string? py4691@who) (symbol? py4691@who)) py4691@who (if (not py4691@who) (let ((py469b@t py4693@form)) (let ((py469d@ls/false (py2cb0@syntax-dispatch py469b@t 'any))) (if (and py469d@ls/false (apply (lambda (py469f@id) (py2aa9@id? py469f@id)) py469d@ls/false)) (apply (lambda (py46a1@id) (py2d96@syntax->datum py46a1@id)) py469d@ls/false) (let ((py46a3@t py469b@t)) (let ((py46a5@ls/false (py2cb0@syntax-dispatch py46a3@t '(any . any)))) (if (and py46a5@ls/false (apply (lambda (py46a7@id py46a8@rest) (py2aa9@id? py46a7@id)) py46a5@ls/false)) (apply (lambda (py46ab@id py46ac@rest) (py2d96@syntax->datum py46ab@id)) py46a5@ls/false) (let ((py46af@t py46a3@t)) (let ((py46b1@ls/false (py2cb0@syntax-dispatch py46af@t '_))) (if py46b1@ls/false (apply (lambda () '#f) py46b1@ls/false) (py2d90@syntax-violation '#f '"invalid syntax" py46af@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" py4691@who))))) (raise (condition (if py4699@who (py4b07@py4902@make-who-condition py4699@who) (condition)) (py4acb@py4863@make-message-condition py4692@msg) py4694@condition-object (py2d86@extract-position-condition py4693@form))))))) (set! py47e9@py2d8e@syntax-violation* py2d8e@syntax-violation*) (set! py2d90@syntax-violation (lambda py46c1 (let ((py46c2 (length py46c1))) (if (= py46c2 '3) (apply (lambda (py46b3@who py46b4@msg py46b5@form) (py2d90@syntax-violation py46b3@who py46b4@msg py46b5@form '#f)) py46c1) (if (= py46c2 '4) (apply (lambda (py46b9@who py46ba@msg py46bb@form py46bc@subform) (py2d8e@syntax-violation* py46b9@who py46ba@msg py46bb@form (py4b29@py495e@make-syntax-violation (py2d96@syntax->datum py46bb@form) (py2d96@syntax->datum py46bc@subform)))) py46c1) (error 'apply '"invalid arg count")))))) (set! py47ea@py2d90@syntax-violation py2d90@syntax-violation) (set! py2d92@identifier? (lambda (py46c3@x) (py2aa9@id? py46c3@x))) (set! py47eb@py2d92@identifier? py2d92@identifier?) (set! py2d94@datum->syntax (lambda (py46c5@id py46c6@datum) (if (py2aa9@id? py46c5@id) (py2a89@datum->stx py46c5@id py46c6@datum) (assertion-violation 'datum->syntax '"not an identifier" py46c5@id)))) (set! py47ec@py2d94@datum->syntax py2d94@datum->syntax) (set! py2d96@syntax->datum (lambda (py46c9@x) (py2abd@stx->datum py46c9@x))) (set! py47ed@py2d96@syntax->datum py2d96@syntax->datum) (set! py2d98@ungensym-all (lambda (py46cb@code) (if (pair? py46cb@code) (cons (py2d98@ungensym-all (car py46cb@code)) (py2d98@ungensym-all (cdr py46cb@code))) (if (symbol? py46cb@code) (ungensym py46cb@code) py46cb@code)))) (set! py47ee@py2d98@ungensym-all py2d98@ungensym-all) (set! py2d9a@compile-r6rs-top-level (lambda (py46cd@x*) (call-with-values (lambda () (py2d28@top-level-expander py46cd@x*)) (lambda (py46d3@py46d0 py46d4@py46d2) (let ((py46d7@invoke-code py46d4@py46d2) (py46d8@lib* py46d3@py46d0)) (lambda () (begin (for-each py28bf@py270d@invoke-library py46d8@lib*) (let ((py46db@expanded (py2649@py2601@expanded->core py46d7@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (py2d98@ungensym-all py46db@expanded)) (void)) (eval-core py46db@expanded)))))))))) (set! py47ef@py2d9a@compile-r6rs-top-level py2d9a@compile-r6rs-top-level) (set! py2d9c@pre-compile-r6rs-top-level (lambda (py46dd@x*) (call-with-values (lambda () (py2d28@top-level-expander py46dd@x*)) (lambda (py46e3@py46e0 py46e4@py46e2) (let ((py46e7@invoke-code py46e4@py46e2) (py46e8@lib* py46e3@py46e0)) (begin (for-each py28bf@py270d@invoke-library py46e8@lib*) (py25f1@py24ce@compile-core (py2649@py2601@expanded->core py46e7@invoke-code)))))))) (set! py47f0@py2d9c@pre-compile-r6rs-top-level py2d9c@pre-compile-r6rs-top-level) (set! py2d9e@interaction-environment (let ((py46eb@the-env '#f)) (lambda () (or py46eb@the-env (let ((py46ed@lib (py28b8@py26ff@find-library-by-name '(mosh interaction))) (py46ee@rib (py2a5d@make-empty-rib))) (begin (let ((py46f1@subst (py289a@py26c3@library-subst py46ed@lib))) (begin (py2a49@set-rib-sym*! py46ee@rib (map car py46f1@subst)) (py2a4d@set-rib-mark**! py46ee@rib (map (lambda (py46f3@x) py2a2d@top-mark*) py46f1@subst)) (py2a51@set-rib-label*! py46ee@rib (map cdr py46f1@subst)))) (let ((py46f5@env (make-simple-struct 'interaction-env '4 (list py46ee@rib '() '())))) (begin (set! py46eb@the-env py46f5@env) py46f5@env)))))))) (set! py47f1@py2d9e@interaction-environment py2d9e@interaction-environment) (set! py2da0@top-level-context (py25f3@py24d2@make-parameter '#f)) (set! py47f2@py2da0@top-level-context py2da0@top-level-context) (py28b5@py26f9@current-library-expander py2d72@library-expander))
(begin (set! py4801@py47fc (unspecified)) (set! py4803@py47fe (unspecified)) (set! py4805@py47fd (unspecified)) (set! py4808@&condition? (unspecified)) (set! py480a@make-&condition (unspecified)) (set! py480c@&condition-rtd (unspecified)) (set! py480e@&condition-rcd (unspecified)) (set! py485a@py4855 (unspecified)) (set! py485c@py4857 (unspecified)) (set! py485e@py4856 (unspecified)) (set! py4861@p? (unspecified)) (set! py4863@make-message-condition (unspecified)) (set! py4865@py4854 (unspecified)) (set! py4867@message-condition? (unspecified)) (set! py4869@condition-message (unspecified)) (set! py486b@&message-rtd (unspecified)) (set! py486d@&message-rcd (unspecified)) (set! py4873@py486e (unspecified)) (set! py4875@py4870 (unspecified)) (set! py4877@py486f (unspecified)) (set! py487a@p? (unspecified)) (set! py487c@make-warning (unspecified)) (set! py487e@warning? (unspecified)) (set! py4880@&warning-rtd (unspecified)) (set! py4882@&warning-rcd (unspecified)) (set! py4888@py4883 (unspecified)) (set! py488a@py4885 (unspecified)) (set! py488c@py4884 (unspecified)) (set! py488f@p? (unspecified)) (set! py4891@make-serious-condition (unspecified)) (set! py4893@serious-condition? (unspecified)) (set! py4895@&serious-rtd (unspecified)) (set! py4897@&serious-rcd (unspecified)) (set! py489d@py4898 (unspecified)) (set! py489f@py489a (unspecified)) (set! py48a1@py4899 (unspecified)) (set! py48a4@p? (unspecified)) (set! py48a6@make-error (unspecified)) (set! py48a8@error? (unspecified)) (set! py48aa@&error-rtd (unspecified)) (set! py48ac@&error-rcd (unspecified)) (set! py48b2@py48ad (unspecified)) (set! py48b4@py48af (unspecified)) (set! py48b6@py48ae (unspecified)) (set! py48b9@p? (unspecified)) (set! py48bb@make-violation (unspecified)) (set! py48bd@violation? (unspecified)) (set! py48bf@&violation-rtd (unspecified)) (set! py48c1@&violation-rcd (unspecified)) (set! py48c7@py48c2 (unspecified)) (set! py48c9@py48c4 (unspecified)) (set! py48cb@py48c3 (unspecified)) (set! py48ce@p? (unspecified)) (set! py48d0@make-assertion-violation (unspecified)) (set! py48d2@assertion-violation? (unspecified)) (set! py48d4@&assertion-rtd (unspecified)) (set! py48d6@&assertion-rcd (unspecified)) (set! py48de@py48d9 (unspecified)) (set! py48e0@py48db (unspecified)) (set! py48e2@py48da (unspecified)) (set! py48e5@p? (unspecified)) (set! py48e7@make-irritants-condition (unspecified)) (set! py48e9@py48d8 (unspecified)) (set! py48eb@irritants-condition? (unspecified)) (set! py48ed@condition-irritants (unspecified)) (set! py48ef@&irritants-rtd (unspecified)) (set! py48f1@&irritants-rcd (unspecified)) (set! py48f9@py48f4 (unspecified)) (set! py48fb@py48f6 (unspecified)) (set! py48fd@py48f5 (unspecified)) (set! py4900@p? (unspecified)) (set! py4902@make-who-condition (unspecified)) (set! py4904@py48f3 (unspecified)) (set! py4906@who-condition? (unspecified)) (set! py4908@condition-who (unspecified)) (set! py490a@&who-rtd (unspecified)) (set! py490c@&who-rcd (unspecified)) (set! py4912@py490d (unspecified)) (set! py4914@py490f (unspecified)) (set! py4916@py490e (unspecified)) (set! py4919@p? (unspecified)) (set! py491b@make-non-continuable-violation (unspecified)) (set! py491d@non-continuable-violation? (unspecified)) (set! py491f@&non-continuable-rtd (unspecified)) (set! py4921@&non-continuable-rcd (unspecified)) (set! py4927@py4922 (unspecified)) (set! py4929@py4924 (unspecified)) (set! py492b@py4923 (unspecified)) (set! py492e@p? (unspecified)) (set! py4930@make-implementation-restriction-violation (unspecified)) (set! py4932@implementation-restriction-violation? (unspecified)) (set! py4934@&implementation-restriction-rtd (unspecified)) (set! py4936@&implementation-restriction-rcd (unspecified)) (set! py493c@py4937 (unspecified)) (set! py493e@py4939 (unspecified)) (set! py4940@py4938 (unspecified)) (set! py4943@p? (unspecified)) (set! py4945@make-lexical-violation (unspecified)) (set! py4947@lexical-violation? (unspecified)) (set! py4949@&lexical-rtd (unspecified)) (set! py494b@&lexical-rcd (unspecified)) (set! py4955@py4950 (unspecified)) (set! py4957@py4952 (unspecified)) (set! py4959@py4951 (unspecified)) (set! py495c@p? (unspecified)) (set! py495e@make-syntax-violation (unspecified)) (set! py4960@py494d (unspecified)) (set! py4962@py494f (unspecified)) (set! py4964@syntax-violation? (unspecified)) (set! py4966@syntax-violation-form (unspecified)) (set! py4968@syntax-violation-subform (unspecified)) (set! py496a@&syntax-rtd (unspecified)) (set! py496c@&syntax-rcd (unspecified)) (set! py4972@py496d (unspecified)) (set! py4974@py496f (unspecified)) (set! py4976@py496e (unspecified)) (set! py4979@p? (unspecified)) (set! py497b@make-undefined-violation (unspecified)) (set! py497d@undefined-violation? (unspecified)) (set! py497f@&undefined-rtd (unspecified)) (set! py4981@&undefined-rcd (unspecified)) (set! py4987@py4982 (unspecified)) (set! py4989@py4984 (unspecified)) (set! py498b@py4983 (unspecified)) (set! py498e@p? (unspecified)) (set! py4990@make-i/o-error (unspecified)) (set! py4992@i/o-error? (unspecified)) (set! py4994@&i/o-rtd (unspecified)) (set! py4996@&i/o-rcd (unspecified)) (set! py499c@py4997 (unspecified)) (set! py499e@py4999 (unspecified)) (set! py49a0@py4998 (unspecified)) (set! py49a3@p? (unspecified)) (set! py49a5@make-i/o-read-error (unspecified)) (set! py49a7@i/o-read-error? (unspecified)) (set! py49a9@&i/o-read-rtd (unspecified)) (set! py49ab@&i/o-read-rcd (unspecified)) (set! py49b1@py49ac (unspecified)) (set! py49b3@py49ae (unspecified)) (set! py49b5@py49ad (unspecified)) (set! py49b8@p? (unspecified)) (set! py49ba@make-i/o-write-error (unspecified)) (set! py49bc@i/o-write-error? (unspecified)) (set! py49be@&i/o-write-rtd (unspecified)) (set! py49c0@&i/o-write-rcd (unspecified)) (set! py49c8@py49c3 (unspecified)) (set! py49ca@py49c5 (unspecified)) (set! py49cc@py49c4 (unspecified)) (set! py49cf@p? (unspecified)) (set! py49d1@make-i/o-invalid-position-error (unspecified)) (set! py49d3@py49c2 (unspecified)) (set! py49d5@i/o-invalid-position-error? (unspecified)) (set! py49d7@i/o-error-position (unspecified)) (set! py49d9@&i/o-invalid-position-rtd (unspecified)) (set! py49db@&i/o-invalid-position-rcd (unspecified)) (set! py49e3@py49de (unspecified)) (set! py49e5@py49e0 (unspecified)) (set! py49e7@py49df (unspecified)) (set! py49ea@p? (unspecified)) (set! py49ec@make-i/o-filename-error (unspecified)) (set! py49ee@py49dd (unspecified)) (set! py49f0@i/o-filename-error? (unspecified)) (set! py49f2@i/o-error-filename (unspecified)) (set! py49f4@&i/o-filename-rtd (unspecified)) (set! py49f6@&i/o-filename-rcd (unspecified)) (set! py49fc@py49f7 (unspecified)) (set! py49fe@py49f9 (unspecified)) (set! py4a00@py49f8 (unspecified)) (set! py4a03@p? (unspecified)) (set! py4a05@make-i/o-file-protection-error (unspecified)) (set! py4a07@i/o-file-protection-error? (unspecified)) (set! py4a09@&i/o-file-protection-rtd (unspecified)) (set! py4a0b@&i/o-file-protection-rcd (unspecified)) (set! py4a11@py4a0c (unspecified)) (set! py4a13@py4a0e (unspecified)) (set! py4a15@py4a0d (unspecified)) (set! py4a18@p? (unspecified)) (set! py4a1a@make-i/o-file-is-read-only-error (unspecified)) (set! py4a1c@i/o-file-is-read-only-error? (unspecified)) (set! py4a1e@&i/o-file-is-read-only-rtd (unspecified)) (set! py4a20@&i/o-file-is-read-only-rcd (unspecified)) (set! py4a26@py4a21 (unspecified)) (set! py4a28@py4a23 (unspecified)) (set! py4a2a@py4a22 (unspecified)) (set! py4a2d@p? (unspecified)) (set! py4a2f@make-i/o-file-already-exists-error (unspecified)) (set! py4a31@i/o-file-already-exists-error? (unspecified)) (set! py4a33@&i/o-file-already-exists-rtd (unspecified)) (set! py4a35@&i/o-file-already-exists-rcd (unspecified)) (set! py4a3b@py4a36 (unspecified)) (set! py4a3d@py4a38 (unspecified)) (set! py4a3f@py4a37 (unspecified)) (set! py4a42@p? (unspecified)) (set! py4a44@make-i/o-file-does-not-exist-error (unspecified)) (set! py4a46@i/o-file-does-not-exist-error? (unspecified)) (set! py4a48@&i/o-file-does-not-exist-rtd (unspecified)) (set! py4a4a@&i/o-file-does-not-exist-rcd (unspecified)) (set! py4a52@py4a4d (unspecified)) (set! py4a54@py4a4f (unspecified)) (set! py4a56@py4a4e (unspecified)) (set! py4a59@p? (unspecified)) (set! py4a5b@make-i/o-port-error (unspecified)) (set! py4a5d@py4a4c (unspecified)) (set! py4a5f@i/o-port-error? (unspecified)) (set! py4a61@i/o-error-port (unspecified)) (set! py4a63@&i/o-port-rtd (unspecified)) (set! py4a65@&i/o-port-rcd (unspecified)) (set! py4a6b@py4a66 (unspecified)) (set! py4a6d@py4a68 (unspecified)) (set! py4a6f@py4a67 (unspecified)) (set! py4a72@p? (unspecified)) (set! py4a74@make-i/o-decoding-error (unspecified)) (set! py4a76@i/o-decoding-error? (unspecified)) (set! py4a78@&i/o-decoding-rtd (unspecified)) (set! py4a7a@&i/o-decoding-rcd (unspecified)) (set! py4a82@py4a7d (unspecified)) (set! py4a84@py4a7f (unspecified)) (set! py4a86@py4a7e (unspecified)) (set! py4a89@p? (unspecified)) (set! py4a8b@make-i/o-encoding-error (unspecified)) (set! py4a8d@py4a7c (unspecified)) (set! py4a8f@i/o-encoding-error? (unspecified)) (set! py4a91@i/o-encoding-error-char (unspecified)) (set! py4a93@&i/o-encoding-rtd (unspecified)) (set! py4a95@&i/o-encoding-rcd (unspecified)) (set! py4a9b@py4a96 (unspecified)) (set! py4a9d@py4a98 (unspecified)) (set! py4a9f@py4a97 (unspecified)) (set! py4aa2@p? (unspecified)) (set! py4aa4@make-no-infinities-violation (unspecified)) (set! py4aa6@no-infinities-violation? (unspecified)) (set! py4aa8@&no-infinities-rtd (unspecified)) (set! py4aaa@&no-infinities-rcd (unspecified)) (set! py4ab0@py4aab (unspecified)) (set! py4ab2@py4aad (unspecified)) (set! py4ab4@py4aac (unspecified)) (set! py4ab7@p? (unspecified)) (set! py4ab9@make-no-nans-violation (unspecified)) (set! py4abb@no-nans-violation? (unspecified)) (set! py4abd@&no-nans-rtd (unspecified)) (set! py4abf@&no-nans-rcd (unspecified)) (set! py4801@py47fc (make-record-type-descriptor '&condition '#f 'py47ff '#f '#f '#())) (set! py4ac0@py4801@py47fc py4801@py47fc) (set! py4803@py47fe '#f) (set! py4ac1@py4803@py47fe py4803@py47fe) (set! py4805@py47fd (make-record-constructor-descriptor py4801@py47fc '#f py4803@py47fe)) (set! py4ac2@py4805@py47fd py4805@py47fd) (set! py4808@&condition? (record-predicate py4801@py47fc)) (set! py4ac3@py4808@&condition? py4808@&condition?) (set! py480a@make-&condition (record-constructor py4805@py47fd)) (set! py4ac4@py480a@make-&condition py480a@make-&condition) (set! py480c@&condition-rtd py4801@py47fc) (set! py4ac5@py480c@&condition-rtd py480c@&condition-rtd) (set! py480e@&condition-rcd py4805@py47fd) (set! py4ac6@py480e@&condition-rcd py480e@&condition-rcd) (set! py485a@py4855 (make-record-type-descriptor '&message py4801@py47fc 'py4858 '#f '#f '#((immutable message)))) (set! py4ac7@py485a@py4855 py485a@py4855) (set! py485c@py4857 '#f) (set! py4ac8@py485c@py4857 py485c@py4857) (set! py485e@py4856 (make-record-constructor-descriptor py485a@py4855 py4805@py47fd py485c@py4857)) (set! py4ac9@py485e@py4856 py485e@py4856) (set! py4861@p? (record-predicate py485a@py4855)) (set! py4aca@py4861@p? py4861@p?) (set! py4863@make-message-condition (record-constructor py485e@py4856)) (set! py4acb@py4863@make-message-condition py4863@make-message-condition) (set! py4865@py4854 (record-accessor py485a@py4855 '0)) (set! py4acc@py4865@py4854 py4865@py4854) (set! py4867@message-condition? (condition-predicate py485a@py4855)) (set! py4acd@py4867@message-condition? py4867@message-condition?) (set! py4869@condition-message (condition-accessor py485a@py4855 py4865@py4854)) (set! py4ace@py4869@condition-message py4869@condition-message) (set! py486b@&message-rtd py485a@py4855) (set! py4acf@py486b@&message-rtd py486b@&message-rtd) (set! py486d@&message-rcd py485e@py4856) (set! py4ad0@py486d@&message-rcd py486d@&message-rcd) (set! py4873@py486e (make-record-type-descriptor '&warning py4801@py47fc 'py4871 '#f '#f '#())) (set! py4ad1@py4873@py486e py4873@py486e) (set! py4875@py4870 '#f) (set! py4ad2@py4875@py4870 py4875@py4870) (set! py4877@py486f (make-record-constructor-descriptor py4873@py486e py4805@py47fd py4875@py4870)) (set! py4ad3@py4877@py486f py4877@py486f) (set! py487a@p? (record-predicate py4873@py486e)) (set! py4ad4@py487a@p? py487a@p?) (set! py487c@make-warning (record-constructor py4877@py486f)) (set! py4ad5@py487c@make-warning py487c@make-warning) (set! py487e@warning? (condition-predicate py4873@py486e)) (set! py4ad6@py487e@warning? py487e@warning?) (set! py4880@&warning-rtd py4873@py486e) (set! py4ad7@py4880@&warning-rtd py4880@&warning-rtd) (set! py4882@&warning-rcd py4877@py486f) (set! py4ad8@py4882@&warning-rcd py4882@&warning-rcd) (set! py4888@py4883 (make-record-type-descriptor '&serious py4801@py47fc 'py4886 '#f '#f '#())) (set! py4ad9@py4888@py4883 py4888@py4883) (set! py488a@py4885 '#f) (set! py4ada@py488a@py4885 py488a@py4885) (set! py488c@py4884 (make-record-constructor-descriptor py4888@py4883 py4805@py47fd py488a@py4885)) (set! py4adb@py488c@py4884 py488c@py4884) (set! py488f@p? (record-predicate py4888@py4883)) (set! py4adc@py488f@p? py488f@p?) (set! py4891@make-serious-condition (record-constructor py488c@py4884)) (set! py4add@py4891@make-serious-condition py4891@make-serious-condition) (set! py4893@serious-condition? (condition-predicate py4888@py4883)) (set! py4ade@py4893@serious-condition? py4893@serious-condition?) (set! py4895@&serious-rtd py4888@py4883) (set! py4adf@py4895@&serious-rtd py4895@&serious-rtd) (set! py4897@&serious-rcd py488c@py4884) (set! py4ae0@py4897@&serious-rcd py4897@&serious-rcd) (set! py489d@py4898 (make-record-type-descriptor '&error py4888@py4883 'py489b '#f '#f '#())) (set! py4ae1@py489d@py4898 py489d@py4898) (set! py489f@py489a '#f) (set! py4ae2@py489f@py489a py489f@py489a) (set! py48a1@py4899 (make-record-constructor-descriptor py489d@py4898 py488c@py4884 py489f@py489a)) (set! py4ae3@py48a1@py4899 py48a1@py4899) (set! py48a4@p? (record-predicate py489d@py4898)) (set! py4ae4@py48a4@p? py48a4@p?) (set! py48a6@make-error (record-constructor py48a1@py4899)) (set! py4ae5@py48a6@make-error py48a6@make-error) (set! py48a8@error? (condition-predicate py489d@py4898)) (set! py4ae6@py48a8@error? py48a8@error?) (set! py48aa@&error-rtd py489d@py4898) (set! py4ae7@py48aa@&error-rtd py48aa@&error-rtd) (set! py48ac@&error-rcd py48a1@py4899) (set! py4ae8@py48ac@&error-rcd py48ac@&error-rcd) (set! py48b2@py48ad (make-record-type-descriptor '&violation py4888@py4883 'py48b0 '#f '#f '#())) (set! py4ae9@py48b2@py48ad py48b2@py48ad) (set! py48b4@py48af '#f) (set! py4aea@py48b4@py48af py48b4@py48af) (set! py48b6@py48ae (make-record-constructor-descriptor py48b2@py48ad py488c@py4884 py48b4@py48af)) (set! py4aeb@py48b6@py48ae py48b6@py48ae) (set! py48b9@p? (record-predicate py48b2@py48ad)) (set! py4aec@py48b9@p? py48b9@p?) (set! py48bb@make-violation (record-constructor py48b6@py48ae)) (set! py4aed@py48bb@make-violation py48bb@make-violation) (set! py48bd@violation? (condition-predicate py48b2@py48ad)) (set! py4aee@py48bd@violation? py48bd@violation?) (set! py48bf@&violation-rtd py48b2@py48ad) (set! py4aef@py48bf@&violation-rtd py48bf@&violation-rtd) (set! py48c1@&violation-rcd py48b6@py48ae) (set! py4af0@py48c1@&violation-rcd py48c1@&violation-rcd) (set! py48c7@py48c2 (make-record-type-descriptor '&assertion py48b2@py48ad 'py48c5 '#f '#f '#())) (set! py4af1@py48c7@py48c2 py48c7@py48c2) (set! py48c9@py48c4 '#f) (set! py4af2@py48c9@py48c4 py48c9@py48c4) (set! py48cb@py48c3 (make-record-constructor-descriptor py48c7@py48c2 py48b6@py48ae py48c9@py48c4)) (set! py4af3@py48cb@py48c3 py48cb@py48c3) (set! py48ce@p? (record-predicate py48c7@py48c2)) (set! py4af4@py48ce@p? py48ce@p?) (set! py48d0@make-assertion-violation (record-constructor py48cb@py48c3)) (set! py4af5@py48d0@make-assertion-violation py48d0@make-assertion-violation) (set! py48d2@assertion-violation? (condition-predicate py48c7@py48c2)) (set! py4af6@py48d2@assertion-violation? py48d2@assertion-violation?) (set! py48d4@&assertion-rtd py48c7@py48c2) (set! py4af7@py48d4@&assertion-rtd py48d4@&assertion-rtd) (set! py48d6@&assertion-rcd py48cb@py48c3) (set! py4af8@py48d6@&assertion-rcd py48d6@&assertion-rcd) (set! py48de@py48d9 (make-record-type-descriptor '&irritants py4801@py47fc 'py48dc '#f '#f '#((immutable irritants)))) (set! py4af9@py48de@py48d9 py48de@py48d9) (set! py48e0@py48db '#f) (set! py4afa@py48e0@py48db py48e0@py48db) (set! py48e2@py48da (make-record-constructor-descriptor py48de@py48d9 py4805@py47fd py48e0@py48db)) (set! py4afb@py48e2@py48da py48e2@py48da) (set! py48e5@p? (record-predicate py48de@py48d9)) (set! py4afc@py48e5@p? py48e5@p?) (set! py48e7@make-irritants-condition (record-constructor py48e2@py48da)) (set! py4afd@py48e7@make-irritants-condition py48e7@make-irritants-condition) (set! py48e9@py48d8 (record-accessor py48de@py48d9 '0)) (set! py4afe@py48e9@py48d8 py48e9@py48d8) (set! py48eb@irritants-condition? (condition-predicate py48de@py48d9)) (set! py4aff@py48eb@irritants-condition? py48eb@irritants-condition?) (set! py48ed@condition-irritants (condition-accessor py48de@py48d9 py48e9@py48d8)) (set! py4b00@py48ed@condition-irritants py48ed@condition-irritants) (set! py48ef@&irritants-rtd py48de@py48d9) (set! py4b01@py48ef@&irritants-rtd py48ef@&irritants-rtd) (set! py48f1@&irritants-rcd py48e2@py48da) (set! py4b02@py48f1@&irritants-rcd py48f1@&irritants-rcd) (set! py48f9@py48f4 (make-record-type-descriptor '&who py4801@py47fc 'py48f7 '#f '#f '#((immutable who)))) (set! py4b03@py48f9@py48f4 py48f9@py48f4) (set! py48fb@py48f6 '#f) (set! py4b04@py48fb@py48f6 py48fb@py48f6) (set! py48fd@py48f5 (make-record-constructor-descriptor py48f9@py48f4 py4805@py47fd py48fb@py48f6)) (set! py4b05@py48fd@py48f5 py48fd@py48f5) (set! py4900@p? (record-predicate py48f9@py48f4)) (set! py4b06@py4900@p? py4900@p?) (set! py4902@make-who-condition (record-constructor py48fd@py48f5)) (set! py4b07@py4902@make-who-condition py4902@make-who-condition) (set! py4904@py48f3 (record-accessor py48f9@py48f4 '0)) (set! py4b08@py4904@py48f3 py4904@py48f3) (set! py4906@who-condition? (condition-predicate py48f9@py48f4)) (set! py4b09@py4906@who-condition? py4906@who-condition?) (set! py4908@condition-who (condition-accessor py48f9@py48f4 py4904@py48f3)) (set! py4b0a@py4908@condition-who py4908@condition-who) (set! py490a@&who-rtd py48f9@py48f4) (set! py4b0b@py490a@&who-rtd py490a@&who-rtd) (set! py490c@&who-rcd py48fd@py48f5) (set! py4b0c@py490c@&who-rcd py490c@&who-rcd) (set! py4912@py490d (make-record-type-descriptor '&non-continuable py48b2@py48ad 'py4910 '#f '#f '#())) (set! py4b0d@py4912@py490d py4912@py490d) (set! py4914@py490f '#f) (set! py4b0e@py4914@py490f py4914@py490f) (set! py4916@py490e (make-record-constructor-descriptor py4912@py490d py48b6@py48ae py4914@py490f)) (set! py4b0f@py4916@py490e py4916@py490e) (set! py4919@p? (record-predicate py4912@py490d)) (set! py4b10@py4919@p? py4919@p?) (set! py491b@make-non-continuable-violation (record-constructor py4916@py490e)) (set! py4b11@py491b@make-non-continuable-violation py491b@make-non-continuable-violation) (set! py491d@non-continuable-violation? (condition-predicate py4912@py490d)) (set! py4b12@py491d@non-continuable-violation? py491d@non-continuable-violation?) (set! py491f@&non-continuable-rtd py4912@py490d) (set! py4b13@py491f@&non-continuable-rtd py491f@&non-continuable-rtd) (set! py4921@&non-continuable-rcd py4916@py490e) (set! py4b14@py4921@&non-continuable-rcd py4921@&non-continuable-rcd) (set! py4927@py4922 (make-record-type-descriptor '&implementation-restriction py48b2@py48ad 'py4925 '#f '#f '#())) (set! py4b15@py4927@py4922 py4927@py4922) (set! py4929@py4924 '#f) (set! py4b16@py4929@py4924 py4929@py4924) (set! py492b@py4923 (make-record-constructor-descriptor py4927@py4922 py48b6@py48ae py4929@py4924)) (set! py4b17@py492b@py4923 py492b@py4923) (set! py492e@p? (record-predicate py4927@py4922)) (set! py4b18@py492e@p? py492e@p?) (set! py4930@make-implementation-restriction-violation (record-constructor py492b@py4923)) (set! py4b19@py4930@make-implementation-restriction-violation py4930@make-implementation-restriction-violation) (set! py4932@implementation-restriction-violation? (condition-predicate py4927@py4922)) (set! py4b1a@py4932@implementation-restriction-violation? py4932@implementation-restriction-violation?) (set! py4934@&implementation-restriction-rtd py4927@py4922) (set! py4b1b@py4934@&implementation-restriction-rtd py4934@&implementation-restriction-rtd) (set! py4936@&implementation-restriction-rcd py492b@py4923) (set! py4b1c@py4936@&implementation-restriction-rcd py4936@&implementation-restriction-rcd) (set! py493c@py4937 (make-record-type-descriptor '&lexical py48b2@py48ad 'py493a '#f '#f '#())) (set! py4b1d@py493c@py4937 py493c@py4937) (set! py493e@py4939 '#f) (set! py4b1e@py493e@py4939 py493e@py4939) (set! py4940@py4938 (make-record-constructor-descriptor py493c@py4937 py48b6@py48ae py493e@py4939)) (set! py4b1f@py4940@py4938 py4940@py4938) (set! py4943@p? (record-predicate py493c@py4937)) (set! py4b20@py4943@p? py4943@p?) (set! py4945@make-lexical-violation (record-constructor py4940@py4938)) (set! py4b21@py4945@make-lexical-violation py4945@make-lexical-violation) (set! py4947@lexical-violation? (condition-predicate py493c@py4937)) (set! py4b22@py4947@lexical-violation? py4947@lexical-violation?) (set! py4949@&lexical-rtd py493c@py4937) (set! py4b23@py4949@&lexical-rtd py4949@&lexical-rtd) (set! py494b@&lexical-rcd py4940@py4938) (set! py4b24@py494b@&lexical-rcd py494b@&lexical-rcd) (set! py4955@py4950 (make-record-type-descriptor '&syntax py48b2@py48ad 'py4953 '#f '#f '#((immutable form) (immutable subform)))) (set! py4b25@py4955@py4950 py4955@py4950) (set! py4957@py4952 '#f) (set! py4b26@py4957@py4952 py4957@py4952) (set! py4959@py4951 (make-record-constructor-descriptor py4955@py4950 py48b6@py48ae py4957@py4952)) (set! py4b27@py4959@py4951 py4959@py4951) (set! py495c@p? (record-predicate py4955@py4950)) (set! py4b28@py495c@p? py495c@p?) (set! py495e@make-syntax-violation (record-constructor py4959@py4951)) (set! py4b29@py495e@make-syntax-violation py495e@make-syntax-violation) (set! py4960@py494d (record-accessor py4955@py4950 '0)) (set! py4b2a@py4960@py494d py4960@py494d) (set! py4962@py494f (record-accessor py4955@py4950 '1)) (set! py4b2b@py4962@py494f py4962@py494f) (set! py4964@syntax-violation? (condition-predicate py4955@py4950)) (set! py4b2c@py4964@syntax-violation? py4964@syntax-violation?) (set! py4966@syntax-violation-form (condition-accessor py4955@py4950 py4960@py494d)) (set! py4b2d@py4966@syntax-violation-form py4966@syntax-violation-form) (set! py4968@syntax-violation-subform (condition-accessor py4955@py4950 py4962@py494f)) (set! py4b2e@py4968@syntax-violation-subform py4968@syntax-violation-subform) (set! py496a@&syntax-rtd py4955@py4950) (set! py4b2f@py496a@&syntax-rtd py496a@&syntax-rtd) (set! py496c@&syntax-rcd py4959@py4951) (set! py4b30@py496c@&syntax-rcd py496c@&syntax-rcd) (set! py4972@py496d (make-record-type-descriptor '&undefined py48b2@py48ad 'py4970 '#f '#f '#())) (set! py4b31@py4972@py496d py4972@py496d) (set! py4974@py496f '#f) (set! py4b32@py4974@py496f py4974@py496f) (set! py4976@py496e (make-record-constructor-descriptor py4972@py496d py48b6@py48ae py4974@py496f)) (set! py4b33@py4976@py496e py4976@py496e) (set! py4979@p? (record-predicate py4972@py496d)) (set! py4b34@py4979@p? py4979@p?) (set! py497b@make-undefined-violation (record-constructor py4976@py496e)) (set! py4b35@py497b@make-undefined-violation py497b@make-undefined-violation) (set! py497d@undefined-violation? (condition-predicate py4972@py496d)) (set! py4b36@py497d@undefined-violation? py497d@undefined-violation?) (set! py497f@&undefined-rtd py4972@py496d) (set! py4b37@py497f@&undefined-rtd py497f@&undefined-rtd) (set! py4981@&undefined-rcd py4976@py496e) (set! py4b38@py4981@&undefined-rcd py4981@&undefined-rcd) (set! py4987@py4982 (make-record-type-descriptor '&i/o py489d@py4898 'py4985 '#f '#f '#())) (set! py4b39@py4987@py4982 py4987@py4982) (set! py4989@py4984 '#f) (set! py4b3a@py4989@py4984 py4989@py4984) (set! py498b@py4983 (make-record-constructor-descriptor py4987@py4982 py48a1@py4899 py4989@py4984)) (set! py4b3b@py498b@py4983 py498b@py4983) (set! py498e@p? (record-predicate py4987@py4982)) (set! py4b3c@py498e@p? py498e@p?) (set! py4990@make-i/o-error (record-constructor py498b@py4983)) (set! py4b3d@py4990@make-i/o-error py4990@make-i/o-error) (set! py4992@i/o-error? (condition-predicate py4987@py4982)) (set! py4b3e@py4992@i/o-error? py4992@i/o-error?) (set! py4994@&i/o-rtd py4987@py4982) (set! py4b3f@py4994@&i/o-rtd py4994@&i/o-rtd) (set! py4996@&i/o-rcd py498b@py4983) (set! py4b40@py4996@&i/o-rcd py4996@&i/o-rcd) (set! py499c@py4997 (make-record-type-descriptor '&i/o-read py4987@py4982 'py499a '#f '#f '#())) (set! py4b41@py499c@py4997 py499c@py4997) (set! py499e@py4999 '#f) (set! py4b42@py499e@py4999 py499e@py4999) (set! py49a0@py4998 (make-record-constructor-descriptor py499c@py4997 py498b@py4983 py499e@py4999)) (set! py4b43@py49a0@py4998 py49a0@py4998) (set! py49a3@p? (record-predicate py499c@py4997)) (set! py4b44@py49a3@p? py49a3@p?) (set! py49a5@make-i/o-read-error (record-constructor py49a0@py4998)) (set! py4b45@py49a5@make-i/o-read-error py49a5@make-i/o-read-error) (set! py49a7@i/o-read-error? (condition-predicate py499c@py4997)) (set! py4b46@py49a7@i/o-read-error? py49a7@i/o-read-error?) (set! py49a9@&i/o-read-rtd py499c@py4997) (set! py4b47@py49a9@&i/o-read-rtd py49a9@&i/o-read-rtd) (set! py49ab@&i/o-read-rcd py49a0@py4998) (set! py4b48@py49ab@&i/o-read-rcd py49ab@&i/o-read-rcd) (set! py49b1@py49ac (make-record-type-descriptor '&i/o-write py4987@py4982 'py49af '#f '#f '#())) (set! py4b49@py49b1@py49ac py49b1@py49ac) (set! py49b3@py49ae '#f) (set! py4b4a@py49b3@py49ae py49b3@py49ae) (set! py49b5@py49ad (make-record-constructor-descriptor py49b1@py49ac py498b@py4983 py49b3@py49ae)) (set! py4b4b@py49b5@py49ad py49b5@py49ad) (set! py49b8@p? (record-predicate py49b1@py49ac)) (set! py4b4c@py49b8@p? py49b8@p?) (set! py49ba@make-i/o-write-error (record-constructor py49b5@py49ad)) (set! py4b4d@py49ba@make-i/o-write-error py49ba@make-i/o-write-error) (set! py49bc@i/o-write-error? (condition-predicate py49b1@py49ac)) (set! py4b4e@py49bc@i/o-write-error? py49bc@i/o-write-error?) (set! py49be@&i/o-write-rtd py49b1@py49ac) (set! py4b4f@py49be@&i/o-write-rtd py49be@&i/o-write-rtd) (set! py49c0@&i/o-write-rcd py49b5@py49ad) (set! py4b50@py49c0@&i/o-write-rcd py49c0@&i/o-write-rcd) (set! py49c8@py49c3 (make-record-type-descriptor '&i/o-invalid-position py4987@py4982 'py49c6 '#f '#f '#((immutable position)))) (set! py4b51@py49c8@py49c3 py49c8@py49c3) (set! py49ca@py49c5 '#f) (set! py4b52@py49ca@py49c5 py49ca@py49c5) (set! py49cc@py49c4 (make-record-constructor-descriptor py49c8@py49c3 py498b@py4983 py49ca@py49c5)) (set! py4b53@py49cc@py49c4 py49cc@py49c4) (set! py49cf@p? (record-predicate py49c8@py49c3)) (set! py4b54@py49cf@p? py49cf@p?) (set! py49d1@make-i/o-invalid-position-error (record-constructor py49cc@py49c4)) (set! py4b55@py49d1@make-i/o-invalid-position-error py49d1@make-i/o-invalid-position-error) (set! py49d3@py49c2 (record-accessor py49c8@py49c3 '0)) (set! py4b56@py49d3@py49c2 py49d3@py49c2) (set! py49d5@i/o-invalid-position-error? (condition-predicate py49c8@py49c3)) (set! py4b57@py49d5@i/o-invalid-position-error? py49d5@i/o-invalid-position-error?) (set! py49d7@i/o-error-position (condition-accessor py49c8@py49c3 py49d3@py49c2)) (set! py4b58@py49d7@i/o-error-position py49d7@i/o-error-position) (set! py49d9@&i/o-invalid-position-rtd py49c8@py49c3) (set! py4b59@py49d9@&i/o-invalid-position-rtd py49d9@&i/o-invalid-position-rtd) (set! py49db@&i/o-invalid-position-rcd py49cc@py49c4) (set! py4b5a@py49db@&i/o-invalid-position-rcd py49db@&i/o-invalid-position-rcd) (set! py49e3@py49de (make-record-type-descriptor '&i/o-filename py4987@py4982 'py49e1 '#f '#f '#((immutable filename)))) (set! py4b5b@py49e3@py49de py49e3@py49de) (set! py49e5@py49e0 '#f) (set! py4b5c@py49e5@py49e0 py49e5@py49e0) (set! py49e7@py49df (make-record-constructor-descriptor py49e3@py49de py498b@py4983 py49e5@py49e0)) (set! py4b5d@py49e7@py49df py49e7@py49df) (set! py49ea@p? (record-predicate py49e3@py49de)) (set! py4b5e@py49ea@p? py49ea@p?) (set! py49ec@make-i/o-filename-error (record-constructor py49e7@py49df)) (set! py4b5f@py49ec@make-i/o-filename-error py49ec@make-i/o-filename-error) (set! py49ee@py49dd (record-accessor py49e3@py49de '0)) (set! py4b60@py49ee@py49dd py49ee@py49dd) (set! py49f0@i/o-filename-error? (condition-predicate py49e3@py49de)) (set! py4b61@py49f0@i/o-filename-error? py49f0@i/o-filename-error?) (set! py49f2@i/o-error-filename (condition-accessor py49e3@py49de py49ee@py49dd)) (set! py4b62@py49f2@i/o-error-filename py49f2@i/o-error-filename) (set! py49f4@&i/o-filename-rtd py49e3@py49de) (set! py4b63@py49f4@&i/o-filename-rtd py49f4@&i/o-filename-rtd) (set! py49f6@&i/o-filename-rcd py49e7@py49df) (set! py4b64@py49f6@&i/o-filename-rcd py49f6@&i/o-filename-rcd) (set! py49fc@py49f7 (make-record-type-descriptor '&i/o-file-protection py49e3@py49de 'py49fa '#f '#f '#())) (set! py4b65@py49fc@py49f7 py49fc@py49f7) (set! py49fe@py49f9 '#f) (set! py4b66@py49fe@py49f9 py49fe@py49f9) (set! py4a00@py49f8 (make-record-constructor-descriptor py49fc@py49f7 py49e7@py49df py49fe@py49f9)) (set! py4b67@py4a00@py49f8 py4a00@py49f8) (set! py4a03@p? (record-predicate py49fc@py49f7)) (set! py4b68@py4a03@p? py4a03@p?) (set! py4a05@make-i/o-file-protection-error (record-constructor py4a00@py49f8)) (set! py4b69@py4a05@make-i/o-file-protection-error py4a05@make-i/o-file-protection-error) (set! py4a07@i/o-file-protection-error? (condition-predicate py49fc@py49f7)) (set! py4b6a@py4a07@i/o-file-protection-error? py4a07@i/o-file-protection-error?) (set! py4a09@&i/o-file-protection-rtd py49fc@py49f7) (set! py4b6b@py4a09@&i/o-file-protection-rtd py4a09@&i/o-file-protection-rtd) (set! py4a0b@&i/o-file-protection-rcd py4a00@py49f8) (set! py4b6c@py4a0b@&i/o-file-protection-rcd py4a0b@&i/o-file-protection-rcd) (set! py4a11@py4a0c (make-record-type-descriptor '&i/o-file-is-read-only py49fc@py49f7 'py4a0f '#f '#f '#())) (set! py4b6d@py4a11@py4a0c py4a11@py4a0c) (set! py4a13@py4a0e '#f) (set! py4b6e@py4a13@py4a0e py4a13@py4a0e) (set! py4a15@py4a0d (make-record-constructor-descriptor py4a11@py4a0c py4a00@py49f8 py4a13@py4a0e)) (set! py4b6f@py4a15@py4a0d py4a15@py4a0d) (set! py4a18@p? (record-predicate py4a11@py4a0c)) (set! py4b70@py4a18@p? py4a18@p?) (set! py4a1a@make-i/o-file-is-read-only-error (record-constructor py4a15@py4a0d)) (set! py4b71@py4a1a@make-i/o-file-is-read-only-error py4a1a@make-i/o-file-is-read-only-error) (set! py4a1c@i/o-file-is-read-only-error? (condition-predicate py4a11@py4a0c)) (set! py4b72@py4a1c@i/o-file-is-read-only-error? py4a1c@i/o-file-is-read-only-error?) (set! py4a1e@&i/o-file-is-read-only-rtd py4a11@py4a0c) (set! py4b73@py4a1e@&i/o-file-is-read-only-rtd py4a1e@&i/o-file-is-read-only-rtd) (set! py4a20@&i/o-file-is-read-only-rcd py4a15@py4a0d) (set! py4b74@py4a20@&i/o-file-is-read-only-rcd py4a20@&i/o-file-is-read-only-rcd) (set! py4a26@py4a21 (make-record-type-descriptor '&i/o-file-already-exists py49e3@py49de 'py4a24 '#f '#f '#())) (set! py4b75@py4a26@py4a21 py4a26@py4a21) (set! py4a28@py4a23 '#f) (set! py4b76@py4a28@py4a23 py4a28@py4a23) (set! py4a2a@py4a22 (make-record-constructor-descriptor py4a26@py4a21 py49e7@py49df py4a28@py4a23)) (set! py4b77@py4a2a@py4a22 py4a2a@py4a22) (set! py4a2d@p? (record-predicate py4a26@py4a21)) (set! py4b78@py4a2d@p? py4a2d@p?) (set! py4a2f@make-i/o-file-already-exists-error (record-constructor py4a2a@py4a22)) (set! py4b79@py4a2f@make-i/o-file-already-exists-error py4a2f@make-i/o-file-already-exists-error) (set! py4a31@i/o-file-already-exists-error? (condition-predicate py4a26@py4a21)) (set! py4b7a@py4a31@i/o-file-already-exists-error? py4a31@i/o-file-already-exists-error?) (set! py4a33@&i/o-file-already-exists-rtd py4a26@py4a21) (set! py4b7b@py4a33@&i/o-file-already-exists-rtd py4a33@&i/o-file-already-exists-rtd) (set! py4a35@&i/o-file-already-exists-rcd py4a2a@py4a22) (set! py4b7c@py4a35@&i/o-file-already-exists-rcd py4a35@&i/o-file-already-exists-rcd) (set! py4a3b@py4a36 (make-record-type-descriptor '&i/o-file-does-not-exist py49e3@py49de 'py4a39 '#f '#f '#())) (set! py4b7d@py4a3b@py4a36 py4a3b@py4a36) (set! py4a3d@py4a38 '#f) (set! py4b7e@py4a3d@py4a38 py4a3d@py4a38) (set! py4a3f@py4a37 (make-record-constructor-descriptor py4a3b@py4a36 py49e7@py49df py4a3d@py4a38)) (set! py4b7f@py4a3f@py4a37 py4a3f@py4a37) (set! py4a42@p? (record-predicate py4a3b@py4a36)) (set! py4b80@py4a42@p? py4a42@p?) (set! py4a44@make-i/o-file-does-not-exist-error (record-constructor py4a3f@py4a37)) (set! py4b81@py4a44@make-i/o-file-does-not-exist-error py4a44@make-i/o-file-does-not-exist-error) (set! py4a46@i/o-file-does-not-exist-error? (condition-predicate py4a3b@py4a36)) (set! py4b82@py4a46@i/o-file-does-not-exist-error? py4a46@i/o-file-does-not-exist-error?) (set! py4a48@&i/o-file-does-not-exist-rtd py4a3b@py4a36) (set! py4b83@py4a48@&i/o-file-does-not-exist-rtd py4a48@&i/o-file-does-not-exist-rtd) (set! py4a4a@&i/o-file-does-not-exist-rcd py4a3f@py4a37) (set! py4b84@py4a4a@&i/o-file-does-not-exist-rcd py4a4a@&i/o-file-does-not-exist-rcd) (set! py4a52@py4a4d (make-record-type-descriptor '&i/o-port py4987@py4982 'py4a50 '#f '#f '#((immutable port)))) (set! py4b85@py4a52@py4a4d py4a52@py4a4d) (set! py4a54@py4a4f '#f) (set! py4b86@py4a54@py4a4f py4a54@py4a4f) (set! py4a56@py4a4e (make-record-constructor-descriptor py4a52@py4a4d py498b@py4983 py4a54@py4a4f)) (set! py4b87@py4a56@py4a4e py4a56@py4a4e) (set! py4a59@p? (record-predicate py4a52@py4a4d)) (set! py4b88@py4a59@p? py4a59@p?) (set! py4a5b@make-i/o-port-error (record-constructor py4a56@py4a4e)) (set! py4b89@py4a5b@make-i/o-port-error py4a5b@make-i/o-port-error) (set! py4a5d@py4a4c (record-accessor py4a52@py4a4d '0)) (set! py4b8a@py4a5d@py4a4c py4a5d@py4a4c) (set! py4a5f@i/o-port-error? (condition-predicate py4a52@py4a4d)) (set! py4b8b@py4a5f@i/o-port-error? py4a5f@i/o-port-error?) (set! py4a61@i/o-error-port (condition-accessor py4a52@py4a4d py4a5d@py4a4c)) (set! py4b8c@py4a61@i/o-error-port py4a61@i/o-error-port) (set! py4a63@&i/o-port-rtd py4a52@py4a4d) (set! py4b8d@py4a63@&i/o-port-rtd py4a63@&i/o-port-rtd) (set! py4a65@&i/o-port-rcd py4a56@py4a4e) (set! py4b8e@py4a65@&i/o-port-rcd py4a65@&i/o-port-rcd) (set! py4a6b@py4a66 (make-record-type-descriptor '&i/o-decoding py4a52@py4a4d 'py4a69 '#f '#f '#())) (set! py4b8f@py4a6b@py4a66 py4a6b@py4a66) (set! py4a6d@py4a68 '#f) (set! py4b90@py4a6d@py4a68 py4a6d@py4a68) (set! py4a6f@py4a67 (make-record-constructor-descriptor py4a6b@py4a66 py4a56@py4a4e py4a6d@py4a68)) (set! py4b91@py4a6f@py4a67 py4a6f@py4a67) (set! py4a72@p? (record-predicate py4a6b@py4a66)) (set! py4b92@py4a72@p? py4a72@p?) (set! py4a74@make-i/o-decoding-error (record-constructor py4a6f@py4a67)) (set! py4b93@py4a74@make-i/o-decoding-error py4a74@make-i/o-decoding-error) (set! py4a76@i/o-decoding-error? (condition-predicate py4a6b@py4a66)) (set! py4b94@py4a76@i/o-decoding-error? py4a76@i/o-decoding-error?) (set! py4a78@&i/o-decoding-rtd py4a6b@py4a66) (set! py4b95@py4a78@&i/o-decoding-rtd py4a78@&i/o-decoding-rtd) (set! py4a7a@&i/o-decoding-rcd py4a6f@py4a67) (set! py4b96@py4a7a@&i/o-decoding-rcd py4a7a@&i/o-decoding-rcd) (set! py4a82@py4a7d (make-record-type-descriptor '&i/o-encoding py4a52@py4a4d 'py4a80 '#f '#f '#((immutable char)))) (set! py4b97@py4a82@py4a7d py4a82@py4a7d) (set! py4a84@py4a7f '#f) (set! py4b98@py4a84@py4a7f py4a84@py4a7f) (set! py4a86@py4a7e (make-record-constructor-descriptor py4a82@py4a7d py4a56@py4a4e py4a84@py4a7f)) (set! py4b99@py4a86@py4a7e py4a86@py4a7e) (set! py4a89@p? (record-predicate py4a82@py4a7d)) (set! py4b9a@py4a89@p? py4a89@p?) (set! py4a8b@make-i/o-encoding-error (record-constructor py4a86@py4a7e)) (set! py4b9b@py4a8b@make-i/o-encoding-error py4a8b@make-i/o-encoding-error) (set! py4a8d@py4a7c (record-accessor py4a82@py4a7d '0)) (set! py4b9c@py4a8d@py4a7c py4a8d@py4a7c) (set! py4a8f@i/o-encoding-error? (condition-predicate py4a82@py4a7d)) (set! py4b9d@py4a8f@i/o-encoding-error? py4a8f@i/o-encoding-error?) (set! py4a91@i/o-encoding-error-char (condition-accessor py4a82@py4a7d py4a8d@py4a7c)) (set! py4b9e@py4a91@i/o-encoding-error-char py4a91@i/o-encoding-error-char) (set! py4a93@&i/o-encoding-rtd py4a82@py4a7d) (set! py4b9f@py4a93@&i/o-encoding-rtd py4a93@&i/o-encoding-rtd) (set! py4a95@&i/o-encoding-rcd py4a86@py4a7e) (set! py4ba0@py4a95@&i/o-encoding-rcd py4a95@&i/o-encoding-rcd) (set! py4a9b@py4a96 (make-record-type-descriptor '&no-infinities py4927@py4922 'py4a99 '#f '#f '#())) (set! py4ba1@py4a9b@py4a96 py4a9b@py4a96) (set! py4a9d@py4a98 '#f) (set! py4ba2@py4a9d@py4a98 py4a9d@py4a98) (set! py4a9f@py4a97 (make-record-constructor-descriptor py4a9b@py4a96 py492b@py4923 py4a9d@py4a98)) (set! py4ba3@py4a9f@py4a97 py4a9f@py4a97) (set! py4aa2@p? (record-predicate py4a9b@py4a96)) (set! py4ba4@py4aa2@p? py4aa2@p?) (set! py4aa4@make-no-infinities-violation (record-constructor py4a9f@py4a97)) (set! py4ba5@py4aa4@make-no-infinities-violation py4aa4@make-no-infinities-violation) (set! py4aa6@no-infinities-violation? (condition-predicate py4a9b@py4a96)) (set! py4ba6@py4aa6@no-infinities-violation? py4aa6@no-infinities-violation?) (set! py4aa8@&no-infinities-rtd py4a9b@py4a96) (set! py4ba7@py4aa8@&no-infinities-rtd py4aa8@&no-infinities-rtd) (set! py4aaa@&no-infinities-rcd py4a9f@py4a97) (set! py4ba8@py4aaa@&no-infinities-rcd py4aaa@&no-infinities-rcd) (set! py4ab0@py4aab (make-record-type-descriptor '&no-nans py4927@py4922 'py4aae '#f '#f '#())) (set! py4ba9@py4ab0@py4aab py4ab0@py4aab) (set! py4ab2@py4aad '#f) (set! py4baa@py4ab2@py4aad py4ab2@py4aad) (set! py4ab4@py4aac (make-record-constructor-descriptor py4ab0@py4aab py492b@py4923 py4ab2@py4aad)) (set! py4bab@py4ab4@py4aac py4ab4@py4aac) (set! py4ab7@p? (record-predicate py4ab0@py4aab)) (set! py4bac@py4ab7@p? py4ab7@p?) (set! py4ab9@make-no-nans-violation (record-constructor py4ab4@py4aac)) (set! py4bad@py4ab9@make-no-nans-violation py4ab9@make-no-nans-violation) (set! py4abb@no-nans-violation? (condition-predicate py4ab0@py4aab)) (set! py4bae@py4abb@no-nans-violation? py4abb@no-nans-violation?) (set! py4abd@&no-nans-rtd py4ab0@py4aab) (set! py4baf@py4abd@&no-nans-rtd py4abd@&no-nans-rtd) (set! py4abf@&no-nans-rcd py4ab4@py4aac) (set! py4bb0@py4abf@&no-nans-rcd py4abf@&no-nans-rcd) (void))
(begin (begin (py2646@py25fb@current-primitive-locations (lambda (py507c@x) (let ((py507e@t (assq py507c@x '((&no-nans-rcd . py4bb0@py4abf@&no-nans-rcd) (&no-nans-rtd . py4baf@py4abd@&no-nans-rtd) (&no-infinities-rcd . py4ba8@py4aaa@&no-infinities-rcd) (&no-infinities-rtd . py4ba7@py4aa8@&no-infinities-rtd) (&i/o-encoding-rcd . py4ba0@py4a95@&i/o-encoding-rcd) (&i/o-encoding-rtd . py4b9f@py4a93@&i/o-encoding-rtd) (&i/o-decoding-rcd . py4b96@py4a7a@&i/o-decoding-rcd) (&i/o-decoding-rtd . py4b95@py4a78@&i/o-decoding-rtd) (&i/o-port-rcd . py4b8e@py4a65@&i/o-port-rcd) (&i/o-port-rtd . py4b8d@py4a63@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . py4b84@py4a4a@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . py4b83@py4a48@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . py4b7c@py4a35@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . py4b7b@py4a33@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . py4b74@py4a20@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . py4b73@py4a1e@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . py4b6c@py4a0b@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . py4b6b@py4a09@&i/o-file-protection-rtd) (&i/o-filename-rcd . py4b64@py49f6@&i/o-filename-rcd) (&i/o-filename-rtd . py4b63@py49f4@&i/o-filename-rtd) (&i/o-invalid-position-rcd . py4b5a@py49db@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . py4b59@py49d9@&i/o-invalid-position-rtd) (&i/o-write-rcd . py4b50@py49c0@&i/o-write-rcd) (&i/o-write-rtd . py4b4f@py49be@&i/o-write-rtd) (&i/o-read-rcd . py4b48@py49ab@&i/o-read-rcd) (&i/o-read-rtd . py4b47@py49a9@&i/o-read-rtd) (&i/o-rcd . py4b40@py4996@&i/o-rcd) (&i/o-rtd . py4b3f@py4994@&i/o-rtd) (&undefined-rcd . py4b38@py4981@&undefined-rcd) (&undefined-rtd . py4b37@py497f@&undefined-rtd) (&syntax-rcd . py4b30@py496c@&syntax-rcd) (&syntax-rtd . py4b2f@py496a@&syntax-rtd) (&lexical-rcd . py4b24@py494b@&lexical-rcd) (&lexical-rtd . py4b23@py4949@&lexical-rtd) (&implementation-restriction-rcd . py4b1c@py4936@&implementation-restriction-rcd) (&implementation-restriction-rtd . py4b1b@py4934@&implementation-restriction-rtd) (&non-continuable-rcd . py4b14@py4921@&non-continuable-rcd) (&non-continuable-rtd . py4b13@py491f@&non-continuable-rtd) (&who-rcd . py4b0c@py490c@&who-rcd) (&who-rtd . py4b0b@py490a@&who-rtd) (&irritants-rcd . py4b02@py48f1@&irritants-rcd) (&irritants-rtd . py4b01@py48ef@&irritants-rtd) (&assertion-rcd . py4af8@py48d6@&assertion-rcd) (&assertion-rtd . py4af7@py48d4@&assertion-rtd) (&violation-rcd . py4af0@py48c1@&violation-rcd) (&violation-rtd . py4aef@py48bf@&violation-rtd) (&error-rcd . py4ae8@py48ac@&error-rcd) (&error-rtd . py4ae7@py48aa@&error-rtd) (&serious-rcd . py4ae0@py4897@&serious-rcd) (&serious-rtd . py4adf@py4895@&serious-rtd) (&warning-rcd . py4ad8@py4882@&warning-rcd) (&warning-rtd . py4ad7@py4880@&warning-rtd) (&message-rcd . py4ad0@py486d@&message-rcd) (&message-rtd . py4acf@py486b@&message-rtd) (&condition-rcd . py4ac6@py480e@&condition-rcd) (&condition-rtd . py4ac5@py480c@&condition-rtd) (syntax-error . py47e8@py2d8c@syntax-error) (syntax-dispatch . py4786@py2cb0@syntax-dispatch) (load . py4d25@py4bd0@load) (interaction-environment . py47f1@py2d9e@interaction-environment) (library-path . py28ad@py26e9@library-path) (mosh-cache-dir . py25f4@py24d4@mosh-cache-dir) (make-parameter . py25f3@py24d2@make-parameter) (make-variable-transformer . py4743@py2adb@make-variable-transformer) (identifier? . py47eb@py2d92@identifier?) (generate-temporaries . py47e1@py2d7e@generate-temporaries) (free-identifier=? . py47e2@py2d80@free-identifier=?) (syntax->datum . py47ed@py2d96@syntax->datum) (datum->syntax . py47ec@py2d94@datum->syntax) (bound-identifier=? . py47e3@py2d82@bound-identifier=?) (make-i/o-write-error . py4b4d@py49ba@make-i/o-write-error) (make-i/o-read-error . py4b45@py49a5@make-i/o-read-error) (make-i/o-port-error . py4b89@py4a5b@make-i/o-port-error) (make-i/o-invalid-position-error . py4b55@py49d1@make-i/o-invalid-position-error) (make-i/o-filename-error . py4b5f@py49ec@make-i/o-filename-error) (make-i/o-file-protection-error . py4b69@py4a05@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . py4b71@py4a1a@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . py4b81@py4a44@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . py4b79@py4a2f@make-i/o-file-already-exists-error) (make-i/o-error . py4b3d@py4990@make-i/o-error) (make-i/o-encoding-error . py4b9b@py4a8b@make-i/o-encoding-error) (make-i/o-decoding-error . py4b93@py4a74@make-i/o-decoding-error) (i/o-write-error? . py4b4e@py49bc@i/o-write-error?) (i/o-read-error? . py4b46@py49a7@i/o-read-error?) (i/o-port-error? . py4b8b@py4a5f@i/o-port-error?) (i/o-invalid-position-error? . py4b57@py49d5@i/o-invalid-position-error?) (i/o-filename-error? . py4b61@py49f0@i/o-filename-error?) (i/o-file-protection-error? . py4b6a@py4a07@i/o-file-protection-error?) (i/o-file-is-read-only-error? . py4b72@py4a1c@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . py4b82@py4a46@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . py4b7a@py4a31@i/o-file-already-exists-error?) (i/o-error? . py4b3e@py4992@i/o-error?) (i/o-error-position . py4b58@py49d7@i/o-error-position) (i/o-error-port . py4b8c@py4a61@i/o-error-port) (i/o-error-filename . py4b62@py49f2@i/o-error-filename) (i/o-encoding-error? . py4b9d@py4a8f@i/o-encoding-error?) (i/o-encoding-error-char . py4b9e@py4a91@i/o-encoding-error-char) (i/o-decoding-error? . py4b94@py4a76@i/o-decoding-error?) (scheme-report-environment . py47d8@py2d6c@scheme-report-environment) (null-environment . py47d7@py2d6a@null-environment) (command-line . py4d22@py4bca@command-line) (eval . py47da@py2d70@eval) (environment . py47d6@py2d68@environment) (who-condition? . py4b09@py4906@who-condition?) (warning? . py4ad6@py487e@warning?) (violation? . py4aee@py48bd@violation?) (undefined-violation? . py4b36@py497d@undefined-violation?) (syntax-violation? . py4b2c@py4964@syntax-violation?) (syntax-violation-subform . py4b2e@py4968@syntax-violation-subform) (syntax-violation-form . py4b2d@py4966@syntax-violation-form) (syntax-violation . py47ea@py2d90@syntax-violation) (serious-condition? . py4ade@py4893@serious-condition?) (non-continuable-violation? . py4b12@py491d@non-continuable-violation?) (message-condition? . py4acd@py4867@message-condition?) (make-who-condition . py4b07@py4902@make-who-condition) (make-warning . py4ad5@py487c@make-warning) (make-violation . py4aed@py48bb@make-violation) (make-undefined-violation . py4b35@py497b@make-undefined-violation) (make-syntax-violation . py4b29@py495e@make-syntax-violation) (make-serious-condition . py4add@py4891@make-serious-condition) (make-non-continuable-violation . py4b11@py491b@make-non-continuable-violation) (make-message-condition . py4acb@py4863@make-message-condition) (make-lexical-violation . py4b21@py4945@make-lexical-violation) (make-irritants-condition . py4afd@py48e7@make-irritants-condition) (make-implementation-restriction-violation . py4b19@py4930@make-implementation-restriction-violation) (make-error . py4ae5@py48a6@make-error) (make-assertion-violation . py4af5@py48d0@make-assertion-violation) (lexical-violation? . py4b22@py4947@lexical-violation?) (irritants-condition? . py4aff@py48eb@irritants-condition?) (implementation-restriction-violation? . py4b1a@py4932@implementation-restriction-violation?) (error? . py4ae6@py48a8@error?) (condition-who . py4b0a@py4908@condition-who) (condition-message . py4ace@py4869@condition-message) (condition-irritants . py4b00@py48ed@condition-irritants) (assertion-violation? . py4af6@py48d2@assertion-violation?) (no-nans-violation? . py4bae@py4abb@no-nans-violation?) (no-infinities-violation? . py4ba6@py4aa6@no-infinities-violation?) (make-no-nans-violation . py4bad@py4ab9@make-no-nans-violation) (make-no-infinities-violation . py4ba5@py4aa4@make-no-infinities-violation) (assertion-error . py47e7@py2d8a@assertion-error))))) (if py507e@t (cdr py507e@t) '#f)))) (py28bd@py2709@install-library 'py5059 '(mosh interaction) '() '() '() '() '((regexp? . py5051) (alist->eq-hash-table . py504d) (format . py504a) (string-split . py503f) (call-process . py5039) (set-current-directory! . py5035) (expand-path . py5034) (current-directory . py5033) (%spawn . py5032) (%waitpid . py5031) (simple-struct-name . py5030) (simple-struct-set! . py502f) (simple-struct-ref . py502e) (make-simple-struct . py502d) (simple-struct? . py502c) (pointer-ref-c-int64 . py502b) (pointer-ref-c-int32 . py502a) (pointer-ref-c-int16 . py5029) (pointer-ref-c-int8 . py5028) (pointer-ref-c-uint64 . py5027) (pointer-ref-c-uint32 . py5026) (pointer-ref-c-uint16 . py5025) (pointer-ref-c-uint8 . py5024) (pointer-set-c-uint64! . py5023) (pointer-set-c-uint32! . py5022) (pointer-set-c-uint16! . py5021) (pointer-set-c-uint8! . py5020) (pointer-set-c-int64! . py501f) (pointer-set-c-int32! . py501e) (pointer-set-c-int16! . py501d) (pointer-set-c-int8! . py501c) (pointer-set-c-pointer! . py501b) (pointer-set-c-double! . py501a) (pointer-set-c-float! . py5019) (pointer-set-c-long-long! . py5018) (pointer-set-c-long! . py5017) (pointer-set-c-int! . py5016) (pointer-set-c-short! . py5015) (pointer-set-c-char! . py5014) (pointer-ref-c-pointer . py5013) (pointer-ref-c-double . py5012) (pointer-ref-c-float . py5011) (pointer-ref-c-unsigned-long-long . py5010) (pointer-ref-c-signed-long-long . py500f) (pointer-ref-c-unsigned-long . py500e) (pointer-ref-c-signed-long . py500d) (pointer-ref-c-unsigned-int . py500c) (pointer-ref-c-signed-int . py500b) (pointer-ref-c-unsigned-short . py500a) (pointer-ref-c-signed-short . py5009) (pointer-ref-c-unsigned-char . py5008) (pointer-ref-c-signed-char . py5007) (pointer->integer . py5006) (integer->pointer . py5005) (pointer? . py5004) (shared-errno . py5003) (%ffi-supported? . py5000) (%ffi-pointer->string . py4fff) (%ffi-call->string-or-zero . py4ffe) (%ffi-call->double . py4ffd) (%ffi-call->void* . py4ffc) (%ffi-call->void . py4ffb) (%ffi-call->char . py4ffa) (%ffi-call->int . py4ff9) (%ffi-lookup . py4ff8) (%ffi-open . py4ff7) (%fork . py4ff6) (%pipe . py4ff5) (p . py4ff4) (whereis . py4fd8) (register . py4fd7) (vm-join! . py4fd6) (vm-set-value! . py4fd5) (vm? . py4fd4) (main-vm? . py4fd3) (vm-eval . py4fd2) (vm-self . py4fd1) (vm-start! . py4fd0) (make-vm . py4fcf) (mutex-try-lock! . py4fce) (mutex-unlock! . py4fcd) (mutex-lock! . py4fcc) (mutex? . py4fcb) (make-mutex . py4fca) (condition-variable-notify-all! . py4fc9) (condition-variable-notify! . py4fc8) (condition-variable-wait! . py4fc7) (make-condition-variable . py4fc6) (string-upcase . py4fae) (string-titlecase . py4fad) (string-normalize-nfkd . py4fac) (string-normalize-nfkc . py4fab) (string-normalize-nfd . py4faa) (string-normalize-nfc . py4fa9) (string-foldcase . py4fa8) (string-downcase . py4fa7) (string-ci>? . py4fa6) (string-ci>=? . py4fa5) (string-ci=? . py4fa4) (string-ci<? . py4fa3) (string-ci<=? . py4fa2) (char-whitespace? . py4fa1) (char-upper-case? . py4fa0) (char-title-case? . py4f9f) (char-numeric? . py4f9e) (char-lower-case? . py4f9d) (char-general-category . py4f9c) (char-upcase . py4f9b) (char-titlecase . py4f9a) (char-foldcase . py4f99) (char-downcase . py4f98) (char-ci>? . py4f97) (char-ci>=? . py4f96) (char-ci=? . py4f95) (char-ci<? . py4f94) (char-ci<=? . py4f93) (char-alphabetic? . py4f92) (make-variable-transformer . py2ada) (identifier? . py2d91) (generate-temporaries . py2d7d) (free-identifier=? . py2d7f) (syntax->datum . py2d95) (datum->syntax . py2d93) (bound-identifier=? . py2d81) (record-type-descriptor? . py4f91) (record-predicate . py4f90) (record-mutator . py4f8f) (record-constructor . py4f8e) (record-accessor . py4f8d) (make-record-type-descriptor . py4f8c) (make-record-constructor-descriptor . py4f8b) (record? . py4f8a) (record-type-uid . py4f89) (record-type-sealed? . py4f88) (record-type-parent . py4f87) (record-type-opaque? . py4f86) (record-type-name . py4f85) (record-type-generative? . py4f84) (record-type-field-names . py4f83) (record-rtd . py4f82) (record-field-mutable? . py4f81) (delete-file . py4f80) (file-exists? . py4f7f) (vector-sort! . py4f7e) (vector-sort . py4f7d) (list-sort . py4f7c) (symbol-hash . py4f7b) (string-ci-hash . py4f7a) (string-hash . py4f79) (equal-hash . py4f78) (hashtable-equivalence-function . py4f77) (make-hashtable . py4f76) (hashtable-hash-function . py4f75) (make-eqv-hashtable . py4f74) (make-eq-hashtable . py4f73) (hashtable? . py4f72) (hashtable-update! . py4f71) (hashtable-size . py4f70) (hashtable-set! . py4f6f) (hashtable-ref . py4f6e) (hashtable-mutable? . py4f6d) (hashtable-keys . py4f6c) (hashtable-entries . py4f6b) (hashtable-delete! . py4f6a) (hashtable-copy . py4f69) (hashtable-contains? . py4f68) (hashtable-clear! . py4f67) (call-with-output-file . py4f66) (call-with-input-file . py4f65) (write-char . py4f64) (write . py4f63) (with-output-to-file . py4f62) (with-input-from-file . py4f61) (read-char . py4f60) (read . py4f5f) (peek-char . py4f5e) (open-output-file . py4f5d) (open-input-file . py4f5c) (newline . py4f5b) (display . py4f5a) (close-output-port . py4f59) (close-input-port . py4f58) (eof-object? . py4f57) (eof-object . py4f56) (current-error-port . py4f55) (current-output-port . py4f54) (current-input-port . py4f53) (output-port? . py4f52) (input-port? . py4f51) (utf-8-codec . py4f50) (utf-16-codec . py4f4f) (transcoder-error-handling-mode . py4f4e) (transcoder-eol-style . py4f4d) (transcoder-codec . py4f4c) (transcoded-port . py4f4b) (textual-port? . py4f4a) (string->bytevector . py4f49) (standard-output-port . py4f48) (standard-input-port . py4f47) (standard-error-port . py4f46) (set-port-position! . py4f45) (put-u8 . py4f44) (put-string . py4f43) (put-datum . py4f42) (put-char . py4f41) (put-bytevector . py4f40) (port? . py4f3f) (port-transcoder . py4f3e) (port-position . py4f3d) (port-has-set-port-position!? . py4f3c) (port-has-port-position? . py4f3b) (port-eof? . py4f3a) (output-port-buffer-mode . py4f39) (open-string-output-port . py4f38) (open-string-input-port . py4f37) (open-file-output-port . py4f36) (open-file-input/output-port . py4f35) (open-file-input-port . py4f34) (open-bytevector-output-port . py4f33) (open-bytevector-input-port . py4f32) (native-transcoder . py4f31) (native-eol-style . py4f30) (make-transcoder . py4f2f) (latin-1-codec . py4f2e) (make-i/o-write-error . py49b9) (make-i/o-read-error . py49a4) (make-i/o-port-error . py4a5a) (make-i/o-invalid-position-error . py49d0) (make-i/o-filename-error . py49eb) (make-i/o-file-protection-error . py4a04) (make-i/o-file-is-read-only-error . py4a19) (make-i/o-file-does-not-exist-error . py4a43) (make-i/o-file-already-exists-error . py4a2e) (make-i/o-error . py498f) (make-i/o-encoding-error . py4a8a) (make-i/o-decoding-error . py4a73) (make-custom-textual-output-port . py4f2d) (make-custom-textual-input/output-port . py4f2c) (make-custom-textual-input-port . py4f2b) (make-custom-binary-output-port . py4f2a) (make-custom-binary-input/output-port . py4f29) (make-custom-binary-input-port . py4f28) (make-bytevector . py4f27) (lookahead-u8 . py4f26) (lookahead-char . py4f25) (i/o-write-error? . py49bb) (i/o-read-error? . py49a6) (i/o-port-error? . py4a5e) (i/o-invalid-position-error? . py49d4) (i/o-filename-error? . py49ef) (i/o-file-protection-error? . py4a06) (i/o-file-is-read-only-error? . py4a1b) (i/o-file-does-not-exist-error? . py4a45) (i/o-file-already-exists-error? . py4a30) (i/o-error? . py4991) (i/o-error-position . py49d6) (i/o-error-port . py4a60) (i/o-error-filename . py49f1) (i/o-encoding-error? . py4a8e) (i/o-encoding-error-char . py4a90) (i/o-decoding-error? . py4a75) (get-u8 . py4f24) (get-string-n! . py4f23) (get-string-n . py4f22) (get-string-all . py4f21) (get-line . py4f20) (get-datum . py4f1f) (get-char . py4f1e) (get-bytevector-some . py4f1d) (get-bytevector-n! . py4f1c) (get-bytevector-n . py4f1b) (get-bytevector-all . py4f1a) (flush-output-port . py4f19) (close-port . py4f18) (exit . py4f10) (command-line . py4bc9) (string-fill! . py4f0f) (string-set! . py4f0e) (set-cdr! . py4f0d) (set-car! . py4f0c) (remove . py4f0b) (remv . py4f0a) (remp . py4f09) (remq . py4f08) (partition . py4f07) (memv . py4f06) (memq . py4f05) (memp . py4f04) (member . py4f03) (exists . py4f02) (for-all . py4f01) (fold-right . py4f00) (fold-left . py4eff) (find . py4efe) (filter . py4efd) (cons* . py4efc) (assv . py4efb) (assq . py4efa) (assp . py4ef9) (assoc . py4ef8) (call-with-string-output-port . py4ef7) (call-with-port . py4ef6) (call-with-bytevector-output-port . py4ef5) (bytevector->string . py4ef4) (buffer-mode? . py4ef3) (binary-port? . py4ef2) (with-exception-handler . py4ef1) (raise-continuable . py4ef0) (raise . py4eef) (eval . py2d6f) (environment . py2d67) (make-enumeration . py4eee) (enum-set=? . py4eed) (enum-set-universe . py4eec) (enum-set-union . py4eeb) (enum-set-subset? . py4eea) (enum-set-projection . py4ee9) (enum-set-member? . py4ee8) (enum-set-intersection . py4ee7) (enum-set-indexer . py4ee6) (enum-set-difference . py4ee5) (enum-set-constructor . py4ee4) (enum-set-complement . py4ee3) (enum-set->list . py4ee2) (who-condition? . py4905) (warning? . py487d) (violation? . py48bc) (undefined-violation? . py497c) (syntax-violation? . py4963) (syntax-violation-subform . py4967) (syntax-violation-form . py4965) (syntax-violation . py2d8f) (simple-conditions . py4ee1) (serious-condition? . py4892) (non-continuable-violation? . py491c) (message-condition? . py4866) (make-who-condition . py4901) (make-warning . py487b) (make-violation . py48ba) (make-undefined-violation . py497a) (make-syntax-violation . py495d) (make-serious-condition . py4890) (make-non-continuable-violation . py491a) (make-message-condition . py4862) (make-lexical-violation . py4944) (make-irritants-condition . py48e6) (make-implementation-restriction-violation . py492f) (make-error . py48a5) (make-assertion-violation . py48cf) (lexical-violation? . py4946) (irritants-condition? . py48ea) (implementation-restriction-violation? . py4931) (error? . py48a7) (condition-who . py4907) (condition-predicate . py4ee0) (condition-message . py4868) (condition-irritants . py48ec) (condition-accessor . py4edf) (condition . py4ede) (assertion-violation? . py48d1) (condition? . py4edd) (utf32->string . py4edc) (utf16->string . py4edb) (utf8->string . py4eda) (uint-list->bytevector . py4ed9) (u8-list->bytevector . py4ed8) (string->utf8 . py4ed7) (string->utf32 . py4ed6) (string->utf16 . py4ed5) (sint-list->bytevector . py4ed4) (native-endianness . py4ed3) (bytevector? . py4ed2) (bytevector=? . py4ed1) (bytevector-uint-set! . py4ed0) (bytevector-uint-ref . py4ecf) (bytevector-u8-set! . py4ece) (bytevector-u8-ref . py4ecd) (bytevector-u64-set! . py4ecc) (bytevector-u64-ref . py4ecb) (bytevector-u64-native-set! . py4eca) (bytevector-u64-native-ref . py4ec9) (bytevector-u32-set! . py4ec8) (bytevector-u32-ref . py4ec7) (bytevector-u32-native-set! . py4ec6) (bytevector-u32-native-ref . py4ec5) (bytevector-u16-set! . py4ec4) (bytevector-u16-ref . py4ec3) (bytevector-u16-native-set! . py4ec2) (bytevector-u16-native-ref . py4ec1) (bytevector-sint-set! . py4ec0) (bytevector-sint-ref . py4ebf) (bytevector-s8-set! . py4ebe) (bytevector-s8-ref . py4ebd) (bytevector-s64-set! . py4ebc) (bytevector-s64-ref . py4ebb) (bytevector-s64-native-set! . py4eba) (bytevector-s64-native-ref . py4eb9) (bytevector-s32-set! . py4eb8) (bytevector-s32-ref . py4eb7) (bytevector-s32-native-set! . py4eb6) (bytevector-s32-native-ref . py4eb5) (bytevector-s16-set! . py4eb4) (bytevector-s16-ref . py4eb3) (bytevector-s16-native-set! . py4eb2) (bytevector-s16-native-ref . py4eb1) (bytevector-length . py4eb0) (bytevector-ieee-single-ref . py4eaf) (bytevector-ieee-single-set! . py4eae) (bytevector-ieee-single-native-set! . py4ead) (bytevector-ieee-single-native-ref . py4eac) (bytevector-ieee-double-set! . py4eab) (bytevector-ieee-double-ref . py4eaa) (bytevector-ieee-double-native-set! . py4ea9) (bytevector-ieee-double-native-ref . py4ea8) (bytevector-fill! . py4ea7) (bytevector-copy! . py4ea6) (bytevector-copy . py4ea5) (bytevector->uint-list . py4ea4) (bytevector->u8-list . py4ea3) (bytevector->sint-list . py4ea2) (no-nans-violation? . py4aba) (no-infinities-violation? . py4aa5) (make-no-nans-violation . py4ab8) (make-no-infinities-violation . py4aa3) (real->flonum . py4ea1) (flzero? . py4ea0) (fltruncate . py4e9f) (fltan . py4e9e) (flsqrt . py4e9d) (flsin . py4e9c) (flround . py4e9b) (flpositive? . py4e9a) (flonum? . py4e99) (flodd? . py4e98) (flnumerator . py4e97) (flnegative? . py4e96) (flnan? . py4e95) (flmod0 . py4e94) (flmod . py4e93) (flmin . py4e92) (flmax . py4e91) (fllog . py4e90) (flinteger? . py4e8f) (flinfinite? . py4e8e) (flfloor . py4e8d) (flfinite? . py4e8c) (flexpt . py4e8b) (flexp . py4e8a) (fleven? . py4e89) (fldiv0-and-mod0 . py4e88) (fldiv0 . py4e87) (fldiv-and-mod . py4e86) (fldiv . py4e85) (fldenominator . py4e84) (flcos . py4e83) (flceiling . py4e82) (flatan . py4e81) (flasin . py4e80) (flacos . py4e7f) (flabs . py4e7e) (fl>? . py4e7d) (fl>=? . py4e7c) (fl=? . py4e7b) (fl<? . py4e7a) (fl<=? . py4e79) (fl/ . py4e78) (fl- . py4e77) (fl+ . py4e76) (fl* . py4e75) (fixnum->flonum . py4e74) (fxzero? . py4e73) (fxxor . py4e72) (fxrotate-bit-field . py4e71) (fxreverse-bit-field . py4e70) (fxpositive? . py4e6f) (fxodd? . py4e6e) (fxnot . py4e6d) (fxnegative? . py4e6c) (fxmod0 . py4e6b) (fxmod . py4e6a) (fxmin . py4e69) (fxmax . py4e68) (fxlength . py4e67) (fxior . py4e66) (fxif . py4e65) (fxfirst-bit-set . py4e64) (fxeven? . py4e63) (fxdiv0-and-mod0 . py4e62) (fxdiv0 . py4e61) (fxdiv-and-mod . py4e60) (fxdiv . py4e5f) (fxcopy-bit-field . py4e5e) (fxcopy-bit . py4e5d) (fxbit-set? . py4e5c) (fxbit-field . py4e5b) (fxbit-count . py4e5a) (fxarithmetic-shift-right . py4e59) (fxarithmetic-shift-left . py4e58) (fxarithmetic-shift . py4e57) (fxand . py4e56) (fx>? . py4e55) (fx>=? . py4e54) (fx=? . py4e53) (fx<? . py4e52) (fx<=? . py4e51) (fx-/carry . py4e50) (fx- . py4e4f) (fx+/carry . py4e4e) (fx+ . py4e4d) (fx*/carry . py4e4c) (fx* . py4e4b) (greatest-fixnum . py4e4a) (least-fixnum . py4e49) (fixnum-width . py4e48) (fixnum? . py4e47) (bitwise-rotate-bit-field . py4e46) (bitwise-reverse-bit-field . py4e45) (bitwise-length . py4e44) (bitwise-if . py4e43) (bitwise-first-bit-set . py4e42) (bitwise-copy-bit-field . py4e41) (bitwise-copy-bit . py4e40) (bitwise-bit-set? . py4e3f) (bitwise-bit-field . py4e3e) (bitwise-bit-count . py4e3d) (bitwise-xor . py4e3c) (bitwise-ior . py4e3b) (bitwise-and . py4e3a) (bitwise-not . py4e39) (bitwise-arithmetic-shift-right . py4e38) (bitwise-arithmetic-shift-left . py4e37) (bitwise-arithmetic-shift . py4e36) (zero? . py4e35) (vector? . py4e34) (vector-set! . py4e33) (vector-ref . py4e32) (vector-map . py4e31) (vector-length . py4e30) (vector-for-each . py4e2f) (vector-fill! . py4e2e) (vector->list . py4e2d) (vector . py4e2c) (values . py4e2b) (truncate . py4e2a) (tan . py4e29) (symbol? . py4e28) (symbol=? . py4e27) (symbol->string . py4e26) (substring . py4e25) (string? . py4e24) (string>? . py4e23) (string>=? . py4e22) (string=? . py4e21) (string<? . py4e20) (string<=? . py4e1f) (string-ref . py4e1e) (string-length . py4e1d) (string-for-each . py4e1c) (string-copy . py4e1b) (string-append . py4e1a) (string->symbol . py4e19) (string->number . py4e18) (string->list . py4e17) (string . py4e16) (sqrt . py4e15) (sin . py4e14) (round . py4e13) (reverse . py4e12) (real? . py4e11) (real-valued? . py4e10) (real-part . py4e0f) (rationalize . py4e0e) (rational? . py4e0d) (rational-valued? . py4e0c) (procedure? . py4e0b) (positive? . py4e0a) (pair? . py4e09) (odd? . py4e08) (numerator . py4e07) (number? . py4e06) (number->string . py4e05) (null? . py4e04) (not . py4e03) (negative? . py4e02) (nan? . py4e01) (min . py4e00) (max . py4dff) (map . py4dfe) (make-vector . py4dfd) (make-string . py4dfc) (make-rectangular . py4dfb) (make-polar . py4dfa) (magnitude . py4df9) (log . py4df8) (list? . py4df7) (list-tail . py4df6) (list-ref . py4df5) (list->vector . py4df4) (list->string . py4df3) (list . py4df2) (length . py4df1) (lcm . py4df0) (integer? . py4def) (integer-valued? . py4dee) (integer->char . py4ded) (infinite? . py4dec) (inexact? . py4deb) (inexact . py4dea) (imag-part . py4de9) (gcd . py4de8) (for-each . py4de7) (floor . py4de6) (finite? . py4de5) (expt . py4de4) (exp . py4de3) (exact? . py4de2) (exact-integer-sqrt . py4de1) (exact . py4de0) (even? . py4ddf) (error . py4dde) (eqv? . py4ddd) (equal? . py4ddc) (eq? . py4ddb) (dynamic-wind . py4dda) (div0-and-mod0 . py4dd9) (mod0 . py4dd8) (div0 . py4dd7) (div-and-mod . py4dd6) (mod . py4dd5) (div . py4dd4) (denominator . py4dd3) (cos . py4dd2) (cons . py4dd1) (complex? . py4dd0) (char? . py4dcf) (char>? . py4dce) (char>=? . py4dcd) (char=? . py4dcc) (char<? . py4dcb) (char<=? . py4dca) (char->integer . py4dc9) (ceiling . py4dc8) (call-with-values . py4dc7) (call/cc . py4dc6) (call-with-current-continuation . py4dc5) (cddddr . py4dc4) (cdddar . py4dc3) (cddadr . py4dc2) (cddaar . py4dc1) (cdaddr . py4dc0) (cdadar . py4dbf) (cdaadr . py4dbe) (cdaaar . py4dbd) (cadddr . py4dbc) (caddar . py4dbb) (cadadr . py4dba) (cadaar . py4db9) (caaddr . py4db8) (caadar . py4db7) (caaadr . py4db6) (caaaar . py4db5) (cdddr . py4db4) (cddar . py4db3) (cdadr . py4db2) (cdaar . py4db1) (caddr . py4db0) (cadar . py4daf) (caadr . py4dae) (caaar . py4dad) (cddr . py4dac) (cdar . py4dab) (cadr . py4daa) (caar . py4da9) (cdr . py4da8) (car . py4da7) (boolean? . py4da6) (boolean=? . py4da5) (atan . py4da4) (assertion-violation . py4da3) (asin . py4da2) (apply . py4da1) (append . py4da0) (angle . py4d9f) (acos . py4d9e) (abs . py4d9d) (/ . py4d9c) (* . py4d9b) (- . py4d9a) (+ . py4d99) (>= . py4d98) (> . py4d97) (= . py4d96) (<= . py4d95) (< . py4d94) (library . py4d93) (&no-nans . py4d92) (&no-infinities . py4d91) (&i/o-encoding . py4d90) (&i/o-decoding . py4d8f) (&i/o-port . py4d8e) (&i/o-file-does-not-exist . py4d8d) (&i/o-file-already-exists . py4d8c) (&i/o-file-is-read-only . py4d8b) (&i/o-file-protection . py4d8a) (&i/o-filename . py4d89) (&i/o-invalid-position . py4d88) (&i/o-write . py4d87) (&i/o-read . py4d86) (&i/o . py4d85) (&undefined . py4d84) (&syntax . py4d83) (&lexical . py4d82) (&implementation-restriction . py4d81) (&non-continuable . py4d80) (&who . py4d7f) (&irritants . py4d7e) (&assertion . py4d7d) (&violation . py4d7c) (&error . py4d7b) (&serious . py4d7a) (&warning . py4d79) (&message . py4d78) (&condition . py4d77) (define-condition-type . py4d76) (define-enumeration . py4d75) (define-record-type . py4d74) (parent-rtd . py4d73) (nongenerative . py4d72) (opaque . py4d71) (sealed . py4d70) (protocol . py4d6f) (parent . py4d6e) (immutable . py4d6d) (mutable . py4d6c) (fields . py4d6b) (error-handling-mode . py4d6a) (file-options . py4d69) (buffer-mode . py4d68) (eol-style . py4d67) (guard . py4d66) (unsyntax-splicing . py4d63) (unsyntax . py4d62) (unquote-splicing . py4d61) (unquote . py4d60) (_ . py4d5f) (else . py4d5e) (=> . py4d5d) (... . py4d5c) (assert . py4d5b) (endianness . py4d5a) (time . py4d58) (do . py4d57) (cond . py4d56) (let* . py4d55) (let*-values . py4d54) (let-values . py4d53) (identifier-syntax . py4d52) (with-syntax . py4d51) (quasisyntax . py4d50) (quasiquote . py4d4f) (syntax-rules . py4d4e) (include . py4d4d) (record-constructor-descriptor . py4d4b) (record-type-descriptor . py4d4a) (case . py4d49) (unless . py4d47) (when . py4d46) (or . py4d45) (and . py4d44) (if . py4d43) (let . py4d42) (letrec* . py4d41) (letrec . py4d40) (case-lambda . py4d3e) (lambda . py4d3d) (syntax . py4d3c) (syntax-case . py4d3b) (quote . py4d3a) (letrec-syntax . py4d38) (let-syntax . py4d37) (set! . py4d36) (import . py4d35) (begin . py4d34) (define-syntax . py4d32) (define . py4d31)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py505a '(psyntax null-environment-5) '() '() '() '() '((make-promise . py4f11) (unquote-splicing . py4d61) (unquote . py4d60) (_ . py4d5f) (else . py4d5e) (=> . py4d5d) (... . py4d5c) (delay . py4d59) (do . py4d57) (cond . py4d56) (let* . py4d55) (quasiquote . py4d4f) (syntax-rules . py4d4e) (case . py4d49) (or . py4d45) (and . py4d44) (if . py4d43) (let . py4d42) (letrec . py4d40) (lambda . py4d3d) (quote . py4d3a) (letrec-syntax . py4d38) (let-syntax . py4d37) (set! . py4d36) (begin . py4d34) (define-syntax . py4d32) (define . py4d31)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py505b '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . py4fa6) (string-ci>=? . py4fa5) (string-ci=? . py4fa4) (string-ci<? . py4fa3) (string-ci<=? . py4fa2) (char-whitespace? . py4fa1) (char-upper-case? . py4fa0) (char-numeric? . py4f9e) (char-lower-case? . py4f9d) (char-upcase . py4f9b) (char-downcase . py4f98) (char-ci>? . py4f97) (char-ci>=? . py4f96) (char-ci=? . py4f95) (char-ci<? . py4f94) (char-ci<=? . py4f93) (char-alphabetic? . py4f92) (call-with-output-file . py4f66) (call-with-input-file . py4f65) (write-char . py4f64) (write . py4f63) (with-output-to-file . py4f62) (with-input-from-file . py4f61) (read-char . py4f60) (read . py4f5f) (peek-char . py4f5e) (open-output-file . py4f5d) (open-input-file . py4f5c) (newline . py4f5b) (display . py4f5a) (close-output-port . py4f59) (close-input-port . py4f58) (eof-object . py4f56) (current-output-port . py4f54) (current-input-port . py4f53) (output-port? . py4f52) (input-port? . py4f51) (scheme-report-environment . py2d6b) (quotient . py4f17) (null-environment . py2d69) (remainder . py4f16) (modulo . py4f15) (inexact->exact . py4f14) (force . py4f13) (exact->inexact . py4f12) (make-promise . py4f11) (string-fill! . py4f0f) (string-set! . py4f0e) (set-cdr! . py4f0d) (set-car! . py4f0c) (memv . py4f06) (memq . py4f05) (member . py4f03) (assv . py4efb) (assq . py4efa) (assoc . py4ef8) (eval . py2d6f) (zero? . py4e35) (vector? . py4e34) (vector-set! . py4e33) (vector-ref . py4e32) (vector-length . py4e30) (vector-fill! . py4e2e) (vector->list . py4e2d) (vector . py4e2c) (values . py4e2b) (truncate . py4e2a) (tan . py4e29) (symbol? . py4e28) (symbol->string . py4e26) (substring . py4e25) (string? . py4e24) (string>? . py4e23) (string>=? . py4e22) (string=? . py4e21) (string<? . py4e20) (string<=? . py4e1f) (string-ref . py4e1e) (string-length . py4e1d) (string-copy . py4e1b) (string-append . py4e1a) (string->symbol . py4e19) (string->number . py4e18) (string->list . py4e17) (string . py4e16) (sqrt . py4e15) (sin . py4e14) (round . py4e13) (reverse . py4e12) (real? . py4e11) (real-part . py4e0f) (rationalize . py4e0e) (rational? . py4e0d) (procedure? . py4e0b) (positive? . py4e0a) (pair? . py4e09) (odd? . py4e08) (numerator . py4e07) (number? . py4e06) (number->string . py4e05) (not . py4e03) (negative? . py4e02) (min . py4e00) (max . py4dff) (map . py4dfe) (make-vector . py4dfd) (make-string . py4dfc) (make-rectangular . py4dfb) (make-polar . py4dfa) (magnitude . py4df9) (log . py4df8) (list? . py4df7) (list-tail . py4df6) (list-ref . py4df5) (list->vector . py4df4) (list->string . py4df3) (list . py4df2) (length . py4df1) (lcm . py4df0) (integer? . py4def) (integer->char . py4ded) (inexact? . py4deb) (imag-part . py4de9) (gcd . py4de8) (for-each . py4de7) (floor . py4de6) (expt . py4de4) (exp . py4de3) (exact? . py4de2) (even? . py4ddf) (eqv? . py4ddd) (equal? . py4ddc) (eq? . py4ddb) (dynamic-wind . py4dda) (denominator . py4dd3) (cos . py4dd2) (cons . py4dd1) (complex? . py4dd0) (char? . py4dcf) (char>? . py4dce) (char>=? . py4dcd) (char=? . py4dcc) (char<? . py4dcb) (char<=? . py4dca) (char->integer . py4dc9) (ceiling . py4dc8) (call-with-values . py4dc7) (call-with-current-continuation . py4dc5) (cddddr . py4dc4) (cdddar . py4dc3) (cddadr . py4dc2) (cddaar . py4dc1) (cdaddr . py4dc0) (cdadar . py4dbf) (cdaadr . py4dbe) (cdaaar . py4dbd) (cadddr . py4dbc) (caddar . py4dbb) (cadadr . py4dba) (cadaar . py4db9) (caaddr . py4db8) (caadar . py4db7) (caaadr . py4db6) (caaaar . py4db5) (cdddr . py4db4) (cddar . py4db3) (cdadr . py4db2) (cdaar . py4db1) (caddr . py4db0) (cadar . py4daf) (caadr . py4dae) (caaar . py4dad) (cddr . py4dac) (cdar . py4dab) (cadr . py4daa) (caar . py4da9) (cdr . py4da8) (car . py4da7) (boolean? . py4da6) (atan . py4da4) (asin . py4da2) (apply . py4da1) (append . py4da0) (angle . py4d9f) (acos . py4d9e) (abs . py4d9d) (/ . py4d9c) (* . py4d9b) (- . py4d9a) (+ . py4d99) (>= . py4d98) (> . py4d97) (= . py4d96) (<= . py4d95) (< . py4d94) (unquote-splicing . py4d61) (unquote . py4d60) (else . py4d5e) (=> . py4d5d) (... . py4d5c) (delay . py4d59) (do . py4d57) (cond . py4d56) (let* . py4d55) (quasiquote . py4d4f) (syntax-rules . py4d4e) (case . py4d49) (or . py4d45) (and . py4d44) (if . py4d43) (let . py4d42) (letrec . py4d40) (lambda . py4d3d) (quote . py4d3a) (letrec-syntax . py4d38) (let-syntax . py4d37) (set! . py4d36) (begin . py4d34) (define-syntax . py4d32) (define . py4d31)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py505c '(psyntax modules) '() '() '() '() '((module . py4d33)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py505d '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py505e '(rnrs) '(6) '() '() '() '((regexp? . py5051) (string-upcase . py4fae) (string-titlecase . py4fad) (string-normalize-nfkd . py4fac) (string-normalize-nfkc . py4fab) (string-normalize-nfd . py4faa) (string-normalize-nfc . py4fa9) (string-foldcase . py4fa8) (string-downcase . py4fa7) (string-ci>? . py4fa6) (string-ci>=? . py4fa5) (string-ci=? . py4fa4) (string-ci<? . py4fa3) (string-ci<=? . py4fa2) (char-whitespace? . py4fa1) (char-upper-case? . py4fa0) (char-title-case? . py4f9f) (char-numeric? . py4f9e) (char-lower-case? . py4f9d) (char-general-category . py4f9c) (char-upcase . py4f9b) (char-titlecase . py4f9a) (char-foldcase . py4f99) (char-downcase . py4f98) (char-ci>? . py4f97) (char-ci>=? . py4f96) (char-ci=? . py4f95) (char-ci<? . py4f94) (char-ci<=? . py4f93) (char-alphabetic? . py4f92) (make-variable-transformer . py2ada) (identifier? . py2d91) (generate-temporaries . py2d7d) (free-identifier=? . py2d7f) (syntax->datum . py2d95) (datum->syntax . py2d93) (bound-identifier=? . py2d81) (record-type-descriptor? . py4f91) (record-predicate . py4f90) (record-mutator . py4f8f) (record-constructor . py4f8e) (record-accessor . py4f8d) (make-record-type-descriptor . py4f8c) (make-record-constructor-descriptor . py4f8b) (record? . py4f8a) (record-type-uid . py4f89) (record-type-sealed? . py4f88) (record-type-parent . py4f87) (record-type-opaque? . py4f86) (record-type-name . py4f85) (record-type-generative? . py4f84) (record-type-field-names . py4f83) (record-rtd . py4f82) (record-field-mutable? . py4f81) (delete-file . py4f80) (file-exists? . py4f7f) (vector-sort! . py4f7e) (vector-sort . py4f7d) (list-sort . py4f7c) (symbol-hash . py4f7b) (string-ci-hash . py4f7a) (string-hash . py4f79) (equal-hash . py4f78) (hashtable-equivalence-function . py4f77) (make-hashtable . py4f76) (hashtable-hash-function . py4f75) (make-eqv-hashtable . py4f74) (make-eq-hashtable . py4f73) (hashtable? . py4f72) (hashtable-update! . py4f71) (hashtable-size . py4f70) (hashtable-set! . py4f6f) (hashtable-ref . py4f6e) (hashtable-mutable? . py4f6d) (hashtable-keys . py4f6c) (hashtable-entries . py4f6b) (hashtable-delete! . py4f6a) (hashtable-copy . py4f69) (hashtable-contains? . py4f68) (hashtable-clear! . py4f67) (call-with-output-file . py4f66) (call-with-input-file . py4f65) (write-char . py4f64) (write . py4f63) (with-output-to-file . py4f62) (with-input-from-file . py4f61) (read-char . py4f60) (read . py4f5f) (peek-char . py4f5e) (open-output-file . py4f5d) (open-input-file . py4f5c) (newline . py4f5b) (display . py4f5a) (close-output-port . py4f59) (close-input-port . py4f58) (eof-object? . py4f57) (eof-object . py4f56) (current-error-port . py4f55) (current-output-port . py4f54) (current-input-port . py4f53) (output-port? . py4f52) (input-port? . py4f51) (utf-8-codec . py4f50) (utf-16-codec . py4f4f) (transcoder-error-handling-mode . py4f4e) (transcoder-eol-style . py4f4d) (transcoder-codec . py4f4c) (transcoded-port . py4f4b) (textual-port? . py4f4a) (string->bytevector . py4f49) (standard-output-port . py4f48) (standard-input-port . py4f47) (standard-error-port . py4f46) (set-port-position! . py4f45) (put-u8 . py4f44) (put-string . py4f43) (put-datum . py4f42) (put-char . py4f41) (put-bytevector . py4f40) (port? . py4f3f) (port-transcoder . py4f3e) (port-position . py4f3d) (port-has-set-port-position!? . py4f3c) (port-has-port-position? . py4f3b) (port-eof? . py4f3a) (output-port-buffer-mode . py4f39) (open-string-output-port . py4f38) (open-string-input-port . py4f37) (open-file-output-port . py4f36) (open-file-input/output-port . py4f35) (open-file-input-port . py4f34) (open-bytevector-output-port . py4f33) (open-bytevector-input-port . py4f32) (native-transcoder . py4f31) (native-eol-style . py4f30) (make-transcoder . py4f2f) (latin-1-codec . py4f2e) (make-i/o-write-error . py49b9) (make-i/o-read-error . py49a4) (make-i/o-port-error . py4a5a) (make-i/o-invalid-position-error . py49d0) (make-i/o-filename-error . py49eb) (make-i/o-file-protection-error . py4a04) (make-i/o-file-is-read-only-error . py4a19) (make-i/o-file-does-not-exist-error . py4a43) (make-i/o-file-already-exists-error . py4a2e) (make-i/o-error . py498f) (make-i/o-encoding-error . py4a8a) (make-i/o-decoding-error . py4a73) (make-custom-textual-output-port . py4f2d) (make-custom-textual-input/output-port . py4f2c) (make-custom-textual-input-port . py4f2b) (make-custom-binary-output-port . py4f2a) (make-custom-binary-input/output-port . py4f29) (make-custom-binary-input-port . py4f28) (make-bytevector . py4f27) (lookahead-u8 . py4f26) (lookahead-char . py4f25) (i/o-write-error? . py49bb) (i/o-read-error? . py49a6) (i/o-port-error? . py4a5e) (i/o-invalid-position-error? . py49d4) (i/o-filename-error? . py49ef) (i/o-file-protection-error? . py4a06) (i/o-file-is-read-only-error? . py4a1b) (i/o-file-does-not-exist-error? . py4a45) (i/o-file-already-exists-error? . py4a30) (i/o-error? . py4991) (i/o-error-position . py49d6) (i/o-error-port . py4a60) (i/o-error-filename . py49f1) (i/o-encoding-error? . py4a8e) (i/o-encoding-error-char . py4a90) (i/o-decoding-error? . py4a75) (get-u8 . py4f24) (get-string-n! . py4f23) (get-string-n . py4f22) (get-string-all . py4f21) (get-line . py4f20) (get-datum . py4f1f) (get-char . py4f1e) (get-bytevector-some . py4f1d) (get-bytevector-n! . py4f1c) (get-bytevector-n . py4f1b) (get-bytevector-all . py4f1a) (flush-output-port . py4f19) (close-port . py4f18) (exit . py4f10) (command-line . py4bc9) (remove . py4f0b) (remv . py4f0a) (remp . py4f09) (remq . py4f08) (partition . py4f07) (memv . py4f06) (memq . py4f05) (memp . py4f04) (member . py4f03) (exists . py4f02) (for-all . py4f01) (fold-right . py4f00) (fold-left . py4eff) (find . py4efe) (filter . py4efd) (cons* . py4efc) (assv . py4efb) (assq . py4efa) (assp . py4ef9) (assoc . py4ef8) (call-with-string-output-port . py4ef7) (call-with-port . py4ef6) (call-with-bytevector-output-port . py4ef5) (bytevector->string . py4ef4) (buffer-mode? . py4ef3) (binary-port? . py4ef2) (with-exception-handler . py4ef1) (raise-continuable . py4ef0) (raise . py4eef) (make-enumeration . py4eee) (enum-set=? . py4eed) (enum-set-universe . py4eec) (enum-set-union . py4eeb) (enum-set-subset? . py4eea) (enum-set-projection . py4ee9) (enum-set-member? . py4ee8) (enum-set-intersection . py4ee7) (enum-set-indexer . py4ee6) (enum-set-difference . py4ee5) (enum-set-constructor . py4ee4) (enum-set-complement . py4ee3) (enum-set->list . py4ee2) (who-condition? . py4905) (warning? . py487d) (violation? . py48bc) (undefined-violation? . py497c) (syntax-violation? . py4963) (syntax-violation-subform . py4967) (syntax-violation-form . py4965) (syntax-violation . py2d8f) (simple-conditions . py4ee1) (serious-condition? . py4892) (non-continuable-violation? . py491c) (message-condition? . py4866) (make-who-condition . py4901) (make-warning . py487b) (make-violation . py48ba) (make-undefined-violation . py497a) (make-syntax-violation . py495d) (make-serious-condition . py4890) (make-non-continuable-violation . py491a) (make-message-condition . py4862) (make-lexical-violation . py4944) (make-irritants-condition . py48e6) (make-implementation-restriction-violation . py492f) (make-error . py48a5) (make-assertion-violation . py48cf) (lexical-violation? . py4946) (irritants-condition? . py48ea) (implementation-restriction-violation? . py4931) (error? . py48a7) (condition-who . py4907) (condition-predicate . py4ee0) (condition-message . py4868) (condition-irritants . py48ec) (condition-accessor . py4edf) (condition . py4ede) (assertion-violation? . py48d1) (condition? . py4edd) (utf32->string . py4edc) (utf16->string . py4edb) (utf8->string . py4eda) (uint-list->bytevector . py4ed9) (u8-list->bytevector . py4ed8) (string->utf8 . py4ed7) (string->utf32 . py4ed6) (string->utf16 . py4ed5) (sint-list->bytevector . py4ed4) (native-endianness . py4ed3) (bytevector? . py4ed2) (bytevector=? . py4ed1) (bytevector-uint-set! . py4ed0) (bytevector-uint-ref . py4ecf) (bytevector-u8-set! . py4ece) (bytevector-u8-ref . py4ecd) (bytevector-u64-set! . py4ecc) (bytevector-u64-ref . py4ecb) (bytevector-u64-native-set! . py4eca) (bytevector-u64-native-ref . py4ec9) (bytevector-u32-set! . py4ec8) (bytevector-u32-ref . py4ec7) (bytevector-u32-native-set! . py4ec6) (bytevector-u32-native-ref . py4ec5) (bytevector-u16-set! . py4ec4) (bytevector-u16-ref . py4ec3) (bytevector-u16-native-set! . py4ec2) (bytevector-u16-native-ref . py4ec1) (bytevector-sint-set! . py4ec0) (bytevector-sint-ref . py4ebf) (bytevector-s8-set! . py4ebe) (bytevector-s8-ref . py4ebd) (bytevector-s64-set! . py4ebc) (bytevector-s64-ref . py4ebb) (bytevector-s64-native-set! . py4eba) (bytevector-s64-native-ref . py4eb9) (bytevector-s32-set! . py4eb8) (bytevector-s32-ref . py4eb7) (bytevector-s32-native-set! . py4eb6) (bytevector-s32-native-ref . py4eb5) (bytevector-s16-set! . py4eb4) (bytevector-s16-ref . py4eb3) (bytevector-s16-native-set! . py4eb2) (bytevector-s16-native-ref . py4eb1) (bytevector-length . py4eb0) (bytevector-ieee-single-ref . py4eaf) (bytevector-ieee-single-set! . py4eae) (bytevector-ieee-single-native-set! . py4ead) (bytevector-ieee-single-native-ref . py4eac) (bytevector-ieee-double-set! . py4eab) (bytevector-ieee-double-ref . py4eaa) (bytevector-ieee-double-native-set! . py4ea9) (bytevector-ieee-double-native-ref . py4ea8) (bytevector-fill! . py4ea7) (bytevector-copy! . py4ea6) (bytevector-copy . py4ea5) (bytevector->uint-list . py4ea4) (bytevector->u8-list . py4ea3) (bytevector->sint-list . py4ea2) (no-nans-violation? . py4aba) (no-infinities-violation? . py4aa5) (make-no-nans-violation . py4ab8) (make-no-infinities-violation . py4aa3) (real->flonum . py4ea1) (flzero? . py4ea0) (fltruncate . py4e9f) (fltan . py4e9e) (flsqrt . py4e9d) (flsin . py4e9c) (flround . py4e9b) (flpositive? . py4e9a) (flonum? . py4e99) (flodd? . py4e98) (flnumerator . py4e97) (flnegative? . py4e96) (flnan? . py4e95) (flmod0 . py4e94) (flmod . py4e93) (flmin . py4e92) (flmax . py4e91) (fllog . py4e90) (flinteger? . py4e8f) (flinfinite? . py4e8e) (flfloor . py4e8d) (flfinite? . py4e8c) (flexpt . py4e8b) (flexp . py4e8a) (fleven? . py4e89) (fldiv0-and-mod0 . py4e88) (fldiv0 . py4e87) (fldiv-and-mod . py4e86) (fldiv . py4e85) (fldenominator . py4e84) (flcos . py4e83) (flceiling . py4e82) (flatan . py4e81) (flasin . py4e80) (flacos . py4e7f) (flabs . py4e7e) (fl>? . py4e7d) (fl>=? . py4e7c) (fl=? . py4e7b) (fl<? . py4e7a) (fl<=? . py4e79) (fl/ . py4e78) (fl- . py4e77) (fl+ . py4e76) (fl* . py4e75) (fixnum->flonum . py4e74) (fxzero? . py4e73) (fxxor . py4e72) (fxrotate-bit-field . py4e71) (fxreverse-bit-field . py4e70) (fxpositive? . py4e6f) (fxodd? . py4e6e) (fxnot . py4e6d) (fxnegative? . py4e6c) (fxmod0 . py4e6b) (fxmod . py4e6a) (fxmin . py4e69) (fxmax . py4e68) (fxlength . py4e67) (fxior . py4e66) (fxif . py4e65) (fxfirst-bit-set . py4e64) (fxeven? . py4e63) (fxdiv0-and-mod0 . py4e62) (fxdiv0 . py4e61) (fxdiv-and-mod . py4e60) (fxdiv . py4e5f) (fxcopy-bit-field . py4e5e) (fxcopy-bit . py4e5d) (fxbit-set? . py4e5c) (fxbit-field . py4e5b) (fxbit-count . py4e5a) (fxarithmetic-shift-right . py4e59) (fxarithmetic-shift-left . py4e58) (fxarithmetic-shift . py4e57) (fxand . py4e56) (fx>? . py4e55) (fx>=? . py4e54) (fx=? . py4e53) (fx<? . py4e52) (fx<=? . py4e51) (fx-/carry . py4e50) (fx- . py4e4f) (fx+/carry . py4e4e) (fx+ . py4e4d) (fx*/carry . py4e4c) (fx* . py4e4b) (greatest-fixnum . py4e4a) (least-fixnum . py4e49) (fixnum-width . py4e48) (fixnum? . py4e47) (bitwise-rotate-bit-field . py4e46) (bitwise-reverse-bit-field . py4e45) (bitwise-length . py4e44) (bitwise-if . py4e43) (bitwise-first-bit-set . py4e42) (bitwise-copy-bit-field . py4e41) (bitwise-copy-bit . py4e40) (bitwise-bit-set? . py4e3f) (bitwise-bit-field . py4e3e) (bitwise-bit-count . py4e3d) (bitwise-xor . py4e3c) (bitwise-ior . py4e3b) (bitwise-and . py4e3a) (bitwise-not . py4e39) (bitwise-arithmetic-shift-right . py4e38) (bitwise-arithmetic-shift-left . py4e37) (bitwise-arithmetic-shift . py4e36) (zero? . py4e35) (vector? . py4e34) (vector-set! . py4e33) (vector-ref . py4e32) (vector-map . py4e31) (vector-length . py4e30) (vector-for-each . py4e2f) (vector-fill! . py4e2e) (vector->list . py4e2d) (vector . py4e2c) (values . py4e2b) (truncate . py4e2a) (tan . py4e29) (symbol? . py4e28) (symbol=? . py4e27) (symbol->string . py4e26) (substring . py4e25) (string? . py4e24) (string>? . py4e23) (string>=? . py4e22) (string=? . py4e21) (string<? . py4e20) (string<=? . py4e1f) (string-ref . py4e1e) (string-length . py4e1d) (string-for-each . py4e1c) (string-copy . py4e1b) (string-append . py4e1a) (string->symbol . py4e19) (string->number . py4e18) (string->list . py4e17) (string . py4e16) (sqrt . py4e15) (sin . py4e14) (round . py4e13) (reverse . py4e12) (real? . py4e11) (real-valued? . py4e10) (real-part . py4e0f) (rationalize . py4e0e) (rational? . py4e0d) (rational-valued? . py4e0c) (procedure? . py4e0b) (positive? . py4e0a) (pair? . py4e09) (odd? . py4e08) (numerator . py4e07) (number? . py4e06) (number->string . py4e05) (null? . py4e04) (not . py4e03) (negative? . py4e02) (nan? . py4e01) (min . py4e00) (max . py4dff) (map . py4dfe) (make-vector . py4dfd) (make-string . py4dfc) (make-rectangular . py4dfb) (make-polar . py4dfa) (magnitude . py4df9) (log . py4df8) (list? . py4df7) (list-tail . py4df6) (list-ref . py4df5) (list->vector . py4df4) (list->string . py4df3) (list . py4df2) (length . py4df1) (lcm . py4df0) (integer? . py4def) (integer-valued? . py4dee) (integer->char . py4ded) (infinite? . py4dec) (inexact? . py4deb) (inexact . py4dea) (imag-part . py4de9) (gcd . py4de8) (for-each . py4de7) (floor . py4de6) (finite? . py4de5) (expt . py4de4) (exp . py4de3) (exact? . py4de2) (exact-integer-sqrt . py4de1) (exact . py4de0) (even? . py4ddf) (error . py4dde) (eqv? . py4ddd) (equal? . py4ddc) (eq? . py4ddb) (dynamic-wind . py4dda) (div0-and-mod0 . py4dd9) (mod0 . py4dd8) (div0 . py4dd7) (div-and-mod . py4dd6) (mod . py4dd5) (div . py4dd4) (denominator . py4dd3) (cos . py4dd2) (cons . py4dd1) (complex? . py4dd0) (char? . py4dcf) (char>? . py4dce) (char>=? . py4dcd) (char=? . py4dcc) (char<? . py4dcb) (char<=? . py4dca) (char->integer . py4dc9) (ceiling . py4dc8) (call-with-values . py4dc7) (call/cc . py4dc6) (call-with-current-continuation . py4dc5) (cddddr . py4dc4) (cdddar . py4dc3) (cddadr . py4dc2) (cddaar . py4dc1) (cdaddr . py4dc0) (cdadar . py4dbf) (cdaadr . py4dbe) (cdaaar . py4dbd) (cadddr . py4dbc) (caddar . py4dbb) (cadadr . py4dba) (cadaar . py4db9) (caaddr . py4db8) (caadar . py4db7) (caaadr . py4db6) (caaaar . py4db5) (cdddr . py4db4) (cddar . py4db3) (cdadr . py4db2) (cdaar . py4db1) (caddr . py4db0) (cadar . py4daf) (caadr . py4dae) (caaar . py4dad) (cddr . py4dac) (cdar . py4dab) (cadr . py4daa) (caar . py4da9) (cdr . py4da8) (car . py4da7) (boolean? . py4da6) (boolean=? . py4da5) (atan . py4da4) (assertion-violation . py4da3) (asin . py4da2) (apply . py4da1) (append . py4da0) (angle . py4d9f) (acos . py4d9e) (abs . py4d9d) (/ . py4d9c) (* . py4d9b) (- . py4d9a) (+ . py4d99) (>= . py4d98) (> . py4d97) (= . py4d96) (<= . py4d95) (< . py4d94) (&no-nans . py4d92) (&no-infinities . py4d91) (&i/o-encoding . py4d90) (&i/o-decoding . py4d8f) (&i/o-port . py4d8e) (&i/o-file-does-not-exist . py4d8d) (&i/o-file-already-exists . py4d8c) (&i/o-file-is-read-only . py4d8b) (&i/o-file-protection . py4d8a) (&i/o-filename . py4d89) (&i/o-invalid-position . py4d88) (&i/o-write . py4d87) (&i/o-read . py4d86) (&i/o . py4d85) (&undefined . py4d84) (&syntax . py4d83) (&lexical . py4d82) (&implementation-restriction . py4d81) (&non-continuable . py4d80) (&who . py4d7f) (&irritants . py4d7e) (&assertion . py4d7d) (&violation . py4d7c) (&error . py4d7b) (&serious . py4d7a) (&warning . py4d79) (&message . py4d78) (&condition . py4d77) (define-condition-type . py4d76) (define-enumeration . py4d75) (define-record-type . py4d74) (parent-rtd . py4d73) (nongenerative . py4d72) (opaque . py4d71) (sealed . py4d70) (protocol . py4d6f) (parent . py4d6e) (immutable . py4d6d) (mutable . py4d6c) (fields . py4d6b) (error-handling-mode . py4d6a) (file-options . py4d69) (buffer-mode . py4d68) (eol-style . py4d67) (guard . py4d66) (unsyntax-splicing . py4d63) (unsyntax . py4d62) (unquote-splicing . py4d61) (unquote . py4d60) (_ . py4d5f) (else . py4d5e) (=> . py4d5d) (... . py4d5c) (assert . py4d5b) (endianness . py4d5a) (do . py4d57) (cond . py4d56) (let* . py4d55) (let*-values . py4d54) (let-values . py4d53) (identifier-syntax . py4d52) (with-syntax . py4d51) (quasisyntax . py4d50) (quasiquote . py4d4f) (syntax-rules . py4d4e) (record-constructor-descriptor . py4d4b) (record-type-descriptor . py4d4a) (case . py4d49) (unless . py4d47) (when . py4d46) (or . py4d45) (and . py4d44) (if . py4d43) (let . py4d42) (letrec* . py4d41) (letrec . py4d40) (case-lambda . py4d3e) (lambda . py4d3d) (syntax . py4d3c) (syntax-case . py4d3b) (quote . py4d3a) (letrec-syntax . py4d38) (let-syntax . py4d37) (set! . py4d36) (begin . py4d34) (define-syntax . py4d32) (define . py4d31)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py505f '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . py2d6b) (quotient . py4f17) (null-environment . py2d69) (remainder . py4f16) (modulo . py4f15) (inexact->exact . py4f14) (force . py4f13) (exact->inexact . py4f12) (make-promise . py4f11) (delay . py4d59)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5060 '(rnrs control) '(6) '() '() '() '((do . py4d57) (unless . py4d47) (when . py4d46) (case-lambda . py4d3e)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5061 '(rnrs eval) '(6) '() '() '() '((eval . py2d6f) (environment . py2d67)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5062 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . py4f0d) (set-car! . py4f0c)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5063 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . py4f0f) (string-set! . py4f0e)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5064 '(rnrs programs) '(6) '() '() '() '((exit . py4f10) (command-line . py4bc9)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5065 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . py2ada) (identifier? . py2d91) (generate-temporaries . py2d7d) (free-identifier=? . py2d7f) (syntax->datum . py2d95) (datum->syntax . py2d93) (bound-identifier=? . py2d81) (syntax-violation . py2d8f) (unsyntax-splicing . py4d63) (unsyntax . py4d62) (_ . py4d5f) (... . py4d5c) (with-syntax . py4d51) (quasisyntax . py4d50) (syntax . py4d3c) (syntax-case . py4d3b)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5066 '(rnrs files) '(6) '() '() '() '((delete-file . py4f80) (file-exists? . py4f7f) (make-i/o-write-error . py49b9) (make-i/o-read-error . py49a4) (make-i/o-port-error . py4a5a) (make-i/o-invalid-position-error . py49d0) (make-i/o-filename-error . py49eb) (make-i/o-file-protection-error . py4a04) (make-i/o-file-is-read-only-error . py4a19) (make-i/o-file-does-not-exist-error . py4a43) (make-i/o-file-already-exists-error . py4a2e) (make-i/o-error . py498f) (i/o-write-error? . py49bb) (i/o-read-error? . py49a6) (i/o-port-error? . py4a5e) (i/o-invalid-position-error? . py49d4) (i/o-filename-error? . py49ef) (i/o-file-protection-error? . py4a06) (i/o-file-is-read-only-error? . py4a1b) (i/o-file-does-not-exist-error? . py4a45) (i/o-file-already-exists-error? . py4a30) (i/o-error? . py4991) (i/o-error-position . py49d6) (i/o-error-port . py4a60) (i/o-error-filename . py49f1) (&i/o-port . py4d8e) (&i/o-file-does-not-exist . py4d8d) (&i/o-file-already-exists . py4d8c) (&i/o-file-is-read-only . py4d8b) (&i/o-file-protection . py4d8a) (&i/o-filename . py4d89) (&i/o-invalid-position . py4d88) (&i/o-write . py4d87) (&i/o-read . py4d86) (&i/o . py4d85)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5067 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . py4f7e) (vector-sort . py4f7d) (list-sort . py4f7c)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5068 '(rnrs base) '(6) '() '() '() '((zero? . py4e35) (vector? . py4e34) (vector-set! . py4e33) (vector-ref . py4e32) (vector-map . py4e31) (vector-length . py4e30) (vector-for-each . py4e2f) (vector-fill! . py4e2e) (vector->list . py4e2d) (vector . py4e2c) (values . py4e2b) (truncate . py4e2a) (tan . py4e29) (symbol? . py4e28) (symbol=? . py4e27) (symbol->string . py4e26) (substring . py4e25) (string? . py4e24) (string>? . py4e23) (string>=? . py4e22) (string=? . py4e21) (string<? . py4e20) (string<=? . py4e1f) (string-ref . py4e1e) (string-length . py4e1d) (string-for-each . py4e1c) (string-copy . py4e1b) (string-append . py4e1a) (string->symbol . py4e19) (string->number . py4e18) (string->list . py4e17) (string . py4e16) (sqrt . py4e15) (sin . py4e14) (round . py4e13) (reverse . py4e12) (real? . py4e11) (real-valued? . py4e10) (real-part . py4e0f) (rationalize . py4e0e) (rational? . py4e0d) (rational-valued? . py4e0c) (procedure? . py4e0b) (positive? . py4e0a) (pair? . py4e09) (odd? . py4e08) (numerator . py4e07) (number? . py4e06) (number->string . py4e05) (null? . py4e04) (not . py4e03) (negative? . py4e02) (nan? . py4e01) (min . py4e00) (max . py4dff) (map . py4dfe) (make-vector . py4dfd) (make-string . py4dfc) (make-rectangular . py4dfb) (make-polar . py4dfa) (magnitude . py4df9) (log . py4df8) (list? . py4df7) (list-tail . py4df6) (list-ref . py4df5) (list->vector . py4df4) (list->string . py4df3) (list . py4df2) (length . py4df1) (lcm . py4df0) (integer? . py4def) (integer-valued? . py4dee) (integer->char . py4ded) (infinite? . py4dec) (inexact? . py4deb) (inexact . py4dea) (imag-part . py4de9) (gcd . py4de8) (for-each . py4de7) (floor . py4de6) (finite? . py4de5) (expt . py4de4) (exp . py4de3) (exact? . py4de2) (exact-integer-sqrt . py4de1) (exact . py4de0) (even? . py4ddf) (error . py4dde) (eqv? . py4ddd) (equal? . py4ddc) (eq? . py4ddb) (dynamic-wind . py4dda) (div0-and-mod0 . py4dd9) (mod0 . py4dd8) (div0 . py4dd7) (div-and-mod . py4dd6) (mod . py4dd5) (div . py4dd4) (denominator . py4dd3) (cos . py4dd2) (cons . py4dd1) (complex? . py4dd0) (char? . py4dcf) (char>? . py4dce) (char>=? . py4dcd) (char=? . py4dcc) (char<? . py4dcb) (char<=? . py4dca) (char->integer . py4dc9) (ceiling . py4dc8) (call-with-values . py4dc7) (call/cc . py4dc6) (call-with-current-continuation . py4dc5) (cddddr . py4dc4) (cdddar . py4dc3) (cddadr . py4dc2) (cddaar . py4dc1) (cdaddr . py4dc0) (cdadar . py4dbf) (cdaadr . py4dbe) (cdaaar . py4dbd) (cadddr . py4dbc) (caddar . py4dbb) (cadadr . py4dba) (cadaar . py4db9) (caaddr . py4db8) (caadar . py4db7) (caaadr . py4db6) (caaaar . py4db5) (cdddr . py4db4) (cddar . py4db3) (cdadr . py4db2) (cdaar . py4db1) (caddr . py4db0) (cadar . py4daf) (caadr . py4dae) (caaar . py4dad) (cddr . py4dac) (cdar . py4dab) (cadr . py4daa) (caar . py4da9) (cdr . py4da8) (car . py4da7) (boolean? . py4da6) (boolean=? . py4da5) (atan . py4da4) (assertion-violation . py4da3) (asin . py4da2) (apply . py4da1) (append . py4da0) (angle . py4d9f) (acos . py4d9e) (abs . py4d9d) (/ . py4d9c) (* . py4d9b) (- . py4d9a) (+ . py4d99) (>= . py4d98) (> . py4d97) (= . py4d96) (<= . py4d95) (< . py4d94) (unquote-splicing . py4d61) (unquote . py4d60) (_ . py4d5f) (else . py4d5e) (=> . py4d5d) (... . py4d5c) (assert . py4d5b) (cond . py4d56) (let* . py4d55) (let*-values . py4d54) (let-values . py4d53) (identifier-syntax . py4d52) (quasiquote . py4d4f) (syntax-rules . py4d4e) (case . py4d49) (or . py4d45) (and . py4d44) (if . py4d43) (let . py4d42) (letrec* . py4d41) (letrec . py4d40) (lambda . py4d3d) (quote . py4d3a) (letrec-syntax . py4d38) (let-syntax . py4d37) (set! . py4d36) (begin . py4d34) (define-syntax . py4d32) (define . py4d31)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5069 '(rnrs lists) '(6) '() '() '() '((remove . py4f0b) (remv . py4f0a) (remp . py4f09) (remq . py4f08) (partition . py4f07) (memv . py4f06) (memq . py4f05) (memp . py4f04) (member . py4f03) (exists . py4f02) (for-all . py4f01) (fold-right . py4f00) (fold-left . py4eff) (find . py4efe) (filter . py4efd) (cons* . py4efc) (assv . py4efb) (assq . py4efa) (assp . py4ef9) (assoc . py4ef8)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py506a '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . py4f66) (call-with-input-file . py4f65) (write-char . py4f64) (write . py4f63) (with-output-to-file . py4f62) (with-input-from-file . py4f61) (read-char . py4f60) (read . py4f5f) (peek-char . py4f5e) (open-output-file . py4f5d) (open-input-file . py4f5c) (newline . py4f5b) (display . py4f5a) (close-output-port . py4f59) (close-input-port . py4f58) (eof-object? . py4f57) (eof-object . py4f56) (current-error-port . py4f55) (current-output-port . py4f54) (current-input-port . py4f53) (output-port? . py4f52) (input-port? . py4f51) (make-i/o-write-error . py49b9) (make-i/o-read-error . py49a4) (make-i/o-port-error . py4a5a) (make-i/o-invalid-position-error . py49d0) (make-i/o-filename-error . py49eb) (make-i/o-file-protection-error . py4a04) (make-i/o-file-is-read-only-error . py4a19) (make-i/o-file-does-not-exist-error . py4a43) (make-i/o-file-already-exists-error . py4a2e) (make-i/o-error . py498f) (i/o-write-error? . py49bb) (i/o-read-error? . py49a6) (i/o-port-error? . py4a5e) (i/o-invalid-position-error? . py49d4) (i/o-filename-error? . py49ef) (i/o-file-protection-error? . py4a06) (i/o-file-is-read-only-error? . py4a1b) (i/o-file-does-not-exist-error? . py4a45) (i/o-file-already-exists-error? . py4a30) (i/o-error? . py4991) (i/o-error-position . py49d6) (i/o-error-port . py4a60) (i/o-error-filename . py49f1) (&i/o-port . py4d8e) (&i/o-file-does-not-exist . py4d8d) (&i/o-file-already-exists . py4d8c) (&i/o-file-is-read-only . py4d8b) (&i/o-file-protection . py4d8a) (&i/o-filename . py4d89) (&i/o-invalid-position . py4d88) (&i/o-write . py4d87) (&i/o-read . py4d86) (&i/o . py4d85)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py506b '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . py4f27) (utf32->string . py4edc) (utf16->string . py4edb) (utf8->string . py4eda) (uint-list->bytevector . py4ed9) (u8-list->bytevector . py4ed8) (string->utf8 . py4ed7) (string->utf32 . py4ed6) (string->utf16 . py4ed5) (sint-list->bytevector . py4ed4) (native-endianness . py4ed3) (bytevector? . py4ed2) (bytevector=? . py4ed1) (bytevector-uint-set! . py4ed0) (bytevector-uint-ref . py4ecf) (bytevector-u8-set! . py4ece) (bytevector-u8-ref . py4ecd) (bytevector-u64-set! . py4ecc) (bytevector-u64-ref . py4ecb) (bytevector-u64-native-set! . py4eca) (bytevector-u64-native-ref . py4ec9) (bytevector-u32-set! . py4ec8) (bytevector-u32-ref . py4ec7) (bytevector-u32-native-set! . py4ec6) (bytevector-u32-native-ref . py4ec5) (bytevector-u16-set! . py4ec4) (bytevector-u16-ref . py4ec3) (bytevector-u16-native-set! . py4ec2) (bytevector-u16-native-ref . py4ec1) (bytevector-sint-set! . py4ec0) (bytevector-sint-ref . py4ebf) (bytevector-s8-set! . py4ebe) (bytevector-s8-ref . py4ebd) (bytevector-s64-set! . py4ebc) (bytevector-s64-ref . py4ebb) (bytevector-s64-native-set! . py4eba) (bytevector-s64-native-ref . py4eb9) (bytevector-s32-set! . py4eb8) (bytevector-s32-ref . py4eb7) (bytevector-s32-native-set! . py4eb6) (bytevector-s32-native-ref . py4eb5) (bytevector-s16-set! . py4eb4) (bytevector-s16-ref . py4eb3) (bytevector-s16-native-set! . py4eb2) (bytevector-s16-native-ref . py4eb1) (bytevector-length . py4eb0) (bytevector-ieee-single-ref . py4eaf) (bytevector-ieee-single-set! . py4eae) (bytevector-ieee-single-native-set! . py4ead) (bytevector-ieee-single-native-ref . py4eac) (bytevector-ieee-double-set! . py4eab) (bytevector-ieee-double-ref . py4eaa) (bytevector-ieee-double-native-set! . py4ea9) (bytevector-ieee-double-native-ref . py4ea8) (bytevector-fill! . py4ea7) (bytevector-copy! . py4ea6) (bytevector-copy . py4ea5) (bytevector->uint-list . py4ea4) (bytevector->u8-list . py4ea3) (bytevector->sint-list . py4ea2) (endianness . py4d5a)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py506c '(rnrs unicode) '(6) '() '() '() '((string-upcase . py4fae) (string-titlecase . py4fad) (string-normalize-nfkd . py4fac) (string-normalize-nfkc . py4fab) (string-normalize-nfd . py4faa) (string-normalize-nfc . py4fa9) (string-foldcase . py4fa8) (string-downcase . py4fa7) (string-ci>? . py4fa6) (string-ci>=? . py4fa5) (string-ci=? . py4fa4) (string-ci<? . py4fa3) (string-ci<=? . py4fa2) (char-whitespace? . py4fa1) (char-upper-case? . py4fa0) (char-title-case? . py4f9f) (char-numeric? . py4f9e) (char-lower-case? . py4f9d) (char-general-category . py4f9c) (char-upcase . py4f9b) (char-titlecase . py4f9a) (char-foldcase . py4f99) (char-downcase . py4f98) (char-ci>? . py4f97) (char-ci>=? . py4f96) (char-ci=? . py4f95) (char-ci<? . py4f94) (char-ci<=? . py4f93) (char-alphabetic? . py4f92)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py506d '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . py4ef1) (raise-continuable . py4ef0) (raise . py4eef) (guard . py4d66) (else . py4d5e) (=> . py4d5d)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py506e '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . py4e46) (bitwise-reverse-bit-field . py4e45) (bitwise-length . py4e44) (bitwise-if . py4e43) (bitwise-first-bit-set . py4e42) (bitwise-copy-bit-field . py4e41) (bitwise-copy-bit . py4e40) (bitwise-bit-set? . py4e3f) (bitwise-bit-field . py4e3e) (bitwise-bit-count . py4e3d) (bitwise-xor . py4e3c) (bitwise-ior . py4e3b) (bitwise-and . py4e3a) (bitwise-not . py4e39) (bitwise-arithmetic-shift-right . py4e38) (bitwise-arithmetic-shift-left . py4e37) (bitwise-arithmetic-shift . py4e36)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py506f '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . py4e73) (fxxor . py4e72) (fxrotate-bit-field . py4e71) (fxreverse-bit-field . py4e70) (fxpositive? . py4e6f) (fxodd? . py4e6e) (fxnot . py4e6d) (fxnegative? . py4e6c) (fxmod0 . py4e6b) (fxmod . py4e6a) (fxmin . py4e69) (fxmax . py4e68) (fxlength . py4e67) (fxior . py4e66) (fxif . py4e65) (fxfirst-bit-set . py4e64) (fxeven? . py4e63) (fxdiv0-and-mod0 . py4e62) (fxdiv0 . py4e61) (fxdiv-and-mod . py4e60) (fxdiv . py4e5f) (fxcopy-bit-field . py4e5e) (fxcopy-bit . py4e5d) (fxbit-set? . py4e5c) (fxbit-field . py4e5b) (fxbit-count . py4e5a) (fxarithmetic-shift-right . py4e59) (fxarithmetic-shift-left . py4e58) (fxarithmetic-shift . py4e57) (fxand . py4e56) (fx>? . py4e55) (fx>=? . py4e54) (fx=? . py4e53) (fx<? . py4e52) (fx<=? . py4e51) (fx-/carry . py4e50) (fx- . py4e4f) (fx+/carry . py4e4e) (fx+ . py4e4d) (fx*/carry . py4e4c) (fx* . py4e4b) (greatest-fixnum . py4e4a) (least-fixnum . py4e49) (fixnum-width . py4e48) (fixnum? . py4e47)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5070 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . py4aba) (no-infinities-violation? . py4aa5) (make-no-nans-violation . py4ab8) (make-no-infinities-violation . py4aa3) (real->flonum . py4ea1) (flzero? . py4ea0) (fltruncate . py4e9f) (fltan . py4e9e) (flsqrt . py4e9d) (flsin . py4e9c) (flround . py4e9b) (flpositive? . py4e9a) (flonum? . py4e99) (flodd? . py4e98) (flnumerator . py4e97) (flnegative? . py4e96) (flnan? . py4e95) (flmod0 . py4e94) (flmod . py4e93) (flmin . py4e92) (flmax . py4e91) (fllog . py4e90) (flinteger? . py4e8f) (flinfinite? . py4e8e) (flfloor . py4e8d) (flfinite? . py4e8c) (flexpt . py4e8b) (flexp . py4e8a) (fleven? . py4e89) (fldiv0-and-mod0 . py4e88) (fldiv0 . py4e87) (fldiv-and-mod . py4e86) (fldiv . py4e85) (fldenominator . py4e84) (flcos . py4e83) (flceiling . py4e82) (flatan . py4e81) (flasin . py4e80) (flacos . py4e7f) (flabs . py4e7e) (fl>? . py4e7d) (fl>=? . py4e7c) (fl=? . py4e7b) (fl<? . py4e7a) (fl<=? . py4e79) (fl/ . py4e78) (fl- . py4e77) (fl+ . py4e76) (fl* . py4e75) (fixnum->flonum . py4e74) (&no-nans . py4d92) (&no-infinities . py4d91)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5071 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . py4f7b) (string-ci-hash . py4f7a) (string-hash . py4f79) (equal-hash . py4f78) (hashtable-equivalence-function . py4f77) (make-hashtable . py4f76) (hashtable-hash-function . py4f75) (make-eqv-hashtable . py4f74) (make-eq-hashtable . py4f73) (hashtable? . py4f72) (hashtable-update! . py4f71) (hashtable-size . py4f70) (hashtable-set! . py4f6f) (hashtable-ref . py4f6e) (hashtable-mutable? . py4f6d) (hashtable-keys . py4f6c) (hashtable-entries . py4f6b) (hashtable-delete! . py4f6a) (hashtable-copy . py4f69) (hashtable-contains? . py4f68) (hashtable-clear! . py4f67)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5072 '(rnrs io ports) '(6) '() '() '() '((eof-object? . py4f57) (eof-object . py4f56) (current-error-port . py4f55) (current-output-port . py4f54) (current-input-port . py4f53) (output-port? . py4f52) (input-port? . py4f51) (utf-8-codec . py4f50) (utf-16-codec . py4f4f) (transcoder-error-handling-mode . py4f4e) (transcoder-eol-style . py4f4d) (transcoder-codec . py4f4c) (transcoded-port . py4f4b) (textual-port? . py4f4a) (string->bytevector . py4f49) (standard-output-port . py4f48) (standard-input-port . py4f47) (standard-error-port . py4f46) (set-port-position! . py4f45) (put-u8 . py4f44) (put-string . py4f43) (put-datum . py4f42) (put-char . py4f41) (put-bytevector . py4f40) (port? . py4f3f) (port-transcoder . py4f3e) (port-position . py4f3d) (port-has-set-port-position!? . py4f3c) (port-has-port-position? . py4f3b) (port-eof? . py4f3a) (output-port-buffer-mode . py4f39) (open-string-output-port . py4f38) (open-string-input-port . py4f37) (open-file-output-port . py4f36) (open-file-input/output-port . py4f35) (open-file-input-port . py4f34) (open-bytevector-output-port . py4f33) (open-bytevector-input-port . py4f32) (native-transcoder . py4f31) (native-eol-style . py4f30) (make-transcoder . py4f2f) (latin-1-codec . py4f2e) (make-i/o-write-error . py49b9) (make-i/o-read-error . py49a4) (make-i/o-port-error . py4a5a) (make-i/o-invalid-position-error . py49d0) (make-i/o-filename-error . py49eb) (make-i/o-file-protection-error . py4a04) (make-i/o-file-is-read-only-error . py4a19) (make-i/o-file-does-not-exist-error . py4a43) (make-i/o-file-already-exists-error . py4a2e) (make-i/o-error . py498f) (make-i/o-encoding-error . py4a8a) (make-i/o-decoding-error . py4a73) (make-custom-textual-output-port . py4f2d) (make-custom-textual-input/output-port . py4f2c) (make-custom-textual-input-port . py4f2b) (make-custom-binary-output-port . py4f2a) (make-custom-binary-input/output-port . py4f29) (make-custom-binary-input-port . py4f28) (lookahead-u8 . py4f26) (lookahead-char . py4f25) (i/o-write-error? . py49bb) (i/o-read-error? . py49a6) (i/o-port-error? . py4a5e) (i/o-invalid-position-error? . py49d4) (i/o-filename-error? . py49ef) (i/o-file-protection-error? . py4a06) (i/o-file-is-read-only-error? . py4a1b) (i/o-file-does-not-exist-error? . py4a45) (i/o-file-already-exists-error? . py4a30) (i/o-error? . py4991) (i/o-error-position . py49d6) (i/o-error-port . py4a60) (i/o-error-filename . py49f1) (i/o-encoding-error? . py4a8e) (i/o-encoding-error-char . py4a90) (i/o-decoding-error? . py4a75) (get-u8 . py4f24) (get-string-n! . py4f23) (get-string-n . py4f22) (get-string-all . py4f21) (get-line . py4f20) (get-datum . py4f1f) (get-char . py4f1e) (get-bytevector-some . py4f1d) (get-bytevector-n! . py4f1c) (get-bytevector-n . py4f1b) (get-bytevector-all . py4f1a) (flush-output-port . py4f19) (close-port . py4f18) (call-with-string-output-port . py4ef7) (call-with-port . py4ef6) (call-with-bytevector-output-port . py4ef5) (bytevector->string . py4ef4) (buffer-mode? . py4ef3) (binary-port? . py4ef2) (&i/o-encoding . py4d90) (&i/o-decoding . py4d8f) (&i/o-port . py4d8e) (&i/o-file-does-not-exist . py4d8d) (&i/o-file-already-exists . py4d8c) (&i/o-file-is-read-only . py4d8b) (&i/o-file-protection . py4d8a) (&i/o-filename . py4d89) (&i/o-invalid-position . py4d88) (&i/o-write . py4d87) (&i/o-read . py4d86) (&i/o . py4d85) (error-handling-mode . py4d6a) (file-options . py4d69) (buffer-mode . py4d68) (eol-style . py4d67)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5073 '(rnrs enums) '(6) '() '() '() '((make-enumeration . py4eee) (enum-set=? . py4eed) (enum-set-universe . py4eec) (enum-set-union . py4eeb) (enum-set-subset? . py4eea) (enum-set-projection . py4ee9) (enum-set-member? . py4ee8) (enum-set-intersection . py4ee7) (enum-set-indexer . py4ee6) (enum-set-difference . py4ee5) (enum-set-constructor . py4ee4) (enum-set-complement . py4ee3) (enum-set->list . py4ee2) (define-enumeration . py4d75)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5074 '(rnrs conditions) '(6) '() '() '() '((who-condition? . py4905) (warning? . py487d) (violation? . py48bc) (undefined-violation? . py497c) (syntax-violation? . py4963) (syntax-violation-subform . py4967) (syntax-violation-form . py4965) (syntax-violation . py2d8f) (simple-conditions . py4ee1) (serious-condition? . py4892) (non-continuable-violation? . py491c) (message-condition? . py4866) (make-who-condition . py4901) (make-warning . py487b) (make-violation . py48ba) (make-undefined-violation . py497a) (make-syntax-violation . py495d) (make-serious-condition . py4890) (make-non-continuable-violation . py491a) (make-message-condition . py4862) (make-lexical-violation . py4944) (make-irritants-condition . py48e6) (make-implementation-restriction-violation . py492f) (make-error . py48a5) (make-assertion-violation . py48cf) (lexical-violation? . py4946) (irritants-condition? . py48ea) (implementation-restriction-violation? . py4931) (error? . py48a7) (condition-who . py4907) (condition-predicate . py4ee0) (condition-message . py4868) (condition-irritants . py48ec) (condition-accessor . py4edf) (condition . py4ede) (assertion-violation? . py48d1) (condition? . py4edd) (&undefined . py4d84) (&syntax . py4d83) (&lexical . py4d82) (&implementation-restriction . py4d81) (&non-continuable . py4d80) (&who . py4d7f) (&irritants . py4d7e) (&assertion . py4d7d) (&violation . py4d7c) (&error . py4d7b) (&serious . py4d7a) (&warning . py4d79) (&message . py4d78) (&condition . py4d77) (define-condition-type . py4d76)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5075 '(rnrs records inspection) '(6) '() '() '() '((record? . py4f8a) (record-type-uid . py4f89) (record-type-sealed? . py4f88) (record-type-parent . py4f87) (record-type-opaque? . py4f86) (record-type-name . py4f85) (record-type-generative? . py4f84) (record-type-field-names . py4f83) (record-rtd . py4f82) (record-field-mutable? . py4f81)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5076 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . py4f91) (record-predicate . py4f90) (record-mutator . py4f8f) (record-constructor . py4f8e) (record-accessor . py4f8d) (make-record-type-descriptor . py4f8c) (make-record-constructor-descriptor . py4f8b)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5077 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . py4d74) (parent-rtd . py4d73) (nongenerative . py4d72) (opaque . py4d71) (sealed . py4d70) (protocol . py4d6f) (parent . py4d6e) (immutable . py4d6d) (mutable . py4d6c) (fields . py4d6b) (record-constructor-descriptor . py4d4b) (record-type-descriptor . py4d4a)) '() values values '#f '#f '#t '#f) (py28bd@py2709@install-library 'py5078 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . py4abe) (&no-nans-rtd . py4abc) (&no-infinities-rcd . py4aa9) (&no-infinities-rtd . py4aa7) (&i/o-encoding-rcd . py4a94) (&i/o-encoding-rtd . py4a92) (&i/o-decoding-rcd . py4a79) (&i/o-decoding-rtd . py4a77) (&i/o-port-rcd . py4a64) (&i/o-port-rtd . py4a62) (&i/o-file-does-not-exist-rcd . py4a49) (&i/o-file-does-not-exist-rtd . py4a47) (&i/o-file-already-exists-rcd . py4a34) (&i/o-file-already-exists-rtd . py4a32) (&i/o-file-is-read-only-rcd . py4a1f) (&i/o-file-is-read-only-rtd . py4a1d) (&i/o-file-protection-rcd . py4a0a) (&i/o-file-protection-rtd . py4a08) (&i/o-filename-rcd . py49f5) (&i/o-filename-rtd . py49f3) (&i/o-invalid-position-rcd . py49da) (&i/o-invalid-position-rtd . py49d8) (&i/o-write-rcd . py49bf) (&i/o-write-rtd . py49bd) (&i/o-read-rcd . py49aa) (&i/o-read-rtd . py49a8) (&i/o-rcd . py4995) (&i/o-rtd . py4993) (&undefined-rcd . py4980) (&undefined-rtd . py497e) (&syntax-rcd . py496b) (&syntax-rtd . py4969) (&lexical-rcd . py494a) (&lexical-rtd . py4948) (&implementation-restriction-rcd . py4935) (&implementation-restriction-rtd . py4933) (&non-continuable-rcd . py4920) (&non-continuable-rtd . py491e) (&who-rcd . py490b) (&who-rtd . py4909) (&irritants-rcd . py48f0) (&irritants-rtd . py48ee) (&assertion-rcd . py48d5) (&assertion-rtd . py48d3) (&violation-rcd . py48c0) (&violation-rtd . py48be) (&error-rcd . py48ab) (&error-rtd . py48a9) (&serious-rcd . py4896) (&serious-rtd . py4894) (&warning-rcd . py4881) (&warning-rtd . py487f) (&message-rcd . py486c) (&message-rtd . py486a) (&condition-rcd . py480d) (&condition-rtd . py480b) (syntax-error . py2d8b) (syntax-dispatch . py2caf) (pretty-print . py5058) (eval-core . py5057) (set-symbol-value! . py5056) (symbol-value . py5055) (gensym . py5054) (void . py5053) (load . py4bcf) (interaction-environment . py2d9d) (char-ready? . py5052) (regexp? . py5051) (read-line . py5050) (gensym-prefix-set! . py504f) (ungensym . py504e) (alist->eq-hash-table . py504d) (assoc-ref . py504c) (print . py504b) (format . py504a) (host-os . py5049) (library-path . py26e8) (standard-library-path . py5048) (file-newer? . py5047) (stat-mtime . py5046) (write-to-file . py5045) (file->list . py5044) (file->string . py5043) (digit->integer . py5042) (call-with-string-input-port . py5041) (call-with-string-io . py5040) (string-split . py503f) (bytevector-for-each . py503e) (string->regexp . py503d) (rxmatch . py503c) (regexp-replace-all . py503b) (hashtable-for-each . py503a) (mosh-cache-dir . py24d3) (call-process . py5039) (local-tz-offset . py5038) (microseconds . py5037) (directory-list . py5036) (set-current-directory! . py5035) (expand-path . py5034) (current-directory . py5033) (%spawn . py5032) (%waitpid . py5031) (simple-struct-name . py5030) (simple-struct-set! . py502f) (simple-struct-ref . py502e) (make-simple-struct . py502d) (simple-struct? . py502c) (pointer-ref-c-int64 . py502b) (pointer-ref-c-int32 . py502a) (pointer-ref-c-int16 . py5029) (pointer-ref-c-int8 . py5028) (pointer-ref-c-uint64 . py5027) (pointer-ref-c-uint32 . py5026) (pointer-ref-c-uint16 . py5025) (pointer-ref-c-uint8 . py5024) (pointer-set-c-uint64! . py5023) (pointer-set-c-uint32! . py5022) (pointer-set-c-uint16! . py5021) (pointer-set-c-uint8! . py5020) (pointer-set-c-int64! . py501f) (pointer-set-c-int32! . py501e) (pointer-set-c-int16! . py501d) (pointer-set-c-int8! . py501c) (pointer-set-c-pointer! . py501b) (pointer-set-c-double! . py501a) (pointer-set-c-float! . py5019) (pointer-set-c-long-long! . py5018) (pointer-set-c-long! . py5017) (pointer-set-c-int! . py5016) (pointer-set-c-short! . py5015) (pointer-set-c-char! . py5014) (pointer-ref-c-pointer . py5013) (pointer-ref-c-double . py5012) (pointer-ref-c-float . py5011) (pointer-ref-c-unsigned-long-long . py5010) (pointer-ref-c-signed-long-long . py500f) (pointer-ref-c-unsigned-long . py500e) (pointer-ref-c-signed-long . py500d) (pointer-ref-c-unsigned-int . py500c) (pointer-ref-c-signed-int . py500b) (pointer-ref-c-unsigned-short . py500a) (pointer-ref-c-signed-short . py5009) (pointer-ref-c-unsigned-char . py5008) (pointer-ref-c-signed-char . py5007) (pointer->integer . py5006) (integer->pointer . py5005) (pointer? . py5004) (shared-errno . py5003) (%ffi-free . py5002) (%ffi-malloc . py5001) (%ffi-supported? . py5000) (%ffi-pointer->string . py4fff) (%ffi-call->string-or-zero . py4ffe) (%ffi-call->double . py4ffd) (%ffi-call->void* . py4ffc) (%ffi-call->void . py4ffb) (%ffi-call->char . py4ffa) (%ffi-call->int . py4ff9) (%ffi-lookup . py4ff8) (%ffi-open . py4ff7) (%fork . py4ff6) (%pipe . py4ff5) (p . py4ff4) (open-output-string . py4ff3) (get-output-string . py4ff2) (file-stat-ctime . py4ff1) (file-stat-atime . py4ff0) (file-stat-mtime . py4fef) (file-size-in-bytes . py4fee) (file-writable? . py4fed) (file-executable? . py4fec) (file-readable? . py4feb) (file-regular? . py4fea) (file-symbolic-link? . py4fe9) (file-directory? . py4fe8) (create-symbolic-link . py4fe7) (rename-file . py4fe6) (delete-directory . py4fe5) (create-directory . py4fe4) (create-mosh-cache-dir . py4fe3) (get-environment-variables . py4fe2) (current-exception-handler . py4fe1) (get-environment-variable . py4fe0) (join-wraps . py4fdf) (id->real-label . py4fde) (same-marks? . py4fdd) (same-marks*? . py4fdc) (get-timeofday . py4fdb) (get-command-line . py4fda) (sys-display . py4fd9) (whereis . py4fd8) (register . py4fd7) (vm-join! . py4fd6) (vm-set-value! . py4fd5) (vm? . py4fd4) (main-vm? . py4fd3) (vm-eval . py4fd2) (vm-self . py4fd1) (vm-start! . py4fd0) (make-vm . py4fcf) (mutex-try-lock! . py4fce) (mutex-unlock! . py4fcd) (mutex-lock! . py4fcc) (mutex? . py4fcb) (make-mutex . py4fca) (condition-variable-notify-all! . py4fc9) (condition-variable-notify! . py4fc8) (condition-variable-wait! . py4fc7) (make-condition-variable . py4fc6) (mosh-executable-path . py4fc5) (make-file-options . py4fc4) (source-info . py4fc3) (make-compiler-instruction . py4fc2) (make-instruction . py4fc1) (set-source-info! . py4fc0) (bignum? . py4fbf) (fast-equal? . py4fbe) (fasl-read . py4fbd) (fasl-write . py4fbc) (time-usage . py4fbb) (os-constant . py4fba) (disasm . py4fb9) (make-parameter . py24d1) (socket-port . py4fb8) (socket-shutdown . py4fb7) (socket-close . py4fb6) (socket-send . py4fb5) (socket-recv! . py4fb4) (socket-recv . py4fb3) (make-server-socket . py4fb2) (make-client-socket . py4fb1) (socket-accept . py4fb0) (socket? . py4faf) (string-upcase . py4fae) (string-titlecase . py4fad) (string-normalize-nfkd . py4fac) (string-normalize-nfkc . py4fab) (string-normalize-nfd . py4faa) (string-normalize-nfc . py4fa9) (string-foldcase . py4fa8) (string-downcase . py4fa7) (string-ci>? . py4fa6) (string-ci>=? . py4fa5) (string-ci=? . py4fa4) (string-ci<? . py4fa3) (string-ci<=? . py4fa2) (char-whitespace? . py4fa1) (char-upper-case? . py4fa0) (char-title-case? . py4f9f) (char-numeric? . py4f9e) (char-lower-case? . py4f9d) (char-general-category . py4f9c) (char-upcase . py4f9b) (char-titlecase . py4f9a) (char-foldcase . py4f99) (char-downcase . py4f98) (char-ci>? . py4f97) (char-ci>=? . py4f96) (char-ci=? . py4f95) (char-ci<? . py4f94) (char-ci<=? . py4f93) (char-alphabetic? . py4f92) (make-variable-transformer . py2ada) (identifier? . py2d91) (generate-temporaries . py2d7d) (free-identifier=? . py2d7f) (syntax->datum . py2d95) (datum->syntax . py2d93) (bound-identifier=? . py2d81) (record-type-descriptor? . py4f91) (record-predicate . py4f90) (record-mutator . py4f8f) (record-constructor . py4f8e) (record-accessor . py4f8d) (make-record-type-descriptor . py4f8c) (make-record-constructor-descriptor . py4f8b) (record? . py4f8a) (record-type-uid . py4f89) (record-type-sealed? . py4f88) (record-type-parent . py4f87) (record-type-opaque? . py4f86) (record-type-name . py4f85) (record-type-generative? . py4f84) (record-type-field-names . py4f83) (record-rtd . py4f82) (record-field-mutable? . py4f81) (delete-file . py4f80) (file-exists? . py4f7f) (vector-sort! . py4f7e) (vector-sort . py4f7d) (list-sort . py4f7c) (symbol-hash . py4f7b) (string-ci-hash . py4f7a) (string-hash . py4f79) (equal-hash . py4f78) (hashtable-equivalence-function . py4f77) (make-hashtable . py4f76) (hashtable-hash-function . py4f75) (make-eqv-hashtable . py4f74) (make-eq-hashtable . py4f73) (hashtable? . py4f72) (hashtable-update! . py4f71) (hashtable-size . py4f70) (hashtable-set! . py4f6f) (hashtable-ref . py4f6e) (hashtable-mutable? . py4f6d) (hashtable-keys . py4f6c) (hashtable-entries . py4f6b) (hashtable-delete! . py4f6a) (hashtable-copy . py4f69) (hashtable-contains? . py4f68) (hashtable-clear! . py4f67) (call-with-output-file . py4f66) (call-with-input-file . py4f65) (write-char . py4f64) (write . py4f63) (with-output-to-file . py4f62) (with-input-from-file . py4f61) (read-char . py4f60) (read . py4f5f) (peek-char . py4f5e) (open-output-file . py4f5d) (open-input-file . py4f5c) (newline . py4f5b) (display . py4f5a) (close-output-port . py4f59) (close-input-port . py4f58) (eof-object? . py4f57) (eof-object . py4f56) (current-error-port . py4f55) (current-output-port . py4f54) (current-input-port . py4f53) (output-port? . py4f52) (input-port? . py4f51) (utf-8-codec . py4f50) (utf-16-codec . py4f4f) (transcoder-error-handling-mode . py4f4e) (transcoder-eol-style . py4f4d) (transcoder-codec . py4f4c) (transcoded-port . py4f4b) (textual-port? . py4f4a) (string->bytevector . py4f49) (standard-output-port . py4f48) (standard-input-port . py4f47) (standard-error-port . py4f46) (set-port-position! . py4f45) (put-u8 . py4f44) (put-string . py4f43) (put-datum . py4f42) (put-char . py4f41) (put-bytevector . py4f40) (port? . py4f3f) (port-transcoder . py4f3e) (port-position . py4f3d) (port-has-set-port-position!? . py4f3c) (port-has-port-position? . py4f3b) (port-eof? . py4f3a) (output-port-buffer-mode . py4f39) (open-string-output-port . py4f38) (open-string-input-port . py4f37) (open-file-output-port . py4f36) (open-file-input/output-port . py4f35) (open-file-input-port . py4f34) (open-bytevector-output-port . py4f33) (open-bytevector-input-port . py4f32) (native-transcoder . py4f31) (native-eol-style . py4f30) (make-transcoder . py4f2f) (latin-1-codec . py4f2e) (make-i/o-write-error . py49b9) (make-i/o-read-error . py49a4) (make-i/o-port-error . py4a5a) (make-i/o-invalid-position-error . py49d0) (make-i/o-filename-error . py49eb) (make-i/o-file-protection-error . py4a04) (make-i/o-file-is-read-only-error . py4a19) (make-i/o-file-does-not-exist-error . py4a43) (make-i/o-file-already-exists-error . py4a2e) (make-i/o-error . py498f) (make-i/o-encoding-error . py4a8a) (make-i/o-decoding-error . py4a73) (make-custom-textual-output-port . py4f2d) (make-custom-textual-input/output-port . py4f2c) (make-custom-textual-input-port . py4f2b) (make-custom-binary-output-port . py4f2a) (make-custom-binary-input/output-port . py4f29) (make-custom-binary-input-port . py4f28) (make-bytevector . py4f27) (lookahead-u8 . py4f26) (lookahead-char . py4f25) (i/o-write-error? . py49bb) (i/o-read-error? . py49a6) (i/o-port-error? . py4a5e) (i/o-invalid-position-error? . py49d4) (i/o-filename-error? . py49ef) (i/o-file-protection-error? . py4a06) (i/o-file-is-read-only-error? . py4a1b) (i/o-file-does-not-exist-error? . py4a45) (i/o-file-already-exists-error? . py4a30) (i/o-error? . py4991) (i/o-error-position . py49d6) (i/o-error-port . py4a60) (i/o-error-filename . py49f1) (i/o-encoding-error? . py4a8e) (i/o-encoding-error-char . py4a90) (i/o-decoding-error? . py4a75) (get-u8 . py4f24) (get-string-n! . py4f23) (get-string-n . py4f22) (get-string-all . py4f21) (get-line . py4f20) (get-datum . py4f1f) (get-char . py4f1e) (get-bytevector-some . py4f1d) (get-bytevector-n! . py4f1c) (get-bytevector-n . py4f1b) (get-bytevector-all . py4f1a) (flush-output-port . py4f19) (close-port . py4f18) (scheme-report-environment . py2d6b) (quotient . py4f17) (null-environment . py2d69) (remainder . py4f16) (modulo . py4f15) (inexact->exact . py4f14) (force . py4f13) (exact->inexact . py4f12) (make-promise . py4f11) (exit . py4f10) (command-line . py4bc9) (string-fill! . py4f0f) (string-set! . py4f0e) (set-cdr! . py4f0d) (set-car! . py4f0c) (remove . py4f0b) (remv . py4f0a) (remp . py4f09) (remq . py4f08) (partition . py4f07) (memv . py4f06) (memq . py4f05) (memp . py4f04) (member . py4f03) (exists . py4f02) (for-all . py4f01) (fold-right . py4f00) (fold-left . py4eff) (find . py4efe) (filter . py4efd) (cons* . py4efc) (assv . py4efb) (assq . py4efa) (assp . py4ef9) (assoc . py4ef8) (call-with-string-output-port . py4ef7) (call-with-port . py4ef6) (call-with-bytevector-output-port . py4ef5) (bytevector->string . py4ef4) (buffer-mode? . py4ef3) (binary-port? . py4ef2) (with-exception-handler . py4ef1) (raise-continuable . py4ef0) (raise . py4eef) (eval . py2d6f) (environment . py2d67) (make-enumeration . py4eee) (enum-set=? . py4eed) (enum-set-universe . py4eec) (enum-set-union . py4eeb) (enum-set-subset? . py4eea) (enum-set-projection . py4ee9) (enum-set-member? . py4ee8) (enum-set-intersection . py4ee7) (enum-set-indexer . py4ee6) (enum-set-difference . py4ee5) (enum-set-constructor . py4ee4) (enum-set-complement . py4ee3) (enum-set->list . py4ee2) (who-condition? . py4905) (warning? . py487d) (violation? . py48bc) (undefined-violation? . py497c) (syntax-violation? . py4963) (syntax-violation-subform . py4967) (syntax-violation-form . py4965) (syntax-violation . py2d8f) (simple-conditions . py4ee1) (serious-condition? . py4892) (non-continuable-violation? . py491c) (message-condition? . py4866) (make-who-condition . py4901) (make-warning . py487b) (make-violation . py48ba) (make-undefined-violation . py497a) (make-syntax-violation . py495d) (make-serious-condition . py4890) (make-non-continuable-violation . py491a) (make-message-condition . py4862) (make-lexical-violation . py4944) (make-irritants-condition . py48e6) (make-implementation-restriction-violation . py492f) (make-error . py48a5) (make-assertion-violation . py48cf) (lexical-violation? . py4946) (irritants-condition? . py48ea) (implementation-restriction-violation? . py4931) (error? . py48a7) (condition-who . py4907) (condition-predicate . py4ee0) (condition-message . py4868) (condition-irritants . py48ec) (condition-accessor . py4edf) (condition . py4ede) (assertion-violation? . py48d1) (condition? . py4edd) (utf32->string . py4edc) (utf16->string . py4edb) (utf8->string . py4eda) (uint-list->bytevector . py4ed9) (u8-list->bytevector . py4ed8) (string->utf8 . py4ed7) (string->utf32 . py4ed6) (string->utf16 . py4ed5) (sint-list->bytevector . py4ed4) (native-endianness . py4ed3) (bytevector? . py4ed2) (bytevector=? . py4ed1) (bytevector-uint-set! . py4ed0) (bytevector-uint-ref . py4ecf) (bytevector-u8-set! . py4ece) (bytevector-u8-ref . py4ecd) (bytevector-u64-set! . py4ecc) (bytevector-u64-ref . py4ecb) (bytevector-u64-native-set! . py4eca) (bytevector-u64-native-ref . py4ec9) (bytevector-u32-set! . py4ec8) (bytevector-u32-ref . py4ec7) (bytevector-u32-native-set! . py4ec6) (bytevector-u32-native-ref . py4ec5) (bytevector-u16-set! . py4ec4) (bytevector-u16-ref . py4ec3) (bytevector-u16-native-set! . py4ec2) (bytevector-u16-native-ref . py4ec1) (bytevector-sint-set! . py4ec0) (bytevector-sint-ref . py4ebf) (bytevector-s8-set! . py4ebe) (bytevector-s8-ref . py4ebd) (bytevector-s64-set! . py4ebc) (bytevector-s64-ref . py4ebb) (bytevector-s64-native-set! . py4eba) (bytevector-s64-native-ref . py4eb9) (bytevector-s32-set! . py4eb8) (bytevector-s32-ref . py4eb7) (bytevector-s32-native-set! . py4eb6) (bytevector-s32-native-ref . py4eb5) (bytevector-s16-set! . py4eb4) (bytevector-s16-ref . py4eb3) (bytevector-s16-native-set! . py4eb2) (bytevector-s16-native-ref . py4eb1) (bytevector-length . py4eb0) (bytevector-ieee-single-ref . py4eaf) (bytevector-ieee-single-set! . py4eae) (bytevector-ieee-single-native-set! . py4ead) (bytevector-ieee-single-native-ref . py4eac) (bytevector-ieee-double-set! . py4eab) (bytevector-ieee-double-ref . py4eaa) (bytevector-ieee-double-native-set! . py4ea9) (bytevector-ieee-double-native-ref . py4ea8) (bytevector-fill! . py4ea7) (bytevector-copy! . py4ea6) (bytevector-copy . py4ea5) (bytevector->uint-list . py4ea4) (bytevector->u8-list . py4ea3) (bytevector->sint-list . py4ea2) (no-nans-violation? . py4aba) (no-infinities-violation? . py4aa5) (make-no-nans-violation . py4ab8) (make-no-infinities-violation . py4aa3) (real->flonum . py4ea1) (flzero? . py4ea0) (fltruncate . py4e9f) (fltan . py4e9e) (flsqrt . py4e9d) (flsin . py4e9c) (flround . py4e9b) (flpositive? . py4e9a) (flonum? . py4e99) (flodd? . py4e98) (flnumerator . py4e97) (flnegative? . py4e96) (flnan? . py4e95) (flmod0 . py4e94) (flmod . py4e93) (flmin . py4e92) (flmax . py4e91) (fllog . py4e90) (flinteger? . py4e8f) (flinfinite? . py4e8e) (flfloor . py4e8d) (flfinite? . py4e8c) (flexpt . py4e8b) (flexp . py4e8a) (fleven? . py4e89) (fldiv0-and-mod0 . py4e88) (fldiv0 . py4e87) (fldiv-and-mod . py4e86) (fldiv . py4e85) (fldenominator . py4e84) (flcos . py4e83) (flceiling . py4e82) (flatan . py4e81) (flasin . py4e80) (flacos . py4e7f) (flabs . py4e7e) (fl>? . py4e7d) (fl>=? . py4e7c) (fl=? . py4e7b) (fl<? . py4e7a) (fl<=? . py4e79) (fl/ . py4e78) (fl- . py4e77) (fl+ . py4e76) (fl* . py4e75) (fixnum->flonum . py4e74) (fxzero? . py4e73) (fxxor . py4e72) (fxrotate-bit-field . py4e71) (fxreverse-bit-field . py4e70) (fxpositive? . py4e6f) (fxodd? . py4e6e) (fxnot . py4e6d) (fxnegative? . py4e6c) (fxmod0 . py4e6b) (fxmod . py4e6a) (fxmin . py4e69) (fxmax . py4e68) (fxlength . py4e67) (fxior . py4e66) (fxif . py4e65) (fxfirst-bit-set . py4e64) (fxeven? . py4e63) (fxdiv0-and-mod0 . py4e62) (fxdiv0 . py4e61) (fxdiv-and-mod . py4e60) (fxdiv . py4e5f) (fxcopy-bit-field . py4e5e) (fxcopy-bit . py4e5d) (fxbit-set? . py4e5c) (fxbit-field . py4e5b) (fxbit-count . py4e5a) (fxarithmetic-shift-right . py4e59) (fxarithmetic-shift-left . py4e58) (fxarithmetic-shift . py4e57) (fxand . py4e56) (fx>? . py4e55) (fx>=? . py4e54) (fx=? . py4e53) (fx<? . py4e52) (fx<=? . py4e51) (fx-/carry . py4e50) (fx- . py4e4f) (fx+/carry . py4e4e) (fx+ . py4e4d) (fx*/carry . py4e4c) (fx* . py4e4b) (greatest-fixnum . py4e4a) (least-fixnum . py4e49) (fixnum-width . py4e48) (fixnum? . py4e47) (bitwise-rotate-bit-field . py4e46) (bitwise-reverse-bit-field . py4e45) (bitwise-length . py4e44) (bitwise-if . py4e43) (bitwise-first-bit-set . py4e42) (bitwise-copy-bit-field . py4e41) (bitwise-copy-bit . py4e40) (bitwise-bit-set? . py4e3f) (bitwise-bit-field . py4e3e) (bitwise-bit-count . py4e3d) (bitwise-xor . py4e3c) (bitwise-ior . py4e3b) (bitwise-and . py4e3a) (bitwise-not . py4e39) (bitwise-arithmetic-shift-right . py4e38) (bitwise-arithmetic-shift-left . py4e37) (bitwise-arithmetic-shift . py4e36) (zero? . py4e35) (vector? . py4e34) (vector-set! . py4e33) (vector-ref . py4e32) (vector-map . py4e31) (vector-length . py4e30) (vector-for-each . py4e2f) (vector-fill! . py4e2e) (vector->list . py4e2d) (vector . py4e2c) (values . py4e2b) (truncate . py4e2a) (tan . py4e29) (symbol? . py4e28) (symbol=? . py4e27) (symbol->string . py4e26) (substring . py4e25) (string? . py4e24) (string>? . py4e23) (string>=? . py4e22) (string=? . py4e21) (string<? . py4e20) (string<=? . py4e1f) (string-ref . py4e1e) (string-length . py4e1d) (string-for-each . py4e1c) (string-copy . py4e1b) (string-append . py4e1a) (string->symbol . py4e19) (string->number . py4e18) (string->list . py4e17) (string . py4e16) (sqrt . py4e15) (sin . py4e14) (round . py4e13) (reverse . py4e12) (real? . py4e11) (real-valued? . py4e10) (real-part . py4e0f) (rationalize . py4e0e) (rational? . py4e0d) (rational-valued? . py4e0c) (procedure? . py4e0b) (positive? . py4e0a) (pair? . py4e09) (odd? . py4e08) (numerator . py4e07) (number? . py4e06) (number->string . py4e05) (null? . py4e04) (not . py4e03) (negative? . py4e02) (nan? . py4e01) (min . py4e00) (max . py4dff) (map . py4dfe) (make-vector . py4dfd) (make-string . py4dfc) (make-rectangular . py4dfb) (make-polar . py4dfa) (magnitude . py4df9) (log . py4df8) (list? . py4df7) (list-tail . py4df6) (list-ref . py4df5) (list->vector . py4df4) (list->string . py4df3) (list . py4df2) (length . py4df1) (lcm . py4df0) (integer? . py4def) (integer-valued? . py4dee) (integer->char . py4ded) (infinite? . py4dec) (inexact? . py4deb) (inexact . py4dea) (imag-part . py4de9) (gcd . py4de8) (for-each . py4de7) (floor . py4de6) (finite? . py4de5) (expt . py4de4) (exp . py4de3) (exact? . py4de2) (exact-integer-sqrt . py4de1) (exact . py4de0) (even? . py4ddf) (error . py4dde) (eqv? . py4ddd) (equal? . py4ddc) (eq? . py4ddb) (dynamic-wind . py4dda) (div0-and-mod0 . py4dd9) (mod0 . py4dd8) (div0 . py4dd7) (div-and-mod . py4dd6) (mod . py4dd5) (div . py4dd4) (denominator . py4dd3) (cos . py4dd2) (cons . py4dd1) (complex? . py4dd0) (char? . py4dcf) (char>? . py4dce) (char>=? . py4dcd) (char=? . py4dcc) (char<? . py4dcb) (char<=? . py4dca) (char->integer . py4dc9) (ceiling . py4dc8) (call-with-values . py4dc7) (call/cc . py4dc6) (call-with-current-continuation . py4dc5) (cddddr . py4dc4) (cdddar . py4dc3) (cddadr . py4dc2) (cddaar . py4dc1) (cdaddr . py4dc0) (cdadar . py4dbf) (cdaadr . py4dbe) (cdaaar . py4dbd) (cadddr . py4dbc) (caddar . py4dbb) (cadadr . py4dba) (cadaar . py4db9) (caaddr . py4db8) (caadar . py4db7) (caaadr . py4db6) (caaaar . py4db5) (cdddr . py4db4) (cddar . py4db3) (cdadr . py4db2) (cdaar . py4db1) (caddr . py4db0) (cadar . py4daf) (caadr . py4dae) (caaar . py4dad) (cddr . py4dac) (cdar . py4dab) (cadr . py4daa) (caar . py4da9) (cdr . py4da8) (car . py4da7) (boolean? . py4da6) (boolean=? . py4da5) (atan . py4da4) (assertion-violation . py4da3) (assertion-error . py2d89) (asin . py4da2) (apply . py4da1) (append . py4da0) (angle . py4d9f) (acos . py4d9e) (abs . py4d9d) (/ . py4d9c) (* . py4d9b) (- . py4d9a) (+ . py4d99) (>= . py4d98) (> . py4d97) (= . py4d96) (<= . py4d95) (< . py4d94) (library . py4d93) (&no-nans . py4d92) (&no-infinities . py4d91) (&i/o-encoding . py4d90) (&i/o-decoding . py4d8f) (&i/o-port . py4d8e) (&i/o-file-does-not-exist . py4d8d) (&i/o-file-already-exists . py4d8c) (&i/o-file-is-read-only . py4d8b) (&i/o-file-protection . py4d8a) (&i/o-filename . py4d89) (&i/o-invalid-position . py4d88) (&i/o-write . py4d87) (&i/o-read . py4d86) (&i/o . py4d85) (&undefined . py4d84) (&syntax . py4d83) (&lexical . py4d82) (&implementation-restriction . py4d81) (&non-continuable . py4d80) (&who . py4d7f) (&irritants . py4d7e) (&assertion . py4d7d) (&violation . py4d7c) (&error . py4d7b) (&serious . py4d7a) (&warning . py4d79) (&message . py4d78) (&condition . py4d77) (define-condition-type . py4d76) (define-enumeration . py4d75) (define-record-type . py4d74) (parent-rtd . py4d73) (nongenerative . py4d72) (opaque . py4d71) (sealed . py4d70) (protocol . py4d6f) (parent . py4d6e) (immutable . py4d6d) (mutable . py4d6c) (fields . py4d6b) (error-handling-mode . py4d6a) (file-options . py4d69) (buffer-mode . py4d68) (eol-style . py4d67) (guard . py4d66) (trace-define . py4d65) (trace-lambda . py4d64) (unsyntax-splicing . py4d63) (unsyntax . py4d62) (unquote-splicing . py4d61) (unquote . py4d60) (_ . py4d5f) (else . py4d5e) (=> . py4d5d) (... . py4d5c) (assert . py4d5b) (endianness . py4d5a) (delay . py4d59) (time . py4d58) (do . py4d57) (cond . py4d56) (let* . py4d55) (let*-values . py4d54) (let-values . py4d53) (identifier-syntax . py4d52) (with-syntax . py4d51) (quasisyntax . py4d50) (quasiquote . py4d4f) (syntax-rules . py4d4e) (include . py4d4d) (define-struct . py4d4c) (record-constructor-descriptor . py4d4b) (record-type-descriptor . py4d4a) (case . py4d49) (parameterize . py4d48) (unless . py4d47) (when . py4d46) (or . py4d45) (and . py4d44) (if . py4d43) (let . py4d42) (letrec* . py4d41) (letrec . py4d40) (type-descriptor . py4d3f) (case-lambda . py4d3e) (lambda . py4d3d) (syntax . py4d3c) (syntax-case . py4d3b) (quote . py4d3a) (foreign-call . py4d39) (letrec-syntax . py4d38) (let-syntax . py4d37) (set! . py4d36) (import . py4d35) (begin . py4d34) (module . py4d33) (define-syntax . py4d32) (define . py4d31)) '((py4abe core-prim . &no-nans-rcd) (py4abc core-prim . &no-nans-rtd) (py4aa9 core-prim . &no-infinities-rcd) (py4aa7 core-prim . &no-infinities-rtd) (py4a94 core-prim . &i/o-encoding-rcd) (py4a92 core-prim . &i/o-encoding-rtd) (py4a79 core-prim . &i/o-decoding-rcd) (py4a77 core-prim . &i/o-decoding-rtd) (py4a64 core-prim . &i/o-port-rcd) (py4a62 core-prim . &i/o-port-rtd) (py4a49 core-prim . &i/o-file-does-not-exist-rcd) (py4a47 core-prim . &i/o-file-does-not-exist-rtd) (py4a34 core-prim . &i/o-file-already-exists-rcd) (py4a32 core-prim . &i/o-file-already-exists-rtd) (py4a1f core-prim . &i/o-file-is-read-only-rcd) (py4a1d core-prim . &i/o-file-is-read-only-rtd) (py4a0a core-prim . &i/o-file-protection-rcd) (py4a08 core-prim . &i/o-file-protection-rtd) (py49f5 core-prim . &i/o-filename-rcd) (py49f3 core-prim . &i/o-filename-rtd) (py49da core-prim . &i/o-invalid-position-rcd) (py49d8 core-prim . &i/o-invalid-position-rtd) (py49bf core-prim . &i/o-write-rcd) (py49bd core-prim . &i/o-write-rtd) (py49aa core-prim . &i/o-read-rcd) (py49a8 core-prim . &i/o-read-rtd) (py4995 core-prim . &i/o-rcd) (py4993 core-prim . &i/o-rtd) (py4980 core-prim . &undefined-rcd) (py497e core-prim . &undefined-rtd) (py496b core-prim . &syntax-rcd) (py4969 core-prim . &syntax-rtd) (py494a core-prim . &lexical-rcd) (py4948 core-prim . &lexical-rtd) (py4935 core-prim . &implementation-restriction-rcd) (py4933 core-prim . &implementation-restriction-rtd) (py4920 core-prim . &non-continuable-rcd) (py491e core-prim . &non-continuable-rtd) (py490b core-prim . &who-rcd) (py4909 core-prim . &who-rtd) (py48f0 core-prim . &irritants-rcd) (py48ee core-prim . &irritants-rtd) (py48d5 core-prim . &assertion-rcd) (py48d3 core-prim . &assertion-rtd) (py48c0 core-prim . &violation-rcd) (py48be core-prim . &violation-rtd) (py48ab core-prim . &error-rcd) (py48a9 core-prim . &error-rtd) (py4896 core-prim . &serious-rcd) (py4894 core-prim . &serious-rtd) (py4881 core-prim . &warning-rcd) (py487f core-prim . &warning-rtd) (py486c core-prim . &message-rcd) (py486a core-prim . &message-rtd) (py480d core-prim . &condition-rcd) (py480b core-prim . &condition-rtd) (py2d8b core-prim . syntax-error) (py2caf core-prim . syntax-dispatch) (py5058 core-prim . pretty-print) (py5057 core-prim . eval-core) (py5056 core-prim . set-symbol-value!) (py5055 core-prim . symbol-value) (py5054 core-prim . gensym) (py5053 core-prim . void) (py4bcf core-prim . load) (py2d9d core-prim . interaction-environment) (py5052 core-prim . char-ready?) (py5051 core-prim . regexp?) (py5050 core-prim . read-line) (py504f core-prim . gensym-prefix-set!) (py504e core-prim . ungensym) (py504d core-prim . alist->eq-hash-table) (py504c core-prim . assoc-ref) (py504b core-prim . print) (py504a core-prim . format) (py5049 core-prim . host-os) (py26e8 core-prim . library-path) (py5048 core-prim . standard-library-path) (py5047 core-prim . file-newer?) (py5046 core-prim . stat-mtime) (py5045 core-prim . write-to-file) (py5044 core-prim . file->list) (py5043 core-prim . file->string) (py5042 core-prim . digit->integer) (py5041 core-prim . call-with-string-input-port) (py5040 core-prim . call-with-string-io) (py503f core-prim . string-split) (py503e core-prim . bytevector-for-each) (py503d core-prim . string->regexp) (py503c core-prim . rxmatch) (py503b core-prim . regexp-replace-all) (py503a core-prim . hashtable-for-each) (py24d3 core-prim . mosh-cache-dir) (py5039 core-prim . call-process) (py5038 core-prim . local-tz-offset) (py5037 core-prim . microseconds) (py5036 core-prim . directory-list) (py5035 core-prim . set-current-directory!) (py5034 core-prim . expand-path) (py5033 core-prim . current-directory) (py5032 core-prim . %spawn) (py5031 core-prim . %waitpid) (py5030 core-prim . simple-struct-name) (py502f core-prim . simple-struct-set!) (py502e core-prim . simple-struct-ref) (py502d core-prim . make-simple-struct) (py502c core-prim . simple-struct?) (py502b core-prim . pointer-ref-c-int64) (py502a core-prim . pointer-ref-c-int32) (py5029 core-prim . pointer-ref-c-int16) (py5028 core-prim . pointer-ref-c-int8) (py5027 core-prim . pointer-ref-c-uint64) (py5026 core-prim . pointer-ref-c-uint32) (py5025 core-prim . pointer-ref-c-uint16) (py5024 core-prim . pointer-ref-c-uint8) (py5023 core-prim . pointer-set-c-uint64!) (py5022 core-prim . pointer-set-c-uint32!) (py5021 core-prim . pointer-set-c-uint16!) (py5020 core-prim . pointer-set-c-uint8!) (py501f core-prim . pointer-set-c-int64!) (py501e core-prim . pointer-set-c-int32!) (py501d core-prim . pointer-set-c-int16!) (py501c core-prim . pointer-set-c-int8!) (py501b core-prim . pointer-set-c-pointer!) (py501a core-prim . pointer-set-c-double!) (py5019 core-prim . pointer-set-c-float!) (py5018 core-prim . pointer-set-c-long-long!) (py5017 core-prim . pointer-set-c-long!) (py5016 core-prim . pointer-set-c-int!) (py5015 core-prim . pointer-set-c-short!) (py5014 core-prim . pointer-set-c-char!) (py5013 core-prim . pointer-ref-c-pointer) (py5012 core-prim . pointer-ref-c-double) (py5011 core-prim . pointer-ref-c-float) (py5010 core-prim . pointer-ref-c-unsigned-long-long) (py500f core-prim . pointer-ref-c-signed-long-long) (py500e core-prim . pointer-ref-c-unsigned-long) (py500d core-prim . pointer-ref-c-signed-long) (py500c core-prim . pointer-ref-c-unsigned-int) (py500b core-prim . pointer-ref-c-signed-int) (py500a core-prim . pointer-ref-c-unsigned-short) (py5009 core-prim . pointer-ref-c-signed-short) (py5008 core-prim . pointer-ref-c-unsigned-char) (py5007 core-prim . pointer-ref-c-signed-char) (py5006 core-prim . pointer->integer) (py5005 core-prim . integer->pointer) (py5004 core-prim . pointer?) (py5003 core-prim . shared-errno) (py5002 core-prim . %ffi-free) (py5001 core-prim . %ffi-malloc) (py5000 core-prim . %ffi-supported?) (py4fff core-prim . %ffi-pointer->string) (py4ffe core-prim . %ffi-call->string-or-zero) (py4ffd core-prim . %ffi-call->double) (py4ffc core-prim . %ffi-call->void*) (py4ffb core-prim . %ffi-call->void) (py4ffa core-prim . %ffi-call->char) (py4ff9 core-prim . %ffi-call->int) (py4ff8 core-prim . %ffi-lookup) (py4ff7 core-prim . %ffi-open) (py4ff6 core-prim . %fork) (py4ff5 core-prim . %pipe) (py4ff4 core-prim . p) (py4ff3 core-prim . open-output-string) (py4ff2 core-prim . get-output-string) (py4ff1 core-prim . file-stat-ctime) (py4ff0 core-prim . file-stat-atime) (py4fef core-prim . file-stat-mtime) (py4fee core-prim . file-size-in-bytes) (py4fed core-prim . file-writable?) (py4fec core-prim . file-executable?) (py4feb core-prim . file-readable?) (py4fea core-prim . file-regular?) (py4fe9 core-prim . file-symbolic-link?) (py4fe8 core-prim . file-directory?) (py4fe7 core-prim . create-symbolic-link) (py4fe6 core-prim . rename-file) (py4fe5 core-prim . delete-directory) (py4fe4 core-prim . create-directory) (py4fe3 core-prim . create-mosh-cache-dir) (py4fe2 core-prim . get-environment-variables) (py4fe1 core-prim . current-exception-handler) (py4fe0 core-prim . get-environment-variable) (py4fdf core-prim . join-wraps) (py4fde core-prim . id->real-label) (py4fdd core-prim . same-marks?) (py4fdc core-prim . same-marks*?) (py4fdb core-prim . get-timeofday) (py4fda core-prim . get-command-line) (py4fd9 core-prim . sys-display) (py4fd8 core-prim . whereis) (py4fd7 core-prim . register) (py4fd6 core-prim . vm-join!) (py4fd5 core-prim . vm-set-value!) (py4fd4 core-prim . vm?) (py4fd3 core-prim . main-vm?) (py4fd2 core-prim . vm-eval) (py4fd1 core-prim . vm-self) (py4fd0 core-prim . vm-start!) (py4fcf core-prim . make-vm) (py4fce core-prim . mutex-try-lock!) (py4fcd core-prim . mutex-unlock!) (py4fcc core-prim . mutex-lock!) (py4fcb core-prim . mutex?) (py4fca core-prim . make-mutex) (py4fc9 core-prim . condition-variable-notify-all!) (py4fc8 core-prim . condition-variable-notify!) (py4fc7 core-prim . condition-variable-wait!) (py4fc6 core-prim . make-condition-variable) (py4fc5 core-prim . mosh-executable-path) (py4fc4 core-prim . make-file-options) (py4fc3 core-prim . source-info) (py4fc2 core-prim . make-compiler-instruction) (py4fc1 core-prim . make-instruction) (py4fc0 core-prim . set-source-info!) (py4fbf core-prim . bignum?) (py4fbe core-prim . fast-equal?) (py4fbd core-prim . fasl-read) (py4fbc core-prim . fasl-write) (py4fbb core-prim . time-usage) (py4fba core-prim . os-constant) (py4fb9 core-prim . disasm) (py24d1 core-prim . make-parameter) (py4fb8 core-prim . socket-port) (py4fb7 core-prim . socket-shutdown) (py4fb6 core-prim . socket-close) (py4fb5 core-prim . socket-send) (py4fb4 core-prim . socket-recv!) (py4fb3 core-prim . socket-recv) (py4fb2 core-prim . make-server-socket) (py4fb1 core-prim . make-client-socket) (py4fb0 core-prim . socket-accept) (py4faf core-prim . socket?) (py4fae core-prim . string-upcase) (py4fad core-prim . string-titlecase) (py4fac core-prim . string-normalize-nfkd) (py4fab core-prim . string-normalize-nfkc) (py4faa core-prim . string-normalize-nfd) (py4fa9 core-prim . string-normalize-nfc) (py4fa8 core-prim . string-foldcase) (py4fa7 core-prim . string-downcase) (py4fa6 core-prim . string-ci>?) (py4fa5 core-prim . string-ci>=?) (py4fa4 core-prim . string-ci=?) (py4fa3 core-prim . string-ci<?) (py4fa2 core-prim . string-ci<=?) (py4fa1 core-prim . char-whitespace?) (py4fa0 core-prim . char-upper-case?) (py4f9f core-prim . char-title-case?) (py4f9e core-prim . char-numeric?) (py4f9d core-prim . char-lower-case?) (py4f9c core-prim . char-general-category) (py4f9b core-prim . char-upcase) (py4f9a core-prim . char-titlecase) (py4f99 core-prim . char-foldcase) (py4f98 core-prim . char-downcase) (py4f97 core-prim . char-ci>?) (py4f96 core-prim . char-ci>=?) (py4f95 core-prim . char-ci=?) (py4f94 core-prim . char-ci<?) (py4f93 core-prim . char-ci<=?) (py4f92 core-prim . char-alphabetic?) (py2ada core-prim . make-variable-transformer) (py2d91 core-prim . identifier?) (py2d7d core-prim . generate-temporaries) (py2d7f core-prim . free-identifier=?) (py2d95 core-prim . syntax->datum) (py2d93 core-prim . datum->syntax) (py2d81 core-prim . bound-identifier=?) (py4f91 core-prim . record-type-descriptor?) (py4f90 core-prim . record-predicate) (py4f8f core-prim . record-mutator) (py4f8e core-prim . record-constructor) (py4f8d core-prim . record-accessor) (py4f8c core-prim . make-record-type-descriptor) (py4f8b core-prim . make-record-constructor-descriptor) (py4f8a core-prim . record?) (py4f89 core-prim . record-type-uid) (py4f88 core-prim . record-type-sealed?) (py4f87 core-prim . record-type-parent) (py4f86 core-prim . record-type-opaque?) (py4f85 core-prim . record-type-name) (py4f84 core-prim . record-type-generative?) (py4f83 core-prim . record-type-field-names) (py4f82 core-prim . record-rtd) (py4f81 core-prim . record-field-mutable?) (py4f80 core-prim . delete-file) (py4f7f core-prim . file-exists?) (py4f7e core-prim . vector-sort!) (py4f7d core-prim . vector-sort) (py4f7c core-prim . list-sort) (py4f7b core-prim . symbol-hash) (py4f7a core-prim . string-ci-hash) (py4f79 core-prim . string-hash) (py4f78 core-prim . equal-hash) (py4f77 core-prim . hashtable-equivalence-function) (py4f76 core-prim . make-hashtable) (py4f75 core-prim . hashtable-hash-function) (py4f74 core-prim . make-eqv-hashtable) (py4f73 core-prim . make-eq-hashtable) (py4f72 core-prim . hashtable?) (py4f71 core-prim . hashtable-update!) (py4f70 core-prim . hashtable-size) (py4f6f core-prim . hashtable-set!) (py4f6e core-prim . hashtable-ref) (py4f6d core-prim . hashtable-mutable?) (py4f6c core-prim . hashtable-keys) (py4f6b core-prim . hashtable-entries) (py4f6a core-prim . hashtable-delete!) (py4f69 core-prim . hashtable-copy) (py4f68 core-prim . hashtable-contains?) (py4f67 core-prim . hashtable-clear!) (py4f66 core-prim . call-with-output-file) (py4f65 core-prim . call-with-input-file) (py4f64 core-prim . write-char) (py4f63 core-prim . write) (py4f62 core-prim . with-output-to-file) (py4f61 core-prim . with-input-from-file) (py4f60 core-prim . read-char) (py4f5f core-prim . read) (py4f5e core-prim . peek-char) (py4f5d core-prim . open-output-file) (py4f5c core-prim . open-input-file) (py4f5b core-prim . newline) (py4f5a core-prim . display) (py4f59 core-prim . close-output-port) (py4f58 core-prim . close-input-port) (py4f57 core-prim . eof-object?) (py4f56 core-prim . eof-object) (py4f55 core-prim . current-error-port) (py4f54 core-prim . current-output-port) (py4f53 core-prim . current-input-port) (py4f52 core-prim . output-port?) (py4f51 core-prim . input-port?) (py4f50 core-prim . utf-8-codec) (py4f4f core-prim . utf-16-codec) (py4f4e core-prim . transcoder-error-handling-mode) (py4f4d core-prim . transcoder-eol-style) (py4f4c core-prim . transcoder-codec) (py4f4b core-prim . transcoded-port) (py4f4a core-prim . textual-port?) (py4f49 core-prim . string->bytevector) (py4f48 core-prim . standard-output-port) (py4f47 core-prim . standard-input-port) (py4f46 core-prim . standard-error-port) (py4f45 core-prim . set-port-position!) (py4f44 core-prim . put-u8) (py4f43 core-prim . put-string) (py4f42 core-prim . put-datum) (py4f41 core-prim . put-char) (py4f40 core-prim . put-bytevector) (py4f3f core-prim . port?) (py4f3e core-prim . port-transcoder) (py4f3d core-prim . port-position) (py4f3c core-prim . port-has-set-port-position!?) (py4f3b core-prim . port-has-port-position?) (py4f3a core-prim . port-eof?) (py4f39 core-prim . output-port-buffer-mode) (py4f38 core-prim . open-string-output-port) (py4f37 core-prim . open-string-input-port) (py4f36 core-prim . open-file-output-port) (py4f35 core-prim . open-file-input/output-port) (py4f34 core-prim . open-file-input-port) (py4f33 core-prim . open-bytevector-output-port) (py4f32 core-prim . open-bytevector-input-port) (py4f31 core-prim . native-transcoder) (py4f30 core-prim . native-eol-style) (py4f2f core-prim . make-transcoder) (py4f2e core-prim . latin-1-codec) (py49b9 core-prim . make-i/o-write-error) (py49a4 core-prim . make-i/o-read-error) (py4a5a core-prim . make-i/o-port-error) (py49d0 core-prim . make-i/o-invalid-position-error) (py49eb core-prim . make-i/o-filename-error) (py4a04 core-prim . make-i/o-file-protection-error) (py4a19 core-prim . make-i/o-file-is-read-only-error) (py4a43 core-prim . make-i/o-file-does-not-exist-error) (py4a2e core-prim . make-i/o-file-already-exists-error) (py498f core-prim . make-i/o-error) (py4a8a core-prim . make-i/o-encoding-error) (py4a73 core-prim . make-i/o-decoding-error) (py4f2d core-prim . make-custom-textual-output-port) (py4f2c core-prim . make-custom-textual-input/output-port) (py4f2b core-prim . make-custom-textual-input-port) (py4f2a core-prim . make-custom-binary-output-port) (py4f29 core-prim . make-custom-binary-input/output-port) (py4f28 core-prim . make-custom-binary-input-port) (py4f27 core-prim . make-bytevector) (py4f26 core-prim . lookahead-u8) (py4f25 core-prim . lookahead-char) (py49bb core-prim . i/o-write-error?) (py49a6 core-prim . i/o-read-error?) (py4a5e core-prim . i/o-port-error?) (py49d4 core-prim . i/o-invalid-position-error?) (py49ef core-prim . i/o-filename-error?) (py4a06 core-prim . i/o-file-protection-error?) (py4a1b core-prim . i/o-file-is-read-only-error?) (py4a45 core-prim . i/o-file-does-not-exist-error?) (py4a30 core-prim . i/o-file-already-exists-error?) (py4991 core-prim . i/o-error?) (py49d6 core-prim . i/o-error-position) (py4a60 core-prim . i/o-error-port) (py49f1 core-prim . i/o-error-filename) (py4a8e core-prim . i/o-encoding-error?) (py4a90 core-prim . i/o-encoding-error-char) (py4a75 core-prim . i/o-decoding-error?) (py4f24 core-prim . get-u8) (py4f23 core-prim . get-string-n!) (py4f22 core-prim . get-string-n) (py4f21 core-prim . get-string-all) (py4f20 core-prim . get-line) (py4f1f core-prim . get-datum) (py4f1e core-prim . get-char) (py4f1d core-prim . get-bytevector-some) (py4f1c core-prim . get-bytevector-n!) (py4f1b core-prim . get-bytevector-n) (py4f1a core-prim . get-bytevector-all) (py4f19 core-prim . flush-output-port) (py4f18 core-prim . close-port) (py2d6b core-prim . scheme-report-environment) (py4f17 core-prim . quotient) (py2d69 core-prim . null-environment) (py4f16 core-prim . remainder) (py4f15 core-prim . modulo) (py4f14 core-prim . inexact->exact) (py4f13 core-prim . force) (py4f12 core-prim . exact->inexact) (py4f11 core-prim . make-promise) (py4f10 core-prim . exit) (py4bc9 core-prim . command-line) (py4f0f core-prim . string-fill!) (py4f0e core-prim . string-set!) (py4f0d core-prim . set-cdr!) (py4f0c core-prim . set-car!) (py4f0b core-prim . remove) (py4f0a core-prim . remv) (py4f09 core-prim . remp) (py4f08 core-prim . remq) (py4f07 core-prim . partition) (py4f06 core-prim . memv) (py4f05 core-prim . memq) (py4f04 core-prim . memp) (py4f03 core-prim . member) (py4f02 core-prim . exists) (py4f01 core-prim . for-all) (py4f00 core-prim . fold-right) (py4eff core-prim . fold-left) (py4efe core-prim . find) (py4efd core-prim . filter) (py4efc core-prim . cons*) (py4efb core-prim . assv) (py4efa core-prim . assq) (py4ef9 core-prim . assp) (py4ef8 core-prim . assoc) (py4ef7 core-prim . call-with-string-output-port) (py4ef6 core-prim . call-with-port) (py4ef5 core-prim . call-with-bytevector-output-port) (py4ef4 core-prim . bytevector->string) (py4ef3 core-prim . buffer-mode?) (py4ef2 core-prim . binary-port?) (py4ef1 core-prim . with-exception-handler) (py4ef0 core-prim . raise-continuable) (py4eef core-prim . raise) (py2d6f core-prim . eval) (py2d67 core-prim . environment) (py4eee core-prim . make-enumeration) (py4eed core-prim . enum-set=?) (py4eec core-prim . enum-set-universe) (py4eeb core-prim . enum-set-union) (py4eea core-prim . enum-set-subset?) (py4ee9 core-prim . enum-set-projection) (py4ee8 core-prim . enum-set-member?) (py4ee7 core-prim . enum-set-intersection) (py4ee6 core-prim . enum-set-indexer) (py4ee5 core-prim . enum-set-difference) (py4ee4 core-prim . enum-set-constructor) (py4ee3 core-prim . enum-set-complement) (py4ee2 core-prim . enum-set->list) (py4905 core-prim . who-condition?) (py487d core-prim . warning?) (py48bc core-prim . violation?) (py497c core-prim . undefined-violation?) (py4963 core-prim . syntax-violation?) (py4967 core-prim . syntax-violation-subform) (py4965 core-prim . syntax-violation-form) (py2d8f core-prim . syntax-violation) (py4ee1 core-prim . simple-conditions) (py4892 core-prim . serious-condition?) (py491c core-prim . non-continuable-violation?) (py4866 core-prim . message-condition?) (py4901 core-prim . make-who-condition) (py487b core-prim . make-warning) (py48ba core-prim . make-violation) (py497a core-prim . make-undefined-violation) (py495d core-prim . make-syntax-violation) (py4890 core-prim . make-serious-condition) (py491a core-prim . make-non-continuable-violation) (py4862 core-prim . make-message-condition) (py4944 core-prim . make-lexical-violation) (py48e6 core-prim . make-irritants-condition) (py492f core-prim . make-implementation-restriction-violation) (py48a5 core-prim . make-error) (py48cf core-prim . make-assertion-violation) (py4946 core-prim . lexical-violation?) (py48ea core-prim . irritants-condition?) (py4931 core-prim . implementation-restriction-violation?) (py48a7 core-prim . error?) (py4907 core-prim . condition-who) (py4ee0 core-prim . condition-predicate) (py4868 core-prim . condition-message) (py48ec core-prim . condition-irritants) (py4edf core-prim . condition-accessor) (py4ede core-prim . condition) (py48d1 core-prim . assertion-violation?) (py4edd core-prim . condition?) (py4edc core-prim . utf32->string) (py4edb core-prim . utf16->string) (py4eda core-prim . utf8->string) (py4ed9 core-prim . uint-list->bytevector) (py4ed8 core-prim . u8-list->bytevector) (py4ed7 core-prim . string->utf8) (py4ed6 core-prim . string->utf32) (py4ed5 core-prim . string->utf16) (py4ed4 core-prim . sint-list->bytevector) (py4ed3 core-prim . native-endianness) (py4ed2 core-prim . bytevector?) (py4ed1 core-prim . bytevector=?) (py4ed0 core-prim . bytevector-uint-set!) (py4ecf core-prim . bytevector-uint-ref) (py4ece core-prim . bytevector-u8-set!) (py4ecd core-prim . bytevector-u8-ref) (py4ecc core-prim . bytevector-u64-set!) (py4ecb core-prim . bytevector-u64-ref) (py4eca core-prim . bytevector-u64-native-set!) (py4ec9 core-prim . bytevector-u64-native-ref) (py4ec8 core-prim . bytevector-u32-set!) (py4ec7 core-prim . bytevector-u32-ref) (py4ec6 core-prim . bytevector-u32-native-set!) (py4ec5 core-prim . bytevector-u32-native-ref) (py4ec4 core-prim . bytevector-u16-set!) (py4ec3 core-prim . bytevector-u16-ref) (py4ec2 core-prim . bytevector-u16-native-set!) (py4ec1 core-prim . bytevector-u16-native-ref) (py4ec0 core-prim . bytevector-sint-set!) (py4ebf core-prim . bytevector-sint-ref) (py4ebe core-prim . bytevector-s8-set!) (py4ebd core-prim . bytevector-s8-ref) (py4ebc core-prim . bytevector-s64-set!) (py4ebb core-prim . bytevector-s64-ref) (py4eba core-prim . bytevector-s64-native-set!) (py4eb9 core-prim . bytevector-s64-native-ref) (py4eb8 core-prim . bytevector-s32-set!) (py4eb7 core-prim . bytevector-s32-ref) (py4eb6 core-prim . bytevector-s32-native-set!) (py4eb5 core-prim . bytevector-s32-native-ref) (py4eb4 core-prim . bytevector-s16-set!) (py4eb3 core-prim . bytevector-s16-ref) (py4eb2 core-prim . bytevector-s16-native-set!) (py4eb1 core-prim . bytevector-s16-native-ref) (py4eb0 core-prim . bytevector-length) (py4eaf core-prim . bytevector-ieee-single-ref) (py4eae core-prim . bytevector-ieee-single-set!) (py4ead core-prim . bytevector-ieee-single-native-set!) (py4eac core-prim . bytevector-ieee-single-native-ref) (py4eab core-prim . bytevector-ieee-double-set!) (py4eaa core-prim . bytevector-ieee-double-ref) (py4ea9 core-prim . bytevector-ieee-double-native-set!) (py4ea8 core-prim . bytevector-ieee-double-native-ref) (py4ea7 core-prim . bytevector-fill!) (py4ea6 core-prim . bytevector-copy!) (py4ea5 core-prim . bytevector-copy) (py4ea4 core-prim . bytevector->uint-list) (py4ea3 core-prim . bytevector->u8-list) (py4ea2 core-prim . bytevector->sint-list) (py4aba core-prim . no-nans-violation?) (py4aa5 core-prim . no-infinities-violation?) (py4ab8 core-prim . make-no-nans-violation) (py4aa3 core-prim . make-no-infinities-violation) (py4ea1 core-prim . real->flonum) (py4ea0 core-prim . flzero?) (py4e9f core-prim . fltruncate) (py4e9e core-prim . fltan) (py4e9d core-prim . flsqrt) (py4e9c core-prim . flsin) (py4e9b core-prim . flround) (py4e9a core-prim . flpositive?) (py4e99 core-prim . flonum?) (py4e98 core-prim . flodd?) (py4e97 core-prim . flnumerator) (py4e96 core-prim . flnegative?) (py4e95 core-prim . flnan?) (py4e94 core-prim . flmod0) (py4e93 core-prim . flmod) (py4e92 core-prim . flmin) (py4e91 core-prim . flmax) (py4e90 core-prim . fllog) (py4e8f core-prim . flinteger?) (py4e8e core-prim . flinfinite?) (py4e8d core-prim . flfloor) (py4e8c core-prim . flfinite?) (py4e8b core-prim . flexpt) (py4e8a core-prim . flexp) (py4e89 core-prim . fleven?) (py4e88 core-prim . fldiv0-and-mod0) (py4e87 core-prim . fldiv0) (py4e86 core-prim . fldiv-and-mod) (py4e85 core-prim . fldiv) (py4e84 core-prim . fldenominator) (py4e83 core-prim . flcos) (py4e82 core-prim . flceiling) (py4e81 core-prim . flatan) (py4e80 core-prim . flasin) (py4e7f core-prim . flacos) (py4e7e core-prim . flabs) (py4e7d core-prim . fl>?) (py4e7c core-prim . fl>=?) (py4e7b core-prim . fl=?) (py4e7a core-prim . fl<?) (py4e79 core-prim . fl<=?) (py4e78 core-prim . fl/) (py4e77 core-prim . fl-) (py4e76 core-prim . fl+) (py4e75 core-prim . fl*) (py4e74 core-prim . fixnum->flonum) (py4e73 core-prim . fxzero?) (py4e72 core-prim . fxxor) (py4e71 core-prim . fxrotate-bit-field) (py4e70 core-prim . fxreverse-bit-field) (py4e6f core-prim . fxpositive?) (py4e6e core-prim . fxodd?) (py4e6d core-prim . fxnot) (py4e6c core-prim . fxnegative?) (py4e6b core-prim . fxmod0) (py4e6a core-prim . fxmod) (py4e69 core-prim . fxmin) (py4e68 core-prim . fxmax) (py4e67 core-prim . fxlength) (py4e66 core-prim . fxior) (py4e65 core-prim . fxif) (py4e64 core-prim . fxfirst-bit-set) (py4e63 core-prim . fxeven?) (py4e62 core-prim . fxdiv0-and-mod0) (py4e61 core-prim . fxdiv0) (py4e60 core-prim . fxdiv-and-mod) (py4e5f core-prim . fxdiv) (py4e5e core-prim . fxcopy-bit-field) (py4e5d core-prim . fxcopy-bit) (py4e5c core-prim . fxbit-set?) (py4e5b core-prim . fxbit-field) (py4e5a core-prim . fxbit-count) (py4e59 core-prim . fxarithmetic-shift-right) (py4e58 core-prim . fxarithmetic-shift-left) (py4e57 core-prim . fxarithmetic-shift) (py4e56 core-prim . fxand) (py4e55 core-prim . fx>?) (py4e54 core-prim . fx>=?) (py4e53 core-prim . fx=?) (py4e52 core-prim . fx<?) (py4e51 core-prim . fx<=?) (py4e50 core-prim . fx-/carry) (py4e4f core-prim . fx-) (py4e4e core-prim . fx+/carry) (py4e4d core-prim . fx+) (py4e4c core-prim . fx*/carry) (py4e4b core-prim . fx*) (py4e4a core-prim . greatest-fixnum) (py4e49 core-prim . least-fixnum) (py4e48 core-prim . fixnum-width) (py4e47 core-prim . fixnum?) (py4e46 core-prim . bitwise-rotate-bit-field) (py4e45 core-prim . bitwise-reverse-bit-field) (py4e44 core-prim . bitwise-length) (py4e43 core-prim . bitwise-if) (py4e42 core-prim . bitwise-first-bit-set) (py4e41 core-prim . bitwise-copy-bit-field) (py4e40 core-prim . bitwise-copy-bit) (py4e3f core-prim . bitwise-bit-set?) (py4e3e core-prim . bitwise-bit-field) (py4e3d core-prim . bitwise-bit-count) (py4e3c core-prim . bitwise-xor) (py4e3b core-prim . bitwise-ior) (py4e3a core-prim . bitwise-and) (py4e39 core-prim . bitwise-not) (py4e38 core-prim . bitwise-arithmetic-shift-right) (py4e37 core-prim . bitwise-arithmetic-shift-left) (py4e36 core-prim . bitwise-arithmetic-shift) (py4e35 core-prim . zero?) (py4e34 core-prim . vector?) (py4e33 core-prim . vector-set!) (py4e32 core-prim . vector-ref) (py4e31 core-prim . vector-map) (py4e30 core-prim . vector-length) (py4e2f core-prim . vector-for-each) (py4e2e core-prim . vector-fill!) (py4e2d core-prim . vector->list) (py4e2c core-prim . vector) (py4e2b core-prim . values) (py4e2a core-prim . truncate) (py4e29 core-prim . tan) (py4e28 core-prim . symbol?) (py4e27 core-prim . symbol=?) (py4e26 core-prim . symbol->string) (py4e25 core-prim . substring) (py4e24 core-prim . string?) (py4e23 core-prim . string>?) (py4e22 core-prim . string>=?) (py4e21 core-prim . string=?) (py4e20 core-prim . string<?) (py4e1f core-prim . string<=?) (py4e1e core-prim . string-ref) (py4e1d core-prim . string-length) (py4e1c core-prim . string-for-each) (py4e1b core-prim . string-copy) (py4e1a core-prim . string-append) (py4e19 core-prim . string->symbol) (py4e18 core-prim . string->number) (py4e17 core-prim . string->list) (py4e16 core-prim . string) (py4e15 core-prim . sqrt) (py4e14 core-prim . sin) (py4e13 core-prim . round) (py4e12 core-prim . reverse) (py4e11 core-prim . real?) (py4e10 core-prim . real-valued?) (py4e0f core-prim . real-part) (py4e0e core-prim . rationalize) (py4e0d core-prim . rational?) (py4e0c core-prim . rational-valued?) (py4e0b core-prim . procedure?) (py4e0a core-prim . positive?) (py4e09 core-prim . pair?) (py4e08 core-prim . odd?) (py4e07 core-prim . numerator) (py4e06 core-prim . number?) (py4e05 core-prim . number->string) (py4e04 core-prim . null?) (py4e03 core-prim . not) (py4e02 core-prim . negative?) (py4e01 core-prim . nan?) (py4e00 core-prim . min) (py4dff core-prim . max) (py4dfe core-prim . map) (py4dfd core-prim . make-vector) (py4dfc core-prim . make-string) (py4dfb core-prim . make-rectangular) (py4dfa core-prim . make-polar) (py4df9 core-prim . magnitude) (py4df8 core-prim . log) (py4df7 core-prim . list?) (py4df6 core-prim . list-tail) (py4df5 core-prim . list-ref) (py4df4 core-prim . list->vector) (py4df3 core-prim . list->string) (py4df2 core-prim . list) (py4df1 core-prim . length) (py4df0 core-prim . lcm) (py4def core-prim . integer?) (py4dee core-prim . integer-valued?) (py4ded core-prim . integer->char) (py4dec core-prim . infinite?) (py4deb core-prim . inexact?) (py4dea core-prim . inexact) (py4de9 core-prim . imag-part) (py4de8 core-prim . gcd) (py4de7 core-prim . for-each) (py4de6 core-prim . floor) (py4de5 core-prim . finite?) (py4de4 core-prim . expt) (py4de3 core-prim . exp) (py4de2 core-prim . exact?) (py4de1 core-prim . exact-integer-sqrt) (py4de0 core-prim . exact) (py4ddf core-prim . even?) (py4dde core-prim . error) (py4ddd core-prim . eqv?) (py4ddc core-prim . equal?) (py4ddb core-prim . eq?) (py4dda core-prim . dynamic-wind) (py4dd9 core-prim . div0-and-mod0) (py4dd8 core-prim . mod0) (py4dd7 core-prim . div0) (py4dd6 core-prim . div-and-mod) (py4dd5 core-prim . mod) (py4dd4 core-prim . div) (py4dd3 core-prim . denominator) (py4dd2 core-prim . cos) (py4dd1 core-prim . cons) (py4dd0 core-prim . complex?) (py4dcf core-prim . char?) (py4dce core-prim . char>?) (py4dcd core-prim . char>=?) (py4dcc core-prim . char=?) (py4dcb core-prim . char<?) (py4dca core-prim . char<=?) (py4dc9 core-prim . char->integer) (py4dc8 core-prim . ceiling) (py4dc7 core-prim . call-with-values) (py4dc6 core-prim . call/cc) (py4dc5 core-prim . call-with-current-continuation) (py4dc4 core-prim . cddddr) (py4dc3 core-prim . cdddar) (py4dc2 core-prim . cddadr) (py4dc1 core-prim . cddaar) (py4dc0 core-prim . cdaddr) (py4dbf core-prim . cdadar) (py4dbe core-prim . cdaadr) (py4dbd core-prim . cdaaar) (py4dbc core-prim . cadddr) (py4dbb core-prim . caddar) (py4dba core-prim . cadadr) (py4db9 core-prim . cadaar) (py4db8 core-prim . caaddr) (py4db7 core-prim . caadar) (py4db6 core-prim . caaadr) (py4db5 core-prim . caaaar) (py4db4 core-prim . cdddr) (py4db3 core-prim . cddar) (py4db2 core-prim . cdadr) (py4db1 core-prim . cdaar) (py4db0 core-prim . caddr) (py4daf core-prim . cadar) (py4dae core-prim . caadr) (py4dad core-prim . caaar) (py4dac core-prim . cddr) (py4dab core-prim . cdar) (py4daa core-prim . cadr) (py4da9 core-prim . caar) (py4da8 core-prim . cdr) (py4da7 core-prim . car) (py4da6 core-prim . boolean?) (py4da5 core-prim . boolean=?) (py4da4 core-prim . atan) (py4da3 core-prim . assertion-violation) (py2d89 core-prim . assertion-error) (py4da2 core-prim . asin) (py4da1 core-prim . apply) (py4da0 core-prim . append) (py4d9f core-prim . angle) (py4d9e core-prim . acos) (py4d9d core-prim . abs) (py4d9c core-prim . /) (py4d9b core-prim . *) (py4d9a core-prim . -) (py4d99 core-prim . +) (py4d98 core-prim . >=) (py4d97 core-prim . >) (py4d96 core-prim . =) (py4d95 core-prim . <=) (py4d94 core-prim . <) (py4d93 core-prim . library) (py4d92 $core-rtd &no-nans-rtd &no-nans-rcd) (py4d91 $core-rtd &no-infinities-rtd &no-infinities-rcd) (py4d90 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (py4d8f $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (py4d8e $core-rtd &i/o-port-rtd &i/o-port-rcd) (py4d8d $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (py4d8c $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (py4d8b $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (py4d8a $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (py4d89 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (py4d88 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (py4d87 $core-rtd &i/o-write-rtd &i/o-write-rcd) (py4d86 $core-rtd &i/o-read-rtd &i/o-read-rcd) (py4d85 $core-rtd &i/o-rtd &i/o-rcd) (py4d84 $core-rtd &undefined-rtd &undefined-rcd) (py4d83 $core-rtd &syntax-rtd &syntax-rcd) (py4d82 $core-rtd &lexical-rtd &lexical-rcd) (py4d81 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (py4d80 $core-rtd &non-continuable-rtd &non-continuable-rcd) (py4d7f $core-rtd &who-rtd &who-rcd) (py4d7e $core-rtd &irritants-rtd &irritants-rcd) (py4d7d $core-rtd &assertion-rtd &assertion-rcd) (py4d7c $core-rtd &violation-rtd &violation-rcd) (py4d7b $core-rtd &error-rtd &error-rcd) (py4d7a $core-rtd &serious-rtd &serious-rcd) (py4d79 $core-rtd &warning-rtd &warning-rcd) (py4d78 $core-rtd &message-rtd &message-rcd) (py4d77 $core-rtd &condition-rtd &condition-rcd) (py4d76 macro . define-condition-type) (py4d75 macro . define-enumeration) (py4d74 macro . define-record-type) (py4d73 macro . parent-rtd) (py4d72 macro . nongenerative) (py4d71 macro . opaque) (py4d70 macro . sealed) (py4d6f macro . protocol) (py4d6e macro . parent) (py4d6d macro . immutable) (py4d6c macro . mutable) (py4d6b macro . fields) (py4d6a macro . error-handling-mode) (py4d69 macro . file-options) (py4d68 macro . buffer-mode) (py4d67 macro . eol-style) (py4d66 macro . guard) (py4d65 macro . trace-define) (py4d64 macro . trace-lambda) (py4d63 macro . unsyntax-splicing) (py4d62 macro . unsyntax) (py4d61 macro . unquote-splicing) (py4d60 macro . unquote) (py4d5f macro . _) (py4d5e macro . else) (py4d5d macro . =>) (py4d5c macro . ...) (py4d5b macro . assert) (py4d5a macro . endianness) (py4d59 macro . delay) (py4d58 macro . time) (py4d57 macro . do) (py4d56 macro . cond) (py4d55 macro . let*) (py4d54 macro . let*-values) (py4d53 macro . let-values) (py4d52 macro . identifier-syntax) (py4d51 macro . with-syntax) (py4d50 macro . quasisyntax) (py4d4f macro . quasiquote) (py4d4e macro . syntax-rules) (py4d4d macro . include) (py4d4c macro . define-struct) (py4d4b core-macro . record-constructor-descriptor) (py4d4a core-macro . record-type-descriptor) (py4d49 macro . case) (py4d48 macro . parameterize) (py4d47 macro . unless) (py4d46 macro . when) (py4d45 core-macro . or) (py4d44 core-macro . and) (py4d43 core-macro . if) (py4d42 core-macro . let) (py4d41 core-macro . letrec*) (py4d40 core-macro . letrec) (py4d3f core-macro . type-descriptor) (py4d3e core-macro . case-lambda) (py4d3d core-macro . lambda) (py4d3c core-macro . syntax) (py4d3b core-macro . syntax-case) (py4d3a core-macro . quote) (py4d39 core-macro . foreign-call) (py4d38 letrec-syntax) (py4d37 let-syntax) (py4d36 set!) (py4d35 import) (py4d34 begin) (py4d33 module) (py4d32 define-syntax) (py4d31 define)) values values '#f '#f '#f '#f) (py28bd@py2709@install-library 'py5079 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . py5058) (eval-core . py5057) (set-symbol-value! . py5056) (symbol-value . py5055) (gensym . py5054) (void . py5053)) '() values values '#f '#f '#f '#f) (py28bd@py2709@install-library 'py507a '(mosh) '() '() '() '() '((set-symbol-value! . py5056) (symbol-value . py5055) (regexp? . py5051) (read-line . py5050) (ungensym . py504e) (alist->eq-hash-table . py504d) (assoc-ref . py504c) (print . py504b) (format . py504a) (host-os . py5049) (library-path . py26e8) (standard-library-path . py5048) (file-newer? . py5047) (stat-mtime . py5046) (digit->integer . py5042) (call-with-string-input-port . py5041) (call-with-string-io . py5040) (string-split . py503f) (bytevector-for-each . py503e) (string->regexp . py503d) (rxmatch . py503c) (regexp-replace-all . py503b) (hashtable-for-each . py503a) (set-current-directory! . py5035) (expand-path . py5034) (current-directory . py5033) (p . py4ff4) (get-timeofday . py4fdb) (get-command-line . py4fda) (sys-display . py4fd9) (whereis . py4fd8) (register . py4fd7) (vm-join! . py4fd6) (vm-set-value! . py4fd5) (vm? . py4fd4) (main-vm? . py4fd3) (vm-eval . py4fd2) (vm-self . py4fd1) (vm-start! . py4fd0) (make-vm . py4fcf) (mutex-try-lock! . py4fce) (mutex-unlock! . py4fcd) (mutex-lock! . py4fcc) (mutex? . py4fcb) (make-mutex . py4fca) (condition-variable-notify-all! . py4fc9) (condition-variable-notify! . py4fc8) (condition-variable-wait! . py4fc7) (make-condition-variable . py4fc6) (mosh-executable-path . py4fc5) (make-file-options . py4fc4) (source-info . py4fc3) (make-compiler-instruction . py4fc2) (make-instruction . py4fc1) (set-source-info! . py4fc0) (bignum? . py4fbf) (fast-equal? . py4fbe) (fasl-read . py4fbd) (fasl-write . py4fbc) (time-usage . py4fbb) (os-constant . py4fba) (time . py4d58) (include . py4d4d)) '() values values '#f '#f '#f '#f) (py28bd@py2709@install-library 'py507b '(system) '() '() '() '() '((gensym-prefix-set! . py504f) (write-to-file . py5045) (file->list . py5044) (file->string . py5043) (mosh-cache-dir . py24d3) (call-process . py5039) (local-tz-offset . py5038) (microseconds . py5037) (directory-list . py5036) (expand-path . py5034) (%spawn . py5032) (%waitpid . py5031) (simple-struct-name . py5030) (simple-struct-set! . py502f) (simple-struct-ref . py502e) (make-simple-struct . py502d) (simple-struct? . py502c) (pointer-ref-c-int64 . py502b) (pointer-ref-c-int32 . py502a) (pointer-ref-c-int16 . py5029) (pointer-ref-c-int8 . py5028) (pointer-ref-c-uint64 . py5027) (pointer-ref-c-uint32 . py5026) (pointer-ref-c-uint16 . py5025) (pointer-ref-c-uint8 . py5024) (pointer-set-c-uint64! . py5023) (pointer-set-c-uint32! . py5022) (pointer-set-c-uint16! . py5021) (pointer-set-c-uint8! . py5020) (pointer-set-c-int64! . py501f) (pointer-set-c-int32! . py501e) (pointer-set-c-int16! . py501d) (pointer-set-c-int8! . py501c) (pointer-set-c-pointer! . py501b) (pointer-set-c-double! . py501a) (pointer-set-c-float! . py5019) (pointer-set-c-long-long! . py5018) (pointer-set-c-long! . py5017) (pointer-set-c-int! . py5016) (pointer-set-c-short! . py5015) (pointer-set-c-char! . py5014) (pointer-ref-c-pointer . py5013) (pointer-ref-c-double . py5012) (pointer-ref-c-float . py5011) (pointer-ref-c-unsigned-long-long . py5010) (pointer-ref-c-signed-long-long . py500f) (pointer-ref-c-unsigned-long . py500e) (pointer-ref-c-signed-long . py500d) (pointer-ref-c-unsigned-int . py500c) (pointer-ref-c-signed-int . py500b) (pointer-ref-c-unsigned-short . py500a) (pointer-ref-c-signed-short . py5009) (pointer-ref-c-unsigned-char . py5008) (pointer-ref-c-signed-char . py5007) (pointer->integer . py5006) (integer->pointer . py5005) (pointer? . py5004) (shared-errno . py5003) (%ffi-free . py5002) (%ffi-malloc . py5001) (%ffi-supported? . py5000) (%ffi-pointer->string . py4fff) (%ffi-call->string-or-zero . py4ffe) (%ffi-call->double . py4ffd) (%ffi-call->void* . py4ffc) (%ffi-call->void . py4ffb) (%ffi-call->char . py4ffa) (%ffi-call->int . py4ff9) (%ffi-lookup . py4ff8) (%ffi-open . py4ff7) (%fork . py4ff6) (%pipe . py4ff5) (open-output-string . py4ff3) (get-output-string . py4ff2) (file-stat-ctime . py4ff1) (file-stat-atime . py4ff0) (file-stat-mtime . py4fef) (file-size-in-bytes . py4fee) (file-writable? . py4fed) (file-executable? . py4fec) (file-readable? . py4feb) (file-regular? . py4fea) (file-symbolic-link? . py4fe9) (file-directory? . py4fe8) (create-symbolic-link . py4fe7) (rename-file . py4fe6) (delete-directory . py4fe5) (create-directory . py4fe4) (create-mosh-cache-dir . py4fe3) (get-environment-variables . py4fe2) (current-exception-handler . py4fe1) (get-environment-variable . py4fe0) (join-wraps . py4fdf) (id->real-label . py4fde) (same-marks? . py4fdd) (same-marks*? . py4fdc) (disasm . py4fb9) (make-parameter . py24d1) (socket-port . py4fb8) (socket-shutdown . py4fb7) (socket-close . py4fb6) (socket-send . py4fb5) (socket-recv! . py4fb4) (socket-recv . py4fb3) (make-server-socket . py4fb2) (make-client-socket . py4fb1) (socket-accept . py4fb0) (socket? . py4faf) (parameterize . py4d48)) '() values values '#f '#f '#f '#f)))
(begin (set! py4bb4@ref (unspecified)) (set! py4bb6@x* (unspecified)) (set! py4bb8@add-library-path! (unspecified)) (set! py4bba@parse-and-add-library-path (unspecified)) (set! py4bbc@for-each-with-index (unspecified)) (set! py4bbe@rpad (unspecified)) (set! py4bc0@condition-printer (unspecified)) (set! py4bc2@record->field-alist (unspecified)) (set! py4bc4@map-with-index (unspecified)) (set! py4bc6@repl (unspecified)) (set! py4bc8@trace-printer (unspecified)) (set! py4bca@command-line (unspecified)) (set! py4bcc@local-library-path (unspecified)) (set! py4bce@load/args (unspecified)) (set! py4bd0@load (unspecified)) (set! py4bd2@ironscheme-build (unspecified)) (set! py4bd4@eval-top-level (unspecified)) (set! py4bd6@compile-system-libraries (unspecified)) (set! py4bd8@compile (unspecified)) (set! py4bda@compile->closure (unspecified)) (set! py4bdc@pre-compile-r6rs-file (unspecified)) (set! py4bde@load-r6rs-top-level (unspecified)) (set! py4be0@load-r6rs-top-level-sexp (unspecified)) (set! py4be2@prefix-inc (unspecified)) (set! py4be4@prefix-inc! (unspecified)) (set! py4bb4@ref (lambda (py4c1f@rtd py4c20@i py4c21@x) (let ((py4c25@val ((record-accessor py4c1f@rtd py4c20@i) py4c21@x))) (if (symbol? py4c25@val) (ungensym py4c25@val) py4c25@val)))) (set! py4d17@py4bb4@ref py4bb4@ref) (set! py4bb6@x* '()) (set! py4d18@py4bb6@x* py4bb6@x*) (set! py4bb8@add-library-path! (lambda (py4c27@path) (py28ad@py26e9@library-path (append (py28ad@py26e9@library-path) (list py4c27@path))))) (set! py4d19@py4bb8@add-library-path! py4bb8@add-library-path!) (set! py4bba@parse-and-add-library-path (lambda (py4c29@paths py4c2a@message) (let ((py4c2e@separator '#f)) (begin (set! py4c2e@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((py4c2f@t py4c29@paths)) (if py4c2f@t ((lambda (py4c31@paths) (for-each (lambda (py4c33@path) (if (file-exists? py4c33@path) (py4bb8@add-library-path! (expand-path py4c33@path)) (format (current-error-port) py4c2a@message py4c33@path))) (string-split py4c31@paths py4c2e@separator))) py4c2f@t) (void))))))) (set! py4d1a@py4bba@parse-and-add-library-path py4bba@parse-and-add-library-path) (set! py4bbc@for-each-with-index (lambda (py4c35@proc py4c36@lst) (letrec ((py4c39@loop (lambda (py4c3b@i py4c3c@lst) (if (null? py4c3c@lst) (if '#f '#f (void)) (begin (py4c35@proc py4c3b@i (car py4c3c@lst)) (py4c39@loop (+ py4c3b@i '1) (cdr py4c3c@lst))))))) (py4c39@loop '1 py4c36@lst)))) (set! py4d1b@py4bbc@for-each-with-index py4bbc@for-each-with-index) (set! py4bbe@rpad (lambda (py4c3f@str py4c40@pad py4c41@n) (let ((py4c45@rest (- py4c41@n (string-length (format '"~a" py4c3f@str))))) (let py4c4b@loop ((py4c47@rest py4c45@rest) (py4c48@ret (format '"~a" py4c3f@str))) (if (<= py4c47@rest '0) py4c48@ret (py4c4b@loop (- py4c47@rest '1) (string-append py4c48@ret py4c40@pad))))))) (set! py4d1c@py4bbe@rpad py4bbe@rpad) (set! py4bc0@condition-printer (lambda (py4c4d@e py4c4e@port) (let ((py4c52@max-condition-len '#f)) (begin (set! py4c52@max-condition-len (apply max (map (lambda (py4c63@c) (string-length (symbol->string (record-type-name (record-rtd py4c63@c))))) (simple-conditions py4c4d@e)))) (begin (display '" Condition components:\n" py4c4e@port) (py4bbc@for-each-with-index (lambda (py4c53@i py4c54@x) (let ((py4c57@rtd (record-rtd py4c54@x)) (py4c58@fields-alist (py4bc2@record->field-alist py4c54@x))) (begin (format py4c4e@port '" ~d. ~a" py4c53@i (py4bbe@rpad (symbol->string (record-type-name py4c57@rtd)) '" " py4c52@max-condition-len)) (if (null? py4c58@fields-alist) (newline py4c4e@port) (void)) (let py4c5f@loop ((py4c5b@first '#t) (py4c5c@fields-alist py4c58@fields-alist)) (if (null? py4c5c@fields-alist) '() (let ((py4c61@field (car py4c5c@fields-alist))) (begin (if (not py4c5b@first) (display (py4bbe@rpad '"" '" " (+ '4 py4c52@max-condition-len)) py4c4e@port) (void)) (display '"       " py4c4e@port) (display (car py4c61@field) py4c4e@port) (display '": " py4c4e@port) (write (cdr py4c61@field) py4c4e@port) (newline py4c4e@port) (py4c5f@loop '#f (cdr py4c5c@fields-alist))))))))) (simple-conditions py4c4d@e))))))) (set! py4d1d@py4bc0@condition-printer py4bc0@condition-printer) (set! py4bc2@record->field-alist (lambda (py4c65@r) (let ((py4c68@ref '#f)) (begin (set! py4c68@ref (lambda (py4c73@rtd py4c74@i py4c75@x) (let ((py4c79@val ((record-accessor py4c73@rtd py4c74@i) py4c75@x))) (if (symbol? py4c79@val) (ungensym py4c79@val) py4c79@val)))) (let py4c6d@loop ((py4c69@ret '()) (py4c6a@rtd (record-rtd py4c65@r))) (if py4c6a@rtd (py4c6d@loop (append py4c69@ret (py4bc4@map-with-index (lambda (py4c6f@i py4c70@field) (cons py4c70@field (py4c68@ref py4c6a@rtd py4c6f@i py4c65@r))) (vector->list (record-type-field-names py4c6a@rtd)))) (record-type-parent py4c6a@rtd)) py4c69@ret)))))) (set! py4d1e@py4bc2@record->field-alist py4bc2@record->field-alist) (set! py4bc4@map-with-index (lambda (py4c7b@proc py4c7c@lst) (let py4c85@loop ((py4c7f@i '0) (py4c80@lst py4c7c@lst) (py4c81@ret '())) (if (null? py4c80@lst) (reverse py4c81@ret) (py4c85@loop (+ py4c7f@i '1) (cdr py4c80@lst) (cons (py4c7b@proc py4c7f@i (car py4c80@lst)) py4c81@ret)))))) (set! py4d1f@py4bc4@map-with-index py4bc4@map-with-index) (set! py4bc6@repl (lambda py4c87@x (let ((py4c8a@rec '#f)) (begin (set! py4c8a@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (py4c8d@py4c8b) (lambda () (with-exception-handler (lambda (py4c8f@e) ((call/cc (lambda (py4c91@py4c8c) (py4c8d@py4c8b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? py4c8f@e) (py4bc0@condition-printer py4c8f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" py4c8f@e))) (py4c91@py4c8c (lambda () (raise-continuable py4c8f@e)))))))))) (lambda () (let py4c97@loop ((py4c93@line (get-line (current-input-port))) (py4c94@accum '"")) (let ((py4c9a@parentheses-ok? '#f) (py4c9c@eval-string-print '#f)) (begin (set! py4c9a@parentheses-ok? (lambda (py4ca1@text) (let py4ca9@loop ((py4ca3@chars (string->list py4ca1@text)) (py4ca4@p0 '0) (py4ca5@p1 '0)) (if (null? py4ca3@chars) (= '0 py4ca4@p0 py4ca5@p1) (let ((py4cab@t (car py4ca3@chars))) (if (memv py4cab@t '(#\()) (py4ca9@loop (cdr py4ca3@chars) (+ py4ca4@p0 '1) py4ca5@p1) (if (memv py4cab@t '(#\))) (py4ca9@loop (cdr py4ca3@chars) (- py4ca4@p0 '1) py4ca5@p1) (if (memv py4cab@t '(#\[)) (py4ca9@loop (cdr py4ca3@chars) py4ca4@p0 (+ py4ca5@p1 '1)) (if (memv py4cab@t '(#\])) (py4ca9@loop (cdr py4ca3@chars) py4ca4@p0 (- py4ca5@p1 '1)) (py4ca9@loop (cdr py4ca3@chars) py4ca4@p0 py4ca5@p1)))))))))) (set! py4c9c@eval-string-print (lambda (py4c9f@text) (if (not (or (string=? '"\n" py4c9f@text) (= '0 (string-length py4c9f@text)))) (write (py4bd4@eval-top-level (call-with-port (open-string-input-port py4c9f@text) read))) (void)))) (if (eof-object? py4c93@line) (begin (py4c9c@eval-string-print py4c94@accum) (exit)) (let ((py4c9d@current (string-append py4c94@accum py4c93@line))) (if (py4c9a@parentheses-ok? py4c9d@current) (py4c9c@eval-string-print py4c9d@current) (py4c97@loop (get-line (current-input-port)) py4c9d@current))))))))))))) (newline) (py4c8a@rec)))) (py4c8a@rec))))) (set! py4d20@py4bc6@repl py4bc6@repl) (set! py4bc8@trace-printer (py25f3@py24d2@make-parameter write)) (set! py4d21@py4bc8@trace-printer py4bc8@trace-printer) (set! py4bca@command-line (py25f3@py24d2@make-parameter (get-command-line))) (set! py4d22@py4bca@command-line py4bca@command-line) (set! py4bcc@local-library-path (lambda (py4cad@filename) (py28ad@py26e9@library-path))) (set! py4d23@py4bcc@local-library-path py4bcc@local-library-path) (set! py4bce@load/args (lambda (py4caf@filename . py4cb1@args) (begin (apply py4bde@load-r6rs-top-level py4caf@filename 'load py4cb1@args) (void)))) (set! py4d24@py4bce@load/args py4bce@load/args) (set! py4bd0@load (lambda (py4cb3@filename) (begin (apply py4bde@load-r6rs-top-level py4cb3@filename 'load (py4bca@command-line)) (void)))) (set! py4d25@py4bd0@load py4bd0@load) (set! py4bd2@ironscheme-build (lambda () (py4bd0@load '"ironscheme-buildscript.ss"))) (set! py4d26@py4bd2@ironscheme-build py4bd2@ironscheme-build) (set! py4bd4@eval-top-level (lambda (py4cb5@x) (py47da@py2d70@eval py4cb5@x (py47f1@py2d9e@interaction-environment)))) (set! py4d27@py4bd4@eval-top-level py4bd4@eval-top-level) (set! py4bd6@compile-system-libraries (lambda () (py4bd4@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! py4d28@py4bd6@compile-system-libraries py4bd6@compile-system-libraries) (set! py4bd8@compile (lambda (py4cb7@filename) (py4bde@load-r6rs-top-level py4cb7@filename 'compile))) (set! py4d29@py4bd8@compile py4bd8@compile) (set! py4bda@compile->closure (lambda (py4cb9@filename) (py4bde@load-r6rs-top-level py4cb9@filename 'closure))) (set! py4d2a@py4bda@compile->closure py4bda@compile->closure) (set! py4bdc@pre-compile-r6rs-file (lambda (py4cbb@filename) (py4bde@load-r6rs-top-level py4cbb@filename 'compile))) (set! py4d2b@py4bdc@pre-compile-r6rs-file py4bdc@pre-compile-r6rs-file) (set! py4bde@load-r6rs-top-level (lambda (py4cbd@filename py4cbe@how . py4cc1@args) (begin (py28ad@py26e9@library-path (py4bcc@local-library-path py4cbd@filename)) (let ((py4cc3@x* (with-input-from-file py4cbd@filename (lambda () (let py4cc5@f () (let ((py4cc7@x (py25e6@py24b8@read-annotated))) (if (eof-object? py4cc7@x) '() (cons py4cc7@x (py4cc5@f))))))))) (let ((py4cc9@t py4cbe@how)) (if (memv py4cc9@t '(closure)) (py47f0@py2d9c@pre-compile-r6rs-top-level py4cc3@x*) (if (memv py4cc9@t '(load)) (begin (py4bca@command-line (cons py4cbd@filename (car py4cc1@args))) (py25f4@py24d4@mosh-cache-dir (create-mosh-cache-dir)) (if (py25f4@py24d4@mosh-cache-dir) (gensym-prefix-set! (py4be4@prefix-inc! (string-append (py25f4@py24d4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (py4ccb@file) ((call/cc (lambda (py4ccf@py4ccd) (lambda () (with-exception-handler (lambda (py4cd1@c) ((call/cc (lambda (py4cd3@py4cce) (py4ccf@py4ccd (lambda () (if '#t '#t (py4cd3@py4cce (lambda () (raise-continuable py4cd1@c)))))))))) (lambda () (delete-file (string-append (py25f4@py24d4@mosh-cache-dir) '"/" py4ccb@file))))))))) (directory-list (py25f4@py24d4@mosh-cache-dir))) (void)) (let ((py4cd5@compiled (py47ef@py2d9a@compile-r6rs-top-level py4cc3@x*))) (begin (if (and (py25f4@py24d4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (py28b1@py26f1@serialize-all py25ee@py24c8@serialize-library py264a@py2603@compile-core-expr) (void)) (py4cd5@compiled)))) (if (memv py4cc9@t '(compile)) (begin (py47ef@py2d9a@compile-r6rs-top-level py4cc3@x*) (py28b1@py26f1@serialize-all py25ee@py24c8@serialize-library py264a@py2603@compile-core-expr)) (if '#f '#f (void)))))))))) (set! py4d2c@py4bde@load-r6rs-top-level py4bde@load-r6rs-top-level) (set! py4be0@load-r6rs-top-level-sexp (lambda (py4cd7@import-spec py4cd8@thunk) (let ((py4ce3@py4cdc py28ad@py26e9@library-path) (py4ce4@py4cde py25f4@py24d4@mosh-cache-dir) (py4ce5@py4ce0 (py4bcc@local-library-path '"")) (py4ce6@py4ce2 (create-mosh-cache-dir))) (let ((py4ceb@swap (lambda () (begin (let ((py4ced@t (py4ce3@py4cdc))) (begin (py4ce3@py4cdc py4ce5@py4ce0) (set! py4ce5@py4ce0 py4ced@t))) (let ((py4cef@t (py4ce4@py4cde))) (begin (py4ce4@py4cde py4ce6@py4ce2) (set! py4ce6@py4ce2 py4cef@t))))))) (dynamic-wind py4ceb@swap (lambda () (begin (if (py25f4@py24d4@mosh-cache-dir) (gensym-prefix-set! (py4be4@prefix-inc! (string-append (py25f4@py24d4@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((py4cf5@py4cf2 py4bca@command-line) (py4cf6@py4cf4 '())) (let ((py4cf9@swap (lambda () (let ((py4cfb@t (py4cf5@py4cf2))) (begin (py4cf5@py4cf2 py4cf6@py4cf4) (set! py4cf6@py4cf4 py4cfb@t)))))) (dynamic-wind py4cf9@swap (lambda () ((py47ef@py2d9a@compile-r6rs-top-level (list (cons 'import py4cd7@import-spec) (list py4cd8@thunk))))) py4cf9@swap))))) py4ceb@swap))))) (set! py4d2d@py4be0@load-r6rs-top-level-sexp py4be0@load-r6rs-top-level-sexp) (set! py4be2@prefix-inc (lambda (py4cfd@prefix-string) (let ((py4cff@prefix (symbol->string py4cfd@prefix-string))) (let ((py4d01@len (string-length py4cff@prefix))) (let py4d09@loop ((py4d03@i (- py4d01@len '1)) (py4d04@carry? '#t) (py4d05@accum '())) (if (< py4d03@i '0) (string->symbol (list->string (if py4d04@carry? (cons '#\a py4d05@accum) py4d05@accum))) (if py4d04@carry? (let ((py4d0b@next-integer (+ '1 (char->integer (string-ref py4cff@prefix py4d03@i))))) (if (= py4d0b@next-integer '123) (py4d09@loop (- py4d03@i '1) '#f (cons '#\A py4d05@accum)) (if (= py4d0b@next-integer '91) (py4d09@loop (- py4d03@i '1) '#t (cons '#\a py4d05@accum)) (py4d09@loop (- py4d03@i '1) '#f (cons (integer->char py4d0b@next-integer) py4d05@accum))))) (py4d09@loop (- py4d03@i '1) '#f (cons (string-ref py4cff@prefix py4d03@i) py4d05@accum))))))))) (set! py4d2e@py4be2@prefix-inc py4be2@prefix-inc) (set! py4be4@prefix-inc! (lambda (py4d0d@file) (begin (if (not (file-exists? py4d0d@file)) (call-with-output-file py4d0d@file (lambda (py4d0f@port) (write 'd py4d0f@port))) (void)) (let ((py4d11@prefix (call-with-input-file py4d0d@file read))) (let ((py4d13@next-prefix (py4be2@prefix-inc py4d11@prefix))) (begin (call-with-port (open-file-output-port py4d0d@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (py4d15@port) (write py4d13@next-prefix py4d15@port))) py4d11@prefix)))))) (set! py4d2f@py4be4@prefix-inc! py4be4@prefix-inc!) (begin (py28b2@py26f3@current-precompiled-library-loader py25ef@py24ca@load-serialized-library) (set-symbol-value! 'load py4bd0@load) (set-symbol-value! 'pre-compile-r6rs-file py4bdc@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs py4bd4@eval-top-level) (set-symbol-value! 'int-env-syms py47d1@py2d5e@interaction-environment-symbols) (set-symbol-value! 'expanded2core py2649@py2601@expanded->core) (set-symbol-value! 'trace-printer py4bc8@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (py4be5@c) (condition (py4b11@py491b@make-non-continuable-violation) (py4b07@py4902@make-who-condition 'raise) (py4acb@py4863@make-message-condition '"returned from non-continuable exception") (py4afd@py48e7@make-irritants-condition (list py4be5@c))))) (py4bba@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (py4bba@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (py4bb8@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (py4bb8@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (py4bb8@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((py4be7@prefix (lambda (py4be9@ext py4bea@ls) (append (map (lambda (py4bed@x) (string-append py4be9@ext py4bed@x)) py4bea@ls) py4bea@ls)))) (py28ae@py26eb@library-extensions (py4be7@prefix '".mosh" (py28ae@py26eb@library-extensions)))) (current-exception-handler (lambda (py4bef@c) (if (condition? py4bef@c) (py4bc0@condition-printer py4bef@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" py4bef@c)))) (if ((call/cc (lambda (py4bf3@py4bf1) (lambda () (with-exception-handler (lambda (py4bf5@c) ((call/cc (lambda (py4bf7@py4bf2) (py4bf3@py4bf1 (lambda () (if '#t '#f (py4bf7@py4bf2 (lambda () (raise-continuable py4bf5@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (py4be0@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (py4bca@command-line)) (let ((py4c01@py4bfa py4bca@command-line) (py4c02@py4bfc py25f4@py24d4@mosh-cache-dir) (py4c03@py4bfe '()) (py4c04@py4c00 (create-mosh-cache-dir))) (let ((py4c09@swap (lambda () (begin (let ((py4c0b@t (py4c01@py4bfa))) (begin (py4c01@py4bfa py4c03@py4bfe) (set! py4c03@py4bfe py4c0b@t))) (let ((py4c0d@t (py4c02@py4bfc))) (begin (py4c02@py4bfc py4c04@py4c00) (set! py4c04@py4c00 py4c0d@t))))))) (dynamic-wind py4c09@swap (lambda () (begin (if (py25f4@py24d4@mosh-cache-dir) (gensym-prefix-set! (py4be4@prefix-inc! (string-append (py25f4@py24d4@mosh-cache-dir) '"/prefix.txt"))) (void)) (py4bc6@repl))) py4c09@swap))) (begin (py28ad@py26e9@library-path (py4bcc@local-library-path (car (py4bca@command-line)))) (set! py4bb6@x* (with-input-from-file (car (py4bca@command-line)) (lambda () (let py4c0f@f () (let ((py4c11@x (py25e6@py24b8@read-annotated))) (if (eof-object? py4c11@x) '() (cons py4c11@x (py4c0f@f)))))))) (py4bca@command-line (cons (car (py4bca@command-line)) (cdr (py4bca@command-line)))) (py25f4@py24d4@mosh-cache-dir (create-mosh-cache-dir)) (if (py25f4@py24d4@mosh-cache-dir) (gensym-prefix-set! (py4be4@prefix-inc! (string-append (py25f4@py24d4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (py4c13@file) ((call/cc (lambda (py4c17@py4c15) (lambda () (with-exception-handler (lambda (py4c19@c) ((call/cc (lambda (py4c1b@py4c16) (py4c17@py4c15 (lambda () (if '#t '#t (py4c1b@py4c16 (lambda () (raise-continuable py4c19@c)))))))))) (lambda () (delete-file (string-append (py25f4@py24d4@mosh-cache-dir) '"/" py4c13@file))))))))) (directory-list (py25f4@py24d4@mosh-cache-dir))) (void)) (let ((py4c1d@compiled (py47ef@py2d9a@compile-r6rs-top-level py4bb6@x*))) (begin (if (and (py25f4@py24d4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (py28b1@py26f1@serialize-all py25ee@py24c8@serialize-library py264a@py2603@compile-core-expr) (void)) (py4c1d@compiled))))))))
