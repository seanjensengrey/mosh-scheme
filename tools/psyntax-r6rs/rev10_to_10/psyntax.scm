;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (gN57f@library-file-path->cache-path gN581@read-annotated gN583@annotation-stripped gN585@annotation? gN587@annotation-source gN589@annotation-expression gN58b@scm->fasl gN58d@fasl-save gN58f@fasl-load gN591@serialize-library gN593@load-serialized-library gN595@make-record-printer gN597@compile-core gN599@read-library-source-file gN59b@make-parameter gN59d@mosh-cache-dir gN633@file-options-spec) (begin (set! gN57f@library-file-path->cache-path (lambda (gN634@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gN63a@gN637 gN63b@gN639) ((lambda (gN63e@extract gN63f@p) ((lambda (gN643@display-hex) (begin (set! gN643@display-hex (lambda (gN64c@n) (if (<= '0 gN64c@n '9) (display gN64c@n gN63f@p) (display (integer->char (+ (char->integer '#\a) (- gN64c@n '10))) gN63f@p)))) (begin ((letrec ((gN644@f (lambda (gN646@ls) (if (not (null? gN646@ls)) (begin (display '"_" gN63f@p) (for-each (lambda (gN648@c) (if (or (char<=? '#\a gN648@c '#\z) (char<=? '#\A gN648@c '#\Z) (char<=? '#\0 gN648@c '#\9) (memv gN648@c '(#\- #\. #\_ #\~))) (display gN648@c gN63f@p) (begin (display '"%" gN63f@p) ((lambda (gN64a@n) (begin (gN643@display-hex (quotient gN64a@n '16)) (gN643@display-hex (remainder gN64a@n '16)))) (char->integer gN648@c))))) (string->list (car gN646@ls))) (gN644@f (cdr gN646@ls))) (void))))) gN644@f) (string-split gN634@x '#\/)) (gN63e@extract)))) '#f)) gN63b@gN639 gN63a@gN637))))) (set! gN581@read-annotated read) (set! gN583@annotation-stripped (lambda (gN64e@x) (gN589@annotation-expression gN64e@x))) (set! gN585@annotation? (lambda (gN650@x) (source-info gN650@x))) (set! gN587@annotation-source (lambda (gN652@x) (source-info gN652@x))) (set! gN589@annotation-expression (lambda (gN654@x) (if (pair? gN654@x) (cons (car gN654@x) (cdr gN654@x)) (display '"line:46\n")))) (set! gN58b@scm->fasl (lambda (gN656@filename) (string-append (gN59d@mosh-cache-dir) '"/" (gN57f@library-file-path->cache-path gN656@filename) '".mosh-fasl"))) (set! gN58d@fasl-save (lambda (gN658@filename gN659@obj) (call-with-port (open-file-output-port gN658@filename) (lambda (gN65c@port) ((symbol-value 'fasl-write!) gN659@obj gN65c@port))))) (set! gN58f@fasl-load (lambda (gN65e@filename) (call-with-port (open-file-input-port gN65e@filename) (symbol-value 'fasl-read!)))) (set! gN591@serialize-library (lambda (gN660@filename gN661@obj) (begin ((lambda (gN664@expanded2core) ((lambda (gN666@compile) ((lambda (gN668@code) ((lambda (gN66a@pivot) ((lambda (gN66c@visit) ((lambda () (begin (set-car! gN66a@pivot gN66c@visit) ((lambda (gN66e@pivot) ((lambda (gN670@invoke) ((lambda () (set-car! gN66e@pivot gN670@invoke)))) (gN666@compile (gN664@expanded2core (car gN66e@pivot))))) (cdr gN66a@pivot)))))) (gN666@compile (gN664@expanded2core (car gN66a@pivot))))) (cddddr (cddddr gN668@code)))) gN661@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (gN672@fasl-file) (begin (if (file-exists? gN672@fasl-file) (delete-file gN672@fasl-file) (void)) ((call/cc (lambda (gN676@gN674) (lambda () (with-exception-handler (lambda (gN678@c) ((call/cc (lambda (gN67a@gN675) (gN676@gN674 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " gN660@filename) (if (file-exists? gN672@fasl-file) (delete-file gN672@fasl-file) (void)) '#f) (gN67a@gN675 (lambda () (raise-continuable gN678@c)))))))))) (lambda () (gN58d@fasl-save gN672@fasl-file gN661@obj))))))))) (gN58b@scm->fasl gN660@filename))))) (set! gN593@load-serialized-library (lambda (gN67c@filename gN67d@obj) (and (gN59d@mosh-cache-dir) ((lambda (gN680@fasl-file) (if (and (file-exists? gN680@fasl-file) ((symbol-value 'file-newer?) gN680@fasl-file gN67c@filename)) ((lambda (gN682@expanded2core) ((lambda (gN684@eval-compiled-core) ((lambda (gN686@code) ((lambda (gN688@pivot) ((lambda (gN68a@visit) ((lambda (gN68c@visit-proc) ((lambda () (begin (set-car! gN688@pivot gN68c@visit-proc) ((lambda (gN68e@pivot) ((lambda (gN690@invoke) ((lambda () (begin (set-car! gN68e@pivot (lambda () (gN684@eval-compiled-core gN690@invoke))) (apply gN67d@obj gN686@code))))) (car gN68e@pivot))) (cdr gN688@pivot)))))) (lambda () (gN684@eval-compiled-core gN68a@visit)))) (car gN688@pivot))) (cddddr (cddddr gN686@code)))) (gN58f@fasl-load gN680@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (gN58b@scm->fasl gN67c@filename))))) (set! gN595@make-record-printer (lambda (gN692@name gN693@printer) (lambda gN696@x (begin (display '"record printer") (for-each display gN696@x))))) (set! gN597@compile-core (lambda gN698@x (apply error 'comile-core '"not implementated" gN698@x))) (set! gN599@read-library-source-file (lambda (gN69a@file-name) (with-input-from-file gN69a@file-name gN581@read-annotated))) (set! gN59b@make-parameter (lambda gN6aa ((lambda (gN6ab) (if (= gN6ab '1) (apply (lambda (gN69c@x) (gN59b@make-parameter gN69c@x (lambda (gN69e@x) gN69e@x))) gN6aa) (if (= gN6ab '2) (apply (lambda (gN6a0@x gN6a1@fender) ((lambda (gN6a4@x) (lambda gN6a8 ((lambda (gN6a9) (if (= gN6a9 '0) (apply (lambda () gN6a4@x) gN6a8) (if (= gN6a9 '1) (apply (lambda (gN6a6@v) (set! gN6a4@x (gN6a1@fender gN6a6@v))) gN6a8) (error 'apply '"invalid arg count")))) (length gN6a8)))) (gN6a1@fender gN6a0@x))) gN6aa) (error 'apply '"invalid arg count")))) (length gN6aa)))) (set! gN59d@mosh-cache-dir (gN59b@make-parameter '#f)) (set! gN633@file-options-spec (lambda (gN6ac@x) gN6ac@x)) (begin (set! gN6be@gN633@file-options-spec gN633@file-options-spec) (set! gN6bd@gN59d@mosh-cache-dir gN59d@mosh-cache-dir) (set! gN6bc@gN59b@make-parameter gN59b@make-parameter) (set! gN6bb@gN599@read-library-source-file gN599@read-library-source-file) (set! gN6ba@gN597@compile-core gN597@compile-core) (set! gN6b9@gN595@make-record-printer gN595@make-record-printer) (set! gN6b8@gN593@load-serialized-library gN593@load-serialized-library) (set! gN6b7@gN591@serialize-library gN591@serialize-library) (set! gN6b6@gN58f@fasl-load gN58f@fasl-load) (set! gN6b5@gN58d@fasl-save gN58d@fasl-save) (set! gN6b4@gN58b@scm->fasl gN58b@scm->fasl) (set! gN6b3@gN589@annotation-expression gN589@annotation-expression) (set! gN6b2@gN587@annotation-source gN587@annotation-source) (set! gN6b1@gN585@annotation? gN585@annotation?) (set! gN6b0@gN583@annotation-stripped gN583@annotation-stripped) (set! gN6af@gN581@read-annotated gN581@read-annotated) (set! gN6ae@gN57f@library-file-path->cache-path gN57f@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (gN6c4@current-primitive-locations gN6c6@mutable? gN6c8@rewriter gN6ca@expanded->core gN6cc@compile-core-expr gN6ce@pretty-print gN6d0@compile-core-expr-to-port) (begin (set! gN6c4@current-primitive-locations (gN6bc@gN59b@make-parameter (lambda (gN6d1@x) '#f) (lambda (gN6d3@p) gN6d3@p))) (set! gN6c6@mutable? (lambda (gN6d5@x) (or (pair? gN6d5@x) (vector? gN6d5@x) (hashtable? gN6d5@x)))) (set! gN6c8@rewriter (lambda (gN6d7@quote-hack?) ((lambda (gN6da@f) (begin (set! gN6da@f (lambda (gN6db@x) (if (pair? gN6db@x) ((lambda (gN6dd@t) (if (memv gN6dd@t '(quote)) (if (and gN6d7@quote-hack? (gN6c6@mutable? (cadr gN6db@x))) ((lambda (gN6df@g) (begin (set-symbol-value! gN6df@g (cadr gN6db@x)) gN6df@g)) (gensym)) gN6db@x) (if (memv gN6dd@t '(case-lambda)) (cons 'case-lambda (map (lambda (gN6e1@x) (cons (car gN6e1@x) (map gN6da@f (cdr gN6e1@x)))) (cdr gN6db@x))) (if (memv gN6dd@t '(lambda)) (cons* 'lambda (cadr gN6db@x) (map gN6da@f (cddr gN6db@x))) (if (memv gN6dd@t '(letrec)) ((lambda (gN6e3@bindings gN6e4@body*) ((lambda (gN6e7@lhs* gN6e8@rhs*) (cons* 'letrec (map list gN6e7@lhs* (map gN6da@f gN6e8@rhs*)) (map gN6da@f gN6e4@body*))) (map car gN6e3@bindings) (map cadr gN6e3@bindings))) (cadr gN6db@x) (cddr gN6db@x)) (if (memv gN6dd@t '(letrec*)) ((lambda (gN6eb@bindings gN6ec@body*) ((lambda (gN6ef@lhs* gN6f0@rhs*) (cons* 'letrec* (map list gN6ef@lhs* (map gN6da@f gN6f0@rhs*)) (map gN6da@f gN6ec@body*))) (map car gN6eb@bindings) (map cadr gN6eb@bindings))) (cadr gN6db@x) (cddr gN6db@x)) (if (memv gN6dd@t '(library-letrec*)) ((lambda (gN6f3@name gN6f4@x) ((lambda (gN6f7@bindings gN6f8@body*) ((lambda (gN6fb@lhs* gN6fc@lhs** gN6fd@rhs*) (cons* 'library-letrec* gN6f3@name (map list gN6fb@lhs* gN6fc@lhs** (map gN6da@f gN6fd@rhs*)) (map gN6da@f gN6f8@body*))) (map car gN6f7@bindings) (map cadr gN6f7@bindings) (map caddr gN6f7@bindings))) (cadr gN6f4@x) (cddr gN6f4@x))) (cadr gN6db@x) (cdr gN6db@x)) (if (memv gN6dd@t '(begin)) (cons 'begin (map gN6da@f (cdr gN6db@x))) (if (memv gN6dd@t '(set!)) (list 'set! (cadr gN6db@x) (gN6da@f (caddr gN6db@x))) (if (memv gN6dd@t '(primitive)) ((lambda (gN701@op) ((lambda (gN703@t) (if gN703@t ((lambda (gN705@loc) gN705@loc) gN703@t) gN701@op)) ((gN6c4@current-primitive-locations) gN701@op))) (cadr gN6db@x)) (if (memv gN6dd@t '(define)) gN6db@x (if (list? gN6db@x) (map gN6da@f gN6db@x) (error 'rewrite '"invalid form ~s ~s" gN6db@x (list? gN6db@x)))))))))))))) (car gN6db@x)) gN6db@x))) gN6da@f)) '#f))) (set! gN6ca@expanded->core (lambda (gN707@x) ((gN6c8@rewriter '#f) gN707@x))) (set! gN6cc@compile-core-expr (lambda (gN709@x) ((gN6c8@rewriter '#f) gN709@x))) (set! gN6ce@pretty-print write) (set! gN6d0@compile-core-expr-to-port (lambda (gN70b@x gN70c@p) (gN6ce@pretty-print ((gN6c8@rewriter '#f) gN70b@x) gN70c@p))) (begin (set! gN715@gN6d0@compile-core-expr-to-port gN6d0@compile-core-expr-to-port) (set! gN714@gN6ce@pretty-print gN6ce@pretty-print) (set! gN713@gN6cc@compile-core-expr gN6cc@compile-core-expr) (set! gN712@gN6ca@expanded->core gN6ca@expanded->core) (set! gN711@gN6c8@rewriter gN6c8@rewriter) (set! gN710@gN6c6@mutable? gN6c6@mutable?) (set! gN70f@gN6c4@current-primitive-locations gN6c4@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (gN764@make-collection gN766@current-library-collection gN768@rp gN772@library? gN774@library-id gN776@set-library-id! gN778@library-name gN77a@set-library-name! gN77c@library-version gN77e@set-library-version! gN780@library-imp* gN782@set-library-imp*! gN784@library-vis* gN786@set-library-vis*! gN788@library-inv* gN78a@set-library-inv*! gN78c@library-subst gN78e@set-library-subst! gN790@library-env gN792@set-library-env! gN794@library-visit-state gN796@set-library-visit-state! gN798@library-invoke-state gN79a@set-library-invoke-state! gN79c@library-visit-code gN79e@set-library-visit-code! gN7a0@library-invoke-code gN7a2@set-library-invoke-code! gN7a4@library-visible? gN7a6@set-library-visible?! gN7a8@library-source-file-name gN7aa@set-library-source-file-name! gN7ac@dummy gN7ae@find-dependencies gN7b0@find-library-by gN7b2@library-path gN7b4@library-extensions gN7b6@library-name->file-name gN7b8@file-locator gN7ba@serialize-all gN7bc@current-precompiled-library-loader gN7be@try-load-from-file gN7c0@library-loader gN7c2@current-library-expander gN7c4@external-pending-libraries gN7c6@find-external-library gN7c8@find-library-by-name gN7ca@library-exists? gN7cc@find-library-by-spec/die gN7ce@label->binding-table gN7d0@install-library-record gN7d2@install-library gN7d4@imported-label->binding gN7d6@invoke-library gN7d8@visit-library gN7da@invoke-library-by-spec gN7dc@installed-libraries gN7de@library-spec) (begin (set! gN764@make-collection (lambda () ((lambda (gN7df@set) ((lambda (gN7e2@set-cons) (begin (set! gN7e2@set-cons (lambda (gN7e7@x gN7e8@ls) (if (memq gN7e7@x gN7e8@ls) gN7e8@ls (cons gN7e7@x gN7e8@ls)))) (lambda gN7e5 ((lambda (gN7e6) (if (= gN7e6 '0) (apply (lambda () gN7df@set) gN7e5) (if (= gN7e6 '1) (apply (lambda (gN7e3@x) (set! gN7df@set (gN7e2@set-cons gN7e3@x gN7df@set))) gN7e5) (error 'apply '"invalid arg count")))) (length gN7e5))))) '#f)) '()))) (set! gN766@current-library-collection (gN6bc@gN59b@make-parameter (gN764@make-collection) (lambda (gN7eb@x) (begin (if (not (procedure? gN7eb@x)) (assertion-violation 'current-library-collection '"not a procedure" gN7eb@x) (void)) gN7eb@x)))) (set! gN768@rp (gN6b9@gN595@make-record-printer 'library (lambda (gN7ed@x gN7ee@p gN7ef@wr) (begin (if (not (gN772@library? gN7ed@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (gN77c@library-version gN7ed@x)) (gN778@library-name gN7ed@x) (append (gN778@library-name gN7ed@x) (list (gN77c@library-version gN7ed@x))))) gN7ee@p))))) (set! gN772@library? (lambda (gN7f3@x) (and (simple-struct? gN7f3@x) (eq? (simple-struct-name gN7f3@x) 'library)))) (set! gN774@library-id (lambda (gN7f5@x) (simple-struct-ref gN7f5@x '0))) (set! gN776@set-library-id! (lambda (gN7f7@x gN7f8@val) (simple-struct-set! gN7f7@x '0 gN7f8@val))) (set! gN778@library-name (lambda (gN7fb@x) (simple-struct-ref gN7fb@x '1))) (set! gN77a@set-library-name! (lambda (gN7fd@x gN7fe@val) (simple-struct-set! gN7fd@x '1 gN7fe@val))) (set! gN77c@library-version (lambda (gN801@x) (simple-struct-ref gN801@x '2))) (set! gN77e@set-library-version! (lambda (gN803@x gN804@val) (simple-struct-set! gN803@x '2 gN804@val))) (set! gN780@library-imp* (lambda (gN807@x) (simple-struct-ref gN807@x '3))) (set! gN782@set-library-imp*! (lambda (gN809@x gN80a@val) (simple-struct-set! gN809@x '3 gN80a@val))) (set! gN784@library-vis* (lambda (gN80d@x) (simple-struct-ref gN80d@x '4))) (set! gN786@set-library-vis*! (lambda (gN80f@x gN810@val) (simple-struct-set! gN80f@x '4 gN810@val))) (set! gN788@library-inv* (lambda (gN813@x) (simple-struct-ref gN813@x '5))) (set! gN78a@set-library-inv*! (lambda (gN815@x gN816@val) (simple-struct-set! gN815@x '5 gN816@val))) (set! gN78c@library-subst (lambda (gN819@x) (simple-struct-ref gN819@x '6))) (set! gN78e@set-library-subst! (lambda (gN81b@x gN81c@val) (simple-struct-set! gN81b@x '6 gN81c@val))) (set! gN790@library-env (lambda (gN81f@x) (simple-struct-ref gN81f@x '7))) (set! gN792@set-library-env! (lambda (gN821@x gN822@val) (simple-struct-set! gN821@x '7 gN822@val))) (set! gN794@library-visit-state (lambda (gN825@x) (simple-struct-ref gN825@x '8))) (set! gN796@set-library-visit-state! (lambda (gN827@x gN828@val) (simple-struct-set! gN827@x '8 gN828@val))) (set! gN798@library-invoke-state (lambda (gN82b@x) (simple-struct-ref gN82b@x '9))) (set! gN79a@set-library-invoke-state! (lambda (gN82d@x gN82e@val) (simple-struct-set! gN82d@x '9 gN82e@val))) (set! gN79c@library-visit-code (lambda (gN831@x) (simple-struct-ref gN831@x '10))) (set! gN79e@set-library-visit-code! (lambda (gN833@x gN834@val) (simple-struct-set! gN833@x '10 gN834@val))) (set! gN7a0@library-invoke-code (lambda (gN837@x) (simple-struct-ref gN837@x '11))) (set! gN7a2@set-library-invoke-code! (lambda (gN839@x gN83a@val) (simple-struct-set! gN839@x '11 gN83a@val))) (set! gN7a4@library-visible? (lambda (gN83d@x) (simple-struct-ref gN83d@x '12))) (set! gN7a6@set-library-visible?! (lambda (gN83f@x gN840@val) (simple-struct-set! gN83f@x '12 gN840@val))) (set! gN7a8@library-source-file-name (lambda (gN843@x) (simple-struct-ref gN843@x '13))) (set! gN7aa@set-library-source-file-name! (lambda (gN845@x gN846@val) (simple-struct-set! gN845@x '13 gN846@val))) (set! gN7ac@dummy '3) (set! gN7ae@find-dependencies (lambda (gN849@ls) (if (null? gN849@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! gN7b0@find-library-by (lambda (gN84b@pred) ((letrec ((gN84d@f (lambda (gN84f@ls) (if (null? gN84f@ls) '#f (if (gN84b@pred (car gN84f@ls)) (car gN84f@ls) (gN84d@f (cdr gN84f@ls))))))) gN84d@f) ((gN766@current-library-collection))))) (set! gN7b2@library-path (gN6bc@gN59b@make-parameter '(".") (lambda (gN851@x) (if (and (list? gN851@x) (for-all string? gN851@x)) (map (lambda (gN853@x) gN853@x) gN851@x) (assertion-violation 'library-path '"not a list of strings" gN851@x))))) (set! gN7b4@library-extensions (gN6bc@gN59b@make-parameter '(".sls" ".ss" ".scm") (lambda (gN855@x) (if (and (list? gN855@x) (for-all string? gN855@x)) (map (lambda (gN857@x) gN857@x) gN855@x) (assertion-violation 'library-extensions '"not a list of strings" gN855@x))))) (set! gN7b6@library-name->file-name (lambda (gN859@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gN85f@gN85c gN860@gN85e) ((lambda (gN863@extract gN864@p) ((lambda (gN868@display-hex) (begin (set! gN868@display-hex (lambda (gN871@n) (if (<= '0 gN871@n '9) (display gN871@n gN864@p) (display (integer->char (+ (char->integer '#\a) (- gN871@n '10))) gN864@p)))) (begin ((letrec ((gN869@f (lambda (gN86b@ls) (if (not (null? gN86b@ls)) (begin (display '"/" gN864@p) (for-each (lambda (gN86d@c) (if (or (char<=? '#\a gN86d@c '#\z) (char<=? '#\A gN86d@c '#\Z) (char<=? '#\0 gN86d@c '#\9) (memv gN86d@c '(#\- #\. #\_ #\~))) (display gN86d@c gN864@p) (begin (display '"%" gN864@p) ((lambda (gN86f@n) (begin (gN868@display-hex (quotient gN86f@n '16)) (gN868@display-hex (remainder gN86f@n '16)))) (char->integer gN86d@c))))) (string->list (symbol->string (car gN86b@ls)))) (gN869@f (cdr gN86b@ls))) (void))))) gN869@f) gN859@x) (gN863@extract)))) '#f)) gN860@gN85e gN85f@gN85c))))) (set! gN7b8@file-locator (gN6bc@gN59b@make-parameter (lambda (gN873@x) ((lambda (gN875@str) ((letrec ((gN877@f (lambda (gN879@ls gN87a@exts gN87b@failed-list) (if (null? gN879@ls) ((lambda () ((lambda (gN887@gN882 gN889@gN884 gN88b@gN883 gN88e@gN881 gN890@make-library-resolution-condition gN892@gN87f gN894@gN880 gN896@library-resolution-condition? gN898@condition-library gN89a@condition-files) (begin (set! gN887@gN882 (make-record-type-descriptor '&library-resolution gN2b31@gN2878@&condition-rtd 'gN885 '#f '#f '#((immutable library) (immutable files)))) (set! gN889@gN884 '#f) (set! gN88b@gN883 (make-record-constructor-descriptor gN887@gN882 gN2b32@gN287a@&condition-rcd gN889@gN884)) (set! gN88e@gN881 (record-predicate gN887@gN882)) (set! gN890@make-library-resolution-condition (record-constructor gN88b@gN883)) (set! gN892@gN87f (record-accessor gN887@gN882 '0)) (set! gN894@gN880 (record-accessor gN887@gN882 '1)) (set! gN896@library-resolution-condition? (condition-predicate gN887@gN882)) (set! gN898@condition-library (condition-accessor gN887@gN882 gN892@gN87f)) (set! gN89a@condition-files (condition-accessor gN887@gN882 gN894@gN880)) (raise (condition (gN2b51@gN2912@make-error) (gN2b73@gN296e@make-who-condition 'expander) (gN2b37@gN28cf@make-message-condition '"cannot locate library in library-path") (gN890@make-library-resolution-condition gN873@x (reverse gN87b@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? gN87a@exts) (gN877@f (cdr gN879@ls) (gN7b4@library-extensions) gN87b@failed-list) ((lambda (gN89b@name) (if (file-exists? gN89b@name) gN89b@name (gN877@f gN879@ls (cdr gN87a@exts) (cons gN89b@name gN87b@failed-list)))) (string-append (car gN879@ls) gN875@str (car gN87a@exts)))))))) gN877@f) (gN7b2@library-path) (gN7b4@library-extensions) '())) (gN7b6@library-name->file-name gN873@x))) (lambda (gN89d@f) (if (procedure? gN89d@f) gN89d@f (assertion-violation 'file-locator '"not a procedure" gN89d@f))))) (set! gN7ba@serialize-all (lambda (gN89f@serialize gN8a0@compile) ((lambda (gN8a4@library-desc) (begin (set! gN8a4@library-desc (lambda (gN8a7@x) (list (gN774@library-id gN8a7@x) (gN778@library-name gN8a7@x)))) (for-each (lambda (gN8a5@x) (if (gN7a8@library-source-file-name gN8a5@x) (gN89f@serialize (gN7a8@library-source-file-name gN8a5@x) (list (gN774@library-id gN8a5@x) (gN778@library-name gN8a5@x) (gN77c@library-version gN8a5@x) (map gN8a4@library-desc (gN780@library-imp* gN8a5@x)) (map gN8a4@library-desc (gN784@library-vis* gN8a5@x)) (map gN8a4@library-desc (gN788@library-inv* gN8a5@x)) (gN78c@library-subst gN8a5@x) (gN790@library-env gN8a5@x) (gN8a0@compile (gN79c@library-visit-code gN8a5@x)) (gN8a0@compile (gN7a0@library-invoke-code gN8a5@x)) (gN7a4@library-visible? gN8a5@x))) (void))) ((gN766@current-library-collection))))) '#f))) (set! gN7bc@current-precompiled-library-loader (gN6bc@gN59b@make-parameter (lambda (gN8a9@filename gN8aa@sk) '#f))) (set! gN7be@try-load-from-file (lambda (gN8ad@filename) ((gN7bc@current-precompiled-library-loader) gN8ad@filename (lambda gN8d3 ((lambda (gN8d4) (if (= gN8d4 '11) (apply (lambda (gN8af@id gN8b0@name gN8b1@ver gN8b2@imp* gN8b3@vis* gN8b4@inv* gN8b5@exp-subst gN8b6@exp-env gN8b7@visit-proc gN8b8@invoke-proc gN8b9@visible?) ((letrec ((gN8c5@f (lambda (gN8c7@deps) (if (null? gN8c7@deps) (begin (gN7d2@install-library gN8af@id gN8b0@name gN8b1@ver gN8b2@imp* gN8b3@vis* gN8b4@inv* gN8b5@exp-subst gN8b6@exp-env gN8b7@visit-proc gN8b8@invoke-proc '#f '#f gN8b9@visible? '#f) '#t) ((lambda (gN8c9@d) ((lambda (gN8cb@label gN8cc@dname) ((lambda (gN8cf@l) (if (and (gN772@library? gN8cf@l) (eq? gN8cb@label (gN774@library-id gN8cf@l))) (gN8c5@f (cdr gN8c7@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" gN8b0@name gN8cc@dname gN8ad@filename gN8cf@l gN8cb@label (gN774@library-id gN8cf@l)) '#f))) (gN7c8@find-library-by-name gN8cc@dname))) (car gN8c9@d) (cadr gN8c9@d))) (car gN8c7@deps)))))) gN8c5@f) (append gN8b2@imp* gN8b3@vis* gN8b4@inv*))) gN8d3) (if (>= gN8d4 '0) (apply (lambda gN8d1@others '#f) gN8d3) (error 'apply '"invalid arg count")))) (length gN8d3)))))) (set! gN7c0@library-loader (gN6bc@gN59b@make-parameter (lambda (gN8d5@x) ((lambda (gN8d7@file-name) (if (not gN8d7@file-name) (assertion-violation '#f '"cannot file library" gN8d5@x) (or (gN7be@try-load-from-file gN8d7@file-name) ((gN7c2@current-library-expander) (gN6bb@gN599@read-library-source-file gN8d7@file-name) gN8d7@file-name (lambda (gN8d9@name) (if (not (fast-equal? gN8d9@name gN8d5@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (gN8df@gN8dc gN8e0@gN8de) ((lambda (gN8e3@e gN8e4@p) (begin (display '"expected to find library " gN8e4@p) (write gN8d5@x gN8e4@p) (display '" in file " gN8e4@p) (display gN8d7@file-name gN8e4@p) (display '", found " gN8e4@p) (write gN8d9@name gN8e4@p) (display '" instead" gN8e4@p) (gN8e3@e))) gN8e0@gN8de gN8df@gN8dc)))) (void))))))) ((gN7b8@file-locator) gN8d5@x))) (lambda (gN8e7@f) (if (procedure? gN8e7@f) gN8e7@f (assertion-violation 'library-locator '"not a procedure" gN8e7@f))))) (set! gN7c2@current-library-expander (gN6bc@gN59b@make-parameter (lambda (gN8e9@x) (assertion-violation 'library-expander '"not initialized")) (lambda (gN8eb@f) (if (procedure? gN8eb@f) gN8eb@f (assertion-violation 'library-expander '"not a procedure" gN8eb@f))))) (set! gN7c4@external-pending-libraries (gN6bc@gN59b@make-parameter '())) (set! gN7c6@find-external-library (lambda (gN8ed@name) (begin (if (member gN8ed@name (gN7c4@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" gN8ed@name) (void)) ((lambda (gN8f3@gN8f0 gN8f4@gN8f2) ((lambda (gN8f7@swap) (dynamic-wind gN8f7@swap (lambda () (begin ((gN7c0@library-loader) gN8ed@name) (or (gN7b0@find-library-by (lambda (gN8f9@x) (fast-equal? (gN778@library-name gN8f9@x) gN8ed@name))) (assertion-violation '#f '"handling external library did not yield the correct library" gN8ed@name)))) gN8f7@swap)) (lambda () ((lambda (gN8fb@t) (begin (gN8f3@gN8f0 gN8f4@gN8f2) (set! gN8f4@gN8f2 gN8fb@t))) (gN8f3@gN8f0))))) gN7c4@external-pending-libraries (cons gN8ed@name (gN7c4@external-pending-libraries)))))) (set! gN7c8@find-library-by-name (lambda (gN8fd@name) (or (gN7b0@find-library-by (lambda (gN8ff@x) (fast-equal? (gN778@library-name gN8ff@x) gN8fd@name))) (gN7c6@find-external-library gN8fd@name)))) (set! gN7ca@library-exists? (lambda (gN901@name) (and (gN7b0@find-library-by (lambda (gN903@x) (fast-equal? (gN778@library-name gN903@x) gN901@name))) '#t))) (set! gN7cc@find-library-by-spec/die (lambda (gN905@spec) ((lambda (gN907@id) (or (gN7b0@find-library-by (lambda (gN909@x) (eq? gN907@id (gN774@library-id gN909@x)))) (assertion-violation '#f '"cannot find library with required spec" gN905@spec))) (car gN905@spec)))) (set! gN7ce@label->binding-table (make-eq-hashtable)) (set! gN7d0@install-library-record (lambda (gN90b@lib) (begin ((lambda (gN90d@exp-env) (for-each (lambda (gN90f@x) ((lambda (gN911@label gN912@binding) ((lambda (gN915@binding) (begin (if (hashtable-ref gN7ce@label->binding-table gN911@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" gN911@label (hashtable-ref gN7ce@label->binding-table gN911@label '#f) gN915@binding) (exit)) (void)) (hashtable-set! gN7ce@label->binding-table gN911@label gN915@binding))) ((lambda (gN917@t) (if (memv gN917@t '(global)) (cons 'global (cons gN90b@lib (cdr gN912@binding))) (if (memv gN917@t '(global-macro)) (cons 'global-macro (cons gN90b@lib (cdr gN912@binding))) (if (memv gN917@t '(global-macro!)) (cons 'global-macro! (cons gN90b@lib (cdr gN912@binding))) gN912@binding)))) (car gN912@binding)))) (car gN90f@x) (cdr gN90f@x))) gN90d@exp-env)) (gN790@library-env gN90b@lib)) ((gN766@current-library-collection) gN90b@lib)))) (set! gN7d2@install-library (lambda (gN919@id gN91a@name gN91b@ver gN91c@imp* gN91d@vis* gN91e@inv* gN91f@exp-subst gN920@exp-env gN921@visit-proc gN922@invoke-proc gN923@visit-code gN924@invoke-code gN925@visible? gN926@source-file-name) ((lambda (gN935@imp-lib* gN936@vis-lib* gN937@inv-lib*) (begin (if (not (and (symbol? gN919@id) (list? gN91a@name) (list? gN91b@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" gN919@id gN91a@name gN91b@ver) (void)) (if (gN7ca@library-exists? gN91a@name) (assertion-violation 'install-library '"library is already installed" gN91a@name) (void)) ((lambda (gN93b@lib) (gN7d0@install-library-record gN93b@lib)) (make-simple-struct 'library '15 (list gN919@id gN91a@name gN91b@ver gN935@imp-lib* gN936@vis-lib* gN937@inv-lib* gN91f@exp-subst gN920@exp-env gN921@visit-proc gN922@invoke-proc gN923@visit-code gN924@invoke-code gN925@visible? gN926@source-file-name))))) (map gN7cc@find-library-by-spec/die gN91c@imp*) (map gN7cc@find-library-by-spec/die gN91d@vis*) (map gN7cc@find-library-by-spec/die gN91e@inv*)))) (set! gN7d4@imported-label->binding (lambda (gN93d@lab) (hashtable-ref gN7ce@label->binding-table gN93d@lab '#f))) (set! gN7d6@invoke-library (lambda (gN93f@lib) ((lambda (gN941@invoke) (if (procedure? gN941@invoke) (begin (gN79a@set-library-invoke-state! gN93f@lib (lambda () (assertion-violation 'invoke '"circularity detected" gN93f@lib))) (for-each gN7d6@invoke-library (gN788@library-inv* gN93f@lib)) (gN79a@set-library-invoke-state! gN93f@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" gN93f@lib))) (gN941@invoke) (gN79a@set-library-invoke-state! gN93f@lib '#t)) (void))) (gN798@library-invoke-state gN93f@lib)))) (set! gN7d8@visit-library (lambda (gN943@lib) ((lambda (gN945@visit) (if (procedure? gN945@visit) (begin (gN796@set-library-visit-state! gN943@lib (lambda () (assertion-violation 'visit '"circularity detected" gN943@lib))) (for-each gN7d6@invoke-library (gN784@library-vis* gN943@lib)) (gN796@set-library-visit-state! gN943@lib (lambda () (assertion-violation 'invoke '"first visit did not return" gN943@lib))) (gN945@visit) (gN796@set-library-visit-state! gN943@lib '#t)) (void))) (gN794@library-visit-state gN943@lib)))) (set! gN7da@invoke-library-by-spec (lambda (gN947@spec) (gN7d6@invoke-library (gN7cc@find-library-by-spec/die gN947@spec)))) (set! gN7dc@installed-libraries (lambda gN94f ((lambda (gN950) (if (= gN950 '1) (apply (lambda (gN949@all?) ((letrec ((gN94b@f (lambda (gN94d@ls) (if (null? gN94d@ls) '() (if (or gN949@all? (gN7a4@library-visible? (car gN94d@ls))) (cons (car gN94d@ls) (gN94b@f (cdr gN94d@ls))) (gN94b@f (cdr gN94d@ls))))))) gN94b@f) ((gN766@current-library-collection)))) gN94f) (if (= gN950 '0) (apply (lambda () (gN7dc@installed-libraries '#f)) gN94f) (error 'apply '"invalid arg count")))) (length gN94f)))) (set! gN7de@library-spec (lambda (gN951@x) (begin (if (not (gN772@library? gN951@x)) (assertion-violation 'library-spec '"not a library" gN951@x) (void)) (list (gN774@library-id gN951@x) (gN778@library-name gN951@x) (gN77c@library-version gN951@x))))) (begin (set! gN98c@gN7de@library-spec gN7de@library-spec) (set! gN98b@gN7dc@installed-libraries gN7dc@installed-libraries) (set! gN98a@gN7da@invoke-library-by-spec gN7da@invoke-library-by-spec) (set! gN989@gN7d8@visit-library gN7d8@visit-library) (set! gN988@gN7d6@invoke-library gN7d6@invoke-library) (set! gN987@gN7d4@imported-label->binding gN7d4@imported-label->binding) (set! gN986@gN7d2@install-library gN7d2@install-library) (set! gN985@gN7d0@install-library-record gN7d0@install-library-record) (set! gN984@gN7ce@label->binding-table gN7ce@label->binding-table) (set! gN983@gN7cc@find-library-by-spec/die gN7cc@find-library-by-spec/die) (set! gN982@gN7ca@library-exists? gN7ca@library-exists?) (set! gN981@gN7c8@find-library-by-name gN7c8@find-library-by-name) (set! gN980@gN7c6@find-external-library gN7c6@find-external-library) (set! gN97f@gN7c4@external-pending-libraries gN7c4@external-pending-libraries) (set! gN97e@gN7c2@current-library-expander gN7c2@current-library-expander) (set! gN97d@gN7c0@library-loader gN7c0@library-loader) (set! gN97c@gN7be@try-load-from-file gN7be@try-load-from-file) (set! gN97b@gN7bc@current-precompiled-library-loader gN7bc@current-precompiled-library-loader) (set! gN97a@gN7ba@serialize-all gN7ba@serialize-all) (set! gN979@gN7b8@file-locator gN7b8@file-locator) (set! gN978@gN7b6@library-name->file-name gN7b6@library-name->file-name) (set! gN977@gN7b4@library-extensions gN7b4@library-extensions) (set! gN976@gN7b2@library-path gN7b2@library-path) (set! gN975@gN7b0@find-library-by gN7b0@find-library-by) (set! gN974@gN7ae@find-dependencies gN7ae@find-dependencies) (set! gN973@gN7ac@dummy gN7ac@dummy) (set! gN972@gN7aa@set-library-source-file-name! gN7aa@set-library-source-file-name!) (set! gN971@gN7a8@library-source-file-name gN7a8@library-source-file-name) (set! gN970@gN7a6@set-library-visible?! gN7a6@set-library-visible?!) (set! gN96f@gN7a4@library-visible? gN7a4@library-visible?) (set! gN96e@gN7a2@set-library-invoke-code! gN7a2@set-library-invoke-code!) (set! gN96d@gN7a0@library-invoke-code gN7a0@library-invoke-code) (set! gN96c@gN79e@set-library-visit-code! gN79e@set-library-visit-code!) (set! gN96b@gN79c@library-visit-code gN79c@library-visit-code) (set! gN96a@gN79a@set-library-invoke-state! gN79a@set-library-invoke-state!) (set! gN969@gN798@library-invoke-state gN798@library-invoke-state) (set! gN968@gN796@set-library-visit-state! gN796@set-library-visit-state!) (set! gN967@gN794@library-visit-state gN794@library-visit-state) (set! gN966@gN792@set-library-env! gN792@set-library-env!) (set! gN965@gN790@library-env gN790@library-env) (set! gN964@gN78e@set-library-subst! gN78e@set-library-subst!) (set! gN963@gN78c@library-subst gN78c@library-subst) (set! gN962@gN78a@set-library-inv*! gN78a@set-library-inv*!) (set! gN961@gN788@library-inv* gN788@library-inv*) (set! gN960@gN786@set-library-vis*! gN786@set-library-vis*!) (set! gN95f@gN784@library-vis* gN784@library-vis*) (set! gN95e@gN782@set-library-imp*! gN782@set-library-imp*!) (set! gN95d@gN780@library-imp* gN780@library-imp*) (set! gN95c@gN77e@set-library-version! gN77e@set-library-version!) (set! gN95b@gN77c@library-version gN77c@library-version) (set! gN95a@gN77a@set-library-name! gN77a@set-library-name!) (set! gN959@gN778@library-name gN778@library-name) (set! gN958@gN776@set-library-id! gN776@set-library-id!) (set! gN957@gN774@library-id gN774@library-id) (set! gN956@gN772@library? gN772@library?) (set! gN955@gN768@rp gN768@rp) (set! gN954@gN766@current-library-collection gN766@current-library-collection) (set! gN953@gN764@make-collection gN764@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (gN990@build-global-define gNa01@build-lambda gNa03@build-case-lambda gNa05@build-let gNa33@build-sequence gNa35@build-void gNa37@build-letrec gNa39@build-letrec* gNa3b@build-library-letrec* gNa3d@build-receive) (begin (set! gN990@build-global-define (lambda (gNa3e@x) (gNa35@build-void))) (set! gNa01@build-lambda (lambda (gNa40@ae gNa41@vars gNa42@exp) (list 'lambda gNa41@vars gNa42@exp))) (set! gNa03@build-case-lambda (lambda (gNa46@ae gNa47@vars* gNa48@exp*) ((lambda (gNa4d@build-error gNa4f@build-pred gNa51@build-apply gNa53@expand-case-lambda) (begin (set! gNa4d@build-error (lambda (gNa84@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! gNa4f@build-pred (lambda (gNa6c@ae gNa6d@n gNa6e@vars) (call-with-values (lambda () ((letrec ((gNa76@f (lambda (gNa78@vars gNa79@count) (if (pair? gNa78@vars) (gNa76@f (cdr gNa78@vars) (+ gNa79@count '1)) (if (null? gNa78@vars) (values gNa79@count '=) (values gNa79@count '>=)))))) gNa76@f) gNa6e@vars '0)) (lambda (gNa7c@gNa73 gNa7d@gNa75) ((lambda (gNa80@pred gNa81@count) (list (list 'primitive gNa80@pred) gNa6d@n (list 'quote gNa81@count))) gNa7d@gNa75 gNa7c@gNa73))))) (set! gNa51@build-apply (lambda (gNa64@ae gNa65@g gNa66@vars gNa67@exp) (list '(primitive apply) (gNa01@build-lambda gNa64@ae gNa66@vars gNa67@exp) gNa65@g))) (set! gNa53@expand-case-lambda (lambda (gNa54@ae gNa55@vars gNa56@exp*) ((lambda (gNa5a@g gNa5b@n) (list 'lambda gNa5a@g (gNa05@build-let gNa54@ae (list gNa5b@n) (list (list '(primitive length) gNa5a@g)) ((letrec ((gNa5e@f (lambda (gNa60@vars* gNa61@exp*) (if (null? gNa60@vars*) (gNa4d@build-error gNa54@ae) (list 'if (gNa4f@build-pred gNa54@ae gNa5b@n (car gNa60@vars*)) (gNa51@build-apply gNa54@ae gNa5a@g (car gNa60@vars*) (car gNa61@exp*)) (gNa5e@f (cdr gNa60@vars*) (cdr gNa61@exp*))))))) gNa5e@f) gNa47@vars* gNa56@exp*)))) (gensym) (gensym)))) (if (= (length gNa48@exp*) '1) (gNa01@build-lambda gNa46@ae (car gNa47@vars*) (car gNa48@exp*)) (gNa53@expand-case-lambda gNa46@ae gNa47@vars* gNa48@exp*)))) '#f '#f '#f '#f))) (set! gNa05@build-let (lambda (gNa86@ae gNa87@lhs* gNa88@rhs* gNa89@body) (cons (gNa01@build-lambda gNa86@ae gNa87@lhs* gNa89@body) gNa88@rhs*))) (set! gNa33@build-sequence (lambda (gNa8e@ae gNa8f@exps) ((letrec ((gNa92@loop (lambda (gNa94@exps) (if (null? (cdr gNa94@exps)) (car gNa94@exps) (if (equal? (car gNa94@exps) (gNa35@build-void)) (gNa92@loop (cdr gNa94@exps)) (cons 'begin gNa94@exps)))))) gNa92@loop) gNa8f@exps))) (set! gNa35@build-void (lambda () '((primitive void)))) (set! gNa37@build-letrec (lambda (gNa96@ae gNa97@vars gNa98@val-exps gNa99@body-exp) (if (null? gNa97@vars) gNa99@body-exp (list 'letrec (map list gNa97@vars gNa98@val-exps) gNa99@body-exp)))) (set! gNa39@build-letrec* (lambda (gNa9e@ae gNa9f@vars gNaa0@val-exps gNaa1@body-exp) (if (null? gNa9f@vars) gNaa1@body-exp (gNa05@build-let gNa9e@ae gNa9f@vars (map (lambda (gNaa6@x) (list 'quote '#f)) gNa9f@vars) (gNa33@build-sequence gNa9e@ae (append (map (lambda (gNaa8@lhs gNaa9@rhs) (list 'set! gNaa8@lhs gNaa9@rhs)) gNa9f@vars gNaa0@val-exps) (list gNaa1@body-exp))))))) (set! gNa3b@build-library-letrec* (lambda (gNaac@ae gNaad@name gNaae@vars gNaaf@locs gNab0@val-exps gNab1@body-exp) (list 'library-letrec* gNaad@name (map list gNaae@vars gNaaf@locs gNab0@val-exps) gNab1@body-exp))) (set! gNa3d@build-receive (lambda (gNab8@ae gNab9@vars gNaba@producer gNabb@body*) (begin (display '"************** in ") (cons 'receive (cons gNab9@vars (cons gNaba@producer gNabb@body*)))))) (begin (set! gNac9@gNa3d@build-receive gNa3d@build-receive) (set! gNac8@gNa3b@build-library-letrec* gNa3b@build-library-letrec*) (set! gNac7@gNa39@build-letrec* gNa39@build-letrec*) (set! gNac6@gNa37@build-letrec gNa37@build-letrec) (set! gNac5@gNa35@build-void gNa35@build-void) (set! gNac4@gNa33@build-sequence gNa33@build-sequence) (set! gNac3@gNa05@build-let gNa05@build-let) (set! gNac2@gNa03@build-case-lambda gNa03@build-case-lambda) (set! gNac1@gNa01@build-lambda gNa01@build-lambda) (set! gNac0@gN990@build-global-define gN990@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (gNad8@file-options-macro gNada@set-cons gNadc@set-union gNae1@top-mark* gNae3@top-marked? gNae5@gen-lexical gNae7@gen-global gNae9@gen-label gNaeb@gen-top-level-label gNaed@gen-define-label+loc gNaef@gen-define-label gNaf9@rib? gNafb@rib-sym* gNafd@set-rib-sym*! gNaff@rib-mark** gNb01@set-rib-mark**! gNb03@rib-label* gNb05@set-rib-label*! gNb07@rib-sealed/freq gNb09@set-rib-sealed/freq! gNb0b@rib-cache gNb0d@set-rib-cache! gNb0f@dummy gNb11@make-empty-rib gNb13@extend-rib! gNb15@extend-rib/nc! gNb17@make-rib-map gNb19@seal-rib! gNb1b@unseal-rib! gNb1d@make-full-rib gNb1f@rp gNb29@stx? gNb2b@stx-expr gNb2d@set-stx-expr! gNb2f@stx-mark* gNb31@set-stx-mark*! gNb33@stx-subst* gNb35@set-stx-subst*! gNb37@stx-ae* gNb39@set-stx-ae*! gNb3b@dummy gNb3d@datum->stx gNb3f@gen-mark gNb41@anti-mark gNb43@anti-mark? gNb45@mkstx gNb47@add-mark gNb49@add-subst gNb4b@syntax-kind? gNb4d@syntax-vector->list gNb4f@syntax-pair? gNb51@syntax-vector? gNb53@syntax-null? gNb55@syntax-list? gNb57@syntax-car gNb59@syntax-cdr gNb5b@syntax->list gNb5d@id? gNb5f@id->sym gNb61@bound-id=? gNb63@free-id=? gNb65@valid-bound-ids? gNb67@distinct-bound-ids? gNb69@bound-id-member? gNb6b@self-evaluating? gNb6d@strip-annotations gNb6f@strip gNb71@stx->datum gNb73@id->label gNb75@label->binding gNb77@make-binding gNb79@binding-type gNb7b@binding-value gNb7d@raise-unbound-error gNb7f@syntax-type gNb8d@sanitize-binding gNb8f@make-variable-transformer gNb91@variable-transformer? gNb93@variable-transformer-procedure gNb95@make-eval-transformer gNce6@parse-define gNce8@parse-define-syntax gNcea@scheme-stx-hashtable gNcec@scheme-stx gNcee@lexical-var gNcf0@lexical-mutable? gNcf2@set-lexical-mutable! gNcf4@add-lexical gNcf6@add-lexicals gNcf8@letrec-helper gNcfa@letrec-transformer gNcfc@letrec*-transformer gNcfe@fluid-let-syntax-transformer gNd00@type-descriptor-transformer gNd02@record-type-descriptor-transformer gNd04@record-constructor-descriptor-transformer gNd06@when-macro gNd08@unless-macro gNd0a@if-transformer gNd0c@and-transformer gNd0e@or-transformer gNd10@case-macro gNd12@quote-transformer gNd14@case-lambda-transformer gNd16@lambda-transformer gNd18@bless gNd1a@with-syntax-macro gNd1c@invalid-fmls-error gNd1e@let-macro gNd20@let-values-macro gNd22@let*-values-macro gNd24@trace-lambda-macro gNd26@trace-define-macro gNd28@trace-define-syntax-macro gNd2a@trace-let/rec-syntax gNd2c@trace-let-syntax-macro gNd2e@trace-letrec-syntax-macro gNd30@guard-macro gNd32@define-enumeration-macro gNd34@time-macro gNd36@delay-macro gNd38@assert-macro gNd3a@endianness-macro gNd3c@identifier-syntax-macro gNd3e@do-macro gNd40@let*-macro gNd42@or-macro gNd44@and-macro gNd46@cond-macro gNd48@do-include gNd4a@include-macro gNd4c@include-into-macro gNd4e@syntax-rules-macro gNd50@quasiquote-macro gNd52@quasisyntax-macro gNd54@define-struct-macro gNd56@define-record-type-macro gNd58@define-condition-type-macro gNd5a@incorrect-usage-macro gNd5c@parameterize-macro gNd5e@foreign-call-transformer gNd60@convert-pattern gNd62@syntax-dispatch gNd64@ellipsis? gNd66@underscore? gNd68@verify-literals gNd6a@syntax-case-transformer gNd6c@ellipsis-map gNd6e@syntax-transformer gNd70@core-macro-transformer gNd72@symbol-macro gNd74@macro-transformer gNd76@local-macro-transformer gNd78@do-macro-call gNd7a@chi-macro gNd7c@chi-local-macro gNd7e@chi-global-macro gNd80@chi-expr* gNd82@chi-application gNd84@chi-expr gNd86@chi-set! gNd88@verify-formals gNd8a@chi-lambda-clause gNd8c@chi-lambda-clause* gNd8e@chi-defun gNd90@chi-rhs gNd92@expand-interaction-rhs*/init* gNd94@chi-rhs* gNd96@find-bound=? gNd98@find-dups gNd9a@chi-internal gNd9c@parse-module gNda6@module-interface? gNda8@module-interface-first-mark gNdaa@set-module-interface-first-mark! gNdac@module-interface-exp-id-vec gNdae@set-module-interface-exp-id-vec! gNdb0@module-interface-exp-lab-vec gNdb2@set-module-interface-exp-lab-vec! gNdb4@dummy gNdb6@module-interface-exp-id* gNdb8@chi-internal-module gNdba@chi-body* gNdbc@expand-transformer gNdbe@parse-exports gNdc0@parse-library-name gNdc2@parse-library gNdc4@parse-import-spec* gNdc6@make-top-rib gNdc8@make-collector gNdca@inv-collector gNdcc@vis-collector gNdce@imp-collector gNdd0@chi-library-internal gNdd2@chi-interaction-expr gNdd4@library-body-expander gNdd6@core-library-expander gNdd8@parse-top-level-program gNdda@top-level-expander gNddc@rp gNde6@env? gNde8@env-names gNdea@set-env-names! gNdec@env-labels gNdee@set-env-labels! gNdf0@env-itc gNdf2@set-env-itc! gNdf4@dummy gNdf6@rp gNe00@interaction-env? gNe02@interaction-env-rib gNe04@set-interaction-env-rib! gNe06@interaction-env-r gNe08@set-interaction-env-r! gNe0a@interaction-env-locs gNe0c@set-interaction-env-locs! gNe0e@dummy gNe10@interaction-environment-symbols gNe12@environment-bindings gNe14@parse-binding gNe16@environment? gNe18@environment-symbols gNe1a@environment gNe1c@null-environment gNe1e@scheme-report-environment gNe20@expand gNe22@eval gNe24@library-expander gNe26@boot-library-expand gNe28@rev-map-append gNe2a@build-exports gNe2c@make-export-subst gNe2e@make-export-env/macros gNe30@generate-temporaries gNe32@free-identifier=? gNe34@bound-identifier=? gNe36@make-source-condition gNe38@extract-position-condition gNe3a@expression-position gNe3c@assertion-error gNe3e@syntax-error gNe40@syntax-violation* gNe42@syntax-violation gNe44@identifier? gNe46@datum->syntax gNe48@syntax->datum gNe4a@compile-r6rs-top-level gNe4c@pre-compile-r6rs-top-level gNe4e@interaction-environment gNe50@top-level-context) (begin (set! gNad8@file-options-macro (lambda (gNe51@x) ((lambda (gNe54@valid-option?) (begin (set! gNe54@valid-option? (lambda (gNe5d@x) (and (gNb5d@id? gNe5d@x) (memq (gNb5f@id->sym gNe5d@x) '(no-fail no-create no-truncate))))) ((lambda (gNe55@t) ((lambda (gNe57@ls/false) (if (and gNe57@ls/false (apply (lambda (gNe59@opt*) (for-all gNe54@valid-option? gNe59@opt*)) gNe57@ls/false)) (apply (lambda (gNe5b@opt*) (gNd18@bless (list 'make-file-options (list 'quote gNe5b@opt*)))) gNe57@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gNe55@t))) (gNd62@syntax-dispatch gNe55@t '(_ . each-any)))) gNe51@x))) '#f))) (set! gNada@set-cons (lambda (gNe5f@x gNe60@ls) (if (memq gNe5f@x gNe60@ls) gNe60@ls (cons gNe5f@x gNe60@ls)))) (set! gNadc@set-union (lambda (gNe63@ls1 gNe64@ls2) (if (null? gNe63@ls1) gNe64@ls2 (if (memq (car gNe63@ls1) gNe64@ls2) (gNadc@set-union (cdr gNe63@ls1) gNe64@ls2) (cons (car gNe63@ls1) (gNadc@set-union (cdr gNe63@ls1) gNe64@ls2)))))) (set! gNae1@top-mark* '(top)) (set! gNae3@top-marked? (lambda (gNe67@m*) (memq 'top gNe67@m*))) (set! gNae5@gen-lexical (lambda (gNe69@sym) (if (symbol? gNe69@sym) (gensym gNe69@sym) (if (gNb29@stx? gNe69@sym) (gNae5@gen-lexical (gNb5f@id->sym gNe69@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" gNe69@sym))))) (set! gNae7@gen-global (lambda (gNe6b@x) (gNae5@gen-lexical gNe6b@x))) (set! gNae9@gen-label (lambda (gNe6d@_) (gensym))) (set! gNaeb@gen-top-level-label (lambda (gNe6f@id gNe70@rib) ((lambda (gNe74@find) (begin (set! gNe74@find (lambda (gNe7f@sym gNe80@mark* gNe81@sym* gNe82@mark** gNe83@label*) (and (pair? gNe81@sym*) (if (and (eq? gNe7f@sym (car gNe81@sym*)) (same-marks? gNe80@mark* (car gNe82@mark**))) (car gNe83@label*) (gNe74@find gNe7f@sym gNe80@mark* (cdr gNe81@sym*) (cdr gNe82@mark**) (cdr gNe83@label*)))))) ((lambda (gNe75@sym gNe76@mark*) ((lambda (gNe79@sym*) ((lambda (gNe7b@t) (if gNe7b@t ((lambda (gNe7d@label) (if (gN987@gN7d4@imported-label->binding gNe7d@label) (gensym) gNe7d@label)) gNe7b@t) (gensym))) (and (memq gNe75@sym (gNafb@rib-sym* gNe70@rib)) (gNe74@find gNe75@sym gNe76@mark* gNe79@sym* (gNaff@rib-mark** gNe70@rib) (gNb03@rib-label* gNe70@rib))))) (gNafb@rib-sym* gNe70@rib))) (gNb5f@id->sym gNe6f@id) (gNb2f@stx-mark* gNe6f@id)))) '#f))) (set! gNaed@gen-define-label+loc (lambda (gNe89@id gNe8a@rib) ((lambda (gNe8d@t) (if gNe8d@t ((lambda (gNe8f@env) ((lambda (gNe91@label gNe92@locs) (values gNe91@label ((lambda (gNe95@t) (if gNe95@t (cdr gNe95@t) ((lambda (gNe97@loc) (begin (gNe0c@set-interaction-env-locs! gNe8f@env (cons (cons gNe91@label gNe97@loc) gNe92@locs)) gNe97@loc)) (gNae5@gen-lexical gNe89@id)))) (assq gNe91@label gNe92@locs)))) (gNaeb@gen-top-level-label gNe89@id gNe8a@rib) (gNe0a@interaction-env-locs gNe8f@env))) gNe8d@t) (values (gensym) (gNae5@gen-lexical gNe89@id)))) (gNe50@top-level-context)))) (set! gNaef@gen-define-label (lambda (gNe99@id gNe9a@rib) (if (gNe50@top-level-context) (gNaeb@gen-top-level-label gNe99@id gNe9a@rib) (gensym)))) (set! gNaf9@rib? (lambda (gNe9d@x) (and (simple-struct? gNe9d@x) (eq? (simple-struct-name gNe9d@x) 'rib)))) (set! gNafb@rib-sym* (lambda (gNe9f@x) (simple-struct-ref gNe9f@x '0))) (set! gNafd@set-rib-sym*! (lambda (gNea1@x gNea2@val) (simple-struct-set! gNea1@x '0 gNea2@val))) (set! gNaff@rib-mark** (lambda (gNea5@x) (simple-struct-ref gNea5@x '1))) (set! gNb01@set-rib-mark**! (lambda (gNea7@x gNea8@val) (simple-struct-set! gNea7@x '1 gNea8@val))) (set! gNb03@rib-label* (lambda (gNeab@x) (simple-struct-ref gNeab@x '2))) (set! gNb05@set-rib-label*! (lambda (gNead@x gNeae@val) (simple-struct-set! gNead@x '2 gNeae@val))) (set! gNb07@rib-sealed/freq (lambda (gNeb1@x) (simple-struct-ref gNeb1@x '3))) (set! gNb09@set-rib-sealed/freq! (lambda (gNeb3@x gNeb4@val) (simple-struct-set! gNeb3@x '3 gNeb4@val))) (set! gNb0b@rib-cache (lambda (gNeb7@x) (simple-struct-ref gNeb7@x '4))) (set! gNb0d@set-rib-cache! (lambda (gNeb9@x gNeba@val) (simple-struct-set! gNeb9@x '4 gNeba@val))) (set! gNb0f@dummy '3) (set! gNb11@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! gNb13@extend-rib! (lambda (gNebd@rib gNebe@id gNebf@label) ((lambda (gNec4@find) (begin (set! gNec4@find (lambda (gNed1@sym gNed2@mark* gNed3@sym* gNed4@mark** gNed5@label*) (and (pair? gNed3@sym*) (if (and (eq? gNed1@sym (car gNed3@sym*)) (same-marks? gNed2@mark* (car gNed4@mark**))) gNed5@label* (gNec4@find gNed1@sym gNed2@mark* (cdr gNed3@sym*) (cdr gNed4@mark**) (cdr gNed5@label*)))))) (begin (if (gNb07@rib-sealed/freq gNebd@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" gNebd@rib) (void)) ((lambda (gNec5@sym gNec6@mark*) ((lambda (gNec9@sym*) ((lambda (gNecb@t) (if gNecb@t ((lambda (gNecd@p) (if (not (eq? gNebf@label (car gNecd@p))) (if (gNe50@top-level-context) (set-car! gNecd@p gNebf@label) (gNe42@syntax-violation '#f '"multiple definitions of identifier" gNebe@id)) (void))) gNecb@t) (begin (if (gNb0b@rib-cache gNebd@rib) (hashtable-update! (gNb0b@rib-cache gNebd@rib) gNec5@sym (lambda (gNecf@e) (cons (cons gNec6@mark* gNebf@label) gNecf@e)) '()) (void)) (gNafd@set-rib-sym*! gNebd@rib (cons gNec5@sym gNec9@sym*)) (gNb01@set-rib-mark**! gNebd@rib (cons gNec6@mark* (gNaff@rib-mark** gNebd@rib))) (gNb05@set-rib-label*! gNebd@rib (cons gNebf@label (gNb03@rib-label* gNebd@rib)))))) (and (memq gNec5@sym (gNafb@rib-sym* gNebd@rib)) (gNec4@find gNec5@sym gNec6@mark* gNec9@sym* (gNaff@rib-mark** gNebd@rib) (gNb03@rib-label* gNebd@rib))))) (gNafb@rib-sym* gNebd@rib))) (gNb5f@id->sym gNebe@id) (gNb2f@stx-mark* gNebe@id))))) '#f))) (set! gNb15@extend-rib/nc! (lambda (gNedb@rib gNedc@id gNedd@label) ((lambda (gNee1@sym gNee2@mark*) ((lambda (gNee5@sym*) (begin (if (gNb0b@rib-cache gNedb@rib) (hashtable-update! (gNb0b@rib-cache gNedb@rib) gNee1@sym (lambda (gNee7@e) (cons (cons gNee2@mark* gNedd@label) gNee7@e)) '()) (void)) (gNafd@set-rib-sym*! gNedb@rib (cons gNee1@sym gNee5@sym*)) (gNb01@set-rib-mark**! gNedb@rib (cons gNee2@mark* (gNaff@rib-mark** gNedb@rib))) (gNb05@set-rib-label*! gNedb@rib (cons gNedd@label (gNb03@rib-label* gNedb@rib))))) (gNafb@rib-sym* gNedb@rib))) (gNb5f@id->sym gNedc@id) (gNb2f@stx-mark* gNedc@id)))) (set! gNb17@make-rib-map (lambda (gNee9@sym*) ((lambda (gNeeb@ht) ((letrec ((gNeed@f (lambda (gNeef@i gNef0@sym*) (if (null? gNef0@sym*) gNeeb@ht (begin (hashtable-update! gNeeb@ht (car gNef0@sym*) (lambda (gNef3@x) (cons gNeef@i gNef3@x)) '()) (gNeed@f (+ gNeef@i '1) (cdr gNef0@sym*))))))) gNeed@f) '0 gNee9@sym*)) (make-eq-hashtable)))) (set! gNb19@seal-rib! (lambda (gNef5@rib) ((lambda (gNef7@sym*) (if (not (null? gNef7@sym*)) (begin (gNafd@set-rib-sym*! gNef5@rib (list->vector gNef7@sym*)) (gNb01@set-rib-mark**! gNef5@rib (list->vector (gNaff@rib-mark** gNef5@rib))) (gNb05@set-rib-label*! gNef5@rib (list->vector (gNb03@rib-label* gNef5@rib))) (gNb09@set-rib-sealed/freq! gNef5@rib (gNb17@make-rib-map gNef7@sym*))) (void))) (gNafb@rib-sym* gNef5@rib)))) (set! gNb1b@unseal-rib! (lambda (gNef9@rib) (if (gNb07@rib-sealed/freq gNef9@rib) (begin (gNb09@set-rib-sealed/freq! gNef9@rib '#f) (gNafd@set-rib-sym*! gNef9@rib (vector->list (gNafb@rib-sym* gNef9@rib))) (gNb01@set-rib-mark**! gNef9@rib (vector->list (gNaff@rib-mark** gNef9@rib))) (gNb05@set-rib-label*! gNef9@rib (vector->list (gNb03@rib-label* gNef9@rib)))) (void)))) (set! gNb1d@make-full-rib (lambda (gNefb@id* gNefc@label*) ((lambda (gNeff@r) (begin (gNb19@seal-rib! gNeff@r) gNeff@r)) (make-simple-struct 'rib '6 (list (map gNb5f@id->sym gNefb@id*) (map gNb2f@stx-mark* gNefb@id*) gNefc@label* '#f '#f))))) (set! gNb1f@rp (gN6b9@gN595@make-record-printer 'stx (lambda (gNf01@x gNf02@p gNf03@wr) (begin (display '"#<syntax " gNf02@p) (write (gNb71@stx->datum gNf01@x) gNf02@p) ((lambda (gNf07@expr) (if (gN6b1@gN585@annotation? gNf07@expr) ((lambda (gNf09@src) (if (pair? gNf09@src) (begin (display '" [" gNf02@p) (display (cdr gNf09@src) gNf02@p) (display '" of " gNf02@p) (display (car gNf09@src) gNf02@p) (display '"]" gNf02@p)) (void))) (gN6b2@gN587@annotation-source gNf07@expr)) (void))) (gNb2b@stx-expr gNf01@x)) (display '">" gNf02@p))))) (set! gNb29@stx? (lambda (gNf0b@x) (and (simple-struct? gNf0b@x) (eq? (simple-struct-name gNf0b@x) 'stx)))) (set! gNb2b@stx-expr (lambda (gNf0d@x) (simple-struct-ref gNf0d@x '0))) (set! gNb2d@set-stx-expr! (lambda (gNf0f@x gNf10@val) (simple-struct-set! gNf0f@x '0 gNf10@val))) (set! gNb2f@stx-mark* (lambda (gNf13@x) (simple-struct-ref gNf13@x '1))) (set! gNb31@set-stx-mark*! (lambda (gNf15@x gNf16@val) (simple-struct-set! gNf15@x '1 gNf16@val))) (set! gNb33@stx-subst* (lambda (gNf19@x) (simple-struct-ref gNf19@x '2))) (set! gNb35@set-stx-subst*! (lambda (gNf1b@x gNf1c@val) (simple-struct-set! gNf1b@x '2 gNf1c@val))) (set! gNb37@stx-ae* (lambda (gNf1f@x) (simple-struct-ref gNf1f@x '3))) (set! gNb39@set-stx-ae*! (lambda (gNf21@x gNf22@val) (simple-struct-set! gNf21@x '3 gNf22@val))) (set! gNb3b@dummy '3) (set! gNb3d@datum->stx (lambda (gNf25@id gNf26@datum) (make-simple-struct 'stx '5 (list gNf26@datum (gNb2f@stx-mark* gNf25@id) (gNb33@stx-subst* gNf25@id) (gNb37@stx-ae* gNf25@id))))) (set! gNb3f@gen-mark (lambda () (string '#\m))) (set! gNb41@anti-mark '#f) (set! gNb43@anti-mark? not) (set! gNb45@mkstx (lambda (gNf29@e gNf2a@m* gNf2b@s* gNf2c@ae*) (if (and (gNb29@stx? gNf29@e) (not (gNae3@top-marked? gNf2a@m*))) (call-with-values (lambda () (join-wraps gNf2a@m* gNf2b@s* gNf2c@ae* gNf29@e)) (lambda (gNf37@gNf32 gNf38@gNf34 gNf39@gNf36) ((lambda (gNf3d@ae* gNf3e@s* gNf3f@m*) (make-simple-struct 'stx '5 (list (gNb2b@stx-expr gNf29@e) gNf3f@m* gNf3e@s* gNf3d@ae*))) gNf39@gNf36 gNf38@gNf34 gNf37@gNf32))) (make-simple-struct 'stx '5 (list gNf29@e gNf2a@m* gNf2b@s* gNf2c@ae*))))) (set! gNb47@add-mark (lambda (gNf43@m gNf44@e gNf45@ae) (gNb45@mkstx gNf44@e (list gNf43@m) '(shift) (list gNf45@ae)))) (set! gNb49@add-subst (lambda (gNf49@subst gNf4a@e) (gNb45@mkstx gNf4a@e '() (list gNf49@subst) '()))) (set! gNb4b@syntax-kind? (lambda (gNf4d@x gNf4e@p?) (if (gNb29@stx? gNf4d@x) (gNb4b@syntax-kind? (gNb2b@stx-expr gNf4d@x) gNf4e@p?) (if (gN6b1@gN585@annotation? gNf4d@x) (gNb4b@syntax-kind? (gN6b3@gN589@annotation-expression gNf4d@x) gNf4e@p?) (gNf4e@p? gNf4d@x))))) (set! gNb4d@syntax-vector->list (lambda (gNf51@x) (if (gNb29@stx? gNf51@x) ((lambda (gNf53@ls gNf54@m* gNf55@s* gNf56@ae*) (map (lambda (gNf5b@x) (gNb45@mkstx gNf5b@x gNf54@m* gNf55@s* gNf56@ae*)) gNf53@ls)) (gNb4d@syntax-vector->list (gNb2b@stx-expr gNf51@x)) (gNb2f@stx-mark* gNf51@x) (gNb33@stx-subst* gNf51@x) (gNb37@stx-ae* gNf51@x)) (if (gN6b1@gN585@annotation? gNf51@x) (gNb4d@syntax-vector->list (gN6b3@gN589@annotation-expression gNf51@x)) (if (vector? gNf51@x) (vector->list gNf51@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" gNf51@x)))))) (set! gNb4f@syntax-pair? (lambda (gNf5d@x) (gNb4b@syntax-kind? gNf5d@x pair?))) (set! gNb51@syntax-vector? (lambda (gNf5f@x) (gNb4b@syntax-kind? gNf5f@x vector?))) (set! gNb53@syntax-null? (lambda (gNf61@x) (gNb4b@syntax-kind? gNf61@x null?))) (set! gNb55@syntax-list? (lambda (gNf63@x) (or (gNb53@syntax-null? gNf63@x) (and (gNb4f@syntax-pair? gNf63@x) (gNb55@syntax-list? (gNb59@syntax-cdr gNf63@x)))))) (set! gNb57@syntax-car (lambda (gNf65@x) (if (gNb29@stx? gNf65@x) (gNb45@mkstx (gNb57@syntax-car (gNb2b@stx-expr gNf65@x)) (gNb2f@stx-mark* gNf65@x) (gNb33@stx-subst* gNf65@x) (gNb37@stx-ae* gNf65@x)) (if (gN6b1@gN585@annotation? gNf65@x) (gNb57@syntax-car (gN6b3@gN589@annotation-expression gNf65@x)) (if (pair? gNf65@x) (car gNf65@x) (assertion-violation 'syntax-car '"BUG: not a pair" gNf65@x)))))) (set! gNb59@syntax-cdr (lambda (gNf67@x) (if (gNb29@stx? gNf67@x) (gNb45@mkstx (gNb59@syntax-cdr (gNb2b@stx-expr gNf67@x)) (gNb2f@stx-mark* gNf67@x) (gNb33@stx-subst* gNf67@x) (gNb37@stx-ae* gNf67@x)) (if (gN6b1@gN585@annotation? gNf67@x) (gNb59@syntax-cdr (gN6b3@gN589@annotation-expression gNf67@x)) (if (pair? gNf67@x) (cdr gNf67@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" gNf67@x)))))) (set! gNb5b@syntax->list (lambda (gNf69@x) (if (gNb4f@syntax-pair? gNf69@x) (cons (gNb57@syntax-car gNf69@x) (gNb5b@syntax->list (gNb59@syntax-cdr gNf69@x))) (if (gNb53@syntax-null? gNf69@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" gNf69@x))))) (set! gNb5d@id? (lambda (gNf6b@x) (and (gNb29@stx? gNf6b@x) (symbol? (gNb2b@stx-expr gNf6b@x))))) (set! gNb5f@id->sym (lambda (gNf6d@x) (gNb2b@stx-expr gNf6d@x))) (set! gNb61@bound-id=? (lambda (gNf6f@x gNf70@y) (and (eq? (gNb5f@id->sym gNf6f@x) (gNb5f@id->sym gNf70@y)) (same-marks? (gNb2f@stx-mark* gNf6f@x) (gNb2f@stx-mark* gNf70@y))))) (set! gNb63@free-id=? (lambda (gNf73@i gNf74@j) ((lambda (gNf77@t0 gNf78@t1) (if (or gNf77@t0 gNf78@t1) (eq? gNf77@t0 gNf78@t1) (eq? (gNb5f@id->sym gNf73@i) (gNb5f@id->sym gNf74@j)))) (id->real-label gNf73@i) (id->real-label gNf74@j)))) (set! gNb65@valid-bound-ids? (lambda (gNf7b@id*) (and (for-all gNb5d@id? gNf7b@id*) (gNb67@distinct-bound-ids? gNf7b@id*)))) (set! gNb67@distinct-bound-ids? (lambda (gNf7d@id*) (or (null? gNf7d@id*) (and (not (gNb69@bound-id-member? (car gNf7d@id*) (cdr gNf7d@id*))) (gNb67@distinct-bound-ids? (cdr gNf7d@id*)))))) (set! gNb69@bound-id-member? (lambda (gNf7f@id gNf80@id*) (and (pair? gNf80@id*) (or (gNb61@bound-id=? gNf7f@id (car gNf80@id*)) (gNb69@bound-id-member? gNf7f@id (cdr gNf80@id*)))))) (set! gNb6b@self-evaluating? (lambda (gNf83@x) (or (number? gNf83@x) (string? gNf83@x) (char? gNf83@x) (boolean? gNf83@x) (regexp? gNf83@x) (bytevector? gNf83@x)))) (set! gNb6d@strip-annotations (lambda (gNf85@x) (if (pair? gNf85@x) (cons (gNb6d@strip-annotations (car gNf85@x)) (gNb6d@strip-annotations (cdr gNf85@x))) (if (vector? gNf85@x) (vector-map gNb6d@strip-annotations gNf85@x) (if (gN6b1@gN585@annotation? gNf85@x) (gN6b0@gN583@annotation-stripped gNf85@x) gNf85@x))))) (set! gNb6f@strip (lambda (gNf87@x gNf88@m*) (if (gNae3@top-marked? gNf88@m*) (if (or (gN6b1@gN585@annotation? gNf87@x) (and (pair? gNf87@x) (gN6b1@gN585@annotation? (car gNf87@x))) (and (vector? gNf87@x) (> (vector-length gNf87@x) '0) (gN6b1@gN585@annotation? (vector-ref gNf87@x '0)))) (gNb6d@strip-annotations gNf87@x) gNf87@x) ((letrec ((gNf8b@f (lambda (gNf8d@x) (if (gNb29@stx? gNf8d@x) (gNb6f@strip (gNb2b@stx-expr gNf8d@x) (gNb2f@stx-mark* gNf8d@x)) (if (gN6b1@gN585@annotation? gNf8d@x) (gN6b0@gN583@annotation-stripped gNf8d@x) (if (pair? gNf8d@x) ((lambda (gNf8f@a gNf90@d) (if (and (eq? gNf8f@a (car gNf8d@x)) (eq? gNf90@d (cdr gNf8d@x))) gNf8d@x (cons gNf8f@a gNf90@d))) (gNf8b@f (car gNf8d@x)) (gNf8b@f (cdr gNf8d@x))) (if (vector? gNf8d@x) ((lambda (gNf93@old) ((lambda (gNf95@new) (if (for-all eq? gNf93@old gNf95@new) gNf8d@x (list->vector gNf95@new))) (map gNf8b@f gNf93@old))) (vector->list gNf8d@x)) gNf8d@x))))))) gNf8b@f) gNf87@x)))) (set! gNb71@stx->datum (lambda (gNf97@x) (gNb6f@strip gNf97@x '()))) (set! gNb73@id->label (lambda (gNf99@id) (or (id->real-label gNf99@id) ((lambda (gNf9b@t) (if gNf9b@t ((lambda (gNf9d@env) ((lambda (gNf9f@rib) (call-with-values (lambda () (gNaed@gen-define-label+loc gNf99@id gNf9f@rib)) (lambda (gNfa5@gNfa2 gNfa6@gNfa4) ((lambda (gNfa9@loc_ gNfaa@lab) (begin (gNb13@extend-rib! gNf9f@rib gNf99@id gNfaa@lab) gNfaa@lab)) gNfa6@gNfa4 gNfa5@gNfa2)))) (gNe02@interaction-env-rib gNf9d@env))) gNf9b@t) '#f)) (gNe50@top-level-context))))) (set! gNb75@label->binding (lambda (gNfad@x gNfae@r) ((lambda (gNfb1@t) (if gNfb1@t ((lambda (gNfb3@b) (if (and (pair? gNfb3@b) (eq? (car gNfb3@b) '$core-rtd)) (cons '$rtd (map gNd18@bless (cdr gNfb3@b))) (if (and (pair? gNfb3@b) (eq? (car gNfb3@b) 'global-rtd)) ((lambda (gNfb5@lib gNfb6@loc) (cons '$rtd (symbol-value gNfb6@loc))) (cadr gNfb3@b) (cddr gNfb3@b)) gNfb3@b))) gNfb1@t) ((lambda (gNfb9@t) (if gNfb9@t (cdr gNfb9@t) ((lambda (gNfbb@t) (if gNfbb@t ((lambda (gNfbd@env) ((lambda (gNfbf@t) (if gNfbf@t ((lambda (gNfc1@p) (cons* 'lexical (cdr gNfc1@p) '#f)) gNfbf@t) '(displaced-lexical . #f))) (assq gNfad@x (gNe0a@interaction-env-locs gNfbd@env)))) gNfbb@t) '(displaced-lexical . #f))) (gNe50@top-level-context)))) (assq gNfad@x gNfae@r)))) (gN987@gN7d4@imported-label->binding gNfad@x)))) (set! gNb77@make-binding cons) (set! gNb79@binding-type car) (set! gNb7b@binding-value cdr) (set! gNb7d@raise-unbound-error (lambda (gNfc3@id) (gNe40@syntax-violation* '#f '"unbound identifier" gNfc3@id (gN2ba1@gN29e7@make-undefined-violation)))) (set! gNb7f@syntax-type (lambda (gNfc5@e gNfc6@r) (if (gNb5d@id? gNfc5@e) ((lambda (gNfc9@id) ((lambda (gNfcb@label) ((lambda (gNfcd@b) ((lambda (gNfcf@type) ((lambda () (begin (if (not gNfcb@label) (gNb7d@raise-unbound-error gNfc9@id) (void)) ((lambda (gNfd1@t) (if (memv gNfd1@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values gNfcf@type (gNb7b@binding-value gNfcd@b) gNfc9@id) (values 'other '#f '#f))) gNfcf@type))))) (gNb79@binding-type gNfcd@b))) (gNb75@label->binding gNfcb@label gNfc6@r))) (gNb73@id->label gNfc9@id))) gNfc5@e) (if (gNb4f@syntax-pair? gNfc5@e) ((lambda (gNfd3@id) (if (gNb5d@id? gNfd3@id) ((lambda (gNfd5@label) ((lambda (gNfd7@b) ((lambda (gNfd9@type) ((lambda () (begin (if (not gNfd5@label) (gNb7d@raise-unbound-error gNfd3@id) (void)) ((lambda (gNfdb@t) (if (memv gNfdb@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values gNfd9@type (gNb7b@binding-value gNfd7@b) gNfd3@id) (values 'call '#f '#f))) gNfd9@type))))) (gNb79@binding-type gNfd7@b))) (gNb75@label->binding gNfd5@label gNfc6@r))) (gNb73@id->label gNfd3@id)) (values 'call '#f '#f))) (gNb57@syntax-car gNfc5@e)) ((lambda (gNfdd@d) (if (gNb6b@self-evaluating? gNfdd@d) (values 'constant gNfdd@d '#f) (values 'other '#f '#f))) (gNb71@stx->datum gNfc5@e)))))) (set! gNb8d@sanitize-binding (lambda (gNfdf@x gNfe0@src) (if (procedure? gNfdf@x) (cons* 'local-macro gNfdf@x gNfe0@src) (if (and (pair? gNfdf@x) (eq? (car gNfdf@x) 'macro!) (procedure? (cdr gNfdf@x))) (cons* 'local-macro! (cdr gNfdf@x) gNfe0@src) (if (and (pair? gNfdf@x) (eq? (car gNfdf@x) '$rtd)) gNfdf@x (assertion-violation 'expand '"invalid transformer" gNfdf@x)))))) (set! gNb8f@make-variable-transformer (lambda (gNfe3@x) (if (procedure? gNfe3@x) (cons 'macro! gNfe3@x) (assertion-violation 'make-variable-transformer '"not a procedure" gNfe3@x)))) (set! gNb91@variable-transformer? (lambda (gNfe5@x) (and (pair? gNfe5@x) (eq? (car gNfe5@x) 'macro!) (procedure? (cdr gNfe5@x))))) (set! gNb93@variable-transformer-procedure (lambda (gNfe7@x) (if (gNb91@variable-transformer? gNfe7@x) (cdr gNfe7@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" gNfe7@x)))) (set! gNb95@make-eval-transformer (lambda (gNfe9@x) (gNb8d@sanitize-binding (eval-core (gN712@gN6ca@expanded->core gNfe9@x)) gNfe9@x))) (set! gNce6@parse-define (lambda (gNfeb@x) ((lambda (gNfed@t) ((lambda (gNfef@ls/false) (if (and gNfef@ls/false (apply (lambda (gNff1@id gNff2@fmls gNff3@b gNff4@b*) (gNb5d@id? gNff1@id)) gNfef@ls/false)) (apply (lambda (gNff9@id gNffa@fmls gNffb@b gNffc@b*) (begin (gNd88@verify-formals gNffa@fmls gNfeb@x) (values gNff9@id (cons 'defun (cons gNffa@fmls (cons gNffb@b gNffc@b*)))))) gNfef@ls/false) ((lambda (gN1001@t) ((lambda (gN1003@ls/false) (if (and gN1003@ls/false (apply (lambda (gN1005@id gN1006@val) (gNb5d@id? gN1005@id)) gN1003@ls/false)) (apply (lambda (gN1009@id gN100a@val) (values gN1009@id (cons 'expr gN100a@val))) gN1003@ls/false) ((lambda (gN100d@t) ((lambda (gN100f@ls/false) (if (and gN100f@ls/false (apply (lambda (gN1011@id) (gNb5d@id? gN1011@id)) gN100f@ls/false)) (apply (lambda (gN1013@id) (values gN1013@id (cons 'expr (gNd18@bless '(void))))) gN100f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN100d@t))) (gNd62@syntax-dispatch gN100d@t '(_ any)))) gN1001@t))) (gNd62@syntax-dispatch gN1001@t '(_ any any)))) gNfed@t))) (gNd62@syntax-dispatch gNfed@t '(_ (any . any) any . each-any)))) gNfeb@x))) (set! gNce8@parse-define-syntax (lambda (gN1015@x) ((lambda (gN1017@t) ((lambda (gN1019@ls/false) (if (and gN1019@ls/false (apply (lambda (gN101b@id gN101c@val) (gNb5d@id? gN101b@id)) gN1019@ls/false)) (apply (lambda (gN101f@id gN1020@val) (values gN101f@id gN1020@val)) gN1019@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1017@t))) (gNd62@syntax-dispatch gN1017@t '(_ any any)))) gN1015@x))) (set! gNcea@scheme-stx-hashtable (make-eq-hashtable)) (set! gNcec@scheme-stx (lambda (gN1023@sym) (or (hashtable-ref gNcea@scheme-stx-hashtable gN1023@sym '#f) ((lambda (gN1025@subst) ((lambda (gN1027@stx) ((lambda (gN1029@stx) ((lambda () (begin (hashtable-set! gNcea@scheme-stx-hashtable gN1023@sym gN1029@stx) gN1029@stx)))) ((lambda (gN102b@t) (if gN102b@t ((lambda (gN102d@x) ((lambda (gN102f@name gN1030@label) (gNb49@add-subst (make-simple-struct 'rib '6 (list (list gN102f@name) (list gNae1@top-mark*) (list gN1030@label) '#f '#f)) gN1027@stx)) (car gN102d@x) (cdr gN102d@x))) gN102b@t) gN1027@stx)) (assq gN1023@sym gN1025@subst)))) (make-simple-struct 'stx '5 (list gN1023@sym gNae1@top-mark* '() '())))) (gN963@gN78c@library-subst (gN981@gN7c8@find-library-by-name '(psyntax system $all))))))) (set! gNcee@lexical-var car) (set! gNcf0@lexical-mutable? cdr) (set! gNcf2@set-lexical-mutable! set-cdr!) (set! gNcf4@add-lexical (lambda (gN1033@lab gN1034@lex gN1035@r) (cons (cons* gN1033@lab 'lexical gN1034@lex '#f) gN1035@r))) (set! gNcf6@add-lexicals (lambda (gN1039@lab* gN103a@lex* gN103b@r) (if (null? gN1039@lab*) gN103b@r (gNcf6@add-lexicals (cdr gN1039@lab*) (cdr gN103a@lex*) (gNcf4@add-lexical (car gN1039@lab*) (car gN103a@lex*) gN103b@r))))) (set! gNcf8@letrec-helper (lambda (gN103f@e gN1040@r gN1041@mr gN1042@build) ((lambda (gN1047@t) ((lambda (gN1049@ls/false) (if gN1049@ls/false (apply (lambda (gN104b@lhs* gN104c@rhs* gN104d@b gN104e@b*) (if (not (gNb65@valid-bound-ids? gN104b@lhs*)) (gNd1c@invalid-fmls-error gN103f@e gN104b@lhs*) ((lambda (gN1053@lex* gN1054@lab*) ((lambda (gN1057@rib gN1058@r) ((lambda (gN105b@body gN105c@rhs*) (gN1042@build '#f gN1053@lex* gN105c@rhs* gN105b@body)) (gNd9a@chi-internal (gNb49@add-subst gN1057@rib (cons gN104d@b gN104e@b*)) gN1058@r gN1041@mr) (gNd80@chi-expr* (map (lambda (gN105f@x) (gNb49@add-subst gN1057@rib gN105f@x)) gN104c@rhs*) gN1058@r gN1041@mr))) (gNb1d@make-full-rib gN104b@lhs* gN1054@lab*) (gNcf6@add-lexicals gN1054@lab* gN1053@lex* gN1040@r))) (map gNae5@gen-lexical gN104b@lhs*) (map gNae9@gen-label gN104b@lhs*)))) gN1049@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1047@t))) (gNd62@syntax-dispatch gN1047@t '(_ #(each (any any)) any . each-any)))) gN103f@e))) (set! gNcfa@letrec-transformer (lambda (gN1061@e gN1062@r gN1063@mr) (gNcf8@letrec-helper gN1061@e gN1062@r gN1063@mr gNac6@gNa37@build-letrec))) (set! gNcfc@letrec*-transformer (lambda (gN1067@e gN1068@r gN1069@mr) (gNcf8@letrec-helper gN1067@e gN1068@r gN1069@mr gNac7@gNa39@build-letrec*))) (set! gNcfe@fluid-let-syntax-transformer (lambda (gN106d@e gN106e@r gN106f@mr) ((lambda (gN1074@lookup) (begin (set! gN1074@lookup (lambda (gN1087@x) (or (gNb73@id->label gN1087@x) (gNe42@syntax-violation '#f '"unbound identifier" gN106d@e gN1087@x)))) ((lambda (gN1075@t) ((lambda (gN1077@ls/false) (if gN1077@ls/false (apply (lambda (gN1079@lhs* gN107a@rhs* gN107b@b gN107c@b*) (if (not (gNb65@valid-bound-ids? gN1079@lhs*)) (gNd1c@invalid-fmls-error gN106d@e gN1079@lhs*) ((lambda (gN1081@lab* gN1082@rhs*) (gNd9a@chi-internal (cons gN107b@b gN107c@b*) (append (map cons gN1081@lab* gN1082@rhs*) gN106e@r) (append (map cons gN1081@lab* gN1082@rhs*) gN106f@mr))) (map gN1074@lookup gN1079@lhs*) (map (lambda (gN1085@x) (gNb95@make-eval-transformer (gNdbc@expand-transformer gN1085@x gN106f@mr))) gN107a@rhs*)))) gN1077@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1075@t))) (gNd62@syntax-dispatch gN1075@t '(_ #(each (any any)) any . each-any)))) gN106d@e))) '#f))) (set! gNd00@type-descriptor-transformer (lambda (gN1089@e gN108a@r gN108b@mr) ((lambda (gN108f@t) ((lambda (gN1091@ls/false) (if (and gN1091@ls/false (apply (lambda (gN1093@id) (gNb5d@id? gN1093@id)) gN1091@ls/false)) (apply (lambda (gN1095@id) ((lambda (gN1097@lab) ((lambda (gN1099@b) ((lambda (gN109b@type) ((lambda () (begin (if (not gN1097@lab) (gNb7d@raise-unbound-error gN1095@id) (void)) (if (not (and (eq? gN109b@type '$rtd) (not (list? (gNb7b@binding-value gN1099@b))))) (gNe42@syntax-violation '#f '"not a record type" gN1089@e) (void)) (list 'quote (gNb7b@binding-value gN1099@b)))))) (gNb79@binding-type gN1099@b))) (gNb75@label->binding gN1097@lab gN108a@r))) (gNb73@id->label gN1095@id))) gN1091@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN108f@t))) (gNd62@syntax-dispatch gN108f@t '(_ any)))) gN1089@e))) (set! gNd02@record-type-descriptor-transformer (lambda (gN109d@e gN109e@r gN109f@mr) ((lambda (gN10a3@t) ((lambda (gN10a5@ls/false) (if (and gN10a5@ls/false (apply (lambda (gN10a7@id) (gNb5d@id? gN10a7@id)) gN10a5@ls/false)) (apply (lambda (gN10a9@id) ((lambda (gN10ab@lab) ((lambda (gN10ad@b) ((lambda (gN10af@type) ((lambda () (begin (if (not gN10ab@lab) (gNb7d@raise-unbound-error gN10a9@id) (void)) (if (not (and (eq? gN10af@type '$rtd) (list? (gNb7b@binding-value gN10ad@b)))) (gNe42@syntax-violation '#f '"not a record type" gN109d@e) (void)) (gNd84@chi-expr (car (gNb7b@binding-value gN10ad@b)) gN109e@r gN109f@mr))))) (gNb79@binding-type gN10ad@b))) (gNb75@label->binding gN10ab@lab gN109e@r))) (gNb73@id->label gN10a9@id))) gN10a5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN10a3@t))) (gNd62@syntax-dispatch gN10a3@t '(_ any)))) gN109d@e))) (set! gNd04@record-constructor-descriptor-transformer (lambda (gN10b1@e gN10b2@r gN10b3@mr) ((lambda (gN10b7@t) ((lambda (gN10b9@ls/false) (if (and gN10b9@ls/false (apply (lambda (gN10bb@id) (gNb5d@id? gN10bb@id)) gN10b9@ls/false)) (apply (lambda (gN10bd@id) ((lambda (gN10bf@lab) ((lambda (gN10c1@b) ((lambda (gN10c3@type) ((lambda () (begin (if (not gN10bf@lab) (gNb7d@raise-unbound-error gN10bd@id) (void)) (if (not (and (eq? gN10c3@type '$rtd) (list? (gNb7b@binding-value gN10c1@b)))) (gNe42@syntax-violation '#f '"invalid type" gN10b1@e) (void)) (gNd84@chi-expr (cadr (gNb7b@binding-value gN10c1@b)) gN10b2@r gN10b3@mr))))) (gNb79@binding-type gN10c1@b))) (gNb75@label->binding gN10bf@lab gN10b2@r))) (gNb73@id->label gN10bd@id))) gN10b9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN10b7@t))) (gNd62@syntax-dispatch gN10b7@t '(_ any)))) gN10b1@e))) (set! gNd06@when-macro (lambda (gN10c5@e) ((lambda (gN10c7@t) ((lambda (gN10c9@ls/false) (if gN10c9@ls/false (apply (lambda (gN10cb@test gN10cc@e gN10cd@e*) (gNd18@bless (list 'if gN10cb@test (cons 'begin (cons gN10cc@e gN10cd@e*))))) gN10c9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN10c7@t))) (gNd62@syntax-dispatch gN10c7@t '(_ any any . each-any)))) gN10c5@e))) (set! gNd08@unless-macro (lambda (gN10d1@e) ((lambda (gN10d3@t) ((lambda (gN10d5@ls/false) (if gN10d5@ls/false (apply (lambda (gN10d7@test gN10d8@e gN10d9@e*) (gNd18@bless (list 'if (list 'not gN10d7@test) (cons 'begin (cons gN10d8@e gN10d9@e*))))) gN10d5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN10d3@t))) (gNd62@syntax-dispatch gN10d3@t '(_ any any . each-any)))) gN10d1@e))) (set! gNd0a@if-transformer (lambda (gN10dd@e gN10de@r gN10df@mr) ((lambda (gN10e3@t) ((lambda (gN10e5@ls/false) (if gN10e5@ls/false (apply (lambda (gN10e7@e0 gN10e8@e1 gN10e9@e2) (list 'if (gNd84@chi-expr gN10e7@e0 gN10de@r gN10df@mr) (gNd84@chi-expr gN10e8@e1 gN10de@r gN10df@mr) (gNd84@chi-expr gN10e9@e2 gN10de@r gN10df@mr))) gN10e5@ls/false) ((lambda (gN10ed@t) ((lambda (gN10ef@ls/false) (if gN10ef@ls/false (apply (lambda (gN10f1@e0 gN10f2@e1) (list 'if (gNd84@chi-expr gN10f1@e0 gN10de@r gN10df@mr) (gNd84@chi-expr gN10f2@e1 gN10de@r gN10df@mr) (gNac5@gNa35@build-void))) gN10ef@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN10ed@t))) (gNd62@syntax-dispatch gN10ed@t '(_ any any)))) gN10e3@t))) (gNd62@syntax-dispatch gN10e3@t '(_ any any any)))) gN10dd@e))) (set! gNd0c@and-transformer (lambda (gN10f5@e gN10f6@r gN10f7@mr) ((lambda (gN10fb@t) ((lambda (gN10fd@ls/false) (if gN10fd@ls/false (apply (lambda (gN10ff@e*) (cons 'and (gNd80@chi-expr* gN10ff@e* gN10f6@r gN10f7@mr))) gN10fd@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN10fb@t))) (gNd62@syntax-dispatch gN10fb@t '(_ . each-any)))) gN10f5@e))) (set! gNd0e@or-transformer (lambda (gN1101@e gN1102@r gN1103@mr) ((lambda (gN1107@t) ((lambda (gN1109@ls/false) (if gN1109@ls/false (apply (lambda (gN110b@e*) (cons 'or (gNd80@chi-expr* gN110b@e* gN1102@r gN1103@mr))) gN1109@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1107@t))) (gNd62@syntax-dispatch gN1107@t '(_ . each-any)))) gN1101@e))) (set! gNd10@case-macro (lambda (gN110d@e) ((lambda (gN1110@build-last gN1112@build-one) (begin (set! gN1110@build-last (lambda (gN1137@cls) ((lambda (gN1139@t) ((lambda (gN113b@ls/false) (if gN113b@ls/false (apply (lambda (gN113d@e gN113e@e*) (cons 'begin (cons gN113d@e gN113e@e*))) gN113b@ls/false) ((lambda (gN1141@t) ((lambda (gN1143@ls/false) (if gN1143@ls/false (apply (lambda () (gN1112@build-one gN1137@cls '(if #f #f))) gN1143@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1141@t))) (gNd62@syntax-dispatch gN1141@t '_))) gN1139@t))) (gNd62@syntax-dispatch gN1139@t '(#(scheme-id else) any . each-any)))) gN1137@cls))) (set! gN1112@build-one (lambda (gN1129@cls gN112a@k) ((lambda (gN112d@t) ((lambda (gN112f@ls/false) (if gN112f@ls/false (apply (lambda (gN1131@d* gN1132@e gN1133@e*) (list 'if (list 'memv 't (list 'quote gN1131@d*)) (cons 'begin (cons gN1132@e gN1133@e*)) gN112a@k)) gN112f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN112d@t))) (gNd62@syntax-dispatch gN112d@t '(each-any any . each-any)))) gN1129@cls))) ((lambda (gN1113@t) ((lambda (gN1115@ls/false) (if gN1115@ls/false (apply (lambda (gN1117@expr) (gNd18@bless (cons 'let (cons (list (list 't gN1117@expr)) '((if #f #f)))))) gN1115@ls/false) ((lambda (gN1119@t) ((lambda (gN111b@ls/false) (if gN111b@ls/false (apply (lambda (gN111d@expr gN111e@cls gN111f@cls*) (gNd18@bless (list 'let (list (list 't gN111d@expr)) ((letrec ((gN1123@f (lambda (gN1125@cls gN1126@cls*) (if (null? gN1126@cls*) (gN1110@build-last gN1125@cls) (gN1112@build-one gN1125@cls (gN1123@f (car gN1126@cls*) (cdr gN1126@cls*))))))) gN1123@f) gN111e@cls gN111f@cls*)))) gN111b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1119@t))) (gNd62@syntax-dispatch gN1119@t '(_ any any . each-any)))) gN1113@t))) (gNd62@syntax-dispatch gN1113@t '(_ any)))) gN110d@e))) '#f '#f))) (set! gNd12@quote-transformer (lambda (gN1145@e gN1146@r gN1147@mr) ((lambda (gN114b@t) ((lambda (gN114d@ls/false) (if gN114d@ls/false (apply (lambda (gN114f@datum) (list 'quote (gNb71@stx->datum gN114f@datum))) gN114d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN114b@t))) (gNd62@syntax-dispatch gN114b@t '(_ any)))) gN1145@e))) (set! gNd14@case-lambda-transformer (lambda (gN1151@e gN1152@r gN1153@mr) ((lambda (gN1157@t) ((lambda (gN1159@ls/false) (if gN1159@ls/false (apply (lambda (gN115b@fmls* gN115c@b* gN115d@b**) (call-with-values (lambda () (gNd8c@chi-lambda-clause* gN1151@e gN115b@fmls* (map cons gN115c@b* gN115d@b**) gN1152@r gN1153@mr)) (lambda (gN1165@gN1162 gN1166@gN1164) ((lambda (gN1169@body* gN116a@fmls*) (gNac2@gNa03@build-case-lambda '#f gN116a@fmls* gN1169@body*)) gN1166@gN1164 gN1165@gN1162)))) gN1159@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1157@t))) (gNd62@syntax-dispatch gN1157@t '(_ . #(each (any any . each-any)))))) gN1151@e))) (set! gNd16@lambda-transformer (lambda (gN116d@e gN116e@r gN116f@mr) ((lambda (gN1173@t) ((lambda (gN1175@ls/false) (if gN1175@ls/false (apply (lambda (gN1177@fmls gN1178@b gN1179@b*) (call-with-values (lambda () (gNd8a@chi-lambda-clause gN116d@e gN1177@fmls (cons gN1178@b gN1179@b*) gN116e@r gN116f@mr)) (lambda (gN1181@gN117e gN1182@gN1180) ((lambda (gN1185@body gN1186@fmls) (gNac1@gNa01@build-lambda '#f gN1186@fmls gN1185@body)) gN1182@gN1180 gN1181@gN117e)))) gN1175@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1173@t))) (gNd62@syntax-dispatch gN1173@t '(_ any any . each-any)))) gN116d@e))) (set! gNd18@bless (lambda (gN1189@x) (gNb45@mkstx ((letrec ((gN118b@f (lambda (gN118d@x) (if (gNb29@stx? gN118d@x) gN118d@x (if (pair? gN118d@x) (cons (gN118b@f (car gN118d@x)) (gN118b@f (cdr gN118d@x))) (if (symbol? gN118d@x) (gNcec@scheme-stx gN118d@x) (if (vector? gN118d@x) (vector-map gN118b@f gN118d@x) gN118d@x))))))) gN118b@f) gN1189@x) '() '() '()))) (set! gNd1a@with-syntax-macro (lambda (gN118f@e) ((lambda (gN1191@t) ((lambda (gN1193@ls/false) (if gN1193@ls/false (apply (lambda (gN1195@pat* gN1196@expr* gN1197@b gN1198@b*) ((lambda (gN119d@idn*) (begin (gNd88@verify-formals (map car gN119d@idn*) gN118f@e) ((lambda (gN119f@t*) (gNd18@bless (list 'let (map list gN119f@t* gN1196@expr*) ((letrec ((gN11a1@f (lambda (gN11a3@pat* gN11a4@t*) (if (null? gN11a3@pat*) (cons 'begin (cons '#f (cons gN1197@b gN1198@b*))) (list 'syntax-case (car gN11a4@t*) '() (list (car gN11a3@pat*) (gN11a1@f (cdr gN11a3@pat*) (cdr gN11a4@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car gN11a3@pat*)) (car gN11a4@t*)))))))) gN11a1@f) gN1195@pat* gN119f@t*)))) (gNe30@generate-temporaries gN1196@expr*)))) ((letrec ((gN11a7@f (lambda (gN11a9@pat*) (if (null? gN11a9@pat*) '() (call-with-values (lambda () (gNd60@convert-pattern (car gN11a9@pat*) '())) (lambda (gN11af@gN11ac gN11b0@gN11ae) ((lambda (gN11b3@idn* gN11b4@pat) (append gN11b3@idn* (gN11a7@f (cdr gN11a9@pat*)))) gN11b0@gN11ae gN11af@gN11ac))))))) gN11a7@f) gN1195@pat*))) gN1193@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1191@t))) (gNd62@syntax-dispatch gN1191@t '(_ #(each (any any)) any . each-any)))) gN118f@e))) (set! gNd1c@invalid-fmls-error (lambda (gN11b7@stx gN11b8@fmls) ((lambda (gN11bb@t) ((lambda (gN11bd@ls/false) (if gN11bd@ls/false (apply (lambda (gN11bf@id* gN11c0@last) ((letrec ((gN11c3@f (lambda (gN11c5@id*) (if (null? gN11c5@id*) (values) (if (not (gNb5d@id? (car gN11c5@id*))) (gNe42@syntax-violation '#f '"not an identifier" gN11b7@stx (car gN11c5@id*)) (begin (gN11c3@f (cdr gN11c5@id*)) (if (gNb69@bound-id-member? (car gN11c5@id*) (cdr gN11c5@id*)) (gNe42@syntax-violation '#f '"duplicate binding" gN11b7@stx (car gN11c5@id*)) (void)))))))) gN11c3@f) (if (gNb5d@id? gN11c0@last) (cons gN11c0@last gN11bf@id*) (if (gNb53@syntax-null? gN11c0@last) gN11bf@id* (gNe42@syntax-violation '#f '"not an identifier" gN11b7@stx gN11c0@last))))) gN11bd@ls/false) ((lambda (gN11c7@t) ((lambda (gN11c9@ls/false) (if gN11c9@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"malformed binding form" gN11b7@stx gN11b8@fmls)) gN11c9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN11c7@t))) (gNd62@syntax-dispatch gN11c7@t '_))) gN11bb@t))) (gNd62@syntax-dispatch gN11bb@t '#(each+ any () any)))) gN11b8@fmls))) (set! gNd1e@let-macro (lambda (gN11cb@stx) ((lambda (gN11cd@t) ((lambda (gN11cf@ls/false) (if gN11cf@ls/false (apply (lambda (gN11d1@lhs* gN11d2@rhs* gN11d3@b gN11d4@b*) (if (gNb65@valid-bound-ids? gN11d1@lhs*) (gNd18@bless (cons (cons 'lambda (cons gN11d1@lhs* (cons gN11d3@b gN11d4@b*))) gN11d2@rhs*)) (gNd1c@invalid-fmls-error gN11cb@stx gN11d1@lhs*))) gN11cf@ls/false) ((lambda (gN11d9@t) ((lambda (gN11db@ls/false) (if (and gN11db@ls/false (apply (lambda (gN11dd@f gN11de@lhs* gN11df@rhs* gN11e0@b gN11e1@b*) (gNb5d@id? gN11dd@f)) gN11db@ls/false)) (apply (lambda (gN11e7@f gN11e8@lhs* gN11e9@rhs* gN11ea@b gN11eb@b*) (if (gNb65@valid-bound-ids? gN11e8@lhs*) (gNd18@bless (cons (list 'letrec (list (list gN11e7@f (cons 'lambda (cons gN11e8@lhs* (cons gN11ea@b gN11eb@b*))))) gN11e7@f) gN11e9@rhs*)) (gNd1c@invalid-fmls-error gN11cb@stx gN11e8@lhs*))) gN11db@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN11d9@t))) (gNd62@syntax-dispatch gN11d9@t '(_ any #(each (any any)) any . each-any)))) gN11cd@t))) (gNd62@syntax-dispatch gN11cd@t '(_ #(each (any any)) any . each-any)))) gN11cb@stx))) (set! gNd20@let-values-macro (lambda (gN11f1@stx) ((lambda (gN11f4@rename gN11f6@rename*) (begin (set! gN11f4@rename (lambda (gN1259@x gN125a@old* gN125b@new*) (begin (if (not (gNb5d@id? gN1259@x)) (gNe42@syntax-violation '#f '"not an indentifier" gN11f1@stx gN1259@x) (void)) (if (gNb69@bound-id-member? gN1259@x gN125a@old*) (gNe42@syntax-violation '#f '"duplicate binding" gN11f1@stx gN1259@x) (void)) ((lambda (gN125f@y) (values gN125f@y (cons gN1259@x gN125a@old*) (cons gN125f@y gN125b@new*))) (gensym (gNe48@syntax->datum gN1259@x)))))) (set! gN11f6@rename* (lambda (gN1247@x* gN1248@old* gN1249@new*) (if (null? gN1247@x*) (values '() gN1248@old* gN1249@new*) (call-with-values (lambda () (gN11f4@rename (car gN1247@x*) gN1248@old* gN1249@new*)) (lambda (gN124d@x gN124e@old* gN124f@new*) (call-with-values (lambda () (gN11f6@rename* (cdr gN1247@x*) gN124e@old* gN124f@new*)) (lambda (gN1253@x* gN1254@old* gN1255@new*) (values (cons gN124d@x gN1253@x*) gN1254@old* gN1255@new*)))))))) ((lambda (gN11f7@t) ((lambda (gN11f9@ls/false) (if gN11f9@ls/false (apply (lambda (gN11fb@b gN11fc@b*) (cons* (gNd18@bless 'let) '() gN11fb@b gN11fc@b*)) gN11f9@ls/false) ((lambda (gN11ff@t) ((lambda (gN1201@ls/false) (if gN1201@ls/false (apply (lambda (gN1203@lhs* gN1204@rhs* gN1205@b gN1206@b*) (gNd18@bless ((letrec ((gN120b@f (lambda (gN120d@lhs* gN120e@rhs* gN120f@old* gN1210@new*) (if (null? gN120d@lhs*) (cons 'let (cons (map list gN120f@old* gN1210@new*) (cons gN1205@b gN1206@b*))) ((lambda (gN1215@t) ((lambda (gN1217@ls/false) (if gN1217@ls/false (apply (lambda (gN1219@x*) (call-with-values (lambda () (gN11f6@rename* gN1219@x* gN120f@old* gN1210@new*)) (lambda (gN1221@gN121c gN1222@gN121e gN1223@gN1220) ((lambda (gN1227@new* gN1228@old* gN1229@y*) (list 'call-with-values (list 'lambda '() (car gN120e@rhs*)) (list 'lambda gN1229@y* (gN120b@f (cdr gN120d@lhs*) (cdr gN120e@rhs*) gN1228@old* gN1227@new*)))) gN1223@gN1220 gN1222@gN121e gN1221@gN121c)))) gN1217@ls/false) ((lambda (gN122d@t) ((lambda (gN122f@ls/false) (if gN122f@ls/false (apply (lambda (gN1231@x* gN1232@x) (call-with-values (lambda () (gN11f4@rename gN1232@x gN120f@old* gN1210@new*)) (lambda (gN1235@y gN1236@old* gN1237@new*) (call-with-values (lambda () (gN11f6@rename* gN1231@x* gN1236@old* gN1237@new*)) (lambda (gN123b@y* gN123c@old* gN123d@new*) (list 'call-with-values (list 'lambda '() (car gN120e@rhs*)) (list 'lambda (append gN123b@y* gN1235@y) (gN120b@f (cdr gN120d@lhs*) (cdr gN120e@rhs*) gN123c@old* gN123d@new*)))))))) gN122f@ls/false) ((lambda (gN1241@t) ((lambda (gN1243@ls/false) (if gN1243@ls/false (apply (lambda (gN1245@others) (gNe42@syntax-violation '#f '"malformed bindings" gN11f1@stx gN1245@others)) gN1243@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1241@t))) (gNd62@syntax-dispatch gN1241@t 'any))) gN122d@t))) (gNd62@syntax-dispatch gN122d@t '#(each+ any () any)))) gN1215@t))) (gNd62@syntax-dispatch gN1215@t 'each-any))) (car gN120d@lhs*)))))) gN120b@f) gN1203@lhs* gN1204@rhs* '() '()))) gN1201@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN11ff@t))) (gNd62@syntax-dispatch gN11ff@t '(_ #(each (any any)) any . each-any)))) gN11f7@t))) (gNd62@syntax-dispatch gN11f7@t '(_ () any . each-any)))) gN11f1@stx))) '#f '#f))) (set! gNd22@let*-values-macro (lambda (gN1261@stx) ((lambda (gN1264@check) (begin (set! gN1264@check (lambda (gN1293@x*) (if (not (null? gN1293@x*)) ((lambda (gN1295@x) (begin (if (not (gNb5d@id? gN1295@x)) (gNe42@syntax-violation '#f '"not an identifier" gN1261@stx gN1295@x) (void)) (gN1264@check (cdr gN1293@x*)) (if (gNb69@bound-id-member? gN1295@x (cdr gN1293@x*)) (gNe42@syntax-violation '#f '"duplicate identifier" gN1261@stx gN1295@x) (void)))) (car gN1293@x*)) (void)))) ((lambda (gN1265@t) ((lambda (gN1267@ls/false) (if gN1267@ls/false (apply (lambda (gN1269@b gN126a@b*) (cons* (gNd18@bless 'let) '() gN1269@b gN126a@b*)) gN1267@ls/false) ((lambda (gN126d@t) ((lambda (gN126f@ls/false) (if gN126f@ls/false (apply (lambda (gN1271@lhs* gN1272@rhs* gN1273@b gN1274@b*) (gNd18@bless ((letrec ((gN1279@f (lambda (gN127b@lhs* gN127c@rhs*) (if (null? gN127b@lhs*) (cons 'begin (cons gN1273@b gN1274@b*)) ((lambda (gN127f@t) ((lambda (gN1281@ls/false) (if gN1281@ls/false (apply (lambda (gN1283@x*) (begin (gN1264@check gN1283@x*) (list 'call-with-values (list 'lambda '() (car gN127c@rhs*)) (list 'lambda gN1283@x* (gN1279@f (cdr gN127b@lhs*) (cdr gN127c@rhs*)))))) gN1281@ls/false) ((lambda (gN1285@t) ((lambda (gN1287@ls/false) (if gN1287@ls/false (apply (lambda (gN1289@x* gN128a@x) (begin (gN1264@check (cons gN128a@x gN1289@x*)) (list 'call-with-values (list 'lambda '() (car gN127c@rhs*)) (list 'lambda (append gN1289@x* gN128a@x) (gN1279@f (cdr gN127b@lhs*) (cdr gN127c@rhs*)))))) gN1287@ls/false) ((lambda (gN128d@t) ((lambda (gN128f@ls/false) (if gN128f@ls/false (apply (lambda (gN1291@others) (gNe42@syntax-violation '#f '"malformed bindings" gN1261@stx gN1291@others)) gN128f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN128d@t))) (gNd62@syntax-dispatch gN128d@t 'any))) gN1285@t))) (gNd62@syntax-dispatch gN1285@t '#(each+ any () any)))) gN127f@t))) (gNd62@syntax-dispatch gN127f@t 'each-any))) (car gN127b@lhs*)))))) gN1279@f) gN1271@lhs* gN1272@rhs*))) gN126f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN126d@t))) (gNd62@syntax-dispatch gN126d@t '(_ #(each (any any)) any . each-any)))) gN1265@t))) (gNd62@syntax-dispatch gN1265@t '(_ () any . each-any)))) gN1261@stx))) '#f))) (set! gNd24@trace-lambda-macro (lambda (gN1297@stx) ((lambda (gN1299@t) ((lambda (gN129b@ls/false) (if gN129b@ls/false (apply (lambda (gN129d@who gN129e@fmls gN129f@b gN12a0@b*) (if (gNb65@valid-bound-ids? gN129e@fmls) (gNd18@bless (list 'make-traced-procedure (list 'quote gN129d@who) (cons 'lambda (cons gN129e@fmls (cons gN129f@b gN12a0@b*))))) (gNd1c@invalid-fmls-error gN1297@stx gN129e@fmls))) gN129b@ls/false) ((lambda (gN12a5@t) ((lambda (gN12a7@ls/false) (if gN12a7@ls/false (apply (lambda (gN12a9@who gN12aa@fmls gN12ab@last gN12ac@b gN12ad@b*) (if (gNb65@valid-bound-ids? (cons gN12ab@last gN12aa@fmls)) (gNd18@bless (list 'make-traced-procedure (list 'quote gN12a9@who) (cons 'lambda (cons (append gN12aa@fmls gN12ab@last) (cons gN12ac@b gN12ad@b*))))) (gNd1c@invalid-fmls-error gN1297@stx (append gN12aa@fmls gN12ab@last)))) gN12a7@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN12a5@t))) (gNd62@syntax-dispatch gN12a5@t '(_ any #(each+ any () any) any . each-any)))) gN1299@t))) (gNd62@syntax-dispatch gN1299@t '(_ any each-any any . each-any)))) gN1297@stx))) (set! gNd26@trace-define-macro (lambda (gN12b3@stx) ((lambda (gN12b5@t) ((lambda (gN12b7@ls/false) (if gN12b7@ls/false (apply (lambda (gN12b9@who gN12ba@fmls gN12bb@b gN12bc@b*) (if (gNb65@valid-bound-ids? gN12ba@fmls) (gNd18@bless (list 'define gN12b9@who (list 'make-traced-procedure (list 'quote gN12b9@who) (cons 'lambda (cons gN12ba@fmls (cons gN12bb@b gN12bc@b*)))))) (gNd1c@invalid-fmls-error gN12b3@stx gN12ba@fmls))) gN12b7@ls/false) ((lambda (gN12c1@t) ((lambda (gN12c3@ls/false) (if gN12c3@ls/false (apply (lambda (gN12c5@who gN12c6@fmls gN12c7@last gN12c8@b gN12c9@b*) (if (gNb65@valid-bound-ids? (cons gN12c7@last gN12c6@fmls)) (gNd18@bless (list 'define gN12c5@who (list 'make-traced-procedure (list 'quote gN12c5@who) (cons 'lambda (cons (append gN12c6@fmls gN12c7@last) (cons gN12c8@b gN12c9@b*)))))) (gNd1c@invalid-fmls-error gN12b3@stx (append gN12c6@fmls gN12c7@last)))) gN12c3@ls/false) ((lambda (gN12cf@t) ((lambda (gN12d1@ls/false) (if gN12d1@ls/false (apply (lambda (gN12d3@who gN12d4@expr) (if (gNb5d@id? gN12d3@who) (gNd18@bless (list 'define gN12d3@who (list 'let (list (list 'v gN12d4@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote gN12d3@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (gNe42@syntax-violation '#f '"invalid name" gN12b3@stx))) gN12d1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN12cf@t))) (gNd62@syntax-dispatch gN12cf@t '(_ any any)))) gN12c1@t))) (gNd62@syntax-dispatch gN12c1@t '(_ (any . #(each+ any () any)) any . each-any)))) gN12b5@t))) (gNd62@syntax-dispatch gN12b5@t '(_ (any . each-any) any . each-any)))) gN12b3@stx))) (set! gNd28@trace-define-syntax-macro (lambda (gN12d7@stx) ((lambda (gN12d9@t) ((lambda (gN12db@ls/false) (if gN12db@ls/false (apply (lambda (gN12dd@who gN12de@expr) (if (gNb5d@id? gN12dd@who) (gNd18@bless (list 'define-syntax gN12dd@who (list 'make-traced-macro (list 'quote gN12dd@who) gN12de@expr))) (gNe42@syntax-violation '#f '"invalid name" gN12d7@stx))) gN12db@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN12d9@t))) (gNd62@syntax-dispatch gN12d9@t '(_ any any)))) gN12d7@stx))) (set! gNd2a@trace-let/rec-syntax (lambda (gN12e1@who) (lambda (gN12e3@stx) ((lambda (gN12e5@t) ((lambda (gN12e7@ls/false) (if gN12e7@ls/false (apply (lambda (gN12e9@lhs* gN12ea@rhs* gN12eb@b gN12ec@b*) (if (gNb65@valid-bound-ids? gN12e9@lhs*) ((lambda (gN12f1@rhs*) (gNd18@bless (cons gN12e1@who (cons (map list gN12e9@lhs* gN12f1@rhs*) (cons gN12eb@b gN12ec@b*))))) (map (lambda (gN12f3@lhs gN12f4@rhs) (list 'make-traced-macro (list 'quote gN12f3@lhs) gN12f4@rhs)) gN12e9@lhs* gN12ea@rhs*)) (gNd1c@invalid-fmls-error gN12e3@stx gN12e9@lhs*))) gN12e7@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN12e5@t))) (gNd62@syntax-dispatch gN12e5@t '(_ #(each (any any)) any . each-any)))) gN12e3@stx)))) (set! gNd2c@trace-let-syntax-macro (gNd2a@trace-let/rec-syntax 'let-syntax)) (set! gNd2e@trace-letrec-syntax-macro (gNd2a@trace-let/rec-syntax 'letrec-syntax)) (set! gNd30@guard-macro (lambda (gN12f7@x) ((lambda (gN12fa@gen-clauses) (begin (set! gN12fa@gen-clauses (lambda (gN1311@con gN1312@outerk gN1313@clause*) ((lambda (gN1318@f gN131a@f*) (begin (set! gN1318@f (lambda (gN1351@x gN1352@k) ((lambda (gN1355@t) ((lambda (gN1357@ls/false) (if gN1357@ls/false (apply (lambda (gN1359@e gN135a@p) ((lambda (gN135d@t) (list 'let (list (list gN135d@t gN1359@e)) (list 'if gN135d@t (list gN135a@p gN135d@t) gN1352@k))) (gensym))) gN1357@ls/false) ((lambda (gN135f@t) ((lambda (gN1361@ls/false) (if gN1361@ls/false (apply (lambda (gN1363@e) ((lambda (gN1365@t) (list 'let (list (list gN1365@t gN1363@e)) (list 'if gN1365@t gN1365@t gN1352@k))) (gensym))) gN1361@ls/false) ((lambda (gN1367@t) ((lambda (gN1369@ls/false) (if gN1369@ls/false (apply (lambda (gN136b@e gN136c@v gN136d@v*) (list 'if gN136b@e (cons 'begin (cons gN136c@v gN136d@v*)) gN1352@k)) gN1369@ls/false) ((lambda (gN1371@t) ((lambda (gN1373@ls/false) (if gN1373@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid guard clause" gN1351@x)) gN1373@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1371@t))) (gNd62@syntax-dispatch gN1371@t '_))) gN1367@t))) (gNd62@syntax-dispatch gN1367@t '(any any . each-any)))) gN135f@t))) (gNd62@syntax-dispatch gN135f@t '(any)))) gN1355@t))) (gNd62@syntax-dispatch gN1355@t '(any #(scheme-id =>) any)))) gN1351@x))) (set! gN131a@f* (lambda (gN1327@x*) ((lambda (gN1329@t) ((lambda (gN132b@ls/false) (if gN132b@ls/false (apply (lambda () ((lambda (gN132d@g) (values (list gN132d@g (list 'lambda '() (list 'raise-continuable gN1311@con))) gN132d@g)) (gensym))) gN132b@ls/false) ((lambda (gN132f@t) ((lambda (gN1331@ls/false) (if gN1331@ls/false (apply (lambda (gN1333@e gN1334@e*) (values (cons 'begin (cons gN1333@e gN1334@e*)) '#f)) gN1331@ls/false) ((lambda (gN1337@t) ((lambda (gN1339@ls/false) (if gN1339@ls/false (apply (lambda (gN133b@cls gN133c@cls*) (call-with-values (lambda () (gN131a@f* gN133c@cls*)) (lambda (gN1343@gN1340 gN1344@gN1342) ((lambda (gN1347@g gN1348@e) (values (gN1318@f gN133b@cls gN1348@e) gN1347@g)) gN1344@gN1342 gN1343@gN1340)))) gN1339@ls/false) ((lambda (gN134b@t) ((lambda (gN134d@ls/false) (if gN134d@ls/false (apply (lambda (gN134f@others) (gNe42@syntax-violation '#f '"invalid guard clause" gN134f@others)) gN134d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN134b@t))) (gNd62@syntax-dispatch gN134b@t 'any))) gN1337@t))) (gNd62@syntax-dispatch gN1337@t '(any . any)))) gN132f@t))) (gNd62@syntax-dispatch gN132f@t '((#(scheme-id else) any . each-any))))) gN1329@t))) (gNd62@syntax-dispatch gN1329@t '()))) gN1327@x*))) (call-with-values (lambda () (gN131a@f* gN1313@clause*)) (lambda (gN131f@gN131c gN1320@gN131e) ((lambda (gN1323@raisek gN1324@code) (if gN1323@raisek (list (list 'call/cc (list 'lambda (list gN1323@raisek) (list gN1312@outerk (list 'lambda '() gN1324@code))))) (list gN1312@outerk (list 'lambda '() gN1324@code)))) gN1320@gN131e gN131f@gN131c))))) '#f '#f))) ((lambda (gN12fb@t) ((lambda (gN12fd@ls/false) (if (and gN12fd@ls/false (apply (lambda (gN12ff@con gN1300@clause* gN1301@b gN1302@b*) (gNb5d@id? gN12ff@con)) gN12fd@ls/false)) (apply (lambda (gN1307@con gN1308@clause* gN1309@b gN130a@b*) ((lambda (gN130f@outerk) (gNd18@bless (list (list 'call/cc (list 'lambda (list gN130f@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list gN1307@con) (gN12fa@gen-clauses gN1307@con gN130f@outerk gN1308@clause*)) (cons 'lambda (cons '() (cons gN1309@b gN130a@b*)))))))))) (gensym))) gN12fd@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN12fb@t))) (gNd62@syntax-dispatch gN12fb@t '(_ (any . each-any) any . each-any)))) gN12f7@x))) '#f))) (set! gNd32@define-enumeration-macro (lambda (gN1375@stx) ((lambda (gN1378@set? gN137a@remove-dups) (begin (set! gN1378@set? (lambda (gN1391@x) (or (null? gN1391@x) (and (not (memq (car gN1391@x) (cdr gN1391@x))) (gN1378@set? (cdr gN1391@x)))))) (set! gN137a@remove-dups (lambda (gN138f@ls) (if (null? gN138f@ls) '() (cons (car gN138f@ls) (gN137a@remove-dups (remq (car gN138f@ls) (cdr gN138f@ls))))))) ((lambda (gN137b@t) ((lambda (gN137d@ls/false) (if (and gN137d@ls/false (apply (lambda (gN137f@name gN1380@id* gN1381@maker) (and (gNb5d@id? gN137f@name) (gNb5d@id? gN1381@maker) (for-all gNb5d@id? gN1380@id*))) gN137d@ls/false)) (apply (lambda (gN1385@name gN1386@id* gN1387@maker) ((lambda (gN138b@name* gN138c@mk) (gNd18@bless (list 'begin (list 'define gN138c@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote gN138b@name*)))) (list 'define-syntax gN1385@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote gN138b@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote gN1385@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax gN1387@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote gN1387@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote gN138b@name*)) (cons 'syntax-violation (cons (list 'quote gN1387@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons gN138c@mk '('(n* ...)))))))))))) (gN137a@remove-dups (gNe48@syntax->datum gN1386@id*)) (gensym))) gN137d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN137b@t))) (gNd62@syntax-dispatch gN137b@t '(_ any each-any any)))) gN1375@stx))) '#f '#f))) (set! gNd34@time-macro (lambda (gN1393@stx) ((lambda (gN1395@t) ((lambda (gN1397@ls/false) (if gN1397@ls/false (apply (lambda (gN1399@expr) (gNd18@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() gN1399@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) gN1397@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1395@t))) (gNd62@syntax-dispatch gN1395@t '(_ any)))) gN1393@stx))) (set! gNd36@delay-macro (lambda (gN139b@stx) ((lambda (gN139d@t) ((lambda (gN139f@ls/false) (if gN139f@ls/false (apply (lambda (gN13a1@expr) (gNd18@bless (list 'make-promise (list 'lambda '() gN13a1@expr)))) gN139f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN139d@t))) (gNd62@syntax-dispatch gN139d@t '(_ any)))) gN139b@stx))) (set! gNd38@assert-macro (lambda (gN13a3@stx) ((lambda (gN13a5@t) ((lambda (gN13a7@ls/false) (if gN13a7@ls/false (apply (lambda (gN13a9@expr) ((lambda (gN13ab@pos) (gNd18@bless (list 'unless gN13a9@expr (list 'assertion-error (list 'quote gN13a9@expr) (list 'quote gN13ab@pos))))) (or (gNe3a@expression-position gN13a3@stx) (gNe3a@expression-position gN13a9@expr)))) gN13a7@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN13a5@t))) (gNd62@syntax-dispatch gN13a5@t '(_ any)))) gN13a3@stx))) (set! gNd3a@endianness-macro (lambda (gN13ad@stx) ((lambda (gN13af@t) ((lambda (gN13b1@ls/false) (if gN13b1@ls/false (apply (lambda (gN13b3@e) ((lambda (gN13b5@t) (if (memv gN13b5@t '(little)) (gNd18@bless ''little) (if (memv gN13b5@t '(big)) (gNd18@bless ''big) (gNe42@syntax-violation '#f '"endianness must be big or little" gN13ad@stx)))) (gNe48@syntax->datum gN13b3@e))) gN13b1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN13af@t))) (gNd62@syntax-dispatch gN13af@t '(_ any)))) gN13ad@stx))) (set! gNd3c@identifier-syntax-macro (lambda (gN13b7@stx) ((lambda (gN13b9@t) ((lambda (gN13bb@ls/false) (if gN13bb@ls/false (apply (lambda (gN13bd@expr) (gNd18@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax gN13bd@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax gN13bd@expr) '((syntax (e* ...)))))))))) gN13bb@ls/false) ((lambda (gN13bf@t) ((lambda (gN13c1@ls/false) (if (and gN13c1@ls/false (apply (lambda (gN13c3@id1 gN13c4@expr1 gN13c5@id2 gN13c6@expr2 gN13c7@expr3) (and (gNb5d@id? gN13c3@id1) (gNb5d@id? gN13c5@id2) (gNb5d@id? gN13c6@expr2))) gN13c1@ls/false)) (apply (lambda (gN13cd@id1 gN13ce@expr1 gN13cf@id2 gN13d0@expr2 gN13d1@expr3) (gNd18@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax gN13ce@expr1)) (list (list 'set! 'id gN13d0@expr2) (list 'syntax gN13d1@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons gN13ce@expr1 '(e* ...))))))))) gN13c1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN13bf@t))) (gNd62@syntax-dispatch gN13bf@t '(_ (any any) ((#(scheme-id set!) any any) any))))) gN13b9@t))) (gNd62@syntax-dispatch gN13b9@t '(_ any)))) gN13b7@stx))) (set! gNd3e@do-macro (lambda (gN13d7@stx) ((lambda (gN13da@bind) (begin (set! gN13da@bind (lambda (gN13f1@x) ((lambda (gN13f3@t) ((lambda (gN13f5@ls/false) (if gN13f5@ls/false (apply (lambda (gN13f7@x gN13f8@init) (list gN13f7@x gN13f8@init gN13f7@x)) gN13f5@ls/false) ((lambda (gN13fb@t) ((lambda (gN13fd@ls/false) (if gN13fd@ls/false (apply (lambda (gN13ff@x gN1400@init gN1401@step) (list gN13ff@x gN1400@init gN1401@step)) gN13fd@ls/false) ((lambda (gN1405@t) ((lambda (gN1407@ls/false) (if gN1407@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid binding" gN13d7@stx)) gN1407@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1405@t))) (gNd62@syntax-dispatch gN1405@t '_))) gN13fb@t))) (gNd62@syntax-dispatch gN13fb@t '(any any any)))) gN13f3@t))) (gNd62@syntax-dispatch gN13f3@t '(any any)))) gN13f1@x))) ((lambda (gN13db@t) ((lambda (gN13dd@ls/false) (if gN13dd@ls/false (apply (lambda (gN13df@binding* gN13e0@test gN13e1@expr* gN13e2@command*) ((lambda (gN13e7@t) ((lambda (gN13e9@ls/false) (if gN13e9@ls/false (apply (lambda (gN13eb@x* gN13ec@init* gN13ed@step*) (if (gNb65@valid-bound-ids? gN13eb@x*) (gNd18@bless (list 'letrec (list (list 'loop (list 'lambda gN13eb@x* (list 'if gN13e0@test (cons 'begin (cons '(if #f #f) gN13e1@expr*)) (cons 'begin (append gN13e2@command* (list (cons 'loop gN13ed@step*)))))))) (cons 'loop gN13ec@init*))) (gNe42@syntax-violation '#f '"invalid bindings" gN13d7@stx))) gN13e9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN13e7@t))) (gNd62@syntax-dispatch gN13e7@t '#(each (any any any))))) (map gN13da@bind gN13df@binding*))) gN13dd@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN13db@t))) (gNd62@syntax-dispatch gN13db@t '(_ each-any (any . each-any) . each-any)))) gN13d7@stx))) '#f))) (set! gNd40@let*-macro (lambda (gN1409@stx) ((lambda (gN140b@t) ((lambda (gN140d@ls/false) (if (and gN140d@ls/false (apply (lambda (gN140f@lhs* gN1410@rhs* gN1411@b gN1412@b*) (for-all gNb5d@id? gN140f@lhs*)) gN140d@ls/false)) (apply (lambda (gN1417@lhs* gN1418@rhs* gN1419@b gN141a@b*) (gNd18@bless ((letrec ((gN141f@f (lambda (gN1421@x*) (if (null? gN1421@x*) (cons 'let (cons '() (cons gN1419@b gN141a@b*))) (list 'let (list (car gN1421@x*)) (gN141f@f (cdr gN1421@x*))))))) gN141f@f) (map list gN1417@lhs* gN1418@rhs*)))) gN140d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN140b@t))) (gNd62@syntax-dispatch gN140b@t '(_ #(each (any any)) any . each-any)))) gN1409@stx))) (set! gNd42@or-macro (lambda (gN1423@stx) ((lambda (gN1425@t) ((lambda (gN1427@ls/false) (if gN1427@ls/false (apply (lambda () '#f) gN1427@ls/false) ((lambda (gN1429@t) ((lambda (gN142b@ls/false) (if gN142b@ls/false (apply (lambda (gN142d@e gN142e@e*) (gNd18@bless ((letrec ((gN1431@f (lambda (gN1433@e gN1434@e*) (if (null? gN1434@e*) (list 'begin '#f gN1433@e) (list 'let (list (list 't gN1433@e)) (list 'if 't 't (gN1431@f (car gN1434@e*) (cdr gN1434@e*)))))))) gN1431@f) gN142d@e gN142e@e*))) gN142b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1429@t))) (gNd62@syntax-dispatch gN1429@t '(_ any . each-any)))) gN1425@t))) (gNd62@syntax-dispatch gN1425@t '(_)))) gN1423@stx))) (set! gNd44@and-macro (lambda (gN1437@stx) ((lambda (gN1439@t) ((lambda (gN143b@ls/false) (if gN143b@ls/false (apply (lambda () '#t) gN143b@ls/false) ((lambda (gN143d@t) ((lambda (gN143f@ls/false) (if gN143f@ls/false (apply (lambda (gN1441@e gN1442@e*) (gNd18@bless ((letrec ((gN1445@f (lambda (gN1447@e gN1448@e*) (if (null? gN1448@e*) (list 'begin '#f gN1447@e) (cons 'if (cons gN1447@e (cons (gN1445@f (car gN1448@e*) (cdr gN1448@e*)) '(#f)))))))) gN1445@f) gN1441@e gN1442@e*))) gN143f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN143d@t))) (gNd62@syntax-dispatch gN143d@t '(_ any . each-any)))) gN1439@t))) (gNd62@syntax-dispatch gN1439@t '(_)))) gN1437@stx))) (set! gNd46@cond-macro (lambda (gN144b@stx) ((lambda (gN144d@t) ((lambda (gN144f@ls/false) (if gN144f@ls/false (apply (lambda (gN1451@cls gN1452@cls*) (gNd18@bless ((letrec ((gN1455@f (lambda (gN1457@cls gN1458@cls*) (if (null? gN1458@cls*) ((lambda (gN145b@t) ((lambda (gN145d@ls/false) (if gN145d@ls/false (apply (lambda (gN145f@e gN1460@e*) (cons 'begin (cons gN145f@e gN1460@e*))) gN145d@ls/false) ((lambda (gN1463@t) ((lambda (gN1465@ls/false) (if gN1465@ls/false (apply (lambda (gN1467@e gN1468@p) (list 'let (list (list 't gN1467@e)) (list 'if 't (cons gN1468@p '(t))))) gN1465@ls/false) ((lambda (gN146b@t) ((lambda (gN146d@ls/false) (if gN146d@ls/false (apply (lambda (gN146f@e) (cons 'or (cons gN146f@e '((if #f #f))))) gN146d@ls/false) ((lambda (gN1471@t) ((lambda (gN1473@ls/false) (if gN1473@ls/false (apply (lambda (gN1475@e gN1476@e*) (list 'if gN1475@e (cons 'begin gN1476@e*))) gN1473@ls/false) ((lambda (gN1479@t) ((lambda (gN147b@ls/false) (if gN147b@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid last clause" gN144b@stx)) gN147b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1479@t))) (gNd62@syntax-dispatch gN1479@t '_))) gN1471@t))) (gNd62@syntax-dispatch gN1471@t '(any . each-any)))) gN146b@t))) (gNd62@syntax-dispatch gN146b@t '(any)))) gN1463@t))) (gNd62@syntax-dispatch gN1463@t '(any #(scheme-id =>) any)))) gN145b@t))) (gNd62@syntax-dispatch gN145b@t '(#(scheme-id else) any . each-any)))) gN1457@cls) ((lambda (gN147d@t) ((lambda (gN147f@ls/false) (if gN147f@ls/false (apply (lambda (gN1481@e gN1482@e*) (gNe42@syntax-violation '#f '"incorrect position of keyword else" gN144b@stx)) gN147f@ls/false) ((lambda (gN1485@t) ((lambda (gN1487@ls/false) (if gN1487@ls/false (apply (lambda (gN1489@e gN148a@p) (list 'let (list (list 't gN1489@e)) (list 'if 't (cons gN148a@p '(t)) (gN1455@f (car gN1458@cls*) (cdr gN1458@cls*))))) gN1487@ls/false) ((lambda (gN148d@t) ((lambda (gN148f@ls/false) (if gN148f@ls/false (apply (lambda (gN1491@e) (list 'or gN1491@e (gN1455@f (car gN1458@cls*) (cdr gN1458@cls*)))) gN148f@ls/false) ((lambda (gN1493@t) ((lambda (gN1495@ls/false) (if gN1495@ls/false (apply (lambda (gN1497@e gN1498@e*) (list 'if gN1497@e (cons 'begin gN1498@e*) (gN1455@f (car gN1458@cls*) (cdr gN1458@cls*)))) gN1495@ls/false) ((lambda (gN149b@t) ((lambda (gN149d@ls/false) (if gN149d@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid last clause" gN144b@stx)) gN149d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN149b@t))) (gNd62@syntax-dispatch gN149b@t '_))) gN1493@t))) (gNd62@syntax-dispatch gN1493@t '(any . each-any)))) gN148d@t))) (gNd62@syntax-dispatch gN148d@t '(any)))) gN1485@t))) (gNd62@syntax-dispatch gN1485@t '(any #(scheme-id =>) any)))) gN147d@t))) (gNd62@syntax-dispatch gN147d@t '(#(scheme-id else) any . each-any)))) gN1457@cls))))) gN1455@f) gN1451@cls gN1452@cls*))) gN144f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN144d@t))) (gNd62@syntax-dispatch gN144d@t '(_ any . each-any)))) gN144b@stx))) (set! gNd48@do-include (lambda (gN149f@stx gN14a0@id gN14a1@filename) ((lambda (gN14a5@filename) (begin (if (not (and (string? gN14a5@filename) (gNb5d@id? gN14a0@id))) (gNe42@syntax-violation '#f '"invalid syntax" gN149f@stx) (void)) (cons (gNd18@bless 'begin) (with-input-from-file gN14a5@filename (lambda () ((letrec ((gN14a7@f (lambda (gN14a9@ls) ((lambda (gN14ab@x) (if (eof-object? gN14ab@x) (reverse gN14a9@ls) (gN14a7@f (cons (gNb3d@datum->stx gN14a0@id gN14ab@x) gN14a9@ls)))) (gN6af@gN581@read-annotated))))) gN14a7@f) '())))))) (gNb71@stx->datum gN14a1@filename)))) (set! gNd4a@include-macro (lambda (gN14ad@e) ((lambda (gN14af@t) ((lambda (gN14b1@ls/false) (if gN14b1@ls/false (apply (lambda (gN14b3@id gN14b4@filename) (gNd48@do-include gN14ad@e gN14b3@id gN14b4@filename)) gN14b1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN14af@t))) (gNd62@syntax-dispatch gN14af@t '(any any)))) gN14ad@e))) (set! gNd4c@include-into-macro (lambda (gN14b7@e) ((lambda (gN14b9@t) ((lambda (gN14bb@ls/false) (if gN14bb@ls/false (apply (lambda (gN14bd@id gN14be@filename) (gNd48@do-include gN14b7@e gN14bd@id gN14be@filename)) gN14bb@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN14b9@t))) (gNd62@syntax-dispatch gN14b9@t '(_ any any)))) gN14b7@e))) (set! gNd4e@syntax-rules-macro (lambda (gN14c1@e) ((lambda (gN14c3@t) ((lambda (gN14c5@ls/false) (if gN14c5@ls/false (apply (lambda (gN14c7@lits gN14c8@pat* gN14c9@tmp*) (begin (gNd68@verify-literals gN14c7@lits gN14c1@e) (gNd18@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons gN14c7@lits (map (lambda (gN14cd@pat gN14ce@tmp) ((lambda (gN14d1@t) ((lambda (gN14d3@ls/false) (if gN14d3@ls/false (apply (lambda (gN14d5@rest) (list (cons 'g gN14d5@rest) (list 'syntax gN14ce@tmp))) gN14d3@ls/false) ((lambda (gN14d7@t) ((lambda (gN14d9@ls/false) (if gN14d9@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid syntax-rules pattern" gN14c1@e gN14cd@pat)) gN14d9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN14d7@t))) (gNd62@syntax-dispatch gN14d7@t '_))) gN14d1@t))) (gNd62@syntax-dispatch gN14d1@t '(_ . any)))) gN14cd@pat)) gN14c8@pat* gN14c9@tmp*)))))))) gN14c5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN14c3@t))) (gNd62@syntax-dispatch gN14c3@t '(_ each-any . #(each (any any)))))) gN14c1@e))) (set! gNd50@quasiquote-macro ((lambda () ((lambda (gN14dc@datum gN14f8@quasicons* gN14fa@quasicons gN14fc@quasiappend gN14fe@quasivector gN1500@vquasi gN1502@quasi) (begin (set! gN14dc@datum (lambda (gN15dd@x) (list (gNcec@scheme-stx 'quote) (gNb45@mkstx gN15dd@x '() '() '())))) (set! gN14f8@quasicons* (lambda (gN15d5@x gN15d6@y) ((letrec ((gN15d9@f (lambda (gN15db@x) (if (null? gN15db@x) gN15d6@y (gN14fa@quasicons (car gN15db@x) (gN15d9@f (cdr gN15db@x))))))) gN15d9@f) gN15d5@x))) (set! gN14fa@quasicons (lambda (gN15af@x gN15b0@y) ((lambda (gN15b3@t) ((lambda (gN15b5@ls/false) (if gN15b5@ls/false (apply (lambda (gN15b7@dy) ((lambda (gN15b9@t) ((lambda (gN15bb@ls/false) (if gN15bb@ls/false (apply (lambda (gN15bd@dx) (list (gNcec@scheme-stx 'quote) (cons gN15bd@dx gN15b7@dy))) gN15bb@ls/false) ((lambda (gN15bf@t) ((lambda (gN15c1@ls/false) (if gN15c1@ls/false (apply (lambda () ((lambda (gN15c3@t) ((lambda (gN15c5@ls/false) (if gN15c5@ls/false (apply (lambda () (list (gNcec@scheme-stx 'list) gN15af@x)) gN15c5@ls/false) ((lambda (gN15c7@t) ((lambda (gN15c9@ls/false) (if gN15c9@ls/false (apply (lambda () (list (gNcec@scheme-stx 'cons) gN15af@x gN15b0@y)) gN15c9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN15c7@t))) (gNd62@syntax-dispatch gN15c7@t '_))) gN15c3@t))) (gNd62@syntax-dispatch gN15c3@t '()))) gN15b7@dy)) gN15c1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN15bf@t))) (gNd62@syntax-dispatch gN15bf@t '_))) gN15b9@t))) (gNd62@syntax-dispatch gN15b9@t '(#(scheme-id quote) any)))) gN15af@x)) gN15b5@ls/false) ((lambda (gN15cb@t) ((lambda (gN15cd@ls/false) (if gN15cd@ls/false (apply (lambda (gN15cf@stuff) (cons* (gNcec@scheme-stx 'list) gN15af@x gN15cf@stuff)) gN15cd@ls/false) ((lambda (gN15d1@t) ((lambda (gN15d3@ls/false) (if gN15d3@ls/false (apply (lambda () (list (gNcec@scheme-stx 'cons) gN15af@x gN15b0@y)) gN15d3@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN15d1@t))) (gNd62@syntax-dispatch gN15d1@t '_))) gN15cb@t))) (gNd62@syntax-dispatch gN15cb@t '(#(scheme-id list) . each-any)))) gN15b3@t))) (gNd62@syntax-dispatch gN15b3@t '(#(scheme-id quote) any)))) gN15b0@y))) (set! gN14fc@quasiappend (lambda (gN1595@x gN1596@y) ((lambda (gN1599@ls) (if (null? gN1599@ls) (list (gNcec@scheme-stx 'quote) '()) (if (null? (cdr gN1599@ls)) (car gN1599@ls) (cons* (gNcec@scheme-stx 'append) gN1599@ls)))) ((letrec ((gN159b@f (lambda (gN159d@x) (if (null? gN159d@x) ((lambda (gN159f@t) ((lambda (gN15a1@ls/false) (if gN15a1@ls/false (apply (lambda () '()) gN15a1@ls/false) ((lambda (gN15a3@t) ((lambda (gN15a5@ls/false) (if gN15a5@ls/false (apply (lambda () (list gN1596@y)) gN15a5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN15a3@t))) (gNd62@syntax-dispatch gN15a3@t '_))) gN159f@t))) (gNd62@syntax-dispatch gN159f@t '(#(scheme-id quote) ())))) gN1596@y) ((lambda (gN15a7@t) ((lambda (gN15a9@ls/false) (if gN15a9@ls/false (apply (lambda () (gN159b@f (cdr gN159d@x))) gN15a9@ls/false) ((lambda (gN15ab@t) ((lambda (gN15ad@ls/false) (if gN15ad@ls/false (apply (lambda () (cons (car gN159d@x) (gN159b@f (cdr gN159d@x)))) gN15ad@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN15ab@t))) (gNd62@syntax-dispatch gN15ab@t '_))) gN15a7@t))) (gNd62@syntax-dispatch gN15a7@t '(#(scheme-id quote) ())))) (car gN159d@x)))))) gN159b@f) gN1595@x)))) (set! gN14fe@quasivector (lambda (gN1563@x) ((lambda (gN1565@pat-x) ((lambda (gN1567@t) ((lambda (gN1569@ls/false) (if gN1569@ls/false (apply (lambda (gN156b@x*) (list (gNcec@scheme-stx 'quote) (list->vector gN156b@x*))) gN1569@ls/false) ((lambda (gN156d@t) ((lambda (gN156f@ls/false) (if gN156f@ls/false (apply (lambda () ((letrec ((gN1571@f (lambda (gN1573@x gN1574@k) ((lambda (gN1577@t) ((lambda (gN1579@ls/false) (if gN1579@ls/false (apply (lambda (gN157b@x*) (gN1574@k (map (lambda (gN157d@x) (list (gNcec@scheme-stx 'quote) gN157d@x)) gN157b@x*))) gN1579@ls/false) ((lambda (gN157f@t) ((lambda (gN1581@ls/false) (if gN1581@ls/false (apply (lambda (gN1583@x*) (gN1574@k gN1583@x*)) gN1581@ls/false) ((lambda (gN1585@t) ((lambda (gN1587@ls/false) (if gN1587@ls/false (apply (lambda (gN1589@x gN158a@y) (gN1571@f gN158a@y (lambda (gN158d@ls) (gN1574@k (cons gN1589@x gN158d@ls))))) gN1587@ls/false) ((lambda (gN158f@t) ((lambda (gN1591@ls/false) (if gN1591@ls/false (apply (lambda () (list (gNcec@scheme-stx 'list->vector) gN1565@pat-x)) gN1591@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN158f@t))) (gNd62@syntax-dispatch gN158f@t '_))) gN1585@t))) (gNd62@syntax-dispatch gN1585@t '(#(scheme-id cons) any any)))) gN157f@t))) (gNd62@syntax-dispatch gN157f@t '(#(scheme-id list) . each-any)))) gN1577@t))) (gNd62@syntax-dispatch gN1577@t '(#(scheme-id quote) each-any)))) gN1573@x)))) gN1571@f) gN1563@x (lambda (gN1593@ls) (cons* (gNcec@scheme-stx 'vector) gN1593@ls)))) gN156f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN156d@t))) (gNd62@syntax-dispatch gN156d@t '_))) gN1567@t))) (gNd62@syntax-dispatch gN1567@t '(#(scheme-id quote) each-any)))) gN1565@pat-x)) gN1563@x))) (set! gN1500@vquasi (lambda (gN1541@p gN1542@lev) ((lambda (gN1545@t) ((lambda (gN1547@ls/false) (if gN1547@ls/false (apply (lambda (gN1549@p gN154a@q) ((lambda (gN154d@t) ((lambda (gN154f@ls/false) (if gN154f@ls/false (apply (lambda (gN1551@p) (if (= gN1542@lev '0) (gN14f8@quasicons* gN1551@p (gN1500@vquasi gN154a@q gN1542@lev)) (gN14fa@quasicons (gN14fa@quasicons (gN14dc@datum 'unquote) (gN1502@quasi gN1551@p (- gN1542@lev '1))) (gN1500@vquasi gN154a@q gN1542@lev)))) gN154f@ls/false) ((lambda (gN1553@t) ((lambda (gN1555@ls/false) (if gN1555@ls/false (apply (lambda (gN1557@p) (if (= gN1542@lev '0) (gN14fc@quasiappend gN1557@p (gN1500@vquasi gN154a@q gN1542@lev)) (gN14fa@quasicons (gN14fa@quasicons (gN14dc@datum 'unquote-splicing) (gN1502@quasi gN1557@p (- gN1542@lev '1))) (gN1500@vquasi gN154a@q gN1542@lev)))) gN1555@ls/false) ((lambda (gN1559@t) ((lambda (gN155b@ls/false) (if gN155b@ls/false (apply (lambda (gN155d@p) (gN14fa@quasicons (gN1502@quasi gN155d@p gN1542@lev) (gN1500@vquasi gN154a@q gN1542@lev))) gN155b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1559@t))) (gNd62@syntax-dispatch gN1559@t 'any))) gN1553@t))) (gNd62@syntax-dispatch gN1553@t '(#(scheme-id unquote-splicing) . each-any)))) gN154d@t))) (gNd62@syntax-dispatch gN154d@t '(#(scheme-id unquote) . each-any)))) gN1549@p)) gN1547@ls/false) ((lambda (gN155f@t) ((lambda (gN1561@ls/false) (if gN1561@ls/false (apply (lambda () (list (gNcec@scheme-stx 'quote) '())) gN1561@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN155f@t))) (gNd62@syntax-dispatch gN155f@t '()))) gN1545@t))) (gNd62@syntax-dispatch gN1545@t '(any . any)))) gN1541@p))) (set! gN1502@quasi (lambda (gN150b@p gN150c@lev) ((lambda (gN150f@t) ((lambda (gN1511@ls/false) (if gN1511@ls/false (apply (lambda (gN1513@p) (if (= gN150c@lev '0) gN1513@p (gN14fa@quasicons (gN14dc@datum 'unquote) (gN1502@quasi (list gN1513@p) (- gN150c@lev '1))))) gN1511@ls/false) ((lambda (gN1515@t) ((lambda (gN1517@ls/false) (if gN1517@ls/false (apply (lambda (gN1519@p gN151a@q) (if (= gN150c@lev '0) (gN14f8@quasicons* gN1519@p (gN1502@quasi gN151a@q gN150c@lev)) (gN14fa@quasicons (gN14fa@quasicons (gN14dc@datum 'unquote) (gN1502@quasi gN1519@p (- gN150c@lev '1))) (gN1502@quasi gN151a@q gN150c@lev)))) gN1517@ls/false) ((lambda (gN151d@t) ((lambda (gN151f@ls/false) (if gN151f@ls/false (apply (lambda (gN1521@p gN1522@q) (if (= gN150c@lev '0) (gN14fc@quasiappend gN1521@p (gN1502@quasi gN1522@q gN150c@lev)) (gN14fa@quasicons (gN14fa@quasicons (gN14dc@datum 'unquote-splicing) (gN1502@quasi gN1521@p (- gN150c@lev '1))) (gN1502@quasi gN1522@q gN150c@lev)))) gN151f@ls/false) ((lambda (gN1525@t) ((lambda (gN1527@ls/false) (if gN1527@ls/false (apply (lambda (gN1529@p) (gN14fa@quasicons (gN14dc@datum 'quasiquote) (gN1502@quasi (list gN1529@p) (+ gN150c@lev '1)))) gN1527@ls/false) ((lambda (gN152b@t) ((lambda (gN152d@ls/false) (if gN152d@ls/false (apply (lambda (gN152f@p gN1530@q) (gN14fa@quasicons (gN1502@quasi gN152f@p gN150c@lev) (gN1502@quasi gN1530@q gN150c@lev))) gN152d@ls/false) ((lambda (gN1533@t) ((lambda (gN1535@ls/false) (if (and gN1535@ls/false (apply (lambda (gN1537@x) (not (gNb29@stx? gN1537@x))) gN1535@ls/false)) (apply (lambda (gN1539@x) (gN14fe@quasivector (gN1500@vquasi gN1539@x gN150c@lev))) gN1535@ls/false) ((lambda (gN153b@t) ((lambda (gN153d@ls/false) (if gN153d@ls/false (apply (lambda (gN153f@p) (list (gNcec@scheme-stx 'quote) gN153f@p)) gN153d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN153b@t))) (gNd62@syntax-dispatch gN153b@t 'any))) gN1533@t))) (gNd62@syntax-dispatch gN1533@t '#(vector each-any)))) gN152b@t))) (gNd62@syntax-dispatch gN152b@t '(any . any)))) gN1525@t))) (gNd62@syntax-dispatch gN1525@t '(#(scheme-id quasiquote) any)))) gN151d@t))) (gNd62@syntax-dispatch gN151d@t '((#(scheme-id unquote-splicing) . each-any) . any)))) gN1515@t))) (gNd62@syntax-dispatch gN1515@t '((#(scheme-id unquote) . each-any) . any)))) gN150f@t))) (gNd62@syntax-dispatch gN150f@t '(#(scheme-id unquote) any)))) gN150b@p))) (lambda (gN1503@x) ((lambda (gN1505@t) ((lambda (gN1507@ls/false) (if gN1507@ls/false (apply (lambda (gN1509@e) (gN1502@quasi gN1509@e '0)) gN1507@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1505@t))) (gNd62@syntax-dispatch gN1505@t '(_ any)))) gN1503@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! gNd52@quasisyntax-macro ((lambda () ((lambda (gN15e0@quasi) (begin (set! gN15e0@quasi (lambda (gN15fb@p gN15fc@lev) ((lambda (gN15ff@t) ((lambda (gN1601@ls/false) (if gN1601@ls/false (apply (lambda (gN1603@p) (if (= gN15fc@lev '0) ((lambda (gN1605@g) (values (list gN1605@g) (list gN1603@p) gN1605@g)) (gensym)) (call-with-values (lambda () (gN15e0@quasi gN1603@p (- gN15fc@lev '1))) (lambda (gN160d@gN1608 gN160e@gN160a gN160f@gN160c) ((lambda (gN1613@p gN1614@rhs* gN1615@lhs*) (values gN1615@lhs* gN1614@rhs* (list 'unsyntax gN1613@p))) gN160f@gN160c gN160e@gN160a gN160d@gN1608))))) gN1601@ls/false) ((lambda (gN1619@t) ((lambda (gN161b@ls/false) (if (and gN161b@ls/false (apply (lambda () (= gN15fc@lev '0)) gN161b@ls/false)) (apply (lambda () (gNe42@syntax-violation '#f '"incorrect use of unsyntax" gN15fb@p)) gN161b@ls/false) ((lambda (gN161d@t) ((lambda (gN161f@ls/false) (if gN161f@ls/false (apply (lambda (gN1621@p* gN1622@q) (call-with-values (lambda () (gN15e0@quasi gN1622@q gN15fc@lev)) (lambda (gN162b@gN1626 gN162c@gN1628 gN162d@gN162a) ((lambda (gN1631@q gN1632@rhs* gN1633@lhs*) (if (= gN15fc@lev '0) ((lambda (gN1637@g*) (values (append gN1637@g* gN1633@lhs*) (append gN1621@p* gN1632@rhs*) (append gN1637@g* gN1631@q))) (map (lambda (gN1639@x) (gensym)) gN1621@p*)) (call-with-values (lambda () (gN15e0@quasi gN1621@p* (- gN15fc@lev '1))) (lambda (gN1641@gN163c gN1642@gN163e gN1643@gN1640) ((lambda (gN1647@p* gN1648@rhs2* gN1649@lhs2*) (values (append gN1649@lhs2* gN1633@lhs*) (append gN1648@rhs2* gN1632@rhs*) (cons (cons 'unsyntax gN1647@p*) gN1631@q))) gN1643@gN1640 gN1642@gN163e gN1641@gN163c))))) gN162d@gN162a gN162c@gN1628 gN162b@gN1626)))) gN161f@ls/false) ((lambda (gN164d@t) ((lambda (gN164f@ls/false) (if gN164f@ls/false (apply (lambda (gN1651@p* gN1652@q) (call-with-values (lambda () (gN15e0@quasi gN1652@q gN15fc@lev)) (lambda (gN165b@gN1656 gN165c@gN1658 gN165d@gN165a) ((lambda (gN1661@q gN1662@rhs* gN1663@lhs*) (if (= gN15fc@lev '0) ((lambda (gN1667@g*) (values (append (map (lambda (gN1669@g) (cons gN1669@g '(...))) gN1667@g*) gN1663@lhs*) (append gN1651@p* gN1662@rhs*) (append (apply append (map (lambda (gN166b@g) (cons gN166b@g '(...))) gN1667@g*)) gN1661@q))) (map (lambda (gN166d@x) (gensym)) gN1651@p*)) (call-with-values (lambda () (gN15e0@quasi gN1651@p* (- gN15fc@lev '1))) (lambda (gN1675@gN1670 gN1676@gN1672 gN1677@gN1674) ((lambda (gN167b@p* gN167c@rhs2* gN167d@lhs2*) (values (append gN167d@lhs2* gN1663@lhs*) (append gN167c@rhs2* gN1662@rhs*) (cons (cons 'unsyntax-splicing gN167b@p*) gN1661@q))) gN1677@gN1674 gN1676@gN1672 gN1675@gN1670))))) gN165d@gN165a gN165c@gN1658 gN165b@gN1656)))) gN164f@ls/false) ((lambda (gN1681@t) ((lambda (gN1683@ls/false) (if (and gN1683@ls/false (apply (lambda () (= gN15fc@lev '0)) gN1683@ls/false)) (apply (lambda () (gNe42@syntax-violation '#f '"incorrect use of unsyntax-splicing" gN15fb@p)) gN1683@ls/false) ((lambda (gN1685@t) ((lambda (gN1687@ls/false) (if gN1687@ls/false (apply (lambda (gN1689@p) (call-with-values (lambda () (gN15e0@quasi gN1689@p (+ gN15fc@lev '1))) (lambda (gN1691@gN168c gN1692@gN168e gN1693@gN1690) ((lambda (gN1697@p gN1698@rhs* gN1699@lhs*) (values gN1699@lhs* gN1698@rhs* (list 'quasisyntax gN1697@p))) gN1693@gN1690 gN1692@gN168e gN1691@gN168c)))) gN1687@ls/false) ((lambda (gN169d@t) ((lambda (gN169f@ls/false) (if gN169f@ls/false (apply (lambda (gN16a1@p gN16a2@q) (call-with-values (lambda () (gN15e0@quasi gN16a1@p gN15fc@lev)) (lambda (gN16b1@gN16a6 gN16b2@gN16a8 gN16b3@gN16aa) (call-with-values (lambda () (gN15e0@quasi gN16a2@q gN15fc@lev)) (lambda (gN16b7@gN16ac gN16b8@gN16ae gN16b9@gN16b0) ((lambda (gN16bd@q gN16be@rhs2* gN16bf@lhs2* gN16c0@p gN16c1@rhs* gN16c2@lhs*) (values (append gN16bf@lhs2* gN16c2@lhs*) (append gN16be@rhs2* gN16c1@rhs*) (cons gN16c0@p gN16bd@q))) gN16b9@gN16b0 gN16b8@gN16ae gN16b7@gN16ac gN16b3@gN16aa gN16b2@gN16a8 gN16b1@gN16a6)))))) gN169f@ls/false) ((lambda (gN16c9@t) ((lambda (gN16cb@ls/false) (if gN16cb@ls/false (apply (lambda (gN16cd@x*) (call-with-values (lambda () (gN15e0@quasi gN16cd@x* gN15fc@lev)) (lambda (gN16d5@gN16d0 gN16d6@gN16d2 gN16d7@gN16d4) ((lambda (gN16db@x* gN16dc@rhs* gN16dd@lhs*) (values gN16dd@lhs* gN16dc@rhs* (list->vector gN16db@x*))) gN16d7@gN16d4 gN16d6@gN16d2 gN16d5@gN16d0)))) gN16cb@ls/false) ((lambda (gN16e1@t) ((lambda (gN16e3@ls/false) (if gN16e3@ls/false (apply (lambda () (values '() '() gN15fb@p)) gN16e3@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN16e1@t))) (gNd62@syntax-dispatch gN16e1@t '_))) gN16c9@t))) (gNd62@syntax-dispatch gN16c9@t '#(vector each-any)))) gN169d@t))) (gNd62@syntax-dispatch gN169d@t '(any . any)))) gN1685@t))) (gNd62@syntax-dispatch gN1685@t '(#(scheme-id quasisyntax) any)))) gN1681@t))) (gNd62@syntax-dispatch gN1681@t '#(scheme-id unsyntax-splicing)))) gN164d@t))) (gNd62@syntax-dispatch gN164d@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) gN161d@t))) (gNd62@syntax-dispatch gN161d@t '((#(scheme-id unsyntax) . each-any) . any)))) gN1619@t))) (gNd62@syntax-dispatch gN1619@t '#(scheme-id unsyntax)))) gN15ff@t))) (gNd62@syntax-dispatch gN15ff@t '(#(scheme-id unsyntax) any)))) gN15fb@p))) (lambda (gN15e1@x) ((lambda (gN15e3@t) ((lambda (gN15e5@ls/false) (if gN15e5@ls/false (apply (lambda (gN15e7@e) (call-with-values (lambda () (gN15e0@quasi gN15e7@e '0)) (lambda (gN15ef@gN15ea gN15f0@gN15ec gN15f1@gN15ee) ((lambda (gN15f5@v gN15f6@rhs* gN15f7@lhs*) (gNd18@bless (list 'syntax-case (cons 'list gN15f6@rhs*) '() (list gN15f7@lhs* (list 'syntax gN15f5@v))))) gN15f1@gN15ee gN15f0@gN15ec gN15ef@gN15ea)))) gN15e5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN15e3@t))) (gNd62@syntax-dispatch gN15e3@t '(_ any)))) gN15e1@x)))) '#f)))) (set! gNd54@define-struct-macro (lambda (gN16e5@stx) (gNe42@syntax-violation '#f '"define-struct not supported" gN16e5@stx))) (set! gNd56@define-record-type-macro (lambda (gN16e7@x) ((lambda (gN16ea@id gN16ec@get-record-name gN16ee@get-record-constructor-name gN16f0@get-record-predicate-name gN16f2@get-clause gN16f4@foo-rtd-code gN16f6@parent-rtd-code gN16f8@parent-rcd-code gN16fa@foo-rcd-code gN16fc@get-protocol-code gN16fe@get-fields gN1700@get-mutator-indices gN1702@get-mutators gN1704@get-accessors gN1706@enumerate gN1708@do-define-record gN170a@verify-clauses) (begin (set! gN16ea@id (lambda (gN18dd@ctxt . gN18df@str*) (gNe46@datum->syntax gN18dd@ctxt (string->symbol (apply string-append (map (lambda (gN18e1@x) (if (symbol? gN18e1@x) (symbol->string gN18e1@x) (if (string? gN18e1@x) gN18e1@x (assertion-violation 'define-record-type '"BUG")))) gN18df@str*)))))) (set! gN16ec@get-record-name (lambda (gN18cb@spec) ((lambda (gN18cd@t) ((lambda (gN18cf@ls/false) (if gN18cf@ls/false (apply (lambda (gN18d1@foo gN18d2@make-foo gN18d3@foo?) gN18d1@foo) gN18cf@ls/false) ((lambda (gN18d7@t) ((lambda (gN18d9@ls/false) (if gN18d9@ls/false (apply (lambda (gN18db@foo) gN18db@foo) gN18d9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN18d7@t))) (gNd62@syntax-dispatch gN18d7@t 'any))) gN18cd@t))) (gNd62@syntax-dispatch gN18cd@t '(any any any)))) gN18cb@spec))) (set! gN16ee@get-record-constructor-name (lambda (gN18b7@spec) ((lambda (gN18b9@t) ((lambda (gN18bb@ls/false) (if gN18bb@ls/false (apply (lambda (gN18bd@foo gN18be@make-foo gN18bf@foo?) gN18be@make-foo) gN18bb@ls/false) ((lambda (gN18c3@t) ((lambda (gN18c5@ls/false) (if (and gN18c5@ls/false (apply (lambda (gN18c7@foo) (gNb5d@id? gN18c7@foo)) gN18c5@ls/false)) (apply (lambda (gN18c9@foo) (gN16ea@id gN18c9@foo '"make-" (gNb71@stx->datum gN18c9@foo))) gN18c5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN18c3@t))) (gNd62@syntax-dispatch gN18c3@t 'any))) gN18b9@t))) (gNd62@syntax-dispatch gN18b9@t '(any any any)))) gN18b7@spec))) (set! gN16f0@get-record-predicate-name (lambda (gN18a3@spec) ((lambda (gN18a5@t) ((lambda (gN18a7@ls/false) (if gN18a7@ls/false (apply (lambda (gN18a9@foo gN18aa@make-foo gN18ab@foo?) gN18ab@foo?) gN18a7@ls/false) ((lambda (gN18af@t) ((lambda (gN18b1@ls/false) (if (and gN18b1@ls/false (apply (lambda (gN18b3@foo) (gNb5d@id? gN18b3@foo)) gN18b1@ls/false)) (apply (lambda (gN18b5@foo) (gN16ea@id gN18b5@foo (gNb71@stx->datum gN18b5@foo) '"?")) gN18b1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN18af@t))) (gNd62@syntax-dispatch gN18af@t 'any))) gN18a5@t))) (gNd62@syntax-dispatch gN18a5@t '(any any any)))) gN18a3@spec))) (set! gN16f2@get-clause (lambda (gN1891@id gN1892@ls) ((lambda (gN1895@t) ((lambda (gN1897@ls/false) (if gN1897@ls/false (apply (lambda () '#f) gN1897@ls/false) ((lambda (gN1899@t) ((lambda (gN189b@ls/false) (if gN189b@ls/false (apply (lambda (gN189d@x gN189e@rest gN189f@ls) (if (gNb63@free-id=? (gNd18@bless gN1891@id) gN189d@x) (cons gN189d@x gN189e@rest) (gN16f2@get-clause gN1891@id gN189f@ls))) gN189b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1899@t))) (gNd62@syntax-dispatch gN1899@t '((any . any) . any)))) gN1895@t))) (gNd62@syntax-dispatch gN1895@t '()))) gN1892@ls))) (set! gN16f4@foo-rtd-code (lambda (gN183f@name gN1840@clause* gN1841@parent-rtd-code) ((lambda (gN1846@convert-field-spec*) (begin (set! gN1846@convert-field-spec* (lambda (gN1877@ls) (list->vector (map (lambda (gN1879@x) ((lambda (gN187b@t) ((lambda (gN187d@ls/false) (if gN187d@ls/false (apply (lambda (gN187f@name gN1880@rest) (list 'mutable gN187f@name)) gN187d@ls/false) ((lambda (gN1883@t) ((lambda (gN1885@ls/false) (if gN1885@ls/false (apply (lambda (gN1887@name gN1888@rest) (list 'immutable gN1887@name)) gN1885@ls/false) ((lambda (gN188b@t) ((lambda (gN188d@ls/false) (if gN188d@ls/false (apply (lambda (gN188f@name) (list 'immutable gN188f@name)) gN188d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN188b@t))) (gNd62@syntax-dispatch gN188b@t 'any))) gN1883@t))) (gNd62@syntax-dispatch gN1883@t '(#(scheme-id immutable) any . any)))) gN187b@t))) (gNd62@syntax-dispatch gN187b@t '(#(scheme-id mutable) any . any)))) gN1879@x)) gN1877@ls)))) ((lambda (gN1847@uid-code gN1848@sealed? gN1849@opaque? gN184a@fields) (gNd18@bless (list 'make-record-type-descriptor (list 'quote gN183f@name) gN1841@parent-rtd-code gN1847@uid-code gN1848@sealed? gN1849@opaque? gN184a@fields))) ((lambda (gN184f@t) ((lambda (gN1851@ls/false) (if gN1851@ls/false (apply (lambda () (list 'quote (gensym))) gN1851@ls/false) ((lambda (gN1853@t) ((lambda (gN1855@ls/false) (if gN1855@ls/false (apply (lambda (gN1857@uid) (list 'quote gN1857@uid)) gN1855@ls/false) ((lambda (gN1859@t) ((lambda (gN185b@ls/false) (if gN185b@ls/false (apply (lambda () '#f) gN185b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1859@t))) (gNd62@syntax-dispatch gN1859@t '_))) gN1853@t))) (gNd62@syntax-dispatch gN1853@t '(_ any)))) gN184f@t))) (gNd62@syntax-dispatch gN184f@t '(_)))) (gN16f2@get-clause 'nongenerative gN1840@clause*)) ((lambda (gN185d@t) ((lambda (gN185f@ls/false) (if gN185f@ls/false (apply (lambda () '#t) gN185f@ls/false) ((lambda (gN1861@t) ((lambda (gN1863@ls/false) (if gN1863@ls/false (apply (lambda () '#f) gN1863@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1861@t))) (gNd62@syntax-dispatch gN1861@t '_))) gN185d@t))) (gNd62@syntax-dispatch gN185d@t '(_ #(atom #t))))) (gN16f2@get-clause 'sealed gN1840@clause*)) ((lambda (gN1865@t) ((lambda (gN1867@ls/false) (if gN1867@ls/false (apply (lambda () '#t) gN1867@ls/false) ((lambda (gN1869@t) ((lambda (gN186b@ls/false) (if gN186b@ls/false (apply (lambda () '#f) gN186b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1869@t))) (gNd62@syntax-dispatch gN1869@t '_))) gN1865@t))) (gNd62@syntax-dispatch gN1865@t '(_ #(atom #t))))) (gN16f2@get-clause 'opaque gN1840@clause*)) ((lambda (gN186d@t) ((lambda (gN186f@ls/false) (if gN186f@ls/false (apply (lambda (gN1871@field-spec*) (list 'quote (gN1846@convert-field-spec* gN1871@field-spec*))) gN186f@ls/false) ((lambda (gN1873@t) ((lambda (gN1875@ls/false) (if gN1875@ls/false (apply (lambda () ''#()) gN1875@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1873@t))) (gNd62@syntax-dispatch gN1873@t '_))) gN186d@t))) (gNd62@syntax-dispatch gN186d@t '(_ . each-any)))) (gN16f2@get-clause 'fields gN1840@clause*))))) '#f))) (set! gN16f6@parent-rtd-code (lambda (gN1827@clause*) ((lambda (gN1829@t) ((lambda (gN182b@ls/false) (if gN182b@ls/false (apply (lambda (gN182d@name) (list 'record-type-descriptor gN182d@name)) gN182b@ls/false) ((lambda (gN182f@t) ((lambda (gN1831@ls/false) (if gN1831@ls/false (apply (lambda () ((lambda (gN1833@t) ((lambda (gN1835@ls/false) (if gN1835@ls/false (apply (lambda (gN1837@rtd gN1838@rcd) gN1837@rtd) gN1835@ls/false) ((lambda (gN183b@t) ((lambda (gN183d@ls/false) (if gN183d@ls/false (apply (lambda () '#f) gN183d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN183b@t))) (gNd62@syntax-dispatch gN183b@t '#(atom #f)))) gN1833@t))) (gNd62@syntax-dispatch gN1833@t '(_ any any)))) (gN16f2@get-clause 'parent-rtd gN1827@clause*))) gN1831@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN182f@t))) (gNd62@syntax-dispatch gN182f@t '#(atom #f)))) gN1829@t))) (gNd62@syntax-dispatch gN1829@t '(_ any)))) (gN16f2@get-clause 'parent gN1827@clause*)))) (set! gN16f8@parent-rcd-code (lambda (gN180f@clause*) ((lambda (gN1811@t) ((lambda (gN1813@ls/false) (if gN1813@ls/false (apply (lambda (gN1815@name) (list 'record-constructor-descriptor gN1815@name)) gN1813@ls/false) ((lambda (gN1817@t) ((lambda (gN1819@ls/false) (if gN1819@ls/false (apply (lambda () ((lambda (gN181b@t) ((lambda (gN181d@ls/false) (if gN181d@ls/false (apply (lambda (gN181f@rtd gN1820@rcd) gN1820@rcd) gN181d@ls/false) ((lambda (gN1823@t) ((lambda (gN1825@ls/false) (if gN1825@ls/false (apply (lambda () '#f) gN1825@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1823@t))) (gNd62@syntax-dispatch gN1823@t '#(atom #f)))) gN181b@t))) (gNd62@syntax-dispatch gN181b@t '(_ any any)))) (gN16f2@get-clause 'parent-rtd gN180f@clause*))) gN1819@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1817@t))) (gNd62@syntax-dispatch gN1817@t '#(atom #f)))) gN1811@t))) (gNd62@syntax-dispatch gN1811@t '(_ any)))) (gN16f2@get-clause 'parent gN180f@clause*)))) (set! gN16fa@foo-rcd-code (lambda (gN1807@clause* gN1808@foo-rtd gN1809@protocol gN180a@parent-rcd-code) (list 'make-record-constructor-descriptor gN1808@foo-rtd gN180a@parent-rcd-code gN1809@protocol))) (set! gN16fc@get-protocol-code (lambda (gN17fb@clause*) ((lambda (gN17fd@t) ((lambda (gN17ff@ls/false) (if gN17ff@ls/false (apply (lambda (gN1801@expr) gN1801@expr) gN17ff@ls/false) ((lambda (gN1803@t) ((lambda (gN1805@ls/false) (if gN1805@ls/false (apply (lambda () '#f) gN1805@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1803@t))) (gNd62@syntax-dispatch gN1803@t '_))) gN17fd@t))) (gNd62@syntax-dispatch gN17fd@t '(_ any)))) (gN16f2@get-clause 'protocol gN17fb@clause*)))) (set! gN16fe@get-fields (lambda (gN17e9@clause*) ((lambda (gN17eb@t) ((lambda (gN17ed@ls/false) (if gN17ed@ls/false (apply (lambda () '()) gN17ed@ls/false) ((lambda (gN17ef@t) ((lambda (gN17f1@ls/false) (if gN17f1@ls/false (apply (lambda (gN17f3@f*) gN17f3@f*) gN17f1@ls/false) ((lambda (gN17f5@t) ((lambda (gN17f7@ls/false) (if gN17f7@ls/false (apply (lambda (gN17f9@rest) (gN16fe@get-fields gN17f9@rest)) gN17f7@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN17f5@t))) (gNd62@syntax-dispatch gN17f5@t '(_ . any)))) gN17ef@t))) (gNd62@syntax-dispatch gN17ef@t '((#(scheme-id fields) . each-any) . _)))) gN17eb@t))) (gNd62@syntax-dispatch gN17eb@t '()))) gN17e9@clause*))) (set! gN1700@get-mutator-indices (lambda (gN17d1@fields) ((letrec ((gN17d3@f (lambda (gN17d5@fields gN17d6@i) ((lambda (gN17d9@t) ((lambda (gN17db@ls/false) (if gN17db@ls/false (apply (lambda () '()) gN17db@ls/false) ((lambda (gN17dd@t) ((lambda (gN17df@ls/false) (if gN17df@ls/false (apply (lambda (gN17e1@rest) (cons gN17d6@i (gN17d3@f gN17e1@rest (+ gN17d6@i '1)))) gN17df@ls/false) ((lambda (gN17e3@t) ((lambda (gN17e5@ls/false) (if gN17e5@ls/false (apply (lambda (gN17e7@rest) (gN17d3@f gN17e7@rest (+ gN17d6@i '1))) gN17e5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN17e3@t))) (gNd62@syntax-dispatch gN17e3@t '(_ . any)))) gN17dd@t))) (gNd62@syntax-dispatch gN17dd@t '((#(scheme-id mutable) . _) . any)))) gN17d9@t))) (gNd62@syntax-dispatch gN17d9@t '()))) gN17d5@fields)))) gN17d3@f) gN17d1@fields '0))) (set! gN1702@get-mutators (lambda (gN17a7@foo gN17a8@fields) ((lambda (gN17ac@gen-name) (begin (set! gN17ac@gen-name (lambda (gN17cf@x) (gNe46@datum->syntax gN17a7@foo (string->symbol (string-append (symbol->string (gNe48@syntax->datum gN17a7@foo)) '"-" (symbol->string (gNe48@syntax->datum gN17cf@x)) '"-set!"))))) ((letrec ((gN17ad@f (lambda (gN17af@fields) ((lambda (gN17b1@t) ((lambda (gN17b3@ls/false) (if gN17b3@ls/false (apply (lambda () '()) gN17b3@ls/false) ((lambda (gN17b5@t) ((lambda (gN17b7@ls/false) (if gN17b7@ls/false (apply (lambda (gN17b9@name gN17ba@accessor gN17bb@mutator gN17bc@rest) (cons gN17bb@mutator (gN17ad@f gN17bc@rest))) gN17b7@ls/false) ((lambda (gN17c1@t) ((lambda (gN17c3@ls/false) (if gN17c3@ls/false (apply (lambda (gN17c5@name gN17c6@rest) (cons (gN17ac@gen-name gN17c5@name) (gN17ad@f gN17c6@rest))) gN17c3@ls/false) ((lambda (gN17c9@t) ((lambda (gN17cb@ls/false) (if gN17cb@ls/false (apply (lambda (gN17cd@rest) (gN17ad@f gN17cd@rest)) gN17cb@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN17c9@t))) (gNd62@syntax-dispatch gN17c9@t '(_ . any)))) gN17c1@t))) (gNd62@syntax-dispatch gN17c1@t '((#(scheme-id mutable) any) . any)))) gN17b5@t))) (gNd62@syntax-dispatch gN17b5@t '((#(scheme-id mutable) any any any) . any)))) gN17b1@t))) (gNd62@syntax-dispatch gN17b1@t '()))) gN17af@fields)))) gN17ad@f) gN17a8@fields))) '#f))) (set! gN1704@get-accessors (lambda (gN1763@foo gN1764@fields) ((lambda (gN1768@gen-name) (begin (set! gN1768@gen-name (lambda (gN17a5@x) (gNe46@datum->syntax gN1763@foo (string->symbol (string-append (symbol->string (gNe48@syntax->datum gN1763@foo)) '"-" (symbol->string (gNe48@syntax->datum gN17a5@x))))))) (map (lambda (gN1769@field) ((lambda (gN176b@t) ((lambda (gN176d@ls/false) (if (and gN176d@ls/false (apply (lambda (gN176f@name gN1770@accessor gN1771@mutator) (gNb5d@id? gN1770@accessor)) gN176d@ls/false)) (apply (lambda (gN1775@name gN1776@accessor gN1777@mutator) gN1776@accessor) gN176d@ls/false) ((lambda (gN177b@t) ((lambda (gN177d@ls/false) (if (and gN177d@ls/false (apply (lambda (gN177f@name gN1780@accessor) (gNb5d@id? gN1780@accessor)) gN177d@ls/false)) (apply (lambda (gN1783@name gN1784@accessor) gN1784@accessor) gN177d@ls/false) ((lambda (gN1787@t) ((lambda (gN1789@ls/false) (if (and gN1789@ls/false (apply (lambda (gN178b@name) (gNb5d@id? gN178b@name)) gN1789@ls/false)) (apply (lambda (gN178d@name) (gN1768@gen-name gN178d@name)) gN1789@ls/false) ((lambda (gN178f@t) ((lambda (gN1791@ls/false) (if (and gN1791@ls/false (apply (lambda (gN1793@name) (gNb5d@id? gN1793@name)) gN1791@ls/false)) (apply (lambda (gN1795@name) (gN1768@gen-name gN1795@name)) gN1791@ls/false) ((lambda (gN1797@t) ((lambda (gN1799@ls/false) (if (and gN1799@ls/false (apply (lambda (gN179b@name) (gNb5d@id? gN179b@name)) gN1799@ls/false)) (apply (lambda (gN179d@name) (gN1768@gen-name gN179d@name)) gN1799@ls/false) ((lambda (gN179f@t) ((lambda (gN17a1@ls/false) (if gN17a1@ls/false (apply (lambda (gN17a3@others) (gNe42@syntax-violation '#f '"invalid field spec" gN1769@field)) gN17a1@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN179f@t))) (gNd62@syntax-dispatch gN179f@t 'any))) gN1797@t))) (gNd62@syntax-dispatch gN1797@t 'any))) gN178f@t))) (gNd62@syntax-dispatch gN178f@t '(#(scheme-id immutable) any)))) gN1787@t))) (gNd62@syntax-dispatch gN1787@t '(#(scheme-id mutable) any)))) gN177b@t))) (gNd62@syntax-dispatch gN177b@t '(#(scheme-id immutable) any any)))) gN176b@t))) (gNd62@syntax-dispatch gN176b@t '(#(scheme-id mutable) any any any)))) gN1769@field)) gN1764@fields))) '#f))) (set! gN1706@enumerate (lambda (gN175b@ls) ((letrec ((gN175d@f (lambda (gN175f@ls gN1760@i) (if (null? gN175f@ls) '() (cons gN1760@i (gN175d@f (cdr gN175f@ls) (+ gN1760@i '1))))))) gN175d@f) gN175b@ls '0))) (set! gN1708@do-define-record (lambda (gN1733@namespec gN1734@clause*) ((lambda (gN1737@foo) ((lambda (gN1739@foo-rtd) ((lambda (gN173b@foo-rcd) ((lambda (gN173d@protocol) ((lambda (gN173f@make-foo) ((lambda (gN1741@fields) ((lambda (gN1743@idx*) ((lambda (gN1745@foo-x*) ((lambda (gN1747@set-foo-x!*) ((lambda (gN1749@set-foo-idx*) ((lambda (gN174b@foo?) ((lambda (gN174d@foo-rtd-code) ((lambda (gN174f@foo-rcd-code) ((lambda (gN1751@protocol-code) ((lambda () (gNd18@bless (cons 'begin (cons (list 'define gN1739@foo-rtd gN174d@foo-rtd-code) (cons (list 'define gN173d@protocol gN1751@protocol-code) (cons (list 'define gN173b@foo-rcd gN174f@foo-rcd-code) (cons (list 'define-syntax gN1737@foo (list 'list ''$rtd (list 'syntax gN1739@foo-rtd) (list 'syntax gN173b@foo-rcd))) (cons (list 'define gN174b@foo? (list 'record-predicate gN1739@foo-rtd)) (cons (list 'define gN173f@make-foo (list 'record-constructor gN173b@foo-rcd)) (append (map (lambda (gN1753@foo-x gN1754@idx) (list 'define gN1753@foo-x (list 'record-accessor gN1739@foo-rtd gN1754@idx))) gN1745@foo-x* gN1743@idx*) (map (lambda (gN1757@set-foo-x! gN1758@idx) (list 'define gN1757@set-foo-x! (list 'record-mutator gN1739@foo-rtd gN1758@idx))) gN1747@set-foo-x!* gN1749@set-foo-idx*))))))))))))) (gN16fc@get-protocol-code gN1734@clause*))) (gN16fa@foo-rcd-code gN1734@clause* gN1739@foo-rtd gN173d@protocol (gN16f8@parent-rcd-code gN1734@clause*)))) (gN16f4@foo-rtd-code gN1737@foo gN1734@clause* (gN16f6@parent-rtd-code gN1734@clause*)))) (gN16f0@get-record-predicate-name gN1733@namespec))) (gN1700@get-mutator-indices gN1741@fields))) (gN1702@get-mutators gN1737@foo gN1741@fields))) (gN1704@get-accessors gN1737@foo gN1741@fields))) (gN1706@enumerate gN1741@fields))) (gN16fe@get-fields gN1734@clause*))) (gN16ee@get-record-constructor-name gN1733@namespec))) (gensym))) (gensym))) (gensym))) (gN16ec@get-record-name gN1733@namespec)))) (set! gN170a@verify-clauses (lambda (gN1713@x gN1714@cls*) ((lambda (gN1718@valid-kwds gN171a@free-id-member?) (begin (set! gN1718@valid-kwds (map gNd18@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! gN171a@free-id-member? (lambda (gN172f@x gN1730@ls) (and (pair? gN1730@ls) (or (gNb63@free-id=? gN172f@x (car gN1730@ls)) (gN171a@free-id-member? gN172f@x (cdr gN1730@ls)))))) ((letrec ((gN171b@f (lambda (gN171d@cls* gN171e@seen*) (if (not (null? gN171d@cls*)) ((lambda (gN1721@t) ((lambda (gN1723@ls/false) (if gN1723@ls/false (apply (lambda (gN1725@kwd gN1726@rest) (if (or (not (gNb5d@id? gN1725@kwd)) (not (gN171a@free-id-member? gN1725@kwd gN1718@valid-kwds))) (gNe42@syntax-violation '#f '"not a valid define-record-type keyword" gN1725@kwd) (if (gNb69@bound-id-member? gN1725@kwd gN171e@seen*) (gNe42@syntax-violation '#f '"duplicate use of keyword " gN1713@x gN1725@kwd) (gN171b@f (cdr gN171d@cls*) (cons gN1725@kwd gN171e@seen*))))) gN1723@ls/false) ((lambda (gN1729@t) ((lambda (gN172b@ls/false) (if gN172b@ls/false (apply (lambda (gN172d@cls) (gNe42@syntax-violation '#f '"malformed define-record-type clause" gN172d@cls)) gN172b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1729@t))) (gNd62@syntax-dispatch gN1729@t 'any))) gN1721@t))) (gNd62@syntax-dispatch gN1721@t '(any . any)))) (car gN171d@cls*)) (void))))) gN171b@f) gN1714@cls* '()))) '#f '#f))) ((lambda (gN170b@t) ((lambda (gN170d@ls/false) (if gN170d@ls/false (apply (lambda (gN170f@namespec gN1710@clause*) (begin (gN170a@verify-clauses gN16e7@x gN1710@clause*) (gN1708@do-define-record gN170f@namespec gN1710@clause*))) gN170d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN170b@t))) (gNd62@syntax-dispatch gN170b@t '(_ any . each-any)))) gN16e7@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! gNd58@define-condition-type-macro (lambda (gN18e3@x) ((lambda (gN18e6@mkname) (begin (set! gN18e6@mkname (lambda (gN1913@name gN1914@suffix) (gNe46@datum->syntax gN1913@name (string->symbol (string-append (symbol->string (gNe48@syntax->datum gN1913@name)) gN1914@suffix))))) ((lambda (gN18e7@t) ((lambda (gN18e9@ls/false) (if (and gN18e9@ls/false (apply (lambda (gN18eb@ctxt gN18ec@name gN18ed@super gN18ee@constructor gN18ef@predicate gN18f0@field* gN18f1@accessor*) (and (gNb5d@id? gN18ec@name) (gNb5d@id? gN18ed@super) (gNb5d@id? gN18ee@constructor) (gNb5d@id? gN18ef@predicate) (for-all gNb5d@id? gN18f0@field*) (for-all gNb5d@id? gN18f1@accessor*))) gN18e9@ls/false)) (apply (lambda (gN18f9@ctxt gN18fa@name gN18fb@super gN18fc@constructor gN18fd@predicate gN18fe@field* gN18ff@accessor*) ((lambda (gN1907@aux-accessor*) (gNd18@bless (cons 'begin (cons (cons 'define-record-type (cons (list gN18fa@name gN18fc@constructor (gensym)) (cons (list 'parent gN18fb@super) (cons (cons 'fields (map (lambda (gN1909@field gN190a@aux) (list 'immutable gN1909@field gN190a@aux)) gN18fe@field* gN1907@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define gN18fd@predicate (list 'condition-predicate (list 'record-type-descriptor gN18fa@name))) (map (lambda (gN190d@accessor gN190e@aux) (list 'define gN190d@accessor (list 'condition-accessor (list 'record-type-descriptor gN18fa@name) gN190e@aux))) gN18ff@accessor* gN1907@aux-accessor*)))))) (map (lambda (gN1911@x) (gensym)) gN18ff@accessor*))) gN18e9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN18e7@t))) (gNd62@syntax-dispatch gN18e7@t '(any any any any any . #(each (any any)))))) gN18e3@x))) '#f))) (set! gNd5a@incorrect-usage-macro (lambda (gN1917@e) (gNe42@syntax-violation '#f '"incorrect usage of auxiliary keyword" gN1917@e))) (set! gNd5c@parameterize-macro (lambda (gN1919@e) ((lambda (gN191b@t) ((lambda (gN191d@ls/false) (if gN191d@ls/false (apply (lambda (gN191f@b gN1920@b*) (gNd18@bless (cons 'let (cons '() (cons gN191f@b gN1920@b*))))) gN191d@ls/false) ((lambda (gN1923@t) ((lambda (gN1925@ls/false) (if gN1925@ls/false (apply (lambda (gN1927@olhs* gN1928@orhs* gN1929@b gN192a@b*) ((lambda (gN192f@lhs* gN1930@rhs*) (gNd18@bless (cons (list 'lambda (append gN192f@lhs* gN1930@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (gN1933@lhs gN1934@rhs) (list 'let (list (list 't (list gN1933@lhs))) (list gN1933@lhs gN1934@rhs) (cons 'set! (cons gN1934@rhs '(t))))) gN192f@lhs* gN1930@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons gN1929@b gN192a@b*))) '(swap)))))) (append gN1927@olhs* gN1928@orhs*)))) (gNe30@generate-temporaries gN1927@olhs*) (gNe30@generate-temporaries gN1928@orhs*))) gN1925@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1923@t))) (gNd62@syntax-dispatch gN1923@t '(_ #(each (any any)) any . each-any)))) gN191b@t))) (gNd62@syntax-dispatch gN191b@t '(_ () any . each-any)))) gN1919@e))) (set! gNd5e@foreign-call-transformer (lambda (gN1937@e gN1938@r gN1939@mr) ((lambda (gN193d@t) ((lambda (gN193f@ls/false) (if gN193f@ls/false (apply (lambda (gN1941@name gN1942@arg*) (cons 'foreign-call (cons (gNd84@chi-expr gN1941@name gN1938@r gN1939@mr) (gNd80@chi-expr* gN1942@arg* gN1938@r gN1939@mr)))) gN193f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN193d@t))) (gNd62@syntax-dispatch gN193d@t '(_ any . each-any)))) gN1937@e))) (set! gNd60@convert-pattern (lambda (gN1945@pattern gN1946@keys) ((lambda (gN194a@cvt* gN194c@cvt) (begin (set! gN194a@cvt* (lambda (gN19e9@p* gN19ea@n gN19eb@ids) (if (null? gN19e9@p*) (values '() gN19eb@ids) (call-with-values (lambda () (gN194a@cvt* (cdr gN19e9@p*) gN19ea@n gN19eb@ids)) (lambda (gN19f3@gN19f0 gN19f4@gN19f2) ((lambda (gN19f7@ids gN19f8@y) (call-with-values (lambda () (gN194c@cvt (car gN19e9@p*) gN19ea@n gN19f7@ids)) (lambda (gN19ff@gN19fc gN1a00@gN19fe) ((lambda (gN1a03@ids gN1a04@x) (values (cons gN1a04@x gN19f8@y) gN1a03@ids)) gN1a00@gN19fe gN19ff@gN19fc)))) gN19f4@gN19f2 gN19f3@gN19f0)))))) (set! gN194c@cvt (lambda (gN194d@p gN194e@n gN194f@ids) ((lambda (gN1953@t) ((lambda (gN1955@ls/false) (if (and gN1955@ls/false (apply (lambda (gN1957@id) (gNb5d@id? gN1957@id)) gN1955@ls/false)) (apply (lambda (gN1959@id) (if (gNb69@bound-id-member? gN194d@p gN1946@keys) (values (vector 'free-id gN194d@p) gN194f@ids) (if (gNb63@free-id=? gN194d@p (gNcec@scheme-stx '_)) (values '_ gN194f@ids) (values 'any (cons (cons gN194d@p gN194e@n) gN194f@ids))))) gN1955@ls/false) ((lambda (gN195b@t) ((lambda (gN195d@ls/false) (if (and gN195d@ls/false (apply (lambda (gN195f@p gN1960@dots) (gNd64@ellipsis? gN1960@dots)) gN195d@ls/false)) (apply (lambda (gN1963@p gN1964@dots) (call-with-values (lambda () (gN194c@cvt gN1963@p (+ gN194e@n '1) gN194f@ids)) (lambda (gN196b@gN1968 gN196c@gN196a) ((lambda (gN196f@ids gN1970@p) (values (if (eq? gN1970@p 'any) 'each-any (vector 'each gN1970@p)) gN196f@ids)) gN196c@gN196a gN196b@gN1968)))) gN195d@ls/false) ((lambda (gN1973@t) ((lambda (gN1975@ls/false) (if (and gN1975@ls/false (apply (lambda (gN1977@x gN1978@dots gN1979@ys gN197a@z) (gNd64@ellipsis? gN1978@dots)) gN1975@ls/false)) (apply (lambda (gN197f@x gN1980@dots gN1981@ys gN1982@z) (call-with-values (lambda () (gN194c@cvt gN1982@z gN194e@n gN194f@ids)) (lambda (gN198b@gN1988 gN198c@gN198a) ((lambda (gN198f@ids gN1990@z) (call-with-values (lambda () (gN194a@cvt* gN1981@ys gN194e@n gN198f@ids)) (lambda (gN1997@gN1994 gN1998@gN1996) ((lambda (gN199b@ids gN199c@ys) (call-with-values (lambda () (gN194c@cvt gN197f@x (+ gN194e@n '1) gN199b@ids)) (lambda (gN19a3@gN19a0 gN19a4@gN19a2) ((lambda (gN19a7@ids gN19a8@x) (values (vector 'each+ gN19a8@x (reverse gN199c@ys) gN1990@z) gN19a7@ids)) gN19a4@gN19a2 gN19a3@gN19a0)))) gN1998@gN1996 gN1997@gN1994)))) gN198c@gN198a gN198b@gN1988)))) gN1975@ls/false) ((lambda (gN19ab@t) ((lambda (gN19ad@ls/false) (if gN19ad@ls/false (apply (lambda (gN19af@x gN19b0@y) (call-with-values (lambda () (gN194c@cvt gN19b0@y gN194e@n gN194f@ids)) (lambda (gN19b7@gN19b4 gN19b8@gN19b6) ((lambda (gN19bb@ids gN19bc@y) (call-with-values (lambda () (gN194c@cvt gN19af@x gN194e@n gN19bb@ids)) (lambda (gN19c3@gN19c0 gN19c4@gN19c2) ((lambda (gN19c7@ids gN19c8@x) (values (cons gN19c8@x gN19bc@y) gN19c7@ids)) gN19c4@gN19c2 gN19c3@gN19c0)))) gN19b8@gN19b6 gN19b7@gN19b4)))) gN19ad@ls/false) ((lambda (gN19cb@t) ((lambda (gN19cd@ls/false) (if gN19cd@ls/false (apply (lambda () (values '() gN194f@ids)) gN19cd@ls/false) ((lambda (gN19cf@t) ((lambda (gN19d1@ls/false) (if (and gN19d1@ls/false (apply (lambda (gN19d3@p) (not (gNb29@stx? gN19d3@p))) gN19d1@ls/false)) (apply (lambda (gN19d5@p) (call-with-values (lambda () (gN194c@cvt gN19d5@p gN194e@n gN194f@ids)) (lambda (gN19db@gN19d8 gN19dc@gN19da) ((lambda (gN19df@ids gN19e0@p) (values (vector 'vector gN19e0@p) gN19df@ids)) gN19dc@gN19da gN19db@gN19d8)))) gN19d1@ls/false) ((lambda (gN19e3@t) ((lambda (gN19e5@ls/false) (if gN19e5@ls/false (apply (lambda (gN19e7@datum) (values (vector 'atom (gNb71@stx->datum gN19e7@datum)) gN194f@ids)) gN19e5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN19e3@t))) (gNd62@syntax-dispatch gN19e3@t 'any))) gN19cf@t))) (gNd62@syntax-dispatch gN19cf@t '#(vector each-any)))) gN19cb@t))) (gNd62@syntax-dispatch gN19cb@t '()))) gN19ab@t))) (gNd62@syntax-dispatch gN19ab@t '(any . any)))) gN1973@t))) (gNd62@syntax-dispatch gN1973@t '(any any . #(each+ any () any))))) gN195b@t))) (gNd62@syntax-dispatch gN195b@t '(any any)))) gN1953@t))) (gNd62@syntax-dispatch gN1953@t 'any))) gN194d@p))) (gN194c@cvt gN1945@pattern '0 '()))) '#f '#f))) (set! gNd62@syntax-dispatch ((lambda () ((lambda (gN1a08@stx^ gN1a0a@match-each gN1a0c@match-each+ gN1a0e@match-each-any gN1a10@match-empty gN1a12@combine gN1a14@match* gN1a16@match) (begin (set! gN1a08@stx^ (lambda (gN1ae3@e gN1ae4@m* gN1ae5@s* gN1ae6@ae*) (if (and (null? gN1ae4@m*) (null? gN1ae5@s*) (null? gN1ae6@ae*)) gN1ae3@e (gNb45@mkstx gN1ae3@e gN1ae4@m* gN1ae5@s* gN1ae6@ae*)))) (set! gN1a0a@match-each (lambda (gN1ac3@e gN1ac4@p gN1ac5@m* gN1ac6@s* gN1ac7@ae*) (if (pair? gN1ac3@e) ((lambda (gN1acd@first) (and gN1acd@first ((lambda (gN1acf@rest) (and gN1acf@rest (cons gN1acd@first gN1acf@rest))) (gN1a0a@match-each (cdr gN1ac3@e) gN1ac4@p gN1ac5@m* gN1ac6@s* gN1ac7@ae*)))) (gN1a16@match (car gN1ac3@e) gN1ac4@p gN1ac5@m* gN1ac6@s* gN1ac7@ae* '())) (if (null? gN1ac3@e) '() (if (gNb29@stx? gN1ac3@e) (and (not (gNae3@top-marked? gN1ac5@m*)) (call-with-values (lambda () (join-wraps gN1ac5@m* gN1ac6@s* gN1ac7@ae* gN1ac3@e)) (lambda (gN1ad7@gN1ad2 gN1ad8@gN1ad4 gN1ad9@gN1ad6) ((lambda (gN1add@ae* gN1ade@s* gN1adf@m*) (gN1a0a@match-each (gNb2b@stx-expr gN1ac3@e) gN1ac4@p gN1adf@m* gN1ade@s* gN1add@ae*)) gN1ad9@gN1ad6 gN1ad8@gN1ad4 gN1ad7@gN1ad2)))) (if (gN6b1@gN585@annotation? gN1ac3@e) (gN1a0a@match-each (gN6b3@gN589@annotation-expression gN1ac3@e) gN1ac4@p gN1ac5@m* gN1ac6@s* gN1ac7@ae*) '#f)))))) (set! gN1a0c@match-each+ (lambda (gN1a83@e gN1a84@x-pat gN1a85@y-pat gN1a86@z-pat gN1a87@m* gN1a88@s* gN1a89@ae* gN1a8a@r) ((letrec ((gN1a93@f (lambda (gN1a95@e gN1a96@m* gN1a97@s* gN1a98@ae*) (if (pair? gN1a95@e) (call-with-values (lambda () (gN1a93@f (cdr gN1a95@e) gN1a96@m* gN1a97@s* gN1a98@ae*)) (lambda (gN1aa3@gN1a9e gN1aa4@gN1aa0 gN1aa5@gN1aa2) ((lambda (gN1aa9@r gN1aaa@y-pat gN1aab@xr*) (if gN1aa9@r (if (null? gN1aaa@y-pat) ((lambda (gN1aaf@xr) (if gN1aaf@xr (values (cons gN1aaf@xr gN1aab@xr*) gN1aaa@y-pat gN1aa9@r) (values '#f '#f '#f))) (gN1a16@match (car gN1a95@e) gN1a84@x-pat gN1a96@m* gN1a97@s* gN1a98@ae* '())) (values '() (cdr gN1aaa@y-pat) (gN1a16@match (car gN1a95@e) (car gN1aaa@y-pat) gN1a96@m* gN1a97@s* gN1a98@ae* gN1aa9@r))) (values '#f '#f '#f))) gN1aa5@gN1aa2 gN1aa4@gN1aa0 gN1aa3@gN1a9e))) (if (gNb29@stx? gN1a95@e) (if (gNae3@top-marked? gN1a96@m*) (values '() gN1a85@y-pat (gN1a16@match gN1a95@e gN1a86@z-pat gN1a96@m* gN1a97@s* gN1a98@ae* gN1a8a@r)) (call-with-values (lambda () (join-wraps gN1a96@m* gN1a97@s* gN1a98@ae* gN1a95@e)) (lambda (gN1ab7@gN1ab2 gN1ab8@gN1ab4 gN1ab9@gN1ab6) ((lambda (gN1abd@ae* gN1abe@s* gN1abf@m*) (gN1a93@f (gNb2b@stx-expr gN1a95@e) gN1abf@m* gN1abe@s* gN1abd@ae*)) gN1ab9@gN1ab6 gN1ab8@gN1ab4 gN1ab7@gN1ab2)))) (if (gN6b1@gN585@annotation? gN1a95@e) (gN1a93@f (gN6b3@gN589@annotation-expression gN1a95@e) gN1a96@m* gN1a97@s* gN1a98@ae*) (values '() gN1a85@y-pat (gN1a16@match gN1a95@e gN1a86@z-pat gN1a96@m* gN1a97@s* gN1a98@ae* gN1a8a@r)))))))) gN1a93@f) gN1a83@e gN1a87@m* gN1a88@s* gN1a89@ae*))) (set! gN1a0e@match-each-any (lambda (gN1a67@e gN1a68@m* gN1a69@s* gN1a6a@ae*) (if (pair? gN1a67@e) ((lambda (gN1a6f@l) (and gN1a6f@l (cons (gN1a08@stx^ (car gN1a67@e) gN1a68@m* gN1a69@s* gN1a6a@ae*) gN1a6f@l))) (gN1a0e@match-each-any (cdr gN1a67@e) gN1a68@m* gN1a69@s* gN1a6a@ae*)) (if (null? gN1a67@e) '() (if (gNb29@stx? gN1a67@e) (and (not (gNae3@top-marked? gN1a68@m*)) (call-with-values (lambda () (join-wraps gN1a68@m* gN1a69@s* gN1a6a@ae* gN1a67@e)) (lambda (gN1a77@gN1a72 gN1a78@gN1a74 gN1a79@gN1a76) ((lambda (gN1a7d@ae* gN1a7e@s* gN1a7f@m*) (gN1a0e@match-each-any (gNb2b@stx-expr gN1a67@e) gN1a7f@m* gN1a7e@s* gN1a7d@ae*)) gN1a79@gN1a76 gN1a78@gN1a74 gN1a77@gN1a72)))) (if (gN6b1@gN585@annotation? gN1a67@e) (gN1a0e@match-each-any (gN6b3@gN589@annotation-expression gN1a67@e) gN1a68@m* gN1a69@s* gN1a6a@ae*) '#f)))))) (set! gN1a10@match-empty (lambda (gN1a61@p gN1a62@r) (if (null? gN1a61@p) gN1a62@r (if (eq? gN1a61@p '_) gN1a62@r (if (eq? gN1a61@p 'any) (cons '() gN1a62@r) (if (pair? gN1a61@p) (gN1a10@match-empty (car gN1a61@p) (gN1a10@match-empty (cdr gN1a61@p) gN1a62@r)) (if (eq? gN1a61@p 'each-any) (cons '() gN1a62@r) ((lambda (gN1a65@t) (if (memv gN1a65@t '(each)) (gN1a10@match-empty (vector-ref gN1a61@p '1) gN1a62@r) (if (memv gN1a65@t '(each+)) (gN1a10@match-empty (vector-ref gN1a61@p '1) (gN1a10@match-empty (reverse (vector-ref gN1a61@p '2)) (gN1a10@match-empty (vector-ref gN1a61@p '3) gN1a62@r))) (if (memv gN1a65@t '(free-id atom)) gN1a62@r (if (memv gN1a65@t '(scheme-id atom)) gN1a62@r (if (memv gN1a65@t '(vector)) (gN1a10@match-empty (vector-ref gN1a61@p '1) gN1a62@r) (assertion-violation 'syntax-dispatch '"invalid pattern" gN1a61@p))))))) (vector-ref gN1a61@p '0))))))))) (set! gN1a12@combine (lambda (gN1a5d@r* gN1a5e@r) (if (null? (car gN1a5d@r*)) gN1a5e@r (cons (map car gN1a5d@r*) (gN1a12@combine (map cdr gN1a5d@r*) gN1a5e@r))))) (set! gN1a14@match* (lambda (gN1a39@e gN1a3a@p gN1a3b@m* gN1a3c@s* gN1a3d@ae* gN1a3e@r) (if (null? gN1a3a@p) (and (null? gN1a39@e) gN1a3e@r) (if (pair? gN1a3a@p) (and (pair? gN1a39@e) (gN1a16@match (car gN1a39@e) (car gN1a3a@p) gN1a3b@m* gN1a3c@s* gN1a3d@ae* (gN1a16@match (cdr gN1a39@e) (cdr gN1a3a@p) gN1a3b@m* gN1a3c@s* gN1a3d@ae* gN1a3e@r))) (if (eq? gN1a3a@p 'each-any) ((lambda (gN1a45@l) (and gN1a45@l (cons gN1a45@l gN1a3e@r))) (gN1a0e@match-each-any gN1a39@e gN1a3b@m* gN1a3c@s* gN1a3d@ae*)) ((lambda (gN1a47@t) (if (memv gN1a47@t '(each)) (if (null? gN1a39@e) (gN1a10@match-empty (vector-ref gN1a3a@p '1) gN1a3e@r) ((lambda (gN1a49@r*) (and gN1a49@r* (gN1a12@combine gN1a49@r* gN1a3e@r))) (gN1a0a@match-each gN1a39@e (vector-ref gN1a3a@p '1) gN1a3b@m* gN1a3c@s* gN1a3d@ae*))) (if (memv gN1a47@t '(free-id)) (and (symbol? gN1a39@e) (gNae3@top-marked? gN1a3b@m*) (gNb63@free-id=? (gN1a08@stx^ gN1a39@e gN1a3b@m* gN1a3c@s* gN1a3d@ae*) (vector-ref gN1a3a@p '1)) gN1a3e@r) (if (memv gN1a47@t '(scheme-id)) (and (symbol? gN1a39@e) (gNae3@top-marked? gN1a3b@m*) (gNb63@free-id=? (gN1a08@stx^ gN1a39@e gN1a3b@m* gN1a3c@s* gN1a3d@ae*) (gNcec@scheme-stx (vector-ref gN1a3a@p '1))) gN1a3e@r) (if (memv gN1a47@t '(each+)) (call-with-values (lambda () (gN1a0c@match-each+ gN1a39@e (vector-ref gN1a3a@p '1) (vector-ref gN1a3a@p '2) (vector-ref gN1a3a@p '3) gN1a3b@m* gN1a3c@s* gN1a3d@ae* gN1a3e@r)) (lambda (gN1a51@gN1a4c gN1a52@gN1a4e gN1a53@gN1a50) ((lambda (gN1a57@r gN1a58@y-pat gN1a59@xr*) (and gN1a57@r (null? gN1a58@y-pat) (if (null? gN1a59@xr*) (gN1a10@match-empty (vector-ref gN1a3a@p '1) gN1a57@r) (gN1a12@combine gN1a59@xr* gN1a57@r)))) gN1a53@gN1a50 gN1a52@gN1a4e gN1a51@gN1a4c))) (if (memv gN1a47@t '(atom)) (and (fast-equal? (vector-ref gN1a3a@p '1) (gNb6f@strip gN1a39@e gN1a3b@m*)) gN1a3e@r) (if (memv gN1a47@t '(vector)) (and (vector? gN1a39@e) (gN1a16@match (vector->list gN1a39@e) (vector-ref gN1a3a@p '1) gN1a3b@m* gN1a3c@s* gN1a3d@ae* gN1a3e@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" gN1a3a@p)))))))) (vector-ref gN1a3a@p '0))))))) (set! gN1a16@match (lambda (gN1a1b@e gN1a1c@p gN1a1d@m* gN1a1e@s* gN1a1f@ae* gN1a20@r) (if (not gN1a20@r) '#f (if (eq? gN1a1c@p '_) gN1a20@r (if (eq? gN1a1c@p 'any) (cons (gN1a08@stx^ gN1a1b@e gN1a1d@m* gN1a1e@s* gN1a1f@ae*) gN1a20@r) (if (gNb29@stx? gN1a1b@e) (and (not (gNae3@top-marked? gN1a1d@m*)) (call-with-values (lambda () (join-wraps gN1a1d@m* gN1a1e@s* gN1a1f@ae* gN1a1b@e)) (lambda (gN1a2d@gN1a28 gN1a2e@gN1a2a gN1a2f@gN1a2c) ((lambda (gN1a33@ae* gN1a34@s* gN1a35@m*) (gN1a16@match (gNb2b@stx-expr gN1a1b@e) gN1a1c@p gN1a35@m* gN1a34@s* gN1a33@ae* gN1a20@r)) gN1a2f@gN1a2c gN1a2e@gN1a2a gN1a2d@gN1a28)))) (if (gN6b1@gN585@annotation? gN1a1b@e) (gN1a16@match (gN6b3@gN589@annotation-expression gN1a1b@e) gN1a1c@p gN1a1d@m* gN1a1e@s* gN1a1f@ae* gN1a20@r) (gN1a14@match* gN1a1b@e gN1a1c@p gN1a1d@m* gN1a1e@s* gN1a1f@ae* gN1a20@r)))))))) (lambda (gN1a17@e gN1a18@p) (gN1a16@match gN1a17@e gN1a18@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! gNd64@ellipsis? (lambda (gN1aeb@x) (and (gNb5d@id? gN1aeb@x) (gNb63@free-id=? gN1aeb@x (gNcec@scheme-stx '...))))) (set! gNd66@underscore? (lambda (gN1aed@x) (and (gNb5d@id? gN1aed@x) (gNb63@free-id=? gN1aed@x (gNcec@scheme-stx '_))))) (set! gNd68@verify-literals (lambda (gN1aef@lits gN1af0@expr) (for-each (lambda (gN1af3@x) (if (or (not (gNb5d@id? gN1af3@x)) (gNd64@ellipsis? gN1af3@x) (gNd66@underscore? gN1af3@x)) (gNe42@syntax-violation '#f '"invalid literal" gN1af0@expr gN1af3@x) (void))) gN1aef@lits))) (set! gNd6a@syntax-case-transformer ((lambda () ((lambda (gN1af6@build-dispatch-call gN1af8@invalid-ids-error gN1afa@gen-clause gN1afc@gen-syntax-case) (begin (set! gN1af6@build-dispatch-call (lambda (gN1b67@pvars gN1b68@expr gN1b69@y gN1b6a@r gN1b6b@mr) ((lambda (gN1b71@ids gN1b72@levels) ((lambda (gN1b75@labels gN1b76@new-vars) ((lambda (gN1b79@body) (list '(primitive apply) (gNac1@gNa01@build-lambda '#f gN1b76@new-vars gN1b79@body) gN1b69@y)) (gNd84@chi-expr (gNb49@add-subst (gNb1d@make-full-rib gN1b71@ids gN1b75@labels) gN1b68@expr) (append (map (lambda (gN1b7b@label gN1b7c@var gN1b7d@level) (cons gN1b7b@label (gNb77@make-binding 'syntax (cons gN1b7c@var gN1b7d@level)))) gN1b75@labels gN1b76@new-vars (map cdr gN1b67@pvars)) gN1b6a@r) gN1b6b@mr))) (map gNae9@gen-label gN1b71@ids) (map gNae5@gen-lexical gN1b71@ids))) (map car gN1b67@pvars) (map cdr gN1b67@pvars)))) (set! gN1af8@invalid-ids-error (lambda (gN1b5b@id* gN1b5c@e gN1b5d@class) ((letrec ((gN1b61@find (lambda (gN1b63@id* gN1b64@ok*) (if (null? gN1b63@id*) (gNe42@syntax-violation '#f '"invalid syntax" gN1b5c@e) (if (gNb5d@id? (car gN1b63@id*)) (if (gNb69@bound-id-member? (car gN1b63@id*) gN1b64@ok*) (gNe3e@syntax-error (car gN1b63@id*) '"duplicate " gN1b5d@class) (gN1b61@find (cdr gN1b63@id*) (cons (car gN1b63@id*) gN1b64@ok*))) (gNe3e@syntax-error (car gN1b63@id*) '"invalid " gN1b5d@class)))))) gN1b61@find) gN1b5b@id* '()))) (set! gN1afa@gen-clause (lambda (gN1b33@x gN1b34@keys gN1b35@clauses gN1b36@r gN1b37@mr gN1b38@pat gN1b39@fender gN1b3a@expr) (call-with-values (lambda () (gNd60@convert-pattern gN1b38@pat gN1b34@keys)) (lambda (gN1b47@gN1b44 gN1b48@gN1b46) ((lambda (gN1b4b@pvars gN1b4c@p) (if (not (gNb67@distinct-bound-ids? (map car gN1b4b@pvars))) (gN1af8@invalid-ids-error (map car gN1b4b@pvars) gN1b38@pat '"pattern variable") (if (not (for-all (lambda (gN1b4f@x) (not (gNd64@ellipsis? (car gN1b4f@x)))) gN1b4b@pvars)) (gNe42@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" gN1b38@pat) ((lambda (gN1b51@y) ((lambda (gN1b53@test) ((lambda (gN1b55@conseq) ((lambda (gN1b57@altern) (list (gNac1@gNa01@build-lambda '#f (list gN1b51@y) (list 'if gN1b53@test gN1b55@conseq gN1b57@altern)) (list '(primitive syntax-dispatch) gN1b33@x (list 'quote gN1b4c@p)))) (gN1afc@gen-syntax-case gN1b33@x gN1b34@keys gN1b35@clauses gN1b36@r gN1b37@mr))) (gN1af6@build-dispatch-call gN1b4b@pvars gN1b3a@expr gN1b51@y gN1b36@r gN1b37@mr))) (if (eq? gN1b39@fender '#t) gN1b51@y ((lambda (gN1b59@call) (list 'if gN1b51@y gN1b59@call (list 'quote '#f))) (gN1af6@build-dispatch-call gN1b4b@pvars gN1b39@fender gN1b51@y gN1b36@r gN1b37@mr))))) (gNae5@gen-lexical 'tmp))))) gN1b48@gN1b46 gN1b47@gN1b44))))) (set! gN1afc@gen-syntax-case (lambda (gN1b11@x gN1b12@keys gN1b13@clauses gN1b14@r gN1b15@mr) (if (null? gN1b13@clauses) (list '(primitive syntax-error) gN1b11@x) ((lambda (gN1b1b@t) ((lambda (gN1b1d@ls/false) (if gN1b1d@ls/false (apply (lambda (gN1b1f@pat gN1b20@expr) (if (and (gNb5d@id? gN1b1f@pat) (not (gNb69@bound-id-member? gN1b1f@pat gN1b12@keys)) (not (gNd64@ellipsis? gN1b1f@pat))) (if (gNb63@free-id=? gN1b1f@pat (gNcec@scheme-stx '_)) (gNd84@chi-expr gN1b20@expr gN1b14@r gN1b15@mr) ((lambda (gN1b23@lab gN1b24@lex) ((lambda (gN1b27@body) (list (gNac1@gNa01@build-lambda '#f (list gN1b24@lex) gN1b27@body) gN1b11@x)) (gNd84@chi-expr (gNb49@add-subst (gNb1d@make-full-rib (list gN1b1f@pat) (list gN1b23@lab)) gN1b20@expr) (cons (cons gN1b23@lab (gNb77@make-binding 'syntax (cons gN1b24@lex '0))) gN1b14@r) gN1b15@mr))) (gNae9@gen-label gN1b1f@pat) (gNae5@gen-lexical gN1b1f@pat))) (gN1afa@gen-clause gN1b11@x gN1b12@keys (cdr gN1b13@clauses) gN1b14@r gN1b15@mr gN1b1f@pat '#t gN1b20@expr))) gN1b1d@ls/false) ((lambda (gN1b29@t) ((lambda (gN1b2b@ls/false) (if gN1b2b@ls/false (apply (lambda (gN1b2d@pat gN1b2e@fender gN1b2f@expr) (gN1afa@gen-clause gN1b11@x gN1b12@keys (cdr gN1b13@clauses) gN1b14@r gN1b15@mr gN1b2d@pat gN1b2e@fender gN1b2f@expr)) gN1b2b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1b29@t))) (gNd62@syntax-dispatch gN1b29@t '(any any any)))) gN1b1b@t))) (gNd62@syntax-dispatch gN1b1b@t '(any any)))) (car gN1b13@clauses))))) (lambda (gN1afd@e gN1afe@r gN1aff@mr) ((lambda (gN1b03@t) ((lambda (gN1b05@ls/false) (if gN1b05@ls/false (apply (lambda (gN1b07@expr gN1b08@keys gN1b09@clauses) (begin (gNd68@verify-literals gN1b08@keys gN1afd@e) ((lambda (gN1b0d@x) ((lambda (gN1b0f@body) (list (gNac1@gNa01@build-lambda '#f (list gN1b0d@x) gN1b0f@body) (gNd84@chi-expr gN1b07@expr gN1afe@r gN1aff@mr))) (gN1afc@gen-syntax-case gN1b0d@x gN1b08@keys gN1b09@clauses gN1afe@r gN1aff@mr))) (gNae5@gen-lexical 'tmp)))) gN1b05@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1b03@t))) (gNd62@syntax-dispatch gN1b03@t '(_ any each-any . each-any)))) gN1afd@e)))) '#f '#f '#f '#f)))) (set! gNd6c@ellipsis-map (lambda (gN1b81@proc gN1b82@ls . gN1b85@ls*) ((lambda (gN1b88@who) (begin (set! gN1b88@who '...) (begin (if (not (list? gN1b82@ls)) (assertion-violation gN1b88@who '"not a list" gN1b82@ls) (void)) (if (not (null? gN1b85@ls*)) ((lambda (gN1b89@n) (for-each (lambda (gN1b8b@x) (begin (if (not (list? gN1b8b@x)) (assertion-violation gN1b88@who '"not a list" gN1b8b@x) (void)) (if (not (= (length gN1b8b@x) gN1b89@n)) (assertion-violation gN1b88@who '"length mismatch" gN1b82@ls gN1b8b@x) (void)))) gN1b85@ls*)) (length gN1b82@ls)) (void)) (apply map gN1b81@proc gN1b82@ls gN1b85@ls*)))) '#f))) (set! gNd6e@syntax-transformer ((lambda () ((lambda (gN1b8e@gen-syntax gN1b90@gen-ref gN1b92@gen-append gN1b94@gen-mappend gN1b96@gen-map gN1b98@gen-cons gN1b9a@gen-vector gN1b9c@regen) (begin (set! gN1b8e@gen-syntax (lambda (gN1c05@src gN1c06@e gN1c07@r gN1c08@maps gN1c09@ellipsis? gN1c0a@vec?) ((lambda (gN1c11@t) ((lambda (gN1c13@ls/false) (if (and gN1c13@ls/false (apply (lambda (gN1c15@dots) (gN1c09@ellipsis? gN1c15@dots)) gN1c13@ls/false)) (apply (lambda (gN1c17@dots) (gNe42@syntax-violation '#f '"misplaced ellipsis in syntax form" gN1c05@src)) gN1c13@ls/false) ((lambda (gN1c19@t) ((lambda (gN1c1b@ls/false) (if (and gN1c1b@ls/false (apply (lambda (gN1c1d@id) (gNb5d@id? gN1c1d@id)) gN1c1b@ls/false)) (apply (lambda (gN1c1f@id) ((lambda (gN1c21@label) ((lambda (gN1c23@b) ((lambda () (if (eq? (gNb79@binding-type gN1c23@b) 'syntax) (call-with-values (lambda () ((lambda (gN1c29@var.lev) (gN1b90@gen-ref gN1c05@src (car gN1c29@var.lev) (cdr gN1c29@var.lev) gN1c08@maps)) (gNb7b@binding-value gN1c23@b))) (lambda (gN1c2b@gN1c26 gN1c2c@gN1c28) ((lambda (gN1c2f@maps gN1c30@var) (values (list 'ref gN1c30@var) gN1c2f@maps)) gN1c2c@gN1c28 gN1c2b@gN1c26))) (values (list 'quote gN1c06@e) gN1c08@maps))))) (gNb75@label->binding gN1c21@label gN1c07@r))) (gNb73@id->label gN1c06@e))) gN1c1b@ls/false) ((lambda (gN1c33@t) ((lambda (gN1c35@ls/false) (if (and gN1c35@ls/false (apply (lambda (gN1c37@dots gN1c38@e) (gN1c09@ellipsis? gN1c37@dots)) gN1c35@ls/false)) (apply (lambda (gN1c3b@dots gN1c3c@e) (if gN1c0a@vec? (gNe42@syntax-violation '#f '"misplaced ellipsis in syntax form" gN1c05@src) (gN1b8e@gen-syntax gN1c05@src gN1c3c@e gN1c07@r gN1c08@maps (lambda (gN1c3f@x) '#f) '#f))) gN1c35@ls/false) ((lambda (gN1c41@t) ((lambda (gN1c43@ls/false) (if (and gN1c43@ls/false (apply (lambda (gN1c45@x gN1c46@dots gN1c47@y) (gN1c09@ellipsis? gN1c46@dots)) gN1c43@ls/false)) (apply (lambda (gN1c4b@x gN1c4c@dots gN1c4d@y) ((letrec ((gN1c51@f (lambda (gN1c53@y gN1c54@k) ((lambda (gN1c57@t) ((lambda (gN1c59@ls/false) (if gN1c59@ls/false (apply (lambda () (gN1c54@k gN1c08@maps)) gN1c59@ls/false) ((lambda (gN1c5b@t) ((lambda (gN1c5d@ls/false) (if (and gN1c5d@ls/false (apply (lambda (gN1c5f@dots gN1c60@y) (gN1c09@ellipsis? gN1c5f@dots)) gN1c5d@ls/false)) (apply (lambda (gN1c63@dots gN1c64@y) (gN1c51@f gN1c64@y (lambda (gN1c67@maps) (call-with-values (lambda () (gN1c54@k (cons '() gN1c67@maps))) (lambda (gN1c6d@gN1c6a gN1c6e@gN1c6c) ((lambda (gN1c71@maps gN1c72@x) (if (null? (car gN1c71@maps)) (gNe42@syntax-violation '#f '"extra ellipsis in syntax form" gN1c05@src) (values (gN1b94@gen-mappend gN1c72@x (car gN1c71@maps)) (cdr gN1c71@maps)))) gN1c6e@gN1c6c gN1c6d@gN1c6a)))))) gN1c5d@ls/false) ((lambda (gN1c75@t) ((lambda (gN1c77@ls/false) (if gN1c77@ls/false (apply (lambda () (call-with-values (lambda () (gN1b8e@gen-syntax gN1c05@src gN1c53@y gN1c07@r gN1c08@maps gN1c09@ellipsis? gN1c0a@vec?)) (lambda (gN1c7d@gN1c7a gN1c7e@gN1c7c) ((lambda (gN1c81@maps gN1c82@y) (call-with-values (lambda () (gN1c54@k gN1c81@maps)) (lambda (gN1c89@gN1c86 gN1c8a@gN1c88) ((lambda (gN1c8d@maps gN1c8e@x) (values (gN1b92@gen-append gN1c8e@x gN1c82@y) gN1c8d@maps)) gN1c8a@gN1c88 gN1c89@gN1c86)))) gN1c7e@gN1c7c gN1c7d@gN1c7a)))) gN1c77@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1c75@t))) (gNd62@syntax-dispatch gN1c75@t '_))) gN1c5b@t))) (gNd62@syntax-dispatch gN1c5b@t '(any . any)))) gN1c57@t))) (gNd62@syntax-dispatch gN1c57@t '()))) gN1c53@y)))) gN1c51@f) gN1c4d@y (lambda (gN1c91@maps) (call-with-values (lambda () (gN1b8e@gen-syntax gN1c05@src gN1c4b@x gN1c07@r (cons '() gN1c91@maps) gN1c09@ellipsis? '#f)) (lambda (gN1c97@gN1c94 gN1c98@gN1c96) ((lambda (gN1c9b@maps gN1c9c@x) (if (null? (car gN1c9b@maps)) (gNe42@syntax-violation '#f '"extra ellipsis in syntax form" gN1c05@src) (values (gN1b96@gen-map gN1c9c@x (car gN1c9b@maps)) (cdr gN1c9b@maps)))) gN1c98@gN1c96 gN1c97@gN1c94)))))) gN1c43@ls/false) ((lambda (gN1c9f@t) ((lambda (gN1ca1@ls/false) (if gN1ca1@ls/false (apply (lambda (gN1ca3@x gN1ca4@y) (call-with-values (lambda () (gN1b8e@gen-syntax gN1c05@src gN1ca3@x gN1c07@r gN1c08@maps gN1c09@ellipsis? '#f)) (lambda (gN1cab@gN1ca8 gN1cac@gN1caa) ((lambda (gN1caf@maps gN1cb0@xnew) (call-with-values (lambda () (gN1b8e@gen-syntax gN1c05@src gN1ca4@y gN1c07@r gN1caf@maps gN1c09@ellipsis? gN1c0a@vec?)) (lambda (gN1cb7@gN1cb4 gN1cb8@gN1cb6) ((lambda (gN1cbb@maps gN1cbc@ynew) (values (gN1b98@gen-cons gN1c06@e gN1ca3@x gN1ca4@y gN1cb0@xnew gN1cbc@ynew) gN1cbb@maps)) gN1cb8@gN1cb6 gN1cb7@gN1cb4)))) gN1cac@gN1caa gN1cab@gN1ca8)))) gN1ca1@ls/false) ((lambda (gN1cbf@t) ((lambda (gN1cc1@ls/false) (if gN1cc1@ls/false (apply (lambda (gN1cc3@ls) (call-with-values (lambda () (gN1b8e@gen-syntax gN1c05@src gN1cc3@ls gN1c07@r gN1c08@maps gN1c09@ellipsis? '#t)) (lambda (gN1cc9@gN1cc6 gN1cca@gN1cc8) ((lambda (gN1ccd@maps gN1cce@lsnew) (values (gN1b9a@gen-vector gN1c06@e gN1cc3@ls gN1cce@lsnew) gN1ccd@maps)) gN1cca@gN1cc8 gN1cc9@gN1cc6)))) gN1cc1@ls/false) ((lambda (gN1cd1@t) ((lambda (gN1cd3@ls/false) (if gN1cd3@ls/false (apply (lambda () (values (list 'quote gN1c06@e) gN1c08@maps)) gN1cd3@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1cd1@t))) (gNd62@syntax-dispatch gN1cd1@t '_))) gN1cbf@t))) (gNd62@syntax-dispatch gN1cbf@t '#(vector each-any)))) gN1c9f@t))) (gNd62@syntax-dispatch gN1c9f@t '(any . any)))) gN1c41@t))) (gNd62@syntax-dispatch gN1c41@t '(any any . any)))) gN1c33@t))) (gNd62@syntax-dispatch gN1c33@t '(any any)))) gN1c19@t))) (gNd62@syntax-dispatch gN1c19@t 'any))) gN1c11@t))) (gNd62@syntax-dispatch gN1c11@t 'any))) gN1c06@e))) (set! gN1b90@gen-ref (lambda (gN1beb@src gN1bec@var gN1bed@level gN1bee@maps) (if (= gN1bed@level '0) (values gN1bec@var gN1bee@maps) (if (null? gN1bee@maps) (gNe42@syntax-violation '#f '"missing ellipsis in syntax form" gN1beb@src) (call-with-values (lambda () (gN1b90@gen-ref gN1beb@src gN1bec@var (- gN1bed@level '1) (cdr gN1bee@maps))) (lambda (gN1bf7@gN1bf4 gN1bf8@gN1bf6) ((lambda (gN1bfb@outer-maps gN1bfc@outer-var) ((lambda (gN1bff@t) (if gN1bff@t ((lambda (gN1c01@b) (values (cdr gN1c01@b) gN1bee@maps)) gN1bff@t) ((lambda (gN1c03@inner-var) (values gN1c03@inner-var (cons (cons (cons gN1bfc@outer-var gN1c03@inner-var) (car gN1bee@maps)) gN1bfb@outer-maps))) (gNae5@gen-lexical 'tmp)))) (assq gN1bfc@outer-var (car gN1bee@maps)))) gN1bf8@gN1bf6 gN1bf7@gN1bf4))))))) (set! gN1b92@gen-append (lambda (gN1be7@x gN1be8@y) (if (fast-equal? gN1be8@y ''()) gN1be7@x (list 'append gN1be7@x gN1be8@y)))) (set! gN1b94@gen-mappend (lambda (gN1be3@e gN1be4@map-env) (list 'apply '(primitive append) (gN1b96@gen-map gN1be3@e gN1be4@map-env)))) (set! gN1b96@gen-map (lambda (gN1bd1@e gN1bd2@map-env) ((lambda (gN1bd5@formals gN1bd6@actuals) (if (eq? (car gN1bd1@e) 'ref) (car gN1bd6@actuals) (if (for-all (lambda (gN1bd9@x) (and (eq? (car gN1bd9@x) 'ref) (memq (cadr gN1bd9@x) gN1bd5@formals))) (cdr gN1bd1@e)) ((lambda (gN1bdb@args) (cons 'map (cons (list 'primitive (car gN1bd1@e)) gN1bdb@args))) (map ((lambda (gN1bdd@r) (lambda (gN1bdf@x) (cdr (assq (cadr gN1bdf@x) gN1bdd@r)))) (map cons gN1bd5@formals gN1bd6@actuals)) (cdr gN1bd1@e))) (cons* 'map (list 'lambda gN1bd5@formals gN1bd1@e) gN1bd6@actuals)))) (map cdr gN1bd2@map-env) (map (lambda (gN1be1@x) (list 'ref (car gN1be1@x))) gN1bd2@map-env)))) (set! gN1b98@gen-cons (lambda (gN1bc1@e gN1bc2@x gN1bc3@y gN1bc4@xnew gN1bc5@ynew) ((lambda (gN1bcb@t) (if (memv gN1bcb@t '(quote)) (if (eq? (car gN1bc4@xnew) 'quote) ((lambda (gN1bcd@xnew gN1bce@ynew) (if (and (eq? gN1bcd@xnew gN1bc2@x) (eq? gN1bce@ynew gN1bc3@y)) (list 'quote gN1bc1@e) (list 'quote (cons gN1bcd@xnew gN1bce@ynew)))) (cadr gN1bc4@xnew) (cadr gN1bc5@ynew)) (if (null? (cadr gN1bc5@ynew)) (list 'list gN1bc4@xnew) (list 'cons gN1bc4@xnew gN1bc5@ynew))) (if (memv gN1bcb@t '(list)) (cons 'list (cons gN1bc4@xnew (cdr gN1bc5@ynew))) (list 'cons gN1bc4@xnew gN1bc5@ynew)))) (car gN1bc5@ynew)))) (set! gN1b9a@gen-vector (lambda (gN1bbb@e gN1bbc@ls gN1bbd@lsnew) (if (eq? (car gN1bbd@lsnew) 'quote) (if (eq? (cadr gN1bbd@lsnew) gN1bbc@ls) (list 'quote gN1bbb@e) (list 'quote (list->vector (cadr gN1bbd@lsnew)))) (if (eq? (car gN1bbd@lsnew) 'list) (cons 'vector (cdr gN1bbd@lsnew)) (list 'list->vector gN1bbd@lsnew))))) (set! gN1b9c@regen (lambda (gN1bb5@x) ((lambda (gN1bb7@t) (if (memv gN1bb7@t '(ref)) (cadr gN1bb5@x) (if (memv gN1bb7@t '(primitive)) (list 'primitive (cadr gN1bb5@x)) (if (memv gN1bb7@t '(quote)) (list 'quote (cadr gN1bb5@x)) (if (memv gN1bb7@t '(lambda)) (gNac1@gNa01@build-lambda '#f (cadr gN1bb5@x) (gN1b9c@regen (caddr gN1bb5@x))) (if (memv gN1bb7@t '(map)) ((lambda (gN1bb9@ls) (cons '(primitive ellipsis-map) gN1bb9@ls)) (map gN1b9c@regen (cdr gN1bb5@x))) (cons (list 'primitive (car gN1bb5@x)) (map gN1b9c@regen (cdr gN1bb5@x))))))))) (car gN1bb5@x)))) (lambda (gN1b9d@e gN1b9e@r gN1b9f@mr) ((lambda (gN1ba3@t) ((lambda (gN1ba5@ls/false) (if gN1ba5@ls/false (apply (lambda (gN1ba7@x) (call-with-values (lambda () (gN1b8e@gen-syntax gN1b9d@e gN1ba7@x gN1b9e@r '() gNd64@ellipsis? '#f)) (lambda (gN1bad@gN1baa gN1bae@gN1bac) ((lambda (gN1bb1@maps gN1bb2@e) (gN1b9c@regen gN1bb2@e)) gN1bae@gN1bac gN1bad@gN1baa)))) gN1ba5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1ba3@t))) (gNd62@syntax-dispatch gN1ba3@t '(_ any)))) gN1b9d@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! gNd70@core-macro-transformer (lambda (gN1cd5@name) ((lambda (gN1cd7@t) (if (memv gN1cd7@t '(quote)) gNd12@quote-transformer (if (memv gN1cd7@t '(lambda)) gNd16@lambda-transformer (if (memv gN1cd7@t '(case-lambda)) gNd14@case-lambda-transformer (if (memv gN1cd7@t '(letrec)) gNcfa@letrec-transformer (if (memv gN1cd7@t '(letrec*)) gNcfc@letrec*-transformer (if (memv gN1cd7@t '(if)) gNd0a@if-transformer (if (memv gN1cd7@t '(and)) gNd0c@and-transformer (if (memv gN1cd7@t '(or)) gNd0e@or-transformer (if (memv gN1cd7@t '(foreign-call)) gNd5e@foreign-call-transformer (if (memv gN1cd7@t '(syntax-case)) gNd6a@syntax-case-transformer (if (memv gN1cd7@t '(syntax)) gNd6e@syntax-transformer (if (memv gN1cd7@t '(type-descriptor)) gNd00@type-descriptor-transformer (if (memv gN1cd7@t '(record-type-descriptor)) gNd02@record-type-descriptor-transformer (if (memv gN1cd7@t '(record-constructor-descriptor)) gNd04@record-constructor-descriptor-transformer (if (memv gN1cd7@t '(fluid-let-syntax)) gNcfe@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" gN1cd5@name))))))))))))))))) gN1cd5@name))) (set! gNd72@symbol-macro (lambda (gN1cd9@x gN1cda@set) ((lambda (gN1cdd@t) ((lambda (gN1cdf@ls/false) (if (and gN1cdf@ls/false (apply (lambda (gN1ce1@name) (and (gNb5d@id? gN1ce1@name) (memq (gNb5f@id->sym gN1ce1@name) gN1cda@set))) gN1cdf@ls/false)) (apply (lambda (gN1ce3@name) (gNd18@bless (list 'quote gN1ce3@name))) gN1cdf@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1cdd@t))) (gNd62@syntax-dispatch gN1cdd@t '(_ any)))) gN1cd9@x))) (set! gNd74@macro-transformer (lambda (gN1ce5@x) (if (procedure? gN1ce5@x) gN1ce5@x (if (symbol? gN1ce5@x) ((lambda (gN1ce7@t) (if (memv gN1ce7@t '(define-record-type)) gNd56@define-record-type-macro (if (memv gN1ce7@t '(define-struct)) gNd54@define-struct-macro (if (memv gN1ce7@t '(include)) gNd4a@include-macro (if (memv gN1ce7@t '(cond)) gNd46@cond-macro (if (memv gN1ce7@t '(let)) gNd1e@let-macro (if (memv gN1ce7@t '(do)) gNd3e@do-macro (if (memv gN1ce7@t '(or)) gNd42@or-macro (if (memv gN1ce7@t '(and)) gNd44@and-macro (if (memv gN1ce7@t '(let*)) gNd40@let*-macro (if (memv gN1ce7@t '(let-values)) gNd20@let-values-macro (if (memv gN1ce7@t '(let*-values)) gNd22@let*-values-macro (if (memv gN1ce7@t '(syntax-rules)) gNd4e@syntax-rules-macro (if (memv gN1ce7@t '(quasiquote)) gNd50@quasiquote-macro (if (memv gN1ce7@t '(quasisyntax)) gNd52@quasisyntax-macro (if (memv gN1ce7@t '(with-syntax)) gNd1a@with-syntax-macro (if (memv gN1ce7@t '(when)) gNd06@when-macro (if (memv gN1ce7@t '(unless)) gNd08@unless-macro (if (memv gN1ce7@t '(case)) gNd10@case-macro (if (memv gN1ce7@t '(identifier-syntax)) gNd3c@identifier-syntax-macro (if (memv gN1ce7@t '(time)) gNd34@time-macro (if (memv gN1ce7@t '(delay)) gNd36@delay-macro (if (memv gN1ce7@t '(assert)) gNd38@assert-macro (if (memv gN1ce7@t '(endianness)) gNd3a@endianness-macro (if (memv gN1ce7@t '(guard)) gNd30@guard-macro (if (memv gN1ce7@t '(define-enumeration)) gNd32@define-enumeration-macro (if (memv gN1ce7@t '(trace-lambda)) gNd24@trace-lambda-macro (if (memv gN1ce7@t '(trace-define)) gNd26@trace-define-macro (if (memv gN1ce7@t '(trace-define-syntax)) gNd28@trace-define-syntax-macro (if (memv gN1ce7@t '(trace-let-syntax)) gNd2c@trace-let-syntax-macro (if (memv gN1ce7@t '(trace-letrec-syntax)) gNd2e@trace-letrec-syntax-macro (if (memv gN1ce7@t '(define-condition-type)) gNd58@define-condition-type-macro (if (memv gN1ce7@t '(parameterize)) gNd5c@parameterize-macro (if (memv gN1ce7@t '(include-into)) gNd4c@include-into-macro (if (memv gN1ce7@t '(eol-style)) (lambda (gN1ce9@x) (gNd72@symbol-macro gN1ce9@x '(none lf cr crlf nel crnel ls))) (if (memv gN1ce7@t '(error-handling-mode)) (lambda (gN1ceb@x) (gNd72@symbol-macro gN1ceb@x '(ignore raise replace))) (if (memv gN1ce7@t '(buffer-mode)) (lambda (gN1ced@x) (gNd72@symbol-macro gN1ced@x '(none line block))) (if (memv gN1ce7@t '(file-options)) gNad8@file-options-macro (if (memv gN1ce7@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) gNd5a@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" gN1ce5@x)))))))))))))))))))))))))))))))))))))))) gN1ce5@x) (error 'core-macro-transformer '"BUG: invalid macro" gN1ce5@x))))) (set! gNd76@local-macro-transformer (lambda (gN1cef@x) (car gN1cef@x))) (set! gNd78@do-macro-call (lambda (gN1cf1@transformer gN1cf2@expr) ((lambda (gN1cf5@out) (begin ((letrec ((gN1cf7@f (lambda (gN1cf9@x) (if (not (gNb29@stx? gN1cf9@x)) (if (pair? gN1cf9@x) (begin (gN1cf7@f (car gN1cf9@x)) (gN1cf7@f (cdr gN1cf9@x))) (if (vector? gN1cf9@x) (vector-for-each gN1cf7@f gN1cf9@x) (if (symbol? gN1cf9@x) (gNe42@syntax-violation '#f '"raw symbol encountered in output of macro" gN1cf2@expr gN1cf9@x) (void)))) (void))))) gN1cf7@f) gN1cf5@out) (gNb47@add-mark (gNb3f@gen-mark) gN1cf5@out gN1cf2@expr))) (gN1cf1@transformer (gNb47@add-mark gNb41@anti-mark gN1cf2@expr '#f))))) (set! gNd7a@chi-macro (lambda (gN1cfb@p gN1cfc@e) (gNd78@do-macro-call (gNd74@macro-transformer gN1cfb@p) gN1cfc@e))) (set! gNd7c@chi-local-macro (lambda (gN1cff@p gN1d00@e) (gNd78@do-macro-call (gNd76@local-macro-transformer gN1cff@p) gN1d00@e))) (set! gNd7e@chi-global-macro (lambda (gN1d03@p gN1d04@e) ((lambda (gN1d07@lib gN1d08@loc) (begin (gN989@gN7d8@visit-library gN1d07@lib) ((lambda (gN1d0b@x) ((lambda (gN1d0d@transformer) (gNd78@do-macro-call gN1d0d@transformer gN1d04@e)) (if (procedure? gN1d0b@x) gN1d0b@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" gN1d0b@x)))) (symbol-value gN1d08@loc)))) (car gN1d03@p) (cdr gN1d03@p)))) (set! gNd80@chi-expr* (lambda (gN1d0f@e* gN1d10@r gN1d11@mr) (if (null? gN1d0f@e*) '() ((lambda (gN1d15@e) (cons gN1d15@e (gNd80@chi-expr* (cdr gN1d0f@e*) gN1d10@r gN1d11@mr))) (gNd84@chi-expr (car gN1d0f@e*) gN1d10@r gN1d11@mr))))) (set! gNd82@chi-application (lambda (gN1d17@e gN1d18@r gN1d19@mr) ((lambda (gN1d1d@t) ((lambda (gN1d1f@ls/false) (if gN1d1f@ls/false (apply (lambda (gN1d21@rator gN1d22@rands) ((lambda (gN1d25@rator) (cons gN1d25@rator (gNd80@chi-expr* gN1d22@rands gN1d18@r gN1d19@mr))) (gNd84@chi-expr gN1d21@rator gN1d18@r gN1d19@mr))) gN1d1f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1d1d@t))) (gNd62@syntax-dispatch gN1d1d@t '(any . each-any)))) gN1d17@e))) (set! gNd84@chi-expr (lambda (gN1d27@e gN1d28@r gN1d29@mr) (call-with-values (lambda () (gNb7f@syntax-type gN1d27@e gN1d28@r)) (lambda (gN1d33@gN1d2e gN1d34@gN1d30 gN1d35@gN1d32) ((lambda (gN1d39@kwd gN1d3a@value gN1d3b@type) ((lambda (gN1d3f@t) (if (memv gN1d3f@t '(core-macro)) ((lambda (gN1d41@transformer) (gN1d41@transformer gN1d27@e gN1d28@r gN1d29@mr)) (gNd70@core-macro-transformer gN1d3a@value)) (if (memv gN1d3f@t '(global)) ((lambda (gN1d43@lib) ((lambda (gN1d45@loc) ((lambda () (begin ((gNdca@inv-collector) gN1d43@lib) gN1d45@loc)))) (cdr gN1d3a@value))) (car gN1d3a@value)) (if (memv gN1d3f@t '(core-prim)) ((lambda (gN1d47@name) (list 'primitive gN1d47@name)) gN1d3a@value) (if (memv gN1d3f@t '(call)) (gNd82@chi-application gN1d27@e gN1d28@r gN1d29@mr) (if (memv gN1d3f@t '(lexical)) ((lambda (gN1d49@lex) gN1d49@lex) (gNcee@lexical-var gN1d3a@value)) (if (memv gN1d3f@t '(global-macro global-macro!)) (gNd84@chi-expr (gNd7e@chi-global-macro gN1d3a@value gN1d27@e) gN1d28@r gN1d29@mr) (if (memv gN1d3f@t '(local-macro local-macro!)) (gNd84@chi-expr (gNd7c@chi-local-macro gN1d3a@value gN1d27@e) gN1d28@r gN1d29@mr) (if (memv gN1d3f@t '(macro macro!)) (gNd84@chi-expr (gNd7a@chi-macro gN1d3a@value gN1d27@e) gN1d28@r gN1d29@mr) (if (memv gN1d3f@t '(constant)) ((lambda (gN1d4b@datum) (list 'quote gN1d4b@datum)) gN1d3a@value) (if (memv gN1d3f@t '(set!)) (gNd86@chi-set! gN1d27@e gN1d28@r gN1d29@mr) (if (memv gN1d3f@t '(begin)) ((lambda (gN1d4d@t) ((lambda (gN1d4f@ls/false) (if gN1d4f@ls/false (apply (lambda (gN1d51@x gN1d52@x*) (gNac4@gNa33@build-sequence '#f (gNd80@chi-expr* (cons gN1d51@x gN1d52@x*) gN1d28@r gN1d29@mr))) gN1d4f@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1d4d@t))) (gNd62@syntax-dispatch gN1d4d@t '(_ any . each-any)))) gN1d27@e) (if (memv gN1d3f@t '(let-syntax letrec-syntax)) ((lambda (gN1d55@t) ((lambda (gN1d57@ls/false) (if (and gN1d57@ls/false (apply (lambda (gN1d59@xlhs* gN1d5a@xrhs* gN1d5b@xbody gN1d5c@xbody*) (if (not (gNb65@valid-bound-ids? gN1d59@xlhs*)) (gNe42@syntax-violation '#f '"invalid identifiers" gN1d27@e) (void))) gN1d57@ls/false)) (apply (lambda (gN1d61@xlhs* gN1d62@xrhs* gN1d63@xbody gN1d64@xbody*) ((lambda (gN1d69@xlab*) ((lambda (gN1d6b@xrib) ((lambda (gN1d6d@xb*) ((lambda () (gNac4@gNa33@build-sequence '#f (gNd80@chi-expr* (map (lambda (gN1d6f@x) (gNb49@add-subst gN1d6b@xrib gN1d6f@x)) (cons gN1d63@xbody gN1d64@xbody*)) (append (map cons gN1d69@xlab* gN1d6d@xb*) gN1d28@r) (append (map cons gN1d69@xlab* gN1d6d@xb*) gN1d29@mr)))))) (map (lambda (gN1d71@x) (gNb95@make-eval-transformer (gNdbc@expand-transformer (if (eq? gN1d3b@type 'let-syntax) gN1d71@x (gNb49@add-subst gN1d6b@xrib gN1d71@x)) gN1d29@mr))) gN1d62@xrhs*))) (gNb1d@make-full-rib gN1d61@xlhs* gN1d69@xlab*))) (map gNae9@gen-label gN1d61@xlhs*))) gN1d57@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1d55@t))) (gNd62@syntax-dispatch gN1d55@t '(_ #(each (any any)) any . each-any)))) gN1d27@e) (if (memv gN1d3f@t '(displaced-lexical)) (gNe42@syntax-violation '#f '"identifier out of context" gN1d27@e) (if (memv gN1d3f@t '(syntax)) (gNe42@syntax-violation '#f '"reference to pattern variable outside a syntax form" gN1d27@e) (if (memv gN1d3f@t '(define define-syntax module import library)) (gNe42@syntax-violation '#f (string-append ((lambda (gN1d73@t) (if (memv gN1d73@t '(define)) '"a definition" (if (memv gN1d73@t '(define-syntax)) '"a define-syntax" (if (memv gN1d73@t '(module)) '"a module definition" (if (memv gN1d73@t '(library)) '"a library definition" (if (memv gN1d73@t '(import)) '"an import declaration" (if (memv gN1d73@t '(export)) '"an export declaration" '"a non-expression"))))))) gN1d3b@type) '" was found where an expression was expected") gN1d27@e) (if (memv gN1d3f@t '(mutable)) (gNe42@syntax-violation '#f '"attempt to reference an unexportable variable" gN1d27@e) (gNe42@syntax-violation '#f '"invalid expression" gN1d27@e)))))))))))))))))) gN1d3b@type)) gN1d35@gN1d32 gN1d34@gN1d30 gN1d33@gN1d2e))))) (set! gNd86@chi-set! (lambda (gN1d75@e gN1d76@r gN1d77@mr) ((lambda (gN1d7b@t) ((lambda (gN1d7d@ls/false) (if (and gN1d7d@ls/false (apply (lambda (gN1d7f@x gN1d80@v) (gNb5d@id? gN1d7f@x)) gN1d7d@ls/false)) (apply (lambda (gN1d83@x gN1d84@v) (call-with-values (lambda () (gNb7f@syntax-type gN1d83@x gN1d76@r)) (lambda (gN1d8d@gN1d88 gN1d8e@gN1d8a gN1d8f@gN1d8c) ((lambda (gN1d93@kwd gN1d94@value gN1d95@type) ((lambda (gN1d99@t) (if (memv gN1d99@t '(lexical)) (begin (gNcf2@set-lexical-mutable! gN1d94@value '#t) (list 'set! (gNcee@lexical-var gN1d94@value) (gNd84@chi-expr gN1d84@v gN1d76@r gN1d77@mr))) (if (memv gN1d99@t '(core-prim)) (gNe42@syntax-violation '#f '"cannot modify imported core primitive" gN1d75@e) (if (memv gN1d99@t '(global)) (gNe42@syntax-violation '#f '"attempt to modify imported binding" gN1d75@e) (if (memv gN1d99@t '(global-macro!)) (gNd84@chi-expr (gNd7e@chi-global-macro gN1d94@value gN1d75@e) gN1d76@r gN1d77@mr) (if (memv gN1d99@t '(local-macro!)) (gNd84@chi-expr (gNd7c@chi-local-macro gN1d94@value gN1d75@e) gN1d76@r gN1d77@mr) (if (memv gN1d99@t '(mutable)) (gNe42@syntax-violation '#f '"attempt to assign to an unexportable variable" gN1d75@e) (gNe42@syntax-violation '#f '"invalid syntax" gN1d75@e)))))))) gN1d95@type)) gN1d8f@gN1d8c gN1d8e@gN1d8a gN1d8d@gN1d88)))) gN1d7d@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1d7b@t))) (gNd62@syntax-dispatch gN1d7b@t '(_ any any)))) gN1d75@e))) (set! gNd88@verify-formals (lambda (gN1d9b@fmls gN1d9c@stx) ((lambda (gN1d9f@t) ((lambda (gN1da1@ls/false) (if gN1da1@ls/false (apply (lambda (gN1da3@x*) (if (not (gNb65@valid-bound-ids? gN1da3@x*)) (gNd1c@invalid-fmls-error gN1d9c@stx gN1d9b@fmls) (void))) gN1da1@ls/false) ((lambda (gN1da5@t) ((lambda (gN1da7@ls/false) (if gN1da7@ls/false (apply (lambda (gN1da9@x* gN1daa@x) (if (not (gNb65@valid-bound-ids? (cons gN1daa@x gN1da9@x*))) (gNd1c@invalid-fmls-error gN1d9c@stx gN1d9b@fmls) (void))) gN1da7@ls/false) ((lambda (gN1dad@t) ((lambda (gN1daf@ls/false) (if gN1daf@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid syntax" gN1d9c@stx)) gN1daf@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1dad@t))) (gNd62@syntax-dispatch gN1dad@t '_))) gN1da5@t))) (gNd62@syntax-dispatch gN1da5@t '#(each+ any () any)))) gN1d9f@t))) (gNd62@syntax-dispatch gN1d9f@t 'each-any))) gN1d9b@fmls))) (set! gNd8a@chi-lambda-clause (lambda (gN1db1@stx gN1db2@fmls gN1db3@body* gN1db4@r gN1db5@mr) ((lambda (gN1dbb@t) ((lambda (gN1dbd@ls/false) (if gN1dbd@ls/false (apply (lambda (gN1dbf@x*) (begin (gNd88@verify-formals gN1db2@fmls gN1db1@stx) ((lambda (gN1dc1@lex* gN1dc2@lab*) (values gN1dc1@lex* (gNd9a@chi-internal (gNb49@add-subst (gNb1d@make-full-rib gN1dbf@x* gN1dc2@lab*) gN1db3@body*) (gNcf6@add-lexicals gN1dc2@lab* gN1dc1@lex* gN1db4@r) gN1db5@mr))) (map gNae5@gen-lexical gN1dbf@x*) (map gNae9@gen-label gN1dbf@x*)))) gN1dbd@ls/false) ((lambda (gN1dc5@t) ((lambda (gN1dc7@ls/false) (if gN1dc7@ls/false (apply (lambda (gN1dc9@x* gN1dca@x) (begin (gNd88@verify-formals gN1db2@fmls gN1db1@stx) ((lambda (gN1dcd@lex* gN1dce@lab* gN1dcf@lex gN1dd0@lab) (values (append gN1dcd@lex* gN1dcf@lex) (gNd9a@chi-internal (gNb49@add-subst (gNb1d@make-full-rib (cons gN1dca@x gN1dc9@x*) (cons gN1dd0@lab gN1dce@lab*)) gN1db3@body*) (gNcf6@add-lexicals (cons gN1dd0@lab gN1dce@lab*) (cons gN1dcf@lex gN1dcd@lex*) gN1db4@r) gN1db5@mr))) (map gNae5@gen-lexical gN1dc9@x*) (map gNae9@gen-label gN1dc9@x*) (gNae5@gen-lexical gN1dca@x) (gNae9@gen-label gN1dca@x)))) gN1dc7@ls/false) ((lambda (gN1dd5@t) ((lambda (gN1dd7@ls/false) (if gN1dd7@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid syntax" gN1db2@fmls)) gN1dd7@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1dd5@t))) (gNd62@syntax-dispatch gN1dd5@t '_))) gN1dc5@t))) (gNd62@syntax-dispatch gN1dc5@t '#(each+ any () any)))) gN1dbb@t))) (gNd62@syntax-dispatch gN1dbb@t 'each-any))) gN1db2@fmls))) (set! gNd8c@chi-lambda-clause* (lambda (gN1dd9@stx gN1dda@fmls* gN1ddb@body** gN1ddc@r gN1ddd@mr) (if (null? gN1dda@fmls*) (values '() '()) (call-with-values (lambda () (gNd8a@chi-lambda-clause gN1dd9@stx (car gN1dda@fmls*) (car gN1ddb@body**) gN1ddc@r gN1ddd@mr)) (lambda (gN1de7@gN1de4 gN1de8@gN1de6) ((lambda (gN1deb@b gN1dec@a) (call-with-values (lambda () (gNd8c@chi-lambda-clause* gN1dd9@stx (cdr gN1dda@fmls*) (cdr gN1ddb@body**) gN1ddc@r gN1ddd@mr)) (lambda (gN1df3@gN1df0 gN1df4@gN1df2) ((lambda (gN1df7@b* gN1df8@a*) (values (cons gN1dec@a gN1df8@a*) (cons gN1deb@b gN1df7@b*))) gN1df4@gN1df2 gN1df3@gN1df0)))) gN1de8@gN1de6 gN1de7@gN1de4)))))) (set! gNd8e@chi-defun (lambda (gN1dfb@x gN1dfc@r gN1dfd@mr) ((lambda (gN1e01@fmls gN1e02@body*) (call-with-values (lambda () (gNd8a@chi-lambda-clause gN1e01@fmls gN1e01@fmls gN1e02@body* gN1dfc@r gN1dfd@mr)) (lambda (gN1e09@gN1e06 gN1e0a@gN1e08) ((lambda (gN1e0d@body gN1e0e@fmls) (gNac1@gNa01@build-lambda '#f gN1e0e@fmls gN1e0d@body)) gN1e0a@gN1e08 gN1e09@gN1e06)))) (car gN1dfb@x) (cdr gN1dfb@x)))) (set! gNd90@chi-rhs (lambda (gN1e11@rhs gN1e12@r gN1e13@mr) ((lambda (gN1e17@t) (if (memv gN1e17@t '(defun)) (gNd8e@chi-defun (cdr gN1e11@rhs) gN1e12@r gN1e13@mr) (if (memv gN1e17@t '(expr)) ((lambda (gN1e19@expr) (gNd84@chi-expr gN1e19@expr gN1e12@r gN1e13@mr)) (cdr gN1e11@rhs)) (if (memv gN1e17@t '(top-expr)) ((lambda (gN1e1b@expr) (gNac4@gNa33@build-sequence '#f (list (gNd84@chi-expr gN1e1b@expr gN1e12@r gN1e13@mr) (gNac5@gNa35@build-void)))) (cdr gN1e11@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" gN1e11@rhs))))) (car gN1e11@rhs)))) (set! gNd92@expand-interaction-rhs*/init* (lambda (gN1e1d@lhs* gN1e1e@rhs* gN1e1f@init* gN1e20@r gN1e21@mr) ((letrec ((gN1e27@f (lambda (gN1e29@lhs* gN1e2a@rhs*) (if (null? gN1e29@lhs*) (map (lambda (gN1e2d@x) (gNd84@chi-expr gN1e2d@x gN1e20@r gN1e21@mr)) gN1e1f@init*) ((lambda (gN1e2f@lhs gN1e30@rhs) ((lambda (gN1e33@t) (if (memv gN1e33@t '(defun)) ((lambda (gN1e35@rhs) (cons (list 'set! gN1e2f@lhs gN1e35@rhs) (gN1e27@f (cdr gN1e29@lhs*) (cdr gN1e2a@rhs*)))) (gNd8e@chi-defun (cdr gN1e30@rhs) gN1e20@r gN1e21@mr)) (if (memv gN1e33@t '(expr)) ((lambda (gN1e37@rhs) (cons (list 'set! gN1e2f@lhs gN1e37@rhs) (gN1e27@f (cdr gN1e29@lhs*) (cdr gN1e2a@rhs*)))) (gNd84@chi-expr (cdr gN1e30@rhs) gN1e20@r gN1e21@mr)) (if (memv gN1e33@t '(top-expr)) ((lambda (gN1e39@e) (cons gN1e39@e (gN1e27@f (cdr gN1e29@lhs*) (cdr gN1e2a@rhs*)))) (gNd84@chi-expr (cdr gN1e30@rhs) gN1e20@r gN1e21@mr)) (error 'expand-interaction '"invallid" gN1e30@rhs))))) (car gN1e30@rhs))) (car gN1e29@lhs*) (car gN1e2a@rhs*)))))) gN1e27@f) gN1e1d@lhs* gN1e1e@rhs*))) (set! gNd94@chi-rhs* (lambda (gN1e3b@rhs* gN1e3c@r gN1e3d@mr) ((letrec ((gN1e41@f (lambda (gN1e43@ls) (if (null? gN1e43@ls) '() ((lambda (gN1e45@a) (cons gN1e45@a (gN1e41@f (cdr gN1e43@ls)))) (gNd90@chi-rhs (car gN1e43@ls) gN1e3c@r gN1e3d@mr)))))) gN1e41@f) gN1e3b@rhs*))) (set! gNd96@find-bound=? (lambda (gN1e47@x gN1e48@lhs* gN1e49@rhs*) (if (null? gN1e48@lhs*) '#f (if (gNb61@bound-id=? gN1e47@x (car gN1e48@lhs*)) (car gN1e49@rhs*) (gNd96@find-bound=? gN1e47@x (cdr gN1e48@lhs*) (cdr gN1e49@rhs*)))))) (set! gNd98@find-dups (lambda (gN1e4d@ls) ((letrec ((gN1e4f@f (lambda (gN1e51@ls gN1e52@dups) (if (null? gN1e51@ls) gN1e52@dups ((lambda (gN1e55@t) (if gN1e55@t ((lambda (gN1e57@x) (gN1e4f@f (cdr gN1e51@ls) (cons (list (car gN1e51@ls) gN1e57@x) gN1e52@dups))) gN1e55@t) (gN1e4f@f (cdr gN1e51@ls) gN1e52@dups))) (gNd96@find-bound=? (car gN1e51@ls) (cdr gN1e51@ls) (cdr gN1e51@ls))))))) gN1e4f@f) gN1e4d@ls '()))) (set! gNd9a@chi-internal (lambda (gN1e59@e* gN1e5a@r gN1e5b@mr) ((lambda (gN1e5f@rib) (call-with-values (lambda () (gNdba@chi-body* (map (lambda (gN1e71@x) (gNb49@add-subst gN1e5f@rib gN1e71@x)) (gNb5b@syntax->list gN1e59@e*)) gN1e5a@r gN1e5b@mr '() '() '() '() '() gN1e5f@rib '#f)) (lambda (gN1e73@gN1e62 gN1e74@gN1e64 gN1e75@gN1e66 gN1e76@gN1e68 gN1e77@gN1e6a gN1e78@gN1e6c gN1e79@gN1e6e gN1e7a@gN1e70) ((lambda (gN1e83@_exp* gN1e84@kwd* gN1e85@mod** gN1e86@rhs* gN1e87@lex* gN1e88@mr gN1e89@r gN1e8a@e*) (begin (if (null? gN1e8a@e*) (gNe42@syntax-violation '#f '"no expression in body" gN1e8a@e*) (void)) ((lambda (gN1e93@init*) ((lambda (gN1e95@rhs*) ((lambda () (gNac7@gNa39@build-letrec* '#f (reverse gN1e87@lex*) (reverse gN1e95@rhs*) (gNac4@gNa33@build-sequence '#f gN1e93@init*))))) (gNd94@chi-rhs* gN1e86@rhs* gN1e89@r gN1e88@mr))) (gNd80@chi-expr* (append (apply append (reverse gN1e85@mod**)) gN1e8a@e*) gN1e89@r gN1e88@mr)))) gN1e7a@gN1e70 gN1e79@gN1e6e gN1e78@gN1e6c gN1e77@gN1e6a gN1e76@gN1e68 gN1e75@gN1e66 gN1e74@gN1e64 gN1e73@gN1e62)))) (gNb11@make-empty-rib)))) (set! gNd9c@parse-module (lambda (gN1e97@e) ((lambda (gN1e99@t) ((lambda (gN1e9b@ls/false) (if gN1e9b@ls/false (apply (lambda (gN1e9d@export* gN1e9e@b*) (begin (if (not (for-all gNb5d@id? gN1e9d@export*)) (gNe42@syntax-violation '#f '"module exports must be identifiers" gN1e97@e) (void)) (values '#f (list->vector gN1e9d@export*) gN1e9e@b*))) gN1e9b@ls/false) ((lambda (gN1ea1@t) ((lambda (gN1ea3@ls/false) (if gN1ea3@ls/false (apply (lambda (gN1ea5@name gN1ea6@export* gN1ea7@b*) (begin (if (not (gNb5d@id? gN1ea5@name)) (gNe42@syntax-violation '#f '"module name must be an identifier" gN1e97@e) (void)) (if (not (for-all gNb5d@id? gN1ea6@export*)) (gNe42@syntax-violation '#f '"module exports must be identifiers" gN1e97@e) (void)) (values gN1ea5@name (list->vector gN1ea6@export*) gN1ea7@b*))) gN1ea3@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1ea1@t))) (gNd62@syntax-dispatch gN1ea1@t '(_ any each-any . each-any)))) gN1e99@t))) (gNd62@syntax-dispatch gN1e99@t '(_ each-any . each-any)))) gN1e97@e))) (set! gNda6@module-interface? (lambda (gN1eab@x) (and (simple-struct? gN1eab@x) (eq? (simple-struct-name gN1eab@x) 'module-interface)))) (set! gNda8@module-interface-first-mark (lambda (gN1ead@x) (simple-struct-ref gN1ead@x '0))) (set! gNdaa@set-module-interface-first-mark! (lambda (gN1eaf@x gN1eb0@val) (simple-struct-set! gN1eaf@x '0 gN1eb0@val))) (set! gNdac@module-interface-exp-id-vec (lambda (gN1eb3@x) (simple-struct-ref gN1eb3@x '1))) (set! gNdae@set-module-interface-exp-id-vec! (lambda (gN1eb5@x gN1eb6@val) (simple-struct-set! gN1eb5@x '1 gN1eb6@val))) (set! gNdb0@module-interface-exp-lab-vec (lambda (gN1eb9@x) (simple-struct-ref gN1eb9@x '2))) (set! gNdb2@set-module-interface-exp-lab-vec! (lambda (gN1ebb@x gN1ebc@val) (simple-struct-set! gN1ebb@x '2 gN1ebc@val))) (set! gNdb4@dummy '3) (set! gNdb6@module-interface-exp-id* (lambda (gN1ebf@iface gN1ec0@id) ((lambda (gN1ec4@diff-marks) (begin (set! gN1ec4@diff-marks (lambda (gN1ecb@ls gN1ecc@x) (begin (if (null? gN1ecb@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (gN1ecf@a) (if (eq? gN1ecf@a gN1ecc@x) '() (cons gN1ecf@a (gN1ec4@diff-marks (cdr gN1ecb@ls) gN1ecc@x)))) (car gN1ecb@ls))))) ((lambda (gN1ec5@diff gN1ec6@id-vec) (if (null? gN1ec5@diff) gN1ec6@id-vec (vector-map (lambda (gN1ec9@x) (make-simple-struct 'stx '5 (list (gNb2b@stx-expr gN1ec9@x) (append gN1ec5@diff (gNb2f@stx-mark* gN1ec9@x)) '() '()))) gN1ec6@id-vec))) (gN1ec4@diff-marks (gNb2f@stx-mark* gN1ec0@id) (gNda8@module-interface-first-mark gN1ebf@iface)) (gNdac@module-interface-exp-id-vec gN1ebf@iface)))) '#f))) (set! gNdb8@chi-internal-module (lambda (gN1ed1@e gN1ed2@r gN1ed3@mr gN1ed4@lex* gN1ed5@rhs* gN1ed6@mod** gN1ed7@kwd*) (call-with-values (lambda () (gNd9c@parse-module gN1ed1@e)) (lambda (gN1ee5@gN1ee0 gN1ee6@gN1ee2 gN1ee7@gN1ee4) ((lambda (gN1eeb@e* gN1eec@exp-id* gN1eed@name) ((lambda (gN1ef1@rib) ((lambda (gN1ef3@e*) ((lambda () (call-with-values (lambda () (gNdba@chi-body* gN1ef3@e* gN1ed2@r gN1ed3@mr gN1ed4@lex* gN1ed5@rhs* gN1ed6@mod** gN1ed7@kwd* '() gN1ef1@rib '#f)) (lambda (gN1f05@gN1ef6 gN1f06@gN1ef8 gN1f07@gN1efa gN1f08@gN1efc gN1f09@gN1efe gN1f0a@gN1f00 gN1f0b@gN1f02 gN1f0c@gN1f04) ((lambda (gN1f15@_exp* gN1f16@kwd* gN1f17@mod** gN1f18@rhs* gN1f19@lex* gN1f1a@mr gN1f1b@r gN1f1c@e*) ((lambda (gN1f25@exp-lab* gN1f26@mod**) (if (not gN1eed@name) (values gN1f19@lex* gN1f18@rhs* gN1eec@exp-id* gN1f25@exp-lab* gN1f1b@r gN1f1a@mr gN1f26@mod** gN1f16@kwd*) ((lambda (gN1f29@lab gN1f2a@iface) (values gN1f19@lex* gN1f18@rhs* (vector gN1eed@name) (vector gN1f29@lab) (cons (cons gN1f29@lab (cons '$module gN1f2a@iface)) gN1f1b@r) (cons (cons gN1f29@lab (cons '$module gN1f2a@iface)) gN1f1a@mr) gN1f26@mod** gN1f16@kwd*)) (gNae9@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (gNb2f@stx-mark* gN1eed@name)) (vector-map (lambda (gN1f2d@x) (make-simple-struct 'stx '5 (list (gNb2b@stx-expr gN1f2d@x) (gNb2f@stx-mark* gN1f2d@x) '() '()))) gN1eec@exp-id*) gN1f25@exp-lab*))))) (vector-map (lambda (gN1f2f@x) (or (gNb73@id->label (make-simple-struct 'stx '5 (list (gNb5f@id->sym gN1f2f@x) (gNb2f@stx-mark* gN1f2f@x) (list gN1ef1@rib) '()))) (gNe42@syntax-violation '#f '"cannot find module export" gN1f2f@x))) gN1eec@exp-id*) (cons gN1f1c@e* gN1f17@mod**))) gN1f0c@gN1f04 gN1f0b@gN1f02 gN1f0a@gN1f00 gN1f09@gN1efe gN1f08@gN1efc gN1f07@gN1efa gN1f06@gN1ef8 gN1f05@gN1ef6)))))) (map (lambda (gN1f31@x) (gNb49@add-subst gN1ef1@rib gN1f31@x)) (gNb5b@syntax->list gN1eeb@e*)))) (gNb11@make-empty-rib))) gN1ee7@gN1ee4 gN1ee6@gN1ee2 gN1ee5@gN1ee0))))) (set! gNdba@chi-body* (lambda (gN1f33@e* gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f39@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?) (if (null? gN1f33@e*) (values gN1f33@e* gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f39@kwd* gN1f3a@exp*) ((lambda (gN1f47@e) (call-with-values (lambda () (gNb7f@syntax-type gN1f47@e gN1f34@r)) (lambda (gN1f4f@gN1f4a gN1f50@gN1f4c gN1f51@gN1f4e) ((lambda (gN1f55@kwd gN1f56@value gN1f57@type) ((lambda (gN1f5b@kwd*) ((lambda (gN1f5d@t) (if (memv gN1f5d@t '(define)) (call-with-values (lambda () (gNce6@parse-define gN1f47@e)) (lambda (gN1f63@gN1f60 gN1f64@gN1f62) ((lambda (gN1f67@rhs gN1f68@id) (begin (if (gNb69@bound-id-member? gN1f68@id gN1f5b@kwd*) (gNe42@syntax-violation '#f '"cannot redefine keyword" gN1f47@e) (void)) (call-with-values (lambda () (gNaed@gen-define-label+loc gN1f68@id gN1f3b@rib)) (lambda (gN1f6f@gN1f6c gN1f70@gN1f6e) ((lambda (gN1f73@lex gN1f74@lab) (begin (gNb13@extend-rib! gN1f3b@rib gN1f68@id gN1f74@lab) (gNdba@chi-body* (cdr gN1f33@e*) (gNcf4@add-lexical gN1f74@lab gN1f73@lex gN1f34@r) gN1f35@mr (cons gN1f73@lex gN1f36@lex*) (cons gN1f67@rhs gN1f37@rhs*) gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?))) gN1f70@gN1f6e gN1f6f@gN1f6c))))) gN1f64@gN1f62 gN1f63@gN1f60))) (if (memv gN1f5d@t '(define-syntax)) (call-with-values (lambda () (gNce8@parse-define-syntax gN1f47@e)) (lambda (gN1f7b@gN1f78 gN1f7c@gN1f7a) ((lambda (gN1f7f@rhs gN1f80@id) (begin (if (gNb69@bound-id-member? gN1f80@id gN1f5b@kwd*) (gNe42@syntax-violation '#f '"cannot redefine keyword" gN1f47@e) (void)) ((lambda (gN1f83@lab gN1f84@expanded-rhs) (begin (gNb13@extend-rib! gN1f3b@rib gN1f80@id gN1f83@lab) ((lambda (gN1f87@b) (gNdba@chi-body* (cdr gN1f33@e*) (cons (cons gN1f83@lab gN1f87@b) gN1f34@r) (cons (cons gN1f83@lab gN1f87@b) gN1f35@mr) gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?)) (gNb95@make-eval-transformer gN1f84@expanded-rhs)))) (gNaef@gen-define-label gN1f80@id gN1f3b@rib) (gNdbc@expand-transformer gN1f7f@rhs gN1f35@mr)))) gN1f7c@gN1f7a gN1f7b@gN1f78))) (if (memv gN1f5d@t '(let-syntax letrec-syntax)) ((lambda (gN1f89@t) ((lambda (gN1f8b@ls/false) (if (and gN1f8b@ls/false (apply (lambda (gN1f8d@xlhs* gN1f8e@xrhs* gN1f8f@xbody*) (if (not (gNb65@valid-bound-ids? gN1f8d@xlhs*)) (gNe42@syntax-violation '#f '"invalid identifiers" gN1f47@e) (void))) gN1f8b@ls/false)) (apply (lambda (gN1f93@xlhs* gN1f94@xrhs* gN1f95@xbody*) ((lambda (gN1f99@xlab*) ((lambda (gN1f9b@xrib) ((lambda (gN1f9d@xb*) ((lambda () (gNdba@chi-body* (append (map (lambda (gN1f9f@x) (gNb49@add-subst gN1f9b@xrib gN1f9f@x)) gN1f95@xbody*) (cdr gN1f33@e*)) (append (map cons gN1f99@xlab* gN1f9d@xb*) gN1f34@r) (append (map cons gN1f99@xlab* gN1f9d@xb*) gN1f35@mr) gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?)))) (map (lambda (gN1fa1@x) (gNb95@make-eval-transformer (gNdbc@expand-transformer (if (eq? gN1f57@type 'let-syntax) gN1fa1@x (gNb49@add-subst gN1f9b@xrib gN1fa1@x)) gN1f35@mr))) gN1f94@xrhs*))) (gNb1d@make-full-rib gN1f93@xlhs* gN1f99@xlab*))) (map gNae9@gen-label gN1f93@xlhs*))) gN1f8b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1f89@t))) (gNd62@syntax-dispatch gN1f89@t '(_ #(each (any any)) . each-any)))) gN1f47@e) (if (memv gN1f5d@t '(begin)) ((lambda (gN1fa3@t) ((lambda (gN1fa5@ls/false) (if gN1fa5@ls/false (apply (lambda (gN1fa7@x*) (gNdba@chi-body* (append gN1fa7@x* (cdr gN1f33@e*)) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?)) gN1fa5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1fa3@t))) (gNd62@syntax-dispatch gN1fa3@t '(_ . each-any)))) gN1f47@e) (if (memv gN1f5d@t '(global-macro global-macro!)) (gNdba@chi-body* (cons (gNb49@add-subst gN1f3b@rib (gNd7e@chi-global-macro gN1f56@value gN1f47@e)) (cdr gN1f33@e*)) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?) (if (memv gN1f5d@t '(local-macro local-macro!)) (gNdba@chi-body* (cons (gNb49@add-subst gN1f3b@rib (gNd7c@chi-local-macro gN1f56@value gN1f47@e)) (cdr gN1f33@e*)) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?) (if (memv gN1f5d@t '(macro macro!)) (gNdba@chi-body* (cons (gNb49@add-subst gN1f3b@rib (gNd7a@chi-macro gN1f56@value gN1f47@e)) (cdr gN1f33@e*)) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?) (if (memv gN1f5d@t '(module)) (call-with-values (lambda () (gNdb8@chi-internal-module gN1f47@e gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd*)) (lambda (gN1fb9@gN1faa gN1fba@gN1fac gN1fbb@gN1fae gN1fbc@gN1fb0 gN1fbd@gN1fb2 gN1fbe@gN1fb4 gN1fbf@gN1fb6 gN1fc0@gN1fb8) ((lambda (gN1fc9@kwd* gN1fca@mod** gN1fcb@mr gN1fcc@r gN1fcd@m-exp-lab* gN1fce@m-exp-id* gN1fcf@rhs* gN1fd0@lex*) (begin (vector-for-each (lambda (gN1fd9@id gN1fda@lab) (gNb13@extend-rib! gN1f3b@rib gN1fd9@id gN1fda@lab)) gN1fce@m-exp-id* gN1fcd@m-exp-lab*) (gNdba@chi-body* (cdr gN1f33@e*) gN1fcc@r gN1fcb@mr gN1fd0@lex* gN1fcf@rhs* gN1fca@mod** gN1fc9@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?))) gN1fc0@gN1fb8 gN1fbf@gN1fb6 gN1fbe@gN1fb4 gN1fbd@gN1fb2 gN1fbc@gN1fb0 gN1fbb@gN1fae gN1fba@gN1fac gN1fb9@gN1faa))) (if (memv gN1f5d@t '(library)) (begin (gNe24@library-expander (gNb71@stx->datum gN1f47@e)) (gNdba@chi-body* (cdr gN1f33@e*) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?)) (if (memv gN1f5d@t '(export)) ((lambda (gN1fdd@t) ((lambda (gN1fdf@ls/false) (if gN1fdf@ls/false (apply (lambda (gN1fe1@exp-decl*) (gNdba@chi-body* (cdr gN1f33@e*) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* (append gN1fe1@exp-decl* gN1f3a@exp*) gN1f3b@rib gN1f3c@top?)) gN1fdf@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN1fdd@t))) (gNd62@syntax-dispatch gN1fdd@t '(_ . each-any)))) gN1f47@e) (if (memv gN1f5d@t '(import)) ((lambda () ((lambda (gN1fe4@module-import? gN1fe6@module-import gN1fe8@library-import) (begin (set! gN1fe4@module-import? (lambda (gN2037@e) ((lambda (gN2039@t) ((lambda (gN203b@ls/false) (if (and gN203b@ls/false (apply (lambda (gN203d@id) (gNb5d@id? gN203d@id)) gN203b@ls/false)) (apply (lambda (gN203f@id) '#t) gN203b@ls/false) ((lambda (gN2041@t) ((lambda (gN2043@ls/false) (if gN2043@ls/false (apply (lambda (gN2045@imp*) '#f) gN2043@ls/false) ((lambda (gN2047@t) ((lambda (gN2049@ls/false) (if gN2049@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"malformed import form" gN2037@e)) gN2049@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2047@t))) (gNd62@syntax-dispatch gN2047@t '_))) gN2041@t))) (gNd62@syntax-dispatch gN2041@t '(_ . each-any)))) gN2039@t))) (gNd62@syntax-dispatch gN2039@t '(_ any)))) gN2037@e))) (set! gN1fe6@module-import (lambda (gN2015@e gN2016@r) ((lambda (gN2019@t) ((lambda (gN201b@ls/false) (if (and gN201b@ls/false (apply (lambda (gN201d@id) (gNb5d@id? gN201d@id)) gN201b@ls/false)) (apply (lambda (gN201f@id) (call-with-values (lambda () (gNb7f@syntax-type gN201f@id gN2016@r)) (lambda (gN2027@gN2022 gN2028@gN2024 gN2029@gN2026) ((lambda (gN202d@kwd gN202e@value gN202f@type) ((lambda (gN2033@t) (if (memv gN2033@t '($module)) ((lambda (gN2035@iface) (values (gNdb6@module-interface-exp-id* gN2035@iface gN201f@id) (gNdb0@module-interface-exp-lab-vec gN2035@iface))) gN202e@value) (gNe42@syntax-violation '#f '"invalid import" gN2015@e))) gN202f@type)) gN2029@gN2026 gN2028@gN2024 gN2027@gN2022)))) gN201b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2019@t))) (gNd62@syntax-dispatch gN2019@t '(_ any)))) gN2015@e))) (set! gN1fe8@library-import (lambda (gN1ff9@e) ((lambda (gN1ffb@t) ((lambda (gN1ffd@ls/false) (if gN1ffd@ls/false (apply (lambda (gN1fff@ctxt gN2000@imp*) (call-with-values (lambda () (gNdc4@parse-import-spec* (gNe48@syntax->datum gN2000@imp*))) (lambda (gN2007@gN2004 gN2008@gN2006) ((lambda (gN200b@subst-labels gN200c@subst-names) (values (vector-map (lambda (gN200f@name) (gNb3d@datum->stx gN1fff@ctxt gN200f@name)) gN200c@subst-names) gN200b@subst-labels)) gN2008@gN2006 gN2007@gN2004)))) gN1ffd@ls/false) ((lambda (gN2011@t) ((lambda (gN2013@ls/false) (if gN2013@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid import form" gN1ff9@e)) gN2013@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2011@t))) (gNd62@syntax-dispatch gN2011@t '_))) gN1ffb@t))) (gNd62@syntax-dispatch gN1ffb@t '(any . each-any)))) gN1ff9@e))) (begin (call-with-values (lambda () (if (gN1fe4@module-import? gN1f47@e) (gN1fe6@module-import gN1f47@e gN1f34@r) (gN1fe8@library-import gN1f47@e))) (lambda (gN1fed@gN1fea gN1fee@gN1fec) ((lambda (gN1ff1@lab* gN1ff2@id*) (vector-for-each (lambda (gN1ff5@id gN1ff6@lab) (gNb13@extend-rib! gN1f3b@rib gN1ff5@id gN1ff6@lab)) gN1ff2@id* gN1ff1@lab*)) gN1fee@gN1fec gN1fed@gN1fea))) (gNdba@chi-body* (cdr gN1f33@e*) gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?)))) '#f '#f '#f))) (if gN1f3c@top? (gNdba@chi-body* (cdr gN1f33@e*) gN1f34@r gN1f35@mr (cons (gNae5@gen-lexical 'dummy) gN1f36@lex*) (cons (cons 'top-expr gN1f47@e) gN1f37@rhs*) gN1f38@mod** gN1f5b@kwd* gN1f3a@exp* gN1f3b@rib gN1f3c@top?) (values gN1f33@e* gN1f34@r gN1f35@mr gN1f36@lex* gN1f37@rhs* gN1f38@mod** gN1f5b@kwd* gN1f3a@exp*)))))))))))))) gN1f57@type)) (if (gNb5d@id? gN1f55@kwd) (cons gN1f55@kwd gN1f39@kwd*) gN1f39@kwd*))) gN1f51@gN1f4e gN1f50@gN1f4c gN1f4f@gN1f4a)))) (car gN1f33@e*))))) (set! gNdbc@expand-transformer (lambda (gN204b@expr gN204c@r) ((lambda (gN204f@rtc) ((lambda (gN2051@expanded-rhs) (begin (for-each ((lambda (gN2053@mark-visit) (lambda (gN2055@x) (begin (gN988@gN7d6@invoke-library gN2055@x) (gN2053@mark-visit gN2055@x)))) (gNdcc@vis-collector)) (gN204f@rtc)) gN2051@expanded-rhs)) ((lambda (gN205f@gN2058 gN2060@gN205a gN2061@gN205c gN2062@gN205e) ((lambda (gN2067@swap) (dynamic-wind gN2067@swap (lambda () (gNd84@chi-expr gN204b@expr gN204c@r gN204c@r)) gN2067@swap)) (lambda () (begin ((lambda (gN2069@t) (begin (gN205f@gN2058 gN2061@gN205c) (set! gN2061@gN205c gN2069@t))) (gN205f@gN2058)) ((lambda (gN206b@t) (begin (gN2060@gN205a gN2062@gN205e) (set! gN2062@gN205e gN206b@t))) (gN2060@gN205a)))))) gNdca@inv-collector gNdcc@vis-collector gN204f@rtc (lambda (gN206d@x) (values))))) (gNdc8@make-collector)))) (set! gNdbe@parse-exports (lambda (gN206f@exp*) ((letrec ((gN2071@f (lambda (gN2073@exp* gN2074@int* gN2075@ext*) (if (null? gN2073@exp*) (begin (if (not (gNb65@valid-bound-ids? gN2075@ext*)) (gNe42@syntax-violation 'export '"invalid exports" (gNd98@find-dups gN2075@ext*)) (void)) (values (map gNe48@syntax->datum gN2075@ext*) gN2074@int*)) ((lambda (gN2079@t) ((lambda (gN207b@ls/false) (if gN207b@ls/false (apply (lambda (gN207d@rename gN207e@i* gN207f@e*) (begin (if (not (and (eq? (gNe48@syntax->datum gN207d@rename) 'rename) (for-all gNb5d@id? gN207e@i*) (for-all gNb5d@id? gN207f@e*))) (gNe42@syntax-violation 'export '"invalid export specifier" (car gN2073@exp*)) (void)) (gN2071@f (cdr gN2073@exp*) (append gN207e@i* gN2074@int*) (append gN207f@e* gN2075@ext*)))) gN207b@ls/false) ((lambda (gN2083@t) ((lambda (gN2085@ls/false) (if gN2085@ls/false (apply (lambda (gN2087@ie) (begin (if (not (gNb5d@id? gN2087@ie)) (gNe42@syntax-violation 'export '"invalid export" gN2087@ie) (void)) (gN2071@f (cdr gN2073@exp*) (cons gN2087@ie gN2074@int*) (cons gN2087@ie gN2075@ext*)))) gN2085@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2083@t))) (gNd62@syntax-dispatch gN2083@t 'any))) gN2079@t))) (gNd62@syntax-dispatch gN2079@t '(any . #(each (any any)))))) (car gN2073@exp*)))))) gN2071@f) gN206f@exp* '() '()))) (set! gNdc0@parse-library-name (lambda (gN2089@spec) ((lambda (gN208c@parse) (begin (set! gN208c@parse (lambda (gN2099@x) ((lambda (gN209b@t) ((lambda (gN209d@ls/false) (if (and gN209d@ls/false (apply (lambda (gN209f@v*) (for-all (lambda (gN20a1@x) ((lambda (gN20a3@x) (and (integer? gN20a3@x) (exact? gN20a3@x))) (gNe48@syntax->datum gN20a1@x))) gN209f@v*)) gN209d@ls/false)) (apply (lambda (gN20a5@v*) (values '() (map gNe48@syntax->datum gN20a5@v*))) gN209d@ls/false) ((lambda (gN20a7@t) ((lambda (gN20a9@ls/false) (if (and gN20a9@ls/false (apply (lambda (gN20ab@x gN20ac@rest) (symbol? (gNe48@syntax->datum gN20ab@x))) gN20a9@ls/false)) (apply (lambda (gN20af@x gN20b0@rest) (call-with-values (lambda () (gN208c@parse gN20b0@rest)) (lambda (gN20b7@gN20b4 gN20b8@gN20b6) ((lambda (gN20bb@v* gN20bc@x*) (values (cons (gNe48@syntax->datum gN20af@x) gN20bc@x*) gN20bb@v*)) gN20b8@gN20b6 gN20b7@gN20b4)))) gN20a9@ls/false) ((lambda (gN20bf@t) ((lambda (gN20c1@ls/false) (if gN20c1@ls/false (apply (lambda () (values '() '())) gN20c1@ls/false) ((lambda (gN20c3@t) ((lambda (gN20c5@ls/false) (if gN20c5@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid library name" gN2089@spec)) gN20c5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN20c3@t))) (gNd62@syntax-dispatch gN20c3@t '_))) gN20bf@t))) (gNd62@syntax-dispatch gN20bf@t '()))) gN20a7@t))) (gNd62@syntax-dispatch gN20a7@t '(any . any)))) gN209b@t))) (gNd62@syntax-dispatch gN209b@t '(each-any)))) gN2099@x))) (call-with-values (lambda () (gN208c@parse gN2089@spec)) (lambda (gN2091@gN208e gN2092@gN2090) ((lambda (gN2095@ver* gN2096@name*) (begin (if (null? gN2096@name*) (gNe42@syntax-violation '#f '"empty library name" gN2089@spec) (void)) (values gN2096@name* gN2095@ver*))) gN2092@gN2090 gN2091@gN208e))))) '#f))) (set! gNdc2@parse-library (lambda (gN20c7@e) ((lambda (gN20c9@t) ((lambda (gN20cb@ls/false) (if (and gN20cb@ls/false (apply (lambda (gN20cd@library gN20ce@name* gN20cf@export gN20d0@exp* gN20d1@import gN20d2@imp* gN20d3@b*) (and (eq? (gNe48@syntax->datum gN20cf@export) 'export) (eq? (gNe48@syntax->datum gN20d1@import) 'import) (eq? (gNe48@syntax->datum gN20cd@library) 'library))) gN20cb@ls/false)) (apply (lambda (gN20db@library gN20dc@name* gN20dd@export gN20de@exp* gN20df@import gN20e0@imp* gN20e1@b*) (values gN20dc@name* gN20de@exp* gN20e0@imp* gN20e1@b*)) gN20cb@ls/false) ((lambda (gN20e9@t) ((lambda (gN20eb@ls/false) (if gN20eb@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"malformed library" gN20c7@e)) gN20eb@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN20e9@t))) (gNd62@syntax-dispatch gN20e9@t '_))) gN20c9@t))) (gNd62@syntax-dispatch gN20c9@t '(any each-any (any . each-any) (any . each-any) . each-any)))) gN20c7@e))) (set! gNdc4@parse-import-spec* ((lambda () ((lambda (gN20ee@idsyn? gN20f0@dup-error gN20f2@merge-substs gN20f4@exclude* gN20f6@find* gN20f8@rem* gN20fa@remove-dups gN20fc@parse-library-name gN20fe@import-library gN2100@get-import gN2102@add-imports!) (begin (set! gN20ee@idsyn? (lambda (gN22f7@x) (symbol? (gNe48@syntax->datum gN22f7@x)))) (set! gN20f0@dup-error (lambda (gN22f5@name) (gNe42@syntax-violation 'import '"two imports with different bindings" gN22f5@name))) (set! gN20f2@merge-substs (lambda (gN22e3@s gN22e4@subst) ((lambda (gN22e8@insert-to-subst) (begin (set! gN22e8@insert-to-subst (lambda (gN22e9@a gN22ea@subst) ((lambda (gN22ed@name gN22ee@label) ((lambda (gN22f1@t) (if gN22f1@t ((lambda (gN22f3@x) (if (eq? (cdr gN22f3@x) gN22ee@label) gN22ea@subst (gN20f0@dup-error gN22ed@name))) gN22f1@t) (cons gN22e9@a gN22ea@subst))) (assq gN22ed@name gN22ea@subst))) (car gN22e9@a) (cdr gN22e9@a)))) (if (null? gN22e3@s) gN22e4@subst (gN22e8@insert-to-subst (car gN22e3@s) (gN20f2@merge-substs (cdr gN22e3@s) gN22e4@subst))))) '#f))) (set! gN20f4@exclude* (lambda (gN22b3@sym* gN22b4@subst) ((lambda (gN22b8@exclude) (begin (set! gN22b8@exclude (lambda (gN22d1@sym gN22d2@subst) (if (null? gN22d2@subst) (gNe42@syntax-violation 'import '"cannot rename unbound identifier" gN22d1@sym) (if (eq? gN22d1@sym (caar gN22d2@subst)) (values (cdar gN22d2@subst) (cdr gN22d2@subst)) ((lambda (gN22d5@a) (call-with-values (lambda () (gN22b8@exclude gN22d1@sym (cdr gN22d2@subst))) (lambda (gN22db@gN22d8 gN22dc@gN22da) ((lambda (gN22df@subst gN22e0@old) (values gN22e0@old (cons gN22d5@a gN22df@subst))) gN22dc@gN22da gN22db@gN22d8)))) (car gN22d2@subst)))))) (if (null? gN22b3@sym*) (values '() gN22b4@subst) (call-with-values (lambda () (gN22b8@exclude (car gN22b3@sym*) gN22b4@subst)) (lambda (gN22bd@gN22ba gN22be@gN22bc) ((lambda (gN22c1@subst gN22c2@old) (call-with-values (lambda () (gN20f4@exclude* (cdr gN22b3@sym*) gN22c1@subst)) (lambda (gN22c9@gN22c6 gN22ca@gN22c8) ((lambda (gN22cd@subst gN22ce@old*) (values (cons gN22c2@old gN22ce@old*) gN22cd@subst)) gN22ca@gN22c8 gN22c9@gN22c6)))) gN22be@gN22bc gN22bd@gN22ba)))))) '#f))) (set! gN20f6@find* (lambda (gN22ab@sym* gN22ac@subst) (map (lambda (gN22af@x) ((lambda (gN22b1@t) (if gN22b1@t (cdr gN22b1@t) (gNe42@syntax-violation 'import '"cannot find identifier" gN22af@x))) (assq gN22af@x gN22ac@subst))) gN22ab@sym*))) (set! gN20f8@rem* (lambda (gN22a3@sym* gN22a4@subst) ((letrec ((gN22a7@f (lambda (gN22a9@subst) (if (null? gN22a9@subst) '() (if (memq (caar gN22a9@subst) gN22a3@sym*) (gN22a7@f (cdr gN22a9@subst)) (cons (car gN22a9@subst) (gN22a7@f (cdr gN22a9@subst)))))))) gN22a7@f) gN22a4@subst))) (set! gN20fa@remove-dups (lambda (gN22a1@ls) (if (null? gN22a1@ls) '() (if (memq (car gN22a1@ls) (cdr gN22a1@ls)) (gN20fa@remove-dups (cdr gN22a1@ls)) (cons (car gN22a1@ls) (gN20fa@remove-dups (cdr gN22a1@ls))))))) (set! gN20fc@parse-library-name (lambda (gN21b9@spec) ((lambda (gN21bc@subversion? gN21be@subversion-pred gN21c0@version-pred) (begin (set! gN21bc@subversion? (lambda (gN229d@x) ((lambda (gN229f@x) (and (integer? gN229f@x) (exact? gN229f@x) (>= gN229f@x '0))) (gNe48@syntax->datum gN229d@x)))) (set! gN21be@subversion-pred (lambda (gN223d@x*) ((lambda (gN223f@t) ((lambda (gN2241@ls/false) (if (and gN2241@ls/false (apply (lambda (gN2243@n) (gN21bc@subversion? gN2243@n)) gN2241@ls/false)) (apply (lambda (gN2245@n) (lambda (gN2247@x) (= gN2247@x (gNe48@syntax->datum gN2245@n)))) gN2241@ls/false) ((lambda (gN2249@t) ((lambda (gN224b@ls/false) (if (and gN224b@ls/false (apply (lambda (gN224d@p? gN224e@sub*) (eq? (gNe48@syntax->datum gN224d@p?) 'and)) gN224b@ls/false)) (apply (lambda (gN2251@p? gN2252@sub*) ((lambda (gN2255@p*) (lambda (gN2257@x) (for-all (lambda (gN2259@p) (gN2259@p gN2257@x)) gN2255@p*))) (map gN21be@subversion-pred gN2252@sub*))) gN224b@ls/false) ((lambda (gN225b@t) ((lambda (gN225d@ls/false) (if (and gN225d@ls/false (apply (lambda (gN225f@p? gN2260@sub*) (eq? (gNe48@syntax->datum gN225f@p?) 'or)) gN225d@ls/false)) (apply (lambda (gN2263@p? gN2264@sub*) ((lambda (gN2267@p*) (lambda (gN2269@x) (exists (lambda (gN226b@p) (gN226b@p gN2269@x)) gN2267@p*))) (map gN21be@subversion-pred gN2264@sub*))) gN225d@ls/false) ((lambda (gN226d@t) ((lambda (gN226f@ls/false) (if (and gN226f@ls/false (apply (lambda (gN2271@p? gN2272@sub) (eq? (gNe48@syntax->datum gN2271@p?) 'not)) gN226f@ls/false)) (apply (lambda (gN2275@p? gN2276@sub) ((lambda (gN2279@p) (lambda (gN227b@x) (not (gN2279@p gN227b@x)))) (gN21be@subversion-pred gN2276@sub))) gN226f@ls/false) ((lambda (gN227d@t) ((lambda (gN227f@ls/false) (if (and gN227f@ls/false (apply (lambda (gN2281@p? gN2282@n) (and (eq? (gNe48@syntax->datum gN2281@p?) '<=) (gN21bc@subversion? gN2282@n))) gN227f@ls/false)) (apply (lambda (gN2285@p? gN2286@n) (lambda (gN2289@x) (<= gN2289@x (gNe48@syntax->datum gN2286@n)))) gN227f@ls/false) ((lambda (gN228b@t) ((lambda (gN228d@ls/false) (if (and gN228d@ls/false (apply (lambda (gN228f@p? gN2290@n) (and (eq? (gNe48@syntax->datum gN228f@p?) '>=) (gN21bc@subversion? gN2290@n))) gN228d@ls/false)) (apply (lambda (gN2293@p? gN2294@n) (lambda (gN2297@x) (>= gN2297@x (gNe48@syntax->datum gN2294@n)))) gN228d@ls/false) ((lambda (gN2299@t) ((lambda (gN229b@ls/false) (if gN229b@ls/false (apply (lambda () (gNe42@syntax-violation 'import '"invalid sub-version spec" gN21b9@spec gN223d@x*)) gN229b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2299@t))) (gNd62@syntax-dispatch gN2299@t '_))) gN228b@t))) (gNd62@syntax-dispatch gN228b@t '(any any)))) gN227d@t))) (gNd62@syntax-dispatch gN227d@t '(any any)))) gN226d@t))) (gNd62@syntax-dispatch gN226d@t '(any any)))) gN225b@t))) (gNd62@syntax-dispatch gN225b@t '(any . each-any)))) gN2249@t))) (gNd62@syntax-dispatch gN2249@t '(any . each-any)))) gN223f@t))) (gNd62@syntax-dispatch gN223f@t 'any))) gN223d@x*))) (set! gN21c0@version-pred (lambda (gN21ed@x*) ((lambda (gN21ef@t) ((lambda (gN21f1@ls/false) (if gN21f1@ls/false (apply (lambda () (lambda (gN21f3@x) '#t)) gN21f1@ls/false) ((lambda (gN21f5@t) ((lambda (gN21f7@ls/false) (if (and gN21f7@ls/false (apply (lambda (gN21f9@c gN21fa@ver*) (eq? (gNe48@syntax->datum gN21f9@c) 'and)) gN21f7@ls/false)) (apply (lambda (gN21fd@c gN21fe@ver*) ((lambda (gN2201@p*) (lambda (gN2203@x) (for-all (lambda (gN2205@p) (gN2205@p gN2203@x)) gN2201@p*))) (map gN21c0@version-pred gN21fe@ver*))) gN21f7@ls/false) ((lambda (gN2207@t) ((lambda (gN2209@ls/false) (if (and gN2209@ls/false (apply (lambda (gN220b@c gN220c@ver*) (eq? (gNe48@syntax->datum gN220b@c) 'or)) gN2209@ls/false)) (apply (lambda (gN220f@c gN2210@ver*) ((lambda (gN2213@p*) (lambda (gN2215@x) (exists (lambda (gN2217@p) (gN2217@p gN2215@x)) gN2213@p*))) (map gN21c0@version-pred gN2210@ver*))) gN2209@ls/false) ((lambda (gN2219@t) ((lambda (gN221b@ls/false) (if (and gN221b@ls/false (apply (lambda (gN221d@c gN221e@ver) (eq? (gNe48@syntax->datum gN221d@c) 'not)) gN221b@ls/false)) (apply (lambda (gN2221@c gN2222@ver) ((lambda (gN2225@p) (lambda (gN2227@x) (not (gN2225@p gN2227@x)))) (gN21c0@version-pred gN2222@ver))) gN221b@ls/false) ((lambda (gN2229@t) ((lambda (gN222b@ls/false) (if gN222b@ls/false (apply (lambda (gN222d@sub*) ((lambda (gN222f@p*) (lambda (gN2231@x) ((letrec ((gN2233@f (lambda (gN2235@p* gN2236@x) (if (null? gN2235@p*) '#t (if (null? gN2236@x) '#f (and ((car gN2235@p*) (car gN2236@x)) (gN2233@f (cdr gN2235@p*) (cdr gN2236@x)))))))) gN2233@f) gN222f@p* gN2231@x))) (map gN21be@subversion-pred gN222d@sub*))) gN222b@ls/false) ((lambda (gN2239@t) ((lambda (gN223b@ls/false) (if gN223b@ls/false (apply (lambda () (gNe42@syntax-violation 'import '"invalid version spec" gN21b9@spec gN21ed@x*)) gN223b@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2239@t))) (gNd62@syntax-dispatch gN2239@t '_))) gN2229@t))) (gNd62@syntax-dispatch gN2229@t 'each-any))) gN2219@t))) (gNd62@syntax-dispatch gN2219@t '(any any)))) gN2207@t))) (gNd62@syntax-dispatch gN2207@t '(any . each-any)))) gN21f5@t))) (gNd62@syntax-dispatch gN21f5@t '(any . each-any)))) gN21ef@t))) (gNd62@syntax-dispatch gN21ef@t '()))) gN21ed@x*))) ((letrec ((gN21c1@f (lambda (gN21c3@x) ((lambda (gN21c5@t) ((lambda (gN21c7@ls/false) (if gN21c7@ls/false (apply (lambda (gN21c9@version-spec*) (values '() (gN21c0@version-pred gN21c9@version-spec*))) gN21c7@ls/false) ((lambda (gN21cb@t) ((lambda (gN21cd@ls/false) (if (and gN21cd@ls/false (apply (lambda (gN21cf@x gN21d0@x*) (gN20ee@idsyn? gN21cf@x)) gN21cd@ls/false)) (apply (lambda (gN21d3@x gN21d4@x*) (call-with-values (lambda () (gN21c1@f gN21d4@x*)) (lambda (gN21db@gN21d8 gN21dc@gN21da) ((lambda (gN21df@pred gN21e0@name) (values (cons (gNe48@syntax->datum gN21d3@x) gN21e0@name) gN21df@pred)) gN21dc@gN21da gN21db@gN21d8)))) gN21cd@ls/false) ((lambda (gN21e3@t) ((lambda (gN21e5@ls/false) (if gN21e5@ls/false (apply (lambda () (values '() (lambda (gN21e7@x) '#t))) gN21e5@ls/false) ((lambda (gN21e9@t) ((lambda (gN21eb@ls/false) (if gN21eb@ls/false (apply (lambda () (gNe42@syntax-violation '#f '"invalid import spec" gN21b9@spec)) gN21eb@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN21e9@t))) (gNd62@syntax-dispatch gN21e9@t '_))) gN21e3@t))) (gNd62@syntax-dispatch gN21e3@t '()))) gN21cb@t))) (gNd62@syntax-dispatch gN21cb@t '(any . any)))) gN21c5@t))) (gNd62@syntax-dispatch gN21c5@t '(each-any)))) gN21c3@x)))) gN21c1@f) gN21b9@spec))) '#f '#f '#f))) (set! gN20fe@import-library (lambda (gN21a9@spec*) (call-with-values (lambda () (gN20fc@parse-library-name gN21a9@spec*)) (lambda (gN21af@gN21ac gN21b0@gN21ae) ((lambda (gN21b3@pred gN21b4@name) (begin (if (null? gN21b4@name) (gNe42@syntax-violation 'import '"empty library name" gN21a9@spec*) (void)) ((lambda (gN21b7@lib) (begin (if (not gN21b7@lib) (gNe42@syntax-violation 'import '"cannot find library with required name" gN21b4@name) (void)) (if (not (gN21b3@pred (gN95b@gN77c@library-version gN21b7@lib))) (gNe42@syntax-violation 'import '"library does not satisfy version specification" gN21a9@spec* gN21b7@lib) (void)) ((gNdce@imp-collector) gN21b7@lib) (gN963@gN78c@library-subst gN21b7@lib))) (gN981@gN7c8@find-library-by-name gN21b4@name)))) gN21b0@gN21ae gN21af@gN21ac))))) (set! gN2100@get-import (lambda (gN211b@spec) ((lambda (gN211d@t) ((lambda (gN211f@ls/false) (if (and gN211f@ls/false (apply (lambda (gN2121@x gN2122@x*) (not (memq (gNe48@syntax->datum gN2121@x) '(for rename except only prefix library)))) gN211f@ls/false)) (apply (lambda (gN2125@x gN2126@x*) (gN20fe@import-library (cons gN2125@x gN2126@x*))) gN211f@ls/false) ((lambda (gN2129@t) ((lambda (gN212b@ls/false) (if (and gN212b@ls/false (apply (lambda (gN212d@rename gN212e@isp gN212f@old* gN2130@new*) (and (eq? (gNe48@syntax->datum gN212d@rename) 'rename) (for-all gN20ee@idsyn? gN212f@old*) (for-all gN20ee@idsyn? gN2130@new*))) gN212b@ls/false)) (apply (lambda (gN2135@rename gN2136@isp gN2137@old* gN2138@new*) ((lambda (gN213d@subst gN213e@old* gN213f@new*) ((lambda (gN2143@old-label*) ((lambda (gN2145@subst) (gN20f2@merge-substs (map cons gN213f@new* gN2143@old-label*) gN2145@subst)) (gN20f8@rem* gN213e@old* gN213d@subst))) (gN20f6@find* gN213e@old* gN213d@subst))) (gN2100@get-import gN2136@isp) (map gNe48@syntax->datum gN2137@old*) (map gNe48@syntax->datum gN2138@new*))) gN212b@ls/false) ((lambda (gN2147@t) ((lambda (gN2149@ls/false) (if (and gN2149@ls/false (apply (lambda (gN214b@except gN214c@isp gN214d@sym*) (and (eq? (gNe48@syntax->datum gN214b@except) 'except) (for-all gN20ee@idsyn? gN214d@sym*))) gN2149@ls/false)) (apply (lambda (gN2151@except gN2152@isp gN2153@sym*) ((lambda (gN2157@subst) (gN20f8@rem* (map gNe48@syntax->datum gN2153@sym*) gN2157@subst)) (gN2100@get-import gN2152@isp))) gN2149@ls/false) ((lambda (gN2159@t) ((lambda (gN215b@ls/false) (if (and gN215b@ls/false (apply (lambda (gN215d@only gN215e@isp gN215f@sym*) (and (eq? (gNe48@syntax->datum gN215d@only) 'only) (for-all gN20ee@idsyn? gN215f@sym*))) gN215b@ls/false)) (apply (lambda (gN2163@only gN2164@isp gN2165@sym*) ((lambda (gN2169@subst gN216a@sym*) ((lambda (gN216d@sym*) ((lambda (gN216f@lab*) (map cons gN216d@sym* gN216f@lab*)) (gN20f6@find* gN216d@sym* gN2169@subst))) (gN20fa@remove-dups gN216a@sym*))) (gN2100@get-import gN2164@isp) (map gNe48@syntax->datum gN2165@sym*))) gN215b@ls/false) ((lambda (gN2171@t) ((lambda (gN2173@ls/false) (if (and gN2173@ls/false (apply (lambda (gN2175@prefix gN2176@isp gN2177@p) (and (eq? (gNe48@syntax->datum gN2175@prefix) 'prefix) (gN20ee@idsyn? gN2177@p))) gN2173@ls/false)) (apply (lambda (gN217b@prefix gN217c@isp gN217d@p) ((lambda (gN2181@subst gN2182@prefix) (map (lambda (gN2185@x) (cons (string->symbol (string-append gN2182@prefix (symbol->string (car gN2185@x)))) (cdr gN2185@x))) gN2181@subst)) (gN2100@get-import gN217c@isp) (symbol->string (gNe48@syntax->datum gN217d@p)))) gN2173@ls/false) ((lambda (gN2187@t) ((lambda (gN2189@ls/false) (if (and gN2189@ls/false (apply (lambda (gN218b@library gN218c@spec*) (eq? (gNe48@syntax->datum gN218b@library) 'library)) gN2189@ls/false)) (apply (lambda (gN218f@library gN2190@spec*) (gN20fe@import-library gN2190@spec*)) gN2189@ls/false) ((lambda (gN2193@t) ((lambda (gN2195@ls/false) (if (and gN2195@ls/false (apply (lambda (gN2197@for gN2198@isp gN2199@rest) (eq? (gNe48@syntax->datum gN2197@for) 'for)) gN2195@ls/false)) (apply (lambda (gN219d@for gN219e@isp gN219f@rest) (gN2100@get-import gN219e@isp)) gN2195@ls/false) ((lambda (gN21a3@t) ((lambda (gN21a5@ls/false) (if gN21a5@ls/false (apply (lambda (gN21a7@spec) (gNe42@syntax-violation 'import '"invalid import spec" gN21a7@spec)) gN21a5@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN21a3@t))) (gNd62@syntax-dispatch gN21a3@t 'any))) gN2193@t))) (gNd62@syntax-dispatch gN2193@t '(any any . any)))) gN2187@t))) (gNd62@syntax-dispatch gN2187@t '(any each-any)))) gN2171@t))) (gNd62@syntax-dispatch gN2171@t '(any any any)))) gN2159@t))) (gNd62@syntax-dispatch gN2159@t '(any any . each-any)))) gN2147@t))) (gNd62@syntax-dispatch gN2147@t '(any any . each-any)))) gN2129@t))) (gNd62@syntax-dispatch gN2129@t '(any any . #(each (any any)))))) gN211d@t))) (gNd62@syntax-dispatch gN211d@t '(any . each-any)))) gN211b@spec))) (set! gN2102@add-imports! (lambda (gN210b@imp gN210c@h) ((lambda (gN210f@subst) (for-each (lambda (gN2111@x) ((lambda (gN2113@name gN2114@label) ((lambda (gN2117@t) (if gN2117@t ((lambda (gN2119@l) (if (not (eq? gN2119@l gN2114@label)) (gN20f0@dup-error gN2113@name) (void))) gN2117@t) (hashtable-set! gN210c@h gN2113@name gN2114@label))) (hashtable-ref gN210c@h gN2113@name '#f))) (car gN2111@x) (cdr gN2111@x))) gN210f@subst)) (gN2100@get-import gN210b@imp)))) (lambda (gN2103@imp*) ((letrec ((gN2105@f (lambda (gN2107@imp* gN2108@h) (if (null? gN2107@imp*) (hashtable-entries gN2108@h) (begin (gN2102@add-imports! (car gN2107@imp*) gN2108@h) (gN2105@f (cdr gN2107@imp*) gN2108@h)))))) gN2105@f) gN2103@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! gNdc6@make-top-rib (lambda (gN22f9@names gN22fa@labels) ((lambda (gN22fd@rib) (begin (vector-for-each (lambda (gN22ff@name gN2300@label) (begin (if (not (symbol? gN22ff@name)) (error 'make-top-rib '"BUG: not a symbol" gN22ff@name) (void)) (gNb15@extend-rib/nc! gN22fd@rib (make-simple-struct 'stx '5 (list gN22ff@name gNae1@top-mark* '() '())) gN2300@label))) gN22f9@names gN22fa@labels) gN22fd@rib)) (gNb11@make-empty-rib)))) (set! gNdc8@make-collector (lambda () ((lambda (gN2303@ls) (lambda gN2307 ((lambda (gN2308) (if (= gN2308 '0) (apply (lambda () gN2303@ls) gN2307) (if (= gN2308 '1) (apply (lambda (gN2305@x) (set! gN2303@ls (gNada@set-cons gN2305@x gN2303@ls))) gN2307) (error 'apply '"invalid arg count")))) (length gN2307)))) '()))) (set! gNdca@inv-collector (gN6bc@gN59b@make-parameter (lambda gN2309@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (gN230b@x) (begin (if (not (procedure? gN230b@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" gN230b@x) (void)) gN230b@x)))) (set! gNdcc@vis-collector (gN6bc@gN59b@make-parameter (lambda gN230d@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (gN230f@x) (begin (if (not (procedure? gN230f@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" gN230f@x) (void)) gN230f@x)))) (set! gNdce@imp-collector (gN6bc@gN59b@make-parameter (lambda gN2311@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (gN2313@x) (begin (if (not (procedure? gN2313@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" gN2313@x) (void)) gN2313@x)))) (set! gNdd0@chi-library-internal (lambda (gN2315@e* gN2316@rib gN2317@top?) (call-with-values (lambda () (gNdba@chi-body* gN2315@e* '() '() '() '() '() '() '() gN2316@rib gN2317@top?)) (lambda (gN232b@gN231c gN232c@gN231e gN232d@gN2320 gN232e@gN2322 gN232f@gN2324 gN2330@gN2326 gN2331@gN2328 gN2332@gN232a) ((lambda (gN233b@exp* gN233c@_kwd* gN233d@mod** gN233e@rhs* gN233f@lex* gN2340@mr gN2341@r gN2342@e*) (values (append (apply append (reverse gN233d@mod**)) gN2342@e*) gN2341@r gN2340@mr (reverse gN233f@lex*) (reverse gN233e@rhs*) gN233b@exp*)) gN2332@gN232a gN2331@gN2328 gN2330@gN2326 gN232f@gN2324 gN232e@gN2322 gN232d@gN2320 gN232c@gN231e gN232b@gN231c))))) (set! gNdd2@chi-interaction-expr (lambda (gN234b@e gN234c@rib gN234d@r) (call-with-values (lambda () (gNdba@chi-body* (list gN234b@e) gN234d@r gN234d@r '() '() '() '() '() gN234c@rib '#t)) (lambda (gN2361@gN2352 gN2362@gN2354 gN2363@gN2356 gN2364@gN2358 gN2365@gN235a gN2366@gN235c gN2367@gN235e gN2368@gN2360) ((lambda (gN2371@_exp* gN2372@_kwd* gN2373@mod** gN2374@rhs* gN2375@lex* gN2376@mr gN2377@r gN2378@e*) ((lambda (gN2381@e*) ((lambda (gN2383@e) (values gN2383@e gN2377@r)) (if (null? gN2381@e*) (gNac5@gNa35@build-void) (if (null? (cdr gN2381@e*)) (car gN2381@e*) (gNac4@gNa33@build-sequence '#f gN2381@e*))))) (gNd92@expand-interaction-rhs*/init* (reverse gN2375@lex*) (reverse gN2374@rhs*) (append (apply append (reverse gN2373@mod**)) gN2378@e*) gN2377@r gN2376@mr))) gN2368@gN2360 gN2367@gN235e gN2366@gN235c gN2365@gN235a gN2364@gN2358 gN2363@gN2356 gN2362@gN2354 gN2361@gN2352))))) (set! gNdd4@library-body-expander (lambda (gN2385@name gN2386@main-exp* gN2387@imp* gN2388@b* gN2389@top?) ((lambda (gN2390@itc) (begin (set! gN2390@itc (gNdc8@make-collector)) ((lambda (gN2399@gN2392 gN239a@gN2394 gN239b@gN2396 gN239c@gN2398) ((lambda (gN23a1@swap) (dynamic-wind gN23a1@swap (lambda () (call-with-values (lambda () (gNdc4@parse-import-spec* gN2387@imp*)) (lambda (gN23a7@gN23a4 gN23a8@gN23a6) ((lambda (gN23ab@subst-labels gN23ac@subst-names) ((lambda (gN23af@rib) ((lambda (gN23b2@wrap) (begin (set! gN23b2@wrap (lambda (gN242d@x) (make-simple-struct 'stx '5 (list gN242d@x gNae1@top-mark* (list gN23af@rib) '())))) ((lambda (gN23b3@b* gN23b4@main-exp* gN23b5@rtc gN23b6@vtc) ((lambda (gN23c3@gN23bc gN23c4@gN23be gN23c5@gN23c0 gN23c6@gN23c2) ((lambda (gN23cb@swap) (dynamic-wind gN23cb@swap (lambda () (call-with-values (lambda () (gNdd0@chi-library-internal gN23b3@b* gN23af@rib gN2389@top?)) (lambda (gN23d9@gN23ce gN23da@gN23d0 gN23db@gN23d2 gN23dc@gN23d4 gN23dd@gN23d6 gN23de@gN23d8) ((lambda (gN23e5@internal-exp* gN23e6@rhs* gN23e7@lex* gN23e8@mr gN23e9@r gN23ea@init*) (call-with-values (lambda () (gNdbe@parse-exports (append gN23b4@main-exp* gN23e5@internal-exp*))) (lambda (gN23f5@gN23f2 gN23f6@gN23f4) ((lambda (gN23f9@exp-id* gN23fa@exp-name*) (begin (gNb19@seal-rib! gN23af@rib) ((lambda (gN23fd@init*) ((lambda (gN23ff@rhs*) ((lambda () (begin (gNb1b@unseal-rib! gN23af@rib) ((lambda (gN2401@loc* gN2402@export-subst) ((lambda (gN2406@errstr) (begin (set! gN2406@errstr '"attempt to export mutated variable") (call-with-values (lambda () (gNe2e@make-export-env/macros gN23e7@lex* gN2401@loc* gN23e9@r)) (lambda (gN240d@gN2408 gN240e@gN240a gN240f@gN240c) ((lambda (gN2413@macro* gN2414@global* gN2415@export-env) (begin (for-each (lambda (gN2419@s) ((lambda (gN241b@name gN241c@label) ((lambda (gN241f@p) (if gN241f@p ((lambda (gN2421@b) ((lambda (gN2423@type) (if (eq? gN2423@type 'mutable) (gNe42@syntax-violation 'export gN2406@errstr gN241b@name) (void))) (car gN2421@b))) (cdr gN241f@p)) (void))) (assq gN241c@label gN2415@export-env))) (car gN2419@s) (cdr gN2419@s))) gN2402@export-subst) ((lambda (gN2425@invoke-body gN2426@invoke-definitions) (values (gN2390@itc) (gN23b5@rtc) (gN23b6@vtc) (gNac4@gNa33@build-sequence '#f (append gN2426@invoke-definitions (list gN2425@invoke-body))) gN2413@macro* gN2402@export-subst gN2415@export-env)) (gNac7@gNa39@build-letrec* '#f gN23e7@lex* gN23ff@rhs* (gNe2a@build-exports gN2414@global* gN23fd@init*)) (map gNac0@gN990@build-global-define (map cdr gN2414@global*))))) gN240f@gN240c gN240e@gN240a gN240d@gN2408))))) '#f)) (map gNae7@gen-global gN23e7@lex*) (gNe2c@make-export-subst gN23fa@exp-name* gN23f9@exp-id*)))))) (gNd94@chi-rhs* gN23e6@rhs* gN23e9@r gN23e8@mr))) (gNd80@chi-expr* gN23ea@init* gN23e9@r gN23e8@mr)))) gN23f6@gN23f4 gN23f5@gN23f2)))) gN23de@gN23d8 gN23dd@gN23d6 gN23dc@gN23d4 gN23db@gN23d2 gN23da@gN23d0 gN23d9@gN23ce)))) gN23cb@swap)) (lambda () (begin ((lambda (gN2429@t) (begin (gN23c3@gN23bc gN23c5@gN23c0) (set! gN23c5@gN23c0 gN2429@t))) (gN23c3@gN23bc)) ((lambda (gN242b@t) (begin (gN23c4@gN23be gN23c6@gN23c2) (set! gN23c6@gN23c2 gN242b@t))) (gN23c4@gN23be)))))) gNdca@inv-collector gNdcc@vis-collector gN23b5@rtc gN23b6@vtc)) (map gN23b2@wrap gN2388@b*) (map gN23b2@wrap gN2386@main-exp*) (gNdc8@make-collector) (gNdc8@make-collector)))) '#f)) (gNdc6@make-top-rib gN23ac@subst-names gN23ab@subst-labels))) gN23a8@gN23a6 gN23a7@gN23a4)))) gN23a1@swap)) (lambda () (begin ((lambda (gN242f@t) (begin (gN2399@gN2392 gN239b@gN2396) (set! gN239b@gN2396 gN242f@t))) (gN2399@gN2392)) ((lambda (gN2431@t) (begin (gN239a@gN2394 gN239c@gN2398) (set! gN239c@gN2398 gN2431@t))) (gN239a@gN2394)))))) gNdce@imp-collector gNe50@top-level-context gN2390@itc '#f))) '#f))) (set! gNdd6@core-library-expander (lambda (gN2433@e gN2434@verify-name) (call-with-values (lambda () (gNdc2@parse-library gN2433@e)) (lambda (gN243f@gN2438 gN2440@gN243a gN2441@gN243c gN2442@gN243e) ((lambda (gN2447@b* gN2448@imp* gN2449@exp* gN244a@name*) (call-with-values (lambda () (gNdc0@parse-library-name gN244a@name*)) (lambda (gN2453@gN2450 gN2454@gN2452) ((lambda (gN2457@ver gN2458@name) (begin (gN2434@verify-name gN2458@name) (call-with-values (lambda () (gNdd4@library-body-expander gN2458@name gN2449@exp* gN2448@imp* gN2447@b* '#f)) (lambda (gN2469@gN245c gN246a@gN245e gN246b@gN2460 gN246c@gN2462 gN246d@gN2464 gN246e@gN2466 gN246f@gN2468) ((lambda (gN2477@export-env gN2478@export-subst gN2479@visit-code gN247a@invoke-code gN247b@visit-req* gN247c@invoke-req* gN247d@imp*) (values gN2458@name gN2457@ver gN247d@imp* gN247c@invoke-req* gN247b@visit-req* gN247a@invoke-code gN2479@visit-code gN2478@export-subst gN2477@export-env)) gN246f@gN2468 gN246e@gN2466 gN246d@gN2464 gN246c@gN2462 gN246b@gN2460 gN246a@gN245e gN2469@gN245c))))) gN2454@gN2452 gN2453@gN2450)))) gN2442@gN243e gN2441@gN243c gN2440@gN243a gN243f@gN2438))))) (set! gNdd8@parse-top-level-program (lambda (gN2485@e*) ((lambda (gN2487@t) ((lambda (gN2489@ls/false) (if (and gN2489@ls/false (apply (lambda (gN248b@import gN248c@imp* gN248d@b*) (eq? (gNe48@syntax->datum gN248b@import) 'import)) gN2489@ls/false)) (apply (lambda (gN2491@import gN2492@imp* gN2493@b*) (values gN2492@imp* gN2493@b*)) gN2489@ls/false) ((lambda (gN2497@t) ((lambda (gN2499@ls/false) (if (and gN2499@ls/false (apply (lambda (gN249b@import gN249c@x gN249d@y) (eq? (gNe48@syntax->datum gN249b@import) 'import)) gN2499@ls/false)) (apply (lambda (gN24a1@import gN24a2@x gN24a3@y) (gNe42@syntax-violation 'expander '"invalid syntax of top-level program" (gNb57@syntax-car gN2485@e*))) gN2499@ls/false) ((lambda (gN24a7@t) ((lambda (gN24a9@ls/false) (if gN24a9@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) gN24a9@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN24a7@t))) (gNd62@syntax-dispatch gN24a7@t '_))) gN2497@t))) (gNd62@syntax-dispatch gN2497@t '((any . any) . any)))) gN2487@t))) (gNd62@syntax-dispatch gN2487@t '((any . each-any) . each-any)))) gN2485@e*))) (set! gNdda@top-level-expander (lambda (gN24ab@e*) (call-with-values (lambda () (gNdd8@parse-top-level-program gN24ab@e*)) (lambda (gN24b1@gN24ae gN24b2@gN24b0) ((lambda (gN24b5@b* gN24b6@imp*) (call-with-values (lambda () (gNdd4@library-body-expander '() '() gN24b6@imp* gN24b5@b* '#t)) (lambda (gN24c7@gN24ba gN24c8@gN24bc gN24c9@gN24be gN24ca@gN24c0 gN24cb@gN24c2 gN24cc@gN24c4 gN24cd@gN24c6) ((lambda (gN24d5@export-env gN24d6@export-subst gN24d7@visit-code gN24d8@invoke-code gN24d9@visit-req* gN24da@invoke-req* gN24db@imp*) (values gN24da@invoke-req* gN24d8@invoke-code)) gN24cd@gN24c6 gN24cc@gN24c4 gN24cb@gN24c2 gN24ca@gN24c0 gN24c9@gN24be gN24c8@gN24bc gN24c7@gN24ba)))) gN24b2@gN24b0 gN24b1@gN24ae))))) (set! gNddc@rp (gN6b9@gN595@make-record-printer 'env (lambda (gN24e3@x gN24e4@p gN24e5@wr) (display '"#<environment>" gN24e4@p)))) (set! gNde6@env? (lambda (gN24e9@x) (and (simple-struct? gN24e9@x) (eq? (simple-struct-name gN24e9@x) 'env)))) (set! gNde8@env-names (lambda (gN24eb@x) (simple-struct-ref gN24eb@x '0))) (set! gNdea@set-env-names! (lambda (gN24ed@x gN24ee@val) (simple-struct-set! gN24ed@x '0 gN24ee@val))) (set! gNdec@env-labels (lambda (gN24f1@x) (simple-struct-ref gN24f1@x '1))) (set! gNdee@set-env-labels! (lambda (gN24f3@x gN24f4@val) (simple-struct-set! gN24f3@x '1 gN24f4@val))) (set! gNdf0@env-itc (lambda (gN24f7@x) (simple-struct-ref gN24f7@x '2))) (set! gNdf2@set-env-itc! (lambda (gN24f9@x gN24fa@val) (simple-struct-set! gN24f9@x '2 gN24fa@val))) (set! gNdf4@dummy '3) (set! gNdf6@rp (gN6b9@gN595@make-record-printer 'interaction-env (lambda (gN24fd@x gN24fe@p gN24ff@wr) (display '"#<environment>" gN24fe@p)))) (set! gNe00@interaction-env? (lambda (gN2503@x) (and (simple-struct? gN2503@x) (eq? (simple-struct-name gN2503@x) 'interaction-env)))) (set! gNe02@interaction-env-rib (lambda (gN2505@x) (simple-struct-ref gN2505@x '0))) (set! gNe04@set-interaction-env-rib! (lambda (gN2507@x gN2508@val) (simple-struct-set! gN2507@x '0 gN2508@val))) (set! gNe06@interaction-env-r (lambda (gN250b@x) (simple-struct-ref gN250b@x '1))) (set! gNe08@set-interaction-env-r! (lambda (gN250d@x gN250e@val) (simple-struct-set! gN250d@x '1 gN250e@val))) (set! gNe0a@interaction-env-locs (lambda (gN2511@x) (simple-struct-ref gN2511@x '2))) (set! gNe0c@set-interaction-env-locs! (lambda (gN2513@x gN2514@val) (simple-struct-set! gN2513@x '2 gN2514@val))) (set! gNe0e@dummy '3) (set! gNe10@interaction-environment-symbols (lambda () (gNe18@environment-symbols (gNe4e@interaction-environment)))) (set! gNe12@environment-bindings (lambda (gN2517@e) (vector->list (vector-map (lambda (gN2519@name gN251a@label) (gNe14@parse-binding (cons gN2519@name (gN987@gN7d4@imported-label->binding gN251a@label)))) (gNde8@env-names gN2517@e) (gNdec@env-labels gN2517@e))))) (set! gNe14@parse-binding (lambda (gN251d@b) (cons (car gN251d@b) ((lambda (gN251f@t) (if (memv gN251f@t '(core-prim global)) 'procedure (if (memv gN251f@t '(core-macro macro global-macro)) 'syntax (if (memv gN251f@t '($core-rtd)) 'record (if (eq? (car gN251d@b) (cadr gN251d@b)) 'syntax 'unknown))))) (cadr gN251d@b))))) (set! gNe16@environment? (lambda (gN2521@x) (or (gNde6@env? gN2521@x) (gNe00@interaction-env? gN2521@x)))) (set! gNe18@environment-symbols (lambda (gN2523@x) (if (gNde6@env? gN2523@x) (vector->list (gNde8@env-names gN2523@x)) (if (gNe00@interaction-env? gN2523@x) (map values (gNafb@rib-sym* (gNe02@interaction-env-rib gN2523@x))) (assertion-violation 'environment-symbols '"not an environment" gN2523@x))))) (set! gNe1a@environment (lambda gN2525@imp* ((lambda (gN2527@itc) ((lambda (gN252d@gN252a gN252e@gN252c) ((lambda (gN2531@swap) (dynamic-wind gN2531@swap (lambda () (call-with-values (lambda () (gNdc4@parse-import-spec* gN2525@imp*)) (lambda (gN2537@gN2534 gN2538@gN2536) ((lambda (gN253b@subst-labels gN253c@subst-names) (make-simple-struct 'env '4 (list gN253c@subst-names gN253b@subst-labels gN2527@itc))) gN2538@gN2536 gN2537@gN2534)))) gN2531@swap)) (lambda () ((lambda (gN253f@t) (begin (gN252d@gN252a gN252e@gN252c) (set! gN252e@gN252c gN253f@t))) (gN252d@gN252a))))) gNdce@imp-collector gN2527@itc)) (gNdc8@make-collector)))) (set! gNe1c@null-environment (lambda (gN2541@n) (begin (if (not (eqv? gN2541@n '5)) (assertion-violation 'null-environment '"not 5" gN2541@n) (void)) (gNe1a@environment '(psyntax null-environment-5))))) (set! gNe1e@scheme-report-environment (lambda (gN2543@n) (begin (if (not (eqv? gN2543@n '5)) (assertion-violation 'scheme-report-environment '"not 5" gN2543@n) (void)) (gNe1a@environment '(psyntax scheme-report-environment-5))))) (set! gNe20@expand (lambda (gN2545@x gN2546@env) (if (gNde6@env? gN2546@env) ((lambda (gN2549@rib) ((lambda (gN254b@x gN254c@itc gN254d@rtc gN254e@vtc) ((lambda (gN2553@x) (begin (gNb19@seal-rib! gN2549@rib) (values gN2553@x (gN254d@rtc)))) ((lambda (gN2565@gN2556 gN2566@gN2558 gN2567@gN255a gN2568@gN255c gN2569@gN255e gN256a@gN2560 gN256b@gN2562 gN256c@gN2564) ((lambda (gN2575@swap) (dynamic-wind gN2575@swap (lambda () (gNd84@chi-expr gN254b@x '() '())) gN2575@swap)) (lambda () (begin ((lambda (gN2577@t) (begin (gN2565@gN2556 gN2569@gN255e) (set! gN2569@gN255e gN2577@t))) (gN2565@gN2556)) ((lambda (gN2579@t) (begin (gN2566@gN2558 gN256a@gN2560) (set! gN256a@gN2560 gN2579@t))) (gN2566@gN2558)) ((lambda (gN257b@t) (begin (gN2567@gN255a gN256b@gN2562) (set! gN256b@gN2562 gN257b@t))) (gN2567@gN255a)) ((lambda (gN257d@t) (begin (gN2568@gN255c gN256c@gN2564) (set! gN256c@gN2564 gN257d@t))) (gN2568@gN255c)))))) gNe50@top-level-context gNdca@inv-collector gNdcc@vis-collector gNdce@imp-collector '#f gN254d@rtc gN254e@vtc gN254c@itc))) (make-simple-struct 'stx '5 (list gN2545@x gNae1@top-mark* (list gN2549@rib) '())) (gNdf0@env-itc gN2546@env) (gNdc8@make-collector) (gNdc8@make-collector))) (gNdc6@make-top-rib (gNde8@env-names gN2546@env) (gNdec@env-labels gN2546@env))) (if (gNe00@interaction-env? gN2546@env) ((lambda (gN257f@rib gN2580@r gN2581@rtc) ((lambda (gN2585@x) (call-with-values (lambda () ((lambda (gN259b@gN258c gN259c@gN258e gN259d@gN2590 gN259e@gN2592 gN259f@gN2594 gN25a0@gN2596 gN25a1@gN2598 gN25a2@gN259a) ((lambda (gN25ab@swap) (dynamic-wind gN25ab@swap (lambda () (gNdd2@chi-interaction-expr gN2585@x gN257f@rib gN2580@r)) gN25ab@swap)) (lambda () (begin ((lambda (gN25ad@t) (begin (gN259b@gN258c gN259f@gN2594) (set! gN259f@gN2594 gN25ad@t))) (gN259b@gN258c)) ((lambda (gN25af@t) (begin (gN259c@gN258e gN25a0@gN2596) (set! gN25a0@gN2596 gN25af@t))) (gN259c@gN258e)) ((lambda (gN25b1@t) (begin (gN259d@gN2590 gN25a1@gN2598) (set! gN25a1@gN2598 gN25b1@t))) (gN259d@gN2590)) ((lambda (gN25b3@t) (begin (gN259e@gN2592 gN25a2@gN259a) (set! gN25a2@gN259a gN25b3@t))) (gN259e@gN2592)))))) gNe50@top-level-context gNdca@inv-collector gNdcc@vis-collector gNdce@imp-collector gN2546@env gN2581@rtc (gNdc8@make-collector) (gNdc8@make-collector))) (lambda (gN25b5@gN2588 gN25b6@gN258a) ((lambda (gN25b9@r^ gN25ba@e) (begin (gNe08@set-interaction-env-r! gN2546@env gN25b9@r^) (values gN25ba@e (gN2581@rtc)))) gN25b6@gN258a gN25b5@gN2588)))) (make-simple-struct 'stx '5 (list gN2545@x gNae1@top-mark* (list gN257f@rib) '())))) (gNe02@interaction-env-rib gN2546@env) (gNe06@interaction-env-r gN2546@env) (gNdc8@make-collector)) (assertion-violation 'expand '"not an environment" gN2546@env))))) (set! gNe22@eval (lambda (gN25bd@x gN25be@env) (begin (if (not (gNe16@environment? gN25be@env)) (error 'eval '"not an environment" gN25be@env) (void)) (call-with-values (lambda () (gNe20@expand gN25bd@x gN25be@env)) (lambda (gN25c5@gN25c2 gN25c6@gN25c4) ((lambda (gN25c9@invoke-req* gN25ca@x) (begin (for-each gN988@gN7d6@invoke-library gN25c9@invoke-req*) (eval-core (gN712@gN6ca@expanded->core gN25ca@x)))) gN25c6@gN25c4 gN25c5@gN25c2)))))) (set! gNe24@library-expander (lambda gN263b ((lambda (gN263c) (if (= gN263c '3) (apply (lambda (gN25cd@x gN25ce@filename gN25cf@verify-name) ((lambda (gN25d4@build-visit-code gN25d6@visit!) (begin (set! gN25d4@build-visit-code (lambda (gN2629@macro*) (if (null? gN2629@macro*) (gNac5@gNa35@build-void) (gNac4@gNa33@build-sequence '#f (map (lambda (gN262b@x) ((lambda (gN262d@loc gN262e@src) (list 'set! gN262d@loc gN262e@src)) (car gN262b@x) (cddr gN262b@x))) gN2629@macro*))))) (set! gN25d6@visit! (lambda (gN2621@macro*) (for-each (lambda (gN2623@x) ((lambda (gN2625@loc gN2626@proc) (set-symbol-value! gN2625@loc gN2626@proc)) (car gN2623@x) (cadr gN2623@x))) gN2621@macro*))) (call-with-values (lambda () (gNdd6@core-library-expander gN25cd@x gN25cf@verify-name)) (lambda (gN25e9@gN25d8 gN25ea@gN25da gN25eb@gN25dc gN25ec@gN25de gN25ed@gN25e0 gN25ee@gN25e2 gN25ef@gN25e4 gN25f0@gN25e6 gN25f1@gN25e8) ((lambda (gN25fb@export-env gN25fc@export-subst gN25fd@macro* gN25fe@invoke-code gN25ff@vis* gN2600@inv* gN2601@imp* gN2602@ver gN2603@name) ((lambda (gN260d@id gN260e@name gN260f@ver gN2610@imp* gN2611@vis* gN2612@inv* gN2613@visit-proc gN2614@invoke-proc gN2615@visit-code gN2616@invoke-code) (begin (gN986@gN7d2@install-library gN260d@id gN260e@name gN260f@ver gN2610@imp* gN2611@vis* gN2612@inv* gN25fc@export-subst gN25fb@export-env gN2613@visit-proc gN2614@invoke-proc gN2615@visit-code gN2616@invoke-code '#t gN25ce@filename) (values gN260d@id gN260e@name gN260f@ver gN2610@imp* gN2611@vis* gN2612@inv* gN2616@invoke-code gN2615@visit-code gN25fc@export-subst gN25fb@export-env))) (gensym) gN2603@name gN2602@ver (map gN98c@gN7de@library-spec gN2601@imp*) (map gN98c@gN7de@library-spec gN25ff@vis*) (map gN98c@gN7de@library-spec gN2600@inv*) (lambda () (gN25d6@visit! gN25fd@macro*)) (lambda () (eval-core (gN712@gN6ca@expanded->core gN25fe@invoke-code))) (gN25d4@build-visit-code gN25fd@macro*) gN25fe@invoke-code)) gN25f1@gN25e8 gN25f0@gN25e6 gN25ef@gN25e4 gN25ee@gN25e2 gN25ed@gN25e0 gN25ec@gN25de gN25eb@gN25dc gN25ea@gN25da gN25e9@gN25d8))))) '#f '#f)) gN263b) (if (= gN263c '2) (apply (lambda (gN2631@x gN2632@filename) (gNe24@library-expander gN2631@x gN2632@filename (lambda (gN2635@x) (values)))) gN263b) (if (= gN263c '1) (apply (lambda (gN2637@x) (gNe24@library-expander gN2637@x '#f (lambda (gN2639@x) (values)))) gN263b) (error 'apply '"invalid arg count"))))) (length gN263b)))) (set! gNe26@boot-library-expand (lambda (gN263d@x) (call-with-values (lambda () (gNe24@library-expander gN263d@x)) (lambda (gN2653@gN2640 gN2654@gN2642 gN2655@gN2644 gN2656@gN2646 gN2657@gN2648 gN2658@gN264a gN2659@gN264c gN265a@gN264e gN265b@gN2650 gN265c@gN2652) ((lambda (gN2667@export-env gN2668@export-subst gN2669@visit-code gN266a@invoke-code gN266b@inv* gN266c@vis* gN266d@imp* gN266e@ver gN266f@name gN2670@id) (values gN266f@name gN266a@invoke-code gN2668@export-subst gN2667@export-env)) gN265c@gN2652 gN265b@gN2650 gN265a@gN264e gN2659@gN264c gN2658@gN264a gN2657@gN2648 gN2656@gN2646 gN2655@gN2644 gN2654@gN2642 gN2653@gN2640))))) (set! gNe28@rev-map-append (lambda (gN267b@f gN267c@ls gN267d@ac) (if (null? gN267c@ls) gN267d@ac (gNe28@rev-map-append gN267b@f (cdr gN267c@ls) (cons (gN267b@f (car gN267c@ls)) gN267d@ac))))) (set! gNe2a@build-exports (lambda (gN2681@lex*+loc* gN2682@init*) (gNac4@gNa33@build-sequence '#f (cons (gNac5@gNa35@build-void) (gNe28@rev-map-append (lambda (gN2685@x) (list 'set! (cdr gN2685@x) (car gN2685@x))) gN2681@lex*+loc* gN2682@init*))))) (set! gNe2c@make-export-subst (lambda (gN2687@name* gN2688@id*) (map (lambda (gN268b@name gN268c@id) ((lambda (gN268f@label) (begin (if (not gN268f@label) (gNe42@syntax-violation '#f '"cannot export unbound identifier" gN268c@id) (void)) (cons gN268b@name gN268f@label))) (gNb73@id->label gN268c@id))) gN2687@name* gN2688@id*))) (set! gNe2e@make-export-env/macros (lambda (gN2691@lex* gN2692@loc* gN2693@r) ((lambda (gN2698@lookup) (begin (set! gN2698@lookup (lambda (gN26b5@x) ((letrec ((gN26b7@f (lambda (gN26b9@x gN26ba@lex* gN26bb@loc*) (if (pair? gN26ba@lex*) (if (eq? gN26b9@x (car gN26ba@lex*)) (car gN26bb@loc*) (gN26b7@f gN26b9@x (cdr gN26ba@lex*) (cdr gN26bb@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) gN26b7@f) gN26b5@x gN2691@lex* gN2692@loc*))) ((letrec ((gN2699@f (lambda (gN269b@r gN269c@env gN269d@global* gN269e@macro*) (if (null? gN269b@r) (values gN269c@env gN269d@global* gN269e@macro*) ((lambda (gN26a3@x) ((lambda (gN26a5@label gN26a6@b) ((lambda (gN26a9@t) (if (memv gN26a9@t '(lexical)) ((lambda (gN26ab@v) ((lambda (gN26ad@loc gN26ae@type) (gN2699@f (cdr gN269b@r) (cons (cons* gN26a5@label gN26ae@type gN26ad@loc) gN269c@env) (cons (cons (gNcee@lexical-var gN26ab@v) gN26ad@loc) gN269d@global*) gN269e@macro*)) (gN2698@lookup (gNcee@lexical-var gN26ab@v)) (if (gNcf0@lexical-mutable? gN26ab@v) 'mutable 'global))) (gNb7b@binding-value gN26a6@b)) (if (memv gN26a9@t '(local-macro)) ((lambda (gN26b1@loc) (gN2699@f (cdr gN269b@r) (cons (cons* gN26a5@label 'global-macro gN26b1@loc) gN269c@env) gN269d@global* (cons (cons gN26b1@loc (gNb7b@binding-value gN26a6@b)) gN269e@macro*))) (gensym)) (if (memv gN26a9@t '(local-macro!)) ((lambda (gN26b3@loc) (gN2699@f (cdr gN269b@r) (cons (cons* gN26a5@label 'global-macro! gN26b3@loc) gN269c@env) gN269d@global* (cons (cons gN26b3@loc (gNb7b@binding-value gN26a6@b)) gN269e@macro*))) (gensym)) (if (memv gN26a9@t '($rtd $module)) (gN2699@f (cdr gN269b@r) (cons gN26a3@x gN269c@env) gN269d@global* gN269e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (gNb79@binding-type gN26a6@b) (gNb7b@binding-value gN26a6@b))))))) (gNb79@binding-type gN26a6@b))) (car gN26a3@x) (cdr gN26a3@x))) (car gN269b@r)))))) gN2699@f) gN2693@r '() '() '()))) '#f))) (set! gNe30@generate-temporaries (lambda (gN26bf@ls) ((lambda (gN26c1@t) ((lambda (gN26c3@ls/false) (if gN26c3@ls/false (apply (lambda (gN26c5@ls) (map (lambda (gN26c7@x) (make-simple-struct 'stx '5 (list ((lambda (gN26c9@x) (if (or (symbol? gN26c9@x) (string? gN26c9@x)) (gensym gN26c9@x) (gensym 't))) (gNe48@syntax->datum gN26c7@x)) gNae1@top-mark* '() '()))) gN26c5@ls)) gN26c3@ls/false) ((lambda (gN26cb@t) ((lambda (gN26cd@ls/false) (if gN26cd@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) gN26cd@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN26cb@t))) (gNd62@syntax-dispatch gN26cb@t '_))) gN26c1@t))) (gNd62@syntax-dispatch gN26c1@t 'each-any))) gN26bf@ls))) (set! gNe32@free-identifier=? (lambda (gN26cf@x gN26d0@y) (if (gNb5d@id? gN26cf@x) (if (gNb5d@id? gN26d0@y) (gNb63@free-id=? gN26cf@x gN26d0@y) (assertion-violation 'free-identifier=? '"not an identifier" gN26d0@y)) (assertion-violation 'free-identifier=? '"not an identifier" gN26cf@x)))) (set! gNe34@bound-identifier=? (lambda (gN26d3@x gN26d4@y) (if (gNb5d@id? gN26d3@x) (if (gNb5d@id? gN26d4@y) (gNb61@bound-id=? gN26d3@x gN26d4@y) (assertion-violation 'bound-identifier=? '"not an identifier" gN26d4@y)) (assertion-violation 'bound-identifier=? '"not an identifier" gN26d3@x)))) (set! gNe36@make-source-condition (lambda (gN26d7@x) ((lambda (gN26e1@gN26dc gN26e3@gN26de gN26e5@gN26dd gN26e8@gN26db gN26ea@make-source-condition gN26ec@gN26d9 gN26ee@gN26da gN26f0@source-condition? gN26f2@source-filename gN26f4@source-character) (begin (set! gN26e1@gN26dc (make-record-type-descriptor '&source-information gN2b31@gN2878@&condition-rtd 'gN26df '#f '#f '#((immutable file-name) (immutable character)))) (set! gN26e3@gN26de '#f) (set! gN26e5@gN26dd (make-record-constructor-descriptor gN26e1@gN26dc gN2b32@gN287a@&condition-rcd gN26e3@gN26de)) (set! gN26e8@gN26db (record-predicate gN26e1@gN26dc)) (set! gN26ea@make-source-condition (record-constructor gN26e5@gN26dd)) (set! gN26ec@gN26d9 (record-accessor gN26e1@gN26dc '0)) (set! gN26ee@gN26da (record-accessor gN26e1@gN26dc '1)) (set! gN26f0@source-condition? (condition-predicate gN26e1@gN26dc)) (set! gN26f2@source-filename (condition-accessor gN26e1@gN26dc gN26ec@gN26d9)) (set! gN26f4@source-character (condition-accessor gN26e1@gN26dc gN26ee@gN26da)) (if (pair? gN26d7@x) (gN26ea@make-source-condition (car gN26d7@x) (cdr gN26d7@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! gNe38@extract-position-condition (lambda (gN26f5@x) (gNe36@make-source-condition (gNe3a@expression-position gN26f5@x)))) (set! gNe3a@expression-position (lambda (gN26f7@x) (and (gNb29@stx? gN26f7@x) ((lambda (gN26f9@x) (and (gN6b1@gN585@annotation? gN26f9@x) (gN6b2@gN587@annotation-source gN26f9@x))) (gNb2b@stx-expr gN26f7@x))))) (set! gNe3c@assertion-error (lambda (gN26fb@expr gN26fc@pos) (raise (condition (gN2b61@gN293c@make-assertion-violation) (gN2b73@gN296e@make-who-condition 'assert) (gN2b37@gN28cf@make-message-condition '"assertion failed") (gN2b69@gN2953@make-irritants-condition (list gN26fb@expr)) (gNe36@make-source-condition gN26fc@pos))))) (set! gNe3e@syntax-error (lambda (gN26ff@x . gN2701@args) (begin (if (not (for-all string? gN2701@args)) (assertion-violation 'syntax-error '"invalid argument" gN2701@args) (void)) (raise (condition (gN2b37@gN28cf@make-message-condition (if (null? gN2701@args) '"invalid syntax" (apply string-append gN2701@args))) (gN2b95@gN29ca@make-syntax-violation (gNe48@syntax->datum gN26ff@x) '#f) (gNe38@extract-position-condition gN26ff@x)))))) (set! gNe40@syntax-violation* (lambda (gN2703@who gN2704@msg gN2705@form gN2706@condition-object) (begin (if (not (string? gN2704@msg)) (assertion-violation 'syntax-violation '"message is not a string" gN2704@msg) (void)) ((lambda (gN270b@who) (raise (condition (if gN270b@who (gN2b73@gN296e@make-who-condition gN270b@who) (condition)) (gN2b37@gN28cf@make-message-condition gN2704@msg) gN2706@condition-object (gNe38@extract-position-condition gN2705@form)))) (if (or (string? gN2703@who) (symbol? gN2703@who)) gN2703@who (if (not gN2703@who) ((lambda (gN270d@t) ((lambda (gN270f@ls/false) (if (and gN270f@ls/false (apply (lambda (gN2711@id) (gNb5d@id? gN2711@id)) gN270f@ls/false)) (apply (lambda (gN2713@id) (gNe48@syntax->datum gN2713@id)) gN270f@ls/false) ((lambda (gN2715@t) ((lambda (gN2717@ls/false) (if (and gN2717@ls/false (apply (lambda (gN2719@id gN271a@rest) (gNb5d@id? gN2719@id)) gN2717@ls/false)) (apply (lambda (gN271d@id gN271e@rest) (gNe48@syntax->datum gN271d@id)) gN2717@ls/false) ((lambda (gN2721@t) ((lambda (gN2723@ls/false) (if gN2723@ls/false (apply (lambda () '#f) gN2723@ls/false) (gNe42@syntax-violation '#f '"invalid syntax" gN2721@t))) (gNd62@syntax-dispatch gN2721@t '_))) gN2715@t))) (gNd62@syntax-dispatch gN2715@t '(any . any)))) gN270d@t))) (gNd62@syntax-dispatch gN270d@t 'any))) gN2705@form) (assertion-violation 'syntax-violation '"invalid who argument" gN2703@who))))))) (set! gNe42@syntax-violation (lambda gN2733 ((lambda (gN2734) (if (= gN2734 '3) (apply (lambda (gN2725@who gN2726@msg gN2727@form) (gNe42@syntax-violation gN2725@who gN2726@msg gN2727@form '#f)) gN2733) (if (= gN2734 '4) (apply (lambda (gN272b@who gN272c@msg gN272d@form gN272e@subform) (gNe40@syntax-violation* gN272b@who gN272c@msg gN272d@form (gN2b95@gN29ca@make-syntax-violation (gNe48@syntax->datum gN272d@form) (gNe48@syntax->datum gN272e@subform)))) gN2733) (error 'apply '"invalid arg count")))) (length gN2733)))) (set! gNe44@identifier? (lambda (gN2735@x) (gNb5d@id? gN2735@x))) (set! gNe46@datum->syntax (lambda (gN2737@id gN2738@datum) (if (gNb5d@id? gN2737@id) (gNb3d@datum->stx gN2737@id gN2738@datum) (assertion-violation 'datum->syntax '"not an identifier" gN2737@id)))) (set! gNe48@syntax->datum (lambda (gN273b@x) (gNb71@stx->datum gN273b@x))) (set! gNe4a@compile-r6rs-top-level (lambda (gN273d@x*) (call-with-values (lambda () (gNdda@top-level-expander gN273d@x*)) (lambda (gN2743@gN2740 gN2744@gN2742) ((lambda (gN2747@invoke-code gN2748@lib*) (lambda () (begin (for-each gN988@gN7d6@invoke-library gN2748@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (gN712@gN6ca@expanded->core gN2747@invoke-code)) (void)) (eval-core (gN712@gN6ca@expanded->core gN2747@invoke-code))))) gN2744@gN2742 gN2743@gN2740))))) (set! gNe4c@pre-compile-r6rs-top-level (lambda (gN274b@x*) (call-with-values (lambda () (gNdda@top-level-expander gN274b@x*)) (lambda (gN2751@gN274e gN2752@gN2750) ((lambda (gN2755@invoke-code gN2756@lib*) (begin (for-each gN988@gN7d6@invoke-library gN2756@lib*) (gN6ba@gN597@compile-core (gN712@gN6ca@expanded->core gN2755@invoke-code)))) gN2752@gN2750 gN2751@gN274e))))) (set! gNe4e@interaction-environment ((lambda (gN2759@the-env) (lambda () (or gN2759@the-env ((lambda (gN275b@lib gN275c@rib) (begin ((lambda (gN275f@subst) (begin (gNafd@set-rib-sym*! gN275c@rib (map car gN275f@subst)) (gNb01@set-rib-mark**! gN275c@rib (map (lambda (gN2761@x) gNae1@top-mark*) gN275f@subst)) (gNb05@set-rib-label*! gN275c@rib (map cdr gN275f@subst)))) (gN963@gN78c@library-subst gN275b@lib)) ((lambda (gN2763@env) (begin (set! gN2759@the-env gN2763@env) gN2763@env)) (make-simple-struct 'interaction-env '4 (list gN275c@rib '() '()))))) (gN981@gN7c8@find-library-by-name '(mosh interaction)) (gNb11@make-empty-rib))))) '#f)) (set! gNe50@top-level-context (gN6bc@gN59b@make-parameter '#f)) (begin (set! gN285e@gNe50@top-level-context gNe50@top-level-context) (set! gN285d@gNe4e@interaction-environment gNe4e@interaction-environment) (set! gN285c@gNe4c@pre-compile-r6rs-top-level gNe4c@pre-compile-r6rs-top-level) (set! gN285b@gNe4a@compile-r6rs-top-level gNe4a@compile-r6rs-top-level) (set! gN285a@gNe48@syntax->datum gNe48@syntax->datum) (set! gN2859@gNe46@datum->syntax gNe46@datum->syntax) (set! gN2858@gNe44@identifier? gNe44@identifier?) (set! gN2857@gNe42@syntax-violation gNe42@syntax-violation) (set! gN2856@gNe40@syntax-violation* gNe40@syntax-violation*) (set! gN2855@gNe3e@syntax-error gNe3e@syntax-error) (set! gN2854@gNe3c@assertion-error gNe3c@assertion-error) (set! gN2853@gNe3a@expression-position gNe3a@expression-position) (set! gN2852@gNe38@extract-position-condition gNe38@extract-position-condition) (set! gN2851@gNe36@make-source-condition gNe36@make-source-condition) (set! gN2850@gNe34@bound-identifier=? gNe34@bound-identifier=?) (set! gN284f@gNe32@free-identifier=? gNe32@free-identifier=?) (set! gN284e@gNe30@generate-temporaries gNe30@generate-temporaries) (set! gN284d@gNe2e@make-export-env/macros gNe2e@make-export-env/macros) (set! gN284c@gNe2c@make-export-subst gNe2c@make-export-subst) (set! gN284b@gNe2a@build-exports gNe2a@build-exports) (set! gN284a@gNe28@rev-map-append gNe28@rev-map-append) (set! gN2849@gNe26@boot-library-expand gNe26@boot-library-expand) (set! gN2848@gNe24@library-expander gNe24@library-expander) (set! gN2847@gNe22@eval gNe22@eval) (set! gN2846@gNe20@expand gNe20@expand) (set! gN2845@gNe1e@scheme-report-environment gNe1e@scheme-report-environment) (set! gN2844@gNe1c@null-environment gNe1c@null-environment) (set! gN2843@gNe1a@environment gNe1a@environment) (set! gN2842@gNe18@environment-symbols gNe18@environment-symbols) (set! gN2841@gNe16@environment? gNe16@environment?) (set! gN2840@gNe14@parse-binding gNe14@parse-binding) (set! gN283f@gNe12@environment-bindings gNe12@environment-bindings) (set! gN283e@gNe10@interaction-environment-symbols gNe10@interaction-environment-symbols) (set! gN283d@gNe0e@dummy gNe0e@dummy) (set! gN283c@gNe0c@set-interaction-env-locs! gNe0c@set-interaction-env-locs!) (set! gN283b@gNe0a@interaction-env-locs gNe0a@interaction-env-locs) (set! gN283a@gNe08@set-interaction-env-r! gNe08@set-interaction-env-r!) (set! gN2839@gNe06@interaction-env-r gNe06@interaction-env-r) (set! gN2838@gNe04@set-interaction-env-rib! gNe04@set-interaction-env-rib!) (set! gN2837@gNe02@interaction-env-rib gNe02@interaction-env-rib) (set! gN2836@gNe00@interaction-env? gNe00@interaction-env?) (set! gN2835@gNdf6@rp gNdf6@rp) (set! gN2834@gNdf4@dummy gNdf4@dummy) (set! gN2833@gNdf2@set-env-itc! gNdf2@set-env-itc!) (set! gN2832@gNdf0@env-itc gNdf0@env-itc) (set! gN2831@gNdee@set-env-labels! gNdee@set-env-labels!) (set! gN2830@gNdec@env-labels gNdec@env-labels) (set! gN282f@gNdea@set-env-names! gNdea@set-env-names!) (set! gN282e@gNde8@env-names gNde8@env-names) (set! gN282d@gNde6@env? gNde6@env?) (set! gN282c@gNddc@rp gNddc@rp) (set! gN282b@gNdda@top-level-expander gNdda@top-level-expander) (set! gN282a@gNdd8@parse-top-level-program gNdd8@parse-top-level-program) (set! gN2829@gNdd6@core-library-expander gNdd6@core-library-expander) (set! gN2828@gNdd4@library-body-expander gNdd4@library-body-expander) (set! gN2827@gNdd2@chi-interaction-expr gNdd2@chi-interaction-expr) (set! gN2826@gNdd0@chi-library-internal gNdd0@chi-library-internal) (set! gN2825@gNdce@imp-collector gNdce@imp-collector) (set! gN2824@gNdcc@vis-collector gNdcc@vis-collector) (set! gN2823@gNdca@inv-collector gNdca@inv-collector) (set! gN2822@gNdc8@make-collector gNdc8@make-collector) (set! gN2821@gNdc6@make-top-rib gNdc6@make-top-rib) (set! gN2820@gNdc4@parse-import-spec* gNdc4@parse-import-spec*) (set! gN281f@gNdc2@parse-library gNdc2@parse-library) (set! gN281e@gNdc0@parse-library-name gNdc0@parse-library-name) (set! gN281d@gNdbe@parse-exports gNdbe@parse-exports) (set! gN281c@gNdbc@expand-transformer gNdbc@expand-transformer) (set! gN281b@gNdba@chi-body* gNdba@chi-body*) (set! gN281a@gNdb8@chi-internal-module gNdb8@chi-internal-module) (set! gN2819@gNdb6@module-interface-exp-id* gNdb6@module-interface-exp-id*) (set! gN2818@gNdb4@dummy gNdb4@dummy) (set! gN2817@gNdb2@set-module-interface-exp-lab-vec! gNdb2@set-module-interface-exp-lab-vec!) (set! gN2816@gNdb0@module-interface-exp-lab-vec gNdb0@module-interface-exp-lab-vec) (set! gN2815@gNdae@set-module-interface-exp-id-vec! gNdae@set-module-interface-exp-id-vec!) (set! gN2814@gNdac@module-interface-exp-id-vec gNdac@module-interface-exp-id-vec) (set! gN2813@gNdaa@set-module-interface-first-mark! gNdaa@set-module-interface-first-mark!) (set! gN2812@gNda8@module-interface-first-mark gNda8@module-interface-first-mark) (set! gN2811@gNda6@module-interface? gNda6@module-interface?) (set! gN2810@gNd9c@parse-module gNd9c@parse-module) (set! gN280f@gNd9a@chi-internal gNd9a@chi-internal) (set! gN280e@gNd98@find-dups gNd98@find-dups) (set! gN280d@gNd96@find-bound=? gNd96@find-bound=?) (set! gN280c@gNd94@chi-rhs* gNd94@chi-rhs*) (set! gN280b@gNd92@expand-interaction-rhs*/init* gNd92@expand-interaction-rhs*/init*) (set! gN280a@gNd90@chi-rhs gNd90@chi-rhs) (set! gN2809@gNd8e@chi-defun gNd8e@chi-defun) (set! gN2808@gNd8c@chi-lambda-clause* gNd8c@chi-lambda-clause*) (set! gN2807@gNd8a@chi-lambda-clause gNd8a@chi-lambda-clause) (set! gN2806@gNd88@verify-formals gNd88@verify-formals) (set! gN2805@gNd86@chi-set! gNd86@chi-set!) (set! gN2804@gNd84@chi-expr gNd84@chi-expr) (set! gN2803@gNd82@chi-application gNd82@chi-application) (set! gN2802@gNd80@chi-expr* gNd80@chi-expr*) (set! gN2801@gNd7e@chi-global-macro gNd7e@chi-global-macro) (set! gN2800@gNd7c@chi-local-macro gNd7c@chi-local-macro) (set! gN27ff@gNd7a@chi-macro gNd7a@chi-macro) (set! gN27fe@gNd78@do-macro-call gNd78@do-macro-call) (set! gN27fd@gNd76@local-macro-transformer gNd76@local-macro-transformer) (set! gN27fc@gNd74@macro-transformer gNd74@macro-transformer) (set! gN27fb@gNd72@symbol-macro gNd72@symbol-macro) (set! gN27fa@gNd70@core-macro-transformer gNd70@core-macro-transformer) (set! gN27f9@gNd6e@syntax-transformer gNd6e@syntax-transformer) (set! gN27f8@gNd6c@ellipsis-map gNd6c@ellipsis-map) (set! gN27f7@gNd6a@syntax-case-transformer gNd6a@syntax-case-transformer) (set! gN27f6@gNd68@verify-literals gNd68@verify-literals) (set! gN27f5@gNd66@underscore? gNd66@underscore?) (set! gN27f4@gNd64@ellipsis? gNd64@ellipsis?) (set! gN27f3@gNd62@syntax-dispatch gNd62@syntax-dispatch) (set! gN27f2@gNd60@convert-pattern gNd60@convert-pattern) (set! gN27f1@gNd5e@foreign-call-transformer gNd5e@foreign-call-transformer) (set! gN27f0@gNd5c@parameterize-macro gNd5c@parameterize-macro) (set! gN27ef@gNd5a@incorrect-usage-macro gNd5a@incorrect-usage-macro) (set! gN27ee@gNd58@define-condition-type-macro gNd58@define-condition-type-macro) (set! gN27ed@gNd56@define-record-type-macro gNd56@define-record-type-macro) (set! gN27ec@gNd54@define-struct-macro gNd54@define-struct-macro) (set! gN27eb@gNd52@quasisyntax-macro gNd52@quasisyntax-macro) (set! gN27ea@gNd50@quasiquote-macro gNd50@quasiquote-macro) (set! gN27e9@gNd4e@syntax-rules-macro gNd4e@syntax-rules-macro) (set! gN27e8@gNd4c@include-into-macro gNd4c@include-into-macro) (set! gN27e7@gNd4a@include-macro gNd4a@include-macro) (set! gN27e6@gNd48@do-include gNd48@do-include) (set! gN27e5@gNd46@cond-macro gNd46@cond-macro) (set! gN27e4@gNd44@and-macro gNd44@and-macro) (set! gN27e3@gNd42@or-macro gNd42@or-macro) (set! gN27e2@gNd40@let*-macro gNd40@let*-macro) (set! gN27e1@gNd3e@do-macro gNd3e@do-macro) (set! gN27e0@gNd3c@identifier-syntax-macro gNd3c@identifier-syntax-macro) (set! gN27df@gNd3a@endianness-macro gNd3a@endianness-macro) (set! gN27de@gNd38@assert-macro gNd38@assert-macro) (set! gN27dd@gNd36@delay-macro gNd36@delay-macro) (set! gN27dc@gNd34@time-macro gNd34@time-macro) (set! gN27db@gNd32@define-enumeration-macro gNd32@define-enumeration-macro) (set! gN27da@gNd30@guard-macro gNd30@guard-macro) (set! gN27d9@gNd2e@trace-letrec-syntax-macro gNd2e@trace-letrec-syntax-macro) (set! gN27d8@gNd2c@trace-let-syntax-macro gNd2c@trace-let-syntax-macro) (set! gN27d7@gNd2a@trace-let/rec-syntax gNd2a@trace-let/rec-syntax) (set! gN27d6@gNd28@trace-define-syntax-macro gNd28@trace-define-syntax-macro) (set! gN27d5@gNd26@trace-define-macro gNd26@trace-define-macro) (set! gN27d4@gNd24@trace-lambda-macro gNd24@trace-lambda-macro) (set! gN27d3@gNd22@let*-values-macro gNd22@let*-values-macro) (set! gN27d2@gNd20@let-values-macro gNd20@let-values-macro) (set! gN27d1@gNd1e@let-macro gNd1e@let-macro) (set! gN27d0@gNd1c@invalid-fmls-error gNd1c@invalid-fmls-error) (set! gN27cf@gNd1a@with-syntax-macro gNd1a@with-syntax-macro) (set! gN27ce@gNd18@bless gNd18@bless) (set! gN27cd@gNd16@lambda-transformer gNd16@lambda-transformer) (set! gN27cc@gNd14@case-lambda-transformer gNd14@case-lambda-transformer) (set! gN27cb@gNd12@quote-transformer gNd12@quote-transformer) (set! gN27ca@gNd10@case-macro gNd10@case-macro) (set! gN27c9@gNd0e@or-transformer gNd0e@or-transformer) (set! gN27c8@gNd0c@and-transformer gNd0c@and-transformer) (set! gN27c7@gNd0a@if-transformer gNd0a@if-transformer) (set! gN27c6@gNd08@unless-macro gNd08@unless-macro) (set! gN27c5@gNd06@when-macro gNd06@when-macro) (set! gN27c4@gNd04@record-constructor-descriptor-transformer gNd04@record-constructor-descriptor-transformer) (set! gN27c3@gNd02@record-type-descriptor-transformer gNd02@record-type-descriptor-transformer) (set! gN27c2@gNd00@type-descriptor-transformer gNd00@type-descriptor-transformer) (set! gN27c1@gNcfe@fluid-let-syntax-transformer gNcfe@fluid-let-syntax-transformer) (set! gN27c0@gNcfc@letrec*-transformer gNcfc@letrec*-transformer) (set! gN27bf@gNcfa@letrec-transformer gNcfa@letrec-transformer) (set! gN27be@gNcf8@letrec-helper gNcf8@letrec-helper) (set! gN27bd@gNcf6@add-lexicals gNcf6@add-lexicals) (set! gN27bc@gNcf4@add-lexical gNcf4@add-lexical) (set! gN27bb@gNcf2@set-lexical-mutable! gNcf2@set-lexical-mutable!) (set! gN27ba@gNcf0@lexical-mutable? gNcf0@lexical-mutable?) (set! gN27b9@gNcee@lexical-var gNcee@lexical-var) (set! gN27b8@gNcec@scheme-stx gNcec@scheme-stx) (set! gN27b7@gNcea@scheme-stx-hashtable gNcea@scheme-stx-hashtable) (set! gN27b6@gNce8@parse-define-syntax gNce8@parse-define-syntax) (set! gN27b5@gNce6@parse-define gNce6@parse-define) (set! gN27b4@gNb95@make-eval-transformer gNb95@make-eval-transformer) (set! gN27b3@gNb93@variable-transformer-procedure gNb93@variable-transformer-procedure) (set! gN27b2@gNb91@variable-transformer? gNb91@variable-transformer?) (set! gN27b1@gNb8f@make-variable-transformer gNb8f@make-variable-transformer) (set! gN27b0@gNb8d@sanitize-binding gNb8d@sanitize-binding) (set! gN27af@gNb7f@syntax-type gNb7f@syntax-type) (set! gN27ae@gNb7d@raise-unbound-error gNb7d@raise-unbound-error) (set! gN27ad@gNb7b@binding-value gNb7b@binding-value) (set! gN27ac@gNb79@binding-type gNb79@binding-type) (set! gN27ab@gNb77@make-binding gNb77@make-binding) (set! gN27aa@gNb75@label->binding gNb75@label->binding) (set! gN27a9@gNb73@id->label gNb73@id->label) (set! gN27a8@gNb71@stx->datum gNb71@stx->datum) (set! gN27a7@gNb6f@strip gNb6f@strip) (set! gN27a6@gNb6d@strip-annotations gNb6d@strip-annotations) (set! gN27a5@gNb6b@self-evaluating? gNb6b@self-evaluating?) (set! gN27a4@gNb69@bound-id-member? gNb69@bound-id-member?) (set! gN27a3@gNb67@distinct-bound-ids? gNb67@distinct-bound-ids?) (set! gN27a2@gNb65@valid-bound-ids? gNb65@valid-bound-ids?) (set! gN27a1@gNb63@free-id=? gNb63@free-id=?) (set! gN27a0@gNb61@bound-id=? gNb61@bound-id=?) (set! gN279f@gNb5f@id->sym gNb5f@id->sym) (set! gN279e@gNb5d@id? gNb5d@id?) (set! gN279d@gNb5b@syntax->list gNb5b@syntax->list) (set! gN279c@gNb59@syntax-cdr gNb59@syntax-cdr) (set! gN279b@gNb57@syntax-car gNb57@syntax-car) (set! gN279a@gNb55@syntax-list? gNb55@syntax-list?) (set! gN2799@gNb53@syntax-null? gNb53@syntax-null?) (set! gN2798@gNb51@syntax-vector? gNb51@syntax-vector?) (set! gN2797@gNb4f@syntax-pair? gNb4f@syntax-pair?) (set! gN2796@gNb4d@syntax-vector->list gNb4d@syntax-vector->list) (set! gN2795@gNb4b@syntax-kind? gNb4b@syntax-kind?) (set! gN2794@gNb49@add-subst gNb49@add-subst) (set! gN2793@gNb47@add-mark gNb47@add-mark) (set! gN2792@gNb45@mkstx gNb45@mkstx) (set! gN2791@gNb43@anti-mark? gNb43@anti-mark?) (set! gN2790@gNb41@anti-mark gNb41@anti-mark) (set! gN278f@gNb3f@gen-mark gNb3f@gen-mark) (set! gN278e@gNb3d@datum->stx gNb3d@datum->stx) (set! gN278d@gNb3b@dummy gNb3b@dummy) (set! gN278c@gNb39@set-stx-ae*! gNb39@set-stx-ae*!) (set! gN278b@gNb37@stx-ae* gNb37@stx-ae*) (set! gN278a@gNb35@set-stx-subst*! gNb35@set-stx-subst*!) (set! gN2789@gNb33@stx-subst* gNb33@stx-subst*) (set! gN2788@gNb31@set-stx-mark*! gNb31@set-stx-mark*!) (set! gN2787@gNb2f@stx-mark* gNb2f@stx-mark*) (set! gN2786@gNb2d@set-stx-expr! gNb2d@set-stx-expr!) (set! gN2785@gNb2b@stx-expr gNb2b@stx-expr) (set! gN2784@gNb29@stx? gNb29@stx?) (set! gN2783@gNb1f@rp gNb1f@rp) (set! gN2782@gNb1d@make-full-rib gNb1d@make-full-rib) (set! gN2781@gNb1b@unseal-rib! gNb1b@unseal-rib!) (set! gN2780@gNb19@seal-rib! gNb19@seal-rib!) (set! gN277f@gNb17@make-rib-map gNb17@make-rib-map) (set! gN277e@gNb15@extend-rib/nc! gNb15@extend-rib/nc!) (set! gN277d@gNb13@extend-rib! gNb13@extend-rib!) (set! gN277c@gNb11@make-empty-rib gNb11@make-empty-rib) (set! gN277b@gNb0f@dummy gNb0f@dummy) (set! gN277a@gNb0d@set-rib-cache! gNb0d@set-rib-cache!) (set! gN2779@gNb0b@rib-cache gNb0b@rib-cache) (set! gN2778@gNb09@set-rib-sealed/freq! gNb09@set-rib-sealed/freq!) (set! gN2777@gNb07@rib-sealed/freq gNb07@rib-sealed/freq) (set! gN2776@gNb05@set-rib-label*! gNb05@set-rib-label*!) (set! gN2775@gNb03@rib-label* gNb03@rib-label*) (set! gN2774@gNb01@set-rib-mark**! gNb01@set-rib-mark**!) (set! gN2773@gNaff@rib-mark** gNaff@rib-mark**) (set! gN2772@gNafd@set-rib-sym*! gNafd@set-rib-sym*!) (set! gN2771@gNafb@rib-sym* gNafb@rib-sym*) (set! gN2770@gNaf9@rib? gNaf9@rib?) (set! gN276f@gNaef@gen-define-label gNaef@gen-define-label) (set! gN276e@gNaed@gen-define-label+loc gNaed@gen-define-label+loc) (set! gN276d@gNaeb@gen-top-level-label gNaeb@gen-top-level-label) (set! gN276c@gNae9@gen-label gNae9@gen-label) (set! gN276b@gNae7@gen-global gNae7@gen-global) (set! gN276a@gNae5@gen-lexical gNae5@gen-lexical) (set! gN2769@gNae3@top-marked? gNae3@top-marked?) (set! gN2768@gNae1@top-mark* gNae1@top-mark*) (set! gN2767@gNadc@set-union gNadc@set-union) (set! gN2766@gNada@set-cons gNada@set-cons) (set! gN2765@gNad8@file-options-macro gNad8@file-options-macro) (gN97e@gN7c2@current-library-expander gNe24@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (gN286d@gN2868 gN286f@gN286a gN2871@gN2869 gN2874@&condition? gN2876@make-&condition gN2878@&condition-rtd gN287a@&condition-rcd gN28c6@gN28c1 gN28c8@gN28c3 gN28ca@gN28c2 gN28cd@p? gN28cf@make-message-condition gN28d1@gN28c0 gN28d3@message-condition? gN28d5@condition-message gN28d7@&message-rtd gN28d9@&message-rcd gN28df@gN28da gN28e1@gN28dc gN28e3@gN28db gN28e6@p? gN28e8@make-warning gN28ea@warning? gN28ec@&warning-rtd gN28ee@&warning-rcd gN28f4@gN28ef gN28f6@gN28f1 gN28f8@gN28f0 gN28fb@p? gN28fd@make-serious-condition gN28ff@serious-condition? gN2901@&serious-rtd gN2903@&serious-rcd gN2909@gN2904 gN290b@gN2906 gN290d@gN2905 gN2910@p? gN2912@make-error gN2914@error? gN2916@&error-rtd gN2918@&error-rcd gN291e@gN2919 gN2920@gN291b gN2922@gN291a gN2925@p? gN2927@make-violation gN2929@violation? gN292b@&violation-rtd gN292d@&violation-rcd gN2933@gN292e gN2935@gN2930 gN2937@gN292f gN293a@p? gN293c@make-assertion-violation gN293e@assertion-violation? gN2940@&assertion-rtd gN2942@&assertion-rcd gN294a@gN2945 gN294c@gN2947 gN294e@gN2946 gN2951@p? gN2953@make-irritants-condition gN2955@gN2944 gN2957@irritants-condition? gN2959@condition-irritants gN295b@&irritants-rtd gN295d@&irritants-rcd gN2965@gN2960 gN2967@gN2962 gN2969@gN2961 gN296c@p? gN296e@make-who-condition gN2970@gN295f gN2972@who-condition? gN2974@condition-who gN2976@&who-rtd gN2978@&who-rcd gN297e@gN2979 gN2980@gN297b gN2982@gN297a gN2985@p? gN2987@make-non-continuable-violation gN2989@non-continuable-violation? gN298b@&non-continuable-rtd gN298d@&non-continuable-rcd gN2993@gN298e gN2995@gN2990 gN2997@gN298f gN299a@p? gN299c@make-implementation-restriction-violation gN299e@implementation-restriction-violation? gN29a0@&implementation-restriction-rtd gN29a2@&implementation-restriction-rcd gN29a8@gN29a3 gN29aa@gN29a5 gN29ac@gN29a4 gN29af@p? gN29b1@make-lexical-violation gN29b3@lexical-violation? gN29b5@&lexical-rtd gN29b7@&lexical-rcd gN29c1@gN29bc gN29c3@gN29be gN29c5@gN29bd gN29c8@p? gN29ca@make-syntax-violation gN29cc@gN29b9 gN29ce@gN29bb gN29d0@syntax-violation? gN29d2@syntax-violation-form gN29d4@syntax-violation-subform gN29d6@&syntax-rtd gN29d8@&syntax-rcd gN29de@gN29d9 gN29e0@gN29db gN29e2@gN29da gN29e5@p? gN29e7@make-undefined-violation gN29e9@undefined-violation? gN29eb@&undefined-rtd gN29ed@&undefined-rcd gN29f3@gN29ee gN29f5@gN29f0 gN29f7@gN29ef gN29fa@p? gN29fc@make-i/o-error gN29fe@i/o-error? gN2a00@&i/o-rtd gN2a02@&i/o-rcd gN2a08@gN2a03 gN2a0a@gN2a05 gN2a0c@gN2a04 gN2a0f@p? gN2a11@make-i/o-read-error gN2a13@i/o-read-error? gN2a15@&i/o-read-rtd gN2a17@&i/o-read-rcd gN2a1d@gN2a18 gN2a1f@gN2a1a gN2a21@gN2a19 gN2a24@p? gN2a26@make-i/o-write-error gN2a28@i/o-write-error? gN2a2a@&i/o-write-rtd gN2a2c@&i/o-write-rcd gN2a34@gN2a2f gN2a36@gN2a31 gN2a38@gN2a30 gN2a3b@p? gN2a3d@make-i/o-invalid-position-error gN2a3f@gN2a2e gN2a41@i/o-invalid-position-error? gN2a43@i/o-error-position gN2a45@&i/o-invalid-position-rtd gN2a47@&i/o-invalid-position-rcd gN2a4f@gN2a4a gN2a51@gN2a4c gN2a53@gN2a4b gN2a56@p? gN2a58@make-i/o-filename-error gN2a5a@gN2a49 gN2a5c@i/o-filename-error? gN2a5e@i/o-error-filename gN2a60@&i/o-filename-rtd gN2a62@&i/o-filename-rcd gN2a68@gN2a63 gN2a6a@gN2a65 gN2a6c@gN2a64 gN2a6f@p? gN2a71@make-i/o-file-protection-error gN2a73@i/o-file-protection-error? gN2a75@&i/o-file-protection-rtd gN2a77@&i/o-file-protection-rcd gN2a7d@gN2a78 gN2a7f@gN2a7a gN2a81@gN2a79 gN2a84@p? gN2a86@make-i/o-file-is-read-only-error gN2a88@i/o-file-is-read-only-error? gN2a8a@&i/o-file-is-read-only-rtd gN2a8c@&i/o-file-is-read-only-rcd gN2a92@gN2a8d gN2a94@gN2a8f gN2a96@gN2a8e gN2a99@p? gN2a9b@make-i/o-file-already-exists-error gN2a9d@i/o-file-already-exists-error? gN2a9f@&i/o-file-already-exists-rtd gN2aa1@&i/o-file-already-exists-rcd gN2aa7@gN2aa2 gN2aa9@gN2aa4 gN2aab@gN2aa3 gN2aae@p? gN2ab0@make-i/o-file-does-not-exist-error gN2ab2@i/o-file-does-not-exist-error? gN2ab4@&i/o-file-does-not-exist-rtd gN2ab6@&i/o-file-does-not-exist-rcd gN2abe@gN2ab9 gN2ac0@gN2abb gN2ac2@gN2aba gN2ac5@p? gN2ac7@make-i/o-port-error gN2ac9@gN2ab8 gN2acb@i/o-port-error? gN2acd@i/o-error-port gN2acf@&i/o-port-rtd gN2ad1@&i/o-port-rcd gN2ad7@gN2ad2 gN2ad9@gN2ad4 gN2adb@gN2ad3 gN2ade@p? gN2ae0@make-i/o-decoding-error gN2ae2@i/o-decoding-error? gN2ae4@&i/o-decoding-rtd gN2ae6@&i/o-decoding-rcd gN2aee@gN2ae9 gN2af0@gN2aeb gN2af2@gN2aea gN2af5@p? gN2af7@make-i/o-encoding-error gN2af9@gN2ae8 gN2afb@i/o-encoding-error? gN2afd@i/o-encoding-error-char gN2aff@&i/o-encoding-rtd gN2b01@&i/o-encoding-rcd gN2b07@gN2b02 gN2b09@gN2b04 gN2b0b@gN2b03 gN2b0e@p? gN2b10@make-no-infinities-violation gN2b12@no-infinities-violation? gN2b14@&no-infinities-rtd gN2b16@&no-infinities-rcd gN2b1c@gN2b17 gN2b1e@gN2b19 gN2b20@gN2b18 gN2b23@p? gN2b25@make-no-nans-violation gN2b27@no-nans-violation? gN2b29@&no-nans-rtd gN2b2b@&no-nans-rcd) (begin (set! gN286d@gN2868 (make-record-type-descriptor '&condition '#f 'gN286b '#f '#f '#())) (set! gN286f@gN286a '#f) (set! gN2871@gN2869 (make-record-constructor-descriptor gN286d@gN2868 '#f gN286f@gN286a)) (set! gN2874@&condition? (record-predicate gN286d@gN2868)) (set! gN2876@make-&condition (record-constructor gN2871@gN2869)) (set! gN2878@&condition-rtd gN286d@gN2868) (set! gN287a@&condition-rcd gN2871@gN2869) (set! gN28c6@gN28c1 (make-record-type-descriptor '&message gN286d@gN2868 'gN28c4 '#f '#f '#((immutable message)))) (set! gN28c8@gN28c3 '#f) (set! gN28ca@gN28c2 (make-record-constructor-descriptor gN28c6@gN28c1 gN2871@gN2869 gN28c8@gN28c3)) (set! gN28cd@p? (record-predicate gN28c6@gN28c1)) (set! gN28cf@make-message-condition (record-constructor gN28ca@gN28c2)) (set! gN28d1@gN28c0 (record-accessor gN28c6@gN28c1 '0)) (set! gN28d3@message-condition? (condition-predicate gN28c6@gN28c1)) (set! gN28d5@condition-message (condition-accessor gN28c6@gN28c1 gN28d1@gN28c0)) (set! gN28d7@&message-rtd gN28c6@gN28c1) (set! gN28d9@&message-rcd gN28ca@gN28c2) (set! gN28df@gN28da (make-record-type-descriptor '&warning gN286d@gN2868 'gN28dd '#f '#f '#())) (set! gN28e1@gN28dc '#f) (set! gN28e3@gN28db (make-record-constructor-descriptor gN28df@gN28da gN2871@gN2869 gN28e1@gN28dc)) (set! gN28e6@p? (record-predicate gN28df@gN28da)) (set! gN28e8@make-warning (record-constructor gN28e3@gN28db)) (set! gN28ea@warning? (condition-predicate gN28df@gN28da)) (set! gN28ec@&warning-rtd gN28df@gN28da) (set! gN28ee@&warning-rcd gN28e3@gN28db) (set! gN28f4@gN28ef (make-record-type-descriptor '&serious gN286d@gN2868 'gN28f2 '#f '#f '#())) (set! gN28f6@gN28f1 '#f) (set! gN28f8@gN28f0 (make-record-constructor-descriptor gN28f4@gN28ef gN2871@gN2869 gN28f6@gN28f1)) (set! gN28fb@p? (record-predicate gN28f4@gN28ef)) (set! gN28fd@make-serious-condition (record-constructor gN28f8@gN28f0)) (set! gN28ff@serious-condition? (condition-predicate gN28f4@gN28ef)) (set! gN2901@&serious-rtd gN28f4@gN28ef) (set! gN2903@&serious-rcd gN28f8@gN28f0) (set! gN2909@gN2904 (make-record-type-descriptor '&error gN28f4@gN28ef 'gN2907 '#f '#f '#())) (set! gN290b@gN2906 '#f) (set! gN290d@gN2905 (make-record-constructor-descriptor gN2909@gN2904 gN28f8@gN28f0 gN290b@gN2906)) (set! gN2910@p? (record-predicate gN2909@gN2904)) (set! gN2912@make-error (record-constructor gN290d@gN2905)) (set! gN2914@error? (condition-predicate gN2909@gN2904)) (set! gN2916@&error-rtd gN2909@gN2904) (set! gN2918@&error-rcd gN290d@gN2905) (set! gN291e@gN2919 (make-record-type-descriptor '&violation gN28f4@gN28ef 'gN291c '#f '#f '#())) (set! gN2920@gN291b '#f) (set! gN2922@gN291a (make-record-constructor-descriptor gN291e@gN2919 gN28f8@gN28f0 gN2920@gN291b)) (set! gN2925@p? (record-predicate gN291e@gN2919)) (set! gN2927@make-violation (record-constructor gN2922@gN291a)) (set! gN2929@violation? (condition-predicate gN291e@gN2919)) (set! gN292b@&violation-rtd gN291e@gN2919) (set! gN292d@&violation-rcd gN2922@gN291a) (set! gN2933@gN292e (make-record-type-descriptor '&assertion gN291e@gN2919 'gN2931 '#f '#f '#())) (set! gN2935@gN2930 '#f) (set! gN2937@gN292f (make-record-constructor-descriptor gN2933@gN292e gN2922@gN291a gN2935@gN2930)) (set! gN293a@p? (record-predicate gN2933@gN292e)) (set! gN293c@make-assertion-violation (record-constructor gN2937@gN292f)) (set! gN293e@assertion-violation? (condition-predicate gN2933@gN292e)) (set! gN2940@&assertion-rtd gN2933@gN292e) (set! gN2942@&assertion-rcd gN2937@gN292f) (set! gN294a@gN2945 (make-record-type-descriptor '&irritants gN286d@gN2868 'gN2948 '#f '#f '#((immutable irritants)))) (set! gN294c@gN2947 '#f) (set! gN294e@gN2946 (make-record-constructor-descriptor gN294a@gN2945 gN2871@gN2869 gN294c@gN2947)) (set! gN2951@p? (record-predicate gN294a@gN2945)) (set! gN2953@make-irritants-condition (record-constructor gN294e@gN2946)) (set! gN2955@gN2944 (record-accessor gN294a@gN2945 '0)) (set! gN2957@irritants-condition? (condition-predicate gN294a@gN2945)) (set! gN2959@condition-irritants (condition-accessor gN294a@gN2945 gN2955@gN2944)) (set! gN295b@&irritants-rtd gN294a@gN2945) (set! gN295d@&irritants-rcd gN294e@gN2946) (set! gN2965@gN2960 (make-record-type-descriptor '&who gN286d@gN2868 'gN2963 '#f '#f '#((immutable who)))) (set! gN2967@gN2962 '#f) (set! gN2969@gN2961 (make-record-constructor-descriptor gN2965@gN2960 gN2871@gN2869 gN2967@gN2962)) (set! gN296c@p? (record-predicate gN2965@gN2960)) (set! gN296e@make-who-condition (record-constructor gN2969@gN2961)) (set! gN2970@gN295f (record-accessor gN2965@gN2960 '0)) (set! gN2972@who-condition? (condition-predicate gN2965@gN2960)) (set! gN2974@condition-who (condition-accessor gN2965@gN2960 gN2970@gN295f)) (set! gN2976@&who-rtd gN2965@gN2960) (set! gN2978@&who-rcd gN2969@gN2961) (set! gN297e@gN2979 (make-record-type-descriptor '&non-continuable gN291e@gN2919 'gN297c '#f '#f '#())) (set! gN2980@gN297b '#f) (set! gN2982@gN297a (make-record-constructor-descriptor gN297e@gN2979 gN2922@gN291a gN2980@gN297b)) (set! gN2985@p? (record-predicate gN297e@gN2979)) (set! gN2987@make-non-continuable-violation (record-constructor gN2982@gN297a)) (set! gN2989@non-continuable-violation? (condition-predicate gN297e@gN2979)) (set! gN298b@&non-continuable-rtd gN297e@gN2979) (set! gN298d@&non-continuable-rcd gN2982@gN297a) (set! gN2993@gN298e (make-record-type-descriptor '&implementation-restriction gN291e@gN2919 'gN2991 '#f '#f '#())) (set! gN2995@gN2990 '#f) (set! gN2997@gN298f (make-record-constructor-descriptor gN2993@gN298e gN2922@gN291a gN2995@gN2990)) (set! gN299a@p? (record-predicate gN2993@gN298e)) (set! gN299c@make-implementation-restriction-violation (record-constructor gN2997@gN298f)) (set! gN299e@implementation-restriction-violation? (condition-predicate gN2993@gN298e)) (set! gN29a0@&implementation-restriction-rtd gN2993@gN298e) (set! gN29a2@&implementation-restriction-rcd gN2997@gN298f) (set! gN29a8@gN29a3 (make-record-type-descriptor '&lexical gN291e@gN2919 'gN29a6 '#f '#f '#())) (set! gN29aa@gN29a5 '#f) (set! gN29ac@gN29a4 (make-record-constructor-descriptor gN29a8@gN29a3 gN2922@gN291a gN29aa@gN29a5)) (set! gN29af@p? (record-predicate gN29a8@gN29a3)) (set! gN29b1@make-lexical-violation (record-constructor gN29ac@gN29a4)) (set! gN29b3@lexical-violation? (condition-predicate gN29a8@gN29a3)) (set! gN29b5@&lexical-rtd gN29a8@gN29a3) (set! gN29b7@&lexical-rcd gN29ac@gN29a4) (set! gN29c1@gN29bc (make-record-type-descriptor '&syntax gN291e@gN2919 'gN29bf '#f '#f '#((immutable form) (immutable subform)))) (set! gN29c3@gN29be '#f) (set! gN29c5@gN29bd (make-record-constructor-descriptor gN29c1@gN29bc gN2922@gN291a gN29c3@gN29be)) (set! gN29c8@p? (record-predicate gN29c1@gN29bc)) (set! gN29ca@make-syntax-violation (record-constructor gN29c5@gN29bd)) (set! gN29cc@gN29b9 (record-accessor gN29c1@gN29bc '0)) (set! gN29ce@gN29bb (record-accessor gN29c1@gN29bc '1)) (set! gN29d0@syntax-violation? (condition-predicate gN29c1@gN29bc)) (set! gN29d2@syntax-violation-form (condition-accessor gN29c1@gN29bc gN29cc@gN29b9)) (set! gN29d4@syntax-violation-subform (condition-accessor gN29c1@gN29bc gN29ce@gN29bb)) (set! gN29d6@&syntax-rtd gN29c1@gN29bc) (set! gN29d8@&syntax-rcd gN29c5@gN29bd) (set! gN29de@gN29d9 (make-record-type-descriptor '&undefined gN291e@gN2919 'gN29dc '#f '#f '#())) (set! gN29e0@gN29db '#f) (set! gN29e2@gN29da (make-record-constructor-descriptor gN29de@gN29d9 gN2922@gN291a gN29e0@gN29db)) (set! gN29e5@p? (record-predicate gN29de@gN29d9)) (set! gN29e7@make-undefined-violation (record-constructor gN29e2@gN29da)) (set! gN29e9@undefined-violation? (condition-predicate gN29de@gN29d9)) (set! gN29eb@&undefined-rtd gN29de@gN29d9) (set! gN29ed@&undefined-rcd gN29e2@gN29da) (set! gN29f3@gN29ee (make-record-type-descriptor '&i/o gN2909@gN2904 'gN29f1 '#f '#f '#())) (set! gN29f5@gN29f0 '#f) (set! gN29f7@gN29ef (make-record-constructor-descriptor gN29f3@gN29ee gN290d@gN2905 gN29f5@gN29f0)) (set! gN29fa@p? (record-predicate gN29f3@gN29ee)) (set! gN29fc@make-i/o-error (record-constructor gN29f7@gN29ef)) (set! gN29fe@i/o-error? (condition-predicate gN29f3@gN29ee)) (set! gN2a00@&i/o-rtd gN29f3@gN29ee) (set! gN2a02@&i/o-rcd gN29f7@gN29ef) (set! gN2a08@gN2a03 (make-record-type-descriptor '&i/o-read gN29f3@gN29ee 'gN2a06 '#f '#f '#())) (set! gN2a0a@gN2a05 '#f) (set! gN2a0c@gN2a04 (make-record-constructor-descriptor gN2a08@gN2a03 gN29f7@gN29ef gN2a0a@gN2a05)) (set! gN2a0f@p? (record-predicate gN2a08@gN2a03)) (set! gN2a11@make-i/o-read-error (record-constructor gN2a0c@gN2a04)) (set! gN2a13@i/o-read-error? (condition-predicate gN2a08@gN2a03)) (set! gN2a15@&i/o-read-rtd gN2a08@gN2a03) (set! gN2a17@&i/o-read-rcd gN2a0c@gN2a04) (set! gN2a1d@gN2a18 (make-record-type-descriptor '&i/o-write gN29f3@gN29ee 'gN2a1b '#f '#f '#())) (set! gN2a1f@gN2a1a '#f) (set! gN2a21@gN2a19 (make-record-constructor-descriptor gN2a1d@gN2a18 gN29f7@gN29ef gN2a1f@gN2a1a)) (set! gN2a24@p? (record-predicate gN2a1d@gN2a18)) (set! gN2a26@make-i/o-write-error (record-constructor gN2a21@gN2a19)) (set! gN2a28@i/o-write-error? (condition-predicate gN2a1d@gN2a18)) (set! gN2a2a@&i/o-write-rtd gN2a1d@gN2a18) (set! gN2a2c@&i/o-write-rcd gN2a21@gN2a19) (set! gN2a34@gN2a2f (make-record-type-descriptor '&i/o-invalid-position gN29f3@gN29ee 'gN2a32 '#f '#f '#((immutable position)))) (set! gN2a36@gN2a31 '#f) (set! gN2a38@gN2a30 (make-record-constructor-descriptor gN2a34@gN2a2f gN29f7@gN29ef gN2a36@gN2a31)) (set! gN2a3b@p? (record-predicate gN2a34@gN2a2f)) (set! gN2a3d@make-i/o-invalid-position-error (record-constructor gN2a38@gN2a30)) (set! gN2a3f@gN2a2e (record-accessor gN2a34@gN2a2f '0)) (set! gN2a41@i/o-invalid-position-error? (condition-predicate gN2a34@gN2a2f)) (set! gN2a43@i/o-error-position (condition-accessor gN2a34@gN2a2f gN2a3f@gN2a2e)) (set! gN2a45@&i/o-invalid-position-rtd gN2a34@gN2a2f) (set! gN2a47@&i/o-invalid-position-rcd gN2a38@gN2a30) (set! gN2a4f@gN2a4a (make-record-type-descriptor '&i/o-filename gN29f3@gN29ee 'gN2a4d '#f '#f '#((immutable filename)))) (set! gN2a51@gN2a4c '#f) (set! gN2a53@gN2a4b (make-record-constructor-descriptor gN2a4f@gN2a4a gN29f7@gN29ef gN2a51@gN2a4c)) (set! gN2a56@p? (record-predicate gN2a4f@gN2a4a)) (set! gN2a58@make-i/o-filename-error (record-constructor gN2a53@gN2a4b)) (set! gN2a5a@gN2a49 (record-accessor gN2a4f@gN2a4a '0)) (set! gN2a5c@i/o-filename-error? (condition-predicate gN2a4f@gN2a4a)) (set! gN2a5e@i/o-error-filename (condition-accessor gN2a4f@gN2a4a gN2a5a@gN2a49)) (set! gN2a60@&i/o-filename-rtd gN2a4f@gN2a4a) (set! gN2a62@&i/o-filename-rcd gN2a53@gN2a4b) (set! gN2a68@gN2a63 (make-record-type-descriptor '&i/o-file-protection gN2a4f@gN2a4a 'gN2a66 '#f '#f '#())) (set! gN2a6a@gN2a65 '#f) (set! gN2a6c@gN2a64 (make-record-constructor-descriptor gN2a68@gN2a63 gN2a53@gN2a4b gN2a6a@gN2a65)) (set! gN2a6f@p? (record-predicate gN2a68@gN2a63)) (set! gN2a71@make-i/o-file-protection-error (record-constructor gN2a6c@gN2a64)) (set! gN2a73@i/o-file-protection-error? (condition-predicate gN2a68@gN2a63)) (set! gN2a75@&i/o-file-protection-rtd gN2a68@gN2a63) (set! gN2a77@&i/o-file-protection-rcd gN2a6c@gN2a64) (set! gN2a7d@gN2a78 (make-record-type-descriptor '&i/o-file-is-read-only gN2a68@gN2a63 'gN2a7b '#f '#f '#())) (set! gN2a7f@gN2a7a '#f) (set! gN2a81@gN2a79 (make-record-constructor-descriptor gN2a7d@gN2a78 gN2a6c@gN2a64 gN2a7f@gN2a7a)) (set! gN2a84@p? (record-predicate gN2a7d@gN2a78)) (set! gN2a86@make-i/o-file-is-read-only-error (record-constructor gN2a81@gN2a79)) (set! gN2a88@i/o-file-is-read-only-error? (condition-predicate gN2a7d@gN2a78)) (set! gN2a8a@&i/o-file-is-read-only-rtd gN2a7d@gN2a78) (set! gN2a8c@&i/o-file-is-read-only-rcd gN2a81@gN2a79) (set! gN2a92@gN2a8d (make-record-type-descriptor '&i/o-file-already-exists gN2a4f@gN2a4a 'gN2a90 '#f '#f '#())) (set! gN2a94@gN2a8f '#f) (set! gN2a96@gN2a8e (make-record-constructor-descriptor gN2a92@gN2a8d gN2a53@gN2a4b gN2a94@gN2a8f)) (set! gN2a99@p? (record-predicate gN2a92@gN2a8d)) (set! gN2a9b@make-i/o-file-already-exists-error (record-constructor gN2a96@gN2a8e)) (set! gN2a9d@i/o-file-already-exists-error? (condition-predicate gN2a92@gN2a8d)) (set! gN2a9f@&i/o-file-already-exists-rtd gN2a92@gN2a8d) (set! gN2aa1@&i/o-file-already-exists-rcd gN2a96@gN2a8e) (set! gN2aa7@gN2aa2 (make-record-type-descriptor '&i/o-file-does-not-exist gN2a4f@gN2a4a 'gN2aa5 '#f '#f '#())) (set! gN2aa9@gN2aa4 '#f) (set! gN2aab@gN2aa3 (make-record-constructor-descriptor gN2aa7@gN2aa2 gN2a53@gN2a4b gN2aa9@gN2aa4)) (set! gN2aae@p? (record-predicate gN2aa7@gN2aa2)) (set! gN2ab0@make-i/o-file-does-not-exist-error (record-constructor gN2aab@gN2aa3)) (set! gN2ab2@i/o-file-does-not-exist-error? (condition-predicate gN2aa7@gN2aa2)) (set! gN2ab4@&i/o-file-does-not-exist-rtd gN2aa7@gN2aa2) (set! gN2ab6@&i/o-file-does-not-exist-rcd gN2aab@gN2aa3) (set! gN2abe@gN2ab9 (make-record-type-descriptor '&i/o-port gN29f3@gN29ee 'gN2abc '#f '#f '#((immutable port)))) (set! gN2ac0@gN2abb '#f) (set! gN2ac2@gN2aba (make-record-constructor-descriptor gN2abe@gN2ab9 gN29f7@gN29ef gN2ac0@gN2abb)) (set! gN2ac5@p? (record-predicate gN2abe@gN2ab9)) (set! gN2ac7@make-i/o-port-error (record-constructor gN2ac2@gN2aba)) (set! gN2ac9@gN2ab8 (record-accessor gN2abe@gN2ab9 '0)) (set! gN2acb@i/o-port-error? (condition-predicate gN2abe@gN2ab9)) (set! gN2acd@i/o-error-port (condition-accessor gN2abe@gN2ab9 gN2ac9@gN2ab8)) (set! gN2acf@&i/o-port-rtd gN2abe@gN2ab9) (set! gN2ad1@&i/o-port-rcd gN2ac2@gN2aba) (set! gN2ad7@gN2ad2 (make-record-type-descriptor '&i/o-decoding gN2abe@gN2ab9 'gN2ad5 '#f '#f '#())) (set! gN2ad9@gN2ad4 '#f) (set! gN2adb@gN2ad3 (make-record-constructor-descriptor gN2ad7@gN2ad2 gN2ac2@gN2aba gN2ad9@gN2ad4)) (set! gN2ade@p? (record-predicate gN2ad7@gN2ad2)) (set! gN2ae0@make-i/o-decoding-error (record-constructor gN2adb@gN2ad3)) (set! gN2ae2@i/o-decoding-error? (condition-predicate gN2ad7@gN2ad2)) (set! gN2ae4@&i/o-decoding-rtd gN2ad7@gN2ad2) (set! gN2ae6@&i/o-decoding-rcd gN2adb@gN2ad3) (set! gN2aee@gN2ae9 (make-record-type-descriptor '&i/o-encoding gN2abe@gN2ab9 'gN2aec '#f '#f '#((immutable char)))) (set! gN2af0@gN2aeb '#f) (set! gN2af2@gN2aea (make-record-constructor-descriptor gN2aee@gN2ae9 gN2ac2@gN2aba gN2af0@gN2aeb)) (set! gN2af5@p? (record-predicate gN2aee@gN2ae9)) (set! gN2af7@make-i/o-encoding-error (record-constructor gN2af2@gN2aea)) (set! gN2af9@gN2ae8 (record-accessor gN2aee@gN2ae9 '0)) (set! gN2afb@i/o-encoding-error? (condition-predicate gN2aee@gN2ae9)) (set! gN2afd@i/o-encoding-error-char (condition-accessor gN2aee@gN2ae9 gN2af9@gN2ae8)) (set! gN2aff@&i/o-encoding-rtd gN2aee@gN2ae9) (set! gN2b01@&i/o-encoding-rcd gN2af2@gN2aea) (set! gN2b07@gN2b02 (make-record-type-descriptor '&no-infinities gN2993@gN298e 'gN2b05 '#f '#f '#())) (set! gN2b09@gN2b04 '#f) (set! gN2b0b@gN2b03 (make-record-constructor-descriptor gN2b07@gN2b02 gN2997@gN298f gN2b09@gN2b04)) (set! gN2b0e@p? (record-predicate gN2b07@gN2b02)) (set! gN2b10@make-no-infinities-violation (record-constructor gN2b0b@gN2b03)) (set! gN2b12@no-infinities-violation? (condition-predicate gN2b07@gN2b02)) (set! gN2b14@&no-infinities-rtd gN2b07@gN2b02) (set! gN2b16@&no-infinities-rcd gN2b0b@gN2b03) (set! gN2b1c@gN2b17 (make-record-type-descriptor '&no-nans gN2993@gN298e 'gN2b1a '#f '#f '#())) (set! gN2b1e@gN2b19 '#f) (set! gN2b20@gN2b18 (make-record-constructor-descriptor gN2b1c@gN2b17 gN2997@gN298f gN2b1e@gN2b19)) (set! gN2b23@p? (record-predicate gN2b1c@gN2b17)) (set! gN2b25@make-no-nans-violation (record-constructor gN2b20@gN2b18)) (set! gN2b27@no-nans-violation? (condition-predicate gN2b1c@gN2b17)) (set! gN2b29@&no-nans-rtd gN2b1c@gN2b17) (set! gN2b2b@&no-nans-rcd gN2b20@gN2b18) (begin (set! gN2c1c@gN2b2b@&no-nans-rcd gN2b2b@&no-nans-rcd) (set! gN2c1b@gN2b29@&no-nans-rtd gN2b29@&no-nans-rtd) (set! gN2c1a@gN2b27@no-nans-violation? gN2b27@no-nans-violation?) (set! gN2c19@gN2b25@make-no-nans-violation gN2b25@make-no-nans-violation) (set! gN2c18@gN2b23@p? gN2b23@p?) (set! gN2c17@gN2b20@gN2b18 gN2b20@gN2b18) (set! gN2c16@gN2b1e@gN2b19 gN2b1e@gN2b19) (set! gN2c15@gN2b1c@gN2b17 gN2b1c@gN2b17) (set! gN2c14@gN2b16@&no-infinities-rcd gN2b16@&no-infinities-rcd) (set! gN2c13@gN2b14@&no-infinities-rtd gN2b14@&no-infinities-rtd) (set! gN2c12@gN2b12@no-infinities-violation? gN2b12@no-infinities-violation?) (set! gN2c11@gN2b10@make-no-infinities-violation gN2b10@make-no-infinities-violation) (set! gN2c10@gN2b0e@p? gN2b0e@p?) (set! gN2c0f@gN2b0b@gN2b03 gN2b0b@gN2b03) (set! gN2c0e@gN2b09@gN2b04 gN2b09@gN2b04) (set! gN2c0d@gN2b07@gN2b02 gN2b07@gN2b02) (set! gN2c0c@gN2b01@&i/o-encoding-rcd gN2b01@&i/o-encoding-rcd) (set! gN2c0b@gN2aff@&i/o-encoding-rtd gN2aff@&i/o-encoding-rtd) (set! gN2c0a@gN2afd@i/o-encoding-error-char gN2afd@i/o-encoding-error-char) (set! gN2c09@gN2afb@i/o-encoding-error? gN2afb@i/o-encoding-error?) (set! gN2c08@gN2af9@gN2ae8 gN2af9@gN2ae8) (set! gN2c07@gN2af7@make-i/o-encoding-error gN2af7@make-i/o-encoding-error) (set! gN2c06@gN2af5@p? gN2af5@p?) (set! gN2c05@gN2af2@gN2aea gN2af2@gN2aea) (set! gN2c04@gN2af0@gN2aeb gN2af0@gN2aeb) (set! gN2c03@gN2aee@gN2ae9 gN2aee@gN2ae9) (set! gN2c02@gN2ae6@&i/o-decoding-rcd gN2ae6@&i/o-decoding-rcd) (set! gN2c01@gN2ae4@&i/o-decoding-rtd gN2ae4@&i/o-decoding-rtd) (set! gN2c00@gN2ae2@i/o-decoding-error? gN2ae2@i/o-decoding-error?) (set! gN2bff@gN2ae0@make-i/o-decoding-error gN2ae0@make-i/o-decoding-error) (set! gN2bfe@gN2ade@p? gN2ade@p?) (set! gN2bfd@gN2adb@gN2ad3 gN2adb@gN2ad3) (set! gN2bfc@gN2ad9@gN2ad4 gN2ad9@gN2ad4) (set! gN2bfb@gN2ad7@gN2ad2 gN2ad7@gN2ad2) (set! gN2bfa@gN2ad1@&i/o-port-rcd gN2ad1@&i/o-port-rcd) (set! gN2bf9@gN2acf@&i/o-port-rtd gN2acf@&i/o-port-rtd) (set! gN2bf8@gN2acd@i/o-error-port gN2acd@i/o-error-port) (set! gN2bf7@gN2acb@i/o-port-error? gN2acb@i/o-port-error?) (set! gN2bf6@gN2ac9@gN2ab8 gN2ac9@gN2ab8) (set! gN2bf5@gN2ac7@make-i/o-port-error gN2ac7@make-i/o-port-error) (set! gN2bf4@gN2ac5@p? gN2ac5@p?) (set! gN2bf3@gN2ac2@gN2aba gN2ac2@gN2aba) (set! gN2bf2@gN2ac0@gN2abb gN2ac0@gN2abb) (set! gN2bf1@gN2abe@gN2ab9 gN2abe@gN2ab9) (set! gN2bf0@gN2ab6@&i/o-file-does-not-exist-rcd gN2ab6@&i/o-file-does-not-exist-rcd) (set! gN2bef@gN2ab4@&i/o-file-does-not-exist-rtd gN2ab4@&i/o-file-does-not-exist-rtd) (set! gN2bee@gN2ab2@i/o-file-does-not-exist-error? gN2ab2@i/o-file-does-not-exist-error?) (set! gN2bed@gN2ab0@make-i/o-file-does-not-exist-error gN2ab0@make-i/o-file-does-not-exist-error) (set! gN2bec@gN2aae@p? gN2aae@p?) (set! gN2beb@gN2aab@gN2aa3 gN2aab@gN2aa3) (set! gN2bea@gN2aa9@gN2aa4 gN2aa9@gN2aa4) (set! gN2be9@gN2aa7@gN2aa2 gN2aa7@gN2aa2) (set! gN2be8@gN2aa1@&i/o-file-already-exists-rcd gN2aa1@&i/o-file-already-exists-rcd) (set! gN2be7@gN2a9f@&i/o-file-already-exists-rtd gN2a9f@&i/o-file-already-exists-rtd) (set! gN2be6@gN2a9d@i/o-file-already-exists-error? gN2a9d@i/o-file-already-exists-error?) (set! gN2be5@gN2a9b@make-i/o-file-already-exists-error gN2a9b@make-i/o-file-already-exists-error) (set! gN2be4@gN2a99@p? gN2a99@p?) (set! gN2be3@gN2a96@gN2a8e gN2a96@gN2a8e) (set! gN2be2@gN2a94@gN2a8f gN2a94@gN2a8f) (set! gN2be1@gN2a92@gN2a8d gN2a92@gN2a8d) (set! gN2be0@gN2a8c@&i/o-file-is-read-only-rcd gN2a8c@&i/o-file-is-read-only-rcd) (set! gN2bdf@gN2a8a@&i/o-file-is-read-only-rtd gN2a8a@&i/o-file-is-read-only-rtd) (set! gN2bde@gN2a88@i/o-file-is-read-only-error? gN2a88@i/o-file-is-read-only-error?) (set! gN2bdd@gN2a86@make-i/o-file-is-read-only-error gN2a86@make-i/o-file-is-read-only-error) (set! gN2bdc@gN2a84@p? gN2a84@p?) (set! gN2bdb@gN2a81@gN2a79 gN2a81@gN2a79) (set! gN2bda@gN2a7f@gN2a7a gN2a7f@gN2a7a) (set! gN2bd9@gN2a7d@gN2a78 gN2a7d@gN2a78) (set! gN2bd8@gN2a77@&i/o-file-protection-rcd gN2a77@&i/o-file-protection-rcd) (set! gN2bd7@gN2a75@&i/o-file-protection-rtd gN2a75@&i/o-file-protection-rtd) (set! gN2bd6@gN2a73@i/o-file-protection-error? gN2a73@i/o-file-protection-error?) (set! gN2bd5@gN2a71@make-i/o-file-protection-error gN2a71@make-i/o-file-protection-error) (set! gN2bd4@gN2a6f@p? gN2a6f@p?) (set! gN2bd3@gN2a6c@gN2a64 gN2a6c@gN2a64) (set! gN2bd2@gN2a6a@gN2a65 gN2a6a@gN2a65) (set! gN2bd1@gN2a68@gN2a63 gN2a68@gN2a63) (set! gN2bd0@gN2a62@&i/o-filename-rcd gN2a62@&i/o-filename-rcd) (set! gN2bcf@gN2a60@&i/o-filename-rtd gN2a60@&i/o-filename-rtd) (set! gN2bce@gN2a5e@i/o-error-filename gN2a5e@i/o-error-filename) (set! gN2bcd@gN2a5c@i/o-filename-error? gN2a5c@i/o-filename-error?) (set! gN2bcc@gN2a5a@gN2a49 gN2a5a@gN2a49) (set! gN2bcb@gN2a58@make-i/o-filename-error gN2a58@make-i/o-filename-error) (set! gN2bca@gN2a56@p? gN2a56@p?) (set! gN2bc9@gN2a53@gN2a4b gN2a53@gN2a4b) (set! gN2bc8@gN2a51@gN2a4c gN2a51@gN2a4c) (set! gN2bc7@gN2a4f@gN2a4a gN2a4f@gN2a4a) (set! gN2bc6@gN2a47@&i/o-invalid-position-rcd gN2a47@&i/o-invalid-position-rcd) (set! gN2bc5@gN2a45@&i/o-invalid-position-rtd gN2a45@&i/o-invalid-position-rtd) (set! gN2bc4@gN2a43@i/o-error-position gN2a43@i/o-error-position) (set! gN2bc3@gN2a41@i/o-invalid-position-error? gN2a41@i/o-invalid-position-error?) (set! gN2bc2@gN2a3f@gN2a2e gN2a3f@gN2a2e) (set! gN2bc1@gN2a3d@make-i/o-invalid-position-error gN2a3d@make-i/o-invalid-position-error) (set! gN2bc0@gN2a3b@p? gN2a3b@p?) (set! gN2bbf@gN2a38@gN2a30 gN2a38@gN2a30) (set! gN2bbe@gN2a36@gN2a31 gN2a36@gN2a31) (set! gN2bbd@gN2a34@gN2a2f gN2a34@gN2a2f) (set! gN2bbc@gN2a2c@&i/o-write-rcd gN2a2c@&i/o-write-rcd) (set! gN2bbb@gN2a2a@&i/o-write-rtd gN2a2a@&i/o-write-rtd) (set! gN2bba@gN2a28@i/o-write-error? gN2a28@i/o-write-error?) (set! gN2bb9@gN2a26@make-i/o-write-error gN2a26@make-i/o-write-error) (set! gN2bb8@gN2a24@p? gN2a24@p?) (set! gN2bb7@gN2a21@gN2a19 gN2a21@gN2a19) (set! gN2bb6@gN2a1f@gN2a1a gN2a1f@gN2a1a) (set! gN2bb5@gN2a1d@gN2a18 gN2a1d@gN2a18) (set! gN2bb4@gN2a17@&i/o-read-rcd gN2a17@&i/o-read-rcd) (set! gN2bb3@gN2a15@&i/o-read-rtd gN2a15@&i/o-read-rtd) (set! gN2bb2@gN2a13@i/o-read-error? gN2a13@i/o-read-error?) (set! gN2bb1@gN2a11@make-i/o-read-error gN2a11@make-i/o-read-error) (set! gN2bb0@gN2a0f@p? gN2a0f@p?) (set! gN2baf@gN2a0c@gN2a04 gN2a0c@gN2a04) (set! gN2bae@gN2a0a@gN2a05 gN2a0a@gN2a05) (set! gN2bad@gN2a08@gN2a03 gN2a08@gN2a03) (set! gN2bac@gN2a02@&i/o-rcd gN2a02@&i/o-rcd) (set! gN2bab@gN2a00@&i/o-rtd gN2a00@&i/o-rtd) (set! gN2baa@gN29fe@i/o-error? gN29fe@i/o-error?) (set! gN2ba9@gN29fc@make-i/o-error gN29fc@make-i/o-error) (set! gN2ba8@gN29fa@p? gN29fa@p?) (set! gN2ba7@gN29f7@gN29ef gN29f7@gN29ef) (set! gN2ba6@gN29f5@gN29f0 gN29f5@gN29f0) (set! gN2ba5@gN29f3@gN29ee gN29f3@gN29ee) (set! gN2ba4@gN29ed@&undefined-rcd gN29ed@&undefined-rcd) (set! gN2ba3@gN29eb@&undefined-rtd gN29eb@&undefined-rtd) (set! gN2ba2@gN29e9@undefined-violation? gN29e9@undefined-violation?) (set! gN2ba1@gN29e7@make-undefined-violation gN29e7@make-undefined-violation) (set! gN2ba0@gN29e5@p? gN29e5@p?) (set! gN2b9f@gN29e2@gN29da gN29e2@gN29da) (set! gN2b9e@gN29e0@gN29db gN29e0@gN29db) (set! gN2b9d@gN29de@gN29d9 gN29de@gN29d9) (set! gN2b9c@gN29d8@&syntax-rcd gN29d8@&syntax-rcd) (set! gN2b9b@gN29d6@&syntax-rtd gN29d6@&syntax-rtd) (set! gN2b9a@gN29d4@syntax-violation-subform gN29d4@syntax-violation-subform) (set! gN2b99@gN29d2@syntax-violation-form gN29d2@syntax-violation-form) (set! gN2b98@gN29d0@syntax-violation? gN29d0@syntax-violation?) (set! gN2b97@gN29ce@gN29bb gN29ce@gN29bb) (set! gN2b96@gN29cc@gN29b9 gN29cc@gN29b9) (set! gN2b95@gN29ca@make-syntax-violation gN29ca@make-syntax-violation) (set! gN2b94@gN29c8@p? gN29c8@p?) (set! gN2b93@gN29c5@gN29bd gN29c5@gN29bd) (set! gN2b92@gN29c3@gN29be gN29c3@gN29be) (set! gN2b91@gN29c1@gN29bc gN29c1@gN29bc) (set! gN2b90@gN29b7@&lexical-rcd gN29b7@&lexical-rcd) (set! gN2b8f@gN29b5@&lexical-rtd gN29b5@&lexical-rtd) (set! gN2b8e@gN29b3@lexical-violation? gN29b3@lexical-violation?) (set! gN2b8d@gN29b1@make-lexical-violation gN29b1@make-lexical-violation) (set! gN2b8c@gN29af@p? gN29af@p?) (set! gN2b8b@gN29ac@gN29a4 gN29ac@gN29a4) (set! gN2b8a@gN29aa@gN29a5 gN29aa@gN29a5) (set! gN2b89@gN29a8@gN29a3 gN29a8@gN29a3) (set! gN2b88@gN29a2@&implementation-restriction-rcd gN29a2@&implementation-restriction-rcd) (set! gN2b87@gN29a0@&implementation-restriction-rtd gN29a0@&implementation-restriction-rtd) (set! gN2b86@gN299e@implementation-restriction-violation? gN299e@implementation-restriction-violation?) (set! gN2b85@gN299c@make-implementation-restriction-violation gN299c@make-implementation-restriction-violation) (set! gN2b84@gN299a@p? gN299a@p?) (set! gN2b83@gN2997@gN298f gN2997@gN298f) (set! gN2b82@gN2995@gN2990 gN2995@gN2990) (set! gN2b81@gN2993@gN298e gN2993@gN298e) (set! gN2b80@gN298d@&non-continuable-rcd gN298d@&non-continuable-rcd) (set! gN2b7f@gN298b@&non-continuable-rtd gN298b@&non-continuable-rtd) (set! gN2b7e@gN2989@non-continuable-violation? gN2989@non-continuable-violation?) (set! gN2b7d@gN2987@make-non-continuable-violation gN2987@make-non-continuable-violation) (set! gN2b7c@gN2985@p? gN2985@p?) (set! gN2b7b@gN2982@gN297a gN2982@gN297a) (set! gN2b7a@gN2980@gN297b gN2980@gN297b) (set! gN2b79@gN297e@gN2979 gN297e@gN2979) (set! gN2b78@gN2978@&who-rcd gN2978@&who-rcd) (set! gN2b77@gN2976@&who-rtd gN2976@&who-rtd) (set! gN2b76@gN2974@condition-who gN2974@condition-who) (set! gN2b75@gN2972@who-condition? gN2972@who-condition?) (set! gN2b74@gN2970@gN295f gN2970@gN295f) (set! gN2b73@gN296e@make-who-condition gN296e@make-who-condition) (set! gN2b72@gN296c@p? gN296c@p?) (set! gN2b71@gN2969@gN2961 gN2969@gN2961) (set! gN2b70@gN2967@gN2962 gN2967@gN2962) (set! gN2b6f@gN2965@gN2960 gN2965@gN2960) (set! gN2b6e@gN295d@&irritants-rcd gN295d@&irritants-rcd) (set! gN2b6d@gN295b@&irritants-rtd gN295b@&irritants-rtd) (set! gN2b6c@gN2959@condition-irritants gN2959@condition-irritants) (set! gN2b6b@gN2957@irritants-condition? gN2957@irritants-condition?) (set! gN2b6a@gN2955@gN2944 gN2955@gN2944) (set! gN2b69@gN2953@make-irritants-condition gN2953@make-irritants-condition) (set! gN2b68@gN2951@p? gN2951@p?) (set! gN2b67@gN294e@gN2946 gN294e@gN2946) (set! gN2b66@gN294c@gN2947 gN294c@gN2947) (set! gN2b65@gN294a@gN2945 gN294a@gN2945) (set! gN2b64@gN2942@&assertion-rcd gN2942@&assertion-rcd) (set! gN2b63@gN2940@&assertion-rtd gN2940@&assertion-rtd) (set! gN2b62@gN293e@assertion-violation? gN293e@assertion-violation?) (set! gN2b61@gN293c@make-assertion-violation gN293c@make-assertion-violation) (set! gN2b60@gN293a@p? gN293a@p?) (set! gN2b5f@gN2937@gN292f gN2937@gN292f) (set! gN2b5e@gN2935@gN2930 gN2935@gN2930) (set! gN2b5d@gN2933@gN292e gN2933@gN292e) (set! gN2b5c@gN292d@&violation-rcd gN292d@&violation-rcd) (set! gN2b5b@gN292b@&violation-rtd gN292b@&violation-rtd) (set! gN2b5a@gN2929@violation? gN2929@violation?) (set! gN2b59@gN2927@make-violation gN2927@make-violation) (set! gN2b58@gN2925@p? gN2925@p?) (set! gN2b57@gN2922@gN291a gN2922@gN291a) (set! gN2b56@gN2920@gN291b gN2920@gN291b) (set! gN2b55@gN291e@gN2919 gN291e@gN2919) (set! gN2b54@gN2918@&error-rcd gN2918@&error-rcd) (set! gN2b53@gN2916@&error-rtd gN2916@&error-rtd) (set! gN2b52@gN2914@error? gN2914@error?) (set! gN2b51@gN2912@make-error gN2912@make-error) (set! gN2b50@gN2910@p? gN2910@p?) (set! gN2b4f@gN290d@gN2905 gN290d@gN2905) (set! gN2b4e@gN290b@gN2906 gN290b@gN2906) (set! gN2b4d@gN2909@gN2904 gN2909@gN2904) (set! gN2b4c@gN2903@&serious-rcd gN2903@&serious-rcd) (set! gN2b4b@gN2901@&serious-rtd gN2901@&serious-rtd) (set! gN2b4a@gN28ff@serious-condition? gN28ff@serious-condition?) (set! gN2b49@gN28fd@make-serious-condition gN28fd@make-serious-condition) (set! gN2b48@gN28fb@p? gN28fb@p?) (set! gN2b47@gN28f8@gN28f0 gN28f8@gN28f0) (set! gN2b46@gN28f6@gN28f1 gN28f6@gN28f1) (set! gN2b45@gN28f4@gN28ef gN28f4@gN28ef) (set! gN2b44@gN28ee@&warning-rcd gN28ee@&warning-rcd) (set! gN2b43@gN28ec@&warning-rtd gN28ec@&warning-rtd) (set! gN2b42@gN28ea@warning? gN28ea@warning?) (set! gN2b41@gN28e8@make-warning gN28e8@make-warning) (set! gN2b40@gN28e6@p? gN28e6@p?) (set! gN2b3f@gN28e3@gN28db gN28e3@gN28db) (set! gN2b3e@gN28e1@gN28dc gN28e1@gN28dc) (set! gN2b3d@gN28df@gN28da gN28df@gN28da) (set! gN2b3c@gN28d9@&message-rcd gN28d9@&message-rcd) (set! gN2b3b@gN28d7@&message-rtd gN28d7@&message-rtd) (set! gN2b3a@gN28d5@condition-message gN28d5@condition-message) (set! gN2b39@gN28d3@message-condition? gN28d3@message-condition?) (set! gN2b38@gN28d1@gN28c0 gN28d1@gN28c0) (set! gN2b37@gN28cf@make-message-condition gN28cf@make-message-condition) (set! gN2b36@gN28cd@p? gN28cd@p?) (set! gN2b35@gN28ca@gN28c2 gN28ca@gN28c2) (set! gN2b34@gN28c8@gN28c3 gN28c8@gN28c3) (set! gN2b33@gN28c6@gN28c1 gN28c6@gN28c1) (set! gN2b32@gN287a@&condition-rcd gN287a@&condition-rcd) (set! gN2b31@gN2878@&condition-rtd gN2878@&condition-rtd) (set! gN2b30@gN2876@make-&condition gN2876@make-&condition) (set! gN2b2f@gN2874@&condition? gN2874@&condition?) (set! gN2b2e@gN2871@gN2869 gN2871@gN2869) (set! gN2b2d@gN286f@gN286a gN286f@gN286a) (set! gN2b2c@gN286d@gN2868 gN286d@gN2868)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (gN70f@gN6c4@current-primitive-locations (lambda (gN30e7@x) ((lambda (gN30e9@t) (if gN30e9@t (cdr gN30e9@t) '#f)) (assq gN30e7@x '((&no-nans-rcd . gN2c1c@gN2b2b@&no-nans-rcd) (&no-nans-rtd . gN2c1b@gN2b29@&no-nans-rtd) (&no-infinities-rcd . gN2c14@gN2b16@&no-infinities-rcd) (&no-infinities-rtd . gN2c13@gN2b14@&no-infinities-rtd) (&i/o-encoding-rcd . gN2c0c@gN2b01@&i/o-encoding-rcd) (&i/o-encoding-rtd . gN2c0b@gN2aff@&i/o-encoding-rtd) (&i/o-decoding-rcd . gN2c02@gN2ae6@&i/o-decoding-rcd) (&i/o-decoding-rtd . gN2c01@gN2ae4@&i/o-decoding-rtd) (&i/o-port-rcd . gN2bfa@gN2ad1@&i/o-port-rcd) (&i/o-port-rtd . gN2bf9@gN2acf@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . gN2bf0@gN2ab6@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . gN2bef@gN2ab4@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . gN2be8@gN2aa1@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . gN2be7@gN2a9f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . gN2be0@gN2a8c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . gN2bdf@gN2a8a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . gN2bd8@gN2a77@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . gN2bd7@gN2a75@&i/o-file-protection-rtd) (&i/o-filename-rcd . gN2bd0@gN2a62@&i/o-filename-rcd) (&i/o-filename-rtd . gN2bcf@gN2a60@&i/o-filename-rtd) (&i/o-invalid-position-rcd . gN2bc6@gN2a47@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . gN2bc5@gN2a45@&i/o-invalid-position-rtd) (&i/o-write-rcd . gN2bbc@gN2a2c@&i/o-write-rcd) (&i/o-write-rtd . gN2bbb@gN2a2a@&i/o-write-rtd) (&i/o-read-rcd . gN2bb4@gN2a17@&i/o-read-rcd) (&i/o-read-rtd . gN2bb3@gN2a15@&i/o-read-rtd) (&i/o-rcd . gN2bac@gN2a02@&i/o-rcd) (&i/o-rtd . gN2bab@gN2a00@&i/o-rtd) (&undefined-rcd . gN2ba4@gN29ed@&undefined-rcd) (&undefined-rtd . gN2ba3@gN29eb@&undefined-rtd) (&syntax-rcd . gN2b9c@gN29d8@&syntax-rcd) (&syntax-rtd . gN2b9b@gN29d6@&syntax-rtd) (&lexical-rcd . gN2b90@gN29b7@&lexical-rcd) (&lexical-rtd . gN2b8f@gN29b5@&lexical-rtd) (&implementation-restriction-rcd . gN2b88@gN29a2@&implementation-restriction-rcd) (&implementation-restriction-rtd . gN2b87@gN29a0@&implementation-restriction-rtd) (&non-continuable-rcd . gN2b80@gN298d@&non-continuable-rcd) (&non-continuable-rtd . gN2b7f@gN298b@&non-continuable-rtd) (&who-rcd . gN2b78@gN2978@&who-rcd) (&who-rtd . gN2b77@gN2976@&who-rtd) (&irritants-rcd . gN2b6e@gN295d@&irritants-rcd) (&irritants-rtd . gN2b6d@gN295b@&irritants-rtd) (&assertion-rcd . gN2b64@gN2942@&assertion-rcd) (&assertion-rtd . gN2b63@gN2940@&assertion-rtd) (&violation-rcd . gN2b5c@gN292d@&violation-rcd) (&violation-rtd . gN2b5b@gN292b@&violation-rtd) (&error-rcd . gN2b54@gN2918@&error-rcd) (&error-rtd . gN2b53@gN2916@&error-rtd) (&serious-rcd . gN2b4c@gN2903@&serious-rcd) (&serious-rtd . gN2b4b@gN2901@&serious-rtd) (&warning-rcd . gN2b44@gN28ee@&warning-rcd) (&warning-rtd . gN2b43@gN28ec@&warning-rtd) (&message-rcd . gN2b3c@gN28d9@&message-rcd) (&message-rtd . gN2b3b@gN28d7@&message-rtd) (&condition-rcd . gN2b32@gN287a@&condition-rcd) (&condition-rtd . gN2b31@gN2878@&condition-rtd) (syntax-error . gN2855@gNe3e@syntax-error) (syntax-dispatch . gN27f3@gNd62@syntax-dispatch) (load . gN2d91@gN2c3c@load) (interaction-environment . gN285d@gNe4e@interaction-environment) (library-path . gN976@gN7b2@library-path) (mosh-cache-dir . gN6bd@gN59d@mosh-cache-dir) (make-parameter . gN6bc@gN59b@make-parameter) (make-variable-transformer . gN27b1@gNb8f@make-variable-transformer) (identifier? . gN2858@gNe44@identifier?) (generate-temporaries . gN284e@gNe30@generate-temporaries) (free-identifier=? . gN284f@gNe32@free-identifier=?) (syntax->datum . gN285a@gNe48@syntax->datum) (datum->syntax . gN2859@gNe46@datum->syntax) (bound-identifier=? . gN2850@gNe34@bound-identifier=?) (make-i/o-write-error . gN2bb9@gN2a26@make-i/o-write-error) (make-i/o-read-error . gN2bb1@gN2a11@make-i/o-read-error) (make-i/o-port-error . gN2bf5@gN2ac7@make-i/o-port-error) (make-i/o-invalid-position-error . gN2bc1@gN2a3d@make-i/o-invalid-position-error) (make-i/o-filename-error . gN2bcb@gN2a58@make-i/o-filename-error) (make-i/o-file-protection-error . gN2bd5@gN2a71@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . gN2bdd@gN2a86@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . gN2bed@gN2ab0@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . gN2be5@gN2a9b@make-i/o-file-already-exists-error) (make-i/o-error . gN2ba9@gN29fc@make-i/o-error) (make-i/o-encoding-error . gN2c07@gN2af7@make-i/o-encoding-error) (make-i/o-decoding-error . gN2bff@gN2ae0@make-i/o-decoding-error) (i/o-write-error? . gN2bba@gN2a28@i/o-write-error?) (i/o-read-error? . gN2bb2@gN2a13@i/o-read-error?) (i/o-port-error? . gN2bf7@gN2acb@i/o-port-error?) (i/o-invalid-position-error? . gN2bc3@gN2a41@i/o-invalid-position-error?) (i/o-filename-error? . gN2bcd@gN2a5c@i/o-filename-error?) (i/o-file-protection-error? . gN2bd6@gN2a73@i/o-file-protection-error?) (i/o-file-is-read-only-error? . gN2bde@gN2a88@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . gN2bee@gN2ab2@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . gN2be6@gN2a9d@i/o-file-already-exists-error?) (i/o-error? . gN2baa@gN29fe@i/o-error?) (i/o-error-position . gN2bc4@gN2a43@i/o-error-position) (i/o-error-port . gN2bf8@gN2acd@i/o-error-port) (i/o-error-filename . gN2bce@gN2a5e@i/o-error-filename) (i/o-encoding-error? . gN2c09@gN2afb@i/o-encoding-error?) (i/o-encoding-error-char . gN2c0a@gN2afd@i/o-encoding-error-char) (i/o-decoding-error? . gN2c00@gN2ae2@i/o-decoding-error?) (scheme-report-environment . gN2845@gNe1e@scheme-report-environment) (null-environment . gN2844@gNe1c@null-environment) (command-line . gN2d8e@gN2c36@command-line) (eval . gN2847@gNe22@eval) (environment . gN2843@gNe1a@environment) (who-condition? . gN2b75@gN2972@who-condition?) (warning? . gN2b42@gN28ea@warning?) (violation? . gN2b5a@gN2929@violation?) (undefined-violation? . gN2ba2@gN29e9@undefined-violation?) (syntax-violation? . gN2b98@gN29d0@syntax-violation?) (syntax-violation-subform . gN2b9a@gN29d4@syntax-violation-subform) (syntax-violation-form . gN2b99@gN29d2@syntax-violation-form) (syntax-violation . gN2857@gNe42@syntax-violation) (serious-condition? . gN2b4a@gN28ff@serious-condition?) (non-continuable-violation? . gN2b7e@gN2989@non-continuable-violation?) (message-condition? . gN2b39@gN28d3@message-condition?) (make-who-condition . gN2b73@gN296e@make-who-condition) (make-warning . gN2b41@gN28e8@make-warning) (make-violation . gN2b59@gN2927@make-violation) (make-undefined-violation . gN2ba1@gN29e7@make-undefined-violation) (make-syntax-violation . gN2b95@gN29ca@make-syntax-violation) (make-serious-condition . gN2b49@gN28fd@make-serious-condition) (make-non-continuable-violation . gN2b7d@gN2987@make-non-continuable-violation) (make-message-condition . gN2b37@gN28cf@make-message-condition) (make-lexical-violation . gN2b8d@gN29b1@make-lexical-violation) (make-irritants-condition . gN2b69@gN2953@make-irritants-condition) (make-implementation-restriction-violation . gN2b85@gN299c@make-implementation-restriction-violation) (make-error . gN2b51@gN2912@make-error) (make-assertion-violation . gN2b61@gN293c@make-assertion-violation) (lexical-violation? . gN2b8e@gN29b3@lexical-violation?) (irritants-condition? . gN2b6b@gN2957@irritants-condition?) (implementation-restriction-violation? . gN2b86@gN299e@implementation-restriction-violation?) (error? . gN2b52@gN2914@error?) (condition-who . gN2b76@gN2974@condition-who) (condition-message . gN2b3a@gN28d5@condition-message) (condition-irritants . gN2b6c@gN2959@condition-irritants) (assertion-violation? . gN2b62@gN293e@assertion-violation?) (no-nans-violation? . gN2c1a@gN2b27@no-nans-violation?) (no-infinities-violation? . gN2c12@gN2b12@no-infinities-violation?) (make-no-nans-violation . gN2c19@gN2b25@make-no-nans-violation) (make-no-infinities-violation . gN2c11@gN2b10@make-no-infinities-violation) (assertion-error . gN2854@gNe3c@assertion-error)))))) (gN986@gN7d2@install-library 'gN30c4 '(mosh interaction) '() '() '() '() '((regexp? . gN30bc) (alist->eq-hash-table . gN30b8) (format . gN30b5) (string-split . gN30aa) (call-process . gN30a4) (set-current-directory! . gN30a0) (expand-path . gN309f) (current-directory . gN309e) (%spawn . gN309d) (%waitpid . gN309c) (simple-struct-name . gN309b) (simple-struct-set! . gN309a) (simple-struct-ref . gN3099) (make-simple-struct . gN3098) (simple-struct? . gN3097) (pointer-ref-c-int64 . gN3096) (pointer-ref-c-int32 . gN3095) (pointer-ref-c-int16 . gN3094) (pointer-ref-c-int8 . gN3093) (pointer-ref-c-uint64 . gN3092) (pointer-ref-c-uint32 . gN3091) (pointer-ref-c-uint16 . gN3090) (pointer-ref-c-uint8 . gN308f) (pointer-set-c-uint64! . gN308e) (pointer-set-c-uint32! . gN308d) (pointer-set-c-uint16! . gN308c) (pointer-set-c-uint8! . gN308b) (pointer-set-c-int64! . gN308a) (pointer-set-c-int32! . gN3089) (pointer-set-c-int16! . gN3088) (pointer-set-c-int8! . gN3087) (pointer-set-c-pointer! . gN3086) (pointer-set-c-double! . gN3085) (pointer-set-c-float! . gN3084) (pointer-set-c-long-long! . gN3083) (pointer-set-c-long! . gN3082) (pointer-set-c-int! . gN3081) (pointer-set-c-short! . gN3080) (pointer-set-c-char! . gN307f) (pointer-ref-c-pointer . gN307e) (pointer-ref-c-double . gN307d) (pointer-ref-c-float . gN307c) (pointer-ref-c-unsigned-long-long . gN307b) (pointer-ref-c-signed-long-long . gN307a) (pointer-ref-c-unsigned-long . gN3079) (pointer-ref-c-signed-long . gN3078) (pointer-ref-c-unsigned-int . gN3077) (pointer-ref-c-signed-int . gN3076) (pointer-ref-c-unsigned-short . gN3075) (pointer-ref-c-signed-short . gN3074) (pointer-ref-c-unsigned-char . gN3073) (pointer-ref-c-signed-char . gN3072) (pointer->integer . gN3071) (integer->pointer . gN3070) (pointer? . gN306f) (shared-errno . gN306e) (%ffi-supported? . gN306b) (%ffi-pointer->string . gN306a) (%ffi-call->string-or-zero . gN3069) (%ffi-call->double . gN3068) (%ffi-call->void* . gN3067) (%ffi-call->void . gN3066) (%ffi-call->char . gN3065) (%ffi-call->int . gN3064) (%ffi-lookup . gN3063) (%ffi-open . gN3062) (%fork . gN3061) (%pipe . gN3060) (p . gN305f) (whereis . gN3043) (register . gN3042) (vm-join! . gN3041) (vm-set-value! . gN3040) (vm? . gN303f) (main-vm? . gN303e) (vm-eval . gN303d) (vm-self . gN303c) (vm-start! . gN303b) (make-vm . gN303a) (mutex-try-lock! . gN3039) (mutex-unlock! . gN3038) (mutex-lock! . gN3037) (mutex? . gN3036) (make-mutex . gN3035) (condition-variable-notify-all! . gN3034) (condition-variable-notify! . gN3033) (condition-variable-wait! . gN3032) (make-condition-variable . gN3031) (string-upcase . gN301a) (string-titlecase . gN3019) (string-normalize-nfkd . gN3018) (string-normalize-nfkc . gN3017) (string-normalize-nfd . gN3016) (string-normalize-nfc . gN3015) (string-foldcase . gN3014) (string-downcase . gN3013) (string-ci>? . gN3012) (string-ci>=? . gN3011) (string-ci=? . gN3010) (string-ci<? . gN300f) (string-ci<=? . gN300e) (char-whitespace? . gN300d) (char-upper-case? . gN300c) (char-title-case? . gN300b) (char-numeric? . gN300a) (char-lower-case? . gN3009) (char-general-category . gN3008) (char-upcase . gN3007) (char-titlecase . gN3006) (char-foldcase . gN3005) (char-downcase . gN3004) (char-ci>? . gN3003) (char-ci>=? . gN3002) (char-ci=? . gN3001) (char-ci<? . gN3000) (char-ci<=? . gN2fff) (char-alphabetic? . gN2ffe) (make-variable-transformer . gNb8e) (identifier? . gNe43) (generate-temporaries . gNe2f) (free-identifier=? . gNe31) (syntax->datum . gNe47) (datum->syntax . gNe45) (bound-identifier=? . gNe33) (record-type-descriptor? . gN2ffd) (record-predicate . gN2ffc) (record-mutator . gN2ffb) (record-constructor . gN2ffa) (record-accessor . gN2ff9) (make-record-type-descriptor . gN2ff8) (make-record-constructor-descriptor . gN2ff7) (record? . gN2ff6) (record-type-uid . gN2ff5) (record-type-sealed? . gN2ff4) (record-type-parent . gN2ff3) (record-type-opaque? . gN2ff2) (record-type-name . gN2ff1) (record-type-generative? . gN2ff0) (record-type-field-names . gN2fef) (record-rtd . gN2fee) (record-field-mutable? . gN2fed) (delete-file . gN2fec) (file-exists? . gN2feb) (vector-sort! . gN2fea) (vector-sort . gN2fe9) (list-sort . gN2fe8) (symbol-hash . gN2fe7) (string-ci-hash . gN2fe6) (string-hash . gN2fe5) (equal-hash . gN2fe4) (hashtable-equivalence-function . gN2fe3) (make-hashtable . gN2fe2) (hashtable-hash-function . gN2fe1) (make-eqv-hashtable . gN2fe0) (make-eq-hashtable . gN2fdf) (hashtable? . gN2fde) (hashtable-update! . gN2fdd) (hashtable-size . gN2fdc) (hashtable-set! . gN2fdb) (hashtable-ref . gN2fda) (hashtable-mutable? . gN2fd9) (hashtable-keys . gN2fd8) (hashtable-entries . gN2fd7) (hashtable-delete! . gN2fd6) (hashtable-copy . gN2fd5) (hashtable-contains? . gN2fd4) (hashtable-clear! . gN2fd3) (call-with-output-file . gN2fd2) (call-with-input-file . gN2fd1) (write-char . gN2fd0) (write . gN2fcf) (with-output-to-file . gN2fce) (with-input-from-file . gN2fcd) (read-char . gN2fcc) (read . gN2fcb) (peek-char . gN2fca) (open-output-file . gN2fc9) (open-input-file . gN2fc8) (newline . gN2fc7) (display . gN2fc6) (close-output-port . gN2fc5) (close-input-port . gN2fc4) (eof-object? . gN2fc3) (eof-object . gN2fc2) (current-error-port . gN2fc1) (current-output-port . gN2fc0) (current-input-port . gN2fbf) (output-port? . gN2fbe) (input-port? . gN2fbd) (utf-8-codec . gN2fbc) (utf-16-codec . gN2fbb) (transcoder-error-handling-mode . gN2fba) (transcoder-eol-style . gN2fb9) (transcoder-codec . gN2fb8) (transcoded-port . gN2fb7) (textual-port? . gN2fb6) (string->bytevector . gN2fb5) (standard-output-port . gN2fb4) (standard-input-port . gN2fb3) (standard-error-port . gN2fb2) (set-port-position! . gN2fb1) (put-u8 . gN2fb0) (put-string . gN2faf) (put-datum . gN2fae) (put-char . gN2fad) (put-bytevector . gN2fac) (port? . gN2fab) (port-transcoder . gN2faa) (port-position . gN2fa9) (port-has-set-port-position!? . gN2fa8) (port-has-port-position? . gN2fa7) (port-eof? . gN2fa6) (output-port-buffer-mode . gN2fa5) (open-string-output-port . gN2fa4) (open-string-input-port . gN2fa3) (open-file-output-port . gN2fa2) (open-file-input/output-port . gN2fa1) (open-file-input-port . gN2fa0) (open-bytevector-output-port . gN2f9f) (open-bytevector-input-port . gN2f9e) (native-transcoder . gN2f9d) (native-eol-style . gN2f9c) (make-transcoder . gN2f9b) (latin-1-codec . gN2f9a) (make-i/o-write-error . gN2a25) (make-i/o-read-error . gN2a10) (make-i/o-port-error . gN2ac6) (make-i/o-invalid-position-error . gN2a3c) (make-i/o-filename-error . gN2a57) (make-i/o-file-protection-error . gN2a70) (make-i/o-file-is-read-only-error . gN2a85) (make-i/o-file-does-not-exist-error . gN2aaf) (make-i/o-file-already-exists-error . gN2a9a) (make-i/o-error . gN29fb) (make-i/o-encoding-error . gN2af6) (make-i/o-decoding-error . gN2adf) (make-custom-textual-output-port . gN2f99) (make-custom-textual-input/output-port . gN2f98) (make-custom-textual-input-port . gN2f97) (make-custom-binary-output-port . gN2f96) (make-custom-binary-input/output-port . gN2f95) (make-custom-binary-input-port . gN2f94) (make-bytevector . gN2f93) (lookahead-u8 . gN2f92) (lookahead-char . gN2f91) (i/o-write-error? . gN2a27) (i/o-read-error? . gN2a12) (i/o-port-error? . gN2aca) (i/o-invalid-position-error? . gN2a40) (i/o-filename-error? . gN2a5b) (i/o-file-protection-error? . gN2a72) (i/o-file-is-read-only-error? . gN2a87) (i/o-file-does-not-exist-error? . gN2ab1) (i/o-file-already-exists-error? . gN2a9c) (i/o-error? . gN29fd) (i/o-error-position . gN2a42) (i/o-error-port . gN2acc) (i/o-error-filename . gN2a5d) (i/o-encoding-error? . gN2afa) (i/o-encoding-error-char . gN2afc) (i/o-decoding-error? . gN2ae1) (get-u8 . gN2f90) (get-string-n! . gN2f8f) (get-string-n . gN2f8e) (get-string-all . gN2f8d) (get-line . gN2f8c) (get-datum . gN2f8b) (get-char . gN2f8a) (get-bytevector-some . gN2f89) (get-bytevector-n! . gN2f88) (get-bytevector-n . gN2f87) (get-bytevector-all . gN2f86) (flush-output-port . gN2f85) (close-port . gN2f84) (exit . gN2f7c) (command-line . gN2c35) (string-fill! . gN2f7b) (string-set! . gN2f7a) (set-cdr! . gN2f79) (set-car! . gN2f78) (remove . gN2f77) (remv . gN2f76) (remp . gN2f75) (remq . gN2f74) (partition . gN2f73) (memv . gN2f72) (memq . gN2f71) (memp . gN2f70) (member . gN2f6f) (exists . gN2f6e) (for-all . gN2f6d) (fold-right . gN2f6c) (fold-left . gN2f6b) (find . gN2f6a) (filter . gN2f69) (cons* . gN2f68) (assv . gN2f67) (assq . gN2f66) (assp . gN2f65) (assoc . gN2f64) (call-with-string-output-port . gN2f63) (call-with-port . gN2f62) (call-with-bytevector-output-port . gN2f61) (bytevector->string . gN2f60) (buffer-mode? . gN2f5f) (binary-port? . gN2f5e) (with-exception-handler . gN2f5d) (raise-continuable . gN2f5c) (raise . gN2f5b) (eval . gNe21) (environment . gNe19) (make-enumeration . gN2f5a) (enum-set=? . gN2f59) (enum-set-universe . gN2f58) (enum-set-union . gN2f57) (enum-set-subset? . gN2f56) (enum-set-projection . gN2f55) (enum-set-member? . gN2f54) (enum-set-intersection . gN2f53) (enum-set-indexer . gN2f52) (enum-set-difference . gN2f51) (enum-set-constructor . gN2f50) (enum-set-complement . gN2f4f) (enum-set->list . gN2f4e) (who-condition? . gN2971) (warning? . gN28e9) (violation? . gN2928) (undefined-violation? . gN29e8) (syntax-violation? . gN29cf) (syntax-violation-subform . gN29d3) (syntax-violation-form . gN29d1) (syntax-violation . gNe41) (simple-conditions . gN2f4d) (serious-condition? . gN28fe) (non-continuable-violation? . gN2988) (message-condition? . gN28d2) (make-who-condition . gN296d) (make-warning . gN28e7) (make-violation . gN2926) (make-undefined-violation . gN29e6) (make-syntax-violation . gN29c9) (make-serious-condition . gN28fc) (make-non-continuable-violation . gN2986) (make-message-condition . gN28ce) (make-lexical-violation . gN29b0) (make-irritants-condition . gN2952) (make-implementation-restriction-violation . gN299b) (make-error . gN2911) (make-assertion-violation . gN293b) (lexical-violation? . gN29b2) (irritants-condition? . gN2956) (implementation-restriction-violation? . gN299d) (error? . gN2913) (condition-who . gN2973) (condition-predicate . gN2f4c) (condition-message . gN28d4) (condition-irritants . gN2958) (condition-accessor . gN2f4b) (condition . gN2f4a) (assertion-violation? . gN293d) (condition? . gN2f49) (utf32->string . gN2f48) (utf16->string . gN2f47) (utf8->string . gN2f46) (uint-list->bytevector . gN2f45) (u8-list->bytevector . gN2f44) (string->utf8 . gN2f43) (string->utf32 . gN2f42) (string->utf16 . gN2f41) (sint-list->bytevector . gN2f40) (native-endianness . gN2f3f) (bytevector? . gN2f3e) (bytevector=? . gN2f3d) (bytevector-uint-set! . gN2f3c) (bytevector-uint-ref . gN2f3b) (bytevector-u8-set! . gN2f3a) (bytevector-u8-ref . gN2f39) (bytevector-u64-set! . gN2f38) (bytevector-u64-ref . gN2f37) (bytevector-u64-native-set! . gN2f36) (bytevector-u64-native-ref . gN2f35) (bytevector-u32-set! . gN2f34) (bytevector-u32-ref . gN2f33) (bytevector-u32-native-set! . gN2f32) (bytevector-u32-native-ref . gN2f31) (bytevector-u16-set! . gN2f30) (bytevector-u16-ref . gN2f2f) (bytevector-u16-native-set! . gN2f2e) (bytevector-u16-native-ref . gN2f2d) (bytevector-sint-set! . gN2f2c) (bytevector-sint-ref . gN2f2b) (bytevector-s8-set! . gN2f2a) (bytevector-s8-ref . gN2f29) (bytevector-s64-set! . gN2f28) (bytevector-s64-ref . gN2f27) (bytevector-s64-native-set! . gN2f26) (bytevector-s64-native-ref . gN2f25) (bytevector-s32-set! . gN2f24) (bytevector-s32-ref . gN2f23) (bytevector-s32-native-set! . gN2f22) (bytevector-s32-native-ref . gN2f21) (bytevector-s16-set! . gN2f20) (bytevector-s16-ref . gN2f1f) (bytevector-s16-native-set! . gN2f1e) (bytevector-s16-native-ref . gN2f1d) (bytevector-length . gN2f1c) (bytevector-ieee-single-ref . gN2f1b) (bytevector-ieee-single-set! . gN2f1a) (bytevector-ieee-single-native-set! . gN2f19) (bytevector-ieee-single-native-ref . gN2f18) (bytevector-ieee-double-set! . gN2f17) (bytevector-ieee-double-ref . gN2f16) (bytevector-ieee-double-native-set! . gN2f15) (bytevector-ieee-double-native-ref . gN2f14) (bytevector-fill! . gN2f13) (bytevector-copy! . gN2f12) (bytevector-copy . gN2f11) (bytevector->uint-list . gN2f10) (bytevector->u8-list . gN2f0f) (bytevector->sint-list . gN2f0e) (no-nans-violation? . gN2b26) (no-infinities-violation? . gN2b11) (make-no-nans-violation . gN2b24) (make-no-infinities-violation . gN2b0f) (real->flonum . gN2f0d) (flzero? . gN2f0c) (fltruncate . gN2f0b) (fltan . gN2f0a) (flsqrt . gN2f09) (flsin . gN2f08) (flround . gN2f07) (flpositive? . gN2f06) (flonum? . gN2f05) (flodd? . gN2f04) (flnumerator . gN2f03) (flnegative? . gN2f02) (flnan? . gN2f01) (flmod0 . gN2f00) (flmod . gN2eff) (flmin . gN2efe) (flmax . gN2efd) (fllog . gN2efc) (flinteger? . gN2efb) (flinfinite? . gN2efa) (flfloor . gN2ef9) (flfinite? . gN2ef8) (flexpt . gN2ef7) (flexp . gN2ef6) (fleven? . gN2ef5) (fldiv0-and-mod0 . gN2ef4) (fldiv0 . gN2ef3) (fldiv-and-mod . gN2ef2) (fldiv . gN2ef1) (fldenominator . gN2ef0) (flcos . gN2eef) (flceiling . gN2eee) (flatan . gN2eed) (flasin . gN2eec) (flacos . gN2eeb) (flabs . gN2eea) (fl>? . gN2ee9) (fl>=? . gN2ee8) (fl=? . gN2ee7) (fl<? . gN2ee6) (fl<=? . gN2ee5) (fl/ . gN2ee4) (fl- . gN2ee3) (fl+ . gN2ee2) (fl* . gN2ee1) (fixnum->flonum . gN2ee0) (fxzero? . gN2edf) (fxxor . gN2ede) (fxrotate-bit-field . gN2edd) (fxreverse-bit-field . gN2edc) (fxpositive? . gN2edb) (fxodd? . gN2eda) (fxnot . gN2ed9) (fxnegative? . gN2ed8) (fxmod0 . gN2ed7) (fxmod . gN2ed6) (fxmin . gN2ed5) (fxmax . gN2ed4) (fxlength . gN2ed3) (fxior . gN2ed2) (fxif . gN2ed1) (fxfirst-bit-set . gN2ed0) (fxeven? . gN2ecf) (fxdiv0-and-mod0 . gN2ece) (fxdiv0 . gN2ecd) (fxdiv-and-mod . gN2ecc) (fxdiv . gN2ecb) (fxcopy-bit-field . gN2eca) (fxcopy-bit . gN2ec9) (fxbit-set? . gN2ec8) (fxbit-field . gN2ec7) (fxbit-count . gN2ec6) (fxarithmetic-shift-right . gN2ec5) (fxarithmetic-shift-left . gN2ec4) (fxarithmetic-shift . gN2ec3) (fxand . gN2ec2) (fx>? . gN2ec1) (fx>=? . gN2ec0) (fx=? . gN2ebf) (fx<? . gN2ebe) (fx<=? . gN2ebd) (fx-/carry . gN2ebc) (fx- . gN2ebb) (fx+/carry . gN2eba) (fx+ . gN2eb9) (fx*/carry . gN2eb8) (fx* . gN2eb7) (greatest-fixnum . gN2eb6) (least-fixnum . gN2eb5) (fixnum-width . gN2eb4) (fixnum? . gN2eb3) (bitwise-rotate-bit-field . gN2eb2) (bitwise-reverse-bit-field . gN2eb1) (bitwise-length . gN2eb0) (bitwise-if . gN2eaf) (bitwise-first-bit-set . gN2eae) (bitwise-copy-bit-field . gN2ead) (bitwise-copy-bit . gN2eac) (bitwise-bit-set? . gN2eab) (bitwise-bit-field . gN2eaa) (bitwise-bit-count . gN2ea9) (bitwise-xor . gN2ea8) (bitwise-ior . gN2ea7) (bitwise-and . gN2ea6) (bitwise-not . gN2ea5) (bitwise-arithmetic-shift-right . gN2ea4) (bitwise-arithmetic-shift-left . gN2ea3) (bitwise-arithmetic-shift . gN2ea2) (zero? . gN2ea1) (vector? . gN2ea0) (vector-set! . gN2e9f) (vector-ref . gN2e9e) (vector-map . gN2e9d) (vector-length . gN2e9c) (vector-for-each . gN2e9b) (vector-fill! . gN2e9a) (vector->list . gN2e99) (vector . gN2e98) (values . gN2e97) (truncate . gN2e96) (tan . gN2e95) (symbol? . gN2e94) (symbol=? . gN2e93) (symbol->string . gN2e92) (substring . gN2e91) (string? . gN2e90) (string>? . gN2e8f) (string>=? . gN2e8e) (string=? . gN2e8d) (string<? . gN2e8c) (string<=? . gN2e8b) (string-ref . gN2e8a) (string-length . gN2e89) (string-for-each . gN2e88) (string-copy . gN2e87) (string-append . gN2e86) (string->symbol . gN2e85) (string->number . gN2e84) (string->list . gN2e83) (string . gN2e82) (sqrt . gN2e81) (sin . gN2e80) (round . gN2e7f) (reverse . gN2e7e) (real? . gN2e7d) (real-valued? . gN2e7c) (real-part . gN2e7b) (rationalize . gN2e7a) (rational? . gN2e79) (rational-valued? . gN2e78) (procedure? . gN2e77) (positive? . gN2e76) (pair? . gN2e75) (odd? . gN2e74) (numerator . gN2e73) (number? . gN2e72) (number->string . gN2e71) (null? . gN2e70) (not . gN2e6f) (negative? . gN2e6e) (nan? . gN2e6d) (min . gN2e6c) (max . gN2e6b) (map . gN2e6a) (make-vector . gN2e69) (make-string . gN2e68) (make-rectangular . gN2e67) (make-polar . gN2e66) (magnitude . gN2e65) (log . gN2e64) (list? . gN2e63) (list-tail . gN2e62) (list-ref . gN2e61) (list->vector . gN2e60) (list->string . gN2e5f) (list . gN2e5e) (length . gN2e5d) (lcm . gN2e5c) (integer? . gN2e5b) (integer-valued? . gN2e5a) (integer->char . gN2e59) (infinite? . gN2e58) (inexact? . gN2e57) (inexact . gN2e56) (imag-part . gN2e55) (gcd . gN2e54) (for-each . gN2e53) (floor . gN2e52) (finite? . gN2e51) (expt . gN2e50) (exp . gN2e4f) (exact? . gN2e4e) (exact-integer-sqrt . gN2e4d) (exact . gN2e4c) (even? . gN2e4b) (error . gN2e4a) (eqv? . gN2e49) (equal? . gN2e48) (eq? . gN2e47) (dynamic-wind . gN2e46) (div0-and-mod0 . gN2e45) (mod0 . gN2e44) (div0 . gN2e43) (div-and-mod . gN2e42) (mod . gN2e41) (div . gN2e40) (denominator . gN2e3f) (cos . gN2e3e) (cons . gN2e3d) (complex? . gN2e3c) (char? . gN2e3b) (char>? . gN2e3a) (char>=? . gN2e39) (char=? . gN2e38) (char<? . gN2e37) (char<=? . gN2e36) (char->integer . gN2e35) (ceiling . gN2e34) (call-with-values . gN2e33) (call/cc . gN2e32) (call-with-current-continuation . gN2e31) (cddddr . gN2e30) (cdddar . gN2e2f) (cddadr . gN2e2e) (cddaar . gN2e2d) (cdaddr . gN2e2c) (cdadar . gN2e2b) (cdaadr . gN2e2a) (cdaaar . gN2e29) (cadddr . gN2e28) (caddar . gN2e27) (cadadr . gN2e26) (cadaar . gN2e25) (caaddr . gN2e24) (caadar . gN2e23) (caaadr . gN2e22) (caaaar . gN2e21) (cdddr . gN2e20) (cddar . gN2e1f) (cdadr . gN2e1e) (cdaar . gN2e1d) (caddr . gN2e1c) (cadar . gN2e1b) (caadr . gN2e1a) (caaar . gN2e19) (cddr . gN2e18) (cdar . gN2e17) (cadr . gN2e16) (caar . gN2e15) (cdr . gN2e14) (car . gN2e13) (boolean? . gN2e12) (boolean=? . gN2e11) (atan . gN2e10) (assertion-violation . gN2e0f) (asin . gN2e0e) (apply . gN2e0d) (append . gN2e0c) (angle . gN2e0b) (acos . gN2e0a) (abs . gN2e09) (/ . gN2e08) (* . gN2e07) (- . gN2e06) (+ . gN2e05) (>= . gN2e04) (> . gN2e03) (= . gN2e02) (<= . gN2e01) (< . gN2e00) (library . gN2dff) (&no-nans . gN2dfe) (&no-infinities . gN2dfd) (&i/o-encoding . gN2dfc) (&i/o-decoding . gN2dfb) (&i/o-port . gN2dfa) (&i/o-file-does-not-exist . gN2df9) (&i/o-file-already-exists . gN2df8) (&i/o-file-is-read-only . gN2df7) (&i/o-file-protection . gN2df6) (&i/o-filename . gN2df5) (&i/o-invalid-position . gN2df4) (&i/o-write . gN2df3) (&i/o-read . gN2df2) (&i/o . gN2df1) (&undefined . gN2df0) (&syntax . gN2def) (&lexical . gN2dee) (&implementation-restriction . gN2ded) (&non-continuable . gN2dec) (&who . gN2deb) (&irritants . gN2dea) (&assertion . gN2de9) (&violation . gN2de8) (&error . gN2de7) (&serious . gN2de6) (&warning . gN2de5) (&message . gN2de4) (&condition . gN2de3) (define-condition-type . gN2de2) (define-enumeration . gN2de1) (define-record-type . gN2de0) (parent-rtd . gN2ddf) (nongenerative . gN2dde) (opaque . gN2ddd) (sealed . gN2ddc) (protocol . gN2ddb) (parent . gN2dda) (immutable . gN2dd9) (mutable . gN2dd8) (fields . gN2dd7) (error-handling-mode . gN2dd6) (file-options . gN2dd5) (buffer-mode . gN2dd4) (eol-style . gN2dd3) (guard . gN2dd2) (unsyntax-splicing . gN2dcf) (unsyntax . gN2dce) (unquote-splicing . gN2dcd) (unquote . gN2dcc) (_ . gN2dcb) (else . gN2dca) (=> . gN2dc9) (... . gN2dc8) (assert . gN2dc7) (endianness . gN2dc6) (time . gN2dc4) (do . gN2dc3) (cond . gN2dc2) (let* . gN2dc1) (let . gN2dc0) (let*-values . gN2dbf) (let-values . gN2dbe) (identifier-syntax . gN2dbd) (with-syntax . gN2dbc) (quasisyntax . gN2dbb) (quasiquote . gN2dba) (syntax-rules . gN2db9) (include . gN2db8) (record-constructor-descriptor . gN2db6) (record-type-descriptor . gN2db5) (case . gN2db4) (unless . gN2db2) (when . gN2db1) (or . gN2db0) (and . gN2daf) (if . gN2dae) (letrec* . gN2dad) (letrec . gN2dac) (case-lambda . gN2daa) (lambda . gN2da9) (syntax . gN2da8) (syntax-case . gN2da7) (quote . gN2da6) (letrec-syntax . gN2da4) (let-syntax . gN2da3) (set! . gN2da2) (import . gN2da1) (begin . gN2da0) (define-syntax . gN2d9e) (define . gN2d9d)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30c5 '(psyntax null-environment-5) '() '() '() '() '((make-promise . gN2f7d) (unquote-splicing . gN2dcd) (unquote . gN2dcc) (_ . gN2dcb) (else . gN2dca) (=> . gN2dc9) (... . gN2dc8) (delay . gN2dc5) (do . gN2dc3) (cond . gN2dc2) (let* . gN2dc1) (let . gN2dc0) (quasiquote . gN2dba) (syntax-rules . gN2db9) (case . gN2db4) (or . gN2db0) (and . gN2daf) (if . gN2dae) (letrec . gN2dac) (lambda . gN2da9) (quote . gN2da6) (letrec-syntax . gN2da4) (let-syntax . gN2da3) (set! . gN2da2) (begin . gN2da0) (define-syntax . gN2d9e) (define . gN2d9d)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30c6 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . gN3012) (string-ci>=? . gN3011) (string-ci=? . gN3010) (string-ci<? . gN300f) (string-ci<=? . gN300e) (char-whitespace? . gN300d) (char-upper-case? . gN300c) (char-numeric? . gN300a) (char-lower-case? . gN3009) (char-upcase . gN3007) (char-downcase . gN3004) (char-ci>? . gN3003) (char-ci>=? . gN3002) (char-ci=? . gN3001) (char-ci<? . gN3000) (char-ci<=? . gN2fff) (char-alphabetic? . gN2ffe) (call-with-output-file . gN2fd2) (call-with-input-file . gN2fd1) (write-char . gN2fd0) (write . gN2fcf) (with-output-to-file . gN2fce) (with-input-from-file . gN2fcd) (read-char . gN2fcc) (read . gN2fcb) (peek-char . gN2fca) (open-output-file . gN2fc9) (open-input-file . gN2fc8) (newline . gN2fc7) (display . gN2fc6) (close-output-port . gN2fc5) (close-input-port . gN2fc4) (eof-object . gN2fc2) (current-output-port . gN2fc0) (current-input-port . gN2fbf) (output-port? . gN2fbe) (input-port? . gN2fbd) (scheme-report-environment . gNe1d) (quotient . gN2f83) (null-environment . gNe1b) (remainder . gN2f82) (modulo . gN2f81) (inexact->exact . gN2f80) (force . gN2f7f) (exact->inexact . gN2f7e) (make-promise . gN2f7d) (string-fill! . gN2f7b) (string-set! . gN2f7a) (set-cdr! . gN2f79) (set-car! . gN2f78) (memv . gN2f72) (memq . gN2f71) (member . gN2f6f) (assv . gN2f67) (assq . gN2f66) (assoc . gN2f64) (eval . gNe21) (zero? . gN2ea1) (vector? . gN2ea0) (vector-set! . gN2e9f) (vector-ref . gN2e9e) (vector-length . gN2e9c) (vector-fill! . gN2e9a) (vector->list . gN2e99) (vector . gN2e98) (values . gN2e97) (truncate . gN2e96) (tan . gN2e95) (symbol? . gN2e94) (symbol->string . gN2e92) (substring . gN2e91) (string? . gN2e90) (string>? . gN2e8f) (string>=? . gN2e8e) (string=? . gN2e8d) (string<? . gN2e8c) (string<=? . gN2e8b) (string-ref . gN2e8a) (string-length . gN2e89) (string-copy . gN2e87) (string-append . gN2e86) (string->symbol . gN2e85) (string->number . gN2e84) (string->list . gN2e83) (string . gN2e82) (sqrt . gN2e81) (sin . gN2e80) (round . gN2e7f) (reverse . gN2e7e) (real? . gN2e7d) (real-part . gN2e7b) (rationalize . gN2e7a) (rational? . gN2e79) (procedure? . gN2e77) (positive? . gN2e76) (pair? . gN2e75) (odd? . gN2e74) (numerator . gN2e73) (number? . gN2e72) (number->string . gN2e71) (not . gN2e6f) (negative? . gN2e6e) (min . gN2e6c) (max . gN2e6b) (map . gN2e6a) (make-vector . gN2e69) (make-string . gN2e68) (make-rectangular . gN2e67) (make-polar . gN2e66) (magnitude . gN2e65) (log . gN2e64) (list? . gN2e63) (list-tail . gN2e62) (list-ref . gN2e61) (list->vector . gN2e60) (list->string . gN2e5f) (list . gN2e5e) (length . gN2e5d) (lcm . gN2e5c) (integer? . gN2e5b) (integer->char . gN2e59) (inexact? . gN2e57) (imag-part . gN2e55) (gcd . gN2e54) (for-each . gN2e53) (floor . gN2e52) (expt . gN2e50) (exp . gN2e4f) (exact? . gN2e4e) (even? . gN2e4b) (eqv? . gN2e49) (equal? . gN2e48) (eq? . gN2e47) (dynamic-wind . gN2e46) (denominator . gN2e3f) (cos . gN2e3e) (cons . gN2e3d) (complex? . gN2e3c) (char? . gN2e3b) (char>? . gN2e3a) (char>=? . gN2e39) (char=? . gN2e38) (char<? . gN2e37) (char<=? . gN2e36) (char->integer . gN2e35) (ceiling . gN2e34) (call-with-values . gN2e33) (call-with-current-continuation . gN2e31) (cddddr . gN2e30) (cdddar . gN2e2f) (cddadr . gN2e2e) (cddaar . gN2e2d) (cdaddr . gN2e2c) (cdadar . gN2e2b) (cdaadr . gN2e2a) (cdaaar . gN2e29) (cadddr . gN2e28) (caddar . gN2e27) (cadadr . gN2e26) (cadaar . gN2e25) (caaddr . gN2e24) (caadar . gN2e23) (caaadr . gN2e22) (caaaar . gN2e21) (cdddr . gN2e20) (cddar . gN2e1f) (cdadr . gN2e1e) (cdaar . gN2e1d) (caddr . gN2e1c) (cadar . gN2e1b) (caadr . gN2e1a) (caaar . gN2e19) (cddr . gN2e18) (cdar . gN2e17) (cadr . gN2e16) (caar . gN2e15) (cdr . gN2e14) (car . gN2e13) (boolean? . gN2e12) (atan . gN2e10) (asin . gN2e0e) (apply . gN2e0d) (append . gN2e0c) (angle . gN2e0b) (acos . gN2e0a) (abs . gN2e09) (/ . gN2e08) (* . gN2e07) (- . gN2e06) (+ . gN2e05) (>= . gN2e04) (> . gN2e03) (= . gN2e02) (<= . gN2e01) (< . gN2e00) (unquote-splicing . gN2dcd) (unquote . gN2dcc) (else . gN2dca) (=> . gN2dc9) (... . gN2dc8) (delay . gN2dc5) (do . gN2dc3) (cond . gN2dc2) (let* . gN2dc1) (let . gN2dc0) (quasiquote . gN2dba) (syntax-rules . gN2db9) (case . gN2db4) (or . gN2db0) (and . gN2daf) (if . gN2dae) (letrec . gN2dac) (lambda . gN2da9) (quote . gN2da6) (letrec-syntax . gN2da4) (let-syntax . gN2da3) (set! . gN2da2) (begin . gN2da0) (define-syntax . gN2d9e) (define . gN2d9d)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30c7 '(psyntax modules) '() '() '() '() '((module . gN2d9f)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30c8 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30c9 '(rnrs) '(6) '() '() '() '((regexp? . gN30bc) (string-upcase . gN301a) (string-titlecase . gN3019) (string-normalize-nfkd . gN3018) (string-normalize-nfkc . gN3017) (string-normalize-nfd . gN3016) (string-normalize-nfc . gN3015) (string-foldcase . gN3014) (string-downcase . gN3013) (string-ci>? . gN3012) (string-ci>=? . gN3011) (string-ci=? . gN3010) (string-ci<? . gN300f) (string-ci<=? . gN300e) (char-whitespace? . gN300d) (char-upper-case? . gN300c) (char-title-case? . gN300b) (char-numeric? . gN300a) (char-lower-case? . gN3009) (char-general-category . gN3008) (char-upcase . gN3007) (char-titlecase . gN3006) (char-foldcase . gN3005) (char-downcase . gN3004) (char-ci>? . gN3003) (char-ci>=? . gN3002) (char-ci=? . gN3001) (char-ci<? . gN3000) (char-ci<=? . gN2fff) (char-alphabetic? . gN2ffe) (make-variable-transformer . gNb8e) (identifier? . gNe43) (generate-temporaries . gNe2f) (free-identifier=? . gNe31) (syntax->datum . gNe47) (datum->syntax . gNe45) (bound-identifier=? . gNe33) (record-type-descriptor? . gN2ffd) (record-predicate . gN2ffc) (record-mutator . gN2ffb) (record-constructor . gN2ffa) (record-accessor . gN2ff9) (make-record-type-descriptor . gN2ff8) (make-record-constructor-descriptor . gN2ff7) (record? . gN2ff6) (record-type-uid . gN2ff5) (record-type-sealed? . gN2ff4) (record-type-parent . gN2ff3) (record-type-opaque? . gN2ff2) (record-type-name . gN2ff1) (record-type-generative? . gN2ff0) (record-type-field-names . gN2fef) (record-rtd . gN2fee) (record-field-mutable? . gN2fed) (delete-file . gN2fec) (file-exists? . gN2feb) (vector-sort! . gN2fea) (vector-sort . gN2fe9) (list-sort . gN2fe8) (symbol-hash . gN2fe7) (string-ci-hash . gN2fe6) (string-hash . gN2fe5) (equal-hash . gN2fe4) (hashtable-equivalence-function . gN2fe3) (make-hashtable . gN2fe2) (hashtable-hash-function . gN2fe1) (make-eqv-hashtable . gN2fe0) (make-eq-hashtable . gN2fdf) (hashtable? . gN2fde) (hashtable-update! . gN2fdd) (hashtable-size . gN2fdc) (hashtable-set! . gN2fdb) (hashtable-ref . gN2fda) (hashtable-mutable? . gN2fd9) (hashtable-keys . gN2fd8) (hashtable-entries . gN2fd7) (hashtable-delete! . gN2fd6) (hashtable-copy . gN2fd5) (hashtable-contains? . gN2fd4) (hashtable-clear! . gN2fd3) (call-with-output-file . gN2fd2) (call-with-input-file . gN2fd1) (write-char . gN2fd0) (write . gN2fcf) (with-output-to-file . gN2fce) (with-input-from-file . gN2fcd) (read-char . gN2fcc) (read . gN2fcb) (peek-char . gN2fca) (open-output-file . gN2fc9) (open-input-file . gN2fc8) (newline . gN2fc7) (display . gN2fc6) (close-output-port . gN2fc5) (close-input-port . gN2fc4) (eof-object? . gN2fc3) (eof-object . gN2fc2) (current-error-port . gN2fc1) (current-output-port . gN2fc0) (current-input-port . gN2fbf) (output-port? . gN2fbe) (input-port? . gN2fbd) (utf-8-codec . gN2fbc) (utf-16-codec . gN2fbb) (transcoder-error-handling-mode . gN2fba) (transcoder-eol-style . gN2fb9) (transcoder-codec . gN2fb8) (transcoded-port . gN2fb7) (textual-port? . gN2fb6) (string->bytevector . gN2fb5) (standard-output-port . gN2fb4) (standard-input-port . gN2fb3) (standard-error-port . gN2fb2) (set-port-position! . gN2fb1) (put-u8 . gN2fb0) (put-string . gN2faf) (put-datum . gN2fae) (put-char . gN2fad) (put-bytevector . gN2fac) (port? . gN2fab) (port-transcoder . gN2faa) (port-position . gN2fa9) (port-has-set-port-position!? . gN2fa8) (port-has-port-position? . gN2fa7) (port-eof? . gN2fa6) (output-port-buffer-mode . gN2fa5) (open-string-output-port . gN2fa4) (open-string-input-port . gN2fa3) (open-file-output-port . gN2fa2) (open-file-input/output-port . gN2fa1) (open-file-input-port . gN2fa0) (open-bytevector-output-port . gN2f9f) (open-bytevector-input-port . gN2f9e) (native-transcoder . gN2f9d) (native-eol-style . gN2f9c) (make-transcoder . gN2f9b) (latin-1-codec . gN2f9a) (make-i/o-write-error . gN2a25) (make-i/o-read-error . gN2a10) (make-i/o-port-error . gN2ac6) (make-i/o-invalid-position-error . gN2a3c) (make-i/o-filename-error . gN2a57) (make-i/o-file-protection-error . gN2a70) (make-i/o-file-is-read-only-error . gN2a85) (make-i/o-file-does-not-exist-error . gN2aaf) (make-i/o-file-already-exists-error . gN2a9a) (make-i/o-error . gN29fb) (make-i/o-encoding-error . gN2af6) (make-i/o-decoding-error . gN2adf) (make-custom-textual-output-port . gN2f99) (make-custom-textual-input/output-port . gN2f98) (make-custom-textual-input-port . gN2f97) (make-custom-binary-output-port . gN2f96) (make-custom-binary-input/output-port . gN2f95) (make-custom-binary-input-port . gN2f94) (make-bytevector . gN2f93) (lookahead-u8 . gN2f92) (lookahead-char . gN2f91) (i/o-write-error? . gN2a27) (i/o-read-error? . gN2a12) (i/o-port-error? . gN2aca) (i/o-invalid-position-error? . gN2a40) (i/o-filename-error? . gN2a5b) (i/o-file-protection-error? . gN2a72) (i/o-file-is-read-only-error? . gN2a87) (i/o-file-does-not-exist-error? . gN2ab1) (i/o-file-already-exists-error? . gN2a9c) (i/o-error? . gN29fd) (i/o-error-position . gN2a42) (i/o-error-port . gN2acc) (i/o-error-filename . gN2a5d) (i/o-encoding-error? . gN2afa) (i/o-encoding-error-char . gN2afc) (i/o-decoding-error? . gN2ae1) (get-u8 . gN2f90) (get-string-n! . gN2f8f) (get-string-n . gN2f8e) (get-string-all . gN2f8d) (get-line . gN2f8c) (get-datum . gN2f8b) (get-char . gN2f8a) (get-bytevector-some . gN2f89) (get-bytevector-n! . gN2f88) (get-bytevector-n . gN2f87) (get-bytevector-all . gN2f86) (flush-output-port . gN2f85) (close-port . gN2f84) (exit . gN2f7c) (command-line . gN2c35) (remove . gN2f77) (remv . gN2f76) (remp . gN2f75) (remq . gN2f74) (partition . gN2f73) (memv . gN2f72) (memq . gN2f71) (memp . gN2f70) (member . gN2f6f) (exists . gN2f6e) (for-all . gN2f6d) (fold-right . gN2f6c) (fold-left . gN2f6b) (find . gN2f6a) (filter . gN2f69) (cons* . gN2f68) (assv . gN2f67) (assq . gN2f66) (assp . gN2f65) (assoc . gN2f64) (call-with-string-output-port . gN2f63) (call-with-port . gN2f62) (call-with-bytevector-output-port . gN2f61) (bytevector->string . gN2f60) (buffer-mode? . gN2f5f) (binary-port? . gN2f5e) (with-exception-handler . gN2f5d) (raise-continuable . gN2f5c) (raise . gN2f5b) (make-enumeration . gN2f5a) (enum-set=? . gN2f59) (enum-set-universe . gN2f58) (enum-set-union . gN2f57) (enum-set-subset? . gN2f56) (enum-set-projection . gN2f55) (enum-set-member? . gN2f54) (enum-set-intersection . gN2f53) (enum-set-indexer . gN2f52) (enum-set-difference . gN2f51) (enum-set-constructor . gN2f50) (enum-set-complement . gN2f4f) (enum-set->list . gN2f4e) (who-condition? . gN2971) (warning? . gN28e9) (violation? . gN2928) (undefined-violation? . gN29e8) (syntax-violation? . gN29cf) (syntax-violation-subform . gN29d3) (syntax-violation-form . gN29d1) (syntax-violation . gNe41) (simple-conditions . gN2f4d) (serious-condition? . gN28fe) (non-continuable-violation? . gN2988) (message-condition? . gN28d2) (make-who-condition . gN296d) (make-warning . gN28e7) (make-violation . gN2926) (make-undefined-violation . gN29e6) (make-syntax-violation . gN29c9) (make-serious-condition . gN28fc) (make-non-continuable-violation . gN2986) (make-message-condition . gN28ce) (make-lexical-violation . gN29b0) (make-irritants-condition . gN2952) (make-implementation-restriction-violation . gN299b) (make-error . gN2911) (make-assertion-violation . gN293b) (lexical-violation? . gN29b2) (irritants-condition? . gN2956) (implementation-restriction-violation? . gN299d) (error? . gN2913) (condition-who . gN2973) (condition-predicate . gN2f4c) (condition-message . gN28d4) (condition-irritants . gN2958) (condition-accessor . gN2f4b) (condition . gN2f4a) (assertion-violation? . gN293d) (condition? . gN2f49) (utf32->string . gN2f48) (utf16->string . gN2f47) (utf8->string . gN2f46) (uint-list->bytevector . gN2f45) (u8-list->bytevector . gN2f44) (string->utf8 . gN2f43) (string->utf32 . gN2f42) (string->utf16 . gN2f41) (sint-list->bytevector . gN2f40) (native-endianness . gN2f3f) (bytevector? . gN2f3e) (bytevector=? . gN2f3d) (bytevector-uint-set! . gN2f3c) (bytevector-uint-ref . gN2f3b) (bytevector-u8-set! . gN2f3a) (bytevector-u8-ref . gN2f39) (bytevector-u64-set! . gN2f38) (bytevector-u64-ref . gN2f37) (bytevector-u64-native-set! . gN2f36) (bytevector-u64-native-ref . gN2f35) (bytevector-u32-set! . gN2f34) (bytevector-u32-ref . gN2f33) (bytevector-u32-native-set! . gN2f32) (bytevector-u32-native-ref . gN2f31) (bytevector-u16-set! . gN2f30) (bytevector-u16-ref . gN2f2f) (bytevector-u16-native-set! . gN2f2e) (bytevector-u16-native-ref . gN2f2d) (bytevector-sint-set! . gN2f2c) (bytevector-sint-ref . gN2f2b) (bytevector-s8-set! . gN2f2a) (bytevector-s8-ref . gN2f29) (bytevector-s64-set! . gN2f28) (bytevector-s64-ref . gN2f27) (bytevector-s64-native-set! . gN2f26) (bytevector-s64-native-ref . gN2f25) (bytevector-s32-set! . gN2f24) (bytevector-s32-ref . gN2f23) (bytevector-s32-native-set! . gN2f22) (bytevector-s32-native-ref . gN2f21) (bytevector-s16-set! . gN2f20) (bytevector-s16-ref . gN2f1f) (bytevector-s16-native-set! . gN2f1e) (bytevector-s16-native-ref . gN2f1d) (bytevector-length . gN2f1c) (bytevector-ieee-single-ref . gN2f1b) (bytevector-ieee-single-set! . gN2f1a) (bytevector-ieee-single-native-set! . gN2f19) (bytevector-ieee-single-native-ref . gN2f18) (bytevector-ieee-double-set! . gN2f17) (bytevector-ieee-double-ref . gN2f16) (bytevector-ieee-double-native-set! . gN2f15) (bytevector-ieee-double-native-ref . gN2f14) (bytevector-fill! . gN2f13) (bytevector-copy! . gN2f12) (bytevector-copy . gN2f11) (bytevector->uint-list . gN2f10) (bytevector->u8-list . gN2f0f) (bytevector->sint-list . gN2f0e) (no-nans-violation? . gN2b26) (no-infinities-violation? . gN2b11) (make-no-nans-violation . gN2b24) (make-no-infinities-violation . gN2b0f) (real->flonum . gN2f0d) (flzero? . gN2f0c) (fltruncate . gN2f0b) (fltan . gN2f0a) (flsqrt . gN2f09) (flsin . gN2f08) (flround . gN2f07) (flpositive? . gN2f06) (flonum? . gN2f05) (flodd? . gN2f04) (flnumerator . gN2f03) (flnegative? . gN2f02) (flnan? . gN2f01) (flmod0 . gN2f00) (flmod . gN2eff) (flmin . gN2efe) (flmax . gN2efd) (fllog . gN2efc) (flinteger? . gN2efb) (flinfinite? . gN2efa) (flfloor . gN2ef9) (flfinite? . gN2ef8) (flexpt . gN2ef7) (flexp . gN2ef6) (fleven? . gN2ef5) (fldiv0-and-mod0 . gN2ef4) (fldiv0 . gN2ef3) (fldiv-and-mod . gN2ef2) (fldiv . gN2ef1) (fldenominator . gN2ef0) (flcos . gN2eef) (flceiling . gN2eee) (flatan . gN2eed) (flasin . gN2eec) (flacos . gN2eeb) (flabs . gN2eea) (fl>? . gN2ee9) (fl>=? . gN2ee8) (fl=? . gN2ee7) (fl<? . gN2ee6) (fl<=? . gN2ee5) (fl/ . gN2ee4) (fl- . gN2ee3) (fl+ . gN2ee2) (fl* . gN2ee1) (fixnum->flonum . gN2ee0) (fxzero? . gN2edf) (fxxor . gN2ede) (fxrotate-bit-field . gN2edd) (fxreverse-bit-field . gN2edc) (fxpositive? . gN2edb) (fxodd? . gN2eda) (fxnot . gN2ed9) (fxnegative? . gN2ed8) (fxmod0 . gN2ed7) (fxmod . gN2ed6) (fxmin . gN2ed5) (fxmax . gN2ed4) (fxlength . gN2ed3) (fxior . gN2ed2) (fxif . gN2ed1) (fxfirst-bit-set . gN2ed0) (fxeven? . gN2ecf) (fxdiv0-and-mod0 . gN2ece) (fxdiv0 . gN2ecd) (fxdiv-and-mod . gN2ecc) (fxdiv . gN2ecb) (fxcopy-bit-field . gN2eca) (fxcopy-bit . gN2ec9) (fxbit-set? . gN2ec8) (fxbit-field . gN2ec7) (fxbit-count . gN2ec6) (fxarithmetic-shift-right . gN2ec5) (fxarithmetic-shift-left . gN2ec4) (fxarithmetic-shift . gN2ec3) (fxand . gN2ec2) (fx>? . gN2ec1) (fx>=? . gN2ec0) (fx=? . gN2ebf) (fx<? . gN2ebe) (fx<=? . gN2ebd) (fx-/carry . gN2ebc) (fx- . gN2ebb) (fx+/carry . gN2eba) (fx+ . gN2eb9) (fx*/carry . gN2eb8) (fx* . gN2eb7) (greatest-fixnum . gN2eb6) (least-fixnum . gN2eb5) (fixnum-width . gN2eb4) (fixnum? . gN2eb3) (bitwise-rotate-bit-field . gN2eb2) (bitwise-reverse-bit-field . gN2eb1) (bitwise-length . gN2eb0) (bitwise-if . gN2eaf) (bitwise-first-bit-set . gN2eae) (bitwise-copy-bit-field . gN2ead) (bitwise-copy-bit . gN2eac) (bitwise-bit-set? . gN2eab) (bitwise-bit-field . gN2eaa) (bitwise-bit-count . gN2ea9) (bitwise-xor . gN2ea8) (bitwise-ior . gN2ea7) (bitwise-and . gN2ea6) (bitwise-not . gN2ea5) (bitwise-arithmetic-shift-right . gN2ea4) (bitwise-arithmetic-shift-left . gN2ea3) (bitwise-arithmetic-shift . gN2ea2) (zero? . gN2ea1) (vector? . gN2ea0) (vector-set! . gN2e9f) (vector-ref . gN2e9e) (vector-map . gN2e9d) (vector-length . gN2e9c) (vector-for-each . gN2e9b) (vector-fill! . gN2e9a) (vector->list . gN2e99) (vector . gN2e98) (values . gN2e97) (truncate . gN2e96) (tan . gN2e95) (symbol? . gN2e94) (symbol=? . gN2e93) (symbol->string . gN2e92) (substring . gN2e91) (string? . gN2e90) (string>? . gN2e8f) (string>=? . gN2e8e) (string=? . gN2e8d) (string<? . gN2e8c) (string<=? . gN2e8b) (string-ref . gN2e8a) (string-length . gN2e89) (string-for-each . gN2e88) (string-copy . gN2e87) (string-append . gN2e86) (string->symbol . gN2e85) (string->number . gN2e84) (string->list . gN2e83) (string . gN2e82) (sqrt . gN2e81) (sin . gN2e80) (round . gN2e7f) (reverse . gN2e7e) (real? . gN2e7d) (real-valued? . gN2e7c) (real-part . gN2e7b) (rationalize . gN2e7a) (rational? . gN2e79) (rational-valued? . gN2e78) (procedure? . gN2e77) (positive? . gN2e76) (pair? . gN2e75) (odd? . gN2e74) (numerator . gN2e73) (number? . gN2e72) (number->string . gN2e71) (null? . gN2e70) (not . gN2e6f) (negative? . gN2e6e) (nan? . gN2e6d) (min . gN2e6c) (max . gN2e6b) (map . gN2e6a) (make-vector . gN2e69) (make-string . gN2e68) (make-rectangular . gN2e67) (make-polar . gN2e66) (magnitude . gN2e65) (log . gN2e64) (list? . gN2e63) (list-tail . gN2e62) (list-ref . gN2e61) (list->vector . gN2e60) (list->string . gN2e5f) (list . gN2e5e) (length . gN2e5d) (lcm . gN2e5c) (integer? . gN2e5b) (integer-valued? . gN2e5a) (integer->char . gN2e59) (infinite? . gN2e58) (inexact? . gN2e57) (inexact . gN2e56) (imag-part . gN2e55) (gcd . gN2e54) (for-each . gN2e53) (floor . gN2e52) (finite? . gN2e51) (expt . gN2e50) (exp . gN2e4f) (exact? . gN2e4e) (exact-integer-sqrt . gN2e4d) (exact . gN2e4c) (even? . gN2e4b) (error . gN2e4a) (eqv? . gN2e49) (equal? . gN2e48) (eq? . gN2e47) (dynamic-wind . gN2e46) (div0-and-mod0 . gN2e45) (mod0 . gN2e44) (div0 . gN2e43) (div-and-mod . gN2e42) (mod . gN2e41) (div . gN2e40) (denominator . gN2e3f) (cos . gN2e3e) (cons . gN2e3d) (complex? . gN2e3c) (char? . gN2e3b) (char>? . gN2e3a) (char>=? . gN2e39) (char=? . gN2e38) (char<? . gN2e37) (char<=? . gN2e36) (char->integer . gN2e35) (ceiling . gN2e34) (call-with-values . gN2e33) (call/cc . gN2e32) (call-with-current-continuation . gN2e31) (cddddr . gN2e30) (cdddar . gN2e2f) (cddadr . gN2e2e) (cddaar . gN2e2d) (cdaddr . gN2e2c) (cdadar . gN2e2b) (cdaadr . gN2e2a) (cdaaar . gN2e29) (cadddr . gN2e28) (caddar . gN2e27) (cadadr . gN2e26) (cadaar . gN2e25) (caaddr . gN2e24) (caadar . gN2e23) (caaadr . gN2e22) (caaaar . gN2e21) (cdddr . gN2e20) (cddar . gN2e1f) (cdadr . gN2e1e) (cdaar . gN2e1d) (caddr . gN2e1c) (cadar . gN2e1b) (caadr . gN2e1a) (caaar . gN2e19) (cddr . gN2e18) (cdar . gN2e17) (cadr . gN2e16) (caar . gN2e15) (cdr . gN2e14) (car . gN2e13) (boolean? . gN2e12) (boolean=? . gN2e11) (atan . gN2e10) (assertion-violation . gN2e0f) (asin . gN2e0e) (apply . gN2e0d) (append . gN2e0c) (angle . gN2e0b) (acos . gN2e0a) (abs . gN2e09) (/ . gN2e08) (* . gN2e07) (- . gN2e06) (+ . gN2e05) (>= . gN2e04) (> . gN2e03) (= . gN2e02) (<= . gN2e01) (< . gN2e00) (&no-nans . gN2dfe) (&no-infinities . gN2dfd) (&i/o-encoding . gN2dfc) (&i/o-decoding . gN2dfb) (&i/o-port . gN2dfa) (&i/o-file-does-not-exist . gN2df9) (&i/o-file-already-exists . gN2df8) (&i/o-file-is-read-only . gN2df7) (&i/o-file-protection . gN2df6) (&i/o-filename . gN2df5) (&i/o-invalid-position . gN2df4) (&i/o-write . gN2df3) (&i/o-read . gN2df2) (&i/o . gN2df1) (&undefined . gN2df0) (&syntax . gN2def) (&lexical . gN2dee) (&implementation-restriction . gN2ded) (&non-continuable . gN2dec) (&who . gN2deb) (&irritants . gN2dea) (&assertion . gN2de9) (&violation . gN2de8) (&error . gN2de7) (&serious . gN2de6) (&warning . gN2de5) (&message . gN2de4) (&condition . gN2de3) (define-condition-type . gN2de2) (define-enumeration . gN2de1) (define-record-type . gN2de0) (parent-rtd . gN2ddf) (nongenerative . gN2dde) (opaque . gN2ddd) (sealed . gN2ddc) (protocol . gN2ddb) (parent . gN2dda) (immutable . gN2dd9) (mutable . gN2dd8) (fields . gN2dd7) (error-handling-mode . gN2dd6) (file-options . gN2dd5) (buffer-mode . gN2dd4) (eol-style . gN2dd3) (guard . gN2dd2) (unsyntax-splicing . gN2dcf) (unsyntax . gN2dce) (unquote-splicing . gN2dcd) (unquote . gN2dcc) (_ . gN2dcb) (else . gN2dca) (=> . gN2dc9) (... . gN2dc8) (assert . gN2dc7) (endianness . gN2dc6) (do . gN2dc3) (cond . gN2dc2) (let* . gN2dc1) (let . gN2dc0) (let*-values . gN2dbf) (let-values . gN2dbe) (identifier-syntax . gN2dbd) (with-syntax . gN2dbc) (quasisyntax . gN2dbb) (quasiquote . gN2dba) (syntax-rules . gN2db9) (record-constructor-descriptor . gN2db6) (record-type-descriptor . gN2db5) (case . gN2db4) (unless . gN2db2) (when . gN2db1) (or . gN2db0) (and . gN2daf) (if . gN2dae) (letrec* . gN2dad) (letrec . gN2dac) (case-lambda . gN2daa) (lambda . gN2da9) (syntax . gN2da8) (syntax-case . gN2da7) (quote . gN2da6) (letrec-syntax . gN2da4) (let-syntax . gN2da3) (set! . gN2da2) (begin . gN2da0) (define-syntax . gN2d9e) (define . gN2d9d)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30ca '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . gNe1d) (quotient . gN2f83) (null-environment . gNe1b) (remainder . gN2f82) (modulo . gN2f81) (inexact->exact . gN2f80) (force . gN2f7f) (exact->inexact . gN2f7e) (make-promise . gN2f7d) (delay . gN2dc5)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30cb '(rnrs control) '(6) '() '() '() '((do . gN2dc3) (unless . gN2db2) (when . gN2db1) (case-lambda . gN2daa)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30cc '(rnrs eval) '(6) '() '() '() '((eval . gNe21) (environment . gNe19)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30cd '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . gN2f79) (set-car! . gN2f78)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30ce '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . gN2f7b) (string-set! . gN2f7a)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30cf '(rnrs programs) '(6) '() '() '() '((exit . gN2f7c) (command-line . gN2c35)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . gNb8e) (identifier? . gNe43) (generate-temporaries . gNe2f) (free-identifier=? . gNe31) (syntax->datum . gNe47) (datum->syntax . gNe45) (bound-identifier=? . gNe33) (syntax-violation . gNe41) (unsyntax-splicing . gN2dcf) (unsyntax . gN2dce) (_ . gN2dcb) (... . gN2dc8) (with-syntax . gN2dbc) (quasisyntax . gN2dbb) (syntax . gN2da8) (syntax-case . gN2da7)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d1 '(rnrs files) '(6) '() '() '() '((delete-file . gN2fec) (file-exists? . gN2feb) (make-i/o-write-error . gN2a25) (make-i/o-read-error . gN2a10) (make-i/o-port-error . gN2ac6) (make-i/o-invalid-position-error . gN2a3c) (make-i/o-filename-error . gN2a57) (make-i/o-file-protection-error . gN2a70) (make-i/o-file-is-read-only-error . gN2a85) (make-i/o-file-does-not-exist-error . gN2aaf) (make-i/o-file-already-exists-error . gN2a9a) (make-i/o-error . gN29fb) (i/o-write-error? . gN2a27) (i/o-read-error? . gN2a12) (i/o-port-error? . gN2aca) (i/o-invalid-position-error? . gN2a40) (i/o-filename-error? . gN2a5b) (i/o-file-protection-error? . gN2a72) (i/o-file-is-read-only-error? . gN2a87) (i/o-file-does-not-exist-error? . gN2ab1) (i/o-file-already-exists-error? . gN2a9c) (i/o-error? . gN29fd) (i/o-error-position . gN2a42) (i/o-error-port . gN2acc) (i/o-error-filename . gN2a5d) (&i/o-port . gN2dfa) (&i/o-file-does-not-exist . gN2df9) (&i/o-file-already-exists . gN2df8) (&i/o-file-is-read-only . gN2df7) (&i/o-file-protection . gN2df6) (&i/o-filename . gN2df5) (&i/o-invalid-position . gN2df4) (&i/o-write . gN2df3) (&i/o-read . gN2df2) (&i/o . gN2df1)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . gN2fea) (vector-sort . gN2fe9) (list-sort . gN2fe8)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d3 '(rnrs base) '(6) '() '() '() '((zero? . gN2ea1) (vector? . gN2ea0) (vector-set! . gN2e9f) (vector-ref . gN2e9e) (vector-map . gN2e9d) (vector-length . gN2e9c) (vector-for-each . gN2e9b) (vector-fill! . gN2e9a) (vector->list . gN2e99) (vector . gN2e98) (values . gN2e97) (truncate . gN2e96) (tan . gN2e95) (symbol? . gN2e94) (symbol=? . gN2e93) (symbol->string . gN2e92) (substring . gN2e91) (string? . gN2e90) (string>? . gN2e8f) (string>=? . gN2e8e) (string=? . gN2e8d) (string<? . gN2e8c) (string<=? . gN2e8b) (string-ref . gN2e8a) (string-length . gN2e89) (string-for-each . gN2e88) (string-copy . gN2e87) (string-append . gN2e86) (string->symbol . gN2e85) (string->number . gN2e84) (string->list . gN2e83) (string . gN2e82) (sqrt . gN2e81) (sin . gN2e80) (round . gN2e7f) (reverse . gN2e7e) (real? . gN2e7d) (real-valued? . gN2e7c) (real-part . gN2e7b) (rationalize . gN2e7a) (rational? . gN2e79) (rational-valued? . gN2e78) (procedure? . gN2e77) (positive? . gN2e76) (pair? . gN2e75) (odd? . gN2e74) (numerator . gN2e73) (number? . gN2e72) (number->string . gN2e71) (null? . gN2e70) (not . gN2e6f) (negative? . gN2e6e) (nan? . gN2e6d) (min . gN2e6c) (max . gN2e6b) (map . gN2e6a) (make-vector . gN2e69) (make-string . gN2e68) (make-rectangular . gN2e67) (make-polar . gN2e66) (magnitude . gN2e65) (log . gN2e64) (list? . gN2e63) (list-tail . gN2e62) (list-ref . gN2e61) (list->vector . gN2e60) (list->string . gN2e5f) (list . gN2e5e) (length . gN2e5d) (lcm . gN2e5c) (integer? . gN2e5b) (integer-valued? . gN2e5a) (integer->char . gN2e59) (infinite? . gN2e58) (inexact? . gN2e57) (inexact . gN2e56) (imag-part . gN2e55) (gcd . gN2e54) (for-each . gN2e53) (floor . gN2e52) (finite? . gN2e51) (expt . gN2e50) (exp . gN2e4f) (exact? . gN2e4e) (exact-integer-sqrt . gN2e4d) (exact . gN2e4c) (even? . gN2e4b) (error . gN2e4a) (eqv? . gN2e49) (equal? . gN2e48) (eq? . gN2e47) (dynamic-wind . gN2e46) (div0-and-mod0 . gN2e45) (mod0 . gN2e44) (div0 . gN2e43) (div-and-mod . gN2e42) (mod . gN2e41) (div . gN2e40) (denominator . gN2e3f) (cos . gN2e3e) (cons . gN2e3d) (complex? . gN2e3c) (char? . gN2e3b) (char>? . gN2e3a) (char>=? . gN2e39) (char=? . gN2e38) (char<? . gN2e37) (char<=? . gN2e36) (char->integer . gN2e35) (ceiling . gN2e34) (call-with-values . gN2e33) (call/cc . gN2e32) (call-with-current-continuation . gN2e31) (cddddr . gN2e30) (cdddar . gN2e2f) (cddadr . gN2e2e) (cddaar . gN2e2d) (cdaddr . gN2e2c) (cdadar . gN2e2b) (cdaadr . gN2e2a) (cdaaar . gN2e29) (cadddr . gN2e28) (caddar . gN2e27) (cadadr . gN2e26) (cadaar . gN2e25) (caaddr . gN2e24) (caadar . gN2e23) (caaadr . gN2e22) (caaaar . gN2e21) (cdddr . gN2e20) (cddar . gN2e1f) (cdadr . gN2e1e) (cdaar . gN2e1d) (caddr . gN2e1c) (cadar . gN2e1b) (caadr . gN2e1a) (caaar . gN2e19) (cddr . gN2e18) (cdar . gN2e17) (cadr . gN2e16) (caar . gN2e15) (cdr . gN2e14) (car . gN2e13) (boolean? . gN2e12) (boolean=? . gN2e11) (atan . gN2e10) (assertion-violation . gN2e0f) (asin . gN2e0e) (apply . gN2e0d) (append . gN2e0c) (angle . gN2e0b) (acos . gN2e0a) (abs . gN2e09) (/ . gN2e08) (* . gN2e07) (- . gN2e06) (+ . gN2e05) (>= . gN2e04) (> . gN2e03) (= . gN2e02) (<= . gN2e01) (< . gN2e00) (unquote-splicing . gN2dcd) (unquote . gN2dcc) (_ . gN2dcb) (else . gN2dca) (=> . gN2dc9) (... . gN2dc8) (assert . gN2dc7) (cond . gN2dc2) (let* . gN2dc1) (let . gN2dc0) (let*-values . gN2dbf) (let-values . gN2dbe) (identifier-syntax . gN2dbd) (quasiquote . gN2dba) (syntax-rules . gN2db9) (case . gN2db4) (or . gN2db0) (and . gN2daf) (if . gN2dae) (letrec* . gN2dad) (letrec . gN2dac) (lambda . gN2da9) (quote . gN2da6) (letrec-syntax . gN2da4) (let-syntax . gN2da3) (set! . gN2da2) (begin . gN2da0) (define-syntax . gN2d9e) (define . gN2d9d)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d4 '(rnrs lists) '(6) '() '() '() '((remove . gN2f77) (remv . gN2f76) (remp . gN2f75) (remq . gN2f74) (partition . gN2f73) (memv . gN2f72) (memq . gN2f71) (memp . gN2f70) (member . gN2f6f) (exists . gN2f6e) (for-all . gN2f6d) (fold-right . gN2f6c) (fold-left . gN2f6b) (find . gN2f6a) (filter . gN2f69) (cons* . gN2f68) (assv . gN2f67) (assq . gN2f66) (assp . gN2f65) (assoc . gN2f64)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . gN2fd2) (call-with-input-file . gN2fd1) (write-char . gN2fd0) (write . gN2fcf) (with-output-to-file . gN2fce) (with-input-from-file . gN2fcd) (read-char . gN2fcc) (read . gN2fcb) (peek-char . gN2fca) (open-output-file . gN2fc9) (open-input-file . gN2fc8) (newline . gN2fc7) (display . gN2fc6) (close-output-port . gN2fc5) (close-input-port . gN2fc4) (eof-object? . gN2fc3) (eof-object . gN2fc2) (current-error-port . gN2fc1) (current-output-port . gN2fc0) (current-input-port . gN2fbf) (output-port? . gN2fbe) (input-port? . gN2fbd) (make-i/o-write-error . gN2a25) (make-i/o-read-error . gN2a10) (make-i/o-port-error . gN2ac6) (make-i/o-invalid-position-error . gN2a3c) (make-i/o-filename-error . gN2a57) (make-i/o-file-protection-error . gN2a70) (make-i/o-file-is-read-only-error . gN2a85) (make-i/o-file-does-not-exist-error . gN2aaf) (make-i/o-file-already-exists-error . gN2a9a) (make-i/o-error . gN29fb) (i/o-write-error? . gN2a27) (i/o-read-error? . gN2a12) (i/o-port-error? . gN2aca) (i/o-invalid-position-error? . gN2a40) (i/o-filename-error? . gN2a5b) (i/o-file-protection-error? . gN2a72) (i/o-file-is-read-only-error? . gN2a87) (i/o-file-does-not-exist-error? . gN2ab1) (i/o-file-already-exists-error? . gN2a9c) (i/o-error? . gN29fd) (i/o-error-position . gN2a42) (i/o-error-port . gN2acc) (i/o-error-filename . gN2a5d) (&i/o-port . gN2dfa) (&i/o-file-does-not-exist . gN2df9) (&i/o-file-already-exists . gN2df8) (&i/o-file-is-read-only . gN2df7) (&i/o-file-protection . gN2df6) (&i/o-filename . gN2df5) (&i/o-invalid-position . gN2df4) (&i/o-write . gN2df3) (&i/o-read . gN2df2) (&i/o . gN2df1)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . gN2f93) (utf32->string . gN2f48) (utf16->string . gN2f47) (utf8->string . gN2f46) (uint-list->bytevector . gN2f45) (u8-list->bytevector . gN2f44) (string->utf8 . gN2f43) (string->utf32 . gN2f42) (string->utf16 . gN2f41) (sint-list->bytevector . gN2f40) (native-endianness . gN2f3f) (bytevector? . gN2f3e) (bytevector=? . gN2f3d) (bytevector-uint-set! . gN2f3c) (bytevector-uint-ref . gN2f3b) (bytevector-u8-set! . gN2f3a) (bytevector-u8-ref . gN2f39) (bytevector-u64-set! . gN2f38) (bytevector-u64-ref . gN2f37) (bytevector-u64-native-set! . gN2f36) (bytevector-u64-native-ref . gN2f35) (bytevector-u32-set! . gN2f34) (bytevector-u32-ref . gN2f33) (bytevector-u32-native-set! . gN2f32) (bytevector-u32-native-ref . gN2f31) (bytevector-u16-set! . gN2f30) (bytevector-u16-ref . gN2f2f) (bytevector-u16-native-set! . gN2f2e) (bytevector-u16-native-ref . gN2f2d) (bytevector-sint-set! . gN2f2c) (bytevector-sint-ref . gN2f2b) (bytevector-s8-set! . gN2f2a) (bytevector-s8-ref . gN2f29) (bytevector-s64-set! . gN2f28) (bytevector-s64-ref . gN2f27) (bytevector-s64-native-set! . gN2f26) (bytevector-s64-native-ref . gN2f25) (bytevector-s32-set! . gN2f24) (bytevector-s32-ref . gN2f23) (bytevector-s32-native-set! . gN2f22) (bytevector-s32-native-ref . gN2f21) (bytevector-s16-set! . gN2f20) (bytevector-s16-ref . gN2f1f) (bytevector-s16-native-set! . gN2f1e) (bytevector-s16-native-ref . gN2f1d) (bytevector-length . gN2f1c) (bytevector-ieee-single-ref . gN2f1b) (bytevector-ieee-single-set! . gN2f1a) (bytevector-ieee-single-native-set! . gN2f19) (bytevector-ieee-single-native-ref . gN2f18) (bytevector-ieee-double-set! . gN2f17) (bytevector-ieee-double-ref . gN2f16) (bytevector-ieee-double-native-set! . gN2f15) (bytevector-ieee-double-native-ref . gN2f14) (bytevector-fill! . gN2f13) (bytevector-copy! . gN2f12) (bytevector-copy . gN2f11) (bytevector->uint-list . gN2f10) (bytevector->u8-list . gN2f0f) (bytevector->sint-list . gN2f0e) (endianness . gN2dc6)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . gN301a) (string-titlecase . gN3019) (string-normalize-nfkd . gN3018) (string-normalize-nfkc . gN3017) (string-normalize-nfd . gN3016) (string-normalize-nfc . gN3015) (string-foldcase . gN3014) (string-downcase . gN3013) (string-ci>? . gN3012) (string-ci>=? . gN3011) (string-ci=? . gN3010) (string-ci<? . gN300f) (string-ci<=? . gN300e) (char-whitespace? . gN300d) (char-upper-case? . gN300c) (char-title-case? . gN300b) (char-numeric? . gN300a) (char-lower-case? . gN3009) (char-general-category . gN3008) (char-upcase . gN3007) (char-titlecase . gN3006) (char-foldcase . gN3005) (char-downcase . gN3004) (char-ci>? . gN3003) (char-ci>=? . gN3002) (char-ci=? . gN3001) (char-ci<? . gN3000) (char-ci<=? . gN2fff) (char-alphabetic? . gN2ffe)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . gN2f5d) (raise-continuable . gN2f5c) (raise . gN2f5b) (guard . gN2dd2) (else . gN2dca) (=> . gN2dc9)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30d9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . gN2eb2) (bitwise-reverse-bit-field . gN2eb1) (bitwise-length . gN2eb0) (bitwise-if . gN2eaf) (bitwise-first-bit-set . gN2eae) (bitwise-copy-bit-field . gN2ead) (bitwise-copy-bit . gN2eac) (bitwise-bit-set? . gN2eab) (bitwise-bit-field . gN2eaa) (bitwise-bit-count . gN2ea9) (bitwise-xor . gN2ea8) (bitwise-ior . gN2ea7) (bitwise-and . gN2ea6) (bitwise-not . gN2ea5) (bitwise-arithmetic-shift-right . gN2ea4) (bitwise-arithmetic-shift-left . gN2ea3) (bitwise-arithmetic-shift . gN2ea2)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30da '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . gN2edf) (fxxor . gN2ede) (fxrotate-bit-field . gN2edd) (fxreverse-bit-field . gN2edc) (fxpositive? . gN2edb) (fxodd? . gN2eda) (fxnot . gN2ed9) (fxnegative? . gN2ed8) (fxmod0 . gN2ed7) (fxmod . gN2ed6) (fxmin . gN2ed5) (fxmax . gN2ed4) (fxlength . gN2ed3) (fxior . gN2ed2) (fxif . gN2ed1) (fxfirst-bit-set . gN2ed0) (fxeven? . gN2ecf) (fxdiv0-and-mod0 . gN2ece) (fxdiv0 . gN2ecd) (fxdiv-and-mod . gN2ecc) (fxdiv . gN2ecb) (fxcopy-bit-field . gN2eca) (fxcopy-bit . gN2ec9) (fxbit-set? . gN2ec8) (fxbit-field . gN2ec7) (fxbit-count . gN2ec6) (fxarithmetic-shift-right . gN2ec5) (fxarithmetic-shift-left . gN2ec4) (fxarithmetic-shift . gN2ec3) (fxand . gN2ec2) (fx>? . gN2ec1) (fx>=? . gN2ec0) (fx=? . gN2ebf) (fx<? . gN2ebe) (fx<=? . gN2ebd) (fx-/carry . gN2ebc) (fx- . gN2ebb) (fx+/carry . gN2eba) (fx+ . gN2eb9) (fx*/carry . gN2eb8) (fx* . gN2eb7) (greatest-fixnum . gN2eb6) (least-fixnum . gN2eb5) (fixnum-width . gN2eb4) (fixnum? . gN2eb3)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30db '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . gN2b26) (no-infinities-violation? . gN2b11) (make-no-nans-violation . gN2b24) (make-no-infinities-violation . gN2b0f) (real->flonum . gN2f0d) (flzero? . gN2f0c) (fltruncate . gN2f0b) (fltan . gN2f0a) (flsqrt . gN2f09) (flsin . gN2f08) (flround . gN2f07) (flpositive? . gN2f06) (flonum? . gN2f05) (flodd? . gN2f04) (flnumerator . gN2f03) (flnegative? . gN2f02) (flnan? . gN2f01) (flmod0 . gN2f00) (flmod . gN2eff) (flmin . gN2efe) (flmax . gN2efd) (fllog . gN2efc) (flinteger? . gN2efb) (flinfinite? . gN2efa) (flfloor . gN2ef9) (flfinite? . gN2ef8) (flexpt . gN2ef7) (flexp . gN2ef6) (fleven? . gN2ef5) (fldiv0-and-mod0 . gN2ef4) (fldiv0 . gN2ef3) (fldiv-and-mod . gN2ef2) (fldiv . gN2ef1) (fldenominator . gN2ef0) (flcos . gN2eef) (flceiling . gN2eee) (flatan . gN2eed) (flasin . gN2eec) (flacos . gN2eeb) (flabs . gN2eea) (fl>? . gN2ee9) (fl>=? . gN2ee8) (fl=? . gN2ee7) (fl<? . gN2ee6) (fl<=? . gN2ee5) (fl/ . gN2ee4) (fl- . gN2ee3) (fl+ . gN2ee2) (fl* . gN2ee1) (fixnum->flonum . gN2ee0) (&no-nans . gN2dfe) (&no-infinities . gN2dfd)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30dc '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . gN2fe7) (string-ci-hash . gN2fe6) (string-hash . gN2fe5) (equal-hash . gN2fe4) (hashtable-equivalence-function . gN2fe3) (make-hashtable . gN2fe2) (hashtable-hash-function . gN2fe1) (make-eqv-hashtable . gN2fe0) (make-eq-hashtable . gN2fdf) (hashtable? . gN2fde) (hashtable-update! . gN2fdd) (hashtable-size . gN2fdc) (hashtable-set! . gN2fdb) (hashtable-ref . gN2fda) (hashtable-mutable? . gN2fd9) (hashtable-keys . gN2fd8) (hashtable-entries . gN2fd7) (hashtable-delete! . gN2fd6) (hashtable-copy . gN2fd5) (hashtable-contains? . gN2fd4) (hashtable-clear! . gN2fd3)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30dd '(rnrs io ports) '(6) '() '() '() '((eof-object? . gN2fc3) (eof-object . gN2fc2) (current-error-port . gN2fc1) (current-output-port . gN2fc0) (current-input-port . gN2fbf) (output-port? . gN2fbe) (input-port? . gN2fbd) (utf-8-codec . gN2fbc) (utf-16-codec . gN2fbb) (transcoder-error-handling-mode . gN2fba) (transcoder-eol-style . gN2fb9) (transcoder-codec . gN2fb8) (transcoded-port . gN2fb7) (textual-port? . gN2fb6) (string->bytevector . gN2fb5) (standard-output-port . gN2fb4) (standard-input-port . gN2fb3) (standard-error-port . gN2fb2) (set-port-position! . gN2fb1) (put-u8 . gN2fb0) (put-string . gN2faf) (put-datum . gN2fae) (put-char . gN2fad) (put-bytevector . gN2fac) (port? . gN2fab) (port-transcoder . gN2faa) (port-position . gN2fa9) (port-has-set-port-position!? . gN2fa8) (port-has-port-position? . gN2fa7) (port-eof? . gN2fa6) (output-port-buffer-mode . gN2fa5) (open-string-output-port . gN2fa4) (open-string-input-port . gN2fa3) (open-file-output-port . gN2fa2) (open-file-input/output-port . gN2fa1) (open-file-input-port . gN2fa0) (open-bytevector-output-port . gN2f9f) (open-bytevector-input-port . gN2f9e) (native-transcoder . gN2f9d) (native-eol-style . gN2f9c) (make-transcoder . gN2f9b) (latin-1-codec . gN2f9a) (make-i/o-write-error . gN2a25) (make-i/o-read-error . gN2a10) (make-i/o-port-error . gN2ac6) (make-i/o-invalid-position-error . gN2a3c) (make-i/o-filename-error . gN2a57) (make-i/o-file-protection-error . gN2a70) (make-i/o-file-is-read-only-error . gN2a85) (make-i/o-file-does-not-exist-error . gN2aaf) (make-i/o-file-already-exists-error . gN2a9a) (make-i/o-error . gN29fb) (make-i/o-encoding-error . gN2af6) (make-i/o-decoding-error . gN2adf) (make-custom-textual-output-port . gN2f99) (make-custom-textual-input/output-port . gN2f98) (make-custom-textual-input-port . gN2f97) (make-custom-binary-output-port . gN2f96) (make-custom-binary-input/output-port . gN2f95) (make-custom-binary-input-port . gN2f94) (lookahead-u8 . gN2f92) (lookahead-char . gN2f91) (i/o-write-error? . gN2a27) (i/o-read-error? . gN2a12) (i/o-port-error? . gN2aca) (i/o-invalid-position-error? . gN2a40) (i/o-filename-error? . gN2a5b) (i/o-file-protection-error? . gN2a72) (i/o-file-is-read-only-error? . gN2a87) (i/o-file-does-not-exist-error? . gN2ab1) (i/o-file-already-exists-error? . gN2a9c) (i/o-error? . gN29fd) (i/o-error-position . gN2a42) (i/o-error-port . gN2acc) (i/o-error-filename . gN2a5d) (i/o-encoding-error? . gN2afa) (i/o-encoding-error-char . gN2afc) (i/o-decoding-error? . gN2ae1) (get-u8 . gN2f90) (get-string-n! . gN2f8f) (get-string-n . gN2f8e) (get-string-all . gN2f8d) (get-line . gN2f8c) (get-datum . gN2f8b) (get-char . gN2f8a) (get-bytevector-some . gN2f89) (get-bytevector-n! . gN2f88) (get-bytevector-n . gN2f87) (get-bytevector-all . gN2f86) (flush-output-port . gN2f85) (close-port . gN2f84) (call-with-string-output-port . gN2f63) (call-with-port . gN2f62) (call-with-bytevector-output-port . gN2f61) (bytevector->string . gN2f60) (buffer-mode? . gN2f5f) (binary-port? . gN2f5e) (&i/o-encoding . gN2dfc) (&i/o-decoding . gN2dfb) (&i/o-port . gN2dfa) (&i/o-file-does-not-exist . gN2df9) (&i/o-file-already-exists . gN2df8) (&i/o-file-is-read-only . gN2df7) (&i/o-file-protection . gN2df6) (&i/o-filename . gN2df5) (&i/o-invalid-position . gN2df4) (&i/o-write . gN2df3) (&i/o-read . gN2df2) (&i/o . gN2df1) (error-handling-mode . gN2dd6) (file-options . gN2dd5) (buffer-mode . gN2dd4) (eol-style . gN2dd3)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30de '(rnrs enums) '(6) '() '() '() '((make-enumeration . gN2f5a) (enum-set=? . gN2f59) (enum-set-universe . gN2f58) (enum-set-union . gN2f57) (enum-set-subset? . gN2f56) (enum-set-projection . gN2f55) (enum-set-member? . gN2f54) (enum-set-intersection . gN2f53) (enum-set-indexer . gN2f52) (enum-set-difference . gN2f51) (enum-set-constructor . gN2f50) (enum-set-complement . gN2f4f) (enum-set->list . gN2f4e) (define-enumeration . gN2de1)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30df '(rnrs conditions) '(6) '() '() '() '((who-condition? . gN2971) (warning? . gN28e9) (violation? . gN2928) (undefined-violation? . gN29e8) (syntax-violation? . gN29cf) (syntax-violation-subform . gN29d3) (syntax-violation-form . gN29d1) (syntax-violation . gNe41) (simple-conditions . gN2f4d) (serious-condition? . gN28fe) (non-continuable-violation? . gN2988) (message-condition? . gN28d2) (make-who-condition . gN296d) (make-warning . gN28e7) (make-violation . gN2926) (make-undefined-violation . gN29e6) (make-syntax-violation . gN29c9) (make-serious-condition . gN28fc) (make-non-continuable-violation . gN2986) (make-message-condition . gN28ce) (make-lexical-violation . gN29b0) (make-irritants-condition . gN2952) (make-implementation-restriction-violation . gN299b) (make-error . gN2911) (make-assertion-violation . gN293b) (lexical-violation? . gN29b2) (irritants-condition? . gN2956) (implementation-restriction-violation? . gN299d) (error? . gN2913) (condition-who . gN2973) (condition-predicate . gN2f4c) (condition-message . gN28d4) (condition-irritants . gN2958) (condition-accessor . gN2f4b) (condition . gN2f4a) (assertion-violation? . gN293d) (condition? . gN2f49) (&undefined . gN2df0) (&syntax . gN2def) (&lexical . gN2dee) (&implementation-restriction . gN2ded) (&non-continuable . gN2dec) (&who . gN2deb) (&irritants . gN2dea) (&assertion . gN2de9) (&violation . gN2de8) (&error . gN2de7) (&serious . gN2de6) (&warning . gN2de5) (&message . gN2de4) (&condition . gN2de3) (define-condition-type . gN2de2)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30e0 '(rnrs records inspection) '(6) '() '() '() '((record? . gN2ff6) (record-type-uid . gN2ff5) (record-type-sealed? . gN2ff4) (record-type-parent . gN2ff3) (record-type-opaque? . gN2ff2) (record-type-name . gN2ff1) (record-type-generative? . gN2ff0) (record-type-field-names . gN2fef) (record-rtd . gN2fee) (record-field-mutable? . gN2fed)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30e1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . gN2ffd) (record-predicate . gN2ffc) (record-mutator . gN2ffb) (record-constructor . gN2ffa) (record-accessor . gN2ff9) (make-record-type-descriptor . gN2ff8) (make-record-constructor-descriptor . gN2ff7)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30e2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . gN2de0) (parent-rtd . gN2ddf) (nongenerative . gN2dde) (opaque . gN2ddd) (sealed . gN2ddc) (protocol . gN2ddb) (parent . gN2dda) (immutable . gN2dd9) (mutable . gN2dd8) (fields . gN2dd7) (record-constructor-descriptor . gN2db6) (record-type-descriptor . gN2db5)) '() values values '#f '#f '#t '#f) (gN986@gN7d2@install-library 'gN30e3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . gN2b2a) (&no-nans-rtd . gN2b28) (&no-infinities-rcd . gN2b15) (&no-infinities-rtd . gN2b13) (&i/o-encoding-rcd . gN2b00) (&i/o-encoding-rtd . gN2afe) (&i/o-decoding-rcd . gN2ae5) (&i/o-decoding-rtd . gN2ae3) (&i/o-port-rcd . gN2ad0) (&i/o-port-rtd . gN2ace) (&i/o-file-does-not-exist-rcd . gN2ab5) (&i/o-file-does-not-exist-rtd . gN2ab3) (&i/o-file-already-exists-rcd . gN2aa0) (&i/o-file-already-exists-rtd . gN2a9e) (&i/o-file-is-read-only-rcd . gN2a8b) (&i/o-file-is-read-only-rtd . gN2a89) (&i/o-file-protection-rcd . gN2a76) (&i/o-file-protection-rtd . gN2a74) (&i/o-filename-rcd . gN2a61) (&i/o-filename-rtd . gN2a5f) (&i/o-invalid-position-rcd . gN2a46) (&i/o-invalid-position-rtd . gN2a44) (&i/o-write-rcd . gN2a2b) (&i/o-write-rtd . gN2a29) (&i/o-read-rcd . gN2a16) (&i/o-read-rtd . gN2a14) (&i/o-rcd . gN2a01) (&i/o-rtd . gN29ff) (&undefined-rcd . gN29ec) (&undefined-rtd . gN29ea) (&syntax-rcd . gN29d7) (&syntax-rtd . gN29d5) (&lexical-rcd . gN29b6) (&lexical-rtd . gN29b4) (&implementation-restriction-rcd . gN29a1) (&implementation-restriction-rtd . gN299f) (&non-continuable-rcd . gN298c) (&non-continuable-rtd . gN298a) (&who-rcd . gN2977) (&who-rtd . gN2975) (&irritants-rcd . gN295c) (&irritants-rtd . gN295a) (&assertion-rcd . gN2941) (&assertion-rtd . gN293f) (&violation-rcd . gN292c) (&violation-rtd . gN292a) (&error-rcd . gN2917) (&error-rtd . gN2915) (&serious-rcd . gN2902) (&serious-rtd . gN2900) (&warning-rcd . gN28ed) (&warning-rtd . gN28eb) (&message-rcd . gN28d8) (&message-rtd . gN28d6) (&condition-rcd . gN2879) (&condition-rtd . gN2877) (syntax-error . gNe3d) (syntax-dispatch . gNd61) (pretty-print . gN30c3) (eval-core . gN30c2) (set-symbol-value! . gN30c1) (symbol-value . gN30c0) (gensym . gN30bf) (void . gN30be) (load . gN2c3b) (interaction-environment . gNe4d) (char-ready? . gN30bd) (regexp? . gN30bc) (read-line . gN30bb) (gensym-prefix-set! . gN30ba) (ungensym . gN30b9) (alist->eq-hash-table . gN30b8) (assoc-ref . gN30b7) (print . gN30b6) (format . gN30b5) (host-os . gN30b4) (library-path . gN7b1) (standard-library-path . gN30b3) (file-newer? . gN30b2) (stat-mtime . gN30b1) (write-to-file . gN30b0) (file->list . gN30af) (file->string . gN30ae) (digit->integer . gN30ad) (call-with-string-input-port . gN30ac) (call-with-string-io . gN30ab) (string-split . gN30aa) (bytevector-for-each . gN30a9) (string->regexp . gN30a8) (rxmatch . gN30a7) (regexp-replace-all . gN30a6) (hashtable-for-each . gN30a5) (mosh-cache-dir . gN59c) (call-process . gN30a4) (local-tz-offset . gN30a3) (microseconds . gN30a2) (directory-list . gN30a1) (set-current-directory! . gN30a0) (expand-path . gN309f) (current-directory . gN309e) (%spawn . gN309d) (%waitpid . gN309c) (simple-struct-name . gN309b) (simple-struct-set! . gN309a) (simple-struct-ref . gN3099) (make-simple-struct . gN3098) (simple-struct? . gN3097) (pointer-ref-c-int64 . gN3096) (pointer-ref-c-int32 . gN3095) (pointer-ref-c-int16 . gN3094) (pointer-ref-c-int8 . gN3093) (pointer-ref-c-uint64 . gN3092) (pointer-ref-c-uint32 . gN3091) (pointer-ref-c-uint16 . gN3090) (pointer-ref-c-uint8 . gN308f) (pointer-set-c-uint64! . gN308e) (pointer-set-c-uint32! . gN308d) (pointer-set-c-uint16! . gN308c) (pointer-set-c-uint8! . gN308b) (pointer-set-c-int64! . gN308a) (pointer-set-c-int32! . gN3089) (pointer-set-c-int16! . gN3088) (pointer-set-c-int8! . gN3087) (pointer-set-c-pointer! . gN3086) (pointer-set-c-double! . gN3085) (pointer-set-c-float! . gN3084) (pointer-set-c-long-long! . gN3083) (pointer-set-c-long! . gN3082) (pointer-set-c-int! . gN3081) (pointer-set-c-short! . gN3080) (pointer-set-c-char! . gN307f) (pointer-ref-c-pointer . gN307e) (pointer-ref-c-double . gN307d) (pointer-ref-c-float . gN307c) (pointer-ref-c-unsigned-long-long . gN307b) (pointer-ref-c-signed-long-long . gN307a) (pointer-ref-c-unsigned-long . gN3079) (pointer-ref-c-signed-long . gN3078) (pointer-ref-c-unsigned-int . gN3077) (pointer-ref-c-signed-int . gN3076) (pointer-ref-c-unsigned-short . gN3075) (pointer-ref-c-signed-short . gN3074) (pointer-ref-c-unsigned-char . gN3073) (pointer-ref-c-signed-char . gN3072) (pointer->integer . gN3071) (integer->pointer . gN3070) (pointer? . gN306f) (shared-errno . gN306e) (%ffi-free . gN306d) (%ffi-malloc . gN306c) (%ffi-supported? . gN306b) (%ffi-pointer->string . gN306a) (%ffi-call->string-or-zero . gN3069) (%ffi-call->double . gN3068) (%ffi-call->void* . gN3067) (%ffi-call->void . gN3066) (%ffi-call->char . gN3065) (%ffi-call->int . gN3064) (%ffi-lookup . gN3063) (%ffi-open . gN3062) (%fork . gN3061) (%pipe . gN3060) (p . gN305f) (open-output-string . gN305e) (get-output-string . gN305d) (file-stat-ctime . gN305c) (file-stat-atime . gN305b) (file-stat-mtime . gN305a) (file-size-in-bytes . gN3059) (file-writable? . gN3058) (file-executable? . gN3057) (file-readable? . gN3056) (file-regular? . gN3055) (file-symbolic-link? . gN3054) (file-directory? . gN3053) (create-symbolic-link . gN3052) (rename-file . gN3051) (delete-directory . gN3050) (create-directory . gN304f) (create-mosh-cache-dir . gN304e) (get-environment-variables . gN304d) (current-exception-handler . gN304c) (get-environment-variable . gN304b) (join-wraps . gN304a) (id->real-label . gN3049) (same-marks? . gN3048) (same-marks*? . gN3047) (get-timeofday . gN3046) (get-command-line . gN3045) (sys-display . gN3044) (whereis . gN3043) (register . gN3042) (vm-join! . gN3041) (vm-set-value! . gN3040) (vm? . gN303f) (main-vm? . gN303e) (vm-eval . gN303d) (vm-self . gN303c) (vm-start! . gN303b) (make-vm . gN303a) (mutex-try-lock! . gN3039) (mutex-unlock! . gN3038) (mutex-lock! . gN3037) (mutex? . gN3036) (make-mutex . gN3035) (condition-variable-notify-all! . gN3034) (condition-variable-notify! . gN3033) (condition-variable-wait! . gN3032) (make-condition-variable . gN3031) (mosh-executable-path . gN3030) (make-file-options . gN302f) (source-info . gN302e) (make-compiler-instruction . gN302d) (make-instruction . gN302c) (set-source-info! . gN302b) (bignum? . gN302a) (fast-equal? . gN3029) (fasl-read . gN3028) (fasl-write . gN3027) (time-usage . gN3026) (os-constant . gN3025) (make-parameter . gN59a) (socket-port . gN3024) (socket-shutdown . gN3023) (socket-close . gN3022) (socket-send . gN3021) (socket-recv! . gN3020) (socket-recv . gN301f) (make-server-socket . gN301e) (make-client-socket . gN301d) (socket-accept . gN301c) (socket? . gN301b) (string-upcase . gN301a) (string-titlecase . gN3019) (string-normalize-nfkd . gN3018) (string-normalize-nfkc . gN3017) (string-normalize-nfd . gN3016) (string-normalize-nfc . gN3015) (string-foldcase . gN3014) (string-downcase . gN3013) (string-ci>? . gN3012) (string-ci>=? . gN3011) (string-ci=? . gN3010) (string-ci<? . gN300f) (string-ci<=? . gN300e) (char-whitespace? . gN300d) (char-upper-case? . gN300c) (char-title-case? . gN300b) (char-numeric? . gN300a) (char-lower-case? . gN3009) (char-general-category . gN3008) (char-upcase . gN3007) (char-titlecase . gN3006) (char-foldcase . gN3005) (char-downcase . gN3004) (char-ci>? . gN3003) (char-ci>=? . gN3002) (char-ci=? . gN3001) (char-ci<? . gN3000) (char-ci<=? . gN2fff) (char-alphabetic? . gN2ffe) (make-variable-transformer . gNb8e) (identifier? . gNe43) (generate-temporaries . gNe2f) (free-identifier=? . gNe31) (syntax->datum . gNe47) (datum->syntax . gNe45) (bound-identifier=? . gNe33) (record-type-descriptor? . gN2ffd) (record-predicate . gN2ffc) (record-mutator . gN2ffb) (record-constructor . gN2ffa) (record-accessor . gN2ff9) (make-record-type-descriptor . gN2ff8) (make-record-constructor-descriptor . gN2ff7) (record? . gN2ff6) (record-type-uid . gN2ff5) (record-type-sealed? . gN2ff4) (record-type-parent . gN2ff3) (record-type-opaque? . gN2ff2) (record-type-name . gN2ff1) (record-type-generative? . gN2ff0) (record-type-field-names . gN2fef) (record-rtd . gN2fee) (record-field-mutable? . gN2fed) (delete-file . gN2fec) (file-exists? . gN2feb) (vector-sort! . gN2fea) (vector-sort . gN2fe9) (list-sort . gN2fe8) (symbol-hash . gN2fe7) (string-ci-hash . gN2fe6) (string-hash . gN2fe5) (equal-hash . gN2fe4) (hashtable-equivalence-function . gN2fe3) (make-hashtable . gN2fe2) (hashtable-hash-function . gN2fe1) (make-eqv-hashtable . gN2fe0) (make-eq-hashtable . gN2fdf) (hashtable? . gN2fde) (hashtable-update! . gN2fdd) (hashtable-size . gN2fdc) (hashtable-set! . gN2fdb) (hashtable-ref . gN2fda) (hashtable-mutable? . gN2fd9) (hashtable-keys . gN2fd8) (hashtable-entries . gN2fd7) (hashtable-delete! . gN2fd6) (hashtable-copy . gN2fd5) (hashtable-contains? . gN2fd4) (hashtable-clear! . gN2fd3) (call-with-output-file . gN2fd2) (call-with-input-file . gN2fd1) (write-char . gN2fd0) (write . gN2fcf) (with-output-to-file . gN2fce) (with-input-from-file . gN2fcd) (read-char . gN2fcc) (read . gN2fcb) (peek-char . gN2fca) (open-output-file . gN2fc9) (open-input-file . gN2fc8) (newline . gN2fc7) (display . gN2fc6) (close-output-port . gN2fc5) (close-input-port . gN2fc4) (eof-object? . gN2fc3) (eof-object . gN2fc2) (current-error-port . gN2fc1) (current-output-port . gN2fc0) (current-input-port . gN2fbf) (output-port? . gN2fbe) (input-port? . gN2fbd) (utf-8-codec . gN2fbc) (utf-16-codec . gN2fbb) (transcoder-error-handling-mode . gN2fba) (transcoder-eol-style . gN2fb9) (transcoder-codec . gN2fb8) (transcoded-port . gN2fb7) (textual-port? . gN2fb6) (string->bytevector . gN2fb5) (standard-output-port . gN2fb4) (standard-input-port . gN2fb3) (standard-error-port . gN2fb2) (set-port-position! . gN2fb1) (put-u8 . gN2fb0) (put-string . gN2faf) (put-datum . gN2fae) (put-char . gN2fad) (put-bytevector . gN2fac) (port? . gN2fab) (port-transcoder . gN2faa) (port-position . gN2fa9) (port-has-set-port-position!? . gN2fa8) (port-has-port-position? . gN2fa7) (port-eof? . gN2fa6) (output-port-buffer-mode . gN2fa5) (open-string-output-port . gN2fa4) (open-string-input-port . gN2fa3) (open-file-output-port . gN2fa2) (open-file-input/output-port . gN2fa1) (open-file-input-port . gN2fa0) (open-bytevector-output-port . gN2f9f) (open-bytevector-input-port . gN2f9e) (native-transcoder . gN2f9d) (native-eol-style . gN2f9c) (make-transcoder . gN2f9b) (latin-1-codec . gN2f9a) (make-i/o-write-error . gN2a25) (make-i/o-read-error . gN2a10) (make-i/o-port-error . gN2ac6) (make-i/o-invalid-position-error . gN2a3c) (make-i/o-filename-error . gN2a57) (make-i/o-file-protection-error . gN2a70) (make-i/o-file-is-read-only-error . gN2a85) (make-i/o-file-does-not-exist-error . gN2aaf) (make-i/o-file-already-exists-error . gN2a9a) (make-i/o-error . gN29fb) (make-i/o-encoding-error . gN2af6) (make-i/o-decoding-error . gN2adf) (make-custom-textual-output-port . gN2f99) (make-custom-textual-input/output-port . gN2f98) (make-custom-textual-input-port . gN2f97) (make-custom-binary-output-port . gN2f96) (make-custom-binary-input/output-port . gN2f95) (make-custom-binary-input-port . gN2f94) (make-bytevector . gN2f93) (lookahead-u8 . gN2f92) (lookahead-char . gN2f91) (i/o-write-error? . gN2a27) (i/o-read-error? . gN2a12) (i/o-port-error? . gN2aca) (i/o-invalid-position-error? . gN2a40) (i/o-filename-error? . gN2a5b) (i/o-file-protection-error? . gN2a72) (i/o-file-is-read-only-error? . gN2a87) (i/o-file-does-not-exist-error? . gN2ab1) (i/o-file-already-exists-error? . gN2a9c) (i/o-error? . gN29fd) (i/o-error-position . gN2a42) (i/o-error-port . gN2acc) (i/o-error-filename . gN2a5d) (i/o-encoding-error? . gN2afa) (i/o-encoding-error-char . gN2afc) (i/o-decoding-error? . gN2ae1) (get-u8 . gN2f90) (get-string-n! . gN2f8f) (get-string-n . gN2f8e) (get-string-all . gN2f8d) (get-line . gN2f8c) (get-datum . gN2f8b) (get-char . gN2f8a) (get-bytevector-some . gN2f89) (get-bytevector-n! . gN2f88) (get-bytevector-n . gN2f87) (get-bytevector-all . gN2f86) (flush-output-port . gN2f85) (close-port . gN2f84) (scheme-report-environment . gNe1d) (quotient . gN2f83) (null-environment . gNe1b) (remainder . gN2f82) (modulo . gN2f81) (inexact->exact . gN2f80) (force . gN2f7f) (exact->inexact . gN2f7e) (make-promise . gN2f7d) (exit . gN2f7c) (command-line . gN2c35) (string-fill! . gN2f7b) (string-set! . gN2f7a) (set-cdr! . gN2f79) (set-car! . gN2f78) (remove . gN2f77) (remv . gN2f76) (remp . gN2f75) (remq . gN2f74) (partition . gN2f73) (memv . gN2f72) (memq . gN2f71) (memp . gN2f70) (member . gN2f6f) (exists . gN2f6e) (for-all . gN2f6d) (fold-right . gN2f6c) (fold-left . gN2f6b) (find . gN2f6a) (filter . gN2f69) (cons* . gN2f68) (assv . gN2f67) (assq . gN2f66) (assp . gN2f65) (assoc . gN2f64) (call-with-string-output-port . gN2f63) (call-with-port . gN2f62) (call-with-bytevector-output-port . gN2f61) (bytevector->string . gN2f60) (buffer-mode? . gN2f5f) (binary-port? . gN2f5e) (with-exception-handler . gN2f5d) (raise-continuable . gN2f5c) (raise . gN2f5b) (eval . gNe21) (environment . gNe19) (make-enumeration . gN2f5a) (enum-set=? . gN2f59) (enum-set-universe . gN2f58) (enum-set-union . gN2f57) (enum-set-subset? . gN2f56) (enum-set-projection . gN2f55) (enum-set-member? . gN2f54) (enum-set-intersection . gN2f53) (enum-set-indexer . gN2f52) (enum-set-difference . gN2f51) (enum-set-constructor . gN2f50) (enum-set-complement . gN2f4f) (enum-set->list . gN2f4e) (who-condition? . gN2971) (warning? . gN28e9) (violation? . gN2928) (undefined-violation? . gN29e8) (syntax-violation? . gN29cf) (syntax-violation-subform . gN29d3) (syntax-violation-form . gN29d1) (syntax-violation . gNe41) (simple-conditions . gN2f4d) (serious-condition? . gN28fe) (non-continuable-violation? . gN2988) (message-condition? . gN28d2) (make-who-condition . gN296d) (make-warning . gN28e7) (make-violation . gN2926) (make-undefined-violation . gN29e6) (make-syntax-violation . gN29c9) (make-serious-condition . gN28fc) (make-non-continuable-violation . gN2986) (make-message-condition . gN28ce) (make-lexical-violation . gN29b0) (make-irritants-condition . gN2952) (make-implementation-restriction-violation . gN299b) (make-error . gN2911) (make-assertion-violation . gN293b) (lexical-violation? . gN29b2) (irritants-condition? . gN2956) (implementation-restriction-violation? . gN299d) (error? . gN2913) (condition-who . gN2973) (condition-predicate . gN2f4c) (condition-message . gN28d4) (condition-irritants . gN2958) (condition-accessor . gN2f4b) (condition . gN2f4a) (assertion-violation? . gN293d) (condition? . gN2f49) (utf32->string . gN2f48) (utf16->string . gN2f47) (utf8->string . gN2f46) (uint-list->bytevector . gN2f45) (u8-list->bytevector . gN2f44) (string->utf8 . gN2f43) (string->utf32 . gN2f42) (string->utf16 . gN2f41) (sint-list->bytevector . gN2f40) (native-endianness . gN2f3f) (bytevector? . gN2f3e) (bytevector=? . gN2f3d) (bytevector-uint-set! . gN2f3c) (bytevector-uint-ref . gN2f3b) (bytevector-u8-set! . gN2f3a) (bytevector-u8-ref . gN2f39) (bytevector-u64-set! . gN2f38) (bytevector-u64-ref . gN2f37) (bytevector-u64-native-set! . gN2f36) (bytevector-u64-native-ref . gN2f35) (bytevector-u32-set! . gN2f34) (bytevector-u32-ref . gN2f33) (bytevector-u32-native-set! . gN2f32) (bytevector-u32-native-ref . gN2f31) (bytevector-u16-set! . gN2f30) (bytevector-u16-ref . gN2f2f) (bytevector-u16-native-set! . gN2f2e) (bytevector-u16-native-ref . gN2f2d) (bytevector-sint-set! . gN2f2c) (bytevector-sint-ref . gN2f2b) (bytevector-s8-set! . gN2f2a) (bytevector-s8-ref . gN2f29) (bytevector-s64-set! . gN2f28) (bytevector-s64-ref . gN2f27) (bytevector-s64-native-set! . gN2f26) (bytevector-s64-native-ref . gN2f25) (bytevector-s32-set! . gN2f24) (bytevector-s32-ref . gN2f23) (bytevector-s32-native-set! . gN2f22) (bytevector-s32-native-ref . gN2f21) (bytevector-s16-set! . gN2f20) (bytevector-s16-ref . gN2f1f) (bytevector-s16-native-set! . gN2f1e) (bytevector-s16-native-ref . gN2f1d) (bytevector-length . gN2f1c) (bytevector-ieee-single-ref . gN2f1b) (bytevector-ieee-single-set! . gN2f1a) (bytevector-ieee-single-native-set! . gN2f19) (bytevector-ieee-single-native-ref . gN2f18) (bytevector-ieee-double-set! . gN2f17) (bytevector-ieee-double-ref . gN2f16) (bytevector-ieee-double-native-set! . gN2f15) (bytevector-ieee-double-native-ref . gN2f14) (bytevector-fill! . gN2f13) (bytevector-copy! . gN2f12) (bytevector-copy . gN2f11) (bytevector->uint-list . gN2f10) (bytevector->u8-list . gN2f0f) (bytevector->sint-list . gN2f0e) (no-nans-violation? . gN2b26) (no-infinities-violation? . gN2b11) (make-no-nans-violation . gN2b24) (make-no-infinities-violation . gN2b0f) (real->flonum . gN2f0d) (flzero? . gN2f0c) (fltruncate . gN2f0b) (fltan . gN2f0a) (flsqrt . gN2f09) (flsin . gN2f08) (flround . gN2f07) (flpositive? . gN2f06) (flonum? . gN2f05) (flodd? . gN2f04) (flnumerator . gN2f03) (flnegative? . gN2f02) (flnan? . gN2f01) (flmod0 . gN2f00) (flmod . gN2eff) (flmin . gN2efe) (flmax . gN2efd) (fllog . gN2efc) (flinteger? . gN2efb) (flinfinite? . gN2efa) (flfloor . gN2ef9) (flfinite? . gN2ef8) (flexpt . gN2ef7) (flexp . gN2ef6) (fleven? . gN2ef5) (fldiv0-and-mod0 . gN2ef4) (fldiv0 . gN2ef3) (fldiv-and-mod . gN2ef2) (fldiv . gN2ef1) (fldenominator . gN2ef0) (flcos . gN2eef) (flceiling . gN2eee) (flatan . gN2eed) (flasin . gN2eec) (flacos . gN2eeb) (flabs . gN2eea) (fl>? . gN2ee9) (fl>=? . gN2ee8) (fl=? . gN2ee7) (fl<? . gN2ee6) (fl<=? . gN2ee5) (fl/ . gN2ee4) (fl- . gN2ee3) (fl+ . gN2ee2) (fl* . gN2ee1) (fixnum->flonum . gN2ee0) (fxzero? . gN2edf) (fxxor . gN2ede) (fxrotate-bit-field . gN2edd) (fxreverse-bit-field . gN2edc) (fxpositive? . gN2edb) (fxodd? . gN2eda) (fxnot . gN2ed9) (fxnegative? . gN2ed8) (fxmod0 . gN2ed7) (fxmod . gN2ed6) (fxmin . gN2ed5) (fxmax . gN2ed4) (fxlength . gN2ed3) (fxior . gN2ed2) (fxif . gN2ed1) (fxfirst-bit-set . gN2ed0) (fxeven? . gN2ecf) (fxdiv0-and-mod0 . gN2ece) (fxdiv0 . gN2ecd) (fxdiv-and-mod . gN2ecc) (fxdiv . gN2ecb) (fxcopy-bit-field . gN2eca) (fxcopy-bit . gN2ec9) (fxbit-set? . gN2ec8) (fxbit-field . gN2ec7) (fxbit-count . gN2ec6) (fxarithmetic-shift-right . gN2ec5) (fxarithmetic-shift-left . gN2ec4) (fxarithmetic-shift . gN2ec3) (fxand . gN2ec2) (fx>? . gN2ec1) (fx>=? . gN2ec0) (fx=? . gN2ebf) (fx<? . gN2ebe) (fx<=? . gN2ebd) (fx-/carry . gN2ebc) (fx- . gN2ebb) (fx+/carry . gN2eba) (fx+ . gN2eb9) (fx*/carry . gN2eb8) (fx* . gN2eb7) (greatest-fixnum . gN2eb6) (least-fixnum . gN2eb5) (fixnum-width . gN2eb4) (fixnum? . gN2eb3) (bitwise-rotate-bit-field . gN2eb2) (bitwise-reverse-bit-field . gN2eb1) (bitwise-length . gN2eb0) (bitwise-if . gN2eaf) (bitwise-first-bit-set . gN2eae) (bitwise-copy-bit-field . gN2ead) (bitwise-copy-bit . gN2eac) (bitwise-bit-set? . gN2eab) (bitwise-bit-field . gN2eaa) (bitwise-bit-count . gN2ea9) (bitwise-xor . gN2ea8) (bitwise-ior . gN2ea7) (bitwise-and . gN2ea6) (bitwise-not . gN2ea5) (bitwise-arithmetic-shift-right . gN2ea4) (bitwise-arithmetic-shift-left . gN2ea3) (bitwise-arithmetic-shift . gN2ea2) (zero? . gN2ea1) (vector? . gN2ea0) (vector-set! . gN2e9f) (vector-ref . gN2e9e) (vector-map . gN2e9d) (vector-length . gN2e9c) (vector-for-each . gN2e9b) (vector-fill! . gN2e9a) (vector->list . gN2e99) (vector . gN2e98) (values . gN2e97) (truncate . gN2e96) (tan . gN2e95) (symbol? . gN2e94) (symbol=? . gN2e93) (symbol->string . gN2e92) (substring . gN2e91) (string? . gN2e90) (string>? . gN2e8f) (string>=? . gN2e8e) (string=? . gN2e8d) (string<? . gN2e8c) (string<=? . gN2e8b) (string-ref . gN2e8a) (string-length . gN2e89) (string-for-each . gN2e88) (string-copy . gN2e87) (string-append . gN2e86) (string->symbol . gN2e85) (string->number . gN2e84) (string->list . gN2e83) (string . gN2e82) (sqrt . gN2e81) (sin . gN2e80) (round . gN2e7f) (reverse . gN2e7e) (real? . gN2e7d) (real-valued? . gN2e7c) (real-part . gN2e7b) (rationalize . gN2e7a) (rational? . gN2e79) (rational-valued? . gN2e78) (procedure? . gN2e77) (positive? . gN2e76) (pair? . gN2e75) (odd? . gN2e74) (numerator . gN2e73) (number? . gN2e72) (number->string . gN2e71) (null? . gN2e70) (not . gN2e6f) (negative? . gN2e6e) (nan? . gN2e6d) (min . gN2e6c) (max . gN2e6b) (map . gN2e6a) (make-vector . gN2e69) (make-string . gN2e68) (make-rectangular . gN2e67) (make-polar . gN2e66) (magnitude . gN2e65) (log . gN2e64) (list? . gN2e63) (list-tail . gN2e62) (list-ref . gN2e61) (list->vector . gN2e60) (list->string . gN2e5f) (list . gN2e5e) (length . gN2e5d) (lcm . gN2e5c) (integer? . gN2e5b) (integer-valued? . gN2e5a) (integer->char . gN2e59) (infinite? . gN2e58) (inexact? . gN2e57) (inexact . gN2e56) (imag-part . gN2e55) (gcd . gN2e54) (for-each . gN2e53) (floor . gN2e52) (finite? . gN2e51) (expt . gN2e50) (exp . gN2e4f) (exact? . gN2e4e) (exact-integer-sqrt . gN2e4d) (exact . gN2e4c) (even? . gN2e4b) (error . gN2e4a) (eqv? . gN2e49) (equal? . gN2e48) (eq? . gN2e47) (dynamic-wind . gN2e46) (div0-and-mod0 . gN2e45) (mod0 . gN2e44) (div0 . gN2e43) (div-and-mod . gN2e42) (mod . gN2e41) (div . gN2e40) (denominator . gN2e3f) (cos . gN2e3e) (cons . gN2e3d) (complex? . gN2e3c) (char? . gN2e3b) (char>? . gN2e3a) (char>=? . gN2e39) (char=? . gN2e38) (char<? . gN2e37) (char<=? . gN2e36) (char->integer . gN2e35) (ceiling . gN2e34) (call-with-values . gN2e33) (call/cc . gN2e32) (call-with-current-continuation . gN2e31) (cddddr . gN2e30) (cdddar . gN2e2f) (cddadr . gN2e2e) (cddaar . gN2e2d) (cdaddr . gN2e2c) (cdadar . gN2e2b) (cdaadr . gN2e2a) (cdaaar . gN2e29) (cadddr . gN2e28) (caddar . gN2e27) (cadadr . gN2e26) (cadaar . gN2e25) (caaddr . gN2e24) (caadar . gN2e23) (caaadr . gN2e22) (caaaar . gN2e21) (cdddr . gN2e20) (cddar . gN2e1f) (cdadr . gN2e1e) (cdaar . gN2e1d) (caddr . gN2e1c) (cadar . gN2e1b) (caadr . gN2e1a) (caaar . gN2e19) (cddr . gN2e18) (cdar . gN2e17) (cadr . gN2e16) (caar . gN2e15) (cdr . gN2e14) (car . gN2e13) (boolean? . gN2e12) (boolean=? . gN2e11) (atan . gN2e10) (assertion-violation . gN2e0f) (assertion-error . gNe3b) (asin . gN2e0e) (apply . gN2e0d) (append . gN2e0c) (angle . gN2e0b) (acos . gN2e0a) (abs . gN2e09) (/ . gN2e08) (* . gN2e07) (- . gN2e06) (+ . gN2e05) (>= . gN2e04) (> . gN2e03) (= . gN2e02) (<= . gN2e01) (< . gN2e00) (library . gN2dff) (&no-nans . gN2dfe) (&no-infinities . gN2dfd) (&i/o-encoding . gN2dfc) (&i/o-decoding . gN2dfb) (&i/o-port . gN2dfa) (&i/o-file-does-not-exist . gN2df9) (&i/o-file-already-exists . gN2df8) (&i/o-file-is-read-only . gN2df7) (&i/o-file-protection . gN2df6) (&i/o-filename . gN2df5) (&i/o-invalid-position . gN2df4) (&i/o-write . gN2df3) (&i/o-read . gN2df2) (&i/o . gN2df1) (&undefined . gN2df0) (&syntax . gN2def) (&lexical . gN2dee) (&implementation-restriction . gN2ded) (&non-continuable . gN2dec) (&who . gN2deb) (&irritants . gN2dea) (&assertion . gN2de9) (&violation . gN2de8) (&error . gN2de7) (&serious . gN2de6) (&warning . gN2de5) (&message . gN2de4) (&condition . gN2de3) (define-condition-type . gN2de2) (define-enumeration . gN2de1) (define-record-type . gN2de0) (parent-rtd . gN2ddf) (nongenerative . gN2dde) (opaque . gN2ddd) (sealed . gN2ddc) (protocol . gN2ddb) (parent . gN2dda) (immutable . gN2dd9) (mutable . gN2dd8) (fields . gN2dd7) (error-handling-mode . gN2dd6) (file-options . gN2dd5) (buffer-mode . gN2dd4) (eol-style . gN2dd3) (guard . gN2dd2) (trace-define . gN2dd1) (trace-lambda . gN2dd0) (unsyntax-splicing . gN2dcf) (unsyntax . gN2dce) (unquote-splicing . gN2dcd) (unquote . gN2dcc) (_ . gN2dcb) (else . gN2dca) (=> . gN2dc9) (... . gN2dc8) (assert . gN2dc7) (endianness . gN2dc6) (delay . gN2dc5) (time . gN2dc4) (do . gN2dc3) (cond . gN2dc2) (let* . gN2dc1) (let . gN2dc0) (let*-values . gN2dbf) (let-values . gN2dbe) (identifier-syntax . gN2dbd) (with-syntax . gN2dbc) (quasisyntax . gN2dbb) (quasiquote . gN2dba) (syntax-rules . gN2db9) (include . gN2db8) (define-struct . gN2db7) (record-constructor-descriptor . gN2db6) (record-type-descriptor . gN2db5) (case . gN2db4) (parameterize . gN2db3) (unless . gN2db2) (when . gN2db1) (or . gN2db0) (and . gN2daf) (if . gN2dae) (letrec* . gN2dad) (letrec . gN2dac) (type-descriptor . gN2dab) (case-lambda . gN2daa) (lambda . gN2da9) (syntax . gN2da8) (syntax-case . gN2da7) (quote . gN2da6) (foreign-call . gN2da5) (letrec-syntax . gN2da4) (let-syntax . gN2da3) (set! . gN2da2) (import . gN2da1) (begin . gN2da0) (module . gN2d9f) (define-syntax . gN2d9e) (define . gN2d9d)) '((gN2b2a core-prim . &no-nans-rcd) (gN2b28 core-prim . &no-nans-rtd) (gN2b15 core-prim . &no-infinities-rcd) (gN2b13 core-prim . &no-infinities-rtd) (gN2b00 core-prim . &i/o-encoding-rcd) (gN2afe core-prim . &i/o-encoding-rtd) (gN2ae5 core-prim . &i/o-decoding-rcd) (gN2ae3 core-prim . &i/o-decoding-rtd) (gN2ad0 core-prim . &i/o-port-rcd) (gN2ace core-prim . &i/o-port-rtd) (gN2ab5 core-prim . &i/o-file-does-not-exist-rcd) (gN2ab3 core-prim . &i/o-file-does-not-exist-rtd) (gN2aa0 core-prim . &i/o-file-already-exists-rcd) (gN2a9e core-prim . &i/o-file-already-exists-rtd) (gN2a8b core-prim . &i/o-file-is-read-only-rcd) (gN2a89 core-prim . &i/o-file-is-read-only-rtd) (gN2a76 core-prim . &i/o-file-protection-rcd) (gN2a74 core-prim . &i/o-file-protection-rtd) (gN2a61 core-prim . &i/o-filename-rcd) (gN2a5f core-prim . &i/o-filename-rtd) (gN2a46 core-prim . &i/o-invalid-position-rcd) (gN2a44 core-prim . &i/o-invalid-position-rtd) (gN2a2b core-prim . &i/o-write-rcd) (gN2a29 core-prim . &i/o-write-rtd) (gN2a16 core-prim . &i/o-read-rcd) (gN2a14 core-prim . &i/o-read-rtd) (gN2a01 core-prim . &i/o-rcd) (gN29ff core-prim . &i/o-rtd) (gN29ec core-prim . &undefined-rcd) (gN29ea core-prim . &undefined-rtd) (gN29d7 core-prim . &syntax-rcd) (gN29d5 core-prim . &syntax-rtd) (gN29b6 core-prim . &lexical-rcd) (gN29b4 core-prim . &lexical-rtd) (gN29a1 core-prim . &implementation-restriction-rcd) (gN299f core-prim . &implementation-restriction-rtd) (gN298c core-prim . &non-continuable-rcd) (gN298a core-prim . &non-continuable-rtd) (gN2977 core-prim . &who-rcd) (gN2975 core-prim . &who-rtd) (gN295c core-prim . &irritants-rcd) (gN295a core-prim . &irritants-rtd) (gN2941 core-prim . &assertion-rcd) (gN293f core-prim . &assertion-rtd) (gN292c core-prim . &violation-rcd) (gN292a core-prim . &violation-rtd) (gN2917 core-prim . &error-rcd) (gN2915 core-prim . &error-rtd) (gN2902 core-prim . &serious-rcd) (gN2900 core-prim . &serious-rtd) (gN28ed core-prim . &warning-rcd) (gN28eb core-prim . &warning-rtd) (gN28d8 core-prim . &message-rcd) (gN28d6 core-prim . &message-rtd) (gN2879 core-prim . &condition-rcd) (gN2877 core-prim . &condition-rtd) (gNe3d core-prim . syntax-error) (gNd61 core-prim . syntax-dispatch) (gN30c3 core-prim . pretty-print) (gN30c2 core-prim . eval-core) (gN30c1 core-prim . set-symbol-value!) (gN30c0 core-prim . symbol-value) (gN30bf core-prim . gensym) (gN30be core-prim . void) (gN2c3b core-prim . load) (gNe4d core-prim . interaction-environment) (gN30bd core-prim . char-ready?) (gN30bc core-prim . regexp?) (gN30bb core-prim . read-line) (gN30ba core-prim . gensym-prefix-set!) (gN30b9 core-prim . ungensym) (gN30b8 core-prim . alist->eq-hash-table) (gN30b7 core-prim . assoc-ref) (gN30b6 core-prim . print) (gN30b5 core-prim . format) (gN30b4 core-prim . host-os) (gN7b1 core-prim . library-path) (gN30b3 core-prim . standard-library-path) (gN30b2 core-prim . file-newer?) (gN30b1 core-prim . stat-mtime) (gN30b0 core-prim . write-to-file) (gN30af core-prim . file->list) (gN30ae core-prim . file->string) (gN30ad core-prim . digit->integer) (gN30ac core-prim . call-with-string-input-port) (gN30ab core-prim . call-with-string-io) (gN30aa core-prim . string-split) (gN30a9 core-prim . bytevector-for-each) (gN30a8 core-prim . string->regexp) (gN30a7 core-prim . rxmatch) (gN30a6 core-prim . regexp-replace-all) (gN30a5 core-prim . hashtable-for-each) (gN59c core-prim . mosh-cache-dir) (gN30a4 core-prim . call-process) (gN30a3 core-prim . local-tz-offset) (gN30a2 core-prim . microseconds) (gN30a1 core-prim . directory-list) (gN30a0 core-prim . set-current-directory!) (gN309f core-prim . expand-path) (gN309e core-prim . current-directory) (gN309d core-prim . %spawn) (gN309c core-prim . %waitpid) (gN309b core-prim . simple-struct-name) (gN309a core-prim . simple-struct-set!) (gN3099 core-prim . simple-struct-ref) (gN3098 core-prim . make-simple-struct) (gN3097 core-prim . simple-struct?) (gN3096 core-prim . pointer-ref-c-int64) (gN3095 core-prim . pointer-ref-c-int32) (gN3094 core-prim . pointer-ref-c-int16) (gN3093 core-prim . pointer-ref-c-int8) (gN3092 core-prim . pointer-ref-c-uint64) (gN3091 core-prim . pointer-ref-c-uint32) (gN3090 core-prim . pointer-ref-c-uint16) (gN308f core-prim . pointer-ref-c-uint8) (gN308e core-prim . pointer-set-c-uint64!) (gN308d core-prim . pointer-set-c-uint32!) (gN308c core-prim . pointer-set-c-uint16!) (gN308b core-prim . pointer-set-c-uint8!) (gN308a core-prim . pointer-set-c-int64!) (gN3089 core-prim . pointer-set-c-int32!) (gN3088 core-prim . pointer-set-c-int16!) (gN3087 core-prim . pointer-set-c-int8!) (gN3086 core-prim . pointer-set-c-pointer!) (gN3085 core-prim . pointer-set-c-double!) (gN3084 core-prim . pointer-set-c-float!) (gN3083 core-prim . pointer-set-c-long-long!) (gN3082 core-prim . pointer-set-c-long!) (gN3081 core-prim . pointer-set-c-int!) (gN3080 core-prim . pointer-set-c-short!) (gN307f core-prim . pointer-set-c-char!) (gN307e core-prim . pointer-ref-c-pointer) (gN307d core-prim . pointer-ref-c-double) (gN307c core-prim . pointer-ref-c-float) (gN307b core-prim . pointer-ref-c-unsigned-long-long) (gN307a core-prim . pointer-ref-c-signed-long-long) (gN3079 core-prim . pointer-ref-c-unsigned-long) (gN3078 core-prim . pointer-ref-c-signed-long) (gN3077 core-prim . pointer-ref-c-unsigned-int) (gN3076 core-prim . pointer-ref-c-signed-int) (gN3075 core-prim . pointer-ref-c-unsigned-short) (gN3074 core-prim . pointer-ref-c-signed-short) (gN3073 core-prim . pointer-ref-c-unsigned-char) (gN3072 core-prim . pointer-ref-c-signed-char) (gN3071 core-prim . pointer->integer) (gN3070 core-prim . integer->pointer) (gN306f core-prim . pointer?) (gN306e core-prim . shared-errno) (gN306d core-prim . %ffi-free) (gN306c core-prim . %ffi-malloc) (gN306b core-prim . %ffi-supported?) (gN306a core-prim . %ffi-pointer->string) (gN3069 core-prim . %ffi-call->string-or-zero) (gN3068 core-prim . %ffi-call->double) (gN3067 core-prim . %ffi-call->void*) (gN3066 core-prim . %ffi-call->void) (gN3065 core-prim . %ffi-call->char) (gN3064 core-prim . %ffi-call->int) (gN3063 core-prim . %ffi-lookup) (gN3062 core-prim . %ffi-open) (gN3061 core-prim . %fork) (gN3060 core-prim . %pipe) (gN305f core-prim . p) (gN305e core-prim . open-output-string) (gN305d core-prim . get-output-string) (gN305c core-prim . file-stat-ctime) (gN305b core-prim . file-stat-atime) (gN305a core-prim . file-stat-mtime) (gN3059 core-prim . file-size-in-bytes) (gN3058 core-prim . file-writable?) (gN3057 core-prim . file-executable?) (gN3056 core-prim . file-readable?) (gN3055 core-prim . file-regular?) (gN3054 core-prim . file-symbolic-link?) (gN3053 core-prim . file-directory?) (gN3052 core-prim . create-symbolic-link) (gN3051 core-prim . rename-file) (gN3050 core-prim . delete-directory) (gN304f core-prim . create-directory) (gN304e core-prim . create-mosh-cache-dir) (gN304d core-prim . get-environment-variables) (gN304c core-prim . current-exception-handler) (gN304b core-prim . get-environment-variable) (gN304a core-prim . join-wraps) (gN3049 core-prim . id->real-label) (gN3048 core-prim . same-marks?) (gN3047 core-prim . same-marks*?) (gN3046 core-prim . get-timeofday) (gN3045 core-prim . get-command-line) (gN3044 core-prim . sys-display) (gN3043 core-prim . whereis) (gN3042 core-prim . register) (gN3041 core-prim . vm-join!) (gN3040 core-prim . vm-set-value!) (gN303f core-prim . vm?) (gN303e core-prim . main-vm?) (gN303d core-prim . vm-eval) (gN303c core-prim . vm-self) (gN303b core-prim . vm-start!) (gN303a core-prim . make-vm) (gN3039 core-prim . mutex-try-lock!) (gN3038 core-prim . mutex-unlock!) (gN3037 core-prim . mutex-lock!) (gN3036 core-prim . mutex?) (gN3035 core-prim . make-mutex) (gN3034 core-prim . condition-variable-notify-all!) (gN3033 core-prim . condition-variable-notify!) (gN3032 core-prim . condition-variable-wait!) (gN3031 core-prim . make-condition-variable) (gN3030 core-prim . mosh-executable-path) (gN302f core-prim . make-file-options) (gN302e core-prim . source-info) (gN302d core-prim . make-compiler-instruction) (gN302c core-prim . make-instruction) (gN302b core-prim . set-source-info!) (gN302a core-prim . bignum?) (gN3029 core-prim . fast-equal?) (gN3028 core-prim . fasl-read) (gN3027 core-prim . fasl-write) (gN3026 core-prim . time-usage) (gN3025 core-prim . os-constant) (gN59a core-prim . make-parameter) (gN3024 core-prim . socket-port) (gN3023 core-prim . socket-shutdown) (gN3022 core-prim . socket-close) (gN3021 core-prim . socket-send) (gN3020 core-prim . socket-recv!) (gN301f core-prim . socket-recv) (gN301e core-prim . make-server-socket) (gN301d core-prim . make-client-socket) (gN301c core-prim . socket-accept) (gN301b core-prim . socket?) (gN301a core-prim . string-upcase) (gN3019 core-prim . string-titlecase) (gN3018 core-prim . string-normalize-nfkd) (gN3017 core-prim . string-normalize-nfkc) (gN3016 core-prim . string-normalize-nfd) (gN3015 core-prim . string-normalize-nfc) (gN3014 core-prim . string-foldcase) (gN3013 core-prim . string-downcase) (gN3012 core-prim . string-ci>?) (gN3011 core-prim . string-ci>=?) (gN3010 core-prim . string-ci=?) (gN300f core-prim . string-ci<?) (gN300e core-prim . string-ci<=?) (gN300d core-prim . char-whitespace?) (gN300c core-prim . char-upper-case?) (gN300b core-prim . char-title-case?) (gN300a core-prim . char-numeric?) (gN3009 core-prim . char-lower-case?) (gN3008 core-prim . char-general-category) (gN3007 core-prim . char-upcase) (gN3006 core-prim . char-titlecase) (gN3005 core-prim . char-foldcase) (gN3004 core-prim . char-downcase) (gN3003 core-prim . char-ci>?) (gN3002 core-prim . char-ci>=?) (gN3001 core-prim . char-ci=?) (gN3000 core-prim . char-ci<?) (gN2fff core-prim . char-ci<=?) (gN2ffe core-prim . char-alphabetic?) (gNb8e core-prim . make-variable-transformer) (gNe43 core-prim . identifier?) (gNe2f core-prim . generate-temporaries) (gNe31 core-prim . free-identifier=?) (gNe47 core-prim . syntax->datum) (gNe45 core-prim . datum->syntax) (gNe33 core-prim . bound-identifier=?) (gN2ffd core-prim . record-type-descriptor?) (gN2ffc core-prim . record-predicate) (gN2ffb core-prim . record-mutator) (gN2ffa core-prim . record-constructor) (gN2ff9 core-prim . record-accessor) (gN2ff8 core-prim . make-record-type-descriptor) (gN2ff7 core-prim . make-record-constructor-descriptor) (gN2ff6 core-prim . record?) (gN2ff5 core-prim . record-type-uid) (gN2ff4 core-prim . record-type-sealed?) (gN2ff3 core-prim . record-type-parent) (gN2ff2 core-prim . record-type-opaque?) (gN2ff1 core-prim . record-type-name) (gN2ff0 core-prim . record-type-generative?) (gN2fef core-prim . record-type-field-names) (gN2fee core-prim . record-rtd) (gN2fed core-prim . record-field-mutable?) (gN2fec core-prim . delete-file) (gN2feb core-prim . file-exists?) (gN2fea core-prim . vector-sort!) (gN2fe9 core-prim . vector-sort) (gN2fe8 core-prim . list-sort) (gN2fe7 core-prim . symbol-hash) (gN2fe6 core-prim . string-ci-hash) (gN2fe5 core-prim . string-hash) (gN2fe4 core-prim . equal-hash) (gN2fe3 core-prim . hashtable-equivalence-function) (gN2fe2 core-prim . make-hashtable) (gN2fe1 core-prim . hashtable-hash-function) (gN2fe0 core-prim . make-eqv-hashtable) (gN2fdf core-prim . make-eq-hashtable) (gN2fde core-prim . hashtable?) (gN2fdd core-prim . hashtable-update!) (gN2fdc core-prim . hashtable-size) (gN2fdb core-prim . hashtable-set!) (gN2fda core-prim . hashtable-ref) (gN2fd9 core-prim . hashtable-mutable?) (gN2fd8 core-prim . hashtable-keys) (gN2fd7 core-prim . hashtable-entries) (gN2fd6 core-prim . hashtable-delete!) (gN2fd5 core-prim . hashtable-copy) (gN2fd4 core-prim . hashtable-contains?) (gN2fd3 core-prim . hashtable-clear!) (gN2fd2 core-prim . call-with-output-file) (gN2fd1 core-prim . call-with-input-file) (gN2fd0 core-prim . write-char) (gN2fcf core-prim . write) (gN2fce core-prim . with-output-to-file) (gN2fcd core-prim . with-input-from-file) (gN2fcc core-prim . read-char) (gN2fcb core-prim . read) (gN2fca core-prim . peek-char) (gN2fc9 core-prim . open-output-file) (gN2fc8 core-prim . open-input-file) (gN2fc7 core-prim . newline) (gN2fc6 core-prim . display) (gN2fc5 core-prim . close-output-port) (gN2fc4 core-prim . close-input-port) (gN2fc3 core-prim . eof-object?) (gN2fc2 core-prim . eof-object) (gN2fc1 core-prim . current-error-port) (gN2fc0 core-prim . current-output-port) (gN2fbf core-prim . current-input-port) (gN2fbe core-prim . output-port?) (gN2fbd core-prim . input-port?) (gN2fbc core-prim . utf-8-codec) (gN2fbb core-prim . utf-16-codec) (gN2fba core-prim . transcoder-error-handling-mode) (gN2fb9 core-prim . transcoder-eol-style) (gN2fb8 core-prim . transcoder-codec) (gN2fb7 core-prim . transcoded-port) (gN2fb6 core-prim . textual-port?) (gN2fb5 core-prim . string->bytevector) (gN2fb4 core-prim . standard-output-port) (gN2fb3 core-prim . standard-input-port) (gN2fb2 core-prim . standard-error-port) (gN2fb1 core-prim . set-port-position!) (gN2fb0 core-prim . put-u8) (gN2faf core-prim . put-string) (gN2fae core-prim . put-datum) (gN2fad core-prim . put-char) (gN2fac core-prim . put-bytevector) (gN2fab core-prim . port?) (gN2faa core-prim . port-transcoder) (gN2fa9 core-prim . port-position) (gN2fa8 core-prim . port-has-set-port-position!?) (gN2fa7 core-prim . port-has-port-position?) (gN2fa6 core-prim . port-eof?) (gN2fa5 core-prim . output-port-buffer-mode) (gN2fa4 core-prim . open-string-output-port) (gN2fa3 core-prim . open-string-input-port) (gN2fa2 core-prim . open-file-output-port) (gN2fa1 core-prim . open-file-input/output-port) (gN2fa0 core-prim . open-file-input-port) (gN2f9f core-prim . open-bytevector-output-port) (gN2f9e core-prim . open-bytevector-input-port) (gN2f9d core-prim . native-transcoder) (gN2f9c core-prim . native-eol-style) (gN2f9b core-prim . make-transcoder) (gN2f9a core-prim . latin-1-codec) (gN2a25 core-prim . make-i/o-write-error) (gN2a10 core-prim . make-i/o-read-error) (gN2ac6 core-prim . make-i/o-port-error) (gN2a3c core-prim . make-i/o-invalid-position-error) (gN2a57 core-prim . make-i/o-filename-error) (gN2a70 core-prim . make-i/o-file-protection-error) (gN2a85 core-prim . make-i/o-file-is-read-only-error) (gN2aaf core-prim . make-i/o-file-does-not-exist-error) (gN2a9a core-prim . make-i/o-file-already-exists-error) (gN29fb core-prim . make-i/o-error) (gN2af6 core-prim . make-i/o-encoding-error) (gN2adf core-prim . make-i/o-decoding-error) (gN2f99 core-prim . make-custom-textual-output-port) (gN2f98 core-prim . make-custom-textual-input/output-port) (gN2f97 core-prim . make-custom-textual-input-port) (gN2f96 core-prim . make-custom-binary-output-port) (gN2f95 core-prim . make-custom-binary-input/output-port) (gN2f94 core-prim . make-custom-binary-input-port) (gN2f93 core-prim . make-bytevector) (gN2f92 core-prim . lookahead-u8) (gN2f91 core-prim . lookahead-char) (gN2a27 core-prim . i/o-write-error?) (gN2a12 core-prim . i/o-read-error?) (gN2aca core-prim . i/o-port-error?) (gN2a40 core-prim . i/o-invalid-position-error?) (gN2a5b core-prim . i/o-filename-error?) (gN2a72 core-prim . i/o-file-protection-error?) (gN2a87 core-prim . i/o-file-is-read-only-error?) (gN2ab1 core-prim . i/o-file-does-not-exist-error?) (gN2a9c core-prim . i/o-file-already-exists-error?) (gN29fd core-prim . i/o-error?) (gN2a42 core-prim . i/o-error-position) (gN2acc core-prim . i/o-error-port) (gN2a5d core-prim . i/o-error-filename) (gN2afa core-prim . i/o-encoding-error?) (gN2afc core-prim . i/o-encoding-error-char) (gN2ae1 core-prim . i/o-decoding-error?) (gN2f90 core-prim . get-u8) (gN2f8f core-prim . get-string-n!) (gN2f8e core-prim . get-string-n) (gN2f8d core-prim . get-string-all) (gN2f8c core-prim . get-line) (gN2f8b core-prim . get-datum) (gN2f8a core-prim . get-char) (gN2f89 core-prim . get-bytevector-some) (gN2f88 core-prim . get-bytevector-n!) (gN2f87 core-prim . get-bytevector-n) (gN2f86 core-prim . get-bytevector-all) (gN2f85 core-prim . flush-output-port) (gN2f84 core-prim . close-port) (gNe1d core-prim . scheme-report-environment) (gN2f83 core-prim . quotient) (gNe1b core-prim . null-environment) (gN2f82 core-prim . remainder) (gN2f81 core-prim . modulo) (gN2f80 core-prim . inexact->exact) (gN2f7f core-prim . force) (gN2f7e core-prim . exact->inexact) (gN2f7d core-prim . make-promise) (gN2f7c core-prim . exit) (gN2c35 core-prim . command-line) (gN2f7b core-prim . string-fill!) (gN2f7a core-prim . string-set!) (gN2f79 core-prim . set-cdr!) (gN2f78 core-prim . set-car!) (gN2f77 core-prim . remove) (gN2f76 core-prim . remv) (gN2f75 core-prim . remp) (gN2f74 core-prim . remq) (gN2f73 core-prim . partition) (gN2f72 core-prim . memv) (gN2f71 core-prim . memq) (gN2f70 core-prim . memp) (gN2f6f core-prim . member) (gN2f6e core-prim . exists) (gN2f6d core-prim . for-all) (gN2f6c core-prim . fold-right) (gN2f6b core-prim . fold-left) (gN2f6a core-prim . find) (gN2f69 core-prim . filter) (gN2f68 core-prim . cons*) (gN2f67 core-prim . assv) (gN2f66 core-prim . assq) (gN2f65 core-prim . assp) (gN2f64 core-prim . assoc) (gN2f63 core-prim . call-with-string-output-port) (gN2f62 core-prim . call-with-port) (gN2f61 core-prim . call-with-bytevector-output-port) (gN2f60 core-prim . bytevector->string) (gN2f5f core-prim . buffer-mode?) (gN2f5e core-prim . binary-port?) (gN2f5d core-prim . with-exception-handler) (gN2f5c core-prim . raise-continuable) (gN2f5b core-prim . raise) (gNe21 core-prim . eval) (gNe19 core-prim . environment) (gN2f5a core-prim . make-enumeration) (gN2f59 core-prim . enum-set=?) (gN2f58 core-prim . enum-set-universe) (gN2f57 core-prim . enum-set-union) (gN2f56 core-prim . enum-set-subset?) (gN2f55 core-prim . enum-set-projection) (gN2f54 core-prim . enum-set-member?) (gN2f53 core-prim . enum-set-intersection) (gN2f52 core-prim . enum-set-indexer) (gN2f51 core-prim . enum-set-difference) (gN2f50 core-prim . enum-set-constructor) (gN2f4f core-prim . enum-set-complement) (gN2f4e core-prim . enum-set->list) (gN2971 core-prim . who-condition?) (gN28e9 core-prim . warning?) (gN2928 core-prim . violation?) (gN29e8 core-prim . undefined-violation?) (gN29cf core-prim . syntax-violation?) (gN29d3 core-prim . syntax-violation-subform) (gN29d1 core-prim . syntax-violation-form) (gNe41 core-prim . syntax-violation) (gN2f4d core-prim . simple-conditions) (gN28fe core-prim . serious-condition?) (gN2988 core-prim . non-continuable-violation?) (gN28d2 core-prim . message-condition?) (gN296d core-prim . make-who-condition) (gN28e7 core-prim . make-warning) (gN2926 core-prim . make-violation) (gN29e6 core-prim . make-undefined-violation) (gN29c9 core-prim . make-syntax-violation) (gN28fc core-prim . make-serious-condition) (gN2986 core-prim . make-non-continuable-violation) (gN28ce core-prim . make-message-condition) (gN29b0 core-prim . make-lexical-violation) (gN2952 core-prim . make-irritants-condition) (gN299b core-prim . make-implementation-restriction-violation) (gN2911 core-prim . make-error) (gN293b core-prim . make-assertion-violation) (gN29b2 core-prim . lexical-violation?) (gN2956 core-prim . irritants-condition?) (gN299d core-prim . implementation-restriction-violation?) (gN2913 core-prim . error?) (gN2973 core-prim . condition-who) (gN2f4c core-prim . condition-predicate) (gN28d4 core-prim . condition-message) (gN2958 core-prim . condition-irritants) (gN2f4b core-prim . condition-accessor) (gN2f4a core-prim . condition) (gN293d core-prim . assertion-violation?) (gN2f49 core-prim . condition?) (gN2f48 core-prim . utf32->string) (gN2f47 core-prim . utf16->string) (gN2f46 core-prim . utf8->string) (gN2f45 core-prim . uint-list->bytevector) (gN2f44 core-prim . u8-list->bytevector) (gN2f43 core-prim . string->utf8) (gN2f42 core-prim . string->utf32) (gN2f41 core-prim . string->utf16) (gN2f40 core-prim . sint-list->bytevector) (gN2f3f core-prim . native-endianness) (gN2f3e core-prim . bytevector?) (gN2f3d core-prim . bytevector=?) (gN2f3c core-prim . bytevector-uint-set!) (gN2f3b core-prim . bytevector-uint-ref) (gN2f3a core-prim . bytevector-u8-set!) (gN2f39 core-prim . bytevector-u8-ref) (gN2f38 core-prim . bytevector-u64-set!) (gN2f37 core-prim . bytevector-u64-ref) (gN2f36 core-prim . bytevector-u64-native-set!) (gN2f35 core-prim . bytevector-u64-native-ref) (gN2f34 core-prim . bytevector-u32-set!) (gN2f33 core-prim . bytevector-u32-ref) (gN2f32 core-prim . bytevector-u32-native-set!) (gN2f31 core-prim . bytevector-u32-native-ref) (gN2f30 core-prim . bytevector-u16-set!) (gN2f2f core-prim . bytevector-u16-ref) (gN2f2e core-prim . bytevector-u16-native-set!) (gN2f2d core-prim . bytevector-u16-native-ref) (gN2f2c core-prim . bytevector-sint-set!) (gN2f2b core-prim . bytevector-sint-ref) (gN2f2a core-prim . bytevector-s8-set!) (gN2f29 core-prim . bytevector-s8-ref) (gN2f28 core-prim . bytevector-s64-set!) (gN2f27 core-prim . bytevector-s64-ref) (gN2f26 core-prim . bytevector-s64-native-set!) (gN2f25 core-prim . bytevector-s64-native-ref) (gN2f24 core-prim . bytevector-s32-set!) (gN2f23 core-prim . bytevector-s32-ref) (gN2f22 core-prim . bytevector-s32-native-set!) (gN2f21 core-prim . bytevector-s32-native-ref) (gN2f20 core-prim . bytevector-s16-set!) (gN2f1f core-prim . bytevector-s16-ref) (gN2f1e core-prim . bytevector-s16-native-set!) (gN2f1d core-prim . bytevector-s16-native-ref) (gN2f1c core-prim . bytevector-length) (gN2f1b core-prim . bytevector-ieee-single-ref) (gN2f1a core-prim . bytevector-ieee-single-set!) (gN2f19 core-prim . bytevector-ieee-single-native-set!) (gN2f18 core-prim . bytevector-ieee-single-native-ref) (gN2f17 core-prim . bytevector-ieee-double-set!) (gN2f16 core-prim . bytevector-ieee-double-ref) (gN2f15 core-prim . bytevector-ieee-double-native-set!) (gN2f14 core-prim . bytevector-ieee-double-native-ref) (gN2f13 core-prim . bytevector-fill!) (gN2f12 core-prim . bytevector-copy!) (gN2f11 core-prim . bytevector-copy) (gN2f10 core-prim . bytevector->uint-list) (gN2f0f core-prim . bytevector->u8-list) (gN2f0e core-prim . bytevector->sint-list) (gN2b26 core-prim . no-nans-violation?) (gN2b11 core-prim . no-infinities-violation?) (gN2b24 core-prim . make-no-nans-violation) (gN2b0f core-prim . make-no-infinities-violation) (gN2f0d core-prim . real->flonum) (gN2f0c core-prim . flzero?) (gN2f0b core-prim . fltruncate) (gN2f0a core-prim . fltan) (gN2f09 core-prim . flsqrt) (gN2f08 core-prim . flsin) (gN2f07 core-prim . flround) (gN2f06 core-prim . flpositive?) (gN2f05 core-prim . flonum?) (gN2f04 core-prim . flodd?) (gN2f03 core-prim . flnumerator) (gN2f02 core-prim . flnegative?) (gN2f01 core-prim . flnan?) (gN2f00 core-prim . flmod0) (gN2eff core-prim . flmod) (gN2efe core-prim . flmin) (gN2efd core-prim . flmax) (gN2efc core-prim . fllog) (gN2efb core-prim . flinteger?) (gN2efa core-prim . flinfinite?) (gN2ef9 core-prim . flfloor) (gN2ef8 core-prim . flfinite?) (gN2ef7 core-prim . flexpt) (gN2ef6 core-prim . flexp) (gN2ef5 core-prim . fleven?) (gN2ef4 core-prim . fldiv0-and-mod0) (gN2ef3 core-prim . fldiv0) (gN2ef2 core-prim . fldiv-and-mod) (gN2ef1 core-prim . fldiv) (gN2ef0 core-prim . fldenominator) (gN2eef core-prim . flcos) (gN2eee core-prim . flceiling) (gN2eed core-prim . flatan) (gN2eec core-prim . flasin) (gN2eeb core-prim . flacos) (gN2eea core-prim . flabs) (gN2ee9 core-prim . fl>?) (gN2ee8 core-prim . fl>=?) (gN2ee7 core-prim . fl=?) (gN2ee6 core-prim . fl<?) (gN2ee5 core-prim . fl<=?) (gN2ee4 core-prim . fl/) (gN2ee3 core-prim . fl-) (gN2ee2 core-prim . fl+) (gN2ee1 core-prim . fl*) (gN2ee0 core-prim . fixnum->flonum) (gN2edf core-prim . fxzero?) (gN2ede core-prim . fxxor) (gN2edd core-prim . fxrotate-bit-field) (gN2edc core-prim . fxreverse-bit-field) (gN2edb core-prim . fxpositive?) (gN2eda core-prim . fxodd?) (gN2ed9 core-prim . fxnot) (gN2ed8 core-prim . fxnegative?) (gN2ed7 core-prim . fxmod0) (gN2ed6 core-prim . fxmod) (gN2ed5 core-prim . fxmin) (gN2ed4 core-prim . fxmax) (gN2ed3 core-prim . fxlength) (gN2ed2 core-prim . fxior) (gN2ed1 core-prim . fxif) (gN2ed0 core-prim . fxfirst-bit-set) (gN2ecf core-prim . fxeven?) (gN2ece core-prim . fxdiv0-and-mod0) (gN2ecd core-prim . fxdiv0) (gN2ecc core-prim . fxdiv-and-mod) (gN2ecb core-prim . fxdiv) (gN2eca core-prim . fxcopy-bit-field) (gN2ec9 core-prim . fxcopy-bit) (gN2ec8 core-prim . fxbit-set?) (gN2ec7 core-prim . fxbit-field) (gN2ec6 core-prim . fxbit-count) (gN2ec5 core-prim . fxarithmetic-shift-right) (gN2ec4 core-prim . fxarithmetic-shift-left) (gN2ec3 core-prim . fxarithmetic-shift) (gN2ec2 core-prim . fxand) (gN2ec1 core-prim . fx>?) (gN2ec0 core-prim . fx>=?) (gN2ebf core-prim . fx=?) (gN2ebe core-prim . fx<?) (gN2ebd core-prim . fx<=?) (gN2ebc core-prim . fx-/carry) (gN2ebb core-prim . fx-) (gN2eba core-prim . fx+/carry) (gN2eb9 core-prim . fx+) (gN2eb8 core-prim . fx*/carry) (gN2eb7 core-prim . fx*) (gN2eb6 core-prim . greatest-fixnum) (gN2eb5 core-prim . least-fixnum) (gN2eb4 core-prim . fixnum-width) (gN2eb3 core-prim . fixnum?) (gN2eb2 core-prim . bitwise-rotate-bit-field) (gN2eb1 core-prim . bitwise-reverse-bit-field) (gN2eb0 core-prim . bitwise-length) (gN2eaf core-prim . bitwise-if) (gN2eae core-prim . bitwise-first-bit-set) (gN2ead core-prim . bitwise-copy-bit-field) (gN2eac core-prim . bitwise-copy-bit) (gN2eab core-prim . bitwise-bit-set?) (gN2eaa core-prim . bitwise-bit-field) (gN2ea9 core-prim . bitwise-bit-count) (gN2ea8 core-prim . bitwise-xor) (gN2ea7 core-prim . bitwise-ior) (gN2ea6 core-prim . bitwise-and) (gN2ea5 core-prim . bitwise-not) (gN2ea4 core-prim . bitwise-arithmetic-shift-right) (gN2ea3 core-prim . bitwise-arithmetic-shift-left) (gN2ea2 core-prim . bitwise-arithmetic-shift) (gN2ea1 core-prim . zero?) (gN2ea0 core-prim . vector?) (gN2e9f core-prim . vector-set!) (gN2e9e core-prim . vector-ref) (gN2e9d core-prim . vector-map) (gN2e9c core-prim . vector-length) (gN2e9b core-prim . vector-for-each) (gN2e9a core-prim . vector-fill!) (gN2e99 core-prim . vector->list) (gN2e98 core-prim . vector) (gN2e97 core-prim . values) (gN2e96 core-prim . truncate) (gN2e95 core-prim . tan) (gN2e94 core-prim . symbol?) (gN2e93 core-prim . symbol=?) (gN2e92 core-prim . symbol->string) (gN2e91 core-prim . substring) (gN2e90 core-prim . string?) (gN2e8f core-prim . string>?) (gN2e8e core-prim . string>=?) (gN2e8d core-prim . string=?) (gN2e8c core-prim . string<?) (gN2e8b core-prim . string<=?) (gN2e8a core-prim . string-ref) (gN2e89 core-prim . string-length) (gN2e88 core-prim . string-for-each) (gN2e87 core-prim . string-copy) (gN2e86 core-prim . string-append) (gN2e85 core-prim . string->symbol) (gN2e84 core-prim . string->number) (gN2e83 core-prim . string->list) (gN2e82 core-prim . string) (gN2e81 core-prim . sqrt) (gN2e80 core-prim . sin) (gN2e7f core-prim . round) (gN2e7e core-prim . reverse) (gN2e7d core-prim . real?) (gN2e7c core-prim . real-valued?) (gN2e7b core-prim . real-part) (gN2e7a core-prim . rationalize) (gN2e79 core-prim . rational?) (gN2e78 core-prim . rational-valued?) (gN2e77 core-prim . procedure?) (gN2e76 core-prim . positive?) (gN2e75 core-prim . pair?) (gN2e74 core-prim . odd?) (gN2e73 core-prim . numerator) (gN2e72 core-prim . number?) (gN2e71 core-prim . number->string) (gN2e70 core-prim . null?) (gN2e6f core-prim . not) (gN2e6e core-prim . negative?) (gN2e6d core-prim . nan?) (gN2e6c core-prim . min) (gN2e6b core-prim . max) (gN2e6a core-prim . map) (gN2e69 core-prim . make-vector) (gN2e68 core-prim . make-string) (gN2e67 core-prim . make-rectangular) (gN2e66 core-prim . make-polar) (gN2e65 core-prim . magnitude) (gN2e64 core-prim . log) (gN2e63 core-prim . list?) (gN2e62 core-prim . list-tail) (gN2e61 core-prim . list-ref) (gN2e60 core-prim . list->vector) (gN2e5f core-prim . list->string) (gN2e5e core-prim . list) (gN2e5d core-prim . length) (gN2e5c core-prim . lcm) (gN2e5b core-prim . integer?) (gN2e5a core-prim . integer-valued?) (gN2e59 core-prim . integer->char) (gN2e58 core-prim . infinite?) (gN2e57 core-prim . inexact?) (gN2e56 core-prim . inexact) (gN2e55 core-prim . imag-part) (gN2e54 core-prim . gcd) (gN2e53 core-prim . for-each) (gN2e52 core-prim . floor) (gN2e51 core-prim . finite?) (gN2e50 core-prim . expt) (gN2e4f core-prim . exp) (gN2e4e core-prim . exact?) (gN2e4d core-prim . exact-integer-sqrt) (gN2e4c core-prim . exact) (gN2e4b core-prim . even?) (gN2e4a core-prim . error) (gN2e49 core-prim . eqv?) (gN2e48 core-prim . equal?) (gN2e47 core-prim . eq?) (gN2e46 core-prim . dynamic-wind) (gN2e45 core-prim . div0-and-mod0) (gN2e44 core-prim . mod0) (gN2e43 core-prim . div0) (gN2e42 core-prim . div-and-mod) (gN2e41 core-prim . mod) (gN2e40 core-prim . div) (gN2e3f core-prim . denominator) (gN2e3e core-prim . cos) (gN2e3d core-prim . cons) (gN2e3c core-prim . complex?) (gN2e3b core-prim . char?) (gN2e3a core-prim . char>?) (gN2e39 core-prim . char>=?) (gN2e38 core-prim . char=?) (gN2e37 core-prim . char<?) (gN2e36 core-prim . char<=?) (gN2e35 core-prim . char->integer) (gN2e34 core-prim . ceiling) (gN2e33 core-prim . call-with-values) (gN2e32 core-prim . call/cc) (gN2e31 core-prim . call-with-current-continuation) (gN2e30 core-prim . cddddr) (gN2e2f core-prim . cdddar) (gN2e2e core-prim . cddadr) (gN2e2d core-prim . cddaar) (gN2e2c core-prim . cdaddr) (gN2e2b core-prim . cdadar) (gN2e2a core-prim . cdaadr) (gN2e29 core-prim . cdaaar) (gN2e28 core-prim . cadddr) (gN2e27 core-prim . caddar) (gN2e26 core-prim . cadadr) (gN2e25 core-prim . cadaar) (gN2e24 core-prim . caaddr) (gN2e23 core-prim . caadar) (gN2e22 core-prim . caaadr) (gN2e21 core-prim . caaaar) (gN2e20 core-prim . cdddr) (gN2e1f core-prim . cddar) (gN2e1e core-prim . cdadr) (gN2e1d core-prim . cdaar) (gN2e1c core-prim . caddr) (gN2e1b core-prim . cadar) (gN2e1a core-prim . caadr) (gN2e19 core-prim . caaar) (gN2e18 core-prim . cddr) (gN2e17 core-prim . cdar) (gN2e16 core-prim . cadr) (gN2e15 core-prim . caar) (gN2e14 core-prim . cdr) (gN2e13 core-prim . car) (gN2e12 core-prim . boolean?) (gN2e11 core-prim . boolean=?) (gN2e10 core-prim . atan) (gN2e0f core-prim . assertion-violation) (gNe3b core-prim . assertion-error) (gN2e0e core-prim . asin) (gN2e0d core-prim . apply) (gN2e0c core-prim . append) (gN2e0b core-prim . angle) (gN2e0a core-prim . acos) (gN2e09 core-prim . abs) (gN2e08 core-prim . /) (gN2e07 core-prim . *) (gN2e06 core-prim . -) (gN2e05 core-prim . +) (gN2e04 core-prim . >=) (gN2e03 core-prim . >) (gN2e02 core-prim . =) (gN2e01 core-prim . <=) (gN2e00 core-prim . <) (gN2dff core-prim . library) (gN2dfe $core-rtd &no-nans-rtd &no-nans-rcd) (gN2dfd $core-rtd &no-infinities-rtd &no-infinities-rcd) (gN2dfc $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (gN2dfb $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (gN2dfa $core-rtd &i/o-port-rtd &i/o-port-rcd) (gN2df9 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (gN2df8 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (gN2df7 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (gN2df6 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (gN2df5 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (gN2df4 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (gN2df3 $core-rtd &i/o-write-rtd &i/o-write-rcd) (gN2df2 $core-rtd &i/o-read-rtd &i/o-read-rcd) (gN2df1 $core-rtd &i/o-rtd &i/o-rcd) (gN2df0 $core-rtd &undefined-rtd &undefined-rcd) (gN2def $core-rtd &syntax-rtd &syntax-rcd) (gN2dee $core-rtd &lexical-rtd &lexical-rcd) (gN2ded $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (gN2dec $core-rtd &non-continuable-rtd &non-continuable-rcd) (gN2deb $core-rtd &who-rtd &who-rcd) (gN2dea $core-rtd &irritants-rtd &irritants-rcd) (gN2de9 $core-rtd &assertion-rtd &assertion-rcd) (gN2de8 $core-rtd &violation-rtd &violation-rcd) (gN2de7 $core-rtd &error-rtd &error-rcd) (gN2de6 $core-rtd &serious-rtd &serious-rcd) (gN2de5 $core-rtd &warning-rtd &warning-rcd) (gN2de4 $core-rtd &message-rtd &message-rcd) (gN2de3 $core-rtd &condition-rtd &condition-rcd) (gN2de2 macro . define-condition-type) (gN2de1 macro . define-enumeration) (gN2de0 macro . define-record-type) (gN2ddf macro . parent-rtd) (gN2dde macro . nongenerative) (gN2ddd macro . opaque) (gN2ddc macro . sealed) (gN2ddb macro . protocol) (gN2dda macro . parent) (gN2dd9 macro . immutable) (gN2dd8 macro . mutable) (gN2dd7 macro . fields) (gN2dd6 macro . error-handling-mode) (gN2dd5 macro . file-options) (gN2dd4 macro . buffer-mode) (gN2dd3 macro . eol-style) (gN2dd2 macro . guard) (gN2dd1 macro . trace-define) (gN2dd0 macro . trace-lambda) (gN2dcf macro . unsyntax-splicing) (gN2dce macro . unsyntax) (gN2dcd macro . unquote-splicing) (gN2dcc macro . unquote) (gN2dcb macro . _) (gN2dca macro . else) (gN2dc9 macro . =>) (gN2dc8 macro . ...) (gN2dc7 macro . assert) (gN2dc6 macro . endianness) (gN2dc5 macro . delay) (gN2dc4 macro . time) (gN2dc3 macro . do) (gN2dc2 macro . cond) (gN2dc1 macro . let*) (gN2dc0 macro . let) (gN2dbf macro . let*-values) (gN2dbe macro . let-values) (gN2dbd macro . identifier-syntax) (gN2dbc macro . with-syntax) (gN2dbb macro . quasisyntax) (gN2dba macro . quasiquote) (gN2db9 macro . syntax-rules) (gN2db8 macro . include) (gN2db7 macro . define-struct) (gN2db6 core-macro . record-constructor-descriptor) (gN2db5 core-macro . record-type-descriptor) (gN2db4 macro . case) (gN2db3 macro . parameterize) (gN2db2 macro . unless) (gN2db1 macro . when) (gN2db0 core-macro . or) (gN2daf core-macro . and) (gN2dae core-macro . if) (gN2dad core-macro . letrec*) (gN2dac core-macro . letrec) (gN2dab core-macro . type-descriptor) (gN2daa core-macro . case-lambda) (gN2da9 core-macro . lambda) (gN2da8 core-macro . syntax) (gN2da7 core-macro . syntax-case) (gN2da6 core-macro . quote) (gN2da5 core-macro . foreign-call) (gN2da4 letrec-syntax) (gN2da3 let-syntax) (gN2da2 set!) (gN2da1 import) (gN2da0 begin) (gN2d9f module) (gN2d9e define-syntax) (gN2d9d define)) values values '#f '#f '#f '#f) (gN986@gN7d2@install-library 'gN30e4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . gN30c3) (eval-core . gN30c2) (set-symbol-value! . gN30c1) (symbol-value . gN30c0) (gensym . gN30bf) (void . gN30be)) '() values values '#f '#f '#f '#f) (gN986@gN7d2@install-library 'gN30e5 '(mosh) '() '() '() '() '((set-symbol-value! . gN30c1) (symbol-value . gN30c0) (regexp? . gN30bc) (read-line . gN30bb) (ungensym . gN30b9) (alist->eq-hash-table . gN30b8) (assoc-ref . gN30b7) (print . gN30b6) (format . gN30b5) (host-os . gN30b4) (library-path . gN7b1) (standard-library-path . gN30b3) (file-newer? . gN30b2) (stat-mtime . gN30b1) (digit->integer . gN30ad) (call-with-string-input-port . gN30ac) (call-with-string-io . gN30ab) (string-split . gN30aa) (bytevector-for-each . gN30a9) (string->regexp . gN30a8) (rxmatch . gN30a7) (regexp-replace-all . gN30a6) (hashtable-for-each . gN30a5) (set-current-directory! . gN30a0) (expand-path . gN309f) (current-directory . gN309e) (p . gN305f) (get-timeofday . gN3046) (get-command-line . gN3045) (sys-display . gN3044) (whereis . gN3043) (register . gN3042) (vm-join! . gN3041) (vm-set-value! . gN3040) (vm? . gN303f) (main-vm? . gN303e) (vm-eval . gN303d) (vm-self . gN303c) (vm-start! . gN303b) (make-vm . gN303a) (mutex-try-lock! . gN3039) (mutex-unlock! . gN3038) (mutex-lock! . gN3037) (mutex? . gN3036) (make-mutex . gN3035) (condition-variable-notify-all! . gN3034) (condition-variable-notify! . gN3033) (condition-variable-wait! . gN3032) (make-condition-variable . gN3031) (mosh-executable-path . gN3030) (make-file-options . gN302f) (source-info . gN302e) (make-compiler-instruction . gN302d) (make-instruction . gN302c) (set-source-info! . gN302b) (bignum? . gN302a) (fast-equal? . gN3029) (fasl-read . gN3028) (fasl-write . gN3027) (time-usage . gN3026) (os-constant . gN3025) (time . gN2dc4) (include . gN2db8)) '() values values '#f '#f '#f '#f) (gN986@gN7d2@install-library 'gN30e6 '(system) '() '() '() '() '((gensym-prefix-set! . gN30ba) (write-to-file . gN30b0) (file->list . gN30af) (file->string . gN30ae) (mosh-cache-dir . gN59c) (call-process . gN30a4) (local-tz-offset . gN30a3) (microseconds . gN30a2) (directory-list . gN30a1) (expand-path . gN309f) (%spawn . gN309d) (%waitpid . gN309c) (simple-struct-name . gN309b) (simple-struct-set! . gN309a) (simple-struct-ref . gN3099) (make-simple-struct . gN3098) (simple-struct? . gN3097) (pointer-ref-c-int64 . gN3096) (pointer-ref-c-int32 . gN3095) (pointer-ref-c-int16 . gN3094) (pointer-ref-c-int8 . gN3093) (pointer-ref-c-uint64 . gN3092) (pointer-ref-c-uint32 . gN3091) (pointer-ref-c-uint16 . gN3090) (pointer-ref-c-uint8 . gN308f) (pointer-set-c-uint64! . gN308e) (pointer-set-c-uint32! . gN308d) (pointer-set-c-uint16! . gN308c) (pointer-set-c-uint8! . gN308b) (pointer-set-c-int64! . gN308a) (pointer-set-c-int32! . gN3089) (pointer-set-c-int16! . gN3088) (pointer-set-c-int8! . gN3087) (pointer-set-c-pointer! . gN3086) (pointer-set-c-double! . gN3085) (pointer-set-c-float! . gN3084) (pointer-set-c-long-long! . gN3083) (pointer-set-c-long! . gN3082) (pointer-set-c-int! . gN3081) (pointer-set-c-short! . gN3080) (pointer-set-c-char! . gN307f) (pointer-ref-c-pointer . gN307e) (pointer-ref-c-double . gN307d) (pointer-ref-c-float . gN307c) (pointer-ref-c-unsigned-long-long . gN307b) (pointer-ref-c-signed-long-long . gN307a) (pointer-ref-c-unsigned-long . gN3079) (pointer-ref-c-signed-long . gN3078) (pointer-ref-c-unsigned-int . gN3077) (pointer-ref-c-signed-int . gN3076) (pointer-ref-c-unsigned-short . gN3075) (pointer-ref-c-signed-short . gN3074) (pointer-ref-c-unsigned-char . gN3073) (pointer-ref-c-signed-char . gN3072) (pointer->integer . gN3071) (integer->pointer . gN3070) (pointer? . gN306f) (shared-errno . gN306e) (%ffi-free . gN306d) (%ffi-malloc . gN306c) (%ffi-supported? . gN306b) (%ffi-pointer->string . gN306a) (%ffi-call->string-or-zero . gN3069) (%ffi-call->double . gN3068) (%ffi-call->void* . gN3067) (%ffi-call->void . gN3066) (%ffi-call->char . gN3065) (%ffi-call->int . gN3064) (%ffi-lookup . gN3063) (%ffi-open . gN3062) (%fork . gN3061) (%pipe . gN3060) (open-output-string . gN305e) (get-output-string . gN305d) (file-stat-ctime . gN305c) (file-stat-atime . gN305b) (file-stat-mtime . gN305a) (file-size-in-bytes . gN3059) (file-writable? . gN3058) (file-executable? . gN3057) (file-readable? . gN3056) (file-regular? . gN3055) (file-symbolic-link? . gN3054) (file-directory? . gN3053) (create-symbolic-link . gN3052) (rename-file . gN3051) (delete-directory . gN3050) (create-directory . gN304f) (create-mosh-cache-dir . gN304e) (get-environment-variables . gN304d) (current-exception-handler . gN304c) (get-environment-variable . gN304b) (join-wraps . gN304a) (id->real-label . gN3049) (same-marks? . gN3048) (same-marks*? . gN3047) (make-parameter . gN59a) (socket-port . gN3024) (socket-shutdown . gN3023) (socket-close . gN3022) (socket-send . gN3021) (socket-recv! . gN3020) (socket-recv . gN301f) (make-server-socket . gN301e) (make-client-socket . gN301d) (socket-accept . gN301c) (socket? . gN301b) (parameterize . gN2db3)) '() values values '#f '#f '#f '#f))
((lambda (gN2c20@ref gN2c22@x* gN2c24@add-library-path! gN2c26@parse-and-add-library-path gN2c28@for-each-with-index gN2c2a@rpad gN2c2c@condition-printer gN2c2e@record->field-alist gN2c30@map-with-index gN2c32@repl gN2c34@trace-printer gN2c36@command-line gN2c38@local-library-path gN2c3a@load/args gN2c3c@load gN2c3e@ironscheme-build gN2c40@eval-top-level gN2c42@compile-system-libraries gN2c44@compile gN2c46@compile->closure gN2c48@pre-compile-r6rs-file gN2c4a@load-r6rs-top-level gN2c4c@load-r6rs-top-level-sexp gN2c4e@prefix-inc gN2c50@prefix-inc!) (begin (set! gN2c20@ref (lambda (gN2c8b@rtd gN2c8c@i gN2c8d@x) ((lambda (gN2c91@val) (if (symbol? gN2c91@val) (ungensym gN2c91@val) gN2c91@val)) ((record-accessor gN2c8b@rtd gN2c8c@i) gN2c8d@x)))) (set! gN2c22@x* '()) (set! gN2c24@add-library-path! (lambda (gN2c93@path) (gN976@gN7b2@library-path (append (gN976@gN7b2@library-path) (list gN2c93@path))))) (set! gN2c26@parse-and-add-library-path (lambda (gN2c95@paths gN2c96@message) ((lambda (gN2c9a@separator) (begin (set! gN2c9a@separator (if (string=? (host-os) '"win32") '#\; '#\:)) ((lambda (gN2c9b@t) (if gN2c9b@t ((lambda (gN2c9d@paths) (for-each (lambda (gN2c9f@path) (if (file-exists? gN2c9f@path) (gN2c24@add-library-path! (expand-path gN2c9f@path)) (format (current-error-port) gN2c96@message gN2c9f@path))) (string-split gN2c9d@paths gN2c9a@separator))) gN2c9b@t) (void))) gN2c95@paths))) '#f))) (set! gN2c28@for-each-with-index (lambda (gN2ca1@proc gN2ca2@lst) (letrec ((gN2ca5@loop (lambda (gN2ca7@i gN2ca8@lst) (if (null? gN2ca8@lst) (if '#f '#f (void)) (begin (gN2ca1@proc gN2ca7@i (car gN2ca8@lst)) (gN2ca5@loop (+ gN2ca7@i '1) (cdr gN2ca8@lst))))))) (gN2ca5@loop '1 gN2ca2@lst)))) (set! gN2c2a@rpad (lambda (gN2cab@str gN2cac@pad gN2cad@n) ((lambda (gN2cb1@rest) ((letrec ((gN2cb3@loop (lambda (gN2cb5@rest gN2cb6@ret) (if (<= gN2cb5@rest '0) gN2cb6@ret (gN2cb3@loop (- gN2cb5@rest '1) (string-append gN2cb6@ret gN2cac@pad)))))) gN2cb3@loop) gN2cb1@rest (format '"~a" gN2cab@str))) (- gN2cad@n (string-length (format '"~a" gN2cab@str)))))) (set! gN2c2c@condition-printer (lambda (gN2cb9@e gN2cba@port) ((lambda (gN2cbe@max-condition-len) (begin (set! gN2cbe@max-condition-len (apply max (map (lambda (gN2ccf@c) (string-length (symbol->string (record-type-name (record-rtd gN2ccf@c))))) (simple-conditions gN2cb9@e)))) (begin (display '" Condition components:\n" gN2cba@port) (gN2c28@for-each-with-index (lambda (gN2cbf@i gN2cc0@x) ((lambda (gN2cc3@rtd gN2cc4@fields-alist) (begin (format gN2cba@port '" ~d. ~a" gN2cbf@i (gN2c2a@rpad (symbol->string (record-type-name gN2cc3@rtd)) '" " gN2cbe@max-condition-len)) (if (null? gN2cc4@fields-alist) (newline gN2cba@port) (void)) ((letrec ((gN2cc7@loop (lambda (gN2cc9@first gN2cca@fields-alist) (if (null? gN2cca@fields-alist) '() ((lambda (gN2ccd@field) (begin (if (not gN2cc9@first) (display (gN2c2a@rpad '"" '" " (+ '4 gN2cbe@max-condition-len)) gN2cba@port) (void)) (display '"       " gN2cba@port) (display (car gN2ccd@field) gN2cba@port) (display '": " gN2cba@port) (write (cdr gN2ccd@field) gN2cba@port) (newline gN2cba@port) (gN2cc7@loop '#f (cdr gN2cca@fields-alist)))) (car gN2cca@fields-alist)))))) gN2cc7@loop) '#t gN2cc4@fields-alist))) (record-rtd gN2cc0@x) (gN2c2e@record->field-alist gN2cc0@x))) (simple-conditions gN2cb9@e))))) '#f))) (set! gN2c2e@record->field-alist (lambda (gN2cd1@r) ((lambda (gN2cd4@ref) (begin (set! gN2cd4@ref (lambda (gN2cdf@rtd gN2ce0@i gN2ce1@x) ((lambda (gN2ce5@val) (if (symbol? gN2ce5@val) (ungensym gN2ce5@val) gN2ce5@val)) ((record-accessor gN2cdf@rtd gN2ce0@i) gN2ce1@x)))) ((letrec ((gN2cd5@loop (lambda (gN2cd7@ret gN2cd8@rtd) (if gN2cd8@rtd (gN2cd5@loop (append gN2cd7@ret (gN2c30@map-with-index (lambda (gN2cdb@i gN2cdc@field) (cons gN2cdc@field (gN2cd4@ref gN2cd8@rtd gN2cdb@i gN2cd1@r))) (vector->list (record-type-field-names gN2cd8@rtd)))) (record-type-parent gN2cd8@rtd)) gN2cd7@ret)))) gN2cd5@loop) '() (record-rtd gN2cd1@r)))) '#f))) (set! gN2c30@map-with-index (lambda (gN2ce7@proc gN2ce8@lst) ((letrec ((gN2ceb@loop (lambda (gN2ced@i gN2cee@lst gN2cef@ret) (if (null? gN2cee@lst) (reverse gN2cef@ret) (gN2ceb@loop (+ gN2ced@i '1) (cdr gN2cee@lst) (cons (gN2ce7@proc gN2ced@i (car gN2cee@lst)) gN2cef@ret)))))) gN2ceb@loop) '0 gN2ce8@lst '()))) (set! gN2c32@repl (lambda gN2cf3@x ((lambda (gN2cf6@rec) (begin (set! gN2cf6@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (gN2cf9@gN2cf7) (lambda () (with-exception-handler (lambda (gN2cfb@e) ((call/cc (lambda (gN2cfd@gN2cf8) (gN2cf9@gN2cf7 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? gN2cfb@e) (gN2c2c@condition-printer gN2cfb@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" gN2cfb@e))) (gN2cfd@gN2cf8 (lambda () (raise-continuable gN2cfb@e)))))))))) (lambda () ((letrec ((gN2cff@loop (lambda (gN2d01@line gN2d02@accum) ((lambda (gN2d06@parentheses-ok? gN2d08@eval-string-print) (begin (set! gN2d06@parentheses-ok? (lambda (gN2d0d@text) ((letrec ((gN2d0f@loop (lambda (gN2d11@chars gN2d12@p0 gN2d13@p1) (if (null? gN2d11@chars) (= '0 gN2d12@p0 gN2d13@p1) ((lambda (gN2d17@t) (if (memv gN2d17@t '(#\()) (gN2d0f@loop (cdr gN2d11@chars) (+ gN2d12@p0 '1) gN2d13@p1) (if (memv gN2d17@t '(#\))) (gN2d0f@loop (cdr gN2d11@chars) (- gN2d12@p0 '1) gN2d13@p1) (if (memv gN2d17@t '(#\[)) (gN2d0f@loop (cdr gN2d11@chars) gN2d12@p0 (+ gN2d13@p1 '1)) (if (memv gN2d17@t '(#\])) (gN2d0f@loop (cdr gN2d11@chars) gN2d12@p0 (- gN2d13@p1 '1)) (gN2d0f@loop (cdr gN2d11@chars) gN2d12@p0 gN2d13@p1)))))) (car gN2d11@chars)))))) gN2d0f@loop) (string->list gN2d0d@text) '0 '0))) (set! gN2d08@eval-string-print (lambda (gN2d0b@text) (if (not (or (string=? '"\n" gN2d0b@text) (= '0 (string-length gN2d0b@text)))) (write (gN2c40@eval-top-level (call-with-port (open-string-input-port gN2d0b@text) read))) (void)))) (if (eof-object? gN2d01@line) (begin (gN2d08@eval-string-print gN2d02@accum) (exit)) ((lambda (gN2d09@current) (if (gN2d06@parentheses-ok? gN2d09@current) (gN2d08@eval-string-print gN2d09@current) (gN2cff@loop (get-line (current-input-port)) gN2d09@current))) (string-append gN2d02@accum gN2d01@line))))) '#f '#f)))) gN2cff@loop) (get-line (current-input-port)) '""))))))) (newline) (gN2cf6@rec)))) (gN2cf6@rec))) '#f))) (set! gN2c34@trace-printer (gN6bc@gN59b@make-parameter write)) (set! gN2c36@command-line (gN6bc@gN59b@make-parameter (get-command-line))) (set! gN2c38@local-library-path (lambda (gN2d19@filename) (gN976@gN7b2@library-path))) (set! gN2c3a@load/args (lambda (gN2d1b@filename . gN2d1d@args) (begin (apply gN2c4a@load-r6rs-top-level gN2d1b@filename 'load gN2d1d@args) (void)))) (set! gN2c3c@load (lambda (gN2d1f@filename) (begin (apply gN2c4a@load-r6rs-top-level gN2d1f@filename 'load (gN2c36@command-line)) (void)))) (set! gN2c3e@ironscheme-build (lambda () (gN2c3c@load '"ironscheme-buildscript.ss"))) (set! gN2c40@eval-top-level (lambda (gN2d21@x) (gN2847@gNe22@eval gN2d21@x (gN285d@gNe4e@interaction-environment)))) (set! gN2c42@compile-system-libraries (lambda () (gN2c40@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! gN2c44@compile (lambda (gN2d23@filename) (gN2c4a@load-r6rs-top-level gN2d23@filename 'compile))) (set! gN2c46@compile->closure (lambda (gN2d25@filename) (gN2c4a@load-r6rs-top-level gN2d25@filename 'closure))) (set! gN2c48@pre-compile-r6rs-file (lambda (gN2d27@filename) (gN2c4a@load-r6rs-top-level gN2d27@filename 'compile))) (set! gN2c4a@load-r6rs-top-level (lambda (gN2d29@filename gN2d2a@how . gN2d2d@args) (begin (gN976@gN7b2@library-path (gN2c38@local-library-path gN2d29@filename)) ((lambda (gN2d2f@x*) ((lambda (gN2d31@t) (if (memv gN2d31@t '(closure)) (gN285c@gNe4c@pre-compile-r6rs-top-level gN2d2f@x*) (if (memv gN2d31@t '(load)) (begin (gN2c36@command-line (cons gN2d29@filename (car gN2d2d@args))) (gN6bd@gN59d@mosh-cache-dir (create-mosh-cache-dir)) (if (gN6bd@gN59d@mosh-cache-dir) (gensym-prefix-set! (gN2c50@prefix-inc! (string-append (gN6bd@gN59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gN2d33@file) ((call/cc (lambda (gN2d37@gN2d35) (lambda () (with-exception-handler (lambda (gN2d39@c) ((call/cc (lambda (gN2d3b@gN2d36) (gN2d37@gN2d35 (lambda () (if '#t '#t (gN2d3b@gN2d36 (lambda () (raise-continuable gN2d39@c)))))))))) (lambda () (delete-file (string-append (gN6bd@gN59d@mosh-cache-dir) '"/" gN2d33@file))))))))) (directory-list (gN6bd@gN59d@mosh-cache-dir))) (void)) ((lambda (gN2d3d@compiled) (begin (if (and (gN6bd@gN59d@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gN97a@gN7ba@serialize-all gN6b7@gN591@serialize-library gN713@gN6cc@compile-core-expr) (void)) (gN2d3d@compiled))) (gN285b@gNe4a@compile-r6rs-top-level gN2d2f@x*))) (if (memv gN2d31@t '(compile)) (begin (gN285b@gNe4a@compile-r6rs-top-level gN2d2f@x*) (gN97a@gN7ba@serialize-all gN6b7@gN591@serialize-library gN713@gN6cc@compile-core-expr)) (if '#f '#f (void)))))) gN2d2a@how)) (with-input-from-file gN2d29@filename (lambda () ((letrec ((gN2d3f@f (lambda () ((lambda (gN2d41@x) (if (eof-object? gN2d41@x) '() (cons gN2d41@x (gN2d3f@f)))) (gN6af@gN581@read-annotated))))) gN2d3f@f)))))))) (set! gN2c4c@load-r6rs-top-level-sexp (lambda (gN2d43@import-spec gN2d44@thunk) ((lambda (gN2d4f@gN2d48 gN2d50@gN2d4a gN2d51@gN2d4c gN2d52@gN2d4e) ((lambda (gN2d57@swap) (dynamic-wind gN2d57@swap (lambda () (begin (if (gN6bd@gN59d@mosh-cache-dir) (gensym-prefix-set! (gN2c50@prefix-inc! (string-append (gN6bd@gN59d@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (gN2d5d@gN2d5a gN2d5e@gN2d5c) ((lambda (gN2d61@swap) (dynamic-wind gN2d61@swap (lambda () ((gN285b@gNe4a@compile-r6rs-top-level (list (cons 'import gN2d43@import-spec) (list gN2d44@thunk))))) gN2d61@swap)) (lambda () ((lambda (gN2d63@t) (begin (gN2d5d@gN2d5a gN2d5e@gN2d5c) (set! gN2d5e@gN2d5c gN2d63@t))) (gN2d5d@gN2d5a))))) gN2c36@command-line '()))) gN2d57@swap)) (lambda () (begin ((lambda (gN2d65@t) (begin (gN2d4f@gN2d48 gN2d51@gN2d4c) (set! gN2d51@gN2d4c gN2d65@t))) (gN2d4f@gN2d48)) ((lambda (gN2d67@t) (begin (gN2d50@gN2d4a gN2d52@gN2d4e) (set! gN2d52@gN2d4e gN2d67@t))) (gN2d50@gN2d4a)))))) gN976@gN7b2@library-path gN6bd@gN59d@mosh-cache-dir (gN2c38@local-library-path '"") (create-mosh-cache-dir)))) (set! gN2c4e@prefix-inc (lambda (gN2d69@prefix-string) ((lambda (gN2d6b@prefix) ((lambda (gN2d6d@len) ((lambda () ((letrec ((gN2d6f@loop (lambda (gN2d71@i gN2d72@carry? gN2d73@accum) (if (< gN2d71@i '0) (string->symbol (list->string (if gN2d72@carry? (cons '#\a gN2d73@accum) gN2d73@accum))) (if gN2d72@carry? ((lambda (gN2d77@next-integer) (if (= gN2d77@next-integer '123) (gN2d6f@loop (- gN2d71@i '1) '#f (cons '#\A gN2d73@accum)) (if (= gN2d77@next-integer '91) (gN2d6f@loop (- gN2d71@i '1) '#t (cons '#\a gN2d73@accum)) (gN2d6f@loop (- gN2d71@i '1) '#f (cons (integer->char gN2d77@next-integer) gN2d73@accum))))) (+ '1 (char->integer (string-ref gN2d6b@prefix gN2d71@i)))) (gN2d6f@loop (- gN2d71@i '1) '#f (cons (string-ref gN2d6b@prefix gN2d71@i) gN2d73@accum))))))) gN2d6f@loop) (- gN2d6d@len '1) '#t '())))) (string-length gN2d6b@prefix))) (symbol->string gN2d69@prefix-string)))) (set! gN2c50@prefix-inc! (lambda (gN2d79@file) (begin (if (not (file-exists? gN2d79@file)) (call-with-output-file gN2d79@file (lambda (gN2d7b@port) (write 'd gN2d7b@port))) (void)) ((lambda (gN2d7d@prefix) ((lambda (gN2d7f@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port gN2d79@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (gN2d81@port) (write gN2d7f@next-prefix gN2d81@port))) gN2d7d@prefix)))) (gN2c4e@prefix-inc gN2d7d@prefix))) (call-with-input-file gN2d79@file read))))) (begin (set! gN2d9b@gN2c50@prefix-inc! gN2c50@prefix-inc!) (set! gN2d9a@gN2c4e@prefix-inc gN2c4e@prefix-inc) (set! gN2d99@gN2c4c@load-r6rs-top-level-sexp gN2c4c@load-r6rs-top-level-sexp) (set! gN2d98@gN2c4a@load-r6rs-top-level gN2c4a@load-r6rs-top-level) (set! gN2d97@gN2c48@pre-compile-r6rs-file gN2c48@pre-compile-r6rs-file) (set! gN2d96@gN2c46@compile->closure gN2c46@compile->closure) (set! gN2d95@gN2c44@compile gN2c44@compile) (set! gN2d94@gN2c42@compile-system-libraries gN2c42@compile-system-libraries) (set! gN2d93@gN2c40@eval-top-level gN2c40@eval-top-level) (set! gN2d92@gN2c3e@ironscheme-build gN2c3e@ironscheme-build) (set! gN2d91@gN2c3c@load gN2c3c@load) (set! gN2d90@gN2c3a@load/args gN2c3a@load/args) (set! gN2d8f@gN2c38@local-library-path gN2c38@local-library-path) (set! gN2d8e@gN2c36@command-line gN2c36@command-line) (set! gN2d8d@gN2c34@trace-printer gN2c34@trace-printer) (set! gN2d8c@gN2c32@repl gN2c32@repl) (set! gN2d8b@gN2c30@map-with-index gN2c30@map-with-index) (set! gN2d8a@gN2c2e@record->field-alist gN2c2e@record->field-alist) (set! gN2d89@gN2c2c@condition-printer gN2c2c@condition-printer) (set! gN2d88@gN2c2a@rpad gN2c2a@rpad) (set! gN2d87@gN2c28@for-each-with-index gN2c28@for-each-with-index) (set! gN2d86@gN2c26@parse-and-add-library-path gN2c26@parse-and-add-library-path) (set! gN2d85@gN2c24@add-library-path! gN2c24@add-library-path!) (set! gN2d84@gN2c22@x* gN2c22@x*) (set! gN2d83@gN2c20@ref gN2c20@ref) (gN97b@gN7bc@current-precompiled-library-loader gN6b8@gN593@load-serialized-library) (set-symbol-value! 'load gN2c3c@load) (set-symbol-value! 'pre-compile-r6rs-file gN2c48@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs gN2c40@eval-top-level) (set-symbol-value! 'int-env-syms gN283e@gNe10@interaction-environment-symbols) (set-symbol-value! 'expanded2core gN712@gN6ca@expanded->core) (set-symbol-value! 'trace-printer gN2c34@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (gN2c51@c) (condition (gN2b7d@gN2987@make-non-continuable-violation) (gN2b73@gN296e@make-who-condition 'raise) (gN2b37@gN28cf@make-message-condition '"returned from non-continuable exception") (gN2b69@gN2953@make-irritants-condition (list gN2c51@c))))) (gN2c26@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (gN2c26@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (gN2c24@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (gN2c24@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (gN2c24@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (gN2c53@prefix) (gN977@gN7b4@library-extensions (gN2c53@prefix '".mosh" (gN977@gN7b4@library-extensions)))) (lambda (gN2c55@ext gN2c56@ls) (append (map (lambda (gN2c59@x) (string-append gN2c55@ext gN2c59@x)) gN2c56@ls) gN2c56@ls))) (current-exception-handler (lambda (gN2c5b@c) (if (condition? gN2c5b@c) (gN2c2c@condition-printer gN2c5b@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" gN2c5b@c)))) (if ((call/cc (lambda (gN2c5f@gN2c5d) (lambda () (with-exception-handler (lambda (gN2c61@c) ((call/cc (lambda (gN2c63@gN2c5e) (gN2c5f@gN2c5d (lambda () (if '#t '#f (gN2c63@gN2c5e (lambda () (raise-continuable gN2c61@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (gN2c4c@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (gN2c36@command-line)) ((lambda (gN2c6d@gN2c66 gN2c6e@gN2c68 gN2c6f@gN2c6a gN2c70@gN2c6c) ((lambda (gN2c75@swap) (dynamic-wind gN2c75@swap (lambda () (begin (if (gN6bd@gN59d@mosh-cache-dir) (gensym-prefix-set! (gN2c50@prefix-inc! (string-append (gN6bd@gN59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (gN2c32@repl))) gN2c75@swap)) (lambda () (begin ((lambda (gN2c77@t) (begin (gN2c6d@gN2c66 gN2c6f@gN2c6a) (set! gN2c6f@gN2c6a gN2c77@t))) (gN2c6d@gN2c66)) ((lambda (gN2c79@t) (begin (gN2c6e@gN2c68 gN2c70@gN2c6c) (set! gN2c70@gN2c6c gN2c79@t))) (gN2c6e@gN2c68)))))) gN2c36@command-line gN6bd@gN59d@mosh-cache-dir '() (create-mosh-cache-dir)) (begin (gN976@gN7b2@library-path (gN2c38@local-library-path (car (gN2c36@command-line)))) (set! gN2c22@x* (with-input-from-file (car (gN2c36@command-line)) (lambda () ((letrec ((gN2c7b@f (lambda () ((lambda (gN2c7d@x) (if (eof-object? gN2c7d@x) '() (cons gN2c7d@x (gN2c7b@f)))) (gN6af@gN581@read-annotated))))) gN2c7b@f))))) (gN2c36@command-line (cons (car (gN2c36@command-line)) (cdr (gN2c36@command-line)))) (gN6bd@gN59d@mosh-cache-dir (create-mosh-cache-dir)) (if (gN6bd@gN59d@mosh-cache-dir) (gensym-prefix-set! (gN2c50@prefix-inc! (string-append (gN6bd@gN59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gN2c7f@file) ((call/cc (lambda (gN2c83@gN2c81) (lambda () (with-exception-handler (lambda (gN2c85@c) ((call/cc (lambda (gN2c87@gN2c82) (gN2c83@gN2c81 (lambda () (if '#t '#t (gN2c87@gN2c82 (lambda () (raise-continuable gN2c85@c)))))))))) (lambda () (delete-file (string-append (gN6bd@gN59d@mosh-cache-dir) '"/" gN2c7f@file))))))))) (directory-list (gN6bd@gN59d@mosh-cache-dir))) (void)) ((lambda (gN2c89@compiled) (begin (if (and (gN6bd@gN59d@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gN97a@gN7ba@serialize-all gN6b7@gN591@serialize-library gN713@gN6cc@compile-core-expr) (void)) (gN2c89@compiled))) (gN285b@gNe4a@compile-r6rs-top-level gN2c22@x*)))))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
