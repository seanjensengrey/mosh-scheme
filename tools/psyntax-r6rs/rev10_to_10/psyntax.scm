;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! S24b4@library-file-path->cache-path (unspecified)) (set! S24b6@read-annotated (unspecified)) (set! S24b8@annotation-stripped (unspecified)) (set! S24ba@annotation? (unspecified)) (set! S24bc@annotation-source (unspecified)) (set! S24be@annotation-expression (unspecified)) (set! S24c0@scm->fasl (unspecified)) (set! S24c2@fasl-save (unspecified)) (set! S24c4@fasl-load (unspecified)) (set! S24c6@serialize-library (unspecified)) (set! S24c8@load-serialized-library (unspecified)) (set! S24ca@make-record-printer (unspecified)) (set! S24cc@compile-core (unspecified)) (set! S24ce@read-library-source-file (unspecified)) (set! S24d0@make-parameter (unspecified)) (set! S24d2@mosh-cache-dir (unspecified)) (set! S2568@file-options-spec (unspecified)) (begin (set! S24b4@library-file-path->cache-path (lambda (S2569@x) (call-with-values (lambda () (open-string-output-port)) (lambda (S256f@S256c S2570@S256e) (let ((S2573@extract S2570@S256e) (S2574@p S256f@S256c)) (let ((S2578@display-hex '#f)) (begin (set! S2578@display-hex (lambda (S2581@n) (if (<= '0 S2581@n '9) (display S2581@n S2574@p) (display (integer->char (+ (char->integer '#\a) (- S2581@n '10))) S2574@p)))) (begin (let S257b@f ((S2579@ls (string-split S2569@x '#\/))) (if (not (null? S2579@ls)) (begin (display '"_" S2574@p) (for-each (lambda (S257d@c) (if (or (char<=? '#\a S257d@c '#\z) (char<=? '#\A S257d@c '#\Z) (char<=? '#\0 S257d@c '#\9) (memv S257d@c '(#\- #\. #\_ #\~))) (display S257d@c S2574@p) (begin (display '"%" S2574@p) (let ((S257f@n (char->integer S257d@c))) (begin (S2578@display-hex (quotient S257f@n '16)) (S2578@display-hex (remainder S257f@n '16))))))) (string->list (car S2579@ls))) (S257b@f (cdr S2579@ls))) (void))) (S2573@extract))))))))) (set! S25e3@S24b4@library-file-path->cache-path S24b4@library-file-path->cache-path)) (begin (set! S24b6@read-annotated read) (set! S25e4@S24b6@read-annotated S24b6@read-annotated)) (begin (set! S24b8@annotation-stripped (lambda (S2583@x) (S24be@annotation-expression S2583@x))) (set! S25e5@S24b8@annotation-stripped S24b8@annotation-stripped)) (begin (set! S24ba@annotation? (lambda (S2585@x) (source-info S2585@x))) (set! S25e6@S24ba@annotation? S24ba@annotation?)) (begin (set! S24bc@annotation-source (lambda (S2587@x) (source-info S2587@x))) (set! S25e7@S24bc@annotation-source S24bc@annotation-source)) (begin (set! S24be@annotation-expression (lambda (S2589@x) (if (pair? S2589@x) (cons (car S2589@x) (cdr S2589@x)) (display '"line:46\n")))) (set! S25e8@S24be@annotation-expression S24be@annotation-expression)) (begin (set! S24c0@scm->fasl (lambda (S258b@filename) (string-append (S24d2@mosh-cache-dir) '"/" (S24b4@library-file-path->cache-path S258b@filename) '".mosh-fasl"))) (set! S25e9@S24c0@scm->fasl S24c0@scm->fasl)) (begin (set! S24c2@fasl-save (lambda (S258d@filename S258e@obj) (call-with-port (open-file-output-port S258d@filename) (lambda (S2591@port) ((symbol-value 'fasl-write!) S258e@obj S2591@port))))) (set! S25ea@S24c2@fasl-save S24c2@fasl-save)) (begin (set! S24c4@fasl-load (lambda (S2593@filename) (call-with-port (open-file-input-port S2593@filename) (symbol-value 'fasl-read!)))) (set! S25eb@S24c4@fasl-load S24c4@fasl-load)) (begin (set! S24c6@serialize-library (lambda (S2595@filename S2596@obj) (begin (let ((S2599@expanded2core (symbol-value 'expanded2core))) (let ((S259b@compile (symbol-value 'compile-w/o-halt))) (let ((S259d@code S2596@obj)) (let ((S259f@pivot (cddddr (cddddr S259d@code)))) (let ((S25a1@visit (S259b@compile (S2599@expanded2core (car S259f@pivot))))) (begin (set-car! S259f@pivot S25a1@visit) (let ((S25a3@pivot (cdr S259f@pivot))) (let ((S25a5@invoke (S259b@compile (S2599@expanded2core (car S25a3@pivot))))) (set-car! S25a3@pivot S25a5@invoke))))))))) (let ((S25a7@fasl-file (S24c0@scm->fasl S2595@filename))) (begin (if (file-exists? S25a7@fasl-file) (delete-file S25a7@fasl-file) (void)) ((call/cc (lambda (S25ab@S25a9) (lambda () (with-exception-handler (lambda (S25ad@c) ((call/cc (lambda (S25af@S25aa) (S25ab@S25a9 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " S2595@filename) (if (file-exists? S25a7@fasl-file) (delete-file S25a7@fasl-file) (void)) '#f) (S25af@S25aa (lambda () (raise-continuable S25ad@c)))))))))) (lambda () (S24c2@fasl-save S25a7@fasl-file S2596@obj)))))))))))) (set! S25ec@S24c6@serialize-library S24c6@serialize-library)) (begin (set! S24c8@load-serialized-library (lambda (S25b1@filename S25b2@obj) (and (S24d2@mosh-cache-dir) (let ((S25b5@fasl-file (S24c0@scm->fasl S25b1@filename))) (if (and (file-exists? S25b5@fasl-file) ((symbol-value 'file-newer?) S25b5@fasl-file S25b1@filename)) (let ((S25b7@expanded2core (symbol-value 'expanded2core))) (let ((S25b9@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((S25bb@code (S24c4@fasl-load S25b5@fasl-file))) (let ((S25bd@pivot (cddddr (cddddr S25bb@code)))) (let ((S25bf@visit (car S25bd@pivot))) (let ((S25c1@visit-proc (lambda () (S25b9@eval-compiled-core S25bf@visit)))) (begin (set-car! S25bd@pivot S25c1@visit-proc) (let ((S25c3@pivot (cdr S25bd@pivot))) (let ((S25c5@invoke (car S25c3@pivot))) (begin (set-car! S25c3@pivot (lambda () (S25b9@eval-compiled-core S25c5@invoke))) (apply S25b2@obj S25bb@code))))))))))) '#f))))) (set! S25ed@S24c8@load-serialized-library S24c8@load-serialized-library)) (begin (set! S24ca@make-record-printer (lambda (S25c7@name S25c8@printer) (lambda S25cb@x (begin (display '"record printer") (for-each display S25cb@x))))) (set! S25ee@S24ca@make-record-printer S24ca@make-record-printer)) (begin (set! S24cc@compile-core (lambda S25cd@x (apply error 'comile-core '"not implementated" S25cd@x))) (set! S25ef@S24cc@compile-core S24cc@compile-core)) (begin (set! S24ce@read-library-source-file (lambda (S25cf@file-name) (with-input-from-file S25cf@file-name S24b6@read-annotated))) (set! S25f0@S24ce@read-library-source-file S24ce@read-library-source-file)) (begin (set! S24d0@make-parameter (lambda S25df (let ((S25e0 (length S25df))) (if (= S25e0 '1) (apply (lambda (S25d1@x) (S24d0@make-parameter S25d1@x (lambda (S25d3@x) S25d3@x))) S25df) (if (= S25e0 '2) (apply (lambda (S25d5@x S25d6@fender) (let ((S25d9@x (S25d6@fender S25d5@x))) (lambda S25dd (let ((S25de (length S25dd))) (if (= S25de '0) (apply (lambda () S25d9@x) S25dd) (if (= S25de '1) (apply (lambda (S25db@v) (set! S25d9@x (S25d6@fender S25db@v))) S25dd) (error 'apply '"invalid arg count"))))))) S25df) (error 'apply '"invalid arg count")))))) (set! S25f1@S24d0@make-parameter S24d0@make-parameter)) (begin (set! S24d2@mosh-cache-dir (S24d0@make-parameter '#f)) (set! S25f2@S24d2@mosh-cache-dir S24d2@mosh-cache-dir)) (begin (set! S2568@file-options-spec (lambda (S25e1@x) S25e1@x)) (set! S25f3@S2568@file-options-spec S2568@file-options-spec)) (void))
(begin (set! S25f9@current-primitive-locations (unspecified)) (set! S25fb@mutable? (unspecified)) (set! S25fd@rewriter (unspecified)) (set! S25ff@expanded->core (unspecified)) (set! S2601@compile-core-expr (unspecified)) (set! S2603@pretty-print (unspecified)) (set! S2605@compile-core-expr-to-port (unspecified)) (begin (set! S25f9@current-primitive-locations (S25f1@S24d0@make-parameter (lambda (S2606@x) '#f) (lambda (S2608@p) S2608@p))) (set! S2644@S25f9@current-primitive-locations S25f9@current-primitive-locations)) (begin (set! S25fb@mutable? (lambda (S260a@x) (or (pair? S260a@x) (vector? S260a@x) (hashtable? S260a@x)))) (set! S2645@S25fb@mutable? S25fb@mutable?)) (begin (set! S25fd@rewriter (lambda (S260c@quote-hack?) (let ((S260f@f '#f)) (begin (set! S260f@f (lambda (S2610@x) (if (pair? S2610@x) (let ((S2612@t (car S2610@x))) (if (memv S2612@t '(quote)) (if (and S260c@quote-hack? (S25fb@mutable? (cadr S2610@x))) (let ((S2614@g (gensym))) (begin (set-symbol-value! S2614@g (cadr S2610@x)) S2614@g)) S2610@x) (if (memv S2612@t '(case-lambda)) (cons 'case-lambda (map (lambda (S2616@x) (cons (car S2616@x) (map S260f@f (cdr S2616@x)))) (cdr S2610@x))) (if (memv S2612@t '(lambda)) (cons* 'lambda (cadr S2610@x) (map S260f@f (cddr S2610@x))) (if (memv S2612@t '(letrec)) (let ((S2618@bindings (cadr S2610@x)) (S2619@body* (cddr S2610@x))) (let ((S261c@lhs* (map car S2618@bindings)) (S261d@rhs* (map cadr S2618@bindings))) (cons* 'letrec (map list S261c@lhs* (map S260f@f S261d@rhs*)) (map S260f@f S2619@body*)))) (if (memv S2612@t '(letrec*)) (let ((S2620@bindings (cadr S2610@x)) (S2621@body* (cddr S2610@x))) (let ((S2624@lhs* (map car S2620@bindings)) (S2625@rhs* (map cadr S2620@bindings))) (cons* 'letrec* (map list S2624@lhs* (map S260f@f S2625@rhs*)) (map S260f@f S2621@body*)))) (if (memv S2612@t '(library-letrec*)) (let ((S2628@name (cadr S2610@x)) (S2629@x (cdr S2610@x))) (let ((S262c@bindings (cadr S2629@x)) (S262d@body* (cddr S2629@x))) (let ((S2630@lhs* (map car S262c@bindings)) (S2631@lhs** (map cadr S262c@bindings)) (S2632@rhs* (map caddr S262c@bindings))) (cons* 'library-letrec* S2628@name (map list S2630@lhs* S2631@lhs** (map S260f@f S2632@rhs*)) (map S260f@f S262d@body*))))) (if (memv S2612@t '(begin)) (cons 'begin (map S260f@f (cdr S2610@x))) (if (memv S2612@t '(set!)) (list 'set! (cadr S2610@x) (S260f@f (caddr S2610@x))) (if (memv S2612@t '(primitive)) (let ((S2636@op (cadr S2610@x))) (let ((S2638@t ((S25f9@current-primitive-locations) S2636@op))) (if S2638@t ((lambda (S263a@loc) S263a@loc) S2638@t) S2636@op))) (if (memv S2612@t '(define)) S2610@x (if (list? S2610@x) (map S260f@f S2610@x) (error 'rewrite '"invalid form ~s ~s" S2610@x (list? S2610@x)))))))))))))) S2610@x))) S260f@f)))) (set! S2646@S25fd@rewriter S25fd@rewriter)) (begin (set! S25ff@expanded->core (lambda (S263c@x) ((S25fd@rewriter '#f) S263c@x))) (set! S2647@S25ff@expanded->core S25ff@expanded->core)) (begin (set! S2601@compile-core-expr (lambda (S263e@x) ((S25fd@rewriter '#f) S263e@x))) (set! S2648@S2601@compile-core-expr S2601@compile-core-expr)) (begin (set! S2603@pretty-print write) (set! S2649@S2603@pretty-print S2603@pretty-print)) (begin (set! S2605@compile-core-expr-to-port (lambda (S2640@x S2641@p) (S2603@pretty-print ((S25fd@rewriter '#f) S2640@x) S2641@p))) (set! S264a@S2605@compile-core-expr-to-port S2605@compile-core-expr-to-port)) (void))
(begin (void))
(begin (set! S2699@make-collection (unspecified)) (set! S269b@current-library-collection (unspecified)) (set! S269d@rp (unspecified)) (set! S26a7@library? (unspecified)) (set! S26a9@library-id (unspecified)) (set! S26ab@set-library-id! (unspecified)) (set! S26ad@library-name (unspecified)) (set! S26af@set-library-name! (unspecified)) (set! S26b1@library-version (unspecified)) (set! S26b3@set-library-version! (unspecified)) (set! S26b5@library-imp* (unspecified)) (set! S26b7@set-library-imp*! (unspecified)) (set! S26b9@library-vis* (unspecified)) (set! S26bb@set-library-vis*! (unspecified)) (set! S26bd@library-inv* (unspecified)) (set! S26bf@set-library-inv*! (unspecified)) (set! S26c1@library-subst (unspecified)) (set! S26c3@set-library-subst! (unspecified)) (set! S26c5@library-env (unspecified)) (set! S26c7@set-library-env! (unspecified)) (set! S26c9@library-visit-state (unspecified)) (set! S26cb@set-library-visit-state! (unspecified)) (set! S26cd@library-invoke-state (unspecified)) (set! S26cf@set-library-invoke-state! (unspecified)) (set! S26d1@library-visit-code (unspecified)) (set! S26d3@set-library-visit-code! (unspecified)) (set! S26d5@library-invoke-code (unspecified)) (set! S26d7@set-library-invoke-code! (unspecified)) (set! S26d9@library-visible? (unspecified)) (set! S26db@set-library-visible?! (unspecified)) (set! S26dd@library-source-file-name (unspecified)) (set! S26df@set-library-source-file-name! (unspecified)) (set! S26e1@dummy (unspecified)) (set! S26e3@find-dependencies (unspecified)) (set! S26e5@find-library-by (unspecified)) (set! S26e7@library-path (unspecified)) (set! S26e9@library-extensions (unspecified)) (set! S26eb@library-name->file-name (unspecified)) (set! S26ed@file-locator (unspecified)) (set! S26ef@serialize-all (unspecified)) (set! S26f1@current-precompiled-library-loader (unspecified)) (set! S26f3@try-load-from-file (unspecified)) (set! S26f5@library-loader (unspecified)) (set! S26f7@current-library-expander (unspecified)) (set! S26f9@external-pending-libraries (unspecified)) (set! S26fb@find-external-library (unspecified)) (set! S26fd@find-library-by-name (unspecified)) (set! S26ff@library-exists? (unspecified)) (set! S2701@find-library-by-spec/die (unspecified)) (set! S2703@label->binding-table (unspecified)) (set! S2705@install-library-record (unspecified)) (set! S2707@install-library (unspecified)) (set! S2709@imported-label->binding (unspecified)) (set! S270b@invoke-library (unspecified)) (set! S270d@visit-library (unspecified)) (set! S270f@invoke-library-by-spec (unspecified)) (set! S2711@installed-libraries (unspecified)) (set! S2713@library-spec (unspecified)) (begin (set! S2699@make-collection (lambda () (let ((S2714@set '())) (let ((S2717@set-cons '#f)) (begin (set! S2717@set-cons (lambda (S271c@x S271d@ls) (if (memq S271c@x S271d@ls) S271d@ls (cons S271c@x S271d@ls)))) (lambda S271a (let ((S271b (length S271a))) (if (= S271b '0) (apply (lambda () S2714@set) S271a) (if (= S271b '1) (apply (lambda (S2718@x) (set! S2714@set (S2717@set-cons S2718@x S2714@set))) S271a) (error 'apply '"invalid arg count")))))))))) (set! S2888@S2699@make-collection S2699@make-collection)) (begin (set! S269b@current-library-collection (S25f1@S24d0@make-parameter (S2699@make-collection) (lambda (S2720@x) (begin (if (not (procedure? S2720@x)) (assertion-violation 'current-library-collection '"not a procedure" S2720@x) (void)) S2720@x)))) (set! S2889@S269b@current-library-collection S269b@current-library-collection)) (begin (set! S269d@rp (S25ee@S24ca@make-record-printer 'library (lambda (S2722@x S2723@p S2724@wr) (begin (if (not (S26a7@library? S2722@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (S26b1@library-version S2722@x)) (S26ad@library-name S2722@x) (append (S26ad@library-name S2722@x) (list (S26b1@library-version S2722@x))))) S2723@p))))) (set! S288a@S269d@rp S269d@rp)) (begin (set! S26a7@library? (lambda (S2728@x) (and (simple-struct? S2728@x) (eq? (simple-struct-name S2728@x) 'library)))) (set! S288b@S26a7@library? S26a7@library?)) (begin (set! S26a9@library-id (lambda (S272a@x) (simple-struct-ref S272a@x '0))) (set! S288c@S26a9@library-id S26a9@library-id)) (begin (set! S26ab@set-library-id! (lambda (S272c@x S272d@val) (simple-struct-set! S272c@x '0 S272d@val))) (set! S288d@S26ab@set-library-id! S26ab@set-library-id!)) (begin (set! S26ad@library-name (lambda (S2730@x) (simple-struct-ref S2730@x '1))) (set! S288e@S26ad@library-name S26ad@library-name)) (begin (set! S26af@set-library-name! (lambda (S2732@x S2733@val) (simple-struct-set! S2732@x '1 S2733@val))) (set! S288f@S26af@set-library-name! S26af@set-library-name!)) (begin (set! S26b1@library-version (lambda (S2736@x) (simple-struct-ref S2736@x '2))) (set! S2890@S26b1@library-version S26b1@library-version)) (begin (set! S26b3@set-library-version! (lambda (S2738@x S2739@val) (simple-struct-set! S2738@x '2 S2739@val))) (set! S2891@S26b3@set-library-version! S26b3@set-library-version!)) (begin (set! S26b5@library-imp* (lambda (S273c@x) (simple-struct-ref S273c@x '3))) (set! S2892@S26b5@library-imp* S26b5@library-imp*)) (begin (set! S26b7@set-library-imp*! (lambda (S273e@x S273f@val) (simple-struct-set! S273e@x '3 S273f@val))) (set! S2893@S26b7@set-library-imp*! S26b7@set-library-imp*!)) (begin (set! S26b9@library-vis* (lambda (S2742@x) (simple-struct-ref S2742@x '4))) (set! S2894@S26b9@library-vis* S26b9@library-vis*)) (begin (set! S26bb@set-library-vis*! (lambda (S2744@x S2745@val) (simple-struct-set! S2744@x '4 S2745@val))) (set! S2895@S26bb@set-library-vis*! S26bb@set-library-vis*!)) (begin (set! S26bd@library-inv* (lambda (S2748@x) (simple-struct-ref S2748@x '5))) (set! S2896@S26bd@library-inv* S26bd@library-inv*)) (begin (set! S26bf@set-library-inv*! (lambda (S274a@x S274b@val) (simple-struct-set! S274a@x '5 S274b@val))) (set! S2897@S26bf@set-library-inv*! S26bf@set-library-inv*!)) (begin (set! S26c1@library-subst (lambda (S274e@x) (simple-struct-ref S274e@x '6))) (set! S2898@S26c1@library-subst S26c1@library-subst)) (begin (set! S26c3@set-library-subst! (lambda (S2750@x S2751@val) (simple-struct-set! S2750@x '6 S2751@val))) (set! S2899@S26c3@set-library-subst! S26c3@set-library-subst!)) (begin (set! S26c5@library-env (lambda (S2754@x) (simple-struct-ref S2754@x '7))) (set! S289a@S26c5@library-env S26c5@library-env)) (begin (set! S26c7@set-library-env! (lambda (S2756@x S2757@val) (simple-struct-set! S2756@x '7 S2757@val))) (set! S289b@S26c7@set-library-env! S26c7@set-library-env!)) (begin (set! S26c9@library-visit-state (lambda (S275a@x) (simple-struct-ref S275a@x '8))) (set! S289c@S26c9@library-visit-state S26c9@library-visit-state)) (begin (set! S26cb@set-library-visit-state! (lambda (S275c@x S275d@val) (simple-struct-set! S275c@x '8 S275d@val))) (set! S289d@S26cb@set-library-visit-state! S26cb@set-library-visit-state!)) (begin (set! S26cd@library-invoke-state (lambda (S2760@x) (simple-struct-ref S2760@x '9))) (set! S289e@S26cd@library-invoke-state S26cd@library-invoke-state)) (begin (set! S26cf@set-library-invoke-state! (lambda (S2762@x S2763@val) (simple-struct-set! S2762@x '9 S2763@val))) (set! S289f@S26cf@set-library-invoke-state! S26cf@set-library-invoke-state!)) (begin (set! S26d1@library-visit-code (lambda (S2766@x) (simple-struct-ref S2766@x '10))) (set! S28a0@S26d1@library-visit-code S26d1@library-visit-code)) (begin (set! S26d3@set-library-visit-code! (lambda (S2768@x S2769@val) (simple-struct-set! S2768@x '10 S2769@val))) (set! S28a1@S26d3@set-library-visit-code! S26d3@set-library-visit-code!)) (begin (set! S26d5@library-invoke-code (lambda (S276c@x) (simple-struct-ref S276c@x '11))) (set! S28a2@S26d5@library-invoke-code S26d5@library-invoke-code)) (begin (set! S26d7@set-library-invoke-code! (lambda (S276e@x S276f@val) (simple-struct-set! S276e@x '11 S276f@val))) (set! S28a3@S26d7@set-library-invoke-code! S26d7@set-library-invoke-code!)) (begin (set! S26d9@library-visible? (lambda (S2772@x) (simple-struct-ref S2772@x '12))) (set! S28a4@S26d9@library-visible? S26d9@library-visible?)) (begin (set! S26db@set-library-visible?! (lambda (S2774@x S2775@val) (simple-struct-set! S2774@x '12 S2775@val))) (set! S28a5@S26db@set-library-visible?! S26db@set-library-visible?!)) (begin (set! S26dd@library-source-file-name (lambda (S2778@x) (simple-struct-ref S2778@x '13))) (set! S28a6@S26dd@library-source-file-name S26dd@library-source-file-name)) (begin (set! S26df@set-library-source-file-name! (lambda (S277a@x S277b@val) (simple-struct-set! S277a@x '13 S277b@val))) (set! S28a7@S26df@set-library-source-file-name! S26df@set-library-source-file-name!)) (begin (set! S26e1@dummy '3) (set! S28a8@S26e1@dummy S26e1@dummy)) (begin (set! S26e3@find-dependencies (lambda (S277e@ls) (if (null? S277e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! S28a9@S26e3@find-dependencies S26e3@find-dependencies)) (begin (set! S26e5@find-library-by (lambda (S2780@pred) (let S2784@f ((S2782@ls ((S269b@current-library-collection)))) (if (null? S2782@ls) '#f (if (S2780@pred (car S2782@ls)) (car S2782@ls) (S2784@f (cdr S2782@ls))))))) (set! S28aa@S26e5@find-library-by S26e5@find-library-by)) (begin (set! S26e7@library-path (S25f1@S24d0@make-parameter '(".") (lambda (S2786@x) (if (and (list? S2786@x) (for-all string? S2786@x)) (map (lambda (S2788@x) S2788@x) S2786@x) (assertion-violation 'library-path '"not a list of strings" S2786@x))))) (set! S28ab@S26e7@library-path S26e7@library-path)) (begin (set! S26e9@library-extensions (S25f1@S24d0@make-parameter '(".sls" ".ss" ".scm") (lambda (S278a@x) (if (and (list? S278a@x) (for-all string? S278a@x)) (map (lambda (S278c@x) S278c@x) S278a@x) (assertion-violation 'library-extensions '"not a list of strings" S278a@x))))) (set! S28ac@S26e9@library-extensions S26e9@library-extensions)) (begin (set! S26eb@library-name->file-name (lambda (S278e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (S2794@S2791 S2795@S2793) (let ((S2798@extract S2795@S2793) (S2799@p S2794@S2791)) (let ((S279d@display-hex '#f)) (begin (set! S279d@display-hex (lambda (S27a6@n) (if (<= '0 S27a6@n '9) (display S27a6@n S2799@p) (display (integer->char (+ (char->integer '#\a) (- S27a6@n '10))) S2799@p)))) (begin (let S27a0@f ((S279e@ls S278e@x)) (if (not (null? S279e@ls)) (begin (display '"/" S2799@p) (for-each (lambda (S27a2@c) (if (or (char<=? '#\a S27a2@c '#\z) (char<=? '#\A S27a2@c '#\Z) (char<=? '#\0 S27a2@c '#\9) (memv S27a2@c '(#\- #\. #\_ #\~))) (display S27a2@c S2799@p) (begin (display '"%" S2799@p) (let ((S27a4@n (char->integer S27a2@c))) (begin (S279d@display-hex (quotient S27a4@n '16)) (S279d@display-hex (remainder S27a4@n '16))))))) (string->list (symbol->string (car S279e@ls)))) (S27a0@f (cdr S279e@ls))) (void))) (S2798@extract))))))))) (set! S28ad@S26eb@library-name->file-name S26eb@library-name->file-name)) (begin (set! S26ed@file-locator (S25f1@S24d0@make-parameter (lambda (S27a8@x) (let ((S27aa@str (S26eb@library-name->file-name S27a8@x))) (let S27b2@f ((S27ac@ls (S26e7@library-path)) (S27ad@exts (S26e9@library-extensions)) (S27ae@failed-list '())) (if (null? S27ac@ls) (let ((S27bc@S27b7 '#f) (S27be@S27b9 '#f) (S27c0@S27b8 '#f) (S27c3@S27b6 '#f) (S27c5@make-library-resolution-condition '#f) (S27c7@S27b4 '#f) (S27c9@S27b5 '#f) (S27cb@library-resolution-condition? '#f) (S27cd@condition-library '#f) (S27cf@condition-files '#f)) (begin (set! S27bc@S27b7 (make-record-type-descriptor '&library-resolution S4ac1@S4808@&condition-rtd 'S27ba '#f '#f '#((immutable library) (immutable files)))) (set! S27be@S27b9 '#f) (set! S27c0@S27b8 (make-record-constructor-descriptor S27bc@S27b7 S4ac2@S480a@&condition-rcd S27be@S27b9)) (set! S27c3@S27b6 (record-predicate S27bc@S27b7)) (set! S27c5@make-library-resolution-condition (record-constructor S27c0@S27b8)) (set! S27c7@S27b4 (record-accessor S27bc@S27b7 '0)) (set! S27c9@S27b5 (record-accessor S27bc@S27b7 '1)) (set! S27cb@library-resolution-condition? (condition-predicate S27bc@S27b7)) (set! S27cd@condition-library (condition-accessor S27bc@S27b7 S27c7@S27b4)) (set! S27cf@condition-files (condition-accessor S27bc@S27b7 S27c9@S27b5)) (raise (condition (S4ae1@S48a2@make-error) (S4b03@S48fe@make-who-condition 'expander) (S4ac7@S485f@make-message-condition '"cannot locate library in library-path") (S27c5@make-library-resolution-condition S27a8@x (reverse S27ae@failed-list)))))) (if (null? S27ad@exts) (S27b2@f (cdr S27ac@ls) (S26e9@library-extensions) S27ae@failed-list) (let ((S27d0@name (string-append (car S27ac@ls) S27aa@str (car S27ad@exts)))) (if (file-exists? S27d0@name) S27d0@name (S27b2@f S27ac@ls (cdr S27ad@exts) (cons S27d0@name S27ae@failed-list))))))))) (lambda (S27d2@f) (if (procedure? S27d2@f) S27d2@f (assertion-violation 'file-locator '"not a procedure" S27d2@f))))) (set! S28ae@S26ed@file-locator S26ed@file-locator)) (begin (set! S26ef@serialize-all (lambda (S27d4@serialize S27d5@compile) (let ((S27d9@library-desc '#f)) (begin (set! S27d9@library-desc (lambda (S27dc@x) (list (S26a9@library-id S27dc@x) (S26ad@library-name S27dc@x)))) (for-each (lambda (S27da@x) (if (S26dd@library-source-file-name S27da@x) (S27d4@serialize (S26dd@library-source-file-name S27da@x) (list (S26a9@library-id S27da@x) (S26ad@library-name S27da@x) (S26b1@library-version S27da@x) (map S27d9@library-desc (S26b5@library-imp* S27da@x)) (map S27d9@library-desc (S26b9@library-vis* S27da@x)) (map S27d9@library-desc (S26bd@library-inv* S27da@x)) (S26c1@library-subst S27da@x) (S26c5@library-env S27da@x) (S27d5@compile (S26d1@library-visit-code S27da@x)) (S27d5@compile (S26d5@library-invoke-code S27da@x)) (S26d9@library-visible? S27da@x))) (void))) ((S269b@current-library-collection))))))) (set! S28af@S26ef@serialize-all S26ef@serialize-all)) (begin (set! S26f1@current-precompiled-library-loader (S25f1@S24d0@make-parameter (lambda (S27de@filename S27df@sk) '#f))) (set! S28b0@S26f1@current-precompiled-library-loader S26f1@current-precompiled-library-loader)) (begin (set! S26f3@try-load-from-file (lambda (S27e2@filename) ((S26f1@current-precompiled-library-loader) S27e2@filename (lambda S2808 (let ((S2809 (length S2808))) (if (= S2809 '11) (apply (lambda (S27e4@id S27e5@name S27e6@ver S27e7@imp* S27e8@vis* S27e9@inv* S27ea@exp-subst S27eb@exp-env S27ec@visit-proc S27ed@invoke-proc S27ee@visible?) (let S27fc@f ((S27fa@deps (append S27e7@imp* S27e8@vis* S27e9@inv*))) (if (null? S27fa@deps) (begin (S2707@install-library S27e4@id S27e5@name S27e6@ver S27e7@imp* S27e8@vis* S27e9@inv* S27ea@exp-subst S27eb@exp-env S27ec@visit-proc S27ed@invoke-proc '#f '#f S27ee@visible? '#f) '#t) (let ((S27fe@d (car S27fa@deps))) (let ((S2800@label (car S27fe@d)) (S2801@dname (cadr S27fe@d))) (let ((S2804@l (S26fd@find-library-by-name S2801@dname))) (if (and (S26a7@library? S2804@l) (eq? S2800@label (S26a9@library-id S2804@l))) (S27fc@f (cdr S27fa@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" S27e5@name S2801@dname S27e2@filename S2804@l S2800@label (S26a9@library-id S2804@l)) '#f)))))))) S2808) (if (>= S2809 '0) (apply (lambda S2806@others '#f) S2808) (error 'apply '"invalid arg count")))))))) (set! S28b1@S26f3@try-load-from-file S26f3@try-load-from-file)) (begin (set! S26f5@library-loader (S25f1@S24d0@make-parameter (lambda (S280a@x) (let ((S280c@file-name ((S26ed@file-locator) S280a@x))) (if (not S280c@file-name) (assertion-violation '#f '"cannot file library" S280a@x) (or (S26f3@try-load-from-file S280c@file-name) ((S26f7@current-library-expander) (S25f0@S24ce@read-library-source-file S280c@file-name) S280c@file-name (lambda (S280e@name) (if (not (fast-equal? S280e@name S280a@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (S2814@S2811 S2815@S2813) (let ((S2818@e S2815@S2813) (S2819@p S2814@S2811)) (begin (display '"expected to find library " S2819@p) (write S280a@x S2819@p) (display '" in file " S2819@p) (display S280c@file-name S2819@p) (display '", found " S2819@p) (write S280e@name S2819@p) (display '" instead" S2819@p) (S2818@e)))))) (void)))))))) (lambda (S281c@f) (if (procedure? S281c@f) S281c@f (assertion-violation 'library-locator '"not a procedure" S281c@f))))) (set! S28b2@S26f5@library-loader S26f5@library-loader)) (begin (set! S26f7@current-library-expander (S25f1@S24d0@make-parameter (lambda (S281e@x) (assertion-violation 'library-expander '"not initialized")) (lambda (S2820@f) (if (procedure? S2820@f) S2820@f (assertion-violation 'library-expander '"not a procedure" S2820@f))))) (set! S28b3@S26f7@current-library-expander S26f7@current-library-expander)) (begin (set! S26f9@external-pending-libraries (S25f1@S24d0@make-parameter '())) (set! S28b4@S26f9@external-pending-libraries S26f9@external-pending-libraries)) (begin (set! S26fb@find-external-library (lambda (S2822@name) (begin (if (member S2822@name (S26f9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" S2822@name) (void)) (let ((S2828@S2825 S26f9@external-pending-libraries) (S2829@S2827 (cons S2822@name (S26f9@external-pending-libraries)))) (let ((S282c@swap (lambda () (let ((S282e@t (S2828@S2825))) (begin (S2828@S2825 S2829@S2827) (set! S2829@S2827 S282e@t)))))) (dynamic-wind S282c@swap (lambda () (begin ((S26f5@library-loader) S2822@name) (or (S26e5@find-library-by (lambda (S2830@x) (fast-equal? (S26ad@library-name S2830@x) S2822@name))) (assertion-violation '#f '"handling external library did not yield the correct library" S2822@name)))) S282c@swap)))))) (set! S28b5@S26fb@find-external-library S26fb@find-external-library)) (begin (set! S26fd@find-library-by-name (lambda (S2832@name) (or (S26e5@find-library-by (lambda (S2834@x) (fast-equal? (S26ad@library-name S2834@x) S2832@name))) (S26fb@find-external-library S2832@name)))) (set! S28b6@S26fd@find-library-by-name S26fd@find-library-by-name)) (begin (set! S26ff@library-exists? (lambda (S2836@name) (and (S26e5@find-library-by (lambda (S2838@x) (fast-equal? (S26ad@library-name S2838@x) S2836@name))) '#t))) (set! S28b7@S26ff@library-exists? S26ff@library-exists?)) (begin (set! S2701@find-library-by-spec/die (lambda (S283a@spec) (let ((S283c@id (car S283a@spec))) (or (S26e5@find-library-by (lambda (S283e@x) (eq? S283c@id (S26a9@library-id S283e@x)))) (assertion-violation '#f '"cannot find library with required spec" S283a@spec))))) (set! S28b8@S2701@find-library-by-spec/die S2701@find-library-by-spec/die)) (begin (set! S2703@label->binding-table (make-eq-hashtable)) (set! S28b9@S2703@label->binding-table S2703@label->binding-table)) (begin (set! S2705@install-library-record (lambda (S2840@lib) (begin (let ((S2842@exp-env (S26c5@library-env S2840@lib))) (for-each (lambda (S2844@x) (let ((S2846@label (car S2844@x)) (S2847@binding (cdr S2844@x))) (let ((S284a@binding (let ((S284c@t (car S2847@binding))) (if (memv S284c@t '(global)) (cons 'global (cons S2840@lib (cdr S2847@binding))) (if (memv S284c@t '(global-macro)) (cons 'global-macro (cons S2840@lib (cdr S2847@binding))) (if (memv S284c@t '(global-macro!)) (cons 'global-macro! (cons S2840@lib (cdr S2847@binding))) S2847@binding)))))) (begin (if (hashtable-ref S2703@label->binding-table S2846@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" S2846@label (hashtable-ref S2703@label->binding-table S2846@label '#f) S284a@binding) (exit)) (void)) (hashtable-set! S2703@label->binding-table S2846@label S284a@binding))))) S2842@exp-env)) ((S269b@current-library-collection) S2840@lib)))) (set! S28ba@S2705@install-library-record S2705@install-library-record)) (begin (set! S2707@install-library (lambda (S284e@id S284f@name S2850@ver S2851@imp* S2852@vis* S2853@inv* S2854@exp-subst S2855@exp-env S2856@visit-proc S2857@invoke-proc S2858@visit-code S2859@invoke-code S285a@visible? S285b@source-file-name) (let ((S286a@imp-lib* (map S2701@find-library-by-spec/die S2851@imp*)) (S286b@vis-lib* (map S2701@find-library-by-spec/die S2852@vis*)) (S286c@inv-lib* (map S2701@find-library-by-spec/die S2853@inv*))) (begin (if (not (and (symbol? S284e@id) (list? S284f@name) (list? S2850@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" S284e@id S284f@name S2850@ver) (void)) (if (S26ff@library-exists? S284f@name) (assertion-violation 'install-library '"library is already installed" S284f@name) (void)) (let ((S2870@lib (make-simple-struct 'library '15 (list S284e@id S284f@name S2850@ver S286a@imp-lib* S286b@vis-lib* S286c@inv-lib* S2854@exp-subst S2855@exp-env S2856@visit-proc S2857@invoke-proc S2858@visit-code S2859@invoke-code S285a@visible? S285b@source-file-name)))) (S2705@install-library-record S2870@lib)))))) (set! S28bb@S2707@install-library S2707@install-library)) (begin (set! S2709@imported-label->binding (lambda (S2872@lab) (hashtable-ref S2703@label->binding-table S2872@lab '#f))) (set! S28bc@S2709@imported-label->binding S2709@imported-label->binding)) (begin (set! S270b@invoke-library (lambda (S2874@lib) (let ((S2876@invoke (S26cd@library-invoke-state S2874@lib))) (if (procedure? S2876@invoke) (begin (S26cf@set-library-invoke-state! S2874@lib (lambda () (assertion-violation 'invoke '"circularity detected" S2874@lib))) (for-each S270b@invoke-library (S26bd@library-inv* S2874@lib)) (S26cf@set-library-invoke-state! S2874@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" S2874@lib))) (S2876@invoke) (S26cf@set-library-invoke-state! S2874@lib '#t)) (void))))) (set! S28bd@S270b@invoke-library S270b@invoke-library)) (begin (set! S270d@visit-library (lambda (S2878@lib) (let ((S287a@visit (S26c9@library-visit-state S2878@lib))) (if (procedure? S287a@visit) (begin (S26cb@set-library-visit-state! S2878@lib (lambda () (assertion-violation 'visit '"circularity detected" S2878@lib))) (for-each S270b@invoke-library (S26b9@library-vis* S2878@lib)) (S26cb@set-library-visit-state! S2878@lib (lambda () (assertion-violation 'invoke '"first visit did not return" S2878@lib))) (S287a@visit) (S26cb@set-library-visit-state! S2878@lib '#t)) (void))))) (set! S28be@S270d@visit-library S270d@visit-library)) (begin (set! S270f@invoke-library-by-spec (lambda (S287c@spec) (S270b@invoke-library (S2701@find-library-by-spec/die S287c@spec)))) (set! S28bf@S270f@invoke-library-by-spec S270f@invoke-library-by-spec)) (begin (set! S2711@installed-libraries (lambda S2884 (let ((S2885 (length S2884))) (if (= S2885 '1) (apply (lambda (S287e@all?) (let S2882@f ((S2880@ls ((S269b@current-library-collection)))) (if (null? S2880@ls) '() (if (or S287e@all? (S26d9@library-visible? (car S2880@ls))) (cons (car S2880@ls) (S2882@f (cdr S2880@ls))) (S2882@f (cdr S2880@ls)))))) S2884) (if (= S2885 '0) (apply (lambda () (S2711@installed-libraries '#f)) S2884) (error 'apply '"invalid arg count")))))) (set! S28c0@S2711@installed-libraries S2711@installed-libraries)) (begin (set! S2713@library-spec (lambda (S2886@x) (begin (if (not (S26a7@library? S2886@x)) (assertion-violation 'library-spec '"not a library" S2886@x) (void)) (list (S26a9@library-id S2886@x) (S26ad@library-name S2886@x) (S26b1@library-version S2886@x))))) (set! S28c1@S2713@library-spec S2713@library-spec)) (void))
(begin (set! S28c5@build-global-define (unspecified)) (set! S2936@build-lambda (unspecified)) (set! S2938@build-case-lambda (unspecified)) (set! S2966@build-sequence (unspecified)) (set! S2968@build-void (unspecified)) (set! S296a@build-letrec (unspecified)) (set! S296c@build-let (unspecified)) (set! S296e@build-named-let (unspecified)) (set! S2970@build-letrec* (unspecified)) (set! S2972@build-library-letrec* (unspecified)) (set! S2974@build-receive (unspecified)) (begin (set! S28c5@build-global-define (lambda (S2975@x) (S2968@build-void))) (set! S2a09@S28c5@build-global-define S28c5@build-global-define)) (begin (set! S2936@build-lambda (lambda (S2977@ae S2978@vars S2979@exp) (list 'lambda S2978@vars S2979@exp))) (set! S2a0a@S2936@build-lambda S2936@build-lambda)) (begin (set! S2938@build-case-lambda (lambda (S297d@ae S297e@vars* S297f@exp*) (let ((S2984@build-error '#f) (S2986@build-pred '#f) (S2988@build-apply '#f) (S298a@expand-case-lambda '#f)) (begin (set! S2984@build-error (lambda (S29bb@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! S2986@build-pred (lambda (S29a3@ae S29a4@n S29a5@vars) (call-with-values (lambda () (let S29b1@f3 ((S29ad@vars S29a5@vars) (S29ae@count '0)) (if (pair? S29ad@vars) (S29b1@f3 (cdr S29ad@vars) (+ S29ae@count '1)) (if (null? S29ad@vars) (values S29ae@count '=) (values S29ae@count '>=))))) (lambda (S29b3@S29aa S29b4@S29ac) (let ((S29b7@pred S29b4@S29ac) (S29b8@count S29b3@S29aa)) (list (list 'primitive S29b7@pred) S29a4@n (list 'quote S29b8@count))))))) (set! S2988@build-apply (lambda (S299b@ae S299c@g S299d@vars S299e@exp) (list '(primitive apply) (S2936@build-lambda S299b@ae S299d@vars S299e@exp) S299c@g))) (set! S298a@expand-case-lambda (lambda (S298b@ae S298c@vars S298d@exp*) (let ((S2991@g (gensym)) (S2992@n (gensym))) (list 'lambda S2991@g (S296c@build-let S298b@ae (list S2992@n) (list (list '(primitive length) S2991@g)) (let S2999@f4 ((S2995@vars* S297e@vars*) (S2996@exp* S298d@exp*)) (if (null? S2995@vars*) (S2984@build-error S298b@ae) (list 'if (S2986@build-pred S298b@ae S2992@n (car S2995@vars*)) (S2988@build-apply S298b@ae S2991@g (car S2995@vars*) (car S2996@exp*)) (S2999@f4 (cdr S2995@vars*) (cdr S2996@exp*)))))))))) (if (= (length S297f@exp*) '1) (S2936@build-lambda S297d@ae (car S297e@vars*) (car S297f@exp*)) (S298a@expand-case-lambda S297d@ae S297e@vars* S297f@exp*)))))) (set! S2a0b@S2938@build-case-lambda S2938@build-case-lambda)) (begin (set! S2966@build-sequence (lambda (S29bd@ae S29be@exps) (let S29c3@loop ((S29c1@exps S29be@exps)) (if (null? (cdr S29c1@exps)) (car S29c1@exps) (if (equal? (car S29c1@exps) (S2968@build-void)) (S29c3@loop (cdr S29c1@exps)) (cons 'begin S29c1@exps)))))) (set! S2a0c@S2966@build-sequence S2966@build-sequence)) (begin (set! S2968@build-void (lambda () '((primitive void)))) (set! S2a0d@S2968@build-void S2968@build-void)) (begin (set! S296a@build-letrec (lambda (S29c5@ae S29c6@vars S29c7@val-exps S29c8@body-exp) (if (null? S29c6@vars) S29c8@body-exp (list 'letrec (map list S29c6@vars S29c7@val-exps) S29c8@body-exp)))) (set! S2a0e@S296a@build-letrec S296a@build-letrec)) (begin (set! S296c@build-let (lambda (S29cd@ae S29ce@vars S29cf@val-exps S29d0@body-exp) (if (null? S29ce@vars) S29d0@body-exp (list 'let (map list S29ce@vars S29cf@val-exps) S29d0@body-exp)))) (set! S2a0f@S296c@build-let S296c@build-let)) (begin (set! S296e@build-named-let (lambda (S29d5@ae S29d6@name S29d7@vars S29d8@val-exps S29d9@body-exp) (list 'let S29d6@name (map list S29d7@vars S29d8@val-exps) S29d9@body-exp))) (set! S2a10@S296e@build-named-let S296e@build-named-let)) (begin (set! S2970@build-letrec* (lambda (S29df@ae S29e0@vars S29e1@val-exps S29e2@body-exp) (if (null? S29e0@vars) S29e2@body-exp (S296c@build-let S29df@ae S29e0@vars (map (lambda (S29e7@x) (list 'quote '#f)) S29e0@vars) (S2966@build-sequence S29df@ae (append (map (lambda (S29e9@lhs S29ea@rhs) (list 'set! S29e9@lhs S29ea@rhs)) S29e0@vars S29e1@val-exps) (list S29e2@body-exp))))))) (set! S2a11@S2970@build-letrec* S2970@build-letrec*)) (begin (set! S2972@build-library-letrec* (lambda (S29ed@ae S29ee@name S29ef@vars S29f0@locs S29f1@val-exps S29f2@body-exp) (cons 'begin (append (map (lambda (S29f9@var) (cons 'set! (cons S29f9@var '((unspecified))))) S29ef@vars) (append (map (lambda (S29fb@var S29fc@loc S29fd@val-exp) (list 'begin (list 'set! S29fb@var S29fd@val-exp) (list 'set! S29fc@loc S29fb@var))) S29ef@vars S29f0@locs S29f1@val-exps) (list S29f2@body-exp)))))) (set! S2a12@S2972@build-library-letrec* S2972@build-library-letrec*)) (begin (set! S2974@build-receive (lambda (S2a01@ae S2a02@vars S2a03@producer S2a04@body*) (begin (display '"************** in ") (cons 'receive (cons S2a02@vars (cons S2a03@producer S2a04@body*)))))) (set! S2a13@S2974@build-receive S2974@build-receive)) (void))
(begin (set! S2a22@file-options-macro (unspecified)) (set! S2a24@set-cons (unspecified)) (set! S2a26@set-union (unspecified)) (set! S2a2b@top-mark* (unspecified)) (set! S2a2d@top-marked? (unspecified)) (set! S2a2f@gen-lexical (unspecified)) (set! S2a31@gen-global (unspecified)) (set! S2a33@gen-label (unspecified)) (set! S2a35@gen-top-level-label (unspecified)) (set! S2a37@gen-define-label+loc (unspecified)) (set! S2a39@gen-define-label (unspecified)) (set! S2a43@rib? (unspecified)) (set! S2a45@rib-sym* (unspecified)) (set! S2a47@set-rib-sym*! (unspecified)) (set! S2a49@rib-mark** (unspecified)) (set! S2a4b@set-rib-mark**! (unspecified)) (set! S2a4d@rib-label* (unspecified)) (set! S2a4f@set-rib-label*! (unspecified)) (set! S2a51@rib-sealed/freq (unspecified)) (set! S2a53@set-rib-sealed/freq! (unspecified)) (set! S2a55@rib-cache (unspecified)) (set! S2a57@set-rib-cache! (unspecified)) (set! S2a59@dummy (unspecified)) (set! S2a5b@make-empty-rib (unspecified)) (set! S2a5d@extend-rib! (unspecified)) (set! S2a5f@extend-rib/nc! (unspecified)) (set! S2a61@make-rib-map (unspecified)) (set! S2a63@seal-rib! (unspecified)) (set! S2a65@unseal-rib! (unspecified)) (set! S2a67@make-full-rib (unspecified)) (set! S2a69@rp (unspecified)) (set! S2a73@stx? (unspecified)) (set! S2a75@stx-expr (unspecified)) (set! S2a77@set-stx-expr! (unspecified)) (set! S2a79@stx-mark* (unspecified)) (set! S2a7b@set-stx-mark*! (unspecified)) (set! S2a7d@stx-subst* (unspecified)) (set! S2a7f@set-stx-subst*! (unspecified)) (set! S2a81@stx-ae* (unspecified)) (set! S2a83@set-stx-ae*! (unspecified)) (set! S2a85@dummy (unspecified)) (set! S2a87@datum->stx (unspecified)) (set! S2a89@gen-mark (unspecified)) (set! S2a8b@anti-mark (unspecified)) (set! S2a8d@anti-mark? (unspecified)) (set! S2a8f@mkstx (unspecified)) (set! S2a91@add-mark (unspecified)) (set! S2a93@add-subst (unspecified)) (set! S2a95@syntax-kind? (unspecified)) (set! S2a97@syntax-vector->list (unspecified)) (set! S2a99@syntax-pair? (unspecified)) (set! S2a9b@syntax-vector? (unspecified)) (set! S2a9d@syntax-null? (unspecified)) (set! S2a9f@syntax-list? (unspecified)) (set! S2aa1@syntax-car (unspecified)) (set! S2aa3@syntax-cdr (unspecified)) (set! S2aa5@syntax->list (unspecified)) (set! S2aa7@id? (unspecified)) (set! S2aa9@id->sym (unspecified)) (set! S2aab@bound-id=? (unspecified)) (set! S2aad@free-id=? (unspecified)) (set! S2aaf@valid-bound-ids? (unspecified)) (set! S2ab1@distinct-bound-ids? (unspecified)) (set! S2ab3@bound-id-member? (unspecified)) (set! S2ab5@self-evaluating? (unspecified)) (set! S2ab7@strip-annotations (unspecified)) (set! S2ab9@strip (unspecified)) (set! S2abb@stx->datum (unspecified)) (set! S2abd@id->label (unspecified)) (set! S2abf@label->binding (unspecified)) (set! S2ac1@make-binding (unspecified)) (set! S2ac3@binding-type (unspecified)) (set! S2ac5@binding-value (unspecified)) (set! S2ac7@raise-unbound-error (unspecified)) (set! S2ac9@syntax-type (unspecified)) (set! S2ad7@sanitize-binding (unspecified)) (set! S2ad9@make-variable-transformer (unspecified)) (set! S2adb@variable-transformer? (unspecified)) (set! S2add@variable-transformer-procedure (unspecified)) (set! S2adf@make-eval-transformer (unspecified)) (set! S2c30@parse-define (unspecified)) (set! S2c32@parse-define-syntax (unspecified)) (set! S2c34@scheme-stx-hashtable (unspecified)) (set! S2c36@scheme-stx (unspecified)) (set! S2c38@lexical-var (unspecified)) (set! S2c3a@lexical-mutable? (unspecified)) (set! S2c3c@set-lexical-mutable! (unspecified)) (set! S2c3e@add-lexical (unspecified)) (set! S2c40@add-lexicals (unspecified)) (set! S2c42@letrec-helper (unspecified)) (set! S2c44@let-transformer (unspecified)) (set! S2c46@letrec-transformer (unspecified)) (set! S2c48@letrec*-transformer (unspecified)) (set! S2c4a@fluid-let-syntax-transformer (unspecified)) (set! S2c4c@type-descriptor-transformer (unspecified)) (set! S2c4e@record-type-descriptor-transformer (unspecified)) (set! S2c50@record-constructor-descriptor-transformer (unspecified)) (set! S2c52@when-macro (unspecified)) (set! S2c54@unless-macro (unspecified)) (set! S2c56@if-transformer (unspecified)) (set! S2c58@and-transformer (unspecified)) (set! S2c5a@or-transformer (unspecified)) (set! S2c5c@case-macro (unspecified)) (set! S2c5e@quote-transformer (unspecified)) (set! S2c60@case-lambda-transformer (unspecified)) (set! S2c62@lambda-transformer (unspecified)) (set! S2c64@bless (unspecified)) (set! S2c66@with-syntax-macro (unspecified)) (set! S2c68@invalid-fmls-error (unspecified)) (set! S2c6a@let-macro (unspecified)) (set! S2c6c@let-values-macro (unspecified)) (set! S2c6e@let*-values-macro (unspecified)) (set! S2c70@trace-lambda-macro (unspecified)) (set! S2c72@trace-define-macro (unspecified)) (set! S2c74@trace-define-syntax-macro (unspecified)) (set! S2c76@trace-let/rec-syntax (unspecified)) (set! S2c78@trace-let-syntax-macro (unspecified)) (set! S2c7a@trace-letrec-syntax-macro (unspecified)) (set! S2c7c@guard-macro (unspecified)) (set! S2c7e@define-enumeration-macro (unspecified)) (set! S2c80@time-macro (unspecified)) (set! S2c82@delay-macro (unspecified)) (set! S2c84@assert-macro (unspecified)) (set! S2c86@endianness-macro (unspecified)) (set! S2c88@identifier-syntax-macro (unspecified)) (set! S2c8a@do-macro (unspecified)) (set! S2c8c@let*-macro (unspecified)) (set! S2c8e@or-macro (unspecified)) (set! S2c90@and-macro (unspecified)) (set! S2c92@cond-macro (unspecified)) (set! S2c94@do-include (unspecified)) (set! S2c96@include-macro (unspecified)) (set! S2c98@include-into-macro (unspecified)) (set! S2c9a@syntax-rules-macro (unspecified)) (set! S2c9c@quasiquote-macro (unspecified)) (set! S2c9e@quasisyntax-macro (unspecified)) (set! S2ca0@define-struct-macro (unspecified)) (set! S2ca2@define-record-type-macro (unspecified)) (set! S2ca4@define-condition-type-macro (unspecified)) (set! S2ca6@incorrect-usage-macro (unspecified)) (set! S2ca8@parameterize-macro (unspecified)) (set! S2caa@foreign-call-transformer (unspecified)) (set! S2cac@convert-pattern (unspecified)) (set! S2cae@syntax-dispatch (unspecified)) (set! S2cb0@ellipsis? (unspecified)) (set! S2cb2@underscore? (unspecified)) (set! S2cb4@verify-literals (unspecified)) (set! S2cb6@syntax-case-transformer (unspecified)) (set! S2cb8@ellipsis-map (unspecified)) (set! S2cba@syntax-transformer (unspecified)) (set! S2cbc@core-macro-transformer (unspecified)) (set! S2cbe@symbol-macro (unspecified)) (set! S2cc0@macro-transformer (unspecified)) (set! S2cc2@local-macro-transformer (unspecified)) (set! S2cc4@do-macro-call (unspecified)) (set! S2cc6@chi-macro (unspecified)) (set! S2cc8@chi-local-macro (unspecified)) (set! S2cca@chi-global-macro (unspecified)) (set! S2ccc@chi-expr* (unspecified)) (set! S2cce@chi-application (unspecified)) (set! S2cd0@chi-expr (unspecified)) (set! S2cd2@chi-set! (unspecified)) (set! S2cd4@verify-formals (unspecified)) (set! S2cd6@chi-lambda-clause (unspecified)) (set! S2cd8@chi-lambda-clause* (unspecified)) (set! S2cda@chi-defun (unspecified)) (set! S2cdc@chi-rhs (unspecified)) (set! S2cde@expand-interaction-rhs*/init* (unspecified)) (set! S2ce0@chi-rhs* (unspecified)) (set! S2ce2@find-bound=? (unspecified)) (set! S2ce4@find-dups (unspecified)) (set! S2ce6@chi-internal (unspecified)) (set! S2ce8@parse-module (unspecified)) (set! S2cf2@module-interface? (unspecified)) (set! S2cf4@module-interface-first-mark (unspecified)) (set! S2cf6@set-module-interface-first-mark! (unspecified)) (set! S2cf8@module-interface-exp-id-vec (unspecified)) (set! S2cfa@set-module-interface-exp-id-vec! (unspecified)) (set! S2cfc@module-interface-exp-lab-vec (unspecified)) (set! S2cfe@set-module-interface-exp-lab-vec! (unspecified)) (set! S2d00@dummy (unspecified)) (set! S2d02@module-interface-exp-id* (unspecified)) (set! S2d04@chi-internal-module (unspecified)) (set! S2d06@chi-body* (unspecified)) (set! S2d08@expand-transformer (unspecified)) (set! S2d0a@parse-exports (unspecified)) (set! S2d0c@parse-library-name (unspecified)) (set! S2d0e@parse-library (unspecified)) (set! S2d10@parse-import-spec* (unspecified)) (set! S2d12@make-top-rib (unspecified)) (set! S2d14@make-collector (unspecified)) (set! S2d16@inv-collector (unspecified)) (set! S2d18@vis-collector (unspecified)) (set! S2d1a@imp-collector (unspecified)) (set! S2d1c@chi-library-internal (unspecified)) (set! S2d1e@chi-interaction-expr (unspecified)) (set! S2d20@library-body-expander (unspecified)) (set! S2d22@core-library-expander (unspecified)) (set! S2d24@parse-top-level-program (unspecified)) (set! S2d26@top-level-expander (unspecified)) (set! S2d28@rp (unspecified)) (set! S2d32@env? (unspecified)) (set! S2d34@env-names (unspecified)) (set! S2d36@set-env-names! (unspecified)) (set! S2d38@env-labels (unspecified)) (set! S2d3a@set-env-labels! (unspecified)) (set! S2d3c@env-itc (unspecified)) (set! S2d3e@set-env-itc! (unspecified)) (set! S2d40@dummy (unspecified)) (set! S2d42@rp (unspecified)) (set! S2d4c@interaction-env? (unspecified)) (set! S2d4e@interaction-env-rib (unspecified)) (set! S2d50@set-interaction-env-rib! (unspecified)) (set! S2d52@interaction-env-r (unspecified)) (set! S2d54@set-interaction-env-r! (unspecified)) (set! S2d56@interaction-env-locs (unspecified)) (set! S2d58@set-interaction-env-locs! (unspecified)) (set! S2d5a@dummy (unspecified)) (set! S2d5c@interaction-environment-symbols (unspecified)) (set! S2d5e@environment-bindings (unspecified)) (set! S2d60@parse-binding (unspecified)) (set! S2d62@environment? (unspecified)) (set! S2d64@environment-symbols (unspecified)) (set! S2d66@environment (unspecified)) (set! S2d68@null-environment (unspecified)) (set! S2d6a@scheme-report-environment (unspecified)) (set! S2d6c@expand (unspecified)) (set! S2d6e@eval (unspecified)) (set! S2d70@library-expander (unspecified)) (set! S2d72@boot-library-expand (unspecified)) (set! S2d74@rev-map-append (unspecified)) (set! S2d76@build-exports (unspecified)) (set! S2d78@make-export-subst (unspecified)) (set! S2d7a@make-export-env/macros (unspecified)) (set! S2d7c@generate-temporaries (unspecified)) (set! S2d7e@free-identifier=? (unspecified)) (set! S2d80@bound-identifier=? (unspecified)) (set! S2d82@make-source-condition (unspecified)) (set! S2d84@extract-position-condition (unspecified)) (set! S2d86@expression-position (unspecified)) (set! S2d88@assertion-error (unspecified)) (set! S2d8a@syntax-error (unspecified)) (set! S2d8c@syntax-violation* (unspecified)) (set! S2d8e@syntax-violation (unspecified)) (set! S2d90@identifier? (unspecified)) (set! S2d92@datum->syntax (unspecified)) (set! S2d94@syntax->datum (unspecified)) (set! S2d96@ungensym-all (unspecified)) (set! S2d98@compile-r6rs-top-level (unspecified)) (set! S2d9a@pre-compile-r6rs-top-level (unspecified)) (set! S2d9c@interaction-environment (unspecified)) (set! S2d9e@top-level-context (unspecified)) (begin (set! S2a22@file-options-macro (lambda (S2d9f@x) (let ((S2da2@valid-option? '#f)) (begin (set! S2da2@valid-option? (lambda (S2dab@x) (and (S2aa7@id? S2dab@x) (memq (S2aa9@id->sym S2dab@x) '(no-fail no-create no-truncate))))) (let ((S2da3@t S2d9f@x)) (let ((S2da5@ls/false (S2cae@syntax-dispatch S2da3@t '(_ . each-any)))) (if (and S2da5@ls/false (apply (lambda (S2da7@opt*) (for-all S2da2@valid-option? S2da7@opt*)) S2da5@ls/false)) (apply (lambda (S2da9@opt*) (S2c64@bless (list 'make-file-options (list 'quote S2da9@opt*)))) S2da5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S2da3@t)))))))) (set! S46f3@S2a22@file-options-macro S2a22@file-options-macro)) (begin (set! S2a24@set-cons (lambda (S2dad@x S2dae@ls) (if (memq S2dad@x S2dae@ls) S2dae@ls (cons S2dad@x S2dae@ls)))) (set! S46f4@S2a24@set-cons S2a24@set-cons)) (begin (set! S2a26@set-union (lambda (S2db1@ls1 S2db2@ls2) (if (null? S2db1@ls1) S2db2@ls2 (if (memq (car S2db1@ls1) S2db2@ls2) (S2a26@set-union (cdr S2db1@ls1) S2db2@ls2) (cons (car S2db1@ls1) (S2a26@set-union (cdr S2db1@ls1) S2db2@ls2)))))) (set! S46f5@S2a26@set-union S2a26@set-union)) (begin (set! S2a2b@top-mark* '(top)) (set! S46f6@S2a2b@top-mark* S2a2b@top-mark*)) (begin (set! S2a2d@top-marked? (lambda (S2db5@m*) (memq 'top S2db5@m*))) (set! S46f7@S2a2d@top-marked? S2a2d@top-marked?)) (begin (set! S2a2f@gen-lexical (lambda (S2db7@sym) (if (symbol? S2db7@sym) (gensym S2db7@sym) (if (S2a73@stx? S2db7@sym) (S2a2f@gen-lexical (S2aa9@id->sym S2db7@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" S2db7@sym))))) (set! S46f8@S2a2f@gen-lexical S2a2f@gen-lexical)) (begin (set! S2a31@gen-global (lambda (S2db9@x) (S2a2f@gen-lexical S2db9@x))) (set! S46f9@S2a31@gen-global S2a31@gen-global)) (begin (set! S2a33@gen-label (lambda (S2dbb@_) (gensym))) (set! S46fa@S2a33@gen-label S2a33@gen-label)) (begin (set! S2a35@gen-top-level-label (lambda (S2dbd@id S2dbe@rib) (let ((S2dc2@find '#f)) (begin (set! S2dc2@find (lambda (S2dcd@sym S2dce@mark* S2dcf@sym* S2dd0@mark** S2dd1@label*) (and (pair? S2dcf@sym*) (if (and (eq? S2dcd@sym (car S2dcf@sym*)) (same-marks? S2dce@mark* (car S2dd0@mark**))) (car S2dd1@label*) (S2dc2@find S2dcd@sym S2dce@mark* (cdr S2dcf@sym*) (cdr S2dd0@mark**) (cdr S2dd1@label*)))))) (let ((S2dc3@sym (S2aa9@id->sym S2dbd@id)) (S2dc4@mark* (S2a79@stx-mark* S2dbd@id))) (let ((S2dc7@sym* (S2a45@rib-sym* S2dbe@rib))) (let ((S2dc9@t (and (memq S2dc3@sym (S2a45@rib-sym* S2dbe@rib)) (S2dc2@find S2dc3@sym S2dc4@mark* S2dc7@sym* (S2a49@rib-mark** S2dbe@rib) (S2a4d@rib-label* S2dbe@rib))))) (if S2dc9@t ((lambda (S2dcb@label) (if (S28bc@S2709@imported-label->binding S2dcb@label) (gensym) S2dcb@label)) S2dc9@t) (gensym))))))))) (set! S46fb@S2a35@gen-top-level-label S2a35@gen-top-level-label)) (begin (set! S2a37@gen-define-label+loc (lambda (S2dd7@id S2dd8@rib) (let ((S2ddb@t (S2d9e@top-level-context))) (if S2ddb@t ((lambda (S2ddd@env) (let ((S2ddf@label (S2a35@gen-top-level-label S2dd7@id S2dd8@rib)) (S2de0@locs (S2d56@interaction-env-locs S2ddd@env))) (values S2ddf@label (let ((S2de3@t (assq S2ddf@label S2de0@locs))) (if S2de3@t (cdr S2de3@t) (let ((S2de5@loc (S2a2f@gen-lexical S2dd7@id))) (begin (S2d58@set-interaction-env-locs! S2ddd@env (cons (cons S2ddf@label S2de5@loc) S2de0@locs)) S2de5@loc))))))) S2ddb@t) (values (gensym) (S2a2f@gen-lexical S2dd7@id)))))) (set! S46fc@S2a37@gen-define-label+loc S2a37@gen-define-label+loc)) (begin (set! S2a39@gen-define-label (lambda (S2de7@id S2de8@rib) (if (S2d9e@top-level-context) (S2a35@gen-top-level-label S2de7@id S2de8@rib) (gensym)))) (set! S46fd@S2a39@gen-define-label S2a39@gen-define-label)) (begin (set! S2a43@rib? (lambda (S2deb@x) (and (simple-struct? S2deb@x) (eq? (simple-struct-name S2deb@x) 'rib)))) (set! S46fe@S2a43@rib? S2a43@rib?)) (begin (set! S2a45@rib-sym* (lambda (S2ded@x) (simple-struct-ref S2ded@x '0))) (set! S46ff@S2a45@rib-sym* S2a45@rib-sym*)) (begin (set! S2a47@set-rib-sym*! (lambda (S2def@x S2df0@val) (simple-struct-set! S2def@x '0 S2df0@val))) (set! S4700@S2a47@set-rib-sym*! S2a47@set-rib-sym*!)) (begin (set! S2a49@rib-mark** (lambda (S2df3@x) (simple-struct-ref S2df3@x '1))) (set! S4701@S2a49@rib-mark** S2a49@rib-mark**)) (begin (set! S2a4b@set-rib-mark**! (lambda (S2df5@x S2df6@val) (simple-struct-set! S2df5@x '1 S2df6@val))) (set! S4702@S2a4b@set-rib-mark**! S2a4b@set-rib-mark**!)) (begin (set! S2a4d@rib-label* (lambda (S2df9@x) (simple-struct-ref S2df9@x '2))) (set! S4703@S2a4d@rib-label* S2a4d@rib-label*)) (begin (set! S2a4f@set-rib-label*! (lambda (S2dfb@x S2dfc@val) (simple-struct-set! S2dfb@x '2 S2dfc@val))) (set! S4704@S2a4f@set-rib-label*! S2a4f@set-rib-label*!)) (begin (set! S2a51@rib-sealed/freq (lambda (S2dff@x) (simple-struct-ref S2dff@x '3))) (set! S4705@S2a51@rib-sealed/freq S2a51@rib-sealed/freq)) (begin (set! S2a53@set-rib-sealed/freq! (lambda (S2e01@x S2e02@val) (simple-struct-set! S2e01@x '3 S2e02@val))) (set! S4706@S2a53@set-rib-sealed/freq! S2a53@set-rib-sealed/freq!)) (begin (set! S2a55@rib-cache (lambda (S2e05@x) (simple-struct-ref S2e05@x '4))) (set! S4707@S2a55@rib-cache S2a55@rib-cache)) (begin (set! S2a57@set-rib-cache! (lambda (S2e07@x S2e08@val) (simple-struct-set! S2e07@x '4 S2e08@val))) (set! S4708@S2a57@set-rib-cache! S2a57@set-rib-cache!)) (begin (set! S2a59@dummy '3) (set! S4709@S2a59@dummy S2a59@dummy)) (begin (set! S2a5b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! S470a@S2a5b@make-empty-rib S2a5b@make-empty-rib)) (begin (set! S2a5d@extend-rib! (lambda (S2e0b@rib S2e0c@id S2e0d@label) (let ((S2e12@find '#f)) (begin (set! S2e12@find (lambda (S2e1f@sym S2e20@mark* S2e21@sym* S2e22@mark** S2e23@label*) (and (pair? S2e21@sym*) (if (and (eq? S2e1f@sym (car S2e21@sym*)) (same-marks? S2e20@mark* (car S2e22@mark**))) S2e23@label* (S2e12@find S2e1f@sym S2e20@mark* (cdr S2e21@sym*) (cdr S2e22@mark**) (cdr S2e23@label*)))))) (begin (if (S2a51@rib-sealed/freq S2e0b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" S2e0b@rib) (void)) (let ((S2e13@sym (S2aa9@id->sym S2e0c@id)) (S2e14@mark* (S2a79@stx-mark* S2e0c@id))) (let ((S2e17@sym* (S2a45@rib-sym* S2e0b@rib))) (let ((S2e19@t (and (memq S2e13@sym (S2a45@rib-sym* S2e0b@rib)) (S2e12@find S2e13@sym S2e14@mark* S2e17@sym* (S2a49@rib-mark** S2e0b@rib) (S2a4d@rib-label* S2e0b@rib))))) (if S2e19@t ((lambda (S2e1b@p) (if (not (eq? S2e0d@label (car S2e1b@p))) (if (S2d9e@top-level-context) (set-car! S2e1b@p S2e0d@label) (S2d8e@syntax-violation '#f '"multiple definitions of identifier" S2e0c@id)) (void))) S2e19@t) (begin (if (S2a55@rib-cache S2e0b@rib) (hashtable-update! (S2a55@rib-cache S2e0b@rib) S2e13@sym (lambda (S2e1d@e) (cons (cons S2e14@mark* S2e0d@label) S2e1d@e)) '()) (void)) (S2a47@set-rib-sym*! S2e0b@rib (cons S2e13@sym S2e17@sym*)) (S2a4b@set-rib-mark**! S2e0b@rib (cons S2e14@mark* (S2a49@rib-mark** S2e0b@rib))) (S2a4f@set-rib-label*! S2e0b@rib (cons S2e0d@label (S2a4d@rib-label* S2e0b@rib))))))))))))) (set! S470b@S2a5d@extend-rib! S2a5d@extend-rib!)) (begin (set! S2a5f@extend-rib/nc! (lambda (S2e29@rib S2e2a@id S2e2b@label) (let ((S2e2f@sym (S2aa9@id->sym S2e2a@id)) (S2e30@mark* (S2a79@stx-mark* S2e2a@id))) (let ((S2e33@sym* (S2a45@rib-sym* S2e29@rib))) (begin (if (S2a55@rib-cache S2e29@rib) (hashtable-update! (S2a55@rib-cache S2e29@rib) S2e2f@sym (lambda (S2e35@e) (cons (cons S2e30@mark* S2e2b@label) S2e35@e)) '()) (void)) (S2a47@set-rib-sym*! S2e29@rib (cons S2e2f@sym S2e33@sym*)) (S2a4b@set-rib-mark**! S2e29@rib (cons S2e30@mark* (S2a49@rib-mark** S2e29@rib))) (S2a4f@set-rib-label*! S2e29@rib (cons S2e2b@label (S2a4d@rib-label* S2e29@rib)))))))) (set! S470c@S2a5f@extend-rib/nc! S2a5f@extend-rib/nc!)) (begin (set! S2a61@make-rib-map (lambda (S2e37@sym*) (let ((S2e39@ht (make-eq-hashtable))) (let S2e3f@f ((S2e3b@i '0) (S2e3c@sym* S2e37@sym*)) (if (null? S2e3c@sym*) S2e39@ht (begin (hashtable-update! S2e39@ht (car S2e3c@sym*) (lambda (S2e41@x) (cons S2e3b@i S2e41@x)) '()) (S2e3f@f (+ S2e3b@i '1) (cdr S2e3c@sym*)))))))) (set! S470d@S2a61@make-rib-map S2a61@make-rib-map)) (begin (set! S2a63@seal-rib! (lambda (S2e43@rib) (let ((S2e45@sym* (S2a45@rib-sym* S2e43@rib))) (if (not (null? S2e45@sym*)) (begin (S2a47@set-rib-sym*! S2e43@rib (list->vector S2e45@sym*)) (S2a4b@set-rib-mark**! S2e43@rib (list->vector (S2a49@rib-mark** S2e43@rib))) (S2a4f@set-rib-label*! S2e43@rib (list->vector (S2a4d@rib-label* S2e43@rib))) (S2a53@set-rib-sealed/freq! S2e43@rib (S2a61@make-rib-map S2e45@sym*))) (void))))) (set! S470e@S2a63@seal-rib! S2a63@seal-rib!)) (begin (set! S2a65@unseal-rib! (lambda (S2e47@rib) (if (S2a51@rib-sealed/freq S2e47@rib) (begin (S2a53@set-rib-sealed/freq! S2e47@rib '#f) (S2a47@set-rib-sym*! S2e47@rib (vector->list (S2a45@rib-sym* S2e47@rib))) (S2a4b@set-rib-mark**! S2e47@rib (vector->list (S2a49@rib-mark** S2e47@rib))) (S2a4f@set-rib-label*! S2e47@rib (vector->list (S2a4d@rib-label* S2e47@rib)))) (void)))) (set! S470f@S2a65@unseal-rib! S2a65@unseal-rib!)) (begin (set! S2a67@make-full-rib (lambda (S2e49@id* S2e4a@label*) (let ((S2e4d@r (make-simple-struct 'rib '6 (list (map S2aa9@id->sym S2e49@id*) (map S2a79@stx-mark* S2e49@id*) S2e4a@label* '#f '#f)))) (begin (S2a63@seal-rib! S2e4d@r) S2e4d@r)))) (set! S4710@S2a67@make-full-rib S2a67@make-full-rib)) (begin (set! S2a69@rp (S25ee@S24ca@make-record-printer 'stx (lambda (S2e4f@x S2e50@p S2e51@wr) (begin (display '"#<syntax " S2e50@p) (write (S2abb@stx->datum S2e4f@x) S2e50@p) (let ((S2e55@expr (S2a75@stx-expr S2e4f@x))) (if (S25e6@S24ba@annotation? S2e55@expr) (let ((S2e57@src (S25e7@S24bc@annotation-source S2e55@expr))) (if (pair? S2e57@src) (begin (display '" [" S2e50@p) (display (cdr S2e57@src) S2e50@p) (display '" of " S2e50@p) (display (car S2e57@src) S2e50@p) (display '"]" S2e50@p)) (void))) (void))) (display '">" S2e50@p))))) (set! S4711@S2a69@rp S2a69@rp)) (begin (set! S2a73@stx? (lambda (S2e59@x) (and (simple-struct? S2e59@x) (eq? (simple-struct-name S2e59@x) 'stx)))) (set! S4712@S2a73@stx? S2a73@stx?)) (begin (set! S2a75@stx-expr (lambda (S2e5b@x) (simple-struct-ref S2e5b@x '0))) (set! S4713@S2a75@stx-expr S2a75@stx-expr)) (begin (set! S2a77@set-stx-expr! (lambda (S2e5d@x S2e5e@val) (simple-struct-set! S2e5d@x '0 S2e5e@val))) (set! S4714@S2a77@set-stx-expr! S2a77@set-stx-expr!)) (begin (set! S2a79@stx-mark* (lambda (S2e61@x) (simple-struct-ref S2e61@x '1))) (set! S4715@S2a79@stx-mark* S2a79@stx-mark*)) (begin (set! S2a7b@set-stx-mark*! (lambda (S2e63@x S2e64@val) (simple-struct-set! S2e63@x '1 S2e64@val))) (set! S4716@S2a7b@set-stx-mark*! S2a7b@set-stx-mark*!)) (begin (set! S2a7d@stx-subst* (lambda (S2e67@x) (simple-struct-ref S2e67@x '2))) (set! S4717@S2a7d@stx-subst* S2a7d@stx-subst*)) (begin (set! S2a7f@set-stx-subst*! (lambda (S2e69@x S2e6a@val) (simple-struct-set! S2e69@x '2 S2e6a@val))) (set! S4718@S2a7f@set-stx-subst*! S2a7f@set-stx-subst*!)) (begin (set! S2a81@stx-ae* (lambda (S2e6d@x) (simple-struct-ref S2e6d@x '3))) (set! S4719@S2a81@stx-ae* S2a81@stx-ae*)) (begin (set! S2a83@set-stx-ae*! (lambda (S2e6f@x S2e70@val) (simple-struct-set! S2e6f@x '3 S2e70@val))) (set! S471a@S2a83@set-stx-ae*! S2a83@set-stx-ae*!)) (begin (set! S2a85@dummy '3) (set! S471b@S2a85@dummy S2a85@dummy)) (begin (set! S2a87@datum->stx (lambda (S2e73@id S2e74@datum) (make-simple-struct 'stx '5 (list S2e74@datum (S2a79@stx-mark* S2e73@id) (S2a7d@stx-subst* S2e73@id) (S2a81@stx-ae* S2e73@id))))) (set! S471c@S2a87@datum->stx S2a87@datum->stx)) (begin (set! S2a89@gen-mark (lambda () (string '#\m))) (set! S471d@S2a89@gen-mark S2a89@gen-mark)) (begin (set! S2a8b@anti-mark '#f) (set! S471e@S2a8b@anti-mark S2a8b@anti-mark)) (begin (set! S2a8d@anti-mark? not) (set! S471f@S2a8d@anti-mark? S2a8d@anti-mark?)) (begin (set! S2a8f@mkstx (lambda (S2e77@e S2e78@m* S2e79@s* S2e7a@ae*) (if (and (S2a73@stx? S2e77@e) (not (S2a2d@top-marked? S2e78@m*))) (call-with-values (lambda () (join-wraps S2e78@m* S2e79@s* S2e7a@ae* S2e77@e)) (lambda (S2e85@S2e80 S2e86@S2e82 S2e87@S2e84) (let ((S2e8b@ae* S2e87@S2e84) (S2e8c@s* S2e86@S2e82) (S2e8d@m* S2e85@S2e80)) (make-simple-struct 'stx '5 (list (S2a75@stx-expr S2e77@e) S2e8d@m* S2e8c@s* S2e8b@ae*))))) (make-simple-struct 'stx '5 (list S2e77@e S2e78@m* S2e79@s* S2e7a@ae*))))) (set! S4720@S2a8f@mkstx S2a8f@mkstx)) (begin (set! S2a91@add-mark (lambda (S2e91@m S2e92@e S2e93@ae) (S2a8f@mkstx S2e92@e (list S2e91@m) '(shift) (list S2e93@ae)))) (set! S4721@S2a91@add-mark S2a91@add-mark)) (begin (set! S2a93@add-subst (lambda (S2e97@subst S2e98@e) (S2a8f@mkstx S2e98@e '() (list S2e97@subst) '()))) (set! S4722@S2a93@add-subst S2a93@add-subst)) (begin (set! S2a95@syntax-kind? (lambda (S2e9b@x S2e9c@p?) (if (S2a73@stx? S2e9b@x) (S2a95@syntax-kind? (S2a75@stx-expr S2e9b@x) S2e9c@p?) (if (S25e6@S24ba@annotation? S2e9b@x) (S2a95@syntax-kind? (S25e8@S24be@annotation-expression S2e9b@x) S2e9c@p?) (S2e9c@p? S2e9b@x))))) (set! S4723@S2a95@syntax-kind? S2a95@syntax-kind?)) (begin (set! S2a97@syntax-vector->list (lambda (S2e9f@x) (if (S2a73@stx? S2e9f@x) (let ((S2ea1@ls (S2a97@syntax-vector->list (S2a75@stx-expr S2e9f@x))) (S2ea2@m* (S2a79@stx-mark* S2e9f@x)) (S2ea3@s* (S2a7d@stx-subst* S2e9f@x)) (S2ea4@ae* (S2a81@stx-ae* S2e9f@x))) (map (lambda (S2ea9@x) (S2a8f@mkstx S2ea9@x S2ea2@m* S2ea3@s* S2ea4@ae*)) S2ea1@ls)) (if (S25e6@S24ba@annotation? S2e9f@x) (S2a97@syntax-vector->list (S25e8@S24be@annotation-expression S2e9f@x)) (if (vector? S2e9f@x) (vector->list S2e9f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" S2e9f@x)))))) (set! S4724@S2a97@syntax-vector->list S2a97@syntax-vector->list)) (begin (set! S2a99@syntax-pair? (lambda (S2eab@x) (S2a95@syntax-kind? S2eab@x pair?))) (set! S4725@S2a99@syntax-pair? S2a99@syntax-pair?)) (begin (set! S2a9b@syntax-vector? (lambda (S2ead@x) (S2a95@syntax-kind? S2ead@x vector?))) (set! S4726@S2a9b@syntax-vector? S2a9b@syntax-vector?)) (begin (set! S2a9d@syntax-null? (lambda (S2eaf@x) (S2a95@syntax-kind? S2eaf@x null?))) (set! S4727@S2a9d@syntax-null? S2a9d@syntax-null?)) (begin (set! S2a9f@syntax-list? (lambda (S2eb1@x) (or (S2a9d@syntax-null? S2eb1@x) (and (S2a99@syntax-pair? S2eb1@x) (S2a9f@syntax-list? (S2aa3@syntax-cdr S2eb1@x)))))) (set! S4728@S2a9f@syntax-list? S2a9f@syntax-list?)) (begin (set! S2aa1@syntax-car (lambda (S2eb3@x) (if (S2a73@stx? S2eb3@x) (S2a8f@mkstx (S2aa1@syntax-car (S2a75@stx-expr S2eb3@x)) (S2a79@stx-mark* S2eb3@x) (S2a7d@stx-subst* S2eb3@x) (S2a81@stx-ae* S2eb3@x)) (if (S25e6@S24ba@annotation? S2eb3@x) (S2aa1@syntax-car (S25e8@S24be@annotation-expression S2eb3@x)) (if (pair? S2eb3@x) (car S2eb3@x) (assertion-violation 'syntax-car '"BUG: not a pair" S2eb3@x)))))) (set! S4729@S2aa1@syntax-car S2aa1@syntax-car)) (begin (set! S2aa3@syntax-cdr (lambda (S2eb5@x) (if (S2a73@stx? S2eb5@x) (S2a8f@mkstx (S2aa3@syntax-cdr (S2a75@stx-expr S2eb5@x)) (S2a79@stx-mark* S2eb5@x) (S2a7d@stx-subst* S2eb5@x) (S2a81@stx-ae* S2eb5@x)) (if (S25e6@S24ba@annotation? S2eb5@x) (S2aa3@syntax-cdr (S25e8@S24be@annotation-expression S2eb5@x)) (if (pair? S2eb5@x) (cdr S2eb5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" S2eb5@x)))))) (set! S472a@S2aa3@syntax-cdr S2aa3@syntax-cdr)) (begin (set! S2aa5@syntax->list (lambda (S2eb7@x) (if (S2a99@syntax-pair? S2eb7@x) (cons (S2aa1@syntax-car S2eb7@x) (S2aa5@syntax->list (S2aa3@syntax-cdr S2eb7@x))) (if (S2a9d@syntax-null? S2eb7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" S2eb7@x))))) (set! S472b@S2aa5@syntax->list S2aa5@syntax->list)) (begin (set! S2aa7@id? (lambda (S2eb9@x) (and (S2a73@stx? S2eb9@x) (symbol? (S2a75@stx-expr S2eb9@x))))) (set! S472c@S2aa7@id? S2aa7@id?)) (begin (set! S2aa9@id->sym (lambda (S2ebb@x) (S2a75@stx-expr S2ebb@x))) (set! S472d@S2aa9@id->sym S2aa9@id->sym)) (begin (set! S2aab@bound-id=? (lambda (S2ebd@x S2ebe@y) (and (eq? (S2aa9@id->sym S2ebd@x) (S2aa9@id->sym S2ebe@y)) (same-marks? (S2a79@stx-mark* S2ebd@x) (S2a79@stx-mark* S2ebe@y))))) (set! S472e@S2aab@bound-id=? S2aab@bound-id=?)) (begin (set! S2aad@free-id=? (lambda (S2ec1@i S2ec2@j) (let ((S2ec5@t0 (id->real-label S2ec1@i)) (S2ec6@t1 (id->real-label S2ec2@j))) (if (or S2ec5@t0 S2ec6@t1) (eq? S2ec5@t0 S2ec6@t1) (eq? (S2aa9@id->sym S2ec1@i) (S2aa9@id->sym S2ec2@j)))))) (set! S472f@S2aad@free-id=? S2aad@free-id=?)) (begin (set! S2aaf@valid-bound-ids? (lambda (S2ec9@id*) (and (for-all S2aa7@id? S2ec9@id*) (S2ab1@distinct-bound-ids? S2ec9@id*)))) (set! S4730@S2aaf@valid-bound-ids? S2aaf@valid-bound-ids?)) (begin (set! S2ab1@distinct-bound-ids? (lambda (S2ecb@id*) (or (null? S2ecb@id*) (and (not (S2ab3@bound-id-member? (car S2ecb@id*) (cdr S2ecb@id*))) (S2ab1@distinct-bound-ids? (cdr S2ecb@id*)))))) (set! S4731@S2ab1@distinct-bound-ids? S2ab1@distinct-bound-ids?)) (begin (set! S2ab3@bound-id-member? (lambda (S2ecd@id S2ece@id*) (and (pair? S2ece@id*) (or (S2aab@bound-id=? S2ecd@id (car S2ece@id*)) (S2ab3@bound-id-member? S2ecd@id (cdr S2ece@id*)))))) (set! S4732@S2ab3@bound-id-member? S2ab3@bound-id-member?)) (begin (set! S2ab5@self-evaluating? (lambda (S2ed1@x) (or (number? S2ed1@x) (string? S2ed1@x) (char? S2ed1@x) (boolean? S2ed1@x) (regexp? S2ed1@x) (bytevector? S2ed1@x)))) (set! S4733@S2ab5@self-evaluating? S2ab5@self-evaluating?)) (begin (set! S2ab7@strip-annotations (lambda (S2ed3@x) (if (pair? S2ed3@x) (cons (S2ab7@strip-annotations (car S2ed3@x)) (S2ab7@strip-annotations (cdr S2ed3@x))) (if (vector? S2ed3@x) (vector-map S2ab7@strip-annotations S2ed3@x) (if (S25e6@S24ba@annotation? S2ed3@x) (S25e5@S24b8@annotation-stripped S2ed3@x) S2ed3@x))))) (set! S4734@S2ab7@strip-annotations S2ab7@strip-annotations)) (begin (set! S2ab9@strip (lambda (S2ed5@x S2ed6@m*) (if (S2a2d@top-marked? S2ed6@m*) (if (or (S25e6@S24ba@annotation? S2ed5@x) (and (pair? S2ed5@x) (S25e6@S24ba@annotation? (car S2ed5@x))) (and (vector? S2ed5@x) (> (vector-length S2ed5@x) '0) (S25e6@S24ba@annotation? (vector-ref S2ed5@x '0)))) (S2ab7@strip-annotations S2ed5@x) S2ed5@x) (let S2edb@f ((S2ed9@x S2ed5@x)) (if (S2a73@stx? S2ed9@x) (S2ab9@strip (S2a75@stx-expr S2ed9@x) (S2a79@stx-mark* S2ed9@x)) (if (S25e6@S24ba@annotation? S2ed9@x) (S25e5@S24b8@annotation-stripped S2ed9@x) (if (pair? S2ed9@x) (let ((S2edd@a (S2edb@f (car S2ed9@x))) (S2ede@d (S2edb@f (cdr S2ed9@x)))) (if (and (eq? S2edd@a (car S2ed9@x)) (eq? S2ede@d (cdr S2ed9@x))) S2ed9@x (cons S2edd@a S2ede@d))) (if (vector? S2ed9@x) (let ((S2ee1@old (vector->list S2ed9@x))) (let ((S2ee3@new (map S2edb@f S2ee1@old))) (if (for-all eq? S2ee1@old S2ee3@new) S2ed9@x (list->vector S2ee3@new)))) S2ed9@x)))))))) (set! S4735@S2ab9@strip S2ab9@strip)) (begin (set! S2abb@stx->datum (lambda (S2ee5@x) (S2ab9@strip S2ee5@x '()))) (set! S4736@S2abb@stx->datum S2abb@stx->datum)) (begin (set! S2abd@id->label (lambda (S2ee7@id) (or (id->real-label S2ee7@id) (let ((S2ee9@t (S2d9e@top-level-context))) (if S2ee9@t ((lambda (S2eeb@env) (let ((S2eed@rib (S2d4e@interaction-env-rib S2eeb@env))) (call-with-values (lambda () (S2a37@gen-define-label+loc S2ee7@id S2eed@rib)) (lambda (S2ef3@S2ef0 S2ef4@S2ef2) (let ((S2ef7@loc_ S2ef4@S2ef2) (S2ef8@lab S2ef3@S2ef0)) (begin (S2a5d@extend-rib! S2eed@rib S2ee7@id S2ef8@lab) S2ef8@lab)))))) S2ee9@t) '#f))))) (set! S4737@S2abd@id->label S2abd@id->label)) (begin (set! S2abf@label->binding (lambda (S2efb@x S2efc@r) (let ((S2eff@t (S28bc@S2709@imported-label->binding S2efb@x))) (if S2eff@t ((lambda (S2f01@b) (if (and (pair? S2f01@b) (eq? (car S2f01@b) '$core-rtd)) (cons '$rtd (map S2c64@bless (cdr S2f01@b))) (if (and (pair? S2f01@b) (eq? (car S2f01@b) 'global-rtd)) (let ((S2f03@lib (cadr S2f01@b)) (S2f04@loc (cddr S2f01@b))) (cons '$rtd (symbol-value S2f04@loc))) S2f01@b))) S2eff@t) (let ((S2f07@t (assq S2efb@x S2efc@r))) (if S2f07@t (cdr S2f07@t) (let ((S2f09@t (S2d9e@top-level-context))) (if S2f09@t ((lambda (S2f0b@env) (let ((S2f0d@t (assq S2efb@x (S2d56@interaction-env-locs S2f0b@env)))) (if S2f0d@t ((lambda (S2f0f@p) (cons* 'lexical (cdr S2f0f@p) '#f)) S2f0d@t) '(displaced-lexical . #f)))) S2f09@t) '(displaced-lexical . #f))))))))) (set! S4738@S2abf@label->binding S2abf@label->binding)) (begin (set! S2ac1@make-binding cons) (set! S4739@S2ac1@make-binding S2ac1@make-binding)) (begin (set! S2ac3@binding-type car) (set! S473a@S2ac3@binding-type S2ac3@binding-type)) (begin (set! S2ac5@binding-value cdr) (set! S473b@S2ac5@binding-value S2ac5@binding-value)) (begin (set! S2ac7@raise-unbound-error (lambda (S2f11@id) (S2d8c@syntax-violation* '#f '"unbound identifier" S2f11@id (S4b31@S4977@make-undefined-violation)))) (set! S473c@S2ac7@raise-unbound-error S2ac7@raise-unbound-error)) (begin (set! S2ac9@syntax-type (lambda (S2f13@e S2f14@r) (if (S2aa7@id? S2f13@e) (let ((S2f17@id S2f13@e)) (let ((S2f19@label (S2abd@id->label S2f17@id))) (let ((S2f1b@b (S2abf@label->binding S2f19@label S2f14@r))) (let ((S2f1d@type (S2ac3@binding-type S2f1b@b))) (begin (if (not S2f19@label) (S2ac7@raise-unbound-error S2f17@id) (void)) (let ((S2f1f@t S2f1d@type)) (if (memv S2f1f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values S2f1d@type (S2ac5@binding-value S2f1b@b) S2f17@id) (values 'other '#f '#f)))))))) (if (S2a99@syntax-pair? S2f13@e) (let ((S2f21@id (S2aa1@syntax-car S2f13@e))) (if (S2aa7@id? S2f21@id) (let ((S2f23@label (S2abd@id->label S2f21@id))) (let ((S2f25@b (S2abf@label->binding S2f23@label S2f14@r))) (let ((S2f27@type (S2ac3@binding-type S2f25@b))) (begin (if (not S2f23@label) (S2ac7@raise-unbound-error S2f21@id) (void)) (let ((S2f29@t S2f27@type)) (if (memv S2f29@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values S2f27@type (S2ac5@binding-value S2f25@b) S2f21@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((S2f2b@d (S2abb@stx->datum S2f13@e))) (if (S2ab5@self-evaluating? S2f2b@d) (values 'constant S2f2b@d '#f) (values 'other '#f '#f))))))) (set! S473d@S2ac9@syntax-type S2ac9@syntax-type)) (begin (set! S2ad7@sanitize-binding (lambda (S2f2d@x S2f2e@src) (if (procedure? S2f2d@x) (cons* 'local-macro S2f2d@x S2f2e@src) (if (and (pair? S2f2d@x) (eq? (car S2f2d@x) 'macro!) (procedure? (cdr S2f2d@x))) (cons* 'local-macro! (cdr S2f2d@x) S2f2e@src) (if (and (pair? S2f2d@x) (eq? (car S2f2d@x) '$rtd)) S2f2d@x (assertion-violation 'expand '"invalid transformer" S2f2d@x)))))) (set! S473e@S2ad7@sanitize-binding S2ad7@sanitize-binding)) (begin (set! S2ad9@make-variable-transformer (lambda (S2f31@x) (if (procedure? S2f31@x) (cons 'macro! S2f31@x) (assertion-violation 'make-variable-transformer '"not a procedure" S2f31@x)))) (set! S473f@S2ad9@make-variable-transformer S2ad9@make-variable-transformer)) (begin (set! S2adb@variable-transformer? (lambda (S2f33@x) (and (pair? S2f33@x) (eq? (car S2f33@x) 'macro!) (procedure? (cdr S2f33@x))))) (set! S4740@S2adb@variable-transformer? S2adb@variable-transformer?)) (begin (set! S2add@variable-transformer-procedure (lambda (S2f35@x) (if (S2adb@variable-transformer? S2f35@x) (cdr S2f35@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" S2f35@x)))) (set! S4741@S2add@variable-transformer-procedure S2add@variable-transformer-procedure)) (begin (set! S2adf@make-eval-transformer (lambda (S2f37@x) (S2ad7@sanitize-binding (eval-core (S2647@S25ff@expanded->core S2f37@x)) S2f37@x))) (set! S4742@S2adf@make-eval-transformer S2adf@make-eval-transformer)) (begin (set! S2c30@parse-define (lambda (S2f39@x) (let ((S2f3b@t S2f39@x)) (let ((S2f3d@ls/false (S2cae@syntax-dispatch S2f3b@t '(_ (any . any) any . each-any)))) (if (and S2f3d@ls/false (apply (lambda (S2f3f@id S2f40@fmls S2f41@b S2f42@b*) (S2aa7@id? S2f3f@id)) S2f3d@ls/false)) (apply (lambda (S2f47@id S2f48@fmls S2f49@b S2f4a@b*) (begin (S2cd4@verify-formals S2f48@fmls S2f39@x) (values S2f47@id (cons 'defun (cons S2f48@fmls (cons S2f49@b S2f4a@b*)))))) S2f3d@ls/false) (let ((S2f4f@t S2f3b@t)) (let ((S2f51@ls/false (S2cae@syntax-dispatch S2f4f@t '(_ any any)))) (if (and S2f51@ls/false (apply (lambda (S2f53@id S2f54@val) (S2aa7@id? S2f53@id)) S2f51@ls/false)) (apply (lambda (S2f57@id S2f58@val) (values S2f57@id (cons 'expr S2f58@val))) S2f51@ls/false) (let ((S2f5b@t S2f4f@t)) (let ((S2f5d@ls/false (S2cae@syntax-dispatch S2f5b@t '(_ any)))) (if (and S2f5d@ls/false (apply (lambda (S2f5f@id) (S2aa7@id? S2f5f@id)) S2f5d@ls/false)) (apply (lambda (S2f61@id) (values S2f61@id (cons 'expr (S2c64@bless '(void))))) S2f5d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S2f5b@t)))))))))))) (set! S4743@S2c30@parse-define S2c30@parse-define)) (begin (set! S2c32@parse-define-syntax (lambda (S2f63@x) (let ((S2f65@t S2f63@x)) (let ((S2f67@ls/false (S2cae@syntax-dispatch S2f65@t '(_ any any)))) (if (and S2f67@ls/false (apply (lambda (S2f69@id S2f6a@val) (S2aa7@id? S2f69@id)) S2f67@ls/false)) (apply (lambda (S2f6d@id S2f6e@val) (values S2f6d@id S2f6e@val)) S2f67@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S2f65@t)))))) (set! S4744@S2c32@parse-define-syntax S2c32@parse-define-syntax)) (begin (set! S2c34@scheme-stx-hashtable (make-eq-hashtable)) (set! S4745@S2c34@scheme-stx-hashtable S2c34@scheme-stx-hashtable)) (begin (set! S2c36@scheme-stx (lambda (S2f71@sym) (or (hashtable-ref S2c34@scheme-stx-hashtable S2f71@sym '#f) (let ((S2f73@subst (S2898@S26c1@library-subst (S28b6@S26fd@find-library-by-name '(psyntax system $all))))) (let ((S2f75@stx (make-simple-struct 'stx '5 (list S2f71@sym S2a2b@top-mark* '() '())))) (let ((S2f77@stx (let ((S2f79@t (assq S2f71@sym S2f73@subst))) (if S2f79@t ((lambda (S2f7b@x) (let ((S2f7d@name (car S2f7b@x)) (S2f7e@label (cdr S2f7b@x))) (S2a93@add-subst (make-simple-struct 'rib '6 (list (list S2f7d@name) (list S2a2b@top-mark*) (list S2f7e@label) '#f '#f)) S2f75@stx))) S2f79@t) S2f75@stx)))) (begin (hashtable-set! S2c34@scheme-stx-hashtable S2f71@sym S2f77@stx) S2f77@stx))))))) (set! S4746@S2c36@scheme-stx S2c36@scheme-stx)) (begin (set! S2c38@lexical-var car) (set! S4747@S2c38@lexical-var S2c38@lexical-var)) (begin (set! S2c3a@lexical-mutable? cdr) (set! S4748@S2c3a@lexical-mutable? S2c3a@lexical-mutable?)) (begin (set! S2c3c@set-lexical-mutable! set-cdr!) (set! S4749@S2c3c@set-lexical-mutable! S2c3c@set-lexical-mutable!)) (begin (set! S2c3e@add-lexical (lambda (S2f81@lab S2f82@lex S2f83@r) (cons (cons* S2f81@lab 'lexical S2f82@lex '#f) S2f83@r))) (set! S474a@S2c3e@add-lexical S2c3e@add-lexical)) (begin (set! S2c40@add-lexicals (lambda (S2f87@lab* S2f88@lex* S2f89@r) (if (null? S2f87@lab*) S2f89@r (S2c40@add-lexicals (cdr S2f87@lab*) (cdr S2f88@lex*) (S2c3e@add-lexical (car S2f87@lab*) (car S2f88@lex*) S2f89@r))))) (set! S474b@S2c40@add-lexicals S2c40@add-lexicals)) (begin (set! S2c42@letrec-helper (lambda (S2f8d@e S2f8e@r S2f8f@mr S2f90@build) (let ((S2f95@t S2f8d@e)) (let ((S2f97@ls/false (S2cae@syntax-dispatch S2f95@t '(_ #(each (any any)) any . each-any)))) (if S2f97@ls/false (apply (lambda (S2f99@lhs* S2f9a@rhs* S2f9b@b S2f9c@b*) (if (not (S2aaf@valid-bound-ids? S2f99@lhs*)) (S2c68@invalid-fmls-error S2f8d@e S2f99@lhs*) (let ((S2fa1@lex* (map S2a2f@gen-lexical S2f99@lhs*)) (S2fa2@lab* (map S2a33@gen-label S2f99@lhs*))) (let ((S2fa5@rib (S2a67@make-full-rib S2f99@lhs* S2fa2@lab*)) (S2fa6@r (S2c40@add-lexicals S2fa2@lab* S2fa1@lex* S2f8e@r))) (let ((S2fa9@body (S2ce6@chi-internal (S2a93@add-subst S2fa5@rib (cons S2f9b@b S2f9c@b*)) S2fa6@r S2f8f@mr)) (S2faa@rhs* (S2ccc@chi-expr* (map (lambda (S2fad@x) (S2a93@add-subst S2fa5@rib S2fad@x)) S2f9a@rhs*) S2fa6@r S2f8f@mr))) (S2f90@build '#f S2fa1@lex* S2faa@rhs* S2fa9@body)))))) S2f97@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S2f95@t)))))) (set! S474c@S2c42@letrec-helper S2c42@letrec-helper)) (begin (set! S2c44@let-transformer (lambda (S2faf@e S2fb0@r S2fb1@mr) (let ((S2fb5@t S2faf@e)) (let ((S2fb7@ls/false (S2cae@syntax-dispatch S2fb5@t '(_ #(each (any any)) any . each-any)))) (if S2fb7@ls/false (apply (lambda (S2fb9@lhs* S2fba@rhs* S2fbb@b S2fbc@b*) (if (not (S2aaf@valid-bound-ids? S2fb9@lhs*)) (S2c68@invalid-fmls-error S2faf@e S2fb9@lhs*) (let ((S2fc1@lex* (map S2a2f@gen-lexical S2fb9@lhs*)) (S2fc2@lab* (map S2a33@gen-label S2fb9@lhs*)) (S2fc3@rhs* (S2ccc@chi-expr* S2fba@rhs* S2fb0@r S2fb1@mr))) (let ((S2fc7@rib (S2a67@make-full-rib S2fb9@lhs* S2fc2@lab*)) (S2fc8@r (S2c40@add-lexicals S2fc2@lab* S2fc1@lex* S2fb0@r))) (let ((S2fcb@body (S2ce6@chi-internal (S2a93@add-subst S2fc7@rib (cons S2fbb@b S2fbc@b*)) S2fc8@r S2fb1@mr))) (S2a0f@S296c@build-let '#f S2fc1@lex* S2fc3@rhs* S2fcb@body)))))) S2fb7@ls/false) (let ((S2fcd@t S2fb5@t)) (let ((S2fcf@ls/false (S2cae@syntax-dispatch S2fcd@t '(_ any #(each (any any)) any . each-any)))) (if S2fcf@ls/false (apply (lambda (S2fd1@loop S2fd2@lhs* S2fd3@rhs* S2fd4@b S2fd5@b*) (if (not (S2aaf@valid-bound-ids? S2fd2@lhs*)) (S2c68@invalid-fmls-error S2faf@e S2fd2@lhs*) (let ((S2fdb@lex* (map S2a2f@gen-lexical S2fd2@lhs*)) (S2fdc@lab* (map S2a33@gen-label S2fd2@lhs*)) (S2fdd@rhs* (S2ccc@chi-expr* S2fd3@rhs* S2fb0@r S2fb1@mr)) (S2fde@loop-lex (S2a2f@gen-lexical S2fd1@loop)) (S2fdf@loop-lab (S2a33@gen-label S2fd1@loop))) (let ((S2fe5@rib (S2a67@make-full-rib (cons S2fd1@loop S2fd2@lhs*) (cons S2fdf@loop-lab S2fdc@lab*))) (S2fe6@r (S2c40@add-lexicals (cons S2fdf@loop-lab S2fdc@lab*) (cons S2fde@loop-lex S2fdb@lex*) S2fb0@r))) (let ((S2fe9@body (S2ce6@chi-internal (S2a93@add-subst S2fe5@rib (cons S2fd4@b S2fd5@b*)) S2fe6@r S2fb1@mr))) (S2a10@S296e@build-named-let '#f S2fde@loop-lex S2fdb@lex* S2fdd@rhs* S2fe9@body)))))) S2fcf@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S2fcd@t))))))))) (set! S474d@S2c44@let-transformer S2c44@let-transformer)) (begin (set! S2c46@letrec-transformer (lambda (S2feb@e S2fec@r S2fed@mr) (S2c42@letrec-helper S2feb@e S2fec@r S2fed@mr S2a0e@S296a@build-letrec))) (set! S474e@S2c46@letrec-transformer S2c46@letrec-transformer)) (begin (set! S2c48@letrec*-transformer (lambda (S2ff1@e S2ff2@r S2ff3@mr) (S2c42@letrec-helper S2ff1@e S2ff2@r S2ff3@mr S2a11@S2970@build-letrec*))) (set! S474f@S2c48@letrec*-transformer S2c48@letrec*-transformer)) (begin (set! S2c4a@fluid-let-syntax-transformer (lambda (S2ff7@e S2ff8@r S2ff9@mr) (let ((S2ffe@lookup '#f)) (begin (set! S2ffe@lookup (lambda (S3011@x) (or (S2abd@id->label S3011@x) (S2d8e@syntax-violation '#f '"unbound identifier" S2ff7@e S3011@x)))) (let ((S2fff@t S2ff7@e)) (let ((S3001@ls/false (S2cae@syntax-dispatch S2fff@t '(_ #(each (any any)) any . each-any)))) (if S3001@ls/false (apply (lambda (S3003@lhs* S3004@rhs* S3005@b S3006@b*) (if (not (S2aaf@valid-bound-ids? S3003@lhs*)) (S2c68@invalid-fmls-error S2ff7@e S3003@lhs*) (let ((S300b@lab* (map S2ffe@lookup S3003@lhs*)) (S300c@rhs* (map (lambda (S300f@x) (S2adf@make-eval-transformer (S2d08@expand-transformer S300f@x S2ff9@mr))) S3004@rhs*))) (S2ce6@chi-internal (cons S3005@b S3006@b*) (append (map cons S300b@lab* S300c@rhs*) S2ff8@r) (append (map cons S300b@lab* S300c@rhs*) S2ff9@mr))))) S3001@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S2fff@t)))))))) (set! S4750@S2c4a@fluid-let-syntax-transformer S2c4a@fluid-let-syntax-transformer)) (begin (set! S2c4c@type-descriptor-transformer (lambda (S3013@e S3014@r S3015@mr) (let ((S3019@t S3013@e)) (let ((S301b@ls/false (S2cae@syntax-dispatch S3019@t '(_ any)))) (if (and S301b@ls/false (apply (lambda (S301d@id) (S2aa7@id? S301d@id)) S301b@ls/false)) (apply (lambda (S301f@id) (let ((S3021@lab (S2abd@id->label S301f@id))) (let ((S3023@b (S2abf@label->binding S3021@lab S3014@r))) (let ((S3025@type (S2ac3@binding-type S3023@b))) (begin (if (not S3021@lab) (S2ac7@raise-unbound-error S301f@id) (void)) (if (not (and (eq? S3025@type '$rtd) (not (list? (S2ac5@binding-value S3023@b))))) (S2d8e@syntax-violation '#f '"not a record type" S3013@e) (void)) (list 'quote (S2ac5@binding-value S3023@b))))))) S301b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3019@t)))))) (set! S4751@S2c4c@type-descriptor-transformer S2c4c@type-descriptor-transformer)) (begin (set! S2c4e@record-type-descriptor-transformer (lambda (S3027@e S3028@r S3029@mr) (let ((S302d@t S3027@e)) (let ((S302f@ls/false (S2cae@syntax-dispatch S302d@t '(_ any)))) (if (and S302f@ls/false (apply (lambda (S3031@id) (S2aa7@id? S3031@id)) S302f@ls/false)) (apply (lambda (S3033@id) (let ((S3035@lab (S2abd@id->label S3033@id))) (let ((S3037@b (S2abf@label->binding S3035@lab S3028@r))) (let ((S3039@type (S2ac3@binding-type S3037@b))) (begin (if (not S3035@lab) (S2ac7@raise-unbound-error S3033@id) (void)) (if (not (and (eq? S3039@type '$rtd) (list? (S2ac5@binding-value S3037@b)))) (S2d8e@syntax-violation '#f '"not a record type" S3027@e) (void)) (S2cd0@chi-expr (car (S2ac5@binding-value S3037@b)) S3028@r S3029@mr)))))) S302f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S302d@t)))))) (set! S4752@S2c4e@record-type-descriptor-transformer S2c4e@record-type-descriptor-transformer)) (begin (set! S2c50@record-constructor-descriptor-transformer (lambda (S303b@e S303c@r S303d@mr) (let ((S3041@t S303b@e)) (let ((S3043@ls/false (S2cae@syntax-dispatch S3041@t '(_ any)))) (if (and S3043@ls/false (apply (lambda (S3045@id) (S2aa7@id? S3045@id)) S3043@ls/false)) (apply (lambda (S3047@id) (let ((S3049@lab (S2abd@id->label S3047@id))) (let ((S304b@b (S2abf@label->binding S3049@lab S303c@r))) (let ((S304d@type (S2ac3@binding-type S304b@b))) (begin (if (not S3049@lab) (S2ac7@raise-unbound-error S3047@id) (void)) (if (not (and (eq? S304d@type '$rtd) (list? (S2ac5@binding-value S304b@b)))) (S2d8e@syntax-violation '#f '"invalid type" S303b@e) (void)) (S2cd0@chi-expr (cadr (S2ac5@binding-value S304b@b)) S303c@r S303d@mr)))))) S3043@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3041@t)))))) (set! S4753@S2c50@record-constructor-descriptor-transformer S2c50@record-constructor-descriptor-transformer)) (begin (set! S2c52@when-macro (lambda (S304f@e) (let ((S3051@t S304f@e)) (let ((S3053@ls/false (S2cae@syntax-dispatch S3051@t '(_ any any . each-any)))) (if S3053@ls/false (apply (lambda (S3055@test S3056@e S3057@e*) (S2c64@bless (list 'if S3055@test (cons 'begin (cons S3056@e S3057@e*))))) S3053@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3051@t)))))) (set! S4754@S2c52@when-macro S2c52@when-macro)) (begin (set! S2c54@unless-macro (lambda (S305b@e) (let ((S305d@t S305b@e)) (let ((S305f@ls/false (S2cae@syntax-dispatch S305d@t '(_ any any . each-any)))) (if S305f@ls/false (apply (lambda (S3061@test S3062@e S3063@e*) (S2c64@bless (list 'if (list 'not S3061@test) (cons 'begin (cons S3062@e S3063@e*))))) S305f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S305d@t)))))) (set! S4755@S2c54@unless-macro S2c54@unless-macro)) (begin (set! S2c56@if-transformer (lambda (S3067@e S3068@r S3069@mr) (let ((S306d@t S3067@e)) (let ((S306f@ls/false (S2cae@syntax-dispatch S306d@t '(_ any any any)))) (if S306f@ls/false (apply (lambda (S3071@e0 S3072@e1 S3073@e2) (list 'if (S2cd0@chi-expr S3071@e0 S3068@r S3069@mr) (S2cd0@chi-expr S3072@e1 S3068@r S3069@mr) (S2cd0@chi-expr S3073@e2 S3068@r S3069@mr))) S306f@ls/false) (let ((S3077@t S306d@t)) (let ((S3079@ls/false (S2cae@syntax-dispatch S3077@t '(_ any any)))) (if S3079@ls/false (apply (lambda (S307b@e0 S307c@e1) (list 'if (S2cd0@chi-expr S307b@e0 S3068@r S3069@mr) (S2cd0@chi-expr S307c@e1 S3068@r S3069@mr) (S2a0d@S2968@build-void))) S3079@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3077@t))))))))) (set! S4756@S2c56@if-transformer S2c56@if-transformer)) (begin (set! S2c58@and-transformer (lambda (S307f@e S3080@r S3081@mr) (let ((S3085@t S307f@e)) (let ((S3087@ls/false (S2cae@syntax-dispatch S3085@t '(_ . each-any)))) (if S3087@ls/false (apply (lambda (S3089@e*) (cons 'and (S2ccc@chi-expr* S3089@e* S3080@r S3081@mr))) S3087@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3085@t)))))) (set! S4757@S2c58@and-transformer S2c58@and-transformer)) (begin (set! S2c5a@or-transformer (lambda (S308b@e S308c@r S308d@mr) (let ((S3091@t S308b@e)) (let ((S3093@ls/false (S2cae@syntax-dispatch S3091@t '(_ . each-any)))) (if S3093@ls/false (apply (lambda (S3095@e*) (cons 'or (S2ccc@chi-expr* S3095@e* S308c@r S308d@mr))) S3093@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3091@t)))))) (set! S4758@S2c5a@or-transformer S2c5a@or-transformer)) (begin (set! S2c5c@case-macro (lambda (S3097@e) (let ((S309a@build-last '#f) (S309c@build-one '#f)) (begin (set! S309a@build-last (lambda (S30c1@cls) (let ((S30c3@t S30c1@cls)) (let ((S30c5@ls/false (S2cae@syntax-dispatch S30c3@t '(#(scheme-id else) any . each-any)))) (if S30c5@ls/false (apply (lambda (S30c7@e S30c8@e*) (cons 'begin (cons S30c7@e S30c8@e*))) S30c5@ls/false) (let ((S30cb@t S30c3@t)) (let ((S30cd@ls/false (S2cae@syntax-dispatch S30cb@t '_))) (if S30cd@ls/false (apply (lambda () (S309c@build-one S30c1@cls '(if #f #f))) S30cd@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S30cb@t))))))))) (set! S309c@build-one (lambda (S30b3@cls S30b4@k) (let ((S30b7@t S30b3@cls)) (let ((S30b9@ls/false (S2cae@syntax-dispatch S30b7@t '(each-any any . each-any)))) (if S30b9@ls/false (apply (lambda (S30bb@d* S30bc@e S30bd@e*) (list 'if (list 'memv 't (list 'quote S30bb@d*)) (cons 'begin (cons S30bc@e S30bd@e*)) S30b4@k)) S30b9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S30b7@t)))))) (let ((S309d@t S3097@e)) (let ((S309f@ls/false (S2cae@syntax-dispatch S309d@t '(_ any)))) (if S309f@ls/false (apply (lambda (S30a1@expr) (S2c64@bless (cons 'let (cons (list (list 't S30a1@expr)) '((if #f #f)))))) S309f@ls/false) (let ((S30a3@t S309d@t)) (let ((S30a5@ls/false (S2cae@syntax-dispatch S30a3@t '(_ any any . each-any)))) (if S30a5@ls/false (apply (lambda (S30a7@expr S30a8@cls S30a9@cls*) (S2c64@bless (list 'let (list (list 't S30a7@expr)) (let S30b1@f ((S30ad@cls S30a8@cls) (S30ae@cls* S30a9@cls*)) (if (null? S30ae@cls*) (S309a@build-last S30ad@cls) (S309c@build-one S30ad@cls (S30b1@f (car S30ae@cls*) (cdr S30ae@cls*)))))))) S30a5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S30a3@t))))))))))) (set! S4759@S2c5c@case-macro S2c5c@case-macro)) (begin (set! S2c5e@quote-transformer (lambda (S30cf@e S30d0@r S30d1@mr) (let ((S30d5@t S30cf@e)) (let ((S30d7@ls/false (S2cae@syntax-dispatch S30d5@t '(_ any)))) (if S30d7@ls/false (apply (lambda (S30d9@datum) (list 'quote (S2abb@stx->datum S30d9@datum))) S30d7@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S30d5@t)))))) (set! S475a@S2c5e@quote-transformer S2c5e@quote-transformer)) (begin (set! S2c60@case-lambda-transformer (lambda (S30db@e S30dc@r S30dd@mr) (let ((S30e1@t S30db@e)) (let ((S30e3@ls/false (S2cae@syntax-dispatch S30e1@t '(_ . #(each (any any . each-any)))))) (if S30e3@ls/false (apply (lambda (S30e5@fmls* S30e6@b* S30e7@b**) (call-with-values (lambda () (S2cd8@chi-lambda-clause* S30db@e S30e5@fmls* (map cons S30e6@b* S30e7@b**) S30dc@r S30dd@mr)) (lambda (S30ef@S30ec S30f0@S30ee) (let ((S30f3@body* S30f0@S30ee) (S30f4@fmls* S30ef@S30ec)) (S2a0b@S2938@build-case-lambda '#f S30f4@fmls* S30f3@body*))))) S30e3@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S30e1@t)))))) (set! S475b@S2c60@case-lambda-transformer S2c60@case-lambda-transformer)) (begin (set! S2c62@lambda-transformer (lambda (S30f7@e S30f8@r S30f9@mr) (let ((S30fd@t S30f7@e)) (let ((S30ff@ls/false (S2cae@syntax-dispatch S30fd@t '(_ any any . each-any)))) (if S30ff@ls/false (apply (lambda (S3101@fmls S3102@b S3103@b*) (call-with-values (lambda () (S2cd6@chi-lambda-clause S30f7@e S3101@fmls (cons S3102@b S3103@b*) S30f8@r S30f9@mr)) (lambda (S310b@S3108 S310c@S310a) (let ((S310f@body S310c@S310a) (S3110@fmls S310b@S3108)) (S2a0a@S2936@build-lambda '#f S3110@fmls S310f@body))))) S30ff@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S30fd@t)))))) (set! S475c@S2c62@lambda-transformer S2c62@lambda-transformer)) (begin (set! S2c64@bless (lambda (S3113@x) (S2a8f@mkstx (let S3117@f ((S3115@x S3113@x)) (if (S2a73@stx? S3115@x) S3115@x (if (pair? S3115@x) (cons (S3117@f (car S3115@x)) (S3117@f (cdr S3115@x))) (if (symbol? S3115@x) (S2c36@scheme-stx S3115@x) (if (vector? S3115@x) (vector-map S3117@f S3115@x) S3115@x))))) '() '() '()))) (set! S475d@S2c64@bless S2c64@bless)) (begin (set! S2c66@with-syntax-macro (lambda (S3119@e) (let ((S311b@t S3119@e)) (let ((S311d@ls/false (S2cae@syntax-dispatch S311b@t '(_ #(each (any any)) any . each-any)))) (if S311d@ls/false (apply (lambda (S311f@pat* S3120@expr* S3121@b S3122@b*) (let ((S3127@idn* (let S312b@f ((S3129@pat* S311f@pat*)) (if (null? S3129@pat*) '() (call-with-values (lambda () (S2cac@convert-pattern (car S3129@pat*) '())) (lambda (S3131@S312e S3132@S3130) (let ((S3135@idn* S3132@S3130) (S3136@pat S3131@S312e)) (append S3135@idn* (S312b@f (cdr S3129@pat*)))))))))) (begin (S2cd4@verify-formals (map car S3127@idn*) S3119@e) (let ((S3139@t* (S2d7c@generate-temporaries S3120@expr*))) (S2c64@bless (list 'let (map list S3139@t* S3120@expr*) (let S313f@f ((S313b@pat* S311f@pat*) (S313c@t* S3139@t*)) (if (null? S313b@pat*) (cons 'begin (cons '#f (cons S3121@b S3122@b*))) (list 'syntax-case (car S313c@t*) '() (list (car S313b@pat*) (S313f@f (cdr S313b@pat*) (cdr S313c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car S313b@pat*)) (car S313c@t*)))))))))))) S311d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S311b@t)))))) (set! S475e@S2c66@with-syntax-macro S2c66@with-syntax-macro)) (begin (set! S2c68@invalid-fmls-error (lambda (S3141@stx S3142@fmls) (let ((S3145@t S3142@fmls)) (let ((S3147@ls/false (S2cae@syntax-dispatch S3145@t '#(each+ any () any)))) (if S3147@ls/false (apply (lambda (S3149@id* S314a@last) (let S314f@f ((S314d@id* (if (S2aa7@id? S314a@last) (cons S314a@last S3149@id*) (if (S2a9d@syntax-null? S314a@last) S3149@id* (S2d8e@syntax-violation '#f '"not an identifier" S3141@stx S314a@last))))) (if (null? S314d@id*) (values) (if (not (S2aa7@id? (car S314d@id*))) (S2d8e@syntax-violation '#f '"not an identifier" S3141@stx (car S314d@id*)) (begin (S314f@f (cdr S314d@id*)) (if (S2ab3@bound-id-member? (car S314d@id*) (cdr S314d@id*)) (S2d8e@syntax-violation '#f '"duplicate binding" S3141@stx (car S314d@id*)) (void))))))) S3147@ls/false) (let ((S3151@t S3145@t)) (let ((S3153@ls/false (S2cae@syntax-dispatch S3151@t '_))) (if S3153@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"malformed binding form" S3141@stx S3142@fmls)) S3153@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3151@t))))))))) (set! S475f@S2c68@invalid-fmls-error S2c68@invalid-fmls-error)) (begin (set! S2c6a@let-macro (lambda (S3155@stx) (let ((S3157@t S3155@stx)) (let ((S3159@ls/false (S2cae@syntax-dispatch S3157@t '(_ #(each (any any)) any . each-any)))) (if S3159@ls/false (apply (lambda (S315b@lhs* S315c@rhs* S315d@b S315e@b*) (if (S2aaf@valid-bound-ids? S315b@lhs*) (S2c64@bless (cons (cons 'lambda (cons S315b@lhs* (cons S315d@b S315e@b*))) S315c@rhs*)) (S2c68@invalid-fmls-error S3155@stx S315b@lhs*))) S3159@ls/false) (let ((S3163@t S3157@t)) (let ((S3165@ls/false (S2cae@syntax-dispatch S3163@t '(_ any #(each (any any)) any . each-any)))) (if (and S3165@ls/false (apply (lambda (S3167@f S3168@lhs* S3169@rhs* S316a@b S316b@b*) (S2aa7@id? S3167@f)) S3165@ls/false)) (apply (lambda (S3171@f S3172@lhs* S3173@rhs* S3174@b S3175@b*) (if (S2aaf@valid-bound-ids? S3172@lhs*) (S2c64@bless (cons (list 'letrec (list (list S3171@f (cons 'lambda (cons S3172@lhs* (cons S3174@b S3175@b*))))) S3171@f) S3173@rhs*)) (S2c68@invalid-fmls-error S3155@stx S3172@lhs*))) S3165@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3163@t))))))))) (set! S4760@S2c6a@let-macro S2c6a@let-macro)) (begin (set! S2c6c@let-values-macro (lambda (S317b@stx) (let ((S317e@rename '#f) (S3180@rename* '#f)) (begin (set! S317e@rename (lambda (S31e3@x S31e4@old* S31e5@new*) (begin (if (not (S2aa7@id? S31e3@x)) (S2d8e@syntax-violation '#f '"not an indentifier" S317b@stx S31e3@x) (void)) (if (S2ab3@bound-id-member? S31e3@x S31e4@old*) (S2d8e@syntax-violation '#f '"duplicate binding" S317b@stx S31e3@x) (void)) (let ((S31e9@y (gensym (S2d94@syntax->datum S31e3@x)))) (values S31e9@y (cons S31e3@x S31e4@old*) (cons S31e9@y S31e5@new*)))))) (set! S3180@rename* (lambda (S31d1@x* S31d2@old* S31d3@new*) (if (null? S31d1@x*) (values '() S31d2@old* S31d3@new*) (call-with-values (lambda () (S317e@rename (car S31d1@x*) S31d2@old* S31d3@new*)) (lambda (S31d7@x S31d8@old* S31d9@new*) (call-with-values (lambda () (S3180@rename* (cdr S31d1@x*) S31d8@old* S31d9@new*)) (lambda (S31dd@x* S31de@old* S31df@new*) (values (cons S31d7@x S31dd@x*) S31de@old* S31df@new*)))))))) (let ((S3181@t S317b@stx)) (let ((S3183@ls/false (S2cae@syntax-dispatch S3181@t '(_ () any . each-any)))) (if S3183@ls/false (apply (lambda (S3185@b S3186@b*) (cons* (S2c64@bless 'let) '() S3185@b S3186@b*)) S3183@ls/false) (let ((S3189@t S3181@t)) (let ((S318b@ls/false (S2cae@syntax-dispatch S3189@t '(_ #(each (any any)) any . each-any)))) (if S318b@ls/false (apply (lambda (S318d@lhs* S318e@rhs* S318f@b S3190@b*) (S2c64@bless (let S319d@f ((S3195@lhs* S318d@lhs*) (S3196@rhs* S318e@rhs*) (S3197@old* '()) (S3198@new* '())) (if (null? S3195@lhs*) (cons 'let (cons (map list S3197@old* S3198@new*) (cons S318f@b S3190@b*))) (let ((S319f@t (car S3195@lhs*))) (let ((S31a1@ls/false (S2cae@syntax-dispatch S319f@t 'each-any))) (if S31a1@ls/false (apply (lambda (S31a3@x*) (call-with-values (lambda () (S3180@rename* S31a3@x* S3197@old* S3198@new*)) (lambda (S31ab@S31a6 S31ac@S31a8 S31ad@S31aa) (let ((S31b1@new* S31ad@S31aa) (S31b2@old* S31ac@S31a8) (S31b3@y* S31ab@S31a6)) (list 'call-with-values (list 'lambda '() (car S3196@rhs*)) (list 'lambda S31b3@y* (S319d@f (cdr S3195@lhs*) (cdr S3196@rhs*) S31b2@old* S31b1@new*))))))) S31a1@ls/false) (let ((S31b7@t S319f@t)) (let ((S31b9@ls/false (S2cae@syntax-dispatch S31b7@t '#(each+ any () any)))) (if S31b9@ls/false (apply (lambda (S31bb@x* S31bc@x) (call-with-values (lambda () (S317e@rename S31bc@x S3197@old* S3198@new*)) (lambda (S31bf@y S31c0@old* S31c1@new*) (call-with-values (lambda () (S3180@rename* S31bb@x* S31c0@old* S31c1@new*)) (lambda (S31c5@y* S31c6@old* S31c7@new*) (list 'call-with-values (list 'lambda '() (car S3196@rhs*)) (list 'lambda (append S31c5@y* S31bf@y) (S319d@f (cdr S3195@lhs*) (cdr S3196@rhs*) S31c6@old* S31c7@new*)))))))) S31b9@ls/false) (let ((S31cb@t S31b7@t)) (let ((S31cd@ls/false (S2cae@syntax-dispatch S31cb@t 'any))) (if S31cd@ls/false (apply (lambda (S31cf@others) (S2d8e@syntax-violation '#f '"malformed bindings" S317b@stx S31cf@others)) S31cd@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S31cb@t)))))))))))))) S318b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3189@t))))))))))) (set! S4761@S2c6c@let-values-macro S2c6c@let-values-macro)) (begin (set! S2c6e@let*-values-macro (lambda (S31eb@stx) (let ((S31ee@check '#f)) (begin (set! S31ee@check (lambda (S321d@x*) (if (not (null? S321d@x*)) (let ((S321f@x (car S321d@x*))) (begin (if (not (S2aa7@id? S321f@x)) (S2d8e@syntax-violation '#f '"not an identifier" S31eb@stx S321f@x) (void)) (S31ee@check (cdr S321d@x*)) (if (S2ab3@bound-id-member? S321f@x (cdr S321d@x*)) (S2d8e@syntax-violation '#f '"duplicate identifier" S31eb@stx S321f@x) (void)))) (void)))) (let ((S31ef@t S31eb@stx)) (let ((S31f1@ls/false (S2cae@syntax-dispatch S31ef@t '(_ () any . each-any)))) (if S31f1@ls/false (apply (lambda (S31f3@b S31f4@b*) (cons* (S2c64@bless 'let) '() S31f3@b S31f4@b*)) S31f1@ls/false) (let ((S31f7@t S31ef@t)) (let ((S31f9@ls/false (S2cae@syntax-dispatch S31f7@t '(_ #(each (any any)) any . each-any)))) (if S31f9@ls/false (apply (lambda (S31fb@lhs* S31fc@rhs* S31fd@b S31fe@b*) (S2c64@bless (let S3207@f ((S3203@lhs* S31fb@lhs*) (S3204@rhs* S31fc@rhs*)) (if (null? S3203@lhs*) (cons 'begin (cons S31fd@b S31fe@b*)) (let ((S3209@t (car S3203@lhs*))) (let ((S320b@ls/false (S2cae@syntax-dispatch S3209@t 'each-any))) (if S320b@ls/false (apply (lambda (S320d@x*) (begin (S31ee@check S320d@x*) (list 'call-with-values (list 'lambda '() (car S3204@rhs*)) (list 'lambda S320d@x* (S3207@f (cdr S3203@lhs*) (cdr S3204@rhs*)))))) S320b@ls/false) (let ((S320f@t S3209@t)) (let ((S3211@ls/false (S2cae@syntax-dispatch S320f@t '#(each+ any () any)))) (if S3211@ls/false (apply (lambda (S3213@x* S3214@x) (begin (S31ee@check (cons S3214@x S3213@x*)) (list 'call-with-values (list 'lambda '() (car S3204@rhs*)) (list 'lambda (append S3213@x* S3214@x) (S3207@f (cdr S3203@lhs*) (cdr S3204@rhs*)))))) S3211@ls/false) (let ((S3217@t S320f@t)) (let ((S3219@ls/false (S2cae@syntax-dispatch S3217@t 'any))) (if S3219@ls/false (apply (lambda (S321b@others) (S2d8e@syntax-violation '#f '"malformed bindings" S31eb@stx S321b@others)) S3219@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3217@t)))))))))))))) S31f9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S31f7@t))))))))))) (set! S4762@S2c6e@let*-values-macro S2c6e@let*-values-macro)) (begin (set! S2c70@trace-lambda-macro (lambda (S3221@stx) (let ((S3223@t S3221@stx)) (let ((S3225@ls/false (S2cae@syntax-dispatch S3223@t '(_ any each-any any . each-any)))) (if S3225@ls/false (apply (lambda (S3227@who S3228@fmls S3229@b S322a@b*) (if (S2aaf@valid-bound-ids? S3228@fmls) (S2c64@bless (list 'make-traced-procedure (list 'quote S3227@who) (cons 'lambda (cons S3228@fmls (cons S3229@b S322a@b*))))) (S2c68@invalid-fmls-error S3221@stx S3228@fmls))) S3225@ls/false) (let ((S322f@t S3223@t)) (let ((S3231@ls/false (S2cae@syntax-dispatch S322f@t '(_ any #(each+ any () any) any . each-any)))) (if S3231@ls/false (apply (lambda (S3233@who S3234@fmls S3235@last S3236@b S3237@b*) (if (S2aaf@valid-bound-ids? (cons S3235@last S3234@fmls)) (S2c64@bless (list 'make-traced-procedure (list 'quote S3233@who) (cons 'lambda (cons (append S3234@fmls S3235@last) (cons S3236@b S3237@b*))))) (S2c68@invalid-fmls-error S3221@stx (append S3234@fmls S3235@last)))) S3231@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S322f@t))))))))) (set! S4763@S2c70@trace-lambda-macro S2c70@trace-lambda-macro)) (begin (set! S2c72@trace-define-macro (lambda (S323d@stx) (let ((S323f@t S323d@stx)) (let ((S3241@ls/false (S2cae@syntax-dispatch S323f@t '(_ (any . each-any) any . each-any)))) (if S3241@ls/false (apply (lambda (S3243@who S3244@fmls S3245@b S3246@b*) (if (S2aaf@valid-bound-ids? S3244@fmls) (S2c64@bless (list 'define S3243@who (list 'make-traced-procedure (list 'quote S3243@who) (cons 'lambda (cons S3244@fmls (cons S3245@b S3246@b*)))))) (S2c68@invalid-fmls-error S323d@stx S3244@fmls))) S3241@ls/false) (let ((S324b@t S323f@t)) (let ((S324d@ls/false (S2cae@syntax-dispatch S324b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if S324d@ls/false (apply (lambda (S324f@who S3250@fmls S3251@last S3252@b S3253@b*) (if (S2aaf@valid-bound-ids? (cons S3251@last S3250@fmls)) (S2c64@bless (list 'define S324f@who (list 'make-traced-procedure (list 'quote S324f@who) (cons 'lambda (cons (append S3250@fmls S3251@last) (cons S3252@b S3253@b*)))))) (S2c68@invalid-fmls-error S323d@stx (append S3250@fmls S3251@last)))) S324d@ls/false) (let ((S3259@t S324b@t)) (let ((S325b@ls/false (S2cae@syntax-dispatch S3259@t '(_ any any)))) (if S325b@ls/false (apply (lambda (S325d@who S325e@expr) (if (S2aa7@id? S325d@who) (S2c64@bless (list 'define S325d@who (list 'let (list (list 'v S325e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote S325d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (S2d8e@syntax-violation '#f '"invalid name" S323d@stx))) S325b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3259@t)))))))))))) (set! S4764@S2c72@trace-define-macro S2c72@trace-define-macro)) (begin (set! S2c74@trace-define-syntax-macro (lambda (S3261@stx) (let ((S3263@t S3261@stx)) (let ((S3265@ls/false (S2cae@syntax-dispatch S3263@t '(_ any any)))) (if S3265@ls/false (apply (lambda (S3267@who S3268@expr) (if (S2aa7@id? S3267@who) (S2c64@bless (list 'define-syntax S3267@who (list 'make-traced-macro (list 'quote S3267@who) S3268@expr))) (S2d8e@syntax-violation '#f '"invalid name" S3261@stx))) S3265@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3263@t)))))) (set! S4765@S2c74@trace-define-syntax-macro S2c74@trace-define-syntax-macro)) (begin (set! S2c76@trace-let/rec-syntax (lambda (S326b@who) (lambda (S326d@stx) (let ((S326f@t S326d@stx)) (let ((S3271@ls/false (S2cae@syntax-dispatch S326f@t '(_ #(each (any any)) any . each-any)))) (if S3271@ls/false (apply (lambda (S3273@lhs* S3274@rhs* S3275@b S3276@b*) (if (S2aaf@valid-bound-ids? S3273@lhs*) (let ((S327b@rhs* (map (lambda (S327d@lhs S327e@rhs) (list 'make-traced-macro (list 'quote S327d@lhs) S327e@rhs)) S3273@lhs* S3274@rhs*))) (S2c64@bless (cons S326b@who (cons (map list S3273@lhs* S327b@rhs*) (cons S3275@b S3276@b*))))) (S2c68@invalid-fmls-error S326d@stx S3273@lhs*))) S3271@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S326f@t))))))) (set! S4766@S2c76@trace-let/rec-syntax S2c76@trace-let/rec-syntax)) (begin (set! S2c78@trace-let-syntax-macro (S2c76@trace-let/rec-syntax 'let-syntax)) (set! S4767@S2c78@trace-let-syntax-macro S2c78@trace-let-syntax-macro)) (begin (set! S2c7a@trace-letrec-syntax-macro (S2c76@trace-let/rec-syntax 'letrec-syntax)) (set! S4768@S2c7a@trace-letrec-syntax-macro S2c7a@trace-letrec-syntax-macro)) (begin (set! S2c7c@guard-macro (lambda (S3281@x) (let ((S3284@gen-clauses '#f)) (begin (set! S3284@gen-clauses (lambda (S329b@con S329c@outerk S329d@clause*) (let ((S32a2@f '#f) (S32a4@f* '#f)) (begin (set! S32a2@f (lambda (S32db@x S32dc@k) (let ((S32df@t S32db@x)) (let ((S32e1@ls/false (S2cae@syntax-dispatch S32df@t '(any #(scheme-id =>) any)))) (if S32e1@ls/false (apply (lambda (S32e3@e S32e4@p) (let ((S32e7@t (gensym))) (list 'let (list (list S32e7@t S32e3@e)) (list 'if S32e7@t (list S32e4@p S32e7@t) S32dc@k)))) S32e1@ls/false) (let ((S32e9@t S32df@t)) (let ((S32eb@ls/false (S2cae@syntax-dispatch S32e9@t '(any)))) (if S32eb@ls/false (apply (lambda (S32ed@e) (let ((S32ef@t (gensym))) (list 'let (list (list S32ef@t S32ed@e)) (list 'if S32ef@t S32ef@t S32dc@k)))) S32eb@ls/false) (let ((S32f1@t S32e9@t)) (let ((S32f3@ls/false (S2cae@syntax-dispatch S32f1@t '(any any . each-any)))) (if S32f3@ls/false (apply (lambda (S32f5@e S32f6@v S32f7@v*) (list 'if S32f5@e (cons 'begin (cons S32f6@v S32f7@v*)) S32dc@k)) S32f3@ls/false) (let ((S32fb@t S32f1@t)) (let ((S32fd@ls/false (S2cae@syntax-dispatch S32fb@t '_))) (if S32fd@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid guard clause" S32db@x)) S32fd@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S32fb@t))))))))))))))) (set! S32a4@f* (lambda (S32b1@x*) (let ((S32b3@t S32b1@x*)) (let ((S32b5@ls/false (S2cae@syntax-dispatch S32b3@t '()))) (if S32b5@ls/false (apply (lambda () (let ((S32b7@g (gensym))) (values (list S32b7@g (list 'lambda '() (list 'raise-continuable S329b@con))) S32b7@g))) S32b5@ls/false) (let ((S32b9@t S32b3@t)) (let ((S32bb@ls/false (S2cae@syntax-dispatch S32b9@t '((#(scheme-id else) any . each-any))))) (if S32bb@ls/false (apply (lambda (S32bd@e S32be@e*) (values (cons 'begin (cons S32bd@e S32be@e*)) '#f)) S32bb@ls/false) (let ((S32c1@t S32b9@t)) (let ((S32c3@ls/false (S2cae@syntax-dispatch S32c1@t '(any . any)))) (if S32c3@ls/false (apply (lambda (S32c5@cls S32c6@cls*) (call-with-values (lambda () (S32a4@f* S32c6@cls*)) (lambda (S32cd@S32ca S32ce@S32cc) (let ((S32d1@g S32ce@S32cc) (S32d2@e S32cd@S32ca)) (values (S32a2@f S32c5@cls S32d2@e) S32d1@g))))) S32c3@ls/false) (let ((S32d5@t S32c1@t)) (let ((S32d7@ls/false (S2cae@syntax-dispatch S32d5@t 'any))) (if S32d7@ls/false (apply (lambda (S32d9@others) (S2d8e@syntax-violation '#f '"invalid guard clause" S32d9@others)) S32d7@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S32d5@t))))))))))))))) (call-with-values (lambda () (S32a4@f* S329d@clause*)) (lambda (S32a9@S32a6 S32aa@S32a8) (let ((S32ad@raisek S32aa@S32a8) (S32ae@code S32a9@S32a6)) (if S32ad@raisek (list (list 'call/cc (list 'lambda (list S32ad@raisek) (list S329c@outerk (list 'lambda '() S32ae@code))))) (list S329c@outerk (list 'lambda '() S32ae@code)))))))))) (let ((S3285@t S3281@x)) (let ((S3287@ls/false (S2cae@syntax-dispatch S3285@t '(_ (any . each-any) any . each-any)))) (if (and S3287@ls/false (apply (lambda (S3289@con S328a@clause* S328b@b S328c@b*) (S2aa7@id? S3289@con)) S3287@ls/false)) (apply (lambda (S3291@con S3292@clause* S3293@b S3294@b*) (let ((S3299@outerk (gensym))) (S2c64@bless (list (list 'call/cc (list 'lambda (list S3299@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list S3291@con) (S3284@gen-clauses S3291@con S3299@outerk S3292@clause*)) (cons 'lambda (cons '() (cons S3293@b S3294@b*))))))))))) S3287@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3285@t)))))))) (set! S4769@S2c7c@guard-macro S2c7c@guard-macro)) (begin (set! S2c7e@define-enumeration-macro (lambda (S32ff@stx) (let ((S3302@set? '#f) (S3304@remove-dups '#f)) (begin (set! S3302@set? (lambda (S331b@x) (or (null? S331b@x) (and (not (memq (car S331b@x) (cdr S331b@x))) (S3302@set? (cdr S331b@x)))))) (set! S3304@remove-dups (lambda (S3319@ls) (if (null? S3319@ls) '() (cons (car S3319@ls) (S3304@remove-dups (remq (car S3319@ls) (cdr S3319@ls))))))) (let ((S3305@t S32ff@stx)) (let ((S3307@ls/false (S2cae@syntax-dispatch S3305@t '(_ any each-any any)))) (if (and S3307@ls/false (apply (lambda (S3309@name S330a@id* S330b@maker) (and (S2aa7@id? S3309@name) (S2aa7@id? S330b@maker) (for-all S2aa7@id? S330a@id*))) S3307@ls/false)) (apply (lambda (S330f@name S3310@id* S3311@maker) (let ((S3315@name* (S3304@remove-dups (S2d94@syntax->datum S3310@id*))) (S3316@mk (gensym))) (S2c64@bless (list 'begin (list 'define S3316@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote S3315@name*)))) (list 'define-syntax S330f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote S3315@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote S330f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax S3311@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote S3311@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote S3315@name*)) (cons 'syntax-violation (cons (list 'quote S3311@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons S3316@mk '('(n* ...))))))))))))) S3307@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3305@t)))))))) (set! S476a@S2c7e@define-enumeration-macro S2c7e@define-enumeration-macro)) (begin (set! S2c80@time-macro (lambda (S331d@stx) (let ((S331f@t S331d@stx)) (let ((S3321@ls/false (S2cae@syntax-dispatch S331f@t '(_ any)))) (if S3321@ls/false (apply (lambda (S3323@expr) (S2c64@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() S3323@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) S3321@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S331f@t)))))) (set! S476b@S2c80@time-macro S2c80@time-macro)) (begin (set! S2c82@delay-macro (lambda (S3325@stx) (let ((S3327@t S3325@stx)) (let ((S3329@ls/false (S2cae@syntax-dispatch S3327@t '(_ any)))) (if S3329@ls/false (apply (lambda (S332b@expr) (S2c64@bless (list 'make-promise (list 'lambda '() S332b@expr)))) S3329@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3327@t)))))) (set! S476c@S2c82@delay-macro S2c82@delay-macro)) (begin (set! S2c84@assert-macro (lambda (S332d@stx) (let ((S332f@t S332d@stx)) (let ((S3331@ls/false (S2cae@syntax-dispatch S332f@t '(_ any)))) (if S3331@ls/false (apply (lambda (S3333@expr) (let ((S3335@pos (or (S2d86@expression-position S332d@stx) (S2d86@expression-position S3333@expr)))) (S2c64@bless (list 'unless S3333@expr (list 'assertion-error (list 'quote S3333@expr) (list 'quote S3335@pos)))))) S3331@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S332f@t)))))) (set! S476d@S2c84@assert-macro S2c84@assert-macro)) (begin (set! S2c86@endianness-macro (lambda (S3337@stx) (let ((S3339@t S3337@stx)) (let ((S333b@ls/false (S2cae@syntax-dispatch S3339@t '(_ any)))) (if S333b@ls/false (apply (lambda (S333d@e) (let ((S333f@t (S2d94@syntax->datum S333d@e))) (if (memv S333f@t '(little)) (S2c64@bless ''little) (if (memv S333f@t '(big)) (S2c64@bless ''big) (S2d8e@syntax-violation '#f '"endianness must be big or little" S3337@stx))))) S333b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3339@t)))))) (set! S476e@S2c86@endianness-macro S2c86@endianness-macro)) (begin (set! S2c88@identifier-syntax-macro (lambda (S3341@stx) (let ((S3343@t S3341@stx)) (let ((S3345@ls/false (S2cae@syntax-dispatch S3343@t '(_ any)))) (if S3345@ls/false (apply (lambda (S3347@expr) (S2c64@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax S3347@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax S3347@expr) '((syntax (e* ...)))))))))) S3345@ls/false) (let ((S3349@t S3343@t)) (let ((S334b@ls/false (S2cae@syntax-dispatch S3349@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and S334b@ls/false (apply (lambda (S334d@id1 S334e@expr1 S334f@id2 S3350@expr2 S3351@expr3) (and (S2aa7@id? S334d@id1) (S2aa7@id? S334f@id2) (S2aa7@id? S3350@expr2))) S334b@ls/false)) (apply (lambda (S3357@id1 S3358@expr1 S3359@id2 S335a@expr2 S335b@expr3) (S2c64@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax S3358@expr1)) (list (list 'set! 'id S335a@expr2) (list 'syntax S335b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons S3358@expr1 '(e* ...))))))))) S334b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3349@t))))))))) (set! S476f@S2c88@identifier-syntax-macro S2c88@identifier-syntax-macro)) (begin (set! S2c8a@do-macro (lambda (S3361@stx) (let ((S3364@bind '#f)) (begin (set! S3364@bind (lambda (S337b@x) (let ((S337d@t S337b@x)) (let ((S337f@ls/false (S2cae@syntax-dispatch S337d@t '(any any)))) (if S337f@ls/false (apply (lambda (S3381@x S3382@init) (list S3381@x S3382@init S3381@x)) S337f@ls/false) (let ((S3385@t S337d@t)) (let ((S3387@ls/false (S2cae@syntax-dispatch S3385@t '(any any any)))) (if S3387@ls/false (apply (lambda (S3389@x S338a@init S338b@step) (list S3389@x S338a@init S338b@step)) S3387@ls/false) (let ((S338f@t S3385@t)) (let ((S3391@ls/false (S2cae@syntax-dispatch S338f@t '_))) (if S3391@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid binding" S3361@stx)) S3391@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S338f@t)))))))))))) (let ((S3365@t S3361@stx)) (let ((S3367@ls/false (S2cae@syntax-dispatch S3365@t '(_ each-any (any . each-any) . each-any)))) (if S3367@ls/false (apply (lambda (S3369@binding* S336a@test S336b@expr* S336c@command*) (let ((S3371@t (map S3364@bind S3369@binding*))) (let ((S3373@ls/false (S2cae@syntax-dispatch S3371@t '#(each (any any any))))) (if S3373@ls/false (apply (lambda (S3375@x* S3376@init* S3377@step*) (if (S2aaf@valid-bound-ids? S3375@x*) (S2c64@bless (list 'letrec (list (list 'loop (list 'lambda S3375@x* (list 'if S336a@test (cons 'begin (cons '(if #f #f) S336b@expr*)) (cons 'begin (append S336c@command* (list (cons 'loop S3377@step*)))))))) (cons 'loop S3376@init*))) (S2d8e@syntax-violation '#f '"invalid bindings" S3361@stx))) S3373@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3371@t))))) S3367@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3365@t)))))))) (set! S4770@S2c8a@do-macro S2c8a@do-macro)) (begin (set! S2c8c@let*-macro (lambda (S3393@stx) (let ((S3395@t S3393@stx)) (let ((S3397@ls/false (S2cae@syntax-dispatch S3395@t '(_ #(each (any any)) any . each-any)))) (if (and S3397@ls/false (apply (lambda (S3399@lhs* S339a@rhs* S339b@b S339c@b*) (for-all S2aa7@id? S3399@lhs*)) S3397@ls/false)) (apply (lambda (S33a1@lhs* S33a2@rhs* S33a3@b S33a4@b*) (S2c64@bless (let S33ab@f ((S33a9@x* (map list S33a1@lhs* S33a2@rhs*))) (if (null? S33a9@x*) (cons 'let (cons '() (cons S33a3@b S33a4@b*))) (list 'let (list (car S33a9@x*)) (S33ab@f (cdr S33a9@x*))))))) S3397@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3395@t)))))) (set! S4771@S2c8c@let*-macro S2c8c@let*-macro)) (begin (set! S2c8e@or-macro (lambda (S33ad@stx) (let ((S33af@t S33ad@stx)) (let ((S33b1@ls/false (S2cae@syntax-dispatch S33af@t '(_)))) (if S33b1@ls/false (apply (lambda () '#f) S33b1@ls/false) (let ((S33b3@t S33af@t)) (let ((S33b5@ls/false (S2cae@syntax-dispatch S33b3@t '(_ any . each-any)))) (if S33b5@ls/false (apply (lambda (S33b7@e S33b8@e*) (S2c64@bless (let S33bf@f ((S33bb@e S33b7@e) (S33bc@e* S33b8@e*)) (if (null? S33bc@e*) (list 'begin '#f S33bb@e) (list 'let (list (list 't S33bb@e)) (list 'if 't 't (S33bf@f (car S33bc@e*) (cdr S33bc@e*)))))))) S33b5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S33b3@t))))))))) (set! S4772@S2c8e@or-macro S2c8e@or-macro)) (begin (set! S2c90@and-macro (lambda (S33c1@stx) (let ((S33c3@t S33c1@stx)) (let ((S33c5@ls/false (S2cae@syntax-dispatch S33c3@t '(_)))) (if S33c5@ls/false (apply (lambda () '#t) S33c5@ls/false) (let ((S33c7@t S33c3@t)) (let ((S33c9@ls/false (S2cae@syntax-dispatch S33c7@t '(_ any . each-any)))) (if S33c9@ls/false (apply (lambda (S33cb@e S33cc@e*) (S2c64@bless (let S33d3@f ((S33cf@e S33cb@e) (S33d0@e* S33cc@e*)) (if (null? S33d0@e*) (list 'begin '#f S33cf@e) (cons 'if (cons S33cf@e (cons (S33d3@f (car S33d0@e*) (cdr S33d0@e*)) '(#f)))))))) S33c9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S33c7@t))))))))) (set! S4773@S2c90@and-macro S2c90@and-macro)) (begin (set! S2c92@cond-macro (lambda (S33d5@stx) (let ((S33d7@t S33d5@stx)) (let ((S33d9@ls/false (S2cae@syntax-dispatch S33d7@t '(_ any . each-any)))) (if S33d9@ls/false (apply (lambda (S33db@cls S33dc@cls*) (S2c64@bless (let S33e3@f ((S33df@cls S33db@cls) (S33e0@cls* S33dc@cls*)) (if (null? S33e0@cls*) (let ((S33e5@t S33df@cls)) (let ((S33e7@ls/false (S2cae@syntax-dispatch S33e5@t '(#(scheme-id else) any . each-any)))) (if S33e7@ls/false (apply (lambda (S33e9@e S33ea@e*) (cons 'begin (cons S33e9@e S33ea@e*))) S33e7@ls/false) (let ((S33ed@t S33e5@t)) (let ((S33ef@ls/false (S2cae@syntax-dispatch S33ed@t '(any #(scheme-id =>) any)))) (if S33ef@ls/false (apply (lambda (S33f1@e S33f2@p) (list 'let (list (list 't S33f1@e)) (list 'if 't (cons S33f2@p '(t))))) S33ef@ls/false) (let ((S33f5@t S33ed@t)) (let ((S33f7@ls/false (S2cae@syntax-dispatch S33f5@t '(any)))) (if S33f7@ls/false (apply (lambda (S33f9@e) (cons 'or (cons S33f9@e '((if #f #f))))) S33f7@ls/false) (let ((S33fb@t S33f5@t)) (let ((S33fd@ls/false (S2cae@syntax-dispatch S33fb@t '(any . each-any)))) (if S33fd@ls/false (apply (lambda (S33ff@e S3400@e*) (list 'if S33ff@e (cons 'begin S3400@e*))) S33fd@ls/false) (let ((S3403@t S33fb@t)) (let ((S3405@ls/false (S2cae@syntax-dispatch S3403@t '_))) (if S3405@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid last clause" S33d5@stx)) S3405@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3403@t)))))))))))))))) (let ((S3407@t S33df@cls)) (let ((S3409@ls/false (S2cae@syntax-dispatch S3407@t '(#(scheme-id else) any . each-any)))) (if S3409@ls/false (apply (lambda (S340b@e S340c@e*) (S2d8e@syntax-violation '#f '"incorrect position of keyword else" S33d5@stx)) S3409@ls/false) (let ((S340f@t S3407@t)) (let ((S3411@ls/false (S2cae@syntax-dispatch S340f@t '(any #(scheme-id =>) any)))) (if S3411@ls/false (apply (lambda (S3413@e S3414@p) (list 'let (list (list 't S3413@e)) (list 'if 't (cons S3414@p '(t)) (S33e3@f (car S33e0@cls*) (cdr S33e0@cls*))))) S3411@ls/false) (let ((S3417@t S340f@t)) (let ((S3419@ls/false (S2cae@syntax-dispatch S3417@t '(any)))) (if S3419@ls/false (apply (lambda (S341b@e) (list 'or S341b@e (S33e3@f (car S33e0@cls*) (cdr S33e0@cls*)))) S3419@ls/false) (let ((S341d@t S3417@t)) (let ((S341f@ls/false (S2cae@syntax-dispatch S341d@t '(any . each-any)))) (if S341f@ls/false (apply (lambda (S3421@e S3422@e*) (list 'if S3421@e (cons 'begin S3422@e*) (S33e3@f (car S33e0@cls*) (cdr S33e0@cls*)))) S341f@ls/false) (let ((S3425@t S341d@t)) (let ((S3427@ls/false (S2cae@syntax-dispatch S3425@t '_))) (if S3427@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid last clause" S33d5@stx)) S3427@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3425@t)))))))))))))))))))) S33d9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S33d7@t)))))) (set! S4774@S2c92@cond-macro S2c92@cond-macro)) (begin (set! S2c94@do-include (lambda (S3429@stx S342a@id S342b@filename) (let ((S342f@filename (S2abb@stx->datum S342b@filename))) (begin (if (not (and (string? S342f@filename) (S2aa7@id? S342a@id))) (S2d8e@syntax-violation '#f '"invalid syntax" S3429@stx) (void)) (cons (S2c64@bless 'begin) (with-input-from-file S342f@filename (lambda () (let S3433@f ((S3431@ls '())) (let ((S3435@x (S25e4@S24b6@read-annotated))) (if (eof-object? S3435@x) (reverse S3431@ls) (S3433@f (cons (S2a87@datum->stx S342a@id S3435@x) S3431@ls)))))))))))) (set! S4775@S2c94@do-include S2c94@do-include)) (begin (set! S2c96@include-macro (lambda (S3437@e) (let ((S3439@t S3437@e)) (let ((S343b@ls/false (S2cae@syntax-dispatch S3439@t '(any any)))) (if S343b@ls/false (apply (lambda (S343d@id S343e@filename) (S2c94@do-include S3437@e S343d@id S343e@filename)) S343b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3439@t)))))) (set! S4776@S2c96@include-macro S2c96@include-macro)) (begin (set! S2c98@include-into-macro (lambda (S3441@e) (let ((S3443@t S3441@e)) (let ((S3445@ls/false (S2cae@syntax-dispatch S3443@t '(_ any any)))) (if S3445@ls/false (apply (lambda (S3447@id S3448@filename) (S2c94@do-include S3441@e S3447@id S3448@filename)) S3445@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3443@t)))))) (set! S4777@S2c98@include-into-macro S2c98@include-into-macro)) (begin (set! S2c9a@syntax-rules-macro (lambda (S344b@e) (let ((S344d@t S344b@e)) (let ((S344f@ls/false (S2cae@syntax-dispatch S344d@t '(_ each-any . #(each (any any)))))) (if S344f@ls/false (apply (lambda (S3451@lits S3452@pat* S3453@tmp*) (begin (S2cb4@verify-literals S3451@lits S344b@e) (S2c64@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons S3451@lits (map (lambda (S3457@pat S3458@tmp) (let ((S345b@t S3457@pat)) (let ((S345d@ls/false (S2cae@syntax-dispatch S345b@t '(_ . any)))) (if S345d@ls/false (apply (lambda (S345f@rest) (list (cons 'g S345f@rest) (list 'syntax S3458@tmp))) S345d@ls/false) (let ((S3461@t S345b@t)) (let ((S3463@ls/false (S2cae@syntax-dispatch S3461@t '_))) (if S3463@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid syntax-rules pattern" S344b@e S3457@pat)) S3463@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3461@t)))))))) S3452@pat* S3453@tmp*)))))))) S344f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S344d@t)))))) (set! S4778@S2c9a@syntax-rules-macro S2c9a@syntax-rules-macro)) (begin (set! S2c9c@quasiquote-macro (let ((S3466@datum '#f) (S3482@quasicons* '#f) (S3484@quasicons '#f) (S3486@quasiappend '#f) (S3488@quasivector '#f) (S348a@vquasi '#f) (S348c@quasi '#f)) (begin (set! S3466@datum (lambda (S3567@x) (list (S2c36@scheme-stx 'quote) (S2a8f@mkstx S3567@x '() '() '())))) (set! S3482@quasicons* (lambda (S355f@x S3560@y) (let S3565@f ((S3563@x S355f@x)) (if (null? S3563@x) S3560@y (S3484@quasicons (car S3563@x) (S3565@f (cdr S3563@x))))))) (set! S3484@quasicons (lambda (S3539@x S353a@y) (let ((S353d@t S353a@y)) (let ((S353f@ls/false (S2cae@syntax-dispatch S353d@t '(#(scheme-id quote) any)))) (if S353f@ls/false (apply (lambda (S3541@dy) (let ((S3543@t S3539@x)) (let ((S3545@ls/false (S2cae@syntax-dispatch S3543@t '(#(scheme-id quote) any)))) (if S3545@ls/false (apply (lambda (S3547@dx) (list (S2c36@scheme-stx 'quote) (cons S3547@dx S3541@dy))) S3545@ls/false) (let ((S3549@t S3543@t)) (let ((S354b@ls/false (S2cae@syntax-dispatch S3549@t '_))) (if S354b@ls/false (apply (lambda () (let ((S354d@t S3541@dy)) (let ((S354f@ls/false (S2cae@syntax-dispatch S354d@t '()))) (if S354f@ls/false (apply (lambda () (list (S2c36@scheme-stx 'list) S3539@x)) S354f@ls/false) (let ((S3551@t S354d@t)) (let ((S3553@ls/false (S2cae@syntax-dispatch S3551@t '_))) (if S3553@ls/false (apply (lambda () (list (S2c36@scheme-stx 'cons) S3539@x S353a@y)) S3553@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3551@t)))))))) S354b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3549@t)))))))) S353f@ls/false) (let ((S3555@t S353d@t)) (let ((S3557@ls/false (S2cae@syntax-dispatch S3555@t '(#(scheme-id list) . each-any)))) (if S3557@ls/false (apply (lambda (S3559@stuff) (cons* (S2c36@scheme-stx 'list) S3539@x S3559@stuff)) S3557@ls/false) (let ((S355b@t S3555@t)) (let ((S355d@ls/false (S2cae@syntax-dispatch S355b@t '_))) (if S355d@ls/false (apply (lambda () (list (S2c36@scheme-stx 'cons) S3539@x S353a@y)) S355d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S355b@t)))))))))))) (set! S3486@quasiappend (lambda (S351f@x S3520@y) (let ((S3523@ls (let S3527@f ((S3525@x S351f@x)) (if (null? S3525@x) (let ((S3529@t S3520@y)) (let ((S352b@ls/false (S2cae@syntax-dispatch S3529@t '(#(scheme-id quote) ())))) (if S352b@ls/false (apply (lambda () '()) S352b@ls/false) (let ((S352d@t S3529@t)) (let ((S352f@ls/false (S2cae@syntax-dispatch S352d@t '_))) (if S352f@ls/false (apply (lambda () (list S3520@y)) S352f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S352d@t))))))) (let ((S3531@t (car S3525@x))) (let ((S3533@ls/false (S2cae@syntax-dispatch S3531@t '(#(scheme-id quote) ())))) (if S3533@ls/false (apply (lambda () (S3527@f (cdr S3525@x))) S3533@ls/false) (let ((S3535@t S3531@t)) (let ((S3537@ls/false (S2cae@syntax-dispatch S3535@t '_))) (if S3537@ls/false (apply (lambda () (cons (car S3525@x) (S3527@f (cdr S3525@x)))) S3537@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3535@t))))))))))) (if (null? S3523@ls) (list (S2c36@scheme-stx 'quote) '()) (if (null? (cdr S3523@ls)) (car S3523@ls) (cons* (S2c36@scheme-stx 'append) S3523@ls)))))) (set! S3488@quasivector (lambda (S34ed@x) (let ((S34ef@pat-x S34ed@x)) (let ((S34f1@t S34ef@pat-x)) (let ((S34f3@ls/false (S2cae@syntax-dispatch S34f1@t '(#(scheme-id quote) each-any)))) (if S34f3@ls/false (apply (lambda (S34f5@x*) (list (S2c36@scheme-stx 'quote) (list->vector S34f5@x*))) S34f3@ls/false) (let ((S34f7@t S34f1@t)) (let ((S34f9@ls/false (S2cae@syntax-dispatch S34f7@t '_))) (if S34f9@ls/false (apply (lambda () (let S3501@f ((S34fb@x S34ed@x) (S34fc@k (lambda (S34ff@ls) (cons* (S2c36@scheme-stx 'vector) S34ff@ls)))) (let ((S3503@t S34fb@x)) (let ((S3505@ls/false (S2cae@syntax-dispatch S3503@t '(#(scheme-id quote) each-any)))) (if S3505@ls/false (apply (lambda (S3507@x*) (S34fc@k (map (lambda (S3509@x) (list (S2c36@scheme-stx 'quote) S3509@x)) S3507@x*))) S3505@ls/false) (let ((S350b@t S3503@t)) (let ((S350d@ls/false (S2cae@syntax-dispatch S350b@t '(#(scheme-id list) . each-any)))) (if S350d@ls/false (apply (lambda (S350f@x*) (S34fc@k S350f@x*)) S350d@ls/false) (let ((S3511@t S350b@t)) (let ((S3513@ls/false (S2cae@syntax-dispatch S3511@t '(#(scheme-id cons) any any)))) (if S3513@ls/false (apply (lambda (S3515@x S3516@y) (S3501@f S3516@y (lambda (S3519@ls) (S34fc@k (cons S3515@x S3519@ls))))) S3513@ls/false) (let ((S351b@t S3511@t)) (let ((S351d@ls/false (S2cae@syntax-dispatch S351b@t '_))) (if S351d@ls/false (apply (lambda () (list (S2c36@scheme-stx 'list->vector) S34ef@pat-x)) S351d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S351b@t))))))))))))))) S34f9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S34f7@t)))))))))) (set! S348a@vquasi (lambda (S34cb@p S34cc@lev) (let ((S34cf@t S34cb@p)) (let ((S34d1@ls/false (S2cae@syntax-dispatch S34cf@t '(any . any)))) (if S34d1@ls/false (apply (lambda (S34d3@p S34d4@q) (let ((S34d7@t S34d3@p)) (let ((S34d9@ls/false (S2cae@syntax-dispatch S34d7@t '(#(scheme-id unquote) . each-any)))) (if S34d9@ls/false (apply (lambda (S34db@p) (if (= S34cc@lev '0) (S3482@quasicons* S34db@p (S348a@vquasi S34d4@q S34cc@lev)) (S3484@quasicons (S3484@quasicons (S3466@datum 'unquote) (S348c@quasi S34db@p (- S34cc@lev '1))) (S348a@vquasi S34d4@q S34cc@lev)))) S34d9@ls/false) (let ((S34dd@t S34d7@t)) (let ((S34df@ls/false (S2cae@syntax-dispatch S34dd@t '(#(scheme-id unquote-splicing) . each-any)))) (if S34df@ls/false (apply (lambda (S34e1@p) (if (= S34cc@lev '0) (S3486@quasiappend S34e1@p (S348a@vquasi S34d4@q S34cc@lev)) (S3484@quasicons (S3484@quasicons (S3466@datum 'unquote-splicing) (S348c@quasi S34e1@p (- S34cc@lev '1))) (S348a@vquasi S34d4@q S34cc@lev)))) S34df@ls/false) (let ((S34e3@t S34dd@t)) (let ((S34e5@ls/false (S2cae@syntax-dispatch S34e3@t 'any))) (if S34e5@ls/false (apply (lambda (S34e7@p) (S3484@quasicons (S348c@quasi S34e7@p S34cc@lev) (S348a@vquasi S34d4@q S34cc@lev))) S34e5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S34e3@t))))))))))) S34d1@ls/false) (let ((S34e9@t S34cf@t)) (let ((S34eb@ls/false (S2cae@syntax-dispatch S34e9@t '()))) (if S34eb@ls/false (apply (lambda () (list (S2c36@scheme-stx 'quote) '())) S34eb@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S34e9@t))))))))) (set! S348c@quasi (lambda (S3495@p S3496@lev) (let ((S3499@t S3495@p)) (let ((S349b@ls/false (S2cae@syntax-dispatch S3499@t '(#(scheme-id unquote) any)))) (if S349b@ls/false (apply (lambda (S349d@p) (if (= S3496@lev '0) S349d@p (S3484@quasicons (S3466@datum 'unquote) (S348c@quasi (list S349d@p) (- S3496@lev '1))))) S349b@ls/false) (let ((S349f@t S3499@t)) (let ((S34a1@ls/false (S2cae@syntax-dispatch S349f@t '((#(scheme-id unquote) . each-any) . any)))) (if S34a1@ls/false (apply (lambda (S34a3@p S34a4@q) (if (= S3496@lev '0) (S3482@quasicons* S34a3@p (S348c@quasi S34a4@q S3496@lev)) (S3484@quasicons (S3484@quasicons (S3466@datum 'unquote) (S348c@quasi S34a3@p (- S3496@lev '1))) (S348c@quasi S34a4@q S3496@lev)))) S34a1@ls/false) (let ((S34a7@t S349f@t)) (let ((S34a9@ls/false (S2cae@syntax-dispatch S34a7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if S34a9@ls/false (apply (lambda (S34ab@p S34ac@q) (if (= S3496@lev '0) (S3486@quasiappend S34ab@p (S348c@quasi S34ac@q S3496@lev)) (S3484@quasicons (S3484@quasicons (S3466@datum 'unquote-splicing) (S348c@quasi S34ab@p (- S3496@lev '1))) (S348c@quasi S34ac@q S3496@lev)))) S34a9@ls/false) (let ((S34af@t S34a7@t)) (let ((S34b1@ls/false (S2cae@syntax-dispatch S34af@t '(#(scheme-id quasiquote) any)))) (if S34b1@ls/false (apply (lambda (S34b3@p) (S3484@quasicons (S3466@datum 'quasiquote) (S348c@quasi (list S34b3@p) (+ S3496@lev '1)))) S34b1@ls/false) (let ((S34b5@t S34af@t)) (let ((S34b7@ls/false (S2cae@syntax-dispatch S34b5@t '(any . any)))) (if S34b7@ls/false (apply (lambda (S34b9@p S34ba@q) (S3484@quasicons (S348c@quasi S34b9@p S3496@lev) (S348c@quasi S34ba@q S3496@lev))) S34b7@ls/false) (let ((S34bd@t S34b5@t)) (let ((S34bf@ls/false (S2cae@syntax-dispatch S34bd@t '#(vector each-any)))) (if (and S34bf@ls/false (apply (lambda (S34c1@x) (not (S2a73@stx? S34c1@x))) S34bf@ls/false)) (apply (lambda (S34c3@x) (S3488@quasivector (S348a@vquasi S34c3@x S3496@lev))) S34bf@ls/false) (let ((S34c5@t S34bd@t)) (let ((S34c7@ls/false (S2cae@syntax-dispatch S34c5@t 'any))) (if S34c7@ls/false (apply (lambda (S34c9@p) (list (S2c36@scheme-stx 'quote) S34c9@p)) S34c7@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S34c5@t)))))))))))))))))))))))) (lambda (S348d@x) (let ((S348f@t S348d@x)) (let ((S3491@ls/false (S2cae@syntax-dispatch S348f@t '(_ any)))) (if S3491@ls/false (apply (lambda (S3493@e) (S348c@quasi S3493@e '0)) S3491@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S348f@t)))))))) (set! S4779@S2c9c@quasiquote-macro S2c9c@quasiquote-macro)) (begin (set! S2c9e@quasisyntax-macro (let ((S356a@quasi '#f)) (begin (set! S356a@quasi (lambda (S3585@p S3586@lev) (let ((S3589@t S3585@p)) (let ((S358b@ls/false (S2cae@syntax-dispatch S3589@t '(#(scheme-id unsyntax) any)))) (if S358b@ls/false (apply (lambda (S358d@p) (if (= S3586@lev '0) (let ((S358f@g (gensym))) (values (list S358f@g) (list S358d@p) S358f@g)) (call-with-values (lambda () (S356a@quasi S358d@p (- S3586@lev '1))) (lambda (S3597@S3592 S3598@S3594 S3599@S3596) (let ((S359d@p S3599@S3596) (S359e@rhs* S3598@S3594) (S359f@lhs* S3597@S3592)) (values S359f@lhs* S359e@rhs* (list 'unsyntax S359d@p))))))) S358b@ls/false) (let ((S35a3@t S3589@t)) (let ((S35a5@ls/false (S2cae@syntax-dispatch S35a3@t '#(scheme-id unsyntax)))) (if (and S35a5@ls/false (apply (lambda () (= S3586@lev '0)) S35a5@ls/false)) (apply (lambda () (S2d8e@syntax-violation '#f '"incorrect use of unsyntax" S3585@p)) S35a5@ls/false) (let ((S35a7@t S35a3@t)) (let ((S35a9@ls/false (S2cae@syntax-dispatch S35a7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if S35a9@ls/false (apply (lambda (S35ab@p* S35ac@q) (call-with-values (lambda () (S356a@quasi S35ac@q S3586@lev)) (lambda (S35b5@S35b0 S35b6@S35b2 S35b7@S35b4) (let ((S35bb@q S35b7@S35b4) (S35bc@rhs* S35b6@S35b2) (S35bd@lhs* S35b5@S35b0)) (if (= S3586@lev '0) (let ((S35c1@g* (map (lambda (S35c3@x) (gensym)) S35ab@p*))) (values (append S35c1@g* S35bd@lhs*) (append S35ab@p* S35bc@rhs*) (append S35c1@g* S35bb@q))) (call-with-values (lambda () (S356a@quasi S35ab@p* (- S3586@lev '1))) (lambda (S35cb@S35c6 S35cc@S35c8 S35cd@S35ca) (let ((S35d1@p* S35cd@S35ca) (S35d2@rhs2* S35cc@S35c8) (S35d3@lhs2* S35cb@S35c6)) (values (append S35d3@lhs2* S35bd@lhs*) (append S35d2@rhs2* S35bc@rhs*) (cons (cons 'unsyntax S35d1@p*) S35bb@q)))))))))) S35a9@ls/false) (let ((S35d7@t S35a7@t)) (let ((S35d9@ls/false (S2cae@syntax-dispatch S35d7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if S35d9@ls/false (apply (lambda (S35db@p* S35dc@q) (call-with-values (lambda () (S356a@quasi S35dc@q S3586@lev)) (lambda (S35e5@S35e0 S35e6@S35e2 S35e7@S35e4) (let ((S35eb@q S35e7@S35e4) (S35ec@rhs* S35e6@S35e2) (S35ed@lhs* S35e5@S35e0)) (if (= S3586@lev '0) (let ((S35f1@g* (map (lambda (S35f3@x) (gensym)) S35db@p*))) (values (append (map (lambda (S35f5@g) (cons S35f5@g '(...))) S35f1@g*) S35ed@lhs*) (append S35db@p* S35ec@rhs*) (append (apply append (map (lambda (S35f7@g) (cons S35f7@g '(...))) S35f1@g*)) S35eb@q))) (call-with-values (lambda () (S356a@quasi S35db@p* (- S3586@lev '1))) (lambda (S35ff@S35fa S3600@S35fc S3601@S35fe) (let ((S3605@p* S3601@S35fe) (S3606@rhs2* S3600@S35fc) (S3607@lhs2* S35ff@S35fa)) (values (append S3607@lhs2* S35ed@lhs*) (append S3606@rhs2* S35ec@rhs*) (cons (cons 'unsyntax-splicing S3605@p*) S35eb@q)))))))))) S35d9@ls/false) (let ((S360b@t S35d7@t)) (let ((S360d@ls/false (S2cae@syntax-dispatch S360b@t '#(scheme-id unsyntax-splicing)))) (if (and S360d@ls/false (apply (lambda () (= S3586@lev '0)) S360d@ls/false)) (apply (lambda () (S2d8e@syntax-violation '#f '"incorrect use of unsyntax-splicing" S3585@p)) S360d@ls/false) (let ((S360f@t S360b@t)) (let ((S3611@ls/false (S2cae@syntax-dispatch S360f@t '(#(scheme-id quasisyntax) any)))) (if S3611@ls/false (apply (lambda (S3613@p) (call-with-values (lambda () (S356a@quasi S3613@p (+ S3586@lev '1))) (lambda (S361b@S3616 S361c@S3618 S361d@S361a) (let ((S3621@p S361d@S361a) (S3622@rhs* S361c@S3618) (S3623@lhs* S361b@S3616)) (values S3623@lhs* S3622@rhs* (list 'quasisyntax S3621@p)))))) S3611@ls/false) (let ((S3627@t S360f@t)) (let ((S3629@ls/false (S2cae@syntax-dispatch S3627@t '(any . any)))) (if S3629@ls/false (apply (lambda (S362b@p S362c@q) (call-with-values (lambda () (S356a@quasi S362b@p S3586@lev)) (lambda (S363b@S3630 S363c@S3632 S363d@S3634) (call-with-values (lambda () (S356a@quasi S362c@q S3586@lev)) (lambda (S3641@S3636 S3642@S3638 S3643@S363a) (let ((S3647@q S3643@S363a) (S3648@rhs2* S3642@S3638) (S3649@lhs2* S3641@S3636) (S364a@p S363d@S3634) (S364b@rhs* S363c@S3632) (S364c@lhs* S363b@S3630)) (values (append S3649@lhs2* S364c@lhs*) (append S3648@rhs2* S364b@rhs*) (cons S364a@p S3647@q)))))))) S3629@ls/false) (let ((S3653@t S3627@t)) (let ((S3655@ls/false (S2cae@syntax-dispatch S3653@t '#(vector each-any)))) (if S3655@ls/false (apply (lambda (S3657@x*) (call-with-values (lambda () (S356a@quasi S3657@x* S3586@lev)) (lambda (S365f@S365a S3660@S365c S3661@S365e) (let ((S3665@x* S3661@S365e) (S3666@rhs* S3660@S365c) (S3667@lhs* S365f@S365a)) (values S3667@lhs* S3666@rhs* (list->vector S3665@x*)))))) S3655@ls/false) (let ((S366b@t S3653@t)) (let ((S366d@ls/false (S2cae@syntax-dispatch S366b@t '_))) (if S366d@ls/false (apply (lambda () (values '() '() S3585@p)) S366d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S366b@t)))))))))))))))))))))))))))))) (lambda (S356b@x) (let ((S356d@t S356b@x)) (let ((S356f@ls/false (S2cae@syntax-dispatch S356d@t '(_ any)))) (if S356f@ls/false (apply (lambda (S3571@e) (call-with-values (lambda () (S356a@quasi S3571@e '0)) (lambda (S3579@S3574 S357a@S3576 S357b@S3578) (let ((S357f@v S357b@S3578) (S3580@rhs* S357a@S3576) (S3581@lhs* S3579@S3574)) (S2c64@bless (list 'syntax-case (cons 'list S3580@rhs*) '() (list S3581@lhs* (list 'syntax S357f@v)))))))) S356f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S356d@t)))))))) (set! S477a@S2c9e@quasisyntax-macro S2c9e@quasisyntax-macro)) (begin (set! S2ca0@define-struct-macro (lambda (S366f@stx) (S2d8e@syntax-violation '#f '"define-struct not supported" S366f@stx))) (set! S477b@S2ca0@define-struct-macro S2ca0@define-struct-macro)) (begin (set! S2ca2@define-record-type-macro (lambda (S3671@x) (let ((S3674@id '#f) (S3676@get-record-name '#f) (S3678@get-record-constructor-name '#f) (S367a@get-record-predicate-name '#f) (S367c@get-clause '#f) (S367e@foo-rtd-code '#f) (S3680@parent-rtd-code '#f) (S3682@parent-rcd-code '#f) (S3684@foo-rcd-code '#f) (S3686@get-protocol-code '#f) (S3688@get-fields '#f) (S368a@get-mutator-indices '#f) (S368c@get-mutators '#f) (S368e@get-accessors '#f) (S3690@enumerate '#f) (S3692@do-define-record '#f) (S3694@verify-clauses '#f)) (begin (set! S3674@id (lambda (S3867@ctxt . S3869@str*) (S2d92@datum->syntax S3867@ctxt (string->symbol (apply string-append (map (lambda (S386b@x) (if (symbol? S386b@x) (symbol->string S386b@x) (if (string? S386b@x) S386b@x (assertion-violation 'define-record-type '"BUG")))) S3869@str*)))))) (set! S3676@get-record-name (lambda (S3855@spec) (let ((S3857@t S3855@spec)) (let ((S3859@ls/false (S2cae@syntax-dispatch S3857@t '(any any any)))) (if S3859@ls/false (apply (lambda (S385b@foo S385c@make-foo S385d@foo?) S385b@foo) S3859@ls/false) (let ((S3861@t S3857@t)) (let ((S3863@ls/false (S2cae@syntax-dispatch S3861@t 'any))) (if S3863@ls/false (apply (lambda (S3865@foo) S3865@foo) S3863@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3861@t))))))))) (set! S3678@get-record-constructor-name (lambda (S3841@spec) (let ((S3843@t S3841@spec)) (let ((S3845@ls/false (S2cae@syntax-dispatch S3843@t '(any any any)))) (if S3845@ls/false (apply (lambda (S3847@foo S3848@make-foo S3849@foo?) S3848@make-foo) S3845@ls/false) (let ((S384d@t S3843@t)) (let ((S384f@ls/false (S2cae@syntax-dispatch S384d@t 'any))) (if (and S384f@ls/false (apply (lambda (S3851@foo) (S2aa7@id? S3851@foo)) S384f@ls/false)) (apply (lambda (S3853@foo) (S3674@id S3853@foo '"make-" (S2abb@stx->datum S3853@foo))) S384f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S384d@t))))))))) (set! S367a@get-record-predicate-name (lambda (S382d@spec) (let ((S382f@t S382d@spec)) (let ((S3831@ls/false (S2cae@syntax-dispatch S382f@t '(any any any)))) (if S3831@ls/false (apply (lambda (S3833@foo S3834@make-foo S3835@foo?) S3835@foo?) S3831@ls/false) (let ((S3839@t S382f@t)) (let ((S383b@ls/false (S2cae@syntax-dispatch S3839@t 'any))) (if (and S383b@ls/false (apply (lambda (S383d@foo) (S2aa7@id? S383d@foo)) S383b@ls/false)) (apply (lambda (S383f@foo) (S3674@id S383f@foo (S2abb@stx->datum S383f@foo) '"?")) S383b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3839@t))))))))) (set! S367c@get-clause (lambda (S381b@id S381c@ls) (let ((S381f@t S381c@ls)) (let ((S3821@ls/false (S2cae@syntax-dispatch S381f@t '()))) (if S3821@ls/false (apply (lambda () '#f) S3821@ls/false) (let ((S3823@t S381f@t)) (let ((S3825@ls/false (S2cae@syntax-dispatch S3823@t '((any . any) . any)))) (if S3825@ls/false (apply (lambda (S3827@x S3828@rest S3829@ls) (if (S2aad@free-id=? (S2c64@bless S381b@id) S3827@x) (cons S3827@x S3828@rest) (S367c@get-clause S381b@id S3829@ls))) S3825@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3823@t))))))))) (set! S367e@foo-rtd-code (lambda (S37c9@name S37ca@clause* S37cb@parent-rtd-code) (let ((S37d0@convert-field-spec* '#f)) (begin (set! S37d0@convert-field-spec* (lambda (S3801@ls) (list->vector (map (lambda (S3803@x) (let ((S3805@t S3803@x)) (let ((S3807@ls/false (S2cae@syntax-dispatch S3805@t '(#(scheme-id mutable) any . any)))) (if S3807@ls/false (apply (lambda (S3809@name S380a@rest) (list 'mutable S3809@name)) S3807@ls/false) (let ((S380d@t S3805@t)) (let ((S380f@ls/false (S2cae@syntax-dispatch S380d@t '(#(scheme-id immutable) any . any)))) (if S380f@ls/false (apply (lambda (S3811@name S3812@rest) (list 'immutable S3811@name)) S380f@ls/false) (let ((S3815@t S380d@t)) (let ((S3817@ls/false (S2cae@syntax-dispatch S3815@t 'any))) (if S3817@ls/false (apply (lambda (S3819@name) (list 'immutable S3819@name)) S3817@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3815@t))))))))))) S3801@ls)))) (let ((S37d1@uid-code (let ((S37d9@t (S367c@get-clause 'nongenerative S37ca@clause*))) (let ((S37db@ls/false (S2cae@syntax-dispatch S37d9@t '(_)))) (if S37db@ls/false (apply (lambda () (list 'quote (gensym))) S37db@ls/false) (let ((S37dd@t S37d9@t)) (let ((S37df@ls/false (S2cae@syntax-dispatch S37dd@t '(_ any)))) (if S37df@ls/false (apply (lambda (S37e1@uid) (list 'quote S37e1@uid)) S37df@ls/false) (let ((S37e3@t S37dd@t)) (let ((S37e5@ls/false (S2cae@syntax-dispatch S37e3@t '_))) (if S37e5@ls/false (apply (lambda () '#f) S37e5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37e3@t))))))))))) (S37d2@sealed? (let ((S37e7@t (S367c@get-clause 'sealed S37ca@clause*))) (let ((S37e9@ls/false (S2cae@syntax-dispatch S37e7@t '(_ #(atom #t))))) (if S37e9@ls/false (apply (lambda () '#t) S37e9@ls/false) (let ((S37eb@t S37e7@t)) (let ((S37ed@ls/false (S2cae@syntax-dispatch S37eb@t '_))) (if S37ed@ls/false (apply (lambda () '#f) S37ed@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37eb@t)))))))) (S37d3@opaque? (let ((S37ef@t (S367c@get-clause 'opaque S37ca@clause*))) (let ((S37f1@ls/false (S2cae@syntax-dispatch S37ef@t '(_ #(atom #t))))) (if S37f1@ls/false (apply (lambda () '#t) S37f1@ls/false) (let ((S37f3@t S37ef@t)) (let ((S37f5@ls/false (S2cae@syntax-dispatch S37f3@t '_))) (if S37f5@ls/false (apply (lambda () '#f) S37f5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37f3@t)))))))) (S37d4@fields (let ((S37f7@t (S367c@get-clause 'fields S37ca@clause*))) (let ((S37f9@ls/false (S2cae@syntax-dispatch S37f7@t '(_ . each-any)))) (if S37f9@ls/false (apply (lambda (S37fb@field-spec*) (list 'quote (S37d0@convert-field-spec* S37fb@field-spec*))) S37f9@ls/false) (let ((S37fd@t S37f7@t)) (let ((S37ff@ls/false (S2cae@syntax-dispatch S37fd@t '_))) (if S37ff@ls/false (apply (lambda () ''#()) S37ff@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37fd@t))))))))) (S2c64@bless (list 'make-record-type-descriptor (list 'quote S37c9@name) S37cb@parent-rtd-code S37d1@uid-code S37d2@sealed? S37d3@opaque? S37d4@fields))))))) (set! S3680@parent-rtd-code (lambda (S37b1@clause*) (let ((S37b3@t (S367c@get-clause 'parent S37b1@clause*))) (let ((S37b5@ls/false (S2cae@syntax-dispatch S37b3@t '(_ any)))) (if S37b5@ls/false (apply (lambda (S37b7@name) (list 'record-type-descriptor S37b7@name)) S37b5@ls/false) (let ((S37b9@t S37b3@t)) (let ((S37bb@ls/false (S2cae@syntax-dispatch S37b9@t '#(atom #f)))) (if S37bb@ls/false (apply (lambda () (let ((S37bd@t (S367c@get-clause 'parent-rtd S37b1@clause*))) (let ((S37bf@ls/false (S2cae@syntax-dispatch S37bd@t '(_ any any)))) (if S37bf@ls/false (apply (lambda (S37c1@rtd S37c2@rcd) S37c1@rtd) S37bf@ls/false) (let ((S37c5@t S37bd@t)) (let ((S37c7@ls/false (S2cae@syntax-dispatch S37c5@t '#(atom #f)))) (if S37c7@ls/false (apply (lambda () '#f) S37c7@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37c5@t)))))))) S37bb@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37b9@t))))))))) (set! S3682@parent-rcd-code (lambda (S3799@clause*) (let ((S379b@t (S367c@get-clause 'parent S3799@clause*))) (let ((S379d@ls/false (S2cae@syntax-dispatch S379b@t '(_ any)))) (if S379d@ls/false (apply (lambda (S379f@name) (list 'record-constructor-descriptor S379f@name)) S379d@ls/false) (let ((S37a1@t S379b@t)) (let ((S37a3@ls/false (S2cae@syntax-dispatch S37a1@t '#(atom #f)))) (if S37a3@ls/false (apply (lambda () (let ((S37a5@t (S367c@get-clause 'parent-rtd S3799@clause*))) (let ((S37a7@ls/false (S2cae@syntax-dispatch S37a5@t '(_ any any)))) (if S37a7@ls/false (apply (lambda (S37a9@rtd S37aa@rcd) S37aa@rcd) S37a7@ls/false) (let ((S37ad@t S37a5@t)) (let ((S37af@ls/false (S2cae@syntax-dispatch S37ad@t '#(atom #f)))) (if S37af@ls/false (apply (lambda () '#f) S37af@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37ad@t)))))))) S37a3@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S37a1@t))))))))) (set! S3684@foo-rcd-code (lambda (S3791@clause* S3792@foo-rtd S3793@protocol S3794@parent-rcd-code) (list 'make-record-constructor-descriptor S3792@foo-rtd S3794@parent-rcd-code S3793@protocol))) (set! S3686@get-protocol-code (lambda (S3785@clause*) (let ((S3787@t (S367c@get-clause 'protocol S3785@clause*))) (let ((S3789@ls/false (S2cae@syntax-dispatch S3787@t '(_ any)))) (if S3789@ls/false (apply (lambda (S378b@expr) S378b@expr) S3789@ls/false) (let ((S378d@t S3787@t)) (let ((S378f@ls/false (S2cae@syntax-dispatch S378d@t '_))) (if S378f@ls/false (apply (lambda () '#f) S378f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S378d@t))))))))) (set! S3688@get-fields (lambda (S3773@clause*) (let ((S3775@t S3773@clause*)) (let ((S3777@ls/false (S2cae@syntax-dispatch S3775@t '()))) (if S3777@ls/false (apply (lambda () '()) S3777@ls/false) (let ((S3779@t S3775@t)) (let ((S377b@ls/false (S2cae@syntax-dispatch S3779@t '((#(scheme-id fields) . each-any) . _)))) (if S377b@ls/false (apply (lambda (S377d@f*) S377d@f*) S377b@ls/false) (let ((S377f@t S3779@t)) (let ((S3781@ls/false (S2cae@syntax-dispatch S377f@t '(_ . any)))) (if S3781@ls/false (apply (lambda (S3783@rest) (S3688@get-fields S3783@rest)) S3781@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S377f@t)))))))))))) (set! S368a@get-mutator-indices (lambda (S375b@fields) (let S3761@f ((S375d@fields S375b@fields) (S375e@i '0)) (let ((S3763@t S375d@fields)) (let ((S3765@ls/false (S2cae@syntax-dispatch S3763@t '()))) (if S3765@ls/false (apply (lambda () '()) S3765@ls/false) (let ((S3767@t S3763@t)) (let ((S3769@ls/false (S2cae@syntax-dispatch S3767@t '((#(scheme-id mutable) . _) . any)))) (if S3769@ls/false (apply (lambda (S376b@rest) (cons S375e@i (S3761@f S376b@rest (+ S375e@i '1)))) S3769@ls/false) (let ((S376d@t S3767@t)) (let ((S376f@ls/false (S2cae@syntax-dispatch S376d@t '(_ . any)))) (if S376f@ls/false (apply (lambda (S3771@rest) (S3761@f S3771@rest (+ S375e@i '1))) S376f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S376d@t))))))))))))) (set! S368c@get-mutators (lambda (S3731@foo S3732@fields) (let ((S3736@gen-name '#f)) (begin (set! S3736@gen-name (lambda (S3759@x) (S2d92@datum->syntax S3731@foo (string->symbol (string-append (symbol->string (S2d94@syntax->datum S3731@foo)) '"-" (symbol->string (S2d94@syntax->datum S3759@x)) '"-set!"))))) (let S3739@f ((S3737@fields S3732@fields)) (let ((S373b@t S3737@fields)) (let ((S373d@ls/false (S2cae@syntax-dispatch S373b@t '()))) (if S373d@ls/false (apply (lambda () '()) S373d@ls/false) (let ((S373f@t S373b@t)) (let ((S3741@ls/false (S2cae@syntax-dispatch S373f@t '((#(scheme-id mutable) any any any) . any)))) (if S3741@ls/false (apply (lambda (S3743@name S3744@accessor S3745@mutator S3746@rest) (cons S3745@mutator (S3739@f S3746@rest))) S3741@ls/false) (let ((S374b@t S373f@t)) (let ((S374d@ls/false (S2cae@syntax-dispatch S374b@t '((#(scheme-id mutable) any) . any)))) (if S374d@ls/false (apply (lambda (S374f@name S3750@rest) (cons (S3736@gen-name S374f@name) (S3739@f S3750@rest))) S374d@ls/false) (let ((S3753@t S374b@t)) (let ((S3755@ls/false (S2cae@syntax-dispatch S3753@t '(_ . any)))) (if S3755@ls/false (apply (lambda (S3757@rest) (S3739@f S3757@rest)) S3755@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3753@t)))))))))))))))))) (set! S368e@get-accessors (lambda (S36ed@foo S36ee@fields) (let ((S36f2@gen-name '#f)) (begin (set! S36f2@gen-name (lambda (S372f@x) (S2d92@datum->syntax S36ed@foo (string->symbol (string-append (symbol->string (S2d94@syntax->datum S36ed@foo)) '"-" (symbol->string (S2d94@syntax->datum S372f@x))))))) (map (lambda (S36f3@field) (let ((S36f5@t S36f3@field)) (let ((S36f7@ls/false (S2cae@syntax-dispatch S36f5@t '(#(scheme-id mutable) any any any)))) (if (and S36f7@ls/false (apply (lambda (S36f9@name S36fa@accessor S36fb@mutator) (S2aa7@id? S36fa@accessor)) S36f7@ls/false)) (apply (lambda (S36ff@name S3700@accessor S3701@mutator) S3700@accessor) S36f7@ls/false) (let ((S3705@t S36f5@t)) (let ((S3707@ls/false (S2cae@syntax-dispatch S3705@t '(#(scheme-id immutable) any any)))) (if (and S3707@ls/false (apply (lambda (S3709@name S370a@accessor) (S2aa7@id? S370a@accessor)) S3707@ls/false)) (apply (lambda (S370d@name S370e@accessor) S370e@accessor) S3707@ls/false) (let ((S3711@t S3705@t)) (let ((S3713@ls/false (S2cae@syntax-dispatch S3711@t '(#(scheme-id mutable) any)))) (if (and S3713@ls/false (apply (lambda (S3715@name) (S2aa7@id? S3715@name)) S3713@ls/false)) (apply (lambda (S3717@name) (S36f2@gen-name S3717@name)) S3713@ls/false) (let ((S3719@t S3711@t)) (let ((S371b@ls/false (S2cae@syntax-dispatch S3719@t '(#(scheme-id immutable) any)))) (if (and S371b@ls/false (apply (lambda (S371d@name) (S2aa7@id? S371d@name)) S371b@ls/false)) (apply (lambda (S371f@name) (S36f2@gen-name S371f@name)) S371b@ls/false) (let ((S3721@t S3719@t)) (let ((S3723@ls/false (S2cae@syntax-dispatch S3721@t 'any))) (if (and S3723@ls/false (apply (lambda (S3725@name) (S2aa7@id? S3725@name)) S3723@ls/false)) (apply (lambda (S3727@name) (S36f2@gen-name S3727@name)) S3723@ls/false) (let ((S3729@t S3721@t)) (let ((S372b@ls/false (S2cae@syntax-dispatch S3729@t 'any))) (if S372b@ls/false (apply (lambda (S372d@others) (S2d8e@syntax-violation '#f '"invalid field spec" S36f3@field)) S372b@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3729@t)))))))))))))))))))) S36ee@fields))))) (set! S3690@enumerate (lambda (S36e5@ls) (let S36eb@f ((S36e7@ls S36e5@ls) (S36e8@i '0)) (if (null? S36e7@ls) '() (cons S36e8@i (S36eb@f (cdr S36e7@ls) (+ S36e8@i '1))))))) (set! S3692@do-define-record (lambda (S36bd@namespec S36be@clause*) (let ((S36c1@foo (S3676@get-record-name S36bd@namespec))) (let ((S36c3@foo-rtd (gensym))) (let ((S36c5@foo-rcd (gensym))) (let ((S36c7@protocol (gensym))) (let ((S36c9@make-foo (S3678@get-record-constructor-name S36bd@namespec))) (let ((S36cb@fields (S3688@get-fields S36be@clause*))) (let ((S36cd@idx* (S3690@enumerate S36cb@fields))) (let ((S36cf@foo-x* (S368e@get-accessors S36c1@foo S36cb@fields))) (let ((S36d1@set-foo-x!* (S368c@get-mutators S36c1@foo S36cb@fields))) (let ((S36d3@set-foo-idx* (S368a@get-mutator-indices S36cb@fields))) (let ((S36d5@foo? (S367a@get-record-predicate-name S36bd@namespec))) (let ((S36d7@foo-rtd-code (S367e@foo-rtd-code S36c1@foo S36be@clause* (S3680@parent-rtd-code S36be@clause*)))) (let ((S36d9@foo-rcd-code (S3684@foo-rcd-code S36be@clause* S36c3@foo-rtd S36c7@protocol (S3682@parent-rcd-code S36be@clause*)))) (let ((S36db@protocol-code (S3686@get-protocol-code S36be@clause*))) (S2c64@bless (cons 'begin (cons (list 'define S36c3@foo-rtd S36d7@foo-rtd-code) (cons (list 'define S36c7@protocol S36db@protocol-code) (cons (list 'define S36c5@foo-rcd S36d9@foo-rcd-code) (cons (list 'define-syntax S36c1@foo (list 'list ''$rtd (list 'syntax S36c3@foo-rtd) (list 'syntax S36c5@foo-rcd))) (cons (list 'define S36d5@foo? (list 'record-predicate S36c3@foo-rtd)) (cons (list 'define S36c9@make-foo (list 'record-constructor S36c5@foo-rcd)) (append (map (lambda (S36dd@foo-x S36de@idx) (list 'define S36dd@foo-x (list 'record-accessor S36c3@foo-rtd S36de@idx))) S36cf@foo-x* S36cd@idx*) (map (lambda (S36e1@set-foo-x! S36e2@idx) (list 'define S36e1@set-foo-x! (list 'record-mutator S36c3@foo-rtd S36e2@idx))) S36d1@set-foo-x!* S36d3@set-foo-idx*)))))))))))))))))))))))))) (set! S3694@verify-clauses (lambda (S369d@x S369e@cls*) (let ((S36a2@valid-kwds '#f) (S36a4@free-id-member? '#f)) (begin (set! S36a2@valid-kwds (map S2c64@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! S36a4@free-id-member? (lambda (S36b9@x S36ba@ls) (and (pair? S36ba@ls) (or (S2aad@free-id=? S36b9@x (car S36ba@ls)) (S36a4@free-id-member? S36b9@x (cdr S36ba@ls)))))) (let S36a9@f ((S36a5@cls* S369e@cls*) (S36a6@seen* '())) (if (not (null? S36a5@cls*)) (let ((S36ab@t (car S36a5@cls*))) (let ((S36ad@ls/false (S2cae@syntax-dispatch S36ab@t '(any . any)))) (if S36ad@ls/false (apply (lambda (S36af@kwd S36b0@rest) (if (or (not (S2aa7@id? S36af@kwd)) (not (S36a4@free-id-member? S36af@kwd S36a2@valid-kwds))) (S2d8e@syntax-violation '#f '"not a valid define-record-type keyword" S36af@kwd) (if (S2ab3@bound-id-member? S36af@kwd S36a6@seen*) (S2d8e@syntax-violation '#f '"duplicate use of keyword " S369d@x S36af@kwd) (S36a9@f (cdr S36a5@cls*) (cons S36af@kwd S36a6@seen*))))) S36ad@ls/false) (let ((S36b3@t S36ab@t)) (let ((S36b5@ls/false (S2cae@syntax-dispatch S36b3@t 'any))) (if S36b5@ls/false (apply (lambda (S36b7@cls) (S2d8e@syntax-violation '#f '"malformed define-record-type clause" S36b7@cls)) S36b5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S36b3@t))))))) (void))))))) (let ((S3695@t S3671@x)) (let ((S3697@ls/false (S2cae@syntax-dispatch S3695@t '(_ any . each-any)))) (if S3697@ls/false (apply (lambda (S3699@namespec S369a@clause*) (begin (S3694@verify-clauses S3671@x S369a@clause*) (S3692@do-define-record S3699@namespec S369a@clause*))) S3697@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3695@t)))))))) (set! S477c@S2ca2@define-record-type-macro S2ca2@define-record-type-macro)) (begin (set! S2ca4@define-condition-type-macro (lambda (S386d@x) (let ((S3870@mkname '#f)) (begin (set! S3870@mkname (lambda (S389d@name S389e@suffix) (S2d92@datum->syntax S389d@name (string->symbol (string-append (symbol->string (S2d94@syntax->datum S389d@name)) S389e@suffix))))) (let ((S3871@t S386d@x)) (let ((S3873@ls/false (S2cae@syntax-dispatch S3871@t '(any any any any any . #(each (any any)))))) (if (and S3873@ls/false (apply (lambda (S3875@ctxt S3876@name S3877@super S3878@constructor S3879@predicate S387a@field* S387b@accessor*) (and (S2aa7@id? S3876@name) (S2aa7@id? S3877@super) (S2aa7@id? S3878@constructor) (S2aa7@id? S3879@predicate) (for-all S2aa7@id? S387a@field*) (for-all S2aa7@id? S387b@accessor*))) S3873@ls/false)) (apply (lambda (S3883@ctxt S3884@name S3885@super S3886@constructor S3887@predicate S3888@field* S3889@accessor*) (let ((S3891@aux-accessor* (map (lambda (S3893@x) (gensym)) S3889@accessor*))) (S2c64@bless (cons 'begin (cons (cons 'define-record-type (cons (list S3884@name S3886@constructor (gensym)) (cons (list 'parent S3885@super) (cons (cons 'fields (map (lambda (S3895@field S3896@aux) (list 'immutable S3895@field S3896@aux)) S3888@field* S3891@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define S3887@predicate (list 'condition-predicate (list 'record-type-descriptor S3884@name))) (map (lambda (S3899@accessor S389a@aux) (list 'define S3899@accessor (list 'condition-accessor (list 'record-type-descriptor S3884@name) S389a@aux))) S3889@accessor* S3891@aux-accessor*))))))) S3873@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3871@t)))))))) (set! S477d@S2ca4@define-condition-type-macro S2ca4@define-condition-type-macro)) (begin (set! S2ca6@incorrect-usage-macro (lambda (S38a1@e) (S2d8e@syntax-violation '#f '"incorrect usage of auxiliary keyword" S38a1@e))) (set! S477e@S2ca6@incorrect-usage-macro S2ca6@incorrect-usage-macro)) (begin (set! S2ca8@parameterize-macro (lambda (S38a3@e) (let ((S38a5@t S38a3@e)) (let ((S38a7@ls/false (S2cae@syntax-dispatch S38a5@t '(_ () any . each-any)))) (if S38a7@ls/false (apply (lambda (S38a9@b S38aa@b*) (S2c64@bless (cons 'let (cons '() (cons S38a9@b S38aa@b*))))) S38a7@ls/false) (let ((S38ad@t S38a5@t)) (let ((S38af@ls/false (S2cae@syntax-dispatch S38ad@t '(_ #(each (any any)) any . each-any)))) (if S38af@ls/false (apply (lambda (S38b1@olhs* S38b2@orhs* S38b3@b S38b4@b*) (let ((S38b9@lhs* (S2d7c@generate-temporaries S38b1@olhs*)) (S38ba@rhs* (S2d7c@generate-temporaries S38b2@orhs*))) (S2c64@bless (cons (list 'lambda (append S38b9@lhs* S38ba@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (S38bd@lhs S38be@rhs) (list 'let (list (list 't (list S38bd@lhs))) (list S38bd@lhs S38be@rhs) (cons 'set! (cons S38be@rhs '(t))))) S38b9@lhs* S38ba@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons S38b3@b S38b4@b*))) '(swap)))))) (append S38b1@olhs* S38b2@orhs*))))) S38af@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S38ad@t))))))))) (set! S477f@S2ca8@parameterize-macro S2ca8@parameterize-macro)) (begin (set! S2caa@foreign-call-transformer (lambda (S38c1@e S38c2@r S38c3@mr) (let ((S38c7@t S38c1@e)) (let ((S38c9@ls/false (S2cae@syntax-dispatch S38c7@t '(_ any . each-any)))) (if S38c9@ls/false (apply (lambda (S38cb@name S38cc@arg*) (cons 'foreign-call (cons (S2cd0@chi-expr S38cb@name S38c2@r S38c3@mr) (S2ccc@chi-expr* S38cc@arg* S38c2@r S38c3@mr)))) S38c9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S38c7@t)))))) (set! S4780@S2caa@foreign-call-transformer S2caa@foreign-call-transformer)) (begin (set! S2cac@convert-pattern (lambda (S38cf@pattern S38d0@keys) (let ((S38d4@cvt* '#f) (S38d6@cvt '#f)) (begin (set! S38d4@cvt* (lambda (S3973@p* S3974@n S3975@ids) (if (null? S3973@p*) (values '() S3975@ids) (call-with-values (lambda () (S38d4@cvt* (cdr S3973@p*) S3974@n S3975@ids)) (lambda (S397d@S397a S397e@S397c) (let ((S3981@ids S397e@S397c) (S3982@y S397d@S397a)) (call-with-values (lambda () (S38d6@cvt (car S3973@p*) S3974@n S3981@ids)) (lambda (S3989@S3986 S398a@S3988) (let ((S398d@ids S398a@S3988) (S398e@x S3989@S3986)) (values (cons S398e@x S3982@y) S398d@ids)))))))))) (set! S38d6@cvt (lambda (S38d7@p S38d8@n S38d9@ids) (let ((S38dd@t S38d7@p)) (let ((S38df@ls/false (S2cae@syntax-dispatch S38dd@t 'any))) (if (and S38df@ls/false (apply (lambda (S38e1@id) (S2aa7@id? S38e1@id)) S38df@ls/false)) (apply (lambda (S38e3@id) (if (S2ab3@bound-id-member? S38d7@p S38d0@keys) (values (vector 'free-id S38d7@p) S38d9@ids) (if (S2aad@free-id=? S38d7@p (S2c36@scheme-stx '_)) (values '_ S38d9@ids) (values 'any (cons (cons S38d7@p S38d8@n) S38d9@ids))))) S38df@ls/false) (let ((S38e5@t S38dd@t)) (let ((S38e7@ls/false (S2cae@syntax-dispatch S38e5@t '(any any)))) (if (and S38e7@ls/false (apply (lambda (S38e9@p S38ea@dots) (S2cb0@ellipsis? S38ea@dots)) S38e7@ls/false)) (apply (lambda (S38ed@p S38ee@dots) (call-with-values (lambda () (S38d6@cvt S38ed@p (+ S38d8@n '1) S38d9@ids)) (lambda (S38f5@S38f2 S38f6@S38f4) (let ((S38f9@ids S38f6@S38f4) (S38fa@p S38f5@S38f2)) (values (if (eq? S38fa@p 'any) 'each-any (vector 'each S38fa@p)) S38f9@ids))))) S38e7@ls/false) (let ((S38fd@t S38e5@t)) (let ((S38ff@ls/false (S2cae@syntax-dispatch S38fd@t '(any any . #(each+ any () any))))) (if (and S38ff@ls/false (apply (lambda (S3901@x S3902@dots S3903@ys S3904@z) (S2cb0@ellipsis? S3902@dots)) S38ff@ls/false)) (apply (lambda (S3909@x S390a@dots S390b@ys S390c@z) (call-with-values (lambda () (S38d6@cvt S390c@z S38d8@n S38d9@ids)) (lambda (S3915@S3912 S3916@S3914) (let ((S3919@ids S3916@S3914) (S391a@z S3915@S3912)) (call-with-values (lambda () (S38d4@cvt* S390b@ys S38d8@n S3919@ids)) (lambda (S3921@S391e S3922@S3920) (let ((S3925@ids S3922@S3920) (S3926@ys S3921@S391e)) (call-with-values (lambda () (S38d6@cvt S3909@x (+ S38d8@n '1) S3925@ids)) (lambda (S392d@S392a S392e@S392c) (let ((S3931@ids S392e@S392c) (S3932@x S392d@S392a)) (values (vector 'each+ S3932@x (reverse S3926@ys) S391a@z) S3931@ids))))))))))) S38ff@ls/false) (let ((S3935@t S38fd@t)) (let ((S3937@ls/false (S2cae@syntax-dispatch S3935@t '(any . any)))) (if S3937@ls/false (apply (lambda (S3939@x S393a@y) (call-with-values (lambda () (S38d6@cvt S393a@y S38d8@n S38d9@ids)) (lambda (S3941@S393e S3942@S3940) (let ((S3945@ids S3942@S3940) (S3946@y S3941@S393e)) (call-with-values (lambda () (S38d6@cvt S3939@x S38d8@n S3945@ids)) (lambda (S394d@S394a S394e@S394c) (let ((S3951@ids S394e@S394c) (S3952@x S394d@S394a)) (values (cons S3952@x S3946@y) S3951@ids)))))))) S3937@ls/false) (let ((S3955@t S3935@t)) (let ((S3957@ls/false (S2cae@syntax-dispatch S3955@t '()))) (if S3957@ls/false (apply (lambda () (values '() S38d9@ids)) S3957@ls/false) (let ((S3959@t S3955@t)) (let ((S395b@ls/false (S2cae@syntax-dispatch S3959@t '#(vector each-any)))) (if (and S395b@ls/false (apply (lambda (S395d@p) (not (S2a73@stx? S395d@p))) S395b@ls/false)) (apply (lambda (S395f@p) (call-with-values (lambda () (S38d6@cvt S395f@p S38d8@n S38d9@ids)) (lambda (S3965@S3962 S3966@S3964) (let ((S3969@ids S3966@S3964) (S396a@p S3965@S3962)) (values (vector 'vector S396a@p) S3969@ids))))) S395b@ls/false) (let ((S396d@t S3959@t)) (let ((S396f@ls/false (S2cae@syntax-dispatch S396d@t 'any))) (if S396f@ls/false (apply (lambda (S3971@datum) (values (vector 'atom (S2abb@stx->datum S3971@datum)) S38d9@ids)) S396f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S396d@t)))))))))))))))))))))))) (S38d6@cvt S38cf@pattern '0 '()))))) (set! S4781@S2cac@convert-pattern S2cac@convert-pattern)) (begin (set! S2cae@syntax-dispatch (let ((S3992@stx^ '#f) (S3994@match-each '#f) (S3996@match-each+ '#f) (S3998@match-each-any '#f) (S399a@match-empty '#f) (S399c@combine '#f) (S399e@match* '#f) (S39a0@match '#f)) (begin (set! S3992@stx^ (lambda (S3a6d@e S3a6e@m* S3a6f@s* S3a70@ae*) (if (and (null? S3a6e@m*) (null? S3a6f@s*) (null? S3a70@ae*)) S3a6d@e (S2a8f@mkstx S3a6d@e S3a6e@m* S3a6f@s* S3a70@ae*)))) (set! S3994@match-each (lambda (S3a4d@e S3a4e@p S3a4f@m* S3a50@s* S3a51@ae*) (if (pair? S3a4d@e) (let ((S3a57@first (S39a0@match (car S3a4d@e) S3a4e@p S3a4f@m* S3a50@s* S3a51@ae* '()))) (and S3a57@first (let ((S3a59@rest (S3994@match-each (cdr S3a4d@e) S3a4e@p S3a4f@m* S3a50@s* S3a51@ae*))) (and S3a59@rest (cons S3a57@first S3a59@rest))))) (if (null? S3a4d@e) '() (if (S2a73@stx? S3a4d@e) (and (not (S2a2d@top-marked? S3a4f@m*)) (call-with-values (lambda () (join-wraps S3a4f@m* S3a50@s* S3a51@ae* S3a4d@e)) (lambda (S3a61@S3a5c S3a62@S3a5e S3a63@S3a60) (let ((S3a67@ae* S3a63@S3a60) (S3a68@s* S3a62@S3a5e) (S3a69@m* S3a61@S3a5c)) (S3994@match-each (S2a75@stx-expr S3a4d@e) S3a4e@p S3a69@m* S3a68@s* S3a67@ae*))))) (if (S25e6@S24ba@annotation? S3a4d@e) (S3994@match-each (S25e8@S24be@annotation-expression S3a4d@e) S3a4e@p S3a4f@m* S3a50@s* S3a51@ae*) '#f)))))) (set! S3996@match-each+ (lambda (S3a0d@e S3a0e@x-pat S3a0f@y-pat S3a10@z-pat S3a11@m* S3a12@s* S3a13@ae* S3a14@r) (let S3a25@f ((S3a1d@e S3a0d@e) (S3a1e@m* S3a11@m*) (S3a1f@s* S3a12@s*) (S3a20@ae* S3a13@ae*)) (if (pair? S3a1d@e) (call-with-values (lambda () (S3a25@f (cdr S3a1d@e) S3a1e@m* S3a1f@s* S3a20@ae*)) (lambda (S3a2d@S3a28 S3a2e@S3a2a S3a2f@S3a2c) (let ((S3a33@r S3a2f@S3a2c) (S3a34@y-pat S3a2e@S3a2a) (S3a35@xr* S3a2d@S3a28)) (if S3a33@r (if (null? S3a34@y-pat) (let ((S3a39@xr (S39a0@match (car S3a1d@e) S3a0e@x-pat S3a1e@m* S3a1f@s* S3a20@ae* '()))) (if S3a39@xr (values (cons S3a39@xr S3a35@xr*) S3a34@y-pat S3a33@r) (values '#f '#f '#f))) (values '() (cdr S3a34@y-pat) (S39a0@match (car S3a1d@e) (car S3a34@y-pat) S3a1e@m* S3a1f@s* S3a20@ae* S3a33@r))) (values '#f '#f '#f))))) (if (S2a73@stx? S3a1d@e) (if (S2a2d@top-marked? S3a1e@m*) (values '() S3a0f@y-pat (S39a0@match S3a1d@e S3a10@z-pat S3a1e@m* S3a1f@s* S3a20@ae* S3a14@r)) (call-with-values (lambda () (join-wraps S3a1e@m* S3a1f@s* S3a20@ae* S3a1d@e)) (lambda (S3a41@S3a3c S3a42@S3a3e S3a43@S3a40) (let ((S3a47@ae* S3a43@S3a40) (S3a48@s* S3a42@S3a3e) (S3a49@m* S3a41@S3a3c)) (S3a25@f (S2a75@stx-expr S3a1d@e) S3a49@m* S3a48@s* S3a47@ae*))))) (if (S25e6@S24ba@annotation? S3a1d@e) (S3a25@f (S25e8@S24be@annotation-expression S3a1d@e) S3a1e@m* S3a1f@s* S3a20@ae*) (values '() S3a0f@y-pat (S39a0@match S3a1d@e S3a10@z-pat S3a1e@m* S3a1f@s* S3a20@ae* S3a14@r)))))))) (set! S3998@match-each-any (lambda (S39f1@e S39f2@m* S39f3@s* S39f4@ae*) (if (pair? S39f1@e) (let ((S39f9@l (S3998@match-each-any (cdr S39f1@e) S39f2@m* S39f3@s* S39f4@ae*))) (and S39f9@l (cons (S3992@stx^ (car S39f1@e) S39f2@m* S39f3@s* S39f4@ae*) S39f9@l))) (if (null? S39f1@e) '() (if (S2a73@stx? S39f1@e) (and (not (S2a2d@top-marked? S39f2@m*)) (call-with-values (lambda () (join-wraps S39f2@m* S39f3@s* S39f4@ae* S39f1@e)) (lambda (S3a01@S39fc S3a02@S39fe S3a03@S3a00) (let ((S3a07@ae* S3a03@S3a00) (S3a08@s* S3a02@S39fe) (S3a09@m* S3a01@S39fc)) (S3998@match-each-any (S2a75@stx-expr S39f1@e) S3a09@m* S3a08@s* S3a07@ae*))))) (if (S25e6@S24ba@annotation? S39f1@e) (S3998@match-each-any (S25e8@S24be@annotation-expression S39f1@e) S39f2@m* S39f3@s* S39f4@ae*) '#f)))))) (set! S399a@match-empty (lambda (S39eb@p S39ec@r) (if (null? S39eb@p) S39ec@r (if (eq? S39eb@p '_) S39ec@r (if (eq? S39eb@p 'any) (cons '() S39ec@r) (if (pair? S39eb@p) (S399a@match-empty (car S39eb@p) (S399a@match-empty (cdr S39eb@p) S39ec@r)) (if (eq? S39eb@p 'each-any) (cons '() S39ec@r) (let ((S39ef@t (vector-ref S39eb@p '0))) (if (memv S39ef@t '(each)) (S399a@match-empty (vector-ref S39eb@p '1) S39ec@r) (if (memv S39ef@t '(each+)) (S399a@match-empty (vector-ref S39eb@p '1) (S399a@match-empty (reverse (vector-ref S39eb@p '2)) (S399a@match-empty (vector-ref S39eb@p '3) S39ec@r))) (if (memv S39ef@t '(free-id atom)) S39ec@r (if (memv S39ef@t '(scheme-id atom)) S39ec@r (if (memv S39ef@t '(vector)) (S399a@match-empty (vector-ref S39eb@p '1) S39ec@r) (assertion-violation 'syntax-dispatch '"invalid pattern" S39eb@p)))))))))))))) (set! S399c@combine (lambda (S39e7@r* S39e8@r) (if (null? (car S39e7@r*)) S39e8@r (cons (map car S39e7@r*) (S399c@combine (map cdr S39e7@r*) S39e8@r))))) (set! S399e@match* (lambda (S39c3@e S39c4@p S39c5@m* S39c6@s* S39c7@ae* S39c8@r) (if (null? S39c4@p) (and (null? S39c3@e) S39c8@r) (if (pair? S39c4@p) (and (pair? S39c3@e) (S39a0@match (car S39c3@e) (car S39c4@p) S39c5@m* S39c6@s* S39c7@ae* (S39a0@match (cdr S39c3@e) (cdr S39c4@p) S39c5@m* S39c6@s* S39c7@ae* S39c8@r))) (if (eq? S39c4@p 'each-any) (let ((S39cf@l (S3998@match-each-any S39c3@e S39c5@m* S39c6@s* S39c7@ae*))) (and S39cf@l (cons S39cf@l S39c8@r))) (let ((S39d1@t (vector-ref S39c4@p '0))) (if (memv S39d1@t '(each)) (if (null? S39c3@e) (S399a@match-empty (vector-ref S39c4@p '1) S39c8@r) (let ((S39d3@r* (S3994@match-each S39c3@e (vector-ref S39c4@p '1) S39c5@m* S39c6@s* S39c7@ae*))) (and S39d3@r* (S399c@combine S39d3@r* S39c8@r)))) (if (memv S39d1@t '(free-id)) (and (symbol? S39c3@e) (S2a2d@top-marked? S39c5@m*) (S2aad@free-id=? (S3992@stx^ S39c3@e S39c5@m* S39c6@s* S39c7@ae*) (vector-ref S39c4@p '1)) S39c8@r) (if (memv S39d1@t '(scheme-id)) (and (symbol? S39c3@e) (S2a2d@top-marked? S39c5@m*) (S2aad@free-id=? (S3992@stx^ S39c3@e S39c5@m* S39c6@s* S39c7@ae*) (S2c36@scheme-stx (vector-ref S39c4@p '1))) S39c8@r) (if (memv S39d1@t '(each+)) (call-with-values (lambda () (S3996@match-each+ S39c3@e (vector-ref S39c4@p '1) (vector-ref S39c4@p '2) (vector-ref S39c4@p '3) S39c5@m* S39c6@s* S39c7@ae* S39c8@r)) (lambda (S39db@S39d6 S39dc@S39d8 S39dd@S39da) (let ((S39e1@r S39dd@S39da) (S39e2@y-pat S39dc@S39d8) (S39e3@xr* S39db@S39d6)) (and S39e1@r (null? S39e2@y-pat) (if (null? S39e3@xr*) (S399a@match-empty (vector-ref S39c4@p '1) S39e1@r) (S399c@combine S39e3@xr* S39e1@r)))))) (if (memv S39d1@t '(atom)) (and (fast-equal? (vector-ref S39c4@p '1) (S2ab9@strip S39c3@e S39c5@m*)) S39c8@r) (if (memv S39d1@t '(vector)) (and (vector? S39c3@e) (S39a0@match (vector->list S39c3@e) (vector-ref S39c4@p '1) S39c5@m* S39c6@s* S39c7@ae* S39c8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" S39c4@p))))))))))))) (set! S39a0@match (lambda (S39a5@e S39a6@p S39a7@m* S39a8@s* S39a9@ae* S39aa@r) (if (not S39aa@r) '#f (if (eq? S39a6@p '_) S39aa@r (if (eq? S39a6@p 'any) (cons (S3992@stx^ S39a5@e S39a7@m* S39a8@s* S39a9@ae*) S39aa@r) (if (S2a73@stx? S39a5@e) (and (not (S2a2d@top-marked? S39a7@m*)) (call-with-values (lambda () (join-wraps S39a7@m* S39a8@s* S39a9@ae* S39a5@e)) (lambda (S39b7@S39b2 S39b8@S39b4 S39b9@S39b6) (let ((S39bd@ae* S39b9@S39b6) (S39be@s* S39b8@S39b4) (S39bf@m* S39b7@S39b2)) (S39a0@match (S2a75@stx-expr S39a5@e) S39a6@p S39bf@m* S39be@s* S39bd@ae* S39aa@r))))) (if (S25e6@S24ba@annotation? S39a5@e) (S39a0@match (S25e8@S24be@annotation-expression S39a5@e) S39a6@p S39a7@m* S39a8@s* S39a9@ae* S39aa@r) (S399e@match* S39a5@e S39a6@p S39a7@m* S39a8@s* S39a9@ae* S39aa@r)))))))) (lambda (S39a1@e S39a2@p) (S39a0@match S39a1@e S39a2@p '() '() '() '()))))) (set! S4782@S2cae@syntax-dispatch S2cae@syntax-dispatch)) (begin (set! S2cb0@ellipsis? (lambda (S3a75@x) (and (S2aa7@id? S3a75@x) (S2aad@free-id=? S3a75@x (S2c36@scheme-stx '...))))) (set! S4783@S2cb0@ellipsis? S2cb0@ellipsis?)) (begin (set! S2cb2@underscore? (lambda (S3a77@x) (and (S2aa7@id? S3a77@x) (S2aad@free-id=? S3a77@x (S2c36@scheme-stx '_))))) (set! S4784@S2cb2@underscore? S2cb2@underscore?)) (begin (set! S2cb4@verify-literals (lambda (S3a79@lits S3a7a@expr) (for-each (lambda (S3a7d@x) (if (or (not (S2aa7@id? S3a7d@x)) (S2cb0@ellipsis? S3a7d@x) (S2cb2@underscore? S3a7d@x)) (S2d8e@syntax-violation '#f '"invalid literal" S3a7a@expr S3a7d@x) (void))) S3a79@lits))) (set! S4785@S2cb4@verify-literals S2cb4@verify-literals)) (begin (set! S2cb6@syntax-case-transformer (let ((S3a80@build-dispatch-call '#f) (S3a82@invalid-ids-error '#f) (S3a84@gen-clause '#f) (S3a86@gen-syntax-case '#f)) (begin (set! S3a80@build-dispatch-call (lambda (S3af1@pvars S3af2@expr S3af3@y S3af4@r S3af5@mr) (let ((S3afb@ids (map car S3af1@pvars)) (S3afc@levels (map cdr S3af1@pvars))) (let ((S3aff@labels (map S2a33@gen-label S3afb@ids)) (S3b00@new-vars (map S2a2f@gen-lexical S3afb@ids))) (let ((S3b03@body (S2cd0@chi-expr (S2a93@add-subst (S2a67@make-full-rib S3afb@ids S3aff@labels) S3af2@expr) (append (map (lambda (S3b05@label S3b06@var S3b07@level) (cons S3b05@label (S2ac1@make-binding 'syntax (cons S3b06@var S3b07@level)))) S3aff@labels S3b00@new-vars (map cdr S3af1@pvars)) S3af4@r) S3af5@mr))) (list '(primitive apply) (S2a0a@S2936@build-lambda '#f S3b00@new-vars S3b03@body) S3af3@y)))))) (set! S3a82@invalid-ids-error (lambda (S3ae5@id* S3ae6@e S3ae7@class) (let S3aef@find ((S3aeb@id* S3ae5@id*) (S3aec@ok* '())) (if (null? S3aeb@id*) (S2d8e@syntax-violation '#f '"invalid syntax" S3ae6@e) (if (S2aa7@id? (car S3aeb@id*)) (if (S2ab3@bound-id-member? (car S3aeb@id*) S3aec@ok*) (S2d8a@syntax-error (car S3aeb@id*) '"duplicate " S3ae7@class) (S3aef@find (cdr S3aeb@id*) (cons (car S3aeb@id*) S3aec@ok*))) (S2d8a@syntax-error (car S3aeb@id*) '"invalid " S3ae7@class)))))) (set! S3a84@gen-clause (lambda (S3abd@x S3abe@keys S3abf@clauses S3ac0@r S3ac1@mr S3ac2@pat S3ac3@fender S3ac4@expr) (call-with-values (lambda () (S2cac@convert-pattern S3ac2@pat S3abe@keys)) (lambda (S3ad1@S3ace S3ad2@S3ad0) (let ((S3ad5@pvars S3ad2@S3ad0) (S3ad6@p S3ad1@S3ace)) (if (not (S2ab1@distinct-bound-ids? (map car S3ad5@pvars))) (S3a82@invalid-ids-error (map car S3ad5@pvars) S3ac2@pat '"pattern variable") (if (not (for-all (lambda (S3ad9@x) (not (S2cb0@ellipsis? (car S3ad9@x)))) S3ad5@pvars)) (S2d8e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" S3ac2@pat) (let ((S3adb@y (S2a2f@gen-lexical 'tmp))) (let ((S3add@test (if (eq? S3ac3@fender '#t) S3adb@y (let ((S3adf@call (S3a80@build-dispatch-call S3ad5@pvars S3ac3@fender S3adb@y S3ac0@r S3ac1@mr))) (list 'if S3adb@y S3adf@call (list 'quote '#f)))))) (let ((S3ae1@conseq (S3a80@build-dispatch-call S3ad5@pvars S3ac4@expr S3adb@y S3ac0@r S3ac1@mr))) (let ((S3ae3@altern (S3a86@gen-syntax-case S3abd@x S3abe@keys S3abf@clauses S3ac0@r S3ac1@mr))) (list (S2a0a@S2936@build-lambda '#f (list S3adb@y) (list 'if S3add@test S3ae1@conseq S3ae3@altern)) (list '(primitive syntax-dispatch) S3abd@x (list 'quote S3ad6@p)))))))))))))) (set! S3a86@gen-syntax-case (lambda (S3a9b@x S3a9c@keys S3a9d@clauses S3a9e@r S3a9f@mr) (if (null? S3a9d@clauses) (list '(primitive syntax-error) S3a9b@x) (let ((S3aa5@t (car S3a9d@clauses))) (let ((S3aa7@ls/false (S2cae@syntax-dispatch S3aa5@t '(any any)))) (if S3aa7@ls/false (apply (lambda (S3aa9@pat S3aaa@expr) (if (and (S2aa7@id? S3aa9@pat) (not (S2ab3@bound-id-member? S3aa9@pat S3a9c@keys)) (not (S2cb0@ellipsis? S3aa9@pat))) (if (S2aad@free-id=? S3aa9@pat (S2c36@scheme-stx '_)) (S2cd0@chi-expr S3aaa@expr S3a9e@r S3a9f@mr) (let ((S3aad@lab (S2a33@gen-label S3aa9@pat)) (S3aae@lex (S2a2f@gen-lexical S3aa9@pat))) (let ((S3ab1@body (S2cd0@chi-expr (S2a93@add-subst (S2a67@make-full-rib (list S3aa9@pat) (list S3aad@lab)) S3aaa@expr) (cons (cons S3aad@lab (S2ac1@make-binding 'syntax (cons S3aae@lex '0))) S3a9e@r) S3a9f@mr))) (list (S2a0a@S2936@build-lambda '#f (list S3aae@lex) S3ab1@body) S3a9b@x)))) (S3a84@gen-clause S3a9b@x S3a9c@keys (cdr S3a9d@clauses) S3a9e@r S3a9f@mr S3aa9@pat '#t S3aaa@expr))) S3aa7@ls/false) (let ((S3ab3@t S3aa5@t)) (let ((S3ab5@ls/false (S2cae@syntax-dispatch S3ab3@t '(any any any)))) (if S3ab5@ls/false (apply (lambda (S3ab7@pat S3ab8@fender S3ab9@expr) (S3a84@gen-clause S3a9b@x S3a9c@keys (cdr S3a9d@clauses) S3a9e@r S3a9f@mr S3ab7@pat S3ab8@fender S3ab9@expr)) S3ab5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3ab3@t)))))))))) (lambda (S3a87@e S3a88@r S3a89@mr) (let ((S3a8d@t S3a87@e)) (let ((S3a8f@ls/false (S2cae@syntax-dispatch S3a8d@t '(_ any each-any . each-any)))) (if S3a8f@ls/false (apply (lambda (S3a91@expr S3a92@keys S3a93@clauses) (begin (S2cb4@verify-literals S3a92@keys S3a87@e) (let ((S3a97@x (S2a2f@gen-lexical 'tmp))) (let ((S3a99@body (S3a86@gen-syntax-case S3a97@x S3a92@keys S3a93@clauses S3a88@r S3a89@mr))) (list (S2a0a@S2936@build-lambda '#f (list S3a97@x) S3a99@body) (S2cd0@chi-expr S3a91@expr S3a88@r S3a89@mr)))))) S3a8f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3a8d@t)))))))) (set! S4786@S2cb6@syntax-case-transformer S2cb6@syntax-case-transformer)) (begin (set! S2cb8@ellipsis-map (lambda (S3b0b@proc S3b0c@ls . S3b0f@ls*) (let ((S3b12@who '#f)) (begin (set! S3b12@who '...) (begin (if (not (list? S3b0c@ls)) (assertion-violation S3b12@who '"not a list" S3b0c@ls) (void)) (if (not (null? S3b0f@ls*)) (let ((S3b13@n (length S3b0c@ls))) (for-each (lambda (S3b15@x) (begin (if (not (list? S3b15@x)) (assertion-violation S3b12@who '"not a list" S3b15@x) (void)) (if (not (= (length S3b15@x) S3b13@n)) (assertion-violation S3b12@who '"length mismatch" S3b0c@ls S3b15@x) (void)))) S3b0f@ls*)) (void)) (apply map S3b0b@proc S3b0c@ls S3b0f@ls*)))))) (set! S4787@S2cb8@ellipsis-map S2cb8@ellipsis-map)) (begin (set! S2cba@syntax-transformer (let ((S3b18@gen-syntax '#f) (S3b1a@gen-ref '#f) (S3b1c@gen-append '#f) (S3b1e@gen-mappend '#f) (S3b20@gen-map '#f) (S3b22@gen-cons '#f) (S3b24@gen-vector '#f) (S3b26@regen '#f)) (begin (set! S3b18@gen-syntax (lambda (S3b8f@src S3b90@e S3b91@r S3b92@maps S3b93@ellipsis? S3b94@vec?) (let ((S3b9b@t S3b90@e)) (let ((S3b9d@ls/false (S2cae@syntax-dispatch S3b9b@t 'any))) (if (and S3b9d@ls/false (apply (lambda (S3b9f@dots) (S3b93@ellipsis? S3b9f@dots)) S3b9d@ls/false)) (apply (lambda (S3ba1@dots) (S2d8e@syntax-violation '#f '"misplaced ellipsis in syntax form" S3b8f@src)) S3b9d@ls/false) (let ((S3ba3@t S3b9b@t)) (let ((S3ba5@ls/false (S2cae@syntax-dispatch S3ba3@t 'any))) (if (and S3ba5@ls/false (apply (lambda (S3ba7@id) (S2aa7@id? S3ba7@id)) S3ba5@ls/false)) (apply (lambda (S3ba9@id) (let ((S3bab@label (S2abd@id->label S3b90@e))) (let ((S3bad@b (S2abf@label->binding S3bab@label S3b91@r))) (if (eq? (S2ac3@binding-type S3bad@b) 'syntax) (call-with-values (lambda () (let ((S3bb3@var.lev (S2ac5@binding-value S3bad@b))) (S3b1a@gen-ref S3b8f@src (car S3bb3@var.lev) (cdr S3bb3@var.lev) S3b92@maps))) (lambda (S3bb5@S3bb0 S3bb6@S3bb2) (let ((S3bb9@maps S3bb6@S3bb2) (S3bba@var S3bb5@S3bb0)) (values (list 'ref S3bba@var) S3bb9@maps)))) (values (list 'quote S3b90@e) S3b92@maps))))) S3ba5@ls/false) (let ((S3bbd@t S3ba3@t)) (let ((S3bbf@ls/false (S2cae@syntax-dispatch S3bbd@t '(any any)))) (if (and S3bbf@ls/false (apply (lambda (S3bc1@dots S3bc2@e) (S3b93@ellipsis? S3bc1@dots)) S3bbf@ls/false)) (apply (lambda (S3bc5@dots S3bc6@e) (if S3b94@vec? (S2d8e@syntax-violation '#f '"misplaced ellipsis in syntax form" S3b8f@src) (S3b18@gen-syntax S3b8f@src S3bc6@e S3b91@r S3b92@maps (lambda (S3bc9@x) '#f) '#f))) S3bbf@ls/false) (let ((S3bcb@t S3bbd@t)) (let ((S3bcd@ls/false (S2cae@syntax-dispatch S3bcb@t '(any any . any)))) (if (and S3bcd@ls/false (apply (lambda (S3bcf@x S3bd0@dots S3bd1@y) (S3b93@ellipsis? S3bd0@dots)) S3bcd@ls/false)) (apply (lambda (S3bd5@x S3bd6@dots S3bd7@y) (let S3bed@f ((S3bdb@y S3bd7@y) (S3bdc@k (lambda (S3bdf@maps) (call-with-values (lambda () (S3b18@gen-syntax S3b8f@src S3bd5@x S3b91@r (cons '() S3bdf@maps) S3b93@ellipsis? '#f)) (lambda (S3be5@S3be2 S3be6@S3be4) (let ((S3be9@maps S3be6@S3be4) (S3bea@x S3be5@S3be2)) (if (null? (car S3be9@maps)) (S2d8e@syntax-violation '#f '"extra ellipsis in syntax form" S3b8f@src) (values (S3b20@gen-map S3bea@x (car S3be9@maps)) (cdr S3be9@maps))))))))) (let ((S3bef@t S3bdb@y)) (let ((S3bf1@ls/false (S2cae@syntax-dispatch S3bef@t '()))) (if S3bf1@ls/false (apply (lambda () (S3bdc@k S3b92@maps)) S3bf1@ls/false) (let ((S3bf3@t S3bef@t)) (let ((S3bf5@ls/false (S2cae@syntax-dispatch S3bf3@t '(any . any)))) (if (and S3bf5@ls/false (apply (lambda (S3bf7@dots S3bf8@y) (S3b93@ellipsis? S3bf7@dots)) S3bf5@ls/false)) (apply (lambda (S3bfb@dots S3bfc@y) (S3bed@f S3bfc@y (lambda (S3bff@maps) (call-with-values (lambda () (S3bdc@k (cons '() S3bff@maps))) (lambda (S3c05@S3c02 S3c06@S3c04) (let ((S3c09@maps S3c06@S3c04) (S3c0a@x S3c05@S3c02)) (if (null? (car S3c09@maps)) (S2d8e@syntax-violation '#f '"extra ellipsis in syntax form" S3b8f@src) (values (S3b1e@gen-mappend S3c0a@x (car S3c09@maps)) (cdr S3c09@maps))))))))) S3bf5@ls/false) (let ((S3c0d@t S3bf3@t)) (let ((S3c0f@ls/false (S2cae@syntax-dispatch S3c0d@t '_))) (if S3c0f@ls/false (apply (lambda () (call-with-values (lambda () (S3b18@gen-syntax S3b8f@src S3bdb@y S3b91@r S3b92@maps S3b93@ellipsis? S3b94@vec?)) (lambda (S3c15@S3c12 S3c16@S3c14) (let ((S3c19@maps S3c16@S3c14) (S3c1a@y S3c15@S3c12)) (call-with-values (lambda () (S3bdc@k S3c19@maps)) (lambda (S3c21@S3c1e S3c22@S3c20) (let ((S3c25@maps S3c22@S3c20) (S3c26@x S3c21@S3c1e)) (values (S3b1c@gen-append S3c26@x S3c1a@y) S3c25@maps)))))))) S3c0f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3c0d@t)))))))))))) S3bcd@ls/false) (let ((S3c29@t S3bcb@t)) (let ((S3c2b@ls/false (S2cae@syntax-dispatch S3c29@t '(any . any)))) (if S3c2b@ls/false (apply (lambda (S3c2d@x S3c2e@y) (call-with-values (lambda () (S3b18@gen-syntax S3b8f@src S3c2d@x S3b91@r S3b92@maps S3b93@ellipsis? '#f)) (lambda (S3c35@S3c32 S3c36@S3c34) (let ((S3c39@maps S3c36@S3c34) (S3c3a@xnew S3c35@S3c32)) (call-with-values (lambda () (S3b18@gen-syntax S3b8f@src S3c2e@y S3b91@r S3c39@maps S3b93@ellipsis? S3b94@vec?)) (lambda (S3c41@S3c3e S3c42@S3c40) (let ((S3c45@maps S3c42@S3c40) (S3c46@ynew S3c41@S3c3e)) (values (S3b22@gen-cons S3b90@e S3c2d@x S3c2e@y S3c3a@xnew S3c46@ynew) S3c45@maps)))))))) S3c2b@ls/false) (let ((S3c49@t S3c29@t)) (let ((S3c4b@ls/false (S2cae@syntax-dispatch S3c49@t '#(vector each-any)))) (if S3c4b@ls/false (apply (lambda (S3c4d@ls) (call-with-values (lambda () (S3b18@gen-syntax S3b8f@src S3c4d@ls S3b91@r S3b92@maps S3b93@ellipsis? '#t)) (lambda (S3c53@S3c50 S3c54@S3c52) (let ((S3c57@maps S3c54@S3c52) (S3c58@lsnew S3c53@S3c50)) (values (S3b24@gen-vector S3b90@e S3c4d@ls S3c58@lsnew) S3c57@maps))))) S3c4b@ls/false) (let ((S3c5b@t S3c49@t)) (let ((S3c5d@ls/false (S2cae@syntax-dispatch S3c5b@t '_))) (if S3c5d@ls/false (apply (lambda () (values (list 'quote S3b90@e) S3b92@maps)) S3c5d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3c5b@t)))))))))))))))))))))))) (set! S3b1a@gen-ref (lambda (S3b75@src S3b76@var S3b77@level S3b78@maps) (if (= S3b77@level '0) (values S3b76@var S3b78@maps) (if (null? S3b78@maps) (S2d8e@syntax-violation '#f '"missing ellipsis in syntax form" S3b75@src) (call-with-values (lambda () (S3b1a@gen-ref S3b75@src S3b76@var (- S3b77@level '1) (cdr S3b78@maps))) (lambda (S3b81@S3b7e S3b82@S3b80) (let ((S3b85@outer-maps S3b82@S3b80) (S3b86@outer-var S3b81@S3b7e)) (let ((S3b89@t (assq S3b86@outer-var (car S3b78@maps)))) (if S3b89@t ((lambda (S3b8b@b) (values (cdr S3b8b@b) S3b78@maps)) S3b89@t) (let ((S3b8d@inner-var (S2a2f@gen-lexical 'tmp))) (values S3b8d@inner-var (cons (cons (cons S3b86@outer-var S3b8d@inner-var) (car S3b78@maps)) S3b85@outer-maps)))))))))))) (set! S3b1c@gen-append (lambda (S3b71@x S3b72@y) (if (fast-equal? S3b72@y ''()) S3b71@x (list 'append S3b71@x S3b72@y)))) (set! S3b1e@gen-mappend (lambda (S3b6d@e S3b6e@map-env) (list 'apply '(primitive append) (S3b20@gen-map S3b6d@e S3b6e@map-env)))) (set! S3b20@gen-map (lambda (S3b5b@e S3b5c@map-env) (let ((S3b5f@formals (map cdr S3b5c@map-env)) (S3b60@actuals (map (lambda (S3b63@x) (list 'ref (car S3b63@x))) S3b5c@map-env))) (if (eq? (car S3b5b@e) 'ref) (car S3b60@actuals) (if (for-all (lambda (S3b65@x) (and (eq? (car S3b65@x) 'ref) (memq (cadr S3b65@x) S3b5f@formals))) (cdr S3b5b@e)) (let ((S3b67@args (map (let ((S3b69@r (map cons S3b5f@formals S3b60@actuals))) (lambda (S3b6b@x) (cdr (assq (cadr S3b6b@x) S3b69@r)))) (cdr S3b5b@e)))) (cons 'map (cons (list 'primitive (car S3b5b@e)) S3b67@args))) (cons* 'map (list 'lambda S3b5f@formals S3b5b@e) S3b60@actuals)))))) (set! S3b22@gen-cons (lambda (S3b4b@e S3b4c@x S3b4d@y S3b4e@xnew S3b4f@ynew) (let ((S3b55@t (car S3b4f@ynew))) (if (memv S3b55@t '(quote)) (if (eq? (car S3b4e@xnew) 'quote) (let ((S3b57@xnew (cadr S3b4e@xnew)) (S3b58@ynew (cadr S3b4f@ynew))) (if (and (eq? S3b57@xnew S3b4c@x) (eq? S3b58@ynew S3b4d@y)) (list 'quote S3b4b@e) (list 'quote (cons S3b57@xnew S3b58@ynew)))) (if (null? (cadr S3b4f@ynew)) (list 'list S3b4e@xnew) (list 'cons S3b4e@xnew S3b4f@ynew))) (if (memv S3b55@t '(list)) (cons 'list (cons S3b4e@xnew (cdr S3b4f@ynew))) (list 'cons S3b4e@xnew S3b4f@ynew)))))) (set! S3b24@gen-vector (lambda (S3b45@e S3b46@ls S3b47@lsnew) (if (eq? (car S3b47@lsnew) 'quote) (if (eq? (cadr S3b47@lsnew) S3b46@ls) (list 'quote S3b45@e) (list 'quote (list->vector (cadr S3b47@lsnew)))) (if (eq? (car S3b47@lsnew) 'list) (cons 'vector (cdr S3b47@lsnew)) (list 'list->vector S3b47@lsnew))))) (set! S3b26@regen (lambda (S3b3f@x) (let ((S3b41@t (car S3b3f@x))) (if (memv S3b41@t '(ref)) (cadr S3b3f@x) (if (memv S3b41@t '(primitive)) (list 'primitive (cadr S3b3f@x)) (if (memv S3b41@t '(quote)) (list 'quote (cadr S3b3f@x)) (if (memv S3b41@t '(lambda)) (S2a0a@S2936@build-lambda '#f (cadr S3b3f@x) (S3b26@regen (caddr S3b3f@x))) (if (memv S3b41@t '(map)) (let ((S3b43@ls (map S3b26@regen (cdr S3b3f@x)))) (cons '(primitive ellipsis-map) S3b43@ls)) (cons (list 'primitive (car S3b3f@x)) (map S3b26@regen (cdr S3b3f@x))))))))))) (lambda (S3b27@e S3b28@r S3b29@mr) (let ((S3b2d@t S3b27@e)) (let ((S3b2f@ls/false (S2cae@syntax-dispatch S3b2d@t '(_ any)))) (if S3b2f@ls/false (apply (lambda (S3b31@x) (call-with-values (lambda () (S3b18@gen-syntax S3b27@e S3b31@x S3b28@r '() S2cb0@ellipsis? '#f)) (lambda (S3b37@S3b34 S3b38@S3b36) (let ((S3b3b@maps S3b38@S3b36) (S3b3c@e S3b37@S3b34)) (S3b26@regen S3b3c@e))))) S3b2f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3b2d@t)))))))) (set! S4788@S2cba@syntax-transformer S2cba@syntax-transformer)) (begin (set! S2cbc@core-macro-transformer (lambda (S3c5f@name) (let ((S3c61@t S3c5f@name)) (if (memv S3c61@t '(quote)) S2c5e@quote-transformer (if (memv S3c61@t '(lambda)) S2c62@lambda-transformer (if (memv S3c61@t '(case-lambda)) S2c60@case-lambda-transformer (if (memv S3c61@t '(letrec)) S2c46@letrec-transformer (if (memv S3c61@t '(letrec*)) S2c48@letrec*-transformer (if (memv S3c61@t '(let)) S2c44@let-transformer (if (memv S3c61@t '(if)) S2c56@if-transformer (if (memv S3c61@t '(and)) S2c58@and-transformer (if (memv S3c61@t '(or)) S2c5a@or-transformer (if (memv S3c61@t '(foreign-call)) S2caa@foreign-call-transformer (if (memv S3c61@t '(syntax-case)) S2cb6@syntax-case-transformer (if (memv S3c61@t '(syntax)) S2cba@syntax-transformer (if (memv S3c61@t '(type-descriptor)) S2c4c@type-descriptor-transformer (if (memv S3c61@t '(record-type-descriptor)) S2c4e@record-type-descriptor-transformer (if (memv S3c61@t '(record-constructor-descriptor)) S2c50@record-constructor-descriptor-transformer (if (memv S3c61@t '(fluid-let-syntax)) S2c4a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" S3c5f@name)))))))))))))))))))) (set! S4789@S2cbc@core-macro-transformer S2cbc@core-macro-transformer)) (begin (set! S2cbe@symbol-macro (lambda (S3c63@x S3c64@set) (let ((S3c67@t S3c63@x)) (let ((S3c69@ls/false (S2cae@syntax-dispatch S3c67@t '(_ any)))) (if (and S3c69@ls/false (apply (lambda (S3c6b@name) (and (S2aa7@id? S3c6b@name) (memq (S2aa9@id->sym S3c6b@name) S3c64@set))) S3c69@ls/false)) (apply (lambda (S3c6d@name) (S2c64@bless (list 'quote S3c6d@name))) S3c69@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3c67@t)))))) (set! S478a@S2cbe@symbol-macro S2cbe@symbol-macro)) (begin (set! S2cc0@macro-transformer (lambda (S3c6f@x) (if (procedure? S3c6f@x) S3c6f@x (if (symbol? S3c6f@x) (let ((S3c71@t S3c6f@x)) (if (memv S3c71@t '(define-record-type)) S2ca2@define-record-type-macro (if (memv S3c71@t '(define-struct)) S2ca0@define-struct-macro (if (memv S3c71@t '(include)) S2c96@include-macro (if (memv S3c71@t '(cond)) S2c92@cond-macro (if (memv S3c71@t '(let)) S2c6a@let-macro (if (memv S3c71@t '(do)) S2c8a@do-macro (if (memv S3c71@t '(or)) S2c8e@or-macro (if (memv S3c71@t '(and)) S2c90@and-macro (if (memv S3c71@t '(let*)) S2c8c@let*-macro (if (memv S3c71@t '(let-values)) S2c6c@let-values-macro (if (memv S3c71@t '(let*-values)) S2c6e@let*-values-macro (if (memv S3c71@t '(syntax-rules)) S2c9a@syntax-rules-macro (if (memv S3c71@t '(quasiquote)) S2c9c@quasiquote-macro (if (memv S3c71@t '(quasisyntax)) S2c9e@quasisyntax-macro (if (memv S3c71@t '(with-syntax)) S2c66@with-syntax-macro (if (memv S3c71@t '(when)) S2c52@when-macro (if (memv S3c71@t '(unless)) S2c54@unless-macro (if (memv S3c71@t '(case)) S2c5c@case-macro (if (memv S3c71@t '(identifier-syntax)) S2c88@identifier-syntax-macro (if (memv S3c71@t '(time)) S2c80@time-macro (if (memv S3c71@t '(delay)) S2c82@delay-macro (if (memv S3c71@t '(assert)) S2c84@assert-macro (if (memv S3c71@t '(endianness)) S2c86@endianness-macro (if (memv S3c71@t '(guard)) S2c7c@guard-macro (if (memv S3c71@t '(define-enumeration)) S2c7e@define-enumeration-macro (if (memv S3c71@t '(trace-lambda)) S2c70@trace-lambda-macro (if (memv S3c71@t '(trace-define)) S2c72@trace-define-macro (if (memv S3c71@t '(trace-define-syntax)) S2c74@trace-define-syntax-macro (if (memv S3c71@t '(trace-let-syntax)) S2c78@trace-let-syntax-macro (if (memv S3c71@t '(trace-letrec-syntax)) S2c7a@trace-letrec-syntax-macro (if (memv S3c71@t '(define-condition-type)) S2ca4@define-condition-type-macro (if (memv S3c71@t '(parameterize)) S2ca8@parameterize-macro (if (memv S3c71@t '(include-into)) S2c98@include-into-macro (if (memv S3c71@t '(eol-style)) (lambda (S3c73@x) (S2cbe@symbol-macro S3c73@x '(none lf cr crlf nel crnel ls))) (if (memv S3c71@t '(error-handling-mode)) (lambda (S3c75@x) (S2cbe@symbol-macro S3c75@x '(ignore raise replace))) (if (memv S3c71@t '(buffer-mode)) (lambda (S3c77@x) (S2cbe@symbol-macro S3c77@x '(none line block))) (if (memv S3c71@t '(file-options)) S2a22@file-options-macro (if (memv S3c71@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) S2ca6@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" S3c6f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" S3c6f@x))))) (set! S478b@S2cc0@macro-transformer S2cc0@macro-transformer)) (begin (set! S2cc2@local-macro-transformer (lambda (S3c79@x) (car S3c79@x))) (set! S478c@S2cc2@local-macro-transformer S2cc2@local-macro-transformer)) (begin (set! S2cc4@do-macro-call (lambda (S3c7b@transformer S3c7c@expr) (let ((S3c7f@out (S3c7b@transformer (S2a91@add-mark S2a8b@anti-mark S3c7c@expr '#f)))) (begin (let S3c83@f ((S3c81@x S3c7f@out)) (if (not (S2a73@stx? S3c81@x)) (if (pair? S3c81@x) (begin (S3c83@f (car S3c81@x)) (S3c83@f (cdr S3c81@x))) (if (vector? S3c81@x) (vector-for-each S3c83@f S3c81@x) (if (symbol? S3c81@x) (S2d8e@syntax-violation '#f '"raw symbol encountered in output of macro" S3c7c@expr S3c81@x) (void)))) (void))) (S2a91@add-mark (S2a89@gen-mark) S3c7f@out S3c7c@expr))))) (set! S478d@S2cc4@do-macro-call S2cc4@do-macro-call)) (begin (set! S2cc6@chi-macro (lambda (S3c85@p S3c86@e) (S2cc4@do-macro-call (S2cc0@macro-transformer S3c85@p) S3c86@e))) (set! S478e@S2cc6@chi-macro S2cc6@chi-macro)) (begin (set! S2cc8@chi-local-macro (lambda (S3c89@p S3c8a@e) (S2cc4@do-macro-call (S2cc2@local-macro-transformer S3c89@p) S3c8a@e))) (set! S478f@S2cc8@chi-local-macro S2cc8@chi-local-macro)) (begin (set! S2cca@chi-global-macro (lambda (S3c8d@p S3c8e@e) (let ((S3c91@lib (car S3c8d@p)) (S3c92@loc (cdr S3c8d@p))) (begin (S28be@S270d@visit-library S3c91@lib) (let ((S3c95@x (symbol-value S3c92@loc))) (let ((S3c97@transformer (if (procedure? S3c95@x) S3c95@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" S3c95@x)))) (S2cc4@do-macro-call S3c97@transformer S3c8e@e))))))) (set! S4790@S2cca@chi-global-macro S2cca@chi-global-macro)) (begin (set! S2ccc@chi-expr* (lambda (S3c99@e* S3c9a@r S3c9b@mr) (if (null? S3c99@e*) '() (let ((S3c9f@e (S2cd0@chi-expr (car S3c99@e*) S3c9a@r S3c9b@mr))) (cons S3c9f@e (S2ccc@chi-expr* (cdr S3c99@e*) S3c9a@r S3c9b@mr)))))) (set! S4791@S2ccc@chi-expr* S2ccc@chi-expr*)) (begin (set! S2cce@chi-application (lambda (S3ca1@e S3ca2@r S3ca3@mr) (let ((S3ca7@t S3ca1@e)) (let ((S3ca9@ls/false (S2cae@syntax-dispatch S3ca7@t '(any . each-any)))) (if S3ca9@ls/false (apply (lambda (S3cab@rator S3cac@rands) (let ((S3caf@rator (S2cd0@chi-expr S3cab@rator S3ca2@r S3ca3@mr))) (cons S3caf@rator (S2ccc@chi-expr* S3cac@rands S3ca2@r S3ca3@mr)))) S3ca9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3ca7@t)))))) (set! S4792@S2cce@chi-application S2cce@chi-application)) (begin (set! S2cd0@chi-expr (lambda (S3cb1@e S3cb2@r S3cb3@mr) (call-with-values (lambda () (S2ac9@syntax-type S3cb1@e S3cb2@r)) (lambda (S3cbd@S3cb8 S3cbe@S3cba S3cbf@S3cbc) (let ((S3cc3@kwd S3cbf@S3cbc) (S3cc4@value S3cbe@S3cba) (S3cc5@type S3cbd@S3cb8)) (let ((S3cc9@t S3cc5@type)) (if (memv S3cc9@t '(core-macro)) (let ((S3ccb@transformer (S2cbc@core-macro-transformer S3cc4@value))) (S3ccb@transformer S3cb1@e S3cb2@r S3cb3@mr)) (if (memv S3cc9@t '(global)) (let ((S3ccd@lib (car S3cc4@value))) (let ((S3ccf@loc (cdr S3cc4@value))) (begin ((S2d16@inv-collector) S3ccd@lib) S3ccf@loc))) (if (memv S3cc9@t '(core-prim)) (let ((S3cd1@name S3cc4@value)) (list 'primitive S3cd1@name)) (if (memv S3cc9@t '(call)) (S2cce@chi-application S3cb1@e S3cb2@r S3cb3@mr) (if (memv S3cc9@t '(lexical)) (let ((S3cd3@lex (S2c38@lexical-var S3cc4@value))) S3cd3@lex) (if (memv S3cc9@t '(global-macro global-macro!)) (S2cd0@chi-expr (S2cca@chi-global-macro S3cc4@value S3cb1@e) S3cb2@r S3cb3@mr) (if (memv S3cc9@t '(local-macro local-macro!)) (S2cd0@chi-expr (S2cc8@chi-local-macro S3cc4@value S3cb1@e) S3cb2@r S3cb3@mr) (if (memv S3cc9@t '(macro macro!)) (S2cd0@chi-expr (S2cc6@chi-macro S3cc4@value S3cb1@e) S3cb2@r S3cb3@mr) (if (memv S3cc9@t '(constant)) (let ((S3cd5@datum S3cc4@value)) (list 'quote S3cd5@datum)) (if (memv S3cc9@t '(set!)) (S2cd2@chi-set! S3cb1@e S3cb2@r S3cb3@mr) (if (memv S3cc9@t '(begin)) (let ((S3cd7@t S3cb1@e)) (let ((S3cd9@ls/false (S2cae@syntax-dispatch S3cd7@t '(_ any . each-any)))) (if S3cd9@ls/false (apply (lambda (S3cdb@x S3cdc@x*) (S2a0c@S2966@build-sequence '#f (S2ccc@chi-expr* (cons S3cdb@x S3cdc@x*) S3cb2@r S3cb3@mr))) S3cd9@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3cd7@t)))) (if (memv S3cc9@t '(let-syntax letrec-syntax)) (let ((S3cdf@t S3cb1@e)) (let ((S3ce1@ls/false (S2cae@syntax-dispatch S3cdf@t '(_ #(each (any any)) any . each-any)))) (if (and S3ce1@ls/false (apply (lambda (S3ce3@xlhs* S3ce4@xrhs* S3ce5@xbody S3ce6@xbody*) (if (not (S2aaf@valid-bound-ids? S3ce3@xlhs*)) (S2d8e@syntax-violation '#f '"invalid identifiers" S3cb1@e) (void))) S3ce1@ls/false)) (apply (lambda (S3ceb@xlhs* S3cec@xrhs* S3ced@xbody S3cee@xbody*) (let ((S3cf3@xlab* (map S2a33@gen-label S3ceb@xlhs*))) (let ((S3cf5@xrib (S2a67@make-full-rib S3ceb@xlhs* S3cf3@xlab*))) (let ((S3cf7@xb* (map (lambda (S3cf9@x) (S2adf@make-eval-transformer (S2d08@expand-transformer (if (eq? S3cc5@type 'let-syntax) S3cf9@x (S2a93@add-subst S3cf5@xrib S3cf9@x)) S3cb3@mr))) S3cec@xrhs*))) (S2a0c@S2966@build-sequence '#f (S2ccc@chi-expr* (map (lambda (S3cfb@x) (S2a93@add-subst S3cf5@xrib S3cfb@x)) (cons S3ced@xbody S3cee@xbody*)) (append (map cons S3cf3@xlab* S3cf7@xb*) S3cb2@r) (append (map cons S3cf3@xlab* S3cf7@xb*) S3cb3@mr))))))) S3ce1@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3cdf@t)))) (if (memv S3cc9@t '(displaced-lexical)) (S2d8e@syntax-violation '#f '"identifier out of context" S3cb1@e) (if (memv S3cc9@t '(syntax)) (S2d8e@syntax-violation '#f '"reference to pattern variable outside a syntax form" S3cb1@e) (if (memv S3cc9@t '(define define-syntax module import library)) (S2d8e@syntax-violation '#f (string-append (let ((S3cfd@t S3cc5@type)) (if (memv S3cfd@t '(define)) '"a definition" (if (memv S3cfd@t '(define-syntax)) '"a define-syntax" (if (memv S3cfd@t '(module)) '"a module definition" (if (memv S3cfd@t '(library)) '"a library definition" (if (memv S3cfd@t '(import)) '"an import declaration" (if (memv S3cfd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") S3cb1@e) (if (memv S3cc9@t '(mutable)) (S2d8e@syntax-violation '#f '"attempt to reference an unexportable variable" S3cb1@e) (S2d8e@syntax-violation '#f '"invalid expression" S3cb1@e))))))))))))))))))))))) (set! S4793@S2cd0@chi-expr S2cd0@chi-expr)) (begin (set! S2cd2@chi-set! (lambda (S3cff@e S3d00@r S3d01@mr) (let ((S3d05@t S3cff@e)) (let ((S3d07@ls/false (S2cae@syntax-dispatch S3d05@t '(_ any any)))) (if (and S3d07@ls/false (apply (lambda (S3d09@x S3d0a@v) (S2aa7@id? S3d09@x)) S3d07@ls/false)) (apply (lambda (S3d0d@x S3d0e@v) (call-with-values (lambda () (S2ac9@syntax-type S3d0d@x S3d00@r)) (lambda (S3d17@S3d12 S3d18@S3d14 S3d19@S3d16) (let ((S3d1d@kwd S3d19@S3d16) (S3d1e@value S3d18@S3d14) (S3d1f@type S3d17@S3d12)) (let ((S3d23@t S3d1f@type)) (if (memv S3d23@t '(lexical)) (begin (S2c3c@set-lexical-mutable! S3d1e@value '#t) (list 'set! (S2c38@lexical-var S3d1e@value) (S2cd0@chi-expr S3d0e@v S3d00@r S3d01@mr))) (if (memv S3d23@t '(core-prim)) (S2d8e@syntax-violation '#f '"cannot modify imported core primitive" S3cff@e) (if (memv S3d23@t '(global)) (S2d8e@syntax-violation '#f '"attempt to modify imported binding" S3cff@e) (if (memv S3d23@t '(global-macro!)) (S2cd0@chi-expr (S2cca@chi-global-macro S3d1e@value S3cff@e) S3d00@r S3d01@mr) (if (memv S3d23@t '(local-macro!)) (S2cd0@chi-expr (S2cc8@chi-local-macro S3d1e@value S3cff@e) S3d00@r S3d01@mr) (if (memv S3d23@t '(mutable)) (S2d8e@syntax-violation '#f '"attempt to assign to an unexportable variable" S3cff@e) (S2d8e@syntax-violation '#f '"invalid syntax" S3cff@e)))))))))))) S3d07@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3d05@t)))))) (set! S4794@S2cd2@chi-set! S2cd2@chi-set!)) (begin (set! S2cd4@verify-formals (lambda (S3d25@fmls S3d26@stx) (let ((S3d29@t S3d25@fmls)) (let ((S3d2b@ls/false (S2cae@syntax-dispatch S3d29@t 'each-any))) (if S3d2b@ls/false (apply (lambda (S3d2d@x*) (if (not (S2aaf@valid-bound-ids? S3d2d@x*)) (S2c68@invalid-fmls-error S3d26@stx S3d25@fmls) (void))) S3d2b@ls/false) (let ((S3d2f@t S3d29@t)) (let ((S3d31@ls/false (S2cae@syntax-dispatch S3d2f@t '#(each+ any () any)))) (if S3d31@ls/false (apply (lambda (S3d33@x* S3d34@x) (if (not (S2aaf@valid-bound-ids? (cons S3d34@x S3d33@x*))) (S2c68@invalid-fmls-error S3d26@stx S3d25@fmls) (void))) S3d31@ls/false) (let ((S3d37@t S3d2f@t)) (let ((S3d39@ls/false (S2cae@syntax-dispatch S3d37@t '_))) (if S3d39@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid syntax" S3d26@stx)) S3d39@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3d37@t)))))))))))) (set! S4795@S2cd4@verify-formals S2cd4@verify-formals)) (begin (set! S2cd6@chi-lambda-clause (lambda (S3d3b@stx S3d3c@fmls S3d3d@body* S3d3e@r S3d3f@mr) (let ((S3d45@t S3d3c@fmls)) (let ((S3d47@ls/false (S2cae@syntax-dispatch S3d45@t 'each-any))) (if S3d47@ls/false (apply (lambda (S3d49@x*) (begin (S2cd4@verify-formals S3d3c@fmls S3d3b@stx) (let ((S3d4b@lex* (map S2a2f@gen-lexical S3d49@x*)) (S3d4c@lab* (map S2a33@gen-label S3d49@x*))) (values S3d4b@lex* (S2ce6@chi-internal (S2a93@add-subst (S2a67@make-full-rib S3d49@x* S3d4c@lab*) S3d3d@body*) (S2c40@add-lexicals S3d4c@lab* S3d4b@lex* S3d3e@r) S3d3f@mr))))) S3d47@ls/false) (let ((S3d4f@t S3d45@t)) (let ((S3d51@ls/false (S2cae@syntax-dispatch S3d4f@t '#(each+ any () any)))) (if S3d51@ls/false (apply (lambda (S3d53@x* S3d54@x) (begin (S2cd4@verify-formals S3d3c@fmls S3d3b@stx) (let ((S3d57@lex* (map S2a2f@gen-lexical S3d53@x*)) (S3d58@lab* (map S2a33@gen-label S3d53@x*)) (S3d59@lex (S2a2f@gen-lexical S3d54@x)) (S3d5a@lab (S2a33@gen-label S3d54@x))) (values (append S3d57@lex* S3d59@lex) (S2ce6@chi-internal (S2a93@add-subst (S2a67@make-full-rib (cons S3d54@x S3d53@x*) (cons S3d5a@lab S3d58@lab*)) S3d3d@body*) (S2c40@add-lexicals (cons S3d5a@lab S3d58@lab*) (cons S3d59@lex S3d57@lex*) S3d3e@r) S3d3f@mr))))) S3d51@ls/false) (let ((S3d5f@t S3d4f@t)) (let ((S3d61@ls/false (S2cae@syntax-dispatch S3d5f@t '_))) (if S3d61@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid syntax" S3d3c@fmls)) S3d61@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3d5f@t)))))))))))) (set! S4796@S2cd6@chi-lambda-clause S2cd6@chi-lambda-clause)) (begin (set! S2cd8@chi-lambda-clause* (lambda (S3d63@stx S3d64@fmls* S3d65@body** S3d66@r S3d67@mr) (if (null? S3d64@fmls*) (values '() '()) (call-with-values (lambda () (S2cd6@chi-lambda-clause S3d63@stx (car S3d64@fmls*) (car S3d65@body**) S3d66@r S3d67@mr)) (lambda (S3d71@S3d6e S3d72@S3d70) (let ((S3d75@b S3d72@S3d70) (S3d76@a S3d71@S3d6e)) (call-with-values (lambda () (S2cd8@chi-lambda-clause* S3d63@stx (cdr S3d64@fmls*) (cdr S3d65@body**) S3d66@r S3d67@mr)) (lambda (S3d7d@S3d7a S3d7e@S3d7c) (let ((S3d81@b* S3d7e@S3d7c) (S3d82@a* S3d7d@S3d7a)) (values (cons S3d76@a S3d82@a*) (cons S3d75@b S3d81@b*))))))))))) (set! S4797@S2cd8@chi-lambda-clause* S2cd8@chi-lambda-clause*)) (begin (set! S2cda@chi-defun (lambda (S3d85@x S3d86@r S3d87@mr) (let ((S3d8b@fmls (car S3d85@x)) (S3d8c@body* (cdr S3d85@x))) (call-with-values (lambda () (S2cd6@chi-lambda-clause S3d8b@fmls S3d8b@fmls S3d8c@body* S3d86@r S3d87@mr)) (lambda (S3d93@S3d90 S3d94@S3d92) (let ((S3d97@body S3d94@S3d92) (S3d98@fmls S3d93@S3d90)) (S2a0a@S2936@build-lambda '#f S3d98@fmls S3d97@body))))))) (set! S4798@S2cda@chi-defun S2cda@chi-defun)) (begin (set! S2cdc@chi-rhs (lambda (S3d9b@rhs S3d9c@r S3d9d@mr) (let ((S3da1@t (car S3d9b@rhs))) (if (memv S3da1@t '(defun)) (S2cda@chi-defun (cdr S3d9b@rhs) S3d9c@r S3d9d@mr) (if (memv S3da1@t '(expr)) (let ((S3da3@expr (cdr S3d9b@rhs))) (S2cd0@chi-expr S3da3@expr S3d9c@r S3d9d@mr)) (if (memv S3da1@t '(top-expr)) (let ((S3da5@expr (cdr S3d9b@rhs))) (S2a0c@S2966@build-sequence '#f (list (S2cd0@chi-expr S3da5@expr S3d9c@r S3d9d@mr) (S2a0d@S2968@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" S3d9b@rhs))))))) (set! S4799@S2cdc@chi-rhs S2cdc@chi-rhs)) (begin (set! S2cde@expand-interaction-rhs*/init* (lambda (S3da7@lhs* S3da8@rhs* S3da9@init* S3daa@r S3dab@mr) (let S3db5@f ((S3db1@lhs* S3da7@lhs*) (S3db2@rhs* S3da8@rhs*)) (if (null? S3db1@lhs*) (map (lambda (S3db7@x) (S2cd0@chi-expr S3db7@x S3daa@r S3dab@mr)) S3da9@init*) (let ((S3db9@lhs (car S3db1@lhs*)) (S3dba@rhs (car S3db2@rhs*))) (let ((S3dbd@t (car S3dba@rhs))) (if (memv S3dbd@t '(defun)) (let ((S3dbf@rhs (S2cda@chi-defun (cdr S3dba@rhs) S3daa@r S3dab@mr))) (cons (list 'set! S3db9@lhs S3dbf@rhs) (S3db5@f (cdr S3db1@lhs*) (cdr S3db2@rhs*)))) (if (memv S3dbd@t '(expr)) (let ((S3dc1@rhs (S2cd0@chi-expr (cdr S3dba@rhs) S3daa@r S3dab@mr))) (cons (list 'set! S3db9@lhs S3dc1@rhs) (S3db5@f (cdr S3db1@lhs*) (cdr S3db2@rhs*)))) (if (memv S3dbd@t '(top-expr)) (let ((S3dc3@e (S2cd0@chi-expr (cdr S3dba@rhs) S3daa@r S3dab@mr))) (cons S3dc3@e (S3db5@f (cdr S3db1@lhs*) (cdr S3db2@rhs*)))) (error 'expand-interaction '"invallid" S3dba@rhs)))))))))) (set! S479a@S2cde@expand-interaction-rhs*/init* S2cde@expand-interaction-rhs*/init*)) (begin (set! S2ce0@chi-rhs* (lambda (S3dc5@rhs* S3dc6@r S3dc7@mr) (let S3dcd@f ((S3dcb@ls S3dc5@rhs*)) (if (null? S3dcb@ls) '() (let ((S3dcf@a (S2cdc@chi-rhs (car S3dcb@ls) S3dc6@r S3dc7@mr))) (cons S3dcf@a (S3dcd@f (cdr S3dcb@ls)))))))) (set! S479b@S2ce0@chi-rhs* S2ce0@chi-rhs*)) (begin (set! S2ce2@find-bound=? (lambda (S3dd1@x S3dd2@lhs* S3dd3@rhs*) (if (null? S3dd2@lhs*) '#f (if (S2aab@bound-id=? S3dd1@x (car S3dd2@lhs*)) (car S3dd3@rhs*) (S2ce2@find-bound=? S3dd1@x (cdr S3dd2@lhs*) (cdr S3dd3@rhs*)))))) (set! S479c@S2ce2@find-bound=? S2ce2@find-bound=?)) (begin (set! S2ce4@find-dups (lambda (S3dd7@ls) (let S3ddd@f ((S3dd9@ls S3dd7@ls) (S3dda@dups '())) (if (null? S3dd9@ls) S3dda@dups (let ((S3ddf@t (S2ce2@find-bound=? (car S3dd9@ls) (cdr S3dd9@ls) (cdr S3dd9@ls)))) (if S3ddf@t ((lambda (S3de1@x) (S3ddd@f (cdr S3dd9@ls) (cons (list (car S3dd9@ls) S3de1@x) S3dda@dups))) S3ddf@t) (S3ddd@f (cdr S3dd9@ls) S3dda@dups))))))) (set! S479d@S2ce4@find-dups S2ce4@find-dups)) (begin (set! S2ce6@chi-internal (lambda (S3de3@e* S3de4@r S3de5@mr) (let ((S3de9@rib (S2a5b@make-empty-rib))) (call-with-values (lambda () (S2d06@chi-body* (map (lambda (S3dfb@x) (S2a93@add-subst S3de9@rib S3dfb@x)) (S2aa5@syntax->list S3de3@e*)) S3de4@r S3de5@mr '() '() '() '() '() S3de9@rib '#f)) (lambda (S3dfd@S3dec S3dfe@S3dee S3dff@S3df0 S3e00@S3df2 S3e01@S3df4 S3e02@S3df6 S3e03@S3df8 S3e04@S3dfa) (let ((S3e0d@_exp* S3e04@S3dfa) (S3e0e@kwd* S3e03@S3df8) (S3e0f@mod** S3e02@S3df6) (S3e10@rhs* S3e01@S3df4) (S3e11@lex* S3e00@S3df2) (S3e12@mr S3dff@S3df0) (S3e13@r S3dfe@S3dee) (S3e14@e* S3dfd@S3dec)) (begin (if (null? S3e14@e*) (S2d8e@syntax-violation '#f '"no expression in body" S3e14@e*) (void)) (let ((S3e1d@init* (S2ccc@chi-expr* (append (apply append (reverse S3e0f@mod**)) S3e14@e*) S3e13@r S3e12@mr))) (let ((S3e1f@rhs* (S2ce0@chi-rhs* S3e10@rhs* S3e13@r S3e12@mr))) (S2a11@S2970@build-letrec* '#f (reverse S3e11@lex*) (reverse S3e1f@rhs*) (S2a0c@S2966@build-sequence '#f S3e1d@init*))))))))))) (set! S479e@S2ce6@chi-internal S2ce6@chi-internal)) (begin (set! S2ce8@parse-module (lambda (S3e21@e) (let ((S3e23@t S3e21@e)) (let ((S3e25@ls/false (S2cae@syntax-dispatch S3e23@t '(_ each-any . each-any)))) (if S3e25@ls/false (apply (lambda (S3e27@export* S3e28@b*) (begin (if (not (for-all S2aa7@id? S3e27@export*)) (S2d8e@syntax-violation '#f '"module exports must be identifiers" S3e21@e) (void)) (values '#f (list->vector S3e27@export*) S3e28@b*))) S3e25@ls/false) (let ((S3e2b@t S3e23@t)) (let ((S3e2d@ls/false (S2cae@syntax-dispatch S3e2b@t '(_ any each-any . each-any)))) (if S3e2d@ls/false (apply (lambda (S3e2f@name S3e30@export* S3e31@b*) (begin (if (not (S2aa7@id? S3e2f@name)) (S2d8e@syntax-violation '#f '"module name must be an identifier" S3e21@e) (void)) (if (not (for-all S2aa7@id? S3e30@export*)) (S2d8e@syntax-violation '#f '"module exports must be identifiers" S3e21@e) (void)) (values S3e2f@name (list->vector S3e30@export*) S3e31@b*))) S3e2d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3e2b@t))))))))) (set! S479f@S2ce8@parse-module S2ce8@parse-module)) (begin (set! S2cf2@module-interface? (lambda (S3e35@x) (and (simple-struct? S3e35@x) (eq? (simple-struct-name S3e35@x) 'module-interface)))) (set! S47a0@S2cf2@module-interface? S2cf2@module-interface?)) (begin (set! S2cf4@module-interface-first-mark (lambda (S3e37@x) (simple-struct-ref S3e37@x '0))) (set! S47a1@S2cf4@module-interface-first-mark S2cf4@module-interface-first-mark)) (begin (set! S2cf6@set-module-interface-first-mark! (lambda (S3e39@x S3e3a@val) (simple-struct-set! S3e39@x '0 S3e3a@val))) (set! S47a2@S2cf6@set-module-interface-first-mark! S2cf6@set-module-interface-first-mark!)) (begin (set! S2cf8@module-interface-exp-id-vec (lambda (S3e3d@x) (simple-struct-ref S3e3d@x '1))) (set! S47a3@S2cf8@module-interface-exp-id-vec S2cf8@module-interface-exp-id-vec)) (begin (set! S2cfa@set-module-interface-exp-id-vec! (lambda (S3e3f@x S3e40@val) (simple-struct-set! S3e3f@x '1 S3e40@val))) (set! S47a4@S2cfa@set-module-interface-exp-id-vec! S2cfa@set-module-interface-exp-id-vec!)) (begin (set! S2cfc@module-interface-exp-lab-vec (lambda (S3e43@x) (simple-struct-ref S3e43@x '2))) (set! S47a5@S2cfc@module-interface-exp-lab-vec S2cfc@module-interface-exp-lab-vec)) (begin (set! S2cfe@set-module-interface-exp-lab-vec! (lambda (S3e45@x S3e46@val) (simple-struct-set! S3e45@x '2 S3e46@val))) (set! S47a6@S2cfe@set-module-interface-exp-lab-vec! S2cfe@set-module-interface-exp-lab-vec!)) (begin (set! S2d00@dummy '3) (set! S47a7@S2d00@dummy S2d00@dummy)) (begin (set! S2d02@module-interface-exp-id* (lambda (S3e49@iface S3e4a@id) (let ((S3e4e@diff-marks '#f)) (begin (set! S3e4e@diff-marks (lambda (S3e55@ls S3e56@x) (begin (if (null? S3e55@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((S3e59@a (car S3e55@ls))) (if (eq? S3e59@a S3e56@x) '() (cons S3e59@a (S3e4e@diff-marks (cdr S3e55@ls) S3e56@x))))))) (let ((S3e4f@diff (S3e4e@diff-marks (S2a79@stx-mark* S3e4a@id) (S2cf4@module-interface-first-mark S3e49@iface))) (S3e50@id-vec (S2cf8@module-interface-exp-id-vec S3e49@iface))) (if (null? S3e4f@diff) S3e50@id-vec (vector-map (lambda (S3e53@x) (make-simple-struct 'stx '5 (list (S2a75@stx-expr S3e53@x) (append S3e4f@diff (S2a79@stx-mark* S3e53@x)) '() '()))) S3e50@id-vec))))))) (set! S47a8@S2d02@module-interface-exp-id* S2d02@module-interface-exp-id*)) (begin (set! S2d04@chi-internal-module (lambda (S3e5b@e S3e5c@r S3e5d@mr S3e5e@lex* S3e5f@rhs* S3e60@mod** S3e61@kwd*) (call-with-values (lambda () (S2ce8@parse-module S3e5b@e)) (lambda (S3e6f@S3e6a S3e70@S3e6c S3e71@S3e6e) (let ((S3e75@e* S3e71@S3e6e) (S3e76@exp-id* S3e70@S3e6c) (S3e77@name S3e6f@S3e6a)) (let ((S3e7b@rib (S2a5b@make-empty-rib))) (let ((S3e7d@e* (map (lambda (S3e7f@x) (S2a93@add-subst S3e7b@rib S3e7f@x)) (S2aa5@syntax->list S3e75@e*)))) (call-with-values (lambda () (S2d06@chi-body* S3e7d@e* S3e5c@r S3e5d@mr S3e5e@lex* S3e5f@rhs* S3e60@mod** S3e61@kwd* '() S3e7b@rib '#f)) (lambda (S3e91@S3e82 S3e92@S3e84 S3e93@S3e86 S3e94@S3e88 S3e95@S3e8a S3e96@S3e8c S3e97@S3e8e S3e98@S3e90) (let ((S3ea1@_exp* S3e98@S3e90) (S3ea2@kwd* S3e97@S3e8e) (S3ea3@mod** S3e96@S3e8c) (S3ea4@rhs* S3e95@S3e8a) (S3ea5@lex* S3e94@S3e88) (S3ea6@mr S3e93@S3e86) (S3ea7@r S3e92@S3e84) (S3ea8@e* S3e91@S3e82)) (let ((S3eb1@exp-lab* (vector-map (lambda (S3eb5@x) (or (S2abd@id->label (make-simple-struct 'stx '5 (list (S2aa9@id->sym S3eb5@x) (S2a79@stx-mark* S3eb5@x) (list S3e7b@rib) '()))) (S2d8e@syntax-violation '#f '"cannot find module export" S3eb5@x))) S3e76@exp-id*)) (S3eb2@mod** (cons S3ea8@e* S3ea3@mod**))) (if (not S3e77@name) (values S3ea5@lex* S3ea4@rhs* S3e76@exp-id* S3eb1@exp-lab* S3ea7@r S3ea6@mr S3eb2@mod** S3ea2@kwd*) (let ((S3eb7@lab (S2a33@gen-label 'module)) (S3eb8@iface (make-simple-struct 'module-interface '4 (list (car (S2a79@stx-mark* S3e77@name)) (vector-map (lambda (S3ebb@x) (make-simple-struct 'stx '5 (list (S2a75@stx-expr S3ebb@x) (S2a79@stx-mark* S3ebb@x) '() '()))) S3e76@exp-id*) S3eb1@exp-lab*)))) (values S3ea5@lex* S3ea4@rhs* (vector S3e77@name) (vector S3eb7@lab) (cons (cons S3eb7@lab (cons '$module S3eb8@iface)) S3ea7@r) (cons (cons S3eb7@lab (cons '$module S3eb8@iface)) S3ea6@mr) S3eb2@mod** S3ea2@kwd*)))))))))))))) (set! S47a9@S2d04@chi-internal-module S2d04@chi-internal-module)) (begin (set! S2d06@chi-body* (lambda (S3ebd@e* S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ec3@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?) (if (null? S3ebd@e*) (values S3ebd@e* S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ec3@kwd* S3ec4@exp*) (let ((S3ed1@e (car S3ebd@e*))) (call-with-values (lambda () (S2ac9@syntax-type S3ed1@e S3ebe@r)) (lambda (S3ed9@S3ed4 S3eda@S3ed6 S3edb@S3ed8) (let ((S3edf@kwd S3edb@S3ed8) (S3ee0@value S3eda@S3ed6) (S3ee1@type S3ed9@S3ed4)) (let ((S3ee5@kwd* (if (S2aa7@id? S3edf@kwd) (cons S3edf@kwd S3ec3@kwd*) S3ec3@kwd*))) (let ((S3ee7@t S3ee1@type)) (if (memv S3ee7@t '(define)) (call-with-values (lambda () (S2c30@parse-define S3ed1@e)) (lambda (S3eed@S3eea S3eee@S3eec) (let ((S3ef1@rhs S3eee@S3eec) (S3ef2@id S3eed@S3eea)) (begin (if (S2ab3@bound-id-member? S3ef2@id S3ee5@kwd*) (S2d8e@syntax-violation '#f '"cannot redefine keyword" S3ed1@e) (void)) (call-with-values (lambda () (S2a37@gen-define-label+loc S3ef2@id S3ec5@rib)) (lambda (S3ef9@S3ef6 S3efa@S3ef8) (let ((S3efd@lex S3efa@S3ef8) (S3efe@lab S3ef9@S3ef6)) (begin (S2a5d@extend-rib! S3ec5@rib S3ef2@id S3efe@lab) (S2d06@chi-body* (cdr S3ebd@e*) (S2c3e@add-lexical S3efe@lab S3efd@lex S3ebe@r) S3ebf@mr (cons S3efd@lex S3ec0@lex*) (cons S3ef1@rhs S3ec1@rhs*) S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?))))))))) (if (memv S3ee7@t '(define-syntax)) (call-with-values (lambda () (S2c32@parse-define-syntax S3ed1@e)) (lambda (S3f05@S3f02 S3f06@S3f04) (let ((S3f09@rhs S3f06@S3f04) (S3f0a@id S3f05@S3f02)) (begin (if (S2ab3@bound-id-member? S3f0a@id S3ee5@kwd*) (S2d8e@syntax-violation '#f '"cannot redefine keyword" S3ed1@e) (void)) (let ((S3f0d@lab (S2a39@gen-define-label S3f0a@id S3ec5@rib)) (S3f0e@expanded-rhs (S2d08@expand-transformer S3f09@rhs S3ebf@mr))) (begin (S2a5d@extend-rib! S3ec5@rib S3f0a@id S3f0d@lab) (let ((S3f11@b (S2adf@make-eval-transformer S3f0e@expanded-rhs))) (S2d06@chi-body* (cdr S3ebd@e*) (cons (cons S3f0d@lab S3f11@b) S3ebe@r) (cons (cons S3f0d@lab S3f11@b) S3ebf@mr) S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?)))))))) (if (memv S3ee7@t '(let-syntax letrec-syntax)) (let ((S3f13@t S3ed1@e)) (let ((S3f15@ls/false (S2cae@syntax-dispatch S3f13@t '(_ #(each (any any)) . each-any)))) (if (and S3f15@ls/false (apply (lambda (S3f17@xlhs* S3f18@xrhs* S3f19@xbody*) (if (not (S2aaf@valid-bound-ids? S3f17@xlhs*)) (S2d8e@syntax-violation '#f '"invalid identifiers" S3ed1@e) (void))) S3f15@ls/false)) (apply (lambda (S3f1d@xlhs* S3f1e@xrhs* S3f1f@xbody*) (let ((S3f23@xlab* (map S2a33@gen-label S3f1d@xlhs*))) (let ((S3f25@xrib (S2a67@make-full-rib S3f1d@xlhs* S3f23@xlab*))) (let ((S3f27@xb* (map (lambda (S3f29@x) (S2adf@make-eval-transformer (S2d08@expand-transformer (if (eq? S3ee1@type 'let-syntax) S3f29@x (S2a93@add-subst S3f25@xrib S3f29@x)) S3ebf@mr))) S3f1e@xrhs*))) (S2d06@chi-body* (append (map (lambda (S3f2b@x) (S2a93@add-subst S3f25@xrib S3f2b@x)) S3f1f@xbody*) (cdr S3ebd@e*)) (append (map cons S3f23@xlab* S3f27@xb*) S3ebe@r) (append (map cons S3f23@xlab* S3f27@xb*) S3ebf@mr) S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?))))) S3f15@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3f13@t)))) (if (memv S3ee7@t '(begin)) (let ((S3f2d@t S3ed1@e)) (let ((S3f2f@ls/false (S2cae@syntax-dispatch S3f2d@t '(_ . each-any)))) (if S3f2f@ls/false (apply (lambda (S3f31@x*) (S2d06@chi-body* (append S3f31@x* (cdr S3ebd@e*)) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?)) S3f2f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3f2d@t)))) (if (memv S3ee7@t '(global-macro global-macro!)) (S2d06@chi-body* (cons (S2a93@add-subst S3ec5@rib (S2cca@chi-global-macro S3ee0@value S3ed1@e)) (cdr S3ebd@e*)) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?) (if (memv S3ee7@t '(local-macro local-macro!)) (S2d06@chi-body* (cons (S2a93@add-subst S3ec5@rib (S2cc8@chi-local-macro S3ee0@value S3ed1@e)) (cdr S3ebd@e*)) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?) (if (memv S3ee7@t '(macro macro!)) (S2d06@chi-body* (cons (S2a93@add-subst S3ec5@rib (S2cc6@chi-macro S3ee0@value S3ed1@e)) (cdr S3ebd@e*)) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?) (if (memv S3ee7@t '(module)) (call-with-values (lambda () (S2d04@chi-internal-module S3ed1@e S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd*)) (lambda (S3f43@S3f34 S3f44@S3f36 S3f45@S3f38 S3f46@S3f3a S3f47@S3f3c S3f48@S3f3e S3f49@S3f40 S3f4a@S3f42) (let ((S3f53@kwd* S3f4a@S3f42) (S3f54@mod** S3f49@S3f40) (S3f55@mr S3f48@S3f3e) (S3f56@r S3f47@S3f3c) (S3f57@m-exp-lab* S3f46@S3f3a) (S3f58@m-exp-id* S3f45@S3f38) (S3f59@rhs* S3f44@S3f36) (S3f5a@lex* S3f43@S3f34)) (begin (vector-for-each (lambda (S3f63@id S3f64@lab) (S2a5d@extend-rib! S3ec5@rib S3f63@id S3f64@lab)) S3f58@m-exp-id* S3f57@m-exp-lab*) (S2d06@chi-body* (cdr S3ebd@e*) S3f56@r S3f55@mr S3f5a@lex* S3f59@rhs* S3f54@mod** S3f53@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?))))) (if (memv S3ee7@t '(library)) (begin (S2d70@library-expander (S2abb@stx->datum S3ed1@e)) (S2d06@chi-body* (cdr S3ebd@e*) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?)) (if (memv S3ee7@t '(export)) (let ((S3f67@t S3ed1@e)) (let ((S3f69@ls/false (S2cae@syntax-dispatch S3f67@t '(_ . each-any)))) (if S3f69@ls/false (apply (lambda (S3f6b@exp-decl*) (S2d06@chi-body* (cdr S3ebd@e*) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* (append S3f6b@exp-decl* S3ec4@exp*) S3ec5@rib S3ec6@top?)) S3f69@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3f67@t)))) (if (memv S3ee7@t '(import)) (let ((S3f6e@module-import? '#f) (S3f70@module-import '#f) (S3f72@library-import '#f)) (begin (set! S3f6e@module-import? (lambda (S3fc1@e) (let ((S3fc3@t S3fc1@e)) (let ((S3fc5@ls/false (S2cae@syntax-dispatch S3fc3@t '(_ any)))) (if (and S3fc5@ls/false (apply (lambda (S3fc7@id) (S2aa7@id? S3fc7@id)) S3fc5@ls/false)) (apply (lambda (S3fc9@id) '#t) S3fc5@ls/false) (let ((S3fcb@t S3fc3@t)) (let ((S3fcd@ls/false (S2cae@syntax-dispatch S3fcb@t '(_ . each-any)))) (if S3fcd@ls/false (apply (lambda (S3fcf@imp*) '#f) S3fcd@ls/false) (let ((S3fd1@t S3fcb@t)) (let ((S3fd3@ls/false (S2cae@syntax-dispatch S3fd1@t '_))) (if S3fd3@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"malformed import form" S3fc1@e)) S3fd3@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3fd1@t)))))))))))) (set! S3f70@module-import (lambda (S3f9f@e S3fa0@r) (let ((S3fa3@t S3f9f@e)) (let ((S3fa5@ls/false (S2cae@syntax-dispatch S3fa3@t '(_ any)))) (if (and S3fa5@ls/false (apply (lambda (S3fa7@id) (S2aa7@id? S3fa7@id)) S3fa5@ls/false)) (apply (lambda (S3fa9@id) (call-with-values (lambda () (S2ac9@syntax-type S3fa9@id S3fa0@r)) (lambda (S3fb1@S3fac S3fb2@S3fae S3fb3@S3fb0) (let ((S3fb7@kwd S3fb3@S3fb0) (S3fb8@value S3fb2@S3fae) (S3fb9@type S3fb1@S3fac)) (let ((S3fbd@t S3fb9@type)) (if (memv S3fbd@t '($module)) (let ((S3fbf@iface S3fb8@value)) (values (S2d02@module-interface-exp-id* S3fbf@iface S3fa9@id) (S2cfc@module-interface-exp-lab-vec S3fbf@iface))) (S2d8e@syntax-violation '#f '"invalid import" S3f9f@e))))))) S3fa5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3fa3@t)))))) (set! S3f72@library-import (lambda (S3f83@e) (let ((S3f85@t S3f83@e)) (let ((S3f87@ls/false (S2cae@syntax-dispatch S3f85@t '(any . each-any)))) (if S3f87@ls/false (apply (lambda (S3f89@ctxt S3f8a@imp*) (call-with-values (lambda () (S2d10@parse-import-spec* (S2d94@syntax->datum S3f8a@imp*))) (lambda (S3f91@S3f8e S3f92@S3f90) (let ((S3f95@subst-labels S3f92@S3f90) (S3f96@subst-names S3f91@S3f8e)) (values (vector-map (lambda (S3f99@name) (S2a87@datum->stx S3f89@ctxt S3f99@name)) S3f96@subst-names) S3f95@subst-labels))))) S3f87@ls/false) (let ((S3f9b@t S3f85@t)) (let ((S3f9d@ls/false (S2cae@syntax-dispatch S3f9b@t '_))) (if S3f9d@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid import form" S3f83@e)) S3f9d@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S3f9b@t))))))))) (begin (call-with-values (lambda () (if (S3f6e@module-import? S3ed1@e) (S3f70@module-import S3ed1@e S3ebe@r) (S3f72@library-import S3ed1@e))) (lambda (S3f77@S3f74 S3f78@S3f76) (let ((S3f7b@lab* S3f78@S3f76) (S3f7c@id* S3f77@S3f74)) (vector-for-each (lambda (S3f7f@id S3f80@lab) (S2a5d@extend-rib! S3ec5@rib S3f7f@id S3f80@lab)) S3f7c@id* S3f7b@lab*)))) (S2d06@chi-body* (cdr S3ebd@e*) S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?)))) (if S3ec6@top? (S2d06@chi-body* (cdr S3ebd@e*) S3ebe@r S3ebf@mr (cons (S2a2f@gen-lexical 'dummy) S3ec0@lex*) (cons (cons 'top-expr S3ed1@e) S3ec1@rhs*) S3ec2@mod** S3ee5@kwd* S3ec4@exp* S3ec5@rib S3ec6@top?) (values S3ebd@e* S3ebe@r S3ebf@mr S3ec0@lex* S3ec1@rhs* S3ec2@mod** S3ee5@kwd* S3ec4@exp*)))))))))))))))))))))) (set! S47aa@S2d06@chi-body* S2d06@chi-body*)) (begin (set! S2d08@expand-transformer (lambda (S3fd5@expr S3fd6@r) (let ((S3fd9@rtc (S2d14@make-collector))) (let ((S3fdb@expanded-rhs (let ((S3fe5@S3fde S2d16@inv-collector) (S3fe6@S3fe0 S2d18@vis-collector) (S3fe7@S3fe2 S3fd9@rtc) (S3fe8@S3fe4 (lambda (S3fed@x) (values)))) (let ((S3fef@swap (lambda () (begin (let ((S3ff1@t (S3fe5@S3fde))) (begin (S3fe5@S3fde S3fe7@S3fe2) (set! S3fe7@S3fe2 S3ff1@t))) (let ((S3ff3@t (S3fe6@S3fe0))) (begin (S3fe6@S3fe0 S3fe8@S3fe4) (set! S3fe8@S3fe4 S3ff3@t))))))) (dynamic-wind S3fef@swap (lambda () (S2cd0@chi-expr S3fd5@expr S3fd6@r S3fd6@r)) S3fef@swap))))) (begin (for-each (let ((S3ff5@mark-visit (S2d18@vis-collector))) (lambda (S3ff7@x) (begin (S28bd@S270b@invoke-library S3ff7@x) (S3ff5@mark-visit S3ff7@x)))) (S3fd9@rtc)) S3fdb@expanded-rhs))))) (set! S47ab@S2d08@expand-transformer S2d08@expand-transformer)) (begin (set! S2d0a@parse-exports (lambda (S3ff9@exp*) (let S4001@f ((S3ffb@exp* S3ff9@exp*) (S3ffc@int* '()) (S3ffd@ext* '())) (if (null? S3ffb@exp*) (begin (if (not (S2aaf@valid-bound-ids? S3ffd@ext*)) (S2d8e@syntax-violation 'export '"invalid exports" (S2ce4@find-dups S3ffd@ext*)) (void)) (values (map S2d94@syntax->datum S3ffd@ext*) S3ffc@int*)) (let ((S4003@t (car S3ffb@exp*))) (let ((S4005@ls/false (S2cae@syntax-dispatch S4003@t '(any . #(each (any any)))))) (if S4005@ls/false (apply (lambda (S4007@rename S4008@i* S4009@e*) (begin (if (not (and (eq? (S2d94@syntax->datum S4007@rename) 'rename) (for-all S2aa7@id? S4008@i*) (for-all S2aa7@id? S4009@e*))) (S2d8e@syntax-violation 'export '"invalid export specifier" (car S3ffb@exp*)) (void)) (S4001@f (cdr S3ffb@exp*) (append S4008@i* S3ffc@int*) (append S4009@e* S3ffd@ext*)))) S4005@ls/false) (let ((S400d@t S4003@t)) (let ((S400f@ls/false (S2cae@syntax-dispatch S400d@t 'any))) (if S400f@ls/false (apply (lambda (S4011@ie) (begin (if (not (S2aa7@id? S4011@ie)) (S2d8e@syntax-violation 'export '"invalid export" S4011@ie) (void)) (S4001@f (cdr S3ffb@exp*) (cons S4011@ie S3ffc@int*) (cons S4011@ie S3ffd@ext*)))) S400f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S400d@t))))))))))) (set! S47ac@S2d0a@parse-exports S2d0a@parse-exports)) (begin (set! S2d0c@parse-library-name (lambda (S4013@spec) (let ((S4016@parse '#f)) (begin (set! S4016@parse (lambda (S4023@x) (let ((S4025@t S4023@x)) (let ((S4027@ls/false (S2cae@syntax-dispatch S4025@t '(each-any)))) (if (and S4027@ls/false (apply (lambda (S4029@v*) (for-all (lambda (S402b@x) (let ((S402d@x (S2d94@syntax->datum S402b@x))) (and (integer? S402d@x) (exact? S402d@x)))) S4029@v*)) S4027@ls/false)) (apply (lambda (S402f@v*) (values '() (map S2d94@syntax->datum S402f@v*))) S4027@ls/false) (let ((S4031@t S4025@t)) (let ((S4033@ls/false (S2cae@syntax-dispatch S4031@t '(any . any)))) (if (and S4033@ls/false (apply (lambda (S4035@x S4036@rest) (symbol? (S2d94@syntax->datum S4035@x))) S4033@ls/false)) (apply (lambda (S4039@x S403a@rest) (call-with-values (lambda () (S4016@parse S403a@rest)) (lambda (S4041@S403e S4042@S4040) (let ((S4045@v* S4042@S4040) (S4046@x* S4041@S403e)) (values (cons (S2d94@syntax->datum S4039@x) S4046@x*) S4045@v*))))) S4033@ls/false) (let ((S4049@t S4031@t)) (let ((S404b@ls/false (S2cae@syntax-dispatch S4049@t '()))) (if S404b@ls/false (apply (lambda () (values '() '())) S404b@ls/false) (let ((S404d@t S4049@t)) (let ((S404f@ls/false (S2cae@syntax-dispatch S404d@t '_))) (if S404f@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid library name" S4013@spec)) S404f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S404d@t))))))))))))))) (call-with-values (lambda () (S4016@parse S4013@spec)) (lambda (S401b@S4018 S401c@S401a) (let ((S401f@ver* S401c@S401a) (S4020@name* S401b@S4018)) (begin (if (null? S4020@name*) (S2d8e@syntax-violation '#f '"empty library name" S4013@spec) (void)) (values S4020@name* S401f@ver*))))))))) (set! S47ad@S2d0c@parse-library-name S2d0c@parse-library-name)) (begin (set! S2d0e@parse-library (lambda (S4051@e) (let ((S4053@t S4051@e)) (let ((S4055@ls/false (S2cae@syntax-dispatch S4053@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and S4055@ls/false (apply (lambda (S4057@library S4058@name* S4059@export S405a@exp* S405b@import S405c@imp* S405d@b*) (and (eq? (S2d94@syntax->datum S4059@export) 'export) (eq? (S2d94@syntax->datum S405b@import) 'import) (eq? (S2d94@syntax->datum S4057@library) 'library))) S4055@ls/false)) (apply (lambda (S4065@library S4066@name* S4067@export S4068@exp* S4069@import S406a@imp* S406b@b*) (values S4066@name* S4068@exp* S406a@imp* S406b@b*)) S4055@ls/false) (let ((S4073@t S4053@t)) (let ((S4075@ls/false (S2cae@syntax-dispatch S4073@t '_))) (if S4075@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"malformed library" S4051@e)) S4075@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S4073@t))))))))) (set! S47ae@S2d0e@parse-library S2d0e@parse-library)) (begin (set! S2d10@parse-import-spec* (let ((S4078@idsyn? '#f) (S407a@dup-error '#f) (S407c@merge-substs '#f) (S407e@exclude* '#f) (S4080@find* '#f) (S4082@rem* '#f) (S4084@remove-dups '#f) (S4086@parse-library-name '#f) (S4088@import-library '#f) (S408a@get-import '#f) (S408c@add-imports! '#f)) (begin (set! S4078@idsyn? (lambda (S4281@x) (symbol? (S2d94@syntax->datum S4281@x)))) (set! S407a@dup-error (lambda (S427f@name) (S2d8e@syntax-violation 'import '"two imports with different bindings" S427f@name))) (set! S407c@merge-substs (lambda (S426d@s S426e@subst) (let ((S4272@insert-to-subst '#f)) (begin (set! S4272@insert-to-subst (lambda (S4273@a S4274@subst) (let ((S4277@name (car S4273@a)) (S4278@label (cdr S4273@a))) (let ((S427b@t (assq S4277@name S4274@subst))) (if S427b@t ((lambda (S427d@x) (if (eq? (cdr S427d@x) S4278@label) S4274@subst (S407a@dup-error S4277@name))) S427b@t) (cons S4273@a S4274@subst)))))) (if (null? S426d@s) S426e@subst (S4272@insert-to-subst (car S426d@s) (S407c@merge-substs (cdr S426d@s) S426e@subst))))))) (set! S407e@exclude* (lambda (S423d@sym* S423e@subst) (let ((S4242@exclude '#f)) (begin (set! S4242@exclude (lambda (S425b@sym S425c@subst) (if (null? S425c@subst) (S2d8e@syntax-violation 'import '"cannot rename unbound identifier" S425b@sym) (if (eq? S425b@sym (caar S425c@subst)) (values (cdar S425c@subst) (cdr S425c@subst)) (let ((S425f@a (car S425c@subst))) (call-with-values (lambda () (S4242@exclude S425b@sym (cdr S425c@subst))) (lambda (S4265@S4262 S4266@S4264) (let ((S4269@subst S4266@S4264) (S426a@old S4265@S4262)) (values S426a@old (cons S425f@a S4269@subst)))))))))) (if (null? S423d@sym*) (values '() S423e@subst) (call-with-values (lambda () (S4242@exclude (car S423d@sym*) S423e@subst)) (lambda (S4247@S4244 S4248@S4246) (let ((S424b@subst S4248@S4246) (S424c@old S4247@S4244)) (call-with-values (lambda () (S407e@exclude* (cdr S423d@sym*) S424b@subst)) (lambda (S4253@S4250 S4254@S4252) (let ((S4257@subst S4254@S4252) (S4258@old* S4253@S4250)) (values (cons S424c@old S4258@old*) S4257@subst)))))))))))) (set! S4080@find* (lambda (S4235@sym* S4236@subst) (map (lambda (S4239@x) (let ((S423b@t (assq S4239@x S4236@subst))) (if S423b@t (cdr S423b@t) (S2d8e@syntax-violation 'import '"cannot find identifier" S4239@x)))) S4235@sym*))) (set! S4082@rem* (lambda (S422d@sym* S422e@subst) (let S4233@f ((S4231@subst S422e@subst)) (if (null? S4231@subst) '() (if (memq (caar S4231@subst) S422d@sym*) (S4233@f (cdr S4231@subst)) (cons (car S4231@subst) (S4233@f (cdr S4231@subst)))))))) (set! S4084@remove-dups (lambda (S422b@ls) (if (null? S422b@ls) '() (if (memq (car S422b@ls) (cdr S422b@ls)) (S4084@remove-dups (cdr S422b@ls)) (cons (car S422b@ls) (S4084@remove-dups (cdr S422b@ls))))))) (set! S4086@parse-library-name (lambda (S4143@spec) (let ((S4146@subversion? '#f) (S4148@subversion-pred '#f) (S414a@version-pred '#f)) (begin (set! S4146@subversion? (lambda (S4227@x) (let ((S4229@x (S2d94@syntax->datum S4227@x))) (and (integer? S4229@x) (exact? S4229@x) (>= S4229@x '0))))) (set! S4148@subversion-pred (lambda (S41c7@x*) (let ((S41c9@t S41c7@x*)) (let ((S41cb@ls/false (S2cae@syntax-dispatch S41c9@t 'any))) (if (and S41cb@ls/false (apply (lambda (S41cd@n) (S4146@subversion? S41cd@n)) S41cb@ls/false)) (apply (lambda (S41cf@n) (lambda (S41d1@x) (= S41d1@x (S2d94@syntax->datum S41cf@n)))) S41cb@ls/false) (let ((S41d3@t S41c9@t)) (let ((S41d5@ls/false (S2cae@syntax-dispatch S41d3@t '(any . each-any)))) (if (and S41d5@ls/false (apply (lambda (S41d7@p? S41d8@sub*) (eq? (S2d94@syntax->datum S41d7@p?) 'and)) S41d5@ls/false)) (apply (lambda (S41db@p? S41dc@sub*) (let ((S41df@p* (map S4148@subversion-pred S41dc@sub*))) (lambda (S41e1@x) (for-all (lambda (S41e3@p) (S41e3@p S41e1@x)) S41df@p*)))) S41d5@ls/false) (let ((S41e5@t S41d3@t)) (let ((S41e7@ls/false (S2cae@syntax-dispatch S41e5@t '(any . each-any)))) (if (and S41e7@ls/false (apply (lambda (S41e9@p? S41ea@sub*) (eq? (S2d94@syntax->datum S41e9@p?) 'or)) S41e7@ls/false)) (apply (lambda (S41ed@p? S41ee@sub*) (let ((S41f1@p* (map S4148@subversion-pred S41ee@sub*))) (lambda (S41f3@x) (exists (lambda (S41f5@p) (S41f5@p S41f3@x)) S41f1@p*)))) S41e7@ls/false) (let ((S41f7@t S41e5@t)) (let ((S41f9@ls/false (S2cae@syntax-dispatch S41f7@t '(any any)))) (if (and S41f9@ls/false (apply (lambda (S41fb@p? S41fc@sub) (eq? (S2d94@syntax->datum S41fb@p?) 'not)) S41f9@ls/false)) (apply (lambda (S41ff@p? S4200@sub) (let ((S4203@p (S4148@subversion-pred S4200@sub))) (lambda (S4205@x) (not (S4203@p S4205@x))))) S41f9@ls/false) (let ((S4207@t S41f7@t)) (let ((S4209@ls/false (S2cae@syntax-dispatch S4207@t '(any any)))) (if (and S4209@ls/false (apply (lambda (S420b@p? S420c@n) (and (eq? (S2d94@syntax->datum S420b@p?) '<=) (S4146@subversion? S420c@n))) S4209@ls/false)) (apply (lambda (S420f@p? S4210@n) (lambda (S4213@x) (<= S4213@x (S2d94@syntax->datum S4210@n)))) S4209@ls/false) (let ((S4215@t S4207@t)) (let ((S4217@ls/false (S2cae@syntax-dispatch S4215@t '(any any)))) (if (and S4217@ls/false (apply (lambda (S4219@p? S421a@n) (and (eq? (S2d94@syntax->datum S4219@p?) '>=) (S4146@subversion? S421a@n))) S4217@ls/false)) (apply (lambda (S421d@p? S421e@n) (lambda (S4221@x) (>= S4221@x (S2d94@syntax->datum S421e@n)))) S4217@ls/false) (let ((S4223@t S4215@t)) (let ((S4225@ls/false (S2cae@syntax-dispatch S4223@t '_))) (if S4225@ls/false (apply (lambda () (S2d8e@syntax-violation 'import '"invalid sub-version spec" S4143@spec S41c7@x*)) S4225@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S4223@t)))))))))))))))))))))))) (set! S414a@version-pred (lambda (S4177@x*) (let ((S4179@t S4177@x*)) (let ((S417b@ls/false (S2cae@syntax-dispatch S4179@t '()))) (if S417b@ls/false (apply (lambda () (lambda (S417d@x) '#t)) S417b@ls/false) (let ((S417f@t S4179@t)) (let ((S4181@ls/false (S2cae@syntax-dispatch S417f@t '(any . each-any)))) (if (and S4181@ls/false (apply (lambda (S4183@c S4184@ver*) (eq? (S2d94@syntax->datum S4183@c) 'and)) S4181@ls/false)) (apply (lambda (S4187@c S4188@ver*) (let ((S418b@p* (map S414a@version-pred S4188@ver*))) (lambda (S418d@x) (for-all (lambda (S418f@p) (S418f@p S418d@x)) S418b@p*)))) S4181@ls/false) (let ((S4191@t S417f@t)) (let ((S4193@ls/false (S2cae@syntax-dispatch S4191@t '(any . each-any)))) (if (and S4193@ls/false (apply (lambda (S4195@c S4196@ver*) (eq? (S2d94@syntax->datum S4195@c) 'or)) S4193@ls/false)) (apply (lambda (S4199@c S419a@ver*) (let ((S419d@p* (map S414a@version-pred S419a@ver*))) (lambda (S419f@x) (exists (lambda (S41a1@p) (S41a1@p S419f@x)) S419d@p*)))) S4193@ls/false) (let ((S41a3@t S4191@t)) (let ((S41a5@ls/false (S2cae@syntax-dispatch S41a3@t '(any any)))) (if (and S41a5@ls/false (apply (lambda (S41a7@c S41a8@ver) (eq? (S2d94@syntax->datum S41a7@c) 'not)) S41a5@ls/false)) (apply (lambda (S41ab@c S41ac@ver) (let ((S41af@p (S414a@version-pred S41ac@ver))) (lambda (S41b1@x) (not (S41af@p S41b1@x))))) S41a5@ls/false) (let ((S41b3@t S41a3@t)) (let ((S41b5@ls/false (S2cae@syntax-dispatch S41b3@t 'each-any))) (if S41b5@ls/false (apply (lambda (S41b7@sub*) (let ((S41b9@p* (map S4148@subversion-pred S41b7@sub*))) (lambda (S41bb@x) (let S41c1@f ((S41bd@p* S41b9@p*) (S41be@x S41bb@x)) (if (null? S41bd@p*) '#t (if (null? S41be@x) '#f (and ((car S41bd@p*) (car S41be@x)) (S41c1@f (cdr S41bd@p*) (cdr S41be@x))))))))) S41b5@ls/false) (let ((S41c3@t S41b3@t)) (let ((S41c5@ls/false (S2cae@syntax-dispatch S41c3@t '_))) (if S41c5@ls/false (apply (lambda () (S2d8e@syntax-violation 'import '"invalid version spec" S4143@spec S4177@x*)) S41c5@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S41c3@t))))))))))))))))))))) (let S414d@f ((S414b@x S4143@spec)) (let ((S414f@t S414b@x)) (let ((S4151@ls/false (S2cae@syntax-dispatch S414f@t '(each-any)))) (if S4151@ls/false (apply (lambda (S4153@version-spec*) (values '() (S414a@version-pred S4153@version-spec*))) S4151@ls/false) (let ((S4155@t S414f@t)) (let ((S4157@ls/false (S2cae@syntax-dispatch S4155@t '(any . any)))) (if (and S4157@ls/false (apply (lambda (S4159@x S415a@x*) (S4078@idsyn? S4159@x)) S4157@ls/false)) (apply (lambda (S415d@x S415e@x*) (call-with-values (lambda () (S414d@f S415e@x*)) (lambda (S4165@S4162 S4166@S4164) (let ((S4169@pred S4166@S4164) (S416a@name S4165@S4162)) (values (cons (S2d94@syntax->datum S415d@x) S416a@name) S4169@pred))))) S4157@ls/false) (let ((S416d@t S4155@t)) (let ((S416f@ls/false (S2cae@syntax-dispatch S416d@t '()))) (if S416f@ls/false (apply (lambda () (values '() (lambda (S4171@x) '#t))) S416f@ls/false) (let ((S4173@t S416d@t)) (let ((S4175@ls/false (S2cae@syntax-dispatch S4173@t '_))) (if S4175@ls/false (apply (lambda () (S2d8e@syntax-violation '#f '"invalid import spec" S4143@spec)) S4175@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S4173@t)))))))))))))))))) (set! S4088@import-library (lambda (S4133@spec*) (call-with-values (lambda () (S4086@parse-library-name S4133@spec*)) (lambda (S4139@S4136 S413a@S4138) (let ((S413d@pred S413a@S4138) (S413e@name S4139@S4136)) (begin (if (null? S413e@name) (S2d8e@syntax-violation 'import '"empty library name" S4133@spec*) (void)) (let ((S4141@lib (S28b6@S26fd@find-library-by-name S413e@name))) (begin (if (not S4141@lib) (S2d8e@syntax-violation 'import '"cannot find library with required name" S413e@name) (void)) (if (not (S413d@pred (S2890@S26b1@library-version S4141@lib))) (S2d8e@syntax-violation 'import '"library does not satisfy version specification" S4133@spec* S4141@lib) (void)) ((S2d1a@imp-collector) S4141@lib) (S2898@S26c1@library-subst S4141@lib))))))))) (set! S408a@get-import (lambda (S40a5@spec) (let ((S40a7@t S40a5@spec)) (let ((S40a9@ls/false (S2cae@syntax-dispatch S40a7@t '(any . each-any)))) (if (and S40a9@ls/false (apply (lambda (S40ab@x S40ac@x*) (not (memq (S2d94@syntax->datum S40ab@x) '(for rename except only prefix library)))) S40a9@ls/false)) (apply (lambda (S40af@x S40b0@x*) (S4088@import-library (cons S40af@x S40b0@x*))) S40a9@ls/false) (let ((S40b3@t S40a7@t)) (let ((S40b5@ls/false (S2cae@syntax-dispatch S40b3@t '(any any . #(each (any any)))))) (if (and S40b5@ls/false (apply (lambda (S40b7@rename S40b8@isp S40b9@old* S40ba@new*) (and (eq? (S2d94@syntax->datum S40b7@rename) 'rename) (for-all S4078@idsyn? S40b9@old*) (for-all S4078@idsyn? S40ba@new*))) S40b5@ls/false)) (apply (lambda (S40bf@rename S40c0@isp S40c1@old* S40c2@new*) (let ((S40c7@subst (S408a@get-import S40c0@isp)) (S40c8@old* (map S2d94@syntax->datum S40c1@old*)) (S40c9@new* (map S2d94@syntax->datum S40c2@new*))) (let ((S40cd@old-label* (S4080@find* S40c8@old* S40c7@subst))) (let ((S40cf@subst (S4082@rem* S40c8@old* S40c7@subst))) (S407c@merge-substs (map cons S40c9@new* S40cd@old-label*) S40cf@subst))))) S40b5@ls/false) (let ((S40d1@t S40b3@t)) (let ((S40d3@ls/false (S2cae@syntax-dispatch S40d1@t '(any any . each-any)))) (if (and S40d3@ls/false (apply (lambda (S40d5@except S40d6@isp S40d7@sym*) (and (eq? (S2d94@syntax->datum S40d5@except) 'except) (for-all S4078@idsyn? S40d7@sym*))) S40d3@ls/false)) (apply (lambda (S40db@except S40dc@isp S40dd@sym*) (let ((S40e1@subst (S408a@get-import S40dc@isp))) (S4082@rem* (map S2d94@syntax->datum S40dd@sym*) S40e1@subst))) S40d3@ls/false) (let ((S40e3@t S40d1@t)) (let ((S40e5@ls/false (S2cae@syntax-dispatch S40e3@t '(any any . each-any)))) (if (and S40e5@ls/false (apply (lambda (S40e7@only S40e8@isp S40e9@sym*) (and (eq? (S2d94@syntax->datum S40e7@only) 'only) (for-all S4078@idsyn? S40e9@sym*))) S40e5@ls/false)) (apply (lambda (S40ed@only S40ee@isp S40ef@sym*) (let ((S40f3@subst (S408a@get-import S40ee@isp)) (S40f4@sym* (map S2d94@syntax->datum S40ef@sym*))) (let ((S40f7@sym* (S4084@remove-dups S40f4@sym*))) (let ((S40f9@lab* (S4080@find* S40f7@sym* S40f3@subst))) (map cons S40f7@sym* S40f9@lab*))))) S40e5@ls/false) (let ((S40fb@t S40e3@t)) (let ((S40fd@ls/false (S2cae@syntax-dispatch S40fb@t '(any any any)))) (if (and S40fd@ls/false (apply (lambda (S40ff@prefix S4100@isp S4101@p) (and (eq? (S2d94@syntax->datum S40ff@prefix) 'prefix) (S4078@idsyn? S4101@p))) S40fd@ls/false)) (apply (lambda (S4105@prefix S4106@isp S4107@p) (let ((S410b@subst (S408a@get-import S4106@isp)) (S410c@prefix (symbol->string (S2d94@syntax->datum S4107@p)))) (map (lambda (S410f@x) (cons (string->symbol (string-append S410c@prefix (symbol->string (car S410f@x)))) (cdr S410f@x))) S410b@subst))) S40fd@ls/false) (let ((S4111@t S40fb@t)) (let ((S4113@ls/false (S2cae@syntax-dispatch S4111@t '(any each-any)))) (if (and S4113@ls/false (apply (lambda (S4115@library S4116@spec*) (eq? (S2d94@syntax->datum S4115@library) 'library)) S4113@ls/false)) (apply (lambda (S4119@library S411a@spec*) (S4088@import-library S411a@spec*)) S4113@ls/false) (let ((S411d@t S4111@t)) (let ((S411f@ls/false (S2cae@syntax-dispatch S411d@t '(any any . any)))) (if (and S411f@ls/false (apply (lambda (S4121@for S4122@isp S4123@rest) (eq? (S2d94@syntax->datum S4121@for) 'for)) S411f@ls/false)) (apply (lambda (S4127@for S4128@isp S4129@rest) (S408a@get-import S4128@isp)) S411f@ls/false) (let ((S412d@t S411d@t)) (let ((S412f@ls/false (S2cae@syntax-dispatch S412d@t 'any))) (if S412f@ls/false (apply (lambda (S4131@spec) (S2d8e@syntax-violation 'import '"invalid import spec" S4131@spec)) S412f@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S412d@t))))))))))))))))))))))))))) (set! S408c@add-imports! (lambda (S4095@imp S4096@h) (let ((S4099@subst (S408a@get-import S4095@imp))) (for-each (lambda (S409b@x) (let ((S409d@name (car S409b@x)) (S409e@label (cdr S409b@x))) (let ((S40a1@t (hashtable-ref S4096@h S409d@name '#f))) (if S40a1@t ((lambda (S40a3@l) (if (not (eq? S40a3@l S409e@label)) (S407a@dup-error S409d@name) (void))) S40a1@t) (hashtable-set! S4096@h S409d@name S409e@label))))) S4099@subst)))) (lambda (S408d@imp*) (let S4093@f ((S408f@imp* S408d@imp*) (S4090@h (make-eq-hashtable))) (if (null? S408f@imp*) (hashtable-entries S4090@h) (begin (S408c@add-imports! (car S408f@imp*) S4090@h) (S4093@f (cdr S408f@imp*) S4090@h)))))))) (set! S47af@S2d10@parse-import-spec* S2d10@parse-import-spec*)) (begin (set! S2d12@make-top-rib (lambda (S4283@names S4284@labels) (let ((S4287@rib (S2a5b@make-empty-rib))) (begin (vector-for-each (lambda (S4289@name S428a@label) (begin (if (not (symbol? S4289@name)) (error 'make-top-rib '"BUG: not a symbol" S4289@name) (void)) (S2a5f@extend-rib/nc! S4287@rib (make-simple-struct 'stx '5 (list S4289@name S2a2b@top-mark* '() '())) S428a@label))) S4283@names S4284@labels) S4287@rib)))) (set! S47b0@S2d12@make-top-rib S2d12@make-top-rib)) (begin (set! S2d14@make-collector (lambda () (let ((S428d@ls '())) (lambda S4291 (let ((S4292 (length S4291))) (if (= S4292 '0) (apply (lambda () S428d@ls) S4291) (if (= S4292 '1) (apply (lambda (S428f@x) (set! S428d@ls (S2a24@set-cons S428f@x S428d@ls))) S4291) (error 'apply '"invalid arg count")))))))) (set! S47b1@S2d14@make-collector S2d14@make-collector)) (begin (set! S2d16@inv-collector (S25f1@S24d0@make-parameter (lambda S4293@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (S4295@x) (begin (if (not (procedure? S4295@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" S4295@x) (void)) S4295@x)))) (set! S47b2@S2d16@inv-collector S2d16@inv-collector)) (begin (set! S2d18@vis-collector (S25f1@S24d0@make-parameter (lambda S4297@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (S4299@x) (begin (if (not (procedure? S4299@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" S4299@x) (void)) S4299@x)))) (set! S47b3@S2d18@vis-collector S2d18@vis-collector)) (begin (set! S2d1a@imp-collector (S25f1@S24d0@make-parameter (lambda S429b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (S429d@x) (begin (if (not (procedure? S429d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" S429d@x) (void)) S429d@x)))) (set! S47b4@S2d1a@imp-collector S2d1a@imp-collector)) (begin (set! S2d1c@chi-library-internal (lambda (S429f@e* S42a0@rib S42a1@top?) (call-with-values (lambda () (S2d06@chi-body* S429f@e* '() '() '() '() '() '() '() S42a0@rib S42a1@top?)) (lambda (S42b5@S42a6 S42b6@S42a8 S42b7@S42aa S42b8@S42ac S42b9@S42ae S42ba@S42b0 S42bb@S42b2 S42bc@S42b4) (let ((S42c5@exp* S42bc@S42b4) (S42c6@_kwd* S42bb@S42b2) (S42c7@mod** S42ba@S42b0) (S42c8@rhs* S42b9@S42ae) (S42c9@lex* S42b8@S42ac) (S42ca@mr S42b7@S42aa) (S42cb@r S42b6@S42a8) (S42cc@e* S42b5@S42a6)) (values (append (apply append (reverse S42c7@mod**)) S42cc@e*) S42cb@r S42ca@mr (reverse S42c9@lex*) (reverse S42c8@rhs*) S42c5@exp*)))))) (set! S47b5@S2d1c@chi-library-internal S2d1c@chi-library-internal)) (begin (set! S2d1e@chi-interaction-expr (lambda (S42d5@e S42d6@rib S42d7@r) (call-with-values (lambda () (S2d06@chi-body* (list S42d5@e) S42d7@r S42d7@r '() '() '() '() '() S42d6@rib '#t)) (lambda (S42eb@S42dc S42ec@S42de S42ed@S42e0 S42ee@S42e2 S42ef@S42e4 S42f0@S42e6 S42f1@S42e8 S42f2@S42ea) (let ((S42fb@_exp* S42f2@S42ea) (S42fc@_kwd* S42f1@S42e8) (S42fd@mod** S42f0@S42e6) (S42fe@rhs* S42ef@S42e4) (S42ff@lex* S42ee@S42e2) (S4300@mr S42ed@S42e0) (S4301@r S42ec@S42de) (S4302@e* S42eb@S42dc)) (let ((S430b@e* (S2cde@expand-interaction-rhs*/init* (reverse S42ff@lex*) (reverse S42fe@rhs*) (append (apply append (reverse S42fd@mod**)) S4302@e*) S4301@r S4300@mr))) (let ((S430d@e (if (null? S430b@e*) (S2a0d@S2968@build-void) (if (null? (cdr S430b@e*)) (car S430b@e*) (S2a0c@S2966@build-sequence '#f S430b@e*))))) (values S430d@e S4301@r)))))))) (set! S47b6@S2d1e@chi-interaction-expr S2d1e@chi-interaction-expr)) (begin (set! S2d20@library-body-expander (lambda (S430f@name S4310@main-exp* S4311@imp* S4312@b* S4313@top?) (let ((S431a@itc '#f)) (begin (set! S431a@itc (S2d14@make-collector)) (let ((S4323@S431c S2d1a@imp-collector) (S4324@S431e S2d9e@top-level-context) (S4325@S4320 S431a@itc) (S4326@S4322 '#f)) (let ((S432b@swap (lambda () (begin (let ((S432d@t (S4323@S431c))) (begin (S4323@S431c S4325@S4320) (set! S4325@S4320 S432d@t))) (let ((S432f@t (S4324@S431e))) (begin (S4324@S431e S4326@S4322) (set! S4326@S4322 S432f@t))))))) (dynamic-wind S432b@swap (lambda () (call-with-values (lambda () (S2d10@parse-import-spec* S4311@imp*)) (lambda (S4335@S4332 S4336@S4334) (let ((S4339@subst-labels S4336@S4334) (S433a@subst-names S4335@S4332)) (let ((S433d@rib (S2d12@make-top-rib S433a@subst-names S4339@subst-labels))) (let ((S4340@wrap '#f)) (begin (set! S4340@wrap (lambda (S43bb@x) (make-simple-struct 'stx '5 (list S43bb@x S2a2b@top-mark* (list S433d@rib) '())))) (let ((S4341@b* (map S4340@wrap S4312@b*)) (S4342@main-exp* (map S4340@wrap S4310@main-exp*)) (S4343@rtc (S2d14@make-collector)) (S4344@vtc (S2d14@make-collector))) (let ((S4351@S434a S2d16@inv-collector) (S4352@S434c S2d18@vis-collector) (S4353@S434e S4343@rtc) (S4354@S4350 S4344@vtc)) (let ((S4359@swap (lambda () (begin (let ((S435b@t (S4351@S434a))) (begin (S4351@S434a S4353@S434e) (set! S4353@S434e S435b@t))) (let ((S435d@t (S4352@S434c))) (begin (S4352@S434c S4354@S4350) (set! S4354@S4350 S435d@t))))))) (dynamic-wind S4359@swap (lambda () (call-with-values (lambda () (S2d1c@chi-library-internal S4341@b* S433d@rib S4313@top?)) (lambda (S436b@S4360 S436c@S4362 S436d@S4364 S436e@S4366 S436f@S4368 S4370@S436a) (let ((S4377@internal-exp* S4370@S436a) (S4378@rhs* S436f@S4368) (S4379@lex* S436e@S4366) (S437a@mr S436d@S4364) (S437b@r S436c@S4362) (S437c@init* S436b@S4360)) (call-with-values (lambda () (S2d0a@parse-exports (append S4342@main-exp* S4377@internal-exp*))) (lambda (S4387@S4384 S4388@S4386) (let ((S438b@exp-id* S4388@S4386) (S438c@exp-name* S4387@S4384)) (begin (S2a63@seal-rib! S433d@rib) (let ((S438f@init* (S2ccc@chi-expr* S437c@init* S437b@r S437a@mr))) (let ((S4391@rhs* (S2ce0@chi-rhs* S4378@rhs* S437b@r S437a@mr))) (begin (S2a65@unseal-rib! S433d@rib) (let ((S4393@loc* (map S2a31@gen-global S4379@lex*)) (S4394@export-subst (S2d78@make-export-subst S438c@exp-name* S438b@exp-id*))) (let ((S4398@errstr '#f)) (begin (set! S4398@errstr '"attempt to export mutated variable") (call-with-values (lambda () (S2d7a@make-export-env/macros S4379@lex* S4393@loc* S437b@r)) (lambda (S439f@S439a S43a0@S439c S43a1@S439e) (let ((S43a5@macro* S43a1@S439e) (S43a6@global* S43a0@S439c) (S43a7@export-env S439f@S439a)) (begin (for-each (lambda (S43ab@s) (let ((S43ad@name (car S43ab@s)) (S43ae@label (cdr S43ab@s))) (let ((S43b1@p (assq S43ae@label S43a7@export-env))) (if S43b1@p (let ((S43b3@b (cdr S43b1@p))) (let ((S43b5@type (car S43b3@b))) (if (eq? S43b5@type 'mutable) (S2d8e@syntax-violation 'export S4398@errstr S43ad@name) (void)))) (void))))) S4394@export-subst) (let ((S43b7@invoke-body (S2a12@S2972@build-library-letrec* '#f S430f@name S4379@lex* S4393@loc* S4391@rhs* (if (null? S438f@init*) (S2a0d@S2968@build-void) (S2a0c@S2966@build-sequence '#f S438f@init*)))) (S43b8@invoke-definitions (map S2a09@S28c5@build-global-define (map cdr S43a6@global*)))) (values (S431a@itc) (S4343@rtc) (S4344@vtc) (S2a0c@S2966@build-sequence '#f (append S43b8@invoke-definitions (list S43b7@invoke-body))) S43a5@macro* S4394@export-subst S43a7@export-env)))))))))))))))))))) S4359@swap))))))))))) S432b@swap))))))) (set! S47b7@S2d20@library-body-expander S2d20@library-body-expander)) (begin (set! S2d22@core-library-expander (lambda (S43bd@e S43be@verify-name) (call-with-values (lambda () (S2d0e@parse-library S43bd@e)) (lambda (S43c9@S43c2 S43ca@S43c4 S43cb@S43c6 S43cc@S43c8) (let ((S43d1@b* S43cc@S43c8) (S43d2@imp* S43cb@S43c6) (S43d3@exp* S43ca@S43c4) (S43d4@name* S43c9@S43c2)) (call-with-values (lambda () (S2d0c@parse-library-name S43d4@name*)) (lambda (S43dd@S43da S43de@S43dc) (let ((S43e1@ver S43de@S43dc) (S43e2@name S43dd@S43da)) (begin (S43be@verify-name S43e2@name) (call-with-values (lambda () (S2d20@library-body-expander S43e2@name S43d3@exp* S43d2@imp* S43d1@b* '#f)) (lambda (S43f3@S43e6 S43f4@S43e8 S43f5@S43ea S43f6@S43ec S43f7@S43ee S43f8@S43f0 S43f9@S43f2) (let ((S4401@export-env S43f9@S43f2) (S4402@export-subst S43f8@S43f0) (S4403@visit-code S43f7@S43ee) (S4404@invoke-code S43f6@S43ec) (S4405@visit-req* S43f5@S43ea) (S4406@invoke-req* S43f4@S43e8) (S4407@imp* S43f3@S43e6)) (values S43e2@name S43e1@ver S4407@imp* S4406@invoke-req* S4405@visit-req* S4404@invoke-code S4403@visit-code S4402@export-subst S4401@export-env))))))))))))) (set! S47b8@S2d22@core-library-expander S2d22@core-library-expander)) (begin (set! S2d24@parse-top-level-program (lambda (S440f@e*) (let ((S4411@t S440f@e*)) (let ((S4413@ls/false (S2cae@syntax-dispatch S4411@t '((any . each-any) . each-any)))) (if (and S4413@ls/false (apply (lambda (S4415@import S4416@imp* S4417@b*) (eq? (S2d94@syntax->datum S4415@import) 'import)) S4413@ls/false)) (apply (lambda (S441b@import S441c@imp* S441d@b*) (values S441c@imp* S441d@b*)) S4413@ls/false) (let ((S4421@t S4411@t)) (let ((S4423@ls/false (S2cae@syntax-dispatch S4421@t '((any . any) . any)))) (if (and S4423@ls/false (apply (lambda (S4425@import S4426@x S4427@y) (eq? (S2d94@syntax->datum S4425@import) 'import)) S4423@ls/false)) (apply (lambda (S442b@import S442c@x S442d@y) (S2d8e@syntax-violation 'expander '"invalid syntax of top-level program" (S2aa1@syntax-car S440f@e*))) S4423@ls/false) (let ((S4431@t S4421@t)) (let ((S4433@ls/false (S2cae@syntax-dispatch S4431@t '_))) (if S4433@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) S4433@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S4431@t)))))))))))) (set! S47b9@S2d24@parse-top-level-program S2d24@parse-top-level-program)) (begin (set! S2d26@top-level-expander (lambda (S4435@e*) (call-with-values (lambda () (S2d24@parse-top-level-program S4435@e*)) (lambda (S443b@S4438 S443c@S443a) (let ((S443f@b* S443c@S443a) (S4440@imp* S443b@S4438)) (call-with-values (lambda () (S2d20@library-body-expander '() '() S4440@imp* S443f@b* '#t)) (lambda (S4451@S4444 S4452@S4446 S4453@S4448 S4454@S444a S4455@S444c S4456@S444e S4457@S4450) (let ((S445f@export-env S4457@S4450) (S4460@export-subst S4456@S444e) (S4461@visit-code S4455@S444c) (S4462@invoke-code S4454@S444a) (S4463@visit-req* S4453@S4448) (S4464@invoke-req* S4452@S4446) (S4465@imp* S4451@S4444)) (values S4464@invoke-req* S4462@invoke-code))))))))) (set! S47ba@S2d26@top-level-expander S2d26@top-level-expander)) (begin (set! S2d28@rp (S25ee@S24ca@make-record-printer 'env (lambda (S446d@x S446e@p S446f@wr) (display '"#<environment>" S446e@p)))) (set! S47bb@S2d28@rp S2d28@rp)) (begin (set! S2d32@env? (lambda (S4473@x) (and (simple-struct? S4473@x) (eq? (simple-struct-name S4473@x) 'env)))) (set! S47bc@S2d32@env? S2d32@env?)) (begin (set! S2d34@env-names (lambda (S4475@x) (simple-struct-ref S4475@x '0))) (set! S47bd@S2d34@env-names S2d34@env-names)) (begin (set! S2d36@set-env-names! (lambda (S4477@x S4478@val) (simple-struct-set! S4477@x '0 S4478@val))) (set! S47be@S2d36@set-env-names! S2d36@set-env-names!)) (begin (set! S2d38@env-labels (lambda (S447b@x) (simple-struct-ref S447b@x '1))) (set! S47bf@S2d38@env-labels S2d38@env-labels)) (begin (set! S2d3a@set-env-labels! (lambda (S447d@x S447e@val) (simple-struct-set! S447d@x '1 S447e@val))) (set! S47c0@S2d3a@set-env-labels! S2d3a@set-env-labels!)) (begin (set! S2d3c@env-itc (lambda (S4481@x) (simple-struct-ref S4481@x '2))) (set! S47c1@S2d3c@env-itc S2d3c@env-itc)) (begin (set! S2d3e@set-env-itc! (lambda (S4483@x S4484@val) (simple-struct-set! S4483@x '2 S4484@val))) (set! S47c2@S2d3e@set-env-itc! S2d3e@set-env-itc!)) (begin (set! S2d40@dummy '3) (set! S47c3@S2d40@dummy S2d40@dummy)) (begin (set! S2d42@rp (S25ee@S24ca@make-record-printer 'interaction-env (lambda (S4487@x S4488@p S4489@wr) (display '"#<environment>" S4488@p)))) (set! S47c4@S2d42@rp S2d42@rp)) (begin (set! S2d4c@interaction-env? (lambda (S448d@x) (and (simple-struct? S448d@x) (eq? (simple-struct-name S448d@x) 'interaction-env)))) (set! S47c5@S2d4c@interaction-env? S2d4c@interaction-env?)) (begin (set! S2d4e@interaction-env-rib (lambda (S448f@x) (simple-struct-ref S448f@x '0))) (set! S47c6@S2d4e@interaction-env-rib S2d4e@interaction-env-rib)) (begin (set! S2d50@set-interaction-env-rib! (lambda (S4491@x S4492@val) (simple-struct-set! S4491@x '0 S4492@val))) (set! S47c7@S2d50@set-interaction-env-rib! S2d50@set-interaction-env-rib!)) (begin (set! S2d52@interaction-env-r (lambda (S4495@x) (simple-struct-ref S4495@x '1))) (set! S47c8@S2d52@interaction-env-r S2d52@interaction-env-r)) (begin (set! S2d54@set-interaction-env-r! (lambda (S4497@x S4498@val) (simple-struct-set! S4497@x '1 S4498@val))) (set! S47c9@S2d54@set-interaction-env-r! S2d54@set-interaction-env-r!)) (begin (set! S2d56@interaction-env-locs (lambda (S449b@x) (simple-struct-ref S449b@x '2))) (set! S47ca@S2d56@interaction-env-locs S2d56@interaction-env-locs)) (begin (set! S2d58@set-interaction-env-locs! (lambda (S449d@x S449e@val) (simple-struct-set! S449d@x '2 S449e@val))) (set! S47cb@S2d58@set-interaction-env-locs! S2d58@set-interaction-env-locs!)) (begin (set! S2d5a@dummy '3) (set! S47cc@S2d5a@dummy S2d5a@dummy)) (begin (set! S2d5c@interaction-environment-symbols (lambda () (S2d64@environment-symbols (S2d9c@interaction-environment)))) (set! S47cd@S2d5c@interaction-environment-symbols S2d5c@interaction-environment-symbols)) (begin (set! S2d5e@environment-bindings (lambda (S44a1@e) (vector->list (vector-map (lambda (S44a3@name S44a4@label) (S2d60@parse-binding (cons S44a3@name (S28bc@S2709@imported-label->binding S44a4@label)))) (S2d34@env-names S44a1@e) (S2d38@env-labels S44a1@e))))) (set! S47ce@S2d5e@environment-bindings S2d5e@environment-bindings)) (begin (set! S2d60@parse-binding (lambda (S44a7@b) (cons (car S44a7@b) (let ((S44a9@t (cadr S44a7@b))) (if (memv S44a9@t '(core-prim global)) 'procedure (if (memv S44a9@t '(core-macro macro global-macro)) 'syntax (if (memv S44a9@t '($core-rtd)) 'record (if (eq? (car S44a7@b) (cadr S44a7@b)) 'syntax 'unknown)))))))) (set! S47cf@S2d60@parse-binding S2d60@parse-binding)) (begin (set! S2d62@environment? (lambda (S44ab@x) (or (S2d32@env? S44ab@x) (S2d4c@interaction-env? S44ab@x)))) (set! S47d0@S2d62@environment? S2d62@environment?)) (begin (set! S2d64@environment-symbols (lambda (S44ad@x) (if (S2d32@env? S44ad@x) (vector->list (S2d34@env-names S44ad@x)) (if (S2d4c@interaction-env? S44ad@x) (map values (S2a45@rib-sym* (S2d4e@interaction-env-rib S44ad@x))) (assertion-violation 'environment-symbols '"not an environment" S44ad@x))))) (set! S47d1@S2d64@environment-symbols S2d64@environment-symbols)) (begin (set! S2d66@environment (lambda S44af@imp* (let ((S44b1@itc (S2d14@make-collector))) (let ((S44b7@S44b4 S2d1a@imp-collector) (S44b8@S44b6 S44b1@itc)) (let ((S44bb@swap (lambda () (let ((S44bd@t (S44b7@S44b4))) (begin (S44b7@S44b4 S44b8@S44b6) (set! S44b8@S44b6 S44bd@t)))))) (dynamic-wind S44bb@swap (lambda () (call-with-values (lambda () (S2d10@parse-import-spec* S44af@imp*)) (lambda (S44c3@S44c0 S44c4@S44c2) (let ((S44c7@subst-labels S44c4@S44c2) (S44c8@subst-names S44c3@S44c0)) (make-simple-struct 'env '4 (list S44c8@subst-names S44c7@subst-labels S44b1@itc)))))) S44bb@swap)))))) (set! S47d2@S2d66@environment S2d66@environment)) (begin (set! S2d68@null-environment (lambda (S44cb@n) (begin (if (not (eqv? S44cb@n '5)) (assertion-violation 'null-environment '"not 5" S44cb@n) (void)) (S2d66@environment '(psyntax null-environment-5))))) (set! S47d3@S2d68@null-environment S2d68@null-environment)) (begin (set! S2d6a@scheme-report-environment (lambda (S44cd@n) (begin (if (not (eqv? S44cd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" S44cd@n) (void)) (S2d66@environment '(psyntax scheme-report-environment-5))))) (set! S47d4@S2d6a@scheme-report-environment S2d6a@scheme-report-environment)) (begin (set! S2d6c@expand (lambda (S44cf@x S44d0@env) (if (S2d32@env? S44d0@env) (let ((S44d3@rib (S2d12@make-top-rib (S2d34@env-names S44d0@env) (S2d38@env-labels S44d0@env)))) (let ((S44d5@x (make-simple-struct 'stx '5 (list S44cf@x S2a2b@top-mark* (list S44d3@rib) '()))) (S44d6@itc (S2d3c@env-itc S44d0@env)) (S44d7@rtc (S2d14@make-collector)) (S44d8@vtc (S2d14@make-collector))) (let ((S44dd@x (let ((S44ef@S44e0 S2d9e@top-level-context) (S44f0@S44e2 S2d16@inv-collector) (S44f1@S44e4 S2d18@vis-collector) (S44f2@S44e6 S2d1a@imp-collector) (S44f3@S44e8 '#f) (S44f4@S44ea S44d7@rtc) (S44f5@S44ec S44d8@vtc) (S44f6@S44ee S44d6@itc)) (let ((S44ff@swap (lambda () (begin (let ((S4501@t (S44ef@S44e0))) (begin (S44ef@S44e0 S44f3@S44e8) (set! S44f3@S44e8 S4501@t))) (let ((S4503@t (S44f0@S44e2))) (begin (S44f0@S44e2 S44f4@S44ea) (set! S44f4@S44ea S4503@t))) (let ((S4505@t (S44f1@S44e4))) (begin (S44f1@S44e4 S44f5@S44ec) (set! S44f5@S44ec S4505@t))) (let ((S4507@t (S44f2@S44e6))) (begin (S44f2@S44e6 S44f6@S44ee) (set! S44f6@S44ee S4507@t))))))) (dynamic-wind S44ff@swap (lambda () (S2cd0@chi-expr S44d5@x '() '())) S44ff@swap))))) (begin (S2a63@seal-rib! S44d3@rib) (values S44dd@x (S44d7@rtc)))))) (if (S2d4c@interaction-env? S44d0@env) (let ((S4509@rib (S2d4e@interaction-env-rib S44d0@env)) (S450a@r (S2d52@interaction-env-r S44d0@env)) (S450b@rtc (S2d14@make-collector))) (let ((S450f@x (make-simple-struct 'stx '5 (list S44cf@x S2a2b@top-mark* (list S4509@rib) '())))) (call-with-values (lambda () (let ((S4525@S4516 S2d9e@top-level-context) (S4526@S4518 S2d16@inv-collector) (S4527@S451a S2d18@vis-collector) (S4528@S451c S2d1a@imp-collector) (S4529@S451e S44d0@env) (S452a@S4520 S450b@rtc) (S452b@S4522 (S2d14@make-collector)) (S452c@S4524 (S2d14@make-collector))) (let ((S4535@swap (lambda () (begin (let ((S4537@t (S4525@S4516))) (begin (S4525@S4516 S4529@S451e) (set! S4529@S451e S4537@t))) (let ((S4539@t (S4526@S4518))) (begin (S4526@S4518 S452a@S4520) (set! S452a@S4520 S4539@t))) (let ((S453b@t (S4527@S451a))) (begin (S4527@S451a S452b@S4522) (set! S452b@S4522 S453b@t))) (let ((S453d@t (S4528@S451c))) (begin (S4528@S451c S452c@S4524) (set! S452c@S4524 S453d@t))))))) (dynamic-wind S4535@swap (lambda () (S2d1e@chi-interaction-expr S450f@x S4509@rib S450a@r)) S4535@swap)))) (lambda (S453f@S4512 S4540@S4514) (let ((S4543@r^ S4540@S4514) (S4544@e S453f@S4512)) (begin (S2d54@set-interaction-env-r! S44d0@env S4543@r^) (values S4544@e (S450b@rtc)))))))) (assertion-violation 'expand '"not an environment" S44d0@env))))) (set! S47d5@S2d6c@expand S2d6c@expand)) (begin (set! S2d6e@eval (lambda (S4547@x S4548@env) (begin (if (not (S2d62@environment? S4548@env)) (error 'eval '"not an environment" S4548@env) (void)) (call-with-values (lambda () (S2d6c@expand S4547@x S4548@env)) (lambda (S454f@S454c S4550@S454e) (let ((S4553@invoke-req* S4550@S454e) (S4554@x S454f@S454c)) (begin (for-each S28bd@S270b@invoke-library S4553@invoke-req*) (eval-core (S2647@S25ff@expanded->core S4554@x))))))))) (set! S47d6@S2d6e@eval S2d6e@eval)) (begin (set! S2d70@library-expander (lambda S45c5 (let ((S45c6 (length S45c5))) (if (= S45c6 '3) (apply (lambda (S4557@x S4558@filename S4559@verify-name) (let ((S455e@build-visit-code '#f) (S4560@visit! '#f)) (begin (set! S455e@build-visit-code (lambda (S45b3@macro*) (if (null? S45b3@macro*) (S2a0d@S2968@build-void) (S2a0c@S2966@build-sequence '#f (map (lambda (S45b5@x) (let ((S45b7@loc (car S45b5@x)) (S45b8@src (cddr S45b5@x))) (list 'set! S45b7@loc S45b8@src))) S45b3@macro*))))) (set! S4560@visit! (lambda (S45ab@macro*) (for-each (lambda (S45ad@x) (let ((S45af@loc (car S45ad@x)) (S45b0@proc (cadr S45ad@x))) (set-symbol-value! S45af@loc S45b0@proc))) S45ab@macro*))) (call-with-values (lambda () (S2d22@core-library-expander S4557@x S4559@verify-name)) (lambda (S4573@S4562 S4574@S4564 S4575@S4566 S4576@S4568 S4577@S456a S4578@S456c S4579@S456e S457a@S4570 S457b@S4572) (let ((S4585@export-env S457b@S4572) (S4586@export-subst S457a@S4570) (S4587@macro* S4579@S456e) (S4588@invoke-code S4578@S456c) (S4589@vis* S4577@S456a) (S458a@inv* S4576@S4568) (S458b@imp* S4575@S4566) (S458c@ver S4574@S4564) (S458d@name S4573@S4562)) (let ((S4597@id (gensym)) (S4598@name S458d@name) (S4599@ver S458c@ver) (S459a@imp* (map S28c1@S2713@library-spec S458b@imp*)) (S459b@vis* (map S28c1@S2713@library-spec S4589@vis*)) (S459c@inv* (map S28c1@S2713@library-spec S458a@inv*)) (S459d@visit-proc (lambda () (S4560@visit! S4587@macro*))) (S459e@invoke-proc (lambda () (eval-core (S2647@S25ff@expanded->core S4588@invoke-code)))) (S459f@visit-code (S455e@build-visit-code S4587@macro*)) (S45a0@invoke-code S4588@invoke-code)) (begin (S28bb@S2707@install-library S4597@id S4598@name S4599@ver S459a@imp* S459b@vis* S459c@inv* S4586@export-subst S4585@export-env S459d@visit-proc S459e@invoke-proc S459f@visit-code S45a0@invoke-code '#t S4558@filename) (values S4597@id S4598@name S4599@ver S459a@imp* S459b@vis* S459c@inv* S45a0@invoke-code S459f@visit-code S4586@export-subst S4585@export-env))))))))) S45c5) (if (= S45c6 '2) (apply (lambda (S45bb@x S45bc@filename) (S2d70@library-expander S45bb@x S45bc@filename (lambda (S45bf@x) (values)))) S45c5) (if (= S45c6 '1) (apply (lambda (S45c1@x) (S2d70@library-expander S45c1@x '#f (lambda (S45c3@x) (values)))) S45c5) (error 'apply '"invalid arg count"))))))) (set! S47d7@S2d70@library-expander S2d70@library-expander)) (begin (set! S2d72@boot-library-expand (lambda (S45c7@x) (call-with-values (lambda () (S2d70@library-expander S45c7@x)) (lambda (S45dd@S45ca S45de@S45cc S45df@S45ce S45e0@S45d0 S45e1@S45d2 S45e2@S45d4 S45e3@S45d6 S45e4@S45d8 S45e5@S45da S45e6@S45dc) (let ((S45f1@export-env S45e6@S45dc) (S45f2@export-subst S45e5@S45da) (S45f3@visit-code S45e4@S45d8) (S45f4@invoke-code S45e3@S45d6) (S45f5@inv* S45e2@S45d4) (S45f6@vis* S45e1@S45d2) (S45f7@imp* S45e0@S45d0) (S45f8@ver S45df@S45ce) (S45f9@name S45de@S45cc) (S45fa@id S45dd@S45ca)) (values S45f9@name S45f4@invoke-code S45f2@export-subst S45f1@export-env)))))) (set! S47d8@S2d72@boot-library-expand S2d72@boot-library-expand)) (begin (set! S2d74@rev-map-append (lambda (S4605@f S4606@ls S4607@ac) (if (null? S4606@ls) S4607@ac (S2d74@rev-map-append S4605@f (cdr S4606@ls) (cons (S4605@f (car S4606@ls)) S4607@ac))))) (set! S47d9@S2d74@rev-map-append S2d74@rev-map-append)) (begin (set! S2d76@build-exports (lambda (S460b@lex*+loc* S460c@init*) (S2a0c@S2966@build-sequence '#f (cons (S2a0d@S2968@build-void) (S2d74@rev-map-append (lambda (S460f@x) (list 'set! (cdr S460f@x) (car S460f@x))) S460b@lex*+loc* S460c@init*))))) (set! S47da@S2d76@build-exports S2d76@build-exports)) (begin (set! S2d78@make-export-subst (lambda (S4611@name* S4612@id*) (map (lambda (S4615@name S4616@id) (let ((S4619@label (S2abd@id->label S4616@id))) (begin (if (not S4619@label) (S2d8e@syntax-violation '#f '"cannot export unbound identifier" S4616@id) (void)) (cons S4615@name S4619@label)))) S4611@name* S4612@id*))) (set! S47db@S2d78@make-export-subst S2d78@make-export-subst)) (begin (set! S2d7a@make-export-env/macros (lambda (S461b@lex* S461c@loc* S461d@r) (let ((S4622@lookup '#f)) (begin (set! S4622@lookup (lambda (S463f@x) (let S4647@f ((S4641@x S463f@x) (S4642@lex* S461b@lex*) (S4643@loc* S461c@loc*)) (if (pair? S4642@lex*) (if (eq? S4641@x (car S4642@lex*)) (car S4643@loc*) (S4647@f S4641@x (cdr S4642@lex*) (cdr S4643@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let S462b@f ((S4623@r S461d@r) (S4624@env '()) (S4625@global* '()) (S4626@macro* '())) (if (null? S4623@r) (values S4624@env S4625@global* S4626@macro*) (let ((S462d@x (car S4623@r))) (let ((S462f@label (car S462d@x)) (S4630@b (cdr S462d@x))) (let ((S4633@t (S2ac3@binding-type S4630@b))) (if (memv S4633@t '(lexical)) (let ((S4635@v (S2ac5@binding-value S4630@b))) (let ((S4637@loc (S4622@lookup (S2c38@lexical-var S4635@v))) (S4638@type (if (S2c3a@lexical-mutable? S4635@v) 'mutable 'global))) (S462b@f (cdr S4623@r) (cons (cons* S462f@label S4638@type S4637@loc) S4624@env) (cons (cons (S2c38@lexical-var S4635@v) S4637@loc) S4625@global*) S4626@macro*))) (if (memv S4633@t '(local-macro)) (let ((S463b@loc (gensym))) (S462b@f (cdr S4623@r) (cons (cons* S462f@label 'global-macro S463b@loc) S4624@env) S4625@global* (cons (cons S463b@loc (S2ac5@binding-value S4630@b)) S4626@macro*))) (if (memv S4633@t '(local-macro!)) (let ((S463d@loc (gensym))) (S462b@f (cdr S4623@r) (cons (cons* S462f@label 'global-macro! S463d@loc) S4624@env) S4625@global* (cons (cons S463d@loc (S2ac5@binding-value S4630@b)) S4626@macro*))) (if (memv S4633@t '($rtd $module)) (S462b@f (cdr S4623@r) (cons S462d@x S4624@env) S4625@global* S4626@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (S2ac3@binding-type S4630@b) (S2ac5@binding-value S4630@b))))))))))))))) (set! S47dc@S2d7a@make-export-env/macros S2d7a@make-export-env/macros)) (begin (set! S2d7c@generate-temporaries (lambda (S4649@ls) (let ((S464b@t S4649@ls)) (let ((S464d@ls/false (S2cae@syntax-dispatch S464b@t 'each-any))) (if S464d@ls/false (apply (lambda (S464f@ls) (map (lambda (S4651@x) (make-simple-struct 'stx '5 (list (let ((S4653@x (S2d94@syntax->datum S4651@x))) (if (or (symbol? S4653@x) (string? S4653@x)) (gensym S4653@x) (gensym 't))) S2a2b@top-mark* '() '()))) S464f@ls)) S464d@ls/false) (let ((S4655@t S464b@t)) (let ((S4657@ls/false (S2cae@syntax-dispatch S4655@t '_))) (if S4657@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) S4657@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S4655@t))))))))) (set! S47dd@S2d7c@generate-temporaries S2d7c@generate-temporaries)) (begin (set! S2d7e@free-identifier=? (lambda (S4659@x S465a@y) (if (S2aa7@id? S4659@x) (if (S2aa7@id? S465a@y) (S2aad@free-id=? S4659@x S465a@y) (assertion-violation 'free-identifier=? '"not an identifier" S465a@y)) (assertion-violation 'free-identifier=? '"not an identifier" S4659@x)))) (set! S47de@S2d7e@free-identifier=? S2d7e@free-identifier=?)) (begin (set! S2d80@bound-identifier=? (lambda (S465d@x S465e@y) (if (S2aa7@id? S465d@x) (if (S2aa7@id? S465e@y) (S2aab@bound-id=? S465d@x S465e@y) (assertion-violation 'bound-identifier=? '"not an identifier" S465e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" S465d@x)))) (set! S47df@S2d80@bound-identifier=? S2d80@bound-identifier=?)) (begin (set! S2d82@make-source-condition (lambda (S4661@x) (let ((S466b@S4666 '#f) (S466d@S4668 '#f) (S466f@S4667 '#f) (S4672@S4665 '#f) (S4674@make-source-condition '#f) (S4676@S4663 '#f) (S4678@S4664 '#f) (S467a@source-condition? '#f) (S467c@source-filename '#f) (S467e@source-character '#f)) (begin (set! S466b@S4666 (make-record-type-descriptor '&source-information S4ac1@S4808@&condition-rtd 'S4669 '#f '#f '#((immutable file-name) (immutable character)))) (set! S466d@S4668 '#f) (set! S466f@S4667 (make-record-constructor-descriptor S466b@S4666 S4ac2@S480a@&condition-rcd S466d@S4668)) (set! S4672@S4665 (record-predicate S466b@S4666)) (set! S4674@make-source-condition (record-constructor S466f@S4667)) (set! S4676@S4663 (record-accessor S466b@S4666 '0)) (set! S4678@S4664 (record-accessor S466b@S4666 '1)) (set! S467a@source-condition? (condition-predicate S466b@S4666)) (set! S467c@source-filename (condition-accessor S466b@S4666 S4676@S4663)) (set! S467e@source-character (condition-accessor S466b@S4666 S4678@S4664)) (if (pair? S4661@x) (S4674@make-source-condition (car S4661@x) (cdr S4661@x)) (condition)))))) (set! S47e0@S2d82@make-source-condition S2d82@make-source-condition)) (begin (set! S2d84@extract-position-condition (lambda (S467f@x) (S2d82@make-source-condition (S2d86@expression-position S467f@x)))) (set! S47e1@S2d84@extract-position-condition S2d84@extract-position-condition)) (begin (set! S2d86@expression-position (lambda (S4681@x) (and (S2a73@stx? S4681@x) (let ((S4683@x (S2a75@stx-expr S4681@x))) (and (S25e6@S24ba@annotation? S4683@x) (S25e7@S24bc@annotation-source S4683@x)))))) (set! S47e2@S2d86@expression-position S2d86@expression-position)) (begin (set! S2d88@assertion-error (lambda (S4685@expr S4686@pos) (raise (condition (S4af1@S48cc@make-assertion-violation) (S4b03@S48fe@make-who-condition 'assert) (S4ac7@S485f@make-message-condition '"assertion failed") (S4af9@S48e3@make-irritants-condition (list S4685@expr)) (S2d82@make-source-condition S4686@pos))))) (set! S47e3@S2d88@assertion-error S2d88@assertion-error)) (begin (set! S2d8a@syntax-error (lambda (S4689@x . S468b@args) (begin (if (not (for-all string? S468b@args)) (assertion-violation 'syntax-error '"invalid argument" S468b@args) (void)) (raise (condition (S4ac7@S485f@make-message-condition (if (null? S468b@args) '"invalid syntax" (apply string-append S468b@args))) (S4b25@S495a@make-syntax-violation (S2d94@syntax->datum S4689@x) '#f) (S2d84@extract-position-condition S4689@x)))))) (set! S47e4@S2d8a@syntax-error S2d8a@syntax-error)) (begin (set! S2d8c@syntax-violation* (lambda (S468d@who S468e@msg S468f@form S4690@condition-object) (begin (if (not (string? S468e@msg)) (assertion-violation 'syntax-violation '"message is not a string" S468e@msg) (void)) (let ((S4695@who (if (or (string? S468d@who) (symbol? S468d@who)) S468d@who (if (not S468d@who) (let ((S4697@t S468f@form)) (let ((S4699@ls/false (S2cae@syntax-dispatch S4697@t 'any))) (if (and S4699@ls/false (apply (lambda (S469b@id) (S2aa7@id? S469b@id)) S4699@ls/false)) (apply (lambda (S469d@id) (S2d94@syntax->datum S469d@id)) S4699@ls/false) (let ((S469f@t S4697@t)) (let ((S46a1@ls/false (S2cae@syntax-dispatch S469f@t '(any . any)))) (if (and S46a1@ls/false (apply (lambda (S46a3@id S46a4@rest) (S2aa7@id? S46a3@id)) S46a1@ls/false)) (apply (lambda (S46a7@id S46a8@rest) (S2d94@syntax->datum S46a7@id)) S46a1@ls/false) (let ((S46ab@t S469f@t)) (let ((S46ad@ls/false (S2cae@syntax-dispatch S46ab@t '_))) (if S46ad@ls/false (apply (lambda () '#f) S46ad@ls/false) (S2d8e@syntax-violation '#f '"invalid syntax" S46ab@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" S468d@who))))) (raise (condition (if S4695@who (S4b03@S48fe@make-who-condition S4695@who) (condition)) (S4ac7@S485f@make-message-condition S468e@msg) S4690@condition-object (S2d84@extract-position-condition S468f@form))))))) (set! S47e5@S2d8c@syntax-violation* S2d8c@syntax-violation*)) (begin (set! S2d8e@syntax-violation (lambda S46bd (let ((S46be (length S46bd))) (if (= S46be '3) (apply (lambda (S46af@who S46b0@msg S46b1@form) (S2d8e@syntax-violation S46af@who S46b0@msg S46b1@form '#f)) S46bd) (if (= S46be '4) (apply (lambda (S46b5@who S46b6@msg S46b7@form S46b8@subform) (S2d8c@syntax-violation* S46b5@who S46b6@msg S46b7@form (S4b25@S495a@make-syntax-violation (S2d94@syntax->datum S46b7@form) (S2d94@syntax->datum S46b8@subform)))) S46bd) (error 'apply '"invalid arg count")))))) (set! S47e6@S2d8e@syntax-violation S2d8e@syntax-violation)) (begin (set! S2d90@identifier? (lambda (S46bf@x) (S2aa7@id? S46bf@x))) (set! S47e7@S2d90@identifier? S2d90@identifier?)) (begin (set! S2d92@datum->syntax (lambda (S46c1@id S46c2@datum) (if (S2aa7@id? S46c1@id) (S2a87@datum->stx S46c1@id S46c2@datum) (assertion-violation 'datum->syntax '"not an identifier" S46c1@id)))) (set! S47e8@S2d92@datum->syntax S2d92@datum->syntax)) (begin (set! S2d94@syntax->datum (lambda (S46c5@x) (S2abb@stx->datum S46c5@x))) (set! S47e9@S2d94@syntax->datum S2d94@syntax->datum)) (begin (set! S2d96@ungensym-all (lambda (S46c7@code) (if (pair? S46c7@code) (cons (S2d96@ungensym-all (car S46c7@code)) (S2d96@ungensym-all (cdr S46c7@code))) (if (symbol? S46c7@code) (ungensym S46c7@code) S46c7@code)))) (set! S47ea@S2d96@ungensym-all S2d96@ungensym-all)) (begin (set! S2d98@compile-r6rs-top-level (lambda (S46c9@x*) (call-with-values (lambda () (S2d26@top-level-expander S46c9@x*)) (lambda (S46cf@S46cc S46d0@S46ce) (let ((S46d3@invoke-code S46d0@S46ce) (S46d4@lib* S46cf@S46cc)) (lambda () (begin (for-each S28bd@S270b@invoke-library S46d4@lib*) (let ((S46d7@expanded (S2647@S25ff@expanded->core S46d3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (S2d96@ungensym-all S46d7@expanded)) (void)) (eval-core S46d7@expanded)))))))))) (set! S47eb@S2d98@compile-r6rs-top-level S2d98@compile-r6rs-top-level)) (begin (set! S2d9a@pre-compile-r6rs-top-level (lambda (S46d9@x*) (call-with-values (lambda () (S2d26@top-level-expander S46d9@x*)) (lambda (S46df@S46dc S46e0@S46de) (let ((S46e3@invoke-code S46e0@S46de) (S46e4@lib* S46df@S46dc)) (begin (for-each S28bd@S270b@invoke-library S46e4@lib*) (S25ef@S24cc@compile-core (S2647@S25ff@expanded->core S46e3@invoke-code)))))))) (set! S47ec@S2d9a@pre-compile-r6rs-top-level S2d9a@pre-compile-r6rs-top-level)) (begin (set! S2d9c@interaction-environment (let ((S46e7@the-env '#f)) (lambda () (or S46e7@the-env (let ((S46e9@lib (S28b6@S26fd@find-library-by-name '(mosh interaction))) (S46ea@rib (S2a5b@make-empty-rib))) (begin (let ((S46ed@subst (S2898@S26c1@library-subst S46e9@lib))) (begin (S2a47@set-rib-sym*! S46ea@rib (map car S46ed@subst)) (S2a4b@set-rib-mark**! S46ea@rib (map (lambda (S46ef@x) S2a2b@top-mark*) S46ed@subst)) (S2a4f@set-rib-label*! S46ea@rib (map cdr S46ed@subst)))) (let ((S46f1@env (make-simple-struct 'interaction-env '4 (list S46ea@rib '() '())))) (begin (set! S46e7@the-env S46f1@env) S46f1@env)))))))) (set! S47ed@S2d9c@interaction-environment S2d9c@interaction-environment)) (begin (set! S2d9e@top-level-context (S25f1@S24d0@make-parameter '#f)) (set! S47ee@S2d9e@top-level-context S2d9e@top-level-context)) (S28b3@S26f7@current-library-expander S2d70@library-expander))
(begin (set! S47fd@S47f8 (unspecified)) (set! S47ff@S47fa (unspecified)) (set! S4801@S47f9 (unspecified)) (set! S4804@&condition? (unspecified)) (set! S4806@make-&condition (unspecified)) (set! S4808@&condition-rtd (unspecified)) (set! S480a@&condition-rcd (unspecified)) (set! S4856@S4851 (unspecified)) (set! S4858@S4853 (unspecified)) (set! S485a@S4852 (unspecified)) (set! S485d@p? (unspecified)) (set! S485f@make-message-condition (unspecified)) (set! S4861@S4850 (unspecified)) (set! S4863@message-condition? (unspecified)) (set! S4865@condition-message (unspecified)) (set! S4867@&message-rtd (unspecified)) (set! S4869@&message-rcd (unspecified)) (set! S486f@S486a (unspecified)) (set! S4871@S486c (unspecified)) (set! S4873@S486b (unspecified)) (set! S4876@p? (unspecified)) (set! S4878@make-warning (unspecified)) (set! S487a@warning? (unspecified)) (set! S487c@&warning-rtd (unspecified)) (set! S487e@&warning-rcd (unspecified)) (set! S4884@S487f (unspecified)) (set! S4886@S4881 (unspecified)) (set! S4888@S4880 (unspecified)) (set! S488b@p? (unspecified)) (set! S488d@make-serious-condition (unspecified)) (set! S488f@serious-condition? (unspecified)) (set! S4891@&serious-rtd (unspecified)) (set! S4893@&serious-rcd (unspecified)) (set! S4899@S4894 (unspecified)) (set! S489b@S4896 (unspecified)) (set! S489d@S4895 (unspecified)) (set! S48a0@p? (unspecified)) (set! S48a2@make-error (unspecified)) (set! S48a4@error? (unspecified)) (set! S48a6@&error-rtd (unspecified)) (set! S48a8@&error-rcd (unspecified)) (set! S48ae@S48a9 (unspecified)) (set! S48b0@S48ab (unspecified)) (set! S48b2@S48aa (unspecified)) (set! S48b5@p? (unspecified)) (set! S48b7@make-violation (unspecified)) (set! S48b9@violation? (unspecified)) (set! S48bb@&violation-rtd (unspecified)) (set! S48bd@&violation-rcd (unspecified)) (set! S48c3@S48be (unspecified)) (set! S48c5@S48c0 (unspecified)) (set! S48c7@S48bf (unspecified)) (set! S48ca@p? (unspecified)) (set! S48cc@make-assertion-violation (unspecified)) (set! S48ce@assertion-violation? (unspecified)) (set! S48d0@&assertion-rtd (unspecified)) (set! S48d2@&assertion-rcd (unspecified)) (set! S48da@S48d5 (unspecified)) (set! S48dc@S48d7 (unspecified)) (set! S48de@S48d6 (unspecified)) (set! S48e1@p? (unspecified)) (set! S48e3@make-irritants-condition (unspecified)) (set! S48e5@S48d4 (unspecified)) (set! S48e7@irritants-condition? (unspecified)) (set! S48e9@condition-irritants (unspecified)) (set! S48eb@&irritants-rtd (unspecified)) (set! S48ed@&irritants-rcd (unspecified)) (set! S48f5@S48f0 (unspecified)) (set! S48f7@S48f2 (unspecified)) (set! S48f9@S48f1 (unspecified)) (set! S48fc@p? (unspecified)) (set! S48fe@make-who-condition (unspecified)) (set! S4900@S48ef (unspecified)) (set! S4902@who-condition? (unspecified)) (set! S4904@condition-who (unspecified)) (set! S4906@&who-rtd (unspecified)) (set! S4908@&who-rcd (unspecified)) (set! S490e@S4909 (unspecified)) (set! S4910@S490b (unspecified)) (set! S4912@S490a (unspecified)) (set! S4915@p? (unspecified)) (set! S4917@make-non-continuable-violation (unspecified)) (set! S4919@non-continuable-violation? (unspecified)) (set! S491b@&non-continuable-rtd (unspecified)) (set! S491d@&non-continuable-rcd (unspecified)) (set! S4923@S491e (unspecified)) (set! S4925@S4920 (unspecified)) (set! S4927@S491f (unspecified)) (set! S492a@p? (unspecified)) (set! S492c@make-implementation-restriction-violation (unspecified)) (set! S492e@implementation-restriction-violation? (unspecified)) (set! S4930@&implementation-restriction-rtd (unspecified)) (set! S4932@&implementation-restriction-rcd (unspecified)) (set! S4938@S4933 (unspecified)) (set! S493a@S4935 (unspecified)) (set! S493c@S4934 (unspecified)) (set! S493f@p? (unspecified)) (set! S4941@make-lexical-violation (unspecified)) (set! S4943@lexical-violation? (unspecified)) (set! S4945@&lexical-rtd (unspecified)) (set! S4947@&lexical-rcd (unspecified)) (set! S4951@S494c (unspecified)) (set! S4953@S494e (unspecified)) (set! S4955@S494d (unspecified)) (set! S4958@p? (unspecified)) (set! S495a@make-syntax-violation (unspecified)) (set! S495c@S4949 (unspecified)) (set! S495e@S494b (unspecified)) (set! S4960@syntax-violation? (unspecified)) (set! S4962@syntax-violation-form (unspecified)) (set! S4964@syntax-violation-subform (unspecified)) (set! S4966@&syntax-rtd (unspecified)) (set! S4968@&syntax-rcd (unspecified)) (set! S496e@S4969 (unspecified)) (set! S4970@S496b (unspecified)) (set! S4972@S496a (unspecified)) (set! S4975@p? (unspecified)) (set! S4977@make-undefined-violation (unspecified)) (set! S4979@undefined-violation? (unspecified)) (set! S497b@&undefined-rtd (unspecified)) (set! S497d@&undefined-rcd (unspecified)) (set! S4983@S497e (unspecified)) (set! S4985@S4980 (unspecified)) (set! S4987@S497f (unspecified)) (set! S498a@p? (unspecified)) (set! S498c@make-i/o-error (unspecified)) (set! S498e@i/o-error? (unspecified)) (set! S4990@&i/o-rtd (unspecified)) (set! S4992@&i/o-rcd (unspecified)) (set! S4998@S4993 (unspecified)) (set! S499a@S4995 (unspecified)) (set! S499c@S4994 (unspecified)) (set! S499f@p? (unspecified)) (set! S49a1@make-i/o-read-error (unspecified)) (set! S49a3@i/o-read-error? (unspecified)) (set! S49a5@&i/o-read-rtd (unspecified)) (set! S49a7@&i/o-read-rcd (unspecified)) (set! S49ad@S49a8 (unspecified)) (set! S49af@S49aa (unspecified)) (set! S49b1@S49a9 (unspecified)) (set! S49b4@p? (unspecified)) (set! S49b6@make-i/o-write-error (unspecified)) (set! S49b8@i/o-write-error? (unspecified)) (set! S49ba@&i/o-write-rtd (unspecified)) (set! S49bc@&i/o-write-rcd (unspecified)) (set! S49c4@S49bf (unspecified)) (set! S49c6@S49c1 (unspecified)) (set! S49c8@S49c0 (unspecified)) (set! S49cb@p? (unspecified)) (set! S49cd@make-i/o-invalid-position-error (unspecified)) (set! S49cf@S49be (unspecified)) (set! S49d1@i/o-invalid-position-error? (unspecified)) (set! S49d3@i/o-error-position (unspecified)) (set! S49d5@&i/o-invalid-position-rtd (unspecified)) (set! S49d7@&i/o-invalid-position-rcd (unspecified)) (set! S49df@S49da (unspecified)) (set! S49e1@S49dc (unspecified)) (set! S49e3@S49db (unspecified)) (set! S49e6@p? (unspecified)) (set! S49e8@make-i/o-filename-error (unspecified)) (set! S49ea@S49d9 (unspecified)) (set! S49ec@i/o-filename-error? (unspecified)) (set! S49ee@i/o-error-filename (unspecified)) (set! S49f0@&i/o-filename-rtd (unspecified)) (set! S49f2@&i/o-filename-rcd (unspecified)) (set! S49f8@S49f3 (unspecified)) (set! S49fa@S49f5 (unspecified)) (set! S49fc@S49f4 (unspecified)) (set! S49ff@p? (unspecified)) (set! S4a01@make-i/o-file-protection-error (unspecified)) (set! S4a03@i/o-file-protection-error? (unspecified)) (set! S4a05@&i/o-file-protection-rtd (unspecified)) (set! S4a07@&i/o-file-protection-rcd (unspecified)) (set! S4a0d@S4a08 (unspecified)) (set! S4a0f@S4a0a (unspecified)) (set! S4a11@S4a09 (unspecified)) (set! S4a14@p? (unspecified)) (set! S4a16@make-i/o-file-is-read-only-error (unspecified)) (set! S4a18@i/o-file-is-read-only-error? (unspecified)) (set! S4a1a@&i/o-file-is-read-only-rtd (unspecified)) (set! S4a1c@&i/o-file-is-read-only-rcd (unspecified)) (set! S4a22@S4a1d (unspecified)) (set! S4a24@S4a1f (unspecified)) (set! S4a26@S4a1e (unspecified)) (set! S4a29@p? (unspecified)) (set! S4a2b@make-i/o-file-already-exists-error (unspecified)) (set! S4a2d@i/o-file-already-exists-error? (unspecified)) (set! S4a2f@&i/o-file-already-exists-rtd (unspecified)) (set! S4a31@&i/o-file-already-exists-rcd (unspecified)) (set! S4a37@S4a32 (unspecified)) (set! S4a39@S4a34 (unspecified)) (set! S4a3b@S4a33 (unspecified)) (set! S4a3e@p? (unspecified)) (set! S4a40@make-i/o-file-does-not-exist-error (unspecified)) (set! S4a42@i/o-file-does-not-exist-error? (unspecified)) (set! S4a44@&i/o-file-does-not-exist-rtd (unspecified)) (set! S4a46@&i/o-file-does-not-exist-rcd (unspecified)) (set! S4a4e@S4a49 (unspecified)) (set! S4a50@S4a4b (unspecified)) (set! S4a52@S4a4a (unspecified)) (set! S4a55@p? (unspecified)) (set! S4a57@make-i/o-port-error (unspecified)) (set! S4a59@S4a48 (unspecified)) (set! S4a5b@i/o-port-error? (unspecified)) (set! S4a5d@i/o-error-port (unspecified)) (set! S4a5f@&i/o-port-rtd (unspecified)) (set! S4a61@&i/o-port-rcd (unspecified)) (set! S4a67@S4a62 (unspecified)) (set! S4a69@S4a64 (unspecified)) (set! S4a6b@S4a63 (unspecified)) (set! S4a6e@p? (unspecified)) (set! S4a70@make-i/o-decoding-error (unspecified)) (set! S4a72@i/o-decoding-error? (unspecified)) (set! S4a74@&i/o-decoding-rtd (unspecified)) (set! S4a76@&i/o-decoding-rcd (unspecified)) (set! S4a7e@S4a79 (unspecified)) (set! S4a80@S4a7b (unspecified)) (set! S4a82@S4a7a (unspecified)) (set! S4a85@p? (unspecified)) (set! S4a87@make-i/o-encoding-error (unspecified)) (set! S4a89@S4a78 (unspecified)) (set! S4a8b@i/o-encoding-error? (unspecified)) (set! S4a8d@i/o-encoding-error-char (unspecified)) (set! S4a8f@&i/o-encoding-rtd (unspecified)) (set! S4a91@&i/o-encoding-rcd (unspecified)) (set! S4a97@S4a92 (unspecified)) (set! S4a99@S4a94 (unspecified)) (set! S4a9b@S4a93 (unspecified)) (set! S4a9e@p? (unspecified)) (set! S4aa0@make-no-infinities-violation (unspecified)) (set! S4aa2@no-infinities-violation? (unspecified)) (set! S4aa4@&no-infinities-rtd (unspecified)) (set! S4aa6@&no-infinities-rcd (unspecified)) (set! S4aac@S4aa7 (unspecified)) (set! S4aae@S4aa9 (unspecified)) (set! S4ab0@S4aa8 (unspecified)) (set! S4ab3@p? (unspecified)) (set! S4ab5@make-no-nans-violation (unspecified)) (set! S4ab7@no-nans-violation? (unspecified)) (set! S4ab9@&no-nans-rtd (unspecified)) (set! S4abb@&no-nans-rcd (unspecified)) (begin (set! S47fd@S47f8 (make-record-type-descriptor '&condition '#f 'S47fb '#f '#f '#())) (set! S4abc@S47fd@S47f8 S47fd@S47f8)) (begin (set! S47ff@S47fa '#f) (set! S4abd@S47ff@S47fa S47ff@S47fa)) (begin (set! S4801@S47f9 (make-record-constructor-descriptor S47fd@S47f8 '#f S47ff@S47fa)) (set! S4abe@S4801@S47f9 S4801@S47f9)) (begin (set! S4804@&condition? (record-predicate S47fd@S47f8)) (set! S4abf@S4804@&condition? S4804@&condition?)) (begin (set! S4806@make-&condition (record-constructor S4801@S47f9)) (set! S4ac0@S4806@make-&condition S4806@make-&condition)) (begin (set! S4808@&condition-rtd S47fd@S47f8) (set! S4ac1@S4808@&condition-rtd S4808@&condition-rtd)) (begin (set! S480a@&condition-rcd S4801@S47f9) (set! S4ac2@S480a@&condition-rcd S480a@&condition-rcd)) (begin (set! S4856@S4851 (make-record-type-descriptor '&message S47fd@S47f8 'S4854 '#f '#f '#((immutable message)))) (set! S4ac3@S4856@S4851 S4856@S4851)) (begin (set! S4858@S4853 '#f) (set! S4ac4@S4858@S4853 S4858@S4853)) (begin (set! S485a@S4852 (make-record-constructor-descriptor S4856@S4851 S4801@S47f9 S4858@S4853)) (set! S4ac5@S485a@S4852 S485a@S4852)) (begin (set! S485d@p? (record-predicate S4856@S4851)) (set! S4ac6@S485d@p? S485d@p?)) (begin (set! S485f@make-message-condition (record-constructor S485a@S4852)) (set! S4ac7@S485f@make-message-condition S485f@make-message-condition)) (begin (set! S4861@S4850 (record-accessor S4856@S4851 '0)) (set! S4ac8@S4861@S4850 S4861@S4850)) (begin (set! S4863@message-condition? (condition-predicate S4856@S4851)) (set! S4ac9@S4863@message-condition? S4863@message-condition?)) (begin (set! S4865@condition-message (condition-accessor S4856@S4851 S4861@S4850)) (set! S4aca@S4865@condition-message S4865@condition-message)) (begin (set! S4867@&message-rtd S4856@S4851) (set! S4acb@S4867@&message-rtd S4867@&message-rtd)) (begin (set! S4869@&message-rcd S485a@S4852) (set! S4acc@S4869@&message-rcd S4869@&message-rcd)) (begin (set! S486f@S486a (make-record-type-descriptor '&warning S47fd@S47f8 'S486d '#f '#f '#())) (set! S4acd@S486f@S486a S486f@S486a)) (begin (set! S4871@S486c '#f) (set! S4ace@S4871@S486c S4871@S486c)) (begin (set! S4873@S486b (make-record-constructor-descriptor S486f@S486a S4801@S47f9 S4871@S486c)) (set! S4acf@S4873@S486b S4873@S486b)) (begin (set! S4876@p? (record-predicate S486f@S486a)) (set! S4ad0@S4876@p? S4876@p?)) (begin (set! S4878@make-warning (record-constructor S4873@S486b)) (set! S4ad1@S4878@make-warning S4878@make-warning)) (begin (set! S487a@warning? (condition-predicate S486f@S486a)) (set! S4ad2@S487a@warning? S487a@warning?)) (begin (set! S487c@&warning-rtd S486f@S486a) (set! S4ad3@S487c@&warning-rtd S487c@&warning-rtd)) (begin (set! S487e@&warning-rcd S4873@S486b) (set! S4ad4@S487e@&warning-rcd S487e@&warning-rcd)) (begin (set! S4884@S487f (make-record-type-descriptor '&serious S47fd@S47f8 'S4882 '#f '#f '#())) (set! S4ad5@S4884@S487f S4884@S487f)) (begin (set! S4886@S4881 '#f) (set! S4ad6@S4886@S4881 S4886@S4881)) (begin (set! S4888@S4880 (make-record-constructor-descriptor S4884@S487f S4801@S47f9 S4886@S4881)) (set! S4ad7@S4888@S4880 S4888@S4880)) (begin (set! S488b@p? (record-predicate S4884@S487f)) (set! S4ad8@S488b@p? S488b@p?)) (begin (set! S488d@make-serious-condition (record-constructor S4888@S4880)) (set! S4ad9@S488d@make-serious-condition S488d@make-serious-condition)) (begin (set! S488f@serious-condition? (condition-predicate S4884@S487f)) (set! S4ada@S488f@serious-condition? S488f@serious-condition?)) (begin (set! S4891@&serious-rtd S4884@S487f) (set! S4adb@S4891@&serious-rtd S4891@&serious-rtd)) (begin (set! S4893@&serious-rcd S4888@S4880) (set! S4adc@S4893@&serious-rcd S4893@&serious-rcd)) (begin (set! S4899@S4894 (make-record-type-descriptor '&error S4884@S487f 'S4897 '#f '#f '#())) (set! S4add@S4899@S4894 S4899@S4894)) (begin (set! S489b@S4896 '#f) (set! S4ade@S489b@S4896 S489b@S4896)) (begin (set! S489d@S4895 (make-record-constructor-descriptor S4899@S4894 S4888@S4880 S489b@S4896)) (set! S4adf@S489d@S4895 S489d@S4895)) (begin (set! S48a0@p? (record-predicate S4899@S4894)) (set! S4ae0@S48a0@p? S48a0@p?)) (begin (set! S48a2@make-error (record-constructor S489d@S4895)) (set! S4ae1@S48a2@make-error S48a2@make-error)) (begin (set! S48a4@error? (condition-predicate S4899@S4894)) (set! S4ae2@S48a4@error? S48a4@error?)) (begin (set! S48a6@&error-rtd S4899@S4894) (set! S4ae3@S48a6@&error-rtd S48a6@&error-rtd)) (begin (set! S48a8@&error-rcd S489d@S4895) (set! S4ae4@S48a8@&error-rcd S48a8@&error-rcd)) (begin (set! S48ae@S48a9 (make-record-type-descriptor '&violation S4884@S487f 'S48ac '#f '#f '#())) (set! S4ae5@S48ae@S48a9 S48ae@S48a9)) (begin (set! S48b0@S48ab '#f) (set! S4ae6@S48b0@S48ab S48b0@S48ab)) (begin (set! S48b2@S48aa (make-record-constructor-descriptor S48ae@S48a9 S4888@S4880 S48b0@S48ab)) (set! S4ae7@S48b2@S48aa S48b2@S48aa)) (begin (set! S48b5@p? (record-predicate S48ae@S48a9)) (set! S4ae8@S48b5@p? S48b5@p?)) (begin (set! S48b7@make-violation (record-constructor S48b2@S48aa)) (set! S4ae9@S48b7@make-violation S48b7@make-violation)) (begin (set! S48b9@violation? (condition-predicate S48ae@S48a9)) (set! S4aea@S48b9@violation? S48b9@violation?)) (begin (set! S48bb@&violation-rtd S48ae@S48a9) (set! S4aeb@S48bb@&violation-rtd S48bb@&violation-rtd)) (begin (set! S48bd@&violation-rcd S48b2@S48aa) (set! S4aec@S48bd@&violation-rcd S48bd@&violation-rcd)) (begin (set! S48c3@S48be (make-record-type-descriptor '&assertion S48ae@S48a9 'S48c1 '#f '#f '#())) (set! S4aed@S48c3@S48be S48c3@S48be)) (begin (set! S48c5@S48c0 '#f) (set! S4aee@S48c5@S48c0 S48c5@S48c0)) (begin (set! S48c7@S48bf (make-record-constructor-descriptor S48c3@S48be S48b2@S48aa S48c5@S48c0)) (set! S4aef@S48c7@S48bf S48c7@S48bf)) (begin (set! S48ca@p? (record-predicate S48c3@S48be)) (set! S4af0@S48ca@p? S48ca@p?)) (begin (set! S48cc@make-assertion-violation (record-constructor S48c7@S48bf)) (set! S4af1@S48cc@make-assertion-violation S48cc@make-assertion-violation)) (begin (set! S48ce@assertion-violation? (condition-predicate S48c3@S48be)) (set! S4af2@S48ce@assertion-violation? S48ce@assertion-violation?)) (begin (set! S48d0@&assertion-rtd S48c3@S48be) (set! S4af3@S48d0@&assertion-rtd S48d0@&assertion-rtd)) (begin (set! S48d2@&assertion-rcd S48c7@S48bf) (set! S4af4@S48d2@&assertion-rcd S48d2@&assertion-rcd)) (begin (set! S48da@S48d5 (make-record-type-descriptor '&irritants S47fd@S47f8 'S48d8 '#f '#f '#((immutable irritants)))) (set! S4af5@S48da@S48d5 S48da@S48d5)) (begin (set! S48dc@S48d7 '#f) (set! S4af6@S48dc@S48d7 S48dc@S48d7)) (begin (set! S48de@S48d6 (make-record-constructor-descriptor S48da@S48d5 S4801@S47f9 S48dc@S48d7)) (set! S4af7@S48de@S48d6 S48de@S48d6)) (begin (set! S48e1@p? (record-predicate S48da@S48d5)) (set! S4af8@S48e1@p? S48e1@p?)) (begin (set! S48e3@make-irritants-condition (record-constructor S48de@S48d6)) (set! S4af9@S48e3@make-irritants-condition S48e3@make-irritants-condition)) (begin (set! S48e5@S48d4 (record-accessor S48da@S48d5 '0)) (set! S4afa@S48e5@S48d4 S48e5@S48d4)) (begin (set! S48e7@irritants-condition? (condition-predicate S48da@S48d5)) (set! S4afb@S48e7@irritants-condition? S48e7@irritants-condition?)) (begin (set! S48e9@condition-irritants (condition-accessor S48da@S48d5 S48e5@S48d4)) (set! S4afc@S48e9@condition-irritants S48e9@condition-irritants)) (begin (set! S48eb@&irritants-rtd S48da@S48d5) (set! S4afd@S48eb@&irritants-rtd S48eb@&irritants-rtd)) (begin (set! S48ed@&irritants-rcd S48de@S48d6) (set! S4afe@S48ed@&irritants-rcd S48ed@&irritants-rcd)) (begin (set! S48f5@S48f0 (make-record-type-descriptor '&who S47fd@S47f8 'S48f3 '#f '#f '#((immutable who)))) (set! S4aff@S48f5@S48f0 S48f5@S48f0)) (begin (set! S48f7@S48f2 '#f) (set! S4b00@S48f7@S48f2 S48f7@S48f2)) (begin (set! S48f9@S48f1 (make-record-constructor-descriptor S48f5@S48f0 S4801@S47f9 S48f7@S48f2)) (set! S4b01@S48f9@S48f1 S48f9@S48f1)) (begin (set! S48fc@p? (record-predicate S48f5@S48f0)) (set! S4b02@S48fc@p? S48fc@p?)) (begin (set! S48fe@make-who-condition (record-constructor S48f9@S48f1)) (set! S4b03@S48fe@make-who-condition S48fe@make-who-condition)) (begin (set! S4900@S48ef (record-accessor S48f5@S48f0 '0)) (set! S4b04@S4900@S48ef S4900@S48ef)) (begin (set! S4902@who-condition? (condition-predicate S48f5@S48f0)) (set! S4b05@S4902@who-condition? S4902@who-condition?)) (begin (set! S4904@condition-who (condition-accessor S48f5@S48f0 S4900@S48ef)) (set! S4b06@S4904@condition-who S4904@condition-who)) (begin (set! S4906@&who-rtd S48f5@S48f0) (set! S4b07@S4906@&who-rtd S4906@&who-rtd)) (begin (set! S4908@&who-rcd S48f9@S48f1) (set! S4b08@S4908@&who-rcd S4908@&who-rcd)) (begin (set! S490e@S4909 (make-record-type-descriptor '&non-continuable S48ae@S48a9 'S490c '#f '#f '#())) (set! S4b09@S490e@S4909 S490e@S4909)) (begin (set! S4910@S490b '#f) (set! S4b0a@S4910@S490b S4910@S490b)) (begin (set! S4912@S490a (make-record-constructor-descriptor S490e@S4909 S48b2@S48aa S4910@S490b)) (set! S4b0b@S4912@S490a S4912@S490a)) (begin (set! S4915@p? (record-predicate S490e@S4909)) (set! S4b0c@S4915@p? S4915@p?)) (begin (set! S4917@make-non-continuable-violation (record-constructor S4912@S490a)) (set! S4b0d@S4917@make-non-continuable-violation S4917@make-non-continuable-violation)) (begin (set! S4919@non-continuable-violation? (condition-predicate S490e@S4909)) (set! S4b0e@S4919@non-continuable-violation? S4919@non-continuable-violation?)) (begin (set! S491b@&non-continuable-rtd S490e@S4909) (set! S4b0f@S491b@&non-continuable-rtd S491b@&non-continuable-rtd)) (begin (set! S491d@&non-continuable-rcd S4912@S490a) (set! S4b10@S491d@&non-continuable-rcd S491d@&non-continuable-rcd)) (begin (set! S4923@S491e (make-record-type-descriptor '&implementation-restriction S48ae@S48a9 'S4921 '#f '#f '#())) (set! S4b11@S4923@S491e S4923@S491e)) (begin (set! S4925@S4920 '#f) (set! S4b12@S4925@S4920 S4925@S4920)) (begin (set! S4927@S491f (make-record-constructor-descriptor S4923@S491e S48b2@S48aa S4925@S4920)) (set! S4b13@S4927@S491f S4927@S491f)) (begin (set! S492a@p? (record-predicate S4923@S491e)) (set! S4b14@S492a@p? S492a@p?)) (begin (set! S492c@make-implementation-restriction-violation (record-constructor S4927@S491f)) (set! S4b15@S492c@make-implementation-restriction-violation S492c@make-implementation-restriction-violation)) (begin (set! S492e@implementation-restriction-violation? (condition-predicate S4923@S491e)) (set! S4b16@S492e@implementation-restriction-violation? S492e@implementation-restriction-violation?)) (begin (set! S4930@&implementation-restriction-rtd S4923@S491e) (set! S4b17@S4930@&implementation-restriction-rtd S4930@&implementation-restriction-rtd)) (begin (set! S4932@&implementation-restriction-rcd S4927@S491f) (set! S4b18@S4932@&implementation-restriction-rcd S4932@&implementation-restriction-rcd)) (begin (set! S4938@S4933 (make-record-type-descriptor '&lexical S48ae@S48a9 'S4936 '#f '#f '#())) (set! S4b19@S4938@S4933 S4938@S4933)) (begin (set! S493a@S4935 '#f) (set! S4b1a@S493a@S4935 S493a@S4935)) (begin (set! S493c@S4934 (make-record-constructor-descriptor S4938@S4933 S48b2@S48aa S493a@S4935)) (set! S4b1b@S493c@S4934 S493c@S4934)) (begin (set! S493f@p? (record-predicate S4938@S4933)) (set! S4b1c@S493f@p? S493f@p?)) (begin (set! S4941@make-lexical-violation (record-constructor S493c@S4934)) (set! S4b1d@S4941@make-lexical-violation S4941@make-lexical-violation)) (begin (set! S4943@lexical-violation? (condition-predicate S4938@S4933)) (set! S4b1e@S4943@lexical-violation? S4943@lexical-violation?)) (begin (set! S4945@&lexical-rtd S4938@S4933) (set! S4b1f@S4945@&lexical-rtd S4945@&lexical-rtd)) (begin (set! S4947@&lexical-rcd S493c@S4934) (set! S4b20@S4947@&lexical-rcd S4947@&lexical-rcd)) (begin (set! S4951@S494c (make-record-type-descriptor '&syntax S48ae@S48a9 'S494f '#f '#f '#((immutable form) (immutable subform)))) (set! S4b21@S4951@S494c S4951@S494c)) (begin (set! S4953@S494e '#f) (set! S4b22@S4953@S494e S4953@S494e)) (begin (set! S4955@S494d (make-record-constructor-descriptor S4951@S494c S48b2@S48aa S4953@S494e)) (set! S4b23@S4955@S494d S4955@S494d)) (begin (set! S4958@p? (record-predicate S4951@S494c)) (set! S4b24@S4958@p? S4958@p?)) (begin (set! S495a@make-syntax-violation (record-constructor S4955@S494d)) (set! S4b25@S495a@make-syntax-violation S495a@make-syntax-violation)) (begin (set! S495c@S4949 (record-accessor S4951@S494c '0)) (set! S4b26@S495c@S4949 S495c@S4949)) (begin (set! S495e@S494b (record-accessor S4951@S494c '1)) (set! S4b27@S495e@S494b S495e@S494b)) (begin (set! S4960@syntax-violation? (condition-predicate S4951@S494c)) (set! S4b28@S4960@syntax-violation? S4960@syntax-violation?)) (begin (set! S4962@syntax-violation-form (condition-accessor S4951@S494c S495c@S4949)) (set! S4b29@S4962@syntax-violation-form S4962@syntax-violation-form)) (begin (set! S4964@syntax-violation-subform (condition-accessor S4951@S494c S495e@S494b)) (set! S4b2a@S4964@syntax-violation-subform S4964@syntax-violation-subform)) (begin (set! S4966@&syntax-rtd S4951@S494c) (set! S4b2b@S4966@&syntax-rtd S4966@&syntax-rtd)) (begin (set! S4968@&syntax-rcd S4955@S494d) (set! S4b2c@S4968@&syntax-rcd S4968@&syntax-rcd)) (begin (set! S496e@S4969 (make-record-type-descriptor '&undefined S48ae@S48a9 'S496c '#f '#f '#())) (set! S4b2d@S496e@S4969 S496e@S4969)) (begin (set! S4970@S496b '#f) (set! S4b2e@S4970@S496b S4970@S496b)) (begin (set! S4972@S496a (make-record-constructor-descriptor S496e@S4969 S48b2@S48aa S4970@S496b)) (set! S4b2f@S4972@S496a S4972@S496a)) (begin (set! S4975@p? (record-predicate S496e@S4969)) (set! S4b30@S4975@p? S4975@p?)) (begin (set! S4977@make-undefined-violation (record-constructor S4972@S496a)) (set! S4b31@S4977@make-undefined-violation S4977@make-undefined-violation)) (begin (set! S4979@undefined-violation? (condition-predicate S496e@S4969)) (set! S4b32@S4979@undefined-violation? S4979@undefined-violation?)) (begin (set! S497b@&undefined-rtd S496e@S4969) (set! S4b33@S497b@&undefined-rtd S497b@&undefined-rtd)) (begin (set! S497d@&undefined-rcd S4972@S496a) (set! S4b34@S497d@&undefined-rcd S497d@&undefined-rcd)) (begin (set! S4983@S497e (make-record-type-descriptor '&i/o S4899@S4894 'S4981 '#f '#f '#())) (set! S4b35@S4983@S497e S4983@S497e)) (begin (set! S4985@S4980 '#f) (set! S4b36@S4985@S4980 S4985@S4980)) (begin (set! S4987@S497f (make-record-constructor-descriptor S4983@S497e S489d@S4895 S4985@S4980)) (set! S4b37@S4987@S497f S4987@S497f)) (begin (set! S498a@p? (record-predicate S4983@S497e)) (set! S4b38@S498a@p? S498a@p?)) (begin (set! S498c@make-i/o-error (record-constructor S4987@S497f)) (set! S4b39@S498c@make-i/o-error S498c@make-i/o-error)) (begin (set! S498e@i/o-error? (condition-predicate S4983@S497e)) (set! S4b3a@S498e@i/o-error? S498e@i/o-error?)) (begin (set! S4990@&i/o-rtd S4983@S497e) (set! S4b3b@S4990@&i/o-rtd S4990@&i/o-rtd)) (begin (set! S4992@&i/o-rcd S4987@S497f) (set! S4b3c@S4992@&i/o-rcd S4992@&i/o-rcd)) (begin (set! S4998@S4993 (make-record-type-descriptor '&i/o-read S4983@S497e 'S4996 '#f '#f '#())) (set! S4b3d@S4998@S4993 S4998@S4993)) (begin (set! S499a@S4995 '#f) (set! S4b3e@S499a@S4995 S499a@S4995)) (begin (set! S499c@S4994 (make-record-constructor-descriptor S4998@S4993 S4987@S497f S499a@S4995)) (set! S4b3f@S499c@S4994 S499c@S4994)) (begin (set! S499f@p? (record-predicate S4998@S4993)) (set! S4b40@S499f@p? S499f@p?)) (begin (set! S49a1@make-i/o-read-error (record-constructor S499c@S4994)) (set! S4b41@S49a1@make-i/o-read-error S49a1@make-i/o-read-error)) (begin (set! S49a3@i/o-read-error? (condition-predicate S4998@S4993)) (set! S4b42@S49a3@i/o-read-error? S49a3@i/o-read-error?)) (begin (set! S49a5@&i/o-read-rtd S4998@S4993) (set! S4b43@S49a5@&i/o-read-rtd S49a5@&i/o-read-rtd)) (begin (set! S49a7@&i/o-read-rcd S499c@S4994) (set! S4b44@S49a7@&i/o-read-rcd S49a7@&i/o-read-rcd)) (begin (set! S49ad@S49a8 (make-record-type-descriptor '&i/o-write S4983@S497e 'S49ab '#f '#f '#())) (set! S4b45@S49ad@S49a8 S49ad@S49a8)) (begin (set! S49af@S49aa '#f) (set! S4b46@S49af@S49aa S49af@S49aa)) (begin (set! S49b1@S49a9 (make-record-constructor-descriptor S49ad@S49a8 S4987@S497f S49af@S49aa)) (set! S4b47@S49b1@S49a9 S49b1@S49a9)) (begin (set! S49b4@p? (record-predicate S49ad@S49a8)) (set! S4b48@S49b4@p? S49b4@p?)) (begin (set! S49b6@make-i/o-write-error (record-constructor S49b1@S49a9)) (set! S4b49@S49b6@make-i/o-write-error S49b6@make-i/o-write-error)) (begin (set! S49b8@i/o-write-error? (condition-predicate S49ad@S49a8)) (set! S4b4a@S49b8@i/o-write-error? S49b8@i/o-write-error?)) (begin (set! S49ba@&i/o-write-rtd S49ad@S49a8) (set! S4b4b@S49ba@&i/o-write-rtd S49ba@&i/o-write-rtd)) (begin (set! S49bc@&i/o-write-rcd S49b1@S49a9) (set! S4b4c@S49bc@&i/o-write-rcd S49bc@&i/o-write-rcd)) (begin (set! S49c4@S49bf (make-record-type-descriptor '&i/o-invalid-position S4983@S497e 'S49c2 '#f '#f '#((immutable position)))) (set! S4b4d@S49c4@S49bf S49c4@S49bf)) (begin (set! S49c6@S49c1 '#f) (set! S4b4e@S49c6@S49c1 S49c6@S49c1)) (begin (set! S49c8@S49c0 (make-record-constructor-descriptor S49c4@S49bf S4987@S497f S49c6@S49c1)) (set! S4b4f@S49c8@S49c0 S49c8@S49c0)) (begin (set! S49cb@p? (record-predicate S49c4@S49bf)) (set! S4b50@S49cb@p? S49cb@p?)) (begin (set! S49cd@make-i/o-invalid-position-error (record-constructor S49c8@S49c0)) (set! S4b51@S49cd@make-i/o-invalid-position-error S49cd@make-i/o-invalid-position-error)) (begin (set! S49cf@S49be (record-accessor S49c4@S49bf '0)) (set! S4b52@S49cf@S49be S49cf@S49be)) (begin (set! S49d1@i/o-invalid-position-error? (condition-predicate S49c4@S49bf)) (set! S4b53@S49d1@i/o-invalid-position-error? S49d1@i/o-invalid-position-error?)) (begin (set! S49d3@i/o-error-position (condition-accessor S49c4@S49bf S49cf@S49be)) (set! S4b54@S49d3@i/o-error-position S49d3@i/o-error-position)) (begin (set! S49d5@&i/o-invalid-position-rtd S49c4@S49bf) (set! S4b55@S49d5@&i/o-invalid-position-rtd S49d5@&i/o-invalid-position-rtd)) (begin (set! S49d7@&i/o-invalid-position-rcd S49c8@S49c0) (set! S4b56@S49d7@&i/o-invalid-position-rcd S49d7@&i/o-invalid-position-rcd)) (begin (set! S49df@S49da (make-record-type-descriptor '&i/o-filename S4983@S497e 'S49dd '#f '#f '#((immutable filename)))) (set! S4b57@S49df@S49da S49df@S49da)) (begin (set! S49e1@S49dc '#f) (set! S4b58@S49e1@S49dc S49e1@S49dc)) (begin (set! S49e3@S49db (make-record-constructor-descriptor S49df@S49da S4987@S497f S49e1@S49dc)) (set! S4b59@S49e3@S49db S49e3@S49db)) (begin (set! S49e6@p? (record-predicate S49df@S49da)) (set! S4b5a@S49e6@p? S49e6@p?)) (begin (set! S49e8@make-i/o-filename-error (record-constructor S49e3@S49db)) (set! S4b5b@S49e8@make-i/o-filename-error S49e8@make-i/o-filename-error)) (begin (set! S49ea@S49d9 (record-accessor S49df@S49da '0)) (set! S4b5c@S49ea@S49d9 S49ea@S49d9)) (begin (set! S49ec@i/o-filename-error? (condition-predicate S49df@S49da)) (set! S4b5d@S49ec@i/o-filename-error? S49ec@i/o-filename-error?)) (begin (set! S49ee@i/o-error-filename (condition-accessor S49df@S49da S49ea@S49d9)) (set! S4b5e@S49ee@i/o-error-filename S49ee@i/o-error-filename)) (begin (set! S49f0@&i/o-filename-rtd S49df@S49da) (set! S4b5f@S49f0@&i/o-filename-rtd S49f0@&i/o-filename-rtd)) (begin (set! S49f2@&i/o-filename-rcd S49e3@S49db) (set! S4b60@S49f2@&i/o-filename-rcd S49f2@&i/o-filename-rcd)) (begin (set! S49f8@S49f3 (make-record-type-descriptor '&i/o-file-protection S49df@S49da 'S49f6 '#f '#f '#())) (set! S4b61@S49f8@S49f3 S49f8@S49f3)) (begin (set! S49fa@S49f5 '#f) (set! S4b62@S49fa@S49f5 S49fa@S49f5)) (begin (set! S49fc@S49f4 (make-record-constructor-descriptor S49f8@S49f3 S49e3@S49db S49fa@S49f5)) (set! S4b63@S49fc@S49f4 S49fc@S49f4)) (begin (set! S49ff@p? (record-predicate S49f8@S49f3)) (set! S4b64@S49ff@p? S49ff@p?)) (begin (set! S4a01@make-i/o-file-protection-error (record-constructor S49fc@S49f4)) (set! S4b65@S4a01@make-i/o-file-protection-error S4a01@make-i/o-file-protection-error)) (begin (set! S4a03@i/o-file-protection-error? (condition-predicate S49f8@S49f3)) (set! S4b66@S4a03@i/o-file-protection-error? S4a03@i/o-file-protection-error?)) (begin (set! S4a05@&i/o-file-protection-rtd S49f8@S49f3) (set! S4b67@S4a05@&i/o-file-protection-rtd S4a05@&i/o-file-protection-rtd)) (begin (set! S4a07@&i/o-file-protection-rcd S49fc@S49f4) (set! S4b68@S4a07@&i/o-file-protection-rcd S4a07@&i/o-file-protection-rcd)) (begin (set! S4a0d@S4a08 (make-record-type-descriptor '&i/o-file-is-read-only S49f8@S49f3 'S4a0b '#f '#f '#())) (set! S4b69@S4a0d@S4a08 S4a0d@S4a08)) (begin (set! S4a0f@S4a0a '#f) (set! S4b6a@S4a0f@S4a0a S4a0f@S4a0a)) (begin (set! S4a11@S4a09 (make-record-constructor-descriptor S4a0d@S4a08 S49fc@S49f4 S4a0f@S4a0a)) (set! S4b6b@S4a11@S4a09 S4a11@S4a09)) (begin (set! S4a14@p? (record-predicate S4a0d@S4a08)) (set! S4b6c@S4a14@p? S4a14@p?)) (begin (set! S4a16@make-i/o-file-is-read-only-error (record-constructor S4a11@S4a09)) (set! S4b6d@S4a16@make-i/o-file-is-read-only-error S4a16@make-i/o-file-is-read-only-error)) (begin (set! S4a18@i/o-file-is-read-only-error? (condition-predicate S4a0d@S4a08)) (set! S4b6e@S4a18@i/o-file-is-read-only-error? S4a18@i/o-file-is-read-only-error?)) (begin (set! S4a1a@&i/o-file-is-read-only-rtd S4a0d@S4a08) (set! S4b6f@S4a1a@&i/o-file-is-read-only-rtd S4a1a@&i/o-file-is-read-only-rtd)) (begin (set! S4a1c@&i/o-file-is-read-only-rcd S4a11@S4a09) (set! S4b70@S4a1c@&i/o-file-is-read-only-rcd S4a1c@&i/o-file-is-read-only-rcd)) (begin (set! S4a22@S4a1d (make-record-type-descriptor '&i/o-file-already-exists S49df@S49da 'S4a20 '#f '#f '#())) (set! S4b71@S4a22@S4a1d S4a22@S4a1d)) (begin (set! S4a24@S4a1f '#f) (set! S4b72@S4a24@S4a1f S4a24@S4a1f)) (begin (set! S4a26@S4a1e (make-record-constructor-descriptor S4a22@S4a1d S49e3@S49db S4a24@S4a1f)) (set! S4b73@S4a26@S4a1e S4a26@S4a1e)) (begin (set! S4a29@p? (record-predicate S4a22@S4a1d)) (set! S4b74@S4a29@p? S4a29@p?)) (begin (set! S4a2b@make-i/o-file-already-exists-error (record-constructor S4a26@S4a1e)) (set! S4b75@S4a2b@make-i/o-file-already-exists-error S4a2b@make-i/o-file-already-exists-error)) (begin (set! S4a2d@i/o-file-already-exists-error? (condition-predicate S4a22@S4a1d)) (set! S4b76@S4a2d@i/o-file-already-exists-error? S4a2d@i/o-file-already-exists-error?)) (begin (set! S4a2f@&i/o-file-already-exists-rtd S4a22@S4a1d) (set! S4b77@S4a2f@&i/o-file-already-exists-rtd S4a2f@&i/o-file-already-exists-rtd)) (begin (set! S4a31@&i/o-file-already-exists-rcd S4a26@S4a1e) (set! S4b78@S4a31@&i/o-file-already-exists-rcd S4a31@&i/o-file-already-exists-rcd)) (begin (set! S4a37@S4a32 (make-record-type-descriptor '&i/o-file-does-not-exist S49df@S49da 'S4a35 '#f '#f '#())) (set! S4b79@S4a37@S4a32 S4a37@S4a32)) (begin (set! S4a39@S4a34 '#f) (set! S4b7a@S4a39@S4a34 S4a39@S4a34)) (begin (set! S4a3b@S4a33 (make-record-constructor-descriptor S4a37@S4a32 S49e3@S49db S4a39@S4a34)) (set! S4b7b@S4a3b@S4a33 S4a3b@S4a33)) (begin (set! S4a3e@p? (record-predicate S4a37@S4a32)) (set! S4b7c@S4a3e@p? S4a3e@p?)) (begin (set! S4a40@make-i/o-file-does-not-exist-error (record-constructor S4a3b@S4a33)) (set! S4b7d@S4a40@make-i/o-file-does-not-exist-error S4a40@make-i/o-file-does-not-exist-error)) (begin (set! S4a42@i/o-file-does-not-exist-error? (condition-predicate S4a37@S4a32)) (set! S4b7e@S4a42@i/o-file-does-not-exist-error? S4a42@i/o-file-does-not-exist-error?)) (begin (set! S4a44@&i/o-file-does-not-exist-rtd S4a37@S4a32) (set! S4b7f@S4a44@&i/o-file-does-not-exist-rtd S4a44@&i/o-file-does-not-exist-rtd)) (begin (set! S4a46@&i/o-file-does-not-exist-rcd S4a3b@S4a33) (set! S4b80@S4a46@&i/o-file-does-not-exist-rcd S4a46@&i/o-file-does-not-exist-rcd)) (begin (set! S4a4e@S4a49 (make-record-type-descriptor '&i/o-port S4983@S497e 'S4a4c '#f '#f '#((immutable port)))) (set! S4b81@S4a4e@S4a49 S4a4e@S4a49)) (begin (set! S4a50@S4a4b '#f) (set! S4b82@S4a50@S4a4b S4a50@S4a4b)) (begin (set! S4a52@S4a4a (make-record-constructor-descriptor S4a4e@S4a49 S4987@S497f S4a50@S4a4b)) (set! S4b83@S4a52@S4a4a S4a52@S4a4a)) (begin (set! S4a55@p? (record-predicate S4a4e@S4a49)) (set! S4b84@S4a55@p? S4a55@p?)) (begin (set! S4a57@make-i/o-port-error (record-constructor S4a52@S4a4a)) (set! S4b85@S4a57@make-i/o-port-error S4a57@make-i/o-port-error)) (begin (set! S4a59@S4a48 (record-accessor S4a4e@S4a49 '0)) (set! S4b86@S4a59@S4a48 S4a59@S4a48)) (begin (set! S4a5b@i/o-port-error? (condition-predicate S4a4e@S4a49)) (set! S4b87@S4a5b@i/o-port-error? S4a5b@i/o-port-error?)) (begin (set! S4a5d@i/o-error-port (condition-accessor S4a4e@S4a49 S4a59@S4a48)) (set! S4b88@S4a5d@i/o-error-port S4a5d@i/o-error-port)) (begin (set! S4a5f@&i/o-port-rtd S4a4e@S4a49) (set! S4b89@S4a5f@&i/o-port-rtd S4a5f@&i/o-port-rtd)) (begin (set! S4a61@&i/o-port-rcd S4a52@S4a4a) (set! S4b8a@S4a61@&i/o-port-rcd S4a61@&i/o-port-rcd)) (begin (set! S4a67@S4a62 (make-record-type-descriptor '&i/o-decoding S4a4e@S4a49 'S4a65 '#f '#f '#())) (set! S4b8b@S4a67@S4a62 S4a67@S4a62)) (begin (set! S4a69@S4a64 '#f) (set! S4b8c@S4a69@S4a64 S4a69@S4a64)) (begin (set! S4a6b@S4a63 (make-record-constructor-descriptor S4a67@S4a62 S4a52@S4a4a S4a69@S4a64)) (set! S4b8d@S4a6b@S4a63 S4a6b@S4a63)) (begin (set! S4a6e@p? (record-predicate S4a67@S4a62)) (set! S4b8e@S4a6e@p? S4a6e@p?)) (begin (set! S4a70@make-i/o-decoding-error (record-constructor S4a6b@S4a63)) (set! S4b8f@S4a70@make-i/o-decoding-error S4a70@make-i/o-decoding-error)) (begin (set! S4a72@i/o-decoding-error? (condition-predicate S4a67@S4a62)) (set! S4b90@S4a72@i/o-decoding-error? S4a72@i/o-decoding-error?)) (begin (set! S4a74@&i/o-decoding-rtd S4a67@S4a62) (set! S4b91@S4a74@&i/o-decoding-rtd S4a74@&i/o-decoding-rtd)) (begin (set! S4a76@&i/o-decoding-rcd S4a6b@S4a63) (set! S4b92@S4a76@&i/o-decoding-rcd S4a76@&i/o-decoding-rcd)) (begin (set! S4a7e@S4a79 (make-record-type-descriptor '&i/o-encoding S4a4e@S4a49 'S4a7c '#f '#f '#((immutable char)))) (set! S4b93@S4a7e@S4a79 S4a7e@S4a79)) (begin (set! S4a80@S4a7b '#f) (set! S4b94@S4a80@S4a7b S4a80@S4a7b)) (begin (set! S4a82@S4a7a (make-record-constructor-descriptor S4a7e@S4a79 S4a52@S4a4a S4a80@S4a7b)) (set! S4b95@S4a82@S4a7a S4a82@S4a7a)) (begin (set! S4a85@p? (record-predicate S4a7e@S4a79)) (set! S4b96@S4a85@p? S4a85@p?)) (begin (set! S4a87@make-i/o-encoding-error (record-constructor S4a82@S4a7a)) (set! S4b97@S4a87@make-i/o-encoding-error S4a87@make-i/o-encoding-error)) (begin (set! S4a89@S4a78 (record-accessor S4a7e@S4a79 '0)) (set! S4b98@S4a89@S4a78 S4a89@S4a78)) (begin (set! S4a8b@i/o-encoding-error? (condition-predicate S4a7e@S4a79)) (set! S4b99@S4a8b@i/o-encoding-error? S4a8b@i/o-encoding-error?)) (begin (set! S4a8d@i/o-encoding-error-char (condition-accessor S4a7e@S4a79 S4a89@S4a78)) (set! S4b9a@S4a8d@i/o-encoding-error-char S4a8d@i/o-encoding-error-char)) (begin (set! S4a8f@&i/o-encoding-rtd S4a7e@S4a79) (set! S4b9b@S4a8f@&i/o-encoding-rtd S4a8f@&i/o-encoding-rtd)) (begin (set! S4a91@&i/o-encoding-rcd S4a82@S4a7a) (set! S4b9c@S4a91@&i/o-encoding-rcd S4a91@&i/o-encoding-rcd)) (begin (set! S4a97@S4a92 (make-record-type-descriptor '&no-infinities S4923@S491e 'S4a95 '#f '#f '#())) (set! S4b9d@S4a97@S4a92 S4a97@S4a92)) (begin (set! S4a99@S4a94 '#f) (set! S4b9e@S4a99@S4a94 S4a99@S4a94)) (begin (set! S4a9b@S4a93 (make-record-constructor-descriptor S4a97@S4a92 S4927@S491f S4a99@S4a94)) (set! S4b9f@S4a9b@S4a93 S4a9b@S4a93)) (begin (set! S4a9e@p? (record-predicate S4a97@S4a92)) (set! S4ba0@S4a9e@p? S4a9e@p?)) (begin (set! S4aa0@make-no-infinities-violation (record-constructor S4a9b@S4a93)) (set! S4ba1@S4aa0@make-no-infinities-violation S4aa0@make-no-infinities-violation)) (begin (set! S4aa2@no-infinities-violation? (condition-predicate S4a97@S4a92)) (set! S4ba2@S4aa2@no-infinities-violation? S4aa2@no-infinities-violation?)) (begin (set! S4aa4@&no-infinities-rtd S4a97@S4a92) (set! S4ba3@S4aa4@&no-infinities-rtd S4aa4@&no-infinities-rtd)) (begin (set! S4aa6@&no-infinities-rcd S4a9b@S4a93) (set! S4ba4@S4aa6@&no-infinities-rcd S4aa6@&no-infinities-rcd)) (begin (set! S4aac@S4aa7 (make-record-type-descriptor '&no-nans S4923@S491e 'S4aaa '#f '#f '#())) (set! S4ba5@S4aac@S4aa7 S4aac@S4aa7)) (begin (set! S4aae@S4aa9 '#f) (set! S4ba6@S4aae@S4aa9 S4aae@S4aa9)) (begin (set! S4ab0@S4aa8 (make-record-constructor-descriptor S4aac@S4aa7 S4927@S491f S4aae@S4aa9)) (set! S4ba7@S4ab0@S4aa8 S4ab0@S4aa8)) (begin (set! S4ab3@p? (record-predicate S4aac@S4aa7)) (set! S4ba8@S4ab3@p? S4ab3@p?)) (begin (set! S4ab5@make-no-nans-violation (record-constructor S4ab0@S4aa8)) (set! S4ba9@S4ab5@make-no-nans-violation S4ab5@make-no-nans-violation)) (begin (set! S4ab7@no-nans-violation? (condition-predicate S4aac@S4aa7)) (set! S4baa@S4ab7@no-nans-violation? S4ab7@no-nans-violation?)) (begin (set! S4ab9@&no-nans-rtd S4aac@S4aa7) (set! S4bab@S4ab9@&no-nans-rtd S4ab9@&no-nans-rtd)) (begin (set! S4abb@&no-nans-rcd S4ab0@S4aa8) (set! S4bac@S4abb@&no-nans-rcd S4abb@&no-nans-rcd)) (void))
(begin (begin (S2644@S25f9@current-primitive-locations (lambda (S5078@x) (let ((S507a@t (assq S5078@x '((&no-nans-rcd . S4bac@S4abb@&no-nans-rcd) (&no-nans-rtd . S4bab@S4ab9@&no-nans-rtd) (&no-infinities-rcd . S4ba4@S4aa6@&no-infinities-rcd) (&no-infinities-rtd . S4ba3@S4aa4@&no-infinities-rtd) (&i/o-encoding-rcd . S4b9c@S4a91@&i/o-encoding-rcd) (&i/o-encoding-rtd . S4b9b@S4a8f@&i/o-encoding-rtd) (&i/o-decoding-rcd . S4b92@S4a76@&i/o-decoding-rcd) (&i/o-decoding-rtd . S4b91@S4a74@&i/o-decoding-rtd) (&i/o-port-rcd . S4b8a@S4a61@&i/o-port-rcd) (&i/o-port-rtd . S4b89@S4a5f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . S4b80@S4a46@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . S4b7f@S4a44@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . S4b78@S4a31@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . S4b77@S4a2f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . S4b70@S4a1c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . S4b6f@S4a1a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . S4b68@S4a07@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . S4b67@S4a05@&i/o-file-protection-rtd) (&i/o-filename-rcd . S4b60@S49f2@&i/o-filename-rcd) (&i/o-filename-rtd . S4b5f@S49f0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . S4b56@S49d7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . S4b55@S49d5@&i/o-invalid-position-rtd) (&i/o-write-rcd . S4b4c@S49bc@&i/o-write-rcd) (&i/o-write-rtd . S4b4b@S49ba@&i/o-write-rtd) (&i/o-read-rcd . S4b44@S49a7@&i/o-read-rcd) (&i/o-read-rtd . S4b43@S49a5@&i/o-read-rtd) (&i/o-rcd . S4b3c@S4992@&i/o-rcd) (&i/o-rtd . S4b3b@S4990@&i/o-rtd) (&undefined-rcd . S4b34@S497d@&undefined-rcd) (&undefined-rtd . S4b33@S497b@&undefined-rtd) (&syntax-rcd . S4b2c@S4968@&syntax-rcd) (&syntax-rtd . S4b2b@S4966@&syntax-rtd) (&lexical-rcd . S4b20@S4947@&lexical-rcd) (&lexical-rtd . S4b1f@S4945@&lexical-rtd) (&implementation-restriction-rcd . S4b18@S4932@&implementation-restriction-rcd) (&implementation-restriction-rtd . S4b17@S4930@&implementation-restriction-rtd) (&non-continuable-rcd . S4b10@S491d@&non-continuable-rcd) (&non-continuable-rtd . S4b0f@S491b@&non-continuable-rtd) (&who-rcd . S4b08@S4908@&who-rcd) (&who-rtd . S4b07@S4906@&who-rtd) (&irritants-rcd . S4afe@S48ed@&irritants-rcd) (&irritants-rtd . S4afd@S48eb@&irritants-rtd) (&assertion-rcd . S4af4@S48d2@&assertion-rcd) (&assertion-rtd . S4af3@S48d0@&assertion-rtd) (&violation-rcd . S4aec@S48bd@&violation-rcd) (&violation-rtd . S4aeb@S48bb@&violation-rtd) (&error-rcd . S4ae4@S48a8@&error-rcd) (&error-rtd . S4ae3@S48a6@&error-rtd) (&serious-rcd . S4adc@S4893@&serious-rcd) (&serious-rtd . S4adb@S4891@&serious-rtd) (&warning-rcd . S4ad4@S487e@&warning-rcd) (&warning-rtd . S4ad3@S487c@&warning-rtd) (&message-rcd . S4acc@S4869@&message-rcd) (&message-rtd . S4acb@S4867@&message-rtd) (&condition-rcd . S4ac2@S480a@&condition-rcd) (&condition-rtd . S4ac1@S4808@&condition-rtd) (syntax-error . S47e4@S2d8a@syntax-error) (syntax-dispatch . S4782@S2cae@syntax-dispatch) (load . S4d21@S4bcc@load) (interaction-environment . S47ed@S2d9c@interaction-environment) (library-path . S28ab@S26e7@library-path) (mosh-cache-dir . S25f2@S24d2@mosh-cache-dir) (make-parameter . S25f1@S24d0@make-parameter) (make-variable-transformer . S473f@S2ad9@make-variable-transformer) (identifier? . S47e7@S2d90@identifier?) (generate-temporaries . S47dd@S2d7c@generate-temporaries) (free-identifier=? . S47de@S2d7e@free-identifier=?) (syntax->datum . S47e9@S2d94@syntax->datum) (datum->syntax . S47e8@S2d92@datum->syntax) (bound-identifier=? . S47df@S2d80@bound-identifier=?) (make-i/o-write-error . S4b49@S49b6@make-i/o-write-error) (make-i/o-read-error . S4b41@S49a1@make-i/o-read-error) (make-i/o-port-error . S4b85@S4a57@make-i/o-port-error) (make-i/o-invalid-position-error . S4b51@S49cd@make-i/o-invalid-position-error) (make-i/o-filename-error . S4b5b@S49e8@make-i/o-filename-error) (make-i/o-file-protection-error . S4b65@S4a01@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . S4b6d@S4a16@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . S4b7d@S4a40@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . S4b75@S4a2b@make-i/o-file-already-exists-error) (make-i/o-error . S4b39@S498c@make-i/o-error) (make-i/o-encoding-error . S4b97@S4a87@make-i/o-encoding-error) (make-i/o-decoding-error . S4b8f@S4a70@make-i/o-decoding-error) (i/o-write-error? . S4b4a@S49b8@i/o-write-error?) (i/o-read-error? . S4b42@S49a3@i/o-read-error?) (i/o-port-error? . S4b87@S4a5b@i/o-port-error?) (i/o-invalid-position-error? . S4b53@S49d1@i/o-invalid-position-error?) (i/o-filename-error? . S4b5d@S49ec@i/o-filename-error?) (i/o-file-protection-error? . S4b66@S4a03@i/o-file-protection-error?) (i/o-file-is-read-only-error? . S4b6e@S4a18@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . S4b7e@S4a42@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . S4b76@S4a2d@i/o-file-already-exists-error?) (i/o-error? . S4b3a@S498e@i/o-error?) (i/o-error-position . S4b54@S49d3@i/o-error-position) (i/o-error-port . S4b88@S4a5d@i/o-error-port) (i/o-error-filename . S4b5e@S49ee@i/o-error-filename) (i/o-encoding-error? . S4b99@S4a8b@i/o-encoding-error?) (i/o-encoding-error-char . S4b9a@S4a8d@i/o-encoding-error-char) (i/o-decoding-error? . S4b90@S4a72@i/o-decoding-error?) (scheme-report-environment . S47d4@S2d6a@scheme-report-environment) (null-environment . S47d3@S2d68@null-environment) (command-line . S4d1e@S4bc6@command-line) (eval . S47d6@S2d6e@eval) (environment . S47d2@S2d66@environment) (who-condition? . S4b05@S4902@who-condition?) (warning? . S4ad2@S487a@warning?) (violation? . S4aea@S48b9@violation?) (undefined-violation? . S4b32@S4979@undefined-violation?) (syntax-violation? . S4b28@S4960@syntax-violation?) (syntax-violation-subform . S4b2a@S4964@syntax-violation-subform) (syntax-violation-form . S4b29@S4962@syntax-violation-form) (syntax-violation . S47e6@S2d8e@syntax-violation) (serious-condition? . S4ada@S488f@serious-condition?) (non-continuable-violation? . S4b0e@S4919@non-continuable-violation?) (message-condition? . S4ac9@S4863@message-condition?) (make-who-condition . S4b03@S48fe@make-who-condition) (make-warning . S4ad1@S4878@make-warning) (make-violation . S4ae9@S48b7@make-violation) (make-undefined-violation . S4b31@S4977@make-undefined-violation) (make-syntax-violation . S4b25@S495a@make-syntax-violation) (make-serious-condition . S4ad9@S488d@make-serious-condition) (make-non-continuable-violation . S4b0d@S4917@make-non-continuable-violation) (make-message-condition . S4ac7@S485f@make-message-condition) (make-lexical-violation . S4b1d@S4941@make-lexical-violation) (make-irritants-condition . S4af9@S48e3@make-irritants-condition) (make-implementation-restriction-violation . S4b15@S492c@make-implementation-restriction-violation) (make-error . S4ae1@S48a2@make-error) (make-assertion-violation . S4af1@S48cc@make-assertion-violation) (lexical-violation? . S4b1e@S4943@lexical-violation?) (irritants-condition? . S4afb@S48e7@irritants-condition?) (implementation-restriction-violation? . S4b16@S492e@implementation-restriction-violation?) (error? . S4ae2@S48a4@error?) (condition-who . S4b06@S4904@condition-who) (condition-message . S4aca@S4865@condition-message) (condition-irritants . S4afc@S48e9@condition-irritants) (assertion-violation? . S4af2@S48ce@assertion-violation?) (no-nans-violation? . S4baa@S4ab7@no-nans-violation?) (no-infinities-violation? . S4ba2@S4aa2@no-infinities-violation?) (make-no-nans-violation . S4ba9@S4ab5@make-no-nans-violation) (make-no-infinities-violation . S4ba1@S4aa0@make-no-infinities-violation) (assertion-error . S47e3@S2d88@assertion-error))))) (if S507a@t (cdr S507a@t) '#f)))) (S28bb@S2707@install-library 'S5055 '(mosh interaction) '() '() '() '() '((regexp? . S504d) (alist->eq-hash-table . S5049) (format . S5046) (string-split . S503b) (call-process . S5035) (set-current-directory! . S5031) (expand-path . S5030) (current-directory . S502f) (%spawn . S502e) (%waitpid . S502d) (simple-struct-name . S502c) (simple-struct-set! . S502b) (simple-struct-ref . S502a) (make-simple-struct . S5029) (simple-struct? . S5028) (pointer-ref-c-int64 . S5027) (pointer-ref-c-int32 . S5026) (pointer-ref-c-int16 . S5025) (pointer-ref-c-int8 . S5024) (pointer-ref-c-uint64 . S5023) (pointer-ref-c-uint32 . S5022) (pointer-ref-c-uint16 . S5021) (pointer-ref-c-uint8 . S5020) (pointer-set-c-uint64! . S501f) (pointer-set-c-uint32! . S501e) (pointer-set-c-uint16! . S501d) (pointer-set-c-uint8! . S501c) (pointer-set-c-int64! . S501b) (pointer-set-c-int32! . S501a) (pointer-set-c-int16! . S5019) (pointer-set-c-int8! . S5018) (pointer-set-c-pointer! . S5017) (pointer-set-c-double! . S5016) (pointer-set-c-float! . S5015) (pointer-set-c-long-long! . S5014) (pointer-set-c-long! . S5013) (pointer-set-c-int! . S5012) (pointer-set-c-short! . S5011) (pointer-set-c-char! . S5010) (pointer-ref-c-pointer . S500f) (pointer-ref-c-double . S500e) (pointer-ref-c-float . S500d) (pointer-ref-c-unsigned-long-long . S500c) (pointer-ref-c-signed-long-long . S500b) (pointer-ref-c-unsigned-long . S500a) (pointer-ref-c-signed-long . S5009) (pointer-ref-c-unsigned-int . S5008) (pointer-ref-c-signed-int . S5007) (pointer-ref-c-unsigned-short . S5006) (pointer-ref-c-signed-short . S5005) (pointer-ref-c-unsigned-char . S5004) (pointer-ref-c-signed-char . S5003) (pointer->integer . S5002) (integer->pointer . S5001) (pointer? . S5000) (shared-errno . S4fff) (%ffi-supported? . S4ffc) (%ffi-pointer->string . S4ffb) (%ffi-call->string-or-zero . S4ffa) (%ffi-call->double . S4ff9) (%ffi-call->void* . S4ff8) (%ffi-call->void . S4ff7) (%ffi-call->char . S4ff6) (%ffi-call->int . S4ff5) (%ffi-lookup . S4ff4) (%ffi-open . S4ff3) (%fork . S4ff2) (%pipe . S4ff1) (p . S4ff0) (whereis . S4fd4) (register . S4fd3) (vm-join! . S4fd2) (vm-set-value! . S4fd1) (vm? . S4fd0) (main-vm? . S4fcf) (vm-eval . S4fce) (vm-self . S4fcd) (vm-start! . S4fcc) (make-vm . S4fcb) (mutex-try-lock! . S4fca) (mutex-unlock! . S4fc9) (mutex-lock! . S4fc8) (mutex? . S4fc7) (make-mutex . S4fc6) (condition-variable-notify-all! . S4fc5) (condition-variable-notify! . S4fc4) (condition-variable-wait! . S4fc3) (make-condition-variable . S4fc2) (string-upcase . S4faa) (string-titlecase . S4fa9) (string-normalize-nfkd . S4fa8) (string-normalize-nfkc . S4fa7) (string-normalize-nfd . S4fa6) (string-normalize-nfc . S4fa5) (string-foldcase . S4fa4) (string-downcase . S4fa3) (string-ci>? . S4fa2) (string-ci>=? . S4fa1) (string-ci=? . S4fa0) (string-ci<? . S4f9f) (string-ci<=? . S4f9e) (char-whitespace? . S4f9d) (char-upper-case? . S4f9c) (char-title-case? . S4f9b) (char-numeric? . S4f9a) (char-lower-case? . S4f99) (char-general-category . S4f98) (char-upcase . S4f97) (char-titlecase . S4f96) (char-foldcase . S4f95) (char-downcase . S4f94) (char-ci>? . S4f93) (char-ci>=? . S4f92) (char-ci=? . S4f91) (char-ci<? . S4f90) (char-ci<=? . S4f8f) (char-alphabetic? . S4f8e) (make-variable-transformer . S2ad8) (identifier? . S2d8f) (generate-temporaries . S2d7b) (free-identifier=? . S2d7d) (syntax->datum . S2d93) (datum->syntax . S2d91) (bound-identifier=? . S2d7f) (record-type-descriptor? . S4f8d) (record-predicate . S4f8c) (record-mutator . S4f8b) (record-constructor . S4f8a) (record-accessor . S4f89) (make-record-type-descriptor . S4f88) (make-record-constructor-descriptor . S4f87) (record? . S4f86) (record-type-uid . S4f85) (record-type-sealed? . S4f84) (record-type-parent . S4f83) (record-type-opaque? . S4f82) (record-type-name . S4f81) (record-type-generative? . S4f80) (record-type-field-names . S4f7f) (record-rtd . S4f7e) (record-field-mutable? . S4f7d) (delete-file . S4f7c) (file-exists? . S4f7b) (vector-sort! . S4f7a) (vector-sort . S4f79) (list-sort . S4f78) (symbol-hash . S4f77) (string-ci-hash . S4f76) (string-hash . S4f75) (equal-hash . S4f74) (hashtable-equivalence-function . S4f73) (make-hashtable . S4f72) (hashtable-hash-function . S4f71) (make-eqv-hashtable . S4f70) (make-eq-hashtable . S4f6f) (hashtable? . S4f6e) (hashtable-update! . S4f6d) (hashtable-size . S4f6c) (hashtable-set! . S4f6b) (hashtable-ref . S4f6a) (hashtable-mutable? . S4f69) (hashtable-keys . S4f68) (hashtable-entries . S4f67) (hashtable-delete! . S4f66) (hashtable-copy . S4f65) (hashtable-contains? . S4f64) (hashtable-clear! . S4f63) (call-with-output-file . S4f62) (call-with-input-file . S4f61) (write-char . S4f60) (write . S4f5f) (with-output-to-file . S4f5e) (with-input-from-file . S4f5d) (read-char . S4f5c) (read . S4f5b) (peek-char . S4f5a) (open-output-file . S4f59) (open-input-file . S4f58) (newline . S4f57) (display . S4f56) (close-output-port . S4f55) (close-input-port . S4f54) (eof-object? . S4f53) (eof-object . S4f52) (current-error-port . S4f51) (current-output-port . S4f50) (current-input-port . S4f4f) (output-port? . S4f4e) (input-port? . S4f4d) (utf-8-codec . S4f4c) (utf-16-codec . S4f4b) (transcoder-error-handling-mode . S4f4a) (transcoder-eol-style . S4f49) (transcoder-codec . S4f48) (transcoded-port . S4f47) (textual-port? . S4f46) (string->bytevector . S4f45) (standard-output-port . S4f44) (standard-input-port . S4f43) (standard-error-port . S4f42) (set-port-position! . S4f41) (put-u8 . S4f40) (put-string . S4f3f) (put-datum . S4f3e) (put-char . S4f3d) (put-bytevector . S4f3c) (port? . S4f3b) (port-transcoder . S4f3a) (port-position . S4f39) (port-has-set-port-position!? . S4f38) (port-has-port-position? . S4f37) (port-eof? . S4f36) (output-port-buffer-mode . S4f35) (open-string-output-port . S4f34) (open-string-input-port . S4f33) (open-file-output-port . S4f32) (open-file-input/output-port . S4f31) (open-file-input-port . S4f30) (open-bytevector-output-port . S4f2f) (open-bytevector-input-port . S4f2e) (native-transcoder . S4f2d) (native-eol-style . S4f2c) (make-transcoder . S4f2b) (latin-1-codec . S4f2a) (make-i/o-write-error . S49b5) (make-i/o-read-error . S49a0) (make-i/o-port-error . S4a56) (make-i/o-invalid-position-error . S49cc) (make-i/o-filename-error . S49e7) (make-i/o-file-protection-error . S4a00) (make-i/o-file-is-read-only-error . S4a15) (make-i/o-file-does-not-exist-error . S4a3f) (make-i/o-file-already-exists-error . S4a2a) (make-i/o-error . S498b) (make-i/o-encoding-error . S4a86) (make-i/o-decoding-error . S4a6f) (make-custom-textual-output-port . S4f29) (make-custom-textual-input/output-port . S4f28) (make-custom-textual-input-port . S4f27) (make-custom-binary-output-port . S4f26) (make-custom-binary-input/output-port . S4f25) (make-custom-binary-input-port . S4f24) (make-bytevector . S4f23) (lookahead-u8 . S4f22) (lookahead-char . S4f21) (i/o-write-error? . S49b7) (i/o-read-error? . S49a2) (i/o-port-error? . S4a5a) (i/o-invalid-position-error? . S49d0) (i/o-filename-error? . S49eb) (i/o-file-protection-error? . S4a02) (i/o-file-is-read-only-error? . S4a17) (i/o-file-does-not-exist-error? . S4a41) (i/o-file-already-exists-error? . S4a2c) (i/o-error? . S498d) (i/o-error-position . S49d2) (i/o-error-port . S4a5c) (i/o-error-filename . S49ed) (i/o-encoding-error? . S4a8a) (i/o-encoding-error-char . S4a8c) (i/o-decoding-error? . S4a71) (get-u8 . S4f20) (get-string-n! . S4f1f) (get-string-n . S4f1e) (get-string-all . S4f1d) (get-line . S4f1c) (get-datum . S4f1b) (get-char . S4f1a) (get-bytevector-some . S4f19) (get-bytevector-n! . S4f18) (get-bytevector-n . S4f17) (get-bytevector-all . S4f16) (flush-output-port . S4f15) (close-port . S4f14) (exit . S4f0c) (command-line . S4bc5) (string-fill! . S4f0b) (string-set! . S4f0a) (set-cdr! . S4f09) (set-car! . S4f08) (remove . S4f07) (remv . S4f06) (remp . S4f05) (remq . S4f04) (partition . S4f03) (memv . S4f02) (memq . S4f01) (memp . S4f00) (member . S4eff) (exists . S4efe) (for-all . S4efd) (fold-right . S4efc) (fold-left . S4efb) (find . S4efa) (filter . S4ef9) (cons* . S4ef8) (assv . S4ef7) (assq . S4ef6) (assp . S4ef5) (assoc . S4ef4) (call-with-string-output-port . S4ef3) (call-with-port . S4ef2) (call-with-bytevector-output-port . S4ef1) (bytevector->string . S4ef0) (buffer-mode? . S4eef) (binary-port? . S4eee) (with-exception-handler . S4eed) (raise-continuable . S4eec) (raise . S4eeb) (eval . S2d6d) (environment . S2d65) (make-enumeration . S4eea) (enum-set=? . S4ee9) (enum-set-universe . S4ee8) (enum-set-union . S4ee7) (enum-set-subset? . S4ee6) (enum-set-projection . S4ee5) (enum-set-member? . S4ee4) (enum-set-intersection . S4ee3) (enum-set-indexer . S4ee2) (enum-set-difference . S4ee1) (enum-set-constructor . S4ee0) (enum-set-complement . S4edf) (enum-set->list . S4ede) (who-condition? . S4901) (warning? . S4879) (violation? . S48b8) (undefined-violation? . S4978) (syntax-violation? . S495f) (syntax-violation-subform . S4963) (syntax-violation-form . S4961) (syntax-violation . S2d8d) (simple-conditions . S4edd) (serious-condition? . S488e) (non-continuable-violation? . S4918) (message-condition? . S4862) (make-who-condition . S48fd) (make-warning . S4877) (make-violation . S48b6) (make-undefined-violation . S4976) (make-syntax-violation . S4959) (make-serious-condition . S488c) (make-non-continuable-violation . S4916) (make-message-condition . S485e) (make-lexical-violation . S4940) (make-irritants-condition . S48e2) (make-implementation-restriction-violation . S492b) (make-error . S48a1) (make-assertion-violation . S48cb) (lexical-violation? . S4942) (irritants-condition? . S48e6) (implementation-restriction-violation? . S492d) (error? . S48a3) (condition-who . S4903) (condition-predicate . S4edc) (condition-message . S4864) (condition-irritants . S48e8) (condition-accessor . S4edb) (condition . S4eda) (assertion-violation? . S48cd) (condition? . S4ed9) (utf32->string . S4ed8) (utf16->string . S4ed7) (utf8->string . S4ed6) (uint-list->bytevector . S4ed5) (u8-list->bytevector . S4ed4) (string->utf8 . S4ed3) (string->utf32 . S4ed2) (string->utf16 . S4ed1) (sint-list->bytevector . S4ed0) (native-endianness . S4ecf) (bytevector? . S4ece) (bytevector=? . S4ecd) (bytevector-uint-set! . S4ecc) (bytevector-uint-ref . S4ecb) (bytevector-u8-set! . S4eca) (bytevector-u8-ref . S4ec9) (bytevector-u64-set! . S4ec8) (bytevector-u64-ref . S4ec7) (bytevector-u64-native-set! . S4ec6) (bytevector-u64-native-ref . S4ec5) (bytevector-u32-set! . S4ec4) (bytevector-u32-ref . S4ec3) (bytevector-u32-native-set! . S4ec2) (bytevector-u32-native-ref . S4ec1) (bytevector-u16-set! . S4ec0) (bytevector-u16-ref . S4ebf) (bytevector-u16-native-set! . S4ebe) (bytevector-u16-native-ref . S4ebd) (bytevector-sint-set! . S4ebc) (bytevector-sint-ref . S4ebb) (bytevector-s8-set! . S4eba) (bytevector-s8-ref . S4eb9) (bytevector-s64-set! . S4eb8) (bytevector-s64-ref . S4eb7) (bytevector-s64-native-set! . S4eb6) (bytevector-s64-native-ref . S4eb5) (bytevector-s32-set! . S4eb4) (bytevector-s32-ref . S4eb3) (bytevector-s32-native-set! . S4eb2) (bytevector-s32-native-ref . S4eb1) (bytevector-s16-set! . S4eb0) (bytevector-s16-ref . S4eaf) (bytevector-s16-native-set! . S4eae) (bytevector-s16-native-ref . S4ead) (bytevector-length . S4eac) (bytevector-ieee-single-ref . S4eab) (bytevector-ieee-single-set! . S4eaa) (bytevector-ieee-single-native-set! . S4ea9) (bytevector-ieee-single-native-ref . S4ea8) (bytevector-ieee-double-set! . S4ea7) (bytevector-ieee-double-ref . S4ea6) (bytevector-ieee-double-native-set! . S4ea5) (bytevector-ieee-double-native-ref . S4ea4) (bytevector-fill! . S4ea3) (bytevector-copy! . S4ea2) (bytevector-copy . S4ea1) (bytevector->uint-list . S4ea0) (bytevector->u8-list . S4e9f) (bytevector->sint-list . S4e9e) (no-nans-violation? . S4ab6) (no-infinities-violation? . S4aa1) (make-no-nans-violation . S4ab4) (make-no-infinities-violation . S4a9f) (real->flonum . S4e9d) (flzero? . S4e9c) (fltruncate . S4e9b) (fltan . S4e9a) (flsqrt . S4e99) (flsin . S4e98) (flround . S4e97) (flpositive? . S4e96) (flonum? . S4e95) (flodd? . S4e94) (flnumerator . S4e93) (flnegative? . S4e92) (flnan? . S4e91) (flmod0 . S4e90) (flmod . S4e8f) (flmin . S4e8e) (flmax . S4e8d) (fllog . S4e8c) (flinteger? . S4e8b) (flinfinite? . S4e8a) (flfloor . S4e89) (flfinite? . S4e88) (flexpt . S4e87) (flexp . S4e86) (fleven? . S4e85) (fldiv0-and-mod0 . S4e84) (fldiv0 . S4e83) (fldiv-and-mod . S4e82) (fldiv . S4e81) (fldenominator . S4e80) (flcos . S4e7f) (flceiling . S4e7e) (flatan . S4e7d) (flasin . S4e7c) (flacos . S4e7b) (flabs . S4e7a) (fl>? . S4e79) (fl>=? . S4e78) (fl=? . S4e77) (fl<? . S4e76) (fl<=? . S4e75) (fl/ . S4e74) (fl- . S4e73) (fl+ . S4e72) (fl* . S4e71) (fixnum->flonum . S4e70) (fxzero? . S4e6f) (fxxor . S4e6e) (fxrotate-bit-field . S4e6d) (fxreverse-bit-field . S4e6c) (fxpositive? . S4e6b) (fxodd? . S4e6a) (fxnot . S4e69) (fxnegative? . S4e68) (fxmod0 . S4e67) (fxmod . S4e66) (fxmin . S4e65) (fxmax . S4e64) (fxlength . S4e63) (fxior . S4e62) (fxif . S4e61) (fxfirst-bit-set . S4e60) (fxeven? . S4e5f) (fxdiv0-and-mod0 . S4e5e) (fxdiv0 . S4e5d) (fxdiv-and-mod . S4e5c) (fxdiv . S4e5b) (fxcopy-bit-field . S4e5a) (fxcopy-bit . S4e59) (fxbit-set? . S4e58) (fxbit-field . S4e57) (fxbit-count . S4e56) (fxarithmetic-shift-right . S4e55) (fxarithmetic-shift-left . S4e54) (fxarithmetic-shift . S4e53) (fxand . S4e52) (fx>? . S4e51) (fx>=? . S4e50) (fx=? . S4e4f) (fx<? . S4e4e) (fx<=? . S4e4d) (fx-/carry . S4e4c) (fx- . S4e4b) (fx+/carry . S4e4a) (fx+ . S4e49) (fx*/carry . S4e48) (fx* . S4e47) (greatest-fixnum . S4e46) (least-fixnum . S4e45) (fixnum-width . S4e44) (fixnum? . S4e43) (bitwise-rotate-bit-field . S4e42) (bitwise-reverse-bit-field . S4e41) (bitwise-length . S4e40) (bitwise-if . S4e3f) (bitwise-first-bit-set . S4e3e) (bitwise-copy-bit-field . S4e3d) (bitwise-copy-bit . S4e3c) (bitwise-bit-set? . S4e3b) (bitwise-bit-field . S4e3a) (bitwise-bit-count . S4e39) (bitwise-xor . S4e38) (bitwise-ior . S4e37) (bitwise-and . S4e36) (bitwise-not . S4e35) (bitwise-arithmetic-shift-right . S4e34) (bitwise-arithmetic-shift-left . S4e33) (bitwise-arithmetic-shift . S4e32) (zero? . S4e31) (vector? . S4e30) (vector-set! . S4e2f) (vector-ref . S4e2e) (vector-map . S4e2d) (vector-length . S4e2c) (vector-for-each . S4e2b) (vector-fill! . S4e2a) (vector->list . S4e29) (vector . S4e28) (values . S4e27) (truncate . S4e26) (tan . S4e25) (symbol? . S4e24) (symbol=? . S4e23) (symbol->string . S4e22) (substring . S4e21) (string? . S4e20) (string>? . S4e1f) (string>=? . S4e1e) (string=? . S4e1d) (string<? . S4e1c) (string<=? . S4e1b) (string-ref . S4e1a) (string-length . S4e19) (string-for-each . S4e18) (string-copy . S4e17) (string-append . S4e16) (string->symbol . S4e15) (string->number . S4e14) (string->list . S4e13) (string . S4e12) (sqrt . S4e11) (sin . S4e10) (round . S4e0f) (reverse . S4e0e) (real? . S4e0d) (real-valued? . S4e0c) (real-part . S4e0b) (rationalize . S4e0a) (rational? . S4e09) (rational-valued? . S4e08) (procedure? . S4e07) (positive? . S4e06) (pair? . S4e05) (odd? . S4e04) (numerator . S4e03) (number? . S4e02) (number->string . S4e01) (null? . S4e00) (not . S4dff) (negative? . S4dfe) (nan? . S4dfd) (min . S4dfc) (max . S4dfb) (map . S4dfa) (make-vector . S4df9) (make-string . S4df8) (make-rectangular . S4df7) (make-polar . S4df6) (magnitude . S4df5) (log . S4df4) (list? . S4df3) (list-tail . S4df2) (list-ref . S4df1) (list->vector . S4df0) (list->string . S4def) (list . S4dee) (length . S4ded) (lcm . S4dec) (integer? . S4deb) (integer-valued? . S4dea) (integer->char . S4de9) (infinite? . S4de8) (inexact? . S4de7) (inexact . S4de6) (imag-part . S4de5) (gcd . S4de4) (for-each . S4de3) (floor . S4de2) (finite? . S4de1) (expt . S4de0) (exp . S4ddf) (exact? . S4dde) (exact-integer-sqrt . S4ddd) (exact . S4ddc) (even? . S4ddb) (error . S4dda) (eqv? . S4dd9) (equal? . S4dd8) (eq? . S4dd7) (dynamic-wind . S4dd6) (div0-and-mod0 . S4dd5) (mod0 . S4dd4) (div0 . S4dd3) (div-and-mod . S4dd2) (mod . S4dd1) (div . S4dd0) (denominator . S4dcf) (cos . S4dce) (cons . S4dcd) (complex? . S4dcc) (char? . S4dcb) (char>? . S4dca) (char>=? . S4dc9) (char=? . S4dc8) (char<? . S4dc7) (char<=? . S4dc6) (char->integer . S4dc5) (ceiling . S4dc4) (call-with-values . S4dc3) (call/cc . S4dc2) (call-with-current-continuation . S4dc1) (cddddr . S4dc0) (cdddar . S4dbf) (cddadr . S4dbe) (cddaar . S4dbd) (cdaddr . S4dbc) (cdadar . S4dbb) (cdaadr . S4dba) (cdaaar . S4db9) (cadddr . S4db8) (caddar . S4db7) (cadadr . S4db6) (cadaar . S4db5) (caaddr . S4db4) (caadar . S4db3) (caaadr . S4db2) (caaaar . S4db1) (cdddr . S4db0) (cddar . S4daf) (cdadr . S4dae) (cdaar . S4dad) (caddr . S4dac) (cadar . S4dab) (caadr . S4daa) (caaar . S4da9) (cddr . S4da8) (cdar . S4da7) (cadr . S4da6) (caar . S4da5) (cdr . S4da4) (car . S4da3) (boolean? . S4da2) (boolean=? . S4da1) (atan . S4da0) (assertion-violation . S4d9f) (asin . S4d9e) (apply . S4d9d) (append . S4d9c) (angle . S4d9b) (acos . S4d9a) (abs . S4d99) (/ . S4d98) (* . S4d97) (- . S4d96) (+ . S4d95) (>= . S4d94) (> . S4d93) (= . S4d92) (<= . S4d91) (< . S4d90) (library . S4d8f) (&no-nans . S4d8e) (&no-infinities . S4d8d) (&i/o-encoding . S4d8c) (&i/o-decoding . S4d8b) (&i/o-port . S4d8a) (&i/o-file-does-not-exist . S4d89) (&i/o-file-already-exists . S4d88) (&i/o-file-is-read-only . S4d87) (&i/o-file-protection . S4d86) (&i/o-filename . S4d85) (&i/o-invalid-position . S4d84) (&i/o-write . S4d83) (&i/o-read . S4d82) (&i/o . S4d81) (&undefined . S4d80) (&syntax . S4d7f) (&lexical . S4d7e) (&implementation-restriction . S4d7d) (&non-continuable . S4d7c) (&who . S4d7b) (&irritants . S4d7a) (&assertion . S4d79) (&violation . S4d78) (&error . S4d77) (&serious . S4d76) (&warning . S4d75) (&message . S4d74) (&condition . S4d73) (define-condition-type . S4d72) (define-enumeration . S4d71) (define-record-type . S4d70) (parent-rtd . S4d6f) (nongenerative . S4d6e) (opaque . S4d6d) (sealed . S4d6c) (protocol . S4d6b) (parent . S4d6a) (immutable . S4d69) (mutable . S4d68) (fields . S4d67) (error-handling-mode . S4d66) (file-options . S4d65) (buffer-mode . S4d64) (eol-style . S4d63) (guard . S4d62) (unsyntax-splicing . S4d5f) (unsyntax . S4d5e) (unquote-splicing . S4d5d) (unquote . S4d5c) (_ . S4d5b) (else . S4d5a) (=> . S4d59) (... . S4d58) (assert . S4d57) (endianness . S4d56) (time . S4d54) (do . S4d53) (cond . S4d52) (let* . S4d51) (let*-values . S4d50) (let-values . S4d4f) (identifier-syntax . S4d4e) (with-syntax . S4d4d) (quasisyntax . S4d4c) (quasiquote . S4d4b) (syntax-rules . S4d4a) (include . S4d49) (record-constructor-descriptor . S4d47) (record-type-descriptor . S4d46) (case . S4d45) (unless . S4d43) (when . S4d42) (or . S4d41) (and . S4d40) (if . S4d3f) (let . S4d3e) (letrec* . S4d3d) (letrec . S4d3c) (case-lambda . S4d3a) (lambda . S4d39) (syntax . S4d38) (syntax-case . S4d37) (quote . S4d36) (letrec-syntax . S4d34) (let-syntax . S4d33) (set! . S4d32) (import . S4d31) (begin . S4d30) (define-syntax . S4d2e) (define . S4d2d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5056 '(psyntax null-environment-5) '() '() '() '() '((make-promise . S4f0d) (unquote-splicing . S4d5d) (unquote . S4d5c) (_ . S4d5b) (else . S4d5a) (=> . S4d59) (... . S4d58) (delay . S4d55) (do . S4d53) (cond . S4d52) (let* . S4d51) (quasiquote . S4d4b) (syntax-rules . S4d4a) (case . S4d45) (or . S4d41) (and . S4d40) (if . S4d3f) (let . S4d3e) (letrec . S4d3c) (lambda . S4d39) (quote . S4d36) (letrec-syntax . S4d34) (let-syntax . S4d33) (set! . S4d32) (begin . S4d30) (define-syntax . S4d2e) (define . S4d2d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5057 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . S4fa2) (string-ci>=? . S4fa1) (string-ci=? . S4fa0) (string-ci<? . S4f9f) (string-ci<=? . S4f9e) (char-whitespace? . S4f9d) (char-upper-case? . S4f9c) (char-numeric? . S4f9a) (char-lower-case? . S4f99) (char-upcase . S4f97) (char-downcase . S4f94) (char-ci>? . S4f93) (char-ci>=? . S4f92) (char-ci=? . S4f91) (char-ci<? . S4f90) (char-ci<=? . S4f8f) (char-alphabetic? . S4f8e) (call-with-output-file . S4f62) (call-with-input-file . S4f61) (write-char . S4f60) (write . S4f5f) (with-output-to-file . S4f5e) (with-input-from-file . S4f5d) (read-char . S4f5c) (read . S4f5b) (peek-char . S4f5a) (open-output-file . S4f59) (open-input-file . S4f58) (newline . S4f57) (display . S4f56) (close-output-port . S4f55) (close-input-port . S4f54) (eof-object . S4f52) (current-output-port . S4f50) (current-input-port . S4f4f) (output-port? . S4f4e) (input-port? . S4f4d) (scheme-report-environment . S2d69) (quotient . S4f13) (null-environment . S2d67) (remainder . S4f12) (modulo . S4f11) (inexact->exact . S4f10) (force . S4f0f) (exact->inexact . S4f0e) (make-promise . S4f0d) (string-fill! . S4f0b) (string-set! . S4f0a) (set-cdr! . S4f09) (set-car! . S4f08) (memv . S4f02) (memq . S4f01) (member . S4eff) (assv . S4ef7) (assq . S4ef6) (assoc . S4ef4) (eval . S2d6d) (zero? . S4e31) (vector? . S4e30) (vector-set! . S4e2f) (vector-ref . S4e2e) (vector-length . S4e2c) (vector-fill! . S4e2a) (vector->list . S4e29) (vector . S4e28) (values . S4e27) (truncate . S4e26) (tan . S4e25) (symbol? . S4e24) (symbol->string . S4e22) (substring . S4e21) (string? . S4e20) (string>? . S4e1f) (string>=? . S4e1e) (string=? . S4e1d) (string<? . S4e1c) (string<=? . S4e1b) (string-ref . S4e1a) (string-length . S4e19) (string-copy . S4e17) (string-append . S4e16) (string->symbol . S4e15) (string->number . S4e14) (string->list . S4e13) (string . S4e12) (sqrt . S4e11) (sin . S4e10) (round . S4e0f) (reverse . S4e0e) (real? . S4e0d) (real-part . S4e0b) (rationalize . S4e0a) (rational? . S4e09) (procedure? . S4e07) (positive? . S4e06) (pair? . S4e05) (odd? . S4e04) (numerator . S4e03) (number? . S4e02) (number->string . S4e01) (not . S4dff) (negative? . S4dfe) (min . S4dfc) (max . S4dfb) (map . S4dfa) (make-vector . S4df9) (make-string . S4df8) (make-rectangular . S4df7) (make-polar . S4df6) (magnitude . S4df5) (log . S4df4) (list? . S4df3) (list-tail . S4df2) (list-ref . S4df1) (list->vector . S4df0) (list->string . S4def) (list . S4dee) (length . S4ded) (lcm . S4dec) (integer? . S4deb) (integer->char . S4de9) (inexact? . S4de7) (imag-part . S4de5) (gcd . S4de4) (for-each . S4de3) (floor . S4de2) (expt . S4de0) (exp . S4ddf) (exact? . S4dde) (even? . S4ddb) (eqv? . S4dd9) (equal? . S4dd8) (eq? . S4dd7) (dynamic-wind . S4dd6) (denominator . S4dcf) (cos . S4dce) (cons . S4dcd) (complex? . S4dcc) (char? . S4dcb) (char>? . S4dca) (char>=? . S4dc9) (char=? . S4dc8) (char<? . S4dc7) (char<=? . S4dc6) (char->integer . S4dc5) (ceiling . S4dc4) (call-with-values . S4dc3) (call-with-current-continuation . S4dc1) (cddddr . S4dc0) (cdddar . S4dbf) (cddadr . S4dbe) (cddaar . S4dbd) (cdaddr . S4dbc) (cdadar . S4dbb) (cdaadr . S4dba) (cdaaar . S4db9) (cadddr . S4db8) (caddar . S4db7) (cadadr . S4db6) (cadaar . S4db5) (caaddr . S4db4) (caadar . S4db3) (caaadr . S4db2) (caaaar . S4db1) (cdddr . S4db0) (cddar . S4daf) (cdadr . S4dae) (cdaar . S4dad) (caddr . S4dac) (cadar . S4dab) (caadr . S4daa) (caaar . S4da9) (cddr . S4da8) (cdar . S4da7) (cadr . S4da6) (caar . S4da5) (cdr . S4da4) (car . S4da3) (boolean? . S4da2) (atan . S4da0) (asin . S4d9e) (apply . S4d9d) (append . S4d9c) (angle . S4d9b) (acos . S4d9a) (abs . S4d99) (/ . S4d98) (* . S4d97) (- . S4d96) (+ . S4d95) (>= . S4d94) (> . S4d93) (= . S4d92) (<= . S4d91) (< . S4d90) (unquote-splicing . S4d5d) (unquote . S4d5c) (else . S4d5a) (=> . S4d59) (... . S4d58) (delay . S4d55) (do . S4d53) (cond . S4d52) (let* . S4d51) (quasiquote . S4d4b) (syntax-rules . S4d4a) (case . S4d45) (or . S4d41) (and . S4d40) (if . S4d3f) (let . S4d3e) (letrec . S4d3c) (lambda . S4d39) (quote . S4d36) (letrec-syntax . S4d34) (let-syntax . S4d33) (set! . S4d32) (begin . S4d30) (define-syntax . S4d2e) (define . S4d2d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5058 '(psyntax modules) '() '() '() '() '((module . S4d2f)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5059 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S505a '(rnrs) '(6) '() '() '() '((regexp? . S504d) (string-upcase . S4faa) (string-titlecase . S4fa9) (string-normalize-nfkd . S4fa8) (string-normalize-nfkc . S4fa7) (string-normalize-nfd . S4fa6) (string-normalize-nfc . S4fa5) (string-foldcase . S4fa4) (string-downcase . S4fa3) (string-ci>? . S4fa2) (string-ci>=? . S4fa1) (string-ci=? . S4fa0) (string-ci<? . S4f9f) (string-ci<=? . S4f9e) (char-whitespace? . S4f9d) (char-upper-case? . S4f9c) (char-title-case? . S4f9b) (char-numeric? . S4f9a) (char-lower-case? . S4f99) (char-general-category . S4f98) (char-upcase . S4f97) (char-titlecase . S4f96) (char-foldcase . S4f95) (char-downcase . S4f94) (char-ci>? . S4f93) (char-ci>=? . S4f92) (char-ci=? . S4f91) (char-ci<? . S4f90) (char-ci<=? . S4f8f) (char-alphabetic? . S4f8e) (make-variable-transformer . S2ad8) (identifier? . S2d8f) (generate-temporaries . S2d7b) (free-identifier=? . S2d7d) (syntax->datum . S2d93) (datum->syntax . S2d91) (bound-identifier=? . S2d7f) (record-type-descriptor? . S4f8d) (record-predicate . S4f8c) (record-mutator . S4f8b) (record-constructor . S4f8a) (record-accessor . S4f89) (make-record-type-descriptor . S4f88) (make-record-constructor-descriptor . S4f87) (record? . S4f86) (record-type-uid . S4f85) (record-type-sealed? . S4f84) (record-type-parent . S4f83) (record-type-opaque? . S4f82) (record-type-name . S4f81) (record-type-generative? . S4f80) (record-type-field-names . S4f7f) (record-rtd . S4f7e) (record-field-mutable? . S4f7d) (delete-file . S4f7c) (file-exists? . S4f7b) (vector-sort! . S4f7a) (vector-sort . S4f79) (list-sort . S4f78) (symbol-hash . S4f77) (string-ci-hash . S4f76) (string-hash . S4f75) (equal-hash . S4f74) (hashtable-equivalence-function . S4f73) (make-hashtable . S4f72) (hashtable-hash-function . S4f71) (make-eqv-hashtable . S4f70) (make-eq-hashtable . S4f6f) (hashtable? . S4f6e) (hashtable-update! . S4f6d) (hashtable-size . S4f6c) (hashtable-set! . S4f6b) (hashtable-ref . S4f6a) (hashtable-mutable? . S4f69) (hashtable-keys . S4f68) (hashtable-entries . S4f67) (hashtable-delete! . S4f66) (hashtable-copy . S4f65) (hashtable-contains? . S4f64) (hashtable-clear! . S4f63) (call-with-output-file . S4f62) (call-with-input-file . S4f61) (write-char . S4f60) (write . S4f5f) (with-output-to-file . S4f5e) (with-input-from-file . S4f5d) (read-char . S4f5c) (read . S4f5b) (peek-char . S4f5a) (open-output-file . S4f59) (open-input-file . S4f58) (newline . S4f57) (display . S4f56) (close-output-port . S4f55) (close-input-port . S4f54) (eof-object? . S4f53) (eof-object . S4f52) (current-error-port . S4f51) (current-output-port . S4f50) (current-input-port . S4f4f) (output-port? . S4f4e) (input-port? . S4f4d) (utf-8-codec . S4f4c) (utf-16-codec . S4f4b) (transcoder-error-handling-mode . S4f4a) (transcoder-eol-style . S4f49) (transcoder-codec . S4f48) (transcoded-port . S4f47) (textual-port? . S4f46) (string->bytevector . S4f45) (standard-output-port . S4f44) (standard-input-port . S4f43) (standard-error-port . S4f42) (set-port-position! . S4f41) (put-u8 . S4f40) (put-string . S4f3f) (put-datum . S4f3e) (put-char . S4f3d) (put-bytevector . S4f3c) (port? . S4f3b) (port-transcoder . S4f3a) (port-position . S4f39) (port-has-set-port-position!? . S4f38) (port-has-port-position? . S4f37) (port-eof? . S4f36) (output-port-buffer-mode . S4f35) (open-string-output-port . S4f34) (open-string-input-port . S4f33) (open-file-output-port . S4f32) (open-file-input/output-port . S4f31) (open-file-input-port . S4f30) (open-bytevector-output-port . S4f2f) (open-bytevector-input-port . S4f2e) (native-transcoder . S4f2d) (native-eol-style . S4f2c) (make-transcoder . S4f2b) (latin-1-codec . S4f2a) (make-i/o-write-error . S49b5) (make-i/o-read-error . S49a0) (make-i/o-port-error . S4a56) (make-i/o-invalid-position-error . S49cc) (make-i/o-filename-error . S49e7) (make-i/o-file-protection-error . S4a00) (make-i/o-file-is-read-only-error . S4a15) (make-i/o-file-does-not-exist-error . S4a3f) (make-i/o-file-already-exists-error . S4a2a) (make-i/o-error . S498b) (make-i/o-encoding-error . S4a86) (make-i/o-decoding-error . S4a6f) (make-custom-textual-output-port . S4f29) (make-custom-textual-input/output-port . S4f28) (make-custom-textual-input-port . S4f27) (make-custom-binary-output-port . S4f26) (make-custom-binary-input/output-port . S4f25) (make-custom-binary-input-port . S4f24) (make-bytevector . S4f23) (lookahead-u8 . S4f22) (lookahead-char . S4f21) (i/o-write-error? . S49b7) (i/o-read-error? . S49a2) (i/o-port-error? . S4a5a) (i/o-invalid-position-error? . S49d0) (i/o-filename-error? . S49eb) (i/o-file-protection-error? . S4a02) (i/o-file-is-read-only-error? . S4a17) (i/o-file-does-not-exist-error? . S4a41) (i/o-file-already-exists-error? . S4a2c) (i/o-error? . S498d) (i/o-error-position . S49d2) (i/o-error-port . S4a5c) (i/o-error-filename . S49ed) (i/o-encoding-error? . S4a8a) (i/o-encoding-error-char . S4a8c) (i/o-decoding-error? . S4a71) (get-u8 . S4f20) (get-string-n! . S4f1f) (get-string-n . S4f1e) (get-string-all . S4f1d) (get-line . S4f1c) (get-datum . S4f1b) (get-char . S4f1a) (get-bytevector-some . S4f19) (get-bytevector-n! . S4f18) (get-bytevector-n . S4f17) (get-bytevector-all . S4f16) (flush-output-port . S4f15) (close-port . S4f14) (exit . S4f0c) (command-line . S4bc5) (remove . S4f07) (remv . S4f06) (remp . S4f05) (remq . S4f04) (partition . S4f03) (memv . S4f02) (memq . S4f01) (memp . S4f00) (member . S4eff) (exists . S4efe) (for-all . S4efd) (fold-right . S4efc) (fold-left . S4efb) (find . S4efa) (filter . S4ef9) (cons* . S4ef8) (assv . S4ef7) (assq . S4ef6) (assp . S4ef5) (assoc . S4ef4) (call-with-string-output-port . S4ef3) (call-with-port . S4ef2) (call-with-bytevector-output-port . S4ef1) (bytevector->string . S4ef0) (buffer-mode? . S4eef) (binary-port? . S4eee) (with-exception-handler . S4eed) (raise-continuable . S4eec) (raise . S4eeb) (make-enumeration . S4eea) (enum-set=? . S4ee9) (enum-set-universe . S4ee8) (enum-set-union . S4ee7) (enum-set-subset? . S4ee6) (enum-set-projection . S4ee5) (enum-set-member? . S4ee4) (enum-set-intersection . S4ee3) (enum-set-indexer . S4ee2) (enum-set-difference . S4ee1) (enum-set-constructor . S4ee0) (enum-set-complement . S4edf) (enum-set->list . S4ede) (who-condition? . S4901) (warning? . S4879) (violation? . S48b8) (undefined-violation? . S4978) (syntax-violation? . S495f) (syntax-violation-subform . S4963) (syntax-violation-form . S4961) (syntax-violation . S2d8d) (simple-conditions . S4edd) (serious-condition? . S488e) (non-continuable-violation? . S4918) (message-condition? . S4862) (make-who-condition . S48fd) (make-warning . S4877) (make-violation . S48b6) (make-undefined-violation . S4976) (make-syntax-violation . S4959) (make-serious-condition . S488c) (make-non-continuable-violation . S4916) (make-message-condition . S485e) (make-lexical-violation . S4940) (make-irritants-condition . S48e2) (make-implementation-restriction-violation . S492b) (make-error . S48a1) (make-assertion-violation . S48cb) (lexical-violation? . S4942) (irritants-condition? . S48e6) (implementation-restriction-violation? . S492d) (error? . S48a3) (condition-who . S4903) (condition-predicate . S4edc) (condition-message . S4864) (condition-irritants . S48e8) (condition-accessor . S4edb) (condition . S4eda) (assertion-violation? . S48cd) (condition? . S4ed9) (utf32->string . S4ed8) (utf16->string . S4ed7) (utf8->string . S4ed6) (uint-list->bytevector . S4ed5) (u8-list->bytevector . S4ed4) (string->utf8 . S4ed3) (string->utf32 . S4ed2) (string->utf16 . S4ed1) (sint-list->bytevector . S4ed0) (native-endianness . S4ecf) (bytevector? . S4ece) (bytevector=? . S4ecd) (bytevector-uint-set! . S4ecc) (bytevector-uint-ref . S4ecb) (bytevector-u8-set! . S4eca) (bytevector-u8-ref . S4ec9) (bytevector-u64-set! . S4ec8) (bytevector-u64-ref . S4ec7) (bytevector-u64-native-set! . S4ec6) (bytevector-u64-native-ref . S4ec5) (bytevector-u32-set! . S4ec4) (bytevector-u32-ref . S4ec3) (bytevector-u32-native-set! . S4ec2) (bytevector-u32-native-ref . S4ec1) (bytevector-u16-set! . S4ec0) (bytevector-u16-ref . S4ebf) (bytevector-u16-native-set! . S4ebe) (bytevector-u16-native-ref . S4ebd) (bytevector-sint-set! . S4ebc) (bytevector-sint-ref . S4ebb) (bytevector-s8-set! . S4eba) (bytevector-s8-ref . S4eb9) (bytevector-s64-set! . S4eb8) (bytevector-s64-ref . S4eb7) (bytevector-s64-native-set! . S4eb6) (bytevector-s64-native-ref . S4eb5) (bytevector-s32-set! . S4eb4) (bytevector-s32-ref . S4eb3) (bytevector-s32-native-set! . S4eb2) (bytevector-s32-native-ref . S4eb1) (bytevector-s16-set! . S4eb0) (bytevector-s16-ref . S4eaf) (bytevector-s16-native-set! . S4eae) (bytevector-s16-native-ref . S4ead) (bytevector-length . S4eac) (bytevector-ieee-single-ref . S4eab) (bytevector-ieee-single-set! . S4eaa) (bytevector-ieee-single-native-set! . S4ea9) (bytevector-ieee-single-native-ref . S4ea8) (bytevector-ieee-double-set! . S4ea7) (bytevector-ieee-double-ref . S4ea6) (bytevector-ieee-double-native-set! . S4ea5) (bytevector-ieee-double-native-ref . S4ea4) (bytevector-fill! . S4ea3) (bytevector-copy! . S4ea2) (bytevector-copy . S4ea1) (bytevector->uint-list . S4ea0) (bytevector->u8-list . S4e9f) (bytevector->sint-list . S4e9e) (no-nans-violation? . S4ab6) (no-infinities-violation? . S4aa1) (make-no-nans-violation . S4ab4) (make-no-infinities-violation . S4a9f) (real->flonum . S4e9d) (flzero? . S4e9c) (fltruncate . S4e9b) (fltan . S4e9a) (flsqrt . S4e99) (flsin . S4e98) (flround . S4e97) (flpositive? . S4e96) (flonum? . S4e95) (flodd? . S4e94) (flnumerator . S4e93) (flnegative? . S4e92) (flnan? . S4e91) (flmod0 . S4e90) (flmod . S4e8f) (flmin . S4e8e) (flmax . S4e8d) (fllog . S4e8c) (flinteger? . S4e8b) (flinfinite? . S4e8a) (flfloor . S4e89) (flfinite? . S4e88) (flexpt . S4e87) (flexp . S4e86) (fleven? . S4e85) (fldiv0-and-mod0 . S4e84) (fldiv0 . S4e83) (fldiv-and-mod . S4e82) (fldiv . S4e81) (fldenominator . S4e80) (flcos . S4e7f) (flceiling . S4e7e) (flatan . S4e7d) (flasin . S4e7c) (flacos . S4e7b) (flabs . S4e7a) (fl>? . S4e79) (fl>=? . S4e78) (fl=? . S4e77) (fl<? . S4e76) (fl<=? . S4e75) (fl/ . S4e74) (fl- . S4e73) (fl+ . S4e72) (fl* . S4e71) (fixnum->flonum . S4e70) (fxzero? . S4e6f) (fxxor . S4e6e) (fxrotate-bit-field . S4e6d) (fxreverse-bit-field . S4e6c) (fxpositive? . S4e6b) (fxodd? . S4e6a) (fxnot . S4e69) (fxnegative? . S4e68) (fxmod0 . S4e67) (fxmod . S4e66) (fxmin . S4e65) (fxmax . S4e64) (fxlength . S4e63) (fxior . S4e62) (fxif . S4e61) (fxfirst-bit-set . S4e60) (fxeven? . S4e5f) (fxdiv0-and-mod0 . S4e5e) (fxdiv0 . S4e5d) (fxdiv-and-mod . S4e5c) (fxdiv . S4e5b) (fxcopy-bit-field . S4e5a) (fxcopy-bit . S4e59) (fxbit-set? . S4e58) (fxbit-field . S4e57) (fxbit-count . S4e56) (fxarithmetic-shift-right . S4e55) (fxarithmetic-shift-left . S4e54) (fxarithmetic-shift . S4e53) (fxand . S4e52) (fx>? . S4e51) (fx>=? . S4e50) (fx=? . S4e4f) (fx<? . S4e4e) (fx<=? . S4e4d) (fx-/carry . S4e4c) (fx- . S4e4b) (fx+/carry . S4e4a) (fx+ . S4e49) (fx*/carry . S4e48) (fx* . S4e47) (greatest-fixnum . S4e46) (least-fixnum . S4e45) (fixnum-width . S4e44) (fixnum? . S4e43) (bitwise-rotate-bit-field . S4e42) (bitwise-reverse-bit-field . S4e41) (bitwise-length . S4e40) (bitwise-if . S4e3f) (bitwise-first-bit-set . S4e3e) (bitwise-copy-bit-field . S4e3d) (bitwise-copy-bit . S4e3c) (bitwise-bit-set? . S4e3b) (bitwise-bit-field . S4e3a) (bitwise-bit-count . S4e39) (bitwise-xor . S4e38) (bitwise-ior . S4e37) (bitwise-and . S4e36) (bitwise-not . S4e35) (bitwise-arithmetic-shift-right . S4e34) (bitwise-arithmetic-shift-left . S4e33) (bitwise-arithmetic-shift . S4e32) (zero? . S4e31) (vector? . S4e30) (vector-set! . S4e2f) (vector-ref . S4e2e) (vector-map . S4e2d) (vector-length . S4e2c) (vector-for-each . S4e2b) (vector-fill! . S4e2a) (vector->list . S4e29) (vector . S4e28) (values . S4e27) (truncate . S4e26) (tan . S4e25) (symbol? . S4e24) (symbol=? . S4e23) (symbol->string . S4e22) (substring . S4e21) (string? . S4e20) (string>? . S4e1f) (string>=? . S4e1e) (string=? . S4e1d) (string<? . S4e1c) (string<=? . S4e1b) (string-ref . S4e1a) (string-length . S4e19) (string-for-each . S4e18) (string-copy . S4e17) (string-append . S4e16) (string->symbol . S4e15) (string->number . S4e14) (string->list . S4e13) (string . S4e12) (sqrt . S4e11) (sin . S4e10) (round . S4e0f) (reverse . S4e0e) (real? . S4e0d) (real-valued? . S4e0c) (real-part . S4e0b) (rationalize . S4e0a) (rational? . S4e09) (rational-valued? . S4e08) (procedure? . S4e07) (positive? . S4e06) (pair? . S4e05) (odd? . S4e04) (numerator . S4e03) (number? . S4e02) (number->string . S4e01) (null? . S4e00) (not . S4dff) (negative? . S4dfe) (nan? . S4dfd) (min . S4dfc) (max . S4dfb) (map . S4dfa) (make-vector . S4df9) (make-string . S4df8) (make-rectangular . S4df7) (make-polar . S4df6) (magnitude . S4df5) (log . S4df4) (list? . S4df3) (list-tail . S4df2) (list-ref . S4df1) (list->vector . S4df0) (list->string . S4def) (list . S4dee) (length . S4ded) (lcm . S4dec) (integer? . S4deb) (integer-valued? . S4dea) (integer->char . S4de9) (infinite? . S4de8) (inexact? . S4de7) (inexact . S4de6) (imag-part . S4de5) (gcd . S4de4) (for-each . S4de3) (floor . S4de2) (finite? . S4de1) (expt . S4de0) (exp . S4ddf) (exact? . S4dde) (exact-integer-sqrt . S4ddd) (exact . S4ddc) (even? . S4ddb) (error . S4dda) (eqv? . S4dd9) (equal? . S4dd8) (eq? . S4dd7) (dynamic-wind . S4dd6) (div0-and-mod0 . S4dd5) (mod0 . S4dd4) (div0 . S4dd3) (div-and-mod . S4dd2) (mod . S4dd1) (div . S4dd0) (denominator . S4dcf) (cos . S4dce) (cons . S4dcd) (complex? . S4dcc) (char? . S4dcb) (char>? . S4dca) (char>=? . S4dc9) (char=? . S4dc8) (char<? . S4dc7) (char<=? . S4dc6) (char->integer . S4dc5) (ceiling . S4dc4) (call-with-values . S4dc3) (call/cc . S4dc2) (call-with-current-continuation . S4dc1) (cddddr . S4dc0) (cdddar . S4dbf) (cddadr . S4dbe) (cddaar . S4dbd) (cdaddr . S4dbc) (cdadar . S4dbb) (cdaadr . S4dba) (cdaaar . S4db9) (cadddr . S4db8) (caddar . S4db7) (cadadr . S4db6) (cadaar . S4db5) (caaddr . S4db4) (caadar . S4db3) (caaadr . S4db2) (caaaar . S4db1) (cdddr . S4db0) (cddar . S4daf) (cdadr . S4dae) (cdaar . S4dad) (caddr . S4dac) (cadar . S4dab) (caadr . S4daa) (caaar . S4da9) (cddr . S4da8) (cdar . S4da7) (cadr . S4da6) (caar . S4da5) (cdr . S4da4) (car . S4da3) (boolean? . S4da2) (boolean=? . S4da1) (atan . S4da0) (assertion-violation . S4d9f) (asin . S4d9e) (apply . S4d9d) (append . S4d9c) (angle . S4d9b) (acos . S4d9a) (abs . S4d99) (/ . S4d98) (* . S4d97) (- . S4d96) (+ . S4d95) (>= . S4d94) (> . S4d93) (= . S4d92) (<= . S4d91) (< . S4d90) (&no-nans . S4d8e) (&no-infinities . S4d8d) (&i/o-encoding . S4d8c) (&i/o-decoding . S4d8b) (&i/o-port . S4d8a) (&i/o-file-does-not-exist . S4d89) (&i/o-file-already-exists . S4d88) (&i/o-file-is-read-only . S4d87) (&i/o-file-protection . S4d86) (&i/o-filename . S4d85) (&i/o-invalid-position . S4d84) (&i/o-write . S4d83) (&i/o-read . S4d82) (&i/o . S4d81) (&undefined . S4d80) (&syntax . S4d7f) (&lexical . S4d7e) (&implementation-restriction . S4d7d) (&non-continuable . S4d7c) (&who . S4d7b) (&irritants . S4d7a) (&assertion . S4d79) (&violation . S4d78) (&error . S4d77) (&serious . S4d76) (&warning . S4d75) (&message . S4d74) (&condition . S4d73) (define-condition-type . S4d72) (define-enumeration . S4d71) (define-record-type . S4d70) (parent-rtd . S4d6f) (nongenerative . S4d6e) (opaque . S4d6d) (sealed . S4d6c) (protocol . S4d6b) (parent . S4d6a) (immutable . S4d69) (mutable . S4d68) (fields . S4d67) (error-handling-mode . S4d66) (file-options . S4d65) (buffer-mode . S4d64) (eol-style . S4d63) (guard . S4d62) (unsyntax-splicing . S4d5f) (unsyntax . S4d5e) (unquote-splicing . S4d5d) (unquote . S4d5c) (_ . S4d5b) (else . S4d5a) (=> . S4d59) (... . S4d58) (assert . S4d57) (endianness . S4d56) (do . S4d53) (cond . S4d52) (let* . S4d51) (let*-values . S4d50) (let-values . S4d4f) (identifier-syntax . S4d4e) (with-syntax . S4d4d) (quasisyntax . S4d4c) (quasiquote . S4d4b) (syntax-rules . S4d4a) (record-constructor-descriptor . S4d47) (record-type-descriptor . S4d46) (case . S4d45) (unless . S4d43) (when . S4d42) (or . S4d41) (and . S4d40) (if . S4d3f) (let . S4d3e) (letrec* . S4d3d) (letrec . S4d3c) (case-lambda . S4d3a) (lambda . S4d39) (syntax . S4d38) (syntax-case . S4d37) (quote . S4d36) (letrec-syntax . S4d34) (let-syntax . S4d33) (set! . S4d32) (begin . S4d30) (define-syntax . S4d2e) (define . S4d2d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S505b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . S2d69) (quotient . S4f13) (null-environment . S2d67) (remainder . S4f12) (modulo . S4f11) (inexact->exact . S4f10) (force . S4f0f) (exact->inexact . S4f0e) (make-promise . S4f0d) (delay . S4d55)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S505c '(rnrs control) '(6) '() '() '() '((do . S4d53) (unless . S4d43) (when . S4d42) (case-lambda . S4d3a)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S505d '(rnrs eval) '(6) '() '() '() '((eval . S2d6d) (environment . S2d65)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S505e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . S4f09) (set-car! . S4f08)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S505f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . S4f0b) (string-set! . S4f0a)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5060 '(rnrs programs) '(6) '() '() '() '((exit . S4f0c) (command-line . S4bc5)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5061 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . S2ad8) (identifier? . S2d8f) (generate-temporaries . S2d7b) (free-identifier=? . S2d7d) (syntax->datum . S2d93) (datum->syntax . S2d91) (bound-identifier=? . S2d7f) (syntax-violation . S2d8d) (unsyntax-splicing . S4d5f) (unsyntax . S4d5e) (_ . S4d5b) (... . S4d58) (with-syntax . S4d4d) (quasisyntax . S4d4c) (syntax . S4d38) (syntax-case . S4d37)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5062 '(rnrs files) '(6) '() '() '() '((delete-file . S4f7c) (file-exists? . S4f7b) (make-i/o-write-error . S49b5) (make-i/o-read-error . S49a0) (make-i/o-port-error . S4a56) (make-i/o-invalid-position-error . S49cc) (make-i/o-filename-error . S49e7) (make-i/o-file-protection-error . S4a00) (make-i/o-file-is-read-only-error . S4a15) (make-i/o-file-does-not-exist-error . S4a3f) (make-i/o-file-already-exists-error . S4a2a) (make-i/o-error . S498b) (i/o-write-error? . S49b7) (i/o-read-error? . S49a2) (i/o-port-error? . S4a5a) (i/o-invalid-position-error? . S49d0) (i/o-filename-error? . S49eb) (i/o-file-protection-error? . S4a02) (i/o-file-is-read-only-error? . S4a17) (i/o-file-does-not-exist-error? . S4a41) (i/o-file-already-exists-error? . S4a2c) (i/o-error? . S498d) (i/o-error-position . S49d2) (i/o-error-port . S4a5c) (i/o-error-filename . S49ed) (&i/o-port . S4d8a) (&i/o-file-does-not-exist . S4d89) (&i/o-file-already-exists . S4d88) (&i/o-file-is-read-only . S4d87) (&i/o-file-protection . S4d86) (&i/o-filename . S4d85) (&i/o-invalid-position . S4d84) (&i/o-write . S4d83) (&i/o-read . S4d82) (&i/o . S4d81)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5063 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . S4f7a) (vector-sort . S4f79) (list-sort . S4f78)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5064 '(rnrs base) '(6) '() '() '() '((zero? . S4e31) (vector? . S4e30) (vector-set! . S4e2f) (vector-ref . S4e2e) (vector-map . S4e2d) (vector-length . S4e2c) (vector-for-each . S4e2b) (vector-fill! . S4e2a) (vector->list . S4e29) (vector . S4e28) (values . S4e27) (truncate . S4e26) (tan . S4e25) (symbol? . S4e24) (symbol=? . S4e23) (symbol->string . S4e22) (substring . S4e21) (string? . S4e20) (string>? . S4e1f) (string>=? . S4e1e) (string=? . S4e1d) (string<? . S4e1c) (string<=? . S4e1b) (string-ref . S4e1a) (string-length . S4e19) (string-for-each . S4e18) (string-copy . S4e17) (string-append . S4e16) (string->symbol . S4e15) (string->number . S4e14) (string->list . S4e13) (string . S4e12) (sqrt . S4e11) (sin . S4e10) (round . S4e0f) (reverse . S4e0e) (real? . S4e0d) (real-valued? . S4e0c) (real-part . S4e0b) (rationalize . S4e0a) (rational? . S4e09) (rational-valued? . S4e08) (procedure? . S4e07) (positive? . S4e06) (pair? . S4e05) (odd? . S4e04) (numerator . S4e03) (number? . S4e02) (number->string . S4e01) (null? . S4e00) (not . S4dff) (negative? . S4dfe) (nan? . S4dfd) (min . S4dfc) (max . S4dfb) (map . S4dfa) (make-vector . S4df9) (make-string . S4df8) (make-rectangular . S4df7) (make-polar . S4df6) (magnitude . S4df5) (log . S4df4) (list? . S4df3) (list-tail . S4df2) (list-ref . S4df1) (list->vector . S4df0) (list->string . S4def) (list . S4dee) (length . S4ded) (lcm . S4dec) (integer? . S4deb) (integer-valued? . S4dea) (integer->char . S4de9) (infinite? . S4de8) (inexact? . S4de7) (inexact . S4de6) (imag-part . S4de5) (gcd . S4de4) (for-each . S4de3) (floor . S4de2) (finite? . S4de1) (expt . S4de0) (exp . S4ddf) (exact? . S4dde) (exact-integer-sqrt . S4ddd) (exact . S4ddc) (even? . S4ddb) (error . S4dda) (eqv? . S4dd9) (equal? . S4dd8) (eq? . S4dd7) (dynamic-wind . S4dd6) (div0-and-mod0 . S4dd5) (mod0 . S4dd4) (div0 . S4dd3) (div-and-mod . S4dd2) (mod . S4dd1) (div . S4dd0) (denominator . S4dcf) (cos . S4dce) (cons . S4dcd) (complex? . S4dcc) (char? . S4dcb) (char>? . S4dca) (char>=? . S4dc9) (char=? . S4dc8) (char<? . S4dc7) (char<=? . S4dc6) (char->integer . S4dc5) (ceiling . S4dc4) (call-with-values . S4dc3) (call/cc . S4dc2) (call-with-current-continuation . S4dc1) (cddddr . S4dc0) (cdddar . S4dbf) (cddadr . S4dbe) (cddaar . S4dbd) (cdaddr . S4dbc) (cdadar . S4dbb) (cdaadr . S4dba) (cdaaar . S4db9) (cadddr . S4db8) (caddar . S4db7) (cadadr . S4db6) (cadaar . S4db5) (caaddr . S4db4) (caadar . S4db3) (caaadr . S4db2) (caaaar . S4db1) (cdddr . S4db0) (cddar . S4daf) (cdadr . S4dae) (cdaar . S4dad) (caddr . S4dac) (cadar . S4dab) (caadr . S4daa) (caaar . S4da9) (cddr . S4da8) (cdar . S4da7) (cadr . S4da6) (caar . S4da5) (cdr . S4da4) (car . S4da3) (boolean? . S4da2) (boolean=? . S4da1) (atan . S4da0) (assertion-violation . S4d9f) (asin . S4d9e) (apply . S4d9d) (append . S4d9c) (angle . S4d9b) (acos . S4d9a) (abs . S4d99) (/ . S4d98) (* . S4d97) (- . S4d96) (+ . S4d95) (>= . S4d94) (> . S4d93) (= . S4d92) (<= . S4d91) (< . S4d90) (unquote-splicing . S4d5d) (unquote . S4d5c) (_ . S4d5b) (else . S4d5a) (=> . S4d59) (... . S4d58) (assert . S4d57) (cond . S4d52) (let* . S4d51) (let*-values . S4d50) (let-values . S4d4f) (identifier-syntax . S4d4e) (quasiquote . S4d4b) (syntax-rules . S4d4a) (case . S4d45) (or . S4d41) (and . S4d40) (if . S4d3f) (let . S4d3e) (letrec* . S4d3d) (letrec . S4d3c) (lambda . S4d39) (quote . S4d36) (letrec-syntax . S4d34) (let-syntax . S4d33) (set! . S4d32) (begin . S4d30) (define-syntax . S4d2e) (define . S4d2d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5065 '(rnrs lists) '(6) '() '() '() '((remove . S4f07) (remv . S4f06) (remp . S4f05) (remq . S4f04) (partition . S4f03) (memv . S4f02) (memq . S4f01) (memp . S4f00) (member . S4eff) (exists . S4efe) (for-all . S4efd) (fold-right . S4efc) (fold-left . S4efb) (find . S4efa) (filter . S4ef9) (cons* . S4ef8) (assv . S4ef7) (assq . S4ef6) (assp . S4ef5) (assoc . S4ef4)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5066 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . S4f62) (call-with-input-file . S4f61) (write-char . S4f60) (write . S4f5f) (with-output-to-file . S4f5e) (with-input-from-file . S4f5d) (read-char . S4f5c) (read . S4f5b) (peek-char . S4f5a) (open-output-file . S4f59) (open-input-file . S4f58) (newline . S4f57) (display . S4f56) (close-output-port . S4f55) (close-input-port . S4f54) (eof-object? . S4f53) (eof-object . S4f52) (current-error-port . S4f51) (current-output-port . S4f50) (current-input-port . S4f4f) (output-port? . S4f4e) (input-port? . S4f4d) (make-i/o-write-error . S49b5) (make-i/o-read-error . S49a0) (make-i/o-port-error . S4a56) (make-i/o-invalid-position-error . S49cc) (make-i/o-filename-error . S49e7) (make-i/o-file-protection-error . S4a00) (make-i/o-file-is-read-only-error . S4a15) (make-i/o-file-does-not-exist-error . S4a3f) (make-i/o-file-already-exists-error . S4a2a) (make-i/o-error . S498b) (i/o-write-error? . S49b7) (i/o-read-error? . S49a2) (i/o-port-error? . S4a5a) (i/o-invalid-position-error? . S49d0) (i/o-filename-error? . S49eb) (i/o-file-protection-error? . S4a02) (i/o-file-is-read-only-error? . S4a17) (i/o-file-does-not-exist-error? . S4a41) (i/o-file-already-exists-error? . S4a2c) (i/o-error? . S498d) (i/o-error-position . S49d2) (i/o-error-port . S4a5c) (i/o-error-filename . S49ed) (&i/o-port . S4d8a) (&i/o-file-does-not-exist . S4d89) (&i/o-file-already-exists . S4d88) (&i/o-file-is-read-only . S4d87) (&i/o-file-protection . S4d86) (&i/o-filename . S4d85) (&i/o-invalid-position . S4d84) (&i/o-write . S4d83) (&i/o-read . S4d82) (&i/o . S4d81)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5067 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . S4f23) (utf32->string . S4ed8) (utf16->string . S4ed7) (utf8->string . S4ed6) (uint-list->bytevector . S4ed5) (u8-list->bytevector . S4ed4) (string->utf8 . S4ed3) (string->utf32 . S4ed2) (string->utf16 . S4ed1) (sint-list->bytevector . S4ed0) (native-endianness . S4ecf) (bytevector? . S4ece) (bytevector=? . S4ecd) (bytevector-uint-set! . S4ecc) (bytevector-uint-ref . S4ecb) (bytevector-u8-set! . S4eca) (bytevector-u8-ref . S4ec9) (bytevector-u64-set! . S4ec8) (bytevector-u64-ref . S4ec7) (bytevector-u64-native-set! . S4ec6) (bytevector-u64-native-ref . S4ec5) (bytevector-u32-set! . S4ec4) (bytevector-u32-ref . S4ec3) (bytevector-u32-native-set! . S4ec2) (bytevector-u32-native-ref . S4ec1) (bytevector-u16-set! . S4ec0) (bytevector-u16-ref . S4ebf) (bytevector-u16-native-set! . S4ebe) (bytevector-u16-native-ref . S4ebd) (bytevector-sint-set! . S4ebc) (bytevector-sint-ref . S4ebb) (bytevector-s8-set! . S4eba) (bytevector-s8-ref . S4eb9) (bytevector-s64-set! . S4eb8) (bytevector-s64-ref . S4eb7) (bytevector-s64-native-set! . S4eb6) (bytevector-s64-native-ref . S4eb5) (bytevector-s32-set! . S4eb4) (bytevector-s32-ref . S4eb3) (bytevector-s32-native-set! . S4eb2) (bytevector-s32-native-ref . S4eb1) (bytevector-s16-set! . S4eb0) (bytevector-s16-ref . S4eaf) (bytevector-s16-native-set! . S4eae) (bytevector-s16-native-ref . S4ead) (bytevector-length . S4eac) (bytevector-ieee-single-ref . S4eab) (bytevector-ieee-single-set! . S4eaa) (bytevector-ieee-single-native-set! . S4ea9) (bytevector-ieee-single-native-ref . S4ea8) (bytevector-ieee-double-set! . S4ea7) (bytevector-ieee-double-ref . S4ea6) (bytevector-ieee-double-native-set! . S4ea5) (bytevector-ieee-double-native-ref . S4ea4) (bytevector-fill! . S4ea3) (bytevector-copy! . S4ea2) (bytevector-copy . S4ea1) (bytevector->uint-list . S4ea0) (bytevector->u8-list . S4e9f) (bytevector->sint-list . S4e9e) (endianness . S4d56)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5068 '(rnrs unicode) '(6) '() '() '() '((string-upcase . S4faa) (string-titlecase . S4fa9) (string-normalize-nfkd . S4fa8) (string-normalize-nfkc . S4fa7) (string-normalize-nfd . S4fa6) (string-normalize-nfc . S4fa5) (string-foldcase . S4fa4) (string-downcase . S4fa3) (string-ci>? . S4fa2) (string-ci>=? . S4fa1) (string-ci=? . S4fa0) (string-ci<? . S4f9f) (string-ci<=? . S4f9e) (char-whitespace? . S4f9d) (char-upper-case? . S4f9c) (char-title-case? . S4f9b) (char-numeric? . S4f9a) (char-lower-case? . S4f99) (char-general-category . S4f98) (char-upcase . S4f97) (char-titlecase . S4f96) (char-foldcase . S4f95) (char-downcase . S4f94) (char-ci>? . S4f93) (char-ci>=? . S4f92) (char-ci=? . S4f91) (char-ci<? . S4f90) (char-ci<=? . S4f8f) (char-alphabetic? . S4f8e)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5069 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . S4eed) (raise-continuable . S4eec) (raise . S4eeb) (guard . S4d62) (else . S4d5a) (=> . S4d59)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S506a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . S4e42) (bitwise-reverse-bit-field . S4e41) (bitwise-length . S4e40) (bitwise-if . S4e3f) (bitwise-first-bit-set . S4e3e) (bitwise-copy-bit-field . S4e3d) (bitwise-copy-bit . S4e3c) (bitwise-bit-set? . S4e3b) (bitwise-bit-field . S4e3a) (bitwise-bit-count . S4e39) (bitwise-xor . S4e38) (bitwise-ior . S4e37) (bitwise-and . S4e36) (bitwise-not . S4e35) (bitwise-arithmetic-shift-right . S4e34) (bitwise-arithmetic-shift-left . S4e33) (bitwise-arithmetic-shift . S4e32)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S506b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . S4e6f) (fxxor . S4e6e) (fxrotate-bit-field . S4e6d) (fxreverse-bit-field . S4e6c) (fxpositive? . S4e6b) (fxodd? . S4e6a) (fxnot . S4e69) (fxnegative? . S4e68) (fxmod0 . S4e67) (fxmod . S4e66) (fxmin . S4e65) (fxmax . S4e64) (fxlength . S4e63) (fxior . S4e62) (fxif . S4e61) (fxfirst-bit-set . S4e60) (fxeven? . S4e5f) (fxdiv0-and-mod0 . S4e5e) (fxdiv0 . S4e5d) (fxdiv-and-mod . S4e5c) (fxdiv . S4e5b) (fxcopy-bit-field . S4e5a) (fxcopy-bit . S4e59) (fxbit-set? . S4e58) (fxbit-field . S4e57) (fxbit-count . S4e56) (fxarithmetic-shift-right . S4e55) (fxarithmetic-shift-left . S4e54) (fxarithmetic-shift . S4e53) (fxand . S4e52) (fx>? . S4e51) (fx>=? . S4e50) (fx=? . S4e4f) (fx<? . S4e4e) (fx<=? . S4e4d) (fx-/carry . S4e4c) (fx- . S4e4b) (fx+/carry . S4e4a) (fx+ . S4e49) (fx*/carry . S4e48) (fx* . S4e47) (greatest-fixnum . S4e46) (least-fixnum . S4e45) (fixnum-width . S4e44) (fixnum? . S4e43)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S506c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . S4ab6) (no-infinities-violation? . S4aa1) (make-no-nans-violation . S4ab4) (make-no-infinities-violation . S4a9f) (real->flonum . S4e9d) (flzero? . S4e9c) (fltruncate . S4e9b) (fltan . S4e9a) (flsqrt . S4e99) (flsin . S4e98) (flround . S4e97) (flpositive? . S4e96) (flonum? . S4e95) (flodd? . S4e94) (flnumerator . S4e93) (flnegative? . S4e92) (flnan? . S4e91) (flmod0 . S4e90) (flmod . S4e8f) (flmin . S4e8e) (flmax . S4e8d) (fllog . S4e8c) (flinteger? . S4e8b) (flinfinite? . S4e8a) (flfloor . S4e89) (flfinite? . S4e88) (flexpt . S4e87) (flexp . S4e86) (fleven? . S4e85) (fldiv0-and-mod0 . S4e84) (fldiv0 . S4e83) (fldiv-and-mod . S4e82) (fldiv . S4e81) (fldenominator . S4e80) (flcos . S4e7f) (flceiling . S4e7e) (flatan . S4e7d) (flasin . S4e7c) (flacos . S4e7b) (flabs . S4e7a) (fl>? . S4e79) (fl>=? . S4e78) (fl=? . S4e77) (fl<? . S4e76) (fl<=? . S4e75) (fl/ . S4e74) (fl- . S4e73) (fl+ . S4e72) (fl* . S4e71) (fixnum->flonum . S4e70) (&no-nans . S4d8e) (&no-infinities . S4d8d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S506d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . S4f77) (string-ci-hash . S4f76) (string-hash . S4f75) (equal-hash . S4f74) (hashtable-equivalence-function . S4f73) (make-hashtable . S4f72) (hashtable-hash-function . S4f71) (make-eqv-hashtable . S4f70) (make-eq-hashtable . S4f6f) (hashtable? . S4f6e) (hashtable-update! . S4f6d) (hashtable-size . S4f6c) (hashtable-set! . S4f6b) (hashtable-ref . S4f6a) (hashtable-mutable? . S4f69) (hashtable-keys . S4f68) (hashtable-entries . S4f67) (hashtable-delete! . S4f66) (hashtable-copy . S4f65) (hashtable-contains? . S4f64) (hashtable-clear! . S4f63)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S506e '(rnrs io ports) '(6) '() '() '() '((eof-object? . S4f53) (eof-object . S4f52) (current-error-port . S4f51) (current-output-port . S4f50) (current-input-port . S4f4f) (output-port? . S4f4e) (input-port? . S4f4d) (utf-8-codec . S4f4c) (utf-16-codec . S4f4b) (transcoder-error-handling-mode . S4f4a) (transcoder-eol-style . S4f49) (transcoder-codec . S4f48) (transcoded-port . S4f47) (textual-port? . S4f46) (string->bytevector . S4f45) (standard-output-port . S4f44) (standard-input-port . S4f43) (standard-error-port . S4f42) (set-port-position! . S4f41) (put-u8 . S4f40) (put-string . S4f3f) (put-datum . S4f3e) (put-char . S4f3d) (put-bytevector . S4f3c) (port? . S4f3b) (port-transcoder . S4f3a) (port-position . S4f39) (port-has-set-port-position!? . S4f38) (port-has-port-position? . S4f37) (port-eof? . S4f36) (output-port-buffer-mode . S4f35) (open-string-output-port . S4f34) (open-string-input-port . S4f33) (open-file-output-port . S4f32) (open-file-input/output-port . S4f31) (open-file-input-port . S4f30) (open-bytevector-output-port . S4f2f) (open-bytevector-input-port . S4f2e) (native-transcoder . S4f2d) (native-eol-style . S4f2c) (make-transcoder . S4f2b) (latin-1-codec . S4f2a) (make-i/o-write-error . S49b5) (make-i/o-read-error . S49a0) (make-i/o-port-error . S4a56) (make-i/o-invalid-position-error . S49cc) (make-i/o-filename-error . S49e7) (make-i/o-file-protection-error . S4a00) (make-i/o-file-is-read-only-error . S4a15) (make-i/o-file-does-not-exist-error . S4a3f) (make-i/o-file-already-exists-error . S4a2a) (make-i/o-error . S498b) (make-i/o-encoding-error . S4a86) (make-i/o-decoding-error . S4a6f) (make-custom-textual-output-port . S4f29) (make-custom-textual-input/output-port . S4f28) (make-custom-textual-input-port . S4f27) (make-custom-binary-output-port . S4f26) (make-custom-binary-input/output-port . S4f25) (make-custom-binary-input-port . S4f24) (lookahead-u8 . S4f22) (lookahead-char . S4f21) (i/o-write-error? . S49b7) (i/o-read-error? . S49a2) (i/o-port-error? . S4a5a) (i/o-invalid-position-error? . S49d0) (i/o-filename-error? . S49eb) (i/o-file-protection-error? . S4a02) (i/o-file-is-read-only-error? . S4a17) (i/o-file-does-not-exist-error? . S4a41) (i/o-file-already-exists-error? . S4a2c) (i/o-error? . S498d) (i/o-error-position . S49d2) (i/o-error-port . S4a5c) (i/o-error-filename . S49ed) (i/o-encoding-error? . S4a8a) (i/o-encoding-error-char . S4a8c) (i/o-decoding-error? . S4a71) (get-u8 . S4f20) (get-string-n! . S4f1f) (get-string-n . S4f1e) (get-string-all . S4f1d) (get-line . S4f1c) (get-datum . S4f1b) (get-char . S4f1a) (get-bytevector-some . S4f19) (get-bytevector-n! . S4f18) (get-bytevector-n . S4f17) (get-bytevector-all . S4f16) (flush-output-port . S4f15) (close-port . S4f14) (call-with-string-output-port . S4ef3) (call-with-port . S4ef2) (call-with-bytevector-output-port . S4ef1) (bytevector->string . S4ef0) (buffer-mode? . S4eef) (binary-port? . S4eee) (&i/o-encoding . S4d8c) (&i/o-decoding . S4d8b) (&i/o-port . S4d8a) (&i/o-file-does-not-exist . S4d89) (&i/o-file-already-exists . S4d88) (&i/o-file-is-read-only . S4d87) (&i/o-file-protection . S4d86) (&i/o-filename . S4d85) (&i/o-invalid-position . S4d84) (&i/o-write . S4d83) (&i/o-read . S4d82) (&i/o . S4d81) (error-handling-mode . S4d66) (file-options . S4d65) (buffer-mode . S4d64) (eol-style . S4d63)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S506f '(rnrs enums) '(6) '() '() '() '((make-enumeration . S4eea) (enum-set=? . S4ee9) (enum-set-universe . S4ee8) (enum-set-union . S4ee7) (enum-set-subset? . S4ee6) (enum-set-projection . S4ee5) (enum-set-member? . S4ee4) (enum-set-intersection . S4ee3) (enum-set-indexer . S4ee2) (enum-set-difference . S4ee1) (enum-set-constructor . S4ee0) (enum-set-complement . S4edf) (enum-set->list . S4ede) (define-enumeration . S4d71)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5070 '(rnrs conditions) '(6) '() '() '() '((who-condition? . S4901) (warning? . S4879) (violation? . S48b8) (undefined-violation? . S4978) (syntax-violation? . S495f) (syntax-violation-subform . S4963) (syntax-violation-form . S4961) (syntax-violation . S2d8d) (simple-conditions . S4edd) (serious-condition? . S488e) (non-continuable-violation? . S4918) (message-condition? . S4862) (make-who-condition . S48fd) (make-warning . S4877) (make-violation . S48b6) (make-undefined-violation . S4976) (make-syntax-violation . S4959) (make-serious-condition . S488c) (make-non-continuable-violation . S4916) (make-message-condition . S485e) (make-lexical-violation . S4940) (make-irritants-condition . S48e2) (make-implementation-restriction-violation . S492b) (make-error . S48a1) (make-assertion-violation . S48cb) (lexical-violation? . S4942) (irritants-condition? . S48e6) (implementation-restriction-violation? . S492d) (error? . S48a3) (condition-who . S4903) (condition-predicate . S4edc) (condition-message . S4864) (condition-irritants . S48e8) (condition-accessor . S4edb) (condition . S4eda) (assertion-violation? . S48cd) (condition? . S4ed9) (&undefined . S4d80) (&syntax . S4d7f) (&lexical . S4d7e) (&implementation-restriction . S4d7d) (&non-continuable . S4d7c) (&who . S4d7b) (&irritants . S4d7a) (&assertion . S4d79) (&violation . S4d78) (&error . S4d77) (&serious . S4d76) (&warning . S4d75) (&message . S4d74) (&condition . S4d73) (define-condition-type . S4d72)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5071 '(rnrs records inspection) '(6) '() '() '() '((record? . S4f86) (record-type-uid . S4f85) (record-type-sealed? . S4f84) (record-type-parent . S4f83) (record-type-opaque? . S4f82) (record-type-name . S4f81) (record-type-generative? . S4f80) (record-type-field-names . S4f7f) (record-rtd . S4f7e) (record-field-mutable? . S4f7d)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5072 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . S4f8d) (record-predicate . S4f8c) (record-mutator . S4f8b) (record-constructor . S4f8a) (record-accessor . S4f89) (make-record-type-descriptor . S4f88) (make-record-constructor-descriptor . S4f87)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5073 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . S4d70) (parent-rtd . S4d6f) (nongenerative . S4d6e) (opaque . S4d6d) (sealed . S4d6c) (protocol . S4d6b) (parent . S4d6a) (immutable . S4d69) (mutable . S4d68) (fields . S4d67) (record-constructor-descriptor . S4d47) (record-type-descriptor . S4d46)) '() values values '#f '#f '#t '#f) (S28bb@S2707@install-library 'S5074 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . S4aba) (&no-nans-rtd . S4ab8) (&no-infinities-rcd . S4aa5) (&no-infinities-rtd . S4aa3) (&i/o-encoding-rcd . S4a90) (&i/o-encoding-rtd . S4a8e) (&i/o-decoding-rcd . S4a75) (&i/o-decoding-rtd . S4a73) (&i/o-port-rcd . S4a60) (&i/o-port-rtd . S4a5e) (&i/o-file-does-not-exist-rcd . S4a45) (&i/o-file-does-not-exist-rtd . S4a43) (&i/o-file-already-exists-rcd . S4a30) (&i/o-file-already-exists-rtd . S4a2e) (&i/o-file-is-read-only-rcd . S4a1b) (&i/o-file-is-read-only-rtd . S4a19) (&i/o-file-protection-rcd . S4a06) (&i/o-file-protection-rtd . S4a04) (&i/o-filename-rcd . S49f1) (&i/o-filename-rtd . S49ef) (&i/o-invalid-position-rcd . S49d6) (&i/o-invalid-position-rtd . S49d4) (&i/o-write-rcd . S49bb) (&i/o-write-rtd . S49b9) (&i/o-read-rcd . S49a6) (&i/o-read-rtd . S49a4) (&i/o-rcd . S4991) (&i/o-rtd . S498f) (&undefined-rcd . S497c) (&undefined-rtd . S497a) (&syntax-rcd . S4967) (&syntax-rtd . S4965) (&lexical-rcd . S4946) (&lexical-rtd . S4944) (&implementation-restriction-rcd . S4931) (&implementation-restriction-rtd . S492f) (&non-continuable-rcd . S491c) (&non-continuable-rtd . S491a) (&who-rcd . S4907) (&who-rtd . S4905) (&irritants-rcd . S48ec) (&irritants-rtd . S48ea) (&assertion-rcd . S48d1) (&assertion-rtd . S48cf) (&violation-rcd . S48bc) (&violation-rtd . S48ba) (&error-rcd . S48a7) (&error-rtd . S48a5) (&serious-rcd . S4892) (&serious-rtd . S4890) (&warning-rcd . S487d) (&warning-rtd . S487b) (&message-rcd . S4868) (&message-rtd . S4866) (&condition-rcd . S4809) (&condition-rtd . S4807) (syntax-error . S2d89) (syntax-dispatch . S2cad) (pretty-print . S5054) (eval-core . S5053) (set-symbol-value! . S5052) (symbol-value . S5051) (gensym . S5050) (void . S504f) (load . S4bcb) (interaction-environment . S2d9b) (char-ready? . S504e) (regexp? . S504d) (read-line . S504c) (gensym-prefix-set! . S504b) (ungensym . S504a) (alist->eq-hash-table . S5049) (assoc-ref . S5048) (print . S5047) (format . S5046) (host-os . S5045) (library-path . S26e6) (standard-library-path . S5044) (file-newer? . S5043) (stat-mtime . S5042) (write-to-file . S5041) (file->list . S5040) (file->string . S503f) (digit->integer . S503e) (call-with-string-input-port . S503d) (call-with-string-io . S503c) (string-split . S503b) (bytevector-for-each . S503a) (string->regexp . S5039) (rxmatch . S5038) (regexp-replace-all . S5037) (hashtable-for-each . S5036) (mosh-cache-dir . S24d1) (call-process . S5035) (local-tz-offset . S5034) (microseconds . S5033) (directory-list . S5032) (set-current-directory! . S5031) (expand-path . S5030) (current-directory . S502f) (%spawn . S502e) (%waitpid . S502d) (simple-struct-name . S502c) (simple-struct-set! . S502b) (simple-struct-ref . S502a) (make-simple-struct . S5029) (simple-struct? . S5028) (pointer-ref-c-int64 . S5027) (pointer-ref-c-int32 . S5026) (pointer-ref-c-int16 . S5025) (pointer-ref-c-int8 . S5024) (pointer-ref-c-uint64 . S5023) (pointer-ref-c-uint32 . S5022) (pointer-ref-c-uint16 . S5021) (pointer-ref-c-uint8 . S5020) (pointer-set-c-uint64! . S501f) (pointer-set-c-uint32! . S501e) (pointer-set-c-uint16! . S501d) (pointer-set-c-uint8! . S501c) (pointer-set-c-int64! . S501b) (pointer-set-c-int32! . S501a) (pointer-set-c-int16! . S5019) (pointer-set-c-int8! . S5018) (pointer-set-c-pointer! . S5017) (pointer-set-c-double! . S5016) (pointer-set-c-float! . S5015) (pointer-set-c-long-long! . S5014) (pointer-set-c-long! . S5013) (pointer-set-c-int! . S5012) (pointer-set-c-short! . S5011) (pointer-set-c-char! . S5010) (pointer-ref-c-pointer . S500f) (pointer-ref-c-double . S500e) (pointer-ref-c-float . S500d) (pointer-ref-c-unsigned-long-long . S500c) (pointer-ref-c-signed-long-long . S500b) (pointer-ref-c-unsigned-long . S500a) (pointer-ref-c-signed-long . S5009) (pointer-ref-c-unsigned-int . S5008) (pointer-ref-c-signed-int . S5007) (pointer-ref-c-unsigned-short . S5006) (pointer-ref-c-signed-short . S5005) (pointer-ref-c-unsigned-char . S5004) (pointer-ref-c-signed-char . S5003) (pointer->integer . S5002) (integer->pointer . S5001) (pointer? . S5000) (shared-errno . S4fff) (%ffi-free . S4ffe) (%ffi-malloc . S4ffd) (%ffi-supported? . S4ffc) (%ffi-pointer->string . S4ffb) (%ffi-call->string-or-zero . S4ffa) (%ffi-call->double . S4ff9) (%ffi-call->void* . S4ff8) (%ffi-call->void . S4ff7) (%ffi-call->char . S4ff6) (%ffi-call->int . S4ff5) (%ffi-lookup . S4ff4) (%ffi-open . S4ff3) (%fork . S4ff2) (%pipe . S4ff1) (p . S4ff0) (open-output-string . S4fef) (get-output-string . S4fee) (file-stat-ctime . S4fed) (file-stat-atime . S4fec) (file-stat-mtime . S4feb) (file-size-in-bytes . S4fea) (file-writable? . S4fe9) (file-executable? . S4fe8) (file-readable? . S4fe7) (file-regular? . S4fe6) (file-symbolic-link? . S4fe5) (file-directory? . S4fe4) (create-symbolic-link . S4fe3) (rename-file . S4fe2) (delete-directory . S4fe1) (create-directory . S4fe0) (create-mosh-cache-dir . S4fdf) (get-environment-variables . S4fde) (current-exception-handler . S4fdd) (get-environment-variable . S4fdc) (join-wraps . S4fdb) (id->real-label . S4fda) (same-marks? . S4fd9) (same-marks*? . S4fd8) (get-timeofday . S4fd7) (get-command-line . S4fd6) (sys-display . S4fd5) (whereis . S4fd4) (register . S4fd3) (vm-join! . S4fd2) (vm-set-value! . S4fd1) (vm? . S4fd0) (main-vm? . S4fcf) (vm-eval . S4fce) (vm-self . S4fcd) (vm-start! . S4fcc) (make-vm . S4fcb) (mutex-try-lock! . S4fca) (mutex-unlock! . S4fc9) (mutex-lock! . S4fc8) (mutex? . S4fc7) (make-mutex . S4fc6) (condition-variable-notify-all! . S4fc5) (condition-variable-notify! . S4fc4) (condition-variable-wait! . S4fc3) (make-condition-variable . S4fc2) (mosh-executable-path . S4fc1) (make-file-options . S4fc0) (source-info . S4fbf) (make-compiler-instruction . S4fbe) (make-instruction . S4fbd) (set-source-info! . S4fbc) (bignum? . S4fbb) (fast-equal? . S4fba) (fasl-read . S4fb9) (fasl-write . S4fb8) (time-usage . S4fb7) (os-constant . S4fb6) (disasm . S4fb5) (make-parameter . S24cf) (socket-port . S4fb4) (socket-shutdown . S4fb3) (socket-close . S4fb2) (socket-send . S4fb1) (socket-recv! . S4fb0) (socket-recv . S4faf) (make-server-socket . S4fae) (make-client-socket . S4fad) (socket-accept . S4fac) (socket? . S4fab) (string-upcase . S4faa) (string-titlecase . S4fa9) (string-normalize-nfkd . S4fa8) (string-normalize-nfkc . S4fa7) (string-normalize-nfd . S4fa6) (string-normalize-nfc . S4fa5) (string-foldcase . S4fa4) (string-downcase . S4fa3) (string-ci>? . S4fa2) (string-ci>=? . S4fa1) (string-ci=? . S4fa0) (string-ci<? . S4f9f) (string-ci<=? . S4f9e) (char-whitespace? . S4f9d) (char-upper-case? . S4f9c) (char-title-case? . S4f9b) (char-numeric? . S4f9a) (char-lower-case? . S4f99) (char-general-category . S4f98) (char-upcase . S4f97) (char-titlecase . S4f96) (char-foldcase . S4f95) (char-downcase . S4f94) (char-ci>? . S4f93) (char-ci>=? . S4f92) (char-ci=? . S4f91) (char-ci<? . S4f90) (char-ci<=? . S4f8f) (char-alphabetic? . S4f8e) (make-variable-transformer . S2ad8) (identifier? . S2d8f) (generate-temporaries . S2d7b) (free-identifier=? . S2d7d) (syntax->datum . S2d93) (datum->syntax . S2d91) (bound-identifier=? . S2d7f) (record-type-descriptor? . S4f8d) (record-predicate . S4f8c) (record-mutator . S4f8b) (record-constructor . S4f8a) (record-accessor . S4f89) (make-record-type-descriptor . S4f88) (make-record-constructor-descriptor . S4f87) (record? . S4f86) (record-type-uid . S4f85) (record-type-sealed? . S4f84) (record-type-parent . S4f83) (record-type-opaque? . S4f82) (record-type-name . S4f81) (record-type-generative? . S4f80) (record-type-field-names . S4f7f) (record-rtd . S4f7e) (record-field-mutable? . S4f7d) (delete-file . S4f7c) (file-exists? . S4f7b) (vector-sort! . S4f7a) (vector-sort . S4f79) (list-sort . S4f78) (symbol-hash . S4f77) (string-ci-hash . S4f76) (string-hash . S4f75) (equal-hash . S4f74) (hashtable-equivalence-function . S4f73) (make-hashtable . S4f72) (hashtable-hash-function . S4f71) (make-eqv-hashtable . S4f70) (make-eq-hashtable . S4f6f) (hashtable? . S4f6e) (hashtable-update! . S4f6d) (hashtable-size . S4f6c) (hashtable-set! . S4f6b) (hashtable-ref . S4f6a) (hashtable-mutable? . S4f69) (hashtable-keys . S4f68) (hashtable-entries . S4f67) (hashtable-delete! . S4f66) (hashtable-copy . S4f65) (hashtable-contains? . S4f64) (hashtable-clear! . S4f63) (call-with-output-file . S4f62) (call-with-input-file . S4f61) (write-char . S4f60) (write . S4f5f) (with-output-to-file . S4f5e) (with-input-from-file . S4f5d) (read-char . S4f5c) (read . S4f5b) (peek-char . S4f5a) (open-output-file . S4f59) (open-input-file . S4f58) (newline . S4f57) (display . S4f56) (close-output-port . S4f55) (close-input-port . S4f54) (eof-object? . S4f53) (eof-object . S4f52) (current-error-port . S4f51) (current-output-port . S4f50) (current-input-port . S4f4f) (output-port? . S4f4e) (input-port? . S4f4d) (utf-8-codec . S4f4c) (utf-16-codec . S4f4b) (transcoder-error-handling-mode . S4f4a) (transcoder-eol-style . S4f49) (transcoder-codec . S4f48) (transcoded-port . S4f47) (textual-port? . S4f46) (string->bytevector . S4f45) (standard-output-port . S4f44) (standard-input-port . S4f43) (standard-error-port . S4f42) (set-port-position! . S4f41) (put-u8 . S4f40) (put-string . S4f3f) (put-datum . S4f3e) (put-char . S4f3d) (put-bytevector . S4f3c) (port? . S4f3b) (port-transcoder . S4f3a) (port-position . S4f39) (port-has-set-port-position!? . S4f38) (port-has-port-position? . S4f37) (port-eof? . S4f36) (output-port-buffer-mode . S4f35) (open-string-output-port . S4f34) (open-string-input-port . S4f33) (open-file-output-port . S4f32) (open-file-input/output-port . S4f31) (open-file-input-port . S4f30) (open-bytevector-output-port . S4f2f) (open-bytevector-input-port . S4f2e) (native-transcoder . S4f2d) (native-eol-style . S4f2c) (make-transcoder . S4f2b) (latin-1-codec . S4f2a) (make-i/o-write-error . S49b5) (make-i/o-read-error . S49a0) (make-i/o-port-error . S4a56) (make-i/o-invalid-position-error . S49cc) (make-i/o-filename-error . S49e7) (make-i/o-file-protection-error . S4a00) (make-i/o-file-is-read-only-error . S4a15) (make-i/o-file-does-not-exist-error . S4a3f) (make-i/o-file-already-exists-error . S4a2a) (make-i/o-error . S498b) (make-i/o-encoding-error . S4a86) (make-i/o-decoding-error . S4a6f) (make-custom-textual-output-port . S4f29) (make-custom-textual-input/output-port . S4f28) (make-custom-textual-input-port . S4f27) (make-custom-binary-output-port . S4f26) (make-custom-binary-input/output-port . S4f25) (make-custom-binary-input-port . S4f24) (make-bytevector . S4f23) (lookahead-u8 . S4f22) (lookahead-char . S4f21) (i/o-write-error? . S49b7) (i/o-read-error? . S49a2) (i/o-port-error? . S4a5a) (i/o-invalid-position-error? . S49d0) (i/o-filename-error? . S49eb) (i/o-file-protection-error? . S4a02) (i/o-file-is-read-only-error? . S4a17) (i/o-file-does-not-exist-error? . S4a41) (i/o-file-already-exists-error? . S4a2c) (i/o-error? . S498d) (i/o-error-position . S49d2) (i/o-error-port . S4a5c) (i/o-error-filename . S49ed) (i/o-encoding-error? . S4a8a) (i/o-encoding-error-char . S4a8c) (i/o-decoding-error? . S4a71) (get-u8 . S4f20) (get-string-n! . S4f1f) (get-string-n . S4f1e) (get-string-all . S4f1d) (get-line . S4f1c) (get-datum . S4f1b) (get-char . S4f1a) (get-bytevector-some . S4f19) (get-bytevector-n! . S4f18) (get-bytevector-n . S4f17) (get-bytevector-all . S4f16) (flush-output-port . S4f15) (close-port . S4f14) (scheme-report-environment . S2d69) (quotient . S4f13) (null-environment . S2d67) (remainder . S4f12) (modulo . S4f11) (inexact->exact . S4f10) (force . S4f0f) (exact->inexact . S4f0e) (make-promise . S4f0d) (exit . S4f0c) (command-line . S4bc5) (string-fill! . S4f0b) (string-set! . S4f0a) (set-cdr! . S4f09) (set-car! . S4f08) (remove . S4f07) (remv . S4f06) (remp . S4f05) (remq . S4f04) (partition . S4f03) (memv . S4f02) (memq . S4f01) (memp . S4f00) (member . S4eff) (exists . S4efe) (for-all . S4efd) (fold-right . S4efc) (fold-left . S4efb) (find . S4efa) (filter . S4ef9) (cons* . S4ef8) (assv . S4ef7) (assq . S4ef6) (assp . S4ef5) (assoc . S4ef4) (call-with-string-output-port . S4ef3) (call-with-port . S4ef2) (call-with-bytevector-output-port . S4ef1) (bytevector->string . S4ef0) (buffer-mode? . S4eef) (binary-port? . S4eee) (with-exception-handler . S4eed) (raise-continuable . S4eec) (raise . S4eeb) (eval . S2d6d) (environment . S2d65) (make-enumeration . S4eea) (enum-set=? . S4ee9) (enum-set-universe . S4ee8) (enum-set-union . S4ee7) (enum-set-subset? . S4ee6) (enum-set-projection . S4ee5) (enum-set-member? . S4ee4) (enum-set-intersection . S4ee3) (enum-set-indexer . S4ee2) (enum-set-difference . S4ee1) (enum-set-constructor . S4ee0) (enum-set-complement . S4edf) (enum-set->list . S4ede) (who-condition? . S4901) (warning? . S4879) (violation? . S48b8) (undefined-violation? . S4978) (syntax-violation? . S495f) (syntax-violation-subform . S4963) (syntax-violation-form . S4961) (syntax-violation . S2d8d) (simple-conditions . S4edd) (serious-condition? . S488e) (non-continuable-violation? . S4918) (message-condition? . S4862) (make-who-condition . S48fd) (make-warning . S4877) (make-violation . S48b6) (make-undefined-violation . S4976) (make-syntax-violation . S4959) (make-serious-condition . S488c) (make-non-continuable-violation . S4916) (make-message-condition . S485e) (make-lexical-violation . S4940) (make-irritants-condition . S48e2) (make-implementation-restriction-violation . S492b) (make-error . S48a1) (make-assertion-violation . S48cb) (lexical-violation? . S4942) (irritants-condition? . S48e6) (implementation-restriction-violation? . S492d) (error? . S48a3) (condition-who . S4903) (condition-predicate . S4edc) (condition-message . S4864) (condition-irritants . S48e8) (condition-accessor . S4edb) (condition . S4eda) (assertion-violation? . S48cd) (condition? . S4ed9) (utf32->string . S4ed8) (utf16->string . S4ed7) (utf8->string . S4ed6) (uint-list->bytevector . S4ed5) (u8-list->bytevector . S4ed4) (string->utf8 . S4ed3) (string->utf32 . S4ed2) (string->utf16 . S4ed1) (sint-list->bytevector . S4ed0) (native-endianness . S4ecf) (bytevector? . S4ece) (bytevector=? . S4ecd) (bytevector-uint-set! . S4ecc) (bytevector-uint-ref . S4ecb) (bytevector-u8-set! . S4eca) (bytevector-u8-ref . S4ec9) (bytevector-u64-set! . S4ec8) (bytevector-u64-ref . S4ec7) (bytevector-u64-native-set! . S4ec6) (bytevector-u64-native-ref . S4ec5) (bytevector-u32-set! . S4ec4) (bytevector-u32-ref . S4ec3) (bytevector-u32-native-set! . S4ec2) (bytevector-u32-native-ref . S4ec1) (bytevector-u16-set! . S4ec0) (bytevector-u16-ref . S4ebf) (bytevector-u16-native-set! . S4ebe) (bytevector-u16-native-ref . S4ebd) (bytevector-sint-set! . S4ebc) (bytevector-sint-ref . S4ebb) (bytevector-s8-set! . S4eba) (bytevector-s8-ref . S4eb9) (bytevector-s64-set! . S4eb8) (bytevector-s64-ref . S4eb7) (bytevector-s64-native-set! . S4eb6) (bytevector-s64-native-ref . S4eb5) (bytevector-s32-set! . S4eb4) (bytevector-s32-ref . S4eb3) (bytevector-s32-native-set! . S4eb2) (bytevector-s32-native-ref . S4eb1) (bytevector-s16-set! . S4eb0) (bytevector-s16-ref . S4eaf) (bytevector-s16-native-set! . S4eae) (bytevector-s16-native-ref . S4ead) (bytevector-length . S4eac) (bytevector-ieee-single-ref . S4eab) (bytevector-ieee-single-set! . S4eaa) (bytevector-ieee-single-native-set! . S4ea9) (bytevector-ieee-single-native-ref . S4ea8) (bytevector-ieee-double-set! . S4ea7) (bytevector-ieee-double-ref . S4ea6) (bytevector-ieee-double-native-set! . S4ea5) (bytevector-ieee-double-native-ref . S4ea4) (bytevector-fill! . S4ea3) (bytevector-copy! . S4ea2) (bytevector-copy . S4ea1) (bytevector->uint-list . S4ea0) (bytevector->u8-list . S4e9f) (bytevector->sint-list . S4e9e) (no-nans-violation? . S4ab6) (no-infinities-violation? . S4aa1) (make-no-nans-violation . S4ab4) (make-no-infinities-violation . S4a9f) (real->flonum . S4e9d) (flzero? . S4e9c) (fltruncate . S4e9b) (fltan . S4e9a) (flsqrt . S4e99) (flsin . S4e98) (flround . S4e97) (flpositive? . S4e96) (flonum? . S4e95) (flodd? . S4e94) (flnumerator . S4e93) (flnegative? . S4e92) (flnan? . S4e91) (flmod0 . S4e90) (flmod . S4e8f) (flmin . S4e8e) (flmax . S4e8d) (fllog . S4e8c) (flinteger? . S4e8b) (flinfinite? . S4e8a) (flfloor . S4e89) (flfinite? . S4e88) (flexpt . S4e87) (flexp . S4e86) (fleven? . S4e85) (fldiv0-and-mod0 . S4e84) (fldiv0 . S4e83) (fldiv-and-mod . S4e82) (fldiv . S4e81) (fldenominator . S4e80) (flcos . S4e7f) (flceiling . S4e7e) (flatan . S4e7d) (flasin . S4e7c) (flacos . S4e7b) (flabs . S4e7a) (fl>? . S4e79) (fl>=? . S4e78) (fl=? . S4e77) (fl<? . S4e76) (fl<=? . S4e75) (fl/ . S4e74) (fl- . S4e73) (fl+ . S4e72) (fl* . S4e71) (fixnum->flonum . S4e70) (fxzero? . S4e6f) (fxxor . S4e6e) (fxrotate-bit-field . S4e6d) (fxreverse-bit-field . S4e6c) (fxpositive? . S4e6b) (fxodd? . S4e6a) (fxnot . S4e69) (fxnegative? . S4e68) (fxmod0 . S4e67) (fxmod . S4e66) (fxmin . S4e65) (fxmax . S4e64) (fxlength . S4e63) (fxior . S4e62) (fxif . S4e61) (fxfirst-bit-set . S4e60) (fxeven? . S4e5f) (fxdiv0-and-mod0 . S4e5e) (fxdiv0 . S4e5d) (fxdiv-and-mod . S4e5c) (fxdiv . S4e5b) (fxcopy-bit-field . S4e5a) (fxcopy-bit . S4e59) (fxbit-set? . S4e58) (fxbit-field . S4e57) (fxbit-count . S4e56) (fxarithmetic-shift-right . S4e55) (fxarithmetic-shift-left . S4e54) (fxarithmetic-shift . S4e53) (fxand . S4e52) (fx>? . S4e51) (fx>=? . S4e50) (fx=? . S4e4f) (fx<? . S4e4e) (fx<=? . S4e4d) (fx-/carry . S4e4c) (fx- . S4e4b) (fx+/carry . S4e4a) (fx+ . S4e49) (fx*/carry . S4e48) (fx* . S4e47) (greatest-fixnum . S4e46) (least-fixnum . S4e45) (fixnum-width . S4e44) (fixnum? . S4e43) (bitwise-rotate-bit-field . S4e42) (bitwise-reverse-bit-field . S4e41) (bitwise-length . S4e40) (bitwise-if . S4e3f) (bitwise-first-bit-set . S4e3e) (bitwise-copy-bit-field . S4e3d) (bitwise-copy-bit . S4e3c) (bitwise-bit-set? . S4e3b) (bitwise-bit-field . S4e3a) (bitwise-bit-count . S4e39) (bitwise-xor . S4e38) (bitwise-ior . S4e37) (bitwise-and . S4e36) (bitwise-not . S4e35) (bitwise-arithmetic-shift-right . S4e34) (bitwise-arithmetic-shift-left . S4e33) (bitwise-arithmetic-shift . S4e32) (zero? . S4e31) (vector? . S4e30) (vector-set! . S4e2f) (vector-ref . S4e2e) (vector-map . S4e2d) (vector-length . S4e2c) (vector-for-each . S4e2b) (vector-fill! . S4e2a) (vector->list . S4e29) (vector . S4e28) (values . S4e27) (truncate . S4e26) (tan . S4e25) (symbol? . S4e24) (symbol=? . S4e23) (symbol->string . S4e22) (substring . S4e21) (string? . S4e20) (string>? . S4e1f) (string>=? . S4e1e) (string=? . S4e1d) (string<? . S4e1c) (string<=? . S4e1b) (string-ref . S4e1a) (string-length . S4e19) (string-for-each . S4e18) (string-copy . S4e17) (string-append . S4e16) (string->symbol . S4e15) (string->number . S4e14) (string->list . S4e13) (string . S4e12) (sqrt . S4e11) (sin . S4e10) (round . S4e0f) (reverse . S4e0e) (real? . S4e0d) (real-valued? . S4e0c) (real-part . S4e0b) (rationalize . S4e0a) (rational? . S4e09) (rational-valued? . S4e08) (procedure? . S4e07) (positive? . S4e06) (pair? . S4e05) (odd? . S4e04) (numerator . S4e03) (number? . S4e02) (number->string . S4e01) (null? . S4e00) (not . S4dff) (negative? . S4dfe) (nan? . S4dfd) (min . S4dfc) (max . S4dfb) (map . S4dfa) (make-vector . S4df9) (make-string . S4df8) (make-rectangular . S4df7) (make-polar . S4df6) (magnitude . S4df5) (log . S4df4) (list? . S4df3) (list-tail . S4df2) (list-ref . S4df1) (list->vector . S4df0) (list->string . S4def) (list . S4dee) (length . S4ded) (lcm . S4dec) (integer? . S4deb) (integer-valued? . S4dea) (integer->char . S4de9) (infinite? . S4de8) (inexact? . S4de7) (inexact . S4de6) (imag-part . S4de5) (gcd . S4de4) (for-each . S4de3) (floor . S4de2) (finite? . S4de1) (expt . S4de0) (exp . S4ddf) (exact? . S4dde) (exact-integer-sqrt . S4ddd) (exact . S4ddc) (even? . S4ddb) (error . S4dda) (eqv? . S4dd9) (equal? . S4dd8) (eq? . S4dd7) (dynamic-wind . S4dd6) (div0-and-mod0 . S4dd5) (mod0 . S4dd4) (div0 . S4dd3) (div-and-mod . S4dd2) (mod . S4dd1) (div . S4dd0) (denominator . S4dcf) (cos . S4dce) (cons . S4dcd) (complex? . S4dcc) (char? . S4dcb) (char>? . S4dca) (char>=? . S4dc9) (char=? . S4dc8) (char<? . S4dc7) (char<=? . S4dc6) (char->integer . S4dc5) (ceiling . S4dc4) (call-with-values . S4dc3) (call/cc . S4dc2) (call-with-current-continuation . S4dc1) (cddddr . S4dc0) (cdddar . S4dbf) (cddadr . S4dbe) (cddaar . S4dbd) (cdaddr . S4dbc) (cdadar . S4dbb) (cdaadr . S4dba) (cdaaar . S4db9) (cadddr . S4db8) (caddar . S4db7) (cadadr . S4db6) (cadaar . S4db5) (caaddr . S4db4) (caadar . S4db3) (caaadr . S4db2) (caaaar . S4db1) (cdddr . S4db0) (cddar . S4daf) (cdadr . S4dae) (cdaar . S4dad) (caddr . S4dac) (cadar . S4dab) (caadr . S4daa) (caaar . S4da9) (cddr . S4da8) (cdar . S4da7) (cadr . S4da6) (caar . S4da5) (cdr . S4da4) (car . S4da3) (boolean? . S4da2) (boolean=? . S4da1) (atan . S4da0) (assertion-violation . S4d9f) (assertion-error . S2d87) (asin . S4d9e) (apply . S4d9d) (append . S4d9c) (angle . S4d9b) (acos . S4d9a) (abs . S4d99) (/ . S4d98) (* . S4d97) (- . S4d96) (+ . S4d95) (>= . S4d94) (> . S4d93) (= . S4d92) (<= . S4d91) (< . S4d90) (library . S4d8f) (&no-nans . S4d8e) (&no-infinities . S4d8d) (&i/o-encoding . S4d8c) (&i/o-decoding . S4d8b) (&i/o-port . S4d8a) (&i/o-file-does-not-exist . S4d89) (&i/o-file-already-exists . S4d88) (&i/o-file-is-read-only . S4d87) (&i/o-file-protection . S4d86) (&i/o-filename . S4d85) (&i/o-invalid-position . S4d84) (&i/o-write . S4d83) (&i/o-read . S4d82) (&i/o . S4d81) (&undefined . S4d80) (&syntax . S4d7f) (&lexical . S4d7e) (&implementation-restriction . S4d7d) (&non-continuable . S4d7c) (&who . S4d7b) (&irritants . S4d7a) (&assertion . S4d79) (&violation . S4d78) (&error . S4d77) (&serious . S4d76) (&warning . S4d75) (&message . S4d74) (&condition . S4d73) (define-condition-type . S4d72) (define-enumeration . S4d71) (define-record-type . S4d70) (parent-rtd . S4d6f) (nongenerative . S4d6e) (opaque . S4d6d) (sealed . S4d6c) (protocol . S4d6b) (parent . S4d6a) (immutable . S4d69) (mutable . S4d68) (fields . S4d67) (error-handling-mode . S4d66) (file-options . S4d65) (buffer-mode . S4d64) (eol-style . S4d63) (guard . S4d62) (trace-define . S4d61) (trace-lambda . S4d60) (unsyntax-splicing . S4d5f) (unsyntax . S4d5e) (unquote-splicing . S4d5d) (unquote . S4d5c) (_ . S4d5b) (else . S4d5a) (=> . S4d59) (... . S4d58) (assert . S4d57) (endianness . S4d56) (delay . S4d55) (time . S4d54) (do . S4d53) (cond . S4d52) (let* . S4d51) (let*-values . S4d50) (let-values . S4d4f) (identifier-syntax . S4d4e) (with-syntax . S4d4d) (quasisyntax . S4d4c) (quasiquote . S4d4b) (syntax-rules . S4d4a) (include . S4d49) (define-struct . S4d48) (record-constructor-descriptor . S4d47) (record-type-descriptor . S4d46) (case . S4d45) (parameterize . S4d44) (unless . S4d43) (when . S4d42) (or . S4d41) (and . S4d40) (if . S4d3f) (let . S4d3e) (letrec* . S4d3d) (letrec . S4d3c) (type-descriptor . S4d3b) (case-lambda . S4d3a) (lambda . S4d39) (syntax . S4d38) (syntax-case . S4d37) (quote . S4d36) (foreign-call . S4d35) (letrec-syntax . S4d34) (let-syntax . S4d33) (set! . S4d32) (import . S4d31) (begin . S4d30) (module . S4d2f) (define-syntax . S4d2e) (define . S4d2d)) '((S4aba core-prim . &no-nans-rcd) (S4ab8 core-prim . &no-nans-rtd) (S4aa5 core-prim . &no-infinities-rcd) (S4aa3 core-prim . &no-infinities-rtd) (S4a90 core-prim . &i/o-encoding-rcd) (S4a8e core-prim . &i/o-encoding-rtd) (S4a75 core-prim . &i/o-decoding-rcd) (S4a73 core-prim . &i/o-decoding-rtd) (S4a60 core-prim . &i/o-port-rcd) (S4a5e core-prim . &i/o-port-rtd) (S4a45 core-prim . &i/o-file-does-not-exist-rcd) (S4a43 core-prim . &i/o-file-does-not-exist-rtd) (S4a30 core-prim . &i/o-file-already-exists-rcd) (S4a2e core-prim . &i/o-file-already-exists-rtd) (S4a1b core-prim . &i/o-file-is-read-only-rcd) (S4a19 core-prim . &i/o-file-is-read-only-rtd) (S4a06 core-prim . &i/o-file-protection-rcd) (S4a04 core-prim . &i/o-file-protection-rtd) (S49f1 core-prim . &i/o-filename-rcd) (S49ef core-prim . &i/o-filename-rtd) (S49d6 core-prim . &i/o-invalid-position-rcd) (S49d4 core-prim . &i/o-invalid-position-rtd) (S49bb core-prim . &i/o-write-rcd) (S49b9 core-prim . &i/o-write-rtd) (S49a6 core-prim . &i/o-read-rcd) (S49a4 core-prim . &i/o-read-rtd) (S4991 core-prim . &i/o-rcd) (S498f core-prim . &i/o-rtd) (S497c core-prim . &undefined-rcd) (S497a core-prim . &undefined-rtd) (S4967 core-prim . &syntax-rcd) (S4965 core-prim . &syntax-rtd) (S4946 core-prim . &lexical-rcd) (S4944 core-prim . &lexical-rtd) (S4931 core-prim . &implementation-restriction-rcd) (S492f core-prim . &implementation-restriction-rtd) (S491c core-prim . &non-continuable-rcd) (S491a core-prim . &non-continuable-rtd) (S4907 core-prim . &who-rcd) (S4905 core-prim . &who-rtd) (S48ec core-prim . &irritants-rcd) (S48ea core-prim . &irritants-rtd) (S48d1 core-prim . &assertion-rcd) (S48cf core-prim . &assertion-rtd) (S48bc core-prim . &violation-rcd) (S48ba core-prim . &violation-rtd) (S48a7 core-prim . &error-rcd) (S48a5 core-prim . &error-rtd) (S4892 core-prim . &serious-rcd) (S4890 core-prim . &serious-rtd) (S487d core-prim . &warning-rcd) (S487b core-prim . &warning-rtd) (S4868 core-prim . &message-rcd) (S4866 core-prim . &message-rtd) (S4809 core-prim . &condition-rcd) (S4807 core-prim . &condition-rtd) (S2d89 core-prim . syntax-error) (S2cad core-prim . syntax-dispatch) (S5054 core-prim . pretty-print) (S5053 core-prim . eval-core) (S5052 core-prim . set-symbol-value!) (S5051 core-prim . symbol-value) (S5050 core-prim . gensym) (S504f core-prim . void) (S4bcb core-prim . load) (S2d9b core-prim . interaction-environment) (S504e core-prim . char-ready?) (S504d core-prim . regexp?) (S504c core-prim . read-line) (S504b core-prim . gensym-prefix-set!) (S504a core-prim . ungensym) (S5049 core-prim . alist->eq-hash-table) (S5048 core-prim . assoc-ref) (S5047 core-prim . print) (S5046 core-prim . format) (S5045 core-prim . host-os) (S26e6 core-prim . library-path) (S5044 core-prim . standard-library-path) (S5043 core-prim . file-newer?) (S5042 core-prim . stat-mtime) (S5041 core-prim . write-to-file) (S5040 core-prim . file->list) (S503f core-prim . file->string) (S503e core-prim . digit->integer) (S503d core-prim . call-with-string-input-port) (S503c core-prim . call-with-string-io) (S503b core-prim . string-split) (S503a core-prim . bytevector-for-each) (S5039 core-prim . string->regexp) (S5038 core-prim . rxmatch) (S5037 core-prim . regexp-replace-all) (S5036 core-prim . hashtable-for-each) (S24d1 core-prim . mosh-cache-dir) (S5035 core-prim . call-process) (S5034 core-prim . local-tz-offset) (S5033 core-prim . microseconds) (S5032 core-prim . directory-list) (S5031 core-prim . set-current-directory!) (S5030 core-prim . expand-path) (S502f core-prim . current-directory) (S502e core-prim . %spawn) (S502d core-prim . %waitpid) (S502c core-prim . simple-struct-name) (S502b core-prim . simple-struct-set!) (S502a core-prim . simple-struct-ref) (S5029 core-prim . make-simple-struct) (S5028 core-prim . simple-struct?) (S5027 core-prim . pointer-ref-c-int64) (S5026 core-prim . pointer-ref-c-int32) (S5025 core-prim . pointer-ref-c-int16) (S5024 core-prim . pointer-ref-c-int8) (S5023 core-prim . pointer-ref-c-uint64) (S5022 core-prim . pointer-ref-c-uint32) (S5021 core-prim . pointer-ref-c-uint16) (S5020 core-prim . pointer-ref-c-uint8) (S501f core-prim . pointer-set-c-uint64!) (S501e core-prim . pointer-set-c-uint32!) (S501d core-prim . pointer-set-c-uint16!) (S501c core-prim . pointer-set-c-uint8!) (S501b core-prim . pointer-set-c-int64!) (S501a core-prim . pointer-set-c-int32!) (S5019 core-prim . pointer-set-c-int16!) (S5018 core-prim . pointer-set-c-int8!) (S5017 core-prim . pointer-set-c-pointer!) (S5016 core-prim . pointer-set-c-double!) (S5015 core-prim . pointer-set-c-float!) (S5014 core-prim . pointer-set-c-long-long!) (S5013 core-prim . pointer-set-c-long!) (S5012 core-prim . pointer-set-c-int!) (S5011 core-prim . pointer-set-c-short!) (S5010 core-prim . pointer-set-c-char!) (S500f core-prim . pointer-ref-c-pointer) (S500e core-prim . pointer-ref-c-double) (S500d core-prim . pointer-ref-c-float) (S500c core-prim . pointer-ref-c-unsigned-long-long) (S500b core-prim . pointer-ref-c-signed-long-long) (S500a core-prim . pointer-ref-c-unsigned-long) (S5009 core-prim . pointer-ref-c-signed-long) (S5008 core-prim . pointer-ref-c-unsigned-int) (S5007 core-prim . pointer-ref-c-signed-int) (S5006 core-prim . pointer-ref-c-unsigned-short) (S5005 core-prim . pointer-ref-c-signed-short) (S5004 core-prim . pointer-ref-c-unsigned-char) (S5003 core-prim . pointer-ref-c-signed-char) (S5002 core-prim . pointer->integer) (S5001 core-prim . integer->pointer) (S5000 core-prim . pointer?) (S4fff core-prim . shared-errno) (S4ffe core-prim . %ffi-free) (S4ffd core-prim . %ffi-malloc) (S4ffc core-prim . %ffi-supported?) (S4ffb core-prim . %ffi-pointer->string) (S4ffa core-prim . %ffi-call->string-or-zero) (S4ff9 core-prim . %ffi-call->double) (S4ff8 core-prim . %ffi-call->void*) (S4ff7 core-prim . %ffi-call->void) (S4ff6 core-prim . %ffi-call->char) (S4ff5 core-prim . %ffi-call->int) (S4ff4 core-prim . %ffi-lookup) (S4ff3 core-prim . %ffi-open) (S4ff2 core-prim . %fork) (S4ff1 core-prim . %pipe) (S4ff0 core-prim . p) (S4fef core-prim . open-output-string) (S4fee core-prim . get-output-string) (S4fed core-prim . file-stat-ctime) (S4fec core-prim . file-stat-atime) (S4feb core-prim . file-stat-mtime) (S4fea core-prim . file-size-in-bytes) (S4fe9 core-prim . file-writable?) (S4fe8 core-prim . file-executable?) (S4fe7 core-prim . file-readable?) (S4fe6 core-prim . file-regular?) (S4fe5 core-prim . file-symbolic-link?) (S4fe4 core-prim . file-directory?) (S4fe3 core-prim . create-symbolic-link) (S4fe2 core-prim . rename-file) (S4fe1 core-prim . delete-directory) (S4fe0 core-prim . create-directory) (S4fdf core-prim . create-mosh-cache-dir) (S4fde core-prim . get-environment-variables) (S4fdd core-prim . current-exception-handler) (S4fdc core-prim . get-environment-variable) (S4fdb core-prim . join-wraps) (S4fda core-prim . id->real-label) (S4fd9 core-prim . same-marks?) (S4fd8 core-prim . same-marks*?) (S4fd7 core-prim . get-timeofday) (S4fd6 core-prim . get-command-line) (S4fd5 core-prim . sys-display) (S4fd4 core-prim . whereis) (S4fd3 core-prim . register) (S4fd2 core-prim . vm-join!) (S4fd1 core-prim . vm-set-value!) (S4fd0 core-prim . vm?) (S4fcf core-prim . main-vm?) (S4fce core-prim . vm-eval) (S4fcd core-prim . vm-self) (S4fcc core-prim . vm-start!) (S4fcb core-prim . make-vm) (S4fca core-prim . mutex-try-lock!) (S4fc9 core-prim . mutex-unlock!) (S4fc8 core-prim . mutex-lock!) (S4fc7 core-prim . mutex?) (S4fc6 core-prim . make-mutex) (S4fc5 core-prim . condition-variable-notify-all!) (S4fc4 core-prim . condition-variable-notify!) (S4fc3 core-prim . condition-variable-wait!) (S4fc2 core-prim . make-condition-variable) (S4fc1 core-prim . mosh-executable-path) (S4fc0 core-prim . make-file-options) (S4fbf core-prim . source-info) (S4fbe core-prim . make-compiler-instruction) (S4fbd core-prim . make-instruction) (S4fbc core-prim . set-source-info!) (S4fbb core-prim . bignum?) (S4fba core-prim . fast-equal?) (S4fb9 core-prim . fasl-read) (S4fb8 core-prim . fasl-write) (S4fb7 core-prim . time-usage) (S4fb6 core-prim . os-constant) (S4fb5 core-prim . disasm) (S24cf core-prim . make-parameter) (S4fb4 core-prim . socket-port) (S4fb3 core-prim . socket-shutdown) (S4fb2 core-prim . socket-close) (S4fb1 core-prim . socket-send) (S4fb0 core-prim . socket-recv!) (S4faf core-prim . socket-recv) (S4fae core-prim . make-server-socket) (S4fad core-prim . make-client-socket) (S4fac core-prim . socket-accept) (S4fab core-prim . socket?) (S4faa core-prim . string-upcase) (S4fa9 core-prim . string-titlecase) (S4fa8 core-prim . string-normalize-nfkd) (S4fa7 core-prim . string-normalize-nfkc) (S4fa6 core-prim . string-normalize-nfd) (S4fa5 core-prim . string-normalize-nfc) (S4fa4 core-prim . string-foldcase) (S4fa3 core-prim . string-downcase) (S4fa2 core-prim . string-ci>?) (S4fa1 core-prim . string-ci>=?) (S4fa0 core-prim . string-ci=?) (S4f9f core-prim . string-ci<?) (S4f9e core-prim . string-ci<=?) (S4f9d core-prim . char-whitespace?) (S4f9c core-prim . char-upper-case?) (S4f9b core-prim . char-title-case?) (S4f9a core-prim . char-numeric?) (S4f99 core-prim . char-lower-case?) (S4f98 core-prim . char-general-category) (S4f97 core-prim . char-upcase) (S4f96 core-prim . char-titlecase) (S4f95 core-prim . char-foldcase) (S4f94 core-prim . char-downcase) (S4f93 core-prim . char-ci>?) (S4f92 core-prim . char-ci>=?) (S4f91 core-prim . char-ci=?) (S4f90 core-prim . char-ci<?) (S4f8f core-prim . char-ci<=?) (S4f8e core-prim . char-alphabetic?) (S2ad8 core-prim . make-variable-transformer) (S2d8f core-prim . identifier?) (S2d7b core-prim . generate-temporaries) (S2d7d core-prim . free-identifier=?) (S2d93 core-prim . syntax->datum) (S2d91 core-prim . datum->syntax) (S2d7f core-prim . bound-identifier=?) (S4f8d core-prim . record-type-descriptor?) (S4f8c core-prim . record-predicate) (S4f8b core-prim . record-mutator) (S4f8a core-prim . record-constructor) (S4f89 core-prim . record-accessor) (S4f88 core-prim . make-record-type-descriptor) (S4f87 core-prim . make-record-constructor-descriptor) (S4f86 core-prim . record?) (S4f85 core-prim . record-type-uid) (S4f84 core-prim . record-type-sealed?) (S4f83 core-prim . record-type-parent) (S4f82 core-prim . record-type-opaque?) (S4f81 core-prim . record-type-name) (S4f80 core-prim . record-type-generative?) (S4f7f core-prim . record-type-field-names) (S4f7e core-prim . record-rtd) (S4f7d core-prim . record-field-mutable?) (S4f7c core-prim . delete-file) (S4f7b core-prim . file-exists?) (S4f7a core-prim . vector-sort!) (S4f79 core-prim . vector-sort) (S4f78 core-prim . list-sort) (S4f77 core-prim . symbol-hash) (S4f76 core-prim . string-ci-hash) (S4f75 core-prim . string-hash) (S4f74 core-prim . equal-hash) (S4f73 core-prim . hashtable-equivalence-function) (S4f72 core-prim . make-hashtable) (S4f71 core-prim . hashtable-hash-function) (S4f70 core-prim . make-eqv-hashtable) (S4f6f core-prim . make-eq-hashtable) (S4f6e core-prim . hashtable?) (S4f6d core-prim . hashtable-update!) (S4f6c core-prim . hashtable-size) (S4f6b core-prim . hashtable-set!) (S4f6a core-prim . hashtable-ref) (S4f69 core-prim . hashtable-mutable?) (S4f68 core-prim . hashtable-keys) (S4f67 core-prim . hashtable-entries) (S4f66 core-prim . hashtable-delete!) (S4f65 core-prim . hashtable-copy) (S4f64 core-prim . hashtable-contains?) (S4f63 core-prim . hashtable-clear!) (S4f62 core-prim . call-with-output-file) (S4f61 core-prim . call-with-input-file) (S4f60 core-prim . write-char) (S4f5f core-prim . write) (S4f5e core-prim . with-output-to-file) (S4f5d core-prim . with-input-from-file) (S4f5c core-prim . read-char) (S4f5b core-prim . read) (S4f5a core-prim . peek-char) (S4f59 core-prim . open-output-file) (S4f58 core-prim . open-input-file) (S4f57 core-prim . newline) (S4f56 core-prim . display) (S4f55 core-prim . close-output-port) (S4f54 core-prim . close-input-port) (S4f53 core-prim . eof-object?) (S4f52 core-prim . eof-object) (S4f51 core-prim . current-error-port) (S4f50 core-prim . current-output-port) (S4f4f core-prim . current-input-port) (S4f4e core-prim . output-port?) (S4f4d core-prim . input-port?) (S4f4c core-prim . utf-8-codec) (S4f4b core-prim . utf-16-codec) (S4f4a core-prim . transcoder-error-handling-mode) (S4f49 core-prim . transcoder-eol-style) (S4f48 core-prim . transcoder-codec) (S4f47 core-prim . transcoded-port) (S4f46 core-prim . textual-port?) (S4f45 core-prim . string->bytevector) (S4f44 core-prim . standard-output-port) (S4f43 core-prim . standard-input-port) (S4f42 core-prim . standard-error-port) (S4f41 core-prim . set-port-position!) (S4f40 core-prim . put-u8) (S4f3f core-prim . put-string) (S4f3e core-prim . put-datum) (S4f3d core-prim . put-char) (S4f3c core-prim . put-bytevector) (S4f3b core-prim . port?) (S4f3a core-prim . port-transcoder) (S4f39 core-prim . port-position) (S4f38 core-prim . port-has-set-port-position!?) (S4f37 core-prim . port-has-port-position?) (S4f36 core-prim . port-eof?) (S4f35 core-prim . output-port-buffer-mode) (S4f34 core-prim . open-string-output-port) (S4f33 core-prim . open-string-input-port) (S4f32 core-prim . open-file-output-port) (S4f31 core-prim . open-file-input/output-port) (S4f30 core-prim . open-file-input-port) (S4f2f core-prim . open-bytevector-output-port) (S4f2e core-prim . open-bytevector-input-port) (S4f2d core-prim . native-transcoder) (S4f2c core-prim . native-eol-style) (S4f2b core-prim . make-transcoder) (S4f2a core-prim . latin-1-codec) (S49b5 core-prim . make-i/o-write-error) (S49a0 core-prim . make-i/o-read-error) (S4a56 core-prim . make-i/o-port-error) (S49cc core-prim . make-i/o-invalid-position-error) (S49e7 core-prim . make-i/o-filename-error) (S4a00 core-prim . make-i/o-file-protection-error) (S4a15 core-prim . make-i/o-file-is-read-only-error) (S4a3f core-prim . make-i/o-file-does-not-exist-error) (S4a2a core-prim . make-i/o-file-already-exists-error) (S498b core-prim . make-i/o-error) (S4a86 core-prim . make-i/o-encoding-error) (S4a6f core-prim . make-i/o-decoding-error) (S4f29 core-prim . make-custom-textual-output-port) (S4f28 core-prim . make-custom-textual-input/output-port) (S4f27 core-prim . make-custom-textual-input-port) (S4f26 core-prim . make-custom-binary-output-port) (S4f25 core-prim . make-custom-binary-input/output-port) (S4f24 core-prim . make-custom-binary-input-port) (S4f23 core-prim . make-bytevector) (S4f22 core-prim . lookahead-u8) (S4f21 core-prim . lookahead-char) (S49b7 core-prim . i/o-write-error?) (S49a2 core-prim . i/o-read-error?) (S4a5a core-prim . i/o-port-error?) (S49d0 core-prim . i/o-invalid-position-error?) (S49eb core-prim . i/o-filename-error?) (S4a02 core-prim . i/o-file-protection-error?) (S4a17 core-prim . i/o-file-is-read-only-error?) (S4a41 core-prim . i/o-file-does-not-exist-error?) (S4a2c core-prim . i/o-file-already-exists-error?) (S498d core-prim . i/o-error?) (S49d2 core-prim . i/o-error-position) (S4a5c core-prim . i/o-error-port) (S49ed core-prim . i/o-error-filename) (S4a8a core-prim . i/o-encoding-error?) (S4a8c core-prim . i/o-encoding-error-char) (S4a71 core-prim . i/o-decoding-error?) (S4f20 core-prim . get-u8) (S4f1f core-prim . get-string-n!) (S4f1e core-prim . get-string-n) (S4f1d core-prim . get-string-all) (S4f1c core-prim . get-line) (S4f1b core-prim . get-datum) (S4f1a core-prim . get-char) (S4f19 core-prim . get-bytevector-some) (S4f18 core-prim . get-bytevector-n!) (S4f17 core-prim . get-bytevector-n) (S4f16 core-prim . get-bytevector-all) (S4f15 core-prim . flush-output-port) (S4f14 core-prim . close-port) (S2d69 core-prim . scheme-report-environment) (S4f13 core-prim . quotient) (S2d67 core-prim . null-environment) (S4f12 core-prim . remainder) (S4f11 core-prim . modulo) (S4f10 core-prim . inexact->exact) (S4f0f core-prim . force) (S4f0e core-prim . exact->inexact) (S4f0d core-prim . make-promise) (S4f0c core-prim . exit) (S4bc5 core-prim . command-line) (S4f0b core-prim . string-fill!) (S4f0a core-prim . string-set!) (S4f09 core-prim . set-cdr!) (S4f08 core-prim . set-car!) (S4f07 core-prim . remove) (S4f06 core-prim . remv) (S4f05 core-prim . remp) (S4f04 core-prim . remq) (S4f03 core-prim . partition) (S4f02 core-prim . memv) (S4f01 core-prim . memq) (S4f00 core-prim . memp) (S4eff core-prim . member) (S4efe core-prim . exists) (S4efd core-prim . for-all) (S4efc core-prim . fold-right) (S4efb core-prim . fold-left) (S4efa core-prim . find) (S4ef9 core-prim . filter) (S4ef8 core-prim . cons*) (S4ef7 core-prim . assv) (S4ef6 core-prim . assq) (S4ef5 core-prim . assp) (S4ef4 core-prim . assoc) (S4ef3 core-prim . call-with-string-output-port) (S4ef2 core-prim . call-with-port) (S4ef1 core-prim . call-with-bytevector-output-port) (S4ef0 core-prim . bytevector->string) (S4eef core-prim . buffer-mode?) (S4eee core-prim . binary-port?) (S4eed core-prim . with-exception-handler) (S4eec core-prim . raise-continuable) (S4eeb core-prim . raise) (S2d6d core-prim . eval) (S2d65 core-prim . environment) (S4eea core-prim . make-enumeration) (S4ee9 core-prim . enum-set=?) (S4ee8 core-prim . enum-set-universe) (S4ee7 core-prim . enum-set-union) (S4ee6 core-prim . enum-set-subset?) (S4ee5 core-prim . enum-set-projection) (S4ee4 core-prim . enum-set-member?) (S4ee3 core-prim . enum-set-intersection) (S4ee2 core-prim . enum-set-indexer) (S4ee1 core-prim . enum-set-difference) (S4ee0 core-prim . enum-set-constructor) (S4edf core-prim . enum-set-complement) (S4ede core-prim . enum-set->list) (S4901 core-prim . who-condition?) (S4879 core-prim . warning?) (S48b8 core-prim . violation?) (S4978 core-prim . undefined-violation?) (S495f core-prim . syntax-violation?) (S4963 core-prim . syntax-violation-subform) (S4961 core-prim . syntax-violation-form) (S2d8d core-prim . syntax-violation) (S4edd core-prim . simple-conditions) (S488e core-prim . serious-condition?) (S4918 core-prim . non-continuable-violation?) (S4862 core-prim . message-condition?) (S48fd core-prim . make-who-condition) (S4877 core-prim . make-warning) (S48b6 core-prim . make-violation) (S4976 core-prim . make-undefined-violation) (S4959 core-prim . make-syntax-violation) (S488c core-prim . make-serious-condition) (S4916 core-prim . make-non-continuable-violation) (S485e core-prim . make-message-condition) (S4940 core-prim . make-lexical-violation) (S48e2 core-prim . make-irritants-condition) (S492b core-prim . make-implementation-restriction-violation) (S48a1 core-prim . make-error) (S48cb core-prim . make-assertion-violation) (S4942 core-prim . lexical-violation?) (S48e6 core-prim . irritants-condition?) (S492d core-prim . implementation-restriction-violation?) (S48a3 core-prim . error?) (S4903 core-prim . condition-who) (S4edc core-prim . condition-predicate) (S4864 core-prim . condition-message) (S48e8 core-prim . condition-irritants) (S4edb core-prim . condition-accessor) (S4eda core-prim . condition) (S48cd core-prim . assertion-violation?) (S4ed9 core-prim . condition?) (S4ed8 core-prim . utf32->string) (S4ed7 core-prim . utf16->string) (S4ed6 core-prim . utf8->string) (S4ed5 core-prim . uint-list->bytevector) (S4ed4 core-prim . u8-list->bytevector) (S4ed3 core-prim . string->utf8) (S4ed2 core-prim . string->utf32) (S4ed1 core-prim . string->utf16) (S4ed0 core-prim . sint-list->bytevector) (S4ecf core-prim . native-endianness) (S4ece core-prim . bytevector?) (S4ecd core-prim . bytevector=?) (S4ecc core-prim . bytevector-uint-set!) (S4ecb core-prim . bytevector-uint-ref) (S4eca core-prim . bytevector-u8-set!) (S4ec9 core-prim . bytevector-u8-ref) (S4ec8 core-prim . bytevector-u64-set!) (S4ec7 core-prim . bytevector-u64-ref) (S4ec6 core-prim . bytevector-u64-native-set!) (S4ec5 core-prim . bytevector-u64-native-ref) (S4ec4 core-prim . bytevector-u32-set!) (S4ec3 core-prim . bytevector-u32-ref) (S4ec2 core-prim . bytevector-u32-native-set!) (S4ec1 core-prim . bytevector-u32-native-ref) (S4ec0 core-prim . bytevector-u16-set!) (S4ebf core-prim . bytevector-u16-ref) (S4ebe core-prim . bytevector-u16-native-set!) (S4ebd core-prim . bytevector-u16-native-ref) (S4ebc core-prim . bytevector-sint-set!) (S4ebb core-prim . bytevector-sint-ref) (S4eba core-prim . bytevector-s8-set!) (S4eb9 core-prim . bytevector-s8-ref) (S4eb8 core-prim . bytevector-s64-set!) (S4eb7 core-prim . bytevector-s64-ref) (S4eb6 core-prim . bytevector-s64-native-set!) (S4eb5 core-prim . bytevector-s64-native-ref) (S4eb4 core-prim . bytevector-s32-set!) (S4eb3 core-prim . bytevector-s32-ref) (S4eb2 core-prim . bytevector-s32-native-set!) (S4eb1 core-prim . bytevector-s32-native-ref) (S4eb0 core-prim . bytevector-s16-set!) (S4eaf core-prim . bytevector-s16-ref) (S4eae core-prim . bytevector-s16-native-set!) (S4ead core-prim . bytevector-s16-native-ref) (S4eac core-prim . bytevector-length) (S4eab core-prim . bytevector-ieee-single-ref) (S4eaa core-prim . bytevector-ieee-single-set!) (S4ea9 core-prim . bytevector-ieee-single-native-set!) (S4ea8 core-prim . bytevector-ieee-single-native-ref) (S4ea7 core-prim . bytevector-ieee-double-set!) (S4ea6 core-prim . bytevector-ieee-double-ref) (S4ea5 core-prim . bytevector-ieee-double-native-set!) (S4ea4 core-prim . bytevector-ieee-double-native-ref) (S4ea3 core-prim . bytevector-fill!) (S4ea2 core-prim . bytevector-copy!) (S4ea1 core-prim . bytevector-copy) (S4ea0 core-prim . bytevector->uint-list) (S4e9f core-prim . bytevector->u8-list) (S4e9e core-prim . bytevector->sint-list) (S4ab6 core-prim . no-nans-violation?) (S4aa1 core-prim . no-infinities-violation?) (S4ab4 core-prim . make-no-nans-violation) (S4a9f core-prim . make-no-infinities-violation) (S4e9d core-prim . real->flonum) (S4e9c core-prim . flzero?) (S4e9b core-prim . fltruncate) (S4e9a core-prim . fltan) (S4e99 core-prim . flsqrt) (S4e98 core-prim . flsin) (S4e97 core-prim . flround) (S4e96 core-prim . flpositive?) (S4e95 core-prim . flonum?) (S4e94 core-prim . flodd?) (S4e93 core-prim . flnumerator) (S4e92 core-prim . flnegative?) (S4e91 core-prim . flnan?) (S4e90 core-prim . flmod0) (S4e8f core-prim . flmod) (S4e8e core-prim . flmin) (S4e8d core-prim . flmax) (S4e8c core-prim . fllog) (S4e8b core-prim . flinteger?) (S4e8a core-prim . flinfinite?) (S4e89 core-prim . flfloor) (S4e88 core-prim . flfinite?) (S4e87 core-prim . flexpt) (S4e86 core-prim . flexp) (S4e85 core-prim . fleven?) (S4e84 core-prim . fldiv0-and-mod0) (S4e83 core-prim . fldiv0) (S4e82 core-prim . fldiv-and-mod) (S4e81 core-prim . fldiv) (S4e80 core-prim . fldenominator) (S4e7f core-prim . flcos) (S4e7e core-prim . flceiling) (S4e7d core-prim . flatan) (S4e7c core-prim . flasin) (S4e7b core-prim . flacos) (S4e7a core-prim . flabs) (S4e79 core-prim . fl>?) (S4e78 core-prim . fl>=?) (S4e77 core-prim . fl=?) (S4e76 core-prim . fl<?) (S4e75 core-prim . fl<=?) (S4e74 core-prim . fl/) (S4e73 core-prim . fl-) (S4e72 core-prim . fl+) (S4e71 core-prim . fl*) (S4e70 core-prim . fixnum->flonum) (S4e6f core-prim . fxzero?) (S4e6e core-prim . fxxor) (S4e6d core-prim . fxrotate-bit-field) (S4e6c core-prim . fxreverse-bit-field) (S4e6b core-prim . fxpositive?) (S4e6a core-prim . fxodd?) (S4e69 core-prim . fxnot) (S4e68 core-prim . fxnegative?) (S4e67 core-prim . fxmod0) (S4e66 core-prim . fxmod) (S4e65 core-prim . fxmin) (S4e64 core-prim . fxmax) (S4e63 core-prim . fxlength) (S4e62 core-prim . fxior) (S4e61 core-prim . fxif) (S4e60 core-prim . fxfirst-bit-set) (S4e5f core-prim . fxeven?) (S4e5e core-prim . fxdiv0-and-mod0) (S4e5d core-prim . fxdiv0) (S4e5c core-prim . fxdiv-and-mod) (S4e5b core-prim . fxdiv) (S4e5a core-prim . fxcopy-bit-field) (S4e59 core-prim . fxcopy-bit) (S4e58 core-prim . fxbit-set?) (S4e57 core-prim . fxbit-field) (S4e56 core-prim . fxbit-count) (S4e55 core-prim . fxarithmetic-shift-right) (S4e54 core-prim . fxarithmetic-shift-left) (S4e53 core-prim . fxarithmetic-shift) (S4e52 core-prim . fxand) (S4e51 core-prim . fx>?) (S4e50 core-prim . fx>=?) (S4e4f core-prim . fx=?) (S4e4e core-prim . fx<?) (S4e4d core-prim . fx<=?) (S4e4c core-prim . fx-/carry) (S4e4b core-prim . fx-) (S4e4a core-prim . fx+/carry) (S4e49 core-prim . fx+) (S4e48 core-prim . fx*/carry) (S4e47 core-prim . fx*) (S4e46 core-prim . greatest-fixnum) (S4e45 core-prim . least-fixnum) (S4e44 core-prim . fixnum-width) (S4e43 core-prim . fixnum?) (S4e42 core-prim . bitwise-rotate-bit-field) (S4e41 core-prim . bitwise-reverse-bit-field) (S4e40 core-prim . bitwise-length) (S4e3f core-prim . bitwise-if) (S4e3e core-prim . bitwise-first-bit-set) (S4e3d core-prim . bitwise-copy-bit-field) (S4e3c core-prim . bitwise-copy-bit) (S4e3b core-prim . bitwise-bit-set?) (S4e3a core-prim . bitwise-bit-field) (S4e39 core-prim . bitwise-bit-count) (S4e38 core-prim . bitwise-xor) (S4e37 core-prim . bitwise-ior) (S4e36 core-prim . bitwise-and) (S4e35 core-prim . bitwise-not) (S4e34 core-prim . bitwise-arithmetic-shift-right) (S4e33 core-prim . bitwise-arithmetic-shift-left) (S4e32 core-prim . bitwise-arithmetic-shift) (S4e31 core-prim . zero?) (S4e30 core-prim . vector?) (S4e2f core-prim . vector-set!) (S4e2e core-prim . vector-ref) (S4e2d core-prim . vector-map) (S4e2c core-prim . vector-length) (S4e2b core-prim . vector-for-each) (S4e2a core-prim . vector-fill!) (S4e29 core-prim . vector->list) (S4e28 core-prim . vector) (S4e27 core-prim . values) (S4e26 core-prim . truncate) (S4e25 core-prim . tan) (S4e24 core-prim . symbol?) (S4e23 core-prim . symbol=?) (S4e22 core-prim . symbol->string) (S4e21 core-prim . substring) (S4e20 core-prim . string?) (S4e1f core-prim . string>?) (S4e1e core-prim . string>=?) (S4e1d core-prim . string=?) (S4e1c core-prim . string<?) (S4e1b core-prim . string<=?) (S4e1a core-prim . string-ref) (S4e19 core-prim . string-length) (S4e18 core-prim . string-for-each) (S4e17 core-prim . string-copy) (S4e16 core-prim . string-append) (S4e15 core-prim . string->symbol) (S4e14 core-prim . string->number) (S4e13 core-prim . string->list) (S4e12 core-prim . string) (S4e11 core-prim . sqrt) (S4e10 core-prim . sin) (S4e0f core-prim . round) (S4e0e core-prim . reverse) (S4e0d core-prim . real?) (S4e0c core-prim . real-valued?) (S4e0b core-prim . real-part) (S4e0a core-prim . rationalize) (S4e09 core-prim . rational?) (S4e08 core-prim . rational-valued?) (S4e07 core-prim . procedure?) (S4e06 core-prim . positive?) (S4e05 core-prim . pair?) (S4e04 core-prim . odd?) (S4e03 core-prim . numerator) (S4e02 core-prim . number?) (S4e01 core-prim . number->string) (S4e00 core-prim . null?) (S4dff core-prim . not) (S4dfe core-prim . negative?) (S4dfd core-prim . nan?) (S4dfc core-prim . min) (S4dfb core-prim . max) (S4dfa core-prim . map) (S4df9 core-prim . make-vector) (S4df8 core-prim . make-string) (S4df7 core-prim . make-rectangular) (S4df6 core-prim . make-polar) (S4df5 core-prim . magnitude) (S4df4 core-prim . log) (S4df3 core-prim . list?) (S4df2 core-prim . list-tail) (S4df1 core-prim . list-ref) (S4df0 core-prim . list->vector) (S4def core-prim . list->string) (S4dee core-prim . list) (S4ded core-prim . length) (S4dec core-prim . lcm) (S4deb core-prim . integer?) (S4dea core-prim . integer-valued?) (S4de9 core-prim . integer->char) (S4de8 core-prim . infinite?) (S4de7 core-prim . inexact?) (S4de6 core-prim . inexact) (S4de5 core-prim . imag-part) (S4de4 core-prim . gcd) (S4de3 core-prim . for-each) (S4de2 core-prim . floor) (S4de1 core-prim . finite?) (S4de0 core-prim . expt) (S4ddf core-prim . exp) (S4dde core-prim . exact?) (S4ddd core-prim . exact-integer-sqrt) (S4ddc core-prim . exact) (S4ddb core-prim . even?) (S4dda core-prim . error) (S4dd9 core-prim . eqv?) (S4dd8 core-prim . equal?) (S4dd7 core-prim . eq?) (S4dd6 core-prim . dynamic-wind) (S4dd5 core-prim . div0-and-mod0) (S4dd4 core-prim . mod0) (S4dd3 core-prim . div0) (S4dd2 core-prim . div-and-mod) (S4dd1 core-prim . mod) (S4dd0 core-prim . div) (S4dcf core-prim . denominator) (S4dce core-prim . cos) (S4dcd core-prim . cons) (S4dcc core-prim . complex?) (S4dcb core-prim . char?) (S4dca core-prim . char>?) (S4dc9 core-prim . char>=?) (S4dc8 core-prim . char=?) (S4dc7 core-prim . char<?) (S4dc6 core-prim . char<=?) (S4dc5 core-prim . char->integer) (S4dc4 core-prim . ceiling) (S4dc3 core-prim . call-with-values) (S4dc2 core-prim . call/cc) (S4dc1 core-prim . call-with-current-continuation) (S4dc0 core-prim . cddddr) (S4dbf core-prim . cdddar) (S4dbe core-prim . cddadr) (S4dbd core-prim . cddaar) (S4dbc core-prim . cdaddr) (S4dbb core-prim . cdadar) (S4dba core-prim . cdaadr) (S4db9 core-prim . cdaaar) (S4db8 core-prim . cadddr) (S4db7 core-prim . caddar) (S4db6 core-prim . cadadr) (S4db5 core-prim . cadaar) (S4db4 core-prim . caaddr) (S4db3 core-prim . caadar) (S4db2 core-prim . caaadr) (S4db1 core-prim . caaaar) (S4db0 core-prim . cdddr) (S4daf core-prim . cddar) (S4dae core-prim . cdadr) (S4dad core-prim . cdaar) (S4dac core-prim . caddr) (S4dab core-prim . cadar) (S4daa core-prim . caadr) (S4da9 core-prim . caaar) (S4da8 core-prim . cddr) (S4da7 core-prim . cdar) (S4da6 core-prim . cadr) (S4da5 core-prim . caar) (S4da4 core-prim . cdr) (S4da3 core-prim . car) (S4da2 core-prim . boolean?) (S4da1 core-prim . boolean=?) (S4da0 core-prim . atan) (S4d9f core-prim . assertion-violation) (S2d87 core-prim . assertion-error) (S4d9e core-prim . asin) (S4d9d core-prim . apply) (S4d9c core-prim . append) (S4d9b core-prim . angle) (S4d9a core-prim . acos) (S4d99 core-prim . abs) (S4d98 core-prim . /) (S4d97 core-prim . *) (S4d96 core-prim . -) (S4d95 core-prim . +) (S4d94 core-prim . >=) (S4d93 core-prim . >) (S4d92 core-prim . =) (S4d91 core-prim . <=) (S4d90 core-prim . <) (S4d8f core-prim . library) (S4d8e $core-rtd &no-nans-rtd &no-nans-rcd) (S4d8d $core-rtd &no-infinities-rtd &no-infinities-rcd) (S4d8c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (S4d8b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (S4d8a $core-rtd &i/o-port-rtd &i/o-port-rcd) (S4d89 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (S4d88 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (S4d87 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (S4d86 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (S4d85 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (S4d84 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (S4d83 $core-rtd &i/o-write-rtd &i/o-write-rcd) (S4d82 $core-rtd &i/o-read-rtd &i/o-read-rcd) (S4d81 $core-rtd &i/o-rtd &i/o-rcd) (S4d80 $core-rtd &undefined-rtd &undefined-rcd) (S4d7f $core-rtd &syntax-rtd &syntax-rcd) (S4d7e $core-rtd &lexical-rtd &lexical-rcd) (S4d7d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (S4d7c $core-rtd &non-continuable-rtd &non-continuable-rcd) (S4d7b $core-rtd &who-rtd &who-rcd) (S4d7a $core-rtd &irritants-rtd &irritants-rcd) (S4d79 $core-rtd &assertion-rtd &assertion-rcd) (S4d78 $core-rtd &violation-rtd &violation-rcd) (S4d77 $core-rtd &error-rtd &error-rcd) (S4d76 $core-rtd &serious-rtd &serious-rcd) (S4d75 $core-rtd &warning-rtd &warning-rcd) (S4d74 $core-rtd &message-rtd &message-rcd) (S4d73 $core-rtd &condition-rtd &condition-rcd) (S4d72 macro . define-condition-type) (S4d71 macro . define-enumeration) (S4d70 macro . define-record-type) (S4d6f macro . parent-rtd) (S4d6e macro . nongenerative) (S4d6d macro . opaque) (S4d6c macro . sealed) (S4d6b macro . protocol) (S4d6a macro . parent) (S4d69 macro . immutable) (S4d68 macro . mutable) (S4d67 macro . fields) (S4d66 macro . error-handling-mode) (S4d65 macro . file-options) (S4d64 macro . buffer-mode) (S4d63 macro . eol-style) (S4d62 macro . guard) (S4d61 macro . trace-define) (S4d60 macro . trace-lambda) (S4d5f macro . unsyntax-splicing) (S4d5e macro . unsyntax) (S4d5d macro . unquote-splicing) (S4d5c macro . unquote) (S4d5b macro . _) (S4d5a macro . else) (S4d59 macro . =>) (S4d58 macro . ...) (S4d57 macro . assert) (S4d56 macro . endianness) (S4d55 macro . delay) (S4d54 macro . time) (S4d53 macro . do) (S4d52 macro . cond) (S4d51 macro . let*) (S4d50 macro . let*-values) (S4d4f macro . let-values) (S4d4e macro . identifier-syntax) (S4d4d macro . with-syntax) (S4d4c macro . quasisyntax) (S4d4b macro . quasiquote) (S4d4a macro . syntax-rules) (S4d49 macro . include) (S4d48 macro . define-struct) (S4d47 core-macro . record-constructor-descriptor) (S4d46 core-macro . record-type-descriptor) (S4d45 macro . case) (S4d44 macro . parameterize) (S4d43 macro . unless) (S4d42 macro . when) (S4d41 core-macro . or) (S4d40 core-macro . and) (S4d3f core-macro . if) (S4d3e core-macro . let) (S4d3d core-macro . letrec*) (S4d3c core-macro . letrec) (S4d3b core-macro . type-descriptor) (S4d3a core-macro . case-lambda) (S4d39 core-macro . lambda) (S4d38 core-macro . syntax) (S4d37 core-macro . syntax-case) (S4d36 core-macro . quote) (S4d35 core-macro . foreign-call) (S4d34 letrec-syntax) (S4d33 let-syntax) (S4d32 set!) (S4d31 import) (S4d30 begin) (S4d2f module) (S4d2e define-syntax) (S4d2d define)) values values '#f '#f '#f '#f) (S28bb@S2707@install-library 'S5075 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . S5054) (eval-core . S5053) (set-symbol-value! . S5052) (symbol-value . S5051) (gensym . S5050) (void . S504f)) '() values values '#f '#f '#f '#f) (S28bb@S2707@install-library 'S5076 '(mosh) '() '() '() '() '((set-symbol-value! . S5052) (symbol-value . S5051) (regexp? . S504d) (read-line . S504c) (ungensym . S504a) (alist->eq-hash-table . S5049) (assoc-ref . S5048) (print . S5047) (format . S5046) (host-os . S5045) (library-path . S26e6) (standard-library-path . S5044) (file-newer? . S5043) (stat-mtime . S5042) (digit->integer . S503e) (call-with-string-input-port . S503d) (call-with-string-io . S503c) (string-split . S503b) (bytevector-for-each . S503a) (string->regexp . S5039) (rxmatch . S5038) (regexp-replace-all . S5037) (hashtable-for-each . S5036) (set-current-directory! . S5031) (expand-path . S5030) (current-directory . S502f) (p . S4ff0) (get-timeofday . S4fd7) (get-command-line . S4fd6) (sys-display . S4fd5) (whereis . S4fd4) (register . S4fd3) (vm-join! . S4fd2) (vm-set-value! . S4fd1) (vm? . S4fd0) (main-vm? . S4fcf) (vm-eval . S4fce) (vm-self . S4fcd) (vm-start! . S4fcc) (make-vm . S4fcb) (mutex-try-lock! . S4fca) (mutex-unlock! . S4fc9) (mutex-lock! . S4fc8) (mutex? . S4fc7) (make-mutex . S4fc6) (condition-variable-notify-all! . S4fc5) (condition-variable-notify! . S4fc4) (condition-variable-wait! . S4fc3) (make-condition-variable . S4fc2) (mosh-executable-path . S4fc1) (make-file-options . S4fc0) (source-info . S4fbf) (make-compiler-instruction . S4fbe) (make-instruction . S4fbd) (set-source-info! . S4fbc) (bignum? . S4fbb) (fast-equal? . S4fba) (fasl-read . S4fb9) (fasl-write . S4fb8) (time-usage . S4fb7) (os-constant . S4fb6) (time . S4d54) (include . S4d49)) '() values values '#f '#f '#f '#f) (S28bb@S2707@install-library 'S5077 '(system) '() '() '() '() '((gensym-prefix-set! . S504b) (write-to-file . S5041) (file->list . S5040) (file->string . S503f) (mosh-cache-dir . S24d1) (call-process . S5035) (local-tz-offset . S5034) (microseconds . S5033) (directory-list . S5032) (expand-path . S5030) (%spawn . S502e) (%waitpid . S502d) (simple-struct-name . S502c) (simple-struct-set! . S502b) (simple-struct-ref . S502a) (make-simple-struct . S5029) (simple-struct? . S5028) (pointer-ref-c-int64 . S5027) (pointer-ref-c-int32 . S5026) (pointer-ref-c-int16 . S5025) (pointer-ref-c-int8 . S5024) (pointer-ref-c-uint64 . S5023) (pointer-ref-c-uint32 . S5022) (pointer-ref-c-uint16 . S5021) (pointer-ref-c-uint8 . S5020) (pointer-set-c-uint64! . S501f) (pointer-set-c-uint32! . S501e) (pointer-set-c-uint16! . S501d) (pointer-set-c-uint8! . S501c) (pointer-set-c-int64! . S501b) (pointer-set-c-int32! . S501a) (pointer-set-c-int16! . S5019) (pointer-set-c-int8! . S5018) (pointer-set-c-pointer! . S5017) (pointer-set-c-double! . S5016) (pointer-set-c-float! . S5015) (pointer-set-c-long-long! . S5014) (pointer-set-c-long! . S5013) (pointer-set-c-int! . S5012) (pointer-set-c-short! . S5011) (pointer-set-c-char! . S5010) (pointer-ref-c-pointer . S500f) (pointer-ref-c-double . S500e) (pointer-ref-c-float . S500d) (pointer-ref-c-unsigned-long-long . S500c) (pointer-ref-c-signed-long-long . S500b) (pointer-ref-c-unsigned-long . S500a) (pointer-ref-c-signed-long . S5009) (pointer-ref-c-unsigned-int . S5008) (pointer-ref-c-signed-int . S5007) (pointer-ref-c-unsigned-short . S5006) (pointer-ref-c-signed-short . S5005) (pointer-ref-c-unsigned-char . S5004) (pointer-ref-c-signed-char . S5003) (pointer->integer . S5002) (integer->pointer . S5001) (pointer? . S5000) (shared-errno . S4fff) (%ffi-free . S4ffe) (%ffi-malloc . S4ffd) (%ffi-supported? . S4ffc) (%ffi-pointer->string . S4ffb) (%ffi-call->string-or-zero . S4ffa) (%ffi-call->double . S4ff9) (%ffi-call->void* . S4ff8) (%ffi-call->void . S4ff7) (%ffi-call->char . S4ff6) (%ffi-call->int . S4ff5) (%ffi-lookup . S4ff4) (%ffi-open . S4ff3) (%fork . S4ff2) (%pipe . S4ff1) (open-output-string . S4fef) (get-output-string . S4fee) (file-stat-ctime . S4fed) (file-stat-atime . S4fec) (file-stat-mtime . S4feb) (file-size-in-bytes . S4fea) (file-writable? . S4fe9) (file-executable? . S4fe8) (file-readable? . S4fe7) (file-regular? . S4fe6) (file-symbolic-link? . S4fe5) (file-directory? . S4fe4) (create-symbolic-link . S4fe3) (rename-file . S4fe2) (delete-directory . S4fe1) (create-directory . S4fe0) (create-mosh-cache-dir . S4fdf) (get-environment-variables . S4fde) (current-exception-handler . S4fdd) (get-environment-variable . S4fdc) (join-wraps . S4fdb) (id->real-label . S4fda) (same-marks? . S4fd9) (same-marks*? . S4fd8) (disasm . S4fb5) (make-parameter . S24cf) (socket-port . S4fb4) (socket-shutdown . S4fb3) (socket-close . S4fb2) (socket-send . S4fb1) (socket-recv! . S4fb0) (socket-recv . S4faf) (make-server-socket . S4fae) (make-client-socket . S4fad) (socket-accept . S4fac) (socket? . S4fab) (parameterize . S4d44)) '() values values '#f '#f '#f '#f)))
(begin (set! S4bb0@ref (unspecified)) (set! S4bb2@x* (unspecified)) (set! S4bb4@add-library-path! (unspecified)) (set! S4bb6@parse-and-add-library-path (unspecified)) (set! S4bb8@for-each-with-index (unspecified)) (set! S4bba@rpad (unspecified)) (set! S4bbc@condition-printer (unspecified)) (set! S4bbe@record->field-alist (unspecified)) (set! S4bc0@map-with-index (unspecified)) (set! S4bc2@repl (unspecified)) (set! S4bc4@trace-printer (unspecified)) (set! S4bc6@command-line (unspecified)) (set! S4bc8@local-library-path (unspecified)) (set! S4bca@load/args (unspecified)) (set! S4bcc@load (unspecified)) (set! S4bce@ironscheme-build (unspecified)) (set! S4bd0@eval-top-level (unspecified)) (set! S4bd2@compile-system-libraries (unspecified)) (set! S4bd4@compile (unspecified)) (set! S4bd6@compile->closure (unspecified)) (set! S4bd8@pre-compile-r6rs-file (unspecified)) (set! S4bda@load-r6rs-top-level (unspecified)) (set! S4bdc@load-r6rs-top-level-sexp (unspecified)) (set! S4bde@prefix-inc (unspecified)) (set! S4be0@prefix-inc! (unspecified)) (begin (set! S4bb0@ref (lambda (S4c1b@rtd S4c1c@i S4c1d@x) (let ((S4c21@val ((record-accessor S4c1b@rtd S4c1c@i) S4c1d@x))) (if (symbol? S4c21@val) (ungensym S4c21@val) S4c21@val)))) (set! S4d13@S4bb0@ref S4bb0@ref)) (begin (set! S4bb2@x* '()) (set! S4d14@S4bb2@x* S4bb2@x*)) (begin (set! S4bb4@add-library-path! (lambda (S4c23@path) (S28ab@S26e7@library-path (append (S28ab@S26e7@library-path) (list S4c23@path))))) (set! S4d15@S4bb4@add-library-path! S4bb4@add-library-path!)) (begin (set! S4bb6@parse-and-add-library-path (lambda (S4c25@paths S4c26@message) (let ((S4c2a@separator '#f)) (begin (set! S4c2a@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((S4c2b@t S4c25@paths)) (if S4c2b@t ((lambda (S4c2d@paths) (for-each (lambda (S4c2f@path) (if (file-exists? S4c2f@path) (S4bb4@add-library-path! (expand-path S4c2f@path)) (format (current-error-port) S4c26@message S4c2f@path))) (string-split S4c2d@paths S4c2a@separator))) S4c2b@t) (void))))))) (set! S4d16@S4bb6@parse-and-add-library-path S4bb6@parse-and-add-library-path)) (begin (set! S4bb8@for-each-with-index (lambda (S4c31@proc S4c32@lst) (letrec ((S4c35@loop (lambda (S4c37@i S4c38@lst) (if (null? S4c38@lst) (if '#f '#f (void)) (begin (S4c31@proc S4c37@i (car S4c38@lst)) (S4c35@loop (+ S4c37@i '1) (cdr S4c38@lst))))))) (S4c35@loop '1 S4c32@lst)))) (set! S4d17@S4bb8@for-each-with-index S4bb8@for-each-with-index)) (begin (set! S4bba@rpad (lambda (S4c3b@str S4c3c@pad S4c3d@n) (let ((S4c41@rest (- S4c3d@n (string-length (format '"~a" S4c3b@str))))) (let S4c47@loop ((S4c43@rest S4c41@rest) (S4c44@ret (format '"~a" S4c3b@str))) (if (<= S4c43@rest '0) S4c44@ret (S4c47@loop (- S4c43@rest '1) (string-append S4c44@ret S4c3c@pad))))))) (set! S4d18@S4bba@rpad S4bba@rpad)) (begin (set! S4bbc@condition-printer (lambda (S4c49@e S4c4a@port) (let ((S4c4e@max-condition-len '#f)) (begin (set! S4c4e@max-condition-len (apply max (map (lambda (S4c5f@c) (string-length (symbol->string (record-type-name (record-rtd S4c5f@c))))) (simple-conditions S4c49@e)))) (begin (display '" Condition components:\n" S4c4a@port) (S4bb8@for-each-with-index (lambda (S4c4f@i S4c50@x) (let ((S4c53@rtd (record-rtd S4c50@x)) (S4c54@fields-alist (S4bbe@record->field-alist S4c50@x))) (begin (format S4c4a@port '" ~d. ~a" S4c4f@i (S4bba@rpad (symbol->string (record-type-name S4c53@rtd)) '" " S4c4e@max-condition-len)) (if (null? S4c54@fields-alist) (newline S4c4a@port) (void)) (let S4c5b@loop ((S4c57@first '#t) (S4c58@fields-alist S4c54@fields-alist)) (if (null? S4c58@fields-alist) '() (let ((S4c5d@field (car S4c58@fields-alist))) (begin (if (not S4c57@first) (display (S4bba@rpad '"" '" " (+ '4 S4c4e@max-condition-len)) S4c4a@port) (void)) (display '"       " S4c4a@port) (display (car S4c5d@field) S4c4a@port) (display '": " S4c4a@port) (write (cdr S4c5d@field) S4c4a@port) (newline S4c4a@port) (S4c5b@loop '#f (cdr S4c58@fields-alist))))))))) (simple-conditions S4c49@e))))))) (set! S4d19@S4bbc@condition-printer S4bbc@condition-printer)) (begin (set! S4bbe@record->field-alist (lambda (S4c61@r) (let ((S4c64@ref '#f)) (begin (set! S4c64@ref (lambda (S4c6f@rtd S4c70@i S4c71@x) (let ((S4c75@val ((record-accessor S4c6f@rtd S4c70@i) S4c71@x))) (if (symbol? S4c75@val) (ungensym S4c75@val) S4c75@val)))) (let S4c69@loop ((S4c65@ret '()) (S4c66@rtd (record-rtd S4c61@r))) (if S4c66@rtd (S4c69@loop (append S4c65@ret (S4bc0@map-with-index (lambda (S4c6b@i S4c6c@field) (cons S4c6c@field (S4c64@ref S4c66@rtd S4c6b@i S4c61@r))) (vector->list (record-type-field-names S4c66@rtd)))) (record-type-parent S4c66@rtd)) S4c65@ret)))))) (set! S4d1a@S4bbe@record->field-alist S4bbe@record->field-alist)) (begin (set! S4bc0@map-with-index (lambda (S4c77@proc S4c78@lst) (let S4c81@loop ((S4c7b@i '0) (S4c7c@lst S4c78@lst) (S4c7d@ret '())) (if (null? S4c7c@lst) (reverse S4c7d@ret) (S4c81@loop (+ S4c7b@i '1) (cdr S4c7c@lst) (cons (S4c77@proc S4c7b@i (car S4c7c@lst)) S4c7d@ret)))))) (set! S4d1b@S4bc0@map-with-index S4bc0@map-with-index)) (begin (set! S4bc2@repl (lambda S4c83@x (let ((S4c86@rec '#f)) (begin (set! S4c86@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (S4c89@S4c87) (lambda () (with-exception-handler (lambda (S4c8b@e) ((call/cc (lambda (S4c8d@S4c88) (S4c89@S4c87 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? S4c8b@e) (S4bbc@condition-printer S4c8b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" S4c8b@e))) (S4c8d@S4c88 (lambda () (raise-continuable S4c8b@e)))))))))) (lambda () (let S4c93@loop ((S4c8f@line (get-line (current-input-port))) (S4c90@accum '"")) (let ((S4c96@parentheses-ok? '#f) (S4c98@eval-string-print '#f)) (begin (set! S4c96@parentheses-ok? (lambda (S4c9d@text) (let S4ca5@loop ((S4c9f@chars (string->list S4c9d@text)) (S4ca0@p0 '0) (S4ca1@p1 '0)) (if (null? S4c9f@chars) (= '0 S4ca0@p0 S4ca1@p1) (let ((S4ca7@t (car S4c9f@chars))) (if (memv S4ca7@t '(#\()) (S4ca5@loop (cdr S4c9f@chars) (+ S4ca0@p0 '1) S4ca1@p1) (if (memv S4ca7@t '(#\))) (S4ca5@loop (cdr S4c9f@chars) (- S4ca0@p0 '1) S4ca1@p1) (if (memv S4ca7@t '(#\[)) (S4ca5@loop (cdr S4c9f@chars) S4ca0@p0 (+ S4ca1@p1 '1)) (if (memv S4ca7@t '(#\])) (S4ca5@loop (cdr S4c9f@chars) S4ca0@p0 (- S4ca1@p1 '1)) (S4ca5@loop (cdr S4c9f@chars) S4ca0@p0 S4ca1@p1)))))))))) (set! S4c98@eval-string-print (lambda (S4c9b@text) (if (not (or (string=? '"\n" S4c9b@text) (= '0 (string-length S4c9b@text)))) (write (S4bd0@eval-top-level (call-with-port (open-string-input-port S4c9b@text) read))) (void)))) (if (eof-object? S4c8f@line) (begin (S4c98@eval-string-print S4c90@accum) (exit)) (let ((S4c99@current (string-append S4c90@accum S4c8f@line))) (if (S4c96@parentheses-ok? S4c99@current) (S4c98@eval-string-print S4c99@current) (S4c93@loop (get-line (current-input-port)) S4c99@current))))))))))))) (newline) (S4c86@rec)))) (S4c86@rec))))) (set! S4d1c@S4bc2@repl S4bc2@repl)) (begin (set! S4bc4@trace-printer (S25f1@S24d0@make-parameter write)) (set! S4d1d@S4bc4@trace-printer S4bc4@trace-printer)) (begin (set! S4bc6@command-line (S25f1@S24d0@make-parameter (get-command-line))) (set! S4d1e@S4bc6@command-line S4bc6@command-line)) (begin (set! S4bc8@local-library-path (lambda (S4ca9@filename) (S28ab@S26e7@library-path))) (set! S4d1f@S4bc8@local-library-path S4bc8@local-library-path)) (begin (set! S4bca@load/args (lambda (S4cab@filename . S4cad@args) (begin (apply S4bda@load-r6rs-top-level S4cab@filename 'load S4cad@args) (void)))) (set! S4d20@S4bca@load/args S4bca@load/args)) (begin (set! S4bcc@load (lambda (S4caf@filename) (begin (apply S4bda@load-r6rs-top-level S4caf@filename 'load (S4bc6@command-line)) (void)))) (set! S4d21@S4bcc@load S4bcc@load)) (begin (set! S4bce@ironscheme-build (lambda () (S4bcc@load '"ironscheme-buildscript.ss"))) (set! S4d22@S4bce@ironscheme-build S4bce@ironscheme-build)) (begin (set! S4bd0@eval-top-level (lambda (S4cb1@x) (S47d6@S2d6e@eval S4cb1@x (S47ed@S2d9c@interaction-environment)))) (set! S4d23@S4bd0@eval-top-level S4bd0@eval-top-level)) (begin (set! S4bd2@compile-system-libraries (lambda () (S4bd0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! S4d24@S4bd2@compile-system-libraries S4bd2@compile-system-libraries)) (begin (set! S4bd4@compile (lambda (S4cb3@filename) (S4bda@load-r6rs-top-level S4cb3@filename 'compile))) (set! S4d25@S4bd4@compile S4bd4@compile)) (begin (set! S4bd6@compile->closure (lambda (S4cb5@filename) (S4bda@load-r6rs-top-level S4cb5@filename 'closure))) (set! S4d26@S4bd6@compile->closure S4bd6@compile->closure)) (begin (set! S4bd8@pre-compile-r6rs-file (lambda (S4cb7@filename) (S4bda@load-r6rs-top-level S4cb7@filename 'compile))) (set! S4d27@S4bd8@pre-compile-r6rs-file S4bd8@pre-compile-r6rs-file)) (begin (set! S4bda@load-r6rs-top-level (lambda (S4cb9@filename S4cba@how . S4cbd@args) (begin (S28ab@S26e7@library-path (S4bc8@local-library-path S4cb9@filename)) (let ((S4cbf@x* (with-input-from-file S4cb9@filename (lambda () (let S4cc1@f1 () (let ((S4cc3@x (S25e4@S24b6@read-annotated))) (if (eof-object? S4cc3@x) '() (cons S4cc3@x (S4cc1@f1))))))))) (let ((S4cc5@t S4cba@how)) (if (memv S4cc5@t '(closure)) (S47ec@S2d9a@pre-compile-r6rs-top-level S4cbf@x*) (if (memv S4cc5@t '(load)) (begin (S4bc6@command-line (cons S4cb9@filename (car S4cbd@args))) (S25f2@S24d2@mosh-cache-dir (create-mosh-cache-dir)) (if (S25f2@S24d2@mosh-cache-dir) (gensym-prefix-set! (S4be0@prefix-inc! (string-append (S25f2@S24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (S4cc7@file) ((call/cc (lambda (S4ccb@S4cc9) (lambda () (with-exception-handler (lambda (S4ccd@c) ((call/cc (lambda (S4ccf@S4cca) (S4ccb@S4cc9 (lambda () (if '#t '#t (S4ccf@S4cca (lambda () (raise-continuable S4ccd@c)))))))))) (lambda () (delete-file (string-append (S25f2@S24d2@mosh-cache-dir) '"/" S4cc7@file))))))))) (directory-list (S25f2@S24d2@mosh-cache-dir))) (void)) (let ((S4cd1@compiled (S47eb@S2d98@compile-r6rs-top-level S4cbf@x*))) (begin (if (and (S25f2@S24d2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (S28af@S26ef@serialize-all S25ec@S24c6@serialize-library S2648@S2601@compile-core-expr) (void)) (S4cd1@compiled)))) (if (memv S4cc5@t '(compile)) (begin (S47eb@S2d98@compile-r6rs-top-level S4cbf@x*) (S28af@S26ef@serialize-all S25ec@S24c6@serialize-library S2648@S2601@compile-core-expr)) (if '#f '#f (void)))))))))) (set! S4d28@S4bda@load-r6rs-top-level S4bda@load-r6rs-top-level)) (begin (set! S4bdc@load-r6rs-top-level-sexp (lambda (S4cd3@import-spec S4cd4@thunk) (let ((S4cdf@S4cd8 S28ab@S26e7@library-path) (S4ce0@S4cda S25f2@S24d2@mosh-cache-dir) (S4ce1@S4cdc (S4bc8@local-library-path '"")) (S4ce2@S4cde (create-mosh-cache-dir))) (let ((S4ce7@swap (lambda () (begin (let ((S4ce9@t (S4cdf@S4cd8))) (begin (S4cdf@S4cd8 S4ce1@S4cdc) (set! S4ce1@S4cdc S4ce9@t))) (let ((S4ceb@t (S4ce0@S4cda))) (begin (S4ce0@S4cda S4ce2@S4cde) (set! S4ce2@S4cde S4ceb@t))))))) (dynamic-wind S4ce7@swap (lambda () (begin (if (S25f2@S24d2@mosh-cache-dir) (gensym-prefix-set! (S4be0@prefix-inc! (string-append (S25f2@S24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((S4cf1@S4cee S4bc6@command-line) (S4cf2@S4cf0 '())) (let ((S4cf5@swap (lambda () (let ((S4cf7@t (S4cf1@S4cee))) (begin (S4cf1@S4cee S4cf2@S4cf0) (set! S4cf2@S4cf0 S4cf7@t)))))) (dynamic-wind S4cf5@swap (lambda () ((S47eb@S2d98@compile-r6rs-top-level (list (cons 'import S4cd3@import-spec) (list S4cd4@thunk))))) S4cf5@swap))))) S4ce7@swap))))) (set! S4d29@S4bdc@load-r6rs-top-level-sexp S4bdc@load-r6rs-top-level-sexp)) (begin (set! S4bde@prefix-inc (lambda (S4cf9@prefix-string) (let ((S4cfb@prefix (symbol->string S4cf9@prefix-string))) (let ((S4cfd@len (string-length S4cfb@prefix))) (let S4d05@loop ((S4cff@i (- S4cfd@len '1)) (S4d00@carry? '#t) (S4d01@accum '())) (if (< S4cff@i '0) (string->symbol (list->string (if S4d00@carry? (cons '#\a S4d01@accum) S4d01@accum))) (if S4d00@carry? (let ((S4d07@next-integer (+ '1 (char->integer (string-ref S4cfb@prefix S4cff@i))))) (if (= S4d07@next-integer '123) (S4d05@loop (- S4cff@i '1) '#f (cons '#\A S4d01@accum)) (if (= S4d07@next-integer '91) (S4d05@loop (- S4cff@i '1) '#t (cons '#\a S4d01@accum)) (S4d05@loop (- S4cff@i '1) '#f (cons (integer->char S4d07@next-integer) S4d01@accum))))) (S4d05@loop (- S4cff@i '1) '#f (cons (string-ref S4cfb@prefix S4cff@i) S4d01@accum))))))))) (set! S4d2a@S4bde@prefix-inc S4bde@prefix-inc)) (begin (set! S4be0@prefix-inc! (lambda (S4d09@file) (begin (if (not (file-exists? S4d09@file)) (call-with-output-file S4d09@file (lambda (S4d0b@port) (write 'd S4d0b@port))) (void)) (let ((S4d0d@prefix (call-with-input-file S4d09@file read))) (let ((S4d0f@next-prefix (S4bde@prefix-inc S4d0d@prefix))) (begin (call-with-port (open-file-output-port S4d09@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (S4d11@port) (write S4d0f@next-prefix S4d11@port))) S4d0d@prefix)))))) (set! S4d2b@S4be0@prefix-inc! S4be0@prefix-inc!)) (begin (S28b0@S26f1@current-precompiled-library-loader S25ed@S24c8@load-serialized-library) (set-symbol-value! 'load S4bcc@load) (set-symbol-value! 'pre-compile-r6rs-file S4bd8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs S4bd0@eval-top-level) (set-symbol-value! 'int-env-syms S47cd@S2d5c@interaction-environment-symbols) (set-symbol-value! 'expanded2core S2647@S25ff@expanded->core) (set-symbol-value! 'trace-printer S4bc4@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (S4be1@c) (condition (S4b0d@S4917@make-non-continuable-violation) (S4b03@S48fe@make-who-condition 'raise) (S4ac7@S485f@make-message-condition '"returned from non-continuable exception") (S4af9@S48e3@make-irritants-condition (list S4be1@c))))) (S4bb6@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (S4bb6@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (S4bb4@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (S4bb4@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (S4bb4@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((S4be3@prefix (lambda (S4be5@ext S4be6@ls) (append (map (lambda (S4be9@x) (string-append S4be5@ext S4be9@x)) S4be6@ls) S4be6@ls)))) (S28ac@S26e9@library-extensions (S4be3@prefix '".mosh" (S28ac@S26e9@library-extensions)))) (current-exception-handler (lambda (S4beb@c) (if (condition? S4beb@c) (S4bbc@condition-printer S4beb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" S4beb@c)))) (if ((call/cc (lambda (S4bef@S4bed) (lambda () (with-exception-handler (lambda (S4bf1@c) ((call/cc (lambda (S4bf3@S4bee) (S4bef@S4bed (lambda () (if '#t '#f (S4bf3@S4bee (lambda () (raise-continuable S4bf1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (S4bdc@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (S4bc6@command-line)) (let ((S4bfd@S4bf6 S4bc6@command-line) (S4bfe@S4bf8 S25f2@S24d2@mosh-cache-dir) (S4bff@S4bfa '()) (S4c00@S4bfc (create-mosh-cache-dir))) (let ((S4c05@swap (lambda () (begin (let ((S4c07@t (S4bfd@S4bf6))) (begin (S4bfd@S4bf6 S4bff@S4bfa) (set! S4bff@S4bfa S4c07@t))) (let ((S4c09@t (S4bfe@S4bf8))) (begin (S4bfe@S4bf8 S4c00@S4bfc) (set! S4c00@S4bfc S4c09@t))))))) (dynamic-wind S4c05@swap (lambda () (begin (if (S25f2@S24d2@mosh-cache-dir) (gensym-prefix-set! (S4be0@prefix-inc! (string-append (S25f2@S24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (S4bc2@repl))) S4c05@swap))) (begin (S28ab@S26e7@library-path (S4bc8@local-library-path (car (S4bc6@command-line)))) (set! S4bb2@x* (with-input-from-file (car (S4bc6@command-line)) (lambda () (let S4c0b@f2 () (let ((S4c0d@x (S25e4@S24b6@read-annotated))) (if (eof-object? S4c0d@x) '() (cons S4c0d@x (S4c0b@f2)))))))) (S4bc6@command-line (cons (car (S4bc6@command-line)) (cdr (S4bc6@command-line)))) (S25f2@S24d2@mosh-cache-dir (create-mosh-cache-dir)) (if (S25f2@S24d2@mosh-cache-dir) (gensym-prefix-set! (S4be0@prefix-inc! (string-append (S25f2@S24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (S4c0f@file) ((call/cc (lambda (S4c13@S4c11) (lambda () (with-exception-handler (lambda (S4c15@c) ((call/cc (lambda (S4c17@S4c12) (S4c13@S4c11 (lambda () (if '#t '#t (S4c17@S4c12 (lambda () (raise-continuable S4c15@c)))))))))) (lambda () (delete-file (string-append (S25f2@S24d2@mosh-cache-dir) '"/" S4c0f@file))))))))) (directory-list (S25f2@S24d2@mosh-cache-dir))) (void)) (let ((S4c19@compiled (S47eb@S2d98@compile-r6rs-top-level S4bb2@x*))) (begin (if (and (S25f2@S24d2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (S28af@S26ef@serialize-all S25ec@S24c6@serialize-library S2648@S2601@compile-core-expr) (void)) (S4c19@compiled))))))))
