;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (e27a5@read-annotated e27a7@annotation-stripped e27a9@annotation? e27ab@annotation-source e27ad@annotation-expression e27af@scm->fasl e27b1@fasl-save e27b3@fasl-load e27b5@serialize-library e27b7@load-serialized-library e27b9@make-record-printer e27bb@compile-core e27bd@read-library-source-file e27bf@make-parameter e2827@file-options-spec) (begin (set! e27a5@read-annotated read) (set! e27a7@annotation-stripped (lambda (e2828@x) (e27ad@annotation-expression e2828@x))) (set! e27a9@annotation? (lambda (e282a@x) (source-info e282a@x))) (set! e27ab@annotation-source (lambda (e282c@x) (source-info e282c@x))) (set! e27ad@annotation-expression (lambda (e282e@x) (if (pair? e282e@x) (cons (car e282e@x) (cdr e282e@x)) (display '"line:46\n")))) (set! e27af@scm->fasl (lambda (e2830@filename) (string-append e2830@filename '".mosh-fasl"))) (set! e27b1@fasl-save (lambda (e2832@filename e2833@obj) (call-with-port (open-file-output-port e2832@filename) (lambda (e2836@port) ((symbol-value 'fasl-write!) e2833@obj e2836@port))))) (set! e27b3@fasl-load (lambda (e2838@filename) (call-with-port (open-file-input-port e2838@filename) (symbol-value 'fasl-read!)))) (set! e27b5@serialize-library (lambda (e283a@filename e283b@obj) (begin (format '#t '"serialize-library ~a\n..." e283a@filename) ((lambda (e283e@expanded2core) ((lambda (e2840@compile) ((lambda (e2842@code) ((lambda (e2844@pivot) ((lambda (e2846@visit) ((lambda () (begin (set-car! e2844@pivot e2846@visit) ((lambda (e2848@pivot) ((lambda (e284a@invoke) ((lambda () (set-car! e2848@pivot e284a@invoke)))) (e2840@compile (e283e@expanded2core (car e2848@pivot))))) (cdr e2844@pivot)))))) (e2840@compile (e283e@expanded2core (car e2844@pivot))))) (cddddr (cddddr e2842@code)))) e283b@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (e284c@fasl-file) (begin (if (file-exists? e284c@fasl-file) (delete-file e284c@fasl-file) (void)) ((call/cc (lambda (e2850@e284e) (lambda () (with-exception-handler (lambda (e2852@c) ((call/cc (lambda (e2854@e284f) (e2850@e284e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " e283a@filename) (if (file-exists? e284c@fasl-file) (delete-file e284c@fasl-file) (void)) '#f) (e2854@e284f (lambda () (raise-continuable e2852@c)))))))))) (lambda () (begin (e27b1@fasl-save e284c@fasl-file e283b@obj) (display '"OK\n")))))))))) (e27af@scm->fasl e283a@filename))))) (set! e27b7@load-serialized-library (lambda (e2856@filename e2857@obj) ((lambda (e285a@fasl-file) (if (and (file-exists? e285a@fasl-file) ((symbol-value 'file-newer?) e285a@fasl-file e2856@filename)) ((lambda (e285c@expanded2core) ((lambda (e285e@eval-compiled-core) ((lambda (e2860@code) ((lambda (e2862@pivot) ((lambda (e2864@visit) ((lambda (e2866@visit-proc) ((lambda () (begin (set-car! e2862@pivot e2866@visit-proc) ((lambda (e2868@pivot) ((lambda (e286a@invoke) ((lambda () (begin (set-car! e2868@pivot (lambda () (e285e@eval-compiled-core e286a@invoke))) (apply e2857@obj e2860@code))))) (car e2868@pivot))) (cdr e2862@pivot)) '#t)))) (lambda () (e285e@eval-compiled-core e2864@visit)))) (car e2862@pivot))) (cddddr (cddddr e2860@code)))) (e27b3@fasl-load e285a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (e27af@scm->fasl e2856@filename)))) (set! e27b9@make-record-printer (lambda (e286c@name e286d@printer) (lambda e2870@x (begin (display '"record printer") (for-each display e2870@x))))) (set! e27bb@compile-core (lambda e2872@x (apply error 'comile-core '"not implementated" e2872@x))) (set! e27bd@read-library-source-file (lambda (e2874@file-name) (with-input-from-file e2874@file-name e27a5@read-annotated))) (set! e27bf@make-parameter (lambda e2884 ((lambda (e2885) (if (= e2885 '1) (apply (lambda (e2876@x) (e27bf@make-parameter e2876@x (lambda (e2878@x) e2878@x))) e2884) (if (= e2885 '2) (apply (lambda (e287a@x e287b@fender) ((lambda (e287e@x) (lambda e2882 ((lambda (e2883) (if (= e2883 '0) (apply (lambda () e287e@x) e2882) (if (= e2883 '1) (apply (lambda (e2880@v) (set! e287e@x (e287b@fender e2880@v))) e2882) (error 'apply '"invalid arg count")))) (length e2882)))) (e287b@fender e287a@x))) e2884) (error 'apply '"invalid arg count")))) (length e2884)))) (set! e2827@file-options-spec (lambda (e2886@x) e2886@x)) (begin (set! e2896@e2827@file-options-spec e2827@file-options-spec) (set! e2895@e27bf@make-parameter e27bf@make-parameter) (set! e2894@e27bd@read-library-source-file e27bd@read-library-source-file) (set! e2893@e27bb@compile-core e27bb@compile-core) (set! e2892@e27b9@make-record-printer e27b9@make-record-printer) (set! e2891@e27b7@load-serialized-library e27b7@load-serialized-library) (set! e2890@e27b5@serialize-library e27b5@serialize-library) (set! e288f@e27b3@fasl-load e27b3@fasl-load) (set! e288e@e27b1@fasl-save e27b1@fasl-save) (set! e288d@e27af@scm->fasl e27af@scm->fasl) (set! e288c@e27ad@annotation-expression e27ad@annotation-expression) (set! e288b@e27ab@annotation-source e27ab@annotation-source) (set! e288a@e27a9@annotation? e27a9@annotation?) (set! e2889@e27a7@annotation-stripped e27a7@annotation-stripped) (set! e2888@e27a5@read-annotated e27a5@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e289b@current-primitive-locations e289d@mutable? e289f@rewriter e28a1@expanded->core e28a3@compile-core-expr e28a5@pretty-print e28a7@compile-core-expr-to-port) (begin (set! e289b@current-primitive-locations (e2895@e27bf@make-parameter (lambda (e28a8@x) '#f) (lambda (e28aa@p) e28aa@p))) (set! e289d@mutable? (lambda (e28ac@x) (or (pair? e28ac@x) (vector? e28ac@x) (hashtable? e28ac@x)))) (set! e289f@rewriter (lambda (e28ae@quote-hack?) ((lambda (e28b1@f) (begin (set! e28b1@f (lambda (e28b2@x) (if (pair? e28b2@x) ((lambda (e28b4@t) (if (memv e28b4@t '(quote)) (if (and e28ae@quote-hack? (e289d@mutable? (cadr e28b2@x))) ((lambda (e28b6@g) (begin (set-symbol-value! e28b6@g (cadr e28b2@x)) e28b6@g)) (gensym)) e28b2@x) (if (memv e28b4@t '(case-lambda)) (cons 'case-lambda (map (lambda (e28b8@x) (cons (car e28b8@x) (map e28b1@f (cdr e28b8@x)))) (cdr e28b2@x))) (if (memv e28b4@t '(lambda)) (cons* 'lambda (cadr e28b2@x) (map e28b1@f (cddr e28b2@x))) (if (memv e28b4@t '(letrec)) ((lambda (e28ba@bindings e28bb@body*) ((lambda (e28be@lhs* e28bf@rhs*) (cons* 'letrec (map list e28be@lhs* (map e28b1@f e28bf@rhs*)) (map e28b1@f e28bb@body*))) (map car e28ba@bindings) (map cadr e28ba@bindings))) (cadr e28b2@x) (cddr e28b2@x)) (if (memv e28b4@t '(letrec*)) ((lambda (e28c2@bindings e28c3@body*) ((lambda (e28c6@lhs* e28c7@rhs*) (cons* 'letrec* (map list e28c6@lhs* (map e28b1@f e28c7@rhs*)) (map e28b1@f e28c3@body*))) (map car e28c2@bindings) (map cadr e28c2@bindings))) (cadr e28b2@x) (cddr e28b2@x)) (if (memv e28b4@t '(library-letrec*)) ((lambda (e28ca@name e28cb@x) ((lambda (e28ce@bindings e28cf@body*) ((lambda (e28d2@lhs* e28d3@lhs** e28d4@rhs*) (cons* 'library-letrec* e28ca@name (map list e28d2@lhs* e28d3@lhs** (map e28b1@f e28d4@rhs*)) (map e28b1@f e28cf@body*))) (map car e28ce@bindings) (map cadr e28ce@bindings) (map caddr e28ce@bindings))) (cadr e28cb@x) (cddr e28cb@x))) (cadr e28b2@x) (cdr e28b2@x)) (if (memv e28b4@t '(begin)) (cons 'begin (map e28b1@f (cdr e28b2@x))) (if (memv e28b4@t '(set!)) (list 'set! (cadr e28b2@x) (e28b1@f (caddr e28b2@x))) (if (memv e28b4@t '(primitive)) ((lambda (e28d8@op) ((lambda (e28da@t) (if e28da@t ((lambda (e28dc@loc) e28dc@loc) e28da@t) e28d8@op)) ((e289b@current-primitive-locations) e28d8@op))) (cadr e28b2@x)) (if (memv e28b4@t '(define)) e28b2@x (if (list? e28b2@x) (map e28b1@f e28b2@x) (error 'rewrite '"invalid form ~s ~s" e28b2@x (list? e28b2@x)))))))))))))) (car e28b2@x)) e28b2@x))) e28b1@f)) '#f))) (set! e28a1@expanded->core (lambda (e28de@x) ((e289f@rewriter '#f) e28de@x))) (set! e28a3@compile-core-expr (lambda (e28e0@x) ((e289f@rewriter '#f) e28e0@x))) (set! e28a5@pretty-print write) (set! e28a7@compile-core-expr-to-port (lambda (e28e2@x e28e3@p) (e28a5@pretty-print ((e289f@rewriter '#f) e28e2@x) e28e3@p))) (begin (set! e28ec@e28a7@compile-core-expr-to-port e28a7@compile-core-expr-to-port) (set! e28eb@e28a5@pretty-print e28a5@pretty-print) (set! e28ea@e28a3@compile-core-expr e28a3@compile-core-expr) (set! e28e9@e28a1@expanded->core e28a1@expanded->core) (set! e28e8@e289f@rewriter e289f@rewriter) (set! e28e7@e289d@mutable? e289d@mutable?) (set! e28e6@e289b@current-primitive-locations e289b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (e293b@make-collection e293d@current-library-collection e2943@e293e e2945@e2940 e2947@e293f e294a@library? e294c@make-library e294e@library-id e2950@library-name e2952@library-version e2954@library-imp* e2956@library-vis* e2958@library-inv* e295a@library-subst e295c@library-env e295e@library-visit-state e2960@library-invoke-state e2962@library-visit-code e2964@library-invoke-code e2966@library-visible? e2968@library-source-file-name e296a@set-library-id! e296c@set-library-name! e296e@set-library-version! e2970@set-library-imp*! e2972@set-library-vis*! e2974@set-library-inv*! e2976@set-library-subst! e2978@set-library-env! e297a@set-library-visit-state! e297c@set-library-invoke-state! e297e@set-library-visit-code! e2980@set-library-invoke-code! e2982@set-library-visible?! e2984@set-library-source-file-name! e2986@rp e2988@find-dependencies e298a@find-library-by e298c@library-path e298e@library-extensions e2990@library-name->file-name e2992@file-locator e2994@serialize-all e2996@current-precompiled-library-loader e2998@try-load-from-file e299a@library-loader e299c@current-library-expander e299e@external-pending-libraries e29a0@find-external-library e29a2@find-library-by-name e29a4@library-exists? e29a6@find-library-by-spec/die e29a8@label->binding-table e29aa@install-library-record e29ac@install-library e29ae@imported-label->binding e29b0@invoke-library e29b2@visit-library e29b4@invoke-library-by-spec e29b6@installed-libraries e29b8@library-spec) (begin (set! e293b@make-collection (lambda () ((lambda (e29b9@set) ((lambda (e29bc@set-cons) (begin (set! e29bc@set-cons (lambda (e29c1@x e29c2@ls) (if (memq e29c1@x e29c2@ls) e29c2@ls (cons e29c1@x e29c2@ls)))) (lambda e29bf ((lambda (e29c0) (if (= e29c0 '0) (apply (lambda () e29b9@set) e29bf) (if (= e29c0 '1) (apply (lambda (e29bd@x) (set! e29b9@set (e29bc@set-cons e29bd@x e29b9@set))) e29bf) (error 'apply '"invalid arg count")))) (length e29bf))))) '#f)) '()))) (set! e293d@current-library-collection (e2895@e27bf@make-parameter (e293b@make-collection) (lambda (e29c5@x) (begin (if (not (procedure? e29c5@x)) (assertion-violation 'current-library-collection '"not a procedure" e29c5@x) (void)) e29c5@x)))) (set! e2943@e293e (make-record-type-descriptor 'library '#f 'e2941 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! e2945@e2940 '#f) (set! e2947@e293f (make-record-constructor-descriptor e2943@e293e '#f e2945@e2940)) (set! e294a@library? (record-predicate e2943@e293e)) (set! e294c@make-library (record-constructor e2947@e293f)) (set! e294e@library-id (record-accessor e2943@e293e '0)) (set! e2950@library-name (record-accessor e2943@e293e '1)) (set! e2952@library-version (record-accessor e2943@e293e '2)) (set! e2954@library-imp* (record-accessor e2943@e293e '3)) (set! e2956@library-vis* (record-accessor e2943@e293e '4)) (set! e2958@library-inv* (record-accessor e2943@e293e '5)) (set! e295a@library-subst (record-accessor e2943@e293e '6)) (set! e295c@library-env (record-accessor e2943@e293e '7)) (set! e295e@library-visit-state (record-accessor e2943@e293e '8)) (set! e2960@library-invoke-state (record-accessor e2943@e293e '9)) (set! e2962@library-visit-code (record-accessor e2943@e293e '10)) (set! e2964@library-invoke-code (record-accessor e2943@e293e '11)) (set! e2966@library-visible? (record-accessor e2943@e293e '12)) (set! e2968@library-source-file-name (record-accessor e2943@e293e '13)) (set! e296a@set-library-id! (record-mutator e2943@e293e '0)) (set! e296c@set-library-name! (record-mutator e2943@e293e '1)) (set! e296e@set-library-version! (record-mutator e2943@e293e '2)) (set! e2970@set-library-imp*! (record-mutator e2943@e293e '3)) (set! e2972@set-library-vis*! (record-mutator e2943@e293e '4)) (set! e2974@set-library-inv*! (record-mutator e2943@e293e '5)) (set! e2976@set-library-subst! (record-mutator e2943@e293e '6)) (set! e2978@set-library-env! (record-mutator e2943@e293e '7)) (set! e297a@set-library-visit-state! (record-mutator e2943@e293e '8)) (set! e297c@set-library-invoke-state! (record-mutator e2943@e293e '9)) (set! e297e@set-library-visit-code! (record-mutator e2943@e293e '10)) (set! e2980@set-library-invoke-code! (record-mutator e2943@e293e '11)) (set! e2982@set-library-visible?! (record-mutator e2943@e293e '12)) (set! e2984@set-library-source-file-name! (record-mutator e2943@e293e '13)) (set! e2986@rp (e2892@e27b9@make-record-printer 'library (lambda (e29c7@x e29c8@p e29c9@wr) (begin (if (not (e294a@library? e29c7@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (e2952@library-version e29c7@x)) (e2950@library-name e29c7@x) (append (e2950@library-name e29c7@x) (list (e2952@library-version e29c7@x))))) e29c8@p))))) (set! e2988@find-dependencies (lambda (e29cd@ls) (if (null? e29cd@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! e298a@find-library-by (lambda (e29cf@pred) ((letrec ((e29d1@f (lambda (e29d3@ls) (if (null? e29d3@ls) '#f (if (e29cf@pred (car e29d3@ls)) (car e29d3@ls) (e29d1@f (cdr e29d3@ls))))))) e29d1@f) ((e293d@current-library-collection))))) (set! e298c@library-path (e2895@e27bf@make-parameter '(".") (lambda (e29d5@x) (if (and (list? e29d5@x) (for-all string? e29d5@x)) (map (lambda (e29d7@x) e29d7@x) e29d5@x) (assertion-violation 'library-path '"not a list of strings" e29d5@x))))) (set! e298e@library-extensions (e2895@e27bf@make-parameter '(".sls" ".ss" ".scm") (lambda (e29d9@x) (if (and (list? e29d9@x) (for-all string? e29d9@x)) (map (lambda (e29db@x) e29db@x) e29d9@x) (assertion-violation 'library-extensions '"not a list of strings" e29d9@x))))) (set! e2990@library-name->file-name (lambda (e29dd@x) (call-with-values (lambda () (open-string-output-port)) (lambda (e29e3@e29e0 e29e4@e29e2) ((lambda (e29e7@extract e29e8@p) ((lambda (e29ec@display-hex) (begin (set! e29ec@display-hex (lambda (e29f5@n) (if (<= '0 e29f5@n '9) (display e29f5@n e29e8@p) (display (integer->char (+ (char->integer '#\a) (- e29f5@n '10))) e29e8@p)))) (begin ((letrec ((e29ed@f (lambda (e29ef@ls) (if (not (null? e29ef@ls)) (begin (display '"/" e29e8@p) (for-each (lambda (e29f1@c) (if (or (char<=? '#\a e29f1@c '#\z) (char<=? '#\A e29f1@c '#\Z) (char<=? '#\0 e29f1@c '#\9) (memv e29f1@c '(#\- #\. #\_ #\~))) (display e29f1@c e29e8@p) (begin (display '"%" e29e8@p) ((lambda (e29f3@n) (begin (e29ec@display-hex (quotient e29f3@n '16)) (e29ec@display-hex (remainder e29f3@n '16)))) (char->integer e29f1@c))))) (string->list (symbol->string (car e29ef@ls)))) (e29ed@f (cdr e29ef@ls))) (void))))) e29ed@f) e29dd@x) (e29e7@extract)))) '#f)) e29e4@e29e2 e29e3@e29e0))))) (set! e2992@file-locator (e2895@e27bf@make-parameter (lambda (e29f7@x) ((lambda (e29f9@str) ((letrec ((e29fb@f (lambda (e29fd@ls e29fe@exts e29ff@failed-list) (if (null? e29fd@ls) ((lambda () ((lambda (e2a0b@e2a06 e2a0d@e2a08 e2a0f@e2a07 e2a12@e2a05 e2a14@make-library-resolution-condition e2a16@e2a03 e2a18@e2a04 e2a1a@library-resolution-condition? e2a1c@condition-library e2a1e@condition-files) (begin (set! e2a0b@e2a06 (make-record-type-descriptor '&library-resolution e4ca6@e49ed@&condition-rtd 'e2a09 '#f '#f '#((immutable library) (immutable files)))) (set! e2a0d@e2a08 '#f) (set! e2a0f@e2a07 (make-record-constructor-descriptor e2a0b@e2a06 e4ca7@e49ef@&condition-rcd e2a0d@e2a08)) (set! e2a12@e2a05 (record-predicate e2a0b@e2a06)) (set! e2a14@make-library-resolution-condition (record-constructor e2a0f@e2a07)) (set! e2a16@e2a03 (record-accessor e2a0b@e2a06 '0)) (set! e2a18@e2a04 (record-accessor e2a0b@e2a06 '1)) (set! e2a1a@library-resolution-condition? (condition-predicate e2a0b@e2a06)) (set! e2a1c@condition-library (condition-accessor e2a0b@e2a06 e2a16@e2a03)) (set! e2a1e@condition-files (condition-accessor e2a0b@e2a06 e2a18@e2a04)) (raise (condition (e4cc6@e4a87@make-error) (e4ce8@e4ae3@make-who-condition 'expander) (e4cac@e4a44@make-message-condition '"cannot locate library in library-path") (e2a14@make-library-resolution-condition e29f7@x (reverse e29ff@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? e29fe@exts) (e29fb@f (cdr e29fd@ls) (e298e@library-extensions) e29ff@failed-list) ((lambda (e2a1f@name) (if (file-exists? e2a1f@name) e2a1f@name (e29fb@f e29fd@ls (cdr e29fe@exts) (cons e2a1f@name e29ff@failed-list)))) (string-append (car e29fd@ls) e29f9@str (car e29fe@exts)))))))) e29fb@f) (e298c@library-path) (e298e@library-extensions) '())) (e2990@library-name->file-name e29f7@x))) (lambda (e2a21@f) (if (procedure? e2a21@f) e2a21@f (assertion-violation 'file-locator '"not a procedure" e2a21@f))))) (set! e2994@serialize-all (lambda (e2a23@serialize e2a24@compile) ((lambda (e2a28@library-desc) (begin (set! e2a28@library-desc (lambda (e2a2b@x) (list (e294e@library-id e2a2b@x) (e2950@library-name e2a2b@x)))) (for-each (lambda (e2a29@x) (if (e2968@library-source-file-name e2a29@x) (e2a23@serialize (e2968@library-source-file-name e2a29@x) (list (e294e@library-id e2a29@x) (e2950@library-name e2a29@x) (e2952@library-version e2a29@x) (map e2a28@library-desc (e2954@library-imp* e2a29@x)) (map e2a28@library-desc (e2956@library-vis* e2a29@x)) (map e2a28@library-desc (e2958@library-inv* e2a29@x)) (e295a@library-subst e2a29@x) (e295c@library-env e2a29@x) (e2a24@compile (e2962@library-visit-code e2a29@x)) (e2a24@compile (e2964@library-invoke-code e2a29@x)) (e2966@library-visible? e2a29@x))) (void))) ((e293d@current-library-collection))))) '#f))) (set! e2996@current-precompiled-library-loader (e2895@e27bf@make-parameter (lambda (e2a2d@filename e2a2e@sk) '#f))) (set! e2998@try-load-from-file (lambda (e2a31@filename) ((e2996@current-precompiled-library-loader) e2a31@filename (lambda e2a57 ((lambda (e2a58) (if (= e2a58 '11) (apply (lambda (e2a33@id e2a34@name e2a35@ver e2a36@imp* e2a37@vis* e2a38@inv* e2a39@exp-subst e2a3a@exp-env e2a3b@visit-proc e2a3c@invoke-proc e2a3d@visible?) ((letrec ((e2a49@f (lambda (e2a4b@deps) (if (null? e2a4b@deps) (begin (e29ac@install-library e2a33@id e2a34@name e2a35@ver e2a36@imp* e2a37@vis* e2a38@inv* e2a39@exp-subst e2a3a@exp-env e2a3b@visit-proc e2a3c@invoke-proc '#f '#f e2a3d@visible? '#f) '#t) ((lambda (e2a4d@d) ((lambda (e2a4f@label e2a50@dname) ((lambda (e2a53@l) (if (and (e294a@library? e2a53@l) (eq? e2a4f@label (e294e@library-id e2a53@l))) (e2a49@f (cdr e2a4b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" e2a34@name e2a50@dname e2a31@filename e2a53@l e2a4f@label (e294e@library-id e2a53@l)) '#f))) (e29a2@find-library-by-name e2a50@dname))) (car e2a4d@d) (cadr e2a4d@d))) (car e2a4b@deps)))))) e2a49@f) (append e2a36@imp* e2a37@vis* e2a38@inv*))) e2a57) (if (>= e2a58 '0) (apply (lambda e2a55@others '#f) e2a57) (error 'apply '"invalid arg count")))) (length e2a57)))))) (set! e299a@library-loader (e2895@e27bf@make-parameter (lambda (e2a59@x) ((lambda (e2a5b@file-name) (if (not e2a5b@file-name) (assertion-violation '#f '"cannot file library" e2a59@x) (or (e2998@try-load-from-file e2a5b@file-name) ((e299c@current-library-expander) (e2894@e27bd@read-library-source-file e2a5b@file-name) e2a5b@file-name (lambda (e2a5d@name) (if (not (fast-equal? e2a5d@name e2a59@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (e2a63@e2a60 e2a64@e2a62) ((lambda (e2a67@e e2a68@p) (begin (display '"expected to find library " e2a68@p) (write e2a59@x e2a68@p) (display '" in file " e2a68@p) (display e2a5b@file-name e2a68@p) (display '", found " e2a68@p) (write e2a5d@name e2a68@p) (display '" instead" e2a68@p) (e2a67@e))) e2a64@e2a62 e2a63@e2a60)))) (void))))))) ((e2992@file-locator) e2a59@x))) (lambda (e2a6b@f) (if (procedure? e2a6b@f) e2a6b@f (assertion-violation 'library-locator '"not a procedure" e2a6b@f))))) (set! e299c@current-library-expander (e2895@e27bf@make-parameter (lambda (e2a6d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (e2a6f@f) (if (procedure? e2a6f@f) e2a6f@f (assertion-violation 'library-expander '"not a procedure" e2a6f@f))))) (set! e299e@external-pending-libraries (e2895@e27bf@make-parameter '())) (set! e29a0@find-external-library (lambda (e2a71@name) (begin (if (member e2a71@name (e299e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" e2a71@name) (void)) ((lambda (e2a77@e2a74 e2a78@e2a76) ((lambda (e2a7b@swap) (dynamic-wind e2a7b@swap (lambda () (begin ((e299a@library-loader) e2a71@name) (or (e298a@find-library-by (lambda (e2a7d@x) (fast-equal? (e2950@library-name e2a7d@x) e2a71@name))) (assertion-violation '#f '"handling external library did not yield the correct library" e2a71@name)))) e2a7b@swap)) (lambda () ((lambda (e2a7f@t) (begin (e2a77@e2a74 e2a78@e2a76) (set! e2a78@e2a76 e2a7f@t))) (e2a77@e2a74))))) e299e@external-pending-libraries (cons e2a71@name (e299e@external-pending-libraries)))))) (set! e29a2@find-library-by-name (lambda (e2a81@name) (or (e298a@find-library-by (lambda (e2a83@x) (fast-equal? (e2950@library-name e2a83@x) e2a81@name))) (e29a0@find-external-library e2a81@name)))) (set! e29a4@library-exists? (lambda (e2a85@name) (and (e298a@find-library-by (lambda (e2a87@x) (fast-equal? (e2950@library-name e2a87@x) e2a85@name))) '#t))) (set! e29a6@find-library-by-spec/die (lambda (e2a89@spec) ((lambda (e2a8b@id) (or (e298a@find-library-by (lambda (e2a8d@x) (eq? e2a8b@id (e294e@library-id e2a8d@x)))) (assertion-violation '#f '"cannot find library with required spec" e2a89@spec))) (car e2a89@spec)))) (set! e29a8@label->binding-table (make-eq-hashtable)) (set! e29aa@install-library-record (lambda (e2a8f@lib) (begin ((lambda (e2a91@exp-env) (for-each (lambda (e2a93@x) ((lambda (e2a95@label e2a96@binding) ((lambda (e2a99@binding) (begin (if (hashtable-ref e29a8@label->binding-table e2a95@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" e2a95@label (hashtable-ref e29a8@label->binding-table e2a95@label '#f) e2a99@binding) (exit)) (void)) (hashtable-set! e29a8@label->binding-table e2a95@label e2a99@binding))) ((lambda (e2a9b@t) (if (memv e2a9b@t '(global)) (cons 'global (cons e2a8f@lib (cdr e2a96@binding))) (if (memv e2a9b@t '(global-macro)) (cons 'global-macro (cons e2a8f@lib (cdr e2a96@binding))) (if (memv e2a9b@t '(global-macro!)) (cons 'global-macro! (cons e2a8f@lib (cdr e2a96@binding))) e2a96@binding)))) (car e2a96@binding)))) (car e2a93@x) (cdr e2a93@x))) e2a91@exp-env)) (e295c@library-env e2a8f@lib)) ((e293d@current-library-collection) e2a8f@lib)))) (set! e29ac@install-library (lambda (e2a9d@id e2a9e@name e2a9f@ver e2aa0@imp* e2aa1@vis* e2aa2@inv* e2aa3@exp-subst e2aa4@exp-env e2aa5@visit-proc e2aa6@invoke-proc e2aa7@visit-code e2aa8@invoke-code e2aa9@visible? e2aaa@source-file-name) ((lambda (e2ab9@imp-lib* e2aba@vis-lib* e2abb@inv-lib*) (begin (if (not (and (symbol? e2a9d@id) (list? e2a9e@name) (list? e2a9f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" e2a9d@id e2a9e@name e2a9f@ver) (void)) (if (e29a4@library-exists? e2a9e@name) (assertion-violation 'install-library '"library is already installed" e2a9e@name) (void)) ((lambda (e2abf@lib) (e29aa@install-library-record e2abf@lib)) (e294c@make-library e2a9d@id e2a9e@name e2a9f@ver e2ab9@imp-lib* e2aba@vis-lib* e2abb@inv-lib* e2aa3@exp-subst e2aa4@exp-env e2aa5@visit-proc e2aa6@invoke-proc e2aa7@visit-code e2aa8@invoke-code e2aa9@visible? e2aaa@source-file-name)))) (map e29a6@find-library-by-spec/die e2aa0@imp*) (map e29a6@find-library-by-spec/die e2aa1@vis*) (map e29a6@find-library-by-spec/die e2aa2@inv*)))) (set! e29ae@imported-label->binding (lambda (e2ac1@lab) (hashtable-ref e29a8@label->binding-table e2ac1@lab '#f))) (set! e29b0@invoke-library (lambda (e2ac3@lib) ((lambda (e2ac5@invoke) (if (procedure? e2ac5@invoke) (begin (e297c@set-library-invoke-state! e2ac3@lib (lambda () (assertion-violation 'invoke '"circularity detected" e2ac3@lib))) (for-each e29b0@invoke-library (e2958@library-inv* e2ac3@lib)) (e297c@set-library-invoke-state! e2ac3@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" e2ac3@lib))) (e2ac5@invoke) (e297c@set-library-invoke-state! e2ac3@lib '#t)) (void))) (e2960@library-invoke-state e2ac3@lib)))) (set! e29b2@visit-library (lambda (e2ac7@lib) ((lambda (e2ac9@visit) (if (procedure? e2ac9@visit) (begin (e297a@set-library-visit-state! e2ac7@lib (lambda () (assertion-violation 'visit '"circularity detected" e2ac7@lib))) (for-each e29b0@invoke-library (e2956@library-vis* e2ac7@lib)) (e297a@set-library-visit-state! e2ac7@lib (lambda () (assertion-violation 'invoke '"first visit did not return" e2ac7@lib))) (e2ac9@visit) (e297a@set-library-visit-state! e2ac7@lib '#t)) (void))) (e295e@library-visit-state e2ac7@lib)))) (set! e29b4@invoke-library-by-spec (lambda (e2acb@spec) (e29b0@invoke-library (e29a6@find-library-by-spec/die e2acb@spec)))) (set! e29b6@installed-libraries (lambda e2ad3 ((lambda (e2ad4) (if (= e2ad4 '1) (apply (lambda (e2acd@all?) ((letrec ((e2acf@f (lambda (e2ad1@ls) (if (null? e2ad1@ls) '() (if (or e2acd@all? (e2966@library-visible? (car e2ad1@ls))) (cons (car e2ad1@ls) (e2acf@f (cdr e2ad1@ls))) (e2acf@f (cdr e2ad1@ls))))))) e2acf@f) ((e293d@current-library-collection)))) e2ad3) (if (= e2ad4 '0) (apply (lambda () (e29b6@installed-libraries '#f)) e2ad3) (error 'apply '"invalid arg count")))) (length e2ad3)))) (set! e29b8@library-spec (lambda (e2ad5@x) (begin (if (not (e294a@library? e2ad5@x)) (assertion-violation 'library-spec '"not a library" e2ad5@x) (void)) (list (e294e@library-id e2ad5@x) (e2950@library-name e2ad5@x) (e2952@library-version e2ad5@x))))) (begin (set! e2b13@e29b8@library-spec e29b8@library-spec) (set! e2b12@e29b6@installed-libraries e29b6@installed-libraries) (set! e2b11@e29b4@invoke-library-by-spec e29b4@invoke-library-by-spec) (set! e2b10@e29b2@visit-library e29b2@visit-library) (set! e2b0f@e29b0@invoke-library e29b0@invoke-library) (set! e2b0e@e29ae@imported-label->binding e29ae@imported-label->binding) (set! e2b0d@e29ac@install-library e29ac@install-library) (set! e2b0c@e29aa@install-library-record e29aa@install-library-record) (set! e2b0b@e29a8@label->binding-table e29a8@label->binding-table) (set! e2b0a@e29a6@find-library-by-spec/die e29a6@find-library-by-spec/die) (set! e2b09@e29a4@library-exists? e29a4@library-exists?) (set! e2b08@e29a2@find-library-by-name e29a2@find-library-by-name) (set! e2b07@e29a0@find-external-library e29a0@find-external-library) (set! e2b06@e299e@external-pending-libraries e299e@external-pending-libraries) (set! e2b05@e299c@current-library-expander e299c@current-library-expander) (set! e2b04@e299a@library-loader e299a@library-loader) (set! e2b03@e2998@try-load-from-file e2998@try-load-from-file) (set! e2b02@e2996@current-precompiled-library-loader e2996@current-precompiled-library-loader) (set! e2b01@e2994@serialize-all e2994@serialize-all) (set! e2b00@e2992@file-locator e2992@file-locator) (set! e2aff@e2990@library-name->file-name e2990@library-name->file-name) (set! e2afe@e298e@library-extensions e298e@library-extensions) (set! e2afd@e298c@library-path e298c@library-path) (set! e2afc@e298a@find-library-by e298a@find-library-by) (set! e2afb@e2988@find-dependencies e2988@find-dependencies) (set! e2afa@e2986@rp e2986@rp) (set! e2af9@e2984@set-library-source-file-name! e2984@set-library-source-file-name!) (set! e2af8@e2982@set-library-visible?! e2982@set-library-visible?!) (set! e2af7@e2980@set-library-invoke-code! e2980@set-library-invoke-code!) (set! e2af6@e297e@set-library-visit-code! e297e@set-library-visit-code!) (set! e2af5@e297c@set-library-invoke-state! e297c@set-library-invoke-state!) (set! e2af4@e297a@set-library-visit-state! e297a@set-library-visit-state!) (set! e2af3@e2978@set-library-env! e2978@set-library-env!) (set! e2af2@e2976@set-library-subst! e2976@set-library-subst!) (set! e2af1@e2974@set-library-inv*! e2974@set-library-inv*!) (set! e2af0@e2972@set-library-vis*! e2972@set-library-vis*!) (set! e2aef@e2970@set-library-imp*! e2970@set-library-imp*!) (set! e2aee@e296e@set-library-version! e296e@set-library-version!) (set! e2aed@e296c@set-library-name! e296c@set-library-name!) (set! e2aec@e296a@set-library-id! e296a@set-library-id!) (set! e2aeb@e2968@library-source-file-name e2968@library-source-file-name) (set! e2aea@e2966@library-visible? e2966@library-visible?) (set! e2ae9@e2964@library-invoke-code e2964@library-invoke-code) (set! e2ae8@e2962@library-visit-code e2962@library-visit-code) (set! e2ae7@e2960@library-invoke-state e2960@library-invoke-state) (set! e2ae6@e295e@library-visit-state e295e@library-visit-state) (set! e2ae5@e295c@library-env e295c@library-env) (set! e2ae4@e295a@library-subst e295a@library-subst) (set! e2ae3@e2958@library-inv* e2958@library-inv*) (set! e2ae2@e2956@library-vis* e2956@library-vis*) (set! e2ae1@e2954@library-imp* e2954@library-imp*) (set! e2ae0@e2952@library-version e2952@library-version) (set! e2adf@e2950@library-name e2950@library-name) (set! e2ade@e294e@library-id e294e@library-id) (set! e2add@e294c@make-library e294c@make-library) (set! e2adc@e294a@library? e294a@library?) (set! e2adb@e2947@e293f e2947@e293f) (set! e2ada@e2945@e2940 e2945@e2940) (set! e2ad9@e2943@e293e e2943@e293e) (set! e2ad8@e293d@current-library-collection e293d@current-library-collection) (set! e2ad7@e293b@make-collection e293b@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e2b16@build-global-define e2b87@build-lambda e2b89@build-case-lambda e2b8b@build-let e2bb9@build-sequence e2bbb@build-void e2bbd@build-letrec e2bbf@build-letrec* e2bc1@build-library-letrec* e2bc3@build-receive) (begin (set! e2b16@build-global-define (lambda (e2bc4@x) (e2bbb@build-void))) (set! e2b87@build-lambda (lambda (e2bc6@ae e2bc7@vars e2bc8@exp) (list 'lambda e2bc7@vars e2bc8@exp))) (set! e2b89@build-case-lambda (lambda (e2bcc@ae e2bcd@vars* e2bce@exp*) ((lambda (e2bd3@build-error e2bd5@build-pred e2bd7@build-apply e2bd9@expand-case-lambda) (begin (set! e2bd3@build-error (lambda (e2c0a@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! e2bd5@build-pred (lambda (e2bf2@ae e2bf3@n e2bf4@vars) (call-with-values (lambda () ((letrec ((e2bfc@f (lambda (e2bfe@vars e2bff@count) (if (pair? e2bfe@vars) (e2bfc@f (cdr e2bfe@vars) (+ e2bff@count '1)) (if (null? e2bfe@vars) (values e2bff@count '=) (values e2bff@count '>=)))))) e2bfc@f) e2bf4@vars '0)) (lambda (e2c02@e2bf9 e2c03@e2bfb) ((lambda (e2c06@pred e2c07@count) (list (list 'primitive e2c06@pred) e2bf3@n (list 'quote e2c07@count))) e2c03@e2bfb e2c02@e2bf9))))) (set! e2bd7@build-apply (lambda (e2bea@ae e2beb@g e2bec@vars e2bed@exp) (list '(primitive apply) (e2b87@build-lambda e2bea@ae e2bec@vars e2bed@exp) e2beb@g))) (set! e2bd9@expand-case-lambda (lambda (e2bda@ae e2bdb@vars e2bdc@exp*) ((lambda (e2be0@g e2be1@n) (list 'lambda e2be0@g (e2b8b@build-let e2bda@ae (list e2be1@n) (list (list '(primitive length) e2be0@g)) ((letrec ((e2be4@f (lambda (e2be6@vars* e2be7@exp*) (if (null? e2be6@vars*) (e2bd3@build-error e2bda@ae) (list 'if (e2bd5@build-pred e2bda@ae e2be1@n (car e2be6@vars*)) (e2bd7@build-apply e2bda@ae e2be0@g (car e2be6@vars*) (car e2be7@exp*)) (e2be4@f (cdr e2be6@vars*) (cdr e2be7@exp*))))))) e2be4@f) e2bcd@vars* e2bdc@exp*)))) (gensym) (gensym)))) (if (= (length e2bce@exp*) '1) (e2b87@build-lambda e2bcc@ae (car e2bcd@vars*) (car e2bce@exp*)) (e2bd9@expand-case-lambda e2bcc@ae e2bcd@vars* e2bce@exp*)))) '#f '#f '#f '#f))) (set! e2b8b@build-let (lambda (e2c0c@ae e2c0d@lhs* e2c0e@rhs* e2c0f@body) (cons (e2b87@build-lambda e2c0c@ae e2c0d@lhs* e2c0f@body) e2c0e@rhs*))) (set! e2bb9@build-sequence (lambda (e2c14@ae e2c15@exps) ((letrec ((e2c18@loop (lambda (e2c1a@exps) (if (null? (cdr e2c1a@exps)) (car e2c1a@exps) (if (equal? (car e2c1a@exps) (e2bbb@build-void)) (e2c18@loop (cdr e2c1a@exps)) (cons 'begin e2c1a@exps)))))) e2c18@loop) e2c15@exps))) (set! e2bbb@build-void (lambda () '((primitive void)))) (set! e2bbd@build-letrec (lambda (e2c1c@ae e2c1d@vars e2c1e@val-exps e2c1f@body-exp) (if (null? e2c1d@vars) e2c1f@body-exp (list 'letrec (map list e2c1d@vars e2c1e@val-exps) e2c1f@body-exp)))) (set! e2bbf@build-letrec* (lambda (e2c24@ae e2c25@vars e2c26@val-exps e2c27@body-exp) (if (null? e2c25@vars) e2c27@body-exp (e2b8b@build-let e2c24@ae e2c25@vars (map (lambda (e2c2c@x) (list 'quote '#f)) e2c25@vars) (e2bb9@build-sequence e2c24@ae (append (map (lambda (e2c2e@lhs e2c2f@rhs) (list 'set! e2c2e@lhs e2c2f@rhs)) e2c25@vars e2c26@val-exps) (list e2c27@body-exp))))))) (set! e2bc1@build-library-letrec* (lambda (e2c32@ae e2c33@name e2c34@vars e2c35@locs e2c36@val-exps e2c37@body-exp) (list 'library-letrec* e2c33@name (map list e2c34@vars e2c35@locs e2c36@val-exps) e2c37@body-exp))) (set! e2bc3@build-receive (lambda (e2c3e@ae e2c3f@vars e2c40@producer e2c41@body*) (begin (display '"************** in ") (cons 'receive (cons e2c3f@vars (cons e2c40@producer e2c41@body*)))))) (begin (set! e2c4f@e2bc3@build-receive e2bc3@build-receive) (set! e2c4e@e2bc1@build-library-letrec* e2bc1@build-library-letrec*) (set! e2c4d@e2bbf@build-letrec* e2bbf@build-letrec*) (set! e2c4c@e2bbd@build-letrec e2bbd@build-letrec) (set! e2c4b@e2bbb@build-void e2bbb@build-void) (set! e2c4a@e2bb9@build-sequence e2bb9@build-sequence) (set! e2c49@e2b8b@build-let e2b8b@build-let) (set! e2c48@e2b89@build-case-lambda e2b89@build-case-lambda) (set! e2c47@e2b87@build-lambda e2b87@build-lambda) (set! e2c46@e2b16@build-global-define e2b16@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e2c5e@file-options-macro e2c60@set-cons e2c62@set-union e2c67@top-mark* e2c69@top-marked? e2c6b@gen-lexical e2c6d@gen-global e2c6f@gen-label e2c71@gen-top-level-label e2c73@gen-define-label+loc e2c75@gen-define-label e2c7b@e2c76 e2c7d@e2c78 e2c7f@e2c77 e2c82@rib? e2c84@make-rib e2c86@rib-sym* e2c88@rib-mark** e2c8a@rib-label* e2c8c@rib-sealed/freq e2c8e@rib-cache e2c90@set-rib-sym*! e2c92@set-rib-mark**! e2c94@set-rib-label*! e2c96@set-rib-sealed/freq! e2c98@set-rib-cache! e2c9a@make-empty-rib e2c9c@extend-rib! e2c9e@extend-rib/nc! e2ca0@make-rib-map e2ca2@seal-rib! e2ca4@unseal-rib! e2ca6@make-full-rib e2cac@e2ca7 e2cae@e2ca9 e2cb0@e2ca8 e2cb3@stx? e2cb5@make-stx e2cb7@stx-expr e2cb9@stx-mark* e2cbb@stx-subst* e2cbd@stx-ae* e2cbf@set-stx-expr! e2cc1@set-stx-mark*! e2cc3@set-stx-subst*! e2cc5@set-stx-ae*! e2cc7@rp e2cc9@datum->stx e2ccb@gen-mark e2ccd@anti-mark e2ccf@anti-mark? e2cd1@join-wraps e2cd3@mkstx e2cd5@add-mark e2cd7@add-subst e2cd9@syntax-kind? e2cdb@syntax-vector->list e2cdd@syntax-pair? e2cdf@syntax-vector? e2ce1@syntax-null? e2ce3@syntax-list? e2ce5@syntax-car e2ce7@syntax-cdr e2ce9@syntax->list e2ceb@id? e2ced@id->sym e2cef@same-marks? e2cf1@bound-id=? e2cf3@free-id=? e2cf5@valid-bound-ids? e2cf7@distinct-bound-ids? e2cf9@bound-id-member? e2cfb@self-evaluating? e2cfd@strip-annotations e2cff@strip e2d01@stx->datum e2d03@same-marks*? e2d05@id->label e2d07@id->real-label e2d09@label->binding e2d0b@make-binding e2d0d@binding-type e2d0f@binding-value e2d11@raise-unbound-error e2d13@syntax-type e2d21@sanitize-binding e2d23@make-variable-transformer e2d25@variable-transformer? e2d27@variable-transformer-procedure e2d29@make-eval-transformer e2e7a@parse-define e2e7c@parse-define-syntax e2e7e@scheme-stx-hashtable e2e80@scheme-stx e2e82@lexical-var e2e84@lexical-mutable? e2e86@set-lexical-mutable! e2e88@add-lexical e2e8a@add-lexicals e2e8c@letrec-helper e2e8e@letrec-transformer e2e90@letrec*-transformer e2e92@fluid-let-syntax-transformer e2e94@type-descriptor-transformer e2e96@record-type-descriptor-transformer e2e98@record-constructor-descriptor-transformer e2e9a@when-macro e2e9c@unless-macro e2e9e@if-transformer e2ea0@and-transformer e2ea2@or-transformer e2ea4@case-macro e2ea6@quote-transformer e2ea8@case-lambda-transformer e2eaa@lambda-transformer e2eac@bless e2eae@with-syntax-macro e2eb0@invalid-fmls-error e2eb2@let-macro e2eb4@let-values-macro e2eb6@let*-values-macro e2eb8@trace-lambda-macro e2eba@trace-define-macro e2ebc@trace-define-syntax-macro e2ebe@trace-let/rec-syntax e2ec0@trace-let-syntax-macro e2ec2@trace-letrec-syntax-macro e2ec4@guard-macro e2ec6@define-enumeration-macro e2ec8@time-macro e2eca@delay-macro e2ecc@assert-macro e2ece@endianness-macro e2ed0@identifier-syntax-macro e2ed2@do-macro e2ed4@let*-macro e2ed6@or-macro e2ed8@and-macro e2eda@cond-macro e2edc@do-include e2ede@include-macro e2ee0@include-into-macro e2ee2@syntax-rules-macro e2ee4@quasiquote-macro e2ee6@quasisyntax-macro e2ee8@define-struct-macro e2eea@define-record-type-macro e2eec@define-condition-type-macro e2eee@incorrect-usage-macro e2ef0@parameterize-macro e2ef2@foreign-call-transformer e2ef4@convert-pattern e2ef6@syntax-dispatch e2ef8@ellipsis? e2efa@underscore? e2efc@verify-literals e2efe@syntax-case-transformer e2f00@ellipsis-map e2f02@syntax-transformer e2f04@core-macro-transformer e2f06@symbol-macro e2f08@macro-transformer e2f0a@local-macro-transformer e2f0c@do-macro-call e2f0e@chi-macro e2f10@chi-local-macro e2f12@chi-global-macro e2f14@chi-expr* e2f16@chi-application e2f18@chi-expr e2f1a@chi-set! e2f1c@verify-formals e2f1e@chi-lambda-clause e2f20@chi-lambda-clause* e2f22@chi-defun e2f24@chi-rhs e2f26@expand-interaction-rhs*/init* e2f28@chi-rhs* e2f2a@find-bound=? e2f2c@find-dups e2f2e@chi-internal e2f30@parse-module e2f36@e2f31 e2f38@e2f33 e2f3a@e2f32 e2f3d@module-interface? e2f3f@make-module-interface e2f41@module-interface-first-mark e2f43@module-interface-exp-id-vec e2f45@module-interface-exp-lab-vec e2f47@set-module-interface-first-mark! e2f49@set-module-interface-exp-id-vec! e2f4b@set-module-interface-exp-lab-vec! e2f4d@module-interface-exp-id* e2f4f@chi-internal-module e2f51@chi-body* e2f53@expand-transformer e2f55@parse-exports e2f57@parse-library-name e2f59@parse-library e2f5b@parse-import-spec* e2f5d@make-top-rib e2f5f@make-collector e2f61@inv-collector e2f63@vis-collector e2f65@imp-collector e2f67@chi-library-internal e2f69@chi-interaction-expr e2f6b@library-body-expander e2f6d@core-library-expander e2f6f@parse-top-level-program e2f71@top-level-expander e2f77@e2f72 e2f79@e2f74 e2f7b@e2f73 e2f7e@env? e2f80@make-env e2f82@env-names e2f84@env-labels e2f86@env-itc e2f88@set-env-names! e2f8a@set-env-labels! e2f8c@set-env-itc! e2f8e@rp e2f94@e2f8f e2f96@e2f91 e2f98@e2f90 e2f9b@interaction-env? e2f9d@make-interaction-env e2f9f@interaction-env-rib e2fa1@interaction-env-r e2fa3@interaction-env-locs e2fa5@set-interaction-env-rib! e2fa7@set-interaction-env-r! e2fa9@set-interaction-env-locs! e2fab@rp e2fad@interaction-environment-symbols e2faf@environment-bindings e2fb1@parse-binding e2fb3@environment? e2fb5@environment-symbols e2fb7@environment e2fb9@null-environment e2fbb@scheme-report-environment e2fbd@expand e2fbf@eval e2fc1@library-expander e2fc3@boot-library-expand e2fc5@rev-map-append e2fc7@build-exports e2fc9@make-export-subst e2fcb@make-export-env/macros e2fcd@generate-temporaries e2fcf@free-identifier=? e2fd1@bound-identifier=? e2fd3@make-source-condition e2fd5@extract-position-condition e2fd7@expression-position e2fd9@assertion-error e2fdb@syntax-error e2fdd@syntax-violation* e2fdf@syntax-violation e2fe1@identifier? e2fe3@datum->syntax e2fe5@syntax->datum e2fe7@compile-r6rs-top-level e2fe9@pre-compile-r6rs-top-level e2feb@interaction-environment e2fed@top-level-context) (begin (set! e2c5e@file-options-macro (lambda (e2fee@x) ((lambda (e2ff1@valid-option?) (begin (set! e2ff1@valid-option? (lambda (e2ffa@x) (and (e2ceb@id? e2ffa@x) (memq (e2ced@id->sym e2ffa@x) '(no-fail no-create no-truncate))))) ((lambda (e2ff2@t) ((lambda (e2ff4@ls/false) (if (and e2ff4@ls/false (apply (lambda (e2ff6@opt*) (for-all e2ff1@valid-option? e2ff6@opt*)) e2ff4@ls/false)) (apply (lambda (e2ff8@opt*) (e2eac@bless (list 'make-file-options (list 'quote e2ff8@opt*)))) e2ff4@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e2ff2@t))) (e2ef6@syntax-dispatch e2ff2@t '(_ . each-any)))) e2fee@x))) '#f))) (set! e2c60@set-cons (lambda (e2ffc@x e2ffd@ls) (if (memq e2ffc@x e2ffd@ls) e2ffd@ls (cons e2ffc@x e2ffd@ls)))) (set! e2c62@set-union (lambda (e3000@ls1 e3001@ls2) (if (null? e3000@ls1) e3001@ls2 (if (memq (car e3000@ls1) e3001@ls2) (e2c62@set-union (cdr e3000@ls1) e3001@ls2) (cons (car e3000@ls1) (e2c62@set-union (cdr e3000@ls1) e3001@ls2)))))) (set! e2c67@top-mark* '(top)) (set! e2c69@top-marked? (lambda (e3004@m*) (memq 'top e3004@m*))) (set! e2c6b@gen-lexical (lambda (e3006@sym) (if (symbol? e3006@sym) (gensym e3006@sym) (if (e2cb3@stx? e3006@sym) (e2c6b@gen-lexical (e2ced@id->sym e3006@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" e3006@sym))))) (set! e2c6d@gen-global (lambda (e3008@x) (e2c6b@gen-lexical e3008@x))) (set! e2c6f@gen-label (lambda (e300a@_) (gensym))) (set! e2c71@gen-top-level-label (lambda (e300c@id e300d@rib) ((lambda (e3011@find) (begin (set! e3011@find (lambda (e301c@sym e301d@mark* e301e@sym* e301f@mark** e3020@label*) (and (pair? e301e@sym*) (if (and (eq? e301c@sym (car e301e@sym*)) (e2cef@same-marks? e301d@mark* (car e301f@mark**))) (car e3020@label*) (e3011@find e301c@sym e301d@mark* (cdr e301e@sym*) (cdr e301f@mark**) (cdr e3020@label*)))))) ((lambda (e3012@sym e3013@mark*) ((lambda (e3016@sym*) ((lambda (e3018@t) (if e3018@t ((lambda (e301a@label) (if (e2b0e@e29ae@imported-label->binding e301a@label) (gensym) e301a@label)) e3018@t) (gensym))) (and (memq e3012@sym (e2c86@rib-sym* e300d@rib)) (e3011@find e3012@sym e3013@mark* e3016@sym* (e2c88@rib-mark** e300d@rib) (e2c8a@rib-label* e300d@rib))))) (e2c86@rib-sym* e300d@rib))) (e2ced@id->sym e300c@id) (e2cb9@stx-mark* e300c@id)))) '#f))) (set! e2c73@gen-define-label+loc (lambda (e3026@id e3027@rib) ((lambda (e302a@t) (if e302a@t ((lambda (e302c@env) ((lambda (e302e@label e302f@locs) (values e302e@label ((lambda (e3032@t) (if e3032@t (cdr e3032@t) ((lambda (e3034@loc) (begin (e2fa9@set-interaction-env-locs! e302c@env (cons (cons e302e@label e3034@loc) e302f@locs)) e3034@loc)) (e2c6b@gen-lexical e3026@id)))) (assq e302e@label e302f@locs)))) (e2c71@gen-top-level-label e3026@id e3027@rib) (e2fa3@interaction-env-locs e302c@env))) e302a@t) (values (gensym) (e2c6b@gen-lexical e3026@id)))) (e2fed@top-level-context)))) (set! e2c75@gen-define-label (lambda (e3036@id e3037@rib) (if (e2fed@top-level-context) (e2c71@gen-top-level-label e3036@id e3037@rib) (gensym)))) (set! e2c7b@e2c76 (make-record-type-descriptor 'rib '#f 'e2c79 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! e2c7d@e2c78 '#f) (set! e2c7f@e2c77 (make-record-constructor-descriptor e2c7b@e2c76 '#f e2c7d@e2c78)) (set! e2c82@rib? (record-predicate e2c7b@e2c76)) (set! e2c84@make-rib (record-constructor e2c7f@e2c77)) (set! e2c86@rib-sym* (record-accessor e2c7b@e2c76 '0)) (set! e2c88@rib-mark** (record-accessor e2c7b@e2c76 '1)) (set! e2c8a@rib-label* (record-accessor e2c7b@e2c76 '2)) (set! e2c8c@rib-sealed/freq (record-accessor e2c7b@e2c76 '3)) (set! e2c8e@rib-cache (record-accessor e2c7b@e2c76 '4)) (set! e2c90@set-rib-sym*! (record-mutator e2c7b@e2c76 '0)) (set! e2c92@set-rib-mark**! (record-mutator e2c7b@e2c76 '1)) (set! e2c94@set-rib-label*! (record-mutator e2c7b@e2c76 '2)) (set! e2c96@set-rib-sealed/freq! (record-mutator e2c7b@e2c76 '3)) (set! e2c98@set-rib-cache! (record-mutator e2c7b@e2c76 '4)) (set! e2c9a@make-empty-rib (lambda () (e2c84@make-rib '() '() '() '#f '#f))) (set! e2c9c@extend-rib! (lambda (e303a@rib e303b@id e303c@label) ((lambda (e3041@find) (begin (set! e3041@find (lambda (e304e@sym e304f@mark* e3050@sym* e3051@mark** e3052@label*) (and (pair? e3050@sym*) (if (and (eq? e304e@sym (car e3050@sym*)) (e2cef@same-marks? e304f@mark* (car e3051@mark**))) e3052@label* (e3041@find e304e@sym e304f@mark* (cdr e3050@sym*) (cdr e3051@mark**) (cdr e3052@label*)))))) (begin (if (e2c8c@rib-sealed/freq e303a@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" e303a@rib) (void)) ((lambda (e3042@sym e3043@mark*) ((lambda (e3046@sym*) ((lambda (e3048@t) (if e3048@t ((lambda (e304a@p) (if (not (eq? e303c@label (car e304a@p))) (if (e2fed@top-level-context) (set-car! e304a@p e303c@label) (e2fdf@syntax-violation '#f '"multiple definitions of identifier" e303b@id)) (void))) e3048@t) (begin (if (e2c8e@rib-cache e303a@rib) (hashtable-update! (e2c8e@rib-cache e303a@rib) e3042@sym (lambda (e304c@e) (cons (cons e3043@mark* e303c@label) e304c@e)) '()) (void)) (e2c90@set-rib-sym*! e303a@rib (cons e3042@sym e3046@sym*)) (e2c92@set-rib-mark**! e303a@rib (cons e3043@mark* (e2c88@rib-mark** e303a@rib))) (e2c94@set-rib-label*! e303a@rib (cons e303c@label (e2c8a@rib-label* e303a@rib)))))) (and (memq e3042@sym (e2c86@rib-sym* e303a@rib)) (e3041@find e3042@sym e3043@mark* e3046@sym* (e2c88@rib-mark** e303a@rib) (e2c8a@rib-label* e303a@rib))))) (e2c86@rib-sym* e303a@rib))) (e2ced@id->sym e303b@id) (e2cb9@stx-mark* e303b@id))))) '#f))) (set! e2c9e@extend-rib/nc! (lambda (e3058@rib e3059@id e305a@label) ((lambda (e305e@sym e305f@mark*) ((lambda (e3062@sym*) (begin (if (e2c8e@rib-cache e3058@rib) (hashtable-update! (e2c8e@rib-cache e3058@rib) e305e@sym (lambda (e3064@e) (cons (cons e305f@mark* e305a@label) e3064@e)) '()) (void)) (e2c90@set-rib-sym*! e3058@rib (cons e305e@sym e3062@sym*)) (e2c92@set-rib-mark**! e3058@rib (cons e305f@mark* (e2c88@rib-mark** e3058@rib))) (e2c94@set-rib-label*! e3058@rib (cons e305a@label (e2c8a@rib-label* e3058@rib))))) (e2c86@rib-sym* e3058@rib))) (e2ced@id->sym e3059@id) (e2cb9@stx-mark* e3059@id)))) (set! e2ca0@make-rib-map (lambda (e3066@sym*) ((lambda (e3068@ht) ((letrec ((e306a@f (lambda (e306c@i e306d@sym*) (if (null? e306d@sym*) e3068@ht (begin (hashtable-update! e3068@ht (car e306d@sym*) (lambda (e3070@x) (cons e306c@i e3070@x)) '()) (e306a@f (+ e306c@i '1) (cdr e306d@sym*))))))) e306a@f) '0 e3066@sym*)) (make-eq-hashtable)))) (set! e2ca2@seal-rib! (lambda (e3072@rib) ((lambda (e3074@sym*) (if (not (null? e3074@sym*)) (begin (e2c90@set-rib-sym*! e3072@rib (list->vector e3074@sym*)) (e2c92@set-rib-mark**! e3072@rib (list->vector (e2c88@rib-mark** e3072@rib))) (e2c94@set-rib-label*! e3072@rib (list->vector (e2c8a@rib-label* e3072@rib))) (e2c96@set-rib-sealed/freq! e3072@rib (e2ca0@make-rib-map e3074@sym*))) (void))) (e2c86@rib-sym* e3072@rib)))) (set! e2ca4@unseal-rib! (lambda (e3076@rib) (if (e2c8c@rib-sealed/freq e3076@rib) (begin (e2c96@set-rib-sealed/freq! e3076@rib '#f) (e2c90@set-rib-sym*! e3076@rib (vector->list (e2c86@rib-sym* e3076@rib))) (e2c92@set-rib-mark**! e3076@rib (vector->list (e2c88@rib-mark** e3076@rib))) (e2c94@set-rib-label*! e3076@rib (vector->list (e2c8a@rib-label* e3076@rib)))) (void)))) (set! e2ca6@make-full-rib (lambda (e3078@id* e3079@label*) ((lambda (e307c@r) (begin (e2ca2@seal-rib! e307c@r) e307c@r)) (e2c84@make-rib (map e2ced@id->sym e3078@id*) (map e2cb9@stx-mark* e3078@id*) e3079@label* '#f '#f)))) (set! e2cac@e2ca7 (make-record-type-descriptor 'stx '#f 'e2caa '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! e2cae@e2ca9 '#f) (set! e2cb0@e2ca8 (make-record-constructor-descriptor e2cac@e2ca7 '#f e2cae@e2ca9)) (set! e2cb3@stx? (record-predicate e2cac@e2ca7)) (set! e2cb5@make-stx (record-constructor e2cb0@e2ca8)) (set! e2cb7@stx-expr (record-accessor e2cac@e2ca7 '0)) (set! e2cb9@stx-mark* (record-accessor e2cac@e2ca7 '1)) (set! e2cbb@stx-subst* (record-accessor e2cac@e2ca7 '2)) (set! e2cbd@stx-ae* (record-accessor e2cac@e2ca7 '3)) (set! e2cbf@set-stx-expr! (record-mutator e2cac@e2ca7 '0)) (set! e2cc1@set-stx-mark*! (record-mutator e2cac@e2ca7 '1)) (set! e2cc3@set-stx-subst*! (record-mutator e2cac@e2ca7 '2)) (set! e2cc5@set-stx-ae*! (record-mutator e2cac@e2ca7 '3)) (set! e2cc7@rp (e2892@e27b9@make-record-printer 'stx (lambda (e307e@x e307f@p e3080@wr) (begin (display '"#<syntax " e307f@p) (write (e2d01@stx->datum e307e@x) e307f@p) ((lambda (e3084@expr) (if (e288a@e27a9@annotation? e3084@expr) ((lambda (e3086@src) (if (pair? e3086@src) (begin (display '" [" e307f@p) (display (cdr e3086@src) e307f@p) (display '" of " e307f@p) (display (car e3086@src) e307f@p) (display '"]" e307f@p)) (void))) (e288b@e27ab@annotation-source e3084@expr)) (void))) (e2cb7@stx-expr e307e@x)) (display '">" e307f@p))))) (set! e2cc9@datum->stx (lambda (e3088@id e3089@datum) (e2cb5@make-stx e3089@datum (e2cb9@stx-mark* e3088@id) (e2cbb@stx-subst* e3088@id) (e2cbd@stx-ae* e3088@id)))) (set! e2ccb@gen-mark (lambda () (string '#\m))) (set! e2ccd@anti-mark '#f) (set! e2ccf@anti-mark? not) (set! e2cd1@join-wraps (lambda (e308c@m1* e308d@s1* e308e@ae1* e308f@e) ((lambda (e3095@cancel) (begin (set! e3095@cancel (lambda (e309c@ls1 e309d@ls2) ((letrec ((e30a0@f (lambda (e30a2@x e30a3@ls1) (if (null? e30a3@ls1) (cdr e309d@ls2) (cons e30a2@x (e30a0@f (car e30a3@ls1) (cdr e30a3@ls1))))))) e30a0@f) (car e309c@ls1) (cdr e309c@ls1)))) ((lambda (e3096@m2* e3097@s2* e3098@ae2*) (if (and (not (null? e308c@m1*)) (not (null? e3096@m2*)) (e2ccf@anti-mark? (car e3096@m2*))) (values (e3095@cancel e308c@m1* e3096@m2*) (e3095@cancel e308d@s1* e3097@s2*) (e3095@cancel e308e@ae1* e3098@ae2*)) (values (append e308c@m1* e3096@m2*) (append e308d@s1* e3097@s2*) (append e308e@ae1* e3098@ae2*)))) (e2cb9@stx-mark* e308f@e) (e2cbb@stx-subst* e308f@e) (e2cbd@stx-ae* e308f@e)))) '#f))) (set! e2cd3@mkstx (lambda (e30a6@e e30a7@m* e30a8@s* e30a9@ae*) (if (and (e2cb3@stx? e30a6@e) (not (e2c69@top-marked? e30a7@m*))) (call-with-values (lambda () (e2cd1@join-wraps e30a7@m* e30a8@s* e30a9@ae* e30a6@e)) (lambda (e30b4@e30af e30b5@e30b1 e30b6@e30b3) ((lambda (e30ba@ae* e30bb@s* e30bc@m*) (e2cb5@make-stx (e2cb7@stx-expr e30a6@e) e30bc@m* e30bb@s* e30ba@ae*)) e30b6@e30b3 e30b5@e30b1 e30b4@e30af))) (e2cb5@make-stx e30a6@e e30a7@m* e30a8@s* e30a9@ae*)))) (set! e2cd5@add-mark (lambda (e30c0@m e30c1@e e30c2@ae) (e2cd3@mkstx e30c1@e (list e30c0@m) '(shift) (list e30c2@ae)))) (set! e2cd7@add-subst (lambda (e30c6@subst e30c7@e) (e2cd3@mkstx e30c7@e '() (list e30c6@subst) '()))) (set! e2cd9@syntax-kind? (lambda (e30ca@x e30cb@p?) (if (e2cb3@stx? e30ca@x) (e2cd9@syntax-kind? (e2cb7@stx-expr e30ca@x) e30cb@p?) (if (e288a@e27a9@annotation? e30ca@x) (e2cd9@syntax-kind? (e288c@e27ad@annotation-expression e30ca@x) e30cb@p?) (e30cb@p? e30ca@x))))) (set! e2cdb@syntax-vector->list (lambda (e30ce@x) (if (e2cb3@stx? e30ce@x) ((lambda (e30d0@ls e30d1@m* e30d2@s* e30d3@ae*) (map (lambda (e30d8@x) (e2cd3@mkstx e30d8@x e30d1@m* e30d2@s* e30d3@ae*)) e30d0@ls)) (e2cdb@syntax-vector->list (e2cb7@stx-expr e30ce@x)) (e2cb9@stx-mark* e30ce@x) (e2cbb@stx-subst* e30ce@x) (e2cbd@stx-ae* e30ce@x)) (if (e288a@e27a9@annotation? e30ce@x) (e2cdb@syntax-vector->list (e288c@e27ad@annotation-expression e30ce@x)) (if (vector? e30ce@x) (vector->list e30ce@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" e30ce@x)))))) (set! e2cdd@syntax-pair? (lambda (e30da@x) (e2cd9@syntax-kind? e30da@x pair?))) (set! e2cdf@syntax-vector? (lambda (e30dc@x) (e2cd9@syntax-kind? e30dc@x vector?))) (set! e2ce1@syntax-null? (lambda (e30de@x) (e2cd9@syntax-kind? e30de@x null?))) (set! e2ce3@syntax-list? (lambda (e30e0@x) (or (e2ce1@syntax-null? e30e0@x) (and (e2cdd@syntax-pair? e30e0@x) (e2ce3@syntax-list? (e2ce7@syntax-cdr e30e0@x)))))) (set! e2ce5@syntax-car (lambda (e30e2@x) (if (e2cb3@stx? e30e2@x) (e2cd3@mkstx (e2ce5@syntax-car (e2cb7@stx-expr e30e2@x)) (e2cb9@stx-mark* e30e2@x) (e2cbb@stx-subst* e30e2@x) (e2cbd@stx-ae* e30e2@x)) (if (e288a@e27a9@annotation? e30e2@x) (e2ce5@syntax-car (e288c@e27ad@annotation-expression e30e2@x)) (if (pair? e30e2@x) (car e30e2@x) (assertion-violation 'syntax-car '"BUG: not a pair" e30e2@x)))))) (set! e2ce7@syntax-cdr (lambda (e30e4@x) (if (e2cb3@stx? e30e4@x) (e2cd3@mkstx (e2ce7@syntax-cdr (e2cb7@stx-expr e30e4@x)) (e2cb9@stx-mark* e30e4@x) (e2cbb@stx-subst* e30e4@x) (e2cbd@stx-ae* e30e4@x)) (if (e288a@e27a9@annotation? e30e4@x) (e2ce7@syntax-cdr (e288c@e27ad@annotation-expression e30e4@x)) (if (pair? e30e4@x) (cdr e30e4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" e30e4@x)))))) (set! e2ce9@syntax->list (lambda (e30e6@x) (if (e2cdd@syntax-pair? e30e6@x) (cons (e2ce5@syntax-car e30e6@x) (e2ce9@syntax->list (e2ce7@syntax-cdr e30e6@x))) (if (e2ce1@syntax-null? e30e6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" e30e6@x))))) (set! e2ceb@id? (lambda (e30e8@x) (and (e2cb3@stx? e30e8@x) (symbol? (e2cb7@stx-expr e30e8@x))))) (set! e2ced@id->sym (lambda (e30ea@x) (e2cb7@stx-expr e30ea@x))) (set! e2cef@same-marks? (lambda (e30ec@x e30ed@y) (or (and (null? e30ec@x) (null? e30ed@y)) (and (pair? e30ec@x) (pair? e30ed@y) (eq? (car e30ec@x) (car e30ed@y)) (e2cef@same-marks? (cdr e30ec@x) (cdr e30ed@y)))))) (set! e2cf1@bound-id=? (lambda (e30f0@x e30f1@y) (and (eq? (e2ced@id->sym e30f0@x) (e2ced@id->sym e30f1@y)) (e2cef@same-marks? (e2cb9@stx-mark* e30f0@x) (e2cb9@stx-mark* e30f1@y))))) (set! e2cf3@free-id=? (lambda (e30f4@i e30f5@j) ((lambda (e30f8@t0 e30f9@t1) (if (or e30f8@t0 e30f9@t1) (eq? e30f8@t0 e30f9@t1) (eq? (e2ced@id->sym e30f4@i) (e2ced@id->sym e30f5@j)))) (e2d07@id->real-label e30f4@i) (e2d07@id->real-label e30f5@j)))) (set! e2cf5@valid-bound-ids? (lambda (e30fc@id*) (and (for-all e2ceb@id? e30fc@id*) (e2cf7@distinct-bound-ids? e30fc@id*)))) (set! e2cf7@distinct-bound-ids? (lambda (e30fe@id*) (or (null? e30fe@id*) (and (not (e2cf9@bound-id-member? (car e30fe@id*) (cdr e30fe@id*))) (e2cf7@distinct-bound-ids? (cdr e30fe@id*)))))) (set! e2cf9@bound-id-member? (lambda (e3100@id e3101@id*) (and (pair? e3101@id*) (or (e2cf1@bound-id=? e3100@id (car e3101@id*)) (e2cf9@bound-id-member? e3100@id (cdr e3101@id*)))))) (set! e2cfb@self-evaluating? (lambda (e3104@x) (or (number? e3104@x) (string? e3104@x) (char? e3104@x) (boolean? e3104@x) (regexp? e3104@x) (bytevector? e3104@x)))) (set! e2cfd@strip-annotations (lambda (e3106@x) (if (pair? e3106@x) (cons (e2cfd@strip-annotations (car e3106@x)) (e2cfd@strip-annotations (cdr e3106@x))) (if (vector? e3106@x) (vector-map e2cfd@strip-annotations e3106@x) (if (e288a@e27a9@annotation? e3106@x) (e2889@e27a7@annotation-stripped e3106@x) e3106@x))))) (set! e2cff@strip (lambda (e3108@x e3109@m*) (if (e2c69@top-marked? e3109@m*) (if (or (e288a@e27a9@annotation? e3108@x) (and (pair? e3108@x) (e288a@e27a9@annotation? (car e3108@x))) (and (vector? e3108@x) (> (vector-length e3108@x) '0) (e288a@e27a9@annotation? (vector-ref e3108@x '0)))) (e2cfd@strip-annotations e3108@x) e3108@x) ((letrec ((e310c@f (lambda (e310e@x) (if (e2cb3@stx? e310e@x) (e2cff@strip (e2cb7@stx-expr e310e@x) (e2cb9@stx-mark* e310e@x)) (if (e288a@e27a9@annotation? e310e@x) (e2889@e27a7@annotation-stripped e310e@x) (if (pair? e310e@x) ((lambda (e3110@a e3111@d) (if (and (eq? e3110@a (car e310e@x)) (eq? e3111@d (cdr e310e@x))) e310e@x (cons e3110@a e3111@d))) (e310c@f (car e310e@x)) (e310c@f (cdr e310e@x))) (if (vector? e310e@x) ((lambda (e3114@old) ((lambda (e3116@new) (if (for-all eq? e3114@old e3116@new) e310e@x (list->vector e3116@new))) (map e310c@f e3114@old))) (vector->list e310e@x)) e310e@x))))))) e310c@f) e3108@x)))) (set! e2d01@stx->datum (lambda (e3118@x) (e2cff@strip e3118@x '()))) (set! e2d03@same-marks*? (lambda (e311a@mark* e311b@mark** e311c@si) (if (null? e311c@si) '#f (if (e2cef@same-marks? e311a@mark* (vector-ref e311b@mark** (car e311c@si))) (car e311c@si) (e2d03@same-marks*? e311a@mark* e311b@mark** (cdr e311c@si)))))) (set! e2d05@id->label (lambda (e3120@id) (or (e2d07@id->real-label e3120@id) ((lambda (e3122@t) (if e3122@t ((lambda (e3124@env) ((lambda (e3126@rib) (call-with-values (lambda () (e2c73@gen-define-label+loc e3120@id e3126@rib)) (lambda (e312c@e3129 e312d@e312b) ((lambda (e3130@loc_ e3131@lab) (begin (e2c9c@extend-rib! e3126@rib e3120@id e3131@lab) e3131@lab)) e312d@e312b e312c@e3129)))) (e2f9f@interaction-env-rib e3124@env))) e3122@t) '#f)) (e2fed@top-level-context))))) (set! e2d07@id->real-label (lambda (e3134@id) ((lambda (e3136@sym) ((letrec ((e3138@search (lambda (e313a@subst* e313b@mark*) (if (null? e313a@subst*) '#f (if (eq? (car e313a@subst*) 'shift) (e3138@search (cdr e313a@subst*) (cdr e313b@mark*)) ((lambda (e313e@rib) ((lambda (e3140@t) (if e3140@t ((lambda (e3142@ht) ((lambda (e3144@si) ((lambda (e3146@i) (if e3146@i (vector-ref (e2c8a@rib-label* e313e@rib) e3146@i) (e3138@search (cdr e313a@subst*) e313b@mark*))) (and e3144@si (e2d03@same-marks*? e313b@mark* (e2c88@rib-mark** e313e@rib) (reverse e3144@si))))) (hashtable-ref e3142@ht e3136@sym '#f))) e3140@t) ((letrec ((e3148@f (lambda (e314a@sym* e314b@mark** e314c@label*) (if (null? e314a@sym*) (e3138@search (cdr e313a@subst*) e313b@mark*) (if (and (eq? (car e314a@sym*) e3136@sym) (e2cef@same-marks? (car e314b@mark**) e313b@mark*)) (car e314c@label*) (e3148@f (cdr e314a@sym*) (cdr e314b@mark**) (cdr e314c@label*))))))) e3148@f) (e2c86@rib-sym* e313e@rib) (e2c88@rib-mark** e313e@rib) (e2c8a@rib-label* e313e@rib)))) (e2c8c@rib-sealed/freq e313e@rib))) (car e313a@subst*))))))) e3138@search) (e2cbb@stx-subst* e3134@id) (e2cb9@stx-mark* e3134@id))) (e2ced@id->sym e3134@id)))) (set! e2d09@label->binding (lambda (e3150@x e3151@r) ((lambda (e3154@t) (if e3154@t ((lambda (e3156@b) (if (and (pair? e3156@b) (eq? (car e3156@b) '$core-rtd)) (cons '$rtd (map e2eac@bless (cdr e3156@b))) (if (and (pair? e3156@b) (eq? (car e3156@b) 'global-rtd)) ((lambda (e3158@lib e3159@loc) (cons '$rtd (symbol-value e3159@loc))) (cadr e3156@b) (cddr e3156@b)) e3156@b))) e3154@t) ((lambda (e315c@t) (if e315c@t (cdr e315c@t) ((lambda (e315e@t) (if e315e@t ((lambda (e3160@env) ((lambda (e3162@t) (if e3162@t ((lambda (e3164@p) (cons* 'lexical (cdr e3164@p) '#f)) e3162@t) '(displaced-lexical . #f))) (assq e3150@x (e2fa3@interaction-env-locs e3160@env)))) e315e@t) '(displaced-lexical . #f))) (e2fed@top-level-context)))) (assq e3150@x e3151@r)))) (e2b0e@e29ae@imported-label->binding e3150@x)))) (set! e2d0b@make-binding cons) (set! e2d0d@binding-type car) (set! e2d0f@binding-value cdr) (set! e2d11@raise-unbound-error (lambda (e3166@id) (e2fdd@syntax-violation* '#f '"unbound identifier" e3166@id (e4d16@e4b5c@make-undefined-violation)))) (set! e2d13@syntax-type (lambda (e3168@e e3169@r) (if (e2ceb@id? e3168@e) ((lambda (e316c@id) ((lambda (e316e@label) ((lambda (e3170@b) ((lambda (e3172@type) ((lambda () (begin (if (not e316e@label) (e2d11@raise-unbound-error e316c@id) (void)) ((lambda (e3174@t) (if (memv e3174@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values e3172@type (e2d0f@binding-value e3170@b) e316c@id) (values 'other '#f '#f))) e3172@type))))) (e2d0d@binding-type e3170@b))) (e2d09@label->binding e316e@label e3169@r))) (e2d05@id->label e316c@id))) e3168@e) (if (e2cdd@syntax-pair? e3168@e) ((lambda (e3176@id) (if (e2ceb@id? e3176@id) ((lambda (e3178@label) ((lambda (e317a@b) ((lambda (e317c@type) ((lambda () (begin (if (not e3178@label) (e2d11@raise-unbound-error e3176@id) (void)) ((lambda (e317e@t) (if (memv e317e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values e317c@type (e2d0f@binding-value e317a@b) e3176@id) (values 'call '#f '#f))) e317c@type))))) (e2d0d@binding-type e317a@b))) (e2d09@label->binding e3178@label e3169@r))) (e2d05@id->label e3176@id)) (values 'call '#f '#f))) (e2ce5@syntax-car e3168@e)) ((lambda (e3180@d) (if (e2cfb@self-evaluating? e3180@d) (values 'constant e3180@d '#f) (values 'other '#f '#f))) (e2d01@stx->datum e3168@e)))))) (set! e2d21@sanitize-binding (lambda (e3182@x e3183@src) (if (procedure? e3182@x) (cons* 'local-macro e3182@x e3183@src) (if (and (pair? e3182@x) (eq? (car e3182@x) 'macro!) (procedure? (cdr e3182@x))) (cons* 'local-macro! (cdr e3182@x) e3183@src) (if (and (pair? e3182@x) (eq? (car e3182@x) '$rtd)) e3182@x (assertion-violation 'expand '"invalid transformer" e3182@x)))))) (set! e2d23@make-variable-transformer (lambda (e3186@x) (if (procedure? e3186@x) (cons 'macro! e3186@x) (assertion-violation 'make-variable-transformer '"not a procedure" e3186@x)))) (set! e2d25@variable-transformer? (lambda (e3188@x) (and (pair? e3188@x) (eq? (car e3188@x) 'macro!) (procedure? (cdr e3188@x))))) (set! e2d27@variable-transformer-procedure (lambda (e318a@x) (if (e2d25@variable-transformer? e318a@x) (cdr e318a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" e318a@x)))) (set! e2d29@make-eval-transformer (lambda (e318c@x) (e2d21@sanitize-binding (eval-core (e28e9@e28a1@expanded->core e318c@x)) e318c@x))) (set! e2e7a@parse-define (lambda (e318e@x) ((lambda (e3190@t) ((lambda (e3192@ls/false) (if (and e3192@ls/false (apply (lambda (e3194@id e3195@fmls e3196@b e3197@b*) (e2ceb@id? e3194@id)) e3192@ls/false)) (apply (lambda (e319c@id e319d@fmls e319e@b e319f@b*) (begin (e2f1c@verify-formals e319d@fmls e318e@x) (values e319c@id (cons 'defun (cons e319d@fmls (cons e319e@b e319f@b*)))))) e3192@ls/false) ((lambda (e31a4@t) ((lambda (e31a6@ls/false) (if (and e31a6@ls/false (apply (lambda (e31a8@id e31a9@val) (e2ceb@id? e31a8@id)) e31a6@ls/false)) (apply (lambda (e31ac@id e31ad@val) (values e31ac@id (cons 'expr e31ad@val))) e31a6@ls/false) ((lambda (e31b0@t) ((lambda (e31b2@ls/false) (if (and e31b2@ls/false (apply (lambda (e31b4@id) (e2ceb@id? e31b4@id)) e31b2@ls/false)) (apply (lambda (e31b6@id) (values e31b6@id (cons 'expr (e2eac@bless '(void))))) e31b2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e31b0@t))) (e2ef6@syntax-dispatch e31b0@t '(_ any)))) e31a4@t))) (e2ef6@syntax-dispatch e31a4@t '(_ any any)))) e3190@t))) (e2ef6@syntax-dispatch e3190@t '(_ (any . any) any . each-any)))) e318e@x))) (set! e2e7c@parse-define-syntax (lambda (e31b8@x) ((lambda (e31ba@t) ((lambda (e31bc@ls/false) (if (and e31bc@ls/false (apply (lambda (e31be@id e31bf@val) (e2ceb@id? e31be@id)) e31bc@ls/false)) (apply (lambda (e31c2@id e31c3@val) (values e31c2@id e31c3@val)) e31bc@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e31ba@t))) (e2ef6@syntax-dispatch e31ba@t '(_ any any)))) e31b8@x))) (set! e2e7e@scheme-stx-hashtable (make-eq-hashtable)) (set! e2e80@scheme-stx (lambda (e31c6@sym) (or (hashtable-ref e2e7e@scheme-stx-hashtable e31c6@sym '#f) ((lambda (e31c8@subst) ((lambda (e31ca@stx) ((lambda (e31cc@stx) ((lambda () (begin (hashtable-set! e2e7e@scheme-stx-hashtable e31c6@sym e31cc@stx) e31cc@stx)))) ((lambda (e31ce@t) (if e31ce@t ((lambda (e31d0@x) ((lambda (e31d2@name e31d3@label) (e2cd7@add-subst (e2c84@make-rib (list e31d2@name) (list e2c67@top-mark*) (list e31d3@label) '#f '#f) e31ca@stx)) (car e31d0@x) (cdr e31d0@x))) e31ce@t) e31ca@stx)) (assq e31c6@sym e31c8@subst)))) (e2cb5@make-stx e31c6@sym e2c67@top-mark* '() '()))) (e2ae4@e295a@library-subst (e2b08@e29a2@find-library-by-name '(psyntax system $all))))))) (set! e2e82@lexical-var car) (set! e2e84@lexical-mutable? cdr) (set! e2e86@set-lexical-mutable! set-cdr!) (set! e2e88@add-lexical (lambda (e31d6@lab e31d7@lex e31d8@r) (cons (cons* e31d6@lab 'lexical e31d7@lex '#f) e31d8@r))) (set! e2e8a@add-lexicals (lambda (e31dc@lab* e31dd@lex* e31de@r) (if (null? e31dc@lab*) e31de@r (e2e8a@add-lexicals (cdr e31dc@lab*) (cdr e31dd@lex*) (e2e88@add-lexical (car e31dc@lab*) (car e31dd@lex*) e31de@r))))) (set! e2e8c@letrec-helper (lambda (e31e2@e e31e3@r e31e4@mr e31e5@build) ((lambda (e31ea@t) ((lambda (e31ec@ls/false) (if e31ec@ls/false (apply (lambda (e31ee@lhs* e31ef@rhs* e31f0@b e31f1@b*) (if (not (e2cf5@valid-bound-ids? e31ee@lhs*)) (e2eb0@invalid-fmls-error e31e2@e e31ee@lhs*) ((lambda (e31f6@lex* e31f7@lab*) ((lambda (e31fa@rib e31fb@r) ((lambda (e31fe@body e31ff@rhs*) (e31e5@build '#f e31f6@lex* e31ff@rhs* e31fe@body)) (e2f2e@chi-internal (e2cd7@add-subst e31fa@rib (cons e31f0@b e31f1@b*)) e31fb@r e31e4@mr) (e2f14@chi-expr* (map (lambda (e3202@x) (e2cd7@add-subst e31fa@rib e3202@x)) e31ef@rhs*) e31fb@r e31e4@mr))) (e2ca6@make-full-rib e31ee@lhs* e31f7@lab*) (e2e8a@add-lexicals e31f7@lab* e31f6@lex* e31e3@r))) (map e2c6b@gen-lexical e31ee@lhs*) (map e2c6f@gen-label e31ee@lhs*)))) e31ec@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e31ea@t))) (e2ef6@syntax-dispatch e31ea@t '(_ #(each (any any)) any . each-any)))) e31e2@e))) (set! e2e8e@letrec-transformer (lambda (e3204@e e3205@r e3206@mr) (e2e8c@letrec-helper e3204@e e3205@r e3206@mr e2c4c@e2bbd@build-letrec))) (set! e2e90@letrec*-transformer (lambda (e320a@e e320b@r e320c@mr) (e2e8c@letrec-helper e320a@e e320b@r e320c@mr e2c4d@e2bbf@build-letrec*))) (set! e2e92@fluid-let-syntax-transformer (lambda (e3210@e e3211@r e3212@mr) ((lambda (e3217@lookup) (begin (set! e3217@lookup (lambda (e322a@x) (or (e2d05@id->label e322a@x) (e2fdf@syntax-violation '#f '"unbound identifier" e3210@e e322a@x)))) ((lambda (e3218@t) ((lambda (e321a@ls/false) (if e321a@ls/false (apply (lambda (e321c@lhs* e321d@rhs* e321e@b e321f@b*) (if (not (e2cf5@valid-bound-ids? e321c@lhs*)) (e2eb0@invalid-fmls-error e3210@e e321c@lhs*) ((lambda (e3224@lab* e3225@rhs*) (e2f2e@chi-internal (cons e321e@b e321f@b*) (append (map cons e3224@lab* e3225@rhs*) e3211@r) (append (map cons e3224@lab* e3225@rhs*) e3212@mr))) (map e3217@lookup e321c@lhs*) (map (lambda (e3228@x) (e2d29@make-eval-transformer (e2f53@expand-transformer e3228@x e3212@mr))) e321d@rhs*)))) e321a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3218@t))) (e2ef6@syntax-dispatch e3218@t '(_ #(each (any any)) any . each-any)))) e3210@e))) '#f))) (set! e2e94@type-descriptor-transformer (lambda (e322c@e e322d@r e322e@mr) ((lambda (e3232@t) ((lambda (e3234@ls/false) (if (and e3234@ls/false (apply (lambda (e3236@id) (e2ceb@id? e3236@id)) e3234@ls/false)) (apply (lambda (e3238@id) ((lambda (e323a@lab) ((lambda (e323c@b) ((lambda (e323e@type) ((lambda () (begin (if (not e323a@lab) (e2d11@raise-unbound-error e3238@id) (void)) (if (not (and (eq? e323e@type '$rtd) (not (list? (e2d0f@binding-value e323c@b))))) (e2fdf@syntax-violation '#f '"not a record type" e322c@e) (void)) (list 'quote (e2d0f@binding-value e323c@b)))))) (e2d0d@binding-type e323c@b))) (e2d09@label->binding e323a@lab e322d@r))) (e2d05@id->label e3238@id))) e3234@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3232@t))) (e2ef6@syntax-dispatch e3232@t '(_ any)))) e322c@e))) (set! e2e96@record-type-descriptor-transformer (lambda (e3240@e e3241@r e3242@mr) ((lambda (e3246@t) ((lambda (e3248@ls/false) (if (and e3248@ls/false (apply (lambda (e324a@id) (e2ceb@id? e324a@id)) e3248@ls/false)) (apply (lambda (e324c@id) ((lambda (e324e@lab) ((lambda (e3250@b) ((lambda (e3252@type) ((lambda () (begin (if (not e324e@lab) (e2d11@raise-unbound-error e324c@id) (void)) (if (not (and (eq? e3252@type '$rtd) (list? (e2d0f@binding-value e3250@b)))) (e2fdf@syntax-violation '#f '"not a record type" e3240@e) (void)) (e2f18@chi-expr (car (e2d0f@binding-value e3250@b)) e3241@r e3242@mr))))) (e2d0d@binding-type e3250@b))) (e2d09@label->binding e324e@lab e3241@r))) (e2d05@id->label e324c@id))) e3248@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3246@t))) (e2ef6@syntax-dispatch e3246@t '(_ any)))) e3240@e))) (set! e2e98@record-constructor-descriptor-transformer (lambda (e3254@e e3255@r e3256@mr) ((lambda (e325a@t) ((lambda (e325c@ls/false) (if (and e325c@ls/false (apply (lambda (e325e@id) (e2ceb@id? e325e@id)) e325c@ls/false)) (apply (lambda (e3260@id) ((lambda (e3262@lab) ((lambda (e3264@b) ((lambda (e3266@type) ((lambda () (begin (if (not e3262@lab) (e2d11@raise-unbound-error e3260@id) (void)) (if (not (and (eq? e3266@type '$rtd) (list? (e2d0f@binding-value e3264@b)))) (e2fdf@syntax-violation '#f '"invalid type" e3254@e) (void)) (e2f18@chi-expr (cadr (e2d0f@binding-value e3264@b)) e3255@r e3256@mr))))) (e2d0d@binding-type e3264@b))) (e2d09@label->binding e3262@lab e3255@r))) (e2d05@id->label e3260@id))) e325c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e325a@t))) (e2ef6@syntax-dispatch e325a@t '(_ any)))) e3254@e))) (set! e2e9a@when-macro (lambda (e3268@e) ((lambda (e326a@t) ((lambda (e326c@ls/false) (if e326c@ls/false (apply (lambda (e326e@test e326f@e e3270@e*) (e2eac@bless (list 'if e326e@test (cons 'begin (cons e326f@e e3270@e*))))) e326c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e326a@t))) (e2ef6@syntax-dispatch e326a@t '(_ any any . each-any)))) e3268@e))) (set! e2e9c@unless-macro (lambda (e3274@e) ((lambda (e3276@t) ((lambda (e3278@ls/false) (if e3278@ls/false (apply (lambda (e327a@test e327b@e e327c@e*) (e2eac@bless (list 'if (list 'not e327a@test) (cons 'begin (cons e327b@e e327c@e*))))) e3278@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3276@t))) (e2ef6@syntax-dispatch e3276@t '(_ any any . each-any)))) e3274@e))) (set! e2e9e@if-transformer (lambda (e3280@e e3281@r e3282@mr) ((lambda (e3286@t) ((lambda (e3288@ls/false) (if e3288@ls/false (apply (lambda (e328a@e0 e328b@e1 e328c@e2) (list 'if (e2f18@chi-expr e328a@e0 e3281@r e3282@mr) (e2f18@chi-expr e328b@e1 e3281@r e3282@mr) (e2f18@chi-expr e328c@e2 e3281@r e3282@mr))) e3288@ls/false) ((lambda (e3290@t) ((lambda (e3292@ls/false) (if e3292@ls/false (apply (lambda (e3294@e0 e3295@e1) (list 'if (e2f18@chi-expr e3294@e0 e3281@r e3282@mr) (e2f18@chi-expr e3295@e1 e3281@r e3282@mr) (e2c4b@e2bbb@build-void))) e3292@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3290@t))) (e2ef6@syntax-dispatch e3290@t '(_ any any)))) e3286@t))) (e2ef6@syntax-dispatch e3286@t '(_ any any any)))) e3280@e))) (set! e2ea0@and-transformer (lambda (e3298@e e3299@r e329a@mr) ((lambda (e329e@t) ((lambda (e32a0@ls/false) (if e32a0@ls/false (apply (lambda (e32a2@e*) (cons 'and (e2f14@chi-expr* e32a2@e* e3299@r e329a@mr))) e32a0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e329e@t))) (e2ef6@syntax-dispatch e329e@t '(_ . each-any)))) e3298@e))) (set! e2ea2@or-transformer (lambda (e32a4@e e32a5@r e32a6@mr) ((lambda (e32aa@t) ((lambda (e32ac@ls/false) (if e32ac@ls/false (apply (lambda (e32ae@e*) (cons 'or (e2f14@chi-expr* e32ae@e* e32a5@r e32a6@mr))) e32ac@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e32aa@t))) (e2ef6@syntax-dispatch e32aa@t '(_ . each-any)))) e32a4@e))) (set! e2ea4@case-macro (lambda (e32b0@e) ((lambda (e32b3@build-last e32b5@build-one) (begin (set! e32b3@build-last (lambda (e32da@cls) ((lambda (e32dc@t) ((lambda (e32de@ls/false) (if e32de@ls/false (apply (lambda (e32e0@e e32e1@e*) (cons 'begin (cons e32e0@e e32e1@e*))) e32de@ls/false) ((lambda (e32e4@t) ((lambda (e32e6@ls/false) (if e32e6@ls/false (apply (lambda () (e32b5@build-one e32da@cls '(if #f #f))) e32e6@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e32e4@t))) (e2ef6@syntax-dispatch e32e4@t '_))) e32dc@t))) (e2ef6@syntax-dispatch e32dc@t '(#(scheme-id else) any . each-any)))) e32da@cls))) (set! e32b5@build-one (lambda (e32cc@cls e32cd@k) ((lambda (e32d0@t) ((lambda (e32d2@ls/false) (if e32d2@ls/false (apply (lambda (e32d4@d* e32d5@e e32d6@e*) (list 'if (list 'memv 't (list 'quote e32d4@d*)) (cons 'begin (cons e32d5@e e32d6@e*)) e32cd@k)) e32d2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e32d0@t))) (e2ef6@syntax-dispatch e32d0@t '(each-any any . each-any)))) e32cc@cls))) ((lambda (e32b6@t) ((lambda (e32b8@ls/false) (if e32b8@ls/false (apply (lambda (e32ba@expr) (e2eac@bless (cons 'let (cons (list (list 't e32ba@expr)) '((if #f #f)))))) e32b8@ls/false) ((lambda (e32bc@t) ((lambda (e32be@ls/false) (if e32be@ls/false (apply (lambda (e32c0@expr e32c1@cls e32c2@cls*) (e2eac@bless (list 'let (list (list 't e32c0@expr)) ((letrec ((e32c6@f (lambda (e32c8@cls e32c9@cls*) (if (null? e32c9@cls*) (e32b3@build-last e32c8@cls) (e32b5@build-one e32c8@cls (e32c6@f (car e32c9@cls*) (cdr e32c9@cls*))))))) e32c6@f) e32c1@cls e32c2@cls*)))) e32be@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e32bc@t))) (e2ef6@syntax-dispatch e32bc@t '(_ any any . each-any)))) e32b6@t))) (e2ef6@syntax-dispatch e32b6@t '(_ any)))) e32b0@e))) '#f '#f))) (set! e2ea6@quote-transformer (lambda (e32e8@e e32e9@r e32ea@mr) ((lambda (e32ee@t) ((lambda (e32f0@ls/false) (if e32f0@ls/false (apply (lambda (e32f2@datum) (list 'quote (e2d01@stx->datum e32f2@datum))) e32f0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e32ee@t))) (e2ef6@syntax-dispatch e32ee@t '(_ any)))) e32e8@e))) (set! e2ea8@case-lambda-transformer (lambda (e32f4@e e32f5@r e32f6@mr) ((lambda (e32fa@t) ((lambda (e32fc@ls/false) (if e32fc@ls/false (apply (lambda (e32fe@fmls* e32ff@b* e3300@b**) (call-with-values (lambda () (e2f20@chi-lambda-clause* e32f4@e e32fe@fmls* (map cons e32ff@b* e3300@b**) e32f5@r e32f6@mr)) (lambda (e3308@e3305 e3309@e3307) ((lambda (e330c@body* e330d@fmls*) (e2c48@e2b89@build-case-lambda '#f e330d@fmls* e330c@body*)) e3309@e3307 e3308@e3305)))) e32fc@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e32fa@t))) (e2ef6@syntax-dispatch e32fa@t '(_ . #(each (any any . each-any)))))) e32f4@e))) (set! e2eaa@lambda-transformer (lambda (e3310@e e3311@r e3312@mr) ((lambda (e3316@t) ((lambda (e3318@ls/false) (if e3318@ls/false (apply (lambda (e331a@fmls e331b@b e331c@b*) (call-with-values (lambda () (e2f1e@chi-lambda-clause e3310@e e331a@fmls (cons e331b@b e331c@b*) e3311@r e3312@mr)) (lambda (e3324@e3321 e3325@e3323) ((lambda (e3328@body e3329@fmls) (e2c47@e2b87@build-lambda '#f e3329@fmls e3328@body)) e3325@e3323 e3324@e3321)))) e3318@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3316@t))) (e2ef6@syntax-dispatch e3316@t '(_ any any . each-any)))) e3310@e))) (set! e2eac@bless (lambda (e332c@x) (e2cd3@mkstx ((letrec ((e332e@f (lambda (e3330@x) (if (e2cb3@stx? e3330@x) e3330@x (if (pair? e3330@x) (cons (e332e@f (car e3330@x)) (e332e@f (cdr e3330@x))) (if (symbol? e3330@x) (e2e80@scheme-stx e3330@x) (if (vector? e3330@x) (vector-map e332e@f e3330@x) e3330@x))))))) e332e@f) e332c@x) '() '() '()))) (set! e2eae@with-syntax-macro (lambda (e3332@e) ((lambda (e3334@t) ((lambda (e3336@ls/false) (if e3336@ls/false (apply (lambda (e3338@pat* e3339@expr* e333a@b e333b@b*) ((lambda (e3340@idn*) (begin (e2f1c@verify-formals (map car e3340@idn*) e3332@e) ((lambda (e3342@t*) (e2eac@bless (list 'let (map list e3342@t* e3339@expr*) ((letrec ((e3344@f (lambda (e3346@pat* e3347@t*) (if (null? e3346@pat*) (cons 'begin (cons '#f (cons e333a@b e333b@b*))) (list 'syntax-case (car e3347@t*) '() (list (car e3346@pat*) (e3344@f (cdr e3346@pat*) (cdr e3347@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car e3346@pat*)) (car e3347@t*)))))))) e3344@f) e3338@pat* e3342@t*)))) (e2fcd@generate-temporaries e3339@expr*)))) ((letrec ((e334a@f (lambda (e334c@pat*) (if (null? e334c@pat*) '() (call-with-values (lambda () (e2ef4@convert-pattern (car e334c@pat*) '())) (lambda (e3352@e334f e3353@e3351) ((lambda (e3356@idn* e3357@pat) (append e3356@idn* (e334a@f (cdr e334c@pat*)))) e3353@e3351 e3352@e334f))))))) e334a@f) e3338@pat*))) e3336@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3334@t))) (e2ef6@syntax-dispatch e3334@t '(_ #(each (any any)) any . each-any)))) e3332@e))) (set! e2eb0@invalid-fmls-error (lambda (e335a@stx e335b@fmls) ((lambda (e335e@t) ((lambda (e3360@ls/false) (if e3360@ls/false (apply (lambda (e3362@id* e3363@last) ((letrec ((e3366@f (lambda (e3368@id*) (if (null? e3368@id*) (values) (if (not (e2ceb@id? (car e3368@id*))) (e2fdf@syntax-violation '#f '"not an identifier" e335a@stx (car e3368@id*)) (begin (e3366@f (cdr e3368@id*)) (if (e2cf9@bound-id-member? (car e3368@id*) (cdr e3368@id*)) (e2fdf@syntax-violation '#f '"duplicate binding" e335a@stx (car e3368@id*)) (void)))))))) e3366@f) (if (e2ceb@id? e3363@last) (cons e3363@last e3362@id*) (if (e2ce1@syntax-null? e3363@last) e3362@id* (e2fdf@syntax-violation '#f '"not an identifier" e335a@stx e3363@last))))) e3360@ls/false) ((lambda (e336a@t) ((lambda (e336c@ls/false) (if e336c@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"malformed binding form" e335a@stx e335b@fmls)) e336c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e336a@t))) (e2ef6@syntax-dispatch e336a@t '_))) e335e@t))) (e2ef6@syntax-dispatch e335e@t '#(each+ any () any)))) e335b@fmls))) (set! e2eb2@let-macro (lambda (e336e@stx) ((lambda (e3370@t) ((lambda (e3372@ls/false) (if e3372@ls/false (apply (lambda (e3374@lhs* e3375@rhs* e3376@b e3377@b*) (if (e2cf5@valid-bound-ids? e3374@lhs*) (e2eac@bless (cons (cons 'lambda (cons e3374@lhs* (cons e3376@b e3377@b*))) e3375@rhs*)) (e2eb0@invalid-fmls-error e336e@stx e3374@lhs*))) e3372@ls/false) ((lambda (e337c@t) ((lambda (e337e@ls/false) (if (and e337e@ls/false (apply (lambda (e3380@f e3381@lhs* e3382@rhs* e3383@b e3384@b*) (e2ceb@id? e3380@f)) e337e@ls/false)) (apply (lambda (e338a@f e338b@lhs* e338c@rhs* e338d@b e338e@b*) (if (e2cf5@valid-bound-ids? e338b@lhs*) (e2eac@bless (cons (list 'letrec (list (list e338a@f (cons 'lambda (cons e338b@lhs* (cons e338d@b e338e@b*))))) e338a@f) e338c@rhs*)) (e2eb0@invalid-fmls-error e336e@stx e338b@lhs*))) e337e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e337c@t))) (e2ef6@syntax-dispatch e337c@t '(_ any #(each (any any)) any . each-any)))) e3370@t))) (e2ef6@syntax-dispatch e3370@t '(_ #(each (any any)) any . each-any)))) e336e@stx))) (set! e2eb4@let-values-macro (lambda (e3394@stx) ((lambda (e3397@rename e3399@rename*) (begin (set! e3397@rename (lambda (e33fc@x e33fd@old* e33fe@new*) (begin (if (not (e2ceb@id? e33fc@x)) (e2fdf@syntax-violation '#f '"not an indentifier" e3394@stx e33fc@x) (void)) (if (e2cf9@bound-id-member? e33fc@x e33fd@old*) (e2fdf@syntax-violation '#f '"duplicate binding" e3394@stx e33fc@x) (void)) ((lambda (e3402@y) (values e3402@y (cons e33fc@x e33fd@old*) (cons e3402@y e33fe@new*))) (gensym (e2fe5@syntax->datum e33fc@x)))))) (set! e3399@rename* (lambda (e33ea@x* e33eb@old* e33ec@new*) (if (null? e33ea@x*) (values '() e33eb@old* e33ec@new*) (call-with-values (lambda () (e3397@rename (car e33ea@x*) e33eb@old* e33ec@new*)) (lambda (e33f0@x e33f1@old* e33f2@new*) (call-with-values (lambda () (e3399@rename* (cdr e33ea@x*) e33f1@old* e33f2@new*)) (lambda (e33f6@x* e33f7@old* e33f8@new*) (values (cons e33f0@x e33f6@x*) e33f7@old* e33f8@new*)))))))) ((lambda (e339a@t) ((lambda (e339c@ls/false) (if e339c@ls/false (apply (lambda (e339e@b e339f@b*) (cons* (e2eac@bless 'let) '() e339e@b e339f@b*)) e339c@ls/false) ((lambda (e33a2@t) ((lambda (e33a4@ls/false) (if e33a4@ls/false (apply (lambda (e33a6@lhs* e33a7@rhs* e33a8@b e33a9@b*) (e2eac@bless ((letrec ((e33ae@f (lambda (e33b0@lhs* e33b1@rhs* e33b2@old* e33b3@new*) (if (null? e33b0@lhs*) (cons 'let (cons (map list e33b2@old* e33b3@new*) (cons e33a8@b e33a9@b*))) ((lambda (e33b8@t) ((lambda (e33ba@ls/false) (if e33ba@ls/false (apply (lambda (e33bc@x*) (call-with-values (lambda () (e3399@rename* e33bc@x* e33b2@old* e33b3@new*)) (lambda (e33c4@e33bf e33c5@e33c1 e33c6@e33c3) ((lambda (e33ca@new* e33cb@old* e33cc@y*) (list 'call-with-values (list 'lambda '() (car e33b1@rhs*)) (list 'lambda e33cc@y* (e33ae@f (cdr e33b0@lhs*) (cdr e33b1@rhs*) e33cb@old* e33ca@new*)))) e33c6@e33c3 e33c5@e33c1 e33c4@e33bf)))) e33ba@ls/false) ((lambda (e33d0@t) ((lambda (e33d2@ls/false) (if e33d2@ls/false (apply (lambda (e33d4@x* e33d5@x) (call-with-values (lambda () (e3397@rename e33d5@x e33b2@old* e33b3@new*)) (lambda (e33d8@y e33d9@old* e33da@new*) (call-with-values (lambda () (e3399@rename* e33d4@x* e33d9@old* e33da@new*)) (lambda (e33de@y* e33df@old* e33e0@new*) (list 'call-with-values (list 'lambda '() (car e33b1@rhs*)) (list 'lambda (append e33de@y* e33d8@y) (e33ae@f (cdr e33b0@lhs*) (cdr e33b1@rhs*) e33df@old* e33e0@new*)))))))) e33d2@ls/false) ((lambda (e33e4@t) ((lambda (e33e6@ls/false) (if e33e6@ls/false (apply (lambda (e33e8@others) (e2fdf@syntax-violation '#f '"malformed bindings" e3394@stx e33e8@others)) e33e6@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e33e4@t))) (e2ef6@syntax-dispatch e33e4@t 'any))) e33d0@t))) (e2ef6@syntax-dispatch e33d0@t '#(each+ any () any)))) e33b8@t))) (e2ef6@syntax-dispatch e33b8@t 'each-any))) (car e33b0@lhs*)))))) e33ae@f) e33a6@lhs* e33a7@rhs* '() '()))) e33a4@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e33a2@t))) (e2ef6@syntax-dispatch e33a2@t '(_ #(each (any any)) any . each-any)))) e339a@t))) (e2ef6@syntax-dispatch e339a@t '(_ () any . each-any)))) e3394@stx))) '#f '#f))) (set! e2eb6@let*-values-macro (lambda (e3404@stx) ((lambda (e3407@check) (begin (set! e3407@check (lambda (e3436@x*) (if (not (null? e3436@x*)) ((lambda (e3438@x) (begin (if (not (e2ceb@id? e3438@x)) (e2fdf@syntax-violation '#f '"not an identifier" e3404@stx e3438@x) (void)) (e3407@check (cdr e3436@x*)) (if (e2cf9@bound-id-member? e3438@x (cdr e3436@x*)) (e2fdf@syntax-violation '#f '"duplicate identifier" e3404@stx e3438@x) (void)))) (car e3436@x*)) (void)))) ((lambda (e3408@t) ((lambda (e340a@ls/false) (if e340a@ls/false (apply (lambda (e340c@b e340d@b*) (cons* (e2eac@bless 'let) '() e340c@b e340d@b*)) e340a@ls/false) ((lambda (e3410@t) ((lambda (e3412@ls/false) (if e3412@ls/false (apply (lambda (e3414@lhs* e3415@rhs* e3416@b e3417@b*) (e2eac@bless ((letrec ((e341c@f (lambda (e341e@lhs* e341f@rhs*) (if (null? e341e@lhs*) (cons 'begin (cons e3416@b e3417@b*)) ((lambda (e3422@t) ((lambda (e3424@ls/false) (if e3424@ls/false (apply (lambda (e3426@x*) (begin (e3407@check e3426@x*) (list 'call-with-values (list 'lambda '() (car e341f@rhs*)) (list 'lambda e3426@x* (e341c@f (cdr e341e@lhs*) (cdr e341f@rhs*)))))) e3424@ls/false) ((lambda (e3428@t) ((lambda (e342a@ls/false) (if e342a@ls/false (apply (lambda (e342c@x* e342d@x) (begin (e3407@check (cons e342d@x e342c@x*)) (list 'call-with-values (list 'lambda '() (car e341f@rhs*)) (list 'lambda (append e342c@x* e342d@x) (e341c@f (cdr e341e@lhs*) (cdr e341f@rhs*)))))) e342a@ls/false) ((lambda (e3430@t) ((lambda (e3432@ls/false) (if e3432@ls/false (apply (lambda (e3434@others) (e2fdf@syntax-violation '#f '"malformed bindings" e3404@stx e3434@others)) e3432@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3430@t))) (e2ef6@syntax-dispatch e3430@t 'any))) e3428@t))) (e2ef6@syntax-dispatch e3428@t '#(each+ any () any)))) e3422@t))) (e2ef6@syntax-dispatch e3422@t 'each-any))) (car e341e@lhs*)))))) e341c@f) e3414@lhs* e3415@rhs*))) e3412@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3410@t))) (e2ef6@syntax-dispatch e3410@t '(_ #(each (any any)) any . each-any)))) e3408@t))) (e2ef6@syntax-dispatch e3408@t '(_ () any . each-any)))) e3404@stx))) '#f))) (set! e2eb8@trace-lambda-macro (lambda (e343a@stx) ((lambda (e343c@t) ((lambda (e343e@ls/false) (if e343e@ls/false (apply (lambda (e3440@who e3441@fmls e3442@b e3443@b*) (if (e2cf5@valid-bound-ids? e3441@fmls) (e2eac@bless (list 'make-traced-procedure (list 'quote e3440@who) (cons 'lambda (cons e3441@fmls (cons e3442@b e3443@b*))))) (e2eb0@invalid-fmls-error e343a@stx e3441@fmls))) e343e@ls/false) ((lambda (e3448@t) ((lambda (e344a@ls/false) (if e344a@ls/false (apply (lambda (e344c@who e344d@fmls e344e@last e344f@b e3450@b*) (if (e2cf5@valid-bound-ids? (cons e344e@last e344d@fmls)) (e2eac@bless (list 'make-traced-procedure (list 'quote e344c@who) (cons 'lambda (cons (append e344d@fmls e344e@last) (cons e344f@b e3450@b*))))) (e2eb0@invalid-fmls-error e343a@stx (append e344d@fmls e344e@last)))) e344a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3448@t))) (e2ef6@syntax-dispatch e3448@t '(_ any #(each+ any () any) any . each-any)))) e343c@t))) (e2ef6@syntax-dispatch e343c@t '(_ any each-any any . each-any)))) e343a@stx))) (set! e2eba@trace-define-macro (lambda (e3456@stx) ((lambda (e3458@t) ((lambda (e345a@ls/false) (if e345a@ls/false (apply (lambda (e345c@who e345d@fmls e345e@b e345f@b*) (if (e2cf5@valid-bound-ids? e345d@fmls) (e2eac@bless (list 'define e345c@who (list 'make-traced-procedure (list 'quote e345c@who) (cons 'lambda (cons e345d@fmls (cons e345e@b e345f@b*)))))) (e2eb0@invalid-fmls-error e3456@stx e345d@fmls))) e345a@ls/false) ((lambda (e3464@t) ((lambda (e3466@ls/false) (if e3466@ls/false (apply (lambda (e3468@who e3469@fmls e346a@last e346b@b e346c@b*) (if (e2cf5@valid-bound-ids? (cons e346a@last e3469@fmls)) (e2eac@bless (list 'define e3468@who (list 'make-traced-procedure (list 'quote e3468@who) (cons 'lambda (cons (append e3469@fmls e346a@last) (cons e346b@b e346c@b*)))))) (e2eb0@invalid-fmls-error e3456@stx (append e3469@fmls e346a@last)))) e3466@ls/false) ((lambda (e3472@t) ((lambda (e3474@ls/false) (if e3474@ls/false (apply (lambda (e3476@who e3477@expr) (if (e2ceb@id? e3476@who) (e2eac@bless (list 'define e3476@who (list 'let (list (list 'v e3477@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote e3476@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (e2fdf@syntax-violation '#f '"invalid name" e3456@stx))) e3474@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3472@t))) (e2ef6@syntax-dispatch e3472@t '(_ any any)))) e3464@t))) (e2ef6@syntax-dispatch e3464@t '(_ (any . #(each+ any () any)) any . each-any)))) e3458@t))) (e2ef6@syntax-dispatch e3458@t '(_ (any . each-any) any . each-any)))) e3456@stx))) (set! e2ebc@trace-define-syntax-macro (lambda (e347a@stx) ((lambda (e347c@t) ((lambda (e347e@ls/false) (if e347e@ls/false (apply (lambda (e3480@who e3481@expr) (if (e2ceb@id? e3480@who) (e2eac@bless (list 'define-syntax e3480@who (list 'make-traced-macro (list 'quote e3480@who) e3481@expr))) (e2fdf@syntax-violation '#f '"invalid name" e347a@stx))) e347e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e347c@t))) (e2ef6@syntax-dispatch e347c@t '(_ any any)))) e347a@stx))) (set! e2ebe@trace-let/rec-syntax (lambda (e3484@who) (lambda (e3486@stx) ((lambda (e3488@t) ((lambda (e348a@ls/false) (if e348a@ls/false (apply (lambda (e348c@lhs* e348d@rhs* e348e@b e348f@b*) (if (e2cf5@valid-bound-ids? e348c@lhs*) ((lambda (e3494@rhs*) (e2eac@bless (cons e3484@who (cons (map list e348c@lhs* e3494@rhs*) (cons e348e@b e348f@b*))))) (map (lambda (e3496@lhs e3497@rhs) (list 'make-traced-macro (list 'quote e3496@lhs) e3497@rhs)) e348c@lhs* e348d@rhs*)) (e2eb0@invalid-fmls-error e3486@stx e348c@lhs*))) e348a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3488@t))) (e2ef6@syntax-dispatch e3488@t '(_ #(each (any any)) any . each-any)))) e3486@stx)))) (set! e2ec0@trace-let-syntax-macro (e2ebe@trace-let/rec-syntax 'let-syntax)) (set! e2ec2@trace-letrec-syntax-macro (e2ebe@trace-let/rec-syntax 'letrec-syntax)) (set! e2ec4@guard-macro (lambda (e349a@x) ((lambda (e349d@gen-clauses) (begin (set! e349d@gen-clauses (lambda (e34b4@con e34b5@outerk e34b6@clause*) ((lambda (e34bb@f e34bd@f*) (begin (set! e34bb@f (lambda (e34f4@x e34f5@k) ((lambda (e34f8@t) ((lambda (e34fa@ls/false) (if e34fa@ls/false (apply (lambda (e34fc@e e34fd@p) ((lambda (e3500@t) (list 'let (list (list e3500@t e34fc@e)) (list 'if e3500@t (list e34fd@p e3500@t) e34f5@k))) (gensym))) e34fa@ls/false) ((lambda (e3502@t) ((lambda (e3504@ls/false) (if e3504@ls/false (apply (lambda (e3506@e) ((lambda (e3508@t) (list 'let (list (list e3508@t e3506@e)) (list 'if e3508@t e3508@t e34f5@k))) (gensym))) e3504@ls/false) ((lambda (e350a@t) ((lambda (e350c@ls/false) (if e350c@ls/false (apply (lambda (e350e@e e350f@v e3510@v*) (list 'if e350e@e (cons 'begin (cons e350f@v e3510@v*)) e34f5@k)) e350c@ls/false) ((lambda (e3514@t) ((lambda (e3516@ls/false) (if e3516@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid guard clause" e34f4@x)) e3516@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3514@t))) (e2ef6@syntax-dispatch e3514@t '_))) e350a@t))) (e2ef6@syntax-dispatch e350a@t '(any any . each-any)))) e3502@t))) (e2ef6@syntax-dispatch e3502@t '(any)))) e34f8@t))) (e2ef6@syntax-dispatch e34f8@t '(any #(scheme-id =>) any)))) e34f4@x))) (set! e34bd@f* (lambda (e34ca@x*) ((lambda (e34cc@t) ((lambda (e34ce@ls/false) (if e34ce@ls/false (apply (lambda () ((lambda (e34d0@g) (values (list e34d0@g (list 'lambda '() (list 'raise-continuable e34b4@con))) e34d0@g)) (gensym))) e34ce@ls/false) ((lambda (e34d2@t) ((lambda (e34d4@ls/false) (if e34d4@ls/false (apply (lambda (e34d6@e e34d7@e*) (values (cons 'begin (cons e34d6@e e34d7@e*)) '#f)) e34d4@ls/false) ((lambda (e34da@t) ((lambda (e34dc@ls/false) (if e34dc@ls/false (apply (lambda (e34de@cls e34df@cls*) (call-with-values (lambda () (e34bd@f* e34df@cls*)) (lambda (e34e6@e34e3 e34e7@e34e5) ((lambda (e34ea@g e34eb@e) (values (e34bb@f e34de@cls e34eb@e) e34ea@g)) e34e7@e34e5 e34e6@e34e3)))) e34dc@ls/false) ((lambda (e34ee@t) ((lambda (e34f0@ls/false) (if e34f0@ls/false (apply (lambda (e34f2@others) (e2fdf@syntax-violation '#f '"invalid guard clause" e34f2@others)) e34f0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e34ee@t))) (e2ef6@syntax-dispatch e34ee@t 'any))) e34da@t))) (e2ef6@syntax-dispatch e34da@t '(any . any)))) e34d2@t))) (e2ef6@syntax-dispatch e34d2@t '((#(scheme-id else) any . each-any))))) e34cc@t))) (e2ef6@syntax-dispatch e34cc@t '()))) e34ca@x*))) (call-with-values (lambda () (e34bd@f* e34b6@clause*)) (lambda (e34c2@e34bf e34c3@e34c1) ((lambda (e34c6@raisek e34c7@code) (if e34c6@raisek (list (list 'call/cc (list 'lambda (list e34c6@raisek) (list e34b5@outerk (list 'lambda '() e34c7@code))))) (list e34b5@outerk (list 'lambda '() e34c7@code)))) e34c3@e34c1 e34c2@e34bf))))) '#f '#f))) ((lambda (e349e@t) ((lambda (e34a0@ls/false) (if (and e34a0@ls/false (apply (lambda (e34a2@con e34a3@clause* e34a4@b e34a5@b*) (e2ceb@id? e34a2@con)) e34a0@ls/false)) (apply (lambda (e34aa@con e34ab@clause* e34ac@b e34ad@b*) ((lambda (e34b2@outerk) (e2eac@bless (list (list 'call/cc (list 'lambda (list e34b2@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list e34aa@con) (e349d@gen-clauses e34aa@con e34b2@outerk e34ab@clause*)) (cons 'lambda (cons '() (cons e34ac@b e34ad@b*)))))))))) (gensym))) e34a0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e349e@t))) (e2ef6@syntax-dispatch e349e@t '(_ (any . each-any) any . each-any)))) e349a@x))) '#f))) (set! e2ec6@define-enumeration-macro (lambda (e3518@stx) ((lambda (e351b@set? e351d@remove-dups) (begin (set! e351b@set? (lambda (e3534@x) (or (null? e3534@x) (and (not (memq (car e3534@x) (cdr e3534@x))) (e351b@set? (cdr e3534@x)))))) (set! e351d@remove-dups (lambda (e3532@ls) (if (null? e3532@ls) '() (cons (car e3532@ls) (e351d@remove-dups (remq (car e3532@ls) (cdr e3532@ls))))))) ((lambda (e351e@t) ((lambda (e3520@ls/false) (if (and e3520@ls/false (apply (lambda (e3522@name e3523@id* e3524@maker) (and (e2ceb@id? e3522@name) (e2ceb@id? e3524@maker) (for-all e2ceb@id? e3523@id*))) e3520@ls/false)) (apply (lambda (e3528@name e3529@id* e352a@maker) ((lambda (e352e@name* e352f@mk) (e2eac@bless (list 'begin (list 'define e352f@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote e352e@name*)))) (list 'define-syntax e3528@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote e352e@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote e3528@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax e352a@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote e352a@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote e352e@name*)) (cons 'syntax-violation (cons (list 'quote e352a@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons e352f@mk '('(n* ...)))))))))))) (e351d@remove-dups (e2fe5@syntax->datum e3529@id*)) (gensym))) e3520@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e351e@t))) (e2ef6@syntax-dispatch e351e@t '(_ any each-any any)))) e3518@stx))) '#f '#f))) (set! e2ec8@time-macro (lambda (e3536@stx) ((lambda (e3538@t) ((lambda (e353a@ls/false) (if e353a@ls/false (apply (lambda (e353c@expr) (e2eac@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() e353c@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) e353a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3538@t))) (e2ef6@syntax-dispatch e3538@t '(_ any)))) e3536@stx))) (set! e2eca@delay-macro (lambda (e353e@stx) ((lambda (e3540@t) ((lambda (e3542@ls/false) (if e3542@ls/false (apply (lambda (e3544@expr) (e2eac@bless (list 'make-promise (list 'lambda '() e3544@expr)))) e3542@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3540@t))) (e2ef6@syntax-dispatch e3540@t '(_ any)))) e353e@stx))) (set! e2ecc@assert-macro (lambda (e3546@stx) ((lambda (e3548@t) ((lambda (e354a@ls/false) (if e354a@ls/false (apply (lambda (e354c@expr) ((lambda (e354e@pos) (e2eac@bless (list 'unless e354c@expr (list 'assertion-error (list 'quote e354c@expr) (list 'quote e354e@pos))))) (or (e2fd7@expression-position e3546@stx) (e2fd7@expression-position e354c@expr)))) e354a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3548@t))) (e2ef6@syntax-dispatch e3548@t '(_ any)))) e3546@stx))) (set! e2ece@endianness-macro (lambda (e3550@stx) ((lambda (e3552@t) ((lambda (e3554@ls/false) (if e3554@ls/false (apply (lambda (e3556@e) ((lambda (e3558@t) (if (memv e3558@t '(little)) (e2eac@bless ''little) (if (memv e3558@t '(big)) (e2eac@bless ''big) (e2fdf@syntax-violation '#f '"endianness must be big or little" e3550@stx)))) (e2fe5@syntax->datum e3556@e))) e3554@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3552@t))) (e2ef6@syntax-dispatch e3552@t '(_ any)))) e3550@stx))) (set! e2ed0@identifier-syntax-macro (lambda (e355a@stx) ((lambda (e355c@t) ((lambda (e355e@ls/false) (if e355e@ls/false (apply (lambda (e3560@expr) (e2eac@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax e3560@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax e3560@expr) '((syntax (e* ...)))))))))) e355e@ls/false) ((lambda (e3562@t) ((lambda (e3564@ls/false) (if (and e3564@ls/false (apply (lambda (e3566@id1 e3567@expr1 e3568@id2 e3569@expr2 e356a@expr3) (and (e2ceb@id? e3566@id1) (e2ceb@id? e3568@id2) (e2ceb@id? e3569@expr2))) e3564@ls/false)) (apply (lambda (e3570@id1 e3571@expr1 e3572@id2 e3573@expr2 e3574@expr3) (e2eac@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax e3571@expr1)) (list (list 'set! 'id e3573@expr2) (list 'syntax e3574@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons e3571@expr1 '(e* ...))))))))) e3564@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3562@t))) (e2ef6@syntax-dispatch e3562@t '(_ (any any) ((#(scheme-id set!) any any) any))))) e355c@t))) (e2ef6@syntax-dispatch e355c@t '(_ any)))) e355a@stx))) (set! e2ed2@do-macro (lambda (e357a@stx) ((lambda (e357d@bind) (begin (set! e357d@bind (lambda (e3594@x) ((lambda (e3596@t) ((lambda (e3598@ls/false) (if e3598@ls/false (apply (lambda (e359a@x e359b@init) (list e359a@x e359b@init e359a@x)) e3598@ls/false) ((lambda (e359e@t) ((lambda (e35a0@ls/false) (if e35a0@ls/false (apply (lambda (e35a2@x e35a3@init e35a4@step) (list e35a2@x e35a3@init e35a4@step)) e35a0@ls/false) ((lambda (e35a8@t) ((lambda (e35aa@ls/false) (if e35aa@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid binding" e357a@stx)) e35aa@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e35a8@t))) (e2ef6@syntax-dispatch e35a8@t '_))) e359e@t))) (e2ef6@syntax-dispatch e359e@t '(any any any)))) e3596@t))) (e2ef6@syntax-dispatch e3596@t '(any any)))) e3594@x))) ((lambda (e357e@t) ((lambda (e3580@ls/false) (if e3580@ls/false (apply (lambda (e3582@binding* e3583@test e3584@expr* e3585@command*) ((lambda (e358a@t) ((lambda (e358c@ls/false) (if e358c@ls/false (apply (lambda (e358e@x* e358f@init* e3590@step*) (if (e2cf5@valid-bound-ids? e358e@x*) (e2eac@bless (list 'letrec (list (list 'loop (list 'lambda e358e@x* (list 'if e3583@test (cons 'begin (cons '(if #f #f) e3584@expr*)) (cons 'begin (append e3585@command* (list (cons 'loop e3590@step*)))))))) (cons 'loop e358f@init*))) (e2fdf@syntax-violation '#f '"invalid bindings" e357a@stx))) e358c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e358a@t))) (e2ef6@syntax-dispatch e358a@t '#(each (any any any))))) (map e357d@bind e3582@binding*))) e3580@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e357e@t))) (e2ef6@syntax-dispatch e357e@t '(_ each-any (any . each-any) . each-any)))) e357a@stx))) '#f))) (set! e2ed4@let*-macro (lambda (e35ac@stx) ((lambda (e35ae@t) ((lambda (e35b0@ls/false) (if (and e35b0@ls/false (apply (lambda (e35b2@lhs* e35b3@rhs* e35b4@b e35b5@b*) (for-all e2ceb@id? e35b2@lhs*)) e35b0@ls/false)) (apply (lambda (e35ba@lhs* e35bb@rhs* e35bc@b e35bd@b*) (e2eac@bless ((letrec ((e35c2@f (lambda (e35c4@x*) (if (null? e35c4@x*) (cons 'let (cons '() (cons e35bc@b e35bd@b*))) (list 'let (list (car e35c4@x*)) (e35c2@f (cdr e35c4@x*))))))) e35c2@f) (map list e35ba@lhs* e35bb@rhs*)))) e35b0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e35ae@t))) (e2ef6@syntax-dispatch e35ae@t '(_ #(each (any any)) any . each-any)))) e35ac@stx))) (set! e2ed6@or-macro (lambda (e35c6@stx) ((lambda (e35c8@t) ((lambda (e35ca@ls/false) (if e35ca@ls/false (apply (lambda () '#f) e35ca@ls/false) ((lambda (e35cc@t) ((lambda (e35ce@ls/false) (if e35ce@ls/false (apply (lambda (e35d0@e e35d1@e*) (e2eac@bless ((letrec ((e35d4@f (lambda (e35d6@e e35d7@e*) (if (null? e35d7@e*) (list 'begin '#f e35d6@e) (list 'let (list (list 't e35d6@e)) (list 'if 't 't (e35d4@f (car e35d7@e*) (cdr e35d7@e*)))))))) e35d4@f) e35d0@e e35d1@e*))) e35ce@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e35cc@t))) (e2ef6@syntax-dispatch e35cc@t '(_ any . each-any)))) e35c8@t))) (e2ef6@syntax-dispatch e35c8@t '(_)))) e35c6@stx))) (set! e2ed8@and-macro (lambda (e35da@stx) ((lambda (e35dc@t) ((lambda (e35de@ls/false) (if e35de@ls/false (apply (lambda () '#t) e35de@ls/false) ((lambda (e35e0@t) ((lambda (e35e2@ls/false) (if e35e2@ls/false (apply (lambda (e35e4@e e35e5@e*) (e2eac@bless ((letrec ((e35e8@f (lambda (e35ea@e e35eb@e*) (if (null? e35eb@e*) (list 'begin '#f e35ea@e) (cons 'if (cons e35ea@e (cons (e35e8@f (car e35eb@e*) (cdr e35eb@e*)) '(#f)))))))) e35e8@f) e35e4@e e35e5@e*))) e35e2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e35e0@t))) (e2ef6@syntax-dispatch e35e0@t '(_ any . each-any)))) e35dc@t))) (e2ef6@syntax-dispatch e35dc@t '(_)))) e35da@stx))) (set! e2eda@cond-macro (lambda (e35ee@stx) ((lambda (e35f0@t) ((lambda (e35f2@ls/false) (if e35f2@ls/false (apply (lambda (e35f4@cls e35f5@cls*) (e2eac@bless ((letrec ((e35f8@f (lambda (e35fa@cls e35fb@cls*) (if (null? e35fb@cls*) ((lambda (e35fe@t) ((lambda (e3600@ls/false) (if e3600@ls/false (apply (lambda (e3602@e e3603@e*) (cons 'begin (cons e3602@e e3603@e*))) e3600@ls/false) ((lambda (e3606@t) ((lambda (e3608@ls/false) (if e3608@ls/false (apply (lambda (e360a@e e360b@p) (list 'let (list (list 't e360a@e)) (list 'if 't (cons e360b@p '(t))))) e3608@ls/false) ((lambda (e360e@t) ((lambda (e3610@ls/false) (if e3610@ls/false (apply (lambda (e3612@e) (cons 'or (cons e3612@e '((if #f #f))))) e3610@ls/false) ((lambda (e3614@t) ((lambda (e3616@ls/false) (if e3616@ls/false (apply (lambda (e3618@e e3619@e*) (list 'if e3618@e (cons 'begin e3619@e*))) e3616@ls/false) ((lambda (e361c@t) ((lambda (e361e@ls/false) (if e361e@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid last clause" e35ee@stx)) e361e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e361c@t))) (e2ef6@syntax-dispatch e361c@t '_))) e3614@t))) (e2ef6@syntax-dispatch e3614@t '(any . each-any)))) e360e@t))) (e2ef6@syntax-dispatch e360e@t '(any)))) e3606@t))) (e2ef6@syntax-dispatch e3606@t '(any #(scheme-id =>) any)))) e35fe@t))) (e2ef6@syntax-dispatch e35fe@t '(#(scheme-id else) any . each-any)))) e35fa@cls) ((lambda (e3620@t) ((lambda (e3622@ls/false) (if e3622@ls/false (apply (lambda (e3624@e e3625@e*) (e2fdf@syntax-violation '#f '"incorrect position of keyword else" e35ee@stx)) e3622@ls/false) ((lambda (e3628@t) ((lambda (e362a@ls/false) (if e362a@ls/false (apply (lambda (e362c@e e362d@p) (list 'let (list (list 't e362c@e)) (list 'if 't (cons e362d@p '(t)) (e35f8@f (car e35fb@cls*) (cdr e35fb@cls*))))) e362a@ls/false) ((lambda (e3630@t) ((lambda (e3632@ls/false) (if e3632@ls/false (apply (lambda (e3634@e) (list 'or e3634@e (e35f8@f (car e35fb@cls*) (cdr e35fb@cls*)))) e3632@ls/false) ((lambda (e3636@t) ((lambda (e3638@ls/false) (if e3638@ls/false (apply (lambda (e363a@e e363b@e*) (list 'if e363a@e (cons 'begin e363b@e*) (e35f8@f (car e35fb@cls*) (cdr e35fb@cls*)))) e3638@ls/false) ((lambda (e363e@t) ((lambda (e3640@ls/false) (if e3640@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid last clause" e35ee@stx)) e3640@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e363e@t))) (e2ef6@syntax-dispatch e363e@t '_))) e3636@t))) (e2ef6@syntax-dispatch e3636@t '(any . each-any)))) e3630@t))) (e2ef6@syntax-dispatch e3630@t '(any)))) e3628@t))) (e2ef6@syntax-dispatch e3628@t '(any #(scheme-id =>) any)))) e3620@t))) (e2ef6@syntax-dispatch e3620@t '(#(scheme-id else) any . each-any)))) e35fa@cls))))) e35f8@f) e35f4@cls e35f5@cls*))) e35f2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e35f0@t))) (e2ef6@syntax-dispatch e35f0@t '(_ any . each-any)))) e35ee@stx))) (set! e2edc@do-include (lambda (e3642@stx e3643@id e3644@filename) ((lambda (e3648@filename) (begin (if (not (and (string? e3648@filename) (e2ceb@id? e3643@id))) (e2fdf@syntax-violation '#f '"invalid syntax" e3642@stx) (void)) (cons (e2eac@bless 'begin) (with-input-from-file e3648@filename (lambda () ((letrec ((e364a@f (lambda (e364c@ls) ((lambda (e364e@x) (if (eof-object? e364e@x) (reverse e364c@ls) (e364a@f (cons (e2cc9@datum->stx e3643@id e364e@x) e364c@ls)))) (e2888@e27a5@read-annotated))))) e364a@f) '())))))) (e2d01@stx->datum e3644@filename)))) (set! e2ede@include-macro (lambda (e3650@e) ((lambda (e3652@t) ((lambda (e3654@ls/false) (if e3654@ls/false (apply (lambda (e3656@id e3657@filename) (e2edc@do-include e3650@e e3656@id e3657@filename)) e3654@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3652@t))) (e2ef6@syntax-dispatch e3652@t '(any any)))) e3650@e))) (set! e2ee0@include-into-macro (lambda (e365a@e) ((lambda (e365c@t) ((lambda (e365e@ls/false) (if e365e@ls/false (apply (lambda (e3660@id e3661@filename) (e2edc@do-include e365a@e e3660@id e3661@filename)) e365e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e365c@t))) (e2ef6@syntax-dispatch e365c@t '(_ any any)))) e365a@e))) (set! e2ee2@syntax-rules-macro (lambda (e3664@e) ((lambda (e3666@t) ((lambda (e3668@ls/false) (if e3668@ls/false (apply (lambda (e366a@lits e366b@pat* e366c@tmp*) (begin (e2efc@verify-literals e366a@lits e3664@e) (e2eac@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons e366a@lits (map (lambda (e3670@pat e3671@tmp) ((lambda (e3674@t) ((lambda (e3676@ls/false) (if e3676@ls/false (apply (lambda (e3678@rest) (list (cons 'g e3678@rest) (list 'syntax e3671@tmp))) e3676@ls/false) ((lambda (e367a@t) ((lambda (e367c@ls/false) (if e367c@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid syntax-rules pattern" e3664@e e3670@pat)) e367c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e367a@t))) (e2ef6@syntax-dispatch e367a@t '_))) e3674@t))) (e2ef6@syntax-dispatch e3674@t '(_ . any)))) e3670@pat)) e366b@pat* e366c@tmp*)))))))) e3668@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3666@t))) (e2ef6@syntax-dispatch e3666@t '(_ each-any . #(each (any any)))))) e3664@e))) (set! e2ee4@quasiquote-macro ((lambda () ((lambda (e367f@datum e369b@quasicons* e369d@quasicons e369f@quasiappend e36a1@quasivector e36a3@vquasi e36a5@quasi) (begin (set! e367f@datum (lambda (e3780@x) (list (e2e80@scheme-stx 'quote) (e2cd3@mkstx e3780@x '() '() '())))) (set! e369b@quasicons* (lambda (e3778@x e3779@y) ((letrec ((e377c@f (lambda (e377e@x) (if (null? e377e@x) e3779@y (e369d@quasicons (car e377e@x) (e377c@f (cdr e377e@x))))))) e377c@f) e3778@x))) (set! e369d@quasicons (lambda (e3752@x e3753@y) ((lambda (e3756@t) ((lambda (e3758@ls/false) (if e3758@ls/false (apply (lambda (e375a@dy) ((lambda (e375c@t) ((lambda (e375e@ls/false) (if e375e@ls/false (apply (lambda (e3760@dx) (list (e2e80@scheme-stx 'quote) (cons e3760@dx e375a@dy))) e375e@ls/false) ((lambda (e3762@t) ((lambda (e3764@ls/false) (if e3764@ls/false (apply (lambda () ((lambda (e3766@t) ((lambda (e3768@ls/false) (if e3768@ls/false (apply (lambda () (list (e2e80@scheme-stx 'list) e3752@x)) e3768@ls/false) ((lambda (e376a@t) ((lambda (e376c@ls/false) (if e376c@ls/false (apply (lambda () (list (e2e80@scheme-stx 'cons) e3752@x e3753@y)) e376c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e376a@t))) (e2ef6@syntax-dispatch e376a@t '_))) e3766@t))) (e2ef6@syntax-dispatch e3766@t '()))) e375a@dy)) e3764@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3762@t))) (e2ef6@syntax-dispatch e3762@t '_))) e375c@t))) (e2ef6@syntax-dispatch e375c@t '(#(scheme-id quote) any)))) e3752@x)) e3758@ls/false) ((lambda (e376e@t) ((lambda (e3770@ls/false) (if e3770@ls/false (apply (lambda (e3772@stuff) (cons* (e2e80@scheme-stx 'list) e3752@x e3772@stuff)) e3770@ls/false) ((lambda (e3774@t) ((lambda (e3776@ls/false) (if e3776@ls/false (apply (lambda () (list (e2e80@scheme-stx 'cons) e3752@x e3753@y)) e3776@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3774@t))) (e2ef6@syntax-dispatch e3774@t '_))) e376e@t))) (e2ef6@syntax-dispatch e376e@t '(#(scheme-id list) . each-any)))) e3756@t))) (e2ef6@syntax-dispatch e3756@t '(#(scheme-id quote) any)))) e3753@y))) (set! e369f@quasiappend (lambda (e3738@x e3739@y) ((lambda (e373c@ls) (if (null? e373c@ls) (list (e2e80@scheme-stx 'quote) '()) (if (null? (cdr e373c@ls)) (car e373c@ls) (cons* (e2e80@scheme-stx 'append) e373c@ls)))) ((letrec ((e373e@f (lambda (e3740@x) (if (null? e3740@x) ((lambda (e3742@t) ((lambda (e3744@ls/false) (if e3744@ls/false (apply (lambda () '()) e3744@ls/false) ((lambda (e3746@t) ((lambda (e3748@ls/false) (if e3748@ls/false (apply (lambda () (list e3739@y)) e3748@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3746@t))) (e2ef6@syntax-dispatch e3746@t '_))) e3742@t))) (e2ef6@syntax-dispatch e3742@t '(#(scheme-id quote) ())))) e3739@y) ((lambda (e374a@t) ((lambda (e374c@ls/false) (if e374c@ls/false (apply (lambda () (e373e@f (cdr e3740@x))) e374c@ls/false) ((lambda (e374e@t) ((lambda (e3750@ls/false) (if e3750@ls/false (apply (lambda () (cons (car e3740@x) (e373e@f (cdr e3740@x)))) e3750@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e374e@t))) (e2ef6@syntax-dispatch e374e@t '_))) e374a@t))) (e2ef6@syntax-dispatch e374a@t '(#(scheme-id quote) ())))) (car e3740@x)))))) e373e@f) e3738@x)))) (set! e36a1@quasivector (lambda (e3706@x) ((lambda (e3708@pat-x) ((lambda (e370a@t) ((lambda (e370c@ls/false) (if e370c@ls/false (apply (lambda (e370e@x*) (list (e2e80@scheme-stx 'quote) (list->vector e370e@x*))) e370c@ls/false) ((lambda (e3710@t) ((lambda (e3712@ls/false) (if e3712@ls/false (apply (lambda () ((letrec ((e3714@f (lambda (e3716@x e3717@k) ((lambda (e371a@t) ((lambda (e371c@ls/false) (if e371c@ls/false (apply (lambda (e371e@x*) (e3717@k (map (lambda (e3720@x) (list (e2e80@scheme-stx 'quote) e3720@x)) e371e@x*))) e371c@ls/false) ((lambda (e3722@t) ((lambda (e3724@ls/false) (if e3724@ls/false (apply (lambda (e3726@x*) (e3717@k e3726@x*)) e3724@ls/false) ((lambda (e3728@t) ((lambda (e372a@ls/false) (if e372a@ls/false (apply (lambda (e372c@x e372d@y) (e3714@f e372d@y (lambda (e3730@ls) (e3717@k (cons e372c@x e3730@ls))))) e372a@ls/false) ((lambda (e3732@t) ((lambda (e3734@ls/false) (if e3734@ls/false (apply (lambda () (list (e2e80@scheme-stx 'list->vector) e3708@pat-x)) e3734@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3732@t))) (e2ef6@syntax-dispatch e3732@t '_))) e3728@t))) (e2ef6@syntax-dispatch e3728@t '(#(scheme-id cons) any any)))) e3722@t))) (e2ef6@syntax-dispatch e3722@t '(#(scheme-id list) . each-any)))) e371a@t))) (e2ef6@syntax-dispatch e371a@t '(#(scheme-id quote) each-any)))) e3716@x)))) e3714@f) e3706@x (lambda (e3736@ls) (cons* (e2e80@scheme-stx 'vector) e3736@ls)))) e3712@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3710@t))) (e2ef6@syntax-dispatch e3710@t '_))) e370a@t))) (e2ef6@syntax-dispatch e370a@t '(#(scheme-id quote) each-any)))) e3708@pat-x)) e3706@x))) (set! e36a3@vquasi (lambda (e36e4@p e36e5@lev) ((lambda (e36e8@t) ((lambda (e36ea@ls/false) (if e36ea@ls/false (apply (lambda (e36ec@p e36ed@q) ((lambda (e36f0@t) ((lambda (e36f2@ls/false) (if e36f2@ls/false (apply (lambda (e36f4@p) (if (= e36e5@lev '0) (e369b@quasicons* e36f4@p (e36a3@vquasi e36ed@q e36e5@lev)) (e369d@quasicons (e369d@quasicons (e367f@datum 'unquote) (e36a5@quasi e36f4@p (- e36e5@lev '1))) (e36a3@vquasi e36ed@q e36e5@lev)))) e36f2@ls/false) ((lambda (e36f6@t) ((lambda (e36f8@ls/false) (if e36f8@ls/false (apply (lambda (e36fa@p) (if (= e36e5@lev '0) (e369f@quasiappend e36fa@p (e36a3@vquasi e36ed@q e36e5@lev)) (e369d@quasicons (e369d@quasicons (e367f@datum 'unquote-splicing) (e36a5@quasi e36fa@p (- e36e5@lev '1))) (e36a3@vquasi e36ed@q e36e5@lev)))) e36f8@ls/false) ((lambda (e36fc@t) ((lambda (e36fe@ls/false) (if e36fe@ls/false (apply (lambda (e3700@p) (e369d@quasicons (e36a5@quasi e3700@p e36e5@lev) (e36a3@vquasi e36ed@q e36e5@lev))) e36fe@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e36fc@t))) (e2ef6@syntax-dispatch e36fc@t 'any))) e36f6@t))) (e2ef6@syntax-dispatch e36f6@t '(#(scheme-id unquote-splicing) . each-any)))) e36f0@t))) (e2ef6@syntax-dispatch e36f0@t '(#(scheme-id unquote) . each-any)))) e36ec@p)) e36ea@ls/false) ((lambda (e3702@t) ((lambda (e3704@ls/false) (if e3704@ls/false (apply (lambda () (list (e2e80@scheme-stx 'quote) '())) e3704@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3702@t))) (e2ef6@syntax-dispatch e3702@t '()))) e36e8@t))) (e2ef6@syntax-dispatch e36e8@t '(any . any)))) e36e4@p))) (set! e36a5@quasi (lambda (e36ae@p e36af@lev) ((lambda (e36b2@t) ((lambda (e36b4@ls/false) (if e36b4@ls/false (apply (lambda (e36b6@p) (if (= e36af@lev '0) e36b6@p (e369d@quasicons (e367f@datum 'unquote) (e36a5@quasi (list e36b6@p) (- e36af@lev '1))))) e36b4@ls/false) ((lambda (e36b8@t) ((lambda (e36ba@ls/false) (if e36ba@ls/false (apply (lambda (e36bc@p e36bd@q) (if (= e36af@lev '0) (e369b@quasicons* e36bc@p (e36a5@quasi e36bd@q e36af@lev)) (e369d@quasicons (e369d@quasicons (e367f@datum 'unquote) (e36a5@quasi e36bc@p (- e36af@lev '1))) (e36a5@quasi e36bd@q e36af@lev)))) e36ba@ls/false) ((lambda (e36c0@t) ((lambda (e36c2@ls/false) (if e36c2@ls/false (apply (lambda (e36c4@p e36c5@q) (if (= e36af@lev '0) (e369f@quasiappend e36c4@p (e36a5@quasi e36c5@q e36af@lev)) (e369d@quasicons (e369d@quasicons (e367f@datum 'unquote-splicing) (e36a5@quasi e36c4@p (- e36af@lev '1))) (e36a5@quasi e36c5@q e36af@lev)))) e36c2@ls/false) ((lambda (e36c8@t) ((lambda (e36ca@ls/false) (if e36ca@ls/false (apply (lambda (e36cc@p) (e369d@quasicons (e367f@datum 'quasiquote) (e36a5@quasi (list e36cc@p) (+ e36af@lev '1)))) e36ca@ls/false) ((lambda (e36ce@t) ((lambda (e36d0@ls/false) (if e36d0@ls/false (apply (lambda (e36d2@p e36d3@q) (e369d@quasicons (e36a5@quasi e36d2@p e36af@lev) (e36a5@quasi e36d3@q e36af@lev))) e36d0@ls/false) ((lambda (e36d6@t) ((lambda (e36d8@ls/false) (if (and e36d8@ls/false (apply (lambda (e36da@x) (not (e2cb3@stx? e36da@x))) e36d8@ls/false)) (apply (lambda (e36dc@x) (e36a1@quasivector (e36a3@vquasi e36dc@x e36af@lev))) e36d8@ls/false) ((lambda (e36de@t) ((lambda (e36e0@ls/false) (if e36e0@ls/false (apply (lambda (e36e2@p) (list (e2e80@scheme-stx 'quote) e36e2@p)) e36e0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e36de@t))) (e2ef6@syntax-dispatch e36de@t 'any))) e36d6@t))) (e2ef6@syntax-dispatch e36d6@t '#(vector each-any)))) e36ce@t))) (e2ef6@syntax-dispatch e36ce@t '(any . any)))) e36c8@t))) (e2ef6@syntax-dispatch e36c8@t '(#(scheme-id quasiquote) any)))) e36c0@t))) (e2ef6@syntax-dispatch e36c0@t '((#(scheme-id unquote-splicing) . each-any) . any)))) e36b8@t))) (e2ef6@syntax-dispatch e36b8@t '((#(scheme-id unquote) . each-any) . any)))) e36b2@t))) (e2ef6@syntax-dispatch e36b2@t '(#(scheme-id unquote) any)))) e36ae@p))) (lambda (e36a6@x) ((lambda (e36a8@t) ((lambda (e36aa@ls/false) (if e36aa@ls/false (apply (lambda (e36ac@e) (e36a5@quasi e36ac@e '0)) e36aa@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e36a8@t))) (e2ef6@syntax-dispatch e36a8@t '(_ any)))) e36a6@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! e2ee6@quasisyntax-macro ((lambda () ((lambda (e3783@quasi) (begin (set! e3783@quasi (lambda (e379e@p e379f@lev) ((lambda (e37a2@t) ((lambda (e37a4@ls/false) (if e37a4@ls/false (apply (lambda (e37a6@p) (if (= e379f@lev '0) ((lambda (e37a8@g) (values (list e37a8@g) (list e37a6@p) e37a8@g)) (gensym)) (call-with-values (lambda () (e3783@quasi e37a6@p (- e379f@lev '1))) (lambda (e37b0@e37ab e37b1@e37ad e37b2@e37af) ((lambda (e37b6@p e37b7@rhs* e37b8@lhs*) (values e37b8@lhs* e37b7@rhs* (list 'unsyntax e37b6@p))) e37b2@e37af e37b1@e37ad e37b0@e37ab))))) e37a4@ls/false) ((lambda (e37bc@t) ((lambda (e37be@ls/false) (if (and e37be@ls/false (apply (lambda () (= e379f@lev '0)) e37be@ls/false)) (apply (lambda () (e2fdf@syntax-violation '#f '"incorrect use of unsyntax" e379e@p)) e37be@ls/false) ((lambda (e37c0@t) ((lambda (e37c2@ls/false) (if e37c2@ls/false (apply (lambda (e37c4@p* e37c5@q) (call-with-values (lambda () (e3783@quasi e37c5@q e379f@lev)) (lambda (e37ce@e37c9 e37cf@e37cb e37d0@e37cd) ((lambda (e37d4@q e37d5@rhs* e37d6@lhs*) (if (= e379f@lev '0) ((lambda (e37da@g*) (values (append e37da@g* e37d6@lhs*) (append e37c4@p* e37d5@rhs*) (append e37da@g* e37d4@q))) (map (lambda (e37dc@x) (gensym)) e37c4@p*)) (call-with-values (lambda () (e3783@quasi e37c4@p* (- e379f@lev '1))) (lambda (e37e4@e37df e37e5@e37e1 e37e6@e37e3) ((lambda (e37ea@p* e37eb@rhs2* e37ec@lhs2*) (values (append e37ec@lhs2* e37d6@lhs*) (append e37eb@rhs2* e37d5@rhs*) (cons (cons 'unsyntax e37ea@p*) e37d4@q))) e37e6@e37e3 e37e5@e37e1 e37e4@e37df))))) e37d0@e37cd e37cf@e37cb e37ce@e37c9)))) e37c2@ls/false) ((lambda (e37f0@t) ((lambda (e37f2@ls/false) (if e37f2@ls/false (apply (lambda (e37f4@p* e37f5@q) (call-with-values (lambda () (e3783@quasi e37f5@q e379f@lev)) (lambda (e37fe@e37f9 e37ff@e37fb e3800@e37fd) ((lambda (e3804@q e3805@rhs* e3806@lhs*) (if (= e379f@lev '0) ((lambda (e380a@g*) (values (append (map (lambda (e380c@g) (cons e380c@g '(...))) e380a@g*) e3806@lhs*) (append e37f4@p* e3805@rhs*) (append (apply append (map (lambda (e380e@g) (cons e380e@g '(...))) e380a@g*)) e3804@q))) (map (lambda (e3810@x) (gensym)) e37f4@p*)) (call-with-values (lambda () (e3783@quasi e37f4@p* (- e379f@lev '1))) (lambda (e3818@e3813 e3819@e3815 e381a@e3817) ((lambda (e381e@p* e381f@rhs2* e3820@lhs2*) (values (append e3820@lhs2* e3806@lhs*) (append e381f@rhs2* e3805@rhs*) (cons (cons 'unsyntax-splicing e381e@p*) e3804@q))) e381a@e3817 e3819@e3815 e3818@e3813))))) e3800@e37fd e37ff@e37fb e37fe@e37f9)))) e37f2@ls/false) ((lambda (e3824@t) ((lambda (e3826@ls/false) (if (and e3826@ls/false (apply (lambda () (= e379f@lev '0)) e3826@ls/false)) (apply (lambda () (e2fdf@syntax-violation '#f '"incorrect use of unsyntax-splicing" e379e@p)) e3826@ls/false) ((lambda (e3828@t) ((lambda (e382a@ls/false) (if e382a@ls/false (apply (lambda (e382c@p) (call-with-values (lambda () (e3783@quasi e382c@p (+ e379f@lev '1))) (lambda (e3834@e382f e3835@e3831 e3836@e3833) ((lambda (e383a@p e383b@rhs* e383c@lhs*) (values e383c@lhs* e383b@rhs* (list 'quasisyntax e383a@p))) e3836@e3833 e3835@e3831 e3834@e382f)))) e382a@ls/false) ((lambda (e3840@t) ((lambda (e3842@ls/false) (if e3842@ls/false (apply (lambda (e3844@p e3845@q) (call-with-values (lambda () (e3783@quasi e3844@p e379f@lev)) (lambda (e3854@e3849 e3855@e384b e3856@e384d) (call-with-values (lambda () (e3783@quasi e3845@q e379f@lev)) (lambda (e385a@e384f e385b@e3851 e385c@e3853) ((lambda (e3860@q e3861@rhs2* e3862@lhs2* e3863@p e3864@rhs* e3865@lhs*) (values (append e3862@lhs2* e3865@lhs*) (append e3861@rhs2* e3864@rhs*) (cons e3863@p e3860@q))) e385c@e3853 e385b@e3851 e385a@e384f e3856@e384d e3855@e384b e3854@e3849)))))) e3842@ls/false) ((lambda (e386c@t) ((lambda (e386e@ls/false) (if e386e@ls/false (apply (lambda (e3870@x*) (call-with-values (lambda () (e3783@quasi e3870@x* e379f@lev)) (lambda (e3878@e3873 e3879@e3875 e387a@e3877) ((lambda (e387e@x* e387f@rhs* e3880@lhs*) (values e3880@lhs* e387f@rhs* (list->vector e387e@x*))) e387a@e3877 e3879@e3875 e3878@e3873)))) e386e@ls/false) ((lambda (e3884@t) ((lambda (e3886@ls/false) (if e3886@ls/false (apply (lambda () (values '() '() e379e@p)) e3886@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3884@t))) (e2ef6@syntax-dispatch e3884@t '_))) e386c@t))) (e2ef6@syntax-dispatch e386c@t '#(vector each-any)))) e3840@t))) (e2ef6@syntax-dispatch e3840@t '(any . any)))) e3828@t))) (e2ef6@syntax-dispatch e3828@t '(#(scheme-id quasisyntax) any)))) e3824@t))) (e2ef6@syntax-dispatch e3824@t '#(scheme-id unsyntax-splicing)))) e37f0@t))) (e2ef6@syntax-dispatch e37f0@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) e37c0@t))) (e2ef6@syntax-dispatch e37c0@t '((#(scheme-id unsyntax) . each-any) . any)))) e37bc@t))) (e2ef6@syntax-dispatch e37bc@t '#(scheme-id unsyntax)))) e37a2@t))) (e2ef6@syntax-dispatch e37a2@t '(#(scheme-id unsyntax) any)))) e379e@p))) (lambda (e3784@x) ((lambda (e3786@t) ((lambda (e3788@ls/false) (if e3788@ls/false (apply (lambda (e378a@e) (call-with-values (lambda () (e3783@quasi e378a@e '0)) (lambda (e3792@e378d e3793@e378f e3794@e3791) ((lambda (e3798@v e3799@rhs* e379a@lhs*) (e2eac@bless (list 'syntax-case (cons 'list e3799@rhs*) '() (list e379a@lhs* (list 'syntax e3798@v))))) e3794@e3791 e3793@e378f e3792@e378d)))) e3788@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3786@t))) (e2ef6@syntax-dispatch e3786@t '(_ any)))) e3784@x)))) '#f)))) (set! e2ee8@define-struct-macro (lambda (e3888@stx) (e2fdf@syntax-violation '#f '"define-struct not supported" e3888@stx))) (set! e2eea@define-record-type-macro (lambda (e388a@x) ((lambda (e388d@id e388f@get-record-name e3891@get-record-constructor-name e3893@get-record-predicate-name e3895@get-clause e3897@foo-rtd-code e3899@parent-rtd-code e389b@parent-rcd-code e389d@foo-rcd-code e389f@get-protocol-code e38a1@get-fields e38a3@get-mutator-indices e38a5@get-mutators e38a7@get-accessors e38a9@enumerate e38ab@do-define-record e38ad@verify-clauses) (begin (set! e388d@id (lambda (e3a80@ctxt . e3a82@str*) (e2fe3@datum->syntax e3a80@ctxt (string->symbol (apply string-append (map (lambda (e3a84@x) (if (symbol? e3a84@x) (symbol->string e3a84@x) (if (string? e3a84@x) e3a84@x (assertion-violation 'define-record-type '"BUG")))) e3a82@str*)))))) (set! e388f@get-record-name (lambda (e3a6e@spec) ((lambda (e3a70@t) ((lambda (e3a72@ls/false) (if e3a72@ls/false (apply (lambda (e3a74@foo e3a75@make-foo e3a76@foo?) e3a74@foo) e3a72@ls/false) ((lambda (e3a7a@t) ((lambda (e3a7c@ls/false) (if e3a7c@ls/false (apply (lambda (e3a7e@foo) e3a7e@foo) e3a7c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a7a@t))) (e2ef6@syntax-dispatch e3a7a@t 'any))) e3a70@t))) (e2ef6@syntax-dispatch e3a70@t '(any any any)))) e3a6e@spec))) (set! e3891@get-record-constructor-name (lambda (e3a5a@spec) ((lambda (e3a5c@t) ((lambda (e3a5e@ls/false) (if e3a5e@ls/false (apply (lambda (e3a60@foo e3a61@make-foo e3a62@foo?) e3a61@make-foo) e3a5e@ls/false) ((lambda (e3a66@t) ((lambda (e3a68@ls/false) (if (and e3a68@ls/false (apply (lambda (e3a6a@foo) (e2ceb@id? e3a6a@foo)) e3a68@ls/false)) (apply (lambda (e3a6c@foo) (e388d@id e3a6c@foo '"make-" (e2d01@stx->datum e3a6c@foo))) e3a68@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a66@t))) (e2ef6@syntax-dispatch e3a66@t 'any))) e3a5c@t))) (e2ef6@syntax-dispatch e3a5c@t '(any any any)))) e3a5a@spec))) (set! e3893@get-record-predicate-name (lambda (e3a46@spec) ((lambda (e3a48@t) ((lambda (e3a4a@ls/false) (if e3a4a@ls/false (apply (lambda (e3a4c@foo e3a4d@make-foo e3a4e@foo?) e3a4e@foo?) e3a4a@ls/false) ((lambda (e3a52@t) ((lambda (e3a54@ls/false) (if (and e3a54@ls/false (apply (lambda (e3a56@foo) (e2ceb@id? e3a56@foo)) e3a54@ls/false)) (apply (lambda (e3a58@foo) (e388d@id e3a58@foo (e2d01@stx->datum e3a58@foo) '"?")) e3a54@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a52@t))) (e2ef6@syntax-dispatch e3a52@t 'any))) e3a48@t))) (e2ef6@syntax-dispatch e3a48@t '(any any any)))) e3a46@spec))) (set! e3895@get-clause (lambda (e3a34@id e3a35@ls) ((lambda (e3a38@t) ((lambda (e3a3a@ls/false) (if e3a3a@ls/false (apply (lambda () '#f) e3a3a@ls/false) ((lambda (e3a3c@t) ((lambda (e3a3e@ls/false) (if e3a3e@ls/false (apply (lambda (e3a40@x e3a41@rest e3a42@ls) (if (e2cf3@free-id=? (e2eac@bless e3a34@id) e3a40@x) (cons e3a40@x e3a41@rest) (e3895@get-clause e3a34@id e3a42@ls))) e3a3e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a3c@t))) (e2ef6@syntax-dispatch e3a3c@t '((any . any) . any)))) e3a38@t))) (e2ef6@syntax-dispatch e3a38@t '()))) e3a35@ls))) (set! e3897@foo-rtd-code (lambda (e39e2@name e39e3@clause* e39e4@parent-rtd-code) ((lambda (e39e9@convert-field-spec*) (begin (set! e39e9@convert-field-spec* (lambda (e3a1a@ls) (list->vector (map (lambda (e3a1c@x) ((lambda (e3a1e@t) ((lambda (e3a20@ls/false) (if e3a20@ls/false (apply (lambda (e3a22@name e3a23@rest) (list 'mutable e3a22@name)) e3a20@ls/false) ((lambda (e3a26@t) ((lambda (e3a28@ls/false) (if e3a28@ls/false (apply (lambda (e3a2a@name e3a2b@rest) (list 'immutable e3a2a@name)) e3a28@ls/false) ((lambda (e3a2e@t) ((lambda (e3a30@ls/false) (if e3a30@ls/false (apply (lambda (e3a32@name) (list 'immutable e3a32@name)) e3a30@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a2e@t))) (e2ef6@syntax-dispatch e3a2e@t 'any))) e3a26@t))) (e2ef6@syntax-dispatch e3a26@t '(#(scheme-id immutable) any . any)))) e3a1e@t))) (e2ef6@syntax-dispatch e3a1e@t '(#(scheme-id mutable) any . any)))) e3a1c@x)) e3a1a@ls)))) ((lambda (e39ea@uid-code e39eb@sealed? e39ec@opaque? e39ed@fields) (e2eac@bless (list 'make-record-type-descriptor (list 'quote e39e2@name) e39e4@parent-rtd-code e39ea@uid-code e39eb@sealed? e39ec@opaque? e39ed@fields))) ((lambda (e39f2@t) ((lambda (e39f4@ls/false) (if e39f4@ls/false (apply (lambda () (list 'quote (gensym))) e39f4@ls/false) ((lambda (e39f6@t) ((lambda (e39f8@ls/false) (if e39f8@ls/false (apply (lambda (e39fa@uid) (list 'quote e39fa@uid)) e39f8@ls/false) ((lambda (e39fc@t) ((lambda (e39fe@ls/false) (if e39fe@ls/false (apply (lambda () '#f) e39fe@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e39fc@t))) (e2ef6@syntax-dispatch e39fc@t '_))) e39f6@t))) (e2ef6@syntax-dispatch e39f6@t '(_ any)))) e39f2@t))) (e2ef6@syntax-dispatch e39f2@t '(_)))) (e3895@get-clause 'nongenerative e39e3@clause*)) ((lambda (e3a00@t) ((lambda (e3a02@ls/false) (if e3a02@ls/false (apply (lambda () '#t) e3a02@ls/false) ((lambda (e3a04@t) ((lambda (e3a06@ls/false) (if e3a06@ls/false (apply (lambda () '#f) e3a06@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a04@t))) (e2ef6@syntax-dispatch e3a04@t '_))) e3a00@t))) (e2ef6@syntax-dispatch e3a00@t '(_ #(atom #t))))) (e3895@get-clause 'sealed e39e3@clause*)) ((lambda (e3a08@t) ((lambda (e3a0a@ls/false) (if e3a0a@ls/false (apply (lambda () '#t) e3a0a@ls/false) ((lambda (e3a0c@t) ((lambda (e3a0e@ls/false) (if e3a0e@ls/false (apply (lambda () '#f) e3a0e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a0c@t))) (e2ef6@syntax-dispatch e3a0c@t '_))) e3a08@t))) (e2ef6@syntax-dispatch e3a08@t '(_ #(atom #t))))) (e3895@get-clause 'opaque e39e3@clause*)) ((lambda (e3a10@t) ((lambda (e3a12@ls/false) (if e3a12@ls/false (apply (lambda (e3a14@field-spec*) (list 'quote (e39e9@convert-field-spec* e3a14@field-spec*))) e3a12@ls/false) ((lambda (e3a16@t) ((lambda (e3a18@ls/false) (if e3a18@ls/false (apply (lambda () ''#()) e3a18@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a16@t))) (e2ef6@syntax-dispatch e3a16@t '_))) e3a10@t))) (e2ef6@syntax-dispatch e3a10@t '(_ . each-any)))) (e3895@get-clause 'fields e39e3@clause*))))) '#f))) (set! e3899@parent-rtd-code (lambda (e39ca@clause*) ((lambda (e39cc@t) ((lambda (e39ce@ls/false) (if e39ce@ls/false (apply (lambda (e39d0@name) (list 'record-type-descriptor e39d0@name)) e39ce@ls/false) ((lambda (e39d2@t) ((lambda (e39d4@ls/false) (if e39d4@ls/false (apply (lambda () ((lambda (e39d6@t) ((lambda (e39d8@ls/false) (if e39d8@ls/false (apply (lambda (e39da@rtd e39db@rcd) e39da@rtd) e39d8@ls/false) ((lambda (e39de@t) ((lambda (e39e0@ls/false) (if e39e0@ls/false (apply (lambda () '#f) e39e0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e39de@t))) (e2ef6@syntax-dispatch e39de@t '#(atom #f)))) e39d6@t))) (e2ef6@syntax-dispatch e39d6@t '(_ any any)))) (e3895@get-clause 'parent-rtd e39ca@clause*))) e39d4@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e39d2@t))) (e2ef6@syntax-dispatch e39d2@t '#(atom #f)))) e39cc@t))) (e2ef6@syntax-dispatch e39cc@t '(_ any)))) (e3895@get-clause 'parent e39ca@clause*)))) (set! e389b@parent-rcd-code (lambda (e39b2@clause*) ((lambda (e39b4@t) ((lambda (e39b6@ls/false) (if e39b6@ls/false (apply (lambda (e39b8@name) (list 'record-constructor-descriptor e39b8@name)) e39b6@ls/false) ((lambda (e39ba@t) ((lambda (e39bc@ls/false) (if e39bc@ls/false (apply (lambda () ((lambda (e39be@t) ((lambda (e39c0@ls/false) (if e39c0@ls/false (apply (lambda (e39c2@rtd e39c3@rcd) e39c3@rcd) e39c0@ls/false) ((lambda (e39c6@t) ((lambda (e39c8@ls/false) (if e39c8@ls/false (apply (lambda () '#f) e39c8@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e39c6@t))) (e2ef6@syntax-dispatch e39c6@t '#(atom #f)))) e39be@t))) (e2ef6@syntax-dispatch e39be@t '(_ any any)))) (e3895@get-clause 'parent-rtd e39b2@clause*))) e39bc@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e39ba@t))) (e2ef6@syntax-dispatch e39ba@t '#(atom #f)))) e39b4@t))) (e2ef6@syntax-dispatch e39b4@t '(_ any)))) (e3895@get-clause 'parent e39b2@clause*)))) (set! e389d@foo-rcd-code (lambda (e39aa@clause* e39ab@foo-rtd e39ac@protocol e39ad@parent-rcd-code) (list 'make-record-constructor-descriptor e39ab@foo-rtd e39ad@parent-rcd-code e39ac@protocol))) (set! e389f@get-protocol-code (lambda (e399e@clause*) ((lambda (e39a0@t) ((lambda (e39a2@ls/false) (if e39a2@ls/false (apply (lambda (e39a4@expr) e39a4@expr) e39a2@ls/false) ((lambda (e39a6@t) ((lambda (e39a8@ls/false) (if e39a8@ls/false (apply (lambda () '#f) e39a8@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e39a6@t))) (e2ef6@syntax-dispatch e39a6@t '_))) e39a0@t))) (e2ef6@syntax-dispatch e39a0@t '(_ any)))) (e3895@get-clause 'protocol e399e@clause*)))) (set! e38a1@get-fields (lambda (e398c@clause*) ((lambda (e398e@t) ((lambda (e3990@ls/false) (if e3990@ls/false (apply (lambda () '()) e3990@ls/false) ((lambda (e3992@t) ((lambda (e3994@ls/false) (if e3994@ls/false (apply (lambda (e3996@f*) e3996@f*) e3994@ls/false) ((lambda (e3998@t) ((lambda (e399a@ls/false) (if e399a@ls/false (apply (lambda (e399c@rest) (e38a1@get-fields e399c@rest)) e399a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3998@t))) (e2ef6@syntax-dispatch e3998@t '(_ . any)))) e3992@t))) (e2ef6@syntax-dispatch e3992@t '((#(scheme-id fields) . each-any) . _)))) e398e@t))) (e2ef6@syntax-dispatch e398e@t '()))) e398c@clause*))) (set! e38a3@get-mutator-indices (lambda (e3974@fields) ((letrec ((e3976@f (lambda (e3978@fields e3979@i) ((lambda (e397c@t) ((lambda (e397e@ls/false) (if e397e@ls/false (apply (lambda () '()) e397e@ls/false) ((lambda (e3980@t) ((lambda (e3982@ls/false) (if e3982@ls/false (apply (lambda (e3984@rest) (cons e3979@i (e3976@f e3984@rest (+ e3979@i '1)))) e3982@ls/false) ((lambda (e3986@t) ((lambda (e3988@ls/false) (if e3988@ls/false (apply (lambda (e398a@rest) (e3976@f e398a@rest (+ e3979@i '1))) e3988@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3986@t))) (e2ef6@syntax-dispatch e3986@t '(_ . any)))) e3980@t))) (e2ef6@syntax-dispatch e3980@t '((#(scheme-id mutable) . _) . any)))) e397c@t))) (e2ef6@syntax-dispatch e397c@t '()))) e3978@fields)))) e3976@f) e3974@fields '0))) (set! e38a5@get-mutators (lambda (e394a@foo e394b@fields) ((lambda (e394f@gen-name) (begin (set! e394f@gen-name (lambda (e3972@x) (e2fe3@datum->syntax e394a@foo (string->symbol (string-append (symbol->string (e2fe5@syntax->datum e394a@foo)) '"-" (symbol->string (e2fe5@syntax->datum e3972@x)) '"-set!"))))) ((letrec ((e3950@f (lambda (e3952@fields) ((lambda (e3954@t) ((lambda (e3956@ls/false) (if e3956@ls/false (apply (lambda () '()) e3956@ls/false) ((lambda (e3958@t) ((lambda (e395a@ls/false) (if e395a@ls/false (apply (lambda (e395c@name e395d@accessor e395e@mutator e395f@rest) (cons e395e@mutator (e3950@f e395f@rest))) e395a@ls/false) ((lambda (e3964@t) ((lambda (e3966@ls/false) (if e3966@ls/false (apply (lambda (e3968@name e3969@rest) (cons (e394f@gen-name e3968@name) (e3950@f e3969@rest))) e3966@ls/false) ((lambda (e396c@t) ((lambda (e396e@ls/false) (if e396e@ls/false (apply (lambda (e3970@rest) (e3950@f e3970@rest)) e396e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e396c@t))) (e2ef6@syntax-dispatch e396c@t '(_ . any)))) e3964@t))) (e2ef6@syntax-dispatch e3964@t '((#(scheme-id mutable) any) . any)))) e3958@t))) (e2ef6@syntax-dispatch e3958@t '((#(scheme-id mutable) any any any) . any)))) e3954@t))) (e2ef6@syntax-dispatch e3954@t '()))) e3952@fields)))) e3950@f) e394b@fields))) '#f))) (set! e38a7@get-accessors (lambda (e3906@foo e3907@fields) ((lambda (e390b@gen-name) (begin (set! e390b@gen-name (lambda (e3948@x) (e2fe3@datum->syntax e3906@foo (string->symbol (string-append (symbol->string (e2fe5@syntax->datum e3906@foo)) '"-" (symbol->string (e2fe5@syntax->datum e3948@x))))))) (map (lambda (e390c@field) ((lambda (e390e@t) ((lambda (e3910@ls/false) (if (and e3910@ls/false (apply (lambda (e3912@name e3913@accessor e3914@mutator) (e2ceb@id? e3913@accessor)) e3910@ls/false)) (apply (lambda (e3918@name e3919@accessor e391a@mutator) e3919@accessor) e3910@ls/false) ((lambda (e391e@t) ((lambda (e3920@ls/false) (if (and e3920@ls/false (apply (lambda (e3922@name e3923@accessor) (e2ceb@id? e3923@accessor)) e3920@ls/false)) (apply (lambda (e3926@name e3927@accessor) e3927@accessor) e3920@ls/false) ((lambda (e392a@t) ((lambda (e392c@ls/false) (if (and e392c@ls/false (apply (lambda (e392e@name) (e2ceb@id? e392e@name)) e392c@ls/false)) (apply (lambda (e3930@name) (e390b@gen-name e3930@name)) e392c@ls/false) ((lambda (e3932@t) ((lambda (e3934@ls/false) (if (and e3934@ls/false (apply (lambda (e3936@name) (e2ceb@id? e3936@name)) e3934@ls/false)) (apply (lambda (e3938@name) (e390b@gen-name e3938@name)) e3934@ls/false) ((lambda (e393a@t) ((lambda (e393c@ls/false) (if (and e393c@ls/false (apply (lambda (e393e@name) (e2ceb@id? e393e@name)) e393c@ls/false)) (apply (lambda (e3940@name) (e390b@gen-name e3940@name)) e393c@ls/false) ((lambda (e3942@t) ((lambda (e3944@ls/false) (if e3944@ls/false (apply (lambda (e3946@others) (e2fdf@syntax-violation '#f '"invalid field spec" e390c@field)) e3944@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3942@t))) (e2ef6@syntax-dispatch e3942@t 'any))) e393a@t))) (e2ef6@syntax-dispatch e393a@t 'any))) e3932@t))) (e2ef6@syntax-dispatch e3932@t '(#(scheme-id immutable) any)))) e392a@t))) (e2ef6@syntax-dispatch e392a@t '(#(scheme-id mutable) any)))) e391e@t))) (e2ef6@syntax-dispatch e391e@t '(#(scheme-id immutable) any any)))) e390e@t))) (e2ef6@syntax-dispatch e390e@t '(#(scheme-id mutable) any any any)))) e390c@field)) e3907@fields))) '#f))) (set! e38a9@enumerate (lambda (e38fe@ls) ((letrec ((e3900@f (lambda (e3902@ls e3903@i) (if (null? e3902@ls) '() (cons e3903@i (e3900@f (cdr e3902@ls) (+ e3903@i '1))))))) e3900@f) e38fe@ls '0))) (set! e38ab@do-define-record (lambda (e38d6@namespec e38d7@clause*) ((lambda (e38da@foo) ((lambda (e38dc@foo-rtd) ((lambda (e38de@foo-rcd) ((lambda (e38e0@protocol) ((lambda (e38e2@make-foo) ((lambda (e38e4@fields) ((lambda (e38e6@idx*) ((lambda (e38e8@foo-x*) ((lambda (e38ea@set-foo-x!*) ((lambda (e38ec@set-foo-idx*) ((lambda (e38ee@foo?) ((lambda (e38f0@foo-rtd-code) ((lambda (e38f2@foo-rcd-code) ((lambda (e38f4@protocol-code) ((lambda () (e2eac@bless (cons 'begin (cons (list 'define e38dc@foo-rtd e38f0@foo-rtd-code) (cons (list 'define e38e0@protocol e38f4@protocol-code) (cons (list 'define e38de@foo-rcd e38f2@foo-rcd-code) (cons (list 'define-syntax e38da@foo (list 'list ''$rtd (list 'syntax e38dc@foo-rtd) (list 'syntax e38de@foo-rcd))) (cons (list 'define e38ee@foo? (list 'record-predicate e38dc@foo-rtd)) (cons (list 'define e38e2@make-foo (list 'record-constructor e38de@foo-rcd)) (append (map (lambda (e38f6@foo-x e38f7@idx) (list 'define e38f6@foo-x (list 'record-accessor e38dc@foo-rtd e38f7@idx))) e38e8@foo-x* e38e6@idx*) (map (lambda (e38fa@set-foo-x! e38fb@idx) (list 'define e38fa@set-foo-x! (list 'record-mutator e38dc@foo-rtd e38fb@idx))) e38ea@set-foo-x!* e38ec@set-foo-idx*))))))))))))) (e389f@get-protocol-code e38d7@clause*))) (e389d@foo-rcd-code e38d7@clause* e38dc@foo-rtd e38e0@protocol (e389b@parent-rcd-code e38d7@clause*)))) (e3897@foo-rtd-code e38da@foo e38d7@clause* (e3899@parent-rtd-code e38d7@clause*)))) (e3893@get-record-predicate-name e38d6@namespec))) (e38a3@get-mutator-indices e38e4@fields))) (e38a5@get-mutators e38da@foo e38e4@fields))) (e38a7@get-accessors e38da@foo e38e4@fields))) (e38a9@enumerate e38e4@fields))) (e38a1@get-fields e38d7@clause*))) (e3891@get-record-constructor-name e38d6@namespec))) (gensym))) (gensym))) (gensym))) (e388f@get-record-name e38d6@namespec)))) (set! e38ad@verify-clauses (lambda (e38b6@x e38b7@cls*) ((lambda (e38bb@valid-kwds e38bd@free-id-member?) (begin (set! e38bb@valid-kwds (map e2eac@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! e38bd@free-id-member? (lambda (e38d2@x e38d3@ls) (and (pair? e38d3@ls) (or (e2cf3@free-id=? e38d2@x (car e38d3@ls)) (e38bd@free-id-member? e38d2@x (cdr e38d3@ls)))))) ((letrec ((e38be@f (lambda (e38c0@cls* e38c1@seen*) (if (not (null? e38c0@cls*)) ((lambda (e38c4@t) ((lambda (e38c6@ls/false) (if e38c6@ls/false (apply (lambda (e38c8@kwd e38c9@rest) (if (or (not (e2ceb@id? e38c8@kwd)) (not (e38bd@free-id-member? e38c8@kwd e38bb@valid-kwds))) (e2fdf@syntax-violation '#f '"not a valid define-record-type keyword" e38c8@kwd) (if (e2cf9@bound-id-member? e38c8@kwd e38c1@seen*) (e2fdf@syntax-violation '#f '"duplicate use of keyword " e38b6@x e38c8@kwd) (e38be@f (cdr e38c0@cls*) (cons e38c8@kwd e38c1@seen*))))) e38c6@ls/false) ((lambda (e38cc@t) ((lambda (e38ce@ls/false) (if e38ce@ls/false (apply (lambda (e38d0@cls) (e2fdf@syntax-violation '#f '"malformed define-record-type clause" e38d0@cls)) e38ce@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e38cc@t))) (e2ef6@syntax-dispatch e38cc@t 'any))) e38c4@t))) (e2ef6@syntax-dispatch e38c4@t '(any . any)))) (car e38c0@cls*)) (void))))) e38be@f) e38b7@cls* '()))) '#f '#f))) ((lambda (e38ae@t) ((lambda (e38b0@ls/false) (if e38b0@ls/false (apply (lambda (e38b2@namespec e38b3@clause*) (begin (e38ad@verify-clauses e388a@x e38b3@clause*) (e38ab@do-define-record e38b2@namespec e38b3@clause*))) e38b0@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e38ae@t))) (e2ef6@syntax-dispatch e38ae@t '(_ any . each-any)))) e388a@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! e2eec@define-condition-type-macro (lambda (e3a86@x) ((lambda (e3a89@mkname) (begin (set! e3a89@mkname (lambda (e3ab6@name e3ab7@suffix) (e2fe3@datum->syntax e3ab6@name (string->symbol (string-append (symbol->string (e2fe5@syntax->datum e3ab6@name)) e3ab7@suffix))))) ((lambda (e3a8a@t) ((lambda (e3a8c@ls/false) (if (and e3a8c@ls/false (apply (lambda (e3a8e@ctxt e3a8f@name e3a90@super e3a91@constructor e3a92@predicate e3a93@field* e3a94@accessor*) (and (e2ceb@id? e3a8f@name) (e2ceb@id? e3a90@super) (e2ceb@id? e3a91@constructor) (e2ceb@id? e3a92@predicate) (for-all e2ceb@id? e3a93@field*) (for-all e2ceb@id? e3a94@accessor*))) e3a8c@ls/false)) (apply (lambda (e3a9c@ctxt e3a9d@name e3a9e@super e3a9f@constructor e3aa0@predicate e3aa1@field* e3aa2@accessor*) ((lambda (e3aaa@aux-accessor*) (e2eac@bless (cons 'begin (cons (cons 'define-record-type (cons (list e3a9d@name e3a9f@constructor (gensym)) (cons (list 'parent e3a9e@super) (cons (cons 'fields (map (lambda (e3aac@field e3aad@aux) (list 'immutable e3aac@field e3aad@aux)) e3aa1@field* e3aaa@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define e3aa0@predicate (list 'condition-predicate (list 'record-type-descriptor e3a9d@name))) (map (lambda (e3ab0@accessor e3ab1@aux) (list 'define e3ab0@accessor (list 'condition-accessor (list 'record-type-descriptor e3a9d@name) e3ab1@aux))) e3aa2@accessor* e3aaa@aux-accessor*)))))) (map (lambda (e3ab4@x) (gensym)) e3aa2@accessor*))) e3a8c@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3a8a@t))) (e2ef6@syntax-dispatch e3a8a@t '(any any any any any . #(each (any any)))))) e3a86@x))) '#f))) (set! e2eee@incorrect-usage-macro (lambda (e3aba@e) (e2fdf@syntax-violation '#f '"incorrect usage of auxiliary keyword" e3aba@e))) (set! e2ef0@parameterize-macro (lambda (e3abc@e) ((lambda (e3abe@t) ((lambda (e3ac0@ls/false) (if e3ac0@ls/false (apply (lambda (e3ac2@b e3ac3@b*) (e2eac@bless (cons 'let (cons '() (cons e3ac2@b e3ac3@b*))))) e3ac0@ls/false) ((lambda (e3ac6@t) ((lambda (e3ac8@ls/false) (if e3ac8@ls/false (apply (lambda (e3aca@olhs* e3acb@orhs* e3acc@b e3acd@b*) ((lambda (e3ad2@lhs* e3ad3@rhs*) (e2eac@bless (cons (list 'lambda (append e3ad2@lhs* e3ad3@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (e3ad6@lhs e3ad7@rhs) (list 'let (list (list 't (list e3ad6@lhs))) (list e3ad6@lhs e3ad7@rhs) (cons 'set! (cons e3ad7@rhs '(t))))) e3ad2@lhs* e3ad3@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons e3acc@b e3acd@b*))) '(swap)))))) (append e3aca@olhs* e3acb@orhs*)))) (e2fcd@generate-temporaries e3aca@olhs*) (e2fcd@generate-temporaries e3acb@orhs*))) e3ac8@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ac6@t))) (e2ef6@syntax-dispatch e3ac6@t '(_ #(each (any any)) any . each-any)))) e3abe@t))) (e2ef6@syntax-dispatch e3abe@t '(_ () any . each-any)))) e3abc@e))) (set! e2ef2@foreign-call-transformer (lambda (e3ada@e e3adb@r e3adc@mr) ((lambda (e3ae0@t) ((lambda (e3ae2@ls/false) (if e3ae2@ls/false (apply (lambda (e3ae4@name e3ae5@arg*) (cons 'foreign-call (cons (e2f18@chi-expr e3ae4@name e3adb@r e3adc@mr) (e2f14@chi-expr* e3ae5@arg* e3adb@r e3adc@mr)))) e3ae2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ae0@t))) (e2ef6@syntax-dispatch e3ae0@t '(_ any . each-any)))) e3ada@e))) (set! e2ef4@convert-pattern (lambda (e3ae8@pattern e3ae9@keys) ((lambda (e3aed@cvt* e3aef@cvt) (begin (set! e3aed@cvt* (lambda (e3b8c@p* e3b8d@n e3b8e@ids) (if (null? e3b8c@p*) (values '() e3b8e@ids) (call-with-values (lambda () (e3aed@cvt* (cdr e3b8c@p*) e3b8d@n e3b8e@ids)) (lambda (e3b96@e3b93 e3b97@e3b95) ((lambda (e3b9a@ids e3b9b@y) (call-with-values (lambda () (e3aef@cvt (car e3b8c@p*) e3b8d@n e3b9a@ids)) (lambda (e3ba2@e3b9f e3ba3@e3ba1) ((lambda (e3ba6@ids e3ba7@x) (values (cons e3ba7@x e3b9b@y) e3ba6@ids)) e3ba3@e3ba1 e3ba2@e3b9f)))) e3b97@e3b95 e3b96@e3b93)))))) (set! e3aef@cvt (lambda (e3af0@p e3af1@n e3af2@ids) ((lambda (e3af6@t) ((lambda (e3af8@ls/false) (if (and e3af8@ls/false (apply (lambda (e3afa@id) (e2ceb@id? e3afa@id)) e3af8@ls/false)) (apply (lambda (e3afc@id) (if (e2cf9@bound-id-member? e3af0@p e3ae9@keys) (values (vector 'free-id e3af0@p) e3af2@ids) (if (e2cf3@free-id=? e3af0@p (e2e80@scheme-stx '_)) (values '_ e3af2@ids) (values 'any (cons (cons e3af0@p e3af1@n) e3af2@ids))))) e3af8@ls/false) ((lambda (e3afe@t) ((lambda (e3b00@ls/false) (if (and e3b00@ls/false (apply (lambda (e3b02@p e3b03@dots) (e2ef8@ellipsis? e3b03@dots)) e3b00@ls/false)) (apply (lambda (e3b06@p e3b07@dots) (call-with-values (lambda () (e3aef@cvt e3b06@p (+ e3af1@n '1) e3af2@ids)) (lambda (e3b0e@e3b0b e3b0f@e3b0d) ((lambda (e3b12@ids e3b13@p) (values (if (eq? e3b13@p 'any) 'each-any (vector 'each e3b13@p)) e3b12@ids)) e3b0f@e3b0d e3b0e@e3b0b)))) e3b00@ls/false) ((lambda (e3b16@t) ((lambda (e3b18@ls/false) (if (and e3b18@ls/false (apply (lambda (e3b1a@x e3b1b@dots e3b1c@ys e3b1d@z) (e2ef8@ellipsis? e3b1b@dots)) e3b18@ls/false)) (apply (lambda (e3b22@x e3b23@dots e3b24@ys e3b25@z) (call-with-values (lambda () (e3aef@cvt e3b25@z e3af1@n e3af2@ids)) (lambda (e3b2e@e3b2b e3b2f@e3b2d) ((lambda (e3b32@ids e3b33@z) (call-with-values (lambda () (e3aed@cvt* e3b24@ys e3af1@n e3b32@ids)) (lambda (e3b3a@e3b37 e3b3b@e3b39) ((lambda (e3b3e@ids e3b3f@ys) (call-with-values (lambda () (e3aef@cvt e3b22@x (+ e3af1@n '1) e3b3e@ids)) (lambda (e3b46@e3b43 e3b47@e3b45) ((lambda (e3b4a@ids e3b4b@x) (values (vector 'each+ e3b4b@x (reverse e3b3f@ys) e3b33@z) e3b4a@ids)) e3b47@e3b45 e3b46@e3b43)))) e3b3b@e3b39 e3b3a@e3b37)))) e3b2f@e3b2d e3b2e@e3b2b)))) e3b18@ls/false) ((lambda (e3b4e@t) ((lambda (e3b50@ls/false) (if e3b50@ls/false (apply (lambda (e3b52@x e3b53@y) (call-with-values (lambda () (e3aef@cvt e3b53@y e3af1@n e3af2@ids)) (lambda (e3b5a@e3b57 e3b5b@e3b59) ((lambda (e3b5e@ids e3b5f@y) (call-with-values (lambda () (e3aef@cvt e3b52@x e3af1@n e3b5e@ids)) (lambda (e3b66@e3b63 e3b67@e3b65) ((lambda (e3b6a@ids e3b6b@x) (values (cons e3b6b@x e3b5f@y) e3b6a@ids)) e3b67@e3b65 e3b66@e3b63)))) e3b5b@e3b59 e3b5a@e3b57)))) e3b50@ls/false) ((lambda (e3b6e@t) ((lambda (e3b70@ls/false) (if e3b70@ls/false (apply (lambda () (values '() e3af2@ids)) e3b70@ls/false) ((lambda (e3b72@t) ((lambda (e3b74@ls/false) (if (and e3b74@ls/false (apply (lambda (e3b76@p) (not (e2cb3@stx? e3b76@p))) e3b74@ls/false)) (apply (lambda (e3b78@p) (call-with-values (lambda () (e3aef@cvt e3b78@p e3af1@n e3af2@ids)) (lambda (e3b7e@e3b7b e3b7f@e3b7d) ((lambda (e3b82@ids e3b83@p) (values (vector 'vector e3b83@p) e3b82@ids)) e3b7f@e3b7d e3b7e@e3b7b)))) e3b74@ls/false) ((lambda (e3b86@t) ((lambda (e3b88@ls/false) (if e3b88@ls/false (apply (lambda (e3b8a@datum) (values (vector 'atom (e2d01@stx->datum e3b8a@datum)) e3af2@ids)) e3b88@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3b86@t))) (e2ef6@syntax-dispatch e3b86@t 'any))) e3b72@t))) (e2ef6@syntax-dispatch e3b72@t '#(vector each-any)))) e3b6e@t))) (e2ef6@syntax-dispatch e3b6e@t '()))) e3b4e@t))) (e2ef6@syntax-dispatch e3b4e@t '(any . any)))) e3b16@t))) (e2ef6@syntax-dispatch e3b16@t '(any any . #(each+ any () any))))) e3afe@t))) (e2ef6@syntax-dispatch e3afe@t '(any any)))) e3af6@t))) (e2ef6@syntax-dispatch e3af6@t 'any))) e3af0@p))) (e3aef@cvt e3ae8@pattern '0 '()))) '#f '#f))) (set! e2ef6@syntax-dispatch ((lambda () ((lambda (e3bab@stx^ e3bad@match-each e3baf@match-each+ e3bb1@match-each-any e3bb3@match-empty e3bb5@combine e3bb7@match* e3bb9@match) (begin (set! e3bab@stx^ (lambda (e3c86@e e3c87@m* e3c88@s* e3c89@ae*) (if (and (null? e3c87@m*) (null? e3c88@s*) (null? e3c89@ae*)) e3c86@e (e2cd3@mkstx e3c86@e e3c87@m* e3c88@s* e3c89@ae*)))) (set! e3bad@match-each (lambda (e3c66@e e3c67@p e3c68@m* e3c69@s* e3c6a@ae*) (if (pair? e3c66@e) ((lambda (e3c70@first) (and e3c70@first ((lambda (e3c72@rest) (and e3c72@rest (cons e3c70@first e3c72@rest))) (e3bad@match-each (cdr e3c66@e) e3c67@p e3c68@m* e3c69@s* e3c6a@ae*)))) (e3bb9@match (car e3c66@e) e3c67@p e3c68@m* e3c69@s* e3c6a@ae* '())) (if (null? e3c66@e) '() (if (e2cb3@stx? e3c66@e) (and (not (e2c69@top-marked? e3c68@m*)) (call-with-values (lambda () (e2cd1@join-wraps e3c68@m* e3c69@s* e3c6a@ae* e3c66@e)) (lambda (e3c7a@e3c75 e3c7b@e3c77 e3c7c@e3c79) ((lambda (e3c80@ae* e3c81@s* e3c82@m*) (e3bad@match-each (e2cb7@stx-expr e3c66@e) e3c67@p e3c82@m* e3c81@s* e3c80@ae*)) e3c7c@e3c79 e3c7b@e3c77 e3c7a@e3c75)))) (if (e288a@e27a9@annotation? e3c66@e) (e3bad@match-each (e288c@e27ad@annotation-expression e3c66@e) e3c67@p e3c68@m* e3c69@s* e3c6a@ae*) '#f)))))) (set! e3baf@match-each+ (lambda (e3c26@e e3c27@x-pat e3c28@y-pat e3c29@z-pat e3c2a@m* e3c2b@s* e3c2c@ae* e3c2d@r) ((letrec ((e3c36@f (lambda (e3c38@e e3c39@m* e3c3a@s* e3c3b@ae*) (if (pair? e3c38@e) (call-with-values (lambda () (e3c36@f (cdr e3c38@e) e3c39@m* e3c3a@s* e3c3b@ae*)) (lambda (e3c46@e3c41 e3c47@e3c43 e3c48@e3c45) ((lambda (e3c4c@r e3c4d@y-pat e3c4e@xr*) (if e3c4c@r (if (null? e3c4d@y-pat) ((lambda (e3c52@xr) (if e3c52@xr (values (cons e3c52@xr e3c4e@xr*) e3c4d@y-pat e3c4c@r) (values '#f '#f '#f))) (e3bb9@match (car e3c38@e) e3c27@x-pat e3c39@m* e3c3a@s* e3c3b@ae* '())) (values '() (cdr e3c4d@y-pat) (e3bb9@match (car e3c38@e) (car e3c4d@y-pat) e3c39@m* e3c3a@s* e3c3b@ae* e3c4c@r))) (values '#f '#f '#f))) e3c48@e3c45 e3c47@e3c43 e3c46@e3c41))) (if (e2cb3@stx? e3c38@e) (if (e2c69@top-marked? e3c39@m*) (values '() e3c28@y-pat (e3bb9@match e3c38@e e3c29@z-pat e3c39@m* e3c3a@s* e3c3b@ae* e3c2d@r)) (call-with-values (lambda () (e2cd1@join-wraps e3c39@m* e3c3a@s* e3c3b@ae* e3c38@e)) (lambda (e3c5a@e3c55 e3c5b@e3c57 e3c5c@e3c59) ((lambda (e3c60@ae* e3c61@s* e3c62@m*) (e3c36@f (e2cb7@stx-expr e3c38@e) e3c62@m* e3c61@s* e3c60@ae*)) e3c5c@e3c59 e3c5b@e3c57 e3c5a@e3c55)))) (if (e288a@e27a9@annotation? e3c38@e) (e3c36@f (e288c@e27ad@annotation-expression e3c38@e) e3c39@m* e3c3a@s* e3c3b@ae*) (values '() e3c28@y-pat (e3bb9@match e3c38@e e3c29@z-pat e3c39@m* e3c3a@s* e3c3b@ae* e3c2d@r)))))))) e3c36@f) e3c26@e e3c2a@m* e3c2b@s* e3c2c@ae*))) (set! e3bb1@match-each-any (lambda (e3c0a@e e3c0b@m* e3c0c@s* e3c0d@ae*) (if (pair? e3c0a@e) ((lambda (e3c12@l) (and e3c12@l (cons (e3bab@stx^ (car e3c0a@e) e3c0b@m* e3c0c@s* e3c0d@ae*) e3c12@l))) (e3bb1@match-each-any (cdr e3c0a@e) e3c0b@m* e3c0c@s* e3c0d@ae*)) (if (null? e3c0a@e) '() (if (e2cb3@stx? e3c0a@e) (and (not (e2c69@top-marked? e3c0b@m*)) (call-with-values (lambda () (e2cd1@join-wraps e3c0b@m* e3c0c@s* e3c0d@ae* e3c0a@e)) (lambda (e3c1a@e3c15 e3c1b@e3c17 e3c1c@e3c19) ((lambda (e3c20@ae* e3c21@s* e3c22@m*) (e3bb1@match-each-any (e2cb7@stx-expr e3c0a@e) e3c22@m* e3c21@s* e3c20@ae*)) e3c1c@e3c19 e3c1b@e3c17 e3c1a@e3c15)))) (if (e288a@e27a9@annotation? e3c0a@e) (e3bb1@match-each-any (e288c@e27ad@annotation-expression e3c0a@e) e3c0b@m* e3c0c@s* e3c0d@ae*) '#f)))))) (set! e3bb3@match-empty (lambda (e3c04@p e3c05@r) (if (null? e3c04@p) e3c05@r (if (eq? e3c04@p '_) e3c05@r (if (eq? e3c04@p 'any) (cons '() e3c05@r) (if (pair? e3c04@p) (e3bb3@match-empty (car e3c04@p) (e3bb3@match-empty (cdr e3c04@p) e3c05@r)) (if (eq? e3c04@p 'each-any) (cons '() e3c05@r) ((lambda (e3c08@t) (if (memv e3c08@t '(each)) (e3bb3@match-empty (vector-ref e3c04@p '1) e3c05@r) (if (memv e3c08@t '(each+)) (e3bb3@match-empty (vector-ref e3c04@p '1) (e3bb3@match-empty (reverse (vector-ref e3c04@p '2)) (e3bb3@match-empty (vector-ref e3c04@p '3) e3c05@r))) (if (memv e3c08@t '(free-id atom)) e3c05@r (if (memv e3c08@t '(scheme-id atom)) e3c05@r (if (memv e3c08@t '(vector)) (e3bb3@match-empty (vector-ref e3c04@p '1) e3c05@r) (assertion-violation 'syntax-dispatch '"invalid pattern" e3c04@p))))))) (vector-ref e3c04@p '0))))))))) (set! e3bb5@combine (lambda (e3c00@r* e3c01@r) (if (null? (car e3c00@r*)) e3c01@r (cons (map car e3c00@r*) (e3bb5@combine (map cdr e3c00@r*) e3c01@r))))) (set! e3bb7@match* (lambda (e3bdc@e e3bdd@p e3bde@m* e3bdf@s* e3be0@ae* e3be1@r) (if (null? e3bdd@p) (and (null? e3bdc@e) e3be1@r) (if (pair? e3bdd@p) (and (pair? e3bdc@e) (e3bb9@match (car e3bdc@e) (car e3bdd@p) e3bde@m* e3bdf@s* e3be0@ae* (e3bb9@match (cdr e3bdc@e) (cdr e3bdd@p) e3bde@m* e3bdf@s* e3be0@ae* e3be1@r))) (if (eq? e3bdd@p 'each-any) ((lambda (e3be8@l) (and e3be8@l (cons e3be8@l e3be1@r))) (e3bb1@match-each-any e3bdc@e e3bde@m* e3bdf@s* e3be0@ae*)) ((lambda (e3bea@t) (if (memv e3bea@t '(each)) (if (null? e3bdc@e) (e3bb3@match-empty (vector-ref e3bdd@p '1) e3be1@r) ((lambda (e3bec@r*) (and e3bec@r* (e3bb5@combine e3bec@r* e3be1@r))) (e3bad@match-each e3bdc@e (vector-ref e3bdd@p '1) e3bde@m* e3bdf@s* e3be0@ae*))) (if (memv e3bea@t '(free-id)) (and (symbol? e3bdc@e) (e2c69@top-marked? e3bde@m*) (e2cf3@free-id=? (e3bab@stx^ e3bdc@e e3bde@m* e3bdf@s* e3be0@ae*) (vector-ref e3bdd@p '1)) e3be1@r) (if (memv e3bea@t '(scheme-id)) (and (symbol? e3bdc@e) (e2c69@top-marked? e3bde@m*) (e2cf3@free-id=? (e3bab@stx^ e3bdc@e e3bde@m* e3bdf@s* e3be0@ae*) (e2e80@scheme-stx (vector-ref e3bdd@p '1))) e3be1@r) (if (memv e3bea@t '(each+)) (call-with-values (lambda () (e3baf@match-each+ e3bdc@e (vector-ref e3bdd@p '1) (vector-ref e3bdd@p '2) (vector-ref e3bdd@p '3) e3bde@m* e3bdf@s* e3be0@ae* e3be1@r)) (lambda (e3bf4@e3bef e3bf5@e3bf1 e3bf6@e3bf3) ((lambda (e3bfa@r e3bfb@y-pat e3bfc@xr*) (and e3bfa@r (null? e3bfb@y-pat) (if (null? e3bfc@xr*) (e3bb3@match-empty (vector-ref e3bdd@p '1) e3bfa@r) (e3bb5@combine e3bfc@xr* e3bfa@r)))) e3bf6@e3bf3 e3bf5@e3bf1 e3bf4@e3bef))) (if (memv e3bea@t '(atom)) (and (fast-equal? (vector-ref e3bdd@p '1) (e2cff@strip e3bdc@e e3bde@m*)) e3be1@r) (if (memv e3bea@t '(vector)) (and (vector? e3bdc@e) (e3bb9@match (vector->list e3bdc@e) (vector-ref e3bdd@p '1) e3bde@m* e3bdf@s* e3be0@ae* e3be1@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" e3bdd@p)))))))) (vector-ref e3bdd@p '0))))))) (set! e3bb9@match (lambda (e3bbe@e e3bbf@p e3bc0@m* e3bc1@s* e3bc2@ae* e3bc3@r) (if (not e3bc3@r) '#f (if (eq? e3bbf@p '_) e3bc3@r (if (eq? e3bbf@p 'any) (cons (e3bab@stx^ e3bbe@e e3bc0@m* e3bc1@s* e3bc2@ae*) e3bc3@r) (if (e2cb3@stx? e3bbe@e) (and (not (e2c69@top-marked? e3bc0@m*)) (call-with-values (lambda () (e2cd1@join-wraps e3bc0@m* e3bc1@s* e3bc2@ae* e3bbe@e)) (lambda (e3bd0@e3bcb e3bd1@e3bcd e3bd2@e3bcf) ((lambda (e3bd6@ae* e3bd7@s* e3bd8@m*) (e3bb9@match (e2cb7@stx-expr e3bbe@e) e3bbf@p e3bd8@m* e3bd7@s* e3bd6@ae* e3bc3@r)) e3bd2@e3bcf e3bd1@e3bcd e3bd0@e3bcb)))) (if (e288a@e27a9@annotation? e3bbe@e) (e3bb9@match (e288c@e27ad@annotation-expression e3bbe@e) e3bbf@p e3bc0@m* e3bc1@s* e3bc2@ae* e3bc3@r) (e3bb7@match* e3bbe@e e3bbf@p e3bc0@m* e3bc1@s* e3bc2@ae* e3bc3@r)))))))) (lambda (e3bba@e e3bbb@p) (e3bb9@match e3bba@e e3bbb@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2ef8@ellipsis? (lambda (e3c8e@x) (and (e2ceb@id? e3c8e@x) (e2cf3@free-id=? e3c8e@x (e2e80@scheme-stx '...))))) (set! e2efa@underscore? (lambda (e3c90@x) (and (e2ceb@id? e3c90@x) (e2cf3@free-id=? e3c90@x (e2e80@scheme-stx '_))))) (set! e2efc@verify-literals (lambda (e3c92@lits e3c93@expr) (for-each (lambda (e3c96@x) (if (or (not (e2ceb@id? e3c96@x)) (e2ef8@ellipsis? e3c96@x) (e2efa@underscore? e3c96@x)) (e2fdf@syntax-violation '#f '"invalid literal" e3c93@expr e3c96@x) (void))) e3c92@lits))) (set! e2efe@syntax-case-transformer ((lambda () ((lambda (e3c99@build-dispatch-call e3c9b@invalid-ids-error e3c9d@gen-clause e3c9f@gen-syntax-case) (begin (set! e3c99@build-dispatch-call (lambda (e3d0a@pvars e3d0b@expr e3d0c@y e3d0d@r e3d0e@mr) ((lambda (e3d14@ids e3d15@levels) ((lambda (e3d18@labels e3d19@new-vars) ((lambda (e3d1c@body) (list '(primitive apply) (e2c47@e2b87@build-lambda '#f e3d19@new-vars e3d1c@body) e3d0c@y)) (e2f18@chi-expr (e2cd7@add-subst (e2ca6@make-full-rib e3d14@ids e3d18@labels) e3d0b@expr) (append (map (lambda (e3d1e@label e3d1f@var e3d20@level) (cons e3d1e@label (e2d0b@make-binding 'syntax (cons e3d1f@var e3d20@level)))) e3d18@labels e3d19@new-vars (map cdr e3d0a@pvars)) e3d0d@r) e3d0e@mr))) (map e2c6f@gen-label e3d14@ids) (map e2c6b@gen-lexical e3d14@ids))) (map car e3d0a@pvars) (map cdr e3d0a@pvars)))) (set! e3c9b@invalid-ids-error (lambda (e3cfe@id* e3cff@e e3d00@class) ((letrec ((e3d04@find (lambda (e3d06@id* e3d07@ok*) (if (null? e3d06@id*) (e2fdf@syntax-violation '#f '"invalid syntax" e3cff@e) (if (e2ceb@id? (car e3d06@id*)) (if (e2cf9@bound-id-member? (car e3d06@id*) e3d07@ok*) (e2fdb@syntax-error (car e3d06@id*) '"duplicate " e3d00@class) (e3d04@find (cdr e3d06@id*) (cons (car e3d06@id*) e3d07@ok*))) (e2fdb@syntax-error (car e3d06@id*) '"invalid " e3d00@class)))))) e3d04@find) e3cfe@id* '()))) (set! e3c9d@gen-clause (lambda (e3cd6@x e3cd7@keys e3cd8@clauses e3cd9@r e3cda@mr e3cdb@pat e3cdc@fender e3cdd@expr) (call-with-values (lambda () (e2ef4@convert-pattern e3cdb@pat e3cd7@keys)) (lambda (e3cea@e3ce7 e3ceb@e3ce9) ((lambda (e3cee@pvars e3cef@p) (if (not (e2cf7@distinct-bound-ids? (map car e3cee@pvars))) (e3c9b@invalid-ids-error (map car e3cee@pvars) e3cdb@pat '"pattern variable") (if (not (for-all (lambda (e3cf2@x) (not (e2ef8@ellipsis? (car e3cf2@x)))) e3cee@pvars)) (e2fdf@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" e3cdb@pat) ((lambda (e3cf4@y) ((lambda (e3cf6@test) ((lambda (e3cf8@conseq) ((lambda (e3cfa@altern) (list (e2c47@e2b87@build-lambda '#f (list e3cf4@y) (list 'if e3cf6@test e3cf8@conseq e3cfa@altern)) (list '(primitive syntax-dispatch) e3cd6@x (list 'quote e3cef@p)))) (e3c9f@gen-syntax-case e3cd6@x e3cd7@keys e3cd8@clauses e3cd9@r e3cda@mr))) (e3c99@build-dispatch-call e3cee@pvars e3cdd@expr e3cf4@y e3cd9@r e3cda@mr))) (if (eq? e3cdc@fender '#t) e3cf4@y ((lambda (e3cfc@call) (list 'if e3cf4@y e3cfc@call (list 'quote '#f))) (e3c99@build-dispatch-call e3cee@pvars e3cdc@fender e3cf4@y e3cd9@r e3cda@mr))))) (e2c6b@gen-lexical 'tmp))))) e3ceb@e3ce9 e3cea@e3ce7))))) (set! e3c9f@gen-syntax-case (lambda (e3cb4@x e3cb5@keys e3cb6@clauses e3cb7@r e3cb8@mr) (if (null? e3cb6@clauses) (list '(primitive syntax-error) e3cb4@x) ((lambda (e3cbe@t) ((lambda (e3cc0@ls/false) (if e3cc0@ls/false (apply (lambda (e3cc2@pat e3cc3@expr) (if (and (e2ceb@id? e3cc2@pat) (not (e2cf9@bound-id-member? e3cc2@pat e3cb5@keys)) (not (e2ef8@ellipsis? e3cc2@pat))) (if (e2cf3@free-id=? e3cc2@pat (e2e80@scheme-stx '_)) (e2f18@chi-expr e3cc3@expr e3cb7@r e3cb8@mr) ((lambda (e3cc6@lab e3cc7@lex) ((lambda (e3cca@body) (list (e2c47@e2b87@build-lambda '#f (list e3cc7@lex) e3cca@body) e3cb4@x)) (e2f18@chi-expr (e2cd7@add-subst (e2ca6@make-full-rib (list e3cc2@pat) (list e3cc6@lab)) e3cc3@expr) (cons (cons e3cc6@lab (e2d0b@make-binding 'syntax (cons e3cc7@lex '0))) e3cb7@r) e3cb8@mr))) (e2c6f@gen-label e3cc2@pat) (e2c6b@gen-lexical e3cc2@pat))) (e3c9d@gen-clause e3cb4@x e3cb5@keys (cdr e3cb6@clauses) e3cb7@r e3cb8@mr e3cc2@pat '#t e3cc3@expr))) e3cc0@ls/false) ((lambda (e3ccc@t) ((lambda (e3cce@ls/false) (if e3cce@ls/false (apply (lambda (e3cd0@pat e3cd1@fender e3cd2@expr) (e3c9d@gen-clause e3cb4@x e3cb5@keys (cdr e3cb6@clauses) e3cb7@r e3cb8@mr e3cd0@pat e3cd1@fender e3cd2@expr)) e3cce@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ccc@t))) (e2ef6@syntax-dispatch e3ccc@t '(any any any)))) e3cbe@t))) (e2ef6@syntax-dispatch e3cbe@t '(any any)))) (car e3cb6@clauses))))) (lambda (e3ca0@e e3ca1@r e3ca2@mr) ((lambda (e3ca6@t) ((lambda (e3ca8@ls/false) (if e3ca8@ls/false (apply (lambda (e3caa@expr e3cab@keys e3cac@clauses) (begin (e2efc@verify-literals e3cab@keys e3ca0@e) ((lambda (e3cb0@x) ((lambda (e3cb2@body) (list (e2c47@e2b87@build-lambda '#f (list e3cb0@x) e3cb2@body) (e2f18@chi-expr e3caa@expr e3ca1@r e3ca2@mr))) (e3c9f@gen-syntax-case e3cb0@x e3cab@keys e3cac@clauses e3ca1@r e3ca2@mr))) (e2c6b@gen-lexical 'tmp)))) e3ca8@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ca6@t))) (e2ef6@syntax-dispatch e3ca6@t '(_ any each-any . each-any)))) e3ca0@e)))) '#f '#f '#f '#f)))) (set! e2f00@ellipsis-map (lambda (e3d24@proc e3d25@ls . e3d28@ls*) ((lambda (e3d2b@who) (begin (set! e3d2b@who '...) (begin (if (not (list? e3d25@ls)) (assertion-violation e3d2b@who '"not a list" e3d25@ls) (void)) (if (not (null? e3d28@ls*)) ((lambda (e3d2c@n) (for-each (lambda (e3d2e@x) (begin (if (not (list? e3d2e@x)) (assertion-violation e3d2b@who '"not a list" e3d2e@x) (void)) (if (not (= (length e3d2e@x) e3d2c@n)) (assertion-violation e3d2b@who '"length mismatch" e3d25@ls e3d2e@x) (void)))) e3d28@ls*)) (length e3d25@ls)) (void)) (apply map e3d24@proc e3d25@ls e3d28@ls*)))) '#f))) (set! e2f02@syntax-transformer ((lambda () ((lambda (e3d31@gen-syntax e3d33@gen-ref e3d35@gen-append e3d37@gen-mappend e3d39@gen-map e3d3b@gen-cons e3d3d@gen-vector e3d3f@regen) (begin (set! e3d31@gen-syntax (lambda (e3da8@src e3da9@e e3daa@r e3dab@maps e3dac@ellipsis? e3dad@vec?) ((lambda (e3db4@t) ((lambda (e3db6@ls/false) (if (and e3db6@ls/false (apply (lambda (e3db8@dots) (e3dac@ellipsis? e3db8@dots)) e3db6@ls/false)) (apply (lambda (e3dba@dots) (e2fdf@syntax-violation '#f '"misplaced ellipsis in syntax form" e3da8@src)) e3db6@ls/false) ((lambda (e3dbc@t) ((lambda (e3dbe@ls/false) (if (and e3dbe@ls/false (apply (lambda (e3dc0@id) (e2ceb@id? e3dc0@id)) e3dbe@ls/false)) (apply (lambda (e3dc2@id) ((lambda (e3dc4@label) ((lambda (e3dc6@b) ((lambda () (if (eq? (e2d0d@binding-type e3dc6@b) 'syntax) (call-with-values (lambda () ((lambda (e3dcc@var.lev) (e3d33@gen-ref e3da8@src (car e3dcc@var.lev) (cdr e3dcc@var.lev) e3dab@maps)) (e2d0f@binding-value e3dc6@b))) (lambda (e3dce@e3dc9 e3dcf@e3dcb) ((lambda (e3dd2@maps e3dd3@var) (values (list 'ref e3dd3@var) e3dd2@maps)) e3dcf@e3dcb e3dce@e3dc9))) (values (list 'quote e3da9@e) e3dab@maps))))) (e2d09@label->binding e3dc4@label e3daa@r))) (e2d05@id->label e3da9@e))) e3dbe@ls/false) ((lambda (e3dd6@t) ((lambda (e3dd8@ls/false) (if (and e3dd8@ls/false (apply (lambda (e3dda@dots e3ddb@e) (e3dac@ellipsis? e3dda@dots)) e3dd8@ls/false)) (apply (lambda (e3dde@dots e3ddf@e) (if e3dad@vec? (e2fdf@syntax-violation '#f '"misplaced ellipsis in syntax form" e3da8@src) (e3d31@gen-syntax e3da8@src e3ddf@e e3daa@r e3dab@maps (lambda (e3de2@x) '#f) '#f))) e3dd8@ls/false) ((lambda (e3de4@t) ((lambda (e3de6@ls/false) (if (and e3de6@ls/false (apply (lambda (e3de8@x e3de9@dots e3dea@y) (e3dac@ellipsis? e3de9@dots)) e3de6@ls/false)) (apply (lambda (e3dee@x e3def@dots e3df0@y) ((letrec ((e3df4@f (lambda (e3df6@y e3df7@k) ((lambda (e3dfa@t) ((lambda (e3dfc@ls/false) (if e3dfc@ls/false (apply (lambda () (e3df7@k e3dab@maps)) e3dfc@ls/false) ((lambda (e3dfe@t) ((lambda (e3e00@ls/false) (if (and e3e00@ls/false (apply (lambda (e3e02@dots e3e03@y) (e3dac@ellipsis? e3e02@dots)) e3e00@ls/false)) (apply (lambda (e3e06@dots e3e07@y) (e3df4@f e3e07@y (lambda (e3e0a@maps) (call-with-values (lambda () (e3df7@k (cons '() e3e0a@maps))) (lambda (e3e10@e3e0d e3e11@e3e0f) ((lambda (e3e14@maps e3e15@x) (if (null? (car e3e14@maps)) (e2fdf@syntax-violation '#f '"extra ellipsis in syntax form" e3da8@src) (values (e3d37@gen-mappend e3e15@x (car e3e14@maps)) (cdr e3e14@maps)))) e3e11@e3e0f e3e10@e3e0d)))))) e3e00@ls/false) ((lambda (e3e18@t) ((lambda (e3e1a@ls/false) (if e3e1a@ls/false (apply (lambda () (call-with-values (lambda () (e3d31@gen-syntax e3da8@src e3df6@y e3daa@r e3dab@maps e3dac@ellipsis? e3dad@vec?)) (lambda (e3e20@e3e1d e3e21@e3e1f) ((lambda (e3e24@maps e3e25@y) (call-with-values (lambda () (e3df7@k e3e24@maps)) (lambda (e3e2c@e3e29 e3e2d@e3e2b) ((lambda (e3e30@maps e3e31@x) (values (e3d35@gen-append e3e31@x e3e25@y) e3e30@maps)) e3e2d@e3e2b e3e2c@e3e29)))) e3e21@e3e1f e3e20@e3e1d)))) e3e1a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3e18@t))) (e2ef6@syntax-dispatch e3e18@t '_))) e3dfe@t))) (e2ef6@syntax-dispatch e3dfe@t '(any . any)))) e3dfa@t))) (e2ef6@syntax-dispatch e3dfa@t '()))) e3df6@y)))) e3df4@f) e3df0@y (lambda (e3e34@maps) (call-with-values (lambda () (e3d31@gen-syntax e3da8@src e3dee@x e3daa@r (cons '() e3e34@maps) e3dac@ellipsis? '#f)) (lambda (e3e3a@e3e37 e3e3b@e3e39) ((lambda (e3e3e@maps e3e3f@x) (if (null? (car e3e3e@maps)) (e2fdf@syntax-violation '#f '"extra ellipsis in syntax form" e3da8@src) (values (e3d39@gen-map e3e3f@x (car e3e3e@maps)) (cdr e3e3e@maps)))) e3e3b@e3e39 e3e3a@e3e37)))))) e3de6@ls/false) ((lambda (e3e42@t) ((lambda (e3e44@ls/false) (if e3e44@ls/false (apply (lambda (e3e46@x e3e47@y) (call-with-values (lambda () (e3d31@gen-syntax e3da8@src e3e46@x e3daa@r e3dab@maps e3dac@ellipsis? '#f)) (lambda (e3e4e@e3e4b e3e4f@e3e4d) ((lambda (e3e52@maps e3e53@xnew) (call-with-values (lambda () (e3d31@gen-syntax e3da8@src e3e47@y e3daa@r e3e52@maps e3dac@ellipsis? e3dad@vec?)) (lambda (e3e5a@e3e57 e3e5b@e3e59) ((lambda (e3e5e@maps e3e5f@ynew) (values (e3d3b@gen-cons e3da9@e e3e46@x e3e47@y e3e53@xnew e3e5f@ynew) e3e5e@maps)) e3e5b@e3e59 e3e5a@e3e57)))) e3e4f@e3e4d e3e4e@e3e4b)))) e3e44@ls/false) ((lambda (e3e62@t) ((lambda (e3e64@ls/false) (if e3e64@ls/false (apply (lambda (e3e66@ls) (call-with-values (lambda () (e3d31@gen-syntax e3da8@src e3e66@ls e3daa@r e3dab@maps e3dac@ellipsis? '#t)) (lambda (e3e6c@e3e69 e3e6d@e3e6b) ((lambda (e3e70@maps e3e71@lsnew) (values (e3d3d@gen-vector e3da9@e e3e66@ls e3e71@lsnew) e3e70@maps)) e3e6d@e3e6b e3e6c@e3e69)))) e3e64@ls/false) ((lambda (e3e74@t) ((lambda (e3e76@ls/false) (if e3e76@ls/false (apply (lambda () (values (list 'quote e3da9@e) e3dab@maps)) e3e76@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3e74@t))) (e2ef6@syntax-dispatch e3e74@t '_))) e3e62@t))) (e2ef6@syntax-dispatch e3e62@t '#(vector each-any)))) e3e42@t))) (e2ef6@syntax-dispatch e3e42@t '(any . any)))) e3de4@t))) (e2ef6@syntax-dispatch e3de4@t '(any any . any)))) e3dd6@t))) (e2ef6@syntax-dispatch e3dd6@t '(any any)))) e3dbc@t))) (e2ef6@syntax-dispatch e3dbc@t 'any))) e3db4@t))) (e2ef6@syntax-dispatch e3db4@t 'any))) e3da9@e))) (set! e3d33@gen-ref (lambda (e3d8e@src e3d8f@var e3d90@level e3d91@maps) (if (= e3d90@level '0) (values e3d8f@var e3d91@maps) (if (null? e3d91@maps) (e2fdf@syntax-violation '#f '"missing ellipsis in syntax form" e3d8e@src) (call-with-values (lambda () (e3d33@gen-ref e3d8e@src e3d8f@var (- e3d90@level '1) (cdr e3d91@maps))) (lambda (e3d9a@e3d97 e3d9b@e3d99) ((lambda (e3d9e@outer-maps e3d9f@outer-var) ((lambda (e3da2@t) (if e3da2@t ((lambda (e3da4@b) (values (cdr e3da4@b) e3d91@maps)) e3da2@t) ((lambda (e3da6@inner-var) (values e3da6@inner-var (cons (cons (cons e3d9f@outer-var e3da6@inner-var) (car e3d91@maps)) e3d9e@outer-maps))) (e2c6b@gen-lexical 'tmp)))) (assq e3d9f@outer-var (car e3d91@maps)))) e3d9b@e3d99 e3d9a@e3d97))))))) (set! e3d35@gen-append (lambda (e3d8a@x e3d8b@y) (if (fast-equal? e3d8b@y ''()) e3d8a@x (list 'append e3d8a@x e3d8b@y)))) (set! e3d37@gen-mappend (lambda (e3d86@e e3d87@map-env) (list 'apply '(primitive append) (e3d39@gen-map e3d86@e e3d87@map-env)))) (set! e3d39@gen-map (lambda (e3d74@e e3d75@map-env) ((lambda (e3d78@formals e3d79@actuals) (if (eq? (car e3d74@e) 'ref) (car e3d79@actuals) (if (for-all (lambda (e3d7c@x) (and (eq? (car e3d7c@x) 'ref) (memq (cadr e3d7c@x) e3d78@formals))) (cdr e3d74@e)) ((lambda (e3d7e@args) (cons 'map (cons (list 'primitive (car e3d74@e)) e3d7e@args))) (map ((lambda (e3d80@r) (lambda (e3d82@x) (cdr (assq (cadr e3d82@x) e3d80@r)))) (map cons e3d78@formals e3d79@actuals)) (cdr e3d74@e))) (cons* 'map (list 'lambda e3d78@formals e3d74@e) e3d79@actuals)))) (map cdr e3d75@map-env) (map (lambda (e3d84@x) (list 'ref (car e3d84@x))) e3d75@map-env)))) (set! e3d3b@gen-cons (lambda (e3d64@e e3d65@x e3d66@y e3d67@xnew e3d68@ynew) ((lambda (e3d6e@t) (if (memv e3d6e@t '(quote)) (if (eq? (car e3d67@xnew) 'quote) ((lambda (e3d70@xnew e3d71@ynew) (if (and (eq? e3d70@xnew e3d65@x) (eq? e3d71@ynew e3d66@y)) (list 'quote e3d64@e) (list 'quote (cons e3d70@xnew e3d71@ynew)))) (cadr e3d67@xnew) (cadr e3d68@ynew)) (if (null? (cadr e3d68@ynew)) (list 'list e3d67@xnew) (list 'cons e3d67@xnew e3d68@ynew))) (if (memv e3d6e@t '(list)) (cons 'list (cons e3d67@xnew (cdr e3d68@ynew))) (list 'cons e3d67@xnew e3d68@ynew)))) (car e3d68@ynew)))) (set! e3d3d@gen-vector (lambda (e3d5e@e e3d5f@ls e3d60@lsnew) (if (eq? (car e3d60@lsnew) 'quote) (if (eq? (cadr e3d60@lsnew) e3d5f@ls) (list 'quote e3d5e@e) (list 'quote (list->vector (cadr e3d60@lsnew)))) (if (eq? (car e3d60@lsnew) 'list) (cons 'vector (cdr e3d60@lsnew)) (list 'list->vector e3d60@lsnew))))) (set! e3d3f@regen (lambda (e3d58@x) ((lambda (e3d5a@t) (if (memv e3d5a@t '(ref)) (cadr e3d58@x) (if (memv e3d5a@t '(primitive)) (list 'primitive (cadr e3d58@x)) (if (memv e3d5a@t '(quote)) (list 'quote (cadr e3d58@x)) (if (memv e3d5a@t '(lambda)) (e2c47@e2b87@build-lambda '#f (cadr e3d58@x) (e3d3f@regen (caddr e3d58@x))) (if (memv e3d5a@t '(map)) ((lambda (e3d5c@ls) (cons '(primitive ellipsis-map) e3d5c@ls)) (map e3d3f@regen (cdr e3d58@x))) (cons (list 'primitive (car e3d58@x)) (map e3d3f@regen (cdr e3d58@x))))))))) (car e3d58@x)))) (lambda (e3d40@e e3d41@r e3d42@mr) ((lambda (e3d46@t) ((lambda (e3d48@ls/false) (if e3d48@ls/false (apply (lambda (e3d4a@x) (call-with-values (lambda () (e3d31@gen-syntax e3d40@e e3d4a@x e3d41@r '() e2ef8@ellipsis? '#f)) (lambda (e3d50@e3d4d e3d51@e3d4f) ((lambda (e3d54@maps e3d55@e) (e3d3f@regen e3d55@e)) e3d51@e3d4f e3d50@e3d4d)))) e3d48@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3d46@t))) (e2ef6@syntax-dispatch e3d46@t '(_ any)))) e3d40@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2f04@core-macro-transformer (lambda (e3e78@name) ((lambda (e3e7a@t) (if (memv e3e7a@t '(quote)) e2ea6@quote-transformer (if (memv e3e7a@t '(lambda)) e2eaa@lambda-transformer (if (memv e3e7a@t '(case-lambda)) e2ea8@case-lambda-transformer (if (memv e3e7a@t '(letrec)) e2e8e@letrec-transformer (if (memv e3e7a@t '(letrec*)) e2e90@letrec*-transformer (if (memv e3e7a@t '(if)) e2e9e@if-transformer (if (memv e3e7a@t '(and)) e2ea0@and-transformer (if (memv e3e7a@t '(or)) e2ea2@or-transformer (if (memv e3e7a@t '(foreign-call)) e2ef2@foreign-call-transformer (if (memv e3e7a@t '(syntax-case)) e2efe@syntax-case-transformer (if (memv e3e7a@t '(syntax)) e2f02@syntax-transformer (if (memv e3e7a@t '(type-descriptor)) e2e94@type-descriptor-transformer (if (memv e3e7a@t '(record-type-descriptor)) e2e96@record-type-descriptor-transformer (if (memv e3e7a@t '(record-constructor-descriptor)) e2e98@record-constructor-descriptor-transformer (if (memv e3e7a@t '(fluid-let-syntax)) e2e92@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" e3e78@name))))))))))))))))) e3e78@name))) (set! e2f06@symbol-macro (lambda (e3e7c@x e3e7d@set) ((lambda (e3e80@t) ((lambda (e3e82@ls/false) (if (and e3e82@ls/false (apply (lambda (e3e84@name) (and (e2ceb@id? e3e84@name) (memq (e2ced@id->sym e3e84@name) e3e7d@set))) e3e82@ls/false)) (apply (lambda (e3e86@name) (e2eac@bless (list 'quote e3e86@name))) e3e82@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3e80@t))) (e2ef6@syntax-dispatch e3e80@t '(_ any)))) e3e7c@x))) (set! e2f08@macro-transformer (lambda (e3e88@x) (if (procedure? e3e88@x) e3e88@x (if (symbol? e3e88@x) ((lambda (e3e8a@t) (if (memv e3e8a@t '(define-record-type)) e2eea@define-record-type-macro (if (memv e3e8a@t '(define-struct)) e2ee8@define-struct-macro (if (memv e3e8a@t '(include)) e2ede@include-macro (if (memv e3e8a@t '(cond)) e2eda@cond-macro (if (memv e3e8a@t '(let)) e2eb2@let-macro (if (memv e3e8a@t '(do)) e2ed2@do-macro (if (memv e3e8a@t '(or)) e2ed6@or-macro (if (memv e3e8a@t '(and)) e2ed8@and-macro (if (memv e3e8a@t '(let*)) e2ed4@let*-macro (if (memv e3e8a@t '(let-values)) e2eb4@let-values-macro (if (memv e3e8a@t '(let*-values)) e2eb6@let*-values-macro (if (memv e3e8a@t '(syntax-rules)) e2ee2@syntax-rules-macro (if (memv e3e8a@t '(quasiquote)) e2ee4@quasiquote-macro (if (memv e3e8a@t '(quasisyntax)) e2ee6@quasisyntax-macro (if (memv e3e8a@t '(with-syntax)) e2eae@with-syntax-macro (if (memv e3e8a@t '(when)) e2e9a@when-macro (if (memv e3e8a@t '(unless)) e2e9c@unless-macro (if (memv e3e8a@t '(case)) e2ea4@case-macro (if (memv e3e8a@t '(identifier-syntax)) e2ed0@identifier-syntax-macro (if (memv e3e8a@t '(time)) e2ec8@time-macro (if (memv e3e8a@t '(delay)) e2eca@delay-macro (if (memv e3e8a@t '(assert)) e2ecc@assert-macro (if (memv e3e8a@t '(endianness)) e2ece@endianness-macro (if (memv e3e8a@t '(guard)) e2ec4@guard-macro (if (memv e3e8a@t '(define-enumeration)) e2ec6@define-enumeration-macro (if (memv e3e8a@t '(trace-lambda)) e2eb8@trace-lambda-macro (if (memv e3e8a@t '(trace-define)) e2eba@trace-define-macro (if (memv e3e8a@t '(trace-define-syntax)) e2ebc@trace-define-syntax-macro (if (memv e3e8a@t '(trace-let-syntax)) e2ec0@trace-let-syntax-macro (if (memv e3e8a@t '(trace-letrec-syntax)) e2ec2@trace-letrec-syntax-macro (if (memv e3e8a@t '(define-condition-type)) e2eec@define-condition-type-macro (if (memv e3e8a@t '(parameterize)) e2ef0@parameterize-macro (if (memv e3e8a@t '(include-into)) e2ee0@include-into-macro (if (memv e3e8a@t '(eol-style)) (lambda (e3e8c@x) (e2f06@symbol-macro e3e8c@x '(none lf cr crlf nel crnel ls))) (if (memv e3e8a@t '(error-handling-mode)) (lambda (e3e8e@x) (e2f06@symbol-macro e3e8e@x '(ignore raise replace))) (if (memv e3e8a@t '(buffer-mode)) (lambda (e3e90@x) (e2f06@symbol-macro e3e90@x '(none line block))) (if (memv e3e8a@t '(file-options)) e2c5e@file-options-macro (if (memv e3e8a@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) e2eee@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" e3e88@x)))))))))))))))))))))))))))))))))))))))) e3e88@x) (error 'core-macro-transformer '"BUG: invalid macro" e3e88@x))))) (set! e2f0a@local-macro-transformer (lambda (e3e92@x) (car e3e92@x))) (set! e2f0c@do-macro-call (lambda (e3e94@transformer e3e95@expr) ((lambda (e3e98@out) (begin ((letrec ((e3e9a@f (lambda (e3e9c@x) (if (not (e2cb3@stx? e3e9c@x)) (if (pair? e3e9c@x) (begin (e3e9a@f (car e3e9c@x)) (e3e9a@f (cdr e3e9c@x))) (if (vector? e3e9c@x) (vector-for-each e3e9a@f e3e9c@x) (if (symbol? e3e9c@x) (e2fdf@syntax-violation '#f '"raw symbol encountered in output of macro" e3e95@expr e3e9c@x) (void)))) (void))))) e3e9a@f) e3e98@out) (e2cd5@add-mark (e2ccb@gen-mark) e3e98@out e3e95@expr))) (e3e94@transformer (e2cd5@add-mark e2ccd@anti-mark e3e95@expr '#f))))) (set! e2f0e@chi-macro (lambda (e3e9e@p e3e9f@e) (e2f0c@do-macro-call (e2f08@macro-transformer e3e9e@p) e3e9f@e))) (set! e2f10@chi-local-macro (lambda (e3ea2@p e3ea3@e) (e2f0c@do-macro-call (e2f0a@local-macro-transformer e3ea2@p) e3ea3@e))) (set! e2f12@chi-global-macro (lambda (e3ea6@p e3ea7@e) ((lambda (e3eaa@lib e3eab@loc) (begin (e2b10@e29b2@visit-library e3eaa@lib) ((lambda (e3eae@x) ((lambda (e3eb0@transformer) (e2f0c@do-macro-call e3eb0@transformer e3ea7@e)) (if (procedure? e3eae@x) e3eae@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" e3eae@x)))) (symbol-value e3eab@loc)))) (car e3ea6@p) (cdr e3ea6@p)))) (set! e2f14@chi-expr* (lambda (e3eb2@e* e3eb3@r e3eb4@mr) (if (null? e3eb2@e*) '() ((lambda (e3eb8@e) (cons e3eb8@e (e2f14@chi-expr* (cdr e3eb2@e*) e3eb3@r e3eb4@mr))) (e2f18@chi-expr (car e3eb2@e*) e3eb3@r e3eb4@mr))))) (set! e2f16@chi-application (lambda (e3eba@e e3ebb@r e3ebc@mr) ((lambda (e3ec0@t) ((lambda (e3ec2@ls/false) (if e3ec2@ls/false (apply (lambda (e3ec4@rator e3ec5@rands) ((lambda (e3ec8@rator) (cons e3ec8@rator (e2f14@chi-expr* e3ec5@rands e3ebb@r e3ebc@mr))) (e2f18@chi-expr e3ec4@rator e3ebb@r e3ebc@mr))) e3ec2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ec0@t))) (e2ef6@syntax-dispatch e3ec0@t '(any . each-any)))) e3eba@e))) (set! e2f18@chi-expr (lambda (e3eca@e e3ecb@r e3ecc@mr) (call-with-values (lambda () (e2d13@syntax-type e3eca@e e3ecb@r)) (lambda (e3ed6@e3ed1 e3ed7@e3ed3 e3ed8@e3ed5) ((lambda (e3edc@kwd e3edd@value e3ede@type) ((lambda (e3ee2@t) (if (memv e3ee2@t '(core-macro)) ((lambda (e3ee4@transformer) (e3ee4@transformer e3eca@e e3ecb@r e3ecc@mr)) (e2f04@core-macro-transformer e3edd@value)) (if (memv e3ee2@t '(global)) ((lambda (e3ee6@lib) ((lambda (e3ee8@loc) ((lambda () (begin ((e2f61@inv-collector) e3ee6@lib) e3ee8@loc)))) (cdr e3edd@value))) (car e3edd@value)) (if (memv e3ee2@t '(core-prim)) ((lambda (e3eea@name) (list 'primitive e3eea@name)) e3edd@value) (if (memv e3ee2@t '(call)) (e2f16@chi-application e3eca@e e3ecb@r e3ecc@mr) (if (memv e3ee2@t '(lexical)) ((lambda (e3eec@lex) e3eec@lex) (e2e82@lexical-var e3edd@value)) (if (memv e3ee2@t '(global-macro global-macro!)) (e2f18@chi-expr (e2f12@chi-global-macro e3edd@value e3eca@e) e3ecb@r e3ecc@mr) (if (memv e3ee2@t '(local-macro local-macro!)) (e2f18@chi-expr (e2f10@chi-local-macro e3edd@value e3eca@e) e3ecb@r e3ecc@mr) (if (memv e3ee2@t '(macro macro!)) (e2f18@chi-expr (e2f0e@chi-macro e3edd@value e3eca@e) e3ecb@r e3ecc@mr) (if (memv e3ee2@t '(constant)) ((lambda (e3eee@datum) (list 'quote e3eee@datum)) e3edd@value) (if (memv e3ee2@t '(set!)) (e2f1a@chi-set! e3eca@e e3ecb@r e3ecc@mr) (if (memv e3ee2@t '(begin)) ((lambda (e3ef0@t) ((lambda (e3ef2@ls/false) (if e3ef2@ls/false (apply (lambda (e3ef4@x e3ef5@x*) (e2c4a@e2bb9@build-sequence '#f (e2f14@chi-expr* (cons e3ef4@x e3ef5@x*) e3ecb@r e3ecc@mr))) e3ef2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ef0@t))) (e2ef6@syntax-dispatch e3ef0@t '(_ any . each-any)))) e3eca@e) (if (memv e3ee2@t '(let-syntax letrec-syntax)) ((lambda (e3ef8@t) ((lambda (e3efa@ls/false) (if (and e3efa@ls/false (apply (lambda (e3efc@xlhs* e3efd@xrhs* e3efe@xbody e3eff@xbody*) (if (not (e2cf5@valid-bound-ids? e3efc@xlhs*)) (e2fdf@syntax-violation '#f '"invalid identifiers" e3eca@e) (void))) e3efa@ls/false)) (apply (lambda (e3f04@xlhs* e3f05@xrhs* e3f06@xbody e3f07@xbody*) ((lambda (e3f0c@xlab*) ((lambda (e3f0e@xrib) ((lambda (e3f10@xb*) ((lambda () (e2c4a@e2bb9@build-sequence '#f (e2f14@chi-expr* (map (lambda (e3f12@x) (e2cd7@add-subst e3f0e@xrib e3f12@x)) (cons e3f06@xbody e3f07@xbody*)) (append (map cons e3f0c@xlab* e3f10@xb*) e3ecb@r) (append (map cons e3f0c@xlab* e3f10@xb*) e3ecc@mr)))))) (map (lambda (e3f14@x) (e2d29@make-eval-transformer (e2f53@expand-transformer (if (eq? e3ede@type 'let-syntax) e3f14@x (e2cd7@add-subst e3f0e@xrib e3f14@x)) e3ecc@mr))) e3f05@xrhs*))) (e2ca6@make-full-rib e3f04@xlhs* e3f0c@xlab*))) (map e2c6f@gen-label e3f04@xlhs*))) e3efa@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3ef8@t))) (e2ef6@syntax-dispatch e3ef8@t '(_ #(each (any any)) any . each-any)))) e3eca@e) (if (memv e3ee2@t '(displaced-lexical)) (e2fdf@syntax-violation '#f '"identifier out of context" e3eca@e) (if (memv e3ee2@t '(syntax)) (e2fdf@syntax-violation '#f '"reference to pattern variable outside a syntax form" e3eca@e) (if (memv e3ee2@t '(define define-syntax module import library)) (e2fdf@syntax-violation '#f (string-append ((lambda (e3f16@t) (if (memv e3f16@t '(define)) '"a definition" (if (memv e3f16@t '(define-syntax)) '"a define-syntax" (if (memv e3f16@t '(module)) '"a module definition" (if (memv e3f16@t '(library)) '"a library definition" (if (memv e3f16@t '(import)) '"an import declaration" (if (memv e3f16@t '(export)) '"an export declaration" '"a non-expression"))))))) e3ede@type) '" was found where an expression was expected") e3eca@e) (if (memv e3ee2@t '(mutable)) (e2fdf@syntax-violation '#f '"attempt to reference an unexportable variable" e3eca@e) (e2fdf@syntax-violation '#f '"invalid expression" e3eca@e)))))))))))))))))) e3ede@type)) e3ed8@e3ed5 e3ed7@e3ed3 e3ed6@e3ed1))))) (set! e2f1a@chi-set! (lambda (e3f18@e e3f19@r e3f1a@mr) ((lambda (e3f1e@t) ((lambda (e3f20@ls/false) (if (and e3f20@ls/false (apply (lambda (e3f22@x e3f23@v) (e2ceb@id? e3f22@x)) e3f20@ls/false)) (apply (lambda (e3f26@x e3f27@v) (call-with-values (lambda () (e2d13@syntax-type e3f26@x e3f19@r)) (lambda (e3f30@e3f2b e3f31@e3f2d e3f32@e3f2f) ((lambda (e3f36@kwd e3f37@value e3f38@type) ((lambda (e3f3c@t) (if (memv e3f3c@t '(lexical)) (begin (e2e86@set-lexical-mutable! e3f37@value '#t) (list 'set! (e2e82@lexical-var e3f37@value) (e2f18@chi-expr e3f27@v e3f19@r e3f1a@mr))) (if (memv e3f3c@t '(core-prim)) (e2fdf@syntax-violation '#f '"cannot modify imported core primitive" e3f18@e) (if (memv e3f3c@t '(global)) (e2fdf@syntax-violation '#f '"attempt to modify imported binding" e3f18@e) (if (memv e3f3c@t '(global-macro!)) (e2f18@chi-expr (e2f12@chi-global-macro e3f37@value e3f18@e) e3f19@r e3f1a@mr) (if (memv e3f3c@t '(local-macro!)) (e2f18@chi-expr (e2f10@chi-local-macro e3f37@value e3f18@e) e3f19@r e3f1a@mr) (if (memv e3f3c@t '(mutable)) (e2fdf@syntax-violation '#f '"attempt to assign to an unexportable variable" e3f18@e) (e2fdf@syntax-violation '#f '"invalid syntax" e3f18@e)))))))) e3f38@type)) e3f32@e3f2f e3f31@e3f2d e3f30@e3f2b)))) e3f20@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3f1e@t))) (e2ef6@syntax-dispatch e3f1e@t '(_ any any)))) e3f18@e))) (set! e2f1c@verify-formals (lambda (e3f3e@fmls e3f3f@stx) ((lambda (e3f42@t) ((lambda (e3f44@ls/false) (if e3f44@ls/false (apply (lambda (e3f46@x*) (if (not (e2cf5@valid-bound-ids? e3f46@x*)) (e2eb0@invalid-fmls-error e3f3f@stx e3f3e@fmls) (void))) e3f44@ls/false) ((lambda (e3f48@t) ((lambda (e3f4a@ls/false) (if e3f4a@ls/false (apply (lambda (e3f4c@x* e3f4d@x) (if (not (e2cf5@valid-bound-ids? (cons e3f4d@x e3f4c@x*))) (e2eb0@invalid-fmls-error e3f3f@stx e3f3e@fmls) (void))) e3f4a@ls/false) ((lambda (e3f50@t) ((lambda (e3f52@ls/false) (if e3f52@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid syntax" e3f3f@stx)) e3f52@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3f50@t))) (e2ef6@syntax-dispatch e3f50@t '_))) e3f48@t))) (e2ef6@syntax-dispatch e3f48@t '#(each+ any () any)))) e3f42@t))) (e2ef6@syntax-dispatch e3f42@t 'each-any))) e3f3e@fmls))) (set! e2f1e@chi-lambda-clause (lambda (e3f54@stx e3f55@fmls e3f56@body* e3f57@r e3f58@mr) ((lambda (e3f5e@t) ((lambda (e3f60@ls/false) (if e3f60@ls/false (apply (lambda (e3f62@x*) (begin (e2f1c@verify-formals e3f55@fmls e3f54@stx) ((lambda (e3f64@lex* e3f65@lab*) (values e3f64@lex* (e2f2e@chi-internal (e2cd7@add-subst (e2ca6@make-full-rib e3f62@x* e3f65@lab*) e3f56@body*) (e2e8a@add-lexicals e3f65@lab* e3f64@lex* e3f57@r) e3f58@mr))) (map e2c6b@gen-lexical e3f62@x*) (map e2c6f@gen-label e3f62@x*)))) e3f60@ls/false) ((lambda (e3f68@t) ((lambda (e3f6a@ls/false) (if e3f6a@ls/false (apply (lambda (e3f6c@x* e3f6d@x) (begin (e2f1c@verify-formals e3f55@fmls e3f54@stx) ((lambda (e3f70@lex* e3f71@lab* e3f72@lex e3f73@lab) (values (append e3f70@lex* e3f72@lex) (e2f2e@chi-internal (e2cd7@add-subst (e2ca6@make-full-rib (cons e3f6d@x e3f6c@x*) (cons e3f73@lab e3f71@lab*)) e3f56@body*) (e2e8a@add-lexicals (cons e3f73@lab e3f71@lab*) (cons e3f72@lex e3f70@lex*) e3f57@r) e3f58@mr))) (map e2c6b@gen-lexical e3f6c@x*) (map e2c6f@gen-label e3f6c@x*) (e2c6b@gen-lexical e3f6d@x) (e2c6f@gen-label e3f6d@x)))) e3f6a@ls/false) ((lambda (e3f78@t) ((lambda (e3f7a@ls/false) (if e3f7a@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid syntax" e3f55@fmls)) e3f7a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e3f78@t))) (e2ef6@syntax-dispatch e3f78@t '_))) e3f68@t))) (e2ef6@syntax-dispatch e3f68@t '#(each+ any () any)))) e3f5e@t))) (e2ef6@syntax-dispatch e3f5e@t 'each-any))) e3f55@fmls))) (set! e2f20@chi-lambda-clause* (lambda (e3f7c@stx e3f7d@fmls* e3f7e@body** e3f7f@r e3f80@mr) (if (null? e3f7d@fmls*) (values '() '()) (call-with-values (lambda () (e2f1e@chi-lambda-clause e3f7c@stx (car e3f7d@fmls*) (car e3f7e@body**) e3f7f@r e3f80@mr)) (lambda (e3f8a@e3f87 e3f8b@e3f89) ((lambda (e3f8e@b e3f8f@a) (call-with-values (lambda () (e2f20@chi-lambda-clause* e3f7c@stx (cdr e3f7d@fmls*) (cdr e3f7e@body**) e3f7f@r e3f80@mr)) (lambda (e3f96@e3f93 e3f97@e3f95) ((lambda (e3f9a@b* e3f9b@a*) (values (cons e3f8f@a e3f9b@a*) (cons e3f8e@b e3f9a@b*))) e3f97@e3f95 e3f96@e3f93)))) e3f8b@e3f89 e3f8a@e3f87)))))) (set! e2f22@chi-defun (lambda (e3f9e@x e3f9f@r e3fa0@mr) ((lambda (e3fa4@fmls e3fa5@body*) (call-with-values (lambda () (e2f1e@chi-lambda-clause e3fa4@fmls e3fa4@fmls e3fa5@body* e3f9f@r e3fa0@mr)) (lambda (e3fac@e3fa9 e3fad@e3fab) ((lambda (e3fb0@body e3fb1@fmls) (e2c47@e2b87@build-lambda '#f e3fb1@fmls e3fb0@body)) e3fad@e3fab e3fac@e3fa9)))) (car e3f9e@x) (cdr e3f9e@x)))) (set! e2f24@chi-rhs (lambda (e3fb4@rhs e3fb5@r e3fb6@mr) ((lambda (e3fba@t) (if (memv e3fba@t '(defun)) (e2f22@chi-defun (cdr e3fb4@rhs) e3fb5@r e3fb6@mr) (if (memv e3fba@t '(expr)) ((lambda (e3fbc@expr) (e2f18@chi-expr e3fbc@expr e3fb5@r e3fb6@mr)) (cdr e3fb4@rhs)) (if (memv e3fba@t '(top-expr)) ((lambda (e3fbe@expr) (e2c4a@e2bb9@build-sequence '#f (list (e2f18@chi-expr e3fbe@expr e3fb5@r e3fb6@mr) (e2c4b@e2bbb@build-void)))) (cdr e3fb4@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" e3fb4@rhs))))) (car e3fb4@rhs)))) (set! e2f26@expand-interaction-rhs*/init* (lambda (e3fc0@lhs* e3fc1@rhs* e3fc2@init* e3fc3@r e3fc4@mr) ((letrec ((e3fca@f (lambda (e3fcc@lhs* e3fcd@rhs*) (if (null? e3fcc@lhs*) (map (lambda (e3fd0@x) (e2f18@chi-expr e3fd0@x e3fc3@r e3fc4@mr)) e3fc2@init*) ((lambda (e3fd2@lhs e3fd3@rhs) ((lambda (e3fd6@t) (if (memv e3fd6@t '(defun)) ((lambda (e3fd8@rhs) (cons (list 'set! e3fd2@lhs e3fd8@rhs) (e3fca@f (cdr e3fcc@lhs*) (cdr e3fcd@rhs*)))) (e2f22@chi-defun (cdr e3fd3@rhs) e3fc3@r e3fc4@mr)) (if (memv e3fd6@t '(expr)) ((lambda (e3fda@rhs) (cons (list 'set! e3fd2@lhs e3fda@rhs) (e3fca@f (cdr e3fcc@lhs*) (cdr e3fcd@rhs*)))) (e2f18@chi-expr (cdr e3fd3@rhs) e3fc3@r e3fc4@mr)) (if (memv e3fd6@t '(top-expr)) ((lambda (e3fdc@e) (cons e3fdc@e (e3fca@f (cdr e3fcc@lhs*) (cdr e3fcd@rhs*)))) (e2f18@chi-expr (cdr e3fd3@rhs) e3fc3@r e3fc4@mr)) (error 'expand-interaction '"invallid" e3fd3@rhs))))) (car e3fd3@rhs))) (car e3fcc@lhs*) (car e3fcd@rhs*)))))) e3fca@f) e3fc0@lhs* e3fc1@rhs*))) (set! e2f28@chi-rhs* (lambda (e3fde@rhs* e3fdf@r e3fe0@mr) ((letrec ((e3fe4@f (lambda (e3fe6@ls) (if (null? e3fe6@ls) '() ((lambda (e3fe8@a) (cons e3fe8@a (e3fe4@f (cdr e3fe6@ls)))) (e2f24@chi-rhs (car e3fe6@ls) e3fdf@r e3fe0@mr)))))) e3fe4@f) e3fde@rhs*))) (set! e2f2a@find-bound=? (lambda (e3fea@x e3feb@lhs* e3fec@rhs*) (if (null? e3feb@lhs*) '#f (if (e2cf1@bound-id=? e3fea@x (car e3feb@lhs*)) (car e3fec@rhs*) (e2f2a@find-bound=? e3fea@x (cdr e3feb@lhs*) (cdr e3fec@rhs*)))))) (set! e2f2c@find-dups (lambda (e3ff0@ls) ((letrec ((e3ff2@f (lambda (e3ff4@ls e3ff5@dups) (if (null? e3ff4@ls) e3ff5@dups ((lambda (e3ff8@t) (if e3ff8@t ((lambda (e3ffa@x) (e3ff2@f (cdr e3ff4@ls) (cons (list (car e3ff4@ls) e3ffa@x) e3ff5@dups))) e3ff8@t) (e3ff2@f (cdr e3ff4@ls) e3ff5@dups))) (e2f2a@find-bound=? (car e3ff4@ls) (cdr e3ff4@ls) (cdr e3ff4@ls))))))) e3ff2@f) e3ff0@ls '()))) (set! e2f2e@chi-internal (lambda (e3ffc@e* e3ffd@r e3ffe@mr) ((lambda (e4002@rib) (call-with-values (lambda () (e2f51@chi-body* (map (lambda (e4014@x) (e2cd7@add-subst e4002@rib e4014@x)) (e2ce9@syntax->list e3ffc@e*)) e3ffd@r e3ffe@mr '() '() '() '() '() e4002@rib '#f)) (lambda (e4016@e4005 e4017@e4007 e4018@e4009 e4019@e400b e401a@e400d e401b@e400f e401c@e4011 e401d@e4013) ((lambda (e4026@_exp* e4027@kwd* e4028@mod** e4029@rhs* e402a@lex* e402b@mr e402c@r e402d@e*) (begin (if (null? e402d@e*) (e2fdf@syntax-violation '#f '"no expression in body" e402d@e*) (void)) ((lambda (e4036@init*) ((lambda (e4038@rhs*) ((lambda () (e2c4d@e2bbf@build-letrec* '#f (reverse e402a@lex*) (reverse e4038@rhs*) (e2c4a@e2bb9@build-sequence '#f e4036@init*))))) (e2f28@chi-rhs* e4029@rhs* e402c@r e402b@mr))) (e2f14@chi-expr* (append (apply append (reverse e4028@mod**)) e402d@e*) e402c@r e402b@mr)))) e401d@e4013 e401c@e4011 e401b@e400f e401a@e400d e4019@e400b e4018@e4009 e4017@e4007 e4016@e4005)))) (e2c9a@make-empty-rib)))) (set! e2f30@parse-module (lambda (e403a@e) ((lambda (e403c@t) ((lambda (e403e@ls/false) (if e403e@ls/false (apply (lambda (e4040@export* e4041@b*) (begin (if (not (for-all e2ceb@id? e4040@export*)) (e2fdf@syntax-violation '#f '"module exports must be identifiers" e403a@e) (void)) (values '#f (list->vector e4040@export*) e4041@b*))) e403e@ls/false) ((lambda (e4044@t) ((lambda (e4046@ls/false) (if e4046@ls/false (apply (lambda (e4048@name e4049@export* e404a@b*) (begin (if (not (e2ceb@id? e4048@name)) (e2fdf@syntax-violation '#f '"module name must be an identifier" e403a@e) (void)) (if (not (for-all e2ceb@id? e4049@export*)) (e2fdf@syntax-violation '#f '"module exports must be identifiers" e403a@e) (void)) (values e4048@name (list->vector e4049@export*) e404a@b*))) e4046@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4044@t))) (e2ef6@syntax-dispatch e4044@t '(_ any each-any . each-any)))) e403c@t))) (e2ef6@syntax-dispatch e403c@t '(_ each-any . each-any)))) e403a@e))) (set! e2f36@e2f31 (make-record-type-descriptor 'module-interface '#f 'e2f34 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! e2f38@e2f33 '#f) (set! e2f3a@e2f32 (make-record-constructor-descriptor e2f36@e2f31 '#f e2f38@e2f33)) (set! e2f3d@module-interface? (record-predicate e2f36@e2f31)) (set! e2f3f@make-module-interface (record-constructor e2f3a@e2f32)) (set! e2f41@module-interface-first-mark (record-accessor e2f36@e2f31 '0)) (set! e2f43@module-interface-exp-id-vec (record-accessor e2f36@e2f31 '1)) (set! e2f45@module-interface-exp-lab-vec (record-accessor e2f36@e2f31 '2)) (set! e2f47@set-module-interface-first-mark! (record-mutator e2f36@e2f31 '0)) (set! e2f49@set-module-interface-exp-id-vec! (record-mutator e2f36@e2f31 '1)) (set! e2f4b@set-module-interface-exp-lab-vec! (record-mutator e2f36@e2f31 '2)) (set! e2f4d@module-interface-exp-id* (lambda (e404e@iface e404f@id) ((lambda (e4053@diff-marks) (begin (set! e4053@diff-marks (lambda (e405a@ls e405b@x) (begin (if (null? e405a@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (e405e@a) (if (eq? e405e@a e405b@x) '() (cons e405e@a (e4053@diff-marks (cdr e405a@ls) e405b@x)))) (car e405a@ls))))) ((lambda (e4054@diff e4055@id-vec) (if (null? e4054@diff) e4055@id-vec (vector-map (lambda (e4058@x) (e2cb5@make-stx (e2cb7@stx-expr e4058@x) (append e4054@diff (e2cb9@stx-mark* e4058@x)) '() '())) e4055@id-vec))) (e4053@diff-marks (e2cb9@stx-mark* e404f@id) (e2f41@module-interface-first-mark e404e@iface)) (e2f43@module-interface-exp-id-vec e404e@iface)))) '#f))) (set! e2f4f@chi-internal-module (lambda (e4060@e e4061@r e4062@mr e4063@lex* e4064@rhs* e4065@mod** e4066@kwd*) (call-with-values (lambda () (e2f30@parse-module e4060@e)) (lambda (e4074@e406f e4075@e4071 e4076@e4073) ((lambda (e407a@e* e407b@exp-id* e407c@name) ((lambda (e4080@rib) ((lambda (e4082@e*) ((lambda () (call-with-values (lambda () (e2f51@chi-body* e4082@e* e4061@r e4062@mr e4063@lex* e4064@rhs* e4065@mod** e4066@kwd* '() e4080@rib '#f)) (lambda (e4094@e4085 e4095@e4087 e4096@e4089 e4097@e408b e4098@e408d e4099@e408f e409a@e4091 e409b@e4093) ((lambda (e40a4@_exp* e40a5@kwd* e40a6@mod** e40a7@rhs* e40a8@lex* e40a9@mr e40aa@r e40ab@e*) ((lambda (e40b4@exp-lab* e40b5@mod**) (if (not e407c@name) (values e40a8@lex* e40a7@rhs* e407b@exp-id* e40b4@exp-lab* e40aa@r e40a9@mr e40b5@mod** e40a5@kwd*) ((lambda (e40b8@lab e40b9@iface) (values e40a8@lex* e40a7@rhs* (vector e407c@name) (vector e40b8@lab) (cons (cons e40b8@lab (cons '$module e40b9@iface)) e40aa@r) (cons (cons e40b8@lab (cons '$module e40b9@iface)) e40a9@mr) e40b5@mod** e40a5@kwd*)) (e2c6f@gen-label 'module) (e2f3f@make-module-interface (car (e2cb9@stx-mark* e407c@name)) (vector-map (lambda (e40bc@x) (e2cb5@make-stx (e2cb7@stx-expr e40bc@x) (e2cb9@stx-mark* e40bc@x) '() '())) e407b@exp-id*) e40b4@exp-lab*)))) (vector-map (lambda (e40be@x) (or (e2d05@id->label (e2cb5@make-stx (e2ced@id->sym e40be@x) (e2cb9@stx-mark* e40be@x) (list e4080@rib) '())) (e2fdf@syntax-violation '#f '"cannot find module export" e40be@x))) e407b@exp-id*) (cons e40ab@e* e40a6@mod**))) e409b@e4093 e409a@e4091 e4099@e408f e4098@e408d e4097@e408b e4096@e4089 e4095@e4087 e4094@e4085)))))) (map (lambda (e40c0@x) (e2cd7@add-subst e4080@rib e40c0@x)) (e2ce9@syntax->list e407a@e*)))) (e2c9a@make-empty-rib))) e4076@e4073 e4075@e4071 e4074@e406f))))) (set! e2f51@chi-body* (lambda (e40c2@e* e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40c8@kwd* e40c9@exp* e40ca@rib e40cb@top?) (if (null? e40c2@e*) (values e40c2@e* e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40c8@kwd* e40c9@exp*) ((lambda (e40d6@e) (call-with-values (lambda () (e2d13@syntax-type e40d6@e e40c3@r)) (lambda (e40de@e40d9 e40df@e40db e40e0@e40dd) ((lambda (e40e4@kwd e40e5@value e40e6@type) ((lambda (e40ea@kwd*) ((lambda (e40ec@t) (if (memv e40ec@t '(define)) (call-with-values (lambda () (e2e7a@parse-define e40d6@e)) (lambda (e40f2@e40ef e40f3@e40f1) ((lambda (e40f6@rhs e40f7@id) (begin (if (e2cf9@bound-id-member? e40f7@id e40ea@kwd*) (e2fdf@syntax-violation '#f '"cannot redefine keyword" e40d6@e) (void)) (call-with-values (lambda () (e2c73@gen-define-label+loc e40f7@id e40ca@rib)) (lambda (e40fe@e40fb e40ff@e40fd) ((lambda (e4102@lex e4103@lab) (begin (e2c9c@extend-rib! e40ca@rib e40f7@id e4103@lab) (e2f51@chi-body* (cdr e40c2@e*) (e2e88@add-lexical e4103@lab e4102@lex e40c3@r) e40c4@mr (cons e4102@lex e40c5@lex*) (cons e40f6@rhs e40c6@rhs*) e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?))) e40ff@e40fd e40fe@e40fb))))) e40f3@e40f1 e40f2@e40ef))) (if (memv e40ec@t '(define-syntax)) (call-with-values (lambda () (e2e7c@parse-define-syntax e40d6@e)) (lambda (e410a@e4107 e410b@e4109) ((lambda (e410e@rhs e410f@id) (begin (if (e2cf9@bound-id-member? e410f@id e40ea@kwd*) (e2fdf@syntax-violation '#f '"cannot redefine keyword" e40d6@e) (void)) ((lambda (e4112@lab e4113@expanded-rhs) (begin (e2c9c@extend-rib! e40ca@rib e410f@id e4112@lab) ((lambda (e4116@b) (e2f51@chi-body* (cdr e40c2@e*) (cons (cons e4112@lab e4116@b) e40c3@r) (cons (cons e4112@lab e4116@b) e40c4@mr) e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?)) (e2d29@make-eval-transformer e4113@expanded-rhs)))) (e2c75@gen-define-label e410f@id e40ca@rib) (e2f53@expand-transformer e410e@rhs e40c4@mr)))) e410b@e4109 e410a@e4107))) (if (memv e40ec@t '(let-syntax letrec-syntax)) ((lambda (e4118@t) ((lambda (e411a@ls/false) (if (and e411a@ls/false (apply (lambda (e411c@xlhs* e411d@xrhs* e411e@xbody*) (if (not (e2cf5@valid-bound-ids? e411c@xlhs*)) (e2fdf@syntax-violation '#f '"invalid identifiers" e40d6@e) (void))) e411a@ls/false)) (apply (lambda (e4122@xlhs* e4123@xrhs* e4124@xbody*) ((lambda (e4128@xlab*) ((lambda (e412a@xrib) ((lambda (e412c@xb*) ((lambda () (e2f51@chi-body* (append (map (lambda (e412e@x) (e2cd7@add-subst e412a@xrib e412e@x)) e4124@xbody*) (cdr e40c2@e*)) (append (map cons e4128@xlab* e412c@xb*) e40c3@r) (append (map cons e4128@xlab* e412c@xb*) e40c4@mr) e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?)))) (map (lambda (e4130@x) (e2d29@make-eval-transformer (e2f53@expand-transformer (if (eq? e40e6@type 'let-syntax) e4130@x (e2cd7@add-subst e412a@xrib e4130@x)) e40c4@mr))) e4123@xrhs*))) (e2ca6@make-full-rib e4122@xlhs* e4128@xlab*))) (map e2c6f@gen-label e4122@xlhs*))) e411a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4118@t))) (e2ef6@syntax-dispatch e4118@t '(_ #(each (any any)) . each-any)))) e40d6@e) (if (memv e40ec@t '(begin)) ((lambda (e4132@t) ((lambda (e4134@ls/false) (if e4134@ls/false (apply (lambda (e4136@x*) (e2f51@chi-body* (append e4136@x* (cdr e40c2@e*)) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?)) e4134@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4132@t))) (e2ef6@syntax-dispatch e4132@t '(_ . each-any)))) e40d6@e) (if (memv e40ec@t '(global-macro global-macro!)) (e2f51@chi-body* (cons (e2cd7@add-subst e40ca@rib (e2f12@chi-global-macro e40e5@value e40d6@e)) (cdr e40c2@e*)) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?) (if (memv e40ec@t '(local-macro local-macro!)) (e2f51@chi-body* (cons (e2cd7@add-subst e40ca@rib (e2f10@chi-local-macro e40e5@value e40d6@e)) (cdr e40c2@e*)) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?) (if (memv e40ec@t '(macro macro!)) (e2f51@chi-body* (cons (e2cd7@add-subst e40ca@rib (e2f0e@chi-macro e40e5@value e40d6@e)) (cdr e40c2@e*)) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?) (if (memv e40ec@t '(module)) (call-with-values (lambda () (e2f4f@chi-internal-module e40d6@e e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd*)) (lambda (e4148@e4139 e4149@e413b e414a@e413d e414b@e413f e414c@e4141 e414d@e4143 e414e@e4145 e414f@e4147) ((lambda (e4158@kwd* e4159@mod** e415a@mr e415b@r e415c@m-exp-lab* e415d@m-exp-id* e415e@rhs* e415f@lex*) (begin (vector-for-each (lambda (e4168@id e4169@lab) (e2c9c@extend-rib! e40ca@rib e4168@id e4169@lab)) e415d@m-exp-id* e415c@m-exp-lab*) (e2f51@chi-body* (cdr e40c2@e*) e415b@r e415a@mr e415f@lex* e415e@rhs* e4159@mod** e4158@kwd* e40c9@exp* e40ca@rib e40cb@top?))) e414f@e4147 e414e@e4145 e414d@e4143 e414c@e4141 e414b@e413f e414a@e413d e4149@e413b e4148@e4139))) (if (memv e40ec@t '(library)) (begin (e2fc1@library-expander (e2d01@stx->datum e40d6@e)) (e2f51@chi-body* (cdr e40c2@e*) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?)) (if (memv e40ec@t '(export)) ((lambda (e416c@t) ((lambda (e416e@ls/false) (if e416e@ls/false (apply (lambda (e4170@exp-decl*) (e2f51@chi-body* (cdr e40c2@e*) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* (append e4170@exp-decl* e40c9@exp*) e40ca@rib e40cb@top?)) e416e@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e416c@t))) (e2ef6@syntax-dispatch e416c@t '(_ . each-any)))) e40d6@e) (if (memv e40ec@t '(import)) ((lambda () ((lambda (e4173@module-import? e4175@module-import e4177@library-import) (begin (set! e4173@module-import? (lambda (e41c6@e) ((lambda (e41c8@t) ((lambda (e41ca@ls/false) (if (and e41ca@ls/false (apply (lambda (e41cc@id) (e2ceb@id? e41cc@id)) e41ca@ls/false)) (apply (lambda (e41ce@id) '#t) e41ca@ls/false) ((lambda (e41d0@t) ((lambda (e41d2@ls/false) (if e41d2@ls/false (apply (lambda (e41d4@imp*) '#f) e41d2@ls/false) ((lambda (e41d6@t) ((lambda (e41d8@ls/false) (if e41d8@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"malformed import form" e41c6@e)) e41d8@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e41d6@t))) (e2ef6@syntax-dispatch e41d6@t '_))) e41d0@t))) (e2ef6@syntax-dispatch e41d0@t '(_ . each-any)))) e41c8@t))) (e2ef6@syntax-dispatch e41c8@t '(_ any)))) e41c6@e))) (set! e4175@module-import (lambda (e41a4@e e41a5@r) ((lambda (e41a8@t) ((lambda (e41aa@ls/false) (if (and e41aa@ls/false (apply (lambda (e41ac@id) (e2ceb@id? e41ac@id)) e41aa@ls/false)) (apply (lambda (e41ae@id) (call-with-values (lambda () (e2d13@syntax-type e41ae@id e41a5@r)) (lambda (e41b6@e41b1 e41b7@e41b3 e41b8@e41b5) ((lambda (e41bc@kwd e41bd@value e41be@type) ((lambda (e41c2@t) (if (memv e41c2@t '($module)) ((lambda (e41c4@iface) (values (e2f4d@module-interface-exp-id* e41c4@iface e41ae@id) (e2f45@module-interface-exp-lab-vec e41c4@iface))) e41bd@value) (e2fdf@syntax-violation '#f '"invalid import" e41a4@e))) e41be@type)) e41b8@e41b5 e41b7@e41b3 e41b6@e41b1)))) e41aa@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e41a8@t))) (e2ef6@syntax-dispatch e41a8@t '(_ any)))) e41a4@e))) (set! e4177@library-import (lambda (e4188@e) ((lambda (e418a@t) ((lambda (e418c@ls/false) (if e418c@ls/false (apply (lambda (e418e@ctxt e418f@imp*) (call-with-values (lambda () (e2f5b@parse-import-spec* (e2fe5@syntax->datum e418f@imp*))) (lambda (e4196@e4193 e4197@e4195) ((lambda (e419a@subst-labels e419b@subst-names) (values (vector-map (lambda (e419e@name) (e2cc9@datum->stx e418e@ctxt e419e@name)) e419b@subst-names) e419a@subst-labels)) e4197@e4195 e4196@e4193)))) e418c@ls/false) ((lambda (e41a0@t) ((lambda (e41a2@ls/false) (if e41a2@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid import form" e4188@e)) e41a2@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e41a0@t))) (e2ef6@syntax-dispatch e41a0@t '_))) e418a@t))) (e2ef6@syntax-dispatch e418a@t '(any . each-any)))) e4188@e))) (begin (call-with-values (lambda () (if (e4173@module-import? e40d6@e) (e4175@module-import e40d6@e e40c3@r) (e4177@library-import e40d6@e))) (lambda (e417c@e4179 e417d@e417b) ((lambda (e4180@lab* e4181@id*) (vector-for-each (lambda (e4184@id e4185@lab) (e2c9c@extend-rib! e40ca@rib e4184@id e4185@lab)) e4181@id* e4180@lab*)) e417d@e417b e417c@e4179))) (e2f51@chi-body* (cdr e40c2@e*) e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?)))) '#f '#f '#f))) (if e40cb@top? (e2f51@chi-body* (cdr e40c2@e*) e40c3@r e40c4@mr (cons (e2c6b@gen-lexical 'dummy) e40c5@lex*) (cons (cons 'top-expr e40d6@e) e40c6@rhs*) e40c7@mod** e40ea@kwd* e40c9@exp* e40ca@rib e40cb@top?) (values e40c2@e* e40c3@r e40c4@mr e40c5@lex* e40c6@rhs* e40c7@mod** e40ea@kwd* e40c9@exp*)))))))))))))) e40e6@type)) (if (e2ceb@id? e40e4@kwd) (cons e40e4@kwd e40c8@kwd*) e40c8@kwd*))) e40e0@e40dd e40df@e40db e40de@e40d9)))) (car e40c2@e*))))) (set! e2f53@expand-transformer (lambda (e41da@expr e41db@r) ((lambda (e41de@rtc) ((lambda (e41e0@expanded-rhs) (begin (for-each ((lambda (e41e2@mark-visit) (lambda (e41e4@x) (begin (e2b0f@e29b0@invoke-library e41e4@x) (e41e2@mark-visit e41e4@x)))) (e2f63@vis-collector)) (e41de@rtc)) e41e0@expanded-rhs)) ((lambda (e41ee@e41e7 e41ef@e41e9 e41f0@e41eb e41f1@e41ed) ((lambda (e41f6@swap) (dynamic-wind e41f6@swap (lambda () (e2f18@chi-expr e41da@expr e41db@r e41db@r)) e41f6@swap)) (lambda () (begin ((lambda (e41f8@t) (begin (e41ee@e41e7 e41f0@e41eb) (set! e41f0@e41eb e41f8@t))) (e41ee@e41e7)) ((lambda (e41fa@t) (begin (e41ef@e41e9 e41f1@e41ed) (set! e41f1@e41ed e41fa@t))) (e41ef@e41e9)))))) e2f61@inv-collector e2f63@vis-collector e41de@rtc (lambda (e41fc@x) (values))))) (e2f5f@make-collector)))) (set! e2f55@parse-exports (lambda (e41fe@exp*) ((letrec ((e4200@f (lambda (e4202@exp* e4203@int* e4204@ext*) (if (null? e4202@exp*) (begin (if (not (e2cf5@valid-bound-ids? e4204@ext*)) (e2fdf@syntax-violation 'export '"invalid exports" (e2f2c@find-dups e4204@ext*)) (void)) (values (map e2fe5@syntax->datum e4204@ext*) e4203@int*)) ((lambda (e4208@t) ((lambda (e420a@ls/false) (if e420a@ls/false (apply (lambda (e420c@rename e420d@i* e420e@e*) (begin (if (not (and (eq? (e2fe5@syntax->datum e420c@rename) 'rename) (for-all e2ceb@id? e420d@i*) (for-all e2ceb@id? e420e@e*))) (e2fdf@syntax-violation 'export '"invalid export specifier" (car e4202@exp*)) (void)) (e4200@f (cdr e4202@exp*) (append e420d@i* e4203@int*) (append e420e@e* e4204@ext*)))) e420a@ls/false) ((lambda (e4212@t) ((lambda (e4214@ls/false) (if e4214@ls/false (apply (lambda (e4216@ie) (begin (if (not (e2ceb@id? e4216@ie)) (e2fdf@syntax-violation 'export '"invalid export" e4216@ie) (void)) (e4200@f (cdr e4202@exp*) (cons e4216@ie e4203@int*) (cons e4216@ie e4204@ext*)))) e4214@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4212@t))) (e2ef6@syntax-dispatch e4212@t 'any))) e4208@t))) (e2ef6@syntax-dispatch e4208@t '(any . #(each (any any)))))) (car e4202@exp*)))))) e4200@f) e41fe@exp* '() '()))) (set! e2f57@parse-library-name (lambda (e4218@spec) ((lambda (e421b@parse) (begin (set! e421b@parse (lambda (e4228@x) ((lambda (e422a@t) ((lambda (e422c@ls/false) (if (and e422c@ls/false (apply (lambda (e422e@v*) (for-all (lambda (e4230@x) ((lambda (e4232@x) (and (integer? e4232@x) (exact? e4232@x))) (e2fe5@syntax->datum e4230@x))) e422e@v*)) e422c@ls/false)) (apply (lambda (e4234@v*) (values '() (map e2fe5@syntax->datum e4234@v*))) e422c@ls/false) ((lambda (e4236@t) ((lambda (e4238@ls/false) (if (and e4238@ls/false (apply (lambda (e423a@x e423b@rest) (symbol? (e2fe5@syntax->datum e423a@x))) e4238@ls/false)) (apply (lambda (e423e@x e423f@rest) (call-with-values (lambda () (e421b@parse e423f@rest)) (lambda (e4246@e4243 e4247@e4245) ((lambda (e424a@v* e424b@x*) (values (cons (e2fe5@syntax->datum e423e@x) e424b@x*) e424a@v*)) e4247@e4245 e4246@e4243)))) e4238@ls/false) ((lambda (e424e@t) ((lambda (e4250@ls/false) (if e4250@ls/false (apply (lambda () (values '() '())) e4250@ls/false) ((lambda (e4252@t) ((lambda (e4254@ls/false) (if e4254@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid library name" e4218@spec)) e4254@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4252@t))) (e2ef6@syntax-dispatch e4252@t '_))) e424e@t))) (e2ef6@syntax-dispatch e424e@t '()))) e4236@t))) (e2ef6@syntax-dispatch e4236@t '(any . any)))) e422a@t))) (e2ef6@syntax-dispatch e422a@t '(each-any)))) e4228@x))) (call-with-values (lambda () (e421b@parse e4218@spec)) (lambda (e4220@e421d e4221@e421f) ((lambda (e4224@ver* e4225@name*) (begin (if (null? e4225@name*) (e2fdf@syntax-violation '#f '"empty library name" e4218@spec) (void)) (values e4225@name* e4224@ver*))) e4221@e421f e4220@e421d))))) '#f))) (set! e2f59@parse-library (lambda (e4256@e) ((lambda (e4258@t) ((lambda (e425a@ls/false) (if (and e425a@ls/false (apply (lambda (e425c@library e425d@name* e425e@export e425f@exp* e4260@import e4261@imp* e4262@b*) (and (eq? (e2fe5@syntax->datum e425e@export) 'export) (eq? (e2fe5@syntax->datum e4260@import) 'import) (eq? (e2fe5@syntax->datum e425c@library) 'library))) e425a@ls/false)) (apply (lambda (e426a@library e426b@name* e426c@export e426d@exp* e426e@import e426f@imp* e4270@b*) (values e426b@name* e426d@exp* e426f@imp* e4270@b*)) e425a@ls/false) ((lambda (e4278@t) ((lambda (e427a@ls/false) (if e427a@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"malformed library" e4256@e)) e427a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4278@t))) (e2ef6@syntax-dispatch e4278@t '_))) e4258@t))) (e2ef6@syntax-dispatch e4258@t '(any each-any (any . each-any) (any . each-any) . each-any)))) e4256@e))) (set! e2f5b@parse-import-spec* ((lambda () ((lambda (e427d@idsyn? e427f@dup-error e4281@merge-substs e4283@exclude* e4285@find* e4287@rem* e4289@remove-dups e428b@parse-library-name e428d@import-library e428f@get-import e4291@add-imports!) (begin (set! e427d@idsyn? (lambda (e4486@x) (symbol? (e2fe5@syntax->datum e4486@x)))) (set! e427f@dup-error (lambda (e4484@name) (e2fdf@syntax-violation 'import '"two imports with different bindings" e4484@name))) (set! e4281@merge-substs (lambda (e4472@s e4473@subst) ((lambda (e4477@insert-to-subst) (begin (set! e4477@insert-to-subst (lambda (e4478@a e4479@subst) ((lambda (e447c@name e447d@label) ((lambda (e4480@t) (if e4480@t ((lambda (e4482@x) (if (eq? (cdr e4482@x) e447d@label) e4479@subst (e427f@dup-error e447c@name))) e4480@t) (cons e4478@a e4479@subst))) (assq e447c@name e4479@subst))) (car e4478@a) (cdr e4478@a)))) (if (null? e4472@s) e4473@subst (e4477@insert-to-subst (car e4472@s) (e4281@merge-substs (cdr e4472@s) e4473@subst))))) '#f))) (set! e4283@exclude* (lambda (e4442@sym* e4443@subst) ((lambda (e4447@exclude) (begin (set! e4447@exclude (lambda (e4460@sym e4461@subst) (if (null? e4461@subst) (e2fdf@syntax-violation 'import '"cannot rename unbound identifier" e4460@sym) (if (eq? e4460@sym (caar e4461@subst)) (values (cdar e4461@subst) (cdr e4461@subst)) ((lambda (e4464@a) (call-with-values (lambda () (e4447@exclude e4460@sym (cdr e4461@subst))) (lambda (e446a@e4467 e446b@e4469) ((lambda (e446e@subst e446f@old) (values e446f@old (cons e4464@a e446e@subst))) e446b@e4469 e446a@e4467)))) (car e4461@subst)))))) (if (null? e4442@sym*) (values '() e4443@subst) (call-with-values (lambda () (e4447@exclude (car e4442@sym*) e4443@subst)) (lambda (e444c@e4449 e444d@e444b) ((lambda (e4450@subst e4451@old) (call-with-values (lambda () (e4283@exclude* (cdr e4442@sym*) e4450@subst)) (lambda (e4458@e4455 e4459@e4457) ((lambda (e445c@subst e445d@old*) (values (cons e4451@old e445d@old*) e445c@subst)) e4459@e4457 e4458@e4455)))) e444d@e444b e444c@e4449)))))) '#f))) (set! e4285@find* (lambda (e443a@sym* e443b@subst) (map (lambda (e443e@x) ((lambda (e4440@t) (if e4440@t (cdr e4440@t) (e2fdf@syntax-violation 'import '"cannot find identifier" e443e@x))) (assq e443e@x e443b@subst))) e443a@sym*))) (set! e4287@rem* (lambda (e4432@sym* e4433@subst) ((letrec ((e4436@f (lambda (e4438@subst) (if (null? e4438@subst) '() (if (memq (caar e4438@subst) e4432@sym*) (e4436@f (cdr e4438@subst)) (cons (car e4438@subst) (e4436@f (cdr e4438@subst)))))))) e4436@f) e4433@subst))) (set! e4289@remove-dups (lambda (e4430@ls) (if (null? e4430@ls) '() (if (memq (car e4430@ls) (cdr e4430@ls)) (e4289@remove-dups (cdr e4430@ls)) (cons (car e4430@ls) (e4289@remove-dups (cdr e4430@ls))))))) (set! e428b@parse-library-name (lambda (e4348@spec) ((lambda (e434b@subversion? e434d@subversion-pred e434f@version-pred) (begin (set! e434b@subversion? (lambda (e442c@x) ((lambda (e442e@x) (and (integer? e442e@x) (exact? e442e@x) (>= e442e@x '0))) (e2fe5@syntax->datum e442c@x)))) (set! e434d@subversion-pred (lambda (e43cc@x*) ((lambda (e43ce@t) ((lambda (e43d0@ls/false) (if (and e43d0@ls/false (apply (lambda (e43d2@n) (e434b@subversion? e43d2@n)) e43d0@ls/false)) (apply (lambda (e43d4@n) (lambda (e43d6@x) (= e43d6@x (e2fe5@syntax->datum e43d4@n)))) e43d0@ls/false) ((lambda (e43d8@t) ((lambda (e43da@ls/false) (if (and e43da@ls/false (apply (lambda (e43dc@p? e43dd@sub*) (eq? (e2fe5@syntax->datum e43dc@p?) 'and)) e43da@ls/false)) (apply (lambda (e43e0@p? e43e1@sub*) ((lambda (e43e4@p*) (lambda (e43e6@x) (for-all (lambda (e43e8@p) (e43e8@p e43e6@x)) e43e4@p*))) (map e434d@subversion-pred e43e1@sub*))) e43da@ls/false) ((lambda (e43ea@t) ((lambda (e43ec@ls/false) (if (and e43ec@ls/false (apply (lambda (e43ee@p? e43ef@sub*) (eq? (e2fe5@syntax->datum e43ee@p?) 'or)) e43ec@ls/false)) (apply (lambda (e43f2@p? e43f3@sub*) ((lambda (e43f6@p*) (lambda (e43f8@x) (exists (lambda (e43fa@p) (e43fa@p e43f8@x)) e43f6@p*))) (map e434d@subversion-pred e43f3@sub*))) e43ec@ls/false) ((lambda (e43fc@t) ((lambda (e43fe@ls/false) (if (and e43fe@ls/false (apply (lambda (e4400@p? e4401@sub) (eq? (e2fe5@syntax->datum e4400@p?) 'not)) e43fe@ls/false)) (apply (lambda (e4404@p? e4405@sub) ((lambda (e4408@p) (lambda (e440a@x) (not (e4408@p e440a@x)))) (e434d@subversion-pred e4405@sub))) e43fe@ls/false) ((lambda (e440c@t) ((lambda (e440e@ls/false) (if (and e440e@ls/false (apply (lambda (e4410@p? e4411@n) (and (eq? (e2fe5@syntax->datum e4410@p?) '<=) (e434b@subversion? e4411@n))) e440e@ls/false)) (apply (lambda (e4414@p? e4415@n) (lambda (e4418@x) (<= e4418@x (e2fe5@syntax->datum e4415@n)))) e440e@ls/false) ((lambda (e441a@t) ((lambda (e441c@ls/false) (if (and e441c@ls/false (apply (lambda (e441e@p? e441f@n) (and (eq? (e2fe5@syntax->datum e441e@p?) '>=) (e434b@subversion? e441f@n))) e441c@ls/false)) (apply (lambda (e4422@p? e4423@n) (lambda (e4426@x) (>= e4426@x (e2fe5@syntax->datum e4423@n)))) e441c@ls/false) ((lambda (e4428@t) ((lambda (e442a@ls/false) (if e442a@ls/false (apply (lambda () (e2fdf@syntax-violation 'import '"invalid sub-version spec" e4348@spec e43cc@x*)) e442a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4428@t))) (e2ef6@syntax-dispatch e4428@t '_))) e441a@t))) (e2ef6@syntax-dispatch e441a@t '(any any)))) e440c@t))) (e2ef6@syntax-dispatch e440c@t '(any any)))) e43fc@t))) (e2ef6@syntax-dispatch e43fc@t '(any any)))) e43ea@t))) (e2ef6@syntax-dispatch e43ea@t '(any . each-any)))) e43d8@t))) (e2ef6@syntax-dispatch e43d8@t '(any . each-any)))) e43ce@t))) (e2ef6@syntax-dispatch e43ce@t 'any))) e43cc@x*))) (set! e434f@version-pred (lambda (e437c@x*) ((lambda (e437e@t) ((lambda (e4380@ls/false) (if e4380@ls/false (apply (lambda () (lambda (e4382@x) '#t)) e4380@ls/false) ((lambda (e4384@t) ((lambda (e4386@ls/false) (if (and e4386@ls/false (apply (lambda (e4388@c e4389@ver*) (eq? (e2fe5@syntax->datum e4388@c) 'and)) e4386@ls/false)) (apply (lambda (e438c@c e438d@ver*) ((lambda (e4390@p*) (lambda (e4392@x) (for-all (lambda (e4394@p) (e4394@p e4392@x)) e4390@p*))) (map e434f@version-pred e438d@ver*))) e4386@ls/false) ((lambda (e4396@t) ((lambda (e4398@ls/false) (if (and e4398@ls/false (apply (lambda (e439a@c e439b@ver*) (eq? (e2fe5@syntax->datum e439a@c) 'or)) e4398@ls/false)) (apply (lambda (e439e@c e439f@ver*) ((lambda (e43a2@p*) (lambda (e43a4@x) (exists (lambda (e43a6@p) (e43a6@p e43a4@x)) e43a2@p*))) (map e434f@version-pred e439f@ver*))) e4398@ls/false) ((lambda (e43a8@t) ((lambda (e43aa@ls/false) (if (and e43aa@ls/false (apply (lambda (e43ac@c e43ad@ver) (eq? (e2fe5@syntax->datum e43ac@c) 'not)) e43aa@ls/false)) (apply (lambda (e43b0@c e43b1@ver) ((lambda (e43b4@p) (lambda (e43b6@x) (not (e43b4@p e43b6@x)))) (e434f@version-pred e43b1@ver))) e43aa@ls/false) ((lambda (e43b8@t) ((lambda (e43ba@ls/false) (if e43ba@ls/false (apply (lambda (e43bc@sub*) ((lambda (e43be@p*) (lambda (e43c0@x) ((letrec ((e43c2@f (lambda (e43c4@p* e43c5@x) (if (null? e43c4@p*) '#t (if (null? e43c5@x) '#f (and ((car e43c4@p*) (car e43c5@x)) (e43c2@f (cdr e43c4@p*) (cdr e43c5@x)))))))) e43c2@f) e43be@p* e43c0@x))) (map e434d@subversion-pred e43bc@sub*))) e43ba@ls/false) ((lambda (e43c8@t) ((lambda (e43ca@ls/false) (if e43ca@ls/false (apply (lambda () (e2fdf@syntax-violation 'import '"invalid version spec" e4348@spec e437c@x*)) e43ca@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e43c8@t))) (e2ef6@syntax-dispatch e43c8@t '_))) e43b8@t))) (e2ef6@syntax-dispatch e43b8@t 'each-any))) e43a8@t))) (e2ef6@syntax-dispatch e43a8@t '(any any)))) e4396@t))) (e2ef6@syntax-dispatch e4396@t '(any . each-any)))) e4384@t))) (e2ef6@syntax-dispatch e4384@t '(any . each-any)))) e437e@t))) (e2ef6@syntax-dispatch e437e@t '()))) e437c@x*))) ((letrec ((e4350@f (lambda (e4352@x) ((lambda (e4354@t) ((lambda (e4356@ls/false) (if e4356@ls/false (apply (lambda (e4358@version-spec*) (values '() (e434f@version-pred e4358@version-spec*))) e4356@ls/false) ((lambda (e435a@t) ((lambda (e435c@ls/false) (if (and e435c@ls/false (apply (lambda (e435e@x e435f@x*) (e427d@idsyn? e435e@x)) e435c@ls/false)) (apply (lambda (e4362@x e4363@x*) (call-with-values (lambda () (e4350@f e4363@x*)) (lambda (e436a@e4367 e436b@e4369) ((lambda (e436e@pred e436f@name) (values (cons (e2fe5@syntax->datum e4362@x) e436f@name) e436e@pred)) e436b@e4369 e436a@e4367)))) e435c@ls/false) ((lambda (e4372@t) ((lambda (e4374@ls/false) (if e4374@ls/false (apply (lambda () (values '() (lambda (e4376@x) '#t))) e4374@ls/false) ((lambda (e4378@t) ((lambda (e437a@ls/false) (if e437a@ls/false (apply (lambda () (e2fdf@syntax-violation '#f '"invalid import spec" e4348@spec)) e437a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4378@t))) (e2ef6@syntax-dispatch e4378@t '_))) e4372@t))) (e2ef6@syntax-dispatch e4372@t '()))) e435a@t))) (e2ef6@syntax-dispatch e435a@t '(any . any)))) e4354@t))) (e2ef6@syntax-dispatch e4354@t '(each-any)))) e4352@x)))) e4350@f) e4348@spec))) '#f '#f '#f))) (set! e428d@import-library (lambda (e4338@spec*) (call-with-values (lambda () (e428b@parse-library-name e4338@spec*)) (lambda (e433e@e433b e433f@e433d) ((lambda (e4342@pred e4343@name) (begin (if (null? e4343@name) (e2fdf@syntax-violation 'import '"empty library name" e4338@spec*) (void)) ((lambda (e4346@lib) (begin (if (not e4346@lib) (e2fdf@syntax-violation 'import '"cannot find library with required name" e4343@name) (void)) (if (not (e4342@pred (e2ae0@e2952@library-version e4346@lib))) (e2fdf@syntax-violation 'import '"library does not satisfy version specification" e4338@spec* e4346@lib) (void)) ((e2f65@imp-collector) e4346@lib) (e2ae4@e295a@library-subst e4346@lib))) (e2b08@e29a2@find-library-by-name e4343@name)))) e433f@e433d e433e@e433b))))) (set! e428f@get-import (lambda (e42aa@spec) ((lambda (e42ac@t) ((lambda (e42ae@ls/false) (if (and e42ae@ls/false (apply (lambda (e42b0@x e42b1@x*) (not (memq (e2fe5@syntax->datum e42b0@x) '(for rename except only prefix library)))) e42ae@ls/false)) (apply (lambda (e42b4@x e42b5@x*) (e428d@import-library (cons e42b4@x e42b5@x*))) e42ae@ls/false) ((lambda (e42b8@t) ((lambda (e42ba@ls/false) (if (and e42ba@ls/false (apply (lambda (e42bc@rename e42bd@isp e42be@old* e42bf@new*) (and (eq? (e2fe5@syntax->datum e42bc@rename) 'rename) (for-all e427d@idsyn? e42be@old*) (for-all e427d@idsyn? e42bf@new*))) e42ba@ls/false)) (apply (lambda (e42c4@rename e42c5@isp e42c6@old* e42c7@new*) ((lambda (e42cc@subst e42cd@old* e42ce@new*) ((lambda (e42d2@old-label*) ((lambda (e42d4@subst) (e4281@merge-substs (map cons e42ce@new* e42d2@old-label*) e42d4@subst)) (e4287@rem* e42cd@old* e42cc@subst))) (e4285@find* e42cd@old* e42cc@subst))) (e428f@get-import e42c5@isp) (map e2fe5@syntax->datum e42c6@old*) (map e2fe5@syntax->datum e42c7@new*))) e42ba@ls/false) ((lambda (e42d6@t) ((lambda (e42d8@ls/false) (if (and e42d8@ls/false (apply (lambda (e42da@except e42db@isp e42dc@sym*) (and (eq? (e2fe5@syntax->datum e42da@except) 'except) (for-all e427d@idsyn? e42dc@sym*))) e42d8@ls/false)) (apply (lambda (e42e0@except e42e1@isp e42e2@sym*) ((lambda (e42e6@subst) (e4287@rem* (map e2fe5@syntax->datum e42e2@sym*) e42e6@subst)) (e428f@get-import e42e1@isp))) e42d8@ls/false) ((lambda (e42e8@t) ((lambda (e42ea@ls/false) (if (and e42ea@ls/false (apply (lambda (e42ec@only e42ed@isp e42ee@sym*) (and (eq? (e2fe5@syntax->datum e42ec@only) 'only) (for-all e427d@idsyn? e42ee@sym*))) e42ea@ls/false)) (apply (lambda (e42f2@only e42f3@isp e42f4@sym*) ((lambda (e42f8@subst e42f9@sym*) ((lambda (e42fc@sym*) ((lambda (e42fe@lab*) (map cons e42fc@sym* e42fe@lab*)) (e4285@find* e42fc@sym* e42f8@subst))) (e4289@remove-dups e42f9@sym*))) (e428f@get-import e42f3@isp) (map e2fe5@syntax->datum e42f4@sym*))) e42ea@ls/false) ((lambda (e4300@t) ((lambda (e4302@ls/false) (if (and e4302@ls/false (apply (lambda (e4304@prefix e4305@isp e4306@p) (and (eq? (e2fe5@syntax->datum e4304@prefix) 'prefix) (e427d@idsyn? e4306@p))) e4302@ls/false)) (apply (lambda (e430a@prefix e430b@isp e430c@p) ((lambda (e4310@subst e4311@prefix) (map (lambda (e4314@x) (cons (string->symbol (string-append e4311@prefix (symbol->string (car e4314@x)))) (cdr e4314@x))) e4310@subst)) (e428f@get-import e430b@isp) (symbol->string (e2fe5@syntax->datum e430c@p)))) e4302@ls/false) ((lambda (e4316@t) ((lambda (e4318@ls/false) (if (and e4318@ls/false (apply (lambda (e431a@library e431b@spec*) (eq? (e2fe5@syntax->datum e431a@library) 'library)) e4318@ls/false)) (apply (lambda (e431e@library e431f@spec*) (e428d@import-library e431f@spec*)) e4318@ls/false) ((lambda (e4322@t) ((lambda (e4324@ls/false) (if (and e4324@ls/false (apply (lambda (e4326@for e4327@isp e4328@rest) (eq? (e2fe5@syntax->datum e4326@for) 'for)) e4324@ls/false)) (apply (lambda (e432c@for e432d@isp e432e@rest) (e428f@get-import e432d@isp)) e4324@ls/false) ((lambda (e4332@t) ((lambda (e4334@ls/false) (if e4334@ls/false (apply (lambda (e4336@spec) (e2fdf@syntax-violation 'import '"invalid import spec" e4336@spec)) e4334@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4332@t))) (e2ef6@syntax-dispatch e4332@t 'any))) e4322@t))) (e2ef6@syntax-dispatch e4322@t '(any any . any)))) e4316@t))) (e2ef6@syntax-dispatch e4316@t '(any each-any)))) e4300@t))) (e2ef6@syntax-dispatch e4300@t '(any any any)))) e42e8@t))) (e2ef6@syntax-dispatch e42e8@t '(any any . each-any)))) e42d6@t))) (e2ef6@syntax-dispatch e42d6@t '(any any . each-any)))) e42b8@t))) (e2ef6@syntax-dispatch e42b8@t '(any any . #(each (any any)))))) e42ac@t))) (e2ef6@syntax-dispatch e42ac@t '(any . each-any)))) e42aa@spec))) (set! e4291@add-imports! (lambda (e429a@imp e429b@h) ((lambda (e429e@subst) (for-each (lambda (e42a0@x) ((lambda (e42a2@name e42a3@label) ((lambda (e42a6@t) (if e42a6@t ((lambda (e42a8@l) (if (not (eq? e42a8@l e42a3@label)) (e427f@dup-error e42a2@name) (void))) e42a6@t) (hashtable-set! e429b@h e42a2@name e42a3@label))) (hashtable-ref e429b@h e42a2@name '#f))) (car e42a0@x) (cdr e42a0@x))) e429e@subst)) (e428f@get-import e429a@imp)))) (lambda (e4292@imp*) ((letrec ((e4294@f (lambda (e4296@imp* e4297@h) (if (null? e4296@imp*) (hashtable-entries e4297@h) (begin (e4291@add-imports! (car e4296@imp*) e4297@h) (e4294@f (cdr e4296@imp*) e4297@h)))))) e4294@f) e4292@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2f5d@make-top-rib (lambda (e4488@names e4489@labels) ((lambda (e448c@rib) (begin (vector-for-each (lambda (e448e@name e448f@label) (begin (if (not (symbol? e448e@name)) (error 'make-top-rib '"BUG: not a symbol" e448e@name) (void)) (e2c9e@extend-rib/nc! e448c@rib (e2cb5@make-stx e448e@name e2c67@top-mark* '() '()) e448f@label))) e4488@names e4489@labels) e448c@rib)) (e2c9a@make-empty-rib)))) (set! e2f5f@make-collector (lambda () ((lambda (e4492@ls) (lambda e4496 ((lambda (e4497) (if (= e4497 '0) (apply (lambda () e4492@ls) e4496) (if (= e4497 '1) (apply (lambda (e4494@x) (set! e4492@ls (e2c60@set-cons e4494@x e4492@ls))) e4496) (error 'apply '"invalid arg count")))) (length e4496)))) '()))) (set! e2f61@inv-collector (e2895@e27bf@make-parameter (lambda e4498@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (e449a@x) (begin (if (not (procedure? e449a@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" e449a@x) (void)) e449a@x)))) (set! e2f63@vis-collector (e2895@e27bf@make-parameter (lambda e449c@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (e449e@x) (begin (if (not (procedure? e449e@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" e449e@x) (void)) e449e@x)))) (set! e2f65@imp-collector (e2895@e27bf@make-parameter (lambda e44a0@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (e44a2@x) (begin (if (not (procedure? e44a2@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" e44a2@x) (void)) e44a2@x)))) (set! e2f67@chi-library-internal (lambda (e44a4@e* e44a5@rib e44a6@top?) (call-with-values (lambda () (e2f51@chi-body* e44a4@e* '() '() '() '() '() '() '() e44a5@rib e44a6@top?)) (lambda (e44ba@e44ab e44bb@e44ad e44bc@e44af e44bd@e44b1 e44be@e44b3 e44bf@e44b5 e44c0@e44b7 e44c1@e44b9) ((lambda (e44ca@exp* e44cb@_kwd* e44cc@mod** e44cd@rhs* e44ce@lex* e44cf@mr e44d0@r e44d1@e*) (values (append (apply append (reverse e44cc@mod**)) e44d1@e*) e44d0@r e44cf@mr (reverse e44ce@lex*) (reverse e44cd@rhs*) e44ca@exp*)) e44c1@e44b9 e44c0@e44b7 e44bf@e44b5 e44be@e44b3 e44bd@e44b1 e44bc@e44af e44bb@e44ad e44ba@e44ab))))) (set! e2f69@chi-interaction-expr (lambda (e44da@e e44db@rib e44dc@r) (call-with-values (lambda () (e2f51@chi-body* (list e44da@e) e44dc@r e44dc@r '() '() '() '() '() e44db@rib '#t)) (lambda (e44f0@e44e1 e44f1@e44e3 e44f2@e44e5 e44f3@e44e7 e44f4@e44e9 e44f5@e44eb e44f6@e44ed e44f7@e44ef) ((lambda (e4500@_exp* e4501@_kwd* e4502@mod** e4503@rhs* e4504@lex* e4505@mr e4506@r e4507@e*) ((lambda (e4510@e*) ((lambda (e4512@e) (values e4512@e e4506@r)) (if (null? e4510@e*) (e2c4b@e2bbb@build-void) (if (null? (cdr e4510@e*)) (car e4510@e*) (e2c4a@e2bb9@build-sequence '#f e4510@e*))))) (e2f26@expand-interaction-rhs*/init* (reverse e4504@lex*) (reverse e4503@rhs*) (append (apply append (reverse e4502@mod**)) e4507@e*) e4506@r e4505@mr))) e44f7@e44ef e44f6@e44ed e44f5@e44eb e44f4@e44e9 e44f3@e44e7 e44f2@e44e5 e44f1@e44e3 e44f0@e44e1))))) (set! e2f6b@library-body-expander (lambda (e4514@name e4515@main-exp* e4516@imp* e4517@b* e4518@top?) ((lambda (e451f@itc) (begin (set! e451f@itc (e2f5f@make-collector)) ((lambda (e4528@e4521 e4529@e4523 e452a@e4525 e452b@e4527) ((lambda (e4530@swap) (dynamic-wind e4530@swap (lambda () (call-with-values (lambda () (e2f5b@parse-import-spec* e4516@imp*)) (lambda (e4536@e4533 e4537@e4535) ((lambda (e453a@subst-labels e453b@subst-names) ((lambda (e453e@rib) ((lambda (e4541@wrap) (begin (set! e4541@wrap (lambda (e45bc@x) (e2cb5@make-stx e45bc@x e2c67@top-mark* (list e453e@rib) '()))) ((lambda (e4542@b* e4543@main-exp* e4544@rtc e4545@vtc) ((lambda (e4552@e454b e4553@e454d e4554@e454f e4555@e4551) ((lambda (e455a@swap) (dynamic-wind e455a@swap (lambda () (call-with-values (lambda () (e2f67@chi-library-internal e4542@b* e453e@rib e4518@top?)) (lambda (e4568@e455d e4569@e455f e456a@e4561 e456b@e4563 e456c@e4565 e456d@e4567) ((lambda (e4574@internal-exp* e4575@rhs* e4576@lex* e4577@mr e4578@r e4579@init*) (call-with-values (lambda () (e2f55@parse-exports (append e4543@main-exp* e4574@internal-exp*))) (lambda (e4584@e4581 e4585@e4583) ((lambda (e4588@exp-id* e4589@exp-name*) (begin (e2ca2@seal-rib! e453e@rib) ((lambda (e458c@init*) ((lambda (e458e@rhs*) ((lambda () (begin (e2ca4@unseal-rib! e453e@rib) ((lambda (e4590@loc* e4591@export-subst) ((lambda (e4595@errstr) (begin (set! e4595@errstr '"attempt to export mutated variable") (call-with-values (lambda () (e2fcb@make-export-env/macros e4576@lex* e4590@loc* e4578@r)) (lambda (e459c@e4597 e459d@e4599 e459e@e459b) ((lambda (e45a2@macro* e45a3@global* e45a4@export-env) (begin (for-each (lambda (e45a8@s) ((lambda (e45aa@name e45ab@label) ((lambda (e45ae@p) (if e45ae@p ((lambda (e45b0@b) ((lambda (e45b2@type) (if (eq? e45b2@type 'mutable) (e2fdf@syntax-violation 'export e4595@errstr e45aa@name) (void))) (car e45b0@b))) (cdr e45ae@p)) (void))) (assq e45ab@label e45a4@export-env))) (car e45a8@s) (cdr e45a8@s))) e4591@export-subst) ((lambda (e45b4@invoke-body e45b5@invoke-definitions) (values (e451f@itc) (e4544@rtc) (e4545@vtc) (e2c4a@e2bb9@build-sequence '#f (append e45b5@invoke-definitions (list e45b4@invoke-body))) e45a2@macro* e4591@export-subst e45a4@export-env)) (e2c4d@e2bbf@build-letrec* '#f e4576@lex* e458e@rhs* (e2fc7@build-exports e45a3@global* e458c@init*)) (map e2c46@e2b16@build-global-define (map cdr e45a3@global*))))) e459e@e459b e459d@e4599 e459c@e4597))))) '#f)) (map e2c6d@gen-global e4576@lex*) (e2fc9@make-export-subst e4589@exp-name* e4588@exp-id*)))))) (e2f28@chi-rhs* e4575@rhs* e4578@r e4577@mr))) (e2f14@chi-expr* e4579@init* e4578@r e4577@mr)))) e4585@e4583 e4584@e4581)))) e456d@e4567 e456c@e4565 e456b@e4563 e456a@e4561 e4569@e455f e4568@e455d)))) e455a@swap)) (lambda () (begin ((lambda (e45b8@t) (begin (e4552@e454b e4554@e454f) (set! e4554@e454f e45b8@t))) (e4552@e454b)) ((lambda (e45ba@t) (begin (e4553@e454d e4555@e4551) (set! e4555@e4551 e45ba@t))) (e4553@e454d)))))) e2f61@inv-collector e2f63@vis-collector e4544@rtc e4545@vtc)) (map e4541@wrap e4517@b*) (map e4541@wrap e4515@main-exp*) (e2f5f@make-collector) (e2f5f@make-collector)))) '#f)) (e2f5d@make-top-rib e453b@subst-names e453a@subst-labels))) e4537@e4535 e4536@e4533)))) e4530@swap)) (lambda () (begin ((lambda (e45be@t) (begin (e4528@e4521 e452a@e4525) (set! e452a@e4525 e45be@t))) (e4528@e4521)) ((lambda (e45c0@t) (begin (e4529@e4523 e452b@e4527) (set! e452b@e4527 e45c0@t))) (e4529@e4523)))))) e2f65@imp-collector e2fed@top-level-context e451f@itc '#f))) '#f))) (set! e2f6d@core-library-expander (lambda (e45c2@e e45c3@verify-name) (call-with-values (lambda () (e2f59@parse-library e45c2@e)) (lambda (e45ce@e45c7 e45cf@e45c9 e45d0@e45cb e45d1@e45cd) ((lambda (e45d6@b* e45d7@imp* e45d8@exp* e45d9@name*) (call-with-values (lambda () (e2f57@parse-library-name e45d9@name*)) (lambda (e45e2@e45df e45e3@e45e1) ((lambda (e45e6@ver e45e7@name) (begin (e45c3@verify-name e45e7@name) (call-with-values (lambda () (e2f6b@library-body-expander e45e7@name e45d8@exp* e45d7@imp* e45d6@b* '#f)) (lambda (e45f8@e45eb e45f9@e45ed e45fa@e45ef e45fb@e45f1 e45fc@e45f3 e45fd@e45f5 e45fe@e45f7) ((lambda (e4606@export-env e4607@export-subst e4608@visit-code e4609@invoke-code e460a@visit-req* e460b@invoke-req* e460c@imp*) (values e45e7@name e45e6@ver e460c@imp* e460b@invoke-req* e460a@visit-req* e4609@invoke-code e4608@visit-code e4607@export-subst e4606@export-env)) e45fe@e45f7 e45fd@e45f5 e45fc@e45f3 e45fb@e45f1 e45fa@e45ef e45f9@e45ed e45f8@e45eb))))) e45e3@e45e1 e45e2@e45df)))) e45d1@e45cd e45d0@e45cb e45cf@e45c9 e45ce@e45c7))))) (set! e2f6f@parse-top-level-program (lambda (e4614@e*) ((lambda (e4616@t) ((lambda (e4618@ls/false) (if (and e4618@ls/false (apply (lambda (e461a@import e461b@imp* e461c@b*) (eq? (e2fe5@syntax->datum e461a@import) 'import)) e4618@ls/false)) (apply (lambda (e4620@import e4621@imp* e4622@b*) (values e4621@imp* e4622@b*)) e4618@ls/false) ((lambda (e4626@t) ((lambda (e4628@ls/false) (if (and e4628@ls/false (apply (lambda (e462a@import e462b@x e462c@y) (eq? (e2fe5@syntax->datum e462a@import) 'import)) e4628@ls/false)) (apply (lambda (e4630@import e4631@x e4632@y) (e2fdf@syntax-violation 'expander '"invalid syntax of top-level program" (e2ce5@syntax-car e4614@e*))) e4628@ls/false) ((lambda (e4636@t) ((lambda (e4638@ls/false) (if e4638@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) e4638@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4636@t))) (e2ef6@syntax-dispatch e4636@t '_))) e4626@t))) (e2ef6@syntax-dispatch e4626@t '((any . any) . any)))) e4616@t))) (e2ef6@syntax-dispatch e4616@t '((any . each-any) . each-any)))) e4614@e*))) (set! e2f71@top-level-expander (lambda (e463a@e*) (call-with-values (lambda () (e2f6f@parse-top-level-program e463a@e*)) (lambda (e4640@e463d e4641@e463f) ((lambda (e4644@b* e4645@imp*) (call-with-values (lambda () (e2f6b@library-body-expander '() '() e4645@imp* e4644@b* '#t)) (lambda (e4656@e4649 e4657@e464b e4658@e464d e4659@e464f e465a@e4651 e465b@e4653 e465c@e4655) ((lambda (e4664@export-env e4665@export-subst e4666@visit-code e4667@invoke-code e4668@visit-req* e4669@invoke-req* e466a@imp*) (values e4669@invoke-req* e4667@invoke-code)) e465c@e4655 e465b@e4653 e465a@e4651 e4659@e464f e4658@e464d e4657@e464b e4656@e4649)))) e4641@e463f e4640@e463d))))) (set! e2f77@e2f72 (make-record-type-descriptor 'env '#f 'e2f75 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! e2f79@e2f74 '#f) (set! e2f7b@e2f73 (make-record-constructor-descriptor e2f77@e2f72 '#f e2f79@e2f74)) (set! e2f7e@env? (record-predicate e2f77@e2f72)) (set! e2f80@make-env (record-constructor e2f7b@e2f73)) (set! e2f82@env-names (record-accessor e2f77@e2f72 '0)) (set! e2f84@env-labels (record-accessor e2f77@e2f72 '1)) (set! e2f86@env-itc (record-accessor e2f77@e2f72 '2)) (set! e2f88@set-env-names! (record-mutator e2f77@e2f72 '0)) (set! e2f8a@set-env-labels! (record-mutator e2f77@e2f72 '1)) (set! e2f8c@set-env-itc! (record-mutator e2f77@e2f72 '2)) (set! e2f8e@rp (e2892@e27b9@make-record-printer 'env (lambda (e4672@x e4673@p e4674@wr) (display '"#<environment>" e4673@p)))) (set! e2f94@e2f8f (make-record-type-descriptor 'interaction-env '#f 'e2f92 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! e2f96@e2f91 '#f) (set! e2f98@e2f90 (make-record-constructor-descriptor e2f94@e2f8f '#f e2f96@e2f91)) (set! e2f9b@interaction-env? (record-predicate e2f94@e2f8f)) (set! e2f9d@make-interaction-env (record-constructor e2f98@e2f90)) (set! e2f9f@interaction-env-rib (record-accessor e2f94@e2f8f '0)) (set! e2fa1@interaction-env-r (record-accessor e2f94@e2f8f '1)) (set! e2fa3@interaction-env-locs (record-accessor e2f94@e2f8f '2)) (set! e2fa5@set-interaction-env-rib! (record-mutator e2f94@e2f8f '0)) (set! e2fa7@set-interaction-env-r! (record-mutator e2f94@e2f8f '1)) (set! e2fa9@set-interaction-env-locs! (record-mutator e2f94@e2f8f '2)) (set! e2fab@rp (e2892@e27b9@make-record-printer 'interaction-env (lambda (e4678@x e4679@p e467a@wr) (display '"#<environment>" e4679@p)))) (set! e2fad@interaction-environment-symbols (lambda () (e2fb5@environment-symbols (e2feb@interaction-environment)))) (set! e2faf@environment-bindings (lambda (e467e@e) (vector->list (vector-map (lambda (e4680@name e4681@label) (e2fb1@parse-binding (cons e4680@name (e2b0e@e29ae@imported-label->binding e4681@label)))) (e2f82@env-names e467e@e) (e2f84@env-labels e467e@e))))) (set! e2fb1@parse-binding (lambda (e4684@b) (cons (car e4684@b) ((lambda (e4686@t) (if (memv e4686@t '(core-prim global)) 'procedure (if (memv e4686@t '(core-macro macro global-macro)) 'syntax (if (memv e4686@t '($core-rtd)) 'record (if (eq? (car e4684@b) (cadr e4684@b)) 'syntax 'unknown))))) (cadr e4684@b))))) (set! e2fb3@environment? (lambda (e4688@x) (or (e2f7e@env? e4688@x) (e2f9b@interaction-env? e4688@x)))) (set! e2fb5@environment-symbols (lambda (e468a@x) (if (e2f7e@env? e468a@x) (vector->list (e2f82@env-names e468a@x)) (if (e2f9b@interaction-env? e468a@x) (map values (e2c86@rib-sym* (e2f9f@interaction-env-rib e468a@x))) (assertion-violation 'environment-symbols '"not an environment" e468a@x))))) (set! e2fb7@environment (lambda e468c@imp* ((lambda (e468e@itc) ((lambda (e4694@e4691 e4695@e4693) ((lambda (e4698@swap) (dynamic-wind e4698@swap (lambda () (call-with-values (lambda () (e2f5b@parse-import-spec* e468c@imp*)) (lambda (e469e@e469b e469f@e469d) ((lambda (e46a2@subst-labels e46a3@subst-names) (e2f80@make-env e46a3@subst-names e46a2@subst-labels e468e@itc)) e469f@e469d e469e@e469b)))) e4698@swap)) (lambda () ((lambda (e46a6@t) (begin (e4694@e4691 e4695@e4693) (set! e4695@e4693 e46a6@t))) (e4694@e4691))))) e2f65@imp-collector e468e@itc)) (e2f5f@make-collector)))) (set! e2fb9@null-environment (lambda (e46a8@n) (begin (if (not (eqv? e46a8@n '5)) (assertion-violation 'null-environment '"not 5" e46a8@n) (void)) (e2fb7@environment '(psyntax null-environment-5))))) (set! e2fbb@scheme-report-environment (lambda (e46aa@n) (begin (if (not (eqv? e46aa@n '5)) (assertion-violation 'scheme-report-environment '"not 5" e46aa@n) (void)) (e2fb7@environment '(psyntax scheme-report-environment-5))))) (set! e2fbd@expand (lambda (e46ac@x e46ad@env) (if (e2f7e@env? e46ad@env) ((lambda (e46b0@rib) ((lambda (e46b2@x e46b3@itc e46b4@rtc e46b5@vtc) ((lambda (e46ba@x) (begin (e2ca2@seal-rib! e46b0@rib) (values e46ba@x (e46b4@rtc)))) ((lambda (e46cc@e46bd e46cd@e46bf e46ce@e46c1 e46cf@e46c3 e46d0@e46c5 e46d1@e46c7 e46d2@e46c9 e46d3@e46cb) ((lambda (e46dc@swap) (dynamic-wind e46dc@swap (lambda () (e2f18@chi-expr e46b2@x '() '())) e46dc@swap)) (lambda () (begin ((lambda (e46de@t) (begin (e46cc@e46bd e46d0@e46c5) (set! e46d0@e46c5 e46de@t))) (e46cc@e46bd)) ((lambda (e46e0@t) (begin (e46cd@e46bf e46d1@e46c7) (set! e46d1@e46c7 e46e0@t))) (e46cd@e46bf)) ((lambda (e46e2@t) (begin (e46ce@e46c1 e46d2@e46c9) (set! e46d2@e46c9 e46e2@t))) (e46ce@e46c1)) ((lambda (e46e4@t) (begin (e46cf@e46c3 e46d3@e46cb) (set! e46d3@e46cb e46e4@t))) (e46cf@e46c3)))))) e2fed@top-level-context e2f61@inv-collector e2f63@vis-collector e2f65@imp-collector '#f e46b4@rtc e46b5@vtc e46b3@itc))) (e2cb5@make-stx e46ac@x e2c67@top-mark* (list e46b0@rib) '()) (e2f86@env-itc e46ad@env) (e2f5f@make-collector) (e2f5f@make-collector))) (e2f5d@make-top-rib (e2f82@env-names e46ad@env) (e2f84@env-labels e46ad@env))) (if (e2f9b@interaction-env? e46ad@env) ((lambda (e46e6@rib e46e7@r e46e8@rtc) ((lambda (e46ec@x) (call-with-values (lambda () ((lambda (e4702@e46f3 e4703@e46f5 e4704@e46f7 e4705@e46f9 e4706@e46fb e4707@e46fd e4708@e46ff e4709@e4701) ((lambda (e4712@swap) (dynamic-wind e4712@swap (lambda () (e2f69@chi-interaction-expr e46ec@x e46e6@rib e46e7@r)) e4712@swap)) (lambda () (begin ((lambda (e4714@t) (begin (e4702@e46f3 e4706@e46fb) (set! e4706@e46fb e4714@t))) (e4702@e46f3)) ((lambda (e4716@t) (begin (e4703@e46f5 e4707@e46fd) (set! e4707@e46fd e4716@t))) (e4703@e46f5)) ((lambda (e4718@t) (begin (e4704@e46f7 e4708@e46ff) (set! e4708@e46ff e4718@t))) (e4704@e46f7)) ((lambda (e471a@t) (begin (e4705@e46f9 e4709@e4701) (set! e4709@e4701 e471a@t))) (e4705@e46f9)))))) e2fed@top-level-context e2f61@inv-collector e2f63@vis-collector e2f65@imp-collector e46ad@env e46e8@rtc (e2f5f@make-collector) (e2f5f@make-collector))) (lambda (e471c@e46ef e471d@e46f1) ((lambda (e4720@r^ e4721@e) (begin (e2fa7@set-interaction-env-r! e46ad@env e4720@r^) (values e4721@e (e46e8@rtc)))) e471d@e46f1 e471c@e46ef)))) (e2cb5@make-stx e46ac@x e2c67@top-mark* (list e46e6@rib) '()))) (e2f9f@interaction-env-rib e46ad@env) (e2fa1@interaction-env-r e46ad@env) (e2f5f@make-collector)) (assertion-violation 'expand '"not an environment" e46ad@env))))) (set! e2fbf@eval (lambda (e4724@x e4725@env) (begin (if (not (e2fb3@environment? e4725@env)) (error 'eval '"not an environment" e4725@env) (void)) (call-with-values (lambda () (e2fbd@expand e4724@x e4725@env)) (lambda (e472c@e4729 e472d@e472b) ((lambda (e4730@invoke-req* e4731@x) (begin (for-each e2b0f@e29b0@invoke-library e4730@invoke-req*) (eval-core (e28e9@e28a1@expanded->core e4731@x)))) e472d@e472b e472c@e4729)))))) (set! e2fc1@library-expander (lambda e47a2 ((lambda (e47a3) (if (= e47a3 '3) (apply (lambda (e4734@x e4735@filename e4736@verify-name) ((lambda (e473b@build-visit-code e473d@visit!) (begin (set! e473b@build-visit-code (lambda (e4790@macro*) (if (null? e4790@macro*) (e2c4b@e2bbb@build-void) (e2c4a@e2bb9@build-sequence '#f (map (lambda (e4792@x) ((lambda (e4794@loc e4795@src) (list 'set! e4794@loc e4795@src)) (car e4792@x) (cddr e4792@x))) e4790@macro*))))) (set! e473d@visit! (lambda (e4788@macro*) (for-each (lambda (e478a@x) ((lambda (e478c@loc e478d@proc) (set-symbol-value! e478c@loc e478d@proc)) (car e478a@x) (cadr e478a@x))) e4788@macro*))) (call-with-values (lambda () (e2f6d@core-library-expander e4734@x e4736@verify-name)) (lambda (e4750@e473f e4751@e4741 e4752@e4743 e4753@e4745 e4754@e4747 e4755@e4749 e4756@e474b e4757@e474d e4758@e474f) ((lambda (e4762@export-env e4763@export-subst e4764@macro* e4765@invoke-code e4766@vis* e4767@inv* e4768@imp* e4769@ver e476a@name) ((lambda (e4774@id e4775@name e4776@ver e4777@imp* e4778@vis* e4779@inv* e477a@visit-proc e477b@invoke-proc e477c@visit-code e477d@invoke-code) (begin (e2b0d@e29ac@install-library e4774@id e4775@name e4776@ver e4777@imp* e4778@vis* e4779@inv* e4763@export-subst e4762@export-env e477a@visit-proc e477b@invoke-proc e477c@visit-code e477d@invoke-code '#t e4735@filename) (values e4774@id e4775@name e4776@ver e4777@imp* e4778@vis* e4779@inv* e477d@invoke-code e477c@visit-code e4763@export-subst e4762@export-env))) (gensym) e476a@name e4769@ver (map e2b13@e29b8@library-spec e4768@imp*) (map e2b13@e29b8@library-spec e4766@vis*) (map e2b13@e29b8@library-spec e4767@inv*) (lambda () (e473d@visit! e4764@macro*)) (lambda () (eval-core (e28e9@e28a1@expanded->core e4765@invoke-code))) (e473b@build-visit-code e4764@macro*) e4765@invoke-code)) e4758@e474f e4757@e474d e4756@e474b e4755@e4749 e4754@e4747 e4753@e4745 e4752@e4743 e4751@e4741 e4750@e473f))))) '#f '#f)) e47a2) (if (= e47a3 '2) (apply (lambda (e4798@x e4799@filename) (e2fc1@library-expander e4798@x e4799@filename (lambda (e479c@x) (values)))) e47a2) (if (= e47a3 '1) (apply (lambda (e479e@x) (e2fc1@library-expander e479e@x '#f (lambda (e47a0@x) (values)))) e47a2) (error 'apply '"invalid arg count"))))) (length e47a2)))) (set! e2fc3@boot-library-expand (lambda (e47a4@x) (call-with-values (lambda () (e2fc1@library-expander e47a4@x)) (lambda (e47ba@e47a7 e47bb@e47a9 e47bc@e47ab e47bd@e47ad e47be@e47af e47bf@e47b1 e47c0@e47b3 e47c1@e47b5 e47c2@e47b7 e47c3@e47b9) ((lambda (e47ce@export-env e47cf@export-subst e47d0@visit-code e47d1@invoke-code e47d2@inv* e47d3@vis* e47d4@imp* e47d5@ver e47d6@name e47d7@id) (values e47d6@name e47d1@invoke-code e47cf@export-subst e47ce@export-env)) e47c3@e47b9 e47c2@e47b7 e47c1@e47b5 e47c0@e47b3 e47bf@e47b1 e47be@e47af e47bd@e47ad e47bc@e47ab e47bb@e47a9 e47ba@e47a7))))) (set! e2fc5@rev-map-append (lambda (e47e2@f e47e3@ls e47e4@ac) (if (null? e47e3@ls) e47e4@ac (e2fc5@rev-map-append e47e2@f (cdr e47e3@ls) (cons (e47e2@f (car e47e3@ls)) e47e4@ac))))) (set! e2fc7@build-exports (lambda (e47e8@lex*+loc* e47e9@init*) (e2c4a@e2bb9@build-sequence '#f (cons (e2c4b@e2bbb@build-void) (e2fc5@rev-map-append (lambda (e47ec@x) (list 'set! (cdr e47ec@x) (car e47ec@x))) e47e8@lex*+loc* e47e9@init*))))) (set! e2fc9@make-export-subst (lambda (e47ee@name* e47ef@id*) (map (lambda (e47f2@name e47f3@id) ((lambda (e47f6@label) (begin (if (not e47f6@label) (e2fdf@syntax-violation '#f '"cannot export unbound identifier" e47f3@id) (void)) (cons e47f2@name e47f6@label))) (e2d05@id->label e47f3@id))) e47ee@name* e47ef@id*))) (set! e2fcb@make-export-env/macros (lambda (e47f8@lex* e47f9@loc* e47fa@r) ((lambda (e47ff@lookup) (begin (set! e47ff@lookup (lambda (e481c@x) ((letrec ((e481e@f (lambda (e4820@x e4821@lex* e4822@loc*) (if (pair? e4821@lex*) (if (eq? e4820@x (car e4821@lex*)) (car e4822@loc*) (e481e@f e4820@x (cdr e4821@lex*) (cdr e4822@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) e481e@f) e481c@x e47f8@lex* e47f9@loc*))) ((letrec ((e4800@f (lambda (e4802@r e4803@env e4804@global* e4805@macro*) (if (null? e4802@r) (values e4803@env e4804@global* e4805@macro*) ((lambda (e480a@x) ((lambda (e480c@label e480d@b) ((lambda (e4810@t) (if (memv e4810@t '(lexical)) ((lambda (e4812@v) ((lambda (e4814@loc e4815@type) (e4800@f (cdr e4802@r) (cons (cons* e480c@label e4815@type e4814@loc) e4803@env) (cons (cons (e2e82@lexical-var e4812@v) e4814@loc) e4804@global*) e4805@macro*)) (e47ff@lookup (e2e82@lexical-var e4812@v)) (if (e2e84@lexical-mutable? e4812@v) 'mutable 'global))) (e2d0f@binding-value e480d@b)) (if (memv e4810@t '(local-macro)) ((lambda (e4818@loc) (e4800@f (cdr e4802@r) (cons (cons* e480c@label 'global-macro e4818@loc) e4803@env) e4804@global* (cons (cons e4818@loc (e2d0f@binding-value e480d@b)) e4805@macro*))) (gensym)) (if (memv e4810@t '(local-macro!)) ((lambda (e481a@loc) (e4800@f (cdr e4802@r) (cons (cons* e480c@label 'global-macro! e481a@loc) e4803@env) e4804@global* (cons (cons e481a@loc (e2d0f@binding-value e480d@b)) e4805@macro*))) (gensym)) (if (memv e4810@t '($rtd $module)) (e4800@f (cdr e4802@r) (cons e480a@x e4803@env) e4804@global* e4805@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (e2d0d@binding-type e480d@b) (e2d0f@binding-value e480d@b))))))) (e2d0d@binding-type e480d@b))) (car e480a@x) (cdr e480a@x))) (car e4802@r)))))) e4800@f) e47fa@r '() '() '()))) '#f))) (set! e2fcd@generate-temporaries (lambda (e4826@ls) ((lambda (e4828@t) ((lambda (e482a@ls/false) (if e482a@ls/false (apply (lambda (e482c@ls) (map (lambda (e482e@x) (e2cb5@make-stx ((lambda (e4830@x) (if (or (symbol? e4830@x) (string? e4830@x)) (gensym e4830@x) (gensym 't))) (e2fe5@syntax->datum e482e@x)) e2c67@top-mark* '() '())) e482c@ls)) e482a@ls/false) ((lambda (e4832@t) ((lambda (e4834@ls/false) (if e4834@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) e4834@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4832@t))) (e2ef6@syntax-dispatch e4832@t '_))) e4828@t))) (e2ef6@syntax-dispatch e4828@t 'each-any))) e4826@ls))) (set! e2fcf@free-identifier=? (lambda (e4836@x e4837@y) (if (e2ceb@id? e4836@x) (if (e2ceb@id? e4837@y) (e2cf3@free-id=? e4836@x e4837@y) (assertion-violation 'free-identifier=? '"not an identifier" e4837@y)) (assertion-violation 'free-identifier=? '"not an identifier" e4836@x)))) (set! e2fd1@bound-identifier=? (lambda (e483a@x e483b@y) (if (e2ceb@id? e483a@x) (if (e2ceb@id? e483b@y) (e2cf1@bound-id=? e483a@x e483b@y) (assertion-violation 'bound-identifier=? '"not an identifier" e483b@y)) (assertion-violation 'bound-identifier=? '"not an identifier" e483a@x)))) (set! e2fd3@make-source-condition (lambda (e483e@x) ((lambda (e4848@e4843 e484a@e4845 e484c@e4844 e484f@e4842 e4851@make-source-condition e4853@e4840 e4855@e4841 e4857@source-condition? e4859@source-filename e485b@source-character) (begin (set! e4848@e4843 (make-record-type-descriptor '&source-information e4ca6@e49ed@&condition-rtd 'e4846 '#f '#f '#((immutable file-name) (immutable character)))) (set! e484a@e4845 '#f) (set! e484c@e4844 (make-record-constructor-descriptor e4848@e4843 e4ca7@e49ef@&condition-rcd e484a@e4845)) (set! e484f@e4842 (record-predicate e4848@e4843)) (set! e4851@make-source-condition (record-constructor e484c@e4844)) (set! e4853@e4840 (record-accessor e4848@e4843 '0)) (set! e4855@e4841 (record-accessor e4848@e4843 '1)) (set! e4857@source-condition? (condition-predicate e4848@e4843)) (set! e4859@source-filename (condition-accessor e4848@e4843 e4853@e4840)) (set! e485b@source-character (condition-accessor e4848@e4843 e4855@e4841)) (if (pair? e483e@x) (e4851@make-source-condition (car e483e@x) (cdr e483e@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! e2fd5@extract-position-condition (lambda (e485c@x) (e2fd3@make-source-condition (e2fd7@expression-position e485c@x)))) (set! e2fd7@expression-position (lambda (e485e@x) (and (e2cb3@stx? e485e@x) ((lambda (e4860@x) (and (e288a@e27a9@annotation? e4860@x) (e288b@e27ab@annotation-source e4860@x))) (e2cb7@stx-expr e485e@x))))) (set! e2fd9@assertion-error (lambda (e4862@expr e4863@pos) (raise (condition (e4cd6@e4ab1@make-assertion-violation) (e4ce8@e4ae3@make-who-condition 'assert) (e4cac@e4a44@make-message-condition '"assertion failed") (e4cde@e4ac8@make-irritants-condition (list e4862@expr)) (e2fd3@make-source-condition e4863@pos))))) (set! e2fdb@syntax-error (lambda (e4866@x . e4868@args) (begin (if (not (for-all string? e4868@args)) (assertion-violation 'syntax-error '"invalid argument" e4868@args) (void)) (raise (condition (e4cac@e4a44@make-message-condition (if (null? e4868@args) '"invalid syntax" (apply string-append e4868@args))) (e4d0a@e4b3f@make-syntax-violation (e2fe5@syntax->datum e4866@x) '#f) (e2fd5@extract-position-condition e4866@x)))))) (set! e2fdd@syntax-violation* (lambda (e486a@who e486b@msg e486c@form e486d@condition-object) (begin (if (not (string? e486b@msg)) (assertion-violation 'syntax-violation '"message is not a string" e486b@msg) (void)) ((lambda (e4872@who) (raise (condition (if e4872@who (e4ce8@e4ae3@make-who-condition e4872@who) (condition)) (e4cac@e4a44@make-message-condition e486b@msg) e486d@condition-object (e2fd5@extract-position-condition e486c@form)))) (if (or (string? e486a@who) (symbol? e486a@who)) e486a@who (if (not e486a@who) ((lambda (e4874@t) ((lambda (e4876@ls/false) (if (and e4876@ls/false (apply (lambda (e4878@id) (e2ceb@id? e4878@id)) e4876@ls/false)) (apply (lambda (e487a@id) (e2fe5@syntax->datum e487a@id)) e4876@ls/false) ((lambda (e487c@t) ((lambda (e487e@ls/false) (if (and e487e@ls/false (apply (lambda (e4880@id e4881@rest) (e2ceb@id? e4880@id)) e487e@ls/false)) (apply (lambda (e4884@id e4885@rest) (e2fe5@syntax->datum e4884@id)) e487e@ls/false) ((lambda (e4888@t) ((lambda (e488a@ls/false) (if e488a@ls/false (apply (lambda () '#f) e488a@ls/false) (e2fdf@syntax-violation '#f '"invalid syntax" e4888@t))) (e2ef6@syntax-dispatch e4888@t '_))) e487c@t))) (e2ef6@syntax-dispatch e487c@t '(any . any)))) e4874@t))) (e2ef6@syntax-dispatch e4874@t 'any))) e486c@form) (assertion-violation 'syntax-violation '"invalid who argument" e486a@who))))))) (set! e2fdf@syntax-violation (lambda e489a ((lambda (e489b) (if (= e489b '3) (apply (lambda (e488c@who e488d@msg e488e@form) (e2fdf@syntax-violation e488c@who e488d@msg e488e@form '#f)) e489a) (if (= e489b '4) (apply (lambda (e4892@who e4893@msg e4894@form e4895@subform) (e2fdd@syntax-violation* e4892@who e4893@msg e4894@form (e4d0a@e4b3f@make-syntax-violation (e2fe5@syntax->datum e4894@form) (e2fe5@syntax->datum e4895@subform)))) e489a) (error 'apply '"invalid arg count")))) (length e489a)))) (set! e2fe1@identifier? (lambda (e489c@x) (e2ceb@id? e489c@x))) (set! e2fe3@datum->syntax (lambda (e489e@id e489f@datum) (if (e2ceb@id? e489e@id) (e2cc9@datum->stx e489e@id e489f@datum) (assertion-violation 'datum->syntax '"not an identifier" e489e@id)))) (set! e2fe5@syntax->datum (lambda (e48a2@x) (e2d01@stx->datum e48a2@x))) (set! e2fe7@compile-r6rs-top-level (lambda (e48a4@x*) (call-with-values (lambda () (e2f71@top-level-expander e48a4@x*)) (lambda (e48aa@e48a7 e48ab@e48a9) ((lambda (e48ae@invoke-code e48af@lib*) (lambda () (begin (for-each e2b0f@e29b0@invoke-library e48af@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (e28e9@e28a1@expanded->core e48ae@invoke-code)) (void)) (eval-core (e28e9@e28a1@expanded->core e48ae@invoke-code))))) e48ab@e48a9 e48aa@e48a7))))) (set! e2fe9@pre-compile-r6rs-top-level (lambda (e48b2@x*) (call-with-values (lambda () (e2f71@top-level-expander e48b2@x*)) (lambda (e48b8@e48b5 e48b9@e48b7) ((lambda (e48bc@invoke-code e48bd@lib*) (begin (for-each e2b0f@e29b0@invoke-library e48bd@lib*) (e2893@e27bb@compile-core (e28e9@e28a1@expanded->core e48bc@invoke-code)))) e48b9@e48b7 e48b8@e48b5))))) (set! e2feb@interaction-environment ((lambda (e48c0@the-env) (lambda () (or e48c0@the-env ((lambda (e48c2@lib e48c3@rib) (begin ((lambda (e48c6@subst) (begin (e2c90@set-rib-sym*! e48c3@rib (map car e48c6@subst)) (e2c92@set-rib-mark**! e48c3@rib (map (lambda (e48c8@x) e2c67@top-mark*) e48c6@subst)) (e2c94@set-rib-label*! e48c3@rib (map cdr e48c6@subst)))) (e2ae4@e295a@library-subst e48c2@lib)) ((lambda (e48ca@env) (begin (set! e48c0@the-env e48ca@env) e48ca@env)) (e2f9d@make-interaction-env e48c3@rib '() '())))) (e2b08@e29a2@find-library-by-name '(mosh interaction)) (e2c9a@make-empty-rib))))) '#f)) (set! e2fed@top-level-context (e2895@e27bf@make-parameter '#f)) (begin (set! e49d8@e2fed@top-level-context e2fed@top-level-context) (set! e49d7@e2feb@interaction-environment e2feb@interaction-environment) (set! e49d6@e2fe9@pre-compile-r6rs-top-level e2fe9@pre-compile-r6rs-top-level) (set! e49d5@e2fe7@compile-r6rs-top-level e2fe7@compile-r6rs-top-level) (set! e49d4@e2fe5@syntax->datum e2fe5@syntax->datum) (set! e49d3@e2fe3@datum->syntax e2fe3@datum->syntax) (set! e49d2@e2fe1@identifier? e2fe1@identifier?) (set! e49d1@e2fdf@syntax-violation e2fdf@syntax-violation) (set! e49d0@e2fdd@syntax-violation* e2fdd@syntax-violation*) (set! e49cf@e2fdb@syntax-error e2fdb@syntax-error) (set! e49ce@e2fd9@assertion-error e2fd9@assertion-error) (set! e49cd@e2fd7@expression-position e2fd7@expression-position) (set! e49cc@e2fd5@extract-position-condition e2fd5@extract-position-condition) (set! e49cb@e2fd3@make-source-condition e2fd3@make-source-condition) (set! e49ca@e2fd1@bound-identifier=? e2fd1@bound-identifier=?) (set! e49c9@e2fcf@free-identifier=? e2fcf@free-identifier=?) (set! e49c8@e2fcd@generate-temporaries e2fcd@generate-temporaries) (set! e49c7@e2fcb@make-export-env/macros e2fcb@make-export-env/macros) (set! e49c6@e2fc9@make-export-subst e2fc9@make-export-subst) (set! e49c5@e2fc7@build-exports e2fc7@build-exports) (set! e49c4@e2fc5@rev-map-append e2fc5@rev-map-append) (set! e49c3@e2fc3@boot-library-expand e2fc3@boot-library-expand) (set! e49c2@e2fc1@library-expander e2fc1@library-expander) (set! e49c1@e2fbf@eval e2fbf@eval) (set! e49c0@e2fbd@expand e2fbd@expand) (set! e49bf@e2fbb@scheme-report-environment e2fbb@scheme-report-environment) (set! e49be@e2fb9@null-environment e2fb9@null-environment) (set! e49bd@e2fb7@environment e2fb7@environment) (set! e49bc@e2fb5@environment-symbols e2fb5@environment-symbols) (set! e49bb@e2fb3@environment? e2fb3@environment?) (set! e49ba@e2fb1@parse-binding e2fb1@parse-binding) (set! e49b9@e2faf@environment-bindings e2faf@environment-bindings) (set! e49b8@e2fad@interaction-environment-symbols e2fad@interaction-environment-symbols) (set! e49b7@e2fab@rp e2fab@rp) (set! e49b6@e2fa9@set-interaction-env-locs! e2fa9@set-interaction-env-locs!) (set! e49b5@e2fa7@set-interaction-env-r! e2fa7@set-interaction-env-r!) (set! e49b4@e2fa5@set-interaction-env-rib! e2fa5@set-interaction-env-rib!) (set! e49b3@e2fa3@interaction-env-locs e2fa3@interaction-env-locs) (set! e49b2@e2fa1@interaction-env-r e2fa1@interaction-env-r) (set! e49b1@e2f9f@interaction-env-rib e2f9f@interaction-env-rib) (set! e49b0@e2f9d@make-interaction-env e2f9d@make-interaction-env) (set! e49af@e2f9b@interaction-env? e2f9b@interaction-env?) (set! e49ae@e2f98@e2f90 e2f98@e2f90) (set! e49ad@e2f96@e2f91 e2f96@e2f91) (set! e49ac@e2f94@e2f8f e2f94@e2f8f) (set! e49ab@e2f8e@rp e2f8e@rp) (set! e49aa@e2f8c@set-env-itc! e2f8c@set-env-itc!) (set! e49a9@e2f8a@set-env-labels! e2f8a@set-env-labels!) (set! e49a8@e2f88@set-env-names! e2f88@set-env-names!) (set! e49a7@e2f86@env-itc e2f86@env-itc) (set! e49a6@e2f84@env-labels e2f84@env-labels) (set! e49a5@e2f82@env-names e2f82@env-names) (set! e49a4@e2f80@make-env e2f80@make-env) (set! e49a3@e2f7e@env? e2f7e@env?) (set! e49a2@e2f7b@e2f73 e2f7b@e2f73) (set! e49a1@e2f79@e2f74 e2f79@e2f74) (set! e49a0@e2f77@e2f72 e2f77@e2f72) (set! e499f@e2f71@top-level-expander e2f71@top-level-expander) (set! e499e@e2f6f@parse-top-level-program e2f6f@parse-top-level-program) (set! e499d@e2f6d@core-library-expander e2f6d@core-library-expander) (set! e499c@e2f6b@library-body-expander e2f6b@library-body-expander) (set! e499b@e2f69@chi-interaction-expr e2f69@chi-interaction-expr) (set! e499a@e2f67@chi-library-internal e2f67@chi-library-internal) (set! e4999@e2f65@imp-collector e2f65@imp-collector) (set! e4998@e2f63@vis-collector e2f63@vis-collector) (set! e4997@e2f61@inv-collector e2f61@inv-collector) (set! e4996@e2f5f@make-collector e2f5f@make-collector) (set! e4995@e2f5d@make-top-rib e2f5d@make-top-rib) (set! e4994@e2f5b@parse-import-spec* e2f5b@parse-import-spec*) (set! e4993@e2f59@parse-library e2f59@parse-library) (set! e4992@e2f57@parse-library-name e2f57@parse-library-name) (set! e4991@e2f55@parse-exports e2f55@parse-exports) (set! e4990@e2f53@expand-transformer e2f53@expand-transformer) (set! e498f@e2f51@chi-body* e2f51@chi-body*) (set! e498e@e2f4f@chi-internal-module e2f4f@chi-internal-module) (set! e498d@e2f4d@module-interface-exp-id* e2f4d@module-interface-exp-id*) (set! e498c@e2f4b@set-module-interface-exp-lab-vec! e2f4b@set-module-interface-exp-lab-vec!) (set! e498b@e2f49@set-module-interface-exp-id-vec! e2f49@set-module-interface-exp-id-vec!) (set! e498a@e2f47@set-module-interface-first-mark! e2f47@set-module-interface-first-mark!) (set! e4989@e2f45@module-interface-exp-lab-vec e2f45@module-interface-exp-lab-vec) (set! e4988@e2f43@module-interface-exp-id-vec e2f43@module-interface-exp-id-vec) (set! e4987@e2f41@module-interface-first-mark e2f41@module-interface-first-mark) (set! e4986@e2f3f@make-module-interface e2f3f@make-module-interface) (set! e4985@e2f3d@module-interface? e2f3d@module-interface?) (set! e4984@e2f3a@e2f32 e2f3a@e2f32) (set! e4983@e2f38@e2f33 e2f38@e2f33) (set! e4982@e2f36@e2f31 e2f36@e2f31) (set! e4981@e2f30@parse-module e2f30@parse-module) (set! e4980@e2f2e@chi-internal e2f2e@chi-internal) (set! e497f@e2f2c@find-dups e2f2c@find-dups) (set! e497e@e2f2a@find-bound=? e2f2a@find-bound=?) (set! e497d@e2f28@chi-rhs* e2f28@chi-rhs*) (set! e497c@e2f26@expand-interaction-rhs*/init* e2f26@expand-interaction-rhs*/init*) (set! e497b@e2f24@chi-rhs e2f24@chi-rhs) (set! e497a@e2f22@chi-defun e2f22@chi-defun) (set! e4979@e2f20@chi-lambda-clause* e2f20@chi-lambda-clause*) (set! e4978@e2f1e@chi-lambda-clause e2f1e@chi-lambda-clause) (set! e4977@e2f1c@verify-formals e2f1c@verify-formals) (set! e4976@e2f1a@chi-set! e2f1a@chi-set!) (set! e4975@e2f18@chi-expr e2f18@chi-expr) (set! e4974@e2f16@chi-application e2f16@chi-application) (set! e4973@e2f14@chi-expr* e2f14@chi-expr*) (set! e4972@e2f12@chi-global-macro e2f12@chi-global-macro) (set! e4971@e2f10@chi-local-macro e2f10@chi-local-macro) (set! e4970@e2f0e@chi-macro e2f0e@chi-macro) (set! e496f@e2f0c@do-macro-call e2f0c@do-macro-call) (set! e496e@e2f0a@local-macro-transformer e2f0a@local-macro-transformer) (set! e496d@e2f08@macro-transformer e2f08@macro-transformer) (set! e496c@e2f06@symbol-macro e2f06@symbol-macro) (set! e496b@e2f04@core-macro-transformer e2f04@core-macro-transformer) (set! e496a@e2f02@syntax-transformer e2f02@syntax-transformer) (set! e4969@e2f00@ellipsis-map e2f00@ellipsis-map) (set! e4968@e2efe@syntax-case-transformer e2efe@syntax-case-transformer) (set! e4967@e2efc@verify-literals e2efc@verify-literals) (set! e4966@e2efa@underscore? e2efa@underscore?) (set! e4965@e2ef8@ellipsis? e2ef8@ellipsis?) (set! e4964@e2ef6@syntax-dispatch e2ef6@syntax-dispatch) (set! e4963@e2ef4@convert-pattern e2ef4@convert-pattern) (set! e4962@e2ef2@foreign-call-transformer e2ef2@foreign-call-transformer) (set! e4961@e2ef0@parameterize-macro e2ef0@parameterize-macro) (set! e4960@e2eee@incorrect-usage-macro e2eee@incorrect-usage-macro) (set! e495f@e2eec@define-condition-type-macro e2eec@define-condition-type-macro) (set! e495e@e2eea@define-record-type-macro e2eea@define-record-type-macro) (set! e495d@e2ee8@define-struct-macro e2ee8@define-struct-macro) (set! e495c@e2ee6@quasisyntax-macro e2ee6@quasisyntax-macro) (set! e495b@e2ee4@quasiquote-macro e2ee4@quasiquote-macro) (set! e495a@e2ee2@syntax-rules-macro e2ee2@syntax-rules-macro) (set! e4959@e2ee0@include-into-macro e2ee0@include-into-macro) (set! e4958@e2ede@include-macro e2ede@include-macro) (set! e4957@e2edc@do-include e2edc@do-include) (set! e4956@e2eda@cond-macro e2eda@cond-macro) (set! e4955@e2ed8@and-macro e2ed8@and-macro) (set! e4954@e2ed6@or-macro e2ed6@or-macro) (set! e4953@e2ed4@let*-macro e2ed4@let*-macro) (set! e4952@e2ed2@do-macro e2ed2@do-macro) (set! e4951@e2ed0@identifier-syntax-macro e2ed0@identifier-syntax-macro) (set! e4950@e2ece@endianness-macro e2ece@endianness-macro) (set! e494f@e2ecc@assert-macro e2ecc@assert-macro) (set! e494e@e2eca@delay-macro e2eca@delay-macro) (set! e494d@e2ec8@time-macro e2ec8@time-macro) (set! e494c@e2ec6@define-enumeration-macro e2ec6@define-enumeration-macro) (set! e494b@e2ec4@guard-macro e2ec4@guard-macro) (set! e494a@e2ec2@trace-letrec-syntax-macro e2ec2@trace-letrec-syntax-macro) (set! e4949@e2ec0@trace-let-syntax-macro e2ec0@trace-let-syntax-macro) (set! e4948@e2ebe@trace-let/rec-syntax e2ebe@trace-let/rec-syntax) (set! e4947@e2ebc@trace-define-syntax-macro e2ebc@trace-define-syntax-macro) (set! e4946@e2eba@trace-define-macro e2eba@trace-define-macro) (set! e4945@e2eb8@trace-lambda-macro e2eb8@trace-lambda-macro) (set! e4944@e2eb6@let*-values-macro e2eb6@let*-values-macro) (set! e4943@e2eb4@let-values-macro e2eb4@let-values-macro) (set! e4942@e2eb2@let-macro e2eb2@let-macro) (set! e4941@e2eb0@invalid-fmls-error e2eb0@invalid-fmls-error) (set! e4940@e2eae@with-syntax-macro e2eae@with-syntax-macro) (set! e493f@e2eac@bless e2eac@bless) (set! e493e@e2eaa@lambda-transformer e2eaa@lambda-transformer) (set! e493d@e2ea8@case-lambda-transformer e2ea8@case-lambda-transformer) (set! e493c@e2ea6@quote-transformer e2ea6@quote-transformer) (set! e493b@e2ea4@case-macro e2ea4@case-macro) (set! e493a@e2ea2@or-transformer e2ea2@or-transformer) (set! e4939@e2ea0@and-transformer e2ea0@and-transformer) (set! e4938@e2e9e@if-transformer e2e9e@if-transformer) (set! e4937@e2e9c@unless-macro e2e9c@unless-macro) (set! e4936@e2e9a@when-macro e2e9a@when-macro) (set! e4935@e2e98@record-constructor-descriptor-transformer e2e98@record-constructor-descriptor-transformer) (set! e4934@e2e96@record-type-descriptor-transformer e2e96@record-type-descriptor-transformer) (set! e4933@e2e94@type-descriptor-transformer e2e94@type-descriptor-transformer) (set! e4932@e2e92@fluid-let-syntax-transformer e2e92@fluid-let-syntax-transformer) (set! e4931@e2e90@letrec*-transformer e2e90@letrec*-transformer) (set! e4930@e2e8e@letrec-transformer e2e8e@letrec-transformer) (set! e492f@e2e8c@letrec-helper e2e8c@letrec-helper) (set! e492e@e2e8a@add-lexicals e2e8a@add-lexicals) (set! e492d@e2e88@add-lexical e2e88@add-lexical) (set! e492c@e2e86@set-lexical-mutable! e2e86@set-lexical-mutable!) (set! e492b@e2e84@lexical-mutable? e2e84@lexical-mutable?) (set! e492a@e2e82@lexical-var e2e82@lexical-var) (set! e4929@e2e80@scheme-stx e2e80@scheme-stx) (set! e4928@e2e7e@scheme-stx-hashtable e2e7e@scheme-stx-hashtable) (set! e4927@e2e7c@parse-define-syntax e2e7c@parse-define-syntax) (set! e4926@e2e7a@parse-define e2e7a@parse-define) (set! e4925@e2d29@make-eval-transformer e2d29@make-eval-transformer) (set! e4924@e2d27@variable-transformer-procedure e2d27@variable-transformer-procedure) (set! e4923@e2d25@variable-transformer? e2d25@variable-transformer?) (set! e4922@e2d23@make-variable-transformer e2d23@make-variable-transformer) (set! e4921@e2d21@sanitize-binding e2d21@sanitize-binding) (set! e4920@e2d13@syntax-type e2d13@syntax-type) (set! e491f@e2d11@raise-unbound-error e2d11@raise-unbound-error) (set! e491e@e2d0f@binding-value e2d0f@binding-value) (set! e491d@e2d0d@binding-type e2d0d@binding-type) (set! e491c@e2d0b@make-binding e2d0b@make-binding) (set! e491b@e2d09@label->binding e2d09@label->binding) (set! e491a@e2d07@id->real-label e2d07@id->real-label) (set! e4919@e2d05@id->label e2d05@id->label) (set! e4918@e2d03@same-marks*? e2d03@same-marks*?) (set! e4917@e2d01@stx->datum e2d01@stx->datum) (set! e4916@e2cff@strip e2cff@strip) (set! e4915@e2cfd@strip-annotations e2cfd@strip-annotations) (set! e4914@e2cfb@self-evaluating? e2cfb@self-evaluating?) (set! e4913@e2cf9@bound-id-member? e2cf9@bound-id-member?) (set! e4912@e2cf7@distinct-bound-ids? e2cf7@distinct-bound-ids?) (set! e4911@e2cf5@valid-bound-ids? e2cf5@valid-bound-ids?) (set! e4910@e2cf3@free-id=? e2cf3@free-id=?) (set! e490f@e2cf1@bound-id=? e2cf1@bound-id=?) (set! e490e@e2cef@same-marks? e2cef@same-marks?) (set! e490d@e2ced@id->sym e2ced@id->sym) (set! e490c@e2ceb@id? e2ceb@id?) (set! e490b@e2ce9@syntax->list e2ce9@syntax->list) (set! e490a@e2ce7@syntax-cdr e2ce7@syntax-cdr) (set! e4909@e2ce5@syntax-car e2ce5@syntax-car) (set! e4908@e2ce3@syntax-list? e2ce3@syntax-list?) (set! e4907@e2ce1@syntax-null? e2ce1@syntax-null?) (set! e4906@e2cdf@syntax-vector? e2cdf@syntax-vector?) (set! e4905@e2cdd@syntax-pair? e2cdd@syntax-pair?) (set! e4904@e2cdb@syntax-vector->list e2cdb@syntax-vector->list) (set! e4903@e2cd9@syntax-kind? e2cd9@syntax-kind?) (set! e4902@e2cd7@add-subst e2cd7@add-subst) (set! e4901@e2cd5@add-mark e2cd5@add-mark) (set! e4900@e2cd3@mkstx e2cd3@mkstx) (set! e48ff@e2cd1@join-wraps e2cd1@join-wraps) (set! e48fe@e2ccf@anti-mark? e2ccf@anti-mark?) (set! e48fd@e2ccd@anti-mark e2ccd@anti-mark) (set! e48fc@e2ccb@gen-mark e2ccb@gen-mark) (set! e48fb@e2cc9@datum->stx e2cc9@datum->stx) (set! e48fa@e2cc7@rp e2cc7@rp) (set! e48f9@e2cc5@set-stx-ae*! e2cc5@set-stx-ae*!) (set! e48f8@e2cc3@set-stx-subst*! e2cc3@set-stx-subst*!) (set! e48f7@e2cc1@set-stx-mark*! e2cc1@set-stx-mark*!) (set! e48f6@e2cbf@set-stx-expr! e2cbf@set-stx-expr!) (set! e48f5@e2cbd@stx-ae* e2cbd@stx-ae*) (set! e48f4@e2cbb@stx-subst* e2cbb@stx-subst*) (set! e48f3@e2cb9@stx-mark* e2cb9@stx-mark*) (set! e48f2@e2cb7@stx-expr e2cb7@stx-expr) (set! e48f1@e2cb5@make-stx e2cb5@make-stx) (set! e48f0@e2cb3@stx? e2cb3@stx?) (set! e48ef@e2cb0@e2ca8 e2cb0@e2ca8) (set! e48ee@e2cae@e2ca9 e2cae@e2ca9) (set! e48ed@e2cac@e2ca7 e2cac@e2ca7) (set! e48ec@e2ca6@make-full-rib e2ca6@make-full-rib) (set! e48eb@e2ca4@unseal-rib! e2ca4@unseal-rib!) (set! e48ea@e2ca2@seal-rib! e2ca2@seal-rib!) (set! e48e9@e2ca0@make-rib-map e2ca0@make-rib-map) (set! e48e8@e2c9e@extend-rib/nc! e2c9e@extend-rib/nc!) (set! e48e7@e2c9c@extend-rib! e2c9c@extend-rib!) (set! e48e6@e2c9a@make-empty-rib e2c9a@make-empty-rib) (set! e48e5@e2c98@set-rib-cache! e2c98@set-rib-cache!) (set! e48e4@e2c96@set-rib-sealed/freq! e2c96@set-rib-sealed/freq!) (set! e48e3@e2c94@set-rib-label*! e2c94@set-rib-label*!) (set! e48e2@e2c92@set-rib-mark**! e2c92@set-rib-mark**!) (set! e48e1@e2c90@set-rib-sym*! e2c90@set-rib-sym*!) (set! e48e0@e2c8e@rib-cache e2c8e@rib-cache) (set! e48df@e2c8c@rib-sealed/freq e2c8c@rib-sealed/freq) (set! e48de@e2c8a@rib-label* e2c8a@rib-label*) (set! e48dd@e2c88@rib-mark** e2c88@rib-mark**) (set! e48dc@e2c86@rib-sym* e2c86@rib-sym*) (set! e48db@e2c84@make-rib e2c84@make-rib) (set! e48da@e2c82@rib? e2c82@rib?) (set! e48d9@e2c7f@e2c77 e2c7f@e2c77) (set! e48d8@e2c7d@e2c78 e2c7d@e2c78) (set! e48d7@e2c7b@e2c76 e2c7b@e2c76) (set! e48d6@e2c75@gen-define-label e2c75@gen-define-label) (set! e48d5@e2c73@gen-define-label+loc e2c73@gen-define-label+loc) (set! e48d4@e2c71@gen-top-level-label e2c71@gen-top-level-label) (set! e48d3@e2c6f@gen-label e2c6f@gen-label) (set! e48d2@e2c6d@gen-global e2c6d@gen-global) (set! e48d1@e2c6b@gen-lexical e2c6b@gen-lexical) (set! e48d0@e2c69@top-marked? e2c69@top-marked?) (set! e48cf@e2c67@top-mark* e2c67@top-mark*) (set! e48ce@e2c62@set-union e2c62@set-union) (set! e48cd@e2c60@set-cons e2c60@set-cons) (set! e48cc@e2c5e@file-options-macro e2c5e@file-options-macro) (e2b05@e299c@current-library-expander e2fc1@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e49e2@e49dd e49e4@e49df e49e6@e49de e49e9@&condition? e49eb@make-&condition e49ed@&condition-rtd e49ef@&condition-rcd e4a3b@e4a36 e4a3d@e4a38 e4a3f@e4a37 e4a42@p? e4a44@make-message-condition e4a46@e4a35 e4a48@message-condition? e4a4a@condition-message e4a4c@&message-rtd e4a4e@&message-rcd e4a54@e4a4f e4a56@e4a51 e4a58@e4a50 e4a5b@p? e4a5d@make-warning e4a5f@warning? e4a61@&warning-rtd e4a63@&warning-rcd e4a69@e4a64 e4a6b@e4a66 e4a6d@e4a65 e4a70@p? e4a72@make-serious-condition e4a74@serious-condition? e4a76@&serious-rtd e4a78@&serious-rcd e4a7e@e4a79 e4a80@e4a7b e4a82@e4a7a e4a85@p? e4a87@make-error e4a89@error? e4a8b@&error-rtd e4a8d@&error-rcd e4a93@e4a8e e4a95@e4a90 e4a97@e4a8f e4a9a@p? e4a9c@make-violation e4a9e@violation? e4aa0@&violation-rtd e4aa2@&violation-rcd e4aa8@e4aa3 e4aaa@e4aa5 e4aac@e4aa4 e4aaf@p? e4ab1@make-assertion-violation e4ab3@assertion-violation? e4ab5@&assertion-rtd e4ab7@&assertion-rcd e4abf@e4aba e4ac1@e4abc e4ac3@e4abb e4ac6@p? e4ac8@make-irritants-condition e4aca@e4ab9 e4acc@irritants-condition? e4ace@condition-irritants e4ad0@&irritants-rtd e4ad2@&irritants-rcd e4ada@e4ad5 e4adc@e4ad7 e4ade@e4ad6 e4ae1@p? e4ae3@make-who-condition e4ae5@e4ad4 e4ae7@who-condition? e4ae9@condition-who e4aeb@&who-rtd e4aed@&who-rcd e4af3@e4aee e4af5@e4af0 e4af7@e4aef e4afa@p? e4afc@make-non-continuable-violation e4afe@non-continuable-violation? e4b00@&non-continuable-rtd e4b02@&non-continuable-rcd e4b08@e4b03 e4b0a@e4b05 e4b0c@e4b04 e4b0f@p? e4b11@make-implementation-restriction-violation e4b13@implementation-restriction-violation? e4b15@&implementation-restriction-rtd e4b17@&implementation-restriction-rcd e4b1d@e4b18 e4b1f@e4b1a e4b21@e4b19 e4b24@p? e4b26@make-lexical-violation e4b28@lexical-violation? e4b2a@&lexical-rtd e4b2c@&lexical-rcd e4b36@e4b31 e4b38@e4b33 e4b3a@e4b32 e4b3d@p? e4b3f@make-syntax-violation e4b41@e4b2e e4b43@e4b30 e4b45@syntax-violation? e4b47@syntax-violation-form e4b49@syntax-violation-subform e4b4b@&syntax-rtd e4b4d@&syntax-rcd e4b53@e4b4e e4b55@e4b50 e4b57@e4b4f e4b5a@p? e4b5c@make-undefined-violation e4b5e@undefined-violation? e4b60@&undefined-rtd e4b62@&undefined-rcd e4b68@e4b63 e4b6a@e4b65 e4b6c@e4b64 e4b6f@p? e4b71@make-i/o-error e4b73@i/o-error? e4b75@&i/o-rtd e4b77@&i/o-rcd e4b7d@e4b78 e4b7f@e4b7a e4b81@e4b79 e4b84@p? e4b86@make-i/o-read-error e4b88@i/o-read-error? e4b8a@&i/o-read-rtd e4b8c@&i/o-read-rcd e4b92@e4b8d e4b94@e4b8f e4b96@e4b8e e4b99@p? e4b9b@make-i/o-write-error e4b9d@i/o-write-error? e4b9f@&i/o-write-rtd e4ba1@&i/o-write-rcd e4ba9@e4ba4 e4bab@e4ba6 e4bad@e4ba5 e4bb0@p? e4bb2@make-i/o-invalid-position-error e4bb4@e4ba3 e4bb6@i/o-invalid-position-error? e4bb8@i/o-error-position e4bba@&i/o-invalid-position-rtd e4bbc@&i/o-invalid-position-rcd e4bc4@e4bbf e4bc6@e4bc1 e4bc8@e4bc0 e4bcb@p? e4bcd@make-i/o-filename-error e4bcf@e4bbe e4bd1@i/o-filename-error? e4bd3@i/o-error-filename e4bd5@&i/o-filename-rtd e4bd7@&i/o-filename-rcd e4bdd@e4bd8 e4bdf@e4bda e4be1@e4bd9 e4be4@p? e4be6@make-i/o-file-protection-error e4be8@i/o-file-protection-error? e4bea@&i/o-file-protection-rtd e4bec@&i/o-file-protection-rcd e4bf2@e4bed e4bf4@e4bef e4bf6@e4bee e4bf9@p? e4bfb@make-i/o-file-is-read-only-error e4bfd@i/o-file-is-read-only-error? e4bff@&i/o-file-is-read-only-rtd e4c01@&i/o-file-is-read-only-rcd e4c07@e4c02 e4c09@e4c04 e4c0b@e4c03 e4c0e@p? e4c10@make-i/o-file-already-exists-error e4c12@i/o-file-already-exists-error? e4c14@&i/o-file-already-exists-rtd e4c16@&i/o-file-already-exists-rcd e4c1c@e4c17 e4c1e@e4c19 e4c20@e4c18 e4c23@p? e4c25@make-i/o-file-does-not-exist-error e4c27@i/o-file-does-not-exist-error? e4c29@&i/o-file-does-not-exist-rtd e4c2b@&i/o-file-does-not-exist-rcd e4c33@e4c2e e4c35@e4c30 e4c37@e4c2f e4c3a@p? e4c3c@make-i/o-port-error e4c3e@e4c2d e4c40@i/o-port-error? e4c42@i/o-error-port e4c44@&i/o-port-rtd e4c46@&i/o-port-rcd e4c4c@e4c47 e4c4e@e4c49 e4c50@e4c48 e4c53@p? e4c55@make-i/o-decoding-error e4c57@i/o-decoding-error? e4c59@&i/o-decoding-rtd e4c5b@&i/o-decoding-rcd e4c63@e4c5e e4c65@e4c60 e4c67@e4c5f e4c6a@p? e4c6c@make-i/o-encoding-error e4c6e@e4c5d e4c70@i/o-encoding-error? e4c72@i/o-encoding-error-char e4c74@&i/o-encoding-rtd e4c76@&i/o-encoding-rcd e4c7c@e4c77 e4c7e@e4c79 e4c80@e4c78 e4c83@p? e4c85@make-no-infinities-violation e4c87@no-infinities-violation? e4c89@&no-infinities-rtd e4c8b@&no-infinities-rcd e4c91@e4c8c e4c93@e4c8e e4c95@e4c8d e4c98@p? e4c9a@make-no-nans-violation e4c9c@no-nans-violation? e4c9e@&no-nans-rtd e4ca0@&no-nans-rcd) (begin (set! e49e2@e49dd (make-record-type-descriptor '&condition '#f 'e49e0 '#f '#f '#())) (set! e49e4@e49df '#f) (set! e49e6@e49de (make-record-constructor-descriptor e49e2@e49dd '#f e49e4@e49df)) (set! e49e9@&condition? (record-predicate e49e2@e49dd)) (set! e49eb@make-&condition (record-constructor e49e6@e49de)) (set! e49ed@&condition-rtd e49e2@e49dd) (set! e49ef@&condition-rcd e49e6@e49de) (set! e4a3b@e4a36 (make-record-type-descriptor '&message e49e2@e49dd 'e4a39 '#f '#f '#((immutable message)))) (set! e4a3d@e4a38 '#f) (set! e4a3f@e4a37 (make-record-constructor-descriptor e4a3b@e4a36 e49e6@e49de e4a3d@e4a38)) (set! e4a42@p? (record-predicate e4a3b@e4a36)) (set! e4a44@make-message-condition (record-constructor e4a3f@e4a37)) (set! e4a46@e4a35 (record-accessor e4a3b@e4a36 '0)) (set! e4a48@message-condition? (condition-predicate e4a3b@e4a36)) (set! e4a4a@condition-message (condition-accessor e4a3b@e4a36 e4a46@e4a35)) (set! e4a4c@&message-rtd e4a3b@e4a36) (set! e4a4e@&message-rcd e4a3f@e4a37) (set! e4a54@e4a4f (make-record-type-descriptor '&warning e49e2@e49dd 'e4a52 '#f '#f '#())) (set! e4a56@e4a51 '#f) (set! e4a58@e4a50 (make-record-constructor-descriptor e4a54@e4a4f e49e6@e49de e4a56@e4a51)) (set! e4a5b@p? (record-predicate e4a54@e4a4f)) (set! e4a5d@make-warning (record-constructor e4a58@e4a50)) (set! e4a5f@warning? (condition-predicate e4a54@e4a4f)) (set! e4a61@&warning-rtd e4a54@e4a4f) (set! e4a63@&warning-rcd e4a58@e4a50) (set! e4a69@e4a64 (make-record-type-descriptor '&serious e49e2@e49dd 'e4a67 '#f '#f '#())) (set! e4a6b@e4a66 '#f) (set! e4a6d@e4a65 (make-record-constructor-descriptor e4a69@e4a64 e49e6@e49de e4a6b@e4a66)) (set! e4a70@p? (record-predicate e4a69@e4a64)) (set! e4a72@make-serious-condition (record-constructor e4a6d@e4a65)) (set! e4a74@serious-condition? (condition-predicate e4a69@e4a64)) (set! e4a76@&serious-rtd e4a69@e4a64) (set! e4a78@&serious-rcd e4a6d@e4a65) (set! e4a7e@e4a79 (make-record-type-descriptor '&error e4a69@e4a64 'e4a7c '#f '#f '#())) (set! e4a80@e4a7b '#f) (set! e4a82@e4a7a (make-record-constructor-descriptor e4a7e@e4a79 e4a6d@e4a65 e4a80@e4a7b)) (set! e4a85@p? (record-predicate e4a7e@e4a79)) (set! e4a87@make-error (record-constructor e4a82@e4a7a)) (set! e4a89@error? (condition-predicate e4a7e@e4a79)) (set! e4a8b@&error-rtd e4a7e@e4a79) (set! e4a8d@&error-rcd e4a82@e4a7a) (set! e4a93@e4a8e (make-record-type-descriptor '&violation e4a69@e4a64 'e4a91 '#f '#f '#())) (set! e4a95@e4a90 '#f) (set! e4a97@e4a8f (make-record-constructor-descriptor e4a93@e4a8e e4a6d@e4a65 e4a95@e4a90)) (set! e4a9a@p? (record-predicate e4a93@e4a8e)) (set! e4a9c@make-violation (record-constructor e4a97@e4a8f)) (set! e4a9e@violation? (condition-predicate e4a93@e4a8e)) (set! e4aa0@&violation-rtd e4a93@e4a8e) (set! e4aa2@&violation-rcd e4a97@e4a8f) (set! e4aa8@e4aa3 (make-record-type-descriptor '&assertion e4a93@e4a8e 'e4aa6 '#f '#f '#())) (set! e4aaa@e4aa5 '#f) (set! e4aac@e4aa4 (make-record-constructor-descriptor e4aa8@e4aa3 e4a97@e4a8f e4aaa@e4aa5)) (set! e4aaf@p? (record-predicate e4aa8@e4aa3)) (set! e4ab1@make-assertion-violation (record-constructor e4aac@e4aa4)) (set! e4ab3@assertion-violation? (condition-predicate e4aa8@e4aa3)) (set! e4ab5@&assertion-rtd e4aa8@e4aa3) (set! e4ab7@&assertion-rcd e4aac@e4aa4) (set! e4abf@e4aba (make-record-type-descriptor '&irritants e49e2@e49dd 'e4abd '#f '#f '#((immutable irritants)))) (set! e4ac1@e4abc '#f) (set! e4ac3@e4abb (make-record-constructor-descriptor e4abf@e4aba e49e6@e49de e4ac1@e4abc)) (set! e4ac6@p? (record-predicate e4abf@e4aba)) (set! e4ac8@make-irritants-condition (record-constructor e4ac3@e4abb)) (set! e4aca@e4ab9 (record-accessor e4abf@e4aba '0)) (set! e4acc@irritants-condition? (condition-predicate e4abf@e4aba)) (set! e4ace@condition-irritants (condition-accessor e4abf@e4aba e4aca@e4ab9)) (set! e4ad0@&irritants-rtd e4abf@e4aba) (set! e4ad2@&irritants-rcd e4ac3@e4abb) (set! e4ada@e4ad5 (make-record-type-descriptor '&who e49e2@e49dd 'e4ad8 '#f '#f '#((immutable who)))) (set! e4adc@e4ad7 '#f) (set! e4ade@e4ad6 (make-record-constructor-descriptor e4ada@e4ad5 e49e6@e49de e4adc@e4ad7)) (set! e4ae1@p? (record-predicate e4ada@e4ad5)) (set! e4ae3@make-who-condition (record-constructor e4ade@e4ad6)) (set! e4ae5@e4ad4 (record-accessor e4ada@e4ad5 '0)) (set! e4ae7@who-condition? (condition-predicate e4ada@e4ad5)) (set! e4ae9@condition-who (condition-accessor e4ada@e4ad5 e4ae5@e4ad4)) (set! e4aeb@&who-rtd e4ada@e4ad5) (set! e4aed@&who-rcd e4ade@e4ad6) (set! e4af3@e4aee (make-record-type-descriptor '&non-continuable e4a93@e4a8e 'e4af1 '#f '#f '#())) (set! e4af5@e4af0 '#f) (set! e4af7@e4aef (make-record-constructor-descriptor e4af3@e4aee e4a97@e4a8f e4af5@e4af0)) (set! e4afa@p? (record-predicate e4af3@e4aee)) (set! e4afc@make-non-continuable-violation (record-constructor e4af7@e4aef)) (set! e4afe@non-continuable-violation? (condition-predicate e4af3@e4aee)) (set! e4b00@&non-continuable-rtd e4af3@e4aee) (set! e4b02@&non-continuable-rcd e4af7@e4aef) (set! e4b08@e4b03 (make-record-type-descriptor '&implementation-restriction e4a93@e4a8e 'e4b06 '#f '#f '#())) (set! e4b0a@e4b05 '#f) (set! e4b0c@e4b04 (make-record-constructor-descriptor e4b08@e4b03 e4a97@e4a8f e4b0a@e4b05)) (set! e4b0f@p? (record-predicate e4b08@e4b03)) (set! e4b11@make-implementation-restriction-violation (record-constructor e4b0c@e4b04)) (set! e4b13@implementation-restriction-violation? (condition-predicate e4b08@e4b03)) (set! e4b15@&implementation-restriction-rtd e4b08@e4b03) (set! e4b17@&implementation-restriction-rcd e4b0c@e4b04) (set! e4b1d@e4b18 (make-record-type-descriptor '&lexical e4a93@e4a8e 'e4b1b '#f '#f '#())) (set! e4b1f@e4b1a '#f) (set! e4b21@e4b19 (make-record-constructor-descriptor e4b1d@e4b18 e4a97@e4a8f e4b1f@e4b1a)) (set! e4b24@p? (record-predicate e4b1d@e4b18)) (set! e4b26@make-lexical-violation (record-constructor e4b21@e4b19)) (set! e4b28@lexical-violation? (condition-predicate e4b1d@e4b18)) (set! e4b2a@&lexical-rtd e4b1d@e4b18) (set! e4b2c@&lexical-rcd e4b21@e4b19) (set! e4b36@e4b31 (make-record-type-descriptor '&syntax e4a93@e4a8e 'e4b34 '#f '#f '#((immutable form) (immutable subform)))) (set! e4b38@e4b33 '#f) (set! e4b3a@e4b32 (make-record-constructor-descriptor e4b36@e4b31 e4a97@e4a8f e4b38@e4b33)) (set! e4b3d@p? (record-predicate e4b36@e4b31)) (set! e4b3f@make-syntax-violation (record-constructor e4b3a@e4b32)) (set! e4b41@e4b2e (record-accessor e4b36@e4b31 '0)) (set! e4b43@e4b30 (record-accessor e4b36@e4b31 '1)) (set! e4b45@syntax-violation? (condition-predicate e4b36@e4b31)) (set! e4b47@syntax-violation-form (condition-accessor e4b36@e4b31 e4b41@e4b2e)) (set! e4b49@syntax-violation-subform (condition-accessor e4b36@e4b31 e4b43@e4b30)) (set! e4b4b@&syntax-rtd e4b36@e4b31) (set! e4b4d@&syntax-rcd e4b3a@e4b32) (set! e4b53@e4b4e (make-record-type-descriptor '&undefined e4a93@e4a8e 'e4b51 '#f '#f '#())) (set! e4b55@e4b50 '#f) (set! e4b57@e4b4f (make-record-constructor-descriptor e4b53@e4b4e e4a97@e4a8f e4b55@e4b50)) (set! e4b5a@p? (record-predicate e4b53@e4b4e)) (set! e4b5c@make-undefined-violation (record-constructor e4b57@e4b4f)) (set! e4b5e@undefined-violation? (condition-predicate e4b53@e4b4e)) (set! e4b60@&undefined-rtd e4b53@e4b4e) (set! e4b62@&undefined-rcd e4b57@e4b4f) (set! e4b68@e4b63 (make-record-type-descriptor '&i/o e4a7e@e4a79 'e4b66 '#f '#f '#())) (set! e4b6a@e4b65 '#f) (set! e4b6c@e4b64 (make-record-constructor-descriptor e4b68@e4b63 e4a82@e4a7a e4b6a@e4b65)) (set! e4b6f@p? (record-predicate e4b68@e4b63)) (set! e4b71@make-i/o-error (record-constructor e4b6c@e4b64)) (set! e4b73@i/o-error? (condition-predicate e4b68@e4b63)) (set! e4b75@&i/o-rtd e4b68@e4b63) (set! e4b77@&i/o-rcd e4b6c@e4b64) (set! e4b7d@e4b78 (make-record-type-descriptor '&i/o-read e4b68@e4b63 'e4b7b '#f '#f '#())) (set! e4b7f@e4b7a '#f) (set! e4b81@e4b79 (make-record-constructor-descriptor e4b7d@e4b78 e4b6c@e4b64 e4b7f@e4b7a)) (set! e4b84@p? (record-predicate e4b7d@e4b78)) (set! e4b86@make-i/o-read-error (record-constructor e4b81@e4b79)) (set! e4b88@i/o-read-error? (condition-predicate e4b7d@e4b78)) (set! e4b8a@&i/o-read-rtd e4b7d@e4b78) (set! e4b8c@&i/o-read-rcd e4b81@e4b79) (set! e4b92@e4b8d (make-record-type-descriptor '&i/o-write e4b68@e4b63 'e4b90 '#f '#f '#())) (set! e4b94@e4b8f '#f) (set! e4b96@e4b8e (make-record-constructor-descriptor e4b92@e4b8d e4b6c@e4b64 e4b94@e4b8f)) (set! e4b99@p? (record-predicate e4b92@e4b8d)) (set! e4b9b@make-i/o-write-error (record-constructor e4b96@e4b8e)) (set! e4b9d@i/o-write-error? (condition-predicate e4b92@e4b8d)) (set! e4b9f@&i/o-write-rtd e4b92@e4b8d) (set! e4ba1@&i/o-write-rcd e4b96@e4b8e) (set! e4ba9@e4ba4 (make-record-type-descriptor '&i/o-invalid-position e4b68@e4b63 'e4ba7 '#f '#f '#((immutable position)))) (set! e4bab@e4ba6 '#f) (set! e4bad@e4ba5 (make-record-constructor-descriptor e4ba9@e4ba4 e4b6c@e4b64 e4bab@e4ba6)) (set! e4bb0@p? (record-predicate e4ba9@e4ba4)) (set! e4bb2@make-i/o-invalid-position-error (record-constructor e4bad@e4ba5)) (set! e4bb4@e4ba3 (record-accessor e4ba9@e4ba4 '0)) (set! e4bb6@i/o-invalid-position-error? (condition-predicate e4ba9@e4ba4)) (set! e4bb8@i/o-error-position (condition-accessor e4ba9@e4ba4 e4bb4@e4ba3)) (set! e4bba@&i/o-invalid-position-rtd e4ba9@e4ba4) (set! e4bbc@&i/o-invalid-position-rcd e4bad@e4ba5) (set! e4bc4@e4bbf (make-record-type-descriptor '&i/o-filename e4b68@e4b63 'e4bc2 '#f '#f '#((immutable filename)))) (set! e4bc6@e4bc1 '#f) (set! e4bc8@e4bc0 (make-record-constructor-descriptor e4bc4@e4bbf e4b6c@e4b64 e4bc6@e4bc1)) (set! e4bcb@p? (record-predicate e4bc4@e4bbf)) (set! e4bcd@make-i/o-filename-error (record-constructor e4bc8@e4bc0)) (set! e4bcf@e4bbe (record-accessor e4bc4@e4bbf '0)) (set! e4bd1@i/o-filename-error? (condition-predicate e4bc4@e4bbf)) (set! e4bd3@i/o-error-filename (condition-accessor e4bc4@e4bbf e4bcf@e4bbe)) (set! e4bd5@&i/o-filename-rtd e4bc4@e4bbf) (set! e4bd7@&i/o-filename-rcd e4bc8@e4bc0) (set! e4bdd@e4bd8 (make-record-type-descriptor '&i/o-file-protection e4bc4@e4bbf 'e4bdb '#f '#f '#())) (set! e4bdf@e4bda '#f) (set! e4be1@e4bd9 (make-record-constructor-descriptor e4bdd@e4bd8 e4bc8@e4bc0 e4bdf@e4bda)) (set! e4be4@p? (record-predicate e4bdd@e4bd8)) (set! e4be6@make-i/o-file-protection-error (record-constructor e4be1@e4bd9)) (set! e4be8@i/o-file-protection-error? (condition-predicate e4bdd@e4bd8)) (set! e4bea@&i/o-file-protection-rtd e4bdd@e4bd8) (set! e4bec@&i/o-file-protection-rcd e4be1@e4bd9) (set! e4bf2@e4bed (make-record-type-descriptor '&i/o-file-is-read-only e4bdd@e4bd8 'e4bf0 '#f '#f '#())) (set! e4bf4@e4bef '#f) (set! e4bf6@e4bee (make-record-constructor-descriptor e4bf2@e4bed e4be1@e4bd9 e4bf4@e4bef)) (set! e4bf9@p? (record-predicate e4bf2@e4bed)) (set! e4bfb@make-i/o-file-is-read-only-error (record-constructor e4bf6@e4bee)) (set! e4bfd@i/o-file-is-read-only-error? (condition-predicate e4bf2@e4bed)) (set! e4bff@&i/o-file-is-read-only-rtd e4bf2@e4bed) (set! e4c01@&i/o-file-is-read-only-rcd e4bf6@e4bee) (set! e4c07@e4c02 (make-record-type-descriptor '&i/o-file-already-exists e4bc4@e4bbf 'e4c05 '#f '#f '#())) (set! e4c09@e4c04 '#f) (set! e4c0b@e4c03 (make-record-constructor-descriptor e4c07@e4c02 e4bc8@e4bc0 e4c09@e4c04)) (set! e4c0e@p? (record-predicate e4c07@e4c02)) (set! e4c10@make-i/o-file-already-exists-error (record-constructor e4c0b@e4c03)) (set! e4c12@i/o-file-already-exists-error? (condition-predicate e4c07@e4c02)) (set! e4c14@&i/o-file-already-exists-rtd e4c07@e4c02) (set! e4c16@&i/o-file-already-exists-rcd e4c0b@e4c03) (set! e4c1c@e4c17 (make-record-type-descriptor '&i/o-file-does-not-exist e4bc4@e4bbf 'e4c1a '#f '#f '#())) (set! e4c1e@e4c19 '#f) (set! e4c20@e4c18 (make-record-constructor-descriptor e4c1c@e4c17 e4bc8@e4bc0 e4c1e@e4c19)) (set! e4c23@p? (record-predicate e4c1c@e4c17)) (set! e4c25@make-i/o-file-does-not-exist-error (record-constructor e4c20@e4c18)) (set! e4c27@i/o-file-does-not-exist-error? (condition-predicate e4c1c@e4c17)) (set! e4c29@&i/o-file-does-not-exist-rtd e4c1c@e4c17) (set! e4c2b@&i/o-file-does-not-exist-rcd e4c20@e4c18) (set! e4c33@e4c2e (make-record-type-descriptor '&i/o-port e4b68@e4b63 'e4c31 '#f '#f '#((immutable port)))) (set! e4c35@e4c30 '#f) (set! e4c37@e4c2f (make-record-constructor-descriptor e4c33@e4c2e e4b6c@e4b64 e4c35@e4c30)) (set! e4c3a@p? (record-predicate e4c33@e4c2e)) (set! e4c3c@make-i/o-port-error (record-constructor e4c37@e4c2f)) (set! e4c3e@e4c2d (record-accessor e4c33@e4c2e '0)) (set! e4c40@i/o-port-error? (condition-predicate e4c33@e4c2e)) (set! e4c42@i/o-error-port (condition-accessor e4c33@e4c2e e4c3e@e4c2d)) (set! e4c44@&i/o-port-rtd e4c33@e4c2e) (set! e4c46@&i/o-port-rcd e4c37@e4c2f) (set! e4c4c@e4c47 (make-record-type-descriptor '&i/o-decoding e4c33@e4c2e 'e4c4a '#f '#f '#())) (set! e4c4e@e4c49 '#f) (set! e4c50@e4c48 (make-record-constructor-descriptor e4c4c@e4c47 e4c37@e4c2f e4c4e@e4c49)) (set! e4c53@p? (record-predicate e4c4c@e4c47)) (set! e4c55@make-i/o-decoding-error (record-constructor e4c50@e4c48)) (set! e4c57@i/o-decoding-error? (condition-predicate e4c4c@e4c47)) (set! e4c59@&i/o-decoding-rtd e4c4c@e4c47) (set! e4c5b@&i/o-decoding-rcd e4c50@e4c48) (set! e4c63@e4c5e (make-record-type-descriptor '&i/o-encoding e4c33@e4c2e 'e4c61 '#f '#f '#((immutable char)))) (set! e4c65@e4c60 '#f) (set! e4c67@e4c5f (make-record-constructor-descriptor e4c63@e4c5e e4c37@e4c2f e4c65@e4c60)) (set! e4c6a@p? (record-predicate e4c63@e4c5e)) (set! e4c6c@make-i/o-encoding-error (record-constructor e4c67@e4c5f)) (set! e4c6e@e4c5d (record-accessor e4c63@e4c5e '0)) (set! e4c70@i/o-encoding-error? (condition-predicate e4c63@e4c5e)) (set! e4c72@i/o-encoding-error-char (condition-accessor e4c63@e4c5e e4c6e@e4c5d)) (set! e4c74@&i/o-encoding-rtd e4c63@e4c5e) (set! e4c76@&i/o-encoding-rcd e4c67@e4c5f) (set! e4c7c@e4c77 (make-record-type-descriptor '&no-infinities e4b08@e4b03 'e4c7a '#f '#f '#())) (set! e4c7e@e4c79 '#f) (set! e4c80@e4c78 (make-record-constructor-descriptor e4c7c@e4c77 e4b0c@e4b04 e4c7e@e4c79)) (set! e4c83@p? (record-predicate e4c7c@e4c77)) (set! e4c85@make-no-infinities-violation (record-constructor e4c80@e4c78)) (set! e4c87@no-infinities-violation? (condition-predicate e4c7c@e4c77)) (set! e4c89@&no-infinities-rtd e4c7c@e4c77) (set! e4c8b@&no-infinities-rcd e4c80@e4c78) (set! e4c91@e4c8c (make-record-type-descriptor '&no-nans e4b08@e4b03 'e4c8f '#f '#f '#())) (set! e4c93@e4c8e '#f) (set! e4c95@e4c8d (make-record-constructor-descriptor e4c91@e4c8c e4b0c@e4b04 e4c93@e4c8e)) (set! e4c98@p? (record-predicate e4c91@e4c8c)) (set! e4c9a@make-no-nans-violation (record-constructor e4c95@e4c8d)) (set! e4c9c@no-nans-violation? (condition-predicate e4c91@e4c8c)) (set! e4c9e@&no-nans-rtd e4c91@e4c8c) (set! e4ca0@&no-nans-rcd e4c95@e4c8d) (begin (set! e4d91@e4ca0@&no-nans-rcd e4ca0@&no-nans-rcd) (set! e4d90@e4c9e@&no-nans-rtd e4c9e@&no-nans-rtd) (set! e4d8f@e4c9c@no-nans-violation? e4c9c@no-nans-violation?) (set! e4d8e@e4c9a@make-no-nans-violation e4c9a@make-no-nans-violation) (set! e4d8d@e4c98@p? e4c98@p?) (set! e4d8c@e4c95@e4c8d e4c95@e4c8d) (set! e4d8b@e4c93@e4c8e e4c93@e4c8e) (set! e4d8a@e4c91@e4c8c e4c91@e4c8c) (set! e4d89@e4c8b@&no-infinities-rcd e4c8b@&no-infinities-rcd) (set! e4d88@e4c89@&no-infinities-rtd e4c89@&no-infinities-rtd) (set! e4d87@e4c87@no-infinities-violation? e4c87@no-infinities-violation?) (set! e4d86@e4c85@make-no-infinities-violation e4c85@make-no-infinities-violation) (set! e4d85@e4c83@p? e4c83@p?) (set! e4d84@e4c80@e4c78 e4c80@e4c78) (set! e4d83@e4c7e@e4c79 e4c7e@e4c79) (set! e4d82@e4c7c@e4c77 e4c7c@e4c77) (set! e4d81@e4c76@&i/o-encoding-rcd e4c76@&i/o-encoding-rcd) (set! e4d80@e4c74@&i/o-encoding-rtd e4c74@&i/o-encoding-rtd) (set! e4d7f@e4c72@i/o-encoding-error-char e4c72@i/o-encoding-error-char) (set! e4d7e@e4c70@i/o-encoding-error? e4c70@i/o-encoding-error?) (set! e4d7d@e4c6e@e4c5d e4c6e@e4c5d) (set! e4d7c@e4c6c@make-i/o-encoding-error e4c6c@make-i/o-encoding-error) (set! e4d7b@e4c6a@p? e4c6a@p?) (set! e4d7a@e4c67@e4c5f e4c67@e4c5f) (set! e4d79@e4c65@e4c60 e4c65@e4c60) (set! e4d78@e4c63@e4c5e e4c63@e4c5e) (set! e4d77@e4c5b@&i/o-decoding-rcd e4c5b@&i/o-decoding-rcd) (set! e4d76@e4c59@&i/o-decoding-rtd e4c59@&i/o-decoding-rtd) (set! e4d75@e4c57@i/o-decoding-error? e4c57@i/o-decoding-error?) (set! e4d74@e4c55@make-i/o-decoding-error e4c55@make-i/o-decoding-error) (set! e4d73@e4c53@p? e4c53@p?) (set! e4d72@e4c50@e4c48 e4c50@e4c48) (set! e4d71@e4c4e@e4c49 e4c4e@e4c49) (set! e4d70@e4c4c@e4c47 e4c4c@e4c47) (set! e4d6f@e4c46@&i/o-port-rcd e4c46@&i/o-port-rcd) (set! e4d6e@e4c44@&i/o-port-rtd e4c44@&i/o-port-rtd) (set! e4d6d@e4c42@i/o-error-port e4c42@i/o-error-port) (set! e4d6c@e4c40@i/o-port-error? e4c40@i/o-port-error?) (set! e4d6b@e4c3e@e4c2d e4c3e@e4c2d) (set! e4d6a@e4c3c@make-i/o-port-error e4c3c@make-i/o-port-error) (set! e4d69@e4c3a@p? e4c3a@p?) (set! e4d68@e4c37@e4c2f e4c37@e4c2f) (set! e4d67@e4c35@e4c30 e4c35@e4c30) (set! e4d66@e4c33@e4c2e e4c33@e4c2e) (set! e4d65@e4c2b@&i/o-file-does-not-exist-rcd e4c2b@&i/o-file-does-not-exist-rcd) (set! e4d64@e4c29@&i/o-file-does-not-exist-rtd e4c29@&i/o-file-does-not-exist-rtd) (set! e4d63@e4c27@i/o-file-does-not-exist-error? e4c27@i/o-file-does-not-exist-error?) (set! e4d62@e4c25@make-i/o-file-does-not-exist-error e4c25@make-i/o-file-does-not-exist-error) (set! e4d61@e4c23@p? e4c23@p?) (set! e4d60@e4c20@e4c18 e4c20@e4c18) (set! e4d5f@e4c1e@e4c19 e4c1e@e4c19) (set! e4d5e@e4c1c@e4c17 e4c1c@e4c17) (set! e4d5d@e4c16@&i/o-file-already-exists-rcd e4c16@&i/o-file-already-exists-rcd) (set! e4d5c@e4c14@&i/o-file-already-exists-rtd e4c14@&i/o-file-already-exists-rtd) (set! e4d5b@e4c12@i/o-file-already-exists-error? e4c12@i/o-file-already-exists-error?) (set! e4d5a@e4c10@make-i/o-file-already-exists-error e4c10@make-i/o-file-already-exists-error) (set! e4d59@e4c0e@p? e4c0e@p?) (set! e4d58@e4c0b@e4c03 e4c0b@e4c03) (set! e4d57@e4c09@e4c04 e4c09@e4c04) (set! e4d56@e4c07@e4c02 e4c07@e4c02) (set! e4d55@e4c01@&i/o-file-is-read-only-rcd e4c01@&i/o-file-is-read-only-rcd) (set! e4d54@e4bff@&i/o-file-is-read-only-rtd e4bff@&i/o-file-is-read-only-rtd) (set! e4d53@e4bfd@i/o-file-is-read-only-error? e4bfd@i/o-file-is-read-only-error?) (set! e4d52@e4bfb@make-i/o-file-is-read-only-error e4bfb@make-i/o-file-is-read-only-error) (set! e4d51@e4bf9@p? e4bf9@p?) (set! e4d50@e4bf6@e4bee e4bf6@e4bee) (set! e4d4f@e4bf4@e4bef e4bf4@e4bef) (set! e4d4e@e4bf2@e4bed e4bf2@e4bed) (set! e4d4d@e4bec@&i/o-file-protection-rcd e4bec@&i/o-file-protection-rcd) (set! e4d4c@e4bea@&i/o-file-protection-rtd e4bea@&i/o-file-protection-rtd) (set! e4d4b@e4be8@i/o-file-protection-error? e4be8@i/o-file-protection-error?) (set! e4d4a@e4be6@make-i/o-file-protection-error e4be6@make-i/o-file-protection-error) (set! e4d49@e4be4@p? e4be4@p?) (set! e4d48@e4be1@e4bd9 e4be1@e4bd9) (set! e4d47@e4bdf@e4bda e4bdf@e4bda) (set! e4d46@e4bdd@e4bd8 e4bdd@e4bd8) (set! e4d45@e4bd7@&i/o-filename-rcd e4bd7@&i/o-filename-rcd) (set! e4d44@e4bd5@&i/o-filename-rtd e4bd5@&i/o-filename-rtd) (set! e4d43@e4bd3@i/o-error-filename e4bd3@i/o-error-filename) (set! e4d42@e4bd1@i/o-filename-error? e4bd1@i/o-filename-error?) (set! e4d41@e4bcf@e4bbe e4bcf@e4bbe) (set! e4d40@e4bcd@make-i/o-filename-error e4bcd@make-i/o-filename-error) (set! e4d3f@e4bcb@p? e4bcb@p?) (set! e4d3e@e4bc8@e4bc0 e4bc8@e4bc0) (set! e4d3d@e4bc6@e4bc1 e4bc6@e4bc1) (set! e4d3c@e4bc4@e4bbf e4bc4@e4bbf) (set! e4d3b@e4bbc@&i/o-invalid-position-rcd e4bbc@&i/o-invalid-position-rcd) (set! e4d3a@e4bba@&i/o-invalid-position-rtd e4bba@&i/o-invalid-position-rtd) (set! e4d39@e4bb8@i/o-error-position e4bb8@i/o-error-position) (set! e4d38@e4bb6@i/o-invalid-position-error? e4bb6@i/o-invalid-position-error?) (set! e4d37@e4bb4@e4ba3 e4bb4@e4ba3) (set! e4d36@e4bb2@make-i/o-invalid-position-error e4bb2@make-i/o-invalid-position-error) (set! e4d35@e4bb0@p? e4bb0@p?) (set! e4d34@e4bad@e4ba5 e4bad@e4ba5) (set! e4d33@e4bab@e4ba6 e4bab@e4ba6) (set! e4d32@e4ba9@e4ba4 e4ba9@e4ba4) (set! e4d31@e4ba1@&i/o-write-rcd e4ba1@&i/o-write-rcd) (set! e4d30@e4b9f@&i/o-write-rtd e4b9f@&i/o-write-rtd) (set! e4d2f@e4b9d@i/o-write-error? e4b9d@i/o-write-error?) (set! e4d2e@e4b9b@make-i/o-write-error e4b9b@make-i/o-write-error) (set! e4d2d@e4b99@p? e4b99@p?) (set! e4d2c@e4b96@e4b8e e4b96@e4b8e) (set! e4d2b@e4b94@e4b8f e4b94@e4b8f) (set! e4d2a@e4b92@e4b8d e4b92@e4b8d) (set! e4d29@e4b8c@&i/o-read-rcd e4b8c@&i/o-read-rcd) (set! e4d28@e4b8a@&i/o-read-rtd e4b8a@&i/o-read-rtd) (set! e4d27@e4b88@i/o-read-error? e4b88@i/o-read-error?) (set! e4d26@e4b86@make-i/o-read-error e4b86@make-i/o-read-error) (set! e4d25@e4b84@p? e4b84@p?) (set! e4d24@e4b81@e4b79 e4b81@e4b79) (set! e4d23@e4b7f@e4b7a e4b7f@e4b7a) (set! e4d22@e4b7d@e4b78 e4b7d@e4b78) (set! e4d21@e4b77@&i/o-rcd e4b77@&i/o-rcd) (set! e4d20@e4b75@&i/o-rtd e4b75@&i/o-rtd) (set! e4d1f@e4b73@i/o-error? e4b73@i/o-error?) (set! e4d1e@e4b71@make-i/o-error e4b71@make-i/o-error) (set! e4d1d@e4b6f@p? e4b6f@p?) (set! e4d1c@e4b6c@e4b64 e4b6c@e4b64) (set! e4d1b@e4b6a@e4b65 e4b6a@e4b65) (set! e4d1a@e4b68@e4b63 e4b68@e4b63) (set! e4d19@e4b62@&undefined-rcd e4b62@&undefined-rcd) (set! e4d18@e4b60@&undefined-rtd e4b60@&undefined-rtd) (set! e4d17@e4b5e@undefined-violation? e4b5e@undefined-violation?) (set! e4d16@e4b5c@make-undefined-violation e4b5c@make-undefined-violation) (set! e4d15@e4b5a@p? e4b5a@p?) (set! e4d14@e4b57@e4b4f e4b57@e4b4f) (set! e4d13@e4b55@e4b50 e4b55@e4b50) (set! e4d12@e4b53@e4b4e e4b53@e4b4e) (set! e4d11@e4b4d@&syntax-rcd e4b4d@&syntax-rcd) (set! e4d10@e4b4b@&syntax-rtd e4b4b@&syntax-rtd) (set! e4d0f@e4b49@syntax-violation-subform e4b49@syntax-violation-subform) (set! e4d0e@e4b47@syntax-violation-form e4b47@syntax-violation-form) (set! e4d0d@e4b45@syntax-violation? e4b45@syntax-violation?) (set! e4d0c@e4b43@e4b30 e4b43@e4b30) (set! e4d0b@e4b41@e4b2e e4b41@e4b2e) (set! e4d0a@e4b3f@make-syntax-violation e4b3f@make-syntax-violation) (set! e4d09@e4b3d@p? e4b3d@p?) (set! e4d08@e4b3a@e4b32 e4b3a@e4b32) (set! e4d07@e4b38@e4b33 e4b38@e4b33) (set! e4d06@e4b36@e4b31 e4b36@e4b31) (set! e4d05@e4b2c@&lexical-rcd e4b2c@&lexical-rcd) (set! e4d04@e4b2a@&lexical-rtd e4b2a@&lexical-rtd) (set! e4d03@e4b28@lexical-violation? e4b28@lexical-violation?) (set! e4d02@e4b26@make-lexical-violation e4b26@make-lexical-violation) (set! e4d01@e4b24@p? e4b24@p?) (set! e4d00@e4b21@e4b19 e4b21@e4b19) (set! e4cff@e4b1f@e4b1a e4b1f@e4b1a) (set! e4cfe@e4b1d@e4b18 e4b1d@e4b18) (set! e4cfd@e4b17@&implementation-restriction-rcd e4b17@&implementation-restriction-rcd) (set! e4cfc@e4b15@&implementation-restriction-rtd e4b15@&implementation-restriction-rtd) (set! e4cfb@e4b13@implementation-restriction-violation? e4b13@implementation-restriction-violation?) (set! e4cfa@e4b11@make-implementation-restriction-violation e4b11@make-implementation-restriction-violation) (set! e4cf9@e4b0f@p? e4b0f@p?) (set! e4cf8@e4b0c@e4b04 e4b0c@e4b04) (set! e4cf7@e4b0a@e4b05 e4b0a@e4b05) (set! e4cf6@e4b08@e4b03 e4b08@e4b03) (set! e4cf5@e4b02@&non-continuable-rcd e4b02@&non-continuable-rcd) (set! e4cf4@e4b00@&non-continuable-rtd e4b00@&non-continuable-rtd) (set! e4cf3@e4afe@non-continuable-violation? e4afe@non-continuable-violation?) (set! e4cf2@e4afc@make-non-continuable-violation e4afc@make-non-continuable-violation) (set! e4cf1@e4afa@p? e4afa@p?) (set! e4cf0@e4af7@e4aef e4af7@e4aef) (set! e4cef@e4af5@e4af0 e4af5@e4af0) (set! e4cee@e4af3@e4aee e4af3@e4aee) (set! e4ced@e4aed@&who-rcd e4aed@&who-rcd) (set! e4cec@e4aeb@&who-rtd e4aeb@&who-rtd) (set! e4ceb@e4ae9@condition-who e4ae9@condition-who) (set! e4cea@e4ae7@who-condition? e4ae7@who-condition?) (set! e4ce9@e4ae5@e4ad4 e4ae5@e4ad4) (set! e4ce8@e4ae3@make-who-condition e4ae3@make-who-condition) (set! e4ce7@e4ae1@p? e4ae1@p?) (set! e4ce6@e4ade@e4ad6 e4ade@e4ad6) (set! e4ce5@e4adc@e4ad7 e4adc@e4ad7) (set! e4ce4@e4ada@e4ad5 e4ada@e4ad5) (set! e4ce3@e4ad2@&irritants-rcd e4ad2@&irritants-rcd) (set! e4ce2@e4ad0@&irritants-rtd e4ad0@&irritants-rtd) (set! e4ce1@e4ace@condition-irritants e4ace@condition-irritants) (set! e4ce0@e4acc@irritants-condition? e4acc@irritants-condition?) (set! e4cdf@e4aca@e4ab9 e4aca@e4ab9) (set! e4cde@e4ac8@make-irritants-condition e4ac8@make-irritants-condition) (set! e4cdd@e4ac6@p? e4ac6@p?) (set! e4cdc@e4ac3@e4abb e4ac3@e4abb) (set! e4cdb@e4ac1@e4abc e4ac1@e4abc) (set! e4cda@e4abf@e4aba e4abf@e4aba) (set! e4cd9@e4ab7@&assertion-rcd e4ab7@&assertion-rcd) (set! e4cd8@e4ab5@&assertion-rtd e4ab5@&assertion-rtd) (set! e4cd7@e4ab3@assertion-violation? e4ab3@assertion-violation?) (set! e4cd6@e4ab1@make-assertion-violation e4ab1@make-assertion-violation) (set! e4cd5@e4aaf@p? e4aaf@p?) (set! e4cd4@e4aac@e4aa4 e4aac@e4aa4) (set! e4cd3@e4aaa@e4aa5 e4aaa@e4aa5) (set! e4cd2@e4aa8@e4aa3 e4aa8@e4aa3) (set! e4cd1@e4aa2@&violation-rcd e4aa2@&violation-rcd) (set! e4cd0@e4aa0@&violation-rtd e4aa0@&violation-rtd) (set! e4ccf@e4a9e@violation? e4a9e@violation?) (set! e4cce@e4a9c@make-violation e4a9c@make-violation) (set! e4ccd@e4a9a@p? e4a9a@p?) (set! e4ccc@e4a97@e4a8f e4a97@e4a8f) (set! e4ccb@e4a95@e4a90 e4a95@e4a90) (set! e4cca@e4a93@e4a8e e4a93@e4a8e) (set! e4cc9@e4a8d@&error-rcd e4a8d@&error-rcd) (set! e4cc8@e4a8b@&error-rtd e4a8b@&error-rtd) (set! e4cc7@e4a89@error? e4a89@error?) (set! e4cc6@e4a87@make-error e4a87@make-error) (set! e4cc5@e4a85@p? e4a85@p?) (set! e4cc4@e4a82@e4a7a e4a82@e4a7a) (set! e4cc3@e4a80@e4a7b e4a80@e4a7b) (set! e4cc2@e4a7e@e4a79 e4a7e@e4a79) (set! e4cc1@e4a78@&serious-rcd e4a78@&serious-rcd) (set! e4cc0@e4a76@&serious-rtd e4a76@&serious-rtd) (set! e4cbf@e4a74@serious-condition? e4a74@serious-condition?) (set! e4cbe@e4a72@make-serious-condition e4a72@make-serious-condition) (set! e4cbd@e4a70@p? e4a70@p?) (set! e4cbc@e4a6d@e4a65 e4a6d@e4a65) (set! e4cbb@e4a6b@e4a66 e4a6b@e4a66) (set! e4cba@e4a69@e4a64 e4a69@e4a64) (set! e4cb9@e4a63@&warning-rcd e4a63@&warning-rcd) (set! e4cb8@e4a61@&warning-rtd e4a61@&warning-rtd) (set! e4cb7@e4a5f@warning? e4a5f@warning?) (set! e4cb6@e4a5d@make-warning e4a5d@make-warning) (set! e4cb5@e4a5b@p? e4a5b@p?) (set! e4cb4@e4a58@e4a50 e4a58@e4a50) (set! e4cb3@e4a56@e4a51 e4a56@e4a51) (set! e4cb2@e4a54@e4a4f e4a54@e4a4f) (set! e4cb1@e4a4e@&message-rcd e4a4e@&message-rcd) (set! e4cb0@e4a4c@&message-rtd e4a4c@&message-rtd) (set! e4caf@e4a4a@condition-message e4a4a@condition-message) (set! e4cae@e4a48@message-condition? e4a48@message-condition?) (set! e4cad@e4a46@e4a35 e4a46@e4a35) (set! e4cac@e4a44@make-message-condition e4a44@make-message-condition) (set! e4cab@e4a42@p? e4a42@p?) (set! e4caa@e4a3f@e4a37 e4a3f@e4a37) (set! e4ca9@e4a3d@e4a38 e4a3d@e4a38) (set! e4ca8@e4a3b@e4a36 e4a3b@e4a36) (set! e4ca7@e49ef@&condition-rcd e49ef@&condition-rcd) (set! e4ca6@e49ed@&condition-rtd e49ed@&condition-rtd) (set! e4ca5@e49eb@make-&condition e49eb@make-&condition) (set! e4ca4@e49e9@&condition? e49e9@&condition?) (set! e4ca3@e49e6@e49de e49e6@e49de) (set! e4ca2@e49e4@e49df e49e4@e49df) (set! e4ca1@e49e2@e49dd e49e2@e49dd)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (e28e6@e289b@current-primitive-locations (lambda (e5204@x) ((lambda (e5206@t) (if e5206@t (cdr e5206@t) '#f)) (assq e5204@x '((&no-nans-rcd . e4d91@e4ca0@&no-nans-rcd) (&no-nans-rtd . e4d90@e4c9e@&no-nans-rtd) (&no-infinities-rcd . e4d89@e4c8b@&no-infinities-rcd) (&no-infinities-rtd . e4d88@e4c89@&no-infinities-rtd) (&i/o-encoding-rcd . e4d81@e4c76@&i/o-encoding-rcd) (&i/o-encoding-rtd . e4d80@e4c74@&i/o-encoding-rtd) (&i/o-decoding-rcd . e4d77@e4c5b@&i/o-decoding-rcd) (&i/o-decoding-rtd . e4d76@e4c59@&i/o-decoding-rtd) (&i/o-port-rcd . e4d6f@e4c46@&i/o-port-rcd) (&i/o-port-rtd . e4d6e@e4c44@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . e4d65@e4c2b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . e4d64@e4c29@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . e4d5d@e4c16@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . e4d5c@e4c14@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . e4d55@e4c01@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . e4d54@e4bff@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . e4d4d@e4bec@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . e4d4c@e4bea@&i/o-file-protection-rtd) (&i/o-filename-rcd . e4d45@e4bd7@&i/o-filename-rcd) (&i/o-filename-rtd . e4d44@e4bd5@&i/o-filename-rtd) (&i/o-invalid-position-rcd . e4d3b@e4bbc@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . e4d3a@e4bba@&i/o-invalid-position-rtd) (&i/o-write-rcd . e4d31@e4ba1@&i/o-write-rcd) (&i/o-write-rtd . e4d30@e4b9f@&i/o-write-rtd) (&i/o-read-rcd . e4d29@e4b8c@&i/o-read-rcd) (&i/o-read-rtd . e4d28@e4b8a@&i/o-read-rtd) (&i/o-rcd . e4d21@e4b77@&i/o-rcd) (&i/o-rtd . e4d20@e4b75@&i/o-rtd) (&undefined-rcd . e4d19@e4b62@&undefined-rcd) (&undefined-rtd . e4d18@e4b60@&undefined-rtd) (&syntax-rcd . e4d11@e4b4d@&syntax-rcd) (&syntax-rtd . e4d10@e4b4b@&syntax-rtd) (&lexical-rcd . e4d05@e4b2c@&lexical-rcd) (&lexical-rtd . e4d04@e4b2a@&lexical-rtd) (&implementation-restriction-rcd . e4cfd@e4b17@&implementation-restriction-rcd) (&implementation-restriction-rtd . e4cfc@e4b15@&implementation-restriction-rtd) (&non-continuable-rcd . e4cf5@e4b02@&non-continuable-rcd) (&non-continuable-rtd . e4cf4@e4b00@&non-continuable-rtd) (&who-rcd . e4ced@e4aed@&who-rcd) (&who-rtd . e4cec@e4aeb@&who-rtd) (&irritants-rcd . e4ce3@e4ad2@&irritants-rcd) (&irritants-rtd . e4ce2@e4ad0@&irritants-rtd) (&assertion-rcd . e4cd9@e4ab7@&assertion-rcd) (&assertion-rtd . e4cd8@e4ab5@&assertion-rtd) (&violation-rcd . e4cd1@e4aa2@&violation-rcd) (&violation-rtd . e4cd0@e4aa0@&violation-rtd) (&error-rcd . e4cc9@e4a8d@&error-rcd) (&error-rtd . e4cc8@e4a8b@&error-rtd) (&serious-rcd . e4cc1@e4a78@&serious-rcd) (&serious-rtd . e4cc0@e4a76@&serious-rtd) (&warning-rcd . e4cb9@e4a63@&warning-rcd) (&warning-rtd . e4cb8@e4a61@&warning-rtd) (&message-rcd . e4cb1@e4a4e@&message-rcd) (&message-rtd . e4cb0@e4a4c@&message-rtd) (&condition-rcd . e4ca7@e49ef@&condition-rcd) (&condition-rtd . e4ca6@e49ed@&condition-rtd) (syntax-error . e49cf@e2fdb@syntax-error) (syntax-dispatch . e4964@e2ef6@syntax-dispatch) (load . e4ec2@e4dad@load) (interaction-environment . e49d7@e2feb@interaction-environment) (library-path . e2afd@e298c@library-path) (make-parameter . e2895@e27bf@make-parameter) (make-variable-transformer . e4922@e2d23@make-variable-transformer) (identifier? . e49d2@e2fe1@identifier?) (generate-temporaries . e49c8@e2fcd@generate-temporaries) (free-identifier=? . e49c9@e2fcf@free-identifier=?) (syntax->datum . e49d4@e2fe5@syntax->datum) (datum->syntax . e49d3@e2fe3@datum->syntax) (bound-identifier=? . e49ca@e2fd1@bound-identifier=?) (make-i/o-write-error . e4d2e@e4b9b@make-i/o-write-error) (make-i/o-read-error . e4d26@e4b86@make-i/o-read-error) (make-i/o-port-error . e4d6a@e4c3c@make-i/o-port-error) (make-i/o-invalid-position-error . e4d36@e4bb2@make-i/o-invalid-position-error) (make-i/o-filename-error . e4d40@e4bcd@make-i/o-filename-error) (make-i/o-file-protection-error . e4d4a@e4be6@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . e4d52@e4bfb@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . e4d62@e4c25@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . e4d5a@e4c10@make-i/o-file-already-exists-error) (make-i/o-error . e4d1e@e4b71@make-i/o-error) (make-i/o-encoding-error . e4d7c@e4c6c@make-i/o-encoding-error) (make-i/o-decoding-error . e4d74@e4c55@make-i/o-decoding-error) (i/o-write-error? . e4d2f@e4b9d@i/o-write-error?) (i/o-read-error? . e4d27@e4b88@i/o-read-error?) (i/o-port-error? . e4d6c@e4c40@i/o-port-error?) (i/o-invalid-position-error? . e4d38@e4bb6@i/o-invalid-position-error?) (i/o-filename-error? . e4d42@e4bd1@i/o-filename-error?) (i/o-file-protection-error? . e4d4b@e4be8@i/o-file-protection-error?) (i/o-file-is-read-only-error? . e4d53@e4bfd@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . e4d63@e4c27@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . e4d5b@e4c12@i/o-file-already-exists-error?) (i/o-error? . e4d1f@e4b73@i/o-error?) (i/o-error-position . e4d39@e4bb8@i/o-error-position) (i/o-error-port . e4d6d@e4c42@i/o-error-port) (i/o-error-filename . e4d43@e4bd3@i/o-error-filename) (i/o-encoding-error? . e4d7e@e4c70@i/o-encoding-error?) (i/o-encoding-error-char . e4d7f@e4c72@i/o-encoding-error-char) (i/o-decoding-error? . e4d75@e4c57@i/o-decoding-error?) (scheme-report-environment . e49bf@e2fbb@scheme-report-environment) (null-environment . e49be@e2fb9@null-environment) (command-line . e4ebf@e4da7@command-line) (eval . e49c1@e2fbf@eval) (environment . e49bd@e2fb7@environment) (who-condition? . e4cea@e4ae7@who-condition?) (warning? . e4cb7@e4a5f@warning?) (violation? . e4ccf@e4a9e@violation?) (undefined-violation? . e4d17@e4b5e@undefined-violation?) (syntax-violation? . e4d0d@e4b45@syntax-violation?) (syntax-violation-subform . e4d0f@e4b49@syntax-violation-subform) (syntax-violation-form . e4d0e@e4b47@syntax-violation-form) (syntax-violation . e49d1@e2fdf@syntax-violation) (serious-condition? . e4cbf@e4a74@serious-condition?) (non-continuable-violation? . e4cf3@e4afe@non-continuable-violation?) (message-condition? . e4cae@e4a48@message-condition?) (make-who-condition . e4ce8@e4ae3@make-who-condition) (make-warning . e4cb6@e4a5d@make-warning) (make-violation . e4cce@e4a9c@make-violation) (make-undefined-violation . e4d16@e4b5c@make-undefined-violation) (make-syntax-violation . e4d0a@e4b3f@make-syntax-violation) (make-serious-condition . e4cbe@e4a72@make-serious-condition) (make-non-continuable-violation . e4cf2@e4afc@make-non-continuable-violation) (make-message-condition . e4cac@e4a44@make-message-condition) (make-lexical-violation . e4d02@e4b26@make-lexical-violation) (make-irritants-condition . e4cde@e4ac8@make-irritants-condition) (make-implementation-restriction-violation . e4cfa@e4b11@make-implementation-restriction-violation) (make-error . e4cc6@e4a87@make-error) (make-assertion-violation . e4cd6@e4ab1@make-assertion-violation) (lexical-violation? . e4d03@e4b28@lexical-violation?) (irritants-condition? . e4ce0@e4acc@irritants-condition?) (implementation-restriction-violation? . e4cfb@e4b13@implementation-restriction-violation?) (error? . e4cc7@e4a89@error?) (condition-who . e4ceb@e4ae9@condition-who) (condition-message . e4caf@e4a4a@condition-message) (condition-irritants . e4ce1@e4ace@condition-irritants) (assertion-violation? . e4cd7@e4ab3@assertion-violation?) (no-nans-violation? . e4d8f@e4c9c@no-nans-violation?) (no-infinities-violation? . e4d87@e4c87@no-infinities-violation?) (make-no-nans-violation . e4d8e@e4c9a@make-no-nans-violation) (make-no-infinities-violation . e4d86@e4c85@make-no-infinities-violation) (assertion-error . e49ce@e2fd9@assertion-error)))))) (e2b0d@e29ac@install-library 'e51e1 '(mosh interaction) '() '() '() '() '((regexp? . e51d9) (alist->eq-hash-table . e51d6) (format . e51d3) (string-split . e51c8) (call-process . e51c2) (set-current-directory! . e51be) (expand-path . e51bd) (current-directory . e51bc) (%spawn . e51bb) (%waitpid . e51ba) (pointer-ref-c-int64 . e51b9) (pointer-ref-c-int32 . e51b8) (pointer-ref-c-int16 . e51b7) (pointer-ref-c-int8 . e51b6) (pointer-ref-c-uint64 . e51b5) (pointer-ref-c-uint32 . e51b4) (pointer-ref-c-uint16 . e51b3) (pointer-ref-c-uint8 . e51b2) (pointer-set-c-int64! . e51b1) (pointer-set-c-int32! . e51b0) (pointer-set-c-int16! . e51af) (pointer-set-c-int8! . e51ae) (pointer-set-c-pointer! . e51ad) (pointer-set-c-double! . e51ac) (pointer-set-c-float! . e51ab) (pointer-set-c-long-long! . e51aa) (pointer-set-c-long! . e51a9) (pointer-set-c-int! . e51a8) (pointer-set-c-short! . e51a7) (pointer-set-c-char! . e51a6) (pointer-ref-c-pointer . e51a5) (pointer-ref-c-double . e51a4) (pointer-ref-c-float . e51a3) (pointer-ref-c-unsigned-long-long . e51a2) (pointer-ref-c-signed-long-long . e51a1) (pointer-ref-c-unsigned-long . e51a0) (pointer-ref-c-signed-long . e519f) (pointer-ref-c-unsigned-int . e519e) (pointer-ref-c-signed-int . e519d) (pointer-ref-c-unsigned-short . e519c) (pointer-ref-c-signed-short . e519b) (pointer-ref-c-unsigned-char . e519a) (pointer-ref-c-signed-char . e5199) (pointer->integer . e5198) (integer->pointer . e5197) (pointer? . e5196) (shared-errno . e5195) (%ffi-supported? . e5194) (%ffi-pointer->string . e5193) (%ffi-call->string-or-zero . e5192) (%ffi-call->double . e5191) (%ffi-call->void* . e5190) (%ffi-call->void . e518f) (%ffi-call->char . e518e) (%ffi-call->int . e518d) (%ffi-lookup . e518c) (%ffi-open . e518b) (%fork . e518a) (%pipe . e5189) (p . e5188) (whereis . e5172) (register . e5171) (vm-join! . e5170) (vm-set-value! . e516f) (vm? . e516e) (main-vm? . e516d) (vm-eval . e516c) (vm-self . e516b) (vm-start! . e516a) (make-vm . e5169) (mutex-try-lock! . e5168) (mutex-unlock! . e5167) (mutex-lock! . e5166) (mutex? . e5165) (make-mutex . e5164) (condition-variable-notify-all! . e5163) (condition-variable-notify! . e5162) (condition-variable-wait! . e5161) (make-condition-variable . e5160) (string-upcase . e5149) (string-titlecase . e5148) (string-normalize-nfkd . e5147) (string-normalize-nfkc . e5146) (string-normalize-nfd . e5145) (string-normalize-nfc . e5144) (string-foldcase . e5143) (string-downcase . e5142) (string-ci>? . e5141) (string-ci>=? . e5140) (string-ci=? . e513f) (string-ci<? . e513e) (string-ci<=? . e513d) (char-whitespace? . e513c) (char-upper-case? . e513b) (char-title-case? . e513a) (char-numeric? . e5139) (char-lower-case? . e5138) (char-general-category . e5137) (char-upcase . e5136) (char-titlecase . e5135) (char-foldcase . e5134) (char-downcase . e5133) (char-ci>? . e5132) (char-ci>=? . e5131) (char-ci=? . e5130) (char-ci<? . e512f) (char-ci<=? . e512e) (char-alphabetic? . e512d) (make-variable-transformer . e2d22) (identifier? . e2fe0) (generate-temporaries . e2fcc) (free-identifier=? . e2fce) (syntax->datum . e2fe4) (datum->syntax . e2fe2) (bound-identifier=? . e2fd0) (record-type-descriptor? . e512c) (record-predicate . e512b) (record-mutator . e512a) (record-constructor . e5129) (record-accessor . e5128) (make-record-type-descriptor . e5127) (make-record-constructor-descriptor . e5126) (record? . e5125) (record-type-uid . e5124) (record-type-sealed? . e5123) (record-type-parent . e5122) (record-type-opaque? . e5121) (record-type-name . e5120) (record-type-generative? . e511f) (record-type-field-names . e511e) (record-rtd . e511d) (record-field-mutable? . e511c) (delete-file . e511b) (file-exists? . e511a) (vector-sort! . e5119) (vector-sort . e5118) (list-sort . e5117) (symbol-hash . e5116) (string-ci-hash . e5115) (string-hash . e5114) (equal-hash . e5113) (hashtable-equivalence-function . e5112) (make-hashtable . e5111) (hashtable-hash-function . e5110) (make-eqv-hashtable . e510f) (make-eq-hashtable . e510e) (hashtable? . e510d) (hashtable-update! . e510c) (hashtable-size . e510b) (hashtable-set! . e510a) (hashtable-ref . e5109) (hashtable-mutable? . e5108) (hashtable-keys . e5107) (hashtable-entries . e5106) (hashtable-delete! . e5105) (hashtable-copy . e5104) (hashtable-contains? . e5103) (hashtable-clear! . e5102) (call-with-output-file . e5101) (call-with-input-file . e5100) (write-char . e50ff) (write . e50fe) (with-output-to-file . e50fd) (with-input-from-file . e50fc) (read-char . e50fb) (read . e50fa) (peek-char . e50f9) (open-output-file . e50f8) (open-input-file . e50f7) (newline . e50f6) (display . e50f5) (close-output-port . e50f4) (close-input-port . e50f3) (eof-object? . e50f2) (eof-object . e50f1) (current-error-port . e50f0) (current-output-port . e50ef) (current-input-port . e50ee) (output-port? . e50ed) (input-port? . e50ec) (utf-8-codec . e50eb) (utf-16-codec . e50ea) (transcoder-error-handling-mode . e50e9) (transcoder-eol-style . e50e8) (transcoder-codec . e50e7) (transcoded-port . e50e6) (textual-port? . e50e5) (string->bytevector . e50e4) (standard-output-port . e50e3) (standard-input-port . e50e2) (standard-error-port . e50e1) (set-port-position! . e50e0) (put-u8 . e50df) (put-string . e50de) (put-datum . e50dd) (put-char . e50dc) (put-bytevector . e50db) (port? . e50da) (port-transcoder . e50d9) (port-position . e50d8) (port-has-set-port-position!? . e50d7) (port-has-port-position? . e50d6) (port-eof? . e50d5) (output-port-buffer-mode . e50d4) (open-string-output-port . e50d3) (open-string-input-port . e50d2) (open-file-output-port . e50d1) (open-file-input/output-port . e50d0) (open-file-input-port . e50cf) (open-bytevector-output-port . e50ce) (open-bytevector-input-port . e50cd) (native-transcoder . e50cc) (native-eol-style . e50cb) (make-transcoder . e50ca) (latin-1-codec . e50c9) (make-i/o-write-error . e4b9a) (make-i/o-read-error . e4b85) (make-i/o-port-error . e4c3b) (make-i/o-invalid-position-error . e4bb1) (make-i/o-filename-error . e4bcc) (make-i/o-file-protection-error . e4be5) (make-i/o-file-is-read-only-error . e4bfa) (make-i/o-file-does-not-exist-error . e4c24) (make-i/o-file-already-exists-error . e4c0f) (make-i/o-error . e4b70) (make-i/o-encoding-error . e4c6b) (make-i/o-decoding-error . e4c54) (make-custom-textual-output-port . e50c8) (make-custom-textual-input/output-port . e50c7) (make-custom-textual-input-port . e50c6) (make-custom-binary-output-port . e50c5) (make-custom-binary-input/output-port . e50c4) (make-custom-binary-input-port . e50c3) (make-bytevector . e50c2) (lookahead-u8 . e50c1) (lookahead-char . e50c0) (i/o-write-error? . e4b9c) (i/o-read-error? . e4b87) (i/o-port-error? . e4c3f) (i/o-invalid-position-error? . e4bb5) (i/o-filename-error? . e4bd0) (i/o-file-protection-error? . e4be7) (i/o-file-is-read-only-error? . e4bfc) (i/o-file-does-not-exist-error? . e4c26) (i/o-file-already-exists-error? . e4c11) (i/o-error? . e4b72) (i/o-error-position . e4bb7) (i/o-error-port . e4c41) (i/o-error-filename . e4bd2) (i/o-encoding-error? . e4c6f) (i/o-encoding-error-char . e4c71) (i/o-decoding-error? . e4c56) (get-u8 . e50bf) (get-string-n! . e50be) (get-string-n . e50bd) (get-string-all . e50bc) (get-line . e50bb) (get-datum . e50ba) (get-char . e50b9) (get-bytevector-some . e50b8) (get-bytevector-n! . e50b7) (get-bytevector-n . e50b6) (get-bytevector-all . e50b5) (flush-output-port . e50b4) (close-port . e50b3) (exit . e50ab) (command-line . e4da6) (string-fill! . e50aa) (string-set! . e50a9) (set-cdr! . e50a8) (set-car! . e50a7) (remove . e50a6) (remv . e50a5) (remp . e50a4) (remq . e50a3) (partition . e50a2) (memv . e50a1) (memq . e50a0) (memp . e509f) (member . e509e) (exists . e509d) (for-all . e509c) (fold-right . e509b) (fold-left . e509a) (find . e5099) (filter . e5098) (cons* . e5097) (assv . e5096) (assq . e5095) (assp . e5094) (assoc . e5093) (call-with-string-output-port . e5092) (call-with-port . e5091) (call-with-bytevector-output-port . e5090) (bytevector->string . e508f) (buffer-mode? . e508e) (binary-port? . e508d) (with-exception-handler . e508c) (raise-continuable . e508b) (raise . e508a) (eval . e2fbe) (environment . e2fb6) (make-enumeration . e5089) (enum-set=? . e5088) (enum-set-universe . e5087) (enum-set-union . e5086) (enum-set-subset? . e5085) (enum-set-projection . e5084) (enum-set-member? . e5083) (enum-set-intersection . e5082) (enum-set-indexer . e5081) (enum-set-difference . e5080) (enum-set-constructor . e507f) (enum-set-complement . e507e) (enum-set->list . e507d) (who-condition? . e4ae6) (warning? . e4a5e) (violation? . e4a9d) (undefined-violation? . e4b5d) (syntax-violation? . e4b44) (syntax-violation-subform . e4b48) (syntax-violation-form . e4b46) (syntax-violation . e2fde) (simple-conditions . e507c) (serious-condition? . e4a73) (non-continuable-violation? . e4afd) (message-condition? . e4a47) (make-who-condition . e4ae2) (make-warning . e4a5c) (make-violation . e4a9b) (make-undefined-violation . e4b5b) (make-syntax-violation . e4b3e) (make-serious-condition . e4a71) (make-non-continuable-violation . e4afb) (make-message-condition . e4a43) (make-lexical-violation . e4b25) (make-irritants-condition . e4ac7) (make-implementation-restriction-violation . e4b10) (make-error . e4a86) (make-assertion-violation . e4ab0) (lexical-violation? . e4b27) (irritants-condition? . e4acb) (implementation-restriction-violation? . e4b12) (error? . e4a88) (condition-who . e4ae8) (condition-predicate . e507b) (condition-message . e4a49) (condition-irritants . e4acd) (condition-accessor . e507a) (condition . e5079) (assertion-violation? . e4ab2) (condition? . e5078) (utf32->string . e5077) (utf16->string . e5076) (utf8->string . e5075) (uint-list->bytevector . e5074) (u8-list->bytevector . e5073) (string->utf8 . e5072) (string->utf32 . e5071) (string->utf16 . e5070) (sint-list->bytevector . e506f) (native-endianness . e506e) (bytevector? . e506d) (bytevector=? . e506c) (bytevector-uint-set! . e506b) (bytevector-uint-ref . e506a) (bytevector-u8-set! . e5069) (bytevector-u8-ref . e5068) (bytevector-u64-set! . e5067) (bytevector-u64-ref . e5066) (bytevector-u64-native-set! . e5065) (bytevector-u64-native-ref . e5064) (bytevector-u32-set! . e5063) (bytevector-u32-ref . e5062) (bytevector-u32-native-set! . e5061) (bytevector-u32-native-ref . e5060) (bytevector-u16-set! . e505f) (bytevector-u16-ref . e505e) (bytevector-u16-native-set! . e505d) (bytevector-u16-native-ref . e505c) (bytevector-sint-set! . e505b) (bytevector-sint-ref . e505a) (bytevector-s8-set! . e5059) (bytevector-s8-ref . e5058) (bytevector-s64-set! . e5057) (bytevector-s64-ref . e5056) (bytevector-s64-native-set! . e5055) (bytevector-s64-native-ref . e5054) (bytevector-s32-set! . e5053) (bytevector-s32-ref . e5052) (bytevector-s32-native-set! . e5051) (bytevector-s32-native-ref . e5050) (bytevector-s16-set! . e504f) (bytevector-s16-ref . e504e) (bytevector-s16-native-set! . e504d) (bytevector-s16-native-ref . e504c) (bytevector-length . e504b) (bytevector-ieee-single-ref . e504a) (bytevector-ieee-single-set! . e5049) (bytevector-ieee-single-native-set! . e5048) (bytevector-ieee-single-native-ref . e5047) (bytevector-ieee-double-set! . e5046) (bytevector-ieee-double-ref . e5045) (bytevector-ieee-double-native-set! . e5044) (bytevector-ieee-double-native-ref . e5043) (bytevector-fill! . e5042) (bytevector-copy! . e5041) (bytevector-copy . e5040) (bytevector->uint-list . e503f) (bytevector->u8-list . e503e) (bytevector->sint-list . e503d) (no-nans-violation? . e4c9b) (no-infinities-violation? . e4c86) (make-no-nans-violation . e4c99) (make-no-infinities-violation . e4c84) (real->flonum . e503c) (flzero? . e503b) (fltruncate . e503a) (fltan . e5039) (flsqrt . e5038) (flsin . e5037) (flround . e5036) (flpositive? . e5035) (flonum? . e5034) (flodd? . e5033) (flnumerator . e5032) (flnegative? . e5031) (flnan? . e5030) (flmod0 . e502f) (flmod . e502e) (flmin . e502d) (flmax . e502c) (fllog . e502b) (flinteger? . e502a) (flinfinite? . e5029) (flfloor . e5028) (flfinite? . e5027) (flexpt . e5026) (flexp . e5025) (fleven? . e5024) (fldiv0-and-mod0 . e5023) (fldiv0 . e5022) (fldiv-and-mod . e5021) (fldiv . e5020) (fldenominator . e501f) (flcos . e501e) (flceiling . e501d) (flatan . e501c) (flasin . e501b) (flacos . e501a) (flabs . e5019) (fl>? . e5018) (fl>=? . e5017) (fl=? . e5016) (fl<? . e5015) (fl<=? . e5014) (fl/ . e5013) (fl- . e5012) (fl+ . e5011) (fl* . e5010) (fixnum->flonum . e500f) (fxzero? . e500e) (fxxor . e500d) (fxrotate-bit-field . e500c) (fxreverse-bit-field . e500b) (fxpositive? . e500a) (fxodd? . e5009) (fxnot . e5008) (fxnegative? . e5007) (fxmod0 . e5006) (fxmod . e5005) (fxmin . e5004) (fxmax . e5003) (fxlength . e5002) (fxior . e5001) (fxif . e5000) (fxfirst-bit-set . e4fff) (fxeven? . e4ffe) (fxdiv0-and-mod0 . e4ffd) (fxdiv0 . e4ffc) (fxdiv-and-mod . e4ffb) (fxdiv . e4ffa) (fxcopy-bit-field . e4ff9) (fxcopy-bit . e4ff8) (fxbit-set? . e4ff7) (fxbit-field . e4ff6) (fxbit-count . e4ff5) (fxarithmetic-shift-right . e4ff4) (fxarithmetic-shift-left . e4ff3) (fxarithmetic-shift . e4ff2) (fxand . e4ff1) (fx>? . e4ff0) (fx>=? . e4fef) (fx=? . e4fee) (fx<? . e4fed) (fx<=? . e4fec) (fx-/carry . e4feb) (fx- . e4fea) (fx+/carry . e4fe9) (fx+ . e4fe8) (fx*/carry . e4fe7) (fx* . e4fe6) (greatest-fixnum . e4fe5) (least-fixnum . e4fe4) (fixnum-width . e4fe3) (fixnum? . e4fe2) (bitwise-rotate-bit-field . e4fe1) (bitwise-reverse-bit-field . e4fe0) (bitwise-length . e4fdf) (bitwise-if . e4fde) (bitwise-first-bit-set . e4fdd) (bitwise-copy-bit-field . e4fdc) (bitwise-copy-bit . e4fdb) (bitwise-bit-set? . e4fda) (bitwise-bit-field . e4fd9) (bitwise-bit-count . e4fd8) (bitwise-xor . e4fd7) (bitwise-ior . e4fd6) (bitwise-and . e4fd5) (bitwise-not . e4fd4) (bitwise-arithmetic-shift-right . e4fd3) (bitwise-arithmetic-shift-left . e4fd2) (bitwise-arithmetic-shift . e4fd1) (zero? . e4fd0) (vector? . e4fcf) (vector-set! . e4fce) (vector-ref . e4fcd) (vector-map . e4fcc) (vector-length . e4fcb) (vector-for-each . e4fca) (vector-fill! . e4fc9) (vector->list . e4fc8) (vector . e4fc7) (values . e4fc6) (truncate . e4fc5) (tan . e4fc4) (symbol? . e4fc3) (symbol=? . e4fc2) (symbol->string . e4fc1) (substring . e4fc0) (string? . e4fbf) (string>? . e4fbe) (string>=? . e4fbd) (string=? . e4fbc) (string<? . e4fbb) (string<=? . e4fba) (string-ref . e4fb9) (string-length . e4fb8) (string-for-each . e4fb7) (string-copy . e4fb6) (string-append . e4fb5) (string->symbol . e4fb4) (string->number . e4fb3) (string->list . e4fb2) (string . e4fb1) (sqrt . e4fb0) (sin . e4faf) (round . e4fae) (reverse . e4fad) (real? . e4fac) (real-valued? . e4fab) (real-part . e4faa) (rationalize . e4fa9) (rational? . e4fa8) (rational-valued? . e4fa7) (procedure? . e4fa6) (positive? . e4fa5) (pair? . e4fa4) (odd? . e4fa3) (numerator . e4fa2) (number? . e4fa1) (number->string . e4fa0) (null? . e4f9f) (not . e4f9e) (negative? . e4f9d) (nan? . e4f9c) (min . e4f9b) (max . e4f9a) (map . e4f99) (make-vector . e4f98) (make-string . e4f97) (make-rectangular . e4f96) (make-polar . e4f95) (magnitude . e4f94) (log . e4f93) (list? . e4f92) (list-tail . e4f91) (list-ref . e4f90) (list->vector . e4f8f) (list->string . e4f8e) (list . e4f8d) (length . e4f8c) (lcm . e4f8b) (integer? . e4f8a) (integer-valued? . e4f89) (integer->char . e4f88) (infinite? . e4f87) (inexact? . e4f86) (inexact . e4f85) (imag-part . e4f84) (gcd . e4f83) (for-each . e4f82) (floor . e4f81) (finite? . e4f80) (expt . e4f7f) (exp . e4f7e) (exact? . e4f7d) (exact-integer-sqrt . e4f7c) (exact . e4f7b) (even? . e4f7a) (error . e4f79) (eqv? . e4f78) (equal? . e4f77) (eq? . e4f76) (dynamic-wind . e4f75) (div0-and-mod0 . e4f74) (mod0 . e4f73) (div0 . e4f72) (div-and-mod . e4f71) (mod . e4f70) (div . e4f6f) (denominator . e4f6e) (cos . e4f6d) (cons . e4f6c) (complex? . e4f6b) (char? . e4f6a) (char>? . e4f69) (char>=? . e4f68) (char=? . e4f67) (char<? . e4f66) (char<=? . e4f65) (char->integer . e4f64) (ceiling . e4f63) (call-with-values . e4f62) (call/cc . e4f61) (call-with-current-continuation . e4f60) (cddddr . e4f5f) (cdddar . e4f5e) (cddadr . e4f5d) (cddaar . e4f5c) (cdaddr . e4f5b) (cdadar . e4f5a) (cdaadr . e4f59) (cdaaar . e4f58) (cadddr . e4f57) (caddar . e4f56) (cadadr . e4f55) (cadaar . e4f54) (caaddr . e4f53) (caadar . e4f52) (caaadr . e4f51) (caaaar . e4f50) (cdddr . e4f4f) (cddar . e4f4e) (cdadr . e4f4d) (cdaar . e4f4c) (caddr . e4f4b) (cadar . e4f4a) (caadr . e4f49) (caaar . e4f48) (cddr . e4f47) (cdar . e4f46) (cadr . e4f45) (caar . e4f44) (cdr . e4f43) (car . e4f42) (boolean? . e4f41) (boolean=? . e4f40) (atan . e4f3f) (assertion-violation . e4f3e) (asin . e4f3d) (apply . e4f3c) (append . e4f3b) (angle . e4f3a) (acos . e4f39) (abs . e4f38) (/ . e4f37) (* . e4f36) (- . e4f35) (+ . e4f34) (>= . e4f33) (> . e4f32) (= . e4f31) (<= . e4f30) (< . e4f2f) (library . e4f2e) (&no-nans . e4f2d) (&no-infinities . e4f2c) (&i/o-encoding . e4f2b) (&i/o-decoding . e4f2a) (&i/o-port . e4f29) (&i/o-file-does-not-exist . e4f28) (&i/o-file-already-exists . e4f27) (&i/o-file-is-read-only . e4f26) (&i/o-file-protection . e4f25) (&i/o-filename . e4f24) (&i/o-invalid-position . e4f23) (&i/o-write . e4f22) (&i/o-read . e4f21) (&i/o . e4f20) (&undefined . e4f1f) (&syntax . e4f1e) (&lexical . e4f1d) (&implementation-restriction . e4f1c) (&non-continuable . e4f1b) (&who . e4f1a) (&irritants . e4f19) (&assertion . e4f18) (&violation . e4f17) (&error . e4f16) (&serious . e4f15) (&warning . e4f14) (&message . e4f13) (&condition . e4f12) (define-condition-type . e4f11) (define-enumeration . e4f10) (define-record-type . e4f0f) (parent-rtd . e4f0e) (nongenerative . e4f0d) (opaque . e4f0c) (sealed . e4f0b) (protocol . e4f0a) (parent . e4f09) (immutable . e4f08) (mutable . e4f07) (fields . e4f06) (error-handling-mode . e4f05) (file-options . e4f04) (buffer-mode . e4f03) (eol-style . e4f02) (guard . e4f01) (unsyntax-splicing . e4efe) (unsyntax . e4efd) (unquote-splicing . e4efc) (unquote . e4efb) (_ . e4efa) (else . e4ef9) (=> . e4ef8) (... . e4ef7) (assert . e4ef6) (endianness . e4ef5) (time . e4ef3) (do . e4ef2) (cond . e4ef1) (let* . e4ef0) (let . e4eef) (let*-values . e4eee) (let-values . e4eed) (identifier-syntax . e4eec) (with-syntax . e4eeb) (quasisyntax . e4eea) (quasiquote . e4ee9) (syntax-rules . e4ee8) (include . e4ee7) (record-constructor-descriptor . e4ee5) (record-type-descriptor . e4ee4) (case . e4ee3) (unless . e4ee1) (when . e4ee0) (or . e4edf) (and . e4ede) (if . e4edd) (letrec* . e4edc) (letrec . e4edb) (case-lambda . e4ed9) (lambda . e4ed8) (syntax . e4ed7) (syntax-case . e4ed6) (quote . e4ed5) (letrec-syntax . e4ed3) (let-syntax . e4ed2) (set! . e4ed1) (import . e4ed0) (begin . e4ecf) (define-syntax . e4ecd) (define . e4ecc)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e2 '(psyntax null-environment-5) '() '() '() '() '((make-promise . e50ac) (unquote-splicing . e4efc) (unquote . e4efb) (_ . e4efa) (else . e4ef9) (=> . e4ef8) (... . e4ef7) (delay . e4ef4) (do . e4ef2) (cond . e4ef1) (let* . e4ef0) (let . e4eef) (quasiquote . e4ee9) (syntax-rules . e4ee8) (case . e4ee3) (or . e4edf) (and . e4ede) (if . e4edd) (letrec . e4edb) (lambda . e4ed8) (quote . e4ed5) (letrec-syntax . e4ed3) (let-syntax . e4ed2) (set! . e4ed1) (begin . e4ecf) (define-syntax . e4ecd) (define . e4ecc)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e3 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . e5141) (string-ci>=? . e5140) (string-ci=? . e513f) (string-ci<? . e513e) (string-ci<=? . e513d) (char-whitespace? . e513c) (char-upper-case? . e513b) (char-numeric? . e5139) (char-lower-case? . e5138) (char-upcase . e5136) (char-downcase . e5133) (char-ci>? . e5132) (char-ci>=? . e5131) (char-ci=? . e5130) (char-ci<? . e512f) (char-ci<=? . e512e) (char-alphabetic? . e512d) (call-with-output-file . e5101) (call-with-input-file . e5100) (write-char . e50ff) (write . e50fe) (with-output-to-file . e50fd) (with-input-from-file . e50fc) (read-char . e50fb) (read . e50fa) (peek-char . e50f9) (open-output-file . e50f8) (open-input-file . e50f7) (newline . e50f6) (display . e50f5) (close-output-port . e50f4) (close-input-port . e50f3) (eof-object . e50f1) (current-output-port . e50ef) (current-input-port . e50ee) (output-port? . e50ed) (input-port? . e50ec) (scheme-report-environment . e2fba) (quotient . e50b2) (null-environment . e2fb8) (remainder . e50b1) (modulo . e50b0) (inexact->exact . e50af) (force . e50ae) (exact->inexact . e50ad) (make-promise . e50ac) (string-fill! . e50aa) (string-set! . e50a9) (set-cdr! . e50a8) (set-car! . e50a7) (memv . e50a1) (memq . e50a0) (member . e509e) (assv . e5096) (assq . e5095) (assoc . e5093) (eval . e2fbe) (zero? . e4fd0) (vector? . e4fcf) (vector-set! . e4fce) (vector-ref . e4fcd) (vector-length . e4fcb) (vector-fill! . e4fc9) (vector->list . e4fc8) (vector . e4fc7) (values . e4fc6) (truncate . e4fc5) (tan . e4fc4) (symbol? . e4fc3) (symbol->string . e4fc1) (substring . e4fc0) (string? . e4fbf) (string>? . e4fbe) (string>=? . e4fbd) (string=? . e4fbc) (string<? . e4fbb) (string<=? . e4fba) (string-ref . e4fb9) (string-length . e4fb8) (string-copy . e4fb6) (string-append . e4fb5) (string->symbol . e4fb4) (string->number . e4fb3) (string->list . e4fb2) (string . e4fb1) (sqrt . e4fb0) (sin . e4faf) (round . e4fae) (reverse . e4fad) (real? . e4fac) (real-part . e4faa) (rationalize . e4fa9) (rational? . e4fa8) (procedure? . e4fa6) (positive? . e4fa5) (pair? . e4fa4) (odd? . e4fa3) (numerator . e4fa2) (number? . e4fa1) (number->string . e4fa0) (not . e4f9e) (negative? . e4f9d) (min . e4f9b) (max . e4f9a) (map . e4f99) (make-vector . e4f98) (make-string . e4f97) (make-rectangular . e4f96) (make-polar . e4f95) (magnitude . e4f94) (log . e4f93) (list? . e4f92) (list-tail . e4f91) (list-ref . e4f90) (list->vector . e4f8f) (list->string . e4f8e) (list . e4f8d) (length . e4f8c) (lcm . e4f8b) (integer? . e4f8a) (integer->char . e4f88) (inexact? . e4f86) (imag-part . e4f84) (gcd . e4f83) (for-each . e4f82) (floor . e4f81) (expt . e4f7f) (exp . e4f7e) (exact? . e4f7d) (even? . e4f7a) (eqv? . e4f78) (equal? . e4f77) (eq? . e4f76) (dynamic-wind . e4f75) (denominator . e4f6e) (cos . e4f6d) (cons . e4f6c) (complex? . e4f6b) (char? . e4f6a) (char>? . e4f69) (char>=? . e4f68) (char=? . e4f67) (char<? . e4f66) (char<=? . e4f65) (char->integer . e4f64) (ceiling . e4f63) (call-with-values . e4f62) (call-with-current-continuation . e4f60) (cddddr . e4f5f) (cdddar . e4f5e) (cddadr . e4f5d) (cddaar . e4f5c) (cdaddr . e4f5b) (cdadar . e4f5a) (cdaadr . e4f59) (cdaaar . e4f58) (cadddr . e4f57) (caddar . e4f56) (cadadr . e4f55) (cadaar . e4f54) (caaddr . e4f53) (caadar . e4f52) (caaadr . e4f51) (caaaar . e4f50) (cdddr . e4f4f) (cddar . e4f4e) (cdadr . e4f4d) (cdaar . e4f4c) (caddr . e4f4b) (cadar . e4f4a) (caadr . e4f49) (caaar . e4f48) (cddr . e4f47) (cdar . e4f46) (cadr . e4f45) (caar . e4f44) (cdr . e4f43) (car . e4f42) (boolean? . e4f41) (atan . e4f3f) (asin . e4f3d) (apply . e4f3c) (append . e4f3b) (angle . e4f3a) (acos . e4f39) (abs . e4f38) (/ . e4f37) (* . e4f36) (- . e4f35) (+ . e4f34) (>= . e4f33) (> . e4f32) (= . e4f31) (<= . e4f30) (< . e4f2f) (unquote-splicing . e4efc) (unquote . e4efb) (else . e4ef9) (=> . e4ef8) (... . e4ef7) (delay . e4ef4) (do . e4ef2) (cond . e4ef1) (let* . e4ef0) (let . e4eef) (quasiquote . e4ee9) (syntax-rules . e4ee8) (case . e4ee3) (or . e4edf) (and . e4ede) (if . e4edd) (letrec . e4edb) (lambda . e4ed8) (quote . e4ed5) (letrec-syntax . e4ed3) (let-syntax . e4ed2) (set! . e4ed1) (begin . e4ecf) (define-syntax . e4ecd) (define . e4ecc)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e4 '(psyntax modules) '() '() '() '() '((module . e4ece)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e5 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e6 '(rnrs) '(6) '() '() '() '((regexp? . e51d9) (string-upcase . e5149) (string-titlecase . e5148) (string-normalize-nfkd . e5147) (string-normalize-nfkc . e5146) (string-normalize-nfd . e5145) (string-normalize-nfc . e5144) (string-foldcase . e5143) (string-downcase . e5142) (string-ci>? . e5141) (string-ci>=? . e5140) (string-ci=? . e513f) (string-ci<? . e513e) (string-ci<=? . e513d) (char-whitespace? . e513c) (char-upper-case? . e513b) (char-title-case? . e513a) (char-numeric? . e5139) (char-lower-case? . e5138) (char-general-category . e5137) (char-upcase . e5136) (char-titlecase . e5135) (char-foldcase . e5134) (char-downcase . e5133) (char-ci>? . e5132) (char-ci>=? . e5131) (char-ci=? . e5130) (char-ci<? . e512f) (char-ci<=? . e512e) (char-alphabetic? . e512d) (make-variable-transformer . e2d22) (identifier? . e2fe0) (generate-temporaries . e2fcc) (free-identifier=? . e2fce) (syntax->datum . e2fe4) (datum->syntax . e2fe2) (bound-identifier=? . e2fd0) (record-type-descriptor? . e512c) (record-predicate . e512b) (record-mutator . e512a) (record-constructor . e5129) (record-accessor . e5128) (make-record-type-descriptor . e5127) (make-record-constructor-descriptor . e5126) (record? . e5125) (record-type-uid . e5124) (record-type-sealed? . e5123) (record-type-parent . e5122) (record-type-opaque? . e5121) (record-type-name . e5120) (record-type-generative? . e511f) (record-type-field-names . e511e) (record-rtd . e511d) (record-field-mutable? . e511c) (delete-file . e511b) (file-exists? . e511a) (vector-sort! . e5119) (vector-sort . e5118) (list-sort . e5117) (symbol-hash . e5116) (string-ci-hash . e5115) (string-hash . e5114) (equal-hash . e5113) (hashtable-equivalence-function . e5112) (make-hashtable . e5111) (hashtable-hash-function . e5110) (make-eqv-hashtable . e510f) (make-eq-hashtable . e510e) (hashtable? . e510d) (hashtable-update! . e510c) (hashtable-size . e510b) (hashtable-set! . e510a) (hashtable-ref . e5109) (hashtable-mutable? . e5108) (hashtable-keys . e5107) (hashtable-entries . e5106) (hashtable-delete! . e5105) (hashtable-copy . e5104) (hashtable-contains? . e5103) (hashtable-clear! . e5102) (call-with-output-file . e5101) (call-with-input-file . e5100) (write-char . e50ff) (write . e50fe) (with-output-to-file . e50fd) (with-input-from-file . e50fc) (read-char . e50fb) (read . e50fa) (peek-char . e50f9) (open-output-file . e50f8) (open-input-file . e50f7) (newline . e50f6) (display . e50f5) (close-output-port . e50f4) (close-input-port . e50f3) (eof-object? . e50f2) (eof-object . e50f1) (current-error-port . e50f0) (current-output-port . e50ef) (current-input-port . e50ee) (output-port? . e50ed) (input-port? . e50ec) (utf-8-codec . e50eb) (utf-16-codec . e50ea) (transcoder-error-handling-mode . e50e9) (transcoder-eol-style . e50e8) (transcoder-codec . e50e7) (transcoded-port . e50e6) (textual-port? . e50e5) (string->bytevector . e50e4) (standard-output-port . e50e3) (standard-input-port . e50e2) (standard-error-port . e50e1) (set-port-position! . e50e0) (put-u8 . e50df) (put-string . e50de) (put-datum . e50dd) (put-char . e50dc) (put-bytevector . e50db) (port? . e50da) (port-transcoder . e50d9) (port-position . e50d8) (port-has-set-port-position!? . e50d7) (port-has-port-position? . e50d6) (port-eof? . e50d5) (output-port-buffer-mode . e50d4) (open-string-output-port . e50d3) (open-string-input-port . e50d2) (open-file-output-port . e50d1) (open-file-input/output-port . e50d0) (open-file-input-port . e50cf) (open-bytevector-output-port . e50ce) (open-bytevector-input-port . e50cd) (native-transcoder . e50cc) (native-eol-style . e50cb) (make-transcoder . e50ca) (latin-1-codec . e50c9) (make-i/o-write-error . e4b9a) (make-i/o-read-error . e4b85) (make-i/o-port-error . e4c3b) (make-i/o-invalid-position-error . e4bb1) (make-i/o-filename-error . e4bcc) (make-i/o-file-protection-error . e4be5) (make-i/o-file-is-read-only-error . e4bfa) (make-i/o-file-does-not-exist-error . e4c24) (make-i/o-file-already-exists-error . e4c0f) (make-i/o-error . e4b70) (make-i/o-encoding-error . e4c6b) (make-i/o-decoding-error . e4c54) (make-custom-textual-output-port . e50c8) (make-custom-textual-input/output-port . e50c7) (make-custom-textual-input-port . e50c6) (make-custom-binary-output-port . e50c5) (make-custom-binary-input/output-port . e50c4) (make-custom-binary-input-port . e50c3) (make-bytevector . e50c2) (lookahead-u8 . e50c1) (lookahead-char . e50c0) (i/o-write-error? . e4b9c) (i/o-read-error? . e4b87) (i/o-port-error? . e4c3f) (i/o-invalid-position-error? . e4bb5) (i/o-filename-error? . e4bd0) (i/o-file-protection-error? . e4be7) (i/o-file-is-read-only-error? . e4bfc) (i/o-file-does-not-exist-error? . e4c26) (i/o-file-already-exists-error? . e4c11) (i/o-error? . e4b72) (i/o-error-position . e4bb7) (i/o-error-port . e4c41) (i/o-error-filename . e4bd2) (i/o-encoding-error? . e4c6f) (i/o-encoding-error-char . e4c71) (i/o-decoding-error? . e4c56) (get-u8 . e50bf) (get-string-n! . e50be) (get-string-n . e50bd) (get-string-all . e50bc) (get-line . e50bb) (get-datum . e50ba) (get-char . e50b9) (get-bytevector-some . e50b8) (get-bytevector-n! . e50b7) (get-bytevector-n . e50b6) (get-bytevector-all . e50b5) (flush-output-port . e50b4) (close-port . e50b3) (exit . e50ab) (command-line . e4da6) (remove . e50a6) (remv . e50a5) (remp . e50a4) (remq . e50a3) (partition . e50a2) (memv . e50a1) (memq . e50a0) (memp . e509f) (member . e509e) (exists . e509d) (for-all . e509c) (fold-right . e509b) (fold-left . e509a) (find . e5099) (filter . e5098) (cons* . e5097) (assv . e5096) (assq . e5095) (assp . e5094) (assoc . e5093) (call-with-string-output-port . e5092) (call-with-port . e5091) (call-with-bytevector-output-port . e5090) (bytevector->string . e508f) (buffer-mode? . e508e) (binary-port? . e508d) (with-exception-handler . e508c) (raise-continuable . e508b) (raise . e508a) (make-enumeration . e5089) (enum-set=? . e5088) (enum-set-universe . e5087) (enum-set-union . e5086) (enum-set-subset? . e5085) (enum-set-projection . e5084) (enum-set-member? . e5083) (enum-set-intersection . e5082) (enum-set-indexer . e5081) (enum-set-difference . e5080) (enum-set-constructor . e507f) (enum-set-complement . e507e) (enum-set->list . e507d) (who-condition? . e4ae6) (warning? . e4a5e) (violation? . e4a9d) (undefined-violation? . e4b5d) (syntax-violation? . e4b44) (syntax-violation-subform . e4b48) (syntax-violation-form . e4b46) (syntax-violation . e2fde) (simple-conditions . e507c) (serious-condition? . e4a73) (non-continuable-violation? . e4afd) (message-condition? . e4a47) (make-who-condition . e4ae2) (make-warning . e4a5c) (make-violation . e4a9b) (make-undefined-violation . e4b5b) (make-syntax-violation . e4b3e) (make-serious-condition . e4a71) (make-non-continuable-violation . e4afb) (make-message-condition . e4a43) (make-lexical-violation . e4b25) (make-irritants-condition . e4ac7) (make-implementation-restriction-violation . e4b10) (make-error . e4a86) (make-assertion-violation . e4ab0) (lexical-violation? . e4b27) (irritants-condition? . e4acb) (implementation-restriction-violation? . e4b12) (error? . e4a88) (condition-who . e4ae8) (condition-predicate . e507b) (condition-message . e4a49) (condition-irritants . e4acd) (condition-accessor . e507a) (condition . e5079) (assertion-violation? . e4ab2) (condition? . e5078) (utf32->string . e5077) (utf16->string . e5076) (utf8->string . e5075) (uint-list->bytevector . e5074) (u8-list->bytevector . e5073) (string->utf8 . e5072) (string->utf32 . e5071) (string->utf16 . e5070) (sint-list->bytevector . e506f) (native-endianness . e506e) (bytevector? . e506d) (bytevector=? . e506c) (bytevector-uint-set! . e506b) (bytevector-uint-ref . e506a) (bytevector-u8-set! . e5069) (bytevector-u8-ref . e5068) (bytevector-u64-set! . e5067) (bytevector-u64-ref . e5066) (bytevector-u64-native-set! . e5065) (bytevector-u64-native-ref . e5064) (bytevector-u32-set! . e5063) (bytevector-u32-ref . e5062) (bytevector-u32-native-set! . e5061) (bytevector-u32-native-ref . e5060) (bytevector-u16-set! . e505f) (bytevector-u16-ref . e505e) (bytevector-u16-native-set! . e505d) (bytevector-u16-native-ref . e505c) (bytevector-sint-set! . e505b) (bytevector-sint-ref . e505a) (bytevector-s8-set! . e5059) (bytevector-s8-ref . e5058) (bytevector-s64-set! . e5057) (bytevector-s64-ref . e5056) (bytevector-s64-native-set! . e5055) (bytevector-s64-native-ref . e5054) (bytevector-s32-set! . e5053) (bytevector-s32-ref . e5052) (bytevector-s32-native-set! . e5051) (bytevector-s32-native-ref . e5050) (bytevector-s16-set! . e504f) (bytevector-s16-ref . e504e) (bytevector-s16-native-set! . e504d) (bytevector-s16-native-ref . e504c) (bytevector-length . e504b) (bytevector-ieee-single-ref . e504a) (bytevector-ieee-single-set! . e5049) (bytevector-ieee-single-native-set! . e5048) (bytevector-ieee-single-native-ref . e5047) (bytevector-ieee-double-set! . e5046) (bytevector-ieee-double-ref . e5045) (bytevector-ieee-double-native-set! . e5044) (bytevector-ieee-double-native-ref . e5043) (bytevector-fill! . e5042) (bytevector-copy! . e5041) (bytevector-copy . e5040) (bytevector->uint-list . e503f) (bytevector->u8-list . e503e) (bytevector->sint-list . e503d) (no-nans-violation? . e4c9b) (no-infinities-violation? . e4c86) (make-no-nans-violation . e4c99) (make-no-infinities-violation . e4c84) (real->flonum . e503c) (flzero? . e503b) (fltruncate . e503a) (fltan . e5039) (flsqrt . e5038) (flsin . e5037) (flround . e5036) (flpositive? . e5035) (flonum? . e5034) (flodd? . e5033) (flnumerator . e5032) (flnegative? . e5031) (flnan? . e5030) (flmod0 . e502f) (flmod . e502e) (flmin . e502d) (flmax . e502c) (fllog . e502b) (flinteger? . e502a) (flinfinite? . e5029) (flfloor . e5028) (flfinite? . e5027) (flexpt . e5026) (flexp . e5025) (fleven? . e5024) (fldiv0-and-mod0 . e5023) (fldiv0 . e5022) (fldiv-and-mod . e5021) (fldiv . e5020) (fldenominator . e501f) (flcos . e501e) (flceiling . e501d) (flatan . e501c) (flasin . e501b) (flacos . e501a) (flabs . e5019) (fl>? . e5018) (fl>=? . e5017) (fl=? . e5016) (fl<? . e5015) (fl<=? . e5014) (fl/ . e5013) (fl- . e5012) (fl+ . e5011) (fl* . e5010) (fixnum->flonum . e500f) (fxzero? . e500e) (fxxor . e500d) (fxrotate-bit-field . e500c) (fxreverse-bit-field . e500b) (fxpositive? . e500a) (fxodd? . e5009) (fxnot . e5008) (fxnegative? . e5007) (fxmod0 . e5006) (fxmod . e5005) (fxmin . e5004) (fxmax . e5003) (fxlength . e5002) (fxior . e5001) (fxif . e5000) (fxfirst-bit-set . e4fff) (fxeven? . e4ffe) (fxdiv0-and-mod0 . e4ffd) (fxdiv0 . e4ffc) (fxdiv-and-mod . e4ffb) (fxdiv . e4ffa) (fxcopy-bit-field . e4ff9) (fxcopy-bit . e4ff8) (fxbit-set? . e4ff7) (fxbit-field . e4ff6) (fxbit-count . e4ff5) (fxarithmetic-shift-right . e4ff4) (fxarithmetic-shift-left . e4ff3) (fxarithmetic-shift . e4ff2) (fxand . e4ff1) (fx>? . e4ff0) (fx>=? . e4fef) (fx=? . e4fee) (fx<? . e4fed) (fx<=? . e4fec) (fx-/carry . e4feb) (fx- . e4fea) (fx+/carry . e4fe9) (fx+ . e4fe8) (fx*/carry . e4fe7) (fx* . e4fe6) (greatest-fixnum . e4fe5) (least-fixnum . e4fe4) (fixnum-width . e4fe3) (fixnum? . e4fe2) (bitwise-rotate-bit-field . e4fe1) (bitwise-reverse-bit-field . e4fe0) (bitwise-length . e4fdf) (bitwise-if . e4fde) (bitwise-first-bit-set . e4fdd) (bitwise-copy-bit-field . e4fdc) (bitwise-copy-bit . e4fdb) (bitwise-bit-set? . e4fda) (bitwise-bit-field . e4fd9) (bitwise-bit-count . e4fd8) (bitwise-xor . e4fd7) (bitwise-ior . e4fd6) (bitwise-and . e4fd5) (bitwise-not . e4fd4) (bitwise-arithmetic-shift-right . e4fd3) (bitwise-arithmetic-shift-left . e4fd2) (bitwise-arithmetic-shift . e4fd1) (zero? . e4fd0) (vector? . e4fcf) (vector-set! . e4fce) (vector-ref . e4fcd) (vector-map . e4fcc) (vector-length . e4fcb) (vector-for-each . e4fca) (vector-fill! . e4fc9) (vector->list . e4fc8) (vector . e4fc7) (values . e4fc6) (truncate . e4fc5) (tan . e4fc4) (symbol? . e4fc3) (symbol=? . e4fc2) (symbol->string . e4fc1) (substring . e4fc0) (string? . e4fbf) (string>? . e4fbe) (string>=? . e4fbd) (string=? . e4fbc) (string<? . e4fbb) (string<=? . e4fba) (string-ref . e4fb9) (string-length . e4fb8) (string-for-each . e4fb7) (string-copy . e4fb6) (string-append . e4fb5) (string->symbol . e4fb4) (string->number . e4fb3) (string->list . e4fb2) (string . e4fb1) (sqrt . e4fb0) (sin . e4faf) (round . e4fae) (reverse . e4fad) (real? . e4fac) (real-valued? . e4fab) (real-part . e4faa) (rationalize . e4fa9) (rational? . e4fa8) (rational-valued? . e4fa7) (procedure? . e4fa6) (positive? . e4fa5) (pair? . e4fa4) (odd? . e4fa3) (numerator . e4fa2) (number? . e4fa1) (number->string . e4fa0) (null? . e4f9f) (not . e4f9e) (negative? . e4f9d) (nan? . e4f9c) (min . e4f9b) (max . e4f9a) (map . e4f99) (make-vector . e4f98) (make-string . e4f97) (make-rectangular . e4f96) (make-polar . e4f95) (magnitude . e4f94) (log . e4f93) (list? . e4f92) (list-tail . e4f91) (list-ref . e4f90) (list->vector . e4f8f) (list->string . e4f8e) (list . e4f8d) (length . e4f8c) (lcm . e4f8b) (integer? . e4f8a) (integer-valued? . e4f89) (integer->char . e4f88) (infinite? . e4f87) (inexact? . e4f86) (inexact . e4f85) (imag-part . e4f84) (gcd . e4f83) (for-each . e4f82) (floor . e4f81) (finite? . e4f80) (expt . e4f7f) (exp . e4f7e) (exact? . e4f7d) (exact-integer-sqrt . e4f7c) (exact . e4f7b) (even? . e4f7a) (error . e4f79) (eqv? . e4f78) (equal? . e4f77) (eq? . e4f76) (dynamic-wind . e4f75) (div0-and-mod0 . e4f74) (mod0 . e4f73) (div0 . e4f72) (div-and-mod . e4f71) (mod . e4f70) (div . e4f6f) (denominator . e4f6e) (cos . e4f6d) (cons . e4f6c) (complex? . e4f6b) (char? . e4f6a) (char>? . e4f69) (char>=? . e4f68) (char=? . e4f67) (char<? . e4f66) (char<=? . e4f65) (char->integer . e4f64) (ceiling . e4f63) (call-with-values . e4f62) (call/cc . e4f61) (call-with-current-continuation . e4f60) (cddddr . e4f5f) (cdddar . e4f5e) (cddadr . e4f5d) (cddaar . e4f5c) (cdaddr . e4f5b) (cdadar . e4f5a) (cdaadr . e4f59) (cdaaar . e4f58) (cadddr . e4f57) (caddar . e4f56) (cadadr . e4f55) (cadaar . e4f54) (caaddr . e4f53) (caadar . e4f52) (caaadr . e4f51) (caaaar . e4f50) (cdddr . e4f4f) (cddar . e4f4e) (cdadr . e4f4d) (cdaar . e4f4c) (caddr . e4f4b) (cadar . e4f4a) (caadr . e4f49) (caaar . e4f48) (cddr . e4f47) (cdar . e4f46) (cadr . e4f45) (caar . e4f44) (cdr . e4f43) (car . e4f42) (boolean? . e4f41) (boolean=? . e4f40) (atan . e4f3f) (assertion-violation . e4f3e) (asin . e4f3d) (apply . e4f3c) (append . e4f3b) (angle . e4f3a) (acos . e4f39) (abs . e4f38) (/ . e4f37) (* . e4f36) (- . e4f35) (+ . e4f34) (>= . e4f33) (> . e4f32) (= . e4f31) (<= . e4f30) (< . e4f2f) (&no-nans . e4f2d) (&no-infinities . e4f2c) (&i/o-encoding . e4f2b) (&i/o-decoding . e4f2a) (&i/o-port . e4f29) (&i/o-file-does-not-exist . e4f28) (&i/o-file-already-exists . e4f27) (&i/o-file-is-read-only . e4f26) (&i/o-file-protection . e4f25) (&i/o-filename . e4f24) (&i/o-invalid-position . e4f23) (&i/o-write . e4f22) (&i/o-read . e4f21) (&i/o . e4f20) (&undefined . e4f1f) (&syntax . e4f1e) (&lexical . e4f1d) (&implementation-restriction . e4f1c) (&non-continuable . e4f1b) (&who . e4f1a) (&irritants . e4f19) (&assertion . e4f18) (&violation . e4f17) (&error . e4f16) (&serious . e4f15) (&warning . e4f14) (&message . e4f13) (&condition . e4f12) (define-condition-type . e4f11) (define-enumeration . e4f10) (define-record-type . e4f0f) (parent-rtd . e4f0e) (nongenerative . e4f0d) (opaque . e4f0c) (sealed . e4f0b) (protocol . e4f0a) (parent . e4f09) (immutable . e4f08) (mutable . e4f07) (fields . e4f06) (error-handling-mode . e4f05) (file-options . e4f04) (buffer-mode . e4f03) (eol-style . e4f02) (guard . e4f01) (unsyntax-splicing . e4efe) (unsyntax . e4efd) (unquote-splicing . e4efc) (unquote . e4efb) (_ . e4efa) (else . e4ef9) (=> . e4ef8) (... . e4ef7) (assert . e4ef6) (endianness . e4ef5) (do . e4ef2) (cond . e4ef1) (let* . e4ef0) (let . e4eef) (let*-values . e4eee) (let-values . e4eed) (identifier-syntax . e4eec) (with-syntax . e4eeb) (quasisyntax . e4eea) (quasiquote . e4ee9) (syntax-rules . e4ee8) (record-constructor-descriptor . e4ee5) (record-type-descriptor . e4ee4) (case . e4ee3) (unless . e4ee1) (when . e4ee0) (or . e4edf) (and . e4ede) (if . e4edd) (letrec* . e4edc) (letrec . e4edb) (case-lambda . e4ed9) (lambda . e4ed8) (syntax . e4ed7) (syntax-case . e4ed6) (quote . e4ed5) (letrec-syntax . e4ed3) (let-syntax . e4ed2) (set! . e4ed1) (begin . e4ecf) (define-syntax . e4ecd) (define . e4ecc)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e7 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . e2fba) (quotient . e50b2) (null-environment . e2fb8) (remainder . e50b1) (modulo . e50b0) (inexact->exact . e50af) (force . e50ae) (exact->inexact . e50ad) (make-promise . e50ac) (delay . e4ef4)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e8 '(rnrs control) '(6) '() '() '() '((do . e4ef2) (unless . e4ee1) (when . e4ee0) (case-lambda . e4ed9)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51e9 '(rnrs eval) '(6) '() '() '() '((eval . e2fbe) (environment . e2fb6)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51ea '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . e50a8) (set-car! . e50a7)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51eb '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . e50aa) (string-set! . e50a9)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51ec '(rnrs programs) '(6) '() '() '() '((exit . e50ab) (command-line . e4da6)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51ed '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . e2d22) (identifier? . e2fe0) (generate-temporaries . e2fcc) (free-identifier=? . e2fce) (syntax->datum . e2fe4) (datum->syntax . e2fe2) (bound-identifier=? . e2fd0) (syntax-violation . e2fde) (unsyntax-splicing . e4efe) (unsyntax . e4efd) (_ . e4efa) (... . e4ef7) (with-syntax . e4eeb) (quasisyntax . e4eea) (syntax . e4ed7) (syntax-case . e4ed6)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51ee '(rnrs files) '(6) '() '() '() '((delete-file . e511b) (file-exists? . e511a) (make-i/o-write-error . e4b9a) (make-i/o-read-error . e4b85) (make-i/o-port-error . e4c3b) (make-i/o-invalid-position-error . e4bb1) (make-i/o-filename-error . e4bcc) (make-i/o-file-protection-error . e4be5) (make-i/o-file-is-read-only-error . e4bfa) (make-i/o-file-does-not-exist-error . e4c24) (make-i/o-file-already-exists-error . e4c0f) (make-i/o-error . e4b70) (i/o-write-error? . e4b9c) (i/o-read-error? . e4b87) (i/o-port-error? . e4c3f) (i/o-invalid-position-error? . e4bb5) (i/o-filename-error? . e4bd0) (i/o-file-protection-error? . e4be7) (i/o-file-is-read-only-error? . e4bfc) (i/o-file-does-not-exist-error? . e4c26) (i/o-file-already-exists-error? . e4c11) (i/o-error? . e4b72) (i/o-error-position . e4bb7) (i/o-error-port . e4c41) (i/o-error-filename . e4bd2) (&i/o-port . e4f29) (&i/o-file-does-not-exist . e4f28) (&i/o-file-already-exists . e4f27) (&i/o-file-is-read-only . e4f26) (&i/o-file-protection . e4f25) (&i/o-filename . e4f24) (&i/o-invalid-position . e4f23) (&i/o-write . e4f22) (&i/o-read . e4f21) (&i/o . e4f20)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51ef '(rnrs sorting) '(6) '() '() '() '((vector-sort! . e5119) (vector-sort . e5118) (list-sort . e5117)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f0 '(rnrs base) '(6) '() '() '() '((zero? . e4fd0) (vector? . e4fcf) (vector-set! . e4fce) (vector-ref . e4fcd) (vector-map . e4fcc) (vector-length . e4fcb) (vector-for-each . e4fca) (vector-fill! . e4fc9) (vector->list . e4fc8) (vector . e4fc7) (values . e4fc6) (truncate . e4fc5) (tan . e4fc4) (symbol? . e4fc3) (symbol=? . e4fc2) (symbol->string . e4fc1) (substring . e4fc0) (string? . e4fbf) (string>? . e4fbe) (string>=? . e4fbd) (string=? . e4fbc) (string<? . e4fbb) (string<=? . e4fba) (string-ref . e4fb9) (string-length . e4fb8) (string-for-each . e4fb7) (string-copy . e4fb6) (string-append . e4fb5) (string->symbol . e4fb4) (string->number . e4fb3) (string->list . e4fb2) (string . e4fb1) (sqrt . e4fb0) (sin . e4faf) (round . e4fae) (reverse . e4fad) (real? . e4fac) (real-valued? . e4fab) (real-part . e4faa) (rationalize . e4fa9) (rational? . e4fa8) (rational-valued? . e4fa7) (procedure? . e4fa6) (positive? . e4fa5) (pair? . e4fa4) (odd? . e4fa3) (numerator . e4fa2) (number? . e4fa1) (number->string . e4fa0) (null? . e4f9f) (not . e4f9e) (negative? . e4f9d) (nan? . e4f9c) (min . e4f9b) (max . e4f9a) (map . e4f99) (make-vector . e4f98) (make-string . e4f97) (make-rectangular . e4f96) (make-polar . e4f95) (magnitude . e4f94) (log . e4f93) (list? . e4f92) (list-tail . e4f91) (list-ref . e4f90) (list->vector . e4f8f) (list->string . e4f8e) (list . e4f8d) (length . e4f8c) (lcm . e4f8b) (integer? . e4f8a) (integer-valued? . e4f89) (integer->char . e4f88) (infinite? . e4f87) (inexact? . e4f86) (inexact . e4f85) (imag-part . e4f84) (gcd . e4f83) (for-each . e4f82) (floor . e4f81) (finite? . e4f80) (expt . e4f7f) (exp . e4f7e) (exact? . e4f7d) (exact-integer-sqrt . e4f7c) (exact . e4f7b) (even? . e4f7a) (error . e4f79) (eqv? . e4f78) (equal? . e4f77) (eq? . e4f76) (dynamic-wind . e4f75) (div0-and-mod0 . e4f74) (mod0 . e4f73) (div0 . e4f72) (div-and-mod . e4f71) (mod . e4f70) (div . e4f6f) (denominator . e4f6e) (cos . e4f6d) (cons . e4f6c) (complex? . e4f6b) (char? . e4f6a) (char>? . e4f69) (char>=? . e4f68) (char=? . e4f67) (char<? . e4f66) (char<=? . e4f65) (char->integer . e4f64) (ceiling . e4f63) (call-with-values . e4f62) (call/cc . e4f61) (call-with-current-continuation . e4f60) (cddddr . e4f5f) (cdddar . e4f5e) (cddadr . e4f5d) (cddaar . e4f5c) (cdaddr . e4f5b) (cdadar . e4f5a) (cdaadr . e4f59) (cdaaar . e4f58) (cadddr . e4f57) (caddar . e4f56) (cadadr . e4f55) (cadaar . e4f54) (caaddr . e4f53) (caadar . e4f52) (caaadr . e4f51) (caaaar . e4f50) (cdddr . e4f4f) (cddar . e4f4e) (cdadr . e4f4d) (cdaar . e4f4c) (caddr . e4f4b) (cadar . e4f4a) (caadr . e4f49) (caaar . e4f48) (cddr . e4f47) (cdar . e4f46) (cadr . e4f45) (caar . e4f44) (cdr . e4f43) (car . e4f42) (boolean? . e4f41) (boolean=? . e4f40) (atan . e4f3f) (assertion-violation . e4f3e) (asin . e4f3d) (apply . e4f3c) (append . e4f3b) (angle . e4f3a) (acos . e4f39) (abs . e4f38) (/ . e4f37) (* . e4f36) (- . e4f35) (+ . e4f34) (>= . e4f33) (> . e4f32) (= . e4f31) (<= . e4f30) (< . e4f2f) (unquote-splicing . e4efc) (unquote . e4efb) (_ . e4efa) (else . e4ef9) (=> . e4ef8) (... . e4ef7) (assert . e4ef6) (cond . e4ef1) (let* . e4ef0) (let . e4eef) (let*-values . e4eee) (let-values . e4eed) (identifier-syntax . e4eec) (quasiquote . e4ee9) (syntax-rules . e4ee8) (case . e4ee3) (or . e4edf) (and . e4ede) (if . e4edd) (letrec* . e4edc) (letrec . e4edb) (lambda . e4ed8) (quote . e4ed5) (letrec-syntax . e4ed3) (let-syntax . e4ed2) (set! . e4ed1) (begin . e4ecf) (define-syntax . e4ecd) (define . e4ecc)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f1 '(rnrs lists) '(6) '() '() '() '((remove . e50a6) (remv . e50a5) (remp . e50a4) (remq . e50a3) (partition . e50a2) (memv . e50a1) (memq . e50a0) (memp . e509f) (member . e509e) (exists . e509d) (for-all . e509c) (fold-right . e509b) (fold-left . e509a) (find . e5099) (filter . e5098) (cons* . e5097) (assv . e5096) (assq . e5095) (assp . e5094) (assoc . e5093)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f2 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . e5101) (call-with-input-file . e5100) (write-char . e50ff) (write . e50fe) (with-output-to-file . e50fd) (with-input-from-file . e50fc) (read-char . e50fb) (read . e50fa) (peek-char . e50f9) (open-output-file . e50f8) (open-input-file . e50f7) (newline . e50f6) (display . e50f5) (close-output-port . e50f4) (close-input-port . e50f3) (eof-object? . e50f2) (eof-object . e50f1) (current-error-port . e50f0) (current-output-port . e50ef) (current-input-port . e50ee) (output-port? . e50ed) (input-port? . e50ec) (make-i/o-write-error . e4b9a) (make-i/o-read-error . e4b85) (make-i/o-port-error . e4c3b) (make-i/o-invalid-position-error . e4bb1) (make-i/o-filename-error . e4bcc) (make-i/o-file-protection-error . e4be5) (make-i/o-file-is-read-only-error . e4bfa) (make-i/o-file-does-not-exist-error . e4c24) (make-i/o-file-already-exists-error . e4c0f) (make-i/o-error . e4b70) (i/o-write-error? . e4b9c) (i/o-read-error? . e4b87) (i/o-port-error? . e4c3f) (i/o-invalid-position-error? . e4bb5) (i/o-filename-error? . e4bd0) (i/o-file-protection-error? . e4be7) (i/o-file-is-read-only-error? . e4bfc) (i/o-file-does-not-exist-error? . e4c26) (i/o-file-already-exists-error? . e4c11) (i/o-error? . e4b72) (i/o-error-position . e4bb7) (i/o-error-port . e4c41) (i/o-error-filename . e4bd2) (&i/o-port . e4f29) (&i/o-file-does-not-exist . e4f28) (&i/o-file-already-exists . e4f27) (&i/o-file-is-read-only . e4f26) (&i/o-file-protection . e4f25) (&i/o-filename . e4f24) (&i/o-invalid-position . e4f23) (&i/o-write . e4f22) (&i/o-read . e4f21) (&i/o . e4f20)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f3 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . e50c2) (utf32->string . e5077) (utf16->string . e5076) (utf8->string . e5075) (uint-list->bytevector . e5074) (u8-list->bytevector . e5073) (string->utf8 . e5072) (string->utf32 . e5071) (string->utf16 . e5070) (sint-list->bytevector . e506f) (native-endianness . e506e) (bytevector? . e506d) (bytevector=? . e506c) (bytevector-uint-set! . e506b) (bytevector-uint-ref . e506a) (bytevector-u8-set! . e5069) (bytevector-u8-ref . e5068) (bytevector-u64-set! . e5067) (bytevector-u64-ref . e5066) (bytevector-u64-native-set! . e5065) (bytevector-u64-native-ref . e5064) (bytevector-u32-set! . e5063) (bytevector-u32-ref . e5062) (bytevector-u32-native-set! . e5061) (bytevector-u32-native-ref . e5060) (bytevector-u16-set! . e505f) (bytevector-u16-ref . e505e) (bytevector-u16-native-set! . e505d) (bytevector-u16-native-ref . e505c) (bytevector-sint-set! . e505b) (bytevector-sint-ref . e505a) (bytevector-s8-set! . e5059) (bytevector-s8-ref . e5058) (bytevector-s64-set! . e5057) (bytevector-s64-ref . e5056) (bytevector-s64-native-set! . e5055) (bytevector-s64-native-ref . e5054) (bytevector-s32-set! . e5053) (bytevector-s32-ref . e5052) (bytevector-s32-native-set! . e5051) (bytevector-s32-native-ref . e5050) (bytevector-s16-set! . e504f) (bytevector-s16-ref . e504e) (bytevector-s16-native-set! . e504d) (bytevector-s16-native-ref . e504c) (bytevector-length . e504b) (bytevector-ieee-single-ref . e504a) (bytevector-ieee-single-set! . e5049) (bytevector-ieee-single-native-set! . e5048) (bytevector-ieee-single-native-ref . e5047) (bytevector-ieee-double-set! . e5046) (bytevector-ieee-double-ref . e5045) (bytevector-ieee-double-native-set! . e5044) (bytevector-ieee-double-native-ref . e5043) (bytevector-fill! . e5042) (bytevector-copy! . e5041) (bytevector-copy . e5040) (bytevector->uint-list . e503f) (bytevector->u8-list . e503e) (bytevector->sint-list . e503d) (endianness . e4ef5)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f4 '(rnrs unicode) '(6) '() '() '() '((string-upcase . e5149) (string-titlecase . e5148) (string-normalize-nfkd . e5147) (string-normalize-nfkc . e5146) (string-normalize-nfd . e5145) (string-normalize-nfc . e5144) (string-foldcase . e5143) (string-downcase . e5142) (string-ci>? . e5141) (string-ci>=? . e5140) (string-ci=? . e513f) (string-ci<? . e513e) (string-ci<=? . e513d) (char-whitespace? . e513c) (char-upper-case? . e513b) (char-title-case? . e513a) (char-numeric? . e5139) (char-lower-case? . e5138) (char-general-category . e5137) (char-upcase . e5136) (char-titlecase . e5135) (char-foldcase . e5134) (char-downcase . e5133) (char-ci>? . e5132) (char-ci>=? . e5131) (char-ci=? . e5130) (char-ci<? . e512f) (char-ci<=? . e512e) (char-alphabetic? . e512d)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f5 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . e508c) (raise-continuable . e508b) (raise . e508a) (guard . e4f01) (else . e4ef9) (=> . e4ef8)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f6 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . e4fe1) (bitwise-reverse-bit-field . e4fe0) (bitwise-length . e4fdf) (bitwise-if . e4fde) (bitwise-first-bit-set . e4fdd) (bitwise-copy-bit-field . e4fdc) (bitwise-copy-bit . e4fdb) (bitwise-bit-set? . e4fda) (bitwise-bit-field . e4fd9) (bitwise-bit-count . e4fd8) (bitwise-xor . e4fd7) (bitwise-ior . e4fd6) (bitwise-and . e4fd5) (bitwise-not . e4fd4) (bitwise-arithmetic-shift-right . e4fd3) (bitwise-arithmetic-shift-left . e4fd2) (bitwise-arithmetic-shift . e4fd1)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f7 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . e500e) (fxxor . e500d) (fxrotate-bit-field . e500c) (fxreverse-bit-field . e500b) (fxpositive? . e500a) (fxodd? . e5009) (fxnot . e5008) (fxnegative? . e5007) (fxmod0 . e5006) (fxmod . e5005) (fxmin . e5004) (fxmax . e5003) (fxlength . e5002) (fxior . e5001) (fxif . e5000) (fxfirst-bit-set . e4fff) (fxeven? . e4ffe) (fxdiv0-and-mod0 . e4ffd) (fxdiv0 . e4ffc) (fxdiv-and-mod . e4ffb) (fxdiv . e4ffa) (fxcopy-bit-field . e4ff9) (fxcopy-bit . e4ff8) (fxbit-set? . e4ff7) (fxbit-field . e4ff6) (fxbit-count . e4ff5) (fxarithmetic-shift-right . e4ff4) (fxarithmetic-shift-left . e4ff3) (fxarithmetic-shift . e4ff2) (fxand . e4ff1) (fx>? . e4ff0) (fx>=? . e4fef) (fx=? . e4fee) (fx<? . e4fed) (fx<=? . e4fec) (fx-/carry . e4feb) (fx- . e4fea) (fx+/carry . e4fe9) (fx+ . e4fe8) (fx*/carry . e4fe7) (fx* . e4fe6) (greatest-fixnum . e4fe5) (least-fixnum . e4fe4) (fixnum-width . e4fe3) (fixnum? . e4fe2)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f8 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . e4c9b) (no-infinities-violation? . e4c86) (make-no-nans-violation . e4c99) (make-no-infinities-violation . e4c84) (real->flonum . e503c) (flzero? . e503b) (fltruncate . e503a) (fltan . e5039) (flsqrt . e5038) (flsin . e5037) (flround . e5036) (flpositive? . e5035) (flonum? . e5034) (flodd? . e5033) (flnumerator . e5032) (flnegative? . e5031) (flnan? . e5030) (flmod0 . e502f) (flmod . e502e) (flmin . e502d) (flmax . e502c) (fllog . e502b) (flinteger? . e502a) (flinfinite? . e5029) (flfloor . e5028) (flfinite? . e5027) (flexpt . e5026) (flexp . e5025) (fleven? . e5024) (fldiv0-and-mod0 . e5023) (fldiv0 . e5022) (fldiv-and-mod . e5021) (fldiv . e5020) (fldenominator . e501f) (flcos . e501e) (flceiling . e501d) (flatan . e501c) (flasin . e501b) (flacos . e501a) (flabs . e5019) (fl>? . e5018) (fl>=? . e5017) (fl=? . e5016) (fl<? . e5015) (fl<=? . e5014) (fl/ . e5013) (fl- . e5012) (fl+ . e5011) (fl* . e5010) (fixnum->flonum . e500f) (&no-nans . e4f2d) (&no-infinities . e4f2c)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51f9 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . e5116) (string-ci-hash . e5115) (string-hash . e5114) (equal-hash . e5113) (hashtable-equivalence-function . e5112) (make-hashtable . e5111) (hashtable-hash-function . e5110) (make-eqv-hashtable . e510f) (make-eq-hashtable . e510e) (hashtable? . e510d) (hashtable-update! . e510c) (hashtable-size . e510b) (hashtable-set! . e510a) (hashtable-ref . e5109) (hashtable-mutable? . e5108) (hashtable-keys . e5107) (hashtable-entries . e5106) (hashtable-delete! . e5105) (hashtable-copy . e5104) (hashtable-contains? . e5103) (hashtable-clear! . e5102)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51fa '(rnrs io ports) '(6) '() '() '() '((eof-object? . e50f2) (eof-object . e50f1) (current-error-port . e50f0) (current-output-port . e50ef) (current-input-port . e50ee) (output-port? . e50ed) (input-port? . e50ec) (utf-8-codec . e50eb) (utf-16-codec . e50ea) (transcoder-error-handling-mode . e50e9) (transcoder-eol-style . e50e8) (transcoder-codec . e50e7) (transcoded-port . e50e6) (textual-port? . e50e5) (string->bytevector . e50e4) (standard-output-port . e50e3) (standard-input-port . e50e2) (standard-error-port . e50e1) (set-port-position! . e50e0) (put-u8 . e50df) (put-string . e50de) (put-datum . e50dd) (put-char . e50dc) (put-bytevector . e50db) (port? . e50da) (port-transcoder . e50d9) (port-position . e50d8) (port-has-set-port-position!? . e50d7) (port-has-port-position? . e50d6) (port-eof? . e50d5) (output-port-buffer-mode . e50d4) (open-string-output-port . e50d3) (open-string-input-port . e50d2) (open-file-output-port . e50d1) (open-file-input/output-port . e50d0) (open-file-input-port . e50cf) (open-bytevector-output-port . e50ce) (open-bytevector-input-port . e50cd) (native-transcoder . e50cc) (native-eol-style . e50cb) (make-transcoder . e50ca) (latin-1-codec . e50c9) (make-i/o-write-error . e4b9a) (make-i/o-read-error . e4b85) (make-i/o-port-error . e4c3b) (make-i/o-invalid-position-error . e4bb1) (make-i/o-filename-error . e4bcc) (make-i/o-file-protection-error . e4be5) (make-i/o-file-is-read-only-error . e4bfa) (make-i/o-file-does-not-exist-error . e4c24) (make-i/o-file-already-exists-error . e4c0f) (make-i/o-error . e4b70) (make-i/o-encoding-error . e4c6b) (make-i/o-decoding-error . e4c54) (make-custom-textual-output-port . e50c8) (make-custom-textual-input/output-port . e50c7) (make-custom-textual-input-port . e50c6) (make-custom-binary-output-port . e50c5) (make-custom-binary-input/output-port . e50c4) (make-custom-binary-input-port . e50c3) (lookahead-u8 . e50c1) (lookahead-char . e50c0) (i/o-write-error? . e4b9c) (i/o-read-error? . e4b87) (i/o-port-error? . e4c3f) (i/o-invalid-position-error? . e4bb5) (i/o-filename-error? . e4bd0) (i/o-file-protection-error? . e4be7) (i/o-file-is-read-only-error? . e4bfc) (i/o-file-does-not-exist-error? . e4c26) (i/o-file-already-exists-error? . e4c11) (i/o-error? . e4b72) (i/o-error-position . e4bb7) (i/o-error-port . e4c41) (i/o-error-filename . e4bd2) (i/o-encoding-error? . e4c6f) (i/o-encoding-error-char . e4c71) (i/o-decoding-error? . e4c56) (get-u8 . e50bf) (get-string-n! . e50be) (get-string-n . e50bd) (get-string-all . e50bc) (get-line . e50bb) (get-datum . e50ba) (get-char . e50b9) (get-bytevector-some . e50b8) (get-bytevector-n! . e50b7) (get-bytevector-n . e50b6) (get-bytevector-all . e50b5) (flush-output-port . e50b4) (close-port . e50b3) (call-with-string-output-port . e5092) (call-with-port . e5091) (call-with-bytevector-output-port . e5090) (bytevector->string . e508f) (buffer-mode? . e508e) (binary-port? . e508d) (&i/o-encoding . e4f2b) (&i/o-decoding . e4f2a) (&i/o-port . e4f29) (&i/o-file-does-not-exist . e4f28) (&i/o-file-already-exists . e4f27) (&i/o-file-is-read-only . e4f26) (&i/o-file-protection . e4f25) (&i/o-filename . e4f24) (&i/o-invalid-position . e4f23) (&i/o-write . e4f22) (&i/o-read . e4f21) (&i/o . e4f20) (error-handling-mode . e4f05) (file-options . e4f04) (buffer-mode . e4f03) (eol-style . e4f02)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51fb '(rnrs enums) '(6) '() '() '() '((make-enumeration . e5089) (enum-set=? . e5088) (enum-set-universe . e5087) (enum-set-union . e5086) (enum-set-subset? . e5085) (enum-set-projection . e5084) (enum-set-member? . e5083) (enum-set-intersection . e5082) (enum-set-indexer . e5081) (enum-set-difference . e5080) (enum-set-constructor . e507f) (enum-set-complement . e507e) (enum-set->list . e507d) (define-enumeration . e4f10)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51fc '(rnrs conditions) '(6) '() '() '() '((who-condition? . e4ae6) (warning? . e4a5e) (violation? . e4a9d) (undefined-violation? . e4b5d) (syntax-violation? . e4b44) (syntax-violation-subform . e4b48) (syntax-violation-form . e4b46) (syntax-violation . e2fde) (simple-conditions . e507c) (serious-condition? . e4a73) (non-continuable-violation? . e4afd) (message-condition? . e4a47) (make-who-condition . e4ae2) (make-warning . e4a5c) (make-violation . e4a9b) (make-undefined-violation . e4b5b) (make-syntax-violation . e4b3e) (make-serious-condition . e4a71) (make-non-continuable-violation . e4afb) (make-message-condition . e4a43) (make-lexical-violation . e4b25) (make-irritants-condition . e4ac7) (make-implementation-restriction-violation . e4b10) (make-error . e4a86) (make-assertion-violation . e4ab0) (lexical-violation? . e4b27) (irritants-condition? . e4acb) (implementation-restriction-violation? . e4b12) (error? . e4a88) (condition-who . e4ae8) (condition-predicate . e507b) (condition-message . e4a49) (condition-irritants . e4acd) (condition-accessor . e507a) (condition . e5079) (assertion-violation? . e4ab2) (condition? . e5078) (&undefined . e4f1f) (&syntax . e4f1e) (&lexical . e4f1d) (&implementation-restriction . e4f1c) (&non-continuable . e4f1b) (&who . e4f1a) (&irritants . e4f19) (&assertion . e4f18) (&violation . e4f17) (&error . e4f16) (&serious . e4f15) (&warning . e4f14) (&message . e4f13) (&condition . e4f12) (define-condition-type . e4f11)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51fd '(rnrs records inspection) '(6) '() '() '() '((record? . e5125) (record-type-uid . e5124) (record-type-sealed? . e5123) (record-type-parent . e5122) (record-type-opaque? . e5121) (record-type-name . e5120) (record-type-generative? . e511f) (record-type-field-names . e511e) (record-rtd . e511d) (record-field-mutable? . e511c)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51fe '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . e512c) (record-predicate . e512b) (record-mutator . e512a) (record-constructor . e5129) (record-accessor . e5128) (make-record-type-descriptor . e5127) (make-record-constructor-descriptor . e5126)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e51ff '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . e4f0f) (parent-rtd . e4f0e) (nongenerative . e4f0d) (opaque . e4f0c) (sealed . e4f0b) (protocol . e4f0a) (parent . e4f09) (immutable . e4f08) (mutable . e4f07) (fields . e4f06) (record-constructor-descriptor . e4ee5) (record-type-descriptor . e4ee4)) '() values values '#f '#f '#t '#f) (e2b0d@e29ac@install-library 'e5200 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . e4c9f) (&no-nans-rtd . e4c9d) (&no-infinities-rcd . e4c8a) (&no-infinities-rtd . e4c88) (&i/o-encoding-rcd . e4c75) (&i/o-encoding-rtd . e4c73) (&i/o-decoding-rcd . e4c5a) (&i/o-decoding-rtd . e4c58) (&i/o-port-rcd . e4c45) (&i/o-port-rtd . e4c43) (&i/o-file-does-not-exist-rcd . e4c2a) (&i/o-file-does-not-exist-rtd . e4c28) (&i/o-file-already-exists-rcd . e4c15) (&i/o-file-already-exists-rtd . e4c13) (&i/o-file-is-read-only-rcd . e4c00) (&i/o-file-is-read-only-rtd . e4bfe) (&i/o-file-protection-rcd . e4beb) (&i/o-file-protection-rtd . e4be9) (&i/o-filename-rcd . e4bd6) (&i/o-filename-rtd . e4bd4) (&i/o-invalid-position-rcd . e4bbb) (&i/o-invalid-position-rtd . e4bb9) (&i/o-write-rcd . e4ba0) (&i/o-write-rtd . e4b9e) (&i/o-read-rcd . e4b8b) (&i/o-read-rtd . e4b89) (&i/o-rcd . e4b76) (&i/o-rtd . e4b74) (&undefined-rcd . e4b61) (&undefined-rtd . e4b5f) (&syntax-rcd . e4b4c) (&syntax-rtd . e4b4a) (&lexical-rcd . e4b2b) (&lexical-rtd . e4b29) (&implementation-restriction-rcd . e4b16) (&implementation-restriction-rtd . e4b14) (&non-continuable-rcd . e4b01) (&non-continuable-rtd . e4aff) (&who-rcd . e4aec) (&who-rtd . e4aea) (&irritants-rcd . e4ad1) (&irritants-rtd . e4acf) (&assertion-rcd . e4ab6) (&assertion-rtd . e4ab4) (&violation-rcd . e4aa1) (&violation-rtd . e4a9f) (&error-rcd . e4a8c) (&error-rtd . e4a8a) (&serious-rcd . e4a77) (&serious-rtd . e4a75) (&warning-rcd . e4a62) (&warning-rtd . e4a60) (&message-rcd . e4a4d) (&message-rtd . e4a4b) (&condition-rcd . e49ee) (&condition-rtd . e49ec) (syntax-error . e2fda) (syntax-dispatch . e2ef5) (pretty-print . e51e0) (eval-core . e51df) (set-symbol-value! . e51de) (symbol-value . e51dd) (gensym . e51dc) (void . e51db) (load . e4dac) (interaction-environment . e2fea) (char-ready? . e51da) (regexp? . e51d9) (read-line . e51d8) (ungensym . e51d7) (alist->eq-hash-table . e51d6) (assoc-ref . e51d5) (print . e51d4) (format . e51d3) (host-os . e51d2) (library-path . e298b) (standard-library-path . e51d1) (file-newer? . e51d0) (stat-mtime . e51cf) (write-to-file . e51ce) (file->list . e51cd) (file->string . e51cc) (digit->integer . e51cb) (call-with-string-input-port . e51ca) (call-with-string-io . e51c9) (string-split . e51c8) (bytevector-for-each . e51c7) (string->regexp . e51c6) (rxmatch . e51c5) (regexp-replace-all . e51c4) (hashtable-for-each . e51c3) (call-process . e51c2) (local-tz-offset . e51c1) (microseconds . e51c0) (directory-list . e51bf) (set-current-directory! . e51be) (expand-path . e51bd) (current-directory . e51bc) (%spawn . e51bb) (%waitpid . e51ba) (pointer-ref-c-int64 . e51b9) (pointer-ref-c-int32 . e51b8) (pointer-ref-c-int16 . e51b7) (pointer-ref-c-int8 . e51b6) (pointer-ref-c-uint64 . e51b5) (pointer-ref-c-uint32 . e51b4) (pointer-ref-c-uint16 . e51b3) (pointer-ref-c-uint8 . e51b2) (pointer-set-c-int64! . e51b1) (pointer-set-c-int32! . e51b0) (pointer-set-c-int16! . e51af) (pointer-set-c-int8! . e51ae) (pointer-set-c-pointer! . e51ad) (pointer-set-c-double! . e51ac) (pointer-set-c-float! . e51ab) (pointer-set-c-long-long! . e51aa) (pointer-set-c-long! . e51a9) (pointer-set-c-int! . e51a8) (pointer-set-c-short! . e51a7) (pointer-set-c-char! . e51a6) (pointer-ref-c-pointer . e51a5) (pointer-ref-c-double . e51a4) (pointer-ref-c-float . e51a3) (pointer-ref-c-unsigned-long-long . e51a2) (pointer-ref-c-signed-long-long . e51a1) (pointer-ref-c-unsigned-long . e51a0) (pointer-ref-c-signed-long . e519f) (pointer-ref-c-unsigned-int . e519e) (pointer-ref-c-signed-int . e519d) (pointer-ref-c-unsigned-short . e519c) (pointer-ref-c-signed-short . e519b) (pointer-ref-c-unsigned-char . e519a) (pointer-ref-c-signed-char . e5199) (pointer->integer . e5198) (integer->pointer . e5197) (pointer? . e5196) (shared-errno . e5195) (%ffi-supported? . e5194) (%ffi-pointer->string . e5193) (%ffi-call->string-or-zero . e5192) (%ffi-call->double . e5191) (%ffi-call->void* . e5190) (%ffi-call->void . e518f) (%ffi-call->char . e518e) (%ffi-call->int . e518d) (%ffi-lookup . e518c) (%ffi-open . e518b) (%fork . e518a) (%pipe . e5189) (p . e5188) (open-output-string . e5187) (get-output-string . e5186) (file-stat-ctime . e5185) (file-stat-atime . e5184) (file-stat-mtime . e5183) (file-size-in-bytes . e5182) (file-writable? . e5181) (file-executable? . e5180) (file-readable? . e517f) (file-regular? . e517e) (file-symbolic-link? . e517d) (file-directory? . e517c) (create-symbolic-link . e517b) (rename-file . e517a) (delete-directory . e5179) (create-directory . e5178) (get-environment-variables . e5177) (get-environment-variable . e5176) (get-timeofday . e5175) (get-command-line . e5174) (sys-display . e5173) (whereis . e5172) (register . e5171) (vm-join! . e5170) (vm-set-value! . e516f) (vm? . e516e) (main-vm? . e516d) (vm-eval . e516c) (vm-self . e516b) (vm-start! . e516a) (make-vm . e5169) (mutex-try-lock! . e5168) (mutex-unlock! . e5167) (mutex-lock! . e5166) (mutex? . e5165) (make-mutex . e5164) (condition-variable-notify-all! . e5163) (condition-variable-notify! . e5162) (condition-variable-wait! . e5161) (make-condition-variable . e5160) (mosh-executable-path . e515f) (make-file-options . e515e) (source-info . e515d) (make-compiler-instruction . e515c) (make-instruction . e515b) (set-source-info! . e515a) (bignum? . e5159) (fast-equal? . e5158) (fasl-read . e5157) (fasl-write . e5156) (time-usage . e5155) (os-constant . e5154) (make-parameter . e27be) (socket-port . e5153) (socket-shutdown . e5152) (socket-close . e5151) (socket-send . e5150) (socket-recv! . e514f) (socket-recv . e514e) (make-server-socket . e514d) (make-client-socket . e514c) (socket-accept . e514b) (socket? . e514a) (string-upcase . e5149) (string-titlecase . e5148) (string-normalize-nfkd . e5147) (string-normalize-nfkc . e5146) (string-normalize-nfd . e5145) (string-normalize-nfc . e5144) (string-foldcase . e5143) (string-downcase . e5142) (string-ci>? . e5141) (string-ci>=? . e5140) (string-ci=? . e513f) (string-ci<? . e513e) (string-ci<=? . e513d) (char-whitespace? . e513c) (char-upper-case? . e513b) (char-title-case? . e513a) (char-numeric? . e5139) (char-lower-case? . e5138) (char-general-category . e5137) (char-upcase . e5136) (char-titlecase . e5135) (char-foldcase . e5134) (char-downcase . e5133) (char-ci>? . e5132) (char-ci>=? . e5131) (char-ci=? . e5130) (char-ci<? . e512f) (char-ci<=? . e512e) (char-alphabetic? . e512d) (make-variable-transformer . e2d22) (identifier? . e2fe0) (generate-temporaries . e2fcc) (free-identifier=? . e2fce) (syntax->datum . e2fe4) (datum->syntax . e2fe2) (bound-identifier=? . e2fd0) (record-type-descriptor? . e512c) (record-predicate . e512b) (record-mutator . e512a) (record-constructor . e5129) (record-accessor . e5128) (make-record-type-descriptor . e5127) (make-record-constructor-descriptor . e5126) (record? . e5125) (record-type-uid . e5124) (record-type-sealed? . e5123) (record-type-parent . e5122) (record-type-opaque? . e5121) (record-type-name . e5120) (record-type-generative? . e511f) (record-type-field-names . e511e) (record-rtd . e511d) (record-field-mutable? . e511c) (delete-file . e511b) (file-exists? . e511a) (vector-sort! . e5119) (vector-sort . e5118) (list-sort . e5117) (symbol-hash . e5116) (string-ci-hash . e5115) (string-hash . e5114) (equal-hash . e5113) (hashtable-equivalence-function . e5112) (make-hashtable . e5111) (hashtable-hash-function . e5110) (make-eqv-hashtable . e510f) (make-eq-hashtable . e510e) (hashtable? . e510d) (hashtable-update! . e510c) (hashtable-size . e510b) (hashtable-set! . e510a) (hashtable-ref . e5109) (hashtable-mutable? . e5108) (hashtable-keys . e5107) (hashtable-entries . e5106) (hashtable-delete! . e5105) (hashtable-copy . e5104) (hashtable-contains? . e5103) (hashtable-clear! . e5102) (call-with-output-file . e5101) (call-with-input-file . e5100) (write-char . e50ff) (write . e50fe) (with-output-to-file . e50fd) (with-input-from-file . e50fc) (read-char . e50fb) (read . e50fa) (peek-char . e50f9) (open-output-file . e50f8) (open-input-file . e50f7) (newline . e50f6) (display . e50f5) (close-output-port . e50f4) (close-input-port . e50f3) (eof-object? . e50f2) (eof-object . e50f1) (current-error-port . e50f0) (current-output-port . e50ef) (current-input-port . e50ee) (output-port? . e50ed) (input-port? . e50ec) (utf-8-codec . e50eb) (utf-16-codec . e50ea) (transcoder-error-handling-mode . e50e9) (transcoder-eol-style . e50e8) (transcoder-codec . e50e7) (transcoded-port . e50e6) (textual-port? . e50e5) (string->bytevector . e50e4) (standard-output-port . e50e3) (standard-input-port . e50e2) (standard-error-port . e50e1) (set-port-position! . e50e0) (put-u8 . e50df) (put-string . e50de) (put-datum . e50dd) (put-char . e50dc) (put-bytevector . e50db) (port? . e50da) (port-transcoder . e50d9) (port-position . e50d8) (port-has-set-port-position!? . e50d7) (port-has-port-position? . e50d6) (port-eof? . e50d5) (output-port-buffer-mode . e50d4) (open-string-output-port . e50d3) (open-string-input-port . e50d2) (open-file-output-port . e50d1) (open-file-input/output-port . e50d0) (open-file-input-port . e50cf) (open-bytevector-output-port . e50ce) (open-bytevector-input-port . e50cd) (native-transcoder . e50cc) (native-eol-style . e50cb) (make-transcoder . e50ca) (latin-1-codec . e50c9) (make-i/o-write-error . e4b9a) (make-i/o-read-error . e4b85) (make-i/o-port-error . e4c3b) (make-i/o-invalid-position-error . e4bb1) (make-i/o-filename-error . e4bcc) (make-i/o-file-protection-error . e4be5) (make-i/o-file-is-read-only-error . e4bfa) (make-i/o-file-does-not-exist-error . e4c24) (make-i/o-file-already-exists-error . e4c0f) (make-i/o-error . e4b70) (make-i/o-encoding-error . e4c6b) (make-i/o-decoding-error . e4c54) (make-custom-textual-output-port . e50c8) (make-custom-textual-input/output-port . e50c7) (make-custom-textual-input-port . e50c6) (make-custom-binary-output-port . e50c5) (make-custom-binary-input/output-port . e50c4) (make-custom-binary-input-port . e50c3) (make-bytevector . e50c2) (lookahead-u8 . e50c1) (lookahead-char . e50c0) (i/o-write-error? . e4b9c) (i/o-read-error? . e4b87) (i/o-port-error? . e4c3f) (i/o-invalid-position-error? . e4bb5) (i/o-filename-error? . e4bd0) (i/o-file-protection-error? . e4be7) (i/o-file-is-read-only-error? . e4bfc) (i/o-file-does-not-exist-error? . e4c26) (i/o-file-already-exists-error? . e4c11) (i/o-error? . e4b72) (i/o-error-position . e4bb7) (i/o-error-port . e4c41) (i/o-error-filename . e4bd2) (i/o-encoding-error? . e4c6f) (i/o-encoding-error-char . e4c71) (i/o-decoding-error? . e4c56) (get-u8 . e50bf) (get-string-n! . e50be) (get-string-n . e50bd) (get-string-all . e50bc) (get-line . e50bb) (get-datum . e50ba) (get-char . e50b9) (get-bytevector-some . e50b8) (get-bytevector-n! . e50b7) (get-bytevector-n . e50b6) (get-bytevector-all . e50b5) (flush-output-port . e50b4) (close-port . e50b3) (scheme-report-environment . e2fba) (quotient . e50b2) (null-environment . e2fb8) (remainder . e50b1) (modulo . e50b0) (inexact->exact . e50af) (force . e50ae) (exact->inexact . e50ad) (make-promise . e50ac) (exit . e50ab) (command-line . e4da6) (string-fill! . e50aa) (string-set! . e50a9) (set-cdr! . e50a8) (set-car! . e50a7) (remove . e50a6) (remv . e50a5) (remp . e50a4) (remq . e50a3) (partition . e50a2) (memv . e50a1) (memq . e50a0) (memp . e509f) (member . e509e) (exists . e509d) (for-all . e509c) (fold-right . e509b) (fold-left . e509a) (find . e5099) (filter . e5098) (cons* . e5097) (assv . e5096) (assq . e5095) (assp . e5094) (assoc . e5093) (call-with-string-output-port . e5092) (call-with-port . e5091) (call-with-bytevector-output-port . e5090) (bytevector->string . e508f) (buffer-mode? . e508e) (binary-port? . e508d) (with-exception-handler . e508c) (raise-continuable . e508b) (raise . e508a) (eval . e2fbe) (environment . e2fb6) (make-enumeration . e5089) (enum-set=? . e5088) (enum-set-universe . e5087) (enum-set-union . e5086) (enum-set-subset? . e5085) (enum-set-projection . e5084) (enum-set-member? . e5083) (enum-set-intersection . e5082) (enum-set-indexer . e5081) (enum-set-difference . e5080) (enum-set-constructor . e507f) (enum-set-complement . e507e) (enum-set->list . e507d) (who-condition? . e4ae6) (warning? . e4a5e) (violation? . e4a9d) (undefined-violation? . e4b5d) (syntax-violation? . e4b44) (syntax-violation-subform . e4b48) (syntax-violation-form . e4b46) (syntax-violation . e2fde) (simple-conditions . e507c) (serious-condition? . e4a73) (non-continuable-violation? . e4afd) (message-condition? . e4a47) (make-who-condition . e4ae2) (make-warning . e4a5c) (make-violation . e4a9b) (make-undefined-violation . e4b5b) (make-syntax-violation . e4b3e) (make-serious-condition . e4a71) (make-non-continuable-violation . e4afb) (make-message-condition . e4a43) (make-lexical-violation . e4b25) (make-irritants-condition . e4ac7) (make-implementation-restriction-violation . e4b10) (make-error . e4a86) (make-assertion-violation . e4ab0) (lexical-violation? . e4b27) (irritants-condition? . e4acb) (implementation-restriction-violation? . e4b12) (error? . e4a88) (condition-who . e4ae8) (condition-predicate . e507b) (condition-message . e4a49) (condition-irritants . e4acd) (condition-accessor . e507a) (condition . e5079) (assertion-violation? . e4ab2) (condition? . e5078) (utf32->string . e5077) (utf16->string . e5076) (utf8->string . e5075) (uint-list->bytevector . e5074) (u8-list->bytevector . e5073) (string->utf8 . e5072) (string->utf32 . e5071) (string->utf16 . e5070) (sint-list->bytevector . e506f) (native-endianness . e506e) (bytevector? . e506d) (bytevector=? . e506c) (bytevector-uint-set! . e506b) (bytevector-uint-ref . e506a) (bytevector-u8-set! . e5069) (bytevector-u8-ref . e5068) (bytevector-u64-set! . e5067) (bytevector-u64-ref . e5066) (bytevector-u64-native-set! . e5065) (bytevector-u64-native-ref . e5064) (bytevector-u32-set! . e5063) (bytevector-u32-ref . e5062) (bytevector-u32-native-set! . e5061) (bytevector-u32-native-ref . e5060) (bytevector-u16-set! . e505f) (bytevector-u16-ref . e505e) (bytevector-u16-native-set! . e505d) (bytevector-u16-native-ref . e505c) (bytevector-sint-set! . e505b) (bytevector-sint-ref . e505a) (bytevector-s8-set! . e5059) (bytevector-s8-ref . e5058) (bytevector-s64-set! . e5057) (bytevector-s64-ref . e5056) (bytevector-s64-native-set! . e5055) (bytevector-s64-native-ref . e5054) (bytevector-s32-set! . e5053) (bytevector-s32-ref . e5052) (bytevector-s32-native-set! . e5051) (bytevector-s32-native-ref . e5050) (bytevector-s16-set! . e504f) (bytevector-s16-ref . e504e) (bytevector-s16-native-set! . e504d) (bytevector-s16-native-ref . e504c) (bytevector-length . e504b) (bytevector-ieee-single-ref . e504a) (bytevector-ieee-single-set! . e5049) (bytevector-ieee-single-native-set! . e5048) (bytevector-ieee-single-native-ref . e5047) (bytevector-ieee-double-set! . e5046) (bytevector-ieee-double-ref . e5045) (bytevector-ieee-double-native-set! . e5044) (bytevector-ieee-double-native-ref . e5043) (bytevector-fill! . e5042) (bytevector-copy! . e5041) (bytevector-copy . e5040) (bytevector->uint-list . e503f) (bytevector->u8-list . e503e) (bytevector->sint-list . e503d) (no-nans-violation? . e4c9b) (no-infinities-violation? . e4c86) (make-no-nans-violation . e4c99) (make-no-infinities-violation . e4c84) (real->flonum . e503c) (flzero? . e503b) (fltruncate . e503a) (fltan . e5039) (flsqrt . e5038) (flsin . e5037) (flround . e5036) (flpositive? . e5035) (flonum? . e5034) (flodd? . e5033) (flnumerator . e5032) (flnegative? . e5031) (flnan? . e5030) (flmod0 . e502f) (flmod . e502e) (flmin . e502d) (flmax . e502c) (fllog . e502b) (flinteger? . e502a) (flinfinite? . e5029) (flfloor . e5028) (flfinite? . e5027) (flexpt . e5026) (flexp . e5025) (fleven? . e5024) (fldiv0-and-mod0 . e5023) (fldiv0 . e5022) (fldiv-and-mod . e5021) (fldiv . e5020) (fldenominator . e501f) (flcos . e501e) (flceiling . e501d) (flatan . e501c) (flasin . e501b) (flacos . e501a) (flabs . e5019) (fl>? . e5018) (fl>=? . e5017) (fl=? . e5016) (fl<? . e5015) (fl<=? . e5014) (fl/ . e5013) (fl- . e5012) (fl+ . e5011) (fl* . e5010) (fixnum->flonum . e500f) (fxzero? . e500e) (fxxor . e500d) (fxrotate-bit-field . e500c) (fxreverse-bit-field . e500b) (fxpositive? . e500a) (fxodd? . e5009) (fxnot . e5008) (fxnegative? . e5007) (fxmod0 . e5006) (fxmod . e5005) (fxmin . e5004) (fxmax . e5003) (fxlength . e5002) (fxior . e5001) (fxif . e5000) (fxfirst-bit-set . e4fff) (fxeven? . e4ffe) (fxdiv0-and-mod0 . e4ffd) (fxdiv0 . e4ffc) (fxdiv-and-mod . e4ffb) (fxdiv . e4ffa) (fxcopy-bit-field . e4ff9) (fxcopy-bit . e4ff8) (fxbit-set? . e4ff7) (fxbit-field . e4ff6) (fxbit-count . e4ff5) (fxarithmetic-shift-right . e4ff4) (fxarithmetic-shift-left . e4ff3) (fxarithmetic-shift . e4ff2) (fxand . e4ff1) (fx>? . e4ff0) (fx>=? . e4fef) (fx=? . e4fee) (fx<? . e4fed) (fx<=? . e4fec) (fx-/carry . e4feb) (fx- . e4fea) (fx+/carry . e4fe9) (fx+ . e4fe8) (fx*/carry . e4fe7) (fx* . e4fe6) (greatest-fixnum . e4fe5) (least-fixnum . e4fe4) (fixnum-width . e4fe3) (fixnum? . e4fe2) (bitwise-rotate-bit-field . e4fe1) (bitwise-reverse-bit-field . e4fe0) (bitwise-length . e4fdf) (bitwise-if . e4fde) (bitwise-first-bit-set . e4fdd) (bitwise-copy-bit-field . e4fdc) (bitwise-copy-bit . e4fdb) (bitwise-bit-set? . e4fda) (bitwise-bit-field . e4fd9) (bitwise-bit-count . e4fd8) (bitwise-xor . e4fd7) (bitwise-ior . e4fd6) (bitwise-and . e4fd5) (bitwise-not . e4fd4) (bitwise-arithmetic-shift-right . e4fd3) (bitwise-arithmetic-shift-left . e4fd2) (bitwise-arithmetic-shift . e4fd1) (zero? . e4fd0) (vector? . e4fcf) (vector-set! . e4fce) (vector-ref . e4fcd) (vector-map . e4fcc) (vector-length . e4fcb) (vector-for-each . e4fca) (vector-fill! . e4fc9) (vector->list . e4fc8) (vector . e4fc7) (values . e4fc6) (truncate . e4fc5) (tan . e4fc4) (symbol? . e4fc3) (symbol=? . e4fc2) (symbol->string . e4fc1) (substring . e4fc0) (string? . e4fbf) (string>? . e4fbe) (string>=? . e4fbd) (string=? . e4fbc) (string<? . e4fbb) (string<=? . e4fba) (string-ref . e4fb9) (string-length . e4fb8) (string-for-each . e4fb7) (string-copy . e4fb6) (string-append . e4fb5) (string->symbol . e4fb4) (string->number . e4fb3) (string->list . e4fb2) (string . e4fb1) (sqrt . e4fb0) (sin . e4faf) (round . e4fae) (reverse . e4fad) (real? . e4fac) (real-valued? . e4fab) (real-part . e4faa) (rationalize . e4fa9) (rational? . e4fa8) (rational-valued? . e4fa7) (procedure? . e4fa6) (positive? . e4fa5) (pair? . e4fa4) (odd? . e4fa3) (numerator . e4fa2) (number? . e4fa1) (number->string . e4fa0) (null? . e4f9f) (not . e4f9e) (negative? . e4f9d) (nan? . e4f9c) (min . e4f9b) (max . e4f9a) (map . e4f99) (make-vector . e4f98) (make-string . e4f97) (make-rectangular . e4f96) (make-polar . e4f95) (magnitude . e4f94) (log . e4f93) (list? . e4f92) (list-tail . e4f91) (list-ref . e4f90) (list->vector . e4f8f) (list->string . e4f8e) (list . e4f8d) (length . e4f8c) (lcm . e4f8b) (integer? . e4f8a) (integer-valued? . e4f89) (integer->char . e4f88) (infinite? . e4f87) (inexact? . e4f86) (inexact . e4f85) (imag-part . e4f84) (gcd . e4f83) (for-each . e4f82) (floor . e4f81) (finite? . e4f80) (expt . e4f7f) (exp . e4f7e) (exact? . e4f7d) (exact-integer-sqrt . e4f7c) (exact . e4f7b) (even? . e4f7a) (error . e4f79) (eqv? . e4f78) (equal? . e4f77) (eq? . e4f76) (dynamic-wind . e4f75) (div0-and-mod0 . e4f74) (mod0 . e4f73) (div0 . e4f72) (div-and-mod . e4f71) (mod . e4f70) (div . e4f6f) (denominator . e4f6e) (cos . e4f6d) (cons . e4f6c) (complex? . e4f6b) (char? . e4f6a) (char>? . e4f69) (char>=? . e4f68) (char=? . e4f67) (char<? . e4f66) (char<=? . e4f65) (char->integer . e4f64) (ceiling . e4f63) (call-with-values . e4f62) (call/cc . e4f61) (call-with-current-continuation . e4f60) (cddddr . e4f5f) (cdddar . e4f5e) (cddadr . e4f5d) (cddaar . e4f5c) (cdaddr . e4f5b) (cdadar . e4f5a) (cdaadr . e4f59) (cdaaar . e4f58) (cadddr . e4f57) (caddar . e4f56) (cadadr . e4f55) (cadaar . e4f54) (caaddr . e4f53) (caadar . e4f52) (caaadr . e4f51) (caaaar . e4f50) (cdddr . e4f4f) (cddar . e4f4e) (cdadr . e4f4d) (cdaar . e4f4c) (caddr . e4f4b) (cadar . e4f4a) (caadr . e4f49) (caaar . e4f48) (cddr . e4f47) (cdar . e4f46) (cadr . e4f45) (caar . e4f44) (cdr . e4f43) (car . e4f42) (boolean? . e4f41) (boolean=? . e4f40) (atan . e4f3f) (assertion-violation . e4f3e) (assertion-error . e2fd8) (asin . e4f3d) (apply . e4f3c) (append . e4f3b) (angle . e4f3a) (acos . e4f39) (abs . e4f38) (/ . e4f37) (* . e4f36) (- . e4f35) (+ . e4f34) (>= . e4f33) (> . e4f32) (= . e4f31) (<= . e4f30) (< . e4f2f) (library . e4f2e) (&no-nans . e4f2d) (&no-infinities . e4f2c) (&i/o-encoding . e4f2b) (&i/o-decoding . e4f2a) (&i/o-port . e4f29) (&i/o-file-does-not-exist . e4f28) (&i/o-file-already-exists . e4f27) (&i/o-file-is-read-only . e4f26) (&i/o-file-protection . e4f25) (&i/o-filename . e4f24) (&i/o-invalid-position . e4f23) (&i/o-write . e4f22) (&i/o-read . e4f21) (&i/o . e4f20) (&undefined . e4f1f) (&syntax . e4f1e) (&lexical . e4f1d) (&implementation-restriction . e4f1c) (&non-continuable . e4f1b) (&who . e4f1a) (&irritants . e4f19) (&assertion . e4f18) (&violation . e4f17) (&error . e4f16) (&serious . e4f15) (&warning . e4f14) (&message . e4f13) (&condition . e4f12) (define-condition-type . e4f11) (define-enumeration . e4f10) (define-record-type . e4f0f) (parent-rtd . e4f0e) (nongenerative . e4f0d) (opaque . e4f0c) (sealed . e4f0b) (protocol . e4f0a) (parent . e4f09) (immutable . e4f08) (mutable . e4f07) (fields . e4f06) (error-handling-mode . e4f05) (file-options . e4f04) (buffer-mode . e4f03) (eol-style . e4f02) (guard . e4f01) (trace-define . e4f00) (trace-lambda . e4eff) (unsyntax-splicing . e4efe) (unsyntax . e4efd) (unquote-splicing . e4efc) (unquote . e4efb) (_ . e4efa) (else . e4ef9) (=> . e4ef8) (... . e4ef7) (assert . e4ef6) (endianness . e4ef5) (delay . e4ef4) (time . e4ef3) (do . e4ef2) (cond . e4ef1) (let* . e4ef0) (let . e4eef) (let*-values . e4eee) (let-values . e4eed) (identifier-syntax . e4eec) (with-syntax . e4eeb) (quasisyntax . e4eea) (quasiquote . e4ee9) (syntax-rules . e4ee8) (include . e4ee7) (define-struct . e4ee6) (record-constructor-descriptor . e4ee5) (record-type-descriptor . e4ee4) (case . e4ee3) (parameterize . e4ee2) (unless . e4ee1) (when . e4ee0) (or . e4edf) (and . e4ede) (if . e4edd) (letrec* . e4edc) (letrec . e4edb) (type-descriptor . e4eda) (case-lambda . e4ed9) (lambda . e4ed8) (syntax . e4ed7) (syntax-case . e4ed6) (quote . e4ed5) (foreign-call . e4ed4) (letrec-syntax . e4ed3) (let-syntax . e4ed2) (set! . e4ed1) (import . e4ed0) (begin . e4ecf) (module . e4ece) (define-syntax . e4ecd) (define . e4ecc)) '((e4c9f core-prim . &no-nans-rcd) (e4c9d core-prim . &no-nans-rtd) (e4c8a core-prim . &no-infinities-rcd) (e4c88 core-prim . &no-infinities-rtd) (e4c75 core-prim . &i/o-encoding-rcd) (e4c73 core-prim . &i/o-encoding-rtd) (e4c5a core-prim . &i/o-decoding-rcd) (e4c58 core-prim . &i/o-decoding-rtd) (e4c45 core-prim . &i/o-port-rcd) (e4c43 core-prim . &i/o-port-rtd) (e4c2a core-prim . &i/o-file-does-not-exist-rcd) (e4c28 core-prim . &i/o-file-does-not-exist-rtd) (e4c15 core-prim . &i/o-file-already-exists-rcd) (e4c13 core-prim . &i/o-file-already-exists-rtd) (e4c00 core-prim . &i/o-file-is-read-only-rcd) (e4bfe core-prim . &i/o-file-is-read-only-rtd) (e4beb core-prim . &i/o-file-protection-rcd) (e4be9 core-prim . &i/o-file-protection-rtd) (e4bd6 core-prim . &i/o-filename-rcd) (e4bd4 core-prim . &i/o-filename-rtd) (e4bbb core-prim . &i/o-invalid-position-rcd) (e4bb9 core-prim . &i/o-invalid-position-rtd) (e4ba0 core-prim . &i/o-write-rcd) (e4b9e core-prim . &i/o-write-rtd) (e4b8b core-prim . &i/o-read-rcd) (e4b89 core-prim . &i/o-read-rtd) (e4b76 core-prim . &i/o-rcd) (e4b74 core-prim . &i/o-rtd) (e4b61 core-prim . &undefined-rcd) (e4b5f core-prim . &undefined-rtd) (e4b4c core-prim . &syntax-rcd) (e4b4a core-prim . &syntax-rtd) (e4b2b core-prim . &lexical-rcd) (e4b29 core-prim . &lexical-rtd) (e4b16 core-prim . &implementation-restriction-rcd) (e4b14 core-prim . &implementation-restriction-rtd) (e4b01 core-prim . &non-continuable-rcd) (e4aff core-prim . &non-continuable-rtd) (e4aec core-prim . &who-rcd) (e4aea core-prim . &who-rtd) (e4ad1 core-prim . &irritants-rcd) (e4acf core-prim . &irritants-rtd) (e4ab6 core-prim . &assertion-rcd) (e4ab4 core-prim . &assertion-rtd) (e4aa1 core-prim . &violation-rcd) (e4a9f core-prim . &violation-rtd) (e4a8c core-prim . &error-rcd) (e4a8a core-prim . &error-rtd) (e4a77 core-prim . &serious-rcd) (e4a75 core-prim . &serious-rtd) (e4a62 core-prim . &warning-rcd) (e4a60 core-prim . &warning-rtd) (e4a4d core-prim . &message-rcd) (e4a4b core-prim . &message-rtd) (e49ee core-prim . &condition-rcd) (e49ec core-prim . &condition-rtd) (e2fda core-prim . syntax-error) (e2ef5 core-prim . syntax-dispatch) (e51e0 core-prim . pretty-print) (e51df core-prim . eval-core) (e51de core-prim . set-symbol-value!) (e51dd core-prim . symbol-value) (e51dc core-prim . gensym) (e51db core-prim . void) (e4dac core-prim . load) (e2fea core-prim . interaction-environment) (e51da core-prim . char-ready?) (e51d9 core-prim . regexp?) (e51d8 core-prim . read-line) (e51d7 core-prim . ungensym) (e51d6 core-prim . alist->eq-hash-table) (e51d5 core-prim . assoc-ref) (e51d4 core-prim . print) (e51d3 core-prim . format) (e51d2 core-prim . host-os) (e298b core-prim . library-path) (e51d1 core-prim . standard-library-path) (e51d0 core-prim . file-newer?) (e51cf core-prim . stat-mtime) (e51ce core-prim . write-to-file) (e51cd core-prim . file->list) (e51cc core-prim . file->string) (e51cb core-prim . digit->integer) (e51ca core-prim . call-with-string-input-port) (e51c9 core-prim . call-with-string-io) (e51c8 core-prim . string-split) (e51c7 core-prim . bytevector-for-each) (e51c6 core-prim . string->regexp) (e51c5 core-prim . rxmatch) (e51c4 core-prim . regexp-replace-all) (e51c3 core-prim . hashtable-for-each) (e51c2 core-prim . call-process) (e51c1 core-prim . local-tz-offset) (e51c0 core-prim . microseconds) (e51bf core-prim . directory-list) (e51be core-prim . set-current-directory!) (e51bd core-prim . expand-path) (e51bc core-prim . current-directory) (e51bb core-prim . %spawn) (e51ba core-prim . %waitpid) (e51b9 core-prim . pointer-ref-c-int64) (e51b8 core-prim . pointer-ref-c-int32) (e51b7 core-prim . pointer-ref-c-int16) (e51b6 core-prim . pointer-ref-c-int8) (e51b5 core-prim . pointer-ref-c-uint64) (e51b4 core-prim . pointer-ref-c-uint32) (e51b3 core-prim . pointer-ref-c-uint16) (e51b2 core-prim . pointer-ref-c-uint8) (e51b1 core-prim . pointer-set-c-int64!) (e51b0 core-prim . pointer-set-c-int32!) (e51af core-prim . pointer-set-c-int16!) (e51ae core-prim . pointer-set-c-int8!) (e51ad core-prim . pointer-set-c-pointer!) (e51ac core-prim . pointer-set-c-double!) (e51ab core-prim . pointer-set-c-float!) (e51aa core-prim . pointer-set-c-long-long!) (e51a9 core-prim . pointer-set-c-long!) (e51a8 core-prim . pointer-set-c-int!) (e51a7 core-prim . pointer-set-c-short!) (e51a6 core-prim . pointer-set-c-char!) (e51a5 core-prim . pointer-ref-c-pointer) (e51a4 core-prim . pointer-ref-c-double) (e51a3 core-prim . pointer-ref-c-float) (e51a2 core-prim . pointer-ref-c-unsigned-long-long) (e51a1 core-prim . pointer-ref-c-signed-long-long) (e51a0 core-prim . pointer-ref-c-unsigned-long) (e519f core-prim . pointer-ref-c-signed-long) (e519e core-prim . pointer-ref-c-unsigned-int) (e519d core-prim . pointer-ref-c-signed-int) (e519c core-prim . pointer-ref-c-unsigned-short) (e519b core-prim . pointer-ref-c-signed-short) (e519a core-prim . pointer-ref-c-unsigned-char) (e5199 core-prim . pointer-ref-c-signed-char) (e5198 core-prim . pointer->integer) (e5197 core-prim . integer->pointer) (e5196 core-prim . pointer?) (e5195 core-prim . shared-errno) (e5194 core-prim . %ffi-supported?) (e5193 core-prim . %ffi-pointer->string) (e5192 core-prim . %ffi-call->string-or-zero) (e5191 core-prim . %ffi-call->double) (e5190 core-prim . %ffi-call->void*) (e518f core-prim . %ffi-call->void) (e518e core-prim . %ffi-call->char) (e518d core-prim . %ffi-call->int) (e518c core-prim . %ffi-lookup) (e518b core-prim . %ffi-open) (e518a core-prim . %fork) (e5189 core-prim . %pipe) (e5188 core-prim . p) (e5187 core-prim . open-output-string) (e5186 core-prim . get-output-string) (e5185 core-prim . file-stat-ctime) (e5184 core-prim . file-stat-atime) (e5183 core-prim . file-stat-mtime) (e5182 core-prim . file-size-in-bytes) (e5181 core-prim . file-writable?) (e5180 core-prim . file-executable?) (e517f core-prim . file-readable?) (e517e core-prim . file-regular?) (e517d core-prim . file-symbolic-link?) (e517c core-prim . file-directory?) (e517b core-prim . create-symbolic-link) (e517a core-prim . rename-file) (e5179 core-prim . delete-directory) (e5178 core-prim . create-directory) (e5177 core-prim . get-environment-variables) (e5176 core-prim . get-environment-variable) (e5175 core-prim . get-timeofday) (e5174 core-prim . get-command-line) (e5173 core-prim . sys-display) (e5172 core-prim . whereis) (e5171 core-prim . register) (e5170 core-prim . vm-join!) (e516f core-prim . vm-set-value!) (e516e core-prim . vm?) (e516d core-prim . main-vm?) (e516c core-prim . vm-eval) (e516b core-prim . vm-self) (e516a core-prim . vm-start!) (e5169 core-prim . make-vm) (e5168 core-prim . mutex-try-lock!) (e5167 core-prim . mutex-unlock!) (e5166 core-prim . mutex-lock!) (e5165 core-prim . mutex?) (e5164 core-prim . make-mutex) (e5163 core-prim . condition-variable-notify-all!) (e5162 core-prim . condition-variable-notify!) (e5161 core-prim . condition-variable-wait!) (e5160 core-prim . make-condition-variable) (e515f core-prim . mosh-executable-path) (e515e core-prim . make-file-options) (e515d core-prim . source-info) (e515c core-prim . make-compiler-instruction) (e515b core-prim . make-instruction) (e515a core-prim . set-source-info!) (e5159 core-prim . bignum?) (e5158 core-prim . fast-equal?) (e5157 core-prim . fasl-read) (e5156 core-prim . fasl-write) (e5155 core-prim . time-usage) (e5154 core-prim . os-constant) (e27be core-prim . make-parameter) (e5153 core-prim . socket-port) (e5152 core-prim . socket-shutdown) (e5151 core-prim . socket-close) (e5150 core-prim . socket-send) (e514f core-prim . socket-recv!) (e514e core-prim . socket-recv) (e514d core-prim . make-server-socket) (e514c core-prim . make-client-socket) (e514b core-prim . socket-accept) (e514a core-prim . socket?) (e5149 core-prim . string-upcase) (e5148 core-prim . string-titlecase) (e5147 core-prim . string-normalize-nfkd) (e5146 core-prim . string-normalize-nfkc) (e5145 core-prim . string-normalize-nfd) (e5144 core-prim . string-normalize-nfc) (e5143 core-prim . string-foldcase) (e5142 core-prim . string-downcase) (e5141 core-prim . string-ci>?) (e5140 core-prim . string-ci>=?) (e513f core-prim . string-ci=?) (e513e core-prim . string-ci<?) (e513d core-prim . string-ci<=?) (e513c core-prim . char-whitespace?) (e513b core-prim . char-upper-case?) (e513a core-prim . char-title-case?) (e5139 core-prim . char-numeric?) (e5138 core-prim . char-lower-case?) (e5137 core-prim . char-general-category) (e5136 core-prim . char-upcase) (e5135 core-prim . char-titlecase) (e5134 core-prim . char-foldcase) (e5133 core-prim . char-downcase) (e5132 core-prim . char-ci>?) (e5131 core-prim . char-ci>=?) (e5130 core-prim . char-ci=?) (e512f core-prim . char-ci<?) (e512e core-prim . char-ci<=?) (e512d core-prim . char-alphabetic?) (e2d22 core-prim . make-variable-transformer) (e2fe0 core-prim . identifier?) (e2fcc core-prim . generate-temporaries) (e2fce core-prim . free-identifier=?) (e2fe4 core-prim . syntax->datum) (e2fe2 core-prim . datum->syntax) (e2fd0 core-prim . bound-identifier=?) (e512c core-prim . record-type-descriptor?) (e512b core-prim . record-predicate) (e512a core-prim . record-mutator) (e5129 core-prim . record-constructor) (e5128 core-prim . record-accessor) (e5127 core-prim . make-record-type-descriptor) (e5126 core-prim . make-record-constructor-descriptor) (e5125 core-prim . record?) (e5124 core-prim . record-type-uid) (e5123 core-prim . record-type-sealed?) (e5122 core-prim . record-type-parent) (e5121 core-prim . record-type-opaque?) (e5120 core-prim . record-type-name) (e511f core-prim . record-type-generative?) (e511e core-prim . record-type-field-names) (e511d core-prim . record-rtd) (e511c core-prim . record-field-mutable?) (e511b core-prim . delete-file) (e511a core-prim . file-exists?) (e5119 core-prim . vector-sort!) (e5118 core-prim . vector-sort) (e5117 core-prim . list-sort) (e5116 core-prim . symbol-hash) (e5115 core-prim . string-ci-hash) (e5114 core-prim . string-hash) (e5113 core-prim . equal-hash) (e5112 core-prim . hashtable-equivalence-function) (e5111 core-prim . make-hashtable) (e5110 core-prim . hashtable-hash-function) (e510f core-prim . make-eqv-hashtable) (e510e core-prim . make-eq-hashtable) (e510d core-prim . hashtable?) (e510c core-prim . hashtable-update!) (e510b core-prim . hashtable-size) (e510a core-prim . hashtable-set!) (e5109 core-prim . hashtable-ref) (e5108 core-prim . hashtable-mutable?) (e5107 core-prim . hashtable-keys) (e5106 core-prim . hashtable-entries) (e5105 core-prim . hashtable-delete!) (e5104 core-prim . hashtable-copy) (e5103 core-prim . hashtable-contains?) (e5102 core-prim . hashtable-clear!) (e5101 core-prim . call-with-output-file) (e5100 core-prim . call-with-input-file) (e50ff core-prim . write-char) (e50fe core-prim . write) (e50fd core-prim . with-output-to-file) (e50fc core-prim . with-input-from-file) (e50fb core-prim . read-char) (e50fa core-prim . read) (e50f9 core-prim . peek-char) (e50f8 core-prim . open-output-file) (e50f7 core-prim . open-input-file) (e50f6 core-prim . newline) (e50f5 core-prim . display) (e50f4 core-prim . close-output-port) (e50f3 core-prim . close-input-port) (e50f2 core-prim . eof-object?) (e50f1 core-prim . eof-object) (e50f0 core-prim . current-error-port) (e50ef core-prim . current-output-port) (e50ee core-prim . current-input-port) (e50ed core-prim . output-port?) (e50ec core-prim . input-port?) (e50eb core-prim . utf-8-codec) (e50ea core-prim . utf-16-codec) (e50e9 core-prim . transcoder-error-handling-mode) (e50e8 core-prim . transcoder-eol-style) (e50e7 core-prim . transcoder-codec) (e50e6 core-prim . transcoded-port) (e50e5 core-prim . textual-port?) (e50e4 core-prim . string->bytevector) (e50e3 core-prim . standard-output-port) (e50e2 core-prim . standard-input-port) (e50e1 core-prim . standard-error-port) (e50e0 core-prim . set-port-position!) (e50df core-prim . put-u8) (e50de core-prim . put-string) (e50dd core-prim . put-datum) (e50dc core-prim . put-char) (e50db core-prim . put-bytevector) (e50da core-prim . port?) (e50d9 core-prim . port-transcoder) (e50d8 core-prim . port-position) (e50d7 core-prim . port-has-set-port-position!?) (e50d6 core-prim . port-has-port-position?) (e50d5 core-prim . port-eof?) (e50d4 core-prim . output-port-buffer-mode) (e50d3 core-prim . open-string-output-port) (e50d2 core-prim . open-string-input-port) (e50d1 core-prim . open-file-output-port) (e50d0 core-prim . open-file-input/output-port) (e50cf core-prim . open-file-input-port) (e50ce core-prim . open-bytevector-output-port) (e50cd core-prim . open-bytevector-input-port) (e50cc core-prim . native-transcoder) (e50cb core-prim . native-eol-style) (e50ca core-prim . make-transcoder) (e50c9 core-prim . latin-1-codec) (e4b9a core-prim . make-i/o-write-error) (e4b85 core-prim . make-i/o-read-error) (e4c3b core-prim . make-i/o-port-error) (e4bb1 core-prim . make-i/o-invalid-position-error) (e4bcc core-prim . make-i/o-filename-error) (e4be5 core-prim . make-i/o-file-protection-error) (e4bfa core-prim . make-i/o-file-is-read-only-error) (e4c24 core-prim . make-i/o-file-does-not-exist-error) (e4c0f core-prim . make-i/o-file-already-exists-error) (e4b70 core-prim . make-i/o-error) (e4c6b core-prim . make-i/o-encoding-error) (e4c54 core-prim . make-i/o-decoding-error) (e50c8 core-prim . make-custom-textual-output-port) (e50c7 core-prim . make-custom-textual-input/output-port) (e50c6 core-prim . make-custom-textual-input-port) (e50c5 core-prim . make-custom-binary-output-port) (e50c4 core-prim . make-custom-binary-input/output-port) (e50c3 core-prim . make-custom-binary-input-port) (e50c2 core-prim . make-bytevector) (e50c1 core-prim . lookahead-u8) (e50c0 core-prim . lookahead-char) (e4b9c core-prim . i/o-write-error?) (e4b87 core-prim . i/o-read-error?) (e4c3f core-prim . i/o-port-error?) (e4bb5 core-prim . i/o-invalid-position-error?) (e4bd0 core-prim . i/o-filename-error?) (e4be7 core-prim . i/o-file-protection-error?) (e4bfc core-prim . i/o-file-is-read-only-error?) (e4c26 core-prim . i/o-file-does-not-exist-error?) (e4c11 core-prim . i/o-file-already-exists-error?) (e4b72 core-prim . i/o-error?) (e4bb7 core-prim . i/o-error-position) (e4c41 core-prim . i/o-error-port) (e4bd2 core-prim . i/o-error-filename) (e4c6f core-prim . i/o-encoding-error?) (e4c71 core-prim . i/o-encoding-error-char) (e4c56 core-prim . i/o-decoding-error?) (e50bf core-prim . get-u8) (e50be core-prim . get-string-n!) (e50bd core-prim . get-string-n) (e50bc core-prim . get-string-all) (e50bb core-prim . get-line) (e50ba core-prim . get-datum) (e50b9 core-prim . get-char) (e50b8 core-prim . get-bytevector-some) (e50b7 core-prim . get-bytevector-n!) (e50b6 core-prim . get-bytevector-n) (e50b5 core-prim . get-bytevector-all) (e50b4 core-prim . flush-output-port) (e50b3 core-prim . close-port) (e2fba core-prim . scheme-report-environment) (e50b2 core-prim . quotient) (e2fb8 core-prim . null-environment) (e50b1 core-prim . remainder) (e50b0 core-prim . modulo) (e50af core-prim . inexact->exact) (e50ae core-prim . force) (e50ad core-prim . exact->inexact) (e50ac core-prim . make-promise) (e50ab core-prim . exit) (e4da6 core-prim . command-line) (e50aa core-prim . string-fill!) (e50a9 core-prim . string-set!) (e50a8 core-prim . set-cdr!) (e50a7 core-prim . set-car!) (e50a6 core-prim . remove) (e50a5 core-prim . remv) (e50a4 core-prim . remp) (e50a3 core-prim . remq) (e50a2 core-prim . partition) (e50a1 core-prim . memv) (e50a0 core-prim . memq) (e509f core-prim . memp) (e509e core-prim . member) (e509d core-prim . exists) (e509c core-prim . for-all) (e509b core-prim . fold-right) (e509a core-prim . fold-left) (e5099 core-prim . find) (e5098 core-prim . filter) (e5097 core-prim . cons*) (e5096 core-prim . assv) (e5095 core-prim . assq) (e5094 core-prim . assp) (e5093 core-prim . assoc) (e5092 core-prim . call-with-string-output-port) (e5091 core-prim . call-with-port) (e5090 core-prim . call-with-bytevector-output-port) (e508f core-prim . bytevector->string) (e508e core-prim . buffer-mode?) (e508d core-prim . binary-port?) (e508c core-prim . with-exception-handler) (e508b core-prim . raise-continuable) (e508a core-prim . raise) (e2fbe core-prim . eval) (e2fb6 core-prim . environment) (e5089 core-prim . make-enumeration) (e5088 core-prim . enum-set=?) (e5087 core-prim . enum-set-universe) (e5086 core-prim . enum-set-union) (e5085 core-prim . enum-set-subset?) (e5084 core-prim . enum-set-projection) (e5083 core-prim . enum-set-member?) (e5082 core-prim . enum-set-intersection) (e5081 core-prim . enum-set-indexer) (e5080 core-prim . enum-set-difference) (e507f core-prim . enum-set-constructor) (e507e core-prim . enum-set-complement) (e507d core-prim . enum-set->list) (e4ae6 core-prim . who-condition?) (e4a5e core-prim . warning?) (e4a9d core-prim . violation?) (e4b5d core-prim . undefined-violation?) (e4b44 core-prim . syntax-violation?) (e4b48 core-prim . syntax-violation-subform) (e4b46 core-prim . syntax-violation-form) (e2fde core-prim . syntax-violation) (e507c core-prim . simple-conditions) (e4a73 core-prim . serious-condition?) (e4afd core-prim . non-continuable-violation?) (e4a47 core-prim . message-condition?) (e4ae2 core-prim . make-who-condition) (e4a5c core-prim . make-warning) (e4a9b core-prim . make-violation) (e4b5b core-prim . make-undefined-violation) (e4b3e core-prim . make-syntax-violation) (e4a71 core-prim . make-serious-condition) (e4afb core-prim . make-non-continuable-violation) (e4a43 core-prim . make-message-condition) (e4b25 core-prim . make-lexical-violation) (e4ac7 core-prim . make-irritants-condition) (e4b10 core-prim . make-implementation-restriction-violation) (e4a86 core-prim . make-error) (e4ab0 core-prim . make-assertion-violation) (e4b27 core-prim . lexical-violation?) (e4acb core-prim . irritants-condition?) (e4b12 core-prim . implementation-restriction-violation?) (e4a88 core-prim . error?) (e4ae8 core-prim . condition-who) (e507b core-prim . condition-predicate) (e4a49 core-prim . condition-message) (e4acd core-prim . condition-irritants) (e507a core-prim . condition-accessor) (e5079 core-prim . condition) (e4ab2 core-prim . assertion-violation?) (e5078 core-prim . condition?) (e5077 core-prim . utf32->string) (e5076 core-prim . utf16->string) (e5075 core-prim . utf8->string) (e5074 core-prim . uint-list->bytevector) (e5073 core-prim . u8-list->bytevector) (e5072 core-prim . string->utf8) (e5071 core-prim . string->utf32) (e5070 core-prim . string->utf16) (e506f core-prim . sint-list->bytevector) (e506e core-prim . native-endianness) (e506d core-prim . bytevector?) (e506c core-prim . bytevector=?) (e506b core-prim . bytevector-uint-set!) (e506a core-prim . bytevector-uint-ref) (e5069 core-prim . bytevector-u8-set!) (e5068 core-prim . bytevector-u8-ref) (e5067 core-prim . bytevector-u64-set!) (e5066 core-prim . bytevector-u64-ref) (e5065 core-prim . bytevector-u64-native-set!) (e5064 core-prim . bytevector-u64-native-ref) (e5063 core-prim . bytevector-u32-set!) (e5062 core-prim . bytevector-u32-ref) (e5061 core-prim . bytevector-u32-native-set!) (e5060 core-prim . bytevector-u32-native-ref) (e505f core-prim . bytevector-u16-set!) (e505e core-prim . bytevector-u16-ref) (e505d core-prim . bytevector-u16-native-set!) (e505c core-prim . bytevector-u16-native-ref) (e505b core-prim . bytevector-sint-set!) (e505a core-prim . bytevector-sint-ref) (e5059 core-prim . bytevector-s8-set!) (e5058 core-prim . bytevector-s8-ref) (e5057 core-prim . bytevector-s64-set!) (e5056 core-prim . bytevector-s64-ref) (e5055 core-prim . bytevector-s64-native-set!) (e5054 core-prim . bytevector-s64-native-ref) (e5053 core-prim . bytevector-s32-set!) (e5052 core-prim . bytevector-s32-ref) (e5051 core-prim . bytevector-s32-native-set!) (e5050 core-prim . bytevector-s32-native-ref) (e504f core-prim . bytevector-s16-set!) (e504e core-prim . bytevector-s16-ref) (e504d core-prim . bytevector-s16-native-set!) (e504c core-prim . bytevector-s16-native-ref) (e504b core-prim . bytevector-length) (e504a core-prim . bytevector-ieee-single-ref) (e5049 core-prim . bytevector-ieee-single-set!) (e5048 core-prim . bytevector-ieee-single-native-set!) (e5047 core-prim . bytevector-ieee-single-native-ref) (e5046 core-prim . bytevector-ieee-double-set!) (e5045 core-prim . bytevector-ieee-double-ref) (e5044 core-prim . bytevector-ieee-double-native-set!) (e5043 core-prim . bytevector-ieee-double-native-ref) (e5042 core-prim . bytevector-fill!) (e5041 core-prim . bytevector-copy!) (e5040 core-prim . bytevector-copy) (e503f core-prim . bytevector->uint-list) (e503e core-prim . bytevector->u8-list) (e503d core-prim . bytevector->sint-list) (e4c9b core-prim . no-nans-violation?) (e4c86 core-prim . no-infinities-violation?) (e4c99 core-prim . make-no-nans-violation) (e4c84 core-prim . make-no-infinities-violation) (e503c core-prim . real->flonum) (e503b core-prim . flzero?) (e503a core-prim . fltruncate) (e5039 core-prim . fltan) (e5038 core-prim . flsqrt) (e5037 core-prim . flsin) (e5036 core-prim . flround) (e5035 core-prim . flpositive?) (e5034 core-prim . flonum?) (e5033 core-prim . flodd?) (e5032 core-prim . flnumerator) (e5031 core-prim . flnegative?) (e5030 core-prim . flnan?) (e502f core-prim . flmod0) (e502e core-prim . flmod) (e502d core-prim . flmin) (e502c core-prim . flmax) (e502b core-prim . fllog) (e502a core-prim . flinteger?) (e5029 core-prim . flinfinite?) (e5028 core-prim . flfloor) (e5027 core-prim . flfinite?) (e5026 core-prim . flexpt) (e5025 core-prim . flexp) (e5024 core-prim . fleven?) (e5023 core-prim . fldiv0-and-mod0) (e5022 core-prim . fldiv0) (e5021 core-prim . fldiv-and-mod) (e5020 core-prim . fldiv) (e501f core-prim . fldenominator) (e501e core-prim . flcos) (e501d core-prim . flceiling) (e501c core-prim . flatan) (e501b core-prim . flasin) (e501a core-prim . flacos) (e5019 core-prim . flabs) (e5018 core-prim . fl>?) (e5017 core-prim . fl>=?) (e5016 core-prim . fl=?) (e5015 core-prim . fl<?) (e5014 core-prim . fl<=?) (e5013 core-prim . fl/) (e5012 core-prim . fl-) (e5011 core-prim . fl+) (e5010 core-prim . fl*) (e500f core-prim . fixnum->flonum) (e500e core-prim . fxzero?) (e500d core-prim . fxxor) (e500c core-prim . fxrotate-bit-field) (e500b core-prim . fxreverse-bit-field) (e500a core-prim . fxpositive?) (e5009 core-prim . fxodd?) (e5008 core-prim . fxnot) (e5007 core-prim . fxnegative?) (e5006 core-prim . fxmod0) (e5005 core-prim . fxmod) (e5004 core-prim . fxmin) (e5003 core-prim . fxmax) (e5002 core-prim . fxlength) (e5001 core-prim . fxior) (e5000 core-prim . fxif) (e4fff core-prim . fxfirst-bit-set) (e4ffe core-prim . fxeven?) (e4ffd core-prim . fxdiv0-and-mod0) (e4ffc core-prim . fxdiv0) (e4ffb core-prim . fxdiv-and-mod) (e4ffa core-prim . fxdiv) (e4ff9 core-prim . fxcopy-bit-field) (e4ff8 core-prim . fxcopy-bit) (e4ff7 core-prim . fxbit-set?) (e4ff6 core-prim . fxbit-field) (e4ff5 core-prim . fxbit-count) (e4ff4 core-prim . fxarithmetic-shift-right) (e4ff3 core-prim . fxarithmetic-shift-left) (e4ff2 core-prim . fxarithmetic-shift) (e4ff1 core-prim . fxand) (e4ff0 core-prim . fx>?) (e4fef core-prim . fx>=?) (e4fee core-prim . fx=?) (e4fed core-prim . fx<?) (e4fec core-prim . fx<=?) (e4feb core-prim . fx-/carry) (e4fea core-prim . fx-) (e4fe9 core-prim . fx+/carry) (e4fe8 core-prim . fx+) (e4fe7 core-prim . fx*/carry) (e4fe6 core-prim . fx*) (e4fe5 core-prim . greatest-fixnum) (e4fe4 core-prim . least-fixnum) (e4fe3 core-prim . fixnum-width) (e4fe2 core-prim . fixnum?) (e4fe1 core-prim . bitwise-rotate-bit-field) (e4fe0 core-prim . bitwise-reverse-bit-field) (e4fdf core-prim . bitwise-length) (e4fde core-prim . bitwise-if) (e4fdd core-prim . bitwise-first-bit-set) (e4fdc core-prim . bitwise-copy-bit-field) (e4fdb core-prim . bitwise-copy-bit) (e4fda core-prim . bitwise-bit-set?) (e4fd9 core-prim . bitwise-bit-field) (e4fd8 core-prim . bitwise-bit-count) (e4fd7 core-prim . bitwise-xor) (e4fd6 core-prim . bitwise-ior) (e4fd5 core-prim . bitwise-and) (e4fd4 core-prim . bitwise-not) (e4fd3 core-prim . bitwise-arithmetic-shift-right) (e4fd2 core-prim . bitwise-arithmetic-shift-left) (e4fd1 core-prim . bitwise-arithmetic-shift) (e4fd0 core-prim . zero?) (e4fcf core-prim . vector?) (e4fce core-prim . vector-set!) (e4fcd core-prim . vector-ref) (e4fcc core-prim . vector-map) (e4fcb core-prim . vector-length) (e4fca core-prim . vector-for-each) (e4fc9 core-prim . vector-fill!) (e4fc8 core-prim . vector->list) (e4fc7 core-prim . vector) (e4fc6 core-prim . values) (e4fc5 core-prim . truncate) (e4fc4 core-prim . tan) (e4fc3 core-prim . symbol?) (e4fc2 core-prim . symbol=?) (e4fc1 core-prim . symbol->string) (e4fc0 core-prim . substring) (e4fbf core-prim . string?) (e4fbe core-prim . string>?) (e4fbd core-prim . string>=?) (e4fbc core-prim . string=?) (e4fbb core-prim . string<?) (e4fba core-prim . string<=?) (e4fb9 core-prim . string-ref) (e4fb8 core-prim . string-length) (e4fb7 core-prim . string-for-each) (e4fb6 core-prim . string-copy) (e4fb5 core-prim . string-append) (e4fb4 core-prim . string->symbol) (e4fb3 core-prim . string->number) (e4fb2 core-prim . string->list) (e4fb1 core-prim . string) (e4fb0 core-prim . sqrt) (e4faf core-prim . sin) (e4fae core-prim . round) (e4fad core-prim . reverse) (e4fac core-prim . real?) (e4fab core-prim . real-valued?) (e4faa core-prim . real-part) (e4fa9 core-prim . rationalize) (e4fa8 core-prim . rational?) (e4fa7 core-prim . rational-valued?) (e4fa6 core-prim . procedure?) (e4fa5 core-prim . positive?) (e4fa4 core-prim . pair?) (e4fa3 core-prim . odd?) (e4fa2 core-prim . numerator) (e4fa1 core-prim . number?) (e4fa0 core-prim . number->string) (e4f9f core-prim . null?) (e4f9e core-prim . not) (e4f9d core-prim . negative?) (e4f9c core-prim . nan?) (e4f9b core-prim . min) (e4f9a core-prim . max) (e4f99 core-prim . map) (e4f98 core-prim . make-vector) (e4f97 core-prim . make-string) (e4f96 core-prim . make-rectangular) (e4f95 core-prim . make-polar) (e4f94 core-prim . magnitude) (e4f93 core-prim . log) (e4f92 core-prim . list?) (e4f91 core-prim . list-tail) (e4f90 core-prim . list-ref) (e4f8f core-prim . list->vector) (e4f8e core-prim . list->string) (e4f8d core-prim . list) (e4f8c core-prim . length) (e4f8b core-prim . lcm) (e4f8a core-prim . integer?) (e4f89 core-prim . integer-valued?) (e4f88 core-prim . integer->char) (e4f87 core-prim . infinite?) (e4f86 core-prim . inexact?) (e4f85 core-prim . inexact) (e4f84 core-prim . imag-part) (e4f83 core-prim . gcd) (e4f82 core-prim . for-each) (e4f81 core-prim . floor) (e4f80 core-prim . finite?) (e4f7f core-prim . expt) (e4f7e core-prim . exp) (e4f7d core-prim . exact?) (e4f7c core-prim . exact-integer-sqrt) (e4f7b core-prim . exact) (e4f7a core-prim . even?) (e4f79 core-prim . error) (e4f78 core-prim . eqv?) (e4f77 core-prim . equal?) (e4f76 core-prim . eq?) (e4f75 core-prim . dynamic-wind) (e4f74 core-prim . div0-and-mod0) (e4f73 core-prim . mod0) (e4f72 core-prim . div0) (e4f71 core-prim . div-and-mod) (e4f70 core-prim . mod) (e4f6f core-prim . div) (e4f6e core-prim . denominator) (e4f6d core-prim . cos) (e4f6c core-prim . cons) (e4f6b core-prim . complex?) (e4f6a core-prim . char?) (e4f69 core-prim . char>?) (e4f68 core-prim . char>=?) (e4f67 core-prim . char=?) (e4f66 core-prim . char<?) (e4f65 core-prim . char<=?) (e4f64 core-prim . char->integer) (e4f63 core-prim . ceiling) (e4f62 core-prim . call-with-values) (e4f61 core-prim . call/cc) (e4f60 core-prim . call-with-current-continuation) (e4f5f core-prim . cddddr) (e4f5e core-prim . cdddar) (e4f5d core-prim . cddadr) (e4f5c core-prim . cddaar) (e4f5b core-prim . cdaddr) (e4f5a core-prim . cdadar) (e4f59 core-prim . cdaadr) (e4f58 core-prim . cdaaar) (e4f57 core-prim . cadddr) (e4f56 core-prim . caddar) (e4f55 core-prim . cadadr) (e4f54 core-prim . cadaar) (e4f53 core-prim . caaddr) (e4f52 core-prim . caadar) (e4f51 core-prim . caaadr) (e4f50 core-prim . caaaar) (e4f4f core-prim . cdddr) (e4f4e core-prim . cddar) (e4f4d core-prim . cdadr) (e4f4c core-prim . cdaar) (e4f4b core-prim . caddr) (e4f4a core-prim . cadar) (e4f49 core-prim . caadr) (e4f48 core-prim . caaar) (e4f47 core-prim . cddr) (e4f46 core-prim . cdar) (e4f45 core-prim . cadr) (e4f44 core-prim . caar) (e4f43 core-prim . cdr) (e4f42 core-prim . car) (e4f41 core-prim . boolean?) (e4f40 core-prim . boolean=?) (e4f3f core-prim . atan) (e4f3e core-prim . assertion-violation) (e2fd8 core-prim . assertion-error) (e4f3d core-prim . asin) (e4f3c core-prim . apply) (e4f3b core-prim . append) (e4f3a core-prim . angle) (e4f39 core-prim . acos) (e4f38 core-prim . abs) (e4f37 core-prim . /) (e4f36 core-prim . *) (e4f35 core-prim . -) (e4f34 core-prim . +) (e4f33 core-prim . >=) (e4f32 core-prim . >) (e4f31 core-prim . =) (e4f30 core-prim . <=) (e4f2f core-prim . <) (e4f2e core-prim . library) (e4f2d $core-rtd &no-nans-rtd &no-nans-rcd) (e4f2c $core-rtd &no-infinities-rtd &no-infinities-rcd) (e4f2b $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (e4f2a $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (e4f29 $core-rtd &i/o-port-rtd &i/o-port-rcd) (e4f28 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (e4f27 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (e4f26 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (e4f25 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (e4f24 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (e4f23 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (e4f22 $core-rtd &i/o-write-rtd &i/o-write-rcd) (e4f21 $core-rtd &i/o-read-rtd &i/o-read-rcd) (e4f20 $core-rtd &i/o-rtd &i/o-rcd) (e4f1f $core-rtd &undefined-rtd &undefined-rcd) (e4f1e $core-rtd &syntax-rtd &syntax-rcd) (e4f1d $core-rtd &lexical-rtd &lexical-rcd) (e4f1c $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (e4f1b $core-rtd &non-continuable-rtd &non-continuable-rcd) (e4f1a $core-rtd &who-rtd &who-rcd) (e4f19 $core-rtd &irritants-rtd &irritants-rcd) (e4f18 $core-rtd &assertion-rtd &assertion-rcd) (e4f17 $core-rtd &violation-rtd &violation-rcd) (e4f16 $core-rtd &error-rtd &error-rcd) (e4f15 $core-rtd &serious-rtd &serious-rcd) (e4f14 $core-rtd &warning-rtd &warning-rcd) (e4f13 $core-rtd &message-rtd &message-rcd) (e4f12 $core-rtd &condition-rtd &condition-rcd) (e4f11 macro . define-condition-type) (e4f10 macro . define-enumeration) (e4f0f macro . define-record-type) (e4f0e macro . parent-rtd) (e4f0d macro . nongenerative) (e4f0c macro . opaque) (e4f0b macro . sealed) (e4f0a macro . protocol) (e4f09 macro . parent) (e4f08 macro . immutable) (e4f07 macro . mutable) (e4f06 macro . fields) (e4f05 macro . error-handling-mode) (e4f04 macro . file-options) (e4f03 macro . buffer-mode) (e4f02 macro . eol-style) (e4f01 macro . guard) (e4f00 macro . trace-define) (e4eff macro . trace-lambda) (e4efe macro . unsyntax-splicing) (e4efd macro . unsyntax) (e4efc macro . unquote-splicing) (e4efb macro . unquote) (e4efa macro . _) (e4ef9 macro . else) (e4ef8 macro . =>) (e4ef7 macro . ...) (e4ef6 macro . assert) (e4ef5 macro . endianness) (e4ef4 macro . delay) (e4ef3 macro . time) (e4ef2 macro . do) (e4ef1 macro . cond) (e4ef0 macro . let*) (e4eef macro . let) (e4eee macro . let*-values) (e4eed macro . let-values) (e4eec macro . identifier-syntax) (e4eeb macro . with-syntax) (e4eea macro . quasisyntax) (e4ee9 macro . quasiquote) (e4ee8 macro . syntax-rules) (e4ee7 macro . include) (e4ee6 macro . define-struct) (e4ee5 core-macro . record-constructor-descriptor) (e4ee4 core-macro . record-type-descriptor) (e4ee3 macro . case) (e4ee2 macro . parameterize) (e4ee1 macro . unless) (e4ee0 macro . when) (e4edf core-macro . or) (e4ede core-macro . and) (e4edd core-macro . if) (e4edc core-macro . letrec*) (e4edb core-macro . letrec) (e4eda core-macro . type-descriptor) (e4ed9 core-macro . case-lambda) (e4ed8 core-macro . lambda) (e4ed7 core-macro . syntax) (e4ed6 core-macro . syntax-case) (e4ed5 core-macro . quote) (e4ed4 core-macro . foreign-call) (e4ed3 letrec-syntax) (e4ed2 let-syntax) (e4ed1 set!) (e4ed0 import) (e4ecf begin) (e4ece module) (e4ecd define-syntax) (e4ecc define)) values values '#f '#f '#f '#f) (e2b0d@e29ac@install-library 'e5201 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . e51e0) (eval-core . e51df) (set-symbol-value! . e51de) (symbol-value . e51dd) (gensym . e51dc) (void . e51db)) '() values values '#f '#f '#f '#f) (e2b0d@e29ac@install-library 'e5202 '(mosh) '() '() '() '() '((set-symbol-value! . e51de) (symbol-value . e51dd) (regexp? . e51d9) (read-line . e51d8) (ungensym . e51d7) (alist->eq-hash-table . e51d6) (assoc-ref . e51d5) (print . e51d4) (format . e51d3) (host-os . e51d2) (library-path . e298b) (standard-library-path . e51d1) (file-newer? . e51d0) (stat-mtime . e51cf) (digit->integer . e51cb) (call-with-string-input-port . e51ca) (call-with-string-io . e51c9) (string-split . e51c8) (bytevector-for-each . e51c7) (string->regexp . e51c6) (rxmatch . e51c5) (regexp-replace-all . e51c4) (hashtable-for-each . e51c3) (set-current-directory! . e51be) (expand-path . e51bd) (current-directory . e51bc) (p . e5188) (get-timeofday . e5175) (get-command-line . e5174) (sys-display . e5173) (whereis . e5172) (register . e5171) (vm-join! . e5170) (vm-set-value! . e516f) (vm? . e516e) (main-vm? . e516d) (vm-eval . e516c) (vm-self . e516b) (vm-start! . e516a) (make-vm . e5169) (mutex-try-lock! . e5168) (mutex-unlock! . e5167) (mutex-lock! . e5166) (mutex? . e5165) (make-mutex . e5164) (condition-variable-notify-all! . e5163) (condition-variable-notify! . e5162) (condition-variable-wait! . e5161) (make-condition-variable . e5160) (mosh-executable-path . e515f) (make-file-options . e515e) (source-info . e515d) (make-compiler-instruction . e515c) (make-instruction . e515b) (set-source-info! . e515a) (bignum? . e5159) (fast-equal? . e5158) (fasl-read . e5157) (fasl-write . e5156) (time-usage . e5155) (os-constant . e5154) (time . e4ef3) (include . e4ee7)) '() values values '#f '#f '#f '#f) (e2b0d@e29ac@install-library 'e5203 '(system) '() '() '() '() '((write-to-file . e51ce) (file->list . e51cd) (file->string . e51cc) (call-process . e51c2) (local-tz-offset . e51c1) (microseconds . e51c0) (directory-list . e51bf) (expand-path . e51bd) (%spawn . e51bb) (%waitpid . e51ba) (pointer-ref-c-int64 . e51b9) (pointer-ref-c-int32 . e51b8) (pointer-ref-c-int16 . e51b7) (pointer-ref-c-int8 . e51b6) (pointer-ref-c-uint64 . e51b5) (pointer-ref-c-uint32 . e51b4) (pointer-ref-c-uint16 . e51b3) (pointer-ref-c-uint8 . e51b2) (pointer-set-c-int64! . e51b1) (pointer-set-c-int32! . e51b0) (pointer-set-c-int16! . e51af) (pointer-set-c-int8! . e51ae) (pointer-set-c-pointer! . e51ad) (pointer-set-c-double! . e51ac) (pointer-set-c-float! . e51ab) (pointer-set-c-long-long! . e51aa) (pointer-set-c-long! . e51a9) (pointer-set-c-int! . e51a8) (pointer-set-c-short! . e51a7) (pointer-set-c-char! . e51a6) (pointer-ref-c-pointer . e51a5) (pointer-ref-c-double . e51a4) (pointer-ref-c-float . e51a3) (pointer-ref-c-unsigned-long-long . e51a2) (pointer-ref-c-signed-long-long . e51a1) (pointer-ref-c-unsigned-long . e51a0) (pointer-ref-c-signed-long . e519f) (pointer-ref-c-unsigned-int . e519e) (pointer-ref-c-signed-int . e519d) (pointer-ref-c-unsigned-short . e519c) (pointer-ref-c-signed-short . e519b) (pointer-ref-c-unsigned-char . e519a) (pointer-ref-c-signed-char . e5199) (pointer->integer . e5198) (integer->pointer . e5197) (pointer? . e5196) (shared-errno . e5195) (%ffi-supported? . e5194) (%ffi-pointer->string . e5193) (%ffi-call->string-or-zero . e5192) (%ffi-call->double . e5191) (%ffi-call->void* . e5190) (%ffi-call->void . e518f) (%ffi-call->char . e518e) (%ffi-call->int . e518d) (%ffi-lookup . e518c) (%ffi-open . e518b) (%fork . e518a) (%pipe . e5189) (open-output-string . e5187) (get-output-string . e5186) (file-stat-ctime . e5185) (file-stat-atime . e5184) (file-stat-mtime . e5183) (file-size-in-bytes . e5182) (file-writable? . e5181) (file-executable? . e5180) (file-readable? . e517f) (file-regular? . e517e) (file-symbolic-link? . e517d) (file-directory? . e517c) (create-symbolic-link . e517b) (rename-file . e517a) (delete-directory . e5179) (create-directory . e5178) (get-environment-variables . e5177) (get-environment-variable . e5176) (make-parameter . e27be) (socket-port . e5153) (socket-shutdown . e5152) (socket-close . e5151) (socket-send . e5150) (socket-recv! . e514f) (socket-recv . e514e) (make-server-socket . e514d) (make-client-socket . e514c) (socket-accept . e514b) (socket? . e514a) (parameterize . e4ee2)) '() values values '#f '#f '#f '#f))
((lambda (e4d95@add-library-path! e4d97@parse-and-add-library-path e4d99@for-each-with-index e4d9b@rpad e4d9d@condition-printer e4d9f@record->field-alist e4da1@map-with-index e4da3@repl e4da5@trace-printer e4da7@command-line e4da9@local-library-path e4dab@load/args e4dad@load e4daf@ironscheme-build e4db1@eval-top-level e4db3@compile-system-libraries e4db5@compile e4db7@compile->closure e4db9@pre-compile-r6rs-file e4dbb@load-r6rs-top-level e4dbd@load-r6rs-top-level-sexp) (begin (set! e4d95@add-library-path! (lambda (e4de0@path) (e2afd@e298c@library-path (append (e2afd@e298c@library-path) (list e4de0@path))))) (set! e4d97@parse-and-add-library-path (lambda (e4de2@paths e4de3@message) ((lambda (e4de6@t) (if e4de6@t ((lambda (e4de8@paths) (for-each (lambda (e4dea@path) (if (file-exists? e4dea@path) (e4d95@add-library-path! (expand-path e4dea@path)) (format (current-error-port) e4de3@message e4dea@path))) (string-split e4de8@paths '#\:))) e4de6@t) (void))) e4de2@paths))) (set! e4d99@for-each-with-index (lambda (e4dec@proc e4ded@lst) (letrec ((e4df0@loop (lambda (e4df2@i e4df3@lst) (if (null? e4df3@lst) (if '#f '#f (void)) (begin (e4dec@proc e4df2@i (car e4df3@lst)) (e4df0@loop (+ e4df2@i '1) (cdr e4df3@lst))))))) (e4df0@loop '1 e4ded@lst)))) (set! e4d9b@rpad (lambda (e4df6@str e4df7@pad e4df8@n) ((lambda (e4dfc@rest) ((letrec ((e4dfe@loop (lambda (e4e00@rest e4e01@ret) (if (<= e4e00@rest '0) e4e01@ret (e4dfe@loop (- e4e00@rest '1) (string-append e4e01@ret e4df7@pad)))))) e4dfe@loop) e4dfc@rest (format '"~a" e4df6@str))) (- e4df8@n (string-length (format '"~a" e4df6@str)))))) (set! e4d9d@condition-printer (lambda (e4e04@e e4e05@port) ((lambda (e4e09@max-condition-len) (begin (set! e4e09@max-condition-len (apply max (map (lambda (e4e1a@c) (string-length (symbol->string (record-type-name (record-rtd e4e1a@c))))) (simple-conditions e4e04@e)))) (begin (display '" Condition components:\n" e4e05@port) (e4d99@for-each-with-index (lambda (e4e0a@i e4e0b@x) ((lambda (e4e0e@rtd e4e0f@fields-alist) (begin (format e4e05@port '" ~d. ~a" e4e0a@i (e4d9b@rpad (symbol->string (record-type-name e4e0e@rtd)) '" " e4e09@max-condition-len)) (if (null? e4e0f@fields-alist) (newline e4e05@port) (void)) ((letrec ((e4e12@loop (lambda (e4e14@first e4e15@fields-alist) (if (null? e4e15@fields-alist) '() ((lambda (e4e18@field) (begin (if (not e4e14@first) (display (e4d9b@rpad '"" '" " (+ '4 e4e09@max-condition-len)) e4e05@port) (void)) (display '"       " e4e05@port) (display (car e4e18@field) e4e05@port) (display '": " e4e05@port) (write (cdr e4e18@field) e4e05@port) (newline e4e05@port) (e4e12@loop '#f (cdr e4e15@fields-alist)))) (car e4e15@fields-alist)))))) e4e12@loop) '#t e4e0f@fields-alist))) (record-rtd e4e0b@x) (e4d9f@record->field-alist e4e0b@x))) (simple-conditions e4e04@e))))) '#f))) (set! e4d9f@record->field-alist (lambda (e4e1c@r) ((lambda (e4e1f@ref) (begin (set! e4e1f@ref (lambda (e4e2a@rtd e4e2b@i e4e2c@x) ((lambda (e4e30@val) (if (symbol? e4e30@val) (ungensym e4e30@val) e4e30@val)) ((record-accessor e4e2a@rtd e4e2b@i) e4e2c@x)))) ((letrec ((e4e20@loop (lambda (e4e22@ret e4e23@rtd) (if e4e23@rtd (e4e20@loop (append e4e22@ret (e4da1@map-with-index (lambda (e4e26@i e4e27@field) (cons e4e27@field (e4e1f@ref e4e23@rtd e4e26@i e4e1c@r))) (vector->list (record-type-field-names e4e23@rtd)))) (record-type-parent e4e23@rtd)) e4e22@ret)))) e4e20@loop) '() (record-rtd e4e1c@r)))) '#f))) (set! e4da1@map-with-index (lambda (e4e32@proc e4e33@lst) ((letrec ((e4e36@loop (lambda (e4e38@i e4e39@lst e4e3a@ret) (if (null? e4e39@lst) (reverse e4e3a@ret) (e4e36@loop (+ e4e38@i '1) (cdr e4e39@lst) (cons (e4e32@proc e4e38@i (car e4e39@lst)) e4e3a@ret)))))) e4e36@loop) '0 e4e33@lst '()))) (set! e4da3@repl (lambda e4e3e@x ((lambda (e4e41@rec) (begin (set! e4e41@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (e4e44@e4e42) (lambda () (with-exception-handler (lambda (e4e46@e) ((call/cc (lambda (e4e48@e4e43) (e4e44@e4e42 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? e4e46@e) (e4d9d@condition-printer e4e46@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" e4e46@e))) (e4e48@e4e43 (lambda () (raise-continuable e4e46@e)))))))))) (lambda () ((letrec ((e4e4a@loop (lambda (e4e4c@line e4e4d@accum) ((lambda (e4e51@parentheses-ok? e4e53@eval-string-print) (begin (set! e4e51@parentheses-ok? (lambda (e4e58@text) ((letrec ((e4e5a@loop (lambda (e4e5c@chars e4e5d@p0 e4e5e@p1) (if (null? e4e5c@chars) (= '0 e4e5d@p0 e4e5e@p1) ((lambda (e4e62@t) (if (memv e4e62@t '(#\()) (e4e5a@loop (cdr e4e5c@chars) (+ e4e5d@p0 '1) e4e5e@p1) (if (memv e4e62@t '(#\))) (e4e5a@loop (cdr e4e5c@chars) (- e4e5d@p0 '1) e4e5e@p1) (if (memv e4e62@t '(#\[)) (e4e5a@loop (cdr e4e5c@chars) e4e5d@p0 (+ e4e5e@p1 '1)) (if (memv e4e62@t '(#\])) (e4e5a@loop (cdr e4e5c@chars) e4e5d@p0 (- e4e5e@p1 '1)) (e4e5a@loop (cdr e4e5c@chars) e4e5d@p0 e4e5e@p1)))))) (car e4e5c@chars)))))) e4e5a@loop) (string->list e4e58@text) '0 '0))) (set! e4e53@eval-string-print (lambda (e4e56@text) (if (not (or (string=? '"\n" e4e56@text) (= '0 (string-length e4e56@text)))) (write (e4db1@eval-top-level (call-with-port (open-string-input-port e4e56@text) read))) (void)))) (if (eof-object? e4e4c@line) (begin (e4e53@eval-string-print e4e4d@accum) (exit)) ((lambda (e4e54@current) (if (e4e51@parentheses-ok? e4e54@current) (e4e53@eval-string-print e4e54@current) (e4e4a@loop (get-line (current-input-port)) e4e54@current))) (string-append e4e4d@accum e4e4c@line))))) '#f '#f)))) e4e4a@loop) (get-line (current-input-port)) '""))))))) (newline) (e4e41@rec)))) (e4e41@rec))) '#f))) (set! e4da5@trace-printer (e2895@e27bf@make-parameter write)) (set! e4da7@command-line (e2895@e27bf@make-parameter (get-command-line))) (set! e4da9@local-library-path (lambda (e4e64@filename) (e2afd@e298c@library-path))) (set! e4dab@load/args (lambda (e4e66@filename . e4e68@args) (begin (apply e4dbb@load-r6rs-top-level e4e66@filename 'load e4e68@args) (void)))) (set! e4dad@load (lambda (e4e6a@filename) (begin (apply e4dbb@load-r6rs-top-level e4e6a@filename 'load (e4da7@command-line)) (void)))) (set! e4daf@ironscheme-build (lambda () (e4dad@load '"ironscheme-buildscript.ss"))) (set! e4db1@eval-top-level (lambda (e4e6c@x) (e49c1@e2fbf@eval e4e6c@x (e49d7@e2feb@interaction-environment)))) (set! e4db3@compile-system-libraries (lambda () (e4db1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! e4db5@compile (lambda (e4e6e@filename) (e4dbb@load-r6rs-top-level e4e6e@filename 'compile))) (set! e4db7@compile->closure (lambda (e4e70@filename) (e4dbb@load-r6rs-top-level e4e70@filename 'closure))) (set! e4db9@pre-compile-r6rs-file (lambda (e4e72@filename) (e4dbb@load-r6rs-top-level e4e72@filename 'compile))) (set! e4dbb@load-r6rs-top-level (lambda (e4e74@filename e4e75@how . e4e78@args) ((lambda (e4e7e@e4e7b e4e7f@e4e7d) ((lambda (e4e82@swap) (dynamic-wind e4e82@swap (lambda () ((lambda (e4e84@x*) ((lambda (e4e86@t) (if (memv e4e86@t '(closure)) (e49d6@e2fe9@pre-compile-r6rs-top-level e4e84@x*) (if (memv e4e86@t '(load)) ((lambda (e4e8c@e4e89 e4e8d@e4e8b) ((lambda (e4e90@swap) (dynamic-wind e4e90@swap (lambda () ((e49d5@e2fe7@compile-r6rs-top-level e4e84@x*))) e4e90@swap)) (lambda () ((lambda (e4e92@t) (begin (e4e8c@e4e89 e4e8d@e4e8b) (set! e4e8d@e4e8b e4e92@t))) (e4e8c@e4e89))))) e4da7@command-line (cons e4e74@filename (car e4e78@args))) (if (memv e4e86@t '(compile)) (begin (e49d5@e2fe7@compile-r6rs-top-level e4e84@x*) (e2b01@e2994@serialize-all e2890@e27b5@serialize-library e28ea@e28a3@compile-core-expr)) (if '#f '#f (void)))))) e4e75@how)) (with-input-from-file e4e74@filename (lambda () ((letrec ((e4e94@f (lambda () ((lambda (e4e96@x) (if (eof-object? e4e96@x) '() (cons e4e96@x (e4e94@f)))) (e2888@e27a5@read-annotated))))) e4e94@f)))))) e4e82@swap)) (lambda () ((lambda (e4e98@t) (begin (e4e7e@e4e7b e4e7f@e4e7d) (set! e4e7f@e4e7d e4e98@t))) (e4e7e@e4e7b))))) e2afd@e298c@library-path (e4da9@local-library-path e4e74@filename)))) (set! e4dbd@load-r6rs-top-level-sexp (lambda (e4e9a@import-spec e4e9b@thunk) ((lambda (e4ea2@e4e9f e4ea3@e4ea1) ((lambda (e4ea6@swap) (dynamic-wind e4ea6@swap (lambda () ((lambda (e4eac@e4ea9 e4ead@e4eab) ((lambda (e4eb0@swap) (dynamic-wind e4eb0@swap (lambda () ((e49d5@e2fe7@compile-r6rs-top-level (list (cons 'import e4e9a@import-spec) (list e4e9b@thunk))))) e4eb0@swap)) (lambda () ((lambda (e4eb2@t) (begin (e4eac@e4ea9 e4ead@e4eab) (set! e4ead@e4eab e4eb2@t))) (e4eac@e4ea9))))) e4da7@command-line '())) e4ea6@swap)) (lambda () ((lambda (e4eb4@t) (begin (e4ea2@e4e9f e4ea3@e4ea1) (set! e4ea3@e4ea1 e4eb4@t))) (e4ea2@e4e9f))))) e2afd@e298c@library-path (e4da9@local-library-path '"")))) (begin (set! e4eca@e4dbd@load-r6rs-top-level-sexp e4dbd@load-r6rs-top-level-sexp) (set! e4ec9@e4dbb@load-r6rs-top-level e4dbb@load-r6rs-top-level) (set! e4ec8@e4db9@pre-compile-r6rs-file e4db9@pre-compile-r6rs-file) (set! e4ec7@e4db7@compile->closure e4db7@compile->closure) (set! e4ec6@e4db5@compile e4db5@compile) (set! e4ec5@e4db3@compile-system-libraries e4db3@compile-system-libraries) (set! e4ec4@e4db1@eval-top-level e4db1@eval-top-level) (set! e4ec3@e4daf@ironscheme-build e4daf@ironscheme-build) (set! e4ec2@e4dad@load e4dad@load) (set! e4ec1@e4dab@load/args e4dab@load/args) (set! e4ec0@e4da9@local-library-path e4da9@local-library-path) (set! e4ebf@e4da7@command-line e4da7@command-line) (set! e4ebe@e4da5@trace-printer e4da5@trace-printer) (set! e4ebd@e4da3@repl e4da3@repl) (set! e4ebc@e4da1@map-with-index e4da1@map-with-index) (set! e4ebb@e4d9f@record->field-alist e4d9f@record->field-alist) (set! e4eba@e4d9d@condition-printer e4d9d@condition-printer) (set! e4eb9@e4d9b@rpad e4d9b@rpad) (set! e4eb8@e4d99@for-each-with-index e4d99@for-each-with-index) (set! e4eb7@e4d97@parse-and-add-library-path e4d97@parse-and-add-library-path) (set! e4eb6@e4d95@add-library-path! e4d95@add-library-path!) (e2b02@e2996@current-precompiled-library-loader e2891@e27b7@load-serialized-library) (set-symbol-value! 'load e4dad@load) (set-symbol-value! 'pre-compile-r6rs-file e4db9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs e4db1@eval-top-level) (set-symbol-value! 'int-env-syms e49b8@e2fad@interaction-environment-symbols) (set-symbol-value! 'expanded2core e28e9@e28a1@expanded->core) (set-symbol-value! 'trace-printer e4da5@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (e4dbe@c) (condition (e4cf2@e4afc@make-non-continuable-violation) (e4ce8@e4ae3@make-who-condition 'raise) (e4cac@e4a44@make-message-condition '"returned from non-continuable exception") (e4cde@e4ac8@make-irritants-condition (list e4dbe@c))))) (e4d97@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (e4d97@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (e4d95@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (e4d95@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (e4d95@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (e4dc0@prefix) (e2afe@e298e@library-extensions (e4dc0@prefix '".mosh" (e2afe@e298e@library-extensions)))) (lambda (e4dc2@ext e4dc3@ls) (append (map (lambda (e4dc6@x) (string-append e4dc2@ext e4dc6@x)) e4dc3@ls) e4dc3@ls))) ((lambda (e4dc8@args e4dc9@port) ((lambda (e4dcd@ref) (begin (set! e4dcd@ref (lambda (e4dd8@rtd e4dd9@i e4dda@x) ((lambda (e4dde@val) (if (symbol? e4dde@val) (ungensym e4dde@val) e4dde@val)) ((record-accessor e4dd8@rtd e4dd9@i) e4dda@x)))) (with-exception-handler (lambda (e4dce@c) (if (condition? e4dce@c) (e4d9d@condition-printer e4dce@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" e4dce@c))) (lambda () (if ((call/cc (lambda (e4dd2@e4dd0) (lambda () (with-exception-handler (lambda (e4dd4@c) ((call/cc (lambda (e4dd6@e4dd1) (e4dd2@e4dd0 (lambda () (if '#t '#f (e4dd6@e4dd1 (lambda () (raise-continuable e4dd4@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (e4dbd@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? e4dc8@args) (e4da3@repl) (e4dbb@load-r6rs-top-level (car e4dc8@args) 'load (cdr e4dc8@args)))))))) '#f)) (e4da7@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
