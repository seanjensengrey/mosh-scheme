;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (e2765@read-annotated e2767@annotation-stripped e2769@annotation? e276b@annotation-source e276d@annotation-expression e276f@scm->fasl e2771@fasl-save e2773@fasl-load e2775@serialize-library e2777@load-serialized-library e2779@make-record-printer e277b@compile-core e277d@read-library-source-file e277f@make-parameter e27e7@file-options-spec) (begin (set! e2765@read-annotated read) (set! e2767@annotation-stripped (lambda (e27e8@x) (e276d@annotation-expression e27e8@x))) (set! e2769@annotation? (lambda (e27ea@x) (source-info e27ea@x))) (set! e276b@annotation-source (lambda (e27ec@x) (source-info e27ec@x))) (set! e276d@annotation-expression (lambda (e27ee@x) (if (pair? e27ee@x) (cons (car e27ee@x) (cdr e27ee@x)) (display '"line:46\n")))) (set! e276f@scm->fasl (lambda (e27f0@filename) (string-append e27f0@filename '".fasl"))) (set! e2771@fasl-save (lambda (e27f2@filename e27f3@obj) (call-with-port (open-file-output-port e27f2@filename) (lambda (e27f6@port) ((symbol-value 'fasl-write!) e27f3@obj e27f6@port))))) (set! e2773@fasl-load (lambda (e27f8@filename) (call-with-port (open-file-input-port e27f8@filename) (symbol-value 'fasl-read!)))) (set! e2775@serialize-library (lambda (e27fa@filename e27fb@obj) (begin (format '#t '"serialize-library ~a\n..." e27fa@filename) ((lambda (e27fe@expanded2core) ((lambda (e2800@compile) ((lambda (e2802@code) ((lambda (e2804@pivot) ((lambda (e2806@visit) ((lambda () (begin (set-car! e2804@pivot e2806@visit) ((lambda (e2808@pivot) ((lambda (e280a@invoke) ((lambda () (set-car! e2808@pivot e280a@invoke)))) (e2800@compile (e27fe@expanded2core (car e2808@pivot))))) (cdr e2804@pivot)))))) (e2800@compile (e27fe@expanded2core (car e2804@pivot))))) (cddddr (cddddr e2802@code)))) e27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (e280c@fasl-file) (begin (if (file-exists? e280c@fasl-file) (delete-file e280c@fasl-file) (void)) ((call/cc (lambda (e2810@e280e) (lambda () (with-exception-handler (lambda (e2812@c) ((call/cc (lambda (e2814@e280f) (e2810@e280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " e27fa@filename) (if (file-exists? e280c@fasl-file) (delete-file e280c@fasl-file) (void)) '#f) (e2814@e280f (lambda () (raise-continuable e2812@c)))))))))) (lambda () (begin (e2771@fasl-save e280c@fasl-file e27fb@obj) (display '"OK\n")))))))))) (e276f@scm->fasl e27fa@filename))))) (set! e2777@load-serialized-library (lambda (e2816@filename e2817@obj) ((lambda (e281a@fasl-file) (if (and (file-exists? e281a@fasl-file) ((symbol-value 'file-newer?) e281a@fasl-file e2816@filename)) ((lambda (e281c@expanded2core) ((lambda (e281e@eval-compiled-core) ((lambda (e2820@code) ((lambda (e2822@pivot) ((lambda (e2824@visit) ((lambda (e2826@visit-proc) ((lambda () (begin (set-car! e2822@pivot e2826@visit-proc) ((lambda (e2828@pivot) ((lambda (e282a@invoke) ((lambda () (begin (set-car! e2828@pivot (lambda () (e281e@eval-compiled-core e282a@invoke))) (apply e2817@obj e2820@code))))) (car e2828@pivot))) (cdr e2822@pivot)) '#t)))) (lambda () (e281e@eval-compiled-core e2824@visit)))) (car e2822@pivot))) (cddddr (cddddr e2820@code)))) (e2773@fasl-load e281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (e276f@scm->fasl e2816@filename)))) (set! e2779@make-record-printer (lambda (e282c@name e282d@printer) (lambda e2830@x (begin (display '"record printer") (for-each display e2830@x))))) (set! e277b@compile-core (lambda e2832@x (apply error 'comile-core '"not implementated" e2832@x))) (set! e277d@read-library-source-file (lambda (e2834@file-name) (with-input-from-file e2834@file-name e2765@read-annotated))) (set! e277f@make-parameter (lambda e2844 ((lambda (e2845) (if (= e2845 '1) (apply (lambda (e2836@x) (e277f@make-parameter e2836@x (lambda (e2838@x) e2838@x))) e2844) (if (= e2845 '2) (apply (lambda (e283a@x e283b@fender) ((lambda (e283e@x) (lambda e2842 ((lambda (e2843) (if (= e2843 '0) (apply (lambda () e283e@x) e2842) (if (= e2843 '1) (apply (lambda (e2840@v) (set! e283e@x (e283b@fender e2840@v))) e2842) (error 'apply '"invalid arg count")))) (length e2842)))) (e283b@fender e283a@x))) e2844) (error 'apply '"invalid arg count")))) (length e2844)))) (set! e27e7@file-options-spec (lambda (e2846@x) e2846@x)) (begin (set! e2856@e27e7@file-options-spec e27e7@file-options-spec) (set! e2855@e277f@make-parameter e277f@make-parameter) (set! e2854@e277d@read-library-source-file e277d@read-library-source-file) (set! e2853@e277b@compile-core e277b@compile-core) (set! e2852@e2779@make-record-printer e2779@make-record-printer) (set! e2851@e2777@load-serialized-library e2777@load-serialized-library) (set! e2850@e2775@serialize-library e2775@serialize-library) (set! e284f@e2773@fasl-load e2773@fasl-load) (set! e284e@e2771@fasl-save e2771@fasl-save) (set! e284d@e276f@scm->fasl e276f@scm->fasl) (set! e284c@e276d@annotation-expression e276d@annotation-expression) (set! e284b@e276b@annotation-source e276b@annotation-source) (set! e284a@e2769@annotation? e2769@annotation?) (set! e2849@e2767@annotation-stripped e2767@annotation-stripped) (set! e2848@e2765@read-annotated e2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e285b@current-primitive-locations e285d@mutable? e285f@rewriter e2861@expanded->core e2863@compile-core-expr e2865@pretty-print e2867@compile-core-expr-to-port) (begin (set! e285b@current-primitive-locations (e2855@e277f@make-parameter (lambda (e2868@x) '#f) (lambda (e286a@p) e286a@p))) (set! e285d@mutable? (lambda (e286c@x) (or (pair? e286c@x) (vector? e286c@x) (hashtable? e286c@x)))) (set! e285f@rewriter (lambda (e286e@quote-hack?) ((lambda (e2871@f) (begin (set! e2871@f (lambda (e2872@x) (if (pair? e2872@x) ((lambda (e2874@t) (if (memv e2874@t '(quote)) (if (and e286e@quote-hack? (e285d@mutable? (cadr e2872@x))) ((lambda (e2876@g) (begin (set-symbol-value! e2876@g (cadr e2872@x)) e2876@g)) (gensym)) e2872@x) (if (memv e2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (e2878@x) (cons (car e2878@x) (map e2871@f (cdr e2878@x)))) (cdr e2872@x))) (if (memv e2874@t '(lambda)) (cons* 'lambda (cadr e2872@x) (map e2871@f (cddr e2872@x))) (if (memv e2874@t '(letrec)) ((lambda (e287a@bindings e287b@body*) ((lambda (e287e@lhs* e287f@rhs*) (cons* 'letrec (map list e287e@lhs* (map e2871@f e287f@rhs*)) (map e2871@f e287b@body*))) (map car e287a@bindings) (map cadr e287a@bindings))) (cadr e2872@x) (cddr e2872@x)) (if (memv e2874@t '(letrec*)) ((lambda (e2882@bindings e2883@body*) ((lambda (e2886@lhs* e2887@rhs*) (cons* 'letrec* (map list e2886@lhs* (map e2871@f e2887@rhs*)) (map e2871@f e2883@body*))) (map car e2882@bindings) (map cadr e2882@bindings))) (cadr e2872@x) (cddr e2872@x)) (if (memv e2874@t '(library-letrec*)) ((lambda (e288a@name e288b@x) ((lambda (e288e@bindings e288f@body*) ((lambda (e2892@lhs* e2893@lhs** e2894@rhs*) (cons* 'library-letrec* e288a@name (map list e2892@lhs* e2893@lhs** (map e2871@f e2894@rhs*)) (map e2871@f e288f@body*))) (map car e288e@bindings) (map cadr e288e@bindings) (map caddr e288e@bindings))) (cadr e288b@x) (cddr e288b@x))) (cadr e2872@x) (cdr e2872@x)) (if (memv e2874@t '(begin)) (cons 'begin (map e2871@f (cdr e2872@x))) (if (memv e2874@t '(set!)) (list 'set! (cadr e2872@x) (e2871@f (caddr e2872@x))) (if (memv e2874@t '(primitive)) ((lambda (e2898@op) ((lambda (e289a@t) (if e289a@t ((lambda (e289c@loc) e289c@loc) e289a@t) e2898@op)) ((e285b@current-primitive-locations) e2898@op))) (cadr e2872@x)) (if (memv e2874@t '(define)) e2872@x (if (list? e2872@x) (map e2871@f e2872@x) (error 'rewrite '"invalid form ~s ~s" e2872@x (list? e2872@x)))))))))))))) (car e2872@x)) e2872@x))) e2871@f)) '#f))) (set! e2861@expanded->core (lambda (e289e@x) ((e285f@rewriter '#f) e289e@x))) (set! e2863@compile-core-expr (lambda (e28a0@x) ((e285f@rewriter '#f) e28a0@x))) (set! e2865@pretty-print write) (set! e2867@compile-core-expr-to-port (lambda (e28a2@x e28a3@p) (e2865@pretty-print ((e285f@rewriter '#f) e28a2@x) e28a3@p))) (begin (set! e28ac@e2867@compile-core-expr-to-port e2867@compile-core-expr-to-port) (set! e28ab@e2865@pretty-print e2865@pretty-print) (set! e28aa@e2863@compile-core-expr e2863@compile-core-expr) (set! e28a9@e2861@expanded->core e2861@expanded->core) (set! e28a8@e285f@rewriter e285f@rewriter) (set! e28a7@e285d@mutable? e285d@mutable?) (set! e28a6@e285b@current-primitive-locations e285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (e28fb@make-collection e28fd@current-library-collection e2903@e28fe e2905@e2900 e2907@e28ff e290a@library? e290c@make-library e290e@library-id e2910@library-name e2912@library-version e2914@library-imp* e2916@library-vis* e2918@library-inv* e291a@library-subst e291c@library-env e291e@library-visit-state e2920@library-invoke-state e2922@library-visit-code e2924@library-invoke-code e2926@library-visible? e2928@library-source-file-name e292a@set-library-id! e292c@set-library-name! e292e@set-library-version! e2930@set-library-imp*! e2932@set-library-vis*! e2934@set-library-inv*! e2936@set-library-subst! e2938@set-library-env! e293a@set-library-visit-state! e293c@set-library-invoke-state! e293e@set-library-visit-code! e2940@set-library-invoke-code! e2942@set-library-visible?! e2944@set-library-source-file-name! e2946@rp e2948@find-dependencies e294a@find-library-by e294c@library-path e294e@library-extensions e2950@library-name->file-name e2952@file-locator e2954@serialize-all e2956@current-precompiled-library-loader e2958@try-load-from-file e295a@library-loader e295c@current-library-expander e295e@external-pending-libraries e2960@find-external-library e2962@find-library-by-name e2964@library-exists? e2966@find-library-by-spec/die e2968@label->binding-table e296a@install-library-record e296c@install-library e296e@imported-label->binding e2970@invoke-library e2972@visit-library e2974@invoke-library-by-spec e2976@installed-libraries e2978@library-spec) (begin (set! e28fb@make-collection (lambda () ((lambda (e2979@set) ((lambda (e297c@set-cons) (begin (set! e297c@set-cons (lambda (e2981@x e2982@ls) (if (memq e2981@x e2982@ls) e2982@ls (cons e2981@x e2982@ls)))) (lambda e297f ((lambda (e2980) (if (= e2980 '0) (apply (lambda () e2979@set) e297f) (if (= e2980 '1) (apply (lambda (e297d@x) (set! e2979@set (e297c@set-cons e297d@x e2979@set))) e297f) (error 'apply '"invalid arg count")))) (length e297f))))) '#f)) '()))) (set! e28fd@current-library-collection (e2855@e277f@make-parameter (e28fb@make-collection) (lambda (e2985@x) (begin (if (not (procedure? e2985@x)) (assertion-violation 'current-library-collection '"not a procedure" e2985@x) (void)) e2985@x)))) (set! e2903@e28fe (make-record-type-descriptor 'library '#f 'e2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! e2905@e2900 '#f) (set! e2907@e28ff (make-record-constructor-descriptor e2903@e28fe '#f e2905@e2900)) (set! e290a@library? (record-predicate e2903@e28fe)) (set! e290c@make-library (record-constructor e2907@e28ff)) (set! e290e@library-id (record-accessor e2903@e28fe '0)) (set! e2910@library-name (record-accessor e2903@e28fe '1)) (set! e2912@library-version (record-accessor e2903@e28fe '2)) (set! e2914@library-imp* (record-accessor e2903@e28fe '3)) (set! e2916@library-vis* (record-accessor e2903@e28fe '4)) (set! e2918@library-inv* (record-accessor e2903@e28fe '5)) (set! e291a@library-subst (record-accessor e2903@e28fe '6)) (set! e291c@library-env (record-accessor e2903@e28fe '7)) (set! e291e@library-visit-state (record-accessor e2903@e28fe '8)) (set! e2920@library-invoke-state (record-accessor e2903@e28fe '9)) (set! e2922@library-visit-code (record-accessor e2903@e28fe '10)) (set! e2924@library-invoke-code (record-accessor e2903@e28fe '11)) (set! e2926@library-visible? (record-accessor e2903@e28fe '12)) (set! e2928@library-source-file-name (record-accessor e2903@e28fe '13)) (set! e292a@set-library-id! (record-mutator e2903@e28fe '0)) (set! e292c@set-library-name! (record-mutator e2903@e28fe '1)) (set! e292e@set-library-version! (record-mutator e2903@e28fe '2)) (set! e2930@set-library-imp*! (record-mutator e2903@e28fe '3)) (set! e2932@set-library-vis*! (record-mutator e2903@e28fe '4)) (set! e2934@set-library-inv*! (record-mutator e2903@e28fe '5)) (set! e2936@set-library-subst! (record-mutator e2903@e28fe '6)) (set! e2938@set-library-env! (record-mutator e2903@e28fe '7)) (set! e293a@set-library-visit-state! (record-mutator e2903@e28fe '8)) (set! e293c@set-library-invoke-state! (record-mutator e2903@e28fe '9)) (set! e293e@set-library-visit-code! (record-mutator e2903@e28fe '10)) (set! e2940@set-library-invoke-code! (record-mutator e2903@e28fe '11)) (set! e2942@set-library-visible?! (record-mutator e2903@e28fe '12)) (set! e2944@set-library-source-file-name! (record-mutator e2903@e28fe '13)) (set! e2946@rp (e2852@e2779@make-record-printer 'library (lambda (e2987@x e2988@p e2989@wr) (begin (if (not (e290a@library? e2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (e2912@library-version e2987@x)) (e2910@library-name e2987@x) (append (e2910@library-name e2987@x) (list (e2912@library-version e2987@x))))) e2988@p))))) (set! e2948@find-dependencies (lambda (e298d@ls) (if (null? e298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! e294a@find-library-by (lambda (e298f@pred) ((letrec ((e2991@f (lambda (e2993@ls) (if (null? e2993@ls) '#f (if (e298f@pred (car e2993@ls)) (car e2993@ls) (e2991@f (cdr e2993@ls))))))) e2991@f) ((e28fd@current-library-collection))))) (set! e294c@library-path (e2855@e277f@make-parameter '(".") (lambda (e2995@x) (if (and (list? e2995@x) (for-all string? e2995@x)) (map (lambda (e2997@x) e2997@x) e2995@x) (assertion-violation 'library-path '"not a list of strings" e2995@x))))) (set! e294e@library-extensions (e2855@e277f@make-parameter '(".sls" ".ss" ".scm") (lambda (e2999@x) (if (and (list? e2999@x) (for-all string? e2999@x)) (map (lambda (e299b@x) e299b@x) e2999@x) (assertion-violation 'library-extensions '"not a list of strings" e2999@x))))) (set! e2950@library-name->file-name (lambda (e299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (e29a3@e29a0 e29a4@e29a2) ((lambda (e29a7@extract e29a8@p) ((lambda (e29ac@display-hex) (begin (set! e29ac@display-hex (lambda (e29b5@n) (if (<= '0 e29b5@n '9) (display e29b5@n e29a8@p) (display (integer->char (+ (char->integer '#\a) (- e29b5@n '10))) e29a8@p)))) (begin ((letrec ((e29ad@f (lambda (e29af@ls) (if (not (null? e29af@ls)) (begin (display '"/" e29a8@p) (for-each (lambda (e29b1@c) (if (or (char<=? '#\a e29b1@c '#\z) (char<=? '#\A e29b1@c '#\Z) (char<=? '#\0 e29b1@c '#\9) (memv e29b1@c '(#\- #\. #\_ #\~))) (display e29b1@c e29a8@p) (begin (display '"%" e29a8@p) ((lambda (e29b3@n) (begin (e29ac@display-hex (quotient e29b3@n '16)) (e29ac@display-hex (remainder e29b3@n '16)))) (char->integer e29b1@c))))) (string->list (symbol->string (car e29af@ls)))) (e29ad@f (cdr e29af@ls))) (void))))) e29ad@f) e299d@x) (e29a7@extract)))) '#f)) e29a4@e29a2 e29a3@e29a0))))) (set! e2952@file-locator (e2855@e277f@make-parameter (lambda (e29b7@x) ((lambda (e29b9@str) ((letrec ((e29bb@f (lambda (e29bd@ls e29be@exts e29bf@failed-list) (if (null? e29bd@ls) ((lambda () ((lambda (e29cb@e29c6 e29cd@e29c8 e29cf@e29c7 e29d2@e29c5 e29d4@make-library-resolution-condition e29d6@e29c3 e29d8@e29c4 e29da@library-resolution-condition? e29dc@condition-library e29de@condition-files) (begin (set! e29cb@e29c6 (make-record-type-descriptor '&library-resolution e4c6c@e49b3@&condition-rtd 'e29c9 '#f '#f '#((immutable library) (immutable files)))) (set! e29cd@e29c8 '#f) (set! e29cf@e29c7 (make-record-constructor-descriptor e29cb@e29c6 e4c6d@e49b5@&condition-rcd e29cd@e29c8)) (set! e29d2@e29c5 (record-predicate e29cb@e29c6)) (set! e29d4@make-library-resolution-condition (record-constructor e29cf@e29c7)) (set! e29d6@e29c3 (record-accessor e29cb@e29c6 '0)) (set! e29d8@e29c4 (record-accessor e29cb@e29c6 '1)) (set! e29da@library-resolution-condition? (condition-predicate e29cb@e29c6)) (set! e29dc@condition-library (condition-accessor e29cb@e29c6 e29d6@e29c3)) (set! e29de@condition-files (condition-accessor e29cb@e29c6 e29d8@e29c4)) (raise (condition (e4c8c@e4a4d@make-error) (e4cae@e4aa9@make-who-condition 'expander) (e4c72@e4a0a@make-message-condition '"cannot locate library in library-path") (e29d4@make-library-resolution-condition e29b7@x (reverse e29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? e29be@exts) (e29bb@f (cdr e29bd@ls) (e294e@library-extensions) e29bf@failed-list) ((lambda (e29df@name) (if (file-exists? e29df@name) e29df@name (e29bb@f e29bd@ls (cdr e29be@exts) (cons e29df@name e29bf@failed-list)))) (string-append (car e29bd@ls) e29b9@str (car e29be@exts)))))))) e29bb@f) (e294c@library-path) (e294e@library-extensions) '())) (e2950@library-name->file-name e29b7@x))) (lambda (e29e1@f) (if (procedure? e29e1@f) e29e1@f (assertion-violation 'file-locator '"not a procedure" e29e1@f))))) (set! e2954@serialize-all (lambda (e29e3@serialize e29e4@compile) ((lambda (e29e8@library-desc) (begin (set! e29e8@library-desc (lambda (e29eb@x) (list (e290e@library-id e29eb@x) (e2910@library-name e29eb@x)))) (for-each (lambda (e29e9@x) (if (e2928@library-source-file-name e29e9@x) (e29e3@serialize (e2928@library-source-file-name e29e9@x) (list (e290e@library-id e29e9@x) (e2910@library-name e29e9@x) (e2912@library-version e29e9@x) (map e29e8@library-desc (e2914@library-imp* e29e9@x)) (map e29e8@library-desc (e2916@library-vis* e29e9@x)) (map e29e8@library-desc (e2918@library-inv* e29e9@x)) (e291a@library-subst e29e9@x) (e291c@library-env e29e9@x) (e29e4@compile (e2922@library-visit-code e29e9@x)) (e29e4@compile (e2924@library-invoke-code e29e9@x)) (e2926@library-visible? e29e9@x))) (void))) ((e28fd@current-library-collection))))) '#f))) (set! e2956@current-precompiled-library-loader (e2855@e277f@make-parameter (lambda (e29ed@filename e29ee@sk) '#f))) (set! e2958@try-load-from-file (lambda (e29f1@filename) ((e2956@current-precompiled-library-loader) e29f1@filename (lambda e2a17 ((lambda (e2a18) (if (= e2a18 '11) (apply (lambda (e29f3@id e29f4@name e29f5@ver e29f6@imp* e29f7@vis* e29f8@inv* e29f9@exp-subst e29fa@exp-env e29fb@visit-proc e29fc@invoke-proc e29fd@visible?) ((letrec ((e2a09@f (lambda (e2a0b@deps) (if (null? e2a0b@deps) (begin (e296c@install-library e29f3@id e29f4@name e29f5@ver e29f6@imp* e29f7@vis* e29f8@inv* e29f9@exp-subst e29fa@exp-env e29fb@visit-proc e29fc@invoke-proc '#f '#f e29fd@visible? '#f) '#t) ((lambda (e2a0d@d) ((lambda (e2a0f@label e2a10@dname) ((lambda (e2a13@l) (if (and (e290a@library? e2a13@l) (eq? e2a0f@label (e290e@library-id e2a13@l))) (e2a09@f (cdr e2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" e29f4@name e2a10@dname e29f1@filename e2a13@l e2a0f@label (e290e@library-id e2a13@l)) '#f))) (e2962@find-library-by-name e2a10@dname))) (car e2a0d@d) (cadr e2a0d@d))) (car e2a0b@deps)))))) e2a09@f) (append e29f6@imp* e29f7@vis* e29f8@inv*))) e2a17) (if (>= e2a18 '0) (apply (lambda e2a15@others '#f) e2a17) (error 'apply '"invalid arg count")))) (length e2a17)))))) (set! e295a@library-loader (e2855@e277f@make-parameter (lambda (e2a19@x) ((lambda (e2a1b@file-name) (if (not e2a1b@file-name) (assertion-violation '#f '"cannot file library" e2a19@x) (or (e2958@try-load-from-file e2a1b@file-name) ((e295c@current-library-expander) (e2854@e277d@read-library-source-file e2a1b@file-name) e2a1b@file-name (lambda (e2a1d@name) (if (not (fast-equal? e2a1d@name e2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (e2a23@e2a20 e2a24@e2a22) ((lambda (e2a27@e e2a28@p) (begin (display '"expected to find library " e2a28@p) (write e2a19@x e2a28@p) (display '" in file " e2a28@p) (display e2a1b@file-name e2a28@p) (display '", found " e2a28@p) (write e2a1d@name e2a28@p) (display '" instead" e2a28@p) (e2a27@e))) e2a24@e2a22 e2a23@e2a20)))) (void))))))) ((e2952@file-locator) e2a19@x))) (lambda (e2a2b@f) (if (procedure? e2a2b@f) e2a2b@f (assertion-violation 'library-locator '"not a procedure" e2a2b@f))))) (set! e295c@current-library-expander (e2855@e277f@make-parameter (lambda (e2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (e2a2f@f) (if (procedure? e2a2f@f) e2a2f@f (assertion-violation 'library-expander '"not a procedure" e2a2f@f))))) (set! e295e@external-pending-libraries (e2855@e277f@make-parameter '())) (set! e2960@find-external-library (lambda (e2a31@name) (begin (if (member e2a31@name (e295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" e2a31@name) (void)) ((lambda (e2a37@e2a34 e2a38@e2a36) ((lambda (e2a3b@swap) (dynamic-wind e2a3b@swap (lambda () (begin ((e295a@library-loader) e2a31@name) (or (e294a@find-library-by (lambda (e2a3d@x) (fast-equal? (e2910@library-name e2a3d@x) e2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" e2a31@name)))) e2a3b@swap)) (lambda () ((lambda (e2a3f@t) (begin (e2a37@e2a34 e2a38@e2a36) (set! e2a38@e2a36 e2a3f@t))) (e2a37@e2a34))))) e295e@external-pending-libraries (cons e2a31@name (e295e@external-pending-libraries)))))) (set! e2962@find-library-by-name (lambda (e2a41@name) (or (e294a@find-library-by (lambda (e2a43@x) (fast-equal? (e2910@library-name e2a43@x) e2a41@name))) (e2960@find-external-library e2a41@name)))) (set! e2964@library-exists? (lambda (e2a45@name) (and (e294a@find-library-by (lambda (e2a47@x) (fast-equal? (e2910@library-name e2a47@x) e2a45@name))) '#t))) (set! e2966@find-library-by-spec/die (lambda (e2a49@spec) ((lambda (e2a4b@id) (or (e294a@find-library-by (lambda (e2a4d@x) (eq? e2a4b@id (e290e@library-id e2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" e2a49@spec))) (car e2a49@spec)))) (set! e2968@label->binding-table (make-eq-hashtable)) (set! e296a@install-library-record (lambda (e2a4f@lib) (begin ((lambda (e2a51@exp-env) (for-each (lambda (e2a53@x) ((lambda (e2a55@label e2a56@binding) ((lambda (e2a59@binding) (begin (if (hashtable-ref e2968@label->binding-table e2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" e2a55@label (hashtable-ref e2968@label->binding-table e2a55@label '#f) e2a59@binding) (exit)) (void)) (hashtable-set! e2968@label->binding-table e2a55@label e2a59@binding))) ((lambda (e2a5b@t) (if (memv e2a5b@t '(global)) (cons 'global (cons e2a4f@lib (cdr e2a56@binding))) (if (memv e2a5b@t '(global-macro)) (cons 'global-macro (cons e2a4f@lib (cdr e2a56@binding))) (if (memv e2a5b@t '(global-macro!)) (cons 'global-macro! (cons e2a4f@lib (cdr e2a56@binding))) e2a56@binding)))) (car e2a56@binding)))) (car e2a53@x) (cdr e2a53@x))) e2a51@exp-env)) (e291c@library-env e2a4f@lib)) ((e28fd@current-library-collection) e2a4f@lib)))) (set! e296c@install-library (lambda (e2a5d@id e2a5e@name e2a5f@ver e2a60@imp* e2a61@vis* e2a62@inv* e2a63@exp-subst e2a64@exp-env e2a65@visit-proc e2a66@invoke-proc e2a67@visit-code e2a68@invoke-code e2a69@visible? e2a6a@source-file-name) ((lambda (e2a79@imp-lib* e2a7a@vis-lib* e2a7b@inv-lib*) (begin (if (not (and (symbol? e2a5d@id) (list? e2a5e@name) (list? e2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" e2a5d@id e2a5e@name e2a5f@ver) (void)) (if (e2964@library-exists? e2a5e@name) (assertion-violation 'install-library '"library is already installed" e2a5e@name) (void)) ((lambda (e2a7f@lib) (e296a@install-library-record e2a7f@lib)) (e290c@make-library e2a5d@id e2a5e@name e2a5f@ver e2a79@imp-lib* e2a7a@vis-lib* e2a7b@inv-lib* e2a63@exp-subst e2a64@exp-env e2a65@visit-proc e2a66@invoke-proc e2a67@visit-code e2a68@invoke-code e2a69@visible? e2a6a@source-file-name)))) (map e2966@find-library-by-spec/die e2a60@imp*) (map e2966@find-library-by-spec/die e2a61@vis*) (map e2966@find-library-by-spec/die e2a62@inv*)))) (set! e296e@imported-label->binding (lambda (e2a81@lab) (hashtable-ref e2968@label->binding-table e2a81@lab '#f))) (set! e2970@invoke-library (lambda (e2a83@lib) ((lambda (e2a85@invoke) (if (procedure? e2a85@invoke) (begin (e293c@set-library-invoke-state! e2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" e2a83@lib))) (for-each e2970@invoke-library (e2918@library-inv* e2a83@lib)) (e293c@set-library-invoke-state! e2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" e2a83@lib))) (e2a85@invoke) (e293c@set-library-invoke-state! e2a83@lib '#t)) (void))) (e2920@library-invoke-state e2a83@lib)))) (set! e2972@visit-library (lambda (e2a87@lib) ((lambda (e2a89@visit) (if (procedure? e2a89@visit) (begin (e293a@set-library-visit-state! e2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" e2a87@lib))) (for-each e2970@invoke-library (e2916@library-vis* e2a87@lib)) (e293a@set-library-visit-state! e2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" e2a87@lib))) (e2a89@visit) (e293a@set-library-visit-state! e2a87@lib '#t)) (void))) (e291e@library-visit-state e2a87@lib)))) (set! e2974@invoke-library-by-spec (lambda (e2a8b@spec) (e2970@invoke-library (e2966@find-library-by-spec/die e2a8b@spec)))) (set! e2976@installed-libraries (lambda e2a93 ((lambda (e2a94) (if (= e2a94 '1) (apply (lambda (e2a8d@all?) ((letrec ((e2a8f@f (lambda (e2a91@ls) (if (null? e2a91@ls) '() (if (or e2a8d@all? (e2926@library-visible? (car e2a91@ls))) (cons (car e2a91@ls) (e2a8f@f (cdr e2a91@ls))) (e2a8f@f (cdr e2a91@ls))))))) e2a8f@f) ((e28fd@current-library-collection)))) e2a93) (if (= e2a94 '0) (apply (lambda () (e2976@installed-libraries '#f)) e2a93) (error 'apply '"invalid arg count")))) (length e2a93)))) (set! e2978@library-spec (lambda (e2a95@x) (begin (if (not (e290a@library? e2a95@x)) (assertion-violation 'library-spec '"not a library" e2a95@x) (void)) (list (e290e@library-id e2a95@x) (e2910@library-name e2a95@x) (e2912@library-version e2a95@x))))) (begin (set! e2ad3@e2978@library-spec e2978@library-spec) (set! e2ad2@e2976@installed-libraries e2976@installed-libraries) (set! e2ad1@e2974@invoke-library-by-spec e2974@invoke-library-by-spec) (set! e2ad0@e2972@visit-library e2972@visit-library) (set! e2acf@e2970@invoke-library e2970@invoke-library) (set! e2ace@e296e@imported-label->binding e296e@imported-label->binding) (set! e2acd@e296c@install-library e296c@install-library) (set! e2acc@e296a@install-library-record e296a@install-library-record) (set! e2acb@e2968@label->binding-table e2968@label->binding-table) (set! e2aca@e2966@find-library-by-spec/die e2966@find-library-by-spec/die) (set! e2ac9@e2964@library-exists? e2964@library-exists?) (set! e2ac8@e2962@find-library-by-name e2962@find-library-by-name) (set! e2ac7@e2960@find-external-library e2960@find-external-library) (set! e2ac6@e295e@external-pending-libraries e295e@external-pending-libraries) (set! e2ac5@e295c@current-library-expander e295c@current-library-expander) (set! e2ac4@e295a@library-loader e295a@library-loader) (set! e2ac3@e2958@try-load-from-file e2958@try-load-from-file) (set! e2ac2@e2956@current-precompiled-library-loader e2956@current-precompiled-library-loader) (set! e2ac1@e2954@serialize-all e2954@serialize-all) (set! e2ac0@e2952@file-locator e2952@file-locator) (set! e2abf@e2950@library-name->file-name e2950@library-name->file-name) (set! e2abe@e294e@library-extensions e294e@library-extensions) (set! e2abd@e294c@library-path e294c@library-path) (set! e2abc@e294a@find-library-by e294a@find-library-by) (set! e2abb@e2948@find-dependencies e2948@find-dependencies) (set! e2aba@e2946@rp e2946@rp) (set! e2ab9@e2944@set-library-source-file-name! e2944@set-library-source-file-name!) (set! e2ab8@e2942@set-library-visible?! e2942@set-library-visible?!) (set! e2ab7@e2940@set-library-invoke-code! e2940@set-library-invoke-code!) (set! e2ab6@e293e@set-library-visit-code! e293e@set-library-visit-code!) (set! e2ab5@e293c@set-library-invoke-state! e293c@set-library-invoke-state!) (set! e2ab4@e293a@set-library-visit-state! e293a@set-library-visit-state!) (set! e2ab3@e2938@set-library-env! e2938@set-library-env!) (set! e2ab2@e2936@set-library-subst! e2936@set-library-subst!) (set! e2ab1@e2934@set-library-inv*! e2934@set-library-inv*!) (set! e2ab0@e2932@set-library-vis*! e2932@set-library-vis*!) (set! e2aaf@e2930@set-library-imp*! e2930@set-library-imp*!) (set! e2aae@e292e@set-library-version! e292e@set-library-version!) (set! e2aad@e292c@set-library-name! e292c@set-library-name!) (set! e2aac@e292a@set-library-id! e292a@set-library-id!) (set! e2aab@e2928@library-source-file-name e2928@library-source-file-name) (set! e2aaa@e2926@library-visible? e2926@library-visible?) (set! e2aa9@e2924@library-invoke-code e2924@library-invoke-code) (set! e2aa8@e2922@library-visit-code e2922@library-visit-code) (set! e2aa7@e2920@library-invoke-state e2920@library-invoke-state) (set! e2aa6@e291e@library-visit-state e291e@library-visit-state) (set! e2aa5@e291c@library-env e291c@library-env) (set! e2aa4@e291a@library-subst e291a@library-subst) (set! e2aa3@e2918@library-inv* e2918@library-inv*) (set! e2aa2@e2916@library-vis* e2916@library-vis*) (set! e2aa1@e2914@library-imp* e2914@library-imp*) (set! e2aa0@e2912@library-version e2912@library-version) (set! e2a9f@e2910@library-name e2910@library-name) (set! e2a9e@e290e@library-id e290e@library-id) (set! e2a9d@e290c@make-library e290c@make-library) (set! e2a9c@e290a@library? e290a@library?) (set! e2a9b@e2907@e28ff e2907@e28ff) (set! e2a9a@e2905@e2900 e2905@e2900) (set! e2a99@e2903@e28fe e2903@e28fe) (set! e2a98@e28fd@current-library-collection e28fd@current-library-collection) (set! e2a97@e28fb@make-collection e28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e2ad6@build-global-define e2b47@build-lambda e2b49@build-case-lambda e2b4b@build-let e2b79@build-sequence e2b7b@build-void e2b7d@build-letrec e2b7f@build-letrec* e2b81@build-library-letrec* e2b83@build-receive) (begin (set! e2ad6@build-global-define (lambda (e2b84@x) (e2b7b@build-void))) (set! e2b47@build-lambda (lambda (e2b86@ae e2b87@vars e2b88@exp) (list 'lambda e2b87@vars e2b88@exp))) (set! e2b49@build-case-lambda (lambda (e2b8c@ae e2b8d@vars* e2b8e@exp*) ((lambda (e2b93@build-error e2b95@build-pred e2b97@build-apply e2b99@expand-case-lambda) (begin (set! e2b93@build-error (lambda (e2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! e2b95@build-pred (lambda (e2bb2@ae e2bb3@n e2bb4@vars) (call-with-values (lambda () ((letrec ((e2bbc@f (lambda (e2bbe@vars e2bbf@count) (if (pair? e2bbe@vars) (e2bbc@f (cdr e2bbe@vars) (+ e2bbf@count '1)) (if (null? e2bbe@vars) (values e2bbf@count '=) (values e2bbf@count '>=)))))) e2bbc@f) e2bb4@vars '0)) (lambda (e2bc2@e2bb9 e2bc3@e2bbb) ((lambda (e2bc6@pred e2bc7@count) (list (list 'primitive e2bc6@pred) e2bb3@n (list 'quote e2bc7@count))) e2bc3@e2bbb e2bc2@e2bb9))))) (set! e2b97@build-apply (lambda (e2baa@ae e2bab@g e2bac@vars e2bad@exp) (list '(primitive apply) (e2b47@build-lambda e2baa@ae e2bac@vars e2bad@exp) e2bab@g))) (set! e2b99@expand-case-lambda (lambda (e2b9a@ae e2b9b@vars e2b9c@exp*) ((lambda (e2ba0@g e2ba1@n) (list 'lambda e2ba0@g (e2b4b@build-let e2b9a@ae (list e2ba1@n) (list (list '(primitive length) e2ba0@g)) ((letrec ((e2ba4@f (lambda (e2ba6@vars* e2ba7@exp*) (if (null? e2ba6@vars*) (e2b93@build-error e2b9a@ae) (list 'if (e2b95@build-pred e2b9a@ae e2ba1@n (car e2ba6@vars*)) (e2b97@build-apply e2b9a@ae e2ba0@g (car e2ba6@vars*) (car e2ba7@exp*)) (e2ba4@f (cdr e2ba6@vars*) (cdr e2ba7@exp*))))))) e2ba4@f) e2b8d@vars* e2b9c@exp*)))) (gensym) (gensym)))) (if (= (length e2b8e@exp*) '1) (e2b47@build-lambda e2b8c@ae (car e2b8d@vars*) (car e2b8e@exp*)) (e2b99@expand-case-lambda e2b8c@ae e2b8d@vars* e2b8e@exp*)))) '#f '#f '#f '#f))) (set! e2b4b@build-let (lambda (e2bcc@ae e2bcd@lhs* e2bce@rhs* e2bcf@body) (cons (e2b47@build-lambda e2bcc@ae e2bcd@lhs* e2bcf@body) e2bce@rhs*))) (set! e2b79@build-sequence (lambda (e2bd4@ae e2bd5@exps) ((letrec ((e2bd8@loop (lambda (e2bda@exps) (if (null? (cdr e2bda@exps)) (car e2bda@exps) (if (equal? (car e2bda@exps) (e2b7b@build-void)) (e2bd8@loop (cdr e2bda@exps)) (cons 'begin e2bda@exps)))))) e2bd8@loop) e2bd5@exps))) (set! e2b7b@build-void (lambda () '((primitive void)))) (set! e2b7d@build-letrec (lambda (e2bdc@ae e2bdd@vars e2bde@val-exps e2bdf@body-exp) (if (null? e2bdd@vars) e2bdf@body-exp (list 'letrec (map list e2bdd@vars e2bde@val-exps) e2bdf@body-exp)))) (set! e2b7f@build-letrec* (lambda (e2be4@ae e2be5@vars e2be6@val-exps e2be7@body-exp) (if (null? e2be5@vars) e2be7@body-exp (e2b4b@build-let e2be4@ae e2be5@vars (map (lambda (e2bec@x) (list 'quote '#f)) e2be5@vars) (e2b79@build-sequence e2be4@ae (append (map (lambda (e2bee@lhs e2bef@rhs) (list 'set! e2bee@lhs e2bef@rhs)) e2be5@vars e2be6@val-exps) (list e2be7@body-exp))))))) (set! e2b81@build-library-letrec* (lambda (e2bf2@ae e2bf3@name e2bf4@vars e2bf5@locs e2bf6@val-exps e2bf7@body-exp) (list 'library-letrec* e2bf3@name (map list e2bf4@vars e2bf5@locs e2bf6@val-exps) e2bf7@body-exp))) (set! e2b83@build-receive (lambda (e2bfe@ae e2bff@vars e2c00@producer e2c01@body*) (begin (display '"************** in ") (cons 'receive (cons e2bff@vars (cons e2c00@producer e2c01@body*)))))) (begin (set! e2c0f@e2b83@build-receive e2b83@build-receive) (set! e2c0e@e2b81@build-library-letrec* e2b81@build-library-letrec*) (set! e2c0d@e2b7f@build-letrec* e2b7f@build-letrec*) (set! e2c0c@e2b7d@build-letrec e2b7d@build-letrec) (set! e2c0b@e2b7b@build-void e2b7b@build-void) (set! e2c0a@e2b79@build-sequence e2b79@build-sequence) (set! e2c09@e2b4b@build-let e2b4b@build-let) (set! e2c08@e2b49@build-case-lambda e2b49@build-case-lambda) (set! e2c07@e2b47@build-lambda e2b47@build-lambda) (set! e2c06@e2ad6@build-global-define e2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e2c1e@file-options-macro e2c20@set-cons e2c22@set-union e2c27@top-mark* e2c29@top-marked? e2c2b@gen-lexical e2c2d@gen-global e2c2f@gen-label e2c31@gen-top-level-label e2c33@gen-define-label+loc e2c35@gen-define-label e2c3b@e2c36 e2c3d@e2c38 e2c3f@e2c37 e2c42@rib? e2c44@make-rib e2c46@rib-sym* e2c48@rib-mark** e2c4a@rib-label* e2c4c@rib-sealed/freq e2c4e@rib-cache e2c50@set-rib-sym*! e2c52@set-rib-mark**! e2c54@set-rib-label*! e2c56@set-rib-sealed/freq! e2c58@set-rib-cache! e2c5a@make-empty-rib e2c5c@extend-rib! e2c5e@extend-rib/nc! e2c60@make-rib-map e2c62@seal-rib! e2c64@unseal-rib! e2c66@make-full-rib e2c6c@e2c67 e2c6e@e2c69 e2c70@e2c68 e2c73@stx? e2c75@make-stx e2c77@stx-expr e2c79@stx-mark* e2c7b@stx-subst* e2c7d@stx-ae* e2c7f@set-stx-expr! e2c81@set-stx-mark*! e2c83@set-stx-subst*! e2c85@set-stx-ae*! e2c87@rp e2c89@datum->stx e2c8b@gen-mark e2c8d@anti-mark e2c8f@anti-mark? e2c91@join-wraps e2c93@mkstx e2c95@add-mark e2c97@add-subst e2c99@syntax-kind? e2c9b@syntax-vector->list e2c9d@syntax-pair? e2c9f@syntax-vector? e2ca1@syntax-null? e2ca3@syntax-list? e2ca5@syntax-car e2ca7@syntax-cdr e2ca9@syntax->list e2cab@id? e2cad@id->sym e2caf@same-marks? e2cb1@bound-id=? e2cb3@free-id=? e2cb5@valid-bound-ids? e2cb7@distinct-bound-ids? e2cb9@bound-id-member? e2cbb@self-evaluating? e2cbd@strip-annotations e2cbf@strip e2cc1@stx->datum e2cc3@same-marks*? e2cc5@id->label e2cc7@id->real-label e2cc9@label->binding e2ccb@make-binding e2ccd@binding-type e2ccf@binding-value e2cd1@raise-unbound-error e2cd3@syntax-type e2ce1@sanitize-binding e2ce3@make-variable-transformer e2ce5@variable-transformer? e2ce7@variable-transformer-procedure e2ce9@make-eval-transformer e2e3a@parse-define e2e3c@parse-define-syntax e2e3e@scheme-stx-hashtable e2e40@scheme-stx e2e42@lexical-var e2e44@lexical-mutable? e2e46@set-lexical-mutable! e2e48@add-lexical e2e4a@add-lexicals e2e4c@letrec-helper e2e4e@letrec-transformer e2e50@letrec*-transformer e2e52@fluid-let-syntax-transformer e2e54@type-descriptor-transformer e2e56@record-type-descriptor-transformer e2e58@record-constructor-descriptor-transformer e2e5a@when-macro e2e5c@unless-macro e2e5e@if-transformer e2e60@and-transformer e2e62@or-transformer e2e64@case-macro e2e66@quote-transformer e2e68@case-lambda-transformer e2e6a@lambda-transformer e2e6c@bless e2e6e@with-syntax-macro e2e70@invalid-fmls-error e2e72@let-macro e2e74@let-values-macro e2e76@let*-values-macro e2e78@trace-lambda-macro e2e7a@trace-define-macro e2e7c@trace-define-syntax-macro e2e7e@trace-let/rec-syntax e2e80@trace-let-syntax-macro e2e82@trace-letrec-syntax-macro e2e84@guard-macro e2e86@define-enumeration-macro e2e88@time-macro e2e8a@delay-macro e2e8c@assert-macro e2e8e@endianness-macro e2e90@identifier-syntax-macro e2e92@do-macro e2e94@let*-macro e2e96@or-macro e2e98@and-macro e2e9a@cond-macro e2e9c@do-include e2e9e@include-macro e2ea0@include-into-macro e2ea2@syntax-rules-macro e2ea4@quasiquote-macro e2ea6@quasisyntax-macro e2ea8@define-struct-macro e2eaa@define-record-type-macro e2eac@define-condition-type-macro e2eae@incorrect-usage-macro e2eb0@parameterize-macro e2eb2@foreign-call-transformer e2eb4@convert-pattern e2eb6@syntax-dispatch e2eb8@ellipsis? e2eba@underscore? e2ebc@verify-literals e2ebe@syntax-case-transformer e2ec0@ellipsis-map e2ec2@syntax-transformer e2ec4@core-macro-transformer e2ec6@symbol-macro e2ec8@macro-transformer e2eca@local-macro-transformer e2ecc@do-macro-call e2ece@chi-macro e2ed0@chi-local-macro e2ed2@chi-global-macro e2ed4@chi-expr* e2ed6@chi-application e2ed8@chi-expr e2eda@chi-set! e2edc@verify-formals e2ede@chi-lambda-clause e2ee0@chi-lambda-clause* e2ee2@chi-defun e2ee4@chi-rhs e2ee6@expand-interaction-rhs*/init* e2ee8@chi-rhs* e2eea@find-bound=? e2eec@find-dups e2eee@chi-internal e2ef0@parse-module e2ef6@e2ef1 e2ef8@e2ef3 e2efa@e2ef2 e2efd@module-interface? e2eff@make-module-interface e2f01@module-interface-first-mark e2f03@module-interface-exp-id-vec e2f05@module-interface-exp-lab-vec e2f07@set-module-interface-first-mark! e2f09@set-module-interface-exp-id-vec! e2f0b@set-module-interface-exp-lab-vec! e2f0d@module-interface-exp-id* e2f0f@chi-internal-module e2f11@chi-body* e2f13@expand-transformer e2f15@parse-exports e2f17@parse-library-name e2f19@parse-library e2f1b@parse-import-spec* e2f1d@make-top-rib e2f1f@make-collector e2f21@inv-collector e2f23@vis-collector e2f25@imp-collector e2f27@chi-library-internal e2f29@chi-interaction-expr e2f2b@library-body-expander e2f2d@core-library-expander e2f2f@parse-top-level-program e2f31@top-level-expander e2f37@e2f32 e2f39@e2f34 e2f3b@e2f33 e2f3e@env? e2f40@make-env e2f42@env-names e2f44@env-labels e2f46@env-itc e2f48@set-env-names! e2f4a@set-env-labels! e2f4c@set-env-itc! e2f4e@rp e2f54@e2f4f e2f56@e2f51 e2f58@e2f50 e2f5b@interaction-env? e2f5d@make-interaction-env e2f5f@interaction-env-rib e2f61@interaction-env-r e2f63@interaction-env-locs e2f65@set-interaction-env-rib! e2f67@set-interaction-env-r! e2f69@set-interaction-env-locs! e2f6b@rp e2f6d@interaction-environment-symbols e2f6f@environment-bindings e2f71@parse-binding e2f73@environment? e2f75@environment-symbols e2f77@environment e2f79@null-environment e2f7b@scheme-report-environment e2f7d@expand e2f7f@eval e2f81@library-expander e2f83@boot-library-expand e2f85@rev-map-append e2f87@build-exports e2f89@make-export-subst e2f8b@make-export-env/macros e2f8d@generate-temporaries e2f8f@free-identifier=? e2f91@bound-identifier=? e2f93@make-source-condition e2f95@extract-position-condition e2f97@expression-position e2f99@assertion-error e2f9b@syntax-error e2f9d@syntax-violation* e2f9f@syntax-violation e2fa1@identifier? e2fa3@datum->syntax e2fa5@syntax->datum e2fa7@compile-r6rs-top-level e2fa9@pre-compile-r6rs-top-level e2fab@interaction-environment e2fad@top-level-context) (begin (set! e2c1e@file-options-macro (lambda (e2fae@x) ((lambda (e2fb1@valid-option?) (begin (set! e2fb1@valid-option? (lambda (e2fba@x) (and (e2cab@id? e2fba@x) (memq (e2cad@id->sym e2fba@x) '(no-fail no-create no-truncate))))) ((lambda (e2fb2@t) ((lambda (e2fb4@ls/false) (if (and e2fb4@ls/false (apply (lambda (e2fb6@opt*) (for-all e2fb1@valid-option? e2fb6@opt*)) e2fb4@ls/false)) (apply (lambda (e2fb8@opt*) (e2e6c@bless (list 'make-file-options (list 'quote e2fb8@opt*)))) e2fb4@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e2fb2@t))) (e2eb6@syntax-dispatch e2fb2@t '(_ . each-any)))) e2fae@x))) '#f))) (set! e2c20@set-cons (lambda (e2fbc@x e2fbd@ls) (if (memq e2fbc@x e2fbd@ls) e2fbd@ls (cons e2fbc@x e2fbd@ls)))) (set! e2c22@set-union (lambda (e2fc0@ls1 e2fc1@ls2) (if (null? e2fc0@ls1) e2fc1@ls2 (if (memq (car e2fc0@ls1) e2fc1@ls2) (e2c22@set-union (cdr e2fc0@ls1) e2fc1@ls2) (cons (car e2fc0@ls1) (e2c22@set-union (cdr e2fc0@ls1) e2fc1@ls2)))))) (set! e2c27@top-mark* '(top)) (set! e2c29@top-marked? (lambda (e2fc4@m*) (memq 'top e2fc4@m*))) (set! e2c2b@gen-lexical (lambda (e2fc6@sym) (if (symbol? e2fc6@sym) (gensym e2fc6@sym) (if (e2c73@stx? e2fc6@sym) (e2c2b@gen-lexical (e2cad@id->sym e2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" e2fc6@sym))))) (set! e2c2d@gen-global (lambda (e2fc8@x) (e2c2b@gen-lexical e2fc8@x))) (set! e2c2f@gen-label (lambda (e2fca@_) (gensym))) (set! e2c31@gen-top-level-label (lambda (e2fcc@id e2fcd@rib) ((lambda (e2fd1@find) (begin (set! e2fd1@find (lambda (e2fdc@sym e2fdd@mark* e2fde@sym* e2fdf@mark** e2fe0@label*) (and (pair? e2fde@sym*) (if (and (eq? e2fdc@sym (car e2fde@sym*)) (e2caf@same-marks? e2fdd@mark* (car e2fdf@mark**))) (car e2fe0@label*) (e2fd1@find e2fdc@sym e2fdd@mark* (cdr e2fde@sym*) (cdr e2fdf@mark**) (cdr e2fe0@label*)))))) ((lambda (e2fd2@sym e2fd3@mark*) ((lambda (e2fd6@sym*) ((lambda (e2fd8@t) (if e2fd8@t ((lambda (e2fda@label) (if (e2ace@e296e@imported-label->binding e2fda@label) (gensym) e2fda@label)) e2fd8@t) (gensym))) (and (memq e2fd2@sym (e2c46@rib-sym* e2fcd@rib)) (e2fd1@find e2fd2@sym e2fd3@mark* e2fd6@sym* (e2c48@rib-mark** e2fcd@rib) (e2c4a@rib-label* e2fcd@rib))))) (e2c46@rib-sym* e2fcd@rib))) (e2cad@id->sym e2fcc@id) (e2c79@stx-mark* e2fcc@id)))) '#f))) (set! e2c33@gen-define-label+loc (lambda (e2fe6@id e2fe7@rib) ((lambda (e2fea@t) (if e2fea@t ((lambda (e2fec@env) ((lambda (e2fee@label e2fef@locs) (values e2fee@label ((lambda (e2ff2@t) (if e2ff2@t (cdr e2ff2@t) ((lambda (e2ff4@loc) (begin (e2f69@set-interaction-env-locs! e2fec@env (cons (cons e2fee@label e2ff4@loc) e2fef@locs)) e2ff4@loc)) (e2c2b@gen-lexical e2fe6@id)))) (assq e2fee@label e2fef@locs)))) (e2c31@gen-top-level-label e2fe6@id e2fe7@rib) (e2f63@interaction-env-locs e2fec@env))) e2fea@t) (values (gensym) (e2c2b@gen-lexical e2fe6@id)))) (e2fad@top-level-context)))) (set! e2c35@gen-define-label (lambda (e2ff6@id e2ff7@rib) (if (e2fad@top-level-context) (e2c31@gen-top-level-label e2ff6@id e2ff7@rib) (gensym)))) (set! e2c3b@e2c36 (make-record-type-descriptor 'rib '#f 'e2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! e2c3d@e2c38 '#f) (set! e2c3f@e2c37 (make-record-constructor-descriptor e2c3b@e2c36 '#f e2c3d@e2c38)) (set! e2c42@rib? (record-predicate e2c3b@e2c36)) (set! e2c44@make-rib (record-constructor e2c3f@e2c37)) (set! e2c46@rib-sym* (record-accessor e2c3b@e2c36 '0)) (set! e2c48@rib-mark** (record-accessor e2c3b@e2c36 '1)) (set! e2c4a@rib-label* (record-accessor e2c3b@e2c36 '2)) (set! e2c4c@rib-sealed/freq (record-accessor e2c3b@e2c36 '3)) (set! e2c4e@rib-cache (record-accessor e2c3b@e2c36 '4)) (set! e2c50@set-rib-sym*! (record-mutator e2c3b@e2c36 '0)) (set! e2c52@set-rib-mark**! (record-mutator e2c3b@e2c36 '1)) (set! e2c54@set-rib-label*! (record-mutator e2c3b@e2c36 '2)) (set! e2c56@set-rib-sealed/freq! (record-mutator e2c3b@e2c36 '3)) (set! e2c58@set-rib-cache! (record-mutator e2c3b@e2c36 '4)) (set! e2c5a@make-empty-rib (lambda () (e2c44@make-rib '() '() '() '#f '#f))) (set! e2c5c@extend-rib! (lambda (e2ffa@rib e2ffb@id e2ffc@label) ((lambda (e3001@find) (begin (set! e3001@find (lambda (e300e@sym e300f@mark* e3010@sym* e3011@mark** e3012@label*) (and (pair? e3010@sym*) (if (and (eq? e300e@sym (car e3010@sym*)) (e2caf@same-marks? e300f@mark* (car e3011@mark**))) e3012@label* (e3001@find e300e@sym e300f@mark* (cdr e3010@sym*) (cdr e3011@mark**) (cdr e3012@label*)))))) (begin (if (e2c4c@rib-sealed/freq e2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" e2ffa@rib) (void)) ((lambda (e3002@sym e3003@mark*) ((lambda (e3006@sym*) ((lambda (e3008@t) (if e3008@t ((lambda (e300a@p) (if (not (eq? e2ffc@label (car e300a@p))) (if (e2fad@top-level-context) (set-car! e300a@p e2ffc@label) (e2f9f@syntax-violation '#f '"multiple definitions of identifier" e2ffb@id)) (void))) e3008@t) (begin (if (e2c4e@rib-cache e2ffa@rib) (hashtable-update! (e2c4e@rib-cache e2ffa@rib) e3002@sym (lambda (e300c@e) (cons (cons e3003@mark* e2ffc@label) e300c@e)) '()) (void)) (e2c50@set-rib-sym*! e2ffa@rib (cons e3002@sym e3006@sym*)) (e2c52@set-rib-mark**! e2ffa@rib (cons e3003@mark* (e2c48@rib-mark** e2ffa@rib))) (e2c54@set-rib-label*! e2ffa@rib (cons e2ffc@label (e2c4a@rib-label* e2ffa@rib)))))) (and (memq e3002@sym (e2c46@rib-sym* e2ffa@rib)) (e3001@find e3002@sym e3003@mark* e3006@sym* (e2c48@rib-mark** e2ffa@rib) (e2c4a@rib-label* e2ffa@rib))))) (e2c46@rib-sym* e2ffa@rib))) (e2cad@id->sym e2ffb@id) (e2c79@stx-mark* e2ffb@id))))) '#f))) (set! e2c5e@extend-rib/nc! (lambda (e3018@rib e3019@id e301a@label) ((lambda (e301e@sym e301f@mark*) ((lambda (e3022@sym*) (begin (if (e2c4e@rib-cache e3018@rib) (hashtable-update! (e2c4e@rib-cache e3018@rib) e301e@sym (lambda (e3024@e) (cons (cons e301f@mark* e301a@label) e3024@e)) '()) (void)) (e2c50@set-rib-sym*! e3018@rib (cons e301e@sym e3022@sym*)) (e2c52@set-rib-mark**! e3018@rib (cons e301f@mark* (e2c48@rib-mark** e3018@rib))) (e2c54@set-rib-label*! e3018@rib (cons e301a@label (e2c4a@rib-label* e3018@rib))))) (e2c46@rib-sym* e3018@rib))) (e2cad@id->sym e3019@id) (e2c79@stx-mark* e3019@id)))) (set! e2c60@make-rib-map (lambda (e3026@sym*) ((lambda (e3028@ht) ((letrec ((e302a@f (lambda (e302c@i e302d@sym*) (if (null? e302d@sym*) e3028@ht (begin (hashtable-update! e3028@ht (car e302d@sym*) (lambda (e3030@x) (cons e302c@i e3030@x)) '()) (e302a@f (+ e302c@i '1) (cdr e302d@sym*))))))) e302a@f) '0 e3026@sym*)) (make-eq-hashtable)))) (set! e2c62@seal-rib! (lambda (e3032@rib) ((lambda (e3034@sym*) (if (not (null? e3034@sym*)) (begin (e2c50@set-rib-sym*! e3032@rib (list->vector e3034@sym*)) (e2c52@set-rib-mark**! e3032@rib (list->vector (e2c48@rib-mark** e3032@rib))) (e2c54@set-rib-label*! e3032@rib (list->vector (e2c4a@rib-label* e3032@rib))) (e2c56@set-rib-sealed/freq! e3032@rib (e2c60@make-rib-map e3034@sym*))) (void))) (e2c46@rib-sym* e3032@rib)))) (set! e2c64@unseal-rib! (lambda (e3036@rib) (if (e2c4c@rib-sealed/freq e3036@rib) (begin (e2c56@set-rib-sealed/freq! e3036@rib '#f) (e2c50@set-rib-sym*! e3036@rib (vector->list (e2c46@rib-sym* e3036@rib))) (e2c52@set-rib-mark**! e3036@rib (vector->list (e2c48@rib-mark** e3036@rib))) (e2c54@set-rib-label*! e3036@rib (vector->list (e2c4a@rib-label* e3036@rib)))) (void)))) (set! e2c66@make-full-rib (lambda (e3038@id* e3039@label*) ((lambda (e303c@r) (begin (e2c62@seal-rib! e303c@r) e303c@r)) (e2c44@make-rib (map e2cad@id->sym e3038@id*) (map e2c79@stx-mark* e3038@id*) e3039@label* '#f '#f)))) (set! e2c6c@e2c67 (make-record-type-descriptor 'stx '#f 'e2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! e2c6e@e2c69 '#f) (set! e2c70@e2c68 (make-record-constructor-descriptor e2c6c@e2c67 '#f e2c6e@e2c69)) (set! e2c73@stx? (record-predicate e2c6c@e2c67)) (set! e2c75@make-stx (record-constructor e2c70@e2c68)) (set! e2c77@stx-expr (record-accessor e2c6c@e2c67 '0)) (set! e2c79@stx-mark* (record-accessor e2c6c@e2c67 '1)) (set! e2c7b@stx-subst* (record-accessor e2c6c@e2c67 '2)) (set! e2c7d@stx-ae* (record-accessor e2c6c@e2c67 '3)) (set! e2c7f@set-stx-expr! (record-mutator e2c6c@e2c67 '0)) (set! e2c81@set-stx-mark*! (record-mutator e2c6c@e2c67 '1)) (set! e2c83@set-stx-subst*! (record-mutator e2c6c@e2c67 '2)) (set! e2c85@set-stx-ae*! (record-mutator e2c6c@e2c67 '3)) (set! e2c87@rp (e2852@e2779@make-record-printer 'stx (lambda (e303e@x e303f@p e3040@wr) (begin (display '"#<syntax " e303f@p) (write (e2cc1@stx->datum e303e@x) e303f@p) ((lambda (e3044@expr) (if (e284a@e2769@annotation? e3044@expr) ((lambda (e3046@src) (if (pair? e3046@src) (begin (display '" [" e303f@p) (display (cdr e3046@src) e303f@p) (display '" of " e303f@p) (display (car e3046@src) e303f@p) (display '"]" e303f@p)) (void))) (e284b@e276b@annotation-source e3044@expr)) (void))) (e2c77@stx-expr e303e@x)) (display '">" e303f@p))))) (set! e2c89@datum->stx (lambda (e3048@id e3049@datum) (e2c75@make-stx e3049@datum (e2c79@stx-mark* e3048@id) (e2c7b@stx-subst* e3048@id) (e2c7d@stx-ae* e3048@id)))) (set! e2c8b@gen-mark (lambda () (string '#\m))) (set! e2c8d@anti-mark '#f) (set! e2c8f@anti-mark? not) (set! e2c91@join-wraps (lambda (e304c@m1* e304d@s1* e304e@ae1* e304f@e) ((lambda (e3055@cancel) (begin (set! e3055@cancel (lambda (e305c@ls1 e305d@ls2) ((letrec ((e3060@f (lambda (e3062@x e3063@ls1) (if (null? e3063@ls1) (cdr e305d@ls2) (cons e3062@x (e3060@f (car e3063@ls1) (cdr e3063@ls1))))))) e3060@f) (car e305c@ls1) (cdr e305c@ls1)))) ((lambda (e3056@m2* e3057@s2* e3058@ae2*) (if (and (not (null? e304c@m1*)) (not (null? e3056@m2*)) (e2c8f@anti-mark? (car e3056@m2*))) (values (e3055@cancel e304c@m1* e3056@m2*) (e3055@cancel e304d@s1* e3057@s2*) (e3055@cancel e304e@ae1* e3058@ae2*)) (values (append e304c@m1* e3056@m2*) (append e304d@s1* e3057@s2*) (append e304e@ae1* e3058@ae2*)))) (e2c79@stx-mark* e304f@e) (e2c7b@stx-subst* e304f@e) (e2c7d@stx-ae* e304f@e)))) '#f))) (set! e2c93@mkstx (lambda (e3066@e e3067@m* e3068@s* e3069@ae*) (if (and (e2c73@stx? e3066@e) (not (e2c29@top-marked? e3067@m*))) (call-with-values (lambda () (e2c91@join-wraps e3067@m* e3068@s* e3069@ae* e3066@e)) (lambda (e3074@e306f e3075@e3071 e3076@e3073) ((lambda (e307a@ae* e307b@s* e307c@m*) (e2c75@make-stx (e2c77@stx-expr e3066@e) e307c@m* e307b@s* e307a@ae*)) e3076@e3073 e3075@e3071 e3074@e306f))) (e2c75@make-stx e3066@e e3067@m* e3068@s* e3069@ae*)))) (set! e2c95@add-mark (lambda (e3080@m e3081@e e3082@ae) (e2c93@mkstx e3081@e (list e3080@m) '(shift) (list e3082@ae)))) (set! e2c97@add-subst (lambda (e3086@subst e3087@e) (e2c93@mkstx e3087@e '() (list e3086@subst) '()))) (set! e2c99@syntax-kind? (lambda (e308a@x e308b@p?) (if (e2c73@stx? e308a@x) (e2c99@syntax-kind? (e2c77@stx-expr e308a@x) e308b@p?) (if (e284a@e2769@annotation? e308a@x) (e2c99@syntax-kind? (e284c@e276d@annotation-expression e308a@x) e308b@p?) (e308b@p? e308a@x))))) (set! e2c9b@syntax-vector->list (lambda (e308e@x) (if (e2c73@stx? e308e@x) ((lambda (e3090@ls e3091@m* e3092@s* e3093@ae*) (map (lambda (e3098@x) (e2c93@mkstx e3098@x e3091@m* e3092@s* e3093@ae*)) e3090@ls)) (e2c9b@syntax-vector->list (e2c77@stx-expr e308e@x)) (e2c79@stx-mark* e308e@x) (e2c7b@stx-subst* e308e@x) (e2c7d@stx-ae* e308e@x)) (if (e284a@e2769@annotation? e308e@x) (e2c9b@syntax-vector->list (e284c@e276d@annotation-expression e308e@x)) (if (vector? e308e@x) (vector->list e308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" e308e@x)))))) (set! e2c9d@syntax-pair? (lambda (e309a@x) (e2c99@syntax-kind? e309a@x pair?))) (set! e2c9f@syntax-vector? (lambda (e309c@x) (e2c99@syntax-kind? e309c@x vector?))) (set! e2ca1@syntax-null? (lambda (e309e@x) (e2c99@syntax-kind? e309e@x null?))) (set! e2ca3@syntax-list? (lambda (e30a0@x) (or (e2ca1@syntax-null? e30a0@x) (and (e2c9d@syntax-pair? e30a0@x) (e2ca3@syntax-list? (e2ca7@syntax-cdr e30a0@x)))))) (set! e2ca5@syntax-car (lambda (e30a2@x) (if (e2c73@stx? e30a2@x) (e2c93@mkstx (e2ca5@syntax-car (e2c77@stx-expr e30a2@x)) (e2c79@stx-mark* e30a2@x) (e2c7b@stx-subst* e30a2@x) (e2c7d@stx-ae* e30a2@x)) (if (e284a@e2769@annotation? e30a2@x) (e2ca5@syntax-car (e284c@e276d@annotation-expression e30a2@x)) (if (pair? e30a2@x) (car e30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" e30a2@x)))))) (set! e2ca7@syntax-cdr (lambda (e30a4@x) (if (e2c73@stx? e30a4@x) (e2c93@mkstx (e2ca7@syntax-cdr (e2c77@stx-expr e30a4@x)) (e2c79@stx-mark* e30a4@x) (e2c7b@stx-subst* e30a4@x) (e2c7d@stx-ae* e30a4@x)) (if (e284a@e2769@annotation? e30a4@x) (e2ca7@syntax-cdr (e284c@e276d@annotation-expression e30a4@x)) (if (pair? e30a4@x) (cdr e30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" e30a4@x)))))) (set! e2ca9@syntax->list (lambda (e30a6@x) (if (e2c9d@syntax-pair? e30a6@x) (cons (e2ca5@syntax-car e30a6@x) (e2ca9@syntax->list (e2ca7@syntax-cdr e30a6@x))) (if (e2ca1@syntax-null? e30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" e30a6@x))))) (set! e2cab@id? (lambda (e30a8@x) (and (e2c73@stx? e30a8@x) ((lambda (e30aa@expr) (symbol? (if (e284a@e2769@annotation? e30aa@expr) (e2849@e2767@annotation-stripped e30aa@expr) e30aa@expr))) (e2c77@stx-expr e30a8@x))))) (set! e2cad@id->sym (lambda (e30ac@x) (begin (if (not (e2c73@stx? e30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" e30ac@x) (void)) ((lambda (e30ae@expr) ((lambda (e30b0@sym) (if (symbol? e30b0@sym) e30b0@sym (error 'id->sym '"BUG in ikarus: not an id" e30ac@x))) (if (e284a@e2769@annotation? e30ae@expr) (e2849@e2767@annotation-stripped e30ae@expr) e30ae@expr))) (e2c77@stx-expr e30ac@x))))) (set! e2caf@same-marks? (lambda (e30b2@x e30b3@y) (or (and (null? e30b2@x) (null? e30b3@y)) (and (pair? e30b2@x) (pair? e30b3@y) (eq? (car e30b2@x) (car e30b3@y)) (e2caf@same-marks? (cdr e30b2@x) (cdr e30b3@y)))))) (set! e2cb1@bound-id=? (lambda (e30b6@x e30b7@y) (and (eq? (e2cad@id->sym e30b6@x) (e2cad@id->sym e30b7@y)) (e2caf@same-marks? (e2c79@stx-mark* e30b6@x) (e2c79@stx-mark* e30b7@y))))) (set! e2cb3@free-id=? (lambda (e30ba@i e30bb@j) ((lambda (e30be@t0 e30bf@t1) (if (or e30be@t0 e30bf@t1) (eq? e30be@t0 e30bf@t1) (eq? (e2cad@id->sym e30ba@i) (e2cad@id->sym e30bb@j)))) (e2cc7@id->real-label e30ba@i) (e2cc7@id->real-label e30bb@j)))) (set! e2cb5@valid-bound-ids? (lambda (e30c2@id*) (and (for-all e2cab@id? e30c2@id*) (e2cb7@distinct-bound-ids? e30c2@id*)))) (set! e2cb7@distinct-bound-ids? (lambda (e30c4@id*) (or (null? e30c4@id*) (and (not (e2cb9@bound-id-member? (car e30c4@id*) (cdr e30c4@id*))) (e2cb7@distinct-bound-ids? (cdr e30c4@id*)))))) (set! e2cb9@bound-id-member? (lambda (e30c6@id e30c7@id*) (and (pair? e30c7@id*) (or (e2cb1@bound-id=? e30c6@id (car e30c7@id*)) (e2cb9@bound-id-member? e30c6@id (cdr e30c7@id*)))))) (set! e2cbb@self-evaluating? (lambda (e30ca@x) (or (number? e30ca@x) (string? e30ca@x) (char? e30ca@x) (boolean? e30ca@x) (regexp? e30ca@x) (bytevector? e30ca@x)))) (set! e2cbd@strip-annotations (lambda (e30cc@x) (if (pair? e30cc@x) (cons (e2cbd@strip-annotations (car e30cc@x)) (e2cbd@strip-annotations (cdr e30cc@x))) (if (vector? e30cc@x) (vector-map e2cbd@strip-annotations e30cc@x) (if (e284a@e2769@annotation? e30cc@x) (e2849@e2767@annotation-stripped e30cc@x) e30cc@x))))) (set! e2cbf@strip (lambda (e30ce@x e30cf@m*) (if (e2c29@top-marked? e30cf@m*) (if (or (e284a@e2769@annotation? e30ce@x) (and (pair? e30ce@x) (e284a@e2769@annotation? (car e30ce@x))) (and (vector? e30ce@x) (> (vector-length e30ce@x) '0) (e284a@e2769@annotation? (vector-ref e30ce@x '0)))) (e2cbd@strip-annotations e30ce@x) e30ce@x) ((letrec ((e30d2@f (lambda (e30d4@x) (if (e2c73@stx? e30d4@x) (e2cbf@strip (e2c77@stx-expr e30d4@x) (e2c79@stx-mark* e30d4@x)) (if (e284a@e2769@annotation? e30d4@x) (e2849@e2767@annotation-stripped e30d4@x) (if (pair? e30d4@x) ((lambda (e30d6@a e30d7@d) (if (and (eq? e30d6@a (car e30d4@x)) (eq? e30d7@d (cdr e30d4@x))) e30d4@x (cons e30d6@a e30d7@d))) (e30d2@f (car e30d4@x)) (e30d2@f (cdr e30d4@x))) (if (vector? e30d4@x) ((lambda (e30da@old) ((lambda (e30dc@new) (if (for-all eq? e30da@old e30dc@new) e30d4@x (list->vector e30dc@new))) (map e30d2@f e30da@old))) (vector->list e30d4@x)) e30d4@x))))))) e30d2@f) e30ce@x)))) (set! e2cc1@stx->datum (lambda (e30de@x) (e2cbf@strip e30de@x '()))) (set! e2cc3@same-marks*? (lambda (e30e0@mark* e30e1@mark** e30e2@si) (if (null? e30e2@si) '#f (if (e2caf@same-marks? e30e0@mark* (vector-ref e30e1@mark** (car e30e2@si))) (car e30e2@si) (e2cc3@same-marks*? e30e0@mark* e30e1@mark** (cdr e30e2@si)))))) (set! e2cc5@id->label (lambda (e30e6@id) (or (e2cc7@id->real-label e30e6@id) ((lambda (e30e8@t) (if e30e8@t ((lambda (e30ea@env) ((lambda (e30ec@rib) (call-with-values (lambda () (e2c33@gen-define-label+loc e30e6@id e30ec@rib)) (lambda (e30f2@e30ef e30f3@e30f1) ((lambda (e30f6@loc_ e30f7@lab) (begin (e2c5c@extend-rib! e30ec@rib e30e6@id e30f7@lab) e30f7@lab)) e30f3@e30f1 e30f2@e30ef)))) (e2f5f@interaction-env-rib e30ea@env))) e30e8@t) '#f)) (e2fad@top-level-context))))) (set! e2cc7@id->real-label (lambda (e30fa@id) ((lambda (e30fc@sym) ((letrec ((e30fe@search (lambda (e3100@subst* e3101@mark*) (if (null? e3100@subst*) '#f (if (eq? (car e3100@subst*) 'shift) (e30fe@search (cdr e3100@subst*) (cdr e3101@mark*)) ((lambda (e3104@rib) ((lambda (e3106@t) (if e3106@t ((lambda (e3108@ht) ((lambda (e310a@si) ((lambda (e310c@i) (if e310c@i (vector-ref (e2c4a@rib-label* e3104@rib) e310c@i) (e30fe@search (cdr e3100@subst*) e3101@mark*))) (and e310a@si (e2cc3@same-marks*? e3101@mark* (e2c48@rib-mark** e3104@rib) (reverse e310a@si))))) (hashtable-ref e3108@ht e30fc@sym '#f))) e3106@t) ((letrec ((e310e@f (lambda (e3110@sym* e3111@mark** e3112@label*) (if (null? e3110@sym*) (e30fe@search (cdr e3100@subst*) e3101@mark*) (if (and (eq? (car e3110@sym*) e30fc@sym) (e2caf@same-marks? (car e3111@mark**) e3101@mark*)) (car e3112@label*) (e310e@f (cdr e3110@sym*) (cdr e3111@mark**) (cdr e3112@label*))))))) e310e@f) (e2c46@rib-sym* e3104@rib) (e2c48@rib-mark** e3104@rib) (e2c4a@rib-label* e3104@rib)))) (e2c4c@rib-sealed/freq e3104@rib))) (car e3100@subst*))))))) e30fe@search) (e2c7b@stx-subst* e30fa@id) (e2c79@stx-mark* e30fa@id))) (e2cad@id->sym e30fa@id)))) (set! e2cc9@label->binding (lambda (e3116@x e3117@r) ((lambda (e311a@t) (if e311a@t ((lambda (e311c@b) (if (and (pair? e311c@b) (eq? (car e311c@b) '$core-rtd)) (cons '$rtd (map e2e6c@bless (cdr e311c@b))) (if (and (pair? e311c@b) (eq? (car e311c@b) 'global-rtd)) ((lambda (e311e@lib e311f@loc) (cons '$rtd (symbol-value e311f@loc))) (cadr e311c@b) (cddr e311c@b)) e311c@b))) e311a@t) ((lambda (e3122@t) (if e3122@t (cdr e3122@t) ((lambda (e3124@t) (if e3124@t ((lambda (e3126@env) ((lambda (e3128@t) (if e3128@t ((lambda (e312a@p) (cons* 'lexical (cdr e312a@p) '#f)) e3128@t) '(displaced-lexical . #f))) (assq e3116@x (e2f63@interaction-env-locs e3126@env)))) e3124@t) '(displaced-lexical . #f))) (e2fad@top-level-context)))) (assq e3116@x e3117@r)))) (e2ace@e296e@imported-label->binding e3116@x)))) (set! e2ccb@make-binding cons) (set! e2ccd@binding-type car) (set! e2ccf@binding-value cdr) (set! e2cd1@raise-unbound-error (lambda (e312c@id) (e2f9d@syntax-violation* '#f '"unbound identifier" e312c@id (e4cdc@e4b22@make-undefined-violation)))) (set! e2cd3@syntax-type (lambda (e312e@e e312f@r) (if (e2cab@id? e312e@e) ((lambda (e3132@id) ((lambda (e3134@label) ((lambda (e3136@b) ((lambda (e3138@type) ((lambda () (begin (if (not e3134@label) (e2cd1@raise-unbound-error e3132@id) (void)) ((lambda (e313a@t) (if (memv e313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values e3138@type (e2ccf@binding-value e3136@b) e3132@id) (values 'other '#f '#f))) e3138@type))))) (e2ccd@binding-type e3136@b))) (e2cc9@label->binding e3134@label e312f@r))) (e2cc5@id->label e3132@id))) e312e@e) (if (e2c9d@syntax-pair? e312e@e) ((lambda (e313c@id) (if (e2cab@id? e313c@id) ((lambda (e313e@label) ((lambda (e3140@b) ((lambda (e3142@type) ((lambda () (begin (if (not e313e@label) (e2cd1@raise-unbound-error e313c@id) (void)) ((lambda (e3144@t) (if (memv e3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values e3142@type (e2ccf@binding-value e3140@b) e313c@id) (values 'call '#f '#f))) e3142@type))))) (e2ccd@binding-type e3140@b))) (e2cc9@label->binding e313e@label e312f@r))) (e2cc5@id->label e313c@id)) (values 'call '#f '#f))) (e2ca5@syntax-car e312e@e)) ((lambda (e3146@d) (if (e2cbb@self-evaluating? e3146@d) (values 'constant e3146@d '#f) (values 'other '#f '#f))) (e2cc1@stx->datum e312e@e)))))) (set! e2ce1@sanitize-binding (lambda (e3148@x e3149@src) (if (procedure? e3148@x) (cons* 'local-macro e3148@x e3149@src) (if (and (pair? e3148@x) (eq? (car e3148@x) 'macro!) (procedure? (cdr e3148@x))) (cons* 'local-macro! (cdr e3148@x) e3149@src) (if (and (pair? e3148@x) (eq? (car e3148@x) '$rtd)) e3148@x (assertion-violation 'expand '"invalid transformer" e3148@x)))))) (set! e2ce3@make-variable-transformer (lambda (e314c@x) (if (procedure? e314c@x) (cons 'macro! e314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" e314c@x)))) (set! e2ce5@variable-transformer? (lambda (e314e@x) (and (pair? e314e@x) (eq? (car e314e@x) 'macro!) (procedure? (cdr e314e@x))))) (set! e2ce7@variable-transformer-procedure (lambda (e3150@x) (if (e2ce5@variable-transformer? e3150@x) (cdr e3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" e3150@x)))) (set! e2ce9@make-eval-transformer (lambda (e3152@x) (e2ce1@sanitize-binding (eval-core (e28a9@e2861@expanded->core e3152@x)) e3152@x))) (set! e2e3a@parse-define (lambda (e3154@x) ((lambda (e3156@t) ((lambda (e3158@ls/false) (if (and e3158@ls/false (apply (lambda (e315a@id e315b@fmls e315c@b e315d@b*) (e2cab@id? e315a@id)) e3158@ls/false)) (apply (lambda (e3162@id e3163@fmls e3164@b e3165@b*) (begin (e2edc@verify-formals e3163@fmls e3154@x) (values e3162@id (cons 'defun (cons e3163@fmls (cons e3164@b e3165@b*)))))) e3158@ls/false) ((lambda (e316a@t) ((lambda (e316c@ls/false) (if (and e316c@ls/false (apply (lambda (e316e@id e316f@val) (e2cab@id? e316e@id)) e316c@ls/false)) (apply (lambda (e3172@id e3173@val) (values e3172@id (cons 'expr e3173@val))) e316c@ls/false) ((lambda (e3176@t) ((lambda (e3178@ls/false) (if (and e3178@ls/false (apply (lambda (e317a@id) (e2cab@id? e317a@id)) e3178@ls/false)) (apply (lambda (e317c@id) (values e317c@id (cons 'expr (e2e6c@bless '(void))))) e3178@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3176@t))) (e2eb6@syntax-dispatch e3176@t '(_ any)))) e316a@t))) (e2eb6@syntax-dispatch e316a@t '(_ any any)))) e3156@t))) (e2eb6@syntax-dispatch e3156@t '(_ (any . any) any . each-any)))) e3154@x))) (set! e2e3c@parse-define-syntax (lambda (e317e@x) ((lambda (e3180@t) ((lambda (e3182@ls/false) (if (and e3182@ls/false (apply (lambda (e3184@id e3185@val) (e2cab@id? e3184@id)) e3182@ls/false)) (apply (lambda (e3188@id e3189@val) (values e3188@id e3189@val)) e3182@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3180@t))) (e2eb6@syntax-dispatch e3180@t '(_ any any)))) e317e@x))) (set! e2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! e2e40@scheme-stx (lambda (e318c@sym) (or (hashtable-ref e2e3e@scheme-stx-hashtable e318c@sym '#f) ((lambda (e318e@subst) ((lambda (e3190@stx) ((lambda (e3192@stx) ((lambda () (begin (hashtable-set! e2e3e@scheme-stx-hashtable e318c@sym e3192@stx) e3192@stx)))) ((lambda (e3194@t) (if e3194@t ((lambda (e3196@x) ((lambda (e3198@name e3199@label) (e2c97@add-subst (e2c44@make-rib (list e3198@name) (list e2c27@top-mark*) (list e3199@label) '#f '#f) e3190@stx)) (car e3196@x) (cdr e3196@x))) e3194@t) e3190@stx)) (assq e318c@sym e318e@subst)))) (e2c75@make-stx e318c@sym e2c27@top-mark* '() '()))) (e2aa4@e291a@library-subst (e2ac8@e2962@find-library-by-name '(psyntax system $all))))))) (set! e2e42@lexical-var car) (set! e2e44@lexical-mutable? cdr) (set! e2e46@set-lexical-mutable! set-cdr!) (set! e2e48@add-lexical (lambda (e319c@lab e319d@lex e319e@r) (cons (cons* e319c@lab 'lexical e319d@lex '#f) e319e@r))) (set! e2e4a@add-lexicals (lambda (e31a2@lab* e31a3@lex* e31a4@r) (if (null? e31a2@lab*) e31a4@r (e2e4a@add-lexicals (cdr e31a2@lab*) (cdr e31a3@lex*) (e2e48@add-lexical (car e31a2@lab*) (car e31a3@lex*) e31a4@r))))) (set! e2e4c@letrec-helper (lambda (e31a8@e e31a9@r e31aa@mr e31ab@build) ((lambda (e31b0@t) ((lambda (e31b2@ls/false) (if e31b2@ls/false (apply (lambda (e31b4@lhs* e31b5@rhs* e31b6@b e31b7@b*) (if (not (e2cb5@valid-bound-ids? e31b4@lhs*)) (e2e70@invalid-fmls-error e31a8@e e31b4@lhs*) ((lambda (e31bc@lex* e31bd@lab*) ((lambda (e31c0@rib e31c1@r) ((lambda (e31c4@body e31c5@rhs*) (e31ab@build '#f e31bc@lex* e31c5@rhs* e31c4@body)) (e2eee@chi-internal (e2c97@add-subst e31c0@rib (cons e31b6@b e31b7@b*)) e31c1@r e31aa@mr) (e2ed4@chi-expr* (map (lambda (e31c8@x) (e2c97@add-subst e31c0@rib e31c8@x)) e31b5@rhs*) e31c1@r e31aa@mr))) (e2c66@make-full-rib e31b4@lhs* e31bd@lab*) (e2e4a@add-lexicals e31bd@lab* e31bc@lex* e31a9@r))) (map e2c2b@gen-lexical e31b4@lhs*) (map e2c2f@gen-label e31b4@lhs*)))) e31b2@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e31b0@t))) (e2eb6@syntax-dispatch e31b0@t '(_ #(each (any any)) any . each-any)))) e31a8@e))) (set! e2e4e@letrec-transformer (lambda (e31ca@e e31cb@r e31cc@mr) (e2e4c@letrec-helper e31ca@e e31cb@r e31cc@mr e2c0c@e2b7d@build-letrec))) (set! e2e50@letrec*-transformer (lambda (e31d0@e e31d1@r e31d2@mr) (e2e4c@letrec-helper e31d0@e e31d1@r e31d2@mr e2c0d@e2b7f@build-letrec*))) (set! e2e52@fluid-let-syntax-transformer (lambda (e31d6@e e31d7@r e31d8@mr) ((lambda (e31dd@lookup) (begin (set! e31dd@lookup (lambda (e31f0@x) (or (e2cc5@id->label e31f0@x) (e2f9f@syntax-violation '#f '"unbound identifier" e31d6@e e31f0@x)))) ((lambda (e31de@t) ((lambda (e31e0@ls/false) (if e31e0@ls/false (apply (lambda (e31e2@lhs* e31e3@rhs* e31e4@b e31e5@b*) (if (not (e2cb5@valid-bound-ids? e31e2@lhs*)) (e2e70@invalid-fmls-error e31d6@e e31e2@lhs*) ((lambda (e31ea@lab* e31eb@rhs*) (e2eee@chi-internal (cons e31e4@b e31e5@b*) (append (map cons e31ea@lab* e31eb@rhs*) e31d7@r) (append (map cons e31ea@lab* e31eb@rhs*) e31d8@mr))) (map e31dd@lookup e31e2@lhs*) (map (lambda (e31ee@x) (e2ce9@make-eval-transformer (e2f13@expand-transformer e31ee@x e31d8@mr))) e31e3@rhs*)))) e31e0@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e31de@t))) (e2eb6@syntax-dispatch e31de@t '(_ #(each (any any)) any . each-any)))) e31d6@e))) '#f))) (set! e2e54@type-descriptor-transformer (lambda (e31f2@e e31f3@r e31f4@mr) ((lambda (e31f8@t) ((lambda (e31fa@ls/false) (if (and e31fa@ls/false (apply (lambda (e31fc@id) (e2cab@id? e31fc@id)) e31fa@ls/false)) (apply (lambda (e31fe@id) ((lambda (e3200@lab) ((lambda (e3202@b) ((lambda (e3204@type) ((lambda () (begin (if (not e3200@lab) (e2cd1@raise-unbound-error e31fe@id) (void)) (if (not (and (eq? e3204@type '$rtd) (not (list? (e2ccf@binding-value e3202@b))))) (e2f9f@syntax-violation '#f '"not a record type" e31f2@e) (void)) (list 'quote (e2ccf@binding-value e3202@b)))))) (e2ccd@binding-type e3202@b))) (e2cc9@label->binding e3200@lab e31f3@r))) (e2cc5@id->label e31fe@id))) e31fa@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e31f8@t))) (e2eb6@syntax-dispatch e31f8@t '(_ any)))) e31f2@e))) (set! e2e56@record-type-descriptor-transformer (lambda (e3206@e e3207@r e3208@mr) ((lambda (e320c@t) ((lambda (e320e@ls/false) (if (and e320e@ls/false (apply (lambda (e3210@id) (e2cab@id? e3210@id)) e320e@ls/false)) (apply (lambda (e3212@id) ((lambda (e3214@lab) ((lambda (e3216@b) ((lambda (e3218@type) ((lambda () (begin (if (not e3214@lab) (e2cd1@raise-unbound-error e3212@id) (void)) (if (not (and (eq? e3218@type '$rtd) (list? (e2ccf@binding-value e3216@b)))) (e2f9f@syntax-violation '#f '"not a record type" e3206@e) (void)) (e2ed8@chi-expr (car (e2ccf@binding-value e3216@b)) e3207@r e3208@mr))))) (e2ccd@binding-type e3216@b))) (e2cc9@label->binding e3214@lab e3207@r))) (e2cc5@id->label e3212@id))) e320e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e320c@t))) (e2eb6@syntax-dispatch e320c@t '(_ any)))) e3206@e))) (set! e2e58@record-constructor-descriptor-transformer (lambda (e321a@e e321b@r e321c@mr) ((lambda (e3220@t) ((lambda (e3222@ls/false) (if (and e3222@ls/false (apply (lambda (e3224@id) (e2cab@id? e3224@id)) e3222@ls/false)) (apply (lambda (e3226@id) ((lambda (e3228@lab) ((lambda (e322a@b) ((lambda (e322c@type) ((lambda () (begin (if (not e3228@lab) (e2cd1@raise-unbound-error e3226@id) (void)) (if (not (and (eq? e322c@type '$rtd) (list? (e2ccf@binding-value e322a@b)))) (e2f9f@syntax-violation '#f '"invalid type" e321a@e) (void)) (e2ed8@chi-expr (cadr (e2ccf@binding-value e322a@b)) e321b@r e321c@mr))))) (e2ccd@binding-type e322a@b))) (e2cc9@label->binding e3228@lab e321b@r))) (e2cc5@id->label e3226@id))) e3222@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3220@t))) (e2eb6@syntax-dispatch e3220@t '(_ any)))) e321a@e))) (set! e2e5a@when-macro (lambda (e322e@e) ((lambda (e3230@t) ((lambda (e3232@ls/false) (if e3232@ls/false (apply (lambda (e3234@test e3235@e e3236@e*) (e2e6c@bless (list 'if e3234@test (cons 'begin (cons e3235@e e3236@e*))))) e3232@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3230@t))) (e2eb6@syntax-dispatch e3230@t '(_ any any . each-any)))) e322e@e))) (set! e2e5c@unless-macro (lambda (e323a@e) ((lambda (e323c@t) ((lambda (e323e@ls/false) (if e323e@ls/false (apply (lambda (e3240@test e3241@e e3242@e*) (e2e6c@bless (list 'if (list 'not e3240@test) (cons 'begin (cons e3241@e e3242@e*))))) e323e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e323c@t))) (e2eb6@syntax-dispatch e323c@t '(_ any any . each-any)))) e323a@e))) (set! e2e5e@if-transformer (lambda (e3246@e e3247@r e3248@mr) ((lambda (e324c@t) ((lambda (e324e@ls/false) (if e324e@ls/false (apply (lambda (e3250@e0 e3251@e1 e3252@e2) (list 'if (e2ed8@chi-expr e3250@e0 e3247@r e3248@mr) (e2ed8@chi-expr e3251@e1 e3247@r e3248@mr) (e2ed8@chi-expr e3252@e2 e3247@r e3248@mr))) e324e@ls/false) ((lambda (e3256@t) ((lambda (e3258@ls/false) (if e3258@ls/false (apply (lambda (e325a@e0 e325b@e1) (list 'if (e2ed8@chi-expr e325a@e0 e3247@r e3248@mr) (e2ed8@chi-expr e325b@e1 e3247@r e3248@mr) (e2c0b@e2b7b@build-void))) e3258@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3256@t))) (e2eb6@syntax-dispatch e3256@t '(_ any any)))) e324c@t))) (e2eb6@syntax-dispatch e324c@t '(_ any any any)))) e3246@e))) (set! e2e60@and-transformer (lambda (e325e@e e325f@r e3260@mr) ((lambda (e3264@t) ((lambda (e3266@ls/false) (if e3266@ls/false (apply (lambda (e3268@e*) (cons 'and (e2ed4@chi-expr* e3268@e* e325f@r e3260@mr))) e3266@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3264@t))) (e2eb6@syntax-dispatch e3264@t '(_ . each-any)))) e325e@e))) (set! e2e62@or-transformer (lambda (e326a@e e326b@r e326c@mr) ((lambda (e3270@t) ((lambda (e3272@ls/false) (if e3272@ls/false (apply (lambda (e3274@e*) (cons 'or (e2ed4@chi-expr* e3274@e* e326b@r e326c@mr))) e3272@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3270@t))) (e2eb6@syntax-dispatch e3270@t '(_ . each-any)))) e326a@e))) (set! e2e64@case-macro (lambda (e3276@e) ((lambda (e3279@build-last e327b@build-one) (begin (set! e3279@build-last (lambda (e32a0@cls) ((lambda (e32a2@t) ((lambda (e32a4@ls/false) (if e32a4@ls/false (apply (lambda (e32a6@e e32a7@e*) (cons 'begin (cons e32a6@e e32a7@e*))) e32a4@ls/false) ((lambda (e32aa@t) ((lambda (e32ac@ls/false) (if e32ac@ls/false (apply (lambda () (e327b@build-one e32a0@cls '(if #f #f))) e32ac@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e32aa@t))) (e2eb6@syntax-dispatch e32aa@t '_))) e32a2@t))) (e2eb6@syntax-dispatch e32a2@t '(#(scheme-id else) any . each-any)))) e32a0@cls))) (set! e327b@build-one (lambda (e3292@cls e3293@k) ((lambda (e3296@t) ((lambda (e3298@ls/false) (if e3298@ls/false (apply (lambda (e329a@d* e329b@e e329c@e*) (list 'if (list 'memv 't (list 'quote e329a@d*)) (cons 'begin (cons e329b@e e329c@e*)) e3293@k)) e3298@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3296@t))) (e2eb6@syntax-dispatch e3296@t '(each-any any . each-any)))) e3292@cls))) ((lambda (e327c@t) ((lambda (e327e@ls/false) (if e327e@ls/false (apply (lambda (e3280@expr) (e2e6c@bless (cons 'let (cons (list (list 't e3280@expr)) '((if #f #f)))))) e327e@ls/false) ((lambda (e3282@t) ((lambda (e3284@ls/false) (if e3284@ls/false (apply (lambda (e3286@expr e3287@cls e3288@cls*) (e2e6c@bless (list 'let (list (list 't e3286@expr)) ((letrec ((e328c@f (lambda (e328e@cls e328f@cls*) (if (null? e328f@cls*) (e3279@build-last e328e@cls) (e327b@build-one e328e@cls (e328c@f (car e328f@cls*) (cdr e328f@cls*))))))) e328c@f) e3287@cls e3288@cls*)))) e3284@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3282@t))) (e2eb6@syntax-dispatch e3282@t '(_ any any . each-any)))) e327c@t))) (e2eb6@syntax-dispatch e327c@t '(_ any)))) e3276@e))) '#f '#f))) (set! e2e66@quote-transformer (lambda (e32ae@e e32af@r e32b0@mr) ((lambda (e32b4@t) ((lambda (e32b6@ls/false) (if e32b6@ls/false (apply (lambda (e32b8@datum) (list 'quote (e2cc1@stx->datum e32b8@datum))) e32b6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e32b4@t))) (e2eb6@syntax-dispatch e32b4@t '(_ any)))) e32ae@e))) (set! e2e68@case-lambda-transformer (lambda (e32ba@e e32bb@r e32bc@mr) ((lambda (e32c0@t) ((lambda (e32c2@ls/false) (if e32c2@ls/false (apply (lambda (e32c4@fmls* e32c5@b* e32c6@b**) (call-with-values (lambda () (e2ee0@chi-lambda-clause* e32ba@e e32c4@fmls* (map cons e32c5@b* e32c6@b**) e32bb@r e32bc@mr)) (lambda (e32ce@e32cb e32cf@e32cd) ((lambda (e32d2@body* e32d3@fmls*) (e2c08@e2b49@build-case-lambda '#f e32d3@fmls* e32d2@body*)) e32cf@e32cd e32ce@e32cb)))) e32c2@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e32c0@t))) (e2eb6@syntax-dispatch e32c0@t '(_ . #(each (any any . each-any)))))) e32ba@e))) (set! e2e6a@lambda-transformer (lambda (e32d6@e e32d7@r e32d8@mr) ((lambda (e32dc@t) ((lambda (e32de@ls/false) (if e32de@ls/false (apply (lambda (e32e0@fmls e32e1@b e32e2@b*) (call-with-values (lambda () (e2ede@chi-lambda-clause e32d6@e e32e0@fmls (cons e32e1@b e32e2@b*) e32d7@r e32d8@mr)) (lambda (e32ea@e32e7 e32eb@e32e9) ((lambda (e32ee@body e32ef@fmls) (e2c07@e2b47@build-lambda '#f e32ef@fmls e32ee@body)) e32eb@e32e9 e32ea@e32e7)))) e32de@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e32dc@t))) (e2eb6@syntax-dispatch e32dc@t '(_ any any . each-any)))) e32d6@e))) (set! e2e6c@bless (lambda (e32f2@x) (e2c93@mkstx ((letrec ((e32f4@f (lambda (e32f6@x) (if (e2c73@stx? e32f6@x) e32f6@x (if (pair? e32f6@x) (cons (e32f4@f (car e32f6@x)) (e32f4@f (cdr e32f6@x))) (if (symbol? e32f6@x) (e2e40@scheme-stx e32f6@x) (if (vector? e32f6@x) (vector-map e32f4@f e32f6@x) e32f6@x))))))) e32f4@f) e32f2@x) '() '() '()))) (set! e2e6e@with-syntax-macro (lambda (e32f8@e) ((lambda (e32fa@t) ((lambda (e32fc@ls/false) (if e32fc@ls/false (apply (lambda (e32fe@pat* e32ff@expr* e3300@b e3301@b*) ((lambda (e3306@idn*) (begin (e2edc@verify-formals (map car e3306@idn*) e32f8@e) ((lambda (e3308@t*) (e2e6c@bless (list 'let (map list e3308@t* e32ff@expr*) ((letrec ((e330a@f (lambda (e330c@pat* e330d@t*) (if (null? e330c@pat*) (cons 'begin (cons '#f (cons e3300@b e3301@b*))) (list 'syntax-case (car e330d@t*) '() (list (car e330c@pat*) (e330a@f (cdr e330c@pat*) (cdr e330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car e330c@pat*)) (car e330d@t*)))))))) e330a@f) e32fe@pat* e3308@t*)))) (e2f8d@generate-temporaries e32ff@expr*)))) ((letrec ((e3310@f (lambda (e3312@pat*) (if (null? e3312@pat*) '() (call-with-values (lambda () (e2eb4@convert-pattern (car e3312@pat*) '())) (lambda (e3318@e3315 e3319@e3317) ((lambda (e331c@idn* e331d@pat) (append e331c@idn* (e3310@f (cdr e3312@pat*)))) e3319@e3317 e3318@e3315))))))) e3310@f) e32fe@pat*))) e32fc@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e32fa@t))) (e2eb6@syntax-dispatch e32fa@t '(_ #(each (any any)) any . each-any)))) e32f8@e))) (set! e2e70@invalid-fmls-error (lambda (e3320@stx e3321@fmls) ((lambda (e3324@t) ((lambda (e3326@ls/false) (if e3326@ls/false (apply (lambda (e3328@id* e3329@last) ((letrec ((e332c@f (lambda (e332e@id*) (if (null? e332e@id*) (values) (if (not (e2cab@id? (car e332e@id*))) (e2f9f@syntax-violation '#f '"not an identifier" e3320@stx (car e332e@id*)) (begin (e332c@f (cdr e332e@id*)) (if (e2cb9@bound-id-member? (car e332e@id*) (cdr e332e@id*)) (e2f9f@syntax-violation '#f '"duplicate binding" e3320@stx (car e332e@id*)) (void)))))))) e332c@f) (if (e2cab@id? e3329@last) (cons e3329@last e3328@id*) (if (e2ca1@syntax-null? e3329@last) e3328@id* (e2f9f@syntax-violation '#f '"not an identifier" e3320@stx e3329@last))))) e3326@ls/false) ((lambda (e3330@t) ((lambda (e3332@ls/false) (if e3332@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"malformed binding form" e3320@stx e3321@fmls)) e3332@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3330@t))) (e2eb6@syntax-dispatch e3330@t '_))) e3324@t))) (e2eb6@syntax-dispatch e3324@t '#(each+ any () any)))) e3321@fmls))) (set! e2e72@let-macro (lambda (e3334@stx) ((lambda (e3336@t) ((lambda (e3338@ls/false) (if e3338@ls/false (apply (lambda (e333a@lhs* e333b@rhs* e333c@b e333d@b*) (if (e2cb5@valid-bound-ids? e333a@lhs*) (e2e6c@bless (cons (cons 'lambda (cons e333a@lhs* (cons e333c@b e333d@b*))) e333b@rhs*)) (e2e70@invalid-fmls-error e3334@stx e333a@lhs*))) e3338@ls/false) ((lambda (e3342@t) ((lambda (e3344@ls/false) (if (and e3344@ls/false (apply (lambda (e3346@f e3347@lhs* e3348@rhs* e3349@b e334a@b*) (e2cab@id? e3346@f)) e3344@ls/false)) (apply (lambda (e3350@f e3351@lhs* e3352@rhs* e3353@b e3354@b*) (if (e2cb5@valid-bound-ids? e3351@lhs*) (e2e6c@bless (cons (list 'letrec (list (list e3350@f (cons 'lambda (cons e3351@lhs* (cons e3353@b e3354@b*))))) e3350@f) e3352@rhs*)) (e2e70@invalid-fmls-error e3334@stx e3351@lhs*))) e3344@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3342@t))) (e2eb6@syntax-dispatch e3342@t '(_ any #(each (any any)) any . each-any)))) e3336@t))) (e2eb6@syntax-dispatch e3336@t '(_ #(each (any any)) any . each-any)))) e3334@stx))) (set! e2e74@let-values-macro (lambda (e335a@stx) ((lambda (e335d@rename e335f@rename*) (begin (set! e335d@rename (lambda (e33c2@x e33c3@old* e33c4@new*) (begin (if (not (e2cab@id? e33c2@x)) (e2f9f@syntax-violation '#f '"not an indentifier" e335a@stx e33c2@x) (void)) (if (e2cb9@bound-id-member? e33c2@x e33c3@old*) (e2f9f@syntax-violation '#f '"duplicate binding" e335a@stx e33c2@x) (void)) ((lambda (e33c8@y) (values e33c8@y (cons e33c2@x e33c3@old*) (cons e33c8@y e33c4@new*))) (gensym (e2fa5@syntax->datum e33c2@x)))))) (set! e335f@rename* (lambda (e33b0@x* e33b1@old* e33b2@new*) (if (null? e33b0@x*) (values '() e33b1@old* e33b2@new*) (call-with-values (lambda () (e335d@rename (car e33b0@x*) e33b1@old* e33b2@new*)) (lambda (e33b6@x e33b7@old* e33b8@new*) (call-with-values (lambda () (e335f@rename* (cdr e33b0@x*) e33b7@old* e33b8@new*)) (lambda (e33bc@x* e33bd@old* e33be@new*) (values (cons e33b6@x e33bc@x*) e33bd@old* e33be@new*)))))))) ((lambda (e3360@t) ((lambda (e3362@ls/false) (if e3362@ls/false (apply (lambda (e3364@b e3365@b*) (cons* (e2e6c@bless 'let) '() e3364@b e3365@b*)) e3362@ls/false) ((lambda (e3368@t) ((lambda (e336a@ls/false) (if e336a@ls/false (apply (lambda (e336c@lhs* e336d@rhs* e336e@b e336f@b*) (e2e6c@bless ((letrec ((e3374@f (lambda (e3376@lhs* e3377@rhs* e3378@old* e3379@new*) (if (null? e3376@lhs*) (cons 'let (cons (map list e3378@old* e3379@new*) (cons e336e@b e336f@b*))) ((lambda (e337e@t) ((lambda (e3380@ls/false) (if e3380@ls/false (apply (lambda (e3382@x*) (call-with-values (lambda () (e335f@rename* e3382@x* e3378@old* e3379@new*)) (lambda (e338a@e3385 e338b@e3387 e338c@e3389) ((lambda (e3390@new* e3391@old* e3392@y*) (list 'call-with-values (list 'lambda '() (car e3377@rhs*)) (list 'lambda e3392@y* (e3374@f (cdr e3376@lhs*) (cdr e3377@rhs*) e3391@old* e3390@new*)))) e338c@e3389 e338b@e3387 e338a@e3385)))) e3380@ls/false) ((lambda (e3396@t) ((lambda (e3398@ls/false) (if e3398@ls/false (apply (lambda (e339a@x* e339b@x) (call-with-values (lambda () (e335d@rename e339b@x e3378@old* e3379@new*)) (lambda (e339e@y e339f@old* e33a0@new*) (call-with-values (lambda () (e335f@rename* e339a@x* e339f@old* e33a0@new*)) (lambda (e33a4@y* e33a5@old* e33a6@new*) (list 'call-with-values (list 'lambda '() (car e3377@rhs*)) (list 'lambda (append e33a4@y* e339e@y) (e3374@f (cdr e3376@lhs*) (cdr e3377@rhs*) e33a5@old* e33a6@new*)))))))) e3398@ls/false) ((lambda (e33aa@t) ((lambda (e33ac@ls/false) (if e33ac@ls/false (apply (lambda (e33ae@others) (e2f9f@syntax-violation '#f '"malformed bindings" e335a@stx e33ae@others)) e33ac@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e33aa@t))) (e2eb6@syntax-dispatch e33aa@t 'any))) e3396@t))) (e2eb6@syntax-dispatch e3396@t '#(each+ any () any)))) e337e@t))) (e2eb6@syntax-dispatch e337e@t 'each-any))) (car e3376@lhs*)))))) e3374@f) e336c@lhs* e336d@rhs* '() '()))) e336a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3368@t))) (e2eb6@syntax-dispatch e3368@t '(_ #(each (any any)) any . each-any)))) e3360@t))) (e2eb6@syntax-dispatch e3360@t '(_ () any . each-any)))) e335a@stx))) '#f '#f))) (set! e2e76@let*-values-macro (lambda (e33ca@stx) ((lambda (e33cd@check) (begin (set! e33cd@check (lambda (e33fc@x*) (if (not (null? e33fc@x*)) ((lambda (e33fe@x) (begin (if (not (e2cab@id? e33fe@x)) (e2f9f@syntax-violation '#f '"not an identifier" e33ca@stx e33fe@x) (void)) (e33cd@check (cdr e33fc@x*)) (if (e2cb9@bound-id-member? e33fe@x (cdr e33fc@x*)) (e2f9f@syntax-violation '#f '"duplicate identifier" e33ca@stx e33fe@x) (void)))) (car e33fc@x*)) (void)))) ((lambda (e33ce@t) ((lambda (e33d0@ls/false) (if e33d0@ls/false (apply (lambda (e33d2@b e33d3@b*) (cons* (e2e6c@bless 'let) '() e33d2@b e33d3@b*)) e33d0@ls/false) ((lambda (e33d6@t) ((lambda (e33d8@ls/false) (if e33d8@ls/false (apply (lambda (e33da@lhs* e33db@rhs* e33dc@b e33dd@b*) (e2e6c@bless ((letrec ((e33e2@f (lambda (e33e4@lhs* e33e5@rhs*) (if (null? e33e4@lhs*) (cons 'begin (cons e33dc@b e33dd@b*)) ((lambda (e33e8@t) ((lambda (e33ea@ls/false) (if e33ea@ls/false (apply (lambda (e33ec@x*) (begin (e33cd@check e33ec@x*) (list 'call-with-values (list 'lambda '() (car e33e5@rhs*)) (list 'lambda e33ec@x* (e33e2@f (cdr e33e4@lhs*) (cdr e33e5@rhs*)))))) e33ea@ls/false) ((lambda (e33ee@t) ((lambda (e33f0@ls/false) (if e33f0@ls/false (apply (lambda (e33f2@x* e33f3@x) (begin (e33cd@check (cons e33f3@x e33f2@x*)) (list 'call-with-values (list 'lambda '() (car e33e5@rhs*)) (list 'lambda (append e33f2@x* e33f3@x) (e33e2@f (cdr e33e4@lhs*) (cdr e33e5@rhs*)))))) e33f0@ls/false) ((lambda (e33f6@t) ((lambda (e33f8@ls/false) (if e33f8@ls/false (apply (lambda (e33fa@others) (e2f9f@syntax-violation '#f '"malformed bindings" e33ca@stx e33fa@others)) e33f8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e33f6@t))) (e2eb6@syntax-dispatch e33f6@t 'any))) e33ee@t))) (e2eb6@syntax-dispatch e33ee@t '#(each+ any () any)))) e33e8@t))) (e2eb6@syntax-dispatch e33e8@t 'each-any))) (car e33e4@lhs*)))))) e33e2@f) e33da@lhs* e33db@rhs*))) e33d8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e33d6@t))) (e2eb6@syntax-dispatch e33d6@t '(_ #(each (any any)) any . each-any)))) e33ce@t))) (e2eb6@syntax-dispatch e33ce@t '(_ () any . each-any)))) e33ca@stx))) '#f))) (set! e2e78@trace-lambda-macro (lambda (e3400@stx) ((lambda (e3402@t) ((lambda (e3404@ls/false) (if e3404@ls/false (apply (lambda (e3406@who e3407@fmls e3408@b e3409@b*) (if (e2cb5@valid-bound-ids? e3407@fmls) (e2e6c@bless (list 'make-traced-procedure (list 'quote e3406@who) (cons 'lambda (cons e3407@fmls (cons e3408@b e3409@b*))))) (e2e70@invalid-fmls-error e3400@stx e3407@fmls))) e3404@ls/false) ((lambda (e340e@t) ((lambda (e3410@ls/false) (if e3410@ls/false (apply (lambda (e3412@who e3413@fmls e3414@last e3415@b e3416@b*) (if (e2cb5@valid-bound-ids? (cons e3414@last e3413@fmls)) (e2e6c@bless (list 'make-traced-procedure (list 'quote e3412@who) (cons 'lambda (cons (append e3413@fmls e3414@last) (cons e3415@b e3416@b*))))) (e2e70@invalid-fmls-error e3400@stx (append e3413@fmls e3414@last)))) e3410@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e340e@t))) (e2eb6@syntax-dispatch e340e@t '(_ any #(each+ any () any) any . each-any)))) e3402@t))) (e2eb6@syntax-dispatch e3402@t '(_ any each-any any . each-any)))) e3400@stx))) (set! e2e7a@trace-define-macro (lambda (e341c@stx) ((lambda (e341e@t) ((lambda (e3420@ls/false) (if e3420@ls/false (apply (lambda (e3422@who e3423@fmls e3424@b e3425@b*) (if (e2cb5@valid-bound-ids? e3423@fmls) (e2e6c@bless (list 'define e3422@who (list 'make-traced-procedure (list 'quote e3422@who) (cons 'lambda (cons e3423@fmls (cons e3424@b e3425@b*)))))) (e2e70@invalid-fmls-error e341c@stx e3423@fmls))) e3420@ls/false) ((lambda (e342a@t) ((lambda (e342c@ls/false) (if e342c@ls/false (apply (lambda (e342e@who e342f@fmls e3430@last e3431@b e3432@b*) (if (e2cb5@valid-bound-ids? (cons e3430@last e342f@fmls)) (e2e6c@bless (list 'define e342e@who (list 'make-traced-procedure (list 'quote e342e@who) (cons 'lambda (cons (append e342f@fmls e3430@last) (cons e3431@b e3432@b*)))))) (e2e70@invalid-fmls-error e341c@stx (append e342f@fmls e3430@last)))) e342c@ls/false) ((lambda (e3438@t) ((lambda (e343a@ls/false) (if e343a@ls/false (apply (lambda (e343c@who e343d@expr) (if (e2cab@id? e343c@who) (e2e6c@bless (list 'define e343c@who (list 'let (list (list 'v e343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote e343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (e2f9f@syntax-violation '#f '"invalid name" e341c@stx))) e343a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3438@t))) (e2eb6@syntax-dispatch e3438@t '(_ any any)))) e342a@t))) (e2eb6@syntax-dispatch e342a@t '(_ (any . #(each+ any () any)) any . each-any)))) e341e@t))) (e2eb6@syntax-dispatch e341e@t '(_ (any . each-any) any . each-any)))) e341c@stx))) (set! e2e7c@trace-define-syntax-macro (lambda (e3440@stx) ((lambda (e3442@t) ((lambda (e3444@ls/false) (if e3444@ls/false (apply (lambda (e3446@who e3447@expr) (if (e2cab@id? e3446@who) (e2e6c@bless (list 'define-syntax e3446@who (list 'make-traced-macro (list 'quote e3446@who) e3447@expr))) (e2f9f@syntax-violation '#f '"invalid name" e3440@stx))) e3444@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3442@t))) (e2eb6@syntax-dispatch e3442@t '(_ any any)))) e3440@stx))) (set! e2e7e@trace-let/rec-syntax (lambda (e344a@who) (lambda (e344c@stx) ((lambda (e344e@t) ((lambda (e3450@ls/false) (if e3450@ls/false (apply (lambda (e3452@lhs* e3453@rhs* e3454@b e3455@b*) (if (e2cb5@valid-bound-ids? e3452@lhs*) ((lambda (e345a@rhs*) (e2e6c@bless (cons e344a@who (cons (map list e3452@lhs* e345a@rhs*) (cons e3454@b e3455@b*))))) (map (lambda (e345c@lhs e345d@rhs) (list 'make-traced-macro (list 'quote e345c@lhs) e345d@rhs)) e3452@lhs* e3453@rhs*)) (e2e70@invalid-fmls-error e344c@stx e3452@lhs*))) e3450@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e344e@t))) (e2eb6@syntax-dispatch e344e@t '(_ #(each (any any)) any . each-any)))) e344c@stx)))) (set! e2e80@trace-let-syntax-macro (e2e7e@trace-let/rec-syntax 'let-syntax)) (set! e2e82@trace-letrec-syntax-macro (e2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! e2e84@guard-macro (lambda (e3460@x) ((lambda (e3463@gen-clauses) (begin (set! e3463@gen-clauses (lambda (e347a@con e347b@outerk e347c@clause*) ((lambda (e3481@f e3483@f*) (begin (set! e3481@f (lambda (e34ba@x e34bb@k) ((lambda (e34be@t) ((lambda (e34c0@ls/false) (if e34c0@ls/false (apply (lambda (e34c2@e e34c3@p) ((lambda (e34c6@t) (list 'let (list (list e34c6@t e34c2@e)) (list 'if e34c6@t (list e34c3@p e34c6@t) e34bb@k))) (gensym))) e34c0@ls/false) ((lambda (e34c8@t) ((lambda (e34ca@ls/false) (if e34ca@ls/false (apply (lambda (e34cc@e) ((lambda (e34ce@t) (list 'let (list (list e34ce@t e34cc@e)) (list 'if e34ce@t e34ce@t e34bb@k))) (gensym))) e34ca@ls/false) ((lambda (e34d0@t) ((lambda (e34d2@ls/false) (if e34d2@ls/false (apply (lambda (e34d4@e e34d5@v e34d6@v*) (list 'if e34d4@e (cons 'begin (cons e34d5@v e34d6@v*)) e34bb@k)) e34d2@ls/false) ((lambda (e34da@t) ((lambda (e34dc@ls/false) (if e34dc@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid guard clause" e34ba@x)) e34dc@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e34da@t))) (e2eb6@syntax-dispatch e34da@t '_))) e34d0@t))) (e2eb6@syntax-dispatch e34d0@t '(any any . each-any)))) e34c8@t))) (e2eb6@syntax-dispatch e34c8@t '(any)))) e34be@t))) (e2eb6@syntax-dispatch e34be@t '(any #(scheme-id =>) any)))) e34ba@x))) (set! e3483@f* (lambda (e3490@x*) ((lambda (e3492@t) ((lambda (e3494@ls/false) (if e3494@ls/false (apply (lambda () ((lambda (e3496@g) (values (list e3496@g (list 'lambda '() (list 'raise-continuable e347a@con))) e3496@g)) (gensym))) e3494@ls/false) ((lambda (e3498@t) ((lambda (e349a@ls/false) (if e349a@ls/false (apply (lambda (e349c@e e349d@e*) (values (cons 'begin (cons e349c@e e349d@e*)) '#f)) e349a@ls/false) ((lambda (e34a0@t) ((lambda (e34a2@ls/false) (if e34a2@ls/false (apply (lambda (e34a4@cls e34a5@cls*) (call-with-values (lambda () (e3483@f* e34a5@cls*)) (lambda (e34ac@e34a9 e34ad@e34ab) ((lambda (e34b0@g e34b1@e) (values (e3481@f e34a4@cls e34b1@e) e34b0@g)) e34ad@e34ab e34ac@e34a9)))) e34a2@ls/false) ((lambda (e34b4@t) ((lambda (e34b6@ls/false) (if e34b6@ls/false (apply (lambda (e34b8@others) (e2f9f@syntax-violation '#f '"invalid guard clause" e34b8@others)) e34b6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e34b4@t))) (e2eb6@syntax-dispatch e34b4@t 'any))) e34a0@t))) (e2eb6@syntax-dispatch e34a0@t '(any . any)))) e3498@t))) (e2eb6@syntax-dispatch e3498@t '((#(scheme-id else) any . each-any))))) e3492@t))) (e2eb6@syntax-dispatch e3492@t '()))) e3490@x*))) (call-with-values (lambda () (e3483@f* e347c@clause*)) (lambda (e3488@e3485 e3489@e3487) ((lambda (e348c@raisek e348d@code) (if e348c@raisek (list (list 'call/cc (list 'lambda (list e348c@raisek) (list e347b@outerk (list 'lambda '() e348d@code))))) (list e347b@outerk (list 'lambda '() e348d@code)))) e3489@e3487 e3488@e3485))))) '#f '#f))) ((lambda (e3464@t) ((lambda (e3466@ls/false) (if (and e3466@ls/false (apply (lambda (e3468@con e3469@clause* e346a@b e346b@b*) (e2cab@id? e3468@con)) e3466@ls/false)) (apply (lambda (e3470@con e3471@clause* e3472@b e3473@b*) ((lambda (e3478@outerk) (e2e6c@bless (list (list 'call/cc (list 'lambda (list e3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list e3470@con) (e3463@gen-clauses e3470@con e3478@outerk e3471@clause*)) (cons 'lambda (cons '() (cons e3472@b e3473@b*)))))))))) (gensym))) e3466@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3464@t))) (e2eb6@syntax-dispatch e3464@t '(_ (any . each-any) any . each-any)))) e3460@x))) '#f))) (set! e2e86@define-enumeration-macro (lambda (e34de@stx) ((lambda (e34e1@set? e34e3@remove-dups) (begin (set! e34e1@set? (lambda (e34fa@x) (or (null? e34fa@x) (and (not (memq (car e34fa@x) (cdr e34fa@x))) (e34e1@set? (cdr e34fa@x)))))) (set! e34e3@remove-dups (lambda (e34f8@ls) (if (null? e34f8@ls) '() (cons (car e34f8@ls) (e34e3@remove-dups (remq (car e34f8@ls) (cdr e34f8@ls))))))) ((lambda (e34e4@t) ((lambda (e34e6@ls/false) (if (and e34e6@ls/false (apply (lambda (e34e8@name e34e9@id* e34ea@maker) (and (e2cab@id? e34e8@name) (e2cab@id? e34ea@maker) (for-all e2cab@id? e34e9@id*))) e34e6@ls/false)) (apply (lambda (e34ee@name e34ef@id* e34f0@maker) ((lambda (e34f4@name* e34f5@mk) (e2e6c@bless (list 'begin (list 'define e34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote e34f4@name*)))) (list 'define-syntax e34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote e34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote e34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax e34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote e34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote e34f4@name*)) (cons 'syntax-violation (cons (list 'quote e34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons e34f5@mk '('(n* ...)))))))))))) (e34e3@remove-dups (e2fa5@syntax->datum e34ef@id*)) (gensym))) e34e6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e34e4@t))) (e2eb6@syntax-dispatch e34e4@t '(_ any each-any any)))) e34de@stx))) '#f '#f))) (set! e2e88@time-macro (lambda (e34fc@stx) ((lambda (e34fe@t) ((lambda (e3500@ls/false) (if e3500@ls/false (apply (lambda (e3502@expr) (e2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() e3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) e3500@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e34fe@t))) (e2eb6@syntax-dispatch e34fe@t '(_ any)))) e34fc@stx))) (set! e2e8a@delay-macro (lambda (e3504@stx) ((lambda (e3506@t) ((lambda (e3508@ls/false) (if e3508@ls/false (apply (lambda (e350a@expr) (e2e6c@bless (list 'make-promise (list 'lambda '() e350a@expr)))) e3508@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3506@t))) (e2eb6@syntax-dispatch e3506@t '(_ any)))) e3504@stx))) (set! e2e8c@assert-macro (lambda (e350c@stx) ((lambda (e350e@t) ((lambda (e3510@ls/false) (if e3510@ls/false (apply (lambda (e3512@expr) ((lambda (e3514@pos) (e2e6c@bless (list 'unless e3512@expr (list 'assertion-error (list 'quote e3512@expr) (list 'quote e3514@pos))))) (or (e2f97@expression-position e350c@stx) (e2f97@expression-position e3512@expr)))) e3510@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e350e@t))) (e2eb6@syntax-dispatch e350e@t '(_ any)))) e350c@stx))) (set! e2e8e@endianness-macro (lambda (e3516@stx) ((lambda (e3518@t) ((lambda (e351a@ls/false) (if e351a@ls/false (apply (lambda (e351c@e) ((lambda (e351e@t) (if (memv e351e@t '(little)) (e2e6c@bless ''little) (if (memv e351e@t '(big)) (e2e6c@bless ''big) (e2f9f@syntax-violation '#f '"endianness must be big or little" e3516@stx)))) (e2fa5@syntax->datum e351c@e))) e351a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3518@t))) (e2eb6@syntax-dispatch e3518@t '(_ any)))) e3516@stx))) (set! e2e90@identifier-syntax-macro (lambda (e3520@stx) ((lambda (e3522@t) ((lambda (e3524@ls/false) (if e3524@ls/false (apply (lambda (e3526@expr) (e2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax e3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax e3526@expr) '((syntax (e* ...)))))))))) e3524@ls/false) ((lambda (e3528@t) ((lambda (e352a@ls/false) (if (and e352a@ls/false (apply (lambda (e352c@id1 e352d@expr1 e352e@id2 e352f@expr2 e3530@expr3) (and (e2cab@id? e352c@id1) (e2cab@id? e352e@id2) (e2cab@id? e352f@expr2))) e352a@ls/false)) (apply (lambda (e3536@id1 e3537@expr1 e3538@id2 e3539@expr2 e353a@expr3) (e2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax e3537@expr1)) (list (list 'set! 'id e3539@expr2) (list 'syntax e353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons e3537@expr1 '(e* ...))))))))) e352a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3528@t))) (e2eb6@syntax-dispatch e3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) e3522@t))) (e2eb6@syntax-dispatch e3522@t '(_ any)))) e3520@stx))) (set! e2e92@do-macro (lambda (e3540@stx) ((lambda (e3543@bind) (begin (set! e3543@bind (lambda (e355a@x) ((lambda (e355c@t) ((lambda (e355e@ls/false) (if e355e@ls/false (apply (lambda (e3560@x e3561@init) (list e3560@x e3561@init e3560@x)) e355e@ls/false) ((lambda (e3564@t) ((lambda (e3566@ls/false) (if e3566@ls/false (apply (lambda (e3568@x e3569@init e356a@step) (list e3568@x e3569@init e356a@step)) e3566@ls/false) ((lambda (e356e@t) ((lambda (e3570@ls/false) (if e3570@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid binding" e3540@stx)) e3570@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e356e@t))) (e2eb6@syntax-dispatch e356e@t '_))) e3564@t))) (e2eb6@syntax-dispatch e3564@t '(any any any)))) e355c@t))) (e2eb6@syntax-dispatch e355c@t '(any any)))) e355a@x))) ((lambda (e3544@t) ((lambda (e3546@ls/false) (if e3546@ls/false (apply (lambda (e3548@binding* e3549@test e354a@expr* e354b@command*) ((lambda (e3550@t) ((lambda (e3552@ls/false) (if e3552@ls/false (apply (lambda (e3554@x* e3555@init* e3556@step*) (if (e2cb5@valid-bound-ids? e3554@x*) (e2e6c@bless (list 'letrec (list (list 'loop (list 'lambda e3554@x* (list 'if e3549@test (cons 'begin (cons '(if #f #f) e354a@expr*)) (cons 'begin (append e354b@command* (list (cons 'loop e3556@step*)))))))) (cons 'loop e3555@init*))) (e2f9f@syntax-violation '#f '"invalid bindings" e3540@stx))) e3552@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3550@t))) (e2eb6@syntax-dispatch e3550@t '#(each (any any any))))) (map e3543@bind e3548@binding*))) e3546@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3544@t))) (e2eb6@syntax-dispatch e3544@t '(_ each-any (any . each-any) . each-any)))) e3540@stx))) '#f))) (set! e2e94@let*-macro (lambda (e3572@stx) ((lambda (e3574@t) ((lambda (e3576@ls/false) (if (and e3576@ls/false (apply (lambda (e3578@lhs* e3579@rhs* e357a@b e357b@b*) (for-all e2cab@id? e3578@lhs*)) e3576@ls/false)) (apply (lambda (e3580@lhs* e3581@rhs* e3582@b e3583@b*) (e2e6c@bless ((letrec ((e3588@f (lambda (e358a@x*) (if (null? e358a@x*) (cons 'let (cons '() (cons e3582@b e3583@b*))) (list 'let (list (car e358a@x*)) (e3588@f (cdr e358a@x*))))))) e3588@f) (map list e3580@lhs* e3581@rhs*)))) e3576@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3574@t))) (e2eb6@syntax-dispatch e3574@t '(_ #(each (any any)) any . each-any)))) e3572@stx))) (set! e2e96@or-macro (lambda (e358c@stx) ((lambda (e358e@t) ((lambda (e3590@ls/false) (if e3590@ls/false (apply (lambda () '#f) e3590@ls/false) ((lambda (e3592@t) ((lambda (e3594@ls/false) (if e3594@ls/false (apply (lambda (e3596@e e3597@e*) (e2e6c@bless ((letrec ((e359a@f (lambda (e359c@e e359d@e*) (if (null? e359d@e*) (list 'begin '#f e359c@e) (list 'let (list (list 't e359c@e)) (list 'if 't 't (e359a@f (car e359d@e*) (cdr e359d@e*)))))))) e359a@f) e3596@e e3597@e*))) e3594@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3592@t))) (e2eb6@syntax-dispatch e3592@t '(_ any . each-any)))) e358e@t))) (e2eb6@syntax-dispatch e358e@t '(_)))) e358c@stx))) (set! e2e98@and-macro (lambda (e35a0@stx) ((lambda (e35a2@t) ((lambda (e35a4@ls/false) (if e35a4@ls/false (apply (lambda () '#t) e35a4@ls/false) ((lambda (e35a6@t) ((lambda (e35a8@ls/false) (if e35a8@ls/false (apply (lambda (e35aa@e e35ab@e*) (e2e6c@bless ((letrec ((e35ae@f (lambda (e35b0@e e35b1@e*) (if (null? e35b1@e*) (list 'begin '#f e35b0@e) (cons 'if (cons e35b0@e (cons (e35ae@f (car e35b1@e*) (cdr e35b1@e*)) '(#f)))))))) e35ae@f) e35aa@e e35ab@e*))) e35a8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e35a6@t))) (e2eb6@syntax-dispatch e35a6@t '(_ any . each-any)))) e35a2@t))) (e2eb6@syntax-dispatch e35a2@t '(_)))) e35a0@stx))) (set! e2e9a@cond-macro (lambda (e35b4@stx) ((lambda (e35b6@t) ((lambda (e35b8@ls/false) (if e35b8@ls/false (apply (lambda (e35ba@cls e35bb@cls*) (e2e6c@bless ((letrec ((e35be@f (lambda (e35c0@cls e35c1@cls*) (if (null? e35c1@cls*) ((lambda (e35c4@t) ((lambda (e35c6@ls/false) (if e35c6@ls/false (apply (lambda (e35c8@e e35c9@e*) (cons 'begin (cons e35c8@e e35c9@e*))) e35c6@ls/false) ((lambda (e35cc@t) ((lambda (e35ce@ls/false) (if e35ce@ls/false (apply (lambda (e35d0@e e35d1@p) (list 'let (list (list 't e35d0@e)) (list 'if 't (cons e35d1@p '(t))))) e35ce@ls/false) ((lambda (e35d4@t) ((lambda (e35d6@ls/false) (if e35d6@ls/false (apply (lambda (e35d8@e) (cons 'or (cons e35d8@e '((if #f #f))))) e35d6@ls/false) ((lambda (e35da@t) ((lambda (e35dc@ls/false) (if e35dc@ls/false (apply (lambda (e35de@e e35df@e*) (list 'if e35de@e (cons 'begin e35df@e*))) e35dc@ls/false) ((lambda (e35e2@t) ((lambda (e35e4@ls/false) (if e35e4@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid last clause" e35b4@stx)) e35e4@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e35e2@t))) (e2eb6@syntax-dispatch e35e2@t '_))) e35da@t))) (e2eb6@syntax-dispatch e35da@t '(any . each-any)))) e35d4@t))) (e2eb6@syntax-dispatch e35d4@t '(any)))) e35cc@t))) (e2eb6@syntax-dispatch e35cc@t '(any #(scheme-id =>) any)))) e35c4@t))) (e2eb6@syntax-dispatch e35c4@t '(#(scheme-id else) any . each-any)))) e35c0@cls) ((lambda (e35e6@t) ((lambda (e35e8@ls/false) (if e35e8@ls/false (apply (lambda (e35ea@e e35eb@e*) (e2f9f@syntax-violation '#f '"incorrect position of keyword else" e35b4@stx)) e35e8@ls/false) ((lambda (e35ee@t) ((lambda (e35f0@ls/false) (if e35f0@ls/false (apply (lambda (e35f2@e e35f3@p) (list 'let (list (list 't e35f2@e)) (list 'if 't (cons e35f3@p '(t)) (e35be@f (car e35c1@cls*) (cdr e35c1@cls*))))) e35f0@ls/false) ((lambda (e35f6@t) ((lambda (e35f8@ls/false) (if e35f8@ls/false (apply (lambda (e35fa@e) (list 'or e35fa@e (e35be@f (car e35c1@cls*) (cdr e35c1@cls*)))) e35f8@ls/false) ((lambda (e35fc@t) ((lambda (e35fe@ls/false) (if e35fe@ls/false (apply (lambda (e3600@e e3601@e*) (list 'if e3600@e (cons 'begin e3601@e*) (e35be@f (car e35c1@cls*) (cdr e35c1@cls*)))) e35fe@ls/false) ((lambda (e3604@t) ((lambda (e3606@ls/false) (if e3606@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid last clause" e35b4@stx)) e3606@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3604@t))) (e2eb6@syntax-dispatch e3604@t '_))) e35fc@t))) (e2eb6@syntax-dispatch e35fc@t '(any . each-any)))) e35f6@t))) (e2eb6@syntax-dispatch e35f6@t '(any)))) e35ee@t))) (e2eb6@syntax-dispatch e35ee@t '(any #(scheme-id =>) any)))) e35e6@t))) (e2eb6@syntax-dispatch e35e6@t '(#(scheme-id else) any . each-any)))) e35c0@cls))))) e35be@f) e35ba@cls e35bb@cls*))) e35b8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e35b6@t))) (e2eb6@syntax-dispatch e35b6@t '(_ any . each-any)))) e35b4@stx))) (set! e2e9c@do-include (lambda (e3608@stx e3609@id e360a@filename) ((lambda (e360e@filename) (begin (if (not (and (string? e360e@filename) (e2cab@id? e3609@id))) (e2f9f@syntax-violation '#f '"invalid syntax" e3608@stx) (void)) (cons (e2e6c@bless 'begin) (with-input-from-file e360e@filename (lambda () ((letrec ((e3610@f (lambda (e3612@ls) ((lambda (e3614@x) (if (eof-object? e3614@x) (reverse e3612@ls) (e3610@f (cons (e2c89@datum->stx e3609@id e3614@x) e3612@ls)))) (e2848@e2765@read-annotated))))) e3610@f) '())))))) (e2cc1@stx->datum e360a@filename)))) (set! e2e9e@include-macro (lambda (e3616@e) ((lambda (e3618@t) ((lambda (e361a@ls/false) (if e361a@ls/false (apply (lambda (e361c@id e361d@filename) (e2e9c@do-include e3616@e e361c@id e361d@filename)) e361a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3618@t))) (e2eb6@syntax-dispatch e3618@t '(any any)))) e3616@e))) (set! e2ea0@include-into-macro (lambda (e3620@e) ((lambda (e3622@t) ((lambda (e3624@ls/false) (if e3624@ls/false (apply (lambda (e3626@id e3627@filename) (e2e9c@do-include e3620@e e3626@id e3627@filename)) e3624@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3622@t))) (e2eb6@syntax-dispatch e3622@t '(_ any any)))) e3620@e))) (set! e2ea2@syntax-rules-macro (lambda (e362a@e) ((lambda (e362c@t) ((lambda (e362e@ls/false) (if e362e@ls/false (apply (lambda (e3630@lits e3631@pat* e3632@tmp*) (begin (e2ebc@verify-literals e3630@lits e362a@e) (e2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons e3630@lits (map (lambda (e3636@pat e3637@tmp) ((lambda (e363a@t) ((lambda (e363c@ls/false) (if e363c@ls/false (apply (lambda (e363e@rest) (list (cons 'g e363e@rest) (list 'syntax e3637@tmp))) e363c@ls/false) ((lambda (e3640@t) ((lambda (e3642@ls/false) (if e3642@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid syntax-rules pattern" e362a@e e3636@pat)) e3642@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3640@t))) (e2eb6@syntax-dispatch e3640@t '_))) e363a@t))) (e2eb6@syntax-dispatch e363a@t '(_ . any)))) e3636@pat)) e3631@pat* e3632@tmp*)))))))) e362e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e362c@t))) (e2eb6@syntax-dispatch e362c@t '(_ each-any . #(each (any any)))))) e362a@e))) (set! e2ea4@quasiquote-macro ((lambda () ((lambda (e3645@datum e3661@quasicons* e3663@quasicons e3665@quasiappend e3667@quasivector e3669@vquasi e366b@quasi) (begin (set! e3645@datum (lambda (e3746@x) (list (e2e40@scheme-stx 'quote) (e2c93@mkstx e3746@x '() '() '())))) (set! e3661@quasicons* (lambda (e373e@x e373f@y) ((letrec ((e3742@f (lambda (e3744@x) (if (null? e3744@x) e373f@y (e3663@quasicons (car e3744@x) (e3742@f (cdr e3744@x))))))) e3742@f) e373e@x))) (set! e3663@quasicons (lambda (e3718@x e3719@y) ((lambda (e371c@t) ((lambda (e371e@ls/false) (if e371e@ls/false (apply (lambda (e3720@dy) ((lambda (e3722@t) ((lambda (e3724@ls/false) (if e3724@ls/false (apply (lambda (e3726@dx) (list (e2e40@scheme-stx 'quote) (cons e3726@dx e3720@dy))) e3724@ls/false) ((lambda (e3728@t) ((lambda (e372a@ls/false) (if e372a@ls/false (apply (lambda () ((lambda (e372c@t) ((lambda (e372e@ls/false) (if e372e@ls/false (apply (lambda () (list (e2e40@scheme-stx 'list) e3718@x)) e372e@ls/false) ((lambda (e3730@t) ((lambda (e3732@ls/false) (if e3732@ls/false (apply (lambda () (list (e2e40@scheme-stx 'cons) e3718@x e3719@y)) e3732@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3730@t))) (e2eb6@syntax-dispatch e3730@t '_))) e372c@t))) (e2eb6@syntax-dispatch e372c@t '()))) e3720@dy)) e372a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3728@t))) (e2eb6@syntax-dispatch e3728@t '_))) e3722@t))) (e2eb6@syntax-dispatch e3722@t '(#(scheme-id quote) any)))) e3718@x)) e371e@ls/false) ((lambda (e3734@t) ((lambda (e3736@ls/false) (if e3736@ls/false (apply (lambda (e3738@stuff) (cons* (e2e40@scheme-stx 'list) e3718@x e3738@stuff)) e3736@ls/false) ((lambda (e373a@t) ((lambda (e373c@ls/false) (if e373c@ls/false (apply (lambda () (list (e2e40@scheme-stx 'cons) e3718@x e3719@y)) e373c@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e373a@t))) (e2eb6@syntax-dispatch e373a@t '_))) e3734@t))) (e2eb6@syntax-dispatch e3734@t '(#(scheme-id list) . each-any)))) e371c@t))) (e2eb6@syntax-dispatch e371c@t '(#(scheme-id quote) any)))) e3719@y))) (set! e3665@quasiappend (lambda (e36fe@x e36ff@y) ((lambda (e3702@ls) (if (null? e3702@ls) (list (e2e40@scheme-stx 'quote) '()) (if (null? (cdr e3702@ls)) (car e3702@ls) (cons* (e2e40@scheme-stx 'append) e3702@ls)))) ((letrec ((e3704@f (lambda (e3706@x) (if (null? e3706@x) ((lambda (e3708@t) ((lambda (e370a@ls/false) (if e370a@ls/false (apply (lambda () '()) e370a@ls/false) ((lambda (e370c@t) ((lambda (e370e@ls/false) (if e370e@ls/false (apply (lambda () (list e36ff@y)) e370e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e370c@t))) (e2eb6@syntax-dispatch e370c@t '_))) e3708@t))) (e2eb6@syntax-dispatch e3708@t '(#(scheme-id quote) ())))) e36ff@y) ((lambda (e3710@t) ((lambda (e3712@ls/false) (if e3712@ls/false (apply (lambda () (e3704@f (cdr e3706@x))) e3712@ls/false) ((lambda (e3714@t) ((lambda (e3716@ls/false) (if e3716@ls/false (apply (lambda () (cons (car e3706@x) (e3704@f (cdr e3706@x)))) e3716@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3714@t))) (e2eb6@syntax-dispatch e3714@t '_))) e3710@t))) (e2eb6@syntax-dispatch e3710@t '(#(scheme-id quote) ())))) (car e3706@x)))))) e3704@f) e36fe@x)))) (set! e3667@quasivector (lambda (e36cc@x) ((lambda (e36ce@pat-x) ((lambda (e36d0@t) ((lambda (e36d2@ls/false) (if e36d2@ls/false (apply (lambda (e36d4@x*) (list (e2e40@scheme-stx 'quote) (list->vector e36d4@x*))) e36d2@ls/false) ((lambda (e36d6@t) ((lambda (e36d8@ls/false) (if e36d8@ls/false (apply (lambda () ((letrec ((e36da@f (lambda (e36dc@x e36dd@k) ((lambda (e36e0@t) ((lambda (e36e2@ls/false) (if e36e2@ls/false (apply (lambda (e36e4@x*) (e36dd@k (map (lambda (e36e6@x) (list (e2e40@scheme-stx 'quote) e36e6@x)) e36e4@x*))) e36e2@ls/false) ((lambda (e36e8@t) ((lambda (e36ea@ls/false) (if e36ea@ls/false (apply (lambda (e36ec@x*) (e36dd@k e36ec@x*)) e36ea@ls/false) ((lambda (e36ee@t) ((lambda (e36f0@ls/false) (if e36f0@ls/false (apply (lambda (e36f2@x e36f3@y) (e36da@f e36f3@y (lambda (e36f6@ls) (e36dd@k (cons e36f2@x e36f6@ls))))) e36f0@ls/false) ((lambda (e36f8@t) ((lambda (e36fa@ls/false) (if e36fa@ls/false (apply (lambda () (list (e2e40@scheme-stx 'list->vector) e36ce@pat-x)) e36fa@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e36f8@t))) (e2eb6@syntax-dispatch e36f8@t '_))) e36ee@t))) (e2eb6@syntax-dispatch e36ee@t '(#(scheme-id cons) any any)))) e36e8@t))) (e2eb6@syntax-dispatch e36e8@t '(#(scheme-id list) . each-any)))) e36e0@t))) (e2eb6@syntax-dispatch e36e0@t '(#(scheme-id quote) each-any)))) e36dc@x)))) e36da@f) e36cc@x (lambda (e36fc@ls) (cons* (e2e40@scheme-stx 'vector) e36fc@ls)))) e36d8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e36d6@t))) (e2eb6@syntax-dispatch e36d6@t '_))) e36d0@t))) (e2eb6@syntax-dispatch e36d0@t '(#(scheme-id quote) each-any)))) e36ce@pat-x)) e36cc@x))) (set! e3669@vquasi (lambda (e36aa@p e36ab@lev) ((lambda (e36ae@t) ((lambda (e36b0@ls/false) (if e36b0@ls/false (apply (lambda (e36b2@p e36b3@q) ((lambda (e36b6@t) ((lambda (e36b8@ls/false) (if e36b8@ls/false (apply (lambda (e36ba@p) (if (= e36ab@lev '0) (e3661@quasicons* e36ba@p (e3669@vquasi e36b3@q e36ab@lev)) (e3663@quasicons (e3663@quasicons (e3645@datum 'unquote) (e366b@quasi e36ba@p (- e36ab@lev '1))) (e3669@vquasi e36b3@q e36ab@lev)))) e36b8@ls/false) ((lambda (e36bc@t) ((lambda (e36be@ls/false) (if e36be@ls/false (apply (lambda (e36c0@p) (if (= e36ab@lev '0) (e3665@quasiappend e36c0@p (e3669@vquasi e36b3@q e36ab@lev)) (e3663@quasicons (e3663@quasicons (e3645@datum 'unquote-splicing) (e366b@quasi e36c0@p (- e36ab@lev '1))) (e3669@vquasi e36b3@q e36ab@lev)))) e36be@ls/false) ((lambda (e36c2@t) ((lambda (e36c4@ls/false) (if e36c4@ls/false (apply (lambda (e36c6@p) (e3663@quasicons (e366b@quasi e36c6@p e36ab@lev) (e3669@vquasi e36b3@q e36ab@lev))) e36c4@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e36c2@t))) (e2eb6@syntax-dispatch e36c2@t 'any))) e36bc@t))) (e2eb6@syntax-dispatch e36bc@t '(#(scheme-id unquote-splicing) . each-any)))) e36b6@t))) (e2eb6@syntax-dispatch e36b6@t '(#(scheme-id unquote) . each-any)))) e36b2@p)) e36b0@ls/false) ((lambda (e36c8@t) ((lambda (e36ca@ls/false) (if e36ca@ls/false (apply (lambda () (list (e2e40@scheme-stx 'quote) '())) e36ca@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e36c8@t))) (e2eb6@syntax-dispatch e36c8@t '()))) e36ae@t))) (e2eb6@syntax-dispatch e36ae@t '(any . any)))) e36aa@p))) (set! e366b@quasi (lambda (e3674@p e3675@lev) ((lambda (e3678@t) ((lambda (e367a@ls/false) (if e367a@ls/false (apply (lambda (e367c@p) (if (= e3675@lev '0) e367c@p (e3663@quasicons (e3645@datum 'unquote) (e366b@quasi (list e367c@p) (- e3675@lev '1))))) e367a@ls/false) ((lambda (e367e@t) ((lambda (e3680@ls/false) (if e3680@ls/false (apply (lambda (e3682@p e3683@q) (if (= e3675@lev '0) (e3661@quasicons* e3682@p (e366b@quasi e3683@q e3675@lev)) (e3663@quasicons (e3663@quasicons (e3645@datum 'unquote) (e366b@quasi e3682@p (- e3675@lev '1))) (e366b@quasi e3683@q e3675@lev)))) e3680@ls/false) ((lambda (e3686@t) ((lambda (e3688@ls/false) (if e3688@ls/false (apply (lambda (e368a@p e368b@q) (if (= e3675@lev '0) (e3665@quasiappend e368a@p (e366b@quasi e368b@q e3675@lev)) (e3663@quasicons (e3663@quasicons (e3645@datum 'unquote-splicing) (e366b@quasi e368a@p (- e3675@lev '1))) (e366b@quasi e368b@q e3675@lev)))) e3688@ls/false) ((lambda (e368e@t) ((lambda (e3690@ls/false) (if e3690@ls/false (apply (lambda (e3692@p) (e3663@quasicons (e3645@datum 'quasiquote) (e366b@quasi (list e3692@p) (+ e3675@lev '1)))) e3690@ls/false) ((lambda (e3694@t) ((lambda (e3696@ls/false) (if e3696@ls/false (apply (lambda (e3698@p e3699@q) (e3663@quasicons (e366b@quasi e3698@p e3675@lev) (e366b@quasi e3699@q e3675@lev))) e3696@ls/false) ((lambda (e369c@t) ((lambda (e369e@ls/false) (if (and e369e@ls/false (apply (lambda (e36a0@x) (not (e2c73@stx? e36a0@x))) e369e@ls/false)) (apply (lambda (e36a2@x) (e3667@quasivector (e3669@vquasi e36a2@x e3675@lev))) e369e@ls/false) ((lambda (e36a4@t) ((lambda (e36a6@ls/false) (if e36a6@ls/false (apply (lambda (e36a8@p) (list (e2e40@scheme-stx 'quote) e36a8@p)) e36a6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e36a4@t))) (e2eb6@syntax-dispatch e36a4@t 'any))) e369c@t))) (e2eb6@syntax-dispatch e369c@t '#(vector each-any)))) e3694@t))) (e2eb6@syntax-dispatch e3694@t '(any . any)))) e368e@t))) (e2eb6@syntax-dispatch e368e@t '(#(scheme-id quasiquote) any)))) e3686@t))) (e2eb6@syntax-dispatch e3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) e367e@t))) (e2eb6@syntax-dispatch e367e@t '((#(scheme-id unquote) . each-any) . any)))) e3678@t))) (e2eb6@syntax-dispatch e3678@t '(#(scheme-id unquote) any)))) e3674@p))) (lambda (e366c@x) ((lambda (e366e@t) ((lambda (e3670@ls/false) (if e3670@ls/false (apply (lambda (e3672@e) (e366b@quasi e3672@e '0)) e3670@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e366e@t))) (e2eb6@syntax-dispatch e366e@t '(_ any)))) e366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! e2ea6@quasisyntax-macro ((lambda () ((lambda (e3749@quasi) (begin (set! e3749@quasi (lambda (e3764@p e3765@lev) ((lambda (e3768@t) ((lambda (e376a@ls/false) (if e376a@ls/false (apply (lambda (e376c@p) (if (= e3765@lev '0) ((lambda (e376e@g) (values (list e376e@g) (list e376c@p) e376e@g)) (gensym)) (call-with-values (lambda () (e3749@quasi e376c@p (- e3765@lev '1))) (lambda (e3776@e3771 e3777@e3773 e3778@e3775) ((lambda (e377c@p e377d@rhs* e377e@lhs*) (values e377e@lhs* e377d@rhs* (list 'unsyntax e377c@p))) e3778@e3775 e3777@e3773 e3776@e3771))))) e376a@ls/false) ((lambda (e3782@t) ((lambda (e3784@ls/false) (if (and e3784@ls/false (apply (lambda () (= e3765@lev '0)) e3784@ls/false)) (apply (lambda () (e2f9f@syntax-violation '#f '"incorrect use of unsyntax" e3764@p)) e3784@ls/false) ((lambda (e3786@t) ((lambda (e3788@ls/false) (if e3788@ls/false (apply (lambda (e378a@p* e378b@q) (call-with-values (lambda () (e3749@quasi e378b@q e3765@lev)) (lambda (e3794@e378f e3795@e3791 e3796@e3793) ((lambda (e379a@q e379b@rhs* e379c@lhs*) (if (= e3765@lev '0) ((lambda (e37a0@g*) (values (append e37a0@g* e379c@lhs*) (append e378a@p* e379b@rhs*) (append e37a0@g* e379a@q))) (map (lambda (e37a2@x) (gensym)) e378a@p*)) (call-with-values (lambda () (e3749@quasi e378a@p* (- e3765@lev '1))) (lambda (e37aa@e37a5 e37ab@e37a7 e37ac@e37a9) ((lambda (e37b0@p* e37b1@rhs2* e37b2@lhs2*) (values (append e37b2@lhs2* e379c@lhs*) (append e37b1@rhs2* e379b@rhs*) (cons (cons 'unsyntax e37b0@p*) e379a@q))) e37ac@e37a9 e37ab@e37a7 e37aa@e37a5))))) e3796@e3793 e3795@e3791 e3794@e378f)))) e3788@ls/false) ((lambda (e37b6@t) ((lambda (e37b8@ls/false) (if e37b8@ls/false (apply (lambda (e37ba@p* e37bb@q) (call-with-values (lambda () (e3749@quasi e37bb@q e3765@lev)) (lambda (e37c4@e37bf e37c5@e37c1 e37c6@e37c3) ((lambda (e37ca@q e37cb@rhs* e37cc@lhs*) (if (= e3765@lev '0) ((lambda (e37d0@g*) (values (append (map (lambda (e37d2@g) (cons e37d2@g '(...))) e37d0@g*) e37cc@lhs*) (append e37ba@p* e37cb@rhs*) (append (apply append (map (lambda (e37d4@g) (cons e37d4@g '(...))) e37d0@g*)) e37ca@q))) (map (lambda (e37d6@x) (gensym)) e37ba@p*)) (call-with-values (lambda () (e3749@quasi e37ba@p* (- e3765@lev '1))) (lambda (e37de@e37d9 e37df@e37db e37e0@e37dd) ((lambda (e37e4@p* e37e5@rhs2* e37e6@lhs2*) (values (append e37e6@lhs2* e37cc@lhs*) (append e37e5@rhs2* e37cb@rhs*) (cons (cons 'unsyntax-splicing e37e4@p*) e37ca@q))) e37e0@e37dd e37df@e37db e37de@e37d9))))) e37c6@e37c3 e37c5@e37c1 e37c4@e37bf)))) e37b8@ls/false) ((lambda (e37ea@t) ((lambda (e37ec@ls/false) (if (and e37ec@ls/false (apply (lambda () (= e3765@lev '0)) e37ec@ls/false)) (apply (lambda () (e2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" e3764@p)) e37ec@ls/false) ((lambda (e37ee@t) ((lambda (e37f0@ls/false) (if e37f0@ls/false (apply (lambda (e37f2@p) (call-with-values (lambda () (e3749@quasi e37f2@p (+ e3765@lev '1))) (lambda (e37fa@e37f5 e37fb@e37f7 e37fc@e37f9) ((lambda (e3800@p e3801@rhs* e3802@lhs*) (values e3802@lhs* e3801@rhs* (list 'quasisyntax e3800@p))) e37fc@e37f9 e37fb@e37f7 e37fa@e37f5)))) e37f0@ls/false) ((lambda (e3806@t) ((lambda (e3808@ls/false) (if e3808@ls/false (apply (lambda (e380a@p e380b@q) (call-with-values (lambda () (e3749@quasi e380a@p e3765@lev)) (lambda (e381a@e380f e381b@e3811 e381c@e3813) (call-with-values (lambda () (e3749@quasi e380b@q e3765@lev)) (lambda (e3820@e3815 e3821@e3817 e3822@e3819) ((lambda (e3826@q e3827@rhs2* e3828@lhs2* e3829@p e382a@rhs* e382b@lhs*) (values (append e3828@lhs2* e382b@lhs*) (append e3827@rhs2* e382a@rhs*) (cons e3829@p e3826@q))) e3822@e3819 e3821@e3817 e3820@e3815 e381c@e3813 e381b@e3811 e381a@e380f)))))) e3808@ls/false) ((lambda (e3832@t) ((lambda (e3834@ls/false) (if e3834@ls/false (apply (lambda (e3836@x*) (call-with-values (lambda () (e3749@quasi e3836@x* e3765@lev)) (lambda (e383e@e3839 e383f@e383b e3840@e383d) ((lambda (e3844@x* e3845@rhs* e3846@lhs*) (values e3846@lhs* e3845@rhs* (list->vector e3844@x*))) e3840@e383d e383f@e383b e383e@e3839)))) e3834@ls/false) ((lambda (e384a@t) ((lambda (e384c@ls/false) (if e384c@ls/false (apply (lambda () (values '() '() e3764@p)) e384c@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e384a@t))) (e2eb6@syntax-dispatch e384a@t '_))) e3832@t))) (e2eb6@syntax-dispatch e3832@t '#(vector each-any)))) e3806@t))) (e2eb6@syntax-dispatch e3806@t '(any . any)))) e37ee@t))) (e2eb6@syntax-dispatch e37ee@t '(#(scheme-id quasisyntax) any)))) e37ea@t))) (e2eb6@syntax-dispatch e37ea@t '#(scheme-id unsyntax-splicing)))) e37b6@t))) (e2eb6@syntax-dispatch e37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) e3786@t))) (e2eb6@syntax-dispatch e3786@t '((#(scheme-id unsyntax) . each-any) . any)))) e3782@t))) (e2eb6@syntax-dispatch e3782@t '#(scheme-id unsyntax)))) e3768@t))) (e2eb6@syntax-dispatch e3768@t '(#(scheme-id unsyntax) any)))) e3764@p))) (lambda (e374a@x) ((lambda (e374c@t) ((lambda (e374e@ls/false) (if e374e@ls/false (apply (lambda (e3750@e) (call-with-values (lambda () (e3749@quasi e3750@e '0)) (lambda (e3758@e3753 e3759@e3755 e375a@e3757) ((lambda (e375e@v e375f@rhs* e3760@lhs*) (e2e6c@bless (list 'syntax-case (cons 'list e375f@rhs*) '() (list e3760@lhs* (list 'syntax e375e@v))))) e375a@e3757 e3759@e3755 e3758@e3753)))) e374e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e374c@t))) (e2eb6@syntax-dispatch e374c@t '(_ any)))) e374a@x)))) '#f)))) (set! e2ea8@define-struct-macro (lambda (e384e@stx) (e2f9f@syntax-violation '#f '"define-struct not supported" e384e@stx))) (set! e2eaa@define-record-type-macro (lambda (e3850@x) ((lambda (e3853@id e3855@get-record-name e3857@get-record-constructor-name e3859@get-record-predicate-name e385b@get-clause e385d@foo-rtd-code e385f@parent-rtd-code e3861@parent-rcd-code e3863@foo-rcd-code e3865@get-protocol-code e3867@get-fields e3869@get-mutator-indices e386b@get-mutators e386d@get-accessors e386f@enumerate e3871@do-define-record e3873@verify-clauses) (begin (set! e3853@id (lambda (e3a46@ctxt . e3a48@str*) (e2fa3@datum->syntax e3a46@ctxt (string->symbol (apply string-append (map (lambda (e3a4a@x) (if (symbol? e3a4a@x) (symbol->string e3a4a@x) (if (string? e3a4a@x) e3a4a@x (assertion-violation 'define-record-type '"BUG")))) e3a48@str*)))))) (set! e3855@get-record-name (lambda (e3a34@spec) ((lambda (e3a36@t) ((lambda (e3a38@ls/false) (if e3a38@ls/false (apply (lambda (e3a3a@foo e3a3b@make-foo e3a3c@foo?) e3a3a@foo) e3a38@ls/false) ((lambda (e3a40@t) ((lambda (e3a42@ls/false) (if e3a42@ls/false (apply (lambda (e3a44@foo) e3a44@foo) e3a42@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3a40@t))) (e2eb6@syntax-dispatch e3a40@t 'any))) e3a36@t))) (e2eb6@syntax-dispatch e3a36@t '(any any any)))) e3a34@spec))) (set! e3857@get-record-constructor-name (lambda (e3a20@spec) ((lambda (e3a22@t) ((lambda (e3a24@ls/false) (if e3a24@ls/false (apply (lambda (e3a26@foo e3a27@make-foo e3a28@foo?) e3a27@make-foo) e3a24@ls/false) ((lambda (e3a2c@t) ((lambda (e3a2e@ls/false) (if (and e3a2e@ls/false (apply (lambda (e3a30@foo) (e2cab@id? e3a30@foo)) e3a2e@ls/false)) (apply (lambda (e3a32@foo) (e3853@id e3a32@foo '"make-" (e2cc1@stx->datum e3a32@foo))) e3a2e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3a2c@t))) (e2eb6@syntax-dispatch e3a2c@t 'any))) e3a22@t))) (e2eb6@syntax-dispatch e3a22@t '(any any any)))) e3a20@spec))) (set! e3859@get-record-predicate-name (lambda (e3a0c@spec) ((lambda (e3a0e@t) ((lambda (e3a10@ls/false) (if e3a10@ls/false (apply (lambda (e3a12@foo e3a13@make-foo e3a14@foo?) e3a14@foo?) e3a10@ls/false) ((lambda (e3a18@t) ((lambda (e3a1a@ls/false) (if (and e3a1a@ls/false (apply (lambda (e3a1c@foo) (e2cab@id? e3a1c@foo)) e3a1a@ls/false)) (apply (lambda (e3a1e@foo) (e3853@id e3a1e@foo (e2cc1@stx->datum e3a1e@foo) '"?")) e3a1a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3a18@t))) (e2eb6@syntax-dispatch e3a18@t 'any))) e3a0e@t))) (e2eb6@syntax-dispatch e3a0e@t '(any any any)))) e3a0c@spec))) (set! e385b@get-clause (lambda (e39fa@id e39fb@ls) ((lambda (e39fe@t) ((lambda (e3a00@ls/false) (if e3a00@ls/false (apply (lambda () '#f) e3a00@ls/false) ((lambda (e3a02@t) ((lambda (e3a04@ls/false) (if e3a04@ls/false (apply (lambda (e3a06@x e3a07@rest e3a08@ls) (if (e2cb3@free-id=? (e2e6c@bless e39fa@id) e3a06@x) (cons e3a06@x e3a07@rest) (e385b@get-clause e39fa@id e3a08@ls))) e3a04@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3a02@t))) (e2eb6@syntax-dispatch e3a02@t '((any . any) . any)))) e39fe@t))) (e2eb6@syntax-dispatch e39fe@t '()))) e39fb@ls))) (set! e385d@foo-rtd-code (lambda (e39a8@name e39a9@clause* e39aa@parent-rtd-code) ((lambda (e39af@convert-field-spec*) (begin (set! e39af@convert-field-spec* (lambda (e39e0@ls) (list->vector (map (lambda (e39e2@x) ((lambda (e39e4@t) ((lambda (e39e6@ls/false) (if e39e6@ls/false (apply (lambda (e39e8@name e39e9@rest) (list 'mutable e39e8@name)) e39e6@ls/false) ((lambda (e39ec@t) ((lambda (e39ee@ls/false) (if e39ee@ls/false (apply (lambda (e39f0@name e39f1@rest) (list 'immutable e39f0@name)) e39ee@ls/false) ((lambda (e39f4@t) ((lambda (e39f6@ls/false) (if e39f6@ls/false (apply (lambda (e39f8@name) (list 'immutable e39f8@name)) e39f6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e39f4@t))) (e2eb6@syntax-dispatch e39f4@t 'any))) e39ec@t))) (e2eb6@syntax-dispatch e39ec@t '(#(scheme-id immutable) any . any)))) e39e4@t))) (e2eb6@syntax-dispatch e39e4@t '(#(scheme-id mutable) any . any)))) e39e2@x)) e39e0@ls)))) ((lambda (e39b0@uid-code e39b1@sealed? e39b2@opaque? e39b3@fields) (e2e6c@bless (list 'make-record-type-descriptor (list 'quote e39a8@name) e39aa@parent-rtd-code e39b0@uid-code e39b1@sealed? e39b2@opaque? e39b3@fields))) ((lambda (e39b8@t) ((lambda (e39ba@ls/false) (if e39ba@ls/false (apply (lambda () (list 'quote (gensym))) e39ba@ls/false) ((lambda (e39bc@t) ((lambda (e39be@ls/false) (if e39be@ls/false (apply (lambda (e39c0@uid) (list 'quote e39c0@uid)) e39be@ls/false) ((lambda (e39c2@t) ((lambda (e39c4@ls/false) (if e39c4@ls/false (apply (lambda () '#f) e39c4@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e39c2@t))) (e2eb6@syntax-dispatch e39c2@t '_))) e39bc@t))) (e2eb6@syntax-dispatch e39bc@t '(_ any)))) e39b8@t))) (e2eb6@syntax-dispatch e39b8@t '(_)))) (e385b@get-clause 'nongenerative e39a9@clause*)) ((lambda (e39c6@t) ((lambda (e39c8@ls/false) (if e39c8@ls/false (apply (lambda () '#t) e39c8@ls/false) ((lambda (e39ca@t) ((lambda (e39cc@ls/false) (if e39cc@ls/false (apply (lambda () '#f) e39cc@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e39ca@t))) (e2eb6@syntax-dispatch e39ca@t '_))) e39c6@t))) (e2eb6@syntax-dispatch e39c6@t '(_ #(atom #t))))) (e385b@get-clause 'sealed e39a9@clause*)) ((lambda (e39ce@t) ((lambda (e39d0@ls/false) (if e39d0@ls/false (apply (lambda () '#t) e39d0@ls/false) ((lambda (e39d2@t) ((lambda (e39d4@ls/false) (if e39d4@ls/false (apply (lambda () '#f) e39d4@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e39d2@t))) (e2eb6@syntax-dispatch e39d2@t '_))) e39ce@t))) (e2eb6@syntax-dispatch e39ce@t '(_ #(atom #t))))) (e385b@get-clause 'opaque e39a9@clause*)) ((lambda (e39d6@t) ((lambda (e39d8@ls/false) (if e39d8@ls/false (apply (lambda (e39da@field-spec*) (list 'quote (e39af@convert-field-spec* e39da@field-spec*))) e39d8@ls/false) ((lambda (e39dc@t) ((lambda (e39de@ls/false) (if e39de@ls/false (apply (lambda () ''#()) e39de@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e39dc@t))) (e2eb6@syntax-dispatch e39dc@t '_))) e39d6@t))) (e2eb6@syntax-dispatch e39d6@t '(_ . each-any)))) (e385b@get-clause 'fields e39a9@clause*))))) '#f))) (set! e385f@parent-rtd-code (lambda (e3990@clause*) ((lambda (e3992@t) ((lambda (e3994@ls/false) (if e3994@ls/false (apply (lambda (e3996@name) (list 'record-type-descriptor e3996@name)) e3994@ls/false) ((lambda (e3998@t) ((lambda (e399a@ls/false) (if e399a@ls/false (apply (lambda () ((lambda (e399c@t) ((lambda (e399e@ls/false) (if e399e@ls/false (apply (lambda (e39a0@rtd e39a1@rcd) e39a0@rtd) e399e@ls/false) ((lambda (e39a4@t) ((lambda (e39a6@ls/false) (if e39a6@ls/false (apply (lambda () '#f) e39a6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e39a4@t))) (e2eb6@syntax-dispatch e39a4@t '#(atom #f)))) e399c@t))) (e2eb6@syntax-dispatch e399c@t '(_ any any)))) (e385b@get-clause 'parent-rtd e3990@clause*))) e399a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3998@t))) (e2eb6@syntax-dispatch e3998@t '#(atom #f)))) e3992@t))) (e2eb6@syntax-dispatch e3992@t '(_ any)))) (e385b@get-clause 'parent e3990@clause*)))) (set! e3861@parent-rcd-code (lambda (e3978@clause*) ((lambda (e397a@t) ((lambda (e397c@ls/false) (if e397c@ls/false (apply (lambda (e397e@name) (list 'record-constructor-descriptor e397e@name)) e397c@ls/false) ((lambda (e3980@t) ((lambda (e3982@ls/false) (if e3982@ls/false (apply (lambda () ((lambda (e3984@t) ((lambda (e3986@ls/false) (if e3986@ls/false (apply (lambda (e3988@rtd e3989@rcd) e3989@rcd) e3986@ls/false) ((lambda (e398c@t) ((lambda (e398e@ls/false) (if e398e@ls/false (apply (lambda () '#f) e398e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e398c@t))) (e2eb6@syntax-dispatch e398c@t '#(atom #f)))) e3984@t))) (e2eb6@syntax-dispatch e3984@t '(_ any any)))) (e385b@get-clause 'parent-rtd e3978@clause*))) e3982@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3980@t))) (e2eb6@syntax-dispatch e3980@t '#(atom #f)))) e397a@t))) (e2eb6@syntax-dispatch e397a@t '(_ any)))) (e385b@get-clause 'parent e3978@clause*)))) (set! e3863@foo-rcd-code (lambda (e3970@clause* e3971@foo-rtd e3972@protocol e3973@parent-rcd-code) (list 'make-record-constructor-descriptor e3971@foo-rtd e3973@parent-rcd-code e3972@protocol))) (set! e3865@get-protocol-code (lambda (e3964@clause*) ((lambda (e3966@t) ((lambda (e3968@ls/false) (if e3968@ls/false (apply (lambda (e396a@expr) e396a@expr) e3968@ls/false) ((lambda (e396c@t) ((lambda (e396e@ls/false) (if e396e@ls/false (apply (lambda () '#f) e396e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e396c@t))) (e2eb6@syntax-dispatch e396c@t '_))) e3966@t))) (e2eb6@syntax-dispatch e3966@t '(_ any)))) (e385b@get-clause 'protocol e3964@clause*)))) (set! e3867@get-fields (lambda (e3952@clause*) ((lambda (e3954@t) ((lambda (e3956@ls/false) (if e3956@ls/false (apply (lambda () '()) e3956@ls/false) ((lambda (e3958@t) ((lambda (e395a@ls/false) (if e395a@ls/false (apply (lambda (e395c@f*) e395c@f*) e395a@ls/false) ((lambda (e395e@t) ((lambda (e3960@ls/false) (if e3960@ls/false (apply (lambda (e3962@rest) (e3867@get-fields e3962@rest)) e3960@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e395e@t))) (e2eb6@syntax-dispatch e395e@t '(_ . any)))) e3958@t))) (e2eb6@syntax-dispatch e3958@t '((#(scheme-id fields) . each-any) . _)))) e3954@t))) (e2eb6@syntax-dispatch e3954@t '()))) e3952@clause*))) (set! e3869@get-mutator-indices (lambda (e393a@fields) ((letrec ((e393c@f (lambda (e393e@fields e393f@i) ((lambda (e3942@t) ((lambda (e3944@ls/false) (if e3944@ls/false (apply (lambda () '()) e3944@ls/false) ((lambda (e3946@t) ((lambda (e3948@ls/false) (if e3948@ls/false (apply (lambda (e394a@rest) (cons e393f@i (e393c@f e394a@rest (+ e393f@i '1)))) e3948@ls/false) ((lambda (e394c@t) ((lambda (e394e@ls/false) (if e394e@ls/false (apply (lambda (e3950@rest) (e393c@f e3950@rest (+ e393f@i '1))) e394e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e394c@t))) (e2eb6@syntax-dispatch e394c@t '(_ . any)))) e3946@t))) (e2eb6@syntax-dispatch e3946@t '((#(scheme-id mutable) . _) . any)))) e3942@t))) (e2eb6@syntax-dispatch e3942@t '()))) e393e@fields)))) e393c@f) e393a@fields '0))) (set! e386b@get-mutators (lambda (e3910@foo e3911@fields) ((lambda (e3915@gen-name) (begin (set! e3915@gen-name (lambda (e3938@x) (e2fa3@datum->syntax e3910@foo (string->symbol (string-append (symbol->string (e2fa5@syntax->datum e3910@foo)) '"-" (symbol->string (e2fa5@syntax->datum e3938@x)) '"-set!"))))) ((letrec ((e3916@f (lambda (e3918@fields) ((lambda (e391a@t) ((lambda (e391c@ls/false) (if e391c@ls/false (apply (lambda () '()) e391c@ls/false) ((lambda (e391e@t) ((lambda (e3920@ls/false) (if e3920@ls/false (apply (lambda (e3922@name e3923@accessor e3924@mutator e3925@rest) (cons e3924@mutator (e3916@f e3925@rest))) e3920@ls/false) ((lambda (e392a@t) ((lambda (e392c@ls/false) (if e392c@ls/false (apply (lambda (e392e@name e392f@rest) (cons (e3915@gen-name e392e@name) (e3916@f e392f@rest))) e392c@ls/false) ((lambda (e3932@t) ((lambda (e3934@ls/false) (if e3934@ls/false (apply (lambda (e3936@rest) (e3916@f e3936@rest)) e3934@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3932@t))) (e2eb6@syntax-dispatch e3932@t '(_ . any)))) e392a@t))) (e2eb6@syntax-dispatch e392a@t '((#(scheme-id mutable) any) . any)))) e391e@t))) (e2eb6@syntax-dispatch e391e@t '((#(scheme-id mutable) any any any) . any)))) e391a@t))) (e2eb6@syntax-dispatch e391a@t '()))) e3918@fields)))) e3916@f) e3911@fields))) '#f))) (set! e386d@get-accessors (lambda (e38cc@foo e38cd@fields) ((lambda (e38d1@gen-name) (begin (set! e38d1@gen-name (lambda (e390e@x) (e2fa3@datum->syntax e38cc@foo (string->symbol (string-append (symbol->string (e2fa5@syntax->datum e38cc@foo)) '"-" (symbol->string (e2fa5@syntax->datum e390e@x))))))) (map (lambda (e38d2@field) ((lambda (e38d4@t) ((lambda (e38d6@ls/false) (if (and e38d6@ls/false (apply (lambda (e38d8@name e38d9@accessor e38da@mutator) (e2cab@id? e38d9@accessor)) e38d6@ls/false)) (apply (lambda (e38de@name e38df@accessor e38e0@mutator) e38df@accessor) e38d6@ls/false) ((lambda (e38e4@t) ((lambda (e38e6@ls/false) (if (and e38e6@ls/false (apply (lambda (e38e8@name e38e9@accessor) (e2cab@id? e38e9@accessor)) e38e6@ls/false)) (apply (lambda (e38ec@name e38ed@accessor) e38ed@accessor) e38e6@ls/false) ((lambda (e38f0@t) ((lambda (e38f2@ls/false) (if (and e38f2@ls/false (apply (lambda (e38f4@name) (e2cab@id? e38f4@name)) e38f2@ls/false)) (apply (lambda (e38f6@name) (e38d1@gen-name e38f6@name)) e38f2@ls/false) ((lambda (e38f8@t) ((lambda (e38fa@ls/false) (if (and e38fa@ls/false (apply (lambda (e38fc@name) (e2cab@id? e38fc@name)) e38fa@ls/false)) (apply (lambda (e38fe@name) (e38d1@gen-name e38fe@name)) e38fa@ls/false) ((lambda (e3900@t) ((lambda (e3902@ls/false) (if (and e3902@ls/false (apply (lambda (e3904@name) (e2cab@id? e3904@name)) e3902@ls/false)) (apply (lambda (e3906@name) (e38d1@gen-name e3906@name)) e3902@ls/false) ((lambda (e3908@t) ((lambda (e390a@ls/false) (if e390a@ls/false (apply (lambda (e390c@others) (e2f9f@syntax-violation '#f '"invalid field spec" e38d2@field)) e390a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3908@t))) (e2eb6@syntax-dispatch e3908@t 'any))) e3900@t))) (e2eb6@syntax-dispatch e3900@t 'any))) e38f8@t))) (e2eb6@syntax-dispatch e38f8@t '(#(scheme-id immutable) any)))) e38f0@t))) (e2eb6@syntax-dispatch e38f0@t '(#(scheme-id mutable) any)))) e38e4@t))) (e2eb6@syntax-dispatch e38e4@t '(#(scheme-id immutable) any any)))) e38d4@t))) (e2eb6@syntax-dispatch e38d4@t '(#(scheme-id mutable) any any any)))) e38d2@field)) e38cd@fields))) '#f))) (set! e386f@enumerate (lambda (e38c4@ls) ((letrec ((e38c6@f (lambda (e38c8@ls e38c9@i) (if (null? e38c8@ls) '() (cons e38c9@i (e38c6@f (cdr e38c8@ls) (+ e38c9@i '1))))))) e38c6@f) e38c4@ls '0))) (set! e3871@do-define-record (lambda (e389c@namespec e389d@clause*) ((lambda (e38a0@foo) ((lambda (e38a2@foo-rtd) ((lambda (e38a4@foo-rcd) ((lambda (e38a6@protocol) ((lambda (e38a8@make-foo) ((lambda (e38aa@fields) ((lambda (e38ac@idx*) ((lambda (e38ae@foo-x*) ((lambda (e38b0@set-foo-x!*) ((lambda (e38b2@set-foo-idx*) ((lambda (e38b4@foo?) ((lambda (e38b6@foo-rtd-code) ((lambda (e38b8@foo-rcd-code) ((lambda (e38ba@protocol-code) ((lambda () (e2e6c@bless (cons 'begin (cons (list 'define e38a2@foo-rtd e38b6@foo-rtd-code) (cons (list 'define e38a6@protocol e38ba@protocol-code) (cons (list 'define e38a4@foo-rcd e38b8@foo-rcd-code) (cons (list 'define-syntax e38a0@foo (list 'list ''$rtd (list 'syntax e38a2@foo-rtd) (list 'syntax e38a4@foo-rcd))) (cons (list 'define e38b4@foo? (list 'record-predicate e38a2@foo-rtd)) (cons (list 'define e38a8@make-foo (list 'record-constructor e38a4@foo-rcd)) (append (map (lambda (e38bc@foo-x e38bd@idx) (list 'define e38bc@foo-x (list 'record-accessor e38a2@foo-rtd e38bd@idx))) e38ae@foo-x* e38ac@idx*) (map (lambda (e38c0@set-foo-x! e38c1@idx) (list 'define e38c0@set-foo-x! (list 'record-mutator e38a2@foo-rtd e38c1@idx))) e38b0@set-foo-x!* e38b2@set-foo-idx*))))))))))))) (e3865@get-protocol-code e389d@clause*))) (e3863@foo-rcd-code e389d@clause* e38a2@foo-rtd e38a6@protocol (e3861@parent-rcd-code e389d@clause*)))) (e385d@foo-rtd-code e38a0@foo e389d@clause* (e385f@parent-rtd-code e389d@clause*)))) (e3859@get-record-predicate-name e389c@namespec))) (e3869@get-mutator-indices e38aa@fields))) (e386b@get-mutators e38a0@foo e38aa@fields))) (e386d@get-accessors e38a0@foo e38aa@fields))) (e386f@enumerate e38aa@fields))) (e3867@get-fields e389d@clause*))) (e3857@get-record-constructor-name e389c@namespec))) (gensym))) (gensym))) (gensym))) (e3855@get-record-name e389c@namespec)))) (set! e3873@verify-clauses (lambda (e387c@x e387d@cls*) ((lambda (e3881@valid-kwds e3883@free-id-member?) (begin (set! e3881@valid-kwds (map e2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! e3883@free-id-member? (lambda (e3898@x e3899@ls) (and (pair? e3899@ls) (or (e2cb3@free-id=? e3898@x (car e3899@ls)) (e3883@free-id-member? e3898@x (cdr e3899@ls)))))) ((letrec ((e3884@f (lambda (e3886@cls* e3887@seen*) (if (not (null? e3886@cls*)) ((lambda (e388a@t) ((lambda (e388c@ls/false) (if e388c@ls/false (apply (lambda (e388e@kwd e388f@rest) (if (or (not (e2cab@id? e388e@kwd)) (not (e3883@free-id-member? e388e@kwd e3881@valid-kwds))) (e2f9f@syntax-violation '#f '"not a valid define-record-type keyword" e388e@kwd) (if (e2cb9@bound-id-member? e388e@kwd e3887@seen*) (e2f9f@syntax-violation '#f '"duplicate use of keyword " e387c@x e388e@kwd) (e3884@f (cdr e3886@cls*) (cons e388e@kwd e3887@seen*))))) e388c@ls/false) ((lambda (e3892@t) ((lambda (e3894@ls/false) (if e3894@ls/false (apply (lambda (e3896@cls) (e2f9f@syntax-violation '#f '"malformed define-record-type clause" e3896@cls)) e3894@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3892@t))) (e2eb6@syntax-dispatch e3892@t 'any))) e388a@t))) (e2eb6@syntax-dispatch e388a@t '(any . any)))) (car e3886@cls*)) (void))))) e3884@f) e387d@cls* '()))) '#f '#f))) ((lambda (e3874@t) ((lambda (e3876@ls/false) (if e3876@ls/false (apply (lambda (e3878@namespec e3879@clause*) (begin (e3873@verify-clauses e3850@x e3879@clause*) (e3871@do-define-record e3878@namespec e3879@clause*))) e3876@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3874@t))) (e2eb6@syntax-dispatch e3874@t '(_ any . each-any)))) e3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! e2eac@define-condition-type-macro (lambda (e3a4c@x) ((lambda (e3a4f@mkname) (begin (set! e3a4f@mkname (lambda (e3a7c@name e3a7d@suffix) (e2fa3@datum->syntax e3a7c@name (string->symbol (string-append (symbol->string (e2fa5@syntax->datum e3a7c@name)) e3a7d@suffix))))) ((lambda (e3a50@t) ((lambda (e3a52@ls/false) (if (and e3a52@ls/false (apply (lambda (e3a54@ctxt e3a55@name e3a56@super e3a57@constructor e3a58@predicate e3a59@field* e3a5a@accessor*) (and (e2cab@id? e3a55@name) (e2cab@id? e3a56@super) (e2cab@id? e3a57@constructor) (e2cab@id? e3a58@predicate) (for-all e2cab@id? e3a59@field*) (for-all e2cab@id? e3a5a@accessor*))) e3a52@ls/false)) (apply (lambda (e3a62@ctxt e3a63@name e3a64@super e3a65@constructor e3a66@predicate e3a67@field* e3a68@accessor*) ((lambda (e3a70@aux-accessor*) (e2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list e3a63@name e3a65@constructor (gensym)) (cons (list 'parent e3a64@super) (cons (cons 'fields (map (lambda (e3a72@field e3a73@aux) (list 'immutable e3a72@field e3a73@aux)) e3a67@field* e3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define e3a66@predicate (list 'condition-predicate (list 'record-type-descriptor e3a63@name))) (map (lambda (e3a76@accessor e3a77@aux) (list 'define e3a76@accessor (list 'condition-accessor (list 'record-type-descriptor e3a63@name) e3a77@aux))) e3a68@accessor* e3a70@aux-accessor*)))))) (map (lambda (e3a7a@x) (gensym)) e3a68@accessor*))) e3a52@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3a50@t))) (e2eb6@syntax-dispatch e3a50@t '(any any any any any . #(each (any any)))))) e3a4c@x))) '#f))) (set! e2eae@incorrect-usage-macro (lambda (e3a80@e) (e2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" e3a80@e))) (set! e2eb0@parameterize-macro (lambda (e3a82@e) ((lambda (e3a84@t) ((lambda (e3a86@ls/false) (if e3a86@ls/false (apply (lambda (e3a88@b e3a89@b*) (e2e6c@bless (cons 'let (cons '() (cons e3a88@b e3a89@b*))))) e3a86@ls/false) ((lambda (e3a8c@t) ((lambda (e3a8e@ls/false) (if e3a8e@ls/false (apply (lambda (e3a90@olhs* e3a91@orhs* e3a92@b e3a93@b*) ((lambda (e3a98@lhs* e3a99@rhs*) (e2e6c@bless (cons (list 'lambda (append e3a98@lhs* e3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (e3a9c@lhs e3a9d@rhs) (list 'let (list (list 't (list e3a9c@lhs))) (list e3a9c@lhs e3a9d@rhs) (cons 'set! (cons e3a9d@rhs '(t))))) e3a98@lhs* e3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons e3a92@b e3a93@b*))) '(swap)))))) (append e3a90@olhs* e3a91@orhs*)))) (e2f8d@generate-temporaries e3a90@olhs*) (e2f8d@generate-temporaries e3a91@orhs*))) e3a8e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3a8c@t))) (e2eb6@syntax-dispatch e3a8c@t '(_ #(each (any any)) any . each-any)))) e3a84@t))) (e2eb6@syntax-dispatch e3a84@t '(_ () any . each-any)))) e3a82@e))) (set! e2eb2@foreign-call-transformer (lambda (e3aa0@e e3aa1@r e3aa2@mr) ((lambda (e3aa6@t) ((lambda (e3aa8@ls/false) (if e3aa8@ls/false (apply (lambda (e3aaa@name e3aab@arg*) (cons 'foreign-call (cons (e2ed8@chi-expr e3aaa@name e3aa1@r e3aa2@mr) (e2ed4@chi-expr* e3aab@arg* e3aa1@r e3aa2@mr)))) e3aa8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3aa6@t))) (e2eb6@syntax-dispatch e3aa6@t '(_ any . each-any)))) e3aa0@e))) (set! e2eb4@convert-pattern (lambda (e3aae@pattern e3aaf@keys) ((lambda (e3ab3@cvt* e3ab5@cvt) (begin (set! e3ab3@cvt* (lambda (e3b52@p* e3b53@n e3b54@ids) (if (null? e3b52@p*) (values '() e3b54@ids) (call-with-values (lambda () (e3ab3@cvt* (cdr e3b52@p*) e3b53@n e3b54@ids)) (lambda (e3b5c@e3b59 e3b5d@e3b5b) ((lambda (e3b60@ids e3b61@y) (call-with-values (lambda () (e3ab5@cvt (car e3b52@p*) e3b53@n e3b60@ids)) (lambda (e3b68@e3b65 e3b69@e3b67) ((lambda (e3b6c@ids e3b6d@x) (values (cons e3b6d@x e3b61@y) e3b6c@ids)) e3b69@e3b67 e3b68@e3b65)))) e3b5d@e3b5b e3b5c@e3b59)))))) (set! e3ab5@cvt (lambda (e3ab6@p e3ab7@n e3ab8@ids) ((lambda (e3abc@t) ((lambda (e3abe@ls/false) (if (and e3abe@ls/false (apply (lambda (e3ac0@id) (e2cab@id? e3ac0@id)) e3abe@ls/false)) (apply (lambda (e3ac2@id) (if (e2cb9@bound-id-member? e3ab6@p e3aaf@keys) (values (vector 'free-id e3ab6@p) e3ab8@ids) (if (e2cb3@free-id=? e3ab6@p (e2e40@scheme-stx '_)) (values '_ e3ab8@ids) (values 'any (cons (cons e3ab6@p e3ab7@n) e3ab8@ids))))) e3abe@ls/false) ((lambda (e3ac4@t) ((lambda (e3ac6@ls/false) (if (and e3ac6@ls/false (apply (lambda (e3ac8@p e3ac9@dots) (e2eb8@ellipsis? e3ac9@dots)) e3ac6@ls/false)) (apply (lambda (e3acc@p e3acd@dots) (call-with-values (lambda () (e3ab5@cvt e3acc@p (+ e3ab7@n '1) e3ab8@ids)) (lambda (e3ad4@e3ad1 e3ad5@e3ad3) ((lambda (e3ad8@ids e3ad9@p) (values (if (eq? e3ad9@p 'any) 'each-any (vector 'each e3ad9@p)) e3ad8@ids)) e3ad5@e3ad3 e3ad4@e3ad1)))) e3ac6@ls/false) ((lambda (e3adc@t) ((lambda (e3ade@ls/false) (if (and e3ade@ls/false (apply (lambda (e3ae0@x e3ae1@dots e3ae2@ys e3ae3@z) (e2eb8@ellipsis? e3ae1@dots)) e3ade@ls/false)) (apply (lambda (e3ae8@x e3ae9@dots e3aea@ys e3aeb@z) (call-with-values (lambda () (e3ab5@cvt e3aeb@z e3ab7@n e3ab8@ids)) (lambda (e3af4@e3af1 e3af5@e3af3) ((lambda (e3af8@ids e3af9@z) (call-with-values (lambda () (e3ab3@cvt* e3aea@ys e3ab7@n e3af8@ids)) (lambda (e3b00@e3afd e3b01@e3aff) ((lambda (e3b04@ids e3b05@ys) (call-with-values (lambda () (e3ab5@cvt e3ae8@x (+ e3ab7@n '1) e3b04@ids)) (lambda (e3b0c@e3b09 e3b0d@e3b0b) ((lambda (e3b10@ids e3b11@x) (values (vector 'each+ e3b11@x (reverse e3b05@ys) e3af9@z) e3b10@ids)) e3b0d@e3b0b e3b0c@e3b09)))) e3b01@e3aff e3b00@e3afd)))) e3af5@e3af3 e3af4@e3af1)))) e3ade@ls/false) ((lambda (e3b14@t) ((lambda (e3b16@ls/false) (if e3b16@ls/false (apply (lambda (e3b18@x e3b19@y) (call-with-values (lambda () (e3ab5@cvt e3b19@y e3ab7@n e3ab8@ids)) (lambda (e3b20@e3b1d e3b21@e3b1f) ((lambda (e3b24@ids e3b25@y) (call-with-values (lambda () (e3ab5@cvt e3b18@x e3ab7@n e3b24@ids)) (lambda (e3b2c@e3b29 e3b2d@e3b2b) ((lambda (e3b30@ids e3b31@x) (values (cons e3b31@x e3b25@y) e3b30@ids)) e3b2d@e3b2b e3b2c@e3b29)))) e3b21@e3b1f e3b20@e3b1d)))) e3b16@ls/false) ((lambda (e3b34@t) ((lambda (e3b36@ls/false) (if e3b36@ls/false (apply (lambda () (values '() e3ab8@ids)) e3b36@ls/false) ((lambda (e3b38@t) ((lambda (e3b3a@ls/false) (if (and e3b3a@ls/false (apply (lambda (e3b3c@p) (not (e2c73@stx? e3b3c@p))) e3b3a@ls/false)) (apply (lambda (e3b3e@p) (call-with-values (lambda () (e3ab5@cvt e3b3e@p e3ab7@n e3ab8@ids)) (lambda (e3b44@e3b41 e3b45@e3b43) ((lambda (e3b48@ids e3b49@p) (values (vector 'vector e3b49@p) e3b48@ids)) e3b45@e3b43 e3b44@e3b41)))) e3b3a@ls/false) ((lambda (e3b4c@t) ((lambda (e3b4e@ls/false) (if e3b4e@ls/false (apply (lambda (e3b50@datum) (values (vector 'atom (e2cc1@stx->datum e3b50@datum)) e3ab8@ids)) e3b4e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3b4c@t))) (e2eb6@syntax-dispatch e3b4c@t 'any))) e3b38@t))) (e2eb6@syntax-dispatch e3b38@t '#(vector each-any)))) e3b34@t))) (e2eb6@syntax-dispatch e3b34@t '()))) e3b14@t))) (e2eb6@syntax-dispatch e3b14@t '(any . any)))) e3adc@t))) (e2eb6@syntax-dispatch e3adc@t '(any any . #(each+ any () any))))) e3ac4@t))) (e2eb6@syntax-dispatch e3ac4@t '(any any)))) e3abc@t))) (e2eb6@syntax-dispatch e3abc@t 'any))) e3ab6@p))) (e3ab5@cvt e3aae@pattern '0 '()))) '#f '#f))) (set! e2eb6@syntax-dispatch ((lambda () ((lambda (e3b71@stx^ e3b73@match-each e3b75@match-each+ e3b77@match-each-any e3b79@match-empty e3b7b@combine e3b7d@match* e3b7f@match) (begin (set! e3b71@stx^ (lambda (e3c4c@e e3c4d@m* e3c4e@s* e3c4f@ae*) (if (and (null? e3c4d@m*) (null? e3c4e@s*) (null? e3c4f@ae*)) e3c4c@e (e2c93@mkstx e3c4c@e e3c4d@m* e3c4e@s* e3c4f@ae*)))) (set! e3b73@match-each (lambda (e3c2c@e e3c2d@p e3c2e@m* e3c2f@s* e3c30@ae*) (if (pair? e3c2c@e) ((lambda (e3c36@first) (and e3c36@first ((lambda (e3c38@rest) (and e3c38@rest (cons e3c36@first e3c38@rest))) (e3b73@match-each (cdr e3c2c@e) e3c2d@p e3c2e@m* e3c2f@s* e3c30@ae*)))) (e3b7f@match (car e3c2c@e) e3c2d@p e3c2e@m* e3c2f@s* e3c30@ae* '())) (if (null? e3c2c@e) '() (if (e2c73@stx? e3c2c@e) (and (not (e2c29@top-marked? e3c2e@m*)) (call-with-values (lambda () (e2c91@join-wraps e3c2e@m* e3c2f@s* e3c30@ae* e3c2c@e)) (lambda (e3c40@e3c3b e3c41@e3c3d e3c42@e3c3f) ((lambda (e3c46@ae* e3c47@s* e3c48@m*) (e3b73@match-each (e2c77@stx-expr e3c2c@e) e3c2d@p e3c48@m* e3c47@s* e3c46@ae*)) e3c42@e3c3f e3c41@e3c3d e3c40@e3c3b)))) (if (e284a@e2769@annotation? e3c2c@e) (e3b73@match-each (e284c@e276d@annotation-expression e3c2c@e) e3c2d@p e3c2e@m* e3c2f@s* e3c30@ae*) '#f)))))) (set! e3b75@match-each+ (lambda (e3bec@e e3bed@x-pat e3bee@y-pat e3bef@z-pat e3bf0@m* e3bf1@s* e3bf2@ae* e3bf3@r) ((letrec ((e3bfc@f (lambda (e3bfe@e e3bff@m* e3c00@s* e3c01@ae*) (if (pair? e3bfe@e) (call-with-values (lambda () (e3bfc@f (cdr e3bfe@e) e3bff@m* e3c00@s* e3c01@ae*)) (lambda (e3c0c@e3c07 e3c0d@e3c09 e3c0e@e3c0b) ((lambda (e3c12@r e3c13@y-pat e3c14@xr*) (if e3c12@r (if (null? e3c13@y-pat) ((lambda (e3c18@xr) (if e3c18@xr (values (cons e3c18@xr e3c14@xr*) e3c13@y-pat e3c12@r) (values '#f '#f '#f))) (e3b7f@match (car e3bfe@e) e3bed@x-pat e3bff@m* e3c00@s* e3c01@ae* '())) (values '() (cdr e3c13@y-pat) (e3b7f@match (car e3bfe@e) (car e3c13@y-pat) e3bff@m* e3c00@s* e3c01@ae* e3c12@r))) (values '#f '#f '#f))) e3c0e@e3c0b e3c0d@e3c09 e3c0c@e3c07))) (if (e2c73@stx? e3bfe@e) (if (e2c29@top-marked? e3bff@m*) (values '() e3bee@y-pat (e3b7f@match e3bfe@e e3bef@z-pat e3bff@m* e3c00@s* e3c01@ae* e3bf3@r)) (call-with-values (lambda () (e2c91@join-wraps e3bff@m* e3c00@s* e3c01@ae* e3bfe@e)) (lambda (e3c20@e3c1b e3c21@e3c1d e3c22@e3c1f) ((lambda (e3c26@ae* e3c27@s* e3c28@m*) (e3bfc@f (e2c77@stx-expr e3bfe@e) e3c28@m* e3c27@s* e3c26@ae*)) e3c22@e3c1f e3c21@e3c1d e3c20@e3c1b)))) (if (e284a@e2769@annotation? e3bfe@e) (e3bfc@f (e284c@e276d@annotation-expression e3bfe@e) e3bff@m* e3c00@s* e3c01@ae*) (values '() e3bee@y-pat (e3b7f@match e3bfe@e e3bef@z-pat e3bff@m* e3c00@s* e3c01@ae* e3bf3@r)))))))) e3bfc@f) e3bec@e e3bf0@m* e3bf1@s* e3bf2@ae*))) (set! e3b77@match-each-any (lambda (e3bd0@e e3bd1@m* e3bd2@s* e3bd3@ae*) (if (pair? e3bd0@e) ((lambda (e3bd8@l) (and e3bd8@l (cons (e3b71@stx^ (car e3bd0@e) e3bd1@m* e3bd2@s* e3bd3@ae*) e3bd8@l))) (e3b77@match-each-any (cdr e3bd0@e) e3bd1@m* e3bd2@s* e3bd3@ae*)) (if (null? e3bd0@e) '() (if (e2c73@stx? e3bd0@e) (and (not (e2c29@top-marked? e3bd1@m*)) (call-with-values (lambda () (e2c91@join-wraps e3bd1@m* e3bd2@s* e3bd3@ae* e3bd0@e)) (lambda (e3be0@e3bdb e3be1@e3bdd e3be2@e3bdf) ((lambda (e3be6@ae* e3be7@s* e3be8@m*) (e3b77@match-each-any (e2c77@stx-expr e3bd0@e) e3be8@m* e3be7@s* e3be6@ae*)) e3be2@e3bdf e3be1@e3bdd e3be0@e3bdb)))) (if (e284a@e2769@annotation? e3bd0@e) (e3b77@match-each-any (e284c@e276d@annotation-expression e3bd0@e) e3bd1@m* e3bd2@s* e3bd3@ae*) '#f)))))) (set! e3b79@match-empty (lambda (e3bca@p e3bcb@r) (if (null? e3bca@p) e3bcb@r (if (eq? e3bca@p '_) e3bcb@r (if (eq? e3bca@p 'any) (cons '() e3bcb@r) (if (pair? e3bca@p) (e3b79@match-empty (car e3bca@p) (e3b79@match-empty (cdr e3bca@p) e3bcb@r)) (if (eq? e3bca@p 'each-any) (cons '() e3bcb@r) ((lambda (e3bce@t) (if (memv e3bce@t '(each)) (e3b79@match-empty (vector-ref e3bca@p '1) e3bcb@r) (if (memv e3bce@t '(each+)) (e3b79@match-empty (vector-ref e3bca@p '1) (e3b79@match-empty (reverse (vector-ref e3bca@p '2)) (e3b79@match-empty (vector-ref e3bca@p '3) e3bcb@r))) (if (memv e3bce@t '(free-id atom)) e3bcb@r (if (memv e3bce@t '(scheme-id atom)) e3bcb@r (if (memv e3bce@t '(vector)) (e3b79@match-empty (vector-ref e3bca@p '1) e3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" e3bca@p))))))) (vector-ref e3bca@p '0))))))))) (set! e3b7b@combine (lambda (e3bc6@r* e3bc7@r) (if (null? (car e3bc6@r*)) e3bc7@r (cons (map car e3bc6@r*) (e3b7b@combine (map cdr e3bc6@r*) e3bc7@r))))) (set! e3b7d@match* (lambda (e3ba2@e e3ba3@p e3ba4@m* e3ba5@s* e3ba6@ae* e3ba7@r) (if (null? e3ba3@p) (and (null? e3ba2@e) e3ba7@r) (if (pair? e3ba3@p) (and (pair? e3ba2@e) (e3b7f@match (car e3ba2@e) (car e3ba3@p) e3ba4@m* e3ba5@s* e3ba6@ae* (e3b7f@match (cdr e3ba2@e) (cdr e3ba3@p) e3ba4@m* e3ba5@s* e3ba6@ae* e3ba7@r))) (if (eq? e3ba3@p 'each-any) ((lambda (e3bae@l) (and e3bae@l (cons e3bae@l e3ba7@r))) (e3b77@match-each-any e3ba2@e e3ba4@m* e3ba5@s* e3ba6@ae*)) ((lambda (e3bb0@t) (if (memv e3bb0@t '(each)) (if (null? e3ba2@e) (e3b79@match-empty (vector-ref e3ba3@p '1) e3ba7@r) ((lambda (e3bb2@r*) (and e3bb2@r* (e3b7b@combine e3bb2@r* e3ba7@r))) (e3b73@match-each e3ba2@e (vector-ref e3ba3@p '1) e3ba4@m* e3ba5@s* e3ba6@ae*))) (if (memv e3bb0@t '(free-id)) (and (symbol? e3ba2@e) (e2c29@top-marked? e3ba4@m*) (e2cb3@free-id=? (e3b71@stx^ e3ba2@e e3ba4@m* e3ba5@s* e3ba6@ae*) (vector-ref e3ba3@p '1)) e3ba7@r) (if (memv e3bb0@t '(scheme-id)) (and (symbol? e3ba2@e) (e2c29@top-marked? e3ba4@m*) (e2cb3@free-id=? (e3b71@stx^ e3ba2@e e3ba4@m* e3ba5@s* e3ba6@ae*) (e2e40@scheme-stx (vector-ref e3ba3@p '1))) e3ba7@r) (if (memv e3bb0@t '(each+)) (call-with-values (lambda () (e3b75@match-each+ e3ba2@e (vector-ref e3ba3@p '1) (vector-ref e3ba3@p '2) (vector-ref e3ba3@p '3) e3ba4@m* e3ba5@s* e3ba6@ae* e3ba7@r)) (lambda (e3bba@e3bb5 e3bbb@e3bb7 e3bbc@e3bb9) ((lambda (e3bc0@r e3bc1@y-pat e3bc2@xr*) (and e3bc0@r (null? e3bc1@y-pat) (if (null? e3bc2@xr*) (e3b79@match-empty (vector-ref e3ba3@p '1) e3bc0@r) (e3b7b@combine e3bc2@xr* e3bc0@r)))) e3bbc@e3bb9 e3bbb@e3bb7 e3bba@e3bb5))) (if (memv e3bb0@t '(atom)) (and (fast-equal? (vector-ref e3ba3@p '1) (e2cbf@strip e3ba2@e e3ba4@m*)) e3ba7@r) (if (memv e3bb0@t '(vector)) (and (vector? e3ba2@e) (e3b7f@match (vector->list e3ba2@e) (vector-ref e3ba3@p '1) e3ba4@m* e3ba5@s* e3ba6@ae* e3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" e3ba3@p)))))))) (vector-ref e3ba3@p '0))))))) (set! e3b7f@match (lambda (e3b84@e e3b85@p e3b86@m* e3b87@s* e3b88@ae* e3b89@r) (if (not e3b89@r) '#f (if (eq? e3b85@p '_) e3b89@r (if (eq? e3b85@p 'any) (cons (e3b71@stx^ e3b84@e e3b86@m* e3b87@s* e3b88@ae*) e3b89@r) (if (e2c73@stx? e3b84@e) (and (not (e2c29@top-marked? e3b86@m*)) (call-with-values (lambda () (e2c91@join-wraps e3b86@m* e3b87@s* e3b88@ae* e3b84@e)) (lambda (e3b96@e3b91 e3b97@e3b93 e3b98@e3b95) ((lambda (e3b9c@ae* e3b9d@s* e3b9e@m*) (e3b7f@match (e2c77@stx-expr e3b84@e) e3b85@p e3b9e@m* e3b9d@s* e3b9c@ae* e3b89@r)) e3b98@e3b95 e3b97@e3b93 e3b96@e3b91)))) (if (e284a@e2769@annotation? e3b84@e) (e3b7f@match (e284c@e276d@annotation-expression e3b84@e) e3b85@p e3b86@m* e3b87@s* e3b88@ae* e3b89@r) (e3b7d@match* e3b84@e e3b85@p e3b86@m* e3b87@s* e3b88@ae* e3b89@r)))))))) (lambda (e3b80@e e3b81@p) (e3b7f@match e3b80@e e3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2eb8@ellipsis? (lambda (e3c54@x) (and (e2cab@id? e3c54@x) (e2cb3@free-id=? e3c54@x (e2e40@scheme-stx '...))))) (set! e2eba@underscore? (lambda (e3c56@x) (and (e2cab@id? e3c56@x) (e2cb3@free-id=? e3c56@x (e2e40@scheme-stx '_))))) (set! e2ebc@verify-literals (lambda (e3c58@lits e3c59@expr) (for-each (lambda (e3c5c@x) (if (or (not (e2cab@id? e3c5c@x)) (e2eb8@ellipsis? e3c5c@x) (e2eba@underscore? e3c5c@x)) (e2f9f@syntax-violation '#f '"invalid literal" e3c59@expr e3c5c@x) (void))) e3c58@lits))) (set! e2ebe@syntax-case-transformer ((lambda () ((lambda (e3c5f@build-dispatch-call e3c61@invalid-ids-error e3c63@gen-clause e3c65@gen-syntax-case) (begin (set! e3c5f@build-dispatch-call (lambda (e3cd0@pvars e3cd1@expr e3cd2@y e3cd3@r e3cd4@mr) ((lambda (e3cda@ids e3cdb@levels) ((lambda (e3cde@labels e3cdf@new-vars) ((lambda (e3ce2@body) (list '(primitive apply) (e2c07@e2b47@build-lambda '#f e3cdf@new-vars e3ce2@body) e3cd2@y)) (e2ed8@chi-expr (e2c97@add-subst (e2c66@make-full-rib e3cda@ids e3cde@labels) e3cd1@expr) (append (map (lambda (e3ce4@label e3ce5@var e3ce6@level) (cons e3ce4@label (e2ccb@make-binding 'syntax (cons e3ce5@var e3ce6@level)))) e3cde@labels e3cdf@new-vars (map cdr e3cd0@pvars)) e3cd3@r) e3cd4@mr))) (map e2c2f@gen-label e3cda@ids) (map e2c2b@gen-lexical e3cda@ids))) (map car e3cd0@pvars) (map cdr e3cd0@pvars)))) (set! e3c61@invalid-ids-error (lambda (e3cc4@id* e3cc5@e e3cc6@class) ((letrec ((e3cca@find (lambda (e3ccc@id* e3ccd@ok*) (if (null? e3ccc@id*) (e2f9f@syntax-violation '#f '"invalid syntax" e3cc5@e) (if (e2cab@id? (car e3ccc@id*)) (if (e2cb9@bound-id-member? (car e3ccc@id*) e3ccd@ok*) (e2f9b@syntax-error (car e3ccc@id*) '"duplicate " e3cc6@class) (e3cca@find (cdr e3ccc@id*) (cons (car e3ccc@id*) e3ccd@ok*))) (e2f9b@syntax-error (car e3ccc@id*) '"invalid " e3cc6@class)))))) e3cca@find) e3cc4@id* '()))) (set! e3c63@gen-clause (lambda (e3c9c@x e3c9d@keys e3c9e@clauses e3c9f@r e3ca0@mr e3ca1@pat e3ca2@fender e3ca3@expr) (call-with-values (lambda () (e2eb4@convert-pattern e3ca1@pat e3c9d@keys)) (lambda (e3cb0@e3cad e3cb1@e3caf) ((lambda (e3cb4@pvars e3cb5@p) (if (not (e2cb7@distinct-bound-ids? (map car e3cb4@pvars))) (e3c61@invalid-ids-error (map car e3cb4@pvars) e3ca1@pat '"pattern variable") (if (not (for-all (lambda (e3cb8@x) (not (e2eb8@ellipsis? (car e3cb8@x)))) e3cb4@pvars)) (e2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" e3ca1@pat) ((lambda (e3cba@y) ((lambda (e3cbc@test) ((lambda (e3cbe@conseq) ((lambda (e3cc0@altern) (list (e2c07@e2b47@build-lambda '#f (list e3cba@y) (list 'if e3cbc@test e3cbe@conseq e3cc0@altern)) (list '(primitive syntax-dispatch) e3c9c@x (list 'quote e3cb5@p)))) (e3c65@gen-syntax-case e3c9c@x e3c9d@keys e3c9e@clauses e3c9f@r e3ca0@mr))) (e3c5f@build-dispatch-call e3cb4@pvars e3ca3@expr e3cba@y e3c9f@r e3ca0@mr))) (if (eq? e3ca2@fender '#t) e3cba@y ((lambda (e3cc2@call) (list 'if e3cba@y e3cc2@call (list 'quote '#f))) (e3c5f@build-dispatch-call e3cb4@pvars e3ca2@fender e3cba@y e3c9f@r e3ca0@mr))))) (e2c2b@gen-lexical 'tmp))))) e3cb1@e3caf e3cb0@e3cad))))) (set! e3c65@gen-syntax-case (lambda (e3c7a@x e3c7b@keys e3c7c@clauses e3c7d@r e3c7e@mr) (if (null? e3c7c@clauses) (list '(primitive syntax-error) e3c7a@x) ((lambda (e3c84@t) ((lambda (e3c86@ls/false) (if e3c86@ls/false (apply (lambda (e3c88@pat e3c89@expr) (if (and (e2cab@id? e3c88@pat) (not (e2cb9@bound-id-member? e3c88@pat e3c7b@keys)) (not (e2eb8@ellipsis? e3c88@pat))) (if (e2cb3@free-id=? e3c88@pat (e2e40@scheme-stx '_)) (e2ed8@chi-expr e3c89@expr e3c7d@r e3c7e@mr) ((lambda (e3c8c@lab e3c8d@lex) ((lambda (e3c90@body) (list (e2c07@e2b47@build-lambda '#f (list e3c8d@lex) e3c90@body) e3c7a@x)) (e2ed8@chi-expr (e2c97@add-subst (e2c66@make-full-rib (list e3c88@pat) (list e3c8c@lab)) e3c89@expr) (cons (cons e3c8c@lab (e2ccb@make-binding 'syntax (cons e3c8d@lex '0))) e3c7d@r) e3c7e@mr))) (e2c2f@gen-label e3c88@pat) (e2c2b@gen-lexical e3c88@pat))) (e3c63@gen-clause e3c7a@x e3c7b@keys (cdr e3c7c@clauses) e3c7d@r e3c7e@mr e3c88@pat '#t e3c89@expr))) e3c86@ls/false) ((lambda (e3c92@t) ((lambda (e3c94@ls/false) (if e3c94@ls/false (apply (lambda (e3c96@pat e3c97@fender e3c98@expr) (e3c63@gen-clause e3c7a@x e3c7b@keys (cdr e3c7c@clauses) e3c7d@r e3c7e@mr e3c96@pat e3c97@fender e3c98@expr)) e3c94@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3c92@t))) (e2eb6@syntax-dispatch e3c92@t '(any any any)))) e3c84@t))) (e2eb6@syntax-dispatch e3c84@t '(any any)))) (car e3c7c@clauses))))) (lambda (e3c66@e e3c67@r e3c68@mr) ((lambda (e3c6c@t) ((lambda (e3c6e@ls/false) (if e3c6e@ls/false (apply (lambda (e3c70@expr e3c71@keys e3c72@clauses) (begin (e2ebc@verify-literals e3c71@keys e3c66@e) ((lambda (e3c76@x) ((lambda (e3c78@body) (list (e2c07@e2b47@build-lambda '#f (list e3c76@x) e3c78@body) (e2ed8@chi-expr e3c70@expr e3c67@r e3c68@mr))) (e3c65@gen-syntax-case e3c76@x e3c71@keys e3c72@clauses e3c67@r e3c68@mr))) (e2c2b@gen-lexical 'tmp)))) e3c6e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3c6c@t))) (e2eb6@syntax-dispatch e3c6c@t '(_ any each-any . each-any)))) e3c66@e)))) '#f '#f '#f '#f)))) (set! e2ec0@ellipsis-map (lambda (e3cea@proc e3ceb@ls . e3cee@ls*) ((lambda (e3cf1@who) (begin (set! e3cf1@who '...) (begin (if (not (list? e3ceb@ls)) (assertion-violation e3cf1@who '"not a list" e3ceb@ls) (void)) (if (not (null? e3cee@ls*)) ((lambda (e3cf2@n) (for-each (lambda (e3cf4@x) (begin (if (not (list? e3cf4@x)) (assertion-violation e3cf1@who '"not a list" e3cf4@x) (void)) (if (not (= (length e3cf4@x) e3cf2@n)) (assertion-violation e3cf1@who '"length mismatch" e3ceb@ls e3cf4@x) (void)))) e3cee@ls*)) (length e3ceb@ls)) (void)) (apply map e3cea@proc e3ceb@ls e3cee@ls*)))) '#f))) (set! e2ec2@syntax-transformer ((lambda () ((lambda (e3cf7@gen-syntax e3cf9@gen-ref e3cfb@gen-append e3cfd@gen-mappend e3cff@gen-map e3d01@gen-cons e3d03@gen-vector e3d05@regen) (begin (set! e3cf7@gen-syntax (lambda (e3d6e@src e3d6f@e e3d70@r e3d71@maps e3d72@ellipsis? e3d73@vec?) ((lambda (e3d7a@t) ((lambda (e3d7c@ls/false) (if (and e3d7c@ls/false (apply (lambda (e3d7e@dots) (e3d72@ellipsis? e3d7e@dots)) e3d7c@ls/false)) (apply (lambda (e3d80@dots) (e2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" e3d6e@src)) e3d7c@ls/false) ((lambda (e3d82@t) ((lambda (e3d84@ls/false) (if (and e3d84@ls/false (apply (lambda (e3d86@id) (e2cab@id? e3d86@id)) e3d84@ls/false)) (apply (lambda (e3d88@id) ((lambda (e3d8a@label) ((lambda (e3d8c@b) ((lambda () (if (eq? (e2ccd@binding-type e3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (e3d92@var.lev) (e3cf9@gen-ref e3d6e@src (car e3d92@var.lev) (cdr e3d92@var.lev) e3d71@maps)) (e2ccf@binding-value e3d8c@b))) (lambda (e3d94@e3d8f e3d95@e3d91) ((lambda (e3d98@maps e3d99@var) (values (list 'ref e3d99@var) e3d98@maps)) e3d95@e3d91 e3d94@e3d8f))) (values (list 'quote e3d6f@e) e3d71@maps))))) (e2cc9@label->binding e3d8a@label e3d70@r))) (e2cc5@id->label e3d6f@e))) e3d84@ls/false) ((lambda (e3d9c@t) ((lambda (e3d9e@ls/false) (if (and e3d9e@ls/false (apply (lambda (e3da0@dots e3da1@e) (e3d72@ellipsis? e3da0@dots)) e3d9e@ls/false)) (apply (lambda (e3da4@dots e3da5@e) (if e3d73@vec? (e2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" e3d6e@src) (e3cf7@gen-syntax e3d6e@src e3da5@e e3d70@r e3d71@maps (lambda (e3da8@x) '#f) '#f))) e3d9e@ls/false) ((lambda (e3daa@t) ((lambda (e3dac@ls/false) (if (and e3dac@ls/false (apply (lambda (e3dae@x e3daf@dots e3db0@y) (e3d72@ellipsis? e3daf@dots)) e3dac@ls/false)) (apply (lambda (e3db4@x e3db5@dots e3db6@y) ((letrec ((e3dba@f (lambda (e3dbc@y e3dbd@k) ((lambda (e3dc0@t) ((lambda (e3dc2@ls/false) (if e3dc2@ls/false (apply (lambda () (e3dbd@k e3d71@maps)) e3dc2@ls/false) ((lambda (e3dc4@t) ((lambda (e3dc6@ls/false) (if (and e3dc6@ls/false (apply (lambda (e3dc8@dots e3dc9@y) (e3d72@ellipsis? e3dc8@dots)) e3dc6@ls/false)) (apply (lambda (e3dcc@dots e3dcd@y) (e3dba@f e3dcd@y (lambda (e3dd0@maps) (call-with-values (lambda () (e3dbd@k (cons '() e3dd0@maps))) (lambda (e3dd6@e3dd3 e3dd7@e3dd5) ((lambda (e3dda@maps e3ddb@x) (if (null? (car e3dda@maps)) (e2f9f@syntax-violation '#f '"extra ellipsis in syntax form" e3d6e@src) (values (e3cfd@gen-mappend e3ddb@x (car e3dda@maps)) (cdr e3dda@maps)))) e3dd7@e3dd5 e3dd6@e3dd3)))))) e3dc6@ls/false) ((lambda (e3dde@t) ((lambda (e3de0@ls/false) (if e3de0@ls/false (apply (lambda () (call-with-values (lambda () (e3cf7@gen-syntax e3d6e@src e3dbc@y e3d70@r e3d71@maps e3d72@ellipsis? e3d73@vec?)) (lambda (e3de6@e3de3 e3de7@e3de5) ((lambda (e3dea@maps e3deb@y) (call-with-values (lambda () (e3dbd@k e3dea@maps)) (lambda (e3df2@e3def e3df3@e3df1) ((lambda (e3df6@maps e3df7@x) (values (e3cfb@gen-append e3df7@x e3deb@y) e3df6@maps)) e3df3@e3df1 e3df2@e3def)))) e3de7@e3de5 e3de6@e3de3)))) e3de0@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3dde@t))) (e2eb6@syntax-dispatch e3dde@t '_))) e3dc4@t))) (e2eb6@syntax-dispatch e3dc4@t '(any . any)))) e3dc0@t))) (e2eb6@syntax-dispatch e3dc0@t '()))) e3dbc@y)))) e3dba@f) e3db6@y (lambda (e3dfa@maps) (call-with-values (lambda () (e3cf7@gen-syntax e3d6e@src e3db4@x e3d70@r (cons '() e3dfa@maps) e3d72@ellipsis? '#f)) (lambda (e3e00@e3dfd e3e01@e3dff) ((lambda (e3e04@maps e3e05@x) (if (null? (car e3e04@maps)) (e2f9f@syntax-violation '#f '"extra ellipsis in syntax form" e3d6e@src) (values (e3cff@gen-map e3e05@x (car e3e04@maps)) (cdr e3e04@maps)))) e3e01@e3dff e3e00@e3dfd)))))) e3dac@ls/false) ((lambda (e3e08@t) ((lambda (e3e0a@ls/false) (if e3e0a@ls/false (apply (lambda (e3e0c@x e3e0d@y) (call-with-values (lambda () (e3cf7@gen-syntax e3d6e@src e3e0c@x e3d70@r e3d71@maps e3d72@ellipsis? '#f)) (lambda (e3e14@e3e11 e3e15@e3e13) ((lambda (e3e18@maps e3e19@xnew) (call-with-values (lambda () (e3cf7@gen-syntax e3d6e@src e3e0d@y e3d70@r e3e18@maps e3d72@ellipsis? e3d73@vec?)) (lambda (e3e20@e3e1d e3e21@e3e1f) ((lambda (e3e24@maps e3e25@ynew) (values (e3d01@gen-cons e3d6f@e e3e0c@x e3e0d@y e3e19@xnew e3e25@ynew) e3e24@maps)) e3e21@e3e1f e3e20@e3e1d)))) e3e15@e3e13 e3e14@e3e11)))) e3e0a@ls/false) ((lambda (e3e28@t) ((lambda (e3e2a@ls/false) (if e3e2a@ls/false (apply (lambda (e3e2c@ls) (call-with-values (lambda () (e3cf7@gen-syntax e3d6e@src e3e2c@ls e3d70@r e3d71@maps e3d72@ellipsis? '#t)) (lambda (e3e32@e3e2f e3e33@e3e31) ((lambda (e3e36@maps e3e37@lsnew) (values (e3d03@gen-vector e3d6f@e e3e2c@ls e3e37@lsnew) e3e36@maps)) e3e33@e3e31 e3e32@e3e2f)))) e3e2a@ls/false) ((lambda (e3e3a@t) ((lambda (e3e3c@ls/false) (if e3e3c@ls/false (apply (lambda () (values (list 'quote e3d6f@e) e3d71@maps)) e3e3c@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3e3a@t))) (e2eb6@syntax-dispatch e3e3a@t '_))) e3e28@t))) (e2eb6@syntax-dispatch e3e28@t '#(vector each-any)))) e3e08@t))) (e2eb6@syntax-dispatch e3e08@t '(any . any)))) e3daa@t))) (e2eb6@syntax-dispatch e3daa@t '(any any . any)))) e3d9c@t))) (e2eb6@syntax-dispatch e3d9c@t '(any any)))) e3d82@t))) (e2eb6@syntax-dispatch e3d82@t 'any))) e3d7a@t))) (e2eb6@syntax-dispatch e3d7a@t 'any))) e3d6f@e))) (set! e3cf9@gen-ref (lambda (e3d54@src e3d55@var e3d56@level e3d57@maps) (if (= e3d56@level '0) (values e3d55@var e3d57@maps) (if (null? e3d57@maps) (e2f9f@syntax-violation '#f '"missing ellipsis in syntax form" e3d54@src) (call-with-values (lambda () (e3cf9@gen-ref e3d54@src e3d55@var (- e3d56@level '1) (cdr e3d57@maps))) (lambda (e3d60@e3d5d e3d61@e3d5f) ((lambda (e3d64@outer-maps e3d65@outer-var) ((lambda (e3d68@t) (if e3d68@t ((lambda (e3d6a@b) (values (cdr e3d6a@b) e3d57@maps)) e3d68@t) ((lambda (e3d6c@inner-var) (values e3d6c@inner-var (cons (cons (cons e3d65@outer-var e3d6c@inner-var) (car e3d57@maps)) e3d64@outer-maps))) (e2c2b@gen-lexical 'tmp)))) (assq e3d65@outer-var (car e3d57@maps)))) e3d61@e3d5f e3d60@e3d5d))))))) (set! e3cfb@gen-append (lambda (e3d50@x e3d51@y) (if (fast-equal? e3d51@y ''()) e3d50@x (list 'append e3d50@x e3d51@y)))) (set! e3cfd@gen-mappend (lambda (e3d4c@e e3d4d@map-env) (list 'apply '(primitive append) (e3cff@gen-map e3d4c@e e3d4d@map-env)))) (set! e3cff@gen-map (lambda (e3d3a@e e3d3b@map-env) ((lambda (e3d3e@formals e3d3f@actuals) (if (eq? (car e3d3a@e) 'ref) (car e3d3f@actuals) (if (for-all (lambda (e3d42@x) (and (eq? (car e3d42@x) 'ref) (memq (cadr e3d42@x) e3d3e@formals))) (cdr e3d3a@e)) ((lambda (e3d44@args) (cons 'map (cons (list 'primitive (car e3d3a@e)) e3d44@args))) (map ((lambda (e3d46@r) (lambda (e3d48@x) (cdr (assq (cadr e3d48@x) e3d46@r)))) (map cons e3d3e@formals e3d3f@actuals)) (cdr e3d3a@e))) (cons* 'map (list 'lambda e3d3e@formals e3d3a@e) e3d3f@actuals)))) (map cdr e3d3b@map-env) (map (lambda (e3d4a@x) (list 'ref (car e3d4a@x))) e3d3b@map-env)))) (set! e3d01@gen-cons (lambda (e3d2a@e e3d2b@x e3d2c@y e3d2d@xnew e3d2e@ynew) ((lambda (e3d34@t) (if (memv e3d34@t '(quote)) (if (eq? (car e3d2d@xnew) 'quote) ((lambda (e3d36@xnew e3d37@ynew) (if (and (eq? e3d36@xnew e3d2b@x) (eq? e3d37@ynew e3d2c@y)) (list 'quote e3d2a@e) (list 'quote (cons e3d36@xnew e3d37@ynew)))) (cadr e3d2d@xnew) (cadr e3d2e@ynew)) (if (null? (cadr e3d2e@ynew)) (list 'list e3d2d@xnew) (list 'cons e3d2d@xnew e3d2e@ynew))) (if (memv e3d34@t '(list)) (cons 'list (cons e3d2d@xnew (cdr e3d2e@ynew))) (list 'cons e3d2d@xnew e3d2e@ynew)))) (car e3d2e@ynew)))) (set! e3d03@gen-vector (lambda (e3d24@e e3d25@ls e3d26@lsnew) (if (eq? (car e3d26@lsnew) 'quote) (if (eq? (cadr e3d26@lsnew) e3d25@ls) (list 'quote e3d24@e) (list 'quote (list->vector (cadr e3d26@lsnew)))) (if (eq? (car e3d26@lsnew) 'list) (cons 'vector (cdr e3d26@lsnew)) (list 'list->vector e3d26@lsnew))))) (set! e3d05@regen (lambda (e3d1e@x) ((lambda (e3d20@t) (if (memv e3d20@t '(ref)) (cadr e3d1e@x) (if (memv e3d20@t '(primitive)) (list 'primitive (cadr e3d1e@x)) (if (memv e3d20@t '(quote)) (list 'quote (cadr e3d1e@x)) (if (memv e3d20@t '(lambda)) (e2c07@e2b47@build-lambda '#f (cadr e3d1e@x) (e3d05@regen (caddr e3d1e@x))) (if (memv e3d20@t '(map)) ((lambda (e3d22@ls) (cons '(primitive ellipsis-map) e3d22@ls)) (map e3d05@regen (cdr e3d1e@x))) (cons (list 'primitive (car e3d1e@x)) (map e3d05@regen (cdr e3d1e@x))))))))) (car e3d1e@x)))) (lambda (e3d06@e e3d07@r e3d08@mr) ((lambda (e3d0c@t) ((lambda (e3d0e@ls/false) (if e3d0e@ls/false (apply (lambda (e3d10@x) (call-with-values (lambda () (e3cf7@gen-syntax e3d06@e e3d10@x e3d07@r '() e2eb8@ellipsis? '#f)) (lambda (e3d16@e3d13 e3d17@e3d15) ((lambda (e3d1a@maps e3d1b@e) (e3d05@regen e3d1b@e)) e3d17@e3d15 e3d16@e3d13)))) e3d0e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3d0c@t))) (e2eb6@syntax-dispatch e3d0c@t '(_ any)))) e3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2ec4@core-macro-transformer (lambda (e3e3e@name) ((lambda (e3e40@t) (if (memv e3e40@t '(quote)) e2e66@quote-transformer (if (memv e3e40@t '(lambda)) e2e6a@lambda-transformer (if (memv e3e40@t '(case-lambda)) e2e68@case-lambda-transformer (if (memv e3e40@t '(letrec)) e2e4e@letrec-transformer (if (memv e3e40@t '(letrec*)) e2e50@letrec*-transformer (if (memv e3e40@t '(if)) e2e5e@if-transformer (if (memv e3e40@t '(and)) e2e60@and-transformer (if (memv e3e40@t '(or)) e2e62@or-transformer (if (memv e3e40@t '(foreign-call)) e2eb2@foreign-call-transformer (if (memv e3e40@t '(syntax-case)) e2ebe@syntax-case-transformer (if (memv e3e40@t '(syntax)) e2ec2@syntax-transformer (if (memv e3e40@t '(type-descriptor)) e2e54@type-descriptor-transformer (if (memv e3e40@t '(record-type-descriptor)) e2e56@record-type-descriptor-transformer (if (memv e3e40@t '(record-constructor-descriptor)) e2e58@record-constructor-descriptor-transformer (if (memv e3e40@t '(fluid-let-syntax)) e2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" e3e3e@name))))))))))))))))) e3e3e@name))) (set! e2ec6@symbol-macro (lambda (e3e42@x e3e43@set) ((lambda (e3e46@t) ((lambda (e3e48@ls/false) (if (and e3e48@ls/false (apply (lambda (e3e4a@name) (and (e2cab@id? e3e4a@name) (memq (e2cad@id->sym e3e4a@name) e3e43@set))) e3e48@ls/false)) (apply (lambda (e3e4c@name) (e2e6c@bless (list 'quote e3e4c@name))) e3e48@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3e46@t))) (e2eb6@syntax-dispatch e3e46@t '(_ any)))) e3e42@x))) (set! e2ec8@macro-transformer (lambda (e3e4e@x) (if (procedure? e3e4e@x) e3e4e@x (if (symbol? e3e4e@x) ((lambda (e3e50@t) (if (memv e3e50@t '(define-record-type)) e2eaa@define-record-type-macro (if (memv e3e50@t '(define-struct)) e2ea8@define-struct-macro (if (memv e3e50@t '(include)) e2e9e@include-macro (if (memv e3e50@t '(cond)) e2e9a@cond-macro (if (memv e3e50@t '(let)) e2e72@let-macro (if (memv e3e50@t '(do)) e2e92@do-macro (if (memv e3e50@t '(or)) e2e96@or-macro (if (memv e3e50@t '(and)) e2e98@and-macro (if (memv e3e50@t '(let*)) e2e94@let*-macro (if (memv e3e50@t '(let-values)) e2e74@let-values-macro (if (memv e3e50@t '(let*-values)) e2e76@let*-values-macro (if (memv e3e50@t '(syntax-rules)) e2ea2@syntax-rules-macro (if (memv e3e50@t '(quasiquote)) e2ea4@quasiquote-macro (if (memv e3e50@t '(quasisyntax)) e2ea6@quasisyntax-macro (if (memv e3e50@t '(with-syntax)) e2e6e@with-syntax-macro (if (memv e3e50@t '(when)) e2e5a@when-macro (if (memv e3e50@t '(unless)) e2e5c@unless-macro (if (memv e3e50@t '(case)) e2e64@case-macro (if (memv e3e50@t '(identifier-syntax)) e2e90@identifier-syntax-macro (if (memv e3e50@t '(time)) e2e88@time-macro (if (memv e3e50@t '(delay)) e2e8a@delay-macro (if (memv e3e50@t '(assert)) e2e8c@assert-macro (if (memv e3e50@t '(endianness)) e2e8e@endianness-macro (if (memv e3e50@t '(guard)) e2e84@guard-macro (if (memv e3e50@t '(define-enumeration)) e2e86@define-enumeration-macro (if (memv e3e50@t '(trace-lambda)) e2e78@trace-lambda-macro (if (memv e3e50@t '(trace-define)) e2e7a@trace-define-macro (if (memv e3e50@t '(trace-define-syntax)) e2e7c@trace-define-syntax-macro (if (memv e3e50@t '(trace-let-syntax)) e2e80@trace-let-syntax-macro (if (memv e3e50@t '(trace-letrec-syntax)) e2e82@trace-letrec-syntax-macro (if (memv e3e50@t '(define-condition-type)) e2eac@define-condition-type-macro (if (memv e3e50@t '(parameterize)) e2eb0@parameterize-macro (if (memv e3e50@t '(include-into)) e2ea0@include-into-macro (if (memv e3e50@t '(eol-style)) (lambda (e3e52@x) (e2ec6@symbol-macro e3e52@x '(none lf cr crlf nel crnel ls))) (if (memv e3e50@t '(error-handling-mode)) (lambda (e3e54@x) (e2ec6@symbol-macro e3e54@x '(ignore raise replace))) (if (memv e3e50@t '(buffer-mode)) (lambda (e3e56@x) (e2ec6@symbol-macro e3e56@x '(none line block))) (if (memv e3e50@t '(file-options)) e2c1e@file-options-macro (if (memv e3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) e2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" e3e4e@x)))))))))))))))))))))))))))))))))))))))) e3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" e3e4e@x))))) (set! e2eca@local-macro-transformer (lambda (e3e58@x) (car e3e58@x))) (set! e2ecc@do-macro-call (lambda (e3e5a@transformer e3e5b@expr) ((lambda (e3e5e@out) (begin ((letrec ((e3e60@f (lambda (e3e62@x) (if (not (e2c73@stx? e3e62@x)) (if (pair? e3e62@x) (begin (e3e60@f (car e3e62@x)) (e3e60@f (cdr e3e62@x))) (if (vector? e3e62@x) (vector-for-each e3e60@f e3e62@x) (if (symbol? e3e62@x) (e2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" e3e5b@expr e3e62@x) (void)))) (void))))) e3e60@f) e3e5e@out) (e2c95@add-mark (e2c8b@gen-mark) e3e5e@out e3e5b@expr))) (e3e5a@transformer (e2c95@add-mark e2c8d@anti-mark e3e5b@expr '#f))))) (set! e2ece@chi-macro (lambda (e3e64@p e3e65@e) (e2ecc@do-macro-call (e2ec8@macro-transformer e3e64@p) e3e65@e))) (set! e2ed0@chi-local-macro (lambda (e3e68@p e3e69@e) (e2ecc@do-macro-call (e2eca@local-macro-transformer e3e68@p) e3e69@e))) (set! e2ed2@chi-global-macro (lambda (e3e6c@p e3e6d@e) ((lambda (e3e70@lib e3e71@loc) (begin (e2ad0@e2972@visit-library e3e70@lib) ((lambda (e3e74@x) ((lambda (e3e76@transformer) (e2ecc@do-macro-call e3e76@transformer e3e6d@e)) (if (procedure? e3e74@x) e3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" e3e74@x)))) (symbol-value e3e71@loc)))) (car e3e6c@p) (cdr e3e6c@p)))) (set! e2ed4@chi-expr* (lambda (e3e78@e* e3e79@r e3e7a@mr) (if (null? e3e78@e*) '() ((lambda (e3e7e@e) (cons e3e7e@e (e2ed4@chi-expr* (cdr e3e78@e*) e3e79@r e3e7a@mr))) (e2ed8@chi-expr (car e3e78@e*) e3e79@r e3e7a@mr))))) (set! e2ed6@chi-application (lambda (e3e80@e e3e81@r e3e82@mr) ((lambda (e3e86@t) ((lambda (e3e88@ls/false) (if e3e88@ls/false (apply (lambda (e3e8a@rator e3e8b@rands) ((lambda (e3e8e@rator) (cons e3e8e@rator (e2ed4@chi-expr* e3e8b@rands e3e81@r e3e82@mr))) (e2ed8@chi-expr e3e8a@rator e3e81@r e3e82@mr))) e3e88@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3e86@t))) (e2eb6@syntax-dispatch e3e86@t '(any . each-any)))) e3e80@e))) (set! e2ed8@chi-expr (lambda (e3e90@e e3e91@r e3e92@mr) (call-with-values (lambda () (e2cd3@syntax-type e3e90@e e3e91@r)) (lambda (e3e9c@e3e97 e3e9d@e3e99 e3e9e@e3e9b) ((lambda (e3ea2@kwd e3ea3@value e3ea4@type) ((lambda (e3ea8@t) (if (memv e3ea8@t '(core-macro)) ((lambda (e3eaa@transformer) (e3eaa@transformer e3e90@e e3e91@r e3e92@mr)) (e2ec4@core-macro-transformer e3ea3@value)) (if (memv e3ea8@t '(global)) ((lambda (e3eac@lib) ((lambda (e3eae@loc) ((lambda () (begin ((e2f21@inv-collector) e3eac@lib) e3eae@loc)))) (cdr e3ea3@value))) (car e3ea3@value)) (if (memv e3ea8@t '(core-prim)) ((lambda (e3eb0@name) (list 'primitive e3eb0@name)) e3ea3@value) (if (memv e3ea8@t '(call)) (e2ed6@chi-application e3e90@e e3e91@r e3e92@mr) (if (memv e3ea8@t '(lexical)) ((lambda (e3eb2@lex) e3eb2@lex) (e2e42@lexical-var e3ea3@value)) (if (memv e3ea8@t '(global-macro global-macro!)) (e2ed8@chi-expr (e2ed2@chi-global-macro e3ea3@value e3e90@e) e3e91@r e3e92@mr) (if (memv e3ea8@t '(local-macro local-macro!)) (e2ed8@chi-expr (e2ed0@chi-local-macro e3ea3@value e3e90@e) e3e91@r e3e92@mr) (if (memv e3ea8@t '(macro macro!)) (e2ed8@chi-expr (e2ece@chi-macro e3ea3@value e3e90@e) e3e91@r e3e92@mr) (if (memv e3ea8@t '(constant)) ((lambda (e3eb4@datum) (list 'quote e3eb4@datum)) e3ea3@value) (if (memv e3ea8@t '(set!)) (e2eda@chi-set! e3e90@e e3e91@r e3e92@mr) (if (memv e3ea8@t '(begin)) ((lambda (e3eb6@t) ((lambda (e3eb8@ls/false) (if e3eb8@ls/false (apply (lambda (e3eba@x e3ebb@x*) (e2c0a@e2b79@build-sequence '#f (e2ed4@chi-expr* (cons e3eba@x e3ebb@x*) e3e91@r e3e92@mr))) e3eb8@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3eb6@t))) (e2eb6@syntax-dispatch e3eb6@t '(_ any . each-any)))) e3e90@e) (if (memv e3ea8@t '(let-syntax letrec-syntax)) ((lambda (e3ebe@t) ((lambda (e3ec0@ls/false) (if (and e3ec0@ls/false (apply (lambda (e3ec2@xlhs* e3ec3@xrhs* e3ec4@xbody e3ec5@xbody*) (if (not (e2cb5@valid-bound-ids? e3ec2@xlhs*)) (e2f9f@syntax-violation '#f '"invalid identifiers" e3e90@e) (void))) e3ec0@ls/false)) (apply (lambda (e3eca@xlhs* e3ecb@xrhs* e3ecc@xbody e3ecd@xbody*) ((lambda (e3ed2@xlab*) ((lambda (e3ed4@xrib) ((lambda (e3ed6@xb*) ((lambda () (e2c0a@e2b79@build-sequence '#f (e2ed4@chi-expr* (map (lambda (e3ed8@x) (e2c97@add-subst e3ed4@xrib e3ed8@x)) (cons e3ecc@xbody e3ecd@xbody*)) (append (map cons e3ed2@xlab* e3ed6@xb*) e3e91@r) (append (map cons e3ed2@xlab* e3ed6@xb*) e3e92@mr)))))) (map (lambda (e3eda@x) (e2ce9@make-eval-transformer (e2f13@expand-transformer (if (eq? e3ea4@type 'let-syntax) e3eda@x (e2c97@add-subst e3ed4@xrib e3eda@x)) e3e92@mr))) e3ecb@xrhs*))) (e2c66@make-full-rib e3eca@xlhs* e3ed2@xlab*))) (map e2c2f@gen-label e3eca@xlhs*))) e3ec0@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3ebe@t))) (e2eb6@syntax-dispatch e3ebe@t '(_ #(each (any any)) any . each-any)))) e3e90@e) (if (memv e3ea8@t '(displaced-lexical)) (e2f9f@syntax-violation '#f '"identifier out of context" e3e90@e) (if (memv e3ea8@t '(syntax)) (e2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" e3e90@e) (if (memv e3ea8@t '(define define-syntax module import library)) (e2f9f@syntax-violation '#f (string-append ((lambda (e3edc@t) (if (memv e3edc@t '(define)) '"a definition" (if (memv e3edc@t '(define-syntax)) '"a define-syntax" (if (memv e3edc@t '(module)) '"a module definition" (if (memv e3edc@t '(library)) '"a library definition" (if (memv e3edc@t '(import)) '"an import declaration" (if (memv e3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) e3ea4@type) '" was found where an expression was expected") e3e90@e) (if (memv e3ea8@t '(mutable)) (e2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" e3e90@e) (e2f9f@syntax-violation '#f '"invalid expression" e3e90@e)))))))))))))))))) e3ea4@type)) e3e9e@e3e9b e3e9d@e3e99 e3e9c@e3e97))))) (set! e2eda@chi-set! (lambda (e3ede@e e3edf@r e3ee0@mr) ((lambda (e3ee4@t) ((lambda (e3ee6@ls/false) (if (and e3ee6@ls/false (apply (lambda (e3ee8@x e3ee9@v) (e2cab@id? e3ee8@x)) e3ee6@ls/false)) (apply (lambda (e3eec@x e3eed@v) (call-with-values (lambda () (e2cd3@syntax-type e3eec@x e3edf@r)) (lambda (e3ef6@e3ef1 e3ef7@e3ef3 e3ef8@e3ef5) ((lambda (e3efc@kwd e3efd@value e3efe@type) ((lambda (e3f02@t) (if (memv e3f02@t '(lexical)) (begin (e2e46@set-lexical-mutable! e3efd@value '#t) (list 'set! (e2e42@lexical-var e3efd@value) (e2ed8@chi-expr e3eed@v e3edf@r e3ee0@mr))) (if (memv e3f02@t '(core-prim)) (e2f9f@syntax-violation '#f '"cannot modify imported core primitive" e3ede@e) (if (memv e3f02@t '(global)) (e2f9f@syntax-violation '#f '"attempt to modify imported binding" e3ede@e) (if (memv e3f02@t '(global-macro!)) (e2ed8@chi-expr (e2ed2@chi-global-macro e3efd@value e3ede@e) e3edf@r e3ee0@mr) (if (memv e3f02@t '(local-macro!)) (e2ed8@chi-expr (e2ed0@chi-local-macro e3efd@value e3ede@e) e3edf@r e3ee0@mr) (if (memv e3f02@t '(mutable)) (e2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" e3ede@e) (e2f9f@syntax-violation '#f '"invalid syntax" e3ede@e)))))))) e3efe@type)) e3ef8@e3ef5 e3ef7@e3ef3 e3ef6@e3ef1)))) e3ee6@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3ee4@t))) (e2eb6@syntax-dispatch e3ee4@t '(_ any any)))) e3ede@e))) (set! e2edc@verify-formals (lambda (e3f04@fmls e3f05@stx) ((lambda (e3f08@t) ((lambda (e3f0a@ls/false) (if e3f0a@ls/false (apply (lambda (e3f0c@x*) (if (not (e2cb5@valid-bound-ids? e3f0c@x*)) (e2e70@invalid-fmls-error e3f05@stx e3f04@fmls) (void))) e3f0a@ls/false) ((lambda (e3f0e@t) ((lambda (e3f10@ls/false) (if e3f10@ls/false (apply (lambda (e3f12@x* e3f13@x) (if (not (e2cb5@valid-bound-ids? (cons e3f13@x e3f12@x*))) (e2e70@invalid-fmls-error e3f05@stx e3f04@fmls) (void))) e3f10@ls/false) ((lambda (e3f16@t) ((lambda (e3f18@ls/false) (if e3f18@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid syntax" e3f05@stx)) e3f18@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3f16@t))) (e2eb6@syntax-dispatch e3f16@t '_))) e3f0e@t))) (e2eb6@syntax-dispatch e3f0e@t '#(each+ any () any)))) e3f08@t))) (e2eb6@syntax-dispatch e3f08@t 'each-any))) e3f04@fmls))) (set! e2ede@chi-lambda-clause (lambda (e3f1a@stx e3f1b@fmls e3f1c@body* e3f1d@r e3f1e@mr) ((lambda (e3f24@t) ((lambda (e3f26@ls/false) (if e3f26@ls/false (apply (lambda (e3f28@x*) (begin (e2edc@verify-formals e3f1b@fmls e3f1a@stx) ((lambda (e3f2a@lex* e3f2b@lab*) (values e3f2a@lex* (e2eee@chi-internal (e2c97@add-subst (e2c66@make-full-rib e3f28@x* e3f2b@lab*) e3f1c@body*) (e2e4a@add-lexicals e3f2b@lab* e3f2a@lex* e3f1d@r) e3f1e@mr))) (map e2c2b@gen-lexical e3f28@x*) (map e2c2f@gen-label e3f28@x*)))) e3f26@ls/false) ((lambda (e3f2e@t) ((lambda (e3f30@ls/false) (if e3f30@ls/false (apply (lambda (e3f32@x* e3f33@x) (begin (e2edc@verify-formals e3f1b@fmls e3f1a@stx) ((lambda (e3f36@lex* e3f37@lab* e3f38@lex e3f39@lab) (values (append e3f36@lex* e3f38@lex) (e2eee@chi-internal (e2c97@add-subst (e2c66@make-full-rib (cons e3f33@x e3f32@x*) (cons e3f39@lab e3f37@lab*)) e3f1c@body*) (e2e4a@add-lexicals (cons e3f39@lab e3f37@lab*) (cons e3f38@lex e3f36@lex*) e3f1d@r) e3f1e@mr))) (map e2c2b@gen-lexical e3f32@x*) (map e2c2f@gen-label e3f32@x*) (e2c2b@gen-lexical e3f33@x) (e2c2f@gen-label e3f33@x)))) e3f30@ls/false) ((lambda (e3f3e@t) ((lambda (e3f40@ls/false) (if e3f40@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid syntax" e3f1b@fmls)) e3f40@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e3f3e@t))) (e2eb6@syntax-dispatch e3f3e@t '_))) e3f2e@t))) (e2eb6@syntax-dispatch e3f2e@t '#(each+ any () any)))) e3f24@t))) (e2eb6@syntax-dispatch e3f24@t 'each-any))) e3f1b@fmls))) (set! e2ee0@chi-lambda-clause* (lambda (e3f42@stx e3f43@fmls* e3f44@body** e3f45@r e3f46@mr) (if (null? e3f43@fmls*) (values '() '()) (call-with-values (lambda () (e2ede@chi-lambda-clause e3f42@stx (car e3f43@fmls*) (car e3f44@body**) e3f45@r e3f46@mr)) (lambda (e3f50@e3f4d e3f51@e3f4f) ((lambda (e3f54@b e3f55@a) (call-with-values (lambda () (e2ee0@chi-lambda-clause* e3f42@stx (cdr e3f43@fmls*) (cdr e3f44@body**) e3f45@r e3f46@mr)) (lambda (e3f5c@e3f59 e3f5d@e3f5b) ((lambda (e3f60@b* e3f61@a*) (values (cons e3f55@a e3f61@a*) (cons e3f54@b e3f60@b*))) e3f5d@e3f5b e3f5c@e3f59)))) e3f51@e3f4f e3f50@e3f4d)))))) (set! e2ee2@chi-defun (lambda (e3f64@x e3f65@r e3f66@mr) ((lambda (e3f6a@fmls e3f6b@body*) (call-with-values (lambda () (e2ede@chi-lambda-clause e3f6a@fmls e3f6a@fmls e3f6b@body* e3f65@r e3f66@mr)) (lambda (e3f72@e3f6f e3f73@e3f71) ((lambda (e3f76@body e3f77@fmls) (e2c07@e2b47@build-lambda '#f e3f77@fmls e3f76@body)) e3f73@e3f71 e3f72@e3f6f)))) (car e3f64@x) (cdr e3f64@x)))) (set! e2ee4@chi-rhs (lambda (e3f7a@rhs e3f7b@r e3f7c@mr) ((lambda (e3f80@t) (if (memv e3f80@t '(defun)) (e2ee2@chi-defun (cdr e3f7a@rhs) e3f7b@r e3f7c@mr) (if (memv e3f80@t '(expr)) ((lambda (e3f82@expr) (e2ed8@chi-expr e3f82@expr e3f7b@r e3f7c@mr)) (cdr e3f7a@rhs)) (if (memv e3f80@t '(top-expr)) ((lambda (e3f84@expr) (e2c0a@e2b79@build-sequence '#f (list (e2ed8@chi-expr e3f84@expr e3f7b@r e3f7c@mr) (e2c0b@e2b7b@build-void)))) (cdr e3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" e3f7a@rhs))))) (car e3f7a@rhs)))) (set! e2ee6@expand-interaction-rhs*/init* (lambda (e3f86@lhs* e3f87@rhs* e3f88@init* e3f89@r e3f8a@mr) ((letrec ((e3f90@f (lambda (e3f92@lhs* e3f93@rhs*) (if (null? e3f92@lhs*) (map (lambda (e3f96@x) (e2ed8@chi-expr e3f96@x e3f89@r e3f8a@mr)) e3f88@init*) ((lambda (e3f98@lhs e3f99@rhs) ((lambda (e3f9c@t) (if (memv e3f9c@t '(defun)) ((lambda (e3f9e@rhs) (cons (list 'set! e3f98@lhs e3f9e@rhs) (e3f90@f (cdr e3f92@lhs*) (cdr e3f93@rhs*)))) (e2ee2@chi-defun (cdr e3f99@rhs) e3f89@r e3f8a@mr)) (if (memv e3f9c@t '(expr)) ((lambda (e3fa0@rhs) (cons (list 'set! e3f98@lhs e3fa0@rhs) (e3f90@f (cdr e3f92@lhs*) (cdr e3f93@rhs*)))) (e2ed8@chi-expr (cdr e3f99@rhs) e3f89@r e3f8a@mr)) (if (memv e3f9c@t '(top-expr)) ((lambda (e3fa2@e) (cons e3fa2@e (e3f90@f (cdr e3f92@lhs*) (cdr e3f93@rhs*)))) (e2ed8@chi-expr (cdr e3f99@rhs) e3f89@r e3f8a@mr)) (error 'expand-interaction '"invallid" e3f99@rhs))))) (car e3f99@rhs))) (car e3f92@lhs*) (car e3f93@rhs*)))))) e3f90@f) e3f86@lhs* e3f87@rhs*))) (set! e2ee8@chi-rhs* (lambda (e3fa4@rhs* e3fa5@r e3fa6@mr) ((letrec ((e3faa@f (lambda (e3fac@ls) (if (null? e3fac@ls) '() ((lambda (e3fae@a) (cons e3fae@a (e3faa@f (cdr e3fac@ls)))) (e2ee4@chi-rhs (car e3fac@ls) e3fa5@r e3fa6@mr)))))) e3faa@f) e3fa4@rhs*))) (set! e2eea@find-bound=? (lambda (e3fb0@x e3fb1@lhs* e3fb2@rhs*) (if (null? e3fb1@lhs*) '#f (if (e2cb1@bound-id=? e3fb0@x (car e3fb1@lhs*)) (car e3fb2@rhs*) (e2eea@find-bound=? e3fb0@x (cdr e3fb1@lhs*) (cdr e3fb2@rhs*)))))) (set! e2eec@find-dups (lambda (e3fb6@ls) ((letrec ((e3fb8@f (lambda (e3fba@ls e3fbb@dups) (if (null? e3fba@ls) e3fbb@dups ((lambda (e3fbe@t) (if e3fbe@t ((lambda (e3fc0@x) (e3fb8@f (cdr e3fba@ls) (cons (list (car e3fba@ls) e3fc0@x) e3fbb@dups))) e3fbe@t) (e3fb8@f (cdr e3fba@ls) e3fbb@dups))) (e2eea@find-bound=? (car e3fba@ls) (cdr e3fba@ls) (cdr e3fba@ls))))))) e3fb8@f) e3fb6@ls '()))) (set! e2eee@chi-internal (lambda (e3fc2@e* e3fc3@r e3fc4@mr) ((lambda (e3fc8@rib) (call-with-values (lambda () (e2f11@chi-body* (map (lambda (e3fda@x) (e2c97@add-subst e3fc8@rib e3fda@x)) (e2ca9@syntax->list e3fc2@e*)) e3fc3@r e3fc4@mr '() '() '() '() '() e3fc8@rib '#f)) (lambda (e3fdc@e3fcb e3fdd@e3fcd e3fde@e3fcf e3fdf@e3fd1 e3fe0@e3fd3 e3fe1@e3fd5 e3fe2@e3fd7 e3fe3@e3fd9) ((lambda (e3fec@_exp* e3fed@kwd* e3fee@mod** e3fef@rhs* e3ff0@lex* e3ff1@mr e3ff2@r e3ff3@e*) (begin (if (null? e3ff3@e*) (e2f9f@syntax-violation '#f '"no expression in body" e3ff3@e*) (void)) ((lambda (e3ffc@init*) ((lambda (e3ffe@rhs*) ((lambda () (e2c0d@e2b7f@build-letrec* '#f (reverse e3ff0@lex*) (reverse e3ffe@rhs*) (e2c0a@e2b79@build-sequence '#f e3ffc@init*))))) (e2ee8@chi-rhs* e3fef@rhs* e3ff2@r e3ff1@mr))) (e2ed4@chi-expr* (append (apply append (reverse e3fee@mod**)) e3ff3@e*) e3ff2@r e3ff1@mr)))) e3fe3@e3fd9 e3fe2@e3fd7 e3fe1@e3fd5 e3fe0@e3fd3 e3fdf@e3fd1 e3fde@e3fcf e3fdd@e3fcd e3fdc@e3fcb)))) (e2c5a@make-empty-rib)))) (set! e2ef0@parse-module (lambda (e4000@e) ((lambda (e4002@t) ((lambda (e4004@ls/false) (if e4004@ls/false (apply (lambda (e4006@export* e4007@b*) (begin (if (not (for-all e2cab@id? e4006@export*)) (e2f9f@syntax-violation '#f '"module exports must be identifiers" e4000@e) (void)) (values '#f (list->vector e4006@export*) e4007@b*))) e4004@ls/false) ((lambda (e400a@t) ((lambda (e400c@ls/false) (if e400c@ls/false (apply (lambda (e400e@name e400f@export* e4010@b*) (begin (if (not (e2cab@id? e400e@name)) (e2f9f@syntax-violation '#f '"module name must be an identifier" e4000@e) (void)) (if (not (for-all e2cab@id? e400f@export*)) (e2f9f@syntax-violation '#f '"module exports must be identifiers" e4000@e) (void)) (values e400e@name (list->vector e400f@export*) e4010@b*))) e400c@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e400a@t))) (e2eb6@syntax-dispatch e400a@t '(_ any each-any . each-any)))) e4002@t))) (e2eb6@syntax-dispatch e4002@t '(_ each-any . each-any)))) e4000@e))) (set! e2ef6@e2ef1 (make-record-type-descriptor 'module-interface '#f 'e2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! e2ef8@e2ef3 '#f) (set! e2efa@e2ef2 (make-record-constructor-descriptor e2ef6@e2ef1 '#f e2ef8@e2ef3)) (set! e2efd@module-interface? (record-predicate e2ef6@e2ef1)) (set! e2eff@make-module-interface (record-constructor e2efa@e2ef2)) (set! e2f01@module-interface-first-mark (record-accessor e2ef6@e2ef1 '0)) (set! e2f03@module-interface-exp-id-vec (record-accessor e2ef6@e2ef1 '1)) (set! e2f05@module-interface-exp-lab-vec (record-accessor e2ef6@e2ef1 '2)) (set! e2f07@set-module-interface-first-mark! (record-mutator e2ef6@e2ef1 '0)) (set! e2f09@set-module-interface-exp-id-vec! (record-mutator e2ef6@e2ef1 '1)) (set! e2f0b@set-module-interface-exp-lab-vec! (record-mutator e2ef6@e2ef1 '2)) (set! e2f0d@module-interface-exp-id* (lambda (e4014@iface e4015@id) ((lambda (e4019@diff-marks) (begin (set! e4019@diff-marks (lambda (e4020@ls e4021@x) (begin (if (null? e4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (e4024@a) (if (eq? e4024@a e4021@x) '() (cons e4024@a (e4019@diff-marks (cdr e4020@ls) e4021@x)))) (car e4020@ls))))) ((lambda (e401a@diff e401b@id-vec) (if (null? e401a@diff) e401b@id-vec (vector-map (lambda (e401e@x) (e2c75@make-stx (e2c77@stx-expr e401e@x) (append e401a@diff (e2c79@stx-mark* e401e@x)) '() '())) e401b@id-vec))) (e4019@diff-marks (e2c79@stx-mark* e4015@id) (e2f01@module-interface-first-mark e4014@iface)) (e2f03@module-interface-exp-id-vec e4014@iface)))) '#f))) (set! e2f0f@chi-internal-module (lambda (e4026@e e4027@r e4028@mr e4029@lex* e402a@rhs* e402b@mod** e402c@kwd*) (call-with-values (lambda () (e2ef0@parse-module e4026@e)) (lambda (e403a@e4035 e403b@e4037 e403c@e4039) ((lambda (e4040@e* e4041@exp-id* e4042@name) ((lambda (e4046@rib) ((lambda (e4048@e*) ((lambda () (call-with-values (lambda () (e2f11@chi-body* e4048@e* e4027@r e4028@mr e4029@lex* e402a@rhs* e402b@mod** e402c@kwd* '() e4046@rib '#f)) (lambda (e405a@e404b e405b@e404d e405c@e404f e405d@e4051 e405e@e4053 e405f@e4055 e4060@e4057 e4061@e4059) ((lambda (e406a@_exp* e406b@kwd* e406c@mod** e406d@rhs* e406e@lex* e406f@mr e4070@r e4071@e*) ((lambda (e407a@exp-lab* e407b@mod**) (if (not e4042@name) (values e406e@lex* e406d@rhs* e4041@exp-id* e407a@exp-lab* e4070@r e406f@mr e407b@mod** e406b@kwd*) ((lambda (e407e@lab e407f@iface) (values e406e@lex* e406d@rhs* (vector e4042@name) (vector e407e@lab) (cons (cons e407e@lab (cons '$module e407f@iface)) e4070@r) (cons (cons e407e@lab (cons '$module e407f@iface)) e406f@mr) e407b@mod** e406b@kwd*)) (e2c2f@gen-label 'module) (e2eff@make-module-interface (car (e2c79@stx-mark* e4042@name)) (vector-map (lambda (e4082@x) (e2c75@make-stx (e2c77@stx-expr e4082@x) (e2c79@stx-mark* e4082@x) '() '())) e4041@exp-id*) e407a@exp-lab*)))) (vector-map (lambda (e4084@x) (or (e2cc5@id->label (e2c75@make-stx (e2cad@id->sym e4084@x) (e2c79@stx-mark* e4084@x) (list e4046@rib) '())) (e2f9f@syntax-violation '#f '"cannot find module export" e4084@x))) e4041@exp-id*) (cons e4071@e* e406c@mod**))) e4061@e4059 e4060@e4057 e405f@e4055 e405e@e4053 e405d@e4051 e405c@e404f e405b@e404d e405a@e404b)))))) (map (lambda (e4086@x) (e2c97@add-subst e4046@rib e4086@x)) (e2ca9@syntax->list e4040@e*)))) (e2c5a@make-empty-rib))) e403c@e4039 e403b@e4037 e403a@e4035))))) (set! e2f11@chi-body* (lambda (e4088@e* e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e408e@kwd* e408f@exp* e4090@rib e4091@top?) (if (null? e4088@e*) (values e4088@e* e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e408e@kwd* e408f@exp*) ((lambda (e409c@e) (call-with-values (lambda () (e2cd3@syntax-type e409c@e e4089@r)) (lambda (e40a4@e409f e40a5@e40a1 e40a6@e40a3) ((lambda (e40aa@kwd e40ab@value e40ac@type) ((lambda (e40b0@kwd*) ((lambda (e40b2@t) (if (memv e40b2@t '(define)) (call-with-values (lambda () (e2e3a@parse-define e409c@e)) (lambda (e40b8@e40b5 e40b9@e40b7) ((lambda (e40bc@rhs e40bd@id) (begin (if (e2cb9@bound-id-member? e40bd@id e40b0@kwd*) (e2f9f@syntax-violation '#f '"cannot redefine keyword" e409c@e) (void)) (call-with-values (lambda () (e2c33@gen-define-label+loc e40bd@id e4090@rib)) (lambda (e40c4@e40c1 e40c5@e40c3) ((lambda (e40c8@lex e40c9@lab) (begin (e2c5c@extend-rib! e4090@rib e40bd@id e40c9@lab) (e2f11@chi-body* (cdr e4088@e*) (e2e48@add-lexical e40c9@lab e40c8@lex e4089@r) e408a@mr (cons e40c8@lex e408b@lex*) (cons e40bc@rhs e408c@rhs*) e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?))) e40c5@e40c3 e40c4@e40c1))))) e40b9@e40b7 e40b8@e40b5))) (if (memv e40b2@t '(define-syntax)) (call-with-values (lambda () (e2e3c@parse-define-syntax e409c@e)) (lambda (e40d0@e40cd e40d1@e40cf) ((lambda (e40d4@rhs e40d5@id) (begin (if (e2cb9@bound-id-member? e40d5@id e40b0@kwd*) (e2f9f@syntax-violation '#f '"cannot redefine keyword" e409c@e) (void)) ((lambda (e40d8@lab e40d9@expanded-rhs) (begin (e2c5c@extend-rib! e4090@rib e40d5@id e40d8@lab) ((lambda (e40dc@b) (e2f11@chi-body* (cdr e4088@e*) (cons (cons e40d8@lab e40dc@b) e4089@r) (cons (cons e40d8@lab e40dc@b) e408a@mr) e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?)) (e2ce9@make-eval-transformer e40d9@expanded-rhs)))) (e2c35@gen-define-label e40d5@id e4090@rib) (e2f13@expand-transformer e40d4@rhs e408a@mr)))) e40d1@e40cf e40d0@e40cd))) (if (memv e40b2@t '(let-syntax letrec-syntax)) ((lambda (e40de@t) ((lambda (e40e0@ls/false) (if (and e40e0@ls/false (apply (lambda (e40e2@xlhs* e40e3@xrhs* e40e4@xbody*) (if (not (e2cb5@valid-bound-ids? e40e2@xlhs*)) (e2f9f@syntax-violation '#f '"invalid identifiers" e409c@e) (void))) e40e0@ls/false)) (apply (lambda (e40e8@xlhs* e40e9@xrhs* e40ea@xbody*) ((lambda (e40ee@xlab*) ((lambda (e40f0@xrib) ((lambda (e40f2@xb*) ((lambda () (e2f11@chi-body* (append (map (lambda (e40f4@x) (e2c97@add-subst e40f0@xrib e40f4@x)) e40ea@xbody*) (cdr e4088@e*)) (append (map cons e40ee@xlab* e40f2@xb*) e4089@r) (append (map cons e40ee@xlab* e40f2@xb*) e408a@mr) e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?)))) (map (lambda (e40f6@x) (e2ce9@make-eval-transformer (e2f13@expand-transformer (if (eq? e40ac@type 'let-syntax) e40f6@x (e2c97@add-subst e40f0@xrib e40f6@x)) e408a@mr))) e40e9@xrhs*))) (e2c66@make-full-rib e40e8@xlhs* e40ee@xlab*))) (map e2c2f@gen-label e40e8@xlhs*))) e40e0@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e40de@t))) (e2eb6@syntax-dispatch e40de@t '(_ #(each (any any)) . each-any)))) e409c@e) (if (memv e40b2@t '(begin)) ((lambda (e40f8@t) ((lambda (e40fa@ls/false) (if e40fa@ls/false (apply (lambda (e40fc@x*) (e2f11@chi-body* (append e40fc@x* (cdr e4088@e*)) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?)) e40fa@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e40f8@t))) (e2eb6@syntax-dispatch e40f8@t '(_ . each-any)))) e409c@e) (if (memv e40b2@t '(global-macro global-macro!)) (e2f11@chi-body* (cons (e2c97@add-subst e4090@rib (e2ed2@chi-global-macro e40ab@value e409c@e)) (cdr e4088@e*)) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?) (if (memv e40b2@t '(local-macro local-macro!)) (e2f11@chi-body* (cons (e2c97@add-subst e4090@rib (e2ed0@chi-local-macro e40ab@value e409c@e)) (cdr e4088@e*)) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?) (if (memv e40b2@t '(macro macro!)) (e2f11@chi-body* (cons (e2c97@add-subst e4090@rib (e2ece@chi-macro e40ab@value e409c@e)) (cdr e4088@e*)) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?) (if (memv e40b2@t '(module)) (call-with-values (lambda () (e2f0f@chi-internal-module e409c@e e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd*)) (lambda (e410e@e40ff e410f@e4101 e4110@e4103 e4111@e4105 e4112@e4107 e4113@e4109 e4114@e410b e4115@e410d) ((lambda (e411e@kwd* e411f@mod** e4120@mr e4121@r e4122@m-exp-lab* e4123@m-exp-id* e4124@rhs* e4125@lex*) (begin (vector-for-each (lambda (e412e@id e412f@lab) (e2c5c@extend-rib! e4090@rib e412e@id e412f@lab)) e4123@m-exp-id* e4122@m-exp-lab*) (e2f11@chi-body* (cdr e4088@e*) e4121@r e4120@mr e4125@lex* e4124@rhs* e411f@mod** e411e@kwd* e408f@exp* e4090@rib e4091@top?))) e4115@e410d e4114@e410b e4113@e4109 e4112@e4107 e4111@e4105 e4110@e4103 e410f@e4101 e410e@e40ff))) (if (memv e40b2@t '(library)) (begin (e2f81@library-expander (e2cc1@stx->datum e409c@e)) (e2f11@chi-body* (cdr e4088@e*) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?)) (if (memv e40b2@t '(export)) ((lambda (e4132@t) ((lambda (e4134@ls/false) (if e4134@ls/false (apply (lambda (e4136@exp-decl*) (e2f11@chi-body* (cdr e4088@e*) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* (append e4136@exp-decl* e408f@exp*) e4090@rib e4091@top?)) e4134@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e4132@t))) (e2eb6@syntax-dispatch e4132@t '(_ . each-any)))) e409c@e) (if (memv e40b2@t '(import)) ((lambda () ((lambda (e4139@module-import? e413b@module-import e413d@library-import) (begin (set! e4139@module-import? (lambda (e418c@e) ((lambda (e418e@t) ((lambda (e4190@ls/false) (if (and e4190@ls/false (apply (lambda (e4192@id) (e2cab@id? e4192@id)) e4190@ls/false)) (apply (lambda (e4194@id) '#t) e4190@ls/false) ((lambda (e4196@t) ((lambda (e4198@ls/false) (if e4198@ls/false (apply (lambda (e419a@imp*) '#f) e4198@ls/false) ((lambda (e419c@t) ((lambda (e419e@ls/false) (if e419e@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"malformed import form" e418c@e)) e419e@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e419c@t))) (e2eb6@syntax-dispatch e419c@t '_))) e4196@t))) (e2eb6@syntax-dispatch e4196@t '(_ . each-any)))) e418e@t))) (e2eb6@syntax-dispatch e418e@t '(_ any)))) e418c@e))) (set! e413b@module-import (lambda (e416a@e e416b@r) ((lambda (e416e@t) ((lambda (e4170@ls/false) (if (and e4170@ls/false (apply (lambda (e4172@id) (e2cab@id? e4172@id)) e4170@ls/false)) (apply (lambda (e4174@id) (call-with-values (lambda () (e2cd3@syntax-type e4174@id e416b@r)) (lambda (e417c@e4177 e417d@e4179 e417e@e417b) ((lambda (e4182@kwd e4183@value e4184@type) ((lambda (e4188@t) (if (memv e4188@t '($module)) ((lambda (e418a@iface) (values (e2f0d@module-interface-exp-id* e418a@iface e4174@id) (e2f05@module-interface-exp-lab-vec e418a@iface))) e4183@value) (e2f9f@syntax-violation '#f '"invalid import" e416a@e))) e4184@type)) e417e@e417b e417d@e4179 e417c@e4177)))) e4170@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e416e@t))) (e2eb6@syntax-dispatch e416e@t '(_ any)))) e416a@e))) (set! e413d@library-import (lambda (e414e@e) ((lambda (e4150@t) ((lambda (e4152@ls/false) (if e4152@ls/false (apply (lambda (e4154@ctxt e4155@imp*) (call-with-values (lambda () (e2f1b@parse-import-spec* (e2fa5@syntax->datum e4155@imp*))) (lambda (e415c@e4159 e415d@e415b) ((lambda (e4160@subst-labels e4161@subst-names) (values (vector-map (lambda (e4164@name) (e2c89@datum->stx e4154@ctxt e4164@name)) e4161@subst-names) e4160@subst-labels)) e415d@e415b e415c@e4159)))) e4152@ls/false) ((lambda (e4166@t) ((lambda (e4168@ls/false) (if e4168@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid import form" e414e@e)) e4168@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e4166@t))) (e2eb6@syntax-dispatch e4166@t '_))) e4150@t))) (e2eb6@syntax-dispatch e4150@t '(any . each-any)))) e414e@e))) (begin (call-with-values (lambda () (if (e4139@module-import? e409c@e) (e413b@module-import e409c@e e4089@r) (e413d@library-import e409c@e))) (lambda (e4142@e413f e4143@e4141) ((lambda (e4146@lab* e4147@id*) (vector-for-each (lambda (e414a@id e414b@lab) (e2c5c@extend-rib! e4090@rib e414a@id e414b@lab)) e4147@id* e4146@lab*)) e4143@e4141 e4142@e413f))) (e2f11@chi-body* (cdr e4088@e*) e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?)))) '#f '#f '#f))) (if e4091@top? (e2f11@chi-body* (cdr e4088@e*) e4089@r e408a@mr (cons (e2c2b@gen-lexical 'dummy) e408b@lex*) (cons (cons 'top-expr e409c@e) e408c@rhs*) e408d@mod** e40b0@kwd* e408f@exp* e4090@rib e4091@top?) (values e4088@e* e4089@r e408a@mr e408b@lex* e408c@rhs* e408d@mod** e40b0@kwd* e408f@exp*)))))))))))))) e40ac@type)) (if (e2cab@id? e40aa@kwd) (cons e40aa@kwd e408e@kwd*) e408e@kwd*))) e40a6@e40a3 e40a5@e40a1 e40a4@e409f)))) (car e4088@e*))))) (set! e2f13@expand-transformer (lambda (e41a0@expr e41a1@r) ((lambda (e41a4@rtc) ((lambda (e41a6@expanded-rhs) (begin (for-each ((lambda (e41a8@mark-visit) (lambda (e41aa@x) (begin (e2acf@e2970@invoke-library e41aa@x) (e41a8@mark-visit e41aa@x)))) (e2f23@vis-collector)) (e41a4@rtc)) e41a6@expanded-rhs)) ((lambda (e41b4@e41ad e41b5@e41af e41b6@e41b1 e41b7@e41b3) ((lambda (e41bc@swap) (dynamic-wind e41bc@swap (lambda () (e2ed8@chi-expr e41a0@expr e41a1@r e41a1@r)) e41bc@swap)) (lambda () (begin ((lambda (e41be@t) (begin (e41b4@e41ad e41b6@e41b1) (set! e41b6@e41b1 e41be@t))) (e41b4@e41ad)) ((lambda (e41c0@t) (begin (e41b5@e41af e41b7@e41b3) (set! e41b7@e41b3 e41c0@t))) (e41b5@e41af)))))) e2f21@inv-collector e2f23@vis-collector e41a4@rtc (lambda (e41c2@x) (values))))) (e2f1f@make-collector)))) (set! e2f15@parse-exports (lambda (e41c4@exp*) ((letrec ((e41c6@f (lambda (e41c8@exp* e41c9@int* e41ca@ext*) (if (null? e41c8@exp*) (begin (if (not (e2cb5@valid-bound-ids? e41ca@ext*)) (e2f9f@syntax-violation 'export '"invalid exports" (e2eec@find-dups e41ca@ext*)) (void)) (values (map e2fa5@syntax->datum e41ca@ext*) e41c9@int*)) ((lambda (e41ce@t) ((lambda (e41d0@ls/false) (if e41d0@ls/false (apply (lambda (e41d2@rename e41d3@i* e41d4@e*) (begin (if (not (and (eq? (e2fa5@syntax->datum e41d2@rename) 'rename) (for-all e2cab@id? e41d3@i*) (for-all e2cab@id? e41d4@e*))) (e2f9f@syntax-violation 'export '"invalid export specifier" (car e41c8@exp*)) (void)) (e41c6@f (cdr e41c8@exp*) (append e41d3@i* e41c9@int*) (append e41d4@e* e41ca@ext*)))) e41d0@ls/false) ((lambda (e41d8@t) ((lambda (e41da@ls/false) (if e41da@ls/false (apply (lambda (e41dc@ie) (begin (if (not (e2cab@id? e41dc@ie)) (e2f9f@syntax-violation 'export '"invalid export" e41dc@ie) (void)) (e41c6@f (cdr e41c8@exp*) (cons e41dc@ie e41c9@int*) (cons e41dc@ie e41ca@ext*)))) e41da@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e41d8@t))) (e2eb6@syntax-dispatch e41d8@t 'any))) e41ce@t))) (e2eb6@syntax-dispatch e41ce@t '(any . #(each (any any)))))) (car e41c8@exp*)))))) e41c6@f) e41c4@exp* '() '()))) (set! e2f17@parse-library-name (lambda (e41de@spec) ((lambda (e41e1@parse) (begin (set! e41e1@parse (lambda (e41ee@x) ((lambda (e41f0@t) ((lambda (e41f2@ls/false) (if (and e41f2@ls/false (apply (lambda (e41f4@v*) (for-all (lambda (e41f6@x) ((lambda (e41f8@x) (and (integer? e41f8@x) (exact? e41f8@x))) (e2fa5@syntax->datum e41f6@x))) e41f4@v*)) e41f2@ls/false)) (apply (lambda (e41fa@v*) (values '() (map e2fa5@syntax->datum e41fa@v*))) e41f2@ls/false) ((lambda (e41fc@t) ((lambda (e41fe@ls/false) (if (and e41fe@ls/false (apply (lambda (e4200@x e4201@rest) (symbol? (e2fa5@syntax->datum e4200@x))) e41fe@ls/false)) (apply (lambda (e4204@x e4205@rest) (call-with-values (lambda () (e41e1@parse e4205@rest)) (lambda (e420c@e4209 e420d@e420b) ((lambda (e4210@v* e4211@x*) (values (cons (e2fa5@syntax->datum e4204@x) e4211@x*) e4210@v*)) e420d@e420b e420c@e4209)))) e41fe@ls/false) ((lambda (e4214@t) ((lambda (e4216@ls/false) (if e4216@ls/false (apply (lambda () (values '() '())) e4216@ls/false) ((lambda (e4218@t) ((lambda (e421a@ls/false) (if e421a@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid library name" e41de@spec)) e421a@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e4218@t))) (e2eb6@syntax-dispatch e4218@t '_))) e4214@t))) (e2eb6@syntax-dispatch e4214@t '()))) e41fc@t))) (e2eb6@syntax-dispatch e41fc@t '(any . any)))) e41f0@t))) (e2eb6@syntax-dispatch e41f0@t '(each-any)))) e41ee@x))) (call-with-values (lambda () (e41e1@parse e41de@spec)) (lambda (e41e6@e41e3 e41e7@e41e5) ((lambda (e41ea@ver* e41eb@name*) (begin (if (null? e41eb@name*) (e2f9f@syntax-violation '#f '"empty library name" e41de@spec) (void)) (values e41eb@name* e41ea@ver*))) e41e7@e41e5 e41e6@e41e3))))) '#f))) (set! e2f19@parse-library (lambda (e421c@e) ((lambda (e421e@t) ((lambda (e4220@ls/false) (if (and e4220@ls/false (apply (lambda (e4222@library e4223@name* e4224@export e4225@exp* e4226@import e4227@imp* e4228@b*) (and (eq? (e2fa5@syntax->datum e4224@export) 'export) (eq? (e2fa5@syntax->datum e4226@import) 'import) (eq? (e2fa5@syntax->datum e4222@library) 'library))) e4220@ls/false)) (apply (lambda (e4230@library e4231@name* e4232@export e4233@exp* e4234@import e4235@imp* e4236@b*) (values e4231@name* e4233@exp* e4235@imp* e4236@b*)) e4220@ls/false) ((lambda (e423e@t) ((lambda (e4240@ls/false) (if e4240@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"malformed library" e421c@e)) e4240@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e423e@t))) (e2eb6@syntax-dispatch e423e@t '_))) e421e@t))) (e2eb6@syntax-dispatch e421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) e421c@e))) (set! e2f1b@parse-import-spec* ((lambda () ((lambda (e4243@idsyn? e4245@dup-error e4247@merge-substs e4249@exclude* e424b@find* e424d@rem* e424f@remove-dups e4251@parse-library-name e4253@import-library e4255@get-import e4257@add-imports!) (begin (set! e4243@idsyn? (lambda (e444c@x) (symbol? (e2fa5@syntax->datum e444c@x)))) (set! e4245@dup-error (lambda (e444a@name) (e2f9f@syntax-violation 'import '"two imports with different bindings" e444a@name))) (set! e4247@merge-substs (lambda (e4438@s e4439@subst) ((lambda (e443d@insert-to-subst) (begin (set! e443d@insert-to-subst (lambda (e443e@a e443f@subst) ((lambda (e4442@name e4443@label) ((lambda (e4446@t) (if e4446@t ((lambda (e4448@x) (if (eq? (cdr e4448@x) e4443@label) e443f@subst (e4245@dup-error e4442@name))) e4446@t) (cons e443e@a e443f@subst))) (assq e4442@name e443f@subst))) (car e443e@a) (cdr e443e@a)))) (if (null? e4438@s) e4439@subst (e443d@insert-to-subst (car e4438@s) (e4247@merge-substs (cdr e4438@s) e4439@subst))))) '#f))) (set! e4249@exclude* (lambda (e4408@sym* e4409@subst) ((lambda (e440d@exclude) (begin (set! e440d@exclude (lambda (e4426@sym e4427@subst) (if (null? e4427@subst) (e2f9f@syntax-violation 'import '"cannot rename unbound identifier" e4426@sym) (if (eq? e4426@sym (caar e4427@subst)) (values (cdar e4427@subst) (cdr e4427@subst)) ((lambda (e442a@a) (call-with-values (lambda () (e440d@exclude e4426@sym (cdr e4427@subst))) (lambda (e4430@e442d e4431@e442f) ((lambda (e4434@subst e4435@old) (values e4435@old (cons e442a@a e4434@subst))) e4431@e442f e4430@e442d)))) (car e4427@subst)))))) (if (null? e4408@sym*) (values '() e4409@subst) (call-with-values (lambda () (e440d@exclude (car e4408@sym*) e4409@subst)) (lambda (e4412@e440f e4413@e4411) ((lambda (e4416@subst e4417@old) (call-with-values (lambda () (e4249@exclude* (cdr e4408@sym*) e4416@subst)) (lambda (e441e@e441b e441f@e441d) ((lambda (e4422@subst e4423@old*) (values (cons e4417@old e4423@old*) e4422@subst)) e441f@e441d e441e@e441b)))) e4413@e4411 e4412@e440f)))))) '#f))) (set! e424b@find* (lambda (e4400@sym* e4401@subst) (map (lambda (e4404@x) ((lambda (e4406@t) (if e4406@t (cdr e4406@t) (e2f9f@syntax-violation 'import '"cannot find identifier" e4404@x))) (assq e4404@x e4401@subst))) e4400@sym*))) (set! e424d@rem* (lambda (e43f8@sym* e43f9@subst) ((letrec ((e43fc@f (lambda (e43fe@subst) (if (null? e43fe@subst) '() (if (memq (caar e43fe@subst) e43f8@sym*) (e43fc@f (cdr e43fe@subst)) (cons (car e43fe@subst) (e43fc@f (cdr e43fe@subst)))))))) e43fc@f) e43f9@subst))) (set! e424f@remove-dups (lambda (e43f6@ls) (if (null? e43f6@ls) '() (if (memq (car e43f6@ls) (cdr e43f6@ls)) (e424f@remove-dups (cdr e43f6@ls)) (cons (car e43f6@ls) (e424f@remove-dups (cdr e43f6@ls))))))) (set! e4251@parse-library-name (lambda (e430e@spec) ((lambda (e4311@subversion? e4313@subversion-pred e4315@version-pred) (begin (set! e4311@subversion? (lambda (e43f2@x) ((lambda (e43f4@x) (and (integer? e43f4@x) (exact? e43f4@x) (>= e43f4@x '0))) (e2fa5@syntax->datum e43f2@x)))) (set! e4313@subversion-pred (lambda (e4392@x*) ((lambda (e4394@t) ((lambda (e4396@ls/false) (if (and e4396@ls/false (apply (lambda (e4398@n) (e4311@subversion? e4398@n)) e4396@ls/false)) (apply (lambda (e439a@n) (lambda (e439c@x) (= e439c@x (e2fa5@syntax->datum e439a@n)))) e4396@ls/false) ((lambda (e439e@t) ((lambda (e43a0@ls/false) (if (and e43a0@ls/false (apply (lambda (e43a2@p? e43a3@sub*) (eq? (e2fa5@syntax->datum e43a2@p?) 'and)) e43a0@ls/false)) (apply (lambda (e43a6@p? e43a7@sub*) ((lambda (e43aa@p*) (lambda (e43ac@x) (for-all (lambda (e43ae@p) (e43ae@p e43ac@x)) e43aa@p*))) (map e4313@subversion-pred e43a7@sub*))) e43a0@ls/false) ((lambda (e43b0@t) ((lambda (e43b2@ls/false) (if (and e43b2@ls/false (apply (lambda (e43b4@p? e43b5@sub*) (eq? (e2fa5@syntax->datum e43b4@p?) 'or)) e43b2@ls/false)) (apply (lambda (e43b8@p? e43b9@sub*) ((lambda (e43bc@p*) (lambda (e43be@x) (exists (lambda (e43c0@p) (e43c0@p e43be@x)) e43bc@p*))) (map e4313@subversion-pred e43b9@sub*))) e43b2@ls/false) ((lambda (e43c2@t) ((lambda (e43c4@ls/false) (if (and e43c4@ls/false (apply (lambda (e43c6@p? e43c7@sub) (eq? (e2fa5@syntax->datum e43c6@p?) 'not)) e43c4@ls/false)) (apply (lambda (e43ca@p? e43cb@sub) ((lambda (e43ce@p) (lambda (e43d0@x) (not (e43ce@p e43d0@x)))) (e4313@subversion-pred e43cb@sub))) e43c4@ls/false) ((lambda (e43d2@t) ((lambda (e43d4@ls/false) (if (and e43d4@ls/false (apply (lambda (e43d6@p? e43d7@n) (and (eq? (e2fa5@syntax->datum e43d6@p?) '<=) (e4311@subversion? e43d7@n))) e43d4@ls/false)) (apply (lambda (e43da@p? e43db@n) (lambda (e43de@x) (<= e43de@x (e2fa5@syntax->datum e43db@n)))) e43d4@ls/false) ((lambda (e43e0@t) ((lambda (e43e2@ls/false) (if (and e43e2@ls/false (apply (lambda (e43e4@p? e43e5@n) (and (eq? (e2fa5@syntax->datum e43e4@p?) '>=) (e4311@subversion? e43e5@n))) e43e2@ls/false)) (apply (lambda (e43e8@p? e43e9@n) (lambda (e43ec@x) (>= e43ec@x (e2fa5@syntax->datum e43e9@n)))) e43e2@ls/false) ((lambda (e43ee@t) ((lambda (e43f0@ls/false) (if e43f0@ls/false (apply (lambda () (e2f9f@syntax-violation 'import '"invalid sub-version spec" e430e@spec e4392@x*)) e43f0@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e43ee@t))) (e2eb6@syntax-dispatch e43ee@t '_))) e43e0@t))) (e2eb6@syntax-dispatch e43e0@t '(any any)))) e43d2@t))) (e2eb6@syntax-dispatch e43d2@t '(any any)))) e43c2@t))) (e2eb6@syntax-dispatch e43c2@t '(any any)))) e43b0@t))) (e2eb6@syntax-dispatch e43b0@t '(any . each-any)))) e439e@t))) (e2eb6@syntax-dispatch e439e@t '(any . each-any)))) e4394@t))) (e2eb6@syntax-dispatch e4394@t 'any))) e4392@x*))) (set! e4315@version-pred (lambda (e4342@x*) ((lambda (e4344@t) ((lambda (e4346@ls/false) (if e4346@ls/false (apply (lambda () (lambda (e4348@x) '#t)) e4346@ls/false) ((lambda (e434a@t) ((lambda (e434c@ls/false) (if (and e434c@ls/false (apply (lambda (e434e@c e434f@ver*) (eq? (e2fa5@syntax->datum e434e@c) 'and)) e434c@ls/false)) (apply (lambda (e4352@c e4353@ver*) ((lambda (e4356@p*) (lambda (e4358@x) (for-all (lambda (e435a@p) (e435a@p e4358@x)) e4356@p*))) (map e4315@version-pred e4353@ver*))) e434c@ls/false) ((lambda (e435c@t) ((lambda (e435e@ls/false) (if (and e435e@ls/false (apply (lambda (e4360@c e4361@ver*) (eq? (e2fa5@syntax->datum e4360@c) 'or)) e435e@ls/false)) (apply (lambda (e4364@c e4365@ver*) ((lambda (e4368@p*) (lambda (e436a@x) (exists (lambda (e436c@p) (e436c@p e436a@x)) e4368@p*))) (map e4315@version-pred e4365@ver*))) e435e@ls/false) ((lambda (e436e@t) ((lambda (e4370@ls/false) (if (and e4370@ls/false (apply (lambda (e4372@c e4373@ver) (eq? (e2fa5@syntax->datum e4372@c) 'not)) e4370@ls/false)) (apply (lambda (e4376@c e4377@ver) ((lambda (e437a@p) (lambda (e437c@x) (not (e437a@p e437c@x)))) (e4315@version-pred e4377@ver))) e4370@ls/false) ((lambda (e437e@t) ((lambda (e4380@ls/false) (if e4380@ls/false (apply (lambda (e4382@sub*) ((lambda (e4384@p*) (lambda (e4386@x) ((letrec ((e4388@f (lambda (e438a@p* e438b@x) (if (null? e438a@p*) '#t (if (null? e438b@x) '#f (and ((car e438a@p*) (car e438b@x)) (e4388@f (cdr e438a@p*) (cdr e438b@x)))))))) e4388@f) e4384@p* e4386@x))) (map e4313@subversion-pred e4382@sub*))) e4380@ls/false) ((lambda (e438e@t) ((lambda (e4390@ls/false) (if e4390@ls/false (apply (lambda () (e2f9f@syntax-violation 'import '"invalid version spec" e430e@spec e4342@x*)) e4390@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e438e@t))) (e2eb6@syntax-dispatch e438e@t '_))) e437e@t))) (e2eb6@syntax-dispatch e437e@t 'each-any))) e436e@t))) (e2eb6@syntax-dispatch e436e@t '(any any)))) e435c@t))) (e2eb6@syntax-dispatch e435c@t '(any . each-any)))) e434a@t))) (e2eb6@syntax-dispatch e434a@t '(any . each-any)))) e4344@t))) (e2eb6@syntax-dispatch e4344@t '()))) e4342@x*))) ((letrec ((e4316@f (lambda (e4318@x) ((lambda (e431a@t) ((lambda (e431c@ls/false) (if e431c@ls/false (apply (lambda (e431e@version-spec*) (values '() (e4315@version-pred e431e@version-spec*))) e431c@ls/false) ((lambda (e4320@t) ((lambda (e4322@ls/false) (if (and e4322@ls/false (apply (lambda (e4324@x e4325@x*) (e4243@idsyn? e4324@x)) e4322@ls/false)) (apply (lambda (e4328@x e4329@x*) (call-with-values (lambda () (e4316@f e4329@x*)) (lambda (e4330@e432d e4331@e432f) ((lambda (e4334@pred e4335@name) (values (cons (e2fa5@syntax->datum e4328@x) e4335@name) e4334@pred)) e4331@e432f e4330@e432d)))) e4322@ls/false) ((lambda (e4338@t) ((lambda (e433a@ls/false) (if e433a@ls/false (apply (lambda () (values '() (lambda (e433c@x) '#t))) e433a@ls/false) ((lambda (e433e@t) ((lambda (e4340@ls/false) (if e4340@ls/false (apply (lambda () (e2f9f@syntax-violation '#f '"invalid import spec" e430e@spec)) e4340@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e433e@t))) (e2eb6@syntax-dispatch e433e@t '_))) e4338@t))) (e2eb6@syntax-dispatch e4338@t '()))) e4320@t))) (e2eb6@syntax-dispatch e4320@t '(any . any)))) e431a@t))) (e2eb6@syntax-dispatch e431a@t '(each-any)))) e4318@x)))) e4316@f) e430e@spec))) '#f '#f '#f))) (set! e4253@import-library (lambda (e42fe@spec*) (call-with-values (lambda () (e4251@parse-library-name e42fe@spec*)) (lambda (e4304@e4301 e4305@e4303) ((lambda (e4308@pred e4309@name) (begin (if (null? e4309@name) (e2f9f@syntax-violation 'import '"empty library name" e42fe@spec*) (void)) ((lambda (e430c@lib) (begin (if (not e430c@lib) (e2f9f@syntax-violation 'import '"cannot find library with required name" e4309@name) (void)) (if (not (e4308@pred (e2aa0@e2912@library-version e430c@lib))) (e2f9f@syntax-violation 'import '"library does not satisfy version specification" e42fe@spec* e430c@lib) (void)) ((e2f25@imp-collector) e430c@lib) (e2aa4@e291a@library-subst e430c@lib))) (e2ac8@e2962@find-library-by-name e4309@name)))) e4305@e4303 e4304@e4301))))) (set! e4255@get-import (lambda (e4270@spec) ((lambda (e4272@t) ((lambda (e4274@ls/false) (if (and e4274@ls/false (apply (lambda (e4276@x e4277@x*) (not (memq (e2fa5@syntax->datum e4276@x) '(for rename except only prefix library)))) e4274@ls/false)) (apply (lambda (e427a@x e427b@x*) (e4253@import-library (cons e427a@x e427b@x*))) e4274@ls/false) ((lambda (e427e@t) ((lambda (e4280@ls/false) (if (and e4280@ls/false (apply (lambda (e4282@rename e4283@isp e4284@old* e4285@new*) (and (eq? (e2fa5@syntax->datum e4282@rename) 'rename) (for-all e4243@idsyn? e4284@old*) (for-all e4243@idsyn? e4285@new*))) e4280@ls/false)) (apply (lambda (e428a@rename e428b@isp e428c@old* e428d@new*) ((lambda (e4292@subst e4293@old* e4294@new*) ((lambda (e4298@old-label*) ((lambda (e429a@subst) (e4247@merge-substs (map cons e4294@new* e4298@old-label*) e429a@subst)) (e424d@rem* e4293@old* e4292@subst))) (e424b@find* e4293@old* e4292@subst))) (e4255@get-import e428b@isp) (map e2fa5@syntax->datum e428c@old*) (map e2fa5@syntax->datum e428d@new*))) e4280@ls/false) ((lambda (e429c@t) ((lambda (e429e@ls/false) (if (and e429e@ls/false (apply (lambda (e42a0@except e42a1@isp e42a2@sym*) (and (eq? (e2fa5@syntax->datum e42a0@except) 'except) (for-all e4243@idsyn? e42a2@sym*))) e429e@ls/false)) (apply (lambda (e42a6@except e42a7@isp e42a8@sym*) ((lambda (e42ac@subst) (e424d@rem* (map e2fa5@syntax->datum e42a8@sym*) e42ac@subst)) (e4255@get-import e42a7@isp))) e429e@ls/false) ((lambda (e42ae@t) ((lambda (e42b0@ls/false) (if (and e42b0@ls/false (apply (lambda (e42b2@only e42b3@isp e42b4@sym*) (and (eq? (e2fa5@syntax->datum e42b2@only) 'only) (for-all e4243@idsyn? e42b4@sym*))) e42b0@ls/false)) (apply (lambda (e42b8@only e42b9@isp e42ba@sym*) ((lambda (e42be@subst e42bf@sym*) ((lambda (e42c2@sym*) ((lambda (e42c4@lab*) (map cons e42c2@sym* e42c4@lab*)) (e424b@find* e42c2@sym* e42be@subst))) (e424f@remove-dups e42bf@sym*))) (e4255@get-import e42b9@isp) (map e2fa5@syntax->datum e42ba@sym*))) e42b0@ls/false) ((lambda (e42c6@t) ((lambda (e42c8@ls/false) (if (and e42c8@ls/false (apply (lambda (e42ca@prefix e42cb@isp e42cc@p) (and (eq? (e2fa5@syntax->datum e42ca@prefix) 'prefix) (e4243@idsyn? e42cc@p))) e42c8@ls/false)) (apply (lambda (e42d0@prefix e42d1@isp e42d2@p) ((lambda (e42d6@subst e42d7@prefix) (map (lambda (e42da@x) (cons (string->symbol (string-append e42d7@prefix (symbol->string (car e42da@x)))) (cdr e42da@x))) e42d6@subst)) (e4255@get-import e42d1@isp) (symbol->string (e2fa5@syntax->datum e42d2@p)))) e42c8@ls/false) ((lambda (e42dc@t) ((lambda (e42de@ls/false) (if (and e42de@ls/false (apply (lambda (e42e0@library e42e1@spec*) (eq? (e2fa5@syntax->datum e42e0@library) 'library)) e42de@ls/false)) (apply (lambda (e42e4@library e42e5@spec*) (e4253@import-library e42e5@spec*)) e42de@ls/false) ((lambda (e42e8@t) ((lambda (e42ea@ls/false) (if (and e42ea@ls/false (apply (lambda (e42ec@for e42ed@isp e42ee@rest) (eq? (e2fa5@syntax->datum e42ec@for) 'for)) e42ea@ls/false)) (apply (lambda (e42f2@for e42f3@isp e42f4@rest) (e4255@get-import e42f3@isp)) e42ea@ls/false) ((lambda (e42f8@t) ((lambda (e42fa@ls/false) (if e42fa@ls/false (apply (lambda (e42fc@spec) (e2f9f@syntax-violation 'import '"invalid import spec" e42fc@spec)) e42fa@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e42f8@t))) (e2eb6@syntax-dispatch e42f8@t 'any))) e42e8@t))) (e2eb6@syntax-dispatch e42e8@t '(any any . any)))) e42dc@t))) (e2eb6@syntax-dispatch e42dc@t '(any each-any)))) e42c6@t))) (e2eb6@syntax-dispatch e42c6@t '(any any any)))) e42ae@t))) (e2eb6@syntax-dispatch e42ae@t '(any any . each-any)))) e429c@t))) (e2eb6@syntax-dispatch e429c@t '(any any . each-any)))) e427e@t))) (e2eb6@syntax-dispatch e427e@t '(any any . #(each (any any)))))) e4272@t))) (e2eb6@syntax-dispatch e4272@t '(any . each-any)))) e4270@spec))) (set! e4257@add-imports! (lambda (e4260@imp e4261@h) ((lambda (e4264@subst) (for-each (lambda (e4266@x) ((lambda (e4268@name e4269@label) ((lambda (e426c@t) (if e426c@t ((lambda (e426e@l) (if (not (eq? e426e@l e4269@label)) (e4245@dup-error e4268@name) (void))) e426c@t) (hashtable-set! e4261@h e4268@name e4269@label))) (hashtable-ref e4261@h e4268@name '#f))) (car e4266@x) (cdr e4266@x))) e4264@subst)) (e4255@get-import e4260@imp)))) (lambda (e4258@imp*) ((letrec ((e425a@f (lambda (e425c@imp* e425d@h) (if (null? e425c@imp*) (hashtable-entries e425d@h) (begin (e4257@add-imports! (car e425c@imp*) e425d@h) (e425a@f (cdr e425c@imp*) e425d@h)))))) e425a@f) e4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! e2f1d@make-top-rib (lambda (e444e@names e444f@labels) ((lambda (e4452@rib) (begin (vector-for-each (lambda (e4454@name e4455@label) (begin (if (not (symbol? e4454@name)) (error 'make-top-rib '"BUG: not a symbol" e4454@name) (void)) (e2c5e@extend-rib/nc! e4452@rib (e2c75@make-stx e4454@name e2c27@top-mark* '() '()) e4455@label))) e444e@names e444f@labels) e4452@rib)) (e2c5a@make-empty-rib)))) (set! e2f1f@make-collector (lambda () ((lambda (e4458@ls) (lambda e445c ((lambda (e445d) (if (= e445d '0) (apply (lambda () e4458@ls) e445c) (if (= e445d '1) (apply (lambda (e445a@x) (set! e4458@ls (e2c20@set-cons e445a@x e4458@ls))) e445c) (error 'apply '"invalid arg count")))) (length e445c)))) '()))) (set! e2f21@inv-collector (e2855@e277f@make-parameter (lambda e445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (e4460@x) (begin (if (not (procedure? e4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" e4460@x) (void)) e4460@x)))) (set! e2f23@vis-collector (e2855@e277f@make-parameter (lambda e4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (e4464@x) (begin (if (not (procedure? e4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" e4464@x) (void)) e4464@x)))) (set! e2f25@imp-collector (e2855@e277f@make-parameter (lambda e4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (e4468@x) (begin (if (not (procedure? e4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" e4468@x) (void)) e4468@x)))) (set! e2f27@chi-library-internal (lambda (e446a@e* e446b@rib e446c@top?) (call-with-values (lambda () (e2f11@chi-body* e446a@e* '() '() '() '() '() '() '() e446b@rib e446c@top?)) (lambda (e4480@e4471 e4481@e4473 e4482@e4475 e4483@e4477 e4484@e4479 e4485@e447b e4486@e447d e4487@e447f) ((lambda (e4490@exp* e4491@_kwd* e4492@mod** e4493@rhs* e4494@lex* e4495@mr e4496@r e4497@e*) (values (append (apply append (reverse e4492@mod**)) e4497@e*) e4496@r e4495@mr (reverse e4494@lex*) (reverse e4493@rhs*) e4490@exp*)) e4487@e447f e4486@e447d e4485@e447b e4484@e4479 e4483@e4477 e4482@e4475 e4481@e4473 e4480@e4471))))) (set! e2f29@chi-interaction-expr (lambda (e44a0@e e44a1@rib e44a2@r) (call-with-values (lambda () (e2f11@chi-body* (list e44a0@e) e44a2@r e44a2@r '() '() '() '() '() e44a1@rib '#t)) (lambda (e44b6@e44a7 e44b7@e44a9 e44b8@e44ab e44b9@e44ad e44ba@e44af e44bb@e44b1 e44bc@e44b3 e44bd@e44b5) ((lambda (e44c6@_exp* e44c7@_kwd* e44c8@mod** e44c9@rhs* e44ca@lex* e44cb@mr e44cc@r e44cd@e*) ((lambda (e44d6@e*) ((lambda (e44d8@e) (values e44d8@e e44cc@r)) (if (null? e44d6@e*) (e2c0b@e2b7b@build-void) (if (null? (cdr e44d6@e*)) (car e44d6@e*) (e2c0a@e2b79@build-sequence '#f e44d6@e*))))) (e2ee6@expand-interaction-rhs*/init* (reverse e44ca@lex*) (reverse e44c9@rhs*) (append (apply append (reverse e44c8@mod**)) e44cd@e*) e44cc@r e44cb@mr))) e44bd@e44b5 e44bc@e44b3 e44bb@e44b1 e44ba@e44af e44b9@e44ad e44b8@e44ab e44b7@e44a9 e44b6@e44a7))))) (set! e2f2b@library-body-expander (lambda (e44da@name e44db@main-exp* e44dc@imp* e44dd@b* e44de@top?) ((lambda (e44e5@itc) (begin (set! e44e5@itc (e2f1f@make-collector)) ((lambda (e44ee@e44e7 e44ef@e44e9 e44f0@e44eb e44f1@e44ed) ((lambda (e44f6@swap) (dynamic-wind e44f6@swap (lambda () (call-with-values (lambda () (e2f1b@parse-import-spec* e44dc@imp*)) (lambda (e44fc@e44f9 e44fd@e44fb) ((lambda (e4500@subst-labels e4501@subst-names) ((lambda (e4504@rib) ((lambda (e4507@wrap) (begin (set! e4507@wrap (lambda (e4582@x) (e2c75@make-stx e4582@x e2c27@top-mark* (list e4504@rib) '()))) ((lambda (e4508@b* e4509@main-exp* e450a@rtc e450b@vtc) ((lambda (e4518@e4511 e4519@e4513 e451a@e4515 e451b@e4517) ((lambda (e4520@swap) (dynamic-wind e4520@swap (lambda () (call-with-values (lambda () (e2f27@chi-library-internal e4508@b* e4504@rib e44de@top?)) (lambda (e452e@e4523 e452f@e4525 e4530@e4527 e4531@e4529 e4532@e452b e4533@e452d) ((lambda (e453a@internal-exp* e453b@rhs* e453c@lex* e453d@mr e453e@r e453f@init*) (call-with-values (lambda () (e2f15@parse-exports (append e4509@main-exp* e453a@internal-exp*))) (lambda (e454a@e4547 e454b@e4549) ((lambda (e454e@exp-id* e454f@exp-name*) (begin (e2c62@seal-rib! e4504@rib) ((lambda (e4552@init*) ((lambda (e4554@rhs*) ((lambda () (begin (e2c64@unseal-rib! e4504@rib) ((lambda (e4556@loc* e4557@export-subst) ((lambda (e455b@errstr) (begin (set! e455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (e2f8b@make-export-env/macros e453c@lex* e4556@loc* e453e@r)) (lambda (e4562@e455d e4563@e455f e4564@e4561) ((lambda (e4568@macro* e4569@global* e456a@export-env) (begin (for-each (lambda (e456e@s) ((lambda (e4570@name e4571@label) ((lambda (e4574@p) (if e4574@p ((lambda (e4576@b) ((lambda (e4578@type) (if (eq? e4578@type 'mutable) (e2f9f@syntax-violation 'export e455b@errstr e4570@name) (void))) (car e4576@b))) (cdr e4574@p)) (void))) (assq e4571@label e456a@export-env))) (car e456e@s) (cdr e456e@s))) e4557@export-subst) ((lambda (e457a@invoke-body e457b@invoke-definitions) (values (e44e5@itc) (e450a@rtc) (e450b@vtc) (e2c0a@e2b79@build-sequence '#f (append e457b@invoke-definitions (list e457a@invoke-body))) e4568@macro* e4557@export-subst e456a@export-env)) (e2c0d@e2b7f@build-letrec* '#f e453c@lex* e4554@rhs* (e2f87@build-exports e4569@global* e4552@init*)) (map e2c06@e2ad6@build-global-define (map cdr e4569@global*))))) e4564@e4561 e4563@e455f e4562@e455d))))) '#f)) (map e2c2d@gen-global e453c@lex*) (e2f89@make-export-subst e454f@exp-name* e454e@exp-id*)))))) (e2ee8@chi-rhs* e453b@rhs* e453e@r e453d@mr))) (e2ed4@chi-expr* e453f@init* e453e@r e453d@mr)))) e454b@e4549 e454a@e4547)))) e4533@e452d e4532@e452b e4531@e4529 e4530@e4527 e452f@e4525 e452e@e4523)))) e4520@swap)) (lambda () (begin ((lambda (e457e@t) (begin (e4518@e4511 e451a@e4515) (set! e451a@e4515 e457e@t))) (e4518@e4511)) ((lambda (e4580@t) (begin (e4519@e4513 e451b@e4517) (set! e451b@e4517 e4580@t))) (e4519@e4513)))))) e2f21@inv-collector e2f23@vis-collector e450a@rtc e450b@vtc)) (map e4507@wrap e44dd@b*) (map e4507@wrap e44db@main-exp*) (e2f1f@make-collector) (e2f1f@make-collector)))) '#f)) (e2f1d@make-top-rib e4501@subst-names e4500@subst-labels))) e44fd@e44fb e44fc@e44f9)))) e44f6@swap)) (lambda () (begin ((lambda (e4584@t) (begin (e44ee@e44e7 e44f0@e44eb) (set! e44f0@e44eb e4584@t))) (e44ee@e44e7)) ((lambda (e4586@t) (begin (e44ef@e44e9 e44f1@e44ed) (set! e44f1@e44ed e4586@t))) (e44ef@e44e9)))))) e2f25@imp-collector e2fad@top-level-context e44e5@itc '#f))) '#f))) (set! e2f2d@core-library-expander (lambda (e4588@e e4589@verify-name) (call-with-values (lambda () (e2f19@parse-library e4588@e)) (lambda (e4594@e458d e4595@e458f e4596@e4591 e4597@e4593) ((lambda (e459c@b* e459d@imp* e459e@exp* e459f@name*) (call-with-values (lambda () (e2f17@parse-library-name e459f@name*)) (lambda (e45a8@e45a5 e45a9@e45a7) ((lambda (e45ac@ver e45ad@name) (begin (e4589@verify-name e45ad@name) (call-with-values (lambda () (e2f2b@library-body-expander e45ad@name e459e@exp* e459d@imp* e459c@b* '#f)) (lambda (e45be@e45b1 e45bf@e45b3 e45c0@e45b5 e45c1@e45b7 e45c2@e45b9 e45c3@e45bb e45c4@e45bd) ((lambda (e45cc@export-env e45cd@export-subst e45ce@visit-code e45cf@invoke-code e45d0@visit-req* e45d1@invoke-req* e45d2@imp*) (values e45ad@name e45ac@ver e45d2@imp* e45d1@invoke-req* e45d0@visit-req* e45cf@invoke-code e45ce@visit-code e45cd@export-subst e45cc@export-env)) e45c4@e45bd e45c3@e45bb e45c2@e45b9 e45c1@e45b7 e45c0@e45b5 e45bf@e45b3 e45be@e45b1))))) e45a9@e45a7 e45a8@e45a5)))) e4597@e4593 e4596@e4591 e4595@e458f e4594@e458d))))) (set! e2f2f@parse-top-level-program (lambda (e45da@e*) ((lambda (e45dc@t) ((lambda (e45de@ls/false) (if (and e45de@ls/false (apply (lambda (e45e0@import e45e1@imp* e45e2@b*) (eq? (e2fa5@syntax->datum e45e0@import) 'import)) e45de@ls/false)) (apply (lambda (e45e6@import e45e7@imp* e45e8@b*) (values e45e7@imp* e45e8@b*)) e45de@ls/false) ((lambda (e45ec@t) ((lambda (e45ee@ls/false) (if (and e45ee@ls/false (apply (lambda (e45f0@import e45f1@x e45f2@y) (eq? (e2fa5@syntax->datum e45f0@import) 'import)) e45ee@ls/false)) (apply (lambda (e45f6@import e45f7@x e45f8@y) (e2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (e2ca5@syntax-car e45da@e*))) e45ee@ls/false) ((lambda (e45fc@t) ((lambda (e45fe@ls/false) (if e45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) e45fe@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e45fc@t))) (e2eb6@syntax-dispatch e45fc@t '_))) e45ec@t))) (e2eb6@syntax-dispatch e45ec@t '((any . any) . any)))) e45dc@t))) (e2eb6@syntax-dispatch e45dc@t '((any . each-any) . each-any)))) e45da@e*))) (set! e2f31@top-level-expander (lambda (e4600@e*) (call-with-values (lambda () (e2f2f@parse-top-level-program e4600@e*)) (lambda (e4606@e4603 e4607@e4605) ((lambda (e460a@b* e460b@imp*) (call-with-values (lambda () (e2f2b@library-body-expander '() '() e460b@imp* e460a@b* '#t)) (lambda (e461c@e460f e461d@e4611 e461e@e4613 e461f@e4615 e4620@e4617 e4621@e4619 e4622@e461b) ((lambda (e462a@export-env e462b@export-subst e462c@visit-code e462d@invoke-code e462e@visit-req* e462f@invoke-req* e4630@imp*) (values e462f@invoke-req* e462d@invoke-code)) e4622@e461b e4621@e4619 e4620@e4617 e461f@e4615 e461e@e4613 e461d@e4611 e461c@e460f)))) e4607@e4605 e4606@e4603))))) (set! e2f37@e2f32 (make-record-type-descriptor 'env '#f 'e2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! e2f39@e2f34 '#f) (set! e2f3b@e2f33 (make-record-constructor-descriptor e2f37@e2f32 '#f e2f39@e2f34)) (set! e2f3e@env? (record-predicate e2f37@e2f32)) (set! e2f40@make-env (record-constructor e2f3b@e2f33)) (set! e2f42@env-names (record-accessor e2f37@e2f32 '0)) (set! e2f44@env-labels (record-accessor e2f37@e2f32 '1)) (set! e2f46@env-itc (record-accessor e2f37@e2f32 '2)) (set! e2f48@set-env-names! (record-mutator e2f37@e2f32 '0)) (set! e2f4a@set-env-labels! (record-mutator e2f37@e2f32 '1)) (set! e2f4c@set-env-itc! (record-mutator e2f37@e2f32 '2)) (set! e2f4e@rp (e2852@e2779@make-record-printer 'env (lambda (e4638@x e4639@p e463a@wr) (display '"#<environment>" e4639@p)))) (set! e2f54@e2f4f (make-record-type-descriptor 'interaction-env '#f 'e2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! e2f56@e2f51 '#f) (set! e2f58@e2f50 (make-record-constructor-descriptor e2f54@e2f4f '#f e2f56@e2f51)) (set! e2f5b@interaction-env? (record-predicate e2f54@e2f4f)) (set! e2f5d@make-interaction-env (record-constructor e2f58@e2f50)) (set! e2f5f@interaction-env-rib (record-accessor e2f54@e2f4f '0)) (set! e2f61@interaction-env-r (record-accessor e2f54@e2f4f '1)) (set! e2f63@interaction-env-locs (record-accessor e2f54@e2f4f '2)) (set! e2f65@set-interaction-env-rib! (record-mutator e2f54@e2f4f '0)) (set! e2f67@set-interaction-env-r! (record-mutator e2f54@e2f4f '1)) (set! e2f69@set-interaction-env-locs! (record-mutator e2f54@e2f4f '2)) (set! e2f6b@rp (e2852@e2779@make-record-printer 'interaction-env (lambda (e463e@x e463f@p e4640@wr) (display '"#<environment>" e463f@p)))) (set! e2f6d@interaction-environment-symbols (lambda () (e2f75@environment-symbols (e2fab@interaction-environment)))) (set! e2f6f@environment-bindings (lambda (e4644@e) (vector->list (vector-map (lambda (e4646@name e4647@label) (e2f71@parse-binding (cons e4646@name (e2ace@e296e@imported-label->binding e4647@label)))) (e2f42@env-names e4644@e) (e2f44@env-labels e4644@e))))) (set! e2f71@parse-binding (lambda (e464a@b) (cons (car e464a@b) ((lambda (e464c@t) (if (memv e464c@t '(core-prim global)) 'procedure (if (memv e464c@t '(core-macro macro global-macro)) 'syntax (if (memv e464c@t '($core-rtd)) 'record (if (eq? (car e464a@b) (cadr e464a@b)) 'syntax 'unknown))))) (cadr e464a@b))))) (set! e2f73@environment? (lambda (e464e@x) (or (e2f3e@env? e464e@x) (e2f5b@interaction-env? e464e@x)))) (set! e2f75@environment-symbols (lambda (e4650@x) (if (e2f3e@env? e4650@x) (vector->list (e2f42@env-names e4650@x)) (if (e2f5b@interaction-env? e4650@x) (map values (e2c46@rib-sym* (e2f5f@interaction-env-rib e4650@x))) (assertion-violation 'environment-symbols '"not an environment" e4650@x))))) (set! e2f77@environment (lambda e4652@imp* ((lambda (e4654@itc) ((lambda (e465a@e4657 e465b@e4659) ((lambda (e465e@swap) (dynamic-wind e465e@swap (lambda () (call-with-values (lambda () (e2f1b@parse-import-spec* e4652@imp*)) (lambda (e4664@e4661 e4665@e4663) ((lambda (e4668@subst-labels e4669@subst-names) (e2f40@make-env e4669@subst-names e4668@subst-labels e4654@itc)) e4665@e4663 e4664@e4661)))) e465e@swap)) (lambda () ((lambda (e466c@t) (begin (e465a@e4657 e465b@e4659) (set! e465b@e4659 e466c@t))) (e465a@e4657))))) e2f25@imp-collector e4654@itc)) (e2f1f@make-collector)))) (set! e2f79@null-environment (lambda (e466e@n) (begin (if (not (eqv? e466e@n '5)) (assertion-violation 'null-environment '"not 5" e466e@n) (void)) (e2f77@environment '(psyntax null-environment-5))))) (set! e2f7b@scheme-report-environment (lambda (e4670@n) (begin (if (not (eqv? e4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" e4670@n) (void)) (e2f77@environment '(psyntax scheme-report-environment-5))))) (set! e2f7d@expand (lambda (e4672@x e4673@env) (if (e2f3e@env? e4673@env) ((lambda (e4676@rib) ((lambda (e4678@x e4679@itc e467a@rtc e467b@vtc) ((lambda (e4680@x) (begin (e2c62@seal-rib! e4676@rib) (values e4680@x (e467a@rtc)))) ((lambda (e4692@e4683 e4693@e4685 e4694@e4687 e4695@e4689 e4696@e468b e4697@e468d e4698@e468f e4699@e4691) ((lambda (e46a2@swap) (dynamic-wind e46a2@swap (lambda () (e2ed8@chi-expr e4678@x '() '())) e46a2@swap)) (lambda () (begin ((lambda (e46a4@t) (begin (e4692@e4683 e4696@e468b) (set! e4696@e468b e46a4@t))) (e4692@e4683)) ((lambda (e46a6@t) (begin (e4693@e4685 e4697@e468d) (set! e4697@e468d e46a6@t))) (e4693@e4685)) ((lambda (e46a8@t) (begin (e4694@e4687 e4698@e468f) (set! e4698@e468f e46a8@t))) (e4694@e4687)) ((lambda (e46aa@t) (begin (e4695@e4689 e4699@e4691) (set! e4699@e4691 e46aa@t))) (e4695@e4689)))))) e2fad@top-level-context e2f21@inv-collector e2f23@vis-collector e2f25@imp-collector '#f e467a@rtc e467b@vtc e4679@itc))) (e2c75@make-stx e4672@x e2c27@top-mark* (list e4676@rib) '()) (e2f46@env-itc e4673@env) (e2f1f@make-collector) (e2f1f@make-collector))) (e2f1d@make-top-rib (e2f42@env-names e4673@env) (e2f44@env-labels e4673@env))) (if (e2f5b@interaction-env? e4673@env) ((lambda (e46ac@rib e46ad@r e46ae@rtc) ((lambda (e46b2@x) (call-with-values (lambda () ((lambda (e46c8@e46b9 e46c9@e46bb e46ca@e46bd e46cb@e46bf e46cc@e46c1 e46cd@e46c3 e46ce@e46c5 e46cf@e46c7) ((lambda (e46d8@swap) (dynamic-wind e46d8@swap (lambda () (e2f29@chi-interaction-expr e46b2@x e46ac@rib e46ad@r)) e46d8@swap)) (lambda () (begin ((lambda (e46da@t) (begin (e46c8@e46b9 e46cc@e46c1) (set! e46cc@e46c1 e46da@t))) (e46c8@e46b9)) ((lambda (e46dc@t) (begin (e46c9@e46bb e46cd@e46c3) (set! e46cd@e46c3 e46dc@t))) (e46c9@e46bb)) ((lambda (e46de@t) (begin (e46ca@e46bd e46ce@e46c5) (set! e46ce@e46c5 e46de@t))) (e46ca@e46bd)) ((lambda (e46e0@t) (begin (e46cb@e46bf e46cf@e46c7) (set! e46cf@e46c7 e46e0@t))) (e46cb@e46bf)))))) e2fad@top-level-context e2f21@inv-collector e2f23@vis-collector e2f25@imp-collector e4673@env e46ae@rtc (e2f1f@make-collector) (e2f1f@make-collector))) (lambda (e46e2@e46b5 e46e3@e46b7) ((lambda (e46e6@r^ e46e7@e) (begin (e2f67@set-interaction-env-r! e4673@env e46e6@r^) (values e46e7@e (e46ae@rtc)))) e46e3@e46b7 e46e2@e46b5)))) (e2c75@make-stx e4672@x e2c27@top-mark* (list e46ac@rib) '()))) (e2f5f@interaction-env-rib e4673@env) (e2f61@interaction-env-r e4673@env) (e2f1f@make-collector)) (assertion-violation 'expand '"not an environment" e4673@env))))) (set! e2f7f@eval (lambda (e46ea@x e46eb@env) (begin (if (not (e2f73@environment? e46eb@env)) (error 'eval '"not an environment" e46eb@env) (void)) (call-with-values (lambda () (e2f7d@expand e46ea@x e46eb@env)) (lambda (e46f2@e46ef e46f3@e46f1) ((lambda (e46f6@invoke-req* e46f7@x) (begin (for-each e2acf@e2970@invoke-library e46f6@invoke-req*) (eval-core (e28a9@e2861@expanded->core e46f7@x)))) e46f3@e46f1 e46f2@e46ef)))))) (set! e2f81@library-expander (lambda e4768 ((lambda (e4769) (if (= e4769 '3) (apply (lambda (e46fa@x e46fb@filename e46fc@verify-name) ((lambda (e4701@build-visit-code e4703@visit!) (begin (set! e4701@build-visit-code (lambda (e4756@macro*) (if (null? e4756@macro*) (e2c0b@e2b7b@build-void) (e2c0a@e2b79@build-sequence '#f (map (lambda (e4758@x) ((lambda (e475a@loc e475b@src) (list 'set! e475a@loc e475b@src)) (car e4758@x) (cddr e4758@x))) e4756@macro*))))) (set! e4703@visit! (lambda (e474e@macro*) (for-each (lambda (e4750@x) ((lambda (e4752@loc e4753@proc) (set-symbol-value! e4752@loc e4753@proc)) (car e4750@x) (cadr e4750@x))) e474e@macro*))) (call-with-values (lambda () (e2f2d@core-library-expander e46fa@x e46fc@verify-name)) (lambda (e4716@e4705 e4717@e4707 e4718@e4709 e4719@e470b e471a@e470d e471b@e470f e471c@e4711 e471d@e4713 e471e@e4715) ((lambda (e4728@export-env e4729@export-subst e472a@macro* e472b@invoke-code e472c@vis* e472d@inv* e472e@imp* e472f@ver e4730@name) ((lambda (e473a@id e473b@name e473c@ver e473d@imp* e473e@vis* e473f@inv* e4740@visit-proc e4741@invoke-proc e4742@visit-code e4743@invoke-code) (begin (e2acd@e296c@install-library e473a@id e473b@name e473c@ver e473d@imp* e473e@vis* e473f@inv* e4729@export-subst e4728@export-env e4740@visit-proc e4741@invoke-proc e4742@visit-code e4743@invoke-code '#t e46fb@filename) (values e473a@id e473b@name e473c@ver e473d@imp* e473e@vis* e473f@inv* e4743@invoke-code e4742@visit-code e4729@export-subst e4728@export-env))) (gensym) e4730@name e472f@ver (map e2ad3@e2978@library-spec e472e@imp*) (map e2ad3@e2978@library-spec e472c@vis*) (map e2ad3@e2978@library-spec e472d@inv*) (lambda () (e4703@visit! e472a@macro*)) (lambda () (eval-core (e28a9@e2861@expanded->core e472b@invoke-code))) (e4701@build-visit-code e472a@macro*) e472b@invoke-code)) e471e@e4715 e471d@e4713 e471c@e4711 e471b@e470f e471a@e470d e4719@e470b e4718@e4709 e4717@e4707 e4716@e4705))))) '#f '#f)) e4768) (if (= e4769 '2) (apply (lambda (e475e@x e475f@filename) (e2f81@library-expander e475e@x e475f@filename (lambda (e4762@x) (values)))) e4768) (if (= e4769 '1) (apply (lambda (e4764@x) (e2f81@library-expander e4764@x '#f (lambda (e4766@x) (values)))) e4768) (error 'apply '"invalid arg count"))))) (length e4768)))) (set! e2f83@boot-library-expand (lambda (e476a@x) (call-with-values (lambda () (e2f81@library-expander e476a@x)) (lambda (e4780@e476d e4781@e476f e4782@e4771 e4783@e4773 e4784@e4775 e4785@e4777 e4786@e4779 e4787@e477b e4788@e477d e4789@e477f) ((lambda (e4794@export-env e4795@export-subst e4796@visit-code e4797@invoke-code e4798@inv* e4799@vis* e479a@imp* e479b@ver e479c@name e479d@id) (values e479c@name e4797@invoke-code e4795@export-subst e4794@export-env)) e4789@e477f e4788@e477d e4787@e477b e4786@e4779 e4785@e4777 e4784@e4775 e4783@e4773 e4782@e4771 e4781@e476f e4780@e476d))))) (set! e2f85@rev-map-append (lambda (e47a8@f e47a9@ls e47aa@ac) (if (null? e47a9@ls) e47aa@ac (e2f85@rev-map-append e47a8@f (cdr e47a9@ls) (cons (e47a8@f (car e47a9@ls)) e47aa@ac))))) (set! e2f87@build-exports (lambda (e47ae@lex*+loc* e47af@init*) (e2c0a@e2b79@build-sequence '#f (cons (e2c0b@e2b7b@build-void) (e2f85@rev-map-append (lambda (e47b2@x) (list 'set! (cdr e47b2@x) (car e47b2@x))) e47ae@lex*+loc* e47af@init*))))) (set! e2f89@make-export-subst (lambda (e47b4@name* e47b5@id*) (map (lambda (e47b8@name e47b9@id) ((lambda (e47bc@label) (begin (if (not e47bc@label) (e2f9f@syntax-violation '#f '"cannot export unbound identifier" e47b9@id) (void)) (cons e47b8@name e47bc@label))) (e2cc5@id->label e47b9@id))) e47b4@name* e47b5@id*))) (set! e2f8b@make-export-env/macros (lambda (e47be@lex* e47bf@loc* e47c0@r) ((lambda (e47c5@lookup) (begin (set! e47c5@lookup (lambda (e47e2@x) ((letrec ((e47e4@f (lambda (e47e6@x e47e7@lex* e47e8@loc*) (if (pair? e47e7@lex*) (if (eq? e47e6@x (car e47e7@lex*)) (car e47e8@loc*) (e47e4@f e47e6@x (cdr e47e7@lex*) (cdr e47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) e47e4@f) e47e2@x e47be@lex* e47bf@loc*))) ((letrec ((e47c6@f (lambda (e47c8@r e47c9@env e47ca@global* e47cb@macro*) (if (null? e47c8@r) (values e47c9@env e47ca@global* e47cb@macro*) ((lambda (e47d0@x) ((lambda (e47d2@label e47d3@b) ((lambda (e47d6@t) (if (memv e47d6@t '(lexical)) ((lambda (e47d8@v) ((lambda (e47da@loc e47db@type) (e47c6@f (cdr e47c8@r) (cons (cons* e47d2@label e47db@type e47da@loc) e47c9@env) (cons (cons (e2e42@lexical-var e47d8@v) e47da@loc) e47ca@global*) e47cb@macro*)) (e47c5@lookup (e2e42@lexical-var e47d8@v)) (if (e2e44@lexical-mutable? e47d8@v) 'mutable 'global))) (e2ccf@binding-value e47d3@b)) (if (memv e47d6@t '(local-macro)) ((lambda (e47de@loc) (e47c6@f (cdr e47c8@r) (cons (cons* e47d2@label 'global-macro e47de@loc) e47c9@env) e47ca@global* (cons (cons e47de@loc (e2ccf@binding-value e47d3@b)) e47cb@macro*))) (gensym)) (if (memv e47d6@t '(local-macro!)) ((lambda (e47e0@loc) (e47c6@f (cdr e47c8@r) (cons (cons* e47d2@label 'global-macro! e47e0@loc) e47c9@env) e47ca@global* (cons (cons e47e0@loc (e2ccf@binding-value e47d3@b)) e47cb@macro*))) (gensym)) (if (memv e47d6@t '($rtd $module)) (e47c6@f (cdr e47c8@r) (cons e47d0@x e47c9@env) e47ca@global* e47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (e2ccd@binding-type e47d3@b) (e2ccf@binding-value e47d3@b))))))) (e2ccd@binding-type e47d3@b))) (car e47d0@x) (cdr e47d0@x))) (car e47c8@r)))))) e47c6@f) e47c0@r '() '() '()))) '#f))) (set! e2f8d@generate-temporaries (lambda (e47ec@ls) ((lambda (e47ee@t) ((lambda (e47f0@ls/false) (if e47f0@ls/false (apply (lambda (e47f2@ls) (map (lambda (e47f4@x) (e2c75@make-stx ((lambda (e47f6@x) (if (or (symbol? e47f6@x) (string? e47f6@x)) (gensym e47f6@x) (gensym 't))) (e2fa5@syntax->datum e47f4@x)) e2c27@top-mark* '() '())) e47f2@ls)) e47f0@ls/false) ((lambda (e47f8@t) ((lambda (e47fa@ls/false) (if e47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) e47fa@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e47f8@t))) (e2eb6@syntax-dispatch e47f8@t '_))) e47ee@t))) (e2eb6@syntax-dispatch e47ee@t 'each-any))) e47ec@ls))) (set! e2f8f@free-identifier=? (lambda (e47fc@x e47fd@y) (if (e2cab@id? e47fc@x) (if (e2cab@id? e47fd@y) (e2cb3@free-id=? e47fc@x e47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" e47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" e47fc@x)))) (set! e2f91@bound-identifier=? (lambda (e4800@x e4801@y) (if (e2cab@id? e4800@x) (if (e2cab@id? e4801@y) (e2cb1@bound-id=? e4800@x e4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" e4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" e4800@x)))) (set! e2f93@make-source-condition (lambda (e4804@x) ((lambda (e480e@e4809 e4810@e480b e4812@e480a e4815@e4808 e4817@make-source-condition e4819@e4806 e481b@e4807 e481d@source-condition? e481f@source-filename e4821@source-character) (begin (set! e480e@e4809 (make-record-type-descriptor '&source-information e4c6c@e49b3@&condition-rtd 'e480c '#f '#f '#((immutable file-name) (immutable character)))) (set! e4810@e480b '#f) (set! e4812@e480a (make-record-constructor-descriptor e480e@e4809 e4c6d@e49b5@&condition-rcd e4810@e480b)) (set! e4815@e4808 (record-predicate e480e@e4809)) (set! e4817@make-source-condition (record-constructor e4812@e480a)) (set! e4819@e4806 (record-accessor e480e@e4809 '0)) (set! e481b@e4807 (record-accessor e480e@e4809 '1)) (set! e481d@source-condition? (condition-predicate e480e@e4809)) (set! e481f@source-filename (condition-accessor e480e@e4809 e4819@e4806)) (set! e4821@source-character (condition-accessor e480e@e4809 e481b@e4807)) (if (pair? e4804@x) (e4817@make-source-condition (car e4804@x) (cdr e4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! e2f95@extract-position-condition (lambda (e4822@x) (e2f93@make-source-condition (e2f97@expression-position e4822@x)))) (set! e2f97@expression-position (lambda (e4824@x) (and (e2c73@stx? e4824@x) ((lambda (e4826@x) (and (e284a@e2769@annotation? e4826@x) (e284b@e276b@annotation-source e4826@x))) (e2c77@stx-expr e4824@x))))) (set! e2f99@assertion-error (lambda (e4828@expr e4829@pos) (raise (condition (e4c9c@e4a77@make-assertion-violation) (e4cae@e4aa9@make-who-condition 'assert) (e4c72@e4a0a@make-message-condition '"assertion failed") (e4ca4@e4a8e@make-irritants-condition (list e4828@expr)) (e2f93@make-source-condition e4829@pos))))) (set! e2f9b@syntax-error (lambda (e482c@x . e482e@args) (begin (if (not (for-all string? e482e@args)) (assertion-violation 'syntax-error '"invalid argument" e482e@args) (void)) (raise (condition (e4c72@e4a0a@make-message-condition (if (null? e482e@args) '"invalid syntax" (apply string-append e482e@args))) (e4cd0@e4b05@make-syntax-violation (e2fa5@syntax->datum e482c@x) '#f) (e2f95@extract-position-condition e482c@x)))))) (set! e2f9d@syntax-violation* (lambda (e4830@who e4831@msg e4832@form e4833@condition-object) (begin (if (not (string? e4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" e4831@msg) (void)) ((lambda (e4838@who) (raise (condition (if e4838@who (e4cae@e4aa9@make-who-condition e4838@who) (condition)) (e4c72@e4a0a@make-message-condition e4831@msg) e4833@condition-object (e2f95@extract-position-condition e4832@form)))) (if (or (string? e4830@who) (symbol? e4830@who)) e4830@who (if (not e4830@who) ((lambda (e483a@t) ((lambda (e483c@ls/false) (if (and e483c@ls/false (apply (lambda (e483e@id) (e2cab@id? e483e@id)) e483c@ls/false)) (apply (lambda (e4840@id) (e2fa5@syntax->datum e4840@id)) e483c@ls/false) ((lambda (e4842@t) ((lambda (e4844@ls/false) (if (and e4844@ls/false (apply (lambda (e4846@id e4847@rest) (e2cab@id? e4846@id)) e4844@ls/false)) (apply (lambda (e484a@id e484b@rest) (e2fa5@syntax->datum e484a@id)) e4844@ls/false) ((lambda (e484e@t) ((lambda (e4850@ls/false) (if e4850@ls/false (apply (lambda () '#f) e4850@ls/false) (e2f9f@syntax-violation '#f '"invalid syntax" e484e@t))) (e2eb6@syntax-dispatch e484e@t '_))) e4842@t))) (e2eb6@syntax-dispatch e4842@t '(any . any)))) e483a@t))) (e2eb6@syntax-dispatch e483a@t 'any))) e4832@form) (assertion-violation 'syntax-violation '"invalid who argument" e4830@who))))))) (set! e2f9f@syntax-violation (lambda e4860 ((lambda (e4861) (if (= e4861 '3) (apply (lambda (e4852@who e4853@msg e4854@form) (e2f9f@syntax-violation e4852@who e4853@msg e4854@form '#f)) e4860) (if (= e4861 '4) (apply (lambda (e4858@who e4859@msg e485a@form e485b@subform) (e2f9d@syntax-violation* e4858@who e4859@msg e485a@form (e4cd0@e4b05@make-syntax-violation (e2fa5@syntax->datum e485a@form) (e2fa5@syntax->datum e485b@subform)))) e4860) (error 'apply '"invalid arg count")))) (length e4860)))) (set! e2fa1@identifier? (lambda (e4862@x) (e2cab@id? e4862@x))) (set! e2fa3@datum->syntax (lambda (e4864@id e4865@datum) (if (e2cab@id? e4864@id) (e2c89@datum->stx e4864@id e4865@datum) (assertion-violation 'datum->syntax '"not an identifier" e4864@id)))) (set! e2fa5@syntax->datum (lambda (e4868@x) (e2cc1@stx->datum e4868@x))) (set! e2fa7@compile-r6rs-top-level (lambda (e486a@x*) (call-with-values (lambda () (e2f31@top-level-expander e486a@x*)) (lambda (e4870@e486d e4871@e486f) ((lambda (e4874@invoke-code e4875@lib*) (lambda () (begin (for-each e2acf@e2970@invoke-library e4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (e28a9@e2861@expanded->core e4874@invoke-code)) (void)) (eval-core (e28a9@e2861@expanded->core e4874@invoke-code))))) e4871@e486f e4870@e486d))))) (set! e2fa9@pre-compile-r6rs-top-level (lambda (e4878@x*) (call-with-values (lambda () (e2f31@top-level-expander e4878@x*)) (lambda (e487e@e487b e487f@e487d) ((lambda (e4882@invoke-code e4883@lib*) (begin (for-each e2acf@e2970@invoke-library e4883@lib*) (e2853@e277b@compile-core (e28a9@e2861@expanded->core e4882@invoke-code)))) e487f@e487d e487e@e487b))))) (set! e2fab@interaction-environment ((lambda (e4886@the-env) (lambda () (or e4886@the-env ((lambda (e4888@lib e4889@rib) (begin ((lambda (e488c@subst) (begin (e2c50@set-rib-sym*! e4889@rib (map car e488c@subst)) (e2c52@set-rib-mark**! e4889@rib (map (lambda (e488e@x) e2c27@top-mark*) e488c@subst)) (e2c54@set-rib-label*! e4889@rib (map cdr e488c@subst)))) (e2aa4@e291a@library-subst e4888@lib)) ((lambda (e4890@env) (begin (set! e4886@the-env e4890@env) e4890@env)) (e2f5d@make-interaction-env e4889@rib '() '())))) (e2ac8@e2962@find-library-by-name '(mosh interaction)) (e2c5a@make-empty-rib))))) '#f)) (set! e2fad@top-level-context (e2855@e277f@make-parameter '#f)) (begin (set! e499e@e2fad@top-level-context e2fad@top-level-context) (set! e499d@e2fab@interaction-environment e2fab@interaction-environment) (set! e499c@e2fa9@pre-compile-r6rs-top-level e2fa9@pre-compile-r6rs-top-level) (set! e499b@e2fa7@compile-r6rs-top-level e2fa7@compile-r6rs-top-level) (set! e499a@e2fa5@syntax->datum e2fa5@syntax->datum) (set! e4999@e2fa3@datum->syntax e2fa3@datum->syntax) (set! e4998@e2fa1@identifier? e2fa1@identifier?) (set! e4997@e2f9f@syntax-violation e2f9f@syntax-violation) (set! e4996@e2f9d@syntax-violation* e2f9d@syntax-violation*) (set! e4995@e2f9b@syntax-error e2f9b@syntax-error) (set! e4994@e2f99@assertion-error e2f99@assertion-error) (set! e4993@e2f97@expression-position e2f97@expression-position) (set! e4992@e2f95@extract-position-condition e2f95@extract-position-condition) (set! e4991@e2f93@make-source-condition e2f93@make-source-condition) (set! e4990@e2f91@bound-identifier=? e2f91@bound-identifier=?) (set! e498f@e2f8f@free-identifier=? e2f8f@free-identifier=?) (set! e498e@e2f8d@generate-temporaries e2f8d@generate-temporaries) (set! e498d@e2f8b@make-export-env/macros e2f8b@make-export-env/macros) (set! e498c@e2f89@make-export-subst e2f89@make-export-subst) (set! e498b@e2f87@build-exports e2f87@build-exports) (set! e498a@e2f85@rev-map-append e2f85@rev-map-append) (set! e4989@e2f83@boot-library-expand e2f83@boot-library-expand) (set! e4988@e2f81@library-expander e2f81@library-expander) (set! e4987@e2f7f@eval e2f7f@eval) (set! e4986@e2f7d@expand e2f7d@expand) (set! e4985@e2f7b@scheme-report-environment e2f7b@scheme-report-environment) (set! e4984@e2f79@null-environment e2f79@null-environment) (set! e4983@e2f77@environment e2f77@environment) (set! e4982@e2f75@environment-symbols e2f75@environment-symbols) (set! e4981@e2f73@environment? e2f73@environment?) (set! e4980@e2f71@parse-binding e2f71@parse-binding) (set! e497f@e2f6f@environment-bindings e2f6f@environment-bindings) (set! e497e@e2f6d@interaction-environment-symbols e2f6d@interaction-environment-symbols) (set! e497d@e2f6b@rp e2f6b@rp) (set! e497c@e2f69@set-interaction-env-locs! e2f69@set-interaction-env-locs!) (set! e497b@e2f67@set-interaction-env-r! e2f67@set-interaction-env-r!) (set! e497a@e2f65@set-interaction-env-rib! e2f65@set-interaction-env-rib!) (set! e4979@e2f63@interaction-env-locs e2f63@interaction-env-locs) (set! e4978@e2f61@interaction-env-r e2f61@interaction-env-r) (set! e4977@e2f5f@interaction-env-rib e2f5f@interaction-env-rib) (set! e4976@e2f5d@make-interaction-env e2f5d@make-interaction-env) (set! e4975@e2f5b@interaction-env? e2f5b@interaction-env?) (set! e4974@e2f58@e2f50 e2f58@e2f50) (set! e4973@e2f56@e2f51 e2f56@e2f51) (set! e4972@e2f54@e2f4f e2f54@e2f4f) (set! e4971@e2f4e@rp e2f4e@rp) (set! e4970@e2f4c@set-env-itc! e2f4c@set-env-itc!) (set! e496f@e2f4a@set-env-labels! e2f4a@set-env-labels!) (set! e496e@e2f48@set-env-names! e2f48@set-env-names!) (set! e496d@e2f46@env-itc e2f46@env-itc) (set! e496c@e2f44@env-labels e2f44@env-labels) (set! e496b@e2f42@env-names e2f42@env-names) (set! e496a@e2f40@make-env e2f40@make-env) (set! e4969@e2f3e@env? e2f3e@env?) (set! e4968@e2f3b@e2f33 e2f3b@e2f33) (set! e4967@e2f39@e2f34 e2f39@e2f34) (set! e4966@e2f37@e2f32 e2f37@e2f32) (set! e4965@e2f31@top-level-expander e2f31@top-level-expander) (set! e4964@e2f2f@parse-top-level-program e2f2f@parse-top-level-program) (set! e4963@e2f2d@core-library-expander e2f2d@core-library-expander) (set! e4962@e2f2b@library-body-expander e2f2b@library-body-expander) (set! e4961@e2f29@chi-interaction-expr e2f29@chi-interaction-expr) (set! e4960@e2f27@chi-library-internal e2f27@chi-library-internal) (set! e495f@e2f25@imp-collector e2f25@imp-collector) (set! e495e@e2f23@vis-collector e2f23@vis-collector) (set! e495d@e2f21@inv-collector e2f21@inv-collector) (set! e495c@e2f1f@make-collector e2f1f@make-collector) (set! e495b@e2f1d@make-top-rib e2f1d@make-top-rib) (set! e495a@e2f1b@parse-import-spec* e2f1b@parse-import-spec*) (set! e4959@e2f19@parse-library e2f19@parse-library) (set! e4958@e2f17@parse-library-name e2f17@parse-library-name) (set! e4957@e2f15@parse-exports e2f15@parse-exports) (set! e4956@e2f13@expand-transformer e2f13@expand-transformer) (set! e4955@e2f11@chi-body* e2f11@chi-body*) (set! e4954@e2f0f@chi-internal-module e2f0f@chi-internal-module) (set! e4953@e2f0d@module-interface-exp-id* e2f0d@module-interface-exp-id*) (set! e4952@e2f0b@set-module-interface-exp-lab-vec! e2f0b@set-module-interface-exp-lab-vec!) (set! e4951@e2f09@set-module-interface-exp-id-vec! e2f09@set-module-interface-exp-id-vec!) (set! e4950@e2f07@set-module-interface-first-mark! e2f07@set-module-interface-first-mark!) (set! e494f@e2f05@module-interface-exp-lab-vec e2f05@module-interface-exp-lab-vec) (set! e494e@e2f03@module-interface-exp-id-vec e2f03@module-interface-exp-id-vec) (set! e494d@e2f01@module-interface-first-mark e2f01@module-interface-first-mark) (set! e494c@e2eff@make-module-interface e2eff@make-module-interface) (set! e494b@e2efd@module-interface? e2efd@module-interface?) (set! e494a@e2efa@e2ef2 e2efa@e2ef2) (set! e4949@e2ef8@e2ef3 e2ef8@e2ef3) (set! e4948@e2ef6@e2ef1 e2ef6@e2ef1) (set! e4947@e2ef0@parse-module e2ef0@parse-module) (set! e4946@e2eee@chi-internal e2eee@chi-internal) (set! e4945@e2eec@find-dups e2eec@find-dups) (set! e4944@e2eea@find-bound=? e2eea@find-bound=?) (set! e4943@e2ee8@chi-rhs* e2ee8@chi-rhs*) (set! e4942@e2ee6@expand-interaction-rhs*/init* e2ee6@expand-interaction-rhs*/init*) (set! e4941@e2ee4@chi-rhs e2ee4@chi-rhs) (set! e4940@e2ee2@chi-defun e2ee2@chi-defun) (set! e493f@e2ee0@chi-lambda-clause* e2ee0@chi-lambda-clause*) (set! e493e@e2ede@chi-lambda-clause e2ede@chi-lambda-clause) (set! e493d@e2edc@verify-formals e2edc@verify-formals) (set! e493c@e2eda@chi-set! e2eda@chi-set!) (set! e493b@e2ed8@chi-expr e2ed8@chi-expr) (set! e493a@e2ed6@chi-application e2ed6@chi-application) (set! e4939@e2ed4@chi-expr* e2ed4@chi-expr*) (set! e4938@e2ed2@chi-global-macro e2ed2@chi-global-macro) (set! e4937@e2ed0@chi-local-macro e2ed0@chi-local-macro) (set! e4936@e2ece@chi-macro e2ece@chi-macro) (set! e4935@e2ecc@do-macro-call e2ecc@do-macro-call) (set! e4934@e2eca@local-macro-transformer e2eca@local-macro-transformer) (set! e4933@e2ec8@macro-transformer e2ec8@macro-transformer) (set! e4932@e2ec6@symbol-macro e2ec6@symbol-macro) (set! e4931@e2ec4@core-macro-transformer e2ec4@core-macro-transformer) (set! e4930@e2ec2@syntax-transformer e2ec2@syntax-transformer) (set! e492f@e2ec0@ellipsis-map e2ec0@ellipsis-map) (set! e492e@e2ebe@syntax-case-transformer e2ebe@syntax-case-transformer) (set! e492d@e2ebc@verify-literals e2ebc@verify-literals) (set! e492c@e2eba@underscore? e2eba@underscore?) (set! e492b@e2eb8@ellipsis? e2eb8@ellipsis?) (set! e492a@e2eb6@syntax-dispatch e2eb6@syntax-dispatch) (set! e4929@e2eb4@convert-pattern e2eb4@convert-pattern) (set! e4928@e2eb2@foreign-call-transformer e2eb2@foreign-call-transformer) (set! e4927@e2eb0@parameterize-macro e2eb0@parameterize-macro) (set! e4926@e2eae@incorrect-usage-macro e2eae@incorrect-usage-macro) (set! e4925@e2eac@define-condition-type-macro e2eac@define-condition-type-macro) (set! e4924@e2eaa@define-record-type-macro e2eaa@define-record-type-macro) (set! e4923@e2ea8@define-struct-macro e2ea8@define-struct-macro) (set! e4922@e2ea6@quasisyntax-macro e2ea6@quasisyntax-macro) (set! e4921@e2ea4@quasiquote-macro e2ea4@quasiquote-macro) (set! e4920@e2ea2@syntax-rules-macro e2ea2@syntax-rules-macro) (set! e491f@e2ea0@include-into-macro e2ea0@include-into-macro) (set! e491e@e2e9e@include-macro e2e9e@include-macro) (set! e491d@e2e9c@do-include e2e9c@do-include) (set! e491c@e2e9a@cond-macro e2e9a@cond-macro) (set! e491b@e2e98@and-macro e2e98@and-macro) (set! e491a@e2e96@or-macro e2e96@or-macro) (set! e4919@e2e94@let*-macro e2e94@let*-macro) (set! e4918@e2e92@do-macro e2e92@do-macro) (set! e4917@e2e90@identifier-syntax-macro e2e90@identifier-syntax-macro) (set! e4916@e2e8e@endianness-macro e2e8e@endianness-macro) (set! e4915@e2e8c@assert-macro e2e8c@assert-macro) (set! e4914@e2e8a@delay-macro e2e8a@delay-macro) (set! e4913@e2e88@time-macro e2e88@time-macro) (set! e4912@e2e86@define-enumeration-macro e2e86@define-enumeration-macro) (set! e4911@e2e84@guard-macro e2e84@guard-macro) (set! e4910@e2e82@trace-letrec-syntax-macro e2e82@trace-letrec-syntax-macro) (set! e490f@e2e80@trace-let-syntax-macro e2e80@trace-let-syntax-macro) (set! e490e@e2e7e@trace-let/rec-syntax e2e7e@trace-let/rec-syntax) (set! e490d@e2e7c@trace-define-syntax-macro e2e7c@trace-define-syntax-macro) (set! e490c@e2e7a@trace-define-macro e2e7a@trace-define-macro) (set! e490b@e2e78@trace-lambda-macro e2e78@trace-lambda-macro) (set! e490a@e2e76@let*-values-macro e2e76@let*-values-macro) (set! e4909@e2e74@let-values-macro e2e74@let-values-macro) (set! e4908@e2e72@let-macro e2e72@let-macro) (set! e4907@e2e70@invalid-fmls-error e2e70@invalid-fmls-error) (set! e4906@e2e6e@with-syntax-macro e2e6e@with-syntax-macro) (set! e4905@e2e6c@bless e2e6c@bless) (set! e4904@e2e6a@lambda-transformer e2e6a@lambda-transformer) (set! e4903@e2e68@case-lambda-transformer e2e68@case-lambda-transformer) (set! e4902@e2e66@quote-transformer e2e66@quote-transformer) (set! e4901@e2e64@case-macro e2e64@case-macro) (set! e4900@e2e62@or-transformer e2e62@or-transformer) (set! e48ff@e2e60@and-transformer e2e60@and-transformer) (set! e48fe@e2e5e@if-transformer e2e5e@if-transformer) (set! e48fd@e2e5c@unless-macro e2e5c@unless-macro) (set! e48fc@e2e5a@when-macro e2e5a@when-macro) (set! e48fb@e2e58@record-constructor-descriptor-transformer e2e58@record-constructor-descriptor-transformer) (set! e48fa@e2e56@record-type-descriptor-transformer e2e56@record-type-descriptor-transformer) (set! e48f9@e2e54@type-descriptor-transformer e2e54@type-descriptor-transformer) (set! e48f8@e2e52@fluid-let-syntax-transformer e2e52@fluid-let-syntax-transformer) (set! e48f7@e2e50@letrec*-transformer e2e50@letrec*-transformer) (set! e48f6@e2e4e@letrec-transformer e2e4e@letrec-transformer) (set! e48f5@e2e4c@letrec-helper e2e4c@letrec-helper) (set! e48f4@e2e4a@add-lexicals e2e4a@add-lexicals) (set! e48f3@e2e48@add-lexical e2e48@add-lexical) (set! e48f2@e2e46@set-lexical-mutable! e2e46@set-lexical-mutable!) (set! e48f1@e2e44@lexical-mutable? e2e44@lexical-mutable?) (set! e48f0@e2e42@lexical-var e2e42@lexical-var) (set! e48ef@e2e40@scheme-stx e2e40@scheme-stx) (set! e48ee@e2e3e@scheme-stx-hashtable e2e3e@scheme-stx-hashtable) (set! e48ed@e2e3c@parse-define-syntax e2e3c@parse-define-syntax) (set! e48ec@e2e3a@parse-define e2e3a@parse-define) (set! e48eb@e2ce9@make-eval-transformer e2ce9@make-eval-transformer) (set! e48ea@e2ce7@variable-transformer-procedure e2ce7@variable-transformer-procedure) (set! e48e9@e2ce5@variable-transformer? e2ce5@variable-transformer?) (set! e48e8@e2ce3@make-variable-transformer e2ce3@make-variable-transformer) (set! e48e7@e2ce1@sanitize-binding e2ce1@sanitize-binding) (set! e48e6@e2cd3@syntax-type e2cd3@syntax-type) (set! e48e5@e2cd1@raise-unbound-error e2cd1@raise-unbound-error) (set! e48e4@e2ccf@binding-value e2ccf@binding-value) (set! e48e3@e2ccd@binding-type e2ccd@binding-type) (set! e48e2@e2ccb@make-binding e2ccb@make-binding) (set! e48e1@e2cc9@label->binding e2cc9@label->binding) (set! e48e0@e2cc7@id->real-label e2cc7@id->real-label) (set! e48df@e2cc5@id->label e2cc5@id->label) (set! e48de@e2cc3@same-marks*? e2cc3@same-marks*?) (set! e48dd@e2cc1@stx->datum e2cc1@stx->datum) (set! e48dc@e2cbf@strip e2cbf@strip) (set! e48db@e2cbd@strip-annotations e2cbd@strip-annotations) (set! e48da@e2cbb@self-evaluating? e2cbb@self-evaluating?) (set! e48d9@e2cb9@bound-id-member? e2cb9@bound-id-member?) (set! e48d8@e2cb7@distinct-bound-ids? e2cb7@distinct-bound-ids?) (set! e48d7@e2cb5@valid-bound-ids? e2cb5@valid-bound-ids?) (set! e48d6@e2cb3@free-id=? e2cb3@free-id=?) (set! e48d5@e2cb1@bound-id=? e2cb1@bound-id=?) (set! e48d4@e2caf@same-marks? e2caf@same-marks?) (set! e48d3@e2cad@id->sym e2cad@id->sym) (set! e48d2@e2cab@id? e2cab@id?) (set! e48d1@e2ca9@syntax->list e2ca9@syntax->list) (set! e48d0@e2ca7@syntax-cdr e2ca7@syntax-cdr) (set! e48cf@e2ca5@syntax-car e2ca5@syntax-car) (set! e48ce@e2ca3@syntax-list? e2ca3@syntax-list?) (set! e48cd@e2ca1@syntax-null? e2ca1@syntax-null?) (set! e48cc@e2c9f@syntax-vector? e2c9f@syntax-vector?) (set! e48cb@e2c9d@syntax-pair? e2c9d@syntax-pair?) (set! e48ca@e2c9b@syntax-vector->list e2c9b@syntax-vector->list) (set! e48c9@e2c99@syntax-kind? e2c99@syntax-kind?) (set! e48c8@e2c97@add-subst e2c97@add-subst) (set! e48c7@e2c95@add-mark e2c95@add-mark) (set! e48c6@e2c93@mkstx e2c93@mkstx) (set! e48c5@e2c91@join-wraps e2c91@join-wraps) (set! e48c4@e2c8f@anti-mark? e2c8f@anti-mark?) (set! e48c3@e2c8d@anti-mark e2c8d@anti-mark) (set! e48c2@e2c8b@gen-mark e2c8b@gen-mark) (set! e48c1@e2c89@datum->stx e2c89@datum->stx) (set! e48c0@e2c87@rp e2c87@rp) (set! e48bf@e2c85@set-stx-ae*! e2c85@set-stx-ae*!) (set! e48be@e2c83@set-stx-subst*! e2c83@set-stx-subst*!) (set! e48bd@e2c81@set-stx-mark*! e2c81@set-stx-mark*!) (set! e48bc@e2c7f@set-stx-expr! e2c7f@set-stx-expr!) (set! e48bb@e2c7d@stx-ae* e2c7d@stx-ae*) (set! e48ba@e2c7b@stx-subst* e2c7b@stx-subst*) (set! e48b9@e2c79@stx-mark* e2c79@stx-mark*) (set! e48b8@e2c77@stx-expr e2c77@stx-expr) (set! e48b7@e2c75@make-stx e2c75@make-stx) (set! e48b6@e2c73@stx? e2c73@stx?) (set! e48b5@e2c70@e2c68 e2c70@e2c68) (set! e48b4@e2c6e@e2c69 e2c6e@e2c69) (set! e48b3@e2c6c@e2c67 e2c6c@e2c67) (set! e48b2@e2c66@make-full-rib e2c66@make-full-rib) (set! e48b1@e2c64@unseal-rib! e2c64@unseal-rib!) (set! e48b0@e2c62@seal-rib! e2c62@seal-rib!) (set! e48af@e2c60@make-rib-map e2c60@make-rib-map) (set! e48ae@e2c5e@extend-rib/nc! e2c5e@extend-rib/nc!) (set! e48ad@e2c5c@extend-rib! e2c5c@extend-rib!) (set! e48ac@e2c5a@make-empty-rib e2c5a@make-empty-rib) (set! e48ab@e2c58@set-rib-cache! e2c58@set-rib-cache!) (set! e48aa@e2c56@set-rib-sealed/freq! e2c56@set-rib-sealed/freq!) (set! e48a9@e2c54@set-rib-label*! e2c54@set-rib-label*!) (set! e48a8@e2c52@set-rib-mark**! e2c52@set-rib-mark**!) (set! e48a7@e2c50@set-rib-sym*! e2c50@set-rib-sym*!) (set! e48a6@e2c4e@rib-cache e2c4e@rib-cache) (set! e48a5@e2c4c@rib-sealed/freq e2c4c@rib-sealed/freq) (set! e48a4@e2c4a@rib-label* e2c4a@rib-label*) (set! e48a3@e2c48@rib-mark** e2c48@rib-mark**) (set! e48a2@e2c46@rib-sym* e2c46@rib-sym*) (set! e48a1@e2c44@make-rib e2c44@make-rib) (set! e48a0@e2c42@rib? e2c42@rib?) (set! e489f@e2c3f@e2c37 e2c3f@e2c37) (set! e489e@e2c3d@e2c38 e2c3d@e2c38) (set! e489d@e2c3b@e2c36 e2c3b@e2c36) (set! e489c@e2c35@gen-define-label e2c35@gen-define-label) (set! e489b@e2c33@gen-define-label+loc e2c33@gen-define-label+loc) (set! e489a@e2c31@gen-top-level-label e2c31@gen-top-level-label) (set! e4899@e2c2f@gen-label e2c2f@gen-label) (set! e4898@e2c2d@gen-global e2c2d@gen-global) (set! e4897@e2c2b@gen-lexical e2c2b@gen-lexical) (set! e4896@e2c29@top-marked? e2c29@top-marked?) (set! e4895@e2c27@top-mark* e2c27@top-mark*) (set! e4894@e2c22@set-union e2c22@set-union) (set! e4893@e2c20@set-cons e2c20@set-cons) (set! e4892@e2c1e@file-options-macro e2c1e@file-options-macro) (e2ac5@e295c@current-library-expander e2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (e49a8@e49a3 e49aa@e49a5 e49ac@e49a4 e49af@&condition? e49b1@make-&condition e49b3@&condition-rtd e49b5@&condition-rcd e4a01@e49fc e4a03@e49fe e4a05@e49fd e4a08@p? e4a0a@make-message-condition e4a0c@e49fb e4a0e@message-condition? e4a10@condition-message e4a12@&message-rtd e4a14@&message-rcd e4a1a@e4a15 e4a1c@e4a17 e4a1e@e4a16 e4a21@p? e4a23@make-warning e4a25@warning? e4a27@&warning-rtd e4a29@&warning-rcd e4a2f@e4a2a e4a31@e4a2c e4a33@e4a2b e4a36@p? e4a38@make-serious-condition e4a3a@serious-condition? e4a3c@&serious-rtd e4a3e@&serious-rcd e4a44@e4a3f e4a46@e4a41 e4a48@e4a40 e4a4b@p? e4a4d@make-error e4a4f@error? e4a51@&error-rtd e4a53@&error-rcd e4a59@e4a54 e4a5b@e4a56 e4a5d@e4a55 e4a60@p? e4a62@make-violation e4a64@violation? e4a66@&violation-rtd e4a68@&violation-rcd e4a6e@e4a69 e4a70@e4a6b e4a72@e4a6a e4a75@p? e4a77@make-assertion-violation e4a79@assertion-violation? e4a7b@&assertion-rtd e4a7d@&assertion-rcd e4a85@e4a80 e4a87@e4a82 e4a89@e4a81 e4a8c@p? e4a8e@make-irritants-condition e4a90@e4a7f e4a92@irritants-condition? e4a94@condition-irritants e4a96@&irritants-rtd e4a98@&irritants-rcd e4aa0@e4a9b e4aa2@e4a9d e4aa4@e4a9c e4aa7@p? e4aa9@make-who-condition e4aab@e4a9a e4aad@who-condition? e4aaf@condition-who e4ab1@&who-rtd e4ab3@&who-rcd e4ab9@e4ab4 e4abb@e4ab6 e4abd@e4ab5 e4ac0@p? e4ac2@make-non-continuable-violation e4ac4@non-continuable-violation? e4ac6@&non-continuable-rtd e4ac8@&non-continuable-rcd e4ace@e4ac9 e4ad0@e4acb e4ad2@e4aca e4ad5@p? e4ad7@make-implementation-restriction-violation e4ad9@implementation-restriction-violation? e4adb@&implementation-restriction-rtd e4add@&implementation-restriction-rcd e4ae3@e4ade e4ae5@e4ae0 e4ae7@e4adf e4aea@p? e4aec@make-lexical-violation e4aee@lexical-violation? e4af0@&lexical-rtd e4af2@&lexical-rcd e4afc@e4af7 e4afe@e4af9 e4b00@e4af8 e4b03@p? e4b05@make-syntax-violation e4b07@e4af4 e4b09@e4af6 e4b0b@syntax-violation? e4b0d@syntax-violation-form e4b0f@syntax-violation-subform e4b11@&syntax-rtd e4b13@&syntax-rcd e4b19@e4b14 e4b1b@e4b16 e4b1d@e4b15 e4b20@p? e4b22@make-undefined-violation e4b24@undefined-violation? e4b26@&undefined-rtd e4b28@&undefined-rcd e4b2e@e4b29 e4b30@e4b2b e4b32@e4b2a e4b35@p? e4b37@make-i/o-error e4b39@i/o-error? e4b3b@&i/o-rtd e4b3d@&i/o-rcd e4b43@e4b3e e4b45@e4b40 e4b47@e4b3f e4b4a@p? e4b4c@make-i/o-read-error e4b4e@i/o-read-error? e4b50@&i/o-read-rtd e4b52@&i/o-read-rcd e4b58@e4b53 e4b5a@e4b55 e4b5c@e4b54 e4b5f@p? e4b61@make-i/o-write-error e4b63@i/o-write-error? e4b65@&i/o-write-rtd e4b67@&i/o-write-rcd e4b6f@e4b6a e4b71@e4b6c e4b73@e4b6b e4b76@p? e4b78@make-i/o-invalid-position-error e4b7a@e4b69 e4b7c@i/o-invalid-position-error? e4b7e@i/o-error-position e4b80@&i/o-invalid-position-rtd e4b82@&i/o-invalid-position-rcd e4b8a@e4b85 e4b8c@e4b87 e4b8e@e4b86 e4b91@p? e4b93@make-i/o-filename-error e4b95@e4b84 e4b97@i/o-filename-error? e4b99@i/o-error-filename e4b9b@&i/o-filename-rtd e4b9d@&i/o-filename-rcd e4ba3@e4b9e e4ba5@e4ba0 e4ba7@e4b9f e4baa@p? e4bac@make-i/o-file-protection-error e4bae@i/o-file-protection-error? e4bb0@&i/o-file-protection-rtd e4bb2@&i/o-file-protection-rcd e4bb8@e4bb3 e4bba@e4bb5 e4bbc@e4bb4 e4bbf@p? e4bc1@make-i/o-file-is-read-only-error e4bc3@i/o-file-is-read-only-error? e4bc5@&i/o-file-is-read-only-rtd e4bc7@&i/o-file-is-read-only-rcd e4bcd@e4bc8 e4bcf@e4bca e4bd1@e4bc9 e4bd4@p? e4bd6@make-i/o-file-already-exists-error e4bd8@i/o-file-already-exists-error? e4bda@&i/o-file-already-exists-rtd e4bdc@&i/o-file-already-exists-rcd e4be2@e4bdd e4be4@e4bdf e4be6@e4bde e4be9@p? e4beb@make-i/o-file-does-not-exist-error e4bed@i/o-file-does-not-exist-error? e4bef@&i/o-file-does-not-exist-rtd e4bf1@&i/o-file-does-not-exist-rcd e4bf9@e4bf4 e4bfb@e4bf6 e4bfd@e4bf5 e4c00@p? e4c02@make-i/o-port-error e4c04@e4bf3 e4c06@i/o-port-error? e4c08@i/o-error-port e4c0a@&i/o-port-rtd e4c0c@&i/o-port-rcd e4c12@e4c0d e4c14@e4c0f e4c16@e4c0e e4c19@p? e4c1b@make-i/o-decoding-error e4c1d@i/o-decoding-error? e4c1f@&i/o-decoding-rtd e4c21@&i/o-decoding-rcd e4c29@e4c24 e4c2b@e4c26 e4c2d@e4c25 e4c30@p? e4c32@make-i/o-encoding-error e4c34@e4c23 e4c36@i/o-encoding-error? e4c38@i/o-encoding-error-char e4c3a@&i/o-encoding-rtd e4c3c@&i/o-encoding-rcd e4c42@e4c3d e4c44@e4c3f e4c46@e4c3e e4c49@p? e4c4b@make-no-infinities-violation e4c4d@no-infinities-violation? e4c4f@&no-infinities-rtd e4c51@&no-infinities-rcd e4c57@e4c52 e4c59@e4c54 e4c5b@e4c53 e4c5e@p? e4c60@make-no-nans-violation e4c62@no-nans-violation? e4c64@&no-nans-rtd e4c66@&no-nans-rcd) (begin (set! e49a8@e49a3 (make-record-type-descriptor '&condition '#f 'e49a6 '#f '#f '#())) (set! e49aa@e49a5 '#f) (set! e49ac@e49a4 (make-record-constructor-descriptor e49a8@e49a3 '#f e49aa@e49a5)) (set! e49af@&condition? (record-predicate e49a8@e49a3)) (set! e49b1@make-&condition (record-constructor e49ac@e49a4)) (set! e49b3@&condition-rtd e49a8@e49a3) (set! e49b5@&condition-rcd e49ac@e49a4) (set! e4a01@e49fc (make-record-type-descriptor '&message e49a8@e49a3 'e49ff '#f '#f '#((immutable message)))) (set! e4a03@e49fe '#f) (set! e4a05@e49fd (make-record-constructor-descriptor e4a01@e49fc e49ac@e49a4 e4a03@e49fe)) (set! e4a08@p? (record-predicate e4a01@e49fc)) (set! e4a0a@make-message-condition (record-constructor e4a05@e49fd)) (set! e4a0c@e49fb (record-accessor e4a01@e49fc '0)) (set! e4a0e@message-condition? (condition-predicate e4a01@e49fc)) (set! e4a10@condition-message (condition-accessor e4a01@e49fc e4a0c@e49fb)) (set! e4a12@&message-rtd e4a01@e49fc) (set! e4a14@&message-rcd e4a05@e49fd) (set! e4a1a@e4a15 (make-record-type-descriptor '&warning e49a8@e49a3 'e4a18 '#f '#f '#())) (set! e4a1c@e4a17 '#f) (set! e4a1e@e4a16 (make-record-constructor-descriptor e4a1a@e4a15 e49ac@e49a4 e4a1c@e4a17)) (set! e4a21@p? (record-predicate e4a1a@e4a15)) (set! e4a23@make-warning (record-constructor e4a1e@e4a16)) (set! e4a25@warning? (condition-predicate e4a1a@e4a15)) (set! e4a27@&warning-rtd e4a1a@e4a15) (set! e4a29@&warning-rcd e4a1e@e4a16) (set! e4a2f@e4a2a (make-record-type-descriptor '&serious e49a8@e49a3 'e4a2d '#f '#f '#())) (set! e4a31@e4a2c '#f) (set! e4a33@e4a2b (make-record-constructor-descriptor e4a2f@e4a2a e49ac@e49a4 e4a31@e4a2c)) (set! e4a36@p? (record-predicate e4a2f@e4a2a)) (set! e4a38@make-serious-condition (record-constructor e4a33@e4a2b)) (set! e4a3a@serious-condition? (condition-predicate e4a2f@e4a2a)) (set! e4a3c@&serious-rtd e4a2f@e4a2a) (set! e4a3e@&serious-rcd e4a33@e4a2b) (set! e4a44@e4a3f (make-record-type-descriptor '&error e4a2f@e4a2a 'e4a42 '#f '#f '#())) (set! e4a46@e4a41 '#f) (set! e4a48@e4a40 (make-record-constructor-descriptor e4a44@e4a3f e4a33@e4a2b e4a46@e4a41)) (set! e4a4b@p? (record-predicate e4a44@e4a3f)) (set! e4a4d@make-error (record-constructor e4a48@e4a40)) (set! e4a4f@error? (condition-predicate e4a44@e4a3f)) (set! e4a51@&error-rtd e4a44@e4a3f) (set! e4a53@&error-rcd e4a48@e4a40) (set! e4a59@e4a54 (make-record-type-descriptor '&violation e4a2f@e4a2a 'e4a57 '#f '#f '#())) (set! e4a5b@e4a56 '#f) (set! e4a5d@e4a55 (make-record-constructor-descriptor e4a59@e4a54 e4a33@e4a2b e4a5b@e4a56)) (set! e4a60@p? (record-predicate e4a59@e4a54)) (set! e4a62@make-violation (record-constructor e4a5d@e4a55)) (set! e4a64@violation? (condition-predicate e4a59@e4a54)) (set! e4a66@&violation-rtd e4a59@e4a54) (set! e4a68@&violation-rcd e4a5d@e4a55) (set! e4a6e@e4a69 (make-record-type-descriptor '&assertion e4a59@e4a54 'e4a6c '#f '#f '#())) (set! e4a70@e4a6b '#f) (set! e4a72@e4a6a (make-record-constructor-descriptor e4a6e@e4a69 e4a5d@e4a55 e4a70@e4a6b)) (set! e4a75@p? (record-predicate e4a6e@e4a69)) (set! e4a77@make-assertion-violation (record-constructor e4a72@e4a6a)) (set! e4a79@assertion-violation? (condition-predicate e4a6e@e4a69)) (set! e4a7b@&assertion-rtd e4a6e@e4a69) (set! e4a7d@&assertion-rcd e4a72@e4a6a) (set! e4a85@e4a80 (make-record-type-descriptor '&irritants e49a8@e49a3 'e4a83 '#f '#f '#((immutable irritants)))) (set! e4a87@e4a82 '#f) (set! e4a89@e4a81 (make-record-constructor-descriptor e4a85@e4a80 e49ac@e49a4 e4a87@e4a82)) (set! e4a8c@p? (record-predicate e4a85@e4a80)) (set! e4a8e@make-irritants-condition (record-constructor e4a89@e4a81)) (set! e4a90@e4a7f (record-accessor e4a85@e4a80 '0)) (set! e4a92@irritants-condition? (condition-predicate e4a85@e4a80)) (set! e4a94@condition-irritants (condition-accessor e4a85@e4a80 e4a90@e4a7f)) (set! e4a96@&irritants-rtd e4a85@e4a80) (set! e4a98@&irritants-rcd e4a89@e4a81) (set! e4aa0@e4a9b (make-record-type-descriptor '&who e49a8@e49a3 'e4a9e '#f '#f '#((immutable who)))) (set! e4aa2@e4a9d '#f) (set! e4aa4@e4a9c (make-record-constructor-descriptor e4aa0@e4a9b e49ac@e49a4 e4aa2@e4a9d)) (set! e4aa7@p? (record-predicate e4aa0@e4a9b)) (set! e4aa9@make-who-condition (record-constructor e4aa4@e4a9c)) (set! e4aab@e4a9a (record-accessor e4aa0@e4a9b '0)) (set! e4aad@who-condition? (condition-predicate e4aa0@e4a9b)) (set! e4aaf@condition-who (condition-accessor e4aa0@e4a9b e4aab@e4a9a)) (set! e4ab1@&who-rtd e4aa0@e4a9b) (set! e4ab3@&who-rcd e4aa4@e4a9c) (set! e4ab9@e4ab4 (make-record-type-descriptor '&non-continuable e4a59@e4a54 'e4ab7 '#f '#f '#())) (set! e4abb@e4ab6 '#f) (set! e4abd@e4ab5 (make-record-constructor-descriptor e4ab9@e4ab4 e4a5d@e4a55 e4abb@e4ab6)) (set! e4ac0@p? (record-predicate e4ab9@e4ab4)) (set! e4ac2@make-non-continuable-violation (record-constructor e4abd@e4ab5)) (set! e4ac4@non-continuable-violation? (condition-predicate e4ab9@e4ab4)) (set! e4ac6@&non-continuable-rtd e4ab9@e4ab4) (set! e4ac8@&non-continuable-rcd e4abd@e4ab5) (set! e4ace@e4ac9 (make-record-type-descriptor '&implementation-restriction e4a59@e4a54 'e4acc '#f '#f '#())) (set! e4ad0@e4acb '#f) (set! e4ad2@e4aca (make-record-constructor-descriptor e4ace@e4ac9 e4a5d@e4a55 e4ad0@e4acb)) (set! e4ad5@p? (record-predicate e4ace@e4ac9)) (set! e4ad7@make-implementation-restriction-violation (record-constructor e4ad2@e4aca)) (set! e4ad9@implementation-restriction-violation? (condition-predicate e4ace@e4ac9)) (set! e4adb@&implementation-restriction-rtd e4ace@e4ac9) (set! e4add@&implementation-restriction-rcd e4ad2@e4aca) (set! e4ae3@e4ade (make-record-type-descriptor '&lexical e4a59@e4a54 'e4ae1 '#f '#f '#())) (set! e4ae5@e4ae0 '#f) (set! e4ae7@e4adf (make-record-constructor-descriptor e4ae3@e4ade e4a5d@e4a55 e4ae5@e4ae0)) (set! e4aea@p? (record-predicate e4ae3@e4ade)) (set! e4aec@make-lexical-violation (record-constructor e4ae7@e4adf)) (set! e4aee@lexical-violation? (condition-predicate e4ae3@e4ade)) (set! e4af0@&lexical-rtd e4ae3@e4ade) (set! e4af2@&lexical-rcd e4ae7@e4adf) (set! e4afc@e4af7 (make-record-type-descriptor '&syntax e4a59@e4a54 'e4afa '#f '#f '#((immutable form) (immutable subform)))) (set! e4afe@e4af9 '#f) (set! e4b00@e4af8 (make-record-constructor-descriptor e4afc@e4af7 e4a5d@e4a55 e4afe@e4af9)) (set! e4b03@p? (record-predicate e4afc@e4af7)) (set! e4b05@make-syntax-violation (record-constructor e4b00@e4af8)) (set! e4b07@e4af4 (record-accessor e4afc@e4af7 '0)) (set! e4b09@e4af6 (record-accessor e4afc@e4af7 '1)) (set! e4b0b@syntax-violation? (condition-predicate e4afc@e4af7)) (set! e4b0d@syntax-violation-form (condition-accessor e4afc@e4af7 e4b07@e4af4)) (set! e4b0f@syntax-violation-subform (condition-accessor e4afc@e4af7 e4b09@e4af6)) (set! e4b11@&syntax-rtd e4afc@e4af7) (set! e4b13@&syntax-rcd e4b00@e4af8) (set! e4b19@e4b14 (make-record-type-descriptor '&undefined e4a59@e4a54 'e4b17 '#f '#f '#())) (set! e4b1b@e4b16 '#f) (set! e4b1d@e4b15 (make-record-constructor-descriptor e4b19@e4b14 e4a5d@e4a55 e4b1b@e4b16)) (set! e4b20@p? (record-predicate e4b19@e4b14)) (set! e4b22@make-undefined-violation (record-constructor e4b1d@e4b15)) (set! e4b24@undefined-violation? (condition-predicate e4b19@e4b14)) (set! e4b26@&undefined-rtd e4b19@e4b14) (set! e4b28@&undefined-rcd e4b1d@e4b15) (set! e4b2e@e4b29 (make-record-type-descriptor '&i/o e4a44@e4a3f 'e4b2c '#f '#f '#())) (set! e4b30@e4b2b '#f) (set! e4b32@e4b2a (make-record-constructor-descriptor e4b2e@e4b29 e4a48@e4a40 e4b30@e4b2b)) (set! e4b35@p? (record-predicate e4b2e@e4b29)) (set! e4b37@make-i/o-error (record-constructor e4b32@e4b2a)) (set! e4b39@i/o-error? (condition-predicate e4b2e@e4b29)) (set! e4b3b@&i/o-rtd e4b2e@e4b29) (set! e4b3d@&i/o-rcd e4b32@e4b2a) (set! e4b43@e4b3e (make-record-type-descriptor '&i/o-read e4b2e@e4b29 'e4b41 '#f '#f '#())) (set! e4b45@e4b40 '#f) (set! e4b47@e4b3f (make-record-constructor-descriptor e4b43@e4b3e e4b32@e4b2a e4b45@e4b40)) (set! e4b4a@p? (record-predicate e4b43@e4b3e)) (set! e4b4c@make-i/o-read-error (record-constructor e4b47@e4b3f)) (set! e4b4e@i/o-read-error? (condition-predicate e4b43@e4b3e)) (set! e4b50@&i/o-read-rtd e4b43@e4b3e) (set! e4b52@&i/o-read-rcd e4b47@e4b3f) (set! e4b58@e4b53 (make-record-type-descriptor '&i/o-write e4b2e@e4b29 'e4b56 '#f '#f '#())) (set! e4b5a@e4b55 '#f) (set! e4b5c@e4b54 (make-record-constructor-descriptor e4b58@e4b53 e4b32@e4b2a e4b5a@e4b55)) (set! e4b5f@p? (record-predicate e4b58@e4b53)) (set! e4b61@make-i/o-write-error (record-constructor e4b5c@e4b54)) (set! e4b63@i/o-write-error? (condition-predicate e4b58@e4b53)) (set! e4b65@&i/o-write-rtd e4b58@e4b53) (set! e4b67@&i/o-write-rcd e4b5c@e4b54) (set! e4b6f@e4b6a (make-record-type-descriptor '&i/o-invalid-position e4b2e@e4b29 'e4b6d '#f '#f '#((immutable position)))) (set! e4b71@e4b6c '#f) (set! e4b73@e4b6b (make-record-constructor-descriptor e4b6f@e4b6a e4b32@e4b2a e4b71@e4b6c)) (set! e4b76@p? (record-predicate e4b6f@e4b6a)) (set! e4b78@make-i/o-invalid-position-error (record-constructor e4b73@e4b6b)) (set! e4b7a@e4b69 (record-accessor e4b6f@e4b6a '0)) (set! e4b7c@i/o-invalid-position-error? (condition-predicate e4b6f@e4b6a)) (set! e4b7e@i/o-error-position (condition-accessor e4b6f@e4b6a e4b7a@e4b69)) (set! e4b80@&i/o-invalid-position-rtd e4b6f@e4b6a) (set! e4b82@&i/o-invalid-position-rcd e4b73@e4b6b) (set! e4b8a@e4b85 (make-record-type-descriptor '&i/o-filename e4b2e@e4b29 'e4b88 '#f '#f '#((immutable filename)))) (set! e4b8c@e4b87 '#f) (set! e4b8e@e4b86 (make-record-constructor-descriptor e4b8a@e4b85 e4b32@e4b2a e4b8c@e4b87)) (set! e4b91@p? (record-predicate e4b8a@e4b85)) (set! e4b93@make-i/o-filename-error (record-constructor e4b8e@e4b86)) (set! e4b95@e4b84 (record-accessor e4b8a@e4b85 '0)) (set! e4b97@i/o-filename-error? (condition-predicate e4b8a@e4b85)) (set! e4b99@i/o-error-filename (condition-accessor e4b8a@e4b85 e4b95@e4b84)) (set! e4b9b@&i/o-filename-rtd e4b8a@e4b85) (set! e4b9d@&i/o-filename-rcd e4b8e@e4b86) (set! e4ba3@e4b9e (make-record-type-descriptor '&i/o-file-protection e4b8a@e4b85 'e4ba1 '#f '#f '#())) (set! e4ba5@e4ba0 '#f) (set! e4ba7@e4b9f (make-record-constructor-descriptor e4ba3@e4b9e e4b8e@e4b86 e4ba5@e4ba0)) (set! e4baa@p? (record-predicate e4ba3@e4b9e)) (set! e4bac@make-i/o-file-protection-error (record-constructor e4ba7@e4b9f)) (set! e4bae@i/o-file-protection-error? (condition-predicate e4ba3@e4b9e)) (set! e4bb0@&i/o-file-protection-rtd e4ba3@e4b9e) (set! e4bb2@&i/o-file-protection-rcd e4ba7@e4b9f) (set! e4bb8@e4bb3 (make-record-type-descriptor '&i/o-file-is-read-only e4ba3@e4b9e 'e4bb6 '#f '#f '#())) (set! e4bba@e4bb5 '#f) (set! e4bbc@e4bb4 (make-record-constructor-descriptor e4bb8@e4bb3 e4ba7@e4b9f e4bba@e4bb5)) (set! e4bbf@p? (record-predicate e4bb8@e4bb3)) (set! e4bc1@make-i/o-file-is-read-only-error (record-constructor e4bbc@e4bb4)) (set! e4bc3@i/o-file-is-read-only-error? (condition-predicate e4bb8@e4bb3)) (set! e4bc5@&i/o-file-is-read-only-rtd e4bb8@e4bb3) (set! e4bc7@&i/o-file-is-read-only-rcd e4bbc@e4bb4) (set! e4bcd@e4bc8 (make-record-type-descriptor '&i/o-file-already-exists e4b8a@e4b85 'e4bcb '#f '#f '#())) (set! e4bcf@e4bca '#f) (set! e4bd1@e4bc9 (make-record-constructor-descriptor e4bcd@e4bc8 e4b8e@e4b86 e4bcf@e4bca)) (set! e4bd4@p? (record-predicate e4bcd@e4bc8)) (set! e4bd6@make-i/o-file-already-exists-error (record-constructor e4bd1@e4bc9)) (set! e4bd8@i/o-file-already-exists-error? (condition-predicate e4bcd@e4bc8)) (set! e4bda@&i/o-file-already-exists-rtd e4bcd@e4bc8) (set! e4bdc@&i/o-file-already-exists-rcd e4bd1@e4bc9) (set! e4be2@e4bdd (make-record-type-descriptor '&i/o-file-does-not-exist e4b8a@e4b85 'e4be0 '#f '#f '#())) (set! e4be4@e4bdf '#f) (set! e4be6@e4bde (make-record-constructor-descriptor e4be2@e4bdd e4b8e@e4b86 e4be4@e4bdf)) (set! e4be9@p? (record-predicate e4be2@e4bdd)) (set! e4beb@make-i/o-file-does-not-exist-error (record-constructor e4be6@e4bde)) (set! e4bed@i/o-file-does-not-exist-error? (condition-predicate e4be2@e4bdd)) (set! e4bef@&i/o-file-does-not-exist-rtd e4be2@e4bdd) (set! e4bf1@&i/o-file-does-not-exist-rcd e4be6@e4bde) (set! e4bf9@e4bf4 (make-record-type-descriptor '&i/o-port e4b2e@e4b29 'e4bf7 '#f '#f '#((immutable port)))) (set! e4bfb@e4bf6 '#f) (set! e4bfd@e4bf5 (make-record-constructor-descriptor e4bf9@e4bf4 e4b32@e4b2a e4bfb@e4bf6)) (set! e4c00@p? (record-predicate e4bf9@e4bf4)) (set! e4c02@make-i/o-port-error (record-constructor e4bfd@e4bf5)) (set! e4c04@e4bf3 (record-accessor e4bf9@e4bf4 '0)) (set! e4c06@i/o-port-error? (condition-predicate e4bf9@e4bf4)) (set! e4c08@i/o-error-port (condition-accessor e4bf9@e4bf4 e4c04@e4bf3)) (set! e4c0a@&i/o-port-rtd e4bf9@e4bf4) (set! e4c0c@&i/o-port-rcd e4bfd@e4bf5) (set! e4c12@e4c0d (make-record-type-descriptor '&i/o-decoding e4bf9@e4bf4 'e4c10 '#f '#f '#())) (set! e4c14@e4c0f '#f) (set! e4c16@e4c0e (make-record-constructor-descriptor e4c12@e4c0d e4bfd@e4bf5 e4c14@e4c0f)) (set! e4c19@p? (record-predicate e4c12@e4c0d)) (set! e4c1b@make-i/o-decoding-error (record-constructor e4c16@e4c0e)) (set! e4c1d@i/o-decoding-error? (condition-predicate e4c12@e4c0d)) (set! e4c1f@&i/o-decoding-rtd e4c12@e4c0d) (set! e4c21@&i/o-decoding-rcd e4c16@e4c0e) (set! e4c29@e4c24 (make-record-type-descriptor '&i/o-encoding e4bf9@e4bf4 'e4c27 '#f '#f '#((immutable char)))) (set! e4c2b@e4c26 '#f) (set! e4c2d@e4c25 (make-record-constructor-descriptor e4c29@e4c24 e4bfd@e4bf5 e4c2b@e4c26)) (set! e4c30@p? (record-predicate e4c29@e4c24)) (set! e4c32@make-i/o-encoding-error (record-constructor e4c2d@e4c25)) (set! e4c34@e4c23 (record-accessor e4c29@e4c24 '0)) (set! e4c36@i/o-encoding-error? (condition-predicate e4c29@e4c24)) (set! e4c38@i/o-encoding-error-char (condition-accessor e4c29@e4c24 e4c34@e4c23)) (set! e4c3a@&i/o-encoding-rtd e4c29@e4c24) (set! e4c3c@&i/o-encoding-rcd e4c2d@e4c25) (set! e4c42@e4c3d (make-record-type-descriptor '&no-infinities e4ace@e4ac9 'e4c40 '#f '#f '#())) (set! e4c44@e4c3f '#f) (set! e4c46@e4c3e (make-record-constructor-descriptor e4c42@e4c3d e4ad2@e4aca e4c44@e4c3f)) (set! e4c49@p? (record-predicate e4c42@e4c3d)) (set! e4c4b@make-no-infinities-violation (record-constructor e4c46@e4c3e)) (set! e4c4d@no-infinities-violation? (condition-predicate e4c42@e4c3d)) (set! e4c4f@&no-infinities-rtd e4c42@e4c3d) (set! e4c51@&no-infinities-rcd e4c46@e4c3e) (set! e4c57@e4c52 (make-record-type-descriptor '&no-nans e4ace@e4ac9 'e4c55 '#f '#f '#())) (set! e4c59@e4c54 '#f) (set! e4c5b@e4c53 (make-record-constructor-descriptor e4c57@e4c52 e4ad2@e4aca e4c59@e4c54)) (set! e4c5e@p? (record-predicate e4c57@e4c52)) (set! e4c60@make-no-nans-violation (record-constructor e4c5b@e4c53)) (set! e4c62@no-nans-violation? (condition-predicate e4c57@e4c52)) (set! e4c64@&no-nans-rtd e4c57@e4c52) (set! e4c66@&no-nans-rcd e4c5b@e4c53) (begin (set! e4d57@e4c66@&no-nans-rcd e4c66@&no-nans-rcd) (set! e4d56@e4c64@&no-nans-rtd e4c64@&no-nans-rtd) (set! e4d55@e4c62@no-nans-violation? e4c62@no-nans-violation?) (set! e4d54@e4c60@make-no-nans-violation e4c60@make-no-nans-violation) (set! e4d53@e4c5e@p? e4c5e@p?) (set! e4d52@e4c5b@e4c53 e4c5b@e4c53) (set! e4d51@e4c59@e4c54 e4c59@e4c54) (set! e4d50@e4c57@e4c52 e4c57@e4c52) (set! e4d4f@e4c51@&no-infinities-rcd e4c51@&no-infinities-rcd) (set! e4d4e@e4c4f@&no-infinities-rtd e4c4f@&no-infinities-rtd) (set! e4d4d@e4c4d@no-infinities-violation? e4c4d@no-infinities-violation?) (set! e4d4c@e4c4b@make-no-infinities-violation e4c4b@make-no-infinities-violation) (set! e4d4b@e4c49@p? e4c49@p?) (set! e4d4a@e4c46@e4c3e e4c46@e4c3e) (set! e4d49@e4c44@e4c3f e4c44@e4c3f) (set! e4d48@e4c42@e4c3d e4c42@e4c3d) (set! e4d47@e4c3c@&i/o-encoding-rcd e4c3c@&i/o-encoding-rcd) (set! e4d46@e4c3a@&i/o-encoding-rtd e4c3a@&i/o-encoding-rtd) (set! e4d45@e4c38@i/o-encoding-error-char e4c38@i/o-encoding-error-char) (set! e4d44@e4c36@i/o-encoding-error? e4c36@i/o-encoding-error?) (set! e4d43@e4c34@e4c23 e4c34@e4c23) (set! e4d42@e4c32@make-i/o-encoding-error e4c32@make-i/o-encoding-error) (set! e4d41@e4c30@p? e4c30@p?) (set! e4d40@e4c2d@e4c25 e4c2d@e4c25) (set! e4d3f@e4c2b@e4c26 e4c2b@e4c26) (set! e4d3e@e4c29@e4c24 e4c29@e4c24) (set! e4d3d@e4c21@&i/o-decoding-rcd e4c21@&i/o-decoding-rcd) (set! e4d3c@e4c1f@&i/o-decoding-rtd e4c1f@&i/o-decoding-rtd) (set! e4d3b@e4c1d@i/o-decoding-error? e4c1d@i/o-decoding-error?) (set! e4d3a@e4c1b@make-i/o-decoding-error e4c1b@make-i/o-decoding-error) (set! e4d39@e4c19@p? e4c19@p?) (set! e4d38@e4c16@e4c0e e4c16@e4c0e) (set! e4d37@e4c14@e4c0f e4c14@e4c0f) (set! e4d36@e4c12@e4c0d e4c12@e4c0d) (set! e4d35@e4c0c@&i/o-port-rcd e4c0c@&i/o-port-rcd) (set! e4d34@e4c0a@&i/o-port-rtd e4c0a@&i/o-port-rtd) (set! e4d33@e4c08@i/o-error-port e4c08@i/o-error-port) (set! e4d32@e4c06@i/o-port-error? e4c06@i/o-port-error?) (set! e4d31@e4c04@e4bf3 e4c04@e4bf3) (set! e4d30@e4c02@make-i/o-port-error e4c02@make-i/o-port-error) (set! e4d2f@e4c00@p? e4c00@p?) (set! e4d2e@e4bfd@e4bf5 e4bfd@e4bf5) (set! e4d2d@e4bfb@e4bf6 e4bfb@e4bf6) (set! e4d2c@e4bf9@e4bf4 e4bf9@e4bf4) (set! e4d2b@e4bf1@&i/o-file-does-not-exist-rcd e4bf1@&i/o-file-does-not-exist-rcd) (set! e4d2a@e4bef@&i/o-file-does-not-exist-rtd e4bef@&i/o-file-does-not-exist-rtd) (set! e4d29@e4bed@i/o-file-does-not-exist-error? e4bed@i/o-file-does-not-exist-error?) (set! e4d28@e4beb@make-i/o-file-does-not-exist-error e4beb@make-i/o-file-does-not-exist-error) (set! e4d27@e4be9@p? e4be9@p?) (set! e4d26@e4be6@e4bde e4be6@e4bde) (set! e4d25@e4be4@e4bdf e4be4@e4bdf) (set! e4d24@e4be2@e4bdd e4be2@e4bdd) (set! e4d23@e4bdc@&i/o-file-already-exists-rcd e4bdc@&i/o-file-already-exists-rcd) (set! e4d22@e4bda@&i/o-file-already-exists-rtd e4bda@&i/o-file-already-exists-rtd) (set! e4d21@e4bd8@i/o-file-already-exists-error? e4bd8@i/o-file-already-exists-error?) (set! e4d20@e4bd6@make-i/o-file-already-exists-error e4bd6@make-i/o-file-already-exists-error) (set! e4d1f@e4bd4@p? e4bd4@p?) (set! e4d1e@e4bd1@e4bc9 e4bd1@e4bc9) (set! e4d1d@e4bcf@e4bca e4bcf@e4bca) (set! e4d1c@e4bcd@e4bc8 e4bcd@e4bc8) (set! e4d1b@e4bc7@&i/o-file-is-read-only-rcd e4bc7@&i/o-file-is-read-only-rcd) (set! e4d1a@e4bc5@&i/o-file-is-read-only-rtd e4bc5@&i/o-file-is-read-only-rtd) (set! e4d19@e4bc3@i/o-file-is-read-only-error? e4bc3@i/o-file-is-read-only-error?) (set! e4d18@e4bc1@make-i/o-file-is-read-only-error e4bc1@make-i/o-file-is-read-only-error) (set! e4d17@e4bbf@p? e4bbf@p?) (set! e4d16@e4bbc@e4bb4 e4bbc@e4bb4) (set! e4d15@e4bba@e4bb5 e4bba@e4bb5) (set! e4d14@e4bb8@e4bb3 e4bb8@e4bb3) (set! e4d13@e4bb2@&i/o-file-protection-rcd e4bb2@&i/o-file-protection-rcd) (set! e4d12@e4bb0@&i/o-file-protection-rtd e4bb0@&i/o-file-protection-rtd) (set! e4d11@e4bae@i/o-file-protection-error? e4bae@i/o-file-protection-error?) (set! e4d10@e4bac@make-i/o-file-protection-error e4bac@make-i/o-file-protection-error) (set! e4d0f@e4baa@p? e4baa@p?) (set! e4d0e@e4ba7@e4b9f e4ba7@e4b9f) (set! e4d0d@e4ba5@e4ba0 e4ba5@e4ba0) (set! e4d0c@e4ba3@e4b9e e4ba3@e4b9e) (set! e4d0b@e4b9d@&i/o-filename-rcd e4b9d@&i/o-filename-rcd) (set! e4d0a@e4b9b@&i/o-filename-rtd e4b9b@&i/o-filename-rtd) (set! e4d09@e4b99@i/o-error-filename e4b99@i/o-error-filename) (set! e4d08@e4b97@i/o-filename-error? e4b97@i/o-filename-error?) (set! e4d07@e4b95@e4b84 e4b95@e4b84) (set! e4d06@e4b93@make-i/o-filename-error e4b93@make-i/o-filename-error) (set! e4d05@e4b91@p? e4b91@p?) (set! e4d04@e4b8e@e4b86 e4b8e@e4b86) (set! e4d03@e4b8c@e4b87 e4b8c@e4b87) (set! e4d02@e4b8a@e4b85 e4b8a@e4b85) (set! e4d01@e4b82@&i/o-invalid-position-rcd e4b82@&i/o-invalid-position-rcd) (set! e4d00@e4b80@&i/o-invalid-position-rtd e4b80@&i/o-invalid-position-rtd) (set! e4cff@e4b7e@i/o-error-position e4b7e@i/o-error-position) (set! e4cfe@e4b7c@i/o-invalid-position-error? e4b7c@i/o-invalid-position-error?) (set! e4cfd@e4b7a@e4b69 e4b7a@e4b69) (set! e4cfc@e4b78@make-i/o-invalid-position-error e4b78@make-i/o-invalid-position-error) (set! e4cfb@e4b76@p? e4b76@p?) (set! e4cfa@e4b73@e4b6b e4b73@e4b6b) (set! e4cf9@e4b71@e4b6c e4b71@e4b6c) (set! e4cf8@e4b6f@e4b6a e4b6f@e4b6a) (set! e4cf7@e4b67@&i/o-write-rcd e4b67@&i/o-write-rcd) (set! e4cf6@e4b65@&i/o-write-rtd e4b65@&i/o-write-rtd) (set! e4cf5@e4b63@i/o-write-error? e4b63@i/o-write-error?) (set! e4cf4@e4b61@make-i/o-write-error e4b61@make-i/o-write-error) (set! e4cf3@e4b5f@p? e4b5f@p?) (set! e4cf2@e4b5c@e4b54 e4b5c@e4b54) (set! e4cf1@e4b5a@e4b55 e4b5a@e4b55) (set! e4cf0@e4b58@e4b53 e4b58@e4b53) (set! e4cef@e4b52@&i/o-read-rcd e4b52@&i/o-read-rcd) (set! e4cee@e4b50@&i/o-read-rtd e4b50@&i/o-read-rtd) (set! e4ced@e4b4e@i/o-read-error? e4b4e@i/o-read-error?) (set! e4cec@e4b4c@make-i/o-read-error e4b4c@make-i/o-read-error) (set! e4ceb@e4b4a@p? e4b4a@p?) (set! e4cea@e4b47@e4b3f e4b47@e4b3f) (set! e4ce9@e4b45@e4b40 e4b45@e4b40) (set! e4ce8@e4b43@e4b3e e4b43@e4b3e) (set! e4ce7@e4b3d@&i/o-rcd e4b3d@&i/o-rcd) (set! e4ce6@e4b3b@&i/o-rtd e4b3b@&i/o-rtd) (set! e4ce5@e4b39@i/o-error? e4b39@i/o-error?) (set! e4ce4@e4b37@make-i/o-error e4b37@make-i/o-error) (set! e4ce3@e4b35@p? e4b35@p?) (set! e4ce2@e4b32@e4b2a e4b32@e4b2a) (set! e4ce1@e4b30@e4b2b e4b30@e4b2b) (set! e4ce0@e4b2e@e4b29 e4b2e@e4b29) (set! e4cdf@e4b28@&undefined-rcd e4b28@&undefined-rcd) (set! e4cde@e4b26@&undefined-rtd e4b26@&undefined-rtd) (set! e4cdd@e4b24@undefined-violation? e4b24@undefined-violation?) (set! e4cdc@e4b22@make-undefined-violation e4b22@make-undefined-violation) (set! e4cdb@e4b20@p? e4b20@p?) (set! e4cda@e4b1d@e4b15 e4b1d@e4b15) (set! e4cd9@e4b1b@e4b16 e4b1b@e4b16) (set! e4cd8@e4b19@e4b14 e4b19@e4b14) (set! e4cd7@e4b13@&syntax-rcd e4b13@&syntax-rcd) (set! e4cd6@e4b11@&syntax-rtd e4b11@&syntax-rtd) (set! e4cd5@e4b0f@syntax-violation-subform e4b0f@syntax-violation-subform) (set! e4cd4@e4b0d@syntax-violation-form e4b0d@syntax-violation-form) (set! e4cd3@e4b0b@syntax-violation? e4b0b@syntax-violation?) (set! e4cd2@e4b09@e4af6 e4b09@e4af6) (set! e4cd1@e4b07@e4af4 e4b07@e4af4) (set! e4cd0@e4b05@make-syntax-violation e4b05@make-syntax-violation) (set! e4ccf@e4b03@p? e4b03@p?) (set! e4cce@e4b00@e4af8 e4b00@e4af8) (set! e4ccd@e4afe@e4af9 e4afe@e4af9) (set! e4ccc@e4afc@e4af7 e4afc@e4af7) (set! e4ccb@e4af2@&lexical-rcd e4af2@&lexical-rcd) (set! e4cca@e4af0@&lexical-rtd e4af0@&lexical-rtd) (set! e4cc9@e4aee@lexical-violation? e4aee@lexical-violation?) (set! e4cc8@e4aec@make-lexical-violation e4aec@make-lexical-violation) (set! e4cc7@e4aea@p? e4aea@p?) (set! e4cc6@e4ae7@e4adf e4ae7@e4adf) (set! e4cc5@e4ae5@e4ae0 e4ae5@e4ae0) (set! e4cc4@e4ae3@e4ade e4ae3@e4ade) (set! e4cc3@e4add@&implementation-restriction-rcd e4add@&implementation-restriction-rcd) (set! e4cc2@e4adb@&implementation-restriction-rtd e4adb@&implementation-restriction-rtd) (set! e4cc1@e4ad9@implementation-restriction-violation? e4ad9@implementation-restriction-violation?) (set! e4cc0@e4ad7@make-implementation-restriction-violation e4ad7@make-implementation-restriction-violation) (set! e4cbf@e4ad5@p? e4ad5@p?) (set! e4cbe@e4ad2@e4aca e4ad2@e4aca) (set! e4cbd@e4ad0@e4acb e4ad0@e4acb) (set! e4cbc@e4ace@e4ac9 e4ace@e4ac9) (set! e4cbb@e4ac8@&non-continuable-rcd e4ac8@&non-continuable-rcd) (set! e4cba@e4ac6@&non-continuable-rtd e4ac6@&non-continuable-rtd) (set! e4cb9@e4ac4@non-continuable-violation? e4ac4@non-continuable-violation?) (set! e4cb8@e4ac2@make-non-continuable-violation e4ac2@make-non-continuable-violation) (set! e4cb7@e4ac0@p? e4ac0@p?) (set! e4cb6@e4abd@e4ab5 e4abd@e4ab5) (set! e4cb5@e4abb@e4ab6 e4abb@e4ab6) (set! e4cb4@e4ab9@e4ab4 e4ab9@e4ab4) (set! e4cb3@e4ab3@&who-rcd e4ab3@&who-rcd) (set! e4cb2@e4ab1@&who-rtd e4ab1@&who-rtd) (set! e4cb1@e4aaf@condition-who e4aaf@condition-who) (set! e4cb0@e4aad@who-condition? e4aad@who-condition?) (set! e4caf@e4aab@e4a9a e4aab@e4a9a) (set! e4cae@e4aa9@make-who-condition e4aa9@make-who-condition) (set! e4cad@e4aa7@p? e4aa7@p?) (set! e4cac@e4aa4@e4a9c e4aa4@e4a9c) (set! e4cab@e4aa2@e4a9d e4aa2@e4a9d) (set! e4caa@e4aa0@e4a9b e4aa0@e4a9b) (set! e4ca9@e4a98@&irritants-rcd e4a98@&irritants-rcd) (set! e4ca8@e4a96@&irritants-rtd e4a96@&irritants-rtd) (set! e4ca7@e4a94@condition-irritants e4a94@condition-irritants) (set! e4ca6@e4a92@irritants-condition? e4a92@irritants-condition?) (set! e4ca5@e4a90@e4a7f e4a90@e4a7f) (set! e4ca4@e4a8e@make-irritants-condition e4a8e@make-irritants-condition) (set! e4ca3@e4a8c@p? e4a8c@p?) (set! e4ca2@e4a89@e4a81 e4a89@e4a81) (set! e4ca1@e4a87@e4a82 e4a87@e4a82) (set! e4ca0@e4a85@e4a80 e4a85@e4a80) (set! e4c9f@e4a7d@&assertion-rcd e4a7d@&assertion-rcd) (set! e4c9e@e4a7b@&assertion-rtd e4a7b@&assertion-rtd) (set! e4c9d@e4a79@assertion-violation? e4a79@assertion-violation?) (set! e4c9c@e4a77@make-assertion-violation e4a77@make-assertion-violation) (set! e4c9b@e4a75@p? e4a75@p?) (set! e4c9a@e4a72@e4a6a e4a72@e4a6a) (set! e4c99@e4a70@e4a6b e4a70@e4a6b) (set! e4c98@e4a6e@e4a69 e4a6e@e4a69) (set! e4c97@e4a68@&violation-rcd e4a68@&violation-rcd) (set! e4c96@e4a66@&violation-rtd e4a66@&violation-rtd) (set! e4c95@e4a64@violation? e4a64@violation?) (set! e4c94@e4a62@make-violation e4a62@make-violation) (set! e4c93@e4a60@p? e4a60@p?) (set! e4c92@e4a5d@e4a55 e4a5d@e4a55) (set! e4c91@e4a5b@e4a56 e4a5b@e4a56) (set! e4c90@e4a59@e4a54 e4a59@e4a54) (set! e4c8f@e4a53@&error-rcd e4a53@&error-rcd) (set! e4c8e@e4a51@&error-rtd e4a51@&error-rtd) (set! e4c8d@e4a4f@error? e4a4f@error?) (set! e4c8c@e4a4d@make-error e4a4d@make-error) (set! e4c8b@e4a4b@p? e4a4b@p?) (set! e4c8a@e4a48@e4a40 e4a48@e4a40) (set! e4c89@e4a46@e4a41 e4a46@e4a41) (set! e4c88@e4a44@e4a3f e4a44@e4a3f) (set! e4c87@e4a3e@&serious-rcd e4a3e@&serious-rcd) (set! e4c86@e4a3c@&serious-rtd e4a3c@&serious-rtd) (set! e4c85@e4a3a@serious-condition? e4a3a@serious-condition?) (set! e4c84@e4a38@make-serious-condition e4a38@make-serious-condition) (set! e4c83@e4a36@p? e4a36@p?) (set! e4c82@e4a33@e4a2b e4a33@e4a2b) (set! e4c81@e4a31@e4a2c e4a31@e4a2c) (set! e4c80@e4a2f@e4a2a e4a2f@e4a2a) (set! e4c7f@e4a29@&warning-rcd e4a29@&warning-rcd) (set! e4c7e@e4a27@&warning-rtd e4a27@&warning-rtd) (set! e4c7d@e4a25@warning? e4a25@warning?) (set! e4c7c@e4a23@make-warning e4a23@make-warning) (set! e4c7b@e4a21@p? e4a21@p?) (set! e4c7a@e4a1e@e4a16 e4a1e@e4a16) (set! e4c79@e4a1c@e4a17 e4a1c@e4a17) (set! e4c78@e4a1a@e4a15 e4a1a@e4a15) (set! e4c77@e4a14@&message-rcd e4a14@&message-rcd) (set! e4c76@e4a12@&message-rtd e4a12@&message-rtd) (set! e4c75@e4a10@condition-message e4a10@condition-message) (set! e4c74@e4a0e@message-condition? e4a0e@message-condition?) (set! e4c73@e4a0c@e49fb e4a0c@e49fb) (set! e4c72@e4a0a@make-message-condition e4a0a@make-message-condition) (set! e4c71@e4a08@p? e4a08@p?) (set! e4c70@e4a05@e49fd e4a05@e49fd) (set! e4c6f@e4a03@e49fe e4a03@e49fe) (set! e4c6e@e4a01@e49fc e4a01@e49fc) (set! e4c6d@e49b5@&condition-rcd e49b5@&condition-rcd) (set! e4c6c@e49b3@&condition-rtd e49b3@&condition-rtd) (set! e4c6b@e49b1@make-&condition e49b1@make-&condition) (set! e4c6a@e49af@&condition? e49af@&condition?) (set! e4c69@e49ac@e49a4 e49ac@e49a4) (set! e4c68@e49aa@e49a5 e49aa@e49a5) (set! e4c67@e49a8@e49a3 e49a8@e49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (e28a6@e285b@current-primitive-locations (lambda (e515d@x) ((lambda (e515f@t) (if e515f@t (cdr e515f@t) '#f)) (assq e515d@x '((&no-nans-rcd . e4d57@e4c66@&no-nans-rcd) (&no-nans-rtd . e4d56@e4c64@&no-nans-rtd) (&no-infinities-rcd . e4d4f@e4c51@&no-infinities-rcd) (&no-infinities-rtd . e4d4e@e4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . e4d47@e4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . e4d46@e4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . e4d3d@e4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . e4d3c@e4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . e4d35@e4c0c@&i/o-port-rcd) (&i/o-port-rtd . e4d34@e4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . e4d2b@e4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . e4d2a@e4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . e4d23@e4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . e4d22@e4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . e4d1b@e4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . e4d1a@e4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . e4d13@e4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . e4d12@e4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . e4d0b@e4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . e4d0a@e4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . e4d01@e4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . e4d00@e4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . e4cf7@e4b67@&i/o-write-rcd) (&i/o-write-rtd . e4cf6@e4b65@&i/o-write-rtd) (&i/o-read-rcd . e4cef@e4b52@&i/o-read-rcd) (&i/o-read-rtd . e4cee@e4b50@&i/o-read-rtd) (&i/o-rcd . e4ce7@e4b3d@&i/o-rcd) (&i/o-rtd . e4ce6@e4b3b@&i/o-rtd) (&undefined-rcd . e4cdf@e4b28@&undefined-rcd) (&undefined-rtd . e4cde@e4b26@&undefined-rtd) (&syntax-rcd . e4cd7@e4b13@&syntax-rcd) (&syntax-rtd . e4cd6@e4b11@&syntax-rtd) (&lexical-rcd . e4ccb@e4af2@&lexical-rcd) (&lexical-rtd . e4cca@e4af0@&lexical-rtd) (&implementation-restriction-rcd . e4cc3@e4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . e4cc2@e4adb@&implementation-restriction-rtd) (&non-continuable-rcd . e4cbb@e4ac8@&non-continuable-rcd) (&non-continuable-rtd . e4cba@e4ac6@&non-continuable-rtd) (&who-rcd . e4cb3@e4ab3@&who-rcd) (&who-rtd . e4cb2@e4ab1@&who-rtd) (&irritants-rcd . e4ca9@e4a98@&irritants-rcd) (&irritants-rtd . e4ca8@e4a96@&irritants-rtd) (&assertion-rcd . e4c9f@e4a7d@&assertion-rcd) (&assertion-rtd . e4c9e@e4a7b@&assertion-rtd) (&violation-rcd . e4c97@e4a68@&violation-rcd) (&violation-rtd . e4c96@e4a66@&violation-rtd) (&error-rcd . e4c8f@e4a53@&error-rcd) (&error-rtd . e4c8e@e4a51@&error-rtd) (&serious-rcd . e4c87@e4a3e@&serious-rcd) (&serious-rtd . e4c86@e4a3c@&serious-rtd) (&warning-rcd . e4c7f@e4a29@&warning-rcd) (&warning-rtd . e4c7e@e4a27@&warning-rtd) (&message-rcd . e4c77@e4a14@&message-rcd) (&message-rtd . e4c76@e4a12@&message-rtd) (&condition-rcd . e4c6d@e49b5@&condition-rcd) (&condition-rtd . e4c6c@e49b3@&condition-rtd) (syntax-error . e4995@e2f9b@syntax-error) (syntax-dispatch . e492a@e2eb6@syntax-dispatch) (load . e4e62@e4d73@load) (interaction-environment . e499d@e2fab@interaction-environment) (library-path . e2abd@e294c@library-path) (make-parameter . e2855@e277f@make-parameter) (make-variable-transformer . e48e8@e2ce3@make-variable-transformer) (identifier? . e4998@e2fa1@identifier?) (generate-temporaries . e498e@e2f8d@generate-temporaries) (free-identifier=? . e498f@e2f8f@free-identifier=?) (syntax->datum . e499a@e2fa5@syntax->datum) (datum->syntax . e4999@e2fa3@datum->syntax) (bound-identifier=? . e4990@e2f91@bound-identifier=?) (make-i/o-write-error . e4cf4@e4b61@make-i/o-write-error) (make-i/o-read-error . e4cec@e4b4c@make-i/o-read-error) (make-i/o-port-error . e4d30@e4c02@make-i/o-port-error) (make-i/o-invalid-position-error . e4cfc@e4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . e4d06@e4b93@make-i/o-filename-error) (make-i/o-file-protection-error . e4d10@e4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . e4d18@e4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . e4d28@e4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . e4d20@e4bd6@make-i/o-file-already-exists-error) (make-i/o-error . e4ce4@e4b37@make-i/o-error) (make-i/o-encoding-error . e4d42@e4c32@make-i/o-encoding-error) (make-i/o-decoding-error . e4d3a@e4c1b@make-i/o-decoding-error) (i/o-write-error? . e4cf5@e4b63@i/o-write-error?) (i/o-read-error? . e4ced@e4b4e@i/o-read-error?) (i/o-port-error? . e4d32@e4c06@i/o-port-error?) (i/o-invalid-position-error? . e4cfe@e4b7c@i/o-invalid-position-error?) (i/o-filename-error? . e4d08@e4b97@i/o-filename-error?) (i/o-file-protection-error? . e4d11@e4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . e4d19@e4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . e4d29@e4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . e4d21@e4bd8@i/o-file-already-exists-error?) (i/o-error? . e4ce5@e4b39@i/o-error?) (i/o-error-position . e4cff@e4b7e@i/o-error-position) (i/o-error-port . e4d33@e4c08@i/o-error-port) (i/o-error-filename . e4d09@e4b99@i/o-error-filename) (i/o-encoding-error? . e4d44@e4c36@i/o-encoding-error?) (i/o-encoding-error-char . e4d45@e4c38@i/o-encoding-error-char) (i/o-decoding-error? . e4d3b@e4c1d@i/o-decoding-error?) (scheme-report-environment . e4985@e2f7b@scheme-report-environment) (null-environment . e4984@e2f79@null-environment) (command-line . e4e5f@e4d6d@command-line) (eval . e4987@e2f7f@eval) (environment . e4983@e2f77@environment) (who-condition? . e4cb0@e4aad@who-condition?) (warning? . e4c7d@e4a25@warning?) (violation? . e4c95@e4a64@violation?) (undefined-violation? . e4cdd@e4b24@undefined-violation?) (syntax-violation? . e4cd3@e4b0b@syntax-violation?) (syntax-violation-subform . e4cd5@e4b0f@syntax-violation-subform) (syntax-violation-form . e4cd4@e4b0d@syntax-violation-form) (syntax-violation . e4997@e2f9f@syntax-violation) (serious-condition? . e4c85@e4a3a@serious-condition?) (non-continuable-violation? . e4cb9@e4ac4@non-continuable-violation?) (message-condition? . e4c74@e4a0e@message-condition?) (make-who-condition . e4cae@e4aa9@make-who-condition) (make-warning . e4c7c@e4a23@make-warning) (make-violation . e4c94@e4a62@make-violation) (make-undefined-violation . e4cdc@e4b22@make-undefined-violation) (make-syntax-violation . e4cd0@e4b05@make-syntax-violation) (make-serious-condition . e4c84@e4a38@make-serious-condition) (make-non-continuable-violation . e4cb8@e4ac2@make-non-continuable-violation) (make-message-condition . e4c72@e4a0a@make-message-condition) (make-lexical-violation . e4cc8@e4aec@make-lexical-violation) (make-irritants-condition . e4ca4@e4a8e@make-irritants-condition) (make-implementation-restriction-violation . e4cc0@e4ad7@make-implementation-restriction-violation) (make-error . e4c8c@e4a4d@make-error) (make-assertion-violation . e4c9c@e4a77@make-assertion-violation) (lexical-violation? . e4cc9@e4aee@lexical-violation?) (irritants-condition? . e4ca6@e4a92@irritants-condition?) (implementation-restriction-violation? . e4cc1@e4ad9@implementation-restriction-violation?) (error? . e4c8d@e4a4f@error?) (condition-who . e4cb1@e4aaf@condition-who) (condition-message . e4c75@e4a10@condition-message) (condition-irritants . e4ca7@e4a94@condition-irritants) (assertion-violation? . e4c9d@e4a79@assertion-violation?) (no-nans-violation? . e4d55@e4c62@no-nans-violation?) (no-infinities-violation? . e4d4d@e4c4d@no-infinities-violation?) (make-no-nans-violation . e4d54@e4c60@make-no-nans-violation) (make-no-infinities-violation . e4d4c@e4c4b@make-no-infinities-violation) (assertion-error . e4994@e2f99@assertion-error)))))) (e2acd@e296c@install-library 'e513a '(mosh interaction) '() '() '() '() '((regexp? . e5132) (alist->eq-hash-table . e512f) (format . e512c) (string-split . e5121) (call-process . e511b) (set-current-directory! . e5117) (expand-path . e5116) (current-directory . e5115) (%spawn . e5114) (%waitpid . e5113) (%ffi-supported? . e5112) (%ffi-pointer-ref . e5111) (%ffi-pointer->string . e5110) (%ffi-call->string-or-zero . e510f) (%ffi-call->double . e510e) (%ffi-call->void* . e510d) (%ffi-call->void . e510c) (%ffi-call->int . e510b) (%ffi-lookup . e510a) (%ffi-open . e5109) (%fork . e5108) (%pipe . e5107) (p . e5106) (string-upcase . e50e8) (string-titlecase . e50e7) (string-normalize-nfkd . e50e6) (string-normalize-nfkc . e50e5) (string-normalize-nfd . e50e4) (string-normalize-nfc . e50e3) (string-foldcase . e50e2) (string-downcase . e50e1) (string-ci>? . e50e0) (string-ci>=? . e50df) (string-ci=? . e50de) (string-ci<? . e50dd) (string-ci<=? . e50dc) (char-whitespace? . e50db) (char-upper-case? . e50da) (char-title-case? . e50d9) (char-numeric? . e50d8) (char-lower-case? . e50d7) (char-general-category . e50d6) (char-upcase . e50d5) (char-titlecase . e50d4) (char-foldcase . e50d3) (char-downcase . e50d2) (char-ci>? . e50d1) (char-ci>=? . e50d0) (char-ci=? . e50cf) (char-ci<? . e50ce) (char-ci<=? . e50cd) (char-alphabetic? . e50cc) (make-variable-transformer . e2ce2) (identifier? . e2fa0) (generate-temporaries . e2f8c) (free-identifier=? . e2f8e) (syntax->datum . e2fa4) (datum->syntax . e2fa2) (bound-identifier=? . e2f90) (record-type-descriptor? . e50cb) (record-predicate . e50ca) (record-mutator . e50c9) (record-constructor . e50c8) (record-accessor . e50c7) (make-record-type-descriptor . e50c6) (make-record-constructor-descriptor . e50c5) (record? . e50c4) (record-type-uid . e50c3) (record-type-sealed? . e50c2) (record-type-parent . e50c1) (record-type-opaque? . e50c0) (record-type-name . e50bf) (record-type-generative? . e50be) (record-type-field-names . e50bd) (record-rtd . e50bc) (record-field-mutable? . e50bb) (delete-file . e50ba) (file-exists? . e50b9) (vector-sort! . e50b8) (vector-sort . e50b7) (list-sort . e50b6) (symbol-hash . e50b5) (string-ci-hash . e50b4) (string-hash . e50b3) (equal-hash . e50b2) (hashtable-equivalence-function . e50b1) (make-hashtable . e50b0) (hashtable-hash-function . e50af) (make-eqv-hashtable . e50ae) (make-eq-hashtable . e50ad) (hashtable? . e50ac) (hashtable-update! . e50ab) (hashtable-size . e50aa) (hashtable-set! . e50a9) (hashtable-ref . e50a8) (hashtable-mutable? . e50a7) (hashtable-keys . e50a6) (hashtable-entries . e50a5) (hashtable-delete! . e50a4) (hashtable-copy . e50a3) (hashtable-contains? . e50a2) (hashtable-clear! . e50a1) (call-with-output-file . e50a0) (call-with-input-file . e509f) (write-char . e509e) (write . e509d) (with-output-to-file . e509c) (with-input-from-file . e509b) (read-char . e509a) (read . e5099) (peek-char . e5098) (open-output-file . e5097) (open-input-file . e5096) (newline . e5095) (display . e5094) (close-output-port . e5093) (close-input-port . e5092) (eof-object? . e5091) (eof-object . e5090) (current-error-port . e508f) (current-output-port . e508e) (current-input-port . e508d) (output-port? . e508c) (input-port? . e508b) (utf-8-codec . e508a) (utf-16-codec . e5089) (transcoder-error-handling-mode . e5088) (transcoder-eol-style . e5087) (transcoder-codec . e5086) (transcoded-port . e5085) (textual-port? . e5084) (string->bytevector . e5083) (standard-output-port . e5082) (standard-input-port . e5081) (standard-error-port . e5080) (set-port-position! . e507f) (put-u8 . e507e) (put-string . e507d) (put-datum . e507c) (put-char . e507b) (put-bytevector . e507a) (port? . e5079) (port-transcoder . e5078) (port-position . e5077) (port-has-set-port-position!? . e5076) (port-has-port-position? . e5075) (port-eof? . e5074) (output-port-buffer-mode . e5073) (open-string-output-port . e5072) (open-string-input-port . e5071) (open-file-output-port . e5070) (open-file-input/output-port . e506f) (open-file-input-port . e506e) (open-bytevector-output-port . e506d) (open-bytevector-input-port . e506c) (native-transcoder . e506b) (native-eol-style . e506a) (make-transcoder . e5069) (latin-1-codec . e5068) (make-i/o-write-error . e4b60) (make-i/o-read-error . e4b4b) (make-i/o-port-error . e4c01) (make-i/o-invalid-position-error . e4b77) (make-i/o-filename-error . e4b92) (make-i/o-file-protection-error . e4bab) (make-i/o-file-is-read-only-error . e4bc0) (make-i/o-file-does-not-exist-error . e4bea) (make-i/o-file-already-exists-error . e4bd5) (make-i/o-error . e4b36) (make-i/o-encoding-error . e4c31) (make-i/o-decoding-error . e4c1a) (make-custom-textual-output-port . e5067) (make-custom-textual-input/output-port . e5066) (make-custom-textual-input-port . e5065) (make-custom-binary-output-port . e5064) (make-custom-binary-input/output-port . e5063) (make-custom-binary-input-port . e5062) (make-bytevector . e5061) (lookahead-u8 . e5060) (lookahead-char . e505f) (i/o-write-error? . e4b62) (i/o-read-error? . e4b4d) (i/o-port-error? . e4c05) (i/o-invalid-position-error? . e4b7b) (i/o-filename-error? . e4b96) (i/o-file-protection-error? . e4bad) (i/o-file-is-read-only-error? . e4bc2) (i/o-file-does-not-exist-error? . e4bec) (i/o-file-already-exists-error? . e4bd7) (i/o-error? . e4b38) (i/o-error-position . e4b7d) (i/o-error-port . e4c07) (i/o-error-filename . e4b98) (i/o-encoding-error? . e4c35) (i/o-encoding-error-char . e4c37) (i/o-decoding-error? . e4c1c) (get-u8 . e505e) (get-string-n! . e505d) (get-string-n . e505c) (get-string-all . e505b) (get-line . e505a) (get-datum . e5059) (get-char . e5058) (get-bytevector-some . e5057) (get-bytevector-n! . e5056) (get-bytevector-n . e5055) (get-bytevector-all . e5054) (flush-output-port . e5053) (close-port . e5052) (exit . e504a) (command-line . e4d6c) (string-fill! . e5049) (string-set! . e5048) (set-cdr! . e5047) (set-car! . e5046) (remove . e5045) (remv . e5044) (remp . e5043) (remq . e5042) (partition . e5041) (memv . e5040) (memq . e503f) (memp . e503e) (member . e503d) (exists . e503c) (for-all . e503b) (fold-right . e503a) (fold-left . e5039) (find . e5038) (filter . e5037) (cons* . e5036) (assv . e5035) (assq . e5034) (assp . e5033) (assoc . e5032) (call-with-string-output-port . e5031) (call-with-port . e5030) (call-with-bytevector-output-port . e502f) (bytevector->string . e502e) (buffer-mode? . e502d) (binary-port? . e502c) (with-exception-handler . e502b) (raise-continuable . e502a) (raise . e5029) (eval . e2f7e) (environment . e2f76) (make-enumeration . e5028) (enum-set=? . e5027) (enum-set-universe . e5026) (enum-set-union . e5025) (enum-set-subset? . e5024) (enum-set-projection . e5023) (enum-set-member? . e5022) (enum-set-intersection . e5021) (enum-set-indexer . e5020) (enum-set-difference . e501f) (enum-set-constructor . e501e) (enum-set-complement . e501d) (enum-set->list . e501c) (who-condition? . e4aac) (warning? . e4a24) (violation? . e4a63) (undefined-violation? . e4b23) (syntax-violation? . e4b0a) (syntax-violation-subform . e4b0e) (syntax-violation-form . e4b0c) (syntax-violation . e2f9e) (simple-conditions . e501b) (serious-condition? . e4a39) (non-continuable-violation? . e4ac3) (message-condition? . e4a0d) (make-who-condition . e4aa8) (make-warning . e4a22) (make-violation . e4a61) (make-undefined-violation . e4b21) (make-syntax-violation . e4b04) (make-serious-condition . e4a37) (make-non-continuable-violation . e4ac1) (make-message-condition . e4a09) (make-lexical-violation . e4aeb) (make-irritants-condition . e4a8d) (make-implementation-restriction-violation . e4ad6) (make-error . e4a4c) (make-assertion-violation . e4a76) (lexical-violation? . e4aed) (irritants-condition? . e4a91) (implementation-restriction-violation? . e4ad8) (error? . e4a4e) (condition-who . e4aae) (condition-predicate . e501a) (condition-message . e4a0f) (condition-irritants . e4a93) (condition-accessor . e5019) (condition . e5018) (assertion-violation? . e4a78) (condition? . e5017) (utf32->string . e5016) (utf16->string . e5015) (utf8->string . e5014) (uint-list->bytevector . e5013) (u8-list->bytevector . e5012) (string->utf8 . e5011) (string->utf32 . e5010) (string->utf16 . e500f) (sint-list->bytevector . e500e) (native-endianness . e500d) (bytevector? . e500c) (bytevector=? . e500b) (bytevector-uint-set! . e500a) (bytevector-uint-ref . e5009) (bytevector-u8-set! . e5008) (bytevector-u8-ref . e5007) (bytevector-u64-set! . e5006) (bytevector-u64-ref . e5005) (bytevector-u64-native-set! . e5004) (bytevector-u64-native-ref . e5003) (bytevector-u32-set! . e5002) (bytevector-u32-ref . e5001) (bytevector-u32-native-set! . e5000) (bytevector-u32-native-ref . e4fff) (bytevector-u16-set! . e4ffe) (bytevector-u16-ref . e4ffd) (bytevector-u16-native-set! . e4ffc) (bytevector-u16-native-ref . e4ffb) (bytevector-sint-set! . e4ffa) (bytevector-sint-ref . e4ff9) (bytevector-s8-set! . e4ff8) (bytevector-s8-ref . e4ff7) (bytevector-s64-set! . e4ff6) (bytevector-s64-ref . e4ff5) (bytevector-s64-native-set! . e4ff4) (bytevector-s64-native-ref . e4ff3) (bytevector-s32-set! . e4ff2) (bytevector-s32-ref . e4ff1) (bytevector-s32-native-set! . e4ff0) (bytevector-s32-native-ref . e4fef) (bytevector-s16-set! . e4fee) (bytevector-s16-ref . e4fed) (bytevector-s16-native-set! . e4fec) (bytevector-s16-native-ref . e4feb) (bytevector-length . e4fea) (bytevector-ieee-single-ref . e4fe9) (bytevector-ieee-single-set! . e4fe8) (bytevector-ieee-single-native-set! . e4fe7) (bytevector-ieee-single-native-ref . e4fe6) (bytevector-ieee-double-set! . e4fe5) (bytevector-ieee-double-ref . e4fe4) (bytevector-ieee-double-native-set! . e4fe3) (bytevector-ieee-double-native-ref . e4fe2) (bytevector-fill! . e4fe1) (bytevector-copy! . e4fe0) (bytevector-copy . e4fdf) (bytevector->uint-list . e4fde) (bytevector->u8-list . e4fdd) (bytevector->sint-list . e4fdc) (no-nans-violation? . e4c61) (no-infinities-violation? . e4c4c) (make-no-nans-violation . e4c5f) (make-no-infinities-violation . e4c4a) (real->flonum . e4fdb) (flzero? . e4fda) (fltruncate . e4fd9) (fltan . e4fd8) (flsqrt . e4fd7) (flsin . e4fd6) (flround . e4fd5) (flpositive? . e4fd4) (flonum? . e4fd3) (flodd? . e4fd2) (flnumerator . e4fd1) (flnegative? . e4fd0) (flnan? . e4fcf) (flmod0 . e4fce) (flmod . e4fcd) (flmin . e4fcc) (flmax . e4fcb) (fllog . e4fca) (flinteger? . e4fc9) (flinfinite? . e4fc8) (flfloor . e4fc7) (flfinite? . e4fc6) (flexpt . e4fc5) (flexp . e4fc4) (fleven? . e4fc3) (fldiv0-and-mod0 . e4fc2) (fldiv0 . e4fc1) (fldiv-and-mod . e4fc0) (fldiv . e4fbf) (fldenominator . e4fbe) (flcos . e4fbd) (flceiling . e4fbc) (flatan . e4fbb) (flasin . e4fba) (flacos . e4fb9) (flabs . e4fb8) (fl>? . e4fb7) (fl>=? . e4fb6) (fl=? . e4fb5) (fl<? . e4fb4) (fl<=? . e4fb3) (fl/ . e4fb2) (fl- . e4fb1) (fl+ . e4fb0) (fl* . e4faf) (fixnum->flonum . e4fae) (fxzero? . e4fad) (fxxor . e4fac) (fxrotate-bit-field . e4fab) (fxreverse-bit-field . e4faa) (fxpositive? . e4fa9) (fxodd? . e4fa8) (fxnot . e4fa7) (fxnegative? . e4fa6) (fxmod0 . e4fa5) (fxmod . e4fa4) (fxmin . e4fa3) (fxmax . e4fa2) (fxlength . e4fa1) (fxior . e4fa0) (fxif . e4f9f) (fxfirst-bit-set . e4f9e) (fxeven? . e4f9d) (fxdiv0-and-mod0 . e4f9c) (fxdiv0 . e4f9b) (fxdiv-and-mod . e4f9a) (fxdiv . e4f99) (fxcopy-bit-field . e4f98) (fxcopy-bit . e4f97) (fxbit-set? . e4f96) (fxbit-field . e4f95) (fxbit-count . e4f94) (fxarithmetic-shift-right . e4f93) (fxarithmetic-shift-left . e4f92) (fxarithmetic-shift . e4f91) (fxand . e4f90) (fx>? . e4f8f) (fx>=? . e4f8e) (fx=? . e4f8d) (fx<? . e4f8c) (fx<=? . e4f8b) (fx-/carry . e4f8a) (fx- . e4f89) (fx+/carry . e4f88) (fx+ . e4f87) (fx*/carry . e4f86) (fx* . e4f85) (greatest-fixnum . e4f84) (least-fixnum . e4f83) (fixnum-width . e4f82) (fixnum? . e4f81) (bitwise-rotate-bit-field . e4f80) (bitwise-reverse-bit-field . e4f7f) (bitwise-length . e4f7e) (bitwise-if . e4f7d) (bitwise-first-bit-set . e4f7c) (bitwise-copy-bit-field . e4f7b) (bitwise-copy-bit . e4f7a) (bitwise-bit-set? . e4f79) (bitwise-bit-field . e4f78) (bitwise-bit-count . e4f77) (bitwise-xor . e4f76) (bitwise-ior . e4f75) (bitwise-and . e4f74) (bitwise-not . e4f73) (bitwise-arithmetic-shift-right . e4f72) (bitwise-arithmetic-shift-left . e4f71) (bitwise-arithmetic-shift . e4f70) (zero? . e4f6f) (vector? . e4f6e) (vector-set! . e4f6d) (vector-ref . e4f6c) (vector-map . e4f6b) (vector-length . e4f6a) (vector-for-each . e4f69) (vector-fill! . e4f68) (vector->list . e4f67) (vector . e4f66) (values . e4f65) (truncate . e4f64) (tan . e4f63) (symbol? . e4f62) (symbol=? . e4f61) (symbol->string . e4f60) (substring . e4f5f) (string? . e4f5e) (string>? . e4f5d) (string>=? . e4f5c) (string=? . e4f5b) (string<? . e4f5a) (string<=? . e4f59) (string-ref . e4f58) (string-length . e4f57) (string-for-each . e4f56) (string-copy . e4f55) (string-append . e4f54) (string->symbol . e4f53) (string->number . e4f52) (string->list . e4f51) (string . e4f50) (sqrt . e4f4f) (sin . e4f4e) (round . e4f4d) (reverse . e4f4c) (real? . e4f4b) (real-valued? . e4f4a) (real-part . e4f49) (rationalize . e4f48) (rational? . e4f47) (rational-valued? . e4f46) (procedure? . e4f45) (positive? . e4f44) (pair? . e4f43) (odd? . e4f42) (numerator . e4f41) (number? . e4f40) (number->string . e4f3f) (null? . e4f3e) (not . e4f3d) (negative? . e4f3c) (nan? . e4f3b) (min . e4f3a) (max . e4f39) (map . e4f38) (make-vector . e4f37) (make-string . e4f36) (make-rectangular . e4f35) (make-polar . e4f34) (magnitude . e4f33) (log . e4f32) (list? . e4f31) (list-tail . e4f30) (list-ref . e4f2f) (list->vector . e4f2e) (list->string . e4f2d) (list . e4f2c) (length . e4f2b) (lcm . e4f2a) (integer? . e4f29) (integer-valued? . e4f28) (integer->char . e4f27) (infinite? . e4f26) (inexact? . e4f25) (inexact . e4f24) (imag-part . e4f23) (gcd . e4f22) (for-each . e4f21) (floor . e4f20) (finite? . e4f1f) (expt . e4f1e) (exp . e4f1d) (exact? . e4f1c) (exact-integer-sqrt . e4f1b) (exact . e4f1a) (even? . e4f19) (error . e4f18) (eqv? . e4f17) (equal? . e4f16) (eq? . e4f15) (dynamic-wind . e4f14) (div0-and-mod0 . e4f13) (mod0 . e4f12) (div0 . e4f11) (div-and-mod . e4f10) (mod . e4f0f) (div . e4f0e) (denominator . e4f0d) (cos . e4f0c) (cons . e4f0b) (complex? . e4f0a) (char? . e4f09) (char>? . e4f08) (char>=? . e4f07) (char=? . e4f06) (char<? . e4f05) (char<=? . e4f04) (char->integer . e4f03) (ceiling . e4f02) (call-with-values . e4f01) (call/cc . e4f00) (call-with-current-continuation . e4eff) (cddddr . e4efe) (cdddar . e4efd) (cddadr . e4efc) (cddaar . e4efb) (cdaddr . e4efa) (cdadar . e4ef9) (cdaadr . e4ef8) (cdaaar . e4ef7) (cadddr . e4ef6) (caddar . e4ef5) (cadadr . e4ef4) (cadaar . e4ef3) (caaddr . e4ef2) (caadar . e4ef1) (caaadr . e4ef0) (caaaar . e4eef) (cdddr . e4eee) (cddar . e4eed) (cdadr . e4eec) (cdaar . e4eeb) (caddr . e4eea) (cadar . e4ee9) (caadr . e4ee8) (caaar . e4ee7) (cddr . e4ee6) (cdar . e4ee5) (cadr . e4ee4) (caar . e4ee3) (cdr . e4ee2) (car . e4ee1) (boolean? . e4ee0) (boolean=? . e4edf) (atan . e4ede) (assertion-violation . e4edd) (asin . e4edc) (apply . e4edb) (append . e4eda) (angle . e4ed9) (acos . e4ed8) (abs . e4ed7) (/ . e4ed6) (* . e4ed5) (- . e4ed4) (+ . e4ed3) (>= . e4ed2) (> . e4ed1) (= . e4ed0) (<= . e4ecf) (< . e4ece) (library . e4ecd) (&no-nans . e4ecc) (&no-infinities . e4ecb) (&i/o-encoding . e4eca) (&i/o-decoding . e4ec9) (&i/o-port . e4ec8) (&i/o-file-does-not-exist . e4ec7) (&i/o-file-already-exists . e4ec6) (&i/o-file-is-read-only . e4ec5) (&i/o-file-protection . e4ec4) (&i/o-filename . e4ec3) (&i/o-invalid-position . e4ec2) (&i/o-write . e4ec1) (&i/o-read . e4ec0) (&i/o . e4ebf) (&undefined . e4ebe) (&syntax . e4ebd) (&lexical . e4ebc) (&implementation-restriction . e4ebb) (&non-continuable . e4eba) (&who . e4eb9) (&irritants . e4eb8) (&assertion . e4eb7) (&violation . e4eb6) (&error . e4eb5) (&serious . e4eb4) (&warning . e4eb3) (&message . e4eb2) (&condition . e4eb1) (define-condition-type . e4eb0) (define-enumeration . e4eaf) (define-record-type . e4eae) (parent-rtd . e4ead) (nongenerative . e4eac) (opaque . e4eab) (sealed . e4eaa) (protocol . e4ea9) (parent . e4ea8) (immutable . e4ea7) (mutable . e4ea6) (fields . e4ea5) (error-handling-mode . e4ea4) (file-options . e4ea3) (buffer-mode . e4ea2) (eol-style . e4ea1) (guard . e4ea0) (unsyntax-splicing . e4e9d) (unsyntax . e4e9c) (unquote-splicing . e4e9b) (unquote . e4e9a) (_ . e4e99) (else . e4e98) (=> . e4e97) (... . e4e96) (assert . e4e95) (endianness . e4e94) (do . e4e91) (cond . e4e90) (let* . e4e8f) (let . e4e8e) (let*-values . e4e8d) (let-values . e4e8c) (identifier-syntax . e4e8b) (with-syntax . e4e8a) (quasisyntax . e4e89) (quasiquote . e4e88) (syntax-rules . e4e87) (include . e4e86) (record-constructor-descriptor . e4e84) (record-type-descriptor . e4e83) (case . e4e82) (unless . e4e80) (when . e4e7f) (or . e4e7e) (and . e4e7d) (if . e4e7c) (letrec* . e4e7b) (letrec . e4e7a) (case-lambda . e4e78) (lambda . e4e77) (syntax . e4e76) (syntax-case . e4e75) (quote . e4e74) (letrec-syntax . e4e72) (let-syntax . e4e71) (set! . e4e70) (import . e4e6f) (begin . e4e6e) (define-syntax . e4e6c) (define . e4e6b)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e513b '(psyntax null-environment-5) '() '() '() '() '((make-promise . e504b) (unquote-splicing . e4e9b) (unquote . e4e9a) (_ . e4e99) (else . e4e98) (=> . e4e97) (... . e4e96) (delay . e4e93) (do . e4e91) (cond . e4e90) (let* . e4e8f) (let . e4e8e) (quasiquote . e4e88) (syntax-rules . e4e87) (case . e4e82) (or . e4e7e) (and . e4e7d) (if . e4e7c) (letrec . e4e7a) (lambda . e4e77) (quote . e4e74) (letrec-syntax . e4e72) (let-syntax . e4e71) (set! . e4e70) (begin . e4e6e) (define-syntax . e4e6c) (define . e4e6b)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e513c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . e50e0) (string-ci>=? . e50df) (string-ci=? . e50de) (string-ci<? . e50dd) (string-ci<=? . e50dc) (char-whitespace? . e50db) (char-upper-case? . e50da) (char-numeric? . e50d8) (char-lower-case? . e50d7) (char-upcase . e50d5) (char-downcase . e50d2) (char-ci>? . e50d1) (char-ci>=? . e50d0) (char-ci=? . e50cf) (char-ci<? . e50ce) (char-ci<=? . e50cd) (char-alphabetic? . e50cc) (call-with-output-file . e50a0) (call-with-input-file . e509f) (write-char . e509e) (write . e509d) (with-output-to-file . e509c) (with-input-from-file . e509b) (read-char . e509a) (read . e5099) (peek-char . e5098) (open-output-file . e5097) (open-input-file . e5096) (newline . e5095) (display . e5094) (close-output-port . e5093) (close-input-port . e5092) (eof-object . e5090) (current-output-port . e508e) (current-input-port . e508d) (output-port? . e508c) (input-port? . e508b) (scheme-report-environment . e2f7a) (quotient . e5051) (null-environment . e2f78) (remainder . e5050) (modulo . e504f) (inexact->exact . e504e) (force . e504d) (exact->inexact . e504c) (make-promise . e504b) (string-fill! . e5049) (string-set! . e5048) (set-cdr! . e5047) (set-car! . e5046) (memv . e5040) (memq . e503f) (member . e503d) (assv . e5035) (assq . e5034) (assoc . e5032) (eval . e2f7e) (zero? . e4f6f) (vector? . e4f6e) (vector-set! . e4f6d) (vector-ref . e4f6c) (vector-length . e4f6a) (vector-fill! . e4f68) (vector->list . e4f67) (vector . e4f66) (values . e4f65) (truncate . e4f64) (tan . e4f63) (symbol? . e4f62) (symbol->string . e4f60) (substring . e4f5f) (string? . e4f5e) (string>? . e4f5d) (string>=? . e4f5c) (string=? . e4f5b) (string<? . e4f5a) (string<=? . e4f59) (string-ref . e4f58) (string-length . e4f57) (string-copy . e4f55) (string-append . e4f54) (string->symbol . e4f53) (string->number . e4f52) (string->list . e4f51) (string . e4f50) (sqrt . e4f4f) (sin . e4f4e) (round . e4f4d) (reverse . e4f4c) (real? . e4f4b) (real-part . e4f49) (rationalize . e4f48) (rational? . e4f47) (procedure? . e4f45) (positive? . e4f44) (pair? . e4f43) (odd? . e4f42) (numerator . e4f41) (number? . e4f40) (number->string . e4f3f) (not . e4f3d) (negative? . e4f3c) (min . e4f3a) (max . e4f39) (map . e4f38) (make-vector . e4f37) (make-string . e4f36) (make-rectangular . e4f35) (make-polar . e4f34) (magnitude . e4f33) (log . e4f32) (list? . e4f31) (list-tail . e4f30) (list-ref . e4f2f) (list->vector . e4f2e) (list->string . e4f2d) (list . e4f2c) (length . e4f2b) (lcm . e4f2a) (integer? . e4f29) (integer->char . e4f27) (inexact? . e4f25) (imag-part . e4f23) (gcd . e4f22) (for-each . e4f21) (floor . e4f20) (expt . e4f1e) (exp . e4f1d) (exact? . e4f1c) (even? . e4f19) (eqv? . e4f17) (equal? . e4f16) (eq? . e4f15) (dynamic-wind . e4f14) (denominator . e4f0d) (cos . e4f0c) (cons . e4f0b) (complex? . e4f0a) (char? . e4f09) (char>? . e4f08) (char>=? . e4f07) (char=? . e4f06) (char<? . e4f05) (char<=? . e4f04) (char->integer . e4f03) (ceiling . e4f02) (call-with-values . e4f01) (call-with-current-continuation . e4eff) (cddddr . e4efe) (cdddar . e4efd) (cddadr . e4efc) (cddaar . e4efb) (cdaddr . e4efa) (cdadar . e4ef9) (cdaadr . e4ef8) (cdaaar . e4ef7) (cadddr . e4ef6) (caddar . e4ef5) (cadadr . e4ef4) (cadaar . e4ef3) (caaddr . e4ef2) (caadar . e4ef1) (caaadr . e4ef0) (caaaar . e4eef) (cdddr . e4eee) (cddar . e4eed) (cdadr . e4eec) (cdaar . e4eeb) (caddr . e4eea) (cadar . e4ee9) (caadr . e4ee8) (caaar . e4ee7) (cddr . e4ee6) (cdar . e4ee5) (cadr . e4ee4) (caar . e4ee3) (cdr . e4ee2) (car . e4ee1) (boolean? . e4ee0) (atan . e4ede) (asin . e4edc) (apply . e4edb) (append . e4eda) (angle . e4ed9) (acos . e4ed8) (abs . e4ed7) (/ . e4ed6) (* . e4ed5) (- . e4ed4) (+ . e4ed3) (>= . e4ed2) (> . e4ed1) (= . e4ed0) (<= . e4ecf) (< . e4ece) (unquote-splicing . e4e9b) (unquote . e4e9a) (else . e4e98) (=> . e4e97) (... . e4e96) (delay . e4e93) (do . e4e91) (cond . e4e90) (let* . e4e8f) (let . e4e8e) (quasiquote . e4e88) (syntax-rules . e4e87) (case . e4e82) (or . e4e7e) (and . e4e7d) (if . e4e7c) (letrec . e4e7a) (lambda . e4e77) (quote . e4e74) (letrec-syntax . e4e72) (let-syntax . e4e71) (set! . e4e70) (begin . e4e6e) (define-syntax . e4e6c) (define . e4e6b)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e513d '(psyntax modules) '() '() '() '() '((module . e4e6d)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e513e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e513f '(rnrs) '(6) '() '() '() '((regexp? . e5132) (string-upcase . e50e8) (string-titlecase . e50e7) (string-normalize-nfkd . e50e6) (string-normalize-nfkc . e50e5) (string-normalize-nfd . e50e4) (string-normalize-nfc . e50e3) (string-foldcase . e50e2) (string-downcase . e50e1) (string-ci>? . e50e0) (string-ci>=? . e50df) (string-ci=? . e50de) (string-ci<? . e50dd) (string-ci<=? . e50dc) (char-whitespace? . e50db) (char-upper-case? . e50da) (char-title-case? . e50d9) (char-numeric? . e50d8) (char-lower-case? . e50d7) (char-general-category . e50d6) (char-upcase . e50d5) (char-titlecase . e50d4) (char-foldcase . e50d3) (char-downcase . e50d2) (char-ci>? . e50d1) (char-ci>=? . e50d0) (char-ci=? . e50cf) (char-ci<? . e50ce) (char-ci<=? . e50cd) (char-alphabetic? . e50cc) (make-variable-transformer . e2ce2) (identifier? . e2fa0) (generate-temporaries . e2f8c) (free-identifier=? . e2f8e) (syntax->datum . e2fa4) (datum->syntax . e2fa2) (bound-identifier=? . e2f90) (record-type-descriptor? . e50cb) (record-predicate . e50ca) (record-mutator . e50c9) (record-constructor . e50c8) (record-accessor . e50c7) (make-record-type-descriptor . e50c6) (make-record-constructor-descriptor . e50c5) (record? . e50c4) (record-type-uid . e50c3) (record-type-sealed? . e50c2) (record-type-parent . e50c1) (record-type-opaque? . e50c0) (record-type-name . e50bf) (record-type-generative? . e50be) (record-type-field-names . e50bd) (record-rtd . e50bc) (record-field-mutable? . e50bb) (delete-file . e50ba) (file-exists? . e50b9) (vector-sort! . e50b8) (vector-sort . e50b7) (list-sort . e50b6) (symbol-hash . e50b5) (string-ci-hash . e50b4) (string-hash . e50b3) (equal-hash . e50b2) (hashtable-equivalence-function . e50b1) (make-hashtable . e50b0) (hashtable-hash-function . e50af) (make-eqv-hashtable . e50ae) (make-eq-hashtable . e50ad) (hashtable? . e50ac) (hashtable-update! . e50ab) (hashtable-size . e50aa) (hashtable-set! . e50a9) (hashtable-ref . e50a8) (hashtable-mutable? . e50a7) (hashtable-keys . e50a6) (hashtable-entries . e50a5) (hashtable-delete! . e50a4) (hashtable-copy . e50a3) (hashtable-contains? . e50a2) (hashtable-clear! . e50a1) (call-with-output-file . e50a0) (call-with-input-file . e509f) (write-char . e509e) (write . e509d) (with-output-to-file . e509c) (with-input-from-file . e509b) (read-char . e509a) (read . e5099) (peek-char . e5098) (open-output-file . e5097) (open-input-file . e5096) (newline . e5095) (display . e5094) (close-output-port . e5093) (close-input-port . e5092) (eof-object? . e5091) (eof-object . e5090) (current-error-port . e508f) (current-output-port . e508e) (current-input-port . e508d) (output-port? . e508c) (input-port? . e508b) (utf-8-codec . e508a) (utf-16-codec . e5089) (transcoder-error-handling-mode . e5088) (transcoder-eol-style . e5087) (transcoder-codec . e5086) (transcoded-port . e5085) (textual-port? . e5084) (string->bytevector . e5083) (standard-output-port . e5082) (standard-input-port . e5081) (standard-error-port . e5080) (set-port-position! . e507f) (put-u8 . e507e) (put-string . e507d) (put-datum . e507c) (put-char . e507b) (put-bytevector . e507a) (port? . e5079) (port-transcoder . e5078) (port-position . e5077) (port-has-set-port-position!? . e5076) (port-has-port-position? . e5075) (port-eof? . e5074) (output-port-buffer-mode . e5073) (open-string-output-port . e5072) (open-string-input-port . e5071) (open-file-output-port . e5070) (open-file-input/output-port . e506f) (open-file-input-port . e506e) (open-bytevector-output-port . e506d) (open-bytevector-input-port . e506c) (native-transcoder . e506b) (native-eol-style . e506a) (make-transcoder . e5069) (latin-1-codec . e5068) (make-i/o-write-error . e4b60) (make-i/o-read-error . e4b4b) (make-i/o-port-error . e4c01) (make-i/o-invalid-position-error . e4b77) (make-i/o-filename-error . e4b92) (make-i/o-file-protection-error . e4bab) (make-i/o-file-is-read-only-error . e4bc0) (make-i/o-file-does-not-exist-error . e4bea) (make-i/o-file-already-exists-error . e4bd5) (make-i/o-error . e4b36) (make-i/o-encoding-error . e4c31) (make-i/o-decoding-error . e4c1a) (make-custom-textual-output-port . e5067) (make-custom-textual-input/output-port . e5066) (make-custom-textual-input-port . e5065) (make-custom-binary-output-port . e5064) (make-custom-binary-input/output-port . e5063) (make-custom-binary-input-port . e5062) (make-bytevector . e5061) (lookahead-u8 . e5060) (lookahead-char . e505f) (i/o-write-error? . e4b62) (i/o-read-error? . e4b4d) (i/o-port-error? . e4c05) (i/o-invalid-position-error? . e4b7b) (i/o-filename-error? . e4b96) (i/o-file-protection-error? . e4bad) (i/o-file-is-read-only-error? . e4bc2) (i/o-file-does-not-exist-error? . e4bec) (i/o-file-already-exists-error? . e4bd7) (i/o-error? . e4b38) (i/o-error-position . e4b7d) (i/o-error-port . e4c07) (i/o-error-filename . e4b98) (i/o-encoding-error? . e4c35) (i/o-encoding-error-char . e4c37) (i/o-decoding-error? . e4c1c) (get-u8 . e505e) (get-string-n! . e505d) (get-string-n . e505c) (get-string-all . e505b) (get-line . e505a) (get-datum . e5059) (get-char . e5058) (get-bytevector-some . e5057) (get-bytevector-n! . e5056) (get-bytevector-n . e5055) (get-bytevector-all . e5054) (flush-output-port . e5053) (close-port . e5052) (exit . e504a) (command-line . e4d6c) (remove . e5045) (remv . e5044) (remp . e5043) (remq . e5042) (partition . e5041) (memv . e5040) (memq . e503f) (memp . e503e) (member . e503d) (exists . e503c) (for-all . e503b) (fold-right . e503a) (fold-left . e5039) (find . e5038) (filter . e5037) (cons* . e5036) (assv . e5035) (assq . e5034) (assp . e5033) (assoc . e5032) (call-with-string-output-port . e5031) (call-with-port . e5030) (call-with-bytevector-output-port . e502f) (bytevector->string . e502e) (buffer-mode? . e502d) (binary-port? . e502c) (with-exception-handler . e502b) (raise-continuable . e502a) (raise . e5029) (make-enumeration . e5028) (enum-set=? . e5027) (enum-set-universe . e5026) (enum-set-union . e5025) (enum-set-subset? . e5024) (enum-set-projection . e5023) (enum-set-member? . e5022) (enum-set-intersection . e5021) (enum-set-indexer . e5020) (enum-set-difference . e501f) (enum-set-constructor . e501e) (enum-set-complement . e501d) (enum-set->list . e501c) (who-condition? . e4aac) (warning? . e4a24) (violation? . e4a63) (undefined-violation? . e4b23) (syntax-violation? . e4b0a) (syntax-violation-subform . e4b0e) (syntax-violation-form . e4b0c) (syntax-violation . e2f9e) (simple-conditions . e501b) (serious-condition? . e4a39) (non-continuable-violation? . e4ac3) (message-condition? . e4a0d) (make-who-condition . e4aa8) (make-warning . e4a22) (make-violation . e4a61) (make-undefined-violation . e4b21) (make-syntax-violation . e4b04) (make-serious-condition . e4a37) (make-non-continuable-violation . e4ac1) (make-message-condition . e4a09) (make-lexical-violation . e4aeb) (make-irritants-condition . e4a8d) (make-implementation-restriction-violation . e4ad6) (make-error . e4a4c) (make-assertion-violation . e4a76) (lexical-violation? . e4aed) (irritants-condition? . e4a91) (implementation-restriction-violation? . e4ad8) (error? . e4a4e) (condition-who . e4aae) (condition-predicate . e501a) (condition-message . e4a0f) (condition-irritants . e4a93) (condition-accessor . e5019) (condition . e5018) (assertion-violation? . e4a78) (condition? . e5017) (utf32->string . e5016) (utf16->string . e5015) (utf8->string . e5014) (uint-list->bytevector . e5013) (u8-list->bytevector . e5012) (string->utf8 . e5011) (string->utf32 . e5010) (string->utf16 . e500f) (sint-list->bytevector . e500e) (native-endianness . e500d) (bytevector? . e500c) (bytevector=? . e500b) (bytevector-uint-set! . e500a) (bytevector-uint-ref . e5009) (bytevector-u8-set! . e5008) (bytevector-u8-ref . e5007) (bytevector-u64-set! . e5006) (bytevector-u64-ref . e5005) (bytevector-u64-native-set! . e5004) (bytevector-u64-native-ref . e5003) (bytevector-u32-set! . e5002) (bytevector-u32-ref . e5001) (bytevector-u32-native-set! . e5000) (bytevector-u32-native-ref . e4fff) (bytevector-u16-set! . e4ffe) (bytevector-u16-ref . e4ffd) (bytevector-u16-native-set! . e4ffc) (bytevector-u16-native-ref . e4ffb) (bytevector-sint-set! . e4ffa) (bytevector-sint-ref . e4ff9) (bytevector-s8-set! . e4ff8) (bytevector-s8-ref . e4ff7) (bytevector-s64-set! . e4ff6) (bytevector-s64-ref . e4ff5) (bytevector-s64-native-set! . e4ff4) (bytevector-s64-native-ref . e4ff3) (bytevector-s32-set! . e4ff2) (bytevector-s32-ref . e4ff1) (bytevector-s32-native-set! . e4ff0) (bytevector-s32-native-ref . e4fef) (bytevector-s16-set! . e4fee) (bytevector-s16-ref . e4fed) (bytevector-s16-native-set! . e4fec) (bytevector-s16-native-ref . e4feb) (bytevector-length . e4fea) (bytevector-ieee-single-ref . e4fe9) (bytevector-ieee-single-set! . e4fe8) (bytevector-ieee-single-native-set! . e4fe7) (bytevector-ieee-single-native-ref . e4fe6) (bytevector-ieee-double-set! . e4fe5) (bytevector-ieee-double-ref . e4fe4) (bytevector-ieee-double-native-set! . e4fe3) (bytevector-ieee-double-native-ref . e4fe2) (bytevector-fill! . e4fe1) (bytevector-copy! . e4fe0) (bytevector-copy . e4fdf) (bytevector->uint-list . e4fde) (bytevector->u8-list . e4fdd) (bytevector->sint-list . e4fdc) (no-nans-violation? . e4c61) (no-infinities-violation? . e4c4c) (make-no-nans-violation . e4c5f) (make-no-infinities-violation . e4c4a) (real->flonum . e4fdb) (flzero? . e4fda) (fltruncate . e4fd9) (fltan . e4fd8) (flsqrt . e4fd7) (flsin . e4fd6) (flround . e4fd5) (flpositive? . e4fd4) (flonum? . e4fd3) (flodd? . e4fd2) (flnumerator . e4fd1) (flnegative? . e4fd0) (flnan? . e4fcf) (flmod0 . e4fce) (flmod . e4fcd) (flmin . e4fcc) (flmax . e4fcb) (fllog . e4fca) (flinteger? . e4fc9) (flinfinite? . e4fc8) (flfloor . e4fc7) (flfinite? . e4fc6) (flexpt . e4fc5) (flexp . e4fc4) (fleven? . e4fc3) (fldiv0-and-mod0 . e4fc2) (fldiv0 . e4fc1) (fldiv-and-mod . e4fc0) (fldiv . e4fbf) (fldenominator . e4fbe) (flcos . e4fbd) (flceiling . e4fbc) (flatan . e4fbb) (flasin . e4fba) (flacos . e4fb9) (flabs . e4fb8) (fl>? . e4fb7) (fl>=? . e4fb6) (fl=? . e4fb5) (fl<? . e4fb4) (fl<=? . e4fb3) (fl/ . e4fb2) (fl- . e4fb1) (fl+ . e4fb0) (fl* . e4faf) (fixnum->flonum . e4fae) (fxzero? . e4fad) (fxxor . e4fac) (fxrotate-bit-field . e4fab) (fxreverse-bit-field . e4faa) (fxpositive? . e4fa9) (fxodd? . e4fa8) (fxnot . e4fa7) (fxnegative? . e4fa6) (fxmod0 . e4fa5) (fxmod . e4fa4) (fxmin . e4fa3) (fxmax . e4fa2) (fxlength . e4fa1) (fxior . e4fa0) (fxif . e4f9f) (fxfirst-bit-set . e4f9e) (fxeven? . e4f9d) (fxdiv0-and-mod0 . e4f9c) (fxdiv0 . e4f9b) (fxdiv-and-mod . e4f9a) (fxdiv . e4f99) (fxcopy-bit-field . e4f98) (fxcopy-bit . e4f97) (fxbit-set? . e4f96) (fxbit-field . e4f95) (fxbit-count . e4f94) (fxarithmetic-shift-right . e4f93) (fxarithmetic-shift-left . e4f92) (fxarithmetic-shift . e4f91) (fxand . e4f90) (fx>? . e4f8f) (fx>=? . e4f8e) (fx=? . e4f8d) (fx<? . e4f8c) (fx<=? . e4f8b) (fx-/carry . e4f8a) (fx- . e4f89) (fx+/carry . e4f88) (fx+ . e4f87) (fx*/carry . e4f86) (fx* . e4f85) (greatest-fixnum . e4f84) (least-fixnum . e4f83) (fixnum-width . e4f82) (fixnum? . e4f81) (bitwise-rotate-bit-field . e4f80) (bitwise-reverse-bit-field . e4f7f) (bitwise-length . e4f7e) (bitwise-if . e4f7d) (bitwise-first-bit-set . e4f7c) (bitwise-copy-bit-field . e4f7b) (bitwise-copy-bit . e4f7a) (bitwise-bit-set? . e4f79) (bitwise-bit-field . e4f78) (bitwise-bit-count . e4f77) (bitwise-xor . e4f76) (bitwise-ior . e4f75) (bitwise-and . e4f74) (bitwise-not . e4f73) (bitwise-arithmetic-shift-right . e4f72) (bitwise-arithmetic-shift-left . e4f71) (bitwise-arithmetic-shift . e4f70) (zero? . e4f6f) (vector? . e4f6e) (vector-set! . e4f6d) (vector-ref . e4f6c) (vector-map . e4f6b) (vector-length . e4f6a) (vector-for-each . e4f69) (vector-fill! . e4f68) (vector->list . e4f67) (vector . e4f66) (values . e4f65) (truncate . e4f64) (tan . e4f63) (symbol? . e4f62) (symbol=? . e4f61) (symbol->string . e4f60) (substring . e4f5f) (string? . e4f5e) (string>? . e4f5d) (string>=? . e4f5c) (string=? . e4f5b) (string<? . e4f5a) (string<=? . e4f59) (string-ref . e4f58) (string-length . e4f57) (string-for-each . e4f56) (string-copy . e4f55) (string-append . e4f54) (string->symbol . e4f53) (string->number . e4f52) (string->list . e4f51) (string . e4f50) (sqrt . e4f4f) (sin . e4f4e) (round . e4f4d) (reverse . e4f4c) (real? . e4f4b) (real-valued? . e4f4a) (real-part . e4f49) (rationalize . e4f48) (rational? . e4f47) (rational-valued? . e4f46) (procedure? . e4f45) (positive? . e4f44) (pair? . e4f43) (odd? . e4f42) (numerator . e4f41) (number? . e4f40) (number->string . e4f3f) (null? . e4f3e) (not . e4f3d) (negative? . e4f3c) (nan? . e4f3b) (min . e4f3a) (max . e4f39) (map . e4f38) (make-vector . e4f37) (make-string . e4f36) (make-rectangular . e4f35) (make-polar . e4f34) (magnitude . e4f33) (log . e4f32) (list? . e4f31) (list-tail . e4f30) (list-ref . e4f2f) (list->vector . e4f2e) (list->string . e4f2d) (list . e4f2c) (length . e4f2b) (lcm . e4f2a) (integer? . e4f29) (integer-valued? . e4f28) (integer->char . e4f27) (infinite? . e4f26) (inexact? . e4f25) (inexact . e4f24) (imag-part . e4f23) (gcd . e4f22) (for-each . e4f21) (floor . e4f20) (finite? . e4f1f) (expt . e4f1e) (exp . e4f1d) (exact? . e4f1c) (exact-integer-sqrt . e4f1b) (exact . e4f1a) (even? . e4f19) (error . e4f18) (eqv? . e4f17) (equal? . e4f16) (eq? . e4f15) (dynamic-wind . e4f14) (div0-and-mod0 . e4f13) (mod0 . e4f12) (div0 . e4f11) (div-and-mod . e4f10) (mod . e4f0f) (div . e4f0e) (denominator . e4f0d) (cos . e4f0c) (cons . e4f0b) (complex? . e4f0a) (char? . e4f09) (char>? . e4f08) (char>=? . e4f07) (char=? . e4f06) (char<? . e4f05) (char<=? . e4f04) (char->integer . e4f03) (ceiling . e4f02) (call-with-values . e4f01) (call/cc . e4f00) (call-with-current-continuation . e4eff) (cddddr . e4efe) (cdddar . e4efd) (cddadr . e4efc) (cddaar . e4efb) (cdaddr . e4efa) (cdadar . e4ef9) (cdaadr . e4ef8) (cdaaar . e4ef7) (cadddr . e4ef6) (caddar . e4ef5) (cadadr . e4ef4) (cadaar . e4ef3) (caaddr . e4ef2) (caadar . e4ef1) (caaadr . e4ef0) (caaaar . e4eef) (cdddr . e4eee) (cddar . e4eed) (cdadr . e4eec) (cdaar . e4eeb) (caddr . e4eea) (cadar . e4ee9) (caadr . e4ee8) (caaar . e4ee7) (cddr . e4ee6) (cdar . e4ee5) (cadr . e4ee4) (caar . e4ee3) (cdr . e4ee2) (car . e4ee1) (boolean? . e4ee0) (boolean=? . e4edf) (atan . e4ede) (assertion-violation . e4edd) (asin . e4edc) (apply . e4edb) (append . e4eda) (angle . e4ed9) (acos . e4ed8) (abs . e4ed7) (/ . e4ed6) (* . e4ed5) (- . e4ed4) (+ . e4ed3) (>= . e4ed2) (> . e4ed1) (= . e4ed0) (<= . e4ecf) (< . e4ece) (&no-nans . e4ecc) (&no-infinities . e4ecb) (&i/o-encoding . e4eca) (&i/o-decoding . e4ec9) (&i/o-port . e4ec8) (&i/o-file-does-not-exist . e4ec7) (&i/o-file-already-exists . e4ec6) (&i/o-file-is-read-only . e4ec5) (&i/o-file-protection . e4ec4) (&i/o-filename . e4ec3) (&i/o-invalid-position . e4ec2) (&i/o-write . e4ec1) (&i/o-read . e4ec0) (&i/o . e4ebf) (&undefined . e4ebe) (&syntax . e4ebd) (&lexical . e4ebc) (&implementation-restriction . e4ebb) (&non-continuable . e4eba) (&who . e4eb9) (&irritants . e4eb8) (&assertion . e4eb7) (&violation . e4eb6) (&error . e4eb5) (&serious . e4eb4) (&warning . e4eb3) (&message . e4eb2) (&condition . e4eb1) (define-condition-type . e4eb0) (define-enumeration . e4eaf) (define-record-type . e4eae) (parent-rtd . e4ead) (nongenerative . e4eac) (opaque . e4eab) (sealed . e4eaa) (protocol . e4ea9) (parent . e4ea8) (immutable . e4ea7) (mutable . e4ea6) (fields . e4ea5) (error-handling-mode . e4ea4) (file-options . e4ea3) (buffer-mode . e4ea2) (eol-style . e4ea1) (guard . e4ea0) (unsyntax-splicing . e4e9d) (unsyntax . e4e9c) (unquote-splicing . e4e9b) (unquote . e4e9a) (_ . e4e99) (else . e4e98) (=> . e4e97) (... . e4e96) (assert . e4e95) (endianness . e4e94) (do . e4e91) (cond . e4e90) (let* . e4e8f) (let . e4e8e) (let*-values . e4e8d) (let-values . e4e8c) (identifier-syntax . e4e8b) (with-syntax . e4e8a) (quasisyntax . e4e89) (quasiquote . e4e88) (syntax-rules . e4e87) (record-constructor-descriptor . e4e84) (record-type-descriptor . e4e83) (case . e4e82) (unless . e4e80) (when . e4e7f) (or . e4e7e) (and . e4e7d) (if . e4e7c) (letrec* . e4e7b) (letrec . e4e7a) (case-lambda . e4e78) (lambda . e4e77) (syntax . e4e76) (syntax-case . e4e75) (quote . e4e74) (letrec-syntax . e4e72) (let-syntax . e4e71) (set! . e4e70) (begin . e4e6e) (define-syntax . e4e6c) (define . e4e6b)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5140 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . e2f7a) (quotient . e5051) (null-environment . e2f78) (remainder . e5050) (modulo . e504f) (inexact->exact . e504e) (force . e504d) (exact->inexact . e504c) (make-promise . e504b) (delay . e4e93)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5141 '(rnrs control) '(6) '() '() '() '((do . e4e91) (unless . e4e80) (when . e4e7f) (case-lambda . e4e78)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5142 '(rnrs eval) '(6) '() '() '() '((eval . e2f7e) (environment . e2f76)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5143 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . e5047) (set-car! . e5046)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5144 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . e5049) (string-set! . e5048)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5145 '(rnrs programs) '(6) '() '() '() '((exit . e504a) (command-line . e4d6c)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5146 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . e2ce2) (identifier? . e2fa0) (generate-temporaries . e2f8c) (free-identifier=? . e2f8e) (syntax->datum . e2fa4) (datum->syntax . e2fa2) (bound-identifier=? . e2f90) (syntax-violation . e2f9e) (unsyntax-splicing . e4e9d) (unsyntax . e4e9c) (_ . e4e99) (... . e4e96) (with-syntax . e4e8a) (quasisyntax . e4e89) (syntax . e4e76) (syntax-case . e4e75)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5147 '(rnrs files) '(6) '() '() '() '((delete-file . e50ba) (file-exists? . e50b9) (make-i/o-write-error . e4b60) (make-i/o-read-error . e4b4b) (make-i/o-port-error . e4c01) (make-i/o-invalid-position-error . e4b77) (make-i/o-filename-error . e4b92) (make-i/o-file-protection-error . e4bab) (make-i/o-file-is-read-only-error . e4bc0) (make-i/o-file-does-not-exist-error . e4bea) (make-i/o-file-already-exists-error . e4bd5) (make-i/o-error . e4b36) (i/o-write-error? . e4b62) (i/o-read-error? . e4b4d) (i/o-port-error? . e4c05) (i/o-invalid-position-error? . e4b7b) (i/o-filename-error? . e4b96) (i/o-file-protection-error? . e4bad) (i/o-file-is-read-only-error? . e4bc2) (i/o-file-does-not-exist-error? . e4bec) (i/o-file-already-exists-error? . e4bd7) (i/o-error? . e4b38) (i/o-error-position . e4b7d) (i/o-error-port . e4c07) (i/o-error-filename . e4b98) (&i/o-port . e4ec8) (&i/o-file-does-not-exist . e4ec7) (&i/o-file-already-exists . e4ec6) (&i/o-file-is-read-only . e4ec5) (&i/o-file-protection . e4ec4) (&i/o-filename . e4ec3) (&i/o-invalid-position . e4ec2) (&i/o-write . e4ec1) (&i/o-read . e4ec0) (&i/o . e4ebf)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5148 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . e50b8) (vector-sort . e50b7) (list-sort . e50b6)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5149 '(rnrs base) '(6) '() '() '() '((zero? . e4f6f) (vector? . e4f6e) (vector-set! . e4f6d) (vector-ref . e4f6c) (vector-map . e4f6b) (vector-length . e4f6a) (vector-for-each . e4f69) (vector-fill! . e4f68) (vector->list . e4f67) (vector . e4f66) (values . e4f65) (truncate . e4f64) (tan . e4f63) (symbol? . e4f62) (symbol=? . e4f61) (symbol->string . e4f60) (substring . e4f5f) (string? . e4f5e) (string>? . e4f5d) (string>=? . e4f5c) (string=? . e4f5b) (string<? . e4f5a) (string<=? . e4f59) (string-ref . e4f58) (string-length . e4f57) (string-for-each . e4f56) (string-copy . e4f55) (string-append . e4f54) (string->symbol . e4f53) (string->number . e4f52) (string->list . e4f51) (string . e4f50) (sqrt . e4f4f) (sin . e4f4e) (round . e4f4d) (reverse . e4f4c) (real? . e4f4b) (real-valued? . e4f4a) (real-part . e4f49) (rationalize . e4f48) (rational? . e4f47) (rational-valued? . e4f46) (procedure? . e4f45) (positive? . e4f44) (pair? . e4f43) (odd? . e4f42) (numerator . e4f41) (number? . e4f40) (number->string . e4f3f) (null? . e4f3e) (not . e4f3d) (negative? . e4f3c) (nan? . e4f3b) (min . e4f3a) (max . e4f39) (map . e4f38) (make-vector . e4f37) (make-string . e4f36) (make-rectangular . e4f35) (make-polar . e4f34) (magnitude . e4f33) (log . e4f32) (list? . e4f31) (list-tail . e4f30) (list-ref . e4f2f) (list->vector . e4f2e) (list->string . e4f2d) (list . e4f2c) (length . e4f2b) (lcm . e4f2a) (integer? . e4f29) (integer-valued? . e4f28) (integer->char . e4f27) (infinite? . e4f26) (inexact? . e4f25) (inexact . e4f24) (imag-part . e4f23) (gcd . e4f22) (for-each . e4f21) (floor . e4f20) (finite? . e4f1f) (expt . e4f1e) (exp . e4f1d) (exact? . e4f1c) (exact-integer-sqrt . e4f1b) (exact . e4f1a) (even? . e4f19) (error . e4f18) (eqv? . e4f17) (equal? . e4f16) (eq? . e4f15) (dynamic-wind . e4f14) (div0-and-mod0 . e4f13) (mod0 . e4f12) (div0 . e4f11) (div-and-mod . e4f10) (mod . e4f0f) (div . e4f0e) (denominator . e4f0d) (cos . e4f0c) (cons . e4f0b) (complex? . e4f0a) (char? . e4f09) (char>? . e4f08) (char>=? . e4f07) (char=? . e4f06) (char<? . e4f05) (char<=? . e4f04) (char->integer . e4f03) (ceiling . e4f02) (call-with-values . e4f01) (call/cc . e4f00) (call-with-current-continuation . e4eff) (cddddr . e4efe) (cdddar . e4efd) (cddadr . e4efc) (cddaar . e4efb) (cdaddr . e4efa) (cdadar . e4ef9) (cdaadr . e4ef8) (cdaaar . e4ef7) (cadddr . e4ef6) (caddar . e4ef5) (cadadr . e4ef4) (cadaar . e4ef3) (caaddr . e4ef2) (caadar . e4ef1) (caaadr . e4ef0) (caaaar . e4eef) (cdddr . e4eee) (cddar . e4eed) (cdadr . e4eec) (cdaar . e4eeb) (caddr . e4eea) (cadar . e4ee9) (caadr . e4ee8) (caaar . e4ee7) (cddr . e4ee6) (cdar . e4ee5) (cadr . e4ee4) (caar . e4ee3) (cdr . e4ee2) (car . e4ee1) (boolean? . e4ee0) (boolean=? . e4edf) (atan . e4ede) (assertion-violation . e4edd) (asin . e4edc) (apply . e4edb) (append . e4eda) (angle . e4ed9) (acos . e4ed8) (abs . e4ed7) (/ . e4ed6) (* . e4ed5) (- . e4ed4) (+ . e4ed3) (>= . e4ed2) (> . e4ed1) (= . e4ed0) (<= . e4ecf) (< . e4ece) (unquote-splicing . e4e9b) (unquote . e4e9a) (_ . e4e99) (else . e4e98) (=> . e4e97) (... . e4e96) (assert . e4e95) (cond . e4e90) (let* . e4e8f) (let . e4e8e) (let*-values . e4e8d) (let-values . e4e8c) (identifier-syntax . e4e8b) (quasiquote . e4e88) (syntax-rules . e4e87) (case . e4e82) (or . e4e7e) (and . e4e7d) (if . e4e7c) (letrec* . e4e7b) (letrec . e4e7a) (lambda . e4e77) (quote . e4e74) (letrec-syntax . e4e72) (let-syntax . e4e71) (set! . e4e70) (begin . e4e6e) (define-syntax . e4e6c) (define . e4e6b)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e514a '(rnrs lists) '(6) '() '() '() '((remove . e5045) (remv . e5044) (remp . e5043) (remq . e5042) (partition . e5041) (memv . e5040) (memq . e503f) (memp . e503e) (member . e503d) (exists . e503c) (for-all . e503b) (fold-right . e503a) (fold-left . e5039) (find . e5038) (filter . e5037) (cons* . e5036) (assv . e5035) (assq . e5034) (assp . e5033) (assoc . e5032)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e514b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . e50a0) (call-with-input-file . e509f) (write-char . e509e) (write . e509d) (with-output-to-file . e509c) (with-input-from-file . e509b) (read-char . e509a) (read . e5099) (peek-char . e5098) (open-output-file . e5097) (open-input-file . e5096) (newline . e5095) (display . e5094) (close-output-port . e5093) (close-input-port . e5092) (eof-object? . e5091) (eof-object . e5090) (current-error-port . e508f) (current-output-port . e508e) (current-input-port . e508d) (output-port? . e508c) (input-port? . e508b) (make-i/o-write-error . e4b60) (make-i/o-read-error . e4b4b) (make-i/o-port-error . e4c01) (make-i/o-invalid-position-error . e4b77) (make-i/o-filename-error . e4b92) (make-i/o-file-protection-error . e4bab) (make-i/o-file-is-read-only-error . e4bc0) (make-i/o-file-does-not-exist-error . e4bea) (make-i/o-file-already-exists-error . e4bd5) (make-i/o-error . e4b36) (i/o-write-error? . e4b62) (i/o-read-error? . e4b4d) (i/o-port-error? . e4c05) (i/o-invalid-position-error? . e4b7b) (i/o-filename-error? . e4b96) (i/o-file-protection-error? . e4bad) (i/o-file-is-read-only-error? . e4bc2) (i/o-file-does-not-exist-error? . e4bec) (i/o-file-already-exists-error? . e4bd7) (i/o-error? . e4b38) (i/o-error-position . e4b7d) (i/o-error-port . e4c07) (i/o-error-filename . e4b98) (&i/o-port . e4ec8) (&i/o-file-does-not-exist . e4ec7) (&i/o-file-already-exists . e4ec6) (&i/o-file-is-read-only . e4ec5) (&i/o-file-protection . e4ec4) (&i/o-filename . e4ec3) (&i/o-invalid-position . e4ec2) (&i/o-write . e4ec1) (&i/o-read . e4ec0) (&i/o . e4ebf)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e514c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . e5061) (utf32->string . e5016) (utf16->string . e5015) (utf8->string . e5014) (uint-list->bytevector . e5013) (u8-list->bytevector . e5012) (string->utf8 . e5011) (string->utf32 . e5010) (string->utf16 . e500f) (sint-list->bytevector . e500e) (native-endianness . e500d) (bytevector? . e500c) (bytevector=? . e500b) (bytevector-uint-set! . e500a) (bytevector-uint-ref . e5009) (bytevector-u8-set! . e5008) (bytevector-u8-ref . e5007) (bytevector-u64-set! . e5006) (bytevector-u64-ref . e5005) (bytevector-u64-native-set! . e5004) (bytevector-u64-native-ref . e5003) (bytevector-u32-set! . e5002) (bytevector-u32-ref . e5001) (bytevector-u32-native-set! . e5000) (bytevector-u32-native-ref . e4fff) (bytevector-u16-set! . e4ffe) (bytevector-u16-ref . e4ffd) (bytevector-u16-native-set! . e4ffc) (bytevector-u16-native-ref . e4ffb) (bytevector-sint-set! . e4ffa) (bytevector-sint-ref . e4ff9) (bytevector-s8-set! . e4ff8) (bytevector-s8-ref . e4ff7) (bytevector-s64-set! . e4ff6) (bytevector-s64-ref . e4ff5) (bytevector-s64-native-set! . e4ff4) (bytevector-s64-native-ref . e4ff3) (bytevector-s32-set! . e4ff2) (bytevector-s32-ref . e4ff1) (bytevector-s32-native-set! . e4ff0) (bytevector-s32-native-ref . e4fef) (bytevector-s16-set! . e4fee) (bytevector-s16-ref . e4fed) (bytevector-s16-native-set! . e4fec) (bytevector-s16-native-ref . e4feb) (bytevector-length . e4fea) (bytevector-ieee-single-ref . e4fe9) (bytevector-ieee-single-set! . e4fe8) (bytevector-ieee-single-native-set! . e4fe7) (bytevector-ieee-single-native-ref . e4fe6) (bytevector-ieee-double-set! . e4fe5) (bytevector-ieee-double-ref . e4fe4) (bytevector-ieee-double-native-set! . e4fe3) (bytevector-ieee-double-native-ref . e4fe2) (bytevector-fill! . e4fe1) (bytevector-copy! . e4fe0) (bytevector-copy . e4fdf) (bytevector->uint-list . e4fde) (bytevector->u8-list . e4fdd) (bytevector->sint-list . e4fdc) (endianness . e4e94)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e514d '(rnrs unicode) '(6) '() '() '() '((string-upcase . e50e8) (string-titlecase . e50e7) (string-normalize-nfkd . e50e6) (string-normalize-nfkc . e50e5) (string-normalize-nfd . e50e4) (string-normalize-nfc . e50e3) (string-foldcase . e50e2) (string-downcase . e50e1) (string-ci>? . e50e0) (string-ci>=? . e50df) (string-ci=? . e50de) (string-ci<? . e50dd) (string-ci<=? . e50dc) (char-whitespace? . e50db) (char-upper-case? . e50da) (char-title-case? . e50d9) (char-numeric? . e50d8) (char-lower-case? . e50d7) (char-general-category . e50d6) (char-upcase . e50d5) (char-titlecase . e50d4) (char-foldcase . e50d3) (char-downcase . e50d2) (char-ci>? . e50d1) (char-ci>=? . e50d0) (char-ci=? . e50cf) (char-ci<? . e50ce) (char-ci<=? . e50cd) (char-alphabetic? . e50cc)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e514e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . e502b) (raise-continuable . e502a) (raise . e5029) (guard . e4ea0) (else . e4e98) (=> . e4e97)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e514f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . e4f80) (bitwise-reverse-bit-field . e4f7f) (bitwise-length . e4f7e) (bitwise-if . e4f7d) (bitwise-first-bit-set . e4f7c) (bitwise-copy-bit-field . e4f7b) (bitwise-copy-bit . e4f7a) (bitwise-bit-set? . e4f79) (bitwise-bit-field . e4f78) (bitwise-bit-count . e4f77) (bitwise-xor . e4f76) (bitwise-ior . e4f75) (bitwise-and . e4f74) (bitwise-not . e4f73) (bitwise-arithmetic-shift-right . e4f72) (bitwise-arithmetic-shift-left . e4f71) (bitwise-arithmetic-shift . e4f70)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5150 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . e4fad) (fxxor . e4fac) (fxrotate-bit-field . e4fab) (fxreverse-bit-field . e4faa) (fxpositive? . e4fa9) (fxodd? . e4fa8) (fxnot . e4fa7) (fxnegative? . e4fa6) (fxmod0 . e4fa5) (fxmod . e4fa4) (fxmin . e4fa3) (fxmax . e4fa2) (fxlength . e4fa1) (fxior . e4fa0) (fxif . e4f9f) (fxfirst-bit-set . e4f9e) (fxeven? . e4f9d) (fxdiv0-and-mod0 . e4f9c) (fxdiv0 . e4f9b) (fxdiv-and-mod . e4f9a) (fxdiv . e4f99) (fxcopy-bit-field . e4f98) (fxcopy-bit . e4f97) (fxbit-set? . e4f96) (fxbit-field . e4f95) (fxbit-count . e4f94) (fxarithmetic-shift-right . e4f93) (fxarithmetic-shift-left . e4f92) (fxarithmetic-shift . e4f91) (fxand . e4f90) (fx>? . e4f8f) (fx>=? . e4f8e) (fx=? . e4f8d) (fx<? . e4f8c) (fx<=? . e4f8b) (fx-/carry . e4f8a) (fx- . e4f89) (fx+/carry . e4f88) (fx+ . e4f87) (fx*/carry . e4f86) (fx* . e4f85) (greatest-fixnum . e4f84) (least-fixnum . e4f83) (fixnum-width . e4f82) (fixnum? . e4f81)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5151 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . e4c61) (no-infinities-violation? . e4c4c) (make-no-nans-violation . e4c5f) (make-no-infinities-violation . e4c4a) (real->flonum . e4fdb) (flzero? . e4fda) (fltruncate . e4fd9) (fltan . e4fd8) (flsqrt . e4fd7) (flsin . e4fd6) (flround . e4fd5) (flpositive? . e4fd4) (flonum? . e4fd3) (flodd? . e4fd2) (flnumerator . e4fd1) (flnegative? . e4fd0) (flnan? . e4fcf) (flmod0 . e4fce) (flmod . e4fcd) (flmin . e4fcc) (flmax . e4fcb) (fllog . e4fca) (flinteger? . e4fc9) (flinfinite? . e4fc8) (flfloor . e4fc7) (flfinite? . e4fc6) (flexpt . e4fc5) (flexp . e4fc4) (fleven? . e4fc3) (fldiv0-and-mod0 . e4fc2) (fldiv0 . e4fc1) (fldiv-and-mod . e4fc0) (fldiv . e4fbf) (fldenominator . e4fbe) (flcos . e4fbd) (flceiling . e4fbc) (flatan . e4fbb) (flasin . e4fba) (flacos . e4fb9) (flabs . e4fb8) (fl>? . e4fb7) (fl>=? . e4fb6) (fl=? . e4fb5) (fl<? . e4fb4) (fl<=? . e4fb3) (fl/ . e4fb2) (fl- . e4fb1) (fl+ . e4fb0) (fl* . e4faf) (fixnum->flonum . e4fae) (&no-nans . e4ecc) (&no-infinities . e4ecb)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5152 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . e50b5) (string-ci-hash . e50b4) (string-hash . e50b3) (equal-hash . e50b2) (hashtable-equivalence-function . e50b1) (make-hashtable . e50b0) (hashtable-hash-function . e50af) (make-eqv-hashtable . e50ae) (make-eq-hashtable . e50ad) (hashtable? . e50ac) (hashtable-update! . e50ab) (hashtable-size . e50aa) (hashtable-set! . e50a9) (hashtable-ref . e50a8) (hashtable-mutable? . e50a7) (hashtable-keys . e50a6) (hashtable-entries . e50a5) (hashtable-delete! . e50a4) (hashtable-copy . e50a3) (hashtable-contains? . e50a2) (hashtable-clear! . e50a1)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5153 '(rnrs io ports) '(6) '() '() '() '((eof-object? . e5091) (eof-object . e5090) (current-error-port . e508f) (current-output-port . e508e) (current-input-port . e508d) (output-port? . e508c) (input-port? . e508b) (utf-8-codec . e508a) (utf-16-codec . e5089) (transcoder-error-handling-mode . e5088) (transcoder-eol-style . e5087) (transcoder-codec . e5086) (transcoded-port . e5085) (textual-port? . e5084) (string->bytevector . e5083) (standard-output-port . e5082) (standard-input-port . e5081) (standard-error-port . e5080) (set-port-position! . e507f) (put-u8 . e507e) (put-string . e507d) (put-datum . e507c) (put-char . e507b) (put-bytevector . e507a) (port? . e5079) (port-transcoder . e5078) (port-position . e5077) (port-has-set-port-position!? . e5076) (port-has-port-position? . e5075) (port-eof? . e5074) (output-port-buffer-mode . e5073) (open-string-output-port . e5072) (open-string-input-port . e5071) (open-file-output-port . e5070) (open-file-input/output-port . e506f) (open-file-input-port . e506e) (open-bytevector-output-port . e506d) (open-bytevector-input-port . e506c) (native-transcoder . e506b) (native-eol-style . e506a) (make-transcoder . e5069) (latin-1-codec . e5068) (make-i/o-write-error . e4b60) (make-i/o-read-error . e4b4b) (make-i/o-port-error . e4c01) (make-i/o-invalid-position-error . e4b77) (make-i/o-filename-error . e4b92) (make-i/o-file-protection-error . e4bab) (make-i/o-file-is-read-only-error . e4bc0) (make-i/o-file-does-not-exist-error . e4bea) (make-i/o-file-already-exists-error . e4bd5) (make-i/o-error . e4b36) (make-i/o-encoding-error . e4c31) (make-i/o-decoding-error . e4c1a) (make-custom-textual-output-port . e5067) (make-custom-textual-input/output-port . e5066) (make-custom-textual-input-port . e5065) (make-custom-binary-output-port . e5064) (make-custom-binary-input/output-port . e5063) (make-custom-binary-input-port . e5062) (lookahead-u8 . e5060) (lookahead-char . e505f) (i/o-write-error? . e4b62) (i/o-read-error? . e4b4d) (i/o-port-error? . e4c05) (i/o-invalid-position-error? . e4b7b) (i/o-filename-error? . e4b96) (i/o-file-protection-error? . e4bad) (i/o-file-is-read-only-error? . e4bc2) (i/o-file-does-not-exist-error? . e4bec) (i/o-file-already-exists-error? . e4bd7) (i/o-error? . e4b38) (i/o-error-position . e4b7d) (i/o-error-port . e4c07) (i/o-error-filename . e4b98) (i/o-encoding-error? . e4c35) (i/o-encoding-error-char . e4c37) (i/o-decoding-error? . e4c1c) (get-u8 . e505e) (get-string-n! . e505d) (get-string-n . e505c) (get-string-all . e505b) (get-line . e505a) (get-datum . e5059) (get-char . e5058) (get-bytevector-some . e5057) (get-bytevector-n! . e5056) (get-bytevector-n . e5055) (get-bytevector-all . e5054) (flush-output-port . e5053) (close-port . e5052) (call-with-string-output-port . e5031) (call-with-port . e5030) (call-with-bytevector-output-port . e502f) (bytevector->string . e502e) (buffer-mode? . e502d) (binary-port? . e502c) (&i/o-encoding . e4eca) (&i/o-decoding . e4ec9) (&i/o-port . e4ec8) (&i/o-file-does-not-exist . e4ec7) (&i/o-file-already-exists . e4ec6) (&i/o-file-is-read-only . e4ec5) (&i/o-file-protection . e4ec4) (&i/o-filename . e4ec3) (&i/o-invalid-position . e4ec2) (&i/o-write . e4ec1) (&i/o-read . e4ec0) (&i/o . e4ebf) (error-handling-mode . e4ea4) (file-options . e4ea3) (buffer-mode . e4ea2) (eol-style . e4ea1)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5154 '(rnrs enums) '(6) '() '() '() '((make-enumeration . e5028) (enum-set=? . e5027) (enum-set-universe . e5026) (enum-set-union . e5025) (enum-set-subset? . e5024) (enum-set-projection . e5023) (enum-set-member? . e5022) (enum-set-intersection . e5021) (enum-set-indexer . e5020) (enum-set-difference . e501f) (enum-set-constructor . e501e) (enum-set-complement . e501d) (enum-set->list . e501c) (define-enumeration . e4eaf)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5155 '(rnrs conditions) '(6) '() '() '() '((who-condition? . e4aac) (warning? . e4a24) (violation? . e4a63) (undefined-violation? . e4b23) (syntax-violation? . e4b0a) (syntax-violation-subform . e4b0e) (syntax-violation-form . e4b0c) (syntax-violation . e2f9e) (simple-conditions . e501b) (serious-condition? . e4a39) (non-continuable-violation? . e4ac3) (message-condition? . e4a0d) (make-who-condition . e4aa8) (make-warning . e4a22) (make-violation . e4a61) (make-undefined-violation . e4b21) (make-syntax-violation . e4b04) (make-serious-condition . e4a37) (make-non-continuable-violation . e4ac1) (make-message-condition . e4a09) (make-lexical-violation . e4aeb) (make-irritants-condition . e4a8d) (make-implementation-restriction-violation . e4ad6) (make-error . e4a4c) (make-assertion-violation . e4a76) (lexical-violation? . e4aed) (irritants-condition? . e4a91) (implementation-restriction-violation? . e4ad8) (error? . e4a4e) (condition-who . e4aae) (condition-predicate . e501a) (condition-message . e4a0f) (condition-irritants . e4a93) (condition-accessor . e5019) (condition . e5018) (assertion-violation? . e4a78) (condition? . e5017) (&undefined . e4ebe) (&syntax . e4ebd) (&lexical . e4ebc) (&implementation-restriction . e4ebb) (&non-continuable . e4eba) (&who . e4eb9) (&irritants . e4eb8) (&assertion . e4eb7) (&violation . e4eb6) (&error . e4eb5) (&serious . e4eb4) (&warning . e4eb3) (&message . e4eb2) (&condition . e4eb1) (define-condition-type . e4eb0)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5156 '(rnrs records inspection) '(6) '() '() '() '((record? . e50c4) (record-type-uid . e50c3) (record-type-sealed? . e50c2) (record-type-parent . e50c1) (record-type-opaque? . e50c0) (record-type-name . e50bf) (record-type-generative? . e50be) (record-type-field-names . e50bd) (record-rtd . e50bc) (record-field-mutable? . e50bb)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5157 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . e50cb) (record-predicate . e50ca) (record-mutator . e50c9) (record-constructor . e50c8) (record-accessor . e50c7) (make-record-type-descriptor . e50c6) (make-record-constructor-descriptor . e50c5)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5158 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . e4eae) (parent-rtd . e4ead) (nongenerative . e4eac) (opaque . e4eab) (sealed . e4eaa) (protocol . e4ea9) (parent . e4ea8) (immutable . e4ea7) (mutable . e4ea6) (fields . e4ea5) (record-constructor-descriptor . e4e84) (record-type-descriptor . e4e83)) '() values values '#f '#f '#t '#f) (e2acd@e296c@install-library 'e5159 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . e4c65) (&no-nans-rtd . e4c63) (&no-infinities-rcd . e4c50) (&no-infinities-rtd . e4c4e) (&i/o-encoding-rcd . e4c3b) (&i/o-encoding-rtd . e4c39) (&i/o-decoding-rcd . e4c20) (&i/o-decoding-rtd . e4c1e) (&i/o-port-rcd . e4c0b) (&i/o-port-rtd . e4c09) (&i/o-file-does-not-exist-rcd . e4bf0) (&i/o-file-does-not-exist-rtd . e4bee) (&i/o-file-already-exists-rcd . e4bdb) (&i/o-file-already-exists-rtd . e4bd9) (&i/o-file-is-read-only-rcd . e4bc6) (&i/o-file-is-read-only-rtd . e4bc4) (&i/o-file-protection-rcd . e4bb1) (&i/o-file-protection-rtd . e4baf) (&i/o-filename-rcd . e4b9c) (&i/o-filename-rtd . e4b9a) (&i/o-invalid-position-rcd . e4b81) (&i/o-invalid-position-rtd . e4b7f) (&i/o-write-rcd . e4b66) (&i/o-write-rtd . e4b64) (&i/o-read-rcd . e4b51) (&i/o-read-rtd . e4b4f) (&i/o-rcd . e4b3c) (&i/o-rtd . e4b3a) (&undefined-rcd . e4b27) (&undefined-rtd . e4b25) (&syntax-rcd . e4b12) (&syntax-rtd . e4b10) (&lexical-rcd . e4af1) (&lexical-rtd . e4aef) (&implementation-restriction-rcd . e4adc) (&implementation-restriction-rtd . e4ada) (&non-continuable-rcd . e4ac7) (&non-continuable-rtd . e4ac5) (&who-rcd . e4ab2) (&who-rtd . e4ab0) (&irritants-rcd . e4a97) (&irritants-rtd . e4a95) (&assertion-rcd . e4a7c) (&assertion-rtd . e4a7a) (&violation-rcd . e4a67) (&violation-rtd . e4a65) (&error-rcd . e4a52) (&error-rtd . e4a50) (&serious-rcd . e4a3d) (&serious-rtd . e4a3b) (&warning-rcd . e4a28) (&warning-rtd . e4a26) (&message-rcd . e4a13) (&message-rtd . e4a11) (&condition-rcd . e49b4) (&condition-rtd . e49b2) (syntax-error . e2f9a) (syntax-dispatch . e2eb5) (pretty-print . e5139) (eval-core . e5138) (set-symbol-value! . e5137) (symbol-value . e5136) (gensym . e5135) (void . e5134) (load . e4d72) (interaction-environment . e2faa) (char-ready? . e5133) (regexp? . e5132) (read-line . e5131) (ungensym . e5130) (alist->eq-hash-table . e512f) (assoc-ref . e512e) (print . e512d) (format . e512c) (host-os . e512b) (library-path . e294b) (standard-library-path . e512a) (file-newer? . e5129) (stat-mtime . e5128) (write-to-file . e5127) (file->list . e5126) (file->string . e5125) (digit->integer . e5124) (call-with-string-input-port . e5123) (call-with-string-io . e5122) (string-split . e5121) (bytevector-for-each . e5120) (string->regexp . e511f) (rxmatch . e511e) (regexp-replace-all . e511d) (hashtable-for-each . e511c) (call-process . e511b) (local-tz-offset . e511a) (microseconds . e5119) (readdir . e5118) (set-current-directory! . e5117) (expand-path . e5116) (current-directory . e5115) (%spawn . e5114) (%waitpid . e5113) (%ffi-supported? . e5112) (%ffi-pointer-ref . e5111) (%ffi-pointer->string . e5110) (%ffi-call->string-or-zero . e510f) (%ffi-call->double . e510e) (%ffi-call->void* . e510d) (%ffi-call->void . e510c) (%ffi-call->int . e510b) (%ffi-lookup . e510a) (%ffi-open . e5109) (%fork . e5108) (%pipe . e5107) (p . e5106) (open-output-string . e5105) (get-output-string . e5104) (get-environment-variables . e5103) (get-environment-variable . e5102) (get-timeofday . e5101) (get-command-line . e5100) (sys-display . e50ff) (mosh-executable-path . e50fe) (make-file-options . e50fd) (source-info . e50fc) (make-compiler-instruction . e50fb) (make-instruction . e50fa) (set-source-info! . e50f9) (bignum? . e50f8) (fast-equal? . e50f7) (fasl-read . e50f6) (fasl-write . e50f5) (time-usage . e50f4) (os-constant . e50f3) (make-parameter . e277e) (socket-port . e50f2) (socket-shutdown . e50f1) (socket-close . e50f0) (socket-send . e50ef) (socket-recv! . e50ee) (socket-recv . e50ed) (make-server-socket . e50ec) (make-client-socket . e50eb) (socket-accept . e50ea) (socket? . e50e9) (string-upcase . e50e8) (string-titlecase . e50e7) (string-normalize-nfkd . e50e6) (string-normalize-nfkc . e50e5) (string-normalize-nfd . e50e4) (string-normalize-nfc . e50e3) (string-foldcase . e50e2) (string-downcase . e50e1) (string-ci>? . e50e0) (string-ci>=? . e50df) (string-ci=? . e50de) (string-ci<? . e50dd) (string-ci<=? . e50dc) (char-whitespace? . e50db) (char-upper-case? . e50da) (char-title-case? . e50d9) (char-numeric? . e50d8) (char-lower-case? . e50d7) (char-general-category . e50d6) (char-upcase . e50d5) (char-titlecase . e50d4) (char-foldcase . e50d3) (char-downcase . e50d2) (char-ci>? . e50d1) (char-ci>=? . e50d0) (char-ci=? . e50cf) (char-ci<? . e50ce) (char-ci<=? . e50cd) (char-alphabetic? . e50cc) (make-variable-transformer . e2ce2) (identifier? . e2fa0) (generate-temporaries . e2f8c) (free-identifier=? . e2f8e) (syntax->datum . e2fa4) (datum->syntax . e2fa2) (bound-identifier=? . e2f90) (record-type-descriptor? . e50cb) (record-predicate . e50ca) (record-mutator . e50c9) (record-constructor . e50c8) (record-accessor . e50c7) (make-record-type-descriptor . e50c6) (make-record-constructor-descriptor . e50c5) (record? . e50c4) (record-type-uid . e50c3) (record-type-sealed? . e50c2) (record-type-parent . e50c1) (record-type-opaque? . e50c0) (record-type-name . e50bf) (record-type-generative? . e50be) (record-type-field-names . e50bd) (record-rtd . e50bc) (record-field-mutable? . e50bb) (delete-file . e50ba) (file-exists? . e50b9) (vector-sort! . e50b8) (vector-sort . e50b7) (list-sort . e50b6) (symbol-hash . e50b5) (string-ci-hash . e50b4) (string-hash . e50b3) (equal-hash . e50b2) (hashtable-equivalence-function . e50b1) (make-hashtable . e50b0) (hashtable-hash-function . e50af) (make-eqv-hashtable . e50ae) (make-eq-hashtable . e50ad) (hashtable? . e50ac) (hashtable-update! . e50ab) (hashtable-size . e50aa) (hashtable-set! . e50a9) (hashtable-ref . e50a8) (hashtable-mutable? . e50a7) (hashtable-keys . e50a6) (hashtable-entries . e50a5) (hashtable-delete! . e50a4) (hashtable-copy . e50a3) (hashtable-contains? . e50a2) (hashtable-clear! . e50a1) (call-with-output-file . e50a0) (call-with-input-file . e509f) (write-char . e509e) (write . e509d) (with-output-to-file . e509c) (with-input-from-file . e509b) (read-char . e509a) (read . e5099) (peek-char . e5098) (open-output-file . e5097) (open-input-file . e5096) (newline . e5095) (display . e5094) (close-output-port . e5093) (close-input-port . e5092) (eof-object? . e5091) (eof-object . e5090) (current-error-port . e508f) (current-output-port . e508e) (current-input-port . e508d) (output-port? . e508c) (input-port? . e508b) (utf-8-codec . e508a) (utf-16-codec . e5089) (transcoder-error-handling-mode . e5088) (transcoder-eol-style . e5087) (transcoder-codec . e5086) (transcoded-port . e5085) (textual-port? . e5084) (string->bytevector . e5083) (standard-output-port . e5082) (standard-input-port . e5081) (standard-error-port . e5080) (set-port-position! . e507f) (put-u8 . e507e) (put-string . e507d) (put-datum . e507c) (put-char . e507b) (put-bytevector . e507a) (port? . e5079) (port-transcoder . e5078) (port-position . e5077) (port-has-set-port-position!? . e5076) (port-has-port-position? . e5075) (port-eof? . e5074) (output-port-buffer-mode . e5073) (open-string-output-port . e5072) (open-string-input-port . e5071) (open-file-output-port . e5070) (open-file-input/output-port . e506f) (open-file-input-port . e506e) (open-bytevector-output-port . e506d) (open-bytevector-input-port . e506c) (native-transcoder . e506b) (native-eol-style . e506a) (make-transcoder . e5069) (latin-1-codec . e5068) (make-i/o-write-error . e4b60) (make-i/o-read-error . e4b4b) (make-i/o-port-error . e4c01) (make-i/o-invalid-position-error . e4b77) (make-i/o-filename-error . e4b92) (make-i/o-file-protection-error . e4bab) (make-i/o-file-is-read-only-error . e4bc0) (make-i/o-file-does-not-exist-error . e4bea) (make-i/o-file-already-exists-error . e4bd5) (make-i/o-error . e4b36) (make-i/o-encoding-error . e4c31) (make-i/o-decoding-error . e4c1a) (make-custom-textual-output-port . e5067) (make-custom-textual-input/output-port . e5066) (make-custom-textual-input-port . e5065) (make-custom-binary-output-port . e5064) (make-custom-binary-input/output-port . e5063) (make-custom-binary-input-port . e5062) (make-bytevector . e5061) (lookahead-u8 . e5060) (lookahead-char . e505f) (i/o-write-error? . e4b62) (i/o-read-error? . e4b4d) (i/o-port-error? . e4c05) (i/o-invalid-position-error? . e4b7b) (i/o-filename-error? . e4b96) (i/o-file-protection-error? . e4bad) (i/o-file-is-read-only-error? . e4bc2) (i/o-file-does-not-exist-error? . e4bec) (i/o-file-already-exists-error? . e4bd7) (i/o-error? . e4b38) (i/o-error-position . e4b7d) (i/o-error-port . e4c07) (i/o-error-filename . e4b98) (i/o-encoding-error? . e4c35) (i/o-encoding-error-char . e4c37) (i/o-decoding-error? . e4c1c) (get-u8 . e505e) (get-string-n! . e505d) (get-string-n . e505c) (get-string-all . e505b) (get-line . e505a) (get-datum . e5059) (get-char . e5058) (get-bytevector-some . e5057) (get-bytevector-n! . e5056) (get-bytevector-n . e5055) (get-bytevector-all . e5054) (flush-output-port . e5053) (close-port . e5052) (scheme-report-environment . e2f7a) (quotient . e5051) (null-environment . e2f78) (remainder . e5050) (modulo . e504f) (inexact->exact . e504e) (force . e504d) (exact->inexact . e504c) (make-promise . e504b) (exit . e504a) (command-line . e4d6c) (string-fill! . e5049) (string-set! . e5048) (set-cdr! . e5047) (set-car! . e5046) (remove . e5045) (remv . e5044) (remp . e5043) (remq . e5042) (partition . e5041) (memv . e5040) (memq . e503f) (memp . e503e) (member . e503d) (exists . e503c) (for-all . e503b) (fold-right . e503a) (fold-left . e5039) (find . e5038) (filter . e5037) (cons* . e5036) (assv . e5035) (assq . e5034) (assp . e5033) (assoc . e5032) (call-with-string-output-port . e5031) (call-with-port . e5030) (call-with-bytevector-output-port . e502f) (bytevector->string . e502e) (buffer-mode? . e502d) (binary-port? . e502c) (with-exception-handler . e502b) (raise-continuable . e502a) (raise . e5029) (eval . e2f7e) (environment . e2f76) (make-enumeration . e5028) (enum-set=? . e5027) (enum-set-universe . e5026) (enum-set-union . e5025) (enum-set-subset? . e5024) (enum-set-projection . e5023) (enum-set-member? . e5022) (enum-set-intersection . e5021) (enum-set-indexer . e5020) (enum-set-difference . e501f) (enum-set-constructor . e501e) (enum-set-complement . e501d) (enum-set->list . e501c) (who-condition? . e4aac) (warning? . e4a24) (violation? . e4a63) (undefined-violation? . e4b23) (syntax-violation? . e4b0a) (syntax-violation-subform . e4b0e) (syntax-violation-form . e4b0c) (syntax-violation . e2f9e) (simple-conditions . e501b) (serious-condition? . e4a39) (non-continuable-violation? . e4ac3) (message-condition? . e4a0d) (make-who-condition . e4aa8) (make-warning . e4a22) (make-violation . e4a61) (make-undefined-violation . e4b21) (make-syntax-violation . e4b04) (make-serious-condition . e4a37) (make-non-continuable-violation . e4ac1) (make-message-condition . e4a09) (make-lexical-violation . e4aeb) (make-irritants-condition . e4a8d) (make-implementation-restriction-violation . e4ad6) (make-error . e4a4c) (make-assertion-violation . e4a76) (lexical-violation? . e4aed) (irritants-condition? . e4a91) (implementation-restriction-violation? . e4ad8) (error? . e4a4e) (condition-who . e4aae) (condition-predicate . e501a) (condition-message . e4a0f) (condition-irritants . e4a93) (condition-accessor . e5019) (condition . e5018) (assertion-violation? . e4a78) (condition? . e5017) (utf32->string . e5016) (utf16->string . e5015) (utf8->string . e5014) (uint-list->bytevector . e5013) (u8-list->bytevector . e5012) (string->utf8 . e5011) (string->utf32 . e5010) (string->utf16 . e500f) (sint-list->bytevector . e500e) (native-endianness . e500d) (bytevector? . e500c) (bytevector=? . e500b) (bytevector-uint-set! . e500a) (bytevector-uint-ref . e5009) (bytevector-u8-set! . e5008) (bytevector-u8-ref . e5007) (bytevector-u64-set! . e5006) (bytevector-u64-ref . e5005) (bytevector-u64-native-set! . e5004) (bytevector-u64-native-ref . e5003) (bytevector-u32-set! . e5002) (bytevector-u32-ref . e5001) (bytevector-u32-native-set! . e5000) (bytevector-u32-native-ref . e4fff) (bytevector-u16-set! . e4ffe) (bytevector-u16-ref . e4ffd) (bytevector-u16-native-set! . e4ffc) (bytevector-u16-native-ref . e4ffb) (bytevector-sint-set! . e4ffa) (bytevector-sint-ref . e4ff9) (bytevector-s8-set! . e4ff8) (bytevector-s8-ref . e4ff7) (bytevector-s64-set! . e4ff6) (bytevector-s64-ref . e4ff5) (bytevector-s64-native-set! . e4ff4) (bytevector-s64-native-ref . e4ff3) (bytevector-s32-set! . e4ff2) (bytevector-s32-ref . e4ff1) (bytevector-s32-native-set! . e4ff0) (bytevector-s32-native-ref . e4fef) (bytevector-s16-set! . e4fee) (bytevector-s16-ref . e4fed) (bytevector-s16-native-set! . e4fec) (bytevector-s16-native-ref . e4feb) (bytevector-length . e4fea) (bytevector-ieee-single-ref . e4fe9) (bytevector-ieee-single-set! . e4fe8) (bytevector-ieee-single-native-set! . e4fe7) (bytevector-ieee-single-native-ref . e4fe6) (bytevector-ieee-double-set! . e4fe5) (bytevector-ieee-double-ref . e4fe4) (bytevector-ieee-double-native-set! . e4fe3) (bytevector-ieee-double-native-ref . e4fe2) (bytevector-fill! . e4fe1) (bytevector-copy! . e4fe0) (bytevector-copy . e4fdf) (bytevector->uint-list . e4fde) (bytevector->u8-list . e4fdd) (bytevector->sint-list . e4fdc) (no-nans-violation? . e4c61) (no-infinities-violation? . e4c4c) (make-no-nans-violation . e4c5f) (make-no-infinities-violation . e4c4a) (real->flonum . e4fdb) (flzero? . e4fda) (fltruncate . e4fd9) (fltan . e4fd8) (flsqrt . e4fd7) (flsin . e4fd6) (flround . e4fd5) (flpositive? . e4fd4) (flonum? . e4fd3) (flodd? . e4fd2) (flnumerator . e4fd1) (flnegative? . e4fd0) (flnan? . e4fcf) (flmod0 . e4fce) (flmod . e4fcd) (flmin . e4fcc) (flmax . e4fcb) (fllog . e4fca) (flinteger? . e4fc9) (flinfinite? . e4fc8) (flfloor . e4fc7) (flfinite? . e4fc6) (flexpt . e4fc5) (flexp . e4fc4) (fleven? . e4fc3) (fldiv0-and-mod0 . e4fc2) (fldiv0 . e4fc1) (fldiv-and-mod . e4fc0) (fldiv . e4fbf) (fldenominator . e4fbe) (flcos . e4fbd) (flceiling . e4fbc) (flatan . e4fbb) (flasin . e4fba) (flacos . e4fb9) (flabs . e4fb8) (fl>? . e4fb7) (fl>=? . e4fb6) (fl=? . e4fb5) (fl<? . e4fb4) (fl<=? . e4fb3) (fl/ . e4fb2) (fl- . e4fb1) (fl+ . e4fb0) (fl* . e4faf) (fixnum->flonum . e4fae) (fxzero? . e4fad) (fxxor . e4fac) (fxrotate-bit-field . e4fab) (fxreverse-bit-field . e4faa) (fxpositive? . e4fa9) (fxodd? . e4fa8) (fxnot . e4fa7) (fxnegative? . e4fa6) (fxmod0 . e4fa5) (fxmod . e4fa4) (fxmin . e4fa3) (fxmax . e4fa2) (fxlength . e4fa1) (fxior . e4fa0) (fxif . e4f9f) (fxfirst-bit-set . e4f9e) (fxeven? . e4f9d) (fxdiv0-and-mod0 . e4f9c) (fxdiv0 . e4f9b) (fxdiv-and-mod . e4f9a) (fxdiv . e4f99) (fxcopy-bit-field . e4f98) (fxcopy-bit . e4f97) (fxbit-set? . e4f96) (fxbit-field . e4f95) (fxbit-count . e4f94) (fxarithmetic-shift-right . e4f93) (fxarithmetic-shift-left . e4f92) (fxarithmetic-shift . e4f91) (fxand . e4f90) (fx>? . e4f8f) (fx>=? . e4f8e) (fx=? . e4f8d) (fx<? . e4f8c) (fx<=? . e4f8b) (fx-/carry . e4f8a) (fx- . e4f89) (fx+/carry . e4f88) (fx+ . e4f87) (fx*/carry . e4f86) (fx* . e4f85) (greatest-fixnum . e4f84) (least-fixnum . e4f83) (fixnum-width . e4f82) (fixnum? . e4f81) (bitwise-rotate-bit-field . e4f80) (bitwise-reverse-bit-field . e4f7f) (bitwise-length . e4f7e) (bitwise-if . e4f7d) (bitwise-first-bit-set . e4f7c) (bitwise-copy-bit-field . e4f7b) (bitwise-copy-bit . e4f7a) (bitwise-bit-set? . e4f79) (bitwise-bit-field . e4f78) (bitwise-bit-count . e4f77) (bitwise-xor . e4f76) (bitwise-ior . e4f75) (bitwise-and . e4f74) (bitwise-not . e4f73) (bitwise-arithmetic-shift-right . e4f72) (bitwise-arithmetic-shift-left . e4f71) (bitwise-arithmetic-shift . e4f70) (zero? . e4f6f) (vector? . e4f6e) (vector-set! . e4f6d) (vector-ref . e4f6c) (vector-map . e4f6b) (vector-length . e4f6a) (vector-for-each . e4f69) (vector-fill! . e4f68) (vector->list . e4f67) (vector . e4f66) (values . e4f65) (truncate . e4f64) (tan . e4f63) (symbol? . e4f62) (symbol=? . e4f61) (symbol->string . e4f60) (substring . e4f5f) (string? . e4f5e) (string>? . e4f5d) (string>=? . e4f5c) (string=? . e4f5b) (string<? . e4f5a) (string<=? . e4f59) (string-ref . e4f58) (string-length . e4f57) (string-for-each . e4f56) (string-copy . e4f55) (string-append . e4f54) (string->symbol . e4f53) (string->number . e4f52) (string->list . e4f51) (string . e4f50) (sqrt . e4f4f) (sin . e4f4e) (round . e4f4d) (reverse . e4f4c) (real? . e4f4b) (real-valued? . e4f4a) (real-part . e4f49) (rationalize . e4f48) (rational? . e4f47) (rational-valued? . e4f46) (procedure? . e4f45) (positive? . e4f44) (pair? . e4f43) (odd? . e4f42) (numerator . e4f41) (number? . e4f40) (number->string . e4f3f) (null? . e4f3e) (not . e4f3d) (negative? . e4f3c) (nan? . e4f3b) (min . e4f3a) (max . e4f39) (map . e4f38) (make-vector . e4f37) (make-string . e4f36) (make-rectangular . e4f35) (make-polar . e4f34) (magnitude . e4f33) (log . e4f32) (list? . e4f31) (list-tail . e4f30) (list-ref . e4f2f) (list->vector . e4f2e) (list->string . e4f2d) (list . e4f2c) (length . e4f2b) (lcm . e4f2a) (integer? . e4f29) (integer-valued? . e4f28) (integer->char . e4f27) (infinite? . e4f26) (inexact? . e4f25) (inexact . e4f24) (imag-part . e4f23) (gcd . e4f22) (for-each . e4f21) (floor . e4f20) (finite? . e4f1f) (expt . e4f1e) (exp . e4f1d) (exact? . e4f1c) (exact-integer-sqrt . e4f1b) (exact . e4f1a) (even? . e4f19) (error . e4f18) (eqv? . e4f17) (equal? . e4f16) (eq? . e4f15) (dynamic-wind . e4f14) (div0-and-mod0 . e4f13) (mod0 . e4f12) (div0 . e4f11) (div-and-mod . e4f10) (mod . e4f0f) (div . e4f0e) (denominator . e4f0d) (cos . e4f0c) (cons . e4f0b) (complex? . e4f0a) (char? . e4f09) (char>? . e4f08) (char>=? . e4f07) (char=? . e4f06) (char<? . e4f05) (char<=? . e4f04) (char->integer . e4f03) (ceiling . e4f02) (call-with-values . e4f01) (call/cc . e4f00) (call-with-current-continuation . e4eff) (cddddr . e4efe) (cdddar . e4efd) (cddadr . e4efc) (cddaar . e4efb) (cdaddr . e4efa) (cdadar . e4ef9) (cdaadr . e4ef8) (cdaaar . e4ef7) (cadddr . e4ef6) (caddar . e4ef5) (cadadr . e4ef4) (cadaar . e4ef3) (caaddr . e4ef2) (caadar . e4ef1) (caaadr . e4ef0) (caaaar . e4eef) (cdddr . e4eee) (cddar . e4eed) (cdadr . e4eec) (cdaar . e4eeb) (caddr . e4eea) (cadar . e4ee9) (caadr . e4ee8) (caaar . e4ee7) (cddr . e4ee6) (cdar . e4ee5) (cadr . e4ee4) (caar . e4ee3) (cdr . e4ee2) (car . e4ee1) (boolean? . e4ee0) (boolean=? . e4edf) (atan . e4ede) (assertion-violation . e4edd) (assertion-error . e2f98) (asin . e4edc) (apply . e4edb) (append . e4eda) (angle . e4ed9) (acos . e4ed8) (abs . e4ed7) (/ . e4ed6) (* . e4ed5) (- . e4ed4) (+ . e4ed3) (>= . e4ed2) (> . e4ed1) (= . e4ed0) (<= . e4ecf) (< . e4ece) (library . e4ecd) (&no-nans . e4ecc) (&no-infinities . e4ecb) (&i/o-encoding . e4eca) (&i/o-decoding . e4ec9) (&i/o-port . e4ec8) (&i/o-file-does-not-exist . e4ec7) (&i/o-file-already-exists . e4ec6) (&i/o-file-is-read-only . e4ec5) (&i/o-file-protection . e4ec4) (&i/o-filename . e4ec3) (&i/o-invalid-position . e4ec2) (&i/o-write . e4ec1) (&i/o-read . e4ec0) (&i/o . e4ebf) (&undefined . e4ebe) (&syntax . e4ebd) (&lexical . e4ebc) (&implementation-restriction . e4ebb) (&non-continuable . e4eba) (&who . e4eb9) (&irritants . e4eb8) (&assertion . e4eb7) (&violation . e4eb6) (&error . e4eb5) (&serious . e4eb4) (&warning . e4eb3) (&message . e4eb2) (&condition . e4eb1) (define-condition-type . e4eb0) (define-enumeration . e4eaf) (define-record-type . e4eae) (parent-rtd . e4ead) (nongenerative . e4eac) (opaque . e4eab) (sealed . e4eaa) (protocol . e4ea9) (parent . e4ea8) (immutable . e4ea7) (mutable . e4ea6) (fields . e4ea5) (error-handling-mode . e4ea4) (file-options . e4ea3) (buffer-mode . e4ea2) (eol-style . e4ea1) (guard . e4ea0) (trace-define . e4e9f) (trace-lambda . e4e9e) (unsyntax-splicing . e4e9d) (unsyntax . e4e9c) (unquote-splicing . e4e9b) (unquote . e4e9a) (_ . e4e99) (else . e4e98) (=> . e4e97) (... . e4e96) (assert . e4e95) (endianness . e4e94) (delay . e4e93) (time . e4e92) (do . e4e91) (cond . e4e90) (let* . e4e8f) (let . e4e8e) (let*-values . e4e8d) (let-values . e4e8c) (identifier-syntax . e4e8b) (with-syntax . e4e8a) (quasisyntax . e4e89) (quasiquote . e4e88) (syntax-rules . e4e87) (include . e4e86) (define-struct . e4e85) (record-constructor-descriptor . e4e84) (record-type-descriptor . e4e83) (case . e4e82) (parameterize . e4e81) (unless . e4e80) (when . e4e7f) (or . e4e7e) (and . e4e7d) (if . e4e7c) (letrec* . e4e7b) (letrec . e4e7a) (type-descriptor . e4e79) (case-lambda . e4e78) (lambda . e4e77) (syntax . e4e76) (syntax-case . e4e75) (quote . e4e74) (foreign-call . e4e73) (letrec-syntax . e4e72) (let-syntax . e4e71) (set! . e4e70) (import . e4e6f) (begin . e4e6e) (module . e4e6d) (define-syntax . e4e6c) (define . e4e6b)) '((e4c65 core-prim . &no-nans-rcd) (e4c63 core-prim . &no-nans-rtd) (e4c50 core-prim . &no-infinities-rcd) (e4c4e core-prim . &no-infinities-rtd) (e4c3b core-prim . &i/o-encoding-rcd) (e4c39 core-prim . &i/o-encoding-rtd) (e4c20 core-prim . &i/o-decoding-rcd) (e4c1e core-prim . &i/o-decoding-rtd) (e4c0b core-prim . &i/o-port-rcd) (e4c09 core-prim . &i/o-port-rtd) (e4bf0 core-prim . &i/o-file-does-not-exist-rcd) (e4bee core-prim . &i/o-file-does-not-exist-rtd) (e4bdb core-prim . &i/o-file-already-exists-rcd) (e4bd9 core-prim . &i/o-file-already-exists-rtd) (e4bc6 core-prim . &i/o-file-is-read-only-rcd) (e4bc4 core-prim . &i/o-file-is-read-only-rtd) (e4bb1 core-prim . &i/o-file-protection-rcd) (e4baf core-prim . &i/o-file-protection-rtd) (e4b9c core-prim . &i/o-filename-rcd) (e4b9a core-prim . &i/o-filename-rtd) (e4b81 core-prim . &i/o-invalid-position-rcd) (e4b7f core-prim . &i/o-invalid-position-rtd) (e4b66 core-prim . &i/o-write-rcd) (e4b64 core-prim . &i/o-write-rtd) (e4b51 core-prim . &i/o-read-rcd) (e4b4f core-prim . &i/o-read-rtd) (e4b3c core-prim . &i/o-rcd) (e4b3a core-prim . &i/o-rtd) (e4b27 core-prim . &undefined-rcd) (e4b25 core-prim . &undefined-rtd) (e4b12 core-prim . &syntax-rcd) (e4b10 core-prim . &syntax-rtd) (e4af1 core-prim . &lexical-rcd) (e4aef core-prim . &lexical-rtd) (e4adc core-prim . &implementation-restriction-rcd) (e4ada core-prim . &implementation-restriction-rtd) (e4ac7 core-prim . &non-continuable-rcd) (e4ac5 core-prim . &non-continuable-rtd) (e4ab2 core-prim . &who-rcd) (e4ab0 core-prim . &who-rtd) (e4a97 core-prim . &irritants-rcd) (e4a95 core-prim . &irritants-rtd) (e4a7c core-prim . &assertion-rcd) (e4a7a core-prim . &assertion-rtd) (e4a67 core-prim . &violation-rcd) (e4a65 core-prim . &violation-rtd) (e4a52 core-prim . &error-rcd) (e4a50 core-prim . &error-rtd) (e4a3d core-prim . &serious-rcd) (e4a3b core-prim . &serious-rtd) (e4a28 core-prim . &warning-rcd) (e4a26 core-prim . &warning-rtd) (e4a13 core-prim . &message-rcd) (e4a11 core-prim . &message-rtd) (e49b4 core-prim . &condition-rcd) (e49b2 core-prim . &condition-rtd) (e2f9a core-prim . syntax-error) (e2eb5 core-prim . syntax-dispatch) (e5139 core-prim . pretty-print) (e5138 core-prim . eval-core) (e5137 core-prim . set-symbol-value!) (e5136 core-prim . symbol-value) (e5135 core-prim . gensym) (e5134 core-prim . void) (e4d72 core-prim . load) (e2faa core-prim . interaction-environment) (e5133 core-prim . char-ready?) (e5132 core-prim . regexp?) (e5131 core-prim . read-line) (e5130 core-prim . ungensym) (e512f core-prim . alist->eq-hash-table) (e512e core-prim . assoc-ref) (e512d core-prim . print) (e512c core-prim . format) (e512b core-prim . host-os) (e294b core-prim . library-path) (e512a core-prim . standard-library-path) (e5129 core-prim . file-newer?) (e5128 core-prim . stat-mtime) (e5127 core-prim . write-to-file) (e5126 core-prim . file->list) (e5125 core-prim . file->string) (e5124 core-prim . digit->integer) (e5123 core-prim . call-with-string-input-port) (e5122 core-prim . call-with-string-io) (e5121 core-prim . string-split) (e5120 core-prim . bytevector-for-each) (e511f core-prim . string->regexp) (e511e core-prim . rxmatch) (e511d core-prim . regexp-replace-all) (e511c core-prim . hashtable-for-each) (e511b core-prim . call-process) (e511a core-prim . local-tz-offset) (e5119 core-prim . microseconds) (e5118 core-prim . readdir) (e5117 core-prim . set-current-directory!) (e5116 core-prim . expand-path) (e5115 core-prim . current-directory) (e5114 core-prim . %spawn) (e5113 core-prim . %waitpid) (e5112 core-prim . %ffi-supported?) (e5111 core-prim . %ffi-pointer-ref) (e5110 core-prim . %ffi-pointer->string) (e510f core-prim . %ffi-call->string-or-zero) (e510e core-prim . %ffi-call->double) (e510d core-prim . %ffi-call->void*) (e510c core-prim . %ffi-call->void) (e510b core-prim . %ffi-call->int) (e510a core-prim . %ffi-lookup) (e5109 core-prim . %ffi-open) (e5108 core-prim . %fork) (e5107 core-prim . %pipe) (e5106 core-prim . p) (e5105 core-prim . open-output-string) (e5104 core-prim . get-output-string) (e5103 core-prim . get-environment-variables) (e5102 core-prim . get-environment-variable) (e5101 core-prim . get-timeofday) (e5100 core-prim . get-command-line) (e50ff core-prim . sys-display) (e50fe core-prim . mosh-executable-path) (e50fd core-prim . make-file-options) (e50fc core-prim . source-info) (e50fb core-prim . make-compiler-instruction) (e50fa core-prim . make-instruction) (e50f9 core-prim . set-source-info!) (e50f8 core-prim . bignum?) (e50f7 core-prim . fast-equal?) (e50f6 core-prim . fasl-read) (e50f5 core-prim . fasl-write) (e50f4 core-prim . time-usage) (e50f3 core-prim . os-constant) (e277e core-prim . make-parameter) (e50f2 core-prim . socket-port) (e50f1 core-prim . socket-shutdown) (e50f0 core-prim . socket-close) (e50ef core-prim . socket-send) (e50ee core-prim . socket-recv!) (e50ed core-prim . socket-recv) (e50ec core-prim . make-server-socket) (e50eb core-prim . make-client-socket) (e50ea core-prim . socket-accept) (e50e9 core-prim . socket?) (e50e8 core-prim . string-upcase) (e50e7 core-prim . string-titlecase) (e50e6 core-prim . string-normalize-nfkd) (e50e5 core-prim . string-normalize-nfkc) (e50e4 core-prim . string-normalize-nfd) (e50e3 core-prim . string-normalize-nfc) (e50e2 core-prim . string-foldcase) (e50e1 core-prim . string-downcase) (e50e0 core-prim . string-ci>?) (e50df core-prim . string-ci>=?) (e50de core-prim . string-ci=?) (e50dd core-prim . string-ci<?) (e50dc core-prim . string-ci<=?) (e50db core-prim . char-whitespace?) (e50da core-prim . char-upper-case?) (e50d9 core-prim . char-title-case?) (e50d8 core-prim . char-numeric?) (e50d7 core-prim . char-lower-case?) (e50d6 core-prim . char-general-category) (e50d5 core-prim . char-upcase) (e50d4 core-prim . char-titlecase) (e50d3 core-prim . char-foldcase) (e50d2 core-prim . char-downcase) (e50d1 core-prim . char-ci>?) (e50d0 core-prim . char-ci>=?) (e50cf core-prim . char-ci=?) (e50ce core-prim . char-ci<?) (e50cd core-prim . char-ci<=?) (e50cc core-prim . char-alphabetic?) (e2ce2 core-prim . make-variable-transformer) (e2fa0 core-prim . identifier?) (e2f8c core-prim . generate-temporaries) (e2f8e core-prim . free-identifier=?) (e2fa4 core-prim . syntax->datum) (e2fa2 core-prim . datum->syntax) (e2f90 core-prim . bound-identifier=?) (e50cb core-prim . record-type-descriptor?) (e50ca core-prim . record-predicate) (e50c9 core-prim . record-mutator) (e50c8 core-prim . record-constructor) (e50c7 core-prim . record-accessor) (e50c6 core-prim . make-record-type-descriptor) (e50c5 core-prim . make-record-constructor-descriptor) (e50c4 core-prim . record?) (e50c3 core-prim . record-type-uid) (e50c2 core-prim . record-type-sealed?) (e50c1 core-prim . record-type-parent) (e50c0 core-prim . record-type-opaque?) (e50bf core-prim . record-type-name) (e50be core-prim . record-type-generative?) (e50bd core-prim . record-type-field-names) (e50bc core-prim . record-rtd) (e50bb core-prim . record-field-mutable?) (e50ba core-prim . delete-file) (e50b9 core-prim . file-exists?) (e50b8 core-prim . vector-sort!) (e50b7 core-prim . vector-sort) (e50b6 core-prim . list-sort) (e50b5 core-prim . symbol-hash) (e50b4 core-prim . string-ci-hash) (e50b3 core-prim . string-hash) (e50b2 core-prim . equal-hash) (e50b1 core-prim . hashtable-equivalence-function) (e50b0 core-prim . make-hashtable) (e50af core-prim . hashtable-hash-function) (e50ae core-prim . make-eqv-hashtable) (e50ad core-prim . make-eq-hashtable) (e50ac core-prim . hashtable?) (e50ab core-prim . hashtable-update!) (e50aa core-prim . hashtable-size) (e50a9 core-prim . hashtable-set!) (e50a8 core-prim . hashtable-ref) (e50a7 core-prim . hashtable-mutable?) (e50a6 core-prim . hashtable-keys) (e50a5 core-prim . hashtable-entries) (e50a4 core-prim . hashtable-delete!) (e50a3 core-prim . hashtable-copy) (e50a2 core-prim . hashtable-contains?) (e50a1 core-prim . hashtable-clear!) (e50a0 core-prim . call-with-output-file) (e509f core-prim . call-with-input-file) (e509e core-prim . write-char) (e509d core-prim . write) (e509c core-prim . with-output-to-file) (e509b core-prim . with-input-from-file) (e509a core-prim . read-char) (e5099 core-prim . read) (e5098 core-prim . peek-char) (e5097 core-prim . open-output-file) (e5096 core-prim . open-input-file) (e5095 core-prim . newline) (e5094 core-prim . display) (e5093 core-prim . close-output-port) (e5092 core-prim . close-input-port) (e5091 core-prim . eof-object?) (e5090 core-prim . eof-object) (e508f core-prim . current-error-port) (e508e core-prim . current-output-port) (e508d core-prim . current-input-port) (e508c core-prim . output-port?) (e508b core-prim . input-port?) (e508a core-prim . utf-8-codec) (e5089 core-prim . utf-16-codec) (e5088 core-prim . transcoder-error-handling-mode) (e5087 core-prim . transcoder-eol-style) (e5086 core-prim . transcoder-codec) (e5085 core-prim . transcoded-port) (e5084 core-prim . textual-port?) (e5083 core-prim . string->bytevector) (e5082 core-prim . standard-output-port) (e5081 core-prim . standard-input-port) (e5080 core-prim . standard-error-port) (e507f core-prim . set-port-position!) (e507e core-prim . put-u8) (e507d core-prim . put-string) (e507c core-prim . put-datum) (e507b core-prim . put-char) (e507a core-prim . put-bytevector) (e5079 core-prim . port?) (e5078 core-prim . port-transcoder) (e5077 core-prim . port-position) (e5076 core-prim . port-has-set-port-position!?) (e5075 core-prim . port-has-port-position?) (e5074 core-prim . port-eof?) (e5073 core-prim . output-port-buffer-mode) (e5072 core-prim . open-string-output-port) (e5071 core-prim . open-string-input-port) (e5070 core-prim . open-file-output-port) (e506f core-prim . open-file-input/output-port) (e506e core-prim . open-file-input-port) (e506d core-prim . open-bytevector-output-port) (e506c core-prim . open-bytevector-input-port) (e506b core-prim . native-transcoder) (e506a core-prim . native-eol-style) (e5069 core-prim . make-transcoder) (e5068 core-prim . latin-1-codec) (e4b60 core-prim . make-i/o-write-error) (e4b4b core-prim . make-i/o-read-error) (e4c01 core-prim . make-i/o-port-error) (e4b77 core-prim . make-i/o-invalid-position-error) (e4b92 core-prim . make-i/o-filename-error) (e4bab core-prim . make-i/o-file-protection-error) (e4bc0 core-prim . make-i/o-file-is-read-only-error) (e4bea core-prim . make-i/o-file-does-not-exist-error) (e4bd5 core-prim . make-i/o-file-already-exists-error) (e4b36 core-prim . make-i/o-error) (e4c31 core-prim . make-i/o-encoding-error) (e4c1a core-prim . make-i/o-decoding-error) (e5067 core-prim . make-custom-textual-output-port) (e5066 core-prim . make-custom-textual-input/output-port) (e5065 core-prim . make-custom-textual-input-port) (e5064 core-prim . make-custom-binary-output-port) (e5063 core-prim . make-custom-binary-input/output-port) (e5062 core-prim . make-custom-binary-input-port) (e5061 core-prim . make-bytevector) (e5060 core-prim . lookahead-u8) (e505f core-prim . lookahead-char) (e4b62 core-prim . i/o-write-error?) (e4b4d core-prim . i/o-read-error?) (e4c05 core-prim . i/o-port-error?) (e4b7b core-prim . i/o-invalid-position-error?) (e4b96 core-prim . i/o-filename-error?) (e4bad core-prim . i/o-file-protection-error?) (e4bc2 core-prim . i/o-file-is-read-only-error?) (e4bec core-prim . i/o-file-does-not-exist-error?) (e4bd7 core-prim . i/o-file-already-exists-error?) (e4b38 core-prim . i/o-error?) (e4b7d core-prim . i/o-error-position) (e4c07 core-prim . i/o-error-port) (e4b98 core-prim . i/o-error-filename) (e4c35 core-prim . i/o-encoding-error?) (e4c37 core-prim . i/o-encoding-error-char) (e4c1c core-prim . i/o-decoding-error?) (e505e core-prim . get-u8) (e505d core-prim . get-string-n!) (e505c core-prim . get-string-n) (e505b core-prim . get-string-all) (e505a core-prim . get-line) (e5059 core-prim . get-datum) (e5058 core-prim . get-char) (e5057 core-prim . get-bytevector-some) (e5056 core-prim . get-bytevector-n!) (e5055 core-prim . get-bytevector-n) (e5054 core-prim . get-bytevector-all) (e5053 core-prim . flush-output-port) (e5052 core-prim . close-port) (e2f7a core-prim . scheme-report-environment) (e5051 core-prim . quotient) (e2f78 core-prim . null-environment) (e5050 core-prim . remainder) (e504f core-prim . modulo) (e504e core-prim . inexact->exact) (e504d core-prim . force) (e504c core-prim . exact->inexact) (e504b core-prim . make-promise) (e504a core-prim . exit) (e4d6c core-prim . command-line) (e5049 core-prim . string-fill!) (e5048 core-prim . string-set!) (e5047 core-prim . set-cdr!) (e5046 core-prim . set-car!) (e5045 core-prim . remove) (e5044 core-prim . remv) (e5043 core-prim . remp) (e5042 core-prim . remq) (e5041 core-prim . partition) (e5040 core-prim . memv) (e503f core-prim . memq) (e503e core-prim . memp) (e503d core-prim . member) (e503c core-prim . exists) (e503b core-prim . for-all) (e503a core-prim . fold-right) (e5039 core-prim . fold-left) (e5038 core-prim . find) (e5037 core-prim . filter) (e5036 core-prim . cons*) (e5035 core-prim . assv) (e5034 core-prim . assq) (e5033 core-prim . assp) (e5032 core-prim . assoc) (e5031 core-prim . call-with-string-output-port) (e5030 core-prim . call-with-port) (e502f core-prim . call-with-bytevector-output-port) (e502e core-prim . bytevector->string) (e502d core-prim . buffer-mode?) (e502c core-prim . binary-port?) (e502b core-prim . with-exception-handler) (e502a core-prim . raise-continuable) (e5029 core-prim . raise) (e2f7e core-prim . eval) (e2f76 core-prim . environment) (e5028 core-prim . make-enumeration) (e5027 core-prim . enum-set=?) (e5026 core-prim . enum-set-universe) (e5025 core-prim . enum-set-union) (e5024 core-prim . enum-set-subset?) (e5023 core-prim . enum-set-projection) (e5022 core-prim . enum-set-member?) (e5021 core-prim . enum-set-intersection) (e5020 core-prim . enum-set-indexer) (e501f core-prim . enum-set-difference) (e501e core-prim . enum-set-constructor) (e501d core-prim . enum-set-complement) (e501c core-prim . enum-set->list) (e4aac core-prim . who-condition?) (e4a24 core-prim . warning?) (e4a63 core-prim . violation?) (e4b23 core-prim . undefined-violation?) (e4b0a core-prim . syntax-violation?) (e4b0e core-prim . syntax-violation-subform) (e4b0c core-prim . syntax-violation-form) (e2f9e core-prim . syntax-violation) (e501b core-prim . simple-conditions) (e4a39 core-prim . serious-condition?) (e4ac3 core-prim . non-continuable-violation?) (e4a0d core-prim . message-condition?) (e4aa8 core-prim . make-who-condition) (e4a22 core-prim . make-warning) (e4a61 core-prim . make-violation) (e4b21 core-prim . make-undefined-violation) (e4b04 core-prim . make-syntax-violation) (e4a37 core-prim . make-serious-condition) (e4ac1 core-prim . make-non-continuable-violation) (e4a09 core-prim . make-message-condition) (e4aeb core-prim . make-lexical-violation) (e4a8d core-prim . make-irritants-condition) (e4ad6 core-prim . make-implementation-restriction-violation) (e4a4c core-prim . make-error) (e4a76 core-prim . make-assertion-violation) (e4aed core-prim . lexical-violation?) (e4a91 core-prim . irritants-condition?) (e4ad8 core-prim . implementation-restriction-violation?) (e4a4e core-prim . error?) (e4aae core-prim . condition-who) (e501a core-prim . condition-predicate) (e4a0f core-prim . condition-message) (e4a93 core-prim . condition-irritants) (e5019 core-prim . condition-accessor) (e5018 core-prim . condition) (e4a78 core-prim . assertion-violation?) (e5017 core-prim . condition?) (e5016 core-prim . utf32->string) (e5015 core-prim . utf16->string) (e5014 core-prim . utf8->string) (e5013 core-prim . uint-list->bytevector) (e5012 core-prim . u8-list->bytevector) (e5011 core-prim . string->utf8) (e5010 core-prim . string->utf32) (e500f core-prim . string->utf16) (e500e core-prim . sint-list->bytevector) (e500d core-prim . native-endianness) (e500c core-prim . bytevector?) (e500b core-prim . bytevector=?) (e500a core-prim . bytevector-uint-set!) (e5009 core-prim . bytevector-uint-ref) (e5008 core-prim . bytevector-u8-set!) (e5007 core-prim . bytevector-u8-ref) (e5006 core-prim . bytevector-u64-set!) (e5005 core-prim . bytevector-u64-ref) (e5004 core-prim . bytevector-u64-native-set!) (e5003 core-prim . bytevector-u64-native-ref) (e5002 core-prim . bytevector-u32-set!) (e5001 core-prim . bytevector-u32-ref) (e5000 core-prim . bytevector-u32-native-set!) (e4fff core-prim . bytevector-u32-native-ref) (e4ffe core-prim . bytevector-u16-set!) (e4ffd core-prim . bytevector-u16-ref) (e4ffc core-prim . bytevector-u16-native-set!) (e4ffb core-prim . bytevector-u16-native-ref) (e4ffa core-prim . bytevector-sint-set!) (e4ff9 core-prim . bytevector-sint-ref) (e4ff8 core-prim . bytevector-s8-set!) (e4ff7 core-prim . bytevector-s8-ref) (e4ff6 core-prim . bytevector-s64-set!) (e4ff5 core-prim . bytevector-s64-ref) (e4ff4 core-prim . bytevector-s64-native-set!) (e4ff3 core-prim . bytevector-s64-native-ref) (e4ff2 core-prim . bytevector-s32-set!) (e4ff1 core-prim . bytevector-s32-ref) (e4ff0 core-prim . bytevector-s32-native-set!) (e4fef core-prim . bytevector-s32-native-ref) (e4fee core-prim . bytevector-s16-set!) (e4fed core-prim . bytevector-s16-ref) (e4fec core-prim . bytevector-s16-native-set!) (e4feb core-prim . bytevector-s16-native-ref) (e4fea core-prim . bytevector-length) (e4fe9 core-prim . bytevector-ieee-single-ref) (e4fe8 core-prim . bytevector-ieee-single-set!) (e4fe7 core-prim . bytevector-ieee-single-native-set!) (e4fe6 core-prim . bytevector-ieee-single-native-ref) (e4fe5 core-prim . bytevector-ieee-double-set!) (e4fe4 core-prim . bytevector-ieee-double-ref) (e4fe3 core-prim . bytevector-ieee-double-native-set!) (e4fe2 core-prim . bytevector-ieee-double-native-ref) (e4fe1 core-prim . bytevector-fill!) (e4fe0 core-prim . bytevector-copy!) (e4fdf core-prim . bytevector-copy) (e4fde core-prim . bytevector->uint-list) (e4fdd core-prim . bytevector->u8-list) (e4fdc core-prim . bytevector->sint-list) (e4c61 core-prim . no-nans-violation?) (e4c4c core-prim . no-infinities-violation?) (e4c5f core-prim . make-no-nans-violation) (e4c4a core-prim . make-no-infinities-violation) (e4fdb core-prim . real->flonum) (e4fda core-prim . flzero?) (e4fd9 core-prim . fltruncate) (e4fd8 core-prim . fltan) (e4fd7 core-prim . flsqrt) (e4fd6 core-prim . flsin) (e4fd5 core-prim . flround) (e4fd4 core-prim . flpositive?) (e4fd3 core-prim . flonum?) (e4fd2 core-prim . flodd?) (e4fd1 core-prim . flnumerator) (e4fd0 core-prim . flnegative?) (e4fcf core-prim . flnan?) (e4fce core-prim . flmod0) (e4fcd core-prim . flmod) (e4fcc core-prim . flmin) (e4fcb core-prim . flmax) (e4fca core-prim . fllog) (e4fc9 core-prim . flinteger?) (e4fc8 core-prim . flinfinite?) (e4fc7 core-prim . flfloor) (e4fc6 core-prim . flfinite?) (e4fc5 core-prim . flexpt) (e4fc4 core-prim . flexp) (e4fc3 core-prim . fleven?) (e4fc2 core-prim . fldiv0-and-mod0) (e4fc1 core-prim . fldiv0) (e4fc0 core-prim . fldiv-and-mod) (e4fbf core-prim . fldiv) (e4fbe core-prim . fldenominator) (e4fbd core-prim . flcos) (e4fbc core-prim . flceiling) (e4fbb core-prim . flatan) (e4fba core-prim . flasin) (e4fb9 core-prim . flacos) (e4fb8 core-prim . flabs) (e4fb7 core-prim . fl>?) (e4fb6 core-prim . fl>=?) (e4fb5 core-prim . fl=?) (e4fb4 core-prim . fl<?) (e4fb3 core-prim . fl<=?) (e4fb2 core-prim . fl/) (e4fb1 core-prim . fl-) (e4fb0 core-prim . fl+) (e4faf core-prim . fl*) (e4fae core-prim . fixnum->flonum) (e4fad core-prim . fxzero?) (e4fac core-prim . fxxor) (e4fab core-prim . fxrotate-bit-field) (e4faa core-prim . fxreverse-bit-field) (e4fa9 core-prim . fxpositive?) (e4fa8 core-prim . fxodd?) (e4fa7 core-prim . fxnot) (e4fa6 core-prim . fxnegative?) (e4fa5 core-prim . fxmod0) (e4fa4 core-prim . fxmod) (e4fa3 core-prim . fxmin) (e4fa2 core-prim . fxmax) (e4fa1 core-prim . fxlength) (e4fa0 core-prim . fxior) (e4f9f core-prim . fxif) (e4f9e core-prim . fxfirst-bit-set) (e4f9d core-prim . fxeven?) (e4f9c core-prim . fxdiv0-and-mod0) (e4f9b core-prim . fxdiv0) (e4f9a core-prim . fxdiv-and-mod) (e4f99 core-prim . fxdiv) (e4f98 core-prim . fxcopy-bit-field) (e4f97 core-prim . fxcopy-bit) (e4f96 core-prim . fxbit-set?) (e4f95 core-prim . fxbit-field) (e4f94 core-prim . fxbit-count) (e4f93 core-prim . fxarithmetic-shift-right) (e4f92 core-prim . fxarithmetic-shift-left) (e4f91 core-prim . fxarithmetic-shift) (e4f90 core-prim . fxand) (e4f8f core-prim . fx>?) (e4f8e core-prim . fx>=?) (e4f8d core-prim . fx=?) (e4f8c core-prim . fx<?) (e4f8b core-prim . fx<=?) (e4f8a core-prim . fx-/carry) (e4f89 core-prim . fx-) (e4f88 core-prim . fx+/carry) (e4f87 core-prim . fx+) (e4f86 core-prim . fx*/carry) (e4f85 core-prim . fx*) (e4f84 core-prim . greatest-fixnum) (e4f83 core-prim . least-fixnum) (e4f82 core-prim . fixnum-width) (e4f81 core-prim . fixnum?) (e4f80 core-prim . bitwise-rotate-bit-field) (e4f7f core-prim . bitwise-reverse-bit-field) (e4f7e core-prim . bitwise-length) (e4f7d core-prim . bitwise-if) (e4f7c core-prim . bitwise-first-bit-set) (e4f7b core-prim . bitwise-copy-bit-field) (e4f7a core-prim . bitwise-copy-bit) (e4f79 core-prim . bitwise-bit-set?) (e4f78 core-prim . bitwise-bit-field) (e4f77 core-prim . bitwise-bit-count) (e4f76 core-prim . bitwise-xor) (e4f75 core-prim . bitwise-ior) (e4f74 core-prim . bitwise-and) (e4f73 core-prim . bitwise-not) (e4f72 core-prim . bitwise-arithmetic-shift-right) (e4f71 core-prim . bitwise-arithmetic-shift-left) (e4f70 core-prim . bitwise-arithmetic-shift) (e4f6f core-prim . zero?) (e4f6e core-prim . vector?) (e4f6d core-prim . vector-set!) (e4f6c core-prim . vector-ref) (e4f6b core-prim . vector-map) (e4f6a core-prim . vector-length) (e4f69 core-prim . vector-for-each) (e4f68 core-prim . vector-fill!) (e4f67 core-prim . vector->list) (e4f66 core-prim . vector) (e4f65 core-prim . values) (e4f64 core-prim . truncate) (e4f63 core-prim . tan) (e4f62 core-prim . symbol?) (e4f61 core-prim . symbol=?) (e4f60 core-prim . symbol->string) (e4f5f core-prim . substring) (e4f5e core-prim . string?) (e4f5d core-prim . string>?) (e4f5c core-prim . string>=?) (e4f5b core-prim . string=?) (e4f5a core-prim . string<?) (e4f59 core-prim . string<=?) (e4f58 core-prim . string-ref) (e4f57 core-prim . string-length) (e4f56 core-prim . string-for-each) (e4f55 core-prim . string-copy) (e4f54 core-prim . string-append) (e4f53 core-prim . string->symbol) (e4f52 core-prim . string->number) (e4f51 core-prim . string->list) (e4f50 core-prim . string) (e4f4f core-prim . sqrt) (e4f4e core-prim . sin) (e4f4d core-prim . round) (e4f4c core-prim . reverse) (e4f4b core-prim . real?) (e4f4a core-prim . real-valued?) (e4f49 core-prim . real-part) (e4f48 core-prim . rationalize) (e4f47 core-prim . rational?) (e4f46 core-prim . rational-valued?) (e4f45 core-prim . procedure?) (e4f44 core-prim . positive?) (e4f43 core-prim . pair?) (e4f42 core-prim . odd?) (e4f41 core-prim . numerator) (e4f40 core-prim . number?) (e4f3f core-prim . number->string) (e4f3e core-prim . null?) (e4f3d core-prim . not) (e4f3c core-prim . negative?) (e4f3b core-prim . nan?) (e4f3a core-prim . min) (e4f39 core-prim . max) (e4f38 core-prim . map) (e4f37 core-prim . make-vector) (e4f36 core-prim . make-string) (e4f35 core-prim . make-rectangular) (e4f34 core-prim . make-polar) (e4f33 core-prim . magnitude) (e4f32 core-prim . log) (e4f31 core-prim . list?) (e4f30 core-prim . list-tail) (e4f2f core-prim . list-ref) (e4f2e core-prim . list->vector) (e4f2d core-prim . list->string) (e4f2c core-prim . list) (e4f2b core-prim . length) (e4f2a core-prim . lcm) (e4f29 core-prim . integer?) (e4f28 core-prim . integer-valued?) (e4f27 core-prim . integer->char) (e4f26 core-prim . infinite?) (e4f25 core-prim . inexact?) (e4f24 core-prim . inexact) (e4f23 core-prim . imag-part) (e4f22 core-prim . gcd) (e4f21 core-prim . for-each) (e4f20 core-prim . floor) (e4f1f core-prim . finite?) (e4f1e core-prim . expt) (e4f1d core-prim . exp) (e4f1c core-prim . exact?) (e4f1b core-prim . exact-integer-sqrt) (e4f1a core-prim . exact) (e4f19 core-prim . even?) (e4f18 core-prim . error) (e4f17 core-prim . eqv?) (e4f16 core-prim . equal?) (e4f15 core-prim . eq?) (e4f14 core-prim . dynamic-wind) (e4f13 core-prim . div0-and-mod0) (e4f12 core-prim . mod0) (e4f11 core-prim . div0) (e4f10 core-prim . div-and-mod) (e4f0f core-prim . mod) (e4f0e core-prim . div) (e4f0d core-prim . denominator) (e4f0c core-prim . cos) (e4f0b core-prim . cons) (e4f0a core-prim . complex?) (e4f09 core-prim . char?) (e4f08 core-prim . char>?) (e4f07 core-prim . char>=?) (e4f06 core-prim . char=?) (e4f05 core-prim . char<?) (e4f04 core-prim . char<=?) (e4f03 core-prim . char->integer) (e4f02 core-prim . ceiling) (e4f01 core-prim . call-with-values) (e4f00 core-prim . call/cc) (e4eff core-prim . call-with-current-continuation) (e4efe core-prim . cddddr) (e4efd core-prim . cdddar) (e4efc core-prim . cddadr) (e4efb core-prim . cddaar) (e4efa core-prim . cdaddr) (e4ef9 core-prim . cdadar) (e4ef8 core-prim . cdaadr) (e4ef7 core-prim . cdaaar) (e4ef6 core-prim . cadddr) (e4ef5 core-prim . caddar) (e4ef4 core-prim . cadadr) (e4ef3 core-prim . cadaar) (e4ef2 core-prim . caaddr) (e4ef1 core-prim . caadar) (e4ef0 core-prim . caaadr) (e4eef core-prim . caaaar) (e4eee core-prim . cdddr) (e4eed core-prim . cddar) (e4eec core-prim . cdadr) (e4eeb core-prim . cdaar) (e4eea core-prim . caddr) (e4ee9 core-prim . cadar) (e4ee8 core-prim . caadr) (e4ee7 core-prim . caaar) (e4ee6 core-prim . cddr) (e4ee5 core-prim . cdar) (e4ee4 core-prim . cadr) (e4ee3 core-prim . caar) (e4ee2 core-prim . cdr) (e4ee1 core-prim . car) (e4ee0 core-prim . boolean?) (e4edf core-prim . boolean=?) (e4ede core-prim . atan) (e4edd core-prim . assertion-violation) (e2f98 core-prim . assertion-error) (e4edc core-prim . asin) (e4edb core-prim . apply) (e4eda core-prim . append) (e4ed9 core-prim . angle) (e4ed8 core-prim . acos) (e4ed7 core-prim . abs) (e4ed6 core-prim . /) (e4ed5 core-prim . *) (e4ed4 core-prim . -) (e4ed3 core-prim . +) (e4ed2 core-prim . >=) (e4ed1 core-prim . >) (e4ed0 core-prim . =) (e4ecf core-prim . <=) (e4ece core-prim . <) (e4ecd core-prim . library) (e4ecc $core-rtd &no-nans-rtd &no-nans-rcd) (e4ecb $core-rtd &no-infinities-rtd &no-infinities-rcd) (e4eca $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (e4ec9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (e4ec8 $core-rtd &i/o-port-rtd &i/o-port-rcd) (e4ec7 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (e4ec6 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (e4ec5 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (e4ec4 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (e4ec3 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (e4ec2 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (e4ec1 $core-rtd &i/o-write-rtd &i/o-write-rcd) (e4ec0 $core-rtd &i/o-read-rtd &i/o-read-rcd) (e4ebf $core-rtd &i/o-rtd &i/o-rcd) (e4ebe $core-rtd &undefined-rtd &undefined-rcd) (e4ebd $core-rtd &syntax-rtd &syntax-rcd) (e4ebc $core-rtd &lexical-rtd &lexical-rcd) (e4ebb $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (e4eba $core-rtd &non-continuable-rtd &non-continuable-rcd) (e4eb9 $core-rtd &who-rtd &who-rcd) (e4eb8 $core-rtd &irritants-rtd &irritants-rcd) (e4eb7 $core-rtd &assertion-rtd &assertion-rcd) (e4eb6 $core-rtd &violation-rtd &violation-rcd) (e4eb5 $core-rtd &error-rtd &error-rcd) (e4eb4 $core-rtd &serious-rtd &serious-rcd) (e4eb3 $core-rtd &warning-rtd &warning-rcd) (e4eb2 $core-rtd &message-rtd &message-rcd) (e4eb1 $core-rtd &condition-rtd &condition-rcd) (e4eb0 macro . define-condition-type) (e4eaf macro . define-enumeration) (e4eae macro . define-record-type) (e4ead macro . parent-rtd) (e4eac macro . nongenerative) (e4eab macro . opaque) (e4eaa macro . sealed) (e4ea9 macro . protocol) (e4ea8 macro . parent) (e4ea7 macro . immutable) (e4ea6 macro . mutable) (e4ea5 macro . fields) (e4ea4 macro . error-handling-mode) (e4ea3 macro . file-options) (e4ea2 macro . buffer-mode) (e4ea1 macro . eol-style) (e4ea0 macro . guard) (e4e9f macro . trace-define) (e4e9e macro . trace-lambda) (e4e9d macro . unsyntax-splicing) (e4e9c macro . unsyntax) (e4e9b macro . unquote-splicing) (e4e9a macro . unquote) (e4e99 macro . _) (e4e98 macro . else) (e4e97 macro . =>) (e4e96 macro . ...) (e4e95 macro . assert) (e4e94 macro . endianness) (e4e93 macro . delay) (e4e92 macro . time) (e4e91 macro . do) (e4e90 macro . cond) (e4e8f macro . let*) (e4e8e macro . let) (e4e8d macro . let*-values) (e4e8c macro . let-values) (e4e8b macro . identifier-syntax) (e4e8a macro . with-syntax) (e4e89 macro . quasisyntax) (e4e88 macro . quasiquote) (e4e87 macro . syntax-rules) (e4e86 macro . include) (e4e85 macro . define-struct) (e4e84 core-macro . record-constructor-descriptor) (e4e83 core-macro . record-type-descriptor) (e4e82 macro . case) (e4e81 macro . parameterize) (e4e80 macro . unless) (e4e7f macro . when) (e4e7e core-macro . or) (e4e7d core-macro . and) (e4e7c core-macro . if) (e4e7b core-macro . letrec*) (e4e7a core-macro . letrec) (e4e79 core-macro . type-descriptor) (e4e78 core-macro . case-lambda) (e4e77 core-macro . lambda) (e4e76 core-macro . syntax) (e4e75 core-macro . syntax-case) (e4e74 core-macro . quote) (e4e73 core-macro . foreign-call) (e4e72 letrec-syntax) (e4e71 let-syntax) (e4e70 set!) (e4e6f import) (e4e6e begin) (e4e6d module) (e4e6c define-syntax) (e4e6b define)) values values '#f '#f '#f '#f) (e2acd@e296c@install-library 'e515a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . e5139) (eval-core . e5138) (set-symbol-value! . e5137) (symbol-value . e5136) (gensym . e5135) (void . e5134)) '() values values '#f '#f '#f '#f) (e2acd@e296c@install-library 'e515b '(mosh) '() '() '() '() '((set-symbol-value! . e5137) (symbol-value . e5136) (regexp? . e5132) (read-line . e5131) (ungensym . e5130) (alist->eq-hash-table . e512f) (assoc-ref . e512e) (print . e512d) (format . e512c) (host-os . e512b) (library-path . e294b) (standard-library-path . e512a) (file-newer? . e5129) (stat-mtime . e5128) (write-to-file . e5127) (file->list . e5126) (file->string . e5125) (digit->integer . e5124) (call-with-string-input-port . e5123) (call-with-string-io . e5122) (string-split . e5121) (bytevector-for-each . e5120) (string->regexp . e511f) (rxmatch . e511e) (regexp-replace-all . e511d) (hashtable-for-each . e511c) (readdir . e5118) (set-current-directory! . e5117) (expand-path . e5116) (current-directory . e5115) (p . e5106) (get-timeofday . e5101) (get-command-line . e5100) (sys-display . e50ff) (mosh-executable-path . e50fe) (make-file-options . e50fd) (source-info . e50fc) (make-compiler-instruction . e50fb) (make-instruction . e50fa) (set-source-info! . e50f9) (bignum? . e50f8) (fast-equal? . e50f7) (fasl-read . e50f6) (fasl-write . e50f5) (time-usage . e50f4) (os-constant . e50f3) (time . e4e92) (include . e4e86)) '() values values '#f '#f '#f '#f) (e2acd@e296c@install-library 'e515c '(system) '() '() '() '() '((call-process . e511b) (local-tz-offset . e511a) (microseconds . e5119) (expand-path . e5116) (%spawn . e5114) (%waitpid . e5113) (%ffi-supported? . e5112) (%ffi-pointer-ref . e5111) (%ffi-pointer->string . e5110) (%ffi-call->string-or-zero . e510f) (%ffi-call->double . e510e) (%ffi-call->void* . e510d) (%ffi-call->void . e510c) (%ffi-call->int . e510b) (%ffi-lookup . e510a) (%ffi-open . e5109) (%fork . e5108) (%pipe . e5107) (open-output-string . e5105) (get-output-string . e5104) (get-environment-variables . e5103) (get-environment-variable . e5102) (make-parameter . e277e) (socket-port . e50f2) (socket-shutdown . e50f1) (socket-close . e50f0) (socket-send . e50ef) (socket-recv! . e50ee) (socket-recv . e50ed) (make-server-socket . e50ec) (make-client-socket . e50eb) (socket-accept . e50ea) (socket? . e50e9) (parameterize . e4e81)) '() values values '#f '#f '#f '#f))
((lambda (e4d5b@add-library-path! e4d5d@parse-and-add-library-path e4d5f@for-each-with-index e4d61@rpad e4d63@condition-printer e4d65@record->field-alist e4d67@map-with-index e4d69@repl e4d6b@trace-printer e4d6d@command-line e4d6f@local-library-path e4d71@load/args e4d73@load e4d75@ironscheme-build e4d77@eval-top-level e4d79@compile-system-libraries e4d7b@compile e4d7d@compile->closure e4d7f@pre-compile-r6rs-file e4d81@load-r6rs-top-level) (begin (set! e4d5b@add-library-path! (lambda (e4d9c@path) (e2abd@e294c@library-path (append (e2abd@e294c@library-path) (list e4d9c@path))))) (set! e4d5d@parse-and-add-library-path (lambda (e4d9e@paths e4d9f@message) ((lambda (e4da2@t) (if e4da2@t ((lambda (e4da4@paths) (for-each (lambda (e4da6@path) (if (file-exists? e4da6@path) (e4d5b@add-library-path! (expand-path e4da6@path)) (format (current-error-port) e4d9f@message e4da6@path))) (reverse (string-split e4da4@paths '#\:)))) e4da2@t) (void))) e4d9e@paths))) (set! e4d5f@for-each-with-index (lambda (e4da8@proc e4da9@lst) (letrec ((e4dac@loop (lambda (e4dae@i e4daf@lst) (if (null? e4daf@lst) (if '#f '#f (void)) (begin (e4da8@proc e4dae@i (car e4daf@lst)) (e4dac@loop (+ e4dae@i '1) (cdr e4daf@lst))))))) (e4dac@loop '1 e4da9@lst)))) (set! e4d61@rpad (lambda (e4db2@str e4db3@pad e4db4@n) ((lambda (e4db8@rest) ((letrec ((e4dba@loop (lambda (e4dbc@rest e4dbd@ret) (if (<= e4dbc@rest '0) e4dbd@ret (e4dba@loop (- e4dbc@rest '1) (string-append e4dbd@ret e4db3@pad)))))) e4dba@loop) e4db8@rest (format '"~a" e4db2@str))) (- e4db4@n (string-length (format '"~a" e4db2@str)))))) (set! e4d63@condition-printer (lambda (e4dc0@e e4dc1@port) ((lambda (e4dc5@max-condition-len) (begin (set! e4dc5@max-condition-len (apply max (map (lambda (e4dd6@c) (string-length (symbol->string (record-type-name (record-rtd e4dd6@c))))) (simple-conditions e4dc0@e)))) (begin (display '" Condition components:\n" e4dc1@port) (e4d5f@for-each-with-index (lambda (e4dc6@i e4dc7@x) ((lambda (e4dca@rtd e4dcb@fields-alist) (begin (format e4dc1@port '" ~d. ~a" e4dc6@i (e4d61@rpad (symbol->string (record-type-name e4dca@rtd)) '" " e4dc5@max-condition-len)) (if (null? e4dcb@fields-alist) (newline e4dc1@port) (void)) ((letrec ((e4dce@loop (lambda (e4dd0@first e4dd1@fields-alist) (if (null? e4dd1@fields-alist) '() ((lambda (e4dd4@field) (begin (if (not e4dd0@first) (display (e4d61@rpad '"" '" " (+ '4 e4dc5@max-condition-len)) e4dc1@port) (void)) (display '"       " e4dc1@port) (display (car e4dd4@field) e4dc1@port) (display '": " e4dc1@port) (write (cdr e4dd4@field) e4dc1@port) (newline e4dc1@port) (e4dce@loop '#f (cdr e4dd1@fields-alist)))) (car e4dd1@fields-alist)))))) e4dce@loop) '#t e4dcb@fields-alist))) (record-rtd e4dc7@x) (e4d65@record->field-alist e4dc7@x))) (simple-conditions e4dc0@e))))) '#f))) (set! e4d65@record->field-alist (lambda (e4dd8@r) ((lambda (e4ddb@ref) (begin (set! e4ddb@ref (lambda (e4de6@rtd e4de7@i e4de8@x) ((lambda (e4dec@val) (if (symbol? e4dec@val) (ungensym e4dec@val) e4dec@val)) ((record-accessor e4de6@rtd e4de7@i) e4de8@x)))) ((letrec ((e4ddc@loop (lambda (e4dde@ret e4ddf@rtd) (if e4ddf@rtd (e4ddc@loop (append e4dde@ret (e4d67@map-with-index (lambda (e4de2@i e4de3@field) (cons e4de3@field (e4ddb@ref e4ddf@rtd e4de2@i e4dd8@r))) (vector->list (record-type-field-names e4ddf@rtd)))) (record-type-parent e4ddf@rtd)) e4dde@ret)))) e4ddc@loop) '() (record-rtd e4dd8@r)))) '#f))) (set! e4d67@map-with-index (lambda (e4dee@proc e4def@lst) ((letrec ((e4df2@loop (lambda (e4df4@i e4df5@lst e4df6@ret) (if (null? e4df5@lst) (reverse e4df6@ret) (e4df2@loop (+ e4df4@i '1) (cdr e4df5@lst) (cons (e4dee@proc e4df4@i (car e4df5@lst)) e4df6@ret)))))) e4df2@loop) '0 e4def@lst '()))) (set! e4d69@repl (lambda e4dfa@x ((lambda (e4dfd@rec) (begin (set! e4dfd@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (e4e00@e4dfe) (lambda () (with-exception-handler (lambda (e4e02@e) ((call/cc (lambda (e4e04@e4dff) (e4e00@e4dfe (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? e4e02@e) (e4d63@condition-printer e4e02@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" e4e02@e))) (e4e04@e4dff (lambda () (raise-continuable e4e02@e)))))))))) (lambda () ((letrec ((e4e06@loop (lambda (e4e08@line e4e09@accum) ((lambda (e4e0d@parentheses-ok? e4e0f@eval-string-print) (begin (set! e4e0d@parentheses-ok? (lambda (e4e14@text) ((letrec ((e4e16@loop (lambda (e4e18@chars e4e19@p0 e4e1a@p1) (if (null? e4e18@chars) (= '0 e4e19@p0 e4e1a@p1) ((lambda (e4e1e@t) (if (memv e4e1e@t '(#\()) (e4e16@loop (cdr e4e18@chars) (+ e4e19@p0 '1) e4e1a@p1) (if (memv e4e1e@t '(#\))) (e4e16@loop (cdr e4e18@chars) (- e4e19@p0 '1) e4e1a@p1) (if (memv e4e1e@t '(#\[)) (e4e16@loop (cdr e4e18@chars) e4e19@p0 (+ e4e1a@p1 '1)) (if (memv e4e1e@t '(#\])) (e4e16@loop (cdr e4e18@chars) e4e19@p0 (- e4e1a@p1 '1)) (e4e16@loop (cdr e4e18@chars) e4e19@p0 e4e1a@p1)))))) (car e4e18@chars)))))) e4e16@loop) (string->list e4e14@text) '0 '0))) (set! e4e0f@eval-string-print (lambda (e4e12@text) (if (not (or (string=? '"\n" e4e12@text) (= '0 (string-length e4e12@text)))) (write (e4d77@eval-top-level (call-with-port (open-string-input-port e4e12@text) read))) (void)))) (if (eof-object? e4e08@line) (begin (e4e0f@eval-string-print e4e09@accum) (exit)) ((lambda (e4e10@current) (if (e4e0d@parentheses-ok? e4e10@current) (e4e0f@eval-string-print e4e10@current) (e4e06@loop (get-line (current-input-port)) e4e10@current))) (string-append e4e09@accum e4e08@line))))) '#f '#f)))) e4e06@loop) (get-line (current-input-port)) '""))))))) (newline) (e4dfd@rec)))) (e4dfd@rec))) '#f))) (set! e4d6b@trace-printer (e2855@e277f@make-parameter write)) (set! e4d6d@command-line (e2855@e277f@make-parameter (get-command-line))) (set! e4d6f@local-library-path (lambda (e4e20@filename) (cons (expand-path '".") (e2abd@e294c@library-path)))) (set! e4d71@load/args (lambda (e4e22@filename . e4e24@args) (begin (apply e4d81@load-r6rs-top-level e4e22@filename 'load e4e24@args) (void)))) (set! e4d73@load (lambda (e4e26@filename) (begin (apply e4d81@load-r6rs-top-level e4e26@filename 'load (e4d6d@command-line)) (void)))) (set! e4d75@ironscheme-build (lambda () (e4d73@load '"ironscheme-buildscript.ss"))) (set! e4d77@eval-top-level (lambda (e4e28@x) (e4987@e2f7f@eval e4e28@x (e499d@e2fab@interaction-environment)))) (set! e4d79@compile-system-libraries (lambda () (e4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! e4d7b@compile (lambda (e4e2a@filename) (e4d81@load-r6rs-top-level e4e2a@filename 'compile))) (set! e4d7d@compile->closure (lambda (e4e2c@filename) (e4d81@load-r6rs-top-level e4e2c@filename 'closure))) (set! e4d7f@pre-compile-r6rs-file (lambda (e4e2e@filename) (e4d81@load-r6rs-top-level e4e2e@filename 'compile))) (set! e4d81@load-r6rs-top-level (lambda (e4e30@filename e4e31@how . e4e34@args) ((lambda (e4e3a@e4e37 e4e3b@e4e39) ((lambda (e4e3e@swap) (dynamic-wind e4e3e@swap (lambda () ((lambda (e4e40@x*) ((lambda (e4e42@t) (if (memv e4e42@t '(closure)) (e499c@e2fa9@pre-compile-r6rs-top-level e4e40@x*) (if (memv e4e42@t '(load)) ((lambda (e4e48@e4e45 e4e49@e4e47) ((lambda (e4e4c@swap) (dynamic-wind e4e4c@swap (lambda () ((e499b@e2fa7@compile-r6rs-top-level e4e40@x*))) e4e4c@swap)) (lambda () ((lambda (e4e4e@t) (begin (e4e48@e4e45 e4e49@e4e47) (set! e4e49@e4e47 e4e4e@t))) (e4e48@e4e45))))) e4d6d@command-line (cons e4e30@filename (car e4e34@args))) (if (memv e4e42@t '(compile)) (begin (e499b@e2fa7@compile-r6rs-top-level e4e40@x*) (e2ac1@e2954@serialize-all e2850@e2775@serialize-library e28aa@e2863@compile-core-expr)) (if '#f '#f (void)))))) e4e31@how)) (with-input-from-file e4e30@filename (lambda () ((letrec ((e4e50@f (lambda () ((lambda (e4e52@x) (if (eof-object? e4e52@x) '() (cons e4e52@x (e4e50@f)))) (e2848@e2765@read-annotated))))) e4e50@f)))))) e4e3e@swap)) (lambda () ((lambda (e4e54@t) (begin (e4e3a@e4e37 e4e3b@e4e39) (set! e4e3b@e4e39 e4e54@t))) (e4e3a@e4e37))))) e2abd@e294c@library-path (e4d6f@local-library-path e4e30@filename)))) (begin (set! e4e69@e4d81@load-r6rs-top-level e4d81@load-r6rs-top-level) (set! e4e68@e4d7f@pre-compile-r6rs-file e4d7f@pre-compile-r6rs-file) (set! e4e67@e4d7d@compile->closure e4d7d@compile->closure) (set! e4e66@e4d7b@compile e4d7b@compile) (set! e4e65@e4d79@compile-system-libraries e4d79@compile-system-libraries) (set! e4e64@e4d77@eval-top-level e4d77@eval-top-level) (set! e4e63@e4d75@ironscheme-build e4d75@ironscheme-build) (set! e4e62@e4d73@load e4d73@load) (set! e4e61@e4d71@load/args e4d71@load/args) (set! e4e60@e4d6f@local-library-path e4d6f@local-library-path) (set! e4e5f@e4d6d@command-line e4d6d@command-line) (set! e4e5e@e4d6b@trace-printer e4d6b@trace-printer) (set! e4e5d@e4d69@repl e4d69@repl) (set! e4e5c@e4d67@map-with-index e4d67@map-with-index) (set! e4e5b@e4d65@record->field-alist e4d65@record->field-alist) (set! e4e5a@e4d63@condition-printer e4d63@condition-printer) (set! e4e59@e4d61@rpad e4d61@rpad) (set! e4e58@e4d5f@for-each-with-index e4d5f@for-each-with-index) (set! e4e57@e4d5d@parse-and-add-library-path e4d5d@parse-and-add-library-path) (set! e4e56@e4d5b@add-library-path! e4d5b@add-library-path!) (e2ac2@e2956@current-precompiled-library-loader e2851@e2777@load-serialized-library) (set-symbol-value! 'load e4d73@load) (set-symbol-value! 'pre-compile-r6rs-file e4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs e4d77@eval-top-level) (set-symbol-value! 'int-env-syms e497e@e2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core e28a9@e2861@expanded->core) (set-symbol-value! 'trace-printer e4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (e4d82@c) (condition (e4cb8@e4ac2@make-non-continuable-violation) (e4cae@e4aa9@make-who-condition 'raise) (e4c72@e4a0a@make-message-condition '"returned from non-continuable exception") (e4ca4@e4a8e@make-irritants-condition (list e4d82@c))))) (e4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (e4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (e4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (e4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (e4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (e4d84@prefix) (e2abe@e294e@library-extensions (e4d84@prefix '".mosh" (e2abe@e294e@library-extensions)))) (lambda (e4d86@ext e4d87@ls) (append (map (lambda (e4d8a@x) (string-append e4d86@ext e4d8a@x)) e4d87@ls) e4d87@ls))) ((lambda (e4d8c@args e4d8d@port) ((lambda (e4d91@ref) (begin (set! e4d91@ref (lambda (e4d94@rtd e4d95@i e4d96@x) ((lambda (e4d9a@val) (if (symbol? e4d9a@val) (ungensym e4d9a@val) e4d9a@val)) ((record-accessor e4d94@rtd e4d95@i) e4d96@x)))) (with-exception-handler (lambda (e4d92@c) (if (condition? e4d92@c) (e4d63@condition-printer e4d92@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" e4d92@c))) (lambda () (if (null? e4d8c@args) (e4d69@repl) (e4d81@load-r6rs-top-level (car e4d8c@args) 'load (cdr e4d8c@args))))))) '#f)) (e4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
