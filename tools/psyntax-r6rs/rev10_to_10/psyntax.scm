;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (q2877@read-annotated q2879@annotation-stripped q287b@annotation? q287d@annotation-source q287f@annotation-expression q2881@scm->fasl q2883@fasl-save q2885@fasl-load q2887@serialize-library q2889@load-serialized-library q288b@make-record-printer q288d@compile-core q288f@read-library-source-file q2891@make-parameter q2927@file-options-spec) (begin (set! q2877@read-annotated read) (set! q2879@annotation-stripped (lambda (q2928@x) (q287f@annotation-expression q2928@x))) (set! q287b@annotation? (lambda (q292a@x) (source-info q292a@x))) (set! q287d@annotation-source (lambda (q292c@x) (source-info q292c@x))) (set! q287f@annotation-expression (lambda (q292e@x) (if (pair? q292e@x) (cons (car q292e@x) (cdr q292e@x)) (display '"line:46\n")))) (set! q2881@scm->fasl (lambda (q2930@filename) (string-append q2930@filename '".mosh-fasl"))) (set! q2883@fasl-save (lambda (q2932@filename q2933@obj) (call-with-port (open-file-output-port q2932@filename) (lambda (q2936@port) ((symbol-value 'fasl-write!) q2933@obj q2936@port))))) (set! q2885@fasl-load (lambda (q2938@filename) (call-with-port (open-file-input-port q2938@filename) (symbol-value 'fasl-read!)))) (set! q2887@serialize-library (lambda (q293a@filename q293b@obj) (begin (format '#t '"serialize-library ~a\n..." q293a@filename) ((lambda (q293e@expanded2core) ((lambda (q2940@compile) ((lambda (q2942@code) ((lambda (q2944@pivot) ((lambda (q2946@visit) ((lambda () (begin (set-car! q2944@pivot q2946@visit) ((lambda (q2948@pivot) ((lambda (q294a@invoke) ((lambda () (set-car! q2948@pivot q294a@invoke)))) (q2940@compile (q293e@expanded2core (car q2948@pivot))))) (cdr q2944@pivot)))))) (q2940@compile (q293e@expanded2core (car q2944@pivot))))) (cddddr (cddddr q2942@code)))) q293b@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (q294c@fasl-file) (begin (if (file-exists? q294c@fasl-file) (delete-file q294c@fasl-file) (void)) ((call/cc (lambda (q2950@q294e) (lambda () (with-exception-handler (lambda (q2952@c) ((call/cc (lambda (q2954@q294f) (q2950@q294e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " q293a@filename) (if (file-exists? q294c@fasl-file) (delete-file q294c@fasl-file) (void)) '#f) (q2954@q294f (lambda () (raise-continuable q2952@c)))))))))) (lambda () (begin (q2883@fasl-save q294c@fasl-file q293b@obj) (display '"OK\n")))))))))) (q2881@scm->fasl q293a@filename))))) (set! q2889@load-serialized-library (lambda (q2956@filename q2957@obj) ((lambda (q295a@fasl-file) (if (and (file-exists? q295a@fasl-file) ((symbol-value 'file-newer?) q295a@fasl-file q2956@filename)) ((lambda (q295c@expanded2core) ((lambda (q295e@eval-compiled-core) ((lambda (q2960@code) ((lambda (q2962@pivot) ((lambda (q2964@visit) ((lambda (q2966@visit-proc) ((lambda () (begin (set-car! q2962@pivot q2966@visit-proc) ((lambda (q2968@pivot) ((lambda (q296a@invoke) ((lambda () (begin (set-car! q2968@pivot (lambda () (q295e@eval-compiled-core q296a@invoke))) (apply q2957@obj q2960@code))))) (car q2968@pivot))) (cdr q2962@pivot)) '#t)))) (lambda () (q295e@eval-compiled-core q2964@visit)))) (car q2962@pivot))) (cddddr (cddddr q2960@code)))) (q2885@fasl-load q295a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (q2881@scm->fasl q2956@filename)))) (set! q288b@make-record-printer (lambda (q296c@name q296d@printer) (lambda q2970@x (begin (display '"record printer") (for-each display q2970@x))))) (set! q288d@compile-core (lambda q2972@x (apply error 'comile-core '"not implementated" q2972@x))) (set! q288f@read-library-source-file (lambda (q2974@file-name) (with-input-from-file q2974@file-name q2877@read-annotated))) (set! q2891@make-parameter (lambda q2984 ((lambda (q2985) (if (= q2985 '1) (apply (lambda (q2976@x) (q2891@make-parameter q2976@x (lambda (q2978@x) q2978@x))) q2984) (if (= q2985 '2) (apply (lambda (q297a@x q297b@fender) ((lambda (q297e@x) (lambda q2982 ((lambda (q2983) (if (= q2983 '0) (apply (lambda () q297e@x) q2982) (if (= q2983 '1) (apply (lambda (q2980@v) (set! q297e@x (q297b@fender q2980@v))) q2982) (error 'apply '"invalid arg count")))) (length q2982)))) (q297b@fender q297a@x))) q2984) (error 'apply '"invalid arg count")))) (length q2984)))) (set! q2927@file-options-spec (lambda (q2986@x) q2986@x)) (begin (set! q2996@q2927@file-options-spec q2927@file-options-spec) (set! q2995@q2891@make-parameter q2891@make-parameter) (set! q2994@q288f@read-library-source-file q288f@read-library-source-file) (set! q2993@q288d@compile-core q288d@compile-core) (set! q2992@q288b@make-record-printer q288b@make-record-printer) (set! q2991@q2889@load-serialized-library q2889@load-serialized-library) (set! q2990@q2887@serialize-library q2887@serialize-library) (set! q298f@q2885@fasl-load q2885@fasl-load) (set! q298e@q2883@fasl-save q2883@fasl-save) (set! q298d@q2881@scm->fasl q2881@scm->fasl) (set! q298c@q287f@annotation-expression q287f@annotation-expression) (set! q298b@q287d@annotation-source q287d@annotation-source) (set! q298a@q287b@annotation? q287b@annotation?) (set! q2989@q2879@annotation-stripped q2879@annotation-stripped) (set! q2988@q2877@read-annotated q2877@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q299c@current-primitive-locations q299e@mutable? q29a0@rewriter q29a2@expanded->core q29a4@compile-core-expr q29a6@pretty-print q29a8@compile-core-expr-to-port) (begin (set! q299c@current-primitive-locations (q2995@q2891@make-parameter (lambda (q29a9@x) '#f) (lambda (q29ab@p) q29ab@p))) (set! q299e@mutable? (lambda (q29ad@x) (or (pair? q29ad@x) (vector? q29ad@x) (hashtable? q29ad@x)))) (set! q29a0@rewriter (lambda (q29af@quote-hack?) ((lambda (q29b2@f) (begin (set! q29b2@f (lambda (q29b3@x) (if (pair? q29b3@x) ((lambda (q29b5@t) (if (memv q29b5@t '(quote)) (if (and q29af@quote-hack? (q299e@mutable? (cadr q29b3@x))) ((lambda (q29b7@g) (begin (set-symbol-value! q29b7@g (cadr q29b3@x)) q29b7@g)) (gensym)) q29b3@x) (if (memv q29b5@t '(case-lambda)) (cons 'case-lambda (map (lambda (q29b9@x) (cons (car q29b9@x) (map q29b2@f (cdr q29b9@x)))) (cdr q29b3@x))) (if (memv q29b5@t '(lambda)) (cons* 'lambda (cadr q29b3@x) (map q29b2@f (cddr q29b3@x))) (if (memv q29b5@t '(letrec)) ((lambda (q29bb@bindings q29bc@body*) ((lambda (q29bf@lhs* q29c0@rhs*) (cons* 'letrec (map list q29bf@lhs* (map q29b2@f q29c0@rhs*)) (map q29b2@f q29bc@body*))) (map car q29bb@bindings) (map cadr q29bb@bindings))) (cadr q29b3@x) (cddr q29b3@x)) (if (memv q29b5@t '(letrec*)) ((lambda (q29c3@bindings q29c4@body*) ((lambda (q29c7@lhs* q29c8@rhs*) (cons* 'letrec* (map list q29c7@lhs* (map q29b2@f q29c8@rhs*)) (map q29b2@f q29c4@body*))) (map car q29c3@bindings) (map cadr q29c3@bindings))) (cadr q29b3@x) (cddr q29b3@x)) (if (memv q29b5@t '(library-letrec*)) ((lambda (q29cb@name q29cc@x) ((lambda (q29cf@bindings q29d0@body*) ((lambda (q29d3@lhs* q29d4@lhs** q29d5@rhs*) (cons* 'library-letrec* q29cb@name (map list q29d3@lhs* q29d4@lhs** (map q29b2@f q29d5@rhs*)) (map q29b2@f q29d0@body*))) (map car q29cf@bindings) (map cadr q29cf@bindings) (map caddr q29cf@bindings))) (cadr q29cc@x) (cddr q29cc@x))) (cadr q29b3@x) (cdr q29b3@x)) (if (memv q29b5@t '(begin)) (cons 'begin (map q29b2@f (cdr q29b3@x))) (if (memv q29b5@t '(set!)) (list 'set! (cadr q29b3@x) (q29b2@f (caddr q29b3@x))) (if (memv q29b5@t '(primitive)) ((lambda (q29d9@op) ((lambda (q29db@t) (if q29db@t ((lambda (q29dd@loc) q29dd@loc) q29db@t) q29d9@op)) ((q299c@current-primitive-locations) q29d9@op))) (cadr q29b3@x)) (if (memv q29b5@t '(define)) q29b3@x (if (list? q29b3@x) (map q29b2@f q29b3@x) (error 'rewrite '"invalid form ~s ~s" q29b3@x (list? q29b3@x)))))))))))))) (car q29b3@x)) q29b3@x))) q29b2@f)) '#f))) (set! q29a2@expanded->core (lambda (q29df@x) ((q29a0@rewriter '#f) q29df@x))) (set! q29a4@compile-core-expr (lambda (q29e1@x) ((q29a0@rewriter '#f) q29e1@x))) (set! q29a6@pretty-print write) (set! q29a8@compile-core-expr-to-port (lambda (q29e3@x q29e4@p) (q29a6@pretty-print ((q29a0@rewriter '#f) q29e3@x) q29e4@p))) (begin (set! q29ed@q29a8@compile-core-expr-to-port q29a8@compile-core-expr-to-port) (set! q29ec@q29a6@pretty-print q29a6@pretty-print) (set! q29eb@q29a4@compile-core-expr q29a4@compile-core-expr) (set! q29ea@q29a2@expanded->core q29a2@expanded->core) (set! q29e9@q29a0@rewriter q29a0@rewriter) (set! q29e8@q299e@mutable? q299e@mutable?) (set! q29e7@q299c@current-primitive-locations q299c@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (q2a3c@make-collection q2a3e@current-library-collection q2a40@rp q2a42@make-library q2a44@library? q2a46@library-id q2a48@set-library-id! q2a4a@library-name q2a4c@set-library-name! q2a4e@library-version q2a50@set-library-version! q2a52@library-imp* q2a54@set-library-imp*! q2a56@library-vis* q2a58@set-library-vis*! q2a5a@library-inv* q2a5c@set-library-inv*! q2a5e@library-subst q2a60@set-library-subst! q2a62@library-env q2a64@set-library-env! q2a66@library-visit-state q2a68@set-library-visit-state! q2a6a@library-invoke-state q2a6c@set-library-invoke-state! q2a6e@library-visit-code q2a70@set-library-visit-code! q2a72@library-invoke-code q2a74@set-library-invoke-code! q2a76@library-visible? q2a78@set-library-visible?! q2a7a@library-source-file-name q2a7c@set-library-source-file-name! q2a7e@dummy q2a80@find-dependencies q2a82@find-library-by q2a84@library-path q2a86@library-extensions q2a88@library-name->file-name q2a8a@file-locator q2a8c@serialize-all q2a8e@current-precompiled-library-loader q2a90@try-load-from-file q2a92@library-loader q2a94@current-library-expander q2a96@external-pending-libraries q2a98@find-external-library q2a9a@find-library-by-name q2a9c@library-exists? q2a9e@find-library-by-spec/die q2aa0@label->binding-table q2aa2@install-library-record q2aa4@install-library q2aa6@imported-label->binding q2aa8@invoke-library q2aaa@visit-library q2aac@invoke-library-by-spec q2aae@installed-libraries q2ab0@library-spec) (begin (set! q2a3c@make-collection (lambda () ((lambda (q2ab1@set) ((lambda (q2ab4@set-cons) (begin (set! q2ab4@set-cons (lambda (q2ab9@x q2aba@ls) (if (memq q2ab9@x q2aba@ls) q2aba@ls (cons q2ab9@x q2aba@ls)))) (lambda q2ab7 ((lambda (q2ab8) (if (= q2ab8 '0) (apply (lambda () q2ab1@set) q2ab7) (if (= q2ab8 '1) (apply (lambda (q2ab5@x) (set! q2ab1@set (q2ab4@set-cons q2ab5@x q2ab1@set))) q2ab7) (error 'apply '"invalid arg count")))) (length q2ab7))))) '#f)) '()))) (set! q2a3e@current-library-collection (q2995@q2891@make-parameter (q2a3c@make-collection) (lambda (q2abd@x) (begin (if (not (procedure? q2abd@x)) (assertion-violation 'current-library-collection '"not a procedure" q2abd@x) (void)) q2abd@x)))) (set! q2a40@rp (q2992@q288b@make-record-printer 'library (lambda (q2abf@x q2ac0@p q2ac1@wr) (begin (if (not (q2a44@library? q2abf@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (q2a4e@library-version q2abf@x)) (q2a4a@library-name q2abf@x) (append (q2a4a@library-name q2abf@x) (list (q2a4e@library-version q2abf@x))))) q2ac0@p))))) (set! q2a42@make-library (lambda q2ac5@args ((lambda (q2ac7@ret) (begin ((letrec ((q2ac9@loop (lambda (q2acb@i q2acc@args) (if (= q2acb@i '15) '() (if (null? q2acc@args) (begin (simple-struct-set! q2ac7@ret q2acb@i 'uninitialized) (q2ac9@loop (+ q2acb@i '1) q2acc@args)) (begin (simple-struct-set! q2ac7@ret q2acb@i (car q2acc@args)) (q2ac9@loop (+ q2acb@i '1) (cdr q2acc@args)))))))) q2ac9@loop) '0 q2ac5@args) q2ac7@ret)) (make-simple-struct 'library '15)))) (set! q2a44@library? (lambda (q2acf@x) (and (simple-struct? q2acf@x) (eq? (simple-struct-name q2acf@x) 'library)))) (set! q2a46@library-id (lambda (q2ad1@x) (simple-struct-ref q2ad1@x '0))) (set! q2a48@set-library-id! (lambda (q2ad3@x q2ad4@val) (simple-struct-set! q2ad3@x '0 q2ad4@val))) (set! q2a4a@library-name (lambda (q2ad7@x) (simple-struct-ref q2ad7@x '1))) (set! q2a4c@set-library-name! (lambda (q2ad9@x q2ada@val) (simple-struct-set! q2ad9@x '1 q2ada@val))) (set! q2a4e@library-version (lambda (q2add@x) (simple-struct-ref q2add@x '2))) (set! q2a50@set-library-version! (lambda (q2adf@x q2ae0@val) (simple-struct-set! q2adf@x '2 q2ae0@val))) (set! q2a52@library-imp* (lambda (q2ae3@x) (simple-struct-ref q2ae3@x '3))) (set! q2a54@set-library-imp*! (lambda (q2ae5@x q2ae6@val) (simple-struct-set! q2ae5@x '3 q2ae6@val))) (set! q2a56@library-vis* (lambda (q2ae9@x) (simple-struct-ref q2ae9@x '4))) (set! q2a58@set-library-vis*! (lambda (q2aeb@x q2aec@val) (simple-struct-set! q2aeb@x '4 q2aec@val))) (set! q2a5a@library-inv* (lambda (q2aef@x) (simple-struct-ref q2aef@x '5))) (set! q2a5c@set-library-inv*! (lambda (q2af1@x q2af2@val) (simple-struct-set! q2af1@x '5 q2af2@val))) (set! q2a5e@library-subst (lambda (q2af5@x) (simple-struct-ref q2af5@x '6))) (set! q2a60@set-library-subst! (lambda (q2af7@x q2af8@val) (simple-struct-set! q2af7@x '6 q2af8@val))) (set! q2a62@library-env (lambda (q2afb@x) (simple-struct-ref q2afb@x '7))) (set! q2a64@set-library-env! (lambda (q2afd@x q2afe@val) (simple-struct-set! q2afd@x '7 q2afe@val))) (set! q2a66@library-visit-state (lambda (q2b01@x) (simple-struct-ref q2b01@x '8))) (set! q2a68@set-library-visit-state! (lambda (q2b03@x q2b04@val) (simple-struct-set! q2b03@x '8 q2b04@val))) (set! q2a6a@library-invoke-state (lambda (q2b07@x) (simple-struct-ref q2b07@x '9))) (set! q2a6c@set-library-invoke-state! (lambda (q2b09@x q2b0a@val) (simple-struct-set! q2b09@x '9 q2b0a@val))) (set! q2a6e@library-visit-code (lambda (q2b0d@x) (simple-struct-ref q2b0d@x '10))) (set! q2a70@set-library-visit-code! (lambda (q2b0f@x q2b10@val) (simple-struct-set! q2b0f@x '10 q2b10@val))) (set! q2a72@library-invoke-code (lambda (q2b13@x) (simple-struct-ref q2b13@x '11))) (set! q2a74@set-library-invoke-code! (lambda (q2b15@x q2b16@val) (simple-struct-set! q2b15@x '11 q2b16@val))) (set! q2a76@library-visible? (lambda (q2b19@x) (simple-struct-ref q2b19@x '12))) (set! q2a78@set-library-visible?! (lambda (q2b1b@x q2b1c@val) (simple-struct-set! q2b1b@x '12 q2b1c@val))) (set! q2a7a@library-source-file-name (lambda (q2b1f@x) (simple-struct-ref q2b1f@x '13))) (set! q2a7c@set-library-source-file-name! (lambda (q2b21@x q2b22@val) (simple-struct-set! q2b21@x '13 q2b22@val))) (set! q2a7e@dummy '3) (set! q2a80@find-dependencies (lambda (q2b25@ls) (if (null? q2b25@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! q2a82@find-library-by (lambda (q2b27@pred) ((letrec ((q2b29@f (lambda (q2b2b@ls) (if (null? q2b2b@ls) '#f (if (q2b27@pred (car q2b2b@ls)) (car q2b2b@ls) (q2b29@f (cdr q2b2b@ls))))))) q2b29@f) ((q2a3e@current-library-collection))))) (set! q2a84@library-path (q2995@q2891@make-parameter '(".") (lambda (q2b2d@x) (if (and (list? q2b2d@x) (for-all string? q2b2d@x)) (map (lambda (q2b2f@x) q2b2f@x) q2b2d@x) (assertion-violation 'library-path '"not a list of strings" q2b2d@x))))) (set! q2a86@library-extensions (q2995@q2891@make-parameter '(".sls" ".ss" ".scm") (lambda (q2b31@x) (if (and (list? q2b31@x) (for-all string? q2b31@x)) (map (lambda (q2b33@x) q2b33@x) q2b31@x) (assertion-violation 'library-extensions '"not a list of strings" q2b31@x))))) (set! q2a88@library-name->file-name (lambda (q2b35@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q2b3b@q2b38 q2b3c@q2b3a) ((lambda (q2b3f@extract q2b40@p) ((lambda (q2b44@display-hex) (begin (set! q2b44@display-hex (lambda (q2b4d@n) (if (<= '0 q2b4d@n '9) (display q2b4d@n q2b40@p) (display (integer->char (+ (char->integer '#\a) (- q2b4d@n '10))) q2b40@p)))) (begin ((letrec ((q2b45@f (lambda (q2b47@ls) (if (not (null? q2b47@ls)) (begin (display '"/" q2b40@p) (for-each (lambda (q2b49@c) (if (or (char<=? '#\a q2b49@c '#\z) (char<=? '#\A q2b49@c '#\Z) (char<=? '#\0 q2b49@c '#\9) (memv q2b49@c '(#\- #\. #\_ #\~))) (display q2b49@c q2b40@p) (begin (display '"%" q2b40@p) ((lambda (q2b4b@n) (begin (q2b44@display-hex (quotient q2b4b@n '16)) (q2b44@display-hex (remainder q2b4b@n '16)))) (char->integer q2b49@c))))) (string->list (symbol->string (car q2b47@ls)))) (q2b45@f (cdr q2b47@ls))) (void))))) q2b45@f) q2b35@x) (q2b3f@extract)))) '#f)) q2b3c@q2b3a q2b3b@q2b38))))) (set! q2a8a@file-locator (q2995@q2891@make-parameter (lambda (q2b4f@x) ((lambda (q2b51@str) ((letrec ((q2b53@f (lambda (q2b55@ls q2b56@exts q2b57@failed-list) (if (null? q2b55@ls) ((lambda () ((lambda (q2b63@q2b5e q2b65@q2b60 q2b67@q2b5f q2b6a@q2b5d q2b6c@make-library-resolution-condition q2b6e@q2b5b q2b70@q2b5c q2b72@library-resolution-condition? q2b74@condition-library q2b76@condition-files) (begin (set! q2b63@q2b5e (make-record-type-descriptor '&library-resolution q4e3e@q4b85@&condition-rtd 'q2b61 '#f '#f '#((immutable library) (immutable files)))) (set! q2b65@q2b60 '#f) (set! q2b67@q2b5f (make-record-constructor-descriptor q2b63@q2b5e q4e3f@q4b87@&condition-rcd q2b65@q2b60)) (set! q2b6a@q2b5d (record-predicate q2b63@q2b5e)) (set! q2b6c@make-library-resolution-condition (record-constructor q2b67@q2b5f)) (set! q2b6e@q2b5b (record-accessor q2b63@q2b5e '0)) (set! q2b70@q2b5c (record-accessor q2b63@q2b5e '1)) (set! q2b72@library-resolution-condition? (condition-predicate q2b63@q2b5e)) (set! q2b74@condition-library (condition-accessor q2b63@q2b5e q2b6e@q2b5b)) (set! q2b76@condition-files (condition-accessor q2b63@q2b5e q2b70@q2b5c)) (raise (condition (q4e5e@q4c1f@make-error) (q4e80@q4c7b@make-who-condition 'expander) (q4e44@q4bdc@make-message-condition '"cannot locate library in library-path") (q2b6c@make-library-resolution-condition q2b4f@x (reverse q2b57@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? q2b56@exts) (q2b53@f (cdr q2b55@ls) (q2a86@library-extensions) q2b57@failed-list) ((lambda (q2b77@name) (if (file-exists? q2b77@name) q2b77@name (q2b53@f q2b55@ls (cdr q2b56@exts) (cons q2b77@name q2b57@failed-list)))) (string-append (car q2b55@ls) q2b51@str (car q2b56@exts)))))))) q2b53@f) (q2a84@library-path) (q2a86@library-extensions) '())) (q2a88@library-name->file-name q2b4f@x))) (lambda (q2b79@f) (if (procedure? q2b79@f) q2b79@f (assertion-violation 'file-locator '"not a procedure" q2b79@f))))) (set! q2a8c@serialize-all (lambda (q2b7b@serialize q2b7c@compile) ((lambda (q2b80@library-desc) (begin (set! q2b80@library-desc (lambda (q2b83@x) (list (q2a46@library-id q2b83@x) (q2a4a@library-name q2b83@x)))) (for-each (lambda (q2b81@x) (if (q2a7a@library-source-file-name q2b81@x) (q2b7b@serialize (q2a7a@library-source-file-name q2b81@x) (list (q2a46@library-id q2b81@x) (q2a4a@library-name q2b81@x) (q2a4e@library-version q2b81@x) (map q2b80@library-desc (q2a52@library-imp* q2b81@x)) (map q2b80@library-desc (q2a56@library-vis* q2b81@x)) (map q2b80@library-desc (q2a5a@library-inv* q2b81@x)) (q2a5e@library-subst q2b81@x) (q2a62@library-env q2b81@x) (q2b7c@compile (q2a6e@library-visit-code q2b81@x)) (q2b7c@compile (q2a72@library-invoke-code q2b81@x)) (q2a76@library-visible? q2b81@x))) (void))) ((q2a3e@current-library-collection))))) '#f))) (set! q2a8e@current-precompiled-library-loader (q2995@q2891@make-parameter (lambda (q2b85@filename q2b86@sk) '#f))) (set! q2a90@try-load-from-file (lambda (q2b89@filename) ((q2a8e@current-precompiled-library-loader) q2b89@filename (lambda q2baf ((lambda (q2bb0) (if (= q2bb0 '11) (apply (lambda (q2b8b@id q2b8c@name q2b8d@ver q2b8e@imp* q2b8f@vis* q2b90@inv* q2b91@exp-subst q2b92@exp-env q2b93@visit-proc q2b94@invoke-proc q2b95@visible?) ((letrec ((q2ba1@f (lambda (q2ba3@deps) (if (null? q2ba3@deps) (begin (q2aa4@install-library q2b8b@id q2b8c@name q2b8d@ver q2b8e@imp* q2b8f@vis* q2b90@inv* q2b91@exp-subst q2b92@exp-env q2b93@visit-proc q2b94@invoke-proc '#f '#f q2b95@visible? '#f) '#t) ((lambda (q2ba5@d) ((lambda (q2ba7@label q2ba8@dname) ((lambda (q2bab@l) (if (and (q2a44@library? q2bab@l) (eq? q2ba7@label (q2a46@library-id q2bab@l))) (q2ba1@f (cdr q2ba3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" q2b8c@name q2ba8@dname q2b89@filename q2bab@l q2ba7@label (q2a46@library-id q2bab@l)) '#f))) (q2a9a@find-library-by-name q2ba8@dname))) (car q2ba5@d) (cadr q2ba5@d))) (car q2ba3@deps)))))) q2ba1@f) (append q2b8e@imp* q2b8f@vis* q2b90@inv*))) q2baf) (if (>= q2bb0 '0) (apply (lambda q2bad@others '#f) q2baf) (error 'apply '"invalid arg count")))) (length q2baf)))))) (set! q2a92@library-loader (q2995@q2891@make-parameter (lambda (q2bb1@x) ((lambda (q2bb3@file-name) (if (not q2bb3@file-name) (assertion-violation '#f '"cannot file library" q2bb1@x) (or (q2a90@try-load-from-file q2bb3@file-name) ((q2a94@current-library-expander) (q2994@q288f@read-library-source-file q2bb3@file-name) q2bb3@file-name (lambda (q2bb5@name) (if (not (fast-equal? q2bb5@name q2bb1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (q2bbb@q2bb8 q2bbc@q2bba) ((lambda (q2bbf@e q2bc0@p) (begin (display '"expected to find library " q2bc0@p) (write q2bb1@x q2bc0@p) (display '" in file " q2bc0@p) (display q2bb3@file-name q2bc0@p) (display '", found " q2bc0@p) (write q2bb5@name q2bc0@p) (display '" instead" q2bc0@p) (q2bbf@e))) q2bbc@q2bba q2bbb@q2bb8)))) (void))))))) ((q2a8a@file-locator) q2bb1@x))) (lambda (q2bc3@f) (if (procedure? q2bc3@f) q2bc3@f (assertion-violation 'library-locator '"not a procedure" q2bc3@f))))) (set! q2a94@current-library-expander (q2995@q2891@make-parameter (lambda (q2bc5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (q2bc7@f) (if (procedure? q2bc7@f) q2bc7@f (assertion-violation 'library-expander '"not a procedure" q2bc7@f))))) (set! q2a96@external-pending-libraries (q2995@q2891@make-parameter '())) (set! q2a98@find-external-library (lambda (q2bc9@name) (begin (if (member q2bc9@name (q2a96@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" q2bc9@name) (void)) ((lambda (q2bcf@q2bcc q2bd0@q2bce) ((lambda (q2bd3@swap) (dynamic-wind q2bd3@swap (lambda () (begin ((q2a92@library-loader) q2bc9@name) (or (q2a82@find-library-by (lambda (q2bd5@x) (fast-equal? (q2a4a@library-name q2bd5@x) q2bc9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" q2bc9@name)))) q2bd3@swap)) (lambda () ((lambda (q2bd7@t) (begin (q2bcf@q2bcc q2bd0@q2bce) (set! q2bd0@q2bce q2bd7@t))) (q2bcf@q2bcc))))) q2a96@external-pending-libraries (cons q2bc9@name (q2a96@external-pending-libraries)))))) (set! q2a9a@find-library-by-name (lambda (q2bd9@name) (or (q2a82@find-library-by (lambda (q2bdb@x) (fast-equal? (q2a4a@library-name q2bdb@x) q2bd9@name))) (q2a98@find-external-library q2bd9@name)))) (set! q2a9c@library-exists? (lambda (q2bdd@name) (and (q2a82@find-library-by (lambda (q2bdf@x) (fast-equal? (q2a4a@library-name q2bdf@x) q2bdd@name))) '#t))) (set! q2a9e@find-library-by-spec/die (lambda (q2be1@spec) ((lambda (q2be3@id) (or (q2a82@find-library-by (lambda (q2be5@x) (eq? q2be3@id (q2a46@library-id q2be5@x)))) (assertion-violation '#f '"cannot find library with required spec" q2be1@spec))) (car q2be1@spec)))) (set! q2aa0@label->binding-table (make-eq-hashtable)) (set! q2aa2@install-library-record (lambda (q2be7@lib) (begin ((lambda (q2be9@exp-env) (for-each (lambda (q2beb@x) ((lambda (q2bed@label q2bee@binding) ((lambda (q2bf1@binding) (begin (if (hashtable-ref q2aa0@label->binding-table q2bed@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" q2bed@label (hashtable-ref q2aa0@label->binding-table q2bed@label '#f) q2bf1@binding) (exit)) (void)) (hashtable-set! q2aa0@label->binding-table q2bed@label q2bf1@binding))) ((lambda (q2bf3@t) (if (memv q2bf3@t '(global)) (cons 'global (cons q2be7@lib (cdr q2bee@binding))) (if (memv q2bf3@t '(global-macro)) (cons 'global-macro (cons q2be7@lib (cdr q2bee@binding))) (if (memv q2bf3@t '(global-macro!)) (cons 'global-macro! (cons q2be7@lib (cdr q2bee@binding))) q2bee@binding)))) (car q2bee@binding)))) (car q2beb@x) (cdr q2beb@x))) q2be9@exp-env)) (q2a62@library-env q2be7@lib)) ((q2a3e@current-library-collection) q2be7@lib)))) (set! q2aa4@install-library (lambda (q2bf5@id q2bf6@name q2bf7@ver q2bf8@imp* q2bf9@vis* q2bfa@inv* q2bfb@exp-subst q2bfc@exp-env q2bfd@visit-proc q2bfe@invoke-proc q2bff@visit-code q2c00@invoke-code q2c01@visible? q2c02@source-file-name) ((lambda (q2c11@imp-lib* q2c12@vis-lib* q2c13@inv-lib*) (begin (if (not (and (symbol? q2bf5@id) (list? q2bf6@name) (list? q2bf7@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" q2bf5@id q2bf6@name q2bf7@ver) (void)) (if (q2a9c@library-exists? q2bf6@name) (assertion-violation 'install-library '"library is already installed" q2bf6@name) (void)) ((lambda (q2c17@lib) (q2aa2@install-library-record q2c17@lib)) (q2a42@make-library q2bf5@id q2bf6@name q2bf7@ver q2c11@imp-lib* q2c12@vis-lib* q2c13@inv-lib* q2bfb@exp-subst q2bfc@exp-env q2bfd@visit-proc q2bfe@invoke-proc q2bff@visit-code q2c00@invoke-code q2c01@visible? q2c02@source-file-name)))) (map q2a9e@find-library-by-spec/die q2bf8@imp*) (map q2a9e@find-library-by-spec/die q2bf9@vis*) (map q2a9e@find-library-by-spec/die q2bfa@inv*)))) (set! q2aa6@imported-label->binding (lambda (q2c19@lab) (hashtable-ref q2aa0@label->binding-table q2c19@lab '#f))) (set! q2aa8@invoke-library (lambda (q2c1b@lib) ((lambda (q2c1d@invoke) (if (procedure? q2c1d@invoke) (begin (q2a6c@set-library-invoke-state! q2c1b@lib (lambda () (assertion-violation 'invoke '"circularity detected" q2c1b@lib))) (for-each q2aa8@invoke-library (q2a5a@library-inv* q2c1b@lib)) (q2a6c@set-library-invoke-state! q2c1b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" q2c1b@lib))) (q2c1d@invoke) (q2a6c@set-library-invoke-state! q2c1b@lib '#t)) (void))) (q2a6a@library-invoke-state q2c1b@lib)))) (set! q2aaa@visit-library (lambda (q2c1f@lib) ((lambda (q2c21@visit) (if (procedure? q2c21@visit) (begin (q2a68@set-library-visit-state! q2c1f@lib (lambda () (assertion-violation 'visit '"circularity detected" q2c1f@lib))) (for-each q2aa8@invoke-library (q2a56@library-vis* q2c1f@lib)) (q2a68@set-library-visit-state! q2c1f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" q2c1f@lib))) (q2c21@visit) (q2a68@set-library-visit-state! q2c1f@lib '#t)) (void))) (q2a66@library-visit-state q2c1f@lib)))) (set! q2aac@invoke-library-by-spec (lambda (q2c23@spec) (q2aa8@invoke-library (q2a9e@find-library-by-spec/die q2c23@spec)))) (set! q2aae@installed-libraries (lambda q2c2b ((lambda (q2c2c) (if (= q2c2c '1) (apply (lambda (q2c25@all?) ((letrec ((q2c27@f (lambda (q2c29@ls) (if (null? q2c29@ls) '() (if (or q2c25@all? (q2a76@library-visible? (car q2c29@ls))) (cons (car q2c29@ls) (q2c27@f (cdr q2c29@ls))) (q2c27@f (cdr q2c29@ls))))))) q2c27@f) ((q2a3e@current-library-collection)))) q2c2b) (if (= q2c2c '0) (apply (lambda () (q2aae@installed-libraries '#f)) q2c2b) (error 'apply '"invalid arg count")))) (length q2c2b)))) (set! q2ab0@library-spec (lambda (q2c2d@x) (begin (if (not (q2a44@library? q2c2d@x)) (assertion-violation 'library-spec '"not a library" q2c2d@x) (void)) (list (q2a46@library-id q2c2d@x) (q2a4a@library-name q2c2d@x) (q2a4e@library-version q2c2d@x))))) (begin (set! q2c69@q2ab0@library-spec q2ab0@library-spec) (set! q2c68@q2aae@installed-libraries q2aae@installed-libraries) (set! q2c67@q2aac@invoke-library-by-spec q2aac@invoke-library-by-spec) (set! q2c66@q2aaa@visit-library q2aaa@visit-library) (set! q2c65@q2aa8@invoke-library q2aa8@invoke-library) (set! q2c64@q2aa6@imported-label->binding q2aa6@imported-label->binding) (set! q2c63@q2aa4@install-library q2aa4@install-library) (set! q2c62@q2aa2@install-library-record q2aa2@install-library-record) (set! q2c61@q2aa0@label->binding-table q2aa0@label->binding-table) (set! q2c60@q2a9e@find-library-by-spec/die q2a9e@find-library-by-spec/die) (set! q2c5f@q2a9c@library-exists? q2a9c@library-exists?) (set! q2c5e@q2a9a@find-library-by-name q2a9a@find-library-by-name) (set! q2c5d@q2a98@find-external-library q2a98@find-external-library) (set! q2c5c@q2a96@external-pending-libraries q2a96@external-pending-libraries) (set! q2c5b@q2a94@current-library-expander q2a94@current-library-expander) (set! q2c5a@q2a92@library-loader q2a92@library-loader) (set! q2c59@q2a90@try-load-from-file q2a90@try-load-from-file) (set! q2c58@q2a8e@current-precompiled-library-loader q2a8e@current-precompiled-library-loader) (set! q2c57@q2a8c@serialize-all q2a8c@serialize-all) (set! q2c56@q2a8a@file-locator q2a8a@file-locator) (set! q2c55@q2a88@library-name->file-name q2a88@library-name->file-name) (set! q2c54@q2a86@library-extensions q2a86@library-extensions) (set! q2c53@q2a84@library-path q2a84@library-path) (set! q2c52@q2a82@find-library-by q2a82@find-library-by) (set! q2c51@q2a80@find-dependencies q2a80@find-dependencies) (set! q2c50@q2a7e@dummy q2a7e@dummy) (set! q2c4f@q2a7c@set-library-source-file-name! q2a7c@set-library-source-file-name!) (set! q2c4e@q2a7a@library-source-file-name q2a7a@library-source-file-name) (set! q2c4d@q2a78@set-library-visible?! q2a78@set-library-visible?!) (set! q2c4c@q2a76@library-visible? q2a76@library-visible?) (set! q2c4b@q2a74@set-library-invoke-code! q2a74@set-library-invoke-code!) (set! q2c4a@q2a72@library-invoke-code q2a72@library-invoke-code) (set! q2c49@q2a70@set-library-visit-code! q2a70@set-library-visit-code!) (set! q2c48@q2a6e@library-visit-code q2a6e@library-visit-code) (set! q2c47@q2a6c@set-library-invoke-state! q2a6c@set-library-invoke-state!) (set! q2c46@q2a6a@library-invoke-state q2a6a@library-invoke-state) (set! q2c45@q2a68@set-library-visit-state! q2a68@set-library-visit-state!) (set! q2c44@q2a66@library-visit-state q2a66@library-visit-state) (set! q2c43@q2a64@set-library-env! q2a64@set-library-env!) (set! q2c42@q2a62@library-env q2a62@library-env) (set! q2c41@q2a60@set-library-subst! q2a60@set-library-subst!) (set! q2c40@q2a5e@library-subst q2a5e@library-subst) (set! q2c3f@q2a5c@set-library-inv*! q2a5c@set-library-inv*!) (set! q2c3e@q2a5a@library-inv* q2a5a@library-inv*) (set! q2c3d@q2a58@set-library-vis*! q2a58@set-library-vis*!) (set! q2c3c@q2a56@library-vis* q2a56@library-vis*) (set! q2c3b@q2a54@set-library-imp*! q2a54@set-library-imp*!) (set! q2c3a@q2a52@library-imp* q2a52@library-imp*) (set! q2c39@q2a50@set-library-version! q2a50@set-library-version!) (set! q2c38@q2a4e@library-version q2a4e@library-version) (set! q2c37@q2a4c@set-library-name! q2a4c@set-library-name!) (set! q2c36@q2a4a@library-name q2a4a@library-name) (set! q2c35@q2a48@set-library-id! q2a48@set-library-id!) (set! q2c34@q2a46@library-id q2a46@library-id) (set! q2c33@q2a44@library? q2a44@library?) (set! q2c32@q2a42@make-library q2a42@make-library) (set! q2c31@q2a40@rp q2a40@rp) (set! q2c30@q2a3e@current-library-collection q2a3e@current-library-collection) (set! q2c2f@q2a3c@make-collection q2a3c@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2c6c@build-global-define q2cdd@build-lambda q2cdf@build-case-lambda q2ce1@build-let q2d0f@build-sequence q2d11@build-void q2d13@build-letrec q2d15@build-letrec* q2d17@build-library-letrec* q2d19@build-receive) (begin (set! q2c6c@build-global-define (lambda (q2d1a@x) (q2d11@build-void))) (set! q2cdd@build-lambda (lambda (q2d1c@ae q2d1d@vars q2d1e@exp) (list 'lambda q2d1d@vars q2d1e@exp))) (set! q2cdf@build-case-lambda (lambda (q2d22@ae q2d23@vars* q2d24@exp*) ((lambda (q2d29@build-error q2d2b@build-pred q2d2d@build-apply q2d2f@expand-case-lambda) (begin (set! q2d29@build-error (lambda (q2d60@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! q2d2b@build-pred (lambda (q2d48@ae q2d49@n q2d4a@vars) (call-with-values (lambda () ((letrec ((q2d52@f (lambda (q2d54@vars q2d55@count) (if (pair? q2d54@vars) (q2d52@f (cdr q2d54@vars) (+ q2d55@count '1)) (if (null? q2d54@vars) (values q2d55@count '=) (values q2d55@count '>=)))))) q2d52@f) q2d4a@vars '0)) (lambda (q2d58@q2d4f q2d59@q2d51) ((lambda (q2d5c@pred q2d5d@count) (list (list 'primitive q2d5c@pred) q2d49@n (list 'quote q2d5d@count))) q2d59@q2d51 q2d58@q2d4f))))) (set! q2d2d@build-apply (lambda (q2d40@ae q2d41@g q2d42@vars q2d43@exp) (list '(primitive apply) (q2cdd@build-lambda q2d40@ae q2d42@vars q2d43@exp) q2d41@g))) (set! q2d2f@expand-case-lambda (lambda (q2d30@ae q2d31@vars q2d32@exp*) ((lambda (q2d36@g q2d37@n) (list 'lambda q2d36@g (q2ce1@build-let q2d30@ae (list q2d37@n) (list (list '(primitive length) q2d36@g)) ((letrec ((q2d3a@f (lambda (q2d3c@vars* q2d3d@exp*) (if (null? q2d3c@vars*) (q2d29@build-error q2d30@ae) (list 'if (q2d2b@build-pred q2d30@ae q2d37@n (car q2d3c@vars*)) (q2d2d@build-apply q2d30@ae q2d36@g (car q2d3c@vars*) (car q2d3d@exp*)) (q2d3a@f (cdr q2d3c@vars*) (cdr q2d3d@exp*))))))) q2d3a@f) q2d23@vars* q2d32@exp*)))) (gensym) (gensym)))) (if (= (length q2d24@exp*) '1) (q2cdd@build-lambda q2d22@ae (car q2d23@vars*) (car q2d24@exp*)) (q2d2f@expand-case-lambda q2d22@ae q2d23@vars* q2d24@exp*)))) '#f '#f '#f '#f))) (set! q2ce1@build-let (lambda (q2d62@ae q2d63@lhs* q2d64@rhs* q2d65@body) (cons (q2cdd@build-lambda q2d62@ae q2d63@lhs* q2d65@body) q2d64@rhs*))) (set! q2d0f@build-sequence (lambda (q2d6a@ae q2d6b@exps) ((letrec ((q2d6e@loop (lambda (q2d70@exps) (if (null? (cdr q2d70@exps)) (car q2d70@exps) (if (equal? (car q2d70@exps) (q2d11@build-void)) (q2d6e@loop (cdr q2d70@exps)) (cons 'begin q2d70@exps)))))) q2d6e@loop) q2d6b@exps))) (set! q2d11@build-void (lambda () '((primitive void)))) (set! q2d13@build-letrec (lambda (q2d72@ae q2d73@vars q2d74@val-exps q2d75@body-exp) (if (null? q2d73@vars) q2d75@body-exp (list 'letrec (map list q2d73@vars q2d74@val-exps) q2d75@body-exp)))) (set! q2d15@build-letrec* (lambda (q2d7a@ae q2d7b@vars q2d7c@val-exps q2d7d@body-exp) (if (null? q2d7b@vars) q2d7d@body-exp (q2ce1@build-let q2d7a@ae q2d7b@vars (map (lambda (q2d82@x) (list 'quote '#f)) q2d7b@vars) (q2d0f@build-sequence q2d7a@ae (append (map (lambda (q2d84@lhs q2d85@rhs) (list 'set! q2d84@lhs q2d85@rhs)) q2d7b@vars q2d7c@val-exps) (list q2d7d@body-exp))))))) (set! q2d17@build-library-letrec* (lambda (q2d88@ae q2d89@name q2d8a@vars q2d8b@locs q2d8c@val-exps q2d8d@body-exp) (list 'library-letrec* q2d89@name (map list q2d8a@vars q2d8b@locs q2d8c@val-exps) q2d8d@body-exp))) (set! q2d19@build-receive (lambda (q2d94@ae q2d95@vars q2d96@producer q2d97@body*) (begin (display '"************** in ") (cons 'receive (cons q2d95@vars (cons q2d96@producer q2d97@body*)))))) (begin (set! q2da5@q2d19@build-receive q2d19@build-receive) (set! q2da4@q2d17@build-library-letrec* q2d17@build-library-letrec*) (set! q2da3@q2d15@build-letrec* q2d15@build-letrec*) (set! q2da2@q2d13@build-letrec q2d13@build-letrec) (set! q2da1@q2d11@build-void q2d11@build-void) (set! q2da0@q2d0f@build-sequence q2d0f@build-sequence) (set! q2d9f@q2ce1@build-let q2ce1@build-let) (set! q2d9e@q2cdf@build-case-lambda q2cdf@build-case-lambda) (set! q2d9d@q2cdd@build-lambda q2cdd@build-lambda) (set! q2d9c@q2c6c@build-global-define q2c6c@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2db4@file-options-macro q2db6@set-cons q2db8@set-union q2dbd@top-mark* q2dbf@top-marked? q2dc1@gen-lexical q2dc3@gen-global q2dc5@gen-label q2dc7@gen-top-level-label q2dc9@gen-define-label+loc q2dcb@gen-define-label q2dcd@make-rib q2dcf@rib? q2dd1@rib-sym* q2dd3@set-rib-sym*! q2dd5@rib-mark** q2dd7@set-rib-mark**! q2dd9@rib-label* q2ddb@set-rib-label*! q2ddd@rib-sealed/freq q2ddf@set-rib-sealed/freq! q2de1@rib-cache q2de3@set-rib-cache! q2de5@dummy q2de7@make-empty-rib q2de9@extend-rib! q2deb@extend-rib/nc! q2ded@make-rib-map q2def@seal-rib! q2df1@unseal-rib! q2df3@make-full-rib q2df5@rp q2df7@make-stx q2df9@stx? q2dfb@stx-expr q2dfd@set-stx-expr! q2dff@stx-mark* q2e01@set-stx-mark*! q2e03@stx-subst* q2e05@set-stx-subst*! q2e07@stx-ae* q2e09@set-stx-ae*! q2e0b@dummy q2e0d@datum->stx q2e0f@gen-mark q2e11@anti-mark q2e13@anti-mark? q2e15@join-wraps q2e17@mkstx q2e19@add-mark q2e1b@add-subst q2e1d@syntax-kind? q2e1f@syntax-vector->list q2e21@syntax-pair? q2e23@syntax-vector? q2e25@syntax-null? q2e27@syntax-list? q2e29@syntax-car q2e2b@syntax-cdr q2e2d@syntax->list q2e2f@id? q2e31@id->sym q2e33@bound-id=? q2e35@free-id=? q2e37@valid-bound-ids? q2e39@distinct-bound-ids? q2e3b@bound-id-member? q2e3d@self-evaluating? q2e3f@strip-annotations q2e41@strip q2e43@stx->datum q2e45@id->label q2e47@label->binding q2e49@make-binding q2e4b@binding-type q2e4d@binding-value q2e4f@raise-unbound-error q2e51@syntax-type q2e5f@sanitize-binding q2e61@make-variable-transformer q2e63@variable-transformer? q2e65@variable-transformer-procedure q2e67@make-eval-transformer q2fb8@parse-define q2fba@parse-define-syntax q2fbc@scheme-stx-hashtable q2fbe@scheme-stx q2fc0@lexical-var q2fc2@lexical-mutable? q2fc4@set-lexical-mutable! q2fc6@add-lexical q2fc8@add-lexicals q2fca@letrec-helper q2fcc@letrec-transformer q2fce@letrec*-transformer q2fd0@fluid-let-syntax-transformer q2fd2@type-descriptor-transformer q2fd4@record-type-descriptor-transformer q2fd6@record-constructor-descriptor-transformer q2fd8@when-macro q2fda@unless-macro q2fdc@if-transformer q2fde@and-transformer q2fe0@or-transformer q2fe2@case-macro q2fe4@quote-transformer q2fe6@case-lambda-transformer q2fe8@lambda-transformer q2fea@bless q2fec@with-syntax-macro q2fee@invalid-fmls-error q2ff0@let-macro q2ff2@let-values-macro q2ff4@let*-values-macro q2ff6@trace-lambda-macro q2ff8@trace-define-macro q2ffa@trace-define-syntax-macro q2ffc@trace-let/rec-syntax q2ffe@trace-let-syntax-macro q3000@trace-letrec-syntax-macro q3002@guard-macro q3004@define-enumeration-macro q3006@time-macro q3008@delay-macro q300a@assert-macro q300c@endianness-macro q300e@identifier-syntax-macro q3010@do-macro q3012@let*-macro q3014@or-macro q3016@and-macro q3018@cond-macro q301a@do-include q301c@include-macro q301e@include-into-macro q3020@syntax-rules-macro q3022@quasiquote-macro q3024@quasisyntax-macro q3026@define-struct-macro q3028@define-record-type-macro q302a@define-condition-type-macro q302c@incorrect-usage-macro q302e@parameterize-macro q3030@foreign-call-transformer q3032@convert-pattern q3034@syntax-dispatch q3036@ellipsis? q3038@underscore? q303a@verify-literals q303c@syntax-case-transformer q303e@ellipsis-map q3040@syntax-transformer q3042@core-macro-transformer q3044@symbol-macro q3046@macro-transformer q3048@local-macro-transformer q304a@do-macro-call q304c@chi-macro q304e@chi-local-macro q3050@chi-global-macro q3052@chi-expr* q3054@chi-application q3056@chi-expr q3058@chi-set! q305a@verify-formals q305c@chi-lambda-clause q305e@chi-lambda-clause* q3060@chi-defun q3062@chi-rhs q3064@expand-interaction-rhs*/init* q3066@chi-rhs* q3068@find-bound=? q306a@find-dups q306c@chi-internal q306e@parse-module q3070@make-module-interface q3072@module-interface? q3074@module-interface-first-mark q3076@set-module-interface-first-mark! q3078@module-interface-exp-id-vec q307a@set-module-interface-exp-id-vec! q307c@module-interface-exp-lab-vec q307e@set-module-interface-exp-lab-vec! q3080@dummy q3082@module-interface-exp-id* q3084@chi-internal-module q3086@chi-body* q3088@expand-transformer q308a@parse-exports q308c@parse-library-name q308e@parse-library q3090@parse-import-spec* q3092@make-top-rib q3094@make-collector q3096@inv-collector q3098@vis-collector q309a@imp-collector q309c@chi-library-internal q309e@chi-interaction-expr q30a0@library-body-expander q30a2@core-library-expander q30a4@parse-top-level-program q30a6@top-level-expander q30a8@rp q30aa@make-env q30ac@env? q30ae@env-names q30b0@set-env-names! q30b2@env-labels q30b4@set-env-labels! q30b6@env-itc q30b8@set-env-itc! q30ba@dummy q30bc@rp q30be@make-interaction-env q30c0@interaction-env? q30c2@interaction-env-rib q30c4@set-interaction-env-rib! q30c6@interaction-env-r q30c8@set-interaction-env-r! q30ca@interaction-env-locs q30cc@set-interaction-env-locs! q30ce@dummy q30d0@interaction-environment-symbols q30d2@environment-bindings q30d4@parse-binding q30d6@environment? q30d8@environment-symbols q30da@environment q30dc@null-environment q30de@scheme-report-environment q30e0@expand q30e2@eval q30e4@library-expander q30e6@boot-library-expand q30e8@rev-map-append q30ea@build-exports q30ec@make-export-subst q30ee@make-export-env/macros q30f0@generate-temporaries q30f2@free-identifier=? q30f4@bound-identifier=? q30f6@make-source-condition q30f8@extract-position-condition q30fa@expression-position q30fc@assertion-error q30fe@syntax-error q3100@syntax-violation* q3102@syntax-violation q3104@identifier? q3106@datum->syntax q3108@syntax->datum q310a@compile-r6rs-top-level q310c@pre-compile-r6rs-top-level q310e@interaction-environment q3110@top-level-context) (begin (set! q2db4@file-options-macro (lambda (q3111@x) ((lambda (q3114@valid-option?) (begin (set! q3114@valid-option? (lambda (q311d@x) (and (q2e2f@id? q311d@x) (memq (q2e31@id->sym q311d@x) '(no-fail no-create no-truncate))))) ((lambda (q3115@t) ((lambda (q3117@ls/false) (if (and q3117@ls/false (apply (lambda (q3119@opt*) (for-all q3114@valid-option? q3119@opt*)) q3117@ls/false)) (apply (lambda (q311b@opt*) (q2fea@bless (list 'make-file-options (list 'quote q311b@opt*)))) q3117@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3115@t))) (q3034@syntax-dispatch q3115@t '(_ . each-any)))) q3111@x))) '#f))) (set! q2db6@set-cons (lambda (q311f@x q3120@ls) (if (memq q311f@x q3120@ls) q3120@ls (cons q311f@x q3120@ls)))) (set! q2db8@set-union (lambda (q3123@ls1 q3124@ls2) (if (null? q3123@ls1) q3124@ls2 (if (memq (car q3123@ls1) q3124@ls2) (q2db8@set-union (cdr q3123@ls1) q3124@ls2) (cons (car q3123@ls1) (q2db8@set-union (cdr q3123@ls1) q3124@ls2)))))) (set! q2dbd@top-mark* '(top)) (set! q2dbf@top-marked? (lambda (q3127@m*) (memq 'top q3127@m*))) (set! q2dc1@gen-lexical (lambda (q3129@sym) (if (symbol? q3129@sym) (gensym q3129@sym) (if (q2df9@stx? q3129@sym) (q2dc1@gen-lexical (q2e31@id->sym q3129@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" q3129@sym))))) (set! q2dc3@gen-global (lambda (q312b@x) (q2dc1@gen-lexical q312b@x))) (set! q2dc5@gen-label (lambda (q312d@_) (gensym))) (set! q2dc7@gen-top-level-label (lambda (q312f@id q3130@rib) ((lambda (q3134@find) (begin (set! q3134@find (lambda (q313f@sym q3140@mark* q3141@sym* q3142@mark** q3143@label*) (and (pair? q3141@sym*) (if (and (eq? q313f@sym (car q3141@sym*)) (same-marks? q3140@mark* (car q3142@mark**))) (car q3143@label*) (q3134@find q313f@sym q3140@mark* (cdr q3141@sym*) (cdr q3142@mark**) (cdr q3143@label*)))))) ((lambda (q3135@sym q3136@mark*) ((lambda (q3139@sym*) ((lambda (q313b@t) (if q313b@t ((lambda (q313d@label) (if (q2c64@q2aa6@imported-label->binding q313d@label) (gensym) q313d@label)) q313b@t) (gensym))) (and (memq q3135@sym (q2dd1@rib-sym* q3130@rib)) (q3134@find q3135@sym q3136@mark* q3139@sym* (q2dd5@rib-mark** q3130@rib) (q2dd9@rib-label* q3130@rib))))) (q2dd1@rib-sym* q3130@rib))) (q2e31@id->sym q312f@id) (q2dff@stx-mark* q312f@id)))) '#f))) (set! q2dc9@gen-define-label+loc (lambda (q3149@id q314a@rib) ((lambda (q314d@t) (if q314d@t ((lambda (q314f@env) ((lambda (q3151@label q3152@locs) (values q3151@label ((lambda (q3155@t) (if q3155@t (cdr q3155@t) ((lambda (q3157@loc) (begin (q30cc@set-interaction-env-locs! q314f@env (cons (cons q3151@label q3157@loc) q3152@locs)) q3157@loc)) (q2dc1@gen-lexical q3149@id)))) (assq q3151@label q3152@locs)))) (q2dc7@gen-top-level-label q3149@id q314a@rib) (q30ca@interaction-env-locs q314f@env))) q314d@t) (values (gensym) (q2dc1@gen-lexical q3149@id)))) (q3110@top-level-context)))) (set! q2dcb@gen-define-label (lambda (q3159@id q315a@rib) (if (q3110@top-level-context) (q2dc7@gen-top-level-label q3159@id q315a@rib) (gensym)))) (set! q2dcd@make-rib (lambda q315d@args ((lambda (q315f@ret) (begin ((letrec ((q3161@loop (lambda (q3163@i q3164@args) (if (= q3163@i '6) '() (if (null? q3164@args) (begin (simple-struct-set! q315f@ret q3163@i 'uninitialized) (q3161@loop (+ q3163@i '1) q3164@args)) (begin (simple-struct-set! q315f@ret q3163@i (car q3164@args)) (q3161@loop (+ q3163@i '1) (cdr q3164@args)))))))) q3161@loop) '0 q315d@args) q315f@ret)) (make-simple-struct 'rib '6)))) (set! q2dcf@rib? (lambda (q3167@x) (and (simple-struct? q3167@x) (eq? (simple-struct-name q3167@x) 'rib)))) (set! q2dd1@rib-sym* (lambda (q3169@x) (simple-struct-ref q3169@x '0))) (set! q2dd3@set-rib-sym*! (lambda (q316b@x q316c@val) (simple-struct-set! q316b@x '0 q316c@val))) (set! q2dd5@rib-mark** (lambda (q316f@x) (simple-struct-ref q316f@x '1))) (set! q2dd7@set-rib-mark**! (lambda (q3171@x q3172@val) (simple-struct-set! q3171@x '1 q3172@val))) (set! q2dd9@rib-label* (lambda (q3175@x) (simple-struct-ref q3175@x '2))) (set! q2ddb@set-rib-label*! (lambda (q3177@x q3178@val) (simple-struct-set! q3177@x '2 q3178@val))) (set! q2ddd@rib-sealed/freq (lambda (q317b@x) (simple-struct-ref q317b@x '3))) (set! q2ddf@set-rib-sealed/freq! (lambda (q317d@x q317e@val) (simple-struct-set! q317d@x '3 q317e@val))) (set! q2de1@rib-cache (lambda (q3181@x) (simple-struct-ref q3181@x '4))) (set! q2de3@set-rib-cache! (lambda (q3183@x q3184@val) (simple-struct-set! q3183@x '4 q3184@val))) (set! q2de5@dummy '3) (set! q2de7@make-empty-rib (lambda () (q2dcd@make-rib '() '() '() '#f '#f))) (set! q2de9@extend-rib! (lambda (q3187@rib q3188@id q3189@label) ((lambda (q318e@find) (begin (set! q318e@find (lambda (q319b@sym q319c@mark* q319d@sym* q319e@mark** q319f@label*) (and (pair? q319d@sym*) (if (and (eq? q319b@sym (car q319d@sym*)) (same-marks? q319c@mark* (car q319e@mark**))) q319f@label* (q318e@find q319b@sym q319c@mark* (cdr q319d@sym*) (cdr q319e@mark**) (cdr q319f@label*)))))) (begin (if (q2ddd@rib-sealed/freq q3187@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" q3187@rib) (void)) ((lambda (q318f@sym q3190@mark*) ((lambda (q3193@sym*) ((lambda (q3195@t) (if q3195@t ((lambda (q3197@p) (if (not (eq? q3189@label (car q3197@p))) (if (q3110@top-level-context) (set-car! q3197@p q3189@label) (q3102@syntax-violation '#f '"multiple definitions of identifier" q3188@id)) (void))) q3195@t) (begin (if (q2de1@rib-cache q3187@rib) (hashtable-update! (q2de1@rib-cache q3187@rib) q318f@sym (lambda (q3199@e) (cons (cons q3190@mark* q3189@label) q3199@e)) '()) (void)) (q2dd3@set-rib-sym*! q3187@rib (cons q318f@sym q3193@sym*)) (q2dd7@set-rib-mark**! q3187@rib (cons q3190@mark* (q2dd5@rib-mark** q3187@rib))) (q2ddb@set-rib-label*! q3187@rib (cons q3189@label (q2dd9@rib-label* q3187@rib)))))) (and (memq q318f@sym (q2dd1@rib-sym* q3187@rib)) (q318e@find q318f@sym q3190@mark* q3193@sym* (q2dd5@rib-mark** q3187@rib) (q2dd9@rib-label* q3187@rib))))) (q2dd1@rib-sym* q3187@rib))) (q2e31@id->sym q3188@id) (q2dff@stx-mark* q3188@id))))) '#f))) (set! q2deb@extend-rib/nc! (lambda (q31a5@rib q31a6@id q31a7@label) ((lambda (q31ab@sym q31ac@mark*) ((lambda (q31af@sym*) (begin (if (q2de1@rib-cache q31a5@rib) (hashtable-update! (q2de1@rib-cache q31a5@rib) q31ab@sym (lambda (q31b1@e) (cons (cons q31ac@mark* q31a7@label) q31b1@e)) '()) (void)) (q2dd3@set-rib-sym*! q31a5@rib (cons q31ab@sym q31af@sym*)) (q2dd7@set-rib-mark**! q31a5@rib (cons q31ac@mark* (q2dd5@rib-mark** q31a5@rib))) (q2ddb@set-rib-label*! q31a5@rib (cons q31a7@label (q2dd9@rib-label* q31a5@rib))))) (q2dd1@rib-sym* q31a5@rib))) (q2e31@id->sym q31a6@id) (q2dff@stx-mark* q31a6@id)))) (set! q2ded@make-rib-map (lambda (q31b3@sym*) ((lambda (q31b5@ht) ((letrec ((q31b7@f (lambda (q31b9@i q31ba@sym*) (if (null? q31ba@sym*) q31b5@ht (begin (hashtable-update! q31b5@ht (car q31ba@sym*) (lambda (q31bd@x) (cons q31b9@i q31bd@x)) '()) (q31b7@f (+ q31b9@i '1) (cdr q31ba@sym*))))))) q31b7@f) '0 q31b3@sym*)) (make-eq-hashtable)))) (set! q2def@seal-rib! (lambda (q31bf@rib) ((lambda (q31c1@sym*) (if (not (null? q31c1@sym*)) (begin (q2dd3@set-rib-sym*! q31bf@rib (list->vector q31c1@sym*)) (q2dd7@set-rib-mark**! q31bf@rib (list->vector (q2dd5@rib-mark** q31bf@rib))) (q2ddb@set-rib-label*! q31bf@rib (list->vector (q2dd9@rib-label* q31bf@rib))) (q2ddf@set-rib-sealed/freq! q31bf@rib (q2ded@make-rib-map q31c1@sym*))) (void))) (q2dd1@rib-sym* q31bf@rib)))) (set! q2df1@unseal-rib! (lambda (q31c3@rib) (if (q2ddd@rib-sealed/freq q31c3@rib) (begin (q2ddf@set-rib-sealed/freq! q31c3@rib '#f) (q2dd3@set-rib-sym*! q31c3@rib (vector->list (q2dd1@rib-sym* q31c3@rib))) (q2dd7@set-rib-mark**! q31c3@rib (vector->list (q2dd5@rib-mark** q31c3@rib))) (q2ddb@set-rib-label*! q31c3@rib (vector->list (q2dd9@rib-label* q31c3@rib)))) (void)))) (set! q2df3@make-full-rib (lambda (q31c5@id* q31c6@label*) ((lambda (q31c9@r) (begin (q2def@seal-rib! q31c9@r) q31c9@r)) (q2dcd@make-rib (map q2e31@id->sym q31c5@id*) (map q2dff@stx-mark* q31c5@id*) q31c6@label* '#f '#f)))) (set! q2df5@rp (q2992@q288b@make-record-printer 'stx (lambda (q31cb@x q31cc@p q31cd@wr) (begin (display '"#<syntax " q31cc@p) (write (q2e43@stx->datum q31cb@x) q31cc@p) ((lambda (q31d1@expr) (if (q298a@q287b@annotation? q31d1@expr) ((lambda (q31d3@src) (if (pair? q31d3@src) (begin (display '" [" q31cc@p) (display (cdr q31d3@src) q31cc@p) (display '" of " q31cc@p) (display (car q31d3@src) q31cc@p) (display '"]" q31cc@p)) (void))) (q298b@q287d@annotation-source q31d1@expr)) (void))) (q2dfb@stx-expr q31cb@x)) (display '">" q31cc@p))))) (set! q2df7@make-stx (lambda q31d5@args ((lambda (q31d7@ret) (begin ((letrec ((q31d9@loop (lambda (q31db@i q31dc@args) (if (= q31db@i '5) '() (if (null? q31dc@args) (begin (simple-struct-set! q31d7@ret q31db@i 'uninitialized) (q31d9@loop (+ q31db@i '1) q31dc@args)) (begin (simple-struct-set! q31d7@ret q31db@i (car q31dc@args)) (q31d9@loop (+ q31db@i '1) (cdr q31dc@args)))))))) q31d9@loop) '0 q31d5@args) q31d7@ret)) (make-simple-struct 'stx '5)))) (set! q2df9@stx? (lambda (q31df@x) (and (simple-struct? q31df@x) (eq? (simple-struct-name q31df@x) 'stx)))) (set! q2dfb@stx-expr (lambda (q31e1@x) (simple-struct-ref q31e1@x '0))) (set! q2dfd@set-stx-expr! (lambda (q31e3@x q31e4@val) (simple-struct-set! q31e3@x '0 q31e4@val))) (set! q2dff@stx-mark* (lambda (q31e7@x) (simple-struct-ref q31e7@x '1))) (set! q2e01@set-stx-mark*! (lambda (q31e9@x q31ea@val) (simple-struct-set! q31e9@x '1 q31ea@val))) (set! q2e03@stx-subst* (lambda (q31ed@x) (simple-struct-ref q31ed@x '2))) (set! q2e05@set-stx-subst*! (lambda (q31ef@x q31f0@val) (simple-struct-set! q31ef@x '2 q31f0@val))) (set! q2e07@stx-ae* (lambda (q31f3@x) (simple-struct-ref q31f3@x '3))) (set! q2e09@set-stx-ae*! (lambda (q31f5@x q31f6@val) (simple-struct-set! q31f5@x '3 q31f6@val))) (set! q2e0b@dummy '3) (set! q2e0d@datum->stx (lambda (q31f9@id q31fa@datum) (q2df7@make-stx q31fa@datum (q2dff@stx-mark* q31f9@id) (q2e03@stx-subst* q31f9@id) (q2e07@stx-ae* q31f9@id)))) (set! q2e0f@gen-mark (lambda () (string '#\m))) (set! q2e11@anti-mark '#f) (set! q2e13@anti-mark? not) (set! q2e15@join-wraps (lambda (q31fd@m1* q31fe@s1* q31ff@ae1* q3200@e) ((lambda (q3206@cancel) (begin (set! q3206@cancel (lambda (q320d@ls1 q320e@ls2) ((letrec ((q3211@f (lambda (q3213@x q3214@ls1) (if (null? q3214@ls1) (cdr q320e@ls2) (cons q3213@x (q3211@f (car q3214@ls1) (cdr q3214@ls1))))))) q3211@f) (car q320d@ls1) (cdr q320d@ls1)))) ((lambda (q3207@m2* q3208@s2* q3209@ae2*) (if (and (not (null? q31fd@m1*)) (not (null? q3207@m2*)) (q2e13@anti-mark? (car q3207@m2*))) (values (q3206@cancel q31fd@m1* q3207@m2*) (q3206@cancel q31fe@s1* q3208@s2*) (q3206@cancel q31ff@ae1* q3209@ae2*)) (values (append q31fd@m1* q3207@m2*) (append q31fe@s1* q3208@s2*) (append q31ff@ae1* q3209@ae2*)))) (q2dff@stx-mark* q3200@e) (q2e03@stx-subst* q3200@e) (q2e07@stx-ae* q3200@e)))) '#f))) (set! q2e17@mkstx (lambda (q3217@e q3218@m* q3219@s* q321a@ae*) (if (and (q2df9@stx? q3217@e) (not (q2dbf@top-marked? q3218@m*))) (call-with-values (lambda () (q2e15@join-wraps q3218@m* q3219@s* q321a@ae* q3217@e)) (lambda (q3225@q3220 q3226@q3222 q3227@q3224) ((lambda (q322b@ae* q322c@s* q322d@m*) (q2df7@make-stx (q2dfb@stx-expr q3217@e) q322d@m* q322c@s* q322b@ae*)) q3227@q3224 q3226@q3222 q3225@q3220))) (q2df7@make-stx q3217@e q3218@m* q3219@s* q321a@ae*)))) (set! q2e19@add-mark (lambda (q3231@m q3232@e q3233@ae) (q2e17@mkstx q3232@e (list q3231@m) '(shift) (list q3233@ae)))) (set! q2e1b@add-subst (lambda (q3237@subst q3238@e) (q2e17@mkstx q3238@e '() (list q3237@subst) '()))) (set! q2e1d@syntax-kind? (lambda (q323b@x q323c@p?) (if (q2df9@stx? q323b@x) (q2e1d@syntax-kind? (q2dfb@stx-expr q323b@x) q323c@p?) (if (q298a@q287b@annotation? q323b@x) (q2e1d@syntax-kind? (q298c@q287f@annotation-expression q323b@x) q323c@p?) (q323c@p? q323b@x))))) (set! q2e1f@syntax-vector->list (lambda (q323f@x) (if (q2df9@stx? q323f@x) ((lambda (q3241@ls q3242@m* q3243@s* q3244@ae*) (map (lambda (q3249@x) (q2e17@mkstx q3249@x q3242@m* q3243@s* q3244@ae*)) q3241@ls)) (q2e1f@syntax-vector->list (q2dfb@stx-expr q323f@x)) (q2dff@stx-mark* q323f@x) (q2e03@stx-subst* q323f@x) (q2e07@stx-ae* q323f@x)) (if (q298a@q287b@annotation? q323f@x) (q2e1f@syntax-vector->list (q298c@q287f@annotation-expression q323f@x)) (if (vector? q323f@x) (vector->list q323f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" q323f@x)))))) (set! q2e21@syntax-pair? (lambda (q324b@x) (q2e1d@syntax-kind? q324b@x pair?))) (set! q2e23@syntax-vector? (lambda (q324d@x) (q2e1d@syntax-kind? q324d@x vector?))) (set! q2e25@syntax-null? (lambda (q324f@x) (q2e1d@syntax-kind? q324f@x null?))) (set! q2e27@syntax-list? (lambda (q3251@x) (or (q2e25@syntax-null? q3251@x) (and (q2e21@syntax-pair? q3251@x) (q2e27@syntax-list? (q2e2b@syntax-cdr q3251@x)))))) (set! q2e29@syntax-car (lambda (q3253@x) (if (q2df9@stx? q3253@x) (q2e17@mkstx (q2e29@syntax-car (q2dfb@stx-expr q3253@x)) (q2dff@stx-mark* q3253@x) (q2e03@stx-subst* q3253@x) (q2e07@stx-ae* q3253@x)) (if (q298a@q287b@annotation? q3253@x) (q2e29@syntax-car (q298c@q287f@annotation-expression q3253@x)) (if (pair? q3253@x) (car q3253@x) (assertion-violation 'syntax-car '"BUG: not a pair" q3253@x)))))) (set! q2e2b@syntax-cdr (lambda (q3255@x) (if (q2df9@stx? q3255@x) (q2e17@mkstx (q2e2b@syntax-cdr (q2dfb@stx-expr q3255@x)) (q2dff@stx-mark* q3255@x) (q2e03@stx-subst* q3255@x) (q2e07@stx-ae* q3255@x)) (if (q298a@q287b@annotation? q3255@x) (q2e2b@syntax-cdr (q298c@q287f@annotation-expression q3255@x)) (if (pair? q3255@x) (cdr q3255@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" q3255@x)))))) (set! q2e2d@syntax->list (lambda (q3257@x) (if (q2e21@syntax-pair? q3257@x) (cons (q2e29@syntax-car q3257@x) (q2e2d@syntax->list (q2e2b@syntax-cdr q3257@x))) (if (q2e25@syntax-null? q3257@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" q3257@x))))) (set! q2e2f@id? (lambda (q3259@x) (and (q2df9@stx? q3259@x) (symbol? (q2dfb@stx-expr q3259@x))))) (set! q2e31@id->sym (lambda (q325b@x) (q2dfb@stx-expr q325b@x))) (set! q2e33@bound-id=? (lambda (q325d@x q325e@y) (and (eq? (q2e31@id->sym q325d@x) (q2e31@id->sym q325e@y)) (same-marks? (q2dff@stx-mark* q325d@x) (q2dff@stx-mark* q325e@y))))) (set! q2e35@free-id=? (lambda (q3261@i q3262@j) ((lambda (q3265@t0 q3266@t1) (if (or q3265@t0 q3266@t1) (eq? q3265@t0 q3266@t1) (eq? (q2e31@id->sym q3261@i) (q2e31@id->sym q3262@j)))) (id->real-label q3261@i) (id->real-label q3262@j)))) (set! q2e37@valid-bound-ids? (lambda (q3269@id*) (and (for-all q2e2f@id? q3269@id*) (q2e39@distinct-bound-ids? q3269@id*)))) (set! q2e39@distinct-bound-ids? (lambda (q326b@id*) (or (null? q326b@id*) (and (not (q2e3b@bound-id-member? (car q326b@id*) (cdr q326b@id*))) (q2e39@distinct-bound-ids? (cdr q326b@id*)))))) (set! q2e3b@bound-id-member? (lambda (q326d@id q326e@id*) (and (pair? q326e@id*) (or (q2e33@bound-id=? q326d@id (car q326e@id*)) (q2e3b@bound-id-member? q326d@id (cdr q326e@id*)))))) (set! q2e3d@self-evaluating? (lambda (q3271@x) (or (number? q3271@x) (string? q3271@x) (char? q3271@x) (boolean? q3271@x) (regexp? q3271@x) (bytevector? q3271@x)))) (set! q2e3f@strip-annotations (lambda (q3273@x) (if (pair? q3273@x) (cons (q2e3f@strip-annotations (car q3273@x)) (q2e3f@strip-annotations (cdr q3273@x))) (if (vector? q3273@x) (vector-map q2e3f@strip-annotations q3273@x) (if (q298a@q287b@annotation? q3273@x) (q2989@q2879@annotation-stripped q3273@x) q3273@x))))) (set! q2e41@strip (lambda (q3275@x q3276@m*) (if (q2dbf@top-marked? q3276@m*) (if (or (q298a@q287b@annotation? q3275@x) (and (pair? q3275@x) (q298a@q287b@annotation? (car q3275@x))) (and (vector? q3275@x) (> (vector-length q3275@x) '0) (q298a@q287b@annotation? (vector-ref q3275@x '0)))) (q2e3f@strip-annotations q3275@x) q3275@x) ((letrec ((q3279@f (lambda (q327b@x) (if (q2df9@stx? q327b@x) (q2e41@strip (q2dfb@stx-expr q327b@x) (q2dff@stx-mark* q327b@x)) (if (q298a@q287b@annotation? q327b@x) (q2989@q2879@annotation-stripped q327b@x) (if (pair? q327b@x) ((lambda (q327d@a q327e@d) (if (and (eq? q327d@a (car q327b@x)) (eq? q327e@d (cdr q327b@x))) q327b@x (cons q327d@a q327e@d))) (q3279@f (car q327b@x)) (q3279@f (cdr q327b@x))) (if (vector? q327b@x) ((lambda (q3281@old) ((lambda (q3283@new) (if (for-all eq? q3281@old q3283@new) q327b@x (list->vector q3283@new))) (map q3279@f q3281@old))) (vector->list q327b@x)) q327b@x))))))) q3279@f) q3275@x)))) (set! q2e43@stx->datum (lambda (q3285@x) (q2e41@strip q3285@x '()))) (set! q2e45@id->label (lambda (q3287@id) (or (id->real-label q3287@id) ((lambda (q3289@t) (if q3289@t ((lambda (q328b@env) ((lambda (q328d@rib) (call-with-values (lambda () (q2dc9@gen-define-label+loc q3287@id q328d@rib)) (lambda (q3293@q3290 q3294@q3292) ((lambda (q3297@loc_ q3298@lab) (begin (q2de9@extend-rib! q328d@rib q3287@id q3298@lab) q3298@lab)) q3294@q3292 q3293@q3290)))) (q30c2@interaction-env-rib q328b@env))) q3289@t) '#f)) (q3110@top-level-context))))) (set! q2e47@label->binding (lambda (q329b@x q329c@r) ((lambda (q329f@t) (if q329f@t ((lambda (q32a1@b) (if (and (pair? q32a1@b) (eq? (car q32a1@b) '$core-rtd)) (cons '$rtd (map q2fea@bless (cdr q32a1@b))) (if (and (pair? q32a1@b) (eq? (car q32a1@b) 'global-rtd)) ((lambda (q32a3@lib q32a4@loc) (cons '$rtd (symbol-value q32a4@loc))) (cadr q32a1@b) (cddr q32a1@b)) q32a1@b))) q329f@t) ((lambda (q32a7@t) (if q32a7@t (cdr q32a7@t) ((lambda (q32a9@t) (if q32a9@t ((lambda (q32ab@env) ((lambda (q32ad@t) (if q32ad@t ((lambda (q32af@p) (cons* 'lexical (cdr q32af@p) '#f)) q32ad@t) '(displaced-lexical . #f))) (assq q329b@x (q30ca@interaction-env-locs q32ab@env)))) q32a9@t) '(displaced-lexical . #f))) (q3110@top-level-context)))) (assq q329b@x q329c@r)))) (q2c64@q2aa6@imported-label->binding q329b@x)))) (set! q2e49@make-binding cons) (set! q2e4b@binding-type car) (set! q2e4d@binding-value cdr) (set! q2e4f@raise-unbound-error (lambda (q32b1@id) (q3100@syntax-violation* '#f '"unbound identifier" q32b1@id (q4eae@q4cf4@make-undefined-violation)))) (set! q2e51@syntax-type (lambda (q32b3@e q32b4@r) (if (q2e2f@id? q32b3@e) ((lambda (q32b7@id) ((lambda (q32b9@label) ((lambda (q32bb@b) ((lambda (q32bd@type) ((lambda () (begin (if (not q32b9@label) (q2e4f@raise-unbound-error q32b7@id) (void)) ((lambda (q32bf@t) (if (memv q32bf@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values q32bd@type (q2e4d@binding-value q32bb@b) q32b7@id) (values 'other '#f '#f))) q32bd@type))))) (q2e4b@binding-type q32bb@b))) (q2e47@label->binding q32b9@label q32b4@r))) (q2e45@id->label q32b7@id))) q32b3@e) (if (q2e21@syntax-pair? q32b3@e) ((lambda (q32c1@id) (if (q2e2f@id? q32c1@id) ((lambda (q32c3@label) ((lambda (q32c5@b) ((lambda (q32c7@type) ((lambda () (begin (if (not q32c3@label) (q2e4f@raise-unbound-error q32c1@id) (void)) ((lambda (q32c9@t) (if (memv q32c9@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values q32c7@type (q2e4d@binding-value q32c5@b) q32c1@id) (values 'call '#f '#f))) q32c7@type))))) (q2e4b@binding-type q32c5@b))) (q2e47@label->binding q32c3@label q32b4@r))) (q2e45@id->label q32c1@id)) (values 'call '#f '#f))) (q2e29@syntax-car q32b3@e)) ((lambda (q32cb@d) (if (q2e3d@self-evaluating? q32cb@d) (values 'constant q32cb@d '#f) (values 'other '#f '#f))) (q2e43@stx->datum q32b3@e)))))) (set! q2e5f@sanitize-binding (lambda (q32cd@x q32ce@src) (if (procedure? q32cd@x) (cons* 'local-macro q32cd@x q32ce@src) (if (and (pair? q32cd@x) (eq? (car q32cd@x) 'macro!) (procedure? (cdr q32cd@x))) (cons* 'local-macro! (cdr q32cd@x) q32ce@src) (if (and (pair? q32cd@x) (eq? (car q32cd@x) '$rtd)) q32cd@x (assertion-violation 'expand '"invalid transformer" q32cd@x)))))) (set! q2e61@make-variable-transformer (lambda (q32d1@x) (if (procedure? q32d1@x) (cons 'macro! q32d1@x) (assertion-violation 'make-variable-transformer '"not a procedure" q32d1@x)))) (set! q2e63@variable-transformer? (lambda (q32d3@x) (and (pair? q32d3@x) (eq? (car q32d3@x) 'macro!) (procedure? (cdr q32d3@x))))) (set! q2e65@variable-transformer-procedure (lambda (q32d5@x) (if (q2e63@variable-transformer? q32d5@x) (cdr q32d5@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" q32d5@x)))) (set! q2e67@make-eval-transformer (lambda (q32d7@x) (q2e5f@sanitize-binding (eval-core (q29ea@q29a2@expanded->core q32d7@x)) q32d7@x))) (set! q2fb8@parse-define (lambda (q32d9@x) ((lambda (q32db@t) ((lambda (q32dd@ls/false) (if (and q32dd@ls/false (apply (lambda (q32df@id q32e0@fmls q32e1@b q32e2@b*) (q2e2f@id? q32df@id)) q32dd@ls/false)) (apply (lambda (q32e7@id q32e8@fmls q32e9@b q32ea@b*) (begin (q305a@verify-formals q32e8@fmls q32d9@x) (values q32e7@id (cons 'defun (cons q32e8@fmls (cons q32e9@b q32ea@b*)))))) q32dd@ls/false) ((lambda (q32ef@t) ((lambda (q32f1@ls/false) (if (and q32f1@ls/false (apply (lambda (q32f3@id q32f4@val) (q2e2f@id? q32f3@id)) q32f1@ls/false)) (apply (lambda (q32f7@id q32f8@val) (values q32f7@id (cons 'expr q32f8@val))) q32f1@ls/false) ((lambda (q32fb@t) ((lambda (q32fd@ls/false) (if (and q32fd@ls/false (apply (lambda (q32ff@id) (q2e2f@id? q32ff@id)) q32fd@ls/false)) (apply (lambda (q3301@id) (values q3301@id (cons 'expr (q2fea@bless '(void))))) q32fd@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q32fb@t))) (q3034@syntax-dispatch q32fb@t '(_ any)))) q32ef@t))) (q3034@syntax-dispatch q32ef@t '(_ any any)))) q32db@t))) (q3034@syntax-dispatch q32db@t '(_ (any . any) any . each-any)))) q32d9@x))) (set! q2fba@parse-define-syntax (lambda (q3303@x) ((lambda (q3305@t) ((lambda (q3307@ls/false) (if (and q3307@ls/false (apply (lambda (q3309@id q330a@val) (q2e2f@id? q3309@id)) q3307@ls/false)) (apply (lambda (q330d@id q330e@val) (values q330d@id q330e@val)) q3307@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3305@t))) (q3034@syntax-dispatch q3305@t '(_ any any)))) q3303@x))) (set! q2fbc@scheme-stx-hashtable (make-eq-hashtable)) (set! q2fbe@scheme-stx (lambda (q3311@sym) (or (hashtable-ref q2fbc@scheme-stx-hashtable q3311@sym '#f) ((lambda (q3313@subst) ((lambda (q3315@stx) ((lambda (q3317@stx) ((lambda () (begin (hashtable-set! q2fbc@scheme-stx-hashtable q3311@sym q3317@stx) q3317@stx)))) ((lambda (q3319@t) (if q3319@t ((lambda (q331b@x) ((lambda (q331d@name q331e@label) (q2e1b@add-subst (q2dcd@make-rib (list q331d@name) (list q2dbd@top-mark*) (list q331e@label) '#f '#f) q3315@stx)) (car q331b@x) (cdr q331b@x))) q3319@t) q3315@stx)) (assq q3311@sym q3313@subst)))) (q2df7@make-stx q3311@sym q2dbd@top-mark* '() '()))) (q2c40@q2a5e@library-subst (q2c5e@q2a9a@find-library-by-name '(psyntax system $all))))))) (set! q2fc0@lexical-var car) (set! q2fc2@lexical-mutable? cdr) (set! q2fc4@set-lexical-mutable! set-cdr!) (set! q2fc6@add-lexical (lambda (q3321@lab q3322@lex q3323@r) (cons (cons* q3321@lab 'lexical q3322@lex '#f) q3323@r))) (set! q2fc8@add-lexicals (lambda (q3327@lab* q3328@lex* q3329@r) (if (null? q3327@lab*) q3329@r (q2fc8@add-lexicals (cdr q3327@lab*) (cdr q3328@lex*) (q2fc6@add-lexical (car q3327@lab*) (car q3328@lex*) q3329@r))))) (set! q2fca@letrec-helper (lambda (q332d@e q332e@r q332f@mr q3330@build) ((lambda (q3335@t) ((lambda (q3337@ls/false) (if q3337@ls/false (apply (lambda (q3339@lhs* q333a@rhs* q333b@b q333c@b*) (if (not (q2e37@valid-bound-ids? q3339@lhs*)) (q2fee@invalid-fmls-error q332d@e q3339@lhs*) ((lambda (q3341@lex* q3342@lab*) ((lambda (q3345@rib q3346@r) ((lambda (q3349@body q334a@rhs*) (q3330@build '#f q3341@lex* q334a@rhs* q3349@body)) (q306c@chi-internal (q2e1b@add-subst q3345@rib (cons q333b@b q333c@b*)) q3346@r q332f@mr) (q3052@chi-expr* (map (lambda (q334d@x) (q2e1b@add-subst q3345@rib q334d@x)) q333a@rhs*) q3346@r q332f@mr))) (q2df3@make-full-rib q3339@lhs* q3342@lab*) (q2fc8@add-lexicals q3342@lab* q3341@lex* q332e@r))) (map q2dc1@gen-lexical q3339@lhs*) (map q2dc5@gen-label q3339@lhs*)))) q3337@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3335@t))) (q3034@syntax-dispatch q3335@t '(_ #(each (any any)) any . each-any)))) q332d@e))) (set! q2fcc@letrec-transformer (lambda (q334f@e q3350@r q3351@mr) (q2fca@letrec-helper q334f@e q3350@r q3351@mr q2da2@q2d13@build-letrec))) (set! q2fce@letrec*-transformer (lambda (q3355@e q3356@r q3357@mr) (q2fca@letrec-helper q3355@e q3356@r q3357@mr q2da3@q2d15@build-letrec*))) (set! q2fd0@fluid-let-syntax-transformer (lambda (q335b@e q335c@r q335d@mr) ((lambda (q3362@lookup) (begin (set! q3362@lookup (lambda (q3375@x) (or (q2e45@id->label q3375@x) (q3102@syntax-violation '#f '"unbound identifier" q335b@e q3375@x)))) ((lambda (q3363@t) ((lambda (q3365@ls/false) (if q3365@ls/false (apply (lambda (q3367@lhs* q3368@rhs* q3369@b q336a@b*) (if (not (q2e37@valid-bound-ids? q3367@lhs*)) (q2fee@invalid-fmls-error q335b@e q3367@lhs*) ((lambda (q336f@lab* q3370@rhs*) (q306c@chi-internal (cons q3369@b q336a@b*) (append (map cons q336f@lab* q3370@rhs*) q335c@r) (append (map cons q336f@lab* q3370@rhs*) q335d@mr))) (map q3362@lookup q3367@lhs*) (map (lambda (q3373@x) (q2e67@make-eval-transformer (q3088@expand-transformer q3373@x q335d@mr))) q3368@rhs*)))) q3365@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3363@t))) (q3034@syntax-dispatch q3363@t '(_ #(each (any any)) any . each-any)))) q335b@e))) '#f))) (set! q2fd2@type-descriptor-transformer (lambda (q3377@e q3378@r q3379@mr) ((lambda (q337d@t) ((lambda (q337f@ls/false) (if (and q337f@ls/false (apply (lambda (q3381@id) (q2e2f@id? q3381@id)) q337f@ls/false)) (apply (lambda (q3383@id) ((lambda (q3385@lab) ((lambda (q3387@b) ((lambda (q3389@type) ((lambda () (begin (if (not q3385@lab) (q2e4f@raise-unbound-error q3383@id) (void)) (if (not (and (eq? q3389@type '$rtd) (not (list? (q2e4d@binding-value q3387@b))))) (q3102@syntax-violation '#f '"not a record type" q3377@e) (void)) (list 'quote (q2e4d@binding-value q3387@b)))))) (q2e4b@binding-type q3387@b))) (q2e47@label->binding q3385@lab q3378@r))) (q2e45@id->label q3383@id))) q337f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q337d@t))) (q3034@syntax-dispatch q337d@t '(_ any)))) q3377@e))) (set! q2fd4@record-type-descriptor-transformer (lambda (q338b@e q338c@r q338d@mr) ((lambda (q3391@t) ((lambda (q3393@ls/false) (if (and q3393@ls/false (apply (lambda (q3395@id) (q2e2f@id? q3395@id)) q3393@ls/false)) (apply (lambda (q3397@id) ((lambda (q3399@lab) ((lambda (q339b@b) ((lambda (q339d@type) ((lambda () (begin (if (not q3399@lab) (q2e4f@raise-unbound-error q3397@id) (void)) (if (not (and (eq? q339d@type '$rtd) (list? (q2e4d@binding-value q339b@b)))) (q3102@syntax-violation '#f '"not a record type" q338b@e) (void)) (q3056@chi-expr (car (q2e4d@binding-value q339b@b)) q338c@r q338d@mr))))) (q2e4b@binding-type q339b@b))) (q2e47@label->binding q3399@lab q338c@r))) (q2e45@id->label q3397@id))) q3393@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3391@t))) (q3034@syntax-dispatch q3391@t '(_ any)))) q338b@e))) (set! q2fd6@record-constructor-descriptor-transformer (lambda (q339f@e q33a0@r q33a1@mr) ((lambda (q33a5@t) ((lambda (q33a7@ls/false) (if (and q33a7@ls/false (apply (lambda (q33a9@id) (q2e2f@id? q33a9@id)) q33a7@ls/false)) (apply (lambda (q33ab@id) ((lambda (q33ad@lab) ((lambda (q33af@b) ((lambda (q33b1@type) ((lambda () (begin (if (not q33ad@lab) (q2e4f@raise-unbound-error q33ab@id) (void)) (if (not (and (eq? q33b1@type '$rtd) (list? (q2e4d@binding-value q33af@b)))) (q3102@syntax-violation '#f '"invalid type" q339f@e) (void)) (q3056@chi-expr (cadr (q2e4d@binding-value q33af@b)) q33a0@r q33a1@mr))))) (q2e4b@binding-type q33af@b))) (q2e47@label->binding q33ad@lab q33a0@r))) (q2e45@id->label q33ab@id))) q33a7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q33a5@t))) (q3034@syntax-dispatch q33a5@t '(_ any)))) q339f@e))) (set! q2fd8@when-macro (lambda (q33b3@e) ((lambda (q33b5@t) ((lambda (q33b7@ls/false) (if q33b7@ls/false (apply (lambda (q33b9@test q33ba@e q33bb@e*) (q2fea@bless (list 'if q33b9@test (cons 'begin (cons q33ba@e q33bb@e*))))) q33b7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q33b5@t))) (q3034@syntax-dispatch q33b5@t '(_ any any . each-any)))) q33b3@e))) (set! q2fda@unless-macro (lambda (q33bf@e) ((lambda (q33c1@t) ((lambda (q33c3@ls/false) (if q33c3@ls/false (apply (lambda (q33c5@test q33c6@e q33c7@e*) (q2fea@bless (list 'if (list 'not q33c5@test) (cons 'begin (cons q33c6@e q33c7@e*))))) q33c3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q33c1@t))) (q3034@syntax-dispatch q33c1@t '(_ any any . each-any)))) q33bf@e))) (set! q2fdc@if-transformer (lambda (q33cb@e q33cc@r q33cd@mr) ((lambda (q33d1@t) ((lambda (q33d3@ls/false) (if q33d3@ls/false (apply (lambda (q33d5@e0 q33d6@e1 q33d7@e2) (list 'if (q3056@chi-expr q33d5@e0 q33cc@r q33cd@mr) (q3056@chi-expr q33d6@e1 q33cc@r q33cd@mr) (q3056@chi-expr q33d7@e2 q33cc@r q33cd@mr))) q33d3@ls/false) ((lambda (q33db@t) ((lambda (q33dd@ls/false) (if q33dd@ls/false (apply (lambda (q33df@e0 q33e0@e1) (list 'if (q3056@chi-expr q33df@e0 q33cc@r q33cd@mr) (q3056@chi-expr q33e0@e1 q33cc@r q33cd@mr) (q2da1@q2d11@build-void))) q33dd@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q33db@t))) (q3034@syntax-dispatch q33db@t '(_ any any)))) q33d1@t))) (q3034@syntax-dispatch q33d1@t '(_ any any any)))) q33cb@e))) (set! q2fde@and-transformer (lambda (q33e3@e q33e4@r q33e5@mr) ((lambda (q33e9@t) ((lambda (q33eb@ls/false) (if q33eb@ls/false (apply (lambda (q33ed@e*) (cons 'and (q3052@chi-expr* q33ed@e* q33e4@r q33e5@mr))) q33eb@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q33e9@t))) (q3034@syntax-dispatch q33e9@t '(_ . each-any)))) q33e3@e))) (set! q2fe0@or-transformer (lambda (q33ef@e q33f0@r q33f1@mr) ((lambda (q33f5@t) ((lambda (q33f7@ls/false) (if q33f7@ls/false (apply (lambda (q33f9@e*) (cons 'or (q3052@chi-expr* q33f9@e* q33f0@r q33f1@mr))) q33f7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q33f5@t))) (q3034@syntax-dispatch q33f5@t '(_ . each-any)))) q33ef@e))) (set! q2fe2@case-macro (lambda (q33fb@e) ((lambda (q33fe@build-last q3400@build-one) (begin (set! q33fe@build-last (lambda (q3425@cls) ((lambda (q3427@t) ((lambda (q3429@ls/false) (if q3429@ls/false (apply (lambda (q342b@e q342c@e*) (cons 'begin (cons q342b@e q342c@e*))) q3429@ls/false) ((lambda (q342f@t) ((lambda (q3431@ls/false) (if q3431@ls/false (apply (lambda () (q3400@build-one q3425@cls '(if #f #f))) q3431@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q342f@t))) (q3034@syntax-dispatch q342f@t '_))) q3427@t))) (q3034@syntax-dispatch q3427@t '(#(scheme-id else) any . each-any)))) q3425@cls))) (set! q3400@build-one (lambda (q3417@cls q3418@k) ((lambda (q341b@t) ((lambda (q341d@ls/false) (if q341d@ls/false (apply (lambda (q341f@d* q3420@e q3421@e*) (list 'if (list 'memv 't (list 'quote q341f@d*)) (cons 'begin (cons q3420@e q3421@e*)) q3418@k)) q341d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q341b@t))) (q3034@syntax-dispatch q341b@t '(each-any any . each-any)))) q3417@cls))) ((lambda (q3401@t) ((lambda (q3403@ls/false) (if q3403@ls/false (apply (lambda (q3405@expr) (q2fea@bless (cons 'let (cons (list (list 't q3405@expr)) '((if #f #f)))))) q3403@ls/false) ((lambda (q3407@t) ((lambda (q3409@ls/false) (if q3409@ls/false (apply (lambda (q340b@expr q340c@cls q340d@cls*) (q2fea@bless (list 'let (list (list 't q340b@expr)) ((letrec ((q3411@f (lambda (q3413@cls q3414@cls*) (if (null? q3414@cls*) (q33fe@build-last q3413@cls) (q3400@build-one q3413@cls (q3411@f (car q3414@cls*) (cdr q3414@cls*))))))) q3411@f) q340c@cls q340d@cls*)))) q3409@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3407@t))) (q3034@syntax-dispatch q3407@t '(_ any any . each-any)))) q3401@t))) (q3034@syntax-dispatch q3401@t '(_ any)))) q33fb@e))) '#f '#f))) (set! q2fe4@quote-transformer (lambda (q3433@e q3434@r q3435@mr) ((lambda (q3439@t) ((lambda (q343b@ls/false) (if q343b@ls/false (apply (lambda (q343d@datum) (list 'quote (q2e43@stx->datum q343d@datum))) q343b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3439@t))) (q3034@syntax-dispatch q3439@t '(_ any)))) q3433@e))) (set! q2fe6@case-lambda-transformer (lambda (q343f@e q3440@r q3441@mr) ((lambda (q3445@t) ((lambda (q3447@ls/false) (if q3447@ls/false (apply (lambda (q3449@fmls* q344a@b* q344b@b**) (call-with-values (lambda () (q305e@chi-lambda-clause* q343f@e q3449@fmls* (map cons q344a@b* q344b@b**) q3440@r q3441@mr)) (lambda (q3453@q3450 q3454@q3452) ((lambda (q3457@body* q3458@fmls*) (q2d9e@q2cdf@build-case-lambda '#f q3458@fmls* q3457@body*)) q3454@q3452 q3453@q3450)))) q3447@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3445@t))) (q3034@syntax-dispatch q3445@t '(_ . #(each (any any . each-any)))))) q343f@e))) (set! q2fe8@lambda-transformer (lambda (q345b@e q345c@r q345d@mr) ((lambda (q3461@t) ((lambda (q3463@ls/false) (if q3463@ls/false (apply (lambda (q3465@fmls q3466@b q3467@b*) (call-with-values (lambda () (q305c@chi-lambda-clause q345b@e q3465@fmls (cons q3466@b q3467@b*) q345c@r q345d@mr)) (lambda (q346f@q346c q3470@q346e) ((lambda (q3473@body q3474@fmls) (q2d9d@q2cdd@build-lambda '#f q3474@fmls q3473@body)) q3470@q346e q346f@q346c)))) q3463@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3461@t))) (q3034@syntax-dispatch q3461@t '(_ any any . each-any)))) q345b@e))) (set! q2fea@bless (lambda (q3477@x) (q2e17@mkstx ((letrec ((q3479@f (lambda (q347b@x) (if (q2df9@stx? q347b@x) q347b@x (if (pair? q347b@x) (cons (q3479@f (car q347b@x)) (q3479@f (cdr q347b@x))) (if (symbol? q347b@x) (q2fbe@scheme-stx q347b@x) (if (vector? q347b@x) (vector-map q3479@f q347b@x) q347b@x))))))) q3479@f) q3477@x) '() '() '()))) (set! q2fec@with-syntax-macro (lambda (q347d@e) ((lambda (q347f@t) ((lambda (q3481@ls/false) (if q3481@ls/false (apply (lambda (q3483@pat* q3484@expr* q3485@b q3486@b*) ((lambda (q348b@idn*) (begin (q305a@verify-formals (map car q348b@idn*) q347d@e) ((lambda (q348d@t*) (q2fea@bless (list 'let (map list q348d@t* q3484@expr*) ((letrec ((q348f@f (lambda (q3491@pat* q3492@t*) (if (null? q3491@pat*) (cons 'begin (cons '#f (cons q3485@b q3486@b*))) (list 'syntax-case (car q3492@t*) '() (list (car q3491@pat*) (q348f@f (cdr q3491@pat*) (cdr q3492@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car q3491@pat*)) (car q3492@t*)))))))) q348f@f) q3483@pat* q348d@t*)))) (q30f0@generate-temporaries q3484@expr*)))) ((letrec ((q3495@f (lambda (q3497@pat*) (if (null? q3497@pat*) '() (call-with-values (lambda () (q3032@convert-pattern (car q3497@pat*) '())) (lambda (q349d@q349a q349e@q349c) ((lambda (q34a1@idn* q34a2@pat) (append q34a1@idn* (q3495@f (cdr q3497@pat*)))) q349e@q349c q349d@q349a))))))) q3495@f) q3483@pat*))) q3481@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q347f@t))) (q3034@syntax-dispatch q347f@t '(_ #(each (any any)) any . each-any)))) q347d@e))) (set! q2fee@invalid-fmls-error (lambda (q34a5@stx q34a6@fmls) ((lambda (q34a9@t) ((lambda (q34ab@ls/false) (if q34ab@ls/false (apply (lambda (q34ad@id* q34ae@last) ((letrec ((q34b1@f (lambda (q34b3@id*) (if (null? q34b3@id*) (values) (if (not (q2e2f@id? (car q34b3@id*))) (q3102@syntax-violation '#f '"not an identifier" q34a5@stx (car q34b3@id*)) (begin (q34b1@f (cdr q34b3@id*)) (if (q2e3b@bound-id-member? (car q34b3@id*) (cdr q34b3@id*)) (q3102@syntax-violation '#f '"duplicate binding" q34a5@stx (car q34b3@id*)) (void)))))))) q34b1@f) (if (q2e2f@id? q34ae@last) (cons q34ae@last q34ad@id*) (if (q2e25@syntax-null? q34ae@last) q34ad@id* (q3102@syntax-violation '#f '"not an identifier" q34a5@stx q34ae@last))))) q34ab@ls/false) ((lambda (q34b5@t) ((lambda (q34b7@ls/false) (if q34b7@ls/false (apply (lambda () (q3102@syntax-violation '#f '"malformed binding form" q34a5@stx q34a6@fmls)) q34b7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q34b5@t))) (q3034@syntax-dispatch q34b5@t '_))) q34a9@t))) (q3034@syntax-dispatch q34a9@t '#(each+ any () any)))) q34a6@fmls))) (set! q2ff0@let-macro (lambda (q34b9@stx) ((lambda (q34bb@t) ((lambda (q34bd@ls/false) (if q34bd@ls/false (apply (lambda (q34bf@lhs* q34c0@rhs* q34c1@b q34c2@b*) (if (q2e37@valid-bound-ids? q34bf@lhs*) (q2fea@bless (cons (cons 'lambda (cons q34bf@lhs* (cons q34c1@b q34c2@b*))) q34c0@rhs*)) (q2fee@invalid-fmls-error q34b9@stx q34bf@lhs*))) q34bd@ls/false) ((lambda (q34c7@t) ((lambda (q34c9@ls/false) (if (and q34c9@ls/false (apply (lambda (q34cb@f q34cc@lhs* q34cd@rhs* q34ce@b q34cf@b*) (q2e2f@id? q34cb@f)) q34c9@ls/false)) (apply (lambda (q34d5@f q34d6@lhs* q34d7@rhs* q34d8@b q34d9@b*) (if (q2e37@valid-bound-ids? q34d6@lhs*) (q2fea@bless (cons (list 'letrec (list (list q34d5@f (cons 'lambda (cons q34d6@lhs* (cons q34d8@b q34d9@b*))))) q34d5@f) q34d7@rhs*)) (q2fee@invalid-fmls-error q34b9@stx q34d6@lhs*))) q34c9@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q34c7@t))) (q3034@syntax-dispatch q34c7@t '(_ any #(each (any any)) any . each-any)))) q34bb@t))) (q3034@syntax-dispatch q34bb@t '(_ #(each (any any)) any . each-any)))) q34b9@stx))) (set! q2ff2@let-values-macro (lambda (q34df@stx) ((lambda (q34e2@rename q34e4@rename*) (begin (set! q34e2@rename (lambda (q3547@x q3548@old* q3549@new*) (begin (if (not (q2e2f@id? q3547@x)) (q3102@syntax-violation '#f '"not an indentifier" q34df@stx q3547@x) (void)) (if (q2e3b@bound-id-member? q3547@x q3548@old*) (q3102@syntax-violation '#f '"duplicate binding" q34df@stx q3547@x) (void)) ((lambda (q354d@y) (values q354d@y (cons q3547@x q3548@old*) (cons q354d@y q3549@new*))) (gensym (q3108@syntax->datum q3547@x)))))) (set! q34e4@rename* (lambda (q3535@x* q3536@old* q3537@new*) (if (null? q3535@x*) (values '() q3536@old* q3537@new*) (call-with-values (lambda () (q34e2@rename (car q3535@x*) q3536@old* q3537@new*)) (lambda (q353b@x q353c@old* q353d@new*) (call-with-values (lambda () (q34e4@rename* (cdr q3535@x*) q353c@old* q353d@new*)) (lambda (q3541@x* q3542@old* q3543@new*) (values (cons q353b@x q3541@x*) q3542@old* q3543@new*)))))))) ((lambda (q34e5@t) ((lambda (q34e7@ls/false) (if q34e7@ls/false (apply (lambda (q34e9@b q34ea@b*) (cons* (q2fea@bless 'let) '() q34e9@b q34ea@b*)) q34e7@ls/false) ((lambda (q34ed@t) ((lambda (q34ef@ls/false) (if q34ef@ls/false (apply (lambda (q34f1@lhs* q34f2@rhs* q34f3@b q34f4@b*) (q2fea@bless ((letrec ((q34f9@f (lambda (q34fb@lhs* q34fc@rhs* q34fd@old* q34fe@new*) (if (null? q34fb@lhs*) (cons 'let (cons (map list q34fd@old* q34fe@new*) (cons q34f3@b q34f4@b*))) ((lambda (q3503@t) ((lambda (q3505@ls/false) (if q3505@ls/false (apply (lambda (q3507@x*) (call-with-values (lambda () (q34e4@rename* q3507@x* q34fd@old* q34fe@new*)) (lambda (q350f@q350a q3510@q350c q3511@q350e) ((lambda (q3515@new* q3516@old* q3517@y*) (list 'call-with-values (list 'lambda '() (car q34fc@rhs*)) (list 'lambda q3517@y* (q34f9@f (cdr q34fb@lhs*) (cdr q34fc@rhs*) q3516@old* q3515@new*)))) q3511@q350e q3510@q350c q350f@q350a)))) q3505@ls/false) ((lambda (q351b@t) ((lambda (q351d@ls/false) (if q351d@ls/false (apply (lambda (q351f@x* q3520@x) (call-with-values (lambda () (q34e2@rename q3520@x q34fd@old* q34fe@new*)) (lambda (q3523@y q3524@old* q3525@new*) (call-with-values (lambda () (q34e4@rename* q351f@x* q3524@old* q3525@new*)) (lambda (q3529@y* q352a@old* q352b@new*) (list 'call-with-values (list 'lambda '() (car q34fc@rhs*)) (list 'lambda (append q3529@y* q3523@y) (q34f9@f (cdr q34fb@lhs*) (cdr q34fc@rhs*) q352a@old* q352b@new*)))))))) q351d@ls/false) ((lambda (q352f@t) ((lambda (q3531@ls/false) (if q3531@ls/false (apply (lambda (q3533@others) (q3102@syntax-violation '#f '"malformed bindings" q34df@stx q3533@others)) q3531@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q352f@t))) (q3034@syntax-dispatch q352f@t 'any))) q351b@t))) (q3034@syntax-dispatch q351b@t '#(each+ any () any)))) q3503@t))) (q3034@syntax-dispatch q3503@t 'each-any))) (car q34fb@lhs*)))))) q34f9@f) q34f1@lhs* q34f2@rhs* '() '()))) q34ef@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q34ed@t))) (q3034@syntax-dispatch q34ed@t '(_ #(each (any any)) any . each-any)))) q34e5@t))) (q3034@syntax-dispatch q34e5@t '(_ () any . each-any)))) q34df@stx))) '#f '#f))) (set! q2ff4@let*-values-macro (lambda (q354f@stx) ((lambda (q3552@check) (begin (set! q3552@check (lambda (q3581@x*) (if (not (null? q3581@x*)) ((lambda (q3583@x) (begin (if (not (q2e2f@id? q3583@x)) (q3102@syntax-violation '#f '"not an identifier" q354f@stx q3583@x) (void)) (q3552@check (cdr q3581@x*)) (if (q2e3b@bound-id-member? q3583@x (cdr q3581@x*)) (q3102@syntax-violation '#f '"duplicate identifier" q354f@stx q3583@x) (void)))) (car q3581@x*)) (void)))) ((lambda (q3553@t) ((lambda (q3555@ls/false) (if q3555@ls/false (apply (lambda (q3557@b q3558@b*) (cons* (q2fea@bless 'let) '() q3557@b q3558@b*)) q3555@ls/false) ((lambda (q355b@t) ((lambda (q355d@ls/false) (if q355d@ls/false (apply (lambda (q355f@lhs* q3560@rhs* q3561@b q3562@b*) (q2fea@bless ((letrec ((q3567@f (lambda (q3569@lhs* q356a@rhs*) (if (null? q3569@lhs*) (cons 'begin (cons q3561@b q3562@b*)) ((lambda (q356d@t) ((lambda (q356f@ls/false) (if q356f@ls/false (apply (lambda (q3571@x*) (begin (q3552@check q3571@x*) (list 'call-with-values (list 'lambda '() (car q356a@rhs*)) (list 'lambda q3571@x* (q3567@f (cdr q3569@lhs*) (cdr q356a@rhs*)))))) q356f@ls/false) ((lambda (q3573@t) ((lambda (q3575@ls/false) (if q3575@ls/false (apply (lambda (q3577@x* q3578@x) (begin (q3552@check (cons q3578@x q3577@x*)) (list 'call-with-values (list 'lambda '() (car q356a@rhs*)) (list 'lambda (append q3577@x* q3578@x) (q3567@f (cdr q3569@lhs*) (cdr q356a@rhs*)))))) q3575@ls/false) ((lambda (q357b@t) ((lambda (q357d@ls/false) (if q357d@ls/false (apply (lambda (q357f@others) (q3102@syntax-violation '#f '"malformed bindings" q354f@stx q357f@others)) q357d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q357b@t))) (q3034@syntax-dispatch q357b@t 'any))) q3573@t))) (q3034@syntax-dispatch q3573@t '#(each+ any () any)))) q356d@t))) (q3034@syntax-dispatch q356d@t 'each-any))) (car q3569@lhs*)))))) q3567@f) q355f@lhs* q3560@rhs*))) q355d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q355b@t))) (q3034@syntax-dispatch q355b@t '(_ #(each (any any)) any . each-any)))) q3553@t))) (q3034@syntax-dispatch q3553@t '(_ () any . each-any)))) q354f@stx))) '#f))) (set! q2ff6@trace-lambda-macro (lambda (q3585@stx) ((lambda (q3587@t) ((lambda (q3589@ls/false) (if q3589@ls/false (apply (lambda (q358b@who q358c@fmls q358d@b q358e@b*) (if (q2e37@valid-bound-ids? q358c@fmls) (q2fea@bless (list 'make-traced-procedure (list 'quote q358b@who) (cons 'lambda (cons q358c@fmls (cons q358d@b q358e@b*))))) (q2fee@invalid-fmls-error q3585@stx q358c@fmls))) q3589@ls/false) ((lambda (q3593@t) ((lambda (q3595@ls/false) (if q3595@ls/false (apply (lambda (q3597@who q3598@fmls q3599@last q359a@b q359b@b*) (if (q2e37@valid-bound-ids? (cons q3599@last q3598@fmls)) (q2fea@bless (list 'make-traced-procedure (list 'quote q3597@who) (cons 'lambda (cons (append q3598@fmls q3599@last) (cons q359a@b q359b@b*))))) (q2fee@invalid-fmls-error q3585@stx (append q3598@fmls q3599@last)))) q3595@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3593@t))) (q3034@syntax-dispatch q3593@t '(_ any #(each+ any () any) any . each-any)))) q3587@t))) (q3034@syntax-dispatch q3587@t '(_ any each-any any . each-any)))) q3585@stx))) (set! q2ff8@trace-define-macro (lambda (q35a1@stx) ((lambda (q35a3@t) ((lambda (q35a5@ls/false) (if q35a5@ls/false (apply (lambda (q35a7@who q35a8@fmls q35a9@b q35aa@b*) (if (q2e37@valid-bound-ids? q35a8@fmls) (q2fea@bless (list 'define q35a7@who (list 'make-traced-procedure (list 'quote q35a7@who) (cons 'lambda (cons q35a8@fmls (cons q35a9@b q35aa@b*)))))) (q2fee@invalid-fmls-error q35a1@stx q35a8@fmls))) q35a5@ls/false) ((lambda (q35af@t) ((lambda (q35b1@ls/false) (if q35b1@ls/false (apply (lambda (q35b3@who q35b4@fmls q35b5@last q35b6@b q35b7@b*) (if (q2e37@valid-bound-ids? (cons q35b5@last q35b4@fmls)) (q2fea@bless (list 'define q35b3@who (list 'make-traced-procedure (list 'quote q35b3@who) (cons 'lambda (cons (append q35b4@fmls q35b5@last) (cons q35b6@b q35b7@b*)))))) (q2fee@invalid-fmls-error q35a1@stx (append q35b4@fmls q35b5@last)))) q35b1@ls/false) ((lambda (q35bd@t) ((lambda (q35bf@ls/false) (if q35bf@ls/false (apply (lambda (q35c1@who q35c2@expr) (if (q2e2f@id? q35c1@who) (q2fea@bless (list 'define q35c1@who (list 'let (list (list 'v q35c2@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote q35c1@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (q3102@syntax-violation '#f '"invalid name" q35a1@stx))) q35bf@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q35bd@t))) (q3034@syntax-dispatch q35bd@t '(_ any any)))) q35af@t))) (q3034@syntax-dispatch q35af@t '(_ (any . #(each+ any () any)) any . each-any)))) q35a3@t))) (q3034@syntax-dispatch q35a3@t '(_ (any . each-any) any . each-any)))) q35a1@stx))) (set! q2ffa@trace-define-syntax-macro (lambda (q35c5@stx) ((lambda (q35c7@t) ((lambda (q35c9@ls/false) (if q35c9@ls/false (apply (lambda (q35cb@who q35cc@expr) (if (q2e2f@id? q35cb@who) (q2fea@bless (list 'define-syntax q35cb@who (list 'make-traced-macro (list 'quote q35cb@who) q35cc@expr))) (q3102@syntax-violation '#f '"invalid name" q35c5@stx))) q35c9@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q35c7@t))) (q3034@syntax-dispatch q35c7@t '(_ any any)))) q35c5@stx))) (set! q2ffc@trace-let/rec-syntax (lambda (q35cf@who) (lambda (q35d1@stx) ((lambda (q35d3@t) ((lambda (q35d5@ls/false) (if q35d5@ls/false (apply (lambda (q35d7@lhs* q35d8@rhs* q35d9@b q35da@b*) (if (q2e37@valid-bound-ids? q35d7@lhs*) ((lambda (q35df@rhs*) (q2fea@bless (cons q35cf@who (cons (map list q35d7@lhs* q35df@rhs*) (cons q35d9@b q35da@b*))))) (map (lambda (q35e1@lhs q35e2@rhs) (list 'make-traced-macro (list 'quote q35e1@lhs) q35e2@rhs)) q35d7@lhs* q35d8@rhs*)) (q2fee@invalid-fmls-error q35d1@stx q35d7@lhs*))) q35d5@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q35d3@t))) (q3034@syntax-dispatch q35d3@t '(_ #(each (any any)) any . each-any)))) q35d1@stx)))) (set! q2ffe@trace-let-syntax-macro (q2ffc@trace-let/rec-syntax 'let-syntax)) (set! q3000@trace-letrec-syntax-macro (q2ffc@trace-let/rec-syntax 'letrec-syntax)) (set! q3002@guard-macro (lambda (q35e5@x) ((lambda (q35e8@gen-clauses) (begin (set! q35e8@gen-clauses (lambda (q35ff@con q3600@outerk q3601@clause*) ((lambda (q3606@f q3608@f*) (begin (set! q3606@f (lambda (q363f@x q3640@k) ((lambda (q3643@t) ((lambda (q3645@ls/false) (if q3645@ls/false (apply (lambda (q3647@e q3648@p) ((lambda (q364b@t) (list 'let (list (list q364b@t q3647@e)) (list 'if q364b@t (list q3648@p q364b@t) q3640@k))) (gensym))) q3645@ls/false) ((lambda (q364d@t) ((lambda (q364f@ls/false) (if q364f@ls/false (apply (lambda (q3651@e) ((lambda (q3653@t) (list 'let (list (list q3653@t q3651@e)) (list 'if q3653@t q3653@t q3640@k))) (gensym))) q364f@ls/false) ((lambda (q3655@t) ((lambda (q3657@ls/false) (if q3657@ls/false (apply (lambda (q3659@e q365a@v q365b@v*) (list 'if q3659@e (cons 'begin (cons q365a@v q365b@v*)) q3640@k)) q3657@ls/false) ((lambda (q365f@t) ((lambda (q3661@ls/false) (if q3661@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid guard clause" q363f@x)) q3661@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q365f@t))) (q3034@syntax-dispatch q365f@t '_))) q3655@t))) (q3034@syntax-dispatch q3655@t '(any any . each-any)))) q364d@t))) (q3034@syntax-dispatch q364d@t '(any)))) q3643@t))) (q3034@syntax-dispatch q3643@t '(any #(scheme-id =>) any)))) q363f@x))) (set! q3608@f* (lambda (q3615@x*) ((lambda (q3617@t) ((lambda (q3619@ls/false) (if q3619@ls/false (apply (lambda () ((lambda (q361b@g) (values (list q361b@g (list 'lambda '() (list 'raise-continuable q35ff@con))) q361b@g)) (gensym))) q3619@ls/false) ((lambda (q361d@t) ((lambda (q361f@ls/false) (if q361f@ls/false (apply (lambda (q3621@e q3622@e*) (values (cons 'begin (cons q3621@e q3622@e*)) '#f)) q361f@ls/false) ((lambda (q3625@t) ((lambda (q3627@ls/false) (if q3627@ls/false (apply (lambda (q3629@cls q362a@cls*) (call-with-values (lambda () (q3608@f* q362a@cls*)) (lambda (q3631@q362e q3632@q3630) ((lambda (q3635@g q3636@e) (values (q3606@f q3629@cls q3636@e) q3635@g)) q3632@q3630 q3631@q362e)))) q3627@ls/false) ((lambda (q3639@t) ((lambda (q363b@ls/false) (if q363b@ls/false (apply (lambda (q363d@others) (q3102@syntax-violation '#f '"invalid guard clause" q363d@others)) q363b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3639@t))) (q3034@syntax-dispatch q3639@t 'any))) q3625@t))) (q3034@syntax-dispatch q3625@t '(any . any)))) q361d@t))) (q3034@syntax-dispatch q361d@t '((#(scheme-id else) any . each-any))))) q3617@t))) (q3034@syntax-dispatch q3617@t '()))) q3615@x*))) (call-with-values (lambda () (q3608@f* q3601@clause*)) (lambda (q360d@q360a q360e@q360c) ((lambda (q3611@raisek q3612@code) (if q3611@raisek (list (list 'call/cc (list 'lambda (list q3611@raisek) (list q3600@outerk (list 'lambda '() q3612@code))))) (list q3600@outerk (list 'lambda '() q3612@code)))) q360e@q360c q360d@q360a))))) '#f '#f))) ((lambda (q35e9@t) ((lambda (q35eb@ls/false) (if (and q35eb@ls/false (apply (lambda (q35ed@con q35ee@clause* q35ef@b q35f0@b*) (q2e2f@id? q35ed@con)) q35eb@ls/false)) (apply (lambda (q35f5@con q35f6@clause* q35f7@b q35f8@b*) ((lambda (q35fd@outerk) (q2fea@bless (list (list 'call/cc (list 'lambda (list q35fd@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list q35f5@con) (q35e8@gen-clauses q35f5@con q35fd@outerk q35f6@clause*)) (cons 'lambda (cons '() (cons q35f7@b q35f8@b*)))))))))) (gensym))) q35eb@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q35e9@t))) (q3034@syntax-dispatch q35e9@t '(_ (any . each-any) any . each-any)))) q35e5@x))) '#f))) (set! q3004@define-enumeration-macro (lambda (q3663@stx) ((lambda (q3666@set? q3668@remove-dups) (begin (set! q3666@set? (lambda (q367f@x) (or (null? q367f@x) (and (not (memq (car q367f@x) (cdr q367f@x))) (q3666@set? (cdr q367f@x)))))) (set! q3668@remove-dups (lambda (q367d@ls) (if (null? q367d@ls) '() (cons (car q367d@ls) (q3668@remove-dups (remq (car q367d@ls) (cdr q367d@ls))))))) ((lambda (q3669@t) ((lambda (q366b@ls/false) (if (and q366b@ls/false (apply (lambda (q366d@name q366e@id* q366f@maker) (and (q2e2f@id? q366d@name) (q2e2f@id? q366f@maker) (for-all q2e2f@id? q366e@id*))) q366b@ls/false)) (apply (lambda (q3673@name q3674@id* q3675@maker) ((lambda (q3679@name* q367a@mk) (q2fea@bless (list 'begin (list 'define q367a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote q3679@name*)))) (list 'define-syntax q3673@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote q3679@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote q3673@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax q3675@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote q3675@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote q3679@name*)) (cons 'syntax-violation (cons (list 'quote q3675@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons q367a@mk '('(n* ...)))))))))))) (q3668@remove-dups (q3108@syntax->datum q3674@id*)) (gensym))) q366b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3669@t))) (q3034@syntax-dispatch q3669@t '(_ any each-any any)))) q3663@stx))) '#f '#f))) (set! q3006@time-macro (lambda (q3681@stx) ((lambda (q3683@t) ((lambda (q3685@ls/false) (if q3685@ls/false (apply (lambda (q3687@expr) (q2fea@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() q3687@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) q3685@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3683@t))) (q3034@syntax-dispatch q3683@t '(_ any)))) q3681@stx))) (set! q3008@delay-macro (lambda (q3689@stx) ((lambda (q368b@t) ((lambda (q368d@ls/false) (if q368d@ls/false (apply (lambda (q368f@expr) (q2fea@bless (list 'make-promise (list 'lambda '() q368f@expr)))) q368d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q368b@t))) (q3034@syntax-dispatch q368b@t '(_ any)))) q3689@stx))) (set! q300a@assert-macro (lambda (q3691@stx) ((lambda (q3693@t) ((lambda (q3695@ls/false) (if q3695@ls/false (apply (lambda (q3697@expr) ((lambda (q3699@pos) (q2fea@bless (list 'unless q3697@expr (list 'assertion-error (list 'quote q3697@expr) (list 'quote q3699@pos))))) (or (q30fa@expression-position q3691@stx) (q30fa@expression-position q3697@expr)))) q3695@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3693@t))) (q3034@syntax-dispatch q3693@t '(_ any)))) q3691@stx))) (set! q300c@endianness-macro (lambda (q369b@stx) ((lambda (q369d@t) ((lambda (q369f@ls/false) (if q369f@ls/false (apply (lambda (q36a1@e) ((lambda (q36a3@t) (if (memv q36a3@t '(little)) (q2fea@bless ''little) (if (memv q36a3@t '(big)) (q2fea@bless ''big) (q3102@syntax-violation '#f '"endianness must be big or little" q369b@stx)))) (q3108@syntax->datum q36a1@e))) q369f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q369d@t))) (q3034@syntax-dispatch q369d@t '(_ any)))) q369b@stx))) (set! q300e@identifier-syntax-macro (lambda (q36a5@stx) ((lambda (q36a7@t) ((lambda (q36a9@ls/false) (if q36a9@ls/false (apply (lambda (q36ab@expr) (q2fea@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax q36ab@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax q36ab@expr) '((syntax (e* ...)))))))))) q36a9@ls/false) ((lambda (q36ad@t) ((lambda (q36af@ls/false) (if (and q36af@ls/false (apply (lambda (q36b1@id1 q36b2@expr1 q36b3@id2 q36b4@expr2 q36b5@expr3) (and (q2e2f@id? q36b1@id1) (q2e2f@id? q36b3@id2) (q2e2f@id? q36b4@expr2))) q36af@ls/false)) (apply (lambda (q36bb@id1 q36bc@expr1 q36bd@id2 q36be@expr2 q36bf@expr3) (q2fea@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax q36bc@expr1)) (list (list 'set! 'id q36be@expr2) (list 'syntax q36bf@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons q36bc@expr1 '(e* ...))))))))) q36af@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q36ad@t))) (q3034@syntax-dispatch q36ad@t '(_ (any any) ((#(scheme-id set!) any any) any))))) q36a7@t))) (q3034@syntax-dispatch q36a7@t '(_ any)))) q36a5@stx))) (set! q3010@do-macro (lambda (q36c5@stx) ((lambda (q36c8@bind) (begin (set! q36c8@bind (lambda (q36df@x) ((lambda (q36e1@t) ((lambda (q36e3@ls/false) (if q36e3@ls/false (apply (lambda (q36e5@x q36e6@init) (list q36e5@x q36e6@init q36e5@x)) q36e3@ls/false) ((lambda (q36e9@t) ((lambda (q36eb@ls/false) (if q36eb@ls/false (apply (lambda (q36ed@x q36ee@init q36ef@step) (list q36ed@x q36ee@init q36ef@step)) q36eb@ls/false) ((lambda (q36f3@t) ((lambda (q36f5@ls/false) (if q36f5@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid binding" q36c5@stx)) q36f5@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q36f3@t))) (q3034@syntax-dispatch q36f3@t '_))) q36e9@t))) (q3034@syntax-dispatch q36e9@t '(any any any)))) q36e1@t))) (q3034@syntax-dispatch q36e1@t '(any any)))) q36df@x))) ((lambda (q36c9@t) ((lambda (q36cb@ls/false) (if q36cb@ls/false (apply (lambda (q36cd@binding* q36ce@test q36cf@expr* q36d0@command*) ((lambda (q36d5@t) ((lambda (q36d7@ls/false) (if q36d7@ls/false (apply (lambda (q36d9@x* q36da@init* q36db@step*) (if (q2e37@valid-bound-ids? q36d9@x*) (q2fea@bless (list 'letrec (list (list 'loop (list 'lambda q36d9@x* (list 'if q36ce@test (cons 'begin (cons '(if #f #f) q36cf@expr*)) (cons 'begin (append q36d0@command* (list (cons 'loop q36db@step*)))))))) (cons 'loop q36da@init*))) (q3102@syntax-violation '#f '"invalid bindings" q36c5@stx))) q36d7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q36d5@t))) (q3034@syntax-dispatch q36d5@t '#(each (any any any))))) (map q36c8@bind q36cd@binding*))) q36cb@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q36c9@t))) (q3034@syntax-dispatch q36c9@t '(_ each-any (any . each-any) . each-any)))) q36c5@stx))) '#f))) (set! q3012@let*-macro (lambda (q36f7@stx) ((lambda (q36f9@t) ((lambda (q36fb@ls/false) (if (and q36fb@ls/false (apply (lambda (q36fd@lhs* q36fe@rhs* q36ff@b q3700@b*) (for-all q2e2f@id? q36fd@lhs*)) q36fb@ls/false)) (apply (lambda (q3705@lhs* q3706@rhs* q3707@b q3708@b*) (q2fea@bless ((letrec ((q370d@f (lambda (q370f@x*) (if (null? q370f@x*) (cons 'let (cons '() (cons q3707@b q3708@b*))) (list 'let (list (car q370f@x*)) (q370d@f (cdr q370f@x*))))))) q370d@f) (map list q3705@lhs* q3706@rhs*)))) q36fb@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q36f9@t))) (q3034@syntax-dispatch q36f9@t '(_ #(each (any any)) any . each-any)))) q36f7@stx))) (set! q3014@or-macro (lambda (q3711@stx) ((lambda (q3713@t) ((lambda (q3715@ls/false) (if q3715@ls/false (apply (lambda () '#f) q3715@ls/false) ((lambda (q3717@t) ((lambda (q3719@ls/false) (if q3719@ls/false (apply (lambda (q371b@e q371c@e*) (q2fea@bless ((letrec ((q371f@f (lambda (q3721@e q3722@e*) (if (null? q3722@e*) (list 'begin '#f q3721@e) (list 'let (list (list 't q3721@e)) (list 'if 't 't (q371f@f (car q3722@e*) (cdr q3722@e*)))))))) q371f@f) q371b@e q371c@e*))) q3719@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3717@t))) (q3034@syntax-dispatch q3717@t '(_ any . each-any)))) q3713@t))) (q3034@syntax-dispatch q3713@t '(_)))) q3711@stx))) (set! q3016@and-macro (lambda (q3725@stx) ((lambda (q3727@t) ((lambda (q3729@ls/false) (if q3729@ls/false (apply (lambda () '#t) q3729@ls/false) ((lambda (q372b@t) ((lambda (q372d@ls/false) (if q372d@ls/false (apply (lambda (q372f@e q3730@e*) (q2fea@bless ((letrec ((q3733@f (lambda (q3735@e q3736@e*) (if (null? q3736@e*) (list 'begin '#f q3735@e) (cons 'if (cons q3735@e (cons (q3733@f (car q3736@e*) (cdr q3736@e*)) '(#f)))))))) q3733@f) q372f@e q3730@e*))) q372d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q372b@t))) (q3034@syntax-dispatch q372b@t '(_ any . each-any)))) q3727@t))) (q3034@syntax-dispatch q3727@t '(_)))) q3725@stx))) (set! q3018@cond-macro (lambda (q3739@stx) ((lambda (q373b@t) ((lambda (q373d@ls/false) (if q373d@ls/false (apply (lambda (q373f@cls q3740@cls*) (q2fea@bless ((letrec ((q3743@f (lambda (q3745@cls q3746@cls*) (if (null? q3746@cls*) ((lambda (q3749@t) ((lambda (q374b@ls/false) (if q374b@ls/false (apply (lambda (q374d@e q374e@e*) (cons 'begin (cons q374d@e q374e@e*))) q374b@ls/false) ((lambda (q3751@t) ((lambda (q3753@ls/false) (if q3753@ls/false (apply (lambda (q3755@e q3756@p) (list 'let (list (list 't q3755@e)) (list 'if 't (cons q3756@p '(t))))) q3753@ls/false) ((lambda (q3759@t) ((lambda (q375b@ls/false) (if q375b@ls/false (apply (lambda (q375d@e) (cons 'or (cons q375d@e '((if #f #f))))) q375b@ls/false) ((lambda (q375f@t) ((lambda (q3761@ls/false) (if q3761@ls/false (apply (lambda (q3763@e q3764@e*) (list 'if q3763@e (cons 'begin q3764@e*))) q3761@ls/false) ((lambda (q3767@t) ((lambda (q3769@ls/false) (if q3769@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid last clause" q3739@stx)) q3769@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3767@t))) (q3034@syntax-dispatch q3767@t '_))) q375f@t))) (q3034@syntax-dispatch q375f@t '(any . each-any)))) q3759@t))) (q3034@syntax-dispatch q3759@t '(any)))) q3751@t))) (q3034@syntax-dispatch q3751@t '(any #(scheme-id =>) any)))) q3749@t))) (q3034@syntax-dispatch q3749@t '(#(scheme-id else) any . each-any)))) q3745@cls) ((lambda (q376b@t) ((lambda (q376d@ls/false) (if q376d@ls/false (apply (lambda (q376f@e q3770@e*) (q3102@syntax-violation '#f '"incorrect position of keyword else" q3739@stx)) q376d@ls/false) ((lambda (q3773@t) ((lambda (q3775@ls/false) (if q3775@ls/false (apply (lambda (q3777@e q3778@p) (list 'let (list (list 't q3777@e)) (list 'if 't (cons q3778@p '(t)) (q3743@f (car q3746@cls*) (cdr q3746@cls*))))) q3775@ls/false) ((lambda (q377b@t) ((lambda (q377d@ls/false) (if q377d@ls/false (apply (lambda (q377f@e) (list 'or q377f@e (q3743@f (car q3746@cls*) (cdr q3746@cls*)))) q377d@ls/false) ((lambda (q3781@t) ((lambda (q3783@ls/false) (if q3783@ls/false (apply (lambda (q3785@e q3786@e*) (list 'if q3785@e (cons 'begin q3786@e*) (q3743@f (car q3746@cls*) (cdr q3746@cls*)))) q3783@ls/false) ((lambda (q3789@t) ((lambda (q378b@ls/false) (if q378b@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid last clause" q3739@stx)) q378b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3789@t))) (q3034@syntax-dispatch q3789@t '_))) q3781@t))) (q3034@syntax-dispatch q3781@t '(any . each-any)))) q377b@t))) (q3034@syntax-dispatch q377b@t '(any)))) q3773@t))) (q3034@syntax-dispatch q3773@t '(any #(scheme-id =>) any)))) q376b@t))) (q3034@syntax-dispatch q376b@t '(#(scheme-id else) any . each-any)))) q3745@cls))))) q3743@f) q373f@cls q3740@cls*))) q373d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q373b@t))) (q3034@syntax-dispatch q373b@t '(_ any . each-any)))) q3739@stx))) (set! q301a@do-include (lambda (q378d@stx q378e@id q378f@filename) ((lambda (q3793@filename) (begin (if (not (and (string? q3793@filename) (q2e2f@id? q378e@id))) (q3102@syntax-violation '#f '"invalid syntax" q378d@stx) (void)) (cons (q2fea@bless 'begin) (with-input-from-file q3793@filename (lambda () ((letrec ((q3795@f (lambda (q3797@ls) ((lambda (q3799@x) (if (eof-object? q3799@x) (reverse q3797@ls) (q3795@f (cons (q2e0d@datum->stx q378e@id q3799@x) q3797@ls)))) (q2988@q2877@read-annotated))))) q3795@f) '())))))) (q2e43@stx->datum q378f@filename)))) (set! q301c@include-macro (lambda (q379b@e) ((lambda (q379d@t) ((lambda (q379f@ls/false) (if q379f@ls/false (apply (lambda (q37a1@id q37a2@filename) (q301a@do-include q379b@e q37a1@id q37a2@filename)) q379f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q379d@t))) (q3034@syntax-dispatch q379d@t '(any any)))) q379b@e))) (set! q301e@include-into-macro (lambda (q37a5@e) ((lambda (q37a7@t) ((lambda (q37a9@ls/false) (if q37a9@ls/false (apply (lambda (q37ab@id q37ac@filename) (q301a@do-include q37a5@e q37ab@id q37ac@filename)) q37a9@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q37a7@t))) (q3034@syntax-dispatch q37a7@t '(_ any any)))) q37a5@e))) (set! q3020@syntax-rules-macro (lambda (q37af@e) ((lambda (q37b1@t) ((lambda (q37b3@ls/false) (if q37b3@ls/false (apply (lambda (q37b5@lits q37b6@pat* q37b7@tmp*) (begin (q303a@verify-literals q37b5@lits q37af@e) (q2fea@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons q37b5@lits (map (lambda (q37bb@pat q37bc@tmp) ((lambda (q37bf@t) ((lambda (q37c1@ls/false) (if q37c1@ls/false (apply (lambda (q37c3@rest) (list (cons 'g q37c3@rest) (list 'syntax q37bc@tmp))) q37c1@ls/false) ((lambda (q37c5@t) ((lambda (q37c7@ls/false) (if q37c7@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid syntax-rules pattern" q37af@e q37bb@pat)) q37c7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q37c5@t))) (q3034@syntax-dispatch q37c5@t '_))) q37bf@t))) (q3034@syntax-dispatch q37bf@t '(_ . any)))) q37bb@pat)) q37b6@pat* q37b7@tmp*)))))))) q37b3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q37b1@t))) (q3034@syntax-dispatch q37b1@t '(_ each-any . #(each (any any)))))) q37af@e))) (set! q3022@quasiquote-macro ((lambda () ((lambda (q37ca@datum q37e6@quasicons* q37e8@quasicons q37ea@quasiappend q37ec@quasivector q37ee@vquasi q37f0@quasi) (begin (set! q37ca@datum (lambda (q38cb@x) (list (q2fbe@scheme-stx 'quote) (q2e17@mkstx q38cb@x '() '() '())))) (set! q37e6@quasicons* (lambda (q38c3@x q38c4@y) ((letrec ((q38c7@f (lambda (q38c9@x) (if (null? q38c9@x) q38c4@y (q37e8@quasicons (car q38c9@x) (q38c7@f (cdr q38c9@x))))))) q38c7@f) q38c3@x))) (set! q37e8@quasicons (lambda (q389d@x q389e@y) ((lambda (q38a1@t) ((lambda (q38a3@ls/false) (if q38a3@ls/false (apply (lambda (q38a5@dy) ((lambda (q38a7@t) ((lambda (q38a9@ls/false) (if q38a9@ls/false (apply (lambda (q38ab@dx) (list (q2fbe@scheme-stx 'quote) (cons q38ab@dx q38a5@dy))) q38a9@ls/false) ((lambda (q38ad@t) ((lambda (q38af@ls/false) (if q38af@ls/false (apply (lambda () ((lambda (q38b1@t) ((lambda (q38b3@ls/false) (if q38b3@ls/false (apply (lambda () (list (q2fbe@scheme-stx 'list) q389d@x)) q38b3@ls/false) ((lambda (q38b5@t) ((lambda (q38b7@ls/false) (if q38b7@ls/false (apply (lambda () (list (q2fbe@scheme-stx 'cons) q389d@x q389e@y)) q38b7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q38b5@t))) (q3034@syntax-dispatch q38b5@t '_))) q38b1@t))) (q3034@syntax-dispatch q38b1@t '()))) q38a5@dy)) q38af@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q38ad@t))) (q3034@syntax-dispatch q38ad@t '_))) q38a7@t))) (q3034@syntax-dispatch q38a7@t '(#(scheme-id quote) any)))) q389d@x)) q38a3@ls/false) ((lambda (q38b9@t) ((lambda (q38bb@ls/false) (if q38bb@ls/false (apply (lambda (q38bd@stuff) (cons* (q2fbe@scheme-stx 'list) q389d@x q38bd@stuff)) q38bb@ls/false) ((lambda (q38bf@t) ((lambda (q38c1@ls/false) (if q38c1@ls/false (apply (lambda () (list (q2fbe@scheme-stx 'cons) q389d@x q389e@y)) q38c1@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q38bf@t))) (q3034@syntax-dispatch q38bf@t '_))) q38b9@t))) (q3034@syntax-dispatch q38b9@t '(#(scheme-id list) . each-any)))) q38a1@t))) (q3034@syntax-dispatch q38a1@t '(#(scheme-id quote) any)))) q389e@y))) (set! q37ea@quasiappend (lambda (q3883@x q3884@y) ((lambda (q3887@ls) (if (null? q3887@ls) (list (q2fbe@scheme-stx 'quote) '()) (if (null? (cdr q3887@ls)) (car q3887@ls) (cons* (q2fbe@scheme-stx 'append) q3887@ls)))) ((letrec ((q3889@f (lambda (q388b@x) (if (null? q388b@x) ((lambda (q388d@t) ((lambda (q388f@ls/false) (if q388f@ls/false (apply (lambda () '()) q388f@ls/false) ((lambda (q3891@t) ((lambda (q3893@ls/false) (if q3893@ls/false (apply (lambda () (list q3884@y)) q3893@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3891@t))) (q3034@syntax-dispatch q3891@t '_))) q388d@t))) (q3034@syntax-dispatch q388d@t '(#(scheme-id quote) ())))) q3884@y) ((lambda (q3895@t) ((lambda (q3897@ls/false) (if q3897@ls/false (apply (lambda () (q3889@f (cdr q388b@x))) q3897@ls/false) ((lambda (q3899@t) ((lambda (q389b@ls/false) (if q389b@ls/false (apply (lambda () (cons (car q388b@x) (q3889@f (cdr q388b@x)))) q389b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3899@t))) (q3034@syntax-dispatch q3899@t '_))) q3895@t))) (q3034@syntax-dispatch q3895@t '(#(scheme-id quote) ())))) (car q388b@x)))))) q3889@f) q3883@x)))) (set! q37ec@quasivector (lambda (q3851@x) ((lambda (q3853@pat-x) ((lambda (q3855@t) ((lambda (q3857@ls/false) (if q3857@ls/false (apply (lambda (q3859@x*) (list (q2fbe@scheme-stx 'quote) (list->vector q3859@x*))) q3857@ls/false) ((lambda (q385b@t) ((lambda (q385d@ls/false) (if q385d@ls/false (apply (lambda () ((letrec ((q385f@f (lambda (q3861@x q3862@k) ((lambda (q3865@t) ((lambda (q3867@ls/false) (if q3867@ls/false (apply (lambda (q3869@x*) (q3862@k (map (lambda (q386b@x) (list (q2fbe@scheme-stx 'quote) q386b@x)) q3869@x*))) q3867@ls/false) ((lambda (q386d@t) ((lambda (q386f@ls/false) (if q386f@ls/false (apply (lambda (q3871@x*) (q3862@k q3871@x*)) q386f@ls/false) ((lambda (q3873@t) ((lambda (q3875@ls/false) (if q3875@ls/false (apply (lambda (q3877@x q3878@y) (q385f@f q3878@y (lambda (q387b@ls) (q3862@k (cons q3877@x q387b@ls))))) q3875@ls/false) ((lambda (q387d@t) ((lambda (q387f@ls/false) (if q387f@ls/false (apply (lambda () (list (q2fbe@scheme-stx 'list->vector) q3853@pat-x)) q387f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q387d@t))) (q3034@syntax-dispatch q387d@t '_))) q3873@t))) (q3034@syntax-dispatch q3873@t '(#(scheme-id cons) any any)))) q386d@t))) (q3034@syntax-dispatch q386d@t '(#(scheme-id list) . each-any)))) q3865@t))) (q3034@syntax-dispatch q3865@t '(#(scheme-id quote) each-any)))) q3861@x)))) q385f@f) q3851@x (lambda (q3881@ls) (cons* (q2fbe@scheme-stx 'vector) q3881@ls)))) q385d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q385b@t))) (q3034@syntax-dispatch q385b@t '_))) q3855@t))) (q3034@syntax-dispatch q3855@t '(#(scheme-id quote) each-any)))) q3853@pat-x)) q3851@x))) (set! q37ee@vquasi (lambda (q382f@p q3830@lev) ((lambda (q3833@t) ((lambda (q3835@ls/false) (if q3835@ls/false (apply (lambda (q3837@p q3838@q) ((lambda (q383b@t) ((lambda (q383d@ls/false) (if q383d@ls/false (apply (lambda (q383f@p) (if (= q3830@lev '0) (q37e6@quasicons* q383f@p (q37ee@vquasi q3838@q q3830@lev)) (q37e8@quasicons (q37e8@quasicons (q37ca@datum 'unquote) (q37f0@quasi q383f@p (- q3830@lev '1))) (q37ee@vquasi q3838@q q3830@lev)))) q383d@ls/false) ((lambda (q3841@t) ((lambda (q3843@ls/false) (if q3843@ls/false (apply (lambda (q3845@p) (if (= q3830@lev '0) (q37ea@quasiappend q3845@p (q37ee@vquasi q3838@q q3830@lev)) (q37e8@quasicons (q37e8@quasicons (q37ca@datum 'unquote-splicing) (q37f0@quasi q3845@p (- q3830@lev '1))) (q37ee@vquasi q3838@q q3830@lev)))) q3843@ls/false) ((lambda (q3847@t) ((lambda (q3849@ls/false) (if q3849@ls/false (apply (lambda (q384b@p) (q37e8@quasicons (q37f0@quasi q384b@p q3830@lev) (q37ee@vquasi q3838@q q3830@lev))) q3849@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3847@t))) (q3034@syntax-dispatch q3847@t 'any))) q3841@t))) (q3034@syntax-dispatch q3841@t '(#(scheme-id unquote-splicing) . each-any)))) q383b@t))) (q3034@syntax-dispatch q383b@t '(#(scheme-id unquote) . each-any)))) q3837@p)) q3835@ls/false) ((lambda (q384d@t) ((lambda (q384f@ls/false) (if q384f@ls/false (apply (lambda () (list (q2fbe@scheme-stx 'quote) '())) q384f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q384d@t))) (q3034@syntax-dispatch q384d@t '()))) q3833@t))) (q3034@syntax-dispatch q3833@t '(any . any)))) q382f@p))) (set! q37f0@quasi (lambda (q37f9@p q37fa@lev) ((lambda (q37fd@t) ((lambda (q37ff@ls/false) (if q37ff@ls/false (apply (lambda (q3801@p) (if (= q37fa@lev '0) q3801@p (q37e8@quasicons (q37ca@datum 'unquote) (q37f0@quasi (list q3801@p) (- q37fa@lev '1))))) q37ff@ls/false) ((lambda (q3803@t) ((lambda (q3805@ls/false) (if q3805@ls/false (apply (lambda (q3807@p q3808@q) (if (= q37fa@lev '0) (q37e6@quasicons* q3807@p (q37f0@quasi q3808@q q37fa@lev)) (q37e8@quasicons (q37e8@quasicons (q37ca@datum 'unquote) (q37f0@quasi q3807@p (- q37fa@lev '1))) (q37f0@quasi q3808@q q37fa@lev)))) q3805@ls/false) ((lambda (q380b@t) ((lambda (q380d@ls/false) (if q380d@ls/false (apply (lambda (q380f@p q3810@q) (if (= q37fa@lev '0) (q37ea@quasiappend q380f@p (q37f0@quasi q3810@q q37fa@lev)) (q37e8@quasicons (q37e8@quasicons (q37ca@datum 'unquote-splicing) (q37f0@quasi q380f@p (- q37fa@lev '1))) (q37f0@quasi q3810@q q37fa@lev)))) q380d@ls/false) ((lambda (q3813@t) ((lambda (q3815@ls/false) (if q3815@ls/false (apply (lambda (q3817@p) (q37e8@quasicons (q37ca@datum 'quasiquote) (q37f0@quasi (list q3817@p) (+ q37fa@lev '1)))) q3815@ls/false) ((lambda (q3819@t) ((lambda (q381b@ls/false) (if q381b@ls/false (apply (lambda (q381d@p q381e@q) (q37e8@quasicons (q37f0@quasi q381d@p q37fa@lev) (q37f0@quasi q381e@q q37fa@lev))) q381b@ls/false) ((lambda (q3821@t) ((lambda (q3823@ls/false) (if (and q3823@ls/false (apply (lambda (q3825@x) (not (q2df9@stx? q3825@x))) q3823@ls/false)) (apply (lambda (q3827@x) (q37ec@quasivector (q37ee@vquasi q3827@x q37fa@lev))) q3823@ls/false) ((lambda (q3829@t) ((lambda (q382b@ls/false) (if q382b@ls/false (apply (lambda (q382d@p) (list (q2fbe@scheme-stx 'quote) q382d@p)) q382b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3829@t))) (q3034@syntax-dispatch q3829@t 'any))) q3821@t))) (q3034@syntax-dispatch q3821@t '#(vector each-any)))) q3819@t))) (q3034@syntax-dispatch q3819@t '(any . any)))) q3813@t))) (q3034@syntax-dispatch q3813@t '(#(scheme-id quasiquote) any)))) q380b@t))) (q3034@syntax-dispatch q380b@t '((#(scheme-id unquote-splicing) . each-any) . any)))) q3803@t))) (q3034@syntax-dispatch q3803@t '((#(scheme-id unquote) . each-any) . any)))) q37fd@t))) (q3034@syntax-dispatch q37fd@t '(#(scheme-id unquote) any)))) q37f9@p))) (lambda (q37f1@x) ((lambda (q37f3@t) ((lambda (q37f5@ls/false) (if q37f5@ls/false (apply (lambda (q37f7@e) (q37f0@quasi q37f7@e '0)) q37f5@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q37f3@t))) (q3034@syntax-dispatch q37f3@t '(_ any)))) q37f1@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! q3024@quasisyntax-macro ((lambda () ((lambda (q38ce@quasi) (begin (set! q38ce@quasi (lambda (q38e9@p q38ea@lev) ((lambda (q38ed@t) ((lambda (q38ef@ls/false) (if q38ef@ls/false (apply (lambda (q38f1@p) (if (= q38ea@lev '0) ((lambda (q38f3@g) (values (list q38f3@g) (list q38f1@p) q38f3@g)) (gensym)) (call-with-values (lambda () (q38ce@quasi q38f1@p (- q38ea@lev '1))) (lambda (q38fb@q38f6 q38fc@q38f8 q38fd@q38fa) ((lambda (q3901@p q3902@rhs* q3903@lhs*) (values q3903@lhs* q3902@rhs* (list 'unsyntax q3901@p))) q38fd@q38fa q38fc@q38f8 q38fb@q38f6))))) q38ef@ls/false) ((lambda (q3907@t) ((lambda (q3909@ls/false) (if (and q3909@ls/false (apply (lambda () (= q38ea@lev '0)) q3909@ls/false)) (apply (lambda () (q3102@syntax-violation '#f '"incorrect use of unsyntax" q38e9@p)) q3909@ls/false) ((lambda (q390b@t) ((lambda (q390d@ls/false) (if q390d@ls/false (apply (lambda (q390f@p* q3910@q) (call-with-values (lambda () (q38ce@quasi q3910@q q38ea@lev)) (lambda (q3919@q3914 q391a@q3916 q391b@q3918) ((lambda (q391f@q q3920@rhs* q3921@lhs*) (if (= q38ea@lev '0) ((lambda (q3925@g*) (values (append q3925@g* q3921@lhs*) (append q390f@p* q3920@rhs*) (append q3925@g* q391f@q))) (map (lambda (q3927@x) (gensym)) q390f@p*)) (call-with-values (lambda () (q38ce@quasi q390f@p* (- q38ea@lev '1))) (lambda (q392f@q392a q3930@q392c q3931@q392e) ((lambda (q3935@p* q3936@rhs2* q3937@lhs2*) (values (append q3937@lhs2* q3921@lhs*) (append q3936@rhs2* q3920@rhs*) (cons (cons 'unsyntax q3935@p*) q391f@q))) q3931@q392e q3930@q392c q392f@q392a))))) q391b@q3918 q391a@q3916 q3919@q3914)))) q390d@ls/false) ((lambda (q393b@t) ((lambda (q393d@ls/false) (if q393d@ls/false (apply (lambda (q393f@p* q3940@q) (call-with-values (lambda () (q38ce@quasi q3940@q q38ea@lev)) (lambda (q3949@q3944 q394a@q3946 q394b@q3948) ((lambda (q394f@q q3950@rhs* q3951@lhs*) (if (= q38ea@lev '0) ((lambda (q3955@g*) (values (append (map (lambda (q3957@g) (cons q3957@g '(...))) q3955@g*) q3951@lhs*) (append q393f@p* q3950@rhs*) (append (apply append (map (lambda (q3959@g) (cons q3959@g '(...))) q3955@g*)) q394f@q))) (map (lambda (q395b@x) (gensym)) q393f@p*)) (call-with-values (lambda () (q38ce@quasi q393f@p* (- q38ea@lev '1))) (lambda (q3963@q395e q3964@q3960 q3965@q3962) ((lambda (q3969@p* q396a@rhs2* q396b@lhs2*) (values (append q396b@lhs2* q3951@lhs*) (append q396a@rhs2* q3950@rhs*) (cons (cons 'unsyntax-splicing q3969@p*) q394f@q))) q3965@q3962 q3964@q3960 q3963@q395e))))) q394b@q3948 q394a@q3946 q3949@q3944)))) q393d@ls/false) ((lambda (q396f@t) ((lambda (q3971@ls/false) (if (and q3971@ls/false (apply (lambda () (= q38ea@lev '0)) q3971@ls/false)) (apply (lambda () (q3102@syntax-violation '#f '"incorrect use of unsyntax-splicing" q38e9@p)) q3971@ls/false) ((lambda (q3973@t) ((lambda (q3975@ls/false) (if q3975@ls/false (apply (lambda (q3977@p) (call-with-values (lambda () (q38ce@quasi q3977@p (+ q38ea@lev '1))) (lambda (q397f@q397a q3980@q397c q3981@q397e) ((lambda (q3985@p q3986@rhs* q3987@lhs*) (values q3987@lhs* q3986@rhs* (list 'quasisyntax q3985@p))) q3981@q397e q3980@q397c q397f@q397a)))) q3975@ls/false) ((lambda (q398b@t) ((lambda (q398d@ls/false) (if q398d@ls/false (apply (lambda (q398f@p q3990@q) (call-with-values (lambda () (q38ce@quasi q398f@p q38ea@lev)) (lambda (q399f@q3994 q39a0@q3996 q39a1@q3998) (call-with-values (lambda () (q38ce@quasi q3990@q q38ea@lev)) (lambda (q39a5@q399a q39a6@q399c q39a7@q399e) ((lambda (q39ab@q q39ac@rhs2* q39ad@lhs2* q39ae@p q39af@rhs* q39b0@lhs*) (values (append q39ad@lhs2* q39b0@lhs*) (append q39ac@rhs2* q39af@rhs*) (cons q39ae@p q39ab@q))) q39a7@q399e q39a6@q399c q39a5@q399a q39a1@q3998 q39a0@q3996 q399f@q3994)))))) q398d@ls/false) ((lambda (q39b7@t) ((lambda (q39b9@ls/false) (if q39b9@ls/false (apply (lambda (q39bb@x*) (call-with-values (lambda () (q38ce@quasi q39bb@x* q38ea@lev)) (lambda (q39c3@q39be q39c4@q39c0 q39c5@q39c2) ((lambda (q39c9@x* q39ca@rhs* q39cb@lhs*) (values q39cb@lhs* q39ca@rhs* (list->vector q39c9@x*))) q39c5@q39c2 q39c4@q39c0 q39c3@q39be)))) q39b9@ls/false) ((lambda (q39cf@t) ((lambda (q39d1@ls/false) (if q39d1@ls/false (apply (lambda () (values '() '() q38e9@p)) q39d1@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q39cf@t))) (q3034@syntax-dispatch q39cf@t '_))) q39b7@t))) (q3034@syntax-dispatch q39b7@t '#(vector each-any)))) q398b@t))) (q3034@syntax-dispatch q398b@t '(any . any)))) q3973@t))) (q3034@syntax-dispatch q3973@t '(#(scheme-id quasisyntax) any)))) q396f@t))) (q3034@syntax-dispatch q396f@t '#(scheme-id unsyntax-splicing)))) q393b@t))) (q3034@syntax-dispatch q393b@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) q390b@t))) (q3034@syntax-dispatch q390b@t '((#(scheme-id unsyntax) . each-any) . any)))) q3907@t))) (q3034@syntax-dispatch q3907@t '#(scheme-id unsyntax)))) q38ed@t))) (q3034@syntax-dispatch q38ed@t '(#(scheme-id unsyntax) any)))) q38e9@p))) (lambda (q38cf@x) ((lambda (q38d1@t) ((lambda (q38d3@ls/false) (if q38d3@ls/false (apply (lambda (q38d5@e) (call-with-values (lambda () (q38ce@quasi q38d5@e '0)) (lambda (q38dd@q38d8 q38de@q38da q38df@q38dc) ((lambda (q38e3@v q38e4@rhs* q38e5@lhs*) (q2fea@bless (list 'syntax-case (cons 'list q38e4@rhs*) '() (list q38e5@lhs* (list 'syntax q38e3@v))))) q38df@q38dc q38de@q38da q38dd@q38d8)))) q38d3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q38d1@t))) (q3034@syntax-dispatch q38d1@t '(_ any)))) q38cf@x)))) '#f)))) (set! q3026@define-struct-macro (lambda (q39d3@stx) (q3102@syntax-violation '#f '"define-struct not supported" q39d3@stx))) (set! q3028@define-record-type-macro (lambda (q39d5@x) ((lambda (q39d8@id q39da@get-record-name q39dc@get-record-constructor-name q39de@get-record-predicate-name q39e0@get-clause q39e2@foo-rtd-code q39e4@parent-rtd-code q39e6@parent-rcd-code q39e8@foo-rcd-code q39ea@get-protocol-code q39ec@get-fields q39ee@get-mutator-indices q39f0@get-mutators q39f2@get-accessors q39f4@enumerate q39f6@do-define-record q39f8@verify-clauses) (begin (set! q39d8@id (lambda (q3bcb@ctxt . q3bcd@str*) (q3106@datum->syntax q3bcb@ctxt (string->symbol (apply string-append (map (lambda (q3bcf@x) (if (symbol? q3bcf@x) (symbol->string q3bcf@x) (if (string? q3bcf@x) q3bcf@x (assertion-violation 'define-record-type '"BUG")))) q3bcd@str*)))))) (set! q39da@get-record-name (lambda (q3bb9@spec) ((lambda (q3bbb@t) ((lambda (q3bbd@ls/false) (if q3bbd@ls/false (apply (lambda (q3bbf@foo q3bc0@make-foo q3bc1@foo?) q3bbf@foo) q3bbd@ls/false) ((lambda (q3bc5@t) ((lambda (q3bc7@ls/false) (if q3bc7@ls/false (apply (lambda (q3bc9@foo) q3bc9@foo) q3bc7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3bc5@t))) (q3034@syntax-dispatch q3bc5@t 'any))) q3bbb@t))) (q3034@syntax-dispatch q3bbb@t '(any any any)))) q3bb9@spec))) (set! q39dc@get-record-constructor-name (lambda (q3ba5@spec) ((lambda (q3ba7@t) ((lambda (q3ba9@ls/false) (if q3ba9@ls/false (apply (lambda (q3bab@foo q3bac@make-foo q3bad@foo?) q3bac@make-foo) q3ba9@ls/false) ((lambda (q3bb1@t) ((lambda (q3bb3@ls/false) (if (and q3bb3@ls/false (apply (lambda (q3bb5@foo) (q2e2f@id? q3bb5@foo)) q3bb3@ls/false)) (apply (lambda (q3bb7@foo) (q39d8@id q3bb7@foo '"make-" (q2e43@stx->datum q3bb7@foo))) q3bb3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3bb1@t))) (q3034@syntax-dispatch q3bb1@t 'any))) q3ba7@t))) (q3034@syntax-dispatch q3ba7@t '(any any any)))) q3ba5@spec))) (set! q39de@get-record-predicate-name (lambda (q3b91@spec) ((lambda (q3b93@t) ((lambda (q3b95@ls/false) (if q3b95@ls/false (apply (lambda (q3b97@foo q3b98@make-foo q3b99@foo?) q3b99@foo?) q3b95@ls/false) ((lambda (q3b9d@t) ((lambda (q3b9f@ls/false) (if (and q3b9f@ls/false (apply (lambda (q3ba1@foo) (q2e2f@id? q3ba1@foo)) q3b9f@ls/false)) (apply (lambda (q3ba3@foo) (q39d8@id q3ba3@foo (q2e43@stx->datum q3ba3@foo) '"?")) q3b9f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b9d@t))) (q3034@syntax-dispatch q3b9d@t 'any))) q3b93@t))) (q3034@syntax-dispatch q3b93@t '(any any any)))) q3b91@spec))) (set! q39e0@get-clause (lambda (q3b7f@id q3b80@ls) ((lambda (q3b83@t) ((lambda (q3b85@ls/false) (if q3b85@ls/false (apply (lambda () '#f) q3b85@ls/false) ((lambda (q3b87@t) ((lambda (q3b89@ls/false) (if q3b89@ls/false (apply (lambda (q3b8b@x q3b8c@rest q3b8d@ls) (if (q2e35@free-id=? (q2fea@bless q3b7f@id) q3b8b@x) (cons q3b8b@x q3b8c@rest) (q39e0@get-clause q3b7f@id q3b8d@ls))) q3b89@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b87@t))) (q3034@syntax-dispatch q3b87@t '((any . any) . any)))) q3b83@t))) (q3034@syntax-dispatch q3b83@t '()))) q3b80@ls))) (set! q39e2@foo-rtd-code (lambda (q3b2d@name q3b2e@clause* q3b2f@parent-rtd-code) ((lambda (q3b34@convert-field-spec*) (begin (set! q3b34@convert-field-spec* (lambda (q3b65@ls) (list->vector (map (lambda (q3b67@x) ((lambda (q3b69@t) ((lambda (q3b6b@ls/false) (if q3b6b@ls/false (apply (lambda (q3b6d@name q3b6e@rest) (list 'mutable q3b6d@name)) q3b6b@ls/false) ((lambda (q3b71@t) ((lambda (q3b73@ls/false) (if q3b73@ls/false (apply (lambda (q3b75@name q3b76@rest) (list 'immutable q3b75@name)) q3b73@ls/false) ((lambda (q3b79@t) ((lambda (q3b7b@ls/false) (if q3b7b@ls/false (apply (lambda (q3b7d@name) (list 'immutable q3b7d@name)) q3b7b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b79@t))) (q3034@syntax-dispatch q3b79@t 'any))) q3b71@t))) (q3034@syntax-dispatch q3b71@t '(#(scheme-id immutable) any . any)))) q3b69@t))) (q3034@syntax-dispatch q3b69@t '(#(scheme-id mutable) any . any)))) q3b67@x)) q3b65@ls)))) ((lambda (q3b35@uid-code q3b36@sealed? q3b37@opaque? q3b38@fields) (q2fea@bless (list 'make-record-type-descriptor (list 'quote q3b2d@name) q3b2f@parent-rtd-code q3b35@uid-code q3b36@sealed? q3b37@opaque? q3b38@fields))) ((lambda (q3b3d@t) ((lambda (q3b3f@ls/false) (if q3b3f@ls/false (apply (lambda () (list 'quote (gensym))) q3b3f@ls/false) ((lambda (q3b41@t) ((lambda (q3b43@ls/false) (if q3b43@ls/false (apply (lambda (q3b45@uid) (list 'quote q3b45@uid)) q3b43@ls/false) ((lambda (q3b47@t) ((lambda (q3b49@ls/false) (if q3b49@ls/false (apply (lambda () '#f) q3b49@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b47@t))) (q3034@syntax-dispatch q3b47@t '_))) q3b41@t))) (q3034@syntax-dispatch q3b41@t '(_ any)))) q3b3d@t))) (q3034@syntax-dispatch q3b3d@t '(_)))) (q39e0@get-clause 'nongenerative q3b2e@clause*)) ((lambda (q3b4b@t) ((lambda (q3b4d@ls/false) (if q3b4d@ls/false (apply (lambda () '#t) q3b4d@ls/false) ((lambda (q3b4f@t) ((lambda (q3b51@ls/false) (if q3b51@ls/false (apply (lambda () '#f) q3b51@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b4f@t))) (q3034@syntax-dispatch q3b4f@t '_))) q3b4b@t))) (q3034@syntax-dispatch q3b4b@t '(_ #(atom #t))))) (q39e0@get-clause 'sealed q3b2e@clause*)) ((lambda (q3b53@t) ((lambda (q3b55@ls/false) (if q3b55@ls/false (apply (lambda () '#t) q3b55@ls/false) ((lambda (q3b57@t) ((lambda (q3b59@ls/false) (if q3b59@ls/false (apply (lambda () '#f) q3b59@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b57@t))) (q3034@syntax-dispatch q3b57@t '_))) q3b53@t))) (q3034@syntax-dispatch q3b53@t '(_ #(atom #t))))) (q39e0@get-clause 'opaque q3b2e@clause*)) ((lambda (q3b5b@t) ((lambda (q3b5d@ls/false) (if q3b5d@ls/false (apply (lambda (q3b5f@field-spec*) (list 'quote (q3b34@convert-field-spec* q3b5f@field-spec*))) q3b5d@ls/false) ((lambda (q3b61@t) ((lambda (q3b63@ls/false) (if q3b63@ls/false (apply (lambda () ''#()) q3b63@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b61@t))) (q3034@syntax-dispatch q3b61@t '_))) q3b5b@t))) (q3034@syntax-dispatch q3b5b@t '(_ . each-any)))) (q39e0@get-clause 'fields q3b2e@clause*))))) '#f))) (set! q39e4@parent-rtd-code (lambda (q3b15@clause*) ((lambda (q3b17@t) ((lambda (q3b19@ls/false) (if q3b19@ls/false (apply (lambda (q3b1b@name) (list 'record-type-descriptor q3b1b@name)) q3b19@ls/false) ((lambda (q3b1d@t) ((lambda (q3b1f@ls/false) (if q3b1f@ls/false (apply (lambda () ((lambda (q3b21@t) ((lambda (q3b23@ls/false) (if q3b23@ls/false (apply (lambda (q3b25@rtd q3b26@rcd) q3b25@rtd) q3b23@ls/false) ((lambda (q3b29@t) ((lambda (q3b2b@ls/false) (if q3b2b@ls/false (apply (lambda () '#f) q3b2b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b29@t))) (q3034@syntax-dispatch q3b29@t '#(atom #f)))) q3b21@t))) (q3034@syntax-dispatch q3b21@t '(_ any any)))) (q39e0@get-clause 'parent-rtd q3b15@clause*))) q3b1f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b1d@t))) (q3034@syntax-dispatch q3b1d@t '#(atom #f)))) q3b17@t))) (q3034@syntax-dispatch q3b17@t '(_ any)))) (q39e0@get-clause 'parent q3b15@clause*)))) (set! q39e6@parent-rcd-code (lambda (q3afd@clause*) ((lambda (q3aff@t) ((lambda (q3b01@ls/false) (if q3b01@ls/false (apply (lambda (q3b03@name) (list 'record-constructor-descriptor q3b03@name)) q3b01@ls/false) ((lambda (q3b05@t) ((lambda (q3b07@ls/false) (if q3b07@ls/false (apply (lambda () ((lambda (q3b09@t) ((lambda (q3b0b@ls/false) (if q3b0b@ls/false (apply (lambda (q3b0d@rtd q3b0e@rcd) q3b0e@rcd) q3b0b@ls/false) ((lambda (q3b11@t) ((lambda (q3b13@ls/false) (if q3b13@ls/false (apply (lambda () '#f) q3b13@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b11@t))) (q3034@syntax-dispatch q3b11@t '#(atom #f)))) q3b09@t))) (q3034@syntax-dispatch q3b09@t '(_ any any)))) (q39e0@get-clause 'parent-rtd q3afd@clause*))) q3b07@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3b05@t))) (q3034@syntax-dispatch q3b05@t '#(atom #f)))) q3aff@t))) (q3034@syntax-dispatch q3aff@t '(_ any)))) (q39e0@get-clause 'parent q3afd@clause*)))) (set! q39e8@foo-rcd-code (lambda (q3af5@clause* q3af6@foo-rtd q3af7@protocol q3af8@parent-rcd-code) (list 'make-record-constructor-descriptor q3af6@foo-rtd q3af8@parent-rcd-code q3af7@protocol))) (set! q39ea@get-protocol-code (lambda (q3ae9@clause*) ((lambda (q3aeb@t) ((lambda (q3aed@ls/false) (if q3aed@ls/false (apply (lambda (q3aef@expr) q3aef@expr) q3aed@ls/false) ((lambda (q3af1@t) ((lambda (q3af3@ls/false) (if q3af3@ls/false (apply (lambda () '#f) q3af3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3af1@t))) (q3034@syntax-dispatch q3af1@t '_))) q3aeb@t))) (q3034@syntax-dispatch q3aeb@t '(_ any)))) (q39e0@get-clause 'protocol q3ae9@clause*)))) (set! q39ec@get-fields (lambda (q3ad7@clause*) ((lambda (q3ad9@t) ((lambda (q3adb@ls/false) (if q3adb@ls/false (apply (lambda () '()) q3adb@ls/false) ((lambda (q3add@t) ((lambda (q3adf@ls/false) (if q3adf@ls/false (apply (lambda (q3ae1@f*) q3ae1@f*) q3adf@ls/false) ((lambda (q3ae3@t) ((lambda (q3ae5@ls/false) (if q3ae5@ls/false (apply (lambda (q3ae7@rest) (q39ec@get-fields q3ae7@rest)) q3ae5@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3ae3@t))) (q3034@syntax-dispatch q3ae3@t '(_ . any)))) q3add@t))) (q3034@syntax-dispatch q3add@t '((#(scheme-id fields) . each-any) . _)))) q3ad9@t))) (q3034@syntax-dispatch q3ad9@t '()))) q3ad7@clause*))) (set! q39ee@get-mutator-indices (lambda (q3abf@fields) ((letrec ((q3ac1@f (lambda (q3ac3@fields q3ac4@i) ((lambda (q3ac7@t) ((lambda (q3ac9@ls/false) (if q3ac9@ls/false (apply (lambda () '()) q3ac9@ls/false) ((lambda (q3acb@t) ((lambda (q3acd@ls/false) (if q3acd@ls/false (apply (lambda (q3acf@rest) (cons q3ac4@i (q3ac1@f q3acf@rest (+ q3ac4@i '1)))) q3acd@ls/false) ((lambda (q3ad1@t) ((lambda (q3ad3@ls/false) (if q3ad3@ls/false (apply (lambda (q3ad5@rest) (q3ac1@f q3ad5@rest (+ q3ac4@i '1))) q3ad3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3ad1@t))) (q3034@syntax-dispatch q3ad1@t '(_ . any)))) q3acb@t))) (q3034@syntax-dispatch q3acb@t '((#(scheme-id mutable) . _) . any)))) q3ac7@t))) (q3034@syntax-dispatch q3ac7@t '()))) q3ac3@fields)))) q3ac1@f) q3abf@fields '0))) (set! q39f0@get-mutators (lambda (q3a95@foo q3a96@fields) ((lambda (q3a9a@gen-name) (begin (set! q3a9a@gen-name (lambda (q3abd@x) (q3106@datum->syntax q3a95@foo (string->symbol (string-append (symbol->string (q3108@syntax->datum q3a95@foo)) '"-" (symbol->string (q3108@syntax->datum q3abd@x)) '"-set!"))))) ((letrec ((q3a9b@f (lambda (q3a9d@fields) ((lambda (q3a9f@t) ((lambda (q3aa1@ls/false) (if q3aa1@ls/false (apply (lambda () '()) q3aa1@ls/false) ((lambda (q3aa3@t) ((lambda (q3aa5@ls/false) (if q3aa5@ls/false (apply (lambda (q3aa7@name q3aa8@accessor q3aa9@mutator q3aaa@rest) (cons q3aa9@mutator (q3a9b@f q3aaa@rest))) q3aa5@ls/false) ((lambda (q3aaf@t) ((lambda (q3ab1@ls/false) (if q3ab1@ls/false (apply (lambda (q3ab3@name q3ab4@rest) (cons (q3a9a@gen-name q3ab3@name) (q3a9b@f q3ab4@rest))) q3ab1@ls/false) ((lambda (q3ab7@t) ((lambda (q3ab9@ls/false) (if q3ab9@ls/false (apply (lambda (q3abb@rest) (q3a9b@f q3abb@rest)) q3ab9@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3ab7@t))) (q3034@syntax-dispatch q3ab7@t '(_ . any)))) q3aaf@t))) (q3034@syntax-dispatch q3aaf@t '((#(scheme-id mutable) any) . any)))) q3aa3@t))) (q3034@syntax-dispatch q3aa3@t '((#(scheme-id mutable) any any any) . any)))) q3a9f@t))) (q3034@syntax-dispatch q3a9f@t '()))) q3a9d@fields)))) q3a9b@f) q3a96@fields))) '#f))) (set! q39f2@get-accessors (lambda (q3a51@foo q3a52@fields) ((lambda (q3a56@gen-name) (begin (set! q3a56@gen-name (lambda (q3a93@x) (q3106@datum->syntax q3a51@foo (string->symbol (string-append (symbol->string (q3108@syntax->datum q3a51@foo)) '"-" (symbol->string (q3108@syntax->datum q3a93@x))))))) (map (lambda (q3a57@field) ((lambda (q3a59@t) ((lambda (q3a5b@ls/false) (if (and q3a5b@ls/false (apply (lambda (q3a5d@name q3a5e@accessor q3a5f@mutator) (q2e2f@id? q3a5e@accessor)) q3a5b@ls/false)) (apply (lambda (q3a63@name q3a64@accessor q3a65@mutator) q3a64@accessor) q3a5b@ls/false) ((lambda (q3a69@t) ((lambda (q3a6b@ls/false) (if (and q3a6b@ls/false (apply (lambda (q3a6d@name q3a6e@accessor) (q2e2f@id? q3a6e@accessor)) q3a6b@ls/false)) (apply (lambda (q3a71@name q3a72@accessor) q3a72@accessor) q3a6b@ls/false) ((lambda (q3a75@t) ((lambda (q3a77@ls/false) (if (and q3a77@ls/false (apply (lambda (q3a79@name) (q2e2f@id? q3a79@name)) q3a77@ls/false)) (apply (lambda (q3a7b@name) (q3a56@gen-name q3a7b@name)) q3a77@ls/false) ((lambda (q3a7d@t) ((lambda (q3a7f@ls/false) (if (and q3a7f@ls/false (apply (lambda (q3a81@name) (q2e2f@id? q3a81@name)) q3a7f@ls/false)) (apply (lambda (q3a83@name) (q3a56@gen-name q3a83@name)) q3a7f@ls/false) ((lambda (q3a85@t) ((lambda (q3a87@ls/false) (if (and q3a87@ls/false (apply (lambda (q3a89@name) (q2e2f@id? q3a89@name)) q3a87@ls/false)) (apply (lambda (q3a8b@name) (q3a56@gen-name q3a8b@name)) q3a87@ls/false) ((lambda (q3a8d@t) ((lambda (q3a8f@ls/false) (if q3a8f@ls/false (apply (lambda (q3a91@others) (q3102@syntax-violation '#f '"invalid field spec" q3a57@field)) q3a8f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3a8d@t))) (q3034@syntax-dispatch q3a8d@t 'any))) q3a85@t))) (q3034@syntax-dispatch q3a85@t 'any))) q3a7d@t))) (q3034@syntax-dispatch q3a7d@t '(#(scheme-id immutable) any)))) q3a75@t))) (q3034@syntax-dispatch q3a75@t '(#(scheme-id mutable) any)))) q3a69@t))) (q3034@syntax-dispatch q3a69@t '(#(scheme-id immutable) any any)))) q3a59@t))) (q3034@syntax-dispatch q3a59@t '(#(scheme-id mutable) any any any)))) q3a57@field)) q3a52@fields))) '#f))) (set! q39f4@enumerate (lambda (q3a49@ls) ((letrec ((q3a4b@f (lambda (q3a4d@ls q3a4e@i) (if (null? q3a4d@ls) '() (cons q3a4e@i (q3a4b@f (cdr q3a4d@ls) (+ q3a4e@i '1))))))) q3a4b@f) q3a49@ls '0))) (set! q39f6@do-define-record (lambda (q3a21@namespec q3a22@clause*) ((lambda (q3a25@foo) ((lambda (q3a27@foo-rtd) ((lambda (q3a29@foo-rcd) ((lambda (q3a2b@protocol) ((lambda (q3a2d@make-foo) ((lambda (q3a2f@fields) ((lambda (q3a31@idx*) ((lambda (q3a33@foo-x*) ((lambda (q3a35@set-foo-x!*) ((lambda (q3a37@set-foo-idx*) ((lambda (q3a39@foo?) ((lambda (q3a3b@foo-rtd-code) ((lambda (q3a3d@foo-rcd-code) ((lambda (q3a3f@protocol-code) ((lambda () (q2fea@bless (cons 'begin (cons (list 'define q3a27@foo-rtd q3a3b@foo-rtd-code) (cons (list 'define q3a2b@protocol q3a3f@protocol-code) (cons (list 'define q3a29@foo-rcd q3a3d@foo-rcd-code) (cons (list 'define-syntax q3a25@foo (list 'list ''$rtd (list 'syntax q3a27@foo-rtd) (list 'syntax q3a29@foo-rcd))) (cons (list 'define q3a39@foo? (list 'record-predicate q3a27@foo-rtd)) (cons (list 'define q3a2d@make-foo (list 'record-constructor q3a29@foo-rcd)) (append (map (lambda (q3a41@foo-x q3a42@idx) (list 'define q3a41@foo-x (list 'record-accessor q3a27@foo-rtd q3a42@idx))) q3a33@foo-x* q3a31@idx*) (map (lambda (q3a45@set-foo-x! q3a46@idx) (list 'define q3a45@set-foo-x! (list 'record-mutator q3a27@foo-rtd q3a46@idx))) q3a35@set-foo-x!* q3a37@set-foo-idx*))))))))))))) (q39ea@get-protocol-code q3a22@clause*))) (q39e8@foo-rcd-code q3a22@clause* q3a27@foo-rtd q3a2b@protocol (q39e6@parent-rcd-code q3a22@clause*)))) (q39e2@foo-rtd-code q3a25@foo q3a22@clause* (q39e4@parent-rtd-code q3a22@clause*)))) (q39de@get-record-predicate-name q3a21@namespec))) (q39ee@get-mutator-indices q3a2f@fields))) (q39f0@get-mutators q3a25@foo q3a2f@fields))) (q39f2@get-accessors q3a25@foo q3a2f@fields))) (q39f4@enumerate q3a2f@fields))) (q39ec@get-fields q3a22@clause*))) (q39dc@get-record-constructor-name q3a21@namespec))) (gensym))) (gensym))) (gensym))) (q39da@get-record-name q3a21@namespec)))) (set! q39f8@verify-clauses (lambda (q3a01@x q3a02@cls*) ((lambda (q3a06@valid-kwds q3a08@free-id-member?) (begin (set! q3a06@valid-kwds (map q2fea@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! q3a08@free-id-member? (lambda (q3a1d@x q3a1e@ls) (and (pair? q3a1e@ls) (or (q2e35@free-id=? q3a1d@x (car q3a1e@ls)) (q3a08@free-id-member? q3a1d@x (cdr q3a1e@ls)))))) ((letrec ((q3a09@f (lambda (q3a0b@cls* q3a0c@seen*) (if (not (null? q3a0b@cls*)) ((lambda (q3a0f@t) ((lambda (q3a11@ls/false) (if q3a11@ls/false (apply (lambda (q3a13@kwd q3a14@rest) (if (or (not (q2e2f@id? q3a13@kwd)) (not (q3a08@free-id-member? q3a13@kwd q3a06@valid-kwds))) (q3102@syntax-violation '#f '"not a valid define-record-type keyword" q3a13@kwd) (if (q2e3b@bound-id-member? q3a13@kwd q3a0c@seen*) (q3102@syntax-violation '#f '"duplicate use of keyword " q3a01@x q3a13@kwd) (q3a09@f (cdr q3a0b@cls*) (cons q3a13@kwd q3a0c@seen*))))) q3a11@ls/false) ((lambda (q3a17@t) ((lambda (q3a19@ls/false) (if q3a19@ls/false (apply (lambda (q3a1b@cls) (q3102@syntax-violation '#f '"malformed define-record-type clause" q3a1b@cls)) q3a19@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3a17@t))) (q3034@syntax-dispatch q3a17@t 'any))) q3a0f@t))) (q3034@syntax-dispatch q3a0f@t '(any . any)))) (car q3a0b@cls*)) (void))))) q3a09@f) q3a02@cls* '()))) '#f '#f))) ((lambda (q39f9@t) ((lambda (q39fb@ls/false) (if q39fb@ls/false (apply (lambda (q39fd@namespec q39fe@clause*) (begin (q39f8@verify-clauses q39d5@x q39fe@clause*) (q39f6@do-define-record q39fd@namespec q39fe@clause*))) q39fb@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q39f9@t))) (q3034@syntax-dispatch q39f9@t '(_ any . each-any)))) q39d5@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q302a@define-condition-type-macro (lambda (q3bd1@x) ((lambda (q3bd4@mkname) (begin (set! q3bd4@mkname (lambda (q3c01@name q3c02@suffix) (q3106@datum->syntax q3c01@name (string->symbol (string-append (symbol->string (q3108@syntax->datum q3c01@name)) q3c02@suffix))))) ((lambda (q3bd5@t) ((lambda (q3bd7@ls/false) (if (and q3bd7@ls/false (apply (lambda (q3bd9@ctxt q3bda@name q3bdb@super q3bdc@constructor q3bdd@predicate q3bde@field* q3bdf@accessor*) (and (q2e2f@id? q3bda@name) (q2e2f@id? q3bdb@super) (q2e2f@id? q3bdc@constructor) (q2e2f@id? q3bdd@predicate) (for-all q2e2f@id? q3bde@field*) (for-all q2e2f@id? q3bdf@accessor*))) q3bd7@ls/false)) (apply (lambda (q3be7@ctxt q3be8@name q3be9@super q3bea@constructor q3beb@predicate q3bec@field* q3bed@accessor*) ((lambda (q3bf5@aux-accessor*) (q2fea@bless (cons 'begin (cons (cons 'define-record-type (cons (list q3be8@name q3bea@constructor (gensym)) (cons (list 'parent q3be9@super) (cons (cons 'fields (map (lambda (q3bf7@field q3bf8@aux) (list 'immutable q3bf7@field q3bf8@aux)) q3bec@field* q3bf5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define q3beb@predicate (list 'condition-predicate (list 'record-type-descriptor q3be8@name))) (map (lambda (q3bfb@accessor q3bfc@aux) (list 'define q3bfb@accessor (list 'condition-accessor (list 'record-type-descriptor q3be8@name) q3bfc@aux))) q3bed@accessor* q3bf5@aux-accessor*)))))) (map (lambda (q3bff@x) (gensym)) q3bed@accessor*))) q3bd7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3bd5@t))) (q3034@syntax-dispatch q3bd5@t '(any any any any any . #(each (any any)))))) q3bd1@x))) '#f))) (set! q302c@incorrect-usage-macro (lambda (q3c05@e) (q3102@syntax-violation '#f '"incorrect usage of auxiliary keyword" q3c05@e))) (set! q302e@parameterize-macro (lambda (q3c07@e) ((lambda (q3c09@t) ((lambda (q3c0b@ls/false) (if q3c0b@ls/false (apply (lambda (q3c0d@b q3c0e@b*) (q2fea@bless (cons 'let (cons '() (cons q3c0d@b q3c0e@b*))))) q3c0b@ls/false) ((lambda (q3c11@t) ((lambda (q3c13@ls/false) (if q3c13@ls/false (apply (lambda (q3c15@olhs* q3c16@orhs* q3c17@b q3c18@b*) ((lambda (q3c1d@lhs* q3c1e@rhs*) (q2fea@bless (cons (list 'lambda (append q3c1d@lhs* q3c1e@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (q3c21@lhs q3c22@rhs) (list 'let (list (list 't (list q3c21@lhs))) (list q3c21@lhs q3c22@rhs) (cons 'set! (cons q3c22@rhs '(t))))) q3c1d@lhs* q3c1e@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons q3c17@b q3c18@b*))) '(swap)))))) (append q3c15@olhs* q3c16@orhs*)))) (q30f0@generate-temporaries q3c15@olhs*) (q30f0@generate-temporaries q3c16@orhs*))) q3c13@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3c11@t))) (q3034@syntax-dispatch q3c11@t '(_ #(each (any any)) any . each-any)))) q3c09@t))) (q3034@syntax-dispatch q3c09@t '(_ () any . each-any)))) q3c07@e))) (set! q3030@foreign-call-transformer (lambda (q3c25@e q3c26@r q3c27@mr) ((lambda (q3c2b@t) ((lambda (q3c2d@ls/false) (if q3c2d@ls/false (apply (lambda (q3c2f@name q3c30@arg*) (cons 'foreign-call (cons (q3056@chi-expr q3c2f@name q3c26@r q3c27@mr) (q3052@chi-expr* q3c30@arg* q3c26@r q3c27@mr)))) q3c2d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3c2b@t))) (q3034@syntax-dispatch q3c2b@t '(_ any . each-any)))) q3c25@e))) (set! q3032@convert-pattern (lambda (q3c33@pattern q3c34@keys) ((lambda (q3c38@cvt* q3c3a@cvt) (begin (set! q3c38@cvt* (lambda (q3cd7@p* q3cd8@n q3cd9@ids) (if (null? q3cd7@p*) (values '() q3cd9@ids) (call-with-values (lambda () (q3c38@cvt* (cdr q3cd7@p*) q3cd8@n q3cd9@ids)) (lambda (q3ce1@q3cde q3ce2@q3ce0) ((lambda (q3ce5@ids q3ce6@y) (call-with-values (lambda () (q3c3a@cvt (car q3cd7@p*) q3cd8@n q3ce5@ids)) (lambda (q3ced@q3cea q3cee@q3cec) ((lambda (q3cf1@ids q3cf2@x) (values (cons q3cf2@x q3ce6@y) q3cf1@ids)) q3cee@q3cec q3ced@q3cea)))) q3ce2@q3ce0 q3ce1@q3cde)))))) (set! q3c3a@cvt (lambda (q3c3b@p q3c3c@n q3c3d@ids) ((lambda (q3c41@t) ((lambda (q3c43@ls/false) (if (and q3c43@ls/false (apply (lambda (q3c45@id) (q2e2f@id? q3c45@id)) q3c43@ls/false)) (apply (lambda (q3c47@id) (if (q2e3b@bound-id-member? q3c3b@p q3c34@keys) (values (vector 'free-id q3c3b@p) q3c3d@ids) (if (q2e35@free-id=? q3c3b@p (q2fbe@scheme-stx '_)) (values '_ q3c3d@ids) (values 'any (cons (cons q3c3b@p q3c3c@n) q3c3d@ids))))) q3c43@ls/false) ((lambda (q3c49@t) ((lambda (q3c4b@ls/false) (if (and q3c4b@ls/false (apply (lambda (q3c4d@p q3c4e@dots) (q3036@ellipsis? q3c4e@dots)) q3c4b@ls/false)) (apply (lambda (q3c51@p q3c52@dots) (call-with-values (lambda () (q3c3a@cvt q3c51@p (+ q3c3c@n '1) q3c3d@ids)) (lambda (q3c59@q3c56 q3c5a@q3c58) ((lambda (q3c5d@ids q3c5e@p) (values (if (eq? q3c5e@p 'any) 'each-any (vector 'each q3c5e@p)) q3c5d@ids)) q3c5a@q3c58 q3c59@q3c56)))) q3c4b@ls/false) ((lambda (q3c61@t) ((lambda (q3c63@ls/false) (if (and q3c63@ls/false (apply (lambda (q3c65@x q3c66@dots q3c67@ys q3c68@z) (q3036@ellipsis? q3c66@dots)) q3c63@ls/false)) (apply (lambda (q3c6d@x q3c6e@dots q3c6f@ys q3c70@z) (call-with-values (lambda () (q3c3a@cvt q3c70@z q3c3c@n q3c3d@ids)) (lambda (q3c79@q3c76 q3c7a@q3c78) ((lambda (q3c7d@ids q3c7e@z) (call-with-values (lambda () (q3c38@cvt* q3c6f@ys q3c3c@n q3c7d@ids)) (lambda (q3c85@q3c82 q3c86@q3c84) ((lambda (q3c89@ids q3c8a@ys) (call-with-values (lambda () (q3c3a@cvt q3c6d@x (+ q3c3c@n '1) q3c89@ids)) (lambda (q3c91@q3c8e q3c92@q3c90) ((lambda (q3c95@ids q3c96@x) (values (vector 'each+ q3c96@x (reverse q3c8a@ys) q3c7e@z) q3c95@ids)) q3c92@q3c90 q3c91@q3c8e)))) q3c86@q3c84 q3c85@q3c82)))) q3c7a@q3c78 q3c79@q3c76)))) q3c63@ls/false) ((lambda (q3c99@t) ((lambda (q3c9b@ls/false) (if q3c9b@ls/false (apply (lambda (q3c9d@x q3c9e@y) (call-with-values (lambda () (q3c3a@cvt q3c9e@y q3c3c@n q3c3d@ids)) (lambda (q3ca5@q3ca2 q3ca6@q3ca4) ((lambda (q3ca9@ids q3caa@y) (call-with-values (lambda () (q3c3a@cvt q3c9d@x q3c3c@n q3ca9@ids)) (lambda (q3cb1@q3cae q3cb2@q3cb0) ((lambda (q3cb5@ids q3cb6@x) (values (cons q3cb6@x q3caa@y) q3cb5@ids)) q3cb2@q3cb0 q3cb1@q3cae)))) q3ca6@q3ca4 q3ca5@q3ca2)))) q3c9b@ls/false) ((lambda (q3cb9@t) ((lambda (q3cbb@ls/false) (if q3cbb@ls/false (apply (lambda () (values '() q3c3d@ids)) q3cbb@ls/false) ((lambda (q3cbd@t) ((lambda (q3cbf@ls/false) (if (and q3cbf@ls/false (apply (lambda (q3cc1@p) (not (q2df9@stx? q3cc1@p))) q3cbf@ls/false)) (apply (lambda (q3cc3@p) (call-with-values (lambda () (q3c3a@cvt q3cc3@p q3c3c@n q3c3d@ids)) (lambda (q3cc9@q3cc6 q3cca@q3cc8) ((lambda (q3ccd@ids q3cce@p) (values (vector 'vector q3cce@p) q3ccd@ids)) q3cca@q3cc8 q3cc9@q3cc6)))) q3cbf@ls/false) ((lambda (q3cd1@t) ((lambda (q3cd3@ls/false) (if q3cd3@ls/false (apply (lambda (q3cd5@datum) (values (vector 'atom (q2e43@stx->datum q3cd5@datum)) q3c3d@ids)) q3cd3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3cd1@t))) (q3034@syntax-dispatch q3cd1@t 'any))) q3cbd@t))) (q3034@syntax-dispatch q3cbd@t '#(vector each-any)))) q3cb9@t))) (q3034@syntax-dispatch q3cb9@t '()))) q3c99@t))) (q3034@syntax-dispatch q3c99@t '(any . any)))) q3c61@t))) (q3034@syntax-dispatch q3c61@t '(any any . #(each+ any () any))))) q3c49@t))) (q3034@syntax-dispatch q3c49@t '(any any)))) q3c41@t))) (q3034@syntax-dispatch q3c41@t 'any))) q3c3b@p))) (q3c3a@cvt q3c33@pattern '0 '()))) '#f '#f))) (set! q3034@syntax-dispatch ((lambda () ((lambda (q3cf6@stx^ q3cf8@match-each q3cfa@match-each+ q3cfc@match-each-any q3cfe@match-empty q3d00@combine q3d02@match* q3d04@match) (begin (set! q3cf6@stx^ (lambda (q3dd1@e q3dd2@m* q3dd3@s* q3dd4@ae*) (if (and (null? q3dd2@m*) (null? q3dd3@s*) (null? q3dd4@ae*)) q3dd1@e (q2e17@mkstx q3dd1@e q3dd2@m* q3dd3@s* q3dd4@ae*)))) (set! q3cf8@match-each (lambda (q3db1@e q3db2@p q3db3@m* q3db4@s* q3db5@ae*) (if (pair? q3db1@e) ((lambda (q3dbb@first) (and q3dbb@first ((lambda (q3dbd@rest) (and q3dbd@rest (cons q3dbb@first q3dbd@rest))) (q3cf8@match-each (cdr q3db1@e) q3db2@p q3db3@m* q3db4@s* q3db5@ae*)))) (q3d04@match (car q3db1@e) q3db2@p q3db3@m* q3db4@s* q3db5@ae* '())) (if (null? q3db1@e) '() (if (q2df9@stx? q3db1@e) (and (not (q2dbf@top-marked? q3db3@m*)) (call-with-values (lambda () (q2e15@join-wraps q3db3@m* q3db4@s* q3db5@ae* q3db1@e)) (lambda (q3dc5@q3dc0 q3dc6@q3dc2 q3dc7@q3dc4) ((lambda (q3dcb@ae* q3dcc@s* q3dcd@m*) (q3cf8@match-each (q2dfb@stx-expr q3db1@e) q3db2@p q3dcd@m* q3dcc@s* q3dcb@ae*)) q3dc7@q3dc4 q3dc6@q3dc2 q3dc5@q3dc0)))) (if (q298a@q287b@annotation? q3db1@e) (q3cf8@match-each (q298c@q287f@annotation-expression q3db1@e) q3db2@p q3db3@m* q3db4@s* q3db5@ae*) '#f)))))) (set! q3cfa@match-each+ (lambda (q3d71@e q3d72@x-pat q3d73@y-pat q3d74@z-pat q3d75@m* q3d76@s* q3d77@ae* q3d78@r) ((letrec ((q3d81@f (lambda (q3d83@e q3d84@m* q3d85@s* q3d86@ae*) (if (pair? q3d83@e) (call-with-values (lambda () (q3d81@f (cdr q3d83@e) q3d84@m* q3d85@s* q3d86@ae*)) (lambda (q3d91@q3d8c q3d92@q3d8e q3d93@q3d90) ((lambda (q3d97@r q3d98@y-pat q3d99@xr*) (if q3d97@r (if (null? q3d98@y-pat) ((lambda (q3d9d@xr) (if q3d9d@xr (values (cons q3d9d@xr q3d99@xr*) q3d98@y-pat q3d97@r) (values '#f '#f '#f))) (q3d04@match (car q3d83@e) q3d72@x-pat q3d84@m* q3d85@s* q3d86@ae* '())) (values '() (cdr q3d98@y-pat) (q3d04@match (car q3d83@e) (car q3d98@y-pat) q3d84@m* q3d85@s* q3d86@ae* q3d97@r))) (values '#f '#f '#f))) q3d93@q3d90 q3d92@q3d8e q3d91@q3d8c))) (if (q2df9@stx? q3d83@e) (if (q2dbf@top-marked? q3d84@m*) (values '() q3d73@y-pat (q3d04@match q3d83@e q3d74@z-pat q3d84@m* q3d85@s* q3d86@ae* q3d78@r)) (call-with-values (lambda () (q2e15@join-wraps q3d84@m* q3d85@s* q3d86@ae* q3d83@e)) (lambda (q3da5@q3da0 q3da6@q3da2 q3da7@q3da4) ((lambda (q3dab@ae* q3dac@s* q3dad@m*) (q3d81@f (q2dfb@stx-expr q3d83@e) q3dad@m* q3dac@s* q3dab@ae*)) q3da7@q3da4 q3da6@q3da2 q3da5@q3da0)))) (if (q298a@q287b@annotation? q3d83@e) (q3d81@f (q298c@q287f@annotation-expression q3d83@e) q3d84@m* q3d85@s* q3d86@ae*) (values '() q3d73@y-pat (q3d04@match q3d83@e q3d74@z-pat q3d84@m* q3d85@s* q3d86@ae* q3d78@r)))))))) q3d81@f) q3d71@e q3d75@m* q3d76@s* q3d77@ae*))) (set! q3cfc@match-each-any (lambda (q3d55@e q3d56@m* q3d57@s* q3d58@ae*) (if (pair? q3d55@e) ((lambda (q3d5d@l) (and q3d5d@l (cons (q3cf6@stx^ (car q3d55@e) q3d56@m* q3d57@s* q3d58@ae*) q3d5d@l))) (q3cfc@match-each-any (cdr q3d55@e) q3d56@m* q3d57@s* q3d58@ae*)) (if (null? q3d55@e) '() (if (q2df9@stx? q3d55@e) (and (not (q2dbf@top-marked? q3d56@m*)) (call-with-values (lambda () (q2e15@join-wraps q3d56@m* q3d57@s* q3d58@ae* q3d55@e)) (lambda (q3d65@q3d60 q3d66@q3d62 q3d67@q3d64) ((lambda (q3d6b@ae* q3d6c@s* q3d6d@m*) (q3cfc@match-each-any (q2dfb@stx-expr q3d55@e) q3d6d@m* q3d6c@s* q3d6b@ae*)) q3d67@q3d64 q3d66@q3d62 q3d65@q3d60)))) (if (q298a@q287b@annotation? q3d55@e) (q3cfc@match-each-any (q298c@q287f@annotation-expression q3d55@e) q3d56@m* q3d57@s* q3d58@ae*) '#f)))))) (set! q3cfe@match-empty (lambda (q3d4f@p q3d50@r) (if (null? q3d4f@p) q3d50@r (if (eq? q3d4f@p '_) q3d50@r (if (eq? q3d4f@p 'any) (cons '() q3d50@r) (if (pair? q3d4f@p) (q3cfe@match-empty (car q3d4f@p) (q3cfe@match-empty (cdr q3d4f@p) q3d50@r)) (if (eq? q3d4f@p 'each-any) (cons '() q3d50@r) ((lambda (q3d53@t) (if (memv q3d53@t '(each)) (q3cfe@match-empty (vector-ref q3d4f@p '1) q3d50@r) (if (memv q3d53@t '(each+)) (q3cfe@match-empty (vector-ref q3d4f@p '1) (q3cfe@match-empty (reverse (vector-ref q3d4f@p '2)) (q3cfe@match-empty (vector-ref q3d4f@p '3) q3d50@r))) (if (memv q3d53@t '(free-id atom)) q3d50@r (if (memv q3d53@t '(scheme-id atom)) q3d50@r (if (memv q3d53@t '(vector)) (q3cfe@match-empty (vector-ref q3d4f@p '1) q3d50@r) (assertion-violation 'syntax-dispatch '"invalid pattern" q3d4f@p))))))) (vector-ref q3d4f@p '0))))))))) (set! q3d00@combine (lambda (q3d4b@r* q3d4c@r) (if (null? (car q3d4b@r*)) q3d4c@r (cons (map car q3d4b@r*) (q3d00@combine (map cdr q3d4b@r*) q3d4c@r))))) (set! q3d02@match* (lambda (q3d27@e q3d28@p q3d29@m* q3d2a@s* q3d2b@ae* q3d2c@r) (if (null? q3d28@p) (and (null? q3d27@e) q3d2c@r) (if (pair? q3d28@p) (and (pair? q3d27@e) (q3d04@match (car q3d27@e) (car q3d28@p) q3d29@m* q3d2a@s* q3d2b@ae* (q3d04@match (cdr q3d27@e) (cdr q3d28@p) q3d29@m* q3d2a@s* q3d2b@ae* q3d2c@r))) (if (eq? q3d28@p 'each-any) ((lambda (q3d33@l) (and q3d33@l (cons q3d33@l q3d2c@r))) (q3cfc@match-each-any q3d27@e q3d29@m* q3d2a@s* q3d2b@ae*)) ((lambda (q3d35@t) (if (memv q3d35@t '(each)) (if (null? q3d27@e) (q3cfe@match-empty (vector-ref q3d28@p '1) q3d2c@r) ((lambda (q3d37@r*) (and q3d37@r* (q3d00@combine q3d37@r* q3d2c@r))) (q3cf8@match-each q3d27@e (vector-ref q3d28@p '1) q3d29@m* q3d2a@s* q3d2b@ae*))) (if (memv q3d35@t '(free-id)) (and (symbol? q3d27@e) (q2dbf@top-marked? q3d29@m*) (q2e35@free-id=? (q3cf6@stx^ q3d27@e q3d29@m* q3d2a@s* q3d2b@ae*) (vector-ref q3d28@p '1)) q3d2c@r) (if (memv q3d35@t '(scheme-id)) (and (symbol? q3d27@e) (q2dbf@top-marked? q3d29@m*) (q2e35@free-id=? (q3cf6@stx^ q3d27@e q3d29@m* q3d2a@s* q3d2b@ae*) (q2fbe@scheme-stx (vector-ref q3d28@p '1))) q3d2c@r) (if (memv q3d35@t '(each+)) (call-with-values (lambda () (q3cfa@match-each+ q3d27@e (vector-ref q3d28@p '1) (vector-ref q3d28@p '2) (vector-ref q3d28@p '3) q3d29@m* q3d2a@s* q3d2b@ae* q3d2c@r)) (lambda (q3d3f@q3d3a q3d40@q3d3c q3d41@q3d3e) ((lambda (q3d45@r q3d46@y-pat q3d47@xr*) (and q3d45@r (null? q3d46@y-pat) (if (null? q3d47@xr*) (q3cfe@match-empty (vector-ref q3d28@p '1) q3d45@r) (q3d00@combine q3d47@xr* q3d45@r)))) q3d41@q3d3e q3d40@q3d3c q3d3f@q3d3a))) (if (memv q3d35@t '(atom)) (and (fast-equal? (vector-ref q3d28@p '1) (q2e41@strip q3d27@e q3d29@m*)) q3d2c@r) (if (memv q3d35@t '(vector)) (and (vector? q3d27@e) (q3d04@match (vector->list q3d27@e) (vector-ref q3d28@p '1) q3d29@m* q3d2a@s* q3d2b@ae* q3d2c@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" q3d28@p)))))))) (vector-ref q3d28@p '0))))))) (set! q3d04@match (lambda (q3d09@e q3d0a@p q3d0b@m* q3d0c@s* q3d0d@ae* q3d0e@r) (if (not q3d0e@r) '#f (if (eq? q3d0a@p '_) q3d0e@r (if (eq? q3d0a@p 'any) (cons (q3cf6@stx^ q3d09@e q3d0b@m* q3d0c@s* q3d0d@ae*) q3d0e@r) (if (q2df9@stx? q3d09@e) (and (not (q2dbf@top-marked? q3d0b@m*)) (call-with-values (lambda () (q2e15@join-wraps q3d0b@m* q3d0c@s* q3d0d@ae* q3d09@e)) (lambda (q3d1b@q3d16 q3d1c@q3d18 q3d1d@q3d1a) ((lambda (q3d21@ae* q3d22@s* q3d23@m*) (q3d04@match (q2dfb@stx-expr q3d09@e) q3d0a@p q3d23@m* q3d22@s* q3d21@ae* q3d0e@r)) q3d1d@q3d1a q3d1c@q3d18 q3d1b@q3d16)))) (if (q298a@q287b@annotation? q3d09@e) (q3d04@match (q298c@q287f@annotation-expression q3d09@e) q3d0a@p q3d0b@m* q3d0c@s* q3d0d@ae* q3d0e@r) (q3d02@match* q3d09@e q3d0a@p q3d0b@m* q3d0c@s* q3d0d@ae* q3d0e@r)))))))) (lambda (q3d05@e q3d06@p) (q3d04@match q3d05@e q3d06@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q3036@ellipsis? (lambda (q3dd9@x) (and (q2e2f@id? q3dd9@x) (q2e35@free-id=? q3dd9@x (q2fbe@scheme-stx '...))))) (set! q3038@underscore? (lambda (q3ddb@x) (and (q2e2f@id? q3ddb@x) (q2e35@free-id=? q3ddb@x (q2fbe@scheme-stx '_))))) (set! q303a@verify-literals (lambda (q3ddd@lits q3dde@expr) (for-each (lambda (q3de1@x) (if (or (not (q2e2f@id? q3de1@x)) (q3036@ellipsis? q3de1@x) (q3038@underscore? q3de1@x)) (q3102@syntax-violation '#f '"invalid literal" q3dde@expr q3de1@x) (void))) q3ddd@lits))) (set! q303c@syntax-case-transformer ((lambda () ((lambda (q3de4@build-dispatch-call q3de6@invalid-ids-error q3de8@gen-clause q3dea@gen-syntax-case) (begin (set! q3de4@build-dispatch-call (lambda (q3e55@pvars q3e56@expr q3e57@y q3e58@r q3e59@mr) ((lambda (q3e5f@ids q3e60@levels) ((lambda (q3e63@labels q3e64@new-vars) ((lambda (q3e67@body) (list '(primitive apply) (q2d9d@q2cdd@build-lambda '#f q3e64@new-vars q3e67@body) q3e57@y)) (q3056@chi-expr (q2e1b@add-subst (q2df3@make-full-rib q3e5f@ids q3e63@labels) q3e56@expr) (append (map (lambda (q3e69@label q3e6a@var q3e6b@level) (cons q3e69@label (q2e49@make-binding 'syntax (cons q3e6a@var q3e6b@level)))) q3e63@labels q3e64@new-vars (map cdr q3e55@pvars)) q3e58@r) q3e59@mr))) (map q2dc5@gen-label q3e5f@ids) (map q2dc1@gen-lexical q3e5f@ids))) (map car q3e55@pvars) (map cdr q3e55@pvars)))) (set! q3de6@invalid-ids-error (lambda (q3e49@id* q3e4a@e q3e4b@class) ((letrec ((q3e4f@find (lambda (q3e51@id* q3e52@ok*) (if (null? q3e51@id*) (q3102@syntax-violation '#f '"invalid syntax" q3e4a@e) (if (q2e2f@id? (car q3e51@id*)) (if (q2e3b@bound-id-member? (car q3e51@id*) q3e52@ok*) (q30fe@syntax-error (car q3e51@id*) '"duplicate " q3e4b@class) (q3e4f@find (cdr q3e51@id*) (cons (car q3e51@id*) q3e52@ok*))) (q30fe@syntax-error (car q3e51@id*) '"invalid " q3e4b@class)))))) q3e4f@find) q3e49@id* '()))) (set! q3de8@gen-clause (lambda (q3e21@x q3e22@keys q3e23@clauses q3e24@r q3e25@mr q3e26@pat q3e27@fender q3e28@expr) (call-with-values (lambda () (q3032@convert-pattern q3e26@pat q3e22@keys)) (lambda (q3e35@q3e32 q3e36@q3e34) ((lambda (q3e39@pvars q3e3a@p) (if (not (q2e39@distinct-bound-ids? (map car q3e39@pvars))) (q3de6@invalid-ids-error (map car q3e39@pvars) q3e26@pat '"pattern variable") (if (not (for-all (lambda (q3e3d@x) (not (q3036@ellipsis? (car q3e3d@x)))) q3e39@pvars)) (q3102@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" q3e26@pat) ((lambda (q3e3f@y) ((lambda (q3e41@test) ((lambda (q3e43@conseq) ((lambda (q3e45@altern) (list (q2d9d@q2cdd@build-lambda '#f (list q3e3f@y) (list 'if q3e41@test q3e43@conseq q3e45@altern)) (list '(primitive syntax-dispatch) q3e21@x (list 'quote q3e3a@p)))) (q3dea@gen-syntax-case q3e21@x q3e22@keys q3e23@clauses q3e24@r q3e25@mr))) (q3de4@build-dispatch-call q3e39@pvars q3e28@expr q3e3f@y q3e24@r q3e25@mr))) (if (eq? q3e27@fender '#t) q3e3f@y ((lambda (q3e47@call) (list 'if q3e3f@y q3e47@call (list 'quote '#f))) (q3de4@build-dispatch-call q3e39@pvars q3e27@fender q3e3f@y q3e24@r q3e25@mr))))) (q2dc1@gen-lexical 'tmp))))) q3e36@q3e34 q3e35@q3e32))))) (set! q3dea@gen-syntax-case (lambda (q3dff@x q3e00@keys q3e01@clauses q3e02@r q3e03@mr) (if (null? q3e01@clauses) (list '(primitive syntax-error) q3dff@x) ((lambda (q3e09@t) ((lambda (q3e0b@ls/false) (if q3e0b@ls/false (apply (lambda (q3e0d@pat q3e0e@expr) (if (and (q2e2f@id? q3e0d@pat) (not (q2e3b@bound-id-member? q3e0d@pat q3e00@keys)) (not (q3036@ellipsis? q3e0d@pat))) (if (q2e35@free-id=? q3e0d@pat (q2fbe@scheme-stx '_)) (q3056@chi-expr q3e0e@expr q3e02@r q3e03@mr) ((lambda (q3e11@lab q3e12@lex) ((lambda (q3e15@body) (list (q2d9d@q2cdd@build-lambda '#f (list q3e12@lex) q3e15@body) q3dff@x)) (q3056@chi-expr (q2e1b@add-subst (q2df3@make-full-rib (list q3e0d@pat) (list q3e11@lab)) q3e0e@expr) (cons (cons q3e11@lab (q2e49@make-binding 'syntax (cons q3e12@lex '0))) q3e02@r) q3e03@mr))) (q2dc5@gen-label q3e0d@pat) (q2dc1@gen-lexical q3e0d@pat))) (q3de8@gen-clause q3dff@x q3e00@keys (cdr q3e01@clauses) q3e02@r q3e03@mr q3e0d@pat '#t q3e0e@expr))) q3e0b@ls/false) ((lambda (q3e17@t) ((lambda (q3e19@ls/false) (if q3e19@ls/false (apply (lambda (q3e1b@pat q3e1c@fender q3e1d@expr) (q3de8@gen-clause q3dff@x q3e00@keys (cdr q3e01@clauses) q3e02@r q3e03@mr q3e1b@pat q3e1c@fender q3e1d@expr)) q3e19@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3e17@t))) (q3034@syntax-dispatch q3e17@t '(any any any)))) q3e09@t))) (q3034@syntax-dispatch q3e09@t '(any any)))) (car q3e01@clauses))))) (lambda (q3deb@e q3dec@r q3ded@mr) ((lambda (q3df1@t) ((lambda (q3df3@ls/false) (if q3df3@ls/false (apply (lambda (q3df5@expr q3df6@keys q3df7@clauses) (begin (q303a@verify-literals q3df6@keys q3deb@e) ((lambda (q3dfb@x) ((lambda (q3dfd@body) (list (q2d9d@q2cdd@build-lambda '#f (list q3dfb@x) q3dfd@body) (q3056@chi-expr q3df5@expr q3dec@r q3ded@mr))) (q3dea@gen-syntax-case q3dfb@x q3df6@keys q3df7@clauses q3dec@r q3ded@mr))) (q2dc1@gen-lexical 'tmp)))) q3df3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3df1@t))) (q3034@syntax-dispatch q3df1@t '(_ any each-any . each-any)))) q3deb@e)))) '#f '#f '#f '#f)))) (set! q303e@ellipsis-map (lambda (q3e6f@proc q3e70@ls . q3e73@ls*) ((lambda (q3e76@who) (begin (set! q3e76@who '...) (begin (if (not (list? q3e70@ls)) (assertion-violation q3e76@who '"not a list" q3e70@ls) (void)) (if (not (null? q3e73@ls*)) ((lambda (q3e77@n) (for-each (lambda (q3e79@x) (begin (if (not (list? q3e79@x)) (assertion-violation q3e76@who '"not a list" q3e79@x) (void)) (if (not (= (length q3e79@x) q3e77@n)) (assertion-violation q3e76@who '"length mismatch" q3e70@ls q3e79@x) (void)))) q3e73@ls*)) (length q3e70@ls)) (void)) (apply map q3e6f@proc q3e70@ls q3e73@ls*)))) '#f))) (set! q3040@syntax-transformer ((lambda () ((lambda (q3e7c@gen-syntax q3e7e@gen-ref q3e80@gen-append q3e82@gen-mappend q3e84@gen-map q3e86@gen-cons q3e88@gen-vector q3e8a@regen) (begin (set! q3e7c@gen-syntax (lambda (q3ef3@src q3ef4@e q3ef5@r q3ef6@maps q3ef7@ellipsis? q3ef8@vec?) ((lambda (q3eff@t) ((lambda (q3f01@ls/false) (if (and q3f01@ls/false (apply (lambda (q3f03@dots) (q3ef7@ellipsis? q3f03@dots)) q3f01@ls/false)) (apply (lambda (q3f05@dots) (q3102@syntax-violation '#f '"misplaced ellipsis in syntax form" q3ef3@src)) q3f01@ls/false) ((lambda (q3f07@t) ((lambda (q3f09@ls/false) (if (and q3f09@ls/false (apply (lambda (q3f0b@id) (q2e2f@id? q3f0b@id)) q3f09@ls/false)) (apply (lambda (q3f0d@id) ((lambda (q3f0f@label) ((lambda (q3f11@b) ((lambda () (if (eq? (q2e4b@binding-type q3f11@b) 'syntax) (call-with-values (lambda () ((lambda (q3f17@var.lev) (q3e7e@gen-ref q3ef3@src (car q3f17@var.lev) (cdr q3f17@var.lev) q3ef6@maps)) (q2e4d@binding-value q3f11@b))) (lambda (q3f19@q3f14 q3f1a@q3f16) ((lambda (q3f1d@maps q3f1e@var) (values (list 'ref q3f1e@var) q3f1d@maps)) q3f1a@q3f16 q3f19@q3f14))) (values (list 'quote q3ef4@e) q3ef6@maps))))) (q2e47@label->binding q3f0f@label q3ef5@r))) (q2e45@id->label q3ef4@e))) q3f09@ls/false) ((lambda (q3f21@t) ((lambda (q3f23@ls/false) (if (and q3f23@ls/false (apply (lambda (q3f25@dots q3f26@e) (q3ef7@ellipsis? q3f25@dots)) q3f23@ls/false)) (apply (lambda (q3f29@dots q3f2a@e) (if q3ef8@vec? (q3102@syntax-violation '#f '"misplaced ellipsis in syntax form" q3ef3@src) (q3e7c@gen-syntax q3ef3@src q3f2a@e q3ef5@r q3ef6@maps (lambda (q3f2d@x) '#f) '#f))) q3f23@ls/false) ((lambda (q3f2f@t) ((lambda (q3f31@ls/false) (if (and q3f31@ls/false (apply (lambda (q3f33@x q3f34@dots q3f35@y) (q3ef7@ellipsis? q3f34@dots)) q3f31@ls/false)) (apply (lambda (q3f39@x q3f3a@dots q3f3b@y) ((letrec ((q3f3f@f (lambda (q3f41@y q3f42@k) ((lambda (q3f45@t) ((lambda (q3f47@ls/false) (if q3f47@ls/false (apply (lambda () (q3f42@k q3ef6@maps)) q3f47@ls/false) ((lambda (q3f49@t) ((lambda (q3f4b@ls/false) (if (and q3f4b@ls/false (apply (lambda (q3f4d@dots q3f4e@y) (q3ef7@ellipsis? q3f4d@dots)) q3f4b@ls/false)) (apply (lambda (q3f51@dots q3f52@y) (q3f3f@f q3f52@y (lambda (q3f55@maps) (call-with-values (lambda () (q3f42@k (cons '() q3f55@maps))) (lambda (q3f5b@q3f58 q3f5c@q3f5a) ((lambda (q3f5f@maps q3f60@x) (if (null? (car q3f5f@maps)) (q3102@syntax-violation '#f '"extra ellipsis in syntax form" q3ef3@src) (values (q3e82@gen-mappend q3f60@x (car q3f5f@maps)) (cdr q3f5f@maps)))) q3f5c@q3f5a q3f5b@q3f58)))))) q3f4b@ls/false) ((lambda (q3f63@t) ((lambda (q3f65@ls/false) (if q3f65@ls/false (apply (lambda () (call-with-values (lambda () (q3e7c@gen-syntax q3ef3@src q3f41@y q3ef5@r q3ef6@maps q3ef7@ellipsis? q3ef8@vec?)) (lambda (q3f6b@q3f68 q3f6c@q3f6a) ((lambda (q3f6f@maps q3f70@y) (call-with-values (lambda () (q3f42@k q3f6f@maps)) (lambda (q3f77@q3f74 q3f78@q3f76) ((lambda (q3f7b@maps q3f7c@x) (values (q3e80@gen-append q3f7c@x q3f70@y) q3f7b@maps)) q3f78@q3f76 q3f77@q3f74)))) q3f6c@q3f6a q3f6b@q3f68)))) q3f65@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3f63@t))) (q3034@syntax-dispatch q3f63@t '_))) q3f49@t))) (q3034@syntax-dispatch q3f49@t '(any . any)))) q3f45@t))) (q3034@syntax-dispatch q3f45@t '()))) q3f41@y)))) q3f3f@f) q3f3b@y (lambda (q3f7f@maps) (call-with-values (lambda () (q3e7c@gen-syntax q3ef3@src q3f39@x q3ef5@r (cons '() q3f7f@maps) q3ef7@ellipsis? '#f)) (lambda (q3f85@q3f82 q3f86@q3f84) ((lambda (q3f89@maps q3f8a@x) (if (null? (car q3f89@maps)) (q3102@syntax-violation '#f '"extra ellipsis in syntax form" q3ef3@src) (values (q3e84@gen-map q3f8a@x (car q3f89@maps)) (cdr q3f89@maps)))) q3f86@q3f84 q3f85@q3f82)))))) q3f31@ls/false) ((lambda (q3f8d@t) ((lambda (q3f8f@ls/false) (if q3f8f@ls/false (apply (lambda (q3f91@x q3f92@y) (call-with-values (lambda () (q3e7c@gen-syntax q3ef3@src q3f91@x q3ef5@r q3ef6@maps q3ef7@ellipsis? '#f)) (lambda (q3f99@q3f96 q3f9a@q3f98) ((lambda (q3f9d@maps q3f9e@xnew) (call-with-values (lambda () (q3e7c@gen-syntax q3ef3@src q3f92@y q3ef5@r q3f9d@maps q3ef7@ellipsis? q3ef8@vec?)) (lambda (q3fa5@q3fa2 q3fa6@q3fa4) ((lambda (q3fa9@maps q3faa@ynew) (values (q3e86@gen-cons q3ef4@e q3f91@x q3f92@y q3f9e@xnew q3faa@ynew) q3fa9@maps)) q3fa6@q3fa4 q3fa5@q3fa2)))) q3f9a@q3f98 q3f99@q3f96)))) q3f8f@ls/false) ((lambda (q3fad@t) ((lambda (q3faf@ls/false) (if q3faf@ls/false (apply (lambda (q3fb1@ls) (call-with-values (lambda () (q3e7c@gen-syntax q3ef3@src q3fb1@ls q3ef5@r q3ef6@maps q3ef7@ellipsis? '#t)) (lambda (q3fb7@q3fb4 q3fb8@q3fb6) ((lambda (q3fbb@maps q3fbc@lsnew) (values (q3e88@gen-vector q3ef4@e q3fb1@ls q3fbc@lsnew) q3fbb@maps)) q3fb8@q3fb6 q3fb7@q3fb4)))) q3faf@ls/false) ((lambda (q3fbf@t) ((lambda (q3fc1@ls/false) (if q3fc1@ls/false (apply (lambda () (values (list 'quote q3ef4@e) q3ef6@maps)) q3fc1@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3fbf@t))) (q3034@syntax-dispatch q3fbf@t '_))) q3fad@t))) (q3034@syntax-dispatch q3fad@t '#(vector each-any)))) q3f8d@t))) (q3034@syntax-dispatch q3f8d@t '(any . any)))) q3f2f@t))) (q3034@syntax-dispatch q3f2f@t '(any any . any)))) q3f21@t))) (q3034@syntax-dispatch q3f21@t '(any any)))) q3f07@t))) (q3034@syntax-dispatch q3f07@t 'any))) q3eff@t))) (q3034@syntax-dispatch q3eff@t 'any))) q3ef4@e))) (set! q3e7e@gen-ref (lambda (q3ed9@src q3eda@var q3edb@level q3edc@maps) (if (= q3edb@level '0) (values q3eda@var q3edc@maps) (if (null? q3edc@maps) (q3102@syntax-violation '#f '"missing ellipsis in syntax form" q3ed9@src) (call-with-values (lambda () (q3e7e@gen-ref q3ed9@src q3eda@var (- q3edb@level '1) (cdr q3edc@maps))) (lambda (q3ee5@q3ee2 q3ee6@q3ee4) ((lambda (q3ee9@outer-maps q3eea@outer-var) ((lambda (q3eed@t) (if q3eed@t ((lambda (q3eef@b) (values (cdr q3eef@b) q3edc@maps)) q3eed@t) ((lambda (q3ef1@inner-var) (values q3ef1@inner-var (cons (cons (cons q3eea@outer-var q3ef1@inner-var) (car q3edc@maps)) q3ee9@outer-maps))) (q2dc1@gen-lexical 'tmp)))) (assq q3eea@outer-var (car q3edc@maps)))) q3ee6@q3ee4 q3ee5@q3ee2))))))) (set! q3e80@gen-append (lambda (q3ed5@x q3ed6@y) (if (fast-equal? q3ed6@y ''()) q3ed5@x (list 'append q3ed5@x q3ed6@y)))) (set! q3e82@gen-mappend (lambda (q3ed1@e q3ed2@map-env) (list 'apply '(primitive append) (q3e84@gen-map q3ed1@e q3ed2@map-env)))) (set! q3e84@gen-map (lambda (q3ebf@e q3ec0@map-env) ((lambda (q3ec3@formals q3ec4@actuals) (if (eq? (car q3ebf@e) 'ref) (car q3ec4@actuals) (if (for-all (lambda (q3ec7@x) (and (eq? (car q3ec7@x) 'ref) (memq (cadr q3ec7@x) q3ec3@formals))) (cdr q3ebf@e)) ((lambda (q3ec9@args) (cons 'map (cons (list 'primitive (car q3ebf@e)) q3ec9@args))) (map ((lambda (q3ecb@r) (lambda (q3ecd@x) (cdr (assq (cadr q3ecd@x) q3ecb@r)))) (map cons q3ec3@formals q3ec4@actuals)) (cdr q3ebf@e))) (cons* 'map (list 'lambda q3ec3@formals q3ebf@e) q3ec4@actuals)))) (map cdr q3ec0@map-env) (map (lambda (q3ecf@x) (list 'ref (car q3ecf@x))) q3ec0@map-env)))) (set! q3e86@gen-cons (lambda (q3eaf@e q3eb0@x q3eb1@y q3eb2@xnew q3eb3@ynew) ((lambda (q3eb9@t) (if (memv q3eb9@t '(quote)) (if (eq? (car q3eb2@xnew) 'quote) ((lambda (q3ebb@xnew q3ebc@ynew) (if (and (eq? q3ebb@xnew q3eb0@x) (eq? q3ebc@ynew q3eb1@y)) (list 'quote q3eaf@e) (list 'quote (cons q3ebb@xnew q3ebc@ynew)))) (cadr q3eb2@xnew) (cadr q3eb3@ynew)) (if (null? (cadr q3eb3@ynew)) (list 'list q3eb2@xnew) (list 'cons q3eb2@xnew q3eb3@ynew))) (if (memv q3eb9@t '(list)) (cons 'list (cons q3eb2@xnew (cdr q3eb3@ynew))) (list 'cons q3eb2@xnew q3eb3@ynew)))) (car q3eb3@ynew)))) (set! q3e88@gen-vector (lambda (q3ea9@e q3eaa@ls q3eab@lsnew) (if (eq? (car q3eab@lsnew) 'quote) (if (eq? (cadr q3eab@lsnew) q3eaa@ls) (list 'quote q3ea9@e) (list 'quote (list->vector (cadr q3eab@lsnew)))) (if (eq? (car q3eab@lsnew) 'list) (cons 'vector (cdr q3eab@lsnew)) (list 'list->vector q3eab@lsnew))))) (set! q3e8a@regen (lambda (q3ea3@x) ((lambda (q3ea5@t) (if (memv q3ea5@t '(ref)) (cadr q3ea3@x) (if (memv q3ea5@t '(primitive)) (list 'primitive (cadr q3ea3@x)) (if (memv q3ea5@t '(quote)) (list 'quote (cadr q3ea3@x)) (if (memv q3ea5@t '(lambda)) (q2d9d@q2cdd@build-lambda '#f (cadr q3ea3@x) (q3e8a@regen (caddr q3ea3@x))) (if (memv q3ea5@t '(map)) ((lambda (q3ea7@ls) (cons '(primitive ellipsis-map) q3ea7@ls)) (map q3e8a@regen (cdr q3ea3@x))) (cons (list 'primitive (car q3ea3@x)) (map q3e8a@regen (cdr q3ea3@x))))))))) (car q3ea3@x)))) (lambda (q3e8b@e q3e8c@r q3e8d@mr) ((lambda (q3e91@t) ((lambda (q3e93@ls/false) (if q3e93@ls/false (apply (lambda (q3e95@x) (call-with-values (lambda () (q3e7c@gen-syntax q3e8b@e q3e95@x q3e8c@r '() q3036@ellipsis? '#f)) (lambda (q3e9b@q3e98 q3e9c@q3e9a) ((lambda (q3e9f@maps q3ea0@e) (q3e8a@regen q3ea0@e)) q3e9c@q3e9a q3e9b@q3e98)))) q3e93@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3e91@t))) (q3034@syntax-dispatch q3e91@t '(_ any)))) q3e8b@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q3042@core-macro-transformer (lambda (q3fc3@name) ((lambda (q3fc5@t) (if (memv q3fc5@t '(quote)) q2fe4@quote-transformer (if (memv q3fc5@t '(lambda)) q2fe8@lambda-transformer (if (memv q3fc5@t '(case-lambda)) q2fe6@case-lambda-transformer (if (memv q3fc5@t '(letrec)) q2fcc@letrec-transformer (if (memv q3fc5@t '(letrec*)) q2fce@letrec*-transformer (if (memv q3fc5@t '(if)) q2fdc@if-transformer (if (memv q3fc5@t '(and)) q2fde@and-transformer (if (memv q3fc5@t '(or)) q2fe0@or-transformer (if (memv q3fc5@t '(foreign-call)) q3030@foreign-call-transformer (if (memv q3fc5@t '(syntax-case)) q303c@syntax-case-transformer (if (memv q3fc5@t '(syntax)) q3040@syntax-transformer (if (memv q3fc5@t '(type-descriptor)) q2fd2@type-descriptor-transformer (if (memv q3fc5@t '(record-type-descriptor)) q2fd4@record-type-descriptor-transformer (if (memv q3fc5@t '(record-constructor-descriptor)) q2fd6@record-constructor-descriptor-transformer (if (memv q3fc5@t '(fluid-let-syntax)) q2fd0@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" q3fc3@name))))))))))))))))) q3fc3@name))) (set! q3044@symbol-macro (lambda (q3fc7@x q3fc8@set) ((lambda (q3fcb@t) ((lambda (q3fcd@ls/false) (if (and q3fcd@ls/false (apply (lambda (q3fcf@name) (and (q2e2f@id? q3fcf@name) (memq (q2e31@id->sym q3fcf@name) q3fc8@set))) q3fcd@ls/false)) (apply (lambda (q3fd1@name) (q2fea@bless (list 'quote q3fd1@name))) q3fcd@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q3fcb@t))) (q3034@syntax-dispatch q3fcb@t '(_ any)))) q3fc7@x))) (set! q3046@macro-transformer (lambda (q3fd3@x) (if (procedure? q3fd3@x) q3fd3@x (if (symbol? q3fd3@x) ((lambda (q3fd5@t) (if (memv q3fd5@t '(define-record-type)) q3028@define-record-type-macro (if (memv q3fd5@t '(define-struct)) q3026@define-struct-macro (if (memv q3fd5@t '(include)) q301c@include-macro (if (memv q3fd5@t '(cond)) q3018@cond-macro (if (memv q3fd5@t '(let)) q2ff0@let-macro (if (memv q3fd5@t '(do)) q3010@do-macro (if (memv q3fd5@t '(or)) q3014@or-macro (if (memv q3fd5@t '(and)) q3016@and-macro (if (memv q3fd5@t '(let*)) q3012@let*-macro (if (memv q3fd5@t '(let-values)) q2ff2@let-values-macro (if (memv q3fd5@t '(let*-values)) q2ff4@let*-values-macro (if (memv q3fd5@t '(syntax-rules)) q3020@syntax-rules-macro (if (memv q3fd5@t '(quasiquote)) q3022@quasiquote-macro (if (memv q3fd5@t '(quasisyntax)) q3024@quasisyntax-macro (if (memv q3fd5@t '(with-syntax)) q2fec@with-syntax-macro (if (memv q3fd5@t '(when)) q2fd8@when-macro (if (memv q3fd5@t '(unless)) q2fda@unless-macro (if (memv q3fd5@t '(case)) q2fe2@case-macro (if (memv q3fd5@t '(identifier-syntax)) q300e@identifier-syntax-macro (if (memv q3fd5@t '(time)) q3006@time-macro (if (memv q3fd5@t '(delay)) q3008@delay-macro (if (memv q3fd5@t '(assert)) q300a@assert-macro (if (memv q3fd5@t '(endianness)) q300c@endianness-macro (if (memv q3fd5@t '(guard)) q3002@guard-macro (if (memv q3fd5@t '(define-enumeration)) q3004@define-enumeration-macro (if (memv q3fd5@t '(trace-lambda)) q2ff6@trace-lambda-macro (if (memv q3fd5@t '(trace-define)) q2ff8@trace-define-macro (if (memv q3fd5@t '(trace-define-syntax)) q2ffa@trace-define-syntax-macro (if (memv q3fd5@t '(trace-let-syntax)) q2ffe@trace-let-syntax-macro (if (memv q3fd5@t '(trace-letrec-syntax)) q3000@trace-letrec-syntax-macro (if (memv q3fd5@t '(define-condition-type)) q302a@define-condition-type-macro (if (memv q3fd5@t '(parameterize)) q302e@parameterize-macro (if (memv q3fd5@t '(include-into)) q301e@include-into-macro (if (memv q3fd5@t '(eol-style)) (lambda (q3fd7@x) (q3044@symbol-macro q3fd7@x '(none lf cr crlf nel crnel ls))) (if (memv q3fd5@t '(error-handling-mode)) (lambda (q3fd9@x) (q3044@symbol-macro q3fd9@x '(ignore raise replace))) (if (memv q3fd5@t '(buffer-mode)) (lambda (q3fdb@x) (q3044@symbol-macro q3fdb@x '(none line block))) (if (memv q3fd5@t '(file-options)) q2db4@file-options-macro (if (memv q3fd5@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) q302c@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" q3fd3@x)))))))))))))))))))))))))))))))))))))))) q3fd3@x) (error 'core-macro-transformer '"BUG: invalid macro" q3fd3@x))))) (set! q3048@local-macro-transformer (lambda (q3fdd@x) (car q3fdd@x))) (set! q304a@do-macro-call (lambda (q3fdf@transformer q3fe0@expr) ((lambda (q3fe3@out) (begin ((letrec ((q3fe5@f (lambda (q3fe7@x) (if (not (q2df9@stx? q3fe7@x)) (if (pair? q3fe7@x) (begin (q3fe5@f (car q3fe7@x)) (q3fe5@f (cdr q3fe7@x))) (if (vector? q3fe7@x) (vector-for-each q3fe5@f q3fe7@x) (if (symbol? q3fe7@x) (q3102@syntax-violation '#f '"raw symbol encountered in output of macro" q3fe0@expr q3fe7@x) (void)))) (void))))) q3fe5@f) q3fe3@out) (q2e19@add-mark (q2e0f@gen-mark) q3fe3@out q3fe0@expr))) (q3fdf@transformer (q2e19@add-mark q2e11@anti-mark q3fe0@expr '#f))))) (set! q304c@chi-macro (lambda (q3fe9@p q3fea@e) (q304a@do-macro-call (q3046@macro-transformer q3fe9@p) q3fea@e))) (set! q304e@chi-local-macro (lambda (q3fed@p q3fee@e) (q304a@do-macro-call (q3048@local-macro-transformer q3fed@p) q3fee@e))) (set! q3050@chi-global-macro (lambda (q3ff1@p q3ff2@e) ((lambda (q3ff5@lib q3ff6@loc) (begin (q2c66@q2aaa@visit-library q3ff5@lib) ((lambda (q3ff9@x) ((lambda (q3ffb@transformer) (q304a@do-macro-call q3ffb@transformer q3ff2@e)) (if (procedure? q3ff9@x) q3ff9@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" q3ff9@x)))) (symbol-value q3ff6@loc)))) (car q3ff1@p) (cdr q3ff1@p)))) (set! q3052@chi-expr* (lambda (q3ffd@e* q3ffe@r q3fff@mr) (if (null? q3ffd@e*) '() ((lambda (q4003@e) (cons q4003@e (q3052@chi-expr* (cdr q3ffd@e*) q3ffe@r q3fff@mr))) (q3056@chi-expr (car q3ffd@e*) q3ffe@r q3fff@mr))))) (set! q3054@chi-application (lambda (q4005@e q4006@r q4007@mr) ((lambda (q400b@t) ((lambda (q400d@ls/false) (if q400d@ls/false (apply (lambda (q400f@rator q4010@rands) ((lambda (q4013@rator) (cons q4013@rator (q3052@chi-expr* q4010@rands q4006@r q4007@mr))) (q3056@chi-expr q400f@rator q4006@r q4007@mr))) q400d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q400b@t))) (q3034@syntax-dispatch q400b@t '(any . each-any)))) q4005@e))) (set! q3056@chi-expr (lambda (q4015@e q4016@r q4017@mr) (call-with-values (lambda () (q2e51@syntax-type q4015@e q4016@r)) (lambda (q4021@q401c q4022@q401e q4023@q4020) ((lambda (q4027@kwd q4028@value q4029@type) ((lambda (q402d@t) (if (memv q402d@t '(core-macro)) ((lambda (q402f@transformer) (q402f@transformer q4015@e q4016@r q4017@mr)) (q3042@core-macro-transformer q4028@value)) (if (memv q402d@t '(global)) ((lambda (q4031@lib) ((lambda (q4033@loc) ((lambda () (begin ((q3096@inv-collector) q4031@lib) q4033@loc)))) (cdr q4028@value))) (car q4028@value)) (if (memv q402d@t '(core-prim)) ((lambda (q4035@name) (list 'primitive q4035@name)) q4028@value) (if (memv q402d@t '(call)) (q3054@chi-application q4015@e q4016@r q4017@mr) (if (memv q402d@t '(lexical)) ((lambda (q4037@lex) q4037@lex) (q2fc0@lexical-var q4028@value)) (if (memv q402d@t '(global-macro global-macro!)) (q3056@chi-expr (q3050@chi-global-macro q4028@value q4015@e) q4016@r q4017@mr) (if (memv q402d@t '(local-macro local-macro!)) (q3056@chi-expr (q304e@chi-local-macro q4028@value q4015@e) q4016@r q4017@mr) (if (memv q402d@t '(macro macro!)) (q3056@chi-expr (q304c@chi-macro q4028@value q4015@e) q4016@r q4017@mr) (if (memv q402d@t '(constant)) ((lambda (q4039@datum) (list 'quote q4039@datum)) q4028@value) (if (memv q402d@t '(set!)) (q3058@chi-set! q4015@e q4016@r q4017@mr) (if (memv q402d@t '(begin)) ((lambda (q403b@t) ((lambda (q403d@ls/false) (if q403d@ls/false (apply (lambda (q403f@x q4040@x*) (q2da0@q2d0f@build-sequence '#f (q3052@chi-expr* (cons q403f@x q4040@x*) q4016@r q4017@mr))) q403d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q403b@t))) (q3034@syntax-dispatch q403b@t '(_ any . each-any)))) q4015@e) (if (memv q402d@t '(let-syntax letrec-syntax)) ((lambda (q4043@t) ((lambda (q4045@ls/false) (if (and q4045@ls/false (apply (lambda (q4047@xlhs* q4048@xrhs* q4049@xbody q404a@xbody*) (if (not (q2e37@valid-bound-ids? q4047@xlhs*)) (q3102@syntax-violation '#f '"invalid identifiers" q4015@e) (void))) q4045@ls/false)) (apply (lambda (q404f@xlhs* q4050@xrhs* q4051@xbody q4052@xbody*) ((lambda (q4057@xlab*) ((lambda (q4059@xrib) ((lambda (q405b@xb*) ((lambda () (q2da0@q2d0f@build-sequence '#f (q3052@chi-expr* (map (lambda (q405d@x) (q2e1b@add-subst q4059@xrib q405d@x)) (cons q4051@xbody q4052@xbody*)) (append (map cons q4057@xlab* q405b@xb*) q4016@r) (append (map cons q4057@xlab* q405b@xb*) q4017@mr)))))) (map (lambda (q405f@x) (q2e67@make-eval-transformer (q3088@expand-transformer (if (eq? q4029@type 'let-syntax) q405f@x (q2e1b@add-subst q4059@xrib q405f@x)) q4017@mr))) q4050@xrhs*))) (q2df3@make-full-rib q404f@xlhs* q4057@xlab*))) (map q2dc5@gen-label q404f@xlhs*))) q4045@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4043@t))) (q3034@syntax-dispatch q4043@t '(_ #(each (any any)) any . each-any)))) q4015@e) (if (memv q402d@t '(displaced-lexical)) (q3102@syntax-violation '#f '"identifier out of context" q4015@e) (if (memv q402d@t '(syntax)) (q3102@syntax-violation '#f '"reference to pattern variable outside a syntax form" q4015@e) (if (memv q402d@t '(define define-syntax module import library)) (q3102@syntax-violation '#f (string-append ((lambda (q4061@t) (if (memv q4061@t '(define)) '"a definition" (if (memv q4061@t '(define-syntax)) '"a define-syntax" (if (memv q4061@t '(module)) '"a module definition" (if (memv q4061@t '(library)) '"a library definition" (if (memv q4061@t '(import)) '"an import declaration" (if (memv q4061@t '(export)) '"an export declaration" '"a non-expression"))))))) q4029@type) '" was found where an expression was expected") q4015@e) (if (memv q402d@t '(mutable)) (q3102@syntax-violation '#f '"attempt to reference an unexportable variable" q4015@e) (q3102@syntax-violation '#f '"invalid expression" q4015@e)))))))))))))))))) q4029@type)) q4023@q4020 q4022@q401e q4021@q401c))))) (set! q3058@chi-set! (lambda (q4063@e q4064@r q4065@mr) ((lambda (q4069@t) ((lambda (q406b@ls/false) (if (and q406b@ls/false (apply (lambda (q406d@x q406e@v) (q2e2f@id? q406d@x)) q406b@ls/false)) (apply (lambda (q4071@x q4072@v) (call-with-values (lambda () (q2e51@syntax-type q4071@x q4064@r)) (lambda (q407b@q4076 q407c@q4078 q407d@q407a) ((lambda (q4081@kwd q4082@value q4083@type) ((lambda (q4087@t) (if (memv q4087@t '(lexical)) (begin (q2fc4@set-lexical-mutable! q4082@value '#t) (list 'set! (q2fc0@lexical-var q4082@value) (q3056@chi-expr q4072@v q4064@r q4065@mr))) (if (memv q4087@t '(core-prim)) (q3102@syntax-violation '#f '"cannot modify imported core primitive" q4063@e) (if (memv q4087@t '(global)) (q3102@syntax-violation '#f '"attempt to modify imported binding" q4063@e) (if (memv q4087@t '(global-macro!)) (q3056@chi-expr (q3050@chi-global-macro q4082@value q4063@e) q4064@r q4065@mr) (if (memv q4087@t '(local-macro!)) (q3056@chi-expr (q304e@chi-local-macro q4082@value q4063@e) q4064@r q4065@mr) (if (memv q4087@t '(mutable)) (q3102@syntax-violation '#f '"attempt to assign to an unexportable variable" q4063@e) (q3102@syntax-violation '#f '"invalid syntax" q4063@e)))))))) q4083@type)) q407d@q407a q407c@q4078 q407b@q4076)))) q406b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4069@t))) (q3034@syntax-dispatch q4069@t '(_ any any)))) q4063@e))) (set! q305a@verify-formals (lambda (q4089@fmls q408a@stx) ((lambda (q408d@t) ((lambda (q408f@ls/false) (if q408f@ls/false (apply (lambda (q4091@x*) (if (not (q2e37@valid-bound-ids? q4091@x*)) (q2fee@invalid-fmls-error q408a@stx q4089@fmls) (void))) q408f@ls/false) ((lambda (q4093@t) ((lambda (q4095@ls/false) (if q4095@ls/false (apply (lambda (q4097@x* q4098@x) (if (not (q2e37@valid-bound-ids? (cons q4098@x q4097@x*))) (q2fee@invalid-fmls-error q408a@stx q4089@fmls) (void))) q4095@ls/false) ((lambda (q409b@t) ((lambda (q409d@ls/false) (if q409d@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid syntax" q408a@stx)) q409d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q409b@t))) (q3034@syntax-dispatch q409b@t '_))) q4093@t))) (q3034@syntax-dispatch q4093@t '#(each+ any () any)))) q408d@t))) (q3034@syntax-dispatch q408d@t 'each-any))) q4089@fmls))) (set! q305c@chi-lambda-clause (lambda (q409f@stx q40a0@fmls q40a1@body* q40a2@r q40a3@mr) ((lambda (q40a9@t) ((lambda (q40ab@ls/false) (if q40ab@ls/false (apply (lambda (q40ad@x*) (begin (q305a@verify-formals q40a0@fmls q409f@stx) ((lambda (q40af@lex* q40b0@lab*) (values q40af@lex* (q306c@chi-internal (q2e1b@add-subst (q2df3@make-full-rib q40ad@x* q40b0@lab*) q40a1@body*) (q2fc8@add-lexicals q40b0@lab* q40af@lex* q40a2@r) q40a3@mr))) (map q2dc1@gen-lexical q40ad@x*) (map q2dc5@gen-label q40ad@x*)))) q40ab@ls/false) ((lambda (q40b3@t) ((lambda (q40b5@ls/false) (if q40b5@ls/false (apply (lambda (q40b7@x* q40b8@x) (begin (q305a@verify-formals q40a0@fmls q409f@stx) ((lambda (q40bb@lex* q40bc@lab* q40bd@lex q40be@lab) (values (append q40bb@lex* q40bd@lex) (q306c@chi-internal (q2e1b@add-subst (q2df3@make-full-rib (cons q40b8@x q40b7@x*) (cons q40be@lab q40bc@lab*)) q40a1@body*) (q2fc8@add-lexicals (cons q40be@lab q40bc@lab*) (cons q40bd@lex q40bb@lex*) q40a2@r) q40a3@mr))) (map q2dc1@gen-lexical q40b7@x*) (map q2dc5@gen-label q40b7@x*) (q2dc1@gen-lexical q40b8@x) (q2dc5@gen-label q40b8@x)))) q40b5@ls/false) ((lambda (q40c3@t) ((lambda (q40c5@ls/false) (if q40c5@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid syntax" q40a0@fmls)) q40c5@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q40c3@t))) (q3034@syntax-dispatch q40c3@t '_))) q40b3@t))) (q3034@syntax-dispatch q40b3@t '#(each+ any () any)))) q40a9@t))) (q3034@syntax-dispatch q40a9@t 'each-any))) q40a0@fmls))) (set! q305e@chi-lambda-clause* (lambda (q40c7@stx q40c8@fmls* q40c9@body** q40ca@r q40cb@mr) (if (null? q40c8@fmls*) (values '() '()) (call-with-values (lambda () (q305c@chi-lambda-clause q40c7@stx (car q40c8@fmls*) (car q40c9@body**) q40ca@r q40cb@mr)) (lambda (q40d5@q40d2 q40d6@q40d4) ((lambda (q40d9@b q40da@a) (call-with-values (lambda () (q305e@chi-lambda-clause* q40c7@stx (cdr q40c8@fmls*) (cdr q40c9@body**) q40ca@r q40cb@mr)) (lambda (q40e1@q40de q40e2@q40e0) ((lambda (q40e5@b* q40e6@a*) (values (cons q40da@a q40e6@a*) (cons q40d9@b q40e5@b*))) q40e2@q40e0 q40e1@q40de)))) q40d6@q40d4 q40d5@q40d2)))))) (set! q3060@chi-defun (lambda (q40e9@x q40ea@r q40eb@mr) ((lambda (q40ef@fmls q40f0@body*) (call-with-values (lambda () (q305c@chi-lambda-clause q40ef@fmls q40ef@fmls q40f0@body* q40ea@r q40eb@mr)) (lambda (q40f7@q40f4 q40f8@q40f6) ((lambda (q40fb@body q40fc@fmls) (q2d9d@q2cdd@build-lambda '#f q40fc@fmls q40fb@body)) q40f8@q40f6 q40f7@q40f4)))) (car q40e9@x) (cdr q40e9@x)))) (set! q3062@chi-rhs (lambda (q40ff@rhs q4100@r q4101@mr) ((lambda (q4105@t) (if (memv q4105@t '(defun)) (q3060@chi-defun (cdr q40ff@rhs) q4100@r q4101@mr) (if (memv q4105@t '(expr)) ((lambda (q4107@expr) (q3056@chi-expr q4107@expr q4100@r q4101@mr)) (cdr q40ff@rhs)) (if (memv q4105@t '(top-expr)) ((lambda (q4109@expr) (q2da0@q2d0f@build-sequence '#f (list (q3056@chi-expr q4109@expr q4100@r q4101@mr) (q2da1@q2d11@build-void)))) (cdr q40ff@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" q40ff@rhs))))) (car q40ff@rhs)))) (set! q3064@expand-interaction-rhs*/init* (lambda (q410b@lhs* q410c@rhs* q410d@init* q410e@r q410f@mr) ((letrec ((q4115@f (lambda (q4117@lhs* q4118@rhs*) (if (null? q4117@lhs*) (map (lambda (q411b@x) (q3056@chi-expr q411b@x q410e@r q410f@mr)) q410d@init*) ((lambda (q411d@lhs q411e@rhs) ((lambda (q4121@t) (if (memv q4121@t '(defun)) ((lambda (q4123@rhs) (cons (list 'set! q411d@lhs q4123@rhs) (q4115@f (cdr q4117@lhs*) (cdr q4118@rhs*)))) (q3060@chi-defun (cdr q411e@rhs) q410e@r q410f@mr)) (if (memv q4121@t '(expr)) ((lambda (q4125@rhs) (cons (list 'set! q411d@lhs q4125@rhs) (q4115@f (cdr q4117@lhs*) (cdr q4118@rhs*)))) (q3056@chi-expr (cdr q411e@rhs) q410e@r q410f@mr)) (if (memv q4121@t '(top-expr)) ((lambda (q4127@e) (cons q4127@e (q4115@f (cdr q4117@lhs*) (cdr q4118@rhs*)))) (q3056@chi-expr (cdr q411e@rhs) q410e@r q410f@mr)) (error 'expand-interaction '"invallid" q411e@rhs))))) (car q411e@rhs))) (car q4117@lhs*) (car q4118@rhs*)))))) q4115@f) q410b@lhs* q410c@rhs*))) (set! q3066@chi-rhs* (lambda (q4129@rhs* q412a@r q412b@mr) ((letrec ((q412f@f (lambda (q4131@ls) (if (null? q4131@ls) '() ((lambda (q4133@a) (cons q4133@a (q412f@f (cdr q4131@ls)))) (q3062@chi-rhs (car q4131@ls) q412a@r q412b@mr)))))) q412f@f) q4129@rhs*))) (set! q3068@find-bound=? (lambda (q4135@x q4136@lhs* q4137@rhs*) (if (null? q4136@lhs*) '#f (if (q2e33@bound-id=? q4135@x (car q4136@lhs*)) (car q4137@rhs*) (q3068@find-bound=? q4135@x (cdr q4136@lhs*) (cdr q4137@rhs*)))))) (set! q306a@find-dups (lambda (q413b@ls) ((letrec ((q413d@f (lambda (q413f@ls q4140@dups) (if (null? q413f@ls) q4140@dups ((lambda (q4143@t) (if q4143@t ((lambda (q4145@x) (q413d@f (cdr q413f@ls) (cons (list (car q413f@ls) q4145@x) q4140@dups))) q4143@t) (q413d@f (cdr q413f@ls) q4140@dups))) (q3068@find-bound=? (car q413f@ls) (cdr q413f@ls) (cdr q413f@ls))))))) q413d@f) q413b@ls '()))) (set! q306c@chi-internal (lambda (q4147@e* q4148@r q4149@mr) ((lambda (q414d@rib) (call-with-values (lambda () (q3086@chi-body* (map (lambda (q415f@x) (q2e1b@add-subst q414d@rib q415f@x)) (q2e2d@syntax->list q4147@e*)) q4148@r q4149@mr '() '() '() '() '() q414d@rib '#f)) (lambda (q4161@q4150 q4162@q4152 q4163@q4154 q4164@q4156 q4165@q4158 q4166@q415a q4167@q415c q4168@q415e) ((lambda (q4171@_exp* q4172@kwd* q4173@mod** q4174@rhs* q4175@lex* q4176@mr q4177@r q4178@e*) (begin (if (null? q4178@e*) (q3102@syntax-violation '#f '"no expression in body" q4178@e*) (void)) ((lambda (q4181@init*) ((lambda (q4183@rhs*) ((lambda () (q2da3@q2d15@build-letrec* '#f (reverse q4175@lex*) (reverse q4183@rhs*) (q2da0@q2d0f@build-sequence '#f q4181@init*))))) (q3066@chi-rhs* q4174@rhs* q4177@r q4176@mr))) (q3052@chi-expr* (append (apply append (reverse q4173@mod**)) q4178@e*) q4177@r q4176@mr)))) q4168@q415e q4167@q415c q4166@q415a q4165@q4158 q4164@q4156 q4163@q4154 q4162@q4152 q4161@q4150)))) (q2de7@make-empty-rib)))) (set! q306e@parse-module (lambda (q4185@e) ((lambda (q4187@t) ((lambda (q4189@ls/false) (if q4189@ls/false (apply (lambda (q418b@export* q418c@b*) (begin (if (not (for-all q2e2f@id? q418b@export*)) (q3102@syntax-violation '#f '"module exports must be identifiers" q4185@e) (void)) (values '#f (list->vector q418b@export*) q418c@b*))) q4189@ls/false) ((lambda (q418f@t) ((lambda (q4191@ls/false) (if q4191@ls/false (apply (lambda (q4193@name q4194@export* q4195@b*) (begin (if (not (q2e2f@id? q4193@name)) (q3102@syntax-violation '#f '"module name must be an identifier" q4185@e) (void)) (if (not (for-all q2e2f@id? q4194@export*)) (q3102@syntax-violation '#f '"module exports must be identifiers" q4185@e) (void)) (values q4193@name (list->vector q4194@export*) q4195@b*))) q4191@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q418f@t))) (q3034@syntax-dispatch q418f@t '(_ any each-any . each-any)))) q4187@t))) (q3034@syntax-dispatch q4187@t '(_ each-any . each-any)))) q4185@e))) (set! q3070@make-module-interface (lambda q4199@args ((lambda (q419b@ret) (begin ((letrec ((q419d@loop (lambda (q419f@i q41a0@args) (if (= q419f@i '4) '() (if (null? q41a0@args) (begin (simple-struct-set! q419b@ret q419f@i 'uninitialized) (q419d@loop (+ q419f@i '1) q41a0@args)) (begin (simple-struct-set! q419b@ret q419f@i (car q41a0@args)) (q419d@loop (+ q419f@i '1) (cdr q41a0@args)))))))) q419d@loop) '0 q4199@args) q419b@ret)) (make-simple-struct 'module-interface '4)))) (set! q3072@module-interface? (lambda (q41a3@x) (and (simple-struct? q41a3@x) (eq? (simple-struct-name q41a3@x) 'module-interface)))) (set! q3074@module-interface-first-mark (lambda (q41a5@x) (simple-struct-ref q41a5@x '0))) (set! q3076@set-module-interface-first-mark! (lambda (q41a7@x q41a8@val) (simple-struct-set! q41a7@x '0 q41a8@val))) (set! q3078@module-interface-exp-id-vec (lambda (q41ab@x) (simple-struct-ref q41ab@x '1))) (set! q307a@set-module-interface-exp-id-vec! (lambda (q41ad@x q41ae@val) (simple-struct-set! q41ad@x '1 q41ae@val))) (set! q307c@module-interface-exp-lab-vec (lambda (q41b1@x) (simple-struct-ref q41b1@x '2))) (set! q307e@set-module-interface-exp-lab-vec! (lambda (q41b3@x q41b4@val) (simple-struct-set! q41b3@x '2 q41b4@val))) (set! q3080@dummy '3) (set! q3082@module-interface-exp-id* (lambda (q41b7@iface q41b8@id) ((lambda (q41bc@diff-marks) (begin (set! q41bc@diff-marks (lambda (q41c3@ls q41c4@x) (begin (if (null? q41c3@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (q41c7@a) (if (eq? q41c7@a q41c4@x) '() (cons q41c7@a (q41bc@diff-marks (cdr q41c3@ls) q41c4@x)))) (car q41c3@ls))))) ((lambda (q41bd@diff q41be@id-vec) (if (null? q41bd@diff) q41be@id-vec (vector-map (lambda (q41c1@x) (q2df7@make-stx (q2dfb@stx-expr q41c1@x) (append q41bd@diff (q2dff@stx-mark* q41c1@x)) '() '())) q41be@id-vec))) (q41bc@diff-marks (q2dff@stx-mark* q41b8@id) (q3074@module-interface-first-mark q41b7@iface)) (q3078@module-interface-exp-id-vec q41b7@iface)))) '#f))) (set! q3084@chi-internal-module (lambda (q41c9@e q41ca@r q41cb@mr q41cc@lex* q41cd@rhs* q41ce@mod** q41cf@kwd*) (call-with-values (lambda () (q306e@parse-module q41c9@e)) (lambda (q41dd@q41d8 q41de@q41da q41df@q41dc) ((lambda (q41e3@e* q41e4@exp-id* q41e5@name) ((lambda (q41e9@rib) ((lambda (q41eb@e*) ((lambda () (call-with-values (lambda () (q3086@chi-body* q41eb@e* q41ca@r q41cb@mr q41cc@lex* q41cd@rhs* q41ce@mod** q41cf@kwd* '() q41e9@rib '#f)) (lambda (q41fd@q41ee q41fe@q41f0 q41ff@q41f2 q4200@q41f4 q4201@q41f6 q4202@q41f8 q4203@q41fa q4204@q41fc) ((lambda (q420d@_exp* q420e@kwd* q420f@mod** q4210@rhs* q4211@lex* q4212@mr q4213@r q4214@e*) ((lambda (q421d@exp-lab* q421e@mod**) (if (not q41e5@name) (values q4211@lex* q4210@rhs* q41e4@exp-id* q421d@exp-lab* q4213@r q4212@mr q421e@mod** q420e@kwd*) ((lambda (q4221@lab q4222@iface) (values q4211@lex* q4210@rhs* (vector q41e5@name) (vector q4221@lab) (cons (cons q4221@lab (cons '$module q4222@iface)) q4213@r) (cons (cons q4221@lab (cons '$module q4222@iface)) q4212@mr) q421e@mod** q420e@kwd*)) (q2dc5@gen-label 'module) (q3070@make-module-interface (car (q2dff@stx-mark* q41e5@name)) (vector-map (lambda (q4225@x) (q2df7@make-stx (q2dfb@stx-expr q4225@x) (q2dff@stx-mark* q4225@x) '() '())) q41e4@exp-id*) q421d@exp-lab*)))) (vector-map (lambda (q4227@x) (or (q2e45@id->label (q2df7@make-stx (q2e31@id->sym q4227@x) (q2dff@stx-mark* q4227@x) (list q41e9@rib) '())) (q3102@syntax-violation '#f '"cannot find module export" q4227@x))) q41e4@exp-id*) (cons q4214@e* q420f@mod**))) q4204@q41fc q4203@q41fa q4202@q41f8 q4201@q41f6 q4200@q41f4 q41ff@q41f2 q41fe@q41f0 q41fd@q41ee)))))) (map (lambda (q4229@x) (q2e1b@add-subst q41e9@rib q4229@x)) (q2e2d@syntax->list q41e3@e*)))) (q2de7@make-empty-rib))) q41df@q41dc q41de@q41da q41dd@q41d8))))) (set! q3086@chi-body* (lambda (q422b@e* q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4231@kwd* q4232@exp* q4233@rib q4234@top?) (if (null? q422b@e*) (values q422b@e* q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4231@kwd* q4232@exp*) ((lambda (q423f@e) (call-with-values (lambda () (q2e51@syntax-type q423f@e q422c@r)) (lambda (q4247@q4242 q4248@q4244 q4249@q4246) ((lambda (q424d@kwd q424e@value q424f@type) ((lambda (q4253@kwd*) ((lambda (q4255@t) (if (memv q4255@t '(define)) (call-with-values (lambda () (q2fb8@parse-define q423f@e)) (lambda (q425b@q4258 q425c@q425a) ((lambda (q425f@rhs q4260@id) (begin (if (q2e3b@bound-id-member? q4260@id q4253@kwd*) (q3102@syntax-violation '#f '"cannot redefine keyword" q423f@e) (void)) (call-with-values (lambda () (q2dc9@gen-define-label+loc q4260@id q4233@rib)) (lambda (q4267@q4264 q4268@q4266) ((lambda (q426b@lex q426c@lab) (begin (q2de9@extend-rib! q4233@rib q4260@id q426c@lab) (q3086@chi-body* (cdr q422b@e*) (q2fc6@add-lexical q426c@lab q426b@lex q422c@r) q422d@mr (cons q426b@lex q422e@lex*) (cons q425f@rhs q422f@rhs*) q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?))) q4268@q4266 q4267@q4264))))) q425c@q425a q425b@q4258))) (if (memv q4255@t '(define-syntax)) (call-with-values (lambda () (q2fba@parse-define-syntax q423f@e)) (lambda (q4273@q4270 q4274@q4272) ((lambda (q4277@rhs q4278@id) (begin (if (q2e3b@bound-id-member? q4278@id q4253@kwd*) (q3102@syntax-violation '#f '"cannot redefine keyword" q423f@e) (void)) ((lambda (q427b@lab q427c@expanded-rhs) (begin (q2de9@extend-rib! q4233@rib q4278@id q427b@lab) ((lambda (q427f@b) (q3086@chi-body* (cdr q422b@e*) (cons (cons q427b@lab q427f@b) q422c@r) (cons (cons q427b@lab q427f@b) q422d@mr) q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?)) (q2e67@make-eval-transformer q427c@expanded-rhs)))) (q2dcb@gen-define-label q4278@id q4233@rib) (q3088@expand-transformer q4277@rhs q422d@mr)))) q4274@q4272 q4273@q4270))) (if (memv q4255@t '(let-syntax letrec-syntax)) ((lambda (q4281@t) ((lambda (q4283@ls/false) (if (and q4283@ls/false (apply (lambda (q4285@xlhs* q4286@xrhs* q4287@xbody*) (if (not (q2e37@valid-bound-ids? q4285@xlhs*)) (q3102@syntax-violation '#f '"invalid identifiers" q423f@e) (void))) q4283@ls/false)) (apply (lambda (q428b@xlhs* q428c@xrhs* q428d@xbody*) ((lambda (q4291@xlab*) ((lambda (q4293@xrib) ((lambda (q4295@xb*) ((lambda () (q3086@chi-body* (append (map (lambda (q4297@x) (q2e1b@add-subst q4293@xrib q4297@x)) q428d@xbody*) (cdr q422b@e*)) (append (map cons q4291@xlab* q4295@xb*) q422c@r) (append (map cons q4291@xlab* q4295@xb*) q422d@mr) q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?)))) (map (lambda (q4299@x) (q2e67@make-eval-transformer (q3088@expand-transformer (if (eq? q424f@type 'let-syntax) q4299@x (q2e1b@add-subst q4293@xrib q4299@x)) q422d@mr))) q428c@xrhs*))) (q2df3@make-full-rib q428b@xlhs* q4291@xlab*))) (map q2dc5@gen-label q428b@xlhs*))) q4283@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4281@t))) (q3034@syntax-dispatch q4281@t '(_ #(each (any any)) . each-any)))) q423f@e) (if (memv q4255@t '(begin)) ((lambda (q429b@t) ((lambda (q429d@ls/false) (if q429d@ls/false (apply (lambda (q429f@x*) (q3086@chi-body* (append q429f@x* (cdr q422b@e*)) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?)) q429d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q429b@t))) (q3034@syntax-dispatch q429b@t '(_ . each-any)))) q423f@e) (if (memv q4255@t '(global-macro global-macro!)) (q3086@chi-body* (cons (q2e1b@add-subst q4233@rib (q3050@chi-global-macro q424e@value q423f@e)) (cdr q422b@e*)) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?) (if (memv q4255@t '(local-macro local-macro!)) (q3086@chi-body* (cons (q2e1b@add-subst q4233@rib (q304e@chi-local-macro q424e@value q423f@e)) (cdr q422b@e*)) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?) (if (memv q4255@t '(macro macro!)) (q3086@chi-body* (cons (q2e1b@add-subst q4233@rib (q304c@chi-macro q424e@value q423f@e)) (cdr q422b@e*)) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?) (if (memv q4255@t '(module)) (call-with-values (lambda () (q3084@chi-internal-module q423f@e q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd*)) (lambda (q42b1@q42a2 q42b2@q42a4 q42b3@q42a6 q42b4@q42a8 q42b5@q42aa q42b6@q42ac q42b7@q42ae q42b8@q42b0) ((lambda (q42c1@kwd* q42c2@mod** q42c3@mr q42c4@r q42c5@m-exp-lab* q42c6@m-exp-id* q42c7@rhs* q42c8@lex*) (begin (vector-for-each (lambda (q42d1@id q42d2@lab) (q2de9@extend-rib! q4233@rib q42d1@id q42d2@lab)) q42c6@m-exp-id* q42c5@m-exp-lab*) (q3086@chi-body* (cdr q422b@e*) q42c4@r q42c3@mr q42c8@lex* q42c7@rhs* q42c2@mod** q42c1@kwd* q4232@exp* q4233@rib q4234@top?))) q42b8@q42b0 q42b7@q42ae q42b6@q42ac q42b5@q42aa q42b4@q42a8 q42b3@q42a6 q42b2@q42a4 q42b1@q42a2))) (if (memv q4255@t '(library)) (begin (q30e4@library-expander (q2e43@stx->datum q423f@e)) (q3086@chi-body* (cdr q422b@e*) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?)) (if (memv q4255@t '(export)) ((lambda (q42d5@t) ((lambda (q42d7@ls/false) (if q42d7@ls/false (apply (lambda (q42d9@exp-decl*) (q3086@chi-body* (cdr q422b@e*) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* (append q42d9@exp-decl* q4232@exp*) q4233@rib q4234@top?)) q42d7@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q42d5@t))) (q3034@syntax-dispatch q42d5@t '(_ . each-any)))) q423f@e) (if (memv q4255@t '(import)) ((lambda () ((lambda (q42dc@module-import? q42de@module-import q42e0@library-import) (begin (set! q42dc@module-import? (lambda (q432f@e) ((lambda (q4331@t) ((lambda (q4333@ls/false) (if (and q4333@ls/false (apply (lambda (q4335@id) (q2e2f@id? q4335@id)) q4333@ls/false)) (apply (lambda (q4337@id) '#t) q4333@ls/false) ((lambda (q4339@t) ((lambda (q433b@ls/false) (if q433b@ls/false (apply (lambda (q433d@imp*) '#f) q433b@ls/false) ((lambda (q433f@t) ((lambda (q4341@ls/false) (if q4341@ls/false (apply (lambda () (q3102@syntax-violation '#f '"malformed import form" q432f@e)) q4341@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q433f@t))) (q3034@syntax-dispatch q433f@t '_))) q4339@t))) (q3034@syntax-dispatch q4339@t '(_ . each-any)))) q4331@t))) (q3034@syntax-dispatch q4331@t '(_ any)))) q432f@e))) (set! q42de@module-import (lambda (q430d@e q430e@r) ((lambda (q4311@t) ((lambda (q4313@ls/false) (if (and q4313@ls/false (apply (lambda (q4315@id) (q2e2f@id? q4315@id)) q4313@ls/false)) (apply (lambda (q4317@id) (call-with-values (lambda () (q2e51@syntax-type q4317@id q430e@r)) (lambda (q431f@q431a q4320@q431c q4321@q431e) ((lambda (q4325@kwd q4326@value q4327@type) ((lambda (q432b@t) (if (memv q432b@t '($module)) ((lambda (q432d@iface) (values (q3082@module-interface-exp-id* q432d@iface q4317@id) (q307c@module-interface-exp-lab-vec q432d@iface))) q4326@value) (q3102@syntax-violation '#f '"invalid import" q430d@e))) q4327@type)) q4321@q431e q4320@q431c q431f@q431a)))) q4313@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4311@t))) (q3034@syntax-dispatch q4311@t '(_ any)))) q430d@e))) (set! q42e0@library-import (lambda (q42f1@e) ((lambda (q42f3@t) ((lambda (q42f5@ls/false) (if q42f5@ls/false (apply (lambda (q42f7@ctxt q42f8@imp*) (call-with-values (lambda () (q3090@parse-import-spec* (q3108@syntax->datum q42f8@imp*))) (lambda (q42ff@q42fc q4300@q42fe) ((lambda (q4303@subst-labels q4304@subst-names) (values (vector-map (lambda (q4307@name) (q2e0d@datum->stx q42f7@ctxt q4307@name)) q4304@subst-names) q4303@subst-labels)) q4300@q42fe q42ff@q42fc)))) q42f5@ls/false) ((lambda (q4309@t) ((lambda (q430b@ls/false) (if q430b@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid import form" q42f1@e)) q430b@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4309@t))) (q3034@syntax-dispatch q4309@t '_))) q42f3@t))) (q3034@syntax-dispatch q42f3@t '(any . each-any)))) q42f1@e))) (begin (call-with-values (lambda () (if (q42dc@module-import? q423f@e) (q42de@module-import q423f@e q422c@r) (q42e0@library-import q423f@e))) (lambda (q42e5@q42e2 q42e6@q42e4) ((lambda (q42e9@lab* q42ea@id*) (vector-for-each (lambda (q42ed@id q42ee@lab) (q2de9@extend-rib! q4233@rib q42ed@id q42ee@lab)) q42ea@id* q42e9@lab*)) q42e6@q42e4 q42e5@q42e2))) (q3086@chi-body* (cdr q422b@e*) q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?)))) '#f '#f '#f))) (if q4234@top? (q3086@chi-body* (cdr q422b@e*) q422c@r q422d@mr (cons (q2dc1@gen-lexical 'dummy) q422e@lex*) (cons (cons 'top-expr q423f@e) q422f@rhs*) q4230@mod** q4253@kwd* q4232@exp* q4233@rib q4234@top?) (values q422b@e* q422c@r q422d@mr q422e@lex* q422f@rhs* q4230@mod** q4253@kwd* q4232@exp*)))))))))))))) q424f@type)) (if (q2e2f@id? q424d@kwd) (cons q424d@kwd q4231@kwd*) q4231@kwd*))) q4249@q4246 q4248@q4244 q4247@q4242)))) (car q422b@e*))))) (set! q3088@expand-transformer (lambda (q4343@expr q4344@r) ((lambda (q4347@rtc) ((lambda (q4349@expanded-rhs) (begin (for-each ((lambda (q434b@mark-visit) (lambda (q434d@x) (begin (q2c65@q2aa8@invoke-library q434d@x) (q434b@mark-visit q434d@x)))) (q3098@vis-collector)) (q4347@rtc)) q4349@expanded-rhs)) ((lambda (q4357@q4350 q4358@q4352 q4359@q4354 q435a@q4356) ((lambda (q435f@swap) (dynamic-wind q435f@swap (lambda () (q3056@chi-expr q4343@expr q4344@r q4344@r)) q435f@swap)) (lambda () (begin ((lambda (q4361@t) (begin (q4357@q4350 q4359@q4354) (set! q4359@q4354 q4361@t))) (q4357@q4350)) ((lambda (q4363@t) (begin (q4358@q4352 q435a@q4356) (set! q435a@q4356 q4363@t))) (q4358@q4352)))))) q3096@inv-collector q3098@vis-collector q4347@rtc (lambda (q4365@x) (values))))) (q3094@make-collector)))) (set! q308a@parse-exports (lambda (q4367@exp*) ((letrec ((q4369@f (lambda (q436b@exp* q436c@int* q436d@ext*) (if (null? q436b@exp*) (begin (if (not (q2e37@valid-bound-ids? q436d@ext*)) (q3102@syntax-violation 'export '"invalid exports" (q306a@find-dups q436d@ext*)) (void)) (values (map q3108@syntax->datum q436d@ext*) q436c@int*)) ((lambda (q4371@t) ((lambda (q4373@ls/false) (if q4373@ls/false (apply (lambda (q4375@rename q4376@i* q4377@e*) (begin (if (not (and (eq? (q3108@syntax->datum q4375@rename) 'rename) (for-all q2e2f@id? q4376@i*) (for-all q2e2f@id? q4377@e*))) (q3102@syntax-violation 'export '"invalid export specifier" (car q436b@exp*)) (void)) (q4369@f (cdr q436b@exp*) (append q4376@i* q436c@int*) (append q4377@e* q436d@ext*)))) q4373@ls/false) ((lambda (q437b@t) ((lambda (q437d@ls/false) (if q437d@ls/false (apply (lambda (q437f@ie) (begin (if (not (q2e2f@id? q437f@ie)) (q3102@syntax-violation 'export '"invalid export" q437f@ie) (void)) (q4369@f (cdr q436b@exp*) (cons q437f@ie q436c@int*) (cons q437f@ie q436d@ext*)))) q437d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q437b@t))) (q3034@syntax-dispatch q437b@t 'any))) q4371@t))) (q3034@syntax-dispatch q4371@t '(any . #(each (any any)))))) (car q436b@exp*)))))) q4369@f) q4367@exp* '() '()))) (set! q308c@parse-library-name (lambda (q4381@spec) ((lambda (q4384@parse) (begin (set! q4384@parse (lambda (q4391@x) ((lambda (q4393@t) ((lambda (q4395@ls/false) (if (and q4395@ls/false (apply (lambda (q4397@v*) (for-all (lambda (q4399@x) ((lambda (q439b@x) (and (integer? q439b@x) (exact? q439b@x))) (q3108@syntax->datum q4399@x))) q4397@v*)) q4395@ls/false)) (apply (lambda (q439d@v*) (values '() (map q3108@syntax->datum q439d@v*))) q4395@ls/false) ((lambda (q439f@t) ((lambda (q43a1@ls/false) (if (and q43a1@ls/false (apply (lambda (q43a3@x q43a4@rest) (symbol? (q3108@syntax->datum q43a3@x))) q43a1@ls/false)) (apply (lambda (q43a7@x q43a8@rest) (call-with-values (lambda () (q4384@parse q43a8@rest)) (lambda (q43af@q43ac q43b0@q43ae) ((lambda (q43b3@v* q43b4@x*) (values (cons (q3108@syntax->datum q43a7@x) q43b4@x*) q43b3@v*)) q43b0@q43ae q43af@q43ac)))) q43a1@ls/false) ((lambda (q43b7@t) ((lambda (q43b9@ls/false) (if q43b9@ls/false (apply (lambda () (values '() '())) q43b9@ls/false) ((lambda (q43bb@t) ((lambda (q43bd@ls/false) (if q43bd@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid library name" q4381@spec)) q43bd@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q43bb@t))) (q3034@syntax-dispatch q43bb@t '_))) q43b7@t))) (q3034@syntax-dispatch q43b7@t '()))) q439f@t))) (q3034@syntax-dispatch q439f@t '(any . any)))) q4393@t))) (q3034@syntax-dispatch q4393@t '(each-any)))) q4391@x))) (call-with-values (lambda () (q4384@parse q4381@spec)) (lambda (q4389@q4386 q438a@q4388) ((lambda (q438d@ver* q438e@name*) (begin (if (null? q438e@name*) (q3102@syntax-violation '#f '"empty library name" q4381@spec) (void)) (values q438e@name* q438d@ver*))) q438a@q4388 q4389@q4386))))) '#f))) (set! q308e@parse-library (lambda (q43bf@e) ((lambda (q43c1@t) ((lambda (q43c3@ls/false) (if (and q43c3@ls/false (apply (lambda (q43c5@library q43c6@name* q43c7@export q43c8@exp* q43c9@import q43ca@imp* q43cb@b*) (and (eq? (q3108@syntax->datum q43c7@export) 'export) (eq? (q3108@syntax->datum q43c9@import) 'import) (eq? (q3108@syntax->datum q43c5@library) 'library))) q43c3@ls/false)) (apply (lambda (q43d3@library q43d4@name* q43d5@export q43d6@exp* q43d7@import q43d8@imp* q43d9@b*) (values q43d4@name* q43d6@exp* q43d8@imp* q43d9@b*)) q43c3@ls/false) ((lambda (q43e1@t) ((lambda (q43e3@ls/false) (if q43e3@ls/false (apply (lambda () (q3102@syntax-violation '#f '"malformed library" q43bf@e)) q43e3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q43e1@t))) (q3034@syntax-dispatch q43e1@t '_))) q43c1@t))) (q3034@syntax-dispatch q43c1@t '(any each-any (any . each-any) (any . each-any) . each-any)))) q43bf@e))) (set! q3090@parse-import-spec* ((lambda () ((lambda (q43e6@idsyn? q43e8@dup-error q43ea@merge-substs q43ec@exclude* q43ee@find* q43f0@rem* q43f2@remove-dups q43f4@parse-library-name q43f6@import-library q43f8@get-import q43fa@add-imports!) (begin (set! q43e6@idsyn? (lambda (q45ef@x) (symbol? (q3108@syntax->datum q45ef@x)))) (set! q43e8@dup-error (lambda (q45ed@name) (q3102@syntax-violation 'import '"two imports with different bindings" q45ed@name))) (set! q43ea@merge-substs (lambda (q45db@s q45dc@subst) ((lambda (q45e0@insert-to-subst) (begin (set! q45e0@insert-to-subst (lambda (q45e1@a q45e2@subst) ((lambda (q45e5@name q45e6@label) ((lambda (q45e9@t) (if q45e9@t ((lambda (q45eb@x) (if (eq? (cdr q45eb@x) q45e6@label) q45e2@subst (q43e8@dup-error q45e5@name))) q45e9@t) (cons q45e1@a q45e2@subst))) (assq q45e5@name q45e2@subst))) (car q45e1@a) (cdr q45e1@a)))) (if (null? q45db@s) q45dc@subst (q45e0@insert-to-subst (car q45db@s) (q43ea@merge-substs (cdr q45db@s) q45dc@subst))))) '#f))) (set! q43ec@exclude* (lambda (q45ab@sym* q45ac@subst) ((lambda (q45b0@exclude) (begin (set! q45b0@exclude (lambda (q45c9@sym q45ca@subst) (if (null? q45ca@subst) (q3102@syntax-violation 'import '"cannot rename unbound identifier" q45c9@sym) (if (eq? q45c9@sym (caar q45ca@subst)) (values (cdar q45ca@subst) (cdr q45ca@subst)) ((lambda (q45cd@a) (call-with-values (lambda () (q45b0@exclude q45c9@sym (cdr q45ca@subst))) (lambda (q45d3@q45d0 q45d4@q45d2) ((lambda (q45d7@subst q45d8@old) (values q45d8@old (cons q45cd@a q45d7@subst))) q45d4@q45d2 q45d3@q45d0)))) (car q45ca@subst)))))) (if (null? q45ab@sym*) (values '() q45ac@subst) (call-with-values (lambda () (q45b0@exclude (car q45ab@sym*) q45ac@subst)) (lambda (q45b5@q45b2 q45b6@q45b4) ((lambda (q45b9@subst q45ba@old) (call-with-values (lambda () (q43ec@exclude* (cdr q45ab@sym*) q45b9@subst)) (lambda (q45c1@q45be q45c2@q45c0) ((lambda (q45c5@subst q45c6@old*) (values (cons q45ba@old q45c6@old*) q45c5@subst)) q45c2@q45c0 q45c1@q45be)))) q45b6@q45b4 q45b5@q45b2)))))) '#f))) (set! q43ee@find* (lambda (q45a3@sym* q45a4@subst) (map (lambda (q45a7@x) ((lambda (q45a9@t) (if q45a9@t (cdr q45a9@t) (q3102@syntax-violation 'import '"cannot find identifier" q45a7@x))) (assq q45a7@x q45a4@subst))) q45a3@sym*))) (set! q43f0@rem* (lambda (q459b@sym* q459c@subst) ((letrec ((q459f@f (lambda (q45a1@subst) (if (null? q45a1@subst) '() (if (memq (caar q45a1@subst) q459b@sym*) (q459f@f (cdr q45a1@subst)) (cons (car q45a1@subst) (q459f@f (cdr q45a1@subst)))))))) q459f@f) q459c@subst))) (set! q43f2@remove-dups (lambda (q4599@ls) (if (null? q4599@ls) '() (if (memq (car q4599@ls) (cdr q4599@ls)) (q43f2@remove-dups (cdr q4599@ls)) (cons (car q4599@ls) (q43f2@remove-dups (cdr q4599@ls))))))) (set! q43f4@parse-library-name (lambda (q44b1@spec) ((lambda (q44b4@subversion? q44b6@subversion-pred q44b8@version-pred) (begin (set! q44b4@subversion? (lambda (q4595@x) ((lambda (q4597@x) (and (integer? q4597@x) (exact? q4597@x) (>= q4597@x '0))) (q3108@syntax->datum q4595@x)))) (set! q44b6@subversion-pred (lambda (q4535@x*) ((lambda (q4537@t) ((lambda (q4539@ls/false) (if (and q4539@ls/false (apply (lambda (q453b@n) (q44b4@subversion? q453b@n)) q4539@ls/false)) (apply (lambda (q453d@n) (lambda (q453f@x) (= q453f@x (q3108@syntax->datum q453d@n)))) q4539@ls/false) ((lambda (q4541@t) ((lambda (q4543@ls/false) (if (and q4543@ls/false (apply (lambda (q4545@p? q4546@sub*) (eq? (q3108@syntax->datum q4545@p?) 'and)) q4543@ls/false)) (apply (lambda (q4549@p? q454a@sub*) ((lambda (q454d@p*) (lambda (q454f@x) (for-all (lambda (q4551@p) (q4551@p q454f@x)) q454d@p*))) (map q44b6@subversion-pred q454a@sub*))) q4543@ls/false) ((lambda (q4553@t) ((lambda (q4555@ls/false) (if (and q4555@ls/false (apply (lambda (q4557@p? q4558@sub*) (eq? (q3108@syntax->datum q4557@p?) 'or)) q4555@ls/false)) (apply (lambda (q455b@p? q455c@sub*) ((lambda (q455f@p*) (lambda (q4561@x) (exists (lambda (q4563@p) (q4563@p q4561@x)) q455f@p*))) (map q44b6@subversion-pred q455c@sub*))) q4555@ls/false) ((lambda (q4565@t) ((lambda (q4567@ls/false) (if (and q4567@ls/false (apply (lambda (q4569@p? q456a@sub) (eq? (q3108@syntax->datum q4569@p?) 'not)) q4567@ls/false)) (apply (lambda (q456d@p? q456e@sub) ((lambda (q4571@p) (lambda (q4573@x) (not (q4571@p q4573@x)))) (q44b6@subversion-pred q456e@sub))) q4567@ls/false) ((lambda (q4575@t) ((lambda (q4577@ls/false) (if (and q4577@ls/false (apply (lambda (q4579@p? q457a@n) (and (eq? (q3108@syntax->datum q4579@p?) '<=) (q44b4@subversion? q457a@n))) q4577@ls/false)) (apply (lambda (q457d@p? q457e@n) (lambda (q4581@x) (<= q4581@x (q3108@syntax->datum q457e@n)))) q4577@ls/false) ((lambda (q4583@t) ((lambda (q4585@ls/false) (if (and q4585@ls/false (apply (lambda (q4587@p? q4588@n) (and (eq? (q3108@syntax->datum q4587@p?) '>=) (q44b4@subversion? q4588@n))) q4585@ls/false)) (apply (lambda (q458b@p? q458c@n) (lambda (q458f@x) (>= q458f@x (q3108@syntax->datum q458c@n)))) q4585@ls/false) ((lambda (q4591@t) ((lambda (q4593@ls/false) (if q4593@ls/false (apply (lambda () (q3102@syntax-violation 'import '"invalid sub-version spec" q44b1@spec q4535@x*)) q4593@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4591@t))) (q3034@syntax-dispatch q4591@t '_))) q4583@t))) (q3034@syntax-dispatch q4583@t '(any any)))) q4575@t))) (q3034@syntax-dispatch q4575@t '(any any)))) q4565@t))) (q3034@syntax-dispatch q4565@t '(any any)))) q4553@t))) (q3034@syntax-dispatch q4553@t '(any . each-any)))) q4541@t))) (q3034@syntax-dispatch q4541@t '(any . each-any)))) q4537@t))) (q3034@syntax-dispatch q4537@t 'any))) q4535@x*))) (set! q44b8@version-pred (lambda (q44e5@x*) ((lambda (q44e7@t) ((lambda (q44e9@ls/false) (if q44e9@ls/false (apply (lambda () (lambda (q44eb@x) '#t)) q44e9@ls/false) ((lambda (q44ed@t) ((lambda (q44ef@ls/false) (if (and q44ef@ls/false (apply (lambda (q44f1@c q44f2@ver*) (eq? (q3108@syntax->datum q44f1@c) 'and)) q44ef@ls/false)) (apply (lambda (q44f5@c q44f6@ver*) ((lambda (q44f9@p*) (lambda (q44fb@x) (for-all (lambda (q44fd@p) (q44fd@p q44fb@x)) q44f9@p*))) (map q44b8@version-pred q44f6@ver*))) q44ef@ls/false) ((lambda (q44ff@t) ((lambda (q4501@ls/false) (if (and q4501@ls/false (apply (lambda (q4503@c q4504@ver*) (eq? (q3108@syntax->datum q4503@c) 'or)) q4501@ls/false)) (apply (lambda (q4507@c q4508@ver*) ((lambda (q450b@p*) (lambda (q450d@x) (exists (lambda (q450f@p) (q450f@p q450d@x)) q450b@p*))) (map q44b8@version-pred q4508@ver*))) q4501@ls/false) ((lambda (q4511@t) ((lambda (q4513@ls/false) (if (and q4513@ls/false (apply (lambda (q4515@c q4516@ver) (eq? (q3108@syntax->datum q4515@c) 'not)) q4513@ls/false)) (apply (lambda (q4519@c q451a@ver) ((lambda (q451d@p) (lambda (q451f@x) (not (q451d@p q451f@x)))) (q44b8@version-pred q451a@ver))) q4513@ls/false) ((lambda (q4521@t) ((lambda (q4523@ls/false) (if q4523@ls/false (apply (lambda (q4525@sub*) ((lambda (q4527@p*) (lambda (q4529@x) ((letrec ((q452b@f (lambda (q452d@p* q452e@x) (if (null? q452d@p*) '#t (if (null? q452e@x) '#f (and ((car q452d@p*) (car q452e@x)) (q452b@f (cdr q452d@p*) (cdr q452e@x)))))))) q452b@f) q4527@p* q4529@x))) (map q44b6@subversion-pred q4525@sub*))) q4523@ls/false) ((lambda (q4531@t) ((lambda (q4533@ls/false) (if q4533@ls/false (apply (lambda () (q3102@syntax-violation 'import '"invalid version spec" q44b1@spec q44e5@x*)) q4533@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4531@t))) (q3034@syntax-dispatch q4531@t '_))) q4521@t))) (q3034@syntax-dispatch q4521@t 'each-any))) q4511@t))) (q3034@syntax-dispatch q4511@t '(any any)))) q44ff@t))) (q3034@syntax-dispatch q44ff@t '(any . each-any)))) q44ed@t))) (q3034@syntax-dispatch q44ed@t '(any . each-any)))) q44e7@t))) (q3034@syntax-dispatch q44e7@t '()))) q44e5@x*))) ((letrec ((q44b9@f (lambda (q44bb@x) ((lambda (q44bd@t) ((lambda (q44bf@ls/false) (if q44bf@ls/false (apply (lambda (q44c1@version-spec*) (values '() (q44b8@version-pred q44c1@version-spec*))) q44bf@ls/false) ((lambda (q44c3@t) ((lambda (q44c5@ls/false) (if (and q44c5@ls/false (apply (lambda (q44c7@x q44c8@x*) (q43e6@idsyn? q44c7@x)) q44c5@ls/false)) (apply (lambda (q44cb@x q44cc@x*) (call-with-values (lambda () (q44b9@f q44cc@x*)) (lambda (q44d3@q44d0 q44d4@q44d2) ((lambda (q44d7@pred q44d8@name) (values (cons (q3108@syntax->datum q44cb@x) q44d8@name) q44d7@pred)) q44d4@q44d2 q44d3@q44d0)))) q44c5@ls/false) ((lambda (q44db@t) ((lambda (q44dd@ls/false) (if q44dd@ls/false (apply (lambda () (values '() (lambda (q44df@x) '#t))) q44dd@ls/false) ((lambda (q44e1@t) ((lambda (q44e3@ls/false) (if q44e3@ls/false (apply (lambda () (q3102@syntax-violation '#f '"invalid import spec" q44b1@spec)) q44e3@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q44e1@t))) (q3034@syntax-dispatch q44e1@t '_))) q44db@t))) (q3034@syntax-dispatch q44db@t '()))) q44c3@t))) (q3034@syntax-dispatch q44c3@t '(any . any)))) q44bd@t))) (q3034@syntax-dispatch q44bd@t '(each-any)))) q44bb@x)))) q44b9@f) q44b1@spec))) '#f '#f '#f))) (set! q43f6@import-library (lambda (q44a1@spec*) (call-with-values (lambda () (q43f4@parse-library-name q44a1@spec*)) (lambda (q44a7@q44a4 q44a8@q44a6) ((lambda (q44ab@pred q44ac@name) (begin (if (null? q44ac@name) (q3102@syntax-violation 'import '"empty library name" q44a1@spec*) (void)) ((lambda (q44af@lib) (begin (if (not q44af@lib) (q3102@syntax-violation 'import '"cannot find library with required name" q44ac@name) (void)) (if (not (q44ab@pred (q2c38@q2a4e@library-version q44af@lib))) (q3102@syntax-violation 'import '"library does not satisfy version specification" q44a1@spec* q44af@lib) (void)) ((q309a@imp-collector) q44af@lib) (q2c40@q2a5e@library-subst q44af@lib))) (q2c5e@q2a9a@find-library-by-name q44ac@name)))) q44a8@q44a6 q44a7@q44a4))))) (set! q43f8@get-import (lambda (q4413@spec) ((lambda (q4415@t) ((lambda (q4417@ls/false) (if (and q4417@ls/false (apply (lambda (q4419@x q441a@x*) (not (memq (q3108@syntax->datum q4419@x) '(for rename except only prefix library)))) q4417@ls/false)) (apply (lambda (q441d@x q441e@x*) (q43f6@import-library (cons q441d@x q441e@x*))) q4417@ls/false) ((lambda (q4421@t) ((lambda (q4423@ls/false) (if (and q4423@ls/false (apply (lambda (q4425@rename q4426@isp q4427@old* q4428@new*) (and (eq? (q3108@syntax->datum q4425@rename) 'rename) (for-all q43e6@idsyn? q4427@old*) (for-all q43e6@idsyn? q4428@new*))) q4423@ls/false)) (apply (lambda (q442d@rename q442e@isp q442f@old* q4430@new*) ((lambda (q4435@subst q4436@old* q4437@new*) ((lambda (q443b@old-label*) ((lambda (q443d@subst) (q43ea@merge-substs (map cons q4437@new* q443b@old-label*) q443d@subst)) (q43f0@rem* q4436@old* q4435@subst))) (q43ee@find* q4436@old* q4435@subst))) (q43f8@get-import q442e@isp) (map q3108@syntax->datum q442f@old*) (map q3108@syntax->datum q4430@new*))) q4423@ls/false) ((lambda (q443f@t) ((lambda (q4441@ls/false) (if (and q4441@ls/false (apply (lambda (q4443@except q4444@isp q4445@sym*) (and (eq? (q3108@syntax->datum q4443@except) 'except) (for-all q43e6@idsyn? q4445@sym*))) q4441@ls/false)) (apply (lambda (q4449@except q444a@isp q444b@sym*) ((lambda (q444f@subst) (q43f0@rem* (map q3108@syntax->datum q444b@sym*) q444f@subst)) (q43f8@get-import q444a@isp))) q4441@ls/false) ((lambda (q4451@t) ((lambda (q4453@ls/false) (if (and q4453@ls/false (apply (lambda (q4455@only q4456@isp q4457@sym*) (and (eq? (q3108@syntax->datum q4455@only) 'only) (for-all q43e6@idsyn? q4457@sym*))) q4453@ls/false)) (apply (lambda (q445b@only q445c@isp q445d@sym*) ((lambda (q4461@subst q4462@sym*) ((lambda (q4465@sym*) ((lambda (q4467@lab*) (map cons q4465@sym* q4467@lab*)) (q43ee@find* q4465@sym* q4461@subst))) (q43f2@remove-dups q4462@sym*))) (q43f8@get-import q445c@isp) (map q3108@syntax->datum q445d@sym*))) q4453@ls/false) ((lambda (q4469@t) ((lambda (q446b@ls/false) (if (and q446b@ls/false (apply (lambda (q446d@prefix q446e@isp q446f@p) (and (eq? (q3108@syntax->datum q446d@prefix) 'prefix) (q43e6@idsyn? q446f@p))) q446b@ls/false)) (apply (lambda (q4473@prefix q4474@isp q4475@p) ((lambda (q4479@subst q447a@prefix) (map (lambda (q447d@x) (cons (string->symbol (string-append q447a@prefix (symbol->string (car q447d@x)))) (cdr q447d@x))) q4479@subst)) (q43f8@get-import q4474@isp) (symbol->string (q3108@syntax->datum q4475@p)))) q446b@ls/false) ((lambda (q447f@t) ((lambda (q4481@ls/false) (if (and q4481@ls/false (apply (lambda (q4483@library q4484@spec*) (eq? (q3108@syntax->datum q4483@library) 'library)) q4481@ls/false)) (apply (lambda (q4487@library q4488@spec*) (q43f6@import-library q4488@spec*)) q4481@ls/false) ((lambda (q448b@t) ((lambda (q448d@ls/false) (if (and q448d@ls/false (apply (lambda (q448f@for q4490@isp q4491@rest) (eq? (q3108@syntax->datum q448f@for) 'for)) q448d@ls/false)) (apply (lambda (q4495@for q4496@isp q4497@rest) (q43f8@get-import q4496@isp)) q448d@ls/false) ((lambda (q449b@t) ((lambda (q449d@ls/false) (if q449d@ls/false (apply (lambda (q449f@spec) (q3102@syntax-violation 'import '"invalid import spec" q449f@spec)) q449d@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q449b@t))) (q3034@syntax-dispatch q449b@t 'any))) q448b@t))) (q3034@syntax-dispatch q448b@t '(any any . any)))) q447f@t))) (q3034@syntax-dispatch q447f@t '(any each-any)))) q4469@t))) (q3034@syntax-dispatch q4469@t '(any any any)))) q4451@t))) (q3034@syntax-dispatch q4451@t '(any any . each-any)))) q443f@t))) (q3034@syntax-dispatch q443f@t '(any any . each-any)))) q4421@t))) (q3034@syntax-dispatch q4421@t '(any any . #(each (any any)))))) q4415@t))) (q3034@syntax-dispatch q4415@t '(any . each-any)))) q4413@spec))) (set! q43fa@add-imports! (lambda (q4403@imp q4404@h) ((lambda (q4407@subst) (for-each (lambda (q4409@x) ((lambda (q440b@name q440c@label) ((lambda (q440f@t) (if q440f@t ((lambda (q4411@l) (if (not (eq? q4411@l q440c@label)) (q43e8@dup-error q440b@name) (void))) q440f@t) (hashtable-set! q4404@h q440b@name q440c@label))) (hashtable-ref q4404@h q440b@name '#f))) (car q4409@x) (cdr q4409@x))) q4407@subst)) (q43f8@get-import q4403@imp)))) (lambda (q43fb@imp*) ((letrec ((q43fd@f (lambda (q43ff@imp* q4400@h) (if (null? q43ff@imp*) (hashtable-entries q4400@h) (begin (q43fa@add-imports! (car q43ff@imp*) q4400@h) (q43fd@f (cdr q43ff@imp*) q4400@h)))))) q43fd@f) q43fb@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q3092@make-top-rib (lambda (q45f1@names q45f2@labels) ((lambda (q45f5@rib) (begin (vector-for-each (lambda (q45f7@name q45f8@label) (begin (if (not (symbol? q45f7@name)) (error 'make-top-rib '"BUG: not a symbol" q45f7@name) (void)) (q2deb@extend-rib/nc! q45f5@rib (q2df7@make-stx q45f7@name q2dbd@top-mark* '() '()) q45f8@label))) q45f1@names q45f2@labels) q45f5@rib)) (q2de7@make-empty-rib)))) (set! q3094@make-collector (lambda () ((lambda (q45fb@ls) (lambda q45ff ((lambda (q4600) (if (= q4600 '0) (apply (lambda () q45fb@ls) q45ff) (if (= q4600 '1) (apply (lambda (q45fd@x) (set! q45fb@ls (q2db6@set-cons q45fd@x q45fb@ls))) q45ff) (error 'apply '"invalid arg count")))) (length q45ff)))) '()))) (set! q3096@inv-collector (q2995@q2891@make-parameter (lambda q4601@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (q4603@x) (begin (if (not (procedure? q4603@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" q4603@x) (void)) q4603@x)))) (set! q3098@vis-collector (q2995@q2891@make-parameter (lambda q4605@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (q4607@x) (begin (if (not (procedure? q4607@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" q4607@x) (void)) q4607@x)))) (set! q309a@imp-collector (q2995@q2891@make-parameter (lambda q4609@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (q460b@x) (begin (if (not (procedure? q460b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" q460b@x) (void)) q460b@x)))) (set! q309c@chi-library-internal (lambda (q460d@e* q460e@rib q460f@top?) (call-with-values (lambda () (q3086@chi-body* q460d@e* '() '() '() '() '() '() '() q460e@rib q460f@top?)) (lambda (q4623@q4614 q4624@q4616 q4625@q4618 q4626@q461a q4627@q461c q4628@q461e q4629@q4620 q462a@q4622) ((lambda (q4633@exp* q4634@_kwd* q4635@mod** q4636@rhs* q4637@lex* q4638@mr q4639@r q463a@e*) (values (append (apply append (reverse q4635@mod**)) q463a@e*) q4639@r q4638@mr (reverse q4637@lex*) (reverse q4636@rhs*) q4633@exp*)) q462a@q4622 q4629@q4620 q4628@q461e q4627@q461c q4626@q461a q4625@q4618 q4624@q4616 q4623@q4614))))) (set! q309e@chi-interaction-expr (lambda (q4643@e q4644@rib q4645@r) (call-with-values (lambda () (q3086@chi-body* (list q4643@e) q4645@r q4645@r '() '() '() '() '() q4644@rib '#t)) (lambda (q4659@q464a q465a@q464c q465b@q464e q465c@q4650 q465d@q4652 q465e@q4654 q465f@q4656 q4660@q4658) ((lambda (q4669@_exp* q466a@_kwd* q466b@mod** q466c@rhs* q466d@lex* q466e@mr q466f@r q4670@e*) ((lambda (q4679@e*) ((lambda (q467b@e) (values q467b@e q466f@r)) (if (null? q4679@e*) (q2da1@q2d11@build-void) (if (null? (cdr q4679@e*)) (car q4679@e*) (q2da0@q2d0f@build-sequence '#f q4679@e*))))) (q3064@expand-interaction-rhs*/init* (reverse q466d@lex*) (reverse q466c@rhs*) (append (apply append (reverse q466b@mod**)) q4670@e*) q466f@r q466e@mr))) q4660@q4658 q465f@q4656 q465e@q4654 q465d@q4652 q465c@q4650 q465b@q464e q465a@q464c q4659@q464a))))) (set! q30a0@library-body-expander (lambda (q467d@name q467e@main-exp* q467f@imp* q4680@b* q4681@top?) ((lambda (q4688@itc) (begin (set! q4688@itc (q3094@make-collector)) ((lambda (q4691@q468a q4692@q468c q4693@q468e q4694@q4690) ((lambda (q4699@swap) (dynamic-wind q4699@swap (lambda () (call-with-values (lambda () (q3090@parse-import-spec* q467f@imp*)) (lambda (q469f@q469c q46a0@q469e) ((lambda (q46a3@subst-labels q46a4@subst-names) ((lambda (q46a7@rib) ((lambda (q46aa@wrap) (begin (set! q46aa@wrap (lambda (q4725@x) (q2df7@make-stx q4725@x q2dbd@top-mark* (list q46a7@rib) '()))) ((lambda (q46ab@b* q46ac@main-exp* q46ad@rtc q46ae@vtc) ((lambda (q46bb@q46b4 q46bc@q46b6 q46bd@q46b8 q46be@q46ba) ((lambda (q46c3@swap) (dynamic-wind q46c3@swap (lambda () (call-with-values (lambda () (q309c@chi-library-internal q46ab@b* q46a7@rib q4681@top?)) (lambda (q46d1@q46c6 q46d2@q46c8 q46d3@q46ca q46d4@q46cc q46d5@q46ce q46d6@q46d0) ((lambda (q46dd@internal-exp* q46de@rhs* q46df@lex* q46e0@mr q46e1@r q46e2@init*) (call-with-values (lambda () (q308a@parse-exports (append q46ac@main-exp* q46dd@internal-exp*))) (lambda (q46ed@q46ea q46ee@q46ec) ((lambda (q46f1@exp-id* q46f2@exp-name*) (begin (q2def@seal-rib! q46a7@rib) ((lambda (q46f5@init*) ((lambda (q46f7@rhs*) ((lambda () (begin (q2df1@unseal-rib! q46a7@rib) ((lambda (q46f9@loc* q46fa@export-subst) ((lambda (q46fe@errstr) (begin (set! q46fe@errstr '"attempt to export mutated variable") (call-with-values (lambda () (q30ee@make-export-env/macros q46df@lex* q46f9@loc* q46e1@r)) (lambda (q4705@q4700 q4706@q4702 q4707@q4704) ((lambda (q470b@macro* q470c@global* q470d@export-env) (begin (for-each (lambda (q4711@s) ((lambda (q4713@name q4714@label) ((lambda (q4717@p) (if q4717@p ((lambda (q4719@b) ((lambda (q471b@type) (if (eq? q471b@type 'mutable) (q3102@syntax-violation 'export q46fe@errstr q4713@name) (void))) (car q4719@b))) (cdr q4717@p)) (void))) (assq q4714@label q470d@export-env))) (car q4711@s) (cdr q4711@s))) q46fa@export-subst) ((lambda (q471d@invoke-body q471e@invoke-definitions) (values (q4688@itc) (q46ad@rtc) (q46ae@vtc) (q2da0@q2d0f@build-sequence '#f (append q471e@invoke-definitions (list q471d@invoke-body))) q470b@macro* q46fa@export-subst q470d@export-env)) (q2da3@q2d15@build-letrec* '#f q46df@lex* q46f7@rhs* (q30ea@build-exports q470c@global* q46f5@init*)) (map q2d9c@q2c6c@build-global-define (map cdr q470c@global*))))) q4707@q4704 q4706@q4702 q4705@q4700))))) '#f)) (map q2dc3@gen-global q46df@lex*) (q30ec@make-export-subst q46f2@exp-name* q46f1@exp-id*)))))) (q3066@chi-rhs* q46de@rhs* q46e1@r q46e0@mr))) (q3052@chi-expr* q46e2@init* q46e1@r q46e0@mr)))) q46ee@q46ec q46ed@q46ea)))) q46d6@q46d0 q46d5@q46ce q46d4@q46cc q46d3@q46ca q46d2@q46c8 q46d1@q46c6)))) q46c3@swap)) (lambda () (begin ((lambda (q4721@t) (begin (q46bb@q46b4 q46bd@q46b8) (set! q46bd@q46b8 q4721@t))) (q46bb@q46b4)) ((lambda (q4723@t) (begin (q46bc@q46b6 q46be@q46ba) (set! q46be@q46ba q4723@t))) (q46bc@q46b6)))))) q3096@inv-collector q3098@vis-collector q46ad@rtc q46ae@vtc)) (map q46aa@wrap q4680@b*) (map q46aa@wrap q467e@main-exp*) (q3094@make-collector) (q3094@make-collector)))) '#f)) (q3092@make-top-rib q46a4@subst-names q46a3@subst-labels))) q46a0@q469e q469f@q469c)))) q4699@swap)) (lambda () (begin ((lambda (q4727@t) (begin (q4691@q468a q4693@q468e) (set! q4693@q468e q4727@t))) (q4691@q468a)) ((lambda (q4729@t) (begin (q4692@q468c q4694@q4690) (set! q4694@q4690 q4729@t))) (q4692@q468c)))))) q309a@imp-collector q3110@top-level-context q4688@itc '#f))) '#f))) (set! q30a2@core-library-expander (lambda (q472b@e q472c@verify-name) (call-with-values (lambda () (q308e@parse-library q472b@e)) (lambda (q4737@q4730 q4738@q4732 q4739@q4734 q473a@q4736) ((lambda (q473f@b* q4740@imp* q4741@exp* q4742@name*) (call-with-values (lambda () (q308c@parse-library-name q4742@name*)) (lambda (q474b@q4748 q474c@q474a) ((lambda (q474f@ver q4750@name) (begin (q472c@verify-name q4750@name) (call-with-values (lambda () (q30a0@library-body-expander q4750@name q4741@exp* q4740@imp* q473f@b* '#f)) (lambda (q4761@q4754 q4762@q4756 q4763@q4758 q4764@q475a q4765@q475c q4766@q475e q4767@q4760) ((lambda (q476f@export-env q4770@export-subst q4771@visit-code q4772@invoke-code q4773@visit-req* q4774@invoke-req* q4775@imp*) (values q4750@name q474f@ver q4775@imp* q4774@invoke-req* q4773@visit-req* q4772@invoke-code q4771@visit-code q4770@export-subst q476f@export-env)) q4767@q4760 q4766@q475e q4765@q475c q4764@q475a q4763@q4758 q4762@q4756 q4761@q4754))))) q474c@q474a q474b@q4748)))) q473a@q4736 q4739@q4734 q4738@q4732 q4737@q4730))))) (set! q30a4@parse-top-level-program (lambda (q477d@e*) ((lambda (q477f@t) ((lambda (q4781@ls/false) (if (and q4781@ls/false (apply (lambda (q4783@import q4784@imp* q4785@b*) (eq? (q3108@syntax->datum q4783@import) 'import)) q4781@ls/false)) (apply (lambda (q4789@import q478a@imp* q478b@b*) (values q478a@imp* q478b@b*)) q4781@ls/false) ((lambda (q478f@t) ((lambda (q4791@ls/false) (if (and q4791@ls/false (apply (lambda (q4793@import q4794@x q4795@y) (eq? (q3108@syntax->datum q4793@import) 'import)) q4791@ls/false)) (apply (lambda (q4799@import q479a@x q479b@y) (q3102@syntax-violation 'expander '"invalid syntax of top-level program" (q2e29@syntax-car q477d@e*))) q4791@ls/false) ((lambda (q479f@t) ((lambda (q47a1@ls/false) (if q47a1@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) q47a1@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q479f@t))) (q3034@syntax-dispatch q479f@t '_))) q478f@t))) (q3034@syntax-dispatch q478f@t '((any . any) . any)))) q477f@t))) (q3034@syntax-dispatch q477f@t '((any . each-any) . each-any)))) q477d@e*))) (set! q30a6@top-level-expander (lambda (q47a3@e*) (call-with-values (lambda () (q30a4@parse-top-level-program q47a3@e*)) (lambda (q47a9@q47a6 q47aa@q47a8) ((lambda (q47ad@b* q47ae@imp*) (call-with-values (lambda () (q30a0@library-body-expander '() '() q47ae@imp* q47ad@b* '#t)) (lambda (q47bf@q47b2 q47c0@q47b4 q47c1@q47b6 q47c2@q47b8 q47c3@q47ba q47c4@q47bc q47c5@q47be) ((lambda (q47cd@export-env q47ce@export-subst q47cf@visit-code q47d0@invoke-code q47d1@visit-req* q47d2@invoke-req* q47d3@imp*) (values q47d2@invoke-req* q47d0@invoke-code)) q47c5@q47be q47c4@q47bc q47c3@q47ba q47c2@q47b8 q47c1@q47b6 q47c0@q47b4 q47bf@q47b2)))) q47aa@q47a8 q47a9@q47a6))))) (set! q30a8@rp (q2992@q288b@make-record-printer 'env (lambda (q47db@x q47dc@p q47dd@wr) (display '"#<environment>" q47dc@p)))) (set! q30aa@make-env (lambda q47e1@args ((lambda (q47e3@ret) (begin ((letrec ((q47e5@loop (lambda (q47e7@i q47e8@args) (if (= q47e7@i '4) '() (if (null? q47e8@args) (begin (simple-struct-set! q47e3@ret q47e7@i 'uninitialized) (q47e5@loop (+ q47e7@i '1) q47e8@args)) (begin (simple-struct-set! q47e3@ret q47e7@i (car q47e8@args)) (q47e5@loop (+ q47e7@i '1) (cdr q47e8@args)))))))) q47e5@loop) '0 q47e1@args) q47e3@ret)) (make-simple-struct 'env '4)))) (set! q30ac@env? (lambda (q47eb@x) (and (simple-struct? q47eb@x) (eq? (simple-struct-name q47eb@x) 'env)))) (set! q30ae@env-names (lambda (q47ed@x) (simple-struct-ref q47ed@x '0))) (set! q30b0@set-env-names! (lambda (q47ef@x q47f0@val) (simple-struct-set! q47ef@x '0 q47f0@val))) (set! q30b2@env-labels (lambda (q47f3@x) (simple-struct-ref q47f3@x '1))) (set! q30b4@set-env-labels! (lambda (q47f5@x q47f6@val) (simple-struct-set! q47f5@x '1 q47f6@val))) (set! q30b6@env-itc (lambda (q47f9@x) (simple-struct-ref q47f9@x '2))) (set! q30b8@set-env-itc! (lambda (q47fb@x q47fc@val) (simple-struct-set! q47fb@x '2 q47fc@val))) (set! q30ba@dummy '3) (set! q30bc@rp (q2992@q288b@make-record-printer 'interaction-env (lambda (q47ff@x q4800@p q4801@wr) (display '"#<environment>" q4800@p)))) (set! q30be@make-interaction-env (lambda q4805@args ((lambda (q4807@ret) (begin ((letrec ((q4809@loop (lambda (q480b@i q480c@args) (if (= q480b@i '4) '() (if (null? q480c@args) (begin (simple-struct-set! q4807@ret q480b@i 'uninitialized) (q4809@loop (+ q480b@i '1) q480c@args)) (begin (simple-struct-set! q4807@ret q480b@i (car q480c@args)) (q4809@loop (+ q480b@i '1) (cdr q480c@args)))))))) q4809@loop) '0 q4805@args) q4807@ret)) (make-simple-struct 'interaction-env '4)))) (set! q30c0@interaction-env? (lambda (q480f@x) (and (simple-struct? q480f@x) (eq? (simple-struct-name q480f@x) 'interaction-env)))) (set! q30c2@interaction-env-rib (lambda (q4811@x) (simple-struct-ref q4811@x '0))) (set! q30c4@set-interaction-env-rib! (lambda (q4813@x q4814@val) (simple-struct-set! q4813@x '0 q4814@val))) (set! q30c6@interaction-env-r (lambda (q4817@x) (simple-struct-ref q4817@x '1))) (set! q30c8@set-interaction-env-r! (lambda (q4819@x q481a@val) (simple-struct-set! q4819@x '1 q481a@val))) (set! q30ca@interaction-env-locs (lambda (q481d@x) (simple-struct-ref q481d@x '2))) (set! q30cc@set-interaction-env-locs! (lambda (q481f@x q4820@val) (simple-struct-set! q481f@x '2 q4820@val))) (set! q30ce@dummy '3) (set! q30d0@interaction-environment-symbols (lambda () (q30d8@environment-symbols (q310e@interaction-environment)))) (set! q30d2@environment-bindings (lambda (q4823@e) (vector->list (vector-map (lambda (q4825@name q4826@label) (q30d4@parse-binding (cons q4825@name (q2c64@q2aa6@imported-label->binding q4826@label)))) (q30ae@env-names q4823@e) (q30b2@env-labels q4823@e))))) (set! q30d4@parse-binding (lambda (q4829@b) (cons (car q4829@b) ((lambda (q482b@t) (if (memv q482b@t '(core-prim global)) 'procedure (if (memv q482b@t '(core-macro macro global-macro)) 'syntax (if (memv q482b@t '($core-rtd)) 'record (if (eq? (car q4829@b) (cadr q4829@b)) 'syntax 'unknown))))) (cadr q4829@b))))) (set! q30d6@environment? (lambda (q482d@x) (or (q30ac@env? q482d@x) (q30c0@interaction-env? q482d@x)))) (set! q30d8@environment-symbols (lambda (q482f@x) (if (q30ac@env? q482f@x) (vector->list (q30ae@env-names q482f@x)) (if (q30c0@interaction-env? q482f@x) (map values (q2dd1@rib-sym* (q30c2@interaction-env-rib q482f@x))) (assertion-violation 'environment-symbols '"not an environment" q482f@x))))) (set! q30da@environment (lambda q4831@imp* ((lambda (q4833@itc) ((lambda (q4839@q4836 q483a@q4838) ((lambda (q483d@swap) (dynamic-wind q483d@swap (lambda () (call-with-values (lambda () (q3090@parse-import-spec* q4831@imp*)) (lambda (q4843@q4840 q4844@q4842) ((lambda (q4847@subst-labels q4848@subst-names) (q30aa@make-env q4848@subst-names q4847@subst-labels q4833@itc)) q4844@q4842 q4843@q4840)))) q483d@swap)) (lambda () ((lambda (q484b@t) (begin (q4839@q4836 q483a@q4838) (set! q483a@q4838 q484b@t))) (q4839@q4836))))) q309a@imp-collector q4833@itc)) (q3094@make-collector)))) (set! q30dc@null-environment (lambda (q484d@n) (begin (if (not (eqv? q484d@n '5)) (assertion-violation 'null-environment '"not 5" q484d@n) (void)) (q30da@environment '(psyntax null-environment-5))))) (set! q30de@scheme-report-environment (lambda (q484f@n) (begin (if (not (eqv? q484f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" q484f@n) (void)) (q30da@environment '(psyntax scheme-report-environment-5))))) (set! q30e0@expand (lambda (q4851@x q4852@env) (if (q30ac@env? q4852@env) ((lambda (q4855@rib) ((lambda (q4857@x q4858@itc q4859@rtc q485a@vtc) ((lambda (q485f@x) (begin (q2def@seal-rib! q4855@rib) (values q485f@x (q4859@rtc)))) ((lambda (q4871@q4862 q4872@q4864 q4873@q4866 q4874@q4868 q4875@q486a q4876@q486c q4877@q486e q4878@q4870) ((lambda (q4881@swap) (dynamic-wind q4881@swap (lambda () (q3056@chi-expr q4857@x '() '())) q4881@swap)) (lambda () (begin ((lambda (q4883@t) (begin (q4871@q4862 q4875@q486a) (set! q4875@q486a q4883@t))) (q4871@q4862)) ((lambda (q4885@t) (begin (q4872@q4864 q4876@q486c) (set! q4876@q486c q4885@t))) (q4872@q4864)) ((lambda (q4887@t) (begin (q4873@q4866 q4877@q486e) (set! q4877@q486e q4887@t))) (q4873@q4866)) ((lambda (q4889@t) (begin (q4874@q4868 q4878@q4870) (set! q4878@q4870 q4889@t))) (q4874@q4868)))))) q3110@top-level-context q3096@inv-collector q3098@vis-collector q309a@imp-collector '#f q4859@rtc q485a@vtc q4858@itc))) (q2df7@make-stx q4851@x q2dbd@top-mark* (list q4855@rib) '()) (q30b6@env-itc q4852@env) (q3094@make-collector) (q3094@make-collector))) (q3092@make-top-rib (q30ae@env-names q4852@env) (q30b2@env-labels q4852@env))) (if (q30c0@interaction-env? q4852@env) ((lambda (q488b@rib q488c@r q488d@rtc) ((lambda (q4891@x) (call-with-values (lambda () ((lambda (q48a7@q4898 q48a8@q489a q48a9@q489c q48aa@q489e q48ab@q48a0 q48ac@q48a2 q48ad@q48a4 q48ae@q48a6) ((lambda (q48b7@swap) (dynamic-wind q48b7@swap (lambda () (q309e@chi-interaction-expr q4891@x q488b@rib q488c@r)) q48b7@swap)) (lambda () (begin ((lambda (q48b9@t) (begin (q48a7@q4898 q48ab@q48a0) (set! q48ab@q48a0 q48b9@t))) (q48a7@q4898)) ((lambda (q48bb@t) (begin (q48a8@q489a q48ac@q48a2) (set! q48ac@q48a2 q48bb@t))) (q48a8@q489a)) ((lambda (q48bd@t) (begin (q48a9@q489c q48ad@q48a4) (set! q48ad@q48a4 q48bd@t))) (q48a9@q489c)) ((lambda (q48bf@t) (begin (q48aa@q489e q48ae@q48a6) (set! q48ae@q48a6 q48bf@t))) (q48aa@q489e)))))) q3110@top-level-context q3096@inv-collector q3098@vis-collector q309a@imp-collector q4852@env q488d@rtc (q3094@make-collector) (q3094@make-collector))) (lambda (q48c1@q4894 q48c2@q4896) ((lambda (q48c5@r^ q48c6@e) (begin (q30c8@set-interaction-env-r! q4852@env q48c5@r^) (values q48c6@e (q488d@rtc)))) q48c2@q4896 q48c1@q4894)))) (q2df7@make-stx q4851@x q2dbd@top-mark* (list q488b@rib) '()))) (q30c2@interaction-env-rib q4852@env) (q30c6@interaction-env-r q4852@env) (q3094@make-collector)) (assertion-violation 'expand '"not an environment" q4852@env))))) (set! q30e2@eval (lambda (q48c9@x q48ca@env) (begin (if (not (q30d6@environment? q48ca@env)) (error 'eval '"not an environment" q48ca@env) (void)) (call-with-values (lambda () (q30e0@expand q48c9@x q48ca@env)) (lambda (q48d1@q48ce q48d2@q48d0) ((lambda (q48d5@invoke-req* q48d6@x) (begin (for-each q2c65@q2aa8@invoke-library q48d5@invoke-req*) (eval-core (q29ea@q29a2@expanded->core q48d6@x)))) q48d2@q48d0 q48d1@q48ce)))))) (set! q30e4@library-expander (lambda q4947 ((lambda (q4948) (if (= q4948 '3) (apply (lambda (q48d9@x q48da@filename q48db@verify-name) ((lambda (q48e0@build-visit-code q48e2@visit!) (begin (set! q48e0@build-visit-code (lambda (q4935@macro*) (if (null? q4935@macro*) (q2da1@q2d11@build-void) (q2da0@q2d0f@build-sequence '#f (map (lambda (q4937@x) ((lambda (q4939@loc q493a@src) (list 'set! q4939@loc q493a@src)) (car q4937@x) (cddr q4937@x))) q4935@macro*))))) (set! q48e2@visit! (lambda (q492d@macro*) (for-each (lambda (q492f@x) ((lambda (q4931@loc q4932@proc) (set-symbol-value! q4931@loc q4932@proc)) (car q492f@x) (cadr q492f@x))) q492d@macro*))) (call-with-values (lambda () (q30a2@core-library-expander q48d9@x q48db@verify-name)) (lambda (q48f5@q48e4 q48f6@q48e6 q48f7@q48e8 q48f8@q48ea q48f9@q48ec q48fa@q48ee q48fb@q48f0 q48fc@q48f2 q48fd@q48f4) ((lambda (q4907@export-env q4908@export-subst q4909@macro* q490a@invoke-code q490b@vis* q490c@inv* q490d@imp* q490e@ver q490f@name) ((lambda (q4919@id q491a@name q491b@ver q491c@imp* q491d@vis* q491e@inv* q491f@visit-proc q4920@invoke-proc q4921@visit-code q4922@invoke-code) (begin (q2c63@q2aa4@install-library q4919@id q491a@name q491b@ver q491c@imp* q491d@vis* q491e@inv* q4908@export-subst q4907@export-env q491f@visit-proc q4920@invoke-proc q4921@visit-code q4922@invoke-code '#t q48da@filename) (values q4919@id q491a@name q491b@ver q491c@imp* q491d@vis* q491e@inv* q4922@invoke-code q4921@visit-code q4908@export-subst q4907@export-env))) (gensym) q490f@name q490e@ver (map q2c69@q2ab0@library-spec q490d@imp*) (map q2c69@q2ab0@library-spec q490b@vis*) (map q2c69@q2ab0@library-spec q490c@inv*) (lambda () (q48e2@visit! q4909@macro*)) (lambda () (eval-core (q29ea@q29a2@expanded->core q490a@invoke-code))) (q48e0@build-visit-code q4909@macro*) q490a@invoke-code)) q48fd@q48f4 q48fc@q48f2 q48fb@q48f0 q48fa@q48ee q48f9@q48ec q48f8@q48ea q48f7@q48e8 q48f6@q48e6 q48f5@q48e4))))) '#f '#f)) q4947) (if (= q4948 '2) (apply (lambda (q493d@x q493e@filename) (q30e4@library-expander q493d@x q493e@filename (lambda (q4941@x) (values)))) q4947) (if (= q4948 '1) (apply (lambda (q4943@x) (q30e4@library-expander q4943@x '#f (lambda (q4945@x) (values)))) q4947) (error 'apply '"invalid arg count"))))) (length q4947)))) (set! q30e6@boot-library-expand (lambda (q4949@x) (call-with-values (lambda () (q30e4@library-expander q4949@x)) (lambda (q495f@q494c q4960@q494e q4961@q4950 q4962@q4952 q4963@q4954 q4964@q4956 q4965@q4958 q4966@q495a q4967@q495c q4968@q495e) ((lambda (q4973@export-env q4974@export-subst q4975@visit-code q4976@invoke-code q4977@inv* q4978@vis* q4979@imp* q497a@ver q497b@name q497c@id) (values q497b@name q4976@invoke-code q4974@export-subst q4973@export-env)) q4968@q495e q4967@q495c q4966@q495a q4965@q4958 q4964@q4956 q4963@q4954 q4962@q4952 q4961@q4950 q4960@q494e q495f@q494c))))) (set! q30e8@rev-map-append (lambda (q4987@f q4988@ls q4989@ac) (if (null? q4988@ls) q4989@ac (q30e8@rev-map-append q4987@f (cdr q4988@ls) (cons (q4987@f (car q4988@ls)) q4989@ac))))) (set! q30ea@build-exports (lambda (q498d@lex*+loc* q498e@init*) (q2da0@q2d0f@build-sequence '#f (cons (q2da1@q2d11@build-void) (q30e8@rev-map-append (lambda (q4991@x) (list 'set! (cdr q4991@x) (car q4991@x))) q498d@lex*+loc* q498e@init*))))) (set! q30ec@make-export-subst (lambda (q4993@name* q4994@id*) (map (lambda (q4997@name q4998@id) ((lambda (q499b@label) (begin (if (not q499b@label) (q3102@syntax-violation '#f '"cannot export unbound identifier" q4998@id) (void)) (cons q4997@name q499b@label))) (q2e45@id->label q4998@id))) q4993@name* q4994@id*))) (set! q30ee@make-export-env/macros (lambda (q499d@lex* q499e@loc* q499f@r) ((lambda (q49a4@lookup) (begin (set! q49a4@lookup (lambda (q49c1@x) ((letrec ((q49c3@f (lambda (q49c5@x q49c6@lex* q49c7@loc*) (if (pair? q49c6@lex*) (if (eq? q49c5@x (car q49c6@lex*)) (car q49c7@loc*) (q49c3@f q49c5@x (cdr q49c6@lex*) (cdr q49c7@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) q49c3@f) q49c1@x q499d@lex* q499e@loc*))) ((letrec ((q49a5@f (lambda (q49a7@r q49a8@env q49a9@global* q49aa@macro*) (if (null? q49a7@r) (values q49a8@env q49a9@global* q49aa@macro*) ((lambda (q49af@x) ((lambda (q49b1@label q49b2@b) ((lambda (q49b5@t) (if (memv q49b5@t '(lexical)) ((lambda (q49b7@v) ((lambda (q49b9@loc q49ba@type) (q49a5@f (cdr q49a7@r) (cons (cons* q49b1@label q49ba@type q49b9@loc) q49a8@env) (cons (cons (q2fc0@lexical-var q49b7@v) q49b9@loc) q49a9@global*) q49aa@macro*)) (q49a4@lookup (q2fc0@lexical-var q49b7@v)) (if (q2fc2@lexical-mutable? q49b7@v) 'mutable 'global))) (q2e4d@binding-value q49b2@b)) (if (memv q49b5@t '(local-macro)) ((lambda (q49bd@loc) (q49a5@f (cdr q49a7@r) (cons (cons* q49b1@label 'global-macro q49bd@loc) q49a8@env) q49a9@global* (cons (cons q49bd@loc (q2e4d@binding-value q49b2@b)) q49aa@macro*))) (gensym)) (if (memv q49b5@t '(local-macro!)) ((lambda (q49bf@loc) (q49a5@f (cdr q49a7@r) (cons (cons* q49b1@label 'global-macro! q49bf@loc) q49a8@env) q49a9@global* (cons (cons q49bf@loc (q2e4d@binding-value q49b2@b)) q49aa@macro*))) (gensym)) (if (memv q49b5@t '($rtd $module)) (q49a5@f (cdr q49a7@r) (cons q49af@x q49a8@env) q49a9@global* q49aa@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (q2e4b@binding-type q49b2@b) (q2e4d@binding-value q49b2@b))))))) (q2e4b@binding-type q49b2@b))) (car q49af@x) (cdr q49af@x))) (car q49a7@r)))))) q49a5@f) q499f@r '() '() '()))) '#f))) (set! q30f0@generate-temporaries (lambda (q49cb@ls) ((lambda (q49cd@t) ((lambda (q49cf@ls/false) (if q49cf@ls/false (apply (lambda (q49d1@ls) (map (lambda (q49d3@x) (q2df7@make-stx ((lambda (q49d5@x) (if (or (symbol? q49d5@x) (string? q49d5@x)) (gensym q49d5@x) (gensym 't))) (q3108@syntax->datum q49d3@x)) q2dbd@top-mark* '() '())) q49d1@ls)) q49cf@ls/false) ((lambda (q49d7@t) ((lambda (q49d9@ls/false) (if q49d9@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) q49d9@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q49d7@t))) (q3034@syntax-dispatch q49d7@t '_))) q49cd@t))) (q3034@syntax-dispatch q49cd@t 'each-any))) q49cb@ls))) (set! q30f2@free-identifier=? (lambda (q49db@x q49dc@y) (if (q2e2f@id? q49db@x) (if (q2e2f@id? q49dc@y) (q2e35@free-id=? q49db@x q49dc@y) (assertion-violation 'free-identifier=? '"not an identifier" q49dc@y)) (assertion-violation 'free-identifier=? '"not an identifier" q49db@x)))) (set! q30f4@bound-identifier=? (lambda (q49df@x q49e0@y) (if (q2e2f@id? q49df@x) (if (q2e2f@id? q49e0@y) (q2e33@bound-id=? q49df@x q49e0@y) (assertion-violation 'bound-identifier=? '"not an identifier" q49e0@y)) (assertion-violation 'bound-identifier=? '"not an identifier" q49df@x)))) (set! q30f6@make-source-condition (lambda (q49e3@x) ((lambda (q49ed@q49e8 q49ef@q49ea q49f1@q49e9 q49f4@q49e7 q49f6@make-source-condition q49f8@q49e5 q49fa@q49e6 q49fc@source-condition? q49fe@source-filename q4a00@source-character) (begin (set! q49ed@q49e8 (make-record-type-descriptor '&source-information q4e3e@q4b85@&condition-rtd 'q49eb '#f '#f '#((immutable file-name) (immutable character)))) (set! q49ef@q49ea '#f) (set! q49f1@q49e9 (make-record-constructor-descriptor q49ed@q49e8 q4e3f@q4b87@&condition-rcd q49ef@q49ea)) (set! q49f4@q49e7 (record-predicate q49ed@q49e8)) (set! q49f6@make-source-condition (record-constructor q49f1@q49e9)) (set! q49f8@q49e5 (record-accessor q49ed@q49e8 '0)) (set! q49fa@q49e6 (record-accessor q49ed@q49e8 '1)) (set! q49fc@source-condition? (condition-predicate q49ed@q49e8)) (set! q49fe@source-filename (condition-accessor q49ed@q49e8 q49f8@q49e5)) (set! q4a00@source-character (condition-accessor q49ed@q49e8 q49fa@q49e6)) (if (pair? q49e3@x) (q49f6@make-source-condition (car q49e3@x) (cdr q49e3@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q30f8@extract-position-condition (lambda (q4a01@x) (q30f6@make-source-condition (q30fa@expression-position q4a01@x)))) (set! q30fa@expression-position (lambda (q4a03@x) (and (q2df9@stx? q4a03@x) ((lambda (q4a05@x) (and (q298a@q287b@annotation? q4a05@x) (q298b@q287d@annotation-source q4a05@x))) (q2dfb@stx-expr q4a03@x))))) (set! q30fc@assertion-error (lambda (q4a07@expr q4a08@pos) (raise (condition (q4e6e@q4c49@make-assertion-violation) (q4e80@q4c7b@make-who-condition 'assert) (q4e44@q4bdc@make-message-condition '"assertion failed") (q4e76@q4c60@make-irritants-condition (list q4a07@expr)) (q30f6@make-source-condition q4a08@pos))))) (set! q30fe@syntax-error (lambda (q4a0b@x . q4a0d@args) (begin (if (not (for-all string? q4a0d@args)) (assertion-violation 'syntax-error '"invalid argument" q4a0d@args) (void)) (raise (condition (q4e44@q4bdc@make-message-condition (if (null? q4a0d@args) '"invalid syntax" (apply string-append q4a0d@args))) (q4ea2@q4cd7@make-syntax-violation (q3108@syntax->datum q4a0b@x) '#f) (q30f8@extract-position-condition q4a0b@x)))))) (set! q3100@syntax-violation* (lambda (q4a0f@who q4a10@msg q4a11@form q4a12@condition-object) (begin (if (not (string? q4a10@msg)) (assertion-violation 'syntax-violation '"message is not a string" q4a10@msg) (void)) ((lambda (q4a17@who) (raise (condition (if q4a17@who (q4e80@q4c7b@make-who-condition q4a17@who) (condition)) (q4e44@q4bdc@make-message-condition q4a10@msg) q4a12@condition-object (q30f8@extract-position-condition q4a11@form)))) (if (or (string? q4a0f@who) (symbol? q4a0f@who)) q4a0f@who (if (not q4a0f@who) ((lambda (q4a19@t) ((lambda (q4a1b@ls/false) (if (and q4a1b@ls/false (apply (lambda (q4a1d@id) (q2e2f@id? q4a1d@id)) q4a1b@ls/false)) (apply (lambda (q4a1f@id) (q3108@syntax->datum q4a1f@id)) q4a1b@ls/false) ((lambda (q4a21@t) ((lambda (q4a23@ls/false) (if (and q4a23@ls/false (apply (lambda (q4a25@id q4a26@rest) (q2e2f@id? q4a25@id)) q4a23@ls/false)) (apply (lambda (q4a29@id q4a2a@rest) (q3108@syntax->datum q4a29@id)) q4a23@ls/false) ((lambda (q4a2d@t) ((lambda (q4a2f@ls/false) (if q4a2f@ls/false (apply (lambda () '#f) q4a2f@ls/false) (q3102@syntax-violation '#f '"invalid syntax" q4a2d@t))) (q3034@syntax-dispatch q4a2d@t '_))) q4a21@t))) (q3034@syntax-dispatch q4a21@t '(any . any)))) q4a19@t))) (q3034@syntax-dispatch q4a19@t 'any))) q4a11@form) (assertion-violation 'syntax-violation '"invalid who argument" q4a0f@who))))))) (set! q3102@syntax-violation (lambda q4a3f ((lambda (q4a40) (if (= q4a40 '3) (apply (lambda (q4a31@who q4a32@msg q4a33@form) (q3102@syntax-violation q4a31@who q4a32@msg q4a33@form '#f)) q4a3f) (if (= q4a40 '4) (apply (lambda (q4a37@who q4a38@msg q4a39@form q4a3a@subform) (q3100@syntax-violation* q4a37@who q4a38@msg q4a39@form (q4ea2@q4cd7@make-syntax-violation (q3108@syntax->datum q4a39@form) (q3108@syntax->datum q4a3a@subform)))) q4a3f) (error 'apply '"invalid arg count")))) (length q4a3f)))) (set! q3104@identifier? (lambda (q4a41@x) (q2e2f@id? q4a41@x))) (set! q3106@datum->syntax (lambda (q4a43@id q4a44@datum) (if (q2e2f@id? q4a43@id) (q2e0d@datum->stx q4a43@id q4a44@datum) (assertion-violation 'datum->syntax '"not an identifier" q4a43@id)))) (set! q3108@syntax->datum (lambda (q4a47@x) (q2e43@stx->datum q4a47@x))) (set! q310a@compile-r6rs-top-level (lambda (q4a49@x*) (call-with-values (lambda () (q30a6@top-level-expander q4a49@x*)) (lambda (q4a4f@q4a4c q4a50@q4a4e) ((lambda (q4a53@invoke-code q4a54@lib*) (lambda () (begin (for-each q2c65@q2aa8@invoke-library q4a54@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (q29ea@q29a2@expanded->core q4a53@invoke-code)) (void)) (eval-core (q29ea@q29a2@expanded->core q4a53@invoke-code))))) q4a50@q4a4e q4a4f@q4a4c))))) (set! q310c@pre-compile-r6rs-top-level (lambda (q4a57@x*) (call-with-values (lambda () (q30a6@top-level-expander q4a57@x*)) (lambda (q4a5d@q4a5a q4a5e@q4a5c) ((lambda (q4a61@invoke-code q4a62@lib*) (begin (for-each q2c65@q2aa8@invoke-library q4a62@lib*) (q2993@q288d@compile-core (q29ea@q29a2@expanded->core q4a61@invoke-code)))) q4a5e@q4a5c q4a5d@q4a5a))))) (set! q310e@interaction-environment ((lambda (q4a65@the-env) (lambda () (or q4a65@the-env ((lambda (q4a67@lib q4a68@rib) (begin ((lambda (q4a6b@subst) (begin (q2dd3@set-rib-sym*! q4a68@rib (map car q4a6b@subst)) (q2dd7@set-rib-mark**! q4a68@rib (map (lambda (q4a6d@x) q2dbd@top-mark*) q4a6b@subst)) (q2ddb@set-rib-label*! q4a68@rib (map cdr q4a6b@subst)))) (q2c40@q2a5e@library-subst q4a67@lib)) ((lambda (q4a6f@env) (begin (set! q4a65@the-env q4a6f@env) q4a6f@env)) (q30be@make-interaction-env q4a68@rib '() '())))) (q2c5e@q2a9a@find-library-by-name '(mosh interaction)) (q2de7@make-empty-rib))))) '#f)) (set! q3110@top-level-context (q2995@q2891@make-parameter '#f)) (begin (set! q4b70@q3110@top-level-context q3110@top-level-context) (set! q4b6f@q310e@interaction-environment q310e@interaction-environment) (set! q4b6e@q310c@pre-compile-r6rs-top-level q310c@pre-compile-r6rs-top-level) (set! q4b6d@q310a@compile-r6rs-top-level q310a@compile-r6rs-top-level) (set! q4b6c@q3108@syntax->datum q3108@syntax->datum) (set! q4b6b@q3106@datum->syntax q3106@datum->syntax) (set! q4b6a@q3104@identifier? q3104@identifier?) (set! q4b69@q3102@syntax-violation q3102@syntax-violation) (set! q4b68@q3100@syntax-violation* q3100@syntax-violation*) (set! q4b67@q30fe@syntax-error q30fe@syntax-error) (set! q4b66@q30fc@assertion-error q30fc@assertion-error) (set! q4b65@q30fa@expression-position q30fa@expression-position) (set! q4b64@q30f8@extract-position-condition q30f8@extract-position-condition) (set! q4b63@q30f6@make-source-condition q30f6@make-source-condition) (set! q4b62@q30f4@bound-identifier=? q30f4@bound-identifier=?) (set! q4b61@q30f2@free-identifier=? q30f2@free-identifier=?) (set! q4b60@q30f0@generate-temporaries q30f0@generate-temporaries) (set! q4b5f@q30ee@make-export-env/macros q30ee@make-export-env/macros) (set! q4b5e@q30ec@make-export-subst q30ec@make-export-subst) (set! q4b5d@q30ea@build-exports q30ea@build-exports) (set! q4b5c@q30e8@rev-map-append q30e8@rev-map-append) (set! q4b5b@q30e6@boot-library-expand q30e6@boot-library-expand) (set! q4b5a@q30e4@library-expander q30e4@library-expander) (set! q4b59@q30e2@eval q30e2@eval) (set! q4b58@q30e0@expand q30e0@expand) (set! q4b57@q30de@scheme-report-environment q30de@scheme-report-environment) (set! q4b56@q30dc@null-environment q30dc@null-environment) (set! q4b55@q30da@environment q30da@environment) (set! q4b54@q30d8@environment-symbols q30d8@environment-symbols) (set! q4b53@q30d6@environment? q30d6@environment?) (set! q4b52@q30d4@parse-binding q30d4@parse-binding) (set! q4b51@q30d2@environment-bindings q30d2@environment-bindings) (set! q4b50@q30d0@interaction-environment-symbols q30d0@interaction-environment-symbols) (set! q4b4f@q30ce@dummy q30ce@dummy) (set! q4b4e@q30cc@set-interaction-env-locs! q30cc@set-interaction-env-locs!) (set! q4b4d@q30ca@interaction-env-locs q30ca@interaction-env-locs) (set! q4b4c@q30c8@set-interaction-env-r! q30c8@set-interaction-env-r!) (set! q4b4b@q30c6@interaction-env-r q30c6@interaction-env-r) (set! q4b4a@q30c4@set-interaction-env-rib! q30c4@set-interaction-env-rib!) (set! q4b49@q30c2@interaction-env-rib q30c2@interaction-env-rib) (set! q4b48@q30c0@interaction-env? q30c0@interaction-env?) (set! q4b47@q30be@make-interaction-env q30be@make-interaction-env) (set! q4b46@q30bc@rp q30bc@rp) (set! q4b45@q30ba@dummy q30ba@dummy) (set! q4b44@q30b8@set-env-itc! q30b8@set-env-itc!) (set! q4b43@q30b6@env-itc q30b6@env-itc) (set! q4b42@q30b4@set-env-labels! q30b4@set-env-labels!) (set! q4b41@q30b2@env-labels q30b2@env-labels) (set! q4b40@q30b0@set-env-names! q30b0@set-env-names!) (set! q4b3f@q30ae@env-names q30ae@env-names) (set! q4b3e@q30ac@env? q30ac@env?) (set! q4b3d@q30aa@make-env q30aa@make-env) (set! q4b3c@q30a8@rp q30a8@rp) (set! q4b3b@q30a6@top-level-expander q30a6@top-level-expander) (set! q4b3a@q30a4@parse-top-level-program q30a4@parse-top-level-program) (set! q4b39@q30a2@core-library-expander q30a2@core-library-expander) (set! q4b38@q30a0@library-body-expander q30a0@library-body-expander) (set! q4b37@q309e@chi-interaction-expr q309e@chi-interaction-expr) (set! q4b36@q309c@chi-library-internal q309c@chi-library-internal) (set! q4b35@q309a@imp-collector q309a@imp-collector) (set! q4b34@q3098@vis-collector q3098@vis-collector) (set! q4b33@q3096@inv-collector q3096@inv-collector) (set! q4b32@q3094@make-collector q3094@make-collector) (set! q4b31@q3092@make-top-rib q3092@make-top-rib) (set! q4b30@q3090@parse-import-spec* q3090@parse-import-spec*) (set! q4b2f@q308e@parse-library q308e@parse-library) (set! q4b2e@q308c@parse-library-name q308c@parse-library-name) (set! q4b2d@q308a@parse-exports q308a@parse-exports) (set! q4b2c@q3088@expand-transformer q3088@expand-transformer) (set! q4b2b@q3086@chi-body* q3086@chi-body*) (set! q4b2a@q3084@chi-internal-module q3084@chi-internal-module) (set! q4b29@q3082@module-interface-exp-id* q3082@module-interface-exp-id*) (set! q4b28@q3080@dummy q3080@dummy) (set! q4b27@q307e@set-module-interface-exp-lab-vec! q307e@set-module-interface-exp-lab-vec!) (set! q4b26@q307c@module-interface-exp-lab-vec q307c@module-interface-exp-lab-vec) (set! q4b25@q307a@set-module-interface-exp-id-vec! q307a@set-module-interface-exp-id-vec!) (set! q4b24@q3078@module-interface-exp-id-vec q3078@module-interface-exp-id-vec) (set! q4b23@q3076@set-module-interface-first-mark! q3076@set-module-interface-first-mark!) (set! q4b22@q3074@module-interface-first-mark q3074@module-interface-first-mark) (set! q4b21@q3072@module-interface? q3072@module-interface?) (set! q4b20@q3070@make-module-interface q3070@make-module-interface) (set! q4b1f@q306e@parse-module q306e@parse-module) (set! q4b1e@q306c@chi-internal q306c@chi-internal) (set! q4b1d@q306a@find-dups q306a@find-dups) (set! q4b1c@q3068@find-bound=? q3068@find-bound=?) (set! q4b1b@q3066@chi-rhs* q3066@chi-rhs*) (set! q4b1a@q3064@expand-interaction-rhs*/init* q3064@expand-interaction-rhs*/init*) (set! q4b19@q3062@chi-rhs q3062@chi-rhs) (set! q4b18@q3060@chi-defun q3060@chi-defun) (set! q4b17@q305e@chi-lambda-clause* q305e@chi-lambda-clause*) (set! q4b16@q305c@chi-lambda-clause q305c@chi-lambda-clause) (set! q4b15@q305a@verify-formals q305a@verify-formals) (set! q4b14@q3058@chi-set! q3058@chi-set!) (set! q4b13@q3056@chi-expr q3056@chi-expr) (set! q4b12@q3054@chi-application q3054@chi-application) (set! q4b11@q3052@chi-expr* q3052@chi-expr*) (set! q4b10@q3050@chi-global-macro q3050@chi-global-macro) (set! q4b0f@q304e@chi-local-macro q304e@chi-local-macro) (set! q4b0e@q304c@chi-macro q304c@chi-macro) (set! q4b0d@q304a@do-macro-call q304a@do-macro-call) (set! q4b0c@q3048@local-macro-transformer q3048@local-macro-transformer) (set! q4b0b@q3046@macro-transformer q3046@macro-transformer) (set! q4b0a@q3044@symbol-macro q3044@symbol-macro) (set! q4b09@q3042@core-macro-transformer q3042@core-macro-transformer) (set! q4b08@q3040@syntax-transformer q3040@syntax-transformer) (set! q4b07@q303e@ellipsis-map q303e@ellipsis-map) (set! q4b06@q303c@syntax-case-transformer q303c@syntax-case-transformer) (set! q4b05@q303a@verify-literals q303a@verify-literals) (set! q4b04@q3038@underscore? q3038@underscore?) (set! q4b03@q3036@ellipsis? q3036@ellipsis?) (set! q4b02@q3034@syntax-dispatch q3034@syntax-dispatch) (set! q4b01@q3032@convert-pattern q3032@convert-pattern) (set! q4b00@q3030@foreign-call-transformer q3030@foreign-call-transformer) (set! q4aff@q302e@parameterize-macro q302e@parameterize-macro) (set! q4afe@q302c@incorrect-usage-macro q302c@incorrect-usage-macro) (set! q4afd@q302a@define-condition-type-macro q302a@define-condition-type-macro) (set! q4afc@q3028@define-record-type-macro q3028@define-record-type-macro) (set! q4afb@q3026@define-struct-macro q3026@define-struct-macro) (set! q4afa@q3024@quasisyntax-macro q3024@quasisyntax-macro) (set! q4af9@q3022@quasiquote-macro q3022@quasiquote-macro) (set! q4af8@q3020@syntax-rules-macro q3020@syntax-rules-macro) (set! q4af7@q301e@include-into-macro q301e@include-into-macro) (set! q4af6@q301c@include-macro q301c@include-macro) (set! q4af5@q301a@do-include q301a@do-include) (set! q4af4@q3018@cond-macro q3018@cond-macro) (set! q4af3@q3016@and-macro q3016@and-macro) (set! q4af2@q3014@or-macro q3014@or-macro) (set! q4af1@q3012@let*-macro q3012@let*-macro) (set! q4af0@q3010@do-macro q3010@do-macro) (set! q4aef@q300e@identifier-syntax-macro q300e@identifier-syntax-macro) (set! q4aee@q300c@endianness-macro q300c@endianness-macro) (set! q4aed@q300a@assert-macro q300a@assert-macro) (set! q4aec@q3008@delay-macro q3008@delay-macro) (set! q4aeb@q3006@time-macro q3006@time-macro) (set! q4aea@q3004@define-enumeration-macro q3004@define-enumeration-macro) (set! q4ae9@q3002@guard-macro q3002@guard-macro) (set! q4ae8@q3000@trace-letrec-syntax-macro q3000@trace-letrec-syntax-macro) (set! q4ae7@q2ffe@trace-let-syntax-macro q2ffe@trace-let-syntax-macro) (set! q4ae6@q2ffc@trace-let/rec-syntax q2ffc@trace-let/rec-syntax) (set! q4ae5@q2ffa@trace-define-syntax-macro q2ffa@trace-define-syntax-macro) (set! q4ae4@q2ff8@trace-define-macro q2ff8@trace-define-macro) (set! q4ae3@q2ff6@trace-lambda-macro q2ff6@trace-lambda-macro) (set! q4ae2@q2ff4@let*-values-macro q2ff4@let*-values-macro) (set! q4ae1@q2ff2@let-values-macro q2ff2@let-values-macro) (set! q4ae0@q2ff0@let-macro q2ff0@let-macro) (set! q4adf@q2fee@invalid-fmls-error q2fee@invalid-fmls-error) (set! q4ade@q2fec@with-syntax-macro q2fec@with-syntax-macro) (set! q4add@q2fea@bless q2fea@bless) (set! q4adc@q2fe8@lambda-transformer q2fe8@lambda-transformer) (set! q4adb@q2fe6@case-lambda-transformer q2fe6@case-lambda-transformer) (set! q4ada@q2fe4@quote-transformer q2fe4@quote-transformer) (set! q4ad9@q2fe2@case-macro q2fe2@case-macro) (set! q4ad8@q2fe0@or-transformer q2fe0@or-transformer) (set! q4ad7@q2fde@and-transformer q2fde@and-transformer) (set! q4ad6@q2fdc@if-transformer q2fdc@if-transformer) (set! q4ad5@q2fda@unless-macro q2fda@unless-macro) (set! q4ad4@q2fd8@when-macro q2fd8@when-macro) (set! q4ad3@q2fd6@record-constructor-descriptor-transformer q2fd6@record-constructor-descriptor-transformer) (set! q4ad2@q2fd4@record-type-descriptor-transformer q2fd4@record-type-descriptor-transformer) (set! q4ad1@q2fd2@type-descriptor-transformer q2fd2@type-descriptor-transformer) (set! q4ad0@q2fd0@fluid-let-syntax-transformer q2fd0@fluid-let-syntax-transformer) (set! q4acf@q2fce@letrec*-transformer q2fce@letrec*-transformer) (set! q4ace@q2fcc@letrec-transformer q2fcc@letrec-transformer) (set! q4acd@q2fca@letrec-helper q2fca@letrec-helper) (set! q4acc@q2fc8@add-lexicals q2fc8@add-lexicals) (set! q4acb@q2fc6@add-lexical q2fc6@add-lexical) (set! q4aca@q2fc4@set-lexical-mutable! q2fc4@set-lexical-mutable!) (set! q4ac9@q2fc2@lexical-mutable? q2fc2@lexical-mutable?) (set! q4ac8@q2fc0@lexical-var q2fc0@lexical-var) (set! q4ac7@q2fbe@scheme-stx q2fbe@scheme-stx) (set! q4ac6@q2fbc@scheme-stx-hashtable q2fbc@scheme-stx-hashtable) (set! q4ac5@q2fba@parse-define-syntax q2fba@parse-define-syntax) (set! q4ac4@q2fb8@parse-define q2fb8@parse-define) (set! q4ac3@q2e67@make-eval-transformer q2e67@make-eval-transformer) (set! q4ac2@q2e65@variable-transformer-procedure q2e65@variable-transformer-procedure) (set! q4ac1@q2e63@variable-transformer? q2e63@variable-transformer?) (set! q4ac0@q2e61@make-variable-transformer q2e61@make-variable-transformer) (set! q4abf@q2e5f@sanitize-binding q2e5f@sanitize-binding) (set! q4abe@q2e51@syntax-type q2e51@syntax-type) (set! q4abd@q2e4f@raise-unbound-error q2e4f@raise-unbound-error) (set! q4abc@q2e4d@binding-value q2e4d@binding-value) (set! q4abb@q2e4b@binding-type q2e4b@binding-type) (set! q4aba@q2e49@make-binding q2e49@make-binding) (set! q4ab9@q2e47@label->binding q2e47@label->binding) (set! q4ab8@q2e45@id->label q2e45@id->label) (set! q4ab7@q2e43@stx->datum q2e43@stx->datum) (set! q4ab6@q2e41@strip q2e41@strip) (set! q4ab5@q2e3f@strip-annotations q2e3f@strip-annotations) (set! q4ab4@q2e3d@self-evaluating? q2e3d@self-evaluating?) (set! q4ab3@q2e3b@bound-id-member? q2e3b@bound-id-member?) (set! q4ab2@q2e39@distinct-bound-ids? q2e39@distinct-bound-ids?) (set! q4ab1@q2e37@valid-bound-ids? q2e37@valid-bound-ids?) (set! q4ab0@q2e35@free-id=? q2e35@free-id=?) (set! q4aaf@q2e33@bound-id=? q2e33@bound-id=?) (set! q4aae@q2e31@id->sym q2e31@id->sym) (set! q4aad@q2e2f@id? q2e2f@id?) (set! q4aac@q2e2d@syntax->list q2e2d@syntax->list) (set! q4aab@q2e2b@syntax-cdr q2e2b@syntax-cdr) (set! q4aaa@q2e29@syntax-car q2e29@syntax-car) (set! q4aa9@q2e27@syntax-list? q2e27@syntax-list?) (set! q4aa8@q2e25@syntax-null? q2e25@syntax-null?) (set! q4aa7@q2e23@syntax-vector? q2e23@syntax-vector?) (set! q4aa6@q2e21@syntax-pair? q2e21@syntax-pair?) (set! q4aa5@q2e1f@syntax-vector->list q2e1f@syntax-vector->list) (set! q4aa4@q2e1d@syntax-kind? q2e1d@syntax-kind?) (set! q4aa3@q2e1b@add-subst q2e1b@add-subst) (set! q4aa2@q2e19@add-mark q2e19@add-mark) (set! q4aa1@q2e17@mkstx q2e17@mkstx) (set! q4aa0@q2e15@join-wraps q2e15@join-wraps) (set! q4a9f@q2e13@anti-mark? q2e13@anti-mark?) (set! q4a9e@q2e11@anti-mark q2e11@anti-mark) (set! q4a9d@q2e0f@gen-mark q2e0f@gen-mark) (set! q4a9c@q2e0d@datum->stx q2e0d@datum->stx) (set! q4a9b@q2e0b@dummy q2e0b@dummy) (set! q4a9a@q2e09@set-stx-ae*! q2e09@set-stx-ae*!) (set! q4a99@q2e07@stx-ae* q2e07@stx-ae*) (set! q4a98@q2e05@set-stx-subst*! q2e05@set-stx-subst*!) (set! q4a97@q2e03@stx-subst* q2e03@stx-subst*) (set! q4a96@q2e01@set-stx-mark*! q2e01@set-stx-mark*!) (set! q4a95@q2dff@stx-mark* q2dff@stx-mark*) (set! q4a94@q2dfd@set-stx-expr! q2dfd@set-stx-expr!) (set! q4a93@q2dfb@stx-expr q2dfb@stx-expr) (set! q4a92@q2df9@stx? q2df9@stx?) (set! q4a91@q2df7@make-stx q2df7@make-stx) (set! q4a90@q2df5@rp q2df5@rp) (set! q4a8f@q2df3@make-full-rib q2df3@make-full-rib) (set! q4a8e@q2df1@unseal-rib! q2df1@unseal-rib!) (set! q4a8d@q2def@seal-rib! q2def@seal-rib!) (set! q4a8c@q2ded@make-rib-map q2ded@make-rib-map) (set! q4a8b@q2deb@extend-rib/nc! q2deb@extend-rib/nc!) (set! q4a8a@q2de9@extend-rib! q2de9@extend-rib!) (set! q4a89@q2de7@make-empty-rib q2de7@make-empty-rib) (set! q4a88@q2de5@dummy q2de5@dummy) (set! q4a87@q2de3@set-rib-cache! q2de3@set-rib-cache!) (set! q4a86@q2de1@rib-cache q2de1@rib-cache) (set! q4a85@q2ddf@set-rib-sealed/freq! q2ddf@set-rib-sealed/freq!) (set! q4a84@q2ddd@rib-sealed/freq q2ddd@rib-sealed/freq) (set! q4a83@q2ddb@set-rib-label*! q2ddb@set-rib-label*!) (set! q4a82@q2dd9@rib-label* q2dd9@rib-label*) (set! q4a81@q2dd7@set-rib-mark**! q2dd7@set-rib-mark**!) (set! q4a80@q2dd5@rib-mark** q2dd5@rib-mark**) (set! q4a7f@q2dd3@set-rib-sym*! q2dd3@set-rib-sym*!) (set! q4a7e@q2dd1@rib-sym* q2dd1@rib-sym*) (set! q4a7d@q2dcf@rib? q2dcf@rib?) (set! q4a7c@q2dcd@make-rib q2dcd@make-rib) (set! q4a7b@q2dcb@gen-define-label q2dcb@gen-define-label) (set! q4a7a@q2dc9@gen-define-label+loc q2dc9@gen-define-label+loc) (set! q4a79@q2dc7@gen-top-level-label q2dc7@gen-top-level-label) (set! q4a78@q2dc5@gen-label q2dc5@gen-label) (set! q4a77@q2dc3@gen-global q2dc3@gen-global) (set! q4a76@q2dc1@gen-lexical q2dc1@gen-lexical) (set! q4a75@q2dbf@top-marked? q2dbf@top-marked?) (set! q4a74@q2dbd@top-mark* q2dbd@top-mark*) (set! q4a73@q2db8@set-union q2db8@set-union) (set! q4a72@q2db6@set-cons q2db6@set-cons) (set! q4a71@q2db4@file-options-macro q2db4@file-options-macro) (q2c5b@q2a94@current-library-expander q30e4@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q4b7a@q4b75 q4b7c@q4b77 q4b7e@q4b76 q4b81@&condition? q4b83@make-&condition q4b85@&condition-rtd q4b87@&condition-rcd q4bd3@q4bce q4bd5@q4bd0 q4bd7@q4bcf q4bda@p? q4bdc@make-message-condition q4bde@q4bcd q4be0@message-condition? q4be2@condition-message q4be4@&message-rtd q4be6@&message-rcd q4bec@q4be7 q4bee@q4be9 q4bf0@q4be8 q4bf3@p? q4bf5@make-warning q4bf7@warning? q4bf9@&warning-rtd q4bfb@&warning-rcd q4c01@q4bfc q4c03@q4bfe q4c05@q4bfd q4c08@p? q4c0a@make-serious-condition q4c0c@serious-condition? q4c0e@&serious-rtd q4c10@&serious-rcd q4c16@q4c11 q4c18@q4c13 q4c1a@q4c12 q4c1d@p? q4c1f@make-error q4c21@error? q4c23@&error-rtd q4c25@&error-rcd q4c2b@q4c26 q4c2d@q4c28 q4c2f@q4c27 q4c32@p? q4c34@make-violation q4c36@violation? q4c38@&violation-rtd q4c3a@&violation-rcd q4c40@q4c3b q4c42@q4c3d q4c44@q4c3c q4c47@p? q4c49@make-assertion-violation q4c4b@assertion-violation? q4c4d@&assertion-rtd q4c4f@&assertion-rcd q4c57@q4c52 q4c59@q4c54 q4c5b@q4c53 q4c5e@p? q4c60@make-irritants-condition q4c62@q4c51 q4c64@irritants-condition? q4c66@condition-irritants q4c68@&irritants-rtd q4c6a@&irritants-rcd q4c72@q4c6d q4c74@q4c6f q4c76@q4c6e q4c79@p? q4c7b@make-who-condition q4c7d@q4c6c q4c7f@who-condition? q4c81@condition-who q4c83@&who-rtd q4c85@&who-rcd q4c8b@q4c86 q4c8d@q4c88 q4c8f@q4c87 q4c92@p? q4c94@make-non-continuable-violation q4c96@non-continuable-violation? q4c98@&non-continuable-rtd q4c9a@&non-continuable-rcd q4ca0@q4c9b q4ca2@q4c9d q4ca4@q4c9c q4ca7@p? q4ca9@make-implementation-restriction-violation q4cab@implementation-restriction-violation? q4cad@&implementation-restriction-rtd q4caf@&implementation-restriction-rcd q4cb5@q4cb0 q4cb7@q4cb2 q4cb9@q4cb1 q4cbc@p? q4cbe@make-lexical-violation q4cc0@lexical-violation? q4cc2@&lexical-rtd q4cc4@&lexical-rcd q4cce@q4cc9 q4cd0@q4ccb q4cd2@q4cca q4cd5@p? q4cd7@make-syntax-violation q4cd9@q4cc6 q4cdb@q4cc8 q4cdd@syntax-violation? q4cdf@syntax-violation-form q4ce1@syntax-violation-subform q4ce3@&syntax-rtd q4ce5@&syntax-rcd q4ceb@q4ce6 q4ced@q4ce8 q4cef@q4ce7 q4cf2@p? q4cf4@make-undefined-violation q4cf6@undefined-violation? q4cf8@&undefined-rtd q4cfa@&undefined-rcd q4d00@q4cfb q4d02@q4cfd q4d04@q4cfc q4d07@p? q4d09@make-i/o-error q4d0b@i/o-error? q4d0d@&i/o-rtd q4d0f@&i/o-rcd q4d15@q4d10 q4d17@q4d12 q4d19@q4d11 q4d1c@p? q4d1e@make-i/o-read-error q4d20@i/o-read-error? q4d22@&i/o-read-rtd q4d24@&i/o-read-rcd q4d2a@q4d25 q4d2c@q4d27 q4d2e@q4d26 q4d31@p? q4d33@make-i/o-write-error q4d35@i/o-write-error? q4d37@&i/o-write-rtd q4d39@&i/o-write-rcd q4d41@q4d3c q4d43@q4d3e q4d45@q4d3d q4d48@p? q4d4a@make-i/o-invalid-position-error q4d4c@q4d3b q4d4e@i/o-invalid-position-error? q4d50@i/o-error-position q4d52@&i/o-invalid-position-rtd q4d54@&i/o-invalid-position-rcd q4d5c@q4d57 q4d5e@q4d59 q4d60@q4d58 q4d63@p? q4d65@make-i/o-filename-error q4d67@q4d56 q4d69@i/o-filename-error? q4d6b@i/o-error-filename q4d6d@&i/o-filename-rtd q4d6f@&i/o-filename-rcd q4d75@q4d70 q4d77@q4d72 q4d79@q4d71 q4d7c@p? q4d7e@make-i/o-file-protection-error q4d80@i/o-file-protection-error? q4d82@&i/o-file-protection-rtd q4d84@&i/o-file-protection-rcd q4d8a@q4d85 q4d8c@q4d87 q4d8e@q4d86 q4d91@p? q4d93@make-i/o-file-is-read-only-error q4d95@i/o-file-is-read-only-error? q4d97@&i/o-file-is-read-only-rtd q4d99@&i/o-file-is-read-only-rcd q4d9f@q4d9a q4da1@q4d9c q4da3@q4d9b q4da6@p? q4da8@make-i/o-file-already-exists-error q4daa@i/o-file-already-exists-error? q4dac@&i/o-file-already-exists-rtd q4dae@&i/o-file-already-exists-rcd q4db4@q4daf q4db6@q4db1 q4db8@q4db0 q4dbb@p? q4dbd@make-i/o-file-does-not-exist-error q4dbf@i/o-file-does-not-exist-error? q4dc1@&i/o-file-does-not-exist-rtd q4dc3@&i/o-file-does-not-exist-rcd q4dcb@q4dc6 q4dcd@q4dc8 q4dcf@q4dc7 q4dd2@p? q4dd4@make-i/o-port-error q4dd6@q4dc5 q4dd8@i/o-port-error? q4dda@i/o-error-port q4ddc@&i/o-port-rtd q4dde@&i/o-port-rcd q4de4@q4ddf q4de6@q4de1 q4de8@q4de0 q4deb@p? q4ded@make-i/o-decoding-error q4def@i/o-decoding-error? q4df1@&i/o-decoding-rtd q4df3@&i/o-decoding-rcd q4dfb@q4df6 q4dfd@q4df8 q4dff@q4df7 q4e02@p? q4e04@make-i/o-encoding-error q4e06@q4df5 q4e08@i/o-encoding-error? q4e0a@i/o-encoding-error-char q4e0c@&i/o-encoding-rtd q4e0e@&i/o-encoding-rcd q4e14@q4e0f q4e16@q4e11 q4e18@q4e10 q4e1b@p? q4e1d@make-no-infinities-violation q4e1f@no-infinities-violation? q4e21@&no-infinities-rtd q4e23@&no-infinities-rcd q4e29@q4e24 q4e2b@q4e26 q4e2d@q4e25 q4e30@p? q4e32@make-no-nans-violation q4e34@no-nans-violation? q4e36@&no-nans-rtd q4e38@&no-nans-rcd) (begin (set! q4b7a@q4b75 (make-record-type-descriptor '&condition '#f 'q4b78 '#f '#f '#())) (set! q4b7c@q4b77 '#f) (set! q4b7e@q4b76 (make-record-constructor-descriptor q4b7a@q4b75 '#f q4b7c@q4b77)) (set! q4b81@&condition? (record-predicate q4b7a@q4b75)) (set! q4b83@make-&condition (record-constructor q4b7e@q4b76)) (set! q4b85@&condition-rtd q4b7a@q4b75) (set! q4b87@&condition-rcd q4b7e@q4b76) (set! q4bd3@q4bce (make-record-type-descriptor '&message q4b7a@q4b75 'q4bd1 '#f '#f '#((immutable message)))) (set! q4bd5@q4bd0 '#f) (set! q4bd7@q4bcf (make-record-constructor-descriptor q4bd3@q4bce q4b7e@q4b76 q4bd5@q4bd0)) (set! q4bda@p? (record-predicate q4bd3@q4bce)) (set! q4bdc@make-message-condition (record-constructor q4bd7@q4bcf)) (set! q4bde@q4bcd (record-accessor q4bd3@q4bce '0)) (set! q4be0@message-condition? (condition-predicate q4bd3@q4bce)) (set! q4be2@condition-message (condition-accessor q4bd3@q4bce q4bde@q4bcd)) (set! q4be4@&message-rtd q4bd3@q4bce) (set! q4be6@&message-rcd q4bd7@q4bcf) (set! q4bec@q4be7 (make-record-type-descriptor '&warning q4b7a@q4b75 'q4bea '#f '#f '#())) (set! q4bee@q4be9 '#f) (set! q4bf0@q4be8 (make-record-constructor-descriptor q4bec@q4be7 q4b7e@q4b76 q4bee@q4be9)) (set! q4bf3@p? (record-predicate q4bec@q4be7)) (set! q4bf5@make-warning (record-constructor q4bf0@q4be8)) (set! q4bf7@warning? (condition-predicate q4bec@q4be7)) (set! q4bf9@&warning-rtd q4bec@q4be7) (set! q4bfb@&warning-rcd q4bf0@q4be8) (set! q4c01@q4bfc (make-record-type-descriptor '&serious q4b7a@q4b75 'q4bff '#f '#f '#())) (set! q4c03@q4bfe '#f) (set! q4c05@q4bfd (make-record-constructor-descriptor q4c01@q4bfc q4b7e@q4b76 q4c03@q4bfe)) (set! q4c08@p? (record-predicate q4c01@q4bfc)) (set! q4c0a@make-serious-condition (record-constructor q4c05@q4bfd)) (set! q4c0c@serious-condition? (condition-predicate q4c01@q4bfc)) (set! q4c0e@&serious-rtd q4c01@q4bfc) (set! q4c10@&serious-rcd q4c05@q4bfd) (set! q4c16@q4c11 (make-record-type-descriptor '&error q4c01@q4bfc 'q4c14 '#f '#f '#())) (set! q4c18@q4c13 '#f) (set! q4c1a@q4c12 (make-record-constructor-descriptor q4c16@q4c11 q4c05@q4bfd q4c18@q4c13)) (set! q4c1d@p? (record-predicate q4c16@q4c11)) (set! q4c1f@make-error (record-constructor q4c1a@q4c12)) (set! q4c21@error? (condition-predicate q4c16@q4c11)) (set! q4c23@&error-rtd q4c16@q4c11) (set! q4c25@&error-rcd q4c1a@q4c12) (set! q4c2b@q4c26 (make-record-type-descriptor '&violation q4c01@q4bfc 'q4c29 '#f '#f '#())) (set! q4c2d@q4c28 '#f) (set! q4c2f@q4c27 (make-record-constructor-descriptor q4c2b@q4c26 q4c05@q4bfd q4c2d@q4c28)) (set! q4c32@p? (record-predicate q4c2b@q4c26)) (set! q4c34@make-violation (record-constructor q4c2f@q4c27)) (set! q4c36@violation? (condition-predicate q4c2b@q4c26)) (set! q4c38@&violation-rtd q4c2b@q4c26) (set! q4c3a@&violation-rcd q4c2f@q4c27) (set! q4c40@q4c3b (make-record-type-descriptor '&assertion q4c2b@q4c26 'q4c3e '#f '#f '#())) (set! q4c42@q4c3d '#f) (set! q4c44@q4c3c (make-record-constructor-descriptor q4c40@q4c3b q4c2f@q4c27 q4c42@q4c3d)) (set! q4c47@p? (record-predicate q4c40@q4c3b)) (set! q4c49@make-assertion-violation (record-constructor q4c44@q4c3c)) (set! q4c4b@assertion-violation? (condition-predicate q4c40@q4c3b)) (set! q4c4d@&assertion-rtd q4c40@q4c3b) (set! q4c4f@&assertion-rcd q4c44@q4c3c) (set! q4c57@q4c52 (make-record-type-descriptor '&irritants q4b7a@q4b75 'q4c55 '#f '#f '#((immutable irritants)))) (set! q4c59@q4c54 '#f) (set! q4c5b@q4c53 (make-record-constructor-descriptor q4c57@q4c52 q4b7e@q4b76 q4c59@q4c54)) (set! q4c5e@p? (record-predicate q4c57@q4c52)) (set! q4c60@make-irritants-condition (record-constructor q4c5b@q4c53)) (set! q4c62@q4c51 (record-accessor q4c57@q4c52 '0)) (set! q4c64@irritants-condition? (condition-predicate q4c57@q4c52)) (set! q4c66@condition-irritants (condition-accessor q4c57@q4c52 q4c62@q4c51)) (set! q4c68@&irritants-rtd q4c57@q4c52) (set! q4c6a@&irritants-rcd q4c5b@q4c53) (set! q4c72@q4c6d (make-record-type-descriptor '&who q4b7a@q4b75 'q4c70 '#f '#f '#((immutable who)))) (set! q4c74@q4c6f '#f) (set! q4c76@q4c6e (make-record-constructor-descriptor q4c72@q4c6d q4b7e@q4b76 q4c74@q4c6f)) (set! q4c79@p? (record-predicate q4c72@q4c6d)) (set! q4c7b@make-who-condition (record-constructor q4c76@q4c6e)) (set! q4c7d@q4c6c (record-accessor q4c72@q4c6d '0)) (set! q4c7f@who-condition? (condition-predicate q4c72@q4c6d)) (set! q4c81@condition-who (condition-accessor q4c72@q4c6d q4c7d@q4c6c)) (set! q4c83@&who-rtd q4c72@q4c6d) (set! q4c85@&who-rcd q4c76@q4c6e) (set! q4c8b@q4c86 (make-record-type-descriptor '&non-continuable q4c2b@q4c26 'q4c89 '#f '#f '#())) (set! q4c8d@q4c88 '#f) (set! q4c8f@q4c87 (make-record-constructor-descriptor q4c8b@q4c86 q4c2f@q4c27 q4c8d@q4c88)) (set! q4c92@p? (record-predicate q4c8b@q4c86)) (set! q4c94@make-non-continuable-violation (record-constructor q4c8f@q4c87)) (set! q4c96@non-continuable-violation? (condition-predicate q4c8b@q4c86)) (set! q4c98@&non-continuable-rtd q4c8b@q4c86) (set! q4c9a@&non-continuable-rcd q4c8f@q4c87) (set! q4ca0@q4c9b (make-record-type-descriptor '&implementation-restriction q4c2b@q4c26 'q4c9e '#f '#f '#())) (set! q4ca2@q4c9d '#f) (set! q4ca4@q4c9c (make-record-constructor-descriptor q4ca0@q4c9b q4c2f@q4c27 q4ca2@q4c9d)) (set! q4ca7@p? (record-predicate q4ca0@q4c9b)) (set! q4ca9@make-implementation-restriction-violation (record-constructor q4ca4@q4c9c)) (set! q4cab@implementation-restriction-violation? (condition-predicate q4ca0@q4c9b)) (set! q4cad@&implementation-restriction-rtd q4ca0@q4c9b) (set! q4caf@&implementation-restriction-rcd q4ca4@q4c9c) (set! q4cb5@q4cb0 (make-record-type-descriptor '&lexical q4c2b@q4c26 'q4cb3 '#f '#f '#())) (set! q4cb7@q4cb2 '#f) (set! q4cb9@q4cb1 (make-record-constructor-descriptor q4cb5@q4cb0 q4c2f@q4c27 q4cb7@q4cb2)) (set! q4cbc@p? (record-predicate q4cb5@q4cb0)) (set! q4cbe@make-lexical-violation (record-constructor q4cb9@q4cb1)) (set! q4cc0@lexical-violation? (condition-predicate q4cb5@q4cb0)) (set! q4cc2@&lexical-rtd q4cb5@q4cb0) (set! q4cc4@&lexical-rcd q4cb9@q4cb1) (set! q4cce@q4cc9 (make-record-type-descriptor '&syntax q4c2b@q4c26 'q4ccc '#f '#f '#((immutable form) (immutable subform)))) (set! q4cd0@q4ccb '#f) (set! q4cd2@q4cca (make-record-constructor-descriptor q4cce@q4cc9 q4c2f@q4c27 q4cd0@q4ccb)) (set! q4cd5@p? (record-predicate q4cce@q4cc9)) (set! q4cd7@make-syntax-violation (record-constructor q4cd2@q4cca)) (set! q4cd9@q4cc6 (record-accessor q4cce@q4cc9 '0)) (set! q4cdb@q4cc8 (record-accessor q4cce@q4cc9 '1)) (set! q4cdd@syntax-violation? (condition-predicate q4cce@q4cc9)) (set! q4cdf@syntax-violation-form (condition-accessor q4cce@q4cc9 q4cd9@q4cc6)) (set! q4ce1@syntax-violation-subform (condition-accessor q4cce@q4cc9 q4cdb@q4cc8)) (set! q4ce3@&syntax-rtd q4cce@q4cc9) (set! q4ce5@&syntax-rcd q4cd2@q4cca) (set! q4ceb@q4ce6 (make-record-type-descriptor '&undefined q4c2b@q4c26 'q4ce9 '#f '#f '#())) (set! q4ced@q4ce8 '#f) (set! q4cef@q4ce7 (make-record-constructor-descriptor q4ceb@q4ce6 q4c2f@q4c27 q4ced@q4ce8)) (set! q4cf2@p? (record-predicate q4ceb@q4ce6)) (set! q4cf4@make-undefined-violation (record-constructor q4cef@q4ce7)) (set! q4cf6@undefined-violation? (condition-predicate q4ceb@q4ce6)) (set! q4cf8@&undefined-rtd q4ceb@q4ce6) (set! q4cfa@&undefined-rcd q4cef@q4ce7) (set! q4d00@q4cfb (make-record-type-descriptor '&i/o q4c16@q4c11 'q4cfe '#f '#f '#())) (set! q4d02@q4cfd '#f) (set! q4d04@q4cfc (make-record-constructor-descriptor q4d00@q4cfb q4c1a@q4c12 q4d02@q4cfd)) (set! q4d07@p? (record-predicate q4d00@q4cfb)) (set! q4d09@make-i/o-error (record-constructor q4d04@q4cfc)) (set! q4d0b@i/o-error? (condition-predicate q4d00@q4cfb)) (set! q4d0d@&i/o-rtd q4d00@q4cfb) (set! q4d0f@&i/o-rcd q4d04@q4cfc) (set! q4d15@q4d10 (make-record-type-descriptor '&i/o-read q4d00@q4cfb 'q4d13 '#f '#f '#())) (set! q4d17@q4d12 '#f) (set! q4d19@q4d11 (make-record-constructor-descriptor q4d15@q4d10 q4d04@q4cfc q4d17@q4d12)) (set! q4d1c@p? (record-predicate q4d15@q4d10)) (set! q4d1e@make-i/o-read-error (record-constructor q4d19@q4d11)) (set! q4d20@i/o-read-error? (condition-predicate q4d15@q4d10)) (set! q4d22@&i/o-read-rtd q4d15@q4d10) (set! q4d24@&i/o-read-rcd q4d19@q4d11) (set! q4d2a@q4d25 (make-record-type-descriptor '&i/o-write q4d00@q4cfb 'q4d28 '#f '#f '#())) (set! q4d2c@q4d27 '#f) (set! q4d2e@q4d26 (make-record-constructor-descriptor q4d2a@q4d25 q4d04@q4cfc q4d2c@q4d27)) (set! q4d31@p? (record-predicate q4d2a@q4d25)) (set! q4d33@make-i/o-write-error (record-constructor q4d2e@q4d26)) (set! q4d35@i/o-write-error? (condition-predicate q4d2a@q4d25)) (set! q4d37@&i/o-write-rtd q4d2a@q4d25) (set! q4d39@&i/o-write-rcd q4d2e@q4d26) (set! q4d41@q4d3c (make-record-type-descriptor '&i/o-invalid-position q4d00@q4cfb 'q4d3f '#f '#f '#((immutable position)))) (set! q4d43@q4d3e '#f) (set! q4d45@q4d3d (make-record-constructor-descriptor q4d41@q4d3c q4d04@q4cfc q4d43@q4d3e)) (set! q4d48@p? (record-predicate q4d41@q4d3c)) (set! q4d4a@make-i/o-invalid-position-error (record-constructor q4d45@q4d3d)) (set! q4d4c@q4d3b (record-accessor q4d41@q4d3c '0)) (set! q4d4e@i/o-invalid-position-error? (condition-predicate q4d41@q4d3c)) (set! q4d50@i/o-error-position (condition-accessor q4d41@q4d3c q4d4c@q4d3b)) (set! q4d52@&i/o-invalid-position-rtd q4d41@q4d3c) (set! q4d54@&i/o-invalid-position-rcd q4d45@q4d3d) (set! q4d5c@q4d57 (make-record-type-descriptor '&i/o-filename q4d00@q4cfb 'q4d5a '#f '#f '#((immutable filename)))) (set! q4d5e@q4d59 '#f) (set! q4d60@q4d58 (make-record-constructor-descriptor q4d5c@q4d57 q4d04@q4cfc q4d5e@q4d59)) (set! q4d63@p? (record-predicate q4d5c@q4d57)) (set! q4d65@make-i/o-filename-error (record-constructor q4d60@q4d58)) (set! q4d67@q4d56 (record-accessor q4d5c@q4d57 '0)) (set! q4d69@i/o-filename-error? (condition-predicate q4d5c@q4d57)) (set! q4d6b@i/o-error-filename (condition-accessor q4d5c@q4d57 q4d67@q4d56)) (set! q4d6d@&i/o-filename-rtd q4d5c@q4d57) (set! q4d6f@&i/o-filename-rcd q4d60@q4d58) (set! q4d75@q4d70 (make-record-type-descriptor '&i/o-file-protection q4d5c@q4d57 'q4d73 '#f '#f '#())) (set! q4d77@q4d72 '#f) (set! q4d79@q4d71 (make-record-constructor-descriptor q4d75@q4d70 q4d60@q4d58 q4d77@q4d72)) (set! q4d7c@p? (record-predicate q4d75@q4d70)) (set! q4d7e@make-i/o-file-protection-error (record-constructor q4d79@q4d71)) (set! q4d80@i/o-file-protection-error? (condition-predicate q4d75@q4d70)) (set! q4d82@&i/o-file-protection-rtd q4d75@q4d70) (set! q4d84@&i/o-file-protection-rcd q4d79@q4d71) (set! q4d8a@q4d85 (make-record-type-descriptor '&i/o-file-is-read-only q4d75@q4d70 'q4d88 '#f '#f '#())) (set! q4d8c@q4d87 '#f) (set! q4d8e@q4d86 (make-record-constructor-descriptor q4d8a@q4d85 q4d79@q4d71 q4d8c@q4d87)) (set! q4d91@p? (record-predicate q4d8a@q4d85)) (set! q4d93@make-i/o-file-is-read-only-error (record-constructor q4d8e@q4d86)) (set! q4d95@i/o-file-is-read-only-error? (condition-predicate q4d8a@q4d85)) (set! q4d97@&i/o-file-is-read-only-rtd q4d8a@q4d85) (set! q4d99@&i/o-file-is-read-only-rcd q4d8e@q4d86) (set! q4d9f@q4d9a (make-record-type-descriptor '&i/o-file-already-exists q4d5c@q4d57 'q4d9d '#f '#f '#())) (set! q4da1@q4d9c '#f) (set! q4da3@q4d9b (make-record-constructor-descriptor q4d9f@q4d9a q4d60@q4d58 q4da1@q4d9c)) (set! q4da6@p? (record-predicate q4d9f@q4d9a)) (set! q4da8@make-i/o-file-already-exists-error (record-constructor q4da3@q4d9b)) (set! q4daa@i/o-file-already-exists-error? (condition-predicate q4d9f@q4d9a)) (set! q4dac@&i/o-file-already-exists-rtd q4d9f@q4d9a) (set! q4dae@&i/o-file-already-exists-rcd q4da3@q4d9b) (set! q4db4@q4daf (make-record-type-descriptor '&i/o-file-does-not-exist q4d5c@q4d57 'q4db2 '#f '#f '#())) (set! q4db6@q4db1 '#f) (set! q4db8@q4db0 (make-record-constructor-descriptor q4db4@q4daf q4d60@q4d58 q4db6@q4db1)) (set! q4dbb@p? (record-predicate q4db4@q4daf)) (set! q4dbd@make-i/o-file-does-not-exist-error (record-constructor q4db8@q4db0)) (set! q4dbf@i/o-file-does-not-exist-error? (condition-predicate q4db4@q4daf)) (set! q4dc1@&i/o-file-does-not-exist-rtd q4db4@q4daf) (set! q4dc3@&i/o-file-does-not-exist-rcd q4db8@q4db0) (set! q4dcb@q4dc6 (make-record-type-descriptor '&i/o-port q4d00@q4cfb 'q4dc9 '#f '#f '#((immutable port)))) (set! q4dcd@q4dc8 '#f) (set! q4dcf@q4dc7 (make-record-constructor-descriptor q4dcb@q4dc6 q4d04@q4cfc q4dcd@q4dc8)) (set! q4dd2@p? (record-predicate q4dcb@q4dc6)) (set! q4dd4@make-i/o-port-error (record-constructor q4dcf@q4dc7)) (set! q4dd6@q4dc5 (record-accessor q4dcb@q4dc6 '0)) (set! q4dd8@i/o-port-error? (condition-predicate q4dcb@q4dc6)) (set! q4dda@i/o-error-port (condition-accessor q4dcb@q4dc6 q4dd6@q4dc5)) (set! q4ddc@&i/o-port-rtd q4dcb@q4dc6) (set! q4dde@&i/o-port-rcd q4dcf@q4dc7) (set! q4de4@q4ddf (make-record-type-descriptor '&i/o-decoding q4dcb@q4dc6 'q4de2 '#f '#f '#())) (set! q4de6@q4de1 '#f) (set! q4de8@q4de0 (make-record-constructor-descriptor q4de4@q4ddf q4dcf@q4dc7 q4de6@q4de1)) (set! q4deb@p? (record-predicate q4de4@q4ddf)) (set! q4ded@make-i/o-decoding-error (record-constructor q4de8@q4de0)) (set! q4def@i/o-decoding-error? (condition-predicate q4de4@q4ddf)) (set! q4df1@&i/o-decoding-rtd q4de4@q4ddf) (set! q4df3@&i/o-decoding-rcd q4de8@q4de0) (set! q4dfb@q4df6 (make-record-type-descriptor '&i/o-encoding q4dcb@q4dc6 'q4df9 '#f '#f '#((immutable char)))) (set! q4dfd@q4df8 '#f) (set! q4dff@q4df7 (make-record-constructor-descriptor q4dfb@q4df6 q4dcf@q4dc7 q4dfd@q4df8)) (set! q4e02@p? (record-predicate q4dfb@q4df6)) (set! q4e04@make-i/o-encoding-error (record-constructor q4dff@q4df7)) (set! q4e06@q4df5 (record-accessor q4dfb@q4df6 '0)) (set! q4e08@i/o-encoding-error? (condition-predicate q4dfb@q4df6)) (set! q4e0a@i/o-encoding-error-char (condition-accessor q4dfb@q4df6 q4e06@q4df5)) (set! q4e0c@&i/o-encoding-rtd q4dfb@q4df6) (set! q4e0e@&i/o-encoding-rcd q4dff@q4df7) (set! q4e14@q4e0f (make-record-type-descriptor '&no-infinities q4ca0@q4c9b 'q4e12 '#f '#f '#())) (set! q4e16@q4e11 '#f) (set! q4e18@q4e10 (make-record-constructor-descriptor q4e14@q4e0f q4ca4@q4c9c q4e16@q4e11)) (set! q4e1b@p? (record-predicate q4e14@q4e0f)) (set! q4e1d@make-no-infinities-violation (record-constructor q4e18@q4e10)) (set! q4e1f@no-infinities-violation? (condition-predicate q4e14@q4e0f)) (set! q4e21@&no-infinities-rtd q4e14@q4e0f) (set! q4e23@&no-infinities-rcd q4e18@q4e10) (set! q4e29@q4e24 (make-record-type-descriptor '&no-nans q4ca0@q4c9b 'q4e27 '#f '#f '#())) (set! q4e2b@q4e26 '#f) (set! q4e2d@q4e25 (make-record-constructor-descriptor q4e29@q4e24 q4ca4@q4c9c q4e2b@q4e26)) (set! q4e30@p? (record-predicate q4e29@q4e24)) (set! q4e32@make-no-nans-violation (record-constructor q4e2d@q4e25)) (set! q4e34@no-nans-violation? (condition-predicate q4e29@q4e24)) (set! q4e36@&no-nans-rtd q4e29@q4e24) (set! q4e38@&no-nans-rcd q4e2d@q4e25) (begin (set! q4f29@q4e38@&no-nans-rcd q4e38@&no-nans-rcd) (set! q4f28@q4e36@&no-nans-rtd q4e36@&no-nans-rtd) (set! q4f27@q4e34@no-nans-violation? q4e34@no-nans-violation?) (set! q4f26@q4e32@make-no-nans-violation q4e32@make-no-nans-violation) (set! q4f25@q4e30@p? q4e30@p?) (set! q4f24@q4e2d@q4e25 q4e2d@q4e25) (set! q4f23@q4e2b@q4e26 q4e2b@q4e26) (set! q4f22@q4e29@q4e24 q4e29@q4e24) (set! q4f21@q4e23@&no-infinities-rcd q4e23@&no-infinities-rcd) (set! q4f20@q4e21@&no-infinities-rtd q4e21@&no-infinities-rtd) (set! q4f1f@q4e1f@no-infinities-violation? q4e1f@no-infinities-violation?) (set! q4f1e@q4e1d@make-no-infinities-violation q4e1d@make-no-infinities-violation) (set! q4f1d@q4e1b@p? q4e1b@p?) (set! q4f1c@q4e18@q4e10 q4e18@q4e10) (set! q4f1b@q4e16@q4e11 q4e16@q4e11) (set! q4f1a@q4e14@q4e0f q4e14@q4e0f) (set! q4f19@q4e0e@&i/o-encoding-rcd q4e0e@&i/o-encoding-rcd) (set! q4f18@q4e0c@&i/o-encoding-rtd q4e0c@&i/o-encoding-rtd) (set! q4f17@q4e0a@i/o-encoding-error-char q4e0a@i/o-encoding-error-char) (set! q4f16@q4e08@i/o-encoding-error? q4e08@i/o-encoding-error?) (set! q4f15@q4e06@q4df5 q4e06@q4df5) (set! q4f14@q4e04@make-i/o-encoding-error q4e04@make-i/o-encoding-error) (set! q4f13@q4e02@p? q4e02@p?) (set! q4f12@q4dff@q4df7 q4dff@q4df7) (set! q4f11@q4dfd@q4df8 q4dfd@q4df8) (set! q4f10@q4dfb@q4df6 q4dfb@q4df6) (set! q4f0f@q4df3@&i/o-decoding-rcd q4df3@&i/o-decoding-rcd) (set! q4f0e@q4df1@&i/o-decoding-rtd q4df1@&i/o-decoding-rtd) (set! q4f0d@q4def@i/o-decoding-error? q4def@i/o-decoding-error?) (set! q4f0c@q4ded@make-i/o-decoding-error q4ded@make-i/o-decoding-error) (set! q4f0b@q4deb@p? q4deb@p?) (set! q4f0a@q4de8@q4de0 q4de8@q4de0) (set! q4f09@q4de6@q4de1 q4de6@q4de1) (set! q4f08@q4de4@q4ddf q4de4@q4ddf) (set! q4f07@q4dde@&i/o-port-rcd q4dde@&i/o-port-rcd) (set! q4f06@q4ddc@&i/o-port-rtd q4ddc@&i/o-port-rtd) (set! q4f05@q4dda@i/o-error-port q4dda@i/o-error-port) (set! q4f04@q4dd8@i/o-port-error? q4dd8@i/o-port-error?) (set! q4f03@q4dd6@q4dc5 q4dd6@q4dc5) (set! q4f02@q4dd4@make-i/o-port-error q4dd4@make-i/o-port-error) (set! q4f01@q4dd2@p? q4dd2@p?) (set! q4f00@q4dcf@q4dc7 q4dcf@q4dc7) (set! q4eff@q4dcd@q4dc8 q4dcd@q4dc8) (set! q4efe@q4dcb@q4dc6 q4dcb@q4dc6) (set! q4efd@q4dc3@&i/o-file-does-not-exist-rcd q4dc3@&i/o-file-does-not-exist-rcd) (set! q4efc@q4dc1@&i/o-file-does-not-exist-rtd q4dc1@&i/o-file-does-not-exist-rtd) (set! q4efb@q4dbf@i/o-file-does-not-exist-error? q4dbf@i/o-file-does-not-exist-error?) (set! q4efa@q4dbd@make-i/o-file-does-not-exist-error q4dbd@make-i/o-file-does-not-exist-error) (set! q4ef9@q4dbb@p? q4dbb@p?) (set! q4ef8@q4db8@q4db0 q4db8@q4db0) (set! q4ef7@q4db6@q4db1 q4db6@q4db1) (set! q4ef6@q4db4@q4daf q4db4@q4daf) (set! q4ef5@q4dae@&i/o-file-already-exists-rcd q4dae@&i/o-file-already-exists-rcd) (set! q4ef4@q4dac@&i/o-file-already-exists-rtd q4dac@&i/o-file-already-exists-rtd) (set! q4ef3@q4daa@i/o-file-already-exists-error? q4daa@i/o-file-already-exists-error?) (set! q4ef2@q4da8@make-i/o-file-already-exists-error q4da8@make-i/o-file-already-exists-error) (set! q4ef1@q4da6@p? q4da6@p?) (set! q4ef0@q4da3@q4d9b q4da3@q4d9b) (set! q4eef@q4da1@q4d9c q4da1@q4d9c) (set! q4eee@q4d9f@q4d9a q4d9f@q4d9a) (set! q4eed@q4d99@&i/o-file-is-read-only-rcd q4d99@&i/o-file-is-read-only-rcd) (set! q4eec@q4d97@&i/o-file-is-read-only-rtd q4d97@&i/o-file-is-read-only-rtd) (set! q4eeb@q4d95@i/o-file-is-read-only-error? q4d95@i/o-file-is-read-only-error?) (set! q4eea@q4d93@make-i/o-file-is-read-only-error q4d93@make-i/o-file-is-read-only-error) (set! q4ee9@q4d91@p? q4d91@p?) (set! q4ee8@q4d8e@q4d86 q4d8e@q4d86) (set! q4ee7@q4d8c@q4d87 q4d8c@q4d87) (set! q4ee6@q4d8a@q4d85 q4d8a@q4d85) (set! q4ee5@q4d84@&i/o-file-protection-rcd q4d84@&i/o-file-protection-rcd) (set! q4ee4@q4d82@&i/o-file-protection-rtd q4d82@&i/o-file-protection-rtd) (set! q4ee3@q4d80@i/o-file-protection-error? q4d80@i/o-file-protection-error?) (set! q4ee2@q4d7e@make-i/o-file-protection-error q4d7e@make-i/o-file-protection-error) (set! q4ee1@q4d7c@p? q4d7c@p?) (set! q4ee0@q4d79@q4d71 q4d79@q4d71) (set! q4edf@q4d77@q4d72 q4d77@q4d72) (set! q4ede@q4d75@q4d70 q4d75@q4d70) (set! q4edd@q4d6f@&i/o-filename-rcd q4d6f@&i/o-filename-rcd) (set! q4edc@q4d6d@&i/o-filename-rtd q4d6d@&i/o-filename-rtd) (set! q4edb@q4d6b@i/o-error-filename q4d6b@i/o-error-filename) (set! q4eda@q4d69@i/o-filename-error? q4d69@i/o-filename-error?) (set! q4ed9@q4d67@q4d56 q4d67@q4d56) (set! q4ed8@q4d65@make-i/o-filename-error q4d65@make-i/o-filename-error) (set! q4ed7@q4d63@p? q4d63@p?) (set! q4ed6@q4d60@q4d58 q4d60@q4d58) (set! q4ed5@q4d5e@q4d59 q4d5e@q4d59) (set! q4ed4@q4d5c@q4d57 q4d5c@q4d57) (set! q4ed3@q4d54@&i/o-invalid-position-rcd q4d54@&i/o-invalid-position-rcd) (set! q4ed2@q4d52@&i/o-invalid-position-rtd q4d52@&i/o-invalid-position-rtd) (set! q4ed1@q4d50@i/o-error-position q4d50@i/o-error-position) (set! q4ed0@q4d4e@i/o-invalid-position-error? q4d4e@i/o-invalid-position-error?) (set! q4ecf@q4d4c@q4d3b q4d4c@q4d3b) (set! q4ece@q4d4a@make-i/o-invalid-position-error q4d4a@make-i/o-invalid-position-error) (set! q4ecd@q4d48@p? q4d48@p?) (set! q4ecc@q4d45@q4d3d q4d45@q4d3d) (set! q4ecb@q4d43@q4d3e q4d43@q4d3e) (set! q4eca@q4d41@q4d3c q4d41@q4d3c) (set! q4ec9@q4d39@&i/o-write-rcd q4d39@&i/o-write-rcd) (set! q4ec8@q4d37@&i/o-write-rtd q4d37@&i/o-write-rtd) (set! q4ec7@q4d35@i/o-write-error? q4d35@i/o-write-error?) (set! q4ec6@q4d33@make-i/o-write-error q4d33@make-i/o-write-error) (set! q4ec5@q4d31@p? q4d31@p?) (set! q4ec4@q4d2e@q4d26 q4d2e@q4d26) (set! q4ec3@q4d2c@q4d27 q4d2c@q4d27) (set! q4ec2@q4d2a@q4d25 q4d2a@q4d25) (set! q4ec1@q4d24@&i/o-read-rcd q4d24@&i/o-read-rcd) (set! q4ec0@q4d22@&i/o-read-rtd q4d22@&i/o-read-rtd) (set! q4ebf@q4d20@i/o-read-error? q4d20@i/o-read-error?) (set! q4ebe@q4d1e@make-i/o-read-error q4d1e@make-i/o-read-error) (set! q4ebd@q4d1c@p? q4d1c@p?) (set! q4ebc@q4d19@q4d11 q4d19@q4d11) (set! q4ebb@q4d17@q4d12 q4d17@q4d12) (set! q4eba@q4d15@q4d10 q4d15@q4d10) (set! q4eb9@q4d0f@&i/o-rcd q4d0f@&i/o-rcd) (set! q4eb8@q4d0d@&i/o-rtd q4d0d@&i/o-rtd) (set! q4eb7@q4d0b@i/o-error? q4d0b@i/o-error?) (set! q4eb6@q4d09@make-i/o-error q4d09@make-i/o-error) (set! q4eb5@q4d07@p? q4d07@p?) (set! q4eb4@q4d04@q4cfc q4d04@q4cfc) (set! q4eb3@q4d02@q4cfd q4d02@q4cfd) (set! q4eb2@q4d00@q4cfb q4d00@q4cfb) (set! q4eb1@q4cfa@&undefined-rcd q4cfa@&undefined-rcd) (set! q4eb0@q4cf8@&undefined-rtd q4cf8@&undefined-rtd) (set! q4eaf@q4cf6@undefined-violation? q4cf6@undefined-violation?) (set! q4eae@q4cf4@make-undefined-violation q4cf4@make-undefined-violation) (set! q4ead@q4cf2@p? q4cf2@p?) (set! q4eac@q4cef@q4ce7 q4cef@q4ce7) (set! q4eab@q4ced@q4ce8 q4ced@q4ce8) (set! q4eaa@q4ceb@q4ce6 q4ceb@q4ce6) (set! q4ea9@q4ce5@&syntax-rcd q4ce5@&syntax-rcd) (set! q4ea8@q4ce3@&syntax-rtd q4ce3@&syntax-rtd) (set! q4ea7@q4ce1@syntax-violation-subform q4ce1@syntax-violation-subform) (set! q4ea6@q4cdf@syntax-violation-form q4cdf@syntax-violation-form) (set! q4ea5@q4cdd@syntax-violation? q4cdd@syntax-violation?) (set! q4ea4@q4cdb@q4cc8 q4cdb@q4cc8) (set! q4ea3@q4cd9@q4cc6 q4cd9@q4cc6) (set! q4ea2@q4cd7@make-syntax-violation q4cd7@make-syntax-violation) (set! q4ea1@q4cd5@p? q4cd5@p?) (set! q4ea0@q4cd2@q4cca q4cd2@q4cca) (set! q4e9f@q4cd0@q4ccb q4cd0@q4ccb) (set! q4e9e@q4cce@q4cc9 q4cce@q4cc9) (set! q4e9d@q4cc4@&lexical-rcd q4cc4@&lexical-rcd) (set! q4e9c@q4cc2@&lexical-rtd q4cc2@&lexical-rtd) (set! q4e9b@q4cc0@lexical-violation? q4cc0@lexical-violation?) (set! q4e9a@q4cbe@make-lexical-violation q4cbe@make-lexical-violation) (set! q4e99@q4cbc@p? q4cbc@p?) (set! q4e98@q4cb9@q4cb1 q4cb9@q4cb1) (set! q4e97@q4cb7@q4cb2 q4cb7@q4cb2) (set! q4e96@q4cb5@q4cb0 q4cb5@q4cb0) (set! q4e95@q4caf@&implementation-restriction-rcd q4caf@&implementation-restriction-rcd) (set! q4e94@q4cad@&implementation-restriction-rtd q4cad@&implementation-restriction-rtd) (set! q4e93@q4cab@implementation-restriction-violation? q4cab@implementation-restriction-violation?) (set! q4e92@q4ca9@make-implementation-restriction-violation q4ca9@make-implementation-restriction-violation) (set! q4e91@q4ca7@p? q4ca7@p?) (set! q4e90@q4ca4@q4c9c q4ca4@q4c9c) (set! q4e8f@q4ca2@q4c9d q4ca2@q4c9d) (set! q4e8e@q4ca0@q4c9b q4ca0@q4c9b) (set! q4e8d@q4c9a@&non-continuable-rcd q4c9a@&non-continuable-rcd) (set! q4e8c@q4c98@&non-continuable-rtd q4c98@&non-continuable-rtd) (set! q4e8b@q4c96@non-continuable-violation? q4c96@non-continuable-violation?) (set! q4e8a@q4c94@make-non-continuable-violation q4c94@make-non-continuable-violation) (set! q4e89@q4c92@p? q4c92@p?) (set! q4e88@q4c8f@q4c87 q4c8f@q4c87) (set! q4e87@q4c8d@q4c88 q4c8d@q4c88) (set! q4e86@q4c8b@q4c86 q4c8b@q4c86) (set! q4e85@q4c85@&who-rcd q4c85@&who-rcd) (set! q4e84@q4c83@&who-rtd q4c83@&who-rtd) (set! q4e83@q4c81@condition-who q4c81@condition-who) (set! q4e82@q4c7f@who-condition? q4c7f@who-condition?) (set! q4e81@q4c7d@q4c6c q4c7d@q4c6c) (set! q4e80@q4c7b@make-who-condition q4c7b@make-who-condition) (set! q4e7f@q4c79@p? q4c79@p?) (set! q4e7e@q4c76@q4c6e q4c76@q4c6e) (set! q4e7d@q4c74@q4c6f q4c74@q4c6f) (set! q4e7c@q4c72@q4c6d q4c72@q4c6d) (set! q4e7b@q4c6a@&irritants-rcd q4c6a@&irritants-rcd) (set! q4e7a@q4c68@&irritants-rtd q4c68@&irritants-rtd) (set! q4e79@q4c66@condition-irritants q4c66@condition-irritants) (set! q4e78@q4c64@irritants-condition? q4c64@irritants-condition?) (set! q4e77@q4c62@q4c51 q4c62@q4c51) (set! q4e76@q4c60@make-irritants-condition q4c60@make-irritants-condition) (set! q4e75@q4c5e@p? q4c5e@p?) (set! q4e74@q4c5b@q4c53 q4c5b@q4c53) (set! q4e73@q4c59@q4c54 q4c59@q4c54) (set! q4e72@q4c57@q4c52 q4c57@q4c52) (set! q4e71@q4c4f@&assertion-rcd q4c4f@&assertion-rcd) (set! q4e70@q4c4d@&assertion-rtd q4c4d@&assertion-rtd) (set! q4e6f@q4c4b@assertion-violation? q4c4b@assertion-violation?) (set! q4e6e@q4c49@make-assertion-violation q4c49@make-assertion-violation) (set! q4e6d@q4c47@p? q4c47@p?) (set! q4e6c@q4c44@q4c3c q4c44@q4c3c) (set! q4e6b@q4c42@q4c3d q4c42@q4c3d) (set! q4e6a@q4c40@q4c3b q4c40@q4c3b) (set! q4e69@q4c3a@&violation-rcd q4c3a@&violation-rcd) (set! q4e68@q4c38@&violation-rtd q4c38@&violation-rtd) (set! q4e67@q4c36@violation? q4c36@violation?) (set! q4e66@q4c34@make-violation q4c34@make-violation) (set! q4e65@q4c32@p? q4c32@p?) (set! q4e64@q4c2f@q4c27 q4c2f@q4c27) (set! q4e63@q4c2d@q4c28 q4c2d@q4c28) (set! q4e62@q4c2b@q4c26 q4c2b@q4c26) (set! q4e61@q4c25@&error-rcd q4c25@&error-rcd) (set! q4e60@q4c23@&error-rtd q4c23@&error-rtd) (set! q4e5f@q4c21@error? q4c21@error?) (set! q4e5e@q4c1f@make-error q4c1f@make-error) (set! q4e5d@q4c1d@p? q4c1d@p?) (set! q4e5c@q4c1a@q4c12 q4c1a@q4c12) (set! q4e5b@q4c18@q4c13 q4c18@q4c13) (set! q4e5a@q4c16@q4c11 q4c16@q4c11) (set! q4e59@q4c10@&serious-rcd q4c10@&serious-rcd) (set! q4e58@q4c0e@&serious-rtd q4c0e@&serious-rtd) (set! q4e57@q4c0c@serious-condition? q4c0c@serious-condition?) (set! q4e56@q4c0a@make-serious-condition q4c0a@make-serious-condition) (set! q4e55@q4c08@p? q4c08@p?) (set! q4e54@q4c05@q4bfd q4c05@q4bfd) (set! q4e53@q4c03@q4bfe q4c03@q4bfe) (set! q4e52@q4c01@q4bfc q4c01@q4bfc) (set! q4e51@q4bfb@&warning-rcd q4bfb@&warning-rcd) (set! q4e50@q4bf9@&warning-rtd q4bf9@&warning-rtd) (set! q4e4f@q4bf7@warning? q4bf7@warning?) (set! q4e4e@q4bf5@make-warning q4bf5@make-warning) (set! q4e4d@q4bf3@p? q4bf3@p?) (set! q4e4c@q4bf0@q4be8 q4bf0@q4be8) (set! q4e4b@q4bee@q4be9 q4bee@q4be9) (set! q4e4a@q4bec@q4be7 q4bec@q4be7) (set! q4e49@q4be6@&message-rcd q4be6@&message-rcd) (set! q4e48@q4be4@&message-rtd q4be4@&message-rtd) (set! q4e47@q4be2@condition-message q4be2@condition-message) (set! q4e46@q4be0@message-condition? q4be0@message-condition?) (set! q4e45@q4bde@q4bcd q4bde@q4bcd) (set! q4e44@q4bdc@make-message-condition q4bdc@make-message-condition) (set! q4e43@q4bda@p? q4bda@p?) (set! q4e42@q4bd7@q4bcf q4bd7@q4bcf) (set! q4e41@q4bd5@q4bd0 q4bd5@q4bd0) (set! q4e40@q4bd3@q4bce q4bd3@q4bce) (set! q4e3f@q4b87@&condition-rcd q4b87@&condition-rcd) (set! q4e3e@q4b85@&condition-rtd q4b85@&condition-rtd) (set! q4e3d@q4b83@make-&condition q4b83@make-&condition) (set! q4e3c@q4b81@&condition? q4b81@&condition?) (set! q4e3b@q4b7e@q4b76 q4b7e@q4b76) (set! q4e3a@q4b7c@q4b77 q4b7c@q4b77) (set! q4e39@q4b7a@q4b75 q4b7a@q4b75)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (q29e7@q299c@current-primitive-locations (lambda (q53a8@x) ((lambda (q53aa@t) (if q53aa@t (cdr q53aa@t) '#f)) (assq q53a8@x '((&no-nans-rcd . q4f29@q4e38@&no-nans-rcd) (&no-nans-rtd . q4f28@q4e36@&no-nans-rtd) (&no-infinities-rcd . q4f21@q4e23@&no-infinities-rcd) (&no-infinities-rtd . q4f20@q4e21@&no-infinities-rtd) (&i/o-encoding-rcd . q4f19@q4e0e@&i/o-encoding-rcd) (&i/o-encoding-rtd . q4f18@q4e0c@&i/o-encoding-rtd) (&i/o-decoding-rcd . q4f0f@q4df3@&i/o-decoding-rcd) (&i/o-decoding-rtd . q4f0e@q4df1@&i/o-decoding-rtd) (&i/o-port-rcd . q4f07@q4dde@&i/o-port-rcd) (&i/o-port-rtd . q4f06@q4ddc@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . q4efd@q4dc3@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . q4efc@q4dc1@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . q4ef5@q4dae@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . q4ef4@q4dac@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . q4eed@q4d99@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . q4eec@q4d97@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . q4ee5@q4d84@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . q4ee4@q4d82@&i/o-file-protection-rtd) (&i/o-filename-rcd . q4edd@q4d6f@&i/o-filename-rcd) (&i/o-filename-rtd . q4edc@q4d6d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . q4ed3@q4d54@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . q4ed2@q4d52@&i/o-invalid-position-rtd) (&i/o-write-rcd . q4ec9@q4d39@&i/o-write-rcd) (&i/o-write-rtd . q4ec8@q4d37@&i/o-write-rtd) (&i/o-read-rcd . q4ec1@q4d24@&i/o-read-rcd) (&i/o-read-rtd . q4ec0@q4d22@&i/o-read-rtd) (&i/o-rcd . q4eb9@q4d0f@&i/o-rcd) (&i/o-rtd . q4eb8@q4d0d@&i/o-rtd) (&undefined-rcd . q4eb1@q4cfa@&undefined-rcd) (&undefined-rtd . q4eb0@q4cf8@&undefined-rtd) (&syntax-rcd . q4ea9@q4ce5@&syntax-rcd) (&syntax-rtd . q4ea8@q4ce3@&syntax-rtd) (&lexical-rcd . q4e9d@q4cc4@&lexical-rcd) (&lexical-rtd . q4e9c@q4cc2@&lexical-rtd) (&implementation-restriction-rcd . q4e95@q4caf@&implementation-restriction-rcd) (&implementation-restriction-rtd . q4e94@q4cad@&implementation-restriction-rtd) (&non-continuable-rcd . q4e8d@q4c9a@&non-continuable-rcd) (&non-continuable-rtd . q4e8c@q4c98@&non-continuable-rtd) (&who-rcd . q4e85@q4c85@&who-rcd) (&who-rtd . q4e84@q4c83@&who-rtd) (&irritants-rcd . q4e7b@q4c6a@&irritants-rcd) (&irritants-rtd . q4e7a@q4c68@&irritants-rtd) (&assertion-rcd . q4e71@q4c4f@&assertion-rcd) (&assertion-rtd . q4e70@q4c4d@&assertion-rtd) (&violation-rcd . q4e69@q4c3a@&violation-rcd) (&violation-rtd . q4e68@q4c38@&violation-rtd) (&error-rcd . q4e61@q4c25@&error-rcd) (&error-rtd . q4e60@q4c23@&error-rtd) (&serious-rcd . q4e59@q4c10@&serious-rcd) (&serious-rtd . q4e58@q4c0e@&serious-rtd) (&warning-rcd . q4e51@q4bfb@&warning-rcd) (&warning-rtd . q4e50@q4bf9@&warning-rtd) (&message-rcd . q4e49@q4be6@&message-rcd) (&message-rtd . q4e48@q4be4@&message-rtd) (&condition-rcd . q4e3f@q4b87@&condition-rcd) (&condition-rtd . q4e3e@q4b85@&condition-rtd) (syntax-error . q4b67@q30fe@syntax-error) (syntax-dispatch . q4b02@q3034@syntax-dispatch) (load . q505a@q4f45@load) (interaction-environment . q4b6f@q310e@interaction-environment) (library-path . q2c53@q2a84@library-path) (make-parameter . q2995@q2891@make-parameter) (make-variable-transformer . q4ac0@q2e61@make-variable-transformer) (identifier? . q4b6a@q3104@identifier?) (generate-temporaries . q4b60@q30f0@generate-temporaries) (free-identifier=? . q4b61@q30f2@free-identifier=?) (syntax->datum . q4b6c@q3108@syntax->datum) (datum->syntax . q4b6b@q3106@datum->syntax) (bound-identifier=? . q4b62@q30f4@bound-identifier=?) (make-i/o-write-error . q4ec6@q4d33@make-i/o-write-error) (make-i/o-read-error . q4ebe@q4d1e@make-i/o-read-error) (make-i/o-port-error . q4f02@q4dd4@make-i/o-port-error) (make-i/o-invalid-position-error . q4ece@q4d4a@make-i/o-invalid-position-error) (make-i/o-filename-error . q4ed8@q4d65@make-i/o-filename-error) (make-i/o-file-protection-error . q4ee2@q4d7e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . q4eea@q4d93@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . q4efa@q4dbd@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . q4ef2@q4da8@make-i/o-file-already-exists-error) (make-i/o-error . q4eb6@q4d09@make-i/o-error) (make-i/o-encoding-error . q4f14@q4e04@make-i/o-encoding-error) (make-i/o-decoding-error . q4f0c@q4ded@make-i/o-decoding-error) (i/o-write-error? . q4ec7@q4d35@i/o-write-error?) (i/o-read-error? . q4ebf@q4d20@i/o-read-error?) (i/o-port-error? . q4f04@q4dd8@i/o-port-error?) (i/o-invalid-position-error? . q4ed0@q4d4e@i/o-invalid-position-error?) (i/o-filename-error? . q4eda@q4d69@i/o-filename-error?) (i/o-file-protection-error? . q4ee3@q4d80@i/o-file-protection-error?) (i/o-file-is-read-only-error? . q4eeb@q4d95@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . q4efb@q4dbf@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . q4ef3@q4daa@i/o-file-already-exists-error?) (i/o-error? . q4eb7@q4d0b@i/o-error?) (i/o-error-position . q4ed1@q4d50@i/o-error-position) (i/o-error-port . q4f05@q4dda@i/o-error-port) (i/o-error-filename . q4edb@q4d6b@i/o-error-filename) (i/o-encoding-error? . q4f16@q4e08@i/o-encoding-error?) (i/o-encoding-error-char . q4f17@q4e0a@i/o-encoding-error-char) (i/o-decoding-error? . q4f0d@q4def@i/o-decoding-error?) (scheme-report-environment . q4b57@q30de@scheme-report-environment) (null-environment . q4b56@q30dc@null-environment) (command-line . q5057@q4f3f@command-line) (eval . q4b59@q30e2@eval) (environment . q4b55@q30da@environment) (who-condition? . q4e82@q4c7f@who-condition?) (warning? . q4e4f@q4bf7@warning?) (violation? . q4e67@q4c36@violation?) (undefined-violation? . q4eaf@q4cf6@undefined-violation?) (syntax-violation? . q4ea5@q4cdd@syntax-violation?) (syntax-violation-subform . q4ea7@q4ce1@syntax-violation-subform) (syntax-violation-form . q4ea6@q4cdf@syntax-violation-form) (syntax-violation . q4b69@q3102@syntax-violation) (serious-condition? . q4e57@q4c0c@serious-condition?) (non-continuable-violation? . q4e8b@q4c96@non-continuable-violation?) (message-condition? . q4e46@q4be0@message-condition?) (make-who-condition . q4e80@q4c7b@make-who-condition) (make-warning . q4e4e@q4bf5@make-warning) (make-violation . q4e66@q4c34@make-violation) (make-undefined-violation . q4eae@q4cf4@make-undefined-violation) (make-syntax-violation . q4ea2@q4cd7@make-syntax-violation) (make-serious-condition . q4e56@q4c0a@make-serious-condition) (make-non-continuable-violation . q4e8a@q4c94@make-non-continuable-violation) (make-message-condition . q4e44@q4bdc@make-message-condition) (make-lexical-violation . q4e9a@q4cbe@make-lexical-violation) (make-irritants-condition . q4e76@q4c60@make-irritants-condition) (make-implementation-restriction-violation . q4e92@q4ca9@make-implementation-restriction-violation) (make-error . q4e5e@q4c1f@make-error) (make-assertion-violation . q4e6e@q4c49@make-assertion-violation) (lexical-violation? . q4e9b@q4cc0@lexical-violation?) (irritants-condition? . q4e78@q4c64@irritants-condition?) (implementation-restriction-violation? . q4e93@q4cab@implementation-restriction-violation?) (error? . q4e5f@q4c21@error?) (condition-who . q4e83@q4c81@condition-who) (condition-message . q4e47@q4be2@condition-message) (condition-irritants . q4e79@q4c66@condition-irritants) (assertion-violation? . q4e6f@q4c4b@assertion-violation?) (no-nans-violation? . q4f27@q4e34@no-nans-violation?) (no-infinities-violation? . q4f1f@q4e1f@no-infinities-violation?) (make-no-nans-violation . q4f26@q4e32@make-no-nans-violation) (make-no-infinities-violation . q4f1e@q4e1d@make-no-infinities-violation) (assertion-error . q4b66@q30fc@assertion-error)))))) (q2c63@q2aa4@install-library 'q5385 '(mosh interaction) '() '() '() '() '((regexp? . q537d) (alist->eq-hash-table . q537a) (format . q5377) (string-split . q536c) (call-process . q5366) (set-current-directory! . q5362) (expand-path . q5361) (current-directory . q5360) (%spawn . q535f) (%waitpid . q535e) (simple-struct-name . q535d) (simple-struct-set! . q535c) (simple-struct-ref . q535b) (make-simple-struct . q535a) (simple-struct? . q5359) (pointer-ref-c-int64 . q5358) (pointer-ref-c-int32 . q5357) (pointer-ref-c-int16 . q5356) (pointer-ref-c-int8 . q5355) (pointer-ref-c-uint64 . q5354) (pointer-ref-c-uint32 . q5353) (pointer-ref-c-uint16 . q5352) (pointer-ref-c-uint8 . q5351) (pointer-set-c-uint64! . q5350) (pointer-set-c-uint32! . q534f) (pointer-set-c-uint16! . q534e) (pointer-set-c-uint8! . q534d) (pointer-set-c-int64! . q534c) (pointer-set-c-int32! . q534b) (pointer-set-c-int16! . q534a) (pointer-set-c-int8! . q5349) (pointer-set-c-pointer! . q5348) (pointer-set-c-double! . q5347) (pointer-set-c-float! . q5346) (pointer-set-c-long-long! . q5345) (pointer-set-c-long! . q5344) (pointer-set-c-int! . q5343) (pointer-set-c-short! . q5342) (pointer-set-c-char! . q5341) (pointer-ref-c-pointer . q5340) (pointer-ref-c-double . q533f) (pointer-ref-c-float . q533e) (pointer-ref-c-unsigned-long-long . q533d) (pointer-ref-c-signed-long-long . q533c) (pointer-ref-c-unsigned-long . q533b) (pointer-ref-c-signed-long . q533a) (pointer-ref-c-unsigned-int . q5339) (pointer-ref-c-signed-int . q5338) (pointer-ref-c-unsigned-short . q5337) (pointer-ref-c-signed-short . q5336) (pointer-ref-c-unsigned-char . q5335) (pointer-ref-c-signed-char . q5334) (pointer->integer . q5333) (integer->pointer . q5332) (pointer? . q5331) (shared-errno . q5330) (%ffi-supported? . q532f) (%ffi-pointer->string . q532e) (%ffi-call->string-or-zero . q532d) (%ffi-call->double . q532c) (%ffi-call->void* . q532b) (%ffi-call->void . q532a) (%ffi-call->char . q5329) (%ffi-call->int . q5328) (%ffi-lookup . q5327) (%ffi-open . q5326) (%fork . q5325) (%pipe . q5324) (p . q5323) (whereis . q530a) (register . q5309) (vm-join! . q5308) (vm-set-value! . q5307) (vm? . q5306) (main-vm? . q5305) (vm-eval . q5304) (vm-self . q5303) (vm-start! . q5302) (make-vm . q5301) (mutex-try-lock! . q5300) (mutex-unlock! . q52ff) (mutex-lock! . q52fe) (mutex? . q52fd) (make-mutex . q52fc) (condition-variable-notify-all! . q52fb) (condition-variable-notify! . q52fa) (condition-variable-wait! . q52f9) (make-condition-variable . q52f8) (string-upcase . q52e1) (string-titlecase . q52e0) (string-normalize-nfkd . q52df) (string-normalize-nfkc . q52de) (string-normalize-nfd . q52dd) (string-normalize-nfc . q52dc) (string-foldcase . q52db) (string-downcase . q52da) (string-ci>? . q52d9) (string-ci>=? . q52d8) (string-ci=? . q52d7) (string-ci<? . q52d6) (string-ci<=? . q52d5) (char-whitespace? . q52d4) (char-upper-case? . q52d3) (char-title-case? . q52d2) (char-numeric? . q52d1) (char-lower-case? . q52d0) (char-general-category . q52cf) (char-upcase . q52ce) (char-titlecase . q52cd) (char-foldcase . q52cc) (char-downcase . q52cb) (char-ci>? . q52ca) (char-ci>=? . q52c9) (char-ci=? . q52c8) (char-ci<? . q52c7) (char-ci<=? . q52c6) (char-alphabetic? . q52c5) (make-variable-transformer . q2e60) (identifier? . q3103) (generate-temporaries . q30ef) (free-identifier=? . q30f1) (syntax->datum . q3107) (datum->syntax . q3105) (bound-identifier=? . q30f3) (record-type-descriptor? . q52c4) (record-predicate . q52c3) (record-mutator . q52c2) (record-constructor . q52c1) (record-accessor . q52c0) (make-record-type-descriptor . q52bf) (make-record-constructor-descriptor . q52be) (record? . q52bd) (record-type-uid . q52bc) (record-type-sealed? . q52bb) (record-type-parent . q52ba) (record-type-opaque? . q52b9) (record-type-name . q52b8) (record-type-generative? . q52b7) (record-type-field-names . q52b6) (record-rtd . q52b5) (record-field-mutable? . q52b4) (delete-file . q52b3) (file-exists? . q52b2) (vector-sort! . q52b1) (vector-sort . q52b0) (list-sort . q52af) (symbol-hash . q52ae) (string-ci-hash . q52ad) (string-hash . q52ac) (equal-hash . q52ab) (hashtable-equivalence-function . q52aa) (make-hashtable . q52a9) (hashtable-hash-function . q52a8) (make-eqv-hashtable . q52a7) (make-eq-hashtable . q52a6) (hashtable? . q52a5) (hashtable-update! . q52a4) (hashtable-size . q52a3) (hashtable-set! . q52a2) (hashtable-ref . q52a1) (hashtable-mutable? . q52a0) (hashtable-keys . q529f) (hashtable-entries . q529e) (hashtable-delete! . q529d) (hashtable-copy . q529c) (hashtable-contains? . q529b) (hashtable-clear! . q529a) (call-with-output-file . q5299) (call-with-input-file . q5298) (write-char . q5297) (write . q5296) (with-output-to-file . q5295) (with-input-from-file . q5294) (read-char . q5293) (read . q5292) (peek-char . q5291) (open-output-file . q5290) (open-input-file . q528f) (newline . q528e) (display . q528d) (close-output-port . q528c) (close-input-port . q528b) (eof-object? . q528a) (eof-object . q5289) (current-error-port . q5288) (current-output-port . q5287) (current-input-port . q5286) (output-port? . q5285) (input-port? . q5284) (utf-8-codec . q5283) (utf-16-codec . q5282) (transcoder-error-handling-mode . q5281) (transcoder-eol-style . q5280) (transcoder-codec . q527f) (transcoded-port . q527e) (textual-port? . q527d) (string->bytevector . q527c) (standard-output-port . q527b) (standard-input-port . q527a) (standard-error-port . q5279) (set-port-position! . q5278) (put-u8 . q5277) (put-string . q5276) (put-datum . q5275) (put-char . q5274) (put-bytevector . q5273) (port? . q5272) (port-transcoder . q5271) (port-position . q5270) (port-has-set-port-position!? . q526f) (port-has-port-position? . q526e) (port-eof? . q526d) (output-port-buffer-mode . q526c) (open-string-output-port . q526b) (open-string-input-port . q526a) (open-file-output-port . q5269) (open-file-input/output-port . q5268) (open-file-input-port . q5267) (open-bytevector-output-port . q5266) (open-bytevector-input-port . q5265) (native-transcoder . q5264) (native-eol-style . q5263) (make-transcoder . q5262) (latin-1-codec . q5261) (make-i/o-write-error . q4d32) (make-i/o-read-error . q4d1d) (make-i/o-port-error . q4dd3) (make-i/o-invalid-position-error . q4d49) (make-i/o-filename-error . q4d64) (make-i/o-file-protection-error . q4d7d) (make-i/o-file-is-read-only-error . q4d92) (make-i/o-file-does-not-exist-error . q4dbc) (make-i/o-file-already-exists-error . q4da7) (make-i/o-error . q4d08) (make-i/o-encoding-error . q4e03) (make-i/o-decoding-error . q4dec) (make-custom-textual-output-port . q5260) (make-custom-textual-input/output-port . q525f) (make-custom-textual-input-port . q525e) (make-custom-binary-output-port . q525d) (make-custom-binary-input/output-port . q525c) (make-custom-binary-input-port . q525b) (make-bytevector . q525a) (lookahead-u8 . q5259) (lookahead-char . q5258) (i/o-write-error? . q4d34) (i/o-read-error? . q4d1f) (i/o-port-error? . q4dd7) (i/o-invalid-position-error? . q4d4d) (i/o-filename-error? . q4d68) (i/o-file-protection-error? . q4d7f) (i/o-file-is-read-only-error? . q4d94) (i/o-file-does-not-exist-error? . q4dbe) (i/o-file-already-exists-error? . q4da9) (i/o-error? . q4d0a) (i/o-error-position . q4d4f) (i/o-error-port . q4dd9) (i/o-error-filename . q4d6a) (i/o-encoding-error? . q4e07) (i/o-encoding-error-char . q4e09) (i/o-decoding-error? . q4dee) (get-u8 . q5257) (get-string-n! . q5256) (get-string-n . q5255) (get-string-all . q5254) (get-line . q5253) (get-datum . q5252) (get-char . q5251) (get-bytevector-some . q5250) (get-bytevector-n! . q524f) (get-bytevector-n . q524e) (get-bytevector-all . q524d) (flush-output-port . q524c) (close-port . q524b) (exit . q5243) (command-line . q4f3e) (string-fill! . q5242) (string-set! . q5241) (set-cdr! . q5240) (set-car! . q523f) (remove . q523e) (remv . q523d) (remp . q523c) (remq . q523b) (partition . q523a) (memv . q5239) (memq . q5238) (memp . q5237) (member . q5236) (exists . q5235) (for-all . q5234) (fold-right . q5233) (fold-left . q5232) (find . q5231) (filter . q5230) (cons* . q522f) (assv . q522e) (assq . q522d) (assp . q522c) (assoc . q522b) (call-with-string-output-port . q522a) (call-with-port . q5229) (call-with-bytevector-output-port . q5228) (bytevector->string . q5227) (buffer-mode? . q5226) (binary-port? . q5225) (with-exception-handler . q5224) (raise-continuable . q5223) (raise . q5222) (eval . q30e1) (environment . q30d9) (make-enumeration . q5221) (enum-set=? . q5220) (enum-set-universe . q521f) (enum-set-union . q521e) (enum-set-subset? . q521d) (enum-set-projection . q521c) (enum-set-member? . q521b) (enum-set-intersection . q521a) (enum-set-indexer . q5219) (enum-set-difference . q5218) (enum-set-constructor . q5217) (enum-set-complement . q5216) (enum-set->list . q5215) (who-condition? . q4c7e) (warning? . q4bf6) (violation? . q4c35) (undefined-violation? . q4cf5) (syntax-violation? . q4cdc) (syntax-violation-subform . q4ce0) (syntax-violation-form . q4cde) (syntax-violation . q3101) (simple-conditions . q5214) (serious-condition? . q4c0b) (non-continuable-violation? . q4c95) (message-condition? . q4bdf) (make-who-condition . q4c7a) (make-warning . q4bf4) (make-violation . q4c33) (make-undefined-violation . q4cf3) (make-syntax-violation . q4cd6) (make-serious-condition . q4c09) (make-non-continuable-violation . q4c93) (make-message-condition . q4bdb) (make-lexical-violation . q4cbd) (make-irritants-condition . q4c5f) (make-implementation-restriction-violation . q4ca8) (make-error . q4c1e) (make-assertion-violation . q4c48) (lexical-violation? . q4cbf) (irritants-condition? . q4c63) (implementation-restriction-violation? . q4caa) (error? . q4c20) (condition-who . q4c80) (condition-predicate . q5213) (condition-message . q4be1) (condition-irritants . q4c65) (condition-accessor . q5212) (condition . q5211) (assertion-violation? . q4c4a) (condition? . q5210) (utf32->string . q520f) (utf16->string . q520e) (utf8->string . q520d) (uint-list->bytevector . q520c) (u8-list->bytevector . q520b) (string->utf8 . q520a) (string->utf32 . q5209) (string->utf16 . q5208) (sint-list->bytevector . q5207) (native-endianness . q5206) (bytevector? . q5205) (bytevector=? . q5204) (bytevector-uint-set! . q5203) (bytevector-uint-ref . q5202) (bytevector-u8-set! . q5201) (bytevector-u8-ref . q5200) (bytevector-u64-set! . q51ff) (bytevector-u64-ref . q51fe) (bytevector-u64-native-set! . q51fd) (bytevector-u64-native-ref . q51fc) (bytevector-u32-set! . q51fb) (bytevector-u32-ref . q51fa) (bytevector-u32-native-set! . q51f9) (bytevector-u32-native-ref . q51f8) (bytevector-u16-set! . q51f7) (bytevector-u16-ref . q51f6) (bytevector-u16-native-set! . q51f5) (bytevector-u16-native-ref . q51f4) (bytevector-sint-set! . q51f3) (bytevector-sint-ref . q51f2) (bytevector-s8-set! . q51f1) (bytevector-s8-ref . q51f0) (bytevector-s64-set! . q51ef) (bytevector-s64-ref . q51ee) (bytevector-s64-native-set! . q51ed) (bytevector-s64-native-ref . q51ec) (bytevector-s32-set! . q51eb) (bytevector-s32-ref . q51ea) (bytevector-s32-native-set! . q51e9) (bytevector-s32-native-ref . q51e8) (bytevector-s16-set! . q51e7) (bytevector-s16-ref . q51e6) (bytevector-s16-native-set! . q51e5) (bytevector-s16-native-ref . q51e4) (bytevector-length . q51e3) (bytevector-ieee-single-ref . q51e2) (bytevector-ieee-single-set! . q51e1) (bytevector-ieee-single-native-set! . q51e0) (bytevector-ieee-single-native-ref . q51df) (bytevector-ieee-double-set! . q51de) (bytevector-ieee-double-ref . q51dd) (bytevector-ieee-double-native-set! . q51dc) (bytevector-ieee-double-native-ref . q51db) (bytevector-fill! . q51da) (bytevector-copy! . q51d9) (bytevector-copy . q51d8) (bytevector->uint-list . q51d7) (bytevector->u8-list . q51d6) (bytevector->sint-list . q51d5) (no-nans-violation? . q4e33) (no-infinities-violation? . q4e1e) (make-no-nans-violation . q4e31) (make-no-infinities-violation . q4e1c) (real->flonum . q51d4) (flzero? . q51d3) (fltruncate . q51d2) (fltan . q51d1) (flsqrt . q51d0) (flsin . q51cf) (flround . q51ce) (flpositive? . q51cd) (flonum? . q51cc) (flodd? . q51cb) (flnumerator . q51ca) (flnegative? . q51c9) (flnan? . q51c8) (flmod0 . q51c7) (flmod . q51c6) (flmin . q51c5) (flmax . q51c4) (fllog . q51c3) (flinteger? . q51c2) (flinfinite? . q51c1) (flfloor . q51c0) (flfinite? . q51bf) (flexpt . q51be) (flexp . q51bd) (fleven? . q51bc) (fldiv0-and-mod0 . q51bb) (fldiv0 . q51ba) (fldiv-and-mod . q51b9) (fldiv . q51b8) (fldenominator . q51b7) (flcos . q51b6) (flceiling . q51b5) (flatan . q51b4) (flasin . q51b3) (flacos . q51b2) (flabs . q51b1) (fl>? . q51b0) (fl>=? . q51af) (fl=? . q51ae) (fl<? . q51ad) (fl<=? . q51ac) (fl/ . q51ab) (fl- . q51aa) (fl+ . q51a9) (fl* . q51a8) (fixnum->flonum . q51a7) (fxzero? . q51a6) (fxxor . q51a5) (fxrotate-bit-field . q51a4) (fxreverse-bit-field . q51a3) (fxpositive? . q51a2) (fxodd? . q51a1) (fxnot . q51a0) (fxnegative? . q519f) (fxmod0 . q519e) (fxmod . q519d) (fxmin . q519c) (fxmax . q519b) (fxlength . q519a) (fxior . q5199) (fxif . q5198) (fxfirst-bit-set . q5197) (fxeven? . q5196) (fxdiv0-and-mod0 . q5195) (fxdiv0 . q5194) (fxdiv-and-mod . q5193) (fxdiv . q5192) (fxcopy-bit-field . q5191) (fxcopy-bit . q5190) (fxbit-set? . q518f) (fxbit-field . q518e) (fxbit-count . q518d) (fxarithmetic-shift-right . q518c) (fxarithmetic-shift-left . q518b) (fxarithmetic-shift . q518a) (fxand . q5189) (fx>? . q5188) (fx>=? . q5187) (fx=? . q5186) (fx<? . q5185) (fx<=? . q5184) (fx-/carry . q5183) (fx- . q5182) (fx+/carry . q5181) (fx+ . q5180) (fx*/carry . q517f) (fx* . q517e) (greatest-fixnum . q517d) (least-fixnum . q517c) (fixnum-width . q517b) (fixnum? . q517a) (bitwise-rotate-bit-field . q5179) (bitwise-reverse-bit-field . q5178) (bitwise-length . q5177) (bitwise-if . q5176) (bitwise-first-bit-set . q5175) (bitwise-copy-bit-field . q5174) (bitwise-copy-bit . q5173) (bitwise-bit-set? . q5172) (bitwise-bit-field . q5171) (bitwise-bit-count . q5170) (bitwise-xor . q516f) (bitwise-ior . q516e) (bitwise-and . q516d) (bitwise-not . q516c) (bitwise-arithmetic-shift-right . q516b) (bitwise-arithmetic-shift-left . q516a) (bitwise-arithmetic-shift . q5169) (zero? . q5168) (vector? . q5167) (vector-set! . q5166) (vector-ref . q5165) (vector-map . q5164) (vector-length . q5163) (vector-for-each . q5162) (vector-fill! . q5161) (vector->list . q5160) (vector . q515f) (values . q515e) (truncate . q515d) (tan . q515c) (symbol? . q515b) (symbol=? . q515a) (symbol->string . q5159) (substring . q5158) (string? . q5157) (string>? . q5156) (string>=? . q5155) (string=? . q5154) (string<? . q5153) (string<=? . q5152) (string-ref . q5151) (string-length . q5150) (string-for-each . q514f) (string-copy . q514e) (string-append . q514d) (string->symbol . q514c) (string->number . q514b) (string->list . q514a) (string . q5149) (sqrt . q5148) (sin . q5147) (round . q5146) (reverse . q5145) (real? . q5144) (real-valued? . q5143) (real-part . q5142) (rationalize . q5141) (rational? . q5140) (rational-valued? . q513f) (procedure? . q513e) (positive? . q513d) (pair? . q513c) (odd? . q513b) (numerator . q513a) (number? . q5139) (number->string . q5138) (null? . q5137) (not . q5136) (negative? . q5135) (nan? . q5134) (min . q5133) (max . q5132) (map . q5131) (make-vector . q5130) (make-string . q512f) (make-rectangular . q512e) (make-polar . q512d) (magnitude . q512c) (log . q512b) (list? . q512a) (list-tail . q5129) (list-ref . q5128) (list->vector . q5127) (list->string . q5126) (list . q5125) (length . q5124) (lcm . q5123) (integer? . q5122) (integer-valued? . q5121) (integer->char . q5120) (infinite? . q511f) (inexact? . q511e) (inexact . q511d) (imag-part . q511c) (gcd . q511b) (for-each . q511a) (floor . q5119) (finite? . q5118) (expt . q5117) (exp . q5116) (exact? . q5115) (exact-integer-sqrt . q5114) (exact . q5113) (even? . q5112) (error . q5111) (eqv? . q5110) (equal? . q510f) (eq? . q510e) (dynamic-wind . q510d) (div0-and-mod0 . q510c) (mod0 . q510b) (div0 . q510a) (div-and-mod . q5109) (mod . q5108) (div . q5107) (denominator . q5106) (cos . q5105) (cons . q5104) (complex? . q5103) (char? . q5102) (char>? . q5101) (char>=? . q5100) (char=? . q50ff) (char<? . q50fe) (char<=? . q50fd) (char->integer . q50fc) (ceiling . q50fb) (call-with-values . q50fa) (call/cc . q50f9) (call-with-current-continuation . q50f8) (cddddr . q50f7) (cdddar . q50f6) (cddadr . q50f5) (cddaar . q50f4) (cdaddr . q50f3) (cdadar . q50f2) (cdaadr . q50f1) (cdaaar . q50f0) (cadddr . q50ef) (caddar . q50ee) (cadadr . q50ed) (cadaar . q50ec) (caaddr . q50eb) (caadar . q50ea) (caaadr . q50e9) (caaaar . q50e8) (cdddr . q50e7) (cddar . q50e6) (cdadr . q50e5) (cdaar . q50e4) (caddr . q50e3) (cadar . q50e2) (caadr . q50e1) (caaar . q50e0) (cddr . q50df) (cdar . q50de) (cadr . q50dd) (caar . q50dc) (cdr . q50db) (car . q50da) (boolean? . q50d9) (boolean=? . q50d8) (atan . q50d7) (assertion-violation . q50d6) (asin . q50d5) (apply . q50d4) (append . q50d3) (angle . q50d2) (acos . q50d1) (abs . q50d0) (/ . q50cf) (* . q50ce) (- . q50cd) (+ . q50cc) (>= . q50cb) (> . q50ca) (= . q50c9) (<= . q50c8) (< . q50c7) (library . q50c6) (&no-nans . q50c5) (&no-infinities . q50c4) (&i/o-encoding . q50c3) (&i/o-decoding . q50c2) (&i/o-port . q50c1) (&i/o-file-does-not-exist . q50c0) (&i/o-file-already-exists . q50bf) (&i/o-file-is-read-only . q50be) (&i/o-file-protection . q50bd) (&i/o-filename . q50bc) (&i/o-invalid-position . q50bb) (&i/o-write . q50ba) (&i/o-read . q50b9) (&i/o . q50b8) (&undefined . q50b7) (&syntax . q50b6) (&lexical . q50b5) (&implementation-restriction . q50b4) (&non-continuable . q50b3) (&who . q50b2) (&irritants . q50b1) (&assertion . q50b0) (&violation . q50af) (&error . q50ae) (&serious . q50ad) (&warning . q50ac) (&message . q50ab) (&condition . q50aa) (define-condition-type . q50a9) (define-enumeration . q50a8) (define-record-type . q50a7) (parent-rtd . q50a6) (nongenerative . q50a5) (opaque . q50a4) (sealed . q50a3) (protocol . q50a2) (parent . q50a1) (immutable . q50a0) (mutable . q509f) (fields . q509e) (error-handling-mode . q509d) (file-options . q509c) (buffer-mode . q509b) (eol-style . q509a) (guard . q5099) (unsyntax-splicing . q5096) (unsyntax . q5095) (unquote-splicing . q5094) (unquote . q5093) (_ . q5092) (else . q5091) (=> . q5090) (... . q508f) (assert . q508e) (endianness . q508d) (time . q508b) (do . q508a) (cond . q5089) (let* . q5088) (let . q5087) (let*-values . q5086) (let-values . q5085) (identifier-syntax . q5084) (with-syntax . q5083) (quasisyntax . q5082) (quasiquote . q5081) (syntax-rules . q5080) (include . q507f) (record-constructor-descriptor . q507d) (record-type-descriptor . q507c) (case . q507b) (unless . q5079) (when . q5078) (or . q5077) (and . q5076) (if . q5075) (letrec* . q5074) (letrec . q5073) (case-lambda . q5071) (lambda . q5070) (syntax . q506f) (syntax-case . q506e) (quote . q506d) (letrec-syntax . q506b) (let-syntax . q506a) (set! . q5069) (import . q5068) (begin . q5067) (define-syntax . q5065) (define . q5064)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5386 '(psyntax null-environment-5) '() '() '() '() '((make-promise . q5244) (unquote-splicing . q5094) (unquote . q5093) (_ . q5092) (else . q5091) (=> . q5090) (... . q508f) (delay . q508c) (do . q508a) (cond . q5089) (let* . q5088) (let . q5087) (quasiquote . q5081) (syntax-rules . q5080) (case . q507b) (or . q5077) (and . q5076) (if . q5075) (letrec . q5073) (lambda . q5070) (quote . q506d) (letrec-syntax . q506b) (let-syntax . q506a) (set! . q5069) (begin . q5067) (define-syntax . q5065) (define . q5064)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5387 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . q52d9) (string-ci>=? . q52d8) (string-ci=? . q52d7) (string-ci<? . q52d6) (string-ci<=? . q52d5) (char-whitespace? . q52d4) (char-upper-case? . q52d3) (char-numeric? . q52d1) (char-lower-case? . q52d0) (char-upcase . q52ce) (char-downcase . q52cb) (char-ci>? . q52ca) (char-ci>=? . q52c9) (char-ci=? . q52c8) (char-ci<? . q52c7) (char-ci<=? . q52c6) (char-alphabetic? . q52c5) (call-with-output-file . q5299) (call-with-input-file . q5298) (write-char . q5297) (write . q5296) (with-output-to-file . q5295) (with-input-from-file . q5294) (read-char . q5293) (read . q5292) (peek-char . q5291) (open-output-file . q5290) (open-input-file . q528f) (newline . q528e) (display . q528d) (close-output-port . q528c) (close-input-port . q528b) (eof-object . q5289) (current-output-port . q5287) (current-input-port . q5286) (output-port? . q5285) (input-port? . q5284) (scheme-report-environment . q30dd) (quotient . q524a) (null-environment . q30db) (remainder . q5249) (modulo . q5248) (inexact->exact . q5247) (force . q5246) (exact->inexact . q5245) (make-promise . q5244) (string-fill! . q5242) (string-set! . q5241) (set-cdr! . q5240) (set-car! . q523f) (memv . q5239) (memq . q5238) (member . q5236) (assv . q522e) (assq . q522d) (assoc . q522b) (eval . q30e1) (zero? . q5168) (vector? . q5167) (vector-set! . q5166) (vector-ref . q5165) (vector-length . q5163) (vector-fill! . q5161) (vector->list . q5160) (vector . q515f) (values . q515e) (truncate . q515d) (tan . q515c) (symbol? . q515b) (symbol->string . q5159) (substring . q5158) (string? . q5157) (string>? . q5156) (string>=? . q5155) (string=? . q5154) (string<? . q5153) (string<=? . q5152) (string-ref . q5151) (string-length . q5150) (string-copy . q514e) (string-append . q514d) (string->symbol . q514c) (string->number . q514b) (string->list . q514a) (string . q5149) (sqrt . q5148) (sin . q5147) (round . q5146) (reverse . q5145) (real? . q5144) (real-part . q5142) (rationalize . q5141) (rational? . q5140) (procedure? . q513e) (positive? . q513d) (pair? . q513c) (odd? . q513b) (numerator . q513a) (number? . q5139) (number->string . q5138) (not . q5136) (negative? . q5135) (min . q5133) (max . q5132) (map . q5131) (make-vector . q5130) (make-string . q512f) (make-rectangular . q512e) (make-polar . q512d) (magnitude . q512c) (log . q512b) (list? . q512a) (list-tail . q5129) (list-ref . q5128) (list->vector . q5127) (list->string . q5126) (list . q5125) (length . q5124) (lcm . q5123) (integer? . q5122) (integer->char . q5120) (inexact? . q511e) (imag-part . q511c) (gcd . q511b) (for-each . q511a) (floor . q5119) (expt . q5117) (exp . q5116) (exact? . q5115) (even? . q5112) (eqv? . q5110) (equal? . q510f) (eq? . q510e) (dynamic-wind . q510d) (denominator . q5106) (cos . q5105) (cons . q5104) (complex? . q5103) (char? . q5102) (char>? . q5101) (char>=? . q5100) (char=? . q50ff) (char<? . q50fe) (char<=? . q50fd) (char->integer . q50fc) (ceiling . q50fb) (call-with-values . q50fa) (call-with-current-continuation . q50f8) (cddddr . q50f7) (cdddar . q50f6) (cddadr . q50f5) (cddaar . q50f4) (cdaddr . q50f3) (cdadar . q50f2) (cdaadr . q50f1) (cdaaar . q50f0) (cadddr . q50ef) (caddar . q50ee) (cadadr . q50ed) (cadaar . q50ec) (caaddr . q50eb) (caadar . q50ea) (caaadr . q50e9) (caaaar . q50e8) (cdddr . q50e7) (cddar . q50e6) (cdadr . q50e5) (cdaar . q50e4) (caddr . q50e3) (cadar . q50e2) (caadr . q50e1) (caaar . q50e0) (cddr . q50df) (cdar . q50de) (cadr . q50dd) (caar . q50dc) (cdr . q50db) (car . q50da) (boolean? . q50d9) (atan . q50d7) (asin . q50d5) (apply . q50d4) (append . q50d3) (angle . q50d2) (acos . q50d1) (abs . q50d0) (/ . q50cf) (* . q50ce) (- . q50cd) (+ . q50cc) (>= . q50cb) (> . q50ca) (= . q50c9) (<= . q50c8) (< . q50c7) (unquote-splicing . q5094) (unquote . q5093) (else . q5091) (=> . q5090) (... . q508f) (delay . q508c) (do . q508a) (cond . q5089) (let* . q5088) (let . q5087) (quasiquote . q5081) (syntax-rules . q5080) (case . q507b) (or . q5077) (and . q5076) (if . q5075) (letrec . q5073) (lambda . q5070) (quote . q506d) (letrec-syntax . q506b) (let-syntax . q506a) (set! . q5069) (begin . q5067) (define-syntax . q5065) (define . q5064)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5388 '(psyntax modules) '() '() '() '() '((module . q5066)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5389 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q538a '(rnrs) '(6) '() '() '() '((regexp? . q537d) (string-upcase . q52e1) (string-titlecase . q52e0) (string-normalize-nfkd . q52df) (string-normalize-nfkc . q52de) (string-normalize-nfd . q52dd) (string-normalize-nfc . q52dc) (string-foldcase . q52db) (string-downcase . q52da) (string-ci>? . q52d9) (string-ci>=? . q52d8) (string-ci=? . q52d7) (string-ci<? . q52d6) (string-ci<=? . q52d5) (char-whitespace? . q52d4) (char-upper-case? . q52d3) (char-title-case? . q52d2) (char-numeric? . q52d1) (char-lower-case? . q52d0) (char-general-category . q52cf) (char-upcase . q52ce) (char-titlecase . q52cd) (char-foldcase . q52cc) (char-downcase . q52cb) (char-ci>? . q52ca) (char-ci>=? . q52c9) (char-ci=? . q52c8) (char-ci<? . q52c7) (char-ci<=? . q52c6) (char-alphabetic? . q52c5) (make-variable-transformer . q2e60) (identifier? . q3103) (generate-temporaries . q30ef) (free-identifier=? . q30f1) (syntax->datum . q3107) (datum->syntax . q3105) (bound-identifier=? . q30f3) (record-type-descriptor? . q52c4) (record-predicate . q52c3) (record-mutator . q52c2) (record-constructor . q52c1) (record-accessor . q52c0) (make-record-type-descriptor . q52bf) (make-record-constructor-descriptor . q52be) (record? . q52bd) (record-type-uid . q52bc) (record-type-sealed? . q52bb) (record-type-parent . q52ba) (record-type-opaque? . q52b9) (record-type-name . q52b8) (record-type-generative? . q52b7) (record-type-field-names . q52b6) (record-rtd . q52b5) (record-field-mutable? . q52b4) (delete-file . q52b3) (file-exists? . q52b2) (vector-sort! . q52b1) (vector-sort . q52b0) (list-sort . q52af) (symbol-hash . q52ae) (string-ci-hash . q52ad) (string-hash . q52ac) (equal-hash . q52ab) (hashtable-equivalence-function . q52aa) (make-hashtable . q52a9) (hashtable-hash-function . q52a8) (make-eqv-hashtable . q52a7) (make-eq-hashtable . q52a6) (hashtable? . q52a5) (hashtable-update! . q52a4) (hashtable-size . q52a3) (hashtable-set! . q52a2) (hashtable-ref . q52a1) (hashtable-mutable? . q52a0) (hashtable-keys . q529f) (hashtable-entries . q529e) (hashtable-delete! . q529d) (hashtable-copy . q529c) (hashtable-contains? . q529b) (hashtable-clear! . q529a) (call-with-output-file . q5299) (call-with-input-file . q5298) (write-char . q5297) (write . q5296) (with-output-to-file . q5295) (with-input-from-file . q5294) (read-char . q5293) (read . q5292) (peek-char . q5291) (open-output-file . q5290) (open-input-file . q528f) (newline . q528e) (display . q528d) (close-output-port . q528c) (close-input-port . q528b) (eof-object? . q528a) (eof-object . q5289) (current-error-port . q5288) (current-output-port . q5287) (current-input-port . q5286) (output-port? . q5285) (input-port? . q5284) (utf-8-codec . q5283) (utf-16-codec . q5282) (transcoder-error-handling-mode . q5281) (transcoder-eol-style . q5280) (transcoder-codec . q527f) (transcoded-port . q527e) (textual-port? . q527d) (string->bytevector . q527c) (standard-output-port . q527b) (standard-input-port . q527a) (standard-error-port . q5279) (set-port-position! . q5278) (put-u8 . q5277) (put-string . q5276) (put-datum . q5275) (put-char . q5274) (put-bytevector . q5273) (port? . q5272) (port-transcoder . q5271) (port-position . q5270) (port-has-set-port-position!? . q526f) (port-has-port-position? . q526e) (port-eof? . q526d) (output-port-buffer-mode . q526c) (open-string-output-port . q526b) (open-string-input-port . q526a) (open-file-output-port . q5269) (open-file-input/output-port . q5268) (open-file-input-port . q5267) (open-bytevector-output-port . q5266) (open-bytevector-input-port . q5265) (native-transcoder . q5264) (native-eol-style . q5263) (make-transcoder . q5262) (latin-1-codec . q5261) (make-i/o-write-error . q4d32) (make-i/o-read-error . q4d1d) (make-i/o-port-error . q4dd3) (make-i/o-invalid-position-error . q4d49) (make-i/o-filename-error . q4d64) (make-i/o-file-protection-error . q4d7d) (make-i/o-file-is-read-only-error . q4d92) (make-i/o-file-does-not-exist-error . q4dbc) (make-i/o-file-already-exists-error . q4da7) (make-i/o-error . q4d08) (make-i/o-encoding-error . q4e03) (make-i/o-decoding-error . q4dec) (make-custom-textual-output-port . q5260) (make-custom-textual-input/output-port . q525f) (make-custom-textual-input-port . q525e) (make-custom-binary-output-port . q525d) (make-custom-binary-input/output-port . q525c) (make-custom-binary-input-port . q525b) (make-bytevector . q525a) (lookahead-u8 . q5259) (lookahead-char . q5258) (i/o-write-error? . q4d34) (i/o-read-error? . q4d1f) (i/o-port-error? . q4dd7) (i/o-invalid-position-error? . q4d4d) (i/o-filename-error? . q4d68) (i/o-file-protection-error? . q4d7f) (i/o-file-is-read-only-error? . q4d94) (i/o-file-does-not-exist-error? . q4dbe) (i/o-file-already-exists-error? . q4da9) (i/o-error? . q4d0a) (i/o-error-position . q4d4f) (i/o-error-port . q4dd9) (i/o-error-filename . q4d6a) (i/o-encoding-error? . q4e07) (i/o-encoding-error-char . q4e09) (i/o-decoding-error? . q4dee) (get-u8 . q5257) (get-string-n! . q5256) (get-string-n . q5255) (get-string-all . q5254) (get-line . q5253) (get-datum . q5252) (get-char . q5251) (get-bytevector-some . q5250) (get-bytevector-n! . q524f) (get-bytevector-n . q524e) (get-bytevector-all . q524d) (flush-output-port . q524c) (close-port . q524b) (exit . q5243) (command-line . q4f3e) (remove . q523e) (remv . q523d) (remp . q523c) (remq . q523b) (partition . q523a) (memv . q5239) (memq . q5238) (memp . q5237) (member . q5236) (exists . q5235) (for-all . q5234) (fold-right . q5233) (fold-left . q5232) (find . q5231) (filter . q5230) (cons* . q522f) (assv . q522e) (assq . q522d) (assp . q522c) (assoc . q522b) (call-with-string-output-port . q522a) (call-with-port . q5229) (call-with-bytevector-output-port . q5228) (bytevector->string . q5227) (buffer-mode? . q5226) (binary-port? . q5225) (with-exception-handler . q5224) (raise-continuable . q5223) (raise . q5222) (make-enumeration . q5221) (enum-set=? . q5220) (enum-set-universe . q521f) (enum-set-union . q521e) (enum-set-subset? . q521d) (enum-set-projection . q521c) (enum-set-member? . q521b) (enum-set-intersection . q521a) (enum-set-indexer . q5219) (enum-set-difference . q5218) (enum-set-constructor . q5217) (enum-set-complement . q5216) (enum-set->list . q5215) (who-condition? . q4c7e) (warning? . q4bf6) (violation? . q4c35) (undefined-violation? . q4cf5) (syntax-violation? . q4cdc) (syntax-violation-subform . q4ce0) (syntax-violation-form . q4cde) (syntax-violation . q3101) (simple-conditions . q5214) (serious-condition? . q4c0b) (non-continuable-violation? . q4c95) (message-condition? . q4bdf) (make-who-condition . q4c7a) (make-warning . q4bf4) (make-violation . q4c33) (make-undefined-violation . q4cf3) (make-syntax-violation . q4cd6) (make-serious-condition . q4c09) (make-non-continuable-violation . q4c93) (make-message-condition . q4bdb) (make-lexical-violation . q4cbd) (make-irritants-condition . q4c5f) (make-implementation-restriction-violation . q4ca8) (make-error . q4c1e) (make-assertion-violation . q4c48) (lexical-violation? . q4cbf) (irritants-condition? . q4c63) (implementation-restriction-violation? . q4caa) (error? . q4c20) (condition-who . q4c80) (condition-predicate . q5213) (condition-message . q4be1) (condition-irritants . q4c65) (condition-accessor . q5212) (condition . q5211) (assertion-violation? . q4c4a) (condition? . q5210) (utf32->string . q520f) (utf16->string . q520e) (utf8->string . q520d) (uint-list->bytevector . q520c) (u8-list->bytevector . q520b) (string->utf8 . q520a) (string->utf32 . q5209) (string->utf16 . q5208) (sint-list->bytevector . q5207) (native-endianness . q5206) (bytevector? . q5205) (bytevector=? . q5204) (bytevector-uint-set! . q5203) (bytevector-uint-ref . q5202) (bytevector-u8-set! . q5201) (bytevector-u8-ref . q5200) (bytevector-u64-set! . q51ff) (bytevector-u64-ref . q51fe) (bytevector-u64-native-set! . q51fd) (bytevector-u64-native-ref . q51fc) (bytevector-u32-set! . q51fb) (bytevector-u32-ref . q51fa) (bytevector-u32-native-set! . q51f9) (bytevector-u32-native-ref . q51f8) (bytevector-u16-set! . q51f7) (bytevector-u16-ref . q51f6) (bytevector-u16-native-set! . q51f5) (bytevector-u16-native-ref . q51f4) (bytevector-sint-set! . q51f3) (bytevector-sint-ref . q51f2) (bytevector-s8-set! . q51f1) (bytevector-s8-ref . q51f0) (bytevector-s64-set! . q51ef) (bytevector-s64-ref . q51ee) (bytevector-s64-native-set! . q51ed) (bytevector-s64-native-ref . q51ec) (bytevector-s32-set! . q51eb) (bytevector-s32-ref . q51ea) (bytevector-s32-native-set! . q51e9) (bytevector-s32-native-ref . q51e8) (bytevector-s16-set! . q51e7) (bytevector-s16-ref . q51e6) (bytevector-s16-native-set! . q51e5) (bytevector-s16-native-ref . q51e4) (bytevector-length . q51e3) (bytevector-ieee-single-ref . q51e2) (bytevector-ieee-single-set! . q51e1) (bytevector-ieee-single-native-set! . q51e0) (bytevector-ieee-single-native-ref . q51df) (bytevector-ieee-double-set! . q51de) (bytevector-ieee-double-ref . q51dd) (bytevector-ieee-double-native-set! . q51dc) (bytevector-ieee-double-native-ref . q51db) (bytevector-fill! . q51da) (bytevector-copy! . q51d9) (bytevector-copy . q51d8) (bytevector->uint-list . q51d7) (bytevector->u8-list . q51d6) (bytevector->sint-list . q51d5) (no-nans-violation? . q4e33) (no-infinities-violation? . q4e1e) (make-no-nans-violation . q4e31) (make-no-infinities-violation . q4e1c) (real->flonum . q51d4) (flzero? . q51d3) (fltruncate . q51d2) (fltan . q51d1) (flsqrt . q51d0) (flsin . q51cf) (flround . q51ce) (flpositive? . q51cd) (flonum? . q51cc) (flodd? . q51cb) (flnumerator . q51ca) (flnegative? . q51c9) (flnan? . q51c8) (flmod0 . q51c7) (flmod . q51c6) (flmin . q51c5) (flmax . q51c4) (fllog . q51c3) (flinteger? . q51c2) (flinfinite? . q51c1) (flfloor . q51c0) (flfinite? . q51bf) (flexpt . q51be) (flexp . q51bd) (fleven? . q51bc) (fldiv0-and-mod0 . q51bb) (fldiv0 . q51ba) (fldiv-and-mod . q51b9) (fldiv . q51b8) (fldenominator . q51b7) (flcos . q51b6) (flceiling . q51b5) (flatan . q51b4) (flasin . q51b3) (flacos . q51b2) (flabs . q51b1) (fl>? . q51b0) (fl>=? . q51af) (fl=? . q51ae) (fl<? . q51ad) (fl<=? . q51ac) (fl/ . q51ab) (fl- . q51aa) (fl+ . q51a9) (fl* . q51a8) (fixnum->flonum . q51a7) (fxzero? . q51a6) (fxxor . q51a5) (fxrotate-bit-field . q51a4) (fxreverse-bit-field . q51a3) (fxpositive? . q51a2) (fxodd? . q51a1) (fxnot . q51a0) (fxnegative? . q519f) (fxmod0 . q519e) (fxmod . q519d) (fxmin . q519c) (fxmax . q519b) (fxlength . q519a) (fxior . q5199) (fxif . q5198) (fxfirst-bit-set . q5197) (fxeven? . q5196) (fxdiv0-and-mod0 . q5195) (fxdiv0 . q5194) (fxdiv-and-mod . q5193) (fxdiv . q5192) (fxcopy-bit-field . q5191) (fxcopy-bit . q5190) (fxbit-set? . q518f) (fxbit-field . q518e) (fxbit-count . q518d) (fxarithmetic-shift-right . q518c) (fxarithmetic-shift-left . q518b) (fxarithmetic-shift . q518a) (fxand . q5189) (fx>? . q5188) (fx>=? . q5187) (fx=? . q5186) (fx<? . q5185) (fx<=? . q5184) (fx-/carry . q5183) (fx- . q5182) (fx+/carry . q5181) (fx+ . q5180) (fx*/carry . q517f) (fx* . q517e) (greatest-fixnum . q517d) (least-fixnum . q517c) (fixnum-width . q517b) (fixnum? . q517a) (bitwise-rotate-bit-field . q5179) (bitwise-reverse-bit-field . q5178) (bitwise-length . q5177) (bitwise-if . q5176) (bitwise-first-bit-set . q5175) (bitwise-copy-bit-field . q5174) (bitwise-copy-bit . q5173) (bitwise-bit-set? . q5172) (bitwise-bit-field . q5171) (bitwise-bit-count . q5170) (bitwise-xor . q516f) (bitwise-ior . q516e) (bitwise-and . q516d) (bitwise-not . q516c) (bitwise-arithmetic-shift-right . q516b) (bitwise-arithmetic-shift-left . q516a) (bitwise-arithmetic-shift . q5169) (zero? . q5168) (vector? . q5167) (vector-set! . q5166) (vector-ref . q5165) (vector-map . q5164) (vector-length . q5163) (vector-for-each . q5162) (vector-fill! . q5161) (vector->list . q5160) (vector . q515f) (values . q515e) (truncate . q515d) (tan . q515c) (symbol? . q515b) (symbol=? . q515a) (symbol->string . q5159) (substring . q5158) (string? . q5157) (string>? . q5156) (string>=? . q5155) (string=? . q5154) (string<? . q5153) (string<=? . q5152) (string-ref . q5151) (string-length . q5150) (string-for-each . q514f) (string-copy . q514e) (string-append . q514d) (string->symbol . q514c) (string->number . q514b) (string->list . q514a) (string . q5149) (sqrt . q5148) (sin . q5147) (round . q5146) (reverse . q5145) (real? . q5144) (real-valued? . q5143) (real-part . q5142) (rationalize . q5141) (rational? . q5140) (rational-valued? . q513f) (procedure? . q513e) (positive? . q513d) (pair? . q513c) (odd? . q513b) (numerator . q513a) (number? . q5139) (number->string . q5138) (null? . q5137) (not . q5136) (negative? . q5135) (nan? . q5134) (min . q5133) (max . q5132) (map . q5131) (make-vector . q5130) (make-string . q512f) (make-rectangular . q512e) (make-polar . q512d) (magnitude . q512c) (log . q512b) (list? . q512a) (list-tail . q5129) (list-ref . q5128) (list->vector . q5127) (list->string . q5126) (list . q5125) (length . q5124) (lcm . q5123) (integer? . q5122) (integer-valued? . q5121) (integer->char . q5120) (infinite? . q511f) (inexact? . q511e) (inexact . q511d) (imag-part . q511c) (gcd . q511b) (for-each . q511a) (floor . q5119) (finite? . q5118) (expt . q5117) (exp . q5116) (exact? . q5115) (exact-integer-sqrt . q5114) (exact . q5113) (even? . q5112) (error . q5111) (eqv? . q5110) (equal? . q510f) (eq? . q510e) (dynamic-wind . q510d) (div0-and-mod0 . q510c) (mod0 . q510b) (div0 . q510a) (div-and-mod . q5109) (mod . q5108) (div . q5107) (denominator . q5106) (cos . q5105) (cons . q5104) (complex? . q5103) (char? . q5102) (char>? . q5101) (char>=? . q5100) (char=? . q50ff) (char<? . q50fe) (char<=? . q50fd) (char->integer . q50fc) (ceiling . q50fb) (call-with-values . q50fa) (call/cc . q50f9) (call-with-current-continuation . q50f8) (cddddr . q50f7) (cdddar . q50f6) (cddadr . q50f5) (cddaar . q50f4) (cdaddr . q50f3) (cdadar . q50f2) (cdaadr . q50f1) (cdaaar . q50f0) (cadddr . q50ef) (caddar . q50ee) (cadadr . q50ed) (cadaar . q50ec) (caaddr . q50eb) (caadar . q50ea) (caaadr . q50e9) (caaaar . q50e8) (cdddr . q50e7) (cddar . q50e6) (cdadr . q50e5) (cdaar . q50e4) (caddr . q50e3) (cadar . q50e2) (caadr . q50e1) (caaar . q50e0) (cddr . q50df) (cdar . q50de) (cadr . q50dd) (caar . q50dc) (cdr . q50db) (car . q50da) (boolean? . q50d9) (boolean=? . q50d8) (atan . q50d7) (assertion-violation . q50d6) (asin . q50d5) (apply . q50d4) (append . q50d3) (angle . q50d2) (acos . q50d1) (abs . q50d0) (/ . q50cf) (* . q50ce) (- . q50cd) (+ . q50cc) (>= . q50cb) (> . q50ca) (= . q50c9) (<= . q50c8) (< . q50c7) (&no-nans . q50c5) (&no-infinities . q50c4) (&i/o-encoding . q50c3) (&i/o-decoding . q50c2) (&i/o-port . q50c1) (&i/o-file-does-not-exist . q50c0) (&i/o-file-already-exists . q50bf) (&i/o-file-is-read-only . q50be) (&i/o-file-protection . q50bd) (&i/o-filename . q50bc) (&i/o-invalid-position . q50bb) (&i/o-write . q50ba) (&i/o-read . q50b9) (&i/o . q50b8) (&undefined . q50b7) (&syntax . q50b6) (&lexical . q50b5) (&implementation-restriction . q50b4) (&non-continuable . q50b3) (&who . q50b2) (&irritants . q50b1) (&assertion . q50b0) (&violation . q50af) (&error . q50ae) (&serious . q50ad) (&warning . q50ac) (&message . q50ab) (&condition . q50aa) (define-condition-type . q50a9) (define-enumeration . q50a8) (define-record-type . q50a7) (parent-rtd . q50a6) (nongenerative . q50a5) (opaque . q50a4) (sealed . q50a3) (protocol . q50a2) (parent . q50a1) (immutable . q50a0) (mutable . q509f) (fields . q509e) (error-handling-mode . q509d) (file-options . q509c) (buffer-mode . q509b) (eol-style . q509a) (guard . q5099) (unsyntax-splicing . q5096) (unsyntax . q5095) (unquote-splicing . q5094) (unquote . q5093) (_ . q5092) (else . q5091) (=> . q5090) (... . q508f) (assert . q508e) (endianness . q508d) (do . q508a) (cond . q5089) (let* . q5088) (let . q5087) (let*-values . q5086) (let-values . q5085) (identifier-syntax . q5084) (with-syntax . q5083) (quasisyntax . q5082) (quasiquote . q5081) (syntax-rules . q5080) (record-constructor-descriptor . q507d) (record-type-descriptor . q507c) (case . q507b) (unless . q5079) (when . q5078) (or . q5077) (and . q5076) (if . q5075) (letrec* . q5074) (letrec . q5073) (case-lambda . q5071) (lambda . q5070) (syntax . q506f) (syntax-case . q506e) (quote . q506d) (letrec-syntax . q506b) (let-syntax . q506a) (set! . q5069) (begin . q5067) (define-syntax . q5065) (define . q5064)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q538b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . q30dd) (quotient . q524a) (null-environment . q30db) (remainder . q5249) (modulo . q5248) (inexact->exact . q5247) (force . q5246) (exact->inexact . q5245) (make-promise . q5244) (delay . q508c)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q538c '(rnrs control) '(6) '() '() '() '((do . q508a) (unless . q5079) (when . q5078) (case-lambda . q5071)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q538d '(rnrs eval) '(6) '() '() '() '((eval . q30e1) (environment . q30d9)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q538e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . q5240) (set-car! . q523f)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q538f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . q5242) (string-set! . q5241)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5390 '(rnrs programs) '(6) '() '() '() '((exit . q5243) (command-line . q4f3e)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5391 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . q2e60) (identifier? . q3103) (generate-temporaries . q30ef) (free-identifier=? . q30f1) (syntax->datum . q3107) (datum->syntax . q3105) (bound-identifier=? . q30f3) (syntax-violation . q3101) (unsyntax-splicing . q5096) (unsyntax . q5095) (_ . q5092) (... . q508f) (with-syntax . q5083) (quasisyntax . q5082) (syntax . q506f) (syntax-case . q506e)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5392 '(rnrs files) '(6) '() '() '() '((delete-file . q52b3) (file-exists? . q52b2) (make-i/o-write-error . q4d32) (make-i/o-read-error . q4d1d) (make-i/o-port-error . q4dd3) (make-i/o-invalid-position-error . q4d49) (make-i/o-filename-error . q4d64) (make-i/o-file-protection-error . q4d7d) (make-i/o-file-is-read-only-error . q4d92) (make-i/o-file-does-not-exist-error . q4dbc) (make-i/o-file-already-exists-error . q4da7) (make-i/o-error . q4d08) (i/o-write-error? . q4d34) (i/o-read-error? . q4d1f) (i/o-port-error? . q4dd7) (i/o-invalid-position-error? . q4d4d) (i/o-filename-error? . q4d68) (i/o-file-protection-error? . q4d7f) (i/o-file-is-read-only-error? . q4d94) (i/o-file-does-not-exist-error? . q4dbe) (i/o-file-already-exists-error? . q4da9) (i/o-error? . q4d0a) (i/o-error-position . q4d4f) (i/o-error-port . q4dd9) (i/o-error-filename . q4d6a) (&i/o-port . q50c1) (&i/o-file-does-not-exist . q50c0) (&i/o-file-already-exists . q50bf) (&i/o-file-is-read-only . q50be) (&i/o-file-protection . q50bd) (&i/o-filename . q50bc) (&i/o-invalid-position . q50bb) (&i/o-write . q50ba) (&i/o-read . q50b9) (&i/o . q50b8)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5393 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . q52b1) (vector-sort . q52b0) (list-sort . q52af)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5394 '(rnrs base) '(6) '() '() '() '((zero? . q5168) (vector? . q5167) (vector-set! . q5166) (vector-ref . q5165) (vector-map . q5164) (vector-length . q5163) (vector-for-each . q5162) (vector-fill! . q5161) (vector->list . q5160) (vector . q515f) (values . q515e) (truncate . q515d) (tan . q515c) (symbol? . q515b) (symbol=? . q515a) (symbol->string . q5159) (substring . q5158) (string? . q5157) (string>? . q5156) (string>=? . q5155) (string=? . q5154) (string<? . q5153) (string<=? . q5152) (string-ref . q5151) (string-length . q5150) (string-for-each . q514f) (string-copy . q514e) (string-append . q514d) (string->symbol . q514c) (string->number . q514b) (string->list . q514a) (string . q5149) (sqrt . q5148) (sin . q5147) (round . q5146) (reverse . q5145) (real? . q5144) (real-valued? . q5143) (real-part . q5142) (rationalize . q5141) (rational? . q5140) (rational-valued? . q513f) (procedure? . q513e) (positive? . q513d) (pair? . q513c) (odd? . q513b) (numerator . q513a) (number? . q5139) (number->string . q5138) (null? . q5137) (not . q5136) (negative? . q5135) (nan? . q5134) (min . q5133) (max . q5132) (map . q5131) (make-vector . q5130) (make-string . q512f) (make-rectangular . q512e) (make-polar . q512d) (magnitude . q512c) (log . q512b) (list? . q512a) (list-tail . q5129) (list-ref . q5128) (list->vector . q5127) (list->string . q5126) (list . q5125) (length . q5124) (lcm . q5123) (integer? . q5122) (integer-valued? . q5121) (integer->char . q5120) (infinite? . q511f) (inexact? . q511e) (inexact . q511d) (imag-part . q511c) (gcd . q511b) (for-each . q511a) (floor . q5119) (finite? . q5118) (expt . q5117) (exp . q5116) (exact? . q5115) (exact-integer-sqrt . q5114) (exact . q5113) (even? . q5112) (error . q5111) (eqv? . q5110) (equal? . q510f) (eq? . q510e) (dynamic-wind . q510d) (div0-and-mod0 . q510c) (mod0 . q510b) (div0 . q510a) (div-and-mod . q5109) (mod . q5108) (div . q5107) (denominator . q5106) (cos . q5105) (cons . q5104) (complex? . q5103) (char? . q5102) (char>? . q5101) (char>=? . q5100) (char=? . q50ff) (char<? . q50fe) (char<=? . q50fd) (char->integer . q50fc) (ceiling . q50fb) (call-with-values . q50fa) (call/cc . q50f9) (call-with-current-continuation . q50f8) (cddddr . q50f7) (cdddar . q50f6) (cddadr . q50f5) (cddaar . q50f4) (cdaddr . q50f3) (cdadar . q50f2) (cdaadr . q50f1) (cdaaar . q50f0) (cadddr . q50ef) (caddar . q50ee) (cadadr . q50ed) (cadaar . q50ec) (caaddr . q50eb) (caadar . q50ea) (caaadr . q50e9) (caaaar . q50e8) (cdddr . q50e7) (cddar . q50e6) (cdadr . q50e5) (cdaar . q50e4) (caddr . q50e3) (cadar . q50e2) (caadr . q50e1) (caaar . q50e0) (cddr . q50df) (cdar . q50de) (cadr . q50dd) (caar . q50dc) (cdr . q50db) (car . q50da) (boolean? . q50d9) (boolean=? . q50d8) (atan . q50d7) (assertion-violation . q50d6) (asin . q50d5) (apply . q50d4) (append . q50d3) (angle . q50d2) (acos . q50d1) (abs . q50d0) (/ . q50cf) (* . q50ce) (- . q50cd) (+ . q50cc) (>= . q50cb) (> . q50ca) (= . q50c9) (<= . q50c8) (< . q50c7) (unquote-splicing . q5094) (unquote . q5093) (_ . q5092) (else . q5091) (=> . q5090) (... . q508f) (assert . q508e) (cond . q5089) (let* . q5088) (let . q5087) (let*-values . q5086) (let-values . q5085) (identifier-syntax . q5084) (quasiquote . q5081) (syntax-rules . q5080) (case . q507b) (or . q5077) (and . q5076) (if . q5075) (letrec* . q5074) (letrec . q5073) (lambda . q5070) (quote . q506d) (letrec-syntax . q506b) (let-syntax . q506a) (set! . q5069) (begin . q5067) (define-syntax . q5065) (define . q5064)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5395 '(rnrs lists) '(6) '() '() '() '((remove . q523e) (remv . q523d) (remp . q523c) (remq . q523b) (partition . q523a) (memv . q5239) (memq . q5238) (memp . q5237) (member . q5236) (exists . q5235) (for-all . q5234) (fold-right . q5233) (fold-left . q5232) (find . q5231) (filter . q5230) (cons* . q522f) (assv . q522e) (assq . q522d) (assp . q522c) (assoc . q522b)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5396 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . q5299) (call-with-input-file . q5298) (write-char . q5297) (write . q5296) (with-output-to-file . q5295) (with-input-from-file . q5294) (read-char . q5293) (read . q5292) (peek-char . q5291) (open-output-file . q5290) (open-input-file . q528f) (newline . q528e) (display . q528d) (close-output-port . q528c) (close-input-port . q528b) (eof-object? . q528a) (eof-object . q5289) (current-error-port . q5288) (current-output-port . q5287) (current-input-port . q5286) (output-port? . q5285) (input-port? . q5284) (make-i/o-write-error . q4d32) (make-i/o-read-error . q4d1d) (make-i/o-port-error . q4dd3) (make-i/o-invalid-position-error . q4d49) (make-i/o-filename-error . q4d64) (make-i/o-file-protection-error . q4d7d) (make-i/o-file-is-read-only-error . q4d92) (make-i/o-file-does-not-exist-error . q4dbc) (make-i/o-file-already-exists-error . q4da7) (make-i/o-error . q4d08) (i/o-write-error? . q4d34) (i/o-read-error? . q4d1f) (i/o-port-error? . q4dd7) (i/o-invalid-position-error? . q4d4d) (i/o-filename-error? . q4d68) (i/o-file-protection-error? . q4d7f) (i/o-file-is-read-only-error? . q4d94) (i/o-file-does-not-exist-error? . q4dbe) (i/o-file-already-exists-error? . q4da9) (i/o-error? . q4d0a) (i/o-error-position . q4d4f) (i/o-error-port . q4dd9) (i/o-error-filename . q4d6a) (&i/o-port . q50c1) (&i/o-file-does-not-exist . q50c0) (&i/o-file-already-exists . q50bf) (&i/o-file-is-read-only . q50be) (&i/o-file-protection . q50bd) (&i/o-filename . q50bc) (&i/o-invalid-position . q50bb) (&i/o-write . q50ba) (&i/o-read . q50b9) (&i/o . q50b8)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5397 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . q525a) (utf32->string . q520f) (utf16->string . q520e) (utf8->string . q520d) (uint-list->bytevector . q520c) (u8-list->bytevector . q520b) (string->utf8 . q520a) (string->utf32 . q5209) (string->utf16 . q5208) (sint-list->bytevector . q5207) (native-endianness . q5206) (bytevector? . q5205) (bytevector=? . q5204) (bytevector-uint-set! . q5203) (bytevector-uint-ref . q5202) (bytevector-u8-set! . q5201) (bytevector-u8-ref . q5200) (bytevector-u64-set! . q51ff) (bytevector-u64-ref . q51fe) (bytevector-u64-native-set! . q51fd) (bytevector-u64-native-ref . q51fc) (bytevector-u32-set! . q51fb) (bytevector-u32-ref . q51fa) (bytevector-u32-native-set! . q51f9) (bytevector-u32-native-ref . q51f8) (bytevector-u16-set! . q51f7) (bytevector-u16-ref . q51f6) (bytevector-u16-native-set! . q51f5) (bytevector-u16-native-ref . q51f4) (bytevector-sint-set! . q51f3) (bytevector-sint-ref . q51f2) (bytevector-s8-set! . q51f1) (bytevector-s8-ref . q51f0) (bytevector-s64-set! . q51ef) (bytevector-s64-ref . q51ee) (bytevector-s64-native-set! . q51ed) (bytevector-s64-native-ref . q51ec) (bytevector-s32-set! . q51eb) (bytevector-s32-ref . q51ea) (bytevector-s32-native-set! . q51e9) (bytevector-s32-native-ref . q51e8) (bytevector-s16-set! . q51e7) (bytevector-s16-ref . q51e6) (bytevector-s16-native-set! . q51e5) (bytevector-s16-native-ref . q51e4) (bytevector-length . q51e3) (bytevector-ieee-single-ref . q51e2) (bytevector-ieee-single-set! . q51e1) (bytevector-ieee-single-native-set! . q51e0) (bytevector-ieee-single-native-ref . q51df) (bytevector-ieee-double-set! . q51de) (bytevector-ieee-double-ref . q51dd) (bytevector-ieee-double-native-set! . q51dc) (bytevector-ieee-double-native-ref . q51db) (bytevector-fill! . q51da) (bytevector-copy! . q51d9) (bytevector-copy . q51d8) (bytevector->uint-list . q51d7) (bytevector->u8-list . q51d6) (bytevector->sint-list . q51d5) (endianness . q508d)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5398 '(rnrs unicode) '(6) '() '() '() '((string-upcase . q52e1) (string-titlecase . q52e0) (string-normalize-nfkd . q52df) (string-normalize-nfkc . q52de) (string-normalize-nfd . q52dd) (string-normalize-nfc . q52dc) (string-foldcase . q52db) (string-downcase . q52da) (string-ci>? . q52d9) (string-ci>=? . q52d8) (string-ci=? . q52d7) (string-ci<? . q52d6) (string-ci<=? . q52d5) (char-whitespace? . q52d4) (char-upper-case? . q52d3) (char-title-case? . q52d2) (char-numeric? . q52d1) (char-lower-case? . q52d0) (char-general-category . q52cf) (char-upcase . q52ce) (char-titlecase . q52cd) (char-foldcase . q52cc) (char-downcase . q52cb) (char-ci>? . q52ca) (char-ci>=? . q52c9) (char-ci=? . q52c8) (char-ci<? . q52c7) (char-ci<=? . q52c6) (char-alphabetic? . q52c5)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q5399 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . q5224) (raise-continuable . q5223) (raise . q5222) (guard . q5099) (else . q5091) (=> . q5090)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q539a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . q5179) (bitwise-reverse-bit-field . q5178) (bitwise-length . q5177) (bitwise-if . q5176) (bitwise-first-bit-set . q5175) (bitwise-copy-bit-field . q5174) (bitwise-copy-bit . q5173) (bitwise-bit-set? . q5172) (bitwise-bit-field . q5171) (bitwise-bit-count . q5170) (bitwise-xor . q516f) (bitwise-ior . q516e) (bitwise-and . q516d) (bitwise-not . q516c) (bitwise-arithmetic-shift-right . q516b) (bitwise-arithmetic-shift-left . q516a) (bitwise-arithmetic-shift . q5169)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q539b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . q51a6) (fxxor . q51a5) (fxrotate-bit-field . q51a4) (fxreverse-bit-field . q51a3) (fxpositive? . q51a2) (fxodd? . q51a1) (fxnot . q51a0) (fxnegative? . q519f) (fxmod0 . q519e) (fxmod . q519d) (fxmin . q519c) (fxmax . q519b) (fxlength . q519a) (fxior . q5199) (fxif . q5198) (fxfirst-bit-set . q5197) (fxeven? . q5196) (fxdiv0-and-mod0 . q5195) (fxdiv0 . q5194) (fxdiv-and-mod . q5193) (fxdiv . q5192) (fxcopy-bit-field . q5191) (fxcopy-bit . q5190) (fxbit-set? . q518f) (fxbit-field . q518e) (fxbit-count . q518d) (fxarithmetic-shift-right . q518c) (fxarithmetic-shift-left . q518b) (fxarithmetic-shift . q518a) (fxand . q5189) (fx>? . q5188) (fx>=? . q5187) (fx=? . q5186) (fx<? . q5185) (fx<=? . q5184) (fx-/carry . q5183) (fx- . q5182) (fx+/carry . q5181) (fx+ . q5180) (fx*/carry . q517f) (fx* . q517e) (greatest-fixnum . q517d) (least-fixnum . q517c) (fixnum-width . q517b) (fixnum? . q517a)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q539c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . q4e33) (no-infinities-violation? . q4e1e) (make-no-nans-violation . q4e31) (make-no-infinities-violation . q4e1c) (real->flonum . q51d4) (flzero? . q51d3) (fltruncate . q51d2) (fltan . q51d1) (flsqrt . q51d0) (flsin . q51cf) (flround . q51ce) (flpositive? . q51cd) (flonum? . q51cc) (flodd? . q51cb) (flnumerator . q51ca) (flnegative? . q51c9) (flnan? . q51c8) (flmod0 . q51c7) (flmod . q51c6) (flmin . q51c5) (flmax . q51c4) (fllog . q51c3) (flinteger? . q51c2) (flinfinite? . q51c1) (flfloor . q51c0) (flfinite? . q51bf) (flexpt . q51be) (flexp . q51bd) (fleven? . q51bc) (fldiv0-and-mod0 . q51bb) (fldiv0 . q51ba) (fldiv-and-mod . q51b9) (fldiv . q51b8) (fldenominator . q51b7) (flcos . q51b6) (flceiling . q51b5) (flatan . q51b4) (flasin . q51b3) (flacos . q51b2) (flabs . q51b1) (fl>? . q51b0) (fl>=? . q51af) (fl=? . q51ae) (fl<? . q51ad) (fl<=? . q51ac) (fl/ . q51ab) (fl- . q51aa) (fl+ . q51a9) (fl* . q51a8) (fixnum->flonum . q51a7) (&no-nans . q50c5) (&no-infinities . q50c4)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q539d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . q52ae) (string-ci-hash . q52ad) (string-hash . q52ac) (equal-hash . q52ab) (hashtable-equivalence-function . q52aa) (make-hashtable . q52a9) (hashtable-hash-function . q52a8) (make-eqv-hashtable . q52a7) (make-eq-hashtable . q52a6) (hashtable? . q52a5) (hashtable-update! . q52a4) (hashtable-size . q52a3) (hashtable-set! . q52a2) (hashtable-ref . q52a1) (hashtable-mutable? . q52a0) (hashtable-keys . q529f) (hashtable-entries . q529e) (hashtable-delete! . q529d) (hashtable-copy . q529c) (hashtable-contains? . q529b) (hashtable-clear! . q529a)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q539e '(rnrs io ports) '(6) '() '() '() '((eof-object? . q528a) (eof-object . q5289) (current-error-port . q5288) (current-output-port . q5287) (current-input-port . q5286) (output-port? . q5285) (input-port? . q5284) (utf-8-codec . q5283) (utf-16-codec . q5282) (transcoder-error-handling-mode . q5281) (transcoder-eol-style . q5280) (transcoder-codec . q527f) (transcoded-port . q527e) (textual-port? . q527d) (string->bytevector . q527c) (standard-output-port . q527b) (standard-input-port . q527a) (standard-error-port . q5279) (set-port-position! . q5278) (put-u8 . q5277) (put-string . q5276) (put-datum . q5275) (put-char . q5274) (put-bytevector . q5273) (port? . q5272) (port-transcoder . q5271) (port-position . q5270) (port-has-set-port-position!? . q526f) (port-has-port-position? . q526e) (port-eof? . q526d) (output-port-buffer-mode . q526c) (open-string-output-port . q526b) (open-string-input-port . q526a) (open-file-output-port . q5269) (open-file-input/output-port . q5268) (open-file-input-port . q5267) (open-bytevector-output-port . q5266) (open-bytevector-input-port . q5265) (native-transcoder . q5264) (native-eol-style . q5263) (make-transcoder . q5262) (latin-1-codec . q5261) (make-i/o-write-error . q4d32) (make-i/o-read-error . q4d1d) (make-i/o-port-error . q4dd3) (make-i/o-invalid-position-error . q4d49) (make-i/o-filename-error . q4d64) (make-i/o-file-protection-error . q4d7d) (make-i/o-file-is-read-only-error . q4d92) (make-i/o-file-does-not-exist-error . q4dbc) (make-i/o-file-already-exists-error . q4da7) (make-i/o-error . q4d08) (make-i/o-encoding-error . q4e03) (make-i/o-decoding-error . q4dec) (make-custom-textual-output-port . q5260) (make-custom-textual-input/output-port . q525f) (make-custom-textual-input-port . q525e) (make-custom-binary-output-port . q525d) (make-custom-binary-input/output-port . q525c) (make-custom-binary-input-port . q525b) (lookahead-u8 . q5259) (lookahead-char . q5258) (i/o-write-error? . q4d34) (i/o-read-error? . q4d1f) (i/o-port-error? . q4dd7) (i/o-invalid-position-error? . q4d4d) (i/o-filename-error? . q4d68) (i/o-file-protection-error? . q4d7f) (i/o-file-is-read-only-error? . q4d94) (i/o-file-does-not-exist-error? . q4dbe) (i/o-file-already-exists-error? . q4da9) (i/o-error? . q4d0a) (i/o-error-position . q4d4f) (i/o-error-port . q4dd9) (i/o-error-filename . q4d6a) (i/o-encoding-error? . q4e07) (i/o-encoding-error-char . q4e09) (i/o-decoding-error? . q4dee) (get-u8 . q5257) (get-string-n! . q5256) (get-string-n . q5255) (get-string-all . q5254) (get-line . q5253) (get-datum . q5252) (get-char . q5251) (get-bytevector-some . q5250) (get-bytevector-n! . q524f) (get-bytevector-n . q524e) (get-bytevector-all . q524d) (flush-output-port . q524c) (close-port . q524b) (call-with-string-output-port . q522a) (call-with-port . q5229) (call-with-bytevector-output-port . q5228) (bytevector->string . q5227) (buffer-mode? . q5226) (binary-port? . q5225) (&i/o-encoding . q50c3) (&i/o-decoding . q50c2) (&i/o-port . q50c1) (&i/o-file-does-not-exist . q50c0) (&i/o-file-already-exists . q50bf) (&i/o-file-is-read-only . q50be) (&i/o-file-protection . q50bd) (&i/o-filename . q50bc) (&i/o-invalid-position . q50bb) (&i/o-write . q50ba) (&i/o-read . q50b9) (&i/o . q50b8) (error-handling-mode . q509d) (file-options . q509c) (buffer-mode . q509b) (eol-style . q509a)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q539f '(rnrs enums) '(6) '() '() '() '((make-enumeration . q5221) (enum-set=? . q5220) (enum-set-universe . q521f) (enum-set-union . q521e) (enum-set-subset? . q521d) (enum-set-projection . q521c) (enum-set-member? . q521b) (enum-set-intersection . q521a) (enum-set-indexer . q5219) (enum-set-difference . q5218) (enum-set-constructor . q5217) (enum-set-complement . q5216) (enum-set->list . q5215) (define-enumeration . q50a8)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q53a0 '(rnrs conditions) '(6) '() '() '() '((who-condition? . q4c7e) (warning? . q4bf6) (violation? . q4c35) (undefined-violation? . q4cf5) (syntax-violation? . q4cdc) (syntax-violation-subform . q4ce0) (syntax-violation-form . q4cde) (syntax-violation . q3101) (simple-conditions . q5214) (serious-condition? . q4c0b) (non-continuable-violation? . q4c95) (message-condition? . q4bdf) (make-who-condition . q4c7a) (make-warning . q4bf4) (make-violation . q4c33) (make-undefined-violation . q4cf3) (make-syntax-violation . q4cd6) (make-serious-condition . q4c09) (make-non-continuable-violation . q4c93) (make-message-condition . q4bdb) (make-lexical-violation . q4cbd) (make-irritants-condition . q4c5f) (make-implementation-restriction-violation . q4ca8) (make-error . q4c1e) (make-assertion-violation . q4c48) (lexical-violation? . q4cbf) (irritants-condition? . q4c63) (implementation-restriction-violation? . q4caa) (error? . q4c20) (condition-who . q4c80) (condition-predicate . q5213) (condition-message . q4be1) (condition-irritants . q4c65) (condition-accessor . q5212) (condition . q5211) (assertion-violation? . q4c4a) (condition? . q5210) (&undefined . q50b7) (&syntax . q50b6) (&lexical . q50b5) (&implementation-restriction . q50b4) (&non-continuable . q50b3) (&who . q50b2) (&irritants . q50b1) (&assertion . q50b0) (&violation . q50af) (&error . q50ae) (&serious . q50ad) (&warning . q50ac) (&message . q50ab) (&condition . q50aa) (define-condition-type . q50a9)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q53a1 '(rnrs records inspection) '(6) '() '() '() '((record? . q52bd) (record-type-uid . q52bc) (record-type-sealed? . q52bb) (record-type-parent . q52ba) (record-type-opaque? . q52b9) (record-type-name . q52b8) (record-type-generative? . q52b7) (record-type-field-names . q52b6) (record-rtd . q52b5) (record-field-mutable? . q52b4)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q53a2 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . q52c4) (record-predicate . q52c3) (record-mutator . q52c2) (record-constructor . q52c1) (record-accessor . q52c0) (make-record-type-descriptor . q52bf) (make-record-constructor-descriptor . q52be)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q53a3 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . q50a7) (parent-rtd . q50a6) (nongenerative . q50a5) (opaque . q50a4) (sealed . q50a3) (protocol . q50a2) (parent . q50a1) (immutable . q50a0) (mutable . q509f) (fields . q509e) (record-constructor-descriptor . q507d) (record-type-descriptor . q507c)) '() values values '#f '#f '#t '#f) (q2c63@q2aa4@install-library 'q53a4 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . q4e37) (&no-nans-rtd . q4e35) (&no-infinities-rcd . q4e22) (&no-infinities-rtd . q4e20) (&i/o-encoding-rcd . q4e0d) (&i/o-encoding-rtd . q4e0b) (&i/o-decoding-rcd . q4df2) (&i/o-decoding-rtd . q4df0) (&i/o-port-rcd . q4ddd) (&i/o-port-rtd . q4ddb) (&i/o-file-does-not-exist-rcd . q4dc2) (&i/o-file-does-not-exist-rtd . q4dc0) (&i/o-file-already-exists-rcd . q4dad) (&i/o-file-already-exists-rtd . q4dab) (&i/o-file-is-read-only-rcd . q4d98) (&i/o-file-is-read-only-rtd . q4d96) (&i/o-file-protection-rcd . q4d83) (&i/o-file-protection-rtd . q4d81) (&i/o-filename-rcd . q4d6e) (&i/o-filename-rtd . q4d6c) (&i/o-invalid-position-rcd . q4d53) (&i/o-invalid-position-rtd . q4d51) (&i/o-write-rcd . q4d38) (&i/o-write-rtd . q4d36) (&i/o-read-rcd . q4d23) (&i/o-read-rtd . q4d21) (&i/o-rcd . q4d0e) (&i/o-rtd . q4d0c) (&undefined-rcd . q4cf9) (&undefined-rtd . q4cf7) (&syntax-rcd . q4ce4) (&syntax-rtd . q4ce2) (&lexical-rcd . q4cc3) (&lexical-rtd . q4cc1) (&implementation-restriction-rcd . q4cae) (&implementation-restriction-rtd . q4cac) (&non-continuable-rcd . q4c99) (&non-continuable-rtd . q4c97) (&who-rcd . q4c84) (&who-rtd . q4c82) (&irritants-rcd . q4c69) (&irritants-rtd . q4c67) (&assertion-rcd . q4c4e) (&assertion-rtd . q4c4c) (&violation-rcd . q4c39) (&violation-rtd . q4c37) (&error-rcd . q4c24) (&error-rtd . q4c22) (&serious-rcd . q4c0f) (&serious-rtd . q4c0d) (&warning-rcd . q4bfa) (&warning-rtd . q4bf8) (&message-rcd . q4be5) (&message-rtd . q4be3) (&condition-rcd . q4b86) (&condition-rtd . q4b84) (syntax-error . q30fd) (syntax-dispatch . q3033) (pretty-print . q5384) (eval-core . q5383) (set-symbol-value! . q5382) (symbol-value . q5381) (gensym . q5380) (void . q537f) (load . q4f44) (interaction-environment . q310d) (char-ready? . q537e) (regexp? . q537d) (read-line . q537c) (ungensym . q537b) (alist->eq-hash-table . q537a) (assoc-ref . q5379) (print . q5378) (format . q5377) (host-os . q5376) (library-path . q2a83) (standard-library-path . q5375) (file-newer? . q5374) (stat-mtime . q5373) (write-to-file . q5372) (file->list . q5371) (file->string . q5370) (digit->integer . q536f) (call-with-string-input-port . q536e) (call-with-string-io . q536d) (string-split . q536c) (bytevector-for-each . q536b) (string->regexp . q536a) (rxmatch . q5369) (regexp-replace-all . q5368) (hashtable-for-each . q5367) (call-process . q5366) (local-tz-offset . q5365) (microseconds . q5364) (directory-list . q5363) (set-current-directory! . q5362) (expand-path . q5361) (current-directory . q5360) (%spawn . q535f) (%waitpid . q535e) (simple-struct-name . q535d) (simple-struct-set! . q535c) (simple-struct-ref . q535b) (make-simple-struct . q535a) (simple-struct? . q5359) (pointer-ref-c-int64 . q5358) (pointer-ref-c-int32 . q5357) (pointer-ref-c-int16 . q5356) (pointer-ref-c-int8 . q5355) (pointer-ref-c-uint64 . q5354) (pointer-ref-c-uint32 . q5353) (pointer-ref-c-uint16 . q5352) (pointer-ref-c-uint8 . q5351) (pointer-set-c-uint64! . q5350) (pointer-set-c-uint32! . q534f) (pointer-set-c-uint16! . q534e) (pointer-set-c-uint8! . q534d) (pointer-set-c-int64! . q534c) (pointer-set-c-int32! . q534b) (pointer-set-c-int16! . q534a) (pointer-set-c-int8! . q5349) (pointer-set-c-pointer! . q5348) (pointer-set-c-double! . q5347) (pointer-set-c-float! . q5346) (pointer-set-c-long-long! . q5345) (pointer-set-c-long! . q5344) (pointer-set-c-int! . q5343) (pointer-set-c-short! . q5342) (pointer-set-c-char! . q5341) (pointer-ref-c-pointer . q5340) (pointer-ref-c-double . q533f) (pointer-ref-c-float . q533e) (pointer-ref-c-unsigned-long-long . q533d) (pointer-ref-c-signed-long-long . q533c) (pointer-ref-c-unsigned-long . q533b) (pointer-ref-c-signed-long . q533a) (pointer-ref-c-unsigned-int . q5339) (pointer-ref-c-signed-int . q5338) (pointer-ref-c-unsigned-short . q5337) (pointer-ref-c-signed-short . q5336) (pointer-ref-c-unsigned-char . q5335) (pointer-ref-c-signed-char . q5334) (pointer->integer . q5333) (integer->pointer . q5332) (pointer? . q5331) (shared-errno . q5330) (%ffi-supported? . q532f) (%ffi-pointer->string . q532e) (%ffi-call->string-or-zero . q532d) (%ffi-call->double . q532c) (%ffi-call->void* . q532b) (%ffi-call->void . q532a) (%ffi-call->char . q5329) (%ffi-call->int . q5328) (%ffi-lookup . q5327) (%ffi-open . q5326) (%fork . q5325) (%pipe . q5324) (p . q5323) (open-output-string . q5322) (get-output-string . q5321) (file-stat-ctime . q5320) (file-stat-atime . q531f) (file-stat-mtime . q531e) (file-size-in-bytes . q531d) (file-writable? . q531c) (file-executable? . q531b) (file-readable? . q531a) (file-regular? . q5319) (file-symbolic-link? . q5318) (file-directory? . q5317) (create-symbolic-link . q5316) (rename-file . q5315) (delete-directory . q5314) (create-directory . q5313) (get-environment-variables . q5312) (get-environment-variable . q5311) (id->real-label . q5310) (same-marks? . q530f) (same-marks*? . q530e) (get-timeofday . q530d) (get-command-line . q530c) (sys-display . q530b) (whereis . q530a) (register . q5309) (vm-join! . q5308) (vm-set-value! . q5307) (vm? . q5306) (main-vm? . q5305) (vm-eval . q5304) (vm-self . q5303) (vm-start! . q5302) (make-vm . q5301) (mutex-try-lock! . q5300) (mutex-unlock! . q52ff) (mutex-lock! . q52fe) (mutex? . q52fd) (make-mutex . q52fc) (condition-variable-notify-all! . q52fb) (condition-variable-notify! . q52fa) (condition-variable-wait! . q52f9) (make-condition-variable . q52f8) (mosh-executable-path . q52f7) (make-file-options . q52f6) (source-info . q52f5) (make-compiler-instruction . q52f4) (make-instruction . q52f3) (set-source-info! . q52f2) (bignum? . q52f1) (fast-equal? . q52f0) (fasl-read . q52ef) (fasl-write . q52ee) (time-usage . q52ed) (os-constant . q52ec) (make-parameter . q2890) (socket-port . q52eb) (socket-shutdown . q52ea) (socket-close . q52e9) (socket-send . q52e8) (socket-recv! . q52e7) (socket-recv . q52e6) (make-server-socket . q52e5) (make-client-socket . q52e4) (socket-accept . q52e3) (socket? . q52e2) (string-upcase . q52e1) (string-titlecase . q52e0) (string-normalize-nfkd . q52df) (string-normalize-nfkc . q52de) (string-normalize-nfd . q52dd) (string-normalize-nfc . q52dc) (string-foldcase . q52db) (string-downcase . q52da) (string-ci>? . q52d9) (string-ci>=? . q52d8) (string-ci=? . q52d7) (string-ci<? . q52d6) (string-ci<=? . q52d5) (char-whitespace? . q52d4) (char-upper-case? . q52d3) (char-title-case? . q52d2) (char-numeric? . q52d1) (char-lower-case? . q52d0) (char-general-category . q52cf) (char-upcase . q52ce) (char-titlecase . q52cd) (char-foldcase . q52cc) (char-downcase . q52cb) (char-ci>? . q52ca) (char-ci>=? . q52c9) (char-ci=? . q52c8) (char-ci<? . q52c7) (char-ci<=? . q52c6) (char-alphabetic? . q52c5) (make-variable-transformer . q2e60) (identifier? . q3103) (generate-temporaries . q30ef) (free-identifier=? . q30f1) (syntax->datum . q3107) (datum->syntax . q3105) (bound-identifier=? . q30f3) (record-type-descriptor? . q52c4) (record-predicate . q52c3) (record-mutator . q52c2) (record-constructor . q52c1) (record-accessor . q52c0) (make-record-type-descriptor . q52bf) (make-record-constructor-descriptor . q52be) (record? . q52bd) (record-type-uid . q52bc) (record-type-sealed? . q52bb) (record-type-parent . q52ba) (record-type-opaque? . q52b9) (record-type-name . q52b8) (record-type-generative? . q52b7) (record-type-field-names . q52b6) (record-rtd . q52b5) (record-field-mutable? . q52b4) (delete-file . q52b3) (file-exists? . q52b2) (vector-sort! . q52b1) (vector-sort . q52b0) (list-sort . q52af) (symbol-hash . q52ae) (string-ci-hash . q52ad) (string-hash . q52ac) (equal-hash . q52ab) (hashtable-equivalence-function . q52aa) (make-hashtable . q52a9) (hashtable-hash-function . q52a8) (make-eqv-hashtable . q52a7) (make-eq-hashtable . q52a6) (hashtable? . q52a5) (hashtable-update! . q52a4) (hashtable-size . q52a3) (hashtable-set! . q52a2) (hashtable-ref . q52a1) (hashtable-mutable? . q52a0) (hashtable-keys . q529f) (hashtable-entries . q529e) (hashtable-delete! . q529d) (hashtable-copy . q529c) (hashtable-contains? . q529b) (hashtable-clear! . q529a) (call-with-output-file . q5299) (call-with-input-file . q5298) (write-char . q5297) (write . q5296) (with-output-to-file . q5295) (with-input-from-file . q5294) (read-char . q5293) (read . q5292) (peek-char . q5291) (open-output-file . q5290) (open-input-file . q528f) (newline . q528e) (display . q528d) (close-output-port . q528c) (close-input-port . q528b) (eof-object? . q528a) (eof-object . q5289) (current-error-port . q5288) (current-output-port . q5287) (current-input-port . q5286) (output-port? . q5285) (input-port? . q5284) (utf-8-codec . q5283) (utf-16-codec . q5282) (transcoder-error-handling-mode . q5281) (transcoder-eol-style . q5280) (transcoder-codec . q527f) (transcoded-port . q527e) (textual-port? . q527d) (string->bytevector . q527c) (standard-output-port . q527b) (standard-input-port . q527a) (standard-error-port . q5279) (set-port-position! . q5278) (put-u8 . q5277) (put-string . q5276) (put-datum . q5275) (put-char . q5274) (put-bytevector . q5273) (port? . q5272) (port-transcoder . q5271) (port-position . q5270) (port-has-set-port-position!? . q526f) (port-has-port-position? . q526e) (port-eof? . q526d) (output-port-buffer-mode . q526c) (open-string-output-port . q526b) (open-string-input-port . q526a) (open-file-output-port . q5269) (open-file-input/output-port . q5268) (open-file-input-port . q5267) (open-bytevector-output-port . q5266) (open-bytevector-input-port . q5265) (native-transcoder . q5264) (native-eol-style . q5263) (make-transcoder . q5262) (latin-1-codec . q5261) (make-i/o-write-error . q4d32) (make-i/o-read-error . q4d1d) (make-i/o-port-error . q4dd3) (make-i/o-invalid-position-error . q4d49) (make-i/o-filename-error . q4d64) (make-i/o-file-protection-error . q4d7d) (make-i/o-file-is-read-only-error . q4d92) (make-i/o-file-does-not-exist-error . q4dbc) (make-i/o-file-already-exists-error . q4da7) (make-i/o-error . q4d08) (make-i/o-encoding-error . q4e03) (make-i/o-decoding-error . q4dec) (make-custom-textual-output-port . q5260) (make-custom-textual-input/output-port . q525f) (make-custom-textual-input-port . q525e) (make-custom-binary-output-port . q525d) (make-custom-binary-input/output-port . q525c) (make-custom-binary-input-port . q525b) (make-bytevector . q525a) (lookahead-u8 . q5259) (lookahead-char . q5258) (i/o-write-error? . q4d34) (i/o-read-error? . q4d1f) (i/o-port-error? . q4dd7) (i/o-invalid-position-error? . q4d4d) (i/o-filename-error? . q4d68) (i/o-file-protection-error? . q4d7f) (i/o-file-is-read-only-error? . q4d94) (i/o-file-does-not-exist-error? . q4dbe) (i/o-file-already-exists-error? . q4da9) (i/o-error? . q4d0a) (i/o-error-position . q4d4f) (i/o-error-port . q4dd9) (i/o-error-filename . q4d6a) (i/o-encoding-error? . q4e07) (i/o-encoding-error-char . q4e09) (i/o-decoding-error? . q4dee) (get-u8 . q5257) (get-string-n! . q5256) (get-string-n . q5255) (get-string-all . q5254) (get-line . q5253) (get-datum . q5252) (get-char . q5251) (get-bytevector-some . q5250) (get-bytevector-n! . q524f) (get-bytevector-n . q524e) (get-bytevector-all . q524d) (flush-output-port . q524c) (close-port . q524b) (scheme-report-environment . q30dd) (quotient . q524a) (null-environment . q30db) (remainder . q5249) (modulo . q5248) (inexact->exact . q5247) (force . q5246) (exact->inexact . q5245) (make-promise . q5244) (exit . q5243) (command-line . q4f3e) (string-fill! . q5242) (string-set! . q5241) (set-cdr! . q5240) (set-car! . q523f) (remove . q523e) (remv . q523d) (remp . q523c) (remq . q523b) (partition . q523a) (memv . q5239) (memq . q5238) (memp . q5237) (member . q5236) (exists . q5235) (for-all . q5234) (fold-right . q5233) (fold-left . q5232) (find . q5231) (filter . q5230) (cons* . q522f) (assv . q522e) (assq . q522d) (assp . q522c) (assoc . q522b) (call-with-string-output-port . q522a) (call-with-port . q5229) (call-with-bytevector-output-port . q5228) (bytevector->string . q5227) (buffer-mode? . q5226) (binary-port? . q5225) (with-exception-handler . q5224) (raise-continuable . q5223) (raise . q5222) (eval . q30e1) (environment . q30d9) (make-enumeration . q5221) (enum-set=? . q5220) (enum-set-universe . q521f) (enum-set-union . q521e) (enum-set-subset? . q521d) (enum-set-projection . q521c) (enum-set-member? . q521b) (enum-set-intersection . q521a) (enum-set-indexer . q5219) (enum-set-difference . q5218) (enum-set-constructor . q5217) (enum-set-complement . q5216) (enum-set->list . q5215) (who-condition? . q4c7e) (warning? . q4bf6) (violation? . q4c35) (undefined-violation? . q4cf5) (syntax-violation? . q4cdc) (syntax-violation-subform . q4ce0) (syntax-violation-form . q4cde) (syntax-violation . q3101) (simple-conditions . q5214) (serious-condition? . q4c0b) (non-continuable-violation? . q4c95) (message-condition? . q4bdf) (make-who-condition . q4c7a) (make-warning . q4bf4) (make-violation . q4c33) (make-undefined-violation . q4cf3) (make-syntax-violation . q4cd6) (make-serious-condition . q4c09) (make-non-continuable-violation . q4c93) (make-message-condition . q4bdb) (make-lexical-violation . q4cbd) (make-irritants-condition . q4c5f) (make-implementation-restriction-violation . q4ca8) (make-error . q4c1e) (make-assertion-violation . q4c48) (lexical-violation? . q4cbf) (irritants-condition? . q4c63) (implementation-restriction-violation? . q4caa) (error? . q4c20) (condition-who . q4c80) (condition-predicate . q5213) (condition-message . q4be1) (condition-irritants . q4c65) (condition-accessor . q5212) (condition . q5211) (assertion-violation? . q4c4a) (condition? . q5210) (utf32->string . q520f) (utf16->string . q520e) (utf8->string . q520d) (uint-list->bytevector . q520c) (u8-list->bytevector . q520b) (string->utf8 . q520a) (string->utf32 . q5209) (string->utf16 . q5208) (sint-list->bytevector . q5207) (native-endianness . q5206) (bytevector? . q5205) (bytevector=? . q5204) (bytevector-uint-set! . q5203) (bytevector-uint-ref . q5202) (bytevector-u8-set! . q5201) (bytevector-u8-ref . q5200) (bytevector-u64-set! . q51ff) (bytevector-u64-ref . q51fe) (bytevector-u64-native-set! . q51fd) (bytevector-u64-native-ref . q51fc) (bytevector-u32-set! . q51fb) (bytevector-u32-ref . q51fa) (bytevector-u32-native-set! . q51f9) (bytevector-u32-native-ref . q51f8) (bytevector-u16-set! . q51f7) (bytevector-u16-ref . q51f6) (bytevector-u16-native-set! . q51f5) (bytevector-u16-native-ref . q51f4) (bytevector-sint-set! . q51f3) (bytevector-sint-ref . q51f2) (bytevector-s8-set! . q51f1) (bytevector-s8-ref . q51f0) (bytevector-s64-set! . q51ef) (bytevector-s64-ref . q51ee) (bytevector-s64-native-set! . q51ed) (bytevector-s64-native-ref . q51ec) (bytevector-s32-set! . q51eb) (bytevector-s32-ref . q51ea) (bytevector-s32-native-set! . q51e9) (bytevector-s32-native-ref . q51e8) (bytevector-s16-set! . q51e7) (bytevector-s16-ref . q51e6) (bytevector-s16-native-set! . q51e5) (bytevector-s16-native-ref . q51e4) (bytevector-length . q51e3) (bytevector-ieee-single-ref . q51e2) (bytevector-ieee-single-set! . q51e1) (bytevector-ieee-single-native-set! . q51e0) (bytevector-ieee-single-native-ref . q51df) (bytevector-ieee-double-set! . q51de) (bytevector-ieee-double-ref . q51dd) (bytevector-ieee-double-native-set! . q51dc) (bytevector-ieee-double-native-ref . q51db) (bytevector-fill! . q51da) (bytevector-copy! . q51d9) (bytevector-copy . q51d8) (bytevector->uint-list . q51d7) (bytevector->u8-list . q51d6) (bytevector->sint-list . q51d5) (no-nans-violation? . q4e33) (no-infinities-violation? . q4e1e) (make-no-nans-violation . q4e31) (make-no-infinities-violation . q4e1c) (real->flonum . q51d4) (flzero? . q51d3) (fltruncate . q51d2) (fltan . q51d1) (flsqrt . q51d0) (flsin . q51cf) (flround . q51ce) (flpositive? . q51cd) (flonum? . q51cc) (flodd? . q51cb) (flnumerator . q51ca) (flnegative? . q51c9) (flnan? . q51c8) (flmod0 . q51c7) (flmod . q51c6) (flmin . q51c5) (flmax . q51c4) (fllog . q51c3) (flinteger? . q51c2) (flinfinite? . q51c1) (flfloor . q51c0) (flfinite? . q51bf) (flexpt . q51be) (flexp . q51bd) (fleven? . q51bc) (fldiv0-and-mod0 . q51bb) (fldiv0 . q51ba) (fldiv-and-mod . q51b9) (fldiv . q51b8) (fldenominator . q51b7) (flcos . q51b6) (flceiling . q51b5) (flatan . q51b4) (flasin . q51b3) (flacos . q51b2) (flabs . q51b1) (fl>? . q51b0) (fl>=? . q51af) (fl=? . q51ae) (fl<? . q51ad) (fl<=? . q51ac) (fl/ . q51ab) (fl- . q51aa) (fl+ . q51a9) (fl* . q51a8) (fixnum->flonum . q51a7) (fxzero? . q51a6) (fxxor . q51a5) (fxrotate-bit-field . q51a4) (fxreverse-bit-field . q51a3) (fxpositive? . q51a2) (fxodd? . q51a1) (fxnot . q51a0) (fxnegative? . q519f) (fxmod0 . q519e) (fxmod . q519d) (fxmin . q519c) (fxmax . q519b) (fxlength . q519a) (fxior . q5199) (fxif . q5198) (fxfirst-bit-set . q5197) (fxeven? . q5196) (fxdiv0-and-mod0 . q5195) (fxdiv0 . q5194) (fxdiv-and-mod . q5193) (fxdiv . q5192) (fxcopy-bit-field . q5191) (fxcopy-bit . q5190) (fxbit-set? . q518f) (fxbit-field . q518e) (fxbit-count . q518d) (fxarithmetic-shift-right . q518c) (fxarithmetic-shift-left . q518b) (fxarithmetic-shift . q518a) (fxand . q5189) (fx>? . q5188) (fx>=? . q5187) (fx=? . q5186) (fx<? . q5185) (fx<=? . q5184) (fx-/carry . q5183) (fx- . q5182) (fx+/carry . q5181) (fx+ . q5180) (fx*/carry . q517f) (fx* . q517e) (greatest-fixnum . q517d) (least-fixnum . q517c) (fixnum-width . q517b) (fixnum? . q517a) (bitwise-rotate-bit-field . q5179) (bitwise-reverse-bit-field . q5178) (bitwise-length . q5177) (bitwise-if . q5176) (bitwise-first-bit-set . q5175) (bitwise-copy-bit-field . q5174) (bitwise-copy-bit . q5173) (bitwise-bit-set? . q5172) (bitwise-bit-field . q5171) (bitwise-bit-count . q5170) (bitwise-xor . q516f) (bitwise-ior . q516e) (bitwise-and . q516d) (bitwise-not . q516c) (bitwise-arithmetic-shift-right . q516b) (bitwise-arithmetic-shift-left . q516a) (bitwise-arithmetic-shift . q5169) (zero? . q5168) (vector? . q5167) (vector-set! . q5166) (vector-ref . q5165) (vector-map . q5164) (vector-length . q5163) (vector-for-each . q5162) (vector-fill! . q5161) (vector->list . q5160) (vector . q515f) (values . q515e) (truncate . q515d) (tan . q515c) (symbol? . q515b) (symbol=? . q515a) (symbol->string . q5159) (substring . q5158) (string? . q5157) (string>? . q5156) (string>=? . q5155) (string=? . q5154) (string<? . q5153) (string<=? . q5152) (string-ref . q5151) (string-length . q5150) (string-for-each . q514f) (string-copy . q514e) (string-append . q514d) (string->symbol . q514c) (string->number . q514b) (string->list . q514a) (string . q5149) (sqrt . q5148) (sin . q5147) (round . q5146) (reverse . q5145) (real? . q5144) (real-valued? . q5143) (real-part . q5142) (rationalize . q5141) (rational? . q5140) (rational-valued? . q513f) (procedure? . q513e) (positive? . q513d) (pair? . q513c) (odd? . q513b) (numerator . q513a) (number? . q5139) (number->string . q5138) (null? . q5137) (not . q5136) (negative? . q5135) (nan? . q5134) (min . q5133) (max . q5132) (map . q5131) (make-vector . q5130) (make-string . q512f) (make-rectangular . q512e) (make-polar . q512d) (magnitude . q512c) (log . q512b) (list? . q512a) (list-tail . q5129) (list-ref . q5128) (list->vector . q5127) (list->string . q5126) (list . q5125) (length . q5124) (lcm . q5123) (integer? . q5122) (integer-valued? . q5121) (integer->char . q5120) (infinite? . q511f) (inexact? . q511e) (inexact . q511d) (imag-part . q511c) (gcd . q511b) (for-each . q511a) (floor . q5119) (finite? . q5118) (expt . q5117) (exp . q5116) (exact? . q5115) (exact-integer-sqrt . q5114) (exact . q5113) (even? . q5112) (error . q5111) (eqv? . q5110) (equal? . q510f) (eq? . q510e) (dynamic-wind . q510d) (div0-and-mod0 . q510c) (mod0 . q510b) (div0 . q510a) (div-and-mod . q5109) (mod . q5108) (div . q5107) (denominator . q5106) (cos . q5105) (cons . q5104) (complex? . q5103) (char? . q5102) (char>? . q5101) (char>=? . q5100) (char=? . q50ff) (char<? . q50fe) (char<=? . q50fd) (char->integer . q50fc) (ceiling . q50fb) (call-with-values . q50fa) (call/cc . q50f9) (call-with-current-continuation . q50f8) (cddddr . q50f7) (cdddar . q50f6) (cddadr . q50f5) (cddaar . q50f4) (cdaddr . q50f3) (cdadar . q50f2) (cdaadr . q50f1) (cdaaar . q50f0) (cadddr . q50ef) (caddar . q50ee) (cadadr . q50ed) (cadaar . q50ec) (caaddr . q50eb) (caadar . q50ea) (caaadr . q50e9) (caaaar . q50e8) (cdddr . q50e7) (cddar . q50e6) (cdadr . q50e5) (cdaar . q50e4) (caddr . q50e3) (cadar . q50e2) (caadr . q50e1) (caaar . q50e0) (cddr . q50df) (cdar . q50de) (cadr . q50dd) (caar . q50dc) (cdr . q50db) (car . q50da) (boolean? . q50d9) (boolean=? . q50d8) (atan . q50d7) (assertion-violation . q50d6) (assertion-error . q30fb) (asin . q50d5) (apply . q50d4) (append . q50d3) (angle . q50d2) (acos . q50d1) (abs . q50d0) (/ . q50cf) (* . q50ce) (- . q50cd) (+ . q50cc) (>= . q50cb) (> . q50ca) (= . q50c9) (<= . q50c8) (< . q50c7) (library . q50c6) (&no-nans . q50c5) (&no-infinities . q50c4) (&i/o-encoding . q50c3) (&i/o-decoding . q50c2) (&i/o-port . q50c1) (&i/o-file-does-not-exist . q50c0) (&i/o-file-already-exists . q50bf) (&i/o-file-is-read-only . q50be) (&i/o-file-protection . q50bd) (&i/o-filename . q50bc) (&i/o-invalid-position . q50bb) (&i/o-write . q50ba) (&i/o-read . q50b9) (&i/o . q50b8) (&undefined . q50b7) (&syntax . q50b6) (&lexical . q50b5) (&implementation-restriction . q50b4) (&non-continuable . q50b3) (&who . q50b2) (&irritants . q50b1) (&assertion . q50b0) (&violation . q50af) (&error . q50ae) (&serious . q50ad) (&warning . q50ac) (&message . q50ab) (&condition . q50aa) (define-condition-type . q50a9) (define-enumeration . q50a8) (define-record-type . q50a7) (parent-rtd . q50a6) (nongenerative . q50a5) (opaque . q50a4) (sealed . q50a3) (protocol . q50a2) (parent . q50a1) (immutable . q50a0) (mutable . q509f) (fields . q509e) (error-handling-mode . q509d) (file-options . q509c) (buffer-mode . q509b) (eol-style . q509a) (guard . q5099) (trace-define . q5098) (trace-lambda . q5097) (unsyntax-splicing . q5096) (unsyntax . q5095) (unquote-splicing . q5094) (unquote . q5093) (_ . q5092) (else . q5091) (=> . q5090) (... . q508f) (assert . q508e) (endianness . q508d) (delay . q508c) (time . q508b) (do . q508a) (cond . q5089) (let* . q5088) (let . q5087) (let*-values . q5086) (let-values . q5085) (identifier-syntax . q5084) (with-syntax . q5083) (quasisyntax . q5082) (quasiquote . q5081) (syntax-rules . q5080) (include . q507f) (define-struct . q507e) (record-constructor-descriptor . q507d) (record-type-descriptor . q507c) (case . q507b) (parameterize . q507a) (unless . q5079) (when . q5078) (or . q5077) (and . q5076) (if . q5075) (letrec* . q5074) (letrec . q5073) (type-descriptor . q5072) (case-lambda . q5071) (lambda . q5070) (syntax . q506f) (syntax-case . q506e) (quote . q506d) (foreign-call . q506c) (letrec-syntax . q506b) (let-syntax . q506a) (set! . q5069) (import . q5068) (begin . q5067) (module . q5066) (define-syntax . q5065) (define . q5064)) '((q4e37 core-prim . &no-nans-rcd) (q4e35 core-prim . &no-nans-rtd) (q4e22 core-prim . &no-infinities-rcd) (q4e20 core-prim . &no-infinities-rtd) (q4e0d core-prim . &i/o-encoding-rcd) (q4e0b core-prim . &i/o-encoding-rtd) (q4df2 core-prim . &i/o-decoding-rcd) (q4df0 core-prim . &i/o-decoding-rtd) (q4ddd core-prim . &i/o-port-rcd) (q4ddb core-prim . &i/o-port-rtd) (q4dc2 core-prim . &i/o-file-does-not-exist-rcd) (q4dc0 core-prim . &i/o-file-does-not-exist-rtd) (q4dad core-prim . &i/o-file-already-exists-rcd) (q4dab core-prim . &i/o-file-already-exists-rtd) (q4d98 core-prim . &i/o-file-is-read-only-rcd) (q4d96 core-prim . &i/o-file-is-read-only-rtd) (q4d83 core-prim . &i/o-file-protection-rcd) (q4d81 core-prim . &i/o-file-protection-rtd) (q4d6e core-prim . &i/o-filename-rcd) (q4d6c core-prim . &i/o-filename-rtd) (q4d53 core-prim . &i/o-invalid-position-rcd) (q4d51 core-prim . &i/o-invalid-position-rtd) (q4d38 core-prim . &i/o-write-rcd) (q4d36 core-prim . &i/o-write-rtd) (q4d23 core-prim . &i/o-read-rcd) (q4d21 core-prim . &i/o-read-rtd) (q4d0e core-prim . &i/o-rcd) (q4d0c core-prim . &i/o-rtd) (q4cf9 core-prim . &undefined-rcd) (q4cf7 core-prim . &undefined-rtd) (q4ce4 core-prim . &syntax-rcd) (q4ce2 core-prim . &syntax-rtd) (q4cc3 core-prim . &lexical-rcd) (q4cc1 core-prim . &lexical-rtd) (q4cae core-prim . &implementation-restriction-rcd) (q4cac core-prim . &implementation-restriction-rtd) (q4c99 core-prim . &non-continuable-rcd) (q4c97 core-prim . &non-continuable-rtd) (q4c84 core-prim . &who-rcd) (q4c82 core-prim . &who-rtd) (q4c69 core-prim . &irritants-rcd) (q4c67 core-prim . &irritants-rtd) (q4c4e core-prim . &assertion-rcd) (q4c4c core-prim . &assertion-rtd) (q4c39 core-prim . &violation-rcd) (q4c37 core-prim . &violation-rtd) (q4c24 core-prim . &error-rcd) (q4c22 core-prim . &error-rtd) (q4c0f core-prim . &serious-rcd) (q4c0d core-prim . &serious-rtd) (q4bfa core-prim . &warning-rcd) (q4bf8 core-prim . &warning-rtd) (q4be5 core-prim . &message-rcd) (q4be3 core-prim . &message-rtd) (q4b86 core-prim . &condition-rcd) (q4b84 core-prim . &condition-rtd) (q30fd core-prim . syntax-error) (q3033 core-prim . syntax-dispatch) (q5384 core-prim . pretty-print) (q5383 core-prim . eval-core) (q5382 core-prim . set-symbol-value!) (q5381 core-prim . symbol-value) (q5380 core-prim . gensym) (q537f core-prim . void) (q4f44 core-prim . load) (q310d core-prim . interaction-environment) (q537e core-prim . char-ready?) (q537d core-prim . regexp?) (q537c core-prim . read-line) (q537b core-prim . ungensym) (q537a core-prim . alist->eq-hash-table) (q5379 core-prim . assoc-ref) (q5378 core-prim . print) (q5377 core-prim . format) (q5376 core-prim . host-os) (q2a83 core-prim . library-path) (q5375 core-prim . standard-library-path) (q5374 core-prim . file-newer?) (q5373 core-prim . stat-mtime) (q5372 core-prim . write-to-file) (q5371 core-prim . file->list) (q5370 core-prim . file->string) (q536f core-prim . digit->integer) (q536e core-prim . call-with-string-input-port) (q536d core-prim . call-with-string-io) (q536c core-prim . string-split) (q536b core-prim . bytevector-for-each) (q536a core-prim . string->regexp) (q5369 core-prim . rxmatch) (q5368 core-prim . regexp-replace-all) (q5367 core-prim . hashtable-for-each) (q5366 core-prim . call-process) (q5365 core-prim . local-tz-offset) (q5364 core-prim . microseconds) (q5363 core-prim . directory-list) (q5362 core-prim . set-current-directory!) (q5361 core-prim . expand-path) (q5360 core-prim . current-directory) (q535f core-prim . %spawn) (q535e core-prim . %waitpid) (q535d core-prim . simple-struct-name) (q535c core-prim . simple-struct-set!) (q535b core-prim . simple-struct-ref) (q535a core-prim . make-simple-struct) (q5359 core-prim . simple-struct?) (q5358 core-prim . pointer-ref-c-int64) (q5357 core-prim . pointer-ref-c-int32) (q5356 core-prim . pointer-ref-c-int16) (q5355 core-prim . pointer-ref-c-int8) (q5354 core-prim . pointer-ref-c-uint64) (q5353 core-prim . pointer-ref-c-uint32) (q5352 core-prim . pointer-ref-c-uint16) (q5351 core-prim . pointer-ref-c-uint8) (q5350 core-prim . pointer-set-c-uint64!) (q534f core-prim . pointer-set-c-uint32!) (q534e core-prim . pointer-set-c-uint16!) (q534d core-prim . pointer-set-c-uint8!) (q534c core-prim . pointer-set-c-int64!) (q534b core-prim . pointer-set-c-int32!) (q534a core-prim . pointer-set-c-int16!) (q5349 core-prim . pointer-set-c-int8!) (q5348 core-prim . pointer-set-c-pointer!) (q5347 core-prim . pointer-set-c-double!) (q5346 core-prim . pointer-set-c-float!) (q5345 core-prim . pointer-set-c-long-long!) (q5344 core-prim . pointer-set-c-long!) (q5343 core-prim . pointer-set-c-int!) (q5342 core-prim . pointer-set-c-short!) (q5341 core-prim . pointer-set-c-char!) (q5340 core-prim . pointer-ref-c-pointer) (q533f core-prim . pointer-ref-c-double) (q533e core-prim . pointer-ref-c-float) (q533d core-prim . pointer-ref-c-unsigned-long-long) (q533c core-prim . pointer-ref-c-signed-long-long) (q533b core-prim . pointer-ref-c-unsigned-long) (q533a core-prim . pointer-ref-c-signed-long) (q5339 core-prim . pointer-ref-c-unsigned-int) (q5338 core-prim . pointer-ref-c-signed-int) (q5337 core-prim . pointer-ref-c-unsigned-short) (q5336 core-prim . pointer-ref-c-signed-short) (q5335 core-prim . pointer-ref-c-unsigned-char) (q5334 core-prim . pointer-ref-c-signed-char) (q5333 core-prim . pointer->integer) (q5332 core-prim . integer->pointer) (q5331 core-prim . pointer?) (q5330 core-prim . shared-errno) (q532f core-prim . %ffi-supported?) (q532e core-prim . %ffi-pointer->string) (q532d core-prim . %ffi-call->string-or-zero) (q532c core-prim . %ffi-call->double) (q532b core-prim . %ffi-call->void*) (q532a core-prim . %ffi-call->void) (q5329 core-prim . %ffi-call->char) (q5328 core-prim . %ffi-call->int) (q5327 core-prim . %ffi-lookup) (q5326 core-prim . %ffi-open) (q5325 core-prim . %fork) (q5324 core-prim . %pipe) (q5323 core-prim . p) (q5322 core-prim . open-output-string) (q5321 core-prim . get-output-string) (q5320 core-prim . file-stat-ctime) (q531f core-prim . file-stat-atime) (q531e core-prim . file-stat-mtime) (q531d core-prim . file-size-in-bytes) (q531c core-prim . file-writable?) (q531b core-prim . file-executable?) (q531a core-prim . file-readable?) (q5319 core-prim . file-regular?) (q5318 core-prim . file-symbolic-link?) (q5317 core-prim . file-directory?) (q5316 core-prim . create-symbolic-link) (q5315 core-prim . rename-file) (q5314 core-prim . delete-directory) (q5313 core-prim . create-directory) (q5312 core-prim . get-environment-variables) (q5311 core-prim . get-environment-variable) (q5310 core-prim . id->real-label) (q530f core-prim . same-marks?) (q530e core-prim . same-marks*?) (q530d core-prim . get-timeofday) (q530c core-prim . get-command-line) (q530b core-prim . sys-display) (q530a core-prim . whereis) (q5309 core-prim . register) (q5308 core-prim . vm-join!) (q5307 core-prim . vm-set-value!) (q5306 core-prim . vm?) (q5305 core-prim . main-vm?) (q5304 core-prim . vm-eval) (q5303 core-prim . vm-self) (q5302 core-prim . vm-start!) (q5301 core-prim . make-vm) (q5300 core-prim . mutex-try-lock!) (q52ff core-prim . mutex-unlock!) (q52fe core-prim . mutex-lock!) (q52fd core-prim . mutex?) (q52fc core-prim . make-mutex) (q52fb core-prim . condition-variable-notify-all!) (q52fa core-prim . condition-variable-notify!) (q52f9 core-prim . condition-variable-wait!) (q52f8 core-prim . make-condition-variable) (q52f7 core-prim . mosh-executable-path) (q52f6 core-prim . make-file-options) (q52f5 core-prim . source-info) (q52f4 core-prim . make-compiler-instruction) (q52f3 core-prim . make-instruction) (q52f2 core-prim . set-source-info!) (q52f1 core-prim . bignum?) (q52f0 core-prim . fast-equal?) (q52ef core-prim . fasl-read) (q52ee core-prim . fasl-write) (q52ed core-prim . time-usage) (q52ec core-prim . os-constant) (q2890 core-prim . make-parameter) (q52eb core-prim . socket-port) (q52ea core-prim . socket-shutdown) (q52e9 core-prim . socket-close) (q52e8 core-prim . socket-send) (q52e7 core-prim . socket-recv!) (q52e6 core-prim . socket-recv) (q52e5 core-prim . make-server-socket) (q52e4 core-prim . make-client-socket) (q52e3 core-prim . socket-accept) (q52e2 core-prim . socket?) (q52e1 core-prim . string-upcase) (q52e0 core-prim . string-titlecase) (q52df core-prim . string-normalize-nfkd) (q52de core-prim . string-normalize-nfkc) (q52dd core-prim . string-normalize-nfd) (q52dc core-prim . string-normalize-nfc) (q52db core-prim . string-foldcase) (q52da core-prim . string-downcase) (q52d9 core-prim . string-ci>?) (q52d8 core-prim . string-ci>=?) (q52d7 core-prim . string-ci=?) (q52d6 core-prim . string-ci<?) (q52d5 core-prim . string-ci<=?) (q52d4 core-prim . char-whitespace?) (q52d3 core-prim . char-upper-case?) (q52d2 core-prim . char-title-case?) (q52d1 core-prim . char-numeric?) (q52d0 core-prim . char-lower-case?) (q52cf core-prim . char-general-category) (q52ce core-prim . char-upcase) (q52cd core-prim . char-titlecase) (q52cc core-prim . char-foldcase) (q52cb core-prim . char-downcase) (q52ca core-prim . char-ci>?) (q52c9 core-prim . char-ci>=?) (q52c8 core-prim . char-ci=?) (q52c7 core-prim . char-ci<?) (q52c6 core-prim . char-ci<=?) (q52c5 core-prim . char-alphabetic?) (q2e60 core-prim . make-variable-transformer) (q3103 core-prim . identifier?) (q30ef core-prim . generate-temporaries) (q30f1 core-prim . free-identifier=?) (q3107 core-prim . syntax->datum) (q3105 core-prim . datum->syntax) (q30f3 core-prim . bound-identifier=?) (q52c4 core-prim . record-type-descriptor?) (q52c3 core-prim . record-predicate) (q52c2 core-prim . record-mutator) (q52c1 core-prim . record-constructor) (q52c0 core-prim . record-accessor) (q52bf core-prim . make-record-type-descriptor) (q52be core-prim . make-record-constructor-descriptor) (q52bd core-prim . record?) (q52bc core-prim . record-type-uid) (q52bb core-prim . record-type-sealed?) (q52ba core-prim . record-type-parent) (q52b9 core-prim . record-type-opaque?) (q52b8 core-prim . record-type-name) (q52b7 core-prim . record-type-generative?) (q52b6 core-prim . record-type-field-names) (q52b5 core-prim . record-rtd) (q52b4 core-prim . record-field-mutable?) (q52b3 core-prim . delete-file) (q52b2 core-prim . file-exists?) (q52b1 core-prim . vector-sort!) (q52b0 core-prim . vector-sort) (q52af core-prim . list-sort) (q52ae core-prim . symbol-hash) (q52ad core-prim . string-ci-hash) (q52ac core-prim . string-hash) (q52ab core-prim . equal-hash) (q52aa core-prim . hashtable-equivalence-function) (q52a9 core-prim . make-hashtable) (q52a8 core-prim . hashtable-hash-function) (q52a7 core-prim . make-eqv-hashtable) (q52a6 core-prim . make-eq-hashtable) (q52a5 core-prim . hashtable?) (q52a4 core-prim . hashtable-update!) (q52a3 core-prim . hashtable-size) (q52a2 core-prim . hashtable-set!) (q52a1 core-prim . hashtable-ref) (q52a0 core-prim . hashtable-mutable?) (q529f core-prim . hashtable-keys) (q529e core-prim . hashtable-entries) (q529d core-prim . hashtable-delete!) (q529c core-prim . hashtable-copy) (q529b core-prim . hashtable-contains?) (q529a core-prim . hashtable-clear!) (q5299 core-prim . call-with-output-file) (q5298 core-prim . call-with-input-file) (q5297 core-prim . write-char) (q5296 core-prim . write) (q5295 core-prim . with-output-to-file) (q5294 core-prim . with-input-from-file) (q5293 core-prim . read-char) (q5292 core-prim . read) (q5291 core-prim . peek-char) (q5290 core-prim . open-output-file) (q528f core-prim . open-input-file) (q528e core-prim . newline) (q528d core-prim . display) (q528c core-prim . close-output-port) (q528b core-prim . close-input-port) (q528a core-prim . eof-object?) (q5289 core-prim . eof-object) (q5288 core-prim . current-error-port) (q5287 core-prim . current-output-port) (q5286 core-prim . current-input-port) (q5285 core-prim . output-port?) (q5284 core-prim . input-port?) (q5283 core-prim . utf-8-codec) (q5282 core-prim . utf-16-codec) (q5281 core-prim . transcoder-error-handling-mode) (q5280 core-prim . transcoder-eol-style) (q527f core-prim . transcoder-codec) (q527e core-prim . transcoded-port) (q527d core-prim . textual-port?) (q527c core-prim . string->bytevector) (q527b core-prim . standard-output-port) (q527a core-prim . standard-input-port) (q5279 core-prim . standard-error-port) (q5278 core-prim . set-port-position!) (q5277 core-prim . put-u8) (q5276 core-prim . put-string) (q5275 core-prim . put-datum) (q5274 core-prim . put-char) (q5273 core-prim . put-bytevector) (q5272 core-prim . port?) (q5271 core-prim . port-transcoder) (q5270 core-prim . port-position) (q526f core-prim . port-has-set-port-position!?) (q526e core-prim . port-has-port-position?) (q526d core-prim . port-eof?) (q526c core-prim . output-port-buffer-mode) (q526b core-prim . open-string-output-port) (q526a core-prim . open-string-input-port) (q5269 core-prim . open-file-output-port) (q5268 core-prim . open-file-input/output-port) (q5267 core-prim . open-file-input-port) (q5266 core-prim . open-bytevector-output-port) (q5265 core-prim . open-bytevector-input-port) (q5264 core-prim . native-transcoder) (q5263 core-prim . native-eol-style) (q5262 core-prim . make-transcoder) (q5261 core-prim . latin-1-codec) (q4d32 core-prim . make-i/o-write-error) (q4d1d core-prim . make-i/o-read-error) (q4dd3 core-prim . make-i/o-port-error) (q4d49 core-prim . make-i/o-invalid-position-error) (q4d64 core-prim . make-i/o-filename-error) (q4d7d core-prim . make-i/o-file-protection-error) (q4d92 core-prim . make-i/o-file-is-read-only-error) (q4dbc core-prim . make-i/o-file-does-not-exist-error) (q4da7 core-prim . make-i/o-file-already-exists-error) (q4d08 core-prim . make-i/o-error) (q4e03 core-prim . make-i/o-encoding-error) (q4dec core-prim . make-i/o-decoding-error) (q5260 core-prim . make-custom-textual-output-port) (q525f core-prim . make-custom-textual-input/output-port) (q525e core-prim . make-custom-textual-input-port) (q525d core-prim . make-custom-binary-output-port) (q525c core-prim . make-custom-binary-input/output-port) (q525b core-prim . make-custom-binary-input-port) (q525a core-prim . make-bytevector) (q5259 core-prim . lookahead-u8) (q5258 core-prim . lookahead-char) (q4d34 core-prim . i/o-write-error?) (q4d1f core-prim . i/o-read-error?) (q4dd7 core-prim . i/o-port-error?) (q4d4d core-prim . i/o-invalid-position-error?) (q4d68 core-prim . i/o-filename-error?) (q4d7f core-prim . i/o-file-protection-error?) (q4d94 core-prim . i/o-file-is-read-only-error?) (q4dbe core-prim . i/o-file-does-not-exist-error?) (q4da9 core-prim . i/o-file-already-exists-error?) (q4d0a core-prim . i/o-error?) (q4d4f core-prim . i/o-error-position) (q4dd9 core-prim . i/o-error-port) (q4d6a core-prim . i/o-error-filename) (q4e07 core-prim . i/o-encoding-error?) (q4e09 core-prim . i/o-encoding-error-char) (q4dee core-prim . i/o-decoding-error?) (q5257 core-prim . get-u8) (q5256 core-prim . get-string-n!) (q5255 core-prim . get-string-n) (q5254 core-prim . get-string-all) (q5253 core-prim . get-line) (q5252 core-prim . get-datum) (q5251 core-prim . get-char) (q5250 core-prim . get-bytevector-some) (q524f core-prim . get-bytevector-n!) (q524e core-prim . get-bytevector-n) (q524d core-prim . get-bytevector-all) (q524c core-prim . flush-output-port) (q524b core-prim . close-port) (q30dd core-prim . scheme-report-environment) (q524a core-prim . quotient) (q30db core-prim . null-environment) (q5249 core-prim . remainder) (q5248 core-prim . modulo) (q5247 core-prim . inexact->exact) (q5246 core-prim . force) (q5245 core-prim . exact->inexact) (q5244 core-prim . make-promise) (q5243 core-prim . exit) (q4f3e core-prim . command-line) (q5242 core-prim . string-fill!) (q5241 core-prim . string-set!) (q5240 core-prim . set-cdr!) (q523f core-prim . set-car!) (q523e core-prim . remove) (q523d core-prim . remv) (q523c core-prim . remp) (q523b core-prim . remq) (q523a core-prim . partition) (q5239 core-prim . memv) (q5238 core-prim . memq) (q5237 core-prim . memp) (q5236 core-prim . member) (q5235 core-prim . exists) (q5234 core-prim . for-all) (q5233 core-prim . fold-right) (q5232 core-prim . fold-left) (q5231 core-prim . find) (q5230 core-prim . filter) (q522f core-prim . cons*) (q522e core-prim . assv) (q522d core-prim . assq) (q522c core-prim . assp) (q522b core-prim . assoc) (q522a core-prim . call-with-string-output-port) (q5229 core-prim . call-with-port) (q5228 core-prim . call-with-bytevector-output-port) (q5227 core-prim . bytevector->string) (q5226 core-prim . buffer-mode?) (q5225 core-prim . binary-port?) (q5224 core-prim . with-exception-handler) (q5223 core-prim . raise-continuable) (q5222 core-prim . raise) (q30e1 core-prim . eval) (q30d9 core-prim . environment) (q5221 core-prim . make-enumeration) (q5220 core-prim . enum-set=?) (q521f core-prim . enum-set-universe) (q521e core-prim . enum-set-union) (q521d core-prim . enum-set-subset?) (q521c core-prim . enum-set-projection) (q521b core-prim . enum-set-member?) (q521a core-prim . enum-set-intersection) (q5219 core-prim . enum-set-indexer) (q5218 core-prim . enum-set-difference) (q5217 core-prim . enum-set-constructor) (q5216 core-prim . enum-set-complement) (q5215 core-prim . enum-set->list) (q4c7e core-prim . who-condition?) (q4bf6 core-prim . warning?) (q4c35 core-prim . violation?) (q4cf5 core-prim . undefined-violation?) (q4cdc core-prim . syntax-violation?) (q4ce0 core-prim . syntax-violation-subform) (q4cde core-prim . syntax-violation-form) (q3101 core-prim . syntax-violation) (q5214 core-prim . simple-conditions) (q4c0b core-prim . serious-condition?) (q4c95 core-prim . non-continuable-violation?) (q4bdf core-prim . message-condition?) (q4c7a core-prim . make-who-condition) (q4bf4 core-prim . make-warning) (q4c33 core-prim . make-violation) (q4cf3 core-prim . make-undefined-violation) (q4cd6 core-prim . make-syntax-violation) (q4c09 core-prim . make-serious-condition) (q4c93 core-prim . make-non-continuable-violation) (q4bdb core-prim . make-message-condition) (q4cbd core-prim . make-lexical-violation) (q4c5f core-prim . make-irritants-condition) (q4ca8 core-prim . make-implementation-restriction-violation) (q4c1e core-prim . make-error) (q4c48 core-prim . make-assertion-violation) (q4cbf core-prim . lexical-violation?) (q4c63 core-prim . irritants-condition?) (q4caa core-prim . implementation-restriction-violation?) (q4c20 core-prim . error?) (q4c80 core-prim . condition-who) (q5213 core-prim . condition-predicate) (q4be1 core-prim . condition-message) (q4c65 core-prim . condition-irritants) (q5212 core-prim . condition-accessor) (q5211 core-prim . condition) (q4c4a core-prim . assertion-violation?) (q5210 core-prim . condition?) (q520f core-prim . utf32->string) (q520e core-prim . utf16->string) (q520d core-prim . utf8->string) (q520c core-prim . uint-list->bytevector) (q520b core-prim . u8-list->bytevector) (q520a core-prim . string->utf8) (q5209 core-prim . string->utf32) (q5208 core-prim . string->utf16) (q5207 core-prim . sint-list->bytevector) (q5206 core-prim . native-endianness) (q5205 core-prim . bytevector?) (q5204 core-prim . bytevector=?) (q5203 core-prim . bytevector-uint-set!) (q5202 core-prim . bytevector-uint-ref) (q5201 core-prim . bytevector-u8-set!) (q5200 core-prim . bytevector-u8-ref) (q51ff core-prim . bytevector-u64-set!) (q51fe core-prim . bytevector-u64-ref) (q51fd core-prim . bytevector-u64-native-set!) (q51fc core-prim . bytevector-u64-native-ref) (q51fb core-prim . bytevector-u32-set!) (q51fa core-prim . bytevector-u32-ref) (q51f9 core-prim . bytevector-u32-native-set!) (q51f8 core-prim . bytevector-u32-native-ref) (q51f7 core-prim . bytevector-u16-set!) (q51f6 core-prim . bytevector-u16-ref) (q51f5 core-prim . bytevector-u16-native-set!) (q51f4 core-prim . bytevector-u16-native-ref) (q51f3 core-prim . bytevector-sint-set!) (q51f2 core-prim . bytevector-sint-ref) (q51f1 core-prim . bytevector-s8-set!) (q51f0 core-prim . bytevector-s8-ref) (q51ef core-prim . bytevector-s64-set!) (q51ee core-prim . bytevector-s64-ref) (q51ed core-prim . bytevector-s64-native-set!) (q51ec core-prim . bytevector-s64-native-ref) (q51eb core-prim . bytevector-s32-set!) (q51ea core-prim . bytevector-s32-ref) (q51e9 core-prim . bytevector-s32-native-set!) (q51e8 core-prim . bytevector-s32-native-ref) (q51e7 core-prim . bytevector-s16-set!) (q51e6 core-prim . bytevector-s16-ref) (q51e5 core-prim . bytevector-s16-native-set!) (q51e4 core-prim . bytevector-s16-native-ref) (q51e3 core-prim . bytevector-length) (q51e2 core-prim . bytevector-ieee-single-ref) (q51e1 core-prim . bytevector-ieee-single-set!) (q51e0 core-prim . bytevector-ieee-single-native-set!) (q51df core-prim . bytevector-ieee-single-native-ref) (q51de core-prim . bytevector-ieee-double-set!) (q51dd core-prim . bytevector-ieee-double-ref) (q51dc core-prim . bytevector-ieee-double-native-set!) (q51db core-prim . bytevector-ieee-double-native-ref) (q51da core-prim . bytevector-fill!) (q51d9 core-prim . bytevector-copy!) (q51d8 core-prim . bytevector-copy) (q51d7 core-prim . bytevector->uint-list) (q51d6 core-prim . bytevector->u8-list) (q51d5 core-prim . bytevector->sint-list) (q4e33 core-prim . no-nans-violation?) (q4e1e core-prim . no-infinities-violation?) (q4e31 core-prim . make-no-nans-violation) (q4e1c core-prim . make-no-infinities-violation) (q51d4 core-prim . real->flonum) (q51d3 core-prim . flzero?) (q51d2 core-prim . fltruncate) (q51d1 core-prim . fltan) (q51d0 core-prim . flsqrt) (q51cf core-prim . flsin) (q51ce core-prim . flround) (q51cd core-prim . flpositive?) (q51cc core-prim . flonum?) (q51cb core-prim . flodd?) (q51ca core-prim . flnumerator) (q51c9 core-prim . flnegative?) (q51c8 core-prim . flnan?) (q51c7 core-prim . flmod0) (q51c6 core-prim . flmod) (q51c5 core-prim . flmin) (q51c4 core-prim . flmax) (q51c3 core-prim . fllog) (q51c2 core-prim . flinteger?) (q51c1 core-prim . flinfinite?) (q51c0 core-prim . flfloor) (q51bf core-prim . flfinite?) (q51be core-prim . flexpt) (q51bd core-prim . flexp) (q51bc core-prim . fleven?) (q51bb core-prim . fldiv0-and-mod0) (q51ba core-prim . fldiv0) (q51b9 core-prim . fldiv-and-mod) (q51b8 core-prim . fldiv) (q51b7 core-prim . fldenominator) (q51b6 core-prim . flcos) (q51b5 core-prim . flceiling) (q51b4 core-prim . flatan) (q51b3 core-prim . flasin) (q51b2 core-prim . flacos) (q51b1 core-prim . flabs) (q51b0 core-prim . fl>?) (q51af core-prim . fl>=?) (q51ae core-prim . fl=?) (q51ad core-prim . fl<?) (q51ac core-prim . fl<=?) (q51ab core-prim . fl/) (q51aa core-prim . fl-) (q51a9 core-prim . fl+) (q51a8 core-prim . fl*) (q51a7 core-prim . fixnum->flonum) (q51a6 core-prim . fxzero?) (q51a5 core-prim . fxxor) (q51a4 core-prim . fxrotate-bit-field) (q51a3 core-prim . fxreverse-bit-field) (q51a2 core-prim . fxpositive?) (q51a1 core-prim . fxodd?) (q51a0 core-prim . fxnot) (q519f core-prim . fxnegative?) (q519e core-prim . fxmod0) (q519d core-prim . fxmod) (q519c core-prim . fxmin) (q519b core-prim . fxmax) (q519a core-prim . fxlength) (q5199 core-prim . fxior) (q5198 core-prim . fxif) (q5197 core-prim . fxfirst-bit-set) (q5196 core-prim . fxeven?) (q5195 core-prim . fxdiv0-and-mod0) (q5194 core-prim . fxdiv0) (q5193 core-prim . fxdiv-and-mod) (q5192 core-prim . fxdiv) (q5191 core-prim . fxcopy-bit-field) (q5190 core-prim . fxcopy-bit) (q518f core-prim . fxbit-set?) (q518e core-prim . fxbit-field) (q518d core-prim . fxbit-count) (q518c core-prim . fxarithmetic-shift-right) (q518b core-prim . fxarithmetic-shift-left) (q518a core-prim . fxarithmetic-shift) (q5189 core-prim . fxand) (q5188 core-prim . fx>?) (q5187 core-prim . fx>=?) (q5186 core-prim . fx=?) (q5185 core-prim . fx<?) (q5184 core-prim . fx<=?) (q5183 core-prim . fx-/carry) (q5182 core-prim . fx-) (q5181 core-prim . fx+/carry) (q5180 core-prim . fx+) (q517f core-prim . fx*/carry) (q517e core-prim . fx*) (q517d core-prim . greatest-fixnum) (q517c core-prim . least-fixnum) (q517b core-prim . fixnum-width) (q517a core-prim . fixnum?) (q5179 core-prim . bitwise-rotate-bit-field) (q5178 core-prim . bitwise-reverse-bit-field) (q5177 core-prim . bitwise-length) (q5176 core-prim . bitwise-if) (q5175 core-prim . bitwise-first-bit-set) (q5174 core-prim . bitwise-copy-bit-field) (q5173 core-prim . bitwise-copy-bit) (q5172 core-prim . bitwise-bit-set?) (q5171 core-prim . bitwise-bit-field) (q5170 core-prim . bitwise-bit-count) (q516f core-prim . bitwise-xor) (q516e core-prim . bitwise-ior) (q516d core-prim . bitwise-and) (q516c core-prim . bitwise-not) (q516b core-prim . bitwise-arithmetic-shift-right) (q516a core-prim . bitwise-arithmetic-shift-left) (q5169 core-prim . bitwise-arithmetic-shift) (q5168 core-prim . zero?) (q5167 core-prim . vector?) (q5166 core-prim . vector-set!) (q5165 core-prim . vector-ref) (q5164 core-prim . vector-map) (q5163 core-prim . vector-length) (q5162 core-prim . vector-for-each) (q5161 core-prim . vector-fill!) (q5160 core-prim . vector->list) (q515f core-prim . vector) (q515e core-prim . values) (q515d core-prim . truncate) (q515c core-prim . tan) (q515b core-prim . symbol?) (q515a core-prim . symbol=?) (q5159 core-prim . symbol->string) (q5158 core-prim . substring) (q5157 core-prim . string?) (q5156 core-prim . string>?) (q5155 core-prim . string>=?) (q5154 core-prim . string=?) (q5153 core-prim . string<?) (q5152 core-prim . string<=?) (q5151 core-prim . string-ref) (q5150 core-prim . string-length) (q514f core-prim . string-for-each) (q514e core-prim . string-copy) (q514d core-prim . string-append) (q514c core-prim . string->symbol) (q514b core-prim . string->number) (q514a core-prim . string->list) (q5149 core-prim . string) (q5148 core-prim . sqrt) (q5147 core-prim . sin) (q5146 core-prim . round) (q5145 core-prim . reverse) (q5144 core-prim . real?) (q5143 core-prim . real-valued?) (q5142 core-prim . real-part) (q5141 core-prim . rationalize) (q5140 core-prim . rational?) (q513f core-prim . rational-valued?) (q513e core-prim . procedure?) (q513d core-prim . positive?) (q513c core-prim . pair?) (q513b core-prim . odd?) (q513a core-prim . numerator) (q5139 core-prim . number?) (q5138 core-prim . number->string) (q5137 core-prim . null?) (q5136 core-prim . not) (q5135 core-prim . negative?) (q5134 core-prim . nan?) (q5133 core-prim . min) (q5132 core-prim . max) (q5131 core-prim . map) (q5130 core-prim . make-vector) (q512f core-prim . make-string) (q512e core-prim . make-rectangular) (q512d core-prim . make-polar) (q512c core-prim . magnitude) (q512b core-prim . log) (q512a core-prim . list?) (q5129 core-prim . list-tail) (q5128 core-prim . list-ref) (q5127 core-prim . list->vector) (q5126 core-prim . list->string) (q5125 core-prim . list) (q5124 core-prim . length) (q5123 core-prim . lcm) (q5122 core-prim . integer?) (q5121 core-prim . integer-valued?) (q5120 core-prim . integer->char) (q511f core-prim . infinite?) (q511e core-prim . inexact?) (q511d core-prim . inexact) (q511c core-prim . imag-part) (q511b core-prim . gcd) (q511a core-prim . for-each) (q5119 core-prim . floor) (q5118 core-prim . finite?) (q5117 core-prim . expt) (q5116 core-prim . exp) (q5115 core-prim . exact?) (q5114 core-prim . exact-integer-sqrt) (q5113 core-prim . exact) (q5112 core-prim . even?) (q5111 core-prim . error) (q5110 core-prim . eqv?) (q510f core-prim . equal?) (q510e core-prim . eq?) (q510d core-prim . dynamic-wind) (q510c core-prim . div0-and-mod0) (q510b core-prim . mod0) (q510a core-prim . div0) (q5109 core-prim . div-and-mod) (q5108 core-prim . mod) (q5107 core-prim . div) (q5106 core-prim . denominator) (q5105 core-prim . cos) (q5104 core-prim . cons) (q5103 core-prim . complex?) (q5102 core-prim . char?) (q5101 core-prim . char>?) (q5100 core-prim . char>=?) (q50ff core-prim . char=?) (q50fe core-prim . char<?) (q50fd core-prim . char<=?) (q50fc core-prim . char->integer) (q50fb core-prim . ceiling) (q50fa core-prim . call-with-values) (q50f9 core-prim . call/cc) (q50f8 core-prim . call-with-current-continuation) (q50f7 core-prim . cddddr) (q50f6 core-prim . cdddar) (q50f5 core-prim . cddadr) (q50f4 core-prim . cddaar) (q50f3 core-prim . cdaddr) (q50f2 core-prim . cdadar) (q50f1 core-prim . cdaadr) (q50f0 core-prim . cdaaar) (q50ef core-prim . cadddr) (q50ee core-prim . caddar) (q50ed core-prim . cadadr) (q50ec core-prim . cadaar) (q50eb core-prim . caaddr) (q50ea core-prim . caadar) (q50e9 core-prim . caaadr) (q50e8 core-prim . caaaar) (q50e7 core-prim . cdddr) (q50e6 core-prim . cddar) (q50e5 core-prim . cdadr) (q50e4 core-prim . cdaar) (q50e3 core-prim . caddr) (q50e2 core-prim . cadar) (q50e1 core-prim . caadr) (q50e0 core-prim . caaar) (q50df core-prim . cddr) (q50de core-prim . cdar) (q50dd core-prim . cadr) (q50dc core-prim . caar) (q50db core-prim . cdr) (q50da core-prim . car) (q50d9 core-prim . boolean?) (q50d8 core-prim . boolean=?) (q50d7 core-prim . atan) (q50d6 core-prim . assertion-violation) (q30fb core-prim . assertion-error) (q50d5 core-prim . asin) (q50d4 core-prim . apply) (q50d3 core-prim . append) (q50d2 core-prim . angle) (q50d1 core-prim . acos) (q50d0 core-prim . abs) (q50cf core-prim . /) (q50ce core-prim . *) (q50cd core-prim . -) (q50cc core-prim . +) (q50cb core-prim . >=) (q50ca core-prim . >) (q50c9 core-prim . =) (q50c8 core-prim . <=) (q50c7 core-prim . <) (q50c6 core-prim . library) (q50c5 $core-rtd &no-nans-rtd &no-nans-rcd) (q50c4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (q50c3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (q50c2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (q50c1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (q50c0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (q50bf $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (q50be $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (q50bd $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (q50bc $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (q50bb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (q50ba $core-rtd &i/o-write-rtd &i/o-write-rcd) (q50b9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (q50b8 $core-rtd &i/o-rtd &i/o-rcd) (q50b7 $core-rtd &undefined-rtd &undefined-rcd) (q50b6 $core-rtd &syntax-rtd &syntax-rcd) (q50b5 $core-rtd &lexical-rtd &lexical-rcd) (q50b4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (q50b3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (q50b2 $core-rtd &who-rtd &who-rcd) (q50b1 $core-rtd &irritants-rtd &irritants-rcd) (q50b0 $core-rtd &assertion-rtd &assertion-rcd) (q50af $core-rtd &violation-rtd &violation-rcd) (q50ae $core-rtd &error-rtd &error-rcd) (q50ad $core-rtd &serious-rtd &serious-rcd) (q50ac $core-rtd &warning-rtd &warning-rcd) (q50ab $core-rtd &message-rtd &message-rcd) (q50aa $core-rtd &condition-rtd &condition-rcd) (q50a9 macro . define-condition-type) (q50a8 macro . define-enumeration) (q50a7 macro . define-record-type) (q50a6 macro . parent-rtd) (q50a5 macro . nongenerative) (q50a4 macro . opaque) (q50a3 macro . sealed) (q50a2 macro . protocol) (q50a1 macro . parent) (q50a0 macro . immutable) (q509f macro . mutable) (q509e macro . fields) (q509d macro . error-handling-mode) (q509c macro . file-options) (q509b macro . buffer-mode) (q509a macro . eol-style) (q5099 macro . guard) (q5098 macro . trace-define) (q5097 macro . trace-lambda) (q5096 macro . unsyntax-splicing) (q5095 macro . unsyntax) (q5094 macro . unquote-splicing) (q5093 macro . unquote) (q5092 macro . _) (q5091 macro . else) (q5090 macro . =>) (q508f macro . ...) (q508e macro . assert) (q508d macro . endianness) (q508c macro . delay) (q508b macro . time) (q508a macro . do) (q5089 macro . cond) (q5088 macro . let*) (q5087 macro . let) (q5086 macro . let*-values) (q5085 macro . let-values) (q5084 macro . identifier-syntax) (q5083 macro . with-syntax) (q5082 macro . quasisyntax) (q5081 macro . quasiquote) (q5080 macro . syntax-rules) (q507f macro . include) (q507e macro . define-struct) (q507d core-macro . record-constructor-descriptor) (q507c core-macro . record-type-descriptor) (q507b macro . case) (q507a macro . parameterize) (q5079 macro . unless) (q5078 macro . when) (q5077 core-macro . or) (q5076 core-macro . and) (q5075 core-macro . if) (q5074 core-macro . letrec*) (q5073 core-macro . letrec) (q5072 core-macro . type-descriptor) (q5071 core-macro . case-lambda) (q5070 core-macro . lambda) (q506f core-macro . syntax) (q506e core-macro . syntax-case) (q506d core-macro . quote) (q506c core-macro . foreign-call) (q506b letrec-syntax) (q506a let-syntax) (q5069 set!) (q5068 import) (q5067 begin) (q5066 module) (q5065 define-syntax) (q5064 define)) values values '#f '#f '#f '#f) (q2c63@q2aa4@install-library 'q53a5 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . q5384) (eval-core . q5383) (set-symbol-value! . q5382) (symbol-value . q5381) (gensym . q5380) (void . q537f)) '() values values '#f '#f '#f '#f) (q2c63@q2aa4@install-library 'q53a6 '(mosh) '() '() '() '() '((set-symbol-value! . q5382) (symbol-value . q5381) (regexp? . q537d) (read-line . q537c) (ungensym . q537b) (alist->eq-hash-table . q537a) (assoc-ref . q5379) (print . q5378) (format . q5377) (host-os . q5376) (library-path . q2a83) (standard-library-path . q5375) (file-newer? . q5374) (stat-mtime . q5373) (digit->integer . q536f) (call-with-string-input-port . q536e) (call-with-string-io . q536d) (string-split . q536c) (bytevector-for-each . q536b) (string->regexp . q536a) (rxmatch . q5369) (regexp-replace-all . q5368) (hashtable-for-each . q5367) (set-current-directory! . q5362) (expand-path . q5361) (current-directory . q5360) (p . q5323) (get-timeofday . q530d) (get-command-line . q530c) (sys-display . q530b) (whereis . q530a) (register . q5309) (vm-join! . q5308) (vm-set-value! . q5307) (vm? . q5306) (main-vm? . q5305) (vm-eval . q5304) (vm-self . q5303) (vm-start! . q5302) (make-vm . q5301) (mutex-try-lock! . q5300) (mutex-unlock! . q52ff) (mutex-lock! . q52fe) (mutex? . q52fd) (make-mutex . q52fc) (condition-variable-notify-all! . q52fb) (condition-variable-notify! . q52fa) (condition-variable-wait! . q52f9) (make-condition-variable . q52f8) (mosh-executable-path . q52f7) (make-file-options . q52f6) (source-info . q52f5) (make-compiler-instruction . q52f4) (make-instruction . q52f3) (set-source-info! . q52f2) (bignum? . q52f1) (fast-equal? . q52f0) (fasl-read . q52ef) (fasl-write . q52ee) (time-usage . q52ed) (os-constant . q52ec) (time . q508b) (include . q507f)) '() values values '#f '#f '#f '#f) (q2c63@q2aa4@install-library 'q53a7 '(system) '() '() '() '() '((write-to-file . q5372) (file->list . q5371) (file->string . q5370) (call-process . q5366) (local-tz-offset . q5365) (microseconds . q5364) (directory-list . q5363) (expand-path . q5361) (%spawn . q535f) (%waitpid . q535e) (simple-struct-name . q535d) (simple-struct-set! . q535c) (simple-struct-ref . q535b) (make-simple-struct . q535a) (simple-struct? . q5359) (pointer-ref-c-int64 . q5358) (pointer-ref-c-int32 . q5357) (pointer-ref-c-int16 . q5356) (pointer-ref-c-int8 . q5355) (pointer-ref-c-uint64 . q5354) (pointer-ref-c-uint32 . q5353) (pointer-ref-c-uint16 . q5352) (pointer-ref-c-uint8 . q5351) (pointer-set-c-uint64! . q5350) (pointer-set-c-uint32! . q534f) (pointer-set-c-uint16! . q534e) (pointer-set-c-uint8! . q534d) (pointer-set-c-int64! . q534c) (pointer-set-c-int32! . q534b) (pointer-set-c-int16! . q534a) (pointer-set-c-int8! . q5349) (pointer-set-c-pointer! . q5348) (pointer-set-c-double! . q5347) (pointer-set-c-float! . q5346) (pointer-set-c-long-long! . q5345) (pointer-set-c-long! . q5344) (pointer-set-c-int! . q5343) (pointer-set-c-short! . q5342) (pointer-set-c-char! . q5341) (pointer-ref-c-pointer . q5340) (pointer-ref-c-double . q533f) (pointer-ref-c-float . q533e) (pointer-ref-c-unsigned-long-long . q533d) (pointer-ref-c-signed-long-long . q533c) (pointer-ref-c-unsigned-long . q533b) (pointer-ref-c-signed-long . q533a) (pointer-ref-c-unsigned-int . q5339) (pointer-ref-c-signed-int . q5338) (pointer-ref-c-unsigned-short . q5337) (pointer-ref-c-signed-short . q5336) (pointer-ref-c-unsigned-char . q5335) (pointer-ref-c-signed-char . q5334) (pointer->integer . q5333) (integer->pointer . q5332) (pointer? . q5331) (shared-errno . q5330) (%ffi-supported? . q532f) (%ffi-pointer->string . q532e) (%ffi-call->string-or-zero . q532d) (%ffi-call->double . q532c) (%ffi-call->void* . q532b) (%ffi-call->void . q532a) (%ffi-call->char . q5329) (%ffi-call->int . q5328) (%ffi-lookup . q5327) (%ffi-open . q5326) (%fork . q5325) (%pipe . q5324) (open-output-string . q5322) (get-output-string . q5321) (file-stat-ctime . q5320) (file-stat-atime . q531f) (file-stat-mtime . q531e) (file-size-in-bytes . q531d) (file-writable? . q531c) (file-executable? . q531b) (file-readable? . q531a) (file-regular? . q5319) (file-symbolic-link? . q5318) (file-directory? . q5317) (create-symbolic-link . q5316) (rename-file . q5315) (delete-directory . q5314) (create-directory . q5313) (get-environment-variables . q5312) (get-environment-variable . q5311) (id->real-label . q5310) (same-marks? . q530f) (same-marks*? . q530e) (make-parameter . q2890) (socket-port . q52eb) (socket-shutdown . q52ea) (socket-close . q52e9) (socket-send . q52e8) (socket-recv! . q52e7) (socket-recv . q52e6) (make-server-socket . q52e5) (make-client-socket . q52e4) (socket-accept . q52e3) (socket? . q52e2) (parameterize . q507a)) '() values values '#f '#f '#f '#f))
((lambda (q4f2d@add-library-path! q4f2f@parse-and-add-library-path q4f31@for-each-with-index q4f33@rpad q4f35@condition-printer q4f37@record->field-alist q4f39@map-with-index q4f3b@repl q4f3d@trace-printer q4f3f@command-line q4f41@local-library-path q4f43@load/args q4f45@load q4f47@ironscheme-build q4f49@eval-top-level q4f4b@compile-system-libraries q4f4d@compile q4f4f@compile->closure q4f51@pre-compile-r6rs-file q4f53@load-r6rs-top-level q4f55@load-r6rs-top-level-sexp) (begin (set! q4f2d@add-library-path! (lambda (q4f78@path) (q2c53@q2a84@library-path (append (q2c53@q2a84@library-path) (list q4f78@path))))) (set! q4f2f@parse-and-add-library-path (lambda (q4f7a@paths q4f7b@message) ((lambda (q4f7e@t) (if q4f7e@t ((lambda (q4f80@paths) (for-each (lambda (q4f82@path) (if (file-exists? q4f82@path) (q4f2d@add-library-path! (expand-path q4f82@path)) (format (current-error-port) q4f7b@message q4f82@path))) (string-split q4f80@paths '#\:))) q4f7e@t) (void))) q4f7a@paths))) (set! q4f31@for-each-with-index (lambda (q4f84@proc q4f85@lst) (letrec ((q4f88@loop (lambda (q4f8a@i q4f8b@lst) (if (null? q4f8b@lst) (if '#f '#f (void)) (begin (q4f84@proc q4f8a@i (car q4f8b@lst)) (q4f88@loop (+ q4f8a@i '1) (cdr q4f8b@lst))))))) (q4f88@loop '1 q4f85@lst)))) (set! q4f33@rpad (lambda (q4f8e@str q4f8f@pad q4f90@n) ((lambda (q4f94@rest) ((letrec ((q4f96@loop (lambda (q4f98@rest q4f99@ret) (if (<= q4f98@rest '0) q4f99@ret (q4f96@loop (- q4f98@rest '1) (string-append q4f99@ret q4f8f@pad)))))) q4f96@loop) q4f94@rest (format '"~a" q4f8e@str))) (- q4f90@n (string-length (format '"~a" q4f8e@str)))))) (set! q4f35@condition-printer (lambda (q4f9c@e q4f9d@port) ((lambda (q4fa1@max-condition-len) (begin (set! q4fa1@max-condition-len (apply max (map (lambda (q4fb2@c) (string-length (symbol->string (record-type-name (record-rtd q4fb2@c))))) (simple-conditions q4f9c@e)))) (begin (display '" Condition components:\n" q4f9d@port) (q4f31@for-each-with-index (lambda (q4fa2@i q4fa3@x) ((lambda (q4fa6@rtd q4fa7@fields-alist) (begin (format q4f9d@port '" ~d. ~a" q4fa2@i (q4f33@rpad (symbol->string (record-type-name q4fa6@rtd)) '" " q4fa1@max-condition-len)) (if (null? q4fa7@fields-alist) (newline q4f9d@port) (void)) ((letrec ((q4faa@loop (lambda (q4fac@first q4fad@fields-alist) (if (null? q4fad@fields-alist) '() ((lambda (q4fb0@field) (begin (if (not q4fac@first) (display (q4f33@rpad '"" '" " (+ '4 q4fa1@max-condition-len)) q4f9d@port) (void)) (display '"       " q4f9d@port) (display (car q4fb0@field) q4f9d@port) (display '": " q4f9d@port) (write (cdr q4fb0@field) q4f9d@port) (newline q4f9d@port) (q4faa@loop '#f (cdr q4fad@fields-alist)))) (car q4fad@fields-alist)))))) q4faa@loop) '#t q4fa7@fields-alist))) (record-rtd q4fa3@x) (q4f37@record->field-alist q4fa3@x))) (simple-conditions q4f9c@e))))) '#f))) (set! q4f37@record->field-alist (lambda (q4fb4@r) ((lambda (q4fb7@ref) (begin (set! q4fb7@ref (lambda (q4fc2@rtd q4fc3@i q4fc4@x) ((lambda (q4fc8@val) (if (symbol? q4fc8@val) (ungensym q4fc8@val) q4fc8@val)) ((record-accessor q4fc2@rtd q4fc3@i) q4fc4@x)))) ((letrec ((q4fb8@loop (lambda (q4fba@ret q4fbb@rtd) (if q4fbb@rtd (q4fb8@loop (append q4fba@ret (q4f39@map-with-index (lambda (q4fbe@i q4fbf@field) (cons q4fbf@field (q4fb7@ref q4fbb@rtd q4fbe@i q4fb4@r))) (vector->list (record-type-field-names q4fbb@rtd)))) (record-type-parent q4fbb@rtd)) q4fba@ret)))) q4fb8@loop) '() (record-rtd q4fb4@r)))) '#f))) (set! q4f39@map-with-index (lambda (q4fca@proc q4fcb@lst) ((letrec ((q4fce@loop (lambda (q4fd0@i q4fd1@lst q4fd2@ret) (if (null? q4fd1@lst) (reverse q4fd2@ret) (q4fce@loop (+ q4fd0@i '1) (cdr q4fd1@lst) (cons (q4fca@proc q4fd0@i (car q4fd1@lst)) q4fd2@ret)))))) q4fce@loop) '0 q4fcb@lst '()))) (set! q4f3b@repl (lambda q4fd6@x ((lambda (q4fd9@rec) (begin (set! q4fd9@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (q4fdc@q4fda) (lambda () (with-exception-handler (lambda (q4fde@e) ((call/cc (lambda (q4fe0@q4fdb) (q4fdc@q4fda (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? q4fde@e) (q4f35@condition-printer q4fde@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" q4fde@e))) (q4fe0@q4fdb (lambda () (raise-continuable q4fde@e)))))))))) (lambda () ((letrec ((q4fe2@loop (lambda (q4fe4@line q4fe5@accum) ((lambda (q4fe9@parentheses-ok? q4feb@eval-string-print) (begin (set! q4fe9@parentheses-ok? (lambda (q4ff0@text) ((letrec ((q4ff2@loop (lambda (q4ff4@chars q4ff5@p0 q4ff6@p1) (if (null? q4ff4@chars) (= '0 q4ff5@p0 q4ff6@p1) ((lambda (q4ffa@t) (if (memv q4ffa@t '(#\()) (q4ff2@loop (cdr q4ff4@chars) (+ q4ff5@p0 '1) q4ff6@p1) (if (memv q4ffa@t '(#\))) (q4ff2@loop (cdr q4ff4@chars) (- q4ff5@p0 '1) q4ff6@p1) (if (memv q4ffa@t '(#\[)) (q4ff2@loop (cdr q4ff4@chars) q4ff5@p0 (+ q4ff6@p1 '1)) (if (memv q4ffa@t '(#\])) (q4ff2@loop (cdr q4ff4@chars) q4ff5@p0 (- q4ff6@p1 '1)) (q4ff2@loop (cdr q4ff4@chars) q4ff5@p0 q4ff6@p1)))))) (car q4ff4@chars)))))) q4ff2@loop) (string->list q4ff0@text) '0 '0))) (set! q4feb@eval-string-print (lambda (q4fee@text) (if (not (or (string=? '"\n" q4fee@text) (= '0 (string-length q4fee@text)))) (write (q4f49@eval-top-level (call-with-port (open-string-input-port q4fee@text) read))) (void)))) (if (eof-object? q4fe4@line) (begin (q4feb@eval-string-print q4fe5@accum) (exit)) ((lambda (q4fec@current) (if (q4fe9@parentheses-ok? q4fec@current) (q4feb@eval-string-print q4fec@current) (q4fe2@loop (get-line (current-input-port)) q4fec@current))) (string-append q4fe5@accum q4fe4@line))))) '#f '#f)))) q4fe2@loop) (get-line (current-input-port)) '""))))))) (newline) (q4fd9@rec)))) (q4fd9@rec))) '#f))) (set! q4f3d@trace-printer (q2995@q2891@make-parameter write)) (set! q4f3f@command-line (q2995@q2891@make-parameter (get-command-line))) (set! q4f41@local-library-path (lambda (q4ffc@filename) (q2c53@q2a84@library-path))) (set! q4f43@load/args (lambda (q4ffe@filename . q5000@args) (begin (apply q4f53@load-r6rs-top-level q4ffe@filename 'load q5000@args) (void)))) (set! q4f45@load (lambda (q5002@filename) (begin (apply q4f53@load-r6rs-top-level q5002@filename 'load (q4f3f@command-line)) (void)))) (set! q4f47@ironscheme-build (lambda () (q4f45@load '"ironscheme-buildscript.ss"))) (set! q4f49@eval-top-level (lambda (q5004@x) (q4b59@q30e2@eval q5004@x (q4b6f@q310e@interaction-environment)))) (set! q4f4b@compile-system-libraries (lambda () (q4f49@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! q4f4d@compile (lambda (q5006@filename) (q4f53@load-r6rs-top-level q5006@filename 'compile))) (set! q4f4f@compile->closure (lambda (q5008@filename) (q4f53@load-r6rs-top-level q5008@filename 'closure))) (set! q4f51@pre-compile-r6rs-file (lambda (q500a@filename) (q4f53@load-r6rs-top-level q500a@filename 'compile))) (set! q4f53@load-r6rs-top-level (lambda (q500c@filename q500d@how . q5010@args) ((lambda (q5016@q5013 q5017@q5015) ((lambda (q501a@swap) (dynamic-wind q501a@swap (lambda () ((lambda (q501c@x*) ((lambda (q501e@t) (if (memv q501e@t '(closure)) (q4b6e@q310c@pre-compile-r6rs-top-level q501c@x*) (if (memv q501e@t '(load)) ((lambda (q5024@q5021 q5025@q5023) ((lambda (q5028@swap) (dynamic-wind q5028@swap (lambda () ((q4b6d@q310a@compile-r6rs-top-level q501c@x*))) q5028@swap)) (lambda () ((lambda (q502a@t) (begin (q5024@q5021 q5025@q5023) (set! q5025@q5023 q502a@t))) (q5024@q5021))))) q4f3f@command-line (cons q500c@filename (car q5010@args))) (if (memv q501e@t '(compile)) (begin (q4b6d@q310a@compile-r6rs-top-level q501c@x*) (q2c57@q2a8c@serialize-all q2990@q2887@serialize-library q29eb@q29a4@compile-core-expr)) (if '#f '#f (void)))))) q500d@how)) (with-input-from-file q500c@filename (lambda () ((letrec ((q502c@f (lambda () ((lambda (q502e@x) (if (eof-object? q502e@x) '() (cons q502e@x (q502c@f)))) (q2988@q2877@read-annotated))))) q502c@f)))))) q501a@swap)) (lambda () ((lambda (q5030@t) (begin (q5016@q5013 q5017@q5015) (set! q5017@q5015 q5030@t))) (q5016@q5013))))) q2c53@q2a84@library-path (q4f41@local-library-path q500c@filename)))) (set! q4f55@load-r6rs-top-level-sexp (lambda (q5032@import-spec q5033@thunk) ((lambda (q503a@q5037 q503b@q5039) ((lambda (q503e@swap) (dynamic-wind q503e@swap (lambda () ((lambda (q5044@q5041 q5045@q5043) ((lambda (q5048@swap) (dynamic-wind q5048@swap (lambda () ((q4b6d@q310a@compile-r6rs-top-level (list (cons 'import q5032@import-spec) (list q5033@thunk))))) q5048@swap)) (lambda () ((lambda (q504a@t) (begin (q5044@q5041 q5045@q5043) (set! q5045@q5043 q504a@t))) (q5044@q5041))))) q4f3f@command-line '())) q503e@swap)) (lambda () ((lambda (q504c@t) (begin (q503a@q5037 q503b@q5039) (set! q503b@q5039 q504c@t))) (q503a@q5037))))) q2c53@q2a84@library-path (q4f41@local-library-path '"")))) (begin (set! q5062@q4f55@load-r6rs-top-level-sexp q4f55@load-r6rs-top-level-sexp) (set! q5061@q4f53@load-r6rs-top-level q4f53@load-r6rs-top-level) (set! q5060@q4f51@pre-compile-r6rs-file q4f51@pre-compile-r6rs-file) (set! q505f@q4f4f@compile->closure q4f4f@compile->closure) (set! q505e@q4f4d@compile q4f4d@compile) (set! q505d@q4f4b@compile-system-libraries q4f4b@compile-system-libraries) (set! q505c@q4f49@eval-top-level q4f49@eval-top-level) (set! q505b@q4f47@ironscheme-build q4f47@ironscheme-build) (set! q505a@q4f45@load q4f45@load) (set! q5059@q4f43@load/args q4f43@load/args) (set! q5058@q4f41@local-library-path q4f41@local-library-path) (set! q5057@q4f3f@command-line q4f3f@command-line) (set! q5056@q4f3d@trace-printer q4f3d@trace-printer) (set! q5055@q4f3b@repl q4f3b@repl) (set! q5054@q4f39@map-with-index q4f39@map-with-index) (set! q5053@q4f37@record->field-alist q4f37@record->field-alist) (set! q5052@q4f35@condition-printer q4f35@condition-printer) (set! q5051@q4f33@rpad q4f33@rpad) (set! q5050@q4f31@for-each-with-index q4f31@for-each-with-index) (set! q504f@q4f2f@parse-and-add-library-path q4f2f@parse-and-add-library-path) (set! q504e@q4f2d@add-library-path! q4f2d@add-library-path!) (q2c58@q2a8e@current-precompiled-library-loader q2991@q2889@load-serialized-library) (set-symbol-value! 'load q4f45@load) (set-symbol-value! 'pre-compile-r6rs-file q4f51@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs q4f49@eval-top-level) (set-symbol-value! 'int-env-syms q4b50@q30d0@interaction-environment-symbols) (set-symbol-value! 'expanded2core q29ea@q29a2@expanded->core) (set-symbol-value! 'trace-printer q4f3d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (q4f56@c) (condition (q4e8a@q4c94@make-non-continuable-violation) (q4e80@q4c7b@make-who-condition 'raise) (q4e44@q4bdc@make-message-condition '"returned from non-continuable exception") (q4e76@q4c60@make-irritants-condition (list q4f56@c))))) (q4f2f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (q4f2f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (q4f2d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (q4f2d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (q4f2d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (q4f58@prefix) (q2c54@q2a86@library-extensions (q4f58@prefix '".mosh" (q2c54@q2a86@library-extensions)))) (lambda (q4f5a@ext q4f5b@ls) (append (map (lambda (q4f5e@x) (string-append q4f5a@ext q4f5e@x)) q4f5b@ls) q4f5b@ls))) ((lambda (q4f60@args q4f61@port) ((lambda (q4f65@ref) (begin (set! q4f65@ref (lambda (q4f70@rtd q4f71@i q4f72@x) ((lambda (q4f76@val) (if (symbol? q4f76@val) (ungensym q4f76@val) q4f76@val)) ((record-accessor q4f70@rtd q4f71@i) q4f72@x)))) (with-exception-handler (lambda (q4f66@c) (if (condition? q4f66@c) (q4f35@condition-printer q4f66@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" q4f66@c))) (lambda () (if ((call/cc (lambda (q4f6a@q4f68) (lambda () (with-exception-handler (lambda (q4f6c@c) ((call/cc (lambda (q4f6e@q4f69) (q4f6a@q4f68 (lambda () (if '#t '#f (q4f6e@q4f69 (lambda () (raise-continuable q4f6c@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (q4f55@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? q4f60@args) (q4f3b@repl) (q4f53@load-r6rs-top-level (car q4f60@args) 'load (cdr q4f60@args)))))))) '#f)) (q4f3f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
